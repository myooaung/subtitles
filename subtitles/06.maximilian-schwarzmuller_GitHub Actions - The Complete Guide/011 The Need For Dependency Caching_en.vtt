WEBVTT
1
00:00:02.130 --> 00:00:05.190
Now to conclude this course section,

2
00:00:05.190 --> 00:00:09.030
I want to dive in another important data-related topic

3
00:00:09.030 --> 00:00:11.343
and that would be dependency caching.

4
00:00:12.450 --> 00:00:16.110
If you take a look at the workflows I ran here,

5
00:00:16.110 --> 00:00:19.560
you will notice that they all took around a minute

6
00:00:19.560 --> 00:00:21.120
to execute.

7
00:00:21.120 --> 00:00:23.610
Sometimes a bit faster, sometimes a bit slower,

8
00:00:23.610 --> 00:00:25.203
but always around a minute.

9
00:00:26.130 --> 00:00:27.720
Now, it took around a minute here

10
00:00:27.720 --> 00:00:32.159
because these were all relatively simple jobs

11
00:00:32.159 --> 00:00:34.110
in these workflows, but, of course,

12
00:00:34.110 --> 00:00:37.860
I have three jobs running after each other.

13
00:00:37.860 --> 00:00:40.500
So therefore, since they're not running in parallel,

14
00:00:40.500 --> 00:00:42.180
it's the sum of the jobs

15
00:00:42.180 --> 00:00:44.970
that's taken to complete the workflow,

16
00:00:44.970 --> 00:00:48.570
plus additional setup and cleanup work

17
00:00:48.570 --> 00:00:51.030
that is done by GitHub Actions.

18
00:00:51.030 --> 00:00:54.570
Now, running the jobs in parallel wouldn't be an option here

19
00:00:54.570 --> 00:00:57.450
because indeed these jobs depend on each other

20
00:00:57.450 --> 00:00:59.670
and that will often be the case.

21
00:00:59.670 --> 00:01:00.990
Nonetheless, if we take a look

22
00:01:00.990 --> 00:01:03.270
at the workflow definition file,

23
00:01:03.270 --> 00:01:05.910
you will notice that there are some steps

24
00:01:05.910 --> 00:01:07.830
that are always repeated.

25
00:01:07.830 --> 00:01:09.690
For example, getting the code

26
00:01:09.690 --> 00:01:12.060
and installing the dependencies.

27
00:01:12.060 --> 00:01:14.820
Now, getting the code is something we simply have to do

28
00:01:14.820 --> 00:01:17.250
in every job because, as you learned,

29
00:01:17.250 --> 00:01:21.990
every job runs on its own runner, its own separate machine,

30
00:01:21.990 --> 00:01:24.180
so therefore we have to get the code again

31
00:01:24.180 --> 00:01:26.430
and again every time.

32
00:01:26.430 --> 00:01:28.530
But this is also relatively fast

33
00:01:28.530 --> 00:01:30.480
and shouldn't be a huge issue.

34
00:01:30.480 --> 00:01:33.330
If we take a look at our jobs here,

35
00:01:33.330 --> 00:01:37.110
we see that getting the code only takes around one second,

36
00:01:37.110 --> 00:01:39.453
so that's not really too slow.

37
00:01:40.320 --> 00:01:43.890
What is slower is the installation of dependencies.

38
00:01:43.890 --> 00:01:47.100
It takes 12 seconds here in the build job,

39
00:01:47.100 --> 00:01:50.790
in the test job it took eight seconds here

40
00:01:50.790 --> 00:01:52.920
in this workflow run.

41
00:01:52.920 --> 00:01:54.570
So if we take a look at all the steps,

42
00:01:54.570 --> 00:01:56.820
we see that installing the dependencies

43
00:01:56.820 --> 00:02:01.020
is actually the step that takes the longest.

44
00:02:01.020 --> 00:02:05.370
So if we would be able to kind of shorten this step,

45
00:02:05.370 --> 00:02:07.860
if we could reduce the duration it takes

46
00:02:07.860 --> 00:02:09.630
to install the dependencies,

47
00:02:09.630 --> 00:02:11.190
we could save a lot of time

48
00:02:11.190 --> 00:02:14.310
for the overall workflow execution.

49
00:02:14.310 --> 00:02:16.020
And even though we're not paying for it

50
00:02:16.020 --> 00:02:17.460
here in the free plan,

51
00:02:17.460 --> 00:02:20.340
reducing the overall workflow duration

52
00:02:20.340 --> 00:02:22.680
might still be something you aim for,

53
00:02:22.680 --> 00:02:24.930
because ultimately it would also mean

54
00:02:24.930 --> 00:02:28.530
that your website gets deployed faster.

55
00:02:28.530 --> 00:02:31.770
And, of course, if you are paying for your workflows,

56
00:02:31.770 --> 00:02:34.290
then you have an even stronger incentive

57
00:02:34.290 --> 00:02:38.673
to reduce the amount of time your workflow execution takes.

58
00:02:39.630 --> 00:02:41.520
Now, no matter what you're doing,

59
00:02:41.520 --> 00:02:45.120
if you're building a website or other kinds of apps,

60
00:02:45.120 --> 00:02:48.450
it's pretty common that you have some step

61
00:02:48.450 --> 00:02:52.410
like the dependency installation step we have at here.

62
00:02:52.410 --> 00:02:56.640
Very often you must install third party dependencies

63
00:02:56.640 --> 00:03:00.780
or run some setup scripts that generate some files.

64
00:03:00.780 --> 00:03:04.710
This is pretty common for most CI/CD workflows.

65
00:03:04.710 --> 00:03:06.810
And a great way of speeding up

66
00:03:06.810 --> 00:03:10.170
that installation process for those dependencies

67
00:03:10.170 --> 00:03:13.230
is to cache those dependencies.

68
00:03:13.230 --> 00:03:17.370
Because if you got two workflows that do different things

69
00:03:17.370 --> 00:03:21.090
but have this shared step of installing dependencies,

70
00:03:21.090 --> 00:03:23.430
which tends to take a bit longer

71
00:03:23.430 --> 00:03:26.160
and which produces files that are needed

72
00:03:26.160 --> 00:03:28.350
by the other steps in the jobs,

73
00:03:28.350 --> 00:03:32.610
if you have something like this, then it makes sense

74
00:03:32.610 --> 00:03:36.540
to only install those dependencies once in one job

75
00:03:36.540 --> 00:03:39.240
and then cache them so that other jobs

76
00:03:39.240 --> 00:03:42.600
can reuse those cached dependencies.

77
00:03:42.600 --> 00:03:46.350
Because those dependencies typically don't change frequently

78
00:03:46.350 --> 00:03:49.920
and therefore you can save time if you do cache them

79
00:03:49.920 --> 00:03:53.730
so that the cached dependencies can be reused thereafter

80
00:03:53.730 --> 00:03:55.800
instead of being downloaded again,

81
00:03:55.800 --> 00:03:58.830
which is the part that takes rather long.

82
00:03:58.830 --> 00:04:01.590
And it's not just caching across different jobs

83
00:04:01.590 --> 00:04:05.340
that matters here, you can actually also cache dependencies

84
00:04:05.340 --> 00:04:10.340
or files and folders in general across workflow executions,

85
00:04:10.350 --> 00:04:12.720
because if you have certain files and folders

86
00:04:12.720 --> 00:04:16.769
that don't change at all across different workflows,

87
00:04:16.769 --> 00:04:19.980
it makes sense to cache them across different workflows

88
00:04:19.980 --> 00:04:22.590
so that they don't have to be re-downloaded

89
00:04:22.590 --> 00:04:25.260
or recreated all the time.

90
00:04:25.260 --> 00:04:27.270
And this is such a common scenario

91
00:04:27.270 --> 00:04:30.330
that GitHub Actions has an official action

92
00:04:30.330 --> 00:04:33.450
that helps with caching files and folders

93
00:04:33.450 --> 00:04:36.240
across jobs and workflows.

94
00:04:36.240 --> 00:04:39.513
And it's this cache action which we're going to use now.

