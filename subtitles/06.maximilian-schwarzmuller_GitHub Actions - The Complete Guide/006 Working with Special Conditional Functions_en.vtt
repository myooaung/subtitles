WEBVTT
1
00:00:02.040 --> 00:00:05.910
GitHub actions has four special functions

2
00:00:05.910 --> 00:00:08.189
which you can use typically in your if conditions

3
00:00:08.189 --> 00:00:10.200
to be precise.

4
00:00:10.200 --> 00:00:13.950
Failure, for example, the function we just saw in our code,

5
00:00:13.950 --> 00:00:16.590
in our workflow always returns true

6
00:00:16.590 --> 00:00:19.923
when any previous step or job failed.

7
00:00:20.880 --> 00:00:24.720
Success returns true when none of the previous steps

8
00:00:24.720 --> 00:00:26.460
have failed.

9
00:00:26.460 --> 00:00:29.040
Always, always returns true.

10
00:00:29.040 --> 00:00:32.189
So it makes sure that any job or step that uses

11
00:00:32.189 --> 00:00:35.520
always in its condition will always execute.

12
00:00:35.520 --> 00:00:40.140
And canceled returns true if a workflow has been canceled.

13
00:00:40.140 --> 00:00:43.440
So these functions can be used in your conditions

14
00:00:43.440 --> 00:00:46.290
to ensure that certain steps only run

15
00:00:46.290 --> 00:00:48.990
when other steps failed or succeeded,

16
00:00:48.990 --> 00:00:51.810
or that they always run or only run

17
00:00:51.810 --> 00:00:53.943
if a workflow has been canceled.

18
00:00:54.870 --> 00:00:57.840
Now by adding failure to this condition here

19
00:00:57.840 --> 00:01:00.780
we make sure that GitHub actions realizes

20
00:01:00.780 --> 00:01:04.050
that this step should still be evaluated

21
00:01:04.050 --> 00:01:08.400
if we have failing steps or jobs before that step.

22
00:01:08.400 --> 00:01:10.950
And it then also takes this second condition here

23
00:01:10.950 --> 00:01:14.940
into account since I combined them logically with the end.

24
00:01:14.940 --> 00:01:19.050
So if for some reason installing the dependencies would fail

25
00:01:19.050 --> 00:01:21.930
failure would still return true but this condition

26
00:01:21.930 --> 00:01:24.930
would not return true because this step here

27
00:01:24.930 --> 00:01:27.420
running our tests wouldn't have failed

28
00:01:27.420 --> 00:01:29.640
because it would've been skipped instead

29
00:01:29.640 --> 00:01:32.430
if installing dependencies failed.

30
00:01:32.430 --> 00:01:35.010
And therefore uploading test report would not run

31
00:01:35.010 --> 00:01:38.460
if installing dependencies or restoring the cache

32
00:01:38.460 --> 00:01:40.053
or getting the code failed.

33
00:01:40.920 --> 00:01:45.000
But if running our tests failed, then failure returns true

34
00:01:45.000 --> 00:01:48.000
and leads to GitHub actions evaluating that step.

35
00:01:48.000 --> 00:01:49.620
And then this condition makes sure

36
00:01:49.620 --> 00:01:53.550
that this step is executed if run tests is the reason

37
00:01:53.550 --> 00:01:58.550
for this job failing, so if that is the step that failed.

38
00:01:58.680 --> 00:02:03.680
So now if we save everything and we create another commit

39
00:02:05.580 --> 00:02:09.092
where we added failure, we can push this.

40
00:02:10.800 --> 00:02:13.680
And now we'll see that our action of course

41
00:02:13.680 --> 00:02:18.680
is triggered again, but this time in this test job,

42
00:02:18.750 --> 00:02:23.430
it should run this upload report step even though

43
00:02:23.430 --> 00:02:25.530
we are failing to run our tests

44
00:02:25.530 --> 00:02:29.253
because we added this special failure expression.

45
00:02:30.660 --> 00:02:32.610
So here our test code failed

46
00:02:32.610 --> 00:02:36.510
but now you see upload test report still executed.

47
00:02:36.510 --> 00:02:40.410
That step was still executed, it was not skipped

48
00:02:40.410 --> 00:02:44.640
and therefore, for the overall action here, added failure

49
00:02:44.640 --> 00:02:47.760
we also can retrieve our test report

50
00:02:47.760 --> 00:02:51.330
as an artifact down there because it was uploaded

51
00:02:51.330 --> 00:02:53.850
despite this job failing,

52
00:02:53.850 --> 00:02:56.520
or actually not despite this job failing

53
00:02:56.520 --> 00:02:58.680
but because that job failed.

54
00:02:58.680 --> 00:03:01.770
Because in our condition we clearly specified

55
00:03:01.770 --> 00:03:04.590
that uploading test reports should only run

56
00:03:04.590 --> 00:03:06.243
if that step failed.

