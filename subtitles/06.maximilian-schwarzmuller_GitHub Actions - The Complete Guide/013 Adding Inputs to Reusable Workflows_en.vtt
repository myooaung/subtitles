WEBVTT
1
00:00:02.430 --> 00:00:05.100
So that's how we can use reusable workflows,

2
00:00:05.100 --> 00:00:08.400
but that's not the only thing we can do with them.

3
00:00:08.400 --> 00:00:11.730
Of course, when you use a reusable workflow,

4
00:00:11.730 --> 00:00:13.920
it's not unrealistic to assume

5
00:00:13.920 --> 00:00:16.110
that you also need some data

6
00:00:16.110 --> 00:00:18.630
in that reusable workflow.

7
00:00:18.630 --> 00:00:19.560
For example here,

8
00:00:19.560 --> 00:00:22.170
if we are really deploying code,

9
00:00:22.170 --> 00:00:23.970
if we're uploading code,

10
00:00:23.970 --> 00:00:27.480
then we need that code that should be uploaded.

11
00:00:27.480 --> 00:00:29.520
Now in use reuse YAML,

12
00:00:29.520 --> 00:00:32.130
I'm generating that code with the build step,

13
00:00:32.130 --> 00:00:34.203
and I'm uploading it as a artifact.

14
00:00:35.190 --> 00:00:36.600
Now to get and use,

15
00:00:36.600 --> 00:00:39.180
and eventually upload that code,

16
00:00:39.180 --> 00:00:42.060
I need to download that artifact.

17
00:00:42.060 --> 00:00:43.560
So in reusable YAML,

18
00:00:43.560 --> 00:00:45.870
we could of course add a new step,

19
00:00:45.870 --> 00:00:47.610
where we say get code,

20
00:00:47.610 --> 00:00:48.510
and then here,

21
00:00:48.510 --> 00:00:52.530
we use the download artifact action,

22
00:00:52.530 --> 00:00:56.130
which we also saw in action before in this course.

23
00:00:56.130 --> 00:00:58.500
But we now need to configure this action

24
00:00:58.500 --> 00:01:01.620
and provide the key of the artifact,

25
00:01:01.620 --> 00:01:02.883
which we wanna download.

26
00:01:03.930 --> 00:01:06.060
Now, if you take a look at the other workflow,

27
00:01:06.060 --> 00:01:09.060
we see that the key is a dist-files.

28
00:01:09.060 --> 00:01:12.693
So of course, we can add that here as a name, right?

29
00:01:13.710 --> 00:01:14.850
Well the problem is that

30
00:01:14.850 --> 00:01:17.970
now this workflow isn't really reusable,

31
00:01:17.970 --> 00:01:20.580
we can only use it in other workflows

32
00:01:20.580 --> 00:01:25.320
that do upload artifacts with a key of dist-files,

33
00:01:25.320 --> 00:01:28.290
and that might not always be the case.

34
00:01:28.290 --> 00:01:31.140
We might be using different artifact identifiers

35
00:01:31.140 --> 00:01:32.910
in different workflows,

36
00:01:32.910 --> 00:01:35.670
and whenever we use anything but dist-files,

37
00:01:35.670 --> 00:01:38.070
this workflow would not be usable there,

38
00:01:38.070 --> 00:01:42.360
because here we're only looking for a dist-files artifact.

39
00:01:42.360 --> 00:01:45.330
So instead of hard coding the artifact name here,

40
00:01:45.330 --> 00:01:47.160
this should be dynamic.

41
00:01:47.160 --> 00:01:48.780
It should be resolved with help

42
00:01:48.780 --> 00:01:51.300
of a GitHub Actions expression.

43
00:01:51.300 --> 00:01:54.300
But that of course means that we must get some data

44
00:01:54.300 --> 00:01:57.750
from the workflow that's using this reusable workflow.

45
00:01:57.750 --> 00:02:02.220
We must get the artifact name from that other workflow.

46
00:02:02.220 --> 00:02:04.800
So you can think of that reusable workflow

47
00:02:04.800 --> 00:02:08.100
as a function that's called by the workflow,

48
00:02:08.100 --> 00:02:10.413
that's using that reusable workflow.

49
00:02:11.490 --> 00:02:14.760
Now thankfully, when using the workflow call event

50
00:02:14.760 --> 00:02:17.460
you can add some extra information to it.

51
00:02:17.460 --> 00:02:20.190
For that, you nest it like this,

52
00:02:20.190 --> 00:02:23.640
and now under workflow call here,

53
00:02:23.640 --> 00:02:25.860
we can add the inputs key,

54
00:02:25.860 --> 00:02:27.960
which is a reserved word.

55
00:02:27.960 --> 00:02:29.220
And under inputs,

56
00:02:29.220 --> 00:02:30.780
you can add any inputs

57
00:02:30.780 --> 00:02:33.540
this reusable workflow needs.

58
00:02:33.540 --> 00:02:34.530
For example here,

59
00:02:34.530 --> 00:02:37.560
we could expect to get the artifact name,

60
00:02:37.560 --> 00:02:39.510
and this key is now up to you again,

61
00:02:39.510 --> 00:02:42.870
you can add any inputs you want here.

62
00:02:42.870 --> 00:02:45.270
But here, we need the artifact name,

63
00:02:45.270 --> 00:02:47.220
and then nested under that,

64
00:02:47.220 --> 00:02:49.620
we can add a description

65
00:02:49.620 --> 00:02:53.100
where we could specify what exactly is expected here,

66
00:02:53.100 --> 00:02:58.023
the name of the deployable artifact files, for example.

67
00:02:59.250 --> 00:03:00.870
Then we can add required,

68
00:03:00.870 --> 00:03:03.060
and set this to true or false,

69
00:03:03.060 --> 00:03:05.580
indicating whether this workflow should fail

70
00:03:05.580 --> 00:03:07.800
if we're not getting this input.

71
00:03:07.800 --> 00:03:09.150
If required is false,

72
00:03:09.150 --> 00:03:12.630
then this workflow can be called without providing a value.

73
00:03:12.630 --> 00:03:13.830
If we set it to true,

74
00:03:13.830 --> 00:03:15.540
the value is needed.

75
00:03:15.540 --> 00:03:16.410
And it of course,

76
00:03:16.410 --> 00:03:18.270
depends on what your workflow does,

77
00:03:18.270 --> 00:03:20.223
whether this is required or not,

78
00:03:21.360 --> 00:03:24.450
and you can also provide a default value.

79
00:03:24.450 --> 00:03:27.120
For example, we could set required to false,

80
00:03:27.120 --> 00:03:29.070
so that this workflow can be called

81
00:03:29.070 --> 00:03:31.920
without providing a value for artifact name.

82
00:03:31.920 --> 00:03:34.350
And if we still know that we need that value

83
00:03:34.350 --> 00:03:35.970
later in our steps,

84
00:03:35.970 --> 00:03:37.890
we could add a default value,

85
00:03:37.890 --> 00:03:41.550
like this, so that we assume that if we did not

86
00:03:41.550 --> 00:03:43.320
get any other artifact name,

87
00:03:43.320 --> 00:03:47.280
this is the value that should be used down there.

88
00:03:47.280 --> 00:03:49.080
We also must add a type,

89
00:03:49.080 --> 00:03:52.530
where we specify which kind of value we expect here.

90
00:03:52.530 --> 00:03:54.330
Is it a number, a Boolean,

91
00:03:54.330 --> 00:03:57.210
or as we have it here, a string?

92
00:03:57.210 --> 00:03:59.790
So that's how we can accept an input.

93
00:03:59.790 --> 00:04:01.200
Now to use this input,

94
00:04:01.200 --> 00:04:04.650
we can go down there where we need it,

95
00:04:04.650 --> 00:04:09.120
and here we can use the special inputs context object.

96
00:04:09.120 --> 00:04:11.940
And this is simply another context object

97
00:04:11.940 --> 00:04:13.830
provided by GitHub Actions.

98
00:04:13.830 --> 00:04:14.703
This one.

99
00:04:15.600 --> 00:04:17.160
And this contains the inputs

100
00:04:17.160 --> 00:04:20.160
of a reusable or manually triggered workflow,

101
00:04:20.160 --> 00:04:21.870
as we learn here.

102
00:04:21.870 --> 00:04:22.703
So the other,

103
00:04:22.703 --> 00:04:24.690
that's the context object I'm using here,

104
00:04:24.690 --> 00:04:26.520
and in this context object,

105
00:04:26.520 --> 00:04:29.340
we can access all these inputs we specified here.

106
00:04:29.340 --> 00:04:30.487
So in this case,

107
00:04:30.487 --> 00:04:34.770
.artifact-name gives me the value for this input,

108
00:04:34.770 --> 00:04:37.290
and that's then used here as a name

109
00:04:37.290 --> 00:04:39.243
for the artifact I'm downloading.

110
00:04:40.560 --> 00:04:42.210
Then in the next step,

111
00:04:42.210 --> 00:04:45.240
I can list my files

112
00:04:45.240 --> 00:04:46.650
with the LS command

113
00:04:46.650 --> 00:04:49.443
to check whether downloading the artifact worked.

114
00:04:50.370 --> 00:04:52.290
So that's how we can add such an input.

115
00:04:52.290 --> 00:04:54.663
And therefore, now if we create a new commit,

116
00:04:56.640 --> 00:04:57.990
we can push this,

117
00:04:57.990 --> 00:05:00.123
and see whether this works as expected.

118
00:05:02.310 --> 00:05:04.260
For that, under actions,

119
00:05:04.260 --> 00:05:07.290
of course, a new workflow run was triggered.

120
00:05:07.290 --> 00:05:10.170
And here, we should see that once deploy is reached,

121
00:05:10.170 --> 00:05:12.270
we should be downloading artifacts,

122
00:05:12.270 --> 00:05:15.420
and we should be outputting the content of these artifacts.

123
00:05:15.420 --> 00:05:16.800
However, you'll also notice

124
00:05:16.800 --> 00:05:19.683
that something will not work, as expected.

125
00:05:21.060 --> 00:05:23.550
Here we are in the deploy step,

126
00:05:23.550 --> 00:05:26.730
and it's getting started here,

127
00:05:26.730 --> 00:05:28.860
using that reusable workflow.

128
00:05:28.860 --> 00:05:32.700
But you'll notice that get code fails,

129
00:05:32.700 --> 00:05:35.010
and it fails because it was not able

130
00:05:35.010 --> 00:05:37.923
to find an artifact with the name dist.

131
00:05:38.880 --> 00:05:41.910
Now it's looking for an artifact with the name dist,

132
00:05:41.910 --> 00:05:44.670
because that's our default value here,

133
00:05:44.670 --> 00:05:46.440
and it's using that default

134
00:05:46.440 --> 00:05:49.110
because we're not providing any other value.

135
00:05:49.110 --> 00:05:52.530
And that's the problem we currently have here.

136
00:05:52.530 --> 00:05:56.940
Of course, when we're using our reusable workflow here,

137
00:05:56.940 --> 00:06:00.480
we have to provide a value for that input,

138
00:06:00.480 --> 00:06:03.423
unless we're happy with the default, which is dist,

139
00:06:04.260 --> 00:06:06.150
but I'm not happy with the default here,

140
00:06:06.150 --> 00:06:08.310
because I'm using dist-files.

141
00:06:08.310 --> 00:06:10.683
Sounds similar, but it is different.

142
00:06:11.640 --> 00:06:13.470
Therefore, we add the with key,

143
00:06:13.470 --> 00:06:16.770
just as we do it for actions with uses and with,

144
00:06:16.770 --> 00:06:19.350
but now for this reusable workflow.

145
00:06:19.350 --> 00:06:20.850
And under with,

146
00:06:20.850 --> 00:06:22.890
we provide all the input values

147
00:06:22.890 --> 00:06:25.020
that must be provided.

148
00:06:25.020 --> 00:06:26.370
So in my case here,

149
00:06:26.370 --> 00:06:28.950
I'm expecting an artifact name input.

150
00:06:28.950 --> 00:06:32.280
So that's what I specify here under with.

151
00:06:32.280 --> 00:06:33.113
And now here,

152
00:06:33.113 --> 00:06:36.570
we provide the value we're using, dist-files.

153
00:06:36.570 --> 00:06:38.520
And now with this change made,

154
00:06:38.520 --> 00:06:40.443
this will work as intended,

155
00:06:41.370 --> 00:06:44.400
because now we're providing an input value,

156
00:06:44.400 --> 00:06:46.560
and therefore now when we push this,

157
00:06:46.560 --> 00:06:50.280
this entire workflow that uses the reusable workflow,

158
00:06:50.280 --> 00:06:52.083
will run successfully.

159
00:06:53.190 --> 00:06:55.320
So let's take another look,

160
00:06:55.320 --> 00:06:57.303
and wait until we reach deploy.

161
00:06:59.370 --> 00:07:00.540
Here we go.

162
00:07:00.540 --> 00:07:03.063
The deploy job is starting.

163
00:07:05.400 --> 00:07:06.720
And here, we will see

164
00:07:06.720 --> 00:07:09.780
that now getting the code did succeed.

165
00:07:09.780 --> 00:07:12.990
We were able to list our files.

166
00:07:12.990 --> 00:07:15.480
This is indeed the code which we got,

167
00:07:15.480 --> 00:07:18.240
and therefore the overall job and workflow succeeded,

168
00:07:18.240 --> 00:07:21.330
because now we are passing the required input

169
00:07:21.330 --> 00:07:23.373
to this reusable workflow.

