WEBVTT
1
00:00:02.340 --> 00:00:04.290
So we did take a look at these permissions

2
00:00:04.290 --> 00:00:06.540
but there's one thing I wanna highlight

3
00:00:06.540 --> 00:00:08.730
or one thing I also wanna talk about.

4
00:00:08.730 --> 00:00:12.990
And that is this special secret which I'm using here.

5
00:00:12.990 --> 00:00:15.990
This is a secret I actually haven't added.

6
00:00:15.990 --> 00:00:18.930
If I take a look at my repository here,

7
00:00:18.930 --> 00:00:22.260
you will notice that under secrets for my actions

8
00:00:22.260 --> 00:00:25.920
I have no secrets in this repository.

9
00:00:25.920 --> 00:00:30.030
And I also don't have an account-wide GitHub token secret.

10
00:00:30.030 --> 00:00:33.420
So where is this special secret coming from?

11
00:00:33.420 --> 00:00:37.920
Well, it's generated automatically by GitHub.

12
00:00:37.920 --> 00:00:41.910
Because here, for assigning this request to GitHub's API,

13
00:00:41.910 --> 00:00:44.310
we must authenticate the request.

14
00:00:44.310 --> 00:00:48.150
Otherwise, anyone could be sending a request to this API

15
00:00:48.150 --> 00:00:51.150
to edit or delete our issues.

16
00:00:51.150 --> 00:00:54.030
To make sure that's not happening, we must authenticate

17
00:00:54.030 --> 00:00:56.880
the request by attaching a token to it.

18
00:00:56.880 --> 00:01:00.960
And this is a token automatically generated by GitHub,

19
00:01:00.960 --> 00:01:03.690
which is available in the jobs of this workflow,

20
00:01:03.690 --> 00:01:06.960
and which is only valid until our jobs are done.

21
00:01:06.960 --> 00:01:09.240
So the token will be deleted by GitHub

22
00:01:09.240 --> 00:01:11.460
once our job's executed.

23
00:01:11.460 --> 00:01:14.880
It's a very short lift token that's only valid

24
00:01:14.880 --> 00:01:17.640
as long as our jobs are running here.

25
00:01:17.640 --> 00:01:20.640
But this token can then be attached to requests

26
00:01:20.640 --> 00:01:24.660
being sent to GitHub's API to authenticate the request

27
00:01:24.660 --> 00:01:27.210
and perform certain actions.

28
00:01:27.210 --> 00:01:30.780
And it's actually the scope of this token

29
00:01:30.780 --> 00:01:33.870
that's being set with those permissions.

30
00:01:33.870 --> 00:01:36.690
So depending on which permissions you set here,

31
00:01:36.690 --> 00:01:41.070
this token grants more or less access rights.

32
00:01:41.070 --> 00:01:45.480
For example, if I only grant read access to issues here,

33
00:01:45.480 --> 00:01:49.050
I would be able to get information about an issue

34
00:01:49.050 --> 00:01:52.503
but I should not be able to add a new label.

35
00:01:53.460 --> 00:01:55.930
So here, if I change my permissions

36
00:01:57.150 --> 00:02:02.100
and I now say, read only permissions,

37
00:02:02.100 --> 00:02:05.010
and I push this, we will see

38
00:02:05.010 --> 00:02:08.580
that if I open another new issue

39
00:02:08.580 --> 00:02:12.810
where I add my title a bug,

40
00:02:12.810 --> 00:02:16.560
my workflow will run but it will actually not succeed

41
00:02:16.560 --> 00:02:19.260
as you will see in a couple of seconds.

42
00:02:19.260 --> 00:02:21.930
So here it's running and if we take a look at this

43
00:02:21.930 --> 00:02:24.720
permissions example workflow here,

44
00:02:24.720 --> 00:02:27.480
we will see that eventually it fails

45
00:02:27.480 --> 00:02:30.900
because this request here failed.

46
00:02:30.900 --> 00:02:34.230
And it failed because this token which was attached

47
00:02:34.230 --> 00:02:37.470
to the request for authenticating that request

48
00:02:37.470 --> 00:02:40.410
does not have the right permissions attached to it.

49
00:02:40.410 --> 00:02:44.763
This token does not include right permissions to issues.

50
00:02:45.810 --> 00:02:49.530
So it's actually the permissions built into that token,

51
00:02:49.530 --> 00:02:51.420
you could say, that are being set

52
00:02:51.420 --> 00:02:54.630
with that permissions configuration key here.

53
00:02:54.630 --> 00:02:57.180
And here we need right to give that token

54
00:02:57.180 --> 00:02:59.790
appropriate permissions so that requests

55
00:02:59.790 --> 00:03:03.750
to which the token is attached to do succeed.

56
00:03:03.750 --> 00:03:06.300
And by the way, permissions don't just matter

57
00:03:06.300 --> 00:03:09.930
if you're sending requests to the GitHub API manually

58
00:03:09.930 --> 00:03:13.140
and if you're attaching this token manually.

59
00:03:13.140 --> 00:03:15.720
We haven't seen this GitHub token secret

60
00:03:15.720 --> 00:03:17.040
throughout this course

61
00:03:17.040 --> 00:03:20.280
but under the hood, we already used it a lot.

62
00:03:20.280 --> 00:03:23.700
Because for example also when we checked out our code

63
00:03:23.700 --> 00:03:25.860
in other examples in this course,

64
00:03:25.860 --> 00:03:29.640
then we, of course, interacted With GitHub's API.

65
00:03:29.640 --> 00:03:32.790
We sent a request to GitHub to get the code

66
00:03:32.790 --> 00:03:34.143
of this repository.

67
00:03:35.010 --> 00:03:37.620
And that only worked because under the hood,

68
00:03:37.620 --> 00:03:41.370
this action does check out action, used that token

69
00:03:41.370 --> 00:03:43.653
for authenticating the request.

70
00:03:44.640 --> 00:03:48.150
So if I would add a permission to such a job

71
00:03:48.150 --> 00:03:51.510
where I only grant right access to issues,

72
00:03:51.510 --> 00:03:53.760
and therefore as you learned all our permissions

73
00:03:53.760 --> 00:03:57.870
are denied out of the box, this job wouldn't work anymore

74
00:03:57.870 --> 00:04:00.663
because checking out the code wouldn't work anymore.

75
00:04:01.500 --> 00:04:04.740
So this GitHub token secret whilst being used all the time

76
00:04:04.740 --> 00:04:07.560
already in this course, now we're just seeing it

77
00:04:07.560 --> 00:04:10.650
because that's the first time I'm actually sending a request

78
00:04:10.650 --> 00:04:12.870
to GitHub's API manually.

79
00:04:12.870 --> 00:04:16.079
But all these actions which also used GitHub's API

80
00:04:16.079 --> 00:04:18.899
under the hood also used to this token secret,

81
00:04:18.899 --> 00:04:21.240
and therefore all the could have been regulated

82
00:04:21.240 --> 00:04:23.820
with Permissions set by us.

83
00:04:23.820 --> 00:04:26.820
So setting permissions can be a good idea.

84
00:04:26.820 --> 00:04:28.620
And in the official documentation,

85
00:04:28.620 --> 00:04:30.810
you learn which permissions you can set

86
00:04:30.810 --> 00:04:33.690
and you learn a bit more about these permissions.

87
00:04:33.690 --> 00:04:36.420
You'll also learn that you do assign permissions

88
00:04:36.420 --> 00:04:39.930
to get up token in the end by adding this permissions key,

89
00:04:39.930 --> 00:04:44.160
no matter if you're using it on workflow or job level.

90
00:04:44.160 --> 00:04:47.010
But I also mentioned that out of the box

91
00:04:47.010 --> 00:04:49.590
if you don't add this permissions key,

92
00:04:49.590 --> 00:04:54.590
your workflow and its jobs has quite permissive permissions.

93
00:04:54.900 --> 00:04:57.720
And how permissive is also something you find

94
00:04:57.720 --> 00:05:00.183
in the official docs under security guides.

95
00:05:01.200 --> 00:05:05.490
There, you'll learn that out of the box with default access,

96
00:05:05.490 --> 00:05:08.190
which is quite permissive, you basically got

97
00:05:08.190 --> 00:05:11.910
read write access to almost all areas here.

98
00:05:11.910 --> 00:05:14.790
There are just two exceptions here

99
00:05:14.790 --> 00:05:18.450
where you have no or only read access.

100
00:05:18.450 --> 00:05:21.390
But besides that, you have full read and write access

101
00:05:21.390 --> 00:05:23.970
to all these areas and therefore out of the box,

102
00:05:23.970 --> 00:05:27.093
your workflows and jobs can basically do anything.

103
00:05:28.050 --> 00:05:31.320
But you can't change that default to be more restricted

104
00:05:31.320 --> 00:05:34.350
so that you're then only able to read metadata

105
00:05:34.350 --> 00:05:37.590
about the repository and access the contents

106
00:05:37.590 --> 00:05:40.170
of the repository so that you can, for example,

107
00:05:40.170 --> 00:05:41.343
check out code.

108
00:05:42.240 --> 00:05:45.270
And to enable this more restrictive default,

109
00:05:45.270 --> 00:05:49.500
all you have to do is go to the settings of your repository.

110
00:05:49.500 --> 00:05:52.890
And then there under Actions, General,

111
00:05:52.890 --> 00:05:55.323
you get various action-related settings.

112
00:05:56.430 --> 00:05:59.430
And here at the bottom, at least at the point of time

113
00:05:59.430 --> 00:06:01.260
I'm recording this, you could switch

114
00:06:01.260 --> 00:06:04.350
to this more restrictive option here

115
00:06:04.350 --> 00:06:07.200
so that out of the box you only have read permissions

116
00:06:07.200 --> 00:06:10.800
to the contents of the repository and you would,

117
00:06:10.800 --> 00:06:14.400
for example, not be able to interact with issues.

118
00:06:14.400 --> 00:06:16.200
So that is something you could do

119
00:06:16.200 --> 00:06:19.470
to switch that default and be more restrictive

120
00:06:19.470 --> 00:06:22.503
for all your workflows in this repository.

