WEBVTT
1
00:00:02.700 --> 00:00:04.830
With that job defined,

2
00:00:04.830 --> 00:00:07.470
we can start a commit, which means we save it

3
00:00:07.470 --> 00:00:09.960
and we add it to this repository,

4
00:00:09.960 --> 00:00:12.210
and I'll just commit it like this,

5
00:00:12.210 --> 00:00:15.090
and we create a commit here because, keep in mind,

6
00:00:15.090 --> 00:00:17.670
this is in a file which is in a sub-folder

7
00:00:17.670 --> 00:00:20.460
in another folder in our repository,

8
00:00:20.460 --> 00:00:23.640
so we technically added it to this project's code,

9
00:00:23.640 --> 00:00:26.520
therefore we technically created a commit.

10
00:00:26.520 --> 00:00:28.290
And that's really important.

11
00:00:28.290 --> 00:00:31.800
GitHub Action workflows are part of your code.

12
00:00:31.800 --> 00:00:36.450
You define them in files that reside in your Git repository.

13
00:00:36.450 --> 00:00:39.840
This is not something that's outside of the Git repository,

14
00:00:39.840 --> 00:00:43.620
instead it's defined in a file in your Git repository

15
00:00:43.620 --> 00:00:45.513
in your code and project.

16
00:00:46.770 --> 00:00:49.200
And now with that workflow added like this,

17
00:00:49.200 --> 00:00:51.180
we can go back to the Actions tab,

18
00:00:51.180 --> 00:00:54.720
and now the look of this tab changed.

19
00:00:54.720 --> 00:00:59.310
Now here we get an overview of past workflow runs,

20
00:00:59.310 --> 00:01:00.840
which will, of course, populate

21
00:01:00.840 --> 00:01:04.709
as soon as we have workflows that run from time to time.

22
00:01:04.709 --> 00:01:07.290
We can still add a new workflow if you want to

23
00:01:07.290 --> 00:01:09.630
but we also have a list of all the workflows

24
00:01:09.630 --> 00:01:12.030
that were identified by GitHub,

25
00:01:12.030 --> 00:01:14.370
and those are identified by GitHub

26
00:01:14.370 --> 00:01:18.210
looking into this .github/workflows folder

27
00:01:18.210 --> 00:01:21.330
and then into the YAML files it finds there.

28
00:01:21.330 --> 00:01:23.760
So here I have this first workflow,

29
00:01:23.760 --> 00:01:26.310
which is that name I gave my workflow,

30
00:01:26.310 --> 00:01:28.470
and you see that GitHub identifies

31
00:01:28.470 --> 00:01:33.120
that this workflow has a workflow dispatch trigger,

32
00:01:33.120 --> 00:01:36.870
and that's why we can dispatch and trigger it manually

33
00:01:36.870 --> 00:01:38.580
by clicking this button.

34
00:01:38.580 --> 00:01:41.850
If we wouldn't have added this workflow dispatch event,

35
00:01:41.850 --> 00:01:44.340
this button would not show up here,

36
00:01:44.340 --> 00:01:47.160
but since we did so, we can now click this button

37
00:01:47.160 --> 00:01:49.770
to run this workflow against the main branch,

38
00:01:49.770 --> 00:01:52.350
doesn't matter, it's the only branch we have here,

39
00:01:52.350 --> 00:01:54.963
and now this Workflow will be executed.

40
00:01:55.800 --> 00:01:58.500
Now, as soon as you start running a workflow,

41
00:01:58.500 --> 00:02:02.280
you can also go back to this Actions tab,

42
00:02:02.280 --> 00:02:05.610
or eventually it should also update automatically,

43
00:02:05.610 --> 00:02:08.520
and you see your workflow run here.

44
00:02:08.520 --> 00:02:10.860
And this yellow dot which you saw briefly

45
00:02:10.860 --> 00:02:12.810
indicates that it's currently running,

46
00:02:12.810 --> 00:02:14.940
and then this green check mark tells us

47
00:02:14.940 --> 00:02:17.550
that it executed successfully.

48
00:02:17.550 --> 00:02:20.340
You can also click on this workflow here,

49
00:02:20.340 --> 00:02:23.670
and you'll then see more details about this workflow.

50
00:02:23.670 --> 00:02:27.060
For example, you see that for this workflow file

51
00:02:27.060 --> 00:02:31.230
and this event, we had this job that was executed,

52
00:02:31.230 --> 00:02:33.060
which in this case is the only job

53
00:02:33.060 --> 00:02:35.070
that belongs to this workflow,

54
00:02:35.070 --> 00:02:38.430
and we can also click on this job for more details.

55
00:02:38.430 --> 00:02:40.800
And in here we see the different steps,

56
00:02:40.800 --> 00:02:42.570
the two steps we defined

57
00:02:42.570 --> 00:02:45.780
and some steps that are executed automatically,

58
00:02:45.780 --> 00:02:47.760
a Setup and a Cleanup step,

59
00:02:47.760 --> 00:02:50.250
and we can expand these steps

60
00:02:50.250 --> 00:02:52.260
to get more details about them.

61
00:02:52.260 --> 00:02:54.900
For example, we see that in the Setup step

62
00:02:54.900 --> 00:02:56.760
that was added automatically,

63
00:02:56.760 --> 00:03:00.600
the runner system is basically set up.

64
00:03:00.600 --> 00:03:05.220
In the Complete step, we see that some cleanup was done,

65
00:03:05.220 --> 00:03:07.440
and then in the two steps we defined,

66
00:03:07.440 --> 00:03:10.440
we see the command that we executed

67
00:03:10.440 --> 00:03:12.810
and then the result of that command.

68
00:03:12.810 --> 00:03:15.993
And, of course, the same is true for Print goodbye.

69
00:03:16.830 --> 00:03:18.300
Here we see more details

70
00:03:18.300 --> 00:03:21.420
about how this command was executed.

71
00:03:21.420 --> 00:03:25.560
And that's how we can define and execute our first workflow

72
00:03:25.560 --> 00:03:28.890
and how we can also then evaluate the details

73
00:03:28.890 --> 00:03:31.680
of that workflow execution.

74
00:03:31.680 --> 00:03:34.320
And, of course, we can run this workflow

75
00:03:34.320 --> 00:03:35.790
as often as we want.

76
00:03:35.790 --> 00:03:38.910
So if I go to my workflow again here on the left,

77
00:03:38.910 --> 00:03:42.213
I can trigger it again, just as often as I want to.

