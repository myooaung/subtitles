WEBVTT
1
00:00:02.280 --> 00:00:05.370
Now in order to create a Docker action based

2
00:00:05.370 --> 00:00:07.680
on that Docker file and the code

3
00:00:07.680 --> 00:00:09.540
that's kind of related to it,

4
00:00:09.540 --> 00:00:12.480
I'll add a new action.yml file.

5
00:00:12.480 --> 00:00:15.333
As mentioned multiple times, that's always the same.

6
00:00:16.200 --> 00:00:18.180
Now, we also add a name here,

7
00:00:18.180 --> 00:00:22.770
deploy to AWS S3, for example, and a description,

8
00:00:22.770 --> 00:00:24.840
and I'll simply copy the description

9
00:00:24.840 --> 00:00:28.623
from my JavaScript action because it is the same.

10
00:00:29.610 --> 00:00:32.460
And then, we also add the runs key

11
00:00:32.460 --> 00:00:34.470
just as we did it for the composite

12
00:00:34.470 --> 00:00:36.303
and the JavaScript actions.

13
00:00:37.410 --> 00:00:39.780
Now here we also must set using,

14
00:00:39.780 --> 00:00:42.390
but here we must set it to Docker.

15
00:00:42.390 --> 00:00:44.910
That's important, it must be set to Docker,

16
00:00:44.910 --> 00:00:48.273
and this tells GitHub Actions that this is a Docker action.

17
00:00:49.650 --> 00:00:52.200
You also must add the image key then,

18
00:00:52.200 --> 00:00:55.110
and here, we have to write Dockerfile,

19
00:00:55.110 --> 00:00:57.480
to be precise, we have to provide the path

20
00:00:57.480 --> 00:01:01.290
to our Docker file that defines the container.

21
00:01:01.290 --> 00:01:03.570
Alternatively, you could also refer

22
00:01:03.570 --> 00:01:05.850
to some publicly available image here,

23
00:01:05.850 --> 00:01:08.850
for example, an image on Docker hub.

24
00:01:08.850 --> 00:01:11.730
And as before, the official documentation informs you

25
00:01:11.730 --> 00:01:14.880
about all the values that can be added

26
00:01:14.880 --> 00:01:18.090
to runs for Docker actions.

27
00:01:18.090 --> 00:01:21.270
Besides the image, which as mentioned, could also point

28
00:01:21.270 --> 00:01:23.070
at some public repository,

29
00:01:23.070 --> 00:01:27.660
you can also override various settings from the image file,

30
00:01:27.660 --> 00:01:29.040
but this is a bit more advanced

31
00:01:29.040 --> 00:01:31.680
and not something we'll need for this example.

32
00:01:31.680 --> 00:01:33.660
These here are the two main settings

33
00:01:33.660 --> 00:01:35.910
you must provide though.

34
00:01:35.910 --> 00:01:39.450
Now with that, this Docker file would be executed

35
00:01:39.450 --> 00:01:42.330
or would be used and the container would be created

36
00:01:42.330 --> 00:01:44.460
based on that file in the end,

37
00:01:44.460 --> 00:01:47.370
but that's not enough for this action.

38
00:01:47.370 --> 00:01:50.220
Instead, just as the JavaScript action,

39
00:01:50.220 --> 00:01:52.650
this action needs some inputs,

40
00:01:52.650 --> 00:01:55.890
because it does the same thing as the JavaScript action.

41
00:01:55.890 --> 00:01:58.740
It uploads files to a S3 bucket

42
00:01:58.740 --> 00:02:01.110
and therefore we must inform the action

43
00:02:01.110 --> 00:02:03.210
about the bucket name, the region,

44
00:02:03.210 --> 00:02:05.520
and the folder that contains the files

45
00:02:05.520 --> 00:02:06.723
that should be uploaded.

46
00:02:07.770 --> 00:02:10.380
Therefore, I'll copy all the inputs

47
00:02:10.380 --> 00:02:12.990
from the JavaScript action.yml file

48
00:02:12.990 --> 00:02:15.810
over to this Docker action.yml file,

49
00:02:15.810 --> 00:02:17.973
because we need the same inputs.

50
00:02:19.080 --> 00:02:21.360
I also want to get the same output

51
00:02:21.360 --> 00:02:23.310
so I'll copy this as well.

52
00:02:23.310 --> 00:02:26.670
And that's also important regarding inputs and outputs,

53
00:02:26.670 --> 00:02:28.260
the syntax is the same

54
00:02:28.260 --> 00:02:32.070
for Docker actions and JavaScript actions.

55
00:02:32.070 --> 00:02:33.990
We register inputs like this

56
00:02:33.990 --> 00:02:37.140
and as explained before for the JavaScript action,

57
00:02:37.140 --> 00:02:39.900
and we do the same for the outputs.

58
00:02:39.900 --> 00:02:43.050
Now, what is different though is how we access those inputs

59
00:02:43.050 --> 00:02:45.540
in the code that's executed in the container

60
00:02:45.540 --> 00:02:48.423
and how we set outputs from inside that code.

61
00:02:49.560 --> 00:02:53.430
And you see how it works here in deployment.py.

62
00:02:53.430 --> 00:02:54.960
For accessing inputs,

63
00:02:54.960 --> 00:02:58.800
we're effectively using special environment variable,

64
00:02:58.800 --> 00:03:01.050
and these are environment variables

65
00:03:01.050 --> 00:03:04.623
which are automatically generated by GitHub Actions.

66
00:03:05.550 --> 00:03:10.050
For every input, we specify in our action.yml file,

67
00:03:10.050 --> 00:03:13.230
GitHub Actions generates an environment variable

68
00:03:13.230 --> 00:03:17.250
that starts with input underscore, all caps,

69
00:03:17.250 --> 00:03:21.630
and then the name of your input also all caps.

70
00:03:21.630 --> 00:03:25.203
So our bucket input becomes INPUT_BUCKET.

71
00:03:26.070 --> 00:03:31.070
Our bucket-region input becomes INPUT_BUCKET-REGION.

72
00:03:33.090 --> 00:03:36.120
So that's how these inputs are made available

73
00:03:36.120 --> 00:03:38.670
inside of your code running in the container.

74
00:03:38.670 --> 00:03:41.910
And it's a super easy way of extracting and using

75
00:03:41.910 --> 00:03:45.210
those input values in that code, by simply using

76
00:03:45.210 --> 00:03:48.003
these automatically set environment variables.

77
00:03:49.020 --> 00:03:52.320
Of course, you could still add extra environment variables

78
00:03:52.320 --> 00:03:55.620
in your Workflow file and we'll actually do that later.

79
00:03:55.620 --> 00:03:57.240
And those environment variables

80
00:03:57.240 --> 00:03:59.010
would also be available here.

81
00:03:59.010 --> 00:04:02.250
But these are some automatically generated variables

82
00:04:02.250 --> 00:04:05.400
that can be used for using the inputs.

83
00:04:05.400 --> 00:04:08.700
And when it comes to setting that output that we have here,

84
00:04:08.700 --> 00:04:12.750
the website url output, that's done with a syntax

85
00:04:12.750 --> 00:04:15.600
that we know from earlier in the course

86
00:04:15.600 --> 00:04:18.690
with this ::set-output command

87
00:04:18.690 --> 00:04:22.380
which is simply print to the console here.

88
00:04:22.380 --> 00:04:25.920
Print in Python is like echo in the shell,

89
00:04:25.920 --> 00:04:29.190
and it simply uses this set output command

90
00:04:29.190 --> 00:04:33.630
to set the website url output of this action

91
00:04:33.630 --> 00:04:35.460
to this dynamic value,

92
00:04:35.460 --> 00:04:38.943
which is this dynamically generated website url.

93
00:04:39.930 --> 00:04:42.900
So this line of code does not output the value

94
00:04:42.900 --> 00:04:44.790
in the command line or in the shell,

95
00:04:44.790 --> 00:04:47.310
but instead, it uses this special command

96
00:04:47.310 --> 00:04:49.773
to set the output of this action.

97
00:04:50.700 --> 00:04:53.523
And that's how this Docker action works.

98
00:04:54.510 --> 00:04:58.080
And with that, we're already done and we can use this action

99
00:04:58.080 --> 00:05:01.083
and I will use it again here in the workflows file.

100
00:05:01.950 --> 00:05:05.430
There, I will simply replace this JavaScript action

101
00:05:05.430 --> 00:05:09.420
with the Docker action because it fulfills the same purpose,

102
00:05:09.420 --> 00:05:12.210
it uploads files, it takes the same input,

103
00:05:12.210 --> 00:05:14.100
it returns the same output,

104
00:05:14.100 --> 00:05:16.410
therefore, this action folder name

105
00:05:16.410 --> 00:05:19.410
is the only thing that must be replaced.

106
00:05:19.410 --> 00:05:21.540
And what's also important is

107
00:05:21.540 --> 00:05:25.260
that we still must set the access keys here,

108
00:05:25.260 --> 00:05:28.140
the AWS access keys.

109
00:05:28.140 --> 00:05:30.180
We still must set those

110
00:05:30.180 --> 00:05:33.210
because as before with the JavaScript action,

111
00:05:33.210 --> 00:05:34.830
of course by default,

112
00:05:34.830 --> 00:05:38.580
you would not be able to upload files to S3.

113
00:05:38.580 --> 00:05:40.503
By default, that's not allowed.

114
00:05:41.550 --> 00:05:46.260
But like the AWS CLI, this AWS SDK,

115
00:05:46.260 --> 00:05:48.600
which we're using here in our code,

116
00:05:48.600 --> 00:05:52.470
this boto3 package in the end automatically looks

117
00:05:52.470 --> 00:05:56.700
for environment variables with these names

118
00:05:56.700 --> 00:06:00.873
to authenticate those outgoing AWS requests.

119
00:06:01.890 --> 00:06:04.710
So if these environment variables exist here

120
00:06:04.710 --> 00:06:07.890
with valid values for your account,

121
00:06:07.890 --> 00:06:10.770
this upload file command will succeed.

122
00:06:10.770 --> 00:06:12.393
Otherwise, it would fail.

123
00:06:13.230 --> 00:06:16.410
And that's why we must provide these environment variables

124
00:06:16.410 --> 00:06:20.580
for this step with this custom action as well.

125
00:06:20.580 --> 00:06:23.280
Now, with that, we can save all files,

126
00:06:23.280 --> 00:06:24.783
create a new commit,

127
00:06:25.920 --> 00:06:28.503
added docker action,

128
00:06:29.880 --> 00:06:32.070
and push this.

129
00:06:32.070 --> 00:06:34.920
With this, a new workflow run is triggered

130
00:06:34.920 --> 00:06:37.680
and we cannot wait for this to finish

131
00:06:37.680 --> 00:06:40.650
and it should finish successfully this time

132
00:06:40.650 --> 00:06:43.290
using our custom Docker action.

133
00:06:43.290 --> 00:06:45.423
So let's wait for it to finish here.

134
00:06:46.500 --> 00:06:50.340
Here we go, it did finish successfully.

135
00:06:50.340 --> 00:06:54.963
It outputs this url which we can click to view this website.

136
00:06:56.220 --> 00:06:57.930
And under deploy site,

137
00:06:57.930 --> 00:07:00.270
we see that it used this Docker image

138
00:07:00.270 --> 00:07:01.980
that it built that image

139
00:07:01.980 --> 00:07:04.290
that various environment variables

140
00:07:04.290 --> 00:07:06.960
were provided automatically to the image,

141
00:07:06.960 --> 00:07:10.110
amongst them, these input variables,

142
00:07:10.110 --> 00:07:11.490
which I mentioned before.

143
00:07:11.490 --> 00:07:14.340
And overall, the files were deployed,

144
00:07:14.340 --> 00:07:16.080
everything worked as intended,

145
00:07:16.080 --> 00:07:19.473
and this is how you can build custom Docker actions.

