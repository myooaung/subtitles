WEBVTT
1
00:00:01.748 --> 00:00:03.624
As mentioned before already,

2
00:00:03.624 --> 00:00:07.872
Git is mainly about those code snapshots,

3
00:00:07.872 --> 00:00:10.260
those commits.

4
00:00:10.260 --> 00:00:11.498
And the idea is that,

5
00:00:11.498 --> 00:00:12.500
as a developer,

6
00:00:12.500 --> 00:00:16.137
once you made some meaningful changes to your code,

7
00:00:16.137 --> 00:00:19.863
once you finished work on a certain feature

8
00:00:19.863 --> 00:00:21.370
or on a bug fix

9
00:00:21.370 --> 00:00:22.855
or anything like this,

10
00:00:22.855 --> 00:00:24.742
you create a new snapshot,

11
00:00:24.742 --> 00:00:28.080
you create a new commit.

12
00:00:28.080 --> 00:00:32.488
And doing that is actually a two step process.

13
00:00:32.488 --> 00:00:34.750
It all starts by running git add

14
00:00:34.750 --> 00:00:37.247
and pointing at the files

15
00:00:37.247 --> 00:00:38.642
that contain the changes

16
00:00:38.642 --> 00:00:42.238
that should be included in that snapshot

17
00:00:42.238 --> 00:00:44.248
because you control which files

18
00:00:44.248 --> 00:00:46.239
and which changes should be part

19
00:00:46.239 --> 00:00:48.999
of a given snapshot.

20
00:00:48.999 --> 00:00:51.251
This process is called staging.

21
00:00:51.251 --> 00:00:52.742
You stage the changes

22
00:00:52.742 --> 00:00:55.732
that should be included in the next commit.

23
00:00:55.732 --> 00:00:58.241
You define which changes should be part

24
00:00:58.241 --> 00:01:00.378
of the next commit.

25
00:01:00.378 --> 00:01:04.373
This command alone doesn't yet create a commit though.

26
00:01:04.373 --> 00:01:06.011
Instead for doing that,

27
00:01:06.011 --> 00:01:07.748
after running git add,

28
00:01:07.748 --> 00:01:10.980
you have to run git commit.

29
00:01:10.980 --> 00:01:12.744
This then creates a commit based

30
00:01:12.744 --> 00:01:16.009
on the changes that have been staged.

31
00:01:16.009 --> 00:01:18.131
And over time, you can create more

32
00:01:18.131 --> 00:01:21.887
and more commits to reflect your different code changes,

33
00:01:21.887 --> 00:01:22.762
new features,

34
00:01:22.762 --> 00:01:26.040
and various bug fixes you might have implemented.

35
00:01:26.040 --> 00:01:28.505
And the idea behind having all these different commits

36
00:01:28.505 --> 00:01:31.242
and this history of commits is,

37
00:01:31.242 --> 00:01:32.872
of course, that you can then go back

38
00:01:32.872 --> 00:01:35.252
to an older commit whenever you need to,

39
00:01:35.252 --> 00:01:37.761
for example, to revert a change.

40
00:01:37.761 --> 00:01:40.563
But I'll get back to that in a second.

41
00:01:41.490 --> 00:01:43.495
So git add and git commit are used

42
00:01:43.495 --> 00:01:47.002
in conjunction to create a commit

43
00:01:47.002 --> 00:01:48.632
and we have this separation

44
00:01:48.632 --> 00:01:50.508
between these two commands

45
00:01:50.508 --> 00:01:52.248
so that you don't necessarily have

46
00:01:52.248 --> 00:01:54.868
to include all changes in all files

47
00:01:54.868 --> 00:01:56.743
whenever you create a new commit.

48
00:01:56.743 --> 00:01:58.744
But you can pick which changes

49
00:01:58.744 --> 00:02:01.754
in which files should be part of one snapshot

50
00:02:01.754 --> 00:02:04.243
and which other changes should maybe be part

51
00:02:04.243 --> 00:02:08.340
of another snapshot, another commit.

52
00:02:08.340 --> 00:02:10.240
So back here in our project,

53
00:02:10.240 --> 00:02:12.743
we got one file in the end,

54
00:02:12.743 --> 00:02:14.249
the index.html file.

55
00:02:14.249 --> 00:02:17.371
And since I just initialized this project

56
00:02:17.371 --> 00:02:19.240
or this Git repository,

57
00:02:19.240 --> 00:02:23.017
the entire file and all its content is new.

58
00:02:23.017 --> 00:02:25.130
So the changes that this file

59
00:02:25.130 --> 00:02:28.560
with all its content exists.

60
00:02:28.560 --> 00:02:29.739
And it makes sense

61
00:02:29.739 --> 00:02:32.496
that whenever you create a new project

62
00:02:32.496 --> 00:02:35.753
or you initialize a new Git repository,

63
00:02:35.753 --> 00:02:38.498
you wanna create one initial snapshot

64
00:02:38.498 --> 00:02:41.910
that reflects this initial state.

65
00:02:41.910 --> 00:02:42.743
And in my case,

66
00:02:42.743 --> 00:02:45.007
I wanna add all the changes

67
00:02:45.007 --> 00:02:47.999
in this folder to this snapshot.

68
00:02:47.999 --> 00:02:49.080
And in the end,

69
00:02:49.080 --> 00:02:52.740
that means that I wanna add the index.html file.

70
00:02:52.740 --> 00:02:53.747
Therefore, as we just learned,

71
00:02:53.747 --> 00:02:56.760
we must run these two commands,

72
00:02:56.760 --> 00:02:59.746
git add and thereafter, git commit.

73
00:02:59.746 --> 00:03:02.261
Now, to add this index.html file

74
00:03:02.261 --> 00:03:04.494
to this upcoming snapshot

75
00:03:04.494 --> 00:03:05.747
which I wanna create,

76
00:03:05.747 --> 00:03:10.493
I simply run git add index.html.

77
00:03:10.493 --> 00:03:12.249
Now, if we had multiple files

78
00:03:12.249 --> 00:03:13.508
that should be added,

79
00:03:13.508 --> 00:03:16.003
there are various ways of adding all of them.

80
00:03:16.003 --> 00:03:17.122
You can, for example,

81
00:03:17.122 --> 00:03:18.750
separate them with a white space

82
00:03:18.750 --> 00:03:20.730
and then list all the file names

83
00:03:20.730 --> 00:03:23.481
if you had more than one file.

84
00:03:23.481 --> 00:03:25.491
If files would be in a sub folder,

85
00:03:25.491 --> 00:03:28.238
you could also specify that sub folder name

86
00:03:28.238 --> 00:03:29.356
and all the files

87
00:03:29.356 --> 00:03:31.493
in that sub folder would be added.

88
00:03:31.493 --> 00:03:34.503
Now, there are more ways of targeting multiple files

89
00:03:34.503 --> 00:03:36.242
and I'll get back to that later.

90
00:03:36.242 --> 00:03:40.631
For the moment, let's just add index.html.

91
00:03:40.631 --> 00:03:43.745
Now, this file is staged.

92
00:03:43.745 --> 00:03:45.636
And you can see the current status

93
00:03:45.636 --> 00:03:47.630
of your Git repository.

94
00:03:47.630 --> 00:03:51.250
And for example, find out which files are staged

95
00:03:51.250 --> 00:03:53.244
and which files are not staged

96
00:03:53.244 --> 00:03:55.250
by running git status,

97
00:03:55.250 --> 00:03:58.290
another key command.

98
00:03:58.290 --> 00:03:59.989
This command doesn't change anything,

99
00:03:59.989 --> 00:04:01.624
but it gives you some information

100
00:04:01.624 --> 00:04:05.760
about the current status of this Git repository.

101
00:04:05.760 --> 00:04:06.996
And if I run this command,

102
00:04:06.996 --> 00:04:09.996
then I see that in this Git repository,

103
00:04:09.996 --> 00:04:12.123
I'm on my main branch

104
00:04:12.123 --> 00:04:14.875
and I'll get back to branches later.

105
00:04:14.875 --> 00:04:17.891
This might also say master for you

106
00:04:17.891 --> 00:04:18.913
instead of main,

107
00:04:18.913 --> 00:04:20.642
but this does not matter.

108
00:04:21.510 --> 00:04:23.001
I have no commits yet.

109
00:04:23.001 --> 00:04:25.251
And I see that the changes

110
00:04:25.251 --> 00:04:26.488
that will be committed

111
00:04:26.488 --> 00:04:29.613
in the next commit are this new file

112
00:04:29.613 --> 00:04:31.756
that was created, index.html,

113
00:04:31.756 --> 00:04:33.498
which is a new file in this project,

114
00:04:33.498 --> 00:04:35.371
in this case here.

115
00:04:35.371 --> 00:04:38.239
And that I have some files and folders

116
00:04:38.239 --> 00:04:40.259
which are currently not tracked,

117
00:04:40.259 --> 00:04:43.629
so which won't be part of the next commit.

118
00:04:43.629 --> 00:04:46.124
In my case, that's this .vscode/ folder

119
00:04:46.124 --> 00:04:49.113
and all the content inside of it.

120
00:04:50.040 --> 00:04:51.499
And that is just the way I want it

121
00:04:51.499 --> 00:04:54.638
because I do not want to add this folder

122
00:04:54.638 --> 00:04:58.753
or file to this first snapshot here in my case.

123
00:04:58.753 --> 00:05:00.627
So now, this is staged.

124
00:05:00.627 --> 00:05:04.750
This file or this change to be precise is staged.

125
00:05:04.750 --> 00:05:07.749
To now create that snapshot, that commit,

126
00:05:07.749 --> 00:05:11.160
we can run the git commit command.

127
00:05:11.160 --> 00:05:12.762
If we do that though,

128
00:05:12.762 --> 00:05:16.003
an editor will open up here in the Terminal

129
00:05:16.003 --> 00:05:18.239
because every commit you create

130
00:05:18.239 --> 00:05:22.260
needs a message that describes the commit.

131
00:05:22.260 --> 00:05:25.484
That message should typically be pretty short and concise,

132
00:05:25.484 --> 00:05:28.023
but some message is needed.

133
00:05:29.010 --> 00:05:30.864
Now, you could use this editor here

134
00:05:30.864 --> 00:05:33.499
in the Terminal to write that message,

135
00:05:33.499 --> 00:05:35.994
but using that in Terminal editor

136
00:05:35.994 --> 00:05:37.503
could be a bit clunky

137
00:05:37.503 --> 00:05:40.011
if you have never worked with it before.

138
00:05:40.011 --> 00:05:42.000
Therefore, I'll just close this Terminal

139
00:05:42.000 --> 00:05:44.238
and open a new Terminal here.

140
00:05:44.238 --> 00:05:46.491
And instead of running git commit like this,

141
00:05:46.491 --> 00:05:48.000
I'll add a special flag,

142
00:05:48.000 --> 00:05:49.999
a special option to it,

143
00:05:49.999 --> 00:05:53.283
the M option with -m.

144
00:05:54.510 --> 00:05:55.761
And then between double quotes,

145
00:05:55.761 --> 00:05:58.129
I type my message like, for example,

146
00:05:58.129 --> 00:06:00.500
"initial commit"

147
00:06:00.500 --> 00:06:02.379
and the message should be short.

148
00:06:02.379 --> 00:06:05.124
And this flag, this -m flag

149
00:06:05.124 --> 00:06:08.998
is meant to leave short commit messages.

150
00:06:08.998 --> 00:06:09.831
So now with that,

151
00:06:09.831 --> 00:06:10.873
I can hit Enter.

152
00:06:10.873 --> 00:06:13.992
And now, this first commit was created

153
00:06:13.992 --> 00:06:15.990
with that message.

154
00:06:15.990 --> 00:06:18.375
And I also see a summary of the commit here,

155
00:06:18.375 --> 00:06:20.492
what changed and what was included

156
00:06:20.492 --> 00:06:22.873
in that commit.

157
00:06:22.873 --> 00:06:25.994
You can thereafter run git log to get a list,

158
00:06:25.994 --> 00:06:27.880
a chronologically ordered list

159
00:06:27.880 --> 00:06:30.383
of all the commits you have thus far.

160
00:06:30.383 --> 00:06:31.258
And at the moment,

161
00:06:31.258 --> 00:06:33.122
that's just one commit here.

162
00:06:33.122 --> 00:06:36.388
You also see the automatically created ID,

163
00:06:36.388 --> 00:06:40.260
the unique identifier of that commit.

164
00:06:40.260 --> 00:06:41.747
And of course, this will make more sense

165
00:06:41.747 --> 00:06:44.752
once we start adding more commits here.

166
00:06:44.752 --> 00:06:46.744
You can ignore that part for the moment.

167
00:06:46.744 --> 00:06:48.495
I'll get back to this head thing

168
00:06:48.495 --> 00:06:50.343
in just a second.

