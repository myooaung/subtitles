WEBVTT
1
00:00:02.040 --> 00:00:04.170
Now git revert is one option,

2
00:00:04.170 --> 00:00:06.900
and typically, it should be the preferred option

3
00:00:06.900 --> 00:00:10.710
since it keeps the history of commits clean

4
00:00:10.710 --> 00:00:14.700
and you're not starting to rewrite history.

5
00:00:14.700 --> 00:00:17.674
But sometimes you really want to delete a commit.

6
00:00:17.674 --> 00:00:19.830
You want to get rid of a commit,

7
00:00:19.830 --> 00:00:24.120
and you can do that with the git reset --hard command.

8
00:00:24.120 --> 00:00:26.250
This also needs the ID of a commit,

9
00:00:26.250 --> 00:00:29.640
but here it's the ID of a commit you want to go back to.

10
00:00:29.640 --> 00:00:30.810
And all the commits

11
00:00:30.810 --> 00:00:33.210
since that commit you want to go back to,

12
00:00:33.210 --> 00:00:34.833
will be deleted.

13
00:00:35.670 --> 00:00:38.520
That's what get reset --hard does,

14
00:00:38.520 --> 00:00:41.310
and you should be careful with that command

15
00:00:41.310 --> 00:00:44.664
because you can't really get back those changes

16
00:00:44.664 --> 00:00:46.830
that were made after this commit

17
00:00:46.830 --> 00:00:49.260
once you executed that command,

18
00:00:49.260 --> 00:00:52.020
and you're also rewriting history.

19
00:00:52.020 --> 00:00:53.970
And with Git, the idea really

20
00:00:53.970 --> 00:00:57.060
is that you never lose any changes or state,

21
00:00:57.060 --> 00:00:59.520
but you just keep on adding new changes.

22
00:00:59.520 --> 00:01:01.110
Wit git reset --hard,

23
00:01:01.110 --> 00:01:03.240
you are actually losing something,

24
00:01:03.240 --> 00:01:04.072
and therefore,

25
00:01:04.072 --> 00:01:06.887
it's not something you should use all the time.

26
00:01:06.887 --> 00:01:08.250
Nonetheless, here,

27
00:01:08.250 --> 00:01:09.210
I could, for example,

28
00:01:09.210 --> 00:01:12.030
go back to the state where I have this link

29
00:01:12.030 --> 00:01:15.495
by using git reset --hard and pointing at this commit

30
00:01:15.495 --> 00:01:18.960
or go back to my very first initial commit

31
00:01:18.960 --> 00:01:23.550
by copying that ID and running git reset --hard,

32
00:01:23.550 --> 00:01:25.743
and then using that commit ID.

33
00:01:26.640 --> 00:01:27.914
If I hit enter here,

34
00:01:27.914 --> 00:01:30.510
you'll see that now after running git log,

35
00:01:30.510 --> 00:01:32.220
I have only one commit left,

36
00:01:32.220 --> 00:01:33.903
which is my initial commit.

37
00:01:33.903 --> 00:01:37.290
I really got rid of my commit history

38
00:01:37.290 --> 00:01:39.060
and all these other commits.

39
00:01:39.060 --> 00:01:43.166
Again, that works but you should use it with care

40
00:01:43.166 --> 00:01:47.280
And that's it for all these key commands you should know

41
00:01:47.280 --> 00:01:48.870
when working with Git,

42
00:01:48.870 --> 00:01:50.970
at least if we ignore branches,

43
00:01:50.970 --> 00:01:52.440
which is another key feature

44
00:01:52.440 --> 00:01:55.140
we'll explore in the next minutes.

45
00:01:55.140 --> 00:01:57.090
Before we take a look at branches

46
00:01:57.090 --> 00:01:59.946
there's just one other commit-related feature

47
00:01:59.946 --> 00:02:02.160
that I also want to explore,

48
00:02:02.160 --> 00:02:05.580
and that's how you can commit multiple changes

49
00:02:05.580 --> 00:02:07.198
in multiple files at once,

50
00:02:07.198 --> 00:02:10.470
and how you can still make sure that certain files

51
00:02:10.470 --> 00:02:12.873
or folders are always ignored.

