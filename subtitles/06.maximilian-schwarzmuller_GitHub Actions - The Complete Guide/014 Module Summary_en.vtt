WEBVTT
1
00:00:02.130 --> 00:00:05.220
And that's it for this course section.

2
00:00:05.220 --> 00:00:08.100
In this course section, we got started with artifacts,

3
00:00:08.100 --> 00:00:11.730
which are these assets that are often produced by jobs

4
00:00:11.730 --> 00:00:13.560
that should be shared or analyzed.

5
00:00:13.560 --> 00:00:16.800
Things like the files you would deploy for a website

6
00:00:16.800 --> 00:00:21.123
or test log files or binaries or anything like that.

7
00:00:21.990 --> 00:00:26.070
These assets are referred to as artifacts or job artifacts

8
00:00:26.070 --> 00:00:28.020
and Git up actions provides you

9
00:00:28.020 --> 00:00:31.500
with actions that help you upload those artifacts

10
00:00:31.500 --> 00:00:34.020
and download them in other jobs.

11
00:00:34.020 --> 00:00:36.060
Alternatively, you can also access

12
00:00:36.060 --> 00:00:38.070
and download them manually,

13
00:00:38.070 --> 00:00:41.370
via the GitHub website or its REST API.

14
00:00:41.370 --> 00:00:44.850
Now, besides these files and folders, these artifacts,

15
00:00:44.850 --> 00:00:47.250
you also sometimes have simple values

16
00:00:47.250 --> 00:00:49.680
that should be shared across steps or jobs,

17
00:00:49.680 --> 00:00:52.650
and that would be those outputs.

18
00:00:52.650 --> 00:00:54.960
You share them in your steps

19
00:00:54.960 --> 00:00:57.390
with help of the set output command

20
00:00:57.390 --> 00:00:59.730
that's provided by GitHub.

21
00:00:59.730 --> 00:01:02.760
So this set output command you use together

22
00:01:02.760 --> 00:01:06.540
with echo and the run instruction

23
00:01:06.540 --> 00:01:10.140
and then jobs can pick up and share these step outputs

24
00:01:10.140 --> 00:01:13.980
with help of the steps context in the outputs key

25
00:01:13.980 --> 00:01:16.413
that's defined in your job definition.

26
00:01:17.340 --> 00:01:21.570
And other jobs can then use these job outputs by other jobs

27
00:01:21.570 --> 00:01:24.120
via the needs context as you saw.

28
00:01:24.120 --> 00:01:26.603
And then there also is caching.

29
00:01:26.603 --> 00:01:30.330
Caching helps use speed up repeated slow steps

30
00:01:30.330 --> 00:01:33.690
like for example, installing and managing dependencies

31
00:01:33.690 --> 00:01:35.490
of your project.

32
00:01:35.490 --> 00:01:37.320
This is a very typical use case,

33
00:01:37.320 --> 00:01:41.010
but of course, any files and folders can be cached.

34
00:01:41.010 --> 00:01:44.340
The cache Action provided by GitHub automatically stores

35
00:01:44.340 --> 00:01:45.990
and updates to cache for you

36
00:01:45.990 --> 00:01:48.180
based on the cache key which you provide,

37
00:01:48.180 --> 00:01:49.920
which of course should change

38
00:01:49.920 --> 00:01:53.100
whenever your cache must update.

39
00:01:53.100 --> 00:01:54.420
Now what's important is that

40
00:01:54.420 --> 00:01:58.110
you should not use caching for your artifacts.

41
00:01:58.110 --> 00:02:02.010
So don't mistake artifacts with cacheable files

42
00:02:02.010 --> 00:02:03.450
or anything like that.

43
00:02:03.450 --> 00:02:06.270
Caching is for things like dependencies.

44
00:02:06.270 --> 00:02:08.880
It's there to speed up your workflows.

45
00:02:08.880 --> 00:02:12.330
Artifacts on the upper hand is for the output files

46
00:02:12.330 --> 00:02:14.460
produced by your workflows

47
00:02:14.460 --> 00:02:16.833
so the results you are interested in.

