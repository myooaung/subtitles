WEBVTT
1
00:00:02.100 --> 00:00:04.290
Now in the previous lectures,

2
00:00:04.290 --> 00:00:06.570
we got started with GitHub Actions

3
00:00:06.570 --> 00:00:10.050
and we built our first basic workflow.

4
00:00:10.050 --> 00:00:13.410
Now, in the meantime, I cloned this demo

5
00:00:13.410 --> 00:00:16.079
onto my local system to also show you

6
00:00:16.079 --> 00:00:18.960
how this would be stored locally.

7
00:00:18.960 --> 00:00:21.870
This is this remote repository in the end.

8
00:00:21.870 --> 00:00:24.330
And there you see this .github folder

9
00:00:24.330 --> 00:00:27.120
with the workflows folder inside of it.

10
00:00:27.120 --> 00:00:30.330
So that's a nested folder in .github.

11
00:00:30.330 --> 00:00:32.490
And then in the workflows folder,

12
00:00:32.490 --> 00:00:35.073
we have this first action YML file.

13
00:00:36.120 --> 00:00:38.850
Now we'll move on to a different example though

14
00:00:38.850 --> 00:00:43.440
and you find this example project attached to this lecture.

15
00:00:43.440 --> 00:00:47.490
This is a very simple ReactJS web application

16
00:00:47.490 --> 00:00:50.970
And you don't need to know ReactJS

17
00:00:50.970 --> 00:00:54.210
or web development in order to follow along.

18
00:00:54.210 --> 00:00:57.540
We will not write any meaningful ReactJS

19
00:00:57.540 --> 00:01:01.530
or web development code and you don't need to understand

20
00:01:01.530 --> 00:01:05.072
these things to understand how GitHub Actions work.

21
00:01:05.940 --> 00:01:09.750
But I created this project so that we have a slightly

22
00:01:09.750 --> 00:01:12.990
more realistic project to work with.

23
00:01:12.990 --> 00:01:14.340
Now if you wanted to,

24
00:01:14.340 --> 00:01:17.370
you could run this application locally.

25
00:01:17.370 --> 00:01:21.090
For this, you must have Node.js installed on your system

26
00:01:21.090 --> 00:01:24.180
and with Node.js installed locally,

27
00:01:24.180 --> 00:01:27.720
you can navigate into this project folder,

28
00:01:27.720 --> 00:01:30.840
into this second action react demo folder

29
00:01:30.840 --> 00:01:34.380
or into that folder you downloaded to be precise.

30
00:01:34.380 --> 00:01:37.020
And then in there you can run npm install

31
00:01:37.020 --> 00:01:39.510
to install all third party dependencies

32
00:01:39.510 --> 00:01:41.730
required by this project.

33
00:01:41.730 --> 00:01:45.630
And once that finished, you can start a development server

34
00:01:45.630 --> 00:01:50.460
that allows you to preview this very simple web app here.

35
00:01:50.460 --> 00:01:52.890
So here, installation finished.

36
00:01:52.890 --> 00:01:54.930
Now you can run npm run dev

37
00:01:54.930 --> 00:01:58.980
to execute this script and start a development server,

38
00:01:58.980 --> 00:02:01.860
which hosts the website on this address

39
00:02:01.860 --> 00:02:03.780
on your local system.

40
00:02:03.780 --> 00:02:04.613
Here we go.

41
00:02:04.613 --> 00:02:06.990
That's this very simple demo website.

42
00:02:06.990 --> 00:02:09.539
It's of course not very fancy,

43
00:02:09.539 --> 00:02:12.000
but it will do the trick.

44
00:02:12.000 --> 00:02:14.850
The interesting part about this demo project

45
00:02:14.850 --> 00:02:18.510
is that we can't just preview the app locally,

46
00:02:18.510 --> 00:02:21.210
but instead we also have a test script,

47
00:02:21.210 --> 00:02:25.980
which will execute some predefined automated tests.

48
00:02:25.980 --> 00:02:28.320
Now I do have a separate course on testing

49
00:02:28.320 --> 00:02:31.620
if you would wanna learn more about these automated tests,

50
00:02:31.620 --> 00:02:33.660
unit tests specifically.

51
00:02:33.660 --> 00:02:38.100
In the end, what we have here is a simple test file

52
00:02:38.100 --> 00:02:41.490
next to the component it belongs to.

53
00:02:41.490 --> 00:02:44.460
And in that file I have two tests

54
00:02:44.460 --> 00:02:46.740
that are executed that simply check

55
00:02:46.740 --> 00:02:49.110
whether the site works as intended

56
00:02:49.110 --> 00:02:51.000
or whether this component here,

57
00:02:51.000 --> 00:02:54.840
this site building block works as intended.

58
00:02:54.840 --> 00:02:57.090
Again, you don't need to understand the code.

59
00:02:57.090 --> 00:02:59.370
The only important thing to understand here

60
00:02:59.370 --> 00:03:01.503
is that we do have those tests.

61
00:03:02.370 --> 00:03:04.980
Now with all the dependencies installed

62
00:03:04.980 --> 00:03:06.600
and Node.js installed,

63
00:03:06.600 --> 00:03:09.570
we could run these tests by running npm test

64
00:03:09.570 --> 00:03:11.940
and that would then execute them locally.

65
00:03:11.940 --> 00:03:16.080
And we should see that by default, they're all passing.

66
00:03:16.080 --> 00:03:18.810
Now the thing is these are all things

67
00:03:18.810 --> 00:03:21.000
we'll typically do locally,

68
00:03:21.000 --> 00:03:23.370
but it would also be quite realistic

69
00:03:23.370 --> 00:03:26.040
that we wanna manage this project with Git,

70
00:03:26.040 --> 00:03:29.610
that we wanna have a remote Git repository on GitHub

71
00:03:29.610 --> 00:03:31.650
to store our code there.

72
00:03:31.650 --> 00:03:35.310
Possibly also to collaborate with colleagues.

73
00:03:35.310 --> 00:03:37.920
And it would also be quite reasonable

74
00:03:37.920 --> 00:03:41.610
that we maybe wanna run all these tests here automatically

75
00:03:41.610 --> 00:03:45.030
whenever a new version of that code is pushed

76
00:03:45.030 --> 00:03:46.803
to this remote repository.

77
00:03:47.700 --> 00:03:50.070
And that's exactly what will set up now

78
00:03:50.070 --> 00:03:51.933
with help of GitHub Actions.

79
00:03:52.860 --> 00:03:55.890
Now for that, I'll first of all start

80
00:03:55.890 --> 00:03:58.740
by initializing a Git repository here.

81
00:03:58.740 --> 00:04:01.590
Now I reinitialized it here because I already had one,

82
00:04:01.590 --> 00:04:04.833
but you should do this for the downloaded project as well.

83
00:04:05.730 --> 00:04:08.220
Once you created that repository,

84
00:04:08.220 --> 00:04:11.760
it's worth noting that we have a .gitignore file here,

85
00:04:11.760 --> 00:04:16.380
which actually ignores a bunch of files and folders.

86
00:04:16.380 --> 00:04:19.680
For example, it ignores the node modules folder,

87
00:04:19.680 --> 00:04:22.350
this folder here, which includes all these

88
00:04:22.350 --> 00:04:24.900
third party dependencies that were installed

89
00:04:24.900 --> 00:04:27.300
when we ran npm install.

90
00:04:27.300 --> 00:04:31.260
This is ignored because this folder can always be recreated

91
00:04:31.260 --> 00:04:32.910
by running npm install

92
00:04:32.910 --> 00:04:35.823
and it should not be checked into version control.

93
00:04:36.810 --> 00:04:38.610
But that's just a side note.

94
00:04:38.610 --> 00:04:41.370
With this Git repository initialized,

95
00:04:41.370 --> 00:04:44.160
we can of course create our initial commit

96
00:04:44.160 --> 00:04:45.660
by staging all files

97
00:04:45.660 --> 00:04:48.183
and creating this initial commit like this.

98
00:04:49.080 --> 00:04:51.810
And now we can create a remote repository

99
00:04:51.810 --> 00:04:53.970
for this project if we want to.

100
00:04:53.970 --> 00:04:58.970
For that, I'll move back to GitHub and to my repositories.

101
00:04:59.970 --> 00:05:03.150
And there I wanna add a new repository.

102
00:05:03.150 --> 00:05:06.300
So under repositories I'll add a new repository

103
00:05:06.300 --> 00:05:11.040
and I'll name this second action react demo.

104
00:05:11.040 --> 00:05:12.870
The name as always is up to you.

105
00:05:12.870 --> 00:05:15.810
You can add a description and you could turn it

106
00:05:15.810 --> 00:05:18.300
into a private repository if you want to.

107
00:05:18.300 --> 00:05:20.430
And actually here to mix things up.

108
00:05:20.430 --> 00:05:21.603
I will do that.

109
00:05:22.740 --> 00:05:24.900
Now I won't add any files to it

110
00:05:24.900 --> 00:05:27.480
because this time this is a repository,

111
00:05:27.480 --> 00:05:30.720
which I plan to connect to my local Git repository

112
00:05:30.720 --> 00:05:32.880
which already includes files.

113
00:05:32.880 --> 00:05:34.740
Therefore, I'll set it up like this

114
00:05:34.740 --> 00:05:39.740
and create this repository and then I'll grab that URL here.

115
00:05:40.680 --> 00:05:42.750
Go back to my local project

116
00:05:42.750 --> 00:05:46.170
and add this link to this remote repository.

117
00:05:46.170 --> 00:05:49.290
With the git remote command, add my origin.

118
00:05:49.290 --> 00:05:53.250
So this is the identifier I use for this remote repository

119
00:05:53.250 --> 00:05:56.850
and add that URL, but I'll not add it like this.

120
00:05:56.850 --> 00:05:59.880
Instead, to make sure that I'm prompted for a password

121
00:05:59.880 --> 00:06:02.580
when I try to push to this repository,

122
00:06:02.580 --> 00:06:05.040
I'll add my GitHub username here.

123
00:06:05.040 --> 00:06:07.473
Of course, you should add your username here.

124
00:06:08.640 --> 00:06:11.160
With that, we should be able to push our code

125
00:06:11.160 --> 00:06:14.670
to this repository and we should be prompted for a password

126
00:06:14.670 --> 00:06:17.850
unless we already have such a personal access token

127
00:06:17.850 --> 00:06:19.260
stored on our system

128
00:06:19.260 --> 00:06:22.473
because we used it before on other projects.

129
00:06:23.310 --> 00:06:25.200
So here I wanna push

130
00:06:25.200 --> 00:06:27.840
and to make sure that git push works like that,

131
00:06:27.840 --> 00:06:30.120
we have to execute this command once

132
00:06:30.120 --> 00:06:33.300
to create this link between our local main branch

133
00:06:33.300 --> 00:06:36.630
and this remote main branch, so to say.

134
00:06:36.630 --> 00:06:39.750
So after running this once, this will be pushed

135
00:06:39.750 --> 00:06:42.300
by just running git push in the future.

136
00:06:42.300 --> 00:06:45.060
Now here, it did already push though.

137
00:06:45.060 --> 00:06:48.210
And with that, if we reload this remote repository,

138
00:06:48.210 --> 00:06:49.890
our code is on GitHub.

139
00:06:49.890 --> 00:06:53.223
But right now, there of course, has no action related to it.

