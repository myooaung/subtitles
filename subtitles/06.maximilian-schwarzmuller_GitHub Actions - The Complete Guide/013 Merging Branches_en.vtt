WEBVTT
1
00:00:02.310 --> 00:00:03.870
Now, as mentioned before,

2
00:00:03.870 --> 00:00:05.970
I did create multiple branches here

3
00:00:05.970 --> 00:00:08.280
so that we can work on a new feature

4
00:00:08.280 --> 00:00:11.100
without directly influencing the existing code

5
00:00:11.100 --> 00:00:12.210
in the main branch,

6
00:00:12.210 --> 00:00:15.120
which often is the branch that is responsible

7
00:00:15.120 --> 00:00:17.970
for the currently published and deployed website,

8
00:00:17.970 --> 00:00:19.110
and we wanna make sure

9
00:00:19.110 --> 00:00:22.890
that we don't accidentally deploy a half-finished feature.

10
00:00:22.890 --> 00:00:25.353
That's why we use a separate branch for that.

11
00:00:26.340 --> 00:00:30.510
So here I am in the feature-restructure branch

12
00:00:30.510 --> 00:00:33.210
as you can tell if I run git branch.

13
00:00:33.210 --> 00:00:35.520
And now I wanna apply some changes,

14
00:00:35.520 --> 00:00:38.610
some changes which I prepared in advance.

15
00:00:38.610 --> 00:00:42.390
You find a new index.html file attached

16
00:00:42.390 --> 00:00:44.040
and you can simply take the content

17
00:00:44.040 --> 00:00:45.630
of that attached file

18
00:00:45.630 --> 00:00:49.980
and replace your index.html content with that content.

19
00:00:49.980 --> 00:00:51.720
It's relatively similar

20
00:00:51.720 --> 00:00:54.090
but it has a slightly different structure

21
00:00:54.090 --> 00:00:56.400
and a new paragraph with some links

22
00:00:56.400 --> 00:00:58.803
that allow you to dive deeper into Git.

23
00:00:59.790 --> 00:01:01.740
That's one thing that changed.

24
00:01:01.740 --> 00:01:04.980
You also find a new styles.css file attached

25
00:01:04.980 --> 00:01:06.900
and you should also take the content of that

26
00:01:06.900 --> 00:01:10.620
and replace your styles.css file content with that.

27
00:01:10.620 --> 00:01:12.690
It simply adds this link styling.

28
00:01:12.690 --> 00:01:14.540
That's the only thing that's changed.

29
00:01:16.740 --> 00:01:19.920
With that, if you would view this page,

30
00:01:19.920 --> 00:01:21.930
it looks like that in the browser

31
00:01:21.930 --> 00:01:23.970
but that's not too important right now.

32
00:01:23.970 --> 00:01:27.540
Instead, this is the new feature we're working on.

33
00:01:27.540 --> 00:01:30.510
And here I did it all in one step.

34
00:01:30.510 --> 00:01:32.790
If this would be a more complex project

35
00:01:32.790 --> 00:01:34.380
and a more complex feature,

36
00:01:34.380 --> 00:01:37.530
we might, of course, work multiple days on that new feature

37
00:01:37.530 --> 00:01:40.590
and we might be creating multiple commits along the way,

38
00:01:40.590 --> 00:01:42.540
step by step.

39
00:01:42.540 --> 00:01:44.310
Here it's just one commit,

40
00:01:44.310 --> 00:01:46.920
which I wanna add, which includes all these changes

41
00:01:46.920 --> 00:01:50.490
to styles.css and index.html.

42
00:01:50.490 --> 00:01:52.890
Therefore I'll stage all my files

43
00:01:52.890 --> 00:01:56.070
that changed by running git add dot.

44
00:01:56.070 --> 00:01:57.510
Alternatively as you learned,

45
00:01:57.510 --> 00:02:00.450
you can also target them separately like this

46
00:02:00.450 --> 00:02:02.103
but this is quicker.

47
00:02:02.940 --> 00:02:04.650
And then I commit them

48
00:02:04.650 --> 00:02:09.213
and I'll say added links and restructured page.

49
00:02:10.560 --> 00:02:13.110
Now we can see if we run git log

50
00:02:13.110 --> 00:02:15.630
that we've got this new commit here

51
00:02:15.630 --> 00:02:18.330
in our feature-restructure branch.

52
00:02:18.330 --> 00:02:20.400
Here we can also already see

53
00:02:20.400 --> 00:02:23.310
that the main branch is one commit behind.

54
00:02:23.310 --> 00:02:26.490
It still has the added logo and styling commit

55
00:02:26.490 --> 00:02:28.650
as the latest commit.

56
00:02:28.650 --> 00:02:30.840
So only the feature-restructure branch

57
00:02:30.840 --> 00:02:31.983
has this new commit.

58
00:02:33.390 --> 00:02:38.100
If we therefore actually check out the main branch again

59
00:02:38.100 --> 00:02:41.130
by simply running git checkout main,

60
00:02:41.130 --> 00:02:43.500
you will see that the code changes.

61
00:02:43.500 --> 00:02:45.390
All our changes are gone

62
00:02:45.390 --> 00:02:47.730
but they're not gone because we deleted

63
00:02:47.730 --> 00:02:49.440
or reverted them.

64
00:02:49.440 --> 00:02:51.330
Instead they're still there

65
00:02:51.330 --> 00:02:54.033
in their commit in a different branch.

66
00:02:54.900 --> 00:02:57.750
But here in this branch, the main branch,

67
00:02:57.750 --> 00:02:59.700
we don't have those other commits,

68
00:02:59.700 --> 00:03:01.503
we don't have that latest commit.

69
00:03:02.340 --> 00:03:03.930
In that main branch, however,

70
00:03:03.930 --> 00:03:05.220
we can continue our work

71
00:03:05.220 --> 00:03:07.560
and we could work on a bug fix.

72
00:03:07.560 --> 00:03:10.290
For example, we might want to add an exclamation mark

73
00:03:10.290 --> 00:03:11.283
to the title here.

74
00:03:12.390 --> 00:03:16.110
So here in the main branch, I can then also add a new commit

75
00:03:16.110 --> 00:03:17.730
by staging all files.

76
00:03:17.730 --> 00:03:20.130
In this case, only the index.html file

77
00:03:20.130 --> 00:03:23.670
but still git add dot can always be used.

78
00:03:23.670 --> 00:03:25.833
And here I'll say changed title.

79
00:03:27.000 --> 00:03:28.880
With that, I got a new commit here

80
00:03:28.880 --> 00:03:31.080
in the main branch, which is not part

81
00:03:31.080 --> 00:03:33.980
of that other branch we worked in a couple of seconds ago.

82
00:03:35.220 --> 00:03:36.510
But now let's say we're done.

83
00:03:36.510 --> 00:03:39.540
We fixed some bugs here in the main branch

84
00:03:39.540 --> 00:03:41.460
and we also added this new feature

85
00:03:41.460 --> 00:03:43.830
in the feature-restructure branch.

86
00:03:43.830 --> 00:03:46.560
If I quickly check out that other branch again,

87
00:03:46.560 --> 00:03:49.140
you see that there the exclamation mark is gone

88
00:03:49.140 --> 00:03:51.870
because that change was only applied and committed

89
00:03:51.870 --> 00:03:53.640
in the main branch.

90
00:03:53.640 --> 00:03:55.830
But we do have that restructured code

91
00:03:55.830 --> 00:03:57.303
and those extra links here.

92
00:03:58.560 --> 00:04:01.260
If we now want to merge those changes

93
00:04:01.260 --> 00:04:04.170
from that feature branch into the main branch

94
00:04:04.170 --> 00:04:07.680
because we're ready to publish these changes let's say,

95
00:04:07.680 --> 00:04:09.960
we can move to that main branch

96
00:04:09.960 --> 00:04:12.693
and use the merge command provided by Git.

97
00:04:13.920 --> 00:04:16.709
So for that, let me shrink this a little bit

98
00:04:16.709 --> 00:04:19.382
and watch this body code here.

99
00:04:20.459 --> 00:04:22.019
We simply run git merge

100
00:04:22.019 --> 00:04:24.510
and now we specify the name of the branch

101
00:04:24.510 --> 00:04:25.890
that contains the changes

102
00:04:25.890 --> 00:04:28.740
that we wanna merge into this main branch.

103
00:04:28.740 --> 00:04:32.280
And what this merge command will do then

104
00:04:32.280 --> 00:04:35.550
is it will simply take the latest commit

105
00:04:35.550 --> 00:04:37.800
and all the other commits up to that commit

106
00:04:37.800 --> 00:04:39.420
in that other branch.

107
00:04:39.420 --> 00:04:42.810
So in the feature-restructure branch in this case here

108
00:04:42.810 --> 00:04:46.560
and append them to the commits in this main branch.

109
00:04:46.560 --> 00:04:48.180
And Git will automatically try

110
00:04:48.180 --> 00:04:51.360
to resolve any conflicts it might encounter.

111
00:04:51.360 --> 00:04:53.970
For example, here in both branches,

112
00:04:53.970 --> 00:04:56.550
we added that the index.html file.

113
00:04:56.550 --> 00:05:00.663
But Git will be able to resolve such basic conflicts.

114
00:05:01.500 --> 00:05:03.090
If I hit Enter here,

115
00:05:03.090 --> 00:05:05.550
it therefore performs this merge

116
00:05:05.550 --> 00:05:09.330
and you see that it did indeed change the structure

117
00:05:09.330 --> 00:05:11.490
and add those links here

118
00:05:11.490 --> 00:05:15.180
but it also kept the exclamation mark in the title.

119
00:05:15.180 --> 00:05:16.110
That's what I meant.

120
00:05:16.110 --> 00:05:18.900
We had two commits in different branches

121
00:05:18.900 --> 00:05:20.850
that changed the same file

122
00:05:20.850 --> 00:05:23.913
but Git was able to resolve those problems.

123
00:05:25.020 --> 00:05:25.950
Now, what you also see

124
00:05:25.950 --> 00:05:28.170
is that we have to add a message here,

125
00:05:28.170 --> 00:05:30.450
a commit message because this merge

126
00:05:30.450 --> 00:05:34.260
is technically a brand new commit that's created here.

127
00:05:34.260 --> 00:05:36.420
And therefore we have to add a message,

128
00:05:36.420 --> 00:05:38.880
a description to that commit.

129
00:05:38.880 --> 00:05:40.920
We get a default description here,

130
00:05:40.920 --> 00:05:43.020
which says that we merged this.

131
00:05:43.020 --> 00:05:44.940
And we can simply accept this message

132
00:05:44.940 --> 00:05:48.390
by saving this message as it is suggested

133
00:05:48.390 --> 00:05:51.210
and how saving works again will depend

134
00:05:51.210 --> 00:05:54.570
on which editor you're using here in the terminal

135
00:05:54.570 --> 00:05:57.003
and which operating system you're using.

136
00:05:58.110 --> 00:05:59.820
Here I confirmed this

137
00:05:59.820 --> 00:06:03.900
and now we're getting a little summary of the merging.

138
00:06:03.900 --> 00:06:05.700
It was merged automatically

139
00:06:05.700 --> 00:06:07.500
for a more complex merge

140
00:06:07.500 --> 00:06:11.490
as you might have to do some manual conflict resolving

141
00:06:11.490 --> 00:06:13.770
but that's something that's covered in greater detail

142
00:06:13.770 --> 00:06:15.270
in our Git course.

143
00:06:15.270 --> 00:06:17.790
Here it was merged automatically.

144
00:06:17.790 --> 00:06:20.460
We see which strategy was used by Git

145
00:06:20.460 --> 00:06:22.710
because it knows different strategies

146
00:06:22.710 --> 00:06:24.900
but that's also not too important here.

147
00:06:24.900 --> 00:06:27.630
And we see which files were changed.

148
00:06:27.630 --> 00:06:30.840
We see that a lot of additions were made to index.html

149
00:06:30.840 --> 00:06:32.940
and some things were removed

150
00:06:32.940 --> 00:06:36.300
and we had some additions for lines that were added

151
00:06:36.300 --> 00:06:40.140
to be precise that were applied to styles.css.

152
00:06:40.140 --> 00:06:41.823
We also get a summary here.

153
00:06:43.590 --> 00:06:47.580
Now as a result, we have our exclamation mark in the title

154
00:06:47.580 --> 00:06:50.970
and we have our links and the changed structure

155
00:06:50.970 --> 00:06:54.510
in the body element of index.html.

156
00:06:54.510 --> 00:06:56.640
If we now run git log again,

157
00:06:56.640 --> 00:06:58.980
we also see that here we have the commit

158
00:06:58.980 --> 00:07:01.140
that performed the merge.

159
00:07:01.140 --> 00:07:04.800
And we get the other commits from both the main branch,

160
00:07:04.800 --> 00:07:07.950
this commit here where we changed the title,

161
00:07:07.950 --> 00:07:10.260
and from the feature-restructure branch

162
00:07:10.260 --> 00:07:12.240
where we added those links.

163
00:07:12.240 --> 00:07:14.460
And that's, by the way, still the latest state

164
00:07:14.460 --> 00:07:16.470
of that feature-restructure branch,

165
00:07:16.470 --> 00:07:19.200
as is indicated by this marker here.

166
00:07:19.200 --> 00:07:22.530
Since we merged feature-restructure into the main branch,

167
00:07:22.530 --> 00:07:25.650
the feature-restructure branch was not changed.

168
00:07:25.650 --> 00:07:28.320
There this exclamation mark won't be there,

169
00:07:28.320 --> 00:07:30.540
this exclamation mark in the title I mean

170
00:07:30.540 --> 00:07:33.510
because we merged feature-restructure into main,

171
00:07:33.510 --> 00:07:35.190
not the other way around.

172
00:07:35.190 --> 00:07:37.090
We could have done that but we didn't.

173
00:07:38.910 --> 00:07:41.550
And indeed, if I quickly go

174
00:07:41.550 --> 00:07:45.990
to the feature-restructure branch here,

175
00:07:45.990 --> 00:07:49.260
you will notice that there we have the same state as before.

176
00:07:49.260 --> 00:07:51.960
Links and changed structure are there

177
00:07:51.960 --> 00:07:53.913
but the exclamation mark is missing.

178
00:07:55.020 --> 00:07:56.700
But that's exactly the idea.

179
00:07:56.700 --> 00:07:59.430
Now we merged those changed into main

180
00:07:59.430 --> 00:08:02.640
and since we're done with our work on this new feature,

181
00:08:02.640 --> 00:08:05.010
we could, of course, therefore simply get rid

182
00:08:05.010 --> 00:08:06.900
of that feature-restructure branch

183
00:08:06.900 --> 00:08:11.250
by running git branch -D feature-restructure.

184
00:08:11.250 --> 00:08:12.600
That deletes this branch,

185
00:08:12.600 --> 00:08:14.310
which we don't need anymore.

186
00:08:14.310 --> 00:08:17.430
Of course, the changes which we merged are still there

187
00:08:17.430 --> 00:08:20.790
because we did merge those commits into main.

188
00:08:20.790 --> 00:08:23.220
And that's how we can work with different branches

189
00:08:23.220 --> 00:08:26.370
to work on different features simultaneously,

190
00:08:26.370 --> 00:08:29.853
only combining these features when we're ready for it.

