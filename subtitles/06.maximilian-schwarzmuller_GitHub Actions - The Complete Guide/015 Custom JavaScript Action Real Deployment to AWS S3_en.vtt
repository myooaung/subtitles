WEBVTT
1
00:00:02.430 --> 00:00:04.050
So how can we use this

2
00:00:04.050 --> 00:00:06.600
custom JavaScript action?

3
00:00:06.600 --> 00:00:09.600
Well, we again use it in our Workflow file of course

4
00:00:09.600 --> 00:00:12.720
because that's where we use all actions.

5
00:00:12.720 --> 00:00:17.720
And here I want to use it in this deploy site step here.

6
00:00:17.790 --> 00:00:21.510
In this deploy site step of the deploy job

7
00:00:21.510 --> 00:00:24.990
I did download my built files, my artifacts

8
00:00:24.990 --> 00:00:28.740
which were built in the previous job in the build job here.

9
00:00:28.740 --> 00:00:30.450
I did download them and store them

10
00:00:30.450 --> 00:00:34.680
in a folder called dist, like this.

11
00:00:34.680 --> 00:00:37.140
And now I wanna replace this step here

12
00:00:37.140 --> 00:00:39.900
where I just output a dummy message right now

13
00:00:39.900 --> 00:00:43.860
with a step where I use my custom action.

14
00:00:43.860 --> 00:00:47.760
For that I again, point to that action folder

15
00:00:47.760 --> 00:00:51.990
just as we did it before for other custom actions as well.

16
00:00:51.990 --> 00:00:56.940
Here, my action is called Deploy s3 Javascript.

17
00:00:56.940 --> 00:00:58.830
I will by the way remove that action

18
00:00:58.830 --> 00:01:00.120
from the information step.

19
00:01:00.120 --> 00:01:02.760
I will actually remove the entire information job

20
00:01:02.760 --> 00:01:04.500
because I don't need it anymore.

21
00:01:04.500 --> 00:01:06.753
So that's how I point at this action.

22
00:01:07.590 --> 00:01:12.210
And then we must add with to provide some input values.

23
00:01:12.210 --> 00:01:14.520
Because keep in mind at least the values

24
00:01:14.520 --> 00:01:17.760
for bucket and dist folder must be provided

25
00:01:17.760 --> 00:01:19.863
because required is set to true.

26
00:01:21.150 --> 00:01:24.270
So therefore, here I'll add the bucket input.

27
00:01:24.270 --> 00:01:27.430
And there you wanna provide your bucket name

28
00:01:28.770 --> 00:01:31.713
so this name here in my case.

29
00:01:33.150 --> 00:01:36.360
Then I also must provide a value for the dist folder,

30
00:01:36.360 --> 00:01:38.550
and here that should be dot slash dist

31
00:01:38.550 --> 00:01:40.260
pointing at dist folder,

32
00:01:40.260 --> 00:01:42.480
which contains the downloaded build files.

33
00:01:42.480 --> 00:01:45.333
So that the files from this folder will be uploaded.

34
00:01:46.380 --> 00:01:49.500
And you could also provide a value for bucket region

35
00:01:49.500 --> 00:01:52.500
if your bucket was created in a different region

36
00:01:52.500 --> 00:01:54.510
than US east one

37
00:01:54.510 --> 00:01:57.240
then you could, for example, add US east 2

38
00:01:57.240 --> 00:01:58.770
But here, this is not needed.

39
00:01:58.770 --> 00:02:00.153
Hence I'll comment it out.

40
00:02:00.990 --> 00:02:04.350
This will run our custom action,

41
00:02:04.350 --> 00:02:07.170
but at the moment this won't succeed.

42
00:02:07.170 --> 00:02:09.539
But why won't it succeed?

43
00:02:09.539 --> 00:02:12.840
At the moment, our custom JavaScript action would fail

44
00:02:12.840 --> 00:02:14.730
because in that actions code,

45
00:02:14.730 --> 00:02:17.100
we're trying to run this command here

46
00:02:17.100 --> 00:02:19.653
where we use the aws cli.

47
00:02:20.640 --> 00:02:25.640
Now this command tries to upload local files to s3 bucket.

48
00:02:26.100 --> 00:02:29.820
It should make sense that not everyone is allowed to do that

49
00:02:29.820 --> 00:02:31.050
out of the box though.

50
00:02:31.050 --> 00:02:34.410
Otherwise, everyone could start targeting your bucket

51
00:02:34.410 --> 00:02:36.360
and upload random files to it

52
00:02:36.360 --> 00:02:39.573
or download or delete files with other commands.

53
00:02:40.530 --> 00:02:42.540
This is clearly not something you want

54
00:02:42.540 --> 00:02:43.710
and therefore by default

55
00:02:43.710 --> 00:02:45.930
this will fail because you don't have permission

56
00:02:45.930 --> 00:02:47.763
to interact with that bucket.

57
00:02:48.630 --> 00:02:51.393
Now, how do you get the permission to do so though?

58
00:02:52.530 --> 00:02:55.920
Well, for this, aws offers a feature

59
00:02:55.920 --> 00:02:58.100
which you can reach by clicking on your account name

60
00:02:58.100 --> 00:02:59.490
in the top right corner,

61
00:02:59.490 --> 00:03:01.860
and then security credentials.

62
00:03:01.860 --> 00:03:06.240
Here you can generate and download some keys

63
00:03:06.240 --> 00:03:09.030
that can be used for authenticating commands

64
00:03:09.030 --> 00:03:12.540
that you're sending to this AWS account.

65
00:03:12.540 --> 00:03:15.153
These access keys here to be precise.

66
00:03:16.140 --> 00:03:18.930
Here you must create a new access key

67
00:03:18.930 --> 00:03:21.090
and these values will only be shown once.

68
00:03:21.090 --> 00:03:23.550
You can download them though.

69
00:03:23.550 --> 00:03:25.260
And these two values,

70
00:03:25.260 --> 00:03:28.320
the access key ID and the secret access key

71
00:03:28.320 --> 00:03:31.800
can be used to authenticate this command.

72
00:03:31.800 --> 00:03:35.220
There also is a different way of authenticating commands

73
00:03:35.220 --> 00:03:38.040
to which I'll come back to in the next course section

74
00:03:38.040 --> 00:03:41.640
but this is one quick and easy way of doing so.

75
00:03:41.640 --> 00:03:43.920
So therefore I'll grab this access key.

76
00:03:43.920 --> 00:03:47.853
And now the question is how do I provide it to that command?

77
00:03:49.200 --> 00:03:52.620
Well, you do that with help of environment variables.

78
00:03:52.620 --> 00:03:57.330
The aws cli will look for certain environment variables

79
00:03:57.330 --> 00:04:01.410
with certain names and extract values from them.

80
00:04:01.410 --> 00:04:03.930
And one environment variable it will look for

81
00:04:03.930 --> 00:04:08.930
is the AWS access key ID environment variable

82
00:04:09.180 --> 00:04:10.293
written like that.

83
00:04:11.490 --> 00:04:13.440
So if you set that variable

84
00:04:13.440 --> 00:04:16.980
to that access key, which you see here

85
00:04:16.980 --> 00:04:20.403
then AWS will use that for authenticating requests.

86
00:04:21.660 --> 00:04:24.180
But you can't set the environment variable like this.

87
00:04:24.180 --> 00:04:25.860
And we wouldn't want to do this

88
00:04:25.860 --> 00:04:27.870
in this JavaScript code anyways

89
00:04:27.870 --> 00:04:32.040
because again that wouldn't make that code very reusable.

90
00:04:32.040 --> 00:04:35.160
Instead, we wanna set this in our Workflow

91
00:04:35.160 --> 00:04:37.740
and we can set the environment variables needed

92
00:04:37.740 --> 00:04:40.230
by that action right in that step

93
00:04:40.230 --> 00:04:42.453
with help of the env keyword here.

94
00:04:43.380 --> 00:04:47.160
Before in the course we already used env on job level

95
00:04:47.160 --> 00:04:48.870
or even Workflow level

96
00:04:48.870 --> 00:04:51.090
and we could do the same here.

97
00:04:51.090 --> 00:04:54.060
But these environment variables are really only needed

98
00:04:54.060 --> 00:04:56.280
by this action in this step.

99
00:04:56.280 --> 00:04:59.940
Therefore, I'll add step specific environment variables

100
00:04:59.940 --> 00:05:02.580
which are only accessible by this step

101
00:05:02.580 --> 00:05:05.250
or by the action performed by this step

102
00:05:05.250 --> 00:05:07.713
by adding the env key to this step.

103
00:05:08.700 --> 00:05:11.070
And then nested below the env key,

104
00:05:11.070 --> 00:05:13.500
we can add this special AWS

105
00:05:13.500 --> 00:05:17.250
underscore access underscore key underscore ID

106
00:05:17.250 --> 00:05:20.860
environment variable and set it to this key here

107
00:05:22.260 --> 00:05:25.710
and do the same for this secret access key

108
00:05:25.710 --> 00:05:30.710
where I add my AWS secret access key environment variable

109
00:05:31.320 --> 00:05:32.433
written like this.

110
00:05:33.750 --> 00:05:35.550
Now of course, these are values

111
00:05:35.550 --> 00:05:37.680
that shouldn't be added like this in code

112
00:05:37.680 --> 00:05:39.810
because everyone who sees them

113
00:05:39.810 --> 00:05:42.360
will be able to send commands to this account

114
00:05:42.360 --> 00:05:45.300
and do malicious things with it potentially.

115
00:05:45.300 --> 00:05:46.170
And therefore, by the way,

116
00:05:46.170 --> 00:05:48.330
I will also delete these access keys

117
00:05:48.330 --> 00:05:50.070
after recording this video.

118
00:05:50.070 --> 00:05:52.290
So you don't have to try using them,

119
00:05:52.290 --> 00:05:53.520
but you can of course

120
00:05:53.520 --> 00:05:55.020
but it won't work.

121
00:05:55.020 --> 00:05:56.520
But we shouldn't expose them.

122
00:05:56.520 --> 00:05:59.760
Nobody should be able to see these values.

123
00:05:59.760 --> 00:06:01.650
And of course, we learned how we can make sure

124
00:06:01.650 --> 00:06:03.630
that nobody sees these values.

125
00:06:03.630 --> 00:06:04.953
We can use a secret.

126
00:06:05.850 --> 00:06:09.900
For that I'll go back here to this Repository

127
00:06:09.900 --> 00:06:13.260
and we can add secrets by adding an environment.

128
00:06:13.260 --> 00:06:15.480
If this would be a public Repository

129
00:06:15.480 --> 00:06:17.610
or we had a paid plan

130
00:06:17.610 --> 00:06:21.840
or we add Repository wide secrets, which I will do here.

131
00:06:21.840 --> 00:06:26.280
I'll add a new secret here, which holds my access key.

132
00:06:26.280 --> 00:06:28.690
And I'll name it AWS access key id

133
00:06:29.730 --> 00:06:31.710
and add the secret

134
00:06:31.710 --> 00:06:34.920
and do the same here with the secret access key,

135
00:06:34.920 --> 00:06:37.980
add a new Repository secret

136
00:06:37.980 --> 00:06:40.743
with a name of AWS secret access key.

137
00:06:41.760 --> 00:06:44.850
And now these values are stored securely.

138
00:06:44.850 --> 00:06:46.560
And here we can extract them

139
00:06:46.560 --> 00:06:51.120
by using secrets.aws access key.

140
00:06:51.120 --> 00:06:56.120
And here it's secrets.aws secret access key.

141
00:06:59.160 --> 00:07:02.130
With that, we're setting these environment variables.

142
00:07:02.130 --> 00:07:05.610
And as mentioned before, this aws cli command

143
00:07:05.610 --> 00:07:08.580
will automatically look for these variables

144
00:07:08.580 --> 00:07:12.300
with these names to authenticate this request.

145
00:07:12.300 --> 00:07:14.190
And therefore, now with that

146
00:07:14.190 --> 00:07:16.720
finally we can create a new commit

147
00:07:18.120 --> 00:07:21.240
added custom deploy action

148
00:07:21.240 --> 00:07:23.310
and see whether this all works

149
00:07:23.310 --> 00:07:25.770
by pushing this to the Repository.

150
00:07:25.770 --> 00:07:28.650
Here a new Workflow run is triggered

151
00:07:28.650 --> 00:07:30.720
and this should now hopefully succeed.

152
00:07:30.720 --> 00:07:33.690
And in the deploy job upload these files

153
00:07:33.690 --> 00:07:36.333
to this s3 Repository.

154
00:07:37.560 --> 00:07:41.400
For that we can go back to s3

155
00:07:41.400 --> 00:07:44.670
and then also dive into this bucket here.

156
00:07:44.670 --> 00:07:47.820
And eventually the website files should be uploaded there.

157
00:07:47.820 --> 00:07:50.250
But right now, this is still all executing.

158
00:07:50.250 --> 00:07:53.730
So let's wait until this Workflow finished

159
00:07:53.730 --> 00:07:55.710
and here it did all finish.

160
00:07:55.710 --> 00:07:57.960
And if we take a look at this deploy job,

161
00:07:57.960 --> 00:08:00.180
we see that under Deploy site,

162
00:08:00.180 --> 00:08:02.970
our own action was executed here.

163
00:08:02.970 --> 00:08:05.880
It did use these environment variables

164
00:08:05.880 --> 00:08:07.750
and our extra inputs

165
00:08:08.670 --> 00:08:13.670
and it then synchronized the local files to this s3 bucket

166
00:08:13.770 --> 00:08:17.100
which we can also see if we refresh these objects here.

167
00:08:17.100 --> 00:08:18.750
Here they are.

168
00:08:18.750 --> 00:08:21.720
And now we can view this website if we want to

169
00:08:21.720 --> 00:08:24.690
by clicking on properties on this bucket.

170
00:08:24.690 --> 00:08:27.750
And down here we find this url,

171
00:08:27.750 --> 00:08:30.180
which is auto generated by aws,

172
00:08:30.180 --> 00:08:33.000
which allows us to view this deployed website

173
00:08:33.000 --> 00:08:35.673
which is now really out there in the internet.

