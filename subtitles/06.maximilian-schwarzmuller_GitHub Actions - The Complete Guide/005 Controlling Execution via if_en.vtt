WEBVTT
1
00:00:02.310 --> 00:00:04.470
So let's now add this condition here

2
00:00:04.470 --> 00:00:07.560
to this upload test report step.

3
00:00:07.560 --> 00:00:09.720
For that, we can add our if field here

4
00:00:09.720 --> 00:00:11.730
and then here we write the condition

5
00:00:11.730 --> 00:00:15.540
that must be met to execute this step.

6
00:00:15.540 --> 00:00:18.118
And the condition we write here can be wrapped

7
00:00:18.118 --> 00:00:21.660
in this GitHub Actions expressions syntax here

8
00:00:21.660 --> 00:00:24.360
with the dollar sign and the double curly braces

9
00:00:24.360 --> 00:00:27.180
since we will evaluate an expression here

10
00:00:27.180 --> 00:00:30.300
since we will look at some dynamic values here

11
00:00:30.300 --> 00:00:32.910
but the if field is actually special

12
00:00:32.910 --> 00:00:35.700
since you typically use expressions here

13
00:00:35.700 --> 00:00:38.940
because typically, you don't just wanna hard code true

14
00:00:38.940 --> 00:00:41.310
or false here because in that case,

15
00:00:41.310 --> 00:00:43.950
you could just omit the if clause all together

16
00:00:43.950 --> 00:00:46.500
because that would always be true or false.

17
00:00:46.500 --> 00:00:50.520
Since you typically need a dynamically derived value here,

18
00:00:50.520 --> 00:00:54.210
GitHub Actions allows you to omit this syntax here.

19
00:00:54.210 --> 00:00:57.870
It allows you to omit the dollar sign and curly braces

20
00:00:57.870 --> 00:01:00.450
even though you can still add them if you want to

21
00:01:00.450 --> 00:01:01.680
but you can omit them

22
00:01:01.680 --> 00:01:05.550
and you can also just write your expression just like this.

23
00:01:05.550 --> 00:01:07.620
That's an exception for that if field

24
00:01:07.620 --> 00:01:11.163
because you typically need dynamically derived values here.

25
00:01:12.420 --> 00:01:14.520
Now, here we wanna make sure that this runs

26
00:01:14.520 --> 00:01:16.950
if this step failed.

27
00:01:16.950 --> 00:01:19.080
That's essentially what we wanna do.

28
00:01:19.080 --> 00:01:20.820
If this step succeeds,

29
00:01:20.820 --> 00:01:24.240
this will run anyways and actually, we don't want it

30
00:01:24.240 --> 00:01:25.500
to run in that case

31
00:01:25.500 --> 00:01:27.780
but therefore, if we would add a condition

32
00:01:27.780 --> 00:01:30.320
that makes sure that this step only runs

33
00:01:30.320 --> 00:01:33.780
of that step failed, we would make sure that it does not run

34
00:01:33.780 --> 00:01:35.250
if that steps succeeds,

35
00:01:35.250 --> 00:01:37.050
so if our tests succeed

36
00:01:37.050 --> 00:01:39.240
but on the other hand, it does still run

37
00:01:39.240 --> 00:01:42.240
if our tests fail, which currently is not the case

38
00:01:42.240 --> 00:01:43.323
as you just saw.

39
00:01:44.730 --> 00:01:47.730
Now, therefore, we need a way of referencing this step.

40
00:01:47.730 --> 00:01:50.910
We must find out whether that step failed or succeeded,

41
00:01:50.910 --> 00:01:55.260
and to do that we can add the id field to that step.

42
00:01:55.260 --> 00:01:58.200
Now, we did see the id field in action a little bit earlier

43
00:01:58.200 --> 00:01:59.310
in the course already.

44
00:01:59.310 --> 00:02:02.250
You can add the id field to any step you have

45
00:02:02.250 --> 00:02:05.880
and that allows you to assign a unique id to every step

46
00:02:05.880 --> 00:02:08.729
which then can be used to reference that step

47
00:02:08.729 --> 00:02:11.460
and use data from that step in other steps

48
00:02:11.460 --> 00:02:12.780
or in your job.

49
00:02:12.780 --> 00:02:15.090
For example, we used it earlier in the course

50
00:02:15.090 --> 00:02:18.513
to get hold of some outputs that were set in a step.

51
00:02:19.500 --> 00:02:23.760
Here I'll give this step an id of run-tests

52
00:02:23.760 --> 00:02:26.280
but the id name is totally up to you.

53
00:02:26.280 --> 00:02:29.070
It doesn't have to be run-tests.

54
00:02:29.070 --> 00:02:30.540
And here in the if condition,

55
00:02:30.540 --> 00:02:34.590
we can then reach out to the special steps context object,

56
00:02:34.590 --> 00:02:38.640
which is one of the context objects supported by GitHub.

57
00:02:38.640 --> 00:02:40.590
Here it's this one.

58
00:02:40.590 --> 00:02:42.510
That's the steps context object,

59
00:02:42.510 --> 00:02:44.310
which we're using now.

60
00:02:44.310 --> 00:02:45.960
And on this steps object,

61
00:02:45.960 --> 00:02:49.050
we can reach out to other steps by their IDs,

62
00:02:49.050 --> 00:02:51.150
so now here I add run-tests

63
00:02:51.150 --> 00:02:54.570
to reach out to this specific step.

64
00:02:54.570 --> 00:02:57.030
And then we learn in the official documentation

65
00:02:57.030 --> 00:02:59.460
that on this steps context object,

66
00:02:59.460 --> 00:03:03.540
when we do reach out to a specific step by its id,

67
00:03:03.540 --> 00:03:05.370
we actually can get information

68
00:03:05.370 --> 00:03:07.920
about the outputs produced by that step,

69
00:03:07.920 --> 00:03:11.070
which is what we did earlier in the course already

70
00:03:11.070 --> 00:03:12.679
but we can also get the conclusion

71
00:03:12.679 --> 00:03:16.020
or the outcome of that step.

72
00:03:16.020 --> 00:03:18.510
And in the end, these two fields simply tell us

73
00:03:18.510 --> 00:03:20.940
whether the step succeeded or failed.

74
00:03:20.940 --> 00:03:24.630
Now, we've got two fields here, conclusion and outcome,

75
00:03:24.630 --> 00:03:26.520
instead of just one field

76
00:03:26.520 --> 00:03:29.460
because we also have this continue-on-error field,

77
00:03:29.460 --> 00:03:30.930
which we'll explore later,

78
00:03:30.930 --> 00:03:33.480
which actually allows us to continue after a step

79
00:03:33.480 --> 00:03:34.710
even if it failed

80
00:03:34.710 --> 00:03:36.540
and in that case, we've got one field

81
00:03:36.540 --> 00:03:38.880
that tells us whether the step would have failed

82
00:03:38.880 --> 00:03:40.410
without continue-on-error

83
00:03:40.410 --> 00:03:43.110
but then actually was treated as a success

84
00:03:43.110 --> 00:03:44.790
because of that field added

85
00:03:44.790 --> 00:03:47.130
but since we don't know that field right now,

86
00:03:47.130 --> 00:03:52.020
we can ignore it and we can simply use the outcome here.

87
00:03:52.020 --> 00:03:56.670
So here we can use steps.run-tests.outcome

88
00:03:56.670 --> 00:04:00.990
to find out whether that step succeeded or failed.

89
00:04:00.990 --> 00:04:03.870
And in the end, both outcome and conclusion

90
00:04:03.870 --> 00:04:05.250
then contains some text

91
00:04:05.250 --> 00:04:07.650
that tells us whether the step succeeded

92
00:04:07.650 --> 00:04:11.100
and we get, for example, success as a text if it succeeded,

93
00:04:11.100 --> 00:04:13.050
failure if it well, failed,

94
00:04:13.050 --> 00:04:15.060
canceled if it was manually canceled

95
00:04:15.060 --> 00:04:17.130
or skipped if it was skipped

96
00:04:17.130 --> 00:04:19.470
maybe due to some other if condition

97
00:04:19.470 --> 00:04:21.423
that was attached to that step.

98
00:04:22.620 --> 00:04:23.910
So in our case here,

99
00:04:23.910 --> 00:04:26.700
we're looking for the failure text

100
00:04:26.700 --> 00:04:29.160
because we know that if this step failed,

101
00:04:29.160 --> 00:04:31.260
this run-tests step failed,

102
00:04:31.260 --> 00:04:34.350
then we wanna upload our test reports.

103
00:04:34.350 --> 00:04:38.340
So here we check if the outcome is equal to failure.

104
00:04:38.340 --> 00:04:40.740
And failure is wrapped between single quotes

105
00:04:40.740 --> 00:04:42.660
because that is some text.

106
00:04:42.660 --> 00:04:45.180
It's not some context object

107
00:04:45.180 --> 00:04:47.940
or anything like that but it's some text,

108
00:04:47.940 --> 00:04:50.580
it's a string to stay in the programming world

109
00:04:50.580 --> 00:04:53.370
and therefore, it's wrapped with single quotes.

110
00:04:53.370 --> 00:04:56.070
And the double equals sign operator here

111
00:04:56.070 --> 00:04:59.430
is used for comparing this value

112
00:04:59.430 --> 00:05:02.179
for equality to this value.

113
00:05:02.179 --> 00:05:04.920
So whether outcome is equal to failure.

114
00:05:04.920 --> 00:05:06.900
A single equal sign is not enough.

115
00:05:06.900 --> 00:05:09.240
You need two equal signs here.

116
00:05:09.240 --> 00:05:12.600
By the way, there are various operators you can use

117
00:05:12.600 --> 00:05:14.400
in your if conditions.

118
00:05:14.400 --> 00:05:17.010
For example, that double equal sign operator

119
00:05:17.010 --> 00:05:18.690
to check for equality

120
00:05:18.690 --> 00:05:20.670
but you can also check for inequality

121
00:05:20.670 --> 00:05:22.331
by adding an exclamation mark.

122
00:05:22.331 --> 00:05:24.690
You can combine multiple conditions

123
00:05:24.690 --> 00:05:27.480
with logical ands, or ors.

124
00:05:27.480 --> 00:05:30.300
And you can also look for greater or smaller

125
00:05:30.300 --> 00:05:33.690
or greater or equal or smaller or equal values.

126
00:05:33.690 --> 00:05:35.940
So you can basically do what you know

127
00:05:35.940 --> 00:05:38.580
from if conditions in programming languages.

128
00:05:38.580 --> 00:05:42.093
You have a very similar syntax here with GitHub Actions.

129
00:05:42.960 --> 00:05:46.530
Now, with this condition added to this step,

130
00:05:46.530 --> 00:05:50.400
what we should see is that this step here runs

131
00:05:50.400 --> 00:05:51.960
if this step fails

132
00:05:51.960 --> 00:05:55.033
but does not run if this step succeeds.

133
00:05:55.033 --> 00:05:58.140
So if we now create a new commit here,

134
00:05:58.140 --> 00:06:00.150
if we stage our files and create a commit

135
00:06:00.150 --> 00:06:03.123
and push this, we'll see whether that works.

136
00:06:05.070 --> 00:06:08.160
And we see that as this executes,

137
00:06:08.160 --> 00:06:12.030
our test step fails as expected

138
00:06:12.030 --> 00:06:16.113
but we still skip this upload test report step.

139
00:06:16.980 --> 00:06:20.820
So it's still not working as we want it to work.

140
00:06:20.820 --> 00:06:22.230
I can tell you that indeed,

141
00:06:22.230 --> 00:06:24.570
this step, the upload test report step

142
00:06:24.570 --> 00:06:27.450
would be skipped if test code succeeds

143
00:06:27.450 --> 00:06:31.890
but we haven't met our goal of running upload test report

144
00:06:31.890 --> 00:06:33.960
if test code fails.

145
00:06:33.960 --> 00:06:37.950
And that, of course, is an important goal to achieve.

146
00:06:37.950 --> 00:06:40.230
Now, this step here should execute

147
00:06:40.230 --> 00:06:42.330
when this step fails

148
00:06:42.330 --> 00:06:44.040
but that's not happening here

149
00:06:44.040 --> 00:06:46.800
and the question is why is this not happening?

150
00:06:46.800 --> 00:06:48.600
Well, the reason is that yes,

151
00:06:48.600 --> 00:06:51.180
our condition here does indeed check

152
00:06:51.180 --> 00:06:53.396
whether that step failed

153
00:06:53.396 --> 00:06:57.120
but GitHub Actions still ignores this step

154
00:06:57.120 --> 00:06:59.820
because it still has its default behavior

155
00:06:59.820 --> 00:07:02.340
of not executing any other steps

156
00:07:02.340 --> 00:07:04.083
after this failing step.

157
00:07:04.920 --> 00:07:07.080
To change that default behavior,

158
00:07:07.080 --> 00:07:10.170
we must add a special condition here.

159
00:07:10.170 --> 00:07:12.870
We must execute a special function here

160
00:07:12.870 --> 00:07:15.900
in this if condition of this step.

161
00:07:15.900 --> 00:07:20.550
And that's the failure function written like this,

162
00:07:20.550 --> 00:07:23.220
which we combine with that other check

163
00:07:23.220 --> 00:07:25.860
with this and operator.

164
00:07:25.860 --> 00:07:28.533
Now, what's this failure function here though?

