WEBVTT
1
00:00:02.280 --> 00:00:04.830
And again, if we would now execute

2
00:00:04.830 --> 00:00:08.430
this workflow again because I, for example

3
00:00:08.430 --> 00:00:12.420
changed some file and create a new commit.

4
00:00:12.420 --> 00:00:17.070
If I change this title from H3 to H2 here

5
00:00:17.070 --> 00:00:19.143
and I then create a new commit,

6
00:00:20.490 --> 00:00:24.210
change to H2 and I push this,

7
00:00:24.210 --> 00:00:25.800
you will see that now even

8
00:00:25.800 --> 00:00:28.320
for the first job install dependencies

9
00:00:28.320 --> 00:00:31.410
will be much faster because that cache is used

10
00:00:31.410 --> 00:00:33.810
across workflow executions.

11
00:00:33.810 --> 00:00:37.320
So now if we wait for this test job to start,

12
00:00:37.320 --> 00:00:39.720
you will notice that cache dependencies again

13
00:00:39.720 --> 00:00:43.110
was able to restore the cache

14
00:00:43.110 --> 00:00:44.880
and therefore install dependencies

15
00:00:44.880 --> 00:00:47.220
also finishes much faster.

16
00:00:47.220 --> 00:00:49.020
Occasionally it might take longer

17
00:00:49.020 --> 00:00:51.390
but typically it should finish much faster.

18
00:00:51.390 --> 00:00:53.010
And the same of course, should be true

19
00:00:53.010 --> 00:00:56.670
for the install dependencies step in our jobs.

20
00:00:56.670 --> 00:01:00.750
Now, of course if I do change my dependencies,

21
00:01:00.750 --> 00:01:03.570
for example here if I run NPM outdated,

22
00:01:03.570 --> 00:01:05.519
I can update some dependencies.

23
00:01:05.519 --> 00:01:07.050
It's not too important.

24
00:01:07.050 --> 00:01:11.040
But if I run NPM update to update some dependencies,

25
00:01:11.040 --> 00:01:13.290
that will change both package dot JSON

26
00:01:13.290 --> 00:01:16.680
and package lock dot JSON as you can see here

27
00:01:16.680 --> 00:01:18.510
by the color coding.

28
00:01:18.510 --> 00:01:21.540
And if I now create a new commit here

29
00:01:21.540 --> 00:01:26.540
where I say updated dependencies, and I push this commit

30
00:01:27.540 --> 00:01:30.630
you will see that now the cache won't be reused

31
00:01:30.630 --> 00:01:33.510
because package lock dot JSON changed

32
00:01:33.510 --> 00:01:36.240
and therefore the cache key will change.

33
00:01:36.240 --> 00:01:39.180
You will see that it's not able to use the cache

34
00:01:39.180 --> 00:01:41.400
for this new key and the old cache

35
00:01:41.400 --> 00:01:43.500
will therefore eventually be discarded

36
00:01:43.500 --> 00:01:45.780
and the newly downloaded dependencies

37
00:01:45.780 --> 00:01:48.090
will now instead be stored in the cache

38
00:01:48.090 --> 00:01:51.180
by the post cache dependencies step.

39
00:01:51.180 --> 00:01:53.640
But after that, there again is a cache

40
00:01:53.640 --> 00:01:56.700
that can be used by other jobs and workflows.

41
00:01:56.700 --> 00:01:59.010
So that's how you can cache dependencies

42
00:01:59.010 --> 00:02:02.520
and how you can significantly speed up your workflows

43
00:02:02.520 --> 00:02:03.843
with help of caching.

