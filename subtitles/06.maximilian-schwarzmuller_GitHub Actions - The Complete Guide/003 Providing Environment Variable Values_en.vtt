WEBVTT
1
00:00:02.100 --> 00:00:04.950
So how can we provide values

2
00:00:04.950 --> 00:00:07.020
for these environment variables

3
00:00:07.020 --> 00:00:10.410
or for this port environment variable?

4
00:00:10.410 --> 00:00:14.010
Well, in your GitHub Actions Workflow definition file,

5
00:00:14.010 --> 00:00:15.660
there are different places

6
00:00:15.660 --> 00:00:19.290
where environment variable values can be provided.

7
00:00:19.290 --> 00:00:21.720
For example, you can provide some values

8
00:00:21.720 --> 00:00:25.980
right here on the overall workflow level.

9
00:00:25.980 --> 00:00:29.100
You do this by adding the env field here

10
00:00:29.100 --> 00:00:32.790
on the same level as you have name and on,

11
00:00:32.790 --> 00:00:37.500
and the nested below this end field and therefore indented,

12
00:00:37.500 --> 00:00:40.830
you add your environment variables.

13
00:00:40.830 --> 00:00:43.710
For example here, we could, for example say,

14
00:00:43.710 --> 00:00:46.530
that for all jobs in this workflow,

15
00:00:46.530 --> 00:00:49.350
we wanna use the same database name.

16
00:00:49.350 --> 00:00:52.860
The address and password and username might be different

17
00:00:52.860 --> 00:00:56.250
but the name of the database should always be the same

18
00:00:56.250 --> 00:00:58.200
because it would be fair to assume

19
00:00:58.200 --> 00:01:01.200
that even if we're using different database servers

20
00:01:01.200 --> 00:01:02.850
for testing and production,

21
00:01:02.850 --> 00:01:05.310
the name of the database on that server

22
00:01:05.310 --> 00:01:06.633
will always be the same.

23
00:01:07.740 --> 00:01:11.070
Therefore, we could grab this MONGODB_DB_NAME

24
00:01:11.070 --> 00:01:12.540
environment variable here,

25
00:01:12.540 --> 00:01:15.840
which is used for setting the database name

26
00:01:15.840 --> 00:01:19.023
and add this here as a key under env.

27
00:01:19.980 --> 00:01:22.740
And then as a value, you provide the value

28
00:01:22.740 --> 00:01:25.980
that should be injected in the code when that server,

29
00:01:25.980 --> 00:01:28.530
when that backend application is started

30
00:01:28.530 --> 00:01:30.543
as part of our workflow.

31
00:01:31.560 --> 00:01:34.920
Here, we could for example use gha-demo,

32
00:01:34.920 --> 00:01:37.290
but the name is up to you.

33
00:01:37.290 --> 00:01:40.770
By the way, here in this example, I'm using MONGODB

34
00:01:40.770 --> 00:01:43.110
which is a database engine

35
00:01:43.110 --> 00:01:46.350
and a company providing various database services.

36
00:01:46.350 --> 00:01:48.270
It is of course, just one example.

37
00:01:48.270 --> 00:01:51.420
The general approach and idea would be the same

38
00:01:51.420 --> 00:01:54.660
no matter which kind of database engine you are using.

39
00:01:54.660 --> 00:01:57.540
And you also don't just use environment variables

40
00:01:57.540 --> 00:01:59.133
for databases of course.

41
00:02:00.150 --> 00:02:03.090
But here, we now set this environment variable

42
00:02:03.090 --> 00:02:07.380
on workflow level since I added the env key here.

43
00:02:07.380 --> 00:02:10.800
And setting this on workflow level simply means,

44
00:02:10.800 --> 00:02:12.390
that this environment variable,

45
00:02:12.390 --> 00:02:15.090
this MONGODB_DB_NAME variable,

46
00:02:15.090 --> 00:02:17.580
will be available in all jobs

47
00:02:17.580 --> 00:02:20.670
unless a job overrides this variable

48
00:02:20.670 --> 00:02:23.370
by defining a variable of the same name,

49
00:02:23.370 --> 00:02:25.470
which is not the case here.

50
00:02:25.470 --> 00:02:27.300
Now, of course, not limited

51
00:02:27.300 --> 00:02:30.900
to defining environment variables on workflow level.

52
00:02:30.900 --> 00:02:33.330
You can also define them on job level.

53
00:02:33.330 --> 00:02:36.300
For example here, for the test job,

54
00:02:36.300 --> 00:02:38.460
we could define some environment variables

55
00:02:38.460 --> 00:02:41.400
by adding the env key under this test job.

56
00:02:41.400 --> 00:02:45.843
So indented and nested under this test job.

57
00:02:46.800 --> 00:02:49.740
Now any environment variables specified here

58
00:02:49.740 --> 00:02:52.500
will only be available in this test job

59
00:02:52.500 --> 00:02:54.273
and not in any other jobs.

60
00:02:55.110 --> 00:02:58.290
And here we could provide our cluster address,

61
00:02:58.290 --> 00:03:01.260
the MONGODB cluster address, and also the MONGODB

62
00:03:01.260 --> 00:03:04.410
username and password environment variables.

63
00:03:04.410 --> 00:03:07.650
Because it would be reasonable to assume that for testing,

64
00:03:07.650 --> 00:03:11.100
we wanna use a specific database with its own credentials

65
00:03:11.100 --> 00:03:14.913
that probably differs from our production database.

66
00:03:15.900 --> 00:03:17.910
Now in this demo workflow,

67
00:03:17.910 --> 00:03:21.900
we have no other job that needs to connect to the database

68
00:03:21.900 --> 00:03:23.670
but if we had other jobs,

69
00:03:23.670 --> 00:03:27.030
then they might be using different servers and credentials

70
00:03:27.030 --> 00:03:29.070
and therefore, defining this on job level

71
00:03:29.070 --> 00:03:30.450
might make a lot of sense,

72
00:03:30.450 --> 00:03:34.020
but it will of course depend on your exact use case.

73
00:03:34.020 --> 00:03:36.510
Now, in order to define our values here,

74
00:03:36.510 --> 00:03:39.180
we of course need database,

75
00:03:39.180 --> 00:03:42.130
and therefore in the next lecture, I'll quickly create one.

