WEBVTT
1
00:00:02.100 --> 00:00:04.620
So by now we got some practice when it comes

2
00:00:04.620 --> 00:00:08.310
to working with GitHub and remote repositories.

3
00:00:08.310 --> 00:00:10.230
Now, as you can see on this repository,

4
00:00:10.230 --> 00:00:13.020
there are many tabs we could dive into here

5
00:00:13.020 --> 00:00:15.360
and this is not an advanced GitHub course,

6
00:00:15.360 --> 00:00:19.140
that's why we'll not dive deeply into all these tabs here.

7
00:00:19.140 --> 00:00:21.840
The Actions tab is for GitHub Actions,

8
00:00:21.840 --> 00:00:23.790
what is of course what this course is about

9
00:00:23.790 --> 00:00:25.710
and therefore we'll take a way closer look

10
00:00:25.710 --> 00:00:28.440
at this tab later in the course.

11
00:00:28.440 --> 00:00:31.710
Issues and Pull requests will also be covered later.

12
00:00:31.710 --> 00:00:35.820
The Projects tab would allow us to set up a project here

13
00:00:35.820 --> 00:00:39.090
on GitHub and actually organize our next steps

14
00:00:39.090 --> 00:00:44.090
and use GitHub as a project management software almost.

15
00:00:44.400 --> 00:00:47.070
The Wiki tab allows us to set up a wiki

16
00:00:47.070 --> 00:00:48.870
that belongs to this repository,

17
00:00:48.870 --> 00:00:51.720
which can be useful if we're doing open source development

18
00:00:51.720 --> 00:00:56.523
and we wanna add additional FAQs or instructions or help.

19
00:00:58.020 --> 00:00:59.670
The Security tab allows us

20
00:00:59.670 --> 00:01:02.160
to set up various security settings

21
00:01:02.160 --> 00:01:04.590
and also provides us with reports

22
00:01:04.590 --> 00:01:09.450
about possible security issues with our repository.

23
00:01:09.450 --> 00:01:12.930
Insights gives us some analytics for this repository

24
00:01:12.930 --> 00:01:15.780
and Settings allows us to set all kinds

25
00:01:15.780 --> 00:01:17.880
of settings for this repository.

26
00:01:17.880 --> 00:01:21.420
We can change the name, we can change the visibility

27
00:01:21.420 --> 00:01:24.060
and for example, turn a public repository

28
00:01:24.060 --> 00:01:26.500
into a private repository if we wanted to

29
00:01:27.360 --> 00:01:30.300
and do many other things as well.

30
00:01:30.300 --> 00:01:33.690
GitHub is quite an advanced service with many features

31
00:01:33.690 --> 00:01:36.030
and it's way beyond the scope of this course

32
00:01:36.030 --> 00:01:38.310
to dive into all these features here.

33
00:01:38.310 --> 00:01:40.800
Many features are also only helpful

34
00:01:40.800 --> 00:01:43.833
in certain possibly niche scenarios.

35
00:01:45.180 --> 00:01:47.460
For the moment, I wanna focus

36
00:01:47.460 --> 00:01:49.470
on something different instead.

37
00:01:49.470 --> 00:01:51.840
Let's sign out of this user here

38
00:01:51.840 --> 00:01:54.120
and let's take a look at this repository

39
00:01:54.120 --> 00:01:56.070
as an anonymous user.

40
00:01:56.070 --> 00:01:58.290
So I'll copy this link here in the URL

41
00:01:58.290 --> 00:02:01.950
and sign out and then go back to the repository.

42
00:02:01.950 --> 00:02:04.950
We can still view it even without being locked in

43
00:02:04.950 --> 00:02:08.820
because it's a public repository as you can see here.

44
00:02:08.820 --> 00:02:11.400
Therefore, even if we're just visiting GitHub

45
00:02:11.400 --> 00:02:14.610
as an anonymous user and we're not locked in

46
00:02:14.610 --> 00:02:16.113
we can browse that code.

47
00:02:17.130 --> 00:02:19.530
Of course, we can't change the settings.

48
00:02:19.530 --> 00:02:22.680
That's why we no longer have this Settings tab here.

49
00:02:22.680 --> 00:02:24.900
And we also can't change the code

50
00:02:24.900 --> 00:02:26.640
from inside GitHub here anymore.

51
00:02:26.640 --> 00:02:28.650
But we can browse and view the code

52
00:02:28.650 --> 00:02:31.230
and we could also browse multiple branches

53
00:02:31.230 --> 00:02:33.393
if there would be multiple branches.

54
00:02:34.680 --> 00:02:38.640
Now, let's say we're interested in this repository

55
00:02:38.640 --> 00:02:40.050
and the code in there.

56
00:02:40.050 --> 00:02:41.790
We wanna take a closer look at it

57
00:02:41.790 --> 00:02:45.450
and maybe we even wanna help with development.

58
00:02:45.450 --> 00:02:47.550
Therefore, chances are high

59
00:02:47.550 --> 00:02:51.150
that we wanna download this code to our local machine.

60
00:02:51.150 --> 00:02:53.850
Now, for the following steps, I'm simulating

61
00:02:53.850 --> 00:02:56.790
that I'm a different person with a different GitHub account,

62
00:02:56.790 --> 00:02:59.070
working on a different machine.

63
00:02:59.070 --> 00:03:02.400
To simulate this, I'll create a second GitHub account

64
00:03:02.400 --> 00:03:04.203
with a different email address.

65
00:03:10.650 --> 00:03:13.263
And I'll again use the free plan for that.

66
00:03:16.020 --> 00:03:19.410
And after creating this GitHub account,

67
00:03:19.410 --> 00:03:22.620
I'll also edit my local git configuration

68
00:03:22.620 --> 00:03:25.890
to make sure that this Git account is also used

69
00:03:25.890 --> 00:03:28.680
when I push to GitHub and so on.

70
00:03:28.680 --> 00:03:31.170
And I'll do that by using the git config command

71
00:03:31.170 --> 00:03:33.450
with the --global flag.

72
00:03:33.450 --> 00:03:35.160
And then I'll set my username

73
00:03:35.160 --> 00:03:39.120
to the username I used for this new GitHub account.

74
00:03:39.120 --> 00:03:42.873
Though you can use any name here, including your real name.

75
00:03:43.740 --> 00:03:47.700
And more importantly, I'll set the email address

76
00:03:47.700 --> 00:03:50.400
of my Git user on this system

77
00:03:50.400 --> 00:03:54.450
to this email address I used for this second GitHub account.

78
00:03:54.450 --> 00:03:56.880
And that should be that email address you used

79
00:03:56.880 --> 00:03:59.460
for that second GitHub account because that will make sure

80
00:03:59.460 --> 00:04:01.743
that your commits will be linked correctly.

81
00:04:03.600 --> 00:04:06.540
So, let's now assume we're a totally different user

82
00:04:06.540 --> 00:04:08.010
on a different machine

83
00:04:08.010 --> 00:04:11.460
and we wanna help develop this application or website.

84
00:04:11.460 --> 00:04:13.980
We wanna help with writing that code.

85
00:04:13.980 --> 00:04:15.300
If that's what we wanna do.

86
00:04:15.300 --> 00:04:16.560
There are different ways

87
00:04:16.560 --> 00:04:20.130
of downloading that code to our local system

88
00:04:20.130 --> 00:04:22.503
but it all starts by clicking this Code button.

89
00:04:23.430 --> 00:04:25.620
Now we could download the code

90
00:04:25.620 --> 00:04:28.140
by downloading it in a zipped version,

91
00:04:28.140 --> 00:04:29.940
that would then give us a folder

92
00:04:29.940 --> 00:04:32.610
that includes all these code files.

93
00:04:32.610 --> 00:04:34.140
But if we have Git installed,

94
00:04:34.140 --> 00:04:36.900
there actually is a better way of downloading that code

95
00:04:36.900 --> 00:04:39.750
and setting up a project that already has a link

96
00:04:39.750 --> 00:04:43.443
to this remote repository for possible future pushes.

97
00:04:44.310 --> 00:04:46.740
For that, we have to copy this URL,

98
00:04:46.740 --> 00:04:49.500
which we get here in this input field

99
00:04:49.500 --> 00:04:53.790
with the .git at the end, that's important, we copy that.

100
00:04:53.790 --> 00:04:56.850
And now in a terminal, on our system

101
00:04:56.850 --> 00:04:59.100
with Git installed as mentioned,

102
00:04:59.100 --> 00:05:01.350
we can run the git clone command

103
00:05:01.350 --> 00:05:06.090
and add this URL to clone this remote repository

104
00:05:06.090 --> 00:05:07.680
onto our local machine.

105
00:05:07.680 --> 00:05:11.970
So to in the end, create a new project on our local machine,

106
00:05:11.970 --> 00:05:15.180
that contains all the code from this remote repository

107
00:05:15.180 --> 00:05:17.430
and that comes with an automatic link,

108
00:05:17.430 --> 00:05:20.790
an automatic connection to this remote repository,

109
00:05:20.790 --> 00:05:23.880
so that we don't manually have to set up such a link,

110
00:05:23.880 --> 00:05:26.580
as we did earlier with git remote add.

111
00:05:26.580 --> 00:05:29.703
We won't have to do that if we clone a repository.

112
00:05:30.780 --> 00:05:35.370
Now, you can add another value after this URL,

113
00:05:35.370 --> 00:05:39.390
separated by a blank, which is then the name for the folder,

114
00:05:39.390 --> 00:05:41.100
that should be created that holds

115
00:05:41.100 --> 00:05:43.110
this remote repository code.

116
00:05:43.110 --> 00:05:44.760
If you don't specify a name,

117
00:05:44.760 --> 00:05:48.270
this repository name is used instead.

118
00:05:48.270 --> 00:05:50.913
So, github-crash-course in my case here.

119
00:05:51.930 --> 00:05:55.860
Here I'll specify my own name, which is git-demo.

120
00:05:55.860 --> 00:05:57.663
You can use any name course.

121
00:05:58.710 --> 00:06:01.890
If you now hit enter, this code is downloaded

122
00:06:01.890 --> 00:06:06.150
onto your local machine, in my case, into a git-demo folder.

123
00:06:06.150 --> 00:06:07.860
And as I mentioned, a link

124
00:06:07.860 --> 00:06:11.280
to the remote repository is set up for you.

125
00:06:11.280 --> 00:06:14.250
And you can do this without being locked in

126
00:06:14.250 --> 00:06:18.303
or anything like that because this is a public repository.

127
00:06:19.170 --> 00:06:23.340
Now I opened this git-demo folder in VSCode.

128
00:06:23.340 --> 00:06:25.860
So this is now not the old project

129
00:06:25.860 --> 00:06:28.080
in which I worked before in VSCode.

130
00:06:28.080 --> 00:06:30.270
Instead this is the clone project.

131
00:06:30.270 --> 00:06:32.520
As you can also tell by the fact

132
00:06:32.520 --> 00:06:35.580
that the .vscode folder is missing.

133
00:06:35.580 --> 00:06:38.550
It was there in my other project on my machine.

134
00:06:38.550 --> 00:06:40.290
But since we're now simulating

135
00:06:40.290 --> 00:06:43.920
that we're on a new machine and I cloned this repository

136
00:06:43.920 --> 00:06:47.100
and I opened this cloned project folder,

137
00:06:47.100 --> 00:06:49.590
this .vscode folder is missing

138
00:06:49.590 --> 00:06:52.983
because it was not part of this GitHub repository.

139
00:06:53.910 --> 00:06:55.560
Why was it not part?

140
00:06:55.560 --> 00:06:57.810
Because it's ignored by Git.

141
00:06:57.810 --> 00:06:59.763
It was never committed.

142
00:07:00.810 --> 00:07:02.910
That's why it's not part of the repository

143
00:07:02.910 --> 00:07:05.223
and not part of the cloned repository.

144
00:07:06.210 --> 00:07:07.920
I could now set my own settings

145
00:07:07.920 --> 00:07:10.140
and add my own .vscode folder here

146
00:07:10.140 --> 00:07:12.180
if I'm using VSCode for editing

147
00:07:12.180 --> 00:07:14.670
but I don't get the folder of the person

148
00:07:14.670 --> 00:07:17.730
who originally pushed to this repository.

149
00:07:17.730 --> 00:07:20.673
And that's of course important and hopefully makes sense.

150
00:07:21.780 --> 00:07:23.790
So now I'm on a different machine

151
00:07:23.790 --> 00:07:26.670
and I cloned this repository.

152
00:07:26.670 --> 00:07:28.920
Now, I mentioned before that a link

153
00:07:28.920 --> 00:07:30.960
to the remote repository would be set up

154
00:07:30.960 --> 00:07:33.270
and indeed if you run just, git remote,

155
00:07:33.270 --> 00:07:37.170
you see a list of all connected remote repositories

156
00:07:37.170 --> 00:07:40.440
and there you see that an origin,

157
00:07:40.440 --> 00:07:43.563
remote repository exists out of the box.

158
00:07:44.490 --> 00:07:49.440
With git remote get -url, you also see the URL

159
00:07:49.440 --> 00:07:51.660
of that repository and you see of course

160
00:07:51.660 --> 00:07:56.660
that this is that repository URL of that repository here.

161
00:07:57.270 --> 00:07:59.730
So this was all set up automatically.

162
00:07:59.730 --> 00:08:04.260
It is worth noting though that in this URL, the username

163
00:08:04.260 --> 00:08:07.140
of the user of that repository is missing,

164
00:08:07.140 --> 00:08:08.880
which also should make sense

165
00:08:08.880 --> 00:08:11.130
because keep in mind we're simulating

166
00:08:11.130 --> 00:08:13.020
that we're on a different machine here,

167
00:08:13.020 --> 00:08:16.170
possibly we're even an entirely different person

168
00:08:16.170 --> 00:08:18.060
and therefore of course we don't have access

169
00:08:18.060 --> 00:08:20.760
to that username or to that GitHub account

170
00:08:20.760 --> 00:08:24.000
of the original repository creator.

171
00:08:24.000 --> 00:08:26.880
And indeed, going forward, I am going to assume

172
00:08:26.880 --> 00:08:29.490
that I'm a different person on a different machine

173
00:08:29.490 --> 00:08:32.490
because I wanna show you how multiple different accounts

174
00:08:32.490 --> 00:08:35.493
can work together on the same repository.

175
00:08:36.330 --> 00:08:39.120
So now we cloned it, we have it on our local machine.

176
00:08:39.120 --> 00:08:42.063
Now let's say, we wanna make a change to that code.

