WEBVTT
1
00:00:02.040 --> 00:00:04.080
So how do these activity types

2
00:00:04.080 --> 00:00:05.850
and event filters work?

3
00:00:05.850 --> 00:00:09.780
And how do you know which activity types and event filters

4
00:00:09.780 --> 00:00:12.393
are supported for the different events?

5
00:00:13.350 --> 00:00:16.110
Well, let's start with activity types.

6
00:00:16.110 --> 00:00:19.140
We learn more about those in the official documentation

7
00:00:19.140 --> 00:00:22.680
on that page that lists all available events.

8
00:00:22.680 --> 00:00:25.440
Here we have this column activity types

9
00:00:25.440 --> 00:00:28.050
which shows us all the variations

10
00:00:28.050 --> 00:00:31.470
of this event or all the subtypes of that event,

11
00:00:31.470 --> 00:00:36.470
you could say that can be used for triggering a workflow.

12
00:00:36.600 --> 00:00:41.190
And in case of the push event, we have no variations.

13
00:00:41.190 --> 00:00:42.960
But that changes if we take a look

14
00:00:42.960 --> 00:00:44.733
at the pull request event.

15
00:00:45.720 --> 00:00:49.740
There we see that we have a long list of activity types,

16
00:00:49.740 --> 00:00:53.010
and those activity types allow us to control

17
00:00:53.010 --> 00:00:56.340
whether all pull request related actions

18
00:00:56.340 --> 00:00:58.020
should trigger a workflow

19
00:00:58.020 --> 00:01:02.460
if we don't specify any information about the activity types

20
00:01:02.460 --> 00:01:06.690
or if only some types of pull request related actions

21
00:01:06.690 --> 00:01:08.403
should trigger a workflow.

22
00:01:09.330 --> 00:01:12.690
We could for example, say that only opening a pull request

23
00:01:12.690 --> 00:01:15.060
should trigger a workflow.

24
00:01:15.060 --> 00:01:18.510
Though I will say right away that for the pull request event

25
00:01:18.510 --> 00:01:21.870
we actually have a long list of activity types,

26
00:01:21.870 --> 00:01:26.340
but if you don't specify any activity types, by default,

27
00:01:26.340 --> 00:01:30.780
the pull request event will only activate a workflow,

28
00:01:30.780 --> 00:01:33.360
so will only trigger a workflow

29
00:01:33.360 --> 00:01:37.800
when a pull request was opened, Synchronized or reopened.

30
00:01:37.800 --> 00:01:40.080
Closing a pull request by default

31
00:01:40.080 --> 00:01:42.960
would not trigger a workflow.

32
00:01:42.960 --> 00:01:45.720
And therefore, it's always a good idea to have a look

33
00:01:45.720 --> 00:01:47.430
at the official documentation

34
00:01:47.430 --> 00:01:50.430
to learn about nuances like this.

35
00:01:50.430 --> 00:01:53.430
Now in this section we will still learn how we can use

36
00:01:53.430 --> 00:01:56.550
all these activity types for the pull request

37
00:01:56.550 --> 00:02:00.810
or for any other event to have that fine grain control

38
00:02:00.810 --> 00:02:03.480
over when exactly a workflow runs

39
00:02:03.480 --> 00:02:06.330
and to even override defaults like the one

40
00:02:06.330 --> 00:02:08.280
described down there.

41
00:02:08.280 --> 00:02:10.863
And that's how we can use those activity types.

42
00:02:11.820 --> 00:02:16.320
How do we use them in our yml file here?

43
00:02:16.320 --> 00:02:19.320
Well, instead of defining our events like this,

44
00:02:19.320 --> 00:02:23.280
we have to define them in a bit of a more complex way,

45
00:02:23.280 --> 00:02:26.520
we have to add our event in a new indented line

46
00:02:26.520 --> 00:02:29.640
and for example, add pull request, a colon,

47
00:02:29.640 --> 00:02:33.150
and then in another line which is even more indented,

48
00:02:33.150 --> 00:02:35.133
we add the types key.

49
00:02:36.450 --> 00:02:39.900
And this is not up to you, this has to be types,

50
00:02:39.900 --> 00:02:44.610
because here you specify the activity types of this event,

51
00:02:44.610 --> 00:02:46.440
so of the pull request event here

52
00:02:46.440 --> 00:02:49.170
that should trigger this workflow.

53
00:02:49.170 --> 00:02:53.820
And here you could, for example, say opened and edited,

54
00:02:53.820 --> 00:02:57.060
or just opened if you're only interested in

55
00:02:57.060 --> 00:03:01.110
pull requests being opened, triggering that workflow.

56
00:03:01.110 --> 00:03:04.020
You can also specify a list like this,

57
00:03:04.020 --> 00:03:08.190
opened and edited like this or just opened like this.

58
00:03:08.190 --> 00:03:10.320
So there are different ways of writing this,

59
00:03:10.320 --> 00:03:14.520
but in the end, you define a list of activity types

60
00:03:14.520 --> 00:03:17.913
for this event that should trigger this workflow.

61
00:03:19.260 --> 00:03:21.450
So for example, with this definition,

62
00:03:21.450 --> 00:03:26.450
this workflow would run whenever a pull request is opened,

63
00:03:26.610 --> 00:03:30.450
but it would not run if a pull request is edited or closed,

64
00:03:30.450 --> 00:03:32.520
and it would also not run if we push

65
00:03:32.520 --> 00:03:34.263
to this repository right now.

66
00:03:35.430 --> 00:03:37.920
Now if you wanna add a second trigger,

67
00:03:37.920 --> 00:03:41.490
a second event like workflow dispatch,

68
00:03:41.490 --> 00:03:43.260
we also have to add it like this

69
00:03:43.260 --> 00:03:45.450
including this colon here at the end

70
00:03:45.450 --> 00:03:49.290
even though we got no details for this event.

71
00:03:49.290 --> 00:03:51.870
So even though we don't have any indented lines

72
00:03:51.870 --> 00:03:55.650
below workflow dispatch, we still have to add it like this.

73
00:03:55.650 --> 00:03:58.800
And workflow dispatch must be on the same level

74
00:03:58.800 --> 00:04:01.770
regarding its indentation as the other events.

75
00:04:01.770 --> 00:04:04.113
So in this case as pull request.

76
00:04:05.070 --> 00:04:06.900
So that's how we could add pull request

77
00:04:06.900 --> 00:04:09.750
and workflow dispatch as our two events

78
00:04:09.750 --> 00:04:11.460
for this workflow.

79
00:04:11.460 --> 00:04:15.030
And for pull request, we also specify which activity types

80
00:04:15.030 --> 00:04:17.700
exactly should trigger this workflow,

81
00:04:17.700 --> 00:04:19.550
and in this case, it would be opened.

82
00:04:20.399 --> 00:04:24.000
And to show you how this works, I'll save this

83
00:04:24.000 --> 00:04:25.923
and create a new commit,

84
00:04:27.120 --> 00:04:30.990
where I say added events

85
00:04:30.990 --> 00:04:33.333
and push this to my repository.

86
00:04:35.040 --> 00:04:39.030
Now as we do that, in this repository under actions,

87
00:04:39.030 --> 00:04:41.800
we see this events demo

88
00:04:42.900 --> 00:04:46.020
and I see one failed run from earlier,

89
00:04:46.020 --> 00:04:49.500
but I see no new workflow execution run here

90
00:04:49.500 --> 00:04:53.760
because we have this dispatch event

91
00:04:53.760 --> 00:04:56.010
and we have the pull request open event,

92
00:04:56.010 --> 00:04:59.580
but we have no push event added to this workflow.

93
00:04:59.580 --> 00:05:02.523
That's why it's not executing after pushing here.

94
00:05:03.540 --> 00:05:06.240
And with that added, what we can do

95
00:05:06.240 --> 00:05:08.760
is we can quickly create a new branch here

96
00:05:08.760 --> 00:05:13.760
with git checkout -b and we could name it dev,

97
00:05:13.830 --> 00:05:16.620
and then make a tiny change to our code here.

98
00:05:16.620 --> 00:05:20.760
For example, in HelpBox.jsx,

99
00:05:20.760 --> 00:05:24.060
we could change this h free tag here to h2,

100
00:05:24.060 --> 00:05:27.270
but you can make any change you want, of course.

101
00:05:27.270 --> 00:05:31.920
With this change made, I can push this changed to h2,

102
00:05:31.920 --> 00:05:34.650
could be a fitting commit message.

103
00:05:34.650 --> 00:05:37.530
And keep in mind that this is on a new branch.

104
00:05:37.530 --> 00:05:41.130
I did this so that here I can create a pull request

105
00:05:41.130 --> 00:05:43.710
because now I got two branches,

106
00:05:43.710 --> 00:05:46.230
though we have to push this first, of course,

107
00:05:46.230 --> 00:05:50.040
so I have to push my DEF branch to origin first,

108
00:05:50.040 --> 00:05:52.920
but thereafter I can create a pull request

109
00:05:52.920 --> 00:05:55.980
and I can do this as the owner of this repository,

110
00:05:55.980 --> 00:05:59.280
we don't have to do as another user.

111
00:05:59.280 --> 00:06:02.760
So here I'll create a pull request to merge the deaf branch

112
00:06:02.760 --> 00:06:03.963
into the main branch.

113
00:06:04.950 --> 00:06:07.140
And if I create that pull request,

114
00:06:07.140 --> 00:06:09.450
I will of course trigger that workflow

115
00:06:09.450 --> 00:06:13.773
because we're listening to pull requests being opened.

116
00:06:14.940 --> 00:06:17.130
Therefore, if we go to actions,

117
00:06:17.130 --> 00:06:20.220
we now see that this workflow is executing,

118
00:06:20.220 --> 00:06:23.040
we got a new ongoing workflow run here

119
00:06:23.040 --> 00:06:25.800
because our event was triggered.

120
00:06:25.800 --> 00:06:27.030
We can see this here,

121
00:06:27.030 --> 00:06:31.473
the opened activity type was triggered in the end.

122
00:06:32.910 --> 00:06:34.350
Now what you'll also see

123
00:06:34.350 --> 00:06:36.840
is that if I go to this pull request

124
00:06:36.840 --> 00:06:40.140
and I close it by marking it as closed,

125
00:06:40.140 --> 00:06:43.170
this will not trigger a new workflow run

126
00:06:43.170 --> 00:06:47.910
because, well, we're only listening to it being opened.

127
00:06:47.910 --> 00:06:50.760
If I had closed here as well, that would be different,

128
00:06:50.760 --> 00:06:53.040
but that's not the case here.

129
00:06:53.040 --> 00:06:55.860
So that's how these activity types work.

130
00:06:55.860 --> 00:06:58.950
And for many events like pull request,

131
00:06:58.950 --> 00:07:01.980
but for example, also for the issues event

132
00:07:01.980 --> 00:07:05.670
where you can run workflows whenever anything happens

133
00:07:05.670 --> 00:07:08.310
to GitHub Repository issues.

134
00:07:08.310 --> 00:07:09.420
For events like this,

135
00:07:09.420 --> 00:07:12.273
it's very useful to have this additional control.

136
00:07:13.110 --> 00:07:16.110
Without this activity type added here,

137
00:07:16.110 --> 00:07:19.680
all pull request related events would trigger this workflow,

138
00:07:19.680 --> 00:07:22.410
though in case of pull requests specifically,

139
00:07:22.410 --> 00:07:24.360
it's worth reading the documentation

140
00:07:24.360 --> 00:07:26.400
as it always is the case for all these events

141
00:07:26.400 --> 00:07:28.860
if you're using them, because here we learn

142
00:07:28.860 --> 00:07:30.360
that actually by default,

143
00:07:30.360 --> 00:07:33.060
only opened, synchronized and reopened

144
00:07:33.060 --> 00:07:35.340
would trigger a workflow

145
00:07:35.340 --> 00:07:38.670
if just pull request is added as an event.

146
00:07:38.670 --> 00:07:40.560
And if you wanna trigger a workflow

147
00:07:40.560 --> 00:07:42.390
on some other event variations,

148
00:07:42.390 --> 00:07:47.040
you explicitly have to add the respective activity types.

149
00:07:47.040 --> 00:07:48.750
So if you want to run a workflow

150
00:07:48.750 --> 00:07:50.490
when a pull request is closed,

151
00:07:50.490 --> 00:07:54.960
you would have to explicitly add the closed activity type

152
00:07:54.960 --> 00:07:58.320
under pull request to your workflow.

153
00:07:58.320 --> 00:08:00.540
But this depends on which event you're using,

154
00:08:00.540 --> 00:08:02.910
for some events, all activity types

155
00:08:02.910 --> 00:08:06.600
might trigger a workflow if you don't provide more details

156
00:08:06.600 --> 00:08:09.390
for other events like pull request,

157
00:08:09.390 --> 00:08:13.260
only a selected list of activity types triggers a workflow

158
00:08:13.260 --> 00:08:15.933
if you don't have further details at hand.

159
00:08:17.160 --> 00:08:19.500
But that's the idea of activity types.

160
00:08:19.500 --> 00:08:24.393
You got more control over when exactly your workflow runs.

