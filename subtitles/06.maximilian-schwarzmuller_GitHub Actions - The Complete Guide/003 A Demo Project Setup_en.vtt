WEBVTT
1
00:00:02.160 --> 00:00:04.620
Now for this course section

2
00:00:04.620 --> 00:00:07.290
I prepared another example project,

3
00:00:07.290 --> 00:00:10.710
which actually is the same example project as before,

4
00:00:10.710 --> 00:00:13.560
but which already comes with a workflow,

5
00:00:13.560 --> 00:00:18.120
one YML file in the dot GitHub slash workflows folder

6
00:00:18.120 --> 00:00:21.990
where I have a very simple demo workflow defined.

7
00:00:21.990 --> 00:00:24.300
However, the event is missing

8
00:00:24.300 --> 00:00:28.080
because that's exactly what we'll evaluate and dive in

9
00:00:28.080 --> 00:00:30.360
in this course section.

10
00:00:30.360 --> 00:00:32.549
But this is the demo project we'll use

11
00:00:32.549 --> 00:00:35.580
throughout this section, and I will also create

12
00:00:35.580 --> 00:00:39.000
a remote Repository for this demo project

13
00:00:39.000 --> 00:00:41.880
because of course we need that GitHub Repository

14
00:00:41.880 --> 00:00:44.670
in order to then really have and trigger

15
00:00:44.670 --> 00:00:47.403
those GitHub Actions workflows.

16
00:00:48.420 --> 00:00:52.830
So therefore what I'll do is I'll initialize

17
00:00:52.830 --> 00:00:57.830
a new Git Repository here and create an initial commit,

18
00:00:57.960 --> 00:01:00.270
even though my workflow is not finished yet,

19
00:01:00.270 --> 00:01:02.220
but we'll finish that later.

20
00:01:02.220 --> 00:01:05.010
But I will create this initial commit here.

21
00:01:05.010 --> 00:01:07.140
And with that created on GitHub

22
00:01:07.140 --> 00:01:12.090
I'll add a new Repository, which I'll name GH events.

23
00:01:12.090 --> 00:01:14.193
The name of course is up to you.

24
00:01:15.090 --> 00:01:19.410
And you can turn this into a private or a public Repository.

25
00:01:19.410 --> 00:01:22.410
Here I'll go with a public Repository

26
00:01:22.410 --> 00:01:26.460
because I need this Repository to be public

27
00:01:26.460 --> 00:01:28.650
to show you something a little bit later.

28
00:01:28.650 --> 00:01:32.013
So I'll stick to a public Repository and create this.

29
00:01:33.030 --> 00:01:36.240
And with that created, we grab that URL

30
00:01:36.240 --> 00:01:39.390
and connect our local Git Repository

31
00:01:39.390 --> 00:01:44.340
by using Git remote add giving this an identifier of origin,

32
00:01:44.340 --> 00:01:47.220
which is a typical identifier used.

33
00:01:47.220 --> 00:01:50.190
Adding that URL and my username

34
00:01:50.190 --> 00:01:54.720
so that my push requests will be authenticated automatically

35
00:01:54.720 --> 00:01:58.533
with that personal access token that's stored on my system.

36
00:01:59.520 --> 00:02:02.700
And now if I run Git push, this fails initially

37
00:02:02.700 --> 00:02:05.700
so I'll run this command to kind of connect

38
00:02:05.700 --> 00:02:09.240
my local main branch to the remote main branch

39
00:02:09.240 --> 00:02:13.173
and push this initial commit to this Repository.

40
00:02:14.010 --> 00:02:15.930
So here it is.

41
00:02:15.930 --> 00:02:20.280
And that's now the starting state of this project.

42
00:02:20.280 --> 00:02:23.760
Now let's dive into this workflow here

43
00:02:23.760 --> 00:02:26.733
and let's dive into the events we can assign.

