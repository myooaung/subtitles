WEBVTT
1
00:00:02.070 --> 00:00:04.890
And that's it for this module.

2
00:00:04.890 --> 00:00:06.390
In this module, we learned

3
00:00:06.390 --> 00:00:09.630
that custom actions can help you simplify workflows

4
00:00:09.630 --> 00:00:12.250
and can help you avoid repeated steps.

5
00:00:12.250 --> 00:00:15.390
You can also implement logic that solves a problem

6
00:00:15.390 --> 00:00:16.740
that's currently not solved

7
00:00:16.740 --> 00:00:19.080
by any publicly available action

8
00:00:19.080 --> 00:00:19.913
because, of course,

9
00:00:19.913 --> 00:00:22.200
you did learn that there is this marketplace

10
00:00:22.200 --> 00:00:25.662
with plenty of actions that you can use just like that,

11
00:00:25.662 --> 00:00:28.749
but you can also build your own actions.

12
00:00:28.749 --> 00:00:31.770
And, of course, if you're solving a specific problem

13
00:00:31.770 --> 00:00:33.750
that might affect others as well.

14
00:00:33.750 --> 00:00:36.150
You can also share actions with the community

15
00:00:36.150 --> 00:00:40.267
and develop actions as open source projects potentially.

16
00:00:40.267 --> 00:00:42.791
Now, when it comes to creating actions

17
00:00:42.791 --> 00:00:45.965
there are three types of actions you can create

18
00:00:45.965 --> 00:00:50.538
and the first type you learned about are composite actions.

19
00:00:50.538 --> 00:00:53.250
Composite actions are basically actions

20
00:00:53.250 --> 00:00:54.720
that combine multiple steps

21
00:00:54.720 --> 00:00:57.360
that you could also define like this in a workflow.

22
00:00:57.360 --> 00:00:58.500
So you could also say

23
00:00:58.500 --> 00:01:02.493
that composite actions are kind of workflow excerpts.

24
00:01:03.450 --> 00:01:07.050
You can use actions while the users key and commands via run

25
00:01:07.050 --> 00:01:08.370
just as needed

26
00:01:08.370 --> 00:01:11.670
and simply build reusable step groups

27
00:01:11.670 --> 00:01:13.530
that you can then use anywhere

28
00:01:13.530 --> 00:01:15.933
in your workflow definition files.

29
00:01:17.310 --> 00:01:18.810
Besides composite actions,

30
00:01:18.810 --> 00:01:21.720
you also have JavaScript and Docker actions,

31
00:01:21.720 --> 00:01:23.940
and with JavaScript actions,

32
00:01:23.940 --> 00:01:27.420
you can implement any logic you want with JavaScript

33
00:01:27.420 --> 00:01:29.460
and the Node.js runtime

34
00:01:29.460 --> 00:01:33.990
and this special actions toolkit package provided by GitHub,

35
00:01:33.990 --> 00:01:35.958
which gives you various objects

36
00:01:35.958 --> 00:01:40.718
and helper functions for accessing inputs and so on.

37
00:01:40.718 --> 00:01:44.520
Alternatively, if you don't know JavaScript,

38
00:01:44.520 --> 00:01:46.590
or if you want to use a different language,

39
00:01:46.590 --> 00:01:50.214
or if you need more control over the execution environment,

40
00:01:50.214 --> 00:01:52.434
you can build a docker action

41
00:01:52.434 --> 00:01:56.640
where you define the environment with help of a docker file

42
00:01:56.640 --> 00:01:58.920
and where a container will be created

43
00:01:58.920 --> 00:02:00.813
based on that file for you.

44
00:02:01.650 --> 00:02:02.760
And either way,

45
00:02:02.760 --> 00:02:03.593
you can, of course,

46
00:02:03.593 --> 00:02:05.430
work with inputs, set outputs,

47
00:02:05.430 --> 00:02:07.350
and perform any logic you want

48
00:02:07.350 --> 00:02:09.902
as shown in this course section here.

