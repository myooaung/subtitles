WEBVTT
1
00:00:02.070 --> 00:00:05.640
Thus far, all our workflows just worked,

2
00:00:05.640 --> 00:00:08.130
and of course, that's the desired result,

3
00:00:08.130 --> 00:00:09.870
but sometimes they can fail.

4
00:00:09.870 --> 00:00:11.790
And especially if you have a workflow

5
00:00:11.790 --> 00:00:13.890
that runs automated tests,

6
00:00:13.890 --> 00:00:18.890
the idea is that it does fail if something goes wrong.

7
00:00:18.960 --> 00:00:21.750
So to simulate that something fails,

8
00:00:21.750 --> 00:00:25.350
I will simply break one of my tests here.

9
00:00:25.350 --> 00:00:28.080
For that, I'll go to the src components folder,

10
00:00:28.080 --> 00:00:32.189
and then the MainContent.test.jsx file.

11
00:00:32.189 --> 00:00:35.077
And we can break one of these tests by simply adding

12
00:00:35.077 --> 00:00:40.077
.not here in front of .toBeInTheDocument in line 19.

13
00:00:42.090 --> 00:00:46.560
This simple change will formulate an expectation

14
00:00:46.560 --> 00:00:47.940
that will not be met,

15
00:00:47.940 --> 00:00:50.643
and that will cause this test to fail.

16
00:00:51.780 --> 00:00:54.060
We can simulate this locally

17
00:00:54.060 --> 00:00:56.100
with this change in place

18
00:00:56.100 --> 00:00:58.950
if I run my tests with npm test,

19
00:00:58.950 --> 00:01:02.520
you will see that this fails.

20
00:01:02.520 --> 00:01:05.370
Now, of course, we broke the test deliberately,

21
00:01:05.370 --> 00:01:06.660
but this is a demo.

22
00:01:06.660 --> 00:01:09.960
So let's say this would be our real expectation

23
00:01:09.960 --> 00:01:12.720
and our code just doesn't behave the way it should,

24
00:01:12.720 --> 00:01:15.420
and therefore we create a commit here

25
00:01:15.420 --> 00:01:18.930
and we give it a message,

26
00:01:18.930 --> 00:01:20.700
and we then push this.

27
00:01:20.700 --> 00:01:24.180
Now we push this updated code to GitHub,

28
00:01:24.180 --> 00:01:25.440
and of course, since this

29
00:01:25.440 --> 00:01:28.140
is a push action that's happening here,

30
00:01:28.140 --> 00:01:31.140
it will trigger another workflow run.

31
00:01:31.140 --> 00:01:34.290
Here you see the workflow executing.

32
00:01:34.290 --> 00:01:35.970
So now it's executing,

33
00:01:35.970 --> 00:01:38.310
and if we go into this,

34
00:01:38.310 --> 00:01:41.220
and we can also inspect this whilst it's running,

35
00:01:41.220 --> 00:01:45.540
we will see that here, run tests failed.

36
00:01:45.540 --> 00:01:48.570
And you see this in the overview page

37
00:01:48.570 --> 00:01:51.210
with that red cross here that it failed.

38
00:01:51.210 --> 00:01:54.990
And you can then dive into this workflow and job,

39
00:01:54.990 --> 00:01:57.300
and into the step that failed to learn

40
00:01:57.300 --> 00:01:58.380
why it failed.

41
00:01:58.380 --> 00:02:01.650
And GitHub Actions gives you a detailed log

42
00:02:01.650 --> 00:02:03.180
here, to be precise

43
00:02:03.180 --> 00:02:06.420
it shows you the log, your step printed.

44
00:02:06.420 --> 00:02:10.169
In this case it's the log this testing tool generated,

45
00:02:10.169 --> 00:02:13.620
and this allows you to understand why this job

46
00:02:13.620 --> 00:02:16.080
or this step failed.

47
00:02:16.080 --> 00:02:19.680
And of course, there's a broad variety of possible reasons.

48
00:02:19.680 --> 00:02:22.350
In this case, it's simply because one of our tests

49
00:02:22.350 --> 00:02:24.783
has an expectation that isn't met.

50
00:02:25.680 --> 00:02:29.880
And by analyzing this, we can then either fix the code

51
00:02:29.880 --> 00:02:32.760
so that the test expectation is met,

52
00:02:32.760 --> 00:02:36.300
or fix the test so that the expectation is a different one.

53
00:02:36.300 --> 00:02:37.980
And that's the correct step here,

54
00:02:37.980 --> 00:02:39.870
because here the correct expectation

55
00:02:39.870 --> 00:02:43.860
is to expect this element toBeInTheDocument

56
00:02:43.860 --> 00:02:46.473
not to have it not in the document.

57
00:02:47.730 --> 00:02:49.290
Therefore, what I'll do here

58
00:02:49.290 --> 00:02:52.590
is I will simply revert this commit.

59
00:02:52.590 --> 00:02:54.240
I could also delete it manually

60
00:02:54.240 --> 00:02:55.620
and create a new commit,

61
00:02:55.620 --> 00:02:58.590
but I will simply copy this commit ID here

62
00:02:58.590 --> 00:03:02.610
and then run git revert this commit.

63
00:03:02.610 --> 00:03:05.670
And as you learned in this crash course section

64
00:03:05.670 --> 00:03:07.590
or as you already know anyways,

65
00:03:07.590 --> 00:03:11.763
this creates a new commit that will revert that old commit.

66
00:03:12.960 --> 00:03:15.270
So here I created this new commit

67
00:03:15.270 --> 00:03:17.160
with the default commit message,

68
00:03:17.160 --> 00:03:19.080
you see that the code changed,

69
00:03:19.080 --> 00:03:21.570
and now I can push this new commit

70
00:03:21.570 --> 00:03:23.250
that reverts the old commit,

71
00:03:23.250 --> 00:03:25.740
and that, of course, as you can imagine,

72
00:03:25.740 --> 00:03:27.960
will trigger a new workflow run,

73
00:03:27.960 --> 00:03:29.883
because it is another push.

74
00:03:30.780 --> 00:03:34.020
So here we got this workflow and this job running,

75
00:03:34.020 --> 00:03:36.300
we're going through all these steps again,

76
00:03:36.300 --> 00:03:40.260
and you will see that as soon as we reach the test step,

77
00:03:40.260 --> 00:03:43.263
this time it will finish successfully.

