WEBVTT
1
00:00:02.400 --> 00:00:04.470
So we published an output here.

2
00:00:04.470 --> 00:00:08.610
To use it in another job, in the deploy job, to be precise,

3
00:00:08.610 --> 00:00:10.860
we simply have to go into this job

4
00:00:10.860 --> 00:00:14.160
and then, for example, add a new step,

5
00:00:14.160 --> 00:00:16.770
where I say output, file name.

6
00:00:16.770 --> 00:00:19.050
The name of course is up to you.

7
00:00:19.050 --> 00:00:21.390
And then here I wanna run a command

8
00:00:21.390 --> 00:00:24.903
that uses the output by the build job.

9
00:00:26.040 --> 00:00:28.020
And here I simply wanna output

10
00:00:28.020 --> 00:00:30.900
that file name to keep things simple.

11
00:00:30.900 --> 00:00:33.330
So I'll use the echo command,

12
00:00:33.330 --> 00:00:35.250
but then here between my quotes

13
00:00:35.250 --> 00:00:38.640
I again use this dynamic expression syntax

14
00:00:38.640 --> 00:00:40.710
to evaluate some expression.

15
00:00:40.710 --> 00:00:44.190
And now I wanna get data from that build job.

16
00:00:44.190 --> 00:00:49.190
And we can get that data by using the needs context object.

17
00:00:49.740 --> 00:00:51.870
Again, we have a lot of objects here

18
00:00:51.870 --> 00:00:54.240
and we can get data about other jobs

19
00:00:54.240 --> 00:00:57.000
with help of the jobs context object.

20
00:00:57.000 --> 00:01:00.900
But for outputs, a better object to use

21
00:01:00.900 --> 00:01:04.140
is the needs object down there.

22
00:01:04.140 --> 00:01:09.140
Because that needs object contains the outputs of all jobs

23
00:01:09.600 --> 00:01:13.290
that are defined as a dependency of the current job.

24
00:01:13.290 --> 00:01:16.470
So here, when I use the needs object

25
00:01:16.470 --> 00:01:21.470
I can then dive into my job on which this job depends.

26
00:01:21.510 --> 00:01:23.370
In this case that's the build job

27
00:01:23.370 --> 00:01:27.210
because that's specified as my only need here.

28
00:01:27.210 --> 00:01:30.030
So I can access needs dot build here.

29
00:01:30.030 --> 00:01:33.690
Since I'm using build here as an identifier.

30
00:01:33.690 --> 00:01:36.480
And then for this job, we can dive into outputs.

31
00:01:36.480 --> 00:01:39.090
That's again, a field defined by GitHub Actions,

32
00:01:39.090 --> 00:01:40.830
which exists on all the jobs

33
00:01:40.830 --> 00:01:43.140
that are specified as needs.

34
00:01:43.140 --> 00:01:46.470
And now we can use the output identifier specified here,

35
00:01:46.470 --> 00:01:48.780
which is script file.

36
00:01:48.780 --> 00:01:51.780
So that's the identifier I define as an output

37
00:01:51.780 --> 00:01:53.280
here in my build job,

38
00:01:53.280 --> 00:01:55.590
hence I can access it down there.

39
00:01:55.590 --> 00:01:58.440
And now this line should output the file name

40
00:01:58.440 --> 00:02:00.990
published by that other job.

41
00:02:00.990 --> 00:02:03.000
And of course, that was a lot of work here

42
00:02:03.000 --> 00:02:05.790
because I also tried to explain it in detail.

43
00:02:05.790 --> 00:02:08.009
But this can be a very useful feature

44
00:02:08.009 --> 00:02:11.310
for passing simple data between different jobs

45
00:02:11.310 --> 00:02:13.260
and in conjunction with artifacts.

46
00:02:13.260 --> 00:02:16.140
This therefore allows you to pass any kind of data

47
00:02:16.140 --> 00:02:17.610
between jobs.

48
00:02:17.610 --> 00:02:19.590
And as mentioned before already,

49
00:02:19.590 --> 00:02:22.440
this will become especially important once we dive

50
00:02:22.440 --> 00:02:24.363
into building custom actions.

51
00:02:25.560 --> 00:02:27.870
Nonetheless, here with all that finished,

52
00:02:27.870 --> 00:02:30.000
I will now stage these changes

53
00:02:30.000 --> 00:02:35.000
and create a new commit, added outputs and then push this.

54
00:02:36.690 --> 00:02:38.910
And now when this Workflow runs again

55
00:02:38.910 --> 00:02:41.640
we should see that in the deploy step,

56
00:02:41.640 --> 00:02:45.810
in the deploy job, we successfully output the file name

57
00:02:45.810 --> 00:02:50.810
that is stored or provided as an output by the build job.

58
00:02:51.060 --> 00:02:53.733
So let's wait for this Workflow to finish here.

59
00:02:54.690 --> 00:02:57.330
So here, the Workflow finished.

60
00:02:57.330 --> 00:03:00.780
And now if I click on deploy

61
00:03:00.780 --> 00:03:05.370
and we take a look at the output file name step,

62
00:03:05.370 --> 00:03:08.280
we see that I did successfully output

63
00:03:08.280 --> 00:03:11.430
that file name that was published as an output

64
00:03:11.430 --> 00:03:13.170
in the build step.

65
00:03:13.170 --> 00:03:15.750
Here in published JS file name,

66
00:03:15.750 --> 00:03:17.760
I did publish that file name.

67
00:03:17.760 --> 00:03:19.470
We don't see the file name here

68
00:03:19.470 --> 00:03:21.330
because it's derived dynamically

69
00:03:21.330 --> 00:03:23.970
but it's data output that was generated here

70
00:03:23.970 --> 00:03:27.180
and that was then stored as an output here.

71
00:03:27.180 --> 00:03:30.840
When the job completed it's that output

72
00:03:30.840 --> 00:03:32.910
that is successfully accessed

73
00:03:32.910 --> 00:03:36.153
in the output file name step of the deploy job.

