WEBVTT
1
00:00:02.160 --> 00:00:03.780
Here for these two jobs,

2
00:00:03.780 --> 00:00:05.550
testing and deploying,

3
00:00:05.550 --> 00:00:08.700
it might make sense to run them after each other

4
00:00:08.700 --> 00:00:11.100
instead of parallel to each other,

5
00:00:11.100 --> 00:00:14.190
because we probably only wanna deploy

6
00:00:14.190 --> 00:00:16.860
if testing finished successfully.

7
00:00:16.860 --> 00:00:20.283
If we got a failing test, we don't wanna deploy.

8
00:00:21.420 --> 00:00:23.700
Now to run jobs after each other,

9
00:00:23.700 --> 00:00:28.470
we just have to add one simple keyword here to the job,

10
00:00:28.470 --> 00:00:30.693
and that's the needs keyword.

11
00:00:31.770 --> 00:00:34.590
With needs, you can point to the identifier

12
00:00:34.590 --> 00:00:38.130
of another job that must finish before this job

13
00:00:38.130 --> 00:00:39.693
will start execution.

14
00:00:40.590 --> 00:00:43.440
In this case, I can enter test here to clarify

15
00:00:43.440 --> 00:00:48.330
that this job, the deploy job, needs the test job

16
00:00:48.330 --> 00:00:52.020
to have finished before this job starts.

17
00:00:52.020 --> 00:00:55.140
And it waits for this test job to finish

18
00:00:55.140 --> 00:00:57.333
successfully before it starts.

19
00:00:58.230 --> 00:00:59.910
Now there are different ways of

20
00:00:59.910 --> 00:01:01.740
configuring all these things,

21
00:01:01.740 --> 00:01:04.500
for example, you could wrap this in brackets

22
00:01:04.500 --> 00:01:07.740
to wait for multiple jobs to finish,

23
00:01:07.740 --> 00:01:09.810
but here we just have one other job

24
00:01:09.810 --> 00:01:11.220
for which you wanna wait.

25
00:01:11.220 --> 00:01:14.040
However, that's how I specified this here,

26
00:01:14.040 --> 00:01:16.290
and with this change implemented,

27
00:01:16.290 --> 00:01:21.290
we can push this updated job here, this updated Workflow.

28
00:01:22.830 --> 00:01:26.280
Run jobs after each other.

29
00:01:26.280 --> 00:01:28.680
That sounds like a good commit message,

30
00:01:28.680 --> 00:01:31.492
and now we can push this to GitHub,

31
00:01:31.492 --> 00:01:36.492
and there we will then see that for this Workflow here,

32
00:01:36.870 --> 00:01:38.760
these now run after each other

33
00:01:38.760 --> 00:01:41.730
and it's also reflected visually here.

34
00:01:41.730 --> 00:01:44.430
We see that deploy will only start

35
00:01:44.430 --> 00:01:46.530
after testing finished.

36
00:01:46.530 --> 00:01:51.000
So let's wait for these jobs to finish, for test to finish,

37
00:01:51.000 --> 00:01:53.253
and then for deploy to finish.

38
00:01:55.740 --> 00:01:57.420
Here we go, test finished.

39
00:01:57.420 --> 00:01:59.043
Now deploy starts,

40
00:02:00.270 --> 00:02:03.333
and of course, eventually that will finish as well.

41
00:02:04.200 --> 00:02:07.080
Now it is of course worth noting that overall,

42
00:02:07.080 --> 00:02:09.660
this Workflow will therefore take longer.

43
00:02:09.660 --> 00:02:11.160
That should make a lot of sense

44
00:02:11.160 --> 00:02:13.980
because now the jobs don't run in parallel,

45
00:02:13.980 --> 00:02:15.900
but after each other.

46
00:02:15.900 --> 00:02:18.510
Nonetheless, it can make a lot of sense to make sure

47
00:02:18.510 --> 00:02:20.820
that we're not deploying an updated version

48
00:02:20.820 --> 00:02:23.820
of this website if our tests failed.

49
00:02:23.820 --> 00:02:27.660
And to also show you what happens if this first job fails,

50
00:02:27.660 --> 00:02:29.580
let's break it again.

51
00:02:29.580 --> 00:02:31.290
Back here in the project,

52
00:02:31.290 --> 00:02:34.740
we can break it in the same way as we did it before,

53
00:02:34.740 --> 00:02:38.070
by adding this not keyword here,

54
00:02:38.070 --> 00:02:42.663
in line 19 in MainContent.test.jsx.

55
00:02:43.800 --> 00:02:47.010
And then I'll add a new commit,

56
00:02:47.010 --> 00:02:50.223
where I say broke test and which I then push,

57
00:02:51.480 --> 00:02:53.370
and with that, unsurprisingly,

58
00:02:53.370 --> 00:02:56.730
another Workflow execution will be triggered.

59
00:02:56.730 --> 00:03:00.420
But this time, the deployed shop never start running

60
00:03:00.420 --> 00:03:04.500
because tests will eventually finish unsuccessfully.

61
00:03:04.500 --> 00:03:07.140
So let's wait for that to happen.

62
00:03:07.140 --> 00:03:08.070
Here we go.

63
00:03:08.070 --> 00:03:11.280
As you can see, this job did not finish successfully

64
00:03:11.280 --> 00:03:13.833
and therefore this job wasn't even started.

65
00:03:14.850 --> 00:03:15.960
Now of course, again,

66
00:03:15.960 --> 00:03:18.720
that's not really the desired result here,

67
00:03:18.720 --> 00:03:21.460
and therefore I'll revert this last commit

68
00:03:24.600 --> 00:03:26.040
by getting its ID,

69
00:03:26.040 --> 00:03:29.280
and then using get revert to get rid of it.

70
00:03:29.280 --> 00:03:33.150
I'll then confirm this and push this updated code

71
00:03:33.150 --> 00:03:37.200
with this commit that reverts this breaking change.

72
00:03:37.200 --> 00:03:38.340
And therefore of course,

73
00:03:38.340 --> 00:03:40.710
another Workflow run will be triggered,

74
00:03:40.710 --> 00:03:44.013
and this time both jobs will finish successfully again.

75
00:03:44.880 --> 00:03:45.723
Here we go.

