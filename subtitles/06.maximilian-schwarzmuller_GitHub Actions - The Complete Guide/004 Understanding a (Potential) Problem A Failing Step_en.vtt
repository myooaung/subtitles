WEBVTT
1
00:00:02.040 --> 00:00:03.330
So let's dive right in,

2
00:00:03.330 --> 00:00:05.700
and let's add some conditions.

3
00:00:05.700 --> 00:00:08.490
And of course there are various places

4
00:00:08.490 --> 00:00:11.970
where we could think about adding conditions.

5
00:00:11.970 --> 00:00:13.890
But here's one thing I wanna do.

6
00:00:13.890 --> 00:00:16.320
Uploading that test report.

7
00:00:16.320 --> 00:00:18.870
You could argue that we're only interested

8
00:00:18.870 --> 00:00:21.930
in that test report if our tests fail.

9
00:00:21.930 --> 00:00:24.030
If all our tests work,

10
00:00:24.030 --> 00:00:26.940
we realistically might not

11
00:00:26.940 --> 00:00:29.670
evaluate that test report anyways,

12
00:00:29.670 --> 00:00:31.890
and therefore uploading and storing

13
00:00:31.890 --> 00:00:34.260
that test report only makes sense

14
00:00:34.260 --> 00:00:36.570
if we got some failing tests.

15
00:00:36.570 --> 00:00:38.850
Therefore, we could add a condition here,

16
00:00:38.850 --> 00:00:41.400
to this Upload test report step,

17
00:00:41.400 --> 00:00:43.350
by adding the IF key,

18
00:00:43.350 --> 00:00:46.260
that ensures that this step only runs

19
00:00:46.260 --> 00:00:50.460
if this step that runs the tests fails.

20
00:00:50.460 --> 00:00:51.810
And that's, by the way, important

21
00:00:51.810 --> 00:00:53.760
for another reason as well.

22
00:00:53.760 --> 00:00:56.100
If this test step fails,

23
00:00:56.100 --> 00:00:59.610
this step normally wouldn't even be executed,

24
00:00:59.610 --> 00:01:01.950
because, as explained a couple of minutes ago,

25
00:01:01.950 --> 00:01:04.959
the default behavior of GitHub Actions is

26
00:01:04.959 --> 00:01:07.541
that if one step fails, the entire job

27
00:01:07.541 --> 00:01:12.180
to which the step belongs is canceled, is aborted,

28
00:01:12.180 --> 00:01:15.090
and therefore this step wouldn't execute typically,

29
00:01:15.090 --> 00:01:16.353
if that step failed.

30
00:01:17.190 --> 00:01:18.510
And the other jobs, by the way,

31
00:01:18.510 --> 00:01:20.970
typically also wouldn't be executed,

32
00:01:20.970 --> 00:01:24.510
if any step like this step in another job fails.

33
00:01:24.510 --> 00:01:27.240
So therefore let's actually quickly evaluate

34
00:01:27.240 --> 00:01:30.450
that default behavior before we add that IF field.

35
00:01:30.450 --> 00:01:33.420
And therefore, I'll go to this main content test file,

36
00:01:33.420 --> 00:01:37.443
and make sure that my test fails, by removing that 'a' here.

37
00:01:39.210 --> 00:01:44.210
With that change made, I can create a new commit broke test,

38
00:01:46.020 --> 00:01:48.750
and now we can push this to a remote repository.

39
00:01:48.750 --> 00:01:50.610
Therefore, I'll quickly create one here,

40
00:01:50.610 --> 00:01:53.460
give it a name of gh-executionflow,

41
00:01:53.460 --> 00:01:54.780
name is up to you.

42
00:01:54.780 --> 00:01:56.640
I'll make it a private repository,

43
00:01:56.640 --> 00:01:58.980
but it doesn't matter for this section.

44
00:01:58.980 --> 00:02:00.540
I won't dive into any features

45
00:02:00.540 --> 00:02:04.440
that would require a public or private repository.

46
00:02:04.440 --> 00:02:06.720
And then with that URL copied,

47
00:02:06.720 --> 00:02:09.092
I'll quickly connect it,

48
00:02:10.620 --> 00:02:14.913
and thereafter we can push with that well known command.

49
00:02:15.990 --> 00:02:17.130
So now this is pushed,

50
00:02:17.130 --> 00:02:18.840
and since I'm pushing to the main branch,

51
00:02:18.840 --> 00:02:21.930
the action that was added will be executed right away.

52
00:02:21.930 --> 00:02:24.960
And as you will see, my test will fail.

53
00:02:24.960 --> 00:02:28.440
By the way, here you also see that I got three jobs that run

54
00:02:28.440 --> 00:02:31.500
after each other, and two jobs that run in parallel.

55
00:02:31.500 --> 00:02:34.020
The test and the lint job run in parallel,

56
00:02:34.020 --> 00:02:38.103
and build and deploy depend on the test job to finish first.

57
00:02:39.090 --> 00:02:42.600
But let's see what happens if the test job fails here.

58
00:02:44.002 --> 00:02:46.380
Here we see that it failed, and as a result

59
00:02:46.380 --> 00:02:50.133
build and deploy aren't even executed, as you can see.

60
00:02:51.090 --> 00:02:53.220
And the lint job still finishes,

61
00:02:53.220 --> 00:02:55.020
because it ran in parallel,

62
00:02:55.020 --> 00:02:58.140
it was started before this test job failed,

63
00:02:58.140 --> 00:03:01.311
but build and deploy, since they depend on the test job,

64
00:03:01.311 --> 00:03:03.750
don't even run.

65
00:03:03.750 --> 00:03:05.880
That's the default behavior we have here.

66
00:03:05.880 --> 00:03:10.560
The other dependent jobs were canceled because test failed.

67
00:03:10.560 --> 00:03:12.633
Now let's add this IF condition.

