WEBVTT
1
00:00:02.460 --> 00:00:03.990
Now there's one last thing

2
00:00:03.990 --> 00:00:06.150
related to reusable workflows,

3
00:00:06.150 --> 00:00:08.520
and that would be outputs.

4
00:00:08.520 --> 00:00:11.070
Of course, you cannot just accept inputs,

5
00:00:11.070 --> 00:00:14.970
but instead your reusable workflow might be doing something

6
00:00:14.970 --> 00:00:17.970
that should be passed back to the Workflow

7
00:00:17.970 --> 00:00:20.853
that called this reusable Workflow.

8
00:00:21.810 --> 00:00:25.350
If you think of reusable Workflows as functions,

9
00:00:25.350 --> 00:00:28.800
then inputs are the arguments you pass to them

10
00:00:28.800 --> 00:00:32.070
and outputs are the return values.

11
00:00:32.070 --> 00:00:34.260
And you do add outputs

12
00:00:34.260 --> 00:00:35.670
by adding the outputs key

13
00:00:35.670 --> 00:00:38.013
under the Workflow call event name.

14
00:00:38.970 --> 00:00:42.810
And then here you can add your outputs,

15
00:00:42.810 --> 00:00:46.500
for example an output named result.

16
00:00:46.500 --> 00:00:48.510
Give it a description,

17
00:00:48.510 --> 00:00:53.510
where you could say the result of the deployment operation

18
00:00:53.670 --> 00:00:56.190
and you provide the value.

19
00:00:56.190 --> 00:00:58.860
And the value of course is typically taken

20
00:00:58.860 --> 00:01:02.130
from the steps in one of your jobs.

21
00:01:02.130 --> 00:01:06.450
For example, here, let's assume we would really be uploading

22
00:01:06.450 --> 00:01:07.710
the content here.

23
00:01:07.710 --> 00:01:09.963
Of course, this upload could fail.

24
00:01:10.800 --> 00:01:14.370
Now in that case, we might want to set result here

25
00:01:14.370 --> 00:01:16.650
to a value like failure

26
00:01:16.650 --> 00:01:19.110
or to false or whatever.

27
00:01:19.110 --> 00:01:23.043
To do that I'll add a new step here,

28
00:01:23.880 --> 00:01:27.510
which I'll name, set result output

29
00:01:27.510 --> 00:01:31.680
and in this step, I will run a command

30
00:01:31.680 --> 00:01:36.510
and echo this special set output command we learned

31
00:01:36.510 --> 00:01:38.043
about earlier in the course.

32
00:01:39.150 --> 00:01:41.640
Remember I taught you about setting outputs

33
00:01:41.640 --> 00:01:43.530
and steps and using those outputs.

34
00:01:43.530 --> 00:01:45.810
Now we're doing the exact same thing

35
00:01:45.810 --> 00:01:48.300
just in this reusable Workflow,

36
00:01:48.300 --> 00:01:51.270
but we still use the colon, colon set output command

37
00:01:51.270 --> 00:01:54.960
in conjunction with echo in a run instruction.

38
00:01:54.960 --> 00:01:57.330
And then here we specify name

39
00:01:57.330 --> 00:01:59.790
and then equals the name of the output

40
00:01:59.790 --> 00:02:04.380
we want to use, for example, step dash result.

41
00:02:04.380 --> 00:02:06.030
And then two colons,

42
00:02:06.030 --> 00:02:09.419
and then the value that should be stored in that output.

43
00:02:09.419 --> 00:02:11.700
For example success,

44
00:02:11.700 --> 00:02:14.370
you can also wrap this between single quotes,

45
00:02:14.370 --> 00:02:16.230
but you don't have to.

46
00:02:16.230 --> 00:02:19.320
So now the string success would be stored

47
00:02:19.320 --> 00:02:23.013
in a step output named step dash result.

48
00:02:23.880 --> 00:02:26.130
Now to use this output here

49
00:02:26.130 --> 00:02:28.920
as output for the reusable Workflow,

50
00:02:28.920 --> 00:02:30.060
I will first of all,

51
00:02:30.060 --> 00:02:32.520
make it an output of the overall job here

52
00:02:32.520 --> 00:02:34.710
by adding outputs to this job.

53
00:02:34.710 --> 00:02:35.970
And that's what we did earlier

54
00:02:35.970 --> 00:02:37.500
in the course already.

55
00:02:37.500 --> 00:02:40.140
And that actually belongs to the deploy job,

56
00:02:40.140 --> 00:02:42.930
so it should be nested inside of deploy.

57
00:02:42.930 --> 00:02:47.730
So here I add outputs, the outputs key to this specific job,

58
00:02:47.730 --> 00:02:51.000
and then here we could have a name of outcome.

59
00:02:51.000 --> 00:02:52.800
We could also use result here

60
00:02:52.800 --> 00:02:54.840
but I'm already using result up here,

61
00:02:54.840 --> 00:02:57.780
and to make it clear which output belongs to which part

62
00:02:57.780 --> 00:03:01.143
to which step or job, I'll use outcome here.

63
00:03:02.100 --> 00:03:05.040
And then here we use a dynamic expression

64
00:03:05.040 --> 00:03:07.230
and we access our steps

65
00:03:07.230 --> 00:03:12.230
and we give this step an ID set dash result for example

66
00:03:13.590 --> 00:03:18.300
so that here we can access steps dot set dash result

67
00:03:18.300 --> 00:03:23.300
dot outputs and then access the step dash result output

68
00:03:24.630 --> 00:03:29.553
step result because that's what I'm also using down here.

69
00:03:31.290 --> 00:03:32.123
So now with that,

70
00:03:32.123 --> 00:03:35.550
we're getting the output that was set in this step

71
00:03:35.550 --> 00:03:38.520
and we're making it an output of this deploy job,

72
00:03:38.520 --> 00:03:40.443
an output named outcome.

73
00:03:41.430 --> 00:03:44.850
And now we can reference this outcome output

74
00:03:44.850 --> 00:03:48.300
in our overall workflow output.

75
00:03:48.300 --> 00:03:50.760
For that, we go to outputs in our Workflow.

76
00:03:50.760 --> 00:03:55.140
And here under value we use another dynamic expression.

77
00:03:55.140 --> 00:03:59.730
And here we use the special jobs context object

78
00:03:59.730 --> 00:04:02.670
which of course is another officially supported

79
00:04:02.670 --> 00:04:07.670
context object for reusable workflows only as you see here.

80
00:04:09.810 --> 00:04:13.800
And this allows us to get the output of the deploy job.

81
00:04:13.800 --> 00:04:16.110
So here I named this job deployed.

82
00:04:16.110 --> 00:04:18.663
That's why I'm using deploy here as well.

83
00:04:19.680 --> 00:04:21.510
and then the outputs of that job

84
00:04:21.510 --> 00:04:23.223
and then in my case outcome.

85
00:04:24.090 --> 00:04:28.200
So now the output of this deploy job the outcome output

86
00:04:28.200 --> 00:04:31.503
is the result output of this Workflow.

87
00:04:32.490 --> 00:04:34.410
And therefore in the Workflow

88
00:04:34.410 --> 00:04:37.440
where we use the reusable Workflow

89
00:04:37.440 --> 00:04:39.873
we can get this output and use it.

90
00:04:41.250 --> 00:04:43.893
To use it we could add another job,

91
00:04:44.760 --> 00:04:47.430
print deploy result

92
00:04:47.430 --> 00:04:49.410
or anything like this

93
00:04:49.410 --> 00:04:52.860
and run this on Ubuntu latest

94
00:04:52.860 --> 00:04:55.470
make sure that it needs to deploy job

95
00:04:55.470 --> 00:04:59.100
because this should run after the deploy job finished.

96
00:04:59.100 --> 00:05:04.100
And then here I'll just add one step print deploy output,

97
00:05:06.120 --> 00:05:08.280
where I simply echo

98
00:05:08.280 --> 00:05:11.310
and then the result of some dynamic expression.

99
00:05:11.310 --> 00:05:15.330
And here I want to access the needs context object

100
00:05:15.330 --> 00:05:18.130
Which gives me access to the job I'm depending on

101
00:05:19.110 --> 00:05:22.050
and then here I need the deploy job,

102
00:05:22.050 --> 00:05:23.880
that's the only job I depend on here,

103
00:05:23.880 --> 00:05:25.920
but I could be depending on more jobs,

104
00:05:25.920 --> 00:05:29.340
that's why we have to specify the job ID here.

105
00:05:29.340 --> 00:05:32.010
And then we access the outputs of that job,

106
00:05:32.010 --> 00:05:34.740
which of course are the outputs of the reusable Workflow

107
00:05:34.740 --> 00:05:36.240
in this case.

108
00:05:36.240 --> 00:05:41.240
And then in my case here, I named the output result

109
00:05:41.670 --> 00:05:44.613
so here I also access result.

110
00:05:45.630 --> 00:05:50.160
Now with all that done, we have a chain of outputs

111
00:05:50.160 --> 00:05:52.110
and we can therefore now create a commit

112
00:05:52.110 --> 00:05:56.220
where I say added outputs and push this.

113
00:05:56.220 --> 00:05:59.850
And now again, the reusable Workflow will be used

114
00:05:59.850 --> 00:06:01.830
by our Workflow,

115
00:06:01.830 --> 00:06:03.693
by this Workflow here.

116
00:06:04.680 --> 00:06:09.150
And you will see that in this print deploy result job here

117
00:06:09.150 --> 00:06:11.820
we should successfully print the result set

118
00:06:11.820 --> 00:06:13.680
by the deploy job.

119
00:06:13.680 --> 00:06:16.770
And the deploy job uses this reusable Workflow

120
00:06:16.770 --> 00:06:21.090
where the output is set to the string success.

121
00:06:21.090 --> 00:06:23.730
So we should see success being output here

122
00:06:23.730 --> 00:06:25.980
in print deploy result.

123
00:06:25.980 --> 00:06:27.960
So let's wait until we reach this job

124
00:06:27.960 --> 00:06:29.343
and until it's completed.

125
00:06:30.630 --> 00:06:33.330
Here we go, it completed.

126
00:06:33.330 --> 00:06:36.090
And if we take a look at print deploy output

127
00:06:36.090 --> 00:06:40.233
we see that there success was output as expected.

