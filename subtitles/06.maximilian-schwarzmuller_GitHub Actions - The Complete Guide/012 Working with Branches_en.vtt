WEBVTT
1
00:00:02.340 --> 00:00:04.080
So, that was the theory.

2
00:00:04.080 --> 00:00:07.530
Now, to come back to our example project here,

3
00:00:07.530 --> 00:00:10.800
let's say there we do indeed want to restructure

4
00:00:10.800 --> 00:00:13.020
the HTML code a little bit.

5
00:00:13.020 --> 00:00:15.090
And I wanna do that in a new branch

6
00:00:15.090 --> 00:00:17.926
so that I can continue working on the old branch

7
00:00:17.926 --> 00:00:21.513
without clashing with the other upcoming code changes.

8
00:00:22.350 --> 00:00:25.410
To do that, we have to create a new branch.

9
00:00:25.410 --> 00:00:28.740
Now this can be done by running Git Branch

10
00:00:28.740 --> 00:00:32.130
and then the name of that new branch you want to create.

11
00:00:32.130 --> 00:00:36.180
In my case here, I'll name it feature-restructure,

12
00:00:36.180 --> 00:00:37.860
but the name is up to you.

13
00:00:37.860 --> 00:00:40.080
It should be one word though.

14
00:00:40.080 --> 00:00:43.920
And it's quite common to use all lowercase characters,

15
00:00:43.920 --> 00:00:46.443
and separate multiple words with dashes.

16
00:00:47.310 --> 00:00:51.090
So here it's feature-restructure.

17
00:00:51.090 --> 00:00:54.090
And if I hit Enter, this branch was created.

18
00:00:54.090 --> 00:00:56.760
You can View all branches,

19
00:00:56.760 --> 00:00:58.710
you can get a list of all branches

20
00:00:58.710 --> 00:01:01.440
that do exist in your Git Repository.

21
00:01:01.440 --> 00:01:04.200
By running Git Branch without a branch name.

22
00:01:04.200 --> 00:01:05.250
If you run it like this,

23
00:01:05.250 --> 00:01:08.370
it simply lists all existing branches.

24
00:01:08.370 --> 00:01:10.620
And here you see that we have the Main Branch

25
00:01:10.620 --> 00:01:13.350
and the Feature Restructure Branch.

26
00:01:13.350 --> 00:01:15.210
This command, Git Branch,

27
00:01:15.210 --> 00:01:18.210
also shows you which branch is currently active.

28
00:01:18.210 --> 00:01:20.850
So in which branch you're currently working.

29
00:01:20.850 --> 00:01:23.070
It highlights that branch by coloring it

30
00:01:23.070 --> 00:01:25.293
and adding this asterisk next to it.

31
00:01:26.280 --> 00:01:28.020
So, here I'm still in the Main Branch,

32
00:01:28.020 --> 00:01:30.930
I just created this branch here.

33
00:01:30.930 --> 00:01:33.840
If we now want to work in that branch,

34
00:01:33.840 --> 00:01:36.570
we have to Checkout that branch,

35
00:01:36.570 --> 00:01:38.250
by using the Checkout command,

36
00:01:38.250 --> 00:01:40.290
which we saw before.

37
00:01:40.290 --> 00:01:42.810
Before, we used it with the Commit ID,

38
00:01:42.810 --> 00:01:44.760
now we're using it with a Branch Name

39
00:01:44.760 --> 00:01:47.070
to switch to that branch.

40
00:01:47.070 --> 00:01:50.250
If I do that, you see that I switched to the branch,

41
00:01:50.250 --> 00:01:51.900
and if I run Git Log there,

42
00:01:51.900 --> 00:01:53.808
you see that we have the same Commits

43
00:01:53.808 --> 00:01:57.180
as we do in the Main Branch, in this branch here.

44
00:01:57.180 --> 00:01:59.760
This is also something that we can see up here,

45
00:01:59.760 --> 00:02:02.610
where all the branches are listed.

46
00:02:02.610 --> 00:02:05.460
So all these branches contain this Commit

47
00:02:05.460 --> 00:02:07.473
and also the older commits here.

48
00:02:08.430 --> 00:02:12.480
So now we got two branches that built up on the same commit.

49
00:02:12.480 --> 00:02:14.130
There also is a different way

50
00:02:14.130 --> 00:02:15.720
of creating that branch though,

51
00:02:15.720 --> 00:02:18.300
which saves you this extra checkout step,

52
00:02:18.300 --> 00:02:20.220
in case you know that you do want

53
00:02:20.220 --> 00:02:23.190
to move to that new branch right away.

54
00:02:23.190 --> 00:02:24.330
For that, I'll first of all

55
00:02:24.330 --> 00:02:26.340
go back to the old Main Branch,

56
00:02:26.340 --> 00:02:29.400
so that this is the active branch again.

57
00:02:29.400 --> 00:02:32.670
And now, we can Delete the newly created branch

58
00:02:32.670 --> 00:02:35.790
by running Git Branch -D,

59
00:02:35.790 --> 00:02:37.980
and then specifying the name of the branch

60
00:02:37.980 --> 00:02:39.930
that should be deleted.

61
00:02:39.930 --> 00:02:41.790
So this Git Branch command can be used

62
00:02:41.790 --> 00:02:43.170
for listing branches,

63
00:02:43.170 --> 00:02:45.090
if you don't add anything else.

64
00:02:45.090 --> 00:02:46.650
For creating a new branch,

65
00:02:46.650 --> 00:02:49.410
if you specify the name of the new branch,

66
00:02:49.410 --> 00:02:51.210
or for deleting a branch,

67
00:02:51.210 --> 00:02:53.070
if you specify the name of the branch

68
00:02:53.070 --> 00:02:54.270
that should be deleted,

69
00:02:54.270 --> 00:02:56.793
and you also add the -D.

70
00:02:57.840 --> 00:03:01.020
So, if a hit Enter here, this branch is deleted.

71
00:03:01.020 --> 00:03:03.960
As you can also see if I list all branches.

72
00:03:03.960 --> 00:03:06.720
And now a different way of creating a new branch

73
00:03:06.720 --> 00:03:08.820
and automatically checking it out,

74
00:03:08.820 --> 00:03:11.280
is to run Git Checkout -b

75
00:03:11.280 --> 00:03:15.720
and then that branch name of the newly created branch.

76
00:03:15.720 --> 00:03:17.820
So now with that, we create a branch

77
00:03:17.820 --> 00:03:20.700
and check out that branch in one step.

78
00:03:20.700 --> 00:03:23.610
As you can tell, if you run Git Branch, again,

79
00:03:23.610 --> 00:03:25.890
it still is a branch that has all the commits

80
00:03:25.890 --> 00:03:27.093
of the other branch.

81
00:03:28.080 --> 00:03:31.350
So that's how you can work with Branches in general.

82
00:03:31.350 --> 00:03:32.910
Now let's see how we can work

83
00:03:32.910 --> 00:03:35.403
with Commits in those different branches.

