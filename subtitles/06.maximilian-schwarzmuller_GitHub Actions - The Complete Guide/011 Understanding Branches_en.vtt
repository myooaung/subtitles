WEBVTT
1
00:00:02.220 --> 00:00:04.050
In the previous lectures,

2
00:00:04.050 --> 00:00:07.560
we learned a lot about basic Git features

3
00:00:07.560 --> 00:00:09.420
and we learned a lot about commits,

4
00:00:09.420 --> 00:00:11.880
moving between commits and so on.

5
00:00:11.880 --> 00:00:15.000
Now, one key feature is missing though,

6
00:00:15.000 --> 00:00:17.730
and that would be branches.

7
00:00:17.730 --> 00:00:21.600
Now, Git branches are a key concept of Git

8
00:00:21.600 --> 00:00:24.150
and they're just as important as commits.

9
00:00:24.150 --> 00:00:27.360
Thankfully, though, they're also related to commits.

10
00:00:27.360 --> 00:00:30.090
So it's not something brand new in general,

11
00:00:30.090 --> 00:00:32.970
but instead a feature that builds up

12
00:00:32.970 --> 00:00:35.940
on this snapshot and commit idea.

13
00:00:35.940 --> 00:00:38.073
But what are branches all about?

14
00:00:39.090 --> 00:00:41.700
Well, as you are working on a project,

15
00:00:41.700 --> 00:00:44.610
you start collecting commits, you could say.

16
00:00:44.610 --> 00:00:47.070
You commit your various changes,

17
00:00:47.070 --> 00:00:49.950
as we also did it in the previous lectures,

18
00:00:49.950 --> 00:00:52.740
and eventually, you have more and more commits.

19
00:00:52.740 --> 00:00:56.130
And these commits are organized in branches,

20
00:00:56.130 --> 00:00:58.710
and you got one branch out of the box

21
00:00:58.710 --> 00:01:00.360
without doing anything.

22
00:01:00.360 --> 00:01:01.560
The main branch.

23
00:01:01.560 --> 00:01:05.040
It could also be called master branch though.

24
00:01:05.040 --> 00:01:07.290
But you do have this default branch

25
00:01:07.290 --> 00:01:09.330
because that branch is created

26
00:01:09.330 --> 00:01:12.300
whenever you initialize a new Git repository

27
00:01:12.300 --> 00:01:16.170
and you start creating snapshots, commits.

28
00:01:16.170 --> 00:01:20.070
And that main branch is what you see when you run git log.

29
00:01:20.070 --> 00:01:22.080
Here, you see all your commits

30
00:01:22.080 --> 00:01:23.490
and you also see this name

31
00:01:23.490 --> 00:01:26.220
of that default branch which you have.

32
00:01:26.220 --> 00:01:29.490
And those different commits which you created

33
00:01:29.490 --> 00:01:32.310
are organized into that branch.

34
00:01:32.310 --> 00:01:35.610
So you could say branches are containers

35
00:01:35.610 --> 00:01:37.920
that contain commits.

36
00:01:37.920 --> 00:01:41.040
But I'm saying branches instead of branch

37
00:01:41.040 --> 00:01:45.300
because you can have more than one branch in a project.

38
00:01:45.300 --> 00:01:47.610
You can create additional branches,

39
00:01:47.610 --> 00:01:52.200
for example, to work on a new feature or a bug fix

40
00:01:52.200 --> 00:01:55.203
without immediately impacting your main code.

41
00:01:56.070 --> 00:01:58.470
Let's say in this project here,

42
00:01:58.470 --> 00:02:01.680
we want to restructure the content of this website,

43
00:02:01.680 --> 00:02:04.020
the code of this website.

44
00:02:04.020 --> 00:02:07.860
We want to add some new wrapping HTML elements

45
00:02:07.860 --> 00:02:11.280
and we want to add some additional elements.

46
00:02:11.280 --> 00:02:14.880
We want to do that without impacting our main work

47
00:02:14.880 --> 00:02:16.470
in the main branch,

48
00:02:16.470 --> 00:02:19.620
which might focus on maintaining this current state

49
00:02:19.620 --> 00:02:22.863
and just fixing bugs related to that website.

50
00:02:23.820 --> 00:02:26.550
We only want to apply our changes

51
00:02:26.550 --> 00:02:29.760
once we're done with all the various code changes

52
00:02:29.760 --> 00:02:33.900
that are involved in that new feature which we plan to add.

53
00:02:33.900 --> 00:02:36.180
Of course, here for this tiny example,

54
00:02:36.180 --> 00:02:38.880
we won't add too many new features,

55
00:02:38.880 --> 00:02:40.620
but in more complex projects,

56
00:02:40.620 --> 00:02:42.720
you could easily spend a couple of days

57
00:02:42.720 --> 00:02:44.580
working on a brand-new feature.

58
00:02:44.580 --> 00:02:47.550
And you want to work on that feature in a place

59
00:02:47.550 --> 00:02:50.550
where you don't interfere with your colleagues

60
00:02:50.550 --> 00:02:53.340
that might still be working on the old code

61
00:02:53.340 --> 00:02:56.040
and might be fixing bugs there.

62
00:02:56.040 --> 00:02:58.350
That's why you can create branches.

63
00:02:58.350 --> 00:03:01.380
You could, for example, create a new feature branch

64
00:03:01.380 --> 00:03:03.750
by running this git branch command,

65
00:03:03.750 --> 00:03:05.850
which is offered by Git.

66
00:03:05.850 --> 00:03:10.050
By default, this command takes the latest commit,

67
00:03:10.050 --> 00:03:12.840
which is currently targeted by head,

68
00:03:12.840 --> 00:03:14.820
and it builds a new branch

69
00:03:14.820 --> 00:03:18.300
with this commit as the starting point.

70
00:03:18.300 --> 00:03:21.210
Now all the old commits are also taken along,

71
00:03:21.210 --> 00:03:23.520
but this commit is now the starting point

72
00:03:23.520 --> 00:03:25.290
of this new branch.

73
00:03:25.290 --> 00:03:29.670
So the same commit is now part of multiple branches.

74
00:03:29.670 --> 00:03:33.150
Now you could still continue work in the main branch

75
00:03:33.150 --> 00:03:36.210
and for example, create new commits there,

76
00:03:36.210 --> 00:03:38.850
but those commits would then not be part

77
00:03:38.850 --> 00:03:41.883
of that other branch, of the feature-1 branch.

78
00:03:42.810 --> 00:03:43.643
On the other hand,

79
00:03:43.643 --> 00:03:46.770
you could also add commits there in that branch

80
00:03:46.770 --> 00:03:49.653
without immediately affecting the main branch.

81
00:03:50.700 --> 00:03:51.870
And that's what I mean.

82
00:03:51.870 --> 00:03:54.120
Different teams could, for example,

83
00:03:54.120 --> 00:03:56.070
work on different branches

84
00:03:56.070 --> 00:03:59.070
so that they can work on their different features

85
00:03:59.070 --> 00:04:02.643
or bug fixes without interfering with each other.

86
00:04:03.540 --> 00:04:05.160
Now eventually, of course,

87
00:04:05.160 --> 00:04:08.970
you might want to combine all these code changes though,

88
00:04:08.970 --> 00:04:12.150
because if we stick to the example of a website,

89
00:04:12.150 --> 00:04:15.480
the goal is of course not to build multiple websites,

90
00:04:15.480 --> 00:04:18.600
but to still work on one single website,

91
00:04:18.600 --> 00:04:21.540
just on different features or bug fixes

92
00:04:21.540 --> 00:04:25.290
that are all relevant to that same website.

93
00:04:25.290 --> 00:04:27.240
And that's why eventually,

94
00:04:27.240 --> 00:04:30.240
you can merge those different branches

95
00:04:30.240 --> 00:04:33.030
with the git merge command.

96
00:04:33.030 --> 00:04:34.860
If you run that command,

97
00:04:34.860 --> 00:04:37.337
all the commits that are part of one branch,

98
00:04:37.337 --> 00:04:39.960
of the feature-1 branch for example,

99
00:04:39.960 --> 00:04:43.500
will be merged with the commits of the main branch,

100
00:04:43.500 --> 00:04:47.130
and Git will automatically try to commit those changes

101
00:04:47.130 --> 00:04:49.650
such that nothing is overwritten.

102
00:04:49.650 --> 00:04:52.620
If you do have clashing code changes though,

103
00:04:52.620 --> 00:04:55.770
you might need to resolve those problems manually,

104
00:04:55.770 --> 00:04:58.110
but that's something we cover in greater detail

105
00:04:58.110 --> 00:05:00.030
in our complete Git course.

106
00:05:00.030 --> 00:05:02.880
It's a little bit too advanced for this crash course.

107
00:05:02.880 --> 00:05:06.783
In many cases, the automatic merging works just fine.

