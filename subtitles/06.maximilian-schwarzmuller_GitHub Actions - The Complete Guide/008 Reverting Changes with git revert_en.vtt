WEBVTT
1
00:00:02.070 --> 00:00:05.370
Okay, so at this point we now know

2
00:00:05.370 --> 00:00:09.660
how to create commits for a single file, at least,

3
00:00:09.660 --> 00:00:12.393
and we learned how to move between commits.

4
00:00:13.350 --> 00:00:17.040
Now, let's say that we want to undo this latest commit.

5
00:00:17.040 --> 00:00:18.720
We're not happy with it anymore,

6
00:00:18.720 --> 00:00:20.490
we don't want this paragraph.

7
00:00:20.490 --> 00:00:23.190
Instead, I want to add some styling to this website

8
00:00:23.190 --> 00:00:27.240
and I want to add an image to make it look more pleasant.

9
00:00:27.240 --> 00:00:30.030
Because at the moment, if you open this

10
00:00:30.030 --> 00:00:33.360
in your finder or your Windows Explorer

11
00:00:33.360 --> 00:00:36.840
and you double-click that index.html file there,

12
00:00:36.840 --> 00:00:41.460
you will see that this website doesn't look too fancy.

13
00:00:41.460 --> 00:00:43.980
So I want to add some styling and a nice image to it

14
00:00:43.980 --> 00:00:46.890
and I want to get rid of this paragraph with this link

15
00:00:46.890 --> 00:00:49.320
because, let's say, we don't need that anymore.

16
00:00:49.320 --> 00:00:52.173
How can we revert such a commit then?

17
00:00:53.610 --> 00:00:57.240
Well, one option would be to manually make the changes

18
00:00:57.240 --> 00:01:00.360
we want to make, like, for example, removing that paragraph,

19
00:01:00.360 --> 00:01:02.610
and then adding a new commit.

20
00:01:02.610 --> 00:01:06.390
That is something you can do and that is absolutely fine

21
00:01:06.390 --> 00:01:09.690
but it's actually more work than you need to do

22
00:01:09.690 --> 00:01:12.540
because Git also offers various commands

23
00:01:12.540 --> 00:01:15.540
that help with undoing commits.

24
00:01:15.540 --> 00:01:20.250
For example, the very important git revert command.

25
00:01:20.250 --> 00:01:23.520
This also needs the ID of a commit you want to revert,

26
00:01:23.520 --> 00:01:27.600
and what this command does then is it takes a look

27
00:01:27.600 --> 00:01:31.440
at the commit with that ID that you are specifying here

28
00:01:31.440 --> 00:01:34.230
and it then reverts the changes that were made

29
00:01:34.230 --> 00:01:36.030
by that commit.

30
00:01:36.030 --> 00:01:38.970
So not all the changes since that commit

31
00:01:38.970 --> 00:01:42.060
but the changes that are defined in that commit

32
00:01:42.060 --> 00:01:43.470
with that ID.

33
00:01:43.470 --> 00:01:47.670
Now what's important is that git revert won't delete

34
00:01:47.670 --> 00:01:49.890
that commit which you want to revert,

35
00:01:49.890 --> 00:01:53.100
but instead it adds a new commit in addition

36
00:01:53.100 --> 00:01:56.010
that includes all the changes that have to be made

37
00:01:56.010 --> 00:01:59.193
to undo the changes of that other commit.

38
00:02:00.120 --> 00:02:02.850
To see this in action, I'm back here in my project

39
00:02:02.850 --> 00:02:05.640
and I know that I want to undo this commit,

40
00:02:05.640 --> 00:02:09.243
because that's the commit where I added this paragraph.

41
00:02:10.350 --> 00:02:13.810
In order to do that, I'll copy the ID of this commit

42
00:02:14.820 --> 00:02:19.050
and then I can run git revert

43
00:02:19.050 --> 00:02:21.690
and specify that commit ID.

44
00:02:21.690 --> 00:02:24.810
If you do that and you hit Enter, you see?

45
00:02:24.810 --> 00:02:27.250
Now the paragraph with the link is gone

46
00:02:28.140 --> 00:02:30.990
and I'm prompted to enter a message here.

47
00:02:30.990 --> 00:02:33.060
Now I have to enter a message here

48
00:02:33.060 --> 00:02:36.060
because I'm basically creating a new commit here.

49
00:02:36.060 --> 00:02:37.590
That's what I just explained,

50
00:02:37.590 --> 00:02:40.383
it's reverted by adding a new commit.

51
00:02:42.090 --> 00:02:44.310
So, therefore, here we have to enter some content

52
00:02:44.310 --> 00:02:46.950
and how you enter your content here,

53
00:02:46.950 --> 00:02:49.530
how you use this terminal editor,

54
00:02:49.530 --> 00:02:51.270
depends on your operating system

55
00:02:51.270 --> 00:02:53.760
and what your default editor here is.

56
00:02:53.760 --> 00:02:55.440
So that's something you'll have to look up

57
00:02:55.440 --> 00:02:58.620
for your specific editor in your Command Prompt.

58
00:02:58.620 --> 00:03:01.743
Here, I'll just say reverting added link,

59
00:03:02.820 --> 00:03:05.940
and thereafter I'll save and close this.

60
00:03:05.940 --> 00:03:09.030
Now, if I run git log, we see that the old commit

61
00:03:09.030 --> 00:03:11.670
where I added the link is still there,

62
00:03:11.670 --> 00:03:15.390
but we also got this new commit which I just made,

63
00:03:15.390 --> 00:03:18.120
which gets rid of the paragraph again.

64
00:03:18.120 --> 00:03:20.640
So that's something Git did automatically for us

65
00:03:20.640 --> 00:03:23.850
and we didn't have to edit the code manually.

66
00:03:23.850 --> 00:03:26.910
Of course, when it comes to removing a simple paragraph,

67
00:03:26.910 --> 00:03:29.040
manually editing the code is something

68
00:03:29.040 --> 00:03:31.020
that wouldn't have been too difficult,

69
00:03:31.020 --> 00:03:33.930
but in bigger projects you will often have changes

70
00:03:33.930 --> 00:03:36.870
that span multiple files and are more complex,

71
00:03:36.870 --> 00:03:38.820
and then it's, of course, very convenient

72
00:03:38.820 --> 00:03:42.330
if it's just one command that gets rid of all these changes

73
00:03:42.330 --> 00:03:45.090
instead of having to do that manually.

74
00:03:45.090 --> 00:03:48.693
So that's how you can undo commits with help of git revert.

