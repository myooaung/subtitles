WEBVTT
1
00:00:02.040 --> 00:00:04.440
Now, just as you can add inputs

2
00:00:04.440 --> 00:00:08.310
to your custom actions, you can also add outputs

3
00:00:08.310 --> 00:00:10.320
to your custom actions.

4
00:00:10.320 --> 00:00:11.520
And to add an output,

5
00:00:11.520 --> 00:00:14.010
you add the outputs key on the same level

6
00:00:14.010 --> 00:00:17.280
as you added inputs, then nested below it,

7
00:00:17.280 --> 00:00:20.640
any output with any identifier of your choice.

8
00:00:20.640 --> 00:00:23.883
For example, used dash cache.

9
00:00:25.380 --> 00:00:27.120
And then nested below that,

10
00:00:27.120 --> 00:00:28.923
a description for this output.

11
00:00:29.880 --> 00:00:32.820
Cache was used, for example,

12
00:00:32.820 --> 00:00:36.603
or whether the cache was used.

13
00:00:37.440 --> 00:00:39.600
So that's how you define an output.

14
00:00:39.600 --> 00:00:41.550
To now assign a value to it,

15
00:00:41.550 --> 00:00:44.520
you have to add the value key just as we did it

16
00:00:44.520 --> 00:00:47.160
earlier in the course when we added an output

17
00:00:47.160 --> 00:00:48.633
to one of our jobs.

18
00:00:49.680 --> 00:00:53.220
Now, the value here should refer to our steps

19
00:00:53.220 --> 00:00:56.550
and therefore here I'm using a dynamic expression,

20
00:00:56.550 --> 00:00:58.950
and then the steps context.

21
00:00:58.950 --> 00:01:01.440
And now we must refer to one of our steps

22
00:01:01.440 --> 00:01:05.489
with help of the IDs assigned to the steps.

23
00:01:05.489 --> 00:01:08.310
For example, here I could add an ID

24
00:01:08.310 --> 00:01:11.040
to the install dependencies step

25
00:01:11.040 --> 00:01:14.181
called install, and use that same ID

26
00:01:14.181 --> 00:01:18.003
up here, so that ID which I defined down there.

27
00:01:19.380 --> 00:01:22.290
And then in that install dependencies step

28
00:01:22.290 --> 00:01:25.290
I could run multiple commands where

29
00:01:25.290 --> 00:01:27.840
one of the commands installs the dependencies,

30
00:01:27.840 --> 00:01:29.820
but the other command uses the

31
00:01:29.820 --> 00:01:32.340
set dash output command we learned about

32
00:01:32.340 --> 00:01:33.900
earlier in the course.

33
00:01:33.900 --> 00:01:36.330
To set an output with the name,

34
00:01:36.330 --> 00:01:40.413
let's say cache, this name is up to you though,

35
00:01:41.640 --> 00:01:44.100
and set it equal to a value of

36
00:01:44.100 --> 00:01:45.990
between single quotes.

37
00:01:45.990 --> 00:01:49.500
And now here I want to use another dynamic expression

38
00:01:49.500 --> 00:01:54.500
and actually use my input here which I called caching.

39
00:01:55.260 --> 00:01:58.053
So here I can then use inputs.caching.

40
00:01:59.490 --> 00:02:01.230
Of course therefore, the output is

41
00:02:01.230 --> 00:02:03.060
kind of redundant because in the end,

42
00:02:03.060 --> 00:02:06.090
I set it to the same value as this input was set.

43
00:02:06.090 --> 00:02:08.400
But I just wanna show you how you can

44
00:02:08.400 --> 00:02:09.870
use outputs in general.

45
00:02:09.870 --> 00:02:12.750
We'll see a more useful example for an output

46
00:02:12.750 --> 00:02:16.440
a little bit later when we build other kinds of actions.

47
00:02:16.440 --> 00:02:19.950
So here I am setting the cache output of this step

48
00:02:19.950 --> 00:02:22.920
to the value of the caching input.

49
00:02:22.920 --> 00:02:25.620
And therefore, now here when we set

50
00:02:25.620 --> 00:02:28.260
the value for the overall action output,

51
00:02:28.260 --> 00:02:30.480
we reach out to this install step,

52
00:02:30.480 --> 00:02:35.480
now there to the cache output by using .outputs.cache,

53
00:02:36.000 --> 00:02:38.190
and that will make sure that the value

54
00:02:38.190 --> 00:02:40.260
provided here, which is of course

55
00:02:40.260 --> 00:02:42.000
the input value in this case,

56
00:02:42.000 --> 00:02:45.393
will be provided for this used cache output.

57
00:02:46.620 --> 00:02:49.200
And this output of this action could now be used

58
00:02:49.200 --> 00:02:51.840
in the Workflow after using the action.

59
00:02:51.840 --> 00:02:56.670
Here, we could add a new step, output information,

60
00:02:56.670 --> 00:03:00.840
where I simply output some text.

61
00:03:00.840 --> 00:03:04.743
And to be precise, I will say cache used,

62
00:03:05.970 --> 00:03:08.700
and then add a dynamic expression

63
00:03:08.700 --> 00:03:12.210
where I reach out to my previous step

64
00:03:12.210 --> 00:03:17.210
by giving this step an ID, cache steps for example,

65
00:03:17.370 --> 00:03:21.300
and using steps.cache deps.outputs here.

66
00:03:21.300 --> 00:03:22.920
And then the output I defined,

67
00:03:22.920 --> 00:03:26.160
which in this case was used cache,

68
00:03:26.160 --> 00:03:28.950
so that is what I use here.

69
00:03:28.950 --> 00:03:31.620
And that will now print the output value

70
00:03:31.620 --> 00:03:34.863
of this custom action step here in this step.

71
00:03:35.910 --> 00:03:37.440
That's how it should work.

72
00:03:37.440 --> 00:03:42.270
Now we can create a new commit, added output

73
00:03:42.270 --> 00:03:44.160
and push this, and we should see

74
00:03:44.160 --> 00:03:48.273
that now our output is set and used as expected.

75
00:03:49.350 --> 00:03:51.030
So here for the linking step

76
00:03:51.030 --> 00:03:54.630
it did now finish our custom action step,

77
00:03:54.630 --> 00:03:56.970
and then in output information,

78
00:03:56.970 --> 00:03:59.400
it indeed does print that output

79
00:03:59.400 --> 00:04:01.953
from our own custom action step.

