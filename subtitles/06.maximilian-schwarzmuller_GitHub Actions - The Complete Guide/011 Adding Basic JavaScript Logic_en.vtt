WEBVTT
1
00:00:02.160 --> 00:00:03.450
Now, regarding the logic

2
00:00:03.450 --> 00:00:05.400
in that JavaScript file,

3
00:00:05.400 --> 00:00:08.010
as mentioned before, it, of course, is important

4
00:00:08.010 --> 00:00:09.960
to have some JavaScript knowledge

5
00:00:09.960 --> 00:00:11.010
but for this course,

6
00:00:11.010 --> 00:00:13.710
we'll stick to basic code so you will be able

7
00:00:13.710 --> 00:00:16.920
to follow along without that knowledge.

8
00:00:16.920 --> 00:00:18.450
Now, what I'll do in this file

9
00:00:18.450 --> 00:00:21.540
is I'll create a so-called function called run

10
00:00:21.540 --> 00:00:23.910
and I'll execute it right thereafter.

11
00:00:23.910 --> 00:00:25.860
This is technically not required

12
00:00:25.860 --> 00:00:28.080
and the name also doesn't have to be run.

13
00:00:28.080 --> 00:00:30.420
You just see it in a lot of actions

14
00:00:30.420 --> 00:00:33.780
and it's therefore a pattern I also use here.

15
00:00:33.780 --> 00:00:36.360
Ultimately, this function will be executed right

16
00:00:36.360 --> 00:00:37.980
when this file is being executed,

17
00:00:37.980 --> 00:00:40.470
so you could also put your code right into this file

18
00:00:40.470 --> 00:00:41.790
without this function

19
00:00:41.790 --> 00:00:43.470
but here I'll use the function,

20
00:00:43.470 --> 00:00:45.390
which also allows us to, for example,

21
00:00:45.390 --> 00:00:47.670
turn it into a async function,

22
00:00:47.670 --> 00:00:49.410
which is a more advanced feature

23
00:00:49.410 --> 00:00:50.973
and not too important here.

24
00:00:52.260 --> 00:00:54.570
But with that we'll put the main code

25
00:00:54.570 --> 00:00:56.670
inside that run function here,

26
00:00:56.670 --> 00:01:00.090
and what I wanna do here to start simple

27
00:01:00.090 --> 00:01:02.580
and keep things simple for a start

28
00:01:02.580 --> 00:01:05.825
is I just wanna output some info message.

29
00:01:05.825 --> 00:01:09.990
So basically, the equivalent to echo something.

30
00:01:09.990 --> 00:01:11.700
But we can't use echo here

31
00:01:11.700 --> 00:01:14.520
because that's not JavaScript code.

32
00:01:14.520 --> 00:01:17.310
Well, if we wanna send a message to GitHub Actions

33
00:01:17.310 --> 00:01:19.080
and its log file here,

34
00:01:19.080 --> 00:01:20.730
we have to use a special function

35
00:01:20.730 --> 00:01:23.160
provided by GitHub Actions.

36
00:01:23.160 --> 00:01:26.070
And to do that, I'll open my terminal

37
00:01:26.070 --> 00:01:29.340
and navigate into the github/actions folder

38
00:01:29.340 --> 00:01:33.450
and then there into the deploy-s3-javascript folder

39
00:01:33.450 --> 00:01:36.720
and run npm init -y here.

40
00:01:36.720 --> 00:01:38.760
For this command to succeed,

41
00:01:38.760 --> 00:01:41.610
you must have Node.js installed on your system

42
00:01:41.610 --> 00:01:42.780
and you can simply install

43
00:01:42.780 --> 00:01:45.480
the latest version from nodejs.org

44
00:01:45.480 --> 00:01:47.013
if you wanna follow along.

45
00:01:48.180 --> 00:01:50.460
That will unlock the npm command

46
00:01:50.460 --> 00:01:53.700
and you will be able to run npm init -y.

47
00:01:53.700 --> 00:01:55.890
And this is important because as our next step,

48
00:01:55.890 --> 00:01:58.590
we're going to install some specific dependencies

49
00:01:58.590 --> 00:02:02.310
that we can use in our JavaScript actions.

50
00:02:02.310 --> 00:02:07.310
And these dependencies are the @actions/core,

51
00:02:07.807 --> 00:02:10.740
@actions/github,

52
00:02:10.740 --> 00:02:14.463
and @actions/exec dependencies.

53
00:02:15.480 --> 00:02:18.834
These dependencies are actually all part

54
00:02:18.834 --> 00:02:23.550
of the Actions toolkit provided by GitHub Actions,

55
00:02:23.550 --> 00:02:27.390
an official set of JavaScript packages you can use

56
00:02:27.390 --> 00:02:29.463
in your JavaScript actions.

57
00:02:30.450 --> 00:02:33.180
These are various packages that can be installed

58
00:02:33.180 --> 00:02:36.210
that provide various pieces of functionality

59
00:02:36.210 --> 00:02:40.860
that can be used in your own JavaScript actions.

60
00:02:40.860 --> 00:02:43.890
That's why I'm installing these three packages

61
00:02:43.890 --> 00:02:46.020
into this action folder here

62
00:02:46.020 --> 00:02:49.383
by running npm install inside of that action folder.

63
00:02:50.310 --> 00:02:53.940
And this will now add these actions as entries

64
00:02:53.940 --> 00:02:55.830
in my package.json file,

65
00:02:55.830 --> 00:02:59.010
which manages the dependencies of this project.

66
00:02:59.010 --> 00:03:01.530
And it adds the node_modules folder here,

67
00:03:01.530 --> 00:03:03.933
which contains the actual package code.

68
00:03:04.770 --> 00:03:09.090
And now in main.js, we can import those packages

69
00:03:09.090 --> 00:03:12.640
with the specific import syntax by Node.js

70
00:03:13.530 --> 00:03:17.373
by, for example, importing the core package, like this.

71
00:03:18.420 --> 00:03:23.130
And that can be repeated for the github package

72
00:03:23.130 --> 00:03:25.893
and the exec package.

73
00:03:26.760 --> 00:03:29.490
Now, we don't need the exec package yet

74
00:03:29.490 --> 00:03:31.890
and we'll also dive into the github package

75
00:03:31.890 --> 00:03:33.030
a little bit later

76
00:03:33.030 --> 00:03:35.400
but the core package gives us access

77
00:03:35.400 --> 00:03:38.190
to various utility methods and features

78
00:03:38.190 --> 00:03:41.013
that we can use in our JavaScript action code.

79
00:03:41.940 --> 00:03:44.850
For example, it has the notice method,

80
00:03:44.850 --> 00:03:46.857
which we can use to log a message

81
00:03:46.857 --> 00:03:49.713
to the GitHub Actions workflow log.

82
00:03:50.790 --> 00:03:52.590
For example here, we could say Hello

83
00:03:52.590 --> 00:03:57.590
from my custom JavaScript Action!

84
00:03:57.720 --> 00:04:00.750
And this will print this message to the log.

85
00:04:00.750 --> 00:04:03.693
And right now, that's actually the only thing I wanna do.

86
00:04:04.590 --> 00:04:07.470
With that done, we can use this custom action

87
00:04:07.470 --> 00:04:09.577
in our workflow just as we used

88
00:04:09.577 --> 00:04:12.450
the other custom action before.

89
00:04:12.450 --> 00:04:15.150
And here I'll add a brand new job

90
00:04:15.150 --> 00:04:18.510
called information on the same level as deploy

91
00:04:18.510 --> 00:04:20.880
and build and test, of course.

92
00:04:20.880 --> 00:04:24.030
And this job does not depend on the other jobs.

93
00:04:24.030 --> 00:04:26.520
It should run in parallel instead,

94
00:04:26.520 --> 00:04:29.430
still on ubuntu-latest though.

95
00:04:29.430 --> 00:04:32.550
And then here I'll just add one single step,

96
00:04:32.550 --> 00:04:35.790
which I'll name run custom action,

97
00:04:35.790 --> 00:04:40.650
and here I use the uses keyword to use my custom action.

98
00:04:40.650 --> 00:04:43.680
And just as before, we must grab the path

99
00:04:43.680 --> 00:04:45.540
to the action that should be used,

100
00:04:45.540 --> 00:04:49.800
which in this case is, of course, .github/actions/

101
00:04:49.800 --> 00:04:53.193
and then the name of this folder here.

102
00:04:54.180 --> 00:04:56.430
And that will now use this custom action

103
00:04:56.430 --> 00:04:59.280
that should trigger this main.js file

104
00:04:59.280 --> 00:05:01.593
and should therefore log this message.

105
00:05:03.060 --> 00:05:06.630
Now back here in the root project folder,

106
00:05:06.630 --> 00:05:10.080
we can add our files and stage them

107
00:05:10.080 --> 00:05:11.530
and create a new commit,

108
00:05:11.530 --> 00:05:16.530
added first custom js action.

109
00:05:17.010 --> 00:05:18.213
And push this.

110
00:05:19.110 --> 00:05:21.840
And what's really important before I push this

111
00:05:21.840 --> 00:05:24.210
is that here this node_modules folder

112
00:05:24.210 --> 00:05:25.803
is not ignored.

113
00:05:26.670 --> 00:05:29.310
If I had such a node_modules folder

114
00:05:29.310 --> 00:05:30.900
on my root project level,

115
00:05:30.900 --> 00:05:35.400
it would be ignored thanks to this gitignore line

116
00:05:35.400 --> 00:05:37.830
but the nested node_modules folder here

117
00:05:37.830 --> 00:05:41.760
won't be ignored because your custom JavaScript actions

118
00:05:41.760 --> 00:05:44.580
must include all the code and all the dependencies

119
00:05:44.580 --> 00:05:48.330
that are required to run this action successfully.

120
00:05:48.330 --> 00:05:50.820
GitHub Actions will not download

121
00:05:50.820 --> 00:05:52.470
and install dependencies

122
00:05:52.470 --> 00:05:55.620
when it encounters a custom JavaScript action.

123
00:05:55.620 --> 00:05:58.080
Instead it expects that all the code is available

124
00:05:58.080 --> 00:06:01.020
that's needed to run this custom JavaScript code

125
00:06:01.020 --> 00:06:04.530
and that includes the code for third-party actions.

126
00:06:04.530 --> 00:06:06.450
That's why this is also committed

127
00:06:06.450 --> 00:06:09.060
so that this package code is available

128
00:06:09.060 --> 00:06:10.953
when it's needed right away.

129
00:06:12.210 --> 00:06:15.300
And with that, I'll push this to GitHub

130
00:06:15.300 --> 00:06:18.540
and there a new workflow run is started.

131
00:06:18.540 --> 00:06:21.720
And here in the information job,

132
00:06:21.720 --> 00:06:26.160
we should see our custom action being executed

133
00:06:26.160 --> 00:06:28.410
and I get an error.

134
00:06:28.410 --> 00:06:32.490
I get an error that it can't find action.yml.

135
00:06:32.490 --> 00:06:33.340
Now, why is that?

136
00:06:34.350 --> 00:06:36.810
This is an error you can sometimes get

137
00:06:36.810 --> 00:06:38.820
when you're building custom actions.

138
00:06:38.820 --> 00:06:40.533
It's quite common to run into.

139
00:06:41.520 --> 00:06:43.620
And why are we getting this error?

140
00:06:43.620 --> 00:06:47.190
I mean, we clearly have a action.yml file here

141
00:06:47.190 --> 00:06:49.500
for this custom action.

142
00:06:49.500 --> 00:06:51.300
Well, yes, we have the file

143
00:06:51.300 --> 00:06:53.490
but in that job

144
00:06:53.490 --> 00:06:56.010
where I used a custom action,

145
00:06:56.010 --> 00:06:59.490
I only have that custom action step.

146
00:06:59.490 --> 00:07:02.340
I never check out my repository code.

147
00:07:02.340 --> 00:07:03.547
I never get the code

148
00:07:03.547 --> 00:07:07.020
that includes the custom action definition.

149
00:07:07.020 --> 00:07:10.350
And that is required in order to use the custom action

150
00:07:10.350 --> 00:07:14.490
because it's a local action stored in this repository.

151
00:07:14.490 --> 00:07:18.690
If this would be an action stored in some other repository,

152
00:07:18.690 --> 00:07:22.290
we could use it without checking out the code first.

153
00:07:22.290 --> 00:07:24.780
But here since it's part of this repository,

154
00:07:24.780 --> 00:07:27.120
we must add an extra step here

155
00:07:27.120 --> 00:07:29.160
where we do check out the code

156
00:07:29.160 --> 00:07:31.710
so that the action code is available

157
00:07:31.710 --> 00:07:33.393
before we try to use it.

158
00:07:34.350 --> 00:07:37.680
And with that, we can create a new commit.

159
00:07:37.680 --> 00:07:41.010
Check out code,

160
00:07:41.010 --> 00:07:44.160
and push this, and now this action

161
00:07:44.160 --> 00:07:46.143
should execute successfully.

162
00:07:47.040 --> 00:07:50.040
So let's evaluate that new workflow run

163
00:07:50.040 --> 00:07:51.330
that's being started here

164
00:07:51.330 --> 00:07:54.033
and let's take a look at the information job.

165
00:07:55.620 --> 00:07:58.140
And it still fails here

166
00:07:58.140 --> 00:08:01.440
but this time it's some dependency error,

167
00:08:01.440 --> 00:08:03.810
some missing module.

168
00:08:03.810 --> 00:08:07.860
And the reason for this missing module file

169
00:08:07.860 --> 00:08:10.080
is that I still have an error

170
00:08:10.080 --> 00:08:11.580
in my gitignore file.

171
00:08:11.580 --> 00:08:15.930
I'm ignoring all files that are inside of some dist folder.

172
00:08:15.930 --> 00:08:18.480
Turns out that in this node_modules folder

173
00:08:18.480 --> 00:08:20.130
in my action folder

174
00:08:20.130 --> 00:08:23.250
for this uuid dependency,

175
00:08:23.250 --> 00:08:25.623
which this error message is about,

176
00:08:26.640 --> 00:08:28.800
I ignore the dist folder

177
00:08:28.800 --> 00:08:30.900
and therefore, it's part of my local project here

178
00:08:30.900 --> 00:08:33.663
but not of the Git and GitHub repositories.

179
00:08:34.830 --> 00:08:36.929
To fix this problem, I should make sure

180
00:08:36.929 --> 00:08:40.530
that only the root-level dist folder is ignored

181
00:08:40.530 --> 00:08:44.102
by adjusting this gitignore line like this.

182
00:08:45.510 --> 00:08:47.340
And with that done,

183
00:08:47.340 --> 00:08:50.250
this dist folder here should be included

184
00:08:50.250 --> 00:08:53.253
and therefore now if we create another new commit,

185
00:08:54.420 --> 00:08:57.010
I can say added extra files

186
00:08:58.020 --> 00:09:01.440
and push these and now we're including all the files

187
00:09:01.440 --> 00:09:04.260
that are needed to run this action.

188
00:09:04.260 --> 00:09:05.520
And that's really important

189
00:09:05.520 --> 00:09:07.500
because as you see, it's a common gotcha

190
00:09:07.500 --> 00:09:09.960
to accidentally remove files

191
00:09:09.960 --> 00:09:12.030
that are needed to run the action

192
00:09:12.030 --> 00:09:13.350
but as mentioned before,

193
00:09:13.350 --> 00:09:15.720
all the code that's needed by the action

194
00:09:15.720 --> 00:09:19.590
must be part of the project repository.

195
00:09:19.590 --> 00:09:22.200
GitHub Actions will not start installing

196
00:09:22.200 --> 00:09:24.180
any missing dependencies for you.

197
00:09:24.180 --> 00:09:25.953
That's not going to happen.

198
00:09:26.880 --> 00:09:30.030
But with that, it did now execute this custom action

199
00:09:30.030 --> 00:09:33.000
and we see our log message here.

200
00:09:33.000 --> 00:09:35.940
So that's our first basic JavaScript action.

201
00:09:35.940 --> 00:09:38.190
Now let's create a more useful one,

202
00:09:38.190 --> 00:09:40.440
which really does what the name suggests:

203
00:09:40.440 --> 00:09:43.773
an action that will deploy code to AWS S3.

