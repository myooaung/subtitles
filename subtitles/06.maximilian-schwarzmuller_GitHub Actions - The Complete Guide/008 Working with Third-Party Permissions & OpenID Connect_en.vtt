WEBVTT
1
00:00:02.070 --> 00:00:04.440
Now, to come to an end in this course module,

2
00:00:04.440 --> 00:00:07.110
there's one last aspect I wanna touch on

3
00:00:07.110 --> 00:00:09.030
and that's also still related

4
00:00:09.030 --> 00:00:10.650
to permissions kind of

5
00:00:10.650 --> 00:00:15.650
but now permissions with third-party platforms or services.

6
00:00:16.440 --> 00:00:18.150
And to give you a better example,

7
00:00:18.150 --> 00:00:20.490
I'm back here in this project

8
00:00:20.490 --> 00:00:23.550
where we built our custom actions.

9
00:00:23.550 --> 00:00:26.910
And what we did in that section is we built some actions

10
00:00:26.910 --> 00:00:31.500
that would deploy static website code to AWS S3,

11
00:00:31.500 --> 00:00:34.710
which can be used for hosting static websites.

12
00:00:34.710 --> 00:00:37.470
Now, AWS is a cloud services provider.

13
00:00:37.470 --> 00:00:40.350
It's not related to GitHub or GitHub Actions.

14
00:00:40.350 --> 00:00:42.963
It's a different company, a different platform.

15
00:00:44.010 --> 00:00:47.190
Now, in order to successfully send our code

16
00:00:47.190 --> 00:00:50.430
to AWS and its S3 service,

17
00:00:50.430 --> 00:00:53.730
we had to make sure that we provide an ACCESS_KEY_ID

18
00:00:53.730 --> 00:00:56.040
and a SECRET_ACCESS_KEY.

19
00:00:56.040 --> 00:00:59.340
That was used to authenticate the request

20
00:00:59.340 --> 00:01:02.460
that sends our code files, our website files

21
00:01:02.460 --> 00:01:07.460
to AWS for this upload_file action here, for example,

22
00:01:07.590 --> 00:01:12.590
or for this command where we used the AWS CLI.

23
00:01:12.660 --> 00:01:13.830
For these commands,

24
00:01:13.830 --> 00:01:16.710
we had to set these environment variables

25
00:01:16.710 --> 00:01:18.540
and AWS would then look

26
00:01:18.540 --> 00:01:20.880
for these environment variables automatically

27
00:01:20.880 --> 00:01:24.180
and use them to authenticate the requests.

28
00:01:24.180 --> 00:01:27.180
So we're again talking about authenticating requests

29
00:01:27.180 --> 00:01:28.830
but now it's not about requests

30
00:01:28.830 --> 00:01:32.370
to GitHub's API but to the API of other companies

31
00:01:32.370 --> 00:01:34.023
and other platforms.

32
00:01:34.890 --> 00:01:36.990
Now, here we solved the problem

33
00:01:36.990 --> 00:01:40.530
by setting these environment variables to secrets

34
00:01:40.530 --> 00:01:42.369
because the ACCESS_KEY_ID

35
00:01:42.369 --> 00:01:44.190
and the SECRET_ACCESS_KEY especially

36
00:01:44.190 --> 00:01:46.500
are values that shouldn't be exposed

37
00:01:46.500 --> 00:01:48.390
and therefore is storing them in secrets

38
00:01:48.390 --> 00:01:50.640
is a good way of then assigning them

39
00:01:50.640 --> 00:01:53.010
to environment variables.

40
00:01:53.010 --> 00:01:56.100
Still, this approach could be improved.

41
00:01:56.100 --> 00:01:58.260
For one, if we're setting them

42
00:01:58.260 --> 00:02:00.180
to environment variables like this,

43
00:02:00.180 --> 00:02:03.030
we could still end up in some situation,

44
00:02:03.030 --> 00:02:05.490
for example, due to script injection

45
00:02:05.490 --> 00:02:07.980
where those values could be stolen

46
00:02:07.980 --> 00:02:11.550
by some injected code stealing these environment variables

47
00:02:11.550 --> 00:02:12.870
and their values,

48
00:02:12.870 --> 00:02:15.660
which are, of course, the secret values.

49
00:02:15.660 --> 00:02:18.480
So these values, these secret values

50
00:02:18.480 --> 00:02:21.723
are not necessarily 100% secured.

51
00:02:22.590 --> 00:02:26.010
In addition, we, of course, had to create these values

52
00:02:26.010 --> 00:02:29.070
and manually set them up in our repository,

53
00:02:29.070 --> 00:02:31.500
and that is a step we would have to repeat

54
00:02:31.500 --> 00:02:35.250
for all AWS accounts and all GitHub repositories

55
00:02:35.250 --> 00:02:37.500
where we had a similar workflow.

56
00:02:37.500 --> 00:02:40.233
So it is some extra work that must be done.

57
00:02:41.280 --> 00:02:44.010
Another problem is that these keys

58
00:02:44.010 --> 00:02:47.610
in AWS's case then grant full access

59
00:02:47.610 --> 00:02:51.810
to basically all AWS services.

60
00:02:51.810 --> 00:02:54.120
Here we're only using this access

61
00:02:54.120 --> 00:02:57.300
to upload some code by using the CLI

62
00:02:57.300 --> 00:02:59.370
or the upload_file command.

63
00:02:59.370 --> 00:03:03.240
We're only using it to upload some code to S3 specifically

64
00:03:03.240 --> 00:03:06.450
but theoretically, these keys here

65
00:03:06.450 --> 00:03:08.850
would grant us unlimited access,

66
00:03:08.850 --> 00:03:11.070
and that might be a bit more access

67
00:03:11.070 --> 00:03:13.230
than we actually wanna grant.

68
00:03:13.230 --> 00:03:15.810
Especially if you're working in a big company,

69
00:03:15.810 --> 00:03:18.926
your cloud administrators might be hesitant

70
00:03:18.926 --> 00:03:21.930
to give you keys that come with lots

71
00:03:21.930 --> 00:03:23.850
of permissions attached to them.

72
00:03:23.850 --> 00:03:26.070
So that's another problem.

73
00:03:26.070 --> 00:03:28.410
And because of all these problems,

74
00:03:28.410 --> 00:03:30.330
there is a better solution

75
00:03:30.330 --> 00:03:34.860
for authenticating with third-party platforms like AWS

76
00:03:34.860 --> 00:03:37.890
but it's not just about AWS.

77
00:03:37.890 --> 00:03:41.070
We can use an approach called OpenID Connect

78
00:03:41.070 --> 00:03:43.530
to dynamically get permission

79
00:03:43.530 --> 00:03:45.510
for exactly what we need to do

80
00:03:45.510 --> 00:03:48.603
from AWS when we need to do that.

81
00:03:49.530 --> 00:03:52.050
Now, this OpenID Connect approach

82
00:03:52.050 --> 00:03:53.820
is described in greater detail

83
00:03:53.820 --> 00:03:55.860
on GitHub's documentation pages

84
00:03:55.860 --> 00:03:59.370
and they also provide examples for using this approach

85
00:03:59.370 --> 00:04:02.220
with AWS but also other services

86
00:04:02.220 --> 00:04:06.180
like Azure, Google Cloud, and other popular services.

87
00:04:06.180 --> 00:04:09.903
But any third-party platform can support this approach.

88
00:04:10.890 --> 00:04:14.370
The idea simply is that your GitHub Action workflow

89
00:04:14.370 --> 00:04:17.339
actually dynamically requests a permission

90
00:04:17.339 --> 00:04:21.360
from the third-party provider from AWS, for example,

91
00:04:21.360 --> 00:04:24.120
and then that permission is granted if everything

92
00:04:24.120 --> 00:04:25.710
has been set up correctly

93
00:04:25.710 --> 00:04:28.440
but it's only valid for a short amount of time

94
00:04:28.440 --> 00:04:30.810
and it is restricted to the kind of action

95
00:04:30.810 --> 00:04:32.070
that must be performed

96
00:04:32.070 --> 00:04:35.370
and doesn't grant any additional permissions.

97
00:04:35.370 --> 00:04:38.700
So permissions are requested by the workflow dynamically

98
00:04:38.700 --> 00:04:39.720
when they're needed.

99
00:04:39.720 --> 00:04:41.400
That's the idea.

100
00:04:41.400 --> 00:04:44.730
Now, I'll show you how to use this OpenID Connect approach

101
00:04:44.730 --> 00:04:46.710
at the example of AWS

102
00:04:46.710 --> 00:04:49.590
but as mentioned, you could use it with other platforms

103
00:04:49.590 --> 00:04:51.393
and service providers as well.

