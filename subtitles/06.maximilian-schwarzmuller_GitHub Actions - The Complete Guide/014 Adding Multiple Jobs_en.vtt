WEBVTT
1
00:00:02.160 --> 00:00:03.900
Okay, so that's how we can deal

2
00:00:03.900 --> 00:00:05.939
with failing tests.

3
00:00:05.939 --> 00:00:09.300
Now I wanna move on to something we haven't done before.

4
00:00:09.300 --> 00:00:13.980
I wanna add a second job to my Workflow here

5
00:00:13.980 --> 00:00:16.710
because as mentioned earlier in the course,

6
00:00:16.710 --> 00:00:20.040
your workflows that are part of your repositories

7
00:00:20.040 --> 00:00:23.100
can have multiple jobs inside of them

8
00:00:23.100 --> 00:00:25.020
and then they have these different steps

9
00:00:25.020 --> 00:00:26.310
in the different jobs.

10
00:00:26.310 --> 00:00:28.260
But having multiple jobs

11
00:00:28.260 --> 00:00:30.420
in a Workflow is definitely something

12
00:00:30.420 --> 00:00:32.549
that's also quite common to have.

13
00:00:32.549 --> 00:00:35.220
It simply depends on the goal of your Workflow

14
00:00:35.220 --> 00:00:38.040
if you need one or multiple jobs.

15
00:00:38.040 --> 00:00:39.270
And here we could say

16
00:00:39.270 --> 00:00:42.630
that maybe this Workflow here should not just be

17
00:00:42.630 --> 00:00:44.730
about testing this project,

18
00:00:44.730 --> 00:00:48.450
but it should eventually also deploy that code,

19
00:00:48.450 --> 00:00:51.570
upload it to some hosting server.

20
00:00:51.570 --> 00:00:54.330
Here I have no hosting server

21
00:00:54.330 --> 00:00:57.393
but we can still simulate that it does that.

22
00:00:58.770 --> 00:01:02.040
Therefore, I'll rename this file to deployment,

23
00:01:02.040 --> 00:01:03.960
since that seems to be more fitting.

24
00:01:03.960 --> 00:01:05.519
You don't have to rename it

25
00:01:05.519 --> 00:01:07.746
but I wanna have a descriptive file name

26
00:01:07.746 --> 00:01:11.640
and I will rename my Workflow

27
00:01:11.640 --> 00:01:13.890
to Deploy Project.

28
00:01:13.890 --> 00:01:16.140
Now it should still execute on push

29
00:01:16.140 --> 00:01:18.930
but now testing is just one job.

30
00:01:18.930 --> 00:01:21.120
Instead, now I'll add a second job,

31
00:01:21.120 --> 00:01:23.613
which I'll name deploy.

32
00:01:24.570 --> 00:01:26.160
Now what's really important is

33
00:01:26.160 --> 00:01:28.410
that these job identifiers are

34
00:01:28.410 --> 00:01:32.070
on the same level regarding their indentation.

35
00:01:32.070 --> 00:01:34.860
So here I indented once for test.

36
00:01:34.860 --> 00:01:38.793
Here we have one level of indentation for deploy.

37
00:01:39.630 --> 00:01:42.060
This identifier here is up to you

38
00:01:42.060 --> 00:01:43.920
just as test is up to you.

39
00:01:43.920 --> 00:01:46.770
You can name this testing or whatever you want

40
00:01:46.770 --> 00:01:51.000
but here I chose test and now deploy.

41
00:01:51.000 --> 00:01:53.790
And now here we also need a runner

42
00:01:53.790 --> 00:01:54.870
that's the same.

43
00:01:54.870 --> 00:01:56.790
Every job has its own runner.

44
00:01:56.790 --> 00:01:58.290
And of course, different jobs

45
00:01:58.290 --> 00:01:59.820
can have different runners,

46
00:01:59.820 --> 00:02:01.983
even if they're in the same Workflow.

47
00:02:02.910 --> 00:02:06.660
Nonetheless, here, I'll stick to ubuntu-latest

48
00:02:06.660 --> 00:02:08.643
and then I can add my steps.

49
00:02:09.660 --> 00:02:11.910
Now many steps will be the same now.

50
00:02:11.910 --> 00:02:13.650
I want to get my code,

51
00:02:13.650 --> 00:02:16.950
I want to install this specific node js version

52
00:02:16.950 --> 00:02:19.830
and I want to install my dependencies.

53
00:02:19.830 --> 00:02:23.130
Therefore, I will actually copy these steps

54
00:02:23.130 --> 00:02:24.810
and paste them down here.

55
00:02:24.810 --> 00:02:26.610
Just make sure you don't accidentally

56
00:02:26.610 --> 00:02:29.340
break the indentation because in yml files,

57
00:02:29.340 --> 00:02:31.860
the indentation is extremely important.

58
00:02:31.860 --> 00:02:33.510
You should have that same structure

59
00:02:33.510 --> 00:02:35.520
as you see it here with that list

60
00:02:35.520 --> 00:02:37.980
of steps indented once below steps

61
00:02:37.980 --> 00:02:41.823
and steps and runs on indented once below deploy.

62
00:02:43.140 --> 00:02:44.580
So now we have these steps,

63
00:02:44.580 --> 00:02:46.440
but now in the next steps,

64
00:02:46.440 --> 00:02:48.270
we won't run our tests,

65
00:02:48.270 --> 00:02:51.090
but instead build the project.

66
00:02:51.090 --> 00:02:53.790
Now many projects must be built

67
00:02:53.790 --> 00:02:55.500
before they can be deployed.

68
00:02:55.500 --> 00:02:58.170
For example, a mobile app must be built

69
00:02:58.170 --> 00:03:01.350
and this website project also must be built

70
00:03:01.350 --> 00:03:03.810
because the code you write during development

71
00:03:03.810 --> 00:03:05.460
will actually not be the code

72
00:03:05.460 --> 00:03:08.640
that's later served to your visitors.

73
00:03:08.640 --> 00:03:12.300
Therefore, I will add a build step

74
00:03:12.300 --> 00:03:14.940
and here I'll run a simple command in the shell.

75
00:03:14.940 --> 00:03:17.643
And that's this npm run build command.

76
00:03:18.510 --> 00:03:21.720
This will target this build script,

77
00:03:21.720 --> 00:03:24.240
which is part of package.json,

78
00:03:24.240 --> 00:03:26.460
and by running npm run build,

79
00:03:26.460 --> 00:03:28.470
this will make sure that this project,

80
00:03:28.470 --> 00:03:30.063
this website is built.

81
00:03:31.560 --> 00:03:34.170
Now thereafter, we would typically want

82
00:03:34.170 --> 00:03:37.020
to upload it to some web host,

83
00:03:37.020 --> 00:03:39.390
to some server that serves the website.

84
00:03:39.390 --> 00:03:40.680
But here for this example,

85
00:03:40.680 --> 00:03:42.993
I have no such hosting provider.

86
00:03:43.860 --> 00:03:45.540
Therefore, what I'll do here is

87
00:03:45.540 --> 00:03:47.970
I will add a step named Deploy

88
00:03:47.970 --> 00:03:50.190
but I'll just echo something here.

89
00:03:50.190 --> 00:03:54.153
I'll just echo deploying like this.

90
00:03:55.770 --> 00:03:56.940
With that however,

91
00:03:56.940 --> 00:04:00.930
we added a second job to this one Workflow

92
00:04:00.930 --> 00:04:03.210
which we have with its own steps

93
00:04:03.210 --> 00:04:05.940
where some steps are the same as before

94
00:04:05.940 --> 00:04:08.883
but where also some steps are brand new.

95
00:04:10.080 --> 00:04:11.610
Now, what's important to note is

96
00:04:11.610 --> 00:04:15.480
that these two jobs test and deploy will run

97
00:04:15.480 --> 00:04:18.660
in parallel and we'll see this in action

98
00:04:18.660 --> 00:04:20.579
as soon as we create a commit here

99
00:04:20.579 --> 00:04:22.170
and push this to get up,

100
00:04:22.170 --> 00:04:23.820
which is what I'll do next,

101
00:04:23.820 --> 00:04:26.190
I'll stage my changed files,

102
00:04:26.190 --> 00:04:28.680
in this case, the deployment yml file,

103
00:04:28.680 --> 00:04:32.730
which was previously named test.yml,

104
00:04:32.730 --> 00:04:36.123
and I'll create a new commit where I say,

105
00:04:37.410 --> 00:04:42.393
renamed Workflow added deploy job.

106
00:04:43.710 --> 00:04:46.410
And with this commit added and created,

107
00:04:46.410 --> 00:04:50.040
we can now push this updated code to "GitHub".

108
00:04:50.040 --> 00:04:52.023
And there we'll now see a difference.

109
00:04:52.950 --> 00:04:54.720
The code of course changed,

110
00:04:54.720 --> 00:04:56.460
but under actions we'll see

111
00:04:56.460 --> 00:04:58.665
that the Workflow name changed.

112
00:04:58.665 --> 00:05:01.410
And in this run for this Workflow,

113
00:05:01.410 --> 00:05:02.790
because of this push,

114
00:05:02.790 --> 00:05:06.660
we now see two jobs down there

115
00:05:06.660 --> 00:05:08.220
which should make a lot of sense

116
00:05:08.220 --> 00:05:09.963
because we now have two jobs.

117
00:05:11.010 --> 00:05:12.870
They will run in parallel

118
00:05:12.870 --> 00:05:14.280
which we will see as soon

119
00:05:14.280 --> 00:05:17.700
as this job execution starts.

120
00:05:17.700 --> 00:05:19.320
Now, here actually it looks

121
00:05:19.320 --> 00:05:20.430
like it started already

122
00:05:20.430 --> 00:05:22.380
and just didn't update the UI,

123
00:05:22.380 --> 00:05:25.200
but they ran simultaneously.

124
00:05:25.200 --> 00:05:28.710
As you can also tell by the total duration here

125
00:05:28.710 --> 00:05:31.920
which is not the sum of the individual durations.

126
00:05:31.920 --> 00:05:34.650
this proves that they ran in parallel

127
00:05:34.650 --> 00:05:37.740
and the difference simply is some extra setup time

128
00:05:37.740 --> 00:05:39.987
that was taken by "GitHub Actions".

129
00:05:40.980 --> 00:05:44.010
So now both jobs ran in parallel.

130
00:05:44.010 --> 00:05:47.700
Both jobs ran successfully, as you can tell

131
00:05:47.700 --> 00:05:50.310
because all steps finished successfully

132
00:05:50.310 --> 00:05:53.700
and that's how you can execute multiple jobs.

133
00:05:53.700 --> 00:05:55.980
But of course, for some jobs

134
00:05:55.980 --> 00:05:58.350
it also makes sense to run them

135
00:05:58.350 --> 00:06:01.413
after each other instead of in parallel.

