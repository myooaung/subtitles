WEBVTT
1
00:00:02.160 --> 00:00:07.140
So we did now push our main branch to GitHub.

2
00:00:07.140 --> 00:00:11.760
Now let's say we are developing a new feature or a bug fix

3
00:00:11.760 --> 00:00:15.213
and therefore we are creating a second branch.

4
00:00:16.079 --> 00:00:19.200
Let's say what we want to do here

5
00:00:19.200 --> 00:00:23.070
is we want to group these paragraphs into a section.

6
00:00:23.070 --> 00:00:25.170
It's of course a trivial change

7
00:00:25.170 --> 00:00:27.630
and wouldn't require a separate branch,

8
00:00:27.630 --> 00:00:29.700
but it's just a demo.

9
00:00:29.700 --> 00:00:31.980
So here I want to create a separate branch

10
00:00:31.980 --> 00:00:34.980
and therefore, just as you learned it before,

11
00:00:34.980 --> 00:00:38.520
we can create such a branch with the git branch command.

12
00:00:38.520 --> 00:00:41.790
Or if you want to checkout that branch immediately

13
00:00:41.790 --> 00:00:44.340
by using git checkout -b

14
00:00:44.340 --> 00:00:46.263
and then the name of that new branch.

15
00:00:47.160 --> 00:00:49.230
And here I will simply name it

16
00:00:49.230 --> 00:00:54.230
feat, short for feature, section.

17
00:00:54.360 --> 00:00:56.580
If I hit Enter, this branch is created

18
00:00:56.580 --> 00:00:58.950
and we automatically switched to it,

19
00:00:58.950 --> 00:01:01.080
as it's also saying here.

20
00:01:01.080 --> 00:01:04.290
And now we can make that change that should be made,

21
00:01:04.290 --> 00:01:08.370
which in my case here simply means that I add this section

22
00:01:08.370 --> 00:01:12.030
and I wrap this around these two paragraphs like this.

23
00:01:12.030 --> 00:01:14.040
So that's my change now.

24
00:01:14.040 --> 00:01:18.000
Again, a trivial change, but good enough for this demo.

25
00:01:18.000 --> 00:01:20.220
Now after saving this file,

26
00:01:20.220 --> 00:01:22.170
I want to stage this change

27
00:01:22.170 --> 00:01:25.020
and I want to create a new commit, a new snapshot.

28
00:01:25.020 --> 00:01:27.660
But I want do that in this separate branch

29
00:01:27.660 --> 00:01:30.840
because maybe the feature isn't fully finished yet,

30
00:01:30.840 --> 00:01:33.720
or for other reasons, we're not quite ready

31
00:01:33.720 --> 00:01:35.613
to merge it into the main branch.

32
00:01:36.630 --> 00:01:38.970
Therefore, again in the terminal,

33
00:01:38.970 --> 00:01:43.620
I will stage all files or just the index html file.

34
00:01:43.620 --> 00:01:46.710
Does not matter, since it's the only file that's changed.

35
00:01:46.710 --> 00:01:48.573
And then I create my commit,

36
00:01:49.740 --> 00:01:52.050
where I say "added section."

37
00:01:52.050 --> 00:01:54.813
That sounds like a good description for this change.

38
00:01:55.680 --> 00:01:58.530
So now we added this commit to this branch

39
00:01:58.530 --> 00:02:00.630
to the feat-section branch.

40
00:02:00.630 --> 00:02:03.390
And now I also want to push this branch

41
00:02:03.390 --> 00:02:05.040
to my remote repository

42
00:02:05.040 --> 00:02:08.460
because I want to have that code on GitHub as well

43
00:02:08.460 --> 00:02:10.470
so that it's backed up.

44
00:02:10.470 --> 00:02:13.893
I could work on it from different machines and so on.

45
00:02:14.820 --> 00:02:19.650
Therefore, what I'll do is I will git push to my origin,

46
00:02:19.650 --> 00:02:22.470
so to this remote GitHub repository,

47
00:02:22.470 --> 00:02:25.350
and I'll push this feat-section branch.

48
00:02:25.350 --> 00:02:27.930
It's the same command as we used it before.

49
00:02:27.930 --> 00:02:30.450
And alternatively, we could also use this

50
00:02:30.450 --> 00:02:32.940
set upstream approach from before,

51
00:02:32.940 --> 00:02:34.620
which we used for the main branch,

52
00:02:34.620 --> 00:02:36.960
for this feat-section branch as well

53
00:02:36.960 --> 00:02:40.230
so that in the future, all we have to do is run git push,

54
00:02:40.230 --> 00:02:43.050
whilst being in that branch locally.

55
00:02:43.050 --> 00:02:45.960
Here I'll use this slightly longer form though,

56
00:02:45.960 --> 00:02:49.410
confirm this, and this now pushes this code

57
00:02:49.410 --> 00:02:52.170
to this remote repository.

58
00:02:52.170 --> 00:02:54.450
Now on this remote repository,

59
00:02:54.450 --> 00:02:57.450
we should immediately see a little message here.

60
00:02:57.450 --> 00:02:59.760
And if you reload this page,

61
00:02:59.760 --> 00:03:04.110
this dropdown here now also shows you this second branch.

62
00:03:04.110 --> 00:03:06.480
And on GitHub, you can then also switch

63
00:03:06.480 --> 00:03:07.830
between these branches.

64
00:03:07.830 --> 00:03:10.050
We can, for example, select this branch

65
00:03:10.050 --> 00:03:11.730
and if we have it selected,

66
00:03:11.730 --> 00:03:14.550
in this code which we can browse on GitHub,

67
00:03:14.550 --> 00:03:17.793
we see this change with the section being added.

68
00:03:18.900 --> 00:03:22.590
If on the other hand, I've switched back to the main branch,

69
00:03:22.590 --> 00:03:25.170
we see that for the index html file,

70
00:03:25.170 --> 00:03:27.600
this section is not there.

71
00:03:27.600 --> 00:03:29.430
And that's by the way, all that's important.

72
00:03:29.430 --> 00:03:31.650
On GitHub, you can browse this code.

73
00:03:31.650 --> 00:03:34.740
You can even edit this code from GitHub

74
00:03:34.740 --> 00:03:37.320
and merge it with your other code from there.

75
00:03:37.320 --> 00:03:40.070
We're not going to do this here, but you could do that.

76
00:03:41.190 --> 00:03:44.880
You might also notice this Compare and pull request button,

77
00:03:44.880 --> 00:03:45.840
which I have here,

78
00:03:45.840 --> 00:03:48.840
and I'll get back to pull requests a little bit later

79
00:03:48.840 --> 00:03:51.120
because this is a key GitHub feature,

80
00:03:51.120 --> 00:03:53.790
but I'll get back to it in the future.

81
00:03:53.790 --> 00:03:57.420
So now I have my branch here on GitHub.

82
00:03:57.420 --> 00:04:01.410
If I am now ready to merge this feat-section branch

83
00:04:01.410 --> 00:04:05.130
into my main branch, we could do this from inside GitHub,

84
00:04:05.130 --> 00:04:07.350
but I will do it locally here

85
00:04:07.350 --> 00:04:09.970
by again checking out my main branch

86
00:04:11.130 --> 00:04:14.823
and then running git merge feat-section.

87
00:04:15.930 --> 00:04:19.110
Now this is merged automatically again

88
00:04:19.110 --> 00:04:21.390
and we get a little summary here.

89
00:04:21.390 --> 00:04:23.370
And now of course, I can run git push

90
00:04:23.370 --> 00:04:26.250
to push this updated main branch,

91
00:04:26.250 --> 00:04:29.880
which has these merged changes, to GitHub.

92
00:04:29.880 --> 00:04:33.210
Here, by the way, no separate commit was created

93
00:04:33.210 --> 00:04:37.230
and I didn't have to confirm or enter any commit message

94
00:04:37.230 --> 00:04:38.850
after performing the merge

95
00:04:38.850 --> 00:04:41.490
because Git was able to perform this merge

96
00:04:41.490 --> 00:04:44.670
by simply appending this new commit to the other commits

97
00:04:44.670 --> 00:04:46.740
instead of creating a new commit.

98
00:04:46.740 --> 00:04:49.650
It simply depends on the complexity of changes you have

99
00:04:49.650 --> 00:04:51.600
and whether there are any clashes

100
00:04:51.600 --> 00:04:53.370
that must be resolved by Git,

101
00:04:53.370 --> 00:04:56.520
whether you have to create a separate commit when merging,

102
00:04:56.520 --> 00:04:59.940
or if a commit from another branch can simply be appended

103
00:04:59.940 --> 00:05:01.640
to the commits of the main branch.

104
00:05:02.730 --> 00:05:04.770
So now I performed this merge

105
00:05:04.770 --> 00:05:07.140
and I pushed my updated main branch

106
00:05:07.140 --> 00:05:08.250
and therefore of course,

107
00:05:08.250 --> 00:05:11.910
this is also reflected on GitHub here in the main branch.

108
00:05:11.910 --> 00:05:15.543
If I inspect index html, I also see this section here.

109
00:05:16.440 --> 00:05:20.280
But that's how we can also push multiple branches to GitHub.

110
00:05:20.280 --> 00:05:23.040
By the way, if you then have a branch on GitHub

111
00:05:23.040 --> 00:05:26.490
which you don't need anymore, like this feat-section branch,

112
00:05:26.490 --> 00:05:28.260
you can also delete it from there

113
00:05:28.260 --> 00:05:30.780
by clicking on View all branches here.

114
00:05:30.780 --> 00:05:33.960
And then there, you see this feat-section branch,

115
00:05:33.960 --> 00:05:37.950
and if you click this trash icon, it will be deleted.

116
00:05:37.950 --> 00:05:39.270
You could now also restore it,

117
00:05:39.270 --> 00:05:41.310
but now it's gone from GitHub

118
00:05:41.310 --> 00:05:44.520
because we don't need that branch there anymore.

119
00:05:44.520 --> 00:05:47.460
It still exists locally,

120
00:05:47.460 --> 00:05:49.290
as you see if you run git branch.

121
00:05:49.290 --> 00:05:51.240
But of course, there you can also delete it

122
00:05:51.240 --> 00:05:54.690
with the command I already showed you earlier in the course.

123
00:05:54.690 --> 00:05:56.313
With this command here.

124
00:05:57.390 --> 00:06:00.887
So that's how we can work with multiple branches in GitHub.

