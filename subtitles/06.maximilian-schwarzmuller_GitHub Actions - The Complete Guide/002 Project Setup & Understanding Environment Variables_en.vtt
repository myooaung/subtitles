WEBVTT
1
00:00:02.130 --> 00:00:03.870
Now for this section

2
00:00:03.870 --> 00:00:06.180
I prepared another demo project

3
00:00:06.180 --> 00:00:09.450
and this now is a different project

4
00:00:09.450 --> 00:00:12.750
than what we had in the previous course sections.

5
00:00:12.750 --> 00:00:17.520
This is a REST API built with Node and Express,

6
00:00:17.520 --> 00:00:20.460
and you don't need to understand Node and Express

7
00:00:20.460 --> 00:00:22.290
to follow along, of course.

8
00:00:22.290 --> 00:00:25.230
But what is important about this demo project,

9
00:00:25.230 --> 00:00:28.740
which you, of course, find attached to this video, is that

10
00:00:28.740 --> 00:00:33.740
in some code files, this project uses environment variables.

11
00:00:34.659 --> 00:00:39.240
For example, here, whenever you see this process.env

12
00:00:39.240 --> 00:00:41.850
thing here in this Node Express code,

13
00:00:41.850 --> 00:00:44.940
we are using environment variables.

14
00:00:44.940 --> 00:00:47.850
And that of course brings up one important question.

15
00:00:47.850 --> 00:00:51.660
What exactly are environment variables?

16
00:00:51.660 --> 00:00:54.900
Well, the idea behind environment variables is

17
00:00:54.900 --> 00:00:58.860
that in your code you may have certain variables

18
00:00:58.860 --> 00:01:02.190
or values that are dynamic.

19
00:01:02.190 --> 00:01:04.319
For example, the password that's used

20
00:01:04.319 --> 00:01:06.360
for logging into a database,

21
00:01:06.360 --> 00:01:10.001
so that's used for connecting your server to a database.

22
00:01:10.001 --> 00:01:14.190
That password is maybe not always the same.

23
00:01:14.190 --> 00:01:18.000
Instead, the concrete password value might depend

24
00:01:18.000 --> 00:01:20.490
on the environment in which your application

25
00:01:20.490 --> 00:01:22.590
or website is running.

26
00:01:22.590 --> 00:01:24.870
For example, you could have a testing

27
00:01:24.870 --> 00:01:28.410
and a production environment, and during testing

28
00:01:28.410 --> 00:01:31.438
you might be connecting to a testing database

29
00:01:31.438 --> 00:01:35.460
that has different credentials than your production database

30
00:01:35.460 --> 00:01:39.210
and they offer different password values might be needed

31
00:01:39.210 --> 00:01:41.010
for these different environments

32
00:01:41.010 --> 00:01:43.440
in which your web server is running.

33
00:01:43.440 --> 00:01:46.170
And that's not some made-up scenario.

34
00:01:46.170 --> 00:01:48.990
Instead, this is quite common.

35
00:01:48.990 --> 00:01:51.810
Back in this demo project which I'm providing to you,

36
00:01:51.810 --> 00:01:54.510
this is the exact use case we have here.

37
00:01:54.510 --> 00:01:57.780
I got four variables here, or constants,

38
00:01:57.780 --> 00:02:00.630
which are used in this code, which actually get

39
00:02:00.630 --> 00:02:04.710
dynamic values from environment variables.

40
00:02:04.710 --> 00:02:09.030
These all-caps names here are the environment variables,

41
00:02:09.030 --> 00:02:11.220
though the name is totally up to you.

42
00:02:11.220 --> 00:02:14.220
It doesn't have to be all caps, but that is a convention

43
00:02:14.220 --> 00:02:18.166
you often see in different languages and environments.

44
00:02:18.166 --> 00:02:21.990
And the idea is that this connection string here,

45
00:02:21.990 --> 00:02:24.838
which is used for establishing a connection

46
00:02:24.838 --> 00:02:28.380
from that backend application here to the database,

47
00:02:28.380 --> 00:02:32.400
the idea is that that string is constructed dynamically,

48
00:02:32.400 --> 00:02:35.160
and that we use maybe a different username,

49
00:02:35.160 --> 00:02:39.660
a different password, and even a different database address

50
00:02:39.660 --> 00:02:41.460
for different environments

51
00:02:41.460 --> 00:02:44.370
in which this application might be running.

52
00:02:44.370 --> 00:02:47.250
So that we can, for example, run our tests

53
00:02:47.250 --> 00:02:49.140
against some testing database

54
00:02:49.140 --> 00:02:52.470
and we don't accidentally change production data.

55
00:02:52.470 --> 00:02:56.850
We don't actually work with real user data during our tests.

56
00:02:56.850 --> 00:03:00.030
That's the idea behind environment variables.

57
00:03:00.030 --> 00:03:02.970
And this application here uses environment variables

58
00:03:02.970 --> 00:03:07.950
in this database.js file, but also in the app.js file here

59
00:03:07.950 --> 00:03:11.160
for configuring which port will be used

60
00:03:11.160 --> 00:03:14.160
for listening for incoming requests.

61
00:03:14.160 --> 00:03:17.190
And also in this test config file here

62
00:03:17.190 --> 00:03:19.170
where we also specify this port

63
00:03:19.170 --> 00:03:24.170
which tells the testing tool where to find our server.

64
00:03:24.660 --> 00:03:26.520
Because here I'm using Playwright

65
00:03:26.520 --> 00:03:30.660
which is a end-to-end testing tool, which is used

66
00:03:30.660 --> 00:03:34.964
for running some automated tests against this API here.

67
00:03:34.964 --> 00:03:37.530
So that's what's going on in this project,

68
00:03:37.530 --> 00:03:40.890
and the key thing here, also for this section,

69
00:03:40.890 --> 00:03:43.320
are these environment variables

70
00:03:43.320 --> 00:03:46.410
because in this project you also find an example

71
00:03:46.410 --> 00:03:49.500
of GitHub Actions Workflow, which is not finished yet.

72
00:03:49.500 --> 00:03:53.520
And this Workflow runs our tests, for example.

73
00:03:53.520 --> 00:03:57.180
It runs these automated tests, and of course,

74
00:03:57.180 --> 00:04:01.410
that means that the application server must be started

75
00:04:01.410 --> 00:04:05.220
so that the tests can then work with that server.

76
00:04:05.220 --> 00:04:07.530
Now, since that server must be started,

77
00:04:07.530 --> 00:04:10.290
values for the database address

78
00:04:10.290 --> 00:04:13.170
and the database credentials must be provided.

79
00:04:13.170 --> 00:04:15.335
And those values must be provided

80
00:04:15.335 --> 00:04:19.560
in our Workflow whilst our Workflow is running.

81
00:04:19.560 --> 00:04:23.790
So we need some way of providing environment variable values

82
00:04:23.790 --> 00:04:27.000
as part of our GitHub Actions Workflow here.

83
00:04:27.000 --> 00:04:29.460
And that is something you will definitely encounter sooner

84
00:04:29.460 --> 00:04:31.920
or later when working with GitHub Actions

85
00:04:31.920 --> 00:04:35.940
or any other CICD provider that you need to provide

86
00:04:35.940 --> 00:04:38.880
environment variable values, and that's therefore

87
00:04:38.880 --> 00:04:40.880
what we'll explore in the next lectures.

