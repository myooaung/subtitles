WEBVTT
1
00:00:02.040 --> 00:00:04.650
So, that's a first custom action.

2
00:00:04.650 --> 00:00:07.980
It's a pretty straightforward and simple custom action,

3
00:00:07.980 --> 00:00:10.053
but nonetheless, very useful.

4
00:00:11.070 --> 00:00:13.530
Now, sometimes you also want

5
00:00:13.530 --> 00:00:16.200
to make your actions configurable.

6
00:00:16.200 --> 00:00:19.440
You wanna accept inputs in your actions so that

7
00:00:19.440 --> 00:00:21.180
in the Workflow definition file,

8
00:00:21.180 --> 00:00:25.374
the same action can be used with slightly different inputs.

9
00:00:25.374 --> 00:00:28.260
For example, we already see inputs here,

10
00:00:28.260 --> 00:00:30.360
for the upload artifact action,

11
00:00:30.360 --> 00:00:33.300
where we have the name and path inputs,

12
00:00:33.300 --> 00:00:36.210
where we give the artifact package, a name,

13
00:00:36.210 --> 00:00:39.243
and we defined, which artifact should be included.

14
00:00:40.110 --> 00:00:42.720
The same here, for downloading artifacts.

15
00:00:42.720 --> 00:00:45.930
I choose, which artifacts to download by name,

16
00:00:45.930 --> 00:00:47.730
and then I also define the path,

17
00:00:47.730 --> 00:00:51.252
where those artifact files should be downloaded to,

18
00:00:51.252 --> 00:00:53.103
on this runner machine.

19
00:00:53.970 --> 00:00:57.570
So these here, are inputs which we set on this action,

20
00:00:57.570 --> 00:00:59.550
or the upload artifact action.

21
00:00:59.550 --> 00:01:02.190
And we can also accept and use inputs

22
00:01:02.190 --> 00:01:04.200
on our own custom actions,

23
00:01:04.200 --> 00:01:06.513
no matter, which action type it is.

24
00:01:07.620 --> 00:01:10.080
Now, to use inputs on custom actions,

25
00:01:10.080 --> 00:01:12.390
you simply add the inputs key

26
00:01:12.390 --> 00:01:16.440
on the same level as you added name, description, and runs.

27
00:01:16.440 --> 00:01:17.820
And then nested below,

28
00:01:17.820 --> 00:01:21.900
inputs you, add your inputs with any names of your choice.

29
00:01:21.900 --> 00:01:23.850
For example, here, we could say that

30
00:01:23.850 --> 00:01:27.840
we wanna add an input that allows users to control

31
00:01:27.840 --> 00:01:30.900
whether dependencies should always be installed,

32
00:01:30.900 --> 00:01:34.530
no matter, whether they were cached before or not.

33
00:01:34.530 --> 00:01:36.960
So essentially, we wanna offer an input,

34
00:01:36.960 --> 00:01:40.800
that allows users of this action to turn off caching,

35
00:01:40.800 --> 00:01:41.880
for whichever reason,

36
00:01:41.880 --> 00:01:45.000
but we wanna give them the option of doing so.

37
00:01:45.000 --> 00:01:48.780
Therefore, here, I'll add a input called caching.

38
00:01:48.780 --> 00:01:51.030
This name is totally up to you.

39
00:01:51.030 --> 00:01:52.440
And then nested below that,

40
00:01:52.440 --> 00:01:54.390
we first of all add a description.

41
00:01:54.390 --> 00:01:55.740
This is now, not up to you.

42
00:01:55.740 --> 00:01:57.720
This description key must be added

43
00:01:57.720 --> 00:02:00.303
Here, you describe the input and what it does.

44
00:02:01.590 --> 00:02:02.430
And here, I'll say,

45
00:02:02.430 --> 00:02:06.003
whether to cache dependencies or not.

46
00:02:07.920 --> 00:02:11.100
As a next field, you add the required field,

47
00:02:11.100 --> 00:02:14.848
where you define, whether this input is needed or not.

48
00:02:14.848 --> 00:02:16.710
This can be set to true.

49
00:02:16.710 --> 00:02:21.090
In that case, users must provide a value in their Workflows

50
00:02:21.090 --> 00:02:22.500
when using this action.

51
00:02:22.500 --> 00:02:25.140
And if they don't, the action will fail.

52
00:02:25.140 --> 00:02:26.610
Or you set it to false,

53
00:02:26.610 --> 00:02:29.070
if it's actually, not needed.

54
00:02:29.070 --> 00:02:31.230
If you do choose, required false.

55
00:02:31.230 --> 00:02:34.290
You must make sure that your action code does not fail,

56
00:02:34.290 --> 00:02:35.640
if it's not provided.

57
00:02:35.640 --> 00:02:37.740
And you can, for example, make sure that

58
00:02:37.740 --> 00:02:39.600
your action will still work,

59
00:02:39.600 --> 00:02:41.160
by adding a default value,

60
00:02:41.160 --> 00:02:44.043
with the default key under your input name.

61
00:02:44.910 --> 00:02:48.570
This allows you to, well, specify a default value,

62
00:02:48.570 --> 00:02:51.720
like, for example, true between quotes here.

63
00:02:51.720 --> 00:02:54.704
We could then use the caching input in our steps here,

64
00:02:54.704 --> 00:02:57.360
and assume a default value of true,

65
00:02:57.360 --> 00:03:00.029
unless users specify different value,

66
00:03:00.029 --> 00:03:02.703
when using this action their Workflows.

67
00:03:03.750 --> 00:03:06.570
And now, we can use this input, for example,

68
00:03:06.570 --> 00:03:10.560
by adding the if key to the cache dependencies step,

69
00:03:10.560 --> 00:03:14.190
and then using the inputs context object,

70
00:03:14.190 --> 00:03:16.170
which is one of these context objects

71
00:03:16.170 --> 00:03:18.360
provided by GitHub Actions,

72
00:03:18.360 --> 00:03:20.536
and available in a custom action

73
00:03:20.536 --> 00:03:22.740
to reach out to these inputs

74
00:03:22.740 --> 00:03:25.890
that were received by that action.

75
00:03:25.890 --> 00:03:28.860
Here, I'm using the caching input,

76
00:03:28.860 --> 00:03:30.900
and it's caching down here,

77
00:03:30.900 --> 00:03:33.660
because it's caching up there.

78
00:03:33.660 --> 00:03:36.990
So, you have to use the same key name.

79
00:03:36.990 --> 00:03:39.930
And this gives us access to his caching key,

80
00:03:39.930 --> 00:03:42.480
and the value that's received on that input.

81
00:03:42.480 --> 00:03:46.380
And I check, whether it's equal to true between quotes.

82
00:03:46.380 --> 00:03:47.850
So, if this is true,

83
00:03:47.850 --> 00:03:49.560
if you wanna use caching,

84
00:03:49.560 --> 00:03:52.200
then this step will be executed.

85
00:03:52.200 --> 00:03:54.900
If it's set to any value, but true,

86
00:03:54.900 --> 00:03:56.070
this step here,

87
00:03:56.070 --> 00:03:59.430
will not be executed, thanks to this, if check.

88
00:03:59.430 --> 00:04:01.320
Now here, for installing dependencies,

89
00:04:01.320 --> 00:04:03.180
I already have an, iF check,

90
00:04:03.180 --> 00:04:06.030
but now, I wanna modify this check.

91
00:04:06.030 --> 00:04:08.190
I wanna add an, or condition.

92
00:04:08.190 --> 00:04:10.882
So, an additional alternative condition,

93
00:04:10.882 --> 00:04:15.882
where I check, if inputs.caching is not equal to true,

94
00:04:16.829 --> 00:04:19.470
because if this is not equal to true,

95
00:04:19.470 --> 00:04:21.300
if we don't wanna use caching,

96
00:04:21.300 --> 00:04:24.060
then this step should execute.

97
00:04:24.060 --> 00:04:26.790
That's why, I'm using, or instead of end,

98
00:04:26.790 --> 00:04:30.210
I don't want both conditions here, to be met.

99
00:04:30.210 --> 00:04:33.420
But instead, if either of the two conditions is not met,

100
00:04:33.420 --> 00:04:37.110
I wanna run this dependency installation command.

101
00:04:37.110 --> 00:04:39.570
So therefore, I'm checking for the caching input,

102
00:04:39.570 --> 00:04:41.280
like this here.

103
00:04:41.280 --> 00:04:43.350
And that's how you can add a custom input

104
00:04:43.350 --> 00:04:44.730
to your custom action.

105
00:04:44.730 --> 00:04:47.850
And of course, you can add as many other inputs

106
00:04:47.850 --> 00:04:49.530
as you want, and need.

107
00:04:49.530 --> 00:04:53.160
You can add just as many as needed by your action,

108
00:04:53.160 --> 00:04:55.770
and we'll see more inputs in action,

109
00:04:55.770 --> 00:04:57.870
in later lectures.

110
00:04:57.870 --> 00:04:59.190
With that added now,

111
00:04:59.190 --> 00:05:01.050
we could create a commit and push it,

112
00:05:01.050 --> 00:05:03.060
because this action is not required

113
00:05:03.060 --> 00:05:04.980
because we have a default.

114
00:05:04.980 --> 00:05:08.160
Therefore, this action would actually, not fail.

115
00:05:08.160 --> 00:05:10.710
But we can now, also add a different value,

116
00:05:10.710 --> 00:05:12.694
when we're using the action.

117
00:05:12.694 --> 00:05:14.310
For example, we could say,

118
00:05:14.310 --> 00:05:17.970
that we wanna use caching for testing and building,

119
00:05:17.970 --> 00:05:21.120
but for some reason, not when linting.

120
00:05:21.120 --> 00:05:21.953
To achieve this,

121
00:05:21.953 --> 00:05:23.880
we can add the, with keyword,

122
00:05:23.880 --> 00:05:28.020
just as we used it for third party actions as well.

123
00:05:28.020 --> 00:05:30.090
And then nested below with,

124
00:05:30.090 --> 00:05:34.080
we can define the inputs expected by our action here.

125
00:05:34.080 --> 00:05:36.150
So in this case, we have the caching input.

126
00:05:36.150 --> 00:05:38.370
Therefore, I add the caching key here,

127
00:05:38.370 --> 00:05:41.100
and for example, set this to false.

128
00:05:41.100 --> 00:05:44.160
And this should disable caching for this action,

129
00:05:44.160 --> 00:05:45.510
in this Job here,

130
00:05:45.510 --> 00:05:48.210
or in this step here, to be precise.

131
00:05:48.210 --> 00:05:50.973
Not in any other steps or Jobs.

132
00:05:51.930 --> 00:05:56.790
And with that, if I now create a new commit,

133
00:05:56.790 --> 00:06:00.810
added caching input,

134
00:06:00.810 --> 00:06:03.540
we should see that as we push this,

135
00:06:03.540 --> 00:06:06.240
of course, the Workflow runs again.

136
00:06:06.240 --> 00:06:08.430
But now, for the linting script,

137
00:06:08.430 --> 00:06:10.500
we should actually see that

138
00:06:10.500 --> 00:06:12.840
it does not cache the dependencies,

139
00:06:12.840 --> 00:06:13.673
but instead,

140
00:06:13.673 --> 00:06:18.673
it will reinstall all dependencies every time this Job runs.

141
00:06:18.690 --> 00:06:21.060
And for the average Jobs,

142
00:06:21.060 --> 00:06:22.110
testing and building,

143
00:06:22.110 --> 00:06:24.330
it should use caching.

144
00:06:24.330 --> 00:06:25.770
So here, for linting,

145
00:06:25.770 --> 00:06:26.880
you indeed see that,

146
00:06:26.880 --> 00:06:28.860
for our custom action step,

147
00:06:28.860 --> 00:06:33.030
it did use this command to install the dependencies.

148
00:06:33.030 --> 00:06:35.610
So, it did not use caching here.

149
00:06:35.610 --> 00:06:37.590
For testing, on the other hand,

150
00:06:37.590 --> 00:06:39.300
if we take a look at this step,

151
00:06:39.300 --> 00:06:44.300
we see that instead, it did get that data from the cache,

152
00:06:44.490 --> 00:06:47.940
and we see that it did restore the cache successfully,

153
00:06:47.940 --> 00:06:50.250
and that it did not run the command

154
00:06:50.250 --> 00:06:52.500
to install the dependencies.

155
00:06:52.500 --> 00:06:55.473
So, this custom input is working as intended.

