WEBVTT
1
00:00:02.580 --> 00:00:04.560
Now to get input values

2
00:00:04.560 --> 00:00:07.800
in the JavaScript code of this JavaScript action,

3
00:00:07.800 --> 00:00:10.470
we can use this core object,

4
00:00:10.470 --> 00:00:15.330
which we're importing from this GitHub provided package.

5
00:00:15.330 --> 00:00:19.350
This core object does not just have a notice method,

6
00:00:19.350 --> 00:00:22.260
but it also has a getInput method,

7
00:00:22.260 --> 00:00:26.100
which allows us to get one of the provided inputs.

8
00:00:26.100 --> 00:00:28.170
Here we have to pass a string,

9
00:00:28.170 --> 00:00:31.710
so some text as a first argument to this method.

10
00:00:31.710 --> 00:00:34.350
And the string, which we do pass here,

11
00:00:34.350 --> 00:00:36.930
should contain one of these input names.

12
00:00:36.930 --> 00:00:39.240
For example, to get the provided bucket,

13
00:00:39.240 --> 00:00:42.810
I'll use bucket here, because that's the key I chose.

14
00:00:42.810 --> 00:00:45.210
And in main.js, I'll add this here

15
00:00:45.210 --> 00:00:47.520
as the key I wanna retrieve.

16
00:00:47.520 --> 00:00:49.380
Then we can add a second argument,

17
00:00:49.380 --> 00:00:51.330
which is a JavaScript object,

18
00:00:51.330 --> 00:00:53.610
created with those curly braces,

19
00:00:53.610 --> 00:00:56.250
where you can set some extra options.

20
00:00:56.250 --> 00:00:58.710
Like for example, that excess white space

21
00:00:58.710 --> 00:01:00.690
should be removed automatically,

22
00:01:00.690 --> 00:01:04.170
or that it's required, which this is.

23
00:01:04.170 --> 00:01:07.140
And then getInput will return a value,

24
00:01:07.140 --> 00:01:10.620
which I'll store in a constant called bucket, here.

25
00:01:10.620 --> 00:01:14.490
And now I can retrieve this for the bucket-region,

26
00:01:14.490 --> 00:01:17.340
since that's another name I chose here.

27
00:01:17.340 --> 00:01:18.990
Bucket-region.

28
00:01:18.990 --> 00:01:21.360
And I'll name this bucketRegion here.

29
00:01:21.360 --> 00:01:23.700
And I also set it to required here,

30
00:01:23.700 --> 00:01:26.220
because whilst it's not required here,

31
00:01:26.220 --> 00:01:29.070
I do need it here in my code.

32
00:01:29.070 --> 00:01:31.230
And here, I'll set required to false,

33
00:01:31.230 --> 00:01:35.490
because actually in my action.yml file this is also false.

34
00:01:35.490 --> 00:01:36.990
By the way, this required setting

35
00:01:36.990 --> 00:01:40.590
would simply cause an error if we try to receive the value,

36
00:01:40.590 --> 00:01:42.900
and no value is yielded.

37
00:01:42.900 --> 00:01:45.420
Here, I could also set this to true

38
00:01:45.420 --> 00:01:47.790
because even though it's not required here,

39
00:01:47.790 --> 00:01:49.650
we do set a default value

40
00:01:49.650 --> 00:01:52.230
and therefore we will always return a value

41
00:01:52.230 --> 00:01:55.650
even if the user of this action didn't provide one.

42
00:01:55.650 --> 00:01:57.450
And I will actually use true here,

43
00:01:57.450 --> 00:01:58.530
now that I think about it,

44
00:01:58.530 --> 00:02:01.080
because this value will be needed later

45
00:02:01.080 --> 00:02:03.540
and the code would not work, as expected,

46
00:02:03.540 --> 00:02:07.773
if this would be empty or if no value would be provided.

47
00:02:08.880 --> 00:02:11.340
Now there's one last input which I wanna retrieve.

48
00:02:11.340 --> 00:02:14.190
And that's of course the dist-folder input.

49
00:02:14.190 --> 00:02:16.800
So we also add this here as a key,

50
00:02:16.800 --> 00:02:21.120
and store it in dist-folder, like this, for example.

51
00:02:21.120 --> 00:02:25.083
And with that we also extract this input here.

52
00:02:26.130 --> 00:02:30.270
Now that the inputs were extracted, we can use them.

53
00:02:30.270 --> 00:02:34.560
And I wanna use them to target this S3 bucket,

54
00:02:34.560 --> 00:02:37.440
which data I get through these arguments here,

55
00:02:37.440 --> 00:02:39.240
through these inputs.

56
00:02:39.240 --> 00:02:42.060
And I wanna send my files in the dist-folder,

57
00:02:42.060 --> 00:02:43.590
to this bucket.

58
00:02:43.590 --> 00:02:47.940
So here I wanna upload my files.

59
00:02:47.940 --> 00:02:49.800
Now to upload these files,

60
00:02:49.800 --> 00:02:53.130
there are a couple of approaches we could use.

61
00:02:53.130 --> 00:02:56.520
We could, for example, use the AWS SDK,

62
00:02:56.520 --> 00:02:59.400
the Software Development Kit for JavaScript,

63
00:02:59.400 --> 00:03:03.060
to use some JavaScript methods provided by AWS,

64
00:03:03.060 --> 00:03:06.810
to interact with AWS services like S3.

65
00:03:06.810 --> 00:03:11.250
We could do this, but here I'll choose another approach.

66
00:03:11.250 --> 00:03:15.450
Here I'll use the exact package, provided by GitHub,

67
00:03:15.450 --> 00:03:17.400
to actually run a command

68
00:03:17.400 --> 00:03:19.920
that we could also run in the command line.

69
00:03:19.920 --> 00:03:22.560
But I will run it from inside this JavaScript

70
00:03:22.560 --> 00:03:23.620
script file here

71
00:03:24.780 --> 00:03:28.380
For that, on the exec object, we can call exec method.

72
00:03:28.380 --> 00:03:31.980
And that method needs a command as a string.

73
00:03:31.980 --> 00:03:34.080
Here, we could, for example, use echo

74
00:03:34.080 --> 00:03:36.835
because this will be executed in the regular shell

75
00:03:36.835 --> 00:03:39.540
of our runner.

76
00:03:39.540 --> 00:03:40.890
But here, I don't wanna echo.

77
00:03:40.890 --> 00:03:44.520
Instead I'll use the AWS CLI,

78
00:03:44.520 --> 00:03:48.930
which is actually pre-installed on these Ubuntu images,

79
00:03:48.930 --> 00:03:50.940
there. If you take a look at the software

80
00:03:50.940 --> 00:03:54.270
that is installed on these images, right from the start

81
00:03:54.270 --> 00:03:59.190
You will see that it does come with the AWS CLI.

82
00:03:59.190 --> 00:04:01.350
And this is a command line interface.

83
00:04:01.350 --> 00:04:03.810
It's a tool, executed in the command line,

84
00:04:03.810 --> 00:04:08.790
that allows us to send commands to our AWS account.

85
00:04:08.790 --> 00:04:12.780
And here we can use the "AWS S3 sync" command,

86
00:04:12.780 --> 00:04:17.370
with whitespace between AWS, S3, and sync,

87
00:04:17.370 --> 00:04:21.063
to synchronize a local folder to an S3 bucket.

88
00:04:22.320 --> 00:04:26.250
For that, we now just need to specify the local folder here.

89
00:04:26.250 --> 00:04:29.130
And then the S3 bucket path, here.

90
00:04:29.130 --> 00:04:31.533
And then we can add some extra option flags.

91
00:04:32.730 --> 00:04:37.730
Now for the local folder, that of course is my dist-folder.

92
00:04:39.060 --> 00:04:42.063
And therefore we can create a constant but we don't have to.

93
00:04:43.050 --> 00:04:48.050
For the S3Uri, for the identifier of our S3 bucket,

94
00:04:49.830 --> 00:04:53.100
that is a path which I'll construct dynamically,

95
00:04:53.100 --> 00:04:54.810
by using back ticks here.

96
00:04:54.810 --> 00:04:59.280
Two back ticks, not single quotes, but back ticks.

97
00:04:59.280 --> 00:05:02.460
To construct a dynamic string value,

98
00:05:02.460 --> 00:05:07.020
where I inject a value with this special JavaScript syntax.

99
00:05:07.020 --> 00:05:08.370
So this is all JavaScript.

100
00:05:08.370 --> 00:05:10.410
Has nothing to do with GitHub actions.

101
00:05:10.410 --> 00:05:13.110
And here, I will inject my bucket.

102
00:05:13.110 --> 00:05:14.433
So the name of the bucket.

103
00:05:15.930 --> 00:05:19.290
This is my S3 bucket path, therefore.

104
00:05:19.290 --> 00:05:21.270
Hence, I will also inject this here,

105
00:05:21.270 --> 00:05:24.780
by converting these single quotes to back ticks.

106
00:05:24.780 --> 00:05:27.660
So that I can use this same injection syntax here

107
00:05:27.660 --> 00:05:31.530
in the exec line. Line 13.

108
00:05:31.530 --> 00:05:34.890
And I'll inject this S3Uri value here.

109
00:05:34.890 --> 00:05:37.623
So this identifier of the bucket.

110
00:05:38.700 --> 00:05:41.610
And I'll inject a value for the local folder,

111
00:05:41.610 --> 00:05:43.893
and that will be my dist-folder, here.

112
00:05:45.840 --> 00:05:48.480
So now, with that, I'm telling the AWS CLI

113
00:05:48.480 --> 00:05:50.640
which local folders should be synchronized

114
00:05:50.640 --> 00:05:53.910
with which remote S3 bucket.

115
00:05:53.910 --> 00:05:57.728
And this command could be executed in the regular shell

116
00:05:57.728 --> 00:05:59.250
of our runner.

117
00:05:59.250 --> 00:06:01.410
And that will indeed happen behind the scenes.

118
00:06:01.410 --> 00:06:03.210
But we're triggering the command

119
00:06:03.210 --> 00:06:05.430
through our JavaScript action file here.

120
00:06:05.430 --> 00:06:06.750
And that's something you can do

121
00:06:06.750 --> 00:06:10.200
with the help of this exec package here.

122
00:06:10.200 --> 00:06:11.520
We're not done though,

123
00:06:11.520 --> 00:06:14.910
I will add an extra flag with "--region",

124
00:06:14.910 --> 00:06:18.450
to specify the region where this bucket can be found.

125
00:06:18.450 --> 00:06:20.130
And this must be added here.

126
00:06:20.130 --> 00:06:24.750
And here, I'll inject the bucketRegion, which I extracted.

127
00:06:24.750 --> 00:06:26.430
So I'm using all these inputs,

128
00:06:26.430 --> 00:06:28.950
which we're getting for this action.

129
00:06:28.950 --> 00:06:30.660
And this will now trigger this command,

130
00:06:30.660 --> 00:06:35.660
which should try to send our files to the S3 bucket.

131
00:06:35.670 --> 00:06:38.696
Now we're almost done with this custom action.

132
00:06:38.696 --> 00:06:41.370
And before we use it in our Workflow,

133
00:06:41.370 --> 00:06:45.630
there's just one thing I also wanna show you real quick.

134
00:06:45.630 --> 00:06:49.140
And that's this Github, this "actions/github" package here,

135
00:06:49.140 --> 00:06:52.230
where we import the GitHub object.

136
00:06:52.230 --> 00:06:54.300
We're not using it here.

137
00:06:54.300 --> 00:06:59.300
But this object would give us access to the Octokit client,

138
00:06:59.910 --> 00:07:03.060
which in the end is a tool provided by GitHub

139
00:07:03.060 --> 00:07:07.173
that makes it easy to send requests to the GitHub REST API.

140
00:07:08.010 --> 00:07:10.410
And we get access to a context object

141
00:07:10.410 --> 00:07:12.780
which offers some values.

142
00:07:12.780 --> 00:07:17.780
Not all values but some values of the GitHub context object.

143
00:07:18.330 --> 00:07:20.670
For example, we could get the name of the action

144
00:07:20.670 --> 00:07:22.260
that's currently executing,

145
00:07:22.260 --> 00:07:24.600
and a couple of other values as well.

146
00:07:24.600 --> 00:07:25.710
We don't need it here,

147
00:07:25.710 --> 00:07:27.926
but I wanted to mention, that this GitHub package

148
00:07:27.926 --> 00:07:31.443
does give you this extra data, and this client,

149
00:07:31.443 --> 00:07:33.930
this Octokit client as it's called,

150
00:07:33.930 --> 00:07:37.980
which can be used for communicating with GitHub's APIs.

151
00:07:37.980 --> 00:07:41.490
But that's it for this script file, at least for the moment.

152
00:07:41.490 --> 00:07:44.550
Let's now see how we can use this custom action

153
00:07:44.550 --> 00:07:47.223
and how we can use it such that everything works.

