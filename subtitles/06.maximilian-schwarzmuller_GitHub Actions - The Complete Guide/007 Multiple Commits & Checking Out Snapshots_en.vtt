WEBVTT
1
00:00:02.130 --> 00:00:05.430
Okay, we created our first commit.

2
00:00:05.430 --> 00:00:07.710
If we then take a look at the list

3
00:00:07.710 --> 00:00:10.890
of all our commits with Git log,

4
00:00:10.890 --> 00:00:15.390
we see that for this one commit which we have thus far,

5
00:00:15.390 --> 00:00:19.920
we also got this head arrow main annotation.

6
00:00:19.920 --> 00:00:21.213
What's that about?

7
00:00:22.320 --> 00:00:25.860
Well, main is the name of the branch to which this commit

8
00:00:25.860 --> 00:00:29.040
belongs or of which this commit is part.

9
00:00:29.040 --> 00:00:32.130
And I'll get back to branches a little bit later

10
00:00:32.130 --> 00:00:34.290
in this section.

11
00:00:34.290 --> 00:00:38.940
This head thing here though is something different

12
00:00:38.940 --> 00:00:43.940
because this is basically a pointer managed by Git

13
00:00:44.010 --> 00:00:49.010
that controls which commit is currently visible

14
00:00:49.050 --> 00:00:51.270
in our project, so to say.

15
00:00:51.270 --> 00:00:54.960
So which state is currently loaded, you could say.

16
00:00:54.960 --> 00:00:59.520
Head points at the commit that's currently loaded.

17
00:00:59.520 --> 00:01:02.910
And that's important because once you have more

18
00:01:02.910 --> 00:01:06.150
than one commit, you can also start moving

19
00:01:06.150 --> 00:01:08.280
between those commits.

20
00:01:08.280 --> 00:01:10.230
You can move between those commits

21
00:01:10.230 --> 00:01:12.480
with the Git checkout command

22
00:01:12.480 --> 00:01:16.590
which needs the ID of the commit you wanna move to.

23
00:01:16.590 --> 00:01:19.260
And that command would then allow you

24
00:01:19.260 --> 00:01:23.400
to temporarily move to another commit.

25
00:01:23.400 --> 00:01:27.720
Which means the other commits that come after the commit

26
00:01:27.720 --> 00:01:30.540
you are moving to won't be deleted,

27
00:01:30.540 --> 00:01:35.100
you just temporarily load another state.

28
00:01:35.100 --> 00:01:39.750
And this head pointer simply tells Git which state

29
00:01:39.750 --> 00:01:43.470
is currently loaded, which snapshot is loaded.

30
00:01:43.470 --> 00:01:46.590
And when using Git checkout and for example

31
00:01:46.590 --> 00:01:50.100
loading the commit C4 on this slide,

32
00:01:50.100 --> 00:01:53.550
Git would move this pointer to that commit

33
00:01:53.550 --> 00:01:56.790
and would load the contents of all the files

34
00:01:56.790 --> 00:01:58.770
that were part of that commit

35
00:01:58.770 --> 00:02:03.000
or that made up the Git repository at that point of time

36
00:02:03.000 --> 00:02:05.280
into our project.

37
00:02:05.280 --> 00:02:09.150
And the other commits and all the changes that were made

38
00:02:09.150 --> 00:02:12.150
as part of these commits are still there,

39
00:02:12.150 --> 00:02:15.360
they're just not visible at the moment.

40
00:02:15.360 --> 00:02:19.740
Now, to see this in action, we need a second commit.

41
00:02:19.740 --> 00:02:23.730
And therefore to make sure that we do have a second commit,

42
00:02:23.730 --> 00:02:27.450
I will add another element or some extra code

43
00:02:27.450 --> 00:02:30.180
to this index html file.

44
00:02:30.180 --> 00:02:33.600
I'll add such a P element, such a paragraph element,

45
00:02:33.600 --> 00:02:34.770
as it's called.

46
00:02:34.770 --> 00:02:39.480
And there I'll say learn more about Git on,

47
00:02:39.480 --> 00:02:42.970
and then I add an anchor tag element which creates a link

48
00:02:44.460 --> 00:02:47.250
the official website, that's what I say

49
00:02:47.250 --> 00:02:52.250
between these link tags, these A tags here.

50
00:02:52.290 --> 00:02:57.290
And then here I simply point at this URL here.

51
00:02:58.620 --> 00:03:02.580
And find this version of this HTML file attached

52
00:03:02.580 --> 00:03:06.003
to this lecture so that you can follow along with ease.

53
00:03:07.500 --> 00:03:10.497
So now I made this change and I saved this file.

54
00:03:10.497 --> 00:03:13.590
And in Visual Studio Code, you see that the name

55
00:03:13.590 --> 00:03:17.940
now turned yellow or orange or golden.

56
00:03:17.940 --> 00:03:20.220
And you also see that there is an M

57
00:03:20.220 --> 00:03:22.710
next to that file name here.

58
00:03:22.710 --> 00:03:26.880
This simply means that this file was modified now.

59
00:03:26.880 --> 00:03:30.090
So that we don't have the same state as before

60
00:03:30.090 --> 00:03:34.023
in the last commit, but that we changed something in a file.

61
00:03:35.310 --> 00:03:39.090
Now, if we want to create a snapshot that includes

62
00:03:39.090 --> 00:03:42.330
that change, we must create a new commit.

63
00:03:42.330 --> 00:03:44.130
And therefore that's what I'll do.

64
00:03:44.130 --> 00:03:48.240
Now, to create that new commit in my terminal here,

65
00:03:48.240 --> 00:03:51.570
I will again run Git add index html

66
00:03:51.570 --> 00:03:54.150
because that is the file that should be included

67
00:03:54.150 --> 00:03:55.710
in the next commit.

68
00:03:55.710 --> 00:03:58.980
And I know that we included it in the previous commit

69
00:03:58.980 --> 00:04:02.490
but the file was in a different state in that commit,

70
00:04:02.490 --> 00:04:05.010
the content of the file was different

71
00:04:05.010 --> 00:04:08.580
and therefore now I'm adding this updated file.

72
00:04:08.580 --> 00:04:09.690
And that's important.

73
00:04:09.690 --> 00:04:13.830
You add the same file multiple times whenever you change

74
00:04:13.830 --> 00:04:17.040
a file and you wanna include the changes in that file

75
00:04:17.040 --> 00:04:19.649
in a commit, you have to add the file.

76
00:04:19.649 --> 00:04:22.443
That's why I add index html again.

77
00:04:23.400 --> 00:04:26.850
Now this file modification is staged.

78
00:04:26.850 --> 00:04:30.780
So if you run Git status, we can see that this modification

79
00:04:30.780 --> 00:04:34.050
is to be committed in the next commit.

80
00:04:34.050 --> 00:04:37.983
This change that this file was modified is to be committed.

81
00:04:38.850 --> 00:04:41.820
And therefore now we can again run Git commit

82
00:04:41.820 --> 00:04:45.000
and add a little message where we could say,

83
00:04:45.000 --> 00:04:48.843
add a link to Git docs or anything like that.

84
00:04:50.280 --> 00:04:53.490
If I now hit Enter, this commit is created.

85
00:04:53.490 --> 00:04:57.000
And now when you run Git log again,

86
00:04:57.000 --> 00:05:00.150
you see that we have two commits here,

87
00:05:00.150 --> 00:05:02.043
which makes sense hopefully.

88
00:05:03.030 --> 00:05:07.170
You'll see that the head pointer points at the latest commit

89
00:05:07.170 --> 00:05:10.590
because that's something Git does automatically.

90
00:05:10.590 --> 00:05:14.520
Whenever you create a new commit, this head pointer

91
00:05:14.520 --> 00:05:17.610
points at that commit automatically.

92
00:05:17.610 --> 00:05:20.810
But now let's say we wanna take a look at this old version

93
00:05:20.810 --> 00:05:23.700
of the code to see what was changed

94
00:05:23.700 --> 00:05:27.180
or to see that original state.

95
00:05:27.180 --> 00:05:30.810
To do that, we have to grab the ID of that commit

96
00:05:30.810 --> 00:05:34.053
we wanna go to, so of that initial commit here.

97
00:05:35.160 --> 00:05:37.830
And then we can run, Git checkout

98
00:05:37.830 --> 00:05:40.890
and add that ID thereafter.

99
00:05:40.890 --> 00:05:44.200
And if we hit Enter, you will see that up here

100
00:05:45.450 --> 00:05:47.010
the code changes.

101
00:05:47.010 --> 00:05:50.220
The paragraph that includes the link is gone

102
00:05:50.220 --> 00:05:52.920
because I'm now looking at this old version

103
00:05:52.920 --> 00:05:55.770
of my project of that code again.

104
00:05:55.770 --> 00:05:58.080
Now, as mentioned before on the slide,

105
00:05:58.080 --> 00:06:02.250
the other code, the more recent code isn't lost,

106
00:06:02.250 --> 00:06:04.320
it's still stored by Git.

107
00:06:04.320 --> 00:06:07.230
It's just currently not loaded into this project.

108
00:06:07.230 --> 00:06:10.230
So that's how we can move to this old version.

109
00:06:10.230 --> 00:06:13.590
If you run Git log again, we see only one commit,

110
00:06:13.590 --> 00:06:17.130
the initial commit because Git log by default

111
00:06:17.130 --> 00:06:20.310
always locks all commits that are older

112
00:06:20.310 --> 00:06:22.713
than the commit we currently checked out.

113
00:06:23.640 --> 00:06:27.150
You see that the head pointer now points at that commit

114
00:06:27.150 --> 00:06:31.230
but you see that this main part from before is gone.

115
00:06:31.230 --> 00:06:35.700
The reason for that is that this is now basically detached.

116
00:06:35.700 --> 00:06:37.770
Git has this branches feature,

117
00:06:37.770 --> 00:06:39.810
which will explore a little bit later,

118
00:06:39.810 --> 00:06:43.200
and our commits belong to different branches.

119
00:06:43.200 --> 00:06:46.560
If we then check out a commit, this commit is basically

120
00:06:46.560 --> 00:06:50.040
loaded outside of a branch which is why the branch name,

121
00:06:50.040 --> 00:06:51.720
which is main in my case here,

122
00:06:51.720 --> 00:06:53.673
is not displayed here anymore.

123
00:06:54.600 --> 00:06:57.600
If I wanna get back to my brach that includes

124
00:06:57.600 --> 00:06:59.670
all the commits, including the commit

125
00:06:59.670 --> 00:07:02.190
which I'm now not seeing anymore here,

126
00:07:02.190 --> 00:07:04.680
I can simply type Git checkout main.

127
00:07:04.680 --> 00:07:06.450
So the name of that branch

128
00:07:06.450 --> 00:07:08.883
which I know includes all those commits.

129
00:07:09.840 --> 00:07:13.380
if I do that, you see the paragraph with the link is back.

130
00:07:13.380 --> 00:07:16.140
And with Git log, we see all commits again

131
00:07:16.140 --> 00:07:19.020
and we see that now the head pointer

132
00:07:19.020 --> 00:07:22.143
points at that latest commit in that main branch again.

133
00:07:23.040 --> 00:07:25.830
So that's how we can move around with Git checkout.

134
00:07:25.830 --> 00:07:29.430
And as you can see, this is all just temporary.

135
00:07:29.430 --> 00:07:33.360
We don't delete anything if we check out an older commit,

136
00:07:33.360 --> 00:07:36.990
we just load it temporarily and we can always go back

137
00:07:36.990 --> 00:07:39.330
to the full history, to the full branch

138
00:07:39.330 --> 00:07:41.940
which includes all these commits that belong to it

139
00:07:41.940 --> 00:07:44.163
by checking out that branch again.

