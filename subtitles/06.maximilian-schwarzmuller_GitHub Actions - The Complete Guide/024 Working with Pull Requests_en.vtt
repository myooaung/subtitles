WEBVTT
1
00:00:02.220 --> 00:00:04.170
So we made these changes

2
00:00:04.170 --> 00:00:05.760
as this second user.

3
00:00:05.760 --> 00:00:08.280
We pushed this branch and now we wanna make sure

4
00:00:08.280 --> 00:00:13.230
that these changes are actually merged into the main branch.

5
00:00:13.230 --> 00:00:16.110
Now, before we always merged locally

6
00:00:16.110 --> 00:00:18.840
and then we had the updated main branch

7
00:00:18.840 --> 00:00:20.220
but now that's not an option

8
00:00:20.220 --> 00:00:24.690
because we won't be able to push that updated main branch.

9
00:00:24.690 --> 00:00:27.030
Indeed, I can show this.

10
00:00:27.030 --> 00:00:30.210
If here on my second user's machine,

11
00:00:30.210 --> 00:00:32.490
I check out the main branch,

12
00:00:32.490 --> 00:00:34.800
and I merge this color branch.

13
00:00:34.800 --> 00:00:36.630
That of course works.

14
00:00:36.630 --> 00:00:40.470
But if I now push this main branch to origin,

15
00:00:40.470 --> 00:00:43.830
you will actually see that this is blocked

16
00:00:43.830 --> 00:00:47.070
because I have this branch protection turned on.

17
00:00:47.070 --> 00:00:48.423
So that's not an option.

18
00:00:49.320 --> 00:00:52.320
Instead what we wanna do and what is extremely common

19
00:00:52.320 --> 00:00:56.520
and actually the typical way of merging branches

20
00:00:56.520 --> 00:00:59.010
into the main branch in bigger projects

21
00:00:59.010 --> 00:01:03.183
that use GitHub is to create a so-called pull request.

22
00:01:04.110 --> 00:01:06.510
A pull request is a request

23
00:01:06.510 --> 00:01:09.540
that requests others, for example,

24
00:01:09.540 --> 00:01:11.280
the owners of this project

25
00:01:11.280 --> 00:01:13.980
or our colleagues, maybe our boss

26
00:01:13.980 --> 00:01:17.940
to pull our changes into a given branch,

27
00:01:17.940 --> 00:01:20.130
typically the main branch

28
00:01:20.130 --> 00:01:22.590
and, of course, as part of the process,

29
00:01:22.590 --> 00:01:24.390
our boss, our colleagues

30
00:01:24.390 --> 00:01:28.350
or whoever has the right to accept these pull requests

31
00:01:28.350 --> 00:01:31.053
has a chance of reviewing our code.

32
00:01:31.980 --> 00:01:34.650
That's why in all big projects,

33
00:01:34.650 --> 00:01:37.230
and especially in all open source projects,

34
00:01:37.230 --> 00:01:39.720
if you're contributing to the project

35
00:01:39.720 --> 00:01:42.180
and you want your changes to be included

36
00:01:42.180 --> 00:01:44.640
in the main branch, in the production code,

37
00:01:44.640 --> 00:01:46.650
you open such a pull request.

38
00:01:46.650 --> 00:01:49.080
And that's what we're going to do here.

39
00:01:49.080 --> 00:01:51.240
I'm on the GitHub account of that second user

40
00:01:51.240 --> 00:01:54.180
who's not the owner of this repository

41
00:01:54.180 --> 00:01:56.493
as you can tell by the missing Settings tab.

42
00:01:57.390 --> 00:02:00.150
And here I pushed my feat-color branch.

43
00:02:00.150 --> 00:02:03.900
And I get a button for creating a pull request here

44
00:02:03.900 --> 00:02:04.890
but we can also do this

45
00:02:04.890 --> 00:02:08.100
from inside the pull requests tab here.

46
00:02:08.100 --> 00:02:11.460
Here we can create a new pull request

47
00:02:11.460 --> 00:02:12.810
and what we do here here

48
00:02:12.810 --> 00:02:15.870
is we select the branch into which we wanna merge,

49
00:02:15.870 --> 00:02:17.790
so that's the main branch.

50
00:02:17.790 --> 00:02:19.860
And then the branch that should be merged.

51
00:02:19.860 --> 00:02:22.290
That's the feat-color branch.

52
00:02:22.290 --> 00:02:23.580
I select this here

53
00:02:23.580 --> 00:02:26.580
and I then get a preview of what will be changed.

54
00:02:26.580 --> 00:02:29.400
In this case, it's in the styles.css file

55
00:02:29.400 --> 00:02:32.850
where the color will be updated.

56
00:02:32.850 --> 00:02:34.560
So in the end, what will happen

57
00:02:34.560 --> 00:02:37.920
is a merge, the same thing we did locally

58
00:02:37.920 --> 00:02:39.600
but it will happen on GitHub

59
00:02:39.600 --> 00:02:41.610
after giving our colleague

60
00:02:41.610 --> 00:02:43.980
or the owner of the project a chance

61
00:02:43.980 --> 00:02:46.860
of reviewing our upcoming changes.

62
00:02:46.860 --> 00:02:48.720
And of course if you're collaborating,

63
00:02:48.720 --> 00:02:51.330
having processes like this is important

64
00:02:51.330 --> 00:02:52.380
in order to make sure

65
00:02:52.380 --> 00:02:56.793
that code isn't broken or unintended changes are introduced.

66
00:02:58.320 --> 00:03:02.010
So here we're creating this pull request here.

67
00:03:02.010 --> 00:03:04.380
And therefore I'll click create pull request.

68
00:03:04.380 --> 00:03:07.260
And now we can give this pull request a title,

69
00:03:07.260 --> 00:03:10.413
like changed title color, and a description.

70
00:03:11.340 --> 00:03:15.433
I changed the title color as suggested in,

71
00:03:16.590 --> 00:03:18.840
and now we can even link the issue

72
00:03:18.840 --> 00:03:22.323
that we created to give this pull request some context.

73
00:03:23.250 --> 00:03:27.150
To do that, we just have to get the number of that issue,

74
00:03:27.150 --> 00:03:28.230
which you can see here.

75
00:03:28.230 --> 00:03:29.550
In this case it's number one

76
00:03:29.550 --> 00:03:31.170
because it's the first issue.

77
00:03:31.170 --> 00:03:33.870
And then here we can type #1

78
00:03:33.870 --> 00:03:37.263
and GitHub will automatically suggest such a link.

79
00:03:38.280 --> 00:03:39.510
If we preview this,

80
00:03:39.510 --> 00:03:42.510
we see that a link was indeed added automatically.

81
00:03:42.510 --> 00:03:44.433
That's a nice feature of GitHub

82
00:03:44.433 --> 00:03:46.980
because GitHub is all about managing code

83
00:03:46.980 --> 00:03:48.870
and collaborating on code.

84
00:03:48.870 --> 00:03:51.810
That's why it has many nice features like this one

85
00:03:51.810 --> 00:03:56.040
where we can easily link a issue in a pull request.

86
00:03:56.040 --> 00:03:59.130
Indeed, we can also easily link issues or pull requests

87
00:03:59.130 --> 00:04:00.180
in other issues.

88
00:04:00.180 --> 00:04:02.430
So you can link all these things together.

89
00:04:02.430 --> 00:04:03.993
That's really quite nice.

90
00:04:05.040 --> 00:04:07.110
So with that, we have a nice description

91
00:04:07.110 --> 00:04:10.290
and now I'll create that pull request.

92
00:04:10.290 --> 00:04:13.170
Again, I'm still on that second user,

93
00:04:13.170 --> 00:04:15.333
that second GitHub user.

94
00:04:16.320 --> 00:04:17.279
Now, what we see here

95
00:04:17.279 --> 00:04:19.470
is that a review is required

96
00:04:19.470 --> 00:04:21.959
because we turned on that branch protection

97
00:04:21.959 --> 00:04:23.370
where we actually set

98
00:04:23.370 --> 00:04:25.803
that at least one reviewer is required.

99
00:04:26.640 --> 00:04:29.430
So therefore here, we can't merge this pull request

100
00:04:29.430 --> 00:04:31.893
because we did not create this repository.

101
00:04:32.730 --> 00:04:34.290
But we created it

102
00:04:34.290 --> 00:04:37.410
and now we can wait for the owner of this repository

103
00:04:37.410 --> 00:04:38.553
to merge this.

104
00:04:39.690 --> 00:04:41.790
So here I am on this main account

105
00:04:41.790 --> 00:04:43.830
who is the owner of this repository,

106
00:04:43.830 --> 00:04:45.420
and there if I reload the page,

107
00:04:45.420 --> 00:04:47.103
I see this pull request.

108
00:04:48.060 --> 00:04:50.130
Now, I can take a look at it

109
00:04:50.130 --> 00:04:51.690
and here I see what's going on.

110
00:04:51.690 --> 00:04:53.070
I see the description.

111
00:04:53.070 --> 00:04:55.530
I can take a look at the commits that will be merged,

112
00:04:55.530 --> 00:04:58.200
and which files will be changed.

113
00:04:58.200 --> 00:05:01.980
And I also see that a reviewer is missing.

114
00:05:01.980 --> 00:05:03.300
Now, since I'm the owner,

115
00:05:03.300 --> 00:05:05.310
I could still bypass this

116
00:05:05.310 --> 00:05:08.490
but I can also request myself as a reviewer here.

117
00:05:08.490 --> 00:05:10.770
The person who opened this pull request

118
00:05:10.770 --> 00:05:11.970
could have done this as well

119
00:05:11.970 --> 00:05:13.680
but I can edit this pull request

120
00:05:13.680 --> 00:05:16.380
if I'm not fully happy with it, as I'm doing here

121
00:05:16.380 --> 00:05:18.033
by adding me as a reviewer.

122
00:05:19.020 --> 00:05:21.630
So now that I did add myself as a reviewer,

123
00:05:21.630 --> 00:05:23.160
I can add my review.

124
00:05:23.160 --> 00:05:26.493
Again, these are all nice features built into GitHub.

125
00:05:27.360 --> 00:05:30.630
And that allows me to go through these code changes.

126
00:05:30.630 --> 00:05:32.550
And I could add annotations here,

127
00:05:32.550 --> 00:05:34.440
which then again can be picked up

128
00:05:34.440 --> 00:05:36.870
by the person who created the pull request

129
00:05:36.870 --> 00:05:38.343
to make some changes to it.

130
00:05:39.510 --> 00:05:41.670
However, here I'm quite happy with that.

131
00:05:41.670 --> 00:05:43.830
Therefore, I'll click review changes

132
00:05:43.830 --> 00:05:45.210
and submit review,

133
00:05:45.210 --> 00:05:48.660
and I'll actually just approve these changes here.

134
00:05:48.660 --> 00:05:49.770
I have nothing to add.

135
00:05:49.770 --> 00:05:51.120
I'm just fine with that.

136
00:05:51.120 --> 00:05:53.850
Now I left my review and now I can merge this

137
00:05:53.850 --> 00:05:55.533
because now it was reviewed.

138
00:05:57.150 --> 00:05:58.890
I'll just do one more thing.

139
00:05:58.890 --> 00:06:00.390
I'll add an extra comment

140
00:06:00.390 --> 00:06:03.540
where I say closes this issue

141
00:06:03.540 --> 00:06:05.070
so that I say that this issue

142
00:06:05.070 --> 00:06:08.015
will be closed by merging this pull request.

143
00:06:08.015 --> 00:06:09.900
Hence I'll comment here

144
00:06:09.900 --> 00:06:12.300
and add this comment to the pull request.

145
00:06:12.300 --> 00:06:14.310
And then merge that pull request.

146
00:06:14.310 --> 00:06:15.573
Confirm the merge.

147
00:06:17.370 --> 00:06:19.170
And now it was merged.

148
00:06:19.170 --> 00:06:23.050
And under issues, I can target this issue here

149
00:06:24.780 --> 00:06:27.030
and actually mark it as closed

150
00:06:27.030 --> 00:06:28.410
because this is not an issue

151
00:06:28.410 --> 00:06:30.360
or an active suggestion anymore.

152
00:06:30.360 --> 00:06:32.253
Instead, this has been implemented.

153
00:06:33.720 --> 00:06:35.370
Now, technically what happened

154
00:06:35.370 --> 00:06:39.090
is that a merge was performed and added to the main branch,

155
00:06:39.090 --> 00:06:41.760
and this is still a new commit therefore in the end

156
00:06:41.760 --> 00:06:44.280
as we did it locally before as well

157
00:06:44.280 --> 00:06:46.020
but now it happened all on GitHub

158
00:06:46.020 --> 00:06:47.733
using these GitHub features.

159
00:06:48.660 --> 00:06:51.630
This, of course, also means that now there is some code

160
00:06:51.630 --> 00:06:55.653
on GitHub that's not necessarily on our local machines yet.

161
00:06:56.970 --> 00:06:59.430
Here in that project of that second user,

162
00:06:59.430 --> 00:07:00.780
if I run git pull,

163
00:07:00.780 --> 00:07:03.330
it therefore now downloads these changes

164
00:07:03.330 --> 00:07:04.710
and actually nothing changed

165
00:07:04.710 --> 00:07:06.600
because I merged that feature branch

166
00:07:06.600 --> 00:07:08.820
into the main branch there before as well.

167
00:07:08.820 --> 00:07:10.800
But technically something did change

168
00:07:10.800 --> 00:07:14.130
because I did now really download that merge commit

169
00:07:14.130 --> 00:07:15.903
that was created remotely.

170
00:07:17.070 --> 00:07:19.220
And of course, if I switch to the project

171
00:07:19.220 --> 00:07:24.220
of the original creator of this project here,

172
00:07:24.300 --> 00:07:26.970
then I can also run git pull there

173
00:07:26.970 --> 00:07:28.830
to download these latest changes

174
00:07:28.830 --> 00:07:30.753
and get this updated color.

175
00:07:31.650 --> 00:07:35.460
And that's how you can collaborate with others on GitHub

176
00:07:35.460 --> 00:07:37.560
by adding them as collaborators

177
00:07:37.560 --> 00:07:41.280
and by then using this pull requests feature here,

178
00:07:41.280 --> 00:07:44.070
which we used to suggest a change,

179
00:07:44.070 --> 00:07:45.120
review a change

180
00:07:45.120 --> 00:07:47.490
and then ultimately, if everything's all right,

181
00:07:47.490 --> 00:07:49.140
merge that change.

182
00:07:49.140 --> 00:07:53.490
And that's how people can contribute on open source software

183
00:07:53.490 --> 00:07:57.120
but also internally in teams on private software

184
00:07:57.120 --> 00:07:58.923
or on whatever you're working.

