WEBVTT
1
00:00:02.040 --> 00:00:04.320
So now the plan is to add an action

2
00:00:04.320 --> 00:00:06.780
that will automatically run these tests.

3
00:00:06.780 --> 00:00:10.050
Now we could do this again by going to actions

4
00:00:10.050 --> 00:00:14.820
and adding this new action here, right from inside GitHub.

5
00:00:14.820 --> 00:00:18.630
We can do this but actually since it is just a file

6
00:00:18.630 --> 00:00:21.933
in our project anyways, we can also write it locally.

7
00:00:22.770 --> 00:00:25.890
So in this second-action-react-demo folder,

8
00:00:25.890 --> 00:00:29.700
I'll add a new sub folder, which has to be named .github

9
00:00:29.700 --> 00:00:32.162
and this is a name you must use.

10
00:00:33.120 --> 00:00:36.390
In there, you also must add a workflows folder.

11
00:00:36.390 --> 00:00:38.220
Again, this name is not up to you,

12
00:00:38.220 --> 00:00:40.950
it has to be named workflows.

13
00:00:40.950 --> 00:00:45.210
And in this .github/workflows folder,

14
00:00:45.210 --> 00:00:47.610
you add your workflow file

15
00:00:47.610 --> 00:00:51.120
and that file name is now totally up to you.

16
00:00:51.120 --> 00:00:54.990
Here, I will just name it test.yml

17
00:00:54.990 --> 00:00:56.940
but the name is up to you as mentioned.

18
00:00:58.200 --> 00:01:00.930
And in this test.yml file,

19
00:01:00.930 --> 00:01:05.310
you now define your workflow that should be executed.

20
00:01:05.310 --> 00:01:09.360
Now as before, for this first workflow we created,

21
00:01:09.360 --> 00:01:11.700
you have to add a name, a trigger

22
00:01:11.700 --> 00:01:13.980
and define the jobs you want.

23
00:01:13.980 --> 00:01:16.350
So that's the same for this new workflow

24
00:01:16.350 --> 00:01:17.970
which we create locally.

25
00:01:17.970 --> 00:01:19.920
And in general, there is no difference

26
00:01:19.920 --> 00:01:22.230
between creating it locally or on GitHub,

27
00:01:22.230 --> 00:01:25.323
the structure and the keywords always are the same.

28
00:01:26.310 --> 00:01:30.720
So here I'll add a name and I'll name it Test Project

29
00:01:30.720 --> 00:01:32.730
because that is what this workflow will do,

30
00:01:32.730 --> 00:01:34.830
it will test this project

31
00:01:34.830 --> 00:01:36.720
and next we add a trigger.

32
00:01:36.720 --> 00:01:40.710
Now the question is what could be a trigger here though?

33
00:01:40.710 --> 00:01:44.430
Let's take a closer look at workflow triggers and events

34
00:01:44.430 --> 00:01:46.920
and just to be clear, that's the same thing.

35
00:01:46.920 --> 00:01:48.930
So let's take a closer look.

36
00:01:48.930 --> 00:01:51.930
And GitHub Actions actually offers tons

37
00:01:51.930 --> 00:01:54.000
of events you can listen to.

38
00:01:54.000 --> 00:01:57.030
Most of them are repository related

39
00:01:57.030 --> 00:02:00.210
and there you got events like a push happening

40
00:02:00.210 --> 00:02:02.670
or a pull_request being opened,

41
00:02:02.670 --> 00:02:04.950
or maybe a new branch was created

42
00:02:04.950 --> 00:02:06.840
or the repository was forked,

43
00:02:06.840 --> 00:02:09.300
or an issue was opened or deleted.

44
00:02:09.300 --> 00:02:12.210
So there also are different variations for some

45
00:02:12.210 --> 00:02:15.330
of these events, like an issue being opened or deleted,

46
00:02:15.330 --> 00:02:17.490
both things can trigger a workflow

47
00:02:17.490 --> 00:02:20.220
and of course you can control which exact event,

48
00:02:20.220 --> 00:02:22.140
and which exact variation

49
00:02:22.140 --> 00:02:25.320
of an event should trigger a workflow.

50
00:02:25.320 --> 00:02:29.100
So there are many events related to repositories

51
00:02:29.100 --> 00:02:32.040
and there also are some other events.

52
00:02:32.040 --> 00:02:35.820
For example, we already saw workflow_dispatch

53
00:02:35.820 --> 00:02:39.000
which allows us to manually trigger workflows.

54
00:02:39.000 --> 00:02:42.060
We also got repository_dispatch

55
00:02:42.060 --> 00:02:46.110
which would allow us to send REST API request

56
00:02:46.110 --> 00:02:50.250
to a specific GitHub REST API to trigger a workflow,

57
00:02:50.250 --> 00:02:52.977
we can run a workflow on a schedule so every day

58
00:02:52.977 --> 00:02:56.370
at 8:00 AM for example,

59
00:02:56.370 --> 00:02:58.980
and we can also allow a workflow to be called

60
00:02:58.980 --> 00:03:02.433
by other workflows as something we will explore later.

61
00:03:03.450 --> 00:03:06.390
To get a thorough overview and explanation

62
00:03:06.390 --> 00:03:09.840
of all available events and event variations,

63
00:03:09.840 --> 00:03:13.440
it's best if you simply search for GitHub Actions events

64
00:03:13.440 --> 00:03:16.320
and then you should find a page that describes all

65
00:03:16.320 --> 00:03:19.080
the events that can trigger a workflow,

66
00:03:19.080 --> 00:03:21.900
how exactly these events are triggered

67
00:03:21.900 --> 00:03:23.820
and for example, also here

68
00:03:23.820 --> 00:03:26.580
at the example of the pull_request event,

69
00:03:26.580 --> 00:03:31.580
which variations of that event can trigger a workflow.

70
00:03:31.830 --> 00:03:34.830
So if for example, for this pull_request,

71
00:03:34.830 --> 00:03:37.920
the workflow should be triggered when a new pull_request

72
00:03:37.920 --> 00:03:42.870
is opened or maybe when it's closed or any other variation.

73
00:03:42.870 --> 00:03:45.030
So there are many things you can do here

74
00:03:45.030 --> 00:03:46.770
and it should be needless to say

75
00:03:46.770 --> 00:03:48.060
that throughout this course,

76
00:03:48.060 --> 00:03:50.370
we'll see many different event types

77
00:03:50.370 --> 00:03:51.930
and variations in action,

78
00:03:51.930 --> 00:03:53.760
so that you get a better understanding

79
00:03:53.760 --> 00:03:55.920
for these different events and what they do.

80
00:03:55.920 --> 00:03:59.340
But this documentation page, which you also find linked

81
00:03:59.340 --> 00:04:02.130
to this lecture, also is a very useful page,

82
00:04:02.130 --> 00:04:04.110
you should definitely take a look at

83
00:04:04.110 --> 00:04:06.300
because this contains all the information

84
00:04:06.300 --> 00:04:10.020
you could possibly need for any use case you have.

85
00:04:10.020 --> 00:04:12.420
Now back here to this project,

86
00:04:12.420 --> 00:04:14.400
since we have so many events available,

87
00:04:14.400 --> 00:04:17.313
the question is what's the right event for this workflow?

88
00:04:18.149 --> 00:04:20.700
Well, that of course simply depends on what your goal is

89
00:04:20.700 --> 00:04:22.500
but here I would say it makes sense

90
00:04:22.500 --> 00:04:25.110
that we wanna run all these tests

91
00:04:25.110 --> 00:04:28.320
whenever a new push happens,

92
00:04:28.320 --> 00:04:33.320
so whenever we push a new commit to our remote repository.

93
00:04:33.720 --> 00:04:36.033
And therefore we can simply write push here.

94
00:04:37.050 --> 00:04:41.100
And push is of course one of the events supported by GitHub

95
00:04:41.100 --> 00:04:43.080
and as you can probably imagine,

96
00:04:43.080 --> 00:04:46.893
one of the more important events, which is used quite a bit.

97
00:04:47.880 --> 00:04:49.920
So here it states push event

98
00:04:49.920 --> 00:04:51.810
and there are actually different ways

99
00:04:51.810 --> 00:04:53.490
of defining this push event

100
00:04:53.490 --> 00:04:56.850
because you can for example, also define that only pushes

101
00:04:56.850 --> 00:05:00.120
to specific branches should trigger this workflow

102
00:05:00.120 --> 00:05:02.400
but for the moment, that does not matter to us

103
00:05:02.400 --> 00:05:06.450
so we can use this simple form here of defining this event,

104
00:05:06.450 --> 00:05:09.663
we'll dive into more advanced definition of forms later.

105
00:05:10.740 --> 00:05:12.930
So now this workflow with this name should run

106
00:05:12.930 --> 00:05:16.260
whenever a new commit is pushed to the repository,

107
00:05:16.260 --> 00:05:19.143
next we have to define a jobs that should be executed.

108
00:05:20.040 --> 00:05:22.710
And we'll start with one simple job here

109
00:05:22.710 --> 00:05:26.910
which I'll name test, which will perform these well, tests.

110
00:05:26.910 --> 00:05:29.400
And here what we have to do as a first step

111
00:05:29.400 --> 00:05:32.070
is we have to define our runner,

112
00:05:32.070 --> 00:05:35.490
which in my case will again ubuntu-latest

113
00:05:35.490 --> 00:05:39.840
on which we wanna run this job or these steps

114
00:05:39.840 --> 00:05:41.910
that belong to this job,

115
00:05:41.910 --> 00:05:45.390
and the steps are the next thing that has to be defined.

116
00:05:45.390 --> 00:05:49.260
Here, we use these dashes to define all these steps

117
00:05:49.260 --> 00:05:51.270
and I'll give my steps names.

118
00:05:51.270 --> 00:05:54.270
And the first step which I define here,

119
00:05:54.270 --> 00:05:57.360
is a step that should actually get the code,

120
00:05:57.360 --> 00:06:00.540
download the code from the repository

121
00:06:00.540 --> 00:06:02.970
because that's really important to understand,

122
00:06:02.970 --> 00:06:06.480
your jobs and the steps that belong to these jobs,

123
00:06:06.480 --> 00:06:10.830
run on servers, on machines owned by GitHub

124
00:06:10.830 --> 00:06:13.230
or by you if you bring your own servers,

125
00:06:13.230 --> 00:06:16.140
but here we're using a GitHub server.

126
00:06:16.140 --> 00:06:19.260
They don't run inside of your repository,

127
00:06:19.260 --> 00:06:21.870
you could think that they do, but they don't.

128
00:06:21.870 --> 00:06:24.690
They are related to the repository,

129
00:06:24.690 --> 00:06:28.260
they can get easy access to the repository code

130
00:06:28.260 --> 00:06:30.990
but they don't run in the repository.

131
00:06:30.990 --> 00:06:33.030
The repository is no server,

132
00:06:33.030 --> 00:06:36.510
if anything, it's just a folder on a hard drive

133
00:06:36.510 --> 00:06:39.630
on some machine owned by GitHub.

134
00:06:39.630 --> 00:06:41.520
That's really important to keep in mind

135
00:06:41.520 --> 00:06:43.500
because if you keep that in mind,

136
00:06:43.500 --> 00:06:45.660
it should be clear that this server

137
00:06:45.660 --> 00:06:48.780
which you get by GitHub to run your steps on,

138
00:06:48.780 --> 00:06:52.140
does not have your code automatically.

139
00:06:52.140 --> 00:06:55.230
Instead, if you have some steps that rely

140
00:06:55.230 --> 00:06:59.520
on your code to be there as these steps here will,

141
00:06:59.520 --> 00:07:03.060
you have to download your code as a first step.

142
00:07:03.060 --> 00:07:06.210
If you wanna have steps that install dependencies

143
00:07:06.210 --> 00:07:09.690
and run your tests, you must first get your code

144
00:07:09.690 --> 00:07:12.990
onto this server that's provided by GitHub

145
00:07:12.990 --> 00:07:16.260
and that's therefore the actual first step I'll define here,

146
00:07:16.260 --> 00:07:18.480
a step that will download the code

147
00:07:18.480 --> 00:07:20.400
from this GitHub repository

148
00:07:20.400 --> 00:07:23.820
onto this runner, onto this server.

149
00:07:23.820 --> 00:07:27.120
And that's where we will explore another key building block

150
00:07:27.120 --> 00:07:30.123
provided by GitHub Actions and action.

