WEBVTT
1
00:00:02.070 --> 00:00:04.500
So, that's how you can put a Job,

2
00:00:04.500 --> 00:00:06.540
and its Steps into a container,

3
00:00:06.540 --> 00:00:08.490
which as mentioned can be useful,

4
00:00:08.490 --> 00:00:11.873
if you need full control over the environment.

5
00:00:11.873 --> 00:00:14.730
Now, you can also use containers

6
00:00:14.730 --> 00:00:16.920
in conjunction with GitHub Actions,

7
00:00:16.920 --> 00:00:19.290
to spin up so-called service containers.

8
00:00:19.290 --> 00:00:22.980
Now, we did just see how we can put a Job into a container,

9
00:00:22.980 --> 00:00:25.890
and for example, run our tests inside of a container.

10
00:00:25.890 --> 00:00:28.200
But no matter, if you did that or not.

11
00:00:28.200 --> 00:00:31.530
So no matter, if you're using a container to run your Job in

12
00:00:31.530 --> 00:00:35.340
or if you're running the Job directly on the runner itself,

13
00:00:35.340 --> 00:00:37.980
you sometimes have Steps that would benefit

14
00:00:37.980 --> 00:00:41.850
from having some extra service to interact with.

15
00:00:41.850 --> 00:00:43.080
In a concrete example,

16
00:00:43.080 --> 00:00:47.130
could be automated tests, where your code should work

17
00:00:47.130 --> 00:00:51.870
with some database, that's not the production database,

18
00:00:51.870 --> 00:00:54.930
because your automated tests should not accidentally,

19
00:00:54.930 --> 00:00:57.510
manipulate production data.

20
00:00:57.510 --> 00:00:59.070
So, these automated tests,

21
00:00:59.070 --> 00:01:02.430
which we might be running as part of our Workflow,

22
00:01:02.430 --> 00:01:04.110
as we're actually also doing it here,

23
00:01:04.110 --> 00:01:05.610
in this example I showed you

24
00:01:05.610 --> 00:01:09.330
with the test Job, where I do have this test step

25
00:01:09.330 --> 00:01:12.810
that does run some automated tests that will actually,

26
00:01:12.810 --> 00:01:15.750
lead to our database being queried.

27
00:01:15.750 --> 00:01:18.780
Such tests should not work with production data

28
00:01:18.780 --> 00:01:21.450
because they could accidentally change that data.

29
00:01:21.450 --> 00:01:23.340
And even if they don't do that,

30
00:01:23.340 --> 00:01:26.220
they still lead to some extra work that must be performed

31
00:01:26.220 --> 00:01:28.470
by the production database server.

32
00:01:28.470 --> 00:01:31.080
And you of course, don't wanna add more work

33
00:01:31.080 --> 00:01:35.340
than necessary to that production database server.

34
00:01:35.340 --> 00:01:36.900
And they offer as a solution,

35
00:01:36.900 --> 00:01:39.060
you might use a testing database,

36
00:01:39.060 --> 00:01:42.240
and that's where service containers come into play,

37
00:01:42.240 --> 00:01:44.910
because you could, of course, host a testing database

38
00:01:44.910 --> 00:01:48.390
that runs on some extra testing database server.

39
00:01:48.390 --> 00:01:51.270
And that is what I also talked about earlier

40
00:01:51.270 --> 00:01:54.780
in the course where, for example, with MongoDB Atlas,

41
00:01:54.780 --> 00:01:57.120
you could of course, add an extra cluster,

42
00:01:57.120 --> 00:01:59.460
that's only used by your automated tests,

43
00:01:59.460 --> 00:02:01.380
and your development environment

44
00:02:01.380 --> 00:02:02.850
so that you have a separation

45
00:02:02.850 --> 00:02:05.070
between your database and your database server,

46
00:02:05.070 --> 00:02:06.720
that's used for production.

47
00:02:06.720 --> 00:02:08.610
And the database and the database server,

48
00:02:08.610 --> 00:02:10.440
that's used for testing.

49
00:02:10.440 --> 00:02:12.510
But of course, setting up such an extra server

50
00:02:12.510 --> 00:02:13.860
is extra work.

51
00:02:13.860 --> 00:02:16.737
And of course, that server might also be running at times

52
00:02:16.737 --> 00:02:18.240
where it's not needed,

53
00:02:18.240 --> 00:02:20.790
where you're not performing any tests.

54
00:02:20.790 --> 00:02:22.110
And then you might be paying

55
00:02:22.110 --> 00:02:25.200
for that testing database server.

56
00:02:25.200 --> 00:02:27.570
That's why, it could be nice to actually,

57
00:02:27.570 --> 00:02:32.550
run that testing database server inside of a container.

58
00:02:32.550 --> 00:02:35.700
So, inside of an environment that has everything needed

59
00:02:35.700 --> 00:02:39.540
by the database only whilst, your tests are running.

60
00:02:39.540 --> 00:02:42.870
And which is then shut down, once your tests are finished.

61
00:02:42.870 --> 00:02:44.610
And that's exactly what these

62
00:02:44.610 --> 00:02:48.180
GitHub Actions service containers are all about.

63
00:02:48.180 --> 00:02:51.935
They allow you to run extra services side-by-side

64
00:02:51.935 --> 00:02:55.170
with your Jobs and their Steps.

65
00:02:55.170 --> 00:02:58.830
So that they can be used by your Jobs and the Steps.

66
00:02:58.830 --> 00:03:02.370
And you could, for example, run a database in a container,

67
00:03:02.370 --> 00:03:04.200
whilst, your jobs are running

68
00:03:04.200 --> 00:03:07.170
so that your Steps and your Jobs can reach out

69
00:03:07.170 --> 00:03:10.350
to that database, that's running side-by-side.

70
00:03:10.350 --> 00:03:12.570
And as soon as your Workflow finishes,

71
00:03:12.570 --> 00:03:15.360
those service containers will also be shut down.

72
00:03:15.360 --> 00:03:17.550
And therefore, these testing databases

73
00:03:17.550 --> 00:03:21.930
will only be available when your Jobs are currently running.

74
00:03:21.930 --> 00:03:24.210
And of course, using service containers

75
00:03:24.210 --> 00:03:27.613
for running testing databases is just one example,

76
00:03:27.613 --> 00:03:30.810
but a quite common and popular one.

77
00:03:30.810 --> 00:03:33.150
You could use this feature for any service,

78
00:03:33.150 --> 00:03:35.580
that's needed by your Jobs, though.

79
00:03:35.580 --> 00:03:38.913
So, that's the idea behind this service container feature.

