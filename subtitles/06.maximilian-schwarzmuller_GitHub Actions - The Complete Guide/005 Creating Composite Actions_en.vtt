WEBVTT
1
00:00:02.100 --> 00:00:03.060
So we're going

2
00:00:03.060 --> 00:00:05.250
to start building a custom action here

3
00:00:05.250 --> 00:00:07.830
and we're going to start with composite actions

4
00:00:07.830 --> 00:00:11.220
simply because that's the simplest kind of action

5
00:00:11.220 --> 00:00:13.560
to get started with but just to be clear,

6
00:00:13.560 --> 00:00:16.410
this does not mean that it's a useless kind of action.

7
00:00:16.410 --> 00:00:18.300
Instead, the opposite is the case.

8
00:00:18.300 --> 00:00:20.580
This is a very useful kind of action

9
00:00:20.580 --> 00:00:22.980
for simplifying your workflows

10
00:00:22.980 --> 00:00:26.310
and reusing repeated logic and steps.

11
00:00:26.310 --> 00:00:29.340
And if we take a look at this example workflow

12
00:00:29.340 --> 00:00:31.080
in this example project,

13
00:00:31.080 --> 00:00:32.400
there are some steps

14
00:00:32.400 --> 00:00:35.490
which are repeated in a lot of jobs there.

15
00:00:35.490 --> 00:00:37.890
For example, the step for checking out the code,

16
00:00:37.890 --> 00:00:40.530
foe then caching the dependencies

17
00:00:40.530 --> 00:00:43.530
or restoring the cached dependencies

18
00:00:43.530 --> 00:00:45.690
and for installing the dependencies

19
00:00:45.690 --> 00:00:47.643
if they were not cached.

20
00:00:48.480 --> 00:00:50.490
These steps, these three steps

21
00:00:50.490 --> 00:00:54.330
are repeated in three jobs of this workflow.

22
00:00:54.330 --> 00:00:56.160
And if you have something like this,

23
00:00:56.160 --> 00:00:57.900
that's always a great use case

24
00:00:57.900 --> 00:01:00.930
for building a custom composite action.

25
00:01:00.930 --> 00:01:02.010
Of course, you don't have

26
00:01:02.010 --> 00:01:04.500
to build a custom composite action.

27
00:01:04.500 --> 00:01:06.630
You can simply copy and paste the code

28
00:01:06.630 --> 00:01:09.120
and repeat the configuration code here

29
00:01:09.120 --> 00:01:11.610
but you could also build a custom action

30
00:01:11.610 --> 00:01:13.210
and that's what we will do here.

31
00:01:14.190 --> 00:01:16.290
Now, when it comes to building custom actions,

32
00:01:16.290 --> 00:01:18.420
you have a couple of choices.

33
00:01:18.420 --> 00:01:20.430
You can create a brand new project

34
00:01:20.430 --> 00:01:22.380
and a brand new repository,

35
00:01:22.380 --> 00:01:26.040
a brand new GitHub repository for your action

36
00:01:26.040 --> 00:01:27.960
and then if it's a public repository,

37
00:01:27.960 --> 00:01:30.270
that could be used by any other workflow

38
00:01:30.270 --> 00:01:33.630
in any other repository as an action.

39
00:01:33.630 --> 00:01:36.630
So your actions can live in their own repositories

40
00:01:36.630 --> 00:01:39.870
and then you could use them straight from there.

41
00:01:39.870 --> 00:01:41.850
But you can also add actions

42
00:01:41.850 --> 00:01:43.650
to projects you already have

43
00:01:43.650 --> 00:01:47.070
so that they're then only available in those projects.

44
00:01:47.070 --> 00:01:49.170
And that's what I'll do here.

45
00:01:49.170 --> 00:01:50.760
In this existing project,

46
00:01:50.760 --> 00:01:54.180
under .github next to the workflows folder,

47
00:01:54.180 --> 00:01:55.890
I'll add an actions folder,

48
00:01:55.890 --> 00:01:57.630
though this name is up to you.

49
00:01:57.630 --> 00:01:59.910
It doesn't have to be actions.

50
00:01:59.910 --> 00:02:01.950
But it is, of course, a common choice

51
00:02:01.950 --> 00:02:03.603
since it makes a lot of sense.

52
00:02:04.560 --> 00:02:06.750
Now, in there, in that folder,

53
00:02:06.750 --> 00:02:08.580
I'm going to create the actions

54
00:02:08.580 --> 00:02:11.880
that will then only be usable by this project.

55
00:02:11.880 --> 00:02:15.090
So by workflows that are part of this project,

56
00:02:15.090 --> 00:02:17.820
not by any other workflows.

57
00:02:17.820 --> 00:02:20.670
If you wanna create actions that are available

58
00:02:20.670 --> 00:02:23.670
to different workflows in different repositories,

59
00:02:23.670 --> 00:02:27.150
you must create them as standalone repositories.

60
00:02:27.150 --> 00:02:30.420
Those actions must be standalone repositories

61
00:02:30.420 --> 00:02:31.473
if you want that.

62
00:02:32.670 --> 00:02:33.540
So here I'm going

63
00:02:33.540 --> 00:02:36.660
to create a locally available action instead

64
00:02:36.660 --> 00:02:38.130
and in this actions folder,

65
00:02:38.130 --> 00:02:40.200
I'm going to create another subfolder,

66
00:02:40.200 --> 00:02:43.140
which I'm going to name cached-deps

67
00:02:43.140 --> 00:02:45.070
for cached dependencies

68
00:02:46.410 --> 00:02:50.430
because my goal is to outsource the step

69
00:02:50.430 --> 00:02:52.230
for caching the dependencies

70
00:02:52.230 --> 00:02:54.510
and for installing the dependencies

71
00:02:54.510 --> 00:02:56.970
into a separate action.

72
00:02:56.970 --> 00:03:00.540
Not the code for checking out the repository code

73
00:03:00.540 --> 00:03:03.315
because since my action will only be part

74
00:03:03.315 --> 00:03:05.910
of that repository here,

75
00:03:05.910 --> 00:03:08.430
I must get the code of the repository

76
00:03:08.430 --> 00:03:12.780
before I will be able to use my locally defined action.

77
00:03:12.780 --> 00:03:14.550
If my action would be defined

78
00:03:14.550 --> 00:03:17.100
as a standalone public repository,

79
00:03:17.100 --> 00:03:19.530
then I could move the checkout code

80
00:03:19.530 --> 00:03:21.180
into that separate action

81
00:03:21.180 --> 00:03:24.270
because I could then reference the action

82
00:03:24.270 --> 00:03:27.120
via the repository URL.

83
00:03:27.120 --> 00:03:29.280
But since the definition for my action

84
00:03:29.280 --> 00:03:30.900
will be part of this project,

85
00:03:30.900 --> 00:03:33.900
the checkout code can't be part of the action itself

86
00:03:33.900 --> 00:03:36.330
because we must check out the project code

87
00:03:36.330 --> 00:03:38.610
before we can use the action defined

88
00:03:38.610 --> 00:03:41.400
in the project code, and in the project files.

89
00:03:41.400 --> 00:03:43.083
That hopefully makes sense.

90
00:03:44.010 --> 00:03:45.897
That's why I'm just moving the caching

91
00:03:45.897 --> 00:03:50.013
and the dependency installation step into my custom action.

92
00:03:51.000 --> 00:03:53.940
But speaking of that custom action here,

93
00:03:53.940 --> 00:03:56.520
how can a custom action be created now

94
00:03:56.520 --> 00:03:59.520
in that folder which we created here?

95
00:03:59.520 --> 00:04:02.910
Well, no matter which kind of action you're creating,

96
00:04:02.910 --> 00:04:04.470
if it's a composite action,

97
00:04:04.470 --> 00:04:06.870
a JavaScript or a Docker action,

98
00:04:06.870 --> 00:04:10.920
you always must add a action.yml file.

99
00:04:10.920 --> 00:04:13.890
So a file that contains the configuration

100
00:04:13.890 --> 00:04:17.160
and definition of that action.

101
00:04:17.160 --> 00:04:20.070
This file must be part of any action you create.

102
00:04:20.070 --> 00:04:23.130
It also must be part of any repository

103
00:04:23.130 --> 00:04:25.533
that holds an action you might create.

104
00:04:26.700 --> 00:04:28.050
So here in this file,

105
00:04:28.050 --> 00:04:30.420
we now configure this action.

106
00:04:30.420 --> 00:04:32.310
And for this composite action,

107
00:04:32.310 --> 00:04:35.340
this also is the only file we need.

108
00:04:35.340 --> 00:04:38.580
For JavaScript and Docker, we'll need more files

109
00:04:38.580 --> 00:04:39.810
as you will learn later,

110
00:04:39.810 --> 00:04:42.540
but for a composite action, this is the only file,

111
00:04:42.540 --> 00:04:44.610
and in this action.yml file,

112
00:04:44.610 --> 00:04:47.040
we start by giving our action a name.

113
00:04:47.040 --> 00:04:51.060
For example Get Dependencies

114
00:04:51.060 --> 00:04:54.693
or maybe Get & Cache Dependencies is a better name.

115
00:04:55.770 --> 00:04:58.500
So that's similar to the workflow definition file

116
00:04:58.500 --> 00:05:00.510
where we also specify the name.

117
00:05:00.510 --> 00:05:02.820
However here, we specify a name

118
00:05:02.820 --> 00:05:06.630
but now we don't specify an on key.

119
00:05:06.630 --> 00:05:09.750
That does not exist for custom actions

120
00:05:09.750 --> 00:05:12.240
because actions are not workflows,

121
00:05:12.240 --> 00:05:15.720
instead they are used as part of workflows.

122
00:05:15.720 --> 00:05:17.550
Therefore, they don't need a trigger.

123
00:05:17.550 --> 00:05:19.230
Instead they will be included

124
00:05:19.230 --> 00:05:21.810
in workflow definition files later.

125
00:05:21.810 --> 00:05:23.820
Hence the next key we add here instead

126
00:05:23.820 --> 00:05:28.820
is a description where we could say get the dependencies

127
00:05:28.920 --> 00:05:31.440
and cache them.

128
00:05:31.440 --> 00:05:33.390
Maybe we also add some clarification

129
00:05:33.390 --> 00:05:37.110
that we'll use npm for getting the dependencies.

130
00:05:37.110 --> 00:05:39.090
This description is important

131
00:05:39.090 --> 00:05:42.150
because if we would publish an action to the marketplace,

132
00:05:42.150 --> 00:05:44.310
it's essentially the description

133
00:05:44.310 --> 00:05:45.690
that's showing up here,

134
00:05:45.690 --> 00:05:47.430
the title that shows up here,

135
00:05:47.430 --> 00:05:50.940
the name of the action and then the description below it.

136
00:05:50.940 --> 00:05:54.090
So therefore now we have that name and that description.

137
00:05:54.090 --> 00:05:59.090
Next, for the composite action, we add the runs key.

138
00:05:59.220 --> 00:06:01.560
So not steps or anything like that

139
00:06:01.560 --> 00:06:03.420
but instead runs.

140
00:06:03.420 --> 00:06:07.920
And runs then needs a nested key called using,

141
00:06:07.920 --> 00:06:11.340
which must be set to composite here.

142
00:06:11.340 --> 00:06:13.350
So this must be composite.

143
00:06:13.350 --> 00:06:15.570
Make sure you don't have a typo in there

144
00:06:15.570 --> 00:06:18.930
and this also must be using and this must be runs.

145
00:06:18.930 --> 00:06:22.260
Up to this point, you have no choices regarding that.

146
00:06:22.260 --> 00:06:24.060
And this will tell GitHub Actions

147
00:06:24.060 --> 00:06:26.643
that this is a custom composite action.

148
00:06:27.570 --> 00:06:29.640
Now as a next step,

149
00:06:29.640 --> 00:06:33.540
no pun intended, we add the steps key here.

150
00:06:33.540 --> 00:06:35.340
So now we have steps here

151
00:06:35.340 --> 00:06:36.810
and now nested below that,

152
00:06:36.810 --> 00:06:41.190
we define steps basically as we also defined them here

153
00:06:41.190 --> 00:06:43.980
in our workflow definition file.

154
00:06:43.980 --> 00:06:45.600
Though I will highlight

155
00:06:45.600 --> 00:06:48.630
that it's the official syntax documentation

156
00:06:48.630 --> 00:06:51.690
for custom actions that should be visited

157
00:06:51.690 --> 00:06:54.990
to learn all about the different fields that are supported

158
00:06:54.990 --> 00:06:56.970
for these steps.

159
00:06:56.970 --> 00:06:59.430
Here you can learn all about the fields

160
00:06:59.430 --> 00:07:02.070
that can be added to the individual steps

161
00:07:02.070 --> 00:07:04.110
but in general, this is similar

162
00:07:04.110 --> 00:07:07.020
to what you learned about steps and workflows.

163
00:07:07.020 --> 00:07:09.420
So therefore, what I can actually do here

164
00:07:09.420 --> 00:07:11.940
is I can grab these cached dependencies

165
00:07:11.940 --> 00:07:15.735
and the installed dependencies steps from my workflow,

166
00:07:15.735 --> 00:07:19.260
and simply paste this here below steps

167
00:07:19.260 --> 00:07:20.610
in my custom action.

168
00:07:20.610 --> 00:07:23.730
Just make sure you don't mess up the indentation.

169
00:07:23.730 --> 00:07:25.593
It should be indented like this.

170
00:07:27.420 --> 00:07:32.420
So now I add these two steps as steps to this custom action,

171
00:07:32.610 --> 00:07:35.820
and I can keep all the keys I was using in those steps

172
00:07:35.820 --> 00:07:37.443
because they're still supported.

173
00:07:38.280 --> 00:07:41.430
That's especially also true for the if key here

174
00:07:41.430 --> 00:07:44.520
where I can still run this step conditionally

175
00:07:44.520 --> 00:07:47.043
only if we had no cache hit here.

176
00:07:47.910 --> 00:07:50.280
Now, one special key that must be added

177
00:07:50.280 --> 00:07:52.830
if you're using the run key though

178
00:07:52.830 --> 00:07:56.520
is the shell key where you choose which shell

179
00:07:56.520 --> 00:07:59.400
should be used for executing the step.

180
00:07:59.400 --> 00:08:02.190
And here I wanna use bash as a shell.

181
00:08:02.190 --> 00:08:04.680
So that's an extra setting you must add here

182
00:08:04.680 --> 00:08:07.200
when creating a custom composite action

183
00:08:07.200 --> 00:08:09.180
and you're using the run key.

184
00:08:09.180 --> 00:08:11.370
When using another action, as I'm doing it here,

185
00:08:11.370 --> 00:08:14.220
you don't have to add the shell key.

186
00:08:14.220 --> 00:08:16.020
And that's, by the way, also important.

187
00:08:16.020 --> 00:08:19.410
You can use other actions in your own actions.

188
00:08:19.410 --> 00:08:22.623
That is absolutely fine and totally normal.

189
00:08:23.670 --> 00:08:26.610
So with that, we added these two steps here

190
00:08:26.610 --> 00:08:29.700
and with that, we built our first action.

191
00:08:29.700 --> 00:08:32.462
Now we can use that action in our workflow.

