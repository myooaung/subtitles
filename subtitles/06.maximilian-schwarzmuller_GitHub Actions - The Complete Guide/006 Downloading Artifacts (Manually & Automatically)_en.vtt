WEBVTT
1
00:00:02.160 --> 00:00:04.800
So that is how we can upload artifacts

2
00:00:04.800 --> 00:00:08.253
and you also saw how they can be accessed manually.

3
00:00:09.270 --> 00:00:11.430
Now let's say we wanna use these artifacts

4
00:00:11.430 --> 00:00:13.230
in a deploy job though

5
00:00:13.230 --> 00:00:16.530
because that would, of course, be reasonable to assume.

6
00:00:16.530 --> 00:00:18.450
We're generating those files here

7
00:00:18.450 --> 00:00:21.600
in the build job and now let's say this deploy job

8
00:00:21.600 --> 00:00:25.740
does not just output some dummy message as it does here,

9
00:00:25.740 --> 00:00:28.020
but instead, it really takes those files

10
00:00:28.020 --> 00:00:30.420
and stores them on a web server.

11
00:00:30.420 --> 00:00:31.530
I'm not doing this here

12
00:00:31.530 --> 00:00:35.160
because there's a broad variety of web hosting providers

13
00:00:35.160 --> 00:00:37.380
and most of them provide their own actions

14
00:00:37.380 --> 00:00:39.990
that could be used for uploading files to them

15
00:00:39.990 --> 00:00:42.300
and it's simply not the main focus of the course.

16
00:00:42.300 --> 00:00:44.430
That's why we have this dummy script here,

17
00:00:44.430 --> 00:00:47.280
though we will see a complete deployment process

18
00:00:47.280 --> 00:00:49.230
a little bit later in the course.

19
00:00:49.230 --> 00:00:50.730
But let's simply assume

20
00:00:50.730 --> 00:00:53.640
that we're really using those files here.

21
00:00:53.640 --> 00:00:55.200
And if we're doing that,

22
00:00:55.200 --> 00:00:57.690
if that's the plan in this deploy job,

23
00:00:57.690 --> 00:00:59.160
then we, of course, need a way

24
00:00:59.160 --> 00:01:02.010
of getting hold of the files produced

25
00:01:02.010 --> 00:01:04.143
and uploaded in the previous job.

26
00:01:05.010 --> 00:01:08.250
Now, since these jobs run on their own runners,

27
00:01:08.250 --> 00:01:10.770
every job gets its own runner machine.

28
00:01:10.770 --> 00:01:13.380
The files that are produced in the build job

29
00:01:13.380 --> 00:01:16.470
will not automatically exist in the deploy job

30
00:01:16.470 --> 00:01:18.750
because this runs on a different machine,

31
00:01:18.750 --> 00:01:21.180
even though it has the same runner definition

32
00:01:21.180 --> 00:01:23.760
but it's a different machine on which this job

33
00:01:23.760 --> 00:01:24.933
will be executed.

34
00:01:25.800 --> 00:01:28.050
So in order to get those artifacts

35
00:01:28.050 --> 00:01:30.390
that were updated in the previous job,

36
00:01:30.390 --> 00:01:33.093
we need to download them here in this job.

37
00:01:33.930 --> 00:01:35.910
Therefore here, I'll add a new step,

38
00:01:35.910 --> 00:01:38.760
which I'll name Get build artifacts

39
00:01:38.760 --> 00:01:41.610
and then here we can use another action provided

40
00:01:41.610 --> 00:01:43.080
by the GitHub team

41
00:01:43.080 --> 00:01:47.760
and that is the download-artifact action.

42
00:01:47.760 --> 00:01:50.670
And here I'll also use version three.

43
00:01:50.670 --> 00:01:53.400
So we get the upload-artifact action,

44
00:01:53.400 --> 00:01:55.350
which does exactly what the name implies

45
00:01:55.350 --> 00:01:57.960
and we get the download-artifact action,

46
00:01:57.960 --> 00:01:59.940
which also does what the name implies.

47
00:01:59.940 --> 00:02:02.044
It will download the artifacts uploaded

48
00:02:02.044 --> 00:02:05.253
by a previous upload artifact action.

49
00:02:06.090 --> 00:02:07.650
Therefore, it's, of course, important

50
00:02:07.650 --> 00:02:11.160
that we have this needs definition here

51
00:02:11.160 --> 00:02:13.530
because this deploy job must run

52
00:02:13.530 --> 00:02:14.970
after the build job

53
00:02:14.970 --> 00:02:16.950
because if it would run in parallel,

54
00:02:16.950 --> 00:02:19.500
we of course couldn't download the artifacts

55
00:02:19.500 --> 00:02:22.350
because they wouldn't have been uploaded yet.

56
00:02:22.350 --> 00:02:25.170
Now, for this download-artifact action,

57
00:02:25.170 --> 00:02:27.900
we also must add some configuration here

58
00:02:27.900 --> 00:02:29.580
with the with key

59
00:02:29.580 --> 00:02:33.390
because we, of course, must specify the artifact identifier,

60
00:02:33.390 --> 00:02:35.280
otherwise the workflow would not know

61
00:02:35.280 --> 00:02:37.053
which artifacts to download.

62
00:02:37.890 --> 00:02:40.380
You can upload multiple artifacts in one

63
00:02:40.380 --> 00:02:42.510
and the same job or in different jobs

64
00:02:42.510 --> 00:02:45.750
and that's why the identifier is important.

65
00:02:45.750 --> 00:02:47.910
So if we're here for download-artifact,

66
00:02:47.910 --> 00:02:50.310
you also add the name key

67
00:02:50.310 --> 00:02:52.680
and then we should use the same name as we used

68
00:02:52.680 --> 00:02:56.760
for uploading artifacts, dist-files in my case.

69
00:02:56.760 --> 00:03:00.300
This ensures that we download the right artifacts here

70
00:03:00.300 --> 00:03:04.560
and what this will do is it will simply grab the zip file

71
00:03:04.560 --> 00:03:06.960
that is produced by upload-artifact,

72
00:03:06.960 --> 00:03:09.810
download it and unzip it here.

73
00:03:09.810 --> 00:03:12.540
So therefore, thereafter these dist-files

74
00:03:12.540 --> 00:03:14.823
will be available in this deployed job.

75
00:03:15.750 --> 00:03:17.580
What's important to note though

76
00:03:17.580 --> 00:03:20.220
is that we'll loose the dist-folder

77
00:03:20.220 --> 00:03:22.530
and all the files that were in the dist folder

78
00:03:22.530 --> 00:03:24.900
will directly be available here

79
00:03:24.900 --> 00:03:28.560
in the folder in which this deploy job runs.

80
00:03:28.560 --> 00:03:32.220
You can see this if we output the contents here

81
00:03:32.220 --> 00:03:34.380
and we run the simple ls commend,

82
00:03:34.380 --> 00:03:36.030
which lists all the contents

83
00:03:36.030 --> 00:03:38.730
of the folder in which we currently are.

84
00:03:38.730 --> 00:03:42.000
Here we should see that we simply have all the contents

85
00:03:42.000 --> 00:03:45.360
of the dist folder available in that folder

86
00:03:45.360 --> 00:03:47.430
in which the deploy job runs.

87
00:03:47.430 --> 00:03:49.590
And that could be important for uploading them

88
00:03:49.590 --> 00:03:53.190
so that we don't try to navigate into some dist folder first

89
00:03:53.190 --> 00:03:55.050
and grab the files from in there

90
00:03:55.050 --> 00:03:56.310
but that instead the files

91
00:03:56.310 --> 00:03:57.690
that were in the dist folder

92
00:03:57.690 --> 00:03:59.580
will directly be available here

93
00:03:59.580 --> 00:04:02.430
because that is how they will be unpacked here

94
00:04:02.430 --> 00:04:04.890
by download-artifact.

95
00:04:04.890 --> 00:04:06.120
Now, enough of the talking.

96
00:04:06.120 --> 00:04:08.070
To make this a bit easier to grasp,

97
00:04:08.070 --> 00:04:11.220
I will simply stage those changes,

98
00:04:11.220 --> 00:04:13.170
create a new commit,

99
00:04:13.170 --> 00:04:16.980
added download artifact action,

100
00:04:16.980 --> 00:04:19.320
and push this, and just as before,

101
00:04:19.320 --> 00:04:21.720
the job will, of course, run automatically

102
00:04:21.720 --> 00:04:23.550
since I'm pushing to main.

103
00:04:23.550 --> 00:04:26.370
So again, we can wait for this workflow to complete

104
00:04:26.370 --> 00:04:29.673
so that we can then analyze what happened in deploy.

105
00:04:31.020 --> 00:04:32.700
The workflow finished here

106
00:04:32.700 --> 00:04:35.880
and if we now click into this deploy job,

107
00:04:35.880 --> 00:04:39.420
we can see that we've got our build artifacts here

108
00:04:39.420 --> 00:04:42.450
and new see that the total number of files downloaded

109
00:04:42.450 --> 00:04:43.860
was five in the end

110
00:04:43.860 --> 00:04:48.270
because it unpacked those artifacts automatically for us.

111
00:04:48.270 --> 00:04:49.980
And under output contents,

112
00:04:49.980 --> 00:04:51.930
we see that after running ls,

113
00:04:51.930 --> 00:04:54.270
which simply lists the contents

114
00:04:54.270 --> 00:04:56.610
of the folder we're currently in,

115
00:04:56.610 --> 00:04:59.880
we got all the content of the dist folder in here.

116
00:04:59.880 --> 00:05:00.720
So that's what I meant.

117
00:05:00.720 --> 00:05:02.640
We don't see the dist folder here

118
00:05:02.640 --> 00:05:04.560
into which we would have to navigate

119
00:05:04.560 --> 00:05:06.510
in order to access these files

120
00:05:06.510 --> 00:05:09.360
but instead we have the files themselves already.

121
00:05:09.360 --> 00:05:11.040
And that's just something to keep in mind

122
00:05:11.040 --> 00:05:14.760
if you would be using these files in subsequent steps.

123
00:05:14.760 --> 00:05:18.450
And that's how we can upload and download our artifacts,

124
00:05:18.450 --> 00:05:21.093
both manually and automatically.

