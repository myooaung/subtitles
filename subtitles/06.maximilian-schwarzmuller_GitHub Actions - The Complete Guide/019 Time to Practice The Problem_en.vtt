WEBVTT
1
00:00:02.070 --> 00:00:05.220
Now that we explored a lot of key concepts

2
00:00:05.220 --> 00:00:07.350
it's time to practice what you learned.

3
00:00:07.350 --> 00:00:10.320
Because only practice makes perfect.

4
00:00:10.320 --> 00:00:14.580
And for that you find another example project attached

5
00:00:14.580 --> 00:00:16.079
which you should download

6
00:00:16.079 --> 00:00:19.890
and turn into a local Git Repository.

7
00:00:19.890 --> 00:00:23.520
And then you should also create a GitHub Repository

8
00:00:23.520 --> 00:00:25.350
for that attached project.

9
00:00:25.350 --> 00:00:30.210
So a remote Repository and connect the local Git Repository

10
00:00:30.210 --> 00:00:33.420
to that remote GitHub Repository.

11
00:00:33.420 --> 00:00:35.970
So that in that GitHub Repository

12
00:00:35.970 --> 00:00:38.550
or for that GitHub Repository

13
00:00:38.550 --> 00:00:43.050
you can create two GitHub Actions Workflows.

14
00:00:43.050 --> 00:00:47.040
And the first Workflow will be a Workflow that tests

15
00:00:47.040 --> 00:00:48.720
and Lints the project

16
00:00:48.720 --> 00:00:52.980
and then also simulates the Deployment of the project

17
00:00:52.980 --> 00:00:56.310
whenever a new Commit is pushed.

18
00:00:56.310 --> 00:00:58.740
That's the first Workflow you should build

19
00:00:58.740 --> 00:01:00.960
and for this Workflow you should

20
00:01:00.960 --> 00:01:04.620
of course download the project code whenever it's triggered.

21
00:01:04.620 --> 00:01:07.740
You should then install any dependencies that are needed.

22
00:01:07.740 --> 00:01:09.810
And then you should run the Lint test

23
00:01:09.810 --> 00:01:13.740
and build scripts and also output some message

24
00:01:13.740 --> 00:01:17.640
like deploying project as part of the Workflow.

25
00:01:17.640 --> 00:01:20.160
Now the Lint test and build scripts

26
00:01:20.160 --> 00:01:23.400
are scripts that are included in the detached project

27
00:01:23.400 --> 00:01:25.260
in the package.jason file.

28
00:01:25.260 --> 00:01:26.610
There it's this lint,

29
00:01:26.610 --> 00:01:28.590
this test and this build script

30
00:01:28.590 --> 00:01:30.840
that should be executed as part of

31
00:01:30.840 --> 00:01:33.120
the GitHub Actions Workflow your building.

32
00:01:33.120 --> 00:01:35.250
And thereafter as mentioned you should

33
00:01:35.250 --> 00:01:37.560
simply output some dummy message

34
00:01:37.560 --> 00:01:40.500
in the shell of that Workflow runner.

35
00:01:40.500 --> 00:01:43.230
So in that Workflow environment.

36
00:01:43.230 --> 00:01:46.770
Now for this first Workflow it's up to you

37
00:01:46.770 --> 00:01:50.580
whether you want to use one Job for all three scripts

38
00:01:50.580 --> 00:01:54.060
or three different Jobs running after each other.

39
00:01:54.060 --> 00:01:55.260
And if you feel like it

40
00:01:55.260 --> 00:01:58.110
you can of course also build both versions.

41
00:01:58.110 --> 00:02:00.480
One version one Workflow with one job,

42
00:02:00.480 --> 00:02:02.820
and one Workflow with three jobs

43
00:02:02.820 --> 00:02:05.553
so that you practice both approaches.

44
00:02:06.510 --> 00:02:09.210
But that's just one of the two Workflows

45
00:02:09.210 --> 00:02:12.960
you should build this Lint, Test, Deploy Workflow.

46
00:02:12.960 --> 00:02:16.470
The other Workflow will require you to listen

47
00:02:16.470 --> 00:02:19.290
to an event to which we haven't listened yet

48
00:02:19.290 --> 00:02:20.880
in this course section.

49
00:02:20.880 --> 00:02:23.880
Because for this second Workflow I want you

50
00:02:23.880 --> 00:02:26.040
to build a GitHub Actions Workflow

51
00:02:26.040 --> 00:02:29.220
where you listen for the Issues Event.

52
00:02:29.220 --> 00:02:33.150
Which just like Push is one of the official events

53
00:02:33.150 --> 00:02:36.390
one of the official triggers you can listen to,

54
00:02:36.390 --> 00:02:39.180
which should start that Workflow whenever

55
00:02:39.180 --> 00:02:42.960
a new Issue related action happens.

56
00:02:42.960 --> 00:02:46.470
So for example when a new Issue is created.

57
00:02:46.470 --> 00:02:50.340
And all you should do in that Workflow is output

58
00:02:50.340 --> 00:02:54.990
the event details in the shell via echo.

59
00:02:54.990 --> 00:02:58.950
And I showed you how you can get access to some of the

60
00:02:58.950 --> 00:03:02.640
metadata that's gathered and provided by GitHub

61
00:03:02.640 --> 00:03:06.570
in your GitHub Action Workflow early in this section.

62
00:03:06.570 --> 00:03:09.240
So use that knowledge to simply output

63
00:03:09.240 --> 00:03:12.000
that collected metadata that is provided

64
00:03:12.000 --> 00:03:15.420
by GitHub Actions for your Workflow.

65
00:03:15.420 --> 00:03:18.660
So for this second Workflow which I want you to build

66
00:03:18.660 --> 00:03:20.880
you should listen to the Issues Event

67
00:03:20.880 --> 00:03:24.960
and use that GitHub Context Object I mentioned earlier

68
00:03:24.960 --> 00:03:27.120
in this course section.

69
00:03:27.120 --> 00:03:29.400
So that's my exercise for you.

70
00:03:29.400 --> 00:03:32.160
In the next lecture I'll share my solution

71
00:03:32.160 --> 00:03:34.620
with you so that you can compare your solution

72
00:03:34.620 --> 00:03:36.483
and your approach to mine.

