WEBVTT
1
00:00:02.070 --> 00:00:04.440
To finally conclude this section here,

2
00:00:04.440 --> 00:00:06.596
there's one last concept I wanna dive in,

3
00:00:06.596 --> 00:00:09.753
and that would be expressions and GitHub context.

4
00:00:10.800 --> 00:00:13.410
Thus far in all our steps,

5
00:00:13.410 --> 00:00:17.190
we had simple commands, which we just executed like this,

6
00:00:17.190 --> 00:00:19.533
and that will very often be the case.

7
00:00:20.400 --> 00:00:23.970
But sometimes, you also have certain actions

8
00:00:23.970 --> 00:00:28.970
or commands that need some metadata from the environment.

9
00:00:29.490 --> 00:00:31.020
For example, you could be working

10
00:00:31.020 --> 00:00:32.910
with environment variables,

11
00:00:32.910 --> 00:00:36.150
something we will explore later in the course.

12
00:00:36.150 --> 00:00:38.790
To show you what I mean without getting too advanced,

13
00:00:38.790 --> 00:00:41.490
I'll add a second workflow here,

14
00:00:41.490 --> 00:00:43.800
which I'll just name output.yml

15
00:00:43.800 --> 00:00:45.240
or that's the file name,

16
00:00:45.240 --> 00:00:50.240
and I'll name the workflow Output information.

17
00:00:51.150 --> 00:00:53.880
And I wanna trigger this workflow manually

18
00:00:53.880 --> 00:00:55.203
with workflow_dispatch.

19
00:00:56.760 --> 00:01:00.060
And now here, I'll just define one job,

20
00:01:00.060 --> 00:01:01.740
which I'll name info,

21
00:01:01.740 --> 00:01:05.492
and this job runs on ubuntu-latest.

22
00:01:06.630 --> 00:01:07.920
And what I wanna do here

23
00:01:07.920 --> 00:01:11.610
in my steps is I wanna output some meta information

24
00:01:11.610 --> 00:01:15.750
that's automatically passed into these jobs and steps.

25
00:01:15.750 --> 00:01:20.400
And this meta information is collectively named context.

26
00:01:20.400 --> 00:01:24.210
GitHub actions creates some context data

27
00:01:24.210 --> 00:01:26.880
with various pieces of information

28
00:01:26.880 --> 00:01:28.860
about the event trigger

29
00:01:28.860 --> 00:01:31.650
and the runner and other things

30
00:01:31.650 --> 00:01:35.880
that can be accessed inside of these steps.

31
00:01:35.880 --> 00:01:38.220
And to get a better feeling for the kind

32
00:01:38.220 --> 00:01:39.630
of information you're getting,

33
00:01:39.630 --> 00:01:40.830
which could be useful

34
00:01:40.830 --> 00:01:43.380
for certain tasks you wanna perform here,

35
00:01:43.380 --> 00:01:46.173
I'll just output some of the information we're getting.

36
00:01:47.220 --> 00:01:49.500
For example, here in my first step,

37
00:01:49.500 --> 00:01:53.070
I wanna output my GitHub context,

38
00:01:53.070 --> 00:01:56.160
which is an object or a collection of data

39
00:01:56.160 --> 00:01:58.560
with some general information

40
00:01:58.560 --> 00:02:02.610
about this workflow and the event trigger.

41
00:02:02.610 --> 00:02:04.260
Here I'll add the run key

42
00:02:04.260 --> 00:02:06.510
to execute a command in the shell

43
00:02:06.510 --> 00:02:09.600
and I'll output some information here.

44
00:02:09.600 --> 00:02:12.780
However, this time, I don't wanna hard code some text

45
00:02:12.780 --> 00:02:14.130
but instead, I wanna output

46
00:02:14.130 --> 00:02:16.800
that data I'm getting from GitHub.

47
00:02:16.800 --> 00:02:20.190
And for this, we're getting a special identifier,

48
00:02:20.190 --> 00:02:22.800
which we can use in our command line here.

49
00:02:22.800 --> 00:02:25.590
And that's the github identifier.

50
00:02:25.590 --> 00:02:27.630
However, if I just write it like this,

51
00:02:27.630 --> 00:02:30.270
I would just output the text GitHub here.

52
00:02:30.270 --> 00:02:33.720
Instead to access this dynamic value,

53
00:02:33.720 --> 00:02:37.290
this data object that's provided by GitHub here

54
00:02:37.290 --> 00:02:40.494
in this line of code in this command,

55
00:02:40.494 --> 00:02:42.790
I have to use a special syntax,

56
00:02:42.790 --> 00:02:44.610
which is a dollar sign

57
00:02:44.610 --> 00:02:48.513
and then two opening and two closing curly braces.

58
00:02:50.490 --> 00:02:53.490
And now this syntax signals to GitHub

59
00:02:53.490 --> 00:02:56.760
that this should now not be treated as text

60
00:02:56.760 --> 00:02:58.890
that's output in the command line

61
00:02:58.890 --> 00:03:02.460
or that's used like text in the command,

62
00:03:02.460 --> 00:03:05.280
but that instead here we wanna access

63
00:03:05.280 --> 00:03:07.590
some surrounding metadata,

64
00:03:07.590 --> 00:03:10.413
some metadata that's made available by GitHub.

65
00:03:11.340 --> 00:03:13.260
And in this case here, it's the github key

66
00:03:13.260 --> 00:03:14.430
which I wanna access,

67
00:03:14.430 --> 00:03:17.490
which is one of the officially available keys

68
00:03:17.490 --> 00:03:19.803
in the context of such a job.

69
00:03:19.803 --> 00:03:22.470
So this is not an arbitrary word.

70
00:03:22.470 --> 00:03:25.320
Instead, github is a reserved key name here,

71
00:03:25.320 --> 00:03:27.930
a reserved word so to say.

72
00:03:27.930 --> 00:03:31.470
And to make it readable, I wrap it in a function

73
00:03:31.470 --> 00:03:34.773
called toJSON, which is provided by GitHub.

74
00:03:35.700 --> 00:03:38.910
And you can search for GitHub actions context

75
00:03:38.910 --> 00:03:41.730
to learn about the different context objects

76
00:03:41.730 --> 00:03:43.080
that are available.

77
00:03:43.080 --> 00:03:45.840
Here you, for example, see that github object,

78
00:03:45.840 --> 00:03:47.640
which we're using right now,

79
00:03:47.640 --> 00:03:50.190
and we'll see other objects throughout this course.

80
00:03:50.190 --> 00:03:51.720
No worries.

81
00:03:51.720 --> 00:03:54.510
And you can search for GitHub actions functions

82
00:03:54.510 --> 00:03:57.930
or expressions to find this information page

83
00:03:57.930 --> 00:04:01.230
about this expression feature we're using here

84
00:04:01.230 --> 00:04:04.590
because this syntax here is called an expression,

85
00:04:04.590 --> 00:04:07.980
which simply means we're not outputting this as plain text.

86
00:04:07.980 --> 00:04:10.380
Instead, we're getting some metadata,

87
00:04:10.380 --> 00:04:12.720
some context data from GitHub

88
00:04:12.720 --> 00:04:15.150
and we're then converting this back to text

89
00:04:15.150 --> 00:04:16.860
that can be used in the commands,

90
00:04:16.860 --> 00:04:19.053
in this case, to output that data.

91
00:04:20.010 --> 00:04:22.230
And since this is a data object,

92
00:04:22.230 --> 00:04:24.810
we must convert it to some printable text,

93
00:04:24.810 --> 00:04:27.720
and that's what this toJSON function does.

94
00:04:27.720 --> 00:04:29.910
The expression syntax has a couple

95
00:04:29.910 --> 00:04:32.190
of built-in functions that can be used

96
00:04:32.190 --> 00:04:34.323
and toJSON is one of them.

97
00:04:35.160 --> 00:04:37.680
Again, these are all things we'll explore

98
00:04:37.680 --> 00:04:38.850
throughout this course

99
00:04:38.850 --> 00:04:41.520
and we'll see various expressions and features

100
00:04:41.520 --> 00:04:43.080
in action throughout this course.

101
00:04:43.080 --> 00:04:45.090
We're just getting started with it here.

102
00:04:45.090 --> 00:04:48.303
So no worries if it's not 100% clear yet.

103
00:04:49.800 --> 00:04:52.710
Now, with that, however, we can save this

104
00:04:52.710 --> 00:04:54.750
and we can create a new commit

105
00:04:54.750 --> 00:04:57.750
for this basic workflow we created here.

106
00:04:57.750 --> 00:05:02.680
So I'll commit this added output workflow

107
00:05:04.200 --> 00:05:07.683
and push this to my repository, just as I did before.

108
00:05:08.790 --> 00:05:12.060
Now, what this does is it creates a brand new workflow,

109
00:05:12.060 --> 00:05:14.190
this output information workflow

110
00:05:14.190 --> 00:05:16.950
and since this has a workflow_dispatch trigger

111
00:05:16.950 --> 00:05:18.510
and only that trigger,

112
00:05:18.510 --> 00:05:20.280
we have to trigger it manually,

113
00:05:20.280 --> 00:05:22.260
which is what I'll do here.

114
00:05:22.260 --> 00:05:25.080
With that, this workflow starts executing

115
00:05:25.080 --> 00:05:26.610
and it finishes super fast

116
00:05:26.610 --> 00:05:29.070
because we're just outputting some information here

117
00:05:29.070 --> 00:05:32.520
but what you see in this Output GitHub context step

118
00:05:32.520 --> 00:05:35.280
is that this data here,

119
00:05:35.280 --> 00:05:39.600
that's all fetched from this GitHub context object.

120
00:05:39.600 --> 00:05:42.330
So that's data that's provided by GitHub

121
00:05:42.330 --> 00:05:44.460
to this job and step.

122
00:05:44.460 --> 00:05:46.860
And that's data we could use in that step.

123
00:05:46.860 --> 00:05:49.890
For example, what we see is that here we get information

124
00:05:49.890 --> 00:05:51.210
about the repository

125
00:05:51.210 --> 00:05:54.633
to which this job and step and workflow belongs.

126
00:05:55.500 --> 00:05:57.450
This would have been useful before,

127
00:05:57.450 --> 00:05:59.250
especially with that URL

128
00:05:59.250 --> 00:06:01.440
if we would have manually cloned this code

129
00:06:01.440 --> 00:06:04.740
for this repository instead of using this checkout action,

130
00:06:04.740 --> 00:06:05.940
which we did,

131
00:06:05.940 --> 00:06:07.110
which is of course better

132
00:06:07.110 --> 00:06:09.150
but we could have used this metadata

133
00:06:09.150 --> 00:06:12.000
to manually clone the data.

134
00:06:12.000 --> 00:06:14.610
And we get a bunch of other information in here as well

135
00:06:14.610 --> 00:06:16.500
as you can tell, and that's just one

136
00:06:16.500 --> 00:06:18.630
of the available context objects.

137
00:06:18.630 --> 00:06:20.550
There also are other objects

138
00:06:20.550 --> 00:06:22.260
with other pieces of data.

139
00:06:22.260 --> 00:06:24.540
For example, about the runner environment

140
00:06:24.540 --> 00:06:28.440
or possible environment variables we might be using.

141
00:06:28.440 --> 00:06:30.960
Again, this is something we'll explore again

142
00:06:30.960 --> 00:06:32.310
and again throughout the course

143
00:06:32.310 --> 00:06:34.950
and we'll dive deeper into this throughout the course.

144
00:06:34.950 --> 00:06:36.540
I just wanna get you started

145
00:06:36.540 --> 00:06:40.170
with expressions and this context here

146
00:06:40.170 --> 00:06:42.840
or these context objects here.

147
00:06:42.840 --> 00:06:44.812
It's, by the way, also this GitHub context

148
00:06:44.812 --> 00:06:47.730
where we get information about the event

149
00:06:47.730 --> 00:06:49.980
that triggered this workflow

150
00:06:49.980 --> 00:06:53.073
and about some event data that's related to that.

151
00:06:54.300 --> 00:06:56.940
But that's it for getting started with that.

152
00:06:56.940 --> 00:06:58.423
It is another important feature

153
00:06:58.423 --> 00:07:00.333
you should be aware of though.

