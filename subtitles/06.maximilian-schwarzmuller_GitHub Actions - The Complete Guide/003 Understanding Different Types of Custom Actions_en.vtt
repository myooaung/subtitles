WEBVTT
1
00:00:02.040 --> 00:00:03.540
So now that we have an idea

2
00:00:03.540 --> 00:00:06.750
of why we might want to use custom actions,

3
00:00:06.750 --> 00:00:08.340
it's important to understand

4
00:00:08.340 --> 00:00:10.710
that there are different types of custom actions

5
00:00:10.710 --> 00:00:12.240
you can build.

6
00:00:12.240 --> 00:00:13.200
To be precise,

7
00:00:13.200 --> 00:00:15.990
there are three main types of custom actions

8
00:00:15.990 --> 00:00:17.040
you can build:

9
00:00:17.040 --> 00:00:18.570
JavaScript Actions,

10
00:00:18.570 --> 00:00:19.980
Docker Actions,

11
00:00:19.980 --> 00:00:22.620
and Composite Actions.

12
00:00:22.620 --> 00:00:24.960
Now, these are the three approaches you can use

13
00:00:24.960 --> 00:00:26.280
for building actions,

14
00:00:26.280 --> 00:00:30.360
and we will use all three approaches in this course section

15
00:00:30.360 --> 00:00:31.920
so that you see and learn

16
00:00:31.920 --> 00:00:34.140
how these three approaches work,

17
00:00:34.140 --> 00:00:36.960
but the result will always be the same.

18
00:00:36.960 --> 00:00:39.750
So the result will always be an action that you use

19
00:00:39.750 --> 00:00:42.120
like you're using these public actions,

20
00:00:42.120 --> 00:00:44.610
but when it comes to building custom actions,

21
00:00:44.610 --> 00:00:46.770
that's where you have some choices

22
00:00:46.770 --> 00:00:49.263
between these three approaches I mentioned.

23
00:00:50.250 --> 00:00:53.070
Now, JavaScript actions are simply actions

24
00:00:53.070 --> 00:00:57.360
where you write the logic of the action in JavaScript,

25
00:00:57.360 --> 00:01:00.600
so you define JavaScript code in a JavaScript file

26
00:01:00.600 --> 00:01:04.410
and that file will be executed whenever your action runs.

27
00:01:04.410 --> 00:01:06.450
That's the idea here.

28
00:01:06.450 --> 00:01:09.720
And in this action code, you can use JavaScript,

29
00:01:09.720 --> 00:01:13.590
to be precise, the NodeJS runtime with all its features

30
00:01:13.590 --> 00:01:15.780
and any packages of your choice

31
00:01:15.780 --> 00:01:19.920
to write any JavaScript application in the end

32
00:01:19.920 --> 00:01:23.760
that should be executed whenever your action runs.

33
00:01:23.760 --> 00:01:26.310
And it's there for a pretty straightforward way

34
00:01:26.310 --> 00:01:28.200
of writing a custom action

35
00:01:28.200 --> 00:01:30.120
as you will see in this course section

36
00:01:30.120 --> 00:01:32.670
at least if you know JavaScript.

37
00:01:32.670 --> 00:01:35.640
And that of course is an important prerequisite.

38
00:01:35.640 --> 00:01:38.370
Therefore, if you don't know JavaScript,

39
00:01:38.370 --> 00:01:40.560
then this is not a great approach

40
00:01:40.560 --> 00:01:43.440
because you must write your code with JavaScript

41
00:01:43.440 --> 00:01:46.020
if you choose this action type.

42
00:01:46.020 --> 00:01:48.600
Now an alternative to building your action

43
00:01:48.600 --> 00:01:50.280
as a JavaScript action

44
00:01:50.280 --> 00:01:52.740
would be to build a Docker action.

45
00:01:52.740 --> 00:01:54.210
And this makes a lot of sense if you,

46
00:01:54.210 --> 00:01:56.190
for example, don't know JavaScript

47
00:01:56.190 --> 00:01:58.830
but another programming language.

48
00:01:58.830 --> 00:02:02.460
A Docker action is basically a containerized action,

49
00:02:02.460 --> 00:02:05.520
so an application that you put into a container

50
00:02:05.520 --> 00:02:08.550
just as you could put jobs or services

51
00:02:08.550 --> 00:02:10.680
into containers earlier,

52
00:02:10.680 --> 00:02:14.820
and you build such a Docker action by defining a Dockerfile

53
00:02:14.820 --> 00:02:16.350
which simply configures

54
00:02:16.350 --> 00:02:19.650
how the image for this action container

55
00:02:19.650 --> 00:02:21.930
will be built and configured

56
00:02:21.930 --> 00:02:25.200
and then that Dockerfile will be used by GitHub

57
00:02:25.200 --> 00:02:27.570
to build a container based on the image

58
00:02:27.570 --> 00:02:29.760
defined by your Dockerfile

59
00:02:29.760 --> 00:02:32.580
and you can then perform any task of your choice

60
00:02:32.580 --> 00:02:35.400
with any programming language of your choice

61
00:02:35.400 --> 00:02:36.390
in that container

62
00:02:36.390 --> 00:02:38.820
since it is your container.

63
00:02:38.820 --> 00:02:40.680
You can use any base image,

64
00:02:40.680 --> 00:02:42.840
set up any environment you want,

65
00:02:42.840 --> 00:02:46.050
and therefore, of course, also create any environment

66
00:02:46.050 --> 00:02:48.870
for any programming language you want to use.

67
00:02:48.870 --> 00:02:51.420
Therefore, you have lots of flexibility

68
00:02:51.420 --> 00:02:55.110
but basic Docker knowledge is definitely required

69
00:02:55.110 --> 00:02:58.380
in order to get started with this approach.

70
00:02:58.380 --> 00:03:00.000
Nonetheless, we are of course

71
00:03:00.000 --> 00:03:03.603
also going to explore that approach in this course section.

72
00:03:04.620 --> 00:03:07.500
Now, the last kind of action you can build

73
00:03:07.500 --> 00:03:09.210
is a composite action

74
00:03:09.210 --> 00:03:12.090
or are composite actions.

75
00:03:12.090 --> 00:03:14.340
And the idea behind composite actions

76
00:03:14.340 --> 00:03:16.320
is that you don't write any code

77
00:03:16.320 --> 00:03:18.450
with any programming language

78
00:03:18.450 --> 00:03:21.630
but instead you combine multiple Workflow steps

79
00:03:21.630 --> 00:03:23.730
as you could have written them directly

80
00:03:23.730 --> 00:03:26.370
in the Workflow file itself as well

81
00:03:26.370 --> 00:03:27.933
in one single action.

82
00:03:28.770 --> 00:03:33.660
So you combine multiple run or uses commands or actions

83
00:03:33.660 --> 00:03:35.760
in a single composite action

84
00:03:35.760 --> 00:03:39.570
and that composite action can then be used in a Workflow.

85
00:03:39.570 --> 00:03:42.840
And therefore, composite actions are great for grouping

86
00:03:42.840 --> 00:03:44.760
and combining multiple steps

87
00:03:44.760 --> 00:03:48.930
that might be reused across jobs or workflows.

88
00:03:48.930 --> 00:03:51.180
And the great thing about composite actions

89
00:03:51.180 --> 00:03:54.870
is that no extra knowledge or skillset is needed

90
00:03:54.870 --> 00:03:56.640
because you won't write any code

91
00:03:56.640 --> 00:03:58.350
in any programming language.

92
00:03:58.350 --> 00:04:00.840
Instead, you're just going to define some steps

93
00:04:00.840 --> 00:04:04.230
as you already did it throughout this course.

94
00:04:04.230 --> 00:04:07.410
So these are the three kinds of actions you can create

95
00:04:07.410 --> 00:04:09.480
and these are the three kind of actions

96
00:04:09.480 --> 00:04:11.400
we're going to take a closer look at

97
00:04:11.400 --> 00:04:13.563
throughout this course section here.

