WEBVTT
1
00:00:02.100 --> 00:00:04.980
Now before we move on to other features,

2
00:00:04.980 --> 00:00:09.240
there's one last thing I wanna do with this if field.

3
00:00:09.240 --> 00:00:12.750
And for that I'll go back to step level.

4
00:00:12.750 --> 00:00:14.730
We got this caching step,

5
00:00:14.730 --> 00:00:16.410
and currently what we're doing here

6
00:00:16.410 --> 00:00:21.410
is we're caching this global npm cache folder

7
00:00:21.420 --> 00:00:24.390
and they offer this as restored when we have it cached

8
00:00:24.390 --> 00:00:27.090
and the dependencies didn't change,

9
00:00:27.090 --> 00:00:30.600
and therefore this npm ci step will be a bit faster

10
00:00:30.600 --> 00:00:34.353
because it will use this internally managed npm cache.

11
00:00:35.280 --> 00:00:37.620
It would be even faster though

12
00:00:37.620 --> 00:00:40.560
if it would cache the entire node modules folder

13
00:00:40.560 --> 00:00:42.210
which is the local folder

14
00:00:42.210 --> 00:00:45.600
with all the dependencies of this project installed.

15
00:00:45.600 --> 00:00:49.230
And we would not even run the npm ci step

16
00:00:49.230 --> 00:00:51.960
if we restored that folder.

17
00:00:51.960 --> 00:00:54.120
Because skipping this step

18
00:00:54.120 --> 00:00:55.920
also skips all the setup work

19
00:00:55.920 --> 00:00:59.190
related to that step and skips the part

20
00:00:59.190 --> 00:01:03.453
where npm internally checks whether it has its cache folder.

21
00:01:04.410 --> 00:01:07.200
So therefore we can speed up this workflow,

22
00:01:07.200 --> 00:01:10.050
this job and all the other jobs that use caching,

23
00:01:10.050 --> 00:01:13.260
by not cashing this global npm folder

24
00:01:13.260 --> 00:01:16.620
but instead the local node modules folder.

25
00:01:16.620 --> 00:01:19.560
And now I wanna skip this step here,

26
00:01:19.560 --> 00:01:21.810
this install dependencies step,

27
00:01:21.810 --> 00:01:24.663
if we successfully used our cache.

28
00:01:25.890 --> 00:01:29.160
Now to do that, we can add a if condition

29
00:01:29.160 --> 00:01:31.383
to this installed dependencies step.

30
00:01:32.310 --> 00:01:34.560
And now we just did a way of finding out

31
00:01:34.560 --> 00:01:37.440
whether we successfully got data from the cache,

32
00:01:37.440 --> 00:01:41.100
so if we had a cache hit as it's called.

33
00:01:41.100 --> 00:01:45.270
Now if we take a look at this cache action

34
00:01:45.270 --> 00:01:48.300
which we're using at the official documentation,

35
00:01:48.300 --> 00:01:53.300
we learned that this action actually has an output,

36
00:01:54.000 --> 00:01:57.660
the cache hit field, which is a boolean value,

37
00:01:57.660 --> 00:02:01.890
so true or false, that indicates whether we had a match,

38
00:02:01.890 --> 00:02:03.963
so whether the cache was used.

39
00:02:05.070 --> 00:02:07.710
And therefore we can look at this output

40
00:02:07.710 --> 00:02:11.009
and use that as the condition or in the condition

41
00:02:11.009 --> 00:02:13.710
of the install dependencies step.

42
00:02:13.710 --> 00:02:17.850
Now, I did already add an ID to this cache dependencies step

43
00:02:17.850 --> 00:02:22.830
so that we can get data from that step with help of that ID.

44
00:02:22.830 --> 00:02:26.460
And we can therefore use this steps context object

45
00:02:26.460 --> 00:02:30.120
use the cache step, so the step with this ID here,

46
00:02:30.120 --> 00:02:31.740
the cache ID,

47
00:02:31.740 --> 00:02:34.920
and then here dive into the outputs field.

48
00:02:34.920 --> 00:02:37.950
And now it's not an output set by us,

49
00:02:37.950 --> 00:02:40.800
with this set output command you learned about

50
00:02:40.800 --> 00:02:42.570
earlier in the course,

51
00:02:42.570 --> 00:02:45.060
but instead now it's an output of this action

52
00:02:45.060 --> 00:02:47.670
which is executed in this step

53
00:02:47.670 --> 00:02:50.643
and that output is the cache-hit output.

54
00:02:51.600 --> 00:02:56.193
And here we simply check if that's not equal to true.

55
00:02:57.090 --> 00:02:59.070
Now I'm wrapping this in single quotes

56
00:02:59.070 --> 00:03:01.950
because it's actually converted to a string

57
00:03:01.950 --> 00:03:04.890
in this steps context object

58
00:03:04.890 --> 00:03:07.830
so therefore I'm checking for the string value.

59
00:03:07.830 --> 00:03:09.540
And I'm checking if it's not true,

60
00:03:09.540 --> 00:03:11.370
because if it isn't true,

61
00:03:11.370 --> 00:03:13.860
if we were not able to use the cache

62
00:03:13.860 --> 00:03:17.280
then I wanna manually install the dependencies again.

63
00:03:17.280 --> 00:03:21.060
If on the other hand we had a cache hit, so if this is true

64
00:03:21.060 --> 00:03:23.943
then this step will be skipped with this condition.

65
00:03:24.840 --> 00:03:28.470
And now we can use this setup in all the places

66
00:03:28.470 --> 00:03:31.650
where we use the cache and install dependencies

67
00:03:31.650 --> 00:03:35.340
to always use this extra if condition

68
00:03:35.340 --> 00:03:39.003
and store node modules instead of this npm folder.

69
00:03:39.840 --> 00:03:42.153
So I'll do this in all these places here.

70
00:03:42.990 --> 00:03:46.650
And with that done, we can of course stage these changes

71
00:03:46.650 --> 00:03:51.650
and create a new commit, optimized cache and push this,

72
00:03:53.190 --> 00:03:54.930
and what you'll notice now

73
00:03:54.930 --> 00:03:56.970
is of course that as this executes

74
00:03:56.970 --> 00:04:00.180
it's the first time that we're caching node modules.

75
00:04:00.180 --> 00:04:03.990
So therefore, in test and lint, which run in parallel,

76
00:04:03.990 --> 00:04:07.500
they both don't have node modules cached initially

77
00:04:07.500 --> 00:04:10.020
therefore they install the dependencies.

78
00:04:10.020 --> 00:04:12.660
This step is not skipped but executed

79
00:04:12.660 --> 00:04:15.810
because dependencies were not cached before

80
00:04:15.810 --> 00:04:19.740
but the next time we run this, the cache will be used.

81
00:04:19.740 --> 00:04:22.350
Now since I haven't fixed my testing code yet

82
00:04:22.350 --> 00:04:26.190
we don't see this yet because build and deploy were skipped,

83
00:04:26.190 --> 00:04:29.790
otherwise the cache would've been used in these steps.

84
00:04:29.790 --> 00:04:32.160
But we will see it if we rerun this job,

85
00:04:32.160 --> 00:04:33.990
however, I will take this opportunity

86
00:04:33.990 --> 00:04:36.360
and fix my test here by readding this

87
00:04:36.360 --> 00:04:39.030
A, to make sure that in the future

88
00:04:39.030 --> 00:04:42.570
we always execute all these dependent jobs.

89
00:04:42.570 --> 00:04:43.593
So now here.

90
00:04:45.270 --> 00:04:48.480
I've fixed my tests and I will push this.

91
00:04:48.480 --> 00:04:51.720
And with that done, we will see that now

92
00:04:51.720 --> 00:04:53.520
this entire chain will execute,

93
00:04:53.520 --> 00:04:57.210
therefore, report will not execute anymore by the way,

94
00:04:57.210 --> 00:04:59.640
and we will see that now the cache is used

95
00:04:59.640 --> 00:05:02.100
now even in these first jobs already

96
00:05:02.100 --> 00:05:04.770
because it was cached previously.

97
00:05:04.770 --> 00:05:06.780
So here the cache was received

98
00:05:06.780 --> 00:05:09.360
and therefore, as you can see install dependencies

99
00:05:09.360 --> 00:05:12.870
was skipped because of our if check.

100
00:05:12.870 --> 00:05:15.360
And I wanted to show this example to you

101
00:05:15.360 --> 00:05:19.080
because that's never thing where you can use if checks,

102
00:05:19.080 --> 00:05:21.990
and this also shows you that you're not limited

103
00:05:21.990 --> 00:05:25.350
to using them only for checking for failure.

104
00:05:25.350 --> 00:05:27.990
Here we're not checking for failure at all

105
00:05:27.990 --> 00:05:30.780
we're just checking which result was produced

106
00:05:30.780 --> 00:05:32.790
by another step, and depending on that

107
00:05:32.790 --> 00:05:35.670
we either execute that step or not.

108
00:05:35.670 --> 00:05:37.170
And here, by the way, as mentioned,

109
00:05:37.170 --> 00:05:39.570
you also see that report was skipped

110
00:05:39.570 --> 00:05:41.670
because all jobs succeeded

111
00:05:41.670 --> 00:05:44.340
and therefore the condition of report was not met

112
00:05:44.340 --> 00:05:46.050
because the condition of report

113
00:05:46.050 --> 00:05:48.090
is that at least one job failed,

114
00:05:48.090 --> 00:05:49.593
which was not the case here.

