WEBVTT
1
00:00:02.100 --> 00:00:03.180
So what's now the idea

2
00:00:03.180 --> 00:00:04.653
behind using containers?

3
00:00:05.520 --> 00:00:07.950
Well, right now we're running this test job

4
00:00:07.950 --> 00:00:12.060
directly on this Ubuntu machine provided by GitHub Actions,

5
00:00:12.060 --> 00:00:14.130
so on some server that comes with

6
00:00:14.130 --> 00:00:17.940
that Linux distribution installed on it provided by GitHub.

7
00:00:17.940 --> 00:00:22.940
And just to be very clear, there is nothing wrong with that.

8
00:00:22.980 --> 00:00:25.500
You can absolutely run your jobs

9
00:00:25.500 --> 00:00:27.540
directly on these runner machines,

10
00:00:27.540 --> 00:00:30.660
and in many cases there's absolutely no reason

11
00:00:30.660 --> 00:00:32.220
to use containers instead,

12
00:00:32.220 --> 00:00:34.140
we had no problems using

13
00:00:34.140 --> 00:00:36.753
these runner machines throughout this course.

14
00:00:37.590 --> 00:00:40.770
But it could make sense to use containers

15
00:00:40.770 --> 00:00:45.090
with your own definitions or based on public based images

16
00:00:45.090 --> 00:00:48.780
to have full control over the existing environment

17
00:00:48.780 --> 00:00:50.820
in certain cases.

18
00:00:50.820 --> 00:00:52.260
To show you one example

19
00:00:52.260 --> 00:00:54.750
where using a container could make sense

20
00:00:54.750 --> 00:00:57.900
is my own website, academind.com.

21
00:00:57.900 --> 00:01:00.090
There, I also have a testing job

22
00:01:00.090 --> 00:01:02.550
and this is the real deployment workflow

23
00:01:02.550 --> 00:01:04.890
or part of the real deployment workflow

24
00:01:04.890 --> 00:01:06.510
which I use for my own website.

25
00:01:06.510 --> 00:01:10.200
And in this testing job, I'm using this playwright tool

26
00:01:10.200 --> 00:01:12.630
to run some integration tests.

27
00:01:12.630 --> 00:01:15.660
Now what this tool does is it opens different browsers

28
00:01:15.660 --> 00:01:18.840
and tests the website in different browsers.

29
00:01:18.840 --> 00:01:21.870
And here I'm using a base image provided by the team

30
00:01:21.870 --> 00:01:24.480
behind this playwright testing tool

31
00:01:24.480 --> 00:01:28.260
that actually comes with all these browsers pre-installed.

32
00:01:28.260 --> 00:01:31.050
I'm doing this so that I don't have to add

33
00:01:31.050 --> 00:01:33.510
an extra step here in my workflow

34
00:01:33.510 --> 00:01:36.780
where I would install these browsers manually.

35
00:01:36.780 --> 00:01:38.100
I could do this as well,

36
00:01:38.100 --> 00:01:41.250
but it would take some extra time for which I'm paying,

37
00:01:41.250 --> 00:01:43.320
since I'm paying for execution time here

38
00:01:43.320 --> 00:01:45.510
in my private repository.

39
00:01:45.510 --> 00:01:47.400
And besides paying for that time

40
00:01:47.400 --> 00:01:49.590
it also simply wastes some time

41
00:01:49.590 --> 00:01:52.410
if I can just use this predefined environment

42
00:01:52.410 --> 00:01:54.720
that has all these browsers installed,

43
00:01:54.720 --> 00:01:56.790
and where I therefore don't have to go

44
00:01:56.790 --> 00:01:59.490
through these installation steps manually.

45
00:01:59.490 --> 00:02:02.970
So that's one example where I actually put one job,

46
00:02:02.970 --> 00:02:07.140
the testing job, in this real workflow into a container.

47
00:02:07.140 --> 00:02:09.419
A container that's based on some image

48
00:02:09.419 --> 00:02:11.190
that comes with a certain environment,

49
00:02:11.190 --> 00:02:13.110
which I want to use here,

50
00:02:13.110 --> 00:02:16.830
an environment that has certain browsers pre-installed.

51
00:02:16.830 --> 00:02:20.280
Now here, back to our simpler example in this course,

52
00:02:20.280 --> 00:02:22.920
we technically don't need an image

53
00:02:22.920 --> 00:02:25.110
we could just run all these steps

54
00:02:25.110 --> 00:02:28.410
on just the runner machine, it would work just fine

55
00:02:28.410 --> 00:02:31.980
but we can also put all these steps into a container

56
00:02:31.980 --> 00:02:34.230
by using some base image,

57
00:02:34.230 --> 00:02:38.310
so some base environment, simply to see how that would work.

58
00:02:38.310 --> 00:02:41.310
And that's exactly what we're going to do here.

59
00:02:41.310 --> 00:02:45.720
And to put a job and its steps into a container

60
00:02:45.720 --> 00:02:50.720
all you have to do is you have to add the container key here

61
00:02:51.060 --> 00:02:55.860
to your job definition in your workflow definition file.

62
00:02:55.860 --> 00:02:58.560
So nested below your job identifier,

63
00:02:58.560 --> 00:03:01.500
you put the keyword container.

64
00:03:01.500 --> 00:03:03.930
And then as a value for this container

65
00:03:03.930 --> 00:03:06.930
you can specify the name of the image which you want to use.

66
00:03:06.930 --> 00:03:08.940
For example, node.

67
00:03:08.940 --> 00:03:12.660
Now, when it comes to these image names you can use

68
00:03:12.660 --> 00:03:14.550
you have to use names of images

69
00:03:14.550 --> 00:03:17.490
that are available on public repositories.

70
00:03:17.490 --> 00:03:19.440
Like for example, Docker Hub,

71
00:03:19.440 --> 00:03:23.280
which is the official docker image repository.

72
00:03:23.280 --> 00:03:26.880
You could publish your own images on Docker Hub as well

73
00:03:26.880 --> 00:03:29.940
but you also find many official images there.

74
00:03:29.940 --> 00:03:32.190
For example, a base image that comes

75
00:03:32.190 --> 00:03:34.980
with just Ubuntu installed,

76
00:03:34.980 --> 00:03:37.950
but also an image for the Postgres database

77
00:03:37.950 --> 00:03:39.330
if you needed an environment

78
00:03:39.330 --> 00:03:42.270
that comes with that database pre-installed.

79
00:03:42.270 --> 00:03:44.250
And amongst all these other images

80
00:03:44.250 --> 00:03:47.850
you for example, also find a node image here

81
00:03:47.850 --> 00:03:49.350
which gives you an environment

82
00:03:49.350 --> 00:03:52.083
that comes with Node.js pre-installed.

83
00:03:53.100 --> 00:03:56.040
And if you then click on such an image here on Docker Hub

84
00:03:56.040 --> 00:03:57.180
you learn more about it

85
00:03:57.180 --> 00:04:00.210
and about the different versions of the image are available

86
00:04:00.210 --> 00:04:02.460
and how they differentiate from each other,

87
00:04:02.460 --> 00:04:04.383
and what's included in this image.

88
00:04:05.220 --> 00:04:07.470
And now here I could use node,

89
00:04:07.470 --> 00:04:10.560
which is one possible identifier I can use

90
00:04:10.560 --> 00:04:14.580
or node:16, which is a different identifier I can use

91
00:04:14.580 --> 00:04:17.700
which gives me a image based on Node Version 16.

92
00:04:17.700 --> 00:04:21.390
And I can run all my steps of this job in a container

93
00:04:21.390 --> 00:04:23.370
that's based on this image

94
00:04:23.370 --> 00:04:28.140
because all docker containers are based on some image.

95
00:04:28.140 --> 00:04:29.940
As an alternative to this way

96
00:04:29.940 --> 00:04:31.890
of defining the container image,

97
00:04:31.890 --> 00:04:34.080
we can also add a nested image key

98
00:04:34.080 --> 00:04:36.630
and define our image like this.

99
00:04:36.630 --> 00:04:38.220
This syntax is important

100
00:04:38.220 --> 00:04:40.350
if you also have further information

101
00:04:40.350 --> 00:04:42.540
you want to pass into your container.

102
00:04:42.540 --> 00:04:45.270
For example, some environment variable values

103
00:04:45.270 --> 00:04:47.730
that might be needed by this image.

104
00:04:47.730 --> 00:04:51.030
And that's important, environment variable values

105
00:04:51.030 --> 00:04:54.660
that are needed by the image itself, not by your steps,

106
00:04:54.660 --> 00:04:56.820
that will then later run in the image.

107
00:04:56.820 --> 00:05:00.300
Those environment variables which are needed by your steps

108
00:05:00.300 --> 00:05:02.580
stay in the env configuration

109
00:05:02.580 --> 00:05:05.850
which stays on the same level as container.

110
00:05:05.850 --> 00:05:08.670
This nested env field for the container

111
00:05:08.670 --> 00:05:10.680
is just about environment variables

112
00:05:10.680 --> 00:05:12.900
that are directly needed by the image,

113
00:05:12.900 --> 00:05:15.750
and if an image would need such variables

114
00:05:15.750 --> 00:05:19.110
it would be mentioned in the official image documentation

115
00:05:19.110 --> 00:05:20.970
or if you're using your own image,

116
00:05:20.970 --> 00:05:22.350
which as mentioned before,

117
00:05:22.350 --> 00:05:24.350
could also be published to Docker Hub

118
00:05:24.350 --> 00:05:25.830
so that you can use it,

119
00:05:25.830 --> 00:05:27.510
then you would of course know

120
00:05:27.510 --> 00:05:31.020
which environment variables that image might need.

121
00:05:31.020 --> 00:05:32.520
Here for this node image,

122
00:05:32.520 --> 00:05:34.800
no environment variables are needed

123
00:05:34.800 --> 00:05:37.290
and therefore that's all I need to specify here

124
00:05:37.290 --> 00:05:39.420
to make sure that all these steps

125
00:05:39.420 --> 00:05:41.310
which belong to the test job

126
00:05:41.310 --> 00:05:43.860
will run inside of the container

127
00:05:43.860 --> 00:05:45.360
based on this node image

128
00:05:45.360 --> 00:05:47.790
and therefore inside of an environment

129
00:05:47.790 --> 00:05:50.553
that comes with Node Version 16 installed.

130
00:05:51.480 --> 00:05:54.660
Now this will then all still run on this Ubuntu machine,

131
00:05:54.660 --> 00:05:57.930
but this machine will just host the image.

132
00:05:57.930 --> 00:06:00.000
The steps running in the image

133
00:06:00.000 --> 00:06:03.000
will not have direct access to the machine

134
00:06:03.000 --> 00:06:05.880
and will not have direct access to the tools

135
00:06:05.880 --> 00:06:08.310
made available by that machine.

136
00:06:08.310 --> 00:06:10.680
Instead, they really run in that environment

137
00:06:10.680 --> 00:06:12.660
defined by that container.

138
00:06:12.660 --> 00:06:15.330
You can still use ever GitHub Actions

139
00:06:15.330 --> 00:06:17.790
like the checkout or cache action though,

140
00:06:17.790 --> 00:06:19.560
that all still works.

141
00:06:19.560 --> 00:06:22.560
GitHub Actions make sure that all these steps

142
00:06:22.560 --> 00:06:25.830
still work as before even though they're now running

143
00:06:25.830 --> 00:06:28.080
in a container technically.

144
00:06:28.080 --> 00:06:30.030
And with that all done,

145
00:06:30.030 --> 00:06:33.060
I can of course create a new commit here

146
00:06:33.060 --> 00:06:35.460
and give it a message of

147
00:06:35.460 --> 00:06:38.470
put test job into container

148
00:06:39.360 --> 00:06:43.080
and then push this to trigger a new action,

149
00:06:43.080 --> 00:06:45.810
or workflow run to be precise.

150
00:06:45.810 --> 00:06:49.020
And what you should see is that as this workflow

151
00:06:49.020 --> 00:06:52.830
is being executed that it still works as before

152
00:06:52.830 --> 00:06:55.170
and all these steps run successfully

153
00:06:55.170 --> 00:06:59.130
but now they're technically running in this extra container.

154
00:06:59.130 --> 00:07:02.013
So let's wait for this job to really start here.

155
00:07:03.270 --> 00:07:04.980
Here we go, it did start.

156
00:07:04.980 --> 00:07:07.380
And what you see is that it,

157
00:07:07.380 --> 00:07:09.510
first of all, initialized containers

158
00:07:09.510 --> 00:07:12.690
where it basically made sure that docker was set up

159
00:07:12.690 --> 00:07:15.600
and the container environment was created,

160
00:07:15.600 --> 00:07:20.160
the environment for that one job that we put in a container.

161
00:07:20.160 --> 00:07:23.940
Therefore here it actually downloaded that node 16 image

162
00:07:23.940 --> 00:07:26.130
which I used as a base

163
00:07:26.130 --> 00:07:28.200
and it then performed all the steps needed

164
00:07:28.200 --> 00:07:30.840
to spin up that docker container

165
00:07:30.840 --> 00:07:33.120
and then all the steps were executed

166
00:07:33.120 --> 00:07:35.310
inside of that container.

167
00:07:35.310 --> 00:07:37.170
So that is what happened here.

168
00:07:37.170 --> 00:07:40.230
And with that, we have the same result as before

169
00:07:40.230 --> 00:07:42.690
but technically we ran all these steps

170
00:07:42.690 --> 00:07:43.890
in a different environment

171
00:07:43.890 --> 00:07:46.140
and that can of course be very useful

172
00:07:46.140 --> 00:07:49.230
if you need full control over the environment

173
00:07:49.230 --> 00:07:50.930
in which you're running your jobs.

