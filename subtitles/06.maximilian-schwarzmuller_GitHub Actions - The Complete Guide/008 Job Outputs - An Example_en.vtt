WEBVTT
1
00:00:02.100 --> 00:00:05.250
And again, come up with somewhat

2
00:00:05.250 --> 00:00:07.260
made up example here.

3
00:00:07.260 --> 00:00:10.950
Let's say that in this build job here

4
00:00:10.950 --> 00:00:13.500
where we produce the dist folder,

5
00:00:13.500 --> 00:00:15.990
which we then upload as an artifact,

6
00:00:15.990 --> 00:00:19.950
we also wanna get the name of the generated JavaScript file

7
00:00:19.950 --> 00:00:22.470
in this assets folder in the dist folder.

8
00:00:22.470 --> 00:00:24.810
So of this JavaScript file

9
00:00:24.810 --> 00:00:26.460
We wanna get the name of that file

10
00:00:26.460 --> 00:00:30.720
because that name is actually kind of randomly generated.

11
00:00:30.720 --> 00:00:32.613
It's not always the same name.

12
00:00:33.510 --> 00:00:36.840
Now of course, we could get that name in the deploy job

13
00:00:36.840 --> 00:00:38.970
by simply looking into the assets folder,

14
00:00:38.970 --> 00:00:41.400
which we download as an artifact here.

15
00:00:41.400 --> 00:00:44.520
But let's say that for some reason we wanna get access

16
00:00:44.520 --> 00:00:46.560
to that name here in the build job.

17
00:00:46.560 --> 00:00:49.230
And we then wanna make that file name available

18
00:00:49.230 --> 00:00:52.650
to the deploy job so that we have one value

19
00:00:52.650 --> 00:00:54.330
that's derived by one job.

20
00:00:54.330 --> 00:00:57.300
The name of the file derived in the build job

21
00:00:57.300 --> 00:00:59.280
that should be usable in another job.

22
00:00:59.280 --> 00:01:01.860
So in the deploy job here.

23
00:01:01.860 --> 00:01:03.630
If that's kind of what we need,

24
00:01:03.630 --> 00:01:06.420
and again, I'm aware that it's kind of a made up example,

25
00:01:06.420 --> 00:01:08.550
but it shows how to work with outputs,

26
00:01:08.550 --> 00:01:10.230
which is the important part here.

27
00:01:10.230 --> 00:01:11.670
If that's what we need,

28
00:01:11.670 --> 00:01:15.030
then GitHub Actions has a feature we can use for that

29
00:01:15.030 --> 00:01:18.660
because jobs can produce outputs.

30
00:01:18.660 --> 00:01:20.580
And by the way, this feature will become

31
00:01:20.580 --> 00:01:22.860
even more important later in the course

32
00:01:22.860 --> 00:01:25.740
once we dive into building custom actions

33
00:01:25.740 --> 00:01:30.210
because custom actions also will be able to produce outputs.

34
00:01:30.210 --> 00:01:32.730
But again, I will get back to that later.

35
00:01:32.730 --> 00:01:35.190
Then this feature will make even more sense.

36
00:01:35.190 --> 00:01:37.990
But it's good to get started with it right here already.

37
00:01:39.000 --> 00:01:42.030
So let's say here, after building the website,

38
00:01:42.030 --> 00:01:46.740
we wanna get hold of that file name of that JavaScript file.

39
00:01:46.740 --> 00:01:51.740
I'll give this step a name of publish JS file name

40
00:01:51.780 --> 00:01:54.150
because the goal of this job will be

41
00:01:54.150 --> 00:01:56.280
to get the JavaScript file name

42
00:01:56.280 --> 00:01:59.580
and to then publish it so that other jobs can use it.

43
00:01:59.580 --> 00:02:02.010
And for that, we need to run a script here.

44
00:02:02.010 --> 00:02:04.560
Now the command is a bit more complex.

45
00:02:04.560 --> 00:02:08.039
That's why you also find it attached in a text file.

46
00:02:08.039 --> 00:02:10.919
This year is the command that should be executed.

47
00:02:10.919 --> 00:02:14.280
It's a regular Linux command that finds us

48
00:02:14.280 --> 00:02:19.050
the JavaScript file in the assets folder in the dist folder

49
00:02:19.050 --> 00:02:22.890
and then it basically executes the echo command

50
00:02:22.890 --> 00:02:25.350
to output that file name.

51
00:02:25.350 --> 00:02:28.770
If you would run this command like this on a Linux machine,

52
00:02:28.770 --> 00:02:30.450
it would simply output the file name

53
00:02:30.450 --> 00:02:32.340
of this JavaScript file.

54
00:02:32.340 --> 00:02:34.200
And since I am on macOS here,

55
00:02:34.200 --> 00:02:36.270
which builds up on Linux, kind of,

56
00:02:36.270 --> 00:02:38.490
I can show you this command.

57
00:02:38.490 --> 00:02:42.060
If I run this here in my local terminal,

58
00:02:42.060 --> 00:02:45.690
it outputs the file name of this JavaScript file.

59
00:02:45.690 --> 00:02:47.733
That's what this command currently does.

60
00:02:48.630 --> 00:02:51.180
But that's actually not too helpful yet

61
00:02:51.180 --> 00:02:54.120
because yes, this output's the file name,

62
00:02:54.120 --> 00:02:56.790
but the idea is to publish the file name

63
00:02:56.790 --> 00:03:00.600
to make it available in other jobs.

64
00:03:00.600 --> 00:03:05.340
And to make it available, we must create a so called output,

65
00:03:05.340 --> 00:03:07.920
which is a separate thing in GitHub Actions,

66
00:03:07.920 --> 00:03:10.050
which is different from artifacts.

67
00:03:10.050 --> 00:03:14.460
An output or an output value is a simple value.

68
00:03:14.460 --> 00:03:17.430
So not a file, but instead a number

69
00:03:17.430 --> 00:03:19.740
or some text or anything like this.

70
00:03:19.740 --> 00:03:23.580
A simple value that should be produced by the job

71
00:03:23.580 --> 00:03:26.043
that should be accessible by other jobs.

72
00:03:26.940 --> 00:03:30.030
And to generate and share such output,

73
00:03:30.030 --> 00:03:33.330
we must add a new key here at the top level

74
00:03:33.330 --> 00:03:37.650
of this job definition before we define the steps.

75
00:03:37.650 --> 00:03:39.753
And that's the outputs key.

76
00:03:40.770 --> 00:03:45.120
Outputs then allows us to define any outputs of our choice

77
00:03:45.120 --> 00:03:47.310
and as many outputs as we want.

78
00:03:47.310 --> 00:03:50.193
For example, the script -file output.

79
00:03:51.090 --> 00:03:53.490
This identifier is again up to you

80
00:03:53.490 --> 00:03:55.200
because this is the identifier

81
00:03:55.200 --> 00:04:00.180
by which you later will be able to access the output value.

82
00:04:00.180 --> 00:04:03.780
So here I add my script file output.

83
00:04:03.780 --> 00:04:06.660
And now with that added, we're not fully done here,

84
00:04:06.660 --> 00:04:11.073
but with that added down here, we can set our output.

85
00:04:12.150 --> 00:04:14.880
And this is done by using a special syntax

86
00:04:14.880 --> 00:04:17.399
that's supported by GitHub Actions.

87
00:04:17.399 --> 00:04:21.959
Here, right before this opening closing curly brace thing,

88
00:04:21.959 --> 00:04:26.523
we add double colon and then set-output.

89
00:04:28.140 --> 00:04:31.860
This is a command, a special command that's detected

90
00:04:31.860 --> 00:04:35.640
and understood by GitHub Actions, which we can use together

91
00:04:35.640 --> 00:04:37.800
with the run command here.

92
00:04:37.800 --> 00:04:40.770
To be precise, you use it with the run command

93
00:04:40.770 --> 00:04:43.260
and then with the echo command.

94
00:04:43.260 --> 00:04:45.840
So the text which you echo out,

95
00:04:45.840 --> 00:04:49.230
the text which you display on the console

96
00:04:49.230 --> 00:04:51.570
accepts these special commands here

97
00:04:51.570 --> 00:04:56.010
in your GitHub Actions workflows to do special things.

98
00:04:56.010 --> 00:04:57.900
And if you take a look at the official

99
00:04:57.900 --> 00:05:00.300
workflow commands documentation page,

100
00:05:00.300 --> 00:05:03.330
you will see that there are different supported commands

101
00:05:03.330 --> 00:05:06.120
though the set output command is arguably

102
00:05:06.120 --> 00:05:08.700
the most important command.

103
00:05:08.700 --> 00:05:13.500
This is a command which can be used, as shown here as well,

104
00:05:13.500 --> 00:05:18.213
to share an output with subsequent steps or jobs.

105
00:05:19.200 --> 00:05:21.930
So here we're using this set output command,

106
00:05:21.930 --> 00:05:24.720
but it's not finished just like this.

107
00:05:24.720 --> 00:05:28.830
Instead, after using colon colon set-output,

108
00:05:28.830 --> 00:05:32.880
you must add a blank, and then you add the name keyword.

109
00:05:32.880 --> 00:05:34.140
So this is not up to you.

110
00:05:34.140 --> 00:05:38.190
This must be name equals and then the name of your output,

111
00:05:38.190 --> 00:05:40.800
which in my case will be script-file.

112
00:05:40.800 --> 00:05:44.010
So script-file is what I add here.

113
00:05:44.010 --> 00:05:48.840
And after that name, you again add two subsequent colons.

114
00:05:48.840 --> 00:05:51.450
And then without a white space,

115
00:05:51.450 --> 00:05:53.280
the value that should be stored

116
00:05:53.280 --> 00:05:55.560
under this output identifier.

117
00:05:55.560 --> 00:05:58.290
And here, this strange looking value

118
00:05:58.290 --> 00:06:00.150
opening closing curly brace

119
00:06:00.150 --> 00:06:02.400
simply belongs to this overall command

120
00:06:02.400 --> 00:06:03.930
and refers to the file name

121
00:06:03.930 --> 00:06:08.550
that is identified here by the first part of that command.

122
00:06:08.550 --> 00:06:10.920
So this will be the file name.

123
00:06:10.920 --> 00:06:14.250
So it's the file name that's stored under this identifier

124
00:06:14.250 --> 00:06:17.520
with help of this special set output command.

125
00:06:17.520 --> 00:06:19.770
And these commands can be very useful

126
00:06:19.770 --> 00:06:23.823
because they help you share data across jobs or steps.

127
00:06:24.750 --> 00:06:27.570
So now with that, we're setting a value here.

128
00:06:27.570 --> 00:06:31.170
But to now map it to this output here,

129
00:06:31.170 --> 00:06:33.840
we also must do something else up here.

130
00:06:33.840 --> 00:06:38.490
Here we must use this GitHub Actions expression syntax,

131
00:06:38.490 --> 00:06:41.160
which I showed you earlier in the course already

132
00:06:41.160 --> 00:06:42.930
where you add a dollar sign

133
00:06:42.930 --> 00:06:46.410
and then two opening and two closing curly braces

134
00:06:46.410 --> 00:06:49.350
to evaluate some dynamic expression

135
00:06:49.350 --> 00:06:54.350
and derive value based on the evaluation of that expression.

136
00:06:54.600 --> 00:06:57.810
So it's that dynamically evaluated value

137
00:06:57.810 --> 00:07:01.560
that will be stored under this identifier ultimately.

138
00:07:01.560 --> 00:07:04.080
And since this is under the output key here,

139
00:07:04.080 --> 00:07:07.890
this will be a published output by this job.

140
00:07:07.890 --> 00:07:10.680
So the expression that should be evaluated here

141
00:07:10.680 --> 00:07:15.480
now must refer to another GitHub context data object.

142
00:07:15.480 --> 00:07:20.100
And here for these GitHub Action context data objects,

143
00:07:20.100 --> 00:07:25.100
we earlier saw the GitHub object, earlier in this course.

144
00:07:25.620 --> 00:07:29.340
This gave us some metadata information about the workflow,

145
00:07:29.340 --> 00:07:32.820
the event that triggered the workflow and so on.

146
00:07:32.820 --> 00:07:35.670
Now we need another context data object,

147
00:07:35.670 --> 00:07:36.810
which we wanna use here.

148
00:07:36.810 --> 00:07:40.020
And that's the steps metadata object,

149
00:07:40.020 --> 00:07:42.390
the steps context object.

150
00:07:42.390 --> 00:07:44.160
And it's important to keep in mind

151
00:07:44.160 --> 00:07:48.570
that GitHub Actions supports multiple context objects.

152
00:07:48.570 --> 00:07:51.540
And we'll see the different context objects in action

153
00:07:51.540 --> 00:07:52.833
throughout this course.

154
00:07:53.910 --> 00:07:56.970
Now we're using the steps context object here,

155
00:07:56.970 --> 00:07:59.730
which contains information about the different steps

156
00:07:59.730 --> 00:08:03.720
that make up the job in which we're using it.

157
00:08:03.720 --> 00:08:06.030
Previously, we used the GitHub object,

158
00:08:06.030 --> 00:08:08.130
now it's the steps object.

159
00:08:08.130 --> 00:08:10.260
And later in the course, we will, for example,

160
00:08:10.260 --> 00:08:14.733
also access the env object here and other objects as well.

161
00:08:15.750 --> 00:08:18.000
So this steps object contains data

162
00:08:18.000 --> 00:08:20.760
about the steps that belong to this job.

163
00:08:20.760 --> 00:08:22.980
And it's the steps object that allows us

164
00:08:22.980 --> 00:08:27.600
to get hold of an output published by an individual step.

165
00:08:27.600 --> 00:08:31.500
Because this set output command actually publishes an output

166
00:08:31.500 --> 00:08:33.450
for the step in which we use it.

167
00:08:33.450 --> 00:08:35.730
Not for the job in which we use it.

168
00:08:35.730 --> 00:08:39.330
To make it a job output, we must map it up here.

169
00:08:39.330 --> 00:08:42.480
So now since it's this step that published this output,

170
00:08:42.480 --> 00:08:46.290
we wanna get access to the data published by this step.

171
00:08:46.290 --> 00:08:49.800
To do that, we should give this step an ID,

172
00:08:49.800 --> 00:08:52.680
which is a field we haven't used before in this course.

173
00:08:52.680 --> 00:08:56.580
But you can add the ID field to all your steps.

174
00:08:56.580 --> 00:08:58.590
And the ID field is useful

175
00:08:58.590 --> 00:09:01.500
whenever you're using the steps context object

176
00:09:01.500 --> 00:09:03.780
to dive into a specific step.

177
00:09:03.780 --> 00:09:07.353
And for example, get the output data published by a step.

178
00:09:08.280 --> 00:09:10.950
Now the ID value is totally up to you.

179
00:09:10.950 --> 00:09:14.190
And here, I'll simply name it publish,

180
00:09:14.190 --> 00:09:15.753
but again, it is up to you.

181
00:09:17.190 --> 00:09:19.470
But with that ID added here,

182
00:09:19.470 --> 00:09:22.440
you can go back to your steps context object

183
00:09:22.440 --> 00:09:24.450
and then with the dot notation,

184
00:09:24.450 --> 00:09:27.393
access that step by using its ID.

185
00:09:28.380 --> 00:09:30.930
So now here we're using publish here

186
00:09:30.930 --> 00:09:32.790
because I used publish down there.

187
00:09:32.790 --> 00:09:35.970
So that's how you can access these different steps

188
00:09:35.970 --> 00:09:37.743
with the steps object.

189
00:09:38.910 --> 00:09:41.070
Now that we access this step,

190
00:09:41.070 --> 00:09:45.030
we can access the outputs field on that step.

191
00:09:45.030 --> 00:09:47.670
All your steps have this.

192
00:09:47.670 --> 00:09:51.030
So that's now again, a field defined by GitHub Actions

193
00:09:51.030 --> 00:09:54.240
that our steps have this outputs object here,

194
00:09:54.240 --> 00:09:55.950
this outputs field.

195
00:09:55.950 --> 00:09:58.200
And that is another nested object,

196
00:09:58.200 --> 00:10:01.320
which now has all the outputs published by the step

197
00:10:01.320 --> 00:10:03.930
which we're accessing as fields.

198
00:10:03.930 --> 00:10:08.820
So since in this step I'm publishing the script file output,

199
00:10:08.820 --> 00:10:11.760
I can access script file here.

200
00:10:11.760 --> 00:10:14.610
And therefore, technically, we could have actually used

201
00:10:14.610 --> 00:10:17.460
a different name down here as we did up there

202
00:10:17.460 --> 00:10:20.910
because it's not directly mapping to the outputs up here.

203
00:10:20.910 --> 00:10:22.920
But instead, we're manually mapping it

204
00:10:22.920 --> 00:10:25.140
with help of this evaluation.

205
00:10:25.140 --> 00:10:27.870
Still, it makes sense to use the same output names

206
00:10:27.870 --> 00:10:30.210
in all these places to make it very clear

207
00:10:30.210 --> 00:10:33.000
that these outputs belong together.

208
00:10:33.000 --> 00:10:36.750
But that's now how we access the output published by a step

209
00:10:36.750 --> 00:10:41.280
to then publish it as a output by the overall job here.

210
00:10:41.280 --> 00:10:43.200
And with that output published,

211
00:10:43.200 --> 00:10:44.943
we can use it in another job.

