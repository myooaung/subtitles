WEBVTT
1
00:00:02.148 --> 00:00:03.780
So let's start

2
00:00:03.780 --> 00:00:06.689
with one of the most important questions:

3
00:00:06.689 --> 00:00:09.847
why would we use custom actions?

4
00:00:09.847 --> 00:00:11.430
I mean, after all

5
00:00:11.430 --> 00:00:13.986
there are plenty of public actions available

6
00:00:13.986 --> 00:00:17.730
like this upload-artifact action.

7
00:00:17.730 --> 00:00:21.009
Or if you visit the GitHub Marketplace for actions,

8
00:00:21.009 --> 00:00:23.154
you will find that there are tons

9
00:00:23.154 --> 00:00:25.432
of other actions available as well.

10
00:00:25.432 --> 00:00:28.815
Lots of actions published by various companies,

11
00:00:28.815 --> 00:00:32.159
but also lots of open-source projects,

12
00:00:32.159 --> 00:00:34.140
so, lots of community actions,

13
00:00:34.140 --> 00:00:35.460
you could say.

14
00:00:35.460 --> 00:00:37.260
So, there are lots of actions

15
00:00:37.260 --> 00:00:41.692
for performing all kinds of things with GitHub actions,

16
00:00:41.692 --> 00:00:46.020
and in your GitHub action workflows and jobs.

17
00:00:46.020 --> 00:00:48.783
So, why would you build custom actions?

18
00:00:48.783 --> 00:00:52.170
Well, there are two main reasons.

19
00:00:52.170 --> 00:00:53.820
The first reason

20
00:00:53.820 --> 00:00:58.470
is that you might want to simplify various steps you have

21
00:00:58.470 --> 00:01:00.270
in your workflows.

22
00:01:00.270 --> 00:01:03.240
For example, instead of writing multiple,

23
00:01:03.240 --> 00:01:04.700
possibly very complex,

24
00:01:04.700 --> 00:01:06.630
step definitions,

25
00:01:06.630 --> 00:01:09.120
you could build and use a single custom action

26
00:01:09.120 --> 00:01:12.090
to simplify your workflow.

27
00:01:12.090 --> 00:01:15.593
You could also reuse that action across multiple jobs

28
00:01:15.593 --> 00:01:19.137
if you had multiple jobs that performed the same steps,

29
00:01:19.137 --> 00:01:21.240
for example.

30
00:01:21.240 --> 00:01:23.760
And indeed that is something we have seen

31
00:01:23.760 --> 00:01:25.170
throughout this course.

32
00:01:25.170 --> 00:01:27.240
For example, here in this project,

33
00:01:27.240 --> 00:01:29.828
which will be the demo project we'll work on

34
00:01:29.828 --> 00:01:32.160
throughout this course section,

35
00:01:32.160 --> 00:01:33.600
but more on that later.

36
00:01:33.600 --> 00:01:35.490
But, for example, on this project,

37
00:01:35.490 --> 00:01:38.820
I have a step where I cache dependencies,

38
00:01:38.820 --> 00:01:42.480
followed by a step where I install dependencies.

39
00:01:42.480 --> 00:01:46.135
And I have these two steps in a lot of jobs

40
00:01:46.135 --> 00:01:47.430
in this workflow.

41
00:01:47.430 --> 00:01:50.310
I have these steps in the lint job,

42
00:01:50.310 --> 00:01:51.870
in the test job,

43
00:01:51.870 --> 00:01:53.940
and in the build job.

44
00:01:53.940 --> 00:01:56.280
So we have the same combination of steps

45
00:01:56.280 --> 00:01:59.340
with the exact same work that's being done

46
00:01:59.340 --> 00:02:00.600
in these steps

47
00:02:00.600 --> 00:02:02.550
in multiple jobs.

48
00:02:02.550 --> 00:02:03.383
And therefore,

49
00:02:03.383 --> 00:02:06.690
one reason for creating custom actions could be

50
00:02:06.690 --> 00:02:09.300
that you want to group such steps together

51
00:02:09.300 --> 00:02:11.468
and reuse them across multiple jobs,

52
00:02:11.468 --> 00:02:13.440
so that you don't have to copy

53
00:02:13.440 --> 00:02:18.300
and paste these step definitions across these jobs.

54
00:02:18.300 --> 00:02:21.360
Another reason for building and using a custom action

55
00:02:21.360 --> 00:02:22.740
could also simply be

56
00:02:22.740 --> 00:02:26.172
that there is no existing public action available

57
00:02:26.172 --> 00:02:29.790
that does exactly what you need to do.

58
00:02:29.790 --> 00:02:31.201
The existing public actions

59
00:02:31.201 --> 00:02:34.470
might not solve the specific problem you're facing

60
00:02:34.470 --> 00:02:35.700
in your workflow

61
00:02:35.700 --> 00:02:38.670
in the way you want them to solve this problem.

62
00:02:38.670 --> 00:02:41.464
Or you might want to build your own action

63
00:02:41.464 --> 00:02:44.700
because you have more control over how it solves

64
00:02:44.700 --> 00:02:45.903
a certain problem.

65
00:02:46.890 --> 00:02:49.560
Therefore, you might want to build a custom action

66
00:02:49.560 --> 00:02:51.240
instead of using a public one

67
00:02:51.240 --> 00:02:54.562
because custom actions can contain any logic you need

68
00:02:54.562 --> 00:02:58.260
to solve your specific workflow problems.

69
00:02:58.260 --> 00:03:01.380
And as you will learn throughout this course section,

70
00:03:01.380 --> 00:03:04.740
there are also different ways of creating custom actions,

71
00:03:04.740 --> 00:03:07.680
so that you can also use any programming language

72
00:03:07.680 --> 00:03:09.423
of your choice in the end.

73
00:03:10.320 --> 00:03:12.270
And by the way, last but not least,

74
00:03:12.270 --> 00:03:14.790
as soon as you did create a custom action,

75
00:03:14.790 --> 00:03:15.623
you could, of course,

76
00:03:15.623 --> 00:03:17.670
also publish it in the marketplace

77
00:03:17.670 --> 00:03:19.860
to make it available to other users,

78
00:03:19.860 --> 00:03:23.550
so that they can benefit from your action in the future.

79
00:03:23.550 --> 00:03:27.120
So, this could be another reason for building custom actions

80
00:03:27.120 --> 00:03:30.513
that you simply want to contribute back to the community.

