WEBVTT
1
00:00:02.040 --> 00:00:03.090
So that we can build

2
00:00:03.090 --> 00:00:05.460
and use this custom JavaScript action.

3
00:00:05.460 --> 00:00:07.140
To really finish it now,

4
00:00:07.140 --> 00:00:09.480
I want to add an output to this action,

5
00:00:09.480 --> 00:00:12.660
and I wanna dynamically generate this URL

6
00:00:12.660 --> 00:00:16.680
of this website, so that we can visit this URL

7
00:00:16.680 --> 00:00:20.880
right from this summary screen here on GitHub Actions.

8
00:00:20.880 --> 00:00:24.570
Or, to be precise, ah when visiting this action.

9
00:00:24.570 --> 00:00:26.340
There, I want to add an extra step

10
00:00:26.340 --> 00:00:29.970
where I output that URL, so that I don't have to go

11
00:00:29.970 --> 00:00:33.663
into my AWS account to get hold of that URL.

12
00:00:34.680 --> 00:00:37.200
So, therefore, this action should generate an output,

13
00:00:37.200 --> 00:00:40.920
this URL. And to do that, we first of all have

14
00:00:40.920 --> 00:00:44.670
to register an output in action on the YAML.

15
00:00:44.670 --> 00:00:47.970
Just as before for the custom composite action,

16
00:00:47.970 --> 00:00:51.120
we do that by adding the outputs key.

17
00:00:51.120 --> 00:00:53.700
And then, we add an output with any identifier

18
00:00:53.700 --> 00:00:58.170
of our choice, like for example, website dash URL.

19
00:00:58.170 --> 00:00:59.790
Now, this takes a description,

20
00:00:59.790 --> 00:01:04.790
which is the URL of the deployed website, for example,

21
00:01:05.730 --> 00:01:07.680
but it doesn't take anything else.

22
00:01:07.680 --> 00:01:10.020
You don't add a value here.

23
00:01:10.020 --> 00:01:12.270
We did that for the composite action

24
00:01:12.270 --> 00:01:13.773
but we don't do it here.

25
00:01:14.970 --> 00:01:17.250
The reason is that for the composite action

26
00:01:17.250 --> 00:01:20.880
we had all the logic right here in this action YAML file

27
00:01:20.880 --> 00:01:25.260
and we needed to tell GitHub where to get the value

28
00:01:25.260 --> 00:01:26.643
for this output from.

29
00:01:27.630 --> 00:01:30.690
With the custom JavaScript action, that's different.

30
00:01:30.690 --> 00:01:32.640
We just registered this output

31
00:01:32.640 --> 00:01:35.820
but we then set it from inside our code.

32
00:01:35.820 --> 00:01:38.850
And here right after deploying this

33
00:01:38.850 --> 00:01:41.640
instead of logging this dummy message here,

34
00:01:41.640 --> 00:01:45.270
I will generate this URL instead

35
00:01:45.270 --> 00:01:48.570
by adding a new constant name, the website URL.

36
00:01:48.570 --> 00:01:50.100
And then again I'm using backticks

37
00:01:50.100 --> 00:01:52.920
to build a string dynamically.

38
00:01:52.920 --> 00:01:57.180
And here this is an HTTP colon slash slash

39
00:01:57.180 --> 00:02:00.300
and then we inject the bucket name because

40
00:02:00.300 --> 00:02:03.540
if you take a look at that URL, that is how it's built.

41
00:02:03.540 --> 00:02:06.630
It's http then comes the bucket name then

42
00:02:06.630 --> 00:02:11.610
dot S three slash website slash, and then the region.

43
00:02:11.610 --> 00:02:14.670
And that's what we're going to build manually here.

44
00:02:14.670 --> 00:02:19.590
So after the bucket name, we add dot S three website dash

45
00:02:19.590 --> 00:02:23.910
and then we inject the bucket region and then thereafter

46
00:02:23.910 --> 00:02:27.720
dot amazon aws dot com.

47
00:02:27.720 --> 00:02:30.000
That's how this URL is built.

48
00:02:30.000 --> 00:02:32.550
And with it being built, we can then use the core

49
00:02:32.550 --> 00:02:36.510
package again, which we also used for getting the inputs to

50
00:02:36.510 --> 00:02:39.810
set an output with set output.

51
00:02:39.810 --> 00:02:43.740
And that's basically the equivalent to using set output

52
00:02:43.740 --> 00:02:45.300
in the echo commands.

53
00:02:45.300 --> 00:02:47.130
So that's the equivalent here.

54
00:02:47.130 --> 00:02:51.420
And here we target this website URL output.

55
00:02:51.420 --> 00:02:53.640
So I'm using this identifier here

56
00:02:53.640 --> 00:02:57.060
as a first argument to set output.

57
00:02:57.060 --> 00:03:00.120
And the second argument is the Value we wanna set.

58
00:03:00.120 --> 00:03:03.060
And here that's that website URL.

59
00:03:03.060 --> 00:03:04.890
And with that this GitHub action

60
00:03:04.890 --> 00:03:08.010
will set an output return and output.

61
00:03:08.010 --> 00:03:11.790
So to say that is the automatically generated URL

62
00:03:11.790 --> 00:03:13.803
of the website that was deployed.

63
00:03:15.000 --> 00:03:17.940
This output can now be used in the Workflow file

64
00:03:17.940 --> 00:03:22.500
where I will simply add a new step after deploying the site

65
00:03:22.500 --> 00:03:25.770
where I say output information as a name.

66
00:03:25.770 --> 00:03:30.770
And then here I wanna run a command where I echo live URL.

67
00:03:33.450 --> 00:03:36.660
And then here I use the GitHub expression syntax

68
00:03:36.660 --> 00:03:40.860
for generating and injecting a dynamic value.

69
00:03:40.860 --> 00:03:43.650
And here I wanna reach out to my steps context object

70
00:03:43.650 --> 00:03:45.870
and then to the previous step.

71
00:03:45.870 --> 00:03:48.030
And for that I'll add an id to it, which you

72
00:03:48.030 --> 00:03:51.540
of course can do for steps with custom actions as well.

73
00:03:51.540 --> 00:03:54.753
And I'll name it deploy, the id, of course is up to you.

74
00:03:55.680 --> 00:03:59.070
And then here it's steps dot deploy dot outputs.

75
00:03:59.070 --> 00:04:03.660
And this must be outputs here, but then your output name.

76
00:04:03.660 --> 00:04:05.430
And in my case for this action

77
00:04:05.430 --> 00:04:08.970
the output name is website dash URL.

78
00:04:08.970 --> 00:04:12.600
So that is the output name we're accessing here.

79
00:04:12.600 --> 00:04:15.123
And I'm simply outputting this here in my log.

80
00:04:16.140 --> 00:04:19.930
And with that, we can create yet another commit

81
00:04:20.880 --> 00:04:23.460
add an output, and push this.

82
00:04:23.460 --> 00:04:27.090
And now the website should not just be built and deployed

83
00:04:27.090 --> 00:04:29.580
but we should also get an extra log message

84
00:04:29.580 --> 00:04:32.070
in the last step of the deployed job

85
00:04:32.070 --> 00:04:35.913
which links us or which leads us to the deployed website.

86
00:04:36.810 --> 00:04:39.483
So let's again wait for this to finish here.

87
00:04:40.410 --> 00:04:44.130
Here we go, it did now finish, and now we got this output

88
00:04:44.130 --> 00:04:47.700
information step where we output this URL

89
00:04:47.700 --> 00:04:51.030
and which leads us to this website that was deployed.

90
00:04:51.030 --> 00:04:53.820
And that's our custom JavaScript action

91
00:04:53.820 --> 00:04:55.950
finished and shows you how you can build

92
00:04:55.950 --> 00:04:58.893
and use such a custom JavaScript action.

