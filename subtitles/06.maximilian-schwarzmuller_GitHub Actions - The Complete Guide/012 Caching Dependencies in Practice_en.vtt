WEBVTT
1
00:00:02.040 --> 00:00:05.490
So back here in our Workflow definition file,

2
00:00:05.490 --> 00:00:09.150
it would make sense to kind of cache these dependencies

3
00:00:09.150 --> 00:00:11.430
the first time we install them.

4
00:00:11.430 --> 00:00:15.300
So here in this first job when we install dependencies

5
00:00:15.300 --> 00:00:17.490
we wanna cache those dependencies

6
00:00:17.490 --> 00:00:20.280
so that the cached dependencies can be used

7
00:00:20.280 --> 00:00:24.300
in subsequent jobs and also in subsequent Workflow runs

8
00:00:24.300 --> 00:00:28.620
unless these dependencies changed and must be reinstalled.

9
00:00:28.620 --> 00:00:30.150
Now to add caching,

10
00:00:30.150 --> 00:00:33.870
we must add a new step before the step

11
00:00:33.870 --> 00:00:37.500
that actually produces the files that should be cached.

12
00:00:37.500 --> 00:00:39.690
So the caching step should execute here

13
00:00:39.690 --> 00:00:42.723
before we have that dependency installation step.

14
00:00:44.070 --> 00:00:48.513
I'll give it a name of cache dependencies,

15
00:00:49.650 --> 00:00:52.260
and then here we want to use an action

16
00:00:52.260 --> 00:00:56.130
the cache action in version free, in my case

17
00:00:56.130 --> 00:00:57.930
that's published by the GitHub team.

18
00:00:59.130 --> 00:01:03.060
This action needs some configuration with the with key.

19
00:01:03.060 --> 00:01:06.840
And to be precise you must specify the path or paths

20
00:01:06.840 --> 00:01:08.760
that should be cached.

21
00:01:08.760 --> 00:01:10.830
Now again, you learn about all the details

22
00:01:10.830 --> 00:01:12.750
in the official documentation

23
00:01:12.750 --> 00:01:15.630
and there you also find plenty of examples

24
00:01:15.630 --> 00:01:20.100
for usage with different kinds of workflows and projects.

25
00:01:20.100 --> 00:01:22.740
But in the end, you always have to specify a path

26
00:01:22.740 --> 00:01:24.270
or multiple paths

27
00:01:24.270 --> 00:01:27.573
that point at the files and folders that should be cached.

28
00:01:28.470 --> 00:01:30.990
Now here in this case on this Linux runner

29
00:01:30.990 --> 00:01:34.950
for the node dependencies that we are installing here

30
00:01:34.950 --> 00:01:37.860
it's this path that should be cached.

31
00:01:37.860 --> 00:01:41.190
This is the path used by this npm tool

32
00:01:41.190 --> 00:01:43.800
for its internal dependency cache,

33
00:01:43.800 --> 00:01:47.100
which we now wanna store with help of the cache action

34
00:01:47.100 --> 00:01:49.803
across jobs and across workflows.

35
00:01:50.850 --> 00:01:52.170
Because that's important,

36
00:01:52.170 --> 00:01:55.230
npm actually already builds a cache

37
00:01:55.230 --> 00:01:59.070
that contains the dependencies that were installed

38
00:01:59.070 --> 00:02:01.050
and that cache would be used

39
00:02:01.050 --> 00:02:03.840
if you then install the dependencies again in the future.

40
00:02:03.840 --> 00:02:06.930
But since different jobs used different machines

41
00:02:06.930 --> 00:02:09.330
and different Workflow executions, of course

42
00:02:09.330 --> 00:02:11.220
also use different machines

43
00:02:11.220 --> 00:02:13.230
that automatically created cache

44
00:02:13.230 --> 00:02:15.663
by default would not be stored and used.

45
00:02:16.500 --> 00:02:18.780
By using the cache action here,

46
00:02:18.780 --> 00:02:21.570
we tell GitHub Actions in the end

47
00:02:21.570 --> 00:02:23.190
with help of that action

48
00:02:23.190 --> 00:02:27.540
that this npm created cache folder should be stored

49
00:02:27.540 --> 00:02:30.330
in some place in GitHub's cloud,

50
00:02:30.330 --> 00:02:32.190
so on some GitHub server

51
00:02:32.190 --> 00:02:34.620
and should be reused in other jobs

52
00:02:34.620 --> 00:02:36.753
and other Workflow executions.

53
00:02:37.620 --> 00:02:39.630
So that's the path here

54
00:02:39.630 --> 00:02:43.470
of the folder that should be cached and stored by GitHub.

55
00:02:43.470 --> 00:02:46.200
And then we must give this cache a key.

56
00:02:46.200 --> 00:02:49.140
And the idea is that this key will be used

57
00:02:49.140 --> 00:02:51.930
for retrieving the cache in the future

58
00:02:51.930 --> 00:02:54.660
and recreating that folder on the runner machine

59
00:02:54.660 --> 00:02:59.340
based on that cache managed by GitHub in the future.

60
00:02:59.340 --> 00:03:01.230
But the key also indicates

61
00:03:01.230 --> 00:03:03.780
whether the cache should be discarded

62
00:03:03.780 --> 00:03:05.670
because it must be recreated

63
00:03:05.670 --> 00:03:09.180
because, for example, some dependency changed.

64
00:03:09.180 --> 00:03:12.360
Therefore, you wanna give this cache a name

65
00:03:12.360 --> 00:03:15.060
that's not fully static and hard coded

66
00:03:15.060 --> 00:03:17.550
but that contains some dynamic element

67
00:03:17.550 --> 00:03:20.100
that can change and that will change

68
00:03:20.100 --> 00:03:23.220
whenever the cache should be discarded.

69
00:03:23.220 --> 00:03:24.900
Hence here we can again include

70
00:03:24.900 --> 00:03:27.150
such a GitHub Actions expression

71
00:03:27.150 --> 00:03:29.670
with that syntax you already know.

72
00:03:29.670 --> 00:03:32.550
And here I'll use another function provided

73
00:03:32.550 --> 00:03:36.900
by GitHub Actions, the hash files function

74
00:03:36.900 --> 00:03:40.770
which simply produces a unique hash value

75
00:03:40.770 --> 00:03:43.840
based on a file path we pass to it

76
00:03:44.700 --> 00:03:48.240
and that hash value will change whenever

77
00:03:48.240 --> 00:03:50.250
the file we pass to it changes.

78
00:03:50.250 --> 00:03:53.340
So the contents of the file change.

79
00:03:53.340 --> 00:03:57.390
And here we pass that file path between single quotes.

80
00:03:57.390 --> 00:04:02.250
And the path here is package dot lock dot Jason,

81
00:04:02.250 --> 00:04:04.230
no matter where it is located,

82
00:04:04.230 --> 00:04:06.870
so, no matter in which sub folder it might be,

83
00:04:06.870 --> 00:04:10.470
actually this collects all package lock Jason files

84
00:04:10.470 --> 00:04:13.653
and builds a hash on the combination of all these files.

85
00:04:14.550 --> 00:04:18.180
Now, package lock dot Jason simply is this file

86
00:04:18.180 --> 00:04:21.360
that specifies all the dependencies of this project

87
00:04:21.360 --> 00:04:25.230
and the exact versions of these dependencies.

88
00:04:25.230 --> 00:04:29.220
And the idea here is that whenever this file changes

89
00:04:29.220 --> 00:04:32.250
because we updated a dependency, for example,

90
00:04:32.250 --> 00:04:33.870
the hash that will be produced

91
00:04:33.870 --> 00:04:37.050
by hash files will not be the same as before.

92
00:04:37.050 --> 00:04:41.490
And therefore we end up with a different hash key indicating

93
00:04:41.490 --> 00:04:44.310
to GitHub Actions and this cache action

94
00:04:44.310 --> 00:04:47.880
that the currently stored cache should be discarded

95
00:04:47.880 --> 00:04:50.460
and not be used, and therefore instead

96
00:04:50.460 --> 00:04:52.890
we would reinstall the dependencies.

97
00:04:52.890 --> 00:04:54.213
That's how this works.

98
00:04:55.470 --> 00:04:58.830
Now, of course, install dependencies will always execute,

99
00:04:58.830 --> 00:05:02.880
this step won't be skipped the way this Workflow is set up

100
00:05:02.880 --> 00:05:04.770
but since we either reinstate

101
00:05:04.770 --> 00:05:07.920
this npm cache folder or not,

102
00:05:07.920 --> 00:05:11.100
the npm ci command will automatically use

103
00:05:11.100 --> 00:05:13.380
this npm folder here.

104
00:05:13.380 --> 00:05:14.940
If it exists, it will be used.

105
00:05:14.940 --> 00:05:18.510
If it doesn't exist, dependencies will be re-downloaded.

106
00:05:18.510 --> 00:05:20.190
That's how this works.

107
00:05:20.190 --> 00:05:23.940
Now, the cache step here will also automatically

108
00:05:23.940 --> 00:05:27.480
look at this folder after the job finished

109
00:05:27.480 --> 00:05:30.150
and put that folder into the cache

110
00:05:30.150 --> 00:05:33.120
if it didn't have that folder before.

111
00:05:33.120 --> 00:05:36.090
So the cache step does not just execute here

112
00:05:36.090 --> 00:05:38.640
but also after the overall job finished

113
00:05:38.640 --> 00:05:40.320
to update the cache

114
00:05:40.320 --> 00:05:42.900
so that if new dependencies were installed

115
00:05:42.900 --> 00:05:45.213
the new dependencies will be cached again,

116
00:05:46.110 --> 00:05:47.370
this is how that works.

117
00:05:47.370 --> 00:05:50.400
And of course, the way you use this cache action

118
00:05:50.400 --> 00:05:54.120
will depend on which project setup you have.

119
00:05:54.120 --> 00:05:55.710
Different project setups

120
00:05:55.710 --> 00:05:58.680
and different packages and programming languages

121
00:05:58.680 --> 00:06:00.600
have different files and folders

122
00:06:00.600 --> 00:06:04.140
that should be cached to speed up your workflows.

123
00:06:04.140 --> 00:06:07.170
That's why you have all these official examples here

124
00:06:07.170 --> 00:06:11.280
so that you can find an example that fits your use case.

125
00:06:11.280 --> 00:06:13.890
This is how you can do it for npm.

126
00:06:13.890 --> 00:06:18.180
And with that done, we must repeat this step here

127
00:06:18.180 --> 00:06:22.020
in all the jobs that do install dependencies

128
00:06:22.020 --> 00:06:22.860
because with that,

129
00:06:22.860 --> 00:06:25.890
we're managing the cache for our dependencies in this job

130
00:06:25.890 --> 00:06:27.870
but we also need it in the build job

131
00:06:27.870 --> 00:06:31.080
because there I'm also installing dependencies.

132
00:06:31.080 --> 00:06:35.730
So we simply copy that step here into the build job

133
00:06:35.730 --> 00:06:38.700
and make sure you get the indentation right.

134
00:06:38.700 --> 00:06:40.500
And with that we're also going to cache

135
00:06:40.500 --> 00:06:42.030
our dependencies here.

136
00:06:42.030 --> 00:06:42.990
And what's important is

137
00:06:42.990 --> 00:06:47.880
that the cache action actually uses one central cache.

138
00:06:47.880 --> 00:06:50.370
So if we put our dependencies into the cache

139
00:06:50.370 --> 00:06:52.350
in the test job already

140
00:06:52.350 --> 00:06:55.590
the build job will use that same cache.

141
00:06:55.590 --> 00:06:58.920
So it's not managing different job specific caches

142
00:06:58.920 --> 00:07:00.510
but one central cache

143
00:07:00.510 --> 00:07:04.110
which is also available across Workflow executions.

144
00:07:04.110 --> 00:07:06.630
So if dependencies were cached in one job

145
00:07:06.630 --> 00:07:08.670
there will be available in other jobs

146
00:07:08.670 --> 00:07:11.430
and other Workflow execution cycles.

147
00:07:11.430 --> 00:07:14.940
And with that done, we added caching.

148
00:07:14.940 --> 00:07:16.980
And now if we stage those changes

149
00:07:16.980 --> 00:07:18.453
we can create a new commit,

150
00:07:19.380 --> 00:07:23.850
added caching and what you'll see now when I push this

151
00:07:23.850 --> 00:07:26.550
and when the Workflow executes again, therefore

152
00:07:26.550 --> 00:07:29.340
is that it will still install the dependencies

153
00:07:29.340 --> 00:07:33.900
in the first job because we haven't cached them before.

154
00:07:33.900 --> 00:07:36.330
But the build job should then already

155
00:07:36.330 --> 00:07:38.220
use those dependencies.

156
00:07:38.220 --> 00:07:41.250
And if we would then run the Workflow again thereafter

157
00:07:41.250 --> 00:07:43.860
even the test job should use the dependencies

158
00:07:43.860 --> 00:07:47.820
in the future as long as no dependency changed.

159
00:07:47.820 --> 00:07:50.730
So let's see this in action here.

160
00:07:50.730 --> 00:07:53.250
Let's take a look at the test job.

161
00:07:53.250 --> 00:07:55.620
And you see here that again install dependencies

162
00:07:55.620 --> 00:07:57.360
is taking some time

163
00:07:57.360 --> 00:07:59.430
but what you'll also notice

164
00:07:59.430 --> 00:08:01.860
is that under cache dependencies

165
00:08:01.860 --> 00:08:04.773
it says that it did not find any cache.

166
00:08:05.970 --> 00:08:07.440
But then here

167
00:08:07.440 --> 00:08:10.770
it's executing this post cache dependencies step,

168
00:08:10.770 --> 00:08:12.360
which was added automatically

169
00:08:12.360 --> 00:08:14.400
by the cache action we added.

170
00:08:14.400 --> 00:08:18.120
And here you see that it's saved the cache successfully.

171
00:08:18.120 --> 00:08:21.240
And that's the key that was generated this year.

172
00:08:21.240 --> 00:08:23.253
That's the key that was generated.

173
00:08:24.900 --> 00:08:28.770
Now with that cache saved in the build step here

174
00:08:28.770 --> 00:08:32.610
you see that install dependencies was way faster.

175
00:08:32.610 --> 00:08:34.169
You see it's way faster

176
00:08:34.169 --> 00:08:36.720
because it's just taking four seconds now

177
00:08:36.720 --> 00:08:40.440
instead of the 12 or 15 seconds it took before

178
00:08:40.440 --> 00:08:42.750
because under a cache dependencies,

179
00:08:42.750 --> 00:08:45.060
it actually found a cache this time

180
00:08:45.060 --> 00:08:48.180
it downloaded the cache and restored it

181
00:08:48.180 --> 00:08:49.680
and then installed dependencies

182
00:08:49.680 --> 00:08:52.230
still went through all the installation steps.

183
00:08:52.230 --> 00:08:55.950
But internally, npm used that cache folder

184
00:08:55.950 --> 00:08:58.743
that was recreated by the caching step.

185
00:08:59.730 --> 00:09:01.593
So that's how we can save time here.

