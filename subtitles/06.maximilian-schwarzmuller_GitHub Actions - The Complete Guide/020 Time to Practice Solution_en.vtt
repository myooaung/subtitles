WEBVTT
1
00:00:02.160 --> 00:00:04.680
So did you succeed?

2
00:00:04.680 --> 00:00:08.100
In this lecture here, I'll show you my solution

3
00:00:08.100 --> 00:00:11.730
for this problem here, or for this task here,

4
00:00:11.730 --> 00:00:14.670
for these two Workflows that should be built.

5
00:00:14.670 --> 00:00:17.010
And here I am in this attached project,

6
00:00:17.010 --> 00:00:18.870
and you can of course also run it locally

7
00:00:18.870 --> 00:00:22.200
if you wanna see it an action locally, but I'll not do that,

8
00:00:22.200 --> 00:00:25.800
instead, I'll initialize this as a Git Repository,

9
00:00:25.800 --> 00:00:28.740
because that's the first thing I wanna do,

10
00:00:28.740 --> 00:00:32.520
I will then add all files, or I will stage all files

11
00:00:32.520 --> 00:00:36.510
for my first commit, which I'll name initial commit.

12
00:00:36.510 --> 00:00:38.250
And with that created,

13
00:00:38.250 --> 00:00:41.010
I wanna create a remote GitHub Repository

14
00:00:41.010 --> 00:00:43.230
because that of course will be needed in order

15
00:00:43.230 --> 00:00:47.820
to then well, run some Workflows with GitHub Actions.

16
00:00:47.820 --> 00:00:50.250
For that I am back here on GitHub,

17
00:00:50.250 --> 00:00:54.840
and I'll create a brand new Repository in that account here,

18
00:00:54.840 --> 00:00:59.840
and I will name it basic-exercise,

19
00:01:00.330 --> 00:01:03.600
but the name is totally up to you as always.

20
00:01:03.600 --> 00:01:06.720
It can be public or private, that is up to you.

21
00:01:06.720 --> 00:01:09.660
And here I will again go for private,

22
00:01:09.660 --> 00:01:14.660
and create this Repository, and then grab that URL here,

23
00:01:14.940 --> 00:01:19.940
that URL in this box, and link it here, or set it up here

24
00:01:20.610 --> 00:01:24.420
in my local Git Repository, as a remote Repository

25
00:01:24.420 --> 00:01:26.730
with Git remote add.

26
00:01:26.730 --> 00:01:31.410
And then here I'll add origin as an identifier,

27
00:01:31.410 --> 00:01:33.030
we must not forget that.

28
00:01:33.030 --> 00:01:38.030
And then here in the URL, I will add my username here,

29
00:01:39.540 --> 00:01:42.840
because that will help me with authenticating

30
00:01:42.840 --> 00:01:47.840
my request to that remote Repository, and hit enter.

31
00:01:48.570 --> 00:01:52.170
And then if we run Git push, we get this message here.

32
00:01:52.170 --> 00:01:54.660
So I'll quickly run this command here once

33
00:01:54.660 --> 00:01:56.190
to set up this connection.

34
00:01:56.190 --> 00:01:59.730
And now I'm prompted for my password here

35
00:01:59.730 --> 00:02:03.270
because I actually entered the wrong username here.

36
00:02:03.270 --> 00:02:05.940
That should be maxacademind1 in my case here,

37
00:02:05.940 --> 00:02:08.729
so let me cancel this here, and quickly fix this

38
00:02:08.729 --> 00:02:13.410
by using Git remote set URL for origin,

39
00:02:13.410 --> 00:02:17.400
and I'll copy that URL here, put the correct URL

40
00:02:17.400 --> 00:02:19.500
I wanna set includes maxacademind1,

41
00:02:19.500 --> 00:02:22.410
which in my case is to correct username.

42
00:02:22.410 --> 00:02:24.900
And now this command here should succeed,

43
00:02:24.900 --> 00:02:27.180
and use that already stored token,

44
00:02:27.180 --> 00:02:28.890
that personal access token

45
00:02:28.890 --> 00:02:30.890
which I have set up on my local machine.

46
00:02:32.340 --> 00:02:35.520
Okay, so now with that, the code is on GitHub,

47
00:02:35.520 --> 00:02:39.090
but of course we got no GitHub Actions Workflows yet.

48
00:02:39.090 --> 00:02:41.733
And that's the next thing I wanna do therefore.

49
00:02:42.660 --> 00:02:44.550
For this, you learned that you must create

50
00:02:44.550 --> 00:02:48.840
a new folder named .github in your project folder,

51
00:02:48.840 --> 00:02:52.050
and in there add a Workflows folder,

52
00:02:52.050 --> 00:02:56.010
and in there you can add your Workflow YAML files,

53
00:02:56.010 --> 00:02:59.460
one YAML file per Workflow.

54
00:02:59.460 --> 00:03:02.280
So here I'll add the first YAML file,

55
00:03:02.280 --> 00:03:05.783
and I'll name this deployment1yaml, or yml,

56
00:03:08.520 --> 00:03:11.040
both extensions are valid.

57
00:03:11.040 --> 00:03:14.847
And now we have to add the definition for this Workflow.

58
00:03:14.847 --> 00:03:17.850
And that all starts with a name, and the name here

59
00:03:17.850 --> 00:03:21.450
is Deployment Exercise 1, or anything like this,

60
00:03:21.450 --> 00:03:23.500
of course, the name is totally up to you.

61
00:03:24.420 --> 00:03:28.230
We also need an event, and the event here is push

62
00:03:28.230 --> 00:03:31.140
because that's the event I'm asking for here on the slide,

63
00:03:31.140 --> 00:03:32.820
on this left Workflow,

64
00:03:32.820 --> 00:03:35.070
we wanna trigger these linting, testing,

65
00:03:35.070 --> 00:03:37.920
and deployment Steps whenever we push

66
00:03:37.920 --> 00:03:40.410
to this reload Repository.

67
00:03:40.410 --> 00:03:43.500
So therefore the event is push,

68
00:03:43.500 --> 00:03:46.230
and will dive deeper into available events,

69
00:03:46.230 --> 00:03:48.420
and how we can configure these event triggers

70
00:03:48.420 --> 00:03:52.410
in the next course section, but here it's just on push.

71
00:03:52.410 --> 00:03:55.230
And then we define our Jobs.

72
00:03:55.230 --> 00:03:57.360
And now I mentioned that it will be up to you

73
00:03:57.360 --> 00:04:00.270
whether you want to use one, or three Jobs,

74
00:04:00.270 --> 00:04:02.610
and I'll show you both alternatives.

75
00:04:02.610 --> 00:04:04.950
And in this deployment1.yaml file,

76
00:04:04.950 --> 00:04:07.080
I'll just set up one Job.

77
00:04:07.080 --> 00:04:12.060
And here this Job is my deploy Job,

78
00:04:12.060 --> 00:04:15.870
that's the name we could assign, this name here is up to you

79
00:04:15.870 --> 00:04:17.853
as you learned, this identifier here.

80
00:04:19.019 --> 00:04:23.190
And then for this Job, we have to define a runner,

81
00:04:23.190 --> 00:04:26.370
and I will use Ubuntu latest because I don't need

82
00:04:26.370 --> 00:04:30.120
a Windows, or Mac OS platform, and Ubuntu latest

83
00:04:30.120 --> 00:04:33.753
is relatively common, and typically a good choice.

84
00:04:35.040 --> 00:04:38.130
Then we have to set up our Steps, and here we now got

85
00:04:38.130 --> 00:04:40.920
a couple of things that need to be done.

86
00:04:40.920 --> 00:04:44.970
It all starts for example, with us getting our code

87
00:04:44.970 --> 00:04:49.320
in the GitHub Repository onto that runner machine.

88
00:04:49.320 --> 00:04:52.560
And that can be done with help of a third party action

89
00:04:52.560 --> 00:04:55.290
as you learned in this course section.

90
00:04:55.290 --> 00:04:59.610
I'll give this a Step, a name of get code,

91
00:04:59.610 --> 00:05:03.690
and then I want to use a GitHub Action here,

92
00:05:03.690 --> 00:05:06.930
action distributed by GitHub itself in this case,

93
00:05:06.930 --> 00:05:11.790
which is actions/checkout, and then I'll set the version

94
00:05:11.790 --> 00:05:15.003
to free here, in my case to be free.

95
00:05:16.230 --> 00:05:19.410
So that's one of the actions we can get in the marketplace.

96
00:05:19.410 --> 00:05:21.870
In this case as mentioned, an action distributed

97
00:05:21.870 --> 00:05:23.670
by GitHub itself.

98
00:05:23.670 --> 00:05:26.760
We could add width to provide further configuration

99
00:05:26.760 --> 00:05:30.990
if needed, but here no extra configuration is needed.

100
00:05:30.990 --> 00:05:33.660
And this will ensure that our code is downloaded

101
00:05:33.660 --> 00:05:35.193
onto this runner machine.

102
00:05:36.030 --> 00:05:38.700
Now the next Step with the code being avoidable

103
00:05:38.700 --> 00:05:42.690
on the runner machine, is to install the the dependencies.

104
00:05:42.690 --> 00:05:46.200
We could also install Node.js as I did it

105
00:05:46.200 --> 00:05:49.980
in this course section, in an earlier example,

106
00:05:49.980 --> 00:05:51.360
and you could do this here as well,

107
00:05:51.360 --> 00:05:54.810
but it's technically not required, hence I won't do it here,

108
00:05:54.810 --> 00:05:57.090
but instead I wanna install my dependencies,

109
00:05:57.090 --> 00:06:00.300
and we'll do that by running a simple shell command

110
00:06:00.300 --> 00:06:03.000
in this project folder which was downloaded

111
00:06:03.000 --> 00:06:05.550
with help of this action, and that can be done with

112
00:06:05.550 --> 00:06:08.190
the run keyword as you learned.

113
00:06:08.190 --> 00:06:11.070
This allows us to execute commands in the shell,

114
00:06:11.070 --> 00:06:13.830
so in the terminal, or command prompt you could say

115
00:06:13.830 --> 00:06:16.920
of this runner in the project folder,

116
00:06:16.920 --> 00:06:20.190
and here I wanna run npm ci, which installs

117
00:06:20.190 --> 00:06:22.233
all the dependencies of this project.

118
00:06:23.280 --> 00:06:27.300
Alternatively, we could also use npm install, npm ci,

119
00:06:27.300 --> 00:06:30.300
just make sure that we're using the exact same versions

120
00:06:30.300 --> 00:06:32.163
as we did during development.

121
00:06:33.600 --> 00:06:36.480
And with that done, I didn't wanna run the linting script,

122
00:06:36.480 --> 00:06:38.850
the testing script, and the build script,

123
00:06:38.850 --> 00:06:42.060
and output some dummy deployment message.

124
00:06:42.060 --> 00:06:45.510
So here I'll give this next Step by name of lint,

125
00:06:45.510 --> 00:06:47.970
and run another command in the shell,

126
00:06:47.970 --> 00:06:51.450
and now it's npm run lint, because that runs

127
00:06:51.450 --> 00:06:55.350
this script here, this script, this lint script here,

128
00:06:55.350 --> 00:06:58.440
is executed by running npm run lint.

129
00:06:58.440 --> 00:07:00.303
And that's therefore what I do here.

130
00:07:01.200 --> 00:07:03.570
And thereafter, the next script in line,

131
00:07:03.570 --> 00:07:07.980
or the next thing I wanna do is run, or test my code,

132
00:07:07.980 --> 00:07:11.760
and run the npm run test command.

133
00:07:11.760 --> 00:07:14.400
And for this special script, you could also use

134
00:07:14.400 --> 00:07:17.610
just npm test that is allowed by Node.js,

135
00:07:17.610 --> 00:07:19.200
and the package JSON file,

136
00:07:19.200 --> 00:07:22.263
but you can also use npm run test like this.

137
00:07:23.280 --> 00:07:26.520
And thereafter for building the code,

138
00:07:26.520 --> 00:07:29.853
I will run npm run build.

139
00:07:31.170 --> 00:07:33.660
So that's how we can run these different scripts

140
00:07:33.660 --> 00:07:35.730
from package.json.

141
00:07:35.730 --> 00:07:39.750
And last but not least, to simulate the deployment,

142
00:07:39.750 --> 00:07:43.200
or to deploy the code, and simulate that,

143
00:07:43.200 --> 00:07:47.280
I'll just output some dummy message where I say deploying.

144
00:07:47.280 --> 00:07:49.410
And I'm doing this here because at this point

145
00:07:49.410 --> 00:07:52.530
we have no real deployment process yet

146
00:07:52.530 --> 00:07:55.500
because that would require some hosting provider

147
00:07:55.500 --> 00:07:57.720
for this project, and we don't have one here

148
00:07:57.720 --> 00:08:00.030
because that's also not the focus of this course

149
00:08:00.030 --> 00:08:01.263
if we're being honest.

150
00:08:02.340 --> 00:08:04.440
So here it's just this dummy message.

151
00:08:04.440 --> 00:08:07.470
But with that, with all these Steps added,

152
00:08:07.470 --> 00:08:09.570
and with all that configuration added,

153
00:08:09.570 --> 00:08:12.480
we should have a Workflow that does exactly

154
00:08:12.480 --> 00:08:16.380
what's requested on the left side of this slide here.

155
00:08:16.380 --> 00:08:19.950
I'll also already build the version with three Jobs instead

156
00:08:19.950 --> 00:08:21.480
of one Job, and for that,

157
00:08:21.480 --> 00:08:24.630
I'll just copy this deployment1.yaml file,

158
00:08:24.630 --> 00:08:27.723
and name my copy deployment2.yaml,

159
00:08:28.680 --> 00:08:32.130
because in the end I have the same trigger,

160
00:08:32.130 --> 00:08:36.390
I'll just name it deployment exercise two instead of one,

161
00:08:36.390 --> 00:08:39.840
and I'll have multiple Jobs, one Job for linting,

162
00:08:39.840 --> 00:08:43.232
one Job for testing, and then one Job for deploying.

163
00:08:44.640 --> 00:08:49.560
And here the idea really is that for linting,

164
00:08:49.560 --> 00:08:52.650
I also wanna use Ubuntu latest,

165
00:08:52.650 --> 00:08:56.280
and then here I have my Steps, and we still will need

166
00:08:56.280 --> 00:08:58.080
to get the code for example,

167
00:08:58.080 --> 00:09:00.630
we still will need to install the dependencies,

168
00:09:00.630 --> 00:09:03.270
and we still of course need to run the lint script,

169
00:09:03.270 --> 00:09:06.030
but we won't do anything else thereafter.

170
00:09:06.030 --> 00:09:09.720
Hence, we can copy these three Steps and paste them in here,

171
00:09:09.720 --> 00:09:12.480
and make sure that you get the indentation right,

172
00:09:12.480 --> 00:09:13.863
otherwise it will break.

173
00:09:15.090 --> 00:09:18.780
And then we can copy this configuration, and copy it

174
00:09:18.780 --> 00:09:22.650
for the test Job because there we also need to get the code,

175
00:09:22.650 --> 00:09:25.380
and also need to install the dependencies.

176
00:09:25.380 --> 00:09:29.520
But instead of linting, we here of course want to test

177
00:09:29.520 --> 00:09:31.740
the code, and run npm run test.

178
00:09:31.740 --> 00:09:34.863
So that's what we want to do here for the test Job.

179
00:09:36.360 --> 00:09:40.740
Choose a different name for this Step, and run npm run test.

180
00:09:40.740 --> 00:09:43.680
And with that, for the deploy Job here,

181
00:09:43.680 --> 00:09:47.100
we still wanna keep the Step where we get the code,

182
00:09:47.100 --> 00:09:49.770
and we want to keep the Step where we install dependencies,

183
00:09:49.770 --> 00:09:51.750
but we now get rid of linting and testing

184
00:09:51.750 --> 00:09:54.333
because we did that in separate Jobs.

185
00:09:55.290 --> 00:09:58.770
And that's there for the alternative with three Jobs

186
00:09:58.770 --> 00:10:02.190
where we have a couple of repeated Steps in all Jobs,

187
00:10:02.190 --> 00:10:04.893
but then the last Step is typically different.

188
00:10:06.090 --> 00:10:08.760
But that would be the alternative with three Jobs

189
00:10:08.760 --> 00:10:11.790
instead of one, and now we have both alternatives here,

190
00:10:11.790 --> 00:10:14.400
and with that we can create a new commit,

191
00:10:14.400 --> 00:10:16.470
and then push this.

192
00:10:16.470 --> 00:10:21.470
So here all give us a message of added deploy Workflows,

193
00:10:23.100 --> 00:10:26.460
and push this to the remote depository.

194
00:10:26.460 --> 00:10:29.070
And with that, since pushes are trigger,

195
00:10:29.070 --> 00:10:32.910
those actions should be registered, and detected, and added,

196
00:10:32.910 --> 00:10:35.850
and they should also be triggered right away.

197
00:10:35.850 --> 00:10:38.460
And indeed, we see that both Workflows

198
00:10:38.460 --> 00:10:40.350
are being executed here.

199
00:10:40.350 --> 00:10:43.710
So both Workflows were detected, were added,

200
00:10:43.710 --> 00:10:45.303
and are executed.

201
00:10:47.970 --> 00:10:51.150
And now let's see whether they execute successfully

202
00:10:51.150 --> 00:10:53.880
because that is of course what should happen here.

203
00:10:53.880 --> 00:10:56.340
The first Workflow already finished,

204
00:10:56.340 --> 00:10:58.863
that was the version with three Jobs.

205
00:10:59.820 --> 00:11:01.623
And the other one is still running,

206
00:11:02.670 --> 00:11:06.150
should finish momentarily as well though.

207
00:11:06.150 --> 00:11:07.650
Yep, now it's done.

208
00:11:07.650 --> 00:11:11.133
And now both Workflows finished successfully.

209
00:11:12.240 --> 00:11:15.090
Now the version with three Jobs was a bit faster here,

210
00:11:15.090 --> 00:11:18.510
but ultimately, both Workflows were super fast.

211
00:11:18.510 --> 00:11:20.730
And it is of course worth noting that for diversion

212
00:11:20.730 --> 00:11:24.840
with three Jobs, all three Jobs runs simultaneously,

213
00:11:24.840 --> 00:11:27.750
so in parallel because that's the default

214
00:11:27.750 --> 00:11:29.073
for GitHub Actions.

215
00:11:29.970 --> 00:11:32.940
If you want to run these Jobs after each other,

216
00:11:32.940 --> 00:11:36.930
you can do this by adding the needs keyword.

217
00:11:36.930 --> 00:11:41.930
So here for testing, we could say needs lint,

218
00:11:42.000 --> 00:11:44.280
so that this lint Job must be finished

219
00:11:44.280 --> 00:11:47.940
before the test Job runs, and for deploy,

220
00:11:47.940 --> 00:11:52.110
we can say needs test, so that the test Job must be finished

221
00:11:52.110 --> 00:11:54.930
before the deployment starts.

222
00:11:54.930 --> 00:11:57.780
And it simply depends on your exact requirements

223
00:11:57.780 --> 00:11:59.640
which option you wanna choose,

224
00:11:59.640 --> 00:12:02.910
which approach you wanna choose if you wanna have parallel,

225
00:12:02.910 --> 00:12:04.503
or sequential Jobs.

226
00:12:05.490 --> 00:12:08.700
Here, I'll show you this alternative as well,

227
00:12:08.700 --> 00:12:13.700
and I'll add a message of run Jobs after each other,

228
00:12:16.530 --> 00:12:19.410
and push this updated Workflow.

229
00:12:19.410 --> 00:12:21.930
And with that of course, both Workflows

230
00:12:21.930 --> 00:12:24.090
should be triggered again because we pushed

231
00:12:24.090 --> 00:12:28.620
to this Repository, but now the version with the three Jobs,

232
00:12:28.620 --> 00:12:30.990
should run these Jobs after each other

233
00:12:30.990 --> 00:12:34.710
as you can already see here in this visualization.

234
00:12:34.710 --> 00:12:38.280
So now it's first running the lint Job, then the test Job,

235
00:12:38.280 --> 00:12:41.220
and then the deploy Job, but ultimately, of course,

236
00:12:41.220 --> 00:12:45.123
it should take a bit longer, but still finish successfully.

237
00:12:46.770 --> 00:12:47.603
Here we go.

238
00:12:47.603 --> 00:12:50.310
The first two Jobs already finished successfully,

239
00:12:50.310 --> 00:12:52.530
the third Job is running right now,

240
00:12:52.530 --> 00:12:56.193
and it should finish successfully any second as well.

241
00:12:57.030 --> 00:12:59.280
Let's see.

242
00:12:59.280 --> 00:13:01.050
Yep, here it's done.

243
00:13:01.050 --> 00:13:04.410
And that all worked as expected.

244
00:13:04.410 --> 00:13:08.790
So that was the first part of this exercise here.

245
00:13:08.790 --> 00:13:12.030
We built this lint, test, and deployment Workflow,

246
00:13:12.030 --> 00:13:14.043
and we built it in different versions.

247
00:13:15.030 --> 00:13:18.540
Now we also have that second task where you should add

248
00:13:18.540 --> 00:13:21.390
a new Workflow that's actually not triggered

249
00:13:21.390 --> 00:13:24.570
whenever you push to that Repository, but instead,

250
00:13:24.570 --> 00:13:27.840
whenever something happens with the issues

251
00:13:27.840 --> 00:13:32.460
of that Repository, when a new issue is added, for example.

252
00:13:32.460 --> 00:13:35.880
And all we wanna do here is output the details

253
00:13:35.880 --> 00:13:40.880
about this event in our shell, in the shell of the runner

254
00:13:41.250 --> 00:13:45.150
on which the Job of the Workflow executes.

255
00:13:45.150 --> 00:13:48.570
For this task, I'll add a new Workflow file,

256
00:13:48.570 --> 00:13:53.570
which I'll name issues.yml name as always is up to you.

257
00:13:53.970 --> 00:13:58.290
And then here, I'll give this a name of handle issues,

258
00:13:58.290 --> 00:14:00.300
you can choose whichever name you want,

259
00:14:00.300 --> 00:14:02.970
but the event trigger is very important.

260
00:14:02.970 --> 00:14:06.510
And here it's not on push, but it's instead on issues

261
00:14:06.510 --> 00:14:09.150
which is one of the officially supported events

262
00:14:09.150 --> 00:14:11.100
that will trigger this Workflow whenever

263
00:14:11.100 --> 00:14:14.763
anything issue related happens on the Repository.

264
00:14:16.560 --> 00:14:20.100
With that added, of course, we still define our Jobs,

265
00:14:20.100 --> 00:14:24.870
and here we only need one Job, which we could name info,

266
00:14:24.870 --> 00:14:29.870
or output, or output info, whatever you want,

267
00:14:31.500 --> 00:14:34.080
and then here we choose our runner which still

268
00:14:34.080 --> 00:14:38.670
is Ubuntu latest in my case, and we set up our Steps.

269
00:14:38.670 --> 00:14:42.390
And for the first Step, and in this case the only Step,

270
00:14:42.390 --> 00:14:46.200
I'll just say output event details.

271
00:14:46.200 --> 00:14:50.280
And we do output these details by using the echo command,

272
00:14:50.280 --> 00:14:53.670
but then we use this special expression syntax

273
00:14:53.670 --> 00:14:56.820
which I taught you, where you have a dollar sign,

274
00:14:56.820 --> 00:15:00.030
and then two opening and closing curly braces,

275
00:15:00.030 --> 00:15:03.720
and between those opening and closing curly braces,

276
00:15:03.720 --> 00:15:05.640
you can run special commands,

277
00:15:05.640 --> 00:15:09.510
and access special data objects that are provided

278
00:15:09.510 --> 00:15:11.853
by GitHub in that Workflow.

279
00:15:13.140 --> 00:15:16.080
And here I wanna output this special GitHub object

280
00:15:16.080 --> 00:15:20.310
which is provided, to be precise, to turn it into text.

281
00:15:20.310 --> 00:15:23.370
So from data to text that can be output,

282
00:15:23.370 --> 00:15:26.070
I'll wrap it with the two JSON function,

283
00:15:26.070 --> 00:15:28.860
which is a function provided by GitHub Actions,

284
00:15:28.860 --> 00:15:31.413
which can be used inside of such expressions.

285
00:15:32.490 --> 00:15:34.050
So this will output some information

286
00:15:34.050 --> 00:15:37.800
about this GitHub context object.

287
00:15:37.800 --> 00:15:41.250
And since I'm only interested in the event specific data,

288
00:15:41.250 --> 00:15:44.700
I'll actually access github.event.

289
00:15:44.700 --> 00:15:46.650
I showed you earlier in this course

290
00:15:46.650 --> 00:15:51.270
that this GitHub context object is a quite complex object

291
00:15:51.270 --> 00:15:55.050
with lots of data inside of it, and it actually also

292
00:15:55.050 --> 00:15:59.190
has an event field, so a nested object

293
00:15:59.190 --> 00:16:03.480
inside of this GitHub object with event specific data.

294
00:16:03.480 --> 00:16:06.300
And we could output the entire GitHub object here,

295
00:16:06.300 --> 00:16:08.790
but since we're only interested in the event data,

296
00:16:08.790 --> 00:16:12.600
I'll dive into this nested object, and output the data

297
00:16:12.600 --> 00:16:14.523
in that nested object here.

298
00:16:16.200 --> 00:16:21.030
And with that, I'll create another commit, add all my files,

299
00:16:21.030 --> 00:16:26.030
give this a message of added issues, Workflow,

300
00:16:26.610 --> 00:16:27.903
and push that.

301
00:16:28.890 --> 00:16:32.190
And of course, once we push, the other two Workflows here

302
00:16:32.190 --> 00:16:34.230
will be triggered as you can tell,

303
00:16:34.230 --> 00:16:37.140
but this newly added Workflow, which you can see here

304
00:16:37.140 --> 00:16:40.290
on the left, is not triggered because it's not listening

305
00:16:40.290 --> 00:16:44.973
to pushes, but instead two issues being created, or edited.

306
00:16:46.170 --> 00:16:50.010
So to simulate this, we can simply create a new issue here,

307
00:16:50.010 --> 00:16:52.710
because it does not matter who creates an issue,

308
00:16:52.710 --> 00:16:54.963
if that's us, or someone else.

309
00:16:55.830 --> 00:16:58.560
I'll just say new issue, and submit this new issue

310
00:16:58.560 --> 00:17:00.420
because it doesn't really matter,

311
00:17:00.420 --> 00:17:02.790
we just need some issue action

312
00:17:02.790 --> 00:17:06.810
in order to trigger this Workflow as you can tell.

313
00:17:06.810 --> 00:17:10.619
Now this Workflow is triggered, and in here you see

314
00:17:10.619 --> 00:17:13.230
it outputs the event details.

315
00:17:13.230 --> 00:17:16.770
All that here are the details of this event,

316
00:17:16.770 --> 00:17:20.310
and we see that an issue was open for example,

317
00:17:20.310 --> 00:17:23.880
we can learn more about the URLs that lead

318
00:17:23.880 --> 00:17:26.579
to that issue, and so on.

319
00:17:26.579 --> 00:17:28.860
Simply, have a look at all the data that

320
00:17:28.860 --> 00:17:32.190
is part of that event data, and of course that event data

321
00:17:32.190 --> 00:17:34.980
could then be used in more complex Workflows

322
00:17:34.980 --> 00:17:38.730
to for example, automatically analyze open issues,

323
00:17:38.730 --> 00:17:42.000
add labels, or do anything like this.

324
00:17:42.000 --> 00:17:44.340
Here, however, we're just outputting this data

325
00:17:44.340 --> 00:17:46.500
because that's everything that needs to be done

326
00:17:46.500 --> 00:17:48.333
to complete this exercise.

