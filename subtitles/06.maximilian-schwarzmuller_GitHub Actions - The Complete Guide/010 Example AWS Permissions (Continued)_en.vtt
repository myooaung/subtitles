WEBVTT
1
00:00:02.235 --> 00:00:05.007
So how do we use OpenID Connect now?

2
00:00:05.007 --> 00:00:06.249
Well, for this,

3
00:00:06.249 --> 00:00:07.634
we first of all,

4
00:00:07.634 --> 00:00:10.625
must add an OpenID Connect provider

5
00:00:10.625 --> 00:00:14.748
to AWS via a service called IAM.

6
00:00:14.748 --> 00:00:15.756
And we learn more about that

7
00:00:15.756 --> 00:00:19.290
in the official AWS documentation.

8
00:00:19.290 --> 00:00:20.123
There, we learn that

9
00:00:20.123 --> 00:00:24.010
for creating a new OpenID Connect provider,

10
00:00:24.010 --> 00:00:27.391
we must go to the IAM service

11
00:00:27.391 --> 00:00:29.738
which we can do by typing IAM here

12
00:00:29.738 --> 00:00:30.759
in that search bar

13
00:00:30.759 --> 00:00:33.511
at the top of the AWS console.

14
00:00:33.511 --> 00:00:36.750
And then we must click on Add provider

15
00:00:36.750 --> 00:00:39.380
under identity providers.

16
00:00:39.380 --> 00:00:42.011
So here, we got identity providers,

17
00:00:42.011 --> 00:00:43.988
we click on Add Provider.

18
00:00:43.988 --> 00:00:46.505
And here, we choose OpenID Connect.

19
00:00:46.505 --> 00:00:49.002
Now, we must enter a provider URL

20
00:00:49.002 --> 00:00:50.745
and an audience.

21
00:00:50.745 --> 00:00:52.991
And that's data we get from GitHub

22
00:00:52.991 --> 00:00:54.244
in their documentation.

23
00:00:54.244 --> 00:00:56.990
That is the provider URL,

24
00:00:56.990 --> 00:00:58.988
which we enter here.

25
00:00:58.988 --> 00:01:01.530
And then here, we get the audience,

26
00:01:01.530 --> 00:01:03.180
this value here,

27
00:01:03.180 --> 00:01:04.495
which we enter here.

28
00:01:04.495 --> 00:01:07.293
Then we click Get thumbprint.

29
00:01:08.460 --> 00:01:09.360
And once we did that,

30
00:01:09.360 --> 00:01:11.005
we can add this provider.

31
00:01:11.005 --> 00:01:11.997
So now, this was added.

32
00:01:11.997 --> 00:01:14.151
That's the first step.

33
00:01:14.151 --> 00:01:15.380
With that added,

34
00:01:15.380 --> 00:01:19.498
GitHub will be able to send requests to AWS

35
00:01:19.498 --> 00:01:23.040
to request permissions from AWS.

36
00:01:23.040 --> 00:01:24.247
And that's the next part therefore.

37
00:01:24.247 --> 00:01:27.144
Now, we must define here on AWS

38
00:01:27.144 --> 00:01:31.496
which kind of permissions should be handed out to GitHub,

39
00:01:31.496 --> 00:01:33.002
so that GitHub can then, for example,

40
00:01:33.002 --> 00:01:36.753
use these permissions in its workflow runs.

41
00:01:36.753 --> 00:01:40.511
For that, we have to assign a role here to our provider.

42
00:01:40.511 --> 00:01:43.133
And for that, we can click on that provider

43
00:01:43.133 --> 00:01:46.410
and then click on assigned role.

44
00:01:46.410 --> 00:01:48.003
And we could use an existing role

45
00:01:48.003 --> 00:01:48.836
if we had one.

46
00:01:48.836 --> 00:01:50.630
But here, we have to create a new one.

47
00:01:50.630 --> 00:01:54.379
And a role in AWS world is simply a document

48
00:01:54.379 --> 00:01:56.258
that describes permissions

49
00:01:56.258 --> 00:01:58.254
that will be added to an entity.

50
00:01:58.254 --> 00:02:01.248
And here, the entity is this identity provider,

51
00:02:01.248 --> 00:02:02.748
so that link to GitHub.

52
00:02:02.748 --> 00:02:05.385
So ultimately, it will be our GitHub workflows

53
00:02:05.385 --> 00:02:07.803
that will get those permissions.

54
00:02:08.640 --> 00:02:11.490
So we create that new role here.

55
00:02:11.490 --> 00:02:13.504
And here, web identity must be selected

56
00:02:13.504 --> 00:02:16.489
and this identity provider must be selected.

57
00:02:16.489 --> 00:02:17.751
We also select the audience,

58
00:02:17.751 --> 00:02:19.239
which we entered before.

59
00:02:19.239 --> 00:02:22.139
And now, we define the permissions of that role.

60
00:02:22.139 --> 00:02:23.748
In AWS world, you do that

61
00:02:23.748 --> 00:02:27.001
by creating so-called policies.

62
00:02:27.001 --> 00:02:30.510
There all is a bunch of prebuilt policies.

63
00:02:30.510 --> 00:02:32.012
And here, to keep things simpler,

64
00:02:32.012 --> 00:02:34.920
we could search for S3

65
00:02:34.920 --> 00:02:38.759
and then add the S3 full access policy.

66
00:02:38.759 --> 00:02:40.492
If you had more AWS experience,

67
00:02:40.492 --> 00:02:43.491
you could add a more fine-grained policy

68
00:02:43.491 --> 00:02:46.247
because this policy actually still includes a lot

69
00:02:46.247 --> 00:02:47.994
of permissions we don't need.

70
00:02:47.994 --> 00:02:48.827
But for this demo,

71
00:02:48.827 --> 00:02:50.760
it's good enough.

72
00:02:50.760 --> 00:02:53.886
So I'll add this Amazon S3 full access policy

73
00:02:53.886 --> 00:02:56.249
to that role we're building.

74
00:02:56.249 --> 00:02:57.492
We can skip the tags step

75
00:02:57.492 --> 00:02:59.220
and click Next.

76
00:02:59.220 --> 00:03:00.379
And now, give this role a name

77
00:03:00.379 --> 00:03:03.370
and I'll name it GitHubDemo1

78
00:03:03.370 --> 00:03:05.283
and create that role.

79
00:03:07.243 --> 00:03:10.353
With that role created here,

80
00:03:10.353 --> 00:03:14.500
it's added to this identity provider.

81
00:03:14.500 --> 00:03:15.623
We can tell that it was added

82
00:03:15.623 --> 00:03:17.744
if we click on that role there.

83
00:03:17.744 --> 00:03:20.001
If you click on Trust relationship,

84
00:03:20.001 --> 00:03:21.863
in the end this year tells us

85
00:03:21.863 --> 00:03:25.251
that it was added for this GitHub identity provider.

86
00:03:25.251 --> 00:03:28.770
So this role can be assumed by GitHub,

87
00:03:28.770 --> 00:03:29.603
so to say,

88
00:03:29.603 --> 00:03:30.436
and GitHub will assume it

89
00:03:30.436 --> 00:03:32.752
when executing our workflows.

90
00:03:32.752 --> 00:03:34.863
So that then allows our workflows

91
00:03:34.863 --> 00:03:36.151
to assume this role.

92
00:03:36.151 --> 00:03:38.243
And this role includes the permissions

93
00:03:38.243 --> 00:03:41.011
to interact with this S3 service.

94
00:03:41.011 --> 00:03:43.636
And that's what we need here.

95
00:03:43.636 --> 00:03:44.751
Now, as a next step,

96
00:03:44.751 --> 00:03:47.749
we could added this Trust relationship,

97
00:03:47.749 --> 00:03:49.249
this trust policy,

98
00:03:49.249 --> 00:03:50.243
and for example,

99
00:03:50.243 --> 00:03:53.244
restrict for which kind of repositories this role

100
00:03:53.244 --> 00:03:54.260
can be assumed.

101
00:03:54.260 --> 00:03:55.879
And that is something you might wanna do

102
00:03:55.879 --> 00:03:57.872
to have even more control over

103
00:03:57.872 --> 00:04:01.260
when those AWS permissions can be assumed.

104
00:04:01.260 --> 00:04:02.489
Here, to keep things simple,

105
00:04:02.489 --> 00:04:04.244
I'll keep the default setting,

106
00:04:04.244 --> 00:04:05.621
but you could be more restrictive

107
00:04:05.621 --> 00:04:10.293
as described here in the official GitHub documentation.

108
00:04:11.550 --> 00:04:12.383
Now, for us,

109
00:04:12.383 --> 00:04:14.499
that's all we have to do on AWS side though.

110
00:04:14.499 --> 00:04:16.382
We added the identity provider

111
00:04:16.382 --> 00:04:18.492
and assigned this role.

112
00:04:18.492 --> 00:04:21.982
Now, we have to tweak our GitHub Actions workflow here

113
00:04:21.982 --> 00:04:23.867
because our custom action,

114
00:04:23.867 --> 00:04:26.629
in my case here, deploy-s3-docker,

115
00:04:26.629 --> 00:04:29.256
needs access to AWS.

116
00:04:29.256 --> 00:04:30.089
And at the moment,

117
00:04:30.089 --> 00:04:31.008
we're granting that access

118
00:04:31.008 --> 00:04:33.866
by setting these environment variables.

119
00:04:33.866 --> 00:04:36.370
Well, we're not going to do this anymore.

120
00:04:36.370 --> 00:04:37.367
Instead, what we'll do

121
00:04:37.367 --> 00:04:40.000
is we'll add a new step,

122
00:04:40.000 --> 00:04:43.504
which I'll name get AWS permissions

123
00:04:43.504 --> 00:04:45.248
which will get us the permissions

124
00:04:45.248 --> 00:04:46.882
for this workflow execution

125
00:04:46.882 --> 00:04:49.141
or for this job execution here

126
00:04:49.141 --> 00:04:51.754
to be precise before performing the action

127
00:04:51.754 --> 00:04:54.491
that needs the permissions.

128
00:04:54.491 --> 00:04:57.254
And we'll do that by using another action,

129
00:04:57.254 --> 00:04:58.614
an action that's also mentioned

130
00:04:58.614 --> 00:05:01.986
in the official GitHub documentation.

131
00:05:01.986 --> 00:05:06.502
It's this aws-actions/configure-aws-credentials action,

132
00:05:06.502 --> 00:05:09.103
which is an action published by AWS,

133
00:05:09.103 --> 00:05:13.490
a GitHub action published by AWS.

134
00:05:13.490 --> 00:05:15.243
This is the action which we'll use here

135
00:05:15.243 --> 00:05:16.996
in this step in our workflow,

136
00:05:16.996 --> 00:05:21.762
in this job before deploying QS3.

137
00:05:21.762 --> 00:05:22.884
And if we stroll down further

138
00:05:22.884 --> 00:05:24.627
in the GitHub documentation,

139
00:05:24.627 --> 00:05:27.755
we learned that we now also must add some permissions

140
00:05:27.755 --> 00:05:29.500
to our job.

141
00:05:29.500 --> 00:05:31.999
We must add these permissions

142
00:05:31.999 --> 00:05:33.498
because by default,

143
00:05:33.498 --> 00:05:36.997
no matter which general permission default settings we have,

144
00:05:36.997 --> 00:05:41.488
the ID token permission is always disabled.

145
00:05:41.488 --> 00:05:42.321
It's not set.

146
00:05:42.321 --> 00:05:44.492
By default, our workflow is not able

147
00:05:44.492 --> 00:05:46.989
to get this OpenID Connect token

148
00:05:46.989 --> 00:05:51.030
which is needed here to talk to AWS.

149
00:05:51.030 --> 00:05:53.012
And we must grant access to that token

150
00:05:53.012 --> 00:05:56.142
so that this OpenID Connection,

151
00:05:56.142 --> 00:05:58.885
you could say, can be used.

152
00:05:58.885 --> 00:06:00.748
Therefore, we must add permissions

153
00:06:00.748 --> 00:06:02.994
to just deploy job

154
00:06:02.994 --> 00:06:05.996
and add the ID token permission

155
00:06:05.996 --> 00:06:09.496
and set that to write.

156
00:06:09.496 --> 00:06:11.001
Now, we won't change the token here,

157
00:06:11.001 --> 00:06:13.623
but still, write permissions are needed

158
00:06:13.623 --> 00:06:16.877
to interact with that token correctly.

159
00:06:16.877 --> 00:06:19.506
As you see here in the official GitHub documentation,

160
00:06:19.506 --> 00:06:20.504
can be a bit confusing,

161
00:06:20.504 --> 00:06:22.752
but it must be write.

162
00:06:22.752 --> 00:06:24.745
I will also set contents to read

163
00:06:24.745 --> 00:06:25.984
because you learned before

164
00:06:25.984 --> 00:06:27.741
that if you set one permission

165
00:06:27.741 --> 00:06:28.999
and only one permission,

166
00:06:28.999 --> 00:06:32.635
all our permissions are disabled by default.

167
00:06:32.635 --> 00:06:34.871
Now, since I still check out my code here though,

168
00:06:34.871 --> 00:06:37.004
I must add contents read

169
00:06:37.004 --> 00:06:39.250
so that the GitHub token for this job

170
00:06:39.250 --> 00:06:42.257
is allowed to get the code from my repository.

171
00:06:42.257 --> 00:06:44.498
So that this checkout action works correctly.

172
00:06:44.498 --> 00:06:48.482
Therefore, contents read must be added here.

173
00:06:48.482 --> 00:06:50.994
This will also grant the necessary permissions

174
00:06:50.994 --> 00:06:53.893
to download our artifact.

175
00:06:53.893 --> 00:06:56.249
Now, with those permissions added back here

176
00:06:56.249 --> 00:06:59.003
to this step for getting the AWS credentials

177
00:06:59.003 --> 00:07:03.249
because here, we must add some inputs to this action.

178
00:07:03.249 --> 00:07:07.012
To be precise, we must add the role dash-to-assume.

179
00:07:07.012 --> 00:07:08.127
Input.

180
00:07:08.127 --> 00:07:10.377
As we also learn in the official documentation

181
00:07:10.377 --> 00:07:14.640
of this configure AWS credentials action.

182
00:07:14.640 --> 00:07:16.005
Here, we learn that this is one input

183
00:07:16.005 --> 00:07:17.988
that must be added.

184
00:07:17.988 --> 00:07:20.512
And the role I do wanna assume here is that role

185
00:07:20.512 --> 00:07:23.488
which we added a couple of minutes ago here.

186
00:07:23.488 --> 00:07:24.743
We need this ARN,

187
00:07:24.743 --> 00:07:28.140
this identifier of that role here,

188
00:07:28.140 --> 00:07:29.730
and we use that as a value

189
00:07:29.730 --> 00:07:33.252
for this role to assume key.

190
00:07:33.252 --> 00:07:36.127
We all must add the AWS Region key.

191
00:07:36.127 --> 00:07:38.260
And in our case, that's us-east-1.

192
00:07:38.260 --> 00:07:39.751
That's where we all interact

193
00:07:39.751 --> 00:07:42.258
with the S3 bucket.

194
00:07:42.258 --> 00:07:43.999
I also must added my input here

195
00:07:43.999 --> 00:07:45.242
for my custom action

196
00:07:45.242 --> 00:07:49.503
because I now have a different name for my bucket.

197
00:07:49.503 --> 00:07:50.740
There, I see all my buckets,

198
00:07:50.740 --> 00:07:51.992
and this is the name of the bucket

199
00:07:51.992 --> 00:07:54.252
that must be used now.

200
00:07:54.252 --> 00:07:57.491
So here, that's what I'll use here.

201
00:07:57.491 --> 00:07:59.144
And with that all,

202
00:07:59.144 --> 00:08:01.622
we now edited this workflow and this job

203
00:08:01.622 --> 00:08:04.522
such that we no longer need any AWS access keys as secrets.

204
00:08:04.522 --> 00:08:07.247
such that we no longer need any AWS access keys as secrets.

205
00:08:07.247 --> 00:08:10.378
But that we instead dynamically request permissions attached

206
00:08:10.378 --> 00:08:12.501
to a specific AWS role,

207
00:08:12.501 --> 00:08:15.735
which are required for this job to execute successfully

208
00:08:15.735 --> 00:08:17.631
with help of that OpenID Connection

209
00:08:17.631 --> 00:08:20.613
which we established earlier.

210
00:08:20.613 --> 00:08:22.923
With that, we can create a new commit:

211
00:08:24.217 --> 00:08:27.998
"use openid connect"

212
00:08:27.998 --> 00:08:29.125
and push this to see

213
00:08:29.125 --> 00:08:31.653
whether it all works as intended.

214
00:08:32.486 --> 00:08:35.135
Actually, here, it failed

215
00:08:35.135 --> 00:08:38.039
because I forgot to add the version number

216
00:08:38.039 --> 00:08:40.494
to this action here.

217
00:08:40.494 --> 00:08:41.749
That should be at v1.

218
00:08:41.749 --> 00:08:42.582
At the point of time,

219
00:08:42.582 --> 00:08:43.998
I'm recording this.

220
00:08:43.998 --> 00:08:45.850
So here, I'll add a new commit

221
00:08:48.876 --> 00:08:50.995
and push this again.

222
00:08:50.995 --> 00:08:52.489
Now, this workflow starts.

223
00:08:52.489 --> 00:08:55.383
Let's see whether it finishes successfully.

224
00:08:56.753 --> 00:08:58.895
And this is looking good.

225
00:08:58.895 --> 00:09:01.053
Looks like it was deployed.

226
00:09:01.977 --> 00:09:04.626
If we take a look at this bucket,

227
00:09:04.626 --> 00:09:06.866
we also see that all the files are there

228
00:09:06.866 --> 00:09:10.012
and were indeed uploaded successfully this time

229
00:09:10.012 --> 00:09:11.994
without any access key secrets

230
00:09:11.994 --> 00:09:14.482
or environment variables being stored here.

231
00:09:14.482 --> 00:09:17.397
But instead, by getting those permissions dynamically

232
00:09:17.397 --> 00:09:20.250
with this OpenID Connect approach

233
00:09:20.250 --> 00:09:23.500
which is recommended over using those access keys

234
00:09:23.500 --> 00:09:25.833
for the reasons mentioned before.

