WEBVTT
1
00:00:00.470 --> 00:00:01.460
Hi, guys.

2
00:00:01.460 --> 00:00:02.270
Welcome.

3
00:00:02.270 --> 00:00:08.870
In this lecture, you will be able to retrieve data from the cloud first database, and you will be

4
00:00:08.870 --> 00:00:12.200
able to display the data in the profile screen.

5
00:00:12.210 --> 00:00:19.730
Okay, then to do this, we have to head back to our voice code and then the profile screen and what

6
00:00:19.730 --> 00:00:26.330
we can do, we can use controller and B to make this wide and instead of returning a scaffold widgets

7
00:00:26.330 --> 00:00:30.650
for the now, we are going to return something known as future.

8
00:00:31.680 --> 00:00:32.610
Future.

9
00:00:33.670 --> 00:00:35.320
Future Buehler.

10
00:00:36.280 --> 00:00:36.570
Okay.

11
00:00:36.580 --> 00:00:39.790
We can get rid of this first.

12
00:00:39.790 --> 00:00:44.740
And the future builder has the property known as future.

13
00:00:44.950 --> 00:00:49.260
The future is basically referring to the source of the data.

14
00:00:49.270 --> 00:00:54.790
That is, where is the location of the data we are retrieving.

15
00:00:55.210 --> 00:00:55.840
Okay.

16
00:00:56.410 --> 00:01:04.090
To do this or to make this claim before the return, we can create a variable and we can just go ahead

17
00:01:04.090 --> 00:01:06.290
and specify the type of variable.

18
00:01:06.310 --> 00:01:13.150
It is a type of something known as collection reference and we can call this variable customer.

19
00:01:13.540 --> 00:01:17.590
Then it's going to be equal to firebase faster.

20
00:01:18.560 --> 00:01:25.340
Dorrit is tense and definitely we are going to need to assess this user's collection.

21
00:01:25.910 --> 00:01:28.370
So we then have to say collection.

22
00:01:29.350 --> 00:01:35.350
And the name of the collection is called uses like how the semicolon over there.

23
00:01:36.520 --> 00:01:42.250
And over a year we can then call this customer variable.

24
00:01:43.510 --> 00:01:45.140
But we are going to go further.

25
00:01:45.160 --> 00:01:48.820
And the reason for this is because each user.

26
00:01:49.930 --> 00:01:57.310
Each user is going to be connected to this user's collection based on something known as UID.

27
00:01:57.610 --> 00:01:58.360
Right?

28
00:01:58.600 --> 00:02:03.640
So what we can do is over here to get the UID.

29
00:02:04.680 --> 00:02:10.080
We can just go ahead and create a find available and say it is a type of firebase.

30
00:02:10.800 --> 00:02:11.850
Firebase.

31
00:02:12.780 --> 00:02:13.840
Firebase.

32
00:02:15.330 --> 00:02:15.810
It.

33
00:02:18.020 --> 00:02:19.240
So fab.

34
00:02:19.340 --> 00:02:20.060
He's.

35
00:02:21.910 --> 00:02:22.780
Court.

36
00:02:23.080 --> 00:02:26.200
And you can call this rebel on the score heart.

37
00:02:26.410 --> 00:02:30.180
It's going to be equal to five days or it.

38
00:02:31.770 --> 00:02:33.390
The indoors is dense.

39
00:02:33.440 --> 00:02:35.370
Okay, great.

40
00:02:35.520 --> 00:02:38.820
And we can go further by saying Dirt Dog.

41
00:02:38.850 --> 00:02:41.750
I think you've seen something similar like this before.

42
00:02:41.760 --> 00:02:49.890
And now we can then call it the underscore art towards current user and or its UID.

43
00:02:49.920 --> 00:02:50.400
Right.

44
00:02:50.530 --> 00:02:51.090
Okay.

45
00:02:51.570 --> 00:02:55.470
Add this over here and we have to say don't get.

46
00:02:55.890 --> 00:02:56.700
Okay.

47
00:02:57.880 --> 00:03:04.570
First offer, we got access to the users collection where all our users are going to be stored.

48
00:03:04.960 --> 00:03:13.570
And the reason we are going further is we want to fetch the user that is logged in, that is the current

49
00:03:13.570 --> 00:03:15.870
user which is currently logged in.

50
00:03:15.880 --> 00:03:19.750
We do not want to fetch all the users, right?

51
00:03:19.750 --> 00:03:24.610
Because definitely you're not going to display all the users profile at the same time.

52
00:03:24.610 --> 00:03:31.270
So we have to go into a particular user, which is the user that is currently logged in.

53
00:03:31.630 --> 00:03:32.150
Right.

54
00:03:32.170 --> 00:03:32.800
Okay.

55
00:03:33.250 --> 00:03:39.250
And the future user also has a property known as builder.

56
00:03:39.280 --> 00:03:44.110
The builder is basically referring to how we are going to display the data.

57
00:03:44.140 --> 00:03:44.740
Okay.

58
00:03:45.500 --> 00:03:46.880
The other.

59
00:03:48.020 --> 00:03:55.760
As this contest, and we can just go ahead and specify it is a type of build contest.

60
00:03:57.440 --> 00:03:57.900
Kay.

61
00:03:57.920 --> 00:03:58.730
And.

62
00:04:00.080 --> 00:04:01.280
How did you recover?

63
00:04:01.400 --> 00:04:06.980
It also was a surprise, this property, which is known as a sink.

64
00:04:08.540 --> 00:04:12.770
Is saying openly, I'm going to spare this currently.

65
00:04:12.920 --> 00:04:16.519
If not, we're going to have an error async snap.

66
00:04:17.630 --> 00:04:19.010
Snob shirt.

67
00:04:19.990 --> 00:04:20.769
Okay.

68
00:04:20.769 --> 00:04:29.230
And this it is also a type of document snapshot or document snapshots means it's basically referring

69
00:04:29.230 --> 00:04:31.000
to a single data.

70
00:04:31.790 --> 00:04:33.110
Snapshots.

71
00:04:34.160 --> 00:04:37.760
And we can then call this rebel snapshot.

72
00:04:38.390 --> 00:04:45.200
You can see the snapshot variable as a variable that has access to all the data as we have via.

73
00:04:46.150 --> 00:04:46.840
Okay.

74
00:04:46.840 --> 00:04:47.590
Great.

75
00:04:47.980 --> 00:04:48.580
Sorry.

76
00:04:48.940 --> 00:04:49.420
Yeah.

77
00:04:51.390 --> 00:04:52.490
This next slide.

78
00:04:52.500 --> 00:04:57.630
If you have any help in this, it might be your spelling is not fully correct.

79
00:04:57.630 --> 00:05:00.030
So it is known as async snapshot.

80
00:05:01.090 --> 00:05:01.810
Okay.

81
00:05:02.580 --> 00:05:04.090
Yeah, we need to have.

82
00:05:05.340 --> 00:05:06.570
A semicolon.

83
00:05:08.110 --> 00:05:10.240
And we are going to do some check.

84
00:05:11.470 --> 00:05:13.300
They're going to do some check first.

85
00:05:14.380 --> 00:05:15.910
And the first check.

86
00:05:17.000 --> 00:05:21.430
There's going to be this and we can check first.

87
00:05:21.440 --> 00:05:27.110
We are going to say if snapshot this snapshot by said, you can see the snapshot as a variable that

88
00:05:27.110 --> 00:05:30.320
has access to all the details we have via.

89
00:05:31.140 --> 00:05:32.970
So you can see if snapshots.

90
00:05:33.940 --> 00:05:35.260
Snapshot.

91
00:05:37.520 --> 00:05:40.100
Snapshot dot.

92
00:05:41.310 --> 00:05:43.980
We can has error first.

93
00:05:45.330 --> 00:05:46.710
If it adds error.

94
00:05:47.790 --> 00:05:49.980
Then we want to return.

95
00:05:51.590 --> 00:05:52.610
It says.

96
00:05:54.070 --> 00:05:58.120
Which is to say something went wrong.

97
00:05:58.120 --> 00:06:00.730
But definitely we do not know what went wrong.

98
00:06:01.040 --> 00:06:02.710
Okay, this is the first check.

99
00:06:03.130 --> 00:06:05.980
We can then have another check.

100
00:06:06.640 --> 00:06:08.860
We can say if snapshot.

101
00:06:10.550 --> 00:06:11.690
Snapshot.

102
00:06:12.770 --> 00:06:14.420
DOD has data.

103
00:06:15.810 --> 00:06:17.430
Right that has data.

104
00:06:17.460 --> 00:06:25.380
That means if the user which is currently logged in, has data in the faster data in the cloud faster.

105
00:06:26.550 --> 00:06:29.430
And we can add multiple check and.

106
00:06:31.220 --> 00:06:34.370
We can just add a no check over it and snap short.

107
00:06:36.630 --> 00:06:38.670
DOT data.

108
00:06:39.560 --> 00:06:41.020
Does not exist.

109
00:06:41.290 --> 00:06:43.710
If it actually exists, we need to not check over it.

110
00:06:44.230 --> 00:06:45.550
If it exist.

111
00:06:46.860 --> 00:06:47.670
Okay.

112
00:06:48.470 --> 00:06:51.640
So if it does not exist, that's what this does.

113
00:06:51.650 --> 00:06:58.220
Or why they are simply saying if it has data or does not exist, then we want to return.

114
00:06:59.410 --> 00:07:01.810
Return a test.

115
00:07:03.050 --> 00:07:04.820
Which is going to say document.

116
00:07:06.460 --> 00:07:07.360
Does.

117
00:07:08.520 --> 00:07:10.500
Not exist.

118
00:07:12.280 --> 00:07:13.660
Is this okay?

119
00:07:14.170 --> 00:07:15.700
Now we have to check.

120
00:07:16.200 --> 00:07:16.490
Okay.

121
00:07:16.540 --> 00:07:18.450
We are going to have another check again.

122
00:07:19.920 --> 00:07:20.380
The kid.

123
00:07:20.380 --> 00:07:22.330
We just have to be sure every ten.

124
00:07:23.340 --> 00:07:25.290
Is currently done.

125
00:07:25.740 --> 00:07:27.450
Okay, we can have another check.

126
00:07:27.900 --> 00:07:29.850
We can then say if snapshot.

127
00:07:30.850 --> 00:07:31.540
Snapshot.

128
00:07:31.540 --> 00:07:32.440
Snapshot.

129
00:07:33.260 --> 00:07:38.390
Dot sorry it ladies over the condition states.

130
00:07:39.580 --> 00:07:43.890
Is equal to that is it is currently loading or trying to fetch the data.

131
00:07:43.900 --> 00:07:47.800
That is why most of the time you would want to have a spinner.

132
00:07:48.550 --> 00:07:49.140
Okay.

133
00:07:49.720 --> 00:07:51.100
Is equal to.

134
00:07:52.430 --> 00:07:54.020
Condition states.

135
00:07:56.140 --> 00:07:58.020
Conditions to dawn.

136
00:07:58.630 --> 00:08:01.300
We are simply saying after it finishes loading.

137
00:08:03.160 --> 00:08:09.520
If that finishes low, then the what we want to do is we want to display the data.

138
00:08:10.300 --> 00:08:15.970
So over here we can create a variable called data and it's going to be equal to.

139
00:08:16.300 --> 00:08:21.710
I can just go ahead and specify the type of variable it is a type of map, right?

140
00:08:21.730 --> 00:08:26.050
So you can see it is a type of map and all these are strings.

141
00:08:27.010 --> 00:08:33.789
So if I can just add this and this is a type of string also, and also it is a type of dynamic.

142
00:08:34.720 --> 00:08:41.049
Because all this can be numbers, integer, boolean, and so on.

143
00:08:42.700 --> 00:08:44.020
And over here.

144
00:08:45.510 --> 00:08:47.490
Is equal to snapshot.

145
00:08:48.560 --> 00:08:52.160
Snapshot dot data.

146
00:08:52.990 --> 00:08:53.770
Dot.

147
00:08:55.070 --> 00:08:57.890
Dot dot data.

148
00:08:58.490 --> 00:09:00.710
The data again.

149
00:09:01.310 --> 00:09:03.560
And we have to convert it to us.

150
00:09:04.840 --> 00:09:05.710
Lap.

151
00:09:07.990 --> 00:09:08.980
String.

152
00:09:10.500 --> 00:09:13.560
We're just going to come back to this again and dynamic.

153
00:09:15.440 --> 00:09:15.920
Okay.

154
00:09:15.920 --> 00:09:18.060
We need a check over here.

155
00:09:20.020 --> 00:09:22.720
This is basically it after it finishes loading.

156
00:09:22.810 --> 00:09:24.430
We want to display.

157
00:09:25.520 --> 00:09:31.640
We basically have any available court data to store all the data as we have over here.

158
00:09:33.210 --> 00:09:33.580
Right.

159
00:09:33.740 --> 00:09:40.160
Like I said, this snapshot has all the details to our cloud first.

160
00:09:40.470 --> 00:09:40.860
Right.

161
00:09:40.860 --> 00:09:43.830
So basically we're saving it in the data code.

162
00:09:44.800 --> 00:09:47.640
You are basically receiving it into the available data.

163
00:09:48.150 --> 00:09:48.840
Okay.

164
00:09:49.700 --> 00:09:50.390
Great.

165
00:09:50.720 --> 00:09:53.210
And else.

166
00:09:53.980 --> 00:09:58.480
What we can just do is we do not really need to have X or Y.

167
00:09:59.670 --> 00:10:00.210
Definitely.

168
00:10:00.210 --> 00:10:02.990
If this code does not work, this is going to work.

169
00:10:03.000 --> 00:10:03.270
Okay.

170
00:10:03.300 --> 00:10:05.130
Else we want to return.

171
00:10:06.200 --> 00:10:07.340
Maybe it's just.

172
00:10:09.390 --> 00:10:11.190
Which is going to say in.

173
00:10:13.640 --> 00:10:14.480
Loading.

174
00:10:16.520 --> 00:10:20.050
Hopefully I can spell loading.

175
00:10:20.180 --> 00:10:20.870
Okay.

176
00:10:22.310 --> 00:10:24.590
I think I've spent a lot of time.

177
00:10:26.900 --> 00:10:27.620
Okay.

