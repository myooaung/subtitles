WEBVTT
1
00:00:00.240 --> 00:00:01.290
Hi, guys.

2
00:00:01.290 --> 00:00:02.220
Welcome.

3
00:00:02.250 --> 00:00:06.960
In this lecture, we're going to start creating the functionality to sign up users.

4
00:00:06.960 --> 00:00:12.690
Well, before then, we all agreed that the controller's directory is where we're going to be creating

5
00:00:12.690 --> 00:00:14.070
all our logics.

6
00:00:14.070 --> 00:00:20.100
So over this controller's directory we are going to create a new file and we're going to call this file

7
00:00:20.130 --> 00:00:27.820
out, underscore controller, and then the section is dart darts and now we can use controller and bits

8
00:00:27.820 --> 00:00:28.680
to make this wide.

9
00:00:29.520 --> 00:00:31.950
In order to have a much more clean code.

10
00:00:31.950 --> 00:00:39.840
What we can do is we can create a class and as well we can call this class ARDS controller.

11
00:00:40.700 --> 00:00:41.790
Okay, great.

12
00:00:41.810 --> 00:00:46.740
And now the next step is to create a function to sign up users.

13
00:00:46.760 --> 00:00:49.550
We can call this function sign.

14
00:00:50.570 --> 00:00:52.820
OP uses.

15
00:00:54.190 --> 00:00:55.330
Uses OC.

16
00:00:56.330 --> 00:01:01.940
And now it's in this parenthesis we are going to pass in the fields we need for now.

17
00:01:01.940 --> 00:01:07.870
It's going to be the full name, the email address of the user, and then the password of the user.

18
00:01:07.880 --> 00:01:10.370
In the future we are going to sort out this image.

19
00:01:10.370 --> 00:01:10.920
Okay?

20
00:01:11.390 --> 00:01:15.410
So within the parenthesis we can pass in the full name.

21
00:01:17.180 --> 00:01:18.980
And we are expecting the test.

22
00:01:18.980 --> 00:01:21.320
So this is a little type of string.

23
00:01:23.440 --> 00:01:25.900
And we can had a trailer cover.

24
00:01:26.440 --> 00:01:28.870
We want the e-mail address of the user.

25
00:01:30.630 --> 00:01:31.880
It's also going to be a test.

26
00:01:31.890 --> 00:01:36.810
So it is a data type of string and over here we need the password.

27
00:01:37.110 --> 00:01:39.120
We are also expecting a test.

28
00:01:39.750 --> 00:01:42.180
So it is a data type of string.

29
00:01:43.070 --> 00:01:44.120
Okay, great.

30
00:01:44.930 --> 00:01:50.380
And now what we can do is we can create a variable to store the possible errors.

31
00:01:50.390 --> 00:01:54.260
So over here we can create a variable called whereas.

32
00:01:55.020 --> 00:02:01.320
Which is the short form I wish we can take as the short form of results so we can assess it quite to

33
00:02:01.560 --> 00:02:05.280
some hair or cord.

34
00:02:06.740 --> 00:02:07.280
Okay.

35
00:02:07.280 --> 00:02:07.910
Great.

36
00:02:07.940 --> 00:02:11.230
Hey, now you can see it wants us to specify the type of variable this is.

37
00:02:11.240 --> 00:02:15.080
It says so it is definitely a data type.

38
00:02:15.740 --> 00:02:18.500
A data type of string.

39
00:02:19.250 --> 00:02:20.210
Okay, great.

40
00:02:20.250 --> 00:02:25.070
And now what we can do is we can have a try and the cache block.

41
00:02:25.370 --> 00:02:26.330
So try.

42
00:02:27.530 --> 00:02:31.100
And cash they within the tribal org.

43
00:02:31.130 --> 00:02:34.780
What we can do now is we can have some validations check.

44
00:02:34.790 --> 00:02:36.920
So over here we can say if.

45
00:02:37.890 --> 00:02:39.810
Full name.

46
00:02:40.860 --> 00:02:43.920
Darts is not empty.

47
00:02:44.670 --> 00:02:51.120
And the email address of the user that is the email dot is not empty.

48
00:02:51.120 --> 00:02:57.150
And finally and the password dot is not empty.

49
00:02:57.210 --> 00:03:01.890
If it is not empty, then we want to do something over here.

50
00:03:02.810 --> 00:03:03.140
Right.

51
00:03:03.410 --> 00:03:07.370
So what we're going to do is we're going to sign up the users.

52
00:03:07.370 --> 00:03:14.450
And in order to sign up the user, we had recently stored a package known as Firebase Cards, which

53
00:03:14.450 --> 00:03:15.920
we have over here.

54
00:03:15.950 --> 00:03:19.160
So what we can do is we can import this package.

55
00:03:19.550 --> 00:03:21.440
So we're going to go back to the.

56
00:03:23.000 --> 00:03:24.890
Land controller.

57
00:03:26.560 --> 00:03:31.450
And over here we can create a final variable and we can just go ahead and specify this type of rainbow.

58
00:03:31.540 --> 00:03:33.370
It is a type of firebase.

59
00:03:34.250 --> 00:03:36.300
Art and we can call this rainbow.

60
00:03:36.320 --> 00:03:40.910
On the score, art is going to be equal to fire bass art.

61
00:03:41.870 --> 00:03:43.350
Dot is stands.

62
00:03:43.400 --> 00:03:44.630
Okay, great.

63
00:03:45.080 --> 00:03:51.740
So within the tribal org, if all these fields are not empty, then we want to sign up the user boards

64
00:03:51.740 --> 00:03:52.830
in order to sign up the user.

65
00:03:52.850 --> 00:03:54.110
It's going to take some time.

66
00:03:54.350 --> 00:03:56.620
So what we can do is we can take a floater.

67
00:03:56.630 --> 00:03:57.860
We are ready to wait.

68
00:03:57.890 --> 00:04:00.410
See, it's signs of the user.

69
00:04:00.440 --> 00:04:05.780
And to do that over here, we're going to need to pass in the async in order to use the.

70
00:04:06.410 --> 00:04:09.710
So over here we can say we are ready to await for the process.

71
00:04:09.830 --> 00:04:15.650
So what we can do now is we can call this on the score what variable we just created, and now we can

72
00:04:15.650 --> 00:04:23.990
say dot create user with email and password so you can see it automatically this email and the password.

73
00:04:24.260 --> 00:04:26.280
This full name is not really necessary.

74
00:04:26.300 --> 00:04:31.070
We basically had that dot in order to have more information about the user.

75
00:04:31.340 --> 00:04:31.530
Okay.

76
00:04:31.550 --> 00:04:33.110
So we can add this over here.

77
00:04:33.970 --> 00:04:34.410
Okay.

78
00:04:34.430 --> 00:04:39.410
So if it is not empty, then we want to create the user with email password.

79
00:04:39.840 --> 00:04:40.700
Else.

80
00:04:41.640 --> 00:04:42.540
LS.

81
00:04:43.400 --> 00:04:44.540
That's maize.

82
00:04:44.570 --> 00:04:47.230
The fields, we are not filled in.

83
00:04:47.240 --> 00:04:58.640
So what we can do, we can update the rest table and we can then say, please, fields must not be empty.

84
00:04:59.200 --> 00:05:00.770
Okay, great.

85
00:05:01.970 --> 00:05:04.790
And what we can then do within the cache.

86
00:05:05.790 --> 00:05:07.260
We can then say.

87
00:05:08.240 --> 00:05:13.160
Whereas is equal to e got to string.

88
00:05:14.470 --> 00:05:16.000
He dots a string.

89
00:05:17.950 --> 00:05:19.490
To string.

90
00:05:19.510 --> 00:05:20.140
Sorry.

91
00:05:20.410 --> 00:05:22.870
Okay, now I'm going to spin this for you.

92
00:05:22.930 --> 00:05:27.760
Over here, we are simply saying if these fields are not empty, then only wants to create the user

93
00:05:27.760 --> 00:05:28.990
with email password.

94
00:05:28.990 --> 00:05:34.240
Else if it is empty, we want to print to the user which says please fill spots be empty.

95
00:05:34.330 --> 00:05:41.890
And over here if there is other error that is order from this then want to print wants to print it to

96
00:05:41.890 --> 00:05:42.340
the user.

97
00:05:42.340 --> 00:05:48.820
That is probably there is a network issue or failure in connection or email address already exists that

98
00:05:48.830 --> 00:05:49.930
want to print this.

99
00:05:50.260 --> 00:05:50.590
Okay.

100
00:05:50.590 --> 00:05:54.520
So this is what we basically saying and this is basically all we need.

101
00:05:54.520 --> 00:05:55.110
Okay.

102
00:05:55.120 --> 00:05:56.290
Now what are we going to need to do?

103
00:05:56.290 --> 00:05:58.660
Finally is over here.

104
00:05:58.660 --> 00:06:03.100
You can see all these are strings so we can specify the type of function.

105
00:06:03.130 --> 00:06:08.110
But before then, like I told you, it's going to take some time in order for that user to get signed

106
00:06:08.110 --> 00:06:08.680
up.

107
00:06:08.770 --> 00:06:12.010
And that is why most of the time you're going to see a loading spinner, right?

108
00:06:12.010 --> 00:06:14.590
Because it's going to take some time to sign up the user.

109
00:06:14.590 --> 00:06:20.830
So what we can do is over here, we can specify that this type of function is a future because it will

110
00:06:20.830 --> 00:06:21.700
take some time.

111
00:06:21.700 --> 00:06:26.830
And all this data we have over here are all strings, right?

112
00:06:26.860 --> 00:06:27.940
Okay, great.

113
00:06:28.270 --> 00:06:31.630
And now over here, we can then say return.

114
00:06:31.960 --> 00:06:32.860
Where's.

115
00:06:33.670 --> 00:06:34.040
Okay.

116
00:06:34.060 --> 00:06:36.520
This is basically all we need to do.

117
00:06:37.180 --> 00:06:37.720
Okay.

118
00:06:38.020 --> 00:06:45.170
Now, finally, what we need to do is to tell this made the dot to initialize firebase.

119
00:06:45.190 --> 00:06:50.770
Yes, we have successfully integrated firebase, but we also need to initialize it.

120
00:06:50.770 --> 00:06:52.880
That is starts the edge.

121
00:06:52.960 --> 00:06:53.530
Right.

122
00:06:54.860 --> 00:06:55.050
Okay.

123
00:06:55.190 --> 00:06:55.460
Sorry.

124
00:06:55.460 --> 00:06:57.080
I think I basically had this.

125
00:06:58.100 --> 00:07:01.370
So over here, we're going to need to say widgets.

126
00:07:02.310 --> 00:07:09.420
Floater binding, that is show a little ice up and it's going to take some time in order to initialize

127
00:07:09.420 --> 00:07:11.100
our firebase.

128
00:07:11.100 --> 00:07:16.610
So we are going to need to say a floater that we are ready to wait for the process and in order to the

129
00:07:17.310 --> 00:07:19.290
we need to use the async or via.

130
00:07:20.070 --> 00:07:24.330
So now we can then say, I'll wait, Firebase.

131
00:07:25.830 --> 00:07:26.490
Firebase.

132
00:07:26.490 --> 00:07:30.360
Firebase Firebase Dots is show initialize app.

133
00:07:30.390 --> 00:07:33.300
So this is basically where we can go further by saying.

134
00:07:33.510 --> 00:07:34.080
Then.

135
00:07:34.820 --> 00:07:40.310
We basically want to print something to the on so we say it's completed.

136
00:07:41.950 --> 00:07:43.270
This is not really necessary.

137
00:07:43.340 --> 00:07:44.230
Okay, great.

138
00:07:44.230 --> 00:07:45.850
So what do we want to do?

139
00:07:45.880 --> 00:07:52.270
We want to make sure all the widgets are initialized, such as the sensor that everything has been initialized.

140
00:07:52.270 --> 00:07:54.850
Then we want to start of the Firebase engine.

141
00:07:55.390 --> 00:07:56.820
Okay, great.

142
00:07:56.830 --> 00:08:03.910
So now what we can do is we can go to the landing customer screen and we can call that function now

143
00:08:03.910 --> 00:08:08.560
in order to have access to that function, which we have over here called signup users, we first need

144
00:08:08.560 --> 00:08:10.240
to have access to this class.

145
00:08:10.390 --> 00:08:14.620
So what we can do is we can create a variable to store that.

146
00:08:14.620 --> 00:08:19.300
So you can use controller B and over here we can create a final variable and we can just go ahead and

147
00:08:19.300 --> 00:08:20.260
specify type of way.

148
00:08:20.260 --> 00:08:25.180
But it's a type of controller and we can call this variable on this call controller, there's going

149
00:08:25.180 --> 00:08:27.430
to be equal to odd.

150
00:08:28.230 --> 00:08:29.190
Controller.

151
00:08:30.460 --> 00:08:31.620
Board controller class.

152
00:08:32.049 --> 00:08:32.390
Great.

153
00:08:32.409 --> 00:08:33.520
This is basically it.

154
00:08:33.789 --> 00:08:35.620
Hey, now we can go to.

155
00:08:37.010 --> 00:08:37.760
The.

156
00:08:39.010 --> 00:08:42.010
Sign up screen the sign up screen where we have.

157
00:08:43.460 --> 00:08:44.100
Okay.

158
00:08:44.120 --> 00:08:44.590
Okay.

159
00:08:44.650 --> 00:08:44.980
Okay.

160
00:08:44.990 --> 00:08:45.680
Sorry.

161
00:08:46.340 --> 00:08:47.310
I think I wish this.

162
00:08:47.600 --> 00:08:48.200
This.

163
00:08:50.150 --> 00:08:51.320
Okay.

164
00:08:53.080 --> 00:08:53.780
I'm just going to.

165
00:08:53.830 --> 00:08:55.000
Okay, this is it over here.

166
00:08:55.300 --> 00:08:56.530
This is a sign off button.

167
00:08:56.530 --> 00:09:02.380
So now we can get rid of this, and now we can call that variable on the score or controller.

168
00:09:02.380 --> 00:09:05.560
And now we have access to the function called sign up users.

169
00:09:06.520 --> 00:09:11.740
Now remember the previous lecture we talked about test data controller.

170
00:09:11.740 --> 00:09:17.440
And what this controller does is it's going to store the inputs of the user.

171
00:09:17.440 --> 00:09:20.590
So you can see over here we have this.

172
00:09:22.070 --> 00:09:24.380
Password controller over here.

173
00:09:24.410 --> 00:09:27.350
So whatsoever test we type in year.

174
00:09:28.810 --> 00:09:33.530
Whatever test we type in here, it's going to gets saved in this test at this controller.

175
00:09:33.550 --> 00:09:33.940
Right.

176
00:09:33.970 --> 00:09:34.510
Okay.

177
00:09:35.550 --> 00:09:37.050
So what we can do.

178
00:09:37.080 --> 00:09:43.410
Remember, we created a function called sign up users and then we pass in all this variables called

179
00:09:43.410 --> 00:09:45.180
fully email and password.

180
00:09:45.180 --> 00:09:47.670
So now we are able to pass the value.

181
00:09:47.670 --> 00:09:48.670
So this variable.

182
00:09:49.770 --> 00:09:57.420
So now we can say underscore for name controller and water has the value and.

183
00:09:58.960 --> 00:09:59.920
On the score.

184
00:10:00.310 --> 00:10:01.780
Email controller.

185
00:10:03.030 --> 00:10:04.390
In May, Comptroller.

186
00:10:05.280 --> 00:10:07.740
We also would like to assess the value.

187
00:10:09.180 --> 00:10:10.020
And.

188
00:10:11.010 --> 00:10:15.150
Sorry, I just a password controller.

189
00:10:16.540 --> 00:10:21.520
Door tests at this at all studies.

190
00:10:21.610 --> 00:10:26.680
So this is basically everything we need in order to sign of.

191
00:10:27.530 --> 00:10:28.600
Use us.

192
00:10:29.140 --> 00:10:29.370
Okay.

193
00:10:29.450 --> 00:10:33.920
We just have to wait for it to finally auto start.

194
00:10:33.920 --> 00:10:36.770
And definitely there's not going to be headers.

195
00:10:39.700 --> 00:10:42.250
What we can as well do we can over here.

196
00:10:42.280 --> 00:10:45.430
We can also update the rebel Cordray's.

197
00:10:46.230 --> 00:10:54.360
So if it does successfully sign of the user, we can say race is equal to success.

198
00:10:54.600 --> 00:10:56.850
So this is what's going to get printed to the user.

199
00:10:56.850 --> 00:11:01.440
And so ourself we can say, I count.

200
00:11:02.230 --> 00:11:03.430
Created.

201
00:11:04.690 --> 00:11:05.290
Okay.

202
00:11:07.030 --> 00:11:07.290
Katrine.

203
00:11:07.380 --> 00:11:08.350
Let's save.

204
00:11:10.560 --> 00:11:12.960
So and over here as well.

205
00:11:12.960 --> 00:11:16.320
We can also preach to ourself to say.

206
00:11:18.270 --> 00:11:21.450
We're just gonna copy this -- just quickly and.

207
00:11:22.820 --> 00:11:25.320
Paste this, okay.

208
00:11:26.190 --> 00:11:27.780
Open semi there.

209
00:11:30.050 --> 00:11:30.800
Okay.

210
00:11:32.560 --> 00:11:35.140
And I will try to click on this.

211
00:11:36.440 --> 00:11:38.510
We start having a little field.

212
00:11:40.710 --> 00:11:41.050
Okay.

213
00:11:41.070 --> 00:11:41.640
Click.

214
00:11:41.640 --> 00:11:42.270
Click.

215
00:11:45.220 --> 00:11:45.970
Okay.

216
00:11:46.390 --> 00:11:48.280
It's going to hurt to start this again.

217
00:11:52.120 --> 00:11:52.700
Okay.

218
00:11:52.720 --> 00:11:53.620
Okay.

219
00:11:54.940 --> 00:11:56.500
We'd send for this.

220
00:11:56.500 --> 00:11:57.880
Waitin for this.

221
00:11:57.880 --> 00:11:59.470
Waitin for this.

222
00:12:02.010 --> 00:12:02.880
Okay.

223
00:12:02.910 --> 00:12:03.540
Okay.

224
00:12:03.580 --> 00:12:04.080
Hopefully we.

225
00:12:04.410 --> 00:12:05.210
The function of.

226
00:12:08.880 --> 00:12:09.390
Okay.

227
00:12:09.390 --> 00:12:10.650
So we can.

228
00:12:12.640 --> 00:12:13.690
Click on this.

229
00:12:15.510 --> 00:12:16.680
And check.

230
00:12:19.600 --> 00:12:20.950
Our Miller.

231
00:12:23.840 --> 00:12:26.210
I think I'll say that at the end of a year.

232
00:12:29.520 --> 00:12:29.650
Okay.

233
00:12:29.790 --> 00:12:31.740
I'm just going to try to create an account.

234
00:12:34.130 --> 00:12:35.930
Probably network issues.

235
00:12:35.930 --> 00:12:37.220
So my colleague.

236
00:12:38.900 --> 00:12:39.680
And.

237
00:12:41.160 --> 00:12:42.480
Macaulay.

238
00:12:44.170 --> 00:12:44.290
Like.

239
00:12:44.510 --> 00:12:46.690
I think it's some network issues.

240
00:12:46.750 --> 00:12:47.600
My colleague.

241
00:12:49.260 --> 00:12:50.670
Tim was at.

242
00:12:51.690 --> 00:12:56.070
The email that's come and the password is ABC.

243
00:12:56.250 --> 00:12:57.300
Click on signup up.

244
00:13:00.740 --> 00:13:03.230
I think I have some network issues.

245
00:13:05.930 --> 00:13:06.560
Okay.

246
00:13:06.560 --> 00:13:12.170
Firebase has been successfully initialized, but I'm having some network issues.

247
00:13:15.410 --> 00:13:16.310
Okay.

248
00:13:19.310 --> 00:13:21.350
I'm just going to do this by the same.

249
00:13:21.530 --> 00:13:25.730
After you successfully created an account, you can check your users tab.

250
00:13:25.730 --> 00:13:28.130
You're going to see over there later.

251
00:13:28.130 --> 00:13:29.410
We're going to continue from here.

252
00:13:29.420 --> 00:13:31.010
Okay, guys, see you the next section.

