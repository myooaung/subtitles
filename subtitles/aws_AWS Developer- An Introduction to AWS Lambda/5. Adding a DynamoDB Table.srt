1
00:00:00,440 --> 00:00:04,840
Over here on my serverless.yml file, let's get started adding a DynamoDB table

2
00:00:04,840 --> 00:00:08,920
to this service. I'll need to hit Enter here, and I'll be copying and pasting

3
00:00:08,920 --> 00:00:12,050
some code from the serverless_helper.txt file.

4
00:00:12,050 --> 00:00:15,150
You're welcome to take a look at this in order to find this code instead of

5
00:00:15,150 --> 00:00:19,050
copying it directly from the video here, or you can look at the final version

6
00:00:19,050 --> 00:00:21,870
of this service inside of the examples as well.

7
00:00:21,870 --> 00:00:23,210
So let me paste this in here,

8
00:00:23,210 --> 00:00:26,440
and then I'll explain what's going on. At the very top, we're starting in

9
00:00:26,440 --> 00:00:30,080
this resources section with a lowercase r, and this will be defining

10
00:00:30,080 --> 00:00:34,960
CloudFormation resources that we want to use inside of our service. Inside of

11
00:00:34,960 --> 00:00:38,570
the capital R Resources section, that's where we actually define these

12
00:00:38,570 --> 00:00:41,000
resources. Now, this seems a bit redundant,

13
00:00:41,000 --> 00:00:43,590
but that's because there's also the option to have, inside of the

14
00:00:43,590 --> 00:00:46,620
resources section, something called Outputs.

15
00:00:46,620 --> 00:00:48,910
Now, these outputs would allow us to reference these

16
00:00:48,910 --> 00:00:50,800
resources from other services,

17
00:00:50,800 --> 00:00:53,580
but we'd have to specify that with a capital O too. So

18
00:00:53,580 --> 00:00:56,220
that's why it's a little redundant, but it's just the syntax we have.

19
00:00:56,220 --> 00:00:58,020
So let me get rid of that, and let's look at what's

20
00:00:58,020 --> 00:01:00,150
actually happening in the Resources section.

21
00:01:00,150 --> 00:01:03,330
We start by adding this usersTable resource,

22
00:01:03,330 --> 00:01:06,900
and we're going to make that a DynamoDB table resource.

23
00:01:06,900 --> 00:01:08,510
It's going to have a few properties, which will

24
00:01:08,510 --> 00:01:10,160
tell us how to create this table,

25
00:01:10,160 --> 00:01:14,350
starting with the name of users and the attribute definitions of email,

26
00:01:14,350 --> 00:01:15,640
which will be a string.

27
00:01:15,640 --> 00:01:18,520
We know this because the AttributeType is an S here. And

28
00:01:18,520 --> 00:01:20,650
then we define the key schema of our table,

29
00:01:20,650 --> 00:01:24,240
which means how are we going to get things from our DynamoDB table?

30
00:01:24,240 --> 00:01:26,550
I won't go into much detail with DynamoDB,

31
00:01:26,550 --> 00:01:27,130
but essentially,

32
00:01:27,130 --> 00:01:29,680
this means we need to provide an email in order to get

33
00:01:29,680 --> 00:01:32,210
items out efficiently from DynamoDB.

34
00:01:32,210 --> 00:01:36,110
This also isn't using other properties of DynamoDB like sort keys.

35
00:01:36,110 --> 00:01:36,550
Instead,

36
00:01:36,550 --> 00:01:40,090
this DynamoDB table has a simple primary key, which uses the

37
00:01:40,090 --> 00:01:43,590
partition key of the email. And in order to define this,

38
00:01:43,590 --> 00:01:46,330
we have this HASH value here for the KeyType.

39
00:01:46,330 --> 00:01:48,950
The hash key is essentially the same as the partition key.

40
00:01:48,950 --> 00:01:52,510
These are just two different words for that. At the very bottom, we

41
00:01:52,510 --> 00:01:55,190
specify the provisioned throughput for the table.

42
00:01:55,190 --> 00:01:55,310
Now,

43
00:01:55,310 --> 00:01:59,740
this means how much capacity should this table have to read and write

44
00:01:59,740 --> 00:02:02,610
things. I'm setting this to 1 because that's the lowest value here,

45
00:02:02,610 --> 00:02:05,290
and it's also within the AWS free tier.

46
00:02:05,290 --> 00:02:07,850
So after you've saved all of those contents in your

47
00:02:07,850 --> 00:02:10,490
serverless.yml file, like I just did here,

48
00:02:10,490 --> 00:02:14,420
let's go ahead and open up a terminal and redeploy our service.

49
00:02:14,420 --> 00:02:17,640
So I'm going to run serverless deploy one more time.

50
00:02:17,640 --> 00:02:17,800
Now,

51
00:02:17,800 --> 00:02:19,860
this should pick up the new resource that we have in the

52
00:02:19,860 --> 00:02:23,260
resources section and deploy it out in our service.

53
00:02:23,260 --> 00:02:24,960
Now, once this deployment finishes,

54
00:02:24,960 --> 00:02:29,100
we can test if this worked. Now that our deployment process is finished,

55
00:02:29,100 --> 00:02:32,190
I'm going to clear the screen here, and let's run an AWS command‑line

56
00:02:32,190 --> 00:02:35,630
interface command to check if we have a table in our AWS account. I'm

57
00:02:35,630 --> 00:02:42,040
going to run aws dynamodb list‑tables,

58
00:02:42,040 --> 00:02:44,950
and it looks like we now have a users table in our account.

59
00:02:44,950 --> 00:02:51,000
That means that this process worked successfully to create this table, and we should be able to use it inside of this project here.

