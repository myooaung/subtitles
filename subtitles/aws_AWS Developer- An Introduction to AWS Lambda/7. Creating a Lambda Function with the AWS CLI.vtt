WEBVTT
1
00:00:01.140 --> 00:00:04.040
Now let's create our function package, and then using

2
00:00:04.040 --> 00:00:06.810
the AWS CLI, create our function.

3
00:00:06.810 --> 00:00:11.140
So first, I'm going to use the setup.sh file to create a virtual environment,

4
00:00:11.140 --> 00:00:14.080
install all our dependencies, and then create our function

5
00:00:14.080 --> 00:00:16.920
package after zipping all those dependencies up.

6
00:00:16.920 --> 00:00:17.260
Now,

7
00:00:17.260 --> 00:00:20.290
you can also use the windows_setup.bat file if you're on a

8
00:00:20.290 --> 00:00:22.770
Windows system. On a Linux or a Mac,

9
00:00:22.770 --> 00:00:29.380
you'll stick to setup.sh. So I'll type out ./setup.sh and hit Enter.

10
00:00:29.380 --> 00:00:32.470
Now, this should go through the process of creating a virtual environment.

11
00:00:32.470 --> 00:00:34.480
I'm going to close out this prompt from VS Code,

12
00:00:34.480 --> 00:00:37.600
which happens every time a virtual environment is created, and this

13
00:00:37.600 --> 00:00:40.540
will add all the different code and dependencies that are required

14
00:00:40.540 --> 00:00:44.730
for this function, and then it'll output that in a package.zip file

15
00:00:44.730 --> 00:00:46.700
that it zipped up and compressed.

16
00:00:46.700 --> 00:00:49.560
So with this package.zip file, we're ready for the next step.

17
00:00:49.560 --> 00:00:52.610
So I'm going to clear the screen here, and let's see what IAM roles

18
00:00:52.610 --> 00:00:55.050
we have available in our account. To do this,

19
00:00:55.050 --> 00:01:01.530
I'm going to run aws iam, for Identity and Access Management, list‑roles.

20
00:01:01.530 --> 00:01:03.690
Now this should list out all the custom roles that we

21
00:01:03.690 --> 00:01:06.140
created thus far in the course.

22
00:01:06.140 --> 00:01:09.620
Now you'll see that I have a testrole here, and if I scroll up past a few

23
00:01:09.620 --> 00:01:12.430
of these other roles, I also have a role for Sparrow,

24
00:01:12.430 --> 00:01:15.370
which is kind of hard to see because it goes across the screen.

25
00:01:15.370 --> 00:01:16.900
And if I keep scrolling up,

26
00:01:16.900 --> 00:01:21.110
I have one more role for a Lambda canary function, which we created before that.

27
00:01:21.110 --> 00:01:26.330
And finally, at the very top here, you should see a gpc_cuckoo_role. Now,

28
00:01:26.330 --> 00:01:29.980
this is the one I'm going to need for this function, so I'm going to copy this

29
00:01:29.980 --> 00:01:34.710
role ARN value here because we'll need that to specify which role is going to be

30
00:01:34.710 --> 00:01:37.260
associated with this function when we create it.

31
00:01:37.260 --> 00:01:41.220
So let's go ahead and clear the screen here now, and next, I'm going

32
00:01:41.220 --> 00:01:44.090
to need to create the function with a new command.

33
00:01:44.090 --> 00:01:49.560
I'm going to use the aws lambda create‑function command, and now I'm

34
00:01:49.560 --> 00:01:51.820
going to pass in a bunch of information to it.

35
00:01:51.820 --> 00:01:55.370
I'm going to put a space here and then a backslash, and on UNIX

36
00:01:55.370 --> 00:01:58.440
systems, this should allow me to click Enter without having that

37
00:01:58.440 --> 00:02:00.930
enter be interpreted as finishing the command.

38
00:02:00.930 --> 00:02:04.190
Instead, I can now type out what else I want in this command.

39
00:02:04.190 --> 00:02:10.350
So I'll do ‑‑function‑name, and then we'll name this function.

40
00:02:10.350 --> 00:02:12.890
And I'm going to be really particular with this to make sure that I can

41
00:02:12.890 --> 00:02:18.370
use it in later commands too, so I'll do gpc_cuckoo.

42
00:02:18.370 --> 00:02:20.030
Now, if you're going to name it anything different,

43
00:02:20.030 --> 00:02:22.660
just make sure you're writing that down so you can use it later on and

44
00:02:22.660 --> 00:02:27.450
replace my name from my function with whatever yours is. I'll do a space

45
00:02:27.450 --> 00:02:31.290
and another backslash, then I'll hit Enter, and we can specify the runtime

46
00:02:31.290 --> 00:02:34.140
for this function using the runtime flag.

47
00:02:34.140 --> 00:02:38.570
Now, I want to create one that's in the Python 3.7 runtime because that's

48
00:02:38.570 --> 00:02:41.340
what I've been testing with on my local operating system.

49
00:02:41.340 --> 00:02:44.530
Then I'll do another space and another backslash here. And

50
00:02:44.530 --> 00:02:48.320
now we can type in the role flag here,

51
00:02:48.320 --> 00:02:50.910
and we need to paste in that ARN that we copied from

52
00:02:50.910 --> 00:02:53.260
earlier, so I'm going to include it here.

53
00:02:53.260 --> 00:02:55.830
That's why we copied it exactly as it appeared from

54
00:02:55.830 --> 00:02:59.190
that aws iam list‑roles command.

55
00:02:59.190 --> 00:03:02.250
And I'll do another space and another backslash, we'll hit Enter,

56
00:03:02.250 --> 00:03:06.460
and now we can give the handler flag and see how we want to

57
00:03:06.460 --> 00:03:09.320
reference the function code using the handler.

58
00:03:09.320 --> 00:03:11.620
So because we have cuckoo.py,

59
00:03:11.620 --> 00:03:14.720
we're going to start with cuckoo, and then we have to look for

60
00:03:14.720 --> 00:03:16.560
the function inside of Cuckoo that we want,

61
00:03:16.560 --> 00:03:18.820
which we know is called handler.

62
00:03:18.820 --> 00:03:21.170
So this should be what we need for this handler file.

63
00:03:21.170 --> 00:03:23.600
Now I'll do space and one more backslash.

64
00:03:23.600 --> 00:03:25.540
And on this final part of the command,

65
00:03:25.540 --> 00:03:30.170
we're going to use this to specify where the code is for this function.

66
00:03:30.170 --> 00:03:32.970
Now, there's multiple ways to specify it, but in this case,

67
00:03:32.970 --> 00:03:35.130
I'm going to do zip‑file,

68
00:03:35.130 --> 00:03:40.170
which will let me specify a ZIP file in a local directory or up in S3

69
00:03:40.170 --> 00:03:43.240
that'll be associated with the function package.

70
00:03:43.240 --> 00:03:46.140
So to input to here, if I want to specify a local file, I'll need to

71
00:03:46.140 --> 00:03:50.005
enter it in this format. It's going to start with fileb, as in file

72
00:03:50.005 --> 00:03:55.070
binary, and then do ://, and that'll be kind of the prefix structure

73
00:03:55.070 --> 00:03:57.710
of my function package's location,

74
00:03:57.710 --> 00:04:00.750
and then I can see the current directory for dot, and it's going

75
00:04:00.750 --> 00:04:05.140
to be located at the location of package.zip.

76
00:04:05.140 --> 00:04:08.430
So this is a little confusing why we're doing it in this structure, but

77
00:04:08.430 --> 00:04:12.600
that's just the way the AWS CLI create function operation for Lambda

78
00:04:12.600 --> 00:04:15.260
expects to see the location of the package.

79
00:04:15.260 --> 00:04:15.380
Now,

80
00:04:15.380 --> 00:04:16.875
there's nothing else I need to add here, so I'm going

81
00:04:16.875 --> 00:04:19.640
to hit Enter. And after a moment,

82
00:04:19.640 --> 00:04:22.130
we should get a response that looks about like this.

83
00:04:22.130 --> 00:04:24.920
This means we've been successful in creating our function.

84
00:04:24.920 --> 00:04:27.410
And if we wanted to test that this had worked properly,

85
00:04:27.410 --> 00:04:29.740
we could go back to the AWS Console.

86
00:04:29.740 --> 00:04:31.440
So back over here in the AWS Console,

87
00:04:31.440 --> 00:04:34.490
we can go to the Lambda section of the dashboard, and now you see that we

88
00:04:34.490 --> 00:04:39.440
have this new gpc_cuckoo function. Now that's just created a few seconds ago

89
00:04:39.440 --> 00:04:42.000
when we ran that command. We could go in here,

90
00:04:42.000 --> 00:04:45.420
and we could look at its configuration, and we notice that it took the exact

91
00:04:45.420 --> 00:04:49.040
same values that we expected from the inputs that we gave it.

92
00:04:49.040 --> 00:04:53.920
It's looking for cuckoo.handler in order to find it's Lambda handler,

93
00:04:53.920 --> 00:04:56.480
and it's also using the runtime that we set for it.

94
00:04:56.480 --> 00:04:59.780
Now, it's uploaded the function package already for us and

95
00:04:59.780 --> 00:05:02.340
currently allows us to edit this inline.

96
00:05:02.340 --> 00:05:05.150
Now, there's a few things that are missing though. We're

97
00:05:05.150 --> 00:05:06.750
missing the triggers for this function,

98
00:05:06.750 --> 00:05:15.000
and we need to be able to configure those so that it'll continue to run. So in the next video, let's look at how we can add those with the AWS CLI.

