1
00:00:00,780 --> 00:00:03,720
Now let's look at some of the most prominent providers of serverless

2
00:00:03,720 --> 00:00:07,010
functions. In this section, we'll compare market leaders and mention a

3
00:00:07,010 --> 00:00:10,220
few of the strengths of some niche players.

4
00:00:10,220 --> 00:00:12,360
The two leaders in the serverless function space are

5
00:00:12,360 --> 00:00:15,230
Amazon Web Services and Microsoft Azure.

6
00:00:15,230 --> 00:00:18,320
Amazon is a fairly clear market leader in many spaces of

7
00:00:18,320 --> 00:00:20,670
the Infrastructure as a Service category,

8
00:00:20,670 --> 00:00:23,320
but Microsoft Azure has been catching up very rapidly,

9
00:00:23,320 --> 00:00:25,190
especially in recent years.

10
00:00:25,190 --> 00:00:25,320
Now,

11
00:00:25,320 --> 00:00:29,170
because of this, much of the integration capacity of these

12
00:00:29,170 --> 00:00:32,610
two different providers of AWS Lambda and Microsoft Azure

13
00:00:32,610 --> 00:00:34,940
has started to kind of equalize.

14
00:00:34,940 --> 00:00:37,200
Now this is a really important part of the serverless

15
00:00:37,200 --> 00:00:40,540
function category because all those integrations really help

16
00:00:40,540 --> 00:00:43,340
you develop applications more rapidly.

17
00:00:43,340 --> 00:00:43,520
Now,

18
00:00:43,520 --> 00:00:46,690
in addition to Microsoft Azure and Amazon Web Services,

19
00:00:46,690 --> 00:00:49,060
there's also other niche players in the space.

20
00:00:49,060 --> 00:00:53,120
Now, this has evolved over time, but it can include things like Iron.io,

21
00:00:53,120 --> 00:00:57,180
Cloudflare, and OpenFaaS, among many other niche providers.

22
00:00:57,180 --> 00:00:59,720
So let's take a look at some of these in more detail.

23
00:00:59,720 --> 00:01:02,940
Let's start by looking at a comparison between AWS Lambda and

24
00:01:02,940 --> 00:01:06,400
Microsoft Azure. But keep in mind that this can't be a perfect

25
00:01:06,400 --> 00:01:09,830
comparison because the actual service and functionality of these two

26
00:01:09,830 --> 00:01:13,190
different providers differs pretty substantially when you come down to

27
00:01:13,190 --> 00:01:17,040
the details, so I've tried to give a few high‑level things to compare

28
00:01:17,040 --> 00:01:18,350
these two providers.

29
00:01:18,350 --> 00:01:21,750
The first is the runtimes that you can use with AWS Lambda and

30
00:01:21,750 --> 00:01:24,650
Azure Functions. For both, you can use Node,

31
00:01:24,650 --> 00:01:29,800
Python, Java, C#, PowerShell, and other runtimes,

32
00:01:29,800 --> 00:01:34,060
but the differences are really depending on how you want to integrate these.

33
00:01:34,060 --> 00:01:38,720
AWS Lambda has user‑provided runtimes to support plenty of other things,

34
00:01:38,720 --> 00:01:42,090
like Rust and other languages that aren't supported directly as a

35
00:01:42,090 --> 00:01:45,130
main instrument time, whereas Azure Functions will let you use

36
00:01:45,130 --> 00:01:49,000
other executables and do basically the same thing. If you're

37
00:01:49,000 --> 00:01:50,730
looking for a managed runtime,

38
00:01:50,730 --> 00:01:54,400
I suggest just comparing the most recent supported runtimes

39
00:01:54,400 --> 00:01:57,390
between Lambda and Azure Functions to check if that might be

40
00:01:57,390 --> 00:01:58,690
something that could help you.

41
00:01:58,690 --> 00:02:01,620
But if you're not really worried about that and you're interested in just the

42
00:02:01,620 --> 00:02:04,560
standard most popular libraries for serverless computing,

43
00:02:04,560 --> 00:02:06,840
which in this case are really Node and Python,

44
00:02:06,840 --> 00:02:10,540
both of these two providers support both of these two languages.

45
00:02:10,540 --> 00:02:13,080
The next thing I wanted to point out is that Lambda actually has

46
00:02:13,080 --> 00:02:15,730
built‑in versioning for your serverless functions.

47
00:02:15,730 --> 00:02:19,610
And depending on how you do your deployments and your deployment pipelines,

48
00:02:19,610 --> 00:02:21,920
this could be something you might want to take advantage of.

49
00:02:21,920 --> 00:02:26,080
Azure doesn't currently have anything to this exact capacity,

50
00:02:26,080 --> 00:02:29,220
but there are other ways you could do versioning for your functions, so

51
00:02:29,220 --> 00:02:32,710
this is one other thing to look at depending on how your process will

52
00:02:32,710 --> 00:02:36,060
work. Now, for both Lambda and Azure Functions,

53
00:02:36,060 --> 00:02:40,773
you're also going to be able to use HTTP endpoints via different resources. AWS

54
00:02:40,773 --> 00:02:45,830
Lambda will let you do this with the AWS API Gateway, and Azure Functions will

55
00:02:45,830 --> 00:02:48,940
help you do this with the API Management service.

56
00:02:48,940 --> 00:02:49,200
Now,

57
00:02:49,200 --> 00:02:51,750
both of these two different options would let you do things like

58
00:02:51,750 --> 00:02:55,250
integrate APIs into your front‑end applications.

59
00:02:55,250 --> 00:02:58,260
The next thing to look at is the runtime limit for these different

60
00:02:58,260 --> 00:03:02,790
services. AWS Lambda has a hard runtime limit of 15 minutes.

61
00:03:02,790 --> 00:03:06,060
This means that if you have some task that goes over 15

62
00:03:06,060 --> 00:03:08,530
minutes, the Lambda function will need to do something to

63
00:03:08,530 --> 00:03:10,440
put that task off until later,

64
00:03:10,440 --> 00:03:12,550
maybe chain it to another Lambda function or another

65
00:03:12,550 --> 00:03:15,890
process, or save its work and then restart it later on.

66
00:03:15,890 --> 00:03:18,290
Whereas with Azure Functions, by default,

67
00:03:18,290 --> 00:03:20,830
there's a 10 minute limit to function timeout; however,

68
00:03:20,830 --> 00:03:23,290
they do have two other plans called the Premium plan

69
00:03:23,290 --> 00:03:25,260
and a dedicated App Service plan,

70
00:03:25,260 --> 00:03:29,180
which extend the limitations to 60 minutes and to an unlimited amount,

71
00:03:29,180 --> 00:03:31,540
respectively, for that function timeout.

72
00:03:31,540 --> 00:03:35,010
Keep in mind that in general, when you're working with serverless functions,

73
00:03:35,010 --> 00:03:38,360
it's probably not a good idea to have long‑running processes that

74
00:03:38,360 --> 00:03:41,180
go on for significant amounts of time like this.

75
00:03:41,180 --> 00:03:42,300
Sometimes, in those cases,

76
00:03:42,300 --> 00:03:46,400
it makes more sense to use other services for those long‑running jobs.

77
00:03:46,400 --> 00:03:47,580
For AWS Lambda,

78
00:03:47,580 --> 00:03:52,090
you have 1000 concurrent functions that you can run at the exact same time.

79
00:03:52,090 --> 00:03:54,790
Now this is a soft limit, so if you asked AWS, they'd

80
00:03:54,790 --> 00:03:57,110
probably be able to bump these limits for you.

81
00:03:57,110 --> 00:04:00,700
Whereas with Azure Functions, this isn't really quite comparable, where

82
00:04:00,700 --> 00:04:03,520
you'll have 10 concurrent instances that you can have running at the

83
00:04:03,520 --> 00:04:06,000
same time underneath the Azure Functions,

84
00:04:06,000 --> 00:04:08,140
but they're not going to limit how many specific

85
00:04:08,140 --> 00:04:11,250
concurrent functions themselves you can have.

86
00:04:11,250 --> 00:04:14,760
So this isn't really a one‑to‑on comparison either, just really

87
00:04:14,760 --> 00:04:18,230
another point to look at if you're worried about how much capacity

88
00:04:18,230 --> 00:04:20,380
each of these solutions can offer. Now,

89
00:04:20,380 --> 00:04:23,090
if you go down the route of using these solutions extensively,

90
00:04:23,090 --> 00:04:25,770
it's pretty likely that these cloud providers might give you

91
00:04:25,770 --> 00:04:28,480
some wiggle room on increasing the capacity.

92
00:04:28,480 --> 00:04:31,420
So now let's take a look at some niche providers in the space.

93
00:04:31,420 --> 00:04:36,340
The first is Iron.io. Iron.io is actually one of the first companies to

94
00:04:36,340 --> 00:04:39,660
develop what became the concept of serverless functions.

95
00:04:39,660 --> 00:04:41,860
Iron.io has IronWorkers,

96
00:04:41,860 --> 00:04:44,030
which function more or less like serverless functions

97
00:04:44,030 --> 00:04:45,760
and support all major languages.

98
00:04:45,760 --> 00:04:46,300
Also,

99
00:04:46,300 --> 00:04:50,270
binary executables, and they have runtime limits of an hour compared to

100
00:04:50,270 --> 00:04:54,460
the AWS and Azure runtime limits of 15 and 10 minutes.

101
00:04:54,460 --> 00:04:57,170
The main drawback here is that the service integrations that they offer

102
00:04:57,170 --> 00:05:00,230
are a little bit lacking when you compare them to all the services

103
00:05:00,230 --> 00:05:04,110
inside of AWS or Microsoft Azure, and it's harder to consolidate your

104
00:05:04,110 --> 00:05:06,590
infrastructure using IronWorkers,

105
00:05:06,590 --> 00:05:09,720
especially if you already have a variety of other development needs,

106
00:05:09,720 --> 00:05:13,690
like having multiple virtual machines running at the same time for

107
00:05:13,690 --> 00:05:16,760
your applications, or maybe you already have containers spin up

108
00:05:16,760 --> 00:05:18,740
somewhere that you need to keep around.

109
00:05:18,740 --> 00:05:22,040
Another option might be something like Cloudflare Workers.

110
00:05:22,040 --> 00:05:25,650
Cloudflare Workers will allow you to run JavaScript code close to

111
00:05:25,650 --> 00:05:28,460
your users and distribute that around the globe.

112
00:05:28,460 --> 00:05:34,330
Now this can help you run HTTP or HTTPs responses in response to users

113
00:05:34,330 --> 00:05:38,330
loading your website or hitting your API end points much closer to them

114
00:05:38,330 --> 00:05:41,030
to help you provide much faster responses.

115
00:05:41,030 --> 00:05:45,060
AWS Lambda has a similar service called Lambda@Edge,

116
00:05:45,060 --> 00:05:48,010
which you can also take a look at in the similar vein.

117
00:05:48,010 --> 00:05:49,720
Now, in addition to these two options,

118
00:05:49,720 --> 00:05:53,865
there's also something called OpenFaaS, and OpenFaaS, or Open Functions as

119
00:05:53,865 --> 00:05:58,840
a Service, is what I'd say is one of several options in a space to try and

120
00:05:58,840 --> 00:06:03,250
make the runtimes of these serverless computing options a bit more open

121
00:06:03,250 --> 00:06:07,060
source and extensible between different cloud providers and potentially

122
00:06:07,060 --> 00:06:09,000
on‑premises environments.

123
00:06:09,000 --> 00:06:16,000
So definitely take a look at this if you're running containers or Kubernetes or you're curious about these options.

