1
00:00:01,030 --> 00:00:04,130
Welcome to this module of my AWS Developer course, An

2
00:00:04,130 --> 00:00:07,480
Introduction to AWS Lambda. In this module, we'll be taking a

3
00:00:07,480 --> 00:00:10,940
closer look at Modern Serverless Development.

4
00:00:10,940 --> 00:00:13,550
Now to start, we'll look at serverless development,

5
00:00:13,550 --> 00:00:16,920
including manual development versus frameworks and how

6
00:00:16,920 --> 00:00:18,620
those two different options differ.

7
00:00:18,620 --> 00:00:21,500
We'll look at a few different frameworks that we could use,

8
00:00:21,500 --> 00:00:24,560
and we'll spend some time focusing on the Serverless Framework,

9
00:00:24,560 --> 00:00:27,030
including a limited overview, as well as the

10
00:00:27,030 --> 00:00:29,340
installation process for the framework.

11
00:00:29,340 --> 00:00:33,600
We'll use it to create an HTTP API, and this will take care of

12
00:00:33,600 --> 00:00:37,070
deploying the infrastructure behind our Lambda function, and it'll

13
00:00:37,070 --> 00:00:40,750
also help us write and update our function code as we go along

14
00:00:40,750 --> 00:00:43,240
without having to do a ton of manual work.

15
00:00:43,240 --> 00:00:46,090
So let's look at the serverless development process,

16
00:00:46,090 --> 00:00:48,820
starting with a comparison between manual development and

17
00:00:48,820 --> 00:00:54,200
frameworks. With manual development, we have various disparate deployment steps,

18
00:00:54,200 --> 00:00:57,920
and different processes might develop for different teams or projects.

19
00:00:57,920 --> 00:01:01,080
This leads to some siloed knowledge and experience, and can

20
00:01:01,080 --> 00:01:04,810
also develop into a patchwork of homegrown tooling for our

21
00:01:04,810 --> 00:01:07,110
organizations. With frameworks, however,

22
00:01:07,110 --> 00:01:08,250
we get standardized,

23
00:01:08,250 --> 00:01:12,500
simplified builds that are familiar in structure for different projects or

24
00:01:12,500 --> 00:01:16,960
services. We'll also be able to benefit from larger open source

25
00:01:16,960 --> 00:01:19,700
communities who are using the same tools that we are,

26
00:01:19,700 --> 00:01:22,410
so we can all contribute to bringing those tools along together.

27
00:01:22,410 --> 00:01:26,790
These communities will also lend themselves to common debugging

28
00:01:26,790 --> 00:01:30,740
tools and use cases and help looking at those use cases when we

29
00:01:30,740 --> 00:01:33,070
have issues with them. Now,

30
00:01:33,070 --> 00:01:35,920
when we're thinking about Lambda function deployment in the

31
00:01:35,920 --> 00:01:38,050
rest of this course that we've done so far,

32
00:01:38,050 --> 00:01:40,600
we've had to gather up our code and dependencies,

33
00:01:40,600 --> 00:01:44,480
zip code and dependencies together, and then we had to upload that

34
00:01:44,480 --> 00:01:49,380
zip file from S3 or from our machine to Lambda, and then create,

35
00:01:49,380 --> 00:01:51,480
update, or remove the function later on,

36
00:01:51,480 --> 00:01:54,870
depending on what we want to do. Now that might also require us to

37
00:01:54,870 --> 00:01:58,910
configure event triggers or to have those event triggers be changed if

38
00:01:58,910 --> 00:02:01,550
we need them to be changed. Now on top of that,

39
00:02:01,550 --> 00:02:03,470
there's a bunch of other Lambda settings,

40
00:02:03,470 --> 00:02:06,490
not all of which we even got to. Now, imagine having

41
00:02:06,490 --> 00:02:08,840
to do this over and over again,

42
00:02:08,840 --> 00:02:12,660
and we haven't even managed to introduce other resources and their

43
00:02:12,660 --> 00:02:17,950
deployment processes yet. If we wanted to add DynamoDB tables or API

44
00:02:17,950 --> 00:02:20,750
Gateway resources, or any SQS queues.

45
00:02:20,750 --> 00:02:24,140
This whole process would start to get a little bit overwhelming.

46
00:02:24,140 --> 00:02:24,530
Now,

47
00:02:24,530 --> 00:02:28,300
I want to point out here that manually developing everything like this is

48
00:02:28,300 --> 00:02:32,020
hard, and frameworks can really help us with this process.

49
00:02:32,020 --> 00:02:34,740
Let's take a look at an example using the Serverless

50
00:02:34,740 --> 00:02:38,110
Framework's serverless.yml files. Now this Serverless

51
00:02:38,110 --> 00:02:41,120
Framework example contains a few different parts,

52
00:02:41,120 --> 00:02:44,560
including a function configuration, which will allow us to define,

53
00:02:44,560 --> 00:02:48,040
in this case, a function called createUser.

54
00:02:48,040 --> 00:02:48,250
Now,

55
00:02:48,250 --> 00:02:51,525
this function is going to also have events that it's going to use.

56
00:02:51,525 --> 00:02:55,860
In this case, this http event will be all we need to add in here

57
00:02:55,860 --> 00:03:00,100
to get an HTTP endpoint created by API Gateway using this

58
00:03:00,100 --> 00:03:02,430
Serverless Framework. From here,

59
00:03:02,430 --> 00:03:05,480
we can also specify other things like other functions,

60
00:03:05,480 --> 00:03:08,910
and each of those functions can have their own different events.

61
00:03:08,910 --> 00:03:10,410
In this particular configuration,

62
00:03:10,410 --> 00:03:14,200
you'll see that we have an event for our createUser that is

63
00:03:14,200 --> 00:03:16,790
a path of /user and a method of post,

64
00:03:16,790 --> 00:03:20,730
whereas our getUser is the same path with a method of get.

65
00:03:20,730 --> 00:03:24,040
We're also configuring cross origin resource sharing here.

66
00:03:24,040 --> 00:03:27,750
Now, there's a lot going on here, and a lot going on in the background,

67
00:03:27,750 --> 00:03:29,760
and I won't explain everything in this course,

68
00:03:29,760 --> 00:03:32,350
but I want to give you a feel of some of the easier methods

69
00:03:32,350 --> 00:03:34,580
of serverless application development.

70
00:03:34,580 --> 00:03:38,420
Here's one other example of what our application structure might look like.

71
00:03:38,420 --> 00:03:39,620
We might have, for example,

72
00:03:39,620 --> 00:03:42,730
some serverless function code in a back‑end directory,

73
00:03:42,730 --> 00:03:46,050
and we might also have maybe some front‑end application that's going to

74
00:03:46,050 --> 00:03:49,990
leverage API endpoints that we're creating with the back‑end code.

75
00:03:49,990 --> 00:03:55,070
Then, we could also have the serverless.yml configuration inside of that folder,

76
00:03:55,070 --> 00:03:57,270
similar to the one that you just saw earlier.

77
00:03:57,270 --> 00:03:59,140
Now this sort of structure would be pretty typical

78
00:03:59,140 --> 00:04:02,520
for a Serverless Framework project, and it looks pretty straightforward,

79
00:04:02,520 --> 00:04:06,260
so you can start to see why these sorts of frameworks might end up being useful

80
00:04:06,260 --> 00:04:09,340
for us to get some standardization in what we're building.

81
00:04:09,340 --> 00:04:11,360
So let's take a look at a few different frameworks

82
00:04:11,360 --> 00:04:13,370
that we might want to rely on.

83
00:04:13,370 --> 00:04:17,270
Some frameworks come directly from AWS, like AWS Amplify,

84
00:04:17,270 --> 00:04:20,340
and others are developed independently, like Sparta,

85
00:04:20,340 --> 00:04:22,580
specifically for the Go language.

86
00:04:22,580 --> 00:04:23,470
There's also Zappa,

87
00:04:23,470 --> 00:04:27,630
which has been developed specifically for Python, and the Serverless Framework,

88
00:04:27,630 --> 00:04:30,440
which is the one we'll be working with in this course.

89
00:04:30,440 --> 00:04:33,780
So why would we use the Serverless Framework over some other possible

90
00:04:33,780 --> 00:04:36,530
frameworks for serverless application development?

91
00:04:36,530 --> 00:04:37,780
Well, for starters,

92
00:04:37,780 --> 00:04:41,200
if you compare the number of watchers from some of the other frameworks, as

93
00:04:41,200 --> 00:04:44,960
well some of the stars and forks and other values from GitHub,

94
00:04:44,960 --> 00:04:48,320
you'll see that the Serverless Framework by far is the highest

95
00:04:48,320 --> 00:04:50,490
number of all of these different metrics,

96
00:04:50,490 --> 00:04:54,060
just a general indicator of its popularity among the community.

97
00:04:54,060 --> 00:04:56,590
Now this means that you're going to get the best of everything

98
00:04:56,590 --> 00:04:59,920
that comes from community, from community plugins to community

99
00:04:59,920 --> 00:05:03,190
conversation, and help trying to solve the same problems that

100
00:05:03,190 --> 00:05:04,860
others have faced in the past.

101
00:05:04,860 --> 00:05:08,900
Now these numbers are from November of 2019, so always go back onto GitHub

102
00:05:08,900 --> 00:05:12,180
and look for serverless frameworks and compare how they line up in terms

103
00:05:12,180 --> 00:05:19,000
of the numbers of people engaging with them. In the next videos, we'll take a closer look at the Serverless Framework.

