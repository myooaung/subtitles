1
00:00:00,590 --> 00:00:04,430
With our dependencies installed, let's open up the Python interpreter.

2
00:00:04,430 --> 00:00:07,430
I could enter into Python 3 from this virtual environment,

3
00:00:07,430 --> 00:00:12,180
either by typing python or python3, and that's because we're referencing the

4
00:00:12,180 --> 00:00:15,640
Python installation inside of venv whenever we activate it.

5
00:00:15,640 --> 00:00:19,350
So now that I'm in the Python 3 interpreter, let's try testing stuff out here.

6
00:00:19,350 --> 00:00:22,420
I'm going to copy the first few lines of this file, and let's paste them into

7
00:00:22,420 --> 00:00:25,570
the interpreter. That'll get our dependencies all set up here.

8
00:00:25,570 --> 00:00:28,000
Next, let's create the Twitter client.

9
00:00:28,000 --> 00:00:31,070
If we wanted to make sure that our secrets were here, we could copy one

10
00:00:31,070 --> 00:00:33,980
of these lines from get_secrets to make sure that process was working,

11
00:00:33,980 --> 00:00:36,140
and we'll see that they're returned here.

12
00:00:36,140 --> 00:00:39,430
So this should be working with our SSM Parameter Store, and I can

13
00:00:39,430 --> 00:00:42,950
go back in here and hit Enter one more time,

14
00:00:42,950 --> 00:00:44,890
and this should create our Twitter client.

15
00:00:44,890 --> 00:00:48,310
If we wanted to test if this worked, we could always type this out again,

16
00:00:48,310 --> 00:00:51,390
and you'll see this is the same consumer key that we were setting earlier.

17
00:00:51,390 --> 00:00:52,790
So, great for us.

18
00:00:52,790 --> 00:00:55,720
Let's scroll down a little further. Next, let's go ahead and copy the

19
00:00:55,720 --> 00:00:58,900
potential tweets here to make sure that we'll be able to randomly select

20
00:00:58,900 --> 00:01:01,870
one from this list and use it with the handler.

21
00:01:01,870 --> 00:01:03,260
So I'm going to hit Enter there, and we've defined

22
00:01:03,260 --> 00:01:05,230
this new potential_tweets variable, which,

23
00:01:05,230 --> 00:01:06,400
if I paste it in there,

24
00:01:06,400 --> 00:01:09,940
should contain three different strings that we could send out to Twitter.

25
00:01:09,940 --> 00:01:12,610
So now I have this next function, send_tweet,

26
00:01:12,610 --> 00:01:16,630
so let's copy that too. Let's paste that in there and hit Enter a few times.

27
00:01:16,630 --> 00:01:19,290
So now that we've pasted that in, why don't we test this out?

28
00:01:19,290 --> 00:01:22,230
Let's run send_tweet.

29
00:01:22,230 --> 00:01:25,980
Let's do an open parenthesis, and let's say "Hello pet

30
00:01:25,980 --> 00:01:28,640
owners!" because maybe this is what our first tweet will be

31
00:01:28,640 --> 00:01:30,920
for our Globomantics Pet Care business.

32
00:01:30,920 --> 00:01:32,980
Then I'm going to go back to my browser here and open up

33
00:01:32,980 --> 00:01:35,380
the Globomantics Pet Care home page.

34
00:01:35,380 --> 00:01:37,660
Now, I've had a chance to spruce up our profile with a few

35
00:01:37,660 --> 00:01:41,190
pictures just by using the Twitter UI, but I haven't tweeted

36
00:01:41,190 --> 00:01:42,650
anything out yet, as you can see.

37
00:01:42,650 --> 00:01:46,530
So let's refresh the page and see if that action worked from earlier.

38
00:01:46,530 --> 00:01:48,210
Once the page is refreshed,

39
00:01:48,210 --> 00:01:52,260
you should notice that we have a new tweet here. It says Hello pet owners! So

40
00:01:52,260 --> 00:01:55,030
that means that just a few seconds ago, when we ran this,

41
00:01:55,030 --> 00:01:57,230
it worked properly to send out this tweet.

42
00:01:57,230 --> 00:01:58,160
Nice work.

43
00:01:58,160 --> 00:02:02,060
Next, let's see how we could use it to send a random tweet out.

44
00:02:02,060 --> 00:02:05,730
So I'm going to copy this handler here, and let's paste it in

45
00:02:05,730 --> 00:02:08,300
here. Now, because we're not actually using the event or the

46
00:02:08,300 --> 00:02:11,370
context inside of our handler function, and they don't appear in

47
00:02:11,370 --> 00:02:12,460
our code in there at all,

48
00:02:12,460 --> 00:02:16,220
other than in the definition which is required when we're working with Lambda,

49
00:02:16,220 --> 00:02:17,980
I could actually just go type in here,

50
00:02:17,980 --> 00:02:23,270
event = and then put an empty string, context = and then put

51
00:02:23,270 --> 00:02:26,400
another empty string, and this will allow us to call our handler

52
00:02:26,400 --> 00:02:29,200
with some empty values, because they don't matter, and test out

53
00:02:29,200 --> 00:02:30,770
the functionality of send_ tweet.

54
00:02:30,770 --> 00:02:31,560
So let's do that.

55
00:02:31,560 --> 00:02:37,090
Let's go ahead and do handler, open, and let's pass it in an event and

56
00:02:37,090 --> 00:02:40,890
context that we just defined there, and let's hit Enter.

57
00:02:40,890 --> 00:02:43,840
So now that we ran that, we should see a random value from the

58
00:02:43,840 --> 00:02:45,650
potential_tweets that we defined earlier.

59
00:02:45,650 --> 00:02:49,980
So let's go back up to those, and let's scroll back over here and refresh the

60
00:02:49,980 --> 00:02:52,750
page one more time to see if we see a new random tweet.

61
00:02:52,750 --> 00:02:55,970
Now it looks like we did successfully use this to send out a random tweet.

62
00:02:55,970 --> 00:02:59,500
So let's go back to our code and see what else we could do with this bot.

63
00:02:59,500 --> 00:03:01,790
So now that we've tested it, this should all be good to

64
00:03:01,790 --> 00:03:05,090
go to package up and send out to Lambda and configure it

65
00:03:05,090 --> 00:03:06,870
to run on an event schedule.

66
00:03:06,870 --> 00:03:10,390
But if we wanted to play around with more of the functionality of the Twitter

67
00:03:10,390 --> 00:03:14,010
client we created from Twython, I've also included some code that you could

68
00:03:14,010 --> 00:03:16,940
use below the handler and include in your bot.

69
00:03:16,940 --> 00:03:19,110
Now, some of these examples use the

70
00:03:19,110 --> 00:03:21,610
create_friendship method of the Twitter client,

71
00:03:21,610 --> 00:03:24,930
which is used to follow a person on Twitter if you're familiar

72
00:03:24,930 --> 00:03:28,060
with that convention more, essentially to see what their statuses

73
00:03:28,060 --> 00:03:30,440
are and get more information from them.

74
00:03:30,440 --> 00:03:31,690
Now if we scroll down a little further,

75
00:03:31,690 --> 00:03:34,700
I've also included the create_favorite method here,

76
00:03:34,700 --> 00:03:39,360
which allows you to like a Twitter status using the tweet ID of the

77
00:03:39,360 --> 00:03:41,730
tweet, which essentially is a long number that appears whenever

78
00:03:41,730 --> 00:03:43,620
you're loading the status inside of Twitter.

79
00:03:43,620 --> 00:03:45,780
Let's go ahead and copy all of these different functions

80
00:03:45,780 --> 00:03:48,320
here and paste them into our interpreter.

81
00:03:48,320 --> 00:03:50,390
Now, if I wanted to try using any of these,

82
00:03:50,390 --> 00:03:53,460
I could scroll back up and just see how we define them up here.

83
00:03:53,460 --> 00:03:56,200
So let's try using the follow_someone function.

84
00:03:56,200 --> 00:03:59,320
I'm going to copy the title of that right there, and it looks like

85
00:03:59,320 --> 00:04:01,670
we just use this screen name to follow someone.

86
00:04:01,670 --> 00:04:03,970
So let's go ahead and do follow_someone, open

87
00:04:03,970 --> 00:04:06,110
parenthesis, and we'll pass in a string.

88
00:04:06,110 --> 00:04:09,226
And I'm going to try and follow myself using this command. So I'm

89
00:04:09,226 --> 00:04:13,280
going to do fmc_sea, which is my twitter handle, and then I'm going

90
00:04:13,280 --> 00:04:15,730
to close out this function and hit Enter.

91
00:04:15,730 --> 00:04:19,110
Now let's go back over to our Globomantics Pet Care here,

92
00:04:19,110 --> 00:04:21,550
and you can see that we're not following anyone right now,

93
00:04:21,550 --> 00:04:23,340
and we have no followers.

94
00:04:23,340 --> 00:04:24,620
But if I refresh the page,

95
00:04:24,620 --> 00:04:27,550
we should now see that there's one person that we're following.

96
00:04:27,550 --> 00:04:29,650
And If I go over here and click on it, looks like

97
00:04:29,650 --> 00:04:31,440
it's me with my Twitter handle.

98
00:04:31,440 --> 00:04:35,060
So feel free to play around with the other examples that I've included here.

99
00:04:35,060 --> 00:04:37,780
And if you'd like to learn more about Twython and using the

100
00:04:37,780 --> 00:04:39,680
Twitter client that you just created,

101
00:04:39,680 --> 00:04:42,040
go ahead and look for the Twython documentation,

102
00:04:42,040 --> 00:04:45,090
which will have a lot of other opportunities for you to use it.

103
00:04:45,090 --> 00:04:48,620
Now, keep in mind that when you created your Twitter API credentials,

104
00:04:48,620 --> 00:04:51,220
you got a limited set of use related to them.

105
00:04:51,220 --> 00:04:51,620
Now,

106
00:04:51,620 --> 00:04:54,310
probably there's going to be some methods that you're not going to be

107
00:04:54,310 --> 00:04:57,095
allowed to use by Twitter, simply because they haven't approved your

108
00:04:57,095 --> 00:04:59,590
API keys to do those different methods.

109
00:04:59,590 --> 00:05:02,350
Those might involve getting data from Twitter that they want to make

110
00:05:02,350 --> 00:05:05,080
sure is restricted to respect people's privacy.

111
00:05:05,080 --> 00:05:12,000
So nice work, and in the next video, we'll learn how to put all of this into AWS Lambda inside of a function package.

