WEBVTT
1
00:00:01.540 --> 00:00:04.300
Back over here on my VS Code terminal, let's test

2
00:00:04.300 --> 00:00:06.730
out the code that's in cuckoo.py.

3
00:00:06.730 --> 00:00:11.740
I'm going to use Python 3 in the module inside of that called venv to once again

4
00:00:11.740 --> 00:00:16.040
create a virtual environment that I'm going to name .venv.

5
00:00:16.040 --> 00:00:18.270
Once I've created that virtual environment,

6
00:00:18.270 --> 00:00:20.330
I'm not going to use VS Code to turn it on,

7
00:00:20.330 --> 00:00:23.410
but rather, I'm going to source the contents of this directory

8
00:00:23.410 --> 00:00:28.530
of .venv/bin/activate, and that file will be sourced in order to

9
00:00:28.530 --> 00:00:32.830
turn on .venv. Again, if you need help with this command on

10
00:00:32.830 --> 00:00:34.510
another operating system,

11
00:00:34.510 --> 00:00:37.470
you can look at the windows_setup.bat file to look at

12
00:00:37.470 --> 00:00:39.540
how to do it in the command prompt.

13
00:00:39.540 --> 00:00:39.900
Now,

14
00:00:39.900 --> 00:00:41.720
that'll still be a little bit different if you're using

15
00:00:41.720 --> 00:00:45.370
PowerShell again, so make sure to open these up in the command

16
00:00:45.370 --> 00:00:48.810
prompt if you're on Windows. This should work as you see it for

17
00:00:48.810 --> 00:00:51.090
Linux and Mac operating systems.

18
00:00:51.090 --> 00:00:52.990
So once this virtual environment is turned on,

19
00:00:52.990 --> 00:00:58.350
let's run pip install, and let's get Jinja2. For Jinja2, I'll have

20
00:00:58.350 --> 00:01:04.070
to use a capital Jinja2, and this will install that dependency. And

21
00:01:04.070 --> 00:01:06.860
then we'll need to also install boto3.

22
00:01:06.860 --> 00:01:10.220
Now, this will just be to install boto3 locally because, again,

23
00:01:10.220 --> 00:01:13.700
we won't need to do that up inside of AWS.

24
00:01:13.700 --> 00:01:16.540
Lambda will provide that dependency for us.

25
00:01:16.540 --> 00:01:18.950
So once this is installed in our virtual environment,

26
00:01:18.950 --> 00:01:22.100
I can clear the screen here just to start fresh, and we can type

27
00:01:22.100 --> 00:01:27.770
in python to use the local .venv version of Python. And this will

28
00:01:27.770 --> 00:01:31.730
open up Python 3.7 in this case, which is what I've installed on my system.

29
00:01:31.730 --> 00:01:33.840
So now let's try using Cuckoo.

30
00:01:33.840 --> 00:01:37.960
I'm going to import Cuckoo just by running import cuckoo, and this will

31
00:01:37.960 --> 00:01:42.690
go and get the local cuckoo.py file here and bring all the functions

32
00:01:42.690 --> 00:01:45.820
inside of it into my Python interpreter.

33
00:01:45.820 --> 00:01:46.490
Now, essentially,

34
00:01:46.490 --> 00:01:49.240
what the Lambda runtime is going to do later is it's going to

35
00:01:49.240 --> 00:01:52.630
look inside of the cuckoo file, and then it's going to try and

36
00:01:52.630 --> 00:01:55.060
find the handler inside of that,

37
00:01:55.060 --> 00:01:58.520
and it's going to call it with an event and a context.

38
00:01:58.520 --> 00:02:02.090
Now, in this case, I'm actually going to use an event,

39
00:02:02.090 --> 00:02:04.280
so I'd want to put some details in here.

40
00:02:04.280 --> 00:02:07.440
Now, this isn't going to do anything because I haven't defined event yet,

41
00:02:07.440 --> 00:02:09.620
so let's go ahead and define event.

42
00:02:09.620 --> 00:02:12.520
Event, in this case, is going to be a CloudWatch event.

43
00:02:12.520 --> 00:02:15.300
And if we want to see what the structure of any kind of event is for

44
00:02:15.300 --> 00:02:18.390
Lambda, we can scroll back to the AWS Console,

45
00:02:18.390 --> 00:02:21.840
go over to the Lambda console here, and we can click on any of

46
00:02:21.840 --> 00:02:25.850
our already created functions and then go over to the Test event

47
00:02:25.850 --> 00:02:28.090
and click Configure test events.

48
00:02:28.090 --> 00:02:32.320
Now, you'll see this is what an event looks like coming from CloudWatch.

49
00:02:32.320 --> 00:02:32.450
Now,

50
00:02:32.450 --> 00:02:36.380
the only important part for us right here is the resources section, and

51
00:02:36.380 --> 00:02:39.390
that's going to be what we look at to the name of our rule that's

52
00:02:39.390 --> 00:02:42.920
interacting with this function. Some I'm going to copy this whole thing

53
00:02:42.920 --> 00:02:46.330
right here, and I'm going to go back to VS Code, and I'm going to

54
00:02:46.330 --> 00:02:48.560
actually open up a new file here.

55
00:02:48.560 --> 00:02:50.560
So let me just have a temporary file.

56
00:02:50.560 --> 00:02:55.480
I'm just going to call this temp, and we'll paste this information in here.

57
00:02:55.480 --> 00:02:58.420
I'm going to edit this so that instead of what's in here right now,

58
00:02:58.420 --> 00:03:00.710
we'll have a rule with a value that will include

59
00:03:00.710 --> 00:03:03.450
something that will trigger this function.

60
00:03:03.450 --> 00:03:04.430
In order to do that,

61
00:03:04.430 --> 00:03:08.230
I want to include the word pickup inside of this rule, so let's

62
00:03:08.230 --> 00:03:11.840
copy and paste this into event down here.

63
00:03:11.840 --> 00:03:12.910
And I'm going to hit Enter.

64
00:03:12.910 --> 00:03:14.820
And now if I type in event one more time,

65
00:03:14.820 --> 00:03:19.040
you should see that it contains a rule with the word pickup in it.

66
00:03:19.040 --> 00:03:23.030
So that's how we could configure this as a sample test event for function.

67
00:03:23.030 --> 00:03:24.130
Now, in order to test this,

68
00:03:24.130 --> 00:03:29.820
then we can run cuckoo.handler, and we could pass it in the event variable we

69
00:03:29.820 --> 00:03:34.580
just created, as well as an empty string here for the context, or we could put

70
00:03:34.580 --> 00:03:37.640
whatever we want inside of it, like context here.

71
00:03:37.640 --> 00:03:39.930
The reason we can do that is because we're not using

72
00:03:39.930 --> 00:03:43.620
this value inside of our function, so it doesn't matter at the moment.

73
00:03:43.620 --> 00:03:46.000
So I'm going to run cuckoo.handler now.

74
00:03:46.000 --> 00:03:48.580
So this output is what's letting us know that it's been

75
00:03:48.580 --> 00:03:51.730
successfully triggered by the pickup rule. Now,

76
00:03:51.730 --> 00:03:55.970
in order to really test this, we're going to need to open up our email address.

77
00:03:55.970 --> 00:03:59.640
Let's go back to cuckoo.py to see what was happening inside of here

78
00:03:59.640 --> 00:04:03.940
whenever we ran a pickup function with that event.

79
00:04:03.940 --> 00:04:06.130
So let's scroll down to the bottom to see what we were

80
00:04:06.130 --> 00:04:08.800
doing whenever we ran that pickup function.

81
00:04:08.800 --> 00:04:12.720
Let's look at our handler at the very bottom here and see who

82
00:04:12.720 --> 00:04:16.640
we're emailing. In this case, we're emailing our clients, so we

83
00:04:16.640 --> 00:04:19.540
want to check the email that's associated with those clients back

84
00:04:19.540 --> 00:04:21.460
at the very top. In this case,

85
00:04:21.460 --> 00:04:27.290
I'll open up the f_mcorey@yahoo.com email in my browser. And over in Yahoo

86
00:04:27.290 --> 00:04:30.590
Mail here, it looks like I have a new reminder. so let's open this up

87
00:04:30.590 --> 00:04:35.150
here. Now, this pickup reminder contains an email template reminding our

88
00:04:35.150 --> 00:04:37.300
customers to come pick up their pets.

89
00:04:37.300 --> 00:04:40.270
So it's talking to me in particular because that's what's inside of

90
00:04:40.270 --> 00:04:44.120
Cuckoo, and it's telling me to pick up Riley by 7 pm. So we've

91
00:04:44.120 --> 00:04:47.930
successfully used this template and tested it out locally.

92
00:04:47.930 --> 00:04:52.040
So this means that not only did we get this template successfully from S3,

93
00:04:52.040 --> 00:04:57.300
but we loaded it into our local environment, and then we used Jinja to fill

94
00:04:57.300 --> 00:05:00.120
these variables in here for my name and Riley's name,

95
00:05:00.120 --> 00:05:04.840
my pet, and then we sent the email with the Amazon Simple Email Service.

96
00:05:04.840 --> 00:05:08.840
Now, if we wanted to, we could also run this test against a few other things.

97
00:05:08.840 --> 00:05:13.040
We could go back to this temp file here that I created this pickup event in,

98
00:05:13.040 --> 00:05:17.830
and we could change this to something like come_to_work,

99
00:05:17.830 --> 00:05:21.240
which would then be supposed to trigger the other events that are at

100
00:05:21.240 --> 00:05:23.580
the bottom of this function in the handler file.

101
00:05:23.580 --> 00:05:26.120
This would trigger an email out to Homer Simpson,

102
00:05:26.120 --> 00:05:29.170
I believe, and the same thing, if we did daily_tasks,

103
00:05:29.170 --> 00:05:31.130
it would just trigger a different email.

104
00:05:31.130 --> 00:05:33.030
So let's give this a try right now.

105
00:05:33.030 --> 00:05:35.000
I'm going to go back to temp here, and now I've

106
00:05:35.000 --> 00:05:37.050
already created this come_to_work event,

107
00:05:37.050 --> 00:05:41.880
so let's recreate this event variable and set it equal to this new value.

108
00:05:41.880 --> 00:05:44.250
And then I can do the exact same thing I was doing before.

109
00:05:44.250 --> 00:05:47.020
I'm going to scroll up through some of the things I've already typed in,

110
00:05:47.020 --> 00:05:50.370
and here we have this cuckoo.handler again, and let's

111
00:05:50.370 --> 00:05:52.240
try running this one more time.

112
00:05:52.240 --> 00:05:55.240
Looks like this time it was triggered by the come_to_work rule, so I

113
00:05:55.240 --> 00:05:58.200
can go back to my browser and check for an email.

114
00:05:58.200 --> 00:06:01.010
And back here in my email for Homer Simpson,

115
00:06:01.010 --> 00:06:05.780
I can log into this and see that I have gotten a reminder to be at work.

116
00:06:05.780 --> 00:06:08.440
So this other test has worked correctly too.

117
00:06:08.440 --> 00:06:09.260
Now, finally,

118
00:06:09.260 --> 00:06:12.520
we can run one last test. Instead of come_to_work, we

119
00:06:12.520 --> 00:06:14.190
can have this be the final test,

120
00:06:14.190 --> 00:06:18.220
which is the daily tasks that Homer should get throughout the day

121
00:06:18.220 --> 00:06:20.770
to remind him to keep a better eye on our pets.

122
00:06:20.770 --> 00:06:23.940
So let's copy this event one more time and once again sit it equal

123
00:06:23.940 --> 00:06:26.710
to the event variable in our Python interpreter.

124
00:06:26.710 --> 00:06:27.590
And let's once again,

125
00:06:27.590 --> 00:06:30.440
I'm just pressing the up arrow a bunch of times to go and get

126
00:06:30.440 --> 00:06:32.940
the line of code that I just ran before.

127
00:06:32.940 --> 00:06:34.340
So I'll run this one more time,

128
00:06:34.340 --> 00:06:36.410
and it looks like it's being correctly triggered by the

129
00:06:36.410 --> 00:06:39.880
daily_tasks that we just set inside of that temp file and

130
00:06:39.880 --> 00:06:41.960
copied and pasted into our interpreter.

131
00:06:41.960 --> 00:06:45.710
Let's go back to Homer's email here and check the inbox one more time.

132
00:06:45.710 --> 00:06:49.540
Looks like we just got a new email, so let's go in here and review it.

133
00:06:49.540 --> 00:06:53.570
Here's Homer's daily tasks. Today, he's going to have to feed the dogs,

134
00:06:53.570 --> 00:06:53.960
rabbits,

135
00:06:53.960 --> 00:06:58.210
cats, and turtles and also walk the dogs and empty the cats' litter boxes.

136
00:06:58.210 --> 00:07:02.220
And we're also using Jinja2 to create a periodic task that

137
00:07:02.220 --> 00:07:04.450
depends on the day that were running this.

138
00:07:04.450 --> 00:07:06.840
So today is Sunday, and I'm running this,

139
00:07:06.840 --> 00:07:10.400
so it's telling me to relax and play with the puppies because it's the weekend.

140
00:07:10.400 --> 00:07:12.540
However, if you're running this on a different day,

141
00:07:12.540 --> 00:07:14.870
it's probably going to tell you to do something else.

142
00:07:14.870 --> 00:07:17.050
So if these tests are all working as we expect,

143
00:07:17.050 --> 00:07:21.170
we could go back VS Code and get ready to create our function.

144
00:07:21.170 --> 00:07:24.190
Make sure to delete this temp file because we don't need it,

145
00:07:24.190 --> 00:07:26.590
and we're not going to load it into our function package.

146
00:07:26.590 --> 00:07:27.960
And after you're done with that,

147
00:07:27.960 --> 00:07:31.580
you can also get out of the Python interpreter so we can go back to

148
00:07:31.580 --> 00:07:35.970
interacting with the AWS CLI in the command prompt. Now, one other

149
00:07:35.970 --> 00:07:40.100
thing is you could clear this screen here and then remove the .venv

150
00:07:40.100 --> 00:07:42.090
and pycache directories.

151
00:07:42.090 --> 00:07:44.800
If .venv is appearing on the left side of your screen,

152
00:07:44.800 --> 00:07:48.870
you can deactivate it with the deactivate command, or on Windows

153
00:07:48.870 --> 00:07:50.810
there's another command you can run that's in the

154
00:07:50.810 --> 00:07:54.940
windows_setup.bat file to run the deactivate script.

155
00:07:54.940 --> 00:07:59.230
Now I'm going to need to remove recursively the .venv virtual

156
00:07:59.230 --> 00:08:02.310
environment just so I don't inadvertently keep some dependencies

157
00:08:02.310 --> 00:08:05.800
around that I don't need in there and ruin that when I'm using the

158
00:08:05.800 --> 00:08:09.300
setup.sh script to create my function package. I'm also going to

159
00:08:09.300 --> 00:08:13.440
remove recursively the pycache directory.

160
00:08:13.440 --> 00:08:13.580
Now,

161
00:08:13.580 --> 00:08:17.440
this is a bunch of information that Python creates in the background sometimes,

162
00:08:17.440 --> 00:08:19.540
but it's not necessary for this project,

163
00:08:19.540 --> 00:08:23.120
and it just adds a bit of extra stuff we don't need to our function package,

164
00:08:23.120 --> 00:08:31.000
so make sure to remove it every once in a while too. And in the next video, we'll be creating our function using the AWS CLI.

