WEBVTT
1
00:00:01.140 --> 00:00:03.300
Now that you have a better understanding of the AWS

2
00:00:03.300 --> 00:00:05.500
console and the services within it,

3
00:00:05.500 --> 00:00:08.920
we're going to take a look at AWS's Identity and Access Management

4
00:00:08.920 --> 00:00:13.910
Service, or IAM. We'll review a few key concepts of IAM that you'll need

5
00:00:13.910 --> 00:00:16.870
to know in order to interact with AWS services,

6
00:00:16.870 --> 00:00:18.830
and we'll look at a few tools that will be useful

7
00:00:18.830 --> 00:00:21.940
for configuring IAM in the future.

8
00:00:21.940 --> 00:00:24.380
So let's look at some terminology and concepts that are

9
00:00:24.380 --> 00:00:27.000
important to understand when you're working with Identity

10
00:00:27.000 --> 00:00:29.440
and Access Management in AWS.

11
00:00:29.440 --> 00:00:32.890
The first, and probably most familiar concept, is that of an IAM

12
00:00:32.890 --> 00:00:35.850
user. Users are individuals like you and I.

13
00:00:35.850 --> 00:00:39.360
We might log into AWS with an email and password combination,

14
00:00:39.360 --> 00:00:43.260
a multiâ€‘factor authentication token, or use AWS with the AWS

15
00:00:43.260 --> 00:00:45.790
command line interface and access keys.

16
00:00:45.790 --> 00:00:49.030
Users can have sets of permissions in IAM that allow them to

17
00:00:49.030 --> 00:00:52.040
do certain things within the AWS ecosystem.

18
00:00:52.040 --> 00:00:52.970
Similarly,

19
00:00:52.970 --> 00:00:56.790
there also IAM groups. Groups are a collection of users

20
00:00:56.790 --> 00:00:59.000
that each share permission policies.

21
00:00:59.000 --> 00:01:02.200
This can be especially useful when you like to be able to easily

22
00:01:02.200 --> 00:01:05.610
standardize and manage permissions among a group of people.

23
00:01:05.610 --> 00:01:09.020
Rather than write specific access policies for each user account,

24
00:01:09.020 --> 00:01:12.070
you can then manage the group policies that only require you

25
00:01:12.070 --> 00:01:14.690
to add and remove users from the group.

26
00:01:14.690 --> 00:01:17.100
IAM also has the concept of a role.

27
00:01:17.100 --> 00:01:20.030
Roles are similar to users because they also carry with them a set

28
00:01:20.030 --> 00:01:22.840
of permissions that determine what a role can do.

29
00:01:22.840 --> 00:01:24.510
They're a little bit different, however,

30
00:01:24.510 --> 00:01:27.360
because they don't have access keys or login credentials,

31
00:01:27.360 --> 00:01:33.540
and they can be assumed by AWS users or AWS services like AWS Lambda.

32
00:01:33.540 --> 00:01:35.680
So how do all these concepts interact?

33
00:01:35.680 --> 00:01:40.010
Well, just for a quick visual, let's imagine that we have a bunch of users,

34
00:01:40.010 --> 00:01:43.250
and each of these users might be put into an IAM group

35
00:01:43.250 --> 00:01:45.180
that offers them certain permissions.

36
00:01:45.180 --> 00:01:49.500
This way, we can give only the resources needed by a developer to a developer,

37
00:01:49.500 --> 00:01:53.900
and only the resources needed by a data scientist to your data scientists.

38
00:01:53.900 --> 00:01:56.110
Now each of these groups would then have policies that are

39
00:01:56.110 --> 00:01:58.770
appropriate for those different kinds of users,

40
00:01:58.770 --> 00:02:02.830
and each of these group policies is determined by a JSON IAM policy

41
00:02:02.830 --> 00:02:05.460
that we'll look at in more depth a little bit later.

42
00:02:05.460 --> 00:02:08.400
This policy is usually managed by an administrator or a

43
00:02:08.400 --> 00:02:11.640
security officer in larger organizations.

44
00:02:11.640 --> 00:02:13.350
So, how do roles come in here?

45
00:02:13.350 --> 00:02:16.850
Well, roles are a more flexible concept that allow permissions to be granted

46
00:02:16.850 --> 00:02:21.460
to AWS users, federated account users, coming through other things that manage

47
00:02:21.460 --> 00:02:25.190
identity, or AWS account resources themselves.

48
00:02:25.190 --> 00:02:27.510
This means that AWS roles can be a little bit more

49
00:02:27.510 --> 00:02:29.540
flexible in what they apply to.

50
00:02:29.540 --> 00:02:32.940
But, let's take a look at a common example of when we might use a role.

51
00:02:32.940 --> 00:02:36.720
Let's say we have two different sets of virtual machines. With the first set,

52
00:02:36.720 --> 00:02:41.950
we might want to be able to send emails through AWS's Simple Email Service, SES,

53
00:02:41.950 --> 00:02:44.460
and we might also want to be able to load in templates for

54
00:02:44.460 --> 00:02:46.810
those emails from something like S3.

55
00:02:46.810 --> 00:02:50.420
With the second set of virtual machines, in this case the orange one, we might

56
00:02:50.420 --> 00:02:53.440
want to interact with the Systems Manager Parameter Store,

57
00:02:53.440 --> 00:02:56.440
which we'll be doing later on to get some access keys from that

58
00:02:56.440 --> 00:03:00.140
Parameter Store to use against the APIs that Twitter offers.

59
00:03:00.140 --> 00:03:03.720
Now for both of these different services, we'll have different use cases that we

60
00:03:03.720 --> 00:03:09.380
need. From the orange section, we'll need to load those API keys into our Lambda

61
00:03:09.380 --> 00:03:10.990
environment, but we don't need to change them.

62
00:03:10.990 --> 00:03:15.470
Whereas with the green service, we might need to load things in from S3,

63
00:03:15.470 --> 00:03:18.950
an entirely separate service, and also then write

64
00:03:18.950 --> 00:03:21.570
emails with SES and send those out.

65
00:03:21.570 --> 00:03:21.740
Now,

66
00:03:21.740 --> 00:03:24.250
both of these different permissions would be described in

67
00:03:24.250 --> 00:03:27.330
separate permissions policies that then might be managed by

68
00:03:27.330 --> 00:03:29.260
something like a security officer.

69
00:03:29.260 --> 00:03:32.730
Now, we're going to need to set these policies up and then

70
00:03:32.730 --> 00:03:35.920
attribute them to a role, which will then be attached to

71
00:03:35.920 --> 00:03:37.880
these virtual machine groups here.

72
00:03:37.880 --> 00:03:38.240
Now,

73
00:03:38.240 --> 00:03:40.700
we're not going to do this in this course because instead of virtual

74
00:03:40.700 --> 00:03:43.450
machines, we'll just be assigning roles to particular Lambda

75
00:03:43.450 --> 00:03:47.140
functions that will take these actions for us.

76
00:03:47.140 --> 00:03:49.120
So, what do these policies look like?

77
00:03:49.120 --> 00:03:51.790
Let's take a look at a sample policy here.

78
00:03:51.790 --> 00:03:56.590
Now, each IAM policy is a JSON object that contains a few key elements.

79
00:03:56.590 --> 00:04:00.390
The first portion of the policy, as you can see here, is used to tell AWS

80
00:04:00.390 --> 00:04:03.840
what version of the IAM policy syntax that you're using.

81
00:04:03.840 --> 00:04:06.770
The main reason for this is it might allow you to include policy

82
00:04:06.770 --> 00:04:09.540
variables within more complicated policies.

83
00:04:09.540 --> 00:04:14.630
And depending on when AWS changes the versions of the IAM policy syntax,

84
00:04:14.630 --> 00:04:17.190
you might want to use a future version or an earlier

85
00:04:17.190 --> 00:04:19.240
version that you've already created.

86
00:04:19.240 --> 00:04:22.380
The next section here is the meat and potatoes of the policy.

87
00:04:22.380 --> 00:04:25.620
The effect portion specifies if the action that we'll talk about should

88
00:04:25.620 --> 00:04:30.320
be allowed or denied to whatever follows. Now, the action portion then

89
00:04:30.320 --> 00:04:33.190
tells us what particular actions can be taken,

90
00:04:33.190 --> 00:04:38.040
and the resource portion specifies what particular resources these actions

91
00:04:38.040 --> 00:04:42.690
can be taken on. Now, this policy is extensively broad.

92
00:04:42.690 --> 00:04:46.310
The action with a star means any action, and the

93
00:04:46.310 --> 00:04:49.060
resource with a star means any resource.

94
00:04:49.060 --> 00:04:53.260
So while this is a great policy to use as an example because of its simplicity,

95
00:04:53.260 --> 00:04:55.660
it isn't a great policy to use in practice.

96
00:04:55.660 --> 00:04:58.440
So let's take a look at some of the best practices of dealing

97
00:04:58.440 --> 00:05:02.340
with IAM and security in your new AWS account.

98
00:05:02.340 --> 00:05:04.470
Now that you've created an AWS account and you

99
00:05:04.470 --> 00:05:06.910
understand some of the IAM terminology,

100
00:05:06.910 --> 00:05:09.430
let's make sure you're set up with a few best practices.

101
00:05:09.430 --> 00:05:14.170
First, always use strong and unique passwords on all your AWS accounts.

102
00:05:14.170 --> 00:05:17.590
If you can, also set up two factor authentication with a hardware

103
00:05:17.590 --> 00:05:20.900
token or a mobile app like Google Authenticator.

104
00:05:20.900 --> 00:05:22.400
When you use your AWS account,

105
00:05:22.400 --> 00:05:26.110
try to limit access to permissions and services wherever possible.

106
00:05:26.110 --> 00:05:29.760
The principle of least privilege is a guideline that tells you only to give

107
00:05:29.760 --> 00:05:34.580
permissions out on an as needed basis and try and restrict them as much as

108
00:05:34.580 --> 00:05:37.520
possible, one that isn't something that's going to break your applications or

109
00:05:37.520 --> 00:05:39.920
cause difficulties for your developers.

110
00:05:39.920 --> 00:05:42.600
Next, be cautious in using your root account,

111
00:05:42.600 --> 00:05:46.310
which is the default account that you get when you create an AWS account.

112
00:05:46.310 --> 00:05:50.990
You risk exposing the root account credentials as you keep using it, so it's

113
00:05:50.990 --> 00:05:55.130
best practice to create an administrator account with highâ€‘level permissions

114
00:05:55.130 --> 00:05:57.290
that isn't the root account itself.

115
00:05:57.290 --> 00:05:59.860
So if you always need to go back to and fix something,

116
00:05:59.860 --> 00:06:03.680
that root account will be there at that highest level of permissions.

117
00:06:03.680 --> 00:06:07.130
Keep these best practices in mind as you set up your AWS account, and take

118
00:06:07.130 --> 00:06:10.140
a few minutes to apply these updates to your account.

119
00:06:10.140 --> 00:06:16.000
So now let's take a look at what we'll be doing with IAM to get set up with everything we'll need.

