1
00:00:01,170 --> 00:00:04,480
Let's take a look at how we can install the Serverless Framework using

2
00:00:04,480 --> 00:00:08,760
Node.j and npm or by using these serverless binary installer.

3
00:00:08,760 --> 00:00:11,440
After that, let's take a look at how we can configure it,

4
00:00:11,440 --> 00:00:16,030
either using the AWS CLI and access keys or by using the

5
00:00:16,030 --> 00:00:19,090
AWS IAM role in the Serverless Dashboard.

6
00:00:19,090 --> 00:00:23,140
After that, we'll take a look at how we could bootstrap a service from scratch.

7
00:00:23,140 --> 00:00:25,720
So let's go ahead and get started.

8
00:00:25,720 --> 00:00:28,900
Now, I've loaded up the serverless.com website, and on this page,

9
00:00:28,900 --> 00:00:31,570
I'm going to go over to the Docs section here.

10
00:00:31,570 --> 00:00:35,640
In here, I can go to the get started section to get the installation

11
00:00:35,640 --> 00:00:37,940
instructions that I need to get up and running.

12
00:00:37,940 --> 00:00:41,640
Now, the first option here is to install as a standalone binary,

13
00:00:41,640 --> 00:00:45,360
and I'm going to go ahead and copy the values that we have inside of this code

14
00:00:45,360 --> 00:00:49,460
sample here to do this on my local machine. Now, you could choose to do this on

15
00:00:49,460 --> 00:00:52,960
macOS or Linux, or if you're on a different system,

16
00:00:52,960 --> 00:00:56,320
you could scroll further down and learn how to do this on Windows.

17
00:00:56,320 --> 00:00:58,960
There's also the option to do this with npm,

18
00:00:58,960 --> 00:01:02,480
but then you'd have to install Node and npm on your local machine,

19
00:01:02,480 --> 00:01:04,940
and I don't want to make you do that at the moment.

20
00:01:04,940 --> 00:01:07,570
If you'd like to learn more about that process and how to get set

21
00:01:07,570 --> 00:01:09,970
up using JavaScript on the Serverless Framework,

22
00:01:09,970 --> 00:01:12,140
you could take a look at my Serverless Framework course here on

23
00:01:12,140 --> 00:01:15,610
Pluralsight. So now that I've copied this curl command here,

24
00:01:15,610 --> 00:01:18,710
I'm going to go to VS Code. And in VS Code, let's paste in

25
00:01:18,710 --> 00:01:20,990
this curl command here and hit Enter.

26
00:01:20,990 --> 00:01:21,150
Now,

27
00:01:21,150 --> 00:01:23,470
this will go through the process of downloading the serverless

28
00:01:23,470 --> 00:01:26,410
binary and installing it on our local machine.

29
00:01:26,410 --> 00:01:31,240
Once this process is finished, we should be able to use the Serverless Framework.

30
00:01:31,240 --> 00:01:32,790
So now that this has been installed,

31
00:01:32,790 --> 00:01:35,463
we're going to need to open a new terminal and then run Serverless.

32
00:01:35,463 --> 00:01:39,170
Immediately we're not going to be able to run Serverless because our terminal

33
00:01:39,170 --> 00:01:41,940
will need to source the recently installed information.

34
00:01:41,940 --> 00:01:45,300
So I'm going to type in exit here, this will exit out this current

35
00:01:45,300 --> 00:01:48,900
terminal, and then I'll open a new terminal in VS Code.

36
00:01:48,900 --> 00:01:51,920
I'll open this up with Ctrl + ~, and then I'll use the serverless

37
00:01:51,920 --> 00:01:55,640
command to start bootstrapping a serverless service.

38
00:01:55,640 --> 00:01:59,200
This will take me through a workflow of several questions in order to get my

39
00:01:59,200 --> 00:02:02,540
first serverless service or serverless project set up.

40
00:02:02,540 --> 00:02:02,720
Now,

41
00:02:02,720 --> 00:02:04,850
I don't have a project on my desktop right now because I don't have

42
00:02:04,850 --> 00:02:08,560
anything there, so I'm going to answer a Y for Yes, and this'll take me

43
00:02:08,560 --> 00:02:10,720
through the process of creating this project.

44
00:02:10,720 --> 00:02:14,500
I'm going to specify a Python project instead of Node, and let's call

45
00:02:14,500 --> 00:02:17,850
this project our gpc, for Globomantics Pet Care,

46
00:02:17,850 --> 00:02:21,040
‑api, for our application programming interface.

47
00:02:21,040 --> 00:02:24,960
So now that I clicked Enter on that, it's created this new folder for me

48
00:02:24,960 --> 00:02:28,170
inside of my desktop. And this has a few different files.

49
00:02:28,170 --> 00:02:30,800
It has a gitignore file to help me work with it if I'm

50
00:02:30,800 --> 00:02:34,590
using Git and a handler.py file for my first Lambda handler

51
00:02:34,590 --> 00:02:36,110
using the Serverless Framework,

52
00:02:36,110 --> 00:02:39,110
and it also has the serverless.yml file with the needed

53
00:02:39,110 --> 00:02:42,830
configuration to start working with the Serverless Framework. So

54
00:02:42,830 --> 00:02:45,600
let's go ahead and decide if we want to enable monitoring and

55
00:02:45,600 --> 00:02:48,070
troubleshooting with the Serverless Dashboard.

56
00:02:48,070 --> 00:02:49,840
Now I could create a serverless account,

57
00:02:49,840 --> 00:02:53,780
so let's say Yes for right now. And I'm not logged into an account right

58
00:02:53,780 --> 00:02:57,330
now, and on my system I don't have one created, so I can decide if I wanted

59
00:02:57,330 --> 00:02:59,800
to register a new account or log into an old one.

60
00:02:59,800 --> 00:03:01,710
In this case, I'll hit register.

61
00:03:01,710 --> 00:03:08,350
And let's use my pluralsight.fernando email address @gmail.com,

62
00:03:08,350 --> 00:03:10,940
and let's register with that and a password.

63
00:03:10,940 --> 00:03:12,460
Now I'm going to paste my password in here,

64
00:03:12,460 --> 00:03:14,670
but the input is hidden, so you won't be able to see it, and then I'm

65
00:03:14,670 --> 00:03:17,120
going to hit Enter. Nowt this should take me through the process of

66
00:03:17,120 --> 00:03:18,900
registering that account, and if I wanted to,

67
00:03:18,900 --> 00:03:20,520
I could go log into that account.

68
00:03:20,520 --> 00:03:23,070
So let's try this now.

69
00:03:23,070 --> 00:03:27,160
In order to do this, I've navigated to dashboard.serverless.com,

70
00:03:27,160 --> 00:03:30,220
and this will redirect me to a page to sign into my account. Now,

71
00:03:30,220 --> 00:03:33,780
because I just signed up for my account with the pluralsight.fernando

72
00:03:33,780 --> 00:03:36,760
email, we'll need to enter this again in here,

73
00:03:36,760 --> 00:03:38,940
and then I'll need to use the password I entered during the

74
00:03:38,940 --> 00:03:41,930
signup process. Now, you'll need to make sure to save these

75
00:03:41,930 --> 00:03:43,940
values down so you can access your account.

76
00:03:43,940 --> 00:03:47,280
So, I'm going to log into this account and see what's in there.

77
00:03:47,280 --> 00:03:50,340
Let's close out of that so I don't remember my password in Chrome, and now

78
00:03:50,340 --> 00:03:55,000
you'll see that I have this Globomantics Pet Care API app created inside of

79
00:03:55,000 --> 00:03:58,470
here. Now, we'll be able to add functions and other stuff into that in

80
00:03:58,470 --> 00:04:01,860
something called a service. So we could go through the process of adding

81
00:04:01,860 --> 00:04:05,630
services inside of this dashboard here, but I want to show you how to do

82
00:04:05,630 --> 00:04:07,160
this from the CLI.

83
00:04:07,160 --> 00:04:10,460
So let's go back to the VS Code editor and keep going.

84
00:04:10,460 --> 00:04:10,630
Now,

85
00:04:10,630 --> 00:04:15,430
I'm going to clear the screen here, and in order to deploy this gpc‑api service,

86
00:04:15,430 --> 00:04:18,860
we can change directories into the GPC API, and you'll see

87
00:04:18,860 --> 00:04:21,840
in this directory we have the serverless.yml file. In

88
00:04:21,840 --> 00:04:25,650
order to deploy this service, we can run serverless deploy,

89
00:04:25,650 --> 00:04:29,540
and this should send our code out to AWS.

90
00:04:29,540 --> 00:04:32,910
And this should start the process of creating a function package,

91
00:04:32,910 --> 00:04:36,270
then bundle in all the dependencies that we might need, and deploy

92
00:04:36,270 --> 00:04:40,320
everything to AWS. Now, in the background, this will be relying on

93
00:04:40,320 --> 00:04:42,420
something called CloudFormation.

94
00:04:42,420 --> 00:04:45,270
Now, AWS CloudFormation is a service that helps us

95
00:04:45,270 --> 00:04:47,170
manage infrastructure as code.

96
00:04:47,170 --> 00:04:47,650
However,

97
00:04:47,650 --> 00:04:51,020
it's syntax can be a bit overwhelming, so let's compare

98
00:04:51,020 --> 00:04:55,200
what it's syntax looks like to the serverless.yml file.

99
00:04:55,200 --> 00:04:56,700
Now, CloudFormation, in this case,

100
00:04:56,700 --> 00:05:00,800
if we take a closer look at it, is going to be about 256

101
00:05:00,800 --> 00:05:03,910
lines of code for our entire service.

102
00:05:03,910 --> 00:05:04,170
Now,

103
00:05:04,170 --> 00:05:07,710
this can be a bit overwhelming, and that's part of the reason that I rely

104
00:05:07,710 --> 00:05:12,010
on Framework sometimes to develop my serverless applications. Inside of

105
00:05:12,010 --> 00:05:15,580
the serverless.yml file here, there's a lot of stuff that's commented

106
00:05:15,580 --> 00:05:18,600
out. Now, all these comments are really achieving nothing here. They're

107
00:05:18,600 --> 00:05:22,760
just to give you a guide on how you could use this serverless.yml file.

108
00:05:22,760 --> 00:05:23,390
So for right now,

109
00:05:23,390 --> 00:05:26,740
I'm going to remove them, and let's take a look at how many lines of code

110
00:05:26,740 --> 00:05:31,980
we're actually using inside of this serverless.yml file. Looks like so far

111
00:05:31,980 --> 00:05:36,370
we're at seven, and these first few lines of code are configuring our service

112
00:05:36,370 --> 00:05:38,610
to interact with the Serverless Dashboard.

113
00:05:38,610 --> 00:05:42,280
That way, when we deploy this service and when anything happens to it,

114
00:05:42,280 --> 00:05:46,450
the dashboard can monitor it for us. Then the provider section here is

115
00:05:46,450 --> 00:05:50,910
specifying the AWS cloud is where we want to deploy our code and the runtime of

116
00:05:50,910 --> 00:05:54,900
Python 3.8 as which runtime we'd like to use with that.

117
00:05:54,900 --> 00:05:58,110
Now we can scroll down through the rest of these comments and delete them

118
00:05:58,110 --> 00:06:01,510
as well, and then we get to the functions section here.

119
00:06:01,510 --> 00:06:04,750
Now the functions are referring to a single function that we're naming

120
00:06:04,750 --> 00:06:08,860
hello in serverless.yml, and the handler for that function is in the

121
00:06:08,860 --> 00:06:12,070
handler.py file, and if we look in there,

122
00:06:12,070 --> 00:06:14,330
we should see a function called hello.

123
00:06:14,330 --> 00:06:17,450
So it's a very similar configuration to what we were doing earlier

124
00:06:17,450 --> 00:06:21,300
inside of the AWS CLI and the AWS Console. It's just all

125
00:06:21,300 --> 00:06:25,420
standardized in this same serverless.yml file. And if I scroll down

126
00:06:25,420 --> 00:06:28,230
through the rest of these comments too and get to the very bottom,

127
00:06:28,230 --> 00:06:32,540
you'll see that overall, this configuration is about 11 lines.

128
00:06:32,540 --> 00:06:36,320
When you compare that to the 256 lines of CloudFormation,

129
00:06:36,320 --> 00:06:39,670
you'll understand why we're using frameworks. Now, in the next videos,

130
00:06:39,670 --> 00:06:43,760
we'll see how we can extend this into a more complicated service that

131
00:06:43,760 --> 00:06:48,450
leverages things like DynamoDB and the AWS API Gateway service.

132
00:06:48,450 --> 00:06:50,930
So let's see what the results were from our deployment.

133
00:06:50,930 --> 00:06:53,940
I'm going to open up that terminal again, and you'll see that it went

134
00:06:53,940 --> 00:06:57,040
through the entire process of creating our service,

135
00:06:57,040 --> 00:07:01,130
packaging everything up, and setting up our dependencies inside

136
00:07:01,130 --> 00:07:04,410
of a ZIP file that it uploaded to S3 for us.

137
00:07:04,410 --> 00:07:05,470
And if we wanted to find it,

138
00:07:05,470 --> 00:07:09,910
we could actually go back down here and run aws s3 at ls and

139
00:07:09,910 --> 00:07:12,130
see what buckets are created in our account.

140
00:07:12,130 --> 00:07:13,260
You'll see that we have this new

141
00:07:13,260 --> 00:07:17,560
gpc‑api‑dev‑serverlessdeploymentbucket here with some gibberish on

142
00:07:17,560 --> 00:07:18,240
the end.

143
00:07:18,240 --> 00:07:22,020
And that's where our gpc‑api.zip file was deployed to and

144
00:07:22,020 --> 00:07:24,330
then used to create the Lambda function.

145
00:07:24,330 --> 00:07:26,830
We also have this new function called hello,

146
00:07:26,830 --> 00:07:30,590
which is the gpc‑api‑dev‑hello function. Now,

147
00:07:30,590 --> 00:07:31,190
if we wanted to,

148
00:07:31,190 --> 00:07:33,920
we could find all of these resources that we created over in

149
00:07:33,920 --> 00:07:36,670
the AWS Console, but we could also go to the Serverless

150
00:07:36,670 --> 00:07:39,640
Dashboard to review what just happened.

151
00:07:39,640 --> 00:07:41,830
Back in the Serverless Dashboard, we have a deployment

152
00:07:41,830 --> 00:07:43,400
that happened just a few minutes ago.

153
00:07:43,400 --> 00:07:46,190
And if I click into here, we'll be able to see this new service

154
00:07:46,190 --> 00:07:49,260
appearing. Later on, when we have stuff that's actually happening with

155
00:07:49,260 --> 00:07:53,320
our service, we'll be able to see alerts, API requests, and function

156
00:07:53,320 --> 00:07:57,020
invocations, and explore through some of the details of our service and

157
00:07:57,020 --> 00:07:59,190
be able to monitor it more effectively.

158
00:07:59,190 --> 00:08:00,190
But for right now,

159
00:08:00,190 --> 00:08:03,390
we've created and deployed our first service using the

160
00:08:03,390 --> 00:08:09,000
serverless bootstrapping process. In the next videos, we'll continue to iterate on it.

