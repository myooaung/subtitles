WEBVTT
1
00:00:01.350 --> 00:00:05.190
Now that our Lambda function has been created, we should see this view here.

2
00:00:05.190 --> 00:00:08.085
This will allow us to review the configuration for our

3
00:00:08.085 --> 00:00:10.760
Lambda function, also review the permissions that are

4
00:00:10.760 --> 00:00:12.260
assigned to this Lambda function,

5
00:00:12.260 --> 00:00:16.790
currently just to enable it to push logs to Amazon CloudWatch Logs, and we can

6
00:00:16.790 --> 00:00:20.690
also monitor what's happening inside of this Lambda function as it continues to

7
00:00:20.690 --> 00:00:23.240
have invocations that we might trigger it from.

8
00:00:23.240 --> 00:00:27.330
So let's go back up to the top and click the Configuration section first.

9
00:00:27.330 --> 00:00:28.400
Now, as you can see here,

10
00:00:28.400 --> 00:00:31.530
we have a CloudWatch event that's been set up to trigger this

11
00:00:31.530 --> 00:00:35.560
lambda‑canary function, and we don't have any destinations that the

12
00:00:35.560 --> 00:00:37.640
lambda‑canary would send information to,

13
00:00:37.640 --> 00:00:39.240
which will be fine for right now.

14
00:00:39.240 --> 00:00:42.360
So let's go down and take a closer look at some of the function code.

15
00:00:42.360 --> 00:00:45.860
Now, AWS has provided this nice in‑browser editor here for us

16
00:00:45.860 --> 00:00:48.090
to work with our lambda‑canary function.

17
00:00:48.090 --> 00:00:49.220
Now, as you'll see here,

18
00:00:49.220 --> 00:00:52.650
there's a few different configuration values that we're able to change

19
00:00:52.650 --> 00:00:55.630
or reset that'll help us set up our Lambda functions,

20
00:00:55.630 --> 00:00:58.680
and it's important to understand how these work so we can edit

21
00:00:58.680 --> 00:01:00.740
them and work with them in later sections.

22
00:01:00.740 --> 00:01:04.860
Now, the first section here is just how we'd actually like to work with our code.

23
00:01:04.860 --> 00:01:07.430
We could edit the code inline in the console here.

24
00:01:07.430 --> 00:01:10.600
We could also upload a ZIP file from our local environment to replace

25
00:01:10.600 --> 00:01:14.220
all the code here, or maybe select a file from Amazon S3 if we've

26
00:01:14.220 --> 00:01:16.860
already uploaded the code there. In this case,

27
00:01:16.860 --> 00:01:19.690
we'll just leave it to edit the code inline.

28
00:01:19.690 --> 00:01:20.190
Now,

29
00:01:20.190 --> 00:01:22.940
next we have the runtime which we selected as we were creating this

30
00:01:22.940 --> 00:01:25.040
Lambda function just as part of the blueprint,

31
00:01:25.040 --> 00:01:29.160
which is Python 3.7, but if we had wanted to use other supported runtimes,

32
00:01:29.160 --> 00:01:31.800
these will all be available from the drop‑down here.

33
00:01:31.800 --> 00:01:35.610
Finally, there's configuration information regarding the Lambda handler.

34
00:01:35.610 --> 00:01:35.720
Now,

35
00:01:35.720 --> 00:01:39.330
the handler is going to tell our AWS Lambda service where to look for

36
00:01:39.330 --> 00:01:42.000
the code when the event triggers this Lambda function.

37
00:01:42.000 --> 00:01:42.800
In this case,

38
00:01:42.800 --> 00:01:47.940
the very beginning Lambda function will tell us to look for a file called

39
00:01:47.940 --> 00:01:50.770
lambda_function.py in this case because we're working with Python. And then the

40
00:01:50.770 --> 00:01:55.290
Lambda handler, if we scroll down and look at our Lambda function in here, will

41
00:01:55.290 --> 00:02:01.050
be the function inside of that lambda_ function .py file that we need to invoke

42
00:02:01.050 --> 00:02:04.560
whenever the event is coming in. And you'll see this is all set up with the

43
00:02:04.560 --> 00:02:09.500
event in context that will be sent in from the AWS Lambda service to this

44
00:02:09.500 --> 00:02:10.970
function to be processed.

45
00:02:10.970 --> 00:02:11.960
Now, inside of this event,

46
00:02:11.960 --> 00:02:15.570
there could be metadata about what needs to be processed and other details

47
00:02:15.570 --> 00:02:18.930
there, but all this function is actually doing, if we start the very top,

48
00:02:18.930 --> 00:02:23.210
is loading in the environment variables of SITE and EXPECTED in order to

49
00:02:23.210 --> 00:02:27.925
work with those and open up a request against a URL. Now the SITE is going

50
00:02:27.925 --> 00:02:29.440
to be the URL to check,

51
00:02:29.440 --> 00:02:33.500
and the EXPECTED is going to be the string that's expected to be on that page.

52
00:02:33.500 --> 00:02:35.990
So if we don't see the expected string on the page,

53
00:02:35.990 --> 00:02:37.740
we'll end up failing later on.

54
00:02:37.740 --> 00:02:40.230
And that's what this first Python function validate will end

55
00:02:40.230 --> 00:02:42.300
up doing inside of our Lambda handler.

56
00:02:42.300 --> 00:02:43.110
It'll simply say,

57
00:02:43.110 --> 00:02:46.860
if the expected value is inside of whatever result we're returning to

58
00:02:46.860 --> 00:02:49.380
it. Now, inside of the lambda_handler function,

59
00:02:49.380 --> 00:02:52.620
we're actually taking the SITE configuration value from the environment

60
00:02:52.620 --> 00:02:57.400
variables, and then we're making an HTTP request to that site to

61
00:02:57.400 --> 00:03:00.110
determine if the site is currently up and running.

62
00:03:00.110 --> 00:03:01.990
If for some reason it's not successful,

63
00:03:01.990 --> 00:03:04.940
it'll throw an error and say validation failed.

64
00:03:04.940 --> 00:03:08.030
Otherwise, it'll say Check passed, and it won't throw any errors.

65
00:03:08.030 --> 00:03:10.750
This is what we'll be using to determine if the site is currently

66
00:03:10.750 --> 00:03:13.740
running as we expect or if there's any issues with it.

67
00:03:13.740 --> 00:03:16.270
So, in order to configure this function, we'll have to scroll down just a

68
00:03:16.270 --> 00:03:19.310
little bit farther and take a look at the environment variables that are

69
00:03:19.310 --> 00:03:21.560
set up for this function. Now, currently,

70
00:03:21.560 --> 00:03:24.700
the expected text on the website is Online Shopping,

71
00:03:24.700 --> 00:03:27.120
which probably appears on amazon.com's website,

72
00:03:27.120 --> 00:03:30.130
I imagine, but if we wanted to change this to something

73
00:03:30.130 --> 00:03:32.590
like Globomantics Pet Care's website,

74
00:03:32.590 --> 00:03:35.690
we could then change this site value here and change it from

75
00:03:35.690 --> 00:03:38.500
amazon.com to whatever site we'd like.

76
00:03:38.500 --> 00:03:42.270
Now I'd suggest you use your own website here because the sites

77
00:03:42.270 --> 00:03:44.210
that we're checking might not be around forever,

78
00:03:44.210 --> 00:03:46.980
and they might also differ from day to day.

79
00:03:46.980 --> 00:03:51.330
Let's just change this to my blog, fernandomc.com, and instead

80
00:03:51.330 --> 00:03:53.640
of the expected value of Online Shopping,

81
00:03:53.640 --> 00:03:56.070
let's just change this literally to the word Fernando,

82
00:03:56.070 --> 00:03:57.380
which is my first name.

83
00:03:57.380 --> 00:04:00.940
So let's save those function changes that we just made here.

84
00:04:00.940 --> 00:04:03.430
And now that we've made these changes to the function,

85
00:04:03.430 --> 00:04:07.070
it'll be checking my blog instead of the amazon.com website.

86
00:04:07.070 --> 00:04:08.930
You could check any website you'd like.

87
00:04:08.930 --> 00:04:11.540
Just make sure to change the expected text is something that

88
00:04:11.540 --> 00:04:13.680
you are expecting to see on that website.

89
00:04:13.680 --> 00:04:14.300
Then,

90
00:04:14.300 --> 00:04:17.440
if something fails on the page or something drastic changes, we'll

91
00:04:17.440 --> 00:04:20.540
be able to know that the website is down and that that is going to

92
00:04:20.540 --> 00:04:23.300
be responsible for sending us an alert.

93
00:04:23.300 --> 00:04:26.020
Now there's lots of other configuration we could change inside of this

94
00:04:26.020 --> 00:04:29.720
function, everything from setting up arbitrary tags on the function that

95
00:04:29.720 --> 00:04:33.080
might help us keep track of different projects or different initiatives

96
00:04:33.080 --> 00:04:35.440
through the role that we created earlier.

97
00:04:35.440 --> 00:04:39.230
Now, this role was created in the very initial stages for our function,

98
00:04:39.230 --> 00:04:41.550
and if we want to take a closer look at it, we can either view it

99
00:04:41.550 --> 00:04:44.810
here by clicking View the lambda‑canary role with the rest of the

100
00:04:44.810 --> 00:04:47.890
gibberish at the end there and click this, and that'll take us over

101
00:04:47.890 --> 00:04:50.180
to the IAM management console.

102
00:04:50.180 --> 00:04:53.830
Now, inside of the IAM management console, we could look more closely at

103
00:04:53.830 --> 00:04:57.120
the policy names that are associated with this role and actually see

104
00:04:57.120 --> 00:05:01.610
what the JSON inside of this policy is. Now, this is really all just

105
00:05:01.610 --> 00:05:06.280
giving Lambda permissions to send logs over to a particular log group

106
00:05:06.280 --> 00:05:07.940
inside of Amazon CloudWatch.

107
00:05:07.940 --> 00:05:10.900
That's the whole automated process that happened in that first

108
00:05:10.900 --> 00:05:13.030
step when we were creating the function.

109
00:05:13.030 --> 00:05:14.920
So let's go back to the Lambda function here.

110
00:05:14.920 --> 00:05:16.690
In addition to the execution role,

111
00:05:16.690 --> 00:05:20.800
we could set up basic settings on the function ranging from memory to timeout.

112
00:05:20.800 --> 00:05:21.310
For example,

113
00:05:21.310 --> 00:05:25.070
if we don't actually think we want this function to run for a full 10 seconds,

114
00:05:25.070 --> 00:05:28.650
maybe we expected to get a response within 3 seconds, we could go

115
00:05:28.650 --> 00:05:31.930
over here and edit our basic settings and changed the timeout

116
00:05:31.930 --> 00:05:34.790
value from 10 seconds down to 3 seconds.

117
00:05:34.790 --> 00:05:36.510
If we're not getting a response that quickly,

118
00:05:36.510 --> 00:05:38.460
maybe we just want to count this as a failure,

119
00:05:38.460 --> 00:05:40.840
and in this case, we trigger a failure here.

120
00:05:40.840 --> 00:05:41.930
Same thing for the memory.

121
00:05:41.930 --> 00:05:45.540
Maybe we think we need a bit more memory to load the site more rapidly.

122
00:05:45.540 --> 00:05:48.320
We could change that value around in here. Or if we want

123
00:05:48.320 --> 00:05:50.870
to change the description of our function, we can also do

124
00:05:50.870 --> 00:05:52.370
that in these basic settings.

125
00:05:52.370 --> 00:05:54.430
So let's go ahead and save these.

126
00:05:54.430 --> 00:05:57.080
And now that we're on the main page for the Lambda function again,

127
00:05:57.080 --> 00:05:59.480
let's set up a test for this Lambda function.

128
00:05:59.480 --> 00:06:01.810
If I click the Test button here, it'll automatically

129
00:06:01.810 --> 00:06:04.100
direct me to configure a test event.

130
00:06:04.100 --> 00:06:07.290
And because this Lambda function was set up with a CloudWatch event,

131
00:06:07.290 --> 00:06:09.720
it'll have the event template for a CloudWatch event.

132
00:06:09.720 --> 00:06:14.140
So if I scroll down here, let's call this testevent1,

133
00:06:14.140 --> 00:06:17.570
and this is what the actual input to our Lambda function will look like

134
00:06:17.570 --> 00:06:21.050
that comes into the event parameter of our Lambda handler.

135
00:06:21.050 --> 00:06:23.770
Different events will have different structures of the data that's inside of

136
00:06:23.770 --> 00:06:26.400
them, and If you want to review what that data looks like,

137
00:06:26.400 --> 00:06:28.930
you could just review all of the different test events that are

138
00:06:28.930 --> 00:06:33.240
located inside of this test console inside of AWS Lambda. But for

139
00:06:33.240 --> 00:06:35.620
right now, we have the one that we're going to need to test out our

140
00:06:35.620 --> 00:06:38.790
CloudWatch function, so we'll leave all of these details here as they

141
00:06:38.790 --> 00:06:41.470
are and click the Create button.

142
00:06:41.470 --> 00:06:43.730
Now that we have a test event saved and created,

143
00:06:43.730 --> 00:06:45.790
we can actually test our Lambda function by pressing

144
00:06:45.790 --> 00:06:47.700
that Test button one more time.

145
00:06:47.700 --> 00:06:51.000
Now it looks like our Lambda function was successful, so let's go review some of

146
00:06:51.000 --> 00:06:54.180
the logs for it right here and click the Details drop‑down.

147
00:06:54.180 --> 00:06:57.510
Now, if we scroll down for the rest of the logs of the execution result,

148
00:06:57.510 --> 00:07:00.970
it looks like we're successfully checking the website that we input earlier

149
00:07:00.970 --> 00:07:04.410
into that SITE variable, and the check is passed. Now,

150
00:07:04.410 --> 00:07:07.540
if something changed on my website and suddenly my name disappeared,

151
00:07:07.540 --> 00:07:10.270
then this would return a failure. And we could test this by

152
00:07:10.270 --> 00:07:13.640
changing the word of the expected to something completely

153
00:07:13.640 --> 00:07:16.020
different that would never appear on my site.

154
00:07:16.020 --> 00:07:18.760
So let's try that now. Let's scroll back down to the

155
00:07:18.760 --> 00:07:21.620
configuration for this function, and let's change this value

156
00:07:21.620 --> 00:07:25.040
to supercalifragilisticexpialidocious.

157
00:07:25.040 --> 00:07:28.250
Now let's save this function And now that we've saved it,

158
00:07:28.250 --> 00:07:30.090
we can test this one more time.

159
00:07:30.090 --> 00:07:31.000
Now that I've run the test,

160
00:07:31.000 --> 00:07:34.120
I can scroll back up to the top, and it looks like we have a bit of a

161
00:07:34.120 --> 00:07:37.920
different result. Instead of the success that we expected before, now

162
00:07:37.920 --> 00:07:39.950
we're getting a validation failure.

163
00:07:39.950 --> 00:07:43.480
That's because this word doesn't appear anywhere on the home page of my blog.

164
00:07:43.480 --> 00:07:46.390
So now hopefully you understand how you can set these site and

165
00:07:46.390 --> 00:07:49.710
expected values to configure your lambda‑canary function.

166
00:07:49.710 --> 00:07:52.350
Go ahead and scroll down one more time, and change the

167
00:07:52.350 --> 00:07:55.210
expected and site values to a website that you would actually

168
00:07:55.210 --> 00:07:57.140
expect to have some text on there.

169
00:07:57.140 --> 00:07:59.020
I'm going to change this back to Fernando for the time

170
00:07:59.020 --> 00:08:01.410
being and save the site one more time.

171
00:08:01.410 --> 00:08:03.170
So once we've done this and we're feeling like our

172
00:08:03.170 --> 00:08:04.940
function is configured properly,

173
00:08:04.940 --> 00:08:08.840
then we can go back up to the top and configure our event to execute now,

174
00:08:08.840 --> 00:08:10.330
instead of just being disabled.

175
00:08:10.330 --> 00:08:13.410
So I'm going to click on the Configuration section. Underneath the

176
00:08:13.410 --> 00:08:16.390
Designer section, I'll make sure I click on CloudWatch Events, and then

177
00:08:16.390 --> 00:08:19.520
I'll scroll down a little bit and change this CloudWatch Events rule

178
00:08:19.520 --> 00:08:22.180
from Disabled to Enabled. And again,

179
00:08:22.180 --> 00:08:25.550
I'll save the function so that this will be triggering every 5 minutes.

180
00:08:25.550 --> 00:08:27.190
Now, if I waited 5 or 10 minutes,

181
00:08:27.190 --> 00:08:30.310
we'd see that this canary function had run a few more times.

182
00:08:30.310 --> 00:08:32.750
If you want to be able to review that and see how

183
00:08:32.750 --> 00:08:34.220
it's running and when it's running,

184
00:08:34.220 --> 00:08:36.760
you can always scroll back up to the top section, and instead of

185
00:08:36.760 --> 00:08:40.100
Configuration or Permissions, you can click on Monitoring. Now,

186
00:08:40.100 --> 00:08:42.710
because you've already seen that I've run this function twice, there

187
00:08:42.710 --> 00:08:46.510
is currently a dot next to the 2 part of the Invocations and

188
00:08:46.510 --> 00:08:48.530
ProvisionedConcurrency section here.

189
00:08:48.530 --> 00:08:51.410
That means that my function has run twice since I've created it.

190
00:08:51.410 --> 00:08:51.580
Now,

191
00:08:51.580 --> 00:08:54.030
if our function continues to run over and over again

192
00:08:54.030 --> 00:08:55.660
over different periods of time,

193
00:08:55.660 --> 00:08:58.850
these charts would start to become a bit more informative.

194
00:08:58.850 --> 00:09:01.290
If we wanted to see these logs directly in CloudWatch,

195
00:09:01.290 --> 00:09:04.740
we could then scroll over to the View logs in CloudWatch button, and that

196
00:09:04.740 --> 00:09:07.810
would direct us over to another AWS service called CloudWatch,

197
00:09:07.810 --> 00:09:10.770
which stores all the logs for our Lambda functions.

198
00:09:10.770 --> 00:09:12.500
Now, you're seeing right here that it looks like we

199
00:09:12.500 --> 00:09:14.470
have a few different log streams,

200
00:09:14.470 --> 00:09:16.930
and they're all pretty close together, definitely around the

201
00:09:16.930 --> 00:09:18.950
time that I was invoking these functions,

202
00:09:18.950 --> 00:09:21.300
and it looks like probably one additional invocation

203
00:09:21.300 --> 00:09:26.000
that happened while I was talking. So let's take a closer look at these logs in the next video.

