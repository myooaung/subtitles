WEBVTT
1
00:00:01.110 --> 00:00:04.570
So now that we know why we're working with the Serverless Framework,

2
00:00:04.570 --> 00:00:06.440
let's dive into it a little more.

3
00:00:06.440 --> 00:00:06.910
First,

4
00:00:06.910 --> 00:00:09.580
I want to really quickly differentiate between the

5
00:00:09.580 --> 00:00:12.770
Serverless Framework and serverless frameworks.

6
00:00:12.770 --> 00:00:15.620
The Serverless Framework is a specific open source

7
00:00:15.620 --> 00:00:19.410
framework from the folks at serverless.com, and

8
00:00:19.410 --> 00:00:20.920
disclaimer, as of the making of this course,

9
00:00:20.920 --> 00:00:22.550
I am currently employed there,

10
00:00:22.550 --> 00:00:25.200
so definitely be sure to take that as a grain of salt when

11
00:00:25.200 --> 00:00:27.440
you're considering which frameworks to use.

12
00:00:27.440 --> 00:00:30.150
There's also the serverless frameworks,

13
00:00:30.150 --> 00:00:33.780
which are many other frameworks that focus on the Functions

14
00:00:33.780 --> 00:00:36.400
as a Service, or serverless paradigm.

15
00:00:36.400 --> 00:00:38.520
Now there's plenty of other options to choose from,

16
00:00:38.520 --> 00:00:40.700
so don't take my word for it and go play around with

17
00:00:40.700 --> 00:00:42.740
them before you make your decision.

18
00:00:42.740 --> 00:00:45.190
Let's look at some of the benefits of the Serverless

19
00:00:45.190 --> 00:00:47.840
Framework. Now I mentioned some of these before,

20
00:00:47.840 --> 00:00:51.490
including the standard project structure and some of the ease that you

21
00:00:51.490 --> 00:00:55.050
might be able to use in deploying and packaging up your functions. With

22
00:00:55.050 --> 00:00:57.430
the Serverless Framework though, you're also going to get a bunch of

23
00:00:57.430 --> 00:01:01.320
plugins and examples for doing common use cases that you might have with

24
00:01:01.320 --> 00:01:03.140
serverless application development.

25
00:01:03.140 --> 00:01:05.570
There's also the Serverless Dashboard.

26
00:01:05.570 --> 00:01:06.900
Now with the Serverless Dashboard,

27
00:01:06.900 --> 00:01:10.510
you'll be able to integrate monitoring and tooling that doesn't come out of

28
00:01:10.510 --> 00:01:14.470
the box from AWS. Now there's a few different configuration options when

29
00:01:14.470 --> 00:01:18.980
working with the Serverless Framework. You can use local AWS access keys,

30
00:01:18.980 --> 00:01:21.180
like the ones we set up with the AWS CLI,

31
00:01:21.180 --> 00:01:24.710
or you can integrate with the Serverless Dashboard to deploy through the

32
00:01:24.710 --> 00:01:30.060
dashboard to AWS. With local AWS access keys, we have our laptop and

33
00:01:30.060 --> 00:01:34.220
these AWS access keys that live on them that then authenticate our API

34
00:01:34.220 --> 00:01:39.470
requests through the AWS SDKs or the CLI into the AWS cloud. With the

35
00:01:39.470 --> 00:01:41.100
Serverless Dashboard, however,

36
00:01:41.100 --> 00:01:45.430
we'd use our laptop and then a key to the Serverless Dashboard that

37
00:01:45.430 --> 00:01:49.075
then runs through the Serverless Dashboard and an AWS access role that

38
00:01:49.075 --> 00:01:55.060
we configure with our AWS account to the deployments to AWS. So, how

39
00:01:55.060 --> 00:01:58.260
can we go about using the Serverless Framework and what benefits is it

40
00:01:58.260 --> 00:01:59.330
going to offer us?

41
00:01:59.330 --> 00:01:59.480
Well,

42
00:01:59.480 --> 00:02:03.215
we'll do our local development on our machine like we normally would, except

43
00:02:03.215 --> 00:02:07.290
we'll have a serverless.yml file and the Serverless Framework dependency

44
00:02:07.290 --> 00:02:11.140
installed on our machines. Then we'll write the code for our Lambda functions

45
00:02:11.140 --> 00:02:13.540
and also manage the dependencies locally.

46
00:02:13.540 --> 00:02:18.540
But the framework will help us take all of this and deploy it into the AWS

47
00:02:18.540 --> 00:02:22.060
cloud. By running the serverless deploy command, we'll be able to ship

48
00:02:22.060 --> 00:02:26.630
everything over to AWS and create different events, like API Gateway

49
00:02:26.630 --> 00:02:30.170
events, to trigger our Lambda functions or CloudWatch events similar to the

50
00:02:30.170 --> 00:02:31.930
ones we were creating earlier.

51
00:02:31.930 --> 00:02:36.090
Then, we'll have those Lambda functions created inside of AWS, and

52
00:02:36.090 --> 00:02:38.200
if there's any other resources that we require,

53
00:02:38.200 --> 00:02:42.290
like DynamoDB tables or SQS queues, we could create those

54
00:02:42.290 --> 00:02:45.740
using the serverless.yml file, and have them also created for

55
00:02:45.740 --> 00:02:47.440
us with serverless deploy. Now,

56
00:02:47.440 --> 00:02:54.000
maybe this sounds a little too good to be true, so in the next video, let's take a look at the demo and dive right into it.

