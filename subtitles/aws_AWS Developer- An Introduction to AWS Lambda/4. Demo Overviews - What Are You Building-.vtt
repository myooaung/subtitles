WEBVTT
1
00:00:01.130 --> 00:00:04.380
Now that you're more familiar with the concept of serverless functions,

2
00:00:04.380 --> 00:00:07.240
let's jump into the demos we'll be working with in the course.

3
00:00:07.240 --> 00:00:10.770
We'll start by introducing an imaginary business client that we'll be building

4
00:00:10.770 --> 00:00:13.680
everything for while we work through different projects.

5
00:00:13.680 --> 00:00:16.820
And then we'll take a closer look at each of the individual projects,

6
00:00:16.820 --> 00:00:20.140
how they'll function, and how we'll be building them.

7
00:00:20.140 --> 00:00:25.010
Our demo client will be Globomantics Pet Care. Globomantics has a few different

8
00:00:25.010 --> 00:00:27.570
technical needs that they have asked us to provide for them.

9
00:00:27.570 --> 00:00:28.560
Specifically,

10
00:00:28.560 --> 00:00:31.680
they've asked us to create a website monitoring system for their

11
00:00:31.680 --> 00:00:34.670
website that will notify them of any issues and make sure to

12
00:00:34.670 --> 00:00:37.780
maintain high availability for their customers.

13
00:00:37.780 --> 00:00:41.270
They'd also like to have some social media automation to regularly

14
00:00:41.270 --> 00:00:44.410
remind customers about their services and policies.

15
00:00:44.410 --> 00:00:47.380
They'd also like to be able to set up custom reminders for their

16
00:00:47.380 --> 00:00:51.140
employees and their customers in order to make sure that they know

17
00:00:51.140 --> 00:00:54.430
the latest information about the business and, for their customers,

18
00:00:54.430 --> 00:00:56.510
new specials that they have running.

19
00:00:56.510 --> 00:00:57.210
Finally,

20
00:00:57.210 --> 00:01:01.170
we'll be looking at building a customer service for them to help manage the

21
00:01:01.170 --> 00:01:05.170
information about their customers in real time as they get new customers

22
00:01:05.170 --> 00:01:08.090
and notify administrators about those changes.

23
00:01:08.090 --> 00:01:11.330
So let's take a look at some of these projects in more detail.

24
00:01:11.330 --> 00:01:14.450
The first one will be based on simple scheduled events.

25
00:01:14.450 --> 00:01:17.080
We'll regularly check the website in order to make sure if

26
00:01:17.080 --> 00:01:19.770
it's up or down, and then if it's failing, we'll notify the

27
00:01:19.770 --> 00:01:22.040
administrator related to the website.

28
00:01:22.040 --> 00:01:22.820
After that,

29
00:01:22.820 --> 00:01:25.650
we'll look at how we can integrate third‑party APIs and

30
00:01:25.650 --> 00:01:29.620
securely manage API keys, like Twitter's API keys, and

31
00:01:29.620 --> 00:01:31.580
integrate that with AWS Lambda.

32
00:01:31.580 --> 00:01:32.320
From there,

33
00:01:32.320 --> 00:01:36.190
we'll look at how we can use some business logic and Amazon's Simple Email

34
00:01:36.190 --> 00:01:41.370
Service, SES, to send email reminders to those employees and those customers.

35
00:01:41.370 --> 00:01:46.035
And finally, we'll build a full‑fledged serverless service to help the

36
00:01:46.035 --> 00:01:49.290
Globomantics Pet Care company managed their customers,

37
00:01:49.290 --> 00:01:51.950
and we'll do this with the Serverless Framework.

38
00:01:51.950 --> 00:01:55.060
We'll also talk about what the Serverless Framework is and some

39
00:01:55.060 --> 00:01:58.740
other serverless frameworks in later sections.

40
00:01:58.740 --> 00:02:01.550
Now, each of our projects in this course will be in Python,

41
00:02:01.550 --> 00:02:03.840
but you can also mimic the same functionality in the

42
00:02:03.840 --> 00:02:05.890
other supported Lambda runtimes.

43
00:02:05.890 --> 00:02:08.370
So let's take a closer look at each of these individual

44
00:02:08.370 --> 00:02:12.010
projects and how they'll work. Our first project will call

45
00:02:12.010 --> 00:02:13.880
a Lambda canary. We'll be using.

46
00:02:13.880 --> 00:02:18.700
AWS' built‑in rate scheduler to trigger our function on a regular basis.

47
00:02:18.700 --> 00:02:22.940
We'll set up the project to run every 5 minutes. When the trigger is invoked,

48
00:02:22.940 --> 00:02:27.580
our Lambda function will then go review the website and make sure to see its

49
00:02:27.580 --> 00:02:30.090
up and functioning and working properly.

50
00:02:30.090 --> 00:02:31.880
If something fails in the function,

51
00:02:31.880 --> 00:02:34.300
that means that the website was probably down.

52
00:02:34.300 --> 00:02:37.200
If something succeeds, that means we're probably good to go.

53
00:02:37.200 --> 00:02:39.420
And when the Lambda function succeeds or fails,

54
00:02:39.420 --> 00:02:42.890
all of that will be recorded inside CloudWatch Logs.

55
00:02:42.890 --> 00:02:45.350
Now, if we see any errors with our Lambda functions,

56
00:02:45.350 --> 00:02:49.900
we'll use CloudWatch Alarms to trigger an alert to be notified about the

57
00:02:49.900 --> 00:02:54.185
website being out of service. After we finish our Lambda canary project,

58
00:02:54.185 --> 00:02:57.900
we'll move on to working on a Twitter bot. This Twitter bot will be on a

59
00:02:57.900 --> 00:03:02.150
simpler regular scheduled event, which will happen about every hour.

60
00:03:02.150 --> 00:03:04.540
This will allow us to make sure we tweet on a regular

61
00:03:04.540 --> 00:03:06.940
basis for Globomantics Pet Care.

62
00:03:06.940 --> 00:03:10.870
This will run our code and then also have access to the Twitter API

63
00:03:10.870 --> 00:03:13.540
keys that we'll be setting up as part of this project.

64
00:03:13.540 --> 00:03:18.490
These API keys will be used in order to tweet to the Twitter API. However,

65
00:03:18.490 --> 00:03:21.290
because we don't want to hit Twitter spam limitations,

66
00:03:21.290 --> 00:03:24.530
and we don't want to look too spammy in general for our social media,

67
00:03:24.530 --> 00:03:28.070
we're going to need to randomize our tweets with Python and then send out

68
00:03:28.070 --> 00:03:31.020
those different automated tweets to the API.

69
00:03:31.020 --> 00:03:34.110
Now we'll be handling all of this through a few built‑in libraries

70
00:03:34.110 --> 00:03:37.180
and tools that I'll be showing you in this project.

71
00:03:37.180 --> 00:03:37.350
Now,

72
00:03:37.350 --> 00:03:41.550
after we finish that Twitter project, we'll look at workflow automation. Again,

73
00:03:41.550 --> 00:03:45.590
we'll be using a scheduled event trigger at particular times of day in

74
00:03:45.590 --> 00:03:49.990
order to run some business logic and determine if it is morning right now

75
00:03:49.990 --> 00:03:54.430
and we need to remind our employees to get on the road to work or if it's

76
00:03:54.430 --> 00:03:57.450
the middle of the day and we need to tell them what work task they

77
00:03:57.450 --> 00:04:00.700
actually have assigned to them, maybe like going and emptying out the

78
00:04:00.700 --> 00:04:02.240
cats' litter boxes.

79
00:04:02.240 --> 00:04:03.040
After that,

80
00:04:03.040 --> 00:04:06.510
we'll make sure to remind our customers to come and pick up their

81
00:04:06.510 --> 00:04:10.120
pets so that no poor rabbits get left behind.

82
00:04:10.120 --> 00:04:12.960
Now, once our workflow automation project has been finished,

83
00:04:12.960 --> 00:04:16.580
we'll also be looking at creating a new customer service for

84
00:04:16.580 --> 00:04:20.010
Globomantics. It'll start with an API request.

85
00:04:20.010 --> 00:04:23.040
Now, this will come in through the AWS API Gateway,

86
00:04:23.040 --> 00:04:27.070
and we'll also use the Lambda function behind it to process that

87
00:04:27.070 --> 00:04:30.940
incoming request, validate it to make sure it looks appropriate,

88
00:04:30.940 --> 00:04:33.480
and then send it over into DynamoDB,

89
00:04:33.480 --> 00:04:36.860
a backing database service that we'll be using. Now, we'll integrate

90
00:04:36.860 --> 00:04:39.890
a bunch of bundled libraries in with our Lambda function package to

91
00:04:39.890 --> 00:04:41.600
help make all of this a lot easier.

92
00:04:41.600 --> 00:04:45.030
And whenever we get a new customer in this customer service,

93
00:04:45.030 --> 00:04:47.840
it'll send an email to it administrator to notify them

94
00:04:47.840 --> 00:04:49.590
that a new customer has been added.

95
00:04:49.590 --> 00:04:52.710
Now we could integrate this HTTP API anywhere,

96
00:04:52.710 --> 00:04:56.000
and we could use it in front‑end applications or other back‑end

97
00:04:56.000 --> 00:04:59.510
services. One important thing to note about this project is that we'll

98
00:04:59.510 --> 00:05:02.710
be managing it all with something called the Serverless Framework and

99
00:05:02.710 --> 00:05:06.100
helping us build all of these infrastructure components pretty easily

100
00:05:06.100 --> 00:05:07.650
in some configuration.

101
00:05:07.650 --> 00:05:10.320
So definitely check out this project as it's one of the new

102
00:05:10.320 --> 00:05:13.490
ones I've added to this course more recently. So that brings

103
00:05:13.490 --> 00:05:15.650
us to the end of our first module.

104
00:05:15.650 --> 00:05:18.670
Let's take a look at what we've covered. So far, you've learned about

105
00:05:18.670 --> 00:05:22.190
the computing context around serverless functions and the benefits that

106
00:05:22.190 --> 00:05:24.740
they offer over traditional architectures,

107
00:05:24.740 --> 00:05:27.940
as well as the difficulties you might face while grappling with them.

108
00:05:27.940 --> 00:05:31.125
You're also of a bit more of an informed consumer when it comes to

109
00:05:31.125 --> 00:05:34.630
serverless function providers and can make informed decisions to

110
00:05:34.630 --> 00:05:37.630
know what to look for in those providers.

111
00:05:37.630 --> 00:05:40.930
You also understand what's going on in the current landscape with

112
00:05:40.930 --> 00:05:45.140
serverless functions and when or when not to use serverless.

113
00:05:45.140 --> 00:05:48.540
You also now understand what we'll be building throughout this course,

114
00:05:48.540 --> 00:05:52.230
so I hope you're excited to dive right in. In the next module, we'll be

115
00:05:52.230 --> 00:06:00.000
getting situated with all of the AWS prerequisites we need in order to create our own Lambda functions, so let's get to it.

