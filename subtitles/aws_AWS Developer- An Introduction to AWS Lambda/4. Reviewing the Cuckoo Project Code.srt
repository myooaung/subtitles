1
00:00:01,340 --> 00:00:05,050
Back in my VS Code editor, I've opened up cuckoo.py.

2
00:00:05,050 --> 00:00:07,585
Let's look at everything inside of this to make sure we know how it works.

3
00:00:07,585 --> 00:00:10,950
At the very top, we're using in the datetime library.

4
00:00:10,950 --> 00:00:11,070
Now,

5
00:00:11,070 --> 00:00:14,310
this will be used to check what day of the week it is and send a

6
00:00:14,310 --> 00:00:17,010
different email out based on the day of the week.

7
00:00:17,010 --> 00:00:22,240
Then we'll use the boto3 library later in this section to send emails through

8
00:00:22,240 --> 00:00:26,740
the SES, or the Simple Email Service, client, as well as getting objects from

9
00:00:26,740 --> 00:00:30,340
S3, and we'll create a separate client for that.

10
00:00:30,340 --> 00:00:30,730
Next,

11
00:00:30,730 --> 00:00:35,400
we'll be using Jinja2 and the template that we import from it to load HTML

12
00:00:35,400 --> 00:00:40,040
templates that we get from S3 and send them out through SES.

13
00:00:40,040 --> 00:00:40,840
Now, in this file,

14
00:00:40,840 --> 00:00:43,930
there are a few things you need to change, and those things start

15
00:00:43,930 --> 00:00:46,980
around line 5, after all of these comments.

16
00:00:46,980 --> 00:00:50,230
So here you'll see the FROM and REPLY_TO_ADDRESS. Make sure

17
00:00:50,230 --> 00:00:52,520
that you've already changed these to the address that

18
00:00:52,520 --> 00:00:54,950
you've already verified in SES.

19
00:00:54,950 --> 00:00:57,640
You'll also need a few different email addresses that

20
00:00:57,640 --> 00:01:00,040
you have here next to the email.

21
00:01:00,040 --> 00:01:02,730
Now, make sure this email is also verified, as well

22
00:01:02,730 --> 00:01:04,640
as the one for the employees.

23
00:01:04,640 --> 00:01:07,700
From there, you'll be able to change the S3 bucket that

24
00:01:07,700 --> 00:01:09,560
you're using to store your templates.

25
00:01:09,560 --> 00:01:12,800
So whatever the name the S3 bucket is, update that as well.

26
00:01:12,800 --> 00:01:15,000
And that should be the last thing that you need to change in

27
00:01:15,000 --> 00:01:18,910
cuckoo.py. Everything else should be provided for you to work

28
00:01:18,910 --> 00:01:21,740
properly, as long as you follow the previous steps.

29
00:01:21,740 --> 00:01:23,510
But let's review what it does anyway.

30
00:01:23,510 --> 00:01:26,860
There's a few different functions in here that each have their own purpose.

31
00:01:26,860 --> 00:01:29,640
The first is the get_template_from_s3 function.

32
00:01:29,640 --> 00:01:31,950
This is going to take a key, in this case,

33
00:01:31,950 --> 00:01:35,270
the name of a template that's stored inside of S3. And it's

34
00:01:35,270 --> 00:01:38,460
going to go out and get that template and then return it to

35
00:01:38,460 --> 00:01:40,340
whatever is calling this function.

36
00:01:40,340 --> 00:01:43,640
Now, it'll do this because we need to use these templates when we're

37
00:01:43,640 --> 00:01:46,770
sending emails out to S3. In addition to this function,

38
00:01:46,770 --> 00:01:50,290
if I scroll down further, we have this render_come_to_work_template.

39
00:01:50,290 --> 00:01:53,910
Now, this will take a first name of our employee, so we can say something like,

40
00:01:53,910 --> 00:01:54,980
Hello, Homer,

41
00:01:54,980 --> 00:01:57,870
Please remember to come to work, instead of having a more boring

42
00:01:57,870 --> 00:02:01,520
template. Now we'll get this template from the come_to_work.html

43
00:02:01,520 --> 00:02:04,340
file in the AWS bucket we just created.

44
00:02:04,340 --> 00:02:08,830
We'll also use this to return an HTML email in a plain text email.

45
00:02:08,830 --> 00:02:11,560
The plain text email essentially is a more boring version of

46
00:02:11,560 --> 00:02:14,720
the email we might send out that is rendered with pictures

47
00:02:14,720 --> 00:02:16,520
and styles and everything else.

48
00:02:16,520 --> 00:02:18,640
Now, if you wanted to review these templates,

49
00:02:18,640 --> 00:02:21,240
you could go into the templates folder and look at

50
00:02:21,240 --> 00:02:23,090
something like that come_to_work template.

51
00:02:23,090 --> 00:02:27,150
It's a bunch of HTML that has a bunch of CSS styling in here, and

52
00:02:27,150 --> 00:02:30,580
then towards the middle of the actual files will start to show you

53
00:02:30,580 --> 00:02:33,680
what the actual content is. Now, it takes quite a while to get

54
00:02:33,680 --> 00:02:36,890
through that CSS, so don't be surprised if you have to dive through

55
00:02:36,890 --> 00:02:38,910
it. Feel free to update these.

56
00:02:38,910 --> 00:02:41,140
Just keep in mind that inside of these templates,

57
00:02:41,140 --> 00:02:44,290
there'll be things like this first_name property right here on

58
00:02:44,290 --> 00:02:48,900
line 169. Now that's going to load in the first name, like Homer,

59
00:02:48,900 --> 00:02:51,630
so that we can customize that email, and you'll see those

60
00:02:51,630 --> 00:02:53,630
throughout the different templates.

61
00:02:53,630 --> 00:02:53,760
Now,

62
00:02:53,760 --> 00:02:56,750
I'm not going to make you review these templates because they're HTML code

63
00:02:56,750 --> 00:03:00,800
that we don't need to work with too much, so I'll close this back out. Now,

64
00:03:00,800 --> 00:03:03,200
in addition to the render_come_to_work_template,

65
00:03:03,200 --> 00:03:07,650
there's also two other render functions, the render_daily_tasks_template,

66
00:03:07,650 --> 00:03:11,560
which will set up daily tasks based on the day of the week.

67
00:03:11,560 --> 00:03:13,930
Now, you'll see there's these different tasks that

68
00:03:13,930 --> 00:03:15,670
differ depending on the day of the week.

69
00:03:15,670 --> 00:03:18,310
For example, on Mondays, we have to clean the dog areas,

70
00:03:18,310 --> 00:03:21,000
and on Thursdays we have to clean the dog areas again,

71
00:03:21,000 --> 00:03:24,220
but on the other days of the week, we have different tasks,

72
00:03:24,220 --> 00:03:27,410
so we'll use that depending on the day of the week using the

73
00:03:27,410 --> 00:03:30,450
datetime library that we imported earlier to determine which

74
00:03:30,450 --> 00:03:32,640
task we need to send out today.

75
00:03:32,640 --> 00:03:35,130
This function will also render a plain text email,

76
00:03:35,130 --> 00:03:37,780
which will be quite a bit more boring than the HTML email that

77
00:03:37,780 --> 00:03:40,280
we have access to in the templates folder.

78
00:03:40,280 --> 00:03:41,110
After this,

79
00:03:41,110 --> 00:03:45,430
it'll just return both the HTML and the plain text email. The last template

80
00:03:45,430 --> 00:03:48,070
will that we have here is called render_pickup_template,

81
00:03:48,070 --> 00:03:50,780
and it's going to be a reminder to our clients to come pick

82
00:03:50,780 --> 00:03:54,100
up their pets, so we'll pass in the first name of the client

83
00:03:54,100 --> 00:03:56,120
and also the name of the pet.

84
00:03:56,120 --> 00:03:59,720
Later on, we have the send_email function, which will take an HTML email,

85
00:03:59,720 --> 00:04:03,070
a plain text email, a subject, and if we scroll to the right,

86
00:04:03,070 --> 00:04:07,610
some recipients to send the email to. Now, inside of this, we'll be using the

87
00:04:07,610 --> 00:04:12,980
boto3 library to create an SES, or Simple Email Service, client, and then we'll

88
00:04:12,980 --> 00:04:16,240
be using the send_email method from that client.

89
00:04:16,240 --> 00:04:18,435
Now it's going to take a bunch of information, like the

90
00:04:18,435 --> 00:04:21,580
FROM_ADDRESS and the other properties we defined earlier, to

91
00:04:21,580 --> 00:04:23,600
determine who the email is coming from,

92
00:04:23,600 --> 00:04:27,720
who it's going to, and the types of emails that we're sending out,

93
00:04:27,720 --> 00:04:31,280
ranging from the plain text email to the HTML email that

94
00:04:31,280 --> 00:04:33,310
we were rendering with those templates.

95
00:04:33,310 --> 00:04:34,420
Now, finally,

96
00:04:34,420 --> 00:04:36,610
the last bit of functionality towards the bottom is

97
00:04:36,610 --> 00:04:38,640
in the handler function here.

98
00:04:38,640 --> 00:04:42,330
In this case, we're going to do something with the event data that comes in.

99
00:04:42,330 --> 00:04:46,430
We'll create this event_trigger variable from the event resources and

100
00:04:46,430 --> 00:04:49,930
the first thing in the event resources, and then we'll say that the

101
00:04:49,930 --> 00:04:52,280
event has been triggered by this trigger.

102
00:04:52,280 --> 00:04:56,540
Now, inside of that event trigger, we'll be searching for a different name.

103
00:04:56,540 --> 00:04:58,810
So later, when we create these event triggers,

104
00:04:58,810 --> 00:05:02,240
we'll need to make sure that we name them with either come_to_work,

105
00:05:02,240 --> 00:05:05,940
daily_tasks, or, as the third option, pickup,

106
00:05:05,940 --> 00:05:09,410
because we'll be searching for the name inside of these CloudWatch triggers in

107
00:05:09,410 --> 00:05:12,700
order to determine which sort of email we're sending out.

108
00:05:12,700 --> 00:05:15,010
If we see come_to_work inside of the event_trigger,

109
00:05:15,010 --> 00:05:19,510
for example, we'll be sending out a reminder to our employees to come to work.

110
00:05:19,510 --> 00:05:22,710
Or if we see daily_tasks in the event_trigger, we'll send a reminder

111
00:05:22,710 --> 00:05:25,960
to our employees to get the tasks done for the day.

112
00:05:25,960 --> 00:05:28,210
Finally, there's that last option of pickup,

113
00:05:28,210 --> 00:05:30,410
which will send an email out to our clients

114
00:05:30,410 --> 00:05:32,610
reminding them to pick up their pets.

115
00:05:32,610 --> 00:05:35,530
So this is everything that happens in cuckoo.py.

116
00:05:35,530 --> 00:05:38,740
Next, let's create our Identity and Access Management role so

117
00:05:38,740 --> 00:05:46,000
that this cuckoo.py function will have the permissions that it needs to act on different AWS resources.

