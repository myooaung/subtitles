WEBVTT
1
00:00:00.940 --> 00:00:04.370
When you learned about repeated and parameterized tests,

2
00:00:04.370 --> 00:00:09.610
you saw how JUnit can inject some types of parameters at runtime,

3
00:00:09.610 --> 00:00:14.670
like test information parameters of type RepetitionInfo,

4
00:00:14.670 --> 00:00:18.040
TestInfo, and TestReporter.

5
00:00:18.040 --> 00:00:22.700
You may also remember that JUnit uses extension classes that

6
00:00:22.700 --> 00:00:27.530
implement the interface ParameterResolver to inject those types of

7
00:00:27.530 --> 00:00:31.840
parameters like RepetitionInfoParameterResolver,

8
00:00:31.840 --> 00:00:37.840
TestInfoParameterResolver, and TestReporterParameterResolver.

9
00:00:37.840 --> 00:00:40.790
Here you can see the methods of the ParameterResolver

10
00:00:40.790 --> 00:00:43.440
interface you have to implement.

11
00:00:43.440 --> 00:00:48.560
SupportsParameter must return true if the extension class can

12
00:00:48.560 --> 00:00:53.540
handle the parameter given a context object with information

13
00:00:53.540 --> 00:00:57.990
about the parameter and the context in which the extension is

14
00:00:57.990 --> 00:01:01.050
executed and ResolveParameter,

15
00:01:01.050 --> 00:01:05.600
which is only called if supports parameter returns through for

16
00:01:05.600 --> 00:01:08.140
the same parameter and extension context,

17
00:01:08.140 --> 00:01:13.840
returning an instance of the parameter to be injected to the test method.

18
00:01:13.840 --> 00:01:17.490
You can use ParameterResolver extensions in methods

19
00:01:17.490 --> 00:01:23.200
annotated with Test and TestFactory, lifecycle methods annotated,

20
00:01:23.200 --> 00:01:29.340
for example, with BeforeEach and AfterEach, and class constructors.

21
00:01:29.340 --> 00:01:35.740
So let me show you how to create an extension that implements ParameterResolver.

22
00:01:35.740 --> 00:01:41.370
Here's the test class I used in the previous clip, but only with the

23
00:01:41.370 --> 00:01:46.140
BeforeEach method and without the lifecycle extension.

24
00:01:46.140 --> 00:01:51.740
Now let's say that instead of having the RewardService as an instance variable,

25
00:01:51.740 --> 00:02:01.340
I want to have it as a parameter of each test method, like this and this.

26
00:02:01.340 --> 00:02:05.280
Now, as each method is going to receive a new instance,

27
00:02:05.280 --> 00:02:11.930
I'm going to delete the setUp method and the instance variable. If I run

28
00:02:11.930 --> 00:02:17.840
the test as it is right now, an exception will be thrown,

29
00:02:17.840 --> 00:02:22.920
ParameterResolutionException: No ParameterResolver registered

30
00:02:22.920 --> 00:02:27.340
for parameter RewardByConversionService.

31
00:02:27.340 --> 00:02:29.840
All right, let's fix this.

32
00:02:29.840 --> 00:02:37.240
I'm going to create a new class, RewardByConversionParameterResolver.

33
00:02:37.240 --> 00:02:41.780
This class is going to implement ParameterResolver. And

34
00:02:41.780 --> 00:02:45.440
here are the methods I need to overwrite.

35
00:02:45.440 --> 00:02:52.270
Let me just paste the import statements. Now in supportsParameter, I

36
00:02:52.270 --> 00:02:55.710
need to check if the type of the parameter is

37
00:02:55.710 --> 00:03:02.830
RewardByConversionService. So return, and from the parameterContext,

38
00:03:02.830 --> 00:03:09.990
I'm going to get the parameter. And I'm going to check if its type is

39
00:03:09.990 --> 00:03:14.840
equal to the RewardByConversionService class.

40
00:03:14.840 --> 00:03:17.740
Now in the resolveParameter method,

41
00:03:17.740 --> 00:03:20.700
I'm going to create a new instance of the

42
00:03:20.700 --> 00:03:25.720
RewardByConversionService class, set its properties to some

43
00:03:25.720 --> 00:03:30.240
values that we'll use as default values for the tests.

44
00:03:30.240 --> 00:03:36.340
This way, each method will receive a new instance every time it's executed.

45
00:03:36.340 --> 00:03:40.560
You may be wondering, can we create just one instance and

46
00:03:40.560 --> 00:03:43.440
use it for all the methods of the class?

47
00:03:43.440 --> 00:03:47.340
Yes we can, but let's not get ahead of ourselves.

48
00:03:47.340 --> 00:03:52.420
You'll see how to do something similar in a few clips. For now, the

49
00:03:52.420 --> 00:03:56.740
only thing we're missing is to register the extension.

50
00:03:56.740 --> 00:04:02.340
We can do this programmatically by adding a field for the extension

51
00:04:02.340 --> 00:04:06.740
and annotating this field with RegisterExtension.

52
00:04:06.740 --> 00:04:09.640
The field must not be private.

53
00:04:09.640 --> 00:04:12.050
But if the field is static,

54
00:04:12.050 --> 00:04:15.560
the extension will be registered after extensions

55
00:04:15.560 --> 00:04:20.040
registered at the class level with ExtendWith.

56
00:04:20.040 --> 00:04:22.150
If it's an instance field,

57
00:04:22.150 --> 00:04:26.010
the extension will be registered after the Test class has

58
00:04:26.010 --> 00:04:30.410
been instantiated and after each registered test instance

59
00:04:30.410 --> 00:04:32.640
post processor extension.

60
00:04:32.640 --> 00:04:37.660
Besides, if the Test class has a PER_CLASS lifecycle, the instance

61
00:04:37.660 --> 00:04:42.490
extension will be registered before extensions that are registered

62
00:04:42.490 --> 00:04:45.840
at the method level with ExtendWith.

63
00:04:45.840 --> 00:04:50.440
Otherwise, it will be registered after those extensions.

64
00:04:50.440 --> 00:04:55.340
For this example, it doesn't matter if the field is static or not.

65
00:04:55.340 --> 00:04:58.140
So if I run the class,

66
00:04:58.140 --> 00:05:04.000
you'll see that the RewardService was injected because everything is working fine.

