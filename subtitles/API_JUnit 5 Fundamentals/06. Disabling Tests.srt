1
00:00:00,940 --> 00:00:05,850
Sometimes you'll want to disable a test method or a whole test class,

2
00:00:05,850 --> 00:00:10,410
maybe because someone forgot to commit something or maybe

3
00:00:10,410 --> 00:00:14,520
because you are in the middle of adding new functionality that

4
00:00:14,520 --> 00:00:17,440
right now is breaking the test suite.

5
00:00:17,440 --> 00:00:18,430
In those cases,

6
00:00:18,430 --> 00:00:23,840
you can use the Disabled annotation to disable methods and classes.

7
00:00:23,840 --> 00:00:28,940
But JUnit also supports other annotationâ€‘based conditions that

8
00:00:28,940 --> 00:00:33,240
allow us to enable or disable tests declaratively.

9
00:00:33,240 --> 00:00:34,440
For example,

10
00:00:34,440 --> 00:00:41,330
EnabledOnOs and DisabledOnOs to enable or disable tests on a particular

11
00:00:41,330 --> 00:00:49,970
operating system, EnabledOnJre and DisabledOnJre to enable or disable tests on

12
00:00:49,970 --> 00:00:58,800
particular versions of the JRE, or EnabledForJreRange and DisabledForJreRange

13
00:00:58,800 --> 00:01:05,370
on a particular range of versions using Java 8 as the default minimum version,

14
00:01:05,370 --> 00:01:11,710
EnabledIfSystemProperty and DisabledIfSystemProperty to enable or disable

15
00:01:11,710 --> 00:01:16,460
tests based on the value of a JVM system property,

16
00:01:16,460 --> 00:01:22,700
EnabledIfEnvironmentVariable and DisabledIfEnvironmentVariable to enable or

17
00:01:22,700 --> 00:01:29,320
disable tests based on the value of an environment variable, or EnabledIf and

18
00:01:29,320 --> 00:01:35,500
DisabledIf to enable or disable tests based on the boolean return value of a

19
00:01:35,500 --> 00:01:41,650
method specified with its name or its fully qualified name if it's defined

20
00:01:41,650 --> 00:01:48,140
outside the test class. Let's see how the Disabled annotation works.

21
00:01:48,140 --> 00:01:53,380
Imagine we are implementing an optimization so this test can pass with an order

22
00:01:53,380 --> 00:02:00,310
of 50,000 products. While we are working on it, we can disable this method with

23
00:02:00,310 --> 00:02:04,540
the Disabled annotation and even show a message.

24
00:02:04,540 --> 00:02:08,040
Let's run the class.

25
00:02:08,040 --> 00:02:12,240
We can see that the disabled tests was not executed.

26
00:02:12,240 --> 00:02:16,340
Now you may be thinking, I don't need an annotation for that.

27
00:02:16,340 --> 00:02:20,640
I just have to comment out the Test annotation, right?

28
00:02:20,640 --> 00:02:22,390
Yes, you can do that.

29
00:02:22,390 --> 00:02:28,080
But remember, our unit tests should be clear and easy to understand. If

30
00:02:28,080 --> 00:02:32,790
you use the Disabled annotation and give a reason, the rest of your team

31
00:02:32,790 --> 00:02:37,380
can know exactly why the test is disabled. And what if you want to

32
00:02:37,380 --> 00:02:40,640
disable all the methods of your tests?

33
00:02:40,640 --> 00:02:44,740
Are you going to comment out all the methods of the class?

34
00:02:44,740 --> 00:02:50,340
I think you'll agree that using the Disabled annotation is a better option.

35
00:02:50,340 --> 00:03:02,000
We can add the annotation at the class level. And if we execute the test of the package, all the tests will be ignored.

