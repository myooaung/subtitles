1
00:00:00,940 --> 00:00:01,970
In this demo,

2
00:00:01,970 --> 00:00:05,860
I'm going to show you how to use JUnit to write some simple

3
00:00:05,860 --> 00:00:10,340
tests and how a good unit test is structured.

4
00:00:10,340 --> 00:00:14,500
We are going to test the services for the types of rewards

5
00:00:14,500 --> 00:00:18,340
Wired Brain Coffee can give to its customers.

6
00:00:18,340 --> 00:00:20,540
Let me show you the code.

7
00:00:20,540 --> 00:00:24,740
We have two packages, product and reward.

8
00:00:24,740 --> 00:00:29,140
In the product package, we have a class that represents a product.

9
00:00:29,140 --> 00:00:32,840
It has three properties, the id of the product,

10
00:00:32,840 --> 00:00:37,040
its name and price, along with a constructor,

11
00:00:37,040 --> 00:00:41,540
getters and setters, and the equals and hashCode methods.

12
00:00:41,540 --> 00:00:45,450
On the other hand, we have the reward package Here,

13
00:00:45,450 --> 00:00:47,700
the abstract class, RewardService,

14
00:00:47,700 --> 00:00:52,340
is the base class for our three types of rewards.

15
00:00:52,340 --> 00:00:58,140
All of them will have a field to store the points needed for the reward,

16
00:00:58,140 --> 00:01:03,720
the method that will decide if the reward is given, and a helper method that

17
00:01:03,720 --> 00:01:08,940
calculates the total of the order given a list of products.

18
00:01:08,940 --> 00:01:12,610
The method applyReward returns an object of type

19
00:01:12,610 --> 00:01:17,440
RewardInformation that tells the points that were redeemed

20
00:01:17,440 --> 00:01:20,280
and the discount given by the reward.

21
00:01:20,280 --> 00:01:24,340
Then we have a RewardByConversionService.

22
00:01:24,340 --> 00:01:29,560
If the customer points are greater than the points needed for the reward and

23
00:01:29,560 --> 00:01:33,840
the total of the order is greater than the reward amount,

24
00:01:33,840 --> 00:01:38,540
it fills a RewardInformation object and returns it.

25
00:01:38,540 --> 00:01:41,140
If these conditions are not met,

26
00:01:41,140 --> 00:01:45,650
we just return a RewardInformation object with the default

27
00:01:45,650 --> 00:01:49,240
zero values for the points and the discount.

28
00:01:49,240 --> 00:01:52,340
In RewardByDiscountService,

29
00:01:52,340 --> 00:01:57,140
if the customer points are greater than the points needed for the reward,

30
00:01:57,140 --> 00:02:02,060
the discount is calculated to fill the RewardInformation object.

31
00:02:02,060 --> 00:02:06,830
And in RewardByGiftService, once again,

32
00:02:06,830 --> 00:02:11,740
if the customer points are greater than the points needed for the reward,

33
00:02:11,740 --> 00:02:15,830
it checks if the gift product is in the order to fill a

34
00:02:15,830 --> 00:02:21,340
RewardInformation object with the product's price as the discount.

35
00:02:21,340 --> 00:02:26,740
All right, let's start by testing the RewardByDiscoutService class.

36
00:02:26,740 --> 00:02:32,840
In the test, java directory, there's a package for each clip of this module.

37
00:02:32,840 --> 00:02:34,620
And in the package for this clip,

38
00:02:34,620 --> 00:02:39,940
you can find the class RewardByDiscoutService test.

39
00:02:39,940 --> 00:02:41,410
This is a convention.

40
00:02:41,410 --> 00:02:44,800
You can name your test class whatever you want.

41
00:02:44,800 --> 00:02:47,950
However, by default, Gradle, Maven,

42
00:02:47,950 --> 00:02:53,940
and the console launcher will pick up test classes with certain name patterns.

43
00:02:53,940 --> 00:02:56,060
Of course, you can override this setting.

44
00:02:56,060 --> 00:03:00,640
But for now, we'll use the default naming convention.

45
00:03:00,640 --> 00:03:06,640
Each method of the test class must test exactly one thing.

46
00:03:06,640 --> 00:03:09,240
Let's start with something simple,

47
00:03:09,240 --> 00:03:14,440
like if the setter method of the field Needed Points works.

48
00:03:14,440 --> 00:03:18,500
Some people follow very detailed naming conventions for methods.

49
00:03:18,500 --> 00:03:19,750
But for now,

50
00:03:19,750 --> 00:03:22,870
the only thing you need to know is that you can name

51
00:03:22,870 --> 00:03:24,880
your method whatever you want,

52
00:03:24,880 --> 00:03:31,840
but you have to annotate it with the Test annotation so JUnit can execute it.

53
00:03:31,840 --> 00:03:37,230
Now I'm going to instantiate the RewardByDiscoutService class.

54
00:03:37,230 --> 00:03:44,140
Set that 100 points are needed for the reward and assert

55
00:03:44,140 --> 00:03:48,100
that getNeededPoints should return 100.

56
00:03:48,100 --> 00:03:53,140
AssertEquals is a static method from the Assertions class,

57
00:03:53,140 --> 00:03:57,320
and it's a helper method that allows you to check if the behavior

58
00:03:57,320 --> 00:04:01,440
you expect from the class is correct or not.

59
00:04:01,440 --> 00:04:07,450
Now I'm going to run the test, and here we can see that the test passed,

60
00:04:07,450 --> 00:04:10,040
that the assertion was correct.

61
00:04:10,040 --> 00:04:13,340
You might be thinking, well, of course it's correct.

62
00:04:13,340 --> 00:04:15,740
It is just a setter method.

63
00:04:15,740 --> 00:04:16,410
Yes,

64
00:04:16,410 --> 00:04:20,580
but it's important to test every behavior or functionality of a

65
00:04:20,580 --> 00:04:23,600
class because we could never know if some method,

66
00:04:23,600 --> 00:04:27,840
like a setter, could be the source of a bug.

67
00:04:27,840 --> 00:04:34,030
All right, in the same way, we can test the setPercentageForPoints method.

68
00:04:34,030 --> 00:04:39,140
And yes, the test passed again.

69
00:04:39,140 --> 00:04:42,940
Note that the setNeededPoints method was defined before

70
00:04:42,940 --> 00:04:48,340
the setPercentageForPoints method, but the latter was executed first.

71
00:04:48,340 --> 00:04:50,100
This is because, by default,

72
00:04:50,100 --> 00:04:53,950
JUnit doesn't run test methods in a predefined order.

73
00:04:53,950 --> 00:04:55,360
And it's fine.

74
00:04:55,360 --> 00:04:59,620
Tests should not depend on the order they are executed.

75
00:04:59,620 --> 00:05:05,340
But if you want to control the order in which test methods are executed,

76
00:05:05,340 --> 00:05:10,340
you can annotate your Test class with TestMethodOrder and

77
00:05:10,340 --> 00:05:13,940
specify a method order implementation.

78
00:05:13,940 --> 00:05:16,880
You can also use the configuration parameter

79
00:05:16,880 --> 00:05:23,870
junit.jupiter.testmethod.order.default if you want.

80
00:05:23,870 --> 00:05:28,740
You can implement a custom method order implementation or

81
00:05:28,740 --> 00:05:31,840
use one of the builtâ€‘in implementations,

82
00:05:31,840 --> 00:05:36,980
for example MethodName to sort test methods alphanumerically

83
00:05:36,980 --> 00:05:42,400
based on their method names and parameter lists or

84
00:05:42,400 --> 00:05:47,470
OrderAnnotation to sort test methods numerically based on the

85
00:05:47,470 --> 00:05:51,940
values specified with the Order annotation.

86
00:05:51,940 --> 00:05:58,440
Let's specify this annotation and add an Order annotation to these methods.

87
00:05:58,440 --> 00:06:06,040
So setNeededPoints is executed before setPercentageForPoints.

88
00:06:06,040 --> 00:06:08,020
Let's see.

89
00:06:08,020 --> 00:06:10,930
There you have it.

90
00:06:10,930 --> 00:06:17,660
Now if one test fails, for example let's change this assertion,

91
00:06:17,660 --> 00:06:22,040
all the test methods will be executed.

92
00:06:22,040 --> 00:06:27,740
But JUnit will tell us how many tests failed and why they failed with an

93
00:06:27,740 --> 00:06:32,240
AssertionFailedError thrown by the assertion method.

94
00:06:32,240 --> 00:06:34,930
It also tells us the value it was expecting,

95
00:06:34,930 --> 00:06:40,340
the value it got, and the stack trace of the error.

96
00:06:40,340 --> 00:06:42,540
Let's change it back.

97
00:06:42,540 --> 00:06:47,840
And now, let's test the case when the customer has no points.

98
00:06:47,840 --> 00:06:49,970
Let's create the reward service,

99
00:06:49,970 --> 00:06:58,360
setting a 10% discount for 100 points, and creating an order of 1 product,

100
00:06:58,360 --> 00:07:03,570
let's say a small decaf for $1.99, pounds,

101
00:07:03,570 --> 00:07:05,340
or whatever.

102
00:07:05,340 --> 00:07:09,000
Then, I'm going to call the applyReward method,

103
00:07:09,000 --> 00:07:13,440
passing the order and 0 as the customer points.

104
00:07:13,440 --> 00:07:20,340
Then, assert that the discount should be 0, as well as the redeemed points.

105
00:07:20,340 --> 00:07:23,240
And if we run the test, great.

106
00:07:23,240 --> 00:07:25,440
They all passed.

107
00:07:25,440 --> 00:07:28,640
Now look at the body of the test methods.

108
00:07:28,640 --> 00:07:31,240
Do you see something in common?

109
00:07:31,240 --> 00:07:34,840
These methods have three parts or phases.

110
00:07:34,840 --> 00:07:39,740
In the first one, you set up the objects you need for the test.

111
00:07:39,740 --> 00:07:40,700
In the second one,

112
00:07:40,700 --> 00:07:45,410
you perform an action, and, in the third phase, to check

113
00:07:45,410 --> 00:07:49,040
if the result was the one you expected.

114
00:07:49,040 --> 00:07:51,840
So these methods have three phases.

115
00:07:51,840 --> 00:07:53,970
However, in general terms,

116
00:07:53,970 --> 00:07:58,740
every test has four phases that are executed in sequence.

117
00:07:58,740 --> 00:08:02,820
The first one is arrange where you set up the state that

118
00:08:02,820 --> 00:08:05,140
will allow you to perform the test.

119
00:08:05,140 --> 00:08:09,240
This state is also called the test fixture.

120
00:08:09,240 --> 00:08:10,710
In the act phase,

121
00:08:10,710 --> 00:08:14,100
you call the function or perform the action that you are

122
00:08:14,100 --> 00:08:18,600
testing and, in the third phase, to check whether you got

123
00:08:18,600 --> 00:08:21,340
the expected outcome or not.

124
00:08:21,340 --> 00:08:24,190
Finally, in the annihilation phase,

125
00:08:24,190 --> 00:08:29,040
you put the system back into the state in which you found it.

126
00:08:29,040 --> 00:08:31,640
This phase is not often explicit.

127
00:08:31,640 --> 00:08:32,750
For example,

128
00:08:32,750 --> 00:08:35,780
if we just create an object and set some of its

129
00:08:35,780 --> 00:08:38,080
properties, at the end of the test,

130
00:08:38,080 --> 00:08:42,750
Java's garbage collection will take care of that object. For that

131
00:08:42,750 --> 00:08:47,430
reason, this phase is often neglected. And you may hear many people

132
00:08:47,430 --> 00:08:50,440
talking about only the first three phases,

133
00:08:50,440 --> 00:08:58,000
but that final phase can be important when working with resources that must be closed, for example.

