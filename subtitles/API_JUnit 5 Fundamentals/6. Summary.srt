1
00:00:00,940 --> 00:00:06,140
In this module, you have learned about dynamic and parameterized tests.

2
00:00:06,140 --> 00:00:10,710
Dynamic tests are created by TestFactories, and they don't

3
00:00:10,710 --> 00:00:13,740
support the life cycle of regular tests.

4
00:00:13,740 --> 00:00:17,920
These TestFactories use as data source collections,

5
00:00:17,920 --> 00:00:22,560
objects that implement the Iterable or the Iterator interfaces,

6
00:00:22,560 --> 00:00:29,410
streams, or arrays. These sources must contain elements of type DynamicNode,

7
00:00:29,410 --> 00:00:35,540
an abstract class that is the parent of DynamicContainer and DynamicTest.

8
00:00:35,540 --> 00:00:36,710
On the other hand,

9
00:00:36,710 --> 00:00:41,440
parameterized tests are more like regular tests because they have

10
00:00:41,440 --> 00:00:46,440
support for lifecycle methods. To use parameterized tests,

11
00:00:46,440 --> 00:00:53,840
you must add to your project the dependency junit‑jupiter‑params.

12
00:00:53,840 --> 00:00:58,340
The test parameters can be provided by more than one source.

13
00:00:58,340 --> 00:01:04,150
You can use annotations like MethodSource that use methods to provide those

14
00:01:04,150 --> 00:01:08,640
arguments, and you can even implement your own custom sources.

15
00:01:08,640 --> 00:01:13,400
You can also provide custom display names with the help of

16
00:01:13,400 --> 00:01:18,250
predefined placeholders and custom converters to convert

17
00:01:18,250 --> 00:01:21,040
one argument type to another.

18
00:01:21,040 --> 00:01:25,280
If you need to choose between dynamic and parameterized tests,

19
00:01:25,280 --> 00:01:29,440
it may be helpful to ask yourself these two questions.

20
00:01:29,440 --> 00:01:33,910
Do I need to support lifecycle methods, and where am I

21
00:01:33,910 --> 00:01:37,840
going to get the data to create my tests?

22
00:01:37,840 --> 00:01:43,000
I'll see you in the next module. Take care, and thanks for watching.

