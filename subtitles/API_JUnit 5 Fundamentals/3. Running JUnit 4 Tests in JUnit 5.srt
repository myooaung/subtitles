1
00:00:00,940 --> 00:00:04,050
JUnit 5 provides an easy upgrade path,

2
00:00:04,050 --> 00:00:09,510
but you don't have to migrate all your JUnit 4 tests to JUnit 5 if

3
00:00:09,510 --> 00:00:12,620
you don't have a compelling reason to do it.

4
00:00:12,620 --> 00:00:15,480
JUnit 5 is backward compatible.

5
00:00:15,480 --> 00:00:20,560
The JUnit Vintage engine allows you to run your existing JUnit 3 and

6
00:00:20,560 --> 00:00:24,450
4 tests using the JUnit Platform infrastructure.

7
00:00:24,450 --> 00:00:29,820
But it turns out that this JUnit platform is also forward

8
00:00:29,820 --> 00:00:34,540
compatible with the help of the JUnitPlatformRunner,

9
00:00:34,540 --> 00:00:39,370
meaning that the tools that support JUnit 4 can execute

10
00:00:39,370 --> 00:00:43,140
JUnit Jupiter tests with this runner.

11
00:00:43,140 --> 00:00:47,510
This, and the fact that all JUnit Jupiter classes and annotations are

12
00:00:47,510 --> 00:00:53,850
located in a new package, allows having both JUnit 4 and JUnit 5 libraries

13
00:00:53,850 --> 00:00:57,800
in the classpath at the same time without problems.

14
00:00:57,800 --> 00:01:00,040
In this demo,

15
00:01:00,040 --> 00:01:03,760
I'm going to show you how to run JUnit 4 tests on the

16
00:01:03,760 --> 00:01:07,240
JUnit 5 platform using JUnit Vintage,

17
00:01:07,240 --> 00:01:11,640
having in the same project JUnit Jupiter tests.

18
00:01:11,640 --> 00:01:15,620
I have created a project named JUnitVintage with

19
00:01:15,620 --> 00:01:20,440
configuration files for both Maven and Gradle.

20
00:01:20,440 --> 00:01:24,140
Let's open the build.gradle file.

21
00:01:24,140 --> 00:01:27,420
The project has JUnit 5, JUnit 4,

22
00:01:27,420 --> 00:01:33,840
and JUnit Vintage as dependencies. The pom.xml file, let me

23
00:01:33,840 --> 00:01:41,640
open it, contains the same dependencies. In the test directory,

24
00:01:41,640 --> 00:01:46,740
I have created a class to test the RewardByConversionService

25
00:01:46,740 --> 00:01:49,440
using JUnit 4 annotations.

26
00:01:49,440 --> 00:01:54,140
So I have a setUp method that is executed for each test

27
00:01:54,140 --> 00:01:58,540
and one, two, three, and four tests.

28
00:01:58,540 --> 00:02:05,510
I'm going to run the class with IntelliJ. There you have it. Four tests

29
00:02:05,510 --> 00:02:12,860
passed. Now I'm going to create another package for the JUnit 5 version of

30
00:02:12,860 --> 00:02:22,000
this test and create the class RewardByConversionServiceTest. I'm going to

31
00:02:22,000 --> 00:02:28,190
paste the import statements I'll need. Notice that I'm using the Jupiter

32
00:02:28,190 --> 00:02:37,240
API, now the setUp method, the four tests, and the helper methods.

33
00:02:37,240 --> 00:02:44,500
Now I'm going to execute the test class from the IDE. Four tests

34
00:02:44,500 --> 00:02:55,840
pass. Great. And in the terminal, mvnw test. Tests run: 8 because it

35
00:02:55,840 --> 00:03:00,540
executed the JUnit 4 and the JUnit 5 tests.

36
00:03:00,540 --> 00:03:02,090
But that's not all.

37
00:03:02,090 --> 00:03:05,940
If you have watched the module Integrating JUnit 5,

38
00:03:05,940 --> 00:03:12,040
you'll know that with Gradle, we can filter the execution of tests by engines.

39
00:03:12,040 --> 00:03:17,460
So I'm going to modify useJUnitPlatform to add a filter to

40
00:03:17,460 --> 00:03:22,540
exclude the tests of the JUnit Jupiter engine.

41
00:03:22,540 --> 00:03:33,440
Now I'll execute gradlew test. And if we open the report located in build,

42
00:03:33,440 --> 00:03:42,440
reports, tests, test, it only found four tests, the JUnit 4 tests executed

43
00:03:42,440 --> 00:03:52,000
by the JUnit Vintage engine. So there you have it. You can have in the same project JUnit 4 and JUnit 5 tests.

