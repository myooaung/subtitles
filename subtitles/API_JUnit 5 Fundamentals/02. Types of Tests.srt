1
00:00:00,940 --> 00:00:04,420
There are many ways in which either developers or a QA

2
00:00:04,420 --> 00:00:07,740
department can test an application.

3
00:00:07,740 --> 00:00:11,070
For example, according to the Knowledge of the System,

4
00:00:11,070 --> 00:00:15,720
we can have black box testing. That is testing without any

5
00:00:15,720 --> 00:00:21,160
knowledge of the internal structure of a component or a system or

6
00:00:21,160 --> 00:00:25,100
white box testing, testing that is based on the internal

7
00:00:25,100 --> 00:00:28,640
structure of a component or a system.

8
00:00:28,640 --> 00:00:33,580
We can have other types of tests depending on what you are testing, the

9
00:00:33,580 --> 00:00:38,410
degree of isolation of the components you are testing, and even when in the

10
00:00:38,410 --> 00:00:42,490
development cycle you are testing. In this course,

11
00:00:42,490 --> 00:00:45,840
we are going to focus on unit testing.

12
00:00:45,840 --> 00:00:49,540
Unit tests are tests written by programmers.

13
00:00:49,540 --> 00:00:54,530
The classical definition of unit tests is that they test a piece of code by

14
00:00:54,530 --> 00:00:59,040
invoking it and checking the correctness of some assumptions.

15
00:00:59,040 --> 00:01:02,230
A unit test can test just a method,

16
00:01:02,230 --> 00:01:06,200
for example calculateCommission, or the whole class

17
00:01:06,200 --> 00:01:08,940
involving more than one method.

18
00:01:08,940 --> 00:01:12,840
A good unit test should focus on productivity.

19
00:01:12,840 --> 00:01:17,780
It should be automated, easy to run, ideally by executing

20
00:01:17,780 --> 00:01:21,140
just a command or by clicking a button.

21
00:01:21,140 --> 00:01:23,140
It should be repeatable.

22
00:01:23,140 --> 00:01:29,040
Everyone running the test should be able to repeat it without much problem.

23
00:01:29,040 --> 00:01:32,740
It should be fast, not taking a long time to run,

24
00:01:32,740 --> 00:01:35,840
because fast feedback is important.

25
00:01:35,840 --> 00:01:38,840
But why are these points important?

26
00:01:38,840 --> 00:01:39,340
Well,

27
00:01:39,340 --> 00:01:44,810
fast, repeatable, automated tests can be run as often as possible without

28
00:01:44,810 --> 00:01:50,310
hurting productivity. By doing so, we'll receive feedback that allows us to

29
00:01:50,310 --> 00:01:54,440
detect and correct the problem as early as possible.

30
00:01:54,440 --> 00:01:58,420
If there's a dependency on a database or another component,

31
00:01:58,420 --> 00:02:00,640
for example a WebService,

32
00:02:00,640 --> 00:02:04,660
the test might not be as fast because almost always those

33
00:02:04,660 --> 00:02:08,140
dependencies are slower than just running a class.

34
00:02:08,140 --> 00:02:12,340
And with many tests, execution time adds up.

35
00:02:12,340 --> 00:02:16,940
Besides, if the test depends on an external component to be up,

36
00:02:16,940 --> 00:02:22,220
it might not be as automated or repeatable as we would want, and that's

37
00:02:22,220 --> 00:02:26,140
the difference between unit and integration tests.

38
00:02:26,140 --> 00:02:27,670
In integration tests,

39
00:02:27,670 --> 00:02:31,250
we have external components because the purpose is

40
00:02:31,250 --> 00:02:34,340
to test how they work together.

41
00:02:34,340 --> 00:02:37,550
If we want to unit test this piece of code,

42
00:02:37,550 --> 00:02:41,970
we have to replace the external component with either a fake

43
00:02:41,970 --> 00:02:46,300
dummy object or a mock to keep the component under test

44
00:02:46,300 --> 00:02:50,040
isolated and everything under our control.

45
00:02:50,040 --> 00:02:58,000
So the concept of unit test is simple. But why is having a good suite of tests important?

