WEBVTT
1
00:00:00.940 --> 00:00:02.690
In parameterized tests,

2
00:00:02.690 --> 00:00:08.240
arguments can be provided by sources that you can use via annotations.

3
00:00:08.240 --> 00:00:11.940
There are three rules when using argument sources.

4
00:00:11.940 --> 00:00:16.130
For every test method, you can use as many as you want,

5
00:00:16.130 --> 00:00:19.430
but you should have at least one source.

6
00:00:19.430 --> 00:00:23.540
Otherwise, the test will not be executed.

7
00:00:23.540 --> 00:00:29.240
Each source must provide arguments for all test method parameters.

8
00:00:29.240 --> 00:00:30.990
You cannot have, for example,

9
00:00:30.990 --> 00:00:36.270
one source to provide values for the first parameter and another source to

10
00:00:36.270 --> 00:00:40.640
provide values for the second parameter of the method,

11
00:00:40.640 --> 00:00:45.940
and the test will be executed once for each group of arguments.

12
00:00:45.940 --> 00:00:50.340
Now let's review the source annotations JUnit provides.

13
00:00:50.340 --> 00:00:53.540
You have already seen ValueSource in action.

14
00:00:53.540 --> 00:00:56.800
It allows you to define an array of type string,

15
00:00:56.800 --> 00:01:01.240
class, or primitive types like int or boolean.

16
00:01:01.240 --> 00:01:07.040
And it can be used only on test methods that have a single parameter.

17
00:01:07.040 --> 00:01:10.440
Then we have EnumSource that you can use to run a

18
00:01:10.440 --> 00:01:13.390
test with the values of an enum.

19
00:01:13.390 --> 00:01:15.810
It takes, as an optional parameter,

20
00:01:15.810 --> 00:01:20.340
the names of the enum values you want to include or exclude

21
00:01:20.340 --> 00:01:23.150
depending on the value of the mode parameter.

22
00:01:23.150 --> 00:01:29.140
And like ValueSource, it can be used only on single parameter methods.

23
00:01:29.140 --> 00:01:30.650
Then we have MethodSource.

24
00:01:30.650 --> 00:01:31.880
With this annotation,

25
00:01:31.880 --> 00:01:36.550
we can specify the name of one or more methods that will

26
00:01:36.550 --> 00:01:39.070
provide the arguments for the test.

27
00:01:39.070 --> 00:01:41.840
For single parameter tests,

28
00:01:41.840 --> 00:01:45.420
these methods can return a stream of the parameter

29
00:01:45.420 --> 00:01:48.640
type or a stream of primitive types.

30
00:01:48.640 --> 00:01:55.340
For a test with multiple parameters, the methods can return a stream, iterable,

31
00:01:55.340 --> 00:02:00.010
iterator, or an array with elements of type arguments,

32
00:02:00.010 --> 00:02:05.040
which is a simple interface for wrapping an array of objects.

33
00:02:05.040 --> 00:02:11.260
The methods used by MethodSource must be static unless you're using a

34
00:02:11.260 --> 00:02:15.210
PER_CLASS lifecycle and they can reside in an external class.

35
00:02:15.210 --> 00:02:19.540
You just have to provide its fully qualified name.

36
00:02:19.540 --> 00:02:21.990
Next, we have CsvSource.

37
00:02:21.990 --> 00:02:23.690
With this annotation,

38
00:02:23.690 --> 00:02:28.450
you can declare the arguments as a comma‑separated list of strings.

39
00:02:28.450 --> 00:02:30.480
It can take, as an attribute,

40
00:02:30.480 --> 00:02:34.920
either the delimiter character or a delimiterString, and

41
00:02:34.920 --> 00:02:38.940
single quotes are used as quote characters.

42
00:02:38.940 --> 00:02:44.040
However, for a big number of arguments, this may not be the best option.

43
00:02:44.040 --> 00:02:49.320
So there's also a CsvFileSource annotation that takes one or more CSV

44
00:02:49.320 --> 00:02:54.610
files from the classpath or local file system. The attributes this

45
00:02:54.610 --> 00:03:01.040
annotation takes include files to specify files from the file system,

46
00:03:01.040 --> 00:03:06.230
resources for files from the classpath, attributes for the file's

47
00:03:06.230 --> 00:03:11.720
encoding, the lineSeparator, and the delimiter, either as a character

48
00:03:11.720 --> 00:03:13.040
or a string.

49
00:03:13.040 --> 00:03:15.640
The default delimiter is a comma.

50
00:03:15.640 --> 00:03:20.380
Each line of the file results in a test invocation. Lines

51
00:03:20.380 --> 00:03:24.840
beginning with a hash or number symbol will be interpreted as a

52
00:03:24.840 --> 00:03:29.360
comment and will be ignored, and this annotation uses a double

53
00:03:29.360 --> 00:03:31.940
quote as the quote character.

54
00:03:31.940 --> 00:03:35.840
There are also annotations for null and empty sources.

55
00:03:35.840 --> 00:03:40.170
NullSource provides a null argument. For this reason, it

56
00:03:40.170 --> 00:03:43.440
cannot be used for primitive type arguments.

57
00:03:43.440 --> 00:03:48.600
EmptySource provides an empty value for parameters of type string,

58
00:03:48.600 --> 00:03:56.570
list, set, map, and primitive or object arrays. And NullAndEmptySource, which

59
00:03:56.570 --> 00:04:00.840
combines the functionality of NullSource and EmptySource.

60
00:04:00.840 --> 00:04:06.440
Finally, the annotation ArgumentsSource allows you to use your own sources.

61
00:04:06.440 --> 00:04:12.440
You just have to specify an implementation of the ArgumentsProvider interface.

62
00:04:12.440 --> 00:04:17.450
This interface has the method providesArguments, which returns a

63
00:04:17.450 --> 00:04:22.410
stream of elements of type Arguments and takes an object of type

64
00:04:22.410 --> 00:04:27.250
ExtensionContext that gives you a lot of information about the

65
00:04:27.250 --> 00:04:30.440
context of the test.

66
00:04:30.440 --> 00:04:36.240
All right, let's see an example of some of these source annotations.

67
00:04:36.240 --> 00:04:40.140
You have already seen an example of the ValueSource annotation.

68
00:04:40.140 --> 00:04:44.950
So let me paste another method to show you how to use the EnumSource

69
00:04:44.950 --> 00:04:51.400
annotation. Here I'm using SpecialProductsEnum, which contains the five

70
00:04:51.400 --> 00:04:57.370
products included in the sample order I'm using along with their product ID.

71
00:04:57.370 --> 00:05:04.240
Back to our method. When I run the test, you can see how the method discount

72
00:05:04.240 --> 00:05:09.530
should be applied. EnumSource was executed with the values of

73
00:05:09.530 --> 00:05:15.410
SpecialProductsEnum. EnumSource also takes a name attribute to specify the

74
00:05:15.410 --> 00:05:21.730
values of the enum we want to inject in the test. For example, let's include

75
00:05:21.730 --> 00:05:28.810
only BIG_LATTE and BIG_TEA. There you have it. Only these tests were

76
00:05:28.810 --> 00:05:30.240
executed.

77
00:05:30.240 --> 00:05:36.120
Now let's review the MethodSource annotation. With this annotation, you have to

78
00:05:36.120 --> 00:05:41.020
specify the name of the method that is going to provide the arguments for the

79
00:05:41.020 --> 00:05:48.340
test method, in this case productIds. This method can be private, but it must

80
00:05:48.340 --> 00:05:52.140
be static so it can be called properly.

81
00:05:52.140 --> 00:05:59.640
If I run the test, you can see that the method was executed five times.

82
00:05:59.640 --> 00:06:06.540
However, MethodSource can also provide the value of multiple parameters.

83
00:06:06.540 --> 00:06:09.840
Let me paste another method.

84
00:06:09.840 --> 00:06:14.840
This time, we have a test method that takes two parameters,

85
00:06:14.840 --> 00:06:18.840
the productId and the customerPoints.

86
00:06:18.840 --> 00:06:24.540
So the method productIdsCustomerPoints returns a stream of Arguments

87
00:06:24.540 --> 00:06:30.940
objects. Arguments is an interface that contains the static method of,

88
00:06:30.940 --> 00:06:34.540
which takes a variable number of parameters.

89
00:06:34.540 --> 00:06:35.660
In this case,

90
00:06:35.660 --> 00:06:41.300
I'm just passing the productId, and 100 times the productId as the

91
00:06:41.300 --> 00:06:47.740
customerPoints. Let's run the class one more time.

92
00:06:47.740 --> 00:06:54.040
Great. Here you can see the values of the arguments provided by the method.

93
00:06:54.040 --> 00:06:57.500
Now instead of having the arguments here in the class,

94
00:06:57.500 --> 00:07:03.940
we can use the annotation CsvFileSource to have them in an external file.

95
00:07:03.940 --> 00:07:10.990
In this case, I'm using the file product‑point‑data.csv at the

96
00:07:10.990 --> 00:07:16.550
root of the classpath. Here, let me show you. As you can see, it

97
00:07:16.550 --> 00:07:19.940
contains three groups of values.

98
00:07:19.940 --> 00:07:25.940
Back to our Test class, let's run it.

99
00:07:25.940 --> 00:07:26.470
Great.

100
00:07:26.470 --> 00:07:32.240
We have three invocations with their arguments specified in the file.

101
00:07:32.240 --> 00:07:36.640
Finally, if none of these annotations fills your needs,

102
00:07:36.640 --> 00:07:42.340
you can create your own source with the annotation ArgumentsSource.

103
00:07:42.340 --> 00:07:46.020
You just have to specify the class of your custom source,

104
00:07:46.020 --> 00:07:50.640
in this case ProductIdArgumentsProvider.

105
00:07:50.640 --> 00:07:55.960
This class implements the interface ArgumentsProvider with the method

106
00:07:55.960 --> 00:08:01.660
provideArguments that returns a stream of arguments. Here, I just copied

107
00:08:01.660 --> 00:08:06.230
the implementation of the MethodSource that provides values for the

108
00:08:06.230 --> 00:08:09.840
productId and customerPoints parameters.

109
00:08:09.840 --> 00:08:11.140
But in theory,

110
00:08:11.140 --> 00:08:14.970
you could get the parameters from anywhere you want and

111
00:08:14.970 --> 00:08:26.000
format them to return a stream of arguments. So when I run the test, there are five tests as expected.

