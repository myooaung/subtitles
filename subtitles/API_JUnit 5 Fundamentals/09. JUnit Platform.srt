1
00:00:00,940 --> 00:00:04,940
One of the main goals of JUnit 5 is to facilitate the

2
00:00:04,940 --> 00:00:09,860
integration of JUnit and tools like IDEs For this,

3
00:00:09,860 --> 00:00:14,870
Junit 5 introduced the concept of a launcher to discover,

4
00:00:14,870 --> 00:00:17,940
filter, and execute tests.

5
00:00:17,940 --> 00:00:22,350
The Launcher API is in the junit‑platform‑launcher module,

6
00:00:22,350 --> 00:00:27,440
and it allows you to provide a custom test engine so JUnit

7
00:00:27,440 --> 00:00:30,990
platforms launching infrastructure can support,

8
00:00:30,990 --> 00:00:33,980
for example, third‑party test libraries.

9
00:00:33,980 --> 00:00:36,150
But in addition to this,

10
00:00:36,150 --> 00:00:40,430
if the IDE you're using bundles an older version of

11
00:00:40,430 --> 00:00:42,950
JUnit to use the different one,

12
00:00:42,950 --> 00:00:47,340
you can include the junit‑platform‑launcher and the corresponding

13
00:00:47,340 --> 00:00:51,040
versions of the JUnit Engines you want to use,

14
00:00:51,040 --> 00:00:54,400
junit‑jupiter engine, junit‑vintage‑engine,

15
00:00:54,400 --> 00:00:56,740
or even both.

16
00:00:56,740 --> 00:01:03,610
Notice that JUnit Platform JARs use 1, not 5, as their major version number.

17
00:01:03,610 --> 00:01:05,750
So be careful with that.

18
00:01:05,750 --> 00:01:11,910
Now if your IDE or tool doesn't support JUnit 5, you have two options.

19
00:01:11,910 --> 00:01:14,770
Run your tests from the command line.

20
00:01:14,770 --> 00:01:19,220
There's a console launcher that uses the Launcher API and

21
00:01:19,220 --> 00:01:21,530
that we'll review later in the course.

22
00:01:21,530 --> 00:01:25,970
Or if your IDE or tool supports JUnit 4,

23
00:01:25,970 --> 00:01:27,880
with JUnit Platform,

24
00:01:27,880 --> 00:01:32,620
you can try a test runner to run JUnit Jupiter tests

25
00:01:32,620 --> 00:01:35,640
as if they were JUnit 4 tests.

26
00:01:35,640 --> 00:01:38,360
You'll find this runner in its own JAR,

27
00:01:38,360 --> 00:01:42,560
which you have to add to your project with the Group ID:

28
00:01:42,560 --> 00:01:52,080
org.junit.platform, Artifact ID: junit‑platform‑runner and

29
00:01:52,080 --> 00:01:54,640
its corresponding version.

30
00:01:54,640 --> 00:01:56,440
This is how it works.

31
00:01:56,440 --> 00:02:01,330
JUnitPlatform is a class that extends from Runner and an abstract

32
00:02:01,330 --> 00:02:05,340
class that you can find in the JUnit 4 JAR file.

33
00:02:05,340 --> 00:02:10,740
JUnitPlatform uses an implementation of the interface Launcher.

34
00:02:10,740 --> 00:02:17,240
This implementation discovers test engines that will run the JUnit 5 tests

35
00:02:17,240 --> 00:02:23,420
and implement the interface TestEngine. Test engines are discovered at

36
00:02:23,420 --> 00:02:28,240
runtime using Java's service loader mechanism.

37
00:02:28,240 --> 00:02:29,300
For example,

38
00:02:29,300 --> 00:02:37,080
if you open the junit‑jupiter‑engine JAR in META‑INF/services, you'll find

39
00:02:37,080 --> 00:02:45,740
a text file named org.junit.platform.engine.TestEngine.

40
00:02:45,740 --> 00:02:50,290
This file has the fully qualified name of the implementation class

41
00:02:50,290 --> 00:02:55,720
of the TestEngine interface This way, the engine implementation, in

42
00:02:55,720 --> 00:02:58,940
this case the junit‑jupiter‑engine,

43
00:02:58,940 --> 00:03:03,040
is automatically registered with the launcher.

44
00:03:03,040 --> 00:03:04,660
So in a few words,

45
00:03:04,660 --> 00:03:10,940
the runner will call the engine that will execute the JUnit 5 tests.

46
00:03:10,940 --> 00:03:11,930
For this reason,

47
00:03:11,930 --> 00:03:17,090
you also need to add the junit‑jupiter‑engine dependency. And

48
00:03:17,090 --> 00:03:21,770
the only thing that you need to do is annotate the Test class

49
00:03:21,770 --> 00:03:24,540
with the RunWith annotation.

50
00:03:24,540 --> 00:03:25,170
However,

51
00:03:25,170 --> 00:03:30,710
since JUnit 5 has features that JUnit 4 doesn't have, the runner only

52
00:03:30,710 --> 00:03:41,000
supports a subset of the JUnit 5 functionality. But the JUnit Platform Runner is an easy way to get started.

