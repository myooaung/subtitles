WEBVTT
1
00:00:00.940 --> 00:00:03.310
When working with parameterized tests,

2
00:00:03.310 --> 00:00:07.050
if the argument and the parameter types do not match,

3
00:00:07.050 --> 00:00:10.500
the argument type can be converted implicitly.

4
00:00:10.500 --> 00:00:14.760
In particular, for the annotations ValueSource,

5
00:00:14.760 --> 00:00:21.310
CsvSource, and CsvFileSource most of the time, the implicit conversion is

6
00:00:21.310 --> 00:00:25.540
performed when the argument is provided as a string.

7
00:00:25.540 --> 00:00:30.030
A string type can be converted implicitly to primitive types

8
00:00:30.030 --> 00:00:35.000
and the wrapper classes, enums, java.time classes, such as

9
00:00:35.000 --> 00:00:41.440
local date and period, path, currency, locale, and more.

10
00:00:41.440 --> 00:00:43.680
In the JUnit documentation,

11
00:00:43.680 --> 00:00:47.080
you can find a section that specifies all the types to

12
00:00:47.080 --> 00:00:50.740
which a string can be implicitly converted.

13
00:00:50.740 --> 00:00:51.820
In addition to this,

14
00:00:51.820 --> 00:00:56.950
a string can be converted to a particular type if this type declares

15
00:00:56.950 --> 00:01:02.390
exactly one non‑private static factory method that accepts a single

16
00:01:02.390 --> 00:01:06.940
string argument and returns an instance of the type.

17
00:01:06.940 --> 00:01:10.650
The name of the method doesn't matter. But if there are multiple

18
00:01:10.650 --> 00:01:13.780
factory methods with these characteristics,

19
00:01:13.780 --> 00:01:16.140
no conversion will happen.

20
00:01:16.140 --> 00:01:20.920
JUnit can also use a non‑private constructor of the type that accepts a

21
00:01:20.920 --> 00:01:25.430
single string argument, but the type must be declared either as a

22
00:01:25.430 --> 00:01:29.540
top‑level class or as a static nested class.

23
00:01:29.540 --> 00:01:33.090
If a factory method and a constructor are discovered,

24
00:01:33.090 --> 00:01:36.340
the factory method will be the one used.

25
00:01:36.340 --> 00:01:39.770
And if you need something specific to your application,

26
00:01:39.770 --> 00:01:42.740
you can create your own converters.

27
00:01:42.740 --> 00:01:47.960
You only have to implement the interface ArgumentConverter and annotate the

28
00:01:47.960 --> 00:01:53.810
parameter you want to convert with the annotation ConvertWith. The convert

29
00:01:53.810 --> 00:01:59.230
method of this interface receives the object to convert and the context

30
00:01:59.230 --> 00:02:02.440
where the converted object will be used.

31
00:02:02.440 --> 00:02:05.540
However, if you don't need this context,

32
00:02:05.540 --> 00:02:09.760
you can use the abstract class SimpleArgumentConverter that

33
00:02:09.760 --> 00:02:13.140
implements the interface ArgumentConverter,

34
00:02:13.140 --> 00:02:17.050
but its convert method receives the targetType the

35
00:02:17.050 --> 00:02:20.240
source object should be converted into.

36
00:02:20.240 --> 00:02:24.260
But if the converter only converts one type to another,

37
00:02:24.260 --> 00:02:29.540
you can extend type ArgumentConverter to avoid type checks.

38
00:02:29.540 --> 00:02:34.840
All right, let me show you how to implement a custom converter.

39
00:02:34.840 --> 00:02:39.240
Let's say we want to inject an instance of the Product class,

40
00:02:39.240 --> 00:02:44.980
passing the three attributes of a product separated by a semicolon with a

41
00:02:44.980 --> 00:02:50.540
ValueSource annotation. If I run the class as it is right now,

42
00:02:50.540 --> 00:02:55.740
an exception will be thrown, ParameterResolutionException.

43
00:02:55.740 --> 00:03:01.090
So what we need to do is annotate this parameter with ConvertWith,

44
00:03:01.090 --> 00:03:06.140
passing an implementation of the ArgumentConverter interface, in

45
00:03:06.140 --> 00:03:09.340
this case ProductArgumentConverter.

46
00:03:09.340 --> 00:03:14.750
This class extends from type ArgumentConverter, taking a string as

47
00:03:14.750 --> 00:03:18.940
the source type and a product as the target type.

48
00:03:18.940 --> 00:03:23.020
We just need to add to the class a default constructor that

49
00:03:23.020 --> 00:03:27.170
calls the constructor of the TypedArgumentConverter class that

50
00:03:27.170 --> 00:03:32.840
sets these types. And in the convert method, parse the source

51
00:03:32.840 --> 00:03:44.000
string and create the product. If I run the test, you'll see that the arguments were successfully converted.

