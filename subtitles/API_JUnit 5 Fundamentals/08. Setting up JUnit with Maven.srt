1
00:00:00,940 --> 00:00:06,240
In this clip, we are going to configure JUnit 5 in a Maven project.

2
00:00:06,240 --> 00:00:10,320
I have imported a Maven project in IntelliJ IDEA.

3
00:00:10,320 --> 00:00:13,560
It only has a HelloWorldTest class,

4
00:00:13,560 --> 00:00:16,480
which is not compiling because I haven't added the

5
00:00:16,480 --> 00:00:20,590
JUnit dependency to the project, so let's do it.

6
00:00:20,590 --> 00:00:23,340
In the pom.xml file,

7
00:00:23,340 --> 00:00:28,320
we can start by adding a dependencyManagement section where we

8
00:00:28,320 --> 00:00:32,230
can configure the JUnit Bill of Materials POM.

9
00:00:32,230 --> 00:00:37,620
This will take care of managing the versions of the JUnit JAR files that I'll

10
00:00:37,620 --> 00:00:43,140
add that are compatible with the version I'm using here.

11
00:00:43,140 --> 00:00:47,970
In other words, we still need to declare all the dependencies that we'll need,

12
00:00:47,970 --> 00:00:50,720
but without specifying a version.

13
00:00:50,720 --> 00:00:54,140
For this, in the dependencies section,

14
00:00:54,140 --> 00:00:58,440
we can individually add each one of these dependencies.

15
00:00:58,440 --> 00:01:04,940
For example, the Jupiter API, the Jupiter Engine, and so on.

16
00:01:04,940 --> 00:01:10,370
Or we can add, as a dependency, the artifact junit‑jupiter,

17
00:01:10,370 --> 00:01:15,330
which aggregates all the dependencies that are required to use

18
00:01:15,330 --> 00:01:20,040
JUnit 5 along with some optional dependencies.

19
00:01:20,040 --> 00:01:25,240
If you are only going to run the test inside the IDE, you're done.

20
00:01:25,240 --> 00:01:28,380
But if you intend to run your test with Maven,

21
00:01:28,380 --> 00:01:32,640
you need to configure the Surefire plugin.

22
00:01:32,640 --> 00:01:38,580
I'll add it to the build, plugin's section and apply these changes.

23
00:01:38,580 --> 00:01:41,710
And in the External Libraries section,

24
00:01:41,710 --> 00:01:47,240
you can see the dependencies that have been added to the project.

25
00:01:47,240 --> 00:01:51,660
One dependency that probably is not always needed is junit‑jupiter‑params,

26
00:01:51,660 --> 00:01:56,540
which is required to use parameterized tests.

27
00:01:56,540 --> 00:01:58,720
We'll talk about this later in this course,

28
00:01:58,720 --> 00:02:02,960
but you can exclude dependencies like this one if you choose to use the

29
00:02:02,960 --> 00:02:07,760
junit‑jupiter dependency or include exactly what you want.

30
00:02:07,760 --> 00:02:13,440
In any case, our test class now compiles correctly.

31
00:02:13,440 --> 00:02:19,750
If you run this class inside the IDE, you'll see it runs as expected.

32
00:02:19,750 --> 00:02:34,000
But you can also run it from the command line with mvnw test. And there you have it, Tests run: 1.

