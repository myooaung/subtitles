WEBVTT
1
00:00:05.300 --> 00:00:06.600
Welcome back everyone.

2
00:00:06.620 --> 00:00:11.270
In this lecture where we're going to be doing is creating a prediction function essentially continuing

3
00:00:11.270 --> 00:00:16.760
right where we left off last time and creating a function that takes in a model a scalar and then the

4
00:00:16.760 --> 00:00:19.600
actual data set to be analyzed and returns back.

5
00:00:19.640 --> 00:00:24.230
A prediction based off the model let's go ahead and continue in the same notebook as last time.

6
00:00:24.410 --> 00:00:28.770
Okay here we are back at our notebook when we're talking about deploying models.

7
00:00:28.790 --> 00:00:31.570
Really what we're talking about is exchanging data.

8
00:00:31.640 --> 00:00:37.670
We're going to need to accept data in some sort of format and then have it be processed through our

9
00:00:37.670 --> 00:00:42.340
model and then return that data and that data will then just be a prediction.

10
00:00:42.350 --> 00:00:48.310
So it's very typical that Jason is used for this data interchange format.

11
00:00:48.350 --> 00:00:51.720
And Jason stands for a javascript object notation.

12
00:00:51.740 --> 00:00:56.300
Then if you've ever worked with any sort of web app or any sort of API you should probably be familiar

13
00:00:56.300 --> 00:00:59.870
if Jason even if you're not really familiar with Jason that much.

14
00:00:59.870 --> 00:01:05.480
It really looks so similar to a Python dictionary that it will quickly make sense to you.

15
00:01:05.600 --> 00:01:12.200
So what I want to do is first show you an example of what the actual data object we're sending to our

16
00:01:12.200 --> 00:01:14.890
prediction function is going to look like.

17
00:01:15.140 --> 00:01:21.120
So we'll see a flower example and essentially what is going to look like is a dictionary and we're going

18
00:01:21.120 --> 00:01:28.440
to be using double quotes here and there will be a key value pair for everything here.

19
00:01:28.440 --> 00:01:36.990
So what I'm going to do is if I take a look at let's make sure the cell type is code cell type code

20
00:01:37.170 --> 00:01:39.680
I want to first insert above.

21
00:01:40.080 --> 00:01:44.970
And if I take a look at Iris let's take a look at the very first example so we'll just say head of zero

22
00:01:45.690 --> 00:01:47.090
or head of one.

23
00:01:47.190 --> 00:01:48.450
So one row here.

24
00:01:48.570 --> 00:01:52.770
What I want is just to show you what an example data point would actually look like.

25
00:01:52.770 --> 00:01:54.590
Recall that we only need the features.

26
00:01:54.630 --> 00:01:58.980
So some researchers out in the field they're going to mark down these features.

27
00:01:58.980 --> 00:02:04.320
So later on we're going to be doing is sending a Jason object that will look something like this.

28
00:02:04.320 --> 00:02:06.110
So here we have Super Bowl length.

29
00:02:06.210 --> 00:02:13.240
Then we'll have Sipple with we'll go ahead give those values as three point five.

30
00:02:13.240 --> 00:02:20.300
So in describing these values from the first row in our Iris dataset then we'll say oops double quotes

31
00:02:21.470 --> 00:02:26.720
pedal length as one point four.

32
00:02:26.970 --> 00:02:35.410
And then finally pedal and I'll be zero point two notice here I'm not passing in the species because

33
00:02:35.860 --> 00:02:40.940
in the real world situation the researcher picking flowers out in the field is not gonna have access

34
00:02:40.940 --> 00:02:41.520
to the species.

35
00:02:41.530 --> 00:02:43.300
That's what the model is for.

36
00:02:43.300 --> 00:02:45.100
So here I have my flower example.

37
00:02:45.280 --> 00:02:50.230
And although I have it here as a Python dictionary this is essentially exactly what the Jason object

38
00:02:50.230 --> 00:02:51.400
will look like.

39
00:02:51.400 --> 00:02:57.870
So we need to do is create a function and we'll call this function return prediction.

40
00:02:58.150 --> 00:03:03.280
And this function takes in an already trained model a scalar if necessary.

41
00:03:03.280 --> 00:03:09.850
And then some sample Jason string to predict off of and eventually what I want to return is my actual

42
00:03:09.850 --> 00:03:10.990
prediction.

43
00:03:10.990 --> 00:03:17.320
So first thing you need to do is grab all the information off of this Jason object so I'm doing a little

44
00:03:17.320 --> 00:03:25.240
bit of duplication work here but essentially I'm going to do is say s length for simple length is equal

45
00:03:25.240 --> 00:03:27.940
to sample Jason.

46
00:03:28.480 --> 00:03:34.570
So recall this is going to be the sample Jason that's passed in and then we expect that to have a key

47
00:03:34.840 --> 00:03:37.170
of simple length.

48
00:03:37.170 --> 00:03:42.370
And later on or actually the point these we'll show you how to make sure the key names are correct.

49
00:03:42.580 --> 00:03:46.830
And the next one is sample with so let's again sample Jason.

50
00:03:47.010 --> 00:03:57.550
And here it's simple with the next one is going to be pedal length so sample Jason then go ahead ask

51
00:03:57.550 --> 00:04:07.260
for a pedal length and then finally pedal width we'll say sample Jason and ask for pedal underscore

52
00:04:07.800 --> 00:04:08.140
with.

53
00:04:08.230 --> 00:04:13.950
And essentially what this is doing is it's breaking out the individual components from your Jason so

54
00:04:13.950 --> 00:04:18.900
you can imagine that you add a really complex dataset with tons of features you would be breaking off

55
00:04:18.960 --> 00:04:24.210
a very large Jason and if it gets really large you could try using a for loop to try to loop through

56
00:04:24.210 --> 00:04:29.380
those keys okay so we now have our four separate components.

57
00:04:29.440 --> 00:04:32.350
So let's build out what an individual flower would look like.

58
00:04:32.560 --> 00:04:37.340
I'm just gonna assign it as an array because that's the way the model expects it.

59
00:04:37.450 --> 00:04:39.850
So we pass in this single flower

60
00:04:42.760 --> 00:04:49.720
with the measurements from that sample Jason and then what we need to do is transform that flower essentially

61
00:04:49.720 --> 00:04:50.530
scale it.

62
00:04:50.680 --> 00:04:59.630
So we say scalar transform flower recall here that I'm passing in that scalar which is the scalar that

63
00:04:59.660 --> 00:05:02.860
eventually I will load up here as well as the model.

64
00:05:02.960 --> 00:05:04.280
So we scale that flower.

65
00:05:04.310 --> 00:05:06.320
Now it's ready for our model.

66
00:05:06.410 --> 00:05:17.320
So we're going to do is say class index is equal to model predict classes from the flower.

67
00:05:17.320 --> 00:05:23.140
So if I were to take a look they put a new cell here at my encoder.

68
00:05:23.140 --> 00:05:27.140
Recall that the actual encoder to make sure we fix that type of quick.

69
00:05:27.340 --> 00:05:35.480
Make sure that the actual encoder recall has classes associated with it so the encoder classes are set

70
00:05:35.510 --> 00:05:41.240
Tosa the index 0 versus colour index 1 and Virginia index 2.

71
00:05:41.280 --> 00:05:47.490
This essentially lines up with what we transformed y to be which was this one high encoding so recall

72
00:05:47.490 --> 00:05:51.690
I mentioned that we were going to tell you how to understand what index position lines up with which

73
00:05:51.690 --> 00:05:52.400
class.

74
00:05:52.470 --> 00:05:57.630
Well all you need to do is call the same encoder that we used and then call this classes underscore

75
00:05:57.660 --> 00:06:01.530
attribute and it lines up the actual index locations.

76
00:06:01.530 --> 00:06:06.110
So let's go ahead and just grab this array right here.

77
00:06:06.400 --> 00:06:11.470
And since we're not actually passing in this encoder since that's different from this scalar what I'm

78
00:06:11.470 --> 00:06:22.840
going to do is say classes is equal to this num pi array of Cito servers color in Virginia.

79
00:06:22.840 --> 00:06:29.080
So I have this classes and now I have this class index because the model when you pass in an actual

80
00:06:29.320 --> 00:06:34.210
predict classes on the flower it just returns an index 0 1 or 2.

81
00:06:34.210 --> 00:06:38.510
So what I'm going to say here is return and let's first see what happens.

82
00:06:38.560 --> 00:06:50.310
If I were just to return my class index well it's a return prediction on my flower model with my flower

83
00:06:50.310 --> 00:06:55.040
scalar and the single flower example.

84
00:06:55.040 --> 00:07:00.010
So I run that and it returns back this array of a single item.

85
00:07:00.200 --> 00:07:08.300
So if I just grab index 0 the first item off of this rerun both of these then it just returns zero that

86
00:07:08.300 --> 00:07:09.740
returns the actual index.

87
00:07:09.740 --> 00:07:16.490
So what I should probably do here is put a zero there so that I actually get the class index instead

88
00:07:16.490 --> 00:07:26.390
of an array holding the class index which means that I can say classes at the class index and now running

89
00:07:26.390 --> 00:07:27.060
this.

90
00:07:27.060 --> 00:07:33.170
It returns back so Tosa or whatever happens to predict based off the measurements I passed in.

91
00:07:33.350 --> 00:07:33.670
All right.

92
00:07:33.710 --> 00:07:36.070
So what I'm going to do is in a single cell.

93
00:07:36.170 --> 00:07:41.900
Everything that we need to take from our working notebook for deployment recall that notebooks are really

94
00:07:41.900 --> 00:07:47.990
great for working with data visualizing data training models and then editing your models hyper parameters.

95
00:07:47.990 --> 00:07:53.400
But when it comes to deployment I can't really deploy based off of a notebook the way I want to with

96
00:07:53.420 --> 00:07:55.240
an API in a flask application.

97
00:07:55.250 --> 00:08:00.320
Since this notebook is running in a browser you'll start to kind of almost fight with the actual deployment

98
00:08:00.320 --> 00:08:01.320
process.

99
00:08:01.400 --> 00:08:09.950
What I'm going to do is here we'll say code for deployment in a markdown cell and I'm going to type

100
00:08:10.010 --> 00:08:12.120
all the code out necessary for the planet.

101
00:08:12.140 --> 00:08:13.970
A lot of this will just be copy paste.

102
00:08:13.970 --> 00:08:19.430
First I need to be able to load up my model and load up my scalar so that I'll be the two lines we did

103
00:08:19.460 --> 00:08:25.250
earlier from tensor flow that carries that model's import load model.

104
00:08:25.790 --> 00:08:33.480
Import job lib and then we'll go ahead and copy these two loading commands so we'll load up the H5 file

105
00:08:35.050 --> 00:08:38.010
as well as loading up our scalar file.

106
00:08:38.040 --> 00:08:44.260
Let's go ahead and grab this pickle file here and then once you've loaded up your model and your scalar

107
00:08:44.440 --> 00:08:47.900
you just need this return prediction function.

108
00:08:48.100 --> 00:08:53.840
Grab that stick it in here and this is essentially what we need for deployment.

109
00:08:53.920 --> 00:08:58.770
We need to be able to have the correct imports to load up our model and other thing we might need here

110
00:08:58.780 --> 00:09:07.850
since we're calling NDP is say import num pi as MP and any other sort of classes or calls you use.

111
00:09:07.870 --> 00:09:11.130
You may need to load them up but it looks like we should be fine.

112
00:09:11.140 --> 00:09:12.610
Based off this.

113
00:09:12.630 --> 00:09:17.560
Okay so we have our imports load up our model load up or scalar and have a function that takes in that

114
00:09:17.560 --> 00:09:23.240
model a scalar and the example features and then reports back the predicted class.

115
00:09:23.260 --> 00:09:28.900
This is all the code that we're going to be transferring over when we actually run this as a flask application

116
00:09:28.960 --> 00:09:30.590
that accepts an API.

117
00:09:30.740 --> 00:09:32.860
Thanks and we'll see you at the next lecture.
