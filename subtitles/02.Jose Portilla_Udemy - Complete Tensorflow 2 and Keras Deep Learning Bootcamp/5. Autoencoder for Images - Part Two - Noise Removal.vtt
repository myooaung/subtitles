WEBVTT
1
00:00:05.470 --> 00:00:06.290
Welcome back everyone.

2
00:00:06.310 --> 00:00:11.020
Here we are where we left off last time previously we have a very simple auto encoder that takes the

3
00:00:11.020 --> 00:00:14.910
original image reduces it down by ninety seven percent.

4
00:00:15.130 --> 00:00:20.410
So from seven hundred eighty four dimensions down to twenty five and then expands it back out and attempts

5
00:00:20.410 --> 00:00:21.480
to reconstruct it.

6
00:00:21.580 --> 00:00:23.830
And we saw the results here next.

7
00:00:23.890 --> 00:00:29.060
Let's go ahead and apply this for an application of these noisier images to be in.

8
00:00:29.350 --> 00:00:32.400
Let's first figure out who are actually going to add noise to our images.

9
00:00:32.530 --> 00:00:36.430
Lots different ways you can do this but for convenience we're actually going to make it part of the

10
00:00:36.430 --> 00:00:46.330
auto encoder by saying from tensor flow that carries dot layers import Gaussian noise.

11
00:00:47.230 --> 00:00:53.350
And what I'm going to do is just show you a sample of what this actually does by saying Gaussian noise.

12
00:00:53.350 --> 00:00:55.870
You notice that it just takes in the standard deviation.

13
00:00:55.870 --> 00:01:01.000
Obviously the larger value you choose the more noise is going to be added.

14
00:01:01.270 --> 00:01:04.070
And then let's grab some of those noisy images we'll say.

15
00:01:04.070 --> 00:01:06.110
Noise is equal to sample.

16
00:01:06.370 --> 00:01:13.090
And let's go ahead just say x test let's say grab the first 10 images is a batch and to make sure it's

17
00:01:13.090 --> 00:01:15.280
actually trains and adds noise.

18
00:01:15.280 --> 00:01:18.000
I just need to say training is equal to true there.

19
00:01:18.010 --> 00:01:21.720
When you run this you make it a warning such as this.

20
00:01:21.760 --> 00:01:25.330
This is just a data type warning due to tensor flight too.

21
00:01:25.330 --> 00:01:28.800
But since we're actually running things for two we can ignore this warning.

22
00:01:28.810 --> 00:01:29.070
OK.

23
00:01:29.500 --> 00:01:32.500
So how these noisy images let's go and see what they look like.

24
00:01:32.560 --> 00:01:40.750
What do you say and is equal to zero and then let's print out the original and say PDT M show from our

25
00:01:40.750 --> 00:01:52.700
x test set n and then then say here PDT show and then after that we'll say APL T M show from noisy.

26
00:01:53.200 --> 00:02:00.940
Go ahead and grab a pen and some tape peel t show and write for that we'll go ahead and print out noise

27
00:02:00.940 --> 00:02:02.370
version.

28
00:02:02.920 --> 00:02:05.520
So run that and you should see the original seven.

29
00:02:05.560 --> 00:02:06.790
Here's what it looks like.

30
00:02:06.820 --> 00:02:11.840
And after being passin through that Gaussian noise layer here we can see that noisy version.

31
00:02:11.860 --> 00:02:17.860
So clearly there's a lot of noise here that are auto encoder will hopefully be able to remove.

32
00:02:17.920 --> 00:02:21.490
So let's create the noise removal auto encoder to do this.

33
00:02:21.490 --> 00:02:23.840
I'm just going to do a quick import here.

34
00:02:24.260 --> 00:02:31.660
Import tensor flow as T F and then what I'll do is I'm actually going to use the same encoder and decoder

35
00:02:31.690 --> 00:02:32.680
as before.

36
00:02:32.800 --> 00:02:34.320
Just add in that noise layer.

37
00:02:34.360 --> 00:02:38.700
So we'll come back up here and the previous lecture created this encoder.

38
00:02:38.710 --> 00:02:43.690
Go ahead and just copy it scroll all the way back down here and then paste it in.

39
00:02:44.230 --> 00:02:47.790
And we're going to do is after we flattened this out.

40
00:02:47.800 --> 00:02:52.720
But before we reduced the dimensions we're going to say encoder.

41
00:02:53.240 --> 00:02:58.350
And we're going to add in that Gaussian noise layer.

42
00:02:58.370 --> 00:03:00.250
Let's go ahead and added in zero point two.

43
00:03:00.310 --> 00:03:02.070
Obviously is something a play around with.

44
00:03:03.130 --> 00:03:08.800
And then in order to make sure the same noise that you create is what was what I create it's going to

45
00:03:08.800 --> 00:03:13.050
set a random seed because ATF random set seed.

46
00:03:13.420 --> 00:03:19.660
And this is the same thing as if we were to set the random seed of nut pie by saying and pea that random

47
00:03:20.500 --> 00:03:24.070
that seed as one to one recall what I want is just an arbitrary number.

48
00:03:24.100 --> 00:03:29.080
So there's our encoder exactly the same as four except graphed or flattening it in before reducing the

49
00:03:29.170 --> 00:03:30.460
dimensionality from it.

50
00:03:30.610 --> 00:03:32.980
We added in this noise.

51
00:03:33.130 --> 00:03:38.500
So go ahead and run that and then let's grab our decoder so we'll come back up here and the decoder

52
00:03:38.500 --> 00:03:40.830
half of things is actually exactly the same.

53
00:03:40.900 --> 00:03:45.820
So we just need to copy this scroll all the way back down and go ahead and paste it in.

54
00:03:47.120 --> 00:03:47.530
OK.

55
00:03:47.560 --> 00:03:49.780
So we have our encoder and decoder.

56
00:03:49.840 --> 00:04:00.460
Let's combine them to create our noise remover will say noise remover is equal to sequential.

57
00:04:01.420 --> 00:04:10.470
And then combine the encoder with the decoder and let's compile this by saying noise remover compile

58
00:04:11.220 --> 00:04:12.760
and same loss as before.

59
00:04:13.950 --> 00:04:18.490
So we'll say binary cross entropy.

60
00:04:19.500 --> 00:04:24.750
And for the optimizer you can play around with stochastic reading the sense if you want to just kind

61
00:04:24.750 --> 00:04:30.310
of keep things simple now just pass an atom and let's go ahead and keep track of our metrics.

62
00:04:30.600 --> 00:04:31.950
Also keep track of accuracy.

63
00:04:33.360 --> 00:04:42.090
So compile your model and then we will fit our model we'll say noise remover fit and we pass an X training

64
00:04:42.450 --> 00:04:44.910
and we just want to compare it to the same original image.

65
00:04:44.930 --> 00:04:51.180
So X train X train and then train it for some amount of epochs go to choose eight if you want.

66
00:04:51.180 --> 00:04:56.310
You can pass and validation data in order to compare it to see how it's actually removing noise from

67
00:04:56.550 --> 00:05:00.930
test images that hasn't been training on that we'll go ahead and just run it as so.

68
00:05:01.470 --> 00:05:01.790
OK.

69
00:05:02.340 --> 00:05:04.690
So here we are going to train for a epochs.

70
00:05:04.710 --> 00:05:09.040
Let's go ahead and fast forward in time until this is done train.

71
00:05:09.090 --> 00:05:09.330
All right.

72
00:05:09.330 --> 00:05:10.550
Now this is done training.

73
00:05:10.560 --> 00:05:15.540
Let's go ahead and pass in some noisy images through this noise remover auto encoder and see how it

74
00:05:15.540 --> 00:05:17.600
actually performs to do this.

75
00:05:17.610 --> 00:05:26.490
I'm going to create 10 new noise images will say 10 noisy images and I'm going to pass that through

76
00:05:26.490 --> 00:05:30.940
the original sample that we saw before which is just a pure Gaussian noise.

77
00:05:30.990 --> 00:05:41.400
Let's go ahead and take X test pass and let's say the first 10 points and then say training is equal

78
00:05:41.400 --> 00:05:42.020
to true.

79
00:05:43.120 --> 00:05:48.930
And so here we have our 10 noisy images and then we're going to do is pass those noisy images through

80
00:05:48.930 --> 00:05:50.380
the noise from over auto encoder.

81
00:05:50.400 --> 00:05:58.650
So safety noise so to speak or removal of noise is equal to noise remover and we're just gonna pass

82
00:05:58.650 --> 00:06:03.380
in those 10 noisy images there we go.

83
00:06:03.490 --> 00:06:05.710
And then let's go ahead and print out three things.

84
00:06:05.710 --> 00:06:11.750
We're gonna print out the original image so what it looked like before you even put noise on it.

85
00:06:12.040 --> 00:06:21.190
So original image and then we're gonna print out the noise added image and then finally we're gonna

86
00:06:21.190 --> 00:06:28.100
print out what it looks like after noise removal from auto encoder.

87
00:06:29.800 --> 00:06:33.670
OK so what is actually look like just read the before it's given just to choose and you can play around

88
00:06:33.670 --> 00:06:41.030
with this from that batch of 10 points we'll say PDT M show first grab from the original x test dataset

89
00:06:41.770 --> 00:06:48.820
one of these and then say Pil t show and then let's go ahead and copy these lines.

90
00:06:49.510 --> 00:06:54.220
Except now for noise added image that's going to be from 10 noisy images.

91
00:06:54.400 --> 00:06:58.240
And then after noise removal from auto encoder that's from this deep noise.

92
00:06:58.300 --> 00:06:59.360
So to speak.

93
00:06:59.570 --> 00:07:05.980
So say de noise and something to keep in mind here is that the way we actually designed this auto encoder

94
00:07:06.430 --> 00:07:09.620
the encoder part is actually going to add noise again.

95
00:07:09.640 --> 00:07:15.490
So this is kind of like double noisy images that are being encoded in and then decoded out.

96
00:07:15.790 --> 00:07:19.740
So just keep that in mind that this is almost like twice the amount of noise.

97
00:07:19.930 --> 00:07:23.890
So let's go and run this and see how well our auto encoder actually performs.

98
00:07:23.920 --> 00:07:25.030
So here's the original image.

99
00:07:25.030 --> 00:07:25.700
The first one.

100
00:07:25.720 --> 00:07:27.210
So there's a seven.

101
00:07:27.220 --> 00:07:29.830
This is what it looks like after one noise pass.

102
00:07:29.830 --> 00:07:35.830
And then after going through the auto encoder we first add more noise to it then compress it down so

103
00:07:35.830 --> 00:07:37.840
to speak or reduce the dimensionality.

104
00:07:37.900 --> 00:07:41.920
And then after we expand it back out it looks like this.

105
00:07:42.100 --> 00:07:44.400
So clearly it was able to remove the noise.

106
00:07:44.770 --> 00:07:50.260
So the auto encoder then actually learn what pixels were important and being able to recreate the image

107
00:07:50.320 --> 00:07:51.390
as output.

108
00:07:51.430 --> 00:07:56.980
And so you can play around at this again maybe choose another image from that batch such as this zero.

109
00:07:57.520 --> 00:08:01.710
Here's the noisy zero and in here it is after the noise removal.

110
00:08:01.720 --> 00:08:02.350
OK.

111
00:08:02.470 --> 00:08:07.200
So really cool applications we can use for our audio encoder.

112
00:08:07.240 --> 00:08:12.490
Coming up next we're gonna set you loose on an exercise that focuses on using dimensionality reduction

113
00:08:12.820 --> 00:08:16.590
in order to figure out the hidden insights in your real data set.

114
00:08:16.600 --> 00:08:17.230
I'll see you there.
