WEBVTT
1
00:00:05.500 --> 00:00:11.940
Welcome back everyone to this lecture on image filters before we dive deeper into accomplished on neural

2
00:00:11.940 --> 00:00:12.810
networks.

3
00:00:12.810 --> 00:00:18.180
Let's first discuss a few key ideas in computer vision that pertain to the architecture of the way a

4
00:00:18.180 --> 00:00:19.590
CNN works.

5
00:00:19.800 --> 00:00:25.050
And keep in mind computer vision is just the general term of using computer programs to process image

6
00:00:25.050 --> 00:00:28.690
data and topics like image filters and image kernels.

7
00:00:28.740 --> 00:00:30.500
That's going to fall under computer vision.

8
00:00:30.570 --> 00:00:32.940
So let's try to understand some of these key ideas.

9
00:00:32.940 --> 00:00:37.610
And then later on we'll see how they relate to convolution on neural networks.

10
00:00:37.640 --> 00:00:42.650
Now if you've ever used photo editing software or even photo applications on your phone you've probably

11
00:00:42.650 --> 00:00:45.950
already seen filters such as a blur filter.

12
00:00:45.950 --> 00:00:49.510
But the question arises how do these filters actually work.

13
00:00:49.520 --> 00:00:57.210
What are they doing to the underlying pixels of an image in order to achieve this desired effect filters

14
00:00:57.270 --> 00:00:59.120
are essentially an image kernel.

15
00:00:59.220 --> 00:01:04.020
And keep in mind the term image filter and image kernel can be used interchangeably.

16
00:01:04.080 --> 00:01:08.160
So you'll see some people call an image filters and other people call it image kernels.

17
00:01:08.220 --> 00:01:13.410
The main idea is if you're referring to an image kernel you're probably referring to the more mathematical

18
00:01:14.010 --> 00:01:16.520
understanding behind with the image filter is doing.

19
00:01:16.530 --> 00:01:17.980
So let's talk about that.

20
00:01:18.060 --> 00:01:22.860
So that image kernel it's a small matrix applied to an entire image.

21
00:01:22.860 --> 00:01:27.330
Now certain popular filters are actually well known for example to blur an image.

22
00:01:27.330 --> 00:01:30.870
You can actually just use this image Colonel that I've shown here.

23
00:01:30.870 --> 00:01:36.530
This three by three matrix when applied to an entire image will actually blur the image.

24
00:01:36.570 --> 00:01:43.040
So let's get an idea of what we mean by applied to an entire image so let's explore what that actually

25
00:01:43.040 --> 00:01:43.490
means.

26
00:01:43.490 --> 00:01:52.140
To apply Colonel or filter to an image filters essentially allow us to transform images so here we have

27
00:01:52.200 --> 00:01:53.340
a grayscale image.

28
00:01:53.340 --> 00:01:59.220
It's a really small image and well we have our values that are scaled between negative one and one where

29
00:01:59.220 --> 00:02:04.590
one represents black and negative one represents white and then the value right in between them such

30
00:02:04.590 --> 00:02:06.570
as Zero is essentially Gray.

31
00:02:06.720 --> 00:02:12.540
So we have these normalized values green negative 1 and 1 and what I'm going to do is I'm going to apply

32
00:02:12.570 --> 00:02:14.670
a filter to this image.

33
00:02:14.760 --> 00:02:18.270
So here we have an example of a three by three filter.

34
00:02:18.270 --> 00:02:23.820
So what we're going to do here in order to apply the filters to the image is starting at the top left

35
00:02:24.210 --> 00:02:28.160
I'm going to see the essentially the corresponding values to the filter.

36
00:02:28.170 --> 00:02:34.470
So essentially put that filter on top of the image pixels and then we're gonna begin sliding along and

37
00:02:34.500 --> 00:02:40.770
when we have the filter on top of the image what we do is we multiply those pixel values by what we

38
00:02:41.040 --> 00:02:43.610
are going to refer to now as the filter weights.

39
00:02:43.830 --> 00:02:48.510
So the actual values the filter we're gonna be begin referring to them as weights because later on the

40
00:02:48.510 --> 00:02:53.130
convolution on your network is going to choose those weights for us but we've kind of predetermined

41
00:02:53.430 --> 00:02:56.410
some sort of filter values here in this three by three filter.

42
00:02:56.610 --> 00:03:02.850
So we take that filter put it on top of our image and then as we kind of scan across this image we're

43
00:03:02.850 --> 00:03:08.550
going to do is multiply by the filter weights we get those results and then we sum the result to get

44
00:03:08.550 --> 00:03:10.200
some final output value.

45
00:03:10.230 --> 00:03:14.940
So in this case if we took that three by three filter just on the top left corner multiply by those

46
00:03:14.940 --> 00:03:17.760
filter weights and then some of those results.

47
00:03:17.760 --> 00:03:22.980
And notice how in this case the resolution will actually decrease because we're taking in nine input

48
00:03:22.980 --> 00:03:28.100
values and then just outputting one value now.

49
00:03:28.160 --> 00:03:31.500
As I mentioned we're eventually going to do this across the entire image.

50
00:03:31.550 --> 00:03:38.120
So we're essentially going to stride across the image now something we can edit is our straight distance.

51
00:03:38.150 --> 00:03:44.180
So by default we have to at least stride one pixel over but what we could do is have a straight distance

52
00:03:44.180 --> 00:03:49.050
that's larger maybe you could stride over by two pixels and that's something we can edit and accomplish

53
00:03:49.080 --> 00:03:54.250
denote neural networks as well so to get a better idea of how this actually works.

54
00:03:54.280 --> 00:03:59.230
There's a really fantastic interactive example that I'm going to go to now and my browser and it's at

55
00:03:59.320 --> 00:04:05.160
this you or else at Toyota I O forward slash evey Ford slash image dash kernels.

56
00:04:05.230 --> 00:04:09.910
Okay let's go ahead and go to this in our browser so we can get an idea of how these image filters are

57
00:04:09.910 --> 00:04:13.330
actually applied and what the resulting image looks like.

58
00:04:13.330 --> 00:04:13.530
OK.

59
00:04:13.540 --> 00:04:19.030
So here we are at this status of the I O link for image kernels and the explanation begins by showing

60
00:04:19.030 --> 00:04:20.590
you just a normal image.

61
00:04:20.590 --> 00:04:28.090
So often images have values that go from zero to two hundred fifty five where zero is the darkest possible

62
00:04:28.750 --> 00:04:31.810
value and a two hundred fifty five is the brightest possible value.

63
00:04:32.140 --> 00:04:39.580
So in the case of a grayscale image we have zero as black and then 255 as white.

64
00:04:39.580 --> 00:04:44.530
So we can see here that as we kind of hover above these values we can see over in this white section

65
00:04:44.530 --> 00:04:49.830
that I'm currently hovering over we get values that are pretty close to 255 and then maybe over here

66
00:04:49.840 --> 00:04:50.670
what's darker.

67
00:04:50.820 --> 00:04:53.650
There are a lot lower in value kind of in the 20s.

68
00:04:53.650 --> 00:04:54.210
OK.

69
00:04:54.340 --> 00:04:57.580
So this is kind of a blown up low resolution image.

70
00:04:57.580 --> 00:05:02.260
If you look over here on the very right hand side you see this tiny little picture of faith of face.

71
00:05:02.260 --> 00:05:03.370
Excuse me.

72
00:05:03.550 --> 00:05:05.870
That's the actual kind of real size of this image.

73
00:05:06.100 --> 00:05:10.240
It's not blown up to this kind of larger scale but what's nice about this large scale is you can see

74
00:05:10.270 --> 00:05:13.010
each pixel very clearly individually.

75
00:05:13.030 --> 00:05:13.270
All right.

76
00:05:13.720 --> 00:05:19.150
So we have the numbers between 0 255 and we're gonna do is going to walk through the process of applying

77
00:05:19.210 --> 00:05:26.000
a kernel to this image so here you can actually choose what kind of kernel you want to apply.

78
00:05:26.000 --> 00:05:28.780
We're going to begin with that bleu kernel that we actually mentioned before.

79
00:05:28.790 --> 00:05:34.700
So here are a nine values a three by three matrix or a three by three kernel that we're actually going

80
00:05:34.700 --> 00:05:37.310
to apply this image in order to blur the image.

81
00:05:37.370 --> 00:05:39.380
So what ends up happening and you can see this.

82
00:05:39.380 --> 00:05:41.650
You can play around with this interactively here.

83
00:05:41.660 --> 00:05:43.950
Now we see that little three by three grid.

84
00:05:43.980 --> 00:05:48.620
There we're gonna end up applying across the image and then you can see the output along with the math

85
00:05:48.710 --> 00:05:49.900
of the multiplication.

86
00:05:50.030 --> 00:05:55.460
And notice that the input image versus the output image we can clearly see that the output image has

87
00:05:55.460 --> 00:06:00.080
been blurred due to the transformation of applying this kernel across.

88
00:06:00.080 --> 00:06:06.000
And this process of applying this kernel is sometimes also known as a convolution.

89
00:06:06.140 --> 00:06:11.930
The process of taking this image kernel and then dragging it or with a stride across this image and

90
00:06:11.930 --> 00:06:13.820
getting this output result.

91
00:06:13.820 --> 00:06:18.850
The term convolution is what we call this when we are talking about this in the context of a convolution

92
00:06:18.850 --> 00:06:25.130
on neural network and the main idea behind this is so far we've actually shown you how these kernels

93
00:06:25.130 --> 00:06:29.720
or filters work with predetermined values and those are values that are well known for certain really

94
00:06:29.720 --> 00:06:32.330
common operations like blurring an image.

95
00:06:32.330 --> 00:06:38.360
Later on we're going to want our network to actually choose the weights behind these filters in order

96
00:06:38.360 --> 00:06:40.280
to perform feature extraction.

97
00:06:40.340 --> 00:06:45.320
Maybe we'll have some filters that are really good at detecting eyebrows or something like that if we're

98
00:06:45.320 --> 00:06:49.630
trying to classify faces for example from other images.

99
00:06:49.940 --> 00:06:55.910
So the main idea behind this image kernel in the context of a conventional neural network is that the

100
00:06:55.910 --> 00:07:02.180
actual network will figure out the correct weights instead of us having these predetermined weights.

101
00:07:02.180 --> 00:07:06.830
And often when you're working if accomplished on your own network you'll get a lot of edge detection.

102
00:07:06.860 --> 00:07:14.150
And so we actually have some edge detection or Sobel filters here and you can see here that this is

103
00:07:14.150 --> 00:07:19.340
kind of detecting horizontal lines and you can even have an intuition of this by just checking out the

104
00:07:19.340 --> 00:07:26.690
matrix that we have these larger negative values here and then a center zero line and then larger positive

105
00:07:26.690 --> 00:07:28.120
values on the bottom.

106
00:07:28.190 --> 00:07:33.860
And if you have an intuition of how this will react as you kind of go along the image where you have

107
00:07:33.860 --> 00:07:41.060
strong vertical line such as this person's hairline here you'll get end up results that have larger

108
00:07:41.060 --> 00:07:42.660
values as you go along.

109
00:07:42.740 --> 00:07:48.320
So you can see here because we're starting to detect these kind of horizontal lines the actual output

110
00:07:48.320 --> 00:07:53.780
when you apply this kernel just mathematically the way it works out is very bright versus where there

111
00:07:53.810 --> 00:07:57.920
are no horizontal lines you just end up getting kind of black.

112
00:07:58.100 --> 00:08:05.180
So you can see the output image is clearly outputting clearer portions that are horizontal lines.

113
00:08:05.180 --> 00:08:06.840
So that's what's called the bottom Sobel.

114
00:08:06.890 --> 00:08:08.870
And then you can check out things like right.

115
00:08:08.870 --> 00:08:13.360
And it looks very similar except now this should be detecting kind of vertical lines.

116
00:08:13.490 --> 00:08:17.900
So same idea here we can now see that clearly the vertical lines of this person's face and the left

117
00:08:17.900 --> 00:08:21.200
hand side and this person's face towards the right hand side.

118
00:08:21.530 --> 00:08:25.640
And we can also see their nose starting to appear in the output image.

119
00:08:25.640 --> 00:08:30.680
So the compositional neural network is essentially then going to decide what weights on its own filters

120
00:08:30.710 --> 00:08:34.160
matter for image classification.

121
00:08:34.340 --> 00:08:40.490
And here we can actually have an interactive image and Colonel uploader so you can choose your own image

122
00:08:40.490 --> 00:08:46.190
file and then apply any of these kernels you want and you can even develop your own custom kernels here.

123
00:08:46.190 --> 00:08:52.120
So it allows you to start adding these to do things that you want to explore.

124
00:08:52.130 --> 00:08:52.370
OK.

125
00:08:52.820 --> 00:08:57.680
So the main idea here behind this Web site and showing you how it works is just get the idea that we're

126
00:08:57.680 --> 00:08:58.570
gonna have these kernels.

127
00:08:58.580 --> 00:09:01.640
They don't need to be three by three that can be four by four or five by five.

128
00:09:01.970 --> 00:09:06.010
Obviously the larger there are the more operations and more weights we have to solve for.

129
00:09:06.110 --> 00:09:10.880
But we essentially just drag them over the image and then it's going to output some sort of results

130
00:09:11.090 --> 00:09:16.880
and hopefully as the convolution on your networks learn based off the images we feed it we'll get certain

131
00:09:17.420 --> 00:09:20.700
outputs that are basically extracting important features.

132
00:09:20.720 --> 00:09:26.300
So here we're extracting edge features based off this kernel right here and you can see here that we

133
00:09:26.300 --> 00:09:31.580
have an outline where essentially we're looking for the Central Valley of eight as our main center weight

134
00:09:31.940 --> 00:09:34.400
versus negative one on the edge.

135
00:09:34.430 --> 00:09:35.030
Okay.

136
00:09:35.270 --> 00:09:39.730
So let me go back to our presentation and finish off our discussion on image kernels.

137
00:09:39.800 --> 00:09:40.110
All right.

138
00:09:40.130 --> 00:09:45.510
Hope you enjoyed that interactive example and I encourage you to explore that Web site on your own now

139
00:09:45.510 --> 00:09:51.060
in the context as I mentioned of convolution of neural networks these filters are referred to as convolution

140
00:09:51.060 --> 00:09:57.060
kernels and that process of passing them over an image is known as a convolution.

141
00:09:57.120 --> 00:10:01.830
I want to go over a few more key important factors to keep in mind as we learn more about convolution

142
00:10:01.830 --> 00:10:04.890
on your own networks and image kernels.

143
00:10:04.890 --> 00:10:08.240
Now during convolution We would actually lose borders.

144
00:10:08.340 --> 00:10:14.430
So if you take a closer look at that previous example you'll notice that there was a black border along

145
00:10:14.430 --> 00:10:20.580
the output image and this is because as you start going towards the edge of an image you'll actually

146
00:10:20.580 --> 00:10:23.140
end up just not having values there.

147
00:10:23.160 --> 00:10:29.370
So one way to fix this is you can pad the image of more values and a really common choice is a zero

148
00:10:29.400 --> 00:10:31.320
or a kind of in-between value.

149
00:10:31.410 --> 00:10:35.530
And this allows us to then not lose information along that border.

150
00:10:36.060 --> 00:10:38.500
So it also helps us preserve the image size.

151
00:10:38.520 --> 00:10:41.310
So this known as padding and it's a really common technique.

152
00:10:41.310 --> 00:10:46.850
People often use on their images so they don't lose any border information.

153
00:10:47.020 --> 00:10:52.130
OK so now that we understand image filters let's go ahead and explore the architecture of a convolution

154
00:10:52.360 --> 00:10:57.070
network that allows a network to come up with the best weights for a filter in what is known as the

155
00:10:57.070 --> 00:10:58.490
convolution layer.

156
00:10:58.540 --> 00:11:03.880
So we understand we have these image filters or kernels that we're essentially going to perform a convolution

157
00:11:03.970 --> 00:11:05.150
on the image.

158
00:11:05.260 --> 00:11:08.490
And I showed you filters where we already knew the weights for them.

159
00:11:08.500 --> 00:11:14.470
However when it comes to images such as images of dogs or cats we're not really going to know right

160
00:11:14.470 --> 00:11:20.500
off the bat what filter values or weights are going to be important in order to detect whether a dog

161
00:11:20.500 --> 00:11:22.690
is in an image or a cat isn't an image.

162
00:11:22.690 --> 00:11:27.580
It's probably a better idea to just have the convolution and all network to come up with those weights

163
00:11:27.580 --> 00:11:28.190
themselves.

164
00:11:28.210 --> 00:11:32.560
And this is done in the convolution layer of accomplishment on neural network which are going to go

165
00:11:32.560 --> 00:11:34.420
over in the very next lecture.

166
00:11:34.420 --> 00:11:34.990
I'll see if there.
