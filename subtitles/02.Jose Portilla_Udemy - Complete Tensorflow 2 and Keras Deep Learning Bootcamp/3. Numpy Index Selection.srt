1
00:00:05,320 --> 00:00:06,430
Welcome back everyone.

2
00:00:06,430 --> 00:00:11,670
In this lecture we're going to talk about indexing and selection in number pi specifically.

3
00:00:11,690 --> 00:00:16,790
We'll first talk about grabbing a single element then expand this to grabbing a slice of elements.

4
00:00:16,840 --> 00:00:21,890
Then we'll talk about broadcasting those selections indexing and selection in two dimensions.

5
00:00:21,890 --> 00:00:26,450
And we'll talk about a very important topic called conditional selection which we will also see a lot

6
00:00:26,540 --> 00:00:30,040
in pandas and dealing with data and data cleaning in general.

7
00:00:30,050 --> 00:00:32,140
Let's head back to the notebook and get started.

8
00:00:32,150 --> 00:00:32,480
All right.

9
00:00:32,480 --> 00:00:37,760
In my notebook I've already gone ahead and imported some pie as MP next well I'm going to do is just

10
00:00:37,760 --> 00:00:45,410
create a simple array by saying NDP arrange from zero to eleven for default step size of one.

11
00:00:45,410 --> 00:00:48,140
So I have numbers 0 3 10.

12
00:00:48,140 --> 00:00:51,910
Now let's imagine I wanted to just select a single value to do this.

13
00:00:51,920 --> 00:00:57,080
I simply passed in the index just as I would select a single value from a normal Python list.

14
00:00:57,500 --> 00:01:01,250
So if I just say 8 or grabs whatever is at index 8.

15
00:01:01,380 --> 00:01:03,620
So there we have the value 8.

16
00:01:03,770 --> 00:01:06,200
Let's imagine I wanted to get values in a range.

17
00:01:06,260 --> 00:01:11,780
I can do that the exact same way I can do this with a normal Python list with a starting position a

18
00:01:11,780 --> 00:01:16,100
colon and then an ending position which will go up to but not including.

19
00:01:16,100 --> 00:01:21,740
So for example if I say 1 colon 5 it goes up to but not including 5 starting at 1.

20
00:01:21,740 --> 00:01:25,890
So I got the numbers 1 2 3 4 if I want to start at the very beginning.

21
00:01:26,120 --> 00:01:36,350
I can either say go from 0 up to not including five or I can admit that zero and say colon five which

22
00:01:36,350 --> 00:01:39,510
will basically say start at the beginning and then go up to five.

23
00:01:39,530 --> 00:01:41,680
So these two cells are essentially the same thing.

24
00:01:41,690 --> 00:01:43,900
It's up to you whether or not you want to include that zero.

25
00:01:44,210 --> 00:01:48,500
Similarly to go all the way to the end that is from a starting position.

26
00:01:48,500 --> 00:01:54,100
You can say starting at index five colon and it will go all the way to the end.

27
00:01:54,110 --> 00:01:58,820
This is nice because that way you don't need to actually know how long your array is to index all the

28
00:01:58,820 --> 00:02:00,350
way to the end.

29
00:02:00,350 --> 00:02:06,920
Now let's quickly discuss broadcasting empire raise differ from normal Python lists because of this

30
00:02:06,920 --> 00:02:09,350
ability to broadcast with lists.

31
00:02:09,350 --> 00:02:15,140
In normal Python you can only reassign parts of a list with new parts of the same shape and size and

32
00:02:15,140 --> 00:02:19,490
then you would also need then possibly reassign this to a new variable.

33
00:02:19,550 --> 00:02:25,610
However none Pi you can actually broadcast a single value across a larger set of values.

34
00:02:25,610 --> 00:02:26,750
Let me show you what I mean by that.

35
00:02:27,290 --> 00:02:29,150
Let's take a look at our original array.

36
00:02:29,180 --> 00:02:38,330
The numbers 0 through 10 and then we're going to say here is grab all the numbers from 0 to 5 and set

37
00:02:38,330 --> 00:02:41,000
that equal to 100.

38
00:02:41,060 --> 00:02:43,750
You would not be able to do this with a normal Python list.

39
00:02:43,880 --> 00:02:47,890
If you take a look at our array notice now it's been changed.

40
00:02:48,080 --> 00:02:53,010
The values in the sections from 35 have this broadcasting reassignment.

41
00:02:53,030 --> 00:02:55,640
So one hundred is been broadcasted across these values.

42
00:02:56,180 --> 00:03:03,450
Let's go ahead and reset this by saying NPR range 0 to eleven.

43
00:03:03,460 --> 00:03:09,370
The next thing I want to point out is actually slicing a section of an array and setting it to a new

44
00:03:09,370 --> 00:03:13,860
variable will actually only act as a pointer to the original array.

45
00:03:13,930 --> 00:03:21,860
So I'm going to say slice of array is equal to my array from 0 to 5.

46
00:03:21,880 --> 00:03:28,570
So if I check out that slice of the array then I get 0 1 2 3 4 and if I take a look at my original array

47
00:03:28,990 --> 00:03:31,570
it's been reset so that it's 0 through 10.

48
00:03:31,570 --> 00:03:40,090
Now let's imagine I grab this slice of the array and I say just the colon to select everything and I

49
00:03:40,090 --> 00:03:48,430
set that equal to ninety nine so now if I take a look at this slice of my array everything has been

50
00:03:48,430 --> 00:03:52,750
set to ninety nine because I just set a colon here which basically means from beginning all the way

51
00:03:52,750 --> 00:03:53,880
to the end.

52
00:03:53,890 --> 00:03:56,740
Now what you think is going to happen with my original array.

53
00:03:56,800 --> 00:04:03,160
Well if none pie that slice of the array was actually when you assigned it here as a rate 0 through

54
00:04:03,190 --> 00:04:09,160
5 you're basically just pointing it to the original array which means this broadcasting operation has

55
00:04:09,160 --> 00:04:12,040
actually affected the original array.

56
00:04:12,040 --> 00:04:18,060
If you wanted to not have it affect the original array you would need to explicitly set a copy.

57
00:04:18,190 --> 00:04:25,150
So you have to do something like this array copy is equal to whatever original array and then you call

58
00:04:25,150 --> 00:04:27,670
the copy method off the original array.

59
00:04:27,940 --> 00:04:33,370
And that way you can do any sorts of changes you want to this array copy such as grabbing everything

60
00:04:33,910 --> 00:04:40,630
and setting the equal to 100 and if you take a look at my array copy that is now all one hundreds but

61
00:04:40,630 --> 00:04:46,120
my original array hasn't been changed because of specifying that copy.

62
00:04:46,180 --> 00:04:52,990
OK so we've talked about indexing and selection across just a one dimensional vector here.

63
00:04:52,990 --> 00:04:58,690
We also talked about broadcasting next what I want to talk about quickly is indexing on to the arrays

64
00:04:58,720 --> 00:05:05,180
or matrices and then we'll talk about conditional selection which is a very important topic to begin.

65
00:05:05,190 --> 00:05:13,410
Let's go ahead and create a two dimensional array will say array 2 D is equal to N.P. array and here

66
00:05:13,410 --> 00:05:20,310
what I'm going to do is simply kind of cast as quickly as the list by saying 5 10 15 as the first item

67
00:05:20,310 --> 00:05:21,300
in this list.

68
00:05:21,300 --> 00:05:29,700
Then we'll create another one twenty twenty five thirty and then finally thirty five forty and forty

69
00:05:29,700 --> 00:05:30,330
five.

70
00:05:30,360 --> 00:05:35,740
So no here what I essentially have here is a list of three lists and transform that into an umpire if

71
00:05:35,820 --> 00:05:38,130
Perry and I'll be my two dimensional array.

72
00:05:39,330 --> 00:05:43,110
So now if I take a look at array to the I have this.

73
00:05:43,110 --> 00:05:47,090
So let's imagine that we actually wanted to just grab a single row.

74
00:05:47,190 --> 00:05:53,730
Well indexing is basically going to work the exact same way in 2D except now you have a dimension for

75
00:05:53,730 --> 00:05:55,700
the rows and a dimension for the columns.

76
00:05:55,830 --> 00:05:57,860
The first one is the rows.

77
00:05:57,900 --> 00:06:06,120
So if I say array to the DOT shape this returns back the number of rows first and then the number of

78
00:06:06,120 --> 00:06:06,740
columns.

79
00:06:06,750 --> 00:06:10,660
So index 0 we have number of rows the index one we have number of columns.

80
00:06:10,770 --> 00:06:14,220
That distinction is going to be important later on when we cover pandas.

81
00:06:14,400 --> 00:06:22,310
So let's imagine I wanted to just grab from array to the a single row then I can pass in an index.

82
00:06:22,320 --> 00:06:27,480
So for example 0 and I'll return back that very first row at index 0.

83
00:06:27,690 --> 00:06:29,470
If I wanted to grab the last row.

84
00:06:29,470 --> 00:06:33,630
Well for example that's an index too because we're starting at 0.

85
00:06:34,260 --> 00:06:37,620
So that returns thirty five forty forty five.

86
00:06:37,650 --> 00:06:42,210
Now let's imagine I want to grab a single element value from somewhere in one of these rows.

87
00:06:42,540 --> 00:06:46,630
Well notice now I had this array so I can index off that rule.

88
00:06:46,950 --> 00:06:48,840
So let's imagine I want to twenty five.

89
00:06:49,200 --> 00:06:56,910
Well that's a row one and then I could either index off of it with two bracket notation to then also

90
00:06:56,910 --> 00:07:04,500
say one to get twenty five or what's more common is to just put this in the same set of brackets separated

91
00:07:04,500 --> 00:07:06,000
by a comma.

92
00:07:06,000 --> 00:07:09,420
So one one says at row one column one.

93
00:07:09,570 --> 00:07:15,880
So let's go ahead and pick another number just to make sure we understand like 15 that's in row 0 at

94
00:07:15,880 --> 00:07:17,460
column 2.

95
00:07:17,560 --> 00:07:20,430
We run that and then we get back 15.

96
00:07:20,440 --> 00:07:24,380
Now we can also do the same thing except expand this to slicing.

97
00:07:24,520 --> 00:07:30,730
For example let's say we wanted a slice of this little square of 10 15 along with 25 30.

98
00:07:30,940 --> 00:07:35,980
The way we could do that is simply by thinking of what rows we wanted first.

99
00:07:35,980 --> 00:07:42,480
So I want rows 0 1 up to but not including at index 2.

100
00:07:42,580 --> 00:07:49,270
So I can say for my rows go ahead and give me colon to which if we think about this returns back rows

101
00:07:49,360 --> 00:07:50,360
0 and 1.

102
00:07:50,410 --> 00:07:52,250
So up to not including two.

103
00:07:52,270 --> 00:08:00,010
Now let's imagine I only wanted 10 and 15 25 and 30 from that I could then say comma and say something

104
00:08:00,010 --> 00:08:05,380
like starting at column one or column index one which is ten twenty five.

105
00:08:05,380 --> 00:08:08,010
Go ahead and colon go all the way to the end.

106
00:08:08,260 --> 00:08:13,750
And we can see how we could grab that little subsection of our matrix not to worry too much if you get

107
00:08:13,750 --> 00:08:19,420
confused by this sort of double notation we really won't see this that often with real data sets we

108
00:08:19,420 --> 00:08:25,270
feel data sets the rows stand for data points and the columns typically stand for features so it's unlikely

109
00:08:25,270 --> 00:08:30,700
we need to do some sort of double subset typically we're either subsidising just on rows or on columns.

110
00:08:30,790 --> 00:08:35,890
It's quite unusual to do something like this but you should be aware of that sort of notation in case

111
00:08:35,890 --> 00:08:36,500
it does come up.

112
00:08:37,120 --> 00:08:42,620
Finally the much more common type of selection we'll be doing is called conditional selection for this.

113
00:08:42,730 --> 00:08:50,450
We'll go ahead and show you an example we'll say NPR range one to eleven.

114
00:08:50,740 --> 00:08:51,980
And here's my array.

115
00:08:52,050 --> 00:08:54,190
One two three all the way to 10.

116
00:08:54,280 --> 00:09:02,200
Now what I can do is I can actually broadcast a condition or a comparison off of this so I can ask for

117
00:09:02,310 --> 00:09:05,500
where's my array greater than the number four.

118
00:09:06,250 --> 00:09:12,130
So I run that and this returns back a numb pie array of boolean values where the index location matches

119
00:09:12,130 --> 00:09:18,100
up with the original data to those that says false false false false and then once it gets to five it's

120
00:09:18,100 --> 00:09:19,920
only becomes true true true.

121
00:09:19,960 --> 00:09:23,530
So what I could do is showing you this in multiple steps.

122
00:09:23,530 --> 00:09:33,790
I could say my boolean array is equal to array greater than 4 run that now I have this boolean array

123
00:09:34,300 --> 00:09:43,010
and I could use this to filter so I could pass that in to my original array run that and now it will

124
00:09:43,010 --> 00:09:49,760
only return back the index locations of this boolean array which happens to be true which is 5 6 7 8

125
00:09:49,760 --> 00:09:50,330
9 10.

126
00:09:50,360 --> 00:09:56,440
Since these are all greater than 4 So again the steps here I did was have some sort of original array.

127
00:09:56,690 --> 00:10:02,420
Do a comparison operator which gives you back this boolean array which you can then use to filter out

128
00:10:02,420 --> 00:10:03,800
your original array.

129
00:10:03,800 --> 00:10:09,200
Now I separated this out into multiple steps but theoretically we can actually have to do this reassignment.

130
00:10:09,230 --> 00:10:12,440
So typically what we see is this sort of notation.

131
00:10:12,440 --> 00:10:19,790
We take our array and then we ask for some sort of comparison such as Array greater than 4.

132
00:10:20,200 --> 00:10:23,520
Run that and then we see here 5 6 7 8 9 10.

133
00:10:23,560 --> 00:10:28,750
So this is the sort of thing we're gonna be seeing quite often especially when we move on to pandas

134
00:10:29,110 --> 00:10:34,730
and pandas will later learn we'll give us the ability to then do something like multiple comparisons.

135
00:10:34,750 --> 00:10:40,090
So for right now we just need to understand this basic idea that it can perform a comparison within

136
00:10:40,090 --> 00:10:44,130
my array and then pass that as my conditional selection filter.

137
00:10:44,380 --> 00:10:49,870
Later on we'll discover more complex ways in order to do this for even more functionality.

138
00:10:49,870 --> 00:10:55,690
But for right now we've discovered how we can actually index and select off one dimensional arrays.

139
00:10:55,690 --> 00:11:00,210
We've talked about broadcasting and we talked about indexing and selection on two dimensional rays.

140
00:11:00,370 --> 00:11:03,920
And finally this important topic of conditional selection.

141
00:11:03,920 --> 00:11:05,680
Thanks and we'll see you at the next lecture.
