WEBVTT
1
00:00:05.600 --> 00:00:06.730
Welcome back everyone.

2
00:00:06.740 --> 00:00:11.230
In this lecture we're going to go over the solutions for data visualization exercise questions.

3
00:00:11.420 --> 00:00:12.050
Let's get started.

4
00:00:12.950 --> 00:00:15.130
Okay here we are at the exercise notebook.

5
00:00:15.140 --> 00:00:16.880
Let's go ahead and work through solutions.

6
00:00:16.880 --> 00:00:22.490
First thing I need to do is just run these first few cells to actually read in the data file and check

7
00:00:22.490 --> 00:00:22.970
it out.

8
00:00:22.970 --> 00:00:28.090
So now that I have the data file what I'm going to do is first create a scatter plot of the price versus

9
00:00:28.110 --> 00:00:29.180
carrot as shown below.

10
00:00:29.630 --> 00:00:35.610
Lots of different ways you can do this by the simplest ways to U.S. born and what we're going to do

11
00:00:35.610 --> 00:00:43.320
here is say as soon as that scatter plot and then pass in the columns care on the x axis and then Y

12
00:00:44.160 --> 00:00:48.780
as price and then we happen to call our data frame diamonds.

13
00:00:48.780 --> 00:00:53.180
So we'll go ahead and do that run it and you should see the same results here.

14
00:00:53.190 --> 00:00:58.670
Keep in mind you need to add peeled teeth that show in case you're not running this inside a notebook.

15
00:00:58.710 --> 00:01:03.720
So as we mentioned there's a bit of a problem here with this marker edge being too thick and there's

16
00:01:03.720 --> 00:01:05.390
so many points on top of each other.

17
00:01:05.490 --> 00:01:08.050
It's a little bit hard to tell the density of the points.

18
00:01:08.130 --> 00:01:14.990
So what we're gonna do is we'll take the same code we just copy and paste it and then we're going to

19
00:01:14.990 --> 00:01:16.310
add in some parameter calls.

20
00:01:17.150 --> 00:01:20.840
So the first one is Alpha which is essentially transparency.

21
00:01:20.920 --> 00:01:23.990
If we say Alpha is equal to 1 that's totally opaque.

22
00:01:24.020 --> 00:01:27.530
If we say Alpha is equal to zero then that's completely transparent.

23
00:01:27.770 --> 00:01:30.680
Recall that we have almost fifty six thousand points here.

24
00:01:30.830 --> 00:01:36.830
So we're gonna go quite transparent here about 10 percent or zero point one and then the edge color

25
00:01:36.830 --> 00:01:41.230
parameter which you can either kind of Google search or it's actually mentioned here.

26
00:01:41.240 --> 00:01:45.070
Edge color parameter we're going to set that equal to none.

27
00:01:45.290 --> 00:01:50.510
And then when you run this it gets rid of that edge and also adds in the alpha so we can see point stacked

28
00:01:50.510 --> 00:01:53.470
on top of each other in a clear fashion.

29
00:01:53.510 --> 00:01:56.840
So you'll notice that singular points are very transparent.

30
00:01:56.960 --> 00:02:02.640
And if we stack a bunch of them on top of each other we can see there's a density of points here next.

31
00:02:02.650 --> 00:02:04.850
We wanted to make the previous plot larger.

32
00:02:04.990 --> 00:02:10.240
So for this one you may have to have add Google searched a little bit or check out our reference notebooks

33
00:02:10.620 --> 00:02:18.130
birds going to copy and paste our first block command and then right above it we can say peel t that

34
00:02:18.130 --> 00:02:23.210
figure and then call fig size is equal to whatever you want.

35
00:02:23.350 --> 00:02:26.400
So to make a larger I went ahead and said twelve by eight.

36
00:02:26.440 --> 00:02:31.420
And then we get a much larger figure as our output which also helps again with the density of the plot

37
00:02:31.420 --> 00:02:33.790
points moving along.

38
00:02:33.780 --> 00:02:41.100
I wanted to create a histogram of the price column so to do that I went ahead and used C Bourne's distribution

39
00:02:41.100 --> 00:02:46.830
plot and then we only pass in since it's a histogram just one column.

40
00:02:46.910 --> 00:02:53.700
So in this case it's price and also I'll say Katie is equal to False.

41
00:02:53.700 --> 00:02:57.300
So if you run this by default you get a smaller histogram.

42
00:02:57.300 --> 00:02:58.650
You'll notice minds a lot larger.

43
00:02:58.980 --> 00:03:08.490
So one way to fix that is just by at the top here St. Paul figure fig size is equal to twelve by eight.

44
00:03:08.660 --> 00:03:14.060
And if you ran that you pretty much got it but you also notice that in the actual output here we're

45
00:03:14.240 --> 00:03:15.760
a lot closer to zero.

46
00:03:15.770 --> 00:03:22.430
We don't actually have any negative prices in our dataset so it doesn't quite make sense for our x axis

47
00:03:22.430 --> 00:03:26.140
to show some sort of access to that negative range.

48
00:03:26.150 --> 00:03:28.670
Well we'll go ahead and do then is after this.

49
00:03:28.670 --> 00:03:35.720
We can set some x limits by saying Pulte X Lim go ahead and start at zero and then maybe go up to something

50
00:03:35.720 --> 00:03:38.780
like 18000 as our max.

51
00:03:38.840 --> 00:03:40.720
And then we get this plot here.

52
00:03:40.970 --> 00:03:45.680
That's again optional to play around with but it kind of makes sense for histogram that only has positive

53
00:03:45.680 --> 00:03:46.390
values.

54
00:03:46.400 --> 00:03:53.570
They just started at x equals zero moving along wanted to create a count plot of the instances per cut

55
00:03:53.570 --> 00:03:55.250
type as shown below.

56
00:03:55.280 --> 00:03:57.020
This should have been pretty straightforward.

57
00:03:57.110 --> 00:03:58.640
We just call s an account plot.

58
00:03:59.360 --> 00:04:05.870
So we want it on the column and then after that we just say our data frame is the diamonds data frame

59
00:04:06.170 --> 00:04:07.950
and then we get this result.

60
00:04:07.970 --> 00:04:17.370
Similarly for the box plot what we can do is just say S.A. drop box plot and noticed that the y axis

61
00:04:17.430 --> 00:04:19.550
is price and the x axis is cut.

62
00:04:19.590 --> 00:04:21.350
So we'll go ahead and define those as well.

63
00:04:21.570 --> 00:04:30.350
By saying X is equal to the string cut Y is equal to the string price and data is diamonds so we run

64
00:04:30.350 --> 00:04:30.950
that.

65
00:04:30.950 --> 00:04:36.890
We get this kind of smaller box plot so again we'll make it larger by calling Pulte figure beforehand

66
00:04:37.550 --> 00:04:41.050
and then setting fig size equal to something larger maybe told by 8.

67
00:04:41.720 --> 00:04:45.050
And now we get this nice box plot for the challenge here.

68
00:04:45.210 --> 00:04:49.250
We want to see if you can figure out how to actually change the ordering of the box plot.

69
00:04:49.700 --> 00:04:54.320
So it's a common question I get from students and I wanted you to try to discover this on your own.

70
00:04:54.320 --> 00:04:59.120
And the best way to do that is by actually checking the online documentation for Seabourn.

71
00:04:59.120 --> 00:05:07.610
So if you actually Google searched Seabourn box plot went ahead and check that out and open up Seabourn

72
00:05:07.610 --> 00:05:08.400
box plot.

73
00:05:08.480 --> 00:05:15.020
You'll notice that there actually is an order parameter which is the order to plot the categorical levels

74
00:05:15.500 --> 00:05:18.320
so you can see different examples here.

75
00:05:18.320 --> 00:05:24.280
But the main thing is to actually find this order parameter and then realize that it's a list of strings.

76
00:05:24.530 --> 00:05:32.460
So we'll come back here and see if we can figure that out so we'll go ahead and say diamonds and let's

77
00:05:32.460 --> 00:05:39.440
just get the actual values that are available to us under cut and we can do this by using a little bit

78
00:05:39.440 --> 00:05:42.990
of panels by calling unique here and now we get this list.

79
00:05:43.070 --> 00:05:48.220
So I'm going to just copy that list element of it could also be an umpire.

80
00:05:48.560 --> 00:05:49.340
And then say cut.

81
00:05:49.340 --> 00:05:52.640
Order is equal to that list.

82
00:05:52.640 --> 00:05:55.790
Now keep in mind that's the default ordering ideal premium.

83
00:05:55.790 --> 00:05:58.280
Good cut very good and fair.

84
00:05:58.280 --> 00:06:03.250
What I want to do is make sure my ordering kind of goes fair.

85
00:06:03.260 --> 00:06:03.640
Ideal.

86
00:06:03.640 --> 00:06:08.130
Good cut very good premium so I'll go ahead and make that happen.

87
00:06:08.330 --> 00:06:17.090
So we'll take fair string cut it out put it here and then we'll go to ideal which is next and then premium

88
00:06:17.390 --> 00:06:19.030
we'll go ahead and cut that out.

89
00:06:19.220 --> 00:06:20.930
Put it at the very end.

90
00:06:21.260 --> 00:06:23.700
And now here we have our order.

91
00:06:23.750 --> 00:06:29.450
Okay so keep in mind see more and kind of just automatically puts this in the best order it thinks possible.

92
00:06:29.450 --> 00:06:34.700
Essentially what's most efficient in the background but you can always specify the order yourself along

93
00:06:34.700 --> 00:06:39.590
the x axis by passing in the string like that and a good way to quickly get that string is by calling

94
00:06:39.590 --> 00:06:42.550
unique on whatever column you're working with.

95
00:06:42.620 --> 00:06:44.600
So just a couple tips there.

96
00:06:44.630 --> 00:06:47.990
Next we'll go ahead and say S.A. box plot.

97
00:06:47.990 --> 00:06:50.800
Same as before X is cut.

98
00:06:50.950 --> 00:06:56.780
Then why is price data is diamonds.

99
00:06:56.930 --> 00:07:04.960
And now order is going to be equal to this cut order list that we just made and if we want we can also

100
00:07:04.960 --> 00:07:12.160
play around the palette and I went ahead and just choose cools my color string you run that and then

101
00:07:12.280 --> 00:07:13.970
you get back this.

102
00:07:14.030 --> 00:07:18.820
So that's exactly what we wanted and keep in mind if you want to make it bigger you can just say Pulte

103
00:07:19.420 --> 00:07:27.320
that figure fig size is equal to let's say twelve by eight and we get back the same results.

104
00:07:27.340 --> 00:07:28.040
Okay.

105
00:07:28.150 --> 00:07:31.510
If you have any questions make sure to check out our solutions notebook.

106
00:07:31.600 --> 00:07:36.790
Coming up next we'll begin learning about tensor flow and artificial neural networks.

107
00:07:36.790 --> 00:07:37.360
I'll see you there.
