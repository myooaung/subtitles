WEBVTT
1
00:00:05.400 --> 00:00:06.510
Welcome back everyone.

2
00:00:06.600 --> 00:00:11.790
In this lecture we're going to begin working with pan this data frames the pan this data frame is our

3
00:00:11.790 --> 00:00:14.360
main tool for working with data throughout the course.

4
00:00:14.420 --> 00:00:18.680
The data frame is simply multiple panels the series to happen to share the same index.

5
00:00:18.900 --> 00:00:22.650
You can think of a data frame as being very similar to a spreadsheet or an excel file.

6
00:00:22.710 --> 00:00:27.270
It's just a lot more powerful since you can leverage all your python knowledge and skills to work with

7
00:00:27.270 --> 00:00:28.700
the panel's data frame.

8
00:00:28.710 --> 00:00:32.850
Let's head to a Jupiter notebook and get started.

9
00:00:32.940 --> 00:00:35.310
Here I am at the notebook and have already imported some pie.

10
00:00:35.340 --> 00:00:41.050
As MP in Kansas as PD next I want to create two Python lists.

11
00:00:41.050 --> 00:00:50.690
I'm going to create a list called columns and this will be the columns w x y and z and then I'll create

12
00:00:50.720 --> 00:00:59.610
another list called index and this will be the first letters a b see DNA

13
00:01:02.940 --> 00:01:09.630
one thing to notice here is that I have four columns or four items in this columns list and then five

14
00:01:09.630 --> 00:01:12.410
actual rows or five items in this index.

15
00:01:12.420 --> 00:01:14.730
We're gonna be using these to actually create a data frame.

16
00:01:14.790 --> 00:01:19.800
The last we need is to actually create our data so we can actually use num PI for this.

17
00:01:19.800 --> 00:01:26.100
I can say from num pi thought random import Rand.

18
00:01:26.310 --> 00:01:29.070
I n t go ahead and run that cell.

19
00:01:29.160 --> 00:01:34.430
And since we ran that cell in the very next one we should be able to then see the documentation string.

20
00:01:34.500 --> 00:01:40.170
And basically what this does is it returns random integers space between the low number and the high

21
00:01:40.170 --> 00:01:40.650
number.

22
00:01:40.650 --> 00:01:42.720
And then you can actually specify a size.

23
00:01:42.720 --> 00:01:43.540
So we've seen this before.

24
00:01:43.560 --> 00:01:44.290
Not pi.

25
00:01:44.440 --> 00:01:49.560
What we're gonna do is to make sure that we get the same numbers together.

26
00:01:49.560 --> 00:01:55.980
I'm going to ask for data is equal to Rand I.A. numbers from negative one hundred to one hundred in

27
00:01:55.980 --> 00:01:56.550
shape.

28
00:01:56.550 --> 00:01:59.890
Five by four so five rows by four columns.

29
00:01:59.940 --> 00:02:03.980
But if I just run this and then check for my data I don't get some random numbers.

30
00:02:03.990 --> 00:02:07.720
And if you do the same thing your random numbers aren't gonna be the same as mine.

31
00:02:07.740 --> 00:02:09.170
So make sure you can follow along.

32
00:02:09.180 --> 00:02:13.830
Let's go ahead and set a seed in the exact same cell as we're calling random integer.

33
00:02:13.830 --> 00:02:20.760
What we'll do is we'll say NDP random thought seed and then I'll set the seed to forty two and again

34
00:02:20.760 --> 00:02:22.890
forty two is just an arbitrary choice.

35
00:02:22.890 --> 00:02:27.060
Well you need to do is make sure that these two lines when the exact same cell when you run them that

36
00:02:27.060 --> 00:02:30.380
way when you actually call the data you'll get these exact same numbers.

37
00:02:30.420 --> 00:02:34.740
If you did not get these exact same numbers please go ahead and review our notebook or view this video

38
00:02:34.740 --> 00:02:36.060
closely.

39
00:02:36.060 --> 00:02:39.360
Next we want to show you how to actually create the pan this data frame.

40
00:02:39.570 --> 00:02:45.990
So if we say PD dot data frame one thing to notice that sometimes confuses beginners is this EF is actually

41
00:02:45.990 --> 00:02:46.590
capitalized.

42
00:02:46.680 --> 00:02:47.870
So keep that in mind.

43
00:02:47.940 --> 00:02:52.750
Next we'll go ahead and do shift tab to see the in its signature or the doc string.

44
00:02:52.800 --> 00:02:58.510
You can see we have essentially three main parameters the data the index and the columns.

45
00:02:58.530 --> 00:03:02.400
This is essentially append the series that happens add information with the columns.

46
00:03:02.430 --> 00:03:05.520
So previously our series just took in data and some labeled index.

47
00:03:05.520 --> 00:03:08.250
Now we have one more that we can take in which is columns.

48
00:03:08.250 --> 00:03:14.880
So we'll go ahead and say passing our data our index in our columns run that.

49
00:03:14.880 --> 00:03:19.530
And after you run data frame you should be able to see this nicely formatted data frame.

50
00:03:19.530 --> 00:03:23.940
Keep in mind depending what version of Jupiter you're using the actual format display may be slightly

51
00:03:23.940 --> 00:03:27.240
different but in the version of Jupiter that's providing the environment.

52
00:03:27.240 --> 00:03:29.280
What happens is you get this nice little highlighting effect.

53
00:03:29.490 --> 00:03:32.660
So I have this labeled index ABC the E.

54
00:03:32.790 --> 00:03:34.170
Those are the actual row names.

55
00:03:34.170 --> 00:03:36.670
And then the column names are w x y z.

56
00:03:36.750 --> 00:03:41.970
So let's go ahead and review how to select an index essentially learn the various methods to grab data

57
00:03:42.000 --> 00:03:46.290
from a data frame we can match and then when we are reading in data these rows are essentially going

58
00:03:46.290 --> 00:03:49.890
to be data points and these columns will be features or labels.

59
00:03:49.890 --> 00:03:51.990
So let's start with columns.

60
00:03:52.080 --> 00:03:53.580
How do we grab a single column.

61
00:03:53.580 --> 00:03:58.970
Well we can simply say IDF and then in square braces pass in the column name.

62
00:03:59.100 --> 00:04:05.160
Note that this returns back a series essentially proving to us that a pan this data frame the columns

63
00:04:05.250 --> 00:04:06.690
are all just pan the series.

64
00:04:06.690 --> 00:04:12.090
That happened to share the same index values and we can confirm this by checking a type here and it

65
00:04:12.090 --> 00:04:14.190
returns back that it's a series.

66
00:04:14.220 --> 00:04:18.230
If I just check the type of f it returns back that it's a data frame.

67
00:04:18.480 --> 00:04:22.950
And if you're able to understand that concept you're basically able to understand the main ideas behind

68
00:04:22.950 --> 00:04:27.900
pandas is that we have this structure of series that we can join together by some common index to get

69
00:04:27.900 --> 00:04:29.430
this nice data frame.

70
00:04:29.520 --> 00:04:35.820
So in order to select just a single column we say the F and then in square braces or brackets we go

71
00:04:35.820 --> 00:04:37.980
ahead and pass in the single column.

72
00:04:37.980 --> 00:04:40.590
Now let's imagine I want to grab more than one column.

73
00:04:40.620 --> 00:04:46.560
Well the way we do that is we actually pass in a list of column names so then we get these double bracket

74
00:04:46.560 --> 00:04:47.280
notation.

75
00:04:47.280 --> 00:04:51.150
And the reason is double bracket is because we're actually passing in the list the columns.

76
00:04:51.150 --> 00:04:54.960
So let's imagine I want to columns w Enzi while I run this.

77
00:04:54.960 --> 00:04:57.780
And now I get back a data frame since I've asked for more than one column.

78
00:04:57.780 --> 00:05:03.300
So the double bracket notation is because I'm passing and a list of column names and it ought to be

79
00:05:03.300 --> 00:05:03.890
in order.

80
00:05:03.960 --> 00:05:10.710
I could say Z and then W. run it and I could get it back out of order so again data from columns are

81
00:05:10.710 --> 00:05:11.880
just series.

82
00:05:11.910 --> 00:05:15.710
Let's imagine I wanted to create a new column based off some old columns.

83
00:05:15.720 --> 00:05:18.210
This is really common in what's known as feature engineering.

84
00:05:18.300 --> 00:05:20.340
So we'll be seeing this a lot.

85
00:05:20.430 --> 00:05:24.330
Well we can do is we call a column as if it already exists.

86
00:05:24.330 --> 00:05:29.610
Keep in mind if I run this right now I'll get a type error or a key error basically saying hey I can't

87
00:05:29.610 --> 00:05:34.830
actually find that new column because it doesn't exist yet but we're going to do is in to create a new

88
00:05:34.830 --> 00:05:35.610
column.

89
00:05:35.610 --> 00:05:40.650
We simply reference it as if it already exists and then give the formulation for what we want to construct

90
00:05:40.650 --> 00:05:42.170
it based off the old columns.

91
00:05:42.360 --> 00:05:46.570
And later on we'll see that we can assign this based off of other data frames and other data sources.

92
00:05:46.680 --> 00:05:52.510
But for this one I'll say the f new is equal to DFW plus the F of Y.

93
00:05:52.770 --> 00:05:57.810
So I run this and if I check out my data frame it has this new column which is simply the sum of the

94
00:05:57.810 --> 00:06:00.600
W column and the Y column.

95
00:06:00.600 --> 00:06:03.300
Now let's go ahead and show you how you can remove a column.

96
00:06:03.330 --> 00:06:07.830
Sometimes we're gonna have features in our data that are not useful to us or just noisy or they're missing

97
00:06:07.830 --> 00:06:08.370
too much data.

98
00:06:08.400 --> 00:06:15.410
So we want to remove them the way we can do that is we say IDF dot drop and then we're gonna say the

99
00:06:15.410 --> 00:06:20.600
name of the column we want to remove or we could pass in a list the columns we wanted to remove.

100
00:06:20.690 --> 00:06:25.310
Now if I just say the F dropped new a common mistake that beginners do they just run this and they'll

101
00:06:25.310 --> 00:06:26.780
get an error.

102
00:06:26.780 --> 00:06:33.050
And the reason is because if we take a look at shift tab here axis equal to zero is the default access

103
00:06:33.050 --> 00:06:37.510
for drop and X equal to zero actually refers to the rows.

104
00:06:37.520 --> 00:06:43.640
So what we need to do is specify that I'm dropping this along axis is equal to 1 essentially meaning

105
00:06:43.880 --> 00:06:47.090
look for the column label new not the index.

106
00:06:47.090 --> 00:06:51.950
And then when I run this notice I no longer have this new column in my output here.

107
00:06:51.980 --> 00:06:55.340
Keep in mind this is not an in-place dropping.

108
00:06:55.430 --> 00:06:58.560
So if I called the F again it's actually still there.

109
00:06:58.580 --> 00:07:04.700
So one way I can make sure this is permanent is I could reassign the f is equal to the F to drop new

110
00:07:04.790 --> 00:07:06.070
axes equal to 1.

111
00:07:06.110 --> 00:07:10.240
I run that and now when I called the F new is definitely no longer there.

112
00:07:10.250 --> 00:07:11.400
That's a permanent change.

113
00:07:11.420 --> 00:07:18.020
So go ahead and do this reassignment in case you want to have it in other way to do it is you can actually

114
00:07:18.020 --> 00:07:20.270
specify in place is equal to true.

115
00:07:20.270 --> 00:07:24.580
However you should keep in mind that future versions of pandas actually are going to remove this in-place

116
00:07:24.630 --> 00:07:25.420
parameter.

117
00:07:25.550 --> 00:07:29.150
So that's why we recommend doing this sort of reassignment.

118
00:07:29.150 --> 00:07:29.880
OK.

119
00:07:29.960 --> 00:07:35.480
So we learned how to select a single column how to select multiple columns how to create a new column

120
00:07:35.780 --> 00:07:37.310
and how to remove a column.

121
00:07:37.340 --> 00:07:40.950
Let's go ahead and see those same operations but for rows.

122
00:07:41.210 --> 00:07:45.890
So let's imagine we try to select a row with the same methodology as selecting a column.

123
00:07:46.370 --> 00:07:50.930
Well this is going to present some problems because pandas could technically have a row the same name

124
00:07:50.930 --> 00:07:51.570
as a column.

125
00:07:51.830 --> 00:07:55.460
So it didn't specify when we're dealing with rows how we're actually going to do this.

126
00:07:55.550 --> 00:07:57.470
And there's two different methods for this.

127
00:07:57.500 --> 00:08:05.720
One is to use the dot L O C dot LSC is basically going to tell pandas Hey I'm looking for a row here

128
00:08:06.860 --> 00:08:12.260
and then you can pass in the name of the row such as Dot LCA and notice it's going to return back.

129
00:08:12.350 --> 00:08:14.840
This first row as a series.

130
00:08:14.840 --> 00:08:20.330
So it's interesting to note here is that not only are the columns pinned the series but the rows themselves

131
00:08:20.360 --> 00:08:26.810
are pan the series and just like passing in multiple columns we can pass in multiple rows.

132
00:08:26.870 --> 00:08:30.930
So we pass on a list of rows if I want multiple rows back.

133
00:08:31.080 --> 00:08:37.110
For example if I want rows and e I just pass in that list of rows and I get back A and E..

134
00:08:37.110 --> 00:08:42.120
Now as you mentioned back where we talk about pan the series the series still actually remembers the

135
00:08:42.150 --> 00:08:43.780
integer index location.

136
00:08:43.890 --> 00:08:51.210
The way I can grab things by an index integer based location is by saying the F thought I L O C and

137
00:08:51.210 --> 00:08:58.380
here I can do slicing notation or just indexing with a single number so that I LFC says go ahead and

138
00:08:58.380 --> 00:09:00.180
use the integer.

139
00:09:00.180 --> 00:09:02.500
So this will return back the very first row.

140
00:09:02.670 --> 00:09:06.510
If I were to do something like negative 1 that should return back the very last row.

141
00:09:06.570 --> 00:09:12.030
In this case it's E or I can then use something like slice notation saying something like starting at

142
00:09:12.030 --> 00:09:15.960
zero go all the way up to but not including row three.

143
00:09:15.990 --> 00:09:22.080
So I run that and I get back indices 0 1 and 2 so all the way up to and not including three to the exact

144
00:09:22.080 --> 00:09:26.030
same slice notation that a normal Python List uses next.

145
00:09:26.190 --> 00:09:34.110
We can also drop rows by name so I can simply say def thought drop C in this case I actually don't need

146
00:09:34.110 --> 00:09:38.370
to specify x equals zero because by default access is equal to zero.

147
00:09:38.610 --> 00:09:40.500
Again note this is not a current place.

148
00:09:40.530 --> 00:09:46.110
So if I called the F C is still there I would need to reassign this in order to actually make this happen

149
00:09:46.110 --> 00:09:47.100
in place.

150
00:09:47.100 --> 00:09:51.630
Finally I want to show you how to select a subset of rows and columns at the same time.

151
00:09:52.110 --> 00:09:59.020
Let's imagine I want to add rows A and C but I only wanted the values for columns w and y for this.

152
00:09:59.130 --> 00:10:06.960
Well the way this works is I simply say def dot l O.C. And then what I can do here is I can say something

153
00:10:06.960 --> 00:10:17.460
like grab me row a comma for column W and I will giving back the value to this should look really similar

154
00:10:17.460 --> 00:10:20.010
to the same logic we used with NUM pi.

155
00:10:20.070 --> 00:10:26.490
Now what it could do is expand on this to then actually pass in a list of rows such as a let's go ahead

156
00:10:26.490 --> 00:10:32.210
and say See we run that and then we get back the values here which actually happened to coincide.

157
00:10:32.220 --> 00:10:37.800
These were both two and then I can expand on this to get back multiple columns.

158
00:10:37.800 --> 00:10:41.910
So just keep in mind that your brackets here should be balanced.

159
00:10:41.940 --> 00:10:45.770
Let's go out and ask for a W asks me y and the will you.

160
00:10:45.810 --> 00:10:47.400
And then we get back this result.

161
00:10:47.400 --> 00:10:52.980
So this is using dot l O.S. except now we can pass in not just rows but also columns as well to get

162
00:10:52.980 --> 00:10:58.560
subsets of the data frame we're going to end this lecture here and in the next lecture will cover a

163
00:10:58.560 --> 00:11:03.540
little bit more about some index details and then we'll cover also conditional selection which is probably

164
00:11:03.540 --> 00:11:08.040
one of the most important topics we're going to cover throughout this pandas section of the course.

165
00:11:08.040 --> 00:11:10.790
So definitely check out Part 2 in the very next lecture.

166
00:11:10.890 --> 00:11:12.720
We'll continue right where we left off.

167
00:11:12.750 --> 00:11:13.290
I'll see you there.
