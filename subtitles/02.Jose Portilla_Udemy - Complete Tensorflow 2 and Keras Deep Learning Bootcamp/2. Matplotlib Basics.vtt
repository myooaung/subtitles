WEBVTT
1
00:00:05.310 --> 00:00:06.360
Welcome back everyone.

2
00:00:06.420 --> 00:00:11.160
In this lecture we're going to have a quick crash course on the map plot lib plotting library for Python

3
00:00:12.190 --> 00:00:18.060
map plot lib is often referred to as the standard Python visualization library for Data Science and

4
00:00:18.060 --> 00:00:19.270
machine learning.

5
00:00:19.290 --> 00:00:25.140
Keep in mind that both Seabourn and Panda's built in plotting functionality are built using map plot

6
00:00:25.140 --> 00:00:26.560
lib library.

7
00:00:26.580 --> 00:00:31.410
So that means if later on you decide that you really just want to focus on using something like Seabourn

8
00:00:31.410 --> 00:00:37.230
for visualization because it has a simpler syntax you'll still be able to make map plot lib calls that

9
00:00:37.230 --> 00:00:42.360
directly connect with Seabourn because a lot of these other visualization libraries are built using

10
00:00:42.360 --> 00:00:48.360
map plot lib so we're gonna be using map plot lib throughout the course for this very basic plot types

11
00:00:48.690 --> 00:00:54.000
think of things like just plotting a simple line to see how our training performed in this lecture we're

12
00:00:54.000 --> 00:00:58.500
gonna learn just a few of those simple plots if you want to learn more and get a more in-depth look

13
00:00:58.590 --> 00:01:00.320
at what Matt Portillo is Cape Bulla.

14
00:01:00.450 --> 00:01:05.160
Make sure to visit the official online documentation at map plot lib dot org.

15
00:01:05.160 --> 00:01:09.830
All right let's head over to Jupiter notebook and just go over a few of the basic topics from Spotlight.

16
00:01:10.040 --> 00:01:10.310
OK.

17
00:01:10.320 --> 00:01:15.460
Here we are at a notebook or have already imported Empire's MP and pen this as PD.

18
00:01:15.720 --> 00:01:20.460
Next one I'm going to do is show you how to import map plot lib for plotting purposes which is import

19
00:01:20.670 --> 00:01:29.820
map plot lib and then let's say dot pi plot and then import it as P.L. t so keep in mind sometimes people

20
00:01:29.820 --> 00:01:31.130
forget this dot pi plot.

21
00:01:31.170 --> 00:01:38.970
Go ahead and add that in next morning when show is just how to simply plot an x ray versus a y array.

22
00:01:38.970 --> 00:01:46.080
So for example let's say I had these three points on the x axis 0 1 and 2 and on the y axis essentially

23
00:01:46.080 --> 00:01:51.720
I wanted to plot one hundred two hundred and three hundred and what I want to do is just do a very simple

24
00:01:51.720 --> 00:02:00.240
line plot of each x and y pair what I can do is say PDT dot plot and then say X comma Y and this is

25
00:02:00.240 --> 00:02:02.760
essentially the most basic line plot possible.

26
00:02:02.760 --> 00:02:09.900
We just have our x points 0 1 and 2 and then we have the one hundred two hundred three hundred and by

27
00:02:09.900 --> 00:02:13.200
default map published we'll go ahead and just do a line plot.

28
00:02:13.200 --> 00:02:19.110
Now if you're running this in Jupiter notebook and for some reason you only saw maybe a single output

29
00:02:19.140 --> 00:02:22.770
but you didn't actually see the image for older versions of Jupiter notebook.

30
00:02:22.830 --> 00:02:27.810
What you need to do is add in this magic command just somewhere at the top of your notebook and then

31
00:02:27.810 --> 00:02:28.210
run it.

32
00:02:28.230 --> 00:02:34.980
We need to do is say map plot lib space in line and you do this with a percent sign.

33
00:02:34.980 --> 00:02:39.610
So this is if you are using a notebook and for some reason you don't see the image.

34
00:02:39.660 --> 00:02:43.160
The latest version of Jupiter notebook should show the images but just in case it did it.

35
00:02:43.260 --> 00:02:47.460
You can go ahead and run what's known as a magic command in Jupiter which starts with this percent sign

36
00:02:47.730 --> 00:02:49.440
which is just map live in line.

37
00:02:49.440 --> 00:02:53.850
And then if you rerun guilty that plot you should be able to see this.

38
00:02:53.880 --> 00:02:58.800
Now if you're running this as a dot pi script what you need to do is right after the appeal to that

39
00:02:58.800 --> 00:03:03.590
plot run PDT dot show open and close parentheses.

40
00:03:03.720 --> 00:03:08.280
You'll notice that when I ran Pulte that show I no longer see that little output of the line.

41
00:03:08.280 --> 00:03:13.740
So keep that in mind if you're running this as a dot pi script you need to add an appeal to that show.

42
00:03:13.740 --> 00:03:18.870
OK so what we're going to do here is just show you just a couple of basic tools for just quick basic

43
00:03:18.870 --> 00:03:19.800
plots.

44
00:03:19.800 --> 00:03:26.430
I'm going to copy and paste a data frame that we have in the lecture notebook.

45
00:03:26.430 --> 00:03:31.650
So I am just going to copy paste this is from the lecture notebook on map plot lib which really quickly

46
00:03:31.650 --> 00:03:34.050
creates a housing data frame for us.

47
00:03:34.050 --> 00:03:38.370
This is typical of maybe what we're going to see throughout the course something like a feature like

48
00:03:38.370 --> 00:03:41.420
the number of rooms versus the price.

49
00:03:41.430 --> 00:03:47.730
So what I want to do here is do some sort of scatter plot of the rooms versus the price.

50
00:03:47.760 --> 00:03:52.680
So one way I can do that is by simply saying Pulte and for a simple scatter plot.

51
00:03:52.680 --> 00:04:00.660
I can call peel tea that scatter passin rooms and you'll notice with Peel tea that scatter if I do shift

52
00:04:00.660 --> 00:04:01.410
wrap here.

53
00:04:01.480 --> 00:04:05.260
It takes them what you want on the x axis first and then what you want on the y axis.

54
00:04:05.380 --> 00:04:11.380
So we'll say peel tea scatter housing rooms and then housing price.

55
00:04:11.400 --> 00:04:16.500
So we pass in those two series and then map the liberal go ahead and plot this out as a scatter plot

56
00:04:16.500 --> 00:04:17.470
for this.

57
00:04:17.490 --> 00:04:22.530
Now if you accidentally just did peel tea plot what's going to happen it's going to automatically think

58
00:04:22.530 --> 00:04:23.280
it's a line plot.

59
00:04:23.640 --> 00:04:24.740
So just keep that in mind.

60
00:04:24.780 --> 00:04:27.780
In this particular case we wanted that scatter.

61
00:04:27.780 --> 00:04:35.330
So we'll go ahead and say peel tea scatter so there's a couple of things we can do for style calls here.

62
00:04:35.330 --> 00:04:44.360
You'll notice that if I recall peel t that plot x comma Y and run this my axes starts a little bit before

63
00:04:44.620 --> 00:04:46.160
0 here at the edge.

64
00:04:46.250 --> 00:04:48.470
And also there's no labels or titles.

65
00:04:48.470 --> 00:04:54.350
So let's first show you how to add in labels and titles for a title at the top of your plot.

66
00:04:54.390 --> 00:04:59.260
We're gonna say PDT that title to label your axes.

67
00:04:59.270 --> 00:05:05.370
We can say peel T X label for the x axis label and then you just pass on whatever string you want.

68
00:05:05.840 --> 00:05:11.630
And then for the Y label you say peel t that y label and pass in again whatever string you want.

69
00:05:11.660 --> 00:05:17.210
So then when I rerun this I can see here title y label and X label.

70
00:05:17.210 --> 00:05:21.920
And if for some reason you don't want to see this output you can just add a semicolon at the very end

71
00:05:22.010 --> 00:05:26.900
of your last my plot lib command run that and it will go ahead and remove from the Jupiter notebook

72
00:05:27.290 --> 00:05:30.210
a little output and just show you the image.

73
00:05:30.230 --> 00:05:35.150
Now another question I get from students is how to actually affect the axes limits.

74
00:05:35.150 --> 00:05:37.940
Notice here it looks like the line stops a little short.

75
00:05:38.030 --> 00:05:44.390
It might be nice if we just cut off the plot from 0 to 2 on the x axis instead of extending past it

76
00:05:44.450 --> 00:05:53.860
a little bit for that what I can do is after I call Pulte that plot I will add in a command X limb and

77
00:05:53.860 --> 00:05:58.740
then for this I set my lower limit such as zero and then my upper limit such as two.

78
00:05:58.780 --> 00:06:02.490
So notice right now it goes before zero and after two.

79
00:06:02.630 --> 00:06:08.590
But if I run this from a new x limits rerun that so you'll notice now it starts at exactly zero.

80
00:06:08.590 --> 00:06:10.380
And it goes to exactly 2.

81
00:06:10.540 --> 00:06:13.150
And I can actually do the same for my y axis.

82
00:06:13.150 --> 00:06:17.260
I can say y limb and really I can set this to whatever I want.

83
00:06:17.260 --> 00:06:24.940
So maybe I could set this starting at 0 and then go all the way to 300 and others now though why limit

84
00:06:25.270 --> 00:06:27.580
on the y axis actually starts at zero.

85
00:06:28.150 --> 00:06:28.900
So keep that in mind.

86
00:06:29.290 --> 00:06:34.540
I can't add titles and labels with these three commands and I can set my limits with these two commands

87
00:06:35.290 --> 00:06:38.740
last what I can do is add in colors and markers.

88
00:06:38.800 --> 00:06:43.120
We don't really mess around with this too much in my plot lib instead we'll be using Seabourn for something

89
00:06:43.120 --> 00:06:43.740
like this.

90
00:06:43.870 --> 00:06:48.940
But if you wanted to change the color you could say color is equal to and then you can pass in any main

91
00:06:48.940 --> 00:06:53.980
color string such as red and all lowercase run that and it will change the color.

92
00:06:54.190 --> 00:06:59.560
If you're looking for a more particular color what you can do is if you google search hex color picker

93
00:06:59.980 --> 00:07:04.810
what happens is you get the ability to then kind of choose whatever color you want here and then it

94
00:07:04.810 --> 00:07:05.700
will return back.

95
00:07:05.740 --> 00:07:12.650
This hex code then you can just go ahead and copy that and then paste that in as your color.

96
00:07:12.670 --> 00:07:13.950
And then when you run that you'll notice.

97
00:07:13.960 --> 00:07:16.850
Now you're able to do essentially any color you want.

98
00:07:16.850 --> 00:07:22.270
The other thing to note here is that you can decide on a marker to mark each of the points and you can

99
00:07:22.270 --> 00:07:25.830
check out the map plot lib documentation for what markers are options.

100
00:07:25.930 --> 00:07:33.760
They can do a lowercase o to see a little dot there or you can do something like an asterix or an asterisk.

101
00:07:33.770 --> 00:07:35.600
If we run that we can see a little star.

102
00:07:35.630 --> 00:07:37.850
So there's lots of different marker options.

103
00:07:37.880 --> 00:07:45.180
If you want to make them a little larger you can say marker size is equal to and then just kind of choose

104
00:07:45.180 --> 00:07:45.990
an integer size.

105
00:07:45.990 --> 00:07:51.360
So for example if I wanted to make them really large I could say marker size 15 and the should be 15

106
00:07:51.360 --> 00:07:52.690
times larger than average.

107
00:07:52.830 --> 00:07:54.150
Or by default.

108
00:07:54.150 --> 00:07:57.230
And then we can also affect things like line style.

109
00:07:57.460 --> 00:08:03.580
And for example I can pass in two dashes there for a string code and that gives me back a dash line.

110
00:08:03.630 --> 00:08:08.010
So for these sort of things as far as what string options are available to us or a parameter calls are

111
00:08:08.010 --> 00:08:09.060
available.

112
00:08:09.480 --> 00:08:12.330
If you do shift type here you'll notice it actually doesn't tell you.

113
00:08:12.330 --> 00:08:18.030
Instead we have to do is you have to kind of go through these examples here and eventually talk about

114
00:08:18.030 --> 00:08:24.270
things like line with marker size line style etc. and you'll notice this is a extremely long documentation

115
00:08:24.270 --> 00:08:27.650
string because it has all the options available for you here.

116
00:08:27.690 --> 00:08:32.910
So that is it has kind of all the styles line thickness etc. all there for you so you can check that

117
00:08:32.910 --> 00:08:35.740
out in the docs string or just go to the documentation.

118
00:08:35.910 --> 00:08:40.500
As far as this lecture is concerned the main thing you should know how to do is just a very simple scatter

119
00:08:40.500 --> 00:08:43.680
plot or a very simple line plot.

120
00:08:43.680 --> 00:08:47.460
That's essentially all we're really gonna be using map plot lib for later on in the course.

121
00:08:47.460 --> 00:08:52.950
We may be doing a couple of things like editing x limits and Y limits for other plots but really this

122
00:08:52.950 --> 00:08:56.630
is all we need to know about map plot lib for the rest of the course.

123
00:08:56.640 --> 00:09:01.530
Thanks and I'll see you at the next lecture where we discuss the basics of the seaborne plotting library.
