WEBVTT
1
00:00:05.840 --> 00:00:06.840
Welcome back everyone.

2
00:00:06.890 --> 00:00:11.870
In this lecture we're going to focus on creating an API that we can call now that we already have a

3
00:00:11.870 --> 00:00:13.790
basic flask application running.

4
00:00:13.850 --> 00:00:17.070
Let's combine it with the prediction function that we created earlier.

5
00:00:17.090 --> 00:00:22.310
We'll go ahead and copy and paste that prediction function and set it up along with the flask application

6
00:00:22.310 --> 00:00:23.600
with another view.

7
00:00:23.600 --> 00:00:26.060
That way we can send a chase on request.

8
00:00:26.090 --> 00:00:33.160
In this case we'll use postmen to do it and then we'll get a answer or prediction back from our function.

9
00:00:33.200 --> 00:00:34.480
Let's go ahead and get started.

10
00:00:34.480 --> 00:00:37.550
I'm gonna open up the same file we're working with last time okay.

11
00:00:37.640 --> 00:00:43.940
Here's the my example dot pi file we're working with last time we're going to do is I'm going to copy

12
00:00:43.940 --> 00:00:49.370
and paste my return prediction function from our notebook that we worked on in the very beginning of

13
00:00:49.370 --> 00:00:51.320
this series of lectures.

14
00:00:51.320 --> 00:00:58.390
So go ahead and at the very top or we're going to do is we're first going to add in the imports necessary

15
00:00:58.390 --> 00:00:59.580
to run our model.

16
00:00:59.770 --> 00:01:12.190
And so those are important pi as MP and then from tensor flow that carries that model's import Load

17
00:01:12.190 --> 00:01:20.750
model and then we'll also need to import job lip to actually import the flower model as well as the

18
00:01:20.780 --> 00:01:22.060
flower scaler.

19
00:01:22.190 --> 00:01:29.490
So we'll go ahead and do after that is the following we'll say copy and paste the return prediction

20
00:01:29.490 --> 00:01:30.350
function.

21
00:01:30.360 --> 00:01:34.650
So this is the exact prediction function we created in the very beginning of this lecture series and

22
00:01:34.650 --> 00:01:41.670
all it does just takes in a model a scalar in a sample J some file and then now analyses it scales it

23
00:01:41.760 --> 00:01:43.470
and then predicts the class.

24
00:01:43.470 --> 00:01:48.800
So we'll go ahead and add that in and then we're going to do is we'll go ahead and create our flask

25
00:01:48.860 --> 00:01:50.050
application.

26
00:01:50.090 --> 00:01:54.350
After that we have our home page rule and then we're going to create a new route.

27
00:01:54.440 --> 00:02:00.050
But before we create that new route what we need to make sure to do is load the model and the scalar.

28
00:02:00.050 --> 00:02:07.250
So we'll say our flower model is equal to load model and you'll pass in the entire file path to the

29
00:02:07.250 --> 00:02:14.060
DOT H5 file in my case this example file is located in the same folder as our H5 file.

30
00:02:14.060 --> 00:02:22.500
So I'll just type in final Iris model dot H5 please keep in mind if this my example that pi file is

31
00:02:22.500 --> 00:02:28.080
located somewhere else on your computer you'll need to provide the full file path and then we'll say

32
00:02:28.080 --> 00:02:40.570
flower scalar is equal to job lib dot load and then Iris scalar dot pickle file okay.

33
00:02:40.620 --> 00:02:44.570
Essentially the same lines of code that we set up at the very bottom of our notebook.

34
00:02:45.000 --> 00:02:47.730
So we loaded up our model load it up scalar next.

35
00:02:47.880 --> 00:02:53.820
It's time to actually create a routing view that would accept that API Jason request and return back

36
00:02:53.820 --> 00:02:54.740
an answer.

37
00:02:54.810 --> 00:03:05.360
So we're gonna say at app that route and in this case let's go ahead and give this to route of forward

38
00:03:05.360 --> 00:03:15.540
slash API forward slash flower and what we need to do is say methods is equal to list and then all caps

39
00:03:15.540 --> 00:03:22.410
post essentially saying that this particular routing page for a web application accepts post requests

40
00:03:23.400 --> 00:03:32.550
and then will define this function as something like flower prediction and then we take the content

41
00:03:33.180 --> 00:03:38.170
and say that's equal to request dot Jason.

42
00:03:38.250 --> 00:03:39.560
So what does that actually mean.

43
00:03:39.570 --> 00:03:45.360
Essentially what's going to happen is when we actually send something to this page it's going to be

44
00:03:45.420 --> 00:03:49.620
in a request form and then we'll grab the Jason from it in order to use this.

45
00:03:49.630 --> 00:03:55.290
We need to do is scroll back up here and say from flask import not just flask anymore but now we also

46
00:03:55.290 --> 00:03:57.510
need to add in that request.

47
00:03:57.510 --> 00:03:59.340
So that's where a request is coming from.

48
00:03:59.340 --> 00:04:05.510
And then later on we're also going to do is use Jason ify to actually return the results.

49
00:04:05.520 --> 00:04:13.520
So say Jason ify and these are all already built into flasks so you just import flask requests.

50
00:04:13.550 --> 00:04:17.690
And Jason ify essentially using requests to actually accept the.

51
00:04:17.720 --> 00:04:22.050
Jason requests data and then using Jason ify to send the back out.

52
00:04:22.130 --> 00:04:23.420
So we come back down here.

53
00:04:23.600 --> 00:04:25.420
We'll go ahead and take the requests.

54
00:04:25.460 --> 00:04:26.750
Grab the Jason from it.

55
00:04:26.750 --> 00:04:29.090
And that's essentially the content itself.

56
00:04:29.090 --> 00:04:33.800
And that content is what we pass in to our return prediction function.

57
00:04:33.800 --> 00:04:41.780
So I will say results is equal to return prediction where my model is equal to the flower model that

58
00:04:41.780 --> 00:04:49.130
I just created or loaded up the flower scalar is the scalar and then the sample Jason is the content

59
00:04:50.620 --> 00:04:56.490
after that we will simply say go ahead and return not just the results but since I want to return this

60
00:04:56.500 --> 00:04:57.190
as Jason.

61
00:04:57.730 --> 00:05:03.710
I'll say Jason ify the results recalled the results essentially just a single string.

62
00:05:03.820 --> 00:05:06.330
OK so that's all you should have to do.

63
00:05:06.370 --> 00:05:08.740
Go ahead and save our changes.

64
00:05:08.740 --> 00:05:13.510
Make sure you say the changes of the ways you won't see anything then open up your Anaconda prompt that

65
00:05:13.510 --> 00:05:14.770
your command line.

66
00:05:14.770 --> 00:05:21.860
And now what we're going to do is we'll say python and we'll run my example dot pi.

67
00:05:21.860 --> 00:05:28.880
Go ahead and hit enter and you should see actually a little bit possibly of tensor flow uploading since

68
00:05:28.880 --> 00:05:34.430
we are importing it at the very beginning of the top pile but eventually after uploads this we should

69
00:05:34.430 --> 00:05:38.450
notice here is that it says that the server is running.

70
00:05:38.600 --> 00:05:46.380
So then go ahead and open up your browser and upon opening the browser you should see when you go to

71
00:05:46.740 --> 00:05:51.610
1 2 7 0 0 1 5 thousand you'll see flask app is running.

72
00:05:52.110 --> 00:05:57.930
So this confirms that the home page routing is running well you need to do now is you need to download

73
00:05:58.410 --> 00:05:59.370
postman.

74
00:05:59.370 --> 00:06:03.810
So let me show you how to do that for posting what you're going to be doing is going to Google dot com

75
00:06:03.930 --> 00:06:11.020
and just say postman download hit enter and you should see right at the top download the postman app

76
00:06:11.050 --> 00:06:18.340
which is that postman dot com click on that link and postman is available for Windows and Mac OS and

77
00:06:18.340 --> 00:06:23.200
Linux so make sure you're choosing the correct download whether it's 32 bit or 64 bit for windows or

78
00:06:23.200 --> 00:06:26.350
if you're a Mac OS or Linux download the correct versions there.

79
00:06:26.470 --> 00:06:31.870
Essentially what it is it's this nice graphical user interface for sending out Jason requests which

80
00:06:31.870 --> 00:06:36.130
is why we're going to be using it here later on we'll also show you how to run this programmatically

81
00:06:36.490 --> 00:06:41.410
go ahead and download and install postman and then open it up on your computer.

82
00:06:41.440 --> 00:06:46.750
I'm going to forward to downloading it and opening it since I already have postman installed.

83
00:06:46.840 --> 00:06:47.140
All right.

84
00:06:47.170 --> 00:06:51.610
Upon launching postman it may ask you to register but you should see at the bottom that you can skip

85
00:06:51.610 --> 00:06:54.100
the registration and just use postman itself.

86
00:06:54.100 --> 00:06:59.260
Then we're here at the essentially main home page of postman where we're going to do is create a new

87
00:06:59.260 --> 00:07:03.990
request with postman to send Jason to our running web application as an API.

88
00:07:04.180 --> 00:07:09.320
So go ahead and click on new here and then we're going to do is send a request.

89
00:07:09.370 --> 00:07:11.450
So it will send a basic request here.

90
00:07:11.620 --> 00:07:18.700
You can go ahead and give this request the name such as flower prediction and then you can give it a

91
00:07:18.700 --> 00:07:28.110
request description essentially pass flower measurements get back.

92
00:07:28.270 --> 00:07:31.100
Flower class prediction.

93
00:07:31.140 --> 00:07:34.260
OK so we already have the crest name.

94
00:07:34.260 --> 00:07:36.490
You already have the past five prediction.

95
00:07:36.540 --> 00:07:39.480
Then we just need to select a collection to save this too.

96
00:07:39.540 --> 00:07:45.120
Or you can create a new collection to create a new collection called this prediction models or whatever

97
00:07:45.120 --> 00:07:46.270
you want.

98
00:07:46.380 --> 00:07:50.150
Select that and then say saved prediction models.

99
00:07:50.160 --> 00:07:56.060
OK so now you have this graphical interface for actually sending requests.

100
00:07:56.070 --> 00:07:58.920
First thing want to do is select the correct request.

101
00:07:58.920 --> 00:08:00.330
You are not getting data.

102
00:08:00.330 --> 00:08:03.240
We are posting data to the web application.

103
00:08:03.240 --> 00:08:06.780
So this is a post request and then we need to enter the request.

104
00:08:06.780 --> 00:08:13.580
You are all recall that if you go to your command prompt or this is all running right now everything

105
00:08:13.580 --> 00:08:18.150
is running on one to seven point zero point zero point one cone five thousand.

106
00:08:18.150 --> 00:08:20.910
So that's essentially a local connection.

107
00:08:20.910 --> 00:08:29.130
And then if you take a look at your sublime code recall that this actual view or this routing for the

108
00:08:29.130 --> 00:08:36.030
prediction runs at Forward slash API forward slash flower and it accepts post methods.

109
00:08:36.030 --> 00:08:40.410
So that means what we're going to do here is what we're entering the request you are all we're going

110
00:08:40.410 --> 00:08:48.690
to say HDP colon forward slash forward slash and then one two seven point zero point zero point one

111
00:08:49.250 --> 00:08:54.450
colon five thousand and then forward slash API forward slash flower.

112
00:08:54.450 --> 00:08:58.070
So this first half comes from the actual web application at the command line.

113
00:08:58.200 --> 00:09:03.150
The second half comes from the actual routing decorator in the flask function.

114
00:09:03.180 --> 00:09:03.740
Okay.

115
00:09:04.020 --> 00:09:07.850
So next thing we need to do is select what we're actually going to send.

116
00:09:08.100 --> 00:09:19.010
We'll click on body here and we're going to then select raw and then from raw select Jason.

117
00:09:19.090 --> 00:09:19.740
Okay.

118
00:09:19.810 --> 00:09:26.390
Now it's time to actually send the Jason code in the same format that's expected so that's going to

119
00:09:26.390 --> 00:09:30.950
look something like this will say curly braces.

120
00:09:31.080 --> 00:09:39.390
And then with double quotes we say simple underscore length and then we'll say here colon five point

121
00:09:39.520 --> 00:09:42.020
one comma.

122
00:09:42.150 --> 00:09:44.420
Let's do another feature here.

123
00:09:44.460 --> 00:09:56.620
Next one is simple with colon let's say three point five Comma next one here will be pedal length colon

124
00:09:56.860 --> 00:10:05.440
one point four comma and then finally pedal with and we'll give it the example of zero point two and

125
00:10:05.440 --> 00:10:08.390
then another set of curly braces to finish this off.

126
00:10:08.390 --> 00:10:12.310
Okay once that's done you'll go ahead and send this.

127
00:10:12.370 --> 00:10:18.450
So then say send and you should make sure that your application is running.

128
00:10:18.450 --> 00:10:23.100
Once you send this request and your application is running and you don't have any typos in your application

129
00:10:23.550 --> 00:10:25.390
eventually you should see a status 200.

130
00:10:25.390 --> 00:10:25.750
OK.

131
00:10:25.770 --> 00:10:33.250
That's an h t mental status code and we see back here the actual returns prediction as Jason and it's

132
00:10:33.270 --> 00:10:34.380
so Tosa.

133
00:10:34.430 --> 00:10:34.830
OK.

134
00:10:34.860 --> 00:10:41.940
So this is now how you would use your flex flask web application along for your model as an API request

135
00:10:42.090 --> 00:10:46.920
using something like postmen and if you're already familiar with different ways of sending API requests

136
00:10:46.920 --> 00:10:52.380
through a post method you can now see how you could send this Jason code through whatever your preferred

137
00:10:52.380 --> 00:10:52.940
method is.

138
00:10:52.950 --> 00:10:56.110
But postman happens to be one of the easiest for testing.

139
00:10:56.130 --> 00:11:02.190
And so what we did right now is we combine our tensor flow model with a flask web application to create

140
00:11:02.280 --> 00:11:05.130
an API that can be requested through Jason.

141
00:11:05.130 --> 00:11:09.540
Coming up next we're going to do is we're going to show you how you could send this request using basic

142
00:11:09.540 --> 00:11:10.720
Python code as well.

143
00:11:10.800 --> 00:11:14.010
In case you wanted to do this programmatically I'll see you at the next lecture.
