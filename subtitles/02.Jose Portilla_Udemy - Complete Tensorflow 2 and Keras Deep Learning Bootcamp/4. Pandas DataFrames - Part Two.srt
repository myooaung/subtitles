1
00:00:05,510 --> 00:00:06,770
Welcome back everyone.

2
00:00:06,770 --> 00:00:11,050
Here we are where we left off last time in part one of our theta friends lectures.

3
00:00:11,150 --> 00:00:16,360
We learned how to actually grab information from the data frame based off a column location or Arrow

4
00:00:16,370 --> 00:00:18,170
location or both.

5
00:00:18,170 --> 00:00:23,890
Now what we're going to do is learn how to grab information off a data frame based off a certain condition.

6
00:00:23,900 --> 00:00:29,620
Here we have our original data frame with columns WXYZ and rows A through E.

7
00:00:29,660 --> 00:00:36,140
Now let's imagine I wanted to maybe grab the subset of the data frame where we only had positive values.

8
00:00:36,140 --> 00:00:41,180
Well what way we can do this is by asking where is the data frame greater than zero.

9
00:00:41,390 --> 00:00:46,020
Essentially performing a comparison operation across the entire data frame.

10
00:00:46,050 --> 00:00:48,080
What happens is we get a data frame back.

11
00:00:48,120 --> 00:00:53,660
However this is now a data frame of boolean values where we get true where the condition is true.

12
00:00:53,670 --> 00:00:56,790
So we have a positive number or false where the condition is false.

13
00:00:56,850 --> 00:00:58,910
So we have negative numbers there.

14
00:00:58,950 --> 00:01:04,530
If we were to use this as a filtering condition basically passing it into the data frame as a condition

15
00:01:05,070 --> 00:01:09,880
what happens is pandas removes all the values that happen to be false.

16
00:01:10,020 --> 00:01:16,380
So we get these not a numbers or basically missing data then what we can do is later on learn about

17
00:01:16,380 --> 00:01:21,430
how to work with missing data and remove those values or fill them in or something else now.

18
00:01:21,430 --> 00:01:26,500
Typically these columns in our data sets are going to represent features and we're going to want to

19
00:01:26,500 --> 00:01:28,980
filter based off of those features.

20
00:01:28,990 --> 00:01:31,720
So for example we take a look at our original data frame.

21
00:01:31,750 --> 00:01:33,840
I have data frame with the columns.

22
00:01:33,850 --> 00:01:35,580
They'll be X Y and Z.

23
00:01:35,680 --> 00:01:41,790
Let's imagine I wanted to filter out my entire data frame based off conditions occurring in x.

24
00:01:41,830 --> 00:01:48,500
So I wanted to grab where X happened to be greater than zero.

25
00:01:48,580 --> 00:01:55,570
If we take a look at this it gives us back a series where we have the index values ABC the E and the

26
00:01:55,570 --> 00:01:59,190
corresponding boolean as they happen to correspond with the statement.

27
00:01:59,350 --> 00:02:04,930
So you can see the X is negative on B and D so we get a false there.

28
00:02:04,930 --> 00:02:10,390
And what we do is we can take this condition and essentially broadcast it across the entire data frame

29
00:02:10,660 --> 00:02:12,400
based off these index locations.

30
00:02:12,430 --> 00:02:16,150
So what it ends up doing is it only returns back the true rows.

31
00:02:16,180 --> 00:02:23,380
So we should only get back roads a C an E if we take this condition and pass that into our data frame.

32
00:02:23,560 --> 00:02:25,630
And this is very very common with pandas.

33
00:02:25,630 --> 00:02:27,660
We're gonna be doing this sort of thing all the time.

34
00:02:27,820 --> 00:02:32,120
So if there's one thing you get out of this section is understanding conditional selection of pandas.

35
00:02:32,320 --> 00:02:34,060
We go ahead and run this here.

36
00:02:34,090 --> 00:02:39,030
We get back the data frame results where X was greater than zero.

37
00:02:39,040 --> 00:02:43,290
Now keep in mind we can also now work off of this data frame.

38
00:02:43,330 --> 00:02:50,320
So since this itself is a data frame I can perform operations such as grabbing a single column like

39
00:02:50,320 --> 00:02:57,470
the W column off of this and I get back here the W column off of the data frame where x is greater than

40
00:02:57,470 --> 00:03:03,060
zero and I can do all sorts of things just as they would any normal data frame like Graham.

41
00:03:03,080 --> 00:03:07,730
The very first integer location row which would be these values here.

42
00:03:07,760 --> 00:03:13,130
So keep that in mind that it's really common to see pandas operations stacked on top of each other in

43
00:03:13,130 --> 00:03:15,620
one giant long line.

44
00:03:15,630 --> 00:03:20,880
Now I can actually select with multiple conditions here we're selecting on the singular condition of

45
00:03:20,880 --> 00:03:22,470
X being greater than zero.

46
00:03:22,470 --> 00:03:31,890
But what I can do is have two conditions maybe I want where DFW is greater than zero and where d if

47
00:03:31,890 --> 00:03:34,870
y is greater than one.

48
00:03:34,890 --> 00:03:37,410
So how do we actually combine these conditions of Kansas.

49
00:03:37,410 --> 00:03:39,250
Well there's a couple of steps.

50
00:03:39,270 --> 00:03:42,780
The first step is to write out the conditions you want to search for.

51
00:03:42,780 --> 00:03:46,430
So here I have my first condition where W is greater than zero.

52
00:03:46,470 --> 00:03:49,210
And my second condition where y is greater than one.

53
00:03:49,260 --> 00:03:56,320
Step number two which beginners often forget is to wrap each of these in parentheses.

54
00:03:56,510 --> 00:04:01,910
Then once they're wrapped in parentheses you have to decide if you want the actual filtering to be done

55
00:04:01,910 --> 00:04:05,640
with the end operator or the or operator.

56
00:04:05,780 --> 00:04:11,790
So the end operator is an ampersand which essentially shift seven on the keyboard.

57
00:04:11,810 --> 00:04:17,210
So here we can see that I'm asking for results to be returned back where both of these happened to be

58
00:04:17,210 --> 00:04:17,770
true.

59
00:04:17,780 --> 00:04:24,920
So this is an end if I want it to be returned back where either of them happens to be true I can use

60
00:04:24,920 --> 00:04:29,930
this pipe operator where the or operator let's go ahead and stick with Ampersand because that's usually

61
00:04:29,930 --> 00:04:35,730
the more common of the two that we're using and then we pass this entire thing into the data frame.

62
00:04:35,910 --> 00:04:39,990
And if you're a beginner with pandas and you see this giant line of code it can be pretty confusing

63
00:04:39,990 --> 00:04:44,610
at first but just break it down into its key components and it will begin to make sense.

64
00:04:44,670 --> 00:04:51,330
All we're doing is we're asking where DFW is greater than zero wrap that in parentheses and we also

65
00:04:51,330 --> 00:04:56,880
want the condition where DFW Y is greater than one to be true we take both of those connect them with

66
00:04:56,880 --> 00:05:02,580
either the ampersand for and for both conditions to be true or a pipe operator for either condition

67
00:05:02,580 --> 00:05:06,990
to be true and then pass that into our theta frame if we were to use the pipe operator.

68
00:05:07,080 --> 00:05:13,190
Well it looks like all the values in the data frame satisfy either this condition or this condition.

69
00:05:13,350 --> 00:05:20,130
However only these happen to satisfy both of these conditions and this is the exact kind of thing we're

70
00:05:20,130 --> 00:05:22,460
gonna be seeing all the time with pandas.

71
00:05:22,710 --> 00:05:28,950
Now a couple of more index details I want to go over is how to reset the index in case you have a named

72
00:05:28,950 --> 00:05:29,340
index.

73
00:05:29,340 --> 00:05:31,980
But you want to reset it to integer values.

74
00:05:31,980 --> 00:05:33,630
We take a look at our data frame.

75
00:05:33,720 --> 00:05:36,930
Let's imagine that here I have this named index.

76
00:05:36,930 --> 00:05:40,190
But let's imagine actually wanted it as a column itself.

77
00:05:40,260 --> 00:05:47,780
What it can do is say reset underscore index run that and it will actually create a new column for me

78
00:05:47,870 --> 00:05:54,590
called index with these old index values and the new index notified here in bold are just integer values

79
00:05:54,680 --> 00:05:57,070
0 1 2 et cetera.

80
00:05:57,080 --> 00:06:02,060
Keep in mind this is not permanent unless you actually assign it that way.

81
00:06:02,060 --> 00:06:09,890
So what I want to show you now is how we can take a column that exists already and set that as our index.

82
00:06:09,890 --> 00:06:17,650
So I'm going to create a list called New I.A. for new index and what I'm gonna do here is pass in some

83
00:06:17,650 --> 00:06:18,460
states.

84
00:06:18,580 --> 00:06:23,020
Keep in mind is going to have to have the exact same length as the number of rows we currently have

85
00:06:23,020 --> 00:06:25,220
in our data frame in order for this to work.

86
00:06:25,300 --> 00:06:32,530
So we'll go ahead to say California New York Wyoming Oregon and then Colorado.

87
00:06:32,530 --> 00:06:41,890
So we have our new index list and what I'm going to do is assign this as in your column by calling the

88
00:06:41,890 --> 00:06:47,740
column as if it already exists and then setting it equal to this new index.

89
00:06:48,190 --> 00:06:53,890
So here we have our data frame recall that we actually didn't make this resetting permanent if we wanted

90
00:06:53,890 --> 00:06:55,000
to make it permanent.

91
00:06:55,000 --> 00:07:00,640
We'd say def is equal to DFT reset index into the reassignment that way but right now I still want that

92
00:07:00,640 --> 00:07:01,920
old index.

93
00:07:01,960 --> 00:07:05,610
So let's imagine here that I actually didn't like this labeled index.

94
00:07:05,620 --> 00:07:07,830
It wasn't useful to me so I didn't want to save it.

95
00:07:08,020 --> 00:07:11,620
And instead I wanted the states column to be the index.

96
00:07:11,710 --> 00:07:20,080
What I can do is instead of resetting my index I call def set index and then pass in the column.

97
00:07:20,120 --> 00:07:22,600
I want to set it to such a states.

98
00:07:23,030 --> 00:07:27,170
And then when I run that it gets rid of your current index.

99
00:07:27,200 --> 00:07:30,530
Keep in mind it won't save it to another column if you just call the index.

100
00:07:30,530 --> 00:07:36,740
It'll completely remove it and then I'll take your old column here states and turn it into an index

101
00:07:37,190 --> 00:07:42,920
something that confuses students is they think the words states here is actually a column name that's

102
00:07:42,920 --> 00:07:43,780
actually not true.

103
00:07:43,940 --> 00:07:45,740
And it's denoted by the spacing.

104
00:07:45,920 --> 00:07:49,940
Notice that w x y z are on their own line and then a line below it.

105
00:07:49,940 --> 00:07:56,090
We see states basically what this indicates is that states is the name of this index.

106
00:07:56,090 --> 00:08:00,410
The only columns we currently have here are w x y z.

107
00:08:00,410 --> 00:08:02,940
Keep in mind if I say just set index.

108
00:08:03,290 --> 00:08:06,880
This effect is not permanent unless actually do the reassignment.

109
00:08:06,920 --> 00:08:15,530
So if I want the reassignment to occur I can say D F is equal to DFS set index run that and then I get

110
00:08:15,530 --> 00:08:17,870
back the state of frame permanently changed.

111
00:08:17,870 --> 00:08:23,820
That states is the name of the index to confirm that WXYZ are the columns.

112
00:08:23,840 --> 00:08:27,470
I can say the FDR columns and here I only see they'll be X Y Z.

113
00:08:27,470 --> 00:08:31,450
Notice I don't see states because states is just the name of that index.

114
00:08:31,460 --> 00:08:36,260
Now that I've said it by default indices usually don't have names which is why you see everything here

115
00:08:36,590 --> 00:08:38,790
on the same line finally.

116
00:08:38,810 --> 00:08:47,470
There is a couple of data frame summaries that are really useful such as DFT top describe which essentially

117
00:08:47,470 --> 00:08:52,600
just gives back a bunch of numerical information so provide summary statistics for each column such

118
00:08:52,600 --> 00:08:54,690
as the count each of these has five.

119
00:08:54,730 --> 00:09:00,240
The mean the standard deviation the minimum value for each column the maximum value and then the percentiles.

120
00:09:00,310 --> 00:09:01,920
So the fiftieth percentile.

121
00:09:01,990 --> 00:09:03,670
That's essentially same thing as the median.

122
00:09:03,760 --> 00:09:08,550
Essentially saying 50 percent of all points are below this number 50 percent are above it.

123
00:09:08,550 --> 00:09:14,890
The other ones that are useful are def the info telling you how many not Nulls and the data types and

124
00:09:14,890 --> 00:09:19,790
if you just want the data types you can also say DFT D types.

125
00:09:19,800 --> 00:09:21,660
OK that's it for this lecture.

126
00:09:21,740 --> 00:09:27,020
Makes you review that notebook carefully because conditional selection by pan this data frames is something

127
00:09:27,020 --> 00:09:29,580
going to be using all the time throughout the course.

128
00:09:29,600 --> 00:09:31,340
Thanks and I'll see you at the next lecture.
