1
00:00:05,310 --> 00:00:06,350
Welcome back.

2
00:00:06,420 --> 00:00:11,040
In this lecture we're going to be discussing the very basics of an umpire array which is our main data

3
00:00:11,040 --> 00:00:17,740
structure when working of nun pie and data sets and general so let's talk about how to create arrays.

4
00:00:17,970 --> 00:00:23,830
We'll discuss how to convert existing objects to an empire such as a normal Python list to an umpire.

5
00:00:24,240 --> 00:00:28,860
Then we'll show you some built in umpire functions to quickly generate useful arrays.

6
00:00:28,890 --> 00:00:33,510
Then we'll talk about creating arrays and matrices of random values often in data science a machine

7
00:00:33,510 --> 00:00:34,170
learning.

8
00:00:34,170 --> 00:00:39,360
We need to quickly create random values in a certain shape and then Pi has a lot of tools for that.

9
00:00:39,420 --> 00:00:43,950
Then we'll talk about some very basic array attributes such as data types and shapes.

10
00:00:43,950 --> 00:00:44,770
Let's get started.

11
00:00:44,790 --> 00:00:45,110
Okay.

12
00:00:45,120 --> 00:00:48,430
Here I am at my Jupiter notebook to begin using the PI.

13
00:00:48,450 --> 00:00:49,610
We want to import it.

14
00:00:49,830 --> 00:00:55,420
So we will say import num pi and then by convention we import on pi as N P.

15
00:00:55,440 --> 00:00:57,050
Be careful of the spelling of pi.

16
00:00:57,060 --> 00:00:59,930
Sometimes students get confused with capital ends a capital piece.

17
00:01:00,000 --> 00:01:04,980
Everything here should just be lowercase d stylized convention of capitalizing the end and the P is

18
00:01:04,980 --> 00:01:10,800
just for style izing in the actual naming of the library for things like documentation that when we

19
00:01:10,800 --> 00:01:15,930
import it you can import num pies and P let's first discuss how we actually create an umpire.

20
00:01:16,350 --> 00:01:20,800
So an umpire rays are essentially the main way we're gonna be using an umpire throughout this course.

21
00:01:20,880 --> 00:01:25,740
Now as discussed we can have a normal Python list and here I can create one.

22
00:01:25,770 --> 00:01:26,670
Just my list.

23
00:01:26,670 --> 00:01:27,790
One two three.

24
00:01:27,820 --> 00:01:34,950
And if I want to have this or cast it as an umpire a I can call the function and P array and then pass

25
00:01:34,950 --> 00:01:36,880
in my list object.

26
00:01:37,110 --> 00:01:40,640
And you'll notice now when it's displayed in the notes that it's an umpire.

27
00:01:40,710 --> 00:01:45,830
By having array at the front of this I can also do the same with a nested list.

28
00:01:45,930 --> 00:01:50,440
So go ahead and say nested list is equal to.

29
00:01:50,480 --> 00:01:56,870
I'm going to create a list of lists so we'll have 1 2 as the first object there.

30
00:01:56,890 --> 00:02:00,860
Then 3 4 and then 5 6.

31
00:02:01,000 --> 00:02:08,490
So notice here if I were to ask for my nested list back and just run this I just get back this list.

32
00:02:08,590 --> 00:02:16,740
But if I were to then transform this into a num pi array none PI will actually begin to keep in mind

33
00:02:17,040 --> 00:02:22,560
the shape of what's being passed then and it's going to format this as what is essentially a two the

34
00:02:22,560 --> 00:02:26,260
matrix of three rows by two columns.

35
00:02:26,400 --> 00:02:32,160
And we can see the actual dimensions here by the number of brackets or braces at the beginning and at

36
00:02:32,160 --> 00:02:32,720
the end.

37
00:02:32,730 --> 00:02:36,890
So this essentially indicates we're dealing with a two dimensional object.

38
00:02:37,050 --> 00:02:42,210
Now typically we're not gonna be just transforming normal Python objects to an umpire.

39
00:02:42,510 --> 00:02:45,890
Instead there's lots of useful built in ways to generate arrays.

40
00:02:45,990 --> 00:02:48,200
So let's cover a few of those.

41
00:02:48,210 --> 00:02:55,020
One way is to use and P arrange which is similar to num PIs built in range function so you can say NPR

42
00:02:55,020 --> 00:03:00,780
arrange it only has one hour here and then what we can do is if you do shift tab we'll tell you how

43
00:03:00,780 --> 00:03:01,370
it works.

44
00:03:01,380 --> 00:03:07,410
Essentially the same way as Python's built in range object where you have a starting point a stopping

45
00:03:07,410 --> 00:03:09,920
point and then an optional step size.

46
00:03:09,930 --> 00:03:17,010
So for example if we wanted all the integers between 0 and then up to but not including 10 we can say

47
00:03:17,130 --> 00:03:22,720
010 and that will give us starting at 10 go all the way up to but not including 10.

48
00:03:22,810 --> 00:03:26,200
So we see the numbers zero all the way to nine here.

49
00:03:26,200 --> 00:03:27,010
So keep that in mind.

50
00:03:27,040 --> 00:03:33,060
This stopping point is up to but not including it then we can also have an optional step size.

51
00:03:33,130 --> 00:03:36,000
So by default the step size is 1.

52
00:03:36,010 --> 00:03:39,230
So just go from one integer to the next in a step size of 1.

53
00:03:39,340 --> 00:03:44,770
But it can changes to be a step size of 2 which is kind of a quick way to get all the even numbers.

54
00:03:44,860 --> 00:03:47,330
So can they 0 2 4 6 8.

55
00:03:47,500 --> 00:03:51,580
And if for some reason I wanted to continue past this and actually get 10 in there then I would say

56
00:03:51,610 --> 00:03:56,620
go up to not including eleven rerun this and now it includes 10.

57
00:03:56,770 --> 00:04:02,130
So we have our STARTING POINT our stopping point which goes up to but not including the stop point at

58
00:04:02,140 --> 00:04:08,140
an optional step size parameter next often is the case and data science machine learning that we want

59
00:04:08,140 --> 00:04:13,990
to quickly create arrays of just a bunch of zeros or ones and to do this again number Pi has a built

60
00:04:13,990 --> 00:04:22,630
in convenience function called zeros and zeros if you just pass in one number such as three returns

61
00:04:22,690 --> 00:04:24,900
a vector of three zeros.

62
00:04:24,940 --> 00:04:29,950
Something to keep in mind here is you'll notice that it says zero point which essentially essentially

63
00:04:29,950 --> 00:04:35,530
indicates that these zeros are floating point numbers and often when you're working with NUM pi and

64
00:04:35,530 --> 00:04:37,250
then later on we'll learn about pandas.

65
00:04:37,270 --> 00:04:41,950
Things are going to be automatically converted to floating point precision numbers instead of being

66
00:04:41,950 --> 00:04:43,720
kept us integers.

67
00:04:43,720 --> 00:04:48,010
One of the few techniques we're gonna be learning about for keeping things and integers is this epic

68
00:04:48,070 --> 00:04:53,370
range pretty much all the other functions we learn about will convert things to floating point numbers.

69
00:04:53,560 --> 00:04:54,660
So we have NDP zeros.

70
00:04:54,670 --> 00:05:00,490
If you pass on a single number it gives you kind of this one the vector of just those three zeros but

71
00:05:00,490 --> 00:05:05,590
you can also say and P zeros and then pass in a shape.

72
00:05:05,590 --> 00:05:06,970
So if we do shift type here.

73
00:05:07,060 --> 00:05:09,910
Notice that they'll say What's the shape you want.

74
00:05:09,910 --> 00:05:14,620
So we can say something like give me a four by four matrix.

75
00:05:14,620 --> 00:05:17,760
And here we have again four rose by four columns all of zeros.

76
00:05:17,890 --> 00:05:21,360
Or I can begin to edit this and we'll see that the second dimension.

77
00:05:21,700 --> 00:05:25,060
So if I say four by ten lines up with the number of columns.

78
00:05:25,090 --> 00:05:26,560
So it's how many rows you want.

79
00:05:26,560 --> 00:05:32,350
By how many columns you want to hear we have four rows of ten columns of all zeros.

80
00:05:32,380 --> 00:05:37,720
And if you really want these zeros to be integers you can begin to edit this data type parameter so

81
00:05:37,720 --> 00:05:39,990
you can say these type is equal to I.A..

82
00:05:40,000 --> 00:05:43,810
If you really wanted these to be integers for pretty much all use cases we won't really have to worry

83
00:05:43,810 --> 00:05:50,140
about integers versus floating point numbers so we'll close that out so we know we know end p zeros.

84
00:05:50,140 --> 00:05:58,520
And similarly there's NDP ones which is just NDP ones and you can say NDP ones 3 which gives you a 1

85
00:05:58,520 --> 00:06:04,740
the vector of just a bunch of ones or you can also pass in a shape such as four by four.

86
00:06:04,910 --> 00:06:06,530
And there's my four by four.

87
00:06:06,530 --> 00:06:08,720
Notice the sets of double parentheses here.

88
00:06:08,730 --> 00:06:15,470
This is essentially indicating that in passing in as my first argument a parameter of a tuple and then

89
00:06:15,530 --> 00:06:21,780
these outside parentheses are for the actual function call itself next we have Lynne space which is

90
00:06:21,780 --> 00:06:27,600
a useful function which returns evenly spaced numbers over a specified interval not to be confused with

91
00:06:27,600 --> 00:06:33,900
what NPR range is doing which is setting a starting point a stopping point and then taking some arbitrary

92
00:06:33,900 --> 00:06:36,870
step size and peeling space instead.

93
00:06:37,290 --> 00:06:45,180
The way it works is we say MP Lynn space we give it a starting point and a stopping point but then we

94
00:06:45,180 --> 00:06:50,120
ask for the number of actual elements we want evenly spaced between those two points.

95
00:06:50,340 --> 00:06:56,430
So I can say three here run this and then I'll return back 0 5 10.

96
00:06:56,430 --> 00:07:02,310
So these are three points including zero and ten including the starting point and the stopping point

97
00:07:02,700 --> 00:07:09,060
and it's three points evenly spaced because in between 0 and 5 is five and in between 5 and 10.

98
00:07:09,090 --> 00:07:12,500
Well that's evenly spaced also be five if we asked for more.

99
00:07:12,540 --> 00:07:17,370
So for example let's go ahead and ask for something like 21 evenly spaced points.

100
00:07:17,460 --> 00:07:24,870
We run that and we get back 21 elements going from zero to 10 where the even spacing is zero point five.

101
00:07:24,960 --> 00:07:28,900
So to go from 0 5 the one to one point five etc..

102
00:07:28,950 --> 00:07:35,210
Now something to note here is that literally spaced calls actually include that stop value.

103
00:07:35,370 --> 00:07:41,040
So to obtain an array of what you may refer to as common fractions you may need to increase the number

104
00:07:41,040 --> 00:07:42,410
of items requested.

105
00:07:42,750 --> 00:07:46,230
So often beginners sometimes just go zero to 10.

106
00:07:46,290 --> 00:07:51,450
Give me 20 evenly spaced points and they get these sort of weird fraction calls or weird decimal places

107
00:07:51,900 --> 00:07:57,120
because we're including the stop value we may need to do something like increasing the number of items

108
00:07:57,120 --> 00:08:00,210
requested the twenty one in order to see these common fractions.

109
00:08:00,240 --> 00:08:02,280
So just keep that in mind of NPL in space.

110
00:08:02,340 --> 00:08:05,340
That's because it's actually including the stopping point this time.

111
00:08:05,340 --> 00:08:11,310
Now there's also the capability to create an identity matrix and I didn't see matrix is simply a matrix

112
00:08:11,340 --> 00:08:14,790
of all zeros with a one along the diagonal.

113
00:08:14,790 --> 00:08:23,010
So for example if we say NPD the eye of five it gives us a square five by five matrix with ones along

114
00:08:23,010 --> 00:08:23,730
the diagonal.

115
00:08:23,850 --> 00:08:26,690
And this is really useful for a lot of linear algebra tasks.

116
00:08:26,700 --> 00:08:32,940
The reason we all need to provide one number is because by definition an identity matrix is always square.

117
00:08:32,940 --> 00:08:37,240
OK so those are a couple of built in functions in number pi.

118
00:08:37,260 --> 00:08:40,340
Finally let's show you how to create random arrays.

119
00:08:40,440 --> 00:08:46,560
So there's lots of different functionalities with random and the way we do this is we say NDP not random

120
00:08:46,700 --> 00:08:47,440
dot.

121
00:08:47,520 --> 00:08:52,350
And if you were to hit tab here you notice that there's actually a bunch of different random function

122
00:08:52,350 --> 00:08:54,770
calls that none Pi has available to us.

123
00:08:54,780 --> 00:08:57,850
So many types of random distributions we can call from.

124
00:08:57,930 --> 00:09:02,710
So what we're gonna do is just show you a couple of very basic ones.

125
00:09:03,030 --> 00:09:08,700
There's NDP thought random thought Rand and if you ever are confused over what actual Rand distribution

126
00:09:08,700 --> 00:09:14,700
is returned you can simply do shift tab in the Jupiter notebook expand the documentation and report

127
00:09:14,700 --> 00:09:18,980
back to how it's actually grabbing that distribution of random numbers.

128
00:09:18,990 --> 00:09:26,670
So in this case just the call of R and D or Rand grabs random values from a uniform distribution meaning

129
00:09:26,670 --> 00:09:30,730
everything has the same likelihood of being picked from 0 to 1.

130
00:09:31,350 --> 00:09:39,250
So we'll go ahead and ask for for instance two random numbers and that will give you two random numbers

131
00:09:39,430 --> 00:09:41,960
with a uniform distribution between 0 and 1.

132
00:09:42,130 --> 00:09:47,080
And every time you keep running the cell notice you'll get back different random numbers all between

133
00:09:47,170 --> 00:09:48,400
0 and 1.

134
00:09:48,400 --> 00:09:56,680
Now let's say you actually wanted a matrix so the way this works is you say N.P. random thought Rand.

135
00:09:57,010 --> 00:10:02,980
And then instead of passing a tuple for this one what you can do is pass in two parameters let's say

136
00:10:03,070 --> 00:10:06,790
three rows by four columns run that.

137
00:10:06,940 --> 00:10:13,660
And now we have three rows by four columns all of random numbers between 0 and 1 where all the numbers

138
00:10:13,660 --> 00:10:17,400
change are on 1 had the same likelihood of being picked.

139
00:10:17,470 --> 00:10:24,490
OK so that was a uniform distribution but there's also the capability to grab it from a standard normal

140
00:10:24,490 --> 00:10:25,840
distribution.

141
00:10:25,840 --> 00:10:30,040
And for that we say N P random thought Rand N.

142
00:10:30,490 --> 00:10:34,870
So Rand N is doing the same thing from a standard normal distribution.

143
00:10:34,870 --> 00:10:36,270
A standard normal distribution.

144
00:10:36,460 --> 00:10:42,550
Essentially just means that the mean is zero and the variance is 1.

145
00:10:42,550 --> 00:10:45,830
So that will actually allow us to then get some negative numbers if we do this.

146
00:10:45,830 --> 00:10:48,510
So say I wanted five by five run this.

147
00:10:48,520 --> 00:10:50,080
And here we have some negative numbers.

148
00:10:50,110 --> 00:10:52,740
And this is a standard normal distribution.

149
00:10:52,800 --> 00:10:55,570
It's centered around zero 4 variance of 1.

150
00:10:55,630 --> 00:10:56,630
Okay.

151
00:10:56,740 --> 00:11:05,350
So we can actually grab random integers by saying N.P. thought random thought Rand I.A. and the way

152
00:11:05,380 --> 00:11:12,020
this works is we provide a low and the high and then optionally you can request a size.

153
00:11:12,070 --> 00:11:17,720
Keep in mind the lowest inclusive meaning the low has a chance of being picked and the highs exclusive.

154
00:11:17,770 --> 00:11:20,890
So the high will not have a chance of being picked.

155
00:11:20,890 --> 00:11:28,450
So let's go ahead and say we wanted to actually make some random values to try to simulate people's

156
00:11:28,450 --> 00:11:32,710
ages so we could say something like from one to one.

157
00:11:32,800 --> 00:11:34,700
Go ahead and give me a random number.

158
00:11:34,750 --> 00:11:36,790
And this is one way we could then generate random ages.

159
00:11:36,820 --> 00:11:42,400
So this person then is 56 years old and let's say we wanted to quickly generate 10 random ages.

160
00:11:42,400 --> 00:11:45,150
The second parameter is just how many we want.

161
00:11:45,160 --> 00:11:48,450
So you can ask for 10 and there's are 1 the vector.

162
00:11:48,490 --> 00:11:54,640
Keep in mind there's actually a size requested so we could say something like give me two by three as

163
00:11:54,640 --> 00:11:59,760
a tuple run that and it would kind of structure it out that way two rows by three columns.

164
00:11:59,770 --> 00:12:02,310
So that is Rand I.A..

165
00:12:02,420 --> 00:12:08,700
Now you may be wondering what if I actually want to do some sort of ran the numbers but have reproducibility.

166
00:12:08,760 --> 00:12:14,360
So every time I run this notebook or run this piece of code I end up generating the same random numbers.

167
00:12:14,370 --> 00:12:17,870
Well that's where a random seed can come into use.

168
00:12:17,880 --> 00:12:27,390
So what I'm going to show you is N.P. that random dot seed and the seed allows you to just pass forth

169
00:12:27,660 --> 00:12:29,320
an arbitrary number choice.

170
00:12:29,370 --> 00:12:33,810
So the actual number choice isn't that important the fact that's important is that you choose the same

171
00:12:33,810 --> 00:12:35,100
number every time.

172
00:12:35,130 --> 00:12:39,900
So let's say I want you to generate the same round the numbers on your computer that I'm about to generate

173
00:12:39,960 --> 00:12:40,850
on mine.

174
00:12:40,890 --> 00:12:44,220
All we can do is choose the same seed value.

175
00:12:44,220 --> 00:12:48,980
So I'll choose the seed value of forty two and you can go ahead and type that in and in the same cell.

176
00:12:49,080 --> 00:12:57,660
Let's go ahead and say N.P. thought random thought Rand and then just let's say I want four random numbers.

177
00:12:57,870 --> 00:12:58,650
We run this.

178
00:12:58,740 --> 00:13:03,660
And if you ran this the exact same way I did with the seed call and the random call in the same cell

179
00:13:04,140 --> 00:13:07,590
then you should see the exact same four random numbers.

180
00:13:07,590 --> 00:13:12,660
This is going to be really important later on in the course because while we do want some elements of

181
00:13:12,720 --> 00:13:18,000
randomness in many of our functions and data science a machine learning such as a random test train

182
00:13:18,000 --> 00:13:18,580
split.

183
00:13:18,810 --> 00:13:23,840
We want to make sure for reproducibility sake that your random splits and random values are going to

184
00:13:23,850 --> 00:13:25,890
be the same as I show in this notebook.

185
00:13:25,890 --> 00:13:28,970
And in order to do that we'll be using this seed.

186
00:13:29,010 --> 00:13:32,730
Now a question I often get from students is what's the meaning of this.

187
00:13:32,760 --> 00:13:39,120
Number 42 and it's basically just the arbitrary choice you use to seed what's known as a mercy and twister

188
00:13:39,480 --> 00:13:43,740
which is a way of generating these kind of pseudo random values.

189
00:13:43,860 --> 00:13:47,910
You can check out the reference link in the notebook for more information on that seed.

190
00:13:48,030 --> 00:13:54,510
But in our use cases basically we're just going to be using the same seed values as our choice.

191
00:13:54,510 --> 00:13:59,760
Now something to keep in mind is if I grab N.P. random thought Rand and then ask for this in another

192
00:13:59,760 --> 00:14:06,140
cell rerun this I will get now a different set of values than what I did up here.

193
00:14:06,180 --> 00:14:09,630
And that's because this is the second call after setting my seed.

194
00:14:09,630 --> 00:14:11,830
However I keep running these two.

195
00:14:11,870 --> 00:14:17,010
They'll always give me the same random values so often what I would say is try to make sure that your

196
00:14:17,010 --> 00:14:23,040
generation of the random numbers is occurring in the same cell as your actual seed value.

197
00:14:23,040 --> 00:14:27,780
That way you don't actually run the cell multiple times and you can see here on the fifth one is going

198
00:14:27,780 --> 00:14:31,850
to give you something different on the sixth one is gonna give you something different et cetera.

199
00:14:31,920 --> 00:14:37,050
So keep in mind if you want to reset your seed just go ahead and run that and then we'll kind of repeat

200
00:14:37,050 --> 00:14:37,700
that cycle.

201
00:14:38,150 --> 00:14:38,780
OK.

202
00:14:39,030 --> 00:14:40,300
So that's the seed.

203
00:14:40,650 --> 00:14:44,770
Finally I want to show you just a couple of useful array attributes and methods.

204
00:14:45,000 --> 00:14:51,670
So often what we can do is we can reshape a one day vector to any matrix shape we want.

205
00:14:51,670 --> 00:14:54,210
So let me go ahead and create an array.

206
00:14:54,210 --> 00:14:56,500
We'll do this by saying any pure range.

207
00:14:56,730 --> 00:14:57,810
Twenty five.

208
00:14:57,870 --> 00:14:59,340
Go ahead and run this.

209
00:14:59,340 --> 00:15:06,070
And I'm also going to create an array of random values will say ran arrays equal to N.P. random dot

210
00:15:06,630 --> 00:15:10,280
Rand I.A. and this will go from zero to 50.

211
00:15:10,300 --> 00:15:13,200
Let's go ahead and just say 10 here.

212
00:15:13,200 --> 00:15:20,010
So here's my normal array which is just the numbers 0 3 24 and my random array are going to be these

213
00:15:20,010 --> 00:15:21,090
numbers right here.

214
00:15:21,090 --> 00:15:24,600
Keep in mind depending on how you set your seat right now you may have different random values than

215
00:15:24,600 --> 00:15:24,890
I do.

216
00:15:24,920 --> 00:15:28,740
But that's not important for this particular part of the lecture.

217
00:15:28,740 --> 00:15:35,430
OK so let's say I wanted to reshape this array when you create a one the vector.

218
00:15:35,430 --> 00:15:37,710
You can ask for dot shape.

219
00:15:37,710 --> 00:15:43,200
Some actually show you that in a new cell I'm going to say array dot shape and you notice that right

220
00:15:43,200 --> 00:15:45,300
now it only has one dimension defined.

221
00:15:45,300 --> 00:15:48,270
It just says this is essentially twenty five numbers.

222
00:15:48,270 --> 00:15:57,740
What it can do is I can reshape this by saying R or a r reshape and I can reshape this to be five rows

223
00:15:57,740 --> 00:16:00,010
by five columns run that.

224
00:16:00,010 --> 00:16:04,660
And now I take in my original array and reshaped it to be five by five.

225
00:16:04,760 --> 00:16:08,960
Something to note is this doesn't actually affect the original object permanently.

226
00:16:09,110 --> 00:16:15,260
If I ask for array again I still get back the original if I wanted this to be permanent I could simply

227
00:16:15,260 --> 00:16:22,980
just reassign it to array is equal to array that reshape and here we can see the five by five.

228
00:16:23,090 --> 00:16:29,480
Some other things to keep in mind here is that you're not going to be able to reshape the array into

229
00:16:29,720 --> 00:16:32,980
a set of dimensions that doesn't make sense right now.

230
00:16:32,990 --> 00:16:37,120
This is five rows by five columns which means I have twenty five elements total.

231
00:16:37,130 --> 00:16:43,220
If I were to try to reshape that into something like three by six which would only be able to contain

232
00:16:43,280 --> 00:16:48,680
18 elements you will get an error and we'll basically say I cannot reshape something of size twenty

233
00:16:48,680 --> 00:16:52,850
five into a shape of three by six because there's only space for 18 elements.

234
00:16:52,850 --> 00:16:54,100
And here we have twenty five.

235
00:16:54,230 --> 00:16:58,270
So keep that in mind if you ever see that error with the reshape call.

236
00:16:58,280 --> 00:17:06,230
Finally I want to show you the min max an arc Max and arc Min parameters or attributes so we can take

237
00:17:06,230 --> 00:17:07,660
our random array.

238
00:17:07,730 --> 00:17:08,810
Here it is.

239
00:17:08,810 --> 00:17:12,290
And let's say I wanted to figure out what the max value of my array was.

240
00:17:12,290 --> 00:17:19,700
I'll go ahead and just say offer this thought M.A. X open and close parentheses and I'll return back

241
00:17:19,760 --> 00:17:22,160
the max value in the array which happens to be forty three.

242
00:17:22,160 --> 00:17:23,420
In my case.

243
00:17:23,420 --> 00:17:29,150
Now let's say I was actually interested in the location or index location of that max value the way

244
00:17:29,150 --> 00:17:32,240
that works is I say arg.

245
00:17:32,450 --> 00:17:37,620
Max run that and that will give me back the index location.

246
00:17:37,780 --> 00:17:43,780
So the index the second all Python lists starting at 0 so 0 1 2 3 4 5 6 7.

247
00:17:43,840 --> 00:17:46,120
And there's the max value of forty three.

248
00:17:46,180 --> 00:17:48,820
Similarly we can do the same with men.

249
00:17:48,880 --> 00:17:57,280
So I can ask for the minimum value which is 1 and I can also ask for the minimum value location which

250
00:17:57,280 --> 00:17:59,950
in this case is occurring at index 5.

251
00:18:00,040 --> 00:18:03,970
And finally there is the data type attribute.

252
00:18:03,970 --> 00:18:12,350
You can also grab the data type in the array so I can say something like ran R D type run that and I'll

253
00:18:12,350 --> 00:18:12,940
report back.

254
00:18:12,950 --> 00:18:19,580
This is a 32 bit integer or if I were to check some of my other ones for instance let's go ahead and

255
00:18:19,700 --> 00:18:23,380
set this machine a copy and paste this random array here.

256
00:18:23,780 --> 00:18:30,270
So my array run that we can see here that these look to be some sort of floating point I can always

257
00:18:30,270 --> 00:18:35,530
check that by saying what's my data type or D type.

258
00:18:35,610 --> 00:18:39,900
Notice I don't have open and close princes here because that's actually an attribute and will tell me

259
00:18:39,900 --> 00:18:42,370
that these are 64 floating bit numbers.

260
00:18:42,810 --> 00:18:49,020
Okay that's the very basics of no high res generating empire raise both built in functions and random

261
00:18:49,020 --> 00:18:52,800
values as well as things like shape reshape and data type.

262
00:18:52,920 --> 00:18:54,540
Thanks and we'll see you at the next lecture.
