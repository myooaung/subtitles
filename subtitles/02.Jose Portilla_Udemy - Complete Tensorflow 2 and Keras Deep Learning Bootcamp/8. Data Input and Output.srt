1
00:00:05,530 --> 00:00:06,680
Welcome back everyone.

2
00:00:06,700 --> 00:00:13,490
In this lecture we're going to discuss data input and output with pandas so throughout the course we're

3
00:00:13,490 --> 00:00:16,610
going to be reading our datasets from CSB files.

4
00:00:16,610 --> 00:00:19,560
But real world data can come from a variety of places.

5
00:00:19,610 --> 00:00:25,290
And fortunately pandas has a very robust I O toolset that we can use.

6
00:00:25,310 --> 00:00:29,840
Let's see a few of them in action and then we'll explore the rest of the documentation for them since

7
00:00:29,840 --> 00:00:33,770
there's quite a wide variety of data sources that pandas can read from.

8
00:00:33,950 --> 00:00:39,450
But here we're just really going to focus on reading from C.S. V's since that's what we use in the course.

9
00:00:39,500 --> 00:00:42,540
Let's head over to a Jupiter notebook and get started.

10
00:00:42,560 --> 00:00:44,600
All right here I am at the Jupiter notebook.

11
00:00:44,690 --> 00:00:48,410
I've already imported umpires and pee and pandas as PD.

12
00:00:48,410 --> 00:00:54,920
I want to quickly note that inside our pandas Crash Course folder if you open up our data input and

13
00:00:54,920 --> 00:01:00,440
output notebook which is what this lecture is based off of you can scroll down here and we have a link

14
00:01:00,770 --> 00:01:02,190
to the user guide.

15
00:01:02,210 --> 00:01:04,550
So really this user guide on input output.

16
00:01:04,640 --> 00:01:08,430
That's part of the official online documentation is the best resource.

17
00:01:08,450 --> 00:01:14,600
And if you go to that link it basically has the various format types that pandas can read in from and

18
00:01:14,600 --> 00:01:17,630
the actual reading call and the writer call.

19
00:01:17,660 --> 00:01:22,250
So for example let's imagine you're dealing with a Jason File and you want to know how do I read into

20
00:01:22,250 --> 00:01:23,400
Jason File.

21
00:01:23,420 --> 00:01:29,030
Well he's just come to this Io tool page and then click in here where it says read underscore Jason.

22
00:01:29,030 --> 00:01:33,700
And that basically gives you the information of the parameters you can call why you're reading in a

23
00:01:33,700 --> 00:01:38,760
Jason File so how to accept that and the format of the Jason string et cetera.

24
00:01:38,810 --> 00:01:41,940
So you can scroll down and check out all the various parameters.

25
00:01:41,960 --> 00:01:45,620
So this basically informs you of how to read in various data types.

26
00:01:45,620 --> 00:01:47,990
And it's not just reading but it's also the output.

27
00:01:47,990 --> 00:01:54,140
So if you wanted to read in that files Jason but maybe save it to some excel file you can just read

28
00:01:54,140 --> 00:01:59,740
here to excel click on that and then I'll inform you how to write Excel files to disk.

29
00:01:59,780 --> 00:02:03,200
So it has a lot of information there and a lot of examples as well.

30
00:02:03,320 --> 00:02:09,090
So really the number one resource for you to check out for pan this input and output is this page to

31
00:02:09,100 --> 00:02:11,310
a link to in the actual notebook.

32
00:02:11,360 --> 00:02:17,450
And we have this table copied for you for quick and easy access so we're going to first start off by

33
00:02:17,450 --> 00:02:21,890
learning and how to read in a CSP file since really that's what we're going to be working with throughout

34
00:02:21,890 --> 00:02:23,360
the rest of the course.

35
00:02:23,360 --> 00:02:26,960
So a key part of this is understanding file paths.

36
00:02:26,960 --> 00:02:30,200
So we reading in a CSB file.

37
00:02:30,200 --> 00:02:35,980
So for example here in pan this crash course I have some CSP files here for us to read in.

38
00:02:36,020 --> 00:02:41,750
Now what we need to make sure is that we understand the location of our notebook or our python script

39
00:02:41,930 --> 00:02:45,740
relative to the CSP file that we're trying to read.

40
00:02:45,770 --> 00:02:48,000
So you really have two options.

41
00:02:48,050 --> 00:02:56,110
One is to say PD the read CSB and then as a string just passing the CSB file.

42
00:02:56,180 --> 00:03:04,190
So for example I know there's a CSB file here called example that CSB and I should be able to tab autocomplete

43
00:03:04,730 --> 00:03:06,930
to confirm that it's there.

44
00:03:07,010 --> 00:03:12,320
So I run that and that automatically reads in the example that CSP file but let's say somewhere else

45
00:03:12,320 --> 00:03:21,290
on my computer I have some other file so somewhere else on my computer I say some file that CSP what's

46
00:03:21,290 --> 00:03:26,460
going to happen is it's going to get a file not found error because right now if I just pass in the

47
00:03:26,460 --> 00:03:33,650
string like this pan this assumes that this dot CSP file is in the same location as either this notebook

48
00:03:33,800 --> 00:03:37,720
or if you're running this as a dot pi file as the dot pi script.

49
00:03:37,730 --> 00:03:41,620
So in this case you'll get back something that says file not found error.

50
00:03:41,690 --> 00:03:44,210
So this also happens if you accidentally misspell the file.

51
00:03:44,720 --> 00:03:50,000
So if you said for whatever reason examples that CSP and ran that you would also get that file not found

52
00:03:50,000 --> 00:03:50,750
there.

53
00:03:50,750 --> 00:03:56,680
So if you're getting a file not found error there's essentially a couple of ways to fix this.

54
00:03:56,680 --> 00:04:03,640
One is to make sure that the file is in the exact same location as your notebook to see where your notebook

55
00:04:03,640 --> 00:04:04,610
is located.

56
00:04:04,630 --> 00:04:12,760
You can type P WD inside a cell and then run it and this will actually report back the file path that

57
00:04:12,760 --> 00:04:14,470
you're currently in.

58
00:04:14,470 --> 00:04:19,840
So again inside a Jupiter notebook you can type P WD which stands for print working directory and then

59
00:04:19,840 --> 00:04:21,040
that will report back.

60
00:04:21,080 --> 00:04:28,360
We're located so you could then move this some file that CSP to this folder and then just call it as

61
00:04:28,360 --> 00:04:30,400
such and then it would work again.

62
00:04:30,400 --> 00:04:36,820
The other option which is probably the recommended one is to actually pass in the full file path of

63
00:04:36,820 --> 00:04:39,870
the file that's located somewhere else on your computer.

64
00:04:40,030 --> 00:04:41,910
So that would look like this.

65
00:04:42,040 --> 00:04:47,160
I would say PD that read CSB and then for example purposes.

66
00:04:47,170 --> 00:04:50,910
Let's imagine I want the full file path of example that CSP.

67
00:04:51,130 --> 00:04:57,250
I would essentially copy paste its file path from here and then add one more and then say.

68
00:04:57,250 --> 00:04:59,470
Example dot CSP.

69
00:04:59,560 --> 00:05:04,200
So keep in mind this command here that includes the full file path.

70
00:05:04,210 --> 00:05:08,980
This will work no matter where this notebook or where your dot pi script is located on your computer

71
00:05:09,370 --> 00:05:11,980
so you can always pass in the full file path.

72
00:05:12,190 --> 00:05:17,740
And the reason we have these double back spaces is because in windows the backspace or excuse me the

73
00:05:17,770 --> 00:05:23,200
backslash usually refers to as an escape character so the double back slashes essentially indicates

74
00:05:23,200 --> 00:05:25,390
that we're not going to escape this.

75
00:05:25,420 --> 00:05:30,940
If you're working on a Mac OS or Linux based system you may have forward slashes there essentially just

76
00:05:30,940 --> 00:05:33,640
follow whatever formatting TWD returns.

77
00:05:33,640 --> 00:05:40,630
But if I run this no I get back the exact same result so I can either move the CSB file or provide the

78
00:05:40,630 --> 00:05:45,960
full file path to confirm what files are available to you and your current location inside you open

79
00:05:45,960 --> 00:05:53,560
up but you can type L S essentially for list run that and this will return back a list of all the files

80
00:05:53,620 --> 00:05:54,940
in your current location.

81
00:05:54,940 --> 00:05:59,410
Here I can see in my various notebooks and then at the bottom I can see the CSP files available for

82
00:05:59,410 --> 00:05:59,610
me.

83
00:05:59,950 --> 00:06:01,090
So keep that in mind.

84
00:06:01,180 --> 00:06:06,310
It's a really common question I get from students of the file not found error either move the CSP file

85
00:06:06,460 --> 00:06:09,910
to are currently located or pass in the full file path.

86
00:06:10,370 --> 00:06:17,800
Okay so we just learned how to read in data from a CSP file often especially after performing your own

87
00:06:17,920 --> 00:06:20,990
data analysis on a dataset you want to save your results.

88
00:06:21,010 --> 00:06:26,440
So the way this works is you have some data frame so we read in that data frame then we're gonna do

89
00:06:26,560 --> 00:06:34,090
as we say to CSB and as a string you can again provide a full file path if you want to save it somewhere

90
00:06:34,180 --> 00:06:39,150
else on your computer or if you want to save it to this current directory you would choose the name

91
00:06:39,170 --> 00:06:45,660
your file such as output that CSP and if you do not want to save the actual index here.

92
00:06:45,670 --> 00:06:53,710
So for example by default if this is a numeric index I can say index equal to False and that will not

93
00:06:53,710 --> 00:06:55,420
save the index.

94
00:06:55,420 --> 00:07:00,400
However maybe this index happens to be something important like the name states then in that case I

95
00:07:00,400 --> 00:07:03,850
would want index to be true.

96
00:07:03,850 --> 00:07:07,630
So let's go ahead and see an example of what happens if I save index to be true here.

97
00:07:07,630 --> 00:07:12,210
Recall that the very first column here currently is a 0 4 8 12.

98
00:07:12,670 --> 00:07:20,200
So if I say go ahead and save that index then if I try reading it in again P the read CSB and I read

99
00:07:20,200 --> 00:07:30,190
in that output that CSB notice it automatically saves that index as some unnamed colon 0 column so 0

100
00:07:30,190 --> 00:07:33,670
1 2 3 and then adds an additional index.

101
00:07:33,670 --> 00:07:38,050
Now what I can do is take a look at the options here under read CSB.

102
00:07:38,260 --> 00:07:44,350
There's lots of different parameters and you can even specify if the particular index column should

103
00:07:44,350 --> 00:07:47,440
be referred to from the CSP file itself.

104
00:07:47,470 --> 00:07:52,420
So keep that in mind if you actually save the index you can always refer to something as the index or

105
00:07:52,420 --> 00:07:55,400
you can reset the index drop columns et cetera.

106
00:07:55,450 --> 00:07:59,080
You have all your tool sets available to impact this.

107
00:07:59,110 --> 00:08:06,010
So that's reading from a C as we file and writing to a C C file and frankly speaking if you understand

108
00:08:06,010 --> 00:08:11,950
how to run read CSP using pandas you're pretty much good to go for the rest of this course but show

109
00:08:11,970 --> 00:08:14,670
you just for example just a couple of other options.

110
00:08:14,840 --> 00:08:20,650
A panda is also has the ability to read tables off each HTML and keep in mind this will only work if

111
00:08:20,650 --> 00:08:23,800
your firewall is not blocking this Web site.

112
00:08:23,800 --> 00:08:29,380
So if you're on a corporate network this may be blocked but I'm going to go to this Web site from the

113
00:08:29,380 --> 00:08:33,020
FDIC that has a list of all the failed banks.

114
00:08:33,040 --> 00:08:40,060
Now typically if you see a table on a Web site for a thought estimate file if you take a look at this

115
00:08:40,120 --> 00:08:46,910
page source by saying view page source or control plus you and you scroll down here the way HDMI out

116
00:08:46,910 --> 00:08:54,070
works to render tables is there's actually a particular tag that each team only uses and you can kind

117
00:08:54,070 --> 00:08:56,700
of zoom in here and see that there's these table tags.

118
00:08:56,800 --> 00:09:03,360
So we have the column names institution city state etc. and then we have the various entries with pandas

119
00:09:03,370 --> 00:09:10,330
attempts to do is it attempts to read all the tables present on this HCM El page and we can do that

120
00:09:10,390 --> 00:09:20,860
by saying my tables is equal to PD that read each HTML and then I'm going to pass in that each team

121
00:09:20,860 --> 00:09:28,380
El again you can copy and paste this from our actual notebook but I run that and keep in mind if you

122
00:09:28,380 --> 00:09:33,150
get an error here saying something like Alex smells like install they're beautiful soups not installed

123
00:09:33,450 --> 00:09:38,360
you may need to manually install those but they do come with the environment that we provide.

124
00:09:38,370 --> 00:09:43,980
However if it says something like El excel not found or HDMI 5 Live not found.

125
00:09:43,980 --> 00:09:48,510
Go ahead and install those and we mentioned how to install them interaction with notebook as well.

126
00:09:48,510 --> 00:09:52,980
So if you scroll down here we mentioned that you may need to install these if you're not using the virtual

127
00:09:52,980 --> 00:09:55,300
environment that we provide for you.

128
00:09:55,500 --> 00:10:00,090
Now if you're getting an SSL error on this particular command it means your firewalls blocking you and

129
00:10:00,090 --> 00:10:03,510
there's not much I can do from my end to help you if your personal firewall.

130
00:10:03,510 --> 00:10:08,820
You'll just have to figure out a way to disable it but essentially what happens is pain this creates

131
00:10:08,820 --> 00:10:10,110
this list of tables.

132
00:10:10,110 --> 00:10:16,710
So if we actually check the type that's returned here it is a list which means it attempts to find every

133
00:10:16,710 --> 00:10:21,040
single table on that page and saves it as a data frame.

134
00:10:21,060 --> 00:10:26,400
And if we took a take a look at the very first entry in tables it's actually a data frame that matches

135
00:10:26,400 --> 00:10:29,280
up with the tables that were on that each team our site.

136
00:10:29,340 --> 00:10:35,160
So I can see bank name City National Bank of New Jersey New work et cetera which in my case happened

137
00:10:35,160 --> 00:10:40,040
to be the very first entry on this actual table on this Web site.

138
00:10:40,050 --> 00:10:45,730
So keep in mind you can read from a variety of sources a really common one as well is reading from Eskew

139
00:10:45,730 --> 00:10:48,220
all so you can see here on read Eskew all.

140
00:10:48,240 --> 00:10:53,700
This one's a little hard to show an example of because it often depends on providing a password to your

141
00:10:53,700 --> 00:10:54,780
secret table.

142
00:10:54,780 --> 00:10:59,670
But there's some really nice cookbook examples you can click here on this link to cookbook examples

143
00:10:59,670 --> 00:11:04,560
for cookbook sequel and then there's some other nice links here on reading from databases we've sequel

144
00:11:04,950 --> 00:11:11,310
and then Eskew all documentation and it actually links you to some really great Stack Overflow posts

145
00:11:11,430 --> 00:11:18,960
on how to read from for example an Oracle database my sequel database etc. So lots of great links and

146
00:11:18,960 --> 00:11:23,400
I would highly recommend that if you ever have a question on how to read in from particular source you

147
00:11:23,400 --> 00:11:28,950
reference this online documentation since it's always going to be the most recent up to date resource

148
00:11:28,950 --> 00:11:29,310
for you.

149
00:11:29,940 --> 00:11:34,710
So the takeaway from this lecture really for the rest of this course is just keep in mind that we're

150
00:11:34,710 --> 00:11:41,430
really going to be using this read CSP capability throughout the course PD that read CSP and then to

151
00:11:41,430 --> 00:11:46,830
make sure you understand this file path and how to read in your current file path or how to provide

152
00:11:46,830 --> 00:11:48,230
a full file path.

153
00:11:48,240 --> 00:11:48,960
All right.

154
00:11:48,960 --> 00:11:50,880
Thanks everyone and I'll see you at the next lecture.
