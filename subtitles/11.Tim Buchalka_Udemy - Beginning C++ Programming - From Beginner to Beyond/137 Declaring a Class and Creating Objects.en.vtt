WEBVTT
1
00:00:05.290 --> 00:00:11.050
In this video we'll learn the basic syntax for declaring a class in C++.

2
00:00:11.050 --> 00:00:12.850
The syntax is very simple.

3
00:00:12.850 --> 00:00:18.340
First we use the reserve key word class followed by the name of the class we're declaring.

4
00:00:18.370 --> 00:00:23.690
Notice that it's best practice to capitalize class names for our user defined classes.

5
00:00:23.860 --> 00:00:28.720
Then we have a block which are open and closed curly braces and the class declaration is terminated

6
00:00:28.720 --> 00:00:32.320
with a semi-colon in body of the class declaration.

7
00:00:32.320 --> 00:00:36.770
We can supply the declarations that define the structure and behavior of our class.

8
00:00:36.790 --> 00:00:44.250
Let's see an example here where declaring a class named player as we might have in a game application.

9
00:00:44.250 --> 00:00:46.910
Notice the class keyword followed by the name of the class.

10
00:00:46.920 --> 00:00:53.250
In this case player dead in the body of the class we can define the classes attributes or instance variables

11
00:00:53.550 --> 00:00:54.840
and methods.

12
00:00:54.840 --> 00:01:00.600
In this case the class has a string named name and two integers representing the players health and

13
00:01:00.660 --> 00:01:02.120
Expwy.

14
00:01:02.380 --> 00:01:08.470
Since C++ supports encapsulation that means we can also provide methods or functions in the class body

15
00:01:08.740 --> 00:01:11.300
that are specific to the player class.

16
00:01:11.470 --> 00:01:18.160
In this case we have two methods talk which expects a standard string and is dead which returns a boolean

17
00:01:19.690 --> 00:01:20.360
number.

18
00:01:20.390 --> 00:01:22.160
We've created the class.

19
00:01:22.160 --> 00:01:25.590
We can create objects that are instances of that class.

20
00:01:25.610 --> 00:01:29.600
So in this example in creating Franken hero which our player objects.

21
00:01:29.630 --> 00:01:30.620
Notice the syntax.

22
00:01:30.610 --> 00:01:34.050
It should feel familiar since it's the same way we create primitive types.

23
00:01:34.990 --> 00:01:38.850
We can also create pointers to objects in the last example.

24
00:01:38.850 --> 00:01:44.170
I'm declaring enemy as a pointer to a player object and I'm creating that object dynamically on the

25
00:01:44.170 --> 00:01:50.840
heap using you when I'm finished using any object it storage has to be freed up using delete.

26
00:01:51.610 --> 00:01:54.610
Here's another example where we declare an account class.

27
00:01:54.610 --> 00:01:59.600
Notice that accounts have a name which is a standard string and a balance which is a double.

28
00:02:00.010 --> 00:02:05.470
And in this example we have a withdraw method that expects the amount to withdraw and returns a boolean

29
00:02:05.470 --> 00:02:07.540
indicating success.

30
00:02:07.540 --> 00:02:12.790
We also have a deposit method that expects the amount to deposit and also returns a boolean indicating

31
00:02:12.790 --> 00:02:14.250
success.

32
00:02:14.260 --> 00:02:17.560
We'll talk more about how we define class methods in a few videos.

33
00:02:17.740 --> 00:02:22.640
But notice how they're basically function prototypes in these examples.

34
00:02:22.660 --> 00:02:26.240
Now that we've declared the account class we can create objects of that type.

35
00:02:26.260 --> 00:02:33.250
So Frank's account in Jim's account or objects or instances of the Account class in the last declaration

36
00:02:33.460 --> 00:02:38.920
Mary's account is a pointer to an account object that again has been allocated dynamically on the heap

37
00:02:39.100 --> 00:02:40.810
and then freed up when we're done with it.

38
00:02:42.260 --> 00:02:48.230
Once we have objects we can use them like any other variable in C++ for example we can create an array

39
00:02:48.230 --> 00:02:52.170
of account objects and initialize the array to Frank's account and Jim's account.

40
00:02:52.520 --> 00:02:57.530
We can create a standard vector of account objects and initialize it to Frank's account and then push

41
00:02:57.530 --> 00:02:59.240
back Jim's account.

42
00:02:59.240 --> 00:03:02.360
You can see how easy and how readable our code looks.

43
00:03:02.750 --> 00:03:09.180
We're using our own user defined types and we're using them intuitively like we've used other C++ types.

44
00:03:09.530 --> 00:03:14.700
In the next video we'll see the syntax for accessing the attributes and methods and objects.

45
00:03:14.810 --> 00:03:19.250
But first let's head over to the IEEE and create these classes.

46
00:03:19.450 --> 00:03:26.040
Ok so I mean the idea I mean the section 13 workspace the declared class and objects project.

47
00:03:26.410 --> 00:03:29.230
This is just an empty little project right now with an empty Main.

48
00:03:29.230 --> 00:03:34.240
I've included IO stream string and vector and I'm using namespace standard.

49
00:03:34.270 --> 00:03:38.770
Remember you really don't want to use namespace standard all the time you really want to be explicit

50
00:03:38.770 --> 00:03:43.530
and type out you know Studd scope resolution operator and whatever you need.

51
00:03:43.580 --> 00:03:47.970
So I'm going to do it because it'll save me a lot of typing time otherwise these videos could be of

52
00:03:48.040 --> 00:03:49.990
pretty long with me making typos.

53
00:03:49.990 --> 00:03:51.140
So what do I want to do here.

54
00:03:51.160 --> 00:03:56.160
Let's create the player class the account class and we'll create some objects.

55
00:03:56.170 --> 00:04:00.790
The first question is Where do we create the player class let's do the player class first.

56
00:04:00.820 --> 00:04:02.430
I could do it right inside main.

57
00:04:02.440 --> 00:04:02.950
I could say.

58
00:04:02.950 --> 00:04:06.750
Class player and define that class right in here.

59
00:04:07.000 --> 00:04:13.000
That's really not what I want to do because if I do that then I'm defining that class inside the scope

60
00:04:13.000 --> 00:04:18.580
of Main which means that only main will have access to access to that class and that's not really what

61
00:04:18.580 --> 00:04:23.120
I want I want to create my player class so that the entire application has access to it.

62
00:04:23.170 --> 00:04:27.610
So I'm going to do it right up here and then later on in this section we'll learn how to do it an even

63
00:04:27.610 --> 00:04:29.750
better way we'll use separate files to do it.

64
00:04:29.860 --> 00:04:32.430
But for now let's learned about classes and objects.

65
00:04:32.440 --> 00:04:35.810
So what I want to do is I want to say class player.

66
00:04:36.310 --> 00:04:42.880
Remember that class name should be in uppercase and you need a semi-colon right here at the end of the

67
00:04:42.880 --> 00:04:44.390
class declaration.

68
00:04:44.830 --> 00:04:48.440
So what do we put inside this class declaration what we saw in the slides.

69
00:04:48.460 --> 00:04:50.020
You can put attributes in here.

70
00:04:50.380 --> 00:04:57.010
That's typically data and we can put methods in here which are operations or functions.

71
00:04:57.010 --> 00:05:00.420
That's when the cancellation is all about putting all these things together.

72
00:05:00.820 --> 00:05:01.620
Now what do you do.

73
00:05:01.660 --> 00:05:02.770
What do you put in here.

74
00:05:03.010 --> 00:05:07.440
Well it depends depends on what a player is in the context of your application.

75
00:05:07.480 --> 00:05:11.030
You could have all kinds of stuff in here or could have a minimal amount of stuff in here.

76
00:05:11.110 --> 00:05:12.120
That's the whole point.

77
00:05:12.160 --> 00:05:17.150
You really don't want to model a player that could be used in any application in the world.

78
00:05:17.320 --> 00:05:22.270
You just want to model a player that's going to be used in your application that you can extend easily.

79
00:05:22.270 --> 00:05:22.500
OK.

80
00:05:22.510 --> 00:05:28.810
So don't try to model that the best player object to class you could ever have just solve your problem.

81
00:05:29.080 --> 00:05:38.110
So in this case let's assume that a player has a or a name which is a string and the player has an integer

82
00:05:38.380 --> 00:05:45.160
which is their health and say something like between 0 and 100 0 health you're dead and XP which is

83
00:05:45.160 --> 00:05:46.210
experience.

84
00:05:46.450 --> 00:05:49.010
And that could be three up to whatever.

85
00:05:49.010 --> 00:05:50.100
It doesn't really matter.

86
00:05:50.090 --> 00:05:52.250
It's all based on our application.

87
00:05:52.270 --> 00:05:57.520
So now what we're seeing here is that the class player is going to be a blueprint to create player objects

88
00:05:57.520 --> 00:06:02.830
from an every player object is going to have a string that represents surname name two integers one

89
00:06:02.830 --> 00:06:06.100
representing the health one representing their XP.

90
00:06:06.310 --> 00:06:07.840
Now what methods can we have.

91
00:06:07.840 --> 00:06:13.330
We can have a ton of methods let's just create two of them really simply say you understand how this

92
00:06:13.330 --> 00:06:19.120
works what you do here is you basically do everything we learned when we talked about functions.

93
00:06:19.120 --> 00:06:24.570
So I want to have a method called Talk and it expects a string.

94
00:06:24.760 --> 00:06:31.060
So whatever string you pass into the player the player will talk it right back out and let's say we

95
00:06:31.060 --> 00:06:33.960
want to have is dead.

96
00:06:34.480 --> 00:06:40.120
This is a method that returns to a fault based on whether the player is dead and the player might be

97
00:06:40.120 --> 00:06:44.140
dead if their health is zero or whatever other criteria we have for that.

98
00:06:44.480 --> 00:06:50.380
Again notice that with these look like are basically function prototypes at this point we could implement

99
00:06:50.380 --> 00:06:52.680
them right here and we will in a couple of more videos.

100
00:06:52.840 --> 00:06:57.170
But for analysis think these are the attributes these are the methods.

101
00:06:57.310 --> 00:06:58.490
OK.

102
00:06:58.540 --> 00:07:04.090
Also there's the concept of public and private but we have access to we'll get to all that really really

103
00:07:04.090 --> 00:07:04.840
soon.

104
00:07:05.020 --> 00:07:05.700
But that's it.

105
00:07:05.710 --> 00:07:07.510
That's a minimal player class.

106
00:07:07.510 --> 00:07:10.790
Given this I can create player objects.

107
00:07:10.840 --> 00:07:13.910
Now let's create 2 player objects right here in main.

108
00:07:14.050 --> 00:07:20.900
I'll say player Frank and player hero.

109
00:07:20.960 --> 00:07:22.860
That's it.

110
00:07:22.900 --> 00:07:28.580
When these two ends execute will the system will create two player objects one is called Frank.

111
00:07:28.570 --> 00:07:29.980
One is called Hero.

112
00:07:29.980 --> 00:07:31.480
Each one of them has a name.

113
00:07:31.510 --> 00:07:32.650
Health and XP.

114
00:07:32.980 --> 00:07:37.390
Each one of them can call these methods and talk and ask if it's dead or not.

115
00:07:37.600 --> 00:07:38.120
OK.

116
00:07:38.170 --> 00:07:40.150
So hopefully that makes sense.

117
00:07:40.150 --> 00:07:41.710
Let's run this right now.

118
00:07:41.710 --> 00:07:45.940
We're going to run this in the debugger so you can see them what I'm going to do is I'm going to.

119
00:07:45.940 --> 00:07:50.380
For someone to save this then I'm going to click right here in the gutter and you get that little stop

120
00:07:50.380 --> 00:07:55.870
sign for the debugger and then when I'm going to do is just get a debugger start the bugger or you just

121
00:07:55.870 --> 00:07:57.320
press F5.

122
00:07:57.550 --> 00:08:02.500
And I've got my debugger set up so that my local variables over here and he watches and I want to look

123
00:08:02.500 --> 00:08:03.230
for here.

124
00:08:03.250 --> 00:08:08.380
And then the call stack is here the call stack is real simple we're just in Maine right now.

125
00:08:08.560 --> 00:08:10.540
You can see I've got my two local variables.

126
00:08:10.540 --> 00:08:12.220
You can see them displayed right up here.

127
00:08:12.220 --> 00:08:14.820
I've got Frank and I've got a hero right now.

128
00:08:14.850 --> 00:08:19.570
They don't really exist because I haven't created them yet yet but they're in the local variables paying

129
00:08:19.570 --> 00:08:20.260
here.

130
00:08:20.260 --> 00:08:25.290
So what I want to do is let's create Frank in here just hit the next arrow down here.

131
00:08:25.630 --> 00:08:29.760
And Frank is now active and then hero is now active.

132
00:08:29.920 --> 00:08:35.300
And if you expand these guys a little bit you can see something of what's going on here.

133
00:08:35.320 --> 00:08:37.480
You can see Frank has a name right of course.

134
00:08:37.480 --> 00:08:37.930
Here it is.

135
00:08:37.930 --> 00:08:41.590
It's one of the attributes Frank has health and Frank has XP.

136
00:08:41.590 --> 00:08:44.130
Notice it's garbage data right.

137
00:08:44.140 --> 00:08:50.890
The only reason that the string is not garbage is because our C++ string class are standard string class

138
00:08:51.190 --> 00:08:55.720
has a default initialiser which initializes it to empty which is pretty cool.

139
00:08:56.140 --> 00:09:01.420
But the rest of the stuff is junk just garbage data the same thing with health and the same thing with

140
00:09:01.420 --> 00:09:02.210
XP.

141
00:09:02.230 --> 00:09:05.950
This is the same sort of behavior we saw when we created regular variables.

142
00:09:06.010 --> 00:09:06.440
OK.

143
00:09:06.520 --> 00:09:12.460
So we'll talk about initializing these objects in a couple of videos where we use constructors to do

144
00:09:12.460 --> 00:09:13.010
it.

145
00:09:13.270 --> 00:09:15.740
And that makes things much much easier.

146
00:09:15.740 --> 00:09:24.170
Ok so I'm going to stop this debugger and we can also create objects on the heap just like we could

147
00:09:24.170 --> 00:09:25.640
regular primitive types.

148
00:09:25.640 --> 00:09:29.180
So in this case I'm going to say player

149
00:09:32.570 --> 00:09:36.260
enemy is a pointer to a player member you read this from right to left.

150
00:09:36.560 --> 00:09:37.460
And you know what.

151
00:09:37.460 --> 00:09:42.390
Let's set it to null pointer of the this two steps just so you can see this happening in the debugger.

152
00:09:42.410 --> 00:09:47.450
Then I'm going to say enemy equals new player.

153
00:09:48.440 --> 00:09:53.300
That's going to create the enemy on the heap that enemy object which is a player.

154
00:09:53.300 --> 00:09:56.080
And then I'm just going to say delete and when I'm done.

155
00:09:58.300 --> 00:10:06.450
OK so let me move that right to about there and let's run this again in the debugger here you can see

156
00:10:06.450 --> 00:10:10.900
that right now there's garbage data in the value for enemy right.

157
00:10:10.920 --> 00:10:12.050
So it exists.

158
00:10:12.120 --> 00:10:14.880
It's a pointer it's got a value and it's junk right now.

159
00:10:14.880 --> 00:10:19.500
So when I execute the statement I just nailed it out and you can see it's zero.

160
00:10:19.830 --> 00:10:22.040
That's the safe way to do things.

161
00:10:22.050 --> 00:10:26.270
Now I want to create this new player object on the heap.

162
00:10:26.670 --> 00:10:31.300
So right now when I execute that statement you expect that address to change right.

163
00:10:31.320 --> 00:10:36.150
Because obviously I'm creating this on the heap and I'm storing the address of that object in enemy

164
00:10:36.150 --> 00:10:37.420
which is a pointer.

165
00:10:37.500 --> 00:10:39.600
So that's step through it.

166
00:10:39.600 --> 00:10:40.500
Here we go.

167
00:10:40.650 --> 00:10:45.420
At this point that enemy object is created it's on the heap.

168
00:10:45.540 --> 00:10:46.280
It's a player.

169
00:10:46.320 --> 00:10:46.550
Right.

170
00:10:46.560 --> 00:10:47.700
That's its type.

171
00:10:47.820 --> 00:10:53.340
And if I expand as you can see that the game is empty but Helfand XP contain garbage just what we would

172
00:10:53.340 --> 00:10:54.460
expect.

173
00:10:54.480 --> 00:10:56.420
And then when we're done with it we can delete it.

174
00:10:57.800 --> 00:10:58.290
OK.

175
00:10:58.370 --> 00:10:59.710
Really really straightforward.

176
00:10:59.870 --> 00:11:05.030
Let me add a few lines of code right in here and we'll get rid of that breakpoint will move it in a

177
00:11:05.030 --> 00:11:06.100
second.

178
00:11:06.110 --> 00:11:10.220
Once we have these objects we can treat them like any variables just like we've worked with integers

179
00:11:10.220 --> 00:11:11.610
and doubles and everything else.

180
00:11:11.780 --> 00:11:12.670
So in this case.

181
00:11:12.790 --> 00:11:16.880
So I want to create an array right here called players

182
00:11:19.860 --> 00:11:21.320
and it's a an array.

183
00:11:21.500 --> 00:11:27.070
And I want to set it to Frank and here Mike just like we've done with integers.

184
00:11:27.080 --> 00:11:28.250
It's the same idea.

185
00:11:28.280 --> 00:11:34.490
So let's read this together here says players is an array of player objects.

186
00:11:34.640 --> 00:11:39.140
Well I've got two of them right here so I can initialize that array to Frank and hero.

187
00:11:39.420 --> 00:11:40.320
I'm going to save this.

188
00:11:40.370 --> 00:11:44.210
And let's put a breakpoint right there so we can look at it and we'll run

189
00:11:46.810 --> 00:11:51.410
OK so you can see players right here and I'm going to step through it.

190
00:11:52.460 --> 00:11:55.720
Up players been initialized here to those two objects.

191
00:11:55.770 --> 00:11:59.910
The first object and the second object the first object is Frank.

192
00:11:59.910 --> 00:12:01.460
The second object is zero.

193
00:12:01.620 --> 00:12:06.270
And you can tell we don't have any strings for names now but you can tell from the garbage values that

194
00:12:06.270 --> 00:12:08.950
they really are indeed those objects.

195
00:12:09.210 --> 00:12:10.800
So it's really as simple as that.

196
00:12:10.800 --> 00:12:16.020
This is very powerful stuff because we can create our own user defined types which is what player is

197
00:12:16.440 --> 00:12:19.200
and then use it just like we can use any other variable.

198
00:12:19.490 --> 00:12:19.960
OK.

199
00:12:20.190 --> 00:12:27.580
So last thing is let's try to create rather than an array here let's do a vector.

200
00:12:27.660 --> 00:12:33.070
So let's create a vector a vector of what what we've done vectors of teenagers the vectors of strings

201
00:12:33.070 --> 00:12:35.680
go one on a vector of player.

202
00:12:36.490 --> 00:12:39.690
OK and we'll just call it player back.

203
00:12:39.690 --> 00:12:40.770
So again what is this.

204
00:12:40.770 --> 00:12:44.870
This is a collection of player objects.

205
00:12:44.910 --> 00:12:47.370
OK so let's initialize this to Frank.

206
00:12:47.670 --> 00:12:49.620
That's a player object.

207
00:12:49.620 --> 00:12:56.010
And then what we could do is we can ask the player Veck to push back and push back as a method in the

208
00:12:56.010 --> 00:12:59.070
Vector class and we can push back here.

209
00:13:00.260 --> 00:13:06.430
Right so let's execute both these lines and I'll get to put a put a breakpoint right there and we'll

210
00:13:06.430 --> 00:13:10.030
go back to the debugger and run this.

211
00:13:10.030 --> 00:13:15.630
So right now we have player Veck somewhat step into it here so that I can create that vector.

212
00:13:15.820 --> 00:13:19.880
OK the vectors now created it's called Player Veck It's right here.

213
00:13:20.110 --> 00:13:25.690
If I expand it you can see that right now there's one item in there and that one item is Frank if you

214
00:13:25.690 --> 00:13:30.210
look at Frank appear you could see it's garbage data right here.

215
00:13:30.250 --> 00:13:36.010
Well it's going to be the same garbage data right here because we just copied that object OK.

216
00:13:36.010 --> 00:13:42.040
Now when I execute the next line which I'm going to just by clicking next here that should add hero

217
00:13:42.040 --> 00:13:43.180
to that vector.

218
00:13:43.180 --> 00:13:44.340
So let's do that.

219
00:13:45.540 --> 00:13:49.250
And now you can see you notice here that it didn't really show up here.

220
00:13:49.350 --> 00:13:55.680
This player VUK which you can do when that happens is you need to refresh right here.

221
00:13:55.710 --> 00:13:59.440
So when I refresh the right now that says there's only one item in there we know there are two.

222
00:13:59.610 --> 00:14:04.250
So if you refresh and then expand player VEC There you go and you see both items.

223
00:14:04.320 --> 00:14:05.820
In this case that's Frank.

224
00:14:06.050 --> 00:14:10.340
And in this case that's hero OK.

225
00:14:10.390 --> 00:14:14.540
So all this works exactly like it did with integers and doubles and so forth.

226
00:14:15.340 --> 00:14:17.830
All right so let's create an account class.

227
00:14:17.830 --> 00:14:24.310
Now real quick we'll do it right below the player class will create a class account and will create

228
00:14:24.310 --> 00:14:27.130
the body and we'll put a semi-colon on the end.

229
00:14:27.130 --> 00:14:31.240
Don't forget that semi-colon if you forget that semi-colon you're going to get compiler errors and they're

230
00:14:31.240 --> 00:14:34.780
going to be strange compiler error because the compiler is going to be lost trying to figure out where

231
00:14:34.780 --> 00:14:35.480
you are.

232
00:14:35.690 --> 00:14:38.010
OK so here we can have attributes

233
00:14:40.620 --> 00:14:45.840
and what we'll say here is again we've got a string name the name of an account and we've got a double

234
00:14:45.840 --> 00:14:48.450
which is called balance.

235
00:14:48.650 --> 00:14:52.110
Then here we can have methods again as many methods as we want.

236
00:14:52.110 --> 00:14:54.100
Now you'll notice it over here.

237
00:14:54.420 --> 00:14:56.800
I just prototype those two methods I just declared.

238
00:14:56.800 --> 00:14:58.180
Am I never defined them.

239
00:14:58.200 --> 00:15:00.490
So how in the world did this work well this work.

240
00:15:00.510 --> 00:15:05.750
Because I never called them if I had called those methods I'd have a linker error because the linkers

241
00:15:05.760 --> 00:15:09.150
going to say I don't know where those things are you told me there were there but I don't know where

242
00:15:09.150 --> 00:15:09.700
they are.

243
00:15:09.840 --> 00:15:12.980
OK will implement all this stuff in the next few videos.

244
00:15:13.080 --> 00:15:27.100
So let's create a couple of methods bhool deposit and double and bhool withdraw double.

245
00:15:27.180 --> 00:15:30.000
Those are my two method declarations.

246
00:15:30.000 --> 00:15:34.790
I want to deposit some amount in I want to return TRUE FALSE whether it was successful or not.

247
00:15:34.870 --> 00:15:36.570
And with that withdraw some amount.

248
00:15:36.570 --> 00:15:37.660
Again it's a double.

249
00:15:37.860 --> 00:15:41.520
And I want to return true or false depending on whether it was successful.

250
00:15:41.550 --> 00:15:47.060
And once that I I've that once I've got that class declared I can now create a count object so I could

251
00:15:47.070 --> 00:15:48.320
save Frank the count

252
00:15:51.050 --> 00:15:58.070
I could say Jim account and so forth can now put up a break right here.

253
00:15:58.180 --> 00:16:00.650
And let's check that out in the debugger.

254
00:16:01.860 --> 00:16:03.660
You could see right here is Frank account.

255
00:16:03.660 --> 00:16:05.670
So I'm going to go next and next.

256
00:16:05.670 --> 00:16:07.900
Again that's created those two objects.

257
00:16:08.010 --> 00:16:10.730
So here Frank account has a name.

258
00:16:10.770 --> 00:16:15.700
It's empty and it's got a garbage number for balance and the same thing for Jim's account.

259
00:16:15.720 --> 00:16:17.560
It's got a name and it's got a balance.

260
00:16:17.680 --> 00:16:18.200
OK.

261
00:16:18.270 --> 00:16:24.900
Now something that's useful in C++ 11 and going forward is that you can actually initialize these guys

262
00:16:24.900 --> 00:16:25.820
right here.

263
00:16:25.830 --> 00:16:31.380
So let's just say that I wanted to initialize that to Frank to account accounts sorry.

264
00:16:32.430 --> 00:16:35.920
And I wanted to initialize balance to zero.

265
00:16:36.780 --> 00:16:40.110
I can do that and I can also do this up here.

266
00:16:40.110 --> 00:16:43.970
So let's say I wanted to initialize this to the player.

267
00:16:44.440 --> 00:16:48.750
When you think about this it's really odd that they're letting you do this at all because we're an issue

268
00:16:48.750 --> 00:16:51.640
we're creating these initialization of variables here.

269
00:16:51.870 --> 00:16:53.430
But we don't even have objects yet.

270
00:16:53.430 --> 00:16:58.290
Right I mean this is just a class declaration we have we don't have any objects but they can come in

271
00:16:58.290 --> 00:17:03.960
handy and I'll show you how to initialize these things using constructors and initializer lists and

272
00:17:03.960 --> 00:17:04.830
a little while.

273
00:17:05.070 --> 00:17:08.700
But let's say that XP is three and the health is 100

274
00:17:11.360 --> 00:17:11.600
Kate.

275
00:17:11.600 --> 00:17:16.640
So let let's run this again this time and I'll stop the debugger and started again.

276
00:17:19.510 --> 00:17:21.200
Forgot my semi-colon.

277
00:17:22.650 --> 00:17:26.060
I probably forgot some down here as well.

278
00:17:26.490 --> 00:17:29.350
So let's let's run them.

279
00:17:29.570 --> 00:17:34.110
OK so now you can see me scroll up a little bit and read here on 9:33.

280
00:17:34.190 --> 00:17:35.520
So I'm going to go next next.

281
00:17:35.570 --> 00:17:39.620
I've just created those two accounts and again I'm going to go next next and I just created those two

282
00:17:39.620 --> 00:17:41.150
players Frank and hero.

283
00:17:41.360 --> 00:17:47.320
But now when I look at Frank you can see Frank's name as player it's health is 100 it's XP is three.

284
00:17:47.330 --> 00:17:51.380
So basically any object is going to get these values right here.

285
00:17:51.380 --> 00:17:53.980
And as I said we'll learn other ways to initialize.

286
00:17:53.990 --> 00:17:58.400
But this is pretty nice right now because we can actually see them in the debugger and you can see this

287
00:17:58.400 --> 00:17:59.690
working OK.

288
00:17:59.780 --> 00:18:04.490
And the same thing with the count frank account here says account with a balance of zero 0 and Jim's

289
00:18:04.490 --> 00:18:07.400
account is account with a balance of zero as well.

290
00:18:07.960 --> 00:18:08.490
OK.

291
00:18:08.570 --> 00:18:08.810
All right.

292
00:18:08.810 --> 00:18:09.170
Perfect.

293
00:18:09.170 --> 00:18:14.990
Now in the next video what we'll learn to do is learn how to actually access those class attributes

294
00:18:14.990 --> 00:18:17.390
in class methods using an object.

295
00:18:17.560 --> 00:18:17.770
OK.

296
00:18:17.780 --> 00:18:18.650
So I see in a little bit.
