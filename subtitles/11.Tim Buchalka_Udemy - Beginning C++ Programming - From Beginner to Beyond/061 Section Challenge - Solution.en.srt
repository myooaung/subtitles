1
00:00:06,350 --> 00:00:11,630
Welcome back I hope you enjoyed working with vector's and learn more about how to use them.

2
00:00:11,660 --> 00:00:17,220
You can find my solution in the section 7 workspace challenge solution project.

3
00:00:17,510 --> 00:00:20,690
Let's go through my solution to this challenge one line at a time.

4
00:00:20,720 --> 00:00:25,710
I've inserted the challenge directives in my solution is comments so it's easier to follow along.

5
00:00:26,150 --> 00:00:27,320
So where do we start.

6
00:00:27,320 --> 00:00:30,730
First thing we need to do is we need to include the vector library.

7
00:00:30,800 --> 00:00:35,480
If you didn't do that you probably got some syntax errors about vector not found and probably got a

8
00:00:35,480 --> 00:00:36,920
lot of errors.

9
00:00:36,980 --> 00:00:39,950
Also we can use the namespace standard.

10
00:00:40,100 --> 00:00:44,570
We don't have to do this but it makes the code a lot less cluttered and it's easier to display.

11
00:00:44,570 --> 00:00:49,680
For teaching purposes that way if you didn't include namespace standard you might have gotten errors

12
00:00:49,690 --> 00:00:54,020
and you probably did something like standard scope resolution operator vector.

13
00:00:54,050 --> 00:00:59,300
So let's do the first directivity it is declared two empty vectors of integers named vector 1 and vector

14
00:00:59,300 --> 00:01:02,180
2 respectively on line 42 and 43.

15
00:01:02,180 --> 00:01:03,610
That's exactly what I'm doing.

16
00:01:03,770 --> 00:01:08,900
You could see vector 1 is a vector of integers and vector 2 is a vector of integers.

17
00:01:08,960 --> 00:01:11,360
There is no constructor here with the size.

18
00:01:11,360 --> 00:01:16,100
There is no initialization list so these are going to be empty vectors.

19
00:01:16,100 --> 00:01:22,160
The second directive on 945 says add 10 and 20 to vector 1 dynamically using pushback.

20
00:01:22,160 --> 00:01:29,140
That's what I'm doing on lines 47 and 48 effect to 1 DUP push back 10 vector one push back 20.

21
00:01:29,150 --> 00:01:33,590
These two elements will be added to the back of the vector and the storage will be allocated automatically

22
00:01:33,590 --> 00:01:34,540
for them.

23
00:01:34,610 --> 00:01:39,260
This is where we can see that defectors can grow on line 50.

24
00:01:39,290 --> 00:01:44,690
We want to display the elements at Vector 1 using the method and we also want to display the size of

25
00:01:44,690 --> 00:01:49,550
the vector using the size method so you could see that between lines 52 and 55.

26
00:01:49,550 --> 00:01:51,950
That's what I'm doing here on line 53.

27
00:01:51,950 --> 00:01:59,180
I'm simply saying give me the element at Vector ones 0 and then give me the element at 1 so that will

28
00:01:59,180 --> 00:02:01,560
display 10 and 20 because that's what's in there.

29
00:02:01,880 --> 00:02:07,400
And then I'm going to say vector one contains vector dot size will return two because there are currently

30
00:02:07,400 --> 00:02:12,540
two elements in the vector 1 so it should display a vector one contains two elements.

31
00:02:12,830 --> 00:02:14,630
OK so so far pretty easy.

32
00:02:14,630 --> 00:02:16,420
Let me scroll up just a little bit.

33
00:02:16,620 --> 00:02:21,630
An on line 57 we're doing the same thing with the 100 and 200 but to vector 2.

34
00:02:21,710 --> 00:02:28,290
So I'm adding 100 and 200 dynamically using pushback on vector to vector to empty.

35
00:02:28,310 --> 00:02:33,240
So after this vector too should have 100 and 200 and the size of two.

36
00:02:33,740 --> 00:02:38,960
What we're doing on line 64 through 67 is the same thing we did with the vector one except we're doing

37
00:02:38,960 --> 00:02:45,830
it with vector to where displaying the results this should display 100 200 and back to 2 contains two

38
00:02:45,830 --> 00:02:46,950
elements.

39
00:02:47,480 --> 00:02:51,290
OK let me scroll up a little bit more now on line 69.

40
00:02:51,350 --> 00:02:57,290
The directive says declare an empty two dimensional vector called vector to D and does that little bit

41
00:02:57,290 --> 00:03:00,850
there that says Remember that a 2D vector is a factor of vectors.

42
00:03:00,920 --> 00:03:04,350
So this is how we would declare this vector to D.

43
00:03:04,370 --> 00:03:10,820
That's my object is a vector of integer vectors or a vector a vector of integers.

44
00:03:10,820 --> 00:03:13,640
However you want to pronounce it so you get the idea there.

45
00:03:13,640 --> 00:03:16,280
So it's a vector that can hold other factors.

46
00:03:16,280 --> 00:03:20,900
Therefore you have the two dimensionality unlined 74 and 75.

47
00:03:20,900 --> 00:03:26,090
What we're doing is we're adding an entire vector to the vector to d with pushback.

48
00:03:26,090 --> 00:03:30,620
We can do that right because it's a vector of vectors could certainly add a vector to it.

49
00:03:30,800 --> 00:03:35,110
And that's what's happening on line 77 and 78 on line 77.

50
00:03:35,110 --> 00:03:43,340
I'm adding vector 1 to vector to d using pushback which means that remember vector to d at this point

51
00:03:43,340 --> 00:03:44,110
was empty.

52
00:03:44,150 --> 00:03:49,200
So storage will be allocated vector one will be put in there doing the same with vector too.

53
00:03:49,370 --> 00:03:54,870
So at this point we'll have a two dimensional vector that contains two vectors.

54
00:03:55,310 --> 00:03:59,690
So online Adey were displaying the elements in vector to d using the method.

55
00:03:59,780 --> 00:04:04,930
So you can see here I'm displaying the element at 0 0 and then the element is 0 1 and then the element

56
00:04:05,000 --> 00:04:07,270
1 0 and the element is 1 1.

57
00:04:07,340 --> 00:04:12,000
So this should display 10 20 and 100 200.

58
00:04:12,350 --> 00:04:13,700
So this is the interesting part.

59
00:04:13,700 --> 00:04:20,360
Now I've asked you to change vector ones first element write the element at index 0 to a thousand and

60
00:04:20,360 --> 00:04:22,350
then display the vector again.

61
00:04:22,760 --> 00:04:27,460
What did you expect some of you might have thought that that first element would have changed right

62
00:04:27,470 --> 00:04:33,420
because after all we did put vector 1 into the to the vector and you might be surprised that it didn't.

63
00:04:33,440 --> 00:04:35,250
And we'll talk about that in a second.

64
00:04:35,270 --> 00:04:39,760
But here we're displaying vector one just to see if it actually did change.

65
00:04:39,770 --> 00:04:42,510
So let's run this and will walk through the output.

66
00:04:42,520 --> 00:04:49,210
Someone to build and run and you could see at the beginning we're saying OK vector one right we pushed

67
00:04:49,210 --> 00:04:50,120
a 10 and 20.

68
00:04:50,120 --> 00:04:51,360
So that was fine.

69
00:04:51,500 --> 00:04:53,450
And that vector 1 contains the two elements.

70
00:04:53,450 --> 00:04:56,020
That's what we expect vector to.

71
00:04:56,030 --> 00:05:04,130
We inserted the 100 and the 200 and vector 2 now contains two elements vector 2 d contains vector one

72
00:05:04,130 --> 00:05:05,150
and vector 2 within it.

73
00:05:05,150 --> 00:05:05,630
Right.

74
00:05:05,690 --> 00:05:07,210
Again it's a two D vector.

75
00:05:07,310 --> 00:05:08,810
So the first one was 10 20.

76
00:05:08,810 --> 00:05:10,870
The second one was 100 200.

77
00:05:10,880 --> 00:05:11,550
Pretty cool.

78
00:05:11,720 --> 00:05:15,380
But now at this point what we did was this is where we're at right now.

79
00:05:15,560 --> 00:05:22,380
We just changed vector ones first element to 1000 and then we printed out that 2D vector again.

80
00:05:22,400 --> 00:05:24,340
But you can see the 2d vector.

81
00:05:24,360 --> 00:05:25,390
There's no thousand.

82
00:05:25,390 --> 00:05:28,090
Here where the 10 is that's where you would expect it.

83
00:05:28,090 --> 00:05:28,860
Right.

84
00:05:29,060 --> 00:05:34,460
There isn't the reason for that is that when you add elements to vector you actually make a copy of

85
00:05:34,460 --> 00:05:35,660
what you're inserting.

86
00:05:35,900 --> 00:05:40,040
So that tells you a little bit about what's going on a little bit later on in the course what we'll

87
00:05:40,040 --> 00:05:44,200
do is we'll have vectors of references or vectors of pointers.

88
00:05:44,330 --> 00:05:49,040
And those are a little bit different because here we can actually change what it's pointing to and it

89
00:05:49,040 --> 00:05:50,800
will be reflected in the vector.

90
00:05:50,810 --> 00:05:56,180
But when you are using integers and floats and doubles remember we're making copies of what we're putting

91
00:05:56,210 --> 00:05:57,600
into the vector.

92
00:05:57,620 --> 00:05:59,820
All right so that completes this solution.

93
00:05:59,840 --> 00:06:02,840
I hope you enjoyed the challenge and I'll see you in the next video.
