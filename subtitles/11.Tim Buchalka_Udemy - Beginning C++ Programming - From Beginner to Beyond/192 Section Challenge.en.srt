1
00:00:05,480 --> 00:00:11,390
Welcome to the Section 16 challenge this challenge is all about polymorphism.

2
00:00:11,390 --> 00:00:15,680
I'm in the Section 16 workspace and there's going to be a couple of projects here.

3
00:00:15,680 --> 00:00:20,120
First we've got the challenge project this is the base source code that I'm providing for you.

4
00:00:20,360 --> 00:00:24,980
Then we'll break this habit to a few parts and several different videos so that we can take this step

5
00:00:24,980 --> 00:00:25,630
by step.

6
00:00:25,730 --> 00:00:30,890
So right now we're in the challenged project and I in the description text file which describes this

7
00:00:30,890 --> 00:00:31,750
challenge.

8
00:00:31,790 --> 00:00:33,470
So what's the idea.

9
00:00:33,470 --> 00:00:35,210
I think you know what you're going to have to do right.

10
00:00:35,210 --> 00:00:40,880
You've got the solution that we had for last sections challenge where we have the account class and

11
00:00:40,880 --> 00:00:42,470
it's all working great.

12
00:00:42,470 --> 00:00:47,840
Well now we need to modify that so that it's polymorphic so that we're using dynamic polymorphism so

13
00:00:47,840 --> 00:00:52,100
we can use base class pointers and get this all working using dynamic polymorphism.

14
00:00:52,200 --> 00:00:54,770
That's going to be pretty cool but it's going to be some work.

15
00:00:54,770 --> 00:00:55,960
So let's see where we're at.

16
00:00:55,970 --> 00:01:00,070
We've got a source code that I provided and your challenge is as follows.

17
00:01:00,080 --> 00:01:02,670
Remember the source code right now has no virtual functions in it.

18
00:01:02,690 --> 00:01:05,000
Therefore it's all being bound statically.

19
00:01:05,000 --> 00:01:06,380
That's what we want to change.

20
00:01:06,380 --> 00:01:09,500
So here's the challenge part one of the challenges.

21
00:01:09,500 --> 00:01:13,420
Modify the account class so that it's now abstract.

22
00:01:13,430 --> 00:01:14,780
How do you do that.

23
00:01:14,780 --> 00:01:16,010
Pure virtual functions.

24
00:01:16,010 --> 00:01:19,430
We want two of them and they're right here giving them to you right there.

25
00:01:19,670 --> 00:01:23,830
Deposit withdrawal will now be pure virtual functions.

26
00:01:23,840 --> 00:01:29,620
Remember we can implement these into account class if it makes sense in this class it does make sense.

27
00:01:29,620 --> 00:01:35,720
So you may want to consider implementing a simple deposit in a simple withdrawal in the account class.

28
00:01:35,720 --> 00:01:40,670
Even if you implement these in the account class the account class will still be abstract because it's

29
00:01:40,670 --> 00:01:45,280
got those pure virtual functions and that's going to take some work because you've got to revamp your

30
00:01:45,320 --> 00:01:48,020
class hierarchies you've got to think about what you're doing.

31
00:01:48,020 --> 00:01:53,370
Remember once you put virtual functions in there like we are here don't forget about the virtual destructor.

32
00:01:53,370 --> 00:01:56,220
So there's a lot of little things that you'll have to do along the way.

33
00:01:56,270 --> 00:01:56,840
Great.

34
00:01:56,840 --> 00:02:02,270
Now to create the printable class interface similar to what we did in the class.

35
00:02:02,270 --> 00:02:05,570
The idea is that all accounts are going to be printable.

36
00:02:05,570 --> 00:02:08,130
So I've given you the class right here.

37
00:02:08,390 --> 00:02:09,770
I haven't implemented this guy.

38
00:02:09,770 --> 00:02:10,980
You guys can do that.

39
00:02:11,180 --> 00:02:16,670
And obviously the account class can be derived from a principle so now it's principle and all those

40
00:02:16,670 --> 00:02:21,200
concrete account objects can implement that guy right there and they should be printable which is pretty

41
00:02:21,200 --> 00:02:22,150
cool.

42
00:02:22,160 --> 00:02:25,370
One little hint here you'll notice this destructor right here.

43
00:02:25,460 --> 00:02:31,430
Obviously we need virtual destructors we can use equal default tells the compiler to generate a simple

44
00:02:31,430 --> 00:02:32,600
destructor for me.

45
00:02:32,600 --> 00:02:36,830
So this is really same as you writing that kind of code but you don't have to do it at all just say

46
00:02:36,830 --> 00:02:44,390
equal default let the compiler do it for you then the last part of the challenge is to modify the functions

47
00:02:44,390 --> 00:02:46,740
in that account that Udal file that I gave you.

48
00:02:46,790 --> 00:02:52,460
Remember that one had to display deposit and withdraw for an account and it had displaying a positive

49
00:02:52,460 --> 00:02:56,650
withdraw for a checking account and it just had a lot of code in there.

50
00:02:56,660 --> 00:02:58,970
What we want is we just want one version of each.

51
00:02:58,970 --> 00:03:05,840
So we want one display function one deposit function one withdraw function that will work with any kind

52
00:03:05,840 --> 00:03:06,590
of account.

53
00:03:06,800 --> 00:03:08,990
And you'll notice what's going on here.

54
00:03:08,990 --> 00:03:12,040
There's our base class player and that's why this is going to work.

55
00:03:12,050 --> 00:03:17,960
So in this case when we create these vectors in our main We're going to create a vector of base class

56
00:03:17,960 --> 00:03:23,030
pointers and that's what we're going to pass into these these functions here.

57
00:03:23,360 --> 00:03:28,260
Finally test your code both with base class pointers as well as local objects.

58
00:03:28,280 --> 00:03:33,140
I've given you a main driver that gets you started but I'd suggest that you just take it one step at

59
00:03:33,140 --> 00:03:33,780
a time.

60
00:03:33,800 --> 00:03:35,760
It's really the best way to do it.

61
00:03:35,780 --> 00:03:41,170
What I would suggest that you do for the very first thing is take that account class and make it abstract.

62
00:03:41,210 --> 00:03:47,180
Add those virtual functions to it and start from there and then work your way down the class hierarchy

63
00:03:47,630 --> 00:03:51,230
and see what you have to override what you don't have to override and so forth.

64
00:03:51,230 --> 00:03:51,740
That's it.

65
00:03:51,740 --> 00:03:52,420
Have fun.

66
00:03:52,520 --> 00:03:55,220
This is a very very challenging exercise.

67
00:03:55,220 --> 00:03:57,010
There's a lot going on here.

68
00:03:57,020 --> 00:03:58,910
So again take it one step at a time.

69
00:03:58,910 --> 00:04:01,330
Don't think that you'll be able to do this in 15 minutes.

70
00:04:01,340 --> 00:04:06,520
This will take some time and some thought because there's a lot going on a lot of little pieces to this.

71
00:04:06,530 --> 00:04:06,770
All right.

72
00:04:06,770 --> 00:04:08,310
So give it a shot.

73
00:04:08,330 --> 00:04:09,510
I'm sure you can do it.

74
00:04:09,560 --> 00:04:10,460
Take your time.

75
00:04:10,460 --> 00:04:14,300
Think about everything you learned in the class and put it all together in this challenge.

76
00:04:14,300 --> 00:04:17,510
I'll see you in the next video where we'll do part one of the solution.

77
00:04:17,570 --> 00:04:21,260
Part one is taking that account class and making it abstract.
