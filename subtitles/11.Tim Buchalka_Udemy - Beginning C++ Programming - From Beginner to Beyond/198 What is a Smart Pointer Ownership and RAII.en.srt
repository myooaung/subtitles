1
00:00:05,760 --> 00:00:12,750
So what are smart pointers well smart pointers are objects in fact smart pointers are implemented as

2
00:00:12,750 --> 00:00:19,440
C++ template classes which we can instantiate smart pointers can only point to heap allocated memory

3
00:00:19,740 --> 00:00:23,220
and they automatically called the Leite when that's no longer needed.

4
00:00:23,220 --> 00:00:31,290
Also very importantly smart pointers adhere to RAII principles as previously mentioned C++ has several

5
00:00:31,290 --> 00:00:37,530
types of smart pointers unique pointer shared pointer weak pointer and auto pointer auto pointer has

6
00:00:37,530 --> 00:00:38,430
been deprecated.

7
00:00:38,460 --> 00:00:42,490
So you shouldn't use this going forward and we won't discuss it in this section.

8
00:00:42,510 --> 00:00:46,770
So now let's see how we can create a smart pointer.

9
00:00:46,890 --> 00:00:51,990
First we need to include the memory header file since it defines a smart pointer classes and functions

10
00:00:51,990 --> 00:00:53,220
will use.

11
00:00:53,610 --> 00:00:57,550
As previously mentioned smart pointers are implemented as class templates.

12
00:00:57,660 --> 00:01:02,670
Very similar to the way that the vector class is implemented and we create them using a template parameter

13
00:01:02,880 --> 00:01:04,820
much as we did with vectors.

14
00:01:05,190 --> 00:01:10,210
Smart pointers are basically wrapper classes that contain and manage a raw pointer.

15
00:01:10,260 --> 00:01:14,940
The actual implementation of smart pointers is compiler dependent and it's beyond the scope of this

16
00:01:14,940 --> 00:01:16,230
section.

17
00:01:16,230 --> 00:01:22,020
Once we create a smart pointer we can use the smart pointer much in the same way as we use raw pointer.

18
00:01:22,020 --> 00:01:27,570
The smart pointer classes provide overloaded dereference and member selection operators as well as methods

19
00:01:27,570 --> 00:01:29,750
to get the raw pointer and more.

20
00:01:29,760 --> 00:01:35,240
However you can't do pointer arithmetic on smart pointers like you can with raw pointers.

21
00:01:35,250 --> 00:01:39,840
Finally we can have custom Do leaders with smart pointers where we can explicitly defined the exact

22
00:01:39,840 --> 00:01:42,990
behavior we want when the pointer is about to be destroyed.

23
00:01:42,990 --> 00:01:46,260
Now let's see the syntax for declaring a smart pointer.

24
00:01:47,130 --> 00:01:50,520
Here's an example of how you might create a smart pointer variable.

25
00:01:50,520 --> 00:01:55,800
Of course you would replace smart pointer with one of the C++ smart pointer types like unique pointer

26
00:01:55,980 --> 00:01:58,180
shared pointer or weak pointer.

27
00:01:58,320 --> 00:02:04,620
In this case the smart pointer PGR will manage an object of type some class that's been allocated on

28
00:02:04,620 --> 00:02:05,940
the heap.

29
00:02:05,940 --> 00:02:10,920
Once we create a smart pointer object we can use the dereference operator the member selection operator

30
00:02:11,160 --> 00:02:13,900
or any of the other smart pointer member methods.

31
00:02:14,310 --> 00:02:18,260
Notice that we don't have to explicitly delete the pointer when we're done with it.

32
00:02:18,330 --> 00:02:23,880
In this example when the pointer goes out of scope the smart pointers destructor is called automatically

33
00:02:24,090 --> 00:02:27,510
and it takes care of deallocating any heap storage that was used.

34
00:02:27,510 --> 00:02:28,980
That's pretty cool.

35
00:02:28,980 --> 00:02:32,880
You can see how powerful smart pointers are they can prevent memory leaks.

36
00:02:32,910 --> 00:02:36,550
Make your code easier to read and write and maintain with less errors.

37
00:02:38,460 --> 00:02:43,150
Now let's talk about a common idiom or design pattern used in C++ programming.

38
00:02:43,260 --> 00:02:52,050
It's called RAII or are a lie and it stands for Resource Acquisition is initialization a complicated

39
00:02:52,050 --> 00:02:54,160
acronym for a pretty simple concept.

40
00:02:54,420 --> 00:02:58,680
First RAII objects are allocated on the stack.

41
00:02:58,680 --> 00:03:01,640
The resource acquisition part is pretty straightforward.

42
00:03:01,650 --> 00:03:07,620
It means that RAII objects will acquire some sort of resource that could be opening a file allocating

43
00:03:07,620 --> 00:03:10,410
memory acquiring a lock and so forth.

44
00:03:10,560 --> 00:03:13,290
The initialization part is also straightforward.

45
00:03:13,290 --> 00:03:17,320
This means that the resources acquired an object initialization time.

46
00:03:17,340 --> 00:03:21,000
So in other words it happens in the object's constructor.

47
00:03:21,090 --> 00:03:26,410
Now at some point we need to relinquish that resource that we acquired and that happens in the destructor.

48
00:03:26,430 --> 00:03:32,000
Here we can close the file deallocate any allocated memory release locks and so forth.

49
00:03:32,130 --> 00:03:38,190
Smart pointers are examples of RAII classes since this is the idiom they follow with regard to memory

50
00:03:38,190 --> 00:03:39,660
resources.

51
00:03:39,660 --> 00:03:42,460
A simple concept but a very powerful concept.

52
00:03:42,480 --> 00:03:47,310
So let's start our exploration of the C++ smart pointers with the unique pointer in the next video.
