WEBVTT
1
00:00:05.470 --> 00:00:10.680
In this video we'll see what inheritance is all about in Object Orientation.

2
00:00:10.770 --> 00:00:15.770
Inheritance provides a method of creating new classes from existing classes.

3
00:00:15.840 --> 00:00:21.040
These new classes contain the data and behaviors of the existing classes.

4
00:00:21.180 --> 00:00:27.710
So as you can see that allows us to reuse or inherit data and behaviors that already exist.

5
00:00:28.020 --> 00:00:33.090
More importantly where we're using behaviors that have been tested and have already been used in existing

6
00:00:33.090 --> 00:00:38.910
applications that's great but it wouldn't be very useful if I only inherited data and behaviors and

7
00:00:38.910 --> 00:00:39.730
that's it.

8
00:00:40.050 --> 00:00:45.580
But with inheritance we can modify the behaviors however we'd like to make our newly created classes

9
00:00:45.600 --> 00:00:46.710
unique.

10
00:00:46.710 --> 00:00:52.370
So the new class is based on an existing class but we can tweak it so that it does exactly what we want

11
00:00:52.370 --> 00:00:57.210
it to do and we can do this without modifying the source code of the original class.

12
00:00:57.210 --> 00:00:58.170
We're reusing.

13
00:00:58.470 --> 00:01:04.420
This is important since that class has already been tested and it's probably being reused by other applications.

14
00:01:04.530 --> 00:01:07.360
So we really don't want to modify it at all.

15
00:01:07.470 --> 00:01:09.450
Of course inheritance must make sense.

16
00:01:09.540 --> 00:01:15.300
We don't want to reuse a class employee and create a new class planet that contains the data and behaviors

17
00:01:15.300 --> 00:01:16.850
of an employee.

18
00:01:16.860 --> 00:01:20.370
Let's see some examples of classes that are related somehow.

19
00:01:23.310 --> 00:01:28.770
In many applications when you're designing your solution you can identify classes in your application

20
00:01:29.070 --> 00:01:30.910
that are related to one another.

21
00:01:30.990 --> 00:01:35.930
Sometimes the relationship is clear and other times the relationship might be less clear.

22
00:01:35.940 --> 00:01:40.860
This line provides some examples of related classes in a game application.

23
00:01:40.860 --> 00:01:45.960
We might have player enemy level boss hero and super player classes.

24
00:01:45.960 --> 00:01:51.210
These classes may have attributes in common such as health Expwy their position in the game world and

25
00:01:51.210 --> 00:01:52.490
so forth.

26
00:01:52.500 --> 00:01:59.280
In fact maybe the classes are all specializations of that player class in a banking application.

27
00:01:59.280 --> 00:02:01.660
You might have different types of accounts.

28
00:02:01.680 --> 00:02:07.560
Some may have specialized business rules for withdraw deposit minimum balances interest rates and so

29
00:02:07.560 --> 00:02:08.380
forth.

30
00:02:08.580 --> 00:02:13.850
But again maybe all accounts have a balance and provide the withdraw and deposit behaviors.

31
00:02:14.100 --> 00:02:20.550
Usually we can find commonality among these classes and we can leverage that in a graphics or drawing

32
00:02:20.550 --> 00:02:21.240
application.

33
00:02:21.240 --> 00:02:26.520
We may have many different types of shapes that we can draw such as lines ovals circles squares and

34
00:02:26.520 --> 00:02:29.650
so forth depending on our application.

35
00:02:29.880 --> 00:02:34.830
Maybe we can identify common attributes that all shapes have perhaps their color.

36
00:02:34.830 --> 00:02:40.650
They must be drawable you should be able to rotate and transform them and as you can see in the last

37
00:02:40.650 --> 00:02:45.010
example maybe we have an application for university personnel system.

38
00:02:45.150 --> 00:02:50.430
You might have person employee students faculty staff administrators and so forth.

39
00:02:50.430 --> 00:02:51.620
You get the idea.

40
00:02:51.660 --> 00:02:54.960
Related classes are all around us when we develop software.

41
00:02:54.990 --> 00:03:00.540
Sometimes it makes sense to extract out common elements of related classes and model them on their own

42
00:03:00.540 --> 00:03:02.010
so we can reuse them.

43
00:03:02.010 --> 00:03:06.440
Let's look at the account classes in more detail.

44
00:03:06.750 --> 00:03:10.890
Here we can see that our application has several different types of accounts.

45
00:03:10.920 --> 00:03:16.590
We have a basic account that has balance in a way to deposit and withdraw funds.

46
00:03:16.590 --> 00:03:22.950
We also have a savings account object that also has a balance but an interest rate as well and the deposit

47
00:03:22.950 --> 00:03:27.180
and withdraw behavior might be a little different from those in the account class since they have to

48
00:03:27.180 --> 00:03:31.590
consider the interest rate checking account also has a balance.

49
00:03:31.680 --> 00:03:36.960
But maybe you have to keep a minimum balance and there are per check fees so the deposit and withdraw

50
00:03:36.960 --> 00:03:42.750
behavior for the checking account will be different from both the savings account and the regular account.

51
00:03:42.750 --> 00:03:47.820
Finally maybe we have a trust account that has a balance and the deposit functionality is just like

52
00:03:47.820 --> 00:03:53.640
an account but to withdraw only allows three withdrawals per year of a maximum of 10 percent of the

53
00:03:53.640 --> 00:03:55.260
account balance.

54
00:03:55.290 --> 00:04:00.000
You can see that these types of accounts are very different but they also have some common attributes

55
00:04:00.000 --> 00:04:01.240
and behaviors.

56
00:04:01.620 --> 00:04:06.060
Let's see how we could model these accounts without any inheritance any reasonability

57
00:04:08.820 --> 00:04:15.120
what we could do here is we could create four independent classes account savings account checking account

58
00:04:15.180 --> 00:04:19.850
interest account and implement them all totally independent from one another.

59
00:04:19.860 --> 00:04:25.380
Sure this will work but we'll surely have code that's duplicated across these classes since some of

60
00:04:25.380 --> 00:04:28.360
the behavior and some of the data will be common.

61
00:04:28.380 --> 00:04:32.350
Let's see how we can use inheritance to allow us to reuse the account class.

62
00:04:34.860 --> 00:04:38.970
We'll look at proper C++ syntax for inheritance in a few videos.

63
00:04:38.970 --> 00:04:41.650
For now let's just look at this from a conceptual view.

64
00:04:42.030 --> 00:04:46.880
We have an account class that models a balance and provides a simple implementation for withdraw and

65
00:04:46.890 --> 00:04:48.480
deposit.

66
00:04:48.480 --> 00:04:53.700
Now we can use inheritance to create a new class savings account based on the account class.

67
00:04:53.850 --> 00:04:59.640
So the savings account will inherit balance and the implementations of withdraw and deposit provided

68
00:04:59.640 --> 00:05:06.270
by the account class and the idea is that now we simply add the interest rate attribute to the new savings

69
00:05:06.270 --> 00:05:10.460
account class and implement its own version of deposit and withdraw.

70
00:05:11.130 --> 00:05:13.700
The same idea applies to the last two examples.

71
00:05:13.950 --> 00:05:19.680
A checking account is created using the account class as a base and then it adds what it needs and modifies

72
00:05:19.680 --> 00:05:21.920
the behaviors to meet its requirements.

73
00:05:22.320 --> 00:05:26.700
Finally the trust account adds and interest rate and implements the logic and the withdrawal method

74
00:05:26.940 --> 00:05:29.580
that supports the business logic.

75
00:05:29.580 --> 00:05:32.540
You can see that these classes are now interrelated.

76
00:05:32.580 --> 00:05:38.760
In this case the savings account checking account and trust account classes depend on the account class

77
00:05:39.090 --> 00:05:41.580
and we have an inheritance hierarchy.

78
00:05:41.580 --> 00:05:47.010
In this case it's router that the account class will talk more about inheritance hierarchies in an upcoming

79
00:05:47.010 --> 00:05:47.760
video.

80
00:05:48.180 --> 00:05:53.220
So now that we understand what inheritance is let's go over some of the terminology and notation used

81
00:05:53.220 --> 00:05:54.270
in the next video.
