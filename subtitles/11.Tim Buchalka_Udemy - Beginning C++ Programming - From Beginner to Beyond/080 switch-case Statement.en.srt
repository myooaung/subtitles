1
00:00:05,690 --> 00:00:11,080
In this video we'll learn about C++ is switch statement as you've already seen.

2
00:00:11,100 --> 00:00:17,730
It's very common to have to execute specific sections of code depending on the value of a constant for

3
00:00:17,730 --> 00:00:21,470
this particular use case the switch statement comes in very useful.

4
00:00:21,750 --> 00:00:28,130
Well learn the switch case break and default keywords the syntax for the switch date is a little more

5
00:00:28,130 --> 00:00:33,030
involved than the if statement but it's not too bad once you understand what it's doing.

6
00:00:33,050 --> 00:00:39,020
First we have the switch keyword which is followed by the control expression inside parentheses.

7
00:00:39,230 --> 00:00:44,770
This control expression must evaluate to an integral type or an enumeration type.

8
00:00:45,800 --> 00:00:49,930
Then you have a series of case statements enclosed in curly braces.

9
00:00:51,070 --> 00:00:57,350
The value of the control expression will be compared to the values following the case keywords.

10
00:00:57,370 --> 00:01:03,160
These case statements must also evaluate to an integral or enumeration type and must be known at compile

11
00:01:03,160 --> 00:01:03,900
time.

12
00:01:03,910 --> 00:01:09,940
That means there must be constants or literals when the value of the control expression matches the

13
00:01:09,940 --> 00:01:11,290
case expression.

14
00:01:11,320 --> 00:01:16,720
Then the code after the colon is executed until you hit a break statement.

15
00:01:16,920 --> 00:01:18,470
The break statements are optional.

16
00:01:18,580 --> 00:01:22,400
But best practice is to include break statements for every case statement.

17
00:01:22,540 --> 00:01:24,860
Unless you've got a really good reason not to.

18
00:01:25,690 --> 00:01:30,280
In the next several slides will go through the behavior of a switch statement with and without break

19
00:01:30,280 --> 00:01:31,800
statements.

20
00:01:31,810 --> 00:01:37,210
Finally a switch statement can have a default case at dnd that will execute when none of the cases is

21
00:01:37,210 --> 00:01:37,850
true.

22
00:01:38,140 --> 00:01:43,320
This is similar to that catch all else at the bottom of an IF statement.

23
00:01:43,540 --> 00:01:46,440
The break statement is not needed in the default case.

24
00:01:46,570 --> 00:01:49,660
Let's see some examples of the various forms of the switch statement.

25
00:01:52,730 --> 00:01:56,030
In this example selection is a character type.

26
00:01:56,030 --> 00:01:58,810
Which of course is also an integral type.

27
00:01:58,820 --> 00:02:04,700
We assumed that the user has entered a character at the keyboard and it's been assigned to selection.

28
00:02:04,700 --> 00:02:09,260
We can write IF ELSE IF statements to execute code depending on the character entered.

29
00:02:09,380 --> 00:02:14,780
But in this case we can use a switch statement since the control expression is an integral type and

30
00:02:14,780 --> 00:02:18,230
the case statement contains character literals to match.

31
00:02:18,230 --> 00:02:24,380
So suppose the user enters the character to the switch will start at the first case statement and compare

32
00:02:24,380 --> 00:02:26,600
the two to the literal expression.

33
00:02:26,600 --> 00:02:28,330
Following the case keyword.

34
00:02:28,430 --> 00:02:31,090
So the two will first be compared to the one.

35
00:02:31,220 --> 00:02:35,890
Since this is not true we proceed and check the next case statement.

36
00:02:35,990 --> 00:02:41,090
In this case we have a match so all the code following the colon will be executed.

37
00:02:41,090 --> 00:02:45,100
Notice that we can have multiple statements here without the need for a block.

38
00:02:45,110 --> 00:02:50,480
However if you need to declare variables in this section then you need to put the curly braces in for

39
00:02:50,480 --> 00:02:53,840
a block so we displayed two selected.

40
00:02:53,900 --> 00:02:57,420
Then we execute the break statement which completes the switch statement.

41
00:02:57,500 --> 00:03:02,180
No further cases will be checked when we continue with the rest of the program.

42
00:03:02,180 --> 00:03:08,230
Notice that in the case of 3 and 4 we display 3 or 4 has been selected and then we're done with this

43
00:03:08,230 --> 00:03:09,170
switch.

44
00:03:09,170 --> 00:03:14,810
This is handy since we can write logic that's equivalent to an OR statement as we see in this case.

45
00:03:14,840 --> 00:03:17,410
Finally the switch has a default case.

46
00:03:17,570 --> 00:03:21,830
If none of the previous case statements match then we execute the default.

47
00:03:22,070 --> 00:03:26,630
Which in this case displays 1 2 3 4 not selected.

48
00:03:26,930 --> 00:03:29,360
No break is needed in the default statement.

49
00:03:29,360 --> 00:03:33,600
Also the default statement is optional but it's best practice to include one.

50
00:03:34,070 --> 00:03:39,400
Let's look at an example where we don't have some break statements.

51
00:03:39,430 --> 00:03:43,170
This is an example of the fall through behavior of the switch statement.

52
00:03:43,180 --> 00:03:47,580
Notice that there are no break statement in cases 1 2 and 3.

53
00:03:47,680 --> 00:03:51,070
Case 4 is the only case that has a break statement.

54
00:03:51,070 --> 00:03:56,260
Suppose a user enters the character one and it was assigned to selection.

55
00:03:56,260 --> 00:03:58,850
We checked the first case statement and it matches.

56
00:03:59,020 --> 00:04:01,650
So we execute the code following the colon.

57
00:04:01,720 --> 00:04:04,560
In this case we display one selected.

58
00:04:04,570 --> 00:04:10,770
Now we continue executing code going straight down the switch statement until we hit a break statement.

59
00:04:11,110 --> 00:04:16,120
So in this case we also display two selected and three selected and four selected.

60
00:04:16,120 --> 00:04:21,310
Finally we hit a break statement in case 4 and we're done with the switch.

61
00:04:21,340 --> 00:04:27,130
Remember once a match is made all the code in the switch cases including And following that match will

62
00:04:27,130 --> 00:04:30,260
be executed until we hit a break statement.

63
00:04:30,280 --> 00:04:33,400
No other conditions will be checked.

64
00:04:33,400 --> 00:04:38,890
This sort of logic can be handy in some cases when you want to execute a subset of statements depending

65
00:04:38,890 --> 00:04:40,450
on various conditions.

66
00:04:40,450 --> 00:04:43,720
However this should not be the way you normally code a switch statement.

67
00:04:43,720 --> 00:04:48,000
Best practice is to include a break statement in every case statement.

68
00:04:48,130 --> 00:04:50,140
If you need logic that falls through.

69
00:04:50,230 --> 00:04:55,270
Please document the code and be very clear in the documentation that the follow through behavior is

70
00:04:55,270 --> 00:04:56,500
what you intended.

71
00:04:56,800 --> 00:05:02,560
If another programmer sees the code and needs to modify it they'll understand this and be very careful

72
00:05:02,560 --> 00:05:05,560
when adding or removing new conditions or statements.

73
00:05:05,980 --> 00:05:10,010
Let's see an example of using a switch statement with an enumeration.

74
00:05:11,050 --> 00:05:15,720
In this example we see an example of using a switch statement with an enumeration type.

75
00:05:15,850 --> 00:05:20,950
We have an enumeration type called color with three enumeration constants red green and blue.

76
00:05:21,250 --> 00:05:26,470
We also have a variable name screen color which we initialize to green but it can hold any of the three

77
00:05:26,470 --> 00:05:32,620
enumeration constants using this enumeration variable in the switch statement is a very common use case

78
00:05:32,880 --> 00:05:36,240
and a great way to execute code depending on its value.

79
00:05:36,430 --> 00:05:42,190
In this case we switch off the screen color which can only be red green or blue and we execute the appropriate

80
00:05:42,190 --> 00:05:45,340
code when we match the specific value.

81
00:05:45,340 --> 00:05:50,830
Also notice that in this case we're supplying a default case but this should never execute unless we

82
00:05:50,890 --> 00:05:56,040
add another enumeration constant to our enumeration and forget to include a case for it.

83
00:05:58,710 --> 00:06:01,410
So let's review what we learned about the switch statement.

84
00:06:01,410 --> 00:06:04,680
The control expression must evaluate to an integral type.

85
00:06:04,740 --> 00:06:08,350
The switch statement is commonly used with enumeration types.

86
00:06:08,390 --> 00:06:13,590
The case expressions must be known at compile time so only constants are literals can be used.

87
00:06:13,590 --> 00:06:16,580
No variables once a match occurs.

88
00:06:16,590 --> 00:06:22,230
All code in the following case statements is executed until a break statement is reached.

89
00:06:22,230 --> 00:06:27,960
Finally best practice is to always include break statements for each case and also provide a default

90
00:06:27,960 --> 00:06:28,900
case.

91
00:06:29,280 --> 00:06:32,550
Let's head over to the ID and see some switch statements in action.

92
00:06:33,890 --> 00:06:40,550
I'm in the ID in the section 9 workspace in the switch project and what we're going to do we're going

93
00:06:40,550 --> 00:06:43,860
to do a little program here that uses a switch statement.

94
00:06:43,910 --> 00:06:50,570
We're going to ask the user what grade they expect on an exam that will be a character a b c d f and

95
00:06:52,020 --> 00:06:54,130
we'll tell them what they need to score to get it.

96
00:06:54,390 --> 00:07:00,330
OK so I made a start here where we have a letter grade a character and that's what the user is going

97
00:07:00,330 --> 00:07:01,310
to enter.

98
00:07:01,560 --> 00:07:07,190
We prompt the user to enter the letter grade they expect on the exam and we read that into letter grade.

99
00:07:07,200 --> 00:07:11,740
OK so now what we want to do is we want to switch off of letter grade.

100
00:07:11,760 --> 00:07:14,550
It's a character so that's definitely an integral type.

101
00:07:14,670 --> 00:07:15,930
So we'll say switch

102
00:07:19,590 --> 00:07:21,760
and we want to switch off letter grade.

103
00:07:22,090 --> 00:07:27,200
Well put in the syntax I need which is the open and Curley's for my switch statement.

104
00:07:27,210 --> 00:07:33,960
Now what we have in here is we need to provide the cases now in this case we can provide upper and lower

105
00:07:33,960 --> 00:07:40,910
case for each character so we could say case lowercase a and case upper case a.

106
00:07:40,920 --> 00:07:45,400
I want the same behavior because the user could certainly type of a lower case.

107
00:07:45,990 --> 00:07:51,930
So if they type a lowercase or an upper case they almost say is C out.

108
00:07:52,410 --> 00:08:01,280
Let's say you need a 90 or above and we'll tell them to study hard.

109
00:08:03,600 --> 00:08:04,020
OK.

110
00:08:04,080 --> 00:08:08,980
So that will be the statement for that specific case.

111
00:08:09,570 --> 00:08:10,430
We need a break.

112
00:08:10,440 --> 00:08:15,960
Otherwise word will fall through I don't want to fall through in this example and let's do the be case

113
00:08:18,300 --> 00:08:20,740
again lower case and upper case.

114
00:08:21,000 --> 00:08:26,010
And also remember them using single quote marks here because these are characters.

115
00:08:26,010 --> 00:08:27,550
So in the case of a B.

116
00:08:27,570 --> 00:08:29,370
That's what they want most.

117
00:08:29,520 --> 00:08:39,320
Say something like you need 80 to 89 for a b and we'll say Go study

118
00:08:45,130 --> 00:08:46,810
and I'll use that line here.

119
00:08:47,780 --> 00:08:48,950
And again I want to break

120
00:08:51,500 --> 00:08:54,140
that to our c case.

121
00:08:54,140 --> 00:08:55,610
So there are a couple left.

122
00:08:55,620 --> 00:09:06,140
So there's my lowercase c is my uppercase C and in this case I'll just say up put a.

123
00:09:06,800 --> 00:09:10,740
Something like you need 70 to 79

124
00:09:13,120 --> 00:09:15,820
for an average grade that say

125
00:09:20,000 --> 00:09:21,120
and roll and line.

126
00:09:21,120 --> 00:09:28,010
Here again a break will do the DKs

127
00:09:35,570 --> 00:09:38,850
and here will say something like I don't know Hmm

128
00:09:42,390 --> 00:09:44,590
actually you should strive for a better grade.

129
00:09:55,310 --> 00:09:58,570
I was just saying all you need is 60 to 69 or something like that

130
00:10:02,200 --> 00:10:04,350
and will put an end line here as well.

131
00:10:08,350 --> 00:10:12,210
Of course the break is required here because I don't want to fall through.

132
00:10:12,730 --> 00:10:17,990
And then in the case of F again lowercase f or uppercase f

133
00:10:21,650 --> 00:10:29,190
hear what just you see out is just put a little placeholder here to test ourselves because we want to

134
00:10:29,190 --> 00:10:39,180
add a little bit of code here once we finished this example OK and we'll break out of here.

135
00:10:39,380 --> 00:10:47,480
Our default he's going to say something like Sorry that's not a valid grade.

136
00:10:55,950 --> 00:10:58,600
And I think we're pretty much done here.

137
00:10:59,950 --> 00:11:03,690
OK and we clean that up just a little bit.

138
00:11:03,690 --> 00:11:06,320
So let's look through this right before we run it.

139
00:11:06,330 --> 00:11:10,270
We're grabbing the letter from the letter grade from the user was switching off of it.

140
00:11:10,440 --> 00:11:16,510
We're checking for lower case upper case a we've got a message to be the c to d the f.

141
00:11:16,560 --> 00:11:21,270
And sorry not a valid grade and we'll get back to the effort a little bit we'll write some code in there.

142
00:11:21,330 --> 00:11:22,920
So let's execute this

143
00:11:25,750 --> 00:11:27,300
actually the letter grade you expect.

144
00:11:27,300 --> 00:11:30,240
I want to say you need 90 or above.

145
00:11:30,240 --> 00:11:31,270
Study hard.

146
00:11:31,620 --> 00:11:35,510
OK let's do the beat.

147
00:11:35,520 --> 00:11:37,620
I'll do a lower case b this time.

148
00:11:37,780 --> 00:11:41,960
You did 80 89 for a Bigos study and let's do the F

149
00:11:44,970 --> 00:11:46,550
and then there's my axis.

150
00:11:46,620 --> 00:11:46,910
OK.

151
00:11:46,920 --> 00:11:55,680
So what we want to do now is in this case right here in the F case let's ask them Are you sure you really

152
00:11:55,680 --> 00:11:56,390
want an F.

153
00:11:56,430 --> 00:11:58,690
Neither did you type this incorrectly.

154
00:11:58,710 --> 00:12:04,230
So what we want to do is we want to read a little if else if statement here and I'm going to declare

155
00:12:04,230 --> 00:12:10,350
a variable in here so I want to be sure that I'm using a block and I want to use the block right in

156
00:12:10,350 --> 00:12:14,440
here like this OK.

157
00:12:14,610 --> 00:12:18,130
So I want to get rid of this guy.

158
00:12:18,130 --> 00:12:21,530
You know I want to put the break inside this block.

159
00:12:21,650 --> 00:12:25,980
Sometimes the ideas don't put those Curley's in the right places and think it's ok now.

160
00:12:26,150 --> 00:12:28,300
OK so this is the logic I want here.

161
00:12:28,430 --> 00:12:33,200
So I want to have another character and I want to actually confirm because I want to confirm that they

162
00:12:33,200 --> 00:12:38,430
really want an F and will initialize it to going to zero.

163
00:12:40,270 --> 00:12:43,080
And then we'll say see out.

164
00:12:44,290 --> 00:12:45,930
Are you sure.

165
00:12:46,270 --> 00:12:47,130
Or something like that.

166
00:12:47,170 --> 00:12:47,650
Say yes.

167
00:12:47,650 --> 00:12:48,000
No

168
00:12:51,680 --> 00:13:00,200
OK so they'll they'll enter a yes or no and I'll read in to confirm again so they're going to type in

169
00:13:00,200 --> 00:13:02,820
a character either yes or no hopefully.

170
00:13:02,840 --> 00:13:03,650
So what do we do.

171
00:13:03,770 --> 00:13:10,100
Well let's say if they type in a yes uppercase or lowercase we'll give them a message.

172
00:13:10,100 --> 00:13:14,840
If they type in a no we'll give them another message and we've got to make sure that they types a yes

173
00:13:14,840 --> 00:13:19,700
or no if they're typed anything else we'll give them a little message that says I have no idea what

174
00:13:19,700 --> 00:13:20,190
you're saying.

175
00:13:20,300 --> 00:13:20,580
OK.

176
00:13:20,600 --> 00:13:21,610
So let's do that.

177
00:13:21,650 --> 00:13:32,900
They say if the on the Confirm character is equal to a lowercase y for the confirmed character is equal

178
00:13:32,900 --> 00:13:39,180
to an upper case why Remember don't forget to do the double equal signs here because we're comparing.

179
00:13:39,290 --> 00:13:43,790
So if that's the case and I'm not going to use any in the block statements here I don't need to just

180
00:13:43,790 --> 00:13:47,560
say out OK.

181
00:13:48,200 --> 00:13:49,310
I guess you didn't study

182
00:13:52,310 --> 00:13:55,450
because you don't want to study right.

183
00:13:55,560 --> 00:14:03,680
You know you've been in line here Els let's check to see if they actually type.

184
00:14:03,690 --> 00:14:05,750
No it could be anything else now right.

185
00:14:05,820 --> 00:14:07,710
All we know is that it's not a yes.

186
00:14:07,710 --> 00:14:20,700
So in this case we'll say else if confirm is a little lower case and or again confirm is an upper case

187
00:14:20,790 --> 00:14:21,120
and

188
00:14:24,500 --> 00:14:39,390
then we'll just simply say something like see out good go study.

189
00:14:39,590 --> 00:14:43,370
So now here we need that catch all else right at this point.

190
00:14:43,370 --> 00:14:44,540
They typed something in.

191
00:14:44,570 --> 00:14:46,370
Other than a yes or no.

192
00:14:47,340 --> 00:14:48,040
So what do we do.

193
00:14:48,040 --> 00:14:56,080
Here we tell them boy you really do want that airfreight we'll just say out illegal choice or something

194
00:14:56,200 --> 00:15:00,930
or something more clever if you like.

195
00:15:02,140 --> 00:15:04,480
Ok that should do it now.

196
00:15:05,700 --> 00:15:09,870
Because I'm creating and declaring that character right here.

197
00:15:09,870 --> 00:15:14,070
I need those Curley's inside the block.

198
00:15:14,160 --> 00:15:19,320
Otherwise if I was not declaring a variable here I don't need to put the Curley's but once I have to

199
00:15:19,320 --> 00:15:21,770
declare a variable I need those Curley's.

200
00:15:21,810 --> 00:15:25,820
So let's execute this and see what's going on.

201
00:15:26,220 --> 00:15:31,230
OK so what's the letter grade the only one I really changed was the F so let's type the F and now it

202
00:15:31,230 --> 00:15:37,240
says are you sure I'll say yes OK I guess you didn't study exactly what we expect.

203
00:15:37,240 --> 00:15:40,530
Let me read it again with the f..

204
00:15:40,530 --> 00:15:41,450
Are you sure.

205
00:15:41,500 --> 00:15:43,050
No good.

206
00:15:43,050 --> 00:15:44,020
Go study.

207
00:15:44,460 --> 00:15:53,070
And then we'll just give it another character and we'll go F and let's say are you sure Q illegal choice.

208
00:15:53,070 --> 00:15:53,740
There you go.

209
00:15:53,850 --> 00:16:01,320
So here you can see some logic using the switch statement with a character which is an interval type.

210
00:16:01,410 --> 00:16:05,720
A bunch of literals here with the lowercase A's and so forth.

211
00:16:05,940 --> 00:16:12,490
And in the case f we've got some if else if logic going on as well.

212
00:16:12,600 --> 00:16:15,660
So you could see that the logic for this is pretty straightforward.

213
00:16:15,660 --> 00:16:20,330
The case switch statement makes it nice to do it's kind of long.

214
00:16:20,400 --> 00:16:25,820
The code is pretty wordy but it's very very easy to see very easy to understand.

215
00:16:26,040 --> 00:16:30,150
And when you read this I mean it can't get much clearer than that right you switching off a letter grade

216
00:16:30,160 --> 00:16:31,940
if it's an error and a or a B or A B.

217
00:16:32,010 --> 00:16:38,340
Really really clear indentation again and style really really important if everything here was at the

218
00:16:38,340 --> 00:16:40,290
same level all the way on the left hand side.

219
00:16:40,290 --> 00:16:43,770
It would be really really hard to read and figure out what goes where.

220
00:16:44,160 --> 00:16:48,620
OK so that takes care of the switch statement in this context.

221
00:16:48,630 --> 00:16:52,600
Next we'll do the switch statement using an enumeration and we'll do that one really quickly.

222
00:16:54,980 --> 00:17:01,580
OK so I've switched to the switch in room project and I've started it already so let's go over it here

223
00:17:01,970 --> 00:17:06,010
what I've done here as I've created an enumeration type called direction.

224
00:17:06,140 --> 00:17:11,510
And you could see it right here between lines 10 and 12 and the numeration constants are left right

225
00:17:11,570 --> 00:17:12,280
up and down.

226
00:17:12,320 --> 00:17:13,370
So it's pretty straightforward.

227
00:17:13,370 --> 00:17:17,100
Remember when you declare an enumeration you're creating a new type.

228
00:17:17,180 --> 00:17:22,820
So we can create variables of that type so heading is of type direction just like we could have said

229
00:17:22,880 --> 00:17:27,910
I's in int and we're initializing it to left which is one of those enumeration constants.

230
00:17:27,980 --> 00:17:32,920
OK so now what we want to do is we want to switch off of that heading heading.

231
00:17:32,930 --> 00:17:34,270
Is an enumeration.

232
00:17:34,340 --> 00:17:36,840
So basically it's an integral type.

233
00:17:36,860 --> 00:17:38,230
Enumerations are.

234
00:17:38,240 --> 00:17:44,920
So here I'm going to type and switch and I want to switch off heading in this case.

235
00:17:44,990 --> 00:17:49,150
Our cases are left right up and down right.

236
00:17:49,250 --> 00:17:51,580
They have to be they can't be anything else.

237
00:17:51,600 --> 00:17:56,150
I mean get rid of that extra curly here so we can say case

238
00:18:00,420 --> 00:18:10,890
case left and then at this point we could just say something like C out say going left just something

239
00:18:10,890 --> 00:18:16,870
really simple so that we know we hit the right case and we'll put an end line here.

240
00:18:17,250 --> 00:18:18,840
And of course I want to break

241
00:18:22,580 --> 00:18:23,650
OK.

242
00:18:24,060 --> 00:18:28,760
Most say case right and we'll do the same thing.

243
00:18:28,760 --> 00:18:32,390
I just copy and paste these two lines to save a little time.

244
00:18:32,530 --> 00:18:39,420
And now I'm going to compile this and you'll see the issue that we see right away.

245
00:18:39,870 --> 00:18:42,080
And let me just clean this up just a little bit.

246
00:18:43,200 --> 00:18:43,490
OK.

247
00:18:43,510 --> 00:18:46,320
So let's compile this.

248
00:18:46,470 --> 00:18:49,860
I get us and I get to run this is going left just like I expect.

249
00:18:49,860 --> 00:18:50,320
Right.

250
00:18:50,400 --> 00:18:54,740
But look I'm here and you've got some warnings.

251
00:18:54,750 --> 00:19:00,950
The warnings are saying warning enumeration value up not handled right.

252
00:19:00,990 --> 00:19:04,620
Warning enumeration value down not handle these.

253
00:19:04,620 --> 00:19:09,920
This is telling you that the compiler understands that there are four enumeration constants here.

254
00:19:10,230 --> 00:19:14,970
You're using an enumeration variable in your switch but you're only handling two of those cases.

255
00:19:15,180 --> 00:19:19,770
Well C++ gives you the warning a lot of other programming languages now won't compile this.

256
00:19:19,770 --> 00:19:20,860
This will be an error.

257
00:19:20,910 --> 00:19:22,950
They force you to handle all the types.

258
00:19:22,950 --> 00:19:26,040
So you could create two more types for up and down.

259
00:19:26,190 --> 00:19:31,340
Or you can use a default that's going to catch everything else.

260
00:19:33,920 --> 00:19:35,470
And I would just say OK here

261
00:19:44,830 --> 00:19:46,490
and now no warnings.

262
00:19:46,510 --> 00:19:47,050
All good.

263
00:19:47,050 --> 00:19:48,180
And we're going left.

264
00:19:48,430 --> 00:19:48,850
OK.

265
00:19:48,940 --> 00:19:52,480
So that's really what I wanted to show you with the enumeration types when you use them with switch

266
00:19:52,480 --> 00:19:53,680
statements.

267
00:19:53,710 --> 00:19:58,420
I mean there's a reason you create an enumeration type right you've got these enumeration constant so

268
00:19:58,420 --> 00:20:01,630
that variable Hedding could be any one of those four.

269
00:20:01,660 --> 00:20:08,170
So you really should be handling all four cases in your switch or using a default to handle the fall

270
00:20:08,170 --> 00:20:11,210
through in case one of them doesn't match.

271
00:20:11,610 --> 00:20:14,280
OK so that finishes up this video with the switch statement.
