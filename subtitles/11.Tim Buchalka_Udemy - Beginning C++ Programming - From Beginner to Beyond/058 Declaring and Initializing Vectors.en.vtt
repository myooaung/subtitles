WEBVTT
1
00:00:06.050 --> 00:00:09.640
This video will learn about C++ vectors.

2
00:00:09.650 --> 00:00:15.680
Suppose we want to store test scores for students in a class but registration hasn't started yet.

3
00:00:15.680 --> 00:00:18.680
So I don't know how many students I have to class.

4
00:00:18.680 --> 00:00:22.040
Also students drop and add as the semester progresses.

5
00:00:22.040 --> 00:00:26.390
How can I model this information using an array as we've seen to this point.

6
00:00:26.570 --> 00:00:32.100
Remember C++ arrays are fixed in size and I need to specify a size when I declare them.

7
00:00:32.270 --> 00:00:33.830
So what are my options.

8
00:00:33.890 --> 00:00:39.110
Well I can always set the fixed size of the array to a size large enough so that it's unlikely I'll

9
00:00:39.110 --> 00:00:41.890
have more than that number of students many times.

10
00:00:41.890 --> 00:00:45.680
This option is OK but you'll probably make it too big in a way space.

11
00:00:45.680 --> 00:00:51.390
For example we may have 30 students in the class but we allocated 50 students in the array.

12
00:00:51.440 --> 00:00:56.180
Not only have I wasted storage space but now I need to keep track of how many students are actually

13
00:00:56.180 --> 00:00:57.390
in the array.

14
00:00:57.950 --> 00:01:02.290
And of course sooner or later you'll get that one student that exceeds the size of the array.

15
00:01:03.790 --> 00:01:04.870
So what do we do.

16
00:01:05.080 --> 00:01:09.980
Well we can use a dynamic array such as a vector to solve some of these problems.

17
00:01:11.740 --> 00:01:16.600
A C++ vector is part of the C++ standard template library.

18
00:01:16.610 --> 00:01:18.870
This is a library of powerful containers.

19
00:01:18.880 --> 00:01:21.080
Algorithms functions and iterators.

20
00:01:21.080 --> 00:01:27.470
This means that we have available to us pre-written pre-tested easy to use components that we can use

21
00:01:27.470 --> 00:01:29.630
to help us solve our problems.

22
00:01:29.690 --> 00:01:34.150
We'll go over the main components of the standard template library toward the end of this course.

23
00:01:35.030 --> 00:01:41.750
We've talked about C++ being an object oriented language well when we create a C++ vector we are creating

24
00:01:41.750 --> 00:01:47.710
a C++ object and we can ask the object to perform operations for us.

25
00:01:47.720 --> 00:01:53.420
Vectors can grow and shrink in size at runtime so it's a perfect choice to model my students.

26
00:01:53.420 --> 00:01:57.330
Vectors also provide syntax and semantics similar to a race.

27
00:01:57.350 --> 00:02:01.400
So what we've learned about arrays understanding vectors will be pretty easy.

28
00:02:01.670 --> 00:02:08.360
In addition to the array like syntax we can also use lots of really powerful functions like short reverse

29
00:02:08.480 --> 00:02:15.050
erase find and more vectors also give us the ability to use methods that provide bounds checking if

30
00:02:15.050 --> 00:02:15.760
we wish.

31
00:02:15.890 --> 00:02:18.720
Let's see how we can declare vectors.

32
00:02:18.740 --> 00:02:21.160
There are several ways to declare a vector.

33
00:02:21.200 --> 00:02:26.390
The syntax for declaring a vector changes slightly from that of declaring an array because vectors are

34
00:02:26.390 --> 00:02:27.250
objects.

35
00:02:27.320 --> 00:02:34.610
First we must include the vector library also the vector type is part of the standard library so we

36
00:02:34.610 --> 00:02:39.620
must either use the namespace or use standard in the scope resolution operator.

37
00:02:40.100 --> 00:02:43.910
We can create a vector of any type we want just like we did with arrays.

38
00:02:44.090 --> 00:02:45.830
Here's a syntax for vectors.

39
00:02:45.860 --> 00:02:50.050
Don't worry at this point what the differences are will cover this in a future section.

40
00:02:50.180 --> 00:02:55.610
Since the vector is an object oriented template class we must include the type of the elements of the

41
00:02:55.610 --> 00:02:58.000
vector inside the angle brackets.

42
00:02:58.010 --> 00:03:03.560
So for example vowels is a vector or a collection of characters.

43
00:03:03.560 --> 00:03:06.690
Test scores is a factor of integers.

44
00:03:06.740 --> 00:03:11.030
Both these examples create an empty vector that contains no elements.

45
00:03:11.030 --> 00:03:16.850
Let's look at a few other ways to declare vectors in the first example we declared vowels to be a vector

46
00:03:16.850 --> 00:03:18.950
containing five characters.

47
00:03:19.040 --> 00:03:23.290
In this case I'm not providing an initializer list would do that in the next slide.

48
00:03:23.540 --> 00:03:29.890
Instead I'm using constructor initialization syntax which provides information inside parentheses.

49
00:03:30.170 --> 00:03:35.720
This tells the compiler that you want 5 characters in the second example we declare a vector named Test

50
00:03:35.720 --> 00:03:38.060
scores of 10 integers.

51
00:03:38.240 --> 00:03:42.590
Unlike arrays these ten integers will be automatically set to zero.

52
00:03:42.590 --> 00:03:45.800
I don't have to do that explicitly myself.

53
00:03:45.800 --> 00:03:51.590
We can also use initializer lists as we did with a raise to initialize vector elements in this first

54
00:03:51.590 --> 00:03:52.040
example.

55
00:03:52.040 --> 00:03:57.650
We declare vowels to be a vector containing five characters in the first example we declare and an issue

56
00:03:57.650 --> 00:04:00.420
Alais the vowels vector to the characters.

57
00:04:00.650 --> 00:04:06.350
I o you note that there are single quotes around the character literals not double quotes.

58
00:04:06.350 --> 00:04:09.830
In the second example we declare and initialize a vector name.

59
00:04:09.830 --> 00:04:11.890
Test scores to the integers.

60
00:04:11.990 --> 00:04:13.300
198.

61
00:04:13.340 --> 00:04:18.020
89 85 and 93 is a third example.

62
00:04:18.020 --> 00:04:20.840
Notice it or two values in the parentheses.

63
00:04:20.840 --> 00:04:24.700
The first value a parameter is the initial size of the vector.

64
00:04:24.710 --> 00:04:32.630
In this case 365 the second value is what you want to initialize all the 365 doubles to.

65
00:04:32.960 --> 00:04:39.620
In this case we're declaring a vector of 365 doubles and we're initializing all of those doubles to

66
00:04:39.680 --> 00:04:41.770
eighty point zero degrees Fahrenheit.

67
00:04:41.990 --> 00:04:44.210
There are also many other ways to declare victory.

68
00:04:44.210 --> 00:04:48.560
You could declare a vector to be a copy of an array or a copy of another vector.

69
00:04:48.560 --> 00:04:53.590
I think you're beginning to see how powerful vectors can be compared to arrays.

70
00:04:53.800 --> 00:04:56.680
So let's do a quick recap about vectors.

71
00:04:56.740 --> 00:05:01.780
We learned that vectors are an object oriented container defined in the standard template library.

72
00:05:01.780 --> 00:05:08.740
We must include the vector include file to use them and they belong to the standard namespace like arrays.

73
00:05:08.770 --> 00:05:13.600
Vectors allow you to tell the compiler to give you a collection of as many elements as you want and

74
00:05:13.600 --> 00:05:16.330
give the entire collection a single name.

75
00:05:16.330 --> 00:05:22.470
Vectors are dynamic and size which means they can grow and shrink as needed at runtime like arrays.

76
00:05:22.480 --> 00:05:28.840
Vector data is stored contiguously in memory vector elements are individually accessible.

77
00:05:28.840 --> 00:05:33.310
Vector indexes started 0 and end up position size minus one.

78
00:05:33.310 --> 00:05:39.310
If you use the subscript operator that's the square brackets to access vector elements then vectors

79
00:05:39.310 --> 00:05:44.550
will provide no bounds checking this provides the same behavior as arrays.

80
00:05:44.580 --> 00:05:49.370
However vectors provide a rich set of functions that do provide type checking.

81
00:05:49.620 --> 00:05:55.110
As a programmer you can decide what you need to use unlike arrays when you declare a vector.

82
00:05:55.110 --> 00:06:00.020
The vector elements will automatically be initialized to zero unless you specify otherwise.

83
00:06:00.030 --> 00:06:04.450
So if you declare a vector of 10 integers these integers will be initialized to 0.

84
00:06:04.470 --> 00:06:06.360
They won't contain garbage.

85
00:06:06.660 --> 00:06:08.780
Vectors are very efficient.

86
00:06:08.850 --> 00:06:14.550
And finally we commonly use iteration or looping to process vectors just like we do in a race.

87
00:06:14.700 --> 00:06:20.310
Later in this section we'll talk about C++ vectors in the next video we'll look at how we can access

88
00:06:20.400 --> 00:06:25.620
individual vector elements and will also see a few of those useful vector functions I mentioned.
