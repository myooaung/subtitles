WEBVTT
1
00:00:05.830 --> 00:00:12.850
Before we get to 20 C plus plus code that uses pointers lets see what a pointer is a pointer is a variable.

2
00:00:12.850 --> 00:00:14.950
OK we know all about variables.

3
00:00:14.950 --> 00:00:17.530
Variables have an address in memory where they're bound to.

4
00:00:17.530 --> 00:00:22.660
They also have a type such as int double string vector and so forth and they have a value which they

5
00:00:22.660 --> 00:00:23.890
store.

6
00:00:23.890 --> 00:00:29.520
A pointer is a variable and it stores the address of another variable or function.

7
00:00:29.530 --> 00:00:35.710
So if I initialize an integer variable named X to 10 then X is of type integer and it's bound to some

8
00:00:35.710 --> 00:00:38.870
memory location and it contains the value 10.

9
00:00:39.010 --> 00:00:43.500
That means that I can declare a pointer variable that stores the address of x.

10
00:00:43.740 --> 00:00:48.260
So a pointer is a variable that means that the pointer has a memory location where it's bound to.

11
00:00:48.420 --> 00:00:49.520
It has a type.

12
00:00:49.710 --> 00:00:53.280
It has a value and the value is an address.

13
00:00:53.280 --> 00:00:56.670
We'll see how to declare a pointer in C++ in the next video.

14
00:00:56.670 --> 00:01:01.650
Remember that a pointer points to a variable or to a function to use the pointer you must know the type

15
00:01:01.650 --> 00:01:05.430
of what it points to before we learn about how to use pointers.

16
00:01:05.430 --> 00:01:07.770
Let's see why we use pointers in the first place.

17
00:01:09.260 --> 00:01:11.770
If a pointer points to a variable or a function.

18
00:01:11.870 --> 00:01:14.870
Can't I just use the variable or the function directly.

19
00:01:14.900 --> 00:01:15.570
Sure.

20
00:01:15.800 --> 00:01:17.320
And if you can you should.

21
00:01:17.360 --> 00:01:21.830
There is no sense in creating a pointer to something that you can use directly but you can't always

22
00:01:21.830 --> 00:01:22.780
do that.

23
00:01:22.790 --> 00:01:28.220
For example if you have some complex data that's defined outside a function and you want to access that

24
00:01:28.220 --> 00:01:32.550
data from within the function you can't because the variable name is out of scope.

25
00:01:32.810 --> 00:01:37.820
So you can pass the data to the function by value and make a copy of it or you can use a reference or

26
00:01:37.820 --> 00:01:41.920
a pointer parameter to access that data from within the function.

27
00:01:41.960 --> 00:01:45.500
Also pointers are often used to operate on arrays very efficiently.

28
00:01:45.500 --> 00:01:49.730
In fact we'll see in this section just how interrelated pointers and arrays are.

29
00:01:50.600 --> 00:01:55.520
We can use pointers to allocate memory from the heap or the Freestore dynamically at runtime.

30
00:01:55.670 --> 00:01:58.450
That memory doesn't have a variable name associated with it.

31
00:01:58.470 --> 00:02:00.940
So the only way to use it is through a pointer.

32
00:02:00.950 --> 00:02:06.140
Finally if you're working with embedded systems device drivers or other types of systems software sometimes

33
00:02:06.140 --> 00:02:11.660
you need to gain access to a specific memory address or a range of memory addresses pointers is the

34
00:02:11.660 --> 00:02:13.470
best way to do that.

35
00:02:13.520 --> 00:02:17.900
OK now that we know a little bit more about what a pointer is and why we would use one.

36
00:02:17.900 --> 00:02:20.350
Let's see how we can declare a pointer variable in the next video.
