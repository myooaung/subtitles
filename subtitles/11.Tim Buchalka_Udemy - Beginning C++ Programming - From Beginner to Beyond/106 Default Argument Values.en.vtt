WEBVTT
1
00:00:06.040 --> 00:00:11.630
In this video we'll learn how we can call C++ functions using default argument values.

2
00:00:12.010 --> 00:00:16.840
As we've seen when we call a function we must provide all the arguments that that function requires

3
00:00:17.170 --> 00:00:19.570
and the must be in the right order and of the right type.

4
00:00:19.840 --> 00:00:24.580
But sometimes when we call functions some of the argument values that we pass in tend to be the same

5
00:00:24.580 --> 00:00:26.840
values most of the time.

6
00:00:26.860 --> 00:00:31.660
For example if we have a function that calculates the cost of an item we can provide the function with

7
00:00:31.660 --> 00:00:34.960
the base cost of the item and the sales tax rate.

8
00:00:34.960 --> 00:00:40.370
Suppose that 98 percent of our customers live in a region where the tax rate is 6 percent that means

9
00:00:40.370 --> 00:00:45.760
that we have to provide the tax rate and every function call even though it will almost always be 6

10
00:00:45.760 --> 00:00:47.080
percent.

11
00:00:47.080 --> 00:00:50.740
C++ allows us to provide default values for arguments.

12
00:00:50.740 --> 00:00:56.380
So in the case of the sales tax if we omit the argument from the function call then the C++ compiler

13
00:00:56.620 --> 00:01:00.290
will automatically replace it with the default value of 6 percent.

14
00:01:00.700 --> 00:01:05.890
However if we have a customer whose sales tax rate is 8 percent then we can provide it explicitly and

15
00:01:05.920 --> 00:01:09.860
override the default value as we'll see in the next few slides.

16
00:01:09.910 --> 00:01:14.730
We cannot default arguments to the function prototype or the function definition but not both.

17
00:01:14.770 --> 00:01:21.100
But best practice is to do it in the function prototype default arguments must appear at the tail end

18
00:01:21.100 --> 00:01:22.580
of the parameter list.

19
00:01:22.600 --> 00:01:25.180
We can also have multiple default arguments.

20
00:01:25.330 --> 00:01:27.760
Let's see an example that demonstrates the false arguments

21
00:01:30.980 --> 00:01:31.980
in this example.

22
00:01:32.020 --> 00:01:34.510
We have a function with no default arguments.

23
00:01:34.720 --> 00:01:36.140
And the next slide will modify.

24
00:01:36.130 --> 00:01:38.440
So it does have a default argument.

25
00:01:38.440 --> 00:01:44.530
The function is called calculate cost and it expects the base cost of an item and the tax rate the function

26
00:01:44.530 --> 00:01:50.530
calculates the tax amount and adds that to the base costs and returns that value to the caller in the

27
00:01:50.530 --> 00:01:56.890
main function we're calling the function with one hundred point zero as the base cost and 0.06 or 6

28
00:01:56.890 --> 00:02:02.800
percent as the tax rate in this case one hundred six point zero was returned from the function and assigned

29
00:02:02.800 --> 00:02:03.540
to cost.

30
00:02:03.670 --> 00:02:04.640
That's pretty easy.

31
00:02:04.780 --> 00:02:09.660
But if 98 percent of our customers will have a 6 percent tax rate I'm forced to supply this.

32
00:02:09.670 --> 00:02:11.400
Every time I call the function.

33
00:02:11.560 --> 00:02:16.740
Why not let the compiler default the tax rate to 6 percent unless I tell it otherwise.

34
00:02:16.900 --> 00:02:18.670
Let's do that in the next slide.

35
00:02:21.340 --> 00:02:26.740
Here we have the same function except that the function prototype has been modified to provide a default

36
00:02:26.740 --> 00:02:29.110
value for the tax rate.

37
00:02:29.110 --> 00:02:35.500
Notice that the parameter tax rate in the function prototype now has a default initialization to 0.06

38
00:02:35.560 --> 00:02:37.180
added to it.

39
00:02:37.180 --> 00:02:42.760
This effectively tells the compiler that if this argument is not provided by the function call then

40
00:02:42.760 --> 00:02:45.750
use the value 0.06 for tax rate.

41
00:02:45.760 --> 00:02:47.050
Simple as that.

42
00:02:47.050 --> 00:02:49.350
Now notice the two calls in the main function.

43
00:02:49.540 --> 00:02:55.240
The first call simply calls Kelt cost with two hundred point zero which is the base cost.

44
00:02:55.630 --> 00:03:01.520
Since the argument for tax rate is not provided the compiler will use 6 percent for the tax rate in

45
00:03:01.540 --> 00:03:07.210
the second call we are providing the tax rate in this case the compiler we use that and ignore the default

46
00:03:07.210 --> 00:03:08.600
value.

47
00:03:08.620 --> 00:03:10.030
This can be pretty handy.

48
00:03:10.030 --> 00:03:14.770
Suppose we have a function that prints documents and we have to supply the document name the printer

49
00:03:14.770 --> 00:03:18.380
to print to the paper size the resolution and so forth.

50
00:03:18.850 --> 00:03:24.430
Again most of the time we print to the default printer with default settings but sometimes we need higher

51
00:03:24.430 --> 00:03:26.070
resolution or a different printer.

52
00:03:26.080 --> 00:03:27.220
You get the idea.

53
00:03:27.550 --> 00:03:32.860
In this case we can provide multiple default parameters for everything except the document name which

54
00:03:32.860 --> 00:03:34.480
is always required.

55
00:03:34.480 --> 00:03:37.400
This makes writing the code much simpler.

56
00:03:37.420 --> 00:03:42.820
Let's add another default parameter to the cut costs function.

57
00:03:42.920 --> 00:03:48.050
In this example we'll calculate the cost of an item based on the base cost of the item the sales tax

58
00:03:48.110 --> 00:03:53.820
and the shipping charge as before most of the times the sales tax will be 6 percent.

59
00:03:54.020 --> 00:03:59.330
And in this example the standard typical shipping charge is three dollars and fifty cents.

60
00:03:59.360 --> 00:04:05.410
So most customers will have a 6 percent tax rate and $3 and 50 Cent shipping charge.

61
00:04:05.480 --> 00:04:08.930
We can easily add a second default argument to this function.

62
00:04:08.930 --> 00:04:13.550
Notice that in the function prototype we add on another parameter named shipping and we default this

63
00:04:13.550 --> 00:04:19.830
value through three dollars and fifty cents the function body now calculates the tax for the item and

64
00:04:19.880 --> 00:04:24.530
the shipping charge adds this to the original cost of the item and returns the result to the caller

65
00:04:25.120 --> 00:04:26.250
in the main function.

66
00:04:26.360 --> 00:04:31.790
We're calling it cost in three different ways in the first call we're providing all three arguments

67
00:04:31.790 --> 00:04:32.780
to the function.

68
00:04:32.930 --> 00:04:38.270
In this case no default values will be used and the tax rate will be 8 percent and shipping will be

69
00:04:38.270 --> 00:04:45.530
$4 and 25 cents in the second call we're providing the cost of the item and the tax rate of 8 percent.

70
00:04:45.530 --> 00:04:50.510
In this case the default value for shipping will be used but the tax rate will use the 8 percent we

71
00:04:50.510 --> 00:04:52.700
provided in the final example.

72
00:04:52.700 --> 00:04:54.540
We're only providing the cost of the item.

73
00:04:54.650 --> 00:04:59.690
So in this case both default values are used the tax rate will default to 6 percent and the shipping

74
00:04:59.690 --> 00:05:02.260
charge to three dollars and fifty cents.

75
00:05:02.720 --> 00:05:07.430
As you can see default argument values give us the ability to make our code less verbose and potentially

76
00:05:07.430 --> 00:05:12.770
prevent errors by using default values rather than having to supply all of the arguments to the function

77
00:05:12.800 --> 00:05:15.950
all the time in the next video.

78
00:05:15.980 --> 00:05:21.760
We'll learn about function overloading before we talk about function overloading in the next video.

79
00:05:21.770 --> 00:05:23.360
Let me go over default arguments.

80
00:05:23.540 --> 00:05:28.130
I mean the sectional eBid workspace and the default arguments project and this is the same example you

81
00:05:28.130 --> 00:05:29.230
saw in the slides.

82
00:05:29.390 --> 00:05:35.390
Here I've got a function called calculate cost that expects three doubles the base cost a tax rate which

83
00:05:35.390 --> 00:05:42.890
is a default argument at 0.06 or 6 percent and a default shipping which is three dollars and fifty cents.

84
00:05:42.890 --> 00:05:46.380
Now if those arguments are not supplied then the defaults kick in.

85
00:05:46.460 --> 00:05:47.960
It's really pretty simple.

86
00:05:47.960 --> 00:05:53.750
And here's the calculation notice I don't have to include the function default arguments here in the

87
00:05:53.750 --> 00:05:59.120
function definition only in the function prototype and that's usually where you see them.

88
00:05:59.120 --> 00:06:04.190
So the code here says base cost plus equals base cost times the tax rate so I'm figuring out what's

89
00:06:04.190 --> 00:06:06.950
my tax and I'm adding the shipping to that.

90
00:06:06.980 --> 00:06:10.320
And then I'm adding the whole thing to base cost so I'm not taxing the shipping.

91
00:06:10.640 --> 00:06:15.650
And then we've got some sample calls and this first example I'm calling calculate costs with all three

92
00:06:15.650 --> 00:06:16.290
arguments.

93
00:06:16.370 --> 00:06:19.370
So in this case none of the defaults will be used.

94
00:06:19.460 --> 00:06:25.130
I'll use a 100 for the base cost I'll use 8 percent for the tax rate and I'll use $4 and 25 cents for

95
00:06:25.130 --> 00:06:26.410
the shipping charge.

96
00:06:26.660 --> 00:06:33.620
I expect to get back 112 and 25 for this example here I'm providing the first two arguments and I'm

97
00:06:33.620 --> 00:06:35.170
not providing the shipping.

98
00:06:35.180 --> 00:06:41.210
So in this case it's going to use 100 as the base cost 8 percent for the tax rate and it will default

99
00:06:41.210 --> 00:06:43.860
to 350 here for the shipping.

100
00:06:43.880 --> 00:06:47.090
And the last example I'm supplying the base costs only.

101
00:06:47.090 --> 00:06:51.440
So in this case 6 percent and $3 and 50 cents or we're going to be asked.

102
00:06:51.770 --> 00:06:56.840
So if I run this program you'll see that our results are exactly as we expected.

103
00:06:56.960 --> 00:07:00.470
1:12 25:1 11 15 to 15 50.

104
00:07:00.590 --> 00:07:03.440
So you can see default arguments are pretty easy to use.

105
00:07:03.470 --> 00:07:11.140
I could also default the base costs if I wanted to I could say that the base cost is 100 maybe that's

106
00:07:11.140 --> 00:07:13.300
the typical item that most people order.

107
00:07:13.300 --> 00:07:21.040
So in this case I could just simply just say cost is a cost right.

108
00:07:21.040 --> 00:07:22.720
With nothing in the parentheses.

109
00:07:22.900 --> 00:07:26.070
So I'm not supplying any arguments here.

110
00:07:26.500 --> 00:07:27.340
That's it.

111
00:07:27.340 --> 00:07:32.020
So what's going to happen here it's it's going to use all three default arguments so let me put that

112
00:07:32.020 --> 00:07:33.340
out real quick.

113
00:07:35.740 --> 00:07:40.950
So in this case we expect the same result as well if we would have done one hundred six so we'd have

114
00:07:40.960 --> 00:07:44.640
100 is the base cost it's being used by default.

115
00:07:44.860 --> 00:07:52.230
We're using a 6 percent tax rate so that's another six dollars and our shipping would be 350.

116
00:07:52.420 --> 00:07:54.940
So in this case we expect to 100 950.

117
00:07:54.940 --> 00:07:56.210
So let's give that a shot.

118
00:07:57.080 --> 00:07:59.680
And that's what we're getting here 100 950.

119
00:07:59.990 --> 00:08:01.220
This is pretty straightforward.

120
00:08:01.220 --> 00:08:07.640
The only rule with the default arguments is that once you create a parameter that has a default value

121
00:08:08.030 --> 00:08:09.740
then you've got it default the rest of them.

122
00:08:09.740 --> 00:08:12.950
So in other words I can't say that base cost is 100.

123
00:08:13.100 --> 00:08:18.640
And then not have one here because that's going to give me an error.

124
00:08:18.650 --> 00:08:19.260
Right.

125
00:08:19.280 --> 00:08:21.740
Once you start they all have to be on the tail end.

126
00:08:21.740 --> 00:08:25.620
So in this case I could just say 0.06.

127
00:08:25.730 --> 00:08:30.430
So that's really the only rule there and I'll run that again just to make sure I've got no errors.

128
00:08:30.470 --> 00:08:31.870
And there you go.

129
00:08:32.390 --> 00:08:36.820
So let's add another default type Funk's to this application.

130
00:08:36.830 --> 00:08:38.400
How about a greeting function.

131
00:08:38.430 --> 00:08:43.850
So let's do something like this it's create a function prototype here for for a function called greeting

132
00:08:43.850 --> 00:08:46.520
that expects a string which has someone's name.

133
00:08:46.520 --> 00:08:50.600
Now let me include strange because I need the library.

134
00:08:53.790 --> 00:08:59.280
So that's a string name perfect that be frank Metropolis Joe Miller whatever you want then I've got

135
00:08:59.280 --> 00:09:03.290
another string which is the prefix that we want in front of their name.

136
00:09:03.290 --> 00:09:03.820
MR.

137
00:09:03.820 --> 00:09:07.890
Dr MSS whatever you like and I'm going to prefix it to Mr..

138
00:09:07.890 --> 00:09:15.860
Let's say that most of my customers are male and I also want a suffix.

139
00:09:15.870 --> 00:09:19.680
In this case the suffix I'm going to default at just the empty string.

140
00:09:19.900 --> 00:09:20.180
OK.

141
00:09:20.190 --> 00:09:22.340
So that's my function prototype.

142
00:09:22.650 --> 00:09:24.280
Let's implement this function now.

143
00:09:24.360 --> 00:09:26.060
Well implement it right down here.

144
00:09:28.470 --> 00:09:33.240
And at this point we don't need those default arguments we just get rid of them from here.

145
00:09:33.720 --> 00:09:36.750
And it cleans up the code a little bit.

146
00:09:36.780 --> 00:09:37.190
All right.

147
00:09:37.200 --> 00:09:38.280
So what do we want to do here.

148
00:09:38.280 --> 00:09:40.580
We just really want to display some stuff right.

149
00:09:40.590 --> 00:09:48.660
So let's just say I want an output statement and I'm going to say hello followed by a space followed

150
00:09:48.660 --> 00:09:50.370
by the prefix.

151
00:09:51.780 --> 00:10:01.040
And what we could do here is we could append a space that we can use concatenation here and the name

152
00:10:02.000 --> 00:10:06.690
and another space and the suffix.

153
00:10:07.920 --> 00:10:11.790
So we're just using concatenation here just like we've learned in string class

154
00:10:14.470 --> 00:10:20.060
and then we'll use the end line to finish it off.

155
00:10:20.070 --> 00:10:27.820
OK so let's run that to give it a few example it runs here so let's say how about let's do a really

156
00:10:27.820 --> 00:10:30.250
simple one How about greeting.

157
00:10:31.210 --> 00:10:40.000
And I'm going to split all of these arguments are going to say Glynne-Jones is the name the prefix will

158
00:10:40.000 --> 00:10:45.360
be doctor and the suffix will be empty.

159
00:10:48.950 --> 00:10:49.480
OK.

160
00:10:49.510 --> 00:10:52.090
So if we run that we expect this to display.

161
00:10:52.180 --> 00:10:56.330
Dr. Glenn Jones M.D. And so let's give it a shot.

162
00:10:57.900 --> 00:11:04.020
And forgot the semi-colon off except for a quick and there you go.

163
00:11:04.040 --> 00:11:06.410
Hello Dr. Glenn Jones M.D..

164
00:11:06.410 --> 00:11:06.990
Perfect.

165
00:11:06.990 --> 00:11:08.750
Now let's run some of the other examples.

166
00:11:08.780 --> 00:11:15.940
So how about we do something like greeting James Rogers.

167
00:11:16.440 --> 00:11:24.520
How about Professor and Ph.D. for the suffix

168
00:11:27.160 --> 00:11:33.930
OK and we'll run that and I will say Hello Professor James Rogers Ph.D. pretty easy.

169
00:11:33.930 --> 00:11:39.570
Now let's use some defaults in this case we'll say greeting let's say Frank Miller

170
00:11:42.300 --> 00:11:51.270
and Dr. no suffix in this case sort of default to the blank or the empty space or in this case it'll

171
00:11:51.300 --> 00:11:58.450
just say Dr Frank Miller which is what I want and then let's do one more and we'll just say greeting

172
00:12:00.890 --> 00:12:05.430
let's say William Smith.

173
00:12:05.430 --> 00:12:10.990
So in this case it's going to use all the default values.

174
00:12:11.040 --> 00:12:19.040
So it's going to use Mr. William Smith followed by the empty string right there for the suffix.

175
00:12:19.170 --> 00:12:22.290
So in this case we're just going to see Mr. William Smith.

176
00:12:22.290 --> 00:12:23.830
There you go.

177
00:12:24.150 --> 00:12:24.900
If we have

178
00:12:27.930 --> 00:12:32.130
Mary Howard and she would be Mrs.

179
00:12:36.920 --> 00:12:42.420
and give her a title as well whatever we like

180
00:12:45.410 --> 00:12:46.860
to go.

181
00:12:47.710 --> 00:12:52.060
So now we've got Mrs. Mary Howard Ph.D. instead of Doctor we could have a doctor here as well you can

182
00:12:52.060 --> 00:12:55.660
see all the different combinations this can come in pretty handy.

183
00:12:55.670 --> 00:12:59.530
I used to work with someone who used to say that if something is always required then it should never

184
00:12:59.530 --> 00:13:05.260
be required which makes a lot of sense and I think that's part of the idea behind using default arguments

185
00:13:05.260 --> 00:13:08.170
and using overloading which we'll talk about next.
