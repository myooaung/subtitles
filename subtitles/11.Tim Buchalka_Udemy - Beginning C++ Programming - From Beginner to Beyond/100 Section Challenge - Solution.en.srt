1
00:00:05,810 --> 00:00:06,430
Welcome back.

2
00:00:06,430 --> 00:00:12,620
I hope you enjoyed the Sipher challenge and I hope you were successful with it and I hope you extended

3
00:00:12,620 --> 00:00:15,260
it even further if you did post it on the forum.

4
00:00:15,260 --> 00:00:16,140
Share what you did.

5
00:00:16,140 --> 00:00:17,450
It's pretty fun stuff.

6
00:00:17,780 --> 00:00:19,460
OK so what do we need.

7
00:00:19,460 --> 00:00:22,610
First thing we need to do is ask the user to enter a secret message.

8
00:00:22,610 --> 00:00:23,060
Right.

9
00:00:23,210 --> 00:00:24,310
So let's do that first.

10
00:00:24,310 --> 00:00:29,720
It's not that out before we even start writing any other code so we need a String object and we can

11
00:00:29,720 --> 00:00:34,700
call that string object secret message and we'll initialize it.

12
00:00:34,850 --> 00:00:38,040
That's what the user is going to type in.

13
00:00:38,150 --> 00:00:42,480
So I'm going to say see out her secret message

14
00:00:45,270 --> 00:00:45,880
Campbell.

15
00:00:45,920 --> 00:00:50,890
Leave it just like that and let me fix that typo.

16
00:00:51,530 --> 00:00:56,340
And you know what I mean just put me as proper English here and to your secret message.

17
00:00:56,570 --> 00:00:59,730
Now the user's going to enter their message and we need to read it.

18
00:01:00,140 --> 00:01:01,990
It's potentially more than one word.

19
00:01:02,000 --> 00:01:04,950
So we can't just use C in an extraction operator.

20
00:01:05,020 --> 00:01:11,480
We're going to use getline and I want to get a line of text from C in and I want to store it in secret

21
00:01:11,480 --> 00:01:14,750
message OK.

22
00:01:14,780 --> 00:01:21,470
So now at this point secret message that string object will contain wherever the user typed in.

23
00:01:21,470 --> 00:01:22,620
Perfect.

24
00:01:22,640 --> 00:01:25,800
So we want to encrypt that string.

25
00:01:26,120 --> 00:01:28,610
Well I need to store the encrypted message somewhere right.

26
00:01:28,610 --> 00:01:35,300
So let's create another string object and we'll call it encrypted message and we'll initialize that

27
00:01:35,300 --> 00:01:36,180
as well.

28
00:01:36,620 --> 00:01:40,040
That's going to hold the encrypted message once we finish encrypting it.

29
00:01:40,040 --> 00:01:42,400
But at this point it's just simply empty.

30
00:01:42,410 --> 00:01:47,750
So we'll do a little output statement here just so we can see some processing and we'll say something

31
00:01:47,750 --> 00:01:50,120
like encrypting message

32
00:01:53,880 --> 00:01:55,890
and would put an end line at the end.

33
00:01:56,200 --> 00:01:59,880
All right so now we start to process what do we need to do.

34
00:02:00,090 --> 00:02:03,220
Well there's a lot of different ways to do this.

35
00:02:03,220 --> 00:02:05,430
Is this the easy way the harder way.

36
00:02:05,520 --> 00:02:07,600
Let's talk about the harder way first.

37
00:02:07,620 --> 00:02:09,880
Suppose that the message is Frank.

38
00:02:10,110 --> 00:02:12,000
That's the secret message.

39
00:02:12,870 --> 00:02:16,100
Well I need to iterate through that string.

40
00:02:16,110 --> 00:02:20,310
Obviously I need to look at the FDR the way the I've got to do that no matter what because I've got

41
00:02:20,310 --> 00:02:22,180
to look at every single character.

42
00:02:22,220 --> 00:02:24,900
Well what I could do is I could read the first character.

43
00:02:24,900 --> 00:02:32,490
That's the F then I can loop through this array here looking for that f and when I find it I need to

44
00:02:32,490 --> 00:02:33,900
know what position it's in.

45
00:02:33,900 --> 00:02:39,210
So I could have a counter that's counting up right so that when I started 0 and then I go the next one

46
00:02:39,210 --> 00:02:42,170
next one eventually it's going to find it and I've got a position.

47
00:02:42,360 --> 00:02:44,010
That's the hard way.

48
00:02:44,190 --> 00:02:45,520
That's not the way I want to do it.

49
00:02:45,540 --> 00:02:49,260
Remember the String class has a method in it called find.

50
00:02:49,710 --> 00:02:56,340
So if I want to find that character f it's going to return the position of f or it's going to return

51
00:02:57,120 --> 00:02:58,870
no position.

52
00:02:59,490 --> 00:03:01,260
That's really all I care about.

53
00:03:01,550 --> 00:03:01,950
OK.

54
00:03:02,010 --> 00:03:04,610
So that's the way I'm going to solve this problem.

55
00:03:04,650 --> 00:03:06,150
Less code is better.

56
00:03:06,150 --> 00:03:08,220
So let's solve this.

57
00:03:08,220 --> 00:03:10,900
So right here we're about to encrypt the message.

58
00:03:10,950 --> 00:03:14,570
Now we need to iterate through the secret message one character at a time.

59
00:03:14,580 --> 00:03:16,710
So I'm going to use a range based for loop here.

60
00:03:16,710 --> 00:03:17,870
It's perfect for this.

61
00:03:17,910 --> 00:03:25,590
So I'm going to say for every character C in my secret message.

62
00:03:25,740 --> 00:03:30,060
So now in the loop I have access to see which represents the current character I'm looking at.

63
00:03:30,060 --> 00:03:31,340
In my secret message.

64
00:03:31,350 --> 00:03:31,900
Right.

65
00:03:32,160 --> 00:03:36,480
So I'm going to call the find method in the alphabet string.

66
00:03:36,480 --> 00:03:44,460
And when asked the alphabet string to find C writes C is f it's going to find that lowercase f and return

67
00:03:44,460 --> 00:03:45,470
its position.

68
00:03:45,540 --> 00:03:50,190
Now that positions type is size t is that we've mentioned before.

69
00:03:50,430 --> 00:03:55,380
That's an unsigned integer that's where the dependent platform this would work everywhere we'll call

70
00:03:55,380 --> 00:03:56,780
it position.

71
00:03:57,840 --> 00:04:08,550
And I'm going to ask the alphabet string or the alphabet object to find that character in itself if

72
00:04:08,550 --> 00:04:10,020
it finds it we're good.

73
00:04:10,020 --> 00:04:15,390
We're going to substitute it with the equivalent character at the same position and he doesn't find

74
00:04:15,390 --> 00:04:18,180
it then we're just going to process that character as is.

75
00:04:18,180 --> 00:04:19,990
It's not one of these.

76
00:04:20,040 --> 00:04:21,440
So I'm not going to substitute it.

77
00:04:21,450 --> 00:04:23,260
I'm just going to use it.

78
00:04:23,340 --> 00:04:24,330
All right so what do we need.

79
00:04:24,330 --> 00:04:27,480
We didn't state and we're going to say if the position

80
00:04:30,570 --> 00:04:37,320
is not equal to no position what does that mean.

81
00:04:37,320 --> 00:04:39,820
That means we found it right.

82
00:04:40,380 --> 00:04:46,160
Let's do the else and I'll just use a block else in case we need to add some code later.

83
00:04:46,170 --> 00:04:50,130
Now if we didn't find it in here we were not going to substitute we're just going to use the character

84
00:04:50,130 --> 00:04:51,000
as is right.

85
00:04:51,170 --> 00:04:58,860
Someone to say encrypted message plus equals C just add the character as is to the encrypted message.

86
00:04:58,860 --> 00:05:02,160
We're not going to substitute it now.

87
00:05:02,190 --> 00:05:03,750
What if we do need to substitute it.

88
00:05:03,750 --> 00:05:05,270
Let's go back here again.

89
00:05:05,790 --> 00:05:07,400
We need a new character.

90
00:05:07,530 --> 00:05:09,490
Right we need the character in the key.

91
00:05:09,660 --> 00:05:20,490
So let's create a variable called new character and we can initialize this variable to the very the

92
00:05:20,490 --> 00:05:22,560
the character in the string at that position.

93
00:05:22,560 --> 00:05:23,250
The key string.

94
00:05:23,250 --> 00:05:23,680
Right.

95
00:05:23,850 --> 00:05:32,250
So we have position already so we can ask again we can ask the key stream to give us the variable at

96
00:05:32,400 --> 00:05:33,920
that position.

97
00:05:36,630 --> 00:05:39,450
And we can initialize it to that.

98
00:05:39,500 --> 00:05:42,130
So now we've got the new character that we want to substitute.

99
00:05:42,140 --> 00:05:43,250
And what do we do.

100
00:05:43,250 --> 00:05:49,760
We simply say encrypted message plus equals new character.

101
00:05:50,270 --> 00:05:50,960
That's it.

102
00:05:50,960 --> 00:05:53,560
That should be all the code we need.

103
00:05:53,570 --> 00:05:57,490
Now let's just output the encrypted message

104
00:06:00,830 --> 00:06:07,370
so the encrypted message would be encrypted message.

105
00:06:07,390 --> 00:06:09,230
Right so let's run this this is the first half.

106
00:06:09,230 --> 00:06:15,080
This is just the encryption side but you can see the code is really easy to understand very straightforward.

107
00:06:15,440 --> 00:06:20,520
So let's run it and let's say this is a test.

108
00:06:20,830 --> 00:06:23,300
And that's the encrypted message right there.

109
00:06:23,340 --> 00:06:29,210
And let's get this to a simple test case we know that we're going to replace the lower case a see it

110
00:06:29,210 --> 00:06:33,020
right here with me is my pen real quick.

111
00:06:33,020 --> 00:06:40,730
You can see that we're going to replace the lower case a with an uppercase X and it's obviously the

112
00:06:40,730 --> 00:06:42,500
capital Z with an R.

113
00:06:42,620 --> 00:06:50,650
So a good test case would be a z z z that we expect back x x x.

114
00:06:50,720 --> 00:06:52,250
R r r right.

115
00:06:52,250 --> 00:06:54,000
That's the encrypted so let's try that out.

116
00:06:54,180 --> 00:06:57,950
So with the three lowercase A's and three uppercase Z's

117
00:07:01,430 --> 00:07:10,000
a z z z and as I said what we expect back is X X X lowercase three R's.

118
00:07:10,010 --> 00:07:11,540
That's exactly what we want.

119
00:07:11,700 --> 00:07:13,910
OK so it looks like we're in the we're in the ballpark.

120
00:07:13,940 --> 00:07:19,250
Obviously you would have to test a lot better than this but that's a good example of a simple test case

121
00:07:19,250 --> 00:07:21,200
that tells you you're definitely on track.

122
00:07:21,230 --> 00:07:24,610
I'll erase this and let's try a couple more.

123
00:07:24,620 --> 00:07:27,530
Let's try.

124
00:07:28,010 --> 00:07:31,260
Meet me at Bill's house.

125
00:07:31,490 --> 00:07:34,370
Now in this case you see we have an apostrophe.

126
00:07:34,370 --> 00:07:36,280
We're not going to handle that apostrophe right.

127
00:07:36,290 --> 00:07:41,390
We're not substituting So we're just going to print it out as it is so I expect to see that apostrophe

128
00:07:41,480 --> 00:07:44,530
in the encrypted string in the same position.

129
00:07:44,690 --> 00:07:45,830
So you can see here.

130
00:07:45,860 --> 00:07:48,150
There it is right there.

131
00:07:48,300 --> 00:07:50,810
So that's correct.

132
00:07:50,810 --> 00:07:51,230
All right.

133
00:07:51,230 --> 00:07:52,650
So that's the encrypted message.

134
00:07:52,650 --> 00:07:55,820
Now let's decrypt the message.

135
00:07:55,880 --> 00:07:58,250
Same idea right we're just going the other way.

136
00:07:58,370 --> 00:08:03,270
We need a string object for the decrypted message.

137
00:08:06,110 --> 00:08:09,230
And it will initialize that to an empty string as well.

138
00:08:09,370 --> 00:08:14,650
We'll say see outness to another new line here and we'll say decrypting

139
00:08:17,110 --> 00:08:23,010
message.

140
00:08:23,790 --> 00:08:26,160
All right so now let's do the code again.

141
00:08:26,190 --> 00:08:31,810
What are we doing this time well this time we're looping through the encrypted message right.

142
00:08:31,920 --> 00:08:37,180
Grabbing those characters finding them in the key and substituting them back in the alphabet.

143
00:08:37,440 --> 00:08:37,670
All right.

144
00:08:37,680 --> 00:08:41,410
So let's do it it's the same exact idea except we're going backwards here.

145
00:08:41,430 --> 00:08:48,480
So for every character says call it C in the encrypted message this time

146
00:08:52,480 --> 00:08:56,260
for every character in there we're doing exactly the same thing the position

147
00:08:58,840 --> 00:09:08,350
is we're going to ask the key this time to find that character and then if the position is not equal

148
00:09:08,350 --> 00:09:10,840
to no position

149
00:09:13,720 --> 00:09:22,900
then we found it in the else part means just handle it as is so let's handle that part really easy.

150
00:09:22,900 --> 00:09:26,600
So this time we're going to say this to the decrypted message right.

151
00:09:26,740 --> 00:09:29,390
So decrypted message plus equals C.

152
00:09:30,550 --> 00:09:32,140
In this case we did find it.

153
00:09:32,140 --> 00:09:35,450
So we want to get a new character again just you said before.

154
00:09:35,520 --> 00:09:45,020
There's my new character and I want to initialize it to this time not the key but the alphabets at position.

155
00:09:45,570 --> 00:09:51,680
So give me the character at the same position but in the alphabet string and I'll initialize it to that.

156
00:09:51,760 --> 00:10:01,500
Then here we'll just say decrypted message plus the calls new char.

157
00:10:02,020 --> 00:10:02,480
Awesome.

158
00:10:02,590 --> 00:10:03,170
That's it.

159
00:10:03,170 --> 00:10:05,760
Our screen should be decrypted at this point.

160
00:10:06,220 --> 00:10:08,560
And what would you Heeres will just say seek out

161
00:10:11,440 --> 00:10:12,930
put another new line here in front

162
00:10:16,180 --> 00:10:20,200
decrypted message and I'll fix that typo in a second.

163
00:10:20,200 --> 00:10:29,340
In this case it would be decrypted message followed by a new line.

164
00:10:30,420 --> 00:10:32,500
OK let's try this out.

165
00:10:33,080 --> 00:10:35,060
Hopefully we get back what we started with right.

166
00:10:35,120 --> 00:10:36,680
So enter your secret message.

167
00:10:36,680 --> 00:10:39,430
This is a test.

168
00:10:39,710 --> 00:10:41,450
I'm decrypt I'm encrypting first.

169
00:10:41,450 --> 00:10:43,790
That's the encrypted message right here.

170
00:10:44,060 --> 00:10:45,770
I'm decrypting and I'm getting back.

171
00:10:45,770 --> 00:10:46,850
This is a test.

172
00:10:46,850 --> 00:10:48,640
Perfect.

173
00:10:48,640 --> 00:10:51,860
Let's try a couple more.

174
00:10:51,860 --> 00:11:01,560
Meet me at Bill's house at MIT say 12:30 P. M..

175
00:11:01,800 --> 00:11:05,380
OK this is a good test case because maybe Nil's house not Bill's house.

176
00:11:05,540 --> 00:11:06,980
Meet me at Nil's house.

177
00:11:06,980 --> 00:11:08,540
You see we have an apostrophe.

178
00:11:08,780 --> 00:11:13,880
We have the one the two the colon and the three in the zero were not handling those since they're not

179
00:11:13,880 --> 00:11:14,720
letters.

180
00:11:14,930 --> 00:11:18,990
So we should see those characters as is in the encrypted string.

181
00:11:19,010 --> 00:11:20,600
So let's try that.

182
00:11:20,600 --> 00:11:20,960
There you go.

183
00:11:20,990 --> 00:11:25,310
There's the apostrophe there's the 12 the colon the third is just as we expected.

184
00:11:25,310 --> 00:11:27,900
And then when we decrypt the message we get back.

185
00:11:27,920 --> 00:11:30,400
Meet me at Neil's house at 12:30 p.m..

186
00:11:30,620 --> 00:11:35,090
OK now suppose we wanted to make this a little better not a lot better but a little better.

187
00:11:35,090 --> 00:11:37,620
Let's deal with those spaces right now.

188
00:11:37,620 --> 00:11:39,780
I want I want to fill up those spaces with something.

189
00:11:39,800 --> 00:11:45,960
So what we could do is we could come up here to my alphabet and I can insert a space right at the beginning.

190
00:11:46,010 --> 00:11:48,080
That's a space character.

191
00:11:48,080 --> 00:11:52,730
Now what am I going to replace the space character with anything I want that's already in here.

192
00:11:52,730 --> 00:11:57,060
Let's say one of those characters left bracket.

193
00:11:57,500 --> 00:11:58,170
That's fine.

194
00:11:58,190 --> 00:12:00,300
But now we've got to deal with the left bracket right.

195
00:12:00,410 --> 00:12:05,900
So let's put the left bracket up here and we're going to replace that with a space because we've got

196
00:12:05,900 --> 00:12:06,740
to go both ways.

197
00:12:06,730 --> 00:12:08,250
We're not going to work.

198
00:12:08,520 --> 00:12:13,130
And so now we're going to handle spaces at least we'll fill up all that void space so let's try to run

199
00:12:13,130 --> 00:12:20,780
it and we'll do something like this is a test and you can see now that sticking those square brackets

200
00:12:20,780 --> 00:12:24,430
in there so it makes it look a little more jumbled up at least.

201
00:12:24,470 --> 00:12:28,360
Obviously this is so easy to break and then the decrypted message is still correct.

202
00:12:28,360 --> 00:12:29,950
This is a test.

203
00:12:30,020 --> 00:12:31,440
There's a lot of things you can do here.

204
00:12:31,440 --> 00:12:36,530
There's you know there's some real famous ciphers that are substitution ciphers like the key word cipher

205
00:12:36,530 --> 00:12:39,490
in the Caesar cipher that you can play around with.

206
00:12:39,650 --> 00:12:44,630
You can use random numbers we'll talk about generating random numbers so that maybe be the first time

207
00:12:44,630 --> 00:12:48,650
you see a space you replace it with something the second time you replace it with something else that

208
00:12:48,650 --> 00:12:51,520
would just make a little bit more more interesting and hard to break.

209
00:12:51,530 --> 00:12:53,090
But there you go.

210
00:12:53,090 --> 00:12:57,650
This is an example of using C++ is string class.

211
00:12:57,890 --> 00:13:03,170
Very easy I mean there's no counting there's no checking to make sure that things fit.

212
00:13:03,370 --> 00:13:05,670
It's handily everything for me.

213
00:13:05,690 --> 00:13:08,040
All right so hopefully your solution is similar.

214
00:13:08,390 --> 00:13:11,990
If it's not you can learn from this one and if you've got a great solution you can share it with the

215
00:13:11,990 --> 00:13:13,940
rest of the class.

216
00:13:13,940 --> 00:13:15,210
I'll see you in the next video.
