1
00:00:05,380 --> 00:00:08,720
OK so welcome back to the SPL challenge one solution.

2
00:00:08,950 --> 00:00:14,380
I'm in Section 20 and I'm going to challenge one solution project and this is the project where we had

3
00:00:14,380 --> 00:00:16,540
to write the palindrome function.

4
00:00:16,600 --> 00:00:21,760
So hopefully you were able to solve this problem it's actually quite simple when you think about it

5
00:00:21,790 --> 00:00:22,250
but.

6
00:00:22,390 --> 00:00:24,350
So let's talk about it.

7
00:00:24,370 --> 00:00:27,000
The idea is we're going to use a deck.

8
00:00:27,010 --> 00:00:32,840
So the idea is let's say that we have a string like A B A A.

9
00:00:33,040 --> 00:00:34,640
That's obviously a palindrome.

10
00:00:34,670 --> 00:00:34,960
Right.

11
00:00:34,960 --> 00:00:37,270
Reads the same from the front or from the back.

12
00:00:37,270 --> 00:00:39,810
So what we then that's coming in here is my string.

13
00:00:39,820 --> 00:00:44,950
So what I'm want to do is I want to create this deck of characters right here and I just want to push

14
00:00:44,950 --> 00:00:48,240
these characters in to the deck.

15
00:00:48,250 --> 00:00:52,800
Someone to grab that and I'm on a pushbacks are going to basically created a deck that looks like this

16
00:00:54,170 --> 00:00:56,310
push the characters onto the deck.

17
00:00:56,310 --> 00:01:00,360
And then what I'm going to do is I want to check the front of the deck and I'm going to check the back

18
00:01:00,360 --> 00:01:01,630
of the deck grab whatever's there.

19
00:01:01,630 --> 00:01:05,310
Compare them if they are the same then I process them.

20
00:01:05,310 --> 00:01:08,180
Remove them and move on to the next ones.

21
00:01:09,970 --> 00:01:10,270
Right.

22
00:01:10,270 --> 00:01:11,140
Compare them.

23
00:01:11,160 --> 00:01:17,230
They're the same and when I remove them at that point if I end up with an empty deck or a deck with

24
00:01:17,230 --> 00:01:20,220
just one item in it then I know it's a palindrome.

25
00:01:20,260 --> 00:01:27,180
It's as simple as that for something like let's say for someone that grabbed that string put it into

26
00:01:27,220 --> 00:01:28,170
the deck.

27
00:01:28,170 --> 00:01:30,420
I'm going to grab the first character here in the front.

28
00:01:30,410 --> 00:01:33,110
I'm going to grab the last character here in the back.

29
00:01:33,160 --> 00:01:34,470
There are not equal.

30
00:01:34,570 --> 00:01:38,490
So there's no way this can be a palindrome so I'm outright there.

31
00:01:38,500 --> 00:01:40,770
OK so let's walk through the code the actual code.

32
00:01:40,770 --> 00:01:43,300
So now you know the algorithm is pretty straightforward.

33
00:01:43,300 --> 00:01:44,810
So let's look at the code right here.

34
00:01:46,180 --> 00:01:48,390
Here's the palindrome function.

35
00:01:48,850 --> 00:01:53,030
And I've got a deck and I'm initializing it to an empty deck I'm just calling it d.

36
00:01:53,470 --> 00:01:59,220
Then for each character in this string s if the character is an alpha.

37
00:01:59,230 --> 00:01:59,530
Right.

38
00:01:59,530 --> 00:02:03,330
So in other words it's not whitespace it's not a digit it's not special characters.

39
00:02:03,400 --> 00:02:08,880
So if it's if it is alpha then what I'm going to do is I'm going to convert it to uppercase and push

40
00:02:08,880 --> 00:02:11,730
it onto the deck and the back.

41
00:02:11,770 --> 00:02:12,400
That's it.

42
00:02:12,400 --> 00:02:18,570
So once this loop is done whatever was in the string is now in the deck minus the special characters

43
00:02:18,570 --> 00:02:21,310
in the white space and everything else that's it.

44
00:02:21,310 --> 00:02:24,170
Now I've got two variables here C1 and C2.

45
00:02:24,250 --> 00:02:28,390
Those are the variables that I'm using to store what I'm reading from the front and from the back of

46
00:02:28,390 --> 00:02:29,210
the deck.

47
00:02:29,710 --> 00:02:32,200
And now I'm going to do something right here this is my loop.

48
00:02:32,210 --> 00:02:33,440
It's really simple.

49
00:02:33,460 --> 00:02:37,150
While the size of the deck is greater than one then I want to keep processing.

50
00:02:37,210 --> 00:02:39,720
Once I hit 0 or 1 I'm done right.

51
00:02:39,730 --> 00:02:41,500
It's got to be a palindrome.

52
00:02:41,560 --> 00:02:45,530
So I'm asking the deck Hey give me your front element.

53
00:02:45,640 --> 00:02:51,010
Give me your back element and I'm storing those and see one and see two I'm getting rid of those two

54
00:02:51,010 --> 00:02:53,550
elements from the deck I don't need them there.

55
00:02:54,130 --> 00:02:55,210
And then I'm comparing them.

56
00:02:55,330 --> 00:02:59,830
So if someone is not equal to see two then the characters can't be the same there's no way this can

57
00:02:59,830 --> 00:03:02,770
be a palindrome I'm returning false immediately.

58
00:03:02,770 --> 00:03:06,580
If I get through the loop I'm returning true it's got to be a palindrome.

59
00:03:06,580 --> 00:03:07,180
So that's it.

60
00:03:07,180 --> 00:03:08,590
That's the solution.

61
00:03:08,680 --> 00:03:13,900
And as I said this is a very common problem given in a coding interview and what the interviewer wants

62
00:03:13,900 --> 00:03:20,590
is for the applicant to try to solve it a different way and then say oh by the way can you solve it

63
00:03:20,590 --> 00:03:22,000
using a deck.

64
00:03:22,120 --> 00:03:23,110
And that's that's it.

65
00:03:23,110 --> 00:03:29,350
So you can see it's a real simple solution no iterators nothing fancy no algorithms are just using the

66
00:03:29,350 --> 00:03:33,220
front and the back of the deck just like we're supposed to.

67
00:03:33,220 --> 00:03:35,000
All right so I hope you enjoyed this challenge.
