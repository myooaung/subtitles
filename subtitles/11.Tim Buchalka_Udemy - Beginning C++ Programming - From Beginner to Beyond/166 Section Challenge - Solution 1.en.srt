1
00:00:05,500 --> 00:00:06,310
Hello everyone.

2
00:00:06,310 --> 00:00:07,120
Welcome back.

3
00:00:07,120 --> 00:00:09,510
I hope you had fun with this challenge.

4
00:00:09,520 --> 00:00:11,470
It can be a very tough challenge sometimes.

5
00:00:11,550 --> 00:00:17,170
You've really got to understand what's going on with returning references returning values conc correctness

6
00:00:17,170 --> 00:00:18,120
and so forth.

7
00:00:18,130 --> 00:00:20,080
So let's go through the solution.

8
00:00:20,080 --> 00:00:26,080
I'm in the section 14 workspace in the challenge Dasch solution one project and here's one possible

9
00:00:26,080 --> 00:00:27,340
solution to this challenge.

10
00:00:27,350 --> 00:00:31,030
There's obviously a lot of different ways to achieve the same result.

11
00:00:31,030 --> 00:00:37,300
First thing is I mean the my strength h file and you can see here the prototype is for the operator

12
00:00:37,300 --> 00:00:42,250
member methods you remember now this is the version we're implementing all of these operators as member

13
00:00:42,250 --> 00:00:42,900
methods.

14
00:00:42,910 --> 00:00:47,530
So right away we've got a little bit of an advantage in the sense that since we're member methods we

15
00:00:47,530 --> 00:00:49,870
have access to all the private information.

16
00:00:49,930 --> 00:00:55,270
So here we go we've got our unity minus that makes a string lowercase we've got our concatenation operator

17
00:00:55,630 --> 00:00:59,270
and remember because we've got member methods here.

18
00:00:59,530 --> 00:01:01,240
This will expect nothing right.

19
00:01:01,240 --> 00:01:08,160
There's nothing in the parameter list for a urinary operator because this object is the operand in the

20
00:01:08,160 --> 00:01:09,810
case of a binary operator.

21
00:01:09,810 --> 00:01:15,870
There's only one item to the right in the parameter list not two with nonmember functions it's different.

22
00:01:15,870 --> 00:01:17,170
We'll have to.

23
00:01:17,190 --> 00:01:19,020
Here is my equality operator.

24
00:01:19,050 --> 00:01:20,330
My not equal operator.

25
00:01:20,330 --> 00:01:24,900
You can see they return booleans less than greater than if you chose to do less than or equal to greater

26
00:01:24,900 --> 00:01:26,760
than or equal to that's great.

27
00:01:26,790 --> 00:01:32,590
And then I've got my plus equal operator that expects a right hand side string obviously.

28
00:01:32,760 --> 00:01:37,250
And then the left hand side we're assigning back to that's my concatenate and assign.

29
00:01:37,420 --> 00:01:42,630
There's my star or repeat operator in this case where I want to repeat a string and number of times

30
00:01:42,970 --> 00:01:48,900
there is the star equal operator and then we've got our pre-increment and post-increment operators that

31
00:01:48,900 --> 00:01:51,730
will simply make a string uppercase.

32
00:01:51,750 --> 00:01:57,920
Notice the pre-increment returns a reference the post increment returns my string by value.

33
00:01:58,080 --> 00:02:01,720
OK so there you go and let's go and see the implementations for these.

34
00:02:01,730 --> 00:02:05,450
And they should be really straightforward it's pretty much what we've been used to doing.

35
00:02:05,460 --> 00:02:11,310
So let me start right here at the very beginning right here on line 3:51 we're looking at equality.

36
00:02:11,310 --> 00:02:14,480
So let's take advantage of that string compare function right.

37
00:02:14,490 --> 00:02:18,420
So we're going to compare this string with the right hand side object string.

38
00:02:18,600 --> 00:02:24,780
And if they're equal to zero then they're the same they're not equals is exactly the same except I'm

39
00:02:24,780 --> 00:02:28,450
just putting a bang in here I'm just saying I'm negating that result.

40
00:02:28,470 --> 00:02:33,140
We could certainly call this guy but it's simple enough just to negate what we get back here.

41
00:02:33,370 --> 00:02:39,090
The less than is the same idea I'm using stood staring come up again and I'm checking to see if the

42
00:02:39,090 --> 00:02:41,760
value returned was less than zero and I'm returning that result.

43
00:02:42,840 --> 00:02:48,610
Greater than exactly the same way as you can see how trivial these methods are to implement because

44
00:02:48,730 --> 00:02:52,150
the stud string function is really doing all the work for us.

45
00:02:52,380 --> 00:02:57,660
Now to make lower case we saw this in the slides and we saw this in some of the code examples that we

46
00:02:57,660 --> 00:02:58,580
did as well.

47
00:02:58,920 --> 00:03:04,420
What we need to do here is allocate the character buffer right here an array of characters on the heap.

48
00:03:04,620 --> 00:03:09,270
That's the length of the string that we're in question plus one then we need to copy the string over

49
00:03:09,270 --> 00:03:09,980
to Buff.

50
00:03:10,110 --> 00:03:15,600
And then just loop through that buffer area and basically make all those characters lowercase.

51
00:03:15,590 --> 00:03:15,830
Right.

52
00:03:15,870 --> 00:03:20,340
And we're using this to add to lower function right here to simply make the lower case version of that

53
00:03:20,340 --> 00:03:21,190
character.

54
00:03:21,510 --> 00:03:24,480
I'm creating the temporary object which I'm returning.

55
00:03:24,480 --> 00:03:27,680
And don't forget to delete the buffer as we mentioned in the slides.

56
00:03:27,690 --> 00:03:30,790
Otherwise we'll leave that memory and that's not something we want to do.

57
00:03:31,110 --> 00:03:33,920
The concatenate method is very very similar.

58
00:03:33,930 --> 00:03:36,210
We're creating an area in the heap.

59
00:03:36,210 --> 00:03:39,300
This time it has to be big enough for both strings plus one.

60
00:03:39,330 --> 00:03:44,460
So we're taking the length of as TR And then the like the length of right hand side as you are and adding

61
00:03:44,460 --> 00:03:45,810
one to them.

62
00:03:45,930 --> 00:03:50,040
I'm copying this straight to the buffer and then I'm concatenating the other string the right hand side

63
00:03:50,040 --> 00:03:55,990
string to that creating a temporary object and returning it and deleting my area again.

64
00:03:56,070 --> 00:03:58,880
Very very common pattern that you can see.

65
00:03:58,890 --> 00:04:05,510
Now let's talk about plus equal since we've already overloaded the concatenation operator.

66
00:04:05,580 --> 00:04:07,150
Let's take advantage of that.

67
00:04:07,200 --> 00:04:11,580
So you can see this basically becomes really one line of code the return doesn't even count because

68
00:04:11,580 --> 00:04:12,570
we've got a return.

69
00:04:12,570 --> 00:04:18,420
So what we're saying here is that the current object is equal to the current object plus the right hand

70
00:04:18,420 --> 00:04:19,480
side object right.

71
00:04:19,590 --> 00:04:24,660
So this right here we'll call this operator that we've already overloaded and take care of everything

72
00:04:24,660 --> 00:04:25,860
for us.

73
00:04:25,890 --> 00:04:31,740
So this becomes a very trivial method once we've overloaded the concatenation operator.

74
00:04:31,740 --> 00:04:33,500
Here is the repeat.

75
00:04:33,900 --> 00:04:38,820
And what I can do here is I can take advantage because remember multiplication or repeating it's just

76
00:04:38,820 --> 00:04:40,050
a bunch of additions.

77
00:04:40,110 --> 00:04:44,970
So what we can do here is we can take advantage of that so we can create a temp object that just an

78
00:04:44,970 --> 00:04:51,970
empty temp objects and then just loop end times and add this to the temp object right.

79
00:04:52,230 --> 00:04:53,820
Which is exactly what we expect.

80
00:04:53,840 --> 00:04:58,340
We're incrementing this so many times and then we just return the temp object.

81
00:04:58,340 --> 00:05:05,640
In this case we could do it all in code to do it like that if you like one is going to be a little bit

82
00:05:05,640 --> 00:05:06,940
more efficient than the other.

83
00:05:07,080 --> 00:05:12,960
But this works really well and this is very very readable and modifiable code which is my preference

84
00:05:12,960 --> 00:05:14,560
right here.

85
00:05:14,880 --> 00:05:16,410
Here's the repeat in a sign.

86
00:05:16,410 --> 00:05:18,360
Same idea as the sequel.

87
00:05:18,360 --> 00:05:21,980
This is the star equal so this equals this time zone.

88
00:05:21,990 --> 00:05:27,660
We're going to call the overloaded star operator repeat operator in this case to do it all for us.

89
00:05:27,660 --> 00:05:30,300
So this method becomes trivial again.

90
00:05:30,810 --> 00:05:35,830
And now let's take a look at the last couple of methods here the pre-increment and the post-increment.

91
00:05:35,940 --> 00:05:39,850
They both make the string upper case the differences in the semantics.

92
00:05:39,870 --> 00:05:41,420
So let's take a look at this one right here.

93
00:05:41,420 --> 00:05:45,010
Pre-increment this one is dead simple.

94
00:05:45,030 --> 00:05:46,120
We've got an object.

95
00:05:46,140 --> 00:05:51,760
It's got an AS TR pointer that points to a character around the heap to do is loop through that character

96
00:05:51,760 --> 00:05:53,940
array and make everything there to.

97
00:05:54,270 --> 00:05:54,750
That's it.

98
00:05:54,750 --> 00:05:56,600
And then we return the current object.

99
00:05:56,640 --> 00:05:59,640
There's no need to copy anything move anything over.

100
00:05:59,640 --> 00:06:01,350
It's the same string we're pointing to.

101
00:06:01,350 --> 00:06:06,900
We're just simply making it upper case and in the case of the post-increment remember the post-increment

102
00:06:06,900 --> 00:06:11,970
is using that right there which is just a placeholder it's a name we don't even use it in here.

103
00:06:11,970 --> 00:06:14,600
It's only used by the compiler behind the scenes.

104
00:06:14,610 --> 00:06:17,420
This returns an object by value.

105
00:06:17,580 --> 00:06:21,750
So what we're doing is we're making a temporary copy of the current object.

106
00:06:21,750 --> 00:06:23,690
That's what this is doing right here.

107
00:06:24,020 --> 00:06:27,150
And then we're calling the pre-increment function.

108
00:06:27,180 --> 00:06:29,270
This guy right here.

109
00:06:29,880 --> 00:06:35,760
That's going to increment that string make it upper case in this case and then we return the temporary

110
00:06:35,790 --> 00:06:37,170
object that we save.

111
00:06:37,170 --> 00:06:38,390
That was the old value.

112
00:06:38,400 --> 00:06:42,990
So these are the semantics for post-increment is going to be a little bit different than the pre because

113
00:06:42,990 --> 00:06:45,460
I've got to return the old value right.

114
00:06:45,480 --> 00:06:51,340
That makes sense because what we're assigning is the value then we're incrementing the string.

115
00:06:51,360 --> 00:06:52,360
So there you go.

116
00:06:52,500 --> 00:06:56,180
That's a real simple implementation for all of these operators.

117
00:06:56,190 --> 00:06:57,540
It may have taken you a while.

118
00:06:57,540 --> 00:06:58,210
That's OK.

119
00:06:58,240 --> 00:07:00,520
But that's part of the learning process.

120
00:07:00,540 --> 00:07:05,160
I remember when I first did operator overloading it's hard to wrap your head around whether you're returning

121
00:07:05,160 --> 00:07:10,180
references or values and you know what exactly is going on here.

122
00:07:10,230 --> 00:07:13,960
The last thing we'll do is let's take a look at maining you'll see some test cases here.

123
00:07:14,190 --> 00:07:21,020
And what I'd like to do I'll just run this real quick and right there there's our output and then it

124
00:07:21,020 --> 00:07:26,940
says enter a string to repeat so let me just enter a string that looks like Dash 0 0 dashed up at three

125
00:07:26,950 --> 00:07:28,970
zeroes is something that we can really see.

126
00:07:29,570 --> 00:07:33,010
And this is testing the extraction operator as well.

127
00:07:33,110 --> 00:07:37,260
And how many times would you like to repeat it the same want to repeat it five times.

128
00:07:37,610 --> 00:07:40,120
And then we go and get back to this output in just a second.

129
00:07:40,130 --> 00:07:42,860
But let's go back to our main here and walk through this.

130
00:07:43,070 --> 00:07:49,430
You can see right here that I've got my string A which is Frank my string B which is frank and I'm saying

131
00:07:49,520 --> 00:07:50,840
is equal to B.

132
00:07:51,050 --> 00:07:54,900
And this will print out true or false because I've said this modifier right here on the string.

133
00:07:55,160 --> 00:07:57,080
So a obviously is equal to be.

134
00:07:57,080 --> 00:08:02,800
So we expect to true that's what we have right here is a not equal to be well that's false.

135
00:08:02,840 --> 00:08:08,510
So we get the false and then we set B to George and we use some of the other comparison operators in

136
00:08:08,510 --> 00:08:09,830
addition to the ones we just did.

137
00:08:09,830 --> 00:08:12,740
So in this case Frank is definitely not equal to George right.

138
00:08:12,860 --> 00:08:18,680
So we expect this to be false which it is right here is Frank not equal to George.

139
00:08:18,680 --> 00:08:20,250
That's true.

140
00:08:20,450 --> 00:08:22,160
Is Frank less than George.

141
00:08:22,190 --> 00:08:23,110
That's true.

142
00:08:23,300 --> 00:08:25,340
And finally is Frank greater than George.

143
00:08:25,340 --> 00:08:25,940
That's false.

144
00:08:25,940 --> 00:08:29,370
So you can see that out put right over here.

145
00:08:29,600 --> 00:08:31,880
Now we'll get to some other ones in this case.

146
00:08:31,880 --> 00:08:38,120
I've got one is Frank all uppercase and I'm using the minus right here to make it all lowercase and

147
00:08:38,120 --> 00:08:45,890
then I'm outputting x y and z you can see we expect lowercase Frank and that's what we have right here.

148
00:08:46,180 --> 00:08:52,430
The next is using the concatenation operator so we remember S1 is lowercase Frank and we're just saying.

149
00:08:52,460 --> 00:08:56,650
Tack on five Astor's to that concatenate five Astras to the end of that.

150
00:08:56,660 --> 00:08:59,640
So we expect this to be frank followed by five asterisks.

151
00:08:59,660 --> 00:09:05,110
And you see the upper right there and then we're doing it again except this time we're using plus sequel's

152
00:09:05,430 --> 00:09:09,180
some saying s one plus equals I think five dashes again.

153
00:09:09,240 --> 00:09:10,960
In this case dashes not stars.

154
00:09:11,160 --> 00:09:17,940
So what we expect is as one which is right here Frank five Astras and we want to append those dashes

155
00:09:17,940 --> 00:09:18,400
to it.

156
00:09:18,510 --> 00:09:22,370
So the output is something like this is what you see right here.

157
00:09:23,280 --> 00:09:23,780
OK.

158
00:09:23,910 --> 00:09:27,090
Now we're going to use the repeat OPERATOR Right here.

159
00:09:27,120 --> 00:09:33,300
We're simply saying as two as one two three four five and give me three copies of that and assigned

160
00:09:33,300 --> 00:09:34,310
it to s.

161
00:09:34,320 --> 00:09:41,820
So what we expect is 1 2 3 4 5 1 2 3 4 5 and 1 2 3 4 5 just what we see right here.

162
00:09:41,820 --> 00:09:43,600
Let me scroll this up just a little bit.

163
00:09:43,620 --> 00:09:45,470
We put all this on the same screen.

164
00:09:45,600 --> 00:09:47,820
So we're right about OK so that's better.

165
00:09:47,820 --> 00:09:56,730
So now I've got S-3 is ABC DPF and all I'm saying is give me five copies in this case of S-3 and just

166
00:09:56,730 --> 00:09:58,160
put it right back in history.

167
00:09:58,200 --> 00:10:02,490
So we expect five copies of a b c d f and that's what we're getting here.

168
00:10:02,820 --> 00:10:05,570
You can see the five copies of that string.

169
00:10:05,610 --> 00:10:09,260
Now we're using the insertion and extraction operators we're testing those.

170
00:10:09,270 --> 00:10:13,770
So we've got a couple of variables here repeat string and repeat times and we're just simply asking

171
00:10:13,770 --> 00:10:19,500
the user entering string to repeat and we're using the extraction operator to read that writing to repeat

172
00:10:19,500 --> 00:10:23,000
strain that's our own overloaded extraction operator.

173
00:10:23,040 --> 00:10:28,670
So I typed in dash three zeroes and a dash and then how many times would you like me to repeat this.

174
00:10:28,740 --> 00:10:34,770
I entered five times and I simply wrote repeat string star equals repeat time.

175
00:10:34,770 --> 00:10:41,250
So give me five copies of that and then I'm displaying it right here one two three four five copies

176
00:10:41,250 --> 00:10:42,240
of that.

177
00:10:42,810 --> 00:10:45,840
Then the next line just gives me 12 copies of what I just did.

178
00:10:45,840 --> 00:10:51,060
So it's going to give me five times 12 is going to give me 60 of these guys printed out here which is

179
00:10:51,060 --> 00:10:52,920
just a really simple test.

180
00:10:53,490 --> 00:10:59,880
And then finally the last test for the concatenation operator right here I've got repeat string is just

181
00:10:59,880 --> 00:11:05,100
repeat me and then I'm simply outputting repeat string plus repeat string plus repeat string.

182
00:11:05,130 --> 00:11:10,170
So I expect the three copies of that to display and there they are repeat me repeat me and repeat me

183
00:11:10,170 --> 00:11:11,680
again.

184
00:11:11,850 --> 00:11:16,980
There were were chaining the concatenation operators and noticed that here were creating actually a

185
00:11:16,980 --> 00:11:18,530
temporary unnamed.

186
00:11:18,600 --> 00:11:24,790
So you can uncommented move assignments and move constructors and you can see how that's happening efficiently.

187
00:11:25,140 --> 00:11:29,290
Here we're saying repeat string plus equals repeat string plus times three.

188
00:11:29,310 --> 00:11:32,210
So we're basically adding this time right.

189
00:11:32,340 --> 00:11:38,130
So we're taking this repeat string which is repeat me give me three copies of it and then adding it

190
00:11:38,130 --> 00:11:40,960
right back to repeat me which had one copy in there already.

191
00:11:40,980 --> 00:11:42,840
So we expect to end up with four copies.

192
00:11:42,840 --> 00:11:45,730
We have one two three and four read here.

193
00:11:46,170 --> 00:11:50,990
And then the last several test cases are the posts and Prete increments.

194
00:11:51,000 --> 00:11:52,860
So we'll do the pre-increment first.

195
00:11:52,950 --> 00:11:58,110
In this case I've got Frank scroll that down just a little bit right there.

196
00:11:58,110 --> 00:12:00,000
So in this case I've got a pre-increment.

197
00:12:00,000 --> 00:12:04,710
My string is Frank with the uppercase F and I'm saying pre-increment.

198
00:12:04,710 --> 00:12:07,570
So I expect Frank to be uppercase when I output it.

199
00:12:07,590 --> 00:12:09,320
And that's what I'm getting here.

200
00:12:09,570 --> 00:12:15,700
I'm setting it back down to lowercase and up putting it right there.

201
00:12:15,930 --> 00:12:20,110
I'm saying my string result result pre-increment s.

202
00:12:20,160 --> 00:12:25,740
So when that happens I expect both s end result to contain the upper case Frank which is exactly what's

203
00:12:25,740 --> 00:12:27,670
happening here.

204
00:12:27,720 --> 00:12:34,230
And then finally we'll test the post-increment where we're setting as to Frank and just simply incrementing

205
00:12:34,230 --> 00:12:37,800
as we should get member post and pre-increment all alone in the statement.

206
00:12:37,800 --> 00:12:39,050
I mean the same thing.

207
00:12:39,060 --> 00:12:45,600
So in this case I've got Frank as uppercase which I'm displaying I making Frank lower case and then

208
00:12:45,600 --> 00:12:47,130
I'm testing the post-increment.

209
00:12:47,130 --> 00:12:54,210
In this context here which means assign the lower case version to result and then increment S..

210
00:12:54,270 --> 00:12:58,250
So a result we expect to be lower case as we expect to be uppercase.

211
00:12:58,260 --> 00:12:59,870
And there you go.

212
00:13:00,000 --> 00:13:03,750
So a lot of talk with the test cases but they're important that you understand what they're supposed

213
00:13:03,750 --> 00:13:08,190
to do when we look at the challenge solution too we won't go over these again since we went over them

214
00:13:08,190 --> 00:13:08,760
here.

215
00:13:09,210 --> 00:13:10,610
But that's pretty much it.

216
00:13:10,920 --> 00:13:13,830
Implementing these as member methods is pretty straightforward.

217
00:13:13,830 --> 00:13:18,480
It's just a matter of understanding you know what we're changing as to how far we've got the right hand

218
00:13:18,480 --> 00:13:19,650
object as well.

219
00:13:19,710 --> 00:13:22,510
Do we return a reference do we return by value.

220
00:13:22,620 --> 00:13:23,940
And that's it.

221
00:13:23,940 --> 00:13:25,520
If you have questions please let me know.
