WEBVTT
1
00:00:05.700 --> 00:00:11.680
In this video we'll see some of the stream formatting options available for integers.

2
00:00:11.680 --> 00:00:14.530
Integers have four basic formatting options.

3
00:00:14.620 --> 00:00:20.870
And let's see what the defaults are for those options first integers are displayed in base 10 by default.

4
00:00:21.010 --> 00:00:25.810
This makes sense since base 10 is what most people in the world uses their base system.

5
00:00:25.810 --> 00:00:32.290
However we also have the option of displaying integers in base 8 which is called octal and base 16 which

6
00:00:32.290 --> 00:00:34.330
is called hexadecimal.

7
00:00:34.510 --> 00:00:40.010
Remember computers worked in base 2 or binary and that's difficult for humans to understand.

8
00:00:40.030 --> 00:00:44.950
So we need alternate base systems base 10 is what we learned in school and that's the way we count and

9
00:00:44.950 --> 00:00:45.970
do math.

10
00:00:45.970 --> 00:00:51.910
But it's not so intuitive to convert decimal to binary the alternate bases are often used in computing

11
00:00:52.150 --> 00:00:55.840
since they allow us to group information more like a computer would.

12
00:00:56.020 --> 00:01:02.320
For example since octal is base 8 we can group consecutive binary digits into groups of three.

13
00:01:02.440 --> 00:01:08.890
Starting from the right and we can easily convert between octal and binary and back again hexadecimal

14
00:01:08.890 --> 00:01:14.950
is base 16 which allows us to represent locations in memory since each hexadecimal digit represents

15
00:01:15.010 --> 00:01:16.920
8 bits or one byte.

16
00:01:16.990 --> 00:01:22.840
If you recall earlier in the course when we displayed addresses that were displayed in hexadecimal format.

17
00:01:22.840 --> 00:01:29.260
We also have the option to display the base as a prefix for Hex and octal values for Hex we start with

18
00:01:29.260 --> 00:01:33.650
0 X followed by the hex number and for octal we start with zero.

19
00:01:33.940 --> 00:01:39.190
This clearly tells the reader that the number is hex or octal since in some cases it would be impossible

20
00:01:39.190 --> 00:01:43.570
to tell otherwise the default is not to show the base.

21
00:01:43.690 --> 00:01:49.220
We can show the letters in hex numbers as well as the hex prefix in upper or lower case and lowercase

22
00:01:49.350 --> 00:01:50.270
is the default.

23
00:01:50.560 --> 00:01:55.990
And finally we can choose to display the plus sign when we have positive integers the default as we've

24
00:01:55.990 --> 00:02:00.210
seen already is not to display the plus sign when an engine is positive.

25
00:02:00.280 --> 00:02:04.240
This might sound complicated and intimidating but it's easy as pie.

26
00:02:04.240 --> 00:02:09.240
Let me show you how we can use the Io's tree manipulators to change the way we format integers.

27
00:02:10.730 --> 00:02:14.750
First let's see an example of displaying integers using different bases.

28
00:02:14.870 --> 00:02:17.670
Here we initialized numb to 255.

29
00:02:17.840 --> 00:02:21.530
That is 255 in base 10 just like we're used to doing.

30
00:02:21.560 --> 00:02:25.570
Now we can use the base manipulators to change the way the integer is formatted.

31
00:02:25.820 --> 00:02:32.360
Remember even though the output changes 255 is still stored and numb and we're not going to change it.

32
00:02:32.570 --> 00:02:35.780
First we you stood Yes and that means decimal.

33
00:02:35.990 --> 00:02:38.790
And that displays the number in base 10.

34
00:02:38.900 --> 00:02:41.710
We really don't have to specify this at all since the default.

35
00:02:41.810 --> 00:02:45.840
But I wanted to show you how to do it and this would display 255.

36
00:02:45.980 --> 00:02:48.980
The second display statement uses stood hex.

37
00:02:49.070 --> 00:02:55.190
In this case we display F F which is the hexadecimal value for 255.

38
00:02:55.190 --> 00:02:59.390
Also note that the f's are in lowercase which is also the default.

39
00:02:59.780 --> 00:03:08.640
Finally we have the Octa manipulator and we display 277 which is the octal value for decimal 255.

40
00:03:08.720 --> 00:03:14.630
Once we set the base using the manipulator that base will be used for all future insertions of any integer

41
00:03:14.630 --> 00:03:15.830
on the output stream.

42
00:03:15.830 --> 00:03:18.180
So that setting will persist.

43
00:03:18.200 --> 00:03:24.560
Now if we see 255 and 2 77 out of context it would be virtually impossible to tell whether they were

44
00:03:24.560 --> 00:03:26.520
base 8 or base 10.

45
00:03:26.540 --> 00:03:31.770
So that's where the show base manipulator comes in handy I'll show you that in the next slide.

46
00:03:32.930 --> 00:03:37.690
So in this example we have the same code except we're using the show based manipulator.

47
00:03:37.760 --> 00:03:39.700
Now when we execute the same code.

48
00:03:39.800 --> 00:03:48.770
Notice that 2:55 is unchanged but the hexadecimal F F now has a 0 x prefix and it's in lowercase.

49
00:03:48.770 --> 00:03:53.520
Also the octal 377 now has a zero preceding it.

50
00:03:53.540 --> 00:03:57.140
Now it's very clear what the base of each of these numbers is.

51
00:03:57.140 --> 00:04:02.950
Also note that the show base is applied to all further integer stream insertion so it also persists.

52
00:04:03.440 --> 00:04:10.320
We can toggle back to not showing the base by using stood no show base sometimes we want to be able

53
00:04:10.320 --> 00:04:16.410
to display hexadecimal digits in uppercase as well and sometimes we want to display the 0 x prefix in

54
00:04:16.410 --> 00:04:16.910
uppercase.

55
00:04:16.910 --> 00:04:23.550
We can do this with the uppercase manipulator in this case we're using show base and upper case and

56
00:04:23.550 --> 00:04:26.250
then we use the hex manipulator and display the number.

57
00:04:26.250 --> 00:04:33.510
Notice how we display 0 x f f and all the letters are uppercase like show base upper case will you be

58
00:04:33.510 --> 00:04:35.530
used for all further hex output.

59
00:04:35.640 --> 00:04:40.650
And we can go back to lower case using no upper case.

60
00:04:40.660 --> 00:04:46.750
Now let's see how the show positive manipulator works if we use show pause or show positive then we'll

61
00:04:46.750 --> 00:04:50.740
get a preceding plus sign on positive integers.

62
00:04:50.740 --> 00:04:53.230
You can see in the provided code that we have two integers.

63
00:04:53.230 --> 00:04:56.200
Number one which is initialized to 255.

64
00:04:56.440 --> 00:05:02.770
And number two which is initialized to minus 255 without using the Chopins manipulator.

65
00:05:02.890 --> 00:05:07.450
If we display these integers we get 255 and negative 255.

66
00:05:07.450 --> 00:05:11.840
Note that there is no plus sign in front of the positive 255.

67
00:05:11.860 --> 00:05:14.790
However when we use this show doesn't appear later.

68
00:05:14.860 --> 00:05:18.750
Now we see the plus sign in front of the positive 255.

69
00:05:18.760 --> 00:05:21.550
This can be useful sometimes depending on the application.

70
00:05:21.550 --> 00:05:25.200
Some accounting software wants that plus sign in front of the number.

71
00:05:25.540 --> 00:05:27.700
Again this setting also persists.

72
00:05:27.700 --> 00:05:30.650
So it will apply to any other entity or stream output.

73
00:05:31.750 --> 00:05:37.460
And again we can go back by to not showing the plus side with the no show pause manipulator.

74
00:05:37.900 --> 00:05:38.560
That's it.

75
00:05:38.560 --> 00:05:40.020
I told you it was easy.

76
00:05:40.030 --> 00:05:45.840
There are also several variations using the F method and we can also reset to defaults using stood reset

77
00:05:45.980 --> 00:05:49.010
as flags and providing the flies we want.

78
00:05:49.060 --> 00:05:54.130
I encourage you to do as I do that is not memorize any of these things but just know where to look them

79
00:05:54.150 --> 00:05:57.230
on the C++ reference documentation is pretty good.

80
00:05:57.340 --> 00:05:58.600
And everything's there.

81
00:05:58.630 --> 00:06:00.970
Unless of course you want to memorize them that's up to you.

82
00:06:01.180 --> 00:06:05.650
OK so let's head over to the ID and try some of these combinations out.

83
00:06:05.690 --> 00:06:12.950
OK so I mean the idea I mean the section 19 workspace in the manip underscore integer project.

84
00:06:13.600 --> 00:06:18.400
And what I'm doing this project just manipulating integers just like we did in the slides and converting

85
00:06:18.400 --> 00:06:22.730
them to different bases and then I'm playing around with some of these manipulators.

86
00:06:22.750 --> 00:06:28.630
So let's start by first of all including IO stream and IO manip we need to do that too in order we use

87
00:06:28.630 --> 00:06:29.750
our manipulators.

88
00:06:30.100 --> 00:06:35.600
And I've got an integer here that I've defined and initialized to 255 It's called name.

89
00:06:36.310 --> 00:06:38.020
OK so let's start right here.

90
00:06:38.020 --> 00:06:40.120
Here what we're doing is we're displaying numb.

91
00:06:40.240 --> 00:06:43.480
And again it's only the one variable we're going to use throughout this example.

92
00:06:43.570 --> 00:06:45.160
We're displaying it in decimal format.

93
00:06:45.160 --> 00:06:48.160
Again we don't really need to do this here since it's the default.

94
00:06:48.550 --> 00:06:57.160
And then in hex and then in octal and so when we run this we see 2:55 F-F which is the Hecht's and 377

95
00:06:57.160 --> 00:06:59.150
which is awful just like we saw in the slides.

96
00:06:59.170 --> 00:07:01.080
So that's pretty pretty straightforward.

97
00:07:01.160 --> 00:07:07.990
And now like I said sometimes if you see those two integers or those two series of numbers you really

98
00:07:07.990 --> 00:07:14.590
don't know what the base is so we can use the show base manipulator right here as I'm using right here

99
00:07:14.590 --> 00:07:15.750
on line 18.

100
00:07:15.880 --> 00:07:18.690
And now when I run it we'll see the base.

101
00:07:18.820 --> 00:07:23.950
So now we're going to see the 0 x right here in front of the hexadecimal number and the zero in front

102
00:07:23.950 --> 00:07:28.120
of the octal number which is pretty nice that way you know exactly the context right.

103
00:07:28.120 --> 00:07:32.680
So you know this is hecks and you know that this is octal and obviously you know that just has a decimal

104
00:07:32.680 --> 00:07:34.450
up here.

105
00:07:34.900 --> 00:07:39.220
I'll tell you a funny story a couple of years ago I was interviewing a candidate for a C++ programming

106
00:07:39.220 --> 00:07:42.520
position and he was an entry level position.

107
00:07:42.760 --> 00:07:46.720
You know you asked him to write code and to ask him some questions about the language.

108
00:07:46.840 --> 00:07:51.370
So I asked him to write a program that accepted an integer and converted it to a text decimal number

109
00:07:52.000 --> 00:07:56.740
and every other candidate that had ever asked that kind of question to goes off and writes a function

110
00:07:56.740 --> 00:07:58.330
and does all kinds of stuff.

111
00:07:58.330 --> 00:08:03.220
This kid went over wrote the program in like 30 seconds and told me he was done and I couldn't believe

112
00:08:03.220 --> 00:08:03.630
it.

113
00:08:03.640 --> 00:08:10.090
So I went over there and just ran at his output was correct and what he did was this which was pretty

114
00:08:10.090 --> 00:08:11.030
clever right.

115
00:08:11.050 --> 00:08:15.940
All he did was ask me for the integer did a stood hex and printed it out.

116
00:08:15.990 --> 00:08:19.050
I was very very clever very bright kid.

117
00:08:19.060 --> 00:08:20.950
I never would've thought about doing that in an interview.

118
00:08:20.950 --> 00:08:23.770
But anyway he got the job and he did he did really well in the end.

119
00:08:23.800 --> 00:08:28.030
So that's a good way to think outside the box sometimes you don't want to go for the fancy algorithms

120
00:08:28.030 --> 00:08:29.190
just do it the easy way.

121
00:08:29.230 --> 00:08:30.180
I'm all for that.

122
00:08:30.290 --> 00:08:36.430
But anyway so here now what we're going to do is notice them and run this again so that you can see

123
00:08:36.640 --> 00:08:41.180
that the 0 x and the F F here and the hex number are lowercase.

124
00:08:41.350 --> 00:08:47.790
If you need to have them in upper case we can use stood upper case just like we are here on line 25.

125
00:08:47.800 --> 00:08:53.760
And when I run that now you'll see that then put that comment back.

126
00:08:53.820 --> 00:08:57.170
So when I run this now you can see that now it's a zero x f.f.

127
00:08:57.190 --> 00:08:58.720
And those are capitalized.

128
00:08:58.720 --> 00:09:03.610
That only applies to hexadecimal numbers because the hex numbers are the only ones that have letters

129
00:09:03.610 --> 00:09:04.440
in them.

130
00:09:04.950 --> 00:09:05.700
OK.

131
00:09:06.090 --> 00:09:08.910
The show pause are show positive modifier right here.

132
00:09:08.980 --> 00:09:11.560
So let me uncomment this code out.

133
00:09:12.100 --> 00:09:15.240
And what this does it only works with decimal values.

134
00:09:15.460 --> 00:09:20.160
And if the number is positive then it displays the plus sign in front of the number by default.

135
00:09:20.170 --> 00:09:22.380
We don't display a plus sign in front of the number.

136
00:09:22.750 --> 00:09:28.390
So let's run this and you can see that right here on the 255 you can see that plus sign right in front

137
00:09:28.390 --> 00:09:28.830
of it.

138
00:09:29.020 --> 00:09:30.580
And that's exactly what that does.

139
00:09:30.580 --> 00:09:33.150
Notice that it has no effect on hex or octal.

140
00:09:33.160 --> 00:09:35.180
It only works on decimals.

141
00:09:36.190 --> 00:09:42.420
And in this case there is a method called set F and what we can see.

142
00:09:42.430 --> 00:09:43.600
And this isn't a manipulator.

143
00:09:43.600 --> 00:09:44.830
This is a method call.

144
00:09:44.830 --> 00:09:46.050
So we're saying stood out.

145
00:09:46.060 --> 00:09:51.050
Dot set f so said F is a method and then we can pass in these format flags.

146
00:09:51.430 --> 00:09:56.650
And what this will do is it'll set it to show base or no show base or upper case or no upper case whatever

147
00:09:56.650 --> 00:09:57.880
you really want here.

148
00:09:57.880 --> 00:10:04.600
So it's an alternate way of doing what we did up here and you tend to see this style more often than

149
00:10:04.600 --> 00:10:08.170
this style but you'll see this sometimes out there just wanted to show you.

150
00:10:08.360 --> 00:10:15.760
And also we can use stood reset Iowas flags to set these back to normal.

151
00:10:15.760 --> 00:10:22.180
So for example this one right here stood AOS based field that'll set your integer base back to decimal

152
00:10:22.780 --> 00:10:27.880
to show base we'll set it back to the default for show base which is not to show the base right.

153
00:10:27.880 --> 00:10:28.680
That's the default.

154
00:10:28.690 --> 00:10:31.760
Again remember this resets it back to the defaults.

155
00:10:31.840 --> 00:10:37.960
This one show positive says it sets it back to not showing the positive and the upper case goes back

156
00:10:37.960 --> 00:10:43.510
to not showing upper case again so don't let that confuse you is not we're not setting it to those flags.

157
00:10:43.510 --> 00:10:45.700
We're just telling it to set it to the default.

158
00:10:45.940 --> 00:10:46.480
OK.

159
00:10:46.480 --> 00:10:54.910
So in this last example I'm just using a real simple input statement and comment de-code out and I'm

160
00:10:54.910 --> 00:10:58.780
asking the user for an integer and I'm putting it right back into that no Verrier what we had before

161
00:10:59.320 --> 00:11:06.010
and I'm just using default to display it as a decimal and then has a hex and then hex uppercase and

162
00:11:06.010 --> 00:11:07.510
then hex again.

163
00:11:07.540 --> 00:11:10.710
And the point here is so that you can see that the setting stick.

164
00:11:10.870 --> 00:11:15.460
So this upper case will still be upper case even though we've already used it because they are persistent

165
00:11:16.000 --> 00:11:17.480
and then no upper case.

166
00:11:17.500 --> 00:11:21.430
And then finally octal hex we're going to show the base and octal at the end.

167
00:11:21.430 --> 00:11:23.230
So again really really straight forward.

168
00:11:23.230 --> 00:11:32.230
Let me run it and we can use a number like let's say 135 and then you go in integers 135 the decimal

169
00:11:32.230 --> 00:11:34.260
value is 135 in hex.

170
00:11:34.280 --> 00:11:42.960
It's 87 and you can see the show based here because I've got no show based right because that was my

171
00:11:42.960 --> 00:11:44.600
default right here.

172
00:11:45.630 --> 00:11:50.940
I said it back to the default to not show base and that's why we're not seeing it.

173
00:11:51.020 --> 00:11:56.340
I notice that when we're not showing the base this upper case has no effect at all which is exactly

174
00:11:56.340 --> 00:11:57.840
what you would expect right.

175
00:11:58.350 --> 00:12:01.260
So that's it in the next video.

176
00:12:01.290 --> 00:12:05.550
What we're going to do is we're going to look at the manipulators for floating point numbers and see

177
00:12:05.550 --> 00:12:06.110
how they work.
