1
00:00:05,590 --> 00:00:11,110
OK so now that we understand the basics of C++ pointers Let's talk about what are the main use cases

2
00:00:11,110 --> 00:00:14,310
for pointers that is dynamic memory allocation.

3
00:00:15,370 --> 00:00:19,640
When we're developing software we often have no idea how much storage we're going to need to model our

4
00:00:19,640 --> 00:00:20,370
data.

5
00:00:20,390 --> 00:00:26,460
For example if I'm modeling the students in my class how many students do I allocate storage for if

6
00:00:26,460 --> 00:00:30,990
I'm using an array to model the students then I need to know exactly how many students I have since

7
00:00:30,990 --> 00:00:33,870
when to allocate an array it's fixed in size.

8
00:00:33,870 --> 00:00:37,620
I know what you're thinking hey didn't you tell us earlier that we should be using vectors instead of

9
00:00:37,620 --> 00:00:38,300
arrays.

10
00:00:38,490 --> 00:00:39,450
Yes I did.

11
00:00:39,480 --> 00:00:40,570
And that's still true.

12
00:00:40,590 --> 00:00:45,570
However it's important to understand how to allocate memory dynamically not just for a race but for

13
00:00:45,660 --> 00:00:48,130
other data including objects.

14
00:00:48,150 --> 00:00:50,970
Also how do you think vectors work behind the scenes.

15
00:00:51,000 --> 00:00:54,360
They use techniques to allocate and deallocate memory from the heap.

16
00:00:54,360 --> 00:00:57,900
So we really need to understand how that works in this video.

17
00:00:57,930 --> 00:01:03,870
Go for the basics of allocating memory dynamically from the heap all memory that's allocated dynamically

18
00:01:03,870 --> 00:01:07,040
via a pointer comes from the heap or the Freestore.

19
00:01:07,110 --> 00:01:12,480
As I said we'll use dynamic memory allocation again later in this course in the context of object oriented

20
00:01:12,480 --> 00:01:13,580
objects.

21
00:01:13,590 --> 00:01:15,450
So how do you allocate storage at runtime.

22
00:01:15,480 --> 00:01:22,200
Let's see we use the new keyword to allocate storage at runtime.

23
00:01:22,200 --> 00:01:28,110
In this example we declare int pointer as a pointer to an integer rather than assigning the address

24
00:01:28,110 --> 00:01:33,750
of some integer variable as we've done previously why don't we create an integer at runtime that's on

25
00:01:33,750 --> 00:01:38,170
the heap and store that variables addressed in pointer.

26
00:01:38,190 --> 00:01:39,360
That's pretty cool.

27
00:01:39,360 --> 00:01:42,860
You can see how easy it is in pointer equals new int.

28
00:01:42,900 --> 00:01:44,600
That's it that's all it takes.

29
00:01:44,640 --> 00:01:50,190
This allocates storage for an integer on the heap and stores its address into pointer.

30
00:01:50,190 --> 00:01:55,770
Now we can use the pointer to access the integer the first output statement displays the value of int

31
00:01:55,770 --> 00:01:56,660
pointer.

32
00:01:56,670 --> 00:01:59,610
This is the address of the newly created integer.

33
00:01:59,610 --> 00:02:03,660
If we want to get to that integer we need to dereference the pointer.

34
00:02:03,660 --> 00:02:05,280
But notice what gets displayed.

35
00:02:05,400 --> 00:02:07,270
A really large integer value.

36
00:02:07,440 --> 00:02:12,940
That's because the integer that was allocated hasn't been initialized yet and it contains garbage data.

37
00:02:13,230 --> 00:02:18,600
So in order to assign a value to that integer on the heap we dereference the pointer to get to the integer

38
00:02:18,840 --> 00:02:21,360
and then store 100 in and in this case.

39
00:02:21,360 --> 00:02:24,540
Now when we display the value of the integer we get back 100.

40
00:02:24,630 --> 00:02:25,770
That's pretty cool.

41
00:02:25,770 --> 00:02:27,340
A couple of things to understand.

42
00:02:27,630 --> 00:02:33,240
When you allocate storage in this manner the storage is on the heap the allocated storage contains garbage

43
00:02:33,240 --> 00:02:37,950
data until you initialize it the allocated storage does not have a name.

44
00:02:37,950 --> 00:02:41,210
The only way to get to that storage is via the pointer.

45
00:02:41,310 --> 00:02:46,380
If you lose the pointer because it goes out of scope or you reassign it then you lost your only way

46
00:02:46,380 --> 00:02:48,990
to get to that storage and you have a memory leak.

47
00:02:48,990 --> 00:02:50,550
I'll talk more about that later.

48
00:02:51,150 --> 00:02:56,730
Finally when you're done using the storage then you must deallocate the storage so that it's again available

49
00:02:56,730 --> 00:02:57,890
to the rest of the program.

50
00:02:57,900 --> 00:03:04,440
Let's see how Here you see that we again have declared it pointer is a pointer to an int.

51
00:03:04,580 --> 00:03:07,100
Then we assign new int to it pointer.

52
00:03:07,270 --> 00:03:11,300
This statement allocates storage for an integer on the heap and stores the address of that image or

53
00:03:11,360 --> 00:03:15,780
in int pointer just like before we can use the pointer as we wish.

54
00:03:15,920 --> 00:03:21,640
And then when we're done we need to release or deallocate the storage that we allocated for that integer.

55
00:03:21,710 --> 00:03:26,650
We can do that easily using the delete key word followed by the name of the pointer.

56
00:03:26,660 --> 00:03:34,670
Make sure that the address in the pointer is an address of stories that was allocated using new we just

57
00:03:34,670 --> 00:03:38,330
saw an example of allocating a single integer dynamically.

58
00:03:38,330 --> 00:03:41,490
You can do the same with double strings vectors and so forth.

59
00:03:41,630 --> 00:03:45,740
But in this I will do something a little more useful than allocating a single integer.

60
00:03:45,740 --> 00:03:51,170
How about we allocate an entire array of integers on the heap at runtime in the sample code.

61
00:03:51,170 --> 00:03:56,610
We declare a pointer to an integer called array pointer and an integer named size.

62
00:03:56,630 --> 00:03:59,340
We asked the user how big they want the array to be.

63
00:03:59,360 --> 00:04:04,010
This could be the number of scores on an exam or the number of temperatures to read and so forth.

64
00:04:04,100 --> 00:04:09,530
Then we use the new operator with square brackets this time and the number of elements to allocate inside

65
00:04:09,530 --> 00:04:10,930
the brackets.

66
00:04:10,940 --> 00:04:16,230
This will attempt to allocate that many integers on the heap contiguously in memory.

67
00:04:16,730 --> 00:04:22,450
If the storage is successfully created then the address of the first integer is stored in array pointer.

68
00:04:22,700 --> 00:04:24,020
That's pretty easy.

69
00:04:24,020 --> 00:04:27,780
Of course when we're done with the memory we need to release Sidor deallocate it.

70
00:04:27,800 --> 00:04:32,950
Let's see the syntax for that.

71
00:04:32,960 --> 00:04:38,730
Here's the same code example but the last statement deletes the entire array that we allocated dynamically.

72
00:04:38,750 --> 00:04:42,260
Notice the square brackets between the lead and the name of the pointer.

73
00:04:42,440 --> 00:04:46,760
These brackets must be empty do not include anything inside the brackets.

74
00:04:46,760 --> 00:04:54,270
OK let's go to the idea and create some storage dynamically OK so I mean the ID I'm in the section 12

75
00:04:54,270 --> 00:04:57,260
workspace in the dynamic memory project.

76
00:04:57,500 --> 00:05:02,120
What I want to do in this little example is allocate a single element on the heap.

77
00:05:02,130 --> 00:05:07,030
In this case will do an integer and point to it from a pointer.

78
00:05:07,260 --> 00:05:07,920
OK.

79
00:05:08,110 --> 00:05:10,100
We're going to use the new keyword to do that.

80
00:05:10,200 --> 00:05:14,510
And then after that we'll allocate storage for an array like we did with the slides.

81
00:05:14,520 --> 00:05:16,370
All right so let's do this first.

82
00:05:16,740 --> 00:05:20,760
We need a pointer to a pointer to an integer and you know what before we do that.

83
00:05:20,770 --> 00:05:23,830
Let's talk about exactly what's going on here.

84
00:05:23,910 --> 00:05:29,580
If you remember when we talked about our memory model earlier we've got our memory model here where

85
00:05:29,580 --> 00:05:36,790
we've got our code is down here that we had our global variables and then we had our stack right here

86
00:05:37,310 --> 00:05:43,300
in our stack is where the function calls happened and this is push pops we're pushing and popping activation

87
00:05:43,300 --> 00:05:45,160
records on here just like before.

88
00:05:45,340 --> 00:05:48,510
Well we also have a part of memory called the heap.

89
00:05:48,640 --> 00:05:55,280
It's also called the Freestore all dynamic allocation happens here.

90
00:05:57,030 --> 00:05:59,660
We can't really do dynamic allocation on the stack.

91
00:05:59,660 --> 00:06:01,560
It's already doing dynamic allocation.

92
00:06:01,640 --> 00:06:08,030
When we push and pop activation records but we can't really decide at runtime how big those things are

93
00:06:08,030 --> 00:06:08,990
going to be.

94
00:06:09,080 --> 00:06:12,730
We can't to a point but not really the heap is a free for all.

95
00:06:12,770 --> 00:06:17,420
We've got a whole bunch of memory out there and we can request that we you know we get a thousand integers

96
00:06:17,420 --> 00:06:23,180
2000 integers you know 15 objects as much as we want but we need to take care of that heap and we need

97
00:06:23,180 --> 00:06:25,300
to release the storage when we're done.

98
00:06:25,310 --> 00:06:27,040
So that's the kind of thing we'll do here.

99
00:06:27,050 --> 00:06:33,010
Now what I want to do is I want to create an integer pointer that's going to be in main.

100
00:06:33,010 --> 00:06:37,540
So it's going to be on the stack and I want to allocate an integer on the heap so I want to allocate

101
00:06:37,540 --> 00:06:43,580
an integer dynamically on the heap and I want to point to it from that point to OK that's what I want

102
00:06:43,580 --> 00:06:50,300
to do first then what I want to do is I want to allocate an array of doubles let's say in this case

103
00:06:51,960 --> 00:06:53,400
on the heap again.

104
00:06:53,400 --> 00:06:54,560
And how big is it going to be.

105
00:06:54,570 --> 00:06:58,830
I don't know I'm going to ask the user how many doubles they need and then what we'll have is we'll

106
00:06:58,830 --> 00:07:02,290
have a pointer to doubles in this case.

107
00:07:02,460 --> 00:07:05,360
That's going to point to their OK.

108
00:07:05,440 --> 00:07:06,510
So that's what we're going to do.

109
00:07:06,730 --> 00:07:07,570
Let's start here.

110
00:07:07,570 --> 00:07:10,860
Let's do the integer First we need a pointer to it.

111
00:07:11,350 --> 00:07:15,950
So we're going to have an integer and we'll initialize it to load pointer.

112
00:07:15,970 --> 00:07:17,680
That's our best practice.

113
00:07:17,680 --> 00:07:22,920
So what we've done is we've got a variable member it's a variable called pointer that points to an integer

114
00:07:22,930 --> 00:07:25,260
so it's going to hold addresses of integers.

115
00:07:25,270 --> 00:07:27,400
Right now it's pointing nowhere.

116
00:07:27,700 --> 00:07:33,500
If we want to allocate this dynamically at run time from the heap we just say it.

117
00:07:33,520 --> 00:07:36,510
Pointer equals new.

118
00:07:36,940 --> 00:07:41,800
And then followed by the type that I want to allocate in this case ant.

119
00:07:42,160 --> 00:07:47,470
Now what's going to happen is that storage for an integer is going to be allocated on the heap and its

120
00:07:47,470 --> 00:07:51,060
address will be stored in the pointer.

121
00:07:51,230 --> 00:07:59,150
So we can just use something like display in pointer and that will display the memory location where

122
00:07:59,150 --> 00:08:01,040
that integer is on the heap.

123
00:08:01,040 --> 00:08:04,270
Remember that's the address that stored in pointer.

124
00:08:04,370 --> 00:08:06,090
So let's run that.

125
00:08:06,340 --> 00:08:12,970
And you can see that Hex address right there that's where that integer lives on the heap and our pointer

126
00:08:12,970 --> 00:08:14,340
is not pointing to it.

127
00:08:14,410 --> 00:08:19,250
It's important to understand that that integer that we just created on the heap has no name.

128
00:08:19,350 --> 00:08:22,290
There is no way to get to it except through this point.

129
00:08:22,300 --> 00:08:26,800
So if I lose the pointer I've got something called a memory leak which I'll talk a little bit about

130
00:08:26,800 --> 00:08:27,930
later.

131
00:08:28,060 --> 00:08:33,740
So at this point we can use this integer however we like and when we're done we need to delete it.

132
00:08:33,970 --> 00:08:39,310
So the syntax for that is simply the keyword delete followed by the name of the pointer which in this

133
00:08:39,310 --> 00:08:43,830
case is into pointer.

134
00:08:44,060 --> 00:08:46,800
That frees up the storage OK.

135
00:08:46,880 --> 00:08:48,620
So pretty easy.

136
00:08:48,620 --> 00:08:53,040
Now what we'll do is clean up a little bit this white space here.

137
00:08:53,060 --> 00:09:00,080
Now what we'll do is we'll create a whole contiguous block of memory on the heap can and will do doubles

138
00:09:00,080 --> 00:09:00,960
this time.

139
00:09:00,980 --> 00:09:05,540
So there's two things here we don't know the size so we have to ask the user how many doubles do you

140
00:09:05,540 --> 00:09:07,090
need.

141
00:09:07,120 --> 00:09:09,090
And we also need a pointer to that area.

142
00:09:09,100 --> 00:09:11,180
So we declare both of those right now.

143
00:09:11,180 --> 00:09:18,580
The size will declare it as a size type and we'll just call it size will initialize it to 0 and the

144
00:09:18,580 --> 00:09:23,310
pointer will be a pointer to doubles and the name of the pointer.

145
00:09:23,320 --> 00:09:24,540
Let's just say 10 pointer.

146
00:09:24,550 --> 00:09:30,280
So it'll be temperatures and again will initialize it to No.

147
00:09:30,850 --> 00:09:32,310
So we're good to go here.

148
00:09:32,380 --> 00:09:33,820
So let's ask the user.

149
00:09:34,000 --> 00:09:39,940
So will I see user will see how many taps and how many temperatures do they need.

150
00:09:40,150 --> 00:09:42,650
And we'll read that into size.

151
00:09:42,670 --> 00:09:44,920
So now we know how many temperatures to allocate.

152
00:09:45,040 --> 00:09:51,670
So if they typed in 50 100 200 10000 whatever they typed in that's how much storage we're going to allocate.

153
00:09:51,700 --> 00:09:52,490
So what do we do.

154
00:09:52,540 --> 00:09:57,450
We use the pointer we're going to say 10 pointer equals new.

155
00:09:57,520 --> 00:09:58,750
What am I allocating.

156
00:09:58,820 --> 00:10:01,210
Well Medicaid doubles in this case.

157
00:10:01,210 --> 00:10:03,470
And how many size.

158
00:10:03,520 --> 00:10:06,820
This is where you put the size in the square brackets.

159
00:10:07,510 --> 00:10:12,340
That's going to allocate that chunk of memory happens to be an array in this case because it's contiguous

160
00:10:12,340 --> 00:10:19,760
doubles in memory and store the address of the first one into 10 pointer so at this point we can say

161
00:10:19,760 --> 00:10:21,450
seek out.

162
00:10:21,950 --> 00:10:25,450
Let's just say 10 pointer see what's in there.

163
00:10:25,550 --> 00:10:28,120
Obviously it's an address of that first double right.

164
00:10:28,270 --> 00:10:29,600
And let's run that real quick.

165
00:10:29,600 --> 00:10:30,980
See what we get.

166
00:10:30,980 --> 00:10:36,470
So how many attempts will say 100 temperatures and you can see right there that's the area in the heap

167
00:10:37,010 --> 00:10:41,480
that contains the address of the first of those 100 doubles.

168
00:10:41,540 --> 00:10:47,050
Pretty easy know when we're done what do we do we always need to free up the space that we've allocated

169
00:10:47,350 --> 00:10:51,620
so we can say delete in this case we allocated an array right there.

170
00:10:51,630 --> 00:10:55,960
You've got the square brackets in the new call so here you get put the square brackets in the delete

171
00:10:56,350 --> 00:10:58,570
nothing inside the square brackets.

172
00:10:58,840 --> 00:11:03,960
And then the name of the pointer which was temperature pointer that's it.

173
00:11:04,120 --> 00:11:05,700
That's the entire program.

174
00:11:05,800 --> 00:11:08,140
And you could see what's happening at this point right.

175
00:11:08,140 --> 00:11:13,270
What we did was we had an I'm not going to draw the whole stack again but we had that 10 pointer right

176
00:11:13,270 --> 00:11:16,140
here that was on the stack.

177
00:11:16,570 --> 00:11:26,760
We allocated 100 doubles on the heat 10 pointers pointing to the first one OK.

178
00:11:26,840 --> 00:11:27,890
That's really what's happening.

179
00:11:27,890 --> 00:11:34,240
This is on the heap and in this case 10 pointer was on the stack because it's local to main right here

180
00:11:35,830 --> 00:11:40,800
notice what happens if we lose this point or I mean if we do something really silly like I don't know

181
00:11:40,810 --> 00:11:41,650
10 pointer

182
00:11:44,830 --> 00:11:51,340
because no pointer right and we do that before we did this which just happened where we just no doubt

183
00:11:51,340 --> 00:11:52,310
this pointer.

184
00:11:52,330 --> 00:11:53,320
So this is gone.

185
00:11:53,320 --> 00:11:56,380
We just lost our only way to get to that storage.

186
00:11:56,800 --> 00:11:58,990
And that's called the memory leak.

187
00:11:59,110 --> 00:12:04,660
What did the delete call does is it frees up this storage again your pointer is still pointing to it

188
00:12:04,660 --> 00:12:09,520
and that's important because if you try to use that pointer again after you've deleted the storage you

189
00:12:09,520 --> 00:12:11,350
could have really really unpredictable results.

190
00:12:11,350 --> 00:12:16,950
But in this case you don't want to lose your pointer to the dynamically allocated memory because then

191
00:12:16,960 --> 00:12:20,560
it's basically orphaned out there and that's the memory leak.

192
00:12:20,980 --> 00:12:27,980
OK now let's see what happens if our call fails our call to allocate the size here.

193
00:12:28,000 --> 00:12:33,220
Now I'll do something that you should never do when I'm going to create an endless loop here.

194
00:12:33,370 --> 00:12:39,480
I'm just going to say while true allocate that so this is going to not.

195
00:12:39,510 --> 00:12:40,850
How many temperatures you want to allocate.

196
00:12:40,850 --> 00:12:43,110
I want to type something by 10000.

197
00:12:43,320 --> 00:12:49,050
And then what I'll do is I'll just keep looping allocating and creating memory leaks all over the place.

198
00:12:49,110 --> 00:12:51,810
Eventually we're going to run out of memory in the heap.

199
00:12:51,810 --> 00:12:55,200
So eventually this will fail and I should get an exception.

200
00:12:55,200 --> 00:12:57,260
So let's see what that looks like.

201
00:12:58,770 --> 00:13:03,780
How many times let's say a lot.

202
00:13:03,780 --> 00:13:06,990
I remember it's going to be in an infinite loop doing this over and over and over.

203
00:13:07,440 --> 00:13:08,080
And there you go.

204
00:13:08,080 --> 00:13:09,510
That was pretty fast.

205
00:13:09,510 --> 00:13:13,330
You can see terminate called after throwing an instance of standard bad Alik.

206
00:13:13,350 --> 00:13:16,890
So basically what happened was the call to new fail.

207
00:13:16,890 --> 00:13:18,760
There was no more memory available.

208
00:13:19,020 --> 00:13:23,460
And this is the exception that's thrown well talk about exception handling a little bit later in the

209
00:13:23,460 --> 00:13:23,840
class.

210
00:13:23,850 --> 00:13:28,230
But what you want to do is you want to catch that exception you don't want your program to just stop

211
00:13:28,230 --> 00:13:30,180
like that when it catch the exception.

212
00:13:30,180 --> 00:13:35,760
And if you can deal with it somehow maybe you've got you know memory and caches and temporary stuff

213
00:13:35,760 --> 00:13:40,790
that you can free up to free up some memory and then you can allocate this memory again trying to con

214
00:13:40,800 --> 00:13:41,510
you again.

215
00:13:41,520 --> 00:13:43,920
So this is again I'm going to delete that.

216
00:13:43,930 --> 00:13:45,320
That's not a good idea.

217
00:13:46,060 --> 00:13:51,610
But that's basically it in the next video we'll talk about the relationship between arrays which is

218
00:13:51,610 --> 00:13:55,360
really what's going on here and a pointer and you can see that really almost the same thing here in

219
00:13:55,360 --> 00:13:59,050
this case and how we can actually use that array.

220
00:13:59,050 --> 00:14:02,000
That's on the heap from our code.

221
00:14:02,440 --> 00:14:03,250
So I'll be right back.
