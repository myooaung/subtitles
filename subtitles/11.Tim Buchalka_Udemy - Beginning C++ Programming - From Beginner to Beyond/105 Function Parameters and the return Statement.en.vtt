WEBVTT
1
00:00:05.570 --> 00:00:10.070
This video we'll learn more about function parameters and we'll also talk about the return statement

2
00:00:11.180 --> 00:00:15.260
when we call a function and pass data into that function this data.

3
00:00:15.380 --> 00:00:19.130
Are the parameters to that function in the function call.

4
00:00:19.130 --> 00:00:22.330
These data are called arguments in the function definition.

5
00:00:22.340 --> 00:00:23.660
They're called parameters.

6
00:00:23.690 --> 00:00:27.130
What defined the vocabulary more precisely in the next slide.

7
00:00:27.770 --> 00:00:33.290
As we've already seen when we call a function the arguments we use to call the function and the parameters

8
00:00:33.290 --> 00:00:37.590
that the function expects must match in number order and type.

9
00:00:37.640 --> 00:00:44.470
Let's see an example in this example we have a function prototype that tells the compiler that we'll

10
00:00:44.470 --> 00:00:49.770
define a function named add numbers that expects to integers and returns an integer.

11
00:00:50.020 --> 00:00:55.260
Then in the main I declare an integer variable named result and we initialize it to zero.

12
00:00:55.450 --> 00:01:01.430
Then we call the add numbers function and pass in the integer literals 100 and 200.

13
00:01:01.450 --> 00:01:04.830
The compiler will type check this function call to be sure it's valid.

14
00:01:05.020 --> 00:01:10.330
Since I'm passing into integers and the function prototype says exactly that then the compiler will

15
00:01:10.330 --> 00:01:11.670
not produce an error.

16
00:01:12.040 --> 00:01:15.790
You can see at the bottom of the slide that I've defined the add numbers function.

17
00:01:15.790 --> 00:01:18.700
It has two integer parameters A and B.

18
00:01:18.700 --> 00:01:25.960
In the case of the function calling main A will be 100 and B will be 200 100 plus 200 is computed and

19
00:01:25.960 --> 00:01:32.190
300 is returned to 300 is then assigned to the variable result in the main function.

20
00:01:32.190 --> 00:01:33.730
Let's take a look at another example.

21
00:01:35.650 --> 00:01:40.540
In this example I didn't provide a function prototype to save space but you should know at this point

22
00:01:40.540 --> 00:01:41.520
that it would be void.

23
00:01:41.530 --> 00:01:44.250
Say hello Sander's strain.

24
00:01:44.260 --> 00:01:50.260
Notice that the function say hello expects one parameter and it's a C++ string object and it displays

25
00:01:50.290 --> 00:01:53.780
hello followed by whatever string is in the name object.

26
00:01:53.890 --> 00:01:57.280
The next three statements would normally be in Maine or in another function.

27
00:01:57.280 --> 00:01:58.960
These are the function calls.

28
00:01:59.020 --> 00:02:01.270
The first is say Hello Frank.

29
00:02:01.420 --> 00:02:07.390
Notice that Frank is a C-style string literal but the function expects a C++ string object.

30
00:02:07.390 --> 00:02:09.070
Aren't these types different.

31
00:02:09.070 --> 00:02:11.530
Why doesn't the compiler produce an error here.

32
00:02:11.530 --> 00:02:17.050
Yes the types are different but the compiler will try to convert one type to another if it knows how

33
00:02:17.050 --> 00:02:19.420
to make the function call work.

34
00:02:19.420 --> 00:02:24.340
In this case the C-style string literal Frank is converted to a C++ string object.

35
00:02:24.340 --> 00:02:28.930
The same would happen if a function expected a double and it passed an int into it.

36
00:02:28.930 --> 00:02:32.470
The it would be promoted to the double as we've already seen.

37
00:02:32.500 --> 00:02:34.320
Notice the last function call.

38
00:02:34.420 --> 00:02:38.880
In this case I'm calling the function Say hello with a single string object parameter.

39
00:02:38.890 --> 00:02:43.690
My dog which is a variable name for a string object with the string buster in it.

40
00:02:44.930 --> 00:02:48.180
Let's talk a bit about how parameters are passed into functions.

41
00:02:51.060 --> 00:02:58.350
In C++ when you pass data into a function that data is passed by value what this means is that the value

42
00:02:58.350 --> 00:03:00.680
of the data is passed in by copy.

43
00:03:00.750 --> 00:03:03.550
So the compiler makes a copy of the data.

44
00:03:03.660 --> 00:03:08.550
That means that the code in the function does not change the argument that was passed in when we finished

45
00:03:08.550 --> 00:03:13.140
the function of the original data that was in the function call will be unchanged.

46
00:03:13.410 --> 00:03:15.510
This is good and not so good.

47
00:03:15.630 --> 00:03:21.890
It's good because since we're making a copy we can't change the original argument by mistake or intentionally.

48
00:03:21.900 --> 00:03:27.330
It's not good because sometimes making a copy of data can be expensive both in storage needed and the

49
00:03:27.360 --> 00:03:30.410
time needed to actually copy that data.

50
00:03:30.420 --> 00:03:35.400
Also sometimes we really do want to change the actual data being passed in fear.

51
00:03:35.400 --> 00:03:39.860
C++ has solutions for all these use cases and we'll learn about them soon.

52
00:03:40.260 --> 00:03:47.640
Let's define some vocabulary used in programming languages that is formal versus actual parameters formal

53
00:03:47.640 --> 00:03:52.820
parameters or the parameters defined in the function's definition in the function header.

54
00:03:53.220 --> 00:03:57.990
Actual parameters of the parameters that are used when the function is called that is in the function

55
00:03:57.990 --> 00:03:59.760
call statement.

56
00:03:59.760 --> 00:04:07.020
Many programmers in languages call actual parameters the arguments to a function in C++ the actual parameters

57
00:04:07.050 --> 00:04:10.730
are passed by value or copied to the formal parameters.

58
00:04:10.830 --> 00:04:17.500
That might show you an example that will make this clear in this light I have a function definition

59
00:04:17.500 --> 00:04:23.080
for a function called Parama test and this function expects one parameter called form.

60
00:04:23.080 --> 00:04:25.830
This is an example of a formal parameter.

61
00:04:25.900 --> 00:04:31.360
If this function expected more than one Pramer they would all be considered formal parameters in the

62
00:04:31.360 --> 00:04:32.410
main function.

63
00:04:32.410 --> 00:04:36.680
I'm declaring an integer named actual and initializing to 50.

64
00:04:36.730 --> 00:04:39.250
Displaying actual which will display 50.

65
00:04:39.610 --> 00:04:43.570
Then I'm calling the program test function with the actual parameter.

66
00:04:43.570 --> 00:04:45.380
This is the function call.

67
00:04:45.390 --> 00:04:49.430
Any parameters passed to functions here are considered actual parameters.

68
00:04:50.350 --> 00:04:55.510
In this case the value of the actual parameter is copied to the formal parameter.

69
00:04:56.050 --> 00:05:01.930
So formal in the pram test function will have the value 50 but it's at a different location in memory

70
00:05:01.930 --> 00:05:04.160
than the actual Since the copy was made.

71
00:05:05.230 --> 00:05:11.700
I then display formal and Purab tests so fifty's displayed then I assign 100 to formal and display it

72
00:05:11.710 --> 00:05:12.380
again.

73
00:05:12.400 --> 00:05:14.620
So you see 100 is displayed.

74
00:05:14.770 --> 00:05:20.620
Now the function is done and we return back to Main and we print actual actual will still be 50 it was

75
00:05:20.620 --> 00:05:24.970
never changed because Purab test was working with a copy all along.

76
00:05:25.300 --> 00:05:30.310
It's very important to understand the concept of pass by value since it's critical to understanding

77
00:05:30.310 --> 00:05:31.800
functions.

78
00:05:31.810 --> 00:05:33.930
Let's talk about the function returns statement.

79
00:05:33.940 --> 00:05:42.050
Next as we've already seen if a function is defined as returning a value of a specific type then the

80
00:05:42.050 --> 00:05:45.290
function must return a value of that type using a return statement.

81
00:05:46.170 --> 00:05:50.880
We've already seen a few examples of this and we've been doing in the main function all along.

82
00:05:51.240 --> 00:05:56.110
If the function return type is void then the return statement is optional.

83
00:05:56.220 --> 00:06:01.200
A return statement can occur anywhere in the function body but you usually see it as the last statement

84
00:06:01.200 --> 00:06:02.590
in the function body.

85
00:06:02.670 --> 00:06:05.730
The return statement immediately terminates the function.

86
00:06:06.150 --> 00:06:11.320
It's possible to have multiple return statements in a function depending on the logic in your code.

87
00:06:11.520 --> 00:06:13.560
However this is not a best practice.

88
00:06:13.560 --> 00:06:16.460
You typically want a single return statement.

89
00:06:16.530 --> 00:06:21.660
Remember having multiple break statements in a loop and the potential problems you could have with readability.

90
00:06:21.840 --> 00:06:26.070
While the same is true with multiple return statements and functions.

91
00:06:26.070 --> 00:06:31.230
Finally if the function returns a value then this value becomes the result of the code that's called

92
00:06:31.230 --> 00:06:32.160
the function.

93
00:06:32.460 --> 00:06:33.820
Let's head over to the idea.

94
00:06:33.820 --> 00:06:37.820
See some examples of parameter passing and pass by value.

95
00:06:38.670 --> 00:06:43.410
OK I mean the ID and I mean the section 11 workspace in the function parameters.

96
00:06:43.410 --> 00:06:50.410
Project in this example what I'd like to do is go over some simple function calls that passing parameters

97
00:06:50.680 --> 00:06:51.780
by value.

98
00:06:52.180 --> 00:06:58.510
And I want to make the point and hopefully you'll understand that those by value parameters do not change.

99
00:06:58.520 --> 00:07:00.370
That's really important to understand.

100
00:07:00.520 --> 00:07:03.270
So I've got four function prototypes here.

101
00:07:03.310 --> 00:07:05.590
The first one is called passed by value 1.

102
00:07:05.680 --> 00:07:09.840
The second is called passed by value 2 and the first one expects an integer.

103
00:07:09.840 --> 00:07:13.270
The second one expects a C++ string object.

104
00:07:13.450 --> 00:07:20.500
The pass by value three function expects a vector of string objects and the last one print vector just

105
00:07:20.500 --> 00:07:25.300
prints out a vector so if you send it a vector of strings it displays all the strings in the vector.

106
00:07:25.480 --> 00:07:26.590
OK so let's look at it.

107
00:07:26.590 --> 00:07:28.780
The first one passed by value 1.

108
00:07:28.840 --> 00:07:32.560
It expects a number and a parameter name for that number is Nahm.

109
00:07:32.560 --> 00:07:36.160
That's the formal parameter and all I'm doing is changing them to 1000.

110
00:07:36.160 --> 00:07:37.310
Really really simple.

111
00:07:37.480 --> 00:07:39.610
So let's look at my main in my main.

112
00:07:39.610 --> 00:07:46.550
I've got numb which is 10 and I'm simply saying numb before calling bout pass by value 1 is.

113
00:07:46.600 --> 00:07:48.090
Hopefully that a print out of 10 right.

114
00:07:48.100 --> 00:07:52.070
That's what we expect then I'm going to call pass by value and I'm going to pass into it.

115
00:07:52.070 --> 00:07:59.860
Numb which is 10 Remember pass by value 1 changes that value to 1000 and then come back and I print

116
00:07:59.860 --> 00:08:01.840
out that number again.

117
00:08:01.840 --> 00:08:05.110
Now you may think that we're going to get a thousand here but we're not.

118
00:08:05.140 --> 00:08:09.130
It's passed by value so we actually passed in a copy to that function.

119
00:08:09.220 --> 00:08:12.360
So the function was changing the copy not the actual.

120
00:08:12.430 --> 00:08:13.930
Which is this numb here.

121
00:08:14.020 --> 00:08:17.310
So let me run this and then I'll walk you through exactly what's going on.

122
00:08:17.350 --> 00:08:21.850
You could see here before calling ten numb after calling still 10.

123
00:08:21.970 --> 00:08:24.280
OK so let's let's talk about that.

124
00:08:24.330 --> 00:08:27.560
Remember numb is equal to 10 and it's in my main.

125
00:08:27.610 --> 00:08:35.470
So in this case here's my main function and it's got a local variable in there called name and we initialized

126
00:08:35.470 --> 00:08:36.490
it to 10.

127
00:08:36.670 --> 00:08:38.570
Then we call this function right here.

128
00:08:38.830 --> 00:08:44.360
So this will be passed by value 1 and I'll just call it one.

129
00:08:44.500 --> 00:08:46.750
OK just to save some some writing time.

130
00:08:46.750 --> 00:08:51.200
So that's passed by a by value one and it expects an integer number.

131
00:08:51.220 --> 00:08:53.170
So it's got its own copy of none.

132
00:08:53.170 --> 00:08:59.350
That's the formal parameter and at this point the 10 gets copied over to numb.

133
00:08:59.610 --> 00:09:03.040
OK now I'm going to set Nahm 2000.

134
00:09:03.170 --> 00:09:07.220
Remember this number right here refers to that guy.

135
00:09:07.220 --> 00:09:08.620
Not this one.

136
00:09:09.200 --> 00:09:12.820
So I'm changing the local number the formal parameter to 1000.

137
00:09:12.830 --> 00:09:15.330
I'm just changing this one two thousand.

138
00:09:15.380 --> 00:09:17.450
I never touched this one.

139
00:09:17.450 --> 00:09:21.440
Now this function is finished so this function is now finished.

140
00:09:21.440 --> 00:09:24.210
This is gone and I'll talk about what gone means.

141
00:09:24.350 --> 00:09:28.430
In a couple of it is when I talk about activation records in the stack.

142
00:09:28.430 --> 00:09:28.880
That's it.

143
00:09:28.880 --> 00:09:33.050
Now we return and in the main we display no one never changed.

144
00:09:33.050 --> 00:09:40.400
Remember this was an absolute copy of it and so hopefully that makes sense would pass by value.

145
00:09:40.640 --> 00:09:42.290
Let me show you another example.

146
00:09:42.440 --> 00:09:46.740
Here we've got another num which is 20.

147
00:09:46.790 --> 00:09:53.050
So don't get confused with the names I could use any name I want in that formal parameter I just chose

148
00:09:53.060 --> 00:09:54.600
numb to make a point.

149
00:09:54.650 --> 00:09:56.420
In this case it's another name.

150
00:09:56.510 --> 00:10:01.370
So when we pass when we print here we're going to print to 20 then we're going to call pass by value

151
00:10:01.370 --> 00:10:05.700
1 again and pass in that name so the 20 gets copied to the formal parameter.

152
00:10:05.720 --> 00:10:07.180
We change it to 1000.

153
00:10:07.220 --> 00:10:13.190
Again we change that local copy and when we come back we still have a 20 right we never touched the

154
00:10:13.190 --> 00:10:14.060
actual.

155
00:10:14.060 --> 00:10:15.870
So let me run this.

156
00:10:16.070 --> 00:10:20.250
And now we're going to see 10 10 and 20 20 just what we expect.

157
00:10:20.390 --> 00:10:22.420
It's no different when you use objects.

158
00:10:22.460 --> 00:10:30.230
In this case all uncomment that code in this case you can see that I've got a string of C++ string object

159
00:10:30.230 --> 00:10:36.890
called name and I've initialized it to Frank and then before I call pass by value to I'm going to display

160
00:10:36.890 --> 00:10:38.820
it that's going to display Frank.

161
00:10:39.140 --> 00:10:45.170
Then I'm going to pass that string object into pass by value too which is another function and that

162
00:10:45.170 --> 00:10:46.870
function is right here.

163
00:10:46.970 --> 00:10:52.250
It's going to change its parameter to changed whatever was there before is now changed.

164
00:10:52.250 --> 00:10:59.960
And then when I come back I'm printing out name again name has not changed because that changed here

165
00:11:00.260 --> 00:11:01.750
changed a copy.

166
00:11:01.980 --> 00:11:04.480
OK so let's walk through this one again.

167
00:11:04.700 --> 00:11:05.410
So what do we have.

168
00:11:05.420 --> 00:11:14.190
We have main We've got the main function and it's got a variable called name and it's Frank

169
00:11:17.270 --> 00:11:17.850
OK.

170
00:11:18.030 --> 00:11:21.160
Then we called pass by value 2.

171
00:11:21.590 --> 00:11:28.310
So this would be passed by value to and it has a parameter write a formal parameter which is a variable.

172
00:11:28.310 --> 00:11:38.190
It's called S and we copied Frank in there so right now this becomes Frank now we say s is changed.

173
00:11:38.260 --> 00:11:43.000
So we get rid of Frank and we replaced it with changed.

174
00:11:43.120 --> 00:11:46.620
And again these are all strings string objects.

175
00:11:46.630 --> 00:11:48.490
Now we return back to Maine.

176
00:11:48.520 --> 00:11:50.860
This function is now done.

177
00:11:51.190 --> 00:11:54.550
I never changed the name because I never even knew about it.

178
00:11:54.550 --> 00:11:57.320
I was working with a local copy all along.

179
00:11:57.850 --> 00:12:00.610
OK so same thing with integers as with objects.

180
00:12:00.640 --> 00:12:08.300
So in this case if I run this program you can see the name before calling pass by value to as frank

181
00:12:08.720 --> 00:12:09.160
and that name.

182
00:12:09.170 --> 00:12:12.930
After calling pass by value to his frank again it hasn't changed.

183
00:12:13.340 --> 00:12:15.370
Let's do one more just to drive this point home.

184
00:12:15.370 --> 00:12:19.830
This is really important that you understand what's going on here in this example.

185
00:12:19.850 --> 00:12:21.930
I'm using a vector of string objects.

186
00:12:21.930 --> 00:12:23.810
I don't think we've used a vector of string objects.

187
00:12:23.810 --> 00:12:26.850
We basically use I think vectors of integers and doubles.

188
00:12:26.900 --> 00:12:28.520
We can have a vector of anything.

189
00:12:28.520 --> 00:12:35.990
So here we're saying that Stooges is a vector of strings and the strings in that vector are Larry Moe

190
00:12:35.990 --> 00:12:36.840
and Curly.

191
00:12:37.190 --> 00:12:43.880
So I'm printing out Stooges before calling pass by value 3 and I'm calling this method this function

192
00:12:43.880 --> 00:12:49.020
called Prit vector that just prints out those strings in that fact or whatever they happen to be that

193
00:12:49.070 --> 00:12:54.360
I'm calling pass by value 3 and I'm passing and stooges and then I'm just printing it out again.

194
00:12:54.590 --> 00:12:59.990
OK so let me run this first and then we'll walk through it so you can see that before calling the function.

195
00:13:00.020 --> 00:13:05.000
Larry Moe and Curly after calling that should say after right there after calling the function Larry

196
00:13:05.000 --> 00:13:06.010
Moe and Curly.

197
00:13:06.370 --> 00:13:07.770
Yes let me change that.

198
00:13:07.790 --> 00:13:08.540
Make that correct.

199
00:13:08.540 --> 00:13:12.030
That way when you guys see it in the resources you know what I'm talking about.

200
00:13:12.110 --> 00:13:13.180
So let me run that again.

201
00:13:14.970 --> 00:13:19.370
OK so before calling Larry Moe Curly after calling Larry Moe Curly.

202
00:13:19.440 --> 00:13:21.710
So let's walk through this example.

203
00:13:21.720 --> 00:13:25.560
Here is the function pass by value 3.

204
00:13:25.680 --> 00:13:27.230
So in this case what have I got.

205
00:13:27.240 --> 00:13:35.780
Well I've got my main and my main has the Stooges variable which is a vector of strings.

206
00:13:35.800 --> 00:13:40.570
In this case it's Larry Moe and Curly.

207
00:13:41.350 --> 00:13:45.290
And these are all string objects.

208
00:13:45.420 --> 00:13:51.890
Right now I call this function right here and I pass in stooges to it.

209
00:13:52.020 --> 00:13:59.670
So this is passed by value 3 and it has that form a prouder V that could be any name we want.

210
00:14:01.020 --> 00:14:11.240
Right now Larry Moe and Curly get copied into V so this will be Larry Moe and Curly.

211
00:14:11.590 --> 00:14:17.610
Now I execute this line right here VIDOT clear that deletes these guys so now V is empty.

212
00:14:18.910 --> 00:14:19.420
And that's it.

213
00:14:19.420 --> 00:14:20.760
Then I returned back to main.

214
00:14:20.770 --> 00:14:24.060
What happens this function is now gone.

215
00:14:24.820 --> 00:14:29.280
And when I come back to Main it still has that Stooges vector Larry Moe and Curly.

216
00:14:29.410 --> 00:14:35.810
I never touched it because again I was working with a copy in the next few videos were learned how to

217
00:14:35.810 --> 00:14:40.240
send information in so that I can modify the actual parameters.

218
00:14:40.370 --> 00:14:44.660
But it's important to understand that by default this is the behavior passed by value.

219
00:14:44.690 --> 00:14:46.010
Make a copy.

220
00:14:46.130 --> 00:14:51.410
OK so hopefully that that makes sense and if there are any questions please post them on the course

221
00:14:51.410 --> 00:14:52.170
forums.
