1
00:00:05,340 --> 00:00:09,970
In this section of the Course will learn about overloading operators in C++.

2
00:00:10,290 --> 00:00:16,650
C++ allows the programmer to overload most operators to work with user defined classes.

3
00:00:16,680 --> 00:00:21,780
This is intended to make code more readable and ridable by allowing the use of familiar operators in

4
00:00:21,780 --> 00:00:22,810
a familiar manner.

5
00:00:22,860 --> 00:00:28,650
But with our own classes and objects First we'll look at exactly what operator overloading is and some

6
00:00:28,650 --> 00:00:31,500
of the basic rules that C++ enforces.

7
00:00:31,650 --> 00:00:36,950
We'll start with the assignment operator the assignment operator is a very important operator and C++.

8
00:00:37,020 --> 00:00:41,440
It defines the semantics of what happens when you assign one object to another.

9
00:00:41,520 --> 00:00:47,370
C++ provides a default way of doing object assignment much as it did with the copy constructor that

10
00:00:47,370 --> 00:00:49,250
we learned about in the last section.

11
00:00:49,290 --> 00:00:54,210
However many times we want to be in control of what happens during an object assignment and we can overload

12
00:00:54,210 --> 00:00:57,000
the assignment operator to do exactly that.

13
00:00:57,030 --> 00:01:02,250
For example when we use raw pointers in our classes we must provide our own version of the assignment

14
00:01:02,250 --> 00:01:03,230
operator.

15
00:01:03,240 --> 00:01:08,490
Additionally we can override the assignment operator to handle both copy and move semantics as we did

16
00:01:08,490 --> 00:01:11,540
with the copy and move constructors in the last section.

17
00:01:11,580 --> 00:01:13,890
We'll learn how to do that in this section.

18
00:01:13,890 --> 00:01:19,380
We'll also see how we can overload other operators as both member functions and as global functions

19
00:01:19,560 --> 00:01:21,980
in a way we want to choose one over the other.

20
00:01:22,110 --> 00:01:26,970
We'll finish up this section by overloading the stream insertion and extraction operators so that we

21
00:01:26,970 --> 00:01:32,430
can easily use our objects with C++ streams just like we've been doing with the built in types.

22
00:01:32,430 --> 00:01:34,540
So let's get started with operator overloading.
