WEBVTT
1
00:00:05.330 --> 00:00:09.850
This video we'll learn about static class members and how to use them in C++.

2
00:00:10.740 --> 00:00:17.460
In a C++ class we can have both static data and function members when we declare class data members

3
00:00:17.460 --> 00:00:18.360
is static.

4
00:00:18.360 --> 00:00:24.810
We're telling the C++ compiler that these data members belong to the class not to any specific object.

5
00:00:24.810 --> 00:00:28.700
So they're extremely useful to create class wide information.

6
00:00:28.710 --> 00:00:33.960
For example suppose we wanted to know how many player objects we have active in our application at any

7
00:00:33.960 --> 00:00:35.200
point in time.

8
00:00:35.460 --> 00:00:40.380
We could create a global variable and then incremented decremented in the code whenever we create an

9
00:00:40.380 --> 00:00:42.300
object or delete an object.

10
00:00:42.300 --> 00:00:46.080
This is really hard to do though since we really can't be sure when constructors are called and when

11
00:00:46.090 --> 00:00:47.610
destructors are being called.

12
00:00:47.640 --> 00:00:50.520
So a better solution is to create a static variable.

13
00:00:50.640 --> 00:00:52.420
That's part of the player class.

14
00:00:52.650 --> 00:00:57.420
And then we can manipulate that variable directly within the player class and then whenever we need

15
00:00:57.420 --> 00:01:01.950
to know how many player objects there are we can simply ask the player class.

16
00:01:02.100 --> 00:01:03.600
We don't even need any objects.

17
00:01:03.600 --> 00:01:05.740
In fact if the player count is zero.

18
00:01:05.850 --> 00:01:08.640
This means that there are no active player objects at all.

19
00:01:09.760 --> 00:01:13.300
So how could we modify our player class to support this.

20
00:01:13.300 --> 00:01:18.920
Let's start with the player class will create a player that h file with the class specification in a

21
00:01:18.970 --> 00:01:21.940
player's GPP file with the class definition.

22
00:01:21.940 --> 00:01:24.670
Now we need to add a static data member to the class.

23
00:01:24.670 --> 00:01:31.180
We can do this very easily by adding a private static int named non-players will initialize this to

24
00:01:31.180 --> 00:01:34.420
zero a little bit later since we can't initialize it right here.

25
00:01:35.430 --> 00:01:39.890
We also would need to declare a static class function that returns an integer.

26
00:01:40.050 --> 00:01:42.720
It will return the static integer We just declared.

27
00:01:42.720 --> 00:01:47.910
And you can see that at the bottom it is called Get non-players.

28
00:01:47.910 --> 00:01:53.640
Now let's head over to Player C P P This is where we want to initialize the static integer non-players

29
00:01:53.640 --> 00:01:54.900
to 0.

30
00:01:54.900 --> 00:01:57.760
Notice that the syntax might look a little strange.

31
00:01:57.900 --> 00:02:03.210
This is where you define that variable and assign it to zero in this case dismiss happened exactly once

32
00:02:03.300 --> 00:02:08.360
and it typically happens in the data file for the class.

33
00:02:08.530 --> 00:02:11.680
Finally we implement the static function get non-players.

34
00:02:11.800 --> 00:02:16.540
Since this function is static it only has access to static data members.

35
00:02:16.540 --> 00:02:20.080
It does not have access to non-static class data members.

36
00:02:20.080 --> 00:02:22.800
So in this function we simply return non-players.

37
00:02:22.960 --> 00:02:24.240
Pretty easy.

38
00:02:24.340 --> 00:02:26.090
There's only one part left to do.

39
00:02:26.200 --> 00:02:32.030
We need to increment and decrement the number of players whenever we create and destroy objects.

40
00:02:32.040 --> 00:02:35.760
The best place to increment the player count is in the constructor.

41
00:02:35.760 --> 00:02:39.030
In this case we simply increment non-players by 1.

42
00:02:39.030 --> 00:02:42.020
Be careful though if you have many overloaded constructors.

43
00:02:42.120 --> 00:02:45.370
Since you might have to increment non-players in more than one place.

44
00:02:45.570 --> 00:02:49.790
Basically anywhere you create an object will only have one constructor in the player class.

45
00:02:49.830 --> 00:02:52.610
And we're delegating to it from our copy constructor.

46
00:02:52.680 --> 00:02:58.970
So this is the only place we want to increment non-players in this example our original player class

47
00:02:58.970 --> 00:03:00.500
didn't have a destructor.

48
00:03:00.590 --> 00:03:04.820
It used the compiler provided default destructor since it was all we needed.

49
00:03:04.820 --> 00:03:09.290
However now we need to define our own destructor and decrement the number of players count when the

50
00:03:09.290 --> 00:03:11.400
object is destroyed.

51
00:03:11.900 --> 00:03:12.490
That's it.

52
00:03:12.500 --> 00:03:13.440
We're all set.

53
00:03:13.460 --> 00:03:17.990
Now we can use our player class and simply call player getting some players and it will return the number

54
00:03:17.990 --> 00:03:20.100
of active player objects.

55
00:03:20.120 --> 00:03:25.190
I created a simple helper function named display active players and any time I need to display the number

56
00:03:25.190 --> 00:03:27.690
of active players I simply call it.

57
00:03:27.770 --> 00:03:28.790
Now look at the main.

58
00:03:28.880 --> 00:03:34.580
The first statement is display active players and it will display 0 as we add and remove player objects

59
00:03:34.580 --> 00:03:39.240
will display active players and it will display the current number of active player objects.

60
00:03:39.590 --> 00:03:44.570
Let's head over to the IDM will take the existing player class through the process of providing this

61
00:03:44.600 --> 00:03:46.730
behavior.

62
00:03:46.950 --> 00:03:54.010
OK so the idea and I'm in the section 13 workspace in the static class members project and what I've

63
00:03:54.010 --> 00:03:59.980
done is I've created the basic player class and you can see here I've got three files players on H played

64
00:03:59.980 --> 00:04:06.100
on CBP and maned CBP and right now we're looking at player daat H you can see we've got our include

65
00:04:06.100 --> 00:04:11.860
guard here were included stream because we're using strings inside the player class and it's a basic

66
00:04:11.860 --> 00:04:13.510
player class that we've been using all along.

67
00:04:13.510 --> 00:04:21.490
It's got the string name the integer healthy integer XP and we've got a getter here and some constructor

68
00:04:21.490 --> 00:04:27.140
that uses default parameters a copy constructor and a structure that does nothing right now.

69
00:04:27.340 --> 00:04:35.110
And the C.P. file implements the constructor the copy constructor and it's got a an empty destructor

70
00:04:35.110 --> 00:04:36.220
right now.

71
00:04:36.220 --> 00:04:40.420
So what we want to do is we want to go to the player that h file and what we want to do as I said in

72
00:04:40.420 --> 00:04:47.380
the previous slides is to know how many players are active at any time so we need a counter type variable

73
00:04:47.920 --> 00:04:52.090
we could add that to objects because then each object would have their own copy.

74
00:04:52.150 --> 00:04:57.940
So we want to use static variable at the class level so that we now have a variable that applies to

75
00:04:57.940 --> 00:04:59.370
the inclined class.

76
00:04:59.380 --> 00:05:01.750
So we'll define that right here we'll make it private.

77
00:05:01.750 --> 00:05:07.450
And once you say static and then we'll call it non-players.

78
00:05:07.450 --> 00:05:08.550
Simple as that.

79
00:05:08.560 --> 00:05:12.290
Now you think that you could initialize it right here.

80
00:05:12.460 --> 00:05:17.830
But if you try that and try to compile it or get a compiler error that says that C++ forbids in class

81
00:05:17.830 --> 00:05:21.840
initialization of nonconstant members and you can't do that.

82
00:05:21.850 --> 00:05:25.040
So we'll get rid of that and initialize it in a second.

83
00:05:25.060 --> 00:05:26.500
In the cpp file.

84
00:05:26.530 --> 00:05:32.620
So that's my static variable that member and now this does not belong to any object.

85
00:05:32.620 --> 00:05:39.430
This belongs to the class and then we need to implement a static class function and we'll do that down

86
00:05:39.430 --> 00:05:42.050
here and we'll just call it static.

87
00:05:42.190 --> 00:05:48.220
It's going to return an int and it's going to be called Get non-players.

88
00:05:48.760 --> 00:05:49.870
Simple as that.

89
00:05:49.870 --> 00:05:54.220
Now one thing to remember because this function is static.

90
00:05:54.220 --> 00:05:56.990
It only has access to static variables.

91
00:05:57.160 --> 00:05:58.460
That makes sense.

92
00:05:58.660 --> 00:06:04.480
It doesn't have access to any object variables any of these guys name Health Expwy those belong to specific

93
00:06:04.540 --> 00:06:07.300
objects static only belongs to the class.

94
00:06:07.300 --> 00:06:11.560
This is a class function and it only has access to that static non-players.

95
00:06:11.560 --> 00:06:16.030
In this example we could have a lot of other static functions if we like but we they need the one in

96
00:06:16.030 --> 00:06:17.170
this example.

97
00:06:17.170 --> 00:06:23.820
So that takes care of the header file save that you now we'll go over to the TPP file.

98
00:06:23.830 --> 00:06:28.210
Now this first thing we want to do is we want to initialize that static variable here.

99
00:06:28.450 --> 00:06:30.350
And the syntax looks something like this.

100
00:06:30.370 --> 00:06:35.310
It the class name and the name of the variable name players.

101
00:06:35.320 --> 00:06:37.960
And here we can initialize it to zero.

102
00:06:39.190 --> 00:06:42.830
And now you can see that if I compile and run now I get a clean run from that.

103
00:06:43.150 --> 00:06:45.210
So that's initialize it only happens once.

104
00:06:45.250 --> 00:06:50.010
And the best place to do that is in the CTP file for the class that you're defining.

105
00:06:50.230 --> 00:06:51.070
OK.

106
00:06:51.070 --> 00:06:55.150
And then the last thing we'll do is well not the last thing but do the next thing we'll do is we'll

107
00:06:55.150 --> 00:07:04.500
implement the end player get non-players function and it's we do that again.

108
00:07:04.550 --> 00:07:11.710
Get non-players it's that function right here and we're going to implement that function so that it

109
00:07:11.770 --> 00:07:17.890
returns the number of players it has access to that it's a static variable.

110
00:07:17.890 --> 00:07:19.750
And that's really all we care about.

111
00:07:19.790 --> 00:07:25.620
Now remember we already defined that as a static method right here in player can see it's right here.

112
00:07:25.720 --> 00:07:28.280
So we don't have to say static again down here.

113
00:07:29.540 --> 00:07:30.460
That's it.

114
00:07:30.530 --> 00:07:31.710
Now what do we need to do.

115
00:07:31.730 --> 00:07:37.550
Well we need to increment and decrement the number of players depending on when we construct or destruct

116
00:07:37.550 --> 00:07:38.320
things.

117
00:07:38.330 --> 00:07:43.610
So this is the only constructor I have even when we've got a copy constructor that we create a copy

118
00:07:43.610 --> 00:07:44.110
of an object.

119
00:07:44.120 --> 00:07:45.960
We're still delegated to a player.

120
00:07:46.160 --> 00:07:50.640
So right here I want to increment the number of players.

121
00:07:53.650 --> 00:08:01.210
And in the destructor I want to decrement the number of players so that will take care of the semantics

122
00:08:01.210 --> 00:08:02.550
that I want.

123
00:08:02.560 --> 00:08:09.960
So at that point this class is done and we can now head over to the main class and test some of this.

124
00:08:09.970 --> 00:08:15.010
So the first thing we do in the main classes we're right a real simple function and we'll just keep

125
00:08:15.010 --> 00:08:18.790
calling that function and wherever we want to display active players it would just save us a lot of

126
00:08:18.790 --> 00:08:19.460
typing.

127
00:08:19.510 --> 00:08:22.390
So we'll call it void display.

128
00:08:24.710 --> 00:08:26.150
Active players

129
00:08:28.970 --> 00:08:33.800
doesn't expect anything and all we're going to do in here is we're just going to do an output statement

130
00:08:34.280 --> 00:08:38.990
and we'll say something like active players colon.

131
00:08:39.230 --> 00:08:44.820
And so now how do I know how many active players there are I don't have any objects to call.

132
00:08:44.840 --> 00:08:45.880
That's the whole point.

133
00:08:45.920 --> 00:08:51.660
I can simply say player and we need a scope resolution operator and then we can call the static method

134
00:08:52.100 --> 00:08:53.930
get non-players right here.

135
00:08:54.320 --> 00:08:59.330
That's going to return the integer that represents that static data member that we had in the class

136
00:08:59.930 --> 00:09:02.230
and we'll just supply an inline here.

137
00:09:02.270 --> 00:09:08.270
OK so now let's go to Maine and let's call that method which is called display active players.

138
00:09:15.480 --> 00:09:16.150
All right.

139
00:09:16.320 --> 00:09:20.990
We'll put a breakpoint in here so that we can walk through this.

140
00:09:21.240 --> 00:09:29.380
And let's run this and we have an error display active players who can't find it players.

141
00:09:29.380 --> 00:09:34.210
I spelled it wrong and Essop here and now we should be good to go.

142
00:09:34.240 --> 00:09:40.070
So let's step through it through the debugger and move this output window here over to the right again.

143
00:09:41.800 --> 00:09:43.520
And so what would we expect here.

144
00:09:43.690 --> 00:09:47.560
Well we're going to call display active players and display active players is simply going to be asked

145
00:09:47.560 --> 00:09:50.000
the player class to get the number of players at this point.

146
00:09:50.110 --> 00:09:51.410
We have none.

147
00:09:51.430 --> 00:09:54.660
There's no way we could have done this if we had an object right.

148
00:09:54.820 --> 00:09:55.930
Because there are no objects.

149
00:09:55.930 --> 00:10:00.760
So in this case we're calling player and asking the player class to give us the number of players and

150
00:10:00.750 --> 00:10:03.550
we expect this to display zero when we walk through it.

151
00:10:03.550 --> 00:10:05.300
We get active players zero.

152
00:10:05.320 --> 00:10:07.270
Just exactly what we expect.

153
00:10:07.360 --> 00:10:16.700
Now let's create an object and let's create a player and we'll just call it Hero and we'll give it the

154
00:10:16.710 --> 00:10:23.610
name here and we'll default everything else and then we'll call display active players again.

155
00:10:26.240 --> 00:10:31.930
So at this point we have one active player so let's debug this we'll step through it again.

156
00:10:36.720 --> 00:10:39.110
And right now again we're displaying active players.

157
00:10:39.150 --> 00:10:40.640
We're going to get back to zero.

158
00:10:40.650 --> 00:10:42.540
I'm going to create my player object.

159
00:10:42.540 --> 00:10:43.140
It exists.

160
00:10:43.140 --> 00:10:44.760
You can see it right here.

161
00:10:44.790 --> 00:10:50.220
So we expect that we've got the number players is one and if you look right here then you are a local

162
00:10:50.220 --> 00:10:50.970
variables pain.

163
00:10:50.970 --> 00:10:56.430
You can see that we've got that non-players static variable right here and we have access to it here

164
00:10:56.430 --> 00:10:58.160
so it's nice because you can actually see it.

165
00:10:58.290 --> 00:10:59.910
So at this point we run it.

166
00:10:59.910 --> 00:11:04.250
We get back to the one which is exactly what we expect since we do have one object.

167
00:11:04.350 --> 00:11:06.830
OK so let's let's do another example here.

168
00:11:06.990 --> 00:11:13.780
Let's create a local block here and we'll create another player and we'll call that player Frank.

169
00:11:14.400 --> 00:11:16.020
And again we defaulted to Frank

170
00:11:19.360 --> 00:11:22.410
and then will display active players right in here.

171
00:11:24.260 --> 00:11:26.290
Nimble will display it again when we leave the block.

172
00:11:26.300 --> 00:11:33.890
Now what we expect to happen here is we expect that this Frank object will be created in his local block

173
00:11:34.820 --> 00:11:35.630
will display.

174
00:11:35.630 --> 00:11:38.780
Now we will have to Optix right will display two objects.

175
00:11:38.960 --> 00:11:41.320
Then it's going to go out of scope and be destroyed.

176
00:11:41.330 --> 00:11:44.150
So when we get back to here I tend to display one less again.

177
00:11:44.150 --> 00:11:46.120
So let's do that one more time.

178
00:11:46.160 --> 00:11:49.950
We'll run through the debugger it will step through this one line at a time.

179
00:11:51.320 --> 00:11:56.090
Here we go display active players we expect they'll expand this year we expect it to display zero which

180
00:11:56.090 --> 00:11:56.810
it does.

181
00:11:56.840 --> 00:12:00.080
I just created the hero and I want to display the active players.

182
00:12:00.080 --> 00:12:06.550
I have one now I'm here I'm creating Frank and I'm displaying active players.

183
00:12:06.620 --> 00:12:13.190
I've got two and obviously I can refresh over here and I can see in both places that I've got two players

184
00:12:13.430 --> 00:12:17.060
that's that static data member right there.

185
00:12:17.250 --> 00:12:22.200
Now we expect Frank to go out of scope so the destructor will be called right.

186
00:12:22.240 --> 00:12:23.010
Just got called.

187
00:12:23.010 --> 00:12:31.920
So if we refresh now we've got to zero and we're back down to 1 and we display back down to 1 eventually

188
00:12:31.920 --> 00:12:36.080
will destroy hero again as well and we'll get down to zero.

189
00:12:36.210 --> 00:12:40.860
Let's do just one more little piece of code here and what we'll do is we'll do it right here at the

190
00:12:40.860 --> 00:12:41.690
bottom.

191
00:12:41.910 --> 00:12:50.670
Again we'll say player will create an enemy which is a pointer to a player that will create a new enemy

192
00:12:52.560 --> 00:12:57.010
and we'll just call him enemy and make them pretty strong.

193
00:13:00.760 --> 00:13:01.570
OK.

194
00:13:02.050 --> 00:13:05.940
And right now what we'll do is we'll display active players

195
00:13:15.050 --> 00:13:20.570
and then we'll delete enemy and it will display the active players one more time.

196
00:13:22.710 --> 00:13:23.230
OK.

197
00:13:23.250 --> 00:13:25.230
So let's walk through this one last time

198
00:13:29.120 --> 00:13:34.370
and you can see how useful using the static data members is some displaying active players.

199
00:13:34.510 --> 00:13:40.400
I get back at 0 I create player display to players again I get back to 1 which is what I expect I create.

200
00:13:40.400 --> 00:13:44.690
Frank So that gives me two objects and when I display them I get the two.

201
00:13:44.690 --> 00:13:46.220
Frank just got destroyed.

202
00:13:46.250 --> 00:13:48.810
So I'm going to display one again.

203
00:13:48.860 --> 00:13:55.890
Now here I'm going to create that enemy object on the heap since it's a dynamic allocation and I display

204
00:13:55.960 --> 00:13:56.440
active.

205
00:13:56.450 --> 00:14:01.770
I've got to again I'm going to delete enemy back down to 1.

206
00:14:02.000 --> 00:14:05.560
And at this point the hero will be the leader not back to zero.

207
00:14:05.570 --> 00:14:11.240
OK so there you go there's a simple example that's using the multiple files here to declare some static

208
00:14:11.240 --> 00:14:14.090
data members a static class function.

209
00:14:14.180 --> 00:14:18.860
And we've got a pretty useful little technique that's used a lot.

210
00:14:18.920 --> 00:14:23.000
Sometimes you really need to know how many of your objects are out there and this is really easy way

211
00:14:23.000 --> 00:14:23.520
to do it.
