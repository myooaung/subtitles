WEBVTT
1
00:00:06.820 --> 00:00:13.150
In this video we'll see how we can use base class references and dynamic polymorphism in addition to

2
00:00:13.150 --> 00:00:14.600
base class pointers.

3
00:00:14.650 --> 00:00:19.360
We can also use base class references and have polymorphic function calls.

4
00:00:19.360 --> 00:00:24.850
This is very useful when we pass objects to functions by reference and the functions expect a reference

5
00:00:24.850 --> 00:00:27.530
to a base class object.

6
00:00:27.860 --> 00:00:33.500
First let's see how we can use references directly and achieve dynamic binding or virtual methods.

7
00:00:33.520 --> 00:00:37.480
We use the same account class hierarchy that we use throughout this section.

8
00:00:37.480 --> 00:00:39.740
So let's create an account object A.

9
00:00:40.060 --> 00:00:45.070
And then we'll create a reference ref that's a reference to an account that's the base class reference

10
00:00:45.310 --> 00:00:47.200
and we initialize ref today.

11
00:00:47.410 --> 00:00:53.030
Now if we call the withdraw method using the ref reference we're calling the account withdraw method

12
00:00:53.320 --> 00:00:55.840
but the binding is dynamic.

13
00:00:55.840 --> 00:00:58.280
Let's see another example with a trust account.

14
00:00:58.360 --> 00:01:01.320
In the second example we create a trust object t.

15
00:01:01.660 --> 00:01:05.170
And then we'll create ref 1 as a reference to an account object.

16
00:01:05.320 --> 00:01:10.200
That's the base class reference and we initialize ref 1 to T.

17
00:01:10.210 --> 00:01:15.790
Now if we call the withdraw method using the reference ref 1 we call the trust withdraw method.

18
00:01:15.790 --> 00:01:18.300
You can see that this method was bound dynamically.

19
00:01:18.580 --> 00:01:21.910
Let's see a more useful example.

20
00:01:21.910 --> 00:01:24.340
Suppose we have a method called do withdraw.

21
00:01:24.670 --> 00:01:27.330
And it expects a reference to an account object.

22
00:01:27.440 --> 00:01:29.870
Note this is our base class reference.

23
00:01:29.890 --> 00:01:36.130
It also expects a double with the amount to withdraw in the function body we call the withdraw method

24
00:01:36.340 --> 00:01:38.740
of whatever account object was passed in.

25
00:01:38.830 --> 00:01:41.260
And we also use the amount supplied.

26
00:01:41.320 --> 00:01:43.690
So let's call this method with a few objects.

27
00:01:43.690 --> 00:01:51.280
First we create an account object A and we pass a and 1000 to do withdraw in the body of the do withdraw

28
00:01:51.280 --> 00:01:57.400
function we bind the withdrawal call to account withdraw dynamically.

29
00:01:57.400 --> 00:02:05.440
Now suppose we create a trust account object named T and we pass t and 1000 to do withdraw the withdraw

30
00:02:05.440 --> 00:02:11.860
method that will be called in to do withdraw method is the trust withdraw says we're binding it dynamically.

31
00:02:11.860 --> 00:02:17.110
You can see that function is expecting based class references allow us to think in the general again

32
00:02:17.320 --> 00:02:19.500
and not have to worry about details.

33
00:02:19.510 --> 00:02:23.680
So let's head over to the idea and try some base class references.

34
00:02:23.950 --> 00:02:30.610
So I'm in the IDM in the Section 16 workspace in the base class references project.

35
00:02:30.610 --> 00:02:33.370
And let's go through a couple of simple examples here.

36
00:02:33.370 --> 00:02:37.120
First of all this is similar to what I did on the slide here.

37
00:02:37.150 --> 00:02:40.320
Let's take a look at three these three lines of code right here.

38
00:02:40.330 --> 00:02:44.830
Here we're creating an account object A and we're using the same account hierarchy we've been using

39
00:02:44.830 --> 00:02:46.790
throughout this section.

40
00:02:46.930 --> 00:02:48.650
So that creates the account object.

41
00:02:48.700 --> 00:02:54.550
You know I've got a ref that's my variable name and it is a reference to an account that's my base class

42
00:02:54.550 --> 00:02:55.120
reference.

43
00:02:55.120 --> 00:02:58.070
And I was initializing it to a right here.

44
00:02:58.060 --> 00:03:03.410
So when I call ref withdrawal that's going to bind it dynamically.

45
00:03:03.630 --> 00:03:06.910
And in this case I happened to be referring to an account.

46
00:03:06.970 --> 00:03:09.550
So it will call a count withdraw.

47
00:03:10.150 --> 00:03:16.160
Now in this case here on line 50 and through 52 we've got a trust object now which is a little bit different.

48
00:03:16.180 --> 00:03:22.720
So ref 1 again is a reference to an account that's my base class reference and I'm initializing it to

49
00:03:22.720 --> 00:03:23.050
T.

50
00:03:23.050 --> 00:03:24.380
T is a trust account.

51
00:03:24.420 --> 00:03:26.160
So that's perfectly valid.

52
00:03:26.500 --> 00:03:33.130
In this case when I call ref ones withdraw what's going to happen is a method call will be bound dynamically

53
00:03:33.460 --> 00:03:38.510
because it will realize that ref 1 is currently referring to a trust account.

54
00:03:38.770 --> 00:03:42.960
So it will bind binded to trust withdraw because they're all virtual methods.

55
00:03:43.660 --> 00:03:44.150
OK.

56
00:03:44.230 --> 00:03:46.330
So that's pretty straightforward I think.

57
00:03:46.330 --> 00:03:51.820
Now let's take a look at this function call I've got to see post-poll function appear on 940.

58
00:03:51.890 --> 00:03:57.860
So when we did on the slides It's called do withdraw and it expects a reference to an account object.

59
00:03:57.880 --> 00:04:00.660
That's my base class reference right there.

60
00:04:00.670 --> 00:04:05.250
It also expects a double which is going to be passed in and then in the body of this function.

61
00:04:05.260 --> 00:04:08.010
I'm just calling a count and a withdraw.

62
00:04:08.320 --> 00:04:14.910
So the idea here is since the withdraw function is a virtual function this will be bound dynamically.

63
00:04:15.100 --> 00:04:19.870
And here's an example we're creating for accounts a one to a three and a four.

64
00:04:19.880 --> 00:04:24.340
There are all different types once that account one's a savings account checking account and trust account

65
00:04:24.400 --> 00:04:25.460
as you can see.

66
00:04:25.720 --> 00:04:30.820
And then I'm calling to withdraw and then passing in a one to three and a four.

67
00:04:30.820 --> 00:04:36.770
These methods will be bound dynamically and we'll see this behavior which is exactly what we expect.

68
00:04:36.940 --> 00:04:44.200
Now every compiler vendor is free to implement dynamic polymorphism using virtual functions however

69
00:04:44.200 --> 00:04:44.950
they wish.

70
00:04:44.950 --> 00:04:47.210
But most implementations are pretty similar.

71
00:04:47.230 --> 00:04:48.660
So let's take a look at this.

72
00:04:48.670 --> 00:04:54.720
Let's run the debugger and I put it a couple of break points already and what's important here we'll

73
00:04:54.780 --> 00:04:58.900
look at all these variables there is a lot of variables here are only interested in a couple.

74
00:04:58.900 --> 00:05:03.410
Now at this point we have ref and we have ref 1 and all my code already executed.

75
00:05:03.490 --> 00:05:09.820
But let's take a look at ref you can see ref right here and you can see that ref is referring to an

76
00:05:09.820 --> 00:05:10.570
account right.

77
00:05:10.570 --> 00:05:12.180
That's the whole idea.

78
00:05:12.190 --> 00:05:18.020
Now you also see this bunch of code in here and you see that VTR lets your virtual pointer.

79
00:05:18.040 --> 00:05:24.320
So this tells you that there is dynamic polymorphism going on but now take a look at ref 1.

80
00:05:24.460 --> 00:05:31.780
Here's ref 1 and if we expand ref 1 here you can see that ref 1 while it is a reference to a base class.

81
00:05:31.780 --> 00:05:36.460
It's actually referring to a trust account right now and you could see it right there.

82
00:05:36.660 --> 00:05:39.920
So you can see the trust account has the account part of it.

83
00:05:40.290 --> 00:05:43.340
So that's pretty cool that you can see all that information right in here.

84
00:05:43.420 --> 00:05:46.330
And it really gives you a good idea of what's going on.

85
00:05:46.330 --> 00:05:48.350
Now let's take a look at the do withdraw.

86
00:05:48.520 --> 00:05:50.080
We're right here on line 59.

87
00:05:50.090 --> 00:05:51.550
We're about to call do withdraw.

88
00:05:51.550 --> 00:05:57.730
We're about to pass that account a one in with a thousand someone to step through it and now I'm in

89
00:05:57.730 --> 00:05:58.730
the do withdraw.

90
00:05:58.960 --> 00:06:01.090
So let's take a look at what account is all about.

91
00:06:01.090 --> 00:06:05.410
In this case the account that was passed in is a reference to an account.

92
00:06:05.410 --> 00:06:07.980
Right of course it is a base class reference.

93
00:06:08.110 --> 00:06:13.540
But in this case when I expand it you can see that it's actually referring to an account object since

94
00:06:13.540 --> 00:06:14.840
it didn't expand out.

95
00:06:15.070 --> 00:06:19.780
Let's try it one more time and we'll do it with a two a two as a savings account.

96
00:06:19.780 --> 00:06:21.220
So I step through that.

97
00:06:21.530 --> 00:06:27.820
And now if we look at a account you can see that account while it is still a reference to the base class

98
00:06:28.360 --> 00:06:31.200
it is currently referring to a savings account.

99
00:06:31.600 --> 00:06:36.520
And you can see that the savings account has the account part within it.

100
00:06:36.520 --> 00:06:41.440
So when we execute this and I'll just step through it real quickly with you the last two.

101
00:06:41.650 --> 00:06:46.010
And when we see the output and here you can see the output.

102
00:06:46.360 --> 00:06:50.860
So we're doing a count withdraw trust withdrawing that we're saying account savings checking and trusts

103
00:06:50.860 --> 00:06:52.430
withdraw right down here.

104
00:06:52.450 --> 00:06:54.670
So it's exactly like we expect.

105
00:06:54.670 --> 00:06:59.530
So you can see that when you use a base class reference you still get the polymorphic behavior which

106
00:06:59.530 --> 00:07:06.610
is pretty cool and writing functions like these that expect references to base class objects is really

107
00:07:06.610 --> 00:07:07.480
handy to do.

108
00:07:07.600 --> 00:07:10.040
And it saves you from thinking in detail again.

109
00:07:10.060 --> 00:07:15.190
So I'm thinking here just I want to deposit that amount to whatever account was passed into me so I

110
00:07:15.190 --> 00:07:16.910
can think very very abstractly.
