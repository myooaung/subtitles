WEBVTT
1
00:00:05.450 --> 00:00:07.710
In this video we'll learn about the queue.

2
00:00:08.140 --> 00:00:13.410
The queue is a first in first out data structure like the stack.

3
00:00:13.420 --> 00:00:19.450
The queue is an adapter class because it's implemented in terms of already existing ACL containers.

4
00:00:20.540 --> 00:00:26.240
Since operations on the q happen on both ends the front and the back we can easily implement to queue

5
00:00:26.240 --> 00:00:29.600
based on any container that has a front in the back.

6
00:00:29.600 --> 00:00:36.320
These are the list in the deck so the queue methods use delegation and call the methods of the underlying

7
00:00:36.320 --> 00:00:37.340
container.

8
00:00:37.860 --> 00:00:43.470
Like stacks queues have white applications in computer science and the ACL provides a simple concise

9
00:00:43.470 --> 00:00:45.210
implementation.

10
00:00:45.440 --> 00:00:47.690
You can think of a queue is awaiting mine.

11
00:00:47.960 --> 00:00:51.000
Elements enter on one end and are removed from the other.

12
00:00:51.230 --> 00:00:55.200
As with stacks iterators really don't make sense with queues and they're not supported.

13
00:00:55.280 --> 00:00:57.450
So we can't use the SPL algorithms either

14
00:01:00.410 --> 00:01:02.050
in order to use the queue containers.

15
00:01:02.120 --> 00:01:07.550
We must include the queue header file like the stack the queue provides a handful of methods that have

16
00:01:07.550 --> 00:01:09.810
very well defined behavior.

17
00:01:09.830 --> 00:01:13.510
The push method inserts an element at the back of the queue.

18
00:01:13.640 --> 00:01:16.880
The pop method removes an element from the front of the queue.

19
00:01:17.120 --> 00:01:23.210
The front and back methods access the front and back elements of the queue but does not remove them.

20
00:01:23.210 --> 00:01:26.910
Finally we have the empty incise methods that we've seen with the other containers

21
00:01:29.400 --> 00:01:31.740
since the queue is an adapter class.

22
00:01:31.740 --> 00:01:34.560
We can choose what underlying container will be used.

23
00:01:34.560 --> 00:01:37.560
Same thing we did with the stack in the first example.

24
00:01:37.560 --> 00:01:40.620
I'm providing no information about the underlying container.

25
00:01:40.620 --> 00:01:43.700
So the T.L. will use a deck by default.

26
00:01:43.830 --> 00:01:49.020
You can see in the next two examples that I'm explicitly stating which underlying container to use as

27
00:01:49.020 --> 00:01:52.750
the template parameter.

28
00:01:52.750 --> 00:01:55.780
Now let's see how the push method works.

29
00:01:55.780 --> 00:01:59.250
Suppose we have a queue of integers named Q And it's empty.

30
00:01:59.500 --> 00:02:03.840
When we push 10 onto the queue we add tend to the back of the queue.

31
00:02:04.090 --> 00:02:05.760
In this case the queue was empty.

32
00:02:05.890 --> 00:02:09.230
So 10 is both the back and the front element in the queue.

33
00:02:09.280 --> 00:02:12.930
Then when we push 20 we push it at the back of the queue.

34
00:02:13.000 --> 00:02:16.740
So now 10 is at the front of the queue and 20 is at the back of the queue.

35
00:02:16.870 --> 00:02:19.930
You can see the front of the queue as the shaded box in the diagrams.

36
00:02:20.050 --> 00:02:22.410
The back of the queue is the other end.

37
00:02:22.480 --> 00:02:26.450
We then push thirty at the back of the queue.

38
00:02:26.600 --> 00:02:30.830
Once we have a queue that contains elements we can access the elements at the front and at the back

39
00:02:31.130 --> 00:02:34.760
without removing them with the front and back methods.

40
00:02:34.760 --> 00:02:40.580
In this example queue up front display 10 and queued up back will display 30.

41
00:02:40.760 --> 00:02:44.180
Now when we pop elements from the queue they're removed from the front.

42
00:02:44.240 --> 00:02:49.610
The first queued up pop removes the 10 from the front of the queue and now 20 becomes the new front

43
00:02:49.610 --> 00:02:55.860
of the queue the second cue that pop removes the 20 from the front of the queue and now 30 becomes the

44
00:02:55.860 --> 00:02:57.020
new front of the queue.

45
00:02:58.450 --> 00:03:04.210
If we call the size method for the queue here display one since there's one element in the queue as

46
00:03:04.210 --> 00:03:07.210
you can see the queue is really a very simple data structure.

47
00:03:07.210 --> 00:03:12.350
But like the stack it's used extensively in computer science to solve many types of problems.

48
00:03:12.370 --> 00:03:16.160
So let's head over to the IEEE and we'll see some examples.

49
00:03:16.240 --> 00:03:22.900
Ok so I'm back in the IDM in the Section 20 workspace and I'm in the queue project and I just like to

50
00:03:22.900 --> 00:03:25.120
stack the queue is really really simple.

51
00:03:25.150 --> 00:03:27.090
So let's go over some of these examples.

52
00:03:27.100 --> 00:03:30.970
First thing you'll see is I've already got the run over here on the right and I'll discuss that in just

53
00:03:30.970 --> 00:03:32.230
a second.

54
00:03:32.230 --> 00:03:37.030
First thing you'll see is I've got this template function that displays the queue very similar to what

55
00:03:37.030 --> 00:03:38.320
we did with the stack.

56
00:03:38.530 --> 00:03:43.390
In this case I'm passing by value because I don't want to reference to the real Q And I don't want to

57
00:03:43.390 --> 00:03:43.960
destroy it.

58
00:03:43.960 --> 00:03:48.930
So this is going to make a copy of the qued that's passed in and that's the one I'm going to process.

59
00:03:48.940 --> 00:03:50.230
So how do I display this.

60
00:03:50.260 --> 00:03:55.830
Well while the queue is not empty I'm going to get the element from the front.

61
00:03:55.830 --> 00:04:02.720
Remember with the queue we push on the back and we pop from the front.

62
00:04:02.950 --> 00:04:06.310
So this is first in first out.

63
00:04:06.570 --> 00:04:08.080
That's the second waiting line.

64
00:04:08.080 --> 00:04:09.450
Somebody gets in at the back of the line.

65
00:04:09.460 --> 00:04:14.410
They come off in the front of the line so I'm getting the element from the front.

66
00:04:14.640 --> 00:04:17.060
I'm removing it from the queue I'm displaying it.

67
00:04:17.070 --> 00:04:17.520
That's it.

68
00:04:17.550 --> 00:04:18.730
Really really simple.

69
00:04:19.020 --> 00:04:23.450
OK so let's talk about the main again there's only one test here right in my main.

70
00:04:24.000 --> 00:04:28.580
First thing I'm doing is I'm creating a queue right here and it's a queue of integers.

71
00:04:28.590 --> 00:04:35.400
Again this could be just about any time and I'm pushing one two three four and five onto the queue.

72
00:04:35.400 --> 00:04:37.590
Now remember I'm pushing at the back.

73
00:04:37.620 --> 00:04:44.520
So when I push one I'm pushing it at the back then two and three and four than five I displayed the

74
00:04:44.520 --> 00:04:47.500
cue and this is what I'm getting right here.

75
00:04:47.520 --> 00:04:48.900
Now what's different what's the back.

76
00:04:48.900 --> 00:04:51.190
Let's be sure that we understand what's going on here.

77
00:04:51.240 --> 00:04:54.990
We can say cued up front cued up back and you can see that the front here is the one.

78
00:04:55.020 --> 00:05:00.060
Makes sense right it's the first one that I pushed on first customer in line is the first customer out

79
00:05:00.060 --> 00:05:00.720
of the line.

80
00:05:00.720 --> 00:05:05.940
So that's the front the back is the five.

81
00:05:05.950 --> 00:05:11.020
Now I want to push a hundred onto the back of the queue and display the queue again.

82
00:05:11.020 --> 00:05:15.980
And you can see the output right here you can see the 100 here is at the back of the queue.

83
00:05:16.180 --> 00:05:21.050
I want to pop two elements from the front of the queue.

84
00:05:21.160 --> 00:05:25.870
So what happens is the one in the two get removed from the front and they're gone.

85
00:05:25.870 --> 00:05:29.260
So now what's left is three four five and a hundred three is at the front.

86
00:05:29.260 --> 00:05:30.660
One hundred is at the back.

87
00:05:31.840 --> 00:05:36.340
If I want to remove everything from the queue I need to use some sort of loop like this we can't use

88
00:05:36.340 --> 00:05:38.010
iterators with the cues.

89
00:05:38.020 --> 00:05:42.180
So while the queue is not empty pop the front element out of there.

90
00:05:42.550 --> 00:05:46.480
And when I'm done it'll be empty and I display the queue and I will get an empty queue just like you

91
00:05:46.480 --> 00:05:48.130
see right there.

92
00:05:48.460 --> 00:05:54.190
When I display the size of that Q I'm right here in 9:42 I will get a zero because it's empty right

93
00:05:54.190 --> 00:06:02.010
now and let me just clear this and I'll scroll up and there's a few more lines not too many.

94
00:06:02.010 --> 00:06:08.200
So right here we're on line forty four I've got an empty queue at this point.

95
00:06:08.210 --> 00:06:10.640
I just printed out the size right here.

96
00:06:10.720 --> 00:06:15.150
So going to push 10 one hundred and then a thousand onto the queue and display the queue.

97
00:06:15.170 --> 00:06:17.140
There you go you can see tennis at the front.

98
00:06:17.140 --> 00:06:19.410
1 0 0 0 0 is at the back and you can see that.

99
00:06:19.480 --> 00:06:23.910
That being displayed right here tennis at the front 1000 is at the back.

100
00:06:25.310 --> 00:06:30.750
Now I have access to the front in the back the front method and the back method return references.

101
00:06:30.890 --> 00:06:34.100
So if I wanted to change the front or change the back I can.

102
00:06:34.250 --> 00:06:38.650
So in this case I'm setting whatever element it is different to five.

103
00:06:38.680 --> 00:06:40.270
And at the back to 5 0 0 0 0.

104
00:06:40.490 --> 00:06:44.450
You can see them change right there right there were 10.

105
00:06:44.450 --> 00:06:50.630
Now it's 5 1 0 0 0 0 and now it's 5000 and you can see again that the front of the cue is the five in

106
00:06:50.630 --> 00:06:52.950
the back of the cue is the 5000.

107
00:06:53.120 --> 00:06:55.510
So that's it in a nutshell that's the cue.

108
00:06:55.550 --> 00:07:04.080
So remember this is first in first out as opposed to the stack which was the last in first out and there's

109
00:07:04.100 --> 00:07:06.070
uses for all of these.

110
00:07:06.560 --> 00:07:12.230
First in first out cues are used all the time for scheduling job scheduling tasks scheduling and operating

111
00:07:12.230 --> 00:07:13.360
systems.

112
00:07:13.520 --> 00:07:16.170
Stacks are used a lot in compiling.

113
00:07:16.340 --> 00:07:21.680
There used a lot to solve problems where you have to calculate expressions and you have to figure out

114
00:07:21.770 --> 00:07:23.180
how many parentheses are there.

115
00:07:23.180 --> 00:07:24.990
Do they balance and things like that.

116
00:07:25.250 --> 00:07:31.550
Okay so that's it in the next video what we'll do is we'll do a challenge that's going to use stacks

117
00:07:31.550 --> 00:07:35.530
and Qs and you remember that palindrome example we did a while back with a deck.

118
00:07:35.540 --> 00:07:38.720
We're going to do the same thing except we're going to use a stack and a Q to solve it.
