WEBVTT
1
00:00:05.480 --> 00:00:06.890
Hello everyone welcome back.

2
00:00:06.890 --> 00:00:13.220
This is the solution to the section 11 challenge and I'm in the section 11 workspace and the challenge

3
00:00:13.220 --> 00:00:18.820
solution project I'd like to go over one possible solution to this project.

4
00:00:18.830 --> 00:00:21.940
This is a solution that I've done very modular.

5
00:00:21.950 --> 00:00:25.950
All the functions are there they're all small they do one thing and they do them well.

6
00:00:26.000 --> 00:00:27.500
So let's go through this.

7
00:00:27.510 --> 00:00:29.950
Let's look at our main First let's start there.

8
00:00:30.110 --> 00:00:35.900
Main defines numbers which is the vector of integers just like we've had before and it's got a character

9
00:00:36.020 --> 00:00:37.430
variable called selection.

10
00:00:37.550 --> 00:00:41.350
That's where the user is going to type in their selection their menu selection.

11
00:00:41.370 --> 00:00:43.950
Now we've got our DO LOOP do loop and others.

12
00:00:44.060 --> 00:00:45.080
I folded the code here.

13
00:00:45.080 --> 00:00:48.500
There's obviously more code here in the switch statement but I'm just going to show you the overall

14
00:00:48.500 --> 00:00:50.590
structure of this of this loop.

15
00:00:50.810 --> 00:00:54.460
So here we're doing do display the menu.

16
00:00:54.920 --> 00:00:58.180
Notice that now we're calling a function to display the menu.

17
00:00:58.310 --> 00:01:03.680
Then I'm going to get the selection from the users or whatever they type in I'm going to store in selection

18
00:01:04.280 --> 00:01:08.780
but I'm just going to store it in selection I want to make an upper case and then store it in selection

19
00:01:09.110 --> 00:01:14.530
that way I don't have to check for lower case and upper case every time I check for a selection and

20
00:01:14.540 --> 00:01:18.220
I want to do this loop while the selection is not equal to an upper case.

21
00:01:18.230 --> 00:01:20.870
Q Okay so that's pretty much it.

22
00:01:20.900 --> 00:01:27.290
Now let's take a look at our display menu function and it's right down here and I'll expand it right

23
00:01:27.290 --> 00:01:30.500
now and you can see that that's the function display menu.

24
00:01:30.710 --> 00:01:33.460
In all it is is the output statements just like we had before.

25
00:01:33.460 --> 00:01:34.700
Inside the main.

26
00:01:34.760 --> 00:01:40.180
So in this case whenever I need to display the menu I can call this function and I'm doing that exactly

27
00:01:40.190 --> 00:01:42.780
here OK.

28
00:01:42.840 --> 00:01:47.840
Now let's take a look at the get selection function here is to get selection function and you could

29
00:01:47.840 --> 00:01:49.890
see the name of the function is good selection.

30
00:01:49.890 --> 00:01:52.970
It expects nothing but it does return a character.

31
00:01:52.980 --> 00:01:55.560
So in this case I'm defining another character variable.

32
00:01:55.600 --> 00:01:59.000
Remember this variable here is local to this function.

33
00:01:59.070 --> 00:02:01.050
I'm simply reading from the keyboard.

34
00:02:01.130 --> 00:02:06.080
There's selection and I'm converting it to uppercase and returning it.

35
00:02:06.630 --> 00:02:08.100
OK so that's that one.

36
00:02:08.100 --> 00:02:13.880
So at this point I've displayed the menu and remember the menu has at the very bottom of the menu enter

37
00:02:13.890 --> 00:02:14.590
your choice.

38
00:02:14.610 --> 00:02:17.880
I don't really need to prompt the user for anything it's already there.

39
00:02:17.880 --> 00:02:25.510
So I'm displaying the menu I'm getting this election and selection will now contain an uppercase character.

40
00:02:25.930 --> 00:02:26.440
OK.

41
00:02:26.460 --> 00:02:27.240
Perfect.

42
00:02:27.240 --> 00:02:33.600
So now we're going to switch off of that character and let me expand the switch statement here.

43
00:02:33.600 --> 00:02:39.570
So in this case if the selection is a P I'm going to call a function called handle display because remember

44
00:02:39.570 --> 00:02:42.460
p is to print down all the integers in the vector.

45
00:02:42.720 --> 00:02:45.580
And I'm going to pass in the vector to that function.

46
00:02:45.870 --> 00:02:53.070
If it's an A I'm going to do handle add Amma's handle mean as is handle smallest ELAS handle largest

47
00:02:53.500 --> 00:02:55.660
Q Is hand-bill quit and default.

48
00:02:55.680 --> 00:02:57.720
I'm just going to handle an unknown.

49
00:02:57.960 --> 00:03:03.590
So you can see though that the logic in Maine is exactly like it was before except we're calling functions

50
00:03:03.600 --> 00:03:06.600
we don't have all that code written in here.

51
00:03:06.600 --> 00:03:10.130
Also this allows us to think modularly right now.

52
00:03:10.120 --> 00:03:15.330
I've got functions doing those defined tasks so again it's that boss worker analogy at work here it's

53
00:03:15.330 --> 00:03:16.290
perfect for that.

54
00:03:16.290 --> 00:03:18.570
Let's take a look at handle display.

55
00:03:18.600 --> 00:03:20.660
So in this case the user selects P..

56
00:03:20.670 --> 00:03:25.380
Notice I don't have to check uppercase and lowercase anymore because the get selection function already

57
00:03:25.380 --> 00:03:27.000
made everything uppercase.

58
00:03:27.150 --> 00:03:31.830
So I'm going to call handle display and I want to pass in the vector to it because obviously it needs

59
00:03:31.830 --> 00:03:33.240
to display the vector.

60
00:03:33.240 --> 00:03:37.580
Let's come over here to handle display and you can see the function right here.

61
00:03:37.590 --> 00:03:38.760
Now notice handle display.

62
00:03:38.760 --> 00:03:46.470
It expects a vector and I'm passing the vector in by reference and Konst just as we've spoken about

63
00:03:46.470 --> 00:03:47.230
before.

64
00:03:47.310 --> 00:03:51.290
This handle this display method really has no business changing that vector.

65
00:03:51.390 --> 00:03:53.930
So I'm not going to even take the chance that it will.

66
00:03:53.940 --> 00:03:55.650
I'm passing it by reference.

67
00:03:55.650 --> 00:03:58.100
I don't have to copy it and Konst.

68
00:03:58.110 --> 00:04:00.410
So let's take a look at that.

69
00:04:00.570 --> 00:04:05.540
All right so we've got our vector here so I'm checking to see if the size of the vector is zero.

70
00:04:05.580 --> 00:04:11.190
In which case it's empty and I'm displaying the list is empty otherwise I'm calling a function called

71
00:04:11.190 --> 00:04:16.210
display the list and I'm passing in that vector the same vector I got in passing to the function.

72
00:04:16.350 --> 00:04:22.290
I could have looped in here and displayed the list right here of course but I decided to create another

73
00:04:22.290 --> 00:04:27.120
function because you know we could tweak the behavior of what the display looks like and I don't want

74
00:04:27.120 --> 00:04:29.480
all that code in here necessarily.

75
00:04:29.760 --> 00:04:34.220
So let's take a look at display list it's toward the bottom I'm going to scroll down here.

76
00:04:34.300 --> 00:04:36.260
There's the display list function right here.

77
00:04:36.330 --> 00:04:40.030
Again it expects the same vector that was sent to the function prior.

78
00:04:40.230 --> 00:04:45.840
And now if you look at the code it's going to print out a left bracket then it's going to loop through

79
00:04:45.840 --> 00:04:48.740
that vector and print out each number just like before.

80
00:04:48.810 --> 00:04:54.180
But you can see that this list displays just the list that's all it does and whenever I need to display

81
00:04:54.180 --> 00:04:57.770
a list of integers I could just send it right to this function.

82
00:04:58.440 --> 00:04:59.990
OK so that's display list.

83
00:05:00.090 --> 00:05:06.050
Scroll back up and let's talk about handle add.

84
00:05:06.200 --> 00:05:06.950
So now we're here.

85
00:05:06.960 --> 00:05:13.300
Handle add another function whenever the user presses a they want to add a number to the list right.

86
00:05:13.700 --> 00:05:17.360
So I want to call handle at an on a Past the list the vector.

87
00:05:17.450 --> 00:05:19.660
So let's see the handle add method.

88
00:05:19.670 --> 00:05:23.150
I'll scroll down slightly and will see handle at is right here.

89
00:05:23.150 --> 00:05:28.070
Now notice that in this case I'm not still passing the vector by reference because I want to add an

90
00:05:28.070 --> 00:05:33.530
integer to it right so I need to have the reference to it but not Konst because I need to change it.

91
00:05:33.560 --> 00:05:36.530
I need to ask the user for an integer and stored in the vector.

92
00:05:36.530 --> 00:05:38.370
So let's look at that code.

93
00:05:38.390 --> 00:05:42.290
We're doing everything right in here we're saying there is an integer called numb to add or remember

94
00:05:42.290 --> 00:05:46.950
that member your scope rules here that integer is local to this function.

95
00:05:47.000 --> 00:05:50.270
I'm asking the user to enter an integer to add to the list.

96
00:05:50.300 --> 00:05:54.860
I'm getting that integer from them from the keyboard and then I'm simply calling the push back method

97
00:05:54.860 --> 00:06:01.740
of the vector class with the number to add and displaying the message that it really really easy.

98
00:06:02.150 --> 00:06:06.270
OK so let me go back up to the main and let's see handle mean.

99
00:06:06.290 --> 00:06:07.520
How does that work.

100
00:06:07.550 --> 00:06:12.140
What will going to the handle mean function which is right here.

101
00:06:12.230 --> 00:06:16.520
Again it expects a reference to a vector and its constant.

102
00:06:16.520 --> 00:06:20.540
I don't want my handle mean modifying the vector.

103
00:06:20.720 --> 00:06:21.470
So what do we do.

104
00:06:21.530 --> 00:06:23.540
We check to see if the vector is empty.

105
00:06:23.630 --> 00:06:25.970
If it is we just say unable to calculate the mean.

106
00:06:25.960 --> 00:06:32.360
The list is empty otherwise we call calculate mean and we pass in the vector.

107
00:06:32.450 --> 00:06:36.710
It's going to return a double to me which I'm going to display right in here.

108
00:06:37.010 --> 00:06:40.160
So it's going to say the mean is whatever number I get back.

109
00:06:40.160 --> 00:06:43.160
All right so let's take a look at calculate mean or scroll down here.

110
00:06:45.130 --> 00:06:46.320
These calculate mean.

111
00:06:46.330 --> 00:06:53.100
Notice again it's the same vector same syntax here by reference constant.

112
00:06:53.270 --> 00:06:54.590
There's my total.

113
00:06:54.590 --> 00:06:59.890
I'm looping through those numbers adding them all up to total and then I'm casting one of these to a

114
00:06:59.890 --> 00:07:01.380
double and dividing by the size.

115
00:07:01.390 --> 00:07:03.090
Exactly like we had before.

116
00:07:03.100 --> 00:07:07.920
It's pretty much the same code that we had in the prior challenge of Section 9 challenge.

117
00:07:07.990 --> 00:07:11.720
Except we're breaking it up into modules here so that's it.

118
00:07:11.740 --> 00:07:16.000
That's calculate mean and I think you can see where we're going with the rest of this.

119
00:07:16.000 --> 00:07:23.170
Here is the close up handle mean we've got handle smallest handle largest were exactly the same way

120
00:07:23.560 --> 00:07:26.190
and then Hendel quit and Hendel unknown.

121
00:07:26.230 --> 00:07:30.370
We're really doing very little in there but I decided to make them functions because you never know

122
00:07:30.370 --> 00:07:31.890
what you need to do in there.

123
00:07:31.910 --> 00:07:36.440
Suppose you are working with files and the user quits and you want to close up files and so forth.

124
00:07:36.610 --> 00:07:39.270
You'd like to do that in a function and not here in the main.

125
00:07:39.310 --> 00:07:44.730
I want to keep my main really really simple easy to read and straightforward so I a handle quick.

126
00:07:44.740 --> 00:07:46.820
Kind of looks like this right here.

127
00:07:46.840 --> 00:07:48.030
You can see handle quick.

128
00:07:48.130 --> 00:07:54.850
It's all it's saying is goodbye and my handle unknown is saying unknown selection.

129
00:07:55.450 --> 00:07:56.840
I should spell that right.

130
00:07:57.070 --> 00:08:00.100
A non-selection try again.

131
00:08:00.310 --> 00:08:03.940
OK so that's pretty much the solution I've got.

132
00:08:03.950 --> 00:08:07.380
Then you scroll up to the top and I've got all the function prototypes at the top.

133
00:08:07.380 --> 00:08:11.880
So there my function prototypes here the prototypes for displaying the menu and getting the user selection

134
00:08:12.180 --> 00:08:15.340
display the menu expects nothing returns nothing.

135
00:08:15.360 --> 00:08:18.290
Good selection expects nothing returns a character.

136
00:08:18.310 --> 00:08:21.040
And I've got my menu handling function prototypes.

137
00:08:21.150 --> 00:08:27.780
Notice that all of them expect a reference to the vector that's constant except handle add because handle

138
00:08:27.780 --> 00:08:31.070
add needs to change the vector so it can't be constant.

139
00:08:31.120 --> 00:08:35.150
Could have got handle a quick handle unknown and then I've got the functions that actually do the work

140
00:08:35.150 --> 00:08:35.300
right.

141
00:08:35.320 --> 00:08:41.220
The display list displays the list calculate mean give me the vector V back the double That's the mean

142
00:08:41.740 --> 00:08:47.890
get smallest same idea get largest same idea except for returning an integer.

143
00:08:47.890 --> 00:08:49.660
OK so what do we want to do.

144
00:08:49.680 --> 00:08:51.950
Let's let's modify this program a little bit.

145
00:08:51.960 --> 00:08:54.600
Let's add some functionality to it.

146
00:08:54.600 --> 00:08:59.270
Suppose the user wants to see if a specific integer is in the list or not.

147
00:08:59.460 --> 00:09:01.100
OK so how do we do that.

148
00:09:01.260 --> 00:09:03.170
Well there's a couple of things we need to do.

149
00:09:03.180 --> 00:09:05.970
Obviously we need to do some function prototyping here.

150
00:09:06.060 --> 00:09:13.180
So let's do that let's put it right under here under-handed largest will say void how much is handled

151
00:09:13.180 --> 00:09:18.830
find We're going to find an integer in that vector right.

152
00:09:18.830 --> 00:09:20.030
Is that going to change the vector.

153
00:09:20.040 --> 00:09:27.050
But I still need the vector someone to say Konst a vector of integers and I want it by reference and

154
00:09:27.060 --> 00:09:28.260
will use the V again.

155
00:09:28.290 --> 00:09:31.870
We don't have to use the parameter names in here but I'm going to just use the V.

156
00:09:31.920 --> 00:09:33.460
So that's my handle find.

157
00:09:33.600 --> 00:09:34.110
OK.

158
00:09:34.380 --> 00:09:36.580
Now here we need to know.

159
00:09:36.600 --> 00:09:38.940
So here we need a function that's actually going to do the finding.

160
00:09:38.940 --> 00:09:39.330
Right.

161
00:09:39.480 --> 00:09:41.700
And it's going to return a boolean true or false.

162
00:09:41.700 --> 00:09:43.990
I really don't want to know how many times it's there.

163
00:09:44.010 --> 00:09:48.120
You could certainly write a function like that but let's just call it find.

164
00:09:48.900 --> 00:09:52.540
And what does expect will it expects that vector to look through.

165
00:09:52.530 --> 00:09:53.290
Right.

166
00:09:53.790 --> 00:09:57.990
And again it's a vector of integers and it's by reference.

167
00:09:58.170 --> 00:10:01.980
And what else does it expect it expects the integer that you're looking for.

168
00:10:01.980 --> 00:10:07.020
So in this case let's just call it Target that's the integer I'm looking for.

169
00:10:07.020 --> 00:10:08.890
So those are my prototypes.

170
00:10:09.090 --> 00:10:15.690
But before we even get to those prototypes let's fix up the menu so that it displays that that f right

171
00:10:15.690 --> 00:10:20.550
so to go down to display menu and right after display largest.

172
00:10:20.850 --> 00:10:32.430
I'm just going to say seek out and I'll put an F in there and we'll say find a number.

173
00:10:32.430 --> 00:10:33.980
All right so that should display.

174
00:10:35.790 --> 00:10:36.620
Now what do we do.

175
00:10:36.780 --> 00:10:40.800
Well we need to handle that case in Main right.

176
00:10:40.800 --> 00:10:43.210
So we'll do it right after the largest read here.

177
00:10:43.290 --> 00:10:48.480
So we'll say case f in this case and we don't have to worry about the lower case because it's going

178
00:10:48.480 --> 00:10:52.750
to be converted to an uppercase and we'll say handle find.

179
00:10:53.070 --> 00:10:56.660
And we've got numbers.

180
00:10:56.660 --> 00:10:57.380
All right.

181
00:10:57.510 --> 00:10:58.440
Perfect.

182
00:10:58.440 --> 00:11:02.550
So now what we need to do is we know we need to write these two functions that we prototype we need

183
00:11:02.550 --> 00:11:04.180
to write handle find.

184
00:11:04.320 --> 00:11:07.320
And we need to write the Find function these chip.

185
00:11:07.380 --> 00:11:14.970
So let's do handle find first and we'll put it right at the bottom of the handle functions right here

186
00:11:14.970 --> 00:11:16.520
right after handle largest.

187
00:11:16.800 --> 00:11:20.230
And we could read a comment in here but I'm going to rent not just to save time.

188
00:11:20.370 --> 00:11:22.830
So there's my handle find.

189
00:11:22.920 --> 00:11:25.060
Now what does the Hindol find function have to do.

190
00:11:25.060 --> 00:11:29.070
It has to ask the user to enter the integer they want to find right.

191
00:11:29.070 --> 00:11:38.280
So let's just call it Target and initialize it to zero and we'll just say something like see out enter

192
00:11:38.460 --> 00:11:50.740
the number to find where to search for whatever you want to call it and we'll read that into Target.

193
00:11:50.910 --> 00:11:51.530
Now what do we do.

194
00:11:51.540 --> 00:11:55.690
Well we've got that function we still need to write the Find function that returns a boolean.

195
00:11:55.920 --> 00:11:59.850
So we're going to use that right now without even writing it because we know what it looks like.

196
00:11:59.850 --> 00:12:01.490
We wrote the prototype for it right.

197
00:12:01.590 --> 00:12:03.030
So I'm going to say if

198
00:12:05.580 --> 00:12:10.080
find and I'm going to pass into it the vector and the target

199
00:12:13.340 --> 00:12:15.930
get rid of some of those purines that's it.

200
00:12:15.930 --> 00:12:22.950
So if find that target in this vector returns true then the energy is in there.

201
00:12:23.610 --> 00:12:25.770
So we could just write something like Target

202
00:12:30.240 --> 00:12:30.930
was found

203
00:12:34.640 --> 00:12:38.770
else target wasn't found.

204
00:12:51.820 --> 00:12:54.950
And I'll put some new ones at the end so lines.

205
00:12:57.690 --> 00:12:59.750
That's pretty much handles that function.

206
00:12:59.760 --> 00:13:01.990
So what do we have left to implement.

207
00:13:02.010 --> 00:13:05.290
Well we need to implement the scroll up a little bit here.

208
00:13:05.400 --> 00:13:09.870
We need to implement this function right here the one that returns the true false value.

209
00:13:10.230 --> 00:13:13.860
And I'm going to put that all the way at the bottom with all my other good functions that doing that

210
00:13:13.860 --> 00:13:18.450
are doing work it right after I get smallest right here.

211
00:13:18.450 --> 00:13:22.130
Let's write it right here and there is the prototype right.

212
00:13:22.320 --> 00:13:23.480
So what am I going to do here.

213
00:13:23.470 --> 00:13:28.920
Well I'm going to loop through the vector and compare each element to the target.

214
00:13:28.920 --> 00:13:30.210
If it's there I'm out.

215
00:13:30.240 --> 00:13:34.600
If it's not I keep looping and if I get to the end I never found it right.

216
00:13:34.680 --> 00:13:42.150
So we can do something like four again auto numb for each element through the loop will be called numb

217
00:13:42.690 --> 00:13:52.590
and there there's my collection the vector and we'll just say if numb is equal to my target then I'm

218
00:13:52.680 --> 00:13:53.790
done.

219
00:13:53.880 --> 00:13:56.120
I found it and when it returned true.

220
00:13:56.130 --> 00:14:00.570
Now if we get all the way to the end of the loop we don't want to put this here and if it is here we'll

221
00:14:00.570 --> 00:14:03.980
just simply say return false.

222
00:14:04.020 --> 00:14:05.770
We never found it.

223
00:14:05.910 --> 00:14:14.300
So let's run this OK we've got an error it says number was not declared in this scope because it should

224
00:14:14.300 --> 00:14:15.960
be numbers right.

225
00:14:16.000 --> 00:14:23.500
Hopefully you see that error right there was just a typo and let's try it again.

226
00:14:23.520 --> 00:14:24.370
There's I run.

227
00:14:24.370 --> 00:14:26.810
Here you see the F in menu now.

228
00:14:26.860 --> 00:14:29.690
So let's find a number that's find 100.

229
00:14:29.710 --> 00:14:31.640
That is how it asked me for the number to find.

230
00:14:31.700 --> 00:14:34.930
The list is empty right so should not find it.

231
00:14:35.080 --> 00:14:38.420
One hundred it was not found good by what happened.

232
00:14:38.470 --> 00:14:39.610
That's an error right.

233
00:14:39.820 --> 00:14:41.970
I should have never printed goodbye.

234
00:14:41.980 --> 00:14:43.700
That's quick and see what's going on.

235
00:14:45.100 --> 00:14:45.890
Ha.

236
00:14:46.300 --> 00:14:47.650
Need a break statement.

237
00:14:48.040 --> 00:14:50.210
That's why we need to test our code.

238
00:14:50.290 --> 00:14:55.130
Forgot the breaks didn't you remember when the switch goes to the next one so handle quit fired.

239
00:14:55.720 --> 00:14:57.750
Let's try this one more time.

240
00:14:57.940 --> 00:15:01.540
So let's find 100 100 was not found.

241
00:15:01.780 --> 00:15:02.940
We get the menu again.

242
00:15:03.170 --> 00:15:06.270
That's ad 100.

243
00:15:06.790 --> 00:15:07.810
And let's look for it again.

244
00:15:07.810 --> 00:15:09.460
I'm pressing for find.

245
00:15:09.630 --> 00:15:11.290
Let's find 100.

246
00:15:11.290 --> 00:15:13.070
Now it says 100 was found.

247
00:15:13.410 --> 00:15:16.240
And that's print the numbers.

248
00:15:16.240 --> 00:15:17.580
There you go 100.

249
00:15:17.890 --> 00:15:21.760
So we've modularized our system into a series of functions.

250
00:15:21.760 --> 00:15:25.170
We easily added a new behavior to this which is defined.

251
00:15:25.330 --> 00:15:31.640
And you can see now the code is longer for sure because you also have a lot of comments in here.

252
00:15:31.780 --> 00:15:38.260
But you've got these really well-defined logical functions that are much easier to debug.

253
00:15:38.350 --> 00:15:40.960
If there's something wrong you can come in here and tweak it.

254
00:15:40.990 --> 00:15:46.270
You can also extend the behavior of the ad rather than having just one big main and if you make any

255
00:15:46.270 --> 00:15:51.640
changes you're going to put all your logic in there and that man gets out of control very quickly.

256
00:15:51.640 --> 00:15:51.960
OK.

257
00:15:52.060 --> 00:15:56.790
So hopefully your solution it's probably going to be different from mine and that's perfectly fine.

258
00:15:57.070 --> 00:16:01.180
Hopefully it worked out OK and if you have any comments on it please leave them in the course forum.
