WEBVTT
1
00:00:05.400 --> 00:00:11.090
In this last section of the course we'll talk about custom the leaders for smart pointers.

2
00:00:11.160 --> 00:00:15.930
This isn't something you're likely to see very often but I wanted to cover it for completeness since

3
00:00:15.930 --> 00:00:19.500
they are a feature that C++ smart pointer support.

4
00:00:19.500 --> 00:00:25.260
Sometimes when we destroy a smart pointer we need more than to just destroy the object on the heap.

5
00:00:25.320 --> 00:00:30.810
Sometimes when we use pointers to see structures from C frameworks we have to provide a specialized

6
00:00:30.810 --> 00:00:35.060
way of destroying them since in many cases they don't have destructors.

7
00:00:35.070 --> 00:00:41.530
As I said these are special use cases that you won't run into very often but if you do the C++ smart

8
00:00:41.530 --> 00:00:47.060
pointers allow you to provide custom to leaders that will be called when the smart pointer is destroyed.

9
00:00:47.230 --> 00:00:52.000
If you use custom to leaders you can't use make shared or make unique when you create your smart pointer

10
00:00:52.000 --> 00:00:57.470
objects since we need to provide our custom the leader and these functions don't support that.

11
00:00:57.490 --> 00:01:02.380
The idea is that if you need a specialized way to let your objects you probably need a specialized way

12
00:01:02.380 --> 00:01:04.330
to create them to.

13
00:01:04.490 --> 00:01:06.840
There are lots of ways to provide custom to leaders.

14
00:01:06.950 --> 00:01:08.750
I'll show you two ways in these slides.

15
00:01:08.810 --> 00:01:15.910
First using a function and then using a lambda in the case of a function we write or deleter function

16
00:01:16.330 --> 00:01:19.960
that will be called automatically when the smart pointer will be deleted.

17
00:01:19.960 --> 00:01:26.090
This function will be provided with a raw pointer to the managed object that the smart pointer is referencing.

18
00:01:26.320 --> 00:01:30.220
Then in this function you do whatever you need to do to relinquish your resources.

19
00:01:30.310 --> 00:01:33.160
In this example I'm simply deleting the raw pointer.

20
00:01:33.160 --> 00:01:34.090
That's it.

21
00:01:34.090 --> 00:01:39.240
So now when you declare your smart pointer you provide your deleter function.

22
00:01:39.250 --> 00:01:46.210
In this case I'm declaring PNTR as a shared pointer to some class and in the initializer I'm creating

23
00:01:46.210 --> 00:01:47.960
the managed object using you.

24
00:01:48.100 --> 00:01:52.490
But then I'm also passing in the name of my custom deleter function.

25
00:01:52.580 --> 00:01:53.380
That's it.

26
00:01:53.420 --> 00:01:57.160
Now when the pointer is destroyed it will call my leader.

27
00:01:57.230 --> 00:02:01.420
Let's see a real code example using the test class that we've been using in this section.

28
00:02:04.800 --> 00:02:08.960
So here we're creating a deleter function that will be passed in a raw pointer.

29
00:02:09.030 --> 00:02:15.780
In this case it's a raw pointer to a test object and that pointer is the pointer that the smart pointer

30
00:02:15.780 --> 00:02:17.970
is managing in this function.

31
00:02:17.980 --> 00:02:22.860
I'm simply displaying in my custom the leader and then I'm deleting the raw pointer that was passed

32
00:02:22.860 --> 00:02:23.370
to me.

33
00:02:23.430 --> 00:02:24.540
That's it.

34
00:02:24.540 --> 00:02:30.570
Now when I create the smart pointer object in this case TTR as a shared pointer I pass in my the leader

35
00:02:30.570 --> 00:02:32.060
in the initialization list.

36
00:02:32.070 --> 00:02:33.750
It's as simple as that.

37
00:02:33.750 --> 00:02:41.010
This will also work for unique pointers Now let's see how this works using a lambda expression.

38
00:02:41.240 --> 00:02:46.840
We haven't seen lambda expressions in this course since they're more of an intermediate C++ topic.

39
00:02:47.270 --> 00:02:51.380
If there's interest in learning more about lambda expressions please let me know and I'll add a section

40
00:02:51.380 --> 00:02:52.940
to the course.

41
00:02:52.940 --> 00:02:58.640
In a nutshell a lambda is an anonymous function that is a function that has no name and can be defined

42
00:02:58.740 --> 00:03:00.630
inline where you expect to use it.

43
00:03:01.550 --> 00:03:06.200
There's a lot more to lambdas but you can see in this example that the function name parameter has been

44
00:03:06.200 --> 00:03:11.490
replaced with a code block that looks very similar to what we originally wrote in the might lead or

45
00:03:11.540 --> 00:03:12.910
function.

46
00:03:12.980 --> 00:03:18.650
The syntax might look a little odd but now this code will execute whenever the pointer object is destroyed.

47
00:03:18.650 --> 00:03:19.810
That's pretty cool.

48
00:03:20.000 --> 00:03:24.240
We defined right where we will use it and not need to write another function have to worry about it

49
00:03:25.290 --> 00:03:27.800
well that completes the section on smart pointers.

50
00:03:27.990 --> 00:03:30.980
I hope you can see how powerful smart pointers are.

51
00:03:31.050 --> 00:03:36.060
There are many opinions as to what types of smart pointers you should use when and the answer is usually

52
00:03:36.060 --> 00:03:37.530
it depends.

53
00:03:37.530 --> 00:03:40.580
I would encourage you to use unique pointers as often as you can.

54
00:03:40.650 --> 00:03:46.050
Since they're simple efficient and in most cases the drop ins for many of the common pointer use cases

55
00:03:46.860 --> 00:03:52.090
then use shared pointers when you have more complex object management semantics involving shared ownership

56
00:03:53.530 --> 00:03:58.760
in the next video will do a simple challenge that uses a unique pointer to a vector of shared pointers.

57
00:03:58.780 --> 00:04:01.010
It should be fun.

58
00:04:01.090 --> 00:04:07.970
Ok so I'm back in the IDM and the section 17 workspace in the custom to leaders project and in this

59
00:04:07.970 --> 00:04:13.850
project what would you as well write a couple of different ways to have our custom the leaders being

60
00:04:13.850 --> 00:04:14.540
called.

61
00:04:14.720 --> 00:04:16.220
And it's really really straightforward.

62
00:04:16.220 --> 00:04:18.150
Let's do the function one first.

63
00:04:18.200 --> 00:04:22.170
We've got the same test class that we've been using throughout this section.

64
00:04:22.190 --> 00:04:26.600
You've seen it before so it should be pretty easy to understand what's going on there and what we want

65
00:04:26.600 --> 00:04:31.790
to do is we want to create our own deleter that will be called when our objects are deleted.

66
00:04:31.790 --> 00:04:33.800
This is it right here.

67
00:04:33.830 --> 00:04:35.420
This name can be anything you like.

68
00:04:35.420 --> 00:04:38.000
I just call it my dear leader it has to return void.

69
00:04:38.450 --> 00:04:43.260
And what what's being passed into here is the raw pointer that's being managed.

70
00:04:43.260 --> 00:04:48.380
So in other words if I've got a shared pointer to a test object on the heap we're going to get a pointer

71
00:04:48.380 --> 00:04:50.410
to that test and is going to be the raw pointer.

72
00:04:50.420 --> 00:04:53.810
If this was an account we'd get a pointer to an account object.

73
00:04:53.810 --> 00:04:55.100
Again a raw pointer.

74
00:04:55.130 --> 00:04:59.060
So that's the raw pointer that's being wrapped by that shared pointer.

75
00:04:59.090 --> 00:05:01.190
OK so what do we do in here.

76
00:05:01.190 --> 00:05:05.090
Well this is going to be called with that pointer we can do whatever we like in this case I'm just going

77
00:05:05.090 --> 00:05:11.140
to say using my custom function to leader and then I'm actually going to delete that pointer right.

78
00:05:11.300 --> 00:05:13.790
The whole point is for me to delete that storage.

79
00:05:13.790 --> 00:05:18.710
Now this gets much more complicated when you've got raw pointers to see structures that are used in

80
00:05:18.710 --> 00:05:21.260
C frameworks where they don't have destructors.

81
00:05:21.260 --> 00:05:25.460
You've really got to manage that memory yourself and this is a nice way to do it and still be able to

82
00:05:25.460 --> 00:05:28.180
use unique pointers and shared pointers and so forth.

83
00:05:28.190 --> 00:05:29.500
So what do we do now.

84
00:05:29.600 --> 00:05:31.650
Well now we can create our pointers.

85
00:05:31.670 --> 00:05:36.050
It's called TTR one and it's a shared pointer to a test object.

86
00:05:36.170 --> 00:05:37.860
Member the test objects on the heap.

87
00:05:38.030 --> 00:05:44.630
We have to use new here to do this we can't use make shared and what we do is we pass in the regular

88
00:05:44.630 --> 00:05:50.010
information that we're used to to create that object on the heap and then we pass in the name of our

89
00:05:50.120 --> 00:05:50.950
leader.

90
00:05:51.020 --> 00:05:54.000
In this case it's my deleter you can see the same name.

91
00:05:54.200 --> 00:05:56.450
You don't have to put address of in front.

92
00:05:56.510 --> 00:05:59.360
It doesn't hurt if you do but it is not necessary.

93
00:05:59.390 --> 00:06:03.390
The name of a function already defaults to the location of the function.

94
00:06:03.410 --> 00:06:09.350
So in this case what's going to happen behind the scenes is that when this pointer is delete when these

95
00:06:09.370 --> 00:06:14.170
pointers delete it and has to clean up the memory it's going to call this function to do it.

96
00:06:14.450 --> 00:06:16.790
And you can have complete control of how you do it.

97
00:06:17.000 --> 00:06:18.770
So that's the function method.

98
00:06:18.770 --> 00:06:24.470
The second way is using a lambda expression and what you'll see here is you could see our output statement

99
00:06:24.470 --> 00:06:27.820
in our delete and you can see here output statement or delete.

100
00:06:27.920 --> 00:06:32.780
The only difference is that it's being wrapped up in this construct right here and this is called the

101
00:06:32.780 --> 00:06:35.530
lambda expression which creates a closure object.

102
00:06:35.750 --> 00:06:41.090
And what's going to happen is when it's time to delete this rather than call a function.

103
00:06:41.090 --> 00:06:43.370
This code right in here executes.

104
00:06:43.370 --> 00:06:48.800
So this is real nice because you can write your code exactly where it's going to be used not somewhere

105
00:06:48.800 --> 00:06:49.490
else.

106
00:06:49.490 --> 00:06:54.260
Obviously this function could be anywhere but this is alright here it's real nice so when you're reading

107
00:06:54.260 --> 00:06:59.090
this you can see exactly whats going to happen right and it's right there rather than having to find

108
00:06:59.090 --> 00:07:01.970
a function to see what it does and that's it.

109
00:07:01.970 --> 00:07:03.500
There's two different ways to do it.

110
00:07:03.530 --> 00:07:05.140
If we run this now and actually you know what.

111
00:07:05.140 --> 00:07:09.300
Let me change this to a thousand here so we can see the difference.

112
00:07:09.350 --> 00:07:10.600
So what's going to happen here.

113
00:07:10.790 --> 00:07:13.200
I notice I have created this block right here.

114
00:07:13.220 --> 00:07:18.890
This is just an artificial scope here so that we can see that this PCR one will be deleted right here

115
00:07:18.890 --> 00:07:22.400
ready to be destroyed and Peacher are to be destroyed right here.

116
00:07:22.490 --> 00:07:28.310
So we expect TTR one to live inside this block and TTR to inside this block that we can really see them

117
00:07:28.550 --> 00:07:30.740
and we can really see these leaders being called.

118
00:07:30.800 --> 00:07:36.760
So let's execute this and will build and run and you can see right here.

119
00:07:36.760 --> 00:07:38.750
I mean move this over here just a little bit.

120
00:07:38.770 --> 00:07:43.240
This is this block right here you can see that we're constructing that test object with one hundred

121
00:07:43.570 --> 00:07:45.180
and then we're using our custom function.

122
00:07:45.180 --> 00:07:45.890
The leader.

123
00:07:46.060 --> 00:07:51.040
You can see that that output statement is displaying we're deleting the pointer and then we're calling

124
00:07:51.040 --> 00:07:52.330
the destructor.

125
00:07:52.330 --> 00:07:57.220
Same thing here we're calling the test constructor with a then we're using our custom lambda the leader

126
00:07:57.220 --> 00:08:02.410
which is this line right here and we're destroying our pointers while there and then we're calling the

127
00:08:02.410 --> 00:08:03.800
test destructor.

128
00:08:03.820 --> 00:08:04.420
So there you go.

129
00:08:04.420 --> 00:08:08.800
Real simple example of using custom the leaders you don't often need these.

130
00:08:08.800 --> 00:08:11.710
But it's nice to know that they're there and they're pretty easy to use actually.
