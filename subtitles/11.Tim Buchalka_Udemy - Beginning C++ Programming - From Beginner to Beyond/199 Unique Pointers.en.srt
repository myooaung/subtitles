1
00:00:05,550 --> 00:00:13,020
Let's start by exploring C++ 11 smart pointers with the unique POINAR the unique pointer is a simple

2
00:00:13,020 --> 00:00:18,930
smart pointer that's very efficient and it can be a drop in replacement in many cases for your typical

3
00:00:18,930 --> 00:00:23,820
point to use case where you allocate storage use it and then free it in the same block.

4
00:00:24,030 --> 00:00:29,040
A unique pointer declaration uses a template parameter which is the type of the object that the smart

5
00:00:29,040 --> 00:00:31,250
pointer will manage on the heap.

6
00:00:31,260 --> 00:00:37,740
So this allows us to declare a unique pointer objects that point to any type we need as the name dates

7
00:00:37,750 --> 00:00:39,410
unique pointers are unique.

8
00:00:39,450 --> 00:00:44,100
So you can't have multiple unique pointers pointing to the same object on the heap.

9
00:00:44,100 --> 00:00:50,280
This implies a strong ownership relationship between the pointer and what it points to unique pointers

10
00:00:50,280 --> 00:00:51,940
can't be copied or signed.

11
00:00:52,020 --> 00:00:56,150
So their copy constructor and copy assignment operators are not available.

12
00:00:56,370 --> 00:01:01,870
If you try to copy or assign them you'll get an error but unique pointers can be moved.

13
00:01:02,070 --> 00:01:06,500
So they're great for placing a standard template library containers such as vectors.

14
00:01:06,570 --> 00:01:12,030
And since the ownership is unique you're guaranteed that when the pointer goes out of scope the object

15
00:01:12,030 --> 00:01:15,470
that it points to will automatically be cleaned up from the heap.

16
00:01:15,480 --> 00:01:17,010
That's pretty powerful stuff.

17
00:01:18,710 --> 00:01:24,620
So let's see one way we can create a unique pointer here you can see that we're declaring P1 to be a

18
00:01:24,620 --> 00:01:26,960
unique pointer to an int.

19
00:01:26,990 --> 00:01:31,640
We're also initializing it to point to a new ant that we create on the heap and that integer has been

20
00:01:31,640 --> 00:01:34,010
initialized to 100.

21
00:01:34,040 --> 00:01:40,640
Now P one owns that object on the heap when one goes out of scope the INT on the heap will be deallocated.

22
00:01:40,670 --> 00:01:43,760
You don't need to call delete with the smart pointer.

23
00:01:43,760 --> 00:01:48,040
Now as far as using the pointer The syntax is pretty much like using a raw pointer.

24
00:01:48,080 --> 00:01:52,130
You can see that if we dereference P. one we get the integer that it points to.

25
00:01:52,190 --> 00:01:52,900
In this case.

26
00:01:52,980 --> 00:01:54,970
One hundred and we display it.

27
00:01:55,070 --> 00:01:58,540
We can also modify the integer re-appointed to in a similar manner.

28
00:01:58,550 --> 00:02:02,820
There's another better way to initialize a unique pointer and I'll show you that in a little bit.

29
00:02:03,200 --> 00:02:08,000
It's also possible to create a raw pointer variable and then initialize unique pointer variable using

30
00:02:08,000 --> 00:02:09,070
that raw pointer.

31
00:02:09,080 --> 00:02:13,700
I'm not going to describe that since it's not good practice to do since you're referring to an object

32
00:02:13,700 --> 00:02:20,180
on the heap from a smart pointer and from a raw pointer not something you typically want the unique

33
00:02:20,180 --> 00:02:21,470
pointer has many methods.

34
00:02:21,470 --> 00:02:23,140
But here are some useful ones.

35
00:02:23,270 --> 00:02:29,800
In this case we again have a unique pointer p one that points to the integer 100 on the heap.

36
00:02:29,930 --> 00:02:33,470
The get method returns a pointer to the managed object.

37
00:02:33,470 --> 00:02:37,820
You don't often need to use this method but it can be useful when you're working with libraries that

38
00:02:37,820 --> 00:02:39,750
use raw pointers.

39
00:02:39,860 --> 00:02:45,770
The reset method sets the pointer to NULL pointer in the memory it points to will be released.

40
00:02:45,770 --> 00:02:52,070
Also notice that we can check if a pointer is initialized using a simple IF statement as in if P1 in

41
00:02:52,070 --> 00:02:58,610
this example the if block won't execute since we just reset the pointer to NULL pointer we can also

42
00:02:58,610 --> 00:03:02,050
compare unique pointers using relational operators.

43
00:03:02,420 --> 00:03:08,330
Of course unique pointers as well as other smart pointer types allow us to point to user defined types.

44
00:03:08,450 --> 00:03:14,570
In this example we're creating a unique pointer that will point to an account object and we initialize

45
00:03:14,570 --> 00:03:17,120
it to point to the Larry account.

46
00:03:17,120 --> 00:03:19,510
Notice the syntax is as you would expect.

47
00:03:19,640 --> 00:03:23,360
We use a count as the template argument in the unique pointer declaration.

48
00:03:23,360 --> 00:03:29,360
What this says is that the unique pointer P1 will manage an account object on the heap and we're creating

49
00:03:29,360 --> 00:03:32,810
that account object in the initializer list.

50
00:03:32,810 --> 00:03:35,760
Now we can use this pointer as we would use a raw pointer.

51
00:03:35,810 --> 00:03:40,850
We can dereference to get the account object as well as access the account object member methods via

52
00:03:40,850 --> 00:03:45,860
the member selection or error operator and again when P one goes out of scope.

53
00:03:45,920 --> 00:03:52,340
The heat storage associated with the account object is deallocated as we said unique pointers can't

54
00:03:52,340 --> 00:03:54,090
be copied or assigned.

55
00:03:54,170 --> 00:03:59,330
In this example we create a vector that will contain unique pointers to integers and we also create

56
00:03:59,330 --> 00:04:04,100
a pointer which is a unique pointer to an int and it points to the image on the heap which has been

57
00:04:04,100 --> 00:04:05,730
initialized to 100.

58
00:04:05,780 --> 00:04:12,180
We can't simply push back that unique pointer to the vector because that implies a copy of the object.

59
00:04:12,260 --> 00:04:16,620
And since any pointers can't be copied this will give you a compiler error.

60
00:04:16,670 --> 00:04:19,920
However we can use move semantics to move the pointer.

61
00:04:19,970 --> 00:04:24,750
In this case PCR gives up ownership of the pointer and it's moved to the vector.

62
00:04:25,020 --> 00:04:30,890
The vector now owns the pointer and Peter will be set to NULL pointer when the vector goes out of scope.

63
00:04:30,920 --> 00:04:35,180
It will deallocate all its elements in the integer on the heap will be deallocated correctly.

64
00:04:35,180 --> 00:04:40,400
Now let's see another better way to initialize unique pointers since C++ 14.

65
00:04:40,490 --> 00:04:43,130
We can use the make unique function.

66
00:04:43,190 --> 00:04:49,070
This function returns a unique pointer of the specified type and it allows us to pass initialization

67
00:04:49,070 --> 00:04:52,460
values into the constructor for the managed object.

68
00:04:52,520 --> 00:04:59,390
So in the first example we declare P1 as a unique pointer to an integer and use make unique to initialize

69
00:04:59,390 --> 00:05:03,680
the pointer and create the managed object all in one step.

70
00:05:03,680 --> 00:05:08,440
Notice that in this case we're not using the new keyword in the second example.

71
00:05:08,450 --> 00:05:11,390
P2 is a unique pointer to an account object.

72
00:05:11,570 --> 00:05:17,180
And again we use make unique and provide the template argument account as well as the initialization

73
00:05:17,180 --> 00:05:20,660
values which will be used by the account constructor.

74
00:05:20,810 --> 00:05:24,490
Again in this case we don't use the new keyword.

75
00:05:24,500 --> 00:05:28,280
The last example works the same way except we're using the auto keyword.

76
00:05:28,290 --> 00:05:33,840
Let the compiler deduce the type of P3 based on what makes unique returns.

77
00:05:33,890 --> 00:05:36,700
In this case you need a pointer to a player object.

78
00:05:36,740 --> 00:05:42,290
The auto keyword can be very useful here since it makes the code more readable and more readable.

79
00:05:42,290 --> 00:05:48,890
Now let's head over to the ID and go through some examples of using unique pointers in life code.

80
00:05:48,890 --> 00:05:54,930
Ok so I'm back in the IDM and the Section 17 workspace in the unique pointer's project.

81
00:05:54,950 --> 00:05:57,530
Now there's a lot of stuff going on here but it started out slow.

82
00:05:57,530 --> 00:05:59,630
You can see that in the source tree.

83
00:05:59,630 --> 00:06:05,330
Here we have our account hierarchy including our printable interface so this is the one that's using

84
00:06:05,330 --> 00:06:09,500
dynamic polymorphism with that abstract base class account.

85
00:06:09,510 --> 00:06:12,280
I'm going to use that in a minute using unique pointers in a vector.

86
00:06:12,380 --> 00:06:13,700
But before we get there.

87
00:06:13,700 --> 00:06:17,410
Let's just play around with a real simple class called test that I wrote right here.

88
00:06:17,510 --> 00:06:23,540
It starts on 9:12 you can see that I get a class test and it's got an integer as an instance variable.

89
00:06:23,540 --> 00:06:26,990
It's got a couple of constructors one just initializes data to zero.

90
00:06:27,000 --> 00:06:31,730
That's the no args constructor and the other constructor just initializes data to whatever is passed

91
00:06:31,730 --> 00:06:32,310
in.

92
00:06:32,660 --> 00:06:37,610
I've got to get data a method that returns that data and a destructor that just says Hi I'm a destructor

93
00:06:37,610 --> 00:06:41,530
real simple so let's create a test object just to be sure that this works OK.

94
00:06:41,630 --> 00:06:47,330
So let's create a test object called T-1 will initialize it to a thousand and when we run this because

95
00:06:47,330 --> 00:06:51,380
it's on the stack we should get the constructor and a destructor being called.

96
00:06:51,380 --> 00:06:53,630
And you can see that's exactly what's happening here.

97
00:06:53,630 --> 00:06:57,760
Test constructor with the thousand tested structure with a thousand perfect.

98
00:06:57,770 --> 00:07:03,590
Now let's do it with a pointer and what we'll do is we'll just modify this slightly we'll say Prince

99
00:07:03,710 --> 00:07:10,040
T-1 is a new test and will still use the thousand.

100
00:07:10,100 --> 00:07:14,250
Now obviously if I don't delete it I'm going to leak memory secrecy.

101
00:07:14,270 --> 00:07:16,060
That's exactly what happened here right.

102
00:07:16,070 --> 00:07:19,670
My test constructor was called but the destructor was never called.

103
00:07:19,700 --> 00:07:27,470
So as we've already learned what we have to do is we have to say delete T-1 And now when we run we'll

104
00:07:27,470 --> 00:07:31,040
have both the constructor and the destructor called in we're not going to leave any memory.

105
00:07:31,040 --> 00:07:32,300
That's exactly what we want.

106
00:07:32,300 --> 00:07:37,640
This is using raw pointers what we want to do now is use different kinds of smart pointers in the next

107
00:07:37,640 --> 00:07:38,770
couple of videos.

108
00:07:38,870 --> 00:07:44,030
In this video we're using a unique pointer so I'm going to comment this code out and we'll do the same

109
00:07:44,030 --> 00:07:46,460
thing using a unique pointer.

110
00:07:46,460 --> 00:07:49,820
So the first thing we want to do is we want to declare the unique pointer.

111
00:07:50,180 --> 00:07:56,370
So we're going to say Studd unique pointer and now we need a template parameter.

112
00:07:56,390 --> 00:07:58,990
This is the type of class that we want to reference.

113
00:07:59,000 --> 00:08:00,830
In this case it's test.

114
00:08:01,220 --> 00:08:07,310
Later on we're going to use a count but it can really be any class you want and we want a call pointer

115
00:08:07,310 --> 00:08:15,140
let's call it T-1 And now we'll use the new way of creating it will say new test and give it the constructor

116
00:08:15,200 --> 00:08:17,180
parameter.

117
00:08:17,210 --> 00:08:18,620
All right so what's that going to do.

118
00:08:18,620 --> 00:08:19,920
Let's walk through this one.

119
00:08:19,940 --> 00:08:25,940
We're creating a variable called T-1 which is a unique pointer to a test object and we're instantiating

120
00:08:25,940 --> 00:08:28,640
that test object right here and initializing it to 100.

121
00:08:28,640 --> 00:08:33,360
So in this case we've got that unique pointer pointing to this heap object right here.

122
00:08:33,710 --> 00:08:36,410
Notice there's no delete T-1 necessary.

123
00:08:36,410 --> 00:08:40,070
What's going to happen here is the constructor will be called and then the destructor will be called

124
00:08:40,130 --> 00:08:41,840
automatically like we've seen.

125
00:08:41,840 --> 00:08:43,280
So let's run that.

126
00:08:43,280 --> 00:08:44,820
And you could see right here.

127
00:08:44,870 --> 00:08:48,030
Test constructor for 100 test destructor for 100.

128
00:08:48,050 --> 00:08:49,670
We never called Delete.

129
00:08:49,670 --> 00:08:53,150
We did call on you because that's the style that we used to run that one.

130
00:08:53,150 --> 00:08:55,040
So now let's use the make unique function.

131
00:08:55,040 --> 00:08:57,230
Do the same thing so we'll say again stood.

132
00:08:57,650 --> 00:09:04,640
And again we're going to point to a test object to call this T-2 and it will simply say equals stood.

133
00:09:04,820 --> 00:09:12,500
Make unique and the first thing we want to do is we want to pass in the template argument which is test

134
00:09:13,310 --> 00:09:16,920
followed by whatever constructor or data we want to pass it.

135
00:09:16,920 --> 00:09:23,210
So let's say this is a thousand and this syntax might look a little odd but it really is pretty straightforward.

136
00:09:23,210 --> 00:09:25,970
Again I'm creating a unique pointer to a test.

137
00:09:26,000 --> 00:09:31,550
It's called T-2 and I'm using the make unique function to do it while the make unique function can make

138
00:09:31,640 --> 00:09:32,960
any kind of unique pointer.

139
00:09:33,080 --> 00:09:37,550
So we have to tell it what kind of unique pointer we want and that's what we're doing right here.

140
00:09:37,550 --> 00:09:43,070
Once we do that the piece here inside the Perrin's we're here the thousand that is the argument that

141
00:09:43,070 --> 00:09:44,800
you want to pass into the constructor.

142
00:09:44,790 --> 00:09:48,120
That's going to call this constructor right here on line 17.

143
00:09:48,290 --> 00:09:50,330
So now what we'll have is we'll have to.

144
00:09:50,330 --> 00:09:52,780
You need pointers both on the stack.

145
00:09:52,820 --> 00:09:57,470
Both will be constructed and when they're in they go out of scope the heap memory that they point to

146
00:09:57,470 --> 00:10:01,490
will be destroyed automatically so we don't have to call delete and let's run that.

147
00:10:01,490 --> 00:10:04,770
And you can see here test constructor for 100 for a thousand.

148
00:10:04,760 --> 00:10:06,500
And then we're destroying both of them.

149
00:10:06,590 --> 00:10:07,640
So that's pretty cool.

150
00:10:07,670 --> 00:10:13,220
We really had nothing to do in this case right here on 9:28 with the make unique function we didn't

151
00:10:13,220 --> 00:10:17,270
even have to use the new keyword at all and that's one of the things that you'll hear about modern C

152
00:10:17,270 --> 00:10:17,770
post-flood.

153
00:10:17,810 --> 00:10:21,880
You don't have to use new you don't have to use delete you just use smart pointers and they handle it

154
00:10:21,880 --> 00:10:22,220
all.

155
00:10:22,370 --> 00:10:26,170
And for the most part that's true but there are some cases where you still have to use it.

156
00:10:26,600 --> 00:10:29,120
OK so that's that's a good example right here.

157
00:10:29,120 --> 00:10:30,770
Now let's do another example.

158
00:10:30,770 --> 00:10:38,270
Suppose that I want to create another unique pointer and we'll call this one T-3 and it will also be

159
00:10:38,470 --> 00:10:39,670
to a test.

160
00:10:39,710 --> 00:10:41,050
Let's just call it T-3.

161
00:10:41,060 --> 00:10:43,240
Just like that and it's initialized.

162
00:10:43,250 --> 00:10:47,480
Remember this is an object so it's going to call a constructor for the unique pointer just not pointing

163
00:10:47,480 --> 00:10:48,380
anywhere now.

164
00:10:48,380 --> 00:10:49,370
So now what do we do.

165
00:10:49,370 --> 00:10:53,210
Can we say T-3 equals t one.

166
00:10:53,930 --> 00:10:59,240
Well I can't do that because I am not allowed to assign unique pointers and you can see the error right

167
00:10:59,240 --> 00:11:01,340
here use of the deleted function.

168
00:11:01,340 --> 00:11:05,330
It's a long winded error basically telling you that that operator error you kind of see it over here.

169
00:11:05,330 --> 00:11:09,110
The error message is kind of telling you that that operator equal has been deleted.

170
00:11:09,110 --> 00:11:10,690
You don't have access to it.

171
00:11:10,700 --> 00:11:15,890
Same thing if you tried to copy construct it won't let you because you you're not allowed to copy or

172
00:11:15,890 --> 00:11:17,230
assign unique pointers.

173
00:11:17,510 --> 00:11:18,760
You can move them.

174
00:11:18,770 --> 00:11:26,690
So what we can do is we can say stood move to one and what that's going to do it's going to move the

175
00:11:26,690 --> 00:11:30,550
ownership of that test object on the heap from 2083.

176
00:11:30,560 --> 00:11:35,900
So now T-3 will be referring to it owning it and T-1 will have a null pointer in it.

177
00:11:35,900 --> 00:11:39,830
So we can run this and you can see everything works exactly the same.

178
00:11:39,950 --> 00:11:44,810
And we can actually test right here we could say if not T-1.

179
00:11:44,910 --> 00:11:49,850
So if T1 is not pointing anywhere in other words if T1 is a null pointer then we could just simply say

180
00:11:50,490 --> 00:11:55,210
See out and do something like T-1 is null pointer.

181
00:11:55,220 --> 00:11:59,940
So the way that this is possible or X will end that line here.

182
00:12:00,200 --> 00:12:09,880
And we should see that display helps me put that present back in and there you go you can see the output

183
00:12:09,880 --> 00:12:11,660
right there is one is no pointer.

184
00:12:11,660 --> 00:12:13,250
That's exactly what we expect right.

185
00:12:13,360 --> 00:12:19,050
Because when you move the ownership from T1 to T-3 T-3 now owns that object.

186
00:12:19,040 --> 00:12:20,110
The one is now.

187
00:12:20,290 --> 00:12:23,130
It can't own the object because we're not sharing ownership.

188
00:12:23,230 --> 00:12:29,370
Now let's create some unique pointers to accounts and the way we can do that is really really straightforward

189
00:12:29,410 --> 00:12:31,370
again and either me at this or.

190
00:12:31,390 --> 00:12:38,320
So it does not keep displaying and what we could say is we could say that we want a unique pointer to

191
00:12:38,320 --> 00:12:40,350
an account.

192
00:12:40,490 --> 00:12:45,390
I remember this is a base class pointer now which is what we want because we want dynamic polymorphism.

193
00:12:45,730 --> 00:12:52,350
And what do we want to call it let's call it a one and we'll use make unique.

194
00:12:52,360 --> 00:12:56,740
So now what are we pointing to we can't say a count because it counts as an abstract base class.

195
00:12:56,800 --> 00:13:00,060
So we have to have one of those types of account one of our concrete classes.

196
00:13:00,070 --> 00:13:02,920
So in this case that said we want to point to a checking account

197
00:13:07,110 --> 00:13:11,360
in now what are the constructor parameters for a checking account where we can semo.

198
00:13:11,910 --> 00:13:15,320
And let's say $5000.

199
00:13:15,930 --> 00:13:21,570
And that should do it at this point we can use that object however we want but we have to get to the

200
00:13:21,570 --> 00:13:21,960
object.

201
00:13:21,950 --> 00:13:27,720
So if I want to display that object I could simply say dereference a one member.

202
00:13:27,750 --> 00:13:28,950
A One is a pointer.

203
00:13:28,950 --> 00:13:34,380
So if I dereference a want I get that checking account object and it's going to call our overloaded

204
00:13:34,380 --> 00:13:36,380
insertion operator that we've defined.

205
00:13:36,520 --> 00:13:40,970
So let's see if it does let's get rid of that extra Pirenne right here.

206
00:13:41,190 --> 00:13:43,030
And let's give this a run.

207
00:13:43,920 --> 00:13:45,520
And there you go checking account.

208
00:13:45,540 --> 00:13:46,800
Moe $5000.

209
00:13:46,800 --> 00:13:49,140
Pretty cool.

210
00:13:49,140 --> 00:13:52,020
Of course we can use the object in any which way we want.

211
00:13:52,020 --> 00:14:01,410
We could say a one and we could say deposit another $5000 and let's display the object again.

212
00:14:01,410 --> 00:14:06,420
So you can see we're using dereferencing and we're using the arrow operator here as well to access the

213
00:14:06,420 --> 00:14:08,300
actual object that we're pointing to.

214
00:14:08,400 --> 00:14:14,160
So now we can build and run and you could see that mow has 5000 and 10000.

215
00:14:14,190 --> 00:14:14,530
All right.

216
00:14:14,550 --> 00:14:15,480
Pretty cool.

217
00:14:15,480 --> 00:14:16,880
Now let's do a couple of more.

218
00:14:16,920 --> 00:14:23,070
Let's create a vector and what we can do here is we can create a vector in that vector is going to be

219
00:14:23,070 --> 00:14:31,270
a vector of unique pointers and those unique pointers will point to account objects.

220
00:14:31,890 --> 00:14:37,410
OK so again it's a vector of unique pointers and those unique pointers are going to be referencing account

221
00:14:37,440 --> 00:14:38,220
objects.

222
00:14:38,220 --> 00:14:42,450
And we could just call this accounts simple as that.

223
00:14:42,510 --> 00:14:45,630
And then what we can do is we can create some account objects right.

224
00:14:45,630 --> 00:14:49,740
But in this case we're going to create them on the heap because we've got pointers to them and we're

225
00:14:49,740 --> 00:14:53,970
going to create a savings or checking and a trust and I'll copy that code over just to save a little

226
00:14:53,970 --> 00:14:55,380
typing time.

227
00:14:56,100 --> 00:14:58,530
OK so I copied it over and you can see what I'm doing.

228
00:14:58,530 --> 00:15:04,890
I'm adding checking account James with the thousand balance to the accounts vector and I'm doing that

229
00:15:04,890 --> 00:15:10,140
using the push back method and I'm also using make unique because remember this is a vector of unique

230
00:15:10,140 --> 00:15:10,790
pointers.

231
00:15:10,890 --> 00:15:14,860
So I'm adding James Billiam Bobby a checking a savings and a trust account.

232
00:15:14,970 --> 00:15:16,580
So that's pretty easy no.

233
00:15:16,590 --> 00:15:20,970
We need to do is loop through that vector and display those account objects right.

234
00:15:20,970 --> 00:15:21,950
So let's do that.

235
00:15:22,140 --> 00:15:27,040
We'll say for then we can we can use a arranged base for loop here and I can say for auto.

236
00:15:27,240 --> 00:15:33,090
And let's just call that a CC in accounts which is my collection.

237
00:15:33,090 --> 00:15:37,900
And at this point we really need to do is just say stood out.

238
00:15:38,280 --> 00:15:38,740
Right.

239
00:15:38,800 --> 00:15:44,000
Dereferenced A.S.C. which is my account and display a new line.

240
00:15:44,010 --> 00:15:46,840
Now this won't compile when I try to compile this.

241
00:15:46,920 --> 00:15:52,470
I want to get an error right here and the problem is this is doing copy right where copying each of

242
00:15:52,470 --> 00:15:55,150
those unique pointers that's in the account vector.

243
00:15:55,170 --> 00:16:00,420
But we can't we're not allowed to copy unique pointers so we have to do this by reference and it's even

244
00:16:00,420 --> 00:16:03,180
better if we do it by Consta reference.

245
00:16:03,270 --> 00:16:09,830
So now we can run our program and you'll see that we're displaying James Billie and Bobbi's accounts.

246
00:16:10,150 --> 00:16:10,620
OK.

247
00:16:10,830 --> 00:16:15,320
And notice that we didn't do a single delete here right.

248
00:16:15,330 --> 00:16:20,610
Memory is being cleared up automatically for us if we really wanted to see those destructors called

249
00:16:20,940 --> 00:16:26,490
we can go into our account classes and just change that destructor from the default destructor to actually

250
00:16:26,490 --> 00:16:31,290
just put some code in there that says hey I'm being destructed or something like that but they are being

251
00:16:31,290 --> 00:16:32,680
called and that's pretty cool.

252
00:16:32,730 --> 00:16:35,730
In the next video what we'll do is we'll learn about shared pointers.
