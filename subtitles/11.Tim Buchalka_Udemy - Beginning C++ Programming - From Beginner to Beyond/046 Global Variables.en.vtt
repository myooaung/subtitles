WEBVTT
1
00:00:05.460 --> 00:00:12.330
In our example programs we've declared are variables within the curly braces of the main function these

2
00:00:12.330 --> 00:00:18.240
variables are called local variables because their scope or visibility is limited to the statements

3
00:00:18.330 --> 00:00:22.070
in the main function that follow the declaration of the variable.

4
00:00:22.080 --> 00:00:23.770
This is generally what you want to do.

5
00:00:23.910 --> 00:00:28.020
However sometimes you see variables declared outside of any function.

6
00:00:28.320 --> 00:00:33.780
These variables are called global variables and they can be accessed from any part of your program.

7
00:00:34.050 --> 00:00:39.250
Unlike local variables global variables are automatically initialized to 0.

8
00:00:39.270 --> 00:00:42.480
We'll talk more about scope and visibility as the course progresses.

9
00:00:42.480 --> 00:00:47.400
However I wanted to introduce you to this concept here since there is a lot of code out there aimed

10
00:00:47.400 --> 00:00:52.520
at getting C++ programmers that uses global variables in their examples.

11
00:00:52.530 --> 00:00:56.550
Global variables have their place but they also come with some potential problems.

12
00:00:56.550 --> 00:01:01.650
Since global variables could be accessed by any part of the program this means that can potentially

13
00:01:01.650 --> 00:01:03.560
be changed from any part of the program.

14
00:01:03.840 --> 00:01:08.820
So if you've got a program that's thousands of lines of code this can make finding errors and debugging

15
00:01:08.820 --> 00:01:09.660
more difficult.

16
00:01:09.870 --> 00:01:14.310
Let me show you the example of using global variables in case you see code like this out there as you

17
00:01:14.310 --> 00:01:17.570
study C++.

18
00:01:17.670 --> 00:01:24.190
I'm in the code like ID and you can see that I've declared a variable called age and age is declared

19
00:01:24.190 --> 00:01:27.610
right here and it's within the scope of main.

20
00:01:27.640 --> 00:01:31.440
What that means is that this is a local variable.

21
00:01:31.480 --> 00:01:37.180
In other words it's local to this function so I can use age within this function.

22
00:01:37.180 --> 00:01:42.860
So for example here I'm using age and the compiler is going to say OK which age are we talking about.

23
00:01:43.060 --> 00:01:48.930
And is going to find the age right here so if I run this it will replace age with 18.

24
00:01:48.940 --> 00:01:51.510
This is the way we're going to program in this course.

25
00:01:51.520 --> 00:01:54.940
However you may see code out there that looks a little bit different.

26
00:01:54.940 --> 00:01:56.680
Let me show you how that works.

27
00:01:56.710 --> 00:02:01.270
You may see code out there where this is not declared inside of main.

28
00:02:01.380 --> 00:02:05.890
Instead it's declared outside of main.

29
00:02:05.900 --> 00:02:11.370
This makes age a global variable which means that it can be accessed from anywhere in the program.

30
00:02:12.020 --> 00:02:15.460
So now what happens when the compiler sees age here.

31
00:02:15.530 --> 00:02:19.300
First it looks locally to see if it has a declaration of age.

32
00:02:19.310 --> 00:02:20.960
In this case it does not.

33
00:02:21.020 --> 00:02:25.310
Then it looks globally to see if H has been declared at the global level.

34
00:02:25.370 --> 00:02:29.850
It has it finds it right here and now it prints out a teen.

35
00:02:30.020 --> 00:02:32.660
OK so that's an example of a global variable.

36
00:02:32.670 --> 00:02:37.940
It's the concept again is pretty straightforward and it's possible to have both global variables and

37
00:02:37.940 --> 00:02:41.160
local variables so I could do something like this.

38
00:02:41.180 --> 00:02:48.620
I could say it age is 16 and notice that now I have two variables named age.

39
00:02:48.620 --> 00:02:51.270
I've got one that's local and one that's global.

40
00:02:51.290 --> 00:02:57.220
When the compiler sees the use of age in the output statement first it looks locally.

41
00:02:57.470 --> 00:03:01.880
It looks right here it finds this age and it's going to use 16 here.

42
00:03:01.910 --> 00:03:06.870
It will not use this one so this one shadows the outer global variable.

43
00:03:06.890 --> 00:03:08.960
That's really all there is to global variables.

44
00:03:08.960 --> 00:03:13.940
Lots of times you'll see code as I mentioned where you won't see this here at all and everything is

45
00:03:13.940 --> 00:03:15.130
global.

46
00:03:15.260 --> 00:03:20.150
They're OK for teaching purposes but it's really not a good practice to start using global variables

47
00:03:20.150 --> 00:03:21.160
all of your code.
