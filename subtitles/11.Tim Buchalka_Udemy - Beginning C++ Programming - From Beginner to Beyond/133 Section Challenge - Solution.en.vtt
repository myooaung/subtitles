WEBVTT
1
00:00:05.700 --> 00:00:12.330
Welcome to the section 12 challenge solution I'm in the section 12 workspace and the challenge solution

2
00:00:12.360 --> 00:00:13.140
project.

3
00:00:13.500 --> 00:00:19.820
And before I forget we're going to write those two functions but right here on line 1 0 8.

4
00:00:19.830 --> 00:00:22.530
Don't forget to free up the storage.

5
00:00:22.850 --> 00:00:26.550
OK I was going to get into the functions and I knew it was probably going to forget to mention this

6
00:00:26.580 --> 00:00:32.280
but remember that function that we're going to write this function apply all allocate storage from the

7
00:00:32.280 --> 00:00:35.380
heap when we're finished with it we need to release it.

8
00:00:35.400 --> 00:00:38.830
So we want to say delete square brackets results.

9
00:00:38.850 --> 00:00:39.420
All right.

10
00:00:39.420 --> 00:00:39.790
Perfect.

11
00:00:39.780 --> 00:00:41.810
Now let's go right those functions.

12
00:00:41.910 --> 00:00:45.960
First thing we'll do is we'll write the print function the print function is really easy to understand

13
00:00:45.960 --> 00:00:47.170
and here it is right here.

14
00:00:48.060 --> 00:00:48.570
OK.

15
00:00:48.710 --> 00:00:51.640
So what does print expect and here you can see a call to print.

16
00:00:51.650 --> 00:00:53.110
Let me scroll up just a little bit.

17
00:00:53.120 --> 00:00:55.730
You can see it right there.

18
00:00:55.760 --> 00:00:58.980
Here you can see it called to print right here on line 97.

19
00:00:59.030 --> 00:01:05.240
You can see what's happening I'm calling print and I'm passing in an array right which is the address

20
00:01:05.330 --> 00:01:10.790
of an integer in this case and that just happens to be the first integer in this array right here.

21
00:01:11.180 --> 00:01:16.490
And then passing in array one size which is a constant defined to 5.

22
00:01:16.490 --> 00:01:23.210
Now this function expects a constant pointer pointing to a constant so I can't change the pointer and

23
00:01:23.210 --> 00:01:25.830
I can't change what it's pointing to in this case.

24
00:01:25.880 --> 00:01:31.700
So any mistakes I make in here I want caught because I have no plans of changing anything here I'm not

25
00:01:31.700 --> 00:01:36.380
modifying the pointer or what it points to and I'm passing in the size.

26
00:01:36.380 --> 00:01:37.380
So what am I doing here.

27
00:01:37.490 --> 00:01:42.850
Just simply displaying that square bracket and then I'm just using a real simple for loop.

28
00:01:42.860 --> 00:01:47.930
There is my that's my loop very well I'm starting at 0 and I'm going again less than size.

29
00:01:48.050 --> 00:01:49.580
Size in this case is five.

30
00:01:49.580 --> 00:01:58.550
So I'm going 0 1 2 3 4 and I stop and that's exactly how that array is indexed at each iteration.

31
00:01:58.550 --> 00:02:02.140
I'm just displaying A-R are Sabai now right here.

32
00:02:02.150 --> 00:02:09.490
I'm using pointer subscript notation.

33
00:02:09.680 --> 00:02:18.050
I could very easily have used pointer offset notation right which becomes a r r Plus II and dereference

34
00:02:18.050 --> 00:02:20.600
that guy exactly the same.

35
00:02:20.600 --> 00:02:22.220
They both mean exactly the same.

36
00:02:22.220 --> 00:02:24.130
So in either one you could use.

37
00:02:24.560 --> 00:02:31.370
OK so at this point I'm looping through there when I hit five I stop and I've displayed all those values

38
00:02:31.370 --> 00:02:31.580
here.

39
00:02:31.580 --> 00:02:37.000
So this will display one two three four five and a square bracket and then a new line at the end and

40
00:02:37.000 --> 00:02:38.820
that will be the output you see from here.

41
00:02:39.050 --> 00:02:41.140
OK so hopefully you've got this function.

42
00:02:41.210 --> 00:02:43.440
It's a pretty simple function to write.

43
00:02:43.490 --> 00:02:49.280
Most likely if you had any issues with this it was probably right in here maybe you did and I'd less

44
00:02:49.280 --> 00:02:54.310
than or equal to size when you had an off by one error and maybe you printed some garbage.

45
00:02:54.380 --> 00:02:55.700
That's a very common error.

46
00:02:55.790 --> 00:02:58.510
If you use the debugger that probably helped you out.

47
00:02:58.660 --> 00:03:00.380
So let me clear that.

48
00:03:00.380 --> 00:03:01.970
Now let's go in right.

49
00:03:02.150 --> 00:03:05.810
The main function here the Apply all function.

50
00:03:05.810 --> 00:03:09.060
Now in this case this is how I've defined this function we know it.

51
00:03:09.170 --> 00:03:13.880
It returns a pointer to an integer right cause it needs to return the address of that newly allocated

52
00:03:13.880 --> 00:03:15.630
space on the heap.

53
00:03:15.860 --> 00:03:23.920
It expects array 1 which is a pointer to an integer and the size of that array and array 2 which is

54
00:03:23.920 --> 00:03:27.590
a pointer to the other array and the size of that array.

55
00:03:27.610 --> 00:03:30.310
So that's what we're passing into this function.

56
00:03:30.340 --> 00:03:33.700
I've declared everything is conc all these pointers that way.

57
00:03:33.790 --> 00:03:37.300
I'm not messing with pointers and I'm not messing with what they're pointing to.

58
00:03:37.300 --> 00:03:41.980
I've got no business changing those two arrays that are coming in I'm just building a third array which

59
00:03:41.980 --> 00:03:43.270
I'm returning.

60
00:03:43.270 --> 00:03:44.980
So here is the third array.

61
00:03:45.100 --> 00:03:46.510
It's called new array.

62
00:03:46.570 --> 00:03:51.970
Right now it's just a null pointer and it's a pointer to an integer an address of that first integer

63
00:03:51.970 --> 00:03:53.810
in that new array that I want to create.

64
00:03:54.160 --> 00:03:56.490
And this is me creating it right here.

65
00:03:56.660 --> 00:03:57.550
New Int.

66
00:03:57.670 --> 00:04:05.060
And this is going to be 15 in this example because I'm passing in a 5 and a 3 right here some allocating

67
00:04:05.360 --> 00:04:07.350
15 integers.

68
00:04:09.870 --> 00:04:17.830
On the heap right now that's been allocated that all contains garbage right now and they're indexed

69
00:04:17.840 --> 00:04:20.150
from 0 to 14.

70
00:04:20.680 --> 00:04:21.270
OK.

71
00:04:22.080 --> 00:04:27.690
Now I want to loop through those arrays that were passed into me so that I can start doing some of these

72
00:04:27.690 --> 00:04:28.870
calculations.

73
00:04:28.890 --> 00:04:30.870
So let's do that right now.

74
00:04:30.900 --> 00:04:36.510
First of all I've got this variable called position and position starts at 0 and it's going to go from

75
00:04:36.510 --> 00:04:38.260
0 to 14.

76
00:04:38.310 --> 00:04:42.000
That's what I'm going to use to index into my new array here.

77
00:04:42.540 --> 00:04:44.160
But I've got those other two arrays.

78
00:04:44.160 --> 00:04:49.740
I've got A-R are 1 which was 1 2 3 4 and 5.

79
00:04:49.980 --> 00:04:57.880
In this example and I've got a R2 which was 10 20 and 30.

80
00:04:57.960 --> 00:04:58.940
So this is where we're at.

81
00:04:58.950 --> 00:05:02.750
And obviously we have the sizes that were passed and the five or the three as well.

82
00:05:02.760 --> 00:05:03.750
So what do I want to do.

83
00:05:03.870 --> 00:05:09.210
Well I want to loop through this array as the outer loop because I want this to loop slow.

84
00:05:09.360 --> 00:05:13.850
This is the one on one of the fast because I want to stay at 10 and then go 1 2 3 4 5.

85
00:05:13.860 --> 00:05:17.330
They don't want to go to the 20 and go 1 2 3 4 5 and so forth right.

86
00:05:17.460 --> 00:05:24.150
So my looping variable is going to go from zero to size to which is 0 1 and 2.

87
00:05:24.180 --> 00:05:26.590
Because that size 2 is 3.

88
00:05:26.910 --> 00:05:30.250
And I want to increment by one and then I've got an inner loop.

89
00:05:30.270 --> 00:05:36.090
So I've got a nested loop here where my looping variable is J and it's going to go less than size 1.

90
00:05:36.090 --> 00:05:40.560
So we're dealing with five here and I'm incrementing that by one or two each time.

91
00:05:40.560 --> 00:05:43.590
So look what's happening in the body of the inner loop.

92
00:05:44.040 --> 00:05:50.040
I'm setting the value and again I'm using right here I'm using pointer subscript notation.

93
00:05:50.040 --> 00:05:54.780
I'm setting the value at new array position right position right now.

94
00:05:55.980 --> 00:05:57.750
Is zero.

95
00:05:57.750 --> 00:06:05.150
We set it right up here some setting the value at that new array position to be a r r subject.

96
00:06:05.410 --> 00:06:10.390
Right at the beginning this will be zero times or so.

97
00:06:10.570 --> 00:06:12.380
So I which is also 0.

98
00:06:12.520 --> 00:06:15.240
So that's these two guys right 10 and 1.

99
00:06:15.240 --> 00:06:21.150
So in the SO when we first go through here the second a r r 2 is the one that's looping slower.

100
00:06:21.160 --> 00:06:21.660
Right.

101
00:06:21.670 --> 00:06:31.600
So this guy's going to go one two three four five and this guy's going to go 10 10 10 10 10.

102
00:06:31.600 --> 00:06:32.770
He's not changing.

103
00:06:33.010 --> 00:06:33.270
Right.

104
00:06:33.370 --> 00:06:37.780
So what we're doing is we're multiplying 10 or 10 times one and putting it here.

105
00:06:38.600 --> 00:06:44.270
Right then we're incrementing positions and our position is one and then we're multiplying ten times

106
00:06:44.270 --> 00:06:44.830
two.

107
00:06:44.870 --> 00:06:53.470
We are 20 and we're going all the way down to 50 and along the way we're incrementing that position

108
00:06:53.470 --> 00:06:53.950
variable.

109
00:06:53.950 --> 00:06:56.810
This is the position variable right here.

110
00:06:56.980 --> 00:06:58.650
Now we're done with the inner loop.

111
00:06:58.690 --> 00:07:04.260
So we go back out to the outer loop and now instead of a 10 here we're going to grab the 20 right.

112
00:07:04.270 --> 00:07:06.270
So this guy now refers to 20.

113
00:07:06.400 --> 00:07:14.770
So we're going to do the same thing we're going to go one two three four five and then 20 20 20 20 and

114
00:07:14.770 --> 00:07:23.400
20 and we're multiplying all of these storing the product right in here so we're going to get 20 40

115
00:07:23.640 --> 00:07:27.820
60 80 100 and along the way.

116
00:07:28.020 --> 00:07:35.080
Five six seven eight and nine were incrementing that position variable k then obviously on the last

117
00:07:35.080 --> 00:07:43.410
iteration of the loop we're dealing with 1 2 3 4 and 5 and we're multiplying all of these guys by 30

118
00:07:43.420 --> 00:07:44.710
right here.

119
00:07:44.710 --> 00:07:48.940
So what we're doing here and it and of course this position is being bumped up each time.

120
00:07:48.940 --> 00:07:50.930
So that's what's pointing into the new array.

121
00:07:51.010 --> 00:07:51.420
Right.

122
00:07:51.460 --> 00:07:53.360
So now here we've got what three.

123
00:07:53.350 --> 00:08:03.160
So we got 30 60 90 120 and I ran out of space but there's a 150 there dn at that point that array now

124
00:08:03.310 --> 00:08:08.290
has been allocated on the heap and all those values have been stored into the array.

125
00:08:08.310 --> 00:08:13.300
I clear this now and then all I'm doing here is returning to Array.

126
00:08:13.300 --> 00:08:18.270
So it's returning the address of that first element in the array OK.

127
00:08:18.450 --> 00:08:26.490
Now I'm back here now in my main and I just returned that address right here.

128
00:08:26.540 --> 00:08:34.010
So this point to results is pointing to that array that I just erase that big array of 15 integers from

129
00:08:34.010 --> 00:08:36.530
0 to 14 on the heap.

130
00:08:37.330 --> 00:08:44.330
It's got no name and the only way I get to it is through this results POINAR OK.

131
00:08:44.340 --> 00:08:49.920
Simple as that then I'm using a constant expression here to do to basically calculate this constant

132
00:08:49.920 --> 00:08:53.190
result size which in this case is going to be 15.

133
00:08:53.550 --> 00:08:59.220
And I'm just passing results in 15 to the print function and it's going to print all those values that

134
00:08:59.220 --> 00:08:59.850
we calculate.

135
00:08:59.850 --> 00:09:01.220
So let's give this guy a run

136
00:09:05.730 --> 00:09:11.610
and there's the run you could see array one is 1 2 3 4 5 array 2 is 10 20 30 and then the resulting

137
00:09:11.610 --> 00:09:18.450
array is 15 elements big and it's a function of applying that multiplication of one array to another

138
00:09:18.450 --> 00:09:20.960
array and putting the product in the third array.

139
00:09:21.430 --> 00:09:21.780
OK.

140
00:09:21.780 --> 00:09:23.340
Simple as that.

141
00:09:23.660 --> 00:09:27.720
The debugger might have helped you if you used it if not it's just really a matter of the only tricky

142
00:09:27.720 --> 00:09:32.400
part here is this piece of code right here the nested loop.

143
00:09:32.520 --> 00:09:36.480
And this is just one way to do this you could have done this a lot of other different ways but this

144
00:09:36.480 --> 00:09:40.740
is a really simple way to do it because you keep that position you just keep bumping it up and it's

145
00:09:40.740 --> 00:09:45.180
going to go from zero to 14 and it's as simple as that.

146
00:09:45.180 --> 00:09:49.560
All right so I hope you guys were able to solve the challenge if you did it a different way and you

147
00:09:49.560 --> 00:09:52.020
think it's more efficient or pretty clever.

148
00:09:52.020 --> 00:09:53.730
Let us all know that the simpler.
