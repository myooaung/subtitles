WEBVTT
1
00:00:05.510 --> 00:00:09.710
Welcome back I hope you enjoyed the section 15 challenge.

2
00:00:09.710 --> 00:00:12.390
I'm going to give you my solution here and we'll walk through it.

3
00:00:12.590 --> 00:00:18.080
As always there is a lot of different ways to do this so if your solution is different from mine it's

4
00:00:18.080 --> 00:00:19.530
probably just fine.

5
00:00:19.550 --> 00:00:25.580
Some of the Section 15 workspace and the challenge solution project so I didn't change the account or

6
00:00:25.580 --> 00:00:27.480
the savings account classes at all.

7
00:00:27.500 --> 00:00:29.660
So why don't we start with a checking account class.

8
00:00:29.660 --> 00:00:31.780
This is one of the new classes that we added.

9
00:00:31.790 --> 00:00:34.270
So let me open up the checking account header file.

10
00:00:34.400 --> 00:00:36.340
And let's go through this real quickly.

11
00:00:36.520 --> 00:00:41.060
Now in this case the checking account doesn't add any new attributes right.

12
00:00:41.090 --> 00:00:43.080
So a checking account is an account.

13
00:00:43.100 --> 00:00:48.590
I chose to derive this from account because the checking account has the name and it's got a balance.

14
00:00:48.590 --> 00:00:54.160
The only difference here is that when we withdraw we're doing a $1 and 50 Cent flat fee check fee.

15
00:00:54.320 --> 00:00:54.870
OK.

16
00:00:55.040 --> 00:00:57.920
So other than that it's really very very similar.

17
00:00:57.920 --> 00:01:06.020
We've got our consecrations here which are just our compile time constants here we've got our constructor

18
00:01:06.080 --> 00:01:13.600
that expects a name and if it's not supplied we'll use our default here a balance and that's it right

19
00:01:13.610 --> 00:01:13.970
there.

20
00:01:14.030 --> 00:01:16.680
The PreCheck fee is not a per object thing.

21
00:01:16.700 --> 00:01:18.060
This is a class thing.

22
00:01:18.200 --> 00:01:20.700
So this is why it's a static cost expression.

23
00:01:20.840 --> 00:01:26.030
If it was on a per account basis and obviously you'd want that to be an attribute and you'd want to

24
00:01:26.030 --> 00:01:28.250
pass it into a constructor.

25
00:01:28.250 --> 00:01:34.250
So we've got that we've got our withdraw method because we need to override the behavior for withdraw

26
00:01:34.250 --> 00:01:36.110
to deal with the purchase fee.

27
00:01:36.440 --> 00:01:38.380
The deposit method is fine.

28
00:01:38.390 --> 00:01:42.830
We don't need to change that at all because the way we do deposits is the same way that an account does

29
00:01:42.830 --> 00:01:43.760
a deposit.

30
00:01:43.760 --> 00:01:48.680
Hopefully one of the things that you noticed when you derive these classes from existing classes is

31
00:01:48.680 --> 00:01:53.120
the amount of code you have to write is really minimal in many cases right because all you're doing

32
00:01:53.120 --> 00:01:54.410
is specializing.

33
00:01:54.410 --> 00:02:00.200
The other thing we did here was we created that overloaded insertion operator that works with a checking

34
00:02:00.200 --> 00:02:03.260
account that just makes it really easy to display those.

35
00:02:03.500 --> 00:02:04.480
OK so that's it.

36
00:02:04.490 --> 00:02:06.630
Let's take a look at the implementation.

37
00:02:07.340 --> 00:02:10.510
And as you can see there's really very little code here.

38
00:02:10.520 --> 00:02:12.660
First of all let's look at the constructor.

39
00:02:12.680 --> 00:02:18.380
So there's my checking account constructor it expects the name and the balance and I need to initialize

40
00:02:18.380 --> 00:02:21.470
the account part of me right because I'm derive from a count.

41
00:02:21.470 --> 00:02:27.140
So here I'm invoking my base class constructor and it's the one that takes care of Naiman balance I'm

42
00:02:27.140 --> 00:02:28.560
just passing it over.

43
00:02:28.910 --> 00:02:33.430
And when this comes back we're initialized right at that point.

44
00:02:33.980 --> 00:02:36.920
That's all and that's all we need for a constructor here.

45
00:02:36.920 --> 00:02:38.520
Now what about the withdrawal method.

46
00:02:38.520 --> 00:02:41.670
Well here we are definitely overriding the withdrawal method.

47
00:02:41.960 --> 00:02:45.310
And so here's a withdraw method for the new class my checking account class.

48
00:02:45.320 --> 00:02:50.790
It still expects an amount to withdraw and all we're doing is we're saying OK whatever that amount is.

49
00:02:50.810 --> 00:02:54.820
I'm just adding the per check feel to it which is a dollar fifty in this case.

50
00:02:54.890 --> 00:03:00.320
So whatever I want to withdraw I'm just adding the dollar 50 and then I'm letting the account class

51
00:03:00.320 --> 00:03:01.310
do the withdrawal.

52
00:03:01.400 --> 00:03:02.960
Just like we've done before.

53
00:03:02.960 --> 00:03:05.420
And again I'm returning what it returns.

54
00:03:05.540 --> 00:03:10.790
So if it fails I'll return false if it succeeds I'll return true.

55
00:03:10.910 --> 00:03:16.940
And then the last thing we'll do is our output operator here our insertion OPERATOR This time it expects

56
00:03:16.940 --> 00:03:21.530
a checking account and actually we could have used used a regular account here right because we're not

57
00:03:21.530 --> 00:03:26.720
really adding anything in this class so even if it got sliced that's OK because we're not adding anything

58
00:03:26.720 --> 00:03:27.520
at all.

59
00:03:27.530 --> 00:03:31.580
So that's it that's a pretty simple implementation of that checking account.

60
00:03:31.580 --> 00:03:33.670
Now let's take a look at the trust account.

61
00:03:35.340 --> 00:03:41.160
So here we have our trust account and you can see that the trust account is derived publicly from a

62
00:03:41.160 --> 00:03:47.160
savings account and that's because a trust account has a name a balance and an interest rate.

63
00:03:47.190 --> 00:03:51.000
So one of the savings account behavior will be perfect for that.

64
00:03:51.140 --> 00:03:55.770
I'm overloading the insertion operator here for a trust account as usual.

65
00:03:56.220 --> 00:04:00.790
And now this code looks a little lengthier And the reason for that is all these constants here.

66
00:04:01.050 --> 00:04:01.980
They're handy right.

67
00:04:01.980 --> 00:04:06.870
Here's our default balance Here's a default interest rate you probably could make that 2 or 3 percent

68
00:04:06.870 --> 00:04:09.080
or something just to get some more interesting results.

69
00:04:09.090 --> 00:04:10.360
But I'll leave it at zero.

70
00:04:10.370 --> 00:04:13.530
There's the bonus amount for a deposit that's over $5000.

71
00:04:13.530 --> 00:04:18.530
There's the threshold that's 5000 thousand the maximum withdrawals has three in the most we can withdraw

72
00:04:18.530 --> 00:04:20.880
is 20 percent of the account's value.

73
00:04:20.880 --> 00:04:24.200
So all that information is right in here and these constants.

74
00:04:24.390 --> 00:04:30.060
And the only thing that the trustee account really adds is besides the business logic of course.

75
00:04:30.060 --> 00:04:33.000
Is this attribute right here the number of withdrawals.

76
00:04:33.060 --> 00:04:36.790
So it will set that to zero when we create a trust account object.

77
00:04:36.900 --> 00:04:40.580
And then every time we do a withdrawal that's successful we'll bump it up by one.

78
00:04:40.710 --> 00:04:44.310
And then when we do a withdrawal and it's greater than 3 we'll just fail right there.

79
00:04:44.310 --> 00:04:45.160
Pretty simple.

80
00:04:45.420 --> 00:04:47.800
OK so here's my constructor.

81
00:04:47.910 --> 00:04:52.800
It expects as usual a name a balance and an interest rate you can see that right there and it's got

82
00:04:52.800 --> 00:04:56.050
these defaults right up here that it defaults to.

83
00:04:56.640 --> 00:05:03.470
Here's my deposit which I obviously need to override because I get a $50 bonus whenever I deposit $5000

84
00:05:03.480 --> 00:05:04.220
or more.

85
00:05:04.440 --> 00:05:09.320
And here's my withdraw which again I need to override because our business logic says I'm only allowed

86
00:05:09.320 --> 00:05:15.450
a maximum of three withdrawals per year and each one is up to a maximum of 20 percent of the account's

87
00:05:15.450 --> 00:05:17.010
value or balance.

88
00:05:17.490 --> 00:05:18.440
OK so that's it.

89
00:05:18.450 --> 00:05:22.700
Let's take a look at the implementation file now.

90
00:05:24.090 --> 00:05:26.500
And here's the implementation file for the trust account.

91
00:05:26.670 --> 00:05:28.790
You can see our constructor is up here.

92
00:05:29.010 --> 00:05:34.980
We're again we're receiving the name the balance and the interest rate and all of those guys are really

93
00:05:34.980 --> 00:05:36.860
in my savings account part.

94
00:05:36.870 --> 00:05:37.390
Right.

95
00:05:37.440 --> 00:05:43.520
So I'm invoking my base class constructor right here and I'm passing in name balance and interest rate.

96
00:05:43.530 --> 00:05:47.000
Let it take care of initializing itself when I come back.

97
00:05:47.000 --> 00:05:50.770
I do need to take care of my attribute which is number of withdrawals.

98
00:05:50.790 --> 00:05:55.010
So this is my responsibility and I'm setting that to zero right here.

99
00:05:55.620 --> 00:05:58.260
OK so now let's take a look at the deposit.

100
00:05:58.260 --> 00:06:00.830
So here's the trust account deposit method.

101
00:06:00.840 --> 00:06:07.460
Again it expects an amount and all I'm looking for is that bonus threshold which is $5000.

102
00:06:07.470 --> 00:06:12.360
So if the amount deposited is greater than or equal to that bonus threshold which again in this case

103
00:06:12.360 --> 00:06:18.990
is 5000 then we're just incrementing the amount to deposit by the bonus amount which is the $50.

104
00:06:19.020 --> 00:06:20.350
Simple as that.

105
00:06:20.400 --> 00:06:27.030
I invoke my base classes deposit method has a savings account knows how to deal with the interest rate

106
00:06:27.030 --> 00:06:31.040
and the deposit and I'm returning right here what it returns to me.

107
00:06:31.650 --> 00:06:35.860
And then the last thing we'll do is I'll withdraw method again.

108
00:06:35.880 --> 00:06:39.180
The withdraw method is important because it's got some business logic here.

109
00:06:39.270 --> 00:06:42.440
So I want to check in again here is the amount that I want to withdraw.

110
00:06:42.690 --> 00:06:48.000
So if the number of withdrawals is greater than or equal to the max withdrawals which was that constant

111
00:06:48.000 --> 00:06:54.370
which was three or the amount to withdraw is greater than the balance times the threshold right.

112
00:06:54.480 --> 00:06:57.030
So that's the 20 percent right here.

113
00:06:57.030 --> 00:07:03.240
If either one of those guys is true we don't do that with the withdrawal we return false otherwise we

114
00:07:03.240 --> 00:07:08.130
increment the number of withdrawals and we call our savings account withdraw method and pass in the

115
00:07:08.130 --> 00:07:11.200
account and pass in the amount to withdraw.

116
00:07:11.520 --> 00:07:16.860
So that said you can see that we really aren't writing a lot of new code we're specializing we're tweaking

117
00:07:16.860 --> 00:07:23.850
we're we're refining if you will our behavior based on our business logic and the last thing is this

118
00:07:24.720 --> 00:07:27.810
overloaded insertion operator for a trust account.

119
00:07:27.810 --> 00:07:33.810
In this case I'm also display the number of withdrawals just so that we have that information.

120
00:07:34.080 --> 00:07:35.750
Okay so that's the trust account.

121
00:07:35.760 --> 00:07:39.210
So we've got our two new accounts in the hierarchy now.

122
00:07:39.240 --> 00:07:44.580
So the next thing I want to show you is that account Udal file and the functions that are modified in

123
00:07:44.580 --> 00:07:46.380
there.

124
00:07:46.380 --> 00:07:53.580
So let's look at the changes I made to the account Udal files and you can see that right here I've added

125
00:07:53.580 --> 00:07:59.670
the function prototypes for the checking account class and a trust account class.

126
00:07:59.670 --> 00:08:03.120
You can see that all this code is really really really similar.

127
00:08:03.330 --> 00:08:06.540
And you're going to love what's going to happen in the next section we're going to be able to get rid

128
00:08:06.540 --> 00:08:11.880
of all of this and just create one version that works for all of the accounts once we use polymorphic

129
00:08:11.880 --> 00:08:12.700
functions.

130
00:08:12.720 --> 00:08:16.440
But for now let's just do it this way so that we really understand what's going on.

131
00:08:16.440 --> 00:08:21.320
Again remember we're doing static binding right now so the compiler is binding.

132
00:08:21.480 --> 00:08:26.410
The method calls to the actual types of the objects that its season at compile time.

133
00:08:26.430 --> 00:08:29.010
So there are the function prototypes for these guys.

134
00:08:29.010 --> 00:08:34.510
It's very similar to what we did before and the implementation Farnan here.

135
00:08:34.880 --> 00:08:40.970
Same idea I'll just scroll down just a little bit and you can see here are the helper functions for

136
00:08:40.970 --> 00:08:43.990
the checking account class right here on line 64.

137
00:08:44.420 --> 00:08:49.940
And if we scroll down a little bit further we've got to help her functions for the trust account class.

138
00:08:50.280 --> 00:08:55.320
And as I said they're all exactly the same except what's inside that vector.

139
00:08:56.180 --> 00:08:58.010
OK so now let's look at domain.

140
00:08:58.010 --> 00:09:03.150
Finally here's the main and the beginning is exactly the same as it was before right.

141
00:09:03.150 --> 00:09:06.450
And you remember we had the accounts tests right here.

142
00:09:06.470 --> 00:09:12.410
We put in some account objects into a vector of accounts and then we called display deposit and withdraw

143
00:09:12.410 --> 00:09:13.610
for those accounts.

144
00:09:13.610 --> 00:09:19.160
We did that both for a regular account and a savings account here and now we're just going to do the

145
00:09:19.160 --> 00:09:24.230
same thing again for a checking account so you can see here I'm creating a vector of checking account

146
00:09:24.320 --> 00:09:25.130
objects right.

147
00:09:25.130 --> 00:09:30.890
That's my template argument right here checking account and it's check accounts and I'm creating an

148
00:09:30.890 --> 00:09:36.500
empty checking account one for current one for Spock and one for bone's Let's say I don't want to give

149
00:09:36.620 --> 00:09:40.870
Spock to accounts and that's it.

150
00:09:40.990 --> 00:09:45.680
We're going to call display for check accounts deposit 0 0 0 0 and that to each one of those accounts

151
00:09:45.680 --> 00:09:48.060
and withdraw from those accounts 2000.

152
00:09:48.170 --> 00:09:51.830
And then finally we're going to do the trust account and the trust account.

153
00:09:51.860 --> 00:09:52.950
Same idea.

154
00:09:53.120 --> 00:10:00.260
I'm going to have a vector of trust to count objects and I'm going to create four of them again to construct

155
00:10:00.260 --> 00:10:03.410
this one with no initialization just like I've done before.

156
00:10:03.410 --> 00:10:08.390
And then we'll create Eiffel's Porthos and Aramis the three musketeers and we'll create some accounts

157
00:10:08.390 --> 00:10:09.420
for them.

158
00:10:09.800 --> 00:10:14.570
We'll display them deposit into them and withdraw from them just like we did before.

159
00:10:14.750 --> 00:10:19.820
And then the last thing I'm doing is I'm simply calling withdraw five times some looping five times

160
00:10:19.820 --> 00:10:25.790
and I'm calling with draw on those trust accounts so I expect those to fail right because I'm only allowed

161
00:10:25.790 --> 00:10:32.000
to withdraw three times maximum and I can only withdraw 20 percent of the ballots so I should see a

162
00:10:32.000 --> 00:10:33.760
lot of failures here.

163
00:10:34.160 --> 00:10:35.590
So let's run this.

164
00:10:35.630 --> 00:10:42.170
And there's going to be a lot about pot to go through and you can see we have a clean compile no errors

165
00:10:42.170 --> 00:10:43.130
no warnings.

166
00:10:43.130 --> 00:10:46.320
And I'll scroll up here because there's a lot about pot to go through.

167
00:10:46.580 --> 00:10:51.200
And this is the this is what we had earlier right when we created just the regular accounts here.

168
00:10:51.200 --> 00:10:52.550
We created four of them.

169
00:10:52.730 --> 00:10:56.120
Larry Moe Curly and an unnamed account write a pop.

170
00:10:56.210 --> 00:10:57.280
We're going to display them.

171
00:10:57.290 --> 00:11:00.300
That's what you're seeing right here.

172
00:11:00.380 --> 00:11:04.420
Then we're going to deposit a thousand into them and that's this piece you see right here depositing

173
00:11:04.420 --> 00:11:09.220
two accounts and then we're withdrawing 2000 from them and that's the piece you see right here.

174
00:11:09.410 --> 00:11:12.870
The first to fail because there is insufficient funds.

175
00:11:12.980 --> 00:11:14.290
So that's pretty straightforward.

176
00:11:14.300 --> 00:11:17.330
That's exactly what the default code was in the challenge.

177
00:11:17.330 --> 00:11:22.490
So is this here's my savings accounts and you just scroll up to so you can see that right here.

178
00:11:22.490 --> 00:11:26.960
So we're creating those for savings accounts for Superman Batman and Wonder Woman.

179
00:11:27.140 --> 00:11:32.060
There they are when we display them we're depositing a thousand dollars into them here and then be withdrawing

180
00:11:32.060 --> 00:11:33.020
2000.

181
00:11:33.020 --> 00:11:36.770
So of course the first two will fail because there's insufficient funds.

182
00:11:36.770 --> 00:11:38.170
Just like before.

183
00:11:38.180 --> 00:11:42.830
Now here's the checking the checking is a little different now because our withdrawal methods add a

184
00:11:42.830 --> 00:11:46.100
dollar fifty service fee or a per check fee right.

185
00:11:46.100 --> 00:11:51.410
So here we've got a checking account for an unnamed checking account.

186
00:11:51.440 --> 00:11:55.960
We've got spoke spunk and bones and you can see them right here.

187
00:11:56.630 --> 00:11:59.000
Right here is our display.

188
00:11:59.080 --> 00:12:02.280
There's a name checking account with zero balance.

189
00:12:02.320 --> 00:12:07.230
There is Kerch zero balance Spock and Bones 2000 5000 respectively.

190
00:12:07.420 --> 00:12:14.090
I'm depositing a thousand dollars into each account and then I'm going to withdraw 2000 from each account

191
00:12:14.150 --> 00:12:16.550
exactly the same as we've done before.

192
00:12:16.550 --> 00:12:18.110
So the first two are going to fail.

193
00:12:18.260 --> 00:12:23.090
And you can see that the numbers now are a little different right because we are subtracting the dollar

194
00:12:23.090 --> 00:12:25.990
50 per check fee here.

195
00:12:26.540 --> 00:12:28.580
And these two don't because the withdrawal failed.

196
00:12:28.580 --> 00:12:30.280
But in this case we did withdraw.

197
00:12:30.380 --> 00:12:33.020
So we're assessing the dollar 50 fee.

198
00:12:33.200 --> 00:12:37.330
So you could see that indeed the specialized withdraw method is being called now.

199
00:12:37.430 --> 00:12:41.900
Finally we've got the trustee accounts so there is a code for the trust accounts and I'll scroll that

200
00:12:41.900 --> 00:12:43.340
up right about there.

201
00:12:43.670 --> 00:12:48.560
So here I'm creating IPOs Porthos and Aramis and an unnamed trustee account right here at the beginning

202
00:12:49.280 --> 00:12:55.160
and we're creating some different balances as well as interest rates.

203
00:12:55.160 --> 00:12:58.100
And then we're just displaying the accounts and that's what you're seeing here right.

204
00:12:58.100 --> 00:13:03.320
The unnamed trustee account with zero balance zero percent interest rate has no withdrawals yet.

205
00:13:03.480 --> 00:13:07.460
Here's offas Porthos and Aramis and you can see their information right here.

206
00:13:07.460 --> 00:13:12.410
Notice how all of them have zero withdrawals because we set that in our constructor.

207
00:13:12.410 --> 00:13:16.340
Now we're going to call deposit on each one of them and deposit the thousand dollars.

208
00:13:16.340 --> 00:13:19.300
You could see that that's successful all the way through.

209
00:13:19.640 --> 00:13:22.810
You can also see that we've got the bonus coming in here.

210
00:13:22.890 --> 00:13:29.510
So finally we withdraw $3000 from each account the first two will fail the first one because we don't

211
00:13:29.510 --> 00:13:30.990
have sufficient funds.

212
00:13:31.010 --> 00:13:35.150
The second one because we are exceeding our 20 percent limit.

213
00:13:35.640 --> 00:13:40.650
But the third and fourth one are no problem at all you notice the withdrawals here are now one whereas

214
00:13:40.650 --> 00:13:44.300
the withdrawals on the failed ones are zero.

215
00:13:44.430 --> 00:13:49.560
And then what I'm doing is I'm just calling that same withdraw function five times.

216
00:13:49.560 --> 00:13:55.410
So there's once right here you can see the number of withdrawals increasing and increasing and finally

217
00:13:55.890 --> 00:14:02.700
everything fails as we expect right here because we've exceeded the three withdrawals.

218
00:14:02.940 --> 00:14:04.360
OK so that's it.

219
00:14:04.380 --> 00:14:08.160
I'm sure your solution is different from mine and that's OK.

220
00:14:08.160 --> 00:14:12.930
Take a look at my solution maybe yours is better if it's better post it if you find a bug in mine let

221
00:14:12.930 --> 00:14:15.480
me know please and I'll be glad to fix it.

222
00:14:15.540 --> 00:14:17.330
So I hope you enjoyed this challenge.

223
00:14:17.330 --> 00:14:21.250
I hope you understand a lot about inheritance in the next section.

224
00:14:21.270 --> 00:14:25.920
We're going to crank up the level in inheritance and we're going to talk about polymorphic functions

225
00:14:26.040 --> 00:14:27.330
with inheritance.

226
00:14:27.330 --> 00:14:29.790
And that's going to make all of this even easier.

227
00:14:29.790 --> 00:14:31.070
So stay tuned for that.
