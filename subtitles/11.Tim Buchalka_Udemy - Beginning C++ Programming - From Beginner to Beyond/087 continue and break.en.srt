1
00:00:05,630 --> 00:00:12,030
In this video you'll like it to continue and break statements in C++ that continue and break statements

2
00:00:12,030 --> 00:00:18,870
can be used within all of C++ loop constructs to provide more explicit control over the looping behavior.

3
00:00:19,740 --> 00:00:24,860
Their behavior is really easy to understand when a continued statement is executed in the loop.

4
00:00:24,990 --> 00:00:30,270
No further statements in the body of the loop are executed and control immediately goes directly to

5
00:00:30,270 --> 00:00:33,890
the beginning of the loop for the next iteration.

6
00:00:33,970 --> 00:00:38,140
So you can think of this as Skip processing and the rest of this iteration and go to the beginning of

7
00:00:38,140 --> 00:00:38,970
the loop.

8
00:00:39,100 --> 00:00:43,670
In the case of the while loop and the for loop the condition will immediately be tested again.

9
00:00:44,520 --> 00:00:49,110
When the break statement is executed in the loop no further statements in the body are executed in the

10
00:00:49,110 --> 00:00:50,330
loop is terminated.

11
00:00:50,340 --> 00:00:54,560
So control is transfer to the statement immediately following the loop.

12
00:00:54,930 --> 00:01:00,430
Let's see an example that uses both the continue and break statements.

13
00:01:00,740 --> 00:01:03,260
In this example we have a vector of integers.

14
00:01:03,410 --> 00:01:08,920
Let's assume that this data comes from some sort of device and occasionally we get noise in the data.

15
00:01:08,930 --> 00:01:11,570
The noise is represented by the minus one.

16
00:01:11,810 --> 00:01:14,960
We really don't want to process the noise we want to ignore it.

17
00:01:14,960 --> 00:01:20,690
We also need to stop processing when we get to stop signal which is represented by minus 99.

18
00:01:20,900 --> 00:01:23,670
In this case we can use the range based for loops.

19
00:01:23,690 --> 00:01:29,360
Iterate over all the vector elements at each iteration we can check if the value is minus 99 in which

20
00:01:29,360 --> 00:01:30,760
case we are done.

21
00:01:30,860 --> 00:01:35,900
We could set a flag to done and handle that done boolean in the loop condition as we've done before.

22
00:01:36,080 --> 00:01:37,910
Or we can simply break out of the loop.

23
00:01:38,360 --> 00:01:43,860
In this case we're using the break statement to break out of the loop completely in the else statement.

24
00:01:43,880 --> 00:01:49,550
We know we haven't seen a negative ninety nine so we can check from minus 1 that represents noise if

25
00:01:49,550 --> 00:01:51,470
we see it we can continue.

26
00:01:51,620 --> 00:01:56,770
This stops the iteration and control goes back to the beginning of the loop and a new iteration begins.

27
00:01:56,780 --> 00:02:01,520
Finally if we hit the L statement we know we don't have a minus 99 and we know we don't have a minus

28
00:02:01,520 --> 00:02:02,140
one.

29
00:02:02,180 --> 00:02:04,100
So we process that data.

30
00:02:04,100 --> 00:02:11,000
In this case we just display it in this example we display 1 to 3 continue and break statements are

31
00:02:11,000 --> 00:02:12,670
very very easy to use.

32
00:02:12,770 --> 00:02:14,400
However don't overuse them.

33
00:02:14,660 --> 00:02:19,880
I'm obviously exaggerating here but if you have a loop that has 10 breaks and 12 continues in its body

34
00:02:20,240 --> 00:02:25,910
that's a very complex piece of code to try to understand the less ways that you can come into a loop

35
00:02:25,910 --> 00:02:29,990
and out of the loop the better we can understand and debug it we'll see the breaks didn't.

36
00:02:29,990 --> 00:02:32,710
But again when we talk about infinite loops in the next video.
