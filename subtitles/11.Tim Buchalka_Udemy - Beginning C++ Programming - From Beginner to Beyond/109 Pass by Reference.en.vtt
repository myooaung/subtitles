WEBVTT
1
00:00:05.710 --> 00:00:11.470
So far we've seen that when we pass a parameter to a function the default is passed by value.

2
00:00:11.470 --> 00:00:14.710
That means a copy of the actual parameter is made.

3
00:00:14.710 --> 00:00:18.570
We also saw that when we pass an array into a function we don't make a copy.

4
00:00:18.580 --> 00:00:23.360
Instead we use the location of the array which means we can change it from within the function.

5
00:00:24.010 --> 00:00:28.920
Well sometimes we want to be able to change an actual parameter from within a function as we saw with

6
00:00:28.920 --> 00:00:29.350
the race.

7
00:00:29.350 --> 00:00:33.460
This is achieved by passing in the location of the actual parameter.

8
00:00:33.460 --> 00:00:36.010
We can do this in C++ for any variable type.

9
00:00:36.010 --> 00:00:41.600
Not just arrays by using reference parameters reference parameters create an alias.

10
00:00:41.710 --> 00:00:45.920
So now the formal parameter in the function is an alias to the actual parameter.

11
00:00:46.210 --> 00:00:51.430
No copy is made when you change the form a parameter you're changing the actual parameter.

12
00:00:51.430 --> 00:00:56.740
This is called pass by reference and it's really easy to achieve in C++ by using the ampersand symbol

13
00:00:56.920 --> 00:00:58.270
in the parameter list.

14
00:00:58.360 --> 00:01:04.750
Let's see an example in this example we have a function named scale number.

15
00:01:04.750 --> 00:01:09.990
Notice that the parameter list to the function is not an int named num it's a reference to an int named

16
00:01:09.990 --> 00:01:11.140
name.

17
00:01:11.260 --> 00:01:12.930
That's what the ampersand does.

18
00:01:13.090 --> 00:01:17.800
So now when we use nummy in the function body we're referencing the actual parameter.

19
00:01:18.040 --> 00:01:19.900
Let's walk through this.

20
00:01:20.230 --> 00:01:24.790
In main we declare an integer number and initialize it to 1000.

21
00:01:24.790 --> 00:01:29.020
Then we call the scale number function and pass in the actual parameter number.

22
00:01:29.440 --> 00:01:32.490
We now transfer control to the scale number function.

23
00:01:32.530 --> 00:01:36.420
Since the formal parameter and the scale number function is a reference parameter.

24
00:01:36.430 --> 00:01:39.100
This means that number is an alias for number.

25
00:01:39.160 --> 00:01:41.810
If we change num we're changing number.

26
00:01:42.010 --> 00:01:46.020
Behind the scenes the location of number is being passed into the function.

27
00:01:46.210 --> 00:01:50.120
So the code and scale number checks to see if the number is greater than 100.

28
00:01:50.140 --> 00:01:52.110
In this case it is it's 1 0 0 0 0 0.

29
00:01:52.240 --> 00:01:55.690
So we set number to 100 and the function completes.

30
00:01:55.690 --> 00:02:02.230
When we returned to Main and display number it will display 100 passed by reference can be super useful

31
00:02:02.230 --> 00:02:03.700
for several reasons.

32
00:02:03.700 --> 00:02:07.870
First it allows us to change an actual parameter if we need to.

33
00:02:07.870 --> 00:02:14.170
Second we don't make a copy of the parameter which could be large and take time but we have to be aware

34
00:02:14.170 --> 00:02:16.360
of potentially unwanted changes.

35
00:02:16.360 --> 00:02:23.560
Let's see how we could swap two numbers using pass by reference in this example we're reading a function

36
00:02:23.560 --> 00:02:26.950
that swaps the values of the two integers passed into it.

37
00:02:26.950 --> 00:02:32.490
Take a look at main x is 10 and Y is 20 x and y are first displayed.

38
00:02:32.500 --> 00:02:41.770
And we get 10 20 just as we expect then we call swap in passing x y then we display X and Y again another

39
00:02:41.770 --> 00:02:44.620
20 and 10 we swap them.

40
00:02:44.620 --> 00:02:49.610
Look at the function definition and notice that both A and B are reference parameters.

41
00:02:49.630 --> 00:02:57.550
So when I call this function with x and y a and b become alias's to X and Y respectively in the body

42
00:02:57.550 --> 00:03:04.150
of the function I set temp to A then A to B and then B to temp and we've swapped the two values that

43
00:03:04.150 --> 00:03:06.060
were passed into us.

44
00:03:06.160 --> 00:03:10.660
What do you think would happen if we didn't use pass by reference and we use pass by value.

45
00:03:10.990 --> 00:03:12.640
Well the actuals would be comping.

46
00:03:12.760 --> 00:03:18.040
So we would swap the copies in the function and then return when we get back to main the actuals haven't

47
00:03:18.040 --> 00:03:20.350
changed since we were working with copies.

48
00:03:20.740 --> 00:03:23.970
Let's talk a bit about how parameters are passed into functions.

49
00:03:26.400 --> 00:03:30.210
Let's see what happens when we pass in a vector object to a function.

50
00:03:30.300 --> 00:03:35.320
In this case I have a function called print and it expects a vector of integers.

51
00:03:35.340 --> 00:03:40.140
Notice that in this case we're using pass by value inside the print function.

52
00:03:40.170 --> 00:03:45.600
I simply use a range base for loop and display the vector elements pretty easy but there's one issue

53
00:03:45.600 --> 00:03:48.710
with this code that is we're using pass by value.

54
00:03:48.870 --> 00:03:52.990
So we're making a complete copy of the vector object in the function.

55
00:03:53.040 --> 00:03:57.110
So the formal parameter V will be a copy of the actual parameter data.

56
00:03:57.120 --> 00:04:03.990
In this case in order to make a copy we need to allocate storage and copy values over if the vector

57
00:04:03.990 --> 00:04:04.830
is very large.

58
00:04:04.830 --> 00:04:07.990
We could run it to performance and storage issues.

59
00:04:08.160 --> 00:04:10.670
So why don't we use pass by reference instead.

60
00:04:10.770 --> 00:04:12.070
So we can avoid the copy.

61
00:04:12.090 --> 00:04:12.800
Let's do it.

62
00:04:15.260 --> 00:04:17.750
Notice that now I'm using pass by reference.

63
00:04:17.750 --> 00:04:24.590
Since I've declared the formal parameter V as a reference parameter using the ampersand the output of

64
00:04:24.590 --> 00:04:27.080
this program is exactly the same as before.

65
00:04:27.260 --> 00:04:33.860
But we avoid the storage and copy overhead of pass by value but there is one issue since I'm using pass

66
00:04:33.860 --> 00:04:37.790
by reference the print function could change the value of the vector.

67
00:04:37.820 --> 00:04:40.490
It could even erase the entire vector.

68
00:04:40.490 --> 00:04:42.210
This is probably not a good idea.

69
00:04:42.290 --> 00:04:47.310
So let's tell the compiler that this is a constant reference.

70
00:04:47.860 --> 00:04:50.640
So I've added the Konst keyword to the parameter.

71
00:04:50.650 --> 00:04:54.130
Now I've told the compiler to use pass by constant reference.

72
00:04:54.280 --> 00:05:00.180
So if I try to make any changes to the formal parameter V in the function I will get a compiler error.

73
00:05:00.190 --> 00:05:04.880
This is really the best of both worlds since we're more efficiently passing information to the function.

74
00:05:04.960 --> 00:05:09.490
But we're still ensuring that the function can't change the data by mistake.

75
00:05:09.760 --> 00:05:12.240
Let's head over to the ID and see this in action.

76
00:05:13.860 --> 00:05:19.090
OK said I'm in the idea and I'm in the section Levan workspace and the pass by reference project.

77
00:05:19.290 --> 00:05:22.850
This is the same project that we use when we did pass by value.

78
00:05:23.040 --> 00:05:27.090
The only thing I've changed is I've made the parameters reference parameters now.

79
00:05:27.240 --> 00:05:31.140
So you can see the way I did that was just by including that ampersand.

80
00:05:31.140 --> 00:05:35.670
Now these are the same function prototypes have just named the functions passed by ref 1 rather than

81
00:05:35.670 --> 00:05:37.550
passed by value as we had before.

82
00:05:37.710 --> 00:05:44.010
OK so I've got three passed by reference functions and just a simple print vector function that displays

83
00:05:44.010 --> 00:05:50.520
a vector element by element passed by reference one expects a reference to an integer pass by reference

84
00:05:50.520 --> 00:05:56.040
to a reference to a string passed by reference 3 a reference to a vector and then the print vector function

85
00:05:56.040 --> 00:06:00.300
expects a reference to a constant vector because I don't want to be able to change the vector from the

86
00:06:00.300 --> 00:06:01.530
print function.

87
00:06:01.530 --> 00:06:07.200
Now I've implemented all of these functions and basically the code hasn't changed from before I set

88
00:06:07.200 --> 00:06:12.290
number 2 0 0 0 0 0 0 and I set the string to changed and I clear all the elements out of there.

89
00:06:12.300 --> 00:06:17.340
Now I remember before we printed a value we called the function we came back and the old value was still

90
00:06:17.340 --> 00:06:17.820
there.

91
00:06:17.970 --> 00:06:21.230
Well now it's totally different because we're passing an alias to the value.

92
00:06:21.360 --> 00:06:25.660
OK so let's go through these examples here and then I've got initialized to 10.

93
00:06:25.680 --> 00:06:28.380
And another initialised to 20.

94
00:06:28.380 --> 00:06:34.050
So now what I'm doing is I'm calling pass by ref 1 and I'm passing them into it.

95
00:06:34.050 --> 00:06:40.440
So before I call it I expect this to display a 10 but then after I call it I don't expect the 10 anymore

96
00:06:40.440 --> 00:06:41.720
because I passed a reference.

97
00:06:41.730 --> 00:06:45.720
Instead if you look at pass by ref one number is a thousand.

98
00:06:45.720 --> 00:06:47.530
So I expect number to change.

99
00:06:47.640 --> 00:06:51.110
All right so let me run this and then we'll walk through exactly what's going on.

100
00:06:51.120 --> 00:06:57.350
There you go before calling pass by ref 1 we have a 10 after calling pass by ref 1 we have 1000 if you

101
00:06:57.350 --> 00:07:00.960
remember the way it was with call by value we had 10 and 10.

102
00:07:00.990 --> 00:07:03.420
So let's see what's really going on here.

103
00:07:03.780 --> 00:07:06.470
Scroll up just a little bit.

104
00:07:06.820 --> 00:07:09.150
Erica OK.

105
00:07:09.220 --> 00:07:12.460
So I'm in Maine and I've got is 10

106
00:07:15.610 --> 00:07:17.600
and I'm just playing it right here right.

107
00:07:17.610 --> 00:07:19.900
So that's going to display a 10 in that out put statement right here.

108
00:07:19.900 --> 00:07:21.650
But then I'm calling pass by ref.

109
00:07:21.760 --> 00:07:28.120
So I want to call passed by ref 1 over here and it has a variable and if you remember what that variable

110
00:07:28.120 --> 00:07:31.190
was scroll up it's right here is also called numb.

111
00:07:31.300 --> 00:07:32.590
Maybe this could be any other name.

112
00:07:32.590 --> 00:07:34.910
They just happened to be the same name in this case.

113
00:07:34.930 --> 00:07:39.710
So that's kind of variable and they're called numb and right here.

114
00:07:40.150 --> 00:07:46.770
What's happening is when I pass this name into it then this number now becomes an alias to that name.

115
00:07:46.810 --> 00:07:48.800
OK and again don't worry about the names.

116
00:07:48.850 --> 00:07:50.460
I'm going to use a different name next time.

117
00:07:50.470 --> 00:07:53.260
But it's common to many times use the same names.

118
00:07:53.260 --> 00:07:54.930
Don't let that confuse you.

119
00:07:55.000 --> 00:07:58.420
And then in here I'm saying number equals I believe it is a thousand.

120
00:07:58.720 --> 00:08:02.230
So what's happening is this is an alias to this number.

121
00:08:02.230 --> 00:08:04.300
So this guy's going to change to a thousand.

122
00:08:04.330 --> 00:08:07.420
Real real different to call by value.

123
00:08:07.780 --> 00:08:08.350
OK.

124
00:08:08.350 --> 00:08:13.840
So in this case we are really passing in the location of the number behind the scenes and what we don't

125
00:08:13.840 --> 00:08:17.560
have to worry about it because syntactically it's the same as call by value.

126
00:08:17.980 --> 00:08:21.510
Let's take a look at another example here.

127
00:08:21.640 --> 00:08:22.770
Scroll down just a little bit.

128
00:08:22.780 --> 00:08:30.980
And here we've got the same call to pass by ref 1 except we're passing in another number right in this

129
00:08:30.980 --> 00:08:32.660
case and the name is 20.

130
00:08:32.660 --> 00:08:34.150
So this will display a 20.

131
00:08:34.250 --> 00:08:39.670
And when I get back it will have changed also also there it is 10 one thousand.

132
00:08:39.670 --> 00:08:42.490
Now we've got another name was 20 and now it's a thousand.

133
00:08:42.640 --> 00:08:48.100
So you can see that we're passing that by reference and the alias is actually referring to the actual

134
00:08:48.100 --> 00:08:48.940
parameter.

135
00:08:48.940 --> 00:08:51.670
That's the important part to really understand here.

136
00:08:51.880 --> 00:08:54.410
In this example let's take a look at that.

137
00:08:54.460 --> 00:08:56.850
If you recall this one scroll up just a little bit.

138
00:08:56.890 --> 00:09:05.190
You can see it right here past my ref to expects a reference to a string and it just assigns changed

139
00:09:05.250 --> 00:09:06.760
to that string.

140
00:09:06.780 --> 00:09:07.170
OK.

141
00:09:07.230 --> 00:09:10.580
So let's walk through this one to see what we can expect in this case.

142
00:09:10.710 --> 00:09:15.900
I've got this variable right here name which is frank and it's in main

143
00:09:18.890 --> 00:09:23.410
and it's a string object right then I call pass by ref too.

144
00:09:23.480 --> 00:09:28.730
So here's pass by ref to and it has a variable over there called s.

145
00:09:28.730 --> 00:09:30.530
That's the formal parameter.

146
00:09:30.530 --> 00:09:33.630
And what we're doing here is we're passing by reference.

147
00:09:33.740 --> 00:09:40.690
So we're passing name over here and this s will now be an alias to name.

148
00:09:40.700 --> 00:09:44.570
So it's really referring to the actual parameter.

149
00:09:44.570 --> 00:09:47.860
Remember this right here is the actual parameter.

150
00:09:47.900 --> 00:09:54.280
So now when I change this to change nothing happens over here it's actually happening over here.

151
00:09:54.440 --> 00:09:55.470
So this has gone.

152
00:09:55.490 --> 00:09:56.630
It's now changed.

153
00:09:56.660 --> 00:10:03.040
So when this function is done my actual parameter has changed in this case to changed.

154
00:10:03.380 --> 00:10:08.960
OK so let's run this example and we'll be able to see that that string really does change.

155
00:10:08.960 --> 00:10:14.150
You see that right there name before calling pass by ref to is Frank named after calling pass by ref

156
00:10:14.150 --> 00:10:17.030
to has changed pretty easy.

157
00:10:17.040 --> 00:10:18.180
It's really up to you.

158
00:10:18.180 --> 00:10:22.700
And when you're designing do you need the actual changed or not.

159
00:10:22.950 --> 00:10:26.870
If you do need a change do you pass it by reference if you don't need to change.

160
00:10:26.910 --> 00:10:33.060
You do pass by value sometimes passed by value is very expensive as I mentioned before you want to pass

161
00:10:33.060 --> 00:10:36.070
by reference and then qualified to be constant.

162
00:10:36.180 --> 00:10:38.380
And that's what we'll do in the print function a little bit.

163
00:10:38.490 --> 00:10:41.650
But let's take a look at this one here.

164
00:10:42.550 --> 00:10:42.800
OK.

165
00:10:42.810 --> 00:10:45.150
So this is the last example we'll look at right here.

166
00:10:45.150 --> 00:10:49.190
Remember we're calling pass by ref 3 and pass by ref 3.

167
00:10:49.200 --> 00:10:51.020
All it does is clears out that vector.

168
00:10:51.020 --> 00:10:55.260
So it's going to remove all the vector elements to make the vector empty.

169
00:10:55.260 --> 00:10:57.080
OK so let's do that.

170
00:10:58.790 --> 00:10:59.120
All right.

171
00:10:59.120 --> 00:11:00.010
So we're here.

172
00:11:00.080 --> 00:11:04.140
This is Stooges and again Stooges is declared in main.

173
00:11:04.310 --> 00:11:12.200
So Stooges is basically three strings Larry Moe and Curly.

174
00:11:13.610 --> 00:11:15.040
And they're in a vector.

175
00:11:15.530 --> 00:11:21.290
OK so now I'm going to print the vector and I'm going to pass Stooges into print vector.

176
00:11:21.290 --> 00:11:24.320
Now the vector is also expecting a reference.

177
00:11:24.350 --> 00:11:27.240
In this case a constant reference so I can't change anything.

178
00:11:27.380 --> 00:11:29.720
So what happens is when I call print

179
00:11:32.540 --> 00:11:38.960
so when I call print vector there is a variable over there called V and since I'm doing pass by reference

180
00:11:39.020 --> 00:11:42.430
this refers to this.

181
00:11:42.650 --> 00:11:49.160
So whenever I deal with I do any operation on V it's affecting the Stooges vector.

182
00:11:49.160 --> 00:11:50.050
Right.

183
00:11:50.060 --> 00:11:55.350
That would be the case but since this is Konst This is read only.

184
00:11:55.370 --> 00:11:56.820
There's no changes allowed.

185
00:11:56.990 --> 00:12:00.650
But do I avoid the whole copy issue which is important.

186
00:12:00.650 --> 00:12:02.550
All right so that takes care of print.

187
00:12:02.630 --> 00:12:07.450
Now when I call pass by reference 3 I do exactly the same thing right.

188
00:12:07.460 --> 00:12:10.030
So I call passed by by reference 3.

189
00:12:10.190 --> 00:12:14.450
I've got my vector and it's also pointing to Stooges.

190
00:12:14.450 --> 00:12:19.530
Now when I say V-Rod clear I'm clearing this out now.

191
00:12:19.550 --> 00:12:26.060
Right so Stooges is empty now when this function is done it's gone.

192
00:12:26.240 --> 00:12:30.740
And my vector is empty so when I print it out again right here you'll see nothing print.

193
00:12:30.740 --> 00:12:36.290
If you recall in the past by value a printed out Larry Moe and Curly again right here nothing.

194
00:12:36.290 --> 00:12:37.300
So let's run this

195
00:12:40.560 --> 00:12:47.010
and you could see right here Stooges before calling pass by ref 3 Larry Moe Curly after calling it empty.

196
00:12:47.010 --> 00:12:48.090
Why is it empty.

197
00:12:48.120 --> 00:12:53.130
Because pass by ref 3 cleared out that vector and deleted all the elements.

198
00:12:53.160 --> 00:12:59.180
And because I'm passing by reference it's really affecting the actual object.

199
00:12:59.310 --> 00:13:04.830
If I didn't want this to happen I would make this contest in which case this won't compile anymore because

200
00:13:04.830 --> 00:13:08.700
you're not allowing me to change the vector which is what this is doing.

201
00:13:08.790 --> 00:13:13.650
You'll get a lot of chances to play with this in the challenge at the end of the section but that's

202
00:13:13.650 --> 00:13:14.700
passed by reference.

203
00:13:14.700 --> 00:13:18.220
We can use it with simple primitive types so we can use it with object types.

204
00:13:18.240 --> 00:13:19.830
It basically works the same way.

205
00:13:19.820 --> 00:13:23.190
Just think of it as an alias to the actual parameter.
