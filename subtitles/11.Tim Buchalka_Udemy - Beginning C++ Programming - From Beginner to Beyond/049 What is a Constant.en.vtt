WEBVTT
1
00:00:05.430 --> 00:00:10.020
This video we'll learn what constants are in C++.

2
00:00:10.020 --> 00:00:12.870
Constants are very much like C++ variables.

3
00:00:12.870 --> 00:00:13.920
They have names.

4
00:00:13.920 --> 00:00:15.830
The rules for naming is the same.

5
00:00:15.840 --> 00:00:19.010
They occupy storage and they're usually typed.

6
00:00:19.020 --> 00:00:24.040
This means that when you declare a constant you usually declare their type just like you do with a variable.

7
00:00:24.060 --> 00:00:28.540
There is one type of constant that is not typed and I'll talk about that at the end of the video.

8
00:00:28.590 --> 00:00:34.350
The big difference between variables and constants is that unlike variables the value of C++ constants

9
00:00:34.350 --> 00:00:36.960
cannot change once they're declared.

10
00:00:36.960 --> 00:00:42.750
For example if I declare age to be a constant integer and assign 21 to it then the value of age will

11
00:00:42.840 --> 00:00:47.220
always remain 21 and I won't be able to change it if I try to change it.

12
00:00:47.250 --> 00:00:49.090
I'll get a compiler error.

13
00:00:49.350 --> 00:00:51.940
Why would you need constants in a program.

14
00:00:51.960 --> 00:00:57.210
Let's consider a simple application that uses the number of months in a year throughout the code.

15
00:00:57.270 --> 00:01:00.140
We could certainly use the number 12 everywhere we need it.

16
00:01:00.300 --> 00:01:02.530
However 12 could be a lot of things.

17
00:01:02.640 --> 00:01:07.710
And if the program is of significant size it might not be clear to other programmers that 12 means the

18
00:01:07.710 --> 00:01:09.340
number of months in a year.

19
00:01:09.480 --> 00:01:14.520
So we could create a variable and call it months in the year and assign 12 to it and now use that name

20
00:01:14.520 --> 00:01:18.100
in our code whenever we need to use 12 in that context.

21
00:01:18.120 --> 00:01:20.850
That's a much better solution than hard coding 12.

22
00:01:21.230 --> 00:01:22.300
But that's a variable.

23
00:01:22.440 --> 00:01:25.510
Which means it can be changed even accidentally.

24
00:01:25.530 --> 00:01:31.370
A better solution is to declare months in a year to be a constant integer and to assign 12 to it.

25
00:01:31.380 --> 00:01:33.530
Now we can use a meaningful name in our code.

26
00:01:33.600 --> 00:01:37.220
That means 12 and we can't change it either by accident.

27
00:01:37.740 --> 00:01:40.710
C++ gives us several ways to create constants.

28
00:01:40.890 --> 00:01:47.070
We can use literals declared constants constants expressions enumerated constants and finally we can

29
00:01:47.070 --> 00:01:48.780
use define constants.

30
00:01:48.840 --> 00:01:53.520
We'll learn about constant expressions and enumerated constants later in this course.

31
00:01:53.520 --> 00:01:55.810
Let's see what literal constants are first.

32
00:01:56.930 --> 00:01:59.620
Literals are the most obvious kind of constants.

33
00:01:59.840 --> 00:02:02.620
We can use little ones to run our code and we often do.

34
00:02:02.870 --> 00:02:05.140
They're used to express specific values.

35
00:02:05.210 --> 00:02:08.670
We've already seen examples of literals in this slide.

36
00:02:08.750 --> 00:02:15.620
You can see that 12 one point five six Frank and the character J are examples of literal constants.

37
00:02:15.680 --> 00:02:22.670
For example the floating point literal constant one point five six always expresses the value 1.5 six

38
00:02:23.420 --> 00:02:27.770
literal constants also have types based on a naming convention.

39
00:02:27.980 --> 00:02:33.860
You can be explicit with the types of little Hans for example for integer literal constants you can

40
00:02:33.860 --> 00:02:38.900
add certain suffixes to the integer literal to specify a different type.

41
00:02:38.960 --> 00:02:44.500
For example the letters you and L specify unsigned and long respectively.

42
00:02:44.600 --> 00:02:46.760
This can be either lowercase or uppercase.

43
00:02:46.760 --> 00:02:51.490
This slide shows just a few of the combinations for floating point numbers.

44
00:02:51.560 --> 00:02:55.040
You can use the L and F suffixes as shown in this slide.

45
00:02:56.960 --> 00:03:00.570
We can also have character literal constants in C++.

46
00:03:00.620 --> 00:03:04.650
We haven't used these yet but they're commonly used within string literals.

47
00:03:04.910 --> 00:03:10.190
They consist of the backslash character followed by another character and they're called Escape codes.

48
00:03:10.580 --> 00:03:15.390
You can see some examples in this slide the see out statement will display hello.

49
00:03:15.560 --> 00:03:21.200
Then tab over and display there then it will go to the beginning of the next line and display my friend

50
00:03:21.820 --> 00:03:24.440
and that it will go to the beginning of the next line again.

51
00:03:24.650 --> 00:03:30.080
It's very common to see Escape codes embedded in string literals in output statements.

52
00:03:30.200 --> 00:03:36.830
By far the most common way of declaring constants in C++ is to use declared constants using the Consta

53
00:03:36.830 --> 00:03:38.300
keyword.

54
00:03:38.320 --> 00:03:43.700
The syntax is exactly like that of a variable declaration with the Konski word at the beginning.

55
00:03:43.700 --> 00:03:48.560
You must initialize the declared constant or the compiler will give you an uninitialized Konst error

56
00:03:48.560 --> 00:03:50.130
message.

57
00:03:50.180 --> 00:03:52.820
What happens if you try to change the value of a constant.

58
00:03:52.880 --> 00:03:54.500
You guessed it you can't.

59
00:03:54.500 --> 00:03:59.030
The compiler will give you an error letting you know that the concept is read only and you can't change

60
00:04:00.320 --> 00:04:06.150
the last way of declaring constants and C++ by using the preprocessor directive poun define.

61
00:04:06.180 --> 00:04:12.820
Let's take a look at that defined constants were very commonly use an older C and C++ code.

62
00:04:12.920 --> 00:04:17.140
These constants are defined using the power defined preprocessor directive.

63
00:04:17.420 --> 00:04:22.790
I'm showing you define constants because you may run into them since there is so much C++ legacy code

64
00:04:22.790 --> 00:04:23.530
out there.

65
00:04:23.540 --> 00:04:28.250
Here you're telling the preprocessor that wherever it sees the word pie replace it with three point

66
00:04:28.250 --> 00:04:30.890
1 4 1 5 9 to 6.

67
00:04:30.890 --> 00:04:35.320
Think of this as a blind Find Replace as you might do in a word processor.

68
00:04:35.360 --> 00:04:42.410
The preprocessor will gladly substitute one for the other since the preprocessor doesn't know C++ it

69
00:04:42.410 --> 00:04:43.300
can't type check.

70
00:04:43.320 --> 00:04:45.850
And this could lead to difficult to find errors.

71
00:04:46.010 --> 00:04:51.860
So please don't use defined constants in modern C++ code in the next video.

72
00:04:51.890 --> 00:04:57.050
We'll head over to the code ID and see how we can declare and use constants in C++.

73
00:04:57.050 --> 00:05:02.530
First will write a program using literal constants then will refactor the code to use declared constants.
