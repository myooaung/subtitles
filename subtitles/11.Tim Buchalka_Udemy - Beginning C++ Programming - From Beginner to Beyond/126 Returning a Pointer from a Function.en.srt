1
00:00:05,560 --> 00:00:11,560
This video we'll learn how to return a pointer from a function in C++ that functions can return pointers

2
00:00:11,770 --> 00:00:17,650
which is a super powerful feature in order to do this we need to provide the type of the pointer in

3
00:00:17,650 --> 00:00:20,710
the function definition and in the function prototype.

4
00:00:20,710 --> 00:00:26,200
All this means is that the function will return an address of whatever type we specified in the function

5
00:00:26,200 --> 00:00:28,760
declaration.

6
00:00:28,760 --> 00:00:33,280
Let's see an example in this function where returning a pointer to an integer.

7
00:00:33,590 --> 00:00:39,030
In this case it will be the value of the parameter that points to the largest integer.

8
00:00:39,100 --> 00:00:42,730
It's OK to return a pointer to data that's being passed into a function.

9
00:00:42,730 --> 00:00:44,630
Since we know that data exists.

10
00:00:44,680 --> 00:00:50,920
So in this case we compare the two integers that the two pointers are pointing to and return the pointer

11
00:00:50,920 --> 00:00:53,330
that points to the largest integer.

12
00:00:53,350 --> 00:00:56,190
Notice that we're not comparing the pointers themselves.

13
00:00:56,260 --> 00:00:59,860
We're comparing what they're pointing to by dereferencing them.

14
00:00:59,860 --> 00:01:00,830
Pretty straightforward.

15
00:01:00,880 --> 00:01:02,170
But how do you call this function.

16
00:01:02,170 --> 00:01:03,540
I'll show you in the next slide.

17
00:01:05,300 --> 00:01:09,820
Here we have a simple main that calls the largest function that we just wrote.

18
00:01:09,920 --> 00:01:15,370
I have two integers A and B B is the largest with 200 I call largest.

19
00:01:15,450 --> 00:01:18,220
In passing the addresses of A and B.

20
00:01:18,260 --> 00:01:22,070
This is correct since it expects pointers to integers.

21
00:01:22,070 --> 00:01:27,140
The function returns a pointer which I assign to a variable named barges pointer which is declared as

22
00:01:27,140 --> 00:01:28,750
a pointer to an integer.

23
00:01:28,790 --> 00:01:36,470
So now that variable largest pointer points to either A or B depending on which one was largest in this

24
00:01:36,470 --> 00:01:37,440
case it's B.

25
00:01:37,460 --> 00:01:41,380
So we dereference a pointer and it displays 200.

26
00:01:41,390 --> 00:01:46,940
Let's see an example where we allocate memory dynamically inside a function and return the address of

27
00:01:46,940 --> 00:01:47,800
that memory.

28
00:01:49,740 --> 00:01:55,200
Returning dynamically allocated memory from a function is a very common use case for returning a pointer

29
00:01:55,200 --> 00:01:56,240
from a function.

30
00:01:56,280 --> 00:02:02,640
In this example we created a function called create array and it expects an unsigned integer that contains

31
00:02:02,640 --> 00:02:06,970
the size of the array to create in a default parameter called init value.

32
00:02:07,140 --> 00:02:12,670
And that's the value we can to initialize all the array elements to the function returns a pointer to

33
00:02:12,670 --> 00:02:13,480
an integer.

34
00:02:13,480 --> 00:02:18,110
Now this represents the address of that first integer that we dynamically created.

35
00:02:18,130 --> 00:02:21,850
You can see the code is pretty standard after we create the storage.

36
00:02:21,850 --> 00:02:26,200
We use a for loop and initialize all the array elements to add value.

37
00:02:26,200 --> 00:02:31,030
Notice that I'm using pointer offset notation within the loop but I could have used pointers subscript

38
00:02:31,030 --> 00:02:32,380
notation.

39
00:02:32,380 --> 00:02:38,420
Finally we return new storage which is the address of that first integer in the newly created array.

40
00:02:38,440 --> 00:02:40,000
So how do we use this function.

41
00:02:40,000 --> 00:02:41,390
I'll show you in the next slide.

42
00:02:43,240 --> 00:02:48,100
In the sample code we call create array and we pass in 120.

43
00:02:48,110 --> 00:02:54,380
That means I want 100 integers allocated dynamically on the heap and I want to initialize all of them

44
00:02:54,380 --> 00:02:55,320
to 20.

45
00:02:55,610 --> 00:03:00,090
So this function allocates the space dynamically on the heap for those hundred integers.

46
00:03:00,120 --> 00:03:07,730
Initialize them all to 20 and returns the address of that first integer which I assign to my array.

47
00:03:07,730 --> 00:03:09,050
Now I can use my array.

48
00:03:09,050 --> 00:03:10,150
However I like.

49
00:03:10,430 --> 00:03:15,710
But remember since the storage is on the heap you need to release it so you have to remember to use

50
00:03:15,710 --> 00:03:19,600
delete with the square brackets on that pointer variable.

51
00:03:19,610 --> 00:03:24,840
Now let's see what NOT to do when returning pointers from a function.

52
00:03:24,860 --> 00:03:26,470
Here I have two functions.

53
00:03:26,510 --> 00:03:28,750
The first function is called Don't do this.

54
00:03:28,780 --> 00:03:30,130
Now the second function is called.

55
00:03:30,140 --> 00:03:30,870
Or this.

56
00:03:30,920 --> 00:03:33,000
They both return pointers to integers.

57
00:03:33,700 --> 00:03:36,270
The first function returns the address of size.

58
00:03:36,280 --> 00:03:37,570
This is a real problem.

59
00:03:37,570 --> 00:03:40,930
Size is a local variable to the function.

60
00:03:40,930 --> 00:03:45,820
This will compile just fine since the address of size is the address of an integer and that's what the

61
00:03:45,820 --> 00:03:47,070
function returns.

62
00:03:47,350 --> 00:03:48,700
But what's the problem.

63
00:03:48,850 --> 00:03:54,550
Well you can see it's a huge problem we're returning the address of a local variable in the function.

64
00:03:54,550 --> 00:04:00,400
The variables on the stack and the function just terminated so this variable is now past its lifetime.

65
00:04:00,400 --> 00:04:05,410
The next time the function is called or any function is called the stack area will be reused in the

66
00:04:05,410 --> 00:04:09,650
pointer when I'll be pointing into that new functions activation record.

67
00:04:09,820 --> 00:04:15,010
If you overwrite the data it's pointing to you could trash the stack pointer static links all kinds

68
00:04:15,010 --> 00:04:17,920
of important information on the activation record.

69
00:04:17,950 --> 00:04:22,230
Hopefully the program crashes or you get a really strange error that you can fix.

70
00:04:22,480 --> 00:04:27,280
But if the program changes data that isn't currently being used then the program may appear to work

71
00:04:27,280 --> 00:04:28,480
correctly for a while.

72
00:04:28,480 --> 00:04:32,620
These types of errors or bugs are very difficult to find.

73
00:04:32,650 --> 00:04:38,080
The second function has the same problem except that it's assigned a pointer to size variable and returns

74
00:04:38,080 --> 00:04:43,900
it in both cases the address that's being returned is a stack variable or a function local variable.

75
00:04:43,900 --> 00:04:47,440
Very bad idea OK that completes this video.

76
00:04:47,460 --> 00:04:52,020
You'll get a chance to work with functions that return pointers to dynamically allocated storage in

77
00:04:52,020 --> 00:04:54,370
the challenge exercise at the end of the section.

78
00:04:54,390 --> 00:04:59,350
But first let's head over to the ID and we'll go over some of these functions in live code.

79
00:05:00,990 --> 00:05:07,410
Ok so I mean the idea and the section 12 workspace in the returned pointer project and I'd like to walk

80
00:05:07,410 --> 00:05:13,560
through this example when we created that create a re function that dynamically allocates some storage

81
00:05:13,560 --> 00:05:14,480
on the heap.

82
00:05:14,490 --> 00:05:18,590
So let's walk through this example right here we're in Maine.

83
00:05:18,600 --> 00:05:23,730
Notice that Maine is activated when the program begins and we've got three local variables in Maine.

84
00:05:23,730 --> 00:05:34,140
We've got Mirei which currently is just no doubt we have size which contains garbage right now when

85
00:05:34,150 --> 00:05:39,830
we have a value which is zeroed out at the moment.

86
00:05:40,940 --> 00:05:41,390
OK.

87
00:05:41,560 --> 00:05:42,370
So what do we do.

88
00:05:42,370 --> 00:05:46,270
We ask the user how many integers would you like to allocate and we read that into size.

89
00:05:46,270 --> 00:05:49,090
Let's say that they want to allocate 10 integers.

90
00:05:49,090 --> 00:05:53,830
So we'll put a 10 in here and then what value would you like to initialize to.

91
00:05:53,830 --> 00:05:58,210
How about we initialize them all to number two.

92
00:05:58,780 --> 00:06:05,590
So now we've got those variables and what we do now is we we call create array and we pass in the size

93
00:06:05,920 --> 00:06:07,370
and the initial value.

94
00:06:07,690 --> 00:06:08,580
So we're here now.

95
00:06:08,590 --> 00:06:16,210
Here's the function create array noticed create array has one to three local variables right.

96
00:06:16,210 --> 00:06:26,530
It's got size and let me call create array here some calling create array with the size which is 10

97
00:06:26,680 --> 00:06:28,630
and the initial value is which is 2.

98
00:06:28,660 --> 00:06:32,740
If I didn't supply an initial value would you 0 there's the default initializer here.

99
00:06:33,010 --> 00:06:37,400
But in this case size is 10 initial value.

100
00:06:37,510 --> 00:06:39,970
And notice again I'm using the same variable names.

101
00:06:39,970 --> 00:06:43,930
I'm doing that on purpose don't let that confuse you too.

102
00:06:44,080 --> 00:06:46,270
And then we've got new storage right here.

103
00:06:47,730 --> 00:06:50,390
Which is a pointer to an integer.

104
00:06:50,580 --> 00:06:55,140
That's where we're going to allocate the memory from when we call you right here on the next line.

105
00:06:55,290 --> 00:06:57,240
And right now that's No.

106
00:06:57,490 --> 00:07:01,040
OK so now new storage equals new size.

107
00:07:01,040 --> 00:07:05,600
How many integers do I want to allocate dynamically however many integers were passed in in this case

108
00:07:05,600 --> 00:07:11,120
10 so 10 integers will be allocated dynamically on the heap not on the stack.

109
00:07:11,120 --> 00:07:13,770
This is to stack the heap is a different part of memory.

110
00:07:13,970 --> 00:07:21,850
It's way up here let's say and we're going to allocate 10 integers 0 through 9 on the heap.

111
00:07:21,850 --> 00:07:24,120
Let's say that this is addressed 5000.

112
00:07:24,430 --> 00:07:27,950
That's the address of that very first integer right here.

113
00:07:28,090 --> 00:07:35,350
What's being returned and assigned to storage is that first integers address or putting a 5000 in here.

114
00:07:35,350 --> 00:07:37,000
There's our pointer.

115
00:07:37,000 --> 00:07:38,140
Now this is really important.

116
00:07:38,140 --> 00:07:42,350
We've got a pointer on this stack that's pointing just George on the heap.

117
00:07:42,370 --> 00:07:44,160
This is exactly what we want.

118
00:07:44,230 --> 00:07:49,430
We've got to be careful not to lose that pointer if we lose that pointer we've got a memory leak.

119
00:07:49,480 --> 00:07:49,890
OK.

120
00:07:50,260 --> 00:07:50,750
Great.

121
00:07:50,800 --> 00:07:55,600
So now we have that memory allocated and we want to initialize it remember right now that all that is

122
00:07:55,600 --> 00:07:57,670
garbage data right in here.

123
00:07:57,700 --> 00:07:58,380
So what do we do.

124
00:07:58,420 --> 00:08:04,150
We just use a simple for loop we're going from zero less than size by 1 and we're initializing every

125
00:08:04,150 --> 00:08:09,580
element in this array to whatever was being passed in an initial value right here in this case we passed

126
00:08:09,580 --> 00:08:10,650
in A2.

127
00:08:10,720 --> 00:08:15,750
So we're going to store to everywhere and here I'm using pointer offset notation.

128
00:08:15,760 --> 00:08:21,790
I could have just said new storage sub I and used pointer array notation or a pointer subscript notation.

129
00:08:21,790 --> 00:08:23,230
Either one is fine.

130
00:08:23,230 --> 00:08:27,410
So in this case we're putting a two in all of these guys.

131
00:08:27,580 --> 00:08:34,080
All 10 of them will have twos in them and now this is the piece that's really important we return you

132
00:08:34,110 --> 00:08:34,810
storage.

133
00:08:34,870 --> 00:08:35,950
But what's new storage.

134
00:08:35,980 --> 00:08:37,030
It's 5000.

135
00:08:37,030 --> 00:08:39,330
We returned that value 5 0 0 0 0 0.

136
00:08:39,460 --> 00:08:44,710
And notice in Maine we're assigning it to Mirei.

137
00:08:44,800 --> 00:08:46,560
So we're putting 5000 in here.

138
00:08:46,600 --> 00:08:50,460
So now this pointer is pointing to the same place.

139
00:08:50,470 --> 00:08:54,580
That's really important because this function is almost done.

140
00:08:54,580 --> 00:09:01,390
So when this function gets popped off the stack we're going to lose this pointer right here and we don't

141
00:09:01,390 --> 00:09:02,370
want to lose that pointer.

142
00:09:02,370 --> 00:09:06,860
So that's why we assign it to my race and we've got a copy of that pointer that we can use.

143
00:09:07,050 --> 00:09:08,080
OK good.

144
00:09:08,080 --> 00:09:14,030
So at this point the function is now done we start cleaning it up.

145
00:09:14,050 --> 00:09:16,210
So all this is gone now.

146
00:09:16,350 --> 00:09:16,660
Right.

147
00:09:16,660 --> 00:09:18,850
So this pointer here is now gone.

148
00:09:18,850 --> 00:09:25,810
We lose all this and we're back to Maine now I notice Maine has that pointer.

149
00:09:25,850 --> 00:09:27,690
We didn't lose our memory out on that.

150
00:09:27,830 --> 00:09:29,890
That's really important to understand.

151
00:09:30,390 --> 00:09:32,920
OK so now let's display the data.

152
00:09:32,990 --> 00:09:34,690
So I'm calling this function right now.

153
00:09:34,690 --> 00:09:35,360
Display

154
00:09:38,350 --> 00:09:39,900
and I'm passing in.

155
00:09:40,150 --> 00:09:45,200
In this case my array my rate is 5000.

156
00:09:45,330 --> 00:09:49,820
That's the value of that pointer and the size which was 10.

157
00:09:49,970 --> 00:09:55,720
So display now gets activated on the stack and it's got one right here.

158
00:09:55,860 --> 00:09:59,560
Variable one local variable another local variable and it's got another variable right here.

159
00:09:59,600 --> 00:10:03,690
I am not going to worry about you know all about I it's just a looping variable.

160
00:10:03,770 --> 00:10:09,640
So it's going to have this variable array and it's going to have a size.

161
00:10:10,100 --> 00:10:15,290
So 5000 gets copied to array 10 gets copied to size.

162
00:10:15,290 --> 00:10:20,400
Notice that this is not pointing to that same place but it's constant.

163
00:10:20,400 --> 00:10:24,410
We've got a constant pointer and we're pointing to a constant array so we can't mess with that array

164
00:10:24,410 --> 00:10:27,710
either by accident or intentionally.

165
00:10:27,930 --> 00:10:32,320
And all we're doing is we're just looping through there and displaying out every element in the array.

166
00:10:32,340 --> 00:10:39,230
Notice decision in this case I'm using pointer subscript notation here ret whereas over here I use pointer

167
00:10:39,260 --> 00:10:40,310
offset notation.

168
00:10:40,310 --> 00:10:42,330
Same exact thing.

169
00:10:42,350 --> 00:10:47,410
So this function now goes through their displays all those twos 10 of them.

170
00:10:47,600 --> 00:10:52,240
When we're done same as before we basically start unwinding.

171
00:10:52,240 --> 00:10:56,340
So this is done after we do all the displaying or gone here.

172
00:10:57,660 --> 00:11:00,050
This is gone and we're back to Maine.

173
00:11:00,180 --> 00:11:03,440
Now I've got this storage allocated on the heap.

174
00:11:03,600 --> 00:11:04,430
I'm done with it.

175
00:11:04,440 --> 00:11:06,580
I need to release it or free it up.

176
00:11:06,600 --> 00:11:12,360
And that's what's happening right here at 9:34 delete square brackets.

177
00:11:12,360 --> 00:11:17,430
And the name of the pointer you've got to make sure that the value of that pointer is something that

178
00:11:17,430 --> 00:11:22,680
was needed because you can't point to like a stack reference and then delete that.

179
00:11:22,680 --> 00:11:28,280
So in this case this will now be freed up and that memory will be ready to be used again.

180
00:11:30,740 --> 00:11:34,920
So let's clear this up and give it a run.

181
00:11:35,050 --> 00:11:36,580
So we'll build and run here.

182
00:11:36,610 --> 00:11:42,270
So let's say we want to allocate 10 integers and we want to set all of them to 5.

183
00:11:42,940 --> 00:11:47,680
That you see we're displaying all 10 integers each one is set to five pretty easy.

184
00:11:47,680 --> 00:11:49,100
Let's run this again.

185
00:11:49,180 --> 00:11:54,700
And suppose we want to allocate 1000 integers this time and when one set each one of them to I don't

186
00:11:54,700 --> 00:12:00,560
know 88 we run it there we get a thousand integers all set to 98.

187
00:12:00,710 --> 00:12:05,250
What's important to understand here is that it's all on the heap which is pretty cool.

188
00:12:05,540 --> 00:12:05,980
OK.

189
00:12:06,050 --> 00:12:07,870
So that finishes off this video.

190
00:12:07,970 --> 00:12:10,930
I hope this makes a lot of sense if you have any questions please let me know.
