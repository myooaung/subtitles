WEBVTT
1
00:00:05.380 --> 00:00:13.060
According to Bjarne Stroustrup the inventor of C++ generic programming is quote writing code that works

2
00:00:13.060 --> 00:00:15.110
with a variety of types as arguments.

3
00:00:15.310 --> 00:00:21.630
As long as those argument types meet the specific syntax and semantic requirements end quote.

4
00:00:21.700 --> 00:00:24.620
So why is generic programming such a big deal.

5
00:00:25.000 --> 00:00:29.950
Well it's because if I have code that's written to be generic then I should be able to use any types

6
00:00:29.950 --> 00:00:32.980
with that code as long as it makes sense and it should work.

7
00:00:34.100 --> 00:00:36.190
We'll see this specific example later.

8
00:00:36.290 --> 00:00:41.450
But what if I wanted to have a function that took some number as a parameter and returned the square

9
00:00:41.450 --> 00:00:47.660
of that number with generic programming I should be able to pass in any numeric type into that function

10
00:00:48.070 --> 00:00:54.800
and it will return the correct result so it should work with its short ints longs long longs floats

11
00:00:54.800 --> 00:00:57.570
doubles and so forth you get the idea.

12
00:00:57.780 --> 00:00:59.340
But we have a bit of a problem.

13
00:00:59.400 --> 00:01:05.790
The C++ compiler is statically typed so it needs to know the type being passed into that function so

14
00:01:05.790 --> 00:01:07.440
it can type check it.

15
00:01:07.470 --> 00:01:12.940
So if I write the function to expect an integer then I will be able to call it correctly with a double.

16
00:01:12.960 --> 00:01:15.600
So how can we get this to work in C++.

17
00:01:15.840 --> 00:01:18.260
There's a couple of ways in this video.

18
00:01:18.270 --> 00:01:24.390
Look at macros and then the next several videos will learn about function and class templates.

19
00:01:24.390 --> 00:01:27.030
Notice the note on the macros bullet.

20
00:01:27.030 --> 00:01:29.130
Be very careful when you use macros.

21
00:01:29.130 --> 00:01:33.210
In practice especially macros that use arguments.

22
00:01:33.720 --> 00:01:35.730
So why am I showing it to you then.

23
00:01:36.120 --> 00:01:40.740
Well sometimes the best way to teach how to do something correctly is to first teach how to do it in

24
00:01:40.740 --> 00:01:42.620
a way that's inferior.

25
00:01:42.780 --> 00:01:43.460
Second.

26
00:01:43.560 --> 00:01:46.470
You'll likely see this out there in production code.

27
00:01:46.470 --> 00:01:52.450
There's a ton of legacy C++ code out there and macros are used in much of that code.

28
00:01:52.530 --> 00:01:59.310
Macros are used more extensively in C code though and we sometimes see C code use with C plus plus code.

29
00:01:59.400 --> 00:02:01.770
Now we've actually already used a macro.

30
00:02:01.770 --> 00:02:07.350
Remember when we created the include guards around our DOT h header files we used poun define.

31
00:02:07.350 --> 00:02:11.900
Well that's a macro in the context of Hetter guards and conditional compilation.

32
00:02:11.910 --> 00:02:16.820
It's OK to use macros but don't use macros in your code as I'll show you here.

33
00:02:17.060 --> 00:02:19.190
OK so let's see how these macros work.

34
00:02:20.600 --> 00:02:23.090
First the macros begin with the pound sign.

35
00:02:23.090 --> 00:02:28.370
And we know that all directives that begin with the pound sign are preprocessor directives and what

36
00:02:28.370 --> 00:02:29.320
else do we know.

37
00:02:29.540 --> 00:02:33.340
Well we know that the preprocessor doesn't know C++.

38
00:02:33.410 --> 00:02:36.950
So there is no type information associated with macros.

39
00:02:36.980 --> 00:02:44.370
The preprocessor is just doing simple substitution noticed the first poun define defines the name Max

40
00:02:44.390 --> 00:02:46.750
size to be 100.

41
00:02:46.750 --> 00:02:49.680
Notice that the 100 has no type associated with it.

42
00:02:49.690 --> 00:02:57.030
It's just a 100 the second poun define defines the named pi to be three point 1 4 1 5 9.

43
00:02:57.030 --> 00:03:02.910
Now if we use these names in our program the preprocessor will replace the names with what we defined

44
00:03:02.910 --> 00:03:04.170
them to represent.

45
00:03:04.170 --> 00:03:07.240
Notice that there is no semi-colon at the end of the macros.

46
00:03:07.260 --> 00:03:10.250
If there was then the semi-colon would also be copied.

47
00:03:10.250 --> 00:03:14.220
And that's not usually what we want in this.

48
00:03:14.220 --> 00:03:20.400
We can see Max size being used in the expression and the if statement and pi is being used in a calculation

49
00:03:22.050 --> 00:03:26.630
the preprocessor will first remove the pound to find statements from our code.

50
00:03:26.790 --> 00:03:32.820
Then it goes through the program and replaces any defined names with what we defined them to be.

51
00:03:32.820 --> 00:03:37.380
You can see the values being replaced here in the if statement and the calculation.

52
00:03:37.380 --> 00:03:40.590
Now the process file is sent to the compiler.

53
00:03:40.590 --> 00:03:44.030
It looks simple and it is but there's a better way to do this.

54
00:03:44.040 --> 00:03:45.670
And we learned it a long time ago.

55
00:03:45.840 --> 00:03:50.930
We used constants constants are typed and they're known to the compiler.

56
00:03:51.000 --> 00:03:53.800
I know what you're thinking what does this have to do a generic programming.

57
00:03:53.820 --> 00:03:55.800
I'll show you in the next line.

58
00:03:55.800 --> 00:04:01.410
Suppose we want to write a function that expects to integers and returns the maximum of those to integers.

59
00:04:01.440 --> 00:04:05.460
We could easily write that Max function as you can see in this slide.

60
00:04:05.520 --> 00:04:11.260
Note that we're using the conditional operator so it evaluates a greater than B and if it's true then

61
00:04:11.290 --> 00:04:14.040
A is returned otherwise B is returned.

62
00:04:14.070 --> 00:04:16.820
Simple if else logic.

63
00:04:16.840 --> 00:04:19.070
Now we can define two ints x and y.

64
00:04:19.120 --> 00:04:21.730
Call the max function with X and Y as parameters.

65
00:04:21.730 --> 00:04:24.470
And it works perfectly OK so what.

66
00:04:24.470 --> 00:04:27.060
Whereas the generic programming.

67
00:04:27.070 --> 00:04:32.170
Now suppose we need a max function for doubles and another one for characters and we could have another

68
00:04:32.170 --> 00:04:38.510
one for floats and long as you get the idea we could end up writing many of these max functions.

69
00:04:38.620 --> 00:04:40.960
The code is the same for all of them.

70
00:04:41.020 --> 00:04:43.510
It's that code with the conditional operator.

71
00:04:43.630 --> 00:04:47.590
The only thing that changes is the types of the parameters.

72
00:04:47.650 --> 00:04:53.680
Remember the idea behind generic programming I should be able to use max with any types as long as they

73
00:04:53.680 --> 00:04:54.680
make sense.

74
00:04:55.000 --> 00:04:59.050
But how can I do that without writing many versions of this function like we did here.

75
00:04:59.320 --> 00:05:08.470
But one way is to use macros with parameters in this slide we're defining a macro named Max that expects

76
00:05:08.470 --> 00:05:15.230
two arguments A and B and we can define it to be the conditional expression we saw earlier.

77
00:05:15.250 --> 00:05:20.980
So when the preprocessor sees Max with two arguments it will replace it with what we defined it in the

78
00:05:20.980 --> 00:05:25.200
macro and it will also replace the arguments A and B.

79
00:05:25.210 --> 00:05:30.020
So now we have no functions defined just a single macro called Max.

80
00:05:30.460 --> 00:05:34.010
We can now use max in our code with arguments as you see in the examples.

81
00:05:34.030 --> 00:05:35.410
It works fine.

82
00:05:35.470 --> 00:05:38.080
That's an example of generic programming.

83
00:05:38.080 --> 00:05:41.280
Remember the preprocessor is simply substituting.

84
00:05:41.350 --> 00:05:43.100
It doesn't know C++.

85
00:05:43.240 --> 00:05:47.850
So problems can occur once the compiler tries to compile the process code.

86
00:05:49.380 --> 00:05:51.750
We have to be very careful with macros.

87
00:05:51.780 --> 00:05:53.220
Here's an example.

88
00:05:53.250 --> 00:05:59.520
Suppose we want a simple macro that's defined as poun defined square with a single argument.

89
00:06:00.030 --> 00:06:02.480
And it's defined as a times a.

90
00:06:02.670 --> 00:06:06.660
Looks simple and it is but there's a few problems here.

91
00:06:06.690 --> 00:06:08.010
Now we can use that macro.

92
00:06:08.010 --> 00:06:14.370
End result equal square with the five square 5 were be replaced with five times five and all is good.

93
00:06:14.670 --> 00:06:16.530
But look at the next example.

94
00:06:16.590 --> 00:06:19.990
Result equals 100 divided by square 5.

95
00:06:20.120 --> 00:06:24.020
What we expect is 100 divided by 25 which is four.

96
00:06:24.330 --> 00:06:25.900
But that's not what we get.

97
00:06:25.950 --> 00:06:29.200
We get 100 divided by five times five.

98
00:06:29.220 --> 00:06:31.350
Again blind substitution.

99
00:06:31.350 --> 00:06:35.940
So how can we make this better when we use macros.

100
00:06:35.940 --> 00:06:38.950
We can wrap up all the arguments in parentheses.

101
00:06:39.090 --> 00:06:40.830
This is the best practice.

102
00:06:40.860 --> 00:06:44.400
Now we give ourselves a better chance that the result will be correct.

103
00:06:44.730 --> 00:06:47.450
In this case we now get what we expect.

104
00:06:47.950 --> 00:06:52.810
OK so why don't we want to do this because the compiler isn't doing it.

105
00:06:52.830 --> 00:06:58.390
The preprocessor is doing it and it doesn't know the syntax or semantics of C++.

106
00:06:58.620 --> 00:07:01.160
Don't use macros with arguments in your code.

107
00:07:01.290 --> 00:07:05.980
If you have legacy code understand how it works or that you can better test the code.

108
00:07:06.270 --> 00:07:11.010
So what's a better way to write these Max and square functions so that we can use generic programming

109
00:07:11.100 --> 00:07:13.200
and let the compiler do the work.

110
00:07:13.200 --> 00:07:18.420
We can use templates in this case function templates and we'll learn about them in the next video.
