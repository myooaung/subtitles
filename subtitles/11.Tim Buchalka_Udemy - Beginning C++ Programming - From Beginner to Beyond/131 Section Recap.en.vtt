WEBVTT
1
00:00:05.510 --> 00:00:10.460
OK so now that we know about pointers and references let's talk about when we want to use pointers versus

2
00:00:10.460 --> 00:00:13.350
reference as function parameters.

3
00:00:13.450 --> 00:00:15.420
First let's look at pass by value.

4
00:00:16.200 --> 00:00:20.030
Remember that pass by value is what C++ does by default.

5
00:00:20.070 --> 00:00:26.190
So you want to use pass by value parameters when the function does not modify the actual parameter and

6
00:00:26.190 --> 00:00:29.340
the parameters are small and efficient to copy.

7
00:00:29.340 --> 00:00:34.720
This is true of the primitive types like integers doubles characters booleans and others.

8
00:00:34.830 --> 00:00:40.200
Note that the collection types like strings and vectors and others have a certain amount of overhead

9
00:00:40.200 --> 00:00:41.580
involved when they're copied.

10
00:00:41.700 --> 00:00:44.660
So you want to think twice before you pass those by value.

11
00:00:46.650 --> 00:00:50.550
In the case of pass by reference with a regular pointer.

12
00:00:50.760 --> 00:00:56.460
In this case we do want to modify the actual parameter from within the function and the parameter is

13
00:00:56.460 --> 00:01:03.720
expensive to copy and then the last criteria is that it's OK for the pointer to contain a null value.

14
00:01:03.720 --> 00:01:09.690
This is important because a lot of data structures rely on pointers becoming null at the end of lists

15
00:01:09.690 --> 00:01:10.930
or Dand of trees.

16
00:01:11.130 --> 00:01:18.640
So in those cases you really want to pass pointers and not references because references can't be null.

17
00:01:18.650 --> 00:01:22.400
Let's take a look at pass by reference using a pointer to contest.

18
00:01:22.520 --> 00:01:27.890
In this case this is suitable when the function does not modify the actual parameter but the actual

19
00:01:27.890 --> 00:01:30.660
parameter is expensive to copy.

20
00:01:30.660 --> 00:01:36.210
Also remember that pointers can contain null values and this is very useful in data structures.

21
00:01:36.210 --> 00:01:42.730
In this case the pointer is allowed to contain a null value in the case of pass by reference using a

22
00:01:42.730 --> 00:01:45.050
constant pointer to contest.

23
00:01:45.400 --> 00:01:50.700
In this case it's very useful when the function does not modify the actual parameter and the parameter

24
00:01:50.700 --> 00:01:52.270
is expensive to copy.

25
00:01:52.270 --> 00:01:57.730
It's OK to have a null pointer and also the function never modifies the pointer itself.

26
00:01:58.030 --> 00:02:02.800
So this is a good example of where you would pass something in and you're guaranteed that the pointer

27
00:02:02.800 --> 00:02:05.940
is not moving and the data it's pointing to is not going to change.

28
00:02:06.960 --> 00:02:13.980
OK so now let's look at references in the case of pass by reference using a regular reference parameter.

29
00:02:13.980 --> 00:02:20.750
This is used when the function does modify the actual parameter and the parameter is expensive to copy.

30
00:02:20.760 --> 00:02:24.110
Of course you can never have no values in the reference.

31
00:02:24.150 --> 00:02:29.160
So if you're working with data structures that rely on null values you really should be using pointers

32
00:02:29.160 --> 00:02:36.750
and not references and in the case of pass by reference using a constant reference this is useful when

33
00:02:36.750 --> 00:02:42.170
the function doesn't modify the actual parameter but the parameter is expensive to copy.

34
00:02:42.180 --> 00:02:48.510
And again you can't have nold references so if you need no values to go with the pointers.

35
00:02:48.640 --> 00:02:49.560
OK there you go.

36
00:02:49.560 --> 00:02:50.610
Those are a few guidelines.

37
00:02:50.610 --> 00:02:55.970
These are just guidelines that can be used to make your program better and easier to modify and debug.

38
00:02:55.980 --> 00:02:57.740
That's the end of this section.

39
00:02:57.750 --> 00:03:01.740
This section can be difficult for many beginning programmers but it's important that you go through

40
00:03:01.740 --> 00:03:05.280
the example slowly and then make up your own examples.

41
00:03:05.460 --> 00:03:11.340
Pointers and references are two concepts that make C++ very different from other languages like Java

42
00:03:11.370 --> 00:03:14.370
Python Ruby javascript and so many more.

43
00:03:14.400 --> 00:03:19.430
Remember at the beginning I talked about C++ programmers being in control of memory and hardware.

44
00:03:19.670 --> 00:03:24.300
You know how it works and have the foundation to move to o programming and C++.

45
00:03:24.510 --> 00:03:26.290
That's coming up in the next section.

46
00:03:26.400 --> 00:03:31.670
But first have a go at the section challenge which will give you a little bit more practice with pointers.
