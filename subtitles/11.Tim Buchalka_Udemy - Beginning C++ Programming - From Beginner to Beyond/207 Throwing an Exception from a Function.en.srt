1
00:00:05,560 --> 00:00:11,140
This video we'll see a use case that's commonly seen in C++ and we'll see how we can use exception handling

2
00:00:11,140 --> 00:00:12,570
with it.

3
00:00:12,580 --> 00:00:14,040
Suppose we have a function.

4
00:00:14,200 --> 00:00:20,380
Of course this will also work with methods and that function is called calculate average it expects

5
00:00:20,380 --> 00:00:25,240
a sum of integers that we can assume has already been calculated somewhere else and the total number

6
00:00:25,240 --> 00:00:27,410
of elements used to get that sum.

7
00:00:27,700 --> 00:00:32,520
And what we want to do is determine the average and return it as a double from this function.

8
00:00:32,530 --> 00:00:34,380
Pretty straightforward stuff.

9
00:00:34,420 --> 00:00:38,800
Also notice that we don't want integer division since we want to return a double.

10
00:00:38,800 --> 00:00:43,550
So we're using a static cast to convert one of the division operands to a double call.

11
00:00:43,550 --> 00:00:45,510
So so far pretty easy right.

12
00:00:45,820 --> 00:00:48,490
Well almost what if total is zero.

13
00:00:48,550 --> 00:00:49,220
What do we do.

14
00:00:49,240 --> 00:00:50,580
What do we return.

15
00:00:50,710 --> 00:00:54,260
We could return 0 but 0 might be a valid average.

16
00:00:54,310 --> 00:00:58,150
We could return negative 1 but negative one might be a valid average.

17
00:00:58,150 --> 00:01:01,870
We could return some other double that represents an error but which one.

18
00:01:01,870 --> 00:01:07,720
Since just about any double could be a valid average we could rewrite this function to return a boolean

19
00:01:07,960 --> 00:01:10,240
and that boolean would indicate success right.

20
00:01:10,240 --> 00:01:11,990
True if it worked false if it didn't.

21
00:01:12,040 --> 00:01:16,690
But then how do we return the average we'd have to use a reference parameter and do it that way or use

22
00:01:16,690 --> 00:01:21,050
a tuple makes the function really clunky to use.

23
00:01:21,070 --> 00:01:26,680
So let's see how we can write this function using exceptions and exception handling.

24
00:01:26,950 --> 00:01:32,530
We can rewrite the function without changing its interface and still provide a guarantee that the function

25
00:01:32,530 --> 00:01:36,280
will not divide by zero by throwing an exception.

26
00:01:36,280 --> 00:01:41,890
First we check if total is equal to zero if it is we don't want to do that division.

27
00:01:41,890 --> 00:01:43,720
Instead we throw zero.

28
00:01:43,990 --> 00:01:49,870
In this case we could throw anything in C++ allows us to throw just about any type but let's use zero

29
00:01:49,870 --> 00:01:52,690
again which is an integer and we've done it previously.

30
00:01:52,690 --> 00:01:57,330
If we throw the exception the division will not happen and the function will terminate.

31
00:01:57,700 --> 00:02:02,920
Now C++ will try to find an exception handler to catch that integer that the function threw.

32
00:02:03,040 --> 00:02:03,990
How does it do that.

33
00:02:04,090 --> 00:02:07,900
Well the handler isn't in this function so where else might it be.

34
00:02:07,990 --> 00:02:11,160
It may not exist at all in which case the program would terminate.

35
00:02:11,740 --> 00:02:16,980
But if an exception handler exists it must be in one of the functions on the call stack that called

36
00:02:16,990 --> 00:02:18,080
this function right.

37
00:02:18,280 --> 00:02:21,690
And C++ will unwind the stack looking for it.

38
00:02:21,730 --> 00:02:23,860
We'll see how this works in a few videos.

39
00:02:24,130 --> 00:02:29,910
So let's see how this function might be called in a way that would allow us to deal with the exception.

40
00:02:29,940 --> 00:02:33,660
Now this code could exist in any function anywhere in your program.

41
00:02:33,660 --> 00:02:39,380
Notice that we have a try block and in the try block we call the calculate average function.

42
00:02:39,420 --> 00:02:44,360
We know this function might throw an exception and if it does we'll deal with it in the catch block.

43
00:02:44,730 --> 00:02:47,960
But first let's see what happens if no exception is thrown.

44
00:02:48,180 --> 00:02:52,280
Again we're assuming that some in total have been declared and initialized.

45
00:02:52,290 --> 00:02:56,850
In this case average is assigned the return value from the function and we display it.

46
00:02:56,850 --> 00:03:02,250
Then we skip the catch block completely since no exceptions were thrown and we execute the last statement

47
00:03:02,250 --> 00:03:09,150
that displays by if calculate average does throw an exception then the remaining code in the try block

48
00:03:09,180 --> 00:03:10,610
is not executed.

49
00:03:10,620 --> 00:03:17,580
So we do not do the division by zero and C++ searches for a catch block that expects an integer since

50
00:03:17,580 --> 00:03:23,340
that's the type of the exception that was thrown in this case it finds it noticed that our catch handler

51
00:03:23,340 --> 00:03:25,760
expects a reference to an integer.

52
00:03:25,770 --> 00:03:29,720
Again best practice is to throw by value and catch by reference.

53
00:03:29,730 --> 00:03:31,760
We'll talk more about that later.

54
00:03:31,770 --> 00:03:37,410
So in this case the code in the body of the catch handler executes displays an error message to the

55
00:03:37,510 --> 00:03:43,270
airstream when the catch block completes we transfer to the last statement and we display by that's

56
00:03:43,290 --> 00:03:48,930
it it's possible to have multiple catch handlers as well as catch all handlers that will catch any type

57
00:03:48,930 --> 00:03:49,770
of exception.

58
00:03:49,800 --> 00:03:51,200
We'll do that in the next video.

59
00:03:51,300 --> 00:03:57,330
But first let's head over to the idea and we'll rewrite the MPG example as a function and use exception

60
00:03:57,330 --> 00:03:58,600
handling with it.

61
00:03:59,250 --> 00:04:05,640
OK so I'm backing the idea again I'm in the section 18 workspace and I'm in the MPG function project

62
00:04:06,430 --> 00:04:11,930
what I've done here is I've taken the calculation for miles per gallon and I've made it a function.

63
00:04:11,940 --> 00:04:17,070
So in this case it expects miles and gallons which are both integers and returns the double which is

64
00:04:17,070 --> 00:04:18,260
the miles per gallon.

65
00:04:18,360 --> 00:04:20,900
And I'm simply abody miles by gallons.

66
00:04:21,030 --> 00:04:25,940
And again I'm casting miles to a double so that we do double division and get an accurate result.

67
00:04:26,130 --> 00:04:26,830
That's it.

68
00:04:26,850 --> 00:04:31,680
My main is just like it was before the user enters the miles the gallons and the only difference now

69
00:04:31,680 --> 00:04:37,750
is that on line 19 right here you can see that I'm calling calculate miles per gallon and I'm passing

70
00:04:37,750 --> 00:04:39,730
in the user entered valleys.

71
00:04:39,900 --> 00:04:45,000
So let's run this as is without any exception handling without any error checking at all.

72
00:04:45,000 --> 00:04:53,310
So we'll run this and let's say I entered 120 miles and I entered 0 there is my result which is infinity

73
00:04:53,320 --> 00:04:57,370
that's not what I want and we'll deal with that in just a sec.

74
00:04:57,540 --> 00:05:00,390
So we know that we don't want to divide by zero.

75
00:05:00,390 --> 00:05:09,880
So what we can do appear in the function is we can say if gallons is 0 we want to throw an exception

76
00:05:10,000 --> 00:05:14,170
and we'll just throw again we'll throw 0 which is a simple integer.

77
00:05:14,170 --> 00:05:15,620
Now let's run this.

78
00:05:15,640 --> 00:05:17,690
You'll see something that's a little bit different now.

79
00:05:17,860 --> 00:05:24,040
When I call calculate miles per gallon here and I use a zero for the gallons it's going to throw this

80
00:05:24,040 --> 00:05:27,230
exception that exceptions not being caught anywhere.

81
00:05:27,490 --> 00:05:29,400
So it's going to go all the way up to the top.

82
00:05:29,410 --> 00:05:33,160
My main that's where I'm at now and our programs going to terminate.

83
00:05:33,160 --> 00:05:34,730
It's going to terminate abnormally.

84
00:05:34,870 --> 00:05:38,470
So let's run this so you can see what that looks like.

85
00:05:38,470 --> 00:05:44,220
So again I'm going to enter 120 and enter 0 for the gallons and you can see right there it says.

86
00:05:44,280 --> 00:05:45,100
I'll cancel that.

87
00:05:45,100 --> 00:05:48,540
You can see it's terminate called after throwing an instance of it.

88
00:05:48,640 --> 00:05:55,300
This application has requested the runtime to terminate it in an unusual way a bad termination right.

89
00:05:55,330 --> 00:06:00,450
Basically an exception was thrown that was not handled that will always terminate your program.

90
00:06:00,790 --> 00:06:03,160
So how do we handle that exception.

91
00:06:03,190 --> 00:06:09,920
Remember the mile to calculate mpg function appear has no clue what to do when it gallons is zero.

92
00:06:09,940 --> 00:06:15,170
All it knows is I can't do a divide by zero and should I just print an error message.

93
00:06:15,190 --> 00:06:15,900
I don't know what to do.

94
00:06:15,910 --> 00:06:17,030
So someone else do it.

95
00:06:17,170 --> 00:06:18,690
I'm just throwing the exception.

96
00:06:18,850 --> 00:06:24,910
So what we can do down here is we can write a try block around this code that could potentially throw

97
00:06:24,910 --> 00:06:25,670
an exception.

98
00:06:25,720 --> 00:06:26,860
So let's do that.

99
00:06:26,860 --> 00:06:33,630
I'll say try and I'll close off the tribe walk here and we'll indent this area right here.

100
00:06:33,730 --> 00:06:36,240
So I'm going to try to execute that function.

101
00:06:36,250 --> 00:06:42,220
If the function works properly then I just print out miles per gallon if that function throws an exception

102
00:06:42,700 --> 00:06:46,350
then we're not going to divide right because it's thrown out before the division.

103
00:06:46,360 --> 00:06:50,980
It's not going to assign miles per gallon basically the tribe will stop and it's going to look for a

104
00:06:50,980 --> 00:06:52,240
catch handler.

105
00:06:52,410 --> 00:06:52,620
Right.

106
00:06:52,630 --> 00:06:56,540
So let's write the catch handler our catch handler looks kind of like this.

107
00:06:56,620 --> 00:06:57,680
What am I going to catch.

108
00:06:57,690 --> 00:07:06,070
Well I'm going to catch an integer by reference and right here I'm simply going to print stood Sierre

109
00:07:06,430 --> 00:07:10,330
tried to divide by zero or something like that.

110
00:07:11,780 --> 00:07:12,260
OK.

111
00:07:12,310 --> 00:07:12,800
That's it.

112
00:07:12,790 --> 00:07:18,190
So you can see now that the errors detected in one place and it's all in one file here just for instruction

113
00:07:18,190 --> 00:07:19,020
purposes.

114
00:07:19,150 --> 00:07:21,100
But this could be anywhere in your program right.

115
00:07:21,100 --> 00:07:25,090
The error has been detected here and it's been handled here.

116
00:07:25,210 --> 00:07:26,610
So let's run this now.

117
00:07:28,340 --> 00:07:34,720
And we'll do it again 120 and 0 tried to divide by zero by our program terminated.

118
00:07:34,730 --> 00:07:38,290
Normally we handle the exception in a controlled manner.

119
00:07:38,420 --> 00:07:40,420
And that's really what it's all about.

120
00:07:40,700 --> 00:07:45,350
Now in this case there could be some issues that we need to catch some other exceptions and that's what

121
00:07:45,350 --> 00:07:46,910
we'll do in the next video.

122
00:07:46,940 --> 00:07:50,360
What if Miles is negative but that doesn't make sense.

123
00:07:50,360 --> 00:07:52,720
I traveled negative 100 miles per gallon.

124
00:07:52,730 --> 00:07:58,330
So we want to also throw an error if Miles is negative or if gallons is negative for that matter right

125
00:07:58,370 --> 00:07:59,950
how can you have negative gallons.

126
00:07:59,960 --> 00:08:04,850
So in this case we're just doing a simple test so we don't divide by zero but in the other cases which

127
00:08:04,850 --> 00:08:09,050
will do in the next video we're going to check to make sure that we've got valid values here.

128
00:08:09,050 --> 00:08:14,290
So if Miles is negative or gallons is negative then my calculation cannot be correct.

129
00:08:14,330 --> 00:08:18,120
So we'll throw another exception there and we'll catch multiple exceptions.

130
00:08:18,200 --> 00:08:19,350
So we'll do that in the next few.
