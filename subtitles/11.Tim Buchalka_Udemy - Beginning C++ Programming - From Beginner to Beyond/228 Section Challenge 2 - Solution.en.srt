1
00:00:05,430 --> 00:00:09,010
Welcome back to the section 19 challenge to solution.

2
00:00:09,020 --> 00:00:11,030
Hope you had fun doing that challenge.

3
00:00:11,040 --> 00:00:12,030
It was pretty nice.

4
00:00:12,030 --> 00:00:15,810
And you got a lot of different ways that you can tweak and extended to make it your own.

5
00:00:15,840 --> 00:00:20,950
So I'm in the section 19 workspace in the challenge underscore to underscore solution project.

6
00:00:21,150 --> 00:00:23,570
And I wrote some functions to solve this.

7
00:00:23,640 --> 00:00:28,370
But first I just want to go through the logic in the main So you could see that it's really dead simple

8
00:00:28,380 --> 00:00:30,470
and the functions that I wrote make it even simpler.

9
00:00:30,630 --> 00:00:33,930
So let's just start here at the top and we'll walk through this.

10
00:00:33,930 --> 00:00:39,340
I've got an input file stream called infile that's what I'm going to use to read the responses file.

11
00:00:39,480 --> 00:00:45,070
I've got a string for the answer key and I've got a string for the student name and the student responses

12
00:00:45,070 --> 00:00:46,280
and I'm going to read it.

13
00:00:46,320 --> 00:00:48,380
Each iteration of the file read.

14
00:00:48,460 --> 00:00:53,430
Ok then I've got a running sum and a total number of students that we're going to use to calculate the

15
00:00:53,430 --> 00:00:54,900
average score.

16
00:00:54,920 --> 00:00:55,360
OK.

17
00:00:55,470 --> 00:00:56,550
Pretty simple.

18
00:00:56,550 --> 00:01:04,380
So let me scroll up just a little bit here and here is my program pretty much opening the input file

19
00:01:04,380 --> 00:01:07,070
right here responses to x T.

20
00:01:07,080 --> 00:01:12,070
Notice again that the dot dot slash should because I mean code like if you were in another Id probably

21
00:01:12,090 --> 00:01:17,230
have to do the same thing or just use responses that text it's totally up to the ID.

22
00:01:17,400 --> 00:01:22,320
If we can't open that file we display problem up the file and we're out of here just like before and

23
00:01:22,320 --> 00:01:27,480
then the very first thing I'm going to do right here I'm reading that first line in the file right.

24
00:01:27,570 --> 00:01:31,390
Or the first string in the file which is the answer key.

25
00:01:31,480 --> 00:01:34,320
That's it I'm reading it from file and storing get an answer key.

26
00:01:34,330 --> 00:01:39,320
So that will be that A B C D string.

27
00:01:39,460 --> 00:01:48,440
Then I'm going to print the header which just displays student and score with a bunch of dashes underneath

28
00:01:48,440 --> 00:01:48,620
it.

29
00:01:48,620 --> 00:01:53,450
So that's a function that I'm using to print the header and then I've got the logic of my loop right

30
00:01:53,450 --> 00:02:01,280
here so I'm saying while read from infile the name and the response pair if anything.

31
00:02:01,280 --> 00:02:04,780
And those two are strings that I declared up top I just showed them to you a minute ago.

32
00:02:04,970 --> 00:02:06,740
If anything all goes wrong here.

33
00:02:06,800 --> 00:02:07,920
Hit and file.

34
00:02:07,970 --> 00:02:10,670
If we have a bad read We've got bad data.

35
00:02:10,760 --> 00:02:12,690
This will fail and I'm out of here.

36
00:02:12,980 --> 00:02:19,550
But if we don't now we've got name and response contain the strings for for example Frank and Frank's

37
00:02:19,760 --> 00:02:20,830
response.

38
00:02:21,020 --> 00:02:25,370
We increment the total number of students because we need to do that to calculate the average and then

39
00:02:25,370 --> 00:02:28,050
I'm going to call a function called process response.

40
00:02:28,100 --> 00:02:33,500
I'm going to pass into it the response and the answer key and it's going to return an integer with the

41
00:02:33,500 --> 00:02:34,370
score.

42
00:02:34,520 --> 00:02:37,620
So it'll return 0 1 2 3 4 5.

43
00:02:37,610 --> 00:02:41,870
In this case because that's we can get them all wrong or you can get them all right or everything in

44
00:02:41,870 --> 00:02:47,370
between that's it I add the score to my running some of scores.

45
00:02:47,370 --> 00:02:51,450
And then I call print student I'm going to call that each time.

46
00:02:51,450 --> 00:02:52,870
So I'm going to print the student's name.

47
00:02:52,880 --> 00:02:58,970
So right here I'll say Frank and Frank got a five minute loop and I do it again.

48
00:02:59,080 --> 00:02:59,350
OK.

49
00:02:59,350 --> 00:03:01,660
So I'm going to clear this screen real quick.

50
00:03:01,720 --> 00:03:04,650
Then at the very end I just calculate the average.

51
00:03:04,760 --> 00:03:07,220
To be sure that I don't do a division by zero error.

52
00:03:07,240 --> 00:03:12,070
So if the total number of students is not equal to zero I'm going to do the division and I'm doing the

53
00:03:12,060 --> 00:03:18,280
static cast that you guys have seen before here psych's I need to make one of these double and at the

54
00:03:18,280 --> 00:03:22,540
end I get the footer and in order to print the FOTR it doesn't know what the average score is.

55
00:03:22,540 --> 00:03:24,680
So I'm sending it to it.

56
00:03:24,800 --> 00:03:26,430
I close the file and I'm done.

57
00:03:26,650 --> 00:03:29,880
OK so you can see the logic is really straightforward right.

58
00:03:29,890 --> 00:03:33,260
You can see here I'm opening the file making sure it's open.

59
00:03:33,280 --> 00:03:35,190
I'm closing the file down here.

60
00:03:35,470 --> 00:03:37,670
I'm reading from the file right here and the rest.

61
00:03:37,720 --> 00:03:43,600
And here as well and the rest is just the processing that I need to solve this specific problem.

62
00:03:43,750 --> 00:03:45,870
OK so now let's take a look at these methods.

63
00:03:45,970 --> 00:03:51,900
Scroll up a little bit and let's start with the printhead method.

64
00:03:52,260 --> 00:03:53,300
Pretty straightforward right.

65
00:03:53,310 --> 00:03:58,860
Just a bunch of print statements to see out and what I'm doing here is I'm displaying the student and

66
00:03:58,860 --> 00:04:05,890
displaying the score and I'm using the set w manipulator here on and left to mine them up nicely.

67
00:04:06,000 --> 00:04:11,330
I could have used constants for 15 and 5 and 20 but I chose not to with such a simple little program.

68
00:04:11,550 --> 00:04:15,250
And then I'm using Cetaphil to display a little dashed line.

69
00:04:15,390 --> 00:04:16,310
That's it.

70
00:04:16,470 --> 00:04:19,460
I set Phil back to space just in case somebody else needs it.

71
00:04:19,470 --> 00:04:22,070
I don't want to have them display dashes.

72
00:04:22,260 --> 00:04:28,630
The footer is passed in the average score and it just displays the footer really really straightforward

73
00:04:28,770 --> 00:04:30,220
again.

74
00:04:30,330 --> 00:04:35,540
Now I probably should have used the set precision and set fixed one here but I'm using it here.

75
00:04:35,730 --> 00:04:40,810
So it's it's persistent but good practice is to put it in here as well right about here.

76
00:04:40,830 --> 00:04:45,670
That way if someone changed it and then this function got called you'll set it the way you want it.

77
00:04:46,140 --> 00:04:51,480
And then the last one is the print student where I pass in the student's name and the students score

78
00:04:51,480 --> 00:04:54,420
and I just display them just like we've done before.

79
00:04:54,420 --> 00:04:57,950
So these are just these handy little functions.

80
00:04:58,200 --> 00:05:02,460
And the reason we're using these functions is so we don't clutter up our main and this is just a lot

81
00:05:02,460 --> 00:05:07,500
of code a lot of noise really because it's just all about I mean all I'm doing here is displaying student

82
00:05:07,500 --> 00:05:08,880
displaying score.

83
00:05:08,880 --> 00:05:13,490
But you've got all this other stuff around with the manipulators I need to set which set I need to do

84
00:05:13,500 --> 00:05:15,470
left and I need to write precisions.

85
00:05:15,570 --> 00:05:17,980
And it just really clutters up the logic in the main.

86
00:05:18,120 --> 00:05:24,090
So you really want to extract that out of modularize it out into a function get it out of the way and

87
00:05:24,270 --> 00:05:26,130
out of sight out of mind it's abstraction.

88
00:05:26,130 --> 00:05:30,570
I just call footer and whenever I need it and pass it an average I just call print Hetter and that's

89
00:05:30,570 --> 00:05:31,870
it real simple.

90
00:05:32,130 --> 00:05:36,700
And then the last thing is that function that actually calculates the number right.

91
00:05:36,720 --> 00:05:39,090
So that's a process response right here.

92
00:05:39,120 --> 00:05:44,280
So we're passing in the student's response which was a string that could be like ABC x x or whatever

93
00:05:44,280 --> 00:05:45,170
it is.

94
00:05:45,300 --> 00:05:53,180
And the answer key which in this case was a b c d and we're setting the score to zero we're assuming

95
00:05:53,180 --> 00:05:58,190
they haven't gotten anything right and all we're doing is we're looping one character at a time through

96
00:05:58,190 --> 00:06:06,200
that answer key and we're comparing the answer key to the response of the student at I if they're the

97
00:06:06,200 --> 00:06:06,550
same.

98
00:06:06,560 --> 00:06:08,220
We're bumping up the score.

99
00:06:08,540 --> 00:06:09,560
We're doing that throughout.

100
00:06:09,560 --> 00:06:11,940
So we're going to check this guy with this guy.

101
00:06:12,050 --> 00:06:14,990
And then this guy with this guy and so forth.

102
00:06:14,990 --> 00:06:17,130
When we're done we turn the score.

103
00:06:17,310 --> 00:06:17,760
So that's it.

104
00:06:17,780 --> 00:06:21,700
That's the solution or that's one solution you may have your own solution.

105
00:06:21,710 --> 00:06:23,160
If it's you think it's cool.

106
00:06:23,180 --> 00:06:31,780
Post it on the forum and if we run this that's what we get just what we expect students.

107
00:06:31,850 --> 00:06:34,350
Frank Larry Moe Curly Michael and their scores.

108
00:06:34,490 --> 00:06:36,540
And then the average score 3.6.

109
00:06:36,590 --> 00:06:40,300
And the nice thing about this solution I think is this right here.

110
00:06:40,640 --> 00:06:46,040
I mean I'm looking at the code right here which is really doing most of the work while this first one

111
00:06:46,040 --> 00:06:47,590
is well which is reading the key.

112
00:06:47,600 --> 00:06:53,360
So this this piece of code right here this is really what's doing it all in when you read it it's really

113
00:06:53,360 --> 00:06:59,270
really easy to read and reading the answer key and printing the header while I'm grabbing those pairs

114
00:06:59,750 --> 00:07:01,340
I'm processing the response.

115
00:07:01,340 --> 00:07:05,850
I'm printing each student and then I'm calculating the average and pretty in the footer.

116
00:07:06,050 --> 00:07:11,250
So looking at this it's really easy to understand and to debug it and that's it.

117
00:07:11,270 --> 00:07:12,110
That's the challenge.

118
00:07:12,110 --> 00:07:14,390
I hope you have fun with it I hope you extended it.

119
00:07:14,570 --> 00:07:17,170
And there's another challenge coming up right after this one.
