WEBVTT
1
00:00:05.660 --> 00:00:13.910
In this video we'll see how we can use abstract classes as interfaces in C++ and interface class and

2
00:00:13.910 --> 00:00:18.290
C++ is a class that has only pure virtual functions.

3
00:00:18.290 --> 00:00:24.500
These functions provide a general set of services that users of the class can use in order to be useful.

4
00:00:24.500 --> 00:00:27.800
These pure virtual functions must be declared as public.

5
00:00:27.800 --> 00:00:33.230
Any class that wants to be a concrete class and support the interface provided by the interface class

6
00:00:33.530 --> 00:00:37.940
can override the pure virtual functions and implement these services as needed.

7
00:00:37.940 --> 00:00:43.690
Remember every service must be implemented and C++ will strictly enforced type information.

8
00:00:43.760 --> 00:00:48.210
So when overriding the function prototypes must match exactly.

9
00:00:49.220 --> 00:00:56.000
Unlike Java C-Sharp and other languages C++ does not provide a specific keyword or way to create an

10
00:00:56.000 --> 00:00:59.040
interface as part of the C++ core language.

11
00:00:59.210 --> 00:01:06.610
So in C++ we use abstract classes with pure virtual functions to achieve the concept of an interface.

12
00:01:06.620 --> 00:01:09.610
Suppose we want to be able to provide any user defined object.

13
00:01:09.620 --> 00:01:15.230
The ability to be printed on a stream like C out we can do this by creating a printable interface class

14
00:01:15.470 --> 00:01:21.140
that provides the service in terms of a pure virtual function and then our user defined classes can

15
00:01:21.140 --> 00:01:27.400
simply be derived from printable and override this pure virtual function.

16
00:01:27.410 --> 00:01:33.170
Let's see an example here you can see that we have a class named printable and it has a pure virtual

17
00:01:33.170 --> 00:01:35.210
function named print.

18
00:01:35.210 --> 00:01:37.930
This makes this class an abstract class.

19
00:01:38.060 --> 00:01:43.550
The printable class also adds a friend function that will use to allow us to print any type of object

20
00:01:43.550 --> 00:01:46.530
that conforms to this interface.

21
00:01:46.550 --> 00:01:49.180
You can see that the overloaded operator function.

22
00:01:49.700 --> 00:01:54.590
You can see the overloaded operator function at the bottom of the screen and it calls RBJ.

23
00:01:54.680 --> 00:02:00.720
Print this would dynamically bind to the print function of whatever object type was passed in.

24
00:02:00.740 --> 00:02:06.820
Since we know that that object is printable and we have a reference to it that's pretty powerful stuff.

25
00:02:06.890 --> 00:02:11.060
At the end of the slides we'll head over to the idea and I'll show you how we can use this interface

26
00:02:11.330 --> 00:02:16.220
with the account hierarchy as well as with non-A account classes.

27
00:02:16.520 --> 00:02:23.570
So for any class to be printable it must be derived from printable and it must override the pure virtual

28
00:02:23.570 --> 00:02:26.310
function print that's in the printable interface.

29
00:02:26.580 --> 00:02:27.050
That's it.

30
00:02:27.050 --> 00:02:32.840
So in this case you can see that any class is derived from printable and it does override the print

31
00:02:32.870 --> 00:02:34.370
pure virtual function.

32
00:02:34.370 --> 00:02:37.050
Now any class is a printable.

33
00:02:38.090 --> 00:02:41.270
So let's create some any class objects and print them.

34
00:02:41.270 --> 00:02:47.810
First we create TR as a point to 20 class and create an any class object then we dereference the pointer

35
00:02:47.810 --> 00:02:51.590
to get that object and we use it in an output statement.

36
00:02:51.590 --> 00:02:57.470
This will call the overloaded insertion operator which will in turn call the function print of any class

37
00:02:57.920 --> 00:02:59.140
and this will display.

38
00:02:59.330 --> 00:03:01.810
Hi from any class.

39
00:03:01.820 --> 00:03:08.000
Now suppose we have two functions function one in function to function one expects in any class object

40
00:03:08.000 --> 00:03:12.510
by reference and function 2 expects a printable object by reference.

41
00:03:12.890 --> 00:03:17.530
Well we can call both these functions in passing the object Peachi are pointing to.

42
00:03:17.780 --> 00:03:18.510
Why.

43
00:03:18.560 --> 00:03:24.430
Because that object is an instance of any class and because that object is a printable.

44
00:03:24.590 --> 00:03:27.020
In both cases we get the same output.

45
00:03:27.020 --> 00:03:31.540
The print function in any class is bound dynamically.

46
00:03:31.580 --> 00:03:32.980
Let's see another example.

47
00:03:33.020 --> 00:03:38.870
Here we have a shape class that only has pure virtual functions so it's an abstract class and it can

48
00:03:38.870 --> 00:03:41.900
also be used as an interface class.

49
00:03:41.900 --> 00:03:47.660
What we're saying is if you want to be a concrete shape then you must be derived from shape and you

50
00:03:47.660 --> 00:03:51.360
must override the draw and the rotate pure virtual functions.

51
00:03:51.500 --> 00:03:53.870
So let's do that.

52
00:03:53.870 --> 00:03:57.750
Here we declare a circle class derived from the shape class.

53
00:03:57.800 --> 00:04:03.560
We know that if we want a circle to be a concrete class then we must override draw and rotate and that's

54
00:04:03.560 --> 00:04:05.770
exactly what we're doing in this example.

55
00:04:05.780 --> 00:04:10.910
Sometimes you'll see classes that are intended to be used as interface classes named with a capital

56
00:04:11.020 --> 00:04:12.980
i.e. preceding the host name.

57
00:04:12.980 --> 00:04:17.780
This makes it easy to know just by the name that the class is intended to be used as an interface.

58
00:04:18.050 --> 00:04:22.450
As you can see in this example shape was renamed to ice shape.

59
00:04:23.360 --> 00:04:28.490
Now when you see circle being derived from ICE shape you know that shape is intended as an interface

60
00:04:28.490 --> 00:04:29.560
class.

61
00:04:29.570 --> 00:04:35.990
This isn't a requirement but you tend to see that out there so we can now use pointers to shape objects

62
00:04:35.990 --> 00:04:38.360
to use dynamic polymorphism.

63
00:04:38.360 --> 00:04:44.030
Here we create a vector of pointers to shape objects and then we create three pointers and initialized

64
00:04:44.030 --> 00:04:49.700
them to point to three different types of shapes in order to call the overridden functions in the concrete

65
00:04:49.700 --> 00:04:50.690
classes.

66
00:04:50.690 --> 00:04:53.250
We simply loop through the vector and call the functions.

67
00:04:53.480 --> 00:04:56.320
You might be thinking isn't this the same as we did before.

68
00:04:56.570 --> 00:05:01.850
Yes since we must use inheritance in pure virtual functions it's interfaces in C++.

69
00:05:02.060 --> 00:05:06.850
But there's another difference and I'll show you that example in code let's head over to the idea now

70
00:05:06.850 --> 00:05:08.660
and we'll see.

71
00:05:08.710 --> 00:05:15.450
OK so I'm back in the IDM in the section 16 workspace in the interface's dash start project.

72
00:05:15.670 --> 00:05:21.400
We're going to do eventually is to implement that printable interface so that we're able to print any

73
00:05:21.400 --> 00:05:28.270
kind of class objects on a stream any kind of class objects that conform to the printable interface.

74
00:05:28.270 --> 00:05:31.270
So let's use this account hierarchy as a starting point.

75
00:05:31.270 --> 00:05:36.520
This is similar to what we did in the previous sections challenge I've gotten rid of a lot of the other

76
00:05:36.520 --> 00:05:40.290
stuff that's not necessary but let's just look at the key elements here.

77
00:05:40.300 --> 00:05:47.320
Here we've got a classic count right here and you can see that we have a friend function that overloads

78
00:05:47.530 --> 00:05:48.810
the insertion operator.

79
00:05:48.910 --> 00:05:53.080
It expects an output stream and an account object by reference.

80
00:05:53.170 --> 00:05:54.730
Perfect.

81
00:05:54.760 --> 00:05:56.730
Now we're going to implement that.

82
00:05:56.740 --> 00:05:58.290
We're going implement that right here.

83
00:05:58.330 --> 00:06:04.630
You can see that it's obviously a friend is not a member of the class and it expects an account.

84
00:06:04.660 --> 00:06:09.760
So if we have an account object and we put it on a stream this should fire and print it out and that

85
00:06:09.820 --> 00:06:10.840
absolutely works.

86
00:06:10.840 --> 00:06:13.100
And all it does is just says account display.

87
00:06:13.420 --> 00:06:15.360
Ok so now let's look at a checking account.

88
00:06:15.610 --> 00:06:19.540
You can see the checking kind of doing the same thing where we do we're duplicating this code all over

89
00:06:19.540 --> 00:06:22.360
the place and it's right here.

90
00:06:22.400 --> 00:06:23.430
There's my checking account.

91
00:06:23.440 --> 00:06:24.690
It is an account.

92
00:06:24.940 --> 00:06:28.920
Well I've got to do this now with a checking here so I'm implementing it over here.

93
00:06:28.920 --> 00:06:33.540
So this definitely works with the checking account and the displays checking display.

94
00:06:33.640 --> 00:06:38.890
The reason that we have to do this is because a friend functions are not inherited.

95
00:06:38.980 --> 00:06:44.680
So even though I've got this guy appear I am not getting him down here or further down the hierarchy.

96
00:06:44.740 --> 00:06:45.920
So that's one issue.

97
00:06:45.940 --> 00:06:51.100
The other issue is that in order for us to implement this operate operator the insertion OPERATOR It

98
00:06:51.100 --> 00:06:53.770
really doesn't make sense for it to be a member function.

99
00:06:53.770 --> 00:06:59.200
Remember if it was a member function I'd need the object on the left followed by insertion operator

100
00:06:59.200 --> 00:07:00.320
and then the stream.

101
00:07:00.580 --> 00:07:01.880
Well that's not how we do it right.

102
00:07:01.950 --> 00:07:05.760
We're doing something like stream object.

103
00:07:05.800 --> 00:07:11.340
So this really would work for sure but it would feel really clunky and nobody would ever use it.

104
00:07:11.380 --> 00:07:13.460
So we've run into a problem now.

105
00:07:13.690 --> 00:07:20.230
We're doing the same for the savings account class right here and the trust account class right here.

106
00:07:20.230 --> 00:07:24.460
So that's all we're doing is we're just creating these four classes overloading the insertion operator

107
00:07:24.460 --> 00:07:29.080
for each one of them and each one of them will display you know savings display trust display and so

108
00:07:29.080 --> 00:07:29.550
forth.

109
00:07:29.620 --> 00:07:33.840
So we can have a simple main and this is what main looks like right here.

110
00:07:34.210 --> 00:07:38.420
Give me an account a put it on the stream give me an account see.

111
00:07:38.560 --> 00:07:40.520
Same thing same thing you get the idea.

112
00:07:40.560 --> 00:07:46.160
A C S T we should see a display checking display Selby's display trust display.

113
00:07:46.360 --> 00:07:48.310
So let's run that and be sure this works.

114
00:07:48.730 --> 00:07:53.500
And that's what we get we've got our four objects the account the checking the savings the trusts everything

115
00:07:53.500 --> 00:07:54.970
works like it should.

116
00:07:55.330 --> 00:07:56.420
But it really doesn't.

117
00:07:56.530 --> 00:08:02.830
There's one problem here and that me copy some code that I've already written in here just to save a

118
00:08:02.830 --> 00:08:03.630
little time.

119
00:08:03.670 --> 00:08:08.680
So here's the code we've got now we've got P1 is a pointer to an account right.

120
00:08:08.680 --> 00:08:14.680
That's a base class pointer and I'm creating an account and pointing to it from P1 and then I'm going

121
00:08:14.680 --> 00:08:19.200
to put the object 20 to dereference P. one because one is a pointer.

122
00:08:19.210 --> 00:08:22.870
I want the object Despoina to and I want to put that on the stream.

123
00:08:22.870 --> 00:08:26.590
This will call the overloaded operator for the account.

124
00:08:26.590 --> 00:08:32.400
Now I want to do the same thing with P2 except P2 this time he's actually pointing to a checking account

125
00:08:33.010 --> 00:08:38.080
although again we're coming at it through a base class pointer and I want to dereference P2 and put

126
00:08:38.080 --> 00:08:38.620
it on the stream.

127
00:08:38.620 --> 00:08:43.780
So what we expect is to say a count display checking display but that's not what happens.

128
00:08:43.780 --> 00:08:46.290
And let's see what happens.

129
00:08:46.480 --> 00:08:49.540
You see what happens is a count display account display.

130
00:08:49.540 --> 00:08:50.610
Why does this happen.

131
00:08:50.650 --> 00:08:54.730
Well it happens because we've got no virtual functions going on right.

132
00:08:54.730 --> 00:08:59.770
The only virtual functions we've got are close this down so you can see it exactly.

133
00:08:59.770 --> 00:09:06.440
Let's go up to my account class and the only virtual functions we've got are withdraw.

134
00:09:06.460 --> 00:09:06.730
Right.

135
00:09:06.730 --> 00:09:07.170
That's it.

136
00:09:07.180 --> 00:09:08.820
That's the only virtual function we have.

137
00:09:08.830 --> 00:09:15.880
We have no virtual function that's going to allow us to work with any kind of account object in the

138
00:09:15.880 --> 00:09:22.210
context of this operator here and it's really clunky to do so because of the syntax so what we could

139
00:09:22.210 --> 00:09:27.070
do is we could certainly add some kind of print function to this account class and it's inherited all

140
00:09:27.070 --> 00:09:28.580
the way down and make it virtual.

141
00:09:28.690 --> 00:09:30.050
And that's kind of what we'll do.

142
00:09:30.250 --> 00:09:35.590
But what we'll do is we'll create a separate interface class rather than put all the stuff in account.

143
00:09:35.710 --> 00:09:40.240
And what that buys us is that not only am I able to use that principal interface class that we want

144
00:09:40.240 --> 00:09:42.760
to create with this account hierarchy.

145
00:09:42.760 --> 00:09:46.970
I can use it with any kind of class not just these account classes.

146
00:09:47.020 --> 00:09:48.240
So let's do that.

147
00:09:48.340 --> 00:09:53.590
What I'm going to do is I'm going to switch over to the interfaces dash complete project.

148
00:09:53.590 --> 00:09:57.580
Right now it looks just like this one but what we'll do is we'll modify and get this working with the

149
00:09:57.580 --> 00:09:58.850
printable interface.

150
00:09:59.080 --> 00:10:05.450
Ok so I'm back in the interface's dash complete project and you can see that right now that's exactly

151
00:10:05.450 --> 00:10:06.600
what we did earlier.

152
00:10:06.620 --> 00:10:08.170
I haven't changed this code at all.

153
00:10:08.240 --> 00:10:11.390
So this is exactly what was in interface's dash start.

154
00:10:11.570 --> 00:10:16.850
So we want to do is we want to create an interface class called printable or I printable.

155
00:10:16.850 --> 00:10:21.950
We want to define a virtual function in there and then we want to extend it so it makes more sense and

156
00:10:21.950 --> 00:10:23.390
it works better.

157
00:10:23.390 --> 00:10:27.310
So first thing we're going to do is we're going to clean up this mess that we've got going on here.

158
00:10:27.350 --> 00:10:33.320
So I'm going to delete all these friend functions right here and I'm going to lead their implementations

159
00:10:33.320 --> 00:10:35.360
as well so I'm going to get rid of the account one.

160
00:10:35.570 --> 00:10:38.090
And this will definitely clean up our code a lot.

161
00:10:38.090 --> 00:10:39.990
I'll get rid of this guy right here.

162
00:10:40.400 --> 00:10:44.010
I'll get rid of that implementation for the checking account.

163
00:10:44.330 --> 00:10:52.140
I'll get the one in savings and I'll delete the implementation for the savings.

164
00:10:52.820 --> 00:10:59.120
And then finally we'll do the same for trust so I'll get rid of that and I'll get rid of this as well.

165
00:10:59.240 --> 00:11:01.630
OK so now we've got a much cleaner look.

166
00:11:01.640 --> 00:11:03.010
Let me scroll way up here.

167
00:11:03.080 --> 00:11:08.240
So what we have now is the account class with its virtual void withdraw virtual destructor checking

168
00:11:08.240 --> 00:11:11.630
with its virtual void withdraw virtual destructor and so forth.

169
00:11:11.630 --> 00:11:14.030
So it would a really clean place to start.

170
00:11:14.030 --> 00:11:15.060
So what do we do.

171
00:11:15.200 --> 00:11:20.720
Well the first thing we want to do is we want to create that printable class interface so let's do that.

172
00:11:20.720 --> 00:11:25.120
And of course you would normally do this in header files and not CPV files.

173
00:11:25.310 --> 00:11:29.870
But I'm going to do it all in one just so it's easier and I don't have to switch between files to be

174
00:11:29.870 --> 00:11:31.070
able to explain this.

175
00:11:31.310 --> 00:11:36.350
So this do that so we'll create a class called this just call it principle you can call it with or without

176
00:11:36.350 --> 00:11:37.810
that it's really up to you.

177
00:11:38.120 --> 00:11:41.450
So that's my class and I'll close it off down here.

178
00:11:41.480 --> 00:11:42.800
And what do I want in this class.

179
00:11:42.800 --> 00:11:47.810
Well I need a friend rent a have to have a friend because of the way that insertion operator works where

180
00:11:47.810 --> 00:11:50.980
the left side is the stream and the right side is the object.

181
00:11:50.990 --> 00:11:54.010
I really can't have member functions that do that kind of thing.

182
00:11:54.020 --> 00:11:58.180
So what I want to do is I want to have a friend function that's very similar to the ones we had before.

183
00:11:58.220 --> 00:12:06.200
So let's say friend and it's going to return a pseudo stream by reference we're going to overload the

184
00:12:06.200 --> 00:12:12.710
insertion operator and the two parameters are the pseudo stream and the printable object.

185
00:12:12.710 --> 00:12:14.060
That's where things really change.

186
00:12:14.060 --> 00:12:24.260
So that's create the studio stream by reference and Konst I printable object by reference

187
00:12:27.740 --> 00:12:33.770
we just call that LBJ or our right hand side would be like.

188
00:12:33.770 --> 00:12:35.940
So that's my function prototype.

189
00:12:36.410 --> 00:12:45.290
And now what we want is we want to have a public pure virtual function that all classes that conform

190
00:12:45.290 --> 00:12:47.690
to this interface must implement.

191
00:12:47.690 --> 00:12:52.250
That's the one that's going to allow them to put whatever they want on the stream however they want.

192
00:12:52.250 --> 00:12:57.980
So in this case it will be virtual in a safe way and will call it print we can call it anything we like

193
00:12:58.640 --> 00:13:03.920
and we're going to put stuff I don't know stream.

194
00:13:03.920 --> 00:13:08.120
This should be Konst since we really don't want to modifying any objects.

195
00:13:08.120 --> 00:13:09.450
And here's the important piece.

196
00:13:09.450 --> 00:13:12.560
That's a pure virtual function there.

197
00:13:12.620 --> 00:13:15.820
OK so now let's implement that front function.

198
00:13:15.830 --> 00:13:17.230
Copy this.

199
00:13:17.450 --> 00:13:20.180
So I don't have to type it all out again.

200
00:13:20.180 --> 00:13:24.840
And what we want this function to do is really pretty straightforward.

201
00:13:24.880 --> 00:13:28.400
Or we want this function to do is do that say Oh B.J..

202
00:13:28.460 --> 00:13:33.050
Right that's the object and we want to print onto that stream.

203
00:13:33.200 --> 00:13:37.840
That's the virtual function that all of my concrete classes must implement.

204
00:13:37.940 --> 00:13:40.830
And then I just simply return the stream.

205
00:13:40.850 --> 00:13:41.630
That's it.

206
00:13:41.630 --> 00:13:42.770
Now let us see what's happening here.

207
00:13:42.770 --> 00:13:46.040
This function gets called with a printable or an printable.

208
00:13:46.760 --> 00:13:48.620
And it's going to call print on that object.

209
00:13:48.620 --> 00:13:49.720
So this will go.

210
00:13:49.760 --> 00:13:53.820
We're coming at it with a baseline reference right if you will because they're all going to be printable

211
00:13:54.200 --> 00:13:57.700
and we're going to use dynamic polymorphism to match the appropriate one.

212
00:13:57.710 --> 00:13:59.240
So that's really all we need to do here.

213
00:13:59.240 --> 00:14:02.180
So that's a really really simple class interface.

214
00:14:02.270 --> 00:14:05.570
We only need to do this with the account class because we've got a hierarchy here.

215
00:14:05.620 --> 00:14:07.600
But another way to do it is well a second.

216
00:14:07.700 --> 00:14:11.790
So we could say public eye principle.

217
00:14:11.900 --> 00:14:17.180
So now we're saying that that account class conforms to this principle protocol which means that it

218
00:14:17.180 --> 00:14:20.190
must implement this guy right there that virtual void function.

219
00:14:20.390 --> 00:14:22.020
So we can do that right here.

220
00:14:22.070 --> 00:14:26.910
We could say virtual void print.

221
00:14:27.390 --> 00:14:27.900
Right.

222
00:14:27.920 --> 00:14:29.420
It expects a pseudo stream

223
00:14:32.610 --> 00:14:39.800
by reference we can call it OS and it is a Konst method.

224
00:14:39.800 --> 00:14:44.240
And I want to override it definitely put that in there sort of the compiler can help me in case I messed

225
00:14:44.240 --> 00:14:45.590
up.

226
00:14:45.800 --> 00:14:46.570
That's it.

227
00:14:46.670 --> 00:14:47.490
And what do we do here.

228
00:14:47.510 --> 00:14:55.900
We just simply say oh yes count this just say display.

229
00:14:56.450 --> 00:14:56.930
That's it.

230
00:14:56.930 --> 00:14:58.190
That's all we have to do.

231
00:14:58.340 --> 00:15:02.900
Now for all the other classes that are derived from this account class what we need to do is implement

232
00:15:02.930 --> 00:15:09.040
that virtual function in them in whatever way makes sense to display a checking account in this case

233
00:15:09.050 --> 00:15:11.510
I'll just say checking right.

234
00:15:11.510 --> 00:15:13.810
In this case I'll just say savings.

235
00:15:13.820 --> 00:15:18.870
But again whatever makes sense you want to display interest rates whatever whatever makes sense for

236
00:15:18.870 --> 00:15:24.340
a display of a savings account and here will do the same thing with it.

237
00:15:24.370 --> 00:15:25.610
With the trust account.

238
00:15:25.820 --> 00:15:29.090
Ok that should do us enough we build and run.

239
00:15:29.090 --> 00:15:31.380
You can see that we got what we wanted right.

240
00:15:31.380 --> 00:15:32.570
There's the two pointers.

241
00:15:32.570 --> 00:15:37.910
So the one that points to an accounting of displaying accounts display and P2 is pointings We're checking

242
00:15:37.910 --> 00:15:39.490
and I'm getting checking display.

243
00:15:39.500 --> 00:15:41.140
That's pretty cool.

244
00:15:41.240 --> 00:15:45.910
And obviously these guys will still work since they're doing static binding so that's easy.

245
00:15:46.310 --> 00:15:47.510
But here's the difference.

246
00:15:47.510 --> 00:15:50.340
Again you might still be wondering you know so far so what.

247
00:15:50.480 --> 00:15:58.250
Well the difference here is that suppose we want to create a class called Dog and that dog class wants

248
00:15:58.250 --> 00:15:59.710
to be printable.

249
00:16:00.100 --> 00:16:02.970
So would these derive from printable.

250
00:16:03.020 --> 00:16:07.170
So all these dog class has to do is implement that interface.

251
00:16:07.250 --> 00:16:08.280
So let's do that right here.

252
00:16:08.280 --> 00:16:14.300
I'll say public and the interface is right up here I'll just copy this guy to save myself a little time.

253
00:16:14.300 --> 00:16:17.170
That's the same function.

254
00:16:17.990 --> 00:16:21.840
And how does a dog display itself or maybe the dog says Wolf Wolf.

255
00:16:24.170 --> 00:16:25.210
Simple as that.

256
00:16:25.430 --> 00:16:28.370
So now what I can do here is I can create a dog object

257
00:16:31.360 --> 00:16:32.780
and I can do it dynamically.

258
00:16:32.880 --> 00:16:36.860
So I need to put a pointer in there that's it.

259
00:16:36.910 --> 00:16:41.960
Now I can simply put that dog object on the stream so I can cut and paste.

260
00:16:41.990 --> 00:16:44.010
I'll copy from here.

261
00:16:45.780 --> 00:16:48.510
And rather than the one this time it's dog.

262
00:16:48.750 --> 00:16:50.210
I'm dereferencing dog.

263
00:16:50.330 --> 00:16:55.690
And when I run now there you can see Wolf Wolf right there.

264
00:16:55.760 --> 00:16:57.740
So that's pretty powerful.

265
00:16:57.750 --> 00:17:03.020
The last thing is we can take it a step further and what we can do is we can actually write a function.

266
00:17:03.320 --> 00:17:06.520
And I'll just copy it here so you can see what it would look like right here.

267
00:17:06.520 --> 00:17:10.470
This is just a regular C++ function and it's called print.

268
00:17:10.570 --> 00:17:16.130
And what does it expect it expects an eye printable so it will take anything or take a dog object an

269
00:17:16.130 --> 00:17:20.390
account object a savings account object because they're all printable.

270
00:17:20.510 --> 00:17:25.030
So again we could pass all of those guys into there to say I'm right here my dog.

271
00:17:25.250 --> 00:17:32.900
I could say print and I can pass a dog into it and if I run that I should see Wolf Wolf twice.

272
00:17:32.900 --> 00:17:34.900
And there you can see it right up here.

273
00:17:35.060 --> 00:17:37.120
You could do the same thing with the objects.

274
00:17:37.130 --> 00:17:42.350
This is where this is different from just regular inheritance from a base class.

275
00:17:42.350 --> 00:17:47.120
In this case I can use this principle across hierarchy's across anything I want.

276
00:17:47.120 --> 00:17:52.490
I could just say that whatever I'm creating is principal overload that print pure virtual function and

277
00:17:52.490 --> 00:17:53.180
I'm good to go.

278
00:17:53.180 --> 00:17:57.710
I'm a printable So remember in this case dog is a printable.

279
00:17:57.740 --> 00:18:02.770
An account was a printable savings account was a principal a savings account was also an account.

280
00:18:02.840 --> 00:18:04.890
This is a really good use case for it.
