WEBVTT
1
00:00:05.130 --> 00:00:08.840
In this video we'll learn about friends of a class in C++.

2
00:00:09.910 --> 00:00:13.660
Friends have always been a controversial topic in C++.

3
00:00:13.750 --> 00:00:19.630
The controversy is about encapsulation and whether friends violating cancellation or enhance it.

4
00:00:19.690 --> 00:00:24.610
You can decide where you are on this issue but friends are indeed part of the C++ language and it's

5
00:00:24.610 --> 00:00:26.500
important to understand them.

6
00:00:26.530 --> 00:00:33.040
So what does a friend of a Class A friend of a class is a function or another class that has access

7
00:00:33.040 --> 00:00:39.180
to private class members and that other function or class is not a member of the class that it's accessing

8
00:00:40.410 --> 00:00:42.120
In the case of friend functions.

9
00:00:42.120 --> 00:00:47.370
These can be standalone functions or member methods of another class and in the case of another class

10
00:00:47.640 --> 00:00:52.670
the entire class will have access to the private information of the class granting friendship.

11
00:00:52.710 --> 00:00:58.220
So as you can see friends have unfettered access to both public and private data members of a class

12
00:00:58.440 --> 00:01:01.530
but they're not members of the class.

13
00:01:01.900 --> 00:01:06.230
It's important to understand how C++ treats friendship in the big picture.

14
00:01:06.310 --> 00:01:12.820
First friendship must be granted not taken a class must explicitly declare its friends in its class

15
00:01:12.820 --> 00:01:15.350
declaration using the friend keyword.

16
00:01:15.580 --> 00:01:21.030
Friendship is NOT symmetric so if a is a friend of B that doesn't mean that B is a friend Devey.

17
00:01:21.060 --> 00:01:23.620
This must be explicitly granted.

18
00:01:23.620 --> 00:01:25.450
Friendship is not transitive.

19
00:01:25.600 --> 00:01:32.020
If A is A friend of B and B is a friend of C then A is not a friend of C again unless specifically granted.

20
00:01:32.350 --> 00:01:39.300
And finally friendship is not inherited So what does declaring a friend look like in C++.

21
00:01:39.420 --> 00:01:45.590
Here you can see the case of declaring a standalone nonmember function as a friend of the player class.

22
00:01:45.600 --> 00:01:50.940
Notice that the player class grants the friendship by declaring the function prototype preceded by the

23
00:01:50.940 --> 00:01:52.190
friend keyword.

24
00:01:52.680 --> 00:01:53.550
That's it.

25
00:01:53.550 --> 00:01:58.760
Now the display player function has access to everything in the player class.

26
00:01:59.280 --> 00:02:03.900
So in the display player function we don't have to go through public getters or setters to display the

27
00:02:03.900 --> 00:02:09.690
player information or set player information we can directly access to a private class attribute.

28
00:02:09.690 --> 00:02:12.070
In fact we can change them as well if we wanted to.

29
00:02:12.150 --> 00:02:18.550
Since the object is passed by reference in this case non-contest Let's see how we would declare a method

30
00:02:18.550 --> 00:02:19.440
in another class.

31
00:02:19.460 --> 00:02:26.100
As a friend in this case we're declaring the display player method of the other class as a friend.

32
00:02:26.110 --> 00:02:32.080
That method will now have access to everything in the player class and that method might be implemented

33
00:02:32.080 --> 00:02:33.100
as follows.

34
00:02:33.100 --> 00:02:38.890
Notice that it is indeed a member of the other class but you can use the player class as private attributes

35
00:02:38.890 --> 00:02:40.120
directly within it.

36
00:02:41.250 --> 00:02:46.320
Finally we can declare an entire separate class as a friend in this case.

37
00:02:46.470 --> 00:02:49.940
We declared the class other class as a friend of player.

38
00:02:50.220 --> 00:02:55.050
So all the methods in the other class will have access to the player class as private attributes.

39
00:02:55.470 --> 00:02:56.160
As you can see.

40
00:02:56.160 --> 00:02:58.210
Friendship is very powerful.

41
00:02:58.230 --> 00:03:03.330
It can bypass function call overhead associated with getters and setters and other class methods and

42
00:03:03.330 --> 00:03:06.170
allow direct access to private attributes.

43
00:03:06.180 --> 00:03:10.850
Sometimes we have classes that use other classes and writing code using getters and setters becomes

44
00:03:10.860 --> 00:03:14.250
long tedious and sometimes gives you overhead.

45
00:03:14.280 --> 00:03:19.290
However that shouldn't be the only reason for granting friendship friendship should be granted only

46
00:03:19.290 --> 00:03:24.330
when it makes sense in the design of your system and then only the minimal necessary friendship should

47
00:03:24.330 --> 00:03:25.250
be granted.

48
00:03:25.560 --> 00:03:30.070
We'll see friend functions again when we use operator overloading in the next section.
