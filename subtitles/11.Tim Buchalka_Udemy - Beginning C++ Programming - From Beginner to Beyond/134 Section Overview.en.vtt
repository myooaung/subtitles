WEBVTT
1
00:00:06.160 --> 00:00:11.370
In this section will get a first look at object oriented or o programming.

2
00:00:11.700 --> 00:00:16.440
We've already done a bit of a slow programming when we use the standard string and vector classes but

3
00:00:16.440 --> 00:00:21.600
now we'll learn much more about our programming and especially how to create our own classes and objects.

4
00:00:22.420 --> 00:00:28.540
Before learning about C++ is object oriented features we learn what our programming is and why it's

5
00:00:28.540 --> 00:00:30.460
so popular and useful.

6
00:00:30.730 --> 00:00:35.790
We'll learn exactly what classes in objects are and how they work in the world of o.o.

7
00:00:35.830 --> 00:00:40.060
We'll see how to declare some simple classes and create objects from those classes.

8
00:00:40.060 --> 00:00:44.980
Well then see how we can use the dot operator and the pointer operators so that we can get to the parts

9
00:00:44.980 --> 00:00:47.790
of an object that we want to access.

10
00:00:47.980 --> 00:00:52.900
Two of the main strengths of object orientation are encapsulation and information hiding.

11
00:00:53.110 --> 00:00:59.740
We'll define these concepts in this section and see how C++ is public and private access modifiers allow

12
00:00:59.740 --> 00:01:04.990
us to prevent access to parts of our code while still allowing access to the interface that will be

13
00:01:04.990 --> 00:01:06.990
used by other programmers.

14
00:01:07.210 --> 00:01:12.390
Then we'll turn our attention to the many ways that we can construct or initialize or objects.

15
00:01:12.400 --> 00:01:14.420
This is all done with constructors.

16
00:01:14.440 --> 00:01:19.870
These are methods that we write that give us control over exactly how our objects are created.

17
00:01:19.870 --> 00:01:24.010
There are lots of variations of constructors and we'll look at the most common and understand their

18
00:01:24.010 --> 00:01:25.660
primary purpose.

19
00:01:25.810 --> 00:01:31.300
We'll learn about initialiser list default overloaded copy and move constructors and we'll see when

20
00:01:31.360 --> 00:01:33.760
and how to implement them.

21
00:01:33.810 --> 00:01:39.330
Sometimes when we work with pointers inside classes we have to be aware of whether the pointer or what

22
00:01:39.330 --> 00:01:42.270
the pointer is pointing to is being copied.

23
00:01:42.270 --> 00:01:46.320
This concept is called shallow versus deep copying by default.

24
00:01:46.320 --> 00:01:52.020
C++ provides shallow copying but sometimes we need to do more than that and we'll learn how and why.

25
00:01:52.470 --> 00:01:54.360
We'll also discuss destructors.

26
00:01:54.360 --> 00:01:59.400
Sometimes when an object is destroyed there can be things that we have to do to tidy up after them.

27
00:01:59.400 --> 00:02:05.310
This might include closing files freeing allocated memory writing log messages to files and so forth

28
00:02:06.150 --> 00:02:12.310
C++ provides destructors that are called automatically when objects are going to be destroyed.

29
00:02:12.400 --> 00:02:17.600
Then we'll learn about the this pointer which many times confuses beginning C++ programmers.

30
00:02:17.650 --> 00:02:24.310
But don't worry it's pretty simple once explained sometimes when we write programs we want certain attributes

31
00:02:24.310 --> 00:02:28.320
to belong to the entire class and not to the objects themselves.

32
00:02:28.330 --> 00:02:32.200
That's exactly what the static class members allow you to do.

33
00:02:32.200 --> 00:02:37.390
Finally will wrap up this section by understanding the difference between structures and classes and

34
00:02:37.390 --> 00:02:43.540
see how C++ classes can grant friendship privileges to other parts of the program so they can access

35
00:02:43.780 --> 00:02:48.040
private information in an easy but controlled manner.

36
00:02:48.040 --> 00:02:54.040
Once you complete this section you'll have the basic fundamentals necessary to model your programs using

37
00:02:54.040 --> 00:02:55.950
real world objects.

38
00:02:55.960 --> 00:03:01.170
This will not only help you think more abstractly it will also make your code more robust easier to

39
00:03:01.170 --> 00:03:04.570
debug and easier for others to modify.

40
00:03:04.570 --> 00:03:09.580
This sounds like a lot to learn but will take it in small steps and build up our classes as we go.

41
00:03:09.760 --> 00:03:12.670
Let's get started with old programming and C++.
