1
00:00:05,730 --> 00:00:09,710
It this video will learn how to declare and initialize variables.

2
00:00:09,860 --> 00:00:13,690
Then we'll head over to code like and declare and initialize some variables in life code.

3
00:00:14,760 --> 00:00:19,200
The syntax for a variable declaration in C++ is very simple.

4
00:00:19,200 --> 00:00:22,510
First you tell the compiler what the type of the variable is.

5
00:00:22,620 --> 00:00:25,150
Then you tell the compiler what the name of the variable is.

6
00:00:25,170 --> 00:00:30,240
And finally you terminate the Declaration with a semi-colon later in this section.

7
00:00:30,240 --> 00:00:34,820
I'll go over some of the basic C++ types but here are a few is a preview.

8
00:00:34,870 --> 00:00:37,070
Intice an integer or a whole number.

9
00:00:37,110 --> 00:00:42,390
A double is a floating point number and a string is a sequence of characters that you would see in my

10
00:00:42,390 --> 00:00:42,670
name.

11
00:00:42,670 --> 00:00:49,090
Frank also noticed that we can declare variables of non-C plus plus built in types.

12
00:00:49,230 --> 00:00:55,110
One of the very powerful features of C++ is object oriented programming which allows us to create our

13
00:00:55,170 --> 00:01:01,560
own types so we can create variables that represent an account or a person using the same syntax as

14
00:01:01,560 --> 00:01:03,990
we used for integers and doubles.

15
00:01:03,990 --> 00:01:08,100
This is great since it makes our program so much more readable in the next slide.

16
00:01:08,100 --> 00:01:12,090
We'll talk about some of the rules that you must follow when you named variables.

17
00:01:12,090 --> 00:01:16,580
Remember in C++ we must declare our variables before we use them.

18
00:01:16,590 --> 00:01:22,530
So let's take a look at some of the variable naming rules the rules for naming C++ variables are very

19
00:01:22,530 --> 00:01:24,450
very simple C++.

20
00:01:24,560 --> 00:01:28,540
Variable names can contain letters numbers and underscores.

21
00:01:28,560 --> 00:01:31,770
However the first letter of the name cannot be a number.

22
00:01:31,830 --> 00:01:36,610
It can be an underscore or letter as discussed previously C++.

23
00:01:36,610 --> 00:01:40,900
Keywords are also reserve words so you can't use those names.

24
00:01:40,990 --> 00:01:45,190
You can't use it you can't use double as your own names.

25
00:01:45,190 --> 00:01:49,630
Also you cannot declare a variable name that's already been declared in the same scope.

26
00:01:49,630 --> 00:01:53,380
So if you declared x to be an integer you can't do that again.

27
00:01:53,950 --> 00:02:00,730
Remember C++ is case sensitive so the name age in uppercase is considered different from the name age

28
00:02:00,760 --> 00:02:01,870
in lowercase.

29
00:02:01,870 --> 00:02:03,640
Let's take a look at a few examples.

30
00:02:04,820 --> 00:02:09,200
In the left column of the table you can see some legal C plus plus variable names.

31
00:02:10,260 --> 00:02:17,020
Since C++ is case sensitive age beginning with an uppercase A is considered a different name from age

32
00:02:17,050 --> 00:02:18,960
beginning with a lower case.

33
00:02:19,510 --> 00:02:25,240
We can begin our variable names with underscores or letters and we can also have underscores and numbers

34
00:02:25,240 --> 00:02:27,460
within the variable name.

35
00:02:27,460 --> 00:02:30,950
The right column has some examples of a legal variable names.

36
00:02:30,970 --> 00:02:35,210
The first example is lowercase and this is not allowed since lowercase.

37
00:02:35,230 --> 00:02:38,190
It is a reserve word in C++.

38
00:02:38,580 --> 00:02:43,980
We cannot have special characters like the dollar sign or mathematical characters but the plus sign.

39
00:02:44,050 --> 00:02:48,250
Also notice that variable names cannot have spaces in them.

40
00:02:48,250 --> 00:02:51,130
Now let's talk about C out see out is a little different.

41
00:02:51,220 --> 00:02:55,750
C out is a legal name because it conforms to the variable naming rules.

42
00:02:55,750 --> 00:03:01,420
However if you include IO stream in your program then C out it's already defined somewhere else it's

43
00:03:01,420 --> 00:03:07,800
defined by the standard library so it no longer becomes a valid name since it's been defined somewhere

44
00:03:07,810 --> 00:03:10,140
you cannot redeclare it yourself.

45
00:03:10,330 --> 00:03:16,160
So the rules that the C++ compiler enforces for variable names are pretty simple as you can see.

46
00:03:16,180 --> 00:03:20,090
Now let's take a look at variable naming style and best practices.

47
00:03:20,680 --> 00:03:25,510
The most important thing you can do is to be consistent with whatever naming convention you choose to

48
00:03:25,510 --> 00:03:26,560
use.

49
00:03:26,560 --> 00:03:29,410
There are many style guides and naming conventions out there.

50
00:03:29,410 --> 00:03:34,120
In many cases you'll be working for a company and they have a specific style of naming convention that

51
00:03:34,120 --> 00:03:35,800
you have to use.

52
00:03:35,800 --> 00:03:40,540
This has nothing to do with the C++ compiler but it's still very important.

53
00:03:40,540 --> 00:03:47,290
For example Google has a published C++ style guide as do many other companies one of the first decisions

54
00:03:47,290 --> 00:03:53,230
you make with regard to variable naming is whether you want to use camel case or underscores two separate

55
00:03:53,230 --> 00:03:54,520
words.

56
00:03:54,520 --> 00:03:59,560
Both styles make the text more readable by avoiding long streams of lower case letters which are harder

57
00:03:59,560 --> 00:04:01,600
to read camel case.

58
00:04:01,600 --> 00:04:08,260
Capitalize the first letter of every word in your name and does it use underscores the other style is

59
00:04:08,260 --> 00:04:11,740
to use underscores to separate words either style is fine.

60
00:04:11,740 --> 00:04:14,620
The important thing is to be consistent in this course.

61
00:04:14,620 --> 00:04:21,610
I'll use the underscore style please use meaningful names don't use obscure abbreviations for example

62
00:04:22,030 --> 00:04:23,880
instead of using the variable name.

63
00:04:23,890 --> 00:04:26,460
M o e to represent the mass of the earth.

64
00:04:26,560 --> 00:04:31,360
Just use the real name mass of earth with underscores or camel case.

65
00:04:31,360 --> 00:04:32,200
Either way.

66
00:04:32,440 --> 00:04:38,640
Sure it's a little bit more typing but your program becomes so much more readable and maintainable.

67
00:04:38,770 --> 00:04:44,860
Never use variable names before initializing them uninitialized variables can cause all kinds of unexpected

68
00:04:44,860 --> 00:04:46,780
results in C++.

69
00:04:46,780 --> 00:04:50,030
I'll show you an example of this when we head over to the ID.

70
00:04:50,380 --> 00:04:55,410
Finally it's best practice to declare your variables as close to when you need them as possible.

71
00:04:55,420 --> 00:05:00,250
In other words if your program uses 10 variables don't declare all 10 of them at the top of the file

72
00:05:00,250 --> 00:05:01,410
and then use them later.

73
00:05:01,510 --> 00:05:04,300
Instead declare them right before you use them.

74
00:05:04,300 --> 00:05:09,090
There are many many more programming best practices and we'll discuss them throughout the course.

75
00:05:09,970 --> 00:05:12,670
So let's talk about initializing variables.

76
00:05:12,670 --> 00:05:14,990
Notice the first line of code in this example.

77
00:05:15,000 --> 00:05:19,040
It age this is a variable declaration that's uninitialized.

78
00:05:19,090 --> 00:05:21,890
You have no idea what the value of h is.

79
00:05:22,150 --> 00:05:23,200
And that's the problem.

80
00:05:23,200 --> 00:05:28,780
If you try to display age or perhaps use in some calculation you'll run into problems because it was

81
00:05:28,780 --> 00:05:34,990
never initialized so its value could be anything uninitialized variables or a very common source of

82
00:05:34,990 --> 00:05:36,770
programming errors.

83
00:05:36,790 --> 00:05:40,020
C++ provides three ways to initialize variables.

84
00:05:40,030 --> 00:05:45,330
All three are equivalent and they're related to the way that C++ has evolved over the years.

85
00:05:45,340 --> 00:05:47,480
The first is to use an assignment operator.

86
00:05:47,500 --> 00:05:49,300
That's the equal sign.

87
00:05:49,300 --> 00:05:55,170
This will assign 21 to age right when it's created so it will be immediately initialized.

88
00:05:55,180 --> 00:05:59,540
The second uses parentheses around the value in this case 21.

89
00:05:59,560 --> 00:06:02,120
This is a constructor style initialization.

90
00:06:02,140 --> 00:06:06,230
We'll talk about constructors when we talk about object oriented programming.

91
00:06:06,280 --> 00:06:12,110
The final initialization statement is the C++ 11 initialization syntax.

92
00:06:12,120 --> 00:06:17,410
This style of initialization is consistent across different types in C++ and has some benefits that

93
00:06:17,410 --> 00:06:19,210
we'll discuss later in this course.

94
00:06:19,210 --> 00:06:22,390
I encourage you to use this style of initialization.

95
00:06:22,390 --> 00:06:27,690
Now let's head over to code and see some of these examples in life code.

96
00:06:27,740 --> 00:06:33,560
Ok so now I'm in code light and let's write a real simple program that calculates the area of a room

97
00:06:33,560 --> 00:06:34,650
and square feet.

98
00:06:34,670 --> 00:06:39,830
So the idea is to use or for the length of the room and the width of the room and then we'll multiply

99
00:06:39,830 --> 00:06:43,810
those two together to calculate the square footage of the room the area of the room.

100
00:06:43,820 --> 00:06:45,020
OK.

101
00:06:45,020 --> 00:06:50,090
Now obviously we need to Varians But before we do that let me show you one of the issues with uninitialized

102
00:06:50,090 --> 00:06:52,540
variables as we talked about in the previous slides.

103
00:06:52,700 --> 00:06:59,240
Let's create a real simple variable here called age just like we did before and I'm not going to initialize

104
00:06:59,240 --> 00:07:00,500
it on purpose.

105
00:07:00,500 --> 00:07:06,760
And what I want to do is just output that value to see out.

106
00:07:07,280 --> 00:07:11,940
Let's build this and I'll execute it.

107
00:07:11,960 --> 00:07:17,870
And you can see the printing out here you can see there is h I'm outputting age and that's the value

108
00:07:17,870 --> 00:07:23,120
that's in H right now not what we expected for sure.

109
00:07:23,120 --> 00:07:29,090
The problem is that we never initialize the variable age so the value that's in that variable could

110
00:07:29,090 --> 00:07:31,800
be anything and in this case it is anything.

111
00:07:32,090 --> 00:07:35,320
OK so let me show you how that works.

112
00:07:35,360 --> 00:07:37,300
So let's go back to our conceptual model.

113
00:07:37,430 --> 00:07:39,500
Here's our memory.

114
00:07:39,660 --> 00:07:44,550
I've got a memory location let's say that that's maybe location 2000 that could be anything.

115
00:07:44,730 --> 00:07:52,650
And age is associated with that location now in there there are a series of zeros and ones that's how

116
00:07:52,650 --> 00:07:59,370
we store values in computers whatever value happens to be in there is the value that will be displayed

117
00:07:59,460 --> 00:08:00,770
on the console.

118
00:08:00,780 --> 00:08:08,580
Remember when I output age the compiler is going to grab whatever this value is in here and replace

119
00:08:08,580 --> 00:08:09,600
it right in there.

120
00:08:09,600 --> 00:08:13,510
In this case we've got that we've got that really strange very large number.

121
00:08:13,530 --> 00:08:23,560
The idea is we really want to initialize this guy to something even zero before we use it.

122
00:08:23,570 --> 00:08:26,720
So you can see here I'm using it before I initialize it.

123
00:08:26,720 --> 00:08:28,120
That's not a good idea.

124
00:08:28,430 --> 00:08:30,310
OK so let me clear this.

125
00:08:30,470 --> 00:08:41,730
And if we now initialize this to let's say 0 or 21 or whatever we like I use 21 here now a build and

126
00:08:41,730 --> 00:08:42,090
run

127
00:08:45,620 --> 00:08:48,740
you can see now it's printing out 21.

128
00:08:48,940 --> 00:08:55,020
OK so that gives you an idea and also when we did not initialize it the compiler did give us a warning

129
00:08:55,110 --> 00:09:00,150
just right click here and compile notice the warning that the compiler is giving be done here it's saying

130
00:09:00,150 --> 00:09:00,600
warning.

131
00:09:00,630 --> 00:09:03,550
Age is used uninitialized in this function.

132
00:09:03,900 --> 00:09:05,790
That's occlude don't ignore those warnings.

133
00:09:05,790 --> 00:09:10,190
The computer is telling you be careful you're using something that you never initialized.

134
00:09:10,520 --> 00:09:11,050
OK.

135
00:09:11,250 --> 00:09:15,120
So that gives you an idea of what's going on with uninitialized variables.

136
00:09:15,120 --> 00:09:19,650
All right so let me race this and let's write our program.

137
00:09:19,860 --> 00:09:26,510
So what we need here is we need to ask the user for the length of the room and the width of the room.

138
00:09:26,670 --> 00:09:32,370
We'll grab those two values from C in them or multiply them together and we'll display the square footage

139
00:09:32,370 --> 00:09:32,920
of the room.

140
00:09:33,000 --> 00:09:35,810
Really really simple program but let's get started.

141
00:09:36,000 --> 00:09:41,370
So what we'll do is we'll say see out and remember I don't have to use standard scope resolution operator

142
00:09:41,370 --> 00:09:43,700
here because I'm using namespace.

143
00:09:43,910 --> 00:09:51,900
So I say enter the width of the room and assume this is in feet.

144
00:09:52,210 --> 00:09:56,070
Or put a semi-colon at the end of that line to terminate it.

145
00:09:56,070 --> 00:09:59,160
Now we need to read something into a variable right.

146
00:09:59,160 --> 00:10:02,590
So we need to do in into something.

147
00:10:02,610 --> 00:10:05,670
What we need to declare that variable Let's declare it right appear.

148
00:10:05,670 --> 00:10:11,550
We could call it with and it's going to be in integers that say Remember we've got to say the type followed

149
00:10:11,550 --> 00:10:14,910
by the name of the variable followed by a semi-colon.

150
00:10:14,910 --> 00:10:21,690
This is perfectly fine with is probably not a great name something like room with is better provides

151
00:10:21,690 --> 00:10:25,740
much more information to whoever's going to come later and modify this code.

152
00:10:25,890 --> 00:10:32,160
So now we've got the room with and I'm going to enter the room with and I'm going to read it into room

153
00:10:32,160 --> 00:10:33,750
with.

154
00:10:33,940 --> 00:10:35,060
Right now we've got our variable.

155
00:10:35,070 --> 00:10:36,720
Now notice a couple of things.

156
00:10:36,750 --> 00:10:42,480
One is we never initialized room with in this case it's probably OK because I'm going to read something

157
00:10:42,510 --> 00:10:43,890
into it before I use it.

158
00:10:43,890 --> 00:10:47,790
But best practice is let's initialize that.

159
00:10:47,850 --> 00:10:50,430
We'll set it to zero.

160
00:10:50,460 --> 00:10:51,810
Now we need another variable right.

161
00:10:51,810 --> 00:10:59,820
We need the length of the room so I'll just cut and paste this to save a little time here and I'm going

162
00:10:59,820 --> 00:11:06,790
to say and the length of the room and we're going to read that into another variable called Room length

163
00:11:11,270 --> 00:11:13,810
and we will initialize that to zero.

164
00:11:14,060 --> 00:11:19,570
In this case 0 is fine you could initialize it to anything that makes sense in your application.

165
00:11:19,610 --> 00:11:23,330
All right so now I will read that went into room length so I'll just change this variable name right

166
00:11:23,330 --> 00:11:24,120
here.

167
00:11:24,680 --> 00:11:26,090
So look at what's going on here.

168
00:11:26,090 --> 00:11:28,070
We've initialized two variables.

169
00:11:28,100 --> 00:11:29,560
Room with en route length.

170
00:11:29,570 --> 00:11:31,130
They're both integers.

171
00:11:31,130 --> 00:11:35,950
Again notice the syntax the type name as integer followed by the name of the variable.

172
00:11:36,020 --> 00:11:37,790
And in this case where initializing it.

173
00:11:38,160 --> 00:11:42,350
I'm prompting the use of trencher the width of the room and I'm reading that integer into room with

174
00:11:42,910 --> 00:11:47,770
then I'm prompting the user to enter the length of the room and I'm reading that integer into room length.

175
00:11:47,810 --> 00:11:56,170
All I have left to do now is just say see out and I'll say the area of the room is.

176
00:11:56,960 --> 00:11:59,030
And we'll do the calculation here right in line.

177
00:11:59,030 --> 00:12:04,770
It's going to be room with times room length.

178
00:12:06,170 --> 00:12:08,550
And we may as well say square feet.

179
00:12:11,590 --> 00:12:12,250
That's it.

180
00:12:12,270 --> 00:12:14,040
We'll complete this with an end line

181
00:12:16,990 --> 00:12:20,940
and clean a little bit of space up just to make it a little bit more readable.

182
00:12:20,940 --> 00:12:23,330
That's it for returns zero at the end.

183
00:12:23,340 --> 00:12:27,860
Now let's build and run this.

184
00:12:27,970 --> 00:12:33,400
We get a clean compile and it says enter the width of the room that said the with is 10 feet and for

185
00:12:33,420 --> 00:12:35,340
the length of the room let's say it's five feet.

186
00:12:35,350 --> 00:12:37,630
Always remember we know what to expect.

187
00:12:37,640 --> 00:12:40,110
Expect a 50 percenter.

188
00:12:40,120 --> 00:12:42,520
It says the area of the room is 50 square feet.

189
00:12:42,520 --> 00:12:44,050
So we get back what we expected.

190
00:12:44,050 --> 00:12:49,830
Always think about what you're going to get back before you do this otherwise you may have errors that

191
00:12:49,840 --> 00:12:52,420
you didn't think about or press any key to continue.

192
00:12:52,420 --> 00:12:52,840
That's it.

193
00:12:52,870 --> 00:12:55,120
That's a pretty straightforward solution.

194
00:12:55,120 --> 00:12:59,170
You can see how we use variables how we can initialize variables how you can read into variables.

195
00:12:59,170 --> 00:13:03,610
Now a best practice would be rather than declare these two variables.

196
00:13:03,650 --> 00:13:08,050
Up here what we could do is we could declare them closer to where we're using them.

197
00:13:08,230 --> 00:13:11,680
So in this case this is the first use of room with.

198
00:13:11,890 --> 00:13:17,620
So I could modify this by taking this line here and I'll just cut it and I'll paste it right in here

199
00:13:20,140 --> 00:13:21,800
and I'll do the same with room length.

200
00:13:21,800 --> 00:13:27,350
I'll cut it from here and I'll paste it right in here.

201
00:13:27,630 --> 00:13:32,520
And I just cleaned up the code a little bit get rid of some of this extra white space.

202
00:13:32,680 --> 00:13:34,100
Now now you can see what's happening.

203
00:13:34,120 --> 00:13:40,240
I'm prompting the user declaring that variable I'm reading into it prompting the user for the length

204
00:13:40,330 --> 00:13:42,870
I'm declaring the variable I'm reading into.

205
00:13:42,880 --> 00:13:45,970
So this is basically what we talked about in the previous slides.

206
00:13:45,970 --> 00:13:48,330
You could see this is a really simple example.

207
00:13:48,370 --> 00:13:49,060
Try it out.

208
00:13:49,060 --> 00:13:50,120
Play around with it.

209
00:13:50,170 --> 00:13:54,430
There'll be a challenge exercise at the end of this section that's going to extend this a little bit.

210
00:13:54,430 --> 00:13:56,280
So that's the end of this video.

211
00:13:56,290 --> 00:14:00,850
This shows you how to initialize variables use the variables in the next video.

212
00:14:00,850 --> 00:14:03,780
We'll talk a little bit about scope and global variables.
