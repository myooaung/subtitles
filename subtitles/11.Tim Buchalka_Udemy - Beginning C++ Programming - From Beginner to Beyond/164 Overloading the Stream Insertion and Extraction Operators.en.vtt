WEBVTT
1
00:00:05.490 --> 00:00:12.340
The last operators will overload in this section or the stream insertion and extraction operators This

2
00:00:12.340 --> 00:00:17.590
will allow us to insert and extract our midstream objects to and from streams exactly as we've been

3
00:00:17.590 --> 00:00:20.290
doing with all of the other builtin types.

4
00:00:20.380 --> 00:00:25.060
You can see in this slide what the code would look like if we could simply insert our own user defined

5
00:00:25.060 --> 00:00:27.610
objects into an output stream.

6
00:00:27.610 --> 00:00:35.160
This makes our classes feel and behave more like a built in C++ Type Of course we could also overload

7
00:00:35.160 --> 00:00:40.550
the stream extraction operator so that we can read data from a stream and assign them to our own objects.

8
00:00:40.560 --> 00:00:46.220
Here you could see that we're reading data into Larry and hero in this example and the one of the previous

9
00:00:46.220 --> 00:00:52.120
slide we're using see out and see in what we can use other streams as well as well as redirect CNN's

10
00:00:52.300 --> 00:00:54.000
out to files and so forth.

11
00:00:56.030 --> 00:01:00.650
Before we start let's see why it really doesn't make sense to implement the insertion and extraction

12
00:01:00.650 --> 00:01:02.920
operators as member methods.

13
00:01:03.230 --> 00:01:08.690
Remember when we overload an operator as a member method the left hand side object must be an object

14
00:01:08.690 --> 00:01:10.620
of the class we're overloading.

15
00:01:10.640 --> 00:01:14.890
This means that we would have to write Larry on the left hand side of the output statement.

16
00:01:15.870 --> 00:01:20.910
While this will work it will be very strange for C++ programmers to use in this manner since it's not

17
00:01:20.910 --> 00:01:24.160
the way we use these operators with other values.

18
00:01:24.180 --> 00:01:26.970
The same is true for the extraction operator.

19
00:01:26.970 --> 00:01:30.700
So we're going to overload these operators as nonmember functions.

20
00:01:32.360 --> 00:01:35.350
Let's overload the stream insertion operator first.

21
00:01:35.630 --> 00:01:42.380
You can see that this is a nonmember function named operator insertion operator that has two arguments.

22
00:01:42.380 --> 00:01:46.160
The first argument is an output stream object by reference.

23
00:01:46.190 --> 00:01:48.480
This is type stood O stream.

24
00:01:48.590 --> 00:01:53.420
The second parameter is a reference to the my string object whose data we want to insert in the output

25
00:01:53.420 --> 00:01:54.260
stream.

26
00:01:54.260 --> 00:01:56.960
Notice that the reference is constant.

27
00:01:56.960 --> 00:02:00.910
Also notice that the function returns an output stream reference.

28
00:02:00.920 --> 00:02:04.610
This is important because we want to be able to change insertions as we normally do.

29
00:02:04.760 --> 00:02:09.950
It's important that we use stream references and we don't copy the stream.

30
00:02:09.950 --> 00:02:11.250
Then comes the easy part.

31
00:02:11.300 --> 00:02:16.880
But whatever data you like in whatever form it you like on the output stream as usual if this function

32
00:02:16.910 --> 00:02:21.530
has been declared as a friend function of the mystery class then you have access to all the private

33
00:02:21.530 --> 00:02:22.570
data members.

34
00:02:22.850 --> 00:02:26.500
Otherwise you have to use the public getters to get the information you need.

35
00:02:26.990 --> 00:02:30.590
And finally the last step is to return the output stream reference.

36
00:02:30.590 --> 00:02:31.340
That's it.

37
00:02:31.400 --> 00:02:34.650
As you can see it's very simple and very useful too.

38
00:02:34.670 --> 00:02:38.900
Now let's see how we can overload the stream extraction operator.

39
00:02:39.060 --> 00:02:45.070
Let's start by looking at the function signature the name of the function is operator extraction operator.

40
00:02:45.330 --> 00:02:47.540
The function has two parameters.

41
00:02:47.580 --> 00:02:51.690
The first is a reference to an input stream whose type is I stream.

42
00:02:51.690 --> 00:02:56.290
And the second is a reference to the object we want to extract data into.

43
00:02:56.310 --> 00:03:00.710
Notice that since we're going to modify this object we don't want it to be a contest.

44
00:03:00.750 --> 00:03:05.760
So depending on the data we want to read we can get the data from the input stream and either store

45
00:03:05.760 --> 00:03:08.670
it locally or store it directly in the object.

46
00:03:08.670 --> 00:03:12.240
In this case we allocate a large array of characters that will hold the data.

47
00:03:12.240 --> 00:03:14.110
We went to construct a string object.

48
00:03:14.220 --> 00:03:19.920
Then we simply create a temporary my string object and assign it back to the object that was passed

49
00:03:19.920 --> 00:03:20.910
in.

50
00:03:20.970 --> 00:03:25.590
This assumes we have copy or move overloaded assignment operators and they're implemented correctly

51
00:03:25.590 --> 00:03:27.450
since we have a raw pointer.

52
00:03:27.450 --> 00:03:31.230
Finally we returned the stream reference so that we can change a.

53
00:03:31.830 --> 00:03:36.120
We can do all sorts of error checking and setting and getting the state of the input stream.

54
00:03:36.150 --> 00:03:42.030
So we have control of the data we're extracting as well as overrunning the size of the buffer we created.

55
00:03:42.030 --> 00:03:47.220
Now let's head over to the idea and implement these two operators in my string class.

56
00:03:47.350 --> 00:03:54.130
Ok so I'm back in the IDM in the section 14 workspace in the my string Dasch insertion Dasch extraction

57
00:03:54.130 --> 00:04:00.070
project and what I've got here is I've got the mystery class again and I've got rid of all the operators

58
00:04:00.070 --> 00:04:03.830
that we've overloaded previously just so it's a barebones class again.

59
00:04:03.970 --> 00:04:07.340
And and the reason I did this is to make this sort of bit more readable.

60
00:04:07.510 --> 00:04:12.610
And what we want to do here is overload the insertion and extraction operator so we can use this these

61
00:04:12.610 --> 00:04:14.890
objects with streams really easily.

62
00:04:15.250 --> 00:04:18.130
So here's a sample main that's going to test this.

63
00:04:18.370 --> 00:04:22.900
And you can see here I'm creating Larry and Moe as my strings and Curly is an empty string right now

64
00:04:23.500 --> 00:04:26.590
and I'm outputting into the third Stooges first name.

65
00:04:26.590 --> 00:04:31.200
I'm reading from from standard in this case Cien into Kerley.

66
00:04:31.390 --> 00:04:37.960
So we're overloading the operator right there to work with my string object then I'm displaying the

67
00:04:37.960 --> 00:04:40.940
three stooges are Larry Moe and Curly again.

68
00:04:40.950 --> 00:04:45.670
We're using the insertion operator here that we're going to overload and then we're going to grab all

69
00:04:45.670 --> 00:04:51.460
three of the Stooges names so we say into the three stooges names separated by space ambil type in whatever

70
00:04:51.460 --> 00:04:51.910
we like.

71
00:04:51.910 --> 00:04:55.340
There'll be storage of Larry Moe and Curly in them or display them out again.

72
00:04:55.540 --> 00:04:55.910
OK.

73
00:04:56.020 --> 00:04:57.200
So pretty simple.

74
00:04:57.280 --> 00:04:59.860
And you can see this main driver here looks nice.

75
00:04:59.860 --> 00:05:03.250
Now we don't have all those dot display methods that we had before.

76
00:05:03.250 --> 00:05:03.660
Cool.

77
00:05:03.700 --> 00:05:08.170
So let's go to my string header file and let's get started here.

78
00:05:08.180 --> 00:05:14.020
First we want to do is I'm going to implement these as friend functions so the class is going to declare

79
00:05:14.020 --> 00:05:15.220
them as friends.

80
00:05:15.220 --> 00:05:16.780
So why don't we do that first.

81
00:05:16.930 --> 00:05:24.360
And what we can do here is just simply say friend and provide the prototype so we we're returning a

82
00:05:24.490 --> 00:05:29.620
stood O stream reference will do the insertion operator first.

83
00:05:29.620 --> 00:05:38.550
So we've got to reference the operator overloading is the insertion operator and it's a binary operator

84
00:05:38.560 --> 00:05:40.420
so we've got two parameters here.

85
00:05:40.450 --> 00:05:47.590
The first one is a pseudo stream and we can call this anything we like we can call it a lesser out typically

86
00:05:47.590 --> 00:05:49.080
does the names that are used.

87
00:05:49.300 --> 00:05:58.210
And we've got my string of Konst my string reference and we'll just call that right hand side.

88
00:05:58.390 --> 00:06:00.420
We'll stick to that naming convention.

89
00:06:00.640 --> 00:06:04.350
So that takes care of that prototype and now we'll do the extraction operator.

90
00:06:04.360 --> 00:06:13.390
So same idea friend in this case we're returning an input stream by reference again and the operator

91
00:06:13.390 --> 00:06:18.810
is operator and we be doing the extraction operator.

92
00:06:19.330 --> 00:06:21.220
And again we've got two parameters.

93
00:06:21.220 --> 00:06:24.740
The first one is the input stream reference.

94
00:06:24.820 --> 00:06:31.470
We'll just call that in and we've got a string object also by reference called at right hand side.

95
00:06:31.600 --> 00:06:37.330
Notice how this one is not Konst because I do want to modify that object based on what I'm reading in

96
00:06:37.330 --> 00:06:38.620
from the input stream.

97
00:06:39.010 --> 00:06:39.820
OK so that's it.

98
00:06:39.820 --> 00:06:42.010
Those who are to function prototypes.

99
00:06:42.190 --> 00:06:47.500
And now what we can do is we can go to the implementation file on my strengths GPP file and will actually

100
00:06:47.500 --> 00:06:48.490
write these.

101
00:06:48.490 --> 00:06:52.440
I'm going to put them all the way on the bottom here that we have got a lot of room to work.

102
00:06:52.510 --> 00:07:00.520
So let's say that this is the overloaded insertion operator that one first.

103
00:07:00.520 --> 00:07:00.870
All right.

104
00:07:00.870 --> 00:07:09.700
So same type of function prototype Ramstad stream reference the operator overloading is the insertion

105
00:07:09.700 --> 00:07:14.830
operator and we've got the same two parameters that we had before that got an O stream reference

106
00:07:19.090 --> 00:07:21.320
and we called it O S I believe.

107
00:07:21.350 --> 00:07:23.490
Yes we did and a concert.

108
00:07:23.500 --> 00:07:30.220
My string class by reference right hand side.

109
00:07:30.220 --> 00:07:30.880
There we go.

110
00:07:31.100 --> 00:07:31.370
OK.

111
00:07:31.390 --> 00:07:35.830
So now this is probably one of the simplest methods to implement.

112
00:07:35.830 --> 00:07:43.810
All we're doing is we're putting on OS are Remember this is a friend so we can simply say all right

113
00:07:43.810 --> 00:07:47.410
hand sides as TR That's it.

114
00:07:47.410 --> 00:07:53.710
If it wasn't a friend we could use the get c r method and then we're going to return that output stream.

115
00:07:54.940 --> 00:07:55.590
That's it.

116
00:07:55.630 --> 00:07:56.860
Pretty straightforward.

117
00:07:56.860 --> 00:07:59.440
Now let's overload our extraction operator

118
00:08:05.200 --> 00:08:07.170
and we'll do the prototype again here.

119
00:08:07.210 --> 00:08:11.240
So it's a good ice cream reference.

120
00:08:11.590 --> 00:08:18.430
The operator overloading is the extraction operator and we also have two parameters right the first

121
00:08:18.430 --> 00:08:28.240
one is a stood stream reference and we'll just call that in and we've got the my string ref right hand

122
00:08:28.240 --> 00:08:29.240
side.

123
00:08:29.350 --> 00:08:33.060
Again this one can't be conc because we're going to read into it or change it.

124
00:08:33.430 --> 00:08:34.150
That's it.

125
00:08:34.150 --> 00:08:38.080
So now we're going to get a string from the input stream.

126
00:08:38.080 --> 00:08:39.780
We need to store that somewhere.

127
00:08:39.910 --> 00:08:46.540
So let's create a pretty big size buffer here and we'll do this dynamically on the heap.

128
00:08:46.540 --> 00:08:52.300
We'll just store thousand characters that should give us plenty of room.

129
00:08:52.300 --> 00:08:56.530
We could certainly do this in a different way so that we don't overrun this buffer and just do it like

130
00:08:56.530 --> 00:08:59.140
this because it's a simple example to understand.

131
00:08:59.230 --> 00:09:04.230
Now we get whatever's in the input stream and we started buffer.

132
00:09:04.240 --> 00:09:07.010
Right now we've got the buffer it's got the data that we want.

133
00:09:07.020 --> 00:09:12.240
And what we want to do is we want to update this right hand side objects string based on this data.

134
00:09:12.250 --> 00:09:12.730
Right.

135
00:09:12.880 --> 00:09:15.120
So there's a lot of ways to do this.

136
00:09:15.130 --> 00:09:23.030
One of the simplest ways to do it is just to say are a chess equals my string and initialize it with

137
00:09:23.030 --> 00:09:25.080
buff.

138
00:09:25.210 --> 00:09:29.110
Now depending on whether you've got copy assignment or move assignment that's what's going to happen

139
00:09:29.110 --> 00:09:30.640
here we've got both.

140
00:09:30.640 --> 00:09:33.280
So this is going to use move assignment which is super efficient.

141
00:09:33.280 --> 00:09:36.380
We're just going to steal that pointer when we're done.

142
00:09:36.400 --> 00:09:45.330
We make sure that we delete this temporary stores that we created and buff and we return the input stream.

143
00:09:45.340 --> 00:09:50.620
Remember this is going to return it by reference and that's it we should be done that's run this and

144
00:09:50.620 --> 00:09:52.210
see if we have any typos.

145
00:09:52.600 --> 00:09:56.290
And we do I spelled operator incorrectly I believe.

146
00:09:56.380 --> 00:09:57.290
Sure did.

147
00:09:57.500 --> 00:09:59.020
I'll fix that real quick.

148
00:09:59.060 --> 00:10:01.000
See if there's any other errors down here.

149
00:10:01.300 --> 00:10:02.770
I think correlated to that same error.

150
00:10:02.770 --> 00:10:03.990
So let's run this.

151
00:10:04.120 --> 00:10:12.620
And here we go into this the third Stooges first Nabl the third Stooges curly notice we use the move

152
00:10:12.620 --> 00:10:17.460
assignment which is what we expected that move assignment happened when I copied that object out.

153
00:10:17.480 --> 00:10:22.630
Now it says into the three stooges names separated by a space Wallaces give them different names.

154
00:10:22.640 --> 00:10:25.380
Let's say it's Frank Jim and Joe.

155
00:10:26.330 --> 00:10:30.410
So you can see three move assignments there and says the three stooges are frank Jim and Joe.

156
00:10:30.410 --> 00:10:31.330
So there you go.

157
00:10:31.400 --> 00:10:36.110
We've overloaded the insertion and extraction operators to work with our classes.

158
00:10:36.230 --> 00:10:39.870
And it really feels like it's part of the type system now.

159
00:10:40.160 --> 00:10:40.790
All right.

160
00:10:40.790 --> 00:10:44.770
So that's it for this section the next part is the challenge exercise.

161
00:10:44.810 --> 00:10:45.810
So I'll see you there.
