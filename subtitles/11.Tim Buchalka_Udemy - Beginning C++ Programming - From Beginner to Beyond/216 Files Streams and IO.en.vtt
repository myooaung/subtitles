WEBVTT
1
00:00:05.340 --> 00:00:13.820
In this video we'll learn about how C++ uses streams and files for IO writing and IO library for any

2
00:00:13.820 --> 00:00:17.170
programming language is an extremely difficult task.

3
00:00:17.270 --> 00:00:22.490
There can be all sorts of devices providing data to your program and your program can send data to many

4
00:00:22.490 --> 00:00:24.320
types of devices as well.

5
00:00:24.380 --> 00:00:29.310
These devices may be physical devices such as hard disks the console and the keyboard.

6
00:00:29.420 --> 00:00:36.780
Or they can be virtual devices such as some connection to a web server C++ provides a stream abstraction

7
00:00:36.870 --> 00:00:43.370
to work with IO devices a stream is an interface that's independent of the actual device.

8
00:00:43.470 --> 00:00:48.900
So from the programmers perspective we can code to the stream interface and not worry too much about

9
00:00:48.900 --> 00:00:53.730
what device is connected to the stream stream is exactly as you would expect.

10
00:00:53.760 --> 00:00:55.570
It's a sequence of bytes.

11
00:00:55.650 --> 00:01:00.730
C++ provides different types of streams depending on whether we want input or output.

12
00:01:00.810 --> 00:01:03.590
But we can also use a stream that does both.

13
00:01:03.600 --> 00:01:05.470
Let's see what this looks like visually.

14
00:01:07.460 --> 00:01:14.270
In this slide you can see that the C++ program is on the right side the upper stream is an input stream

15
00:01:14.270 --> 00:01:21.250
that provides input to the program from some input device this device can be the keyboard a file a connection

16
00:01:21.250 --> 00:01:27.850
to a web service and more the lower stream is an output stream that takes output from the program and

17
00:01:27.850 --> 00:01:30.270
sends it to the output device.

18
00:01:30.300 --> 00:01:32.610
Again the output device can be a file.

19
00:01:32.620 --> 00:01:35.790
The console a connection to a web service and more.

20
00:01:35.890 --> 00:01:42.820
So let's see some of the C++ header files that we typically include to allow us to work with IO streams.

21
00:01:45.140 --> 00:01:50.240
In this slide we can see three of the most commonly included header files that allow us to work with

22
00:01:50.240 --> 00:01:51.790
stream audio.

23
00:01:51.800 --> 00:01:55.440
There are others but these three are the most commonly used first.

24
00:01:55.550 --> 00:02:02.000
We've already seen and used IO stream IO stream provides the definitions required for formatted input

25
00:02:02.000 --> 00:02:04.280
and output to and from streams.

26
00:02:05.100 --> 00:02:12.330
The stream include file provides definitions for formatted IO to and from file streams and the IO manip

27
00:02:12.330 --> 00:02:19.110
header file provides definitions for manipulators that allow us to format IO streams in specific ways

28
00:02:19.740 --> 00:02:26.220
we'll use the IO manip functionality first in this section when we include these header files will have

29
00:02:26.220 --> 00:02:30.210
access to many C++ classes that we can use for file IO.

30
00:02:30.300 --> 00:02:38.700
So let's see a few of them be Iowas class provides basic support for formatted and formatted IO.

31
00:02:38.910 --> 00:02:46.010
It serves as a base class for most other classes in the IO stream hierarchy the stream class provides

32
00:02:46.010 --> 00:02:48.610
high level input operations from files.

33
00:02:48.770 --> 00:02:55.610
So if you want to read from a file you can declare your object to be an extreme object the O.F. stream

34
00:02:55.610 --> 00:02:59.320
class provides high level output operations from files.

35
00:02:59.450 --> 00:03:05.060
And again if you want to create a new file or write to a file you can declare it as an object of O.F.

36
00:03:05.060 --> 00:03:13.330
stream the stream class provides high level IO on file based streams that stream is derived from stream

37
00:03:13.390 --> 00:03:16.000
and O.F. stream using multiple inheritance.

38
00:03:16.360 --> 00:03:22.090
If we need to do both input and output to a file at the same time we can declare an F stream object

39
00:03:22.090 --> 00:03:22.680
to do it.

40
00:03:23.620 --> 00:03:26.370
Finally we have the string stream class.

41
00:03:26.380 --> 00:03:33.160
This is a very useful class that provides high level IO on memory based strings just like we can use

42
00:03:33.160 --> 00:03:36.050
insertion and extraction with CNN C out.

43
00:03:36.100 --> 00:03:40.880
We can use them with strings to get input and provide output into a string in memory.

44
00:03:41.050 --> 00:03:44.170
That's pretty powerful stuff and we'll see some examples later on.

45
00:03:45.980 --> 00:03:52.190
Finally let's visit our old friends see in and see out and see exactly what they are.

46
00:03:52.350 --> 00:03:56.520
The fact that we've used them all along without worrying about how to create them how to connect them

47
00:03:56.520 --> 00:04:04.300
and so forth is a testament to the design of the C++ IO library and the device independence model C

48
00:04:04.330 --> 00:04:08.920
in C out c air and sea log our global objects.

49
00:04:09.010 --> 00:04:11.790
They're initialized before Maine begins to execute.

50
00:04:11.910 --> 00:04:16.030
And all you need to do is include IO stream to use them.

51
00:04:16.170 --> 00:04:20.710
CN is the standard input stream and is by default connected to the keyboard.

52
00:04:21.030 --> 00:04:27.870
It's an instance of the I stream class C out is the standard output stream and by default it's connected

53
00:04:27.870 --> 00:04:28.940
to the console.

54
00:04:29.190 --> 00:04:31.880
It's an instance of the stream class.

55
00:04:31.980 --> 00:04:37.350
This class should sound familiar since we used it when we overloaded the insertion operator in the overloading

56
00:04:37.350 --> 00:04:43.530
operator section of course C in and C out are generally buffered streams.

57
00:04:43.540 --> 00:04:49.770
This means that input from CNH won't be automatic until the user presses enter and output to see out

58
00:04:49.780 --> 00:04:57.000
occurs only when the stream buffer fills up or we provide a stood and line or we flushed a stream.

59
00:04:57.060 --> 00:05:04.170
Now Sea Air and Sea log or the standard error stream and the standard log stream respectively by default

60
00:05:04.170 --> 00:05:05.970
they're both connected to the console.

61
00:05:05.970 --> 00:05:10.750
They're both unbuffered which means that we get input or output from them as we need it.

62
00:05:10.770 --> 00:05:15.910
Best practice is to use Sierre for error messages and see log for log messages.

63
00:05:15.930 --> 00:05:20.460
Those of you who are familiar with the unix terminal shell or the Windows command prompt know that we

64
00:05:20.460 --> 00:05:22.530
can redirect these streams easily.

65
00:05:22.530 --> 00:05:25.490
So input comes from a file or up goes to a file.

66
00:05:25.710 --> 00:05:30.390
I will be covering this in this course but if you're interested do an internet search for redirecting

67
00:05:30.390 --> 00:05:33.360
hiyo and you'll see how easy and powerful it can be.

68
00:05:33.750 --> 00:05:39.390
OK so that concludes this video in the next video we'll see how we can use the IO manipulators to help

69
00:05:39.390 --> 00:05:40.620
us format our IO.
