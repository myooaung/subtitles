WEBVTT
1
00:00:05.560 --> 00:00:08.860
This video we're going to talk about comments in source code.

2
00:00:08.900 --> 00:00:13.020
Now comments apply to just about every programming language out there.

3
00:00:13.160 --> 00:00:15.410
C++ has two kinds of comments.

4
00:00:15.430 --> 00:00:20.660
But before we talk about those comments let's talk about what comments are in general comments.

5
00:00:20.660 --> 00:00:27.950
Our program are readable explanations in the source code explanations notes annotations.

6
00:00:28.090 --> 00:00:31.670
Anything that adds meaning to what the program is doing.

7
00:00:31.720 --> 00:00:37.300
One thing that's very important to understand is that the comments never make it to the compiler in

8
00:00:37.310 --> 00:00:38.430
C++.

9
00:00:38.590 --> 00:00:44.000
The preprocessor strips out the comment so that the compiler never sees them may sound kind of weird

10
00:00:44.000 --> 00:00:46.750
that we're reading something that the compiler is never going to see.

11
00:00:46.750 --> 00:00:47.620
That's the whole point.

12
00:00:47.620 --> 00:00:49.120
This is human readable.

13
00:00:49.120 --> 00:00:54.190
This is for the next programmer that's coming down the pipe or for yourself when you have to go back

14
00:00:54.190 --> 00:00:55.490
and modify code.

15
00:00:55.510 --> 00:01:01.630
You can leave comments in the code explaining what you did and why you did C++ has two styles of comments.

16
00:01:01.630 --> 00:01:05.930
The first one is of just a single line comment that I'll show you what that looks like.

17
00:01:05.950 --> 00:01:11.560
It's basically two forward slashes side by side and then everything after that until the end of the

18
00:01:11.560 --> 00:01:12.950
line will be ignored.

19
00:01:12.970 --> 00:01:18.190
So this is a comment and the compiler will never see that comment.

20
00:01:18.190 --> 00:01:22.190
That's only for your eyes only or for the eyes of programmers coming after you.

21
00:01:22.570 --> 00:01:24.180
So that's a single line comment.

22
00:01:24.220 --> 00:01:29.530
Typically you see these comments done like this or you may see them for example here right after this

23
00:01:29.530 --> 00:01:31.960
variable declaration here for favorite number.

24
00:01:31.960 --> 00:01:33.730
We could do something like slash slash.

25
00:01:33.730 --> 00:01:41.300
This is where my favorite number is stored or something like that.

26
00:01:41.360 --> 00:01:42.460
That's kind of a silly comment.

27
00:01:42.460 --> 00:01:45.750
Now talk more about using these things wisely.

28
00:01:45.760 --> 00:01:50.830
The computer is never going to see this because the preprocessor will see the comment and strip it out

29
00:01:50.830 --> 00:01:53.100
and just replace it with a single space.

30
00:01:53.440 --> 00:01:57.010
OK so that's one style of comment that's a single line comment.

31
00:01:57.040 --> 00:02:01.010
The other kind of comment is a multi-line comment and that's a slash.

32
00:02:01.030 --> 00:02:08.480
Again a forward slash followed by an asterisk and then an asterisk followed by a Ford slash.

33
00:02:08.620 --> 00:02:13.130
So everything between those two elements is a comment and will be ignored.

34
00:02:13.420 --> 00:02:23.030
So this could be this once spreads across lines so this could be a multiple line comment like that.

35
00:02:23.150 --> 00:02:24.870
Do anything you like.

36
00:02:24.940 --> 00:02:26.830
And again it's totally free form.

37
00:02:26.830 --> 00:02:28.180
You can make it look however you want.

38
00:02:28.180 --> 00:02:30.930
You could indent you could you could do anything you want here.

39
00:02:30.970 --> 00:02:33.840
Everything in here will be ignored.

40
00:02:33.970 --> 00:02:38.560
Ok so now let's took up a little bit more about these comments and what makes sense what does that make

41
00:02:38.560 --> 00:02:39.540
sense.

42
00:02:39.550 --> 00:02:42.500
The idea behind programming is literate programming.

43
00:02:42.520 --> 00:02:46.230
Basically your code should be self-documenting.

44
00:02:46.360 --> 00:02:48.020
Does that mean we don't write comments.

45
00:02:48.040 --> 00:02:48.780
Well no.

46
00:02:48.880 --> 00:02:52.280
So you want to be sure that what you write makes sense.

47
00:02:52.420 --> 00:02:55.060
In this case here's my code.

48
00:02:55.090 --> 00:02:57.740
Here's my main and that's the block of code that I've written.

49
00:02:57.760 --> 00:03:00.790
This is pretty self-explanatory and I'll leave this comment in here.

50
00:03:00.800 --> 00:03:06.220
I've fixed that typo here but there is an integer called favorite number.

51
00:03:06.220 --> 00:03:11.740
You're outputting to the console and try a number you're reading from the console and you're printing

52
00:03:11.740 --> 00:03:12.740
out some stuff.

53
00:03:12.760 --> 00:03:17.260
This code doesn't need any commenting it's very very clear what it's doing.

54
00:03:17.260 --> 00:03:18.770
That's not always the case.

55
00:03:18.820 --> 00:03:24.970
Sometimes code is very complicated it's using some complex algorithms maybe using some really clever

56
00:03:25.420 --> 00:03:31.000
efficiency tweak to make it run faster but it makes it less obvious what it's doing.

57
00:03:31.000 --> 00:03:37.300
Those are good examples of where you should use comments don't comment the obvious for example right

58
00:03:37.300 --> 00:03:40.070
here you don't want to say returns 0.

59
00:03:40.390 --> 00:03:41.740
That's silly.

60
00:03:41.740 --> 00:03:43.510
I mean I don't want to return here.

61
00:03:43.510 --> 00:03:44.890
I just said it in the code.

62
00:03:44.890 --> 00:03:48.430
So those kinds of comments you really don't want to use.

63
00:03:48.430 --> 00:03:53.530
Also if you're adding a and b you don't want to put a comment that says adding a and b it's pretty obvious

64
00:03:53.530 --> 00:03:55.470
from a plus b what you're doing.

65
00:03:55.510 --> 00:03:58.630
So you really want to explain more complicated code.

66
00:03:58.720 --> 00:04:02.090
You also want to keep the style of the comments consistent.

67
00:04:02.110 --> 00:04:07.780
So for example I will have this line comment here which goes to the end of a line over here.

68
00:04:07.780 --> 00:04:10.000
I really don't want to do this style comment

69
00:04:13.710 --> 00:04:16.600
and do something like that you want to keep your style consistent.

70
00:04:16.650 --> 00:04:23.150
Now the multi-line comments are often seen at the top of files so I'll do this.

71
00:04:23.190 --> 00:04:29.040
And in this case code like kind of helps me out over it a bit but I'll do that so many times you'll

72
00:04:29.040 --> 00:04:31.480
see code that looks like this.

73
00:04:31.590 --> 00:04:36.360
You'll see a bunch of asterisks on top and then you'll see a much faster start here created with a little

74
00:04:36.360 --> 00:04:37.860
header block.

75
00:04:37.860 --> 00:04:42.130
Now notice I've got to be getting comment here and the end of the comment here everything in here will

76
00:04:42.130 --> 00:04:44.910
be ignored but in here you'll see stuff like author

77
00:04:47.770 --> 00:04:55.050
and I'll say Frank you know dates things like that copyrights license information a lot of that is very

78
00:04:55.050 --> 00:04:59.820
commonly seen in a multi-line comment at the top of the source file.

79
00:04:59.820 --> 00:05:05.100
Another good example of a good comment would be supposed that inside this function I'm doing some kind

80
00:05:05.100 --> 00:05:11.580
of algorithm and I've tweaked the algorithm so I could do something like using a modified

81
00:05:13.950 --> 00:05:16.050
version of Dijkstra's algorithm that say

82
00:05:22.230 --> 00:05:28.670
to improve space efficiency or anything somethin like that.

83
00:05:28.680 --> 00:05:32.610
Now the program are coming after you understand that you're using dogs just outgrow them and you've

84
00:05:32.610 --> 00:05:37.050
modified it somewhat dioecious algorithm it's a fairly well understood algorithm so you've tweaked it

85
00:05:37.050 --> 00:05:39.330
somehow to improve space efficiency.

86
00:05:39.330 --> 00:05:44.500
Maybe in the body of that algorithm you can comment what exactly you've done.

87
00:05:44.580 --> 00:05:46.170
So that's an example of a good comment.

88
00:05:46.180 --> 00:05:47.220
So again don't comment.

89
00:05:47.220 --> 00:05:51.480
The obvious good commenting doesn't justify bad code.

90
00:05:51.480 --> 00:05:55.680
Obviously you don't want to write really bad code and then put a good comment in there saying something

91
00:05:55.680 --> 00:05:57.050
silly.

92
00:05:57.270 --> 00:06:04.020
One of the dangers with comments is that many times programmers use comments as version control.

93
00:06:04.020 --> 00:06:15.120
So up here you'll see something like say 11 11 2017 and you'll see something like Frank fixed a bug

94
00:06:15.660 --> 00:06:23.200
in something and then another program will come across the 11:13 20:17.

95
00:06:23.370 --> 00:06:30.880
Maybe it's Joe and Joe added function to do something that's not a good idea.

96
00:06:30.960 --> 00:06:36.210
If you want to use version and use version control use something like subversion or get don't write

97
00:06:36.210 --> 00:06:37.890
your versioning here.

98
00:06:37.980 --> 00:06:41.960
The problem with this is some some programmers will do it some programmers won't know this for they

99
00:06:41.970 --> 00:06:45.430
won't be reflective of all the changes that actually occurred in the file.

100
00:06:45.580 --> 00:06:48.150
OK so again don't you don't do this.

101
00:06:48.150 --> 00:06:49.770
This is not a good idea.

102
00:06:49.770 --> 00:06:52.830
Use a real version control system.

103
00:06:52.860 --> 00:07:00.120
Finally if you go back and modify code make sure you look at the comments and modify the comments if

104
00:07:00.120 --> 00:07:01.100
necessary.

105
00:07:01.110 --> 00:07:06.010
There's nothing worse than a programmer looking at some code and seeing a comment that looks like this.

106
00:07:06.210 --> 00:07:11.070
And then you look at the code and it doesn't look anything like dextrous algorithm because another programmer

107
00:07:11.100 --> 00:07:13.730
changed it to something else and didn't change the comment.

108
00:07:13.830 --> 00:07:19.350
So it's really important that you keep your comments and your code in sync as you go along.

109
00:07:19.350 --> 00:07:25.590
OK that's pretty much it for comments in the next video will talk about the main function itself and

110
00:07:25.590 --> 00:07:27.520
talk a little bit about what's going on there.
