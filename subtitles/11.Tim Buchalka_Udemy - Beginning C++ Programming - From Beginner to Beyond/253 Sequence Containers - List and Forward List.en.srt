1
00:00:05,320 --> 00:00:10,550
In this video we'll learn more about the SBL list and forward list containers.

2
00:00:10,550 --> 00:00:16,130
These are both sequenced containers and store the elements in noncontiguous memory that will provide

3
00:00:16,130 --> 00:00:19,910
direct access to elements via the app method or subscript operator.

4
00:00:20,030 --> 00:00:23,570
But they're very efficient when we need to insert and delete elements in the lists.

5
00:00:23,600 --> 00:00:30,370
Once an element is found let's first talk about the list and then we'll talk about the forward list

6
00:00:30,370 --> 00:00:31,170
after.

7
00:00:31,330 --> 00:00:37,420
In order to use the list container we have to include the list header file the list x is a doubly linked

8
00:00:37,420 --> 00:00:41,700
list of elements so we can go from element to element in either direction.

9
00:00:41,890 --> 00:00:45,530
Remember lists do not support direct element access.

10
00:00:45,640 --> 00:00:50,980
The list has a front and a back and we can use all of the iterators but the iterators may become invalid

11
00:00:50,980 --> 00:00:52,410
when deleting elements.

12
00:00:52,690 --> 00:00:55,510
So let's see what a doubly linked list looks like conceptually

13
00:00:58,450 --> 00:00:58,990
in this slide.

14
00:00:58,990 --> 00:01:02,380
We see a diagram of what a simple list looks like.

15
00:01:02,380 --> 00:01:07,830
Notice that the elements are not contiguous in memory and element has a reference to the element after

16
00:01:07,830 --> 00:01:09,730
it and before it if they exist.

17
00:01:09,790 --> 00:01:12,970
That's why it's referred to as a doubly linked list.

18
00:01:13,180 --> 00:01:16,430
So there is some overhead involved with maintaining these links.

19
00:01:16,600 --> 00:01:20,960
We declare L is a list of integers and initialize it to 1 2 and 3.

20
00:01:21,130 --> 00:01:26,240
The list has a front and a back to front in this case is the element one and the back is the element

21
00:01:26,260 --> 00:01:28,060
three with a list.

22
00:01:28,060 --> 00:01:33,370
We can efficiently add or remove elements from the front and the back and we can also efficiently remove

23
00:01:33,370 --> 00:01:35,450
insert elements from anywhere in the list.

24
00:01:35,620 --> 00:01:39,730
All we really have to do is remove or insert development and then really the links to the other elements

25
00:01:39,730 --> 00:01:41,200
around it.

26
00:01:41,200 --> 00:01:45,180
Inserting and removing elements other than at the ends is very efficient.

27
00:01:45,370 --> 00:01:49,750
But in order to do that we need to have an iterator to the element that we want to remove or insert

28
00:01:49,750 --> 00:01:50,710
before.

29
00:01:50,770 --> 00:01:54,440
This is usually done with the find method and it's done in linear time.

30
00:01:54,790 --> 00:01:59,860
If you need a container where you will have lots of insertions and removals from the container and you

31
00:01:59,860 --> 00:02:03,520
don't need direct access to the elements then the list is a good choice.

32
00:02:05,500 --> 00:02:10,780
In the first example in this slide I declared L as the list of integers and initialized it to 1 2 3

33
00:02:10,780 --> 00:02:17,050
and 4 in the second example I declared l 1 is a list of integers and I'm using an overloaded constructor

34
00:02:17,050 --> 00:02:20,240
to create 10 integers and initialize them all to 100.

35
00:02:21,390 --> 00:02:26,580
In the third example on declaring Stooges as a list of strings and initializing them withstood strings

36
00:02:26,580 --> 00:02:34,670
and C-style strings like vectors stood array's index lists also support assignment via initializer list.

37
00:02:34,680 --> 00:02:37,560
So let's see some other common methods provided by the list.

38
00:02:39,450 --> 00:02:41,430
Let's start with the size method.

39
00:02:41,430 --> 00:02:46,500
This method returns the number of elements that are in the list and max size tells us what the maximum

40
00:02:46,500 --> 00:02:48,960
number of elements a list can contain.

41
00:02:49,070 --> 00:02:54,850
Remember list do not allow direct access to elements so we can't use a subscript operator or the dot

42
00:02:54,860 --> 00:02:56,630
at method.

43
00:02:56,640 --> 00:02:58,950
These are not available for lists.

44
00:02:58,980 --> 00:03:03,980
The list also provides front and back methods that return references to the element at the front and

45
00:03:03,990 --> 00:03:05,810
the element at the back of the list.

46
00:03:05,820 --> 00:03:13,140
In this example elde up front refers to one and elde up back refers to the five the list allows for

47
00:03:13,150 --> 00:03:16,980
efficiently inserting elements at the back and at the front.

48
00:03:16,980 --> 00:03:20,190
This is done with the push back method and the push front method.

49
00:03:20,550 --> 00:03:26,640
We can also have pop back and pop front which he Fishell remove elements from the back or the front.

50
00:03:26,870 --> 00:03:30,720
In this slide we have a list of person objects called L..

51
00:03:30,860 --> 00:03:36,830
We can create a person P one named Larry who is 18 years old and we can use the pushback method to insert

52
00:03:36,850 --> 00:03:38,800
the one at the back of the list.

53
00:03:38,840 --> 00:03:41,570
We can also remove it using putback.

54
00:03:41,600 --> 00:03:46,550
Similarly we can add a person object to the front of the list with push front and remove it with pop

55
00:03:46,550 --> 00:03:52,310
front the list container also supports in place front and in place back which are efficient ways to

56
00:03:52,310 --> 00:03:56,230
create and initialize objects that we want to store in the list right in place.

57
00:03:59,230 --> 00:04:04,240
Inserting elements into a list works a little differently from what we've seen with other containers.

58
00:04:04,240 --> 00:04:09,580
We can add a certain element before an existing element using the insert method but the insert method

59
00:04:09,580 --> 00:04:14,140
expects an iterator that's referencing the element we want to insert before.

60
00:04:14,320 --> 00:04:20,570
In this example L is a list of ints and I initialize L to 1 2 3 4 and 5.

61
00:04:20,590 --> 00:04:23,630
Now I need an iterator to point to an element in the list.

62
00:04:23,680 --> 00:04:29,850
We can do this lots of ways but let's use the Find function we can call fine with Elda begin l.com.

63
00:04:29,890 --> 00:04:36,370
And we're looking for the three in this case the iterator I-T now is referencing the element 3 in the

64
00:04:36,370 --> 00:04:38,070
list.

65
00:04:38,200 --> 00:04:44,620
If we now call l.com insert in Pessin I-T which is the iterator and the number we want to insert in

66
00:04:44,620 --> 00:04:51,760
this case 10 the 10 will be inserted very efficiently before the three the iterator will not be invalidated

67
00:04:51,760 --> 00:04:54,070
it still references the 3.

68
00:04:54,070 --> 00:04:59,800
Now if we call Ellicot erase and pass in the iterator the three will be removed from the list and the

69
00:04:59,800 --> 00:05:01,240
iterator will become invalid.

70
00:05:01,240 --> 00:05:08,590
Now this also allow resizing we can resize to a size of two in which case all the elements after the

71
00:05:08,590 --> 00:05:10,040
second will be removed.

72
00:05:10,880 --> 00:05:16,610
If we resize to a value larger than what we currently have the list will be expanded to that many elements

73
00:05:16,850 --> 00:05:22,220
and the default initializer for the type of object the list contains will be called and those elements

74
00:05:22,230 --> 00:05:24,640
stored in a newly created element.

75
00:05:24,680 --> 00:05:31,100
So in this case if we resize L to 5 we'll add 3 new elements to the list and they'll all be initialized

76
00:05:31,100 --> 00:05:35,280
to zero in this case because they are integers.

77
00:05:35,330 --> 00:05:37,640
Finally how do we traverse a list.

78
00:05:37,790 --> 00:05:42,940
We can use a range based for loop or we can use iterators since lists are bidirectional.

79
00:05:42,950 --> 00:05:45,500
We can iterate in both directions.

80
00:05:45,500 --> 00:05:48,250
So in this case we have a list L initialized to the end.

81
00:05:48,290 --> 00:05:54,920
One two three four and five and we have an iterator I-T that will be referring to the three when we

82
00:05:54,920 --> 00:05:57,380
dereference I-T and display the element.

83
00:05:57,380 --> 00:06:03,650
We get a 3 when we dereference I-T and display the element we get a three then we can increment the

84
00:06:03,710 --> 00:06:08,480
iterator and now refers to the four we can display the four in the same way.

85
00:06:08,480 --> 00:06:12,290
Finally we can decrement the iterator and we get right back to the three.

86
00:06:12,290 --> 00:06:16,110
Now let's see what some of the differences are between a list and a forward list

87
00:06:19,350 --> 00:06:24,750
the forward list was added to the T.L. and C plus plus 11 in order to use the forward list.

88
00:06:24,750 --> 00:06:27,620
We must include the forward list header file.

89
00:06:28,050 --> 00:06:33,700
The forward list x is a singly linked list so the list can only be traversed in one direction.

90
00:06:33,840 --> 00:06:38,880
The forward list incurs less overhead than the list but the downside is that we can only use it in one

91
00:06:38,880 --> 00:06:39,780
direction.

92
00:06:39,780 --> 00:06:43,170
But in many cases this is exactly what we want.

93
00:06:43,230 --> 00:06:47,960
Similar to the list the forward list allows for rapid insertion and deletion of elements.

94
00:06:48,090 --> 00:06:51,090
Once we have an iterator to one of the elements.

95
00:06:51,090 --> 00:06:56,730
Also the forward list does not support direct element access as we'll see in a moment the forward list

96
00:06:56,730 --> 00:06:59,600
has no concept of back only front.

97
00:06:59,670 --> 00:07:04,350
It doesn't make much sense to get to the back of a list and then not be able to traverse backwards so

98
00:07:04,350 --> 00:07:05,730
it's not available.

99
00:07:05,730 --> 00:07:10,370
Obviously reverse iterators make no sense either so they're not supported.

100
00:07:10,440 --> 00:07:15,810
So let's see what a forward list might look like in this slide.

101
00:07:15,810 --> 00:07:19,120
We see a diagram of what a simple forward list might look like.

102
00:07:19,470 --> 00:07:23,920
We declare L as a forward list of integers and initialize it to 1 2 and 3.

103
00:07:24,150 --> 00:07:27,690
The forward list has only a front no back the front.

104
00:07:27,690 --> 00:07:31,170
In this case is the element 1 with a forward list.

105
00:07:31,170 --> 00:07:34,820
We can officially add elements to the front using push front.

106
00:07:34,950 --> 00:07:41,650
You can see the pointers are going in only one direction so let's see some of the common methods used

107
00:07:41,650 --> 00:07:42,940
with forward lists.

108
00:07:42,940 --> 00:07:44,780
Let's start with the size method.

109
00:07:44,800 --> 00:07:45,850
It's not available.

110
00:07:45,940 --> 00:07:50,500
There's an interesting discussion about why the decision was made to not provide a size method if you're

111
00:07:50,500 --> 00:07:54,180
interested let me know in the Q&amp;A and we can talk about it.

112
00:07:54,460 --> 00:07:58,800
The max size will tell us the maximum number of elements the forward list can store.

113
00:07:59,110 --> 00:08:02,610
Also notice that we have a front method but no back method.

114
00:08:02,680 --> 00:08:08,600
In this case the front method returns a reference to the element 1.

115
00:08:08,770 --> 00:08:15,790
Since the forward list only uses front and not back we have pushed front pop front and emplace front

116
00:08:15,790 --> 00:08:23,380
available for quick insertion of elements at the front of the forward list.

117
00:08:23,400 --> 00:08:28,800
So since the forward list has a singly linked list it makes sense to insert elements into the forward

118
00:08:28,800 --> 00:08:31,320
list after an iterator reference.

119
00:08:31,470 --> 00:08:37,020
So the forward list supports methods named explicitly like what they do in this example.

120
00:08:37,020 --> 00:08:43,510
L is a forward list of the integers 1 2 3 4 5 and we have an iterator I-T that points to the three.

121
00:08:43,650 --> 00:08:49,800
We can now use Ellicot insert after and pass in the iterator and the object we want to insert.

122
00:08:50,010 --> 00:08:53,480
In this case the 10 will be inserted after the 3.

123
00:08:53,490 --> 00:09:00,180
Notice that there are no insert in place erase method 0 called insert after and place after erase after

124
00:09:00,540 --> 00:09:01,950
the iterator doesn't invalidate.

125
00:09:01,950 --> 00:09:08,040
In this case it still points to the 3 so we can also use in place after any race after in the same way.

126
00:09:08,400 --> 00:09:12,920
And the foodless allows resizing in the same way that the list does.

127
00:09:13,200 --> 00:09:18,390
OK so let's head over to the ID and we'll see some examples using a list and then we'll have a challenge

128
00:09:18,390 --> 00:09:21,910
exercise using a list OK.

129
00:09:21,940 --> 00:09:28,350
BECK any idea I mean the section 20 workspace and I mean the list project and what I'd like to do here

130
00:09:28,350 --> 00:09:34,760
is do the same thing we've been doing the previous videos go over some examples of using the list container.

131
00:09:34,800 --> 00:09:36,610
Now there's a couple of differences here.

132
00:09:36,600 --> 00:09:42,570
One is I'm including this iterator header file here and that's for this advanced function.

133
00:09:42,570 --> 00:09:44,070
I'll talk about that in a second.

134
00:09:44,070 --> 00:09:46,670
It basically allows us to advance an iterator.

135
00:09:46,770 --> 00:09:51,900
We can't really do a plus equals or minus equals on list iterators but we can advance them using the

136
00:09:51,900 --> 00:09:53,170
advanced function.

137
00:09:53,160 --> 00:09:58,880
So I'll say that when I get to it we have the person class that we've had before.

138
00:09:59,120 --> 00:10:04,970
And in this case the only difference from the person class that you've seen before is the default constructor

139
00:10:04,980 --> 00:10:11,120
before we just use the default way that the compiler generated for us here I want the name to be unknown

140
00:10:11,120 --> 00:10:16,550
and I want the H to be zero when nothing is provided and you'll see why in a little bit when we resize

141
00:10:16,550 --> 00:10:22,040
a list it creates objects by using a default and want you to see those that were in that age so you

142
00:10:22,040 --> 00:10:24,370
can actually see when that happens.

143
00:10:24,410 --> 00:10:26,090
Other than that it's exactly the same.

144
00:10:26,090 --> 00:10:28,280
I've got the overloaded constructor here.

145
00:10:28,460 --> 00:10:32,270
I am overloading the less than operator and equality operator.

146
00:10:32,270 --> 00:10:39,080
Those are the two real important operators for the SPL and I've got a friend insertion operator right

147
00:10:39,080 --> 00:10:40,990
here for a stream insertion.

148
00:10:41,000 --> 00:10:41,500
All right.

149
00:10:44,040 --> 00:10:50,320
I've got a template function right here that allows me to display any list of any type.

150
00:10:50,460 --> 00:10:53,290
So the template parameter is t that's being replaced.

151
00:10:53,290 --> 00:10:58,560
Again you've seen this before with Tex and vector so it's just another example here with a list.

152
00:10:58,590 --> 00:11:00,130
So let's go through these examples.

153
00:11:00,270 --> 00:11:05,430
I've got some tests here and I'm start with test one or you can see the output over here as I said I've

154
00:11:05,430 --> 00:11:07,700
already run this so the test is right there.

155
00:11:07,710 --> 00:11:09,380
That's where we're at right now.

156
00:11:09,720 --> 00:11:14,620
Here we're creating a list of integers and you can see the syntax is exactly as you would expect.

157
00:11:14,640 --> 00:11:19,470
I hope that by now you're seeing these patterns right and it's not like oh my goodness in order to use

158
00:11:19,470 --> 00:11:21,770
a list I've got to learn all this new stuff.

159
00:11:21,870 --> 00:11:25,380
The patterns are the same if you know how to use a deck you know how to use a vector you know how to

160
00:11:25,380 --> 00:11:26,290
use a list.

161
00:11:26,310 --> 00:11:32,900
It's just a matter of going to the documentation and see the nuances in the specifics for each container.

162
00:11:33,120 --> 00:11:35,190
But the general patterns are the same.

163
00:11:35,190 --> 00:11:40,390
So in this case I'm creating one as one two three four five and I'm displaying.

164
00:11:40,410 --> 00:11:47,270
You see that being displayed right here and now creating L2 as a list of strings.

165
00:11:47,600 --> 00:11:51,770
And what I'm doing is I'm pushing back to the back and front to the front and then a display and you

166
00:11:51,770 --> 00:11:56,110
can see exactly what you can expect to remember a list has a back and it's got a front.

167
00:11:56,180 --> 00:11:57,750
So we're taking advantage of that.

168
00:11:57,770 --> 00:12:00,300
It's very efficient inserting on both ends.

169
00:12:01,300 --> 00:12:06,790
Here I'm creating three is a list of integers and I'm using the assignment using the initializer list

170
00:12:07,150 --> 00:12:10,510
just like we've done with the other containers and then I'm displaying all three.

171
00:12:10,720 --> 00:12:12,250
And you could see it right there.

172
00:12:12,520 --> 00:12:17,230
And then we're using the same constructor that we've used before and again I know this is becoming old

173
00:12:17,230 --> 00:12:18,600
hat but I do I'm doing this.

174
00:12:18,640 --> 00:12:23,920
There's a method to my madness I'm doing this on purpose so you can see the consistency between all

175
00:12:23,950 --> 00:12:24,940
these containers.

176
00:12:24,940 --> 00:12:26,310
So that's the constructor.

177
00:12:26,410 --> 00:12:31,410
We've got 10 100s and then we're displaying all four of the 10 100s.

178
00:12:31,630 --> 00:12:32,670
Okay perfect.

179
00:12:32,680 --> 00:12:35,830
So let's move on to the second test.

180
00:12:36,010 --> 00:12:36,870
And that's right.

181
00:12:36,870 --> 00:12:38,680
Here you can see the output right over here.

182
00:12:38,680 --> 00:12:44,100
In this case I've got l as a list of integers from 1 through 10 AM initialising and I'm displaying it.

183
00:12:44,110 --> 00:12:46,150
There's the display right there.

184
00:12:46,660 --> 00:12:47,910
What's the list size.

185
00:12:47,980 --> 00:12:52,660
Well it's 10 What's the front the front is the one what's the back.

186
00:12:52,660 --> 00:12:53,620
The back is the 10.

187
00:12:53,620 --> 00:12:57,770
Remember these are references we're getting to them so we can actually change them if we like.

188
00:12:57,940 --> 00:13:00,980
There's the sizes 10 in the front the back.

189
00:13:01,060 --> 00:13:02,690
We can clear the list.

190
00:13:02,740 --> 00:13:05,410
That removes all the elements from it and display it again.

191
00:13:05,530 --> 00:13:09,180
Now it's empty and its size is zero so you can see right there.

192
00:13:11,150 --> 00:13:13,030
Again very very consistent.

193
00:13:13,040 --> 00:13:13,990
So let's look at that.

194
00:13:13,990 --> 00:13:15,260
Take a look at test the.

195
00:13:15,260 --> 00:13:18,980
And artistry has a couple of things that are going to be different for a list.

196
00:13:19,200 --> 00:13:23,010
Here's Elle and we're displaying L which is one through 10.

197
00:13:23,010 --> 00:13:24,910
You can see right here is test three.

198
00:13:25,220 --> 00:13:27,570
And right there is the one through the 10.

199
00:13:27,570 --> 00:13:30,420
Now what we're saying is let's resize this to five.

200
00:13:30,530 --> 00:13:31,790
So what happens here.

201
00:13:31,850 --> 00:13:33,380
What's going to resize it to five.

202
00:13:33,380 --> 00:13:36,880
Basically it's going to stop it right here and all this is gone.

203
00:13:36,890 --> 00:13:42,340
So at this point if I display Well you can see one two three four five here in the output.

204
00:13:42,360 --> 00:13:43,860
Now this is interesting.

205
00:13:43,950 --> 00:13:49,660
If I resize it to 10 what's going to happen well it says remember right now it's 1 2 3 4 and 5.

206
00:13:49,770 --> 00:13:52,340
So he's going to resize it to five new elements.

207
00:13:52,350 --> 00:13:53,910
One two three four five.

208
00:13:54,030 --> 00:13:55,890
But what's it going to put in there.

209
00:13:56,080 --> 00:14:01,140
What it's going to do it's going to call the default initialize for each one of those objects for integers

210
00:14:01,140 --> 00:14:02,880
and for primitive types it's 0.

211
00:14:03,000 --> 00:14:05,900
So you're going to get something like that when I display it.

212
00:14:05,910 --> 00:14:07,170
That's exactly what we see.

213
00:14:07,170 --> 00:14:09,560
One two three four five and five zeros.

214
00:14:09,630 --> 00:14:13,140
But when we have object types it's a whole different story.

215
00:14:13,200 --> 00:14:19,850
In this case that what I'm doing have created persons is a list of person objects right now it's empty.

216
00:14:20,310 --> 00:14:22,110
But if I resize it to five.

217
00:14:22,110 --> 00:14:24,050
Now I've got five person objects.

218
00:14:24,060 --> 00:14:25,630
Which ones does it create.

219
00:14:25,680 --> 00:14:28,300
It uses the default constructor for them.

220
00:14:28,320 --> 00:14:33,830
So if I display it you can see those strings that I talked about earlier in the person class.

221
00:14:33,930 --> 00:14:36,140
Unknown age 0 unknown age 0.

222
00:14:36,210 --> 00:14:37,800
It's exactly what's happening.

223
00:14:37,800 --> 00:14:42,120
This is one of the things that I talked about I think at the beginning of this section was it's very

224
00:14:42,120 --> 00:14:47,100
important when we use the ACL that we overload the less than that we overload the equality operator

225
00:14:47,100 --> 00:14:48,990
that we overload the default constructor.

226
00:14:48,990 --> 00:14:55,440
This is why this is a real important reason why if we provide an overloaded constructor and we don't

227
00:14:55,440 --> 00:14:59,880
provide the default constructor this will error out because the default constructor wouldn't be provided

228
00:14:59,880 --> 00:15:07,160
for us so we've got to be sure that we we've got all our bases covered there tests for let's have a

229
00:15:07,160 --> 00:15:12,080
list here of integers 1 through 10 and display it you can see test for is right on here I should scroll

230
00:15:12,080 --> 00:15:16,260
that up just a little bit so it's a little easier to see if we up.

231
00:15:16,280 --> 00:15:17,930
So here's test for.

232
00:15:17,930 --> 00:15:20,010
Those are my integers 1 through 10.

233
00:15:20,010 --> 00:15:21,470
That's where I'm at right here.

234
00:15:21,500 --> 00:15:26,780
Now I've got an iterator and obviously I'm using auto But obviously if I had to declare that the long

235
00:15:26,780 --> 00:15:29,200
way it would be stood list.

236
00:15:29,270 --> 00:15:30,600
Iterator I.

237
00:15:30,770 --> 00:15:34,700
But in this case the compiler is deducing it based on the return value of the find.

238
00:15:34,700 --> 00:15:35,410
So what am I doing.

239
00:15:35,410 --> 00:15:40,890
I'm finding that 5 in L from beginning to end.

240
00:15:41,150 --> 00:15:46,180
So my iterator I-T is going to be pointing to 5.

241
00:15:46,180 --> 00:15:48,850
Now I know it's there but it's good practice to check.

242
00:15:48,860 --> 00:15:55,220
So if I-T is not equal to the end that means I found it and what I want to do is I want to call the

243
00:15:55,220 --> 00:16:02,210
insert method on the list L and I want insert a 100 where I need the iterator that stop.

244
00:16:02,240 --> 00:16:06,990
This is really important with lists both list and forward list.

245
00:16:07,010 --> 00:16:11,990
So what do I need that iterator the iterator is pointing to the 5 in the case of a list it's going to

246
00:16:11,990 --> 00:16:17,990
insert the 100 before the iterator so it's going to stick 100 right in there.

247
00:16:18,140 --> 00:16:23,390
And then when I display the list you can see right here that the 100 has been inserted between the four

248
00:16:23,390 --> 00:16:29,800
and the 5 right to the left or previous or before the iterator everyone to think about it.

249
00:16:30,230 --> 00:16:36,310
In this case I've got L2 which is a list from 1000 2000 3000.

250
00:16:36,620 --> 00:16:42,920
And now what I'm doing I'm inserting into L member L is this guy right here now it's male is one two

251
00:16:42,920 --> 00:16:48,760
three four then 100 and then five six seven eight nine and ten.

252
00:16:48,770 --> 00:16:50,160
That's L right here.

253
00:16:51,380 --> 00:16:56,030
So what I'm doing is I mean I remember my iterator still pointing to the five it's not invalid because

254
00:16:56,030 --> 00:16:59,500
I haven't deleted it so my iterator is still pointing right here.

255
00:16:59,510 --> 00:17:06,820
So what I want to do is I want to say I want to insert into El starting at that iterator right here

256
00:17:06,820 --> 00:17:11,950
to the left of the iterator What do I want insert I want I insert the entire list L2 from beginning

257
00:17:11,950 --> 00:17:12,510
to end.

258
00:17:12,550 --> 00:17:21,160
So do you think that's going to do right in here it's going to put in 1000 2000 and 3000 and it's in

259
00:17:21,160 --> 00:17:23,820
a do that super efficiently.

260
00:17:23,890 --> 00:17:27,350
Then when I display this here again you can see what's happening.

261
00:17:27,370 --> 00:17:28,840
One two three four.

262
00:17:28,960 --> 00:17:31,720
There's your Hundred and then 1000 2000 3000.

263
00:17:31,720 --> 00:17:37,190
And then the five Where's iterator pointing to now still pointing to the five it's still valid.

264
00:17:38,020 --> 00:17:44,140
OK let me clear this because as a lot of stuff here and this is the advanced function that I was talking

265
00:17:44,140 --> 00:17:48,110
about this is in the iterator header file.

266
00:17:48,130 --> 00:17:53,440
So what we can do here is we can advance any iterator positive or negative assuming it's a bi directional

267
00:17:53,440 --> 00:17:55,620
iterator in this case it is.

268
00:17:55,620 --> 00:17:58,630
There's my iterator and I want to advance at minus 4.

269
00:17:58,630 --> 00:18:01,730
So remember iterator was pointing to the 5 right.

270
00:18:01,930 --> 00:18:03,950
So now the 5 is over here.

271
00:18:04,300 --> 00:18:05,700
I want to move it four to the left.

272
00:18:05,740 --> 00:18:10,040
One two three four it's going to be pointing to the hundred.

273
00:18:10,200 --> 00:18:14,370
That's what the advance lets me do I can also do positive for obviously are positive 2 or anything I

274
00:18:14,370 --> 00:18:15,060
want.

275
00:18:15,060 --> 00:18:17,180
So in this case it's going to be pointing to the 100.

276
00:18:17,280 --> 00:18:24,850
If I display what is pointing to there's 100 and then I can say l dot erase I t.

277
00:18:24,890 --> 00:18:29,700
What's that going to do it's going to erase the element that the iterators point to that I'm displaying

278
00:18:29,700 --> 00:18:31,980
it again you could see the 100 is gone.

279
00:18:32,190 --> 00:18:34,680
At this point my iterator becomes invalid.

280
00:18:34,680 --> 00:18:36,690
I just deleted the element it was pointing to.

281
00:18:36,690 --> 00:18:39,740
So don't use that iterator again if you need it.

282
00:18:39,780 --> 00:18:42,540
Reset it ok.

283
00:18:42,600 --> 00:18:43,670
Test four is good.

284
00:18:43,670 --> 00:18:49,910
Now let's take a look at test five in test five we'll do a couple of things to test five just has a

285
00:18:49,910 --> 00:18:53,210
couple of pieces of input you'll see here it's actually waiting for me to type something in.

286
00:18:53,210 --> 00:18:56,100
So we'll do that in a second in test five.

287
00:18:56,110 --> 00:19:02,480
I've got Stooges which is a list of person objects and initializing it to Larry Moe and Curly and I'm

288
00:19:02,480 --> 00:19:09,350
displaying them that remember the person class overloaded the stream insertion OPERATOR So that's what's

289
00:19:09,350 --> 00:19:15,250
happening here and I'm displaying them that's what I've got right here Larry Moe and Curly.

290
00:19:15,480 --> 00:19:17,100
Now I've got a couple of variables here.

291
00:19:17,100 --> 00:19:21,420
Name and age and what I want to do is I want to ask the user to enter the name of the next stooge and

292
00:19:21,420 --> 00:19:28,260
then enter their age and let's do that right now when to type in right in here I'm just going to type

293
00:19:28,260 --> 00:19:33,650
in James and let's say that James is 50 years old.

294
00:19:33,990 --> 00:19:41,560
Now when I press enter what's going to happen is we're coming right in here online 1:30 right here and

295
00:19:41,590 --> 00:19:45,220
I'm in placing back and I remember here I'm not creating an object here.

296
00:19:45,220 --> 00:19:49,000
I'm letting the list create the object for me that's what the emplace does.

297
00:19:49,000 --> 00:19:53,800
So what's going to happen is James 50 is going to be passed into this method.

298
00:19:53,800 --> 00:19:57,780
This method will create that stooge object and inserted at the back for me.

299
00:19:57,790 --> 00:20:03,880
So when I press Enter I'll display Stooges and I should see James 50 at the back right in here right

300
00:20:03,880 --> 00:20:04,900
after Curly.

301
00:20:04,930 --> 00:20:05,770
So let's do that.

302
00:20:05,770 --> 00:20:06,880
Let me come over here.

303
00:20:06,910 --> 00:20:15,580
I'll press enter and you can see now that we've got Larry Frank Moe Curly and James right at the back.

304
00:20:15,580 --> 00:20:17,280
Super efficient.

305
00:20:17,600 --> 00:20:21,890
And then the last thing we want to do here is we want to insert Frank before Mo.

306
00:20:22,460 --> 00:20:22,990
OK.

307
00:20:23,020 --> 00:20:24,750
So where is Mo I need to find it.

308
00:20:24,760 --> 00:20:27,500
So I need an iterator that's going to point to Mo.

309
00:20:27,840 --> 00:20:32,730
I'm a search stooges from beginning to end and I'm looking for that object.

310
00:20:33,890 --> 00:20:35,630
What's it going to use.

311
00:20:35,730 --> 00:20:38,720
Operator equality operator which I've overloaded.

312
00:20:38,930 --> 00:20:41,920
So it's going to look from Moe 25 mo 25 is right here.

313
00:20:41,920 --> 00:20:43,370
I know it's there.

314
00:20:43,370 --> 00:20:46,160
So my iterator if it's not equal is to just then I found it.

315
00:20:46,160 --> 00:20:51,620
So what I'm going to do is I'm going to insert at that iterator before the iterator everything on the

316
00:20:51,620 --> 00:20:56,690
list happens before the iterator I'm going to insert Frank 18 and then I want to display Stooges again

317
00:20:57,050 --> 00:21:01,010
and you can see right here Frank 18 is right before the mo.

318
00:21:01,860 --> 00:21:04,290
Which is exactly as I expected.

319
00:21:04,290 --> 00:21:04,660
All right.

320
00:21:04,680 --> 00:21:09,150
And then the last test is test six and this one's pretty cool.

321
00:21:09,150 --> 00:21:11,670
What we're doing is sorting real real simple.

322
00:21:11,670 --> 00:21:18,360
So in this case I've got Stooges is a list of persons and I've got Larry Moe and Curly.

323
00:21:18,670 --> 00:21:20,100
I'm displaying Stooges.

324
00:21:20,120 --> 00:21:23,900
And you can see it right here Larry Moe and Curly that I'm sorting it.

325
00:21:23,940 --> 00:21:26,480
I'm saying Stooges not sort of displaying it again.

326
00:21:26,490 --> 00:21:27,490
And look what happened.

327
00:21:28,300 --> 00:21:37,200
Curly Larry Moe what operators being used here operator less than we overloaded that and what we're

328
00:21:37,200 --> 00:21:41,850
doing and our operator less than let me go back in case you didn't don't remember the our operator less

329
00:21:41,850 --> 00:21:43,800
than it's comparing ages.

330
00:21:44,130 --> 00:21:47,420
So here we've got 17 18 and 25.

331
00:21:47,430 --> 00:21:51,800
That's how we decided that we were going to sort out we're not sorting by name.

332
00:21:51,810 --> 00:21:56,470
We could have we could have written this name but we decided oh well let's sort by age.

333
00:21:56,550 --> 00:21:58,750
So this is going to sort by that.

334
00:21:58,850 --> 00:21:59,140
OK.

335
00:21:59,160 --> 00:22:04,220
So that's it in the next video we'll do a challenge well we'll simulate a music player using a link

336
00:22:04,260 --> 00:22:04,690
but it's.
