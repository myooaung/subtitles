WEBVTT
1
00:00:05.510 --> 00:00:11.480
Next let's look at the shared pointer the shared pointer is a smart pointer that provides a shared ownership

2
00:00:11.480 --> 00:00:13.290
model of the heap object.

3
00:00:13.580 --> 00:00:18.350
So like a unique pointer a shared pointer points to an object on the heap.

4
00:00:18.350 --> 00:00:24.010
However unlike a unique pointer that heap object may be shared among many shared pointers.

5
00:00:24.260 --> 00:00:30.560
So we can have one heap object referenced by multiple shared pointers that manage it unlike unique pointers

6
00:00:30.650 --> 00:00:33.180
shared pointers can be copied and assigned.

7
00:00:33.200 --> 00:00:39.230
This is exactly how we make them access the same he objects for efficiency shared pointers also support

8
00:00:39.230 --> 00:00:45.200
move semantics while unique pointers can be used to allocate arrays of objects on the heap shared pointers

9
00:00:45.200 --> 00:00:47.220
do not support this by default.

10
00:00:47.570 --> 00:00:53.240
So you might be thinking we can have multiple shared pointers all referencing the same heap object.

11
00:00:53.240 --> 00:00:56.110
So how do we know when that object needs to be destroyed.

12
00:00:56.180 --> 00:00:57.970
And that's a great question.

13
00:00:57.980 --> 00:01:00.370
There are different ways it does can be accomplished.

14
00:01:00.380 --> 00:01:03.530
The most common technique is to use reference counting.

15
00:01:03.530 --> 00:01:04.640
The idea is simple.

16
00:01:04.670 --> 00:01:09.890
Every time we instantiate a shared pointer object and have it point or reference to the heap object

17
00:01:10.280 --> 00:01:15.950
we increment to counter this counter simply has the number of shared pointers referencing that heap

18
00:01:15.950 --> 00:01:21.180
object when the reference count becomes zero that we know nothing is referring to the heap object.

19
00:01:21.200 --> 00:01:23.120
And it can be safely destroyed.

20
00:01:23.570 --> 00:01:25.940
It's a pretty simple but effective model.

21
00:01:25.940 --> 00:01:28.800
But it does introduce some overhead to the process.

22
00:01:28.800 --> 00:01:34.550
However the overhead introduces in most cases not a big deal compared to the benefits provided by having

23
00:01:34.550 --> 00:01:37.190
the system manage the shared objects for us.

24
00:01:37.190 --> 00:01:40.400
Let's see how we can declare and used shared pointers.

25
00:01:40.850 --> 00:01:45.260
First we'll see the same technique we used when we created unique pointers and then we'll see a more

26
00:01:45.260 --> 00:01:49.080
efficient technique using the make shared function.

27
00:01:49.310 --> 00:01:53.810
Here you can see that we're declaring P1 to be a shared pointer to an integer.

28
00:01:53.840 --> 00:01:58.430
We're also initializing it to point to a new integer that we create on the heap and that integer has

29
00:01:58.430 --> 00:02:00.690
been initialized to 100.

30
00:02:00.760 --> 00:02:03.530
Now P one owns the object on the heap.

31
00:02:03.700 --> 00:02:07.900
When one goes out of scope the INT on the heap will be deallocated.

32
00:02:07.930 --> 00:02:11.260
That is unless other shared pointers are referencing it.

33
00:02:11.410 --> 00:02:14.080
You don't need to call delete with a shared pointer.

34
00:02:14.500 --> 00:02:20.260
Now as far as using the shared pointer the syntax is pretty much like a raw pointer or unique pointer.

35
00:02:20.380 --> 00:02:24.410
You can see that if we dereference P. one we get the integer that it points to.

36
00:02:24.460 --> 00:02:27.190
In this case 100 and we display it.

37
00:02:27.190 --> 00:02:30.440
We can also modify the integer 1.2 in a similar manner.

38
00:02:30.730 --> 00:02:36.070
In this case since we only have one shared pointer referencing the integer on the heap when P one goes

39
00:02:36.070 --> 00:02:42.490
out of scope the integer will be deallocated from the heap before we see how we can create other shared

40
00:02:42.490 --> 00:02:45.670
pointers and have them reference the same heap object.

41
00:02:45.670 --> 00:02:51.790
Let's look at a very useful method in the shared pointer class called use count the use count method

42
00:02:52.000 --> 00:02:57.100
returns the number of shared pointer objects that are currently referring to the heap optics.

43
00:02:57.520 --> 00:03:04.450
In this example we'll have two shared pointers P1 and P2 that both reference the same heap object.

44
00:03:04.690 --> 00:03:10.050
So first we declare P1 as a shared pointer that will manage in it to draw the heap and we initialize

45
00:03:10.050 --> 00:03:11.560
at it to get to 100.

46
00:03:11.560 --> 00:03:15.590
Now we call the use count method on P1 and we see that it displays 1.

47
00:03:15.850 --> 00:03:22.070
That's what we expected since p 1 is the only shared point we're referencing the integer on the heap.

48
00:03:22.070 --> 00:03:27.890
Now we create another shared pointer P2 and we use the copy constructor to initialize it so that it

49
00:03:27.890 --> 00:03:30.650
refers to the same object as P1.

50
00:03:30.650 --> 00:03:37.850
Now we call the use count on P1 and we display 2 since both P1 and P2 are now referencing that same

51
00:03:37.850 --> 00:03:38.510
integer.

52
00:03:38.690 --> 00:03:44.390
But notice that if we call use count on P2 we'll also see a two which makes perfect sense.

53
00:03:44.390 --> 00:03:47.170
Now suppose that I call reset on P1.

54
00:03:47.420 --> 00:03:53.000
Recall that with a unique pointer this destroyed the heap object and set the unique pointer to NULL.

55
00:03:53.000 --> 00:03:58.610
However with shared pointers this decrements the use count by one and sets p one to know.

56
00:03:58.760 --> 00:04:00.880
Now the use count for P1 is zero.

57
00:04:00.920 --> 00:04:03.080
And the use count for P2 was 1.

58
00:04:03.350 --> 00:04:07.940
So just because we reset p 1 does it mean that we deallocate the integer on the heap.

59
00:04:07.940 --> 00:04:08.450
We can't.

60
00:04:08.450 --> 00:04:11.720
In this case because P2 is still referring to it.

61
00:04:11.890 --> 00:04:17.320
Finally when P2 goes out of scope the integer on the heap is deallocated since it's no longer being

62
00:04:17.320 --> 00:04:18.310
referenced.

63
00:04:18.340 --> 00:04:24.250
So you can see that reference counting is pretty simple in concept of course Sharepoint pointers also

64
00:04:24.250 --> 00:04:26.830
allows to point to user defined types.

65
00:04:26.830 --> 00:04:31.900
In this example we're creating a shared pointer that will point to an account object and we initialize

66
00:04:31.900 --> 00:04:34.270
it to point to the Larry account.

67
00:04:34.520 --> 00:04:38.390
We declare a count as the template argument and the shared pointer declaration.

68
00:04:38.420 --> 00:04:44.540
What this says is that the shared pointer P1 will manage an account object on the heap and we're creating

69
00:04:44.540 --> 00:04:50.920
that account object in the initializer list for P1 now we can use this pointer as we would a raw pointer

70
00:04:51.250 --> 00:04:56.350
we can dereference it to get the account object as well as access the account object member methods

71
00:04:56.590 --> 00:04:58.980
via the member selection or error operator.

72
00:04:59.230 --> 00:05:04.740
And again when P one goes out of scope the heap storage associated with the account object is deallocated.

73
00:05:05.020 --> 00:05:11.620
As you can see this code looks exactly the same as the code that we use with the unique pointer unlike

74
00:05:11.620 --> 00:05:16.530
unique pointers shared pointers can be copied assigned and moved.

75
00:05:16.600 --> 00:05:22.480
In this example we create a vector that will contain shared pointers to integers and we also create

76
00:05:22.480 --> 00:05:28.180
PCR which is a shared pointer to an integer and it points to an integer on the heap which has been initialized

77
00:05:28.180 --> 00:05:29.770
to 100.

78
00:05:29.890 --> 00:05:33.010
We can now push back that shared pointer to the vector.

79
00:05:33.040 --> 00:05:38.320
Remember we couldn't do this with a unique pointer since they don't allow copying but we can do it with

80
00:05:38.320 --> 00:05:39.780
shared pointers.

81
00:05:39.790 --> 00:05:44.020
Also notice that if we display the use count for pointer we'll see a 2.

82
00:05:44.050 --> 00:05:49.510
This is because that integer on the heap is being referenced from pointer as well as from the shared

83
00:05:49.510 --> 00:05:51.530
pointer in the vector.

84
00:05:51.720 --> 00:05:56.640
Now when the vector and pointer both go out of scope we're sure that the last one referring to that

85
00:05:56.670 --> 00:05:58.790
integer on the heap will clean it up.

86
00:05:58.920 --> 00:06:03.330
There's no need to call delete or to figure out when and from where to call delete.

87
00:06:03.360 --> 00:06:04.800
This is a huge deal.

88
00:06:04.890 --> 00:06:08.940
It makes writing this kind of code so much easier and less error prone.

89
00:06:08.940 --> 00:06:11.600
Now let's see a better way to initialize shared pointers.

90
00:06:12.330 --> 00:06:18.280
The make unique function was introduced in plus 14 but to make shared function has been around since

91
00:06:18.280 --> 00:06:25.300
C plus plus 11 to make shared function returns a shared pointer of the specified type and it allows

92
00:06:25.300 --> 00:06:29.770
us to pass initialization values into the constructor for the managed object.

93
00:06:29.770 --> 00:06:32.420
This is the preferred way to create shared pointers.

94
00:06:32.440 --> 00:06:37.670
Not only do we not have to use the new keyword but the compiler will generate much more efficient code.

95
00:06:37.780 --> 00:06:43.210
Since remember the compiler has to generate a data structure that holds information about the reference

96
00:06:43.210 --> 00:06:43.710
count.

97
00:06:43.840 --> 00:06:47.940
The raw pointer the actual heap object and other data as well.

98
00:06:48.160 --> 00:06:52.090
So this creates all of this in one shot when the pointer is initialized.

99
00:06:52.120 --> 00:07:00.040
In this example we create three shared pointers P1 P2 and P3 P1 is created using make shared and we

100
00:07:00.040 --> 00:07:03.310
reference an integer on the heap and we initialize it to 100.

101
00:07:03.310 --> 00:07:08.710
Now we can create P2 as a shared pointer to an int and use its copy constructor to initialize it to

102
00:07:08.710 --> 00:07:16.320
p one p one and p to refer to the same integer on the heap and it's use count will be to the third pointer

103
00:07:16.320 --> 00:07:23.400
P3 is initialized as empty so it doesn't point to any shared object yet but it is initialized.

104
00:07:23.400 --> 00:07:29.790
It's no so there's no chance that we can have an uninitialized or a wild pointer when we use smart pointers.

105
00:07:29.910 --> 00:07:32.400
Then we assign P to P3.

106
00:07:32.460 --> 00:07:37.750
Now P1 also refers to the shared integer in our use count increases to three.

107
00:07:37.770 --> 00:07:38.670
All three pointers.

108
00:07:38.670 --> 00:07:43.990
Now go out of scope which shared pointers responsible for cleaning up the heap storage.

109
00:07:44.370 --> 00:07:46.500
Well it's the last one that references it.

110
00:07:46.620 --> 00:07:51.650
In this case it will be P1 since P2 and P3 will be destroyed before P1.

111
00:07:51.780 --> 00:07:54.950
But the point is that you don't have to worry about it.

112
00:07:54.980 --> 00:08:00.360
So now let's head over to the idea and we'll see some examples of using shared pointers in life code.

113
00:08:00.800 --> 00:08:07.760
Ok so I'm back in the IDM in the section 17 workspace in the shared pointers project this project has

114
00:08:07.760 --> 00:08:08.810
three sections.

115
00:08:08.900 --> 00:08:14.210
The first section is all about using a shared pointer to an integer and sharing pointers so that we

116
00:08:14.210 --> 00:08:16.710
can see these reference counts moving up and down.

117
00:08:17.000 --> 00:08:22.370
The second section we're going to create test objects now and then the third section will use vectors.

118
00:08:22.370 --> 00:08:26.870
So let's start with this section first and I want to walk through it with the debugger so you can actually

119
00:08:26.870 --> 00:08:28.150
see what's going on.

120
00:08:28.220 --> 00:08:30.660
So I'm going to debug this program.

121
00:08:30.740 --> 00:08:33.170
OK so we're going to start right here on 931.

122
00:08:33.200 --> 00:08:38.840
You can see what we're doing here we're creating P1 as a shared pointer to an integer and we're setting

123
00:08:38.840 --> 00:08:40.490
that integer to 100.

124
00:08:40.490 --> 00:08:48.240
Now if I step through that you can see the one over here I'll refresh and you can see that P1 has a

125
00:08:48.240 --> 00:08:52.140
reference count of one you could see it right there I know it's kind of small but I couldn't make this

126
00:08:52.140 --> 00:08:53.930
font any bigger on this window here.

127
00:08:54.090 --> 00:08:55.570
So there is the counter of one.

128
00:08:55.590 --> 00:09:00.720
So this tells you that P1 is pointing to that shared integer right and that's the only thing pointing

129
00:09:00.720 --> 00:09:02.610
to that shared integer right now.

130
00:09:02.610 --> 00:09:08.760
So on line 32 if I display to use count point for that shared pointer I am going to get one so I'll

131
00:09:08.760 --> 00:09:09.450
execute that.

132
00:09:09.450 --> 00:09:13.680
And you can see appear on the display they use count as one which is actually the same thing we're seeing

133
00:09:13.680 --> 00:09:14.600
right in here.

134
00:09:14.850 --> 00:09:19.380
OK so now on 9:34 we're doing is we're creating P2 in terms of P1.

135
00:09:19.380 --> 00:09:21.210
So that's my copy constructor.

136
00:09:21.210 --> 00:09:22.650
Now we're sharing ownership.

137
00:09:22.650 --> 00:09:25.980
Remember this is one of the things that we could not do with unique pointers.

138
00:09:26.160 --> 00:09:32.550
So in this case then we execute that line and you can see now that P1 and P2 are both referring to that

139
00:09:32.550 --> 00:09:33.360
same storage.

140
00:09:33.360 --> 00:09:39.020
So when I refresh here you'll see that they both have a reference count of two right there.

141
00:09:39.100 --> 00:09:43.830
And so again P1 and P2 are managing that same area in memory.

142
00:09:43.940 --> 00:09:45.470
They have co-ownership.

143
00:09:45.480 --> 00:09:52.670
So at this point when I display the use count we'll see a two now in line 37 I'm resetting p 1.

144
00:09:52.680 --> 00:09:53.540
What is that going to do.

145
00:09:53.580 --> 00:09:56.100
Well it's going to set P 1 point nowhere.

146
00:09:56.190 --> 00:10:00.960
So we're going to have that set to NULL pointer and Peter's reference count will go down by 1 because

147
00:10:00.960 --> 00:10:05.260
now P2 is the only shared pointer that owns that memory.

148
00:10:05.310 --> 00:10:07.090
So let's execute that line.

149
00:10:08.380 --> 00:10:16.180
And let's refresh over here and you can see now that P1 is a null pointer basically and p to its reference

150
00:10:16.180 --> 00:10:17.920
count went down to 1.

151
00:10:17.920 --> 00:10:23.620
So if we display these last two statements we'll see that P ones use count to 0 and P2 is used count

152
00:10:23.860 --> 00:10:27.030
is 1 and the program is complete now.

153
00:10:27.460 --> 00:10:29.210
OK so now let's do part 2.

154
00:10:30.060 --> 00:10:33.520
Ok so now let's execute the second section of this project.

155
00:10:33.720 --> 00:10:39.060
You can see the second section starts here on line 41 f commented out the section one that we just ran.

156
00:10:39.060 --> 00:10:43.140
So let me walk through this with the debugger so we can see what's going on again with these reference

157
00:10:43.140 --> 00:10:43.830
counts.

158
00:10:43.980 --> 00:10:46.610
OK so we're here on line 42 and we'll step through that.

159
00:10:46.610 --> 00:10:49.800
All that's doing is creating PCR as a variable.

160
00:10:49.830 --> 00:10:55.560
It's a shared pointer to a test object and we're using make shared this time to create that test object.

161
00:10:55.680 --> 00:11:02.190
So I step through that and you can see that right now when I refresh my local variables PNTR has a reference

162
00:11:02.190 --> 00:11:03.260
count of 1.

163
00:11:03.270 --> 00:11:07.750
So we've got one reference to that shared test object on the heat.

164
00:11:08.040 --> 00:11:11.430
Now we're going to call this function and we're going to pass TR into it.

165
00:11:11.490 --> 00:11:16.150
This function expects a shared pointer to a test and it expects it by value.

166
00:11:16.320 --> 00:11:19.950
So what we expect is for it to make a copy of that shared pointer.

167
00:11:19.980 --> 00:11:24.870
Remember we're making a copy of the shared pointer object not of the test object on the heap that's

168
00:11:24.870 --> 00:11:26.720
important to understand the difference there.

169
00:11:26.730 --> 00:11:29.530
So let's walk through this.

170
00:11:29.610 --> 00:11:34.800
Now we're in the function you can see we're right up here on line 23 at the top of the screen and right

171
00:11:34.800 --> 00:11:40.450
now we've made a copy so if you look at p p as a shared pointer to that same test objects we expect

172
00:11:40.470 --> 00:11:43.600
PS use count to be two because we just created a copy.

173
00:11:43.770 --> 00:11:47.310
So let's take a look at that and you can see the use count is 2.

174
00:11:47.340 --> 00:11:51.360
So now when P goes out of scope in this function what happens is that the reference count to get is

175
00:11:51.360 --> 00:11:52.170
reduced.

176
00:11:52.170 --> 00:11:53.840
So let's take a look at that.

177
00:11:53.850 --> 00:11:58.000
Now we're back here right back to where we were we're online 44.

178
00:11:58.200 --> 00:12:02.180
And if I refresh you can see that pizzicato now is back down to 1.

179
00:12:02.310 --> 00:12:07.050
So we temporarily increase that reference count while we were in that function because we just made

180
00:12:07.050 --> 00:12:10.670
a copy of something else that using that same resource.

181
00:12:10.680 --> 00:12:16.730
So now we print out to use count for PCR which we expect to be 1 and that's exactly what this plays.

182
00:12:16.740 --> 00:12:20.730
Now notice what happens I've created a block here and then there's another block here.

183
00:12:20.730 --> 00:12:25.910
This just establishes scope so that we can see these inner shared pointers going in and out of scope.

184
00:12:25.920 --> 00:12:31.740
So in this case we've got PTO are one and we're creating peach or one based on.

185
00:12:31.730 --> 00:12:36.910
So now we've got Peter and Peter you are one both pointing to that shared resource.

186
00:12:36.990 --> 00:12:38.710
So let me execute that line.

187
00:12:38.940 --> 00:12:45.030
And what we expect now is the use COUNT TO BE 2 and I'll refresh here and you can see that the count

188
00:12:45.120 --> 00:12:49.860
right there is two for both of them which is exactly what we expect it will display to.

189
00:12:49.860 --> 00:12:54.960
Now right over here on the output what happens now is we create another block.

190
00:12:54.960 --> 00:12:59.730
So we're creating P-T or two also referring to that same test object.

191
00:12:59.730 --> 00:13:01.740
So now we've got these three pointers right.

192
00:13:01.740 --> 00:13:06.350
These three shared pointer objects all referring to the same managed object on the heap.

193
00:13:06.450 --> 00:13:15.990
So if I execute this line here on 9:49 what we have is we've got TTR Peachi are one or two all with

194
00:13:15.990 --> 00:13:19.200
a reference count of three which is exactly what we expect.

195
00:13:19.290 --> 00:13:20.760
And we can display that reference count.

196
00:13:20.760 --> 00:13:22.880
You can see the three red here.

197
00:13:22.920 --> 00:13:25.840
Now what we'll do is we'll reset pointer right.

198
00:13:25.860 --> 00:13:30.580
So this pointer right here will be no doubt which means that that will become No.

199
00:13:30.600 --> 00:13:32.940
And then the reference count for the other two pointers.

200
00:13:32.930 --> 00:13:36.080
Peter you are one and Peter or two will go down to two.

201
00:13:36.150 --> 00:13:38.490
Since Now there's one less shared pointer.

202
00:13:38.880 --> 00:13:47.920
So let's execute that line and refresh and you can see that not Peachi is no Peter you are one and you

203
00:13:47.930 --> 00:13:52.290
are to have a reference to this is we expect.

204
00:13:52.410 --> 00:13:52.700
All right.

205
00:13:52.710 --> 00:13:57.820
So now TTR is going to go out of scope right now and it just did.

206
00:13:57.820 --> 00:14:03.590
So now we're going to print out the use count for P-T are in this case which will be zero.

207
00:14:03.730 --> 00:14:06.190
Right because we reset it.

208
00:14:06.190 --> 00:14:11.100
OK so now let's walk through this one more time and we're right here right now and let's step through

209
00:14:11.100 --> 00:14:12.770
this one more time on this last statement.

210
00:14:12.770 --> 00:14:14.640
And what's the use count for PCR.

211
00:14:14.790 --> 00:14:16.100
Well let's refresh here.

212
00:14:16.110 --> 00:14:19.020
You can see that Peter's use count is now zero right now.

213
00:14:19.050 --> 00:14:21.980
Not referring to any managed object.

214
00:14:22.230 --> 00:14:23.340
So that's it.

215
00:14:23.340 --> 00:14:24.240
That's part 2.

216
00:14:24.360 --> 00:14:29.280
We'll do next is part 3 where we'll create a couple of shared pointer which will create three shared

217
00:14:29.280 --> 00:14:34.550
pointers to account objects and then we'll put them on a vector and print out the vector.

218
00:14:34.550 --> 00:14:39.980
OK so let's wrap up this video by going over the third section of the Sharepoint project.

219
00:14:39.980 --> 00:14:45.980
In this case you can see we're starting on line 58 and what we're doing is we're creating 3 account

220
00:14:45.980 --> 00:14:49.230
pointers and these are shared pointers to account objects.

221
00:14:49.280 --> 00:14:52.540
We're using the same account framework that we've been using all along.

222
00:14:52.580 --> 00:14:54.880
This is the one that's using dynamic polymorphism.

223
00:14:54.920 --> 00:14:59.720
So we're coming at this with a base class pointer right here and we're using stood make shared here

224
00:14:59.720 --> 00:15:01.630
we're creating a trust account Larry.

225
00:15:01.640 --> 00:15:02.930
We're creating a checking account.

226
00:15:02.930 --> 00:15:05.590
So we're creating a savings account Kerley.

227
00:15:05.630 --> 00:15:06.440
So there you go.

228
00:15:06.470 --> 00:15:11.480
At this point we've created three objects then what we'll do is we'll take those three shared pointers

229
00:15:11.750 --> 00:15:13.390
and we'll put them in a vector.

230
00:15:13.400 --> 00:15:15.300
So notice this vector declaration here.

231
00:15:15.320 --> 00:15:22.640
A vector is a vector of shared pointers to account objects move it accounts and will simply push back.

232
00:15:22.640 --> 00:15:24.570
A.S.C. one two and three.

233
00:15:24.620 --> 00:15:30.050
Remember we're not pushing a count objects we're pushing shared pointer objects that point to account

234
00:15:30.100 --> 00:15:33.350
objects and then which is loop through that vector and display them.

235
00:15:33.560 --> 00:15:37.700
OK so let's step through the debugger with this example and see exactly what's happening.

236
00:15:37.700 --> 00:15:43.450
OK so here we are we're on 959 but we want to do is we want to create those three shared pointers.

237
00:15:43.490 --> 00:15:45.880
So let's do that we'll step through the first one.

238
00:15:45.880 --> 00:15:52.510
The second one and the third one refresh my screen here and you can see that account 1 is a shared pointer

239
00:15:52.520 --> 00:15:56.600
with the reference count of one account two is the same and count three is the same.

240
00:15:56.610 --> 00:16:02.600
So each one of them is pointing to its own managed object right in one case it's a trust account a checking

241
00:16:02.600 --> 00:16:04.300
account and a savings account.

242
00:16:04.550 --> 00:16:09.500
Now what we're going to do is we're going to instantiate that vector of shared pointers to accounts

243
00:16:09.830 --> 00:16:12.690
and we'll do that right now step through that one line right now.

244
00:16:13.190 --> 00:16:14.510
And there it is.

245
00:16:14.510 --> 00:16:16.040
There's nothing in there right now.

246
00:16:16.100 --> 00:16:21.240
Now what we want to do is we want to add those three shared pointers to the vector.

247
00:16:21.290 --> 00:16:23.970
Remember A.S.C. 1 2 and 3 are shared pointers.

248
00:16:23.980 --> 00:16:28.270
They're not accounts they're not raw pointers they're shared pointers to accounts.

249
00:16:28.310 --> 00:16:32.420
So our vector holds shared pointers to accounts that's how we declared it.

250
00:16:32.430 --> 00:16:38.000
So what's interesting here is remember these guys right now all A.S.C. one two and three all have a

251
00:16:38.000 --> 00:16:39.260
reference count of 1.

252
00:16:39.500 --> 00:16:42.890
But when we add them to the vector the vector is going to make a copy.

253
00:16:43.310 --> 00:16:50.330
So now we have shared ownership A.S.C. one shares the ownership with that trust account with accounts

254
00:16:50.420 --> 00:16:53.030
which has a vector that has a copy of that.

255
00:16:53.230 --> 00:16:53.630
OK.

256
00:16:53.720 --> 00:16:59.570
So let's walk through this step three times through this code here and we've just added all three accounts

257
00:16:59.990 --> 00:17:05.370
refresh and you can see the actual accounts right here.

258
00:17:05.470 --> 00:17:09.910
You can see that it's got three entries and notice the reference count for them too.

259
00:17:10.030 --> 00:17:16.450
If I look at A.S.C. 1 2 and 3 you can see they also have a reference count of two because we made copies.

260
00:17:16.480 --> 00:17:18.820
So now we've got shared ownership again.

261
00:17:18.980 --> 00:17:25.240
A.S.C. 1 2 and 3 have shared ownership to that trust account checking and savings account and so does

262
00:17:25.240 --> 00:17:26.920
the vector.

263
00:17:27.060 --> 00:17:29.040
Now let's loop through this and display them.

264
00:17:29.040 --> 00:17:32.910
So what we're going to do is we're going to use a range base for loop here and we're going to iterate

265
00:17:32.910 --> 00:17:35.440
over the accounts object which is that vector.

266
00:17:35.760 --> 00:17:37.700
And we're just using Konst auto here.

267
00:17:37.710 --> 00:17:40.300
But remember the vector is a vector of shirred pointers.

268
00:17:40.350 --> 00:17:44.070
So this A.S.C. variable is going to be a shared pointer.

269
00:17:44.400 --> 00:17:48.230
And if we want to display the account would just dereference the pointer to get to the account.

270
00:17:48.270 --> 00:17:52.950
So we expect this to print out the trust to have the checking account and a savings account and the

271
00:17:52.950 --> 00:17:54.470
use count as we go.

272
00:17:54.480 --> 00:17:56.080
Now the use count should be 2.

273
00:17:56.100 --> 00:17:58.070
We we're using a reference to a base class.

274
00:17:58.080 --> 00:18:00.630
So the dynamic polymorphism will be just fine.

275
00:18:00.780 --> 00:18:05.870
So let's walk through this and you'll see that we've got right here you can see a peer trust account

276
00:18:05.900 --> 00:18:12.710
Larry and display the reference count for that which we expect to be to right because a CC one is managing

277
00:18:12.710 --> 00:18:18.260
it as well as the vector then we'll executed again we'll see the second object is that checking account

278
00:18:18.560 --> 00:18:23.630
use count as is also 2 and then the last one is the savings account for Kerley and the used count is

279
00:18:23.630 --> 00:18:24.430
2.

280
00:18:24.440 --> 00:18:29.180
Now what happens when the vector goes out of scope what happens when these pointers go out of scope

281
00:18:29.450 --> 00:18:31.470
while the vector is going to go out of scope first.

282
00:18:31.490 --> 00:18:36.560
So it's going to be destroyed but the objects that the trustee account checking account savings account

283
00:18:36.560 --> 00:18:38.720
objects on the heap won't be destroyed yet.

284
00:18:38.880 --> 00:18:43.970
What will happen is that those shared pointers in the vector will be destroyed and then the reference

285
00:18:43.970 --> 00:18:46.660
counts for those three options will go down by one.

286
00:18:46.670 --> 00:18:52.820
Then when A.S.C. three two and one are destroyed that's when the heap storage will be dynamically allocated

287
00:18:53.720 --> 00:18:54.690
and that's it.

288
00:18:54.800 --> 00:18:56.440
That's the program it's done.

289
00:18:56.600 --> 00:19:01.100
You can walk through this and use the debugger you can see the big difference here between using unique

290
00:19:01.100 --> 00:19:03.020
pointers and shared pointers.

291
00:19:03.020 --> 00:19:09.080
When we had a vector of unique pointers that vector exclusively owned those resources here were sharing

292
00:19:09.080 --> 00:19:11.390
those resources and the use cases are different.

293
00:19:11.390 --> 00:19:14.400
Obviously it all depends on what you're trying to accomplish.
