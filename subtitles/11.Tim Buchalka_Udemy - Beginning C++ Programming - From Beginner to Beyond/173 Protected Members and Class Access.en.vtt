WEBVTT
1
00:00:05.430 --> 00:00:12.210
In this video you'll learn how the class member access modifiers work with inheritance We'll also learn

2
00:00:12.210 --> 00:00:16.120
about the protected class member access modifier.

3
00:00:16.230 --> 00:00:21.120
We've already seen the public and private class member access modifiers and we know how they work.

4
00:00:21.450 --> 00:00:28.520
Well C++ provides a third access modifier name protected we define protected data members and methods

5
00:00:28.830 --> 00:00:31.700
exactly as we do public and private.

6
00:00:31.740 --> 00:00:36.550
We provide the protected keyword followed by a colon within the class declaration.

7
00:00:36.870 --> 00:00:43.050
All data and method declarations that follow the protected block will have protected access so protected

8
00:00:43.050 --> 00:00:49.470
class members are accessible to all methods of the class itself protected class members are also accessible

9
00:00:49.470 --> 00:00:53.400
by any derived classes that have been derived from the base class.

10
00:00:53.940 --> 00:01:00.120
However protected class members act like private members so they're not accessible directly from objects

11
00:01:00.120 --> 00:01:03.680
of either the base class or of the derived class.

12
00:01:04.230 --> 00:01:09.750
So you can see the protected class members act very much like private class members unless there's inheritance

13
00:01:09.750 --> 00:01:10.970
involved.

14
00:01:10.980 --> 00:01:16.360
Let's see the syntax once more so we can discuss exactly what's available to the derived class.

15
00:01:18.040 --> 00:01:24.280
You can see that we have a base class and that base class has public protected and private class members

16
00:01:25.270 --> 00:01:31.210
will use three integers a b and c each within a different access modifier to understand how inheritance

17
00:01:31.210 --> 00:01:39.330
works with access modifiers in the next few slides since C++ provides three types of inheritance.

18
00:01:39.400 --> 00:01:44.440
We have to look at each type individually since the access depends on the type of inheritance involved

19
00:01:45.280 --> 00:01:51.520
in the case of public inheritance public class members are inherited and they're also public and the

20
00:01:51.520 --> 00:01:58.570
derived class protected class members are inherited and they're also protected in the derived class.

21
00:01:58.660 --> 00:02:05.690
Finally private class members are also inherited However the derived class does not have access to them.

22
00:02:05.740 --> 00:02:11.500
Any attempt to access base class private class members from the derived class will result in a compiler

23
00:02:11.500 --> 00:02:12.400
error.

24
00:02:12.400 --> 00:02:15.920
This is the most common form of inheritance used in C++.

25
00:02:15.970 --> 00:02:17.930
You can see that the rules make sense.

26
00:02:17.950 --> 00:02:23.530
Public is public protected is protected which means that no matter how deep the class hierarchy goes

27
00:02:23.860 --> 00:02:28.450
the protected class members will be accessible by all derived classes.

28
00:02:28.480 --> 00:02:33.930
Finally something marked as private in the base class implies that the developer of the base class doesn't

29
00:02:33.970 --> 00:02:37.850
want to grant access to those class members.

30
00:02:38.270 --> 00:02:40.280
Now let's look at protected inheritance.

31
00:02:40.460 --> 00:02:43.800
Remember this is not is a inheritance.

32
00:02:43.910 --> 00:02:50.480
The public base class members are protected in the derived class protected base class members are protected

33
00:02:50.480 --> 00:02:56.300
in the derived class and private base class members are not accessible from the derived class.

34
00:02:56.300 --> 00:03:03.560
Finally let's look at private inheritance again private inheritance is not is a inheritance.

35
00:03:03.560 --> 00:03:09.050
So in the case of private inheritance the base class public and protected class members are private

36
00:03:09.050 --> 00:03:15.020
in the derived class and the private class members are not accessible from the derived class.

37
00:03:15.020 --> 00:03:19.790
This may seem confusing and a lot to remember but it's really a very logical approach to inheriting

38
00:03:19.790 --> 00:03:20.950
class members.

39
00:03:21.260 --> 00:03:28.250
As mentioned previously inheritance in C++ is a very complex topic will concentrate on single public

40
00:03:28.250 --> 00:03:30.220
inheritance in this course.

41
00:03:30.230 --> 00:03:35.450
Now let's head over to the IEEE and walk through an example using access modifiers and public inheritance

42
00:03:35.450 --> 00:03:37.100
and life code.

43
00:03:38.030 --> 00:03:39.310
Ok so I'm in the ID.

44
00:03:39.320 --> 00:03:45.800
I'm in the section 15 workspace in the protected members class Access project and what I've got here

45
00:03:45.800 --> 00:03:51.560
is a real simple class similar to the one that we created on the slides where I've got a base class

46
00:03:51.560 --> 00:03:58.340
that I'm declaring right here and it's got a public integer A which I'm initialized to zero and a method

47
00:03:58.340 --> 00:03:59.720
called display.

48
00:03:59.720 --> 00:04:05.580
I've also got a protected integer B and A private integer C both of them initialized to 0.

49
00:04:05.810 --> 00:04:08.500
Now the first thing we'll look at is this line right here.

50
00:04:08.570 --> 00:04:09.600
Line 11.

51
00:04:09.800 --> 00:04:14.960
Obviously member methods have access to everything in the class so there's no problem here accessing

52
00:04:14.990 --> 00:04:19.370
a b or c regardless of their access modifier.

53
00:04:19.370 --> 00:04:20.920
So this will be just fine.

54
00:04:20.930 --> 00:04:25.970
Something else I wanted to note was that if we have a friend of this base class write a friend function

55
00:04:25.970 --> 00:04:31.910
or a friend class that will have access to public protected and private information in this class.

56
00:04:32.270 --> 00:04:37.890
OK so let's look at this first at the object level before we even get into inheritance.

57
00:04:37.910 --> 00:04:44.030
Here we have a base class why don't we create a base object and it's right here on 931 I'm creating

58
00:04:44.030 --> 00:04:48.970
an object called base and its class is based right up here.

59
00:04:49.400 --> 00:04:52.950
We've got those three integers a b and c..

60
00:04:53.090 --> 00:04:54.650
Now that's access them all.

61
00:04:54.650 --> 00:05:05.200
So let's say base a is 100 they stop B is 200 and base C is 300.

62
00:05:05.300 --> 00:05:06.350
Now what do we expect.

63
00:05:06.350 --> 00:05:09.860
Well we've been through this before with public and private.

64
00:05:09.860 --> 00:05:11.570
The only difference here is protected.

65
00:05:11.690 --> 00:05:14.900
We expect based on a to be OK right.

66
00:05:15.140 --> 00:05:16.970
It's public in base.

67
00:05:17.000 --> 00:05:23.930
So the objects have access to it and we expect based C to give us a compiler error.

68
00:05:24.060 --> 00:05:25.610
Right because it's private.

69
00:05:25.640 --> 00:05:28.610
We don't have access to private data from our objects.

70
00:05:28.610 --> 00:05:29.420
This is nothing new.

71
00:05:29.420 --> 00:05:31.080
This is what we've learned all along.

72
00:05:31.430 --> 00:05:36.320
Now there is no inheritance in here right because we're only dealing with that base class right now.

73
00:05:36.320 --> 00:05:38.330
There is no derived class yet here.

74
00:05:38.330 --> 00:05:45.980
So in this case I also expect a compiler error because as far as the compiler is concerned the protected

75
00:05:46.070 --> 00:05:50.090
and private access modifiers really are the same when it comes to objects.

76
00:05:50.090 --> 00:05:55.640
So this object base has no business messing with B or C because they're protected and the other one

77
00:05:55.640 --> 00:05:56.350
is private.

78
00:05:56.540 --> 00:05:59.100
So if I compile this I try to build and run this.

79
00:05:59.120 --> 00:06:03.970
I should get to compiler errors and you can see him right there on the red arrows right here.

80
00:06:04.010 --> 00:06:10.880
One says B is protected and the other one should say C is private OK so that makes sense right.

81
00:06:10.880 --> 00:06:13.210
That's working with objects.

82
00:06:13.310 --> 00:06:17.210
So let me comment these two lines and we'll move on now.

83
00:06:17.420 --> 00:06:20.520
OK so now let's talk about inheritance.

84
00:06:20.750 --> 00:06:23.980
Right here we're create we've got our base class just as before.

85
00:06:23.990 --> 00:06:29.650
Now I'm creating a derived class I'm deriving this class publicly from base.

86
00:06:29.660 --> 00:06:34.490
I'm inheriting everything in base and I'm using those rules that we saw with public inheritance.

87
00:06:34.490 --> 00:06:38.920
So a is public in my parent so it's public in me.

88
00:06:39.150 --> 00:06:43.040
B is protected in my parent so it's protected in me.

89
00:06:43.100 --> 00:06:45.640
C is private in my parent so I inherit it.

90
00:06:45.650 --> 00:06:47.900
But it is not accessible.

91
00:06:48.350 --> 00:06:53.870
OK so it's important to understand that C is indeed inherited and will look at that when we walk through

92
00:06:53.870 --> 00:06:55.810
the debugger when we step through it.

93
00:06:56.060 --> 00:06:59.210
You just don't have access to it from within derived.

94
00:06:59.210 --> 00:07:03.600
It makes sense that it's part of you since it is part of your parent.

95
00:07:04.190 --> 00:07:07.990
OK so now what do we have access to here.

96
00:07:08.030 --> 00:07:11.900
What we should have access to and be right within our derived.

97
00:07:12.020 --> 00:07:13.970
We should not have access to see.

98
00:07:14.060 --> 00:07:16.030
So why don't we write a real simple method here.

99
00:07:16.030 --> 00:07:25.160
We'll just call it void access base members let's say and this won't do anything with just access those

100
00:07:25.160 --> 00:07:27.050
things and see when we get compiler errors.

101
00:07:27.200 --> 00:07:31.130
So we're going to say A equals 100 let's say right here.

102
00:07:31.220 --> 00:07:36.270
Now can we expect this to be OK because a is public and my parent it's public in me.

103
00:07:36.960 --> 00:07:45.240
We also expect to be equals 200 to be OK because it's protected and my parent it's protected in me.

104
00:07:45.270 --> 00:07:46.470
This is a member function.

105
00:07:46.470 --> 00:07:48.200
It's got access to it.

106
00:07:48.870 --> 00:07:50.020
This is the problem here.

107
00:07:50.020 --> 00:07:55.560
If I say C is 300 C is not accessible.

108
00:07:55.560 --> 00:07:58.810
So we expect a compiler error here.

109
00:07:58.980 --> 00:08:02.970
Again remember C is there if you need to access C or modify C..

110
00:08:03.090 --> 00:08:07.800
You can't do it directly from derived you'll have to go through some Geter function or set or function

111
00:08:08.130 --> 00:08:09.930
provided in the base class.

112
00:08:10.050 --> 00:08:11.790
But we'll talk about that later.

113
00:08:11.820 --> 00:08:17.070
So let's compile this now and we expect to get a compiler error right there on line 28 and that's exactly

114
00:08:17.070 --> 00:08:17.850
what happens.

115
00:08:17.940 --> 00:08:18.600
Right.

116
00:08:18.630 --> 00:08:20.320
C is not accessible.

117
00:08:20.370 --> 00:08:22.630
So you can see how these rules apply.

118
00:08:22.650 --> 00:08:29.170
Now I'll comment that out and we'll do one last thing is we'll come down here now.

119
00:08:29.910 --> 00:08:36.630
And remember what we did was we created base object and tried to access those three data members.

120
00:08:36.840 --> 00:08:41.480
Then we created a derived class and saw what the access was here.

121
00:08:41.520 --> 00:08:46.530
Now we're going to do it from a derived object so let's do that let's say derived let's just call it

122
00:08:46.530 --> 00:08:49.650
D and we'll do the same thing.

123
00:08:49.650 --> 00:08:53.940
We'll say a is 100 D.

124
00:08:54.000 --> 00:09:00.720
B is 200 and D C is 300.

125
00:09:01.860 --> 00:09:04.020
OK so take a look at a.

126
00:09:04.650 --> 00:09:08.830
I'm accessing the a data member in the derived class.

127
00:09:08.850 --> 00:09:10.990
Well let's move up here just a little bit.

128
00:09:11.020 --> 00:09:12.710
A is going to be public.

129
00:09:12.810 --> 00:09:15.020
So I should expect that to work.

130
00:09:15.120 --> 00:09:18.990
But look in B and C protected and not accessible.

131
00:09:18.990 --> 00:09:24.370
I don't have access to protect the data and I certainly don't have access to something that's not accessible.

132
00:09:24.390 --> 00:09:33.090
So we expect this line to be OK and we expect both of these to give us compiler errors right here.

133
00:09:34.140 --> 00:09:36.360
All right so let's give this a build and run.

134
00:09:36.930 --> 00:09:40.320
And there you see everything else is clean all scroll up just a little bit.

135
00:09:40.470 --> 00:09:45.570
And there you can see the compiler errors and it says just like you would expect this is protected in

136
00:09:45.570 --> 00:09:46.690
this context.

137
00:09:46.890 --> 00:09:50.190
And this guy is sorry I forgot a semi-colon.

138
00:09:50.190 --> 00:09:51.440
Let me do that one more time.

139
00:09:51.480 --> 00:09:53.110
Make sure we get the right compiler errors.

140
00:09:53.130 --> 00:09:53.830
There we go.

141
00:09:53.850 --> 00:09:57.170
So we still got the same two compiler errors but there are different errors now.

142
00:09:57.210 --> 00:10:00.820
So in this case B is protected so we don't have access to it.

143
00:10:00.870 --> 00:10:02.640
And down here C is private.

144
00:10:02.700 --> 00:10:04.910
So we certainly don't have access to it.

145
00:10:05.370 --> 00:10:06.140
OK.

146
00:10:06.450 --> 00:10:09.450
All right so that's really what I wanted to show you in this video.

147
00:10:09.480 --> 00:10:11.720
You can see that this makes sense.

148
00:10:11.730 --> 00:10:17.040
All these protected data members will be inherited inherit inherited all the way down the hierarchy.

149
00:10:17.130 --> 00:10:19.730
So you've got access to them through out.

150
00:10:20.370 --> 00:10:26.480
OK so the last thing I want to do is I want to put a break point right here on line 42 network.

151
00:10:26.520 --> 00:10:29.120
We're creating that derived object D.

152
00:10:29.460 --> 00:10:35.030
And I want to debug this and step through maybe just so we can see what data looks like.

153
00:10:35.040 --> 00:10:36.900
Ok so I'm right there line 42.

154
00:10:36.900 --> 00:10:42.600
I'm going to step and I've just created that object and let's refresh this over here and first let's

155
00:10:42.600 --> 00:10:46.230
look at base our base object which you can see right here.

156
00:10:46.230 --> 00:10:49.610
9:36 has an AB and a C in it.

157
00:10:49.620 --> 00:10:51.290
That's exactly what we expect.

158
00:10:51.360 --> 00:10:53.490
B and C are 0 and A's 100.

159
00:10:53.490 --> 00:10:58.760
Because I set that to 100 on line 37 it's you can see right here.

160
00:10:58.980 --> 00:11:01.140
But now what about the derived object.

161
00:11:01.140 --> 00:11:03.510
What would you expect that to look like internally.

162
00:11:03.750 --> 00:11:09.510
Well it is a base right because we're using public inheritance you expect a b and c to be in there and

163
00:11:09.510 --> 00:11:12.130
that's exactly what you have there is your base part.

164
00:11:12.330 --> 00:11:19.310
And there's a b and c so the derived object D has a base object within it.

165
00:11:19.320 --> 00:11:20.630
It seems obvious right.

166
00:11:20.640 --> 00:11:25.500
But a lot of students get this confused because of that one rule that says private elements are not

167
00:11:25.560 --> 00:11:26.540
accessible.

168
00:11:26.550 --> 00:11:30.640
Somehow they sometimes think that not accessible means you didn't inherit it.

169
00:11:31.020 --> 00:11:33.600
And that's not the case you can see it's really here right.

170
00:11:33.600 --> 00:11:35.400
You can see that that C is there.

171
00:11:35.490 --> 00:11:38.930
It has to be there since you are one of your parents.

172
00:11:39.030 --> 00:11:44.600
So we're not deleting stuff we're not disinheriting stuff so we're getting everything from our parent.

173
00:11:44.640 --> 00:11:49.080
So just because we don't have access to it doesn't mean it's not there I want it to be really clear

174
00:11:49.080 --> 00:11:51.610
on that because I see students misunderstanding that a lot.

175
00:11:51.870 --> 00:11:52.270
All right.

176
00:11:52.380 --> 00:11:57.840
So in the next video we'll talk about constructors and destructors and the order that stuff happens

177
00:11:57.840 --> 00:11:58.940
in with inheritance.
