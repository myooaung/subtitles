1
00:00:05,730 --> 00:00:10,920
In this video we'll learn about using access modifiers to determine what will be hidden in the class

2
00:00:11,220 --> 00:00:14,500
and what parts of the program have access to this information.

3
00:00:14,640 --> 00:00:18,600
C++ has three basic class member access modifiers.

4
00:00:18,600 --> 00:00:25,380
These are public private and protected class members that are public or accessible everywhere private

5
00:00:25,380 --> 00:00:31,270
class members are only accessible by other members of the same class or by friends of the class.

6
00:00:31,320 --> 00:00:33,820
We'll talk about friends later in this section.

7
00:00:33,930 --> 00:00:38,220
Finally protected members are used with inheritance which we'll talk about later in the course.

8
00:00:39,670 --> 00:00:45,520
Using the class member access modifiers is super simple in the body of the class you specify the access

9
00:00:45,520 --> 00:00:51,460
modifier followed by a colon then everything you declare from that point forward will have that access

10
00:00:51,460 --> 00:00:53,480
modifier applied to it.

11
00:00:53,530 --> 00:00:57,490
In this example we're using the public access modifier and anything we declare.

12
00:00:57,490 --> 00:01:03,020
After this will be public until we see a different access modifier.

13
00:01:03,060 --> 00:01:06,530
In this example we're using the private modifier by default.

14
00:01:06,570 --> 00:01:13,090
Everything in a class will be private if no access modifier specified protected works exactly the same

15
00:01:13,090 --> 00:01:14,230
way as private.

16
00:01:14,260 --> 00:01:17,950
For now you can think of protected in private as being pretty much the same.

17
00:01:17,980 --> 00:01:21,890
The different comes in when we use inheritance.

18
00:01:21,910 --> 00:01:27,070
Of course we commonly use public private and protected all at the same time to tell the compiler what

19
00:01:27,070 --> 00:01:31,810
class members should not be available outside the class and what class members should be part of the

20
00:01:31,810 --> 00:01:34,080
public interface of the class.

21
00:01:34,120 --> 00:01:37,620
This is how C++ implements information hiding.

22
00:01:37,690 --> 00:01:42,760
In this example the player's name health and XP are all private.

23
00:01:42,760 --> 00:01:46,360
This means that they're only accessible from the other members of this class.

24
00:01:46,480 --> 00:01:53,050
And from friends of the class that talk and is dead methods are publicly accessible.

25
00:01:53,180 --> 00:01:57,230
So what happens if we try to access a private class member.

26
00:01:57,290 --> 00:01:59,360
Simple you get a compiler error.

27
00:01:59,360 --> 00:02:00,860
Here's some examples.

28
00:02:00,860 --> 00:02:03,890
First we create a player object named Frank.

29
00:02:03,890 --> 00:02:09,050
If we try to access the player object's name instance variable then we get a compiler error because

30
00:02:09,050 --> 00:02:13,030
name is private and it's not accessible from outside the class.

31
00:02:13,040 --> 00:02:15,120
The same is true for health.

32
00:02:15,140 --> 00:02:18,860
Why would we want to make some class members private and others public.

33
00:02:18,860 --> 00:02:24,210
The idea is that you want to control access to certain data and methods by making them private.

34
00:02:24,260 --> 00:02:29,210
For example you want to prevent users from directly setting Franke's health to a thousand as in this

35
00:02:29,210 --> 00:02:30,210
example.

36
00:02:30,470 --> 00:02:33,110
Maybe the maximum health for the player is 100.

37
00:02:33,320 --> 00:02:38,570
In order to control this you would create a public method in the class that sets this health property

38
00:02:39,170 --> 00:02:43,150
and in the code for that method it makes sure to max out the Health at 100.

39
00:02:43,490 --> 00:02:49,250
Since that method is a class member it would have access to the private health property in the second

40
00:02:49,250 --> 00:02:53,020
example we create a pointer named enemy to a player object.

41
00:02:53,240 --> 00:02:58,820
If we try to directly access the XP property we get a compiler because it's private.

42
00:02:58,820 --> 00:03:02,960
However we can call the talk method with no error since it's public.

43
00:03:02,960 --> 00:03:09,090
Let's see another example in this example we have an account class and the name of the account and the

44
00:03:09,090 --> 00:03:11,200
balance of the account are private.

45
00:03:11,220 --> 00:03:15,210
These properties cannot be accessed directly from outside the class.

46
00:03:15,210 --> 00:03:21,110
We also provide public withdraw and deposit methods that can be called from outside the class.

47
00:03:21,240 --> 00:03:26,460
Since these methods are member methods they have access to the balance and can update its value based

48
00:03:26,460 --> 00:03:30,000
on whatever business logic we have for the class.

49
00:03:30,000 --> 00:03:34,840
Here are a few examples that use the account object frank account is an account object.

50
00:03:34,950 --> 00:03:40,080
If we try to access the object's Balance property directly will get a compiler error because balance

51
00:03:40,080 --> 00:03:41,440
is private.

52
00:03:41,490 --> 00:03:47,870
However we can use the deposit method and provide the amount to deposit it since deposit is public.

53
00:03:47,880 --> 00:03:53,970
The idea is that the deposit method would somehow verify that the $10 million and I want a deposit are

54
00:03:53,970 --> 00:03:57,330
indeed available before incrementing balance.

55
00:03:57,330 --> 00:04:02,430
If I try to directly access the name of the account I also get a compiler error for the same reason

56
00:04:02,700 --> 00:04:09,110
the account name is private the same behavior applies whether we access an object using the dot operator

57
00:04:09,530 --> 00:04:16,070
or via a pointer using the operator in the case of Mary's account trying to access the balance or name

58
00:04:16,070 --> 00:04:18,430
directly results in a compiler error.

59
00:04:18,800 --> 00:04:22,320
But using the deposit method is fine since it's public.

60
00:04:22,490 --> 00:04:24,200
You can see how powerful this is.

61
00:04:24,230 --> 00:04:29,420
For example if we have an object whose balance is 20 million dollars and we know that that must have

62
00:04:29,420 --> 00:04:34,280
been an error then the only place where that error could have happened in this example is in the deposit

63
00:04:34,280 --> 00:04:35,270
method.

64
00:04:35,300 --> 00:04:40,520
There's no way that any other part of the program could have changed that value since the value is private.

65
00:04:40,520 --> 00:04:43,520
This makes testing and debugging code much much easier.

66
00:04:44,760 --> 00:04:52,110
Ok so I'm in the IDM in the section 13 workspace in the access modifiers project and in this project

67
00:04:52,110 --> 00:04:54,910
we've got our player class that we've been using.

68
00:04:55,050 --> 00:04:57,180
And you'll notice some in a couple of changes to it.

69
00:04:57,180 --> 00:04:59,730
I made the attributes all private.

70
00:04:59,730 --> 00:05:02,360
So the name the health and the expwy are all private.

71
00:05:02,700 --> 00:05:05,320
And I made the two methods talked in is dead.

72
00:05:05,370 --> 00:05:06,630
Public.

73
00:05:06,700 --> 00:05:07,150
OK.

74
00:05:07,170 --> 00:05:12,720
So I want to show you the compiler errors you get when you try to access those private data members.

75
00:05:12,750 --> 00:05:21,120
So in this case I want to create a player object a frank and if I try to set Frank's name so I could

76
00:05:21,120 --> 00:05:25,050
say Frank name equals anything.

77
00:05:25,080 --> 00:05:27,040
In this case I'll just say Frank.

78
00:05:27,480 --> 00:05:31,380
And we'll try to compile a build and run with control of five.

79
00:05:31,440 --> 00:05:33,020
You see the error I'm getting.

80
00:05:33,090 --> 00:05:37,920
And you can see it here in the box as well as his players name as private within this context.

81
00:05:37,920 --> 00:05:39,540
Same thing we're seeing here.

82
00:05:39,570 --> 00:05:46,920
So you're trying to access a private attribute which is name from outside of the class.

83
00:05:46,950 --> 00:05:52,050
This is exactly the same area you'll get if you try to use health or XP and it's not just a matter of

84
00:05:52,050 --> 00:05:55,980
trying to set that variable it's trying to use that variable as well.

85
00:05:56,100 --> 00:06:06,180
So if I tried to do something like seek out Frank health you know do it in line here and we'll compile

86
00:06:06,180 --> 00:06:07,390
this as well.

87
00:06:07,410 --> 00:06:08,200
We'll see.

88
00:06:08,280 --> 00:06:09,820
I get two errors now.

89
00:06:09,870 --> 00:06:10,900
Same idea.

90
00:06:10,980 --> 00:06:12,690
I don't have access to health.

91
00:06:12,690 --> 00:06:15,360
It's not just a matter of not allowing you to set it.

92
00:06:15,450 --> 00:06:17,570
It's not allowing you to access it.

93
00:06:17,820 --> 00:06:18,490
OK.

94
00:06:18,690 --> 00:06:25,730
Now these I'm going to comment those two out for a moment and let's initialize the name here just to

95
00:06:26,190 --> 00:06:31,400
play or just so we have something to see when we call the talk method.

96
00:06:31,410 --> 00:06:42,640
OK so now what I can do is I can say Frank got talk and I can pass in the string Hello there.

97
00:06:43,170 --> 00:06:48,610
Now if I try to build and run I says player says hello there.

98
00:06:48,820 --> 00:06:49,230
OK.

99
00:06:49,300 --> 00:06:56,480
So we know it works in this case because we're accessing a public accessible method right here talk.

100
00:06:56,530 --> 00:07:01,000
Same thing with his dad we can't call his dad because we haven't implemented it yet but we did implement

101
00:07:01,000 --> 00:07:01,970
talk right here.

102
00:07:03,020 --> 00:07:03,460
OK.

103
00:07:03,590 --> 00:07:05,920
So that's really all there is to it.

104
00:07:05,960 --> 00:07:11,330
If you get these errors that are saying you don't have access to something that's exactly why now why

105
00:07:11,330 --> 00:07:12,510
do we do this.

106
00:07:13,230 --> 00:07:18,520
It's really good programming practice to hide certain parts of your classes declarations.

107
00:07:18,660 --> 00:07:23,190
The idea is you want to control that variable via some sort of public method.

108
00:07:23,190 --> 00:07:27,960
So they've got to go through the public method and then the public method makes sure that the health

109
00:07:27,960 --> 00:07:29,960
is within some reasonable range.

110
00:07:30,000 --> 00:07:36,270
And as I mentioned in the slides if we're doing this and we put some value of health that's 20000 or

111
00:07:36,270 --> 00:07:38,660
something like that that's really really out of whack.

112
00:07:38,730 --> 00:07:42,690
If health is public then anything could have changed that property.

113
00:07:42,720 --> 00:07:48,530
But if health is private then I know that the changes that were wrong happened somewhere in here right

114
00:07:48,540 --> 00:07:49,860
somewhere in the public interface.

115
00:07:49,860 --> 00:07:55,580
My methods made that mistake and I can find and fix that error much much easier.
