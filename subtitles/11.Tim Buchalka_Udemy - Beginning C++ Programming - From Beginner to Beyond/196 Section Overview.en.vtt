WEBVTT
1
00:00:05.640 --> 00:00:11.040
In this section of the Course will learn about the various types of smart pointers and C++ and how to

2
00:00:11.040 --> 00:00:15.410
use them first will understand why we need smart pointers at all.

3
00:00:15.420 --> 00:00:20.010
After all there must be an issue with the way that raw pointers work that motivated the need for smart

4
00:00:20.010 --> 00:00:20.790
pointers.

5
00:00:20.850 --> 00:00:25.710
So we'll review some of the problems associated with raw pointers then we'll see what smart pointers

6
00:00:25.770 --> 00:00:28.970
are and understand how they address the issues with raw pointers.

7
00:00:29.130 --> 00:00:35.490
One of the most important concepts to understand in this section is that of ownership and RAII or resource

8
00:00:35.490 --> 00:00:37.950
acquisition is initialization.

9
00:00:37.950 --> 00:00:43.170
I'll go over this idiom since it's central to understanding not only smart pointers but resource management

10
00:00:43.170 --> 00:00:44.360
in general.

11
00:00:44.580 --> 00:00:49.540
Then we'll look at each type of C++ smart pointer and see how they work and how to use them.

12
00:00:49.560 --> 00:00:53.330
Ultimately we want to write code that has no news and no deletes.

13
00:00:53.400 --> 00:00:59.400
So all the memory management is handled by C++ if C++ can automatically clean up the heap whenever a

14
00:00:59.400 --> 00:01:03.810
pointer is no longer needed then we'll never leak memory and we don't have to worry about needing to

15
00:01:03.810 --> 00:01:05.960
know when a pointer is no longer needed.

16
00:01:05.970 --> 00:01:07.320
That's the idea anyway.

17
00:01:07.320 --> 00:01:12.420
Smart pointers aren't perfect but they can certainly make our code better in most cases.

18
00:01:12.420 --> 00:01:17.280
First we'll learn about the unique pointer which is exactly what it sounds like a unique pointer to

19
00:01:17.280 --> 00:01:22.100
heap storage that is not shared and the ownership is clear when you know who owns the pointer.

20
00:01:22.110 --> 00:01:26.520
Then you know who needs to delete the pointer or at least C++ knows.

21
00:01:26.940 --> 00:01:31.950
Then we'll learn about shared pointers shared pointers pointers that share common heap storage and can

22
00:01:31.950 --> 00:01:33.300
be very useful.

23
00:01:33.420 --> 00:01:37.560
Then we'll learn about weak pointers and how they can help us avoid a problem associated with shared

24
00:01:37.560 --> 00:01:38.780
pointers.

25
00:01:38.790 --> 00:01:44.550
Finally we'll see how we can use custom to leaders so that C++ can call a specific version of delete

26
00:01:44.880 --> 00:01:47.100
that does exactly what we want.

27
00:01:47.370 --> 00:01:53.340
Smart pointers are a very important part of modern C++ and we want to use them whenever we can to help

28
00:01:53.340 --> 00:01:54.180
us manage memory.
