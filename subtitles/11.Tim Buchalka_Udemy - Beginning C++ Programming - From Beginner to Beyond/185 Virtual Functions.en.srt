1
00:00:05,540 --> 00:00:11,030
In this video we'll learn about the virtual keyword virtual functions and how to declare them in your

2
00:00:11,030 --> 00:00:13,340
own class hierarchies.

3
00:00:13,340 --> 00:00:19,250
When we derive a class from a base class we can redefine the base classes functions behaviors in the

4
00:00:19,250 --> 00:00:20,810
derived class.

5
00:00:20,810 --> 00:00:25,810
This creates a specialized version of the function specific to the derived class.

6
00:00:26,120 --> 00:00:31,530
If we don't use the virtual keyword with these functions then they're statically bound at compile time.

7
00:00:31,550 --> 00:00:36,470
As we've already seen overridden functions are bound dynamically.

8
00:00:36,470 --> 00:00:40,130
We do this by declaring the function to be virtual.

9
00:00:40,130 --> 00:00:46,190
So virtual functions are overridden functions and they allow us to think abstractly by treating all

10
00:00:46,250 --> 00:00:50,090
objects in the hierarchy as objects of the base class.

11
00:00:50,480 --> 00:00:55,210
Let's see the syntax for declaring a function as virtual.

12
00:00:55,280 --> 00:01:02,270
First we declare the function we want to override in our derived classes as virtual in the base class.

13
00:01:02,270 --> 00:01:07,940
You can see in the code snippet that were in the account base class and we declared the withdraw method

14
00:01:07,940 --> 00:01:13,690
as virtual by preceding the function's prototype with the virtual keyword.

15
00:01:13,700 --> 00:01:19,340
This makes withdraw a virtual function which means it can be overridden in derived classes and it will

16
00:01:19,340 --> 00:01:25,640
be bound dynamically at runtime when we use a base class pointer or reference.

17
00:01:25,640 --> 00:01:31,030
Once we declare a function is virtual then that function is virtual all the way down the class hierarchy.

18
00:01:31,070 --> 00:01:38,030
From this point forward here we can see an example of overriding the withdraw function in the derived

19
00:01:38,030 --> 00:01:43,250
class checking the derived withdraw function will be implicitly virtual.

20
00:01:43,340 --> 00:01:48,960
So we don't have to use the virtual keyword again but it's best practice to do so.

21
00:01:49,070 --> 00:01:54,530
It's important to understand that in order to override a base class is function the function's signature

22
00:01:54,560 --> 00:01:57,590
and return type must match exactly.

23
00:01:57,590 --> 00:02:03,210
If you don't match it exactly the compiler will treat it as a redefinition and statically bind it.

24
00:02:03,560 --> 00:02:04,100
That's it.

25
00:02:04,100 --> 00:02:06,340
It's pretty simple and provides so much power.

26
00:02:06,530 --> 00:02:12,140
Remember virtual functions are dynamically bound only when we call them via a base class pointer or

27
00:02:12,140 --> 00:02:12,950
reference.

28
00:02:13,160 --> 00:02:15,670
Otherwise they're statically bound.

29
00:02:15,710 --> 00:02:17,460
So let's head over to the idea.

30
00:02:17,460 --> 00:02:22,470
Make that simple account class hierarchy dynamically polymorphic with virtual functions.

31
00:02:22,490 --> 00:02:24,090
It's so easy to do.

32
00:02:24,740 --> 00:02:31,830
OK so I mean the IDM in Section 16 workspace and I in the virtual functions project.

33
00:02:31,910 --> 00:02:32,350
All right.

34
00:02:32,360 --> 00:02:37,460
So here we've got the simple account hierarchy you can see we've got an account class a checking account

35
00:02:37,550 --> 00:02:42,530
a savings account and a trust account and there are all accounts and right now we've all we've only

36
00:02:42,530 --> 00:02:48,140
got the withdraw method and it's been redefined in every single class and all we're doing is just displaying

37
00:02:48,190 --> 00:02:50,230
an account withdraw and checking withdraw.

38
00:02:50,390 --> 00:02:51,410
You've seen this one before.

39
00:02:51,410 --> 00:02:54,990
This just tells you which one is being called so that we can better follow it.

40
00:02:55,190 --> 00:03:00,720
So there are my four classes and right now it's you can see there's no virtual keywords in here at all.

41
00:03:00,800 --> 00:03:03,670
So this is not going to use dynamic binding.

42
00:03:03,680 --> 00:03:05,090
Here are pointers again.

43
00:03:05,150 --> 00:03:11,880
P one P2P 3P for each one pointing to a different each one pointing to a different type of account.

44
00:03:12,050 --> 00:03:15,820
And we're just simply calling the withdrawal method for each one and then we're cleaning up our pointers.

45
00:03:15,830 --> 00:03:22,940
Now since we don't have dynamic polymorphism when we run this we expect all four of these methods to

46
00:03:22,940 --> 00:03:25,760
be bound to the account class is withdraw.

47
00:03:25,850 --> 00:03:28,600
So let's run that and be sure that that's our starting point.

48
00:03:28,970 --> 00:03:31,040
And that's exactly what we see here.

49
00:03:31,280 --> 00:03:36,020
Those are the withdrawal methods executing right here where executing a count withdraw for all four

50
00:03:36,020 --> 00:03:38,700
of them because we're using static binding.

51
00:03:38,900 --> 00:03:42,610
All right so now let's make this polymorphic.

52
00:03:42,620 --> 00:03:43,290
What do we do.

53
00:03:43,400 --> 00:03:48,170
So we go to a base class and we look at the functions that we want our derived classes to be able to

54
00:03:48,170 --> 00:03:49,080
override.

55
00:03:49,310 --> 00:03:51,270
And those are the ones that we want to make virtual.

56
00:03:51,290 --> 00:03:52,480
There's only one example here.

57
00:03:52,490 --> 00:03:55,400
But typically you would have several in a base class.

58
00:03:55,400 --> 00:03:57,430
In this case this is the one withdraw.

59
00:03:57,560 --> 00:04:00,380
So all you need to do is put virtual in front.

60
00:04:00,710 --> 00:04:01,230
That's it.

61
00:04:01,250 --> 00:04:02,950
That's a virtual function now.

62
00:04:03,080 --> 00:04:09,440
Whenever I come at any derived object via a base class pointer or a base class reference it will be

63
00:04:09,440 --> 00:04:10,800
dynamically bound.

64
00:04:10,850 --> 00:04:12,980
That's as simple as that is pretty powerful.

65
00:04:12,980 --> 00:04:18,590
Now I don't have to put the virtual keyword down here but it's best practice to do so because many times

66
00:04:18,890 --> 00:04:20,730
users will be looking at this function.

67
00:04:20,750 --> 00:04:24,640
At this class here and it's nice for them to see that it is indeed virtual.

68
00:04:24,890 --> 00:04:27,390
So let's do this virtual here.

69
00:04:27,440 --> 00:04:33,440
Just copy that will do it here and we'll do it one more time right here.

70
00:04:33,950 --> 00:04:39,620
So now every one of these classes has overridden that withdrawal method.

71
00:04:40,130 --> 00:04:41,180
All right that's it.

72
00:04:41,180 --> 00:04:42,280
That's all we really have to do.

73
00:04:42,320 --> 00:04:47,200
If we run this now we'll get our polymorphic behavior which is exactly what we want.

74
00:04:47,220 --> 00:04:52,140
See that in account withdraw and savings withdraw and checking withdraw interest withdraw.

75
00:04:52,310 --> 00:04:53,290
This is awesome.

76
00:04:53,330 --> 00:04:56,850
I mean one simple keyword you get a lot of bang for your buck here.

77
00:04:56,900 --> 00:04:58,220
There's a lot going on.

78
00:04:58,430 --> 00:04:59,870
Now you'll notice a few things.

79
00:04:59,990 --> 00:05:06,010
We're getting some warnings here and we're getting four warnings and they're all about destructors whenever

80
00:05:06,010 --> 00:05:10,420
you have a virtual function you need to have virtual destructors.

81
00:05:10,420 --> 00:05:14,840
And that's what we're going to talk about in the next video so you can see how simple this was to do

82
00:05:15,040 --> 00:05:20,440
and the power that it gives you in the next video will address these warnings and we'll talk about virtual

83
00:05:20,440 --> 00:05:21,310
destructors.
