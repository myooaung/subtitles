WEBVTT
1
00:00:05.430 --> 00:00:08.910
Pointers are very powerful constructs in programming languages.

2
00:00:08.910 --> 00:00:14.130
However there are some potential pitfalls that you should be aware of when using pointers in this video

3
00:00:14.130 --> 00:00:15.850
will go over some of those pitfalls.

4
00:00:15.870 --> 00:00:22.140
These include using uninitialized pointer as dangling or stray pointers not checking if new allocated

5
00:00:22.140 --> 00:00:27.920
memory and leaking memory First let's look at uninitialized pointers.

6
00:00:27.980 --> 00:00:30.940
We've seen these already but let's talk about them one more time.

7
00:00:31.220 --> 00:00:35.380
Uninitialized pointers contain garbage which means they could point anywhere.

8
00:00:35.450 --> 00:00:40.410
If we try to access or modify the data they're pointing to we could run into some major problems.

9
00:00:40.580 --> 00:00:44.750
The pointer might be pointing to a very important area in memory and we could wipe it out.

10
00:00:44.810 --> 00:00:49.200
Modern operating systems today are pretty good at protecting critical areas of system memory.

11
00:00:49.280 --> 00:00:54.230
But you could still trash an area important to your program that could cause your program to crash.

12
00:00:54.230 --> 00:00:59.180
Worst case scenario is that the program continues to work as expected for a long time since the memory

13
00:00:59.180 --> 00:01:00.870
access isn't used.

14
00:01:00.950 --> 00:01:06.300
Then an update to your program later on changes everything and all of a sudden the program is crashing.

15
00:01:06.350 --> 00:01:09.950
You think it's because of the new change but it's actually a bug that's been in the code for a long

16
00:01:09.950 --> 00:01:11.030
time.

17
00:01:11.030 --> 00:01:16.220
In the old days of computing it wasn't uncommon to corrupt data on storage devices by using uninitialized

18
00:01:16.220 --> 00:01:16.930
pointers.

19
00:01:19.060 --> 00:01:22.160
Another potential problem with pointers is the dangling pointer.

20
00:01:22.180 --> 00:01:25.990
Some cuts sometimes called Wilder stray pointers.

21
00:01:25.990 --> 00:01:29.430
These are pointers that are pointing to memory that's no longer valid.

22
00:01:29.890 --> 00:01:34.330
If you try to use these pointers to access that data you don't know what the results will be.

23
00:01:34.360 --> 00:01:39.640
The main reasons for dangling pointers or returning addresses of function local variables on the stack

24
00:01:39.670 --> 00:01:43.000
that are no longer valid since the function is terminated.

25
00:01:43.000 --> 00:01:48.140
Another common scenario is that you allocate storage dynamically and assign it to a pointer variable.

26
00:01:48.220 --> 00:01:51.880
Then you assign another pointer variable to point to that same storage.

27
00:01:51.880 --> 00:01:54.720
Now you have two pointers pointing to the same area on the heap.

28
00:01:54.730 --> 00:01:56.600
That's OK and we do it all the time.

29
00:01:56.620 --> 00:02:01.630
The problem comes in when one of the pointers releases the memory but the other pointer is still referencing

30
00:02:01.630 --> 00:02:03.340
to it and you use it again.

31
00:02:03.340 --> 00:02:05.560
Unpredictable results can happen.

32
00:02:05.560 --> 00:02:13.200
Best case is your program crashes during development and you fix these errors the next pointer pitfall

33
00:02:13.210 --> 00:02:15.330
is not checking to see if you failed.

34
00:02:15.370 --> 00:02:20.040
If new fails to allocate storage an exception is thrown and your program terminates.

35
00:02:20.050 --> 00:02:25.330
We can use exception handling to get more fine grained control over these exceptional situations.

36
00:02:25.330 --> 00:02:29.710
If you try to dereference a pointer which is pointing to no your program would crash.

37
00:02:29.710 --> 00:02:32.950
This is good in testing but not good in production.

38
00:02:32.950 --> 00:02:35.840
The last pointer pitfall will discuss is the memory leak.

39
00:02:35.860 --> 00:02:40.240
This is probably right up there with the uninitialized pointer is the most common type of pointer related

40
00:02:40.240 --> 00:02:40.890
error.

41
00:02:41.230 --> 00:02:45.790
Memory leaks are easy to understand when you allocate storage dynamically on the heap.

42
00:02:45.790 --> 00:02:47.360
This storage has no name.

43
00:02:47.380 --> 00:02:52.150
It's simply an area of memory that's returned to you and you store the value in the pointer.

44
00:02:52.150 --> 00:02:54.830
The only way to get to this memory is through the pointer.

45
00:02:55.120 --> 00:02:56.710
But what if you lose the pointer.

46
00:02:56.710 --> 00:03:01.000
Say you allocated the memory in a function and the pointer was declared in the function and the function

47
00:03:01.000 --> 00:03:02.080
terminates.

48
00:03:02.080 --> 00:03:03.660
Now you just lost your pointer.

49
00:03:03.670 --> 00:03:07.340
There's no way you can reference that allocated memory on the heap.

50
00:03:07.450 --> 00:03:10.550
This memory is still considered in use by C++.

51
00:03:10.600 --> 00:03:12.290
So this is called in memory leak.

52
00:03:12.460 --> 00:03:17.350
If you leak enough memory you could run out of storage on the heap for future allocations.

53
00:03:17.350 --> 00:03:21.880
Memory leaks used to be much more problematic when memory was limited but there's still an error and

54
00:03:21.880 --> 00:03:23.250
a sign of bad code.

55
00:03:23.650 --> 00:03:28.570
As you can see the potential problems are well-understood and as you become more experienced with pointers

56
00:03:28.570 --> 00:03:32.050
you become very aware of them and you don't make these mistakes.

57
00:03:32.170 --> 00:03:37.750
Now that I've mentioned the pitfalls with using Rossie post plus pointers C++ has smart pointers now

58
00:03:38.050 --> 00:03:41.780
that take care of many of these problems and are still very efficient.

59
00:03:41.830 --> 00:03:45.760
There are more advanced topic and it's something that you should learn as you become more proficient

60
00:03:45.760 --> 00:03:52.200
with C++ or revisit smart pointers in the context of object oriented programming in the next section.

61
00:03:52.480 --> 00:03:54.780
Well that wraps up C plus plus pointers.

62
00:03:54.940 --> 00:03:58.340
I hope I did a good job explaining them since they can be very intimidating.

63
00:03:58.360 --> 00:04:00.330
Please let me know if you have any questions.

64
00:04:00.430 --> 00:04:02.650
Practice with pointers write simple programs.

65
00:04:02.650 --> 00:04:07.540
Print out the values of the pointers so that you can understand how to work with them and with memory.

66
00:04:07.560 --> 00:04:09.940
OK now let's move on to references.
