WEBVTT
1
00:00:05.410 --> 00:00:11.010
In this video we're learn about some of the commonly used C++ primitive data types.

2
00:00:11.190 --> 00:00:15.960
These types are also sometimes called fundamental data types because they're implemented directly by

3
00:00:15.960 --> 00:00:17.600
the C++ language.

4
00:00:18.580 --> 00:00:23.980
The types we'll discuss in this video are the character types the integer types which include both signed

5
00:00:23.980 --> 00:00:25.770
and unsigned integers.

6
00:00:25.780 --> 00:00:28.890
The floating point types and the Boolean type.

7
00:00:29.020 --> 00:00:34.600
It's important to keep in mind that unlike many other programming languages the size and precision of

8
00:00:34.600 --> 00:00:40.480
C++ is primitive data types are largely dependent on the platform that you're working on and the compiler

9
00:00:40.480 --> 00:00:42.150
you're using.

10
00:00:42.160 --> 00:00:47.680
This means that as a C++ programmer you need to be aware of your specific machine and understand how

11
00:00:47.680 --> 00:00:51.980
much storage is allocated for these types to effectively use them.

12
00:00:52.180 --> 00:00:58.570
The C++ include file C limits contains information about the size and precision of the data types for

13
00:00:58.570 --> 00:00:59.930
your specific compiler

14
00:01:02.950 --> 00:01:09.390
as you know computer store information using a binary representation which consists of zeros and ones.

15
00:01:09.820 --> 00:01:13.720
And these fundamental type sizes are expressed in bits.

16
00:01:13.720 --> 00:01:18.370
The more bits allocated to type the more unique values that can be represented.

17
00:01:18.610 --> 00:01:24.180
Also the more bits the more storage that's necessary to represent that type in memory.

18
00:01:24.220 --> 00:01:28.890
In this table you can see how many values can be represented in a given number of bits.

19
00:01:28.900 --> 00:01:36.520
The formula used to calculate these values is to raise to the number of bits power so we can store 256

20
00:01:36.520 --> 00:01:43.300
distinct values in 8 bits sixty five thousand five hundred thirty six distinct values and 16 bits over

21
00:01:43.300 --> 00:01:51.190
four billion distinct values and 32 bits and over 18 billion billion distinct values in 32 bits.

22
00:01:51.190 --> 00:01:54.740
Now let's take a look at the specific primitive types one at a time.

23
00:01:56.060 --> 00:02:02.940
The C++ character data type is used to represent characters such as the letter A x and so forth.

24
00:02:03.260 --> 00:02:09.530
The character data type is often implemented as 8 bits which means it can represent a maximum of 256

25
00:02:09.530 --> 00:02:11.230
characters.

26
00:02:11.240 --> 00:02:15.230
This is plenty to represent the alphabets from many spoken languages.

27
00:02:15.230 --> 00:02:21.110
However some spoken languages have thousands of characters and in many cases multiple symbols are combined

28
00:02:21.110 --> 00:02:24.980
to form single characters in order to support these languages.

29
00:02:25.040 --> 00:02:31.700
C++ supports a wider character type that can be as large as necessary to represent these characters.

30
00:02:31.700 --> 00:02:36.370
Unicode is a common standard used to represent multiple character sets for any language.

31
00:02:36.530 --> 00:02:41.900
When we work with characters in this course we use the char data type since it easily supports the Latin

32
00:02:41.900 --> 00:02:42.820
character set.

33
00:02:43.990 --> 00:02:47.370
C++ also supports the integer data types.

34
00:02:47.370 --> 00:02:53.160
Integers are used to represent whole numbers both signed and unsigned integers are supported.

35
00:02:53.160 --> 00:02:55.280
There are many variants of the integer data type.

36
00:02:55.290 --> 00:03:02.200
Let's take a look at some of them the following tables show the C++ integer data types for both signed

37
00:03:02.200 --> 00:03:04.150
and unsigned integers.

38
00:03:04.450 --> 00:03:09.520
In addition to those shown in the table it's possible to store both sides and unsigned integers into

39
00:03:09.520 --> 00:03:11.080
character data type.

40
00:03:11.590 --> 00:03:15.960
Notice that some of the keywords in this table are bold and others are italicized.

41
00:03:16.150 --> 00:03:20.430
Also typical sizes are included in the table.

42
00:03:20.610 --> 00:03:26.060
For example if you want to declare a signed integer you don't need to use the signed keyword so it's

43
00:03:26.070 --> 00:03:26.740
by default.

44
00:03:26.760 --> 00:03:28.300
Integers are signed.

45
00:03:28.500 --> 00:03:33.660
Similarly if you want an integer type that stores very large numbers you can simply declare the type

46
00:03:33.660 --> 00:03:40.800
as long long and you'll get a signed long long integer if you want unsigned integers that is integers

47
00:03:40.800 --> 00:03:43.180
that are zero or positive values only.

48
00:03:43.350 --> 00:03:46.380
Then you're required to use the unsigned keyword.

49
00:03:46.380 --> 00:03:50.730
I know this may seem a little confusing with all the optional keywords but it's not so bad if you just

50
00:03:50.730 --> 00:03:53.840
think that by default all integers are signed.

51
00:03:54.510 --> 00:03:55.440
I know what you're thinking.

52
00:03:55.440 --> 00:03:57.990
Which ones these do I use in my application.

53
00:03:58.020 --> 00:03:59.820
And the answer is It depends.

54
00:04:00.060 --> 00:04:05.460
If you want an integer variable of stores ages then you could use an unsigned int or even an int if

55
00:04:05.460 --> 00:04:09.840
you want an integer to represent the number of kilometers between the planets that you probably want

56
00:04:09.840 --> 00:04:15.770
to use an unsigned long long for most applications using it is perfectly acceptable.

57
00:04:15.930 --> 00:04:21.330
But you do need to keep in mind the limitations especially when you perform math on variables and store

58
00:04:21.330 --> 00:04:22.980
results in other variables.

59
00:04:22.980 --> 00:04:26.480
Since the results may not fit into the variable you're saving too.

60
00:04:26.580 --> 00:04:28.230
This could cause an overflow.

61
00:04:28.230 --> 00:04:31.560
Well look at a specific example of an overflow in life code.

62
00:04:31.560 --> 00:04:37.760
At the end of this video C++ also supports floating point types.

63
00:04:37.760 --> 00:04:44.790
These are used to represent non integer numbers such as real numbers numbers like 1.2 0.5 and pi.

64
00:04:44.870 --> 00:04:49.790
It's important to understand that computers have finite storage and many real numbers have an infinite

65
00:04:49.790 --> 00:04:51.930
number of digits after the decimal point.

66
00:04:52.130 --> 00:04:54.860
Pi is a perfect example of this.

67
00:04:55.220 --> 00:04:59.050
In these cases computers store an approximation of the real number.

68
00:04:59.120 --> 00:05:05.000
There's no way the computer can store numbers such as pi precisely floating point numbers are represented

69
00:05:05.000 --> 00:05:09.860
internally by the computer as signed numbers with a mantissa and an exponent.

70
00:05:09.860 --> 00:05:14.480
You may remember your scientific notation from school one point two three four times.

71
00:05:14.480 --> 00:05:15.810
Tend to the seventh power.

72
00:05:15.920 --> 00:05:18.400
That's the way they're stored internally.

73
00:05:18.410 --> 00:05:23.210
This isn't something you need to worry about since it's handled automatically internally but it's important

74
00:05:23.210 --> 00:05:26.150
to know that these are approximations.

75
00:05:26.150 --> 00:05:30.680
There are three types of floating point numbers float double and long double.

76
00:05:30.680 --> 00:05:34.510
Each has varying precision in size depending on the compiler.

77
00:05:34.520 --> 00:05:40.730
Note that long double can store very very small and very very large floating point numbers.

78
00:05:40.760 --> 00:05:44.270
The last primitive we'll learn about is the Boolean type.

79
00:05:44.270 --> 00:05:53.150
The boolean data type is used to represent true and false values in C plus plus 0 is false and any non-zero

80
00:05:53.150 --> 00:05:54.610
value is true.

81
00:05:54.620 --> 00:06:00.170
C++ also includes the true and false keywords that are often used with a boolean type.

82
00:06:00.590 --> 00:06:04.730
As you can imagine boolean types are used whenever you need to know if something changes state.

83
00:06:04.760 --> 00:06:08.570
For example game over key pressed is invincible.

84
00:06:08.570 --> 00:06:15.380
These are all good examples of using the boolean data type since values can be either true or false.

85
00:06:15.410 --> 00:06:15.740
Great.

86
00:06:15.740 --> 00:06:20.560
Now let's head over to code live and see some of these primitive types in action.

87
00:06:20.580 --> 00:06:24.910
So now I am into code like ID and I've created a project called primitive types.

88
00:06:24.910 --> 00:06:29.500
That's in the section 6 workspace in this C++ file.

89
00:06:29.520 --> 00:06:34.950
I'm going to go over some examples of using the primitive types will start with carriages would do integers

90
00:06:34.950 --> 00:06:39.810
of floating point numbers and then at the end will do booleans and also show you an example of an overflow

91
00:06:39.810 --> 00:06:43.090
so you could see the typical behavior you get with this.

92
00:06:43.140 --> 00:06:47.400
I've written the code ahead of time and I've commented out a lot of it and what I'll do is uncomment

93
00:06:47.400 --> 00:06:50.720
and run pieces of it at a time so you can see it build.

94
00:06:50.760 --> 00:06:54.210
So the first thing we want to do is take a look at this first example here.

95
00:06:54.210 --> 00:06:57.420
This is a good example of using the character data type.

96
00:06:57.420 --> 00:06:59.120
My middle initial is J.

97
00:06:59.310 --> 00:07:05.920
So the variable name is called middle initial and it's character data type so it can hold a single character.

98
00:07:06.210 --> 00:07:12.110
The way that C++ represent single characters is with single quotes around the J.

99
00:07:12.120 --> 00:07:16.120
Do not put double quotes there that would make it a string and you'll get an error.

100
00:07:16.140 --> 00:07:21.960
So what I'm doing here is I'm simply initializing the middle initial variable to J and then displaying

101
00:07:21.960 --> 00:07:24.330
it right here in the output statement.

102
00:07:24.330 --> 00:07:30.300
So I'll build and run and I'm just going to click here remember so it doesn't ask me my choice of the

103
00:07:30.300 --> 00:07:36.980
time and I just want to build it execute you could see here it says my middle initial is J.

104
00:07:36.980 --> 00:07:38.770
Exactly what I expect.

105
00:07:39.350 --> 00:07:44.870
OK so now let me uncomment the integer types here the way that you can comment that uncomment lines

106
00:07:44.870 --> 00:07:45.540
very easily.

107
00:07:45.530 --> 00:07:51.590
Just select the lines you're interested in and just press control forward slash or command swards slash

108
00:07:51.590 --> 00:07:56.210
on a Mac and that will toggle between comment and noncom it.

109
00:07:56.460 --> 00:07:56.780
OK.

110
00:07:56.780 --> 00:08:04.280
So in this case I've created a variable called the exam score and initializing it to 55.

111
00:08:04.280 --> 00:08:07.220
Now exam score is an unsigned short.

112
00:08:07.270 --> 00:08:13.520
And remember we have to say unsigned if we want our variables to be unsigned but I don't have to say

113
00:08:13.530 --> 00:08:15.110
it I can simply say short.

114
00:08:15.140 --> 00:08:21.610
So this is the same as saying unsigned short exam score some initialising that to 55.

115
00:08:21.800 --> 00:08:27.200
And again I'll build and run and you could see my middle initial still J.

116
00:08:27.500 --> 00:08:31.160
And my exam score was 55 OK.

117
00:08:31.380 --> 00:08:34.160
In this case we've got another number.

118
00:08:34.290 --> 00:08:39.750
Uncomment that out the number of countries represented in my meeting we're 65 and I'm initialising it.

119
00:08:39.780 --> 00:08:41.530
This is a simple integer by default.

120
00:08:41.550 --> 00:08:42.870
It's going to be signed.

121
00:08:43.350 --> 00:08:47.710
And here it's going to say there were sixty five countries represented in my meeting.

122
00:08:48.180 --> 00:08:55.260
So let me run that again I'm pressing control 5 on windows just to use the shortcut and you can see

123
00:08:55.260 --> 00:08:58.140
here there were sixty five countries represented in my meeting.

124
00:08:59.450 --> 00:09:06.060
Now in this case we've got a much larger number than the uncomment these two lines out.

125
00:09:06.110 --> 00:09:09.530
So now I've got people in Florida that's my variable name.

126
00:09:09.530 --> 00:09:11.060
This is the state I live in.

127
00:09:11.330 --> 00:09:15.020
And there are 20 million 610000 people living in Florida.

128
00:09:15.020 --> 00:09:16.620
The last I just checked on Google.

129
00:09:16.790 --> 00:09:19.350
So I'm defining this as a long.

130
00:09:19.910 --> 00:09:21.830
I'm hoping that that fits in in the long.

131
00:09:21.830 --> 00:09:23.110
It's a pretty big number.

132
00:09:23.120 --> 00:09:24.420
I'm pretty sure it does.

133
00:09:24.560 --> 00:09:25.740
Let's try that.

134
00:09:25.820 --> 00:09:32.450
So our press controls five again run it and you can see there are about 20 million 610000 people in

135
00:09:32.450 --> 00:09:33.730
Florida.

136
00:09:34.370 --> 00:09:39.590
Now in this case how about number of people on earth our income at those two lines and you could see

137
00:09:39.590 --> 00:09:45.110
my variable name is people on earth and there are about seven billion six hundred million people on

138
00:09:45.110 --> 00:09:45.510
earth.

139
00:09:45.740 --> 00:09:49.550
Now something that's interesting is as these numbers get bigger and bigger and bigger they're hard to

140
00:09:49.550 --> 00:09:49.870
read.

141
00:09:49.870 --> 00:09:52.340
It's really easy to forget zeros and so forth.

142
00:09:52.370 --> 00:09:57.950
So the C plus plus 14 standard allows you to use as little tick marks right there you can put them anywhere

143
00:09:57.950 --> 00:09:58.270
you want.

144
00:09:58.270 --> 00:10:02.240
It really doesn't care just to make it easier for you to read it strips them out.

145
00:10:02.240 --> 00:10:03.480
It just creates the number.

146
00:10:03.590 --> 00:10:10.130
If this doesn't compile on your end most likely you're not using the C++ 14 compiler using the C++ 11

147
00:10:10.130 --> 00:10:11.180
compiler.

148
00:10:11.180 --> 00:10:16.510
You could set it to C plus plus 14 or you could just get rid of these little tick marks to make it compile.

149
00:10:16.520 --> 00:10:19.310
So when I run this you'll see something interesting happen.

150
00:10:19.490 --> 00:10:22.030
I'm pressing control F5 again.

151
00:10:22.130 --> 00:10:26.530
Notice I'm getting an error the error says error narrowing conversion.

152
00:10:26.900 --> 00:10:32.270
It's trying to fit that number into a long and it doesn't fit.

153
00:10:32.270 --> 00:10:36.980
This is one of the benefits that I mentioned about using the list initialization right here with the

154
00:10:36.980 --> 00:10:38.420
curly braces.

155
00:10:38.420 --> 00:10:40.760
Notice what happens if I did that actually you know what.

156
00:10:40.760 --> 00:10:46.400
Let me just run this first as a long long which is really what I want because otherwise it's not going

157
00:10:46.400 --> 00:10:47.210
to fit.

158
00:10:47.540 --> 00:10:51.680
So I've got my long long and I'm going to build and run this.

159
00:10:51.680 --> 00:10:55.980
And you can see there are about seven point you can see the numbers correct.

160
00:10:56.270 --> 00:11:02.720
But if I did a regular initialization like a C-style initialization with an equal sign here or an assignment

161
00:11:02.720 --> 00:11:05.340
statement something like that.

162
00:11:05.960 --> 00:11:13.830
And we'll go back to long because we know it's not going to fit long and our build and run again look

163
00:11:13.850 --> 00:11:18.040
what prints out there are about negative 9 8 9 9 9 people on earth.

164
00:11:18.050 --> 00:11:19.960
That's an example of an overflow.

165
00:11:20.180 --> 00:11:23.130
But you also notice that we didn't get an error.

166
00:11:23.240 --> 00:11:26.640
That's one of the benefits of using this initialization.

167
00:11:26.690 --> 00:11:32.270
If I use lists in initialization it will catch those problems for me at compile time which is really

168
00:11:32.270 --> 00:11:33.460
really nice.

169
00:11:33.470 --> 00:11:39.140
So again I'll compile here.

170
00:11:39.530 --> 00:11:40.600
Control at 5.

171
00:11:40.640 --> 00:11:41.680
Boom there's the error.

172
00:11:41.690 --> 00:11:42.690
I know I've got a problem.

173
00:11:42.710 --> 00:11:46.080
I can fix it so I'll make this a long long.

174
00:11:47.020 --> 00:11:47.410
OK.

175
00:11:47.420 --> 00:11:48.530
So hopefully that makes sense.

176
00:11:48.530 --> 00:11:52.420
Always use that list initialization syntax it's so much better.

177
00:11:52.910 --> 00:11:55.690
In this case I want the distance to Alpha Centauri.

178
00:11:55.700 --> 00:11:56.360
That's pretty far.

179
00:11:56.360 --> 00:12:01.910
This is I believe in kilometers and kilometers is that's what my output statement says uncomment these

180
00:12:01.910 --> 00:12:03.140
two lines.

181
00:12:03.320 --> 00:12:07.140
And let's run this.

182
00:12:07.660 --> 00:12:12.740
And you can see that the distance to Alpha Centauri is and that's my number that's correct.

183
00:12:13.780 --> 00:12:15.890
OK so that's a good example of it overflow sure.

184
00:12:15.910 --> 00:12:22.370
Another example of an overflow at the end of this source code that may not be as obvious as this.

185
00:12:22.930 --> 00:12:26.250
OK so here's a couple of examples using floating point types.

186
00:12:26.260 --> 00:12:29.150
Remember these are real numbers these are numbers with decimal points.

187
00:12:29.170 --> 00:12:33.760
So in this case my car payment is 400 one dollars and 23 cents.

188
00:12:33.970 --> 00:12:41.110
I can uncomment this out obviously if I try to store for a one point two three into an integer I've

189
00:12:41.110 --> 00:12:44.630
got a problem because the integer would only hold the whole number.

190
00:12:44.650 --> 00:12:48.890
So the point to three would get truncated off it I could have a problem.

191
00:12:48.990 --> 00:12:50.940
So in this case let's run this.

192
00:12:51.640 --> 00:13:01.350
And now you can see that my car payment here is 401 23 OK if I want to store a larger number I could

193
00:13:01.350 --> 00:13:03.090
use a double.

194
00:13:03.450 --> 00:13:09.330
In this case I'm just storing PI and I'm hard coding pi to be three point 1 4 1 5 9 it could be obviously

195
00:13:09.330 --> 00:13:10.740
much much longer.

196
00:13:11.100 --> 00:13:19.750
And in this case it's a double and you can see that there is Pi three point 1 4 1 5 9.

197
00:13:19.880 --> 00:13:24.470
I can also store very large and very small numbers using long doubles.

198
00:13:24.680 --> 00:13:29.420
So in this case I'm storing 2.7 times tend to the 120 with power.

199
00:13:29.420 --> 00:13:30.910
That's a very large number.

200
00:13:31.000 --> 00:13:35.230
Number to store that into this large amount variable and then I'm going to display it.

201
00:13:35.240 --> 00:13:42.440
So that's built and run and you can see 2.7 times tend to the 120 with power is a very big number.

202
00:13:42.470 --> 00:13:44.770
You can see it's actually storing that correctly.

203
00:13:45.380 --> 00:13:50.110
The last one we'll look at is the bully and type the Boolean type is a true false value.

204
00:13:50.120 --> 00:13:55.440
So in this case comment that you see I've got a variable called Game Over.

205
00:13:55.480 --> 00:13:59.220
You is the correct underscore style here.

206
00:13:59.300 --> 00:14:01.050
I've got a variable called Game Over.

207
00:14:01.310 --> 00:14:09.020
And in this case you could see that I've been working on a project that's using camel case muscle memory

208
00:14:09.020 --> 00:14:09.890
kicks in.

209
00:14:09.890 --> 00:14:16.160
So in this case I've got a variable called Game Over and I'm initializing it to faults and then I'm

210
00:14:16.160 --> 00:14:18.450
saying the value of game over is.

211
00:14:18.590 --> 00:14:23.450
And you might expect that this would print up faults here but it doesn't print up vaults.

212
00:14:23.480 --> 00:14:29.740
What it does is it prints out 0 because as far as C++ is concerned 0 is.

213
00:14:31.230 --> 00:14:33.540
If it was true it would print out a 1.

214
00:14:33.540 --> 00:14:40.560
Now here's an example of an overflow that's not so obvious and a comment that out here I have a variable

215
00:14:40.560 --> 00:14:43.640
called value 1 and I've got another variable called value 2.

216
00:14:43.650 --> 00:14:49.860
They're both short integers and I'm assigning 30000 to this one and 0 0 0 to this one.

217
00:14:49.860 --> 00:14:52.770
Those numbers will fit in those variables.

218
00:14:53.370 --> 00:14:56.020
But then I'm going to create another variable called sum.

219
00:14:56.350 --> 00:14:59.670
And I've got a value 1 times value 2.

220
00:14:59.670 --> 00:15:05.120
Now I know that this the product of those I guess I should of called it product would be called product

221
00:15:05.130 --> 00:15:09.270
just to be a little bit more correct here.

222
00:15:10.300 --> 00:15:11.100
Here we go.

223
00:15:11.310 --> 00:15:15.690
So I know that the product of those two numbers does not fit in a short.

224
00:15:15.690 --> 00:15:17.080
So let's compile this

225
00:15:20.070 --> 00:15:25.850
and you could see that the sum of 30000 and 1000 is some negative number.

226
00:15:25.880 --> 00:15:28.020
Obviously that's an overflow error.

227
00:15:28.280 --> 00:15:29.740
Be very careful with these things.

228
00:15:29.740 --> 00:15:35.480
Make sure that sure those two pieces each will individually fit in the shorts but the products certainly

229
00:15:35.480 --> 00:15:36.480
can't.

230
00:15:36.980 --> 00:15:40.300
But notice the compiler is helping me get a compiler warning.

231
00:15:40.610 --> 00:15:43.590
You've got potentially a narrowing conversion here.

232
00:15:43.790 --> 00:15:49.310
So don't ignore those warnings as the computers do a pretty good job about predicting problems that

233
00:15:49.310 --> 00:15:50.850
can happen.

234
00:15:50.870 --> 00:15:52.420
OK so that concludes this video.

235
00:15:52.420 --> 00:15:58.110
You can see some simple examples of creating variables initialising variables using some of the C++

236
00:15:58.160 --> 00:15:59.000
primitive types.
