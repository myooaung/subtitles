1
00:00:05,570 --> 00:00:08,300
Welcome back to the Section 16 challenge solution.

2
00:00:08,300 --> 00:00:11,400
This is part one of these dilution to this challenge.

3
00:00:11,420 --> 00:00:14,400
This was a very very challenging exercise.

4
00:00:14,570 --> 00:00:17,480
I hope you're able to finish this and I hope your solution worked.

5
00:00:17,480 --> 00:00:19,970
As usual your solution could be different from mine.

6
00:00:19,970 --> 00:00:21,350
Very likely it is.

7
00:00:21,350 --> 00:00:22,990
So let's get started.

8
00:00:23,000 --> 00:00:27,980
First thing we want to do is we want to make this account class an abstract class and we know that we

9
00:00:27,980 --> 00:00:30,080
can do that with the pure virtual functions.

10
00:00:30,080 --> 00:00:31,790
So that's what I'm going to do right here.

11
00:00:31,790 --> 00:00:38,930
I'm coming down right here to my deposit withdraw functions and I'm going to say virtual and I'm going

12
00:00:38,930 --> 00:00:41,980
to make it pure virtual right there.

13
00:00:42,020 --> 00:00:43,850
My class is now abstract.

14
00:00:43,850 --> 00:00:47,860
I'm going to do for both of them.

15
00:00:48,590 --> 00:00:52,720
And again I've got a pure virtual function here as well.

16
00:00:53,390 --> 00:00:55,370
OK so that was easy right.

17
00:00:55,370 --> 00:00:56,050
That's cool.

18
00:00:56,060 --> 00:01:00,350
Eventually we'll get rid of this guy but replace it with the printable interface but we'll leave that

19
00:01:00,350 --> 00:01:01,160
for later.

20
00:01:01,160 --> 00:01:03,560
So we got those two pure virtual functions.

21
00:01:03,560 --> 00:01:07,100
So if I try to create an account object I won't be able to any longer.

22
00:01:07,100 --> 00:01:10,910
So let's take a look at the account implementation file and see if there's anything in here we need

23
00:01:10,910 --> 00:01:13,320
to change our constructors are fine.

24
00:01:13,370 --> 00:01:16,790
You might be thinking why do we need a constructor from I'm never going to create these things.

25
00:01:16,790 --> 00:01:21,320
Well you are right you are through the derived classes member of the constructor calling up the chain.

26
00:01:21,380 --> 00:01:23,790
So it's important that we have constructors here.

27
00:01:23,840 --> 00:01:26,160
There's our deposit and withdraw.

28
00:01:26,180 --> 00:01:29,080
Now these are pure virtual functions can we implement them.

29
00:01:29,150 --> 00:01:34,810
Absolutely we can and in this case it makes sense we'd get a really simple deposit really simple withdraw.

30
00:01:35,090 --> 00:01:40,070
In the case of the examples I gave you with a shape in your how do you draw a shape in the base class

31
00:01:40,070 --> 00:01:40,900
you really can't.

32
00:01:41,030 --> 00:01:45,040
But here we can say that deposit and withdraw this is the simplest case.

33
00:01:45,050 --> 00:01:47,250
And I'd argue that we could leave this in here.

34
00:01:47,270 --> 00:01:49,170
Now there is one little thing that's missing.

35
00:01:49,400 --> 00:01:50,750
That's our virtual destructor.

36
00:01:50,750 --> 00:01:52,120
That's really important.

37
00:01:52,130 --> 00:01:52,980
So let's do that.

38
00:01:53,000 --> 00:01:59,330
We'll say virtual The structure is the name of the class with the Tilney in front and we could implement

39
00:01:59,330 --> 00:02:04,670
this thing where we could just simply say it equals default and that's good enough that tells the compiler

40
00:02:04,670 --> 00:02:09,210
Hey just give me a default destructor in this case and that's fine.

41
00:02:09,350 --> 00:02:13,130
I don't need any special behavior in the destructor so that will be just fine.

42
00:02:13,640 --> 00:02:15,700
All right so now what are we to do next.

43
00:02:15,710 --> 00:02:19,930
Let's look at one of the derived classes so let's start with checking.

44
00:02:20,570 --> 00:02:24,850
So let's look at the header file for checking account you see here is derived from a count.

45
00:02:24,860 --> 00:02:25,910
That's fine.

46
00:02:25,910 --> 00:02:31,670
So remember I've got two pure virtual functions in my parent that I need to implement here so I'm implementing

47
00:02:31,670 --> 00:02:37,670
one of them right here so I want to make sure that this is virtual and I want to be sure that I'm overwriting

48
00:02:37,670 --> 00:02:38,600
this.

49
00:02:38,600 --> 00:02:42,990
That way the compiler is going to help me out if I rename something incorrectly or if I change one of

50
00:02:43,010 --> 00:02:44,690
the parameters or something.

51
00:02:44,780 --> 00:02:49,450
And what about this guy this deposit method we want to implement this guy and he ourselves as well.

52
00:02:49,670 --> 00:02:56,810
So we'll just say virtual bull and this is the deposit method.

53
00:02:56,960 --> 00:03:00,640
So we're going to implement this ourselves and it's expected to double.

54
00:03:00,770 --> 00:03:04,490
And again I'm overriding here.

55
00:03:04,490 --> 00:03:07,500
So I want to be sure that the compiler is helping me.

56
00:03:08,000 --> 00:03:08,750
Okay perfect.

57
00:03:08,750 --> 00:03:09,890
What else do I need here.

58
00:03:09,890 --> 00:03:16,280
You guessed it I need a virtual destructor for a checking account and I'm going to let the compiler

59
00:03:16,280 --> 00:03:19,880
give me a default version which is fine.

60
00:03:20,210 --> 00:03:20,510
OK.

61
00:03:20,510 --> 00:03:25,980
Now this guy wasn't here before so we're definitely going to have to implement that in the CBP file.

62
00:03:26,090 --> 00:03:29,120
So let's go into our file for checking account.

63
00:03:29,720 --> 00:03:33,790
And here's our withdrawal we're calling our parents withdrawal which is fine.

64
00:03:34,010 --> 00:03:36,330
Here's a constructor that looks good as well.

65
00:03:36,350 --> 00:03:39,190
Again these output operators will get rid of them later.

66
00:03:39,230 --> 00:03:48,290
But we need to implement this guy our deposit and it's going to be a checking account deposit.

67
00:03:48,290 --> 00:03:51,310
That's the class we're in.

68
00:03:51,860 --> 00:03:53,930
We don't need the override here.

69
00:03:54,050 --> 00:03:59,220
We already have it in our header file and we do need a name for this parameter.

70
00:03:59,690 --> 00:04:00,870
So what do we do here.

71
00:04:00,980 --> 00:04:10,140
Well it's simply going to return and color accounts deposit method and pass in the double.

72
00:04:10,250 --> 00:04:10,690
That's it.

73
00:04:10,730 --> 00:04:11,090
Right.

74
00:04:11,090 --> 00:04:14,030
I have nothing special to do here so I'm just calling my parents.

75
00:04:14,300 --> 00:04:16,130
So that takes care of checking account.

76
00:04:16,130 --> 00:04:19,540
Now let's go out to savings account and we did put the destructor in there right.

77
00:04:19,550 --> 00:04:20,290
Yes we did.

78
00:04:20,300 --> 00:04:22,690
So let's get a savings account.

79
00:04:22,790 --> 00:04:24,170
Same idea here.

80
00:04:24,200 --> 00:04:30,540
We've got a virtual function here that we're going to override.

81
00:04:30,710 --> 00:04:36,920
That's my deposit and we'll say override right here and then we've got to withdraw.

82
00:04:36,920 --> 00:04:40,490
So I also want to take care of that one here.

83
00:04:40,490 --> 00:04:47,410
It's all said bhool will call this withdraw and it expects that double amount.

84
00:04:47,450 --> 00:04:54,080
And again we're overriding this is one we'll have to implement because we were not implementing it before

85
00:04:54,470 --> 00:05:04,830
and then we also need a virtual destructor here in the name of the class savings account.

86
00:05:05,000 --> 00:05:09,070
Compiler give us one by default.

87
00:05:10,460 --> 00:05:11,190
OK.

88
00:05:11,450 --> 00:05:16,730
Now this withdrawal method is when we have to write Solas footwear implementation some opening up savings

89
00:05:16,790 --> 00:05:17,780
CGP.

90
00:05:18,370 --> 00:05:24,360
My constructor looks find my deposit looks fine we'll get rid of the insertion operator later.

91
00:05:24,590 --> 00:05:27,190
But let's implement this method here.

92
00:05:27,650 --> 00:05:30,270
So this is bhool for a savings account.

93
00:05:35,540 --> 00:05:37,240
And all we are doing here.

94
00:05:37,280 --> 00:05:40,690
And again we don't need the override here on the in the declaration.

95
00:05:40,850 --> 00:05:46,040
And what we're doing here is we're just simply returning our parent which is the account that we're

96
00:05:46,040 --> 00:05:50,480
asking you to withdraw that amount.

97
00:05:50,840 --> 00:05:51,970
That's it.

98
00:05:52,010 --> 00:05:56,320
And then the last one we've got is the trust accountants on the go to it's header file.

99
00:05:56,840 --> 00:05:58,790
And see what we've got here.

100
00:05:58,790 --> 00:06:00,740
We already have deposit and withdraw.

101
00:06:00,740 --> 00:06:01,340
That's good.

102
00:06:01,340 --> 00:06:02,600
We've already implemented them.

103
00:06:02,780 --> 00:06:07,700
So let's just be sure that we implemented them correctly and we didn't just that we are overriding them

104
00:06:07,700 --> 00:06:09,470
and not redefining them.

105
00:06:09,590 --> 00:06:16,850
So we'll put over right over here as well as on the withdraw.

106
00:06:18,390 --> 00:06:18,930
OK.

107
00:06:19,100 --> 00:06:19,490
That's it.

108
00:06:19,490 --> 00:06:22,460
Let's take a look at the C.P file.

109
00:06:22,460 --> 00:06:24,210
All that looks good.

110
00:06:24,770 --> 00:06:28,920
And the last thing we need here is our destructor.

111
00:06:30,410 --> 00:06:40,220
So we'll create a virtual destructor for our trust account and let the compiler give us one.

112
00:06:40,220 --> 00:06:40,710
All right.

113
00:06:40,760 --> 00:06:42,320
So that's the first step.

114
00:06:42,320 --> 00:06:48,200
So now let's go to our main and you'll notice I commented out all the driver code that I provided for

115
00:06:48,200 --> 00:06:48,420
you.

116
00:06:48,440 --> 00:06:53,300
I just want to start really fresh here and the first thing I want to do is let's just do this right

117
00:06:53,300 --> 00:06:53,920
here.

118
00:06:53,990 --> 00:07:02,330
Just create an account and call it Joe real simple let's build and run and we have an error.

119
00:07:02,960 --> 00:07:04,420
I forgot a semi-colon there.

120
00:07:04,550 --> 00:07:05,870
Try that again.

121
00:07:08,130 --> 00:07:10,040
And I spelled virtual wrong

122
00:07:13,020 --> 00:07:15,980
hands get all those errors out of the way there is a count.

123
00:07:15,990 --> 00:07:22,090
Joe finally So now we have a clean compile and it says variable Joe is abstract abstract.

124
00:07:22,100 --> 00:07:24,430
I can't do this so this is good right.

125
00:07:24,440 --> 00:07:25,430
This is a real good thing.

126
00:07:25,430 --> 00:07:28,470
We now know that our account class is abstract.

127
00:07:28,480 --> 00:07:29,960
We can't create any.

128
00:07:29,960 --> 00:07:33,760
So let's come at that out and let's create a checking account.

129
00:07:33,850 --> 00:07:35,720
Remember this is not using a base class pointer.

130
00:07:35,720 --> 00:07:38,810
This is just a regular old local variable.

131
00:07:38,810 --> 00:07:42,620
And we're going to create a checking account that let's just use the default.

132
00:07:42,980 --> 00:07:48,350
So now let's test this out we've created this object which is just a checking account and let's just

133
00:07:48,350 --> 00:07:49,720
play that and see what we get.

134
00:07:49,730 --> 00:07:54,690
Now this should still work because we overloaded those insertion operators when we did this previously.

135
00:07:54,830 --> 00:07:58,730
And as long as we're not coming at this with a base class pointer they should all still work.

136
00:07:58,730 --> 00:08:02,560
So let's try that out and see what we get.

137
00:08:02,570 --> 00:08:06,140
There we go we've got a checking account unnamed checking account with a zero balance.

138
00:08:06,140 --> 00:08:08,070
That's exactly what we expected.

139
00:08:08,090 --> 00:08:16,190
So let's create a savings account object we'll call it s and we'll initialize it to Frank with $5000

140
00:08:16,190 --> 00:08:24,590
balance and 2.6 percent interest and let's display that and see what it looks like.

141
00:08:24,590 --> 00:08:26,930
All right let's try that out.

142
00:08:27,020 --> 00:08:31,350
Here we go we've got a savings account object Frank five thousand 2.6 perfect.

143
00:08:31,370 --> 00:08:33,740
So this all seems to be working perfectly.

144
00:08:33,740 --> 00:08:36,360
So now why don't we create a base class pointer.

145
00:08:36,440 --> 00:08:38,840
So the base class is the account class rank.

146
00:08:38,860 --> 00:08:44,680
So we'll create a pointer called TTR and let's create a new trust account.

147
00:08:45,260 --> 00:08:51,920
So we'll create a new trust account on the heap and that will be let's say Leo with $10000 balance and

148
00:08:51,930 --> 00:08:55,880
2.6 percent interest.

149
00:08:55,880 --> 00:09:00,490
So that should create that object on the heap and the pointer will point to it.

150
00:09:00,500 --> 00:09:03,850
This was perfectly valid since a trust account is an account.

151
00:09:03,860 --> 00:09:06,140
Now let's display that and see what we get.

152
00:09:06,170 --> 00:09:10,020
We can't just play peachy here because that would display the address of that pointer.

153
00:09:10,020 --> 00:09:15,110
We need to display the object so we need to dereference PTO or we need to go to where Peter is pointing

154
00:09:15,860 --> 00:09:18,190
and an end line here.

155
00:09:18,200 --> 00:09:20,370
Now this won't work as we expect.

156
00:09:20,390 --> 00:09:26,390
The reason is we haven't really handled the insertion operator to work with dynamic polymorphism.

157
00:09:26,390 --> 00:09:32,060
So as far as the compiler is concerned that insertion operator compiler knows that PCR is a pointer

158
00:09:32,060 --> 00:09:32,950
to an account.

159
00:09:33,080 --> 00:09:35,840
It really doesn't care what type of account it's pointing to.

160
00:09:35,840 --> 00:09:40,520
So it's going to bind this statically and it'll slice that object that will slice the trust account

161
00:09:40,520 --> 00:09:42,740
stuff away and just keep the account part.

162
00:09:42,740 --> 00:09:47,900
So this should still display Leo in ten thousand though because all accounts have the name of their

163
00:09:47,900 --> 00:09:51,530
balance so let's give that a try and see what our output is.

164
00:09:51,540 --> 00:09:52,840
And that's exactly what happens.

165
00:09:52,840 --> 00:09:56,080
You see right here Count Leo ten thousand.

166
00:09:56,120 --> 00:09:58,160
We're not getting the trust part of us right.

167
00:09:58,180 --> 00:10:00,910
Sending on display displayed trust account and just displaying account.

168
00:10:00,980 --> 00:10:03,050
We'll fix that when we implement them.

169
00:10:03,080 --> 00:10:08,390
I printable interface that will be pretty cool so we can see that this seems to be working.

170
00:10:08,390 --> 00:10:11,360
Let's test this out and just test it out with s right here.

171
00:10:11,420 --> 00:10:19,580
Let me comment out this Leo part here and let's just say that we want to deposit let's say

172
00:10:22,090 --> 00:10:29,890
$10000 into S and then I want to display X again.

173
00:10:31,310 --> 00:10:37,250
So let's try that out and you can see here I have my savings account frank with 5000 and I just deposited

174
00:10:37,250 --> 00:10:38,590
10000 into it.

175
00:10:38,810 --> 00:10:42,380
It's a savings account so it's going to use that interest rate to give me a little bonus and that's

176
00:10:42,380 --> 00:10:43,610
exactly what happened.

177
00:10:43,610 --> 00:10:44,840
So that looks correct.

178
00:10:45,050 --> 00:10:47,050
And then finally let's withdraw.

179
00:10:47,150 --> 00:10:52,100
So now let's say we want to withdraw $10000 from us

180
00:10:55,430 --> 00:11:02,750
and again will display us and we'll test out our withdraw functionality here we'll give it a run and

181
00:11:02,750 --> 00:11:09,500
we can see that we have savings account 5000 that we deposited 10000 and then we withdrew 10000 So it's

182
00:11:09,500 --> 00:11:10,640
all looking good.

183
00:11:10,640 --> 00:11:15,410
So you see it wasn't too much work to get this to work with dynamic polymorphism.

184
00:11:15,410 --> 00:11:21,260
The next step now is let's get rid of all the overloaded insertion operators it's an that's in this

185
00:11:21,260 --> 00:11:25,340
code and let's create that printable interface and get that working.

186
00:11:25,460 --> 00:11:30,050
And then the last thing we'll do is we'll take care of those functions in the account Udal file and

187
00:11:30,050 --> 00:11:32,870
clean that up because there's a lot of duplicated code in there.
