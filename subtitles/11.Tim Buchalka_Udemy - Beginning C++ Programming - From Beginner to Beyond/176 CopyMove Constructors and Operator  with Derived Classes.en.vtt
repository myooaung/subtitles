WEBVTT
1
00:00:05.360 --> 00:00:11.480
In this video we'll learn how to copy and move constructor's an overloaded assignment work with inheritance

2
00:00:12.250 --> 00:00:12.920
as we've seen.

3
00:00:12.910 --> 00:00:18.280
Copy and move constructor's and the copy and move assignment operators are not automatically inherited

4
00:00:18.490 --> 00:00:20.310
from the base class.

5
00:00:20.500 --> 00:00:25.750
First let's remember that you may not have to provide these operations at all depending on your class

6
00:00:25.750 --> 00:00:27.040
and its composition.

7
00:00:27.040 --> 00:00:30.230
The compiler provided versions may be all you need.

8
00:00:30.250 --> 00:00:35.020
However we can explicitly invoke these special constructors and the overloaded assignment operators

9
00:00:35.110 --> 00:00:38.510
in our base class from the derived class if necessary.

10
00:00:40.210 --> 00:00:42.770
First let's look at the copy constructor.

11
00:00:43.390 --> 00:00:48.520
If we need to copy a Derived object then we must ensure that the base part of that derived object is

12
00:00:48.520 --> 00:00:49.860
also copied.

13
00:00:50.170 --> 00:00:56.320
If that base class has a copy constructor then we can explicitly invoke it in our derived copy constructors

14
00:00:56.350 --> 00:00:58.350
initialization list.

15
00:00:58.360 --> 00:01:03.820
This is very similar to what we did with our non-special constructors in the previous video.

16
00:01:03.820 --> 00:01:09.040
The only part that might be confusing is that the base class constructor expects a reference to a base

17
00:01:09.040 --> 00:01:13.530
object but we have a Derived object in the derived class.

18
00:01:13.810 --> 00:01:19.600
In this case the derived object is referenced by the variable other so we can invoke the base class

19
00:01:19.600 --> 00:01:20.680
and pass in other.

20
00:01:20.680 --> 00:01:22.080
How does that work.

21
00:01:22.120 --> 00:01:24.370
Well remember we have is a inheritance.

22
00:01:24.520 --> 00:01:30.700
So a derived is a base and since a derived is a base we can pass in a drive to a method that expects

23
00:01:30.700 --> 00:01:31.820
a base.

24
00:01:32.050 --> 00:01:38.490
In this case the compiler uses slicing and slices out the base part of the derived object.

25
00:01:38.770 --> 00:01:42.120
Slicing can sometimes cause issues but in this case it's fine.

26
00:01:42.130 --> 00:01:45.890
Since what we want to do is copy the base part of the derived object.

27
00:01:46.300 --> 00:01:50.240
Let's see the entire process in context.

28
00:01:50.530 --> 00:01:55.480
In this example we have a base class and it has an integer attribute named value.

29
00:01:55.900 --> 00:01:58.400
Let's just focus on the copy constructor.

30
00:01:58.600 --> 00:02:05.140
We construct a new object based on the other object and we simply copy other value to this top value

31
00:02:05.410 --> 00:02:07.880
and display a message to the console.

32
00:02:07.900 --> 00:02:11.230
You may be wondering why we need a copy constructor at all in this example.

33
00:02:11.320 --> 00:02:12.450
And you'd be absolutely correct.

34
00:02:12.460 --> 00:02:13.600
We don't.

35
00:02:13.600 --> 00:02:17.430
The compiler provided copy constructor would be perfectly appropriate here.

36
00:02:17.470 --> 00:02:22.540
However for instructional purposes I'm writing the copy constructor so that we can see exactly what's

37
00:02:22.540 --> 00:02:24.160
being called.

38
00:02:24.160 --> 00:02:29.020
Ok so now let's see the derived class here's the derived class.

39
00:02:29.020 --> 00:02:35.130
Notice that it's derived publicly from base and it adds an integer attribute named doubled value the

40
00:02:35.140 --> 00:02:41.800
derived class has its own copy constructor that expects a ref to a derived object that will be copied.

41
00:02:41.800 --> 00:02:49.090
In this case were explicitly copying the base part of other by invoking the base class copy constructor

42
00:02:49.180 --> 00:02:52.300
in the derived copy constructor initialization list.

43
00:02:52.570 --> 00:02:59.560
Again notice that we passed the other object which will be sliced to yield its base part once we copy

44
00:02:59.560 --> 00:03:00.460
the base part.

45
00:03:00.460 --> 00:03:05.250
We can take care of copying double value and then display a message to the console.

46
00:03:05.260 --> 00:03:12.210
The move constructor works the same way now let's you know overloaded copy assignment works.

47
00:03:12.480 --> 00:03:18.270
Here's our base class again and it has an overloaded copy assignment operator in this method we check

48
00:03:18.270 --> 00:03:24.540
for self assignment and then we assign the right hand sides values to this object and we return this

49
00:03:24.540 --> 00:03:25.350
object.

50
00:03:25.350 --> 00:03:28.890
This is exactly what we've learned already and done previously.

51
00:03:28.890 --> 00:03:31.290
Now let's see the derived class.

52
00:03:32.050 --> 00:03:39.630
Here's our derived class which is publicly derived from base as before it adds a double value attribute.

53
00:03:39.660 --> 00:03:43.050
It also has an overloaded copy assignment operator.

54
00:03:43.050 --> 00:03:48.660
In this method it's important that we assign the base part of the derived object and then take care

55
00:03:48.660 --> 00:03:50.170
of the doubled value.

56
00:03:50.220 --> 00:03:56.190
So after we check for self assignment we call our base classes overloaded assignment operator and pass

57
00:03:56.190 --> 00:03:59.570
in the right hand side object that we want to assign.

58
00:03:59.580 --> 00:04:02.460
This will take care of assigning the base part.

59
00:04:02.460 --> 00:04:07.050
Then we simply set double value to the right hand sides double value to complete the assignment of the

60
00:04:07.050 --> 00:04:08.370
derived part.

61
00:04:08.370 --> 00:04:11.560
Finally we just return that this object.

62
00:04:11.580 --> 00:04:16.680
Note that if we don't explicitly call the base classes overloaded assignment operator then the base

63
00:04:16.680 --> 00:04:23.030
part will not be assigned again to move assignment works in a similar manner.

64
00:04:23.040 --> 00:04:24.990
OK so let's recap.

65
00:04:25.050 --> 00:04:30.340
Often you don't need to provide your own copy move constructors or overloaded assignment operators.

66
00:04:30.630 --> 00:04:35.550
If you do not define them in the derived class then the compiler will create them automatically and

67
00:04:35.550 --> 00:04:40.740
call the base class versions for you if you do provide them in the derived class.

68
00:04:40.860 --> 00:04:45.230
Then you must invoke the base versions explicitly yourself.

69
00:04:45.240 --> 00:04:51.240
Finally be careful when you use raw pointers and dynamically allocated memory especially if both the

70
00:04:51.240 --> 00:04:53.750
base and the derived classes have raw pointers.

71
00:04:53.940 --> 00:04:59.810
If so you'll likely want deep copy semantics for both the base and derived classes.

72
00:04:59.970 --> 00:05:03.740
So let's head over to the idea and we'll step through this example.

73
00:05:04.590 --> 00:05:05.950
Ok so I'm backing the idea.

74
00:05:05.940 --> 00:05:12.790
I'm in the section 15 workspace in the copy constructor assignment operator project.

75
00:05:12.840 --> 00:05:17.010
Now this project is very similar to what we've seen before I'll scroll up here and you can see we have

76
00:05:17.010 --> 00:05:23.460
a base class that has an integer attribute called value and then we've got no args constructor and overloaded

77
00:05:23.460 --> 00:05:24.840
integer constructor.

78
00:05:24.900 --> 00:05:30.810
A copy constructor here and an overloaded copy assignment operator and these are exactly what we've

79
00:05:30.810 --> 00:05:34.800
seen before and we also have a destructor of course down here at the bottom.

80
00:05:34.800 --> 00:05:39.720
What we're doing here is when we get no Oren's will set value to 0 when we get an integer we'll set

81
00:05:39.720 --> 00:05:41.770
value to whatever integer we get.

82
00:05:41.790 --> 00:05:44.270
In this case here's my copy constructor.

83
00:05:44.430 --> 00:05:47.900
Again this the compiler provided one would have been great.

84
00:05:47.910 --> 00:05:50.430
But I want to make sure that you see how these things are called.

85
00:05:50.460 --> 00:05:55.620
So in this case I'm just copying the others value to this value and the same thing with the overloaded

86
00:05:55.620 --> 00:05:57.180
copy assignment operator.

87
00:05:57.180 --> 00:06:01.650
I'm checking that we don't have self assignment and I'm just assigning the right hand sides value to

88
00:06:01.740 --> 00:06:02.740
this value.

89
00:06:03.090 --> 00:06:04.210
OK great.

90
00:06:04.230 --> 00:06:08.090
Let me close down this derive So we'll get to the derived in a little bit.

91
00:06:08.460 --> 00:06:11.980
So if we run this we've got Here's a real simple main.

92
00:06:11.990 --> 00:06:14.020
I've got a breakpoint right aligned 65.

93
00:06:14.130 --> 00:06:19.750
The first thing we want to do is we want to create a B object and we're providing an integer as an initializer.

94
00:06:19.920 --> 00:06:25.080
What we expect there is that the overloaded integer constructor fires and that's exactly what happened.

95
00:06:25.230 --> 00:06:30.510
Then we've got a copy constructor because we're creating a B one based on B and then finally an assignment

96
00:06:30.510 --> 00:06:31.120
operator.

97
00:06:31.170 --> 00:06:32.340
And this is copy assignment.

98
00:06:32.340 --> 00:06:34.130
Here this is an l value.

99
00:06:34.510 --> 00:06:41.960
OK so let's walk through this and this should be pretty much review from what we've done before.

100
00:06:41.970 --> 00:06:46.020
I just want to make sure that you understand the base part before we do the derived part.

101
00:06:46.020 --> 00:06:47.830
All right so I'm right here on line 65.

102
00:06:47.820 --> 00:06:50.440
I'm just about to create that object right here B.

103
00:06:50.610 --> 00:06:51.750
So let's step through this.

104
00:06:51.750 --> 00:06:56.050
And we expect the base overloaded integer constructor to be called.

105
00:06:56.400 --> 00:06:59.420
And that's exactly where we are right here on line 16.

106
00:06:59.610 --> 00:07:07.980
Will set the value to 100 which is what X is right here and it will display its base constructor and

107
00:07:07.980 --> 00:07:08.390
that's it.

108
00:07:08.400 --> 00:07:10.600
We've just constructed this object B.

109
00:07:10.650 --> 00:07:12.220
Let's take a look at it real quick.

110
00:07:12.240 --> 00:07:16.380
You can see its value is 100 and that's a base class object.

111
00:07:16.380 --> 00:07:21.300
Now we're going to construct B one which is also a base class object based on be so we're going to call

112
00:07:21.300 --> 00:07:25.830
it a copy constructor and you can see the cut because struct are right here on line 19.

113
00:07:26.100 --> 00:07:29.460
So let's do that and a double clicked.

114
00:07:29.480 --> 00:07:34.740
But you'll see what I mean here we are in base and we set this value to the others value and we just

115
00:07:34.740 --> 00:07:38.000
assume we're going to display's base copy constructor here in a second.

116
00:07:38.340 --> 00:07:41.290
So let me execute that and that's it.

117
00:07:41.340 --> 00:07:48.720
Now you can see that B and B one are indeed copies of one another and we use the base copy constructor

118
00:07:48.720 --> 00:07:50.160
to do that.

119
00:07:50.160 --> 00:07:52.620
Finally we're going to say B equals be one.

120
00:07:52.620 --> 00:07:54.840
In this case B already exists.

121
00:07:54.930 --> 00:07:56.220
So this is not a constructor.

122
00:07:56.220 --> 00:07:57.800
This is copy assignment.

123
00:07:58.110 --> 00:08:04.360
So we expect this method right here on line 24 to be called because that's my copy assignment operator.

124
00:08:04.400 --> 00:08:06.370
So I step through this.

125
00:08:06.390 --> 00:08:10.990
There it's called just say base operator equals being called.

126
00:08:10.990 --> 00:08:16.840
It's not self assignment and I'm simply assigning the right hand value to this value and returning the

127
00:08:16.840 --> 00:08:18.840
object and I'm done.

128
00:08:19.330 --> 00:08:21.850
OK so you can see exactly what's happened.

129
00:08:22.120 --> 00:08:23.340
Exactly what we expected.

130
00:08:23.340 --> 00:08:28.780
Right now we're going to unwind because these objects are going out of scope so we expect B one to be

131
00:08:28.780 --> 00:08:34.090
destroyed first and then be to be destroyed second so the first Can the first destructor is the one

132
00:08:34.090 --> 00:08:36.960
for BE1 and will execute that.

133
00:08:36.970 --> 00:08:42.740
You can see the output right here and then the destructor for the B object executes.

134
00:08:42.760 --> 00:08:44.420
And our program is done.

135
00:08:45.070 --> 00:08:47.410
OK so now let me comment these lines out.

136
00:08:47.650 --> 00:08:52.770
And what we'll do is we'll uncomment these lines and will go through this code in a sec.

137
00:08:53.050 --> 00:08:59.260
I'm willing to move that breakpoint down to line 69 and let's take a look at our derived class right

138
00:08:59.260 --> 00:08:59.400
here.

139
00:08:59.400 --> 00:09:01.340
I'll expand it.

140
00:09:01.360 --> 00:09:06.090
So here we have a derived class that is derived publicly from base.

141
00:09:06.100 --> 00:09:12.440
It adds its own attribute doubled value remember it gets value from base but we've added double value.

142
00:09:12.610 --> 00:09:17.480
And here I've got a no args constructor and it invokes the base classes.

143
00:09:17.680 --> 00:09:21.980
No args constructor because we want to make sure that the mean this won't happen automatically.

144
00:09:22.030 --> 00:09:24.460
But I'm just doing it explicitly here.

145
00:09:24.460 --> 00:09:29.530
Then we've got the overloaded constructor for the drive and what we do here is we call the overloaded

146
00:09:29.890 --> 00:09:35.410
base constructor for an int to write here and when that's done then we take care of initializing our

147
00:09:35.410 --> 00:09:42.940
own stuff which in this case is double value value which we simply initialize it to two times X and

148
00:09:42.940 --> 00:09:45.600
then we've got our copy constructor right here.

149
00:09:45.610 --> 00:09:51.910
It expects a derived and what we do here is we call our base classes copy constructor and we pass.

150
00:09:51.940 --> 00:09:58.900
Other other is a derived member base expects a base but since a derived is a base we can certainly pass

151
00:09:58.960 --> 00:10:03.430
other in here and when we go through the debugger in this case I'll show you the slicing and how it

152
00:10:03.430 --> 00:10:04.610
works.

153
00:10:04.690 --> 00:10:07.200
Then we initialize our part and we're done.

154
00:10:07.480 --> 00:10:12.160
And then finally we've got the assignment operator copy assignment operator where we check for sulpha

155
00:10:12.160 --> 00:10:15.050
assignment and this line is really important here.

156
00:10:15.070 --> 00:10:20.650
What I'm doing here is we're calling our base classes overloaded assignment operator and we're passing

157
00:10:20.650 --> 00:10:22.340
in the right hand side.

158
00:10:22.480 --> 00:10:29.250
Again that method in our base class expects a base object here read a ref to a base object.

159
00:10:29.260 --> 00:10:34.790
What we're doing here is we're passing in a derived so the same idea we're going to get slicing there.

160
00:10:34.840 --> 00:10:40.660
Then once the base is assigned I take care of assigning the part of the derived that really this method

161
00:10:40.660 --> 00:10:44.740
is only concerned about and we return this and we're done.

162
00:10:44.830 --> 00:10:46.690
OK so let's take a look at the main real quick.

163
00:10:46.690 --> 00:10:47.740
Here we are.

164
00:10:47.780 --> 00:10:54.190
It's very similar to the example with the base here recreating D which is a derived class object and

165
00:10:54.190 --> 00:10:58.840
we're using in the initializer of the integer initializer sort of call the overloaded constructor.

166
00:10:58.840 --> 00:11:05.200
Then we're copy constructing D1 from D and then finally we're going to do copy assignment from D-1 to

167
00:11:05.200 --> 00:11:05.890
D.

168
00:11:06.320 --> 00:11:07.770
Ok so I think that's.

169
00:11:08.020 --> 00:11:09.780
I think you get the picture of what's going on.

170
00:11:09.780 --> 00:11:12.310
It will definitely make sense now when we step through it.

171
00:11:12.310 --> 00:11:17.890
So let's start the debugger and step through this example.

172
00:11:18.520 --> 00:11:20.710
So we're right here on line 69.

173
00:11:20.740 --> 00:11:23.490
We're just about to construct that D object.

174
00:11:23.560 --> 00:11:30.160
We expect this constructor right here on line 43 to execute the overloaded constructor that expects

175
00:11:30.160 --> 00:11:31.050
an integer.

176
00:11:31.090 --> 00:11:35.240
So I step in and that's exactly where I'm at now.

177
00:11:35.260 --> 00:11:42.190
I need to construct the base part of me so I'm going to invoke my base classes overloaded constructor

178
00:11:42.410 --> 00:11:44.170
and pass in X to it.

179
00:11:44.170 --> 00:11:47.170
So you can see that that's what's happening now.

180
00:11:47.170 --> 00:11:53.560
I'm now in my base class constructor which is going to take care of initializing that base part of me

181
00:11:54.250 --> 00:11:57.250
so will do that will display.

182
00:11:57.250 --> 00:11:58.650
Base constructor.

183
00:11:58.870 --> 00:12:04.810
And you can see now that I'm on line 45 so I'm back in my derived constructor just initialize the base

184
00:12:05.250 --> 00:12:10.890
initialized double Vau and now it's is going to do a simple display statement and we're good.

185
00:12:10.990 --> 00:12:17.950
So we've just created that db object and you can see the object looks like 100 from my base value and

186
00:12:17.950 --> 00:12:20.560
200 for my doubled value.

187
00:12:21.310 --> 00:12:23.590
OK so now let's look at the copy constructor.

188
00:12:23.590 --> 00:12:25.180
That's what's being called here.

189
00:12:25.180 --> 00:12:28.490
Remember we're constructing the scroll up just a little bit here.

190
00:12:28.600 --> 00:12:30.720
We're constructing D-1 based on D.

191
00:12:30.850 --> 00:12:35.710
So we expect to be called Huizar copy constructor right here on line 47.

192
00:12:35.920 --> 00:12:37.440
So let's do that.

193
00:12:37.480 --> 00:12:43.510
So I think I double clicked with what really happened was that our derived copy constructor got called

194
00:12:43.900 --> 00:12:47.730
and that it immediately called our base copy constructor and we passed an other.

195
00:12:47.740 --> 00:12:51.660
Now remember other was or is it derives object here.

196
00:12:51.940 --> 00:12:55.680
But now I'm up here in my base class copy constructor.

197
00:12:55.750 --> 00:12:58.930
But look at other you can see what I passed in.

198
00:12:58.930 --> 00:13:06.100
Now it's 100 right but other originally had that doubled value as well so that got sliced out and the

199
00:13:06.100 --> 00:13:09.410
only piece we're interested in is the base part of that object.

200
00:13:09.430 --> 00:13:10.930
So that's what's happening here.

201
00:13:10.960 --> 00:13:13.370
So we'll continue executing this.

202
00:13:13.390 --> 00:13:21.610
Now we just copy constructed our base and when we come back right here on line 48 or 49 we've set double

203
00:13:21.610 --> 00:13:25.400
value and now our derived copy constructor is done.

204
00:13:25.420 --> 00:13:29.910
So you can see that the derived copy constructor will you'll see that on the output right here.

205
00:13:30.760 --> 00:13:36.980
You see that the derived copy constructor invoked the base copy constructor and it passed in that derived

206
00:13:37.000 --> 00:13:39.460
object to it which got sliced.

207
00:13:40.040 --> 00:13:44.290
OK so last thing left to do is the assignment operator copy assignment.

208
00:13:44.290 --> 00:13:48.270
So now we're going to say D equals D1 or signed d one to D.

209
00:13:48.310 --> 00:13:48.820
Right.

210
00:13:49.090 --> 00:13:55.780
So we're here we expect line 52 to it to execute right here that's our copy assignment for derived.

211
00:13:55.780 --> 00:13:58.770
So I'll click this I'll try to click it once.

212
00:13:58.990 --> 00:13:59.480
Good.

213
00:13:59.500 --> 00:14:05.400
So now that's we're in line 53 now we're simply going to display derived operator equals.

214
00:14:05.770 --> 00:14:08.050
We're going to check for self assignment.

215
00:14:08.630 --> 00:14:15.490
And now what I want to do is I want to I want to copy the right hand side to the left hand side but

216
00:14:15.490 --> 00:14:17.000
only the base part.

217
00:14:17.260 --> 00:14:22.780
So in this case I want to call my base classes overloaded operator in pass in right hand side.

218
00:14:22.780 --> 00:14:27.940
So now take a look at right hand side right hand side is a derived right.

219
00:14:27.940 --> 00:14:32.550
So it's kind of base and it's got it's derived double value here.

220
00:14:32.740 --> 00:14:39.660
But watch what happens when I call that method right here UCLA transfer control to it.

221
00:14:39.880 --> 00:14:42.970
And this is where I'm at right here on line 25.

222
00:14:43.030 --> 00:14:43.900
Look at that object.

223
00:14:43.900 --> 00:14:45.130
Now look at right hand side.

224
00:14:45.130 --> 00:14:47.130
Notice that now it's a base now.

225
00:14:47.140 --> 00:14:48.930
So it just got sliced right.

226
00:14:48.930 --> 00:14:51.500
That double part is not part of a base.

227
00:14:51.520 --> 00:14:53.180
So it's it's sliced out.

228
00:14:53.620 --> 00:14:55.680
So now we just keep executing.

229
00:14:55.680 --> 00:15:01.930
We're going to execute the base operator equal which assigns the right hand sides value to the left

230
00:15:01.930 --> 00:15:02.350
hand side.

231
00:15:02.360 --> 00:15:10.190
Vallière this in this case since it's a member function and we just assigned the base part.

232
00:15:10.180 --> 00:15:11.530
We're now in line 57.

233
00:15:11.530 --> 00:15:17.760
We're going to take care of the double the double value part of us and we're done.

234
00:15:17.860 --> 00:15:18.670
That's it.

235
00:15:18.790 --> 00:15:19.850
Pretty straightforward.

236
00:15:20.020 --> 00:15:25.780
Now obviously these values are going to be the same because we just assign them and they both have a

237
00:15:25.780 --> 00:15:28.480
base part and a derived part.

238
00:15:28.480 --> 00:15:32.740
Now we are going to go out of scope so we need to unwind and destroy these objects.

239
00:15:32.740 --> 00:15:37.130
So the destructors will be called in the reverse order of the constructors right.

240
00:15:37.300 --> 00:15:42.730
So the first destructor that will be called is the one for D-1 here and will execute that and you can

241
00:15:42.730 --> 00:15:43.890
see that to do right.

242
00:15:43.900 --> 00:15:53.160
Destructor executes followed by the base destructor right up here and 9:32 There we go.

243
00:15:53.160 --> 00:15:55.940
And then the same thing will happen with the next object.

244
00:15:59.380 --> 00:16:01.470
And our program is done.

245
00:16:01.960 --> 00:16:02.220
OK.

246
00:16:02.230 --> 00:16:07.390
So this gives you some insight into the way that did the derived constructors and copy constructors

247
00:16:07.390 --> 00:16:08.580
work.

248
00:16:08.680 --> 00:16:10.150
You could see it really make sense.

249
00:16:10.150 --> 00:16:16.270
The only thing that might be a little confusing at the beginning is that for example our derived copy

250
00:16:16.270 --> 00:16:23.950
constructor and operator equal expect a derived and the base class versions expect a base.

251
00:16:23.950 --> 00:16:26.740
Same here but that's where the slicing comes in.

252
00:16:26.740 --> 00:16:31.390
We can certainly pass a derived into here because a derived is a base.

253
00:16:32.070 --> 00:16:33.320
OK so that covers it.

254
00:16:33.340 --> 00:16:35.140
If there are any questions please let me know.
