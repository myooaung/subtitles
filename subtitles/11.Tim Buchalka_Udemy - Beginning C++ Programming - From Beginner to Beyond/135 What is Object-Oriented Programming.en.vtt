WEBVTT
1
00:00:05.510 --> 00:00:09.430
In this video we'll talk a bit about what object oriented programming is all about.

2
00:00:10.170 --> 00:00:14.870
But before we do that let's review procedural programming and its limitations.

3
00:00:16.870 --> 00:00:21.500
Procedural programming is pretty much what we've been doing up to this point in the course.

4
00:00:21.700 --> 00:00:28.090
The focus of procedural programming is the function we modularize our programs by creating many functions

5
00:00:28.090 --> 00:00:31.300
that each specify a process or action in the program.

6
00:00:31.420 --> 00:00:37.850
So procedural programs are basically a collection of functions in procedural programming we declare

7
00:00:37.850 --> 00:00:43.310
our data separate from the functions and then wherever we need to function to process or use our data

8
00:00:43.580 --> 00:00:46.240
we pass in the data to the function.

9
00:00:46.280 --> 00:00:50.720
If you recall our challenge from Section 11 that's exactly what we did.

10
00:00:50.780 --> 00:00:55.730
There's absolutely nothing wrong with procedural programming and in many cases you have to use it since

11
00:00:55.730 --> 00:01:01.850
not all languages support object oriented features procedural programming is also fairly easy to learn

12
00:01:02.090 --> 00:01:07.280
since we're pretty good at breaking up a task into subtasks which is exactly what procedural programming

13
00:01:07.280 --> 00:01:08.480
is all about.

14
00:01:08.480 --> 00:01:15.240
However procedural programming has some limitations one of the limitations with procedural programming

15
00:01:15.540 --> 00:01:19.020
is that the functions need to know about the structure of the data.

16
00:01:19.020 --> 00:01:20.660
This may not sound like a big deal.

17
00:01:20.700 --> 00:01:25.890
But suppose we have a program with hundreds of functions and many of those functions expect a specific

18
00:01:25.890 --> 00:01:28.120
data structure as an argument.

19
00:01:28.320 --> 00:01:33.720
If the structure or format for that data structure being passed around changes then this would affect

20
00:01:33.720 --> 00:01:35.400
many many functions.

21
00:01:35.400 --> 00:01:39.800
These functions might even have to be modified to handle the new format of the data.

22
00:01:39.810 --> 00:01:44.400
This could have a ripple effect in the program and the amount of effort needed to change and then test

23
00:01:44.430 --> 00:01:48.220
all of the updated functions could be substantial.

24
00:01:48.260 --> 00:01:53.840
I've worked on very very large projects where the decision was made not to upgrade a data structure

25
00:01:54.080 --> 00:01:59.060
because the changes needed in the rest of the program would be too expensive in programmer and testing

26
00:01:59.060 --> 00:01:59.840
time.

27
00:02:00.680 --> 00:02:05.420
The real limitation is to procedural programming really begin to show as programs become larger and

28
00:02:05.420 --> 00:02:12.800
more complex as procedural programs get larger and larger they become more difficult to understand since

29
00:02:12.800 --> 00:02:17.260
the number of connections in the program becomes very hard to trace by hand.

30
00:02:17.660 --> 00:02:22.770
This leads to a problem maintaining the software extending the program and finding and fixing bugs.

31
00:02:23.570 --> 00:02:29.330
Also reusing functions and data structures that we wrote for one program in another program becomes

32
00:02:29.330 --> 00:02:35.960
much more difficult since after time we end up with code whose behavior isn't that easy to visualize.

33
00:02:35.960 --> 00:02:39.640
Finally the code becomes more fragile and easier to break.

34
00:02:39.680 --> 00:02:42.460
That means that when we add new functionality or fix a bug.

35
00:02:42.770 --> 00:02:46.430
The chances of introducing another bug is high.

36
00:02:46.430 --> 00:02:48.240
This happens more often than you would think.

37
00:02:48.300 --> 00:02:53.620
And it happens more in large procedural programs than it happens in large object oriented programs.

38
00:02:54.020 --> 00:02:58.200
OK so now let's talk about some of the principal features of object oriented programming.

39
00:03:00.130 --> 00:03:03.700
So what does Object-Oriented Programming all about in this video.

40
00:03:03.700 --> 00:03:07.720
I'm focusing on object oriented programming and its benefits.

41
00:03:07.720 --> 00:03:13.030
We can also have Object Oriented Analysis object oriented design object Torreon testing and so forth.

42
00:03:13.850 --> 00:03:20.110
Object oriented is all about modeling your software in terms of classes and objects.

43
00:03:20.120 --> 00:03:23.240
There's some new jargon to learn along the way but it's not so bad.

44
00:03:23.330 --> 00:03:27.620
Don't worry if it all doesn't click right away we'll be using this new terminology a lot and the rest

45
00:03:27.620 --> 00:03:28.470
of the course.

46
00:03:29.540 --> 00:03:34.010
These classes and objects modeled real world entities in your problem domain.

47
00:03:34.010 --> 00:03:40.430
So if you're writing an application that allows users to store edit and manipulate images like a photo

48
00:03:40.430 --> 00:03:48.240
on a Mac or photos on a PC then your classes might be album photo slide show location and so forth if

49
00:03:48.240 --> 00:03:53.820
you're modeling a student enrollment system your classes might be student course Professor you get the

50
00:03:53.820 --> 00:03:54.800
idea.

51
00:03:54.870 --> 00:03:58.860
Why is this such a big deal and how is it different from procedural programming.

52
00:03:58.860 --> 00:04:01.540
Well first let's talk about why it's such a big deal.

53
00:04:01.620 --> 00:04:05.890
It's all about abstraction as our programs grow more and more complex.

54
00:04:05.910 --> 00:04:12.870
We need ways to deal with the complexity classes and objects are one way to do just that now rather

55
00:04:12.870 --> 00:04:17.610
than thinking in terms of first name last name student ID credit hours and so forth.

56
00:04:17.790 --> 00:04:22.380
We can think in terms of student and all that detail comes along with it.

57
00:04:22.560 --> 00:04:29.040
Not only that but operations like register drop course add chorus and so forth also come along with

58
00:04:29.040 --> 00:04:29.900
it.

59
00:04:29.910 --> 00:04:35.550
So if Frank is an object and it was created from the Student class I can send a message to Frank and

60
00:04:35.550 --> 00:04:38.820
ask Frank if he's registered this term.

61
00:04:38.880 --> 00:04:43.350
This is very different from procedural programming where I would have a function that would tell me

62
00:04:43.350 --> 00:04:47.570
if the student is registered and then I would have to pass a student to that function.

63
00:04:48.370 --> 00:04:49.450
You might ask so what.

64
00:04:49.450 --> 00:04:52.840
It still works in procedural programming and you'd be correct.

65
00:04:52.930 --> 00:04:56.930
But now the function needs to know how to determine if the student is currently registered.

66
00:04:57.800 --> 00:05:02.390
If this business logic changes then we need to figure out everywhere in the program that knows this

67
00:05:02.390 --> 00:05:08.040
so we can update the code in the Object-Oriented solution only the Student class knows this.

68
00:05:08.150 --> 00:05:10.770
So a precise change is all that's necessary.

69
00:05:12.870 --> 00:05:19.380
The fact that objects contain data and operations that work on that data is called encapsulation and

70
00:05:19.380 --> 00:05:23.030
it's an extension of the abstract data type in computer science.

71
00:05:23.040 --> 00:05:28.050
Now the data and the operations are together in the class where they belong and not spread across many

72
00:05:28.050 --> 00:05:34.680
functions each passing of receiving data encapsulation is another mechanism used by object oriented

73
00:05:34.680 --> 00:05:38.720
programming to help us deal with complexity.

74
00:05:38.970 --> 00:05:44.580
We can take the idea of encapsulation even further with information hiding Object-Oriented Programming

75
00:05:44.580 --> 00:05:51.200
allows us to hide implementation specific logic in a class so that it's available only within the class.

76
00:05:51.210 --> 00:05:57.240
This is a super powerful concept since it allows us to provide a public interface to the class and hide

77
00:05:57.240 --> 00:05:58.830
everything else.

78
00:05:58.830 --> 00:06:04.170
Now we know that the user of the class can't mess with the implementation specific code since they never

79
00:06:04.170 --> 00:06:05.670
knew about it in the first place.

80
00:06:05.670 --> 00:06:07.200
That's pretty cool.

81
00:06:07.200 --> 00:06:14.570
This makes the code easier to maintain debug and extend object oriented programming is also all about

82
00:06:14.570 --> 00:06:21.260
reusability re-usability is defined in terms of using something from this program in another program.

83
00:06:21.350 --> 00:06:27.590
Since classes are pretty much encapsulated units of data and operations reusing them in other applications

84
00:06:27.830 --> 00:06:32.960
is much easier and since the class has already been tested we get that benefit as well.

85
00:06:32.960 --> 00:06:36.920
This leads to faster development and better quality software.

86
00:06:36.920 --> 00:06:42.440
Finally you've probably heard about inheritance inheritance allows us to create a new class based on

87
00:06:42.440 --> 00:06:48.800
an existing class by only adding or modifying the elements that we need to be able to create a new class.

88
00:06:48.800 --> 00:06:54.710
For example suppose we have an account class that models a basic bank account so it has a balance and

89
00:06:54.710 --> 00:06:57.620
the regular withdrawn deposit methods.

90
00:06:57.620 --> 00:07:02.490
Now suppose we have the need for a special trust account class and our business logic says that this

91
00:07:02.540 --> 00:07:08.510
type of account is limited to three withdrawals per year and each withdrawal cannot exceed 10 percent

92
00:07:08.510 --> 00:07:10.600
of the current account balance.

93
00:07:10.700 --> 00:07:15.920
We could add this logic to the account class that we already have and have an enumeration or some other

94
00:07:15.920 --> 00:07:21.380
kind of discriminant that determines what type of account we have and then execute the appropriate if

95
00:07:21.380 --> 00:07:23.040
else logic.

96
00:07:23.120 --> 00:07:28.790
Sure that works but what if we expect lots of variations to that account class like a money market account

97
00:07:29.030 --> 00:07:30.790
a CD account and so forth.

98
00:07:31.010 --> 00:07:37.280
And each one of them has its own business logic not only for withdrawal but also for deposit and some

99
00:07:37.280 --> 00:07:40.030
accounts change fees and others produced interest income.

100
00:07:40.030 --> 00:07:45.590
You get the idea this could quickly make that simple account class that we started out with a beast

101
00:07:45.590 --> 00:07:47.920
that no programmer wants to deal with.

102
00:07:48.110 --> 00:07:54.740
In this case we can derive our new class from the existing account class and add the appropriate behavior

103
00:07:54.740 --> 00:07:58.940
in the new class without modifying the original class at all.

104
00:07:58.940 --> 00:08:05.480
This leads to re-usability as well as polymorphic classes since all the derived classes we created are

105
00:08:05.480 --> 00:08:07.270
in fact still accounts.

106
00:08:07.280 --> 00:08:11.390
We'll learn more about the power of polymorphism later in this section.

107
00:08:11.400 --> 00:08:13.620
So 0 sounds pretty amazing right.

108
00:08:13.760 --> 00:08:19.080
Well while I can certainly help us develop large programs that are easier to maintain test debug and

109
00:08:19.100 --> 00:08:22.530
we use components from it's not a panacea.

110
00:08:22.670 --> 00:08:24.880
OA won't make bad code better.

111
00:08:24.920 --> 00:08:26.620
It will likely make it worse.

112
00:08:26.630 --> 00:08:32.810
Also 00 is not suitable for every application and not everything decomposes into a class.

113
00:08:32.810 --> 00:08:37.670
There are sometimes nonfunctional requirements that horizontally cross cut a system and these tend to

114
00:08:37.670 --> 00:08:41.000
add tangled code within existing classes.

115
00:08:41.000 --> 00:08:45.740
Remember if you have a small program that won't be around for any significant amount of time maybe it's

116
00:08:45.740 --> 00:08:51.710
an internal program that you use to automate something then Object-Oriented Programming might be overkill.

117
00:08:51.710 --> 00:08:58.090
A simple procedural or scripting program may be perfectly appropriate generally object oriented programming

118
00:08:58.090 --> 00:09:04.570
has a steep learning curve than procedural programming C++ in particular is considered one of the most

119
00:09:04.570 --> 00:09:07.240
difficult programming languages to learn.

120
00:09:07.240 --> 00:09:12.280
Also there are many Object-Oriented languages out there and while they all support classes and objects

121
00:09:12.280 --> 00:09:17.500
and so forth the way that they support them can be quite different not only syntactically but also in

122
00:09:17.550 --> 00:09:21.100
behavior as mentioned in the beginning of this video.

123
00:09:21.110 --> 00:09:25.930
It usually takes more upfront design time in order to write an object oriented program.

124
00:09:25.970 --> 00:09:31.850
In fact large object oriented programs sometimes go through significant upfront design.

125
00:09:32.030 --> 00:09:37.580
Finally Object-Oriented programs tend to be larger in size than non object oriented programs and can

126
00:09:37.580 --> 00:09:43.120
sometimes be slower and more complex since are so much more going on behind the scenes.

127
00:09:43.130 --> 00:09:47.650
This can be especially true with object oriented languages that use a virtual machine.

128
00:09:47.660 --> 00:09:53.900
However the great news is that among Object-Oriented languages C++ is probably the most efficient language

129
00:09:53.900 --> 00:09:54.270
out there.
