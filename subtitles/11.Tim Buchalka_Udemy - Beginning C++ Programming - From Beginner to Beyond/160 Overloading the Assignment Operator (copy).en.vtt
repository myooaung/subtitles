WEBVTT
1
00:00:05.280 --> 00:00:11.430
In this video we'll learn how to overload the copy assignment operator the assignment operator is used

2
00:00:11.430 --> 00:00:15.450
by C++ when it assigns one object to another object.

3
00:00:15.450 --> 00:00:18.290
Don't confuse assignment with initialization.

4
00:00:18.420 --> 00:00:22.770
Initialization is done by constructors when we create new objects.

5
00:00:22.770 --> 00:00:27.750
The statement my string as two equals as 1 is not an assignment statement.

6
00:00:27.780 --> 00:00:34.770
It's an initialization statement because as to hasn't been created yet C++ allows us to use the assignment

7
00:00:34.830 --> 00:00:42.090
operator in this context but this assignment is really equivalent to my string as to from s one as shown

8
00:00:42.090 --> 00:00:42.750
in the comment.

9
00:00:42.750 --> 00:00:45.450
It will invoke the copy constructor.

10
00:00:45.480 --> 00:00:48.510
Notice the same it as two equals S1.

11
00:00:48.540 --> 00:00:54.320
This is a sign that says as too has already been created and initialized previous to this statement.

12
00:00:54.390 --> 00:00:59.400
So an assignment occurs when an object has already been initialized and you want to assign another object

13
00:00:59.400 --> 00:01:00.650
to it.

14
00:01:00.730 --> 00:01:04.320
C++ provides a default way of assigning one object to another.

15
00:01:04.500 --> 00:01:10.620
And if you don't provide your own overloaded assignment operator then C++ will provide a compiler generated

16
00:01:10.620 --> 00:01:12.000
one for you.

17
00:01:12.000 --> 00:01:16.080
This is very similar to what it did with the default copy constructor.

18
00:01:16.140 --> 00:01:22.210
The behavior for the default assignment is member Y's assignment which means shallow copying.

19
00:01:22.590 --> 00:01:28.360
If your class doesn't have raw pointers then the default assignment operator will probably be just fine.

20
00:01:28.650 --> 00:01:34.110
However in my string class we have a raw pointer so will overload the assignment operator so that a

21
00:01:34.110 --> 00:01:38.270
deep copies the pointer to data on the heap.

22
00:01:38.300 --> 00:01:41.850
So how exactly do we overload the copy assignment operator.

23
00:01:42.140 --> 00:01:48.260
First the assignment operator must be overloaded as a member function so we can provide a method prototype

24
00:01:48.470 --> 00:01:51.350
that has the general pattern shown in the top declaration.

25
00:01:52.300 --> 00:01:55.810
We then simply replace type with the name of our class.

26
00:01:55.810 --> 00:01:58.870
Notice that the name of the method is operator equal.

27
00:01:59.260 --> 00:02:01.950
That's how we declare methods and overload operators.

28
00:02:02.050 --> 00:02:06.270
The keyword operator followed by the operator that we wish to overload.

29
00:02:06.340 --> 00:02:12.880
So for the String class the overloaded assignment operator method returns a reference to a String object.

30
00:02:12.880 --> 00:02:19.090
This is important since we want to avoid extra copies if we return by value and we also want to allow

31
00:02:19.090 --> 00:02:25.940
chain assignments such as P1 equals P2 equals P3 we'll define this method in the next slide.

32
00:02:26.030 --> 00:02:32.260
But once it's defined we can write code like as two equals as one which assigns object as one to object

33
00:02:32.260 --> 00:02:33.170
as to.

34
00:02:33.200 --> 00:02:39.140
That's very readable and readable code and it feels exactly like if we were signing one of the C++ built

35
00:02:39.140 --> 00:02:40.280
in types.

36
00:02:40.280 --> 00:02:43.230
But now it's working with our own user defined classes.

37
00:02:43.370 --> 00:02:45.170
That's pretty easy and pretty neat.

38
00:02:45.230 --> 00:02:51.410
The compiler will actually convert the as two equals as one assignment statement to as two dot operator

39
00:02:51.410 --> 00:02:54.060
equal and pass in s one behind the scenes.

40
00:02:54.320 --> 00:02:58.900
Let's see how we would implement the copy assignment for my string class.

41
00:02:58.910 --> 00:03:02.330
Here's the code for the overloaded copy assignment operator.

42
00:03:02.330 --> 00:03:04.720
It looks complicated but it really isn't.

43
00:03:04.730 --> 00:03:08.770
We'll break this down into the basic steps over the next few slides.

44
00:03:08.780 --> 00:03:14.390
Remember the object on the left hand side of an assignment statement is referred to by the this pointer

45
00:03:14.870 --> 00:03:19.910
and the object on the right hand side is being passed into the method I've named the right hand side

46
00:03:19.910 --> 00:03:20.900
object r h.

47
00:03:20.900 --> 00:03:26.450
As for right hand side to be clear since we're assigning the right hand side object to the left hand

48
00:03:26.450 --> 00:03:32.180
side object we must make a deep copy of the right hand side object's attributes and copy them over to

49
00:03:32.180 --> 00:03:33.710
the left hand side opposite.

50
00:03:33.710 --> 00:03:36.250
So what does this mean semantically.

51
00:03:36.260 --> 00:03:40.590
Well the left hand side object or this object will be overwritten.

52
00:03:40.640 --> 00:03:44.190
So we need to deallocate anything it refers to on the heap.

53
00:03:44.390 --> 00:03:49.300
Then we have to allocate space in the left hand side object for the right hand side object's data.

54
00:03:49.580 --> 00:03:54.170
And then we finally copy the data over to the left side from the right side.

55
00:03:54.230 --> 00:03:56.660
Let's go over this code one statement at a time.

56
00:03:56.660 --> 00:04:02.160
Since I know it can be hard to follow when you're first learning this the first thing we want to do

57
00:04:02.160 --> 00:04:09.190
is check to see if we're doing self assignment for example P one equals p 1 or a signed p one to itself.

58
00:04:09.570 --> 00:04:15.140
We can easily check for that by checking the address of the left hand side object which is in the pointer

59
00:04:15.150 --> 00:04:19.400
this and comparing it to the address of the right hand object.

60
00:04:19.740 --> 00:04:25.230
If they're the same then we really don't want to do anything and we just return dereference this which

61
00:04:25.230 --> 00:04:26.760
is the left side object.

62
00:04:27.930 --> 00:04:33.910
If we don't have self assignment then we need to deallocate storage for this string since it's pointing

63
00:04:33.910 --> 00:04:35.620
to a string on the heap.

64
00:04:35.800 --> 00:04:40.840
We need to deallocate the storage otherwise when we copy the new data over well or from this memory

65
00:04:40.840 --> 00:04:43.160
and end up with a memory leak.

66
00:04:43.740 --> 00:04:49.020
Now the left side object is ready to be assigned from the data from the right side object but we haven't

67
00:04:49.020 --> 00:04:52.060
yet allocated storage on the heat for the deep copy.

68
00:04:52.260 --> 00:04:56.910
So we need to allocate enough storage on the heap that's the size of the string and the right object

69
00:04:56.970 --> 00:05:00.780
plus one since we need the space for the stream Terminator.

70
00:05:01.020 --> 00:05:01.590
That's it.

71
00:05:01.590 --> 00:05:08.460
Now we can do the copy we can perform the copy by copying over one character of time until we see the

72
00:05:08.460 --> 00:05:09.680
null character.

73
00:05:09.730 --> 00:05:15.070
But since we're using a C-style string we can simply call the string library method stood stream copy

74
00:05:15.400 --> 00:05:19.270
which copies the string from the right hand side object to the left hand side object.

75
00:05:19.270 --> 00:05:25.580
That's it we're done all we have to do now is return the left side object so we can support chain assignment.

76
00:05:25.600 --> 00:05:31.120
This may seem like a lot at first but it's a pattern or idiom that we always use in C++ when we're doing

77
00:05:31.120 --> 00:05:33.110
deep copy assignment.

78
00:05:33.280 --> 00:05:36.170
In this case we only have a single raw pointer.

79
00:05:36.220 --> 00:05:41.580
If your class has multiple raw pointers then don't forget to copy each of them.

80
00:05:41.590 --> 00:05:46.690
Let's go over to the idea and step through copy assignment using the debugger so you can see exactly

81
00:05:46.690 --> 00:05:48.410
how this works in life code.

82
00:05:48.760 --> 00:05:55.490
Ok so I'm back in the ID and in this case I'm in the section 14 workspace and I'm in the my string Dasch

83
00:05:55.510 --> 00:06:02.170
copy Dasch assignment project what we want to do now is we've got our mystery in class and it's really

84
00:06:02.170 --> 00:06:05.410
basic right now it's only got the constructor's the copy constructor.

85
00:06:05.410 --> 00:06:10.810
The couple of getters and the display just as we've seen before and what we want to do is we want to

86
00:06:10.810 --> 00:06:16.470
add the copy assignment operator we want to overload that an added to the class but before we do that

87
00:06:16.690 --> 00:06:19.990
let's talk about the semantics of exactly what we're trying to achieve.

88
00:06:19.990 --> 00:06:23.140
So I've written four lines of code right here in my main.

89
00:06:23.140 --> 00:06:26.700
I've actually got a lot more in the main which I will comment out later.

90
00:06:26.740 --> 00:06:31.200
So let's talk about these four lines of code and talk about it in the context of assignment.

91
00:06:31.240 --> 00:06:32.850
You can see what's going on here.

92
00:06:32.860 --> 00:06:38.890
I'm instantiating my object a it's a my string object and I'm initializing a total though.

93
00:06:39.010 --> 00:06:42.220
So when this line executes I will have something like this.

94
00:06:42.220 --> 00:06:47.050
I have my object it will have an s t r attribute which is a pointer.

95
00:06:47.380 --> 00:06:50.650
Hello will be allocated on the heap.

96
00:06:50.650 --> 00:06:56.820
Remember there's a null character there and so this is really six characters big and that as TR attribute

97
00:06:56.830 --> 00:06:58.150
will be pointing to it.

98
00:06:58.150 --> 00:06:59.770
So that's the condition that I'll be in.

99
00:06:59.770 --> 00:07:05.950
After the construction of the object then when we create the B object will be in a situation like this

100
00:07:06.270 --> 00:07:07.520
where this will be B.

101
00:07:07.600 --> 00:07:09.420
This will be here again.

102
00:07:09.430 --> 00:07:14.680
In this case I'm pointing to an empty stream because that's the how we defined are no args constructor

103
00:07:15.100 --> 00:07:16.750
so will be something like that.

104
00:07:16.750 --> 00:07:22.410
Remember the empty string consists of a single character with no character in it.

105
00:07:22.570 --> 00:07:27.080
Then we're going to execute this code right here B equals or assign a to b.

106
00:07:27.220 --> 00:07:32.200
In this case this is a assignment because B already exists B has been instantiated.

107
00:07:32.530 --> 00:07:34.890
So what we want to happen is.

108
00:07:35.000 --> 00:07:39.520
Couple of things first we want to be sure that we're not assigning to ourselves B equals B or A equals

109
00:07:39.580 --> 00:07:40.000
a.

110
00:07:40.030 --> 00:07:46.570
That's easy to do then what we'll do is we really want B to contain that hello right.

111
00:07:46.660 --> 00:07:50.540
But we don't want this situation like we had with a shallow copy.

112
00:07:50.710 --> 00:07:54.120
We want to create a copy of that Helo string on the heap.

113
00:07:54.250 --> 00:07:57.030
So in order to do that there's a couple of things I need to do.

114
00:07:57.040 --> 00:08:02.140
First of all I need to deallocate this right and this can be a lot bigger than just an empty string.

115
00:08:02.140 --> 00:08:03.550
This could be a very large string.

116
00:08:03.670 --> 00:08:05.740
So I want to deallocate that.

117
00:08:05.740 --> 00:08:11.290
Then I want to allocate space for 6 characters right because I'm copying Hello in there and hello as

118
00:08:11.380 --> 00:08:14.580
H E L L O and the null terminator.

119
00:08:14.710 --> 00:08:17.590
I want to be in this situation.

120
00:08:17.590 --> 00:08:22.970
I want to copy hello over and at this point.

121
00:08:23.080 --> 00:08:24.990
What we've got is this kind of situation.

122
00:08:25.000 --> 00:08:29.390
All this is gone now that's been deallocated so we don't leak memory there.

123
00:08:29.500 --> 00:08:31.400
And this is where we want to be with B.

124
00:08:31.900 --> 00:08:35.890
OK so that's where we're headed you can see the steps that we need to do visually here.

125
00:08:35.890 --> 00:08:37.590
We're going to do them in code next.

126
00:08:37.600 --> 00:08:43.480
Now this example here is also an assignment because we're assigning something to B and B already exists.

127
00:08:43.480 --> 00:08:48.760
In this case it's a little bit different because we don't have an operator equal that expects a character

128
00:08:48.760 --> 00:08:51.880
pointer right which is what this is right here C-style string.

129
00:08:51.880 --> 00:08:57.820
So what we need to do is we need to construct a temporary object using the overloaded constructor just

130
00:08:57.820 --> 00:09:03.250
like what we did over here and then assigned that temporary object to B and then that will eventually

131
00:09:03.250 --> 00:09:05.360
be destroyed the temporary object well.

132
00:09:05.770 --> 00:09:07.320
So that's it that's where we're going.

133
00:09:07.420 --> 00:09:11.860
Let me clear this and liberals start writing the code now and then once we're done we'll walk through

134
00:09:11.860 --> 00:09:12.950
this example.

135
00:09:13.270 --> 00:09:16.220
So let's start with our header file.

136
00:09:16.270 --> 00:09:20.640
What we need to do is we need to write the prototype here and I'll leave a little bit of extra space.

137
00:09:20.640 --> 00:09:25.060
What's really clear for the overloaded assignment operator.

138
00:09:25.270 --> 00:09:29.910
So we know it returns a string object by reference.

139
00:09:29.950 --> 00:09:32.710
We know that the name is operator equal.

140
00:09:32.710 --> 00:09:37.170
That's just the way we name operator methods in C++.

141
00:09:37.300 --> 00:09:41.890
That just tells the compiler they are overloading the equal or assignment operator.

142
00:09:42.280 --> 00:09:43.330
What does it expect.

143
00:09:43.360 --> 00:09:48.540
Well the right hand side remember the left hand side is this it's a pointer or the current object.

144
00:09:48.790 --> 00:09:51.760
The right hand side is simply going to be a constant.

145
00:09:51.760 --> 00:09:59.650
My string reference and all the right hand side we don't have to provide a name here in the prototype.

146
00:09:59.660 --> 00:10:04.120
I just say copy assignment.

147
00:10:04.240 --> 00:10:05.440
That's our prototype again.

148
00:10:05.470 --> 00:10:07.750
Be really sure that you understand this.

149
00:10:07.870 --> 00:10:11.980
We're overloading the equal operator or the assignment operator.

150
00:10:12.010 --> 00:10:14.310
The left hand side is the current object.

151
00:10:14.350 --> 00:10:19.660
The right hand side is what we're signing and we want this guy because we really don't want to mess

152
00:10:19.660 --> 00:10:23.110
with it it's not our object so I don't want to mess with it at all.

153
00:10:23.110 --> 00:10:25.980
Also remember this is not construction.

154
00:10:25.990 --> 00:10:29.450
This is assignment that left hand side already exists.

155
00:10:29.770 --> 00:10:34.250
Ok so now let's write the code for that copy assignment.

156
00:10:34.250 --> 00:10:39.050
Now I've made a little room here so that I can put in the code and we've also got some break points

157
00:10:39.040 --> 00:10:40.670
so I've already gone ahead and put one in.

158
00:10:40.690 --> 00:10:42.510
So what we'll do is we're now going to implement.

159
00:10:42.510 --> 00:10:46.620
That's all my string right where returning a reference.

160
00:10:46.870 --> 00:10:53.390
And this is operator equal.

161
00:10:53.800 --> 00:11:00.990
What does it expect just like the prototype conc to my string reference right hand side.

162
00:11:01.430 --> 00:11:05.050
Now the first thing I want to do is I just want to do a little output statement so that we know when

163
00:11:05.050 --> 00:11:06.350
this is being called.

164
00:11:06.550 --> 00:11:12.350
So I'll just say stood out and will just say something like copy assignment

165
00:11:15.470 --> 00:11:17.900
just stood in line.

166
00:11:19.300 --> 00:11:20.170
Perfect.

167
00:11:20.260 --> 00:11:21.480
So what do we need to do first.

168
00:11:21.490 --> 00:11:24.700
Well first thing we need to do is make sure that we're not assigning to ourselves.

169
00:11:24.700 --> 00:11:26.020
That's simple enough.

170
00:11:26.020 --> 00:11:31.790
If this I remember this is a pointer to the current object.

171
00:11:32.080 --> 00:11:38.230
So if a pointer holds an address so if this is the address of the right hand side.

172
00:11:38.230 --> 00:11:40.660
In other words we're really the same object.

173
00:11:40.680 --> 00:11:43.690
Then all I want to do is just return this.

174
00:11:44.120 --> 00:11:47.290
OK and we need to dereference this in this case.

175
00:11:47.290 --> 00:11:51.250
Remember if we just say return this this won't compile because then that means that this guy would be

176
00:11:51.250 --> 00:11:53.840
expecting a pointer back but we're.

177
00:11:53.920 --> 00:11:56.980
We're doing a reference back not a pointer.

178
00:11:57.190 --> 00:11:59.840
So we're going to pass the reference back.

179
00:12:00.010 --> 00:12:00.760
That's it.

180
00:12:00.760 --> 00:12:05.800
Now we start doing the real work first thing we need to do is remember that this object is the one that's

181
00:12:05.800 --> 00:12:07.760
being copied into.

182
00:12:07.840 --> 00:12:12.690
So it may be pointing to something right that as TR attribute maybe pointing to a string in it.

183
00:12:12.720 --> 00:12:16.200
Actually it is pointing to a string even if it's just an empty string.

184
00:12:16.390 --> 00:12:22.570
So what we need to do is just delete and make sure you use the brackets here because it's an array of

185
00:12:22.570 --> 00:12:24.940
characters we're deleting as TR.

186
00:12:25.090 --> 00:12:31.800
OK if this makes it more clear then feel free to use this keyword right there.

187
00:12:31.830 --> 00:12:33.240
It's all the same.

188
00:12:33.440 --> 00:12:40.840
Then we're going to say s t r equals new character ready to allocate to that array of characters on

189
00:12:40.840 --> 00:12:41.810
the heap.

190
00:12:42.010 --> 00:12:43.960
And how many characters do we need to allocate.

191
00:12:43.960 --> 00:12:48.000
Well we're copying the right hand side object data into it right.

192
00:12:48.160 --> 00:12:51.440
So the right hand side object has an as TR attribute.

193
00:12:51.520 --> 00:12:57.160
So how big that string is plus one because we need space for the string Terminator.

194
00:12:57.160 --> 00:12:58.800
So how big is this going to be.

195
00:12:58.840 --> 00:12:59.790
Well it's going to be

196
00:13:02.590 --> 00:13:10.350
take the string length of not as TR Right but right hand side as TR.

197
00:13:11.680 --> 00:13:17.880
And since we're a member method we have access to that and we want to add one.

198
00:13:19.090 --> 00:13:22.720
Perfect So now we've allocated the space that we need on the heap.

199
00:13:22.720 --> 00:13:27.690
The only thing left really is to copy that string over from the right hand side and just return.

200
00:13:27.820 --> 00:13:29.200
So let's do that.

201
00:13:29.200 --> 00:13:33.330
So what do Studd string copy to.

202
00:13:33.340 --> 00:13:42.100
As TR again you could say this to your if that's clear from our H.S. right hand side string.

203
00:13:42.180 --> 00:13:47.800
So that's the string copy string copy function simply copies one character at a time until it hits the

204
00:13:47.830 --> 00:13:49.200
terminating character.

205
00:13:49.240 --> 00:13:55.900
It copies that as well when it's done and the last thing to do is just return the object that we just

206
00:13:55.900 --> 00:13:58.000
copied into the left hand side.

207
00:13:58.720 --> 00:13:59.540
That's it.

208
00:14:00.010 --> 00:14:01.560
Let's go and run this.

209
00:14:01.630 --> 00:14:03.500
But before we do that let's actually debug it.

210
00:14:03.540 --> 00:14:07.710
So I'm going to go back to my man and let's start the debugger.

211
00:14:07.780 --> 00:14:09.200
So this is where we're at.

212
00:14:09.570 --> 00:14:13.010
Let's step through this so we can really understand what's going on here.

213
00:14:13.120 --> 00:14:15.650
At this point I'm on line 10.

214
00:14:15.880 --> 00:14:22.500
I'm constructing or instantiating that object right and I'm providing some initialization information

215
00:14:22.510 --> 00:14:23.230
the string.

216
00:14:23.380 --> 00:14:26.080
So in this case I'm going to call the overloaded constructor.

217
00:14:26.200 --> 00:14:26.940
So let's do that.

218
00:14:26.950 --> 00:14:28.420
Let's step through.

219
00:14:28.510 --> 00:14:33.320
There is the call to the overloaded constructor that expects a character pointer just like we expect.

220
00:14:33.550 --> 00:14:34.580
It's not no.

221
00:14:34.780 --> 00:14:38.210
So we're going to skip the part and we're right here.

222
00:14:38.230 --> 00:14:40.810
So how many characters would we allocating for this guy.

223
00:14:40.960 --> 00:14:45.880
Well whatever the string that was being passed in by post one for the null terminator and then we're

224
00:14:45.880 --> 00:14:46.960
just copying it over.

225
00:14:47.110 --> 00:14:54.370
So let's step through this and when we get back here you can see that a right here that s t tr attribute

226
00:14:54.370 --> 00:14:57.920
is pointing to the string Hello exactly like we expected.

227
00:14:58.060 --> 00:14:59.140
The B object.

228
00:14:59.140 --> 00:15:04.360
Same idea except recalling a no args constructor since we're not providing any permission and when we

229
00:15:04.360 --> 00:15:07.930
get back we expect B's string attribute to be an empty string.

230
00:15:07.960 --> 00:15:09.640
So let's do that.

231
00:15:09.670 --> 00:15:11.680
There you can see the no args constructor.

232
00:15:11.680 --> 00:15:16.690
It's simply creating one character and putting the null terminator in there.

233
00:15:16.870 --> 00:15:22.920
So at this point you can see that Bay is hello and B is that empty string right here.

234
00:15:23.170 --> 00:15:25.650
Now is the assignment of assigning a to b.

235
00:15:25.780 --> 00:15:27.400
So let's step through this.

236
00:15:27.400 --> 00:15:35.050
We expect operator equal to be called and that's exactly what happens right here on 938 of the copy

237
00:15:35.050 --> 00:15:37.020
assignment overloaded method.

238
00:15:37.150 --> 00:15:39.130
We display copy assignment.

239
00:15:39.190 --> 00:15:43.990
We're going to check for self assignment here we don't have self assignments so that will be skipped.

240
00:15:43.990 --> 00:15:48.100
Now we're going to delete the left hand side objects.

241
00:15:48.100 --> 00:15:49.400
String on the heap.

242
00:15:49.510 --> 00:15:57.180
So we're deleting that and at this point we're going to copy and you can see that the right hand side

243
00:15:57.270 --> 00:16:02.390
is hello and the left hand side right now is just pointing to garbage right.

244
00:16:02.400 --> 00:16:06.400
Because we've deleted that so it's invalid memory we're really pointing anywhere right now.

245
00:16:06.540 --> 00:16:12.780
So what we're going to do is simply replace that with an area that I'm creating on the heap that's going

246
00:16:12.780 --> 00:16:15.010
to store the string that I'm just about to copy.

247
00:16:15.030 --> 00:16:19.490
So let's do that now and then we're going to copy that string over.

248
00:16:19.500 --> 00:16:21.410
So at this point I'll refresh here.

249
00:16:21.440 --> 00:16:26.740
You can see that right hand side was still hello and now this is also Hello.

250
00:16:27.000 --> 00:16:27.770
And there you go.

251
00:16:28.920 --> 00:16:34.810
You can see from the addresses that they are indeed two unique areas in memory returning the object

252
00:16:35.260 --> 00:16:38.130
by reference and that's it.

253
00:16:38.140 --> 00:16:44.000
I'll refresh the site again and now we've got a and b and they should be the same a as Hello B is hello.

254
00:16:44.020 --> 00:16:46.920
And there again two different areas in memory.

255
00:16:47.170 --> 00:16:48.400
This example here.

256
00:16:48.610 --> 00:16:55.240
What's going to happen is unlined 14 is going to call the overloaded operator again to create that object

257
00:16:55.900 --> 00:17:00.460
and then once that object is created will assign it over so that temporary object is going to be assigned

258
00:17:00.460 --> 00:17:05.260
to cover so let's just walk through that really quickly here and you can see right here I'm calling

259
00:17:05.260 --> 00:17:12.320
the overloaded constructor which is going to create a temporary object and now that temporary object

260
00:17:12.470 --> 00:17:16.210
will be assigned so you can see the assignment operator being called now.

261
00:17:16.220 --> 00:17:18.200
So I walk through that again.

262
00:17:18.400 --> 00:17:19.900
We see what we're at.

263
00:17:19.910 --> 00:17:26.910
We move it over and we get rid of the temporary object that's the destructor being called right there.

264
00:17:29.520 --> 00:17:30.030
That's it.

265
00:17:30.030 --> 00:17:31.300
So we're done here.

266
00:17:31.350 --> 00:17:33.090
You can see a hello and B is.

267
00:17:33.090 --> 00:17:35.000
Now this is a test.

268
00:17:35.070 --> 00:17:42.510
And as we unwind we're going to call the destructor for B and the destructor for a in our program is

269
00:17:42.510 --> 00:17:44.760
done OK.

270
00:17:44.810 --> 00:17:49.230
So that gives you an idea of the assignment operator and the copy assignment operator is pretty straightforward.

271
00:17:49.370 --> 00:17:54.710
And what I've also done is I've created some other test cases here that you can walk through and learn

272
00:17:54.710 --> 00:17:55.370
from.

273
00:17:55.550 --> 00:17:59.260
And what I'll do as I'll just uncomment them out and then I'll run the program rather quickly.

274
00:17:59.270 --> 00:18:04.520
So what I've got is I've just got some examples of creating more objects and assigning objects to vectors

275
00:18:04.520 --> 00:18:05.490
and so forth.

276
00:18:05.600 --> 00:18:11.130
And you can see that when we do things like as equals change we're going to create a copy assignment

277
00:18:11.240 --> 00:18:16.610
and that's exactly what we want we don't really want to create that guy using the conversion constructor

278
00:18:16.610 --> 00:18:19.220
and then use a copy constructor to copy stuff over.

279
00:18:19.220 --> 00:18:24.460
We're just doing assignment and we don't want to do anything related to shallow assignment right.

280
00:18:24.470 --> 00:18:25.690
We want to do deep assignment.

281
00:18:25.700 --> 00:18:28.140
Otherwise we're going to end up with all kinds of problems.

282
00:18:28.220 --> 00:18:31.240
So I'll run this and there's the output.

283
00:18:31.250 --> 00:18:36.380
You can see that we've got copy assignment happening we've got Larry a bunch of times and like I said

284
00:18:36.380 --> 00:18:39.370
you can run through this and walk through it yourselves.

285
00:18:39.410 --> 00:18:43.580
It's really important that you step through a program like this he could really really understand what's

286
00:18:43.580 --> 00:18:44.240
going on.

287
00:18:44.360 --> 00:18:48.800
But you can see that copy assignment is called all over the place here because that's exactly what we

288
00:18:48.800 --> 00:18:49.500
want.

289
00:18:49.940 --> 00:18:55.630
OK so now in the next video what we'll do is we'll do move assignment which is pretty powerful and it'll

290
00:18:55.640 --> 00:19:00.620
take care of assigning temporary values much more efficiently than capias son.
