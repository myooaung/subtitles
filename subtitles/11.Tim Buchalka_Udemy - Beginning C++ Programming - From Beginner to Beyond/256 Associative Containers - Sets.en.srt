1
00:00:05,400 --> 00:00:09,080
In this video we'll learn about the T.L. set containers.

2
00:00:09,600 --> 00:00:14,940
These are associate of containers associate of containers or collections of stored objects that allow

3
00:00:14,940 --> 00:00:17,950
for fast retrieval using a key.

4
00:00:18,000 --> 00:00:20,680
The seal provides both sets and maps.

5
00:00:20,790 --> 00:00:25,620
In this video we learn about sets and we'll learn about maps in the next video depending on the type

6
00:00:25,620 --> 00:00:27,330
of the soci container.

7
00:00:27,330 --> 00:00:33,090
They're usually implemented behind the scenes as a balanced binary tree something like a red black tree

8
00:00:33,840 --> 00:00:37,350
or as a hash that these are very efficient data structure.

9
00:00:37,350 --> 00:00:40,700
So operations on sets and maps are very fast.

10
00:00:40,800 --> 00:00:48,810
The ACL has four types of set containers the set the unordered set the multiset and the unordered multiset

11
00:00:49,720 --> 00:00:51,770
will focus mainly on the set.

12
00:00:51,840 --> 00:00:58,570
Since it's the one most often used but also described the others as well.

13
00:00:58,650 --> 00:01:04,450
Let's first talk about the set in order to use a set you must include the set header file.

14
00:01:04,650 --> 00:01:08,340
The class is similar in concept to a mathematical set.

15
00:01:08,340 --> 00:01:12,680
The elements in the set are ordered by key and no duplicate elements are allowed.

16
00:01:13,640 --> 00:01:16,020
All iterators are available for sets.

17
00:01:19,090 --> 00:01:23,520
Let's initialize a few set objects in the first example in this slide.

18
00:01:23,560 --> 00:01:28,440
I declare s as a set of integers and initialize it to 1 2 3 4 and 5.

19
00:01:28,610 --> 00:01:35,030
And the second example I declare Stooges as a set of stood Strange's and I initialize it to some strings.

20
00:01:35,030 --> 00:01:39,700
Then at the bottom of the slide you can see that sets also support assignment via an initialization

21
00:01:39,700 --> 00:01:41,610
list.

22
00:01:41,740 --> 00:01:47,500
But there are some differences with sets on the first line commercialising S is a set of integers and

23
00:01:47,500 --> 00:01:49,690
then providing the initializers.

24
00:01:49,690 --> 00:01:54,820
But notice that the initializer list contains duplicate elements that's not allowed in a set.

25
00:01:54,820 --> 00:01:55,990
This won't cause an error there.

26
00:01:55,990 --> 00:01:59,560
The duplicates are simply ignored and we end up with a proper set.

27
00:01:59,560 --> 00:02:04,510
Also notice that the set is sorted the size method returns a number of elements that are in the set

28
00:02:04,750 --> 00:02:08,530
and max size tells us what the maximum number of elements a set can hold.

29
00:02:08,530 --> 00:02:15,040
Remember sets do not allow direct access to elements so we can't use the subscript operator or the method

30
00:02:15,040 --> 00:02:18,940
as we have with other containers sets also don't have a front and back.

31
00:02:18,960 --> 00:02:23,800
So methods like push back and pop back into front versions do not apply to sets.

32
00:02:24,190 --> 00:02:26,500
So how do we add elements to sets.

33
00:02:26,500 --> 00:02:28,770
Simple we use the sets insert method.

34
00:02:28,840 --> 00:02:30,980
We can also use the emplace method if we want.

35
00:02:31,030 --> 00:02:33,970
In the last statement on the slide we insert 7 into the set.

36
00:02:34,000 --> 00:02:36,250
If 7 is in the set it won't be added again.

37
00:02:36,250 --> 00:02:39,530
If it's not in the set then it will be added and or will be added in order.

38
00:02:40,930 --> 00:02:43,540
So let's talk a little bit more about the insert method.

39
00:02:43,540 --> 00:02:46,810
Suppose I have an object P1 that's a person object.

40
00:02:46,840 --> 00:02:48,880
In this case Larry 18.

41
00:02:49,150 --> 00:02:57,380
I also have to as a person object mo 25 we can insert P1 into the Stooges set by simply calling Stooges

42
00:02:57,670 --> 00:02:59,900
insert and passing in P..

43
00:02:59,950 --> 00:03:02,640
If the element is not in the set it will be added.

44
00:03:02,680 --> 00:03:04,230
Otherwise it won't be added.

45
00:03:04,300 --> 00:03:09,630
The set class uses the overloaded less than operator to determine if the element exists in a set.

46
00:03:09,640 --> 00:03:13,890
That's fine but sometimes we want to know whether an element was inserted successfully or not.

47
00:03:13,960 --> 00:03:19,750
The insert method returns a string pair remember where we talked about it a few times in this section

48
00:03:20,110 --> 00:03:22,870
and we'll talk about it some more and the maps video as well.

49
00:03:22,870 --> 00:03:29,140
The pair object that's returned has its first attribute as an iterator to the element that we just inserted

50
00:03:29,770 --> 00:03:34,510
or an iterator to the duplicate element that's already in the set and then the second attribute is a

51
00:03:34,510 --> 00:03:37,990
Boolean that indicates whether the operation was successful or not.

52
00:03:37,990 --> 00:03:38,930
That's pretty cool.

53
00:03:39,010 --> 00:03:42,740
Now we have all the information we need and we can do whatever we need in our program.

54
00:03:43,980 --> 00:03:50,550
We can also erase elements in a set very easily estat erase three will erase the 3 and the set as if

55
00:03:50,550 --> 00:03:51,470
it exists.

56
00:03:51,510 --> 00:03:57,990
We can use the set find method to find the five and if it exists delete it by passing the iterator to

57
00:03:57,990 --> 00:03:59,280
the erase method.

58
00:03:59,280 --> 00:04:05,100
Notice that the set's fine method is different from the find function in the as T.L. algorithms library.

59
00:04:05,100 --> 00:04:11,130
You should use the sets find because this sets fine knows all about the internal implementation of the

60
00:04:11,130 --> 00:04:15,350
set and it's going to be much more efficient.

61
00:04:15,350 --> 00:04:20,180
Finally we can use the count method to see how many times an element appears in a set.

62
00:04:20,210 --> 00:04:22,490
If you think about that it doesn't make a lot of sense right.

63
00:04:22,490 --> 00:04:25,120
I mean a set can only have an element in there once at most.

64
00:04:25,310 --> 00:04:30,050
But in this case it's real handy to tell whether an element is in the set or not.

65
00:04:30,090 --> 00:04:32,390
For get back to zero we know it's not in the set.

66
00:04:32,390 --> 00:04:38,570
If we get back a one it isn't the set we're going to use this in multiset because multi sets can have

67
00:04:38,570 --> 00:04:39,350
duplicates.

68
00:04:39,500 --> 00:04:41,900
So this method is really useful there as well.

69
00:04:41,900 --> 00:04:47,920
Finally as with all other ACL containers as not clear removes all of the elements from the set and estat

70
00:04:48,050 --> 00:04:52,010
empty returns true if the set is empty or false otherwise.

71
00:04:52,400 --> 00:04:54,920
Well that's a quick summary of the set class.

72
00:04:54,920 --> 00:04:58,060
Please refer to the set documentation since there is more.

73
00:04:58,160 --> 00:05:01,290
And many of the methods I show you have variants as well.

74
00:05:01,640 --> 00:05:05,040
So let's talk about the other set classes.

75
00:05:05,210 --> 00:05:07,650
First let's talk about the multiset class.

76
00:05:07,670 --> 00:05:10,130
It's also defined in the set header file.

77
00:05:10,370 --> 00:05:16,690
A multiset is a set that's ordered by key but it allows duplicate elements all iterators are available

78
00:05:17,930 --> 00:05:24,560
the unordered set is in the unordered set header file the ordered set is a set that's unordered and

79
00:05:24,560 --> 00:05:29,810
it does not allow duplicate elements due to the way that unordered sets are implemented.

80
00:05:29,810 --> 00:05:32,360
Elements can't be modified in place.

81
00:05:32,480 --> 00:05:36,970
If you need to change an element you have to remove it and then insert the updated one also.

82
00:05:36,980 --> 00:05:41,140
Unordered sets do not allow reverse iterators.

83
00:05:41,150 --> 00:05:47,900
The last type of set provided by the ACL is the unordered multiset the unordered multiset does not order

84
00:05:47,900 --> 00:05:50,360
elements and it does allow duplicates.

85
00:05:50,360 --> 00:05:52,800
Again no reverse iterators are allowed.

86
00:05:53,300 --> 00:05:57,720
As you can see the SL provides powerful set classes for nearly every need.

87
00:05:57,740 --> 00:06:00,380
However by far the most used is the set.

88
00:06:00,380 --> 00:06:02,040
And that's when we're going to focus on.

89
00:06:02,060 --> 00:06:07,140
So let's head over to the idea and we'll look at examples of using sets.

90
00:06:07,140 --> 00:06:14,810
Ok so I'm back on the idea again I'm in the Section 20 workspace and I'm in the set project and what

91
00:06:14,810 --> 00:06:18,800
I've got here is I've got the same person class and I won't bother going over it again we've gone over

92
00:06:18,800 --> 00:06:19,770
to a bunch of times.

93
00:06:19,910 --> 00:06:25,370
I have made any changes to it since the last time but I do want to bring that to your attention again.

94
00:06:25,370 --> 00:06:31,970
The operator that we're using for the operator less than is comparing ages.

95
00:06:32,170 --> 00:06:38,010
OK so we're considering one person less than the other based on the age not the man and that's going

96
00:06:38,010 --> 00:06:40,940
to be important because the set uses that operator.

97
00:06:40,980 --> 00:06:46,440
So when we see these guys sort of you're going to see them sorted by age rather than by name.

98
00:06:46,520 --> 00:06:51,450
And that's important understand a lot of people think that it's this operator right here that's doing

99
00:06:51,450 --> 00:06:53,720
it and it's not OK.

100
00:06:53,770 --> 00:06:56,410
So let's get started.

101
00:06:56,500 --> 00:06:59,370
There's four tests or actually three tests here.

102
00:06:59,400 --> 00:07:05,770
Some Not as long as the other videos but let's start with Test 1 and you can see the output right up

103
00:07:05,770 --> 00:07:06,440
here.

104
00:07:07,580 --> 00:07:10,930
On the right up here you can see that's where the test one is right here.

105
00:07:10,940 --> 00:07:12,050
So let's start.

106
00:07:12,320 --> 00:07:17,380
I'm going to create a set called S1 and you can see it's a set of integers.

107
00:07:17,480 --> 00:07:22,810
You can see this the consistency with the syntax across the entire as well.

108
00:07:23,150 --> 00:07:25,090
And I'm putting in 1 4 3 5 2.

109
00:07:25,100 --> 00:07:28,160
Notice I did that on purpose had changed the order.

110
00:07:28,160 --> 00:07:29,940
The sets are ordered by default.

111
00:07:30,020 --> 00:07:35,660
So when I display a swan you can see that it's being displayed in order in this case it had your order.

112
00:07:35,930 --> 00:07:40,640
If I had to put in the Stooges with ages then we get a different order.

113
00:07:40,640 --> 00:07:48,000
I'm doing that in the next test and this example here I'm assigning this initializer list to us 1.

114
00:07:48,080 --> 00:07:50,320
But notice there are duplicates in here right.

115
00:07:50,320 --> 00:07:52,090
Just to piss all over the place here.

116
00:07:52,320 --> 00:07:54,200
Diplomats aren't allowed in sets.

117
00:07:54,260 --> 00:07:55,190
This will still work.

118
00:07:55,190 --> 00:07:56,130
This works just fine.

119
00:07:56,150 --> 00:08:01,870
When I go to display a swan you can see that duplicates were not handled of course there omitted.

120
00:08:01,910 --> 00:08:05,980
So it's not going to add duplicates to a set that's not going to allow duplicates.

121
00:08:06,170 --> 00:08:11,470
Then we've got right here we're inserting 0 and we're inserting 10 and then we're displaying it again

122
00:08:11,480 --> 00:08:14,100
and you can see that right there is the output.

123
00:08:14,160 --> 00:08:16,550
You can see the zero at the beginning and the 10 at the end.

124
00:08:16,580 --> 00:08:20,480
So there were inserted where they should have been inserted which is exactly right.

125
00:08:20,480 --> 00:08:28,190
Now let me just scroll up here just a little bit and we're right about here on line 50 I'm seeing how

126
00:08:28,190 --> 00:08:30,080
many times has 10 occur in the list.

127
00:08:30,080 --> 00:08:31,940
This is going to return an integer.

128
00:08:32,030 --> 00:08:37,670
It's either going to return 0 or 1 in this case of a set because a set either has the element in it

129
00:08:37,670 --> 00:08:38,710
or not.

130
00:08:38,870 --> 00:08:43,990
There is the multiset which allows multiple entries right duplicates.

131
00:08:44,060 --> 00:08:48,830
In that case this could return two or three or four depending on how many times that element exists.

132
00:08:48,830 --> 00:08:55,970
But in this case I'm saying is the 10 in the list is either return a 1 or 0 1 being true 0 being false.

133
00:08:56,030 --> 00:08:58,570
So 10 is in the set or 10 is not in the set.

134
00:08:58,580 --> 00:09:01,480
We know 10 is in this set because we just added it right here.

135
00:09:01,640 --> 00:09:04,870
So I expect to get back 10 is in the set.

136
00:09:06,540 --> 00:09:13,780
And now I'm using the find method here I'm using as one find them that I'm not using stood find which

137
00:09:13,780 --> 00:09:19,750
is in the algorithms library I'm using the set's version of find a lot of people use the other one.

138
00:09:19,750 --> 00:09:23,920
The other one is a very generic type fine that's going to use an iterator and just search through the

139
00:09:23,920 --> 00:09:25,240
entire set.

140
00:09:25,240 --> 00:09:26,320
This guy is real smart.

141
00:09:26,320 --> 00:09:28,930
This one understands how the set is implemented.

142
00:09:28,930 --> 00:09:30,310
Behind the scenes.

143
00:09:30,340 --> 00:09:36,100
So if it's implemented as a balanced binary tree it's going to use it's going to be pretty smart about

144
00:09:36,100 --> 00:09:37,280
finding things.

145
00:09:37,300 --> 00:09:41,230
So let's find the five in the set is the five in there.

146
00:09:41,260 --> 00:09:43,600
Absolutely it's in there right here.

147
00:09:43,600 --> 00:09:45,010
So what are we going to do.

148
00:09:45,010 --> 00:09:46,870
We're going to assign the results of that.

149
00:09:46,930 --> 00:09:50,780
Iterator if we get back the end of the set.

150
00:09:50,800 --> 00:09:52,260
Obviously it wasn't there.

151
00:09:52,360 --> 00:09:56,530
If we don't get it back then we found the five and with pointing to it.

152
00:09:56,530 --> 00:10:00,090
So that's what we got right here we know it's in there and that's what we got back.

153
00:10:00,100 --> 00:10:04,930
We can clear the set and then display it again and obviously that clears out the set just like it does

154
00:10:04,930 --> 00:10:06,410
with all the containers.

155
00:10:06,880 --> 00:10:07,120
OK.

156
00:10:07,120 --> 00:10:08,650
So there you go.

157
00:10:08,830 --> 00:10:11,790
Hopefully the consistency is paying off.

158
00:10:11,920 --> 00:10:15,470
Like I said there was a method to my madness with all of these examples.

159
00:10:15,490 --> 00:10:20,410
Usually when you see a lot of them and more and more you'll see the pattern and it just really clicks.

160
00:10:20,410 --> 00:10:28,210
So now let's see the test to what we've got here is a set of person objects and we'll call them Stooges

161
00:10:28,210 --> 00:10:30,970
and we said the person had a name or an age.

162
00:10:31,240 --> 00:10:35,700
I just put one two three here because I want to show you the order that these are going to be put in.

163
00:10:35,710 --> 00:10:39,770
So now when I display stooges look at them right here.

164
00:10:39,820 --> 00:10:43,120
That's the order Larry one Motu Kerley 3.

165
00:10:43,150 --> 00:10:49,370
Notice that it's ordering by age 23 it's not ordering by name otherwise Curly would be the first one.

166
00:10:50,100 --> 00:10:50,400
Right.

167
00:10:50,400 --> 00:10:51,100
So that's important.

168
00:10:51,100 --> 00:10:59,590
Understand it's using operator less than to do the ordering.

169
00:10:59,650 --> 00:11:00,100
All right.

170
00:11:00,160 --> 00:11:02,660
So that's what it's using right here.

171
00:11:03,160 --> 00:11:09,700
So we can emplace James 50 and we can display the Stooges again and you can see that at this point James

172
00:11:09,700 --> 00:11:15,750
50 was added at the end because the 50 is what it's using to order.

173
00:11:15,760 --> 00:11:17,810
So this really drives the point home.

174
00:11:17,800 --> 00:11:20,880
Suppose I went to emplace Frank 50.

175
00:11:20,980 --> 00:11:25,450
It won't let me because it's using the 50 to decide whether to put it in there or not.

176
00:11:25,450 --> 00:11:29,200
So it's according to this that 50 is already in there.

177
00:11:29,200 --> 00:11:34,930
Now had I checked to see that the that the less upward or less than was the name and the key and the

178
00:11:34,930 --> 00:11:37,240
age I'm sorry then this would have definitely worked.

179
00:11:37,240 --> 00:11:42,640
But when I display it again right here there's no Frank in there as far as this is concerned it already

180
00:11:42,640 --> 00:11:44,470
exists.

181
00:11:44,470 --> 00:11:46,830
All right so now we've got a couple of more output statements.

182
00:11:46,870 --> 00:11:51,270
Scroll up a bit and I'll show you how these work in this case.

183
00:11:51,440 --> 00:11:55,240
I'm finding Moe two in the list.

184
00:11:55,250 --> 00:11:56,840
I know Motu is there.

185
00:11:56,840 --> 00:12:02,300
I'm going to get an iterator back and if it's not equal to the end of the list then what I'm going to

186
00:12:02,300 --> 00:12:03,970
do is erase mo.

187
00:12:04,520 --> 00:12:05,160
That's all I'm doing.

188
00:12:05,170 --> 00:12:08,780
And that display Mowlam me racing mode that I'm displaying Stooges.

189
00:12:08,810 --> 00:12:12,790
And you see right here that MO right there is gone.

190
00:12:13,590 --> 00:12:15,180
Which is kind of cool.

191
00:12:15,210 --> 00:12:20,730
Now this is the one that really shows you have the power that operator in this case I'm finding a person

192
00:12:21,450 --> 00:12:24,620
whose name is X and whose age is 50.

193
00:12:24,660 --> 00:12:29,660
This doesn't come into play because I'm not using that in my in my overloaded less than operator.

194
00:12:29,670 --> 00:12:35,700
So it's going to find James there at 50 and it's going to erase James.

195
00:12:36,030 --> 00:12:39,850
And then I display Stooges again and you can see that James is gone.

196
00:12:39,990 --> 00:12:45,120
This gets a lot of people when you're first starting out with the T.L. a lot of these containers some

197
00:12:45,120 --> 00:12:50,500
of them use quality some of them use less than the set uses the less than so be aware of that.

198
00:12:50,550 --> 00:12:57,780
The final test is this guy and this is important one because it shows you what happens when we insert

199
00:12:57,780 --> 00:12:59,240
some data into a set.

200
00:12:59,460 --> 00:13:01,200
Let's just start up here first.

201
00:13:01,260 --> 00:13:06,540
I'm creating a set of stood strings and it's called this and I'm putting in there ABC.

202
00:13:06,550 --> 00:13:11,580
Now obviously we're using strings so it's going to use the string order to sort of display as and you

203
00:13:11,580 --> 00:13:14,310
can see ABC right here display.

204
00:13:14,460 --> 00:13:16,620
I see you know what that means scroll that up just a little bit.

205
00:13:16,620 --> 00:13:18,170
So it kind of aligns a little better.

206
00:13:18,180 --> 00:13:19,030
There we go.

207
00:13:19,050 --> 00:13:22,500
So we're displaying ABC right here.

208
00:13:22,500 --> 00:13:25,630
Now I'm inserting the D and I'm displaying.

209
00:13:25,680 --> 00:13:28,210
And you can see the D has been inserted in here.

210
00:13:28,500 --> 00:13:35,450
But notice at this time I assign the return value of the insert method to this guy right here.

211
00:13:35,460 --> 00:13:35,980
Result.

212
00:13:36,000 --> 00:13:41,550
And I'm using auto what I'm getting back here is a stupid pair.

213
00:13:41,770 --> 00:13:46,040
Remember this pair has two attributes first and second.

214
00:13:46,380 --> 00:13:54,290
In this case first is an iterator that's pointing to either the D that we just inserted or the D.

215
00:13:54,300 --> 00:13:59,160
That's already a duplicate in there that didn't allow me to insert in either case I'm getting an iterator

216
00:13:59,160 --> 00:14:03,140
to the element that I'm inserting or it's copy that's already in there.

217
00:14:03,180 --> 00:14:04,730
Hopefully that makes sense.

218
00:14:04,980 --> 00:14:11,700
Then the second part of the pair the second attribute is going to have a boolean true false was the

219
00:14:11,700 --> 00:14:13,640
insertion successful.

220
00:14:13,710 --> 00:14:17,140
So I've changed this to Alfonso displays the true false value.

221
00:14:17,340 --> 00:14:21,720
And here I'm displaying first and we expect to see it right there.

222
00:14:21,900 --> 00:14:25,340
So we either got a D that we inserted or the deal that was already there.

223
00:14:25,340 --> 00:14:27,120
That's when we look here.

224
00:14:27,480 --> 00:14:29,920
So if this guy's true it is right here.

225
00:14:30,060 --> 00:14:32,820
That means our insertion was successful.

226
00:14:32,940 --> 00:14:39,090
Had it been false that means that I already had a duplicate in there can or can be a little confusing

227
00:14:39,120 --> 00:14:40,960
but it's it makes sense when you think about it.

228
00:14:41,070 --> 00:14:47,010
And this is pretty cool if you think about it what's going on here is I've got a return from a function

229
00:14:47,010 --> 00:14:50,200
that's returning multiple items right which is kind of neat.

230
00:14:50,460 --> 00:14:52,730
It's really wrapping it up into a one pair.

231
00:14:52,740 --> 00:14:55,470
But even so I has to get to those pieces of the pair.

232
00:14:55,680 --> 00:14:59,100
Some other functions return tuples which can have even more than two.

233
00:14:59,490 --> 00:15:02,870
OK so let's do that last one right here.

234
00:15:02,940 --> 00:15:08,150
And in this case I am inserting the a in a right here.

235
00:15:08,150 --> 00:15:11,790
This is where I'm at right now inserting the in and displaying s.

236
00:15:11,800 --> 00:15:19,100
Now the 8 was already in there some displaying it right here and now what I'm doing is what's first

237
00:15:19,180 --> 00:15:24,080
what first was the A It's the iterator is pointing to the A that was already there.

238
00:15:24,140 --> 00:15:25,670
That's why I'm getting that.

239
00:15:25,880 --> 00:15:30,140
And when I display the results with the second that should be now I'm getting the faults.

240
00:15:30,190 --> 00:15:35,130
So right here I know that that insertion was not successful because there was a duplicate in there are

241
00:15:35,130 --> 00:15:35,650
any.

242
00:15:35,660 --> 00:15:41,090
So that covers that's what we're going to do in the next video as cover maps and then the challenge

243
00:15:41,090 --> 00:15:47,530
for the sets and the maps is going incorporate using sets and maps together which is kind of cool.

244
00:15:47,540 --> 00:15:47,780
All right.

245
00:15:47,780 --> 00:15:50,070
So in the next video we'll talk about maps.
