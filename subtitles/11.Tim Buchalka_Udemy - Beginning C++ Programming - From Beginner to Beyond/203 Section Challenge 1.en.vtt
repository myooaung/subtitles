WEBVTT
1
00:00:05.520 --> 00:00:12.570
Welcome to the section 17 challenge I mean the Section 17 workspace and no notice that I've got to challenge

2
00:00:12.570 --> 00:00:13.580
projects here.

3
00:00:13.680 --> 00:00:18.390
The first one is challenge Dash 1 and that's the harness that I'm going to give you that's basically

4
00:00:18.390 --> 00:00:22.470
you have to write three functions for this challenge and I'm giving you the function prototypes and

5
00:00:22.470 --> 00:00:24.000
you have to write the functions.

6
00:00:24.000 --> 00:00:28.320
There's also the challenge solution dash one that's my solution to this challenge and we'll do that

7
00:00:28.320 --> 00:00:29.540
in the next video.

8
00:00:29.550 --> 00:00:31.720
Also notice that there is a challenge Dash 1.

9
00:00:31.860 --> 00:00:33.580
So that implies is going to be a challenge.

10
00:00:33.580 --> 00:00:39.180
Dash 2 I'm planning to put another challenge in this section which will implement a doubly linked list

11
00:00:39.180 --> 00:00:44.220
using raw pointers and will replace the raw pointers with smart pointers so that can really play around

12
00:00:44.220 --> 00:00:44.720
with it.

13
00:00:44.820 --> 00:00:50.190
The best way to understand pointers or even smart pointers is just to play with them to create examples

14
00:00:50.190 --> 00:00:51.870
to try them out make mistakes.

15
00:00:51.870 --> 00:00:53.780
Understand why this doesn't work.

16
00:00:54.020 --> 00:00:58.230
You try to copy a unique pointer and it won't work and you go oh yeah of course you can't copy unique

17
00:00:58.230 --> 00:00:58.790
pointers.

18
00:00:58.890 --> 00:01:03.690
So this is the idea just to play with this and you get more experience using it.

19
00:01:03.720 --> 00:01:07.030
So that's what this challenge is all about in this challenge.

20
00:01:07.050 --> 00:01:12.510
We're going to create a real simple main that's going to instantiate a VEC pointer and I'll show you

21
00:01:12.510 --> 00:01:16.530
this very point to right here and then I'll talk about the challenge in more detail in a sec but let's

22
00:01:16.530 --> 00:01:18.430
just get an overview of what's going on here.

23
00:01:18.450 --> 00:01:23.010
You can see here's my main and these are the three function prototypes and you have to implement those

24
00:01:23.010 --> 00:01:23.730
three functions.

25
00:01:23.730 --> 00:01:27.640
But let's talk about the main first main has vector pointer.

26
00:01:27.640 --> 00:01:31.470
And so here's VEC pointer in what is Veck pointer look like.

27
00:01:31.490 --> 00:01:34.710
Well that pointer is on the stack and it is.

28
00:01:34.770 --> 00:01:39.160
And this may look a little complicated this declaration here but break it down into pieces and it'll

29
00:01:39.180 --> 00:01:40.370
make a lot of sense.

30
00:01:40.390 --> 00:01:42.880
The pointer is a unique pointer.

31
00:01:42.940 --> 00:01:45.100
OK so it's an object.

32
00:01:45.480 --> 00:01:46.990
And this is on the stack here.

33
00:01:48.570 --> 00:01:54.090
So what is a unique pointer we know what a unique pointer is a unique pointer is basically an object

34
00:01:54.090 --> 00:01:56.320
that manages a raw pointer.

35
00:01:56.400 --> 00:01:58.360
And in this case it's a unique pointer.

36
00:01:58.410 --> 00:02:04.190
So I'm pointing somewhere where my pointing Well I'm pointing to a vector.

37
00:02:04.230 --> 00:02:04.650
All right.

38
00:02:04.710 --> 00:02:08.730
So here's my vector remember vector can have multiple elements.

39
00:02:09.060 --> 00:02:12.100
So here's my vector.

40
00:02:12.300 --> 00:02:14.890
Now I notice everything over and this side is on the heap right.

41
00:02:14.900 --> 00:02:16.950
All of this stuff is going to be on the heap.

42
00:02:16.980 --> 00:02:20.100
The only thing that's on the stack is that Veck point to right here.

43
00:02:20.100 --> 00:02:22.610
So now we've got a vector Ocana what that is.

44
00:02:22.620 --> 00:02:24.310
Well what does a vector contain.

45
00:02:24.310 --> 00:02:27.150
Well the vector elements are shared pointers.

46
00:02:27.450 --> 00:02:30.920
So each one of these guys is going to be a shared pointer.

47
00:02:30.920 --> 00:02:31.170
Right.

48
00:02:31.170 --> 00:02:33.820
So I just put Espey here so you know what I'm talking about.

49
00:02:33.840 --> 00:02:35.350
So what's a shared pointer.

50
00:02:35.490 --> 00:02:42.480
A shared pointer is an object and the shared pointer in this case manages a test object.

51
00:02:42.480 --> 00:02:45.990
And we've got a test class right up here same one we've been using in this section.

52
00:02:45.990 --> 00:02:53.700
So this guy now has a test object that it's managing and this guy's managing a test object and so forth.

53
00:02:53.700 --> 00:02:58.410
So this looks pretty complicated and it's not that complicated when you really break it down like that

54
00:02:58.410 --> 00:02:59.170
again.

55
00:02:59.250 --> 00:03:06.540
All we've got on the stack is a pointer that points to a vector on the heap that vector contains shared

56
00:03:06.540 --> 00:03:10.890
pointers and those shared pointers refer to test objects.

57
00:03:11.280 --> 00:03:13.420
OK so how are we going to do this.

58
00:03:13.440 --> 00:03:18.360
Well we're going to do this really easily because the vector in the Test class the unique pointer class

59
00:03:18.360 --> 00:03:23.550
and the shared pointer classes really do most of the work for us and we're going to do this with no

60
00:03:23.550 --> 00:03:30.470
news and no deletes that we're not going to use you we're not going to use delete.

61
00:03:30.510 --> 00:03:36.390
We're going to use make shared make unique and let the destructors be called automatically when the

62
00:03:36.390 --> 00:03:39.950
reference counts go down to zero or when the unique pointer goes out of scope.

63
00:03:40.110 --> 00:03:43.260
So this is going to make our memory management really really simple.

64
00:03:43.260 --> 00:03:46.110
We're not going to work with raw pointers at all.

65
00:03:46.110 --> 00:03:48.130
All right so that's the big picture.

66
00:03:48.300 --> 00:03:49.130
So now what are we doing.

67
00:03:49.140 --> 00:03:50.250
Let's walk through this man.

68
00:03:50.250 --> 00:03:54.960
I'm going to clear this out real quick and let us walk through our main one step at a time here.

69
00:03:55.290 --> 00:03:59.460
So here we've got a pointer that's just going to create that object on the stack.

70
00:03:59.460 --> 00:04:01.830
It is not creating that vector on the heap.

71
00:04:01.830 --> 00:04:03.300
We need to do that ourselves.

72
00:04:03.300 --> 00:04:10.140
So again that Veck pointer is just that simple unique pointer object on the stack in order to create

73
00:04:10.140 --> 00:04:12.210
that vector that we're pointing to.

74
00:04:12.210 --> 00:04:13.880
We need to call this function make.

75
00:04:13.930 --> 00:04:15.670
That's this function right up here.

76
00:04:15.680 --> 00:04:17.760
There's the function prototype right here.

77
00:04:17.820 --> 00:04:19.770
You can see make right over here.

78
00:04:19.830 --> 00:04:23.120
Again this looks really complicated but it's pretty straightforward again.

79
00:04:23.340 --> 00:04:24.780
What are we returning from May.

80
00:04:24.810 --> 00:04:30.550
Well we're returning a unique pointer to a vector of shared pointers that manage test objects right.

81
00:04:30.660 --> 00:04:33.650
So inside make is where we're going to use make unique.

82
00:04:33.650 --> 00:04:39.150
We're going to actually create that unique pointer to make it point to that vector.

83
00:04:39.170 --> 00:04:43.890
OK once we've got that we're going to ask the user how many data points do you want to enter.

84
00:04:43.980 --> 00:04:51.780
And let's say they type in three we'll read that into them and then we'll call fill and look what we're

85
00:04:51.780 --> 00:04:52.890
passing into fill.

86
00:04:52.900 --> 00:04:55.270
We're dereferencing Veck pointer.

87
00:04:55.470 --> 00:04:59.700
Well what is Veck pointer pointer is a unique pointer to that vector.

88
00:04:59.700 --> 00:05:03.870
So when I dereference a pointer I get the vector that it's pointing to.

89
00:05:03.870 --> 00:05:07.490
So I'm calling Phil with the vector and the number of elements.

90
00:05:07.680 --> 00:05:10.340
And you'll notice that here is Phil right here.

91
00:05:10.660 --> 00:05:15.480
And Phil is going to do is it's going to loop as many times as the user wanted in this case 3 and it's

92
00:05:15.480 --> 00:05:15.910
going to say.

93
00:05:15.930 --> 00:05:18.040
So what's the first integer you want to enter.

94
00:05:18.060 --> 00:05:19.190
You'll type in 10.

95
00:05:19.320 --> 00:05:20.170
What's the second one.

96
00:05:20.270 --> 00:05:25.680
It was the third 130 and for each of each one of those integers that the user enters we're going to

97
00:05:25.680 --> 00:05:30.660
create a shared pointer to one of those test to objects with that in each of the entered right here

98
00:05:31.080 --> 00:05:33.640
and we're going to put that on the vector using pushback.

99
00:05:33.690 --> 00:05:34.650
That's it.

100
00:05:34.680 --> 00:05:36.860
Now we'll call display.

101
00:05:36.990 --> 00:05:42.990
Notice again where dereferencing a pointer that gives me the vector and display is right here on line

102
00:05:43.070 --> 00:05:50.430
69 and all we're doing and display is we're just iterating through that vector of shared pointers and

103
00:05:50.430 --> 00:05:53.940
displaying whatever data as those test objects hold.

104
00:05:53.940 --> 00:05:54.920
Sounds complicated.

105
00:05:54.930 --> 00:05:59.580
It's not so complicated just to break it down into little pieces and take them one step at a time.

106
00:05:59.580 --> 00:06:04.980
Let me run this for you so that you can see what the output looks like and I'll run it based on my solution

107
00:06:04.980 --> 00:06:10.530
here and that's build and run.

108
00:06:10.550 --> 00:06:14.780
So the first thing it says is I'm going to just slide this over here so you can see the actual code

109
00:06:14.780 --> 00:06:15.870
next to it.

110
00:06:15.890 --> 00:06:17.920
So here's my main right here.

111
00:06:18.380 --> 00:06:20.000
How many data points do you want to enter.

112
00:06:20.000 --> 00:06:25.410
Let's say I want to enter five data points enter data point 1.

113
00:06:25.410 --> 00:06:30.810
Now we are right now we're in that film method the fill method is one that's going to loop five times

114
00:06:30.810 --> 00:06:34.470
in this case each time asking me for what data I want.

115
00:06:34.470 --> 00:06:40.170
It's going to make shared right and create that shared pointer to that test object that has whatever

116
00:06:40.170 --> 00:06:40.870
I type in.

117
00:06:40.890 --> 00:06:43.850
So let's say I want to type 10.

118
00:06:44.040 --> 00:06:48.270
Now you'll notice that over here on the right we've got test constructor that's just a little debug

119
00:06:48.270 --> 00:06:50.180
statement that I put in there to help you out.

120
00:06:50.340 --> 00:06:52.490
It's being indented so that you can see it.

121
00:06:52.650 --> 00:06:58.140
So what's happening here is we've just created a test object with a 10 which is what the user typed

122
00:06:58.140 --> 00:06:58.680
in.

123
00:06:58.680 --> 00:07:00.490
So let's create another one 20.

124
00:07:00.780 --> 00:07:06.980
Remember we're going to get five of these so we'll do 30 40 and 50.

125
00:07:06.990 --> 00:07:09.250
So at this point our fill is done.

126
00:07:09.300 --> 00:07:13.520
Now we're going to display all those elements in that vector.

127
00:07:13.530 --> 00:07:19.040
So when I press Enter now that will be called display and it'll display everything.

128
00:07:19.050 --> 00:07:23.220
There we go it says display Vector Data 10 20 30 40 50.

129
00:07:23.220 --> 00:07:27.260
Now look what happens test destructor 10 20 30 40 50 again.

130
00:07:27.260 --> 00:07:32.640
I've got a little simple print statement in the destructor for the Test class and you can see that these

131
00:07:32.640 --> 00:07:35.790
objects are being cleaned up off the heap which is really cool.

132
00:07:35.820 --> 00:07:41.010
So no deletes necessary because we're using smart pointers and this is the output that you should get

133
00:07:41.010 --> 00:07:42.040
from this main.

134
00:07:42.150 --> 00:07:46.060
Once you implement those functions so there you go it's up to you now.

135
00:07:46.170 --> 00:07:53.520
What you need to do again is implement make fill and display and if you scroll up just a little bit

136
00:07:53.520 --> 00:07:57.810
here and is also in the description text it tells you a little bit more about what those functions should

137
00:07:57.810 --> 00:07:58.050
do.

138
00:07:58.050 --> 00:08:03.360
So again the function make it creates and returns a unique pointer to a vector of shared pointers to

139
00:08:03.360 --> 00:08:10.200
test objects the fill function expects a vector of shared pointers to test objects and the integer for

140
00:08:10.200 --> 00:08:12.750
higher numbers a user wants to enter.

141
00:08:12.900 --> 00:08:16.730
And it prompts the user and creates those shared pointers as it goes.

142
00:08:16.830 --> 00:08:19.560
And then the display just displays everything in there.

143
00:08:19.620 --> 00:08:24.210
And if you look at the function prototypes that I provided and you can change these to whatever you

144
00:08:24.210 --> 00:08:30.510
like if you want to try it with without the ref with the ref Konst non-contest try it out change them

145
00:08:30.510 --> 00:08:32.340
around and see what happens.

146
00:08:32.370 --> 00:08:38.110
But these are the function prototypes I'm giving you you can see that make expects nothing and returns

147
00:08:38.110 --> 00:08:39.570
a unique pointer.

148
00:08:39.810 --> 00:08:44.250
In this case Phil expects a ref to a vector.

149
00:08:44.250 --> 00:08:48.930
Now this one has to be a ref right it can't be hit by value otherwise you won't add anything to the

150
00:08:48.930 --> 00:08:53.230
vector and it can't be conc because we actually need to change that vector.

151
00:08:53.600 --> 00:08:57.970
But display should read should expect a ref and it should be contest.

152
00:08:58.050 --> 00:09:01.000
So in this case I want to be efficient and not copy that vector.

153
00:09:01.170 --> 00:09:03.450
And at the same time I don't want to change it accidentally.

154
00:09:03.450 --> 00:09:05.270
So there's my Konst.

155
00:09:05.430 --> 00:09:06.210
All right that's it.

156
00:09:06.210 --> 00:09:07.230
Good luck have fun.

157
00:09:07.230 --> 00:09:07.980
Play around.

158
00:09:08.040 --> 00:09:10.010
Change these prototypes if you like.

159
00:09:10.050 --> 00:09:13.940
Use the debugger I'm sure that'll help you a little bit when you're trying to learn this stuff.

160
00:09:13.950 --> 00:09:17.760
So those are the three you shouldn't have to change the main and you should get the same output as I

161
00:09:17.760 --> 00:09:18.290
did.

162
00:09:18.510 --> 00:09:23.340
We'll come back to the next video and we'll do the challenge solution and you'll see that it's actually

163
00:09:23.340 --> 00:09:29.370
pretty straightforward it's real nice to be able to have C++ manage all this stuff for us using smart

164
00:09:29.370 --> 00:09:30.040
pointers.
