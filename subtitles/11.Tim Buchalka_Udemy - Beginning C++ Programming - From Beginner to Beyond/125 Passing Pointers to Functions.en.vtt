WEBVTT
1
00:00:05.490 --> 00:00:11.110
In this video we'll see how we can do pass by reference using pointer parameters in C++.

2
00:00:11.120 --> 00:00:16.590
We can use pointers then the dereference operator to achieve pass by reference.

3
00:00:16.710 --> 00:00:19.170
In this case the function parameter is a pointer.

4
00:00:19.260 --> 00:00:23.460
And the actual parameter can be a pointer variable or the address of a variable.

5
00:00:23.460 --> 00:00:25.350
Let's see what this looks like syntactically

6
00:00:28.700 --> 00:00:32.140
here we're declaring a function prototype and then defining the function.

7
00:00:32.270 --> 00:00:37.190
The function is called Double data and it expects a pointer to an integer as a parameter.

8
00:00:37.190 --> 00:00:39.670
Notice it doesn't return anything.

9
00:00:39.710 --> 00:00:43.510
Instead it will double the contents of the data the pointer points to.

10
00:00:43.520 --> 00:00:48.620
So in the body of the function we simply dereference the pointer and multiply the value it points to

11
00:00:48.620 --> 00:00:51.170
by two and assign it right back.

12
00:00:51.170 --> 00:00:55.430
I've written this using a compound assignment statement but I've also written out the long form of the

13
00:00:55.430 --> 00:00:58.920
assignment statement just in case the compound assignment is confusing.

14
00:00:59.300 --> 00:01:01.940
I also chose to multiply by two on purpose.

15
00:01:01.940 --> 00:01:06.710
Since this uses the asterisk as the multiplication operator keep them straight.

16
00:01:06.830 --> 00:01:08.490
Don't let the syntax confuse you.

17
00:01:08.540 --> 00:01:13.760
In one case the asterisk is multiplication and in the other it's indirection or dereference operator

18
00:01:14.120 --> 00:01:14.600
OK.

19
00:01:14.600 --> 00:01:15.930
So how do you call this function.

20
00:01:15.980 --> 00:01:20.720
Let's see that in the next slide we know that since the function parameter is a pointer to an integer

21
00:01:21.020 --> 00:01:23.400
that means it expects the address of an integer.

22
00:01:23.570 --> 00:01:27.190
Well in this case I have an integer named value and it's initialized to 10.

23
00:01:27.410 --> 00:01:32.210
I can call double data with the address of that integer using the ampersand which is the address of

24
00:01:32.210 --> 00:01:33.470
operator.

25
00:01:33.470 --> 00:01:38.210
When I return from the function I now display value which has doubled to 20.

26
00:01:38.240 --> 00:01:44.230
Let's head over to the IEEE and see this and other examples of pass by reference with pointers.

27
00:01:44.240 --> 00:01:50.300
Ok so many ideas you can see that I mean the section 12 workspace in the passing pointers one project

28
00:01:50.650 --> 00:01:55.610
will go over a couple of different projects that do pass by reference using pointers a little bit differently

29
00:01:55.610 --> 00:01:56.160
from one another.

30
00:01:56.180 --> 00:01:59.800
You can see exactly what's happening and I'll walk you through these in detail.

31
00:01:59.840 --> 00:02:03.080
You can see here that we've got the same function that we wrote in the slides right here.

32
00:02:03.080 --> 00:02:04.320
Double data.

33
00:02:04.640 --> 00:02:09.990
It expects a pointer to an integer and all it does is it doubles whatever it's pointing to.

34
00:02:10.160 --> 00:02:12.620
So whatever integer is pointing there was just doubling it.

35
00:02:12.860 --> 00:02:16.340
And here's my main which we're going to run when a run maned couple of different ways.

36
00:02:16.340 --> 00:02:20.430
First this part right here and then the second part right here.

37
00:02:20.450 --> 00:02:25.010
This you will see is use the address of a value and this is using natural pointers to different ways

38
00:02:25.010 --> 00:02:27.220
to pass really the same information in.

39
00:02:27.360 --> 00:02:28.910
OK so let's start running this.

40
00:02:28.910 --> 00:02:32.260
We've got our main and it's activated on the stack right here.

41
00:02:32.290 --> 00:02:34.610
You'll notice Maine has two local variables.

42
00:02:34.610 --> 00:02:40.990
It's got an integer value and it's got an integer pointer so the value is on the stack.

43
00:02:41.100 --> 00:02:48.740
And right now it's initialized to 10 and we also have an 8 pointer which is a pointer to an integer

44
00:02:48.740 --> 00:02:49.810
and right now it's not.

45
00:02:49.910 --> 00:02:51.970
I'll just leave it blank.

46
00:02:52.130 --> 00:02:58.850
Let's say that value is an address 1000 and in pointers that address 2000 just to keep things straight.

47
00:02:59.030 --> 00:03:00.230
OK so that's where we're at.

48
00:03:01.150 --> 00:03:03.840
Now we're here at line 16 output value.

49
00:03:04.060 --> 00:03:04.880
But what's value.

50
00:03:04.930 --> 00:03:08.140
Well we just go to the variable and grab its contents right.

51
00:03:08.140 --> 00:03:10.710
So we're going to display a 10 here just like we have before.

52
00:03:12.250 --> 00:03:16.270
Now we call the function double data and we pass in the address of value.

53
00:03:16.270 --> 00:03:20.600
OK so main stops what it's doing and we transfer control over to this function up here.

54
00:03:20.770 --> 00:03:28.290
So we're going to call double data and we're going to pass in the address of value you can see right

55
00:03:28.290 --> 00:03:29.690
here what's the address of value.

56
00:03:29.700 --> 00:03:31.050
It's a thousand.

57
00:03:31.050 --> 00:03:34.750
So we're going to pass in a thousand to this function.

58
00:03:34.900 --> 00:03:40.600
That thousand will get copied into pointers so that function right here has a local variable called

59
00:03:40.840 --> 00:03:44.740
pointer and you could see that I got right there.

60
00:03:44.740 --> 00:03:47.050
Notice it's the same name as this variable.

61
00:03:47.050 --> 00:03:50.170
That's ok we can use the same name for different variables.

62
00:03:50.170 --> 00:03:52.540
These are two different variables and two different scopes.

63
00:03:52.630 --> 00:03:55.160
OK so we're passing in a thousand to it.

64
00:03:55.210 --> 00:03:57.070
So that's what we're doing.

65
00:03:57.070 --> 00:04:05.340
There's our pointer so now that the pointer is pointing to this value read here at address a thousand.

66
00:04:05.410 --> 00:04:08.240
So what do we do now what we're going to double that value basically.

67
00:04:08.260 --> 00:04:10.210
So let me write this out longhand here.

68
00:04:10.360 --> 00:04:14.950
So Will dereference pointer on the left hand side equals.

69
00:04:15.310 --> 00:04:21.490
Again dereference pointer times too and that's what this compound assignment is doing.

70
00:04:21.490 --> 00:04:25.390
Notice that that Astras right there is multiplication.

71
00:04:25.390 --> 00:04:28.980
These asterisks here that's the dereference operator.

72
00:04:29.140 --> 00:04:33.200
Keep them straight it doesn't matter that dragsters look at the context and it should be pretty clear.

73
00:04:33.250 --> 00:04:39.560
All right so let's execute this dereference int pointer followed the point towards pointing right here.

74
00:04:39.570 --> 00:04:47.860
Got a 10 multiply that by 2 gives me the 20 and we're assigning 20 into wherever and pointer is pointing

75
00:04:48.050 --> 00:04:49.980
in pointer is pointing to a thousand.

76
00:04:50.020 --> 00:04:53.730
So we just change that 10 to 20.

77
00:04:54.040 --> 00:04:55.980
At this point that function is done.

78
00:04:56.110 --> 00:04:57.580
So we're going to clean up the stack.

79
00:04:57.580 --> 00:05:01.190
This activation gets popped off the stack so this is all gone now.

80
00:05:03.080 --> 00:05:03.820
There you go.

81
00:05:03.830 --> 00:05:07.760
Now we're back to Main and we are put to value.

82
00:05:07.760 --> 00:05:13.760
The value is now 20 and we're done with that function call.

83
00:05:13.810 --> 00:05:16.230
OK so now let's keep going.

84
00:05:16.230 --> 00:05:16.980
We're here now.

85
00:05:17.040 --> 00:05:22.970
We're going to output a bunch of lines and then we're setting it pointer to the address of value.

86
00:05:23.220 --> 00:05:26.580
Well it was no before remember we nailed it out right here.

87
00:05:26.580 --> 00:05:31.610
So at this point it now is the address of value what's the address of value it's a thousand.

88
00:05:31.620 --> 00:05:34.350
So it's a thousand.

89
00:05:34.470 --> 00:05:38.630
There's my pointer I'm pointing to value.

90
00:05:38.940 --> 00:05:39.980
So what do I do now.

91
00:05:40.020 --> 00:05:45.270
I called Double data again so it's called Double data.

92
00:05:45.470 --> 00:05:47.160
And what are we passing into it this time.

93
00:05:47.280 --> 00:05:51.040
Point well what's the value of it pointer 1000.

94
00:05:51.180 --> 00:05:54.980
So we're calling this with a thousand which is the address of some integer.

95
00:05:55.150 --> 00:06:01.450
So we activate that on that activation record and it's got that same local variable right and pointer

96
00:06:02.610 --> 00:06:10.930
that's this guy right up here and recopying a thousand in there as the pointer same as we had before.

97
00:06:10.930 --> 00:06:13.260
So what do we do now we execute this code.

98
00:06:13.300 --> 00:06:17.520
It now changes is 20 to 40 OK.

99
00:06:17.580 --> 00:06:20.450
When the function is done we clean up our stack.

100
00:06:20.460 --> 00:06:23.760
We pop that activation record off the stack.

101
00:06:23.890 --> 00:06:25.860
So this pointer is gone.

102
00:06:26.050 --> 00:06:31.440
And then we come right back to Main and we say I put the value of the values now 40.

103
00:06:31.470 --> 00:06:32.370
OK so there you go.

104
00:06:32.380 --> 00:06:36.100
This is how pass by reference with pointers works is really pretty straightforward.

105
00:06:36.160 --> 00:06:41.910
Let's execute this code now and you'll see the result is.

106
00:06:41.950 --> 00:06:45.710
Now slide this over just a little bit you can see value here was 10.

107
00:06:45.710 --> 00:06:50.990
Then we doubled it to 20 then we called it again and doubled it again to 40 or perfect.

108
00:06:51.060 --> 00:06:56.100
So let's take a look at another example now.

109
00:06:56.130 --> 00:06:57.760
OK so here's another example.

110
00:06:57.780 --> 00:07:00.630
I'm in the same workspace section 12.

111
00:07:00.630 --> 00:07:06.840
Now I'm in the passing pointers to project and what I've done here is I've written a swap function that

112
00:07:06.840 --> 00:07:12.110
basically swaps two variables to weightage variables in this case and here's my main that exercises

113
00:07:12.160 --> 00:07:12.290
at.

114
00:07:12.300 --> 00:07:13.920
So let's let's try this out.

115
00:07:14.280 --> 00:07:16.200
Here's my main as usual.

116
00:07:16.200 --> 00:07:17.490
Here's the stack.

117
00:07:17.490 --> 00:07:19.050
Main has two local variables.

118
00:07:19.050 --> 00:07:27.160
It's got X and it's got y x is initialized to 100 and Y is initialized to 200.

119
00:07:27.630 --> 00:07:31.900
Let's assume that these are at addresses 1000 and 2000.

120
00:07:31.920 --> 00:07:35.120
So we've got some nice easy numbers to work with.

121
00:07:35.130 --> 00:07:35.580
OK.

122
00:07:35.730 --> 00:07:37.980
So right here we're up putting what's x.

123
00:07:37.980 --> 00:07:40.930
We're putting a new line in front of x but that's OK what's x.

124
00:07:41.140 --> 00:07:42.900
Well X is 100.

125
00:07:42.900 --> 00:07:48.740
So we're going to display 100 here and now we're going to say well what's why we're going to output

126
00:07:48.740 --> 00:07:50.780
the value of Y which is 200.

127
00:07:51.020 --> 00:07:52.940
Pretty easy.

128
00:07:53.070 --> 00:07:54.700
Now main stops what it's doing.

129
00:07:54.780 --> 00:07:57.480
And we transfer control over to swap.

130
00:07:57.570 --> 00:07:58.890
So we're going to call swap

131
00:08:01.540 --> 00:08:07.490
and you notice swamp has three local variables it's got an A it's got a B and it's got a temp.

132
00:08:07.550 --> 00:08:11.740
So we need to allocate storage for all of those on the activation record on the on the stack.

133
00:08:11.740 --> 00:08:12.030
Right.

134
00:08:12.140 --> 00:08:18.920
So we've got a we've got B and we've got temp.

135
00:08:19.160 --> 00:08:23.620
In this case a are both pointers to integers and templates just a regular integer.

136
00:08:23.840 --> 00:08:28.910
So we're going to call swap with the address of X and the address of y the address of x is a thousand

137
00:08:30.950 --> 00:08:34.860
and the address of y is 2000.

138
00:08:34.970 --> 00:08:37.340
So that's what the call looks like.

139
00:08:37.580 --> 00:08:42.700
Now this X right here gets mapped to that parameter.

140
00:08:42.710 --> 00:08:43.580
So that's what we're doing.

141
00:08:43.580 --> 00:08:45.480
We're copying that value too.

142
00:08:45.500 --> 00:08:49.080
So it's not going to be what X is right here.

143
00:08:49.100 --> 00:08:49.950
Right.

144
00:08:49.960 --> 00:08:54.830
I am going to get a thousand and B will get 2000.

145
00:08:54.890 --> 00:08:56.370
So here are your pointers.

146
00:08:56.480 --> 00:09:01.650
B is pointing right here and a is pointing right there.

147
00:09:02.360 --> 00:09:06.030
Yes and let's start executing this code temp.

148
00:09:06.350 --> 00:09:11.210
We're assigning what points to to temp but what is a point till we know points to an integer right.

149
00:09:11.210 --> 00:09:12.710
Because this is an integer pointer.

150
00:09:12.800 --> 00:09:16.680
So we're going to take the integer that points to let's follow a.

151
00:09:16.760 --> 00:09:21.470
It points to 100 and we're storing it in temp temp was an integer not a pointer.

152
00:09:21.470 --> 00:09:23.090
OK so that's done.

153
00:09:23.210 --> 00:09:26.810
Now we're going to execute the second one which says take what B is pointing to.

154
00:09:26.840 --> 00:09:32.170
Or let's follow B beast pointing to 200 hundred and put it into where AA was pointing.

155
00:09:32.210 --> 00:09:34.070
OK it was pointing here.

156
00:09:34.130 --> 00:09:36.800
So we're going up to 200 here.

157
00:09:37.370 --> 00:09:41.990
So that's done and then we'll take the temp which was 100 right here and we're going to put it into

158
00:09:42.000 --> 00:09:43.770
a where B was pointing.

159
00:09:43.880 --> 00:09:46.820
So B was pointing to here.

160
00:09:46.910 --> 00:09:48.340
Sort of put the 100 here.

161
00:09:48.350 --> 00:09:52.200
Notice those two integers got swamped now.

162
00:09:52.400 --> 00:09:54.680
So at this point the function is done.

163
00:09:54.740 --> 00:09:55.500
What do we do.

164
00:09:55.580 --> 00:09:56.760
We clean up the stack.

165
00:09:56.780 --> 00:09:59.340
We pop off that activation record.

166
00:10:00.200 --> 00:10:05.130
All this is now gone and we just clean these up as well.

167
00:10:05.720 --> 00:10:07.220
And that's where we're at right now.

168
00:10:07.400 --> 00:10:13.820
So we're back in May now what's X we protect the value of x is 200 and we display the value of y right

169
00:10:13.820 --> 00:10:16.400
here which is 100.

170
00:10:16.490 --> 00:10:19.890
Notice that we actually swap those variables.

171
00:10:20.060 --> 00:10:24.620
So that's really what's going on with pass by reference with pointers in this example.

172
00:10:24.620 --> 00:10:28.270
It's pretty straightforward if you remember we did this with references.

173
00:10:28.490 --> 00:10:34.040
References is probably what you'd want to do here but I'll talk about using references versus pointers

174
00:10:34.460 --> 00:10:39.570
on the very last video in the section that gives you some insight as to what to use when.

175
00:10:39.620 --> 00:10:41.840
But there you go this is how you do it with pointers.

176
00:10:41.840 --> 00:10:53.150
Let's look at another example now.

177
00:10:53.220 --> 00:10:59.670
OK so I've switched over to the passing pointers three project in the section 12 workspace.

178
00:10:59.970 --> 00:11:04.770
In this case we're going to pass a pointer to a vector rather than using integers as we've done in the

179
00:11:04.770 --> 00:11:05.350
past.

180
00:11:05.460 --> 00:11:09.570
And this couple of examples in this main and I'll leave the second example here that's commented out

181
00:11:09.900 --> 00:11:11.330
for after I showed you this one.

182
00:11:11.400 --> 00:11:13.310
So this is what I've got.

183
00:11:13.470 --> 00:11:20.510
I've got a real simple function here called display and it expects a pointer to a vector of strings

184
00:11:20.510 --> 00:11:24.410
so expects the address of some vector that hold strings.

185
00:11:24.500 --> 00:11:28.480
We can all it's doing is just looping through the vector and printing out all the strings in it.

186
00:11:28.500 --> 00:11:29.930
I'm not going to draw the stack out now.

187
00:11:29.940 --> 00:11:33.510
I think this is going to be pretty easy to follow and I'd have gone over all those examples.

188
00:11:33.510 --> 00:11:36.220
So in this case I've got a vector of string objects.

189
00:11:36.240 --> 00:11:37.320
It's called Stooges.

190
00:11:37.320 --> 00:11:40.330
And here's the three stooges Larry Moe and Curly.

191
00:11:40.470 --> 00:11:41.420
So what have I got.

192
00:11:41.430 --> 00:11:46.600
I've basically got a vector object and it's got three strings.

193
00:11:46.620 --> 00:11:51.670
Larry Moe and Curly.

194
00:11:51.860 --> 00:11:53.920
It's called Stooges.

195
00:11:55.060 --> 00:12:03.540
And it exists at location a thousand on the stack there in the main Mayne's activation record.

196
00:12:03.730 --> 00:12:08.060
Then I'm just calling stooges here I'm calling display and I'm passing in the address of stooges.

197
00:12:08.080 --> 00:12:08.740
Perfect.

198
00:12:09.040 --> 00:12:15.970
So now once I'm here in this display function that you see here on 7 once I'm here all I want to do

199
00:12:16.060 --> 00:12:19.430
is display all those strings that are in the vector.

200
00:12:19.480 --> 00:12:24.190
So I'm going to use a range base for loop that just iterates through the vector imprints of the strings.

201
00:12:24.190 --> 00:12:29.640
Well I have a pointer Here's my VI right and V has a thousand in it.

202
00:12:29.650 --> 00:12:34.870
So this is v right here it's pointing not the vector again but just a simple pointer.

203
00:12:35.140 --> 00:12:39.960
So in order to get to what the pointer is pointing to dereference the pointer.

204
00:12:39.970 --> 00:12:41.080
That's what I need to do.

205
00:12:41.230 --> 00:12:46.770
So if I dereferences v I've got this Stooges vector right here right.

206
00:12:46.870 --> 00:12:49.970
And that's what's going on right there.

207
00:12:50.110 --> 00:12:52.770
So for Auto which is a string right.

208
00:12:53.020 --> 00:12:59.490
So for every string in the collection while the collection is not v these the pointer to the collection.

209
00:12:59.500 --> 00:13:06.760
So if I dereference V I get to collection and this executes just like you would expect OK.

210
00:13:06.940 --> 00:13:12.770
Now let me clear this out and I'll run it real quick so that we can test this.

211
00:13:12.870 --> 00:13:18.000
And there you see Larry Moe and Curly being displayed by this function right here.

212
00:13:18.000 --> 00:13:22.080
Now in this case we really don't want this display function to modify stuff right.

213
00:13:22.080 --> 00:13:23.910
I mean it's only displaying vector elements.

214
00:13:23.910 --> 00:13:28.810
We don't want to modifying anything so we could get this to modify something.

215
00:13:29.190 --> 00:13:34.740
That's not what we want to do but we certainly could do remember that we could do the at method of the

216
00:13:34.740 --> 00:13:39.410
vector class where we could simply do star v.

217
00:13:39.750 --> 00:13:42.410
Right dereferenced this pointer.

218
00:13:42.420 --> 00:13:50.700
That gives to the vector then I could say dot at zero equals funny.

219
00:13:51.510 --> 00:13:55.380
And what that will do is it'll change the first vector element Larry.

220
00:13:55.380 --> 00:13:57.200
Too funny.

221
00:13:57.330 --> 00:14:03.170
Notice the syntax the syntax may be a little strange but think about this this is very logical right.

222
00:14:03.240 --> 00:14:10.580
If I dereference the pointer I get the vector and then once I have the vector I can do at that size

223
00:14:10.590 --> 00:14:12.120
whatever else I need on it.

224
00:14:12.120 --> 00:14:13.600
So this sets that to funny.

225
00:14:13.830 --> 00:14:24.940
I could also come over here and do something like vi which is the pointer right is no pointer.

226
00:14:24.940 --> 00:14:26.810
So now I'm not pointing anywhere.

227
00:14:26.890 --> 00:14:30.890
So if I do both of these you can see that this will compile just fine and run.

228
00:14:30.900 --> 00:14:37.460
Now if I move this to the top right there.

229
00:14:37.600 --> 00:14:42.060
Now I'm actually going to change that vector element so when I run it you'll see funny now instead of

230
00:14:42.370 --> 00:14:44.790
Larry you see that right there.

231
00:14:44.920 --> 00:14:47.130
So this is not something you want to happen.

232
00:14:47.140 --> 00:14:47.700
Right.

233
00:14:47.700 --> 00:14:51.450
So display function is should be messing around with the vector that you're pointing to.

234
00:14:51.580 --> 00:14:55.520
So in this case we could use the conc qualifier here.

235
00:14:55.770 --> 00:14:56.080
Right.

236
00:14:56.170 --> 00:15:01.090
That will prevent this from happening right there so if I do this now I'll get a compiler error right

237
00:15:01.090 --> 00:15:05.290
there you can see the red arrows saying hey you're telling me that that vext that vector I'm pointing

238
00:15:05.290 --> 00:15:06.760
to is constant you can't mess with it.

239
00:15:06.760 --> 00:15:11.460
You just tried to mess with it so that it won't be allowed.

240
00:15:11.680 --> 00:15:17.830
And if I put a concert here then this line 13 won't be allowed.

241
00:15:17.830 --> 00:15:18.880
I'll try to compile that.

242
00:15:18.940 --> 00:15:22.270
And there's the error because now you're telling me that the pointer is constant.

243
00:15:22.270 --> 00:15:25.230
You just tried to change it here.

244
00:15:25.340 --> 00:15:27.800
OK so again that's not what you want to do here.

245
00:15:29.500 --> 00:15:32.120
All right so now it's a lot safer.

246
00:15:32.290 --> 00:15:36.060
This function we can't change the vector and we can't change the pointer either.

247
00:15:37.200 --> 00:15:41.010
So let's look at one last quick example and I'll clear this out.

248
00:15:41.800 --> 00:15:44.200
And what we've got now is let me close this up.

249
00:15:44.200 --> 00:15:47.980
We've got another function called display because we're using the function overloading here remember

250
00:15:47.980 --> 00:15:50.550
we can use the same name for for two different functions.

251
00:15:51.040 --> 00:15:56.940
And I mean come at this piece out you know uncomment this piece right here.

252
00:15:57.070 --> 00:15:57.510
OK.

253
00:15:57.640 --> 00:16:02.740
So in this case I have an array of scores right which is an array of integers and I've set them all

254
00:16:02.740 --> 00:16:05.740
to these scores and I've got a negative one at the end.

255
00:16:05.800 --> 00:16:08.070
In this case the negative one is a sentinel.

256
00:16:08.110 --> 00:16:10.890
This is where I want to stop processing.

257
00:16:10.960 --> 00:16:16.020
So what I'm doing in this display function here is I'm passing in the address of that first integer

258
00:16:17.050 --> 00:16:18.080
and the Sentinel.

259
00:16:18.180 --> 00:16:21.070
We don't want to stop and you can see what this is doing.

260
00:16:21.240 --> 00:16:28.540
Saying While what I'm pointing to right there is not equal to the Sentinel which in this case is minus

261
00:16:28.540 --> 00:16:32.440
1 then process what I'm doing right.

262
00:16:32.440 --> 00:16:38.920
So I'm going to basically dereference that array display 100 and then increment the read the pointer

263
00:16:38.920 --> 00:16:39.880
to the next element.

264
00:16:39.880 --> 00:16:41.350
So think about what's going on here.

265
00:16:41.350 --> 00:16:42.410
Here's the array.

266
00:16:43.310 --> 00:16:45.940
And let's just put a few numbers in here.

267
00:16:46.060 --> 00:16:54.870
One hundred 98 97 79 85 and minus one I might have missed one but that's OK.

268
00:16:55.080 --> 00:16:57.940
So at this point that's my scores.

269
00:16:58.030 --> 00:17:00.060
This is scores.

270
00:17:00.180 --> 00:17:03.810
This is the same address 1000.

271
00:17:03.930 --> 00:17:04.470
Perfect.

272
00:17:04.470 --> 00:17:06.600
So I'm passing in scores.

273
00:17:06.600 --> 00:17:17.000
So now my array variable in the function points right there and my centinel is minus 1.

274
00:17:17.000 --> 00:17:19.580
All right so am I pointing to negative 1.

275
00:17:19.580 --> 00:17:21.580
No I'm not I'm pointing to a hundred.

276
00:17:21.590 --> 00:17:22.500
All right.

277
00:17:22.520 --> 00:17:27.490
Print out 100 and increment the pointer.

278
00:17:27.490 --> 00:17:28.780
Who were the pointer pointing to.

279
00:17:28.790 --> 00:17:31.930
Well now the point is going to point here not here.

280
00:17:32.770 --> 00:17:37.780
So now we're going to loop again a printout of 98 and we're going to keep doing that until we hit minus

281
00:17:37.780 --> 00:17:38.040
1.

282
00:17:38.050 --> 00:17:44.590
So this is going to print 98 97 79 85 and then it's going to stop.

283
00:17:44.670 --> 00:17:49.730
In this case we could pass in constant for the array right.

284
00:17:49.740 --> 00:17:50.850
We're pointing to these numbers.

285
00:17:50.850 --> 00:17:54.870
We don't want to change it but we are actually updating the pointer here.

286
00:17:55.290 --> 00:17:58.760
So we can't have a constant pointer right.

287
00:17:58.770 --> 00:18:04.770
We can have constant a pointer concept integers but not a constant pointers because we're actually changing

288
00:18:04.770 --> 00:18:05.510
the pointer.

289
00:18:05.520 --> 00:18:09.210
This is something in this example here that you can't do with references.

290
00:18:09.210 --> 00:18:11.830
You've really got to use pointers to do this kind of stuff.

291
00:18:12.720 --> 00:18:13.190
OK.

292
00:18:13.240 --> 00:18:15.320
So that wraps up this video.

293
00:18:15.440 --> 00:18:19.690
And there you see a couple of different examples of pass by value with pointers.

294
00:18:20.080 --> 00:18:23.580
At this point you might be thinking do I use pointers do I use references.

295
00:18:23.590 --> 00:18:24.560
How do I do this.

296
00:18:24.700 --> 00:18:25.330
Stay tuned.

297
00:18:25.330 --> 00:18:29.530
And the last video on this section I'll tell you exactly when you should use pointers and when you should

298
00:18:29.530 --> 00:18:30.340
use references.
