WEBVTT
1
00:00:05.560 --> 00:00:11.660
In this video we'll learn about a specific type of virtual function called a pure virtual function and

2
00:00:11.660 --> 00:00:17.180
how it lets us create abstract classes before we learn about pure virtual functions.

3
00:00:17.270 --> 00:00:24.350
Let's see what an abstract class is an abstract class is a class that cannot be instantiated.

4
00:00:24.410 --> 00:00:30.650
So if we have an abstract class shape then we cannot directly instantiate shape objects.

5
00:00:30.740 --> 00:00:31.840
You might be thinking.

6
00:00:31.880 --> 00:00:33.990
So what good is a class like that.

7
00:00:34.280 --> 00:00:40.190
Well abstract classes are used as base classes in inheritance hierarchies and they're often referred

8
00:00:40.190 --> 00:00:42.730
to as abstract base classes.

9
00:00:43.280 --> 00:00:48.890
So what do we call classes that you can instantiate from these classes are called concrete classes.

10
00:00:48.890 --> 00:00:51.650
And those are the ones that we've been using all along in this course.

11
00:00:51.650 --> 00:00:57.500
All of their member functions must be to find examples of these classes might be a checking account

12
00:00:57.530 --> 00:01:03.260
and a savings account in an account hierarchy of faculty and staff classes in the employee hierarchy

13
00:01:03.740 --> 00:01:11.690
and enemy and level bosses in a player hierarchy and abstract base class is usually too generic to be

14
00:01:11.690 --> 00:01:14.070
useful to directly derive objects from.

15
00:01:14.330 --> 00:01:17.160
But it serves as a parent to be derived from.

16
00:01:17.210 --> 00:01:19.530
And those could be concrete classes.

17
00:01:19.580 --> 00:01:24.540
So in an account hierarchy we're providing savings accounts checking accounts and trust accounts.

18
00:01:24.650 --> 00:01:27.490
But do we ever provide just an account.

19
00:01:27.500 --> 00:01:28.310
Probably not.

20
00:01:28.310 --> 00:01:32.930
If a customer walked in and said they'd like to open an account they'd be asked what type of account

21
00:01:32.930 --> 00:01:34.030
they'd like to open.

22
00:01:34.340 --> 00:01:38.810
So we would never really have account objects directly instantiated in our system.

23
00:01:38.960 --> 00:01:42.440
We would have checking accounts savings accounts or trust accounts.

24
00:01:42.440 --> 00:01:48.620
So the account class can be thought of as a general class that's the parent to all of the classes.

25
00:01:48.680 --> 00:01:53.720
The same can be said for the player class in a player hierarchy and the Employee class in a university

26
00:01:53.720 --> 00:01:55.710
personnel system.

27
00:01:56.030 --> 00:02:02.310
In order for a class to be an abstract base class it must contain at least one pure virtual function.

28
00:02:02.510 --> 00:02:09.020
So let's see what a pure virtual function is a pure virtual function is a virtual function that you

29
00:02:09.020 --> 00:02:11.570
use to make a class abstract.

30
00:02:11.570 --> 00:02:18.540
We declare pure virtual functions just like virtual functions but we add the equals zero after the prototype.

31
00:02:19.160 --> 00:02:24.860
Typically pure virtual functions don't have any implementation since it's really up to the derived concrete

32
00:02:24.860 --> 00:02:26.870
classes to define this behavior.

33
00:02:27.020 --> 00:02:31.940
But it is possible to give them an implementation in the code snippet in the slide you can see that

34
00:02:31.940 --> 00:02:38.360
we declared a pure virtual function named function whatever class this function is declared in is now

35
00:02:38.360 --> 00:02:43.260
an abstract class and cannot be instantiated.

36
00:02:43.400 --> 00:02:49.130
So we see that a pure virtual function makes a class abstract which means we can't directly instantiate

37
00:02:49.130 --> 00:02:49.750
them.

38
00:02:50.150 --> 00:02:56.090
But when we derive a class from an abstract class we must override the pure virtual functions in the

39
00:02:56.090 --> 00:03:01.880
base class in order to be a concrete class if we don't override all the virtual functions in the base

40
00:03:01.880 --> 00:03:06.100
class then the derived class will also be abstract.

41
00:03:06.110 --> 00:03:11.540
This is very useful when it does make sense for a base class to have an implementation but it does make

42
00:03:11.540 --> 00:03:13.900
sense in concrete classes.

43
00:03:13.970 --> 00:03:16.660
For example suppose we have a shape hierarchy.

44
00:03:16.970 --> 00:03:23.090
The concept of a shape is too general or too abstract to have shape objects in our system so we can

45
00:03:23.090 --> 00:03:29.960
define the draw method as a pure virtual function in the Shape class and that not only makes it an abstract

46
00:03:29.960 --> 00:03:35.990
class but it also forces all derived classes to implement the draw method if they want to be concrete

47
00:03:35.990 --> 00:03:42.900
classes and we can say the same thing for the defend method in a player class.

48
00:03:42.920 --> 00:03:46.130
Here we see an example of a shape hierarchy.

49
00:03:46.130 --> 00:03:51.170
Suppose we're creating a simple application that allows us to draw and manipulate shapes on the screen.

50
00:03:51.170 --> 00:03:55.970
The shapes that we would be drawing in manipulating would be lines circles squares and probably many

51
00:03:55.970 --> 00:03:56.700
others.

52
00:03:57.170 --> 00:04:02.300
So we will have circle objects line objects square objects and so forth.

53
00:04:02.300 --> 00:04:08.900
Would we ever have a shape object know a shape object is just an abstraction that we can use as a base

54
00:04:08.900 --> 00:04:12.380
class if we declared to pure virtual functions.

55
00:04:12.380 --> 00:04:19.700
Draw and rotate in that shape class then all derived classes must override these methods or they will

56
00:04:19.760 --> 00:04:21.370
also be abstract.

57
00:04:21.380 --> 00:04:27.560
You can see in this class hierarchy that shape open shape and close shape are all abstract classes.

58
00:04:27.650 --> 00:04:33.540
Since their names are italicized and line circle and square are concrete classes.

59
00:04:34.280 --> 00:04:36.920
Here's the partial code for the Shape class.

60
00:04:36.920 --> 00:04:40.640
Notice the declarations for the pure virtual functions.

61
00:04:40.640 --> 00:04:46.310
It makes no sense to provide implementations for draw and rotate in the shade class since we have no

62
00:04:46.310 --> 00:04:49.510
idea how to draw or rotate the abstraction shape.

63
00:04:49.580 --> 00:04:51.880
We'll leave that up to our concrete classes.

64
00:04:53.050 --> 00:04:56.920
In this example we drive a circle from a shape.

65
00:04:57.190 --> 00:05:03.850
If this class overrides the draw and rotate virtual functions then it becomes a concrete class and we

66
00:05:03.850 --> 00:05:05.980
can instantiate circle objects.

67
00:05:05.980 --> 00:05:08.980
In this case we're overriding the pure virtual functions.

68
00:05:09.010 --> 00:05:18.320
So the circle class is a concrete class so remember abstract base classes cannot be instantiated directly.

69
00:05:18.820 --> 00:05:22.590
If we create a shape object shape the compiler will give us an error.

70
00:05:23.140 --> 00:05:28.360
Also if we create a shape object dynamically on the heap we will also get a compiler error but we can

71
00:05:28.360 --> 00:05:33.670
use base class pointers and references as we've already learned to achieve dynamic polymorphism and

72
00:05:33.670 --> 00:05:38.580
have some very powerful reusable and flexible class hierarchies.

73
00:05:38.590 --> 00:05:44.380
Notice that PTO is a pointer to a shape and then we create a circle object on the heap and point to

74
00:05:44.380 --> 00:05:46.150
it from Peter.

75
00:05:46.210 --> 00:05:49.990
Now we can call draw and rotate via the pointer.

76
00:05:49.990 --> 00:05:51.600
How do we know this will work.

77
00:05:51.610 --> 00:05:57.850
Well it has to because all concrete classes derive from shape must have overridden the draw and rotate

78
00:05:57.850 --> 00:05:58.790
methods.

79
00:05:58.810 --> 00:06:00.270
That's pretty awesome.

80
00:06:00.280 --> 00:06:06.470
Let's head over to the ID and see an example that uses pure virtual functions and abstract base classes.

81
00:06:06.970 --> 00:06:12.810
So I mean the idea I mean the Section 16 workspace in the pure virtual functions project.

82
00:06:13.150 --> 00:06:18.490
What I've done here is I've created a shape hierarchy and I'm using pure virtual functions to establish

83
00:06:18.490 --> 00:06:19.820
an abstract base class.

84
00:06:19.840 --> 00:06:23.050
So let me walk you through this and then what we'll do is we'll run some examples.

85
00:06:23.050 --> 00:06:26.860
When we write a main and we'll create some shape objects and call some of the methods so that you can

86
00:06:26.860 --> 00:06:28.720
see exactly how this works.

87
00:06:28.960 --> 00:06:31.450
OK so here's my Shape class.

88
00:06:31.450 --> 00:06:37.910
Notice that the Shape class has these two pure virtual functions one is called draw one is called rotate.

89
00:06:38.020 --> 00:06:41.640
That makes this class shape an abstract class.

90
00:06:41.710 --> 00:06:47.200
In this case it's going to be an abstract base class because I'm going to derive from it I cannot instantiate

91
00:06:47.200 --> 00:06:48.060
shape objects.

92
00:06:48.070 --> 00:06:57.250
I can't say shape s can I can't say I can't even go out through a pointer I can't say pointer p equals

93
00:06:57.250 --> 00:07:01.710
new shape OK right.

94
00:07:01.720 --> 00:07:03.580
I'm trying to create a shape object directly.

95
00:07:03.580 --> 00:07:04.590
I can't do that.

96
00:07:04.600 --> 00:07:08.520
So both of these will give me compiler errors in error I'll say something like.

97
00:07:08.530 --> 00:07:11.440
You can't instantiate an abstract class or something like that.

98
00:07:11.470 --> 00:07:13.420
Which which is a good error makes sense.

99
00:07:13.420 --> 00:07:16.180
So that's my abstract base class.

100
00:07:16.180 --> 00:07:21.010
Notice the virtual destructor always use that when you've got virtual functions perfect.

101
00:07:21.010 --> 00:07:26.980
So now let's create an open shape an open ship would be a line of spline things like that in close shapes

102
00:07:26.980 --> 00:07:28.990
would be circles and squares and so forth.

103
00:07:28.990 --> 00:07:31.650
So here we're creating a class called Open shape.

104
00:07:31.690 --> 00:07:33.990
Notice it's derived publicly from shape.

105
00:07:34.270 --> 00:07:37.650
Also notice that I did not override those two virtual functions.

106
00:07:37.720 --> 00:07:40.210
So that makes this class abstract.

107
00:07:40.210 --> 00:07:43.810
I cannot instantiate open shape objects.

108
00:07:43.810 --> 00:07:44.800
Same idea here.

109
00:07:44.800 --> 00:07:48.880
Here I've got a close shape that's derived publicly from shape.

110
00:07:48.880 --> 00:07:51.420
I am not overwriting those two methods.

111
00:07:51.430 --> 00:07:53.050
You can see in the base class in here.

112
00:07:53.080 --> 00:07:57.250
So this class again is an abstract class.

113
00:07:57.250 --> 00:08:01.510
OK so now let's look at our concrete classes those are the ones that obviously know how to do things.

114
00:08:01.510 --> 00:08:06.070
It makes no sense for me to write code here that draws a shape or rotates a ship.

115
00:08:06.070 --> 00:08:11.350
I have no idea what a shape is right this is just an abstraction for a shape rotating a square versus

116
00:08:11.350 --> 00:08:15.360
a line is very different and drawing a line versus a square is very different.

117
00:08:15.360 --> 00:08:18.340
So the concrete classes are the ones that take care of that.

118
00:08:18.640 --> 00:08:23.160
OK so let me scroll down just a bit to read two concrete classes right here.

119
00:08:23.170 --> 00:08:30.880
So these concrete classes right here you can see I've got a line I've got the circle and I've got this

120
00:08:30.880 --> 00:08:32.170
square right here.

121
00:08:32.170 --> 00:08:38.110
So in this case I'm not deriving directly from shape I'm in line is an open shape so I'm taking advantage

122
00:08:38.110 --> 00:08:38.960
of that.

123
00:08:39.430 --> 00:08:46.180
It's a concrete class this time because you can see right here I'm overwriting both of those pure virtual

124
00:08:46.180 --> 00:08:47.560
functions.

125
00:08:47.770 --> 00:08:49.410
That makes me a concrete class.

126
00:08:49.430 --> 00:08:51.430
Now I can have line objects.

127
00:08:51.580 --> 00:08:52.490
Same with circle.

128
00:08:52.510 --> 00:08:53.240
You can see here.

129
00:08:53.270 --> 00:09:00.310
Circle is a closed shape and right here I'm overwriting those two pure virtual functions and then down

130
00:09:00.310 --> 00:09:05.980
at the bottom you can see exactly the same thing with the square right here you can see that square

131
00:09:06.040 --> 00:09:12.310
is a closed shape and I'm overwriting those two pure virtual functions so I can have square objects

132
00:09:12.310 --> 00:09:13.390
out there.

133
00:09:14.080 --> 00:09:19.090
OK so this is the same hierarchy that you saw in the slides that were displayed in the UML diagram.

134
00:09:19.090 --> 00:09:23.030
Now let's write some code that will allow us to use these.

135
00:09:23.500 --> 00:09:28.830
OK so let's write some code in the main we can start off by just trying to create a shape object and

136
00:09:28.850 --> 00:09:34.000
create a shape object yes or we can come at it with a pointer just like we did a little bit ago.

137
00:09:34.180 --> 00:09:39.730
We'll just call it P is in the shape and you can see that if I try to compile this it's not going to

138
00:09:39.730 --> 00:09:41.880
compile.

139
00:09:42.080 --> 00:09:48.970
There's a compiler error and says cannot declare variable as to be of an abstract type shape and same

140
00:09:48.970 --> 00:09:51.520
thing here with this new shape.

141
00:09:51.580 --> 00:09:54.160
I'm not allowed to instantiate shaped objects.

142
00:09:54.160 --> 00:09:54.560
OK.

143
00:09:54.580 --> 00:09:58.910
So we've seen that before and that's a function of those pure virtual functions.

144
00:09:58.930 --> 00:10:01.870
The fact that they're in there makes the classes abstract.

145
00:10:01.870 --> 00:10:07.810
I'll comment these two lines of code out and if we also tried to instantiate open shapes and closed

146
00:10:07.810 --> 00:10:13.950
shapes we'd also get the same error because they are all so abstract classes.

147
00:10:13.960 --> 00:10:16.280
Now suppose we create a circle right.

148
00:10:16.300 --> 00:10:17.280
We can certainly do that.

149
00:10:17.290 --> 00:10:22.980
We can say Circle C and we can call it draw.

150
00:10:23.230 --> 00:10:24.500
We know it's there.

151
00:10:24.600 --> 00:10:26.600
Now in this case.

152
00:10:27.200 --> 00:10:29.820
So in this case you can see it says drawing a circle right.

153
00:10:29.980 --> 00:10:32.760
But this is not coming at it with a base class pointer.

154
00:10:32.770 --> 00:10:37.630
This is all being statically bound we're not using dynamic polymorphism here and that's ok sometimes

155
00:10:37.630 --> 00:10:42.100
you want to do that but the real purpose of creating that abstract base class is so that we can come

156
00:10:42.100 --> 00:10:46.380
at this class hierarchy with base class pointers or references.

157
00:10:46.390 --> 00:10:50.620
So let me comment that code out as well and let's create a base class pointer.

158
00:10:50.620 --> 00:10:53.550
So the base class in this example is shape right.

159
00:10:53.620 --> 00:10:57.360
So we'll create a shaped pointer which is called TTR.

160
00:10:57.550 --> 00:11:02.140
And what we'll do is remember I can't say new shape here but I can certainly instantiate derived concrete

161
00:11:02.140 --> 00:11:02.890
classes.

162
00:11:02.950 --> 00:11:05.400
So what I'll do is create a circle.

163
00:11:06.400 --> 00:11:15.120
And now if I do draw or picture or rotate so you can see now that if I called the draw and rotate methods

164
00:11:15.130 --> 00:11:20.200
through the base class pointer what's going to happen is we're having dynamic polymorphism So the function

165
00:11:20.200 --> 00:11:24.610
call will be bound at runtime and we're going to call the draw on the rotate for the circle because

166
00:11:24.610 --> 00:11:26.050
that's what I'm pointing to.

167
00:11:26.050 --> 00:11:32.820
So if we run this we can see that we're drawing and rotating the circle which is pretty cool.

168
00:11:32.820 --> 00:11:34.750
And now this is exactly what we've been doing before.

169
00:11:34.750 --> 00:11:40.150
The only difference here is that we're using those pure virtual functions to define an interface if

170
00:11:40.150 --> 00:11:46.600
you will at that base class level and all our concrete classes must implement those pure virtual functions.

171
00:11:46.660 --> 00:11:49.400
Otherwise they are abstract themselves.

172
00:11:49.750 --> 00:11:52.430
OK so let's look at a couple of other examples.

173
00:11:52.450 --> 00:11:56.160
And you come at this out again real quick so it doesn't clutter up our display.

174
00:11:56.500 --> 00:12:01.860
And let's just create a few shaped objects so let's say this create a few sharp objects through pointers

175
00:12:01.860 --> 00:12:04.470
so let's say at Swanage and you circle

176
00:12:07.680 --> 00:12:10.350
as to is a new line.

177
00:12:11.250 --> 00:12:17.100
And finally we'll just say s three is a new square.

178
00:12:18.070 --> 00:12:18.450
OK.

179
00:12:18.480 --> 00:12:23.940
Now remember we've got all shaped pointers here at all base class pointers and what we're actually pointing

180
00:12:23.940 --> 00:12:26.760
to are our concrete derived classes.

181
00:12:27.180 --> 00:12:28.020
So that's pretty cool.

182
00:12:28.020 --> 00:12:32.730
Now what we can do is let me write the code here to lead these guys down at the bottom so we definitely

183
00:12:32.730 --> 00:12:34.890
don't want to leak.

184
00:12:36.210 --> 00:12:40.010
OK so I've written the code to free up that allocated storage out at the bottom.

185
00:12:40.110 --> 00:12:41.960
And now we're free to use these guys.

186
00:12:42.120 --> 00:12:44.810
And now we're free to use these guys so what do we want to do.

187
00:12:44.970 --> 00:12:48.450
Well why don't we put them in a vector and then loop through the vector and call each one of their shape

188
00:12:48.450 --> 00:12:50.690
methods that say the draw method.

189
00:12:50.880 --> 00:12:52.990
So let's create a vector.

190
00:12:54.360 --> 00:13:00.650
And what does that factor have a vector of what my template parameter there will has to be a shape pointer

191
00:13:00.660 --> 00:13:01.400
right.

192
00:13:01.410 --> 00:13:04.390
It can't be a shape coming at it from a base class pointer.

193
00:13:04.490 --> 00:13:07.080
So in this case I have a shaped pointer.

194
00:13:07.410 --> 00:13:11.810
And again I'm using a raw pointer here in the shapes you got to be really careful when you do that in

195
00:13:11.820 --> 00:13:13.870
the next section we'll learn about smart pointers.

196
00:13:13.890 --> 00:13:18.690
You should probably be using a unique pointer here or a shared pointer but in this case this will be

197
00:13:18.760 --> 00:13:19.840
this work just fine.

198
00:13:20.010 --> 00:13:21.940
So there's my shapes.

199
00:13:22.200 --> 00:13:25.420
And let's set it to one as two in history.

200
00:13:25.620 --> 00:13:26.890
So there's my vector A.

201
00:13:26.910 --> 00:13:29.130
It contains pointers to shapes.

202
00:13:29.160 --> 00:13:31.120
And I've got all three of them in there.

203
00:13:31.590 --> 00:13:32.260
And now what do we do.

204
00:13:32.260 --> 00:13:33.840
Well let's loop through that vector.

205
00:13:33.840 --> 00:13:40.410
Right so we use a range base for loop and we'll say for let's say Konst auto p p is going to be the

206
00:13:40.410 --> 00:13:43.500
pointer to the shape and shapes.

207
00:13:43.750 --> 00:13:47.610
And when I'm here I can just simply call piece draw.

208
00:13:48.780 --> 00:13:49.560
That's it.

209
00:13:49.560 --> 00:13:50.470
Simple as that.

210
00:13:50.610 --> 00:13:55.910
If I run this now I should get three lines of output one for each of those objects.

211
00:13:55.920 --> 00:14:00.240
So in this case I'm calling drawing a circle drawing a line and drawing a square.

212
00:14:00.330 --> 00:14:02.070
So you can see that's pretty cool.

213
00:14:02.070 --> 00:14:06.860
Imagine you have a collection of base class pointers and they're all pointing to objects on the screen.

214
00:14:06.860 --> 00:14:07.520
Right.

215
00:14:07.560 --> 00:14:10.100
All of those objects are going to be concrete objects.

216
00:14:10.260 --> 00:14:12.420
And then let's say you want to refresh your screen.

217
00:14:12.420 --> 00:14:17.130
What do you do when you just loop through that collection and say drudged radhe radhe radhe draw for

218
00:14:17.130 --> 00:14:18.880
each one of those objects right.

219
00:14:18.900 --> 00:14:25.080
And each one of them knows how to draw itself makes it super easy to think abstractly and think in the

220
00:14:25.080 --> 00:14:25.690
general.

221
00:14:25.830 --> 00:14:29.760
So why don't we actually do that why don't we write a function just a basic function right here we'll

222
00:14:29.760 --> 00:14:36.430
call it let's say it's FOID It's called screen refresh.

223
00:14:36.960 --> 00:14:37.270
OK.

224
00:14:37.290 --> 00:14:40.770
So it's called screen refresh and what are we going to do what we're just going to pass that vector

225
00:14:40.770 --> 00:14:43.550
into here and let the vector do its thing.

226
00:14:43.890 --> 00:14:51.980
So Konst he insisted vector of shape based class pointers.

227
00:14:52.260 --> 00:14:55.900
We'll pass it by reference so we don't copy it.

228
00:14:57.150 --> 00:14:57.870
That's it.

229
00:14:57.890 --> 00:14:58.100
Right.

230
00:14:58.110 --> 00:14:59.150
That's pretty cool.

231
00:14:59.160 --> 00:15:02.320
So now I'm going to say stood out.

232
00:15:02.370 --> 00:15:03.470
Just say refreshing.

233
00:15:03.480 --> 00:15:04.660
Just so we know it's being called

234
00:15:08.640 --> 00:15:10.590
and now we'll just loop through that vector right.

235
00:15:10.590 --> 00:15:19.140
So I'm going to say for Again same thing we did before for Konst we use OTOP again and shape's is my

236
00:15:19.140 --> 00:15:21.120
collection.

237
00:15:21.120 --> 00:15:27.420
And right here all I'm doing is P draw.

238
00:15:27.600 --> 00:15:28.440
That's awesome.

239
00:15:28.440 --> 00:15:30.620
I mean think about the power that we have here right.

240
00:15:30.750 --> 00:15:38.730
Remember we're coming at this with an a vector of base class pointers so we know we've got dynamic polymorphism

241
00:15:38.730 --> 00:15:43.970
kick in and we know that each one of those derived classes that are concrete most have implemented draw.

242
00:15:44.190 --> 00:15:47.640
So I can simply call this while we're worrying about what I'm pointing to.

243
00:15:47.670 --> 00:15:49.870
So I know it will be bound correctly at runtime.

244
00:15:50.310 --> 00:15:57.420
And all we need to do now is let's come at this loop out here and let's just call that screen refresh.

245
00:15:57.480 --> 00:15:59.460
It will pass in the shapes vector

246
00:16:03.520 --> 00:16:04.510
and there you go.

247
00:16:04.580 --> 00:16:07.450
Refreshing drawing a line circle drawing a line drawing a square.

248
00:16:07.490 --> 00:16:09.040
That's pretty cool.

249
00:16:09.170 --> 00:16:10.930
So you can see the real power here.

250
00:16:11.150 --> 00:16:16.790
And again the real power of the pure virtual functions is to really force all your derived concrete

251
00:16:16.790 --> 00:16:18.650
classes to implement those methods.

252
00:16:18.650 --> 00:16:20.830
Now you know that they must be implemented.

253
00:16:20.990 --> 00:16:26.180
So you can create base class pointers and just call any of those guys and you know that they're there.

254
00:16:26.240 --> 00:16:27.260
They have to be there.
