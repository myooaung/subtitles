WEBVTT
1
00:00:05.320 --> 00:00:10.870
In this video we'll learn about some of the concepts terminology and syntax of exception handling and

2
00:00:10.870 --> 00:00:18.430
C++ and then we'll see a simple example that uses exception handling to deal with a divide by zero condition.

3
00:00:18.440 --> 00:00:21.100
Let's start with one exception handling is all about.

4
00:00:21.290 --> 00:00:28.100
First exceptions in C post-purchase should be used only for synchronous code not asynchronous code exception

5
00:00:28.100 --> 00:00:33.740
handling is about dealing with extraordinary situations how we define what an extraordinary situation

6
00:00:33.740 --> 00:00:37.730
is is really dependent on the application and the designer.

7
00:00:37.970 --> 00:00:43.190
We want to be able to detect when an extraordinary situation has occurred or is about to occur so that

8
00:00:43.190 --> 00:00:44.760
we can deal with it.

9
00:00:44.900 --> 00:00:46.690
Again what does deal with it mean.

10
00:00:46.700 --> 00:00:48.380
It depends on the application.

11
00:00:48.410 --> 00:00:51.050
In some cases we'll be able to recover and continue.

12
00:00:51.170 --> 00:00:55.140
But in other cases maybe the only alternative is to terminate the program.

13
00:00:55.430 --> 00:00:58.650
But in this case we can control how we terminate the program.

14
00:00:58.700 --> 00:01:03.640
Perhaps we can close files save as much data as we can and fail soft.

15
00:01:03.650 --> 00:01:10.460
So what can cause these exceptional or extraordinary situations one cause could be insufficient resources.

16
00:01:10.550 --> 00:01:15.650
Maybe we're out of memory or we have no external storage left and we need that to continue.

17
00:01:15.650 --> 00:01:18.160
Another cause is missing resources.

18
00:01:18.170 --> 00:01:23.540
Suppose we need to open and read a file but that file doesn't exist if this file is critical to our

19
00:01:23.540 --> 00:01:24.310
program.

20
00:01:24.440 --> 00:01:30.560
Then we have to decide how we're going to continue if it's even possible invalid operations range violations

21
00:01:30.590 --> 00:01:32.110
under flows and overflows.

22
00:01:32.120 --> 00:01:37.850
There are many many causes for exceptions our programs is said to be exception safe when our code handles

23
00:01:37.850 --> 00:01:39.200
exceptions.

24
00:01:39.200 --> 00:01:42.760
This is very difficult to do completely in C plus plus.

25
00:01:42.800 --> 00:01:48.470
Now let's learn about the terminology used in C++ when we talk about exception handling this terminology

26
00:01:48.470 --> 00:01:53.420
is fairly consistent with many other popular programming languages that you might be familiar with.

27
00:01:53.420 --> 00:01:57.260
However the way it works with C++ tends to be different.

28
00:01:57.360 --> 00:02:02.750
First an exception is an object or a primitive type such as an int a double a boolean and so forth and

29
00:02:02.750 --> 00:02:10.220
it signals that an error condition has occurred in many cases this exception object also contains information

30
00:02:10.550 --> 00:02:14.960
about what happened when your code determines that something is wrong.

31
00:02:15.200 --> 00:02:17.840
Then it can throw an exception object.

32
00:02:17.990 --> 00:02:19.920
Why can't the code just deal with the problem.

33
00:02:20.030 --> 00:02:24.500
Well in some cases it can and it doesn't throw an exception it just handles it itself.

34
00:02:24.500 --> 00:02:29.080
However the more common use cases that the problem is detected in one place in your program.

35
00:02:29.180 --> 00:02:32.360
But that part of the program doesn't know what to do about it.

36
00:02:32.480 --> 00:02:37.330
So it throws an exception and hopes that some other part of the program can deal with it.

37
00:02:37.370 --> 00:02:42.800
That's where ketching and exception comes in some other part of the program could contain the code that

38
00:02:42.800 --> 00:02:49.250
catches the thrown exception and handles it in some cases dealing with this simply means displaying

39
00:02:49.250 --> 00:02:52.010
or logging an error message and terminating the program.

40
00:02:52.010 --> 00:02:58.190
That's OK if the program can't continue and we fail soft in other cases we may be able to handle the

41
00:02:58.190 --> 00:03:01.700
exception recover and continue processing.

42
00:03:01.700 --> 00:03:07.180
For example suppose I want to allocate some memory dynamically but there isn't enough memory available.

43
00:03:07.190 --> 00:03:12.170
The part of our code that allocates the memory would throw an exception since it couldn't allocate any

44
00:03:12.170 --> 00:03:14.850
more memory but it doesn't know what to do.

45
00:03:15.080 --> 00:03:20.360
That in some other part of our program we can catch this exception and maybe we can clear out some buffers

46
00:03:20.360 --> 00:03:24.280
or caches and then release some memory and then try to allocate it again.

47
00:03:24.290 --> 00:03:30.340
Now let's see the keywords that C++ uses to achieve exception handling in C++.

48
00:03:30.350 --> 00:03:33.370
We use three keywords to work with exception handling.

49
00:03:33.770 --> 00:03:34.930
These are throe.

50
00:03:35.000 --> 00:03:41.840
Try and catch the throw key word is used to throw an exception object or primitive type and it's usually

51
00:03:41.840 --> 00:03:47.870
followed by an argument which is the exception that we're throwing the try keyword is followed by a

52
00:03:47.870 --> 00:03:50.150
code block in curly braces.

53
00:03:50.240 --> 00:03:54.450
The code in the code block is code that could potentially throw an exception.

54
00:03:54.950 --> 00:03:56.920
So we place that code in the try block.

55
00:03:57.080 --> 00:04:01.510
If the code does not throw an exception then the code executes as normal.

56
00:04:01.520 --> 00:04:06.710
However if the code in the try block throws an exception then the rest of the code in the block does

57
00:04:06.710 --> 00:04:13.130
not execute and C++ looks for a block of code that can handle that thrown exception.

58
00:04:13.130 --> 00:04:19.390
That's the catch block which is the catch keyword followed by the type of exception object that it handles.

59
00:04:19.400 --> 00:04:25.550
It also has a code block where the code that handles the exception executes catch blocks only execute

60
00:04:25.550 --> 00:04:31.460
if an exception is thrown and the type of the thrown exception matches the parameter in the catch block.

61
00:04:32.060 --> 00:04:35.940
We can write multiple catch handlers that expect different types of exceptions.

62
00:04:35.960 --> 00:04:40.180
The best way to understand exception handling is to really just look at some examples.

63
00:04:40.730 --> 00:04:44.360
Let's start with a very simple example that divides by zero.

64
00:04:44.360 --> 00:04:50.030
Here we have a code snippet that divides some by total and stores the result in average.

65
00:04:50.030 --> 00:04:53.460
Let's assume that sum and total have been declared and initialized.

66
00:04:53.750 --> 00:04:56.050
So what happens when total is zero.

67
00:04:56.090 --> 00:04:57.490
Does the program crash.

68
00:04:57.530 --> 00:04:59.260
Do we get an undefined result.

69
00:04:59.540 --> 00:05:01.250
The answer is yes to all of them.

70
00:05:01.250 --> 00:05:07.400
It really depends because the result of a division by zero depends on the types of the arguments in

71
00:05:07.400 --> 00:05:09.020
the division operation.

72
00:05:09.020 --> 00:05:13.660
Integer divide by zero and floating point divide by zero may provide different result.

73
00:05:13.670 --> 00:05:15.780
We'll see this in a minute in the ID.

74
00:05:16.280 --> 00:05:19.640
Regardless we can't let that statement ex-secret So what do we do.

75
00:05:20.090 --> 00:05:21.280
Well that's pretty easy.

76
00:05:21.290 --> 00:05:27.230
We check to see if total is zero and if it is we owe it to the division and if it is not equal to zero

77
00:05:27.230 --> 00:05:28.750
we go ahead with the division.

78
00:05:28.850 --> 00:05:30.080
That's pretty easy.

79
00:05:30.080 --> 00:05:33.620
The harder question is what do we do in total is equal to zero.

80
00:05:33.980 --> 00:05:36.020
Well that totally depends on the application.

81
00:05:36.110 --> 00:05:42.080
And this question becomes much more difficult if this code existed in a function and that function calculates

82
00:05:42.080 --> 00:05:44.180
and returns the average.

83
00:05:44.180 --> 00:05:48.360
What are we return from that function if total is zero.

84
00:05:48.650 --> 00:05:52.310
So we can use exception handling to deal with the situation.

85
00:05:52.370 --> 00:05:55.810
This is an example to show you the syntax for exception handling.

86
00:05:55.870 --> 00:06:00.700
You wouldn't write code like this since we could print an error message easily with a simple if else

87
00:06:00.710 --> 00:06:02.340
statements in the previous slide.

88
00:06:02.450 --> 00:06:04.350
But let's look at this code together.

89
00:06:04.970 --> 00:06:09.330
Again let's assume that sum total and average have been declared and initialized.

90
00:06:09.550 --> 00:06:13.280
First we have a try block inside the code in the try block.

91
00:06:13.280 --> 00:06:19.470
We write code that could potentially throw an exception in this case if total equals zero.

92
00:06:19.550 --> 00:06:26.390
We throw an exception the type of the exception in this example is an integer and we set it to zero.

93
00:06:26.390 --> 00:06:31.860
Best practice is to throw objects not primitives but we'll get to throwing objects.

94
00:06:32.030 --> 00:06:35.570
Let's first look at the case where total is not equal to zero.

95
00:06:35.660 --> 00:06:41.110
In this case the try block executes the division occurs and we can use the average in the try block

96
00:06:41.120 --> 00:06:47.090
is normal when the code in the tribe what completes we transfer control to the last statement that displays

97
00:06:47.180 --> 00:06:48.800
program continues.

98
00:06:48.800 --> 00:06:53.290
Notice that the catch block does not fire since no exception was thrown.

99
00:06:53.810 --> 00:06:57.290
OK now let's suppose that total is equal to zero.

100
00:06:57.290 --> 00:07:03.630
Now the code in the try block throws zero no further code in that try block is executed.

101
00:07:03.650 --> 00:07:06.650
So the divide by zero does not happen.

102
00:07:06.680 --> 00:07:12.110
Now we transfer control to a catch handler that expects an exception object of the same type as the

103
00:07:12.110 --> 00:07:12.940
one we threw.

104
00:07:13.040 --> 00:07:16.950
In this case an integer the code in the catch block now executes.

105
00:07:17.060 --> 00:07:22.960
And when it's done we transfer control to the last statement that displays program continues again.

106
00:07:23.000 --> 00:07:28.490
Notice that we prevented that divide by zero error and we handled it in a controlled manner.

107
00:07:28.490 --> 00:07:32.470
Now let's head over to the idea and we'll see this example in action.

108
00:07:32.540 --> 00:07:34.920
OK so I'm back in the code like ID.

109
00:07:35.090 --> 00:07:41.870
I mean the Section 18 workspace and then the MPG project mpg stands for miles per gallon and that's

110
00:07:41.870 --> 00:07:43.430
what we're going to calculate.

111
00:07:43.430 --> 00:07:46.360
Apologies to my kilometers per liter friends out there.

112
00:07:46.490 --> 00:07:47.450
So what do we do.

113
00:07:47.690 --> 00:07:52.400
We've got Miles we've got gallons we're going to ask the user for those two values they're both integers

114
00:07:52.730 --> 00:07:56.750
and then we're going to calculate miles per gallon which is a double.

115
00:07:56.810 --> 00:07:59.080
Pretty straightforward stuff that we've done already.

116
00:07:59.090 --> 00:08:05.810
So in this case notice on line 15 here I'm calculating miles per gallon equals miles divided by gallons.

117
00:08:05.810 --> 00:08:11.780
Now there's a problem here we're going to get some truncation because you can see that Miles right here

118
00:08:12.410 --> 00:08:14.120
and gallons are both integer.

119
00:08:14.120 --> 00:08:18.750
So this is going to be integer division and we're going to truncate the the decimal part right.

120
00:08:18.800 --> 00:08:24.050
But the reason I'm doing it this way is to show you the error that happens when you do integer division

121
00:08:24.050 --> 00:08:24.840
by zero.

122
00:08:24.970 --> 00:08:25.390
OK.

123
00:08:25.400 --> 00:08:29.630
So but before we do that let's run this with just some normal data.

124
00:08:29.630 --> 00:08:35.030
So let's say we have 13 miles and three gallons.

125
00:08:35.030 --> 00:08:39.500
Our result is four you can see it's not four point something because we're doing integer division but

126
00:08:39.500 --> 00:08:41.850
that's ok we can fix that in a minute.

127
00:08:41.850 --> 00:08:44.480
Now let's do a division by zero and see what happens.

128
00:08:44.480 --> 00:08:50.000
So I'm going to run this again and let's say I put in 13 and this time I put in 0 for gallons.

129
00:08:50.150 --> 00:08:56.170
Now when I press Enter it's going to try to divide 13 by 0 and it's going to crash.

130
00:08:56.210 --> 00:08:57.860
So I pressed Enter.

131
00:08:57.860 --> 00:08:59.870
There's the crash on Windows.

132
00:09:00.350 --> 00:09:02.320
I'll cancel that.

133
00:09:02.400 --> 00:09:04.880
I closed the program and I'll terminate this program.

134
00:09:04.910 --> 00:09:06.320
We don't want to crash.

135
00:09:06.380 --> 00:09:07.030
OK.

136
00:09:07.100 --> 00:09:15.200
Now if I comment this out and we do a division by zero with a floating point number and what we're doing

137
00:09:15.200 --> 00:09:19.420
here is what we did a while back in the course where we had a static cast.

138
00:09:19.520 --> 00:09:23.150
Remember these are both integers right here Miles and gallons.

139
00:09:23.150 --> 00:09:27.620
So I really don't want to do integer division so I just need to make one of them a double and then double

140
00:09:27.620 --> 00:09:28.760
division will occur.

141
00:09:28.790 --> 00:09:34.100
So I'm statically casting miles to a double I could have statically cast had gallons or both of them.

142
00:09:34.100 --> 00:09:39.690
So in this case we're doing double division and the behavior is different here and I'll show you why.

143
00:09:39.710 --> 00:09:41.250
Let me run this again.

144
00:09:43.360 --> 00:09:44.110
OK so let's.

145
00:09:44.110 --> 00:09:50.900
Again let's do something valid let's say 130 divided by 30 gallons.

146
00:09:50.920 --> 00:09:53.470
Result is forty three point three miles per gallon.

147
00:09:53.470 --> 00:09:54.580
That's fine.

148
00:09:54.580 --> 00:09:56.940
Now let's do it with zero.

149
00:09:57.010 --> 00:10:02.360
So I'll get a 123 this time is 0 gallons so we're going to get a divide by zero here.

150
00:10:02.380 --> 00:10:03.880
We're not going to crash though.

151
00:10:04.000 --> 00:10:10.240
You can see that the result that Prince is infinity and that's the standard and C plus plus when you

152
00:10:10.240 --> 00:10:12.930
do floating point division by zero.

153
00:10:13.030 --> 00:10:18.370
If I run this again and I enter negative for miles and obviously we would have to do checks for all

154
00:10:18.370 --> 00:10:22.110
of this stuff and zero and I'll get a negative infinity.

155
00:10:22.120 --> 00:10:24.280
You can see that result right here.

156
00:10:24.640 --> 00:10:31.960
And the last thing if we type 0 0 0 divided by zero we get not a number.

157
00:10:32.050 --> 00:10:34.750
And that's the error that you see here.

158
00:10:34.750 --> 00:10:35.980
All those are bad outcomes.

159
00:10:35.980 --> 00:10:37.300
We really don't want those.

160
00:10:37.300 --> 00:10:42.790
So the easy fix is not to execute line 16 if gallons is equal to zero.

161
00:10:42.790 --> 00:10:43.700
Right.

162
00:10:43.720 --> 00:10:44.770
It's really that simple.

163
00:10:44.770 --> 00:10:50.700
So let's do that to an IF statement if gallons is not equal to zero

164
00:10:53.950 --> 00:10:56.460
then we do want to execute this code right.

165
00:10:56.520 --> 00:10:57.300
We're safe

166
00:11:00.900 --> 00:11:03.220
and we'll use an else statement here.

167
00:11:03.370 --> 00:11:05.640
C-code light puts an extra Kerley in there for me.

168
00:11:05.760 --> 00:11:05.990
So.

169
00:11:05.990 --> 00:11:08.240
Else we've got an error.

170
00:11:08.250 --> 00:11:14.490
So we want to display the error and what we'll do is we haven't used standard error or see error yet.

171
00:11:14.490 --> 00:11:19.850
It's another output stream that's pretty much reserved for error messages or error logging.

172
00:11:20.310 --> 00:11:27.330
And I'll talk about that a little bit more when we talk about file IO by default sea air.

173
00:11:27.330 --> 00:11:30.260
Is your console just like sea out.

174
00:11:30.270 --> 00:11:34.750
So we should see this on the screen and we'll do an end line here.

175
00:11:35.050 --> 00:11:35.380
OK.

176
00:11:35.400 --> 00:11:36.520
So far so good.

177
00:11:36.530 --> 00:11:42.360
Like Again nothing we haven't done before but in this case which is handling this error and we're not

178
00:11:42.360 --> 00:11:46.700
using exception handling here we're just using our regular old logic to handle the air.

179
00:11:46.710 --> 00:11:50.580
So let me run this and say 130 miles by zero.

180
00:11:50.580 --> 00:11:53.170
Now we should have Sorry can't divide by zero.

181
00:11:53.490 --> 00:11:53.810
Right.

182
00:11:53.820 --> 00:11:55.530
Just like one would expect.

183
00:11:56.100 --> 00:12:03.030
OK so now let's rewrite this program so that we use exception handling and what we'll do is we'll load

184
00:12:03.030 --> 00:12:08.470
the MPG exception project right here and I'll load that and I'll be right back.

185
00:12:09.180 --> 00:12:14.910
OK so I loaded the MPG exception project in the section 18 workspace and you can see that right now

186
00:12:14.910 --> 00:12:19.170
is has no exception handling and it has no if else logic either.

187
00:12:19.170 --> 00:12:23.850
Now here's the commented code that does does the integer division I'm just going to get rid of that

188
00:12:24.120 --> 00:12:25.590
because I really don't want to clutter up.

189
00:12:25.680 --> 00:12:28.500
And I'm still doing our floating point division here.

190
00:12:28.530 --> 00:12:31.110
So what do we do to get exception handling working here.

191
00:12:31.290 --> 00:12:33.110
Well we have to have a try block.

192
00:12:33.240 --> 00:12:39.120
So we're going to say right here try to execute this code and I'm going to wrap this code up right here

193
00:12:39.330 --> 00:12:42.380
inside the try and all indent this.

194
00:12:42.540 --> 00:12:47.810
So what we do here is we try to execute code that could potentially throw an exception.

195
00:12:48.030 --> 00:12:52.400
And when do we throw the exception will we throw the exception of gallons is equal to zero.

196
00:12:52.410 --> 00:13:01.200
So let's do that right in here I'm going to say if gallons is equal to zero that's where I want to throw

197
00:13:02.370 --> 00:13:07.500
and what do I throw an exception could be anything it could be an integer or a character or a pointer

198
00:13:07.500 --> 00:13:08.630
or an object.

199
00:13:08.640 --> 00:13:10.590
Right here we're just going to throw an integer.

200
00:13:10.590 --> 00:13:12.860
Later on we'll use objects.

201
00:13:13.190 --> 00:13:15.120
It's best practice is to use objects.

202
00:13:15.120 --> 00:13:17.970
But let's just use an integer here so it's easy to understand.

203
00:13:17.970 --> 00:13:21.950
So what do I want to throw I could throw any integer I could throw zero right.

204
00:13:21.960 --> 00:13:24.110
I could throw gallons I could do anything I want.

205
00:13:24.110 --> 00:13:25.940
But let's just throw zero.

206
00:13:26.430 --> 00:13:31.330
Now what happens if gallons is equal to zero.

207
00:13:31.680 --> 00:13:39.740
Then we're throwing this zero if gallons is not equal to zero then our code executes as normal.

208
00:13:39.820 --> 00:13:45.940
But what if we do throw this zero here if we do throw this exception right here this piece of code here

209
00:13:45.940 --> 00:13:48.220
is not executed at all.

210
00:13:48.330 --> 00:13:50.020
Ok totally skipped.

211
00:13:50.110 --> 00:13:57.450
And then what happens is that the C++ system is looking for that exception that was just thrown.

212
00:13:57.550 --> 00:14:00.800
If you don't catch it then the program will terminate.

213
00:14:01.060 --> 00:14:03.010
But if you catch it then you can deal with it.

214
00:14:03.010 --> 00:14:07.750
So how do you catch it while you catch it using a catch block and you can put that right here.

215
00:14:07.810 --> 00:14:09.050
I'll say catch.

216
00:14:09.610 --> 00:14:12.250
And what's the type of the exception we want to catch.

217
00:14:12.250 --> 00:14:16.730
In this case it's an integer and you always want to catch by reference.

218
00:14:16.730 --> 00:14:18.110
That's the best practice.

219
00:14:18.140 --> 00:14:21.840
Name this thing any thing you want we really aren't going to use it.

220
00:14:22.400 --> 00:14:28.610
And now whatever code we want to execute in here is what's going to happen when the error is thrown

221
00:14:28.610 --> 00:14:30.040
when the exception is thrown.

222
00:14:30.080 --> 00:14:36.320
And I'm just going to paste that same see error message that I had earlier.

223
00:14:36.320 --> 00:14:41.170
OK so now again let's walk through this with you really carefully because when the next few videos it'll

224
00:14:41.230 --> 00:14:42.820
get a little bit more complicated.

225
00:14:42.830 --> 00:14:45.220
So here's my try block.

226
00:14:45.230 --> 00:14:47.570
You can see it between lines 15 and 20.

227
00:14:47.750 --> 00:14:50.620
And here's my catch handler right here my catch block.

228
00:14:50.750 --> 00:14:52.940
I tend to use both names synonymously.

229
00:14:52.940 --> 00:14:56.950
So again if the user entered zero we throw it right.

230
00:14:56.960 --> 00:15:01.440
This code is not executed thankfully otherwise we'd have a divide by zero right here.

231
00:15:02.520 --> 00:15:08.610
We try to catch an integer if there is a catch block but it doesn't catch an integer or even if there's

232
00:15:08.620 --> 00:15:11.440
no catch block then we've got our program will terminate.

233
00:15:11.440 --> 00:15:13.340
Right on the spot.

234
00:15:13.690 --> 00:15:19.830
In this case it will because we're right in our man then if we do throw 0 and we do have a catch handler

235
00:15:19.840 --> 00:15:21.850
for it we'll catch it right here.

236
00:15:21.850 --> 00:15:25.290
Now I could print out the X if I wanted to write and will print 0.

237
00:15:25.300 --> 00:15:26.320
That's what was thrown here.

238
00:15:26.320 --> 00:15:27.820
That's what this guy is right here.

239
00:15:27.850 --> 00:15:31.090
That's the object that was thrown the exception.

240
00:15:31.210 --> 00:15:33.610
So in this case there's my catch handler.

241
00:15:33.700 --> 00:15:36.920
In either case my program will not crash because.

242
00:15:36.940 --> 00:15:39.650
Let me walk again right through me clear this and this.

243
00:15:39.790 --> 00:15:43.000
If I do throw an exception it's handled here.

244
00:15:43.000 --> 00:15:45.540
If I don't throw an exception it's handled here.

245
00:15:45.670 --> 00:15:47.920
In both cases this line will execute.

246
00:15:48.010 --> 00:15:49.230
My program will continue.

247
00:15:49.230 --> 00:15:50.850
Normally it won't crash.

248
00:15:51.130 --> 00:15:51.400
All right.

249
00:15:51.400 --> 00:15:58.250
So let's give this a run and say 130 and we'll do zero again.

250
00:15:58.460 --> 00:16:02.560
Sorry you can't divide by zero sorry exception is being handled.

251
00:16:02.810 --> 00:16:04.060
Now you might ask.

252
00:16:04.070 --> 00:16:04.700
So what.

253
00:16:04.730 --> 00:16:06.980
Same thing I could've done with an if statement.

254
00:16:07.160 --> 00:16:12.200
Yes and this is not typically the way that we do exception handling this is just showing you the syntax

255
00:16:12.440 --> 00:16:13.810
and what's going on.

256
00:16:13.820 --> 00:16:19.100
Usually we do the exception handling when a function throws an exception and that function has no idea

257
00:16:19.100 --> 00:16:20.150
what to do with it.

258
00:16:20.390 --> 00:16:25.190
And we catch that exception somewhere else and that's what we're going to go into the next few videos.

259
00:16:25.360 --> 00:16:26.820
OK I'll see you there.
