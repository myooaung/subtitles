WEBVTT
1
00:00:05.560 --> 00:00:11.520
This video we'll learn more about the T.L. deck container in order to use the deck.

2
00:00:11.550 --> 00:00:14.880
We must pound include the deck header file.

3
00:00:15.090 --> 00:00:21.860
The deck acts like a double ended cue the deck size is dynamic and it's handled by the SPL so that's

4
00:00:21.860 --> 00:00:28.130
very much like a vector but unlike a vector the elements in the deck are not stored in contiguous memory

5
00:00:29.470 --> 00:00:34.810
the deck allows direct element access using the subscript operator and the dot at method.

6
00:00:35.260 --> 00:00:41.410
But unlike a vector that allows efficient insertion deletion only at the back of the deck allows efficient

7
00:00:41.410 --> 00:00:44.530
insertion and deletion at the back and at the front.

8
00:00:44.860 --> 00:00:50.480
However inserting elements into any other part of the deck other than the front or back is not as efficient.

9
00:00:51.400 --> 00:00:56.590
The deck supports all of the iterators and the iterators may become invalid again especially when the

10
00:00:56.590 --> 00:00:58.390
deck changes size.

11
00:00:58.390 --> 00:01:02.870
Let's first look at a few ways to initialize decks and then we'll see some of its member methods.

12
00:01:04.810 --> 00:01:10.490
In the first example in the slide I declared as a deck of integers and initialized it to 1 2 3 4 and

13
00:01:10.490 --> 00:01:11.430
5.

14
00:01:11.600 --> 00:01:17.000
And the second example I declared D1 is a deck of integers and I'm using an overloaded constructor to

15
00:01:17.000 --> 00:01:20.930
create 10 integers and initialize them all to 100.

16
00:01:20.990 --> 00:01:26.480
Of course like all the ACL containers the deck supports copy and move semantics for initialisation and

17
00:01:26.480 --> 00:01:27.210
assignment.

18
00:01:28.370 --> 00:01:35.240
In the third example I'm declaring Stooges as a deck of stewed strings and I'm initializing it to Larry

19
00:01:35.300 --> 00:01:36.470
Moe and Curly.

20
00:01:36.470 --> 00:01:38.920
Now I notice that Moe is a C-style string.

21
00:01:39.900 --> 00:01:45.690
Like vectors and stood to raise decks also support assignment via initialiser list.

22
00:01:45.690 --> 00:01:48.970
So let's see some common methods provided by the deck container.

23
00:01:50.310 --> 00:01:54.030
In this slide we'll see what a simple deck looks like.

24
00:01:54.030 --> 00:01:58.470
We declare D is a deck of integers and we initialize it to 1 to 3.

25
00:01:58.500 --> 00:02:01.310
The deck has a front end to back the front.

26
00:02:01.310 --> 00:02:08.310
In this case is the element one and the back is element 3 with a deck we can efficiently add elements

27
00:02:08.310 --> 00:02:13.260
and remove elements from both the front and the back.

28
00:02:13.260 --> 00:02:16.940
In a deck the pushback method works very much as it does in a vector.

29
00:02:17.100 --> 00:02:20.060
The element to be added is pushed at the back of the deck.

30
00:02:21.170 --> 00:02:26.360
And the push front method adds the element to be inserted at the front of the deck.

31
00:02:26.360 --> 00:02:29.780
Now let's see how the elements in the deck might be stored in memory.

32
00:02:31.290 --> 00:02:38.070
Remember the decks elements are not in contiguous memory so usually a deck is implemented as a collection

33
00:02:38.070 --> 00:02:44.100
of memory blocks and these memory blogs contain elements that are in a contiguous memory but the blocks

34
00:02:44.100 --> 00:02:46.080
themselves are not in contiguous memory.

35
00:02:46.230 --> 00:02:50.400
So a good way to think of a deck is as a linked list of vectors.

36
00:02:50.400 --> 00:02:54.420
So when we add an element at the front it adds it if there is space.

37
00:02:54.420 --> 00:03:00.070
If not it will allocate a new block add the element to that block and then link in the block.

38
00:03:00.120 --> 00:03:08.160
The same happens when we had an element at the back again please refer to the C++ as T.L. documentation

39
00:03:08.160 --> 00:03:11.400
for details on all of the methods for the deck.

40
00:03:11.400 --> 00:03:16.130
There's a lot there and that's the place to go to the documentation is your friend.

41
00:03:16.200 --> 00:03:18.840
Don't think programmers keep all these details in our heads.

42
00:03:18.840 --> 00:03:19.550
We don't.

43
00:03:19.590 --> 00:03:23.040
We refer to the C++ docs very often.

44
00:03:23.040 --> 00:03:25.340
Generally it's open on a second monitor.

45
00:03:25.350 --> 00:03:27.320
It's the same for Java programmers.

46
00:03:27.420 --> 00:03:30.400
Usually they've got the Java docs open and a second monitor.

47
00:03:30.570 --> 00:03:33.260
And that's where all the good information is.

48
00:03:33.270 --> 00:03:35.070
So let's see some of these methods.

49
00:03:35.070 --> 00:03:36.900
Let's start with the size method.

50
00:03:36.900 --> 00:03:39.970
This method returns the number of elements that are in the deck.

51
00:03:40.230 --> 00:03:45.600
The max size we've already seen with vectors and stood arrays pretty big number that just says how many

52
00:03:45.600 --> 00:03:51.490
elements can I store decs also allow individual access using either the subscript operator or the DOT

53
00:03:51.780 --> 00:03:52.450
method.

54
00:03:52.590 --> 00:03:57.560
And the rules are the same here if you use the subscript operator no bounds checking is done.

55
00:03:57.690 --> 00:04:03.020
But if you use the dot method bounds checking will happen and an exception will be thrown if you're

56
00:04:03.030 --> 00:04:04.520
out of bounds.

57
00:04:04.800 --> 00:04:13.380
In this case you can see that I'm using Didcot at 0 that refers to the one in the deck D and D of one

58
00:04:13.530 --> 00:04:21.150
refers to the to the deck also provides front and back methods that return references to the elements

59
00:04:21.150 --> 00:04:22.250
at the front of the deck.

60
00:04:22.260 --> 00:04:23.580
And at the back of the deck.

61
00:04:23.730 --> 00:04:32.370
So in this example the up front refers to the one and drop back refers to the five as I previously mentioned

62
00:04:32.370 --> 00:04:37.590
the deck allows for efficiently inserting and removing elements at the front and at the back.

63
00:04:37.590 --> 00:04:41.470
Inserting is done with the push back method and the push front method.

64
00:04:41.850 --> 00:04:47.250
We also have a pop back and a pop front which you efficiently remove elements from the back of the front.

65
00:04:47.430 --> 00:04:53.820
In this slide we have a deck of person objects him called it de we can create a person P1 named Larry

66
00:04:54.000 --> 00:05:00.520
who's 18 years old and we can use the push back method to insert one at the back of the deck.

67
00:05:00.570 --> 00:05:03.250
We can also remove it using putback.

68
00:05:03.330 --> 00:05:08.310
Similarly we can out a person object to the front of the deck with push front and remove it with pop

69
00:05:08.310 --> 00:05:09.350
front.

70
00:05:09.420 --> 00:05:16.120
Remember all container classes make copies of the elements they store the deck container also supports

71
00:05:16.150 --> 00:05:22.000
and place front end in place back which are super efficient ways to create initialize objects and store

72
00:05:22.000 --> 00:05:23.750
them in the deck right in place.

73
00:05:24.010 --> 00:05:26.020
So now let's head over to the ID.

74
00:05:26.080 --> 00:05:27.460
We'll see some examples.

75
00:05:27.550 --> 00:05:32.900
And in the video after that we'll have some challenge exercises that use decs.

76
00:05:32.910 --> 00:05:38.180
OK so I mean the idea I'm in the section 20 workspace in the deck.

77
00:05:38.180 --> 00:05:42.570
Project and this is a really simple example.

78
00:05:42.760 --> 00:05:47.810
The idea behind using a deck is that we're going to use the front of it or the back of it.

79
00:05:47.890 --> 00:05:52.300
We're not really going to be inserting things into the middle of it if you need to do that kind of thing.

80
00:05:52.420 --> 00:05:54.520
You're probably better off using a list.

81
00:05:54.520 --> 00:05:55.920
We'll talk about the list later.

82
00:05:56.030 --> 00:05:59.830
So I'm not going to go into any of the fancy stuff where you can insert things into the middle of a

83
00:05:59.830 --> 00:06:04.320
deck I'm just going to keep it really simple because that's usually the way we use a deck.

84
00:06:04.420 --> 00:06:10.780
So let's start with looking what we've got here we're including a deck of vector and an algorithm we're

85
00:06:10.780 --> 00:06:13.960
using the vector in a minute just to do a little simple example.

86
00:06:14.260 --> 00:06:18.320
And here I've got my display function that will display any type of deck.

87
00:06:18.340 --> 00:06:22.920
I'm only using decks of integers in this example but it's nice to have this template function.

88
00:06:22.930 --> 00:06:25.900
You can play around with it and practice writing these actually.

89
00:06:25.960 --> 00:06:28.170
This is a really really easy one to write.

90
00:06:28.180 --> 00:06:32.640
I went over this one in the previous video and watched the video for A-factors.

91
00:06:32.650 --> 00:06:36.610
OK so let's take a look at test one I've already run the program the output is over here on the right

92
00:06:36.610 --> 00:06:37.690
and the console.

93
00:06:37.690 --> 00:06:38.900
And let's walk through these tests.

94
00:06:38.910 --> 00:06:40.630
You can understand what's happening here.

95
00:06:40.840 --> 00:06:45.000
So this is test one right here you can see the output of test one right up here.

96
00:06:45.100 --> 00:06:49.990
First thing we're doing is we're declaring D as a deck of integers and we're putting one to five in

97
00:06:49.990 --> 00:06:55.810
there and then we're displaying the deck so there it is right here just as we would expect then then

98
00:06:55.880 --> 00:06:56.800
I've got an assignment.

99
00:06:56.810 --> 00:06:59.900
I'm using the initialiser list to assign which again is really handy.

100
00:06:59.900 --> 00:07:05.530
So now D is 2 4 5 6 on displaying that you can see two four five six right here.

101
00:07:05.640 --> 00:07:11.930
Now just like we did with the vector here I'm creating 10 100s and I'm putting them in the deck and

102
00:07:11.930 --> 00:07:14.660
displaying them you can see all ten hundreds right here.

103
00:07:15.290 --> 00:07:19.680
And the last thing is right here we're doing direct access to the deck.

104
00:07:19.910 --> 00:07:22.060
You don't often do this with a deck.

105
00:07:22.150 --> 00:07:22.820
Remember the deck.

106
00:07:22.820 --> 00:07:26.780
The whole point of a deck is to be doubly and ended cues you're going to work on the front you're going

107
00:07:26.780 --> 00:07:27.650
to work at the back.

108
00:07:27.650 --> 00:07:32.010
That's the idea but it lets you have random access to the elements within it.

109
00:07:32.030 --> 00:07:34.260
Add in constant time which is cool.

110
00:07:34.400 --> 00:07:38.710
So the Sub-Zero with the index operator is this is D-Nev..

111
00:07:38.720 --> 00:07:45.250
So it's going to put a 100 in here and D at one we'll put 200 in there.

112
00:07:45.500 --> 00:07:52.140
And when we display that you can see right here the 100 to 200 replaced the one in the two.

113
00:07:52.140 --> 00:07:54.110
All right so that's pretty straightforward.

114
00:07:54.120 --> 00:07:57.840
Let's look at test to test two is the real workhorse here.

115
00:07:57.840 --> 00:08:03.630
This is the way you typically use a deck we're using push back and push front and putback and so forth.

116
00:08:03.630 --> 00:08:04.620
So let's go over this one.

117
00:08:04.620 --> 00:08:08.040
These are the methods that you're going to really use a lot with the deck.

118
00:08:08.040 --> 00:08:13.920
So what I'm doing here is creating creating a deck called again of integers and it's 0 0 0.

119
00:08:14.430 --> 00:08:18.510
And the reason I put 0 0 0 in there is just so we can have these three zeros in the center.

120
00:08:18.510 --> 00:08:22.200
That way you can really understand how things are being pushed in and we're displaying it.

121
00:08:22.200 --> 00:08:24.750
You can see right there the three zeroes.

122
00:08:25.050 --> 00:08:28.510
Now we're saying push back a 10 and then push back a 20.

123
00:08:28.530 --> 00:08:29.680
That means that the back.

124
00:08:29.680 --> 00:08:36.930
So first I push back the 10 and then the 20 and are being pushed back this way and display them.

125
00:08:36.930 --> 00:08:43.150
And you can see what we've got three zeros 10 and a 20 now I want to push front so now I'm going to

126
00:08:43.150 --> 00:08:48.340
push these guys at the front 100 and then I push 200 I'm pushing them this way and then displaying it

127
00:08:48.340 --> 00:08:50.360
again and I've got right here two hundred.

128
00:08:50.360 --> 00:08:51.110
One hundred.

129
00:08:51.170 --> 00:08:55.230
The three zeros and then the 10 and 20 of course are still there.

130
00:08:55.360 --> 00:09:00.490
We've got our front method which returns a reference to the front element which in this case is that

131
00:09:00.490 --> 00:09:01.820
guy right here.

132
00:09:01.930 --> 00:09:07.720
I've got my back method which returns a reference to the back element which is the 20 read here and

133
00:09:07.720 --> 00:09:09.380
decide which is seven.

134
00:09:09.400 --> 00:09:12.610
So when we look at the output right here you can see the back the front is 200.

135
00:09:12.610 --> 00:09:18.110
The back is 20 and the size is seven and we display it right after we pop a few things off.

136
00:09:18.130 --> 00:09:19.150
So let's try that.

137
00:09:19.150 --> 00:09:21.720
So first thing we do is we pop the back.

138
00:09:21.790 --> 00:09:22.840
That guy's gone.

139
00:09:22.930 --> 00:09:24.060
And then we pop the front.

140
00:09:24.130 --> 00:09:26.610
That guy guy's gone and we display it again.

141
00:09:26.620 --> 00:09:29.940
So now we're going to display 100 0 0 0 10.

142
00:09:29.950 --> 00:09:32.190
Notice how the two hundred and twenty are gone.

143
00:09:32.200 --> 00:09:37.990
So this is really the way you're going to use the deck if you find yourself using a deck and fiddling

144
00:09:37.990 --> 00:09:41.770
around with the middle elements and inserting things into the middle and doing all kinds of stuff like

145
00:09:41.770 --> 00:09:42.160
that.

146
00:09:42.250 --> 00:09:44.530
Maybe the deck is not what you should be using.

147
00:09:44.530 --> 00:09:48.800
Consider using a list and we'll talk about a list in the next section of the horse.

148
00:09:49.250 --> 00:09:51.700
OK so that takes care of tests too.

149
00:09:52.000 --> 00:09:56.050
Let's take a look at test three and what I've got here and test three.

150
00:09:56.050 --> 00:09:57.280
This is what I want to do.

151
00:09:57.430 --> 00:10:03.880
I've got a vector of 10 integers right here 1 through 10 and I've got a deck which is empty.

152
00:10:04.150 --> 00:10:08.890
And what I want to do is I want to insert all the even numbers into the back of the deck and all the

153
00:10:08.950 --> 00:10:10.840
odd numbers into the front.

154
00:10:10.840 --> 00:10:11.850
It's pretty easy to do.

155
00:10:11.860 --> 00:10:17.620
I could just use arranged base for loop right here and I can iterate over that vector member we're coming

156
00:10:17.620 --> 00:10:19.770
from a vector to a deck this time.

157
00:10:19.960 --> 00:10:24.420
And if the element Montu is zero that means it is even.

158
00:10:24.750 --> 00:10:32.510
And if it's even pushing it onto the back right so where we start we're starting with the numbers.

159
00:10:32.560 --> 00:10:34.190
Even We're pushing it in the back.

160
00:10:34.210 --> 00:10:41.320
The numbers are all pushing to the front so we're going to have the one the two the three four five

161
00:10:41.550 --> 00:10:43.420
six this is what's going to happen.

162
00:10:43.460 --> 00:10:47.290
Yate the nine and the 10 that's the result right there.

163
00:10:47.440 --> 00:10:52.720
And when we look at the display for test three right here that's exactly what we've got.

164
00:10:52.720 --> 00:10:57.390
We've got all the odd numbers here and all the even numbers right there.

165
00:10:59.440 --> 00:11:01.750
Now let's take a look at test for test fours.

166
00:11:01.810 --> 00:11:04.260
Simple but important.

167
00:11:04.360 --> 00:11:06.280
It shows you the ordering of things.

168
00:11:06.370 --> 00:11:09.120
When we push stuff on the front versus we push on the back.

169
00:11:09.190 --> 00:11:13.140
The order is obviously different but this confuses people sometimes.

170
00:11:13.360 --> 00:11:18.910
And I've seen a lot of little mistakes from programmers that use decks this way and it comes up a lot

171
00:11:18.910 --> 00:11:19.930
in code reviews.

172
00:11:19.930 --> 00:11:23.320
So let's take a look here we've got a vector again.

173
00:11:23.490 --> 00:11:24.480
Through 10.

174
00:11:24.550 --> 00:11:28.450
And what I'm doing is I'm going through the entire vector this time there's no if statement there's

175
00:11:28.450 --> 00:11:34.180
no or even stuff that's all I'm doing is I'm going through that vector and grabbing each element and

176
00:11:34.180 --> 00:11:35.860
I'm pushing it in the front.

177
00:11:35.860 --> 00:11:42.940
So we're starting at the one so we're pushing it one two three four five remember pushing things on

178
00:11:42.940 --> 00:11:43.620
the front.

179
00:11:43.810 --> 00:11:47.600
So this is the result that's in line right there.

180
00:11:47.680 --> 00:11:51.330
That's the results when I display this and again I mean test for.

181
00:11:51.460 --> 00:11:54.620
You can see it's 10 9 8 all the way down to 1.

182
00:11:54.790 --> 00:11:56.270
I'm going to clear the deck here.

183
00:11:56.410 --> 00:11:58.790
Then I'm going to do the same thing except now I'm going to push back.

184
00:11:58.810 --> 00:12:00.780
This time we're pushing this way right.

185
00:12:00.820 --> 00:12:06.620
So we're going to have one two three four five six seven eight nine and ten.

186
00:12:06.690 --> 00:12:09.960
And when we display that you can see that that's exactly what we get.

187
00:12:10.180 --> 00:12:11.860
Obviously the order is going to be different.

188
00:12:11.860 --> 00:12:16.990
Right one is going to be going from one to 10 the other from 10 to 1 depending on whether we do a push

189
00:12:16.990 --> 00:12:18.760
front or a push back.

190
00:12:18.760 --> 00:12:24.340
And as I said this is sounds simple but I've seen a lot of little mistakes using this because somehow

191
00:12:24.340 --> 00:12:25.980
people get confused.

192
00:12:25.990 --> 00:12:30.380
Let's take a look at the last test test five.

193
00:12:30.390 --> 00:12:34.380
So what we're going to do now is we're going to do the same thing we did didn't test for except we're

194
00:12:34.380 --> 00:12:36.290
going to use to copy to do it.

195
00:12:36.300 --> 00:12:38.380
So what do we have we have the same vector.

196
00:12:38.420 --> 00:12:44.010
And we have a deck that's empty again and what we're going to do is we're simply going to copy everything

197
00:12:44.010 --> 00:12:49.810
into vector from begin to end and we're going to use the front or iterator to do it.

198
00:12:49.810 --> 00:12:53.130
Or one line of code handles this really really easily.

199
00:12:53.130 --> 00:12:58.890
So again a loop through the vector at the entire vector and for each element that vector insert it to

200
00:12:58.890 --> 00:13:01.810
the front of the deck.

201
00:13:02.280 --> 00:13:04.180
So this is test five.

202
00:13:04.230 --> 00:13:07.200
When we display that this is what we get right here.

203
00:13:07.230 --> 00:13:14.070
Notice it's the same as test for because we're starting at the front and we can clear the deck and do

204
00:13:14.070 --> 00:13:14.550
it again.

205
00:13:14.550 --> 00:13:20.100
So copy vext up began to vector and this time we're going to do the back inserted were inserting at

206
00:13:20.100 --> 00:13:21.760
the back this way.

207
00:13:22.140 --> 00:13:25.700
And what we're going to get is the same thing we got with test 4.

208
00:13:25.770 --> 00:13:27.590
So what should you use.

209
00:13:27.600 --> 00:13:28.980
I tend to like this.

210
00:13:28.980 --> 00:13:30.510
This is much more expressive.

211
00:13:30.510 --> 00:13:33.520
Most programmers will understand this.

212
00:13:33.630 --> 00:13:39.310
A lot of programmers are not real familiar with the algorithms.

213
00:13:39.480 --> 00:13:45.510
So this kind of code right here is foreign to them and they could really mess things up especially junior

214
00:13:45.510 --> 00:13:47.580
programmers junior programmers.

215
00:13:47.670 --> 00:13:53.420
Yes T.L. is a complicated beast and a lot of junior programmers just know the very basics of it.

216
00:13:53.430 --> 00:14:00.150
So when you get a lot of algorithms put together with iterators in his sergers it's likely a lot of

217
00:14:00.150 --> 00:14:01.830
the junior programmers haven't seen that.

218
00:14:01.830 --> 00:14:03.680
So there you go.

219
00:14:04.570 --> 00:14:05.140
That's it.

220
00:14:05.140 --> 00:14:08.680
So that takes care of the deck in the next video.

221
00:14:08.680 --> 00:14:10.540
We'll do the first challenge for the deck.
