WEBVTT
1
00:00:05.340 --> 00:00:10.710
In this video we'll talk about virtual destructors in the previous example.

2
00:00:10.710 --> 00:00:15.580
We got four warning messages when we compiled our simple account class hierarchy.

3
00:00:15.630 --> 00:00:21.360
These warnings were the compiler telling us that deleting a polymorphic object that doesn't have a virtual

4
00:00:21.360 --> 00:00:24.870
destructor could lead to unexpected behavior.

5
00:00:24.870 --> 00:00:30.990
In fact if we have a derived class object that's destroyed by deleting its base class pointer and that

6
00:00:30.990 --> 00:00:36.850
class does not have a virtual destructor then the behavior is undefined by the C++ standard.

7
00:00:36.870 --> 00:00:37.940
That's not good.

8
00:00:38.190 --> 00:00:44.040
Remember derived objects must always be destroyed in the correct order and starting at the correct destructor.

9
00:00:44.340 --> 00:00:46.890
So how can we address these warnings.

10
00:00:47.670 --> 00:00:50.250
Thankfully the solution is simple and intuitive.

11
00:00:50.310 --> 00:00:56.010
If we have a class and that class has virtual functions then that class must always provide a virtual

12
00:00:56.010 --> 00:00:57.520
destructor.

13
00:00:57.660 --> 00:01:02.820
Once we provide a virtual destructor in the base class then all destructors in the derived classes are

14
00:01:02.820 --> 00:01:04.010
also virtual.

15
00:01:04.020 --> 00:01:09.070
We don't have to provide the virtual keyword again although it's best practice to do so.

16
00:01:09.480 --> 00:01:12.960
Here's the code snippet for the account base class.

17
00:01:12.960 --> 00:01:18.570
Since this class has a virtual function withdraw then we must declare the destructor to be virtual as

18
00:01:18.570 --> 00:01:19.680
well.

19
00:01:19.680 --> 00:01:20.370
That's it.

20
00:01:20.370 --> 00:01:23.890
Simple solution to a potentially serious situation.

21
00:01:23.970 --> 00:01:29.490
Let's head over to the ID and see what happens on my system when we don't provide virtual destructors.

22
00:01:29.670 --> 00:01:32.280
And then we'll add them and see the difference.

23
00:01:32.280 --> 00:01:39.220
Welcome back so I mean the IDM in the Section 16 workspace in the virtual destructors project.

24
00:01:39.660 --> 00:01:45.270
So we've got the same account class we've had all along and what I've done here is I've added destructors.

25
00:01:45.270 --> 00:01:49.080
Now these are not virtual destructors yet they're just plain old destructors.

26
00:01:49.270 --> 00:01:54.540
CKC Here's a destructor for the account class and it's simply printing out a count destructor.

27
00:01:54.750 --> 00:01:59.770
The checking account displays checking destructor Selby's destructor and trust destructor.

28
00:01:59.790 --> 00:02:03.350
OK and that we've got our same example that we've been using.

29
00:02:03.510 --> 00:02:06.840
We're creating four pointers to two a base class object.

30
00:02:06.840 --> 00:02:11.100
We're creating an account a savings account a checking account a trust account dynamically on the heap

31
00:02:11.460 --> 00:02:13.030
and then we're calling the withdraw method.

32
00:02:13.230 --> 00:02:15.150
All that will work perfectly fine right now.

33
00:02:15.150 --> 00:02:17.030
The problem comes in right here.

34
00:02:17.190 --> 00:02:20.870
When we delete those pointers right we're free the storage for them.

35
00:02:21.150 --> 00:02:27.060
When we build this project we're going to run into the same four warnings that we had before the warnings

36
00:02:27.060 --> 00:02:32.550
are about the leading object of polymorphic class type account which has non-virtual destructor might

37
00:02:32.550 --> 00:02:34.640
cause undefined behavior.

38
00:02:34.650 --> 00:02:38.650
It sounds pretty ominous and it's a potentially serious warning actually.

39
00:02:38.880 --> 00:02:44.070
All the compiler knows is that we've got pointers to account objects so it really doesn't know which

40
00:02:44.280 --> 00:02:45.630
destructor to call.

41
00:02:45.900 --> 00:02:48.920
And this is undefined in the C plus plus standard.

42
00:02:48.980 --> 00:02:53.900
If we run this will get one behavior on this compiler and this is pretty standard.

43
00:02:53.910 --> 00:02:56.830
You can see what's happening here when I'm calling the delete.

44
00:02:57.180 --> 00:02:59.220
Right here I'm under four pointers.

45
00:02:59.220 --> 00:03:04.350
We're getting a count destructor destructor so you can see that the base class destructor is being called.

46
00:03:04.350 --> 00:03:10.830
Now that's a real problem because the one that's ok for P1 right P1 is an account but P2 right now points

47
00:03:10.830 --> 00:03:14.480
to a savings account Petris a checking P4 as a trust.

48
00:03:14.580 --> 00:03:20.070
So there could be a lot of memory leaks going on those destructors maybe or so are you know closing

49
00:03:20.070 --> 00:03:23.900
files and writing buffers out and none of that stuff is being called.

50
00:03:24.000 --> 00:03:27.060
So potentially we could have a serious problem here.

51
00:03:27.060 --> 00:03:29.160
Thankfully the fix is really easy.

52
00:03:29.160 --> 00:03:34.140
All we need to do is provide virtual destructors and really easy to do.

53
00:03:34.140 --> 00:03:39.060
We can just use the virtual keyword right in front of the destructor and we only have to do it here

54
00:03:39.060 --> 00:03:40.310
in the base class.

55
00:03:40.350 --> 00:03:43.520
But as I mentioned it's good practice to do it everywhere.

56
00:03:43.650 --> 00:03:49.440
So over my virtual destructors I may just finish up one more to go.

57
00:03:50.010 --> 00:03:50.940
And here we go.

58
00:03:50.940 --> 00:03:55.200
Now if we run this now we build and run.

59
00:03:55.200 --> 00:03:56.580
You'll see we get no errors.

60
00:03:56.610 --> 00:03:57.900
And now watch what happens.

61
00:03:57.900 --> 00:04:04.470
This is more like it right here we're deleting the one which cause the account destructor has before.

62
00:04:04.470 --> 00:04:10.290
Now when we delete P2 P2 is a savings so you can see that the savings destructor is being called followed

63
00:04:10.290 --> 00:04:13.980
by the base class destructor which is exactly what we want.

64
00:04:14.100 --> 00:04:21.150
So if we're freeing memory and those destructors if we're closing files writing buffer is taking care

65
00:04:21.150 --> 00:04:24.420
of resources now everything's going to work as we want.

66
00:04:24.420 --> 00:04:29.730
You can see P three here is doing the checking destructor followed by the account destructor and then

67
00:04:29.730 --> 00:04:33.870
following the trust destructor and the account destructor for P4.

68
00:04:33.900 --> 00:04:38.100
Remember we all get going we're only going one deep here in the inheritance hierarchy.

69
00:04:38.160 --> 00:04:42.840
If you are going 5 6 10 deep then you've got a lot of destructors that weren't called.

70
00:04:42.960 --> 00:04:44.250
That will be called now.

71
00:04:44.400 --> 00:04:47.490
They'll take care of memory take care of resources and so forth.

72
00:04:47.490 --> 00:04:49.290
The rule is really really simple.

73
00:04:49.470 --> 00:04:55.010
If you've got a class and it's got a virtual function give it a virtual destructor as well.

74
00:04:55.020 --> 00:04:58.030
Sometimes students hands about virtual constructors.

75
00:04:58.320 --> 00:05:02.710
You can't have virtual constructors they're not allowed and they really don't make any sense at all.

76
00:05:02.970 --> 00:05:07.750
OK so that's it about virtual destructor is in the next video what we'll do is we'll talk about the

77
00:05:07.780 --> 00:05:13.050
override specifier that gets the compiler to help us out just in case we make some errors.
