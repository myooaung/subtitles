WEBVTT
1
00:00:05.730 --> 00:00:13.370
In this video we'll talk about the steps needed to read input from text files using C++ streams.

2
00:00:14.360 --> 00:00:19.930
In the following slides I'll talk about the main classes and methods that we can use to read from files

3
00:00:20.440 --> 00:00:25.090
and then I'll go over a bunch of examples in live code so that you can see alternative ways to read

4
00:00:25.090 --> 00:00:29.770
text data from files depending on the type of data we want to read.

5
00:00:29.800 --> 00:00:35.320
First of all talk about input files and reading from them and then in another video we'll discuss output

6
00:00:35.320 --> 00:00:37.360
files and writing to them.

7
00:00:37.360 --> 00:00:43.550
The two classes that I'll discuss for text file input are F. stream and stream.

8
00:00:43.600 --> 00:00:48.400
There are a few steps that we must always perform when we read from files.

9
00:00:48.400 --> 00:00:56.160
The first is to include the F stream header file then we declare a stream object of either stream or

10
00:00:56.630 --> 00:00:58.170
stream type.

11
00:00:58.230 --> 00:01:03.060
We then connect the stream object that we just created to the file that we want to read from on our

12
00:01:03.060 --> 00:01:04.520
file system.

13
00:01:04.590 --> 00:01:06.390
File systems are very different.

14
00:01:06.510 --> 00:01:09.900
So we have to be sure that we get the file name and the path correct.

15
00:01:09.900 --> 00:01:11.510
I'll talk more about that later.

16
00:01:11.640 --> 00:01:15.170
Once the file is connected and open then we can read from it.

17
00:01:15.180 --> 00:01:18.030
There are many many different ways to read from a file.

18
00:01:18.210 --> 00:01:21.010
We can read in binary mode we can read in text mode.

19
00:01:21.090 --> 00:01:23.930
We can read one line at a time one character at a time.

20
00:01:23.970 --> 00:01:28.800
We can use methods like getline and we can use the extraction operator like we've been doing with C

21
00:01:28.800 --> 00:01:32.000
in then when we're done processing the file.

22
00:01:32.000 --> 00:01:34.430
We have to close the file.

23
00:01:34.440 --> 00:01:38.340
This should sound pretty easy and for the most part it is in the next few slides.

24
00:01:38.340 --> 00:01:43.410
We'll discuss the details of opening a file checking to make sure that the file was opened correctly

25
00:01:43.800 --> 00:01:47.480
reading from the file in various ways and then closing the file.

26
00:01:47.520 --> 00:01:51.800
So let's get started creating the stream object.

27
00:01:51.910 --> 00:01:59.380
In this example we're creating an object named infile in we're using the F stream class as its type.

28
00:01:59.440 --> 00:02:02.140
Notice that I'm initializing the object as well.

29
00:02:02.200 --> 00:02:03.990
The initializer takes two arguments.

30
00:02:04.000 --> 00:02:06.460
The first is the name of a file.

31
00:02:06.460 --> 00:02:13.360
This can sometimes be very operating system specific and also very ideally specific in the code like

32
00:02:13.860 --> 00:02:18.540
we always open our files one directory up from where the executive lives.

33
00:02:18.540 --> 00:02:23.690
That's why we're using dot dot forward slash before the phone and I'll talk more about filenames in

34
00:02:23.700 --> 00:02:28.890
the live code session and also include a video at the end of the section that talks about the file path

35
00:02:29.130 --> 00:02:31.000
used for some other ideas.

36
00:02:31.080 --> 00:02:35.130
But for now let's assume the file is where it's supposed to be.

37
00:02:35.130 --> 00:02:41.310
The second parameter specifies the mode and any other properties of the this being opened in the first

38
00:02:41.310 --> 00:02:44.310
example we're using stood iOS in.

39
00:02:44.430 --> 00:02:47.310
This means to open the file in input mode.

40
00:02:47.490 --> 00:02:51.830
So we're able to read from it but not write to it by default.

41
00:02:51.840 --> 00:02:55.500
Files are opened in text mode in the second example.

42
00:02:55.500 --> 00:03:01.530
We're opening the file in input mode and in binary mode this is necessary when reading non-text files

43
00:03:01.530 --> 00:03:03.370
that contain binary data.

44
00:03:03.630 --> 00:03:08.030
We won't be doing that and this course will work strictly with text files.

45
00:03:08.070 --> 00:03:14.090
Notice the vertical bar or the pipe operator between studio s in and studio s binary.

46
00:03:14.280 --> 00:03:19.010
This is the bitwise OR operator when used with Bit fields such as these.

47
00:03:19.050 --> 00:03:23.540
It sets both the input and the binary modes to true.

48
00:03:23.770 --> 00:03:30.670
At this point the file will be opened if it was found in this slide we used the stream class the stream

49
00:03:30.670 --> 00:03:34.680
class can actually open up a file for reading and writing at the same time.

50
00:03:34.750 --> 00:03:40.210
We won't be doing that but if you have a file that you use only for input it's more common to use the

51
00:03:40.460 --> 00:03:41.910
F stream class.

52
00:03:41.920 --> 00:03:43.480
Let's see that in the next slide.

53
00:03:46.170 --> 00:03:54.290
In this slide reusing the stream class as the type for file Lifestream is used for input files only.

54
00:03:54.650 --> 00:03:58.760
We can create an extreme object the same way we created an extreme object.

55
00:03:58.820 --> 00:04:05.550
However in the case of an extreme object the Stood IOAS in is optional since it's already the default.

56
00:04:05.630 --> 00:04:09.190
So the first two declarations of infile have the same effect.

57
00:04:09.260 --> 00:04:12.530
The last declaration opens in file in binary mode.

58
00:04:13.400 --> 00:04:16.070
There's another way to open a file that's commonly seen in code.

59
00:04:16.070 --> 00:04:17.740
So let's take a look at that next.

60
00:04:19.580 --> 00:04:25.970
In this example notice that we're creating infile as an extreme but we haven't provided any file name

61
00:04:25.970 --> 00:04:27.600
to associate with it yet.

62
00:04:27.650 --> 00:04:32.060
This is a common use case since many times we don't know the file name and we have to get it from a

63
00:04:32.060 --> 00:04:35.210
user or from some other source at runtime.

64
00:04:35.210 --> 00:04:40.460
Once we have the file name we can then use it and use the open method on the stream object to open the

65
00:04:40.460 --> 00:04:48.770
file so we can say infile dot open and provide the filename or in file open file name and then any flags

66
00:04:48.770 --> 00:04:50.610
we need to set.

67
00:04:50.770 --> 00:04:55.450
Now that we attempted to create the stream and connected to a file we have to be sure that this was

68
00:04:55.450 --> 00:04:58.010
successful before we start reading from the file.

69
00:04:58.030 --> 00:05:04.070
So let's do that next so we have to be sure that the file was open successfully.

70
00:05:04.140 --> 00:05:08.550
Maybe it wasn't founded there was some sort of hardware or permission issue.

71
00:05:08.550 --> 00:05:12.810
There are a few ways that we can check to see if the file was open successfully.

72
00:05:12.810 --> 00:05:16.840
We can call the is open method of the file stream object that we created.

73
00:05:16.950 --> 00:05:21.520
This will return a boolean indicating whether the file is open for processing or not.

74
00:05:21.900 --> 00:05:22.560
If we get back.

75
00:05:22.560 --> 00:05:23.050
True.

76
00:05:23.100 --> 00:05:27.940
We're good to go if we get back fault something happened that we can't read from the file.

77
00:05:28.140 --> 00:05:30.040
In the case of this error what do we do.

78
00:05:30.210 --> 00:05:32.030
Well it depends on the application.

79
00:05:32.040 --> 00:05:35.170
We might just display an error message and terminate the program.

80
00:05:35.340 --> 00:05:39.240
We might see if weeks and somehow recreate that file from a backup.

81
00:05:39.270 --> 00:05:41.500
It's totally application dependent.

82
00:05:41.550 --> 00:05:46.060
In our examples we'll simply display an error message and terminate the program.

83
00:05:46.410 --> 00:05:50.610
If there was no such error then we can go ahead and read from the file.

84
00:05:50.610 --> 00:05:56.670
Now let's see another way that we can test to see if the file was opened successfully.

85
00:05:56.670 --> 00:06:00.990
In this case we can simply test the stream object itself.

86
00:06:00.990 --> 00:06:05.010
If we couldn't open the file then this would return false.

87
00:06:05.010 --> 00:06:06.560
And then we can decide what to do.

88
00:06:06.570 --> 00:06:09.760
Otherwise it's good and we can proceed reading from the file.

89
00:06:10.000 --> 00:06:11.980
But let's talk about the last step first.

90
00:06:12.090 --> 00:06:16.890
That is closing the file once we finish reading from the file we must close it.

91
00:06:16.890 --> 00:06:21.090
This is a simple method call to the close method with input files.

92
00:06:21.090 --> 00:06:26.180
It's not so critical but when we talk about output files closing them is very important.

93
00:06:26.700 --> 00:06:30.980
OK so now that we know how to open a file check to make sure that it's open and close it.

94
00:06:31.140 --> 00:06:35.310
Let's do the part that's the most fun reading from.

95
00:06:35.420 --> 00:06:37.630
There are many many ways to read from a file.

96
00:06:37.670 --> 00:06:40.930
And these examples we'll be using text files.

97
00:06:40.940 --> 00:06:45.640
We can read formatted data from the text file using the stream extraction operator.

98
00:06:45.680 --> 00:06:49.890
Remember that one we've used that all along with CNH to get input from the keyboard.

99
00:06:50.180 --> 00:06:53.820
Well now we can use it again to get input from the file stream.

100
00:06:53.840 --> 00:06:59.000
In this example let's suppose that we have an integer a double and a string in a text file.

101
00:06:59.000 --> 00:07:01.220
And we want to read these into our programs.

102
00:07:01.220 --> 00:07:04.610
You can see the text files content to the little box here on the slides.

103
00:07:05.500 --> 00:07:09.060
We can assume that infile was created successfully.

104
00:07:09.100 --> 00:07:10.840
Notice that we create three variables.

105
00:07:10.840 --> 00:07:12.070
Numb is an int.

106
00:07:12.160 --> 00:07:15.600
Total is a double and name is a string.

107
00:07:15.600 --> 00:07:19.160
Now we can read from infile using the extraction operator.

108
00:07:19.410 --> 00:07:25.980
The first statement will read 100 and stored in the second statement we're read in 255 point 6:07 and

109
00:07:25.980 --> 00:07:29.760
stored in total and then read Larry unstored a name.

110
00:07:29.790 --> 00:07:30.300
That's it.

111
00:07:30.300 --> 00:07:31.470
Simple as pie.

112
00:07:31.710 --> 00:07:34.760
We can have these three separate read statements on a single line.

113
00:07:34.800 --> 00:07:40.420
We can chain them all together just like we did when we worked with S.N..

114
00:07:40.460 --> 00:07:46.760
Sometimes we want to read files an entire line at a time and we know that the extraction operators will

115
00:07:46.760 --> 00:07:48.950
stop when they see any white space.

116
00:07:48.980 --> 00:07:51.850
So in this case we can use the getline method.

117
00:07:51.920 --> 00:07:56.120
Remember that method we used it when we read lines from the keyboard using CN.

118
00:07:56.450 --> 00:07:59.380
In this case suppose our file contains the string.

119
00:07:59.390 --> 00:08:06.290
This is a line we create a string object called line and then we use getline with the name of the stream

120
00:08:06.290 --> 00:08:08.880
we're reading from and the stream we're reading into.

121
00:08:08.960 --> 00:08:15.380
That's it an entire line of text up to the new line will be read from the file and stored in the string

122
00:08:15.470 --> 00:08:16.620
named line.

123
00:08:16.700 --> 00:08:22.310
Really a single line from a file isn't too useful unless the file only has one line but usually files

124
00:08:22.310 --> 00:08:23.890
have many lines of text.

125
00:08:23.930 --> 00:08:28.130
So let's see how we can wrap this up in a loop to read all the lines in a text file.

126
00:08:29.720 --> 00:08:31.040
Here's the sample code.

127
00:08:31.160 --> 00:08:36.060
We can assume this code is in Main in all the necessary header files have been included.

128
00:08:36.080 --> 00:08:41.260
First we declare infile as an I-F stream and we connect it to my file.

129
00:08:41.320 --> 00:08:45.940
Text we also declare line to be a string object.

130
00:08:45.940 --> 00:08:49.350
That's where we'll store each line that we read from the text file.

131
00:08:49.930 --> 00:08:53.880
Ok so first let's make sure the file is open successfully.

132
00:08:53.920 --> 00:09:00.400
You can see in the if statement that we're checking to see if not in file not in file will be true if

133
00:09:00.400 --> 00:09:06.130
the file was not open successfully and if so we display an error message and we return something other

134
00:09:06.130 --> 00:09:08.510
than 0 and our program terminates.

135
00:09:09.040 --> 00:09:14.970
Otherwise we have an open file and we can start processing it we'll read the lines from the file in

136
00:09:14.970 --> 00:09:16.200
a while loop.

137
00:09:16.620 --> 00:09:24.000
And while we're in the while loop you'll see the condition while I'm not infile dot E O F F is a method

138
00:09:24.000 --> 00:09:30.200
that returns true when we reached the end of the file so we're looping while we have not seen the end

139
00:09:30.200 --> 00:09:36.990
of file at each loop iteration we use getline to read from in file and store an entire line of text

140
00:09:36.990 --> 00:09:38.120
into a line.

141
00:09:38.370 --> 00:09:43.980
Then we display line to the console and we iterate again at some point we'll reach the end of the file

142
00:09:44.100 --> 00:09:47.250
and the loop terminates then we close the file and we're done.

143
00:09:47.250 --> 00:09:52.740
So as you can see this program will read a text file from some file on disk and display its contents

144
00:09:52.740 --> 00:09:53.980
to the console.

145
00:09:54.180 --> 00:09:56.620
Pretty easy.

146
00:09:56.640 --> 00:10:01.260
Now let's see a variation of this program that does the while loop condition a bit differently.

147
00:10:01.680 --> 00:10:06.620
In this case the loop is while get line in file line.

148
00:10:06.900 --> 00:10:08.960
At first you might think what's going on there.

149
00:10:09.150 --> 00:10:13.950
Well we can embed many of the string input statements right into the while condition.

150
00:10:13.950 --> 00:10:19.080
We can also embed statements that have the extraction operator in there since these statements return

151
00:10:19.080 --> 00:10:21.000
a reference to the stream object.

152
00:10:21.120 --> 00:10:25.260
They'll only return a true value when the read was successful.

153
00:10:25.290 --> 00:10:30.810
So when we reached the end of file or some other error condition is encountered there will not return

154
00:10:30.810 --> 00:10:33.180
true and the loop will terminate.

155
00:10:33.210 --> 00:10:35.860
You could write code either way.

156
00:10:36.810 --> 00:10:41.400
OK so one more example and then we'll see some examples in live code in the next video.

157
00:10:41.550 --> 00:10:47.940
In this example we're again using infile as an extreme object but this time we're reading the file in

158
00:10:47.940 --> 00:10:49.590
an informative manner.

159
00:10:49.590 --> 00:10:52.150
In other words one character at a time.

160
00:10:52.350 --> 00:10:58.400
Sometimes this is very useful since the extraction operator getline and other methods depend on white

161
00:10:58.400 --> 00:11:04.680
space or new lines to be able to work correctly and formatted input reach one character at a time regardless

162
00:11:04.680 --> 00:11:06.500
of what that character is.

163
00:11:06.960 --> 00:11:12.510
The code in this example is exactly the same except that in the while loop condition we're reading a

164
00:11:12.510 --> 00:11:17.040
single character into the variable c with the get method.

165
00:11:17.040 --> 00:11:19.550
Then we simply output the character.

166
00:11:19.560 --> 00:11:24.870
So as you can see this example also reads a file from disk and displays it to the console but it does

167
00:11:24.870 --> 00:11:27.980
it in an unfortunate manner or one character at a time.

168
00:11:28.560 --> 00:11:33.510
OK so in the next video we'll head over to the idea we'll read some files and I'll talk some more about

169
00:11:33.510 --> 00:11:34.860
those file names.
