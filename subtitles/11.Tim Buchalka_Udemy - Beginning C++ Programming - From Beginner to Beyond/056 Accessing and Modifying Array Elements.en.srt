1
00:00:05,450 --> 00:00:10,320
In this video we'll look at the syntax for accessing individual array elements.

2
00:00:10,350 --> 00:00:13,460
The syntax is probably very much like what you expected.

3
00:00:13,470 --> 00:00:18,480
We use the name of the array followed by square brackets with the index of the array element we want

4
00:00:18,810 --> 00:00:20,910
inside the square brackets.

5
00:00:20,910 --> 00:00:27,420
This is called the array subscripting for example test score one refers to the element at index 1 in

6
00:00:27,420 --> 00:00:30,840
the test scores array in the code example at the bottom.

7
00:00:30,840 --> 00:00:36,390
You can see that we've declared the test scores array of five integers and initialize those integers.

8
00:00:36,390 --> 00:00:41,040
Then we have 5 output statements that each displays one of those array elements.

9
00:00:41,220 --> 00:00:44,710
Remember that arrays subscripting or indexing starts at zero.

10
00:00:44,850 --> 00:00:48,210
So the first element of an array is at index 0.

11
00:00:48,270 --> 00:00:52,920
We use the same syntax for storing values and arrangements in this example.

12
00:00:52,920 --> 00:00:57,990
We're getting input from the user via the console and updating the individual array elements from index

13
00:00:57,990 --> 00:00:59,870
0 to 4.

14
00:00:59,880 --> 00:01:03,430
We could then display them as we did in the previous slide.

15
00:01:03,790 --> 00:01:08,280
We'll talk about assignment statements in an upcoming section but here you can see that I'm assigning

16
00:01:08,280 --> 00:01:11,520
90 to the first element of the test scores array.

17
00:01:11,520 --> 00:01:13,750
Notice that the syntax is the same.

18
00:01:14,070 --> 00:01:18,990
That pretty much covers the basics of a race but you might be wondering how this works behind the scenes.

19
00:01:18,990 --> 00:01:27,340
Let's see in C++ the name of the array represents the location or address in memory of the first element

20
00:01:27,370 --> 00:01:34,150
in the array that is Yellam with index zero where we access an array element using the subscript operator

21
00:01:34,420 --> 00:01:36,970
and provide an index in the square brackets.

22
00:01:37,000 --> 00:01:42,650
The compiler knows that you want the element that is at that offset from the beginning of the array.

23
00:01:42,970 --> 00:01:46,100
So all the compiler has to do is a pretty simple calculation.

24
00:01:46,120 --> 00:01:51,670
For example if you want the element an index to all the compiler has to do is go to integers away from

25
00:01:51,670 --> 00:01:53,920
the beginning of the array and there it is.

26
00:01:53,980 --> 00:01:56,160
Or two doubles or two whatevers.

27
00:01:56,170 --> 00:02:01,390
The compiler uses the size of operator to determine where the element will be.

28
00:02:01,390 --> 00:02:05,170
This is one reason why raw raised and C++ are so efficient.

29
00:02:05,320 --> 00:02:10,990
But remember there is no bounds checking so be careful if you have an array of 5 integers and you asked

30
00:02:10,990 --> 00:02:16,420
the compiler for the integer at the tenth index it will gladly do the calculation and give you whatever

31
00:02:16,420 --> 00:02:18,440
happens to be at that location.

32
00:02:18,490 --> 00:02:22,840
It's your responsibility to be sure that you're within the bounds of the array.

33
00:02:22,840 --> 00:02:28,440
Now let's head over to code right and use what we learned and write some code with a race.

34
00:02:28,460 --> 00:02:34,100
OK so now I mean code light and I mean the section 7 workspace and the arrays project.

35
00:02:34,140 --> 00:02:40,040
And here's my main CBP file what I've done is I've created some examples where I am declaring and initializing

36
00:02:40,040 --> 00:02:45,830
some arrays I'm accessing array elements I'm reading from them storing values in them and so forth.

37
00:02:46,040 --> 00:02:49,730
And that way you can go through this step by step so you can really understand what's going on.

38
00:02:49,730 --> 00:02:54,500
I've also commented a bunch of this out and what I'll do is uncomment as I go and we'll build on this

39
00:02:54,500 --> 00:02:55,370
little by little.

40
00:02:55,370 --> 00:03:01,750
So the first thing we're doing here is I'm creating an array right here named vowels that's that a.m.-I

41
00:03:01,760 --> 00:03:02,910
array follows.

42
00:03:02,950 --> 00:03:06,960
You'll notice that right in those square brackets I'm not providing any information.

43
00:03:06,980 --> 00:03:12,000
So what I'm telling the compiler is hey you figure out how big this is based on the initializer.

44
00:03:12,090 --> 00:03:16,330
OK so in this case I've got five characters that I'm initialising this to.

45
00:03:16,520 --> 00:03:24,380
So the array will be size 5 so was going to happen is I have an array of 5 characters and I'm initializing

46
00:03:24,380 --> 00:03:25,800
them to a T.

47
00:03:25,880 --> 00:03:30,180
Oh and you write the name of this array is vowels.

48
00:03:30,200 --> 00:03:35,180
So I can treat it as such and it's indexed from 0 to 4.

49
00:03:35,210 --> 00:03:37,940
Remember there is no 5 here.

50
00:03:37,940 --> 00:03:40,120
So don't let that confuse you.

51
00:03:40,130 --> 00:03:40,900
Fine.

52
00:03:40,910 --> 00:03:47,680
Now in this case I'm saying the first vow is and I'm using an output statement and grabbing vowels Sub-Zero

53
00:03:47,750 --> 00:03:49,340
that's right there.

54
00:03:49,340 --> 00:03:50,300
That's the little AA.

55
00:03:50,360 --> 00:03:56,960
So I expect this to print out a little AA in this case I'm using vowels for which is the little you

56
00:03:56,960 --> 00:03:57,350
right here.

57
00:03:57,360 --> 00:03:59,040
Lowercase U.

58
00:03:59,150 --> 00:04:01,100
All right so let's run this and see what we get.

59
00:04:01,100 --> 00:04:07,770
So what I'm going to do is I'm pressing control 5 to build and run and the output is the first Vout

60
00:04:07,820 --> 00:04:13,580
is a and I'll move this over here is you could see the first is lowercase say the last five was a lowercase

61
00:04:13,580 --> 00:04:16,150
you exactly what we expect.

62
00:04:16,490 --> 00:04:23,450
Now what would happen be clear this real quick what would happen if I tried to read from the console

63
00:04:23,940 --> 00:04:32,800
and I want to store whatever character I read into vowels 5 recall.

64
00:04:32,840 --> 00:04:37,410
There is no vowel so 5 right it goes 0 1 2 3 4.

65
00:04:37,490 --> 00:04:40,600
What happens here really depends on a lot of things.

66
00:04:40,670 --> 00:04:45,260
Obviously I'm going to read a character and stored in a location that's not part of the array so there

67
00:04:45,260 --> 00:04:47,200
could be something important there.

68
00:04:47,360 --> 00:04:48,480
And I just blew it away.

69
00:04:48,500 --> 00:04:54,050
My program will likely crash depending on what operating system you're on and what you're running your

70
00:04:54,050 --> 00:04:55,760
crash may look different from mine.

71
00:04:55,760 --> 00:04:58,430
So let me run this and hopefully it'll crash it may not.

72
00:04:58,430 --> 00:05:00,350
You never really know this.

73
00:05:01,070 --> 00:05:06,830
OK there's first vowel is little AA second bell is lowercase you know I'm going to read someone to type

74
00:05:06,830 --> 00:05:09,520
in that say capital A.

75
00:05:09,650 --> 00:05:13,180
And when I press Enter that's my crash.

76
00:05:13,250 --> 00:05:18,290
Hopefully you can see that this is a phrase that he has stopped working PLO's program depending on again

77
00:05:18,290 --> 00:05:20,640
what operating system you're working on it may look different.

78
00:05:20,720 --> 00:05:23,430
But in this case this is a good thing my program crashed.

79
00:05:23,480 --> 00:05:25,220
I'm able to fix it.

80
00:05:25,580 --> 00:05:30,780
And obviously what happened here was and I'll comment this out and I'll leave it coming.

81
00:05:30,860 --> 00:05:32,280
It won't keep crashing hoops on me.

82
00:05:32,300 --> 00:05:33,140
Do that again.

83
00:05:34,420 --> 00:05:42,400
And I'll write something like know out of bounds that way when you download the example you'll know

84
00:05:42,400 --> 00:05:49,150
what's going on and I'll say don't do this or be very careful with that.

85
00:05:49,660 --> 00:05:53,180
OK so that gives you an idea of what happens it could be a pretty serious problem.

86
00:05:53,200 --> 00:05:59,530
And the real problem is that it may not happen every time you may clobber some information that's just

87
00:05:59,530 --> 00:06:04,400
not even important but you may Klepper some information that's real important.

88
00:06:04,580 --> 00:06:04,900
OK.

89
00:06:04,930 --> 00:06:08,450
So let's move on in this example here.

90
00:06:08,480 --> 00:06:13,600
I mean uncomment this code and I'll walk you through this example here I'm doing something very similar

91
00:06:13,660 --> 00:06:19,120
I'm creating an array called high temps and you can see that the name of the arrays right there high

92
00:06:19,120 --> 00:06:19,940
temps.

93
00:06:19,990 --> 00:06:24,490
Again I'm not providing the size of the array because I'm letting the compiler figure it out based on

94
00:06:24,490 --> 00:06:25,700
my initializer list.

95
00:06:25,840 --> 00:06:30,610
There are one two three four initializers.

96
00:06:30,790 --> 00:06:33,260
So I going to create an array of four doubles.

97
00:06:33,280 --> 00:06:38,620
The first one being ninety point one that second when being eighty nine point eight and so forth here

98
00:06:38,620 --> 00:06:42,150
I'm saying pre-adult high temps Sub-Zero right.

99
00:06:42,220 --> 00:06:46,590
Remember this would be 0 1 2 and 3.

100
00:06:46,600 --> 00:06:50,330
So in this case this will predestine ninety point one.

101
00:06:50,350 --> 00:06:53,810
Now I'm saying high temps Sub-Zero is one hundred point seven.

102
00:06:53,830 --> 00:07:00,150
So what I just did was I just changed the ninety point one to 100 point seven.

103
00:07:00,220 --> 00:07:04,450
This is an assignment statement we're going to talk a lot about assignments statements in an upcoming

104
00:07:04,450 --> 00:07:08,120
section but they're really really straightforward when you see them like this.

105
00:07:08,140 --> 00:07:11,930
All it says is move this guy into that guy.

106
00:07:12,360 --> 00:07:13,480
OK so that's what we're doing.

107
00:07:13,510 --> 00:07:16,300
We're just overriding that ninety eight point one.

108
00:07:16,300 --> 00:07:17,950
Two hundred point seven.

109
00:07:17,950 --> 00:07:21,670
And then when I display it it's going to display a hundred point seven now.

110
00:07:21,870 --> 00:07:27,850
So what I expect here is the first time I put that guy it's going to give me ninety point one.

111
00:07:27,850 --> 00:07:29,770
Now I'm going to get 100 point seven.

112
00:07:29,770 --> 00:07:33,460
So let's try this out and see if that's exactly what we get.

113
00:07:33,670 --> 00:07:37,510
We build and run the first high temperature is ninety point one.

114
00:07:37,510 --> 00:07:40,650
The first high temperature is now one hundred point seven.

115
00:07:40,660 --> 00:07:48,040
So here you could see some examples of declaring initialising and accessing array elements.

116
00:07:48,040 --> 00:07:49,440
Now here's another example here.

117
00:07:49,450 --> 00:07:52,430
I'm like come at this out as well.

118
00:07:53,230 --> 00:07:59,950
In this case right here what I've done is I've asked the compiler again to give me an array of five

119
00:07:59,980 --> 00:08:02,160
integers and call it test scores.

120
00:08:02,500 --> 00:08:05,510
What's happening here is I'm getting an array of five integers.

121
00:08:08,920 --> 00:08:11,610
Just like that it's called test scores

122
00:08:14,410 --> 00:08:18,420
again they're indexed from 0 1 2 3 and 4.

123
00:08:18,940 --> 00:08:20,890
However I never initialize them.

124
00:08:20,890 --> 00:08:27,880
So what you have in here is junk or garbage memory whatever happens to be in there whatever bit pattern

125
00:08:27,880 --> 00:08:30,190
happens to be in there is still in there.

126
00:08:30,190 --> 00:08:35,000
So with this code right here is doing is it's displaying each one of those array elements.

127
00:08:35,050 --> 00:08:40,360
It's starting the development at index 0 going all the way through the element index for this is what

128
00:08:40,360 --> 00:08:42,100
we'll do later on with looping.

129
00:08:42,190 --> 00:08:46,270
We can do all this in one statement with looping and we'll learn how to do it a little bit later.

130
00:08:46,270 --> 00:08:49,350
Now when I do this I'm expecting junk.

131
00:08:49,360 --> 00:08:52,470
I have no idea what's in those cells so I don't know what's going to print out.

132
00:08:52,480 --> 00:08:54,590
So let's try it and see.

133
00:08:55,270 --> 00:09:01,270
And you can see that chunk right here 41 9 9 1 3 6 and so forth because there's zero in there.

134
00:09:01,270 --> 00:09:05,830
The point is you cannot rely on those values you really don't know what's in there.

135
00:09:05,890 --> 00:09:06,810
So what do we do.

136
00:09:06,910 --> 00:09:13,750
Well we can just put a couple of curly braces there and initialize that will initialize everything to

137
00:09:13,750 --> 00:09:14,650
zero.

138
00:09:14,650 --> 00:09:18,890
So if I run this again I expect to see all zeros.

139
00:09:18,940 --> 00:09:19,350
I do.

140
00:09:19,360 --> 00:09:22,510
That's exactly what I want always initialized to a race.

141
00:09:22,510 --> 00:09:27,070
Never assume that they've got any value in there until you put the value in yourself.

142
00:09:27,070 --> 00:09:30,690
I could also put a hardcoded zero in there and I'll have the same effect.

143
00:09:30,730 --> 00:09:31,870
But what if I had to 100.

144
00:09:31,870 --> 00:09:36,990
This is this piece confuses beginning programmers sometimes you may think that it's going to put 100

145
00:09:37,000 --> 00:09:39,640
or all of those elements but that's not the case.

146
00:09:39,650 --> 00:09:42,110
Let me run it and you'll see what happens.

147
00:09:42,110 --> 00:09:46,390
You see that it put a 100 in the first element and then the rest are zeroed out.

148
00:09:46,390 --> 00:09:50,110
That's the behavior you can get put in less initializers than you have so much.

149
00:09:50,110 --> 00:09:57,140
Now if I put a 90 here then what's going to happen is it's going to set this element right here.

150
00:09:57,330 --> 00:10:05,120
It's going to set this element right here to 100 this element to 90 and then 0 0 0.

151
00:10:05,200 --> 00:10:08,880
So that's the behavior when you provide less than the size of the array.

152
00:10:09,010 --> 00:10:10,720
As far as initializers are concerned.

153
00:10:10,930 --> 00:10:13,690
So again I'll run this real quick.

154
00:10:17,320 --> 00:10:20,480
And what you'll see is 190 000.

155
00:10:20,530 --> 00:10:22,420
Let me clear the screen real quick.

156
00:10:22,660 --> 00:10:30,520
In this case what I'm doing here is I'm reading integers from the console and storing them into those

157
00:10:30,520 --> 00:10:33,400
array elements from 0 to 4.

158
00:10:33,400 --> 00:10:38,960
So whatever was in here before is going to be removed now so I'm going to initialize this to 100.

159
00:10:38,950 --> 00:10:43,020
It just goes straight down by 10 70 and 60.

160
00:10:43,300 --> 00:10:47,120
So 198 1760s how initialising this too.

161
00:10:47,150 --> 00:10:49,890
I have a 5 here I don't really need that 5.

162
00:10:49,880 --> 00:10:51,610
There I think just get rid of it like that.

163
00:10:51,610 --> 00:10:54,430
I did it before so you can see how it initializes zeros.

164
00:10:54,460 --> 00:10:56,460
So I'll just get rid of that five right there.

165
00:10:56,590 --> 00:11:02,590
It's still going to create an array of five integers and initialize them to 190 80 1760.

166
00:11:02,590 --> 00:11:06,640
Now what I'm going to do is I'm just going to enter different numbers and then we'll display those new

167
00:11:06,640 --> 00:11:10,300
numbers right here with this code which is the same code as we used before.

168
00:11:10,480 --> 00:11:12,390
OK so let's do that real quick.

169
00:11:12,700 --> 00:11:14,680
Well built and run.

170
00:11:14,790 --> 00:11:17,990
So there is our original array one hundred ninety 1876.

171
00:11:18,040 --> 00:11:25,290
So suppose I want to go now 10 20 30 40 and 50 and I print them out.

172
00:11:25,290 --> 00:11:31,320
Now you can see that array Sub-Zero is 10 and the next one is 20 30 40 and 50 as you can see that those

173
00:11:31,320 --> 00:11:35,530
values are read from the console and stored in the array.

174
00:11:35,610 --> 00:11:40,890
The last thing we'll do is this may give you a little bit of a different effect than you thought.

175
00:11:40,980 --> 00:11:44,420
Suppose that I want to output just the name of the array.

176
00:11:44,470 --> 00:11:46,340
You'll notice test scores right here.

177
00:11:46,350 --> 00:11:49,490
I'm not saying test scores Sub-Zero or test scores 1.

178
00:11:49,590 --> 00:11:51,440
I'm just saying test scores.

179
00:11:51,510 --> 00:11:55,940
Let's run this and then I'll show you exactly what's going on when we come back.

180
00:11:55,950 --> 00:11:58,860
So I'm going to run this.

181
00:11:58,860 --> 00:12:01,170
And again let's just enter those scores again

182
00:12:03,990 --> 00:12:06,620
and notice what happens here says.

183
00:12:06,630 --> 00:12:08,940
Notice what the value of the array name is.

184
00:12:08,940 --> 00:12:16,020
And you get some hexadecimal number that number is actually the memory address the storage location

185
00:12:16,020 --> 00:12:18,840
where the array is located.

186
00:12:18,900 --> 00:12:24,570
This is the way that C++ works or the race the name of the array is the location of the array.

187
00:12:24,570 --> 00:12:30,060
Now that's a strange number to write so I'll just use a thousand for it that way we can make it a little

188
00:12:30,060 --> 00:12:31,600
bit easier to explain.

189
00:12:31,620 --> 00:12:33,570
So let's take a look at how this works.

190
00:12:33,660 --> 00:12:42,360
I've created that array right test scores and test scores is five integers just like we saw before.

191
00:12:42,360 --> 00:12:46,050
Again indexed 0 1 2 3 and 4.

192
00:12:46,110 --> 00:12:49,710
This is called test scores.

193
00:12:49,710 --> 00:12:53,840
Now when I say test scores what's it going to do.

194
00:12:54,030 --> 00:12:58,620
Well it's going to take the address of that variable that variable is an address so let's say that the

195
00:12:58,620 --> 00:13:04,560
address is a thousand and then this address is a thousand for assuming that we have 4 byte integers

196
00:13:04,950 --> 00:13:06,480
and this is 0 0 0 0 8.

197
00:13:06,480 --> 00:13:08,780
This is a thousand 12 and so forth.

198
00:13:10,810 --> 00:13:13,600
What prints out here will be 1000.

199
00:13:13,720 --> 00:13:18,130
And the calculation that C++ is doing that we mentioned in the slides.

200
00:13:18,130 --> 00:13:23,860
So for example when I say test scores one is I'm saying here what is going to do is it's going to take

201
00:13:23,860 --> 00:13:29,690
test scores which is a thousand and it's going to add one integer to it.

202
00:13:29,700 --> 00:13:34,210
Or in other words go one integer away from it and it's Jer's 4 bytes.

203
00:13:34,210 --> 00:13:34,950
There you go.

204
00:13:34,960 --> 00:13:35,860
That's the address.

205
00:13:35,860 --> 00:13:38,230
That's the calculation it's doing.

206
00:13:38,320 --> 00:13:44,020
This is why when test scores of five is referenced it's going to do the calculation and come up with

207
00:13:44,020 --> 00:13:48,770
that number right there and it's going to try to put to work with this guy.

208
00:13:48,890 --> 00:13:50,490
Well this is not part of the array right.

209
00:13:50,500 --> 00:13:55,690
The array ends here but just no real boundaries around there it's not like protected or anything.

210
00:13:55,690 --> 00:14:01,940
So in this case something is going to change and it may be a bad thing you might crash your program.

211
00:14:02,650 --> 00:14:08,620
OK so hopefully this example helps you understand a little bit about the syntax of a raise how to initialize

212
00:14:08,620 --> 00:14:12,100
them how to use them in a little bit more about how they're laid out in memory and some of the issues

213
00:14:12,100 --> 00:14:13,370
that you can have with them.
