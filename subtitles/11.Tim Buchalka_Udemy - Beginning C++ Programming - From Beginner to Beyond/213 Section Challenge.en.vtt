WEBVTT
1
00:00:05.390 --> 00:00:09.510
Hello welcome to the Section 18 challenge on exception handling.

2
00:00:09.590 --> 00:00:12.250
Congratulations on finishing this section.

3
00:00:12.320 --> 00:00:17.550
This challenge is a very straightforward challenge but it's going to be using some interesting techniques.

4
00:00:17.600 --> 00:00:23.450
One of the things that I want you to do in this challenge is to derive your own exception classes from

5
00:00:23.660 --> 00:00:29.480
the standard libraries exception class and then integrate that into the account class and then test

6
00:00:29.480 --> 00:00:30.410
your code.

7
00:00:30.410 --> 00:00:32.060
Now I've got you started here.

8
00:00:32.060 --> 00:00:36.920
I've created a challenge project and again I'm in the Section 18 workspace in the challenge project

9
00:00:37.520 --> 00:00:42.110
and under here I've got all the source code for the account class that we've been working with throughout

10
00:00:42.110 --> 00:00:44.240
the course.

11
00:00:44.360 --> 00:00:48.170
This is the description dark text file which is what we're looking at right now and I'd like to read

12
00:00:48.170 --> 00:00:52.160
through this in a minute and then I'll talk about a different exception classes.

13
00:00:52.160 --> 00:00:58.580
Ok so for this challenge what we want you to do is to integrate your own user defined exception classes

14
00:00:58.580 --> 00:01:04.030
into the account class and count classes are provided for you you can see them over here.

15
00:01:04.490 --> 00:01:11.870
Also the illegal balance exception class already has been created for you but it does not derive from

16
00:01:12.200 --> 00:01:13.670
the Stude exception class.

17
00:01:13.670 --> 00:01:15.160
You have to do that yourself.

18
00:01:15.500 --> 00:01:21.410
What I'd like you to do is derive the illegal balance exception class like I just said from stood exception

19
00:01:21.680 --> 00:01:23.970
and implement the what method.

20
00:01:24.150 --> 00:01:29.900
That what method is that virtual method that returns a character string a C-style string and provide

21
00:01:29.900 --> 00:01:31.650
an exception message there.

22
00:01:31.700 --> 00:01:36.440
Now this exception object should be thrown from the account class constructor.

23
00:01:36.440 --> 00:01:39.410
Whenever we get a negative balance case.

24
00:01:39.410 --> 00:01:43.070
In other words if you try to create an account with a negative balance we want to throw this very much

25
00:01:43.070 --> 00:01:44.730
like what I did in the slides.

26
00:01:45.200 --> 00:01:46.400
So that's one class.

27
00:01:46.400 --> 00:01:52.630
The second class is a class called insufficient funds exception and you can see that right here.

28
00:01:53.030 --> 00:01:59.240
Again I want you to derive this from stood exception and implement the method for it to provide a message.

29
00:01:59.360 --> 00:02:04.190
This exception objects should be thrown if a withdrawal results in a negative balance.

30
00:02:04.190 --> 00:02:05.890
So you're overdrawn.

31
00:02:06.160 --> 00:02:09.650
You should throw this exception object from the accounts withdraw method.

32
00:02:09.860 --> 00:02:10.690
That's it.

33
00:02:10.790 --> 00:02:12.520
Pretty straightforward.

34
00:02:12.590 --> 00:02:18.110
The harder part of this assignment is not so much implementing these classes it's testing them and you

35
00:02:18.110 --> 00:02:19.630
have to do that to your man.

36
00:02:19.630 --> 00:02:23.460
All right so let me go over this illegal balance exception class right here.

37
00:02:23.630 --> 00:02:29.750
There's no CPV fall it's all in the header file and I've created a class called illegal balance exception.

38
00:02:29.750 --> 00:02:33.360
It's got a default constructor and a default destructor.

39
00:02:33.440 --> 00:02:37.580
And I've got those Curley's here you could replace those with equal default if you like.

40
00:02:37.610 --> 00:02:40.600
I think I do that in the solution but you don't have to.

41
00:02:40.610 --> 00:02:41.630
So that's it.

42
00:02:41.630 --> 00:02:48.110
Now what I want you to do is public inheritance here stood exception and then implement the what method.

43
00:02:48.110 --> 00:02:49.840
You'll notice that that's already there.

44
00:02:49.940 --> 00:02:56.480
And if you go to account CGP in the account constructor here on line 3 I'm checking to see if the balance

45
00:02:56.480 --> 00:03:01.180
is less than zero if it is I'm throwing the legal balance exception.

46
00:03:01.400 --> 00:03:02.760
OK so that's part one.

47
00:03:02.800 --> 00:03:07.060
The second part is I want you to create to me go back to my description real quick I want you to create

48
00:03:07.060 --> 00:03:10.610
another class called insufficient funds exception.

49
00:03:10.660 --> 00:03:13.420
Same idea is illegal balance exception.

50
00:03:13.420 --> 00:03:16.760
It's going to be derived publicly from stood exception.

51
00:03:16.960 --> 00:03:21.370
You're going to have your constructor destructor and you're going to implement that what virtual function

52
00:03:21.370 --> 00:03:21.930
again.

53
00:03:22.150 --> 00:03:28.450
And then that exception will be thrown here in the account C-p withdrawal method right here.

54
00:03:28.450 --> 00:03:34.640
So you can see that if the balance goes negative you want to throw that exception object.

55
00:03:34.660 --> 00:03:35.290
OK.

56
00:03:35.380 --> 00:03:37.110
Now where do you catch these things.

57
00:03:37.120 --> 00:03:41.710
Well let's go to our main This is where you want to test your code.

58
00:03:41.710 --> 00:03:46.750
This is where you want to create your checking account objects your savings account objects and so forth

59
00:03:47.050 --> 00:03:49.330
create them with negative balances.

60
00:03:49.330 --> 00:03:55.420
Put 100 dollars into them and then withdraw $200 from a ghetto and insufficient funds exception.

61
00:03:55.420 --> 00:03:57.100
So that's the kind of thing you want to do here.

62
00:03:57.190 --> 00:04:01.750
You want to be sure you do that in a try block and you want to be sure that you're catching those exception

63
00:04:01.750 --> 00:04:03.340
objects here.

64
00:04:03.340 --> 00:04:03.660
OK.

65
00:04:03.670 --> 00:04:05.960
So that's really it is not a lot of code to write.

66
00:04:06.130 --> 00:04:09.890
It's just writing them in precise locations and getting it to work just right.

67
00:04:10.270 --> 00:04:10.560
All right.

68
00:04:10.570 --> 00:04:12.130
So good luck.

69
00:04:12.190 --> 00:04:14.990
I'll see you on the next video where I'll show you my solution.
