1
00:00:05,560 --> 00:00:09,310
This video we'll learn more about the vector container.

2
00:00:09,310 --> 00:00:14,410
We already know a lot about it since we've been using it since very early in the course as you know

3
00:00:14,410 --> 00:00:19,150
in order to use the vector container you have to include the vector header file.

4
00:00:19,240 --> 00:00:22,260
The vector is probably the main workhorse of the SPL.

5
00:00:22,300 --> 00:00:24,490
It's used in a lot of applications.

6
00:00:24,730 --> 00:00:28,710
The vector allows us to create dynamically sized arrays.

7
00:00:28,720 --> 00:00:33,760
The cool thing is that the vector can expand and contract is needed and it's handled automatically by

8
00:00:33,760 --> 00:00:34,980
the SPL.

9
00:00:34,990 --> 00:00:39,700
We don't have to worry about the details but the vector does give us some control as to how it can grow

10
00:00:40,000 --> 00:00:43,840
the vector elements themselves are stored in contiguous memory.

11
00:00:43,840 --> 00:00:49,270
So as the vector expands a new larger area and memories allocated in the current elements are moved

12
00:00:49,270 --> 00:00:55,320
to it like the dude array the vector provides fast direct access in constant time.

13
00:00:56,160 --> 00:01:02,070
It also allows for rapid insertion and deletion at the back of the vector in constant time.

14
00:01:02,070 --> 00:01:07,540
However inserting elements into any other part of the vector other than the back is not as efficient.

15
00:01:07,560 --> 00:01:12,900
It happens in linear time which means that the running time increases nearly with the size of the vector

16
00:01:14,060 --> 00:01:17,950
the vector supports all of the iterators and the iterators may become invalid.

17
00:01:18,110 --> 00:01:23,480
This is especially true when the vector resizes and a new area and memory is allocated for the extra

18
00:01:23,480 --> 00:01:26,710
storage.

19
00:01:26,880 --> 00:01:30,360
In this light we see a diagram of what a simple vector might look like.

20
00:01:30,420 --> 00:01:35,000
We declare VEC as a vector of integers and initialize it to 1 2 and 3.

21
00:01:35,070 --> 00:01:38,160
The vector has a front end to back the front.

22
00:01:38,160 --> 00:01:44,690
In this case is Element 1 and the back is element 3 we typically add elements to the back of the vector

23
00:01:44,700 --> 00:01:46,600
using the pushback method.

24
00:01:48,630 --> 00:01:54,540
So in this case we're adding the element for using pushback and the force added to the back of the vector

25
00:01:55,570 --> 00:02:00,040
we can add elements anywhere in the vector but the back is the location where the addition of elements

26
00:02:00,040 --> 00:02:01,330
is most efficient.

27
00:02:02,260 --> 00:02:07,690
If there's no room and the vector needs to allocate more space it will automatically usually twice the

28
00:02:07,690 --> 00:02:12,610
amount of the current space is allocated and the current elements are moved over to the newly allocated

29
00:02:12,610 --> 00:02:15,440
area and then the new element is placed at the back.

30
00:02:16,300 --> 00:02:20,600
Let's look at a few ways to initialize vectors and then we'll see some of its member methods.

31
00:02:22,370 --> 00:02:27,800
In the first example in this slide I declare vec is a vector of integers and initialize it to 1 2 3

32
00:02:27,800 --> 00:02:29,030
4 and 5.

33
00:02:29,030 --> 00:02:34,670
The second example I declare Veck one is a vector of integers and amusing an overloaded constructor

34
00:02:34,670 --> 00:02:39,360
here to create 10 integers and initialize them all to 100.

35
00:02:39,380 --> 00:02:44,840
Of course the vector supports copy and move semantics for initialisation and assignment in the third

36
00:02:44,840 --> 00:02:51,260
example I'm declaring Stooges as a vector of stood strings and I'm initializing those strings with both

37
00:02:51,650 --> 00:02:53,600
strings and C-style strings.

38
00:02:53,600 --> 00:02:58,260
Vectors also support assignment via an initializer list just like we did with the array.

39
00:02:58,370 --> 00:03:00,890
So let's look at some other methods provided by the vector

40
00:03:03,550 --> 00:03:09,160
again please refer to the C++ as T.L. documentation for more detail on these and other methods.

41
00:03:09,160 --> 00:03:12,110
There's a lot there and that's the place to look for information.

42
00:03:12,160 --> 00:03:13,770
But let's see some other methods.

43
00:03:13,780 --> 00:03:15,110
Let's start with size.

44
00:03:15,130 --> 00:03:18,100
This method returns the number of elements that are in the vector.

45
00:03:18,160 --> 00:03:19,440
That's pretty straightforward.

46
00:03:19,630 --> 00:03:26,020
The capacity method tells us the current capacity of the vector when this capacity is exceeded.

47
00:03:26,020 --> 00:03:31,510
That's when the vector will expand dynamically and the max size tells us what the max size of a vector

48
00:03:31,510 --> 00:03:32,950
would be in our system.

49
00:03:33,250 --> 00:03:35,290
And that's the number of elements that it can hold.

50
00:03:35,290 --> 00:03:37,670
You see this is a really large number.

51
00:03:37,960 --> 00:03:44,260
Vectors also let us access individual elements either using the subscript operator or the dot at method

52
00:03:44,620 --> 00:03:50,470
just as we've seen before the subscript operator does not do any bounds checking and the DOT method

53
00:03:50,470 --> 00:03:51,430
does.

54
00:03:51,430 --> 00:03:58,190
You can see in the example code that Veck at 0 will refer to the one and Veck someone will refer to

55
00:03:58,190 --> 00:03:58,630
the two

56
00:04:01,520 --> 00:04:02,690
as previously mentioned.

57
00:04:02,690 --> 00:04:06,880
The vector allows for efficiently inserting elements at the back of the vector.

58
00:04:06,890 --> 00:04:09,070
This is done with the pushback method.

59
00:04:09,200 --> 00:04:12,080
In this case we have a vector of person objects.

60
00:04:12,230 --> 00:04:18,170
We can create a person P1 named Larry who is 18 years old and we can use the pushback method to insert

61
00:04:18,240 --> 00:04:20,420
P1 at the back of the vector.

62
00:04:20,480 --> 00:04:24,620
Remember all container classes make copies of the elements they store.

63
00:04:24,620 --> 00:04:30,920
So in this case a copy of P1 is made in the second example we're creating an unnamed person object and

64
00:04:30,920 --> 00:04:33,970
adding it to the back of the vector using move semantics.

65
00:04:34,220 --> 00:04:36,950
The last method we haven't seen yet and it's awesome.

66
00:04:36,980 --> 00:04:39,180
It's called emplace back.

67
00:04:39,260 --> 00:04:45,020
This method expects the parameters that would normally be passed into the person constructor and that's

68
00:04:45,020 --> 00:04:45,940
what it does.

69
00:04:45,980 --> 00:04:51,110
It constructs the person object using a person constructor right in place where it's supposed to be

70
00:04:51,110 --> 00:04:52,010
in the vector.

71
00:04:52,190 --> 00:04:56,870
That's really efficient no moves no copies it just puts it right where it's supposed to be.

72
00:04:56,930 --> 00:04:59,300
Use this method it's awesome.

73
00:05:00,500 --> 00:05:04,520
The empty method will return true if the vector is empty and false otherwise.

74
00:05:04,790 --> 00:05:11,120
Just as we saw withstood arrays we can swap two vectors but in the case of vectors the vector elements

75
00:05:11,120 --> 00:05:13,960
have to be the same type but the sizes can be different.

76
00:05:14,770 --> 00:05:20,620
And finally we can use the sort algorithm in any kind of algorithm to sort vectors with iterators to

77
00:05:20,620 --> 00:05:21,460
copy vectors.

78
00:05:21,460 --> 00:05:24,380
We'll see some of those examples in the ID.

79
00:05:24,490 --> 00:05:31,170
So let's see how we can insert elements into a vector at a place other than the back first will create

80
00:05:31,170 --> 00:05:32,910
two vectors of integers.

81
00:05:32,970 --> 00:05:40,200
Vec one VEC to VEC one is one two three four five and vector is 10 20 30 40 and 50.

82
00:05:40,200 --> 00:05:44,810
Now let's say we want to insert some data before the three and Veck 1.

83
00:05:44,860 --> 00:05:50,540
First we need an iterator to point to the location of the vector we want to insert the data before.

84
00:05:50,550 --> 00:05:57,260
In this case the three we can use the find algorithm to easily find the three as we've already seen.

85
00:05:57,480 --> 00:06:04,020
Once the iterator is pointing to the three in the one then we could call the insert method and pass

86
00:06:04,080 --> 00:06:07,610
in the iterator it and the element we want to insert before it.

87
00:06:07,620 --> 00:06:09,410
In this case the 10.

88
00:06:09,540 --> 00:06:10,530
That's it.

89
00:06:10,530 --> 00:06:14,880
Now Veck 1 contains 1 to 10 3 4 and 5.

90
00:06:14,940 --> 00:06:17,350
So we inserted the 10 before the 3.

91
00:06:17,400 --> 00:06:23,020
That was pretty easy but we can also insert a sequence of elements how with iterators.

92
00:06:23,100 --> 00:06:29,070
Let's insert the entire contents of VEC two before the four in VEC one.

93
00:06:29,100 --> 00:06:35,160
We first find the four and get an iterator to it we'll call it I-T then we can use the insert algorithm

94
00:06:35,160 --> 00:06:40,920
and pass in the iterator I-T that we want to insert before and the two iterators that will provide the

95
00:06:40,920 --> 00:06:43,960
sequence of elements from vector to that we want to insert.

96
00:06:44,040 --> 00:06:45,640
In this case all a victim.

97
00:06:45,720 --> 00:06:46,410
That's it.

98
00:06:46,410 --> 00:06:48,980
Now Veck 1 will be 1 to 10.

99
00:06:48,990 --> 00:06:52,870
3 10 20 30 40 50 4 and 5.

100
00:06:53,040 --> 00:07:00,440
We inserted a copy of Veck two before the four very powerful and easy to do.

101
00:07:00,930 --> 00:07:05,790
All right so let's head over to the idea will see these examples and we'll see some more complex examples

102
00:07:05,790 --> 00:07:06,750
as well.

103
00:07:07,930 --> 00:07:09,310
OK so I'm backing the idea.

104
00:07:09,310 --> 00:07:15,580
I mean the Section 20 workspace in the vector project and this project has a lot of examples I really

105
00:07:15,580 --> 00:07:20,890
believe that the best way to learn the CEO is through the examples are real example driven approach

106
00:07:21,330 --> 00:07:25,230
maybe a little boring sometimes as I'm giving you example after example after example.

107
00:07:25,360 --> 00:07:27,600
But I think it's really the best way to learn it.

108
00:07:27,640 --> 00:07:29,490
I've got a lot of examples here.

109
00:07:29,500 --> 00:07:31,140
I'm going to go through them pretty quickly.

110
00:07:31,270 --> 00:07:35,330
So please feel free to pause the video look at the example and then continue again.

111
00:07:35,410 --> 00:07:36,430
Let's get started.

112
00:07:36,460 --> 00:07:41,440
I'm including IO stream vector and algorithm obviously I'm going to use vectors in this example and

113
00:07:41,440 --> 00:07:43,020
we're going to use some algorithms as well.

114
00:07:43,150 --> 00:07:47,960
And I'm going to use integers mostly but I'm going to use this person class in a few places.

115
00:07:48,810 --> 00:07:53,040
It's the same kind of person class we've used before a person has a name and an age it's a string and

116
00:07:53,040 --> 00:07:54,150
an integer.

117
00:07:54,150 --> 00:07:58,780
I've also overloaded the stream insertion operator just to make life easier.

118
00:07:59,070 --> 00:08:00,930
I've got a default constructor.

119
00:08:00,960 --> 00:08:02,960
I've got an overloaded constructor.

120
00:08:03,480 --> 00:08:12,810
And remember when we're using our own classes with the SBL always always overload less than and the

121
00:08:12,810 --> 00:08:14,250
equality operator.

122
00:08:14,700 --> 00:08:20,380
Those are the two boolean operators that are being used by the as T.L. on your own objects.

123
00:08:20,460 --> 00:08:25,410
So that's it I'm comparing two people and I'm comparing the the one is less than the other.

124
00:08:25,410 --> 00:08:32,070
I'm not really using them in this demo but it's good habit to do as far as the operator.

125
00:08:32,130 --> 00:08:34,170
The insertion operator is right here.

126
00:08:34,350 --> 00:08:35,620
Same as we've always done.

127
00:08:35,640 --> 00:08:39,770
And then what I did was I created these two display functions.

128
00:08:39,840 --> 00:08:44,750
One is called display two and one is just called display and want to use display mostly.

129
00:08:45,010 --> 00:08:46,390
But I'm going to use display too.

130
00:08:46,440 --> 00:08:49,590
And the reason I did display two just so you can see a different way to write this.

131
00:08:49,590 --> 00:08:53,590
Of course I could use a range base for loop to do this and I'm doing that right here.

132
00:08:54,090 --> 00:08:57,940
But I wanted you to see the For Each rhythm we've seen this before as well.

133
00:08:57,990 --> 00:09:03,100
So give me a vector of integers and I'm going to do for each.

134
00:09:03,180 --> 00:09:07,170
What's my sequence from the beginning to the end of the vector that was passed in.

135
00:09:07,170 --> 00:09:14,070
So in other words the entire vector at each iteration this lambda expression is going to be called X

136
00:09:14,070 --> 00:09:18,910
will be passed into it X will be each one of those elements in that sequence.

137
00:09:19,070 --> 00:09:20,400
He says despite.

138
00:09:20,820 --> 00:09:24,030
So it's really the same effect as arranged based Foreland.

139
00:09:24,180 --> 00:09:29,130
This function here I wrote as a template function because sometimes I want to be able to print vectors

140
00:09:29,130 --> 00:09:29,690
of integers.

141
00:09:29,710 --> 00:09:32,680
Other times I want to be able to print vectors of persons.

142
00:09:32,730 --> 00:09:35,760
So it's nice just to have one function to let you do it.

143
00:09:35,760 --> 00:09:38,000
Here's my template parameter right here t.

144
00:09:38,070 --> 00:09:44,340
So I can pass in a vector of anything and I can loop through here using my range based for loop and

145
00:09:44,340 --> 00:09:47,400
the auto takes care of figuring out the type for me.

146
00:09:47,400 --> 00:09:49,050
So it makes life really really easy.

147
00:09:49,170 --> 00:09:53,240
OK so let's start going through these examples the first few are going to be really straightforward

148
00:09:53,250 --> 00:09:54,610
I'm sure you've seen them before.

149
00:09:54,630 --> 00:09:58,410
What I've done is about ready run this and the output is over here on the right side you can see here

150
00:09:58,410 --> 00:09:59,270
in the console.

151
00:09:59,400 --> 00:10:02,740
But what we'll do is we'll go through these examples and then we'll look at the console.

152
00:10:02,880 --> 00:10:05,260
And like I said the first few are really really straightforward.

153
00:10:05,490 --> 00:10:11,040
So let's look at this first one I've got Veck as a vector of integers and I'm initializing it to 1 through

154
00:10:11,040 --> 00:10:16,550
3 4 and 5 and I'm calling that display function that's the template function.

155
00:10:16,850 --> 00:10:20,250
It's going to display the vector and you can see the vector being displayed right appear.

156
00:10:20,300 --> 00:10:21,700
One two three four and five.

157
00:10:21,710 --> 00:10:26,050
Now what I'm doing is remember vector has already been initialized so right now I'm using assignment.

158
00:10:26,050 --> 00:10:31,020
This is assignment using initialization which is really really cool and handy.

159
00:10:31,040 --> 00:10:35,900
So now vec is two four five six and I'm displaying it using that other display function.

160
00:10:35,930 --> 00:10:41,520
So here I am displaying Veck again and you can see vec is now 2 4 5 6.

161
00:10:41,690 --> 00:10:45,090
And then in this case I'm creating one.

162
00:10:45,120 --> 00:10:50,390
It's an object and it's also a vector of integers but I'm not using the Curley's here right so I'm not

163
00:10:50,390 --> 00:10:53,780
using an initialization this I'm using an overloaded constructor.

164
00:10:53,780 --> 00:10:56,260
That's part of the vector class.

165
00:10:56,360 --> 00:10:58,130
This tells me how many do I want.

166
00:10:58,130 --> 00:11:00,770
This tells me what is each one going to be.

167
00:11:00,770 --> 00:11:07,750
So this is going to create 10 100s and on display at Quon you can see them right up here all 10 100.

168
00:11:08,030 --> 00:11:12,440
There are other constructors is a lot of different ways to do that refer to the documentation.

169
00:11:12,440 --> 00:11:14,940
Some of them are really interesting.

170
00:11:14,960 --> 00:11:17,300
These are the ones that I use all the time.

171
00:11:17,300 --> 00:11:23,210
OK so now let's look at test to test two is all about the size the capacity so we understand how this

172
00:11:23,210 --> 00:11:23,990
works.

173
00:11:23,990 --> 00:11:30,860
So what I'm doing here is I'm saying vec is again a vector of integers 1 2 3 4 5 I'm displaying it because

174
00:11:30,860 --> 00:11:35,490
he's displaying right here that I'm asking what's the size of the vector.

175
00:11:35,660 --> 00:11:39,060
What's the max size of the vector and what's the capacity of the vector.

176
00:11:39,190 --> 00:11:41,420
So he could see here the size is five.

177
00:11:41,420 --> 00:11:46,760
I've got five elements in there right now the max size is a really big number that's how many elements

178
00:11:46,760 --> 00:11:50,920
that vector can hold and the capacity is five.

179
00:11:50,920 --> 00:11:52,150
In this case.

180
00:11:52,220 --> 00:11:53,120
What does that mean.

181
00:11:53,150 --> 00:11:58,850
That means that if I exceed that capacity this vector will increase in size right.

182
00:11:58,850 --> 00:12:03,590
In other words the SBL is going to allocate space for a larger vector.

183
00:12:03,590 --> 00:12:06,860
Remember it's all contiguous in memory and copy stuff into it.

184
00:12:06,890 --> 00:12:09,480
So that's exactly what I'm going to force right now.

185
00:12:09,740 --> 00:12:15,080
I'm going to push back six so I'm going to add six to the back of this vector is going to be a 6 right

186
00:12:15,080 --> 00:12:21,410
in there now that I'm going to display it again and then display the size Max sizing capacity we would

187
00:12:21,410 --> 00:12:24,900
expect Max sized not to change right now because I'm not doing anything else.

188
00:12:25,030 --> 00:12:27,080
So I'm pushing it back and displaying it.

189
00:12:27,080 --> 00:12:30,760
So right here you can see the six at the end here.

190
00:12:30,980 --> 00:12:34,740
What's the size of the vector six max size is the same.

191
00:12:34,910 --> 00:12:36,770
But look at the vector capacity here.

192
00:12:36,770 --> 00:12:37,840
Now it's 10.

193
00:12:37,850 --> 00:12:43,370
This is pretty typical whenever you exceed the capacity to do it'll double.

194
00:12:43,640 --> 00:12:49,700
So the next time the capacity will be 20 and then 40 and then 80 and so forth that's a very very typical

195
00:12:49,700 --> 00:12:50,600
behavior.

196
00:12:50,600 --> 00:12:55,080
Keep that in mind because if you've got ten thousand elements in here and you add that ten thousand

197
00:12:55,100 --> 00:12:59,870
one it's going to go to 20000 big when you only maybe need 10000 and a little bit.

198
00:12:59,870 --> 00:13:02,490
So there's ways to help that.

199
00:13:02,630 --> 00:13:07,500
And I'll show you a couple we've got this method called shrink to fit which is pretty cool and this

200
00:13:07,500 --> 00:13:09,510
has came about in see Puss Puss 11.

201
00:13:09,770 --> 00:13:17,180
So if I call shrink to fit it will shrink the amount of storage allocated to exactly the vector size.

202
00:13:17,180 --> 00:13:22,490
And so remember right now we had capacity 10 that I called shrink to fit and I'm displaying it again

203
00:13:22,490 --> 00:13:24,100
and see what's happening here.

204
00:13:24,110 --> 00:13:27,100
Notice it now the capacity is exactly six.

205
00:13:27,110 --> 00:13:31,310
There's one more method I wanted to talk about we don't use it very often but some it's nice to know

206
00:13:31,310 --> 00:13:34,140
that it's there it's reserve 100.

207
00:13:34,160 --> 00:13:40,790
What you're doing here is you're reserving 100 spaces for elements contiguous in memory and of displaying

208
00:13:40,790 --> 00:13:42,940
this memory is a vector again here.

209
00:13:43,190 --> 00:13:46,790
And you can see right here the only differences right there.

210
00:13:46,790 --> 00:13:53,780
This vector now has a capacity of 100 so it won't expand until it hits that hundred in one element.

211
00:13:53,780 --> 00:13:58,850
All right so now let's take a look at test three I'll scroll both of these up again I've got my vec.

212
00:13:58,850 --> 00:14:00,150
One two three four five.

213
00:14:00,220 --> 00:14:01,200
I'm displaying it.

214
00:14:01,220 --> 00:14:06,080
You can see it displaying right here and here all I'm doing is using the subscript operator and the

215
00:14:06,080 --> 00:14:12,560
dot at Methot remember the subscript operator does no bounds checking the AT method does do bounds checking.

216
00:14:12,560 --> 00:14:16,060
So if we exceed the bounds we get an exception.

217
00:14:16,070 --> 00:14:20,910
So all I'm doing is I'm putting 100 here and I'm putting 200 here and I'm displaying the vector.

218
00:14:20,930 --> 00:14:23,610
And you can see that's exactly what we expect.

219
00:14:23,870 --> 00:14:25,910
So let's move on to test for.

220
00:14:26,090 --> 00:14:27,970
And again I know these are a lot of examples.

221
00:14:27,980 --> 00:14:32,710
But after doing this for many many years I think this is the best way to really learn this for test

222
00:14:32,720 --> 00:14:36,350
for We've created Stooges is a vector of person objects.

223
00:14:36,350 --> 00:14:39,370
Remember we created that person class earlier.

224
00:14:39,460 --> 00:14:45,570
One is Larry and he's 18 that's a person that's display Stooges right now it should be empty.

225
00:14:45,590 --> 00:14:45,890
Right.

226
00:14:45,920 --> 00:14:47,060
There it is empty.

227
00:14:47,060 --> 00:14:50,580
Now I'm going to push back the one that's Larry and display it again.

228
00:14:50,600 --> 00:14:54,760
So now you can see that the Stooges vector has just one person in it.

229
00:14:54,770 --> 00:14:57,650
Larry in this case I'm going to push back.

230
00:14:57,740 --> 00:15:00,100
Mo mo Mo's 25.

231
00:15:00,230 --> 00:15:05,980
I'm not creating a named object here so this is going to use move semantics and it's going to push the

232
00:15:06,020 --> 00:15:10,200
back when I display again you can see that now I've got Larry and Moe.

233
00:15:10,370 --> 00:15:15,530
And then the last example I'm using the place back and this is awesome as I said in the slides.

234
00:15:15,930 --> 00:15:20,970
What we do here is we pass in the arguments that we put a passed into a construct you can see right

235
00:15:20,970 --> 00:15:25,980
here right the name and the age and what it's going to do behind the scenes is actually call the constructor

236
00:15:25,980 --> 00:15:29,220
for us and put curly at the back.

237
00:15:29,220 --> 00:15:33,310
And then when I display again you can see I've got Larry Moe and Curly.

238
00:15:33,360 --> 00:15:35,520
Let's move on to test five.

239
00:15:35,700 --> 00:15:42,150
In this case I've got the Stooges vector again right here and I initialize it till they remount curly

240
00:15:42,480 --> 00:15:45,380
and I'm displaying it and you can see it displaying right there.

241
00:15:45,390 --> 00:15:47,650
You can see Larry Moe and Curly being displayed.

242
00:15:47,820 --> 00:15:53,040
We can have the front method and we have a back method the front method returns a reference to the front

243
00:15:53,400 --> 00:15:59,640
of the front element of the vector the back to the back element while the front one is Larry and the

244
00:15:59,640 --> 00:16:00,530
back one is curly.

245
00:16:00,530 --> 00:16:02,070
You can see front and back.

246
00:16:02,230 --> 00:16:06,490
So when we display that we can see front is Larry back is curly.

247
00:16:06,600 --> 00:16:12,860
We also have the pop back and it removes the element from the back of the vector for vectors.

248
00:16:12,960 --> 00:16:16,830
When we insert and delete from the back it's very very efficient.

249
00:16:16,980 --> 00:16:19,150
And that's typically how we use vectors.

250
00:16:19,200 --> 00:16:24,420
So we're going to get rid of curly in this case and then display the Stooges and you can see here there

251
00:16:24,420 --> 00:16:26,360
and moare there Curley's gone.

252
00:16:26,370 --> 00:16:32,240
So here in test six there's my vector of integers 1 2 3 4 5 and I'm displaying it right there.

253
00:16:32,760 --> 00:16:36,100
I can use the clear method to get rid of everything in the vector.

254
00:16:36,150 --> 00:16:39,230
So I just removed everything and I'm displaying the vector right here.

255
00:16:39,290 --> 00:16:40,410
It's empty.

256
00:16:40,440 --> 00:16:44,570
I'm assigning those 10 integers to the vector and displaying it again.

257
00:16:44,760 --> 00:16:50,010
You can see that being displayed right over here and now what I want to do is I want to use the erase

258
00:16:50,010 --> 00:16:53,270
method to erase a piece of this vector.

259
00:16:53,490 --> 00:16:55,580
So I'm going to say Veck Doddie race.

260
00:16:55,740 --> 00:17:00,750
And where do I want to start at the beginning where do I want to stop right before that guy.

261
00:17:00,780 --> 00:17:01,950
Begin plus two.

262
00:17:01,950 --> 00:17:03,430
So here's VEC again.

263
00:17:03,570 --> 00:17:04,950
Here's Veck begin plus two.

264
00:17:04,950 --> 00:17:08,220
So what is going to do is going to get rid of those two elements.

265
00:17:08,700 --> 00:17:14,670
And then when I display you can see right here the one in the two are gone great Now this example is

266
00:17:14,670 --> 00:17:17,760
a little bit more complicated but it's really straightforward as well.

267
00:17:17,820 --> 00:17:19,460
And just using a while loop here.

268
00:17:19,590 --> 00:17:24,840
I'm assigning one through tend to the vector again and then I'm getting an iterator to the beginning

269
00:17:24,840 --> 00:17:32,700
of it and I'm calling it I-T and all I'm doing is moving along that vector and if I see an even number

270
00:17:33,000 --> 00:17:35,010
I'm deleting it or erasing it.

271
00:17:35,400 --> 00:17:43,200
So in this case while I t is not equal to VEC and if what I'm pointing to with the iterator is even

272
00:17:43,860 --> 00:17:45,520
then I'm erasing it.

273
00:17:45,630 --> 00:17:49,980
Now I don't want to increase the iterator here right because I just erased is that would kind of skip

274
00:17:49,980 --> 00:17:50,630
items.

275
00:17:50,750 --> 00:17:54,120
Otherwise I do want to increase the iterator because I didn't see an even number.

276
00:17:54,210 --> 00:17:56,030
And then when I'm done I just want to display that.

277
00:17:56,040 --> 00:17:57,610
And you can see right there.

278
00:17:57,870 --> 00:18:01,440
Vectors even numbers are all gone for test seven.

279
00:18:01,440 --> 00:18:04,380
We've got two vectors and all we're going to do is swap them.

280
00:18:04,500 --> 00:18:05,590
So here's VEC one.

281
00:18:05,740 --> 00:18:10,340
Here's is to displaying both of them and you can see them right here.

282
00:18:10,650 --> 00:18:13,030
Then I'm just saying to swap Veck one.

283
00:18:13,050 --> 00:18:16,510
And I'm displaying those two again and you can see that they've swapped.

284
00:18:16,610 --> 00:18:20,640
What's cool about vectors is they both have to be the same type in this example.

285
00:18:20,640 --> 00:18:26,040
But they can be different sizes so it's a little different from the array that we saw intestate.

286
00:18:26,310 --> 00:18:28,860
What we're doing is we're sorting.

287
00:18:29,220 --> 00:18:35,220
So we've got a vector of a bunch of integers they are unsorted displaying that guy right here and you

288
00:18:35,220 --> 00:18:37,170
can see test Raeder here testate.

289
00:18:37,170 --> 00:18:40,920
So that's displaying the vector I'm calling the sort algorithm.

290
00:18:40,920 --> 00:18:47,610
Veck one 1. again VEC want and are my iterators are the whole vector and then displaying it again and

291
00:18:47,610 --> 00:18:48,400
it's sorted.

292
00:18:48,570 --> 00:18:51,440
We can use reverse to sort it in reverse.

293
00:18:51,570 --> 00:18:53,620
Let's take a look at this one this is really cool.

294
00:18:53,640 --> 00:18:57,270
This is one of my misspelled that right here instructs.

295
00:18:57,270 --> 00:19:02,960
This is one of my favorite insert or she use is called the back inserter.

296
00:19:03,240 --> 00:19:05,310
So Michelle what's going on here.

297
00:19:05,340 --> 00:19:11,370
What we want to do is we've got Veck one which is one two three four and five and we've got Vektor which

298
00:19:11,370 --> 00:19:13,130
is 10 and 20.

299
00:19:13,140 --> 00:19:18,600
So what I want to do is I want to basically insert one two three four and five right after the 10 and

300
00:19:18,600 --> 00:19:19,350
20.

301
00:19:19,350 --> 00:19:21,470
Now we can do with this a whole bunch of different ways.

302
00:19:21,480 --> 00:19:26,430
But I wanted to show you the back inserter because it's a really really cool inserter to use.

303
00:19:26,460 --> 00:19:30,060
First thing we do is this display the two vectors affect one vector.

304
00:19:30,060 --> 00:19:32,500
Remember we're in test 9 so we're right here.

305
00:19:32,730 --> 00:19:34,500
We just displayed them.

306
00:19:34,500 --> 00:19:42,120
Now I'm going to use the copy algorithm put in we're going to copy one when a copy Veck one from Veck

307
00:19:42,120 --> 00:19:47,120
one began to VEC one and some copying the entire vector one.

308
00:19:47,520 --> 00:19:56,010
But where my copying it to vector to and I'm using this guy right here which is a really cool output

309
00:19:56,010 --> 00:20:01,980
iterator called back inserter and what it'll do is it'll insert everything that's passed into it based

310
00:20:01,980 --> 00:20:03,670
on vectors to what it's going to do.

311
00:20:03,690 --> 00:20:09,240
Remember the sequence we're going to get is every integer in Veck one here that's what we're saying.

312
00:20:09,240 --> 00:20:13,200
Each one of those is going to be passed into the back inserter and it's going it into the back of Veck

313
00:20:13,200 --> 00:20:13,740
too.

314
00:20:13,810 --> 00:20:18,450
So when I display Veck wanted to again the what happened right here.

315
00:20:18,470 --> 00:20:19,730
See the 10 and the 20.

316
00:20:19,780 --> 00:20:21,760
Now you see the one two three four and five.

317
00:20:21,790 --> 00:20:23,690
This is really cool.

318
00:20:23,740 --> 00:20:29,940
Let's do the same thing now except that's only copy if the elements are even.

319
00:20:29,950 --> 00:20:33,430
So in order to do that we can start from scratch right here.

320
00:20:33,640 --> 00:20:42,350
So here's my Veck one and two I'm displaying both of them you can see them being displayed right here

321
00:20:42,820 --> 00:20:47,480
and then I'm saying copy if this is a little different from copy this as a predicate.

322
00:20:47,490 --> 00:20:51,280
I'm going to copy from Veck one again to.

323
00:20:51,520 --> 00:20:52,130
So sorry.

324
00:20:52,180 --> 00:20:55,810
Let me say that again I'm going to copy from Veck one began to VEC one.

325
00:20:55,820 --> 00:21:03,100
And that's why I'm copying from in other words the entire vector 1 and I'm copying it to vector 2 using

326
00:21:03,100 --> 00:21:04,700
this back inserter.

327
00:21:04,720 --> 00:21:05,920
Now we're all on a copy.

328
00:21:05,920 --> 00:21:08,680
That's where the predicate comes in and we're doing it with a lambda.

329
00:21:08,680 --> 00:21:10,810
So what does that say even.

330
00:21:10,870 --> 00:21:14,520
Only right to zero.

331
00:21:14,590 --> 00:21:18,460
So even only then I'm displaying these two guys again.

332
00:21:18,610 --> 00:21:22,490
You can see right here I'm displaying VEC one hasn't changed but look at Vector.

333
00:21:22,630 --> 00:21:28,490
It had a tenant of 20 but now it has the to the for the 68 and the 10 that came from Veck 1.

334
00:21:28,510 --> 00:21:34,330
These two guys the back inserter and the copy in copy if really get to know those things and if you're

335
00:21:34,330 --> 00:21:39,790
ever in a technical interview or a job interview and you're asked one of these questions blow the person

336
00:21:39,790 --> 00:21:41,980
away by using this you'll get the job.

337
00:21:41,980 --> 00:21:44,170
Trust me I do that all the time.

338
00:21:44,210 --> 00:21:49,900
Just a couple of left here test 10 is a really interesting one we're going to use the transform algorithm

339
00:21:49,900 --> 00:21:50,690
right here.

340
00:21:50,890 --> 00:21:55,510
And the idea here is I've got these two vectors and I want to transform over both ranges.

341
00:21:55,510 --> 00:22:02,260
So what I want to do is I want to transform over the ranges so I want the one in the 10 and the two

342
00:22:02,260 --> 00:22:07,690
in the 20 and the three in the 30 in the four in the 40 and the 5 in the 50 being handled at the same

343
00:22:07,690 --> 00:22:08,340
time.

344
00:22:08,350 --> 00:22:13,520
So this is what's going on here I'm using transform and I'm starting at Veck Wannop began.

345
00:22:13,530 --> 00:22:19,090
And I'm going all the way to the end of Veck one and I'm just starting at Vector began.

346
00:22:19,090 --> 00:22:22,980
You don't have to say the end here because it's only going to do this five times.

347
00:22:22,970 --> 00:22:24,970
This guy could be really long.

348
00:22:24,970 --> 00:22:26,170
So what's going to happen.

349
00:22:26,170 --> 00:22:32,860
Well I'm going to use my back inserter and insert the results of this into Veck 3 which is empty but

350
00:22:32,860 --> 00:22:34,020
what am I inserting.

351
00:22:34,210 --> 00:22:35,410
Well that's the really cool part.

352
00:22:35,410 --> 00:22:40,210
This is going to be called this lambda here will be called with both the one in between the two in the

353
00:22:40,210 --> 00:22:41,120
20.

354
00:22:41,170 --> 00:22:46,570
So that would be X and Y and all I'm doing is multiplying them and then I'm putting those back into

355
00:22:46,690 --> 00:22:48,910
Veck 3 using this back inserter.

356
00:22:48,940 --> 00:22:53,610
So when I display Veck three you could see right here this is test 10.

357
00:22:53,620 --> 00:22:57,520
Check it out 10 40 91 62 50 What is that.

358
00:22:57,520 --> 00:22:59,530
Well that's one times ten is ten.

359
00:22:59,560 --> 00:23:03,100
Two times twenty is forty three times 30 is 90.

360
00:23:03,100 --> 00:23:04,460
You can see what's happening here.

361
00:23:04,470 --> 00:23:05,760
This is really really neat.

362
00:23:05,950 --> 00:23:12,100
We actually did a challenge that was similar to this when we did a raise way back when you could tweak

363
00:23:12,100 --> 00:23:13,940
that to make this like a one liner.

364
00:23:14,110 --> 00:23:17,110
It's not exactly the same but you can certainly get it to work that way.

365
00:23:17,230 --> 00:23:17,810
All right.

366
00:23:17,830 --> 00:23:22,700
And the last one is inserting and that would be test 11.

367
00:23:22,940 --> 00:23:24,560
And that's where we're at right here.

368
00:23:24,590 --> 00:23:31,470
We've got Veck 1 and VEC 2 VEC 1 is 1 through 10 and 2 is 100 200 300 400.

369
00:23:31,610 --> 00:23:32,840
And what do we want to do.

370
00:23:32,840 --> 00:23:40,170
We want to insert the contents of vector 2 into Veck 1 before that 5 right here.

371
00:23:40,240 --> 00:23:42,450
So here I'm displaying the two vectors.

372
00:23:42,520 --> 00:23:46,350
You can see them right here just as we would expect.

373
00:23:46,360 --> 00:23:48,870
So how do I do this while I have to use an iterator to do this.

374
00:23:48,880 --> 00:23:53,860
Remember it's not as efficient to insert things into the center of a vector as it is on the back of

375
00:23:53,860 --> 00:23:55,660
the vector back is really efficient.

376
00:23:55,810 --> 00:24:04,540
So what I'm doing here is I'm finding that 5 in Veck one right begin and the entire vector I'm finding

377
00:24:04,540 --> 00:24:10,680
the 5 and I get back an iterator if the iterator is not equal to the end I found the 5.

378
00:24:10,690 --> 00:24:13,190
Otherwise I display this.

379
00:24:13,600 --> 00:24:18,820
So in this case I did find the five and I'm outputting inserting You can see that right here.

380
00:24:19,060 --> 00:24:22,810
And then what I'm calling is I'm calling Veck one dot insert.

381
00:24:22,990 --> 00:24:28,660
I'm passing in the iterator and I'm passing the sequence of elements I want to iterate to insert rather

382
00:24:28,660 --> 00:24:31,320
the entire vector too.

383
00:24:31,450 --> 00:24:36,560
So what that's going to do is it's going to insert all of VEC to be for the five.

384
00:24:36,670 --> 00:24:39,670
And you can see right here one two three four.

385
00:24:39,700 --> 00:24:43,440
Then there's Veck two and then five six seven eight and 10.

386
00:24:43,480 --> 00:24:45,460
So that covers this lecture.

387
00:24:45,460 --> 00:24:47,380
There's a lot here to understand.

388
00:24:47,380 --> 00:24:49,200
Please take your time going through this.

389
00:24:49,270 --> 00:24:52,330
Pause the video go back try some examples.

390
00:24:52,330 --> 00:24:54,400
Make these your own and really learn from this.

391
00:24:54,400 --> 00:24:55,650
That's the best way to do it.
