WEBVTT
1
00:00:05.180 --> 00:00:10.530
In this video I'd like to implement a class template for an Array class but this is going to be a little

2
00:00:10.530 --> 00:00:14.760
bit more complicated than anything we've done before but I'm sure you'll be able to follow along if

3
00:00:14.760 --> 00:00:16.520
you've been following along with the course.

4
00:00:16.680 --> 00:00:21.220
I'm in the Section 20 workspace and I'm in the class template a rate project.

5
00:00:21.390 --> 00:00:28.000
Now I've started this a little bit already and the idea here is we'd like to create an array class ok

6
00:00:28.020 --> 00:00:35.460
not an array raw array and not a dynamic array just a class Array and eventually we want it to be of

7
00:00:35.490 --> 00:00:38.580
any size and of any type that would be pretty cool.

8
00:00:38.580 --> 00:00:41.020
And we want this to be a fixed size array.

9
00:00:41.340 --> 00:00:44.930
And basically it would be a replacement for using a raw array.

10
00:00:45.120 --> 00:00:51.980
C++ already has this for us and C plus plus 11 we have an array class in the standard template library.

11
00:00:52.080 --> 00:00:53.980
And I'll talk about that in a couple of videos.

12
00:00:54.060 --> 00:00:58.370
But let's see how we could implement the beginnings of this if we can really learn from it.

13
00:00:58.380 --> 00:01:02.570
So we want to we want to have an array of something right.

14
00:01:02.570 --> 00:01:06.690
In this case this just stick to integers and then later on what we'll do is we'll make this generic

15
00:01:07.330 --> 00:01:10.060
you raise a fixed size and that fix sizes.

16
00:01:10.080 --> 00:01:11.520
And and I've got this end right here.

17
00:01:11.520 --> 00:01:15.720
None of this will compile yet but I just want to get this point across here.

18
00:01:15.750 --> 00:01:20.590
The question is how do we get this end while the user knows how big the array needs to be let's say

19
00:01:20.590 --> 00:01:23.350
it's 10 integers or 20 integers or 100 integers.

20
00:01:23.550 --> 00:01:27.450
They could pass that in through a constructor argument right.

21
00:01:27.450 --> 00:01:33.690
The problem with that is that the compiler needs to know what the value of N is right here in order

22
00:01:33.690 --> 00:01:35.130
to create this array.

23
00:01:35.130 --> 00:01:42.570
Now we're not doing something like using a pointer and creating a new array of integers like we did

24
00:01:42.570 --> 00:01:44.120
before we're not doing that.

25
00:01:44.130 --> 00:01:45.450
That's not what I want to do.

26
00:01:45.450 --> 00:01:50.850
I want to create it on the stack so the compiler needs to know the value of that N and it can't know

27
00:01:50.850 --> 00:01:55.540
that if we pass it in through a constructor argument because it could be a variable could be any value.

28
00:01:55.740 --> 00:02:00.010
So one of the first things we want to do is figure out how to do this.

29
00:02:00.030 --> 00:02:04.570
So I want to be able to create an array class and let me show you the way I want to do it.

30
00:02:04.650 --> 00:02:05.850
I want to do something like this.

31
00:02:05.850 --> 00:02:08.790
I want to be able to say Give me an array.

32
00:02:09.090 --> 00:02:10.730
Let's say it's a r r.

33
00:02:10.740 --> 00:02:12.660
Right now it's an array of integers by default.

34
00:02:12.660 --> 00:02:15.740
You can see right here and I'll just do that.

35
00:02:15.750 --> 00:02:18.380
Now that's not good enough because there's no size information.

36
00:02:18.390 --> 00:02:22.620
But if I can do something like that that's pretty cool.

37
00:02:22.620 --> 00:02:27.940
So I can pass in the size of the array as a template parameter.

38
00:02:28.320 --> 00:02:29.220
Well how do we do that.

39
00:02:29.220 --> 00:02:32.200
Everything we've seen so far has been type parameters right.

40
00:02:32.340 --> 00:02:36.170
Well it's possible to have non type template parameters.

41
00:02:36.480 --> 00:02:37.980
And let me show you how that works.

42
00:02:38.160 --> 00:02:43.320
And basically what we're doing here is we just have a regular array class is going to constructor default

43
00:02:43.320 --> 00:02:45.950
constructor is a constructor with a initial value.

44
00:02:46.080 --> 00:02:51.210
So what we're doing here is just setting all the values of the array Tibet value a method called Phil

45
00:02:51.210 --> 00:02:55.290
which will just change all those array elements to whatever value was passed in here.

46
00:02:55.290 --> 00:02:58.050
Then I've got a couple of more methods and I'll talk about in a little bit.

47
00:02:58.050 --> 00:03:04.630
So first thing first let's make this a re class a template class.

48
00:03:04.650 --> 00:03:13.720
So what we can do is we can come up here and we could say template and now we've got our template parameters

49
00:03:13.720 --> 00:03:15.750
here right now what do we do here.

50
00:03:15.770 --> 00:03:19.400
We're not passing in a type will do that later when we make this a generic type.

51
00:03:19.450 --> 00:03:25.170
But what we want here is the size of the array so we can supply and write here.

52
00:03:25.180 --> 00:03:28.250
Now when I use the syntax that I use earlier I've got my end.

53
00:03:28.270 --> 00:03:29.480
That's pretty cool.

54
00:03:29.500 --> 00:03:35.380
So that's how we get the end the user provides the end at compile time the compiler can actually create

55
00:03:35.380 --> 00:03:36.810
that array.

56
00:03:36.820 --> 00:03:40.190
Now we've got a friend function here that just used to display the array.

57
00:03:40.270 --> 00:03:44.050
And in this case here it needs to know what that end is.

58
00:03:44.050 --> 00:03:46.130
So I was going to put an end right in here.

59
00:03:46.420 --> 00:03:48.300
So he needs that template premiÃ¨re.

60
00:03:48.310 --> 00:03:52.710
Now as I come down here none of this code really needs to be changed.

61
00:03:52.720 --> 00:03:56.200
There might be a couple of new things that you haven't seen before this one here I don't know if we

62
00:03:56.200 --> 00:04:02.860
ever overloaded the subscript operator but we're doing it right here and it's the subscript operator

63
00:04:02.860 --> 00:04:03.040
right.

64
00:04:03.040 --> 00:04:08.560
The two square brackets so that we can use it as array indexing and all we're doing is returning a reference

65
00:04:08.560 --> 00:04:10.220
so that we're able to change as well.

66
00:04:10.420 --> 00:04:16.010
So now let's go down to the main and see how we can actually use this.

67
00:04:16.070 --> 00:04:17.960
And here's a couple of examples now.

68
00:04:18.060 --> 00:04:19.910
All right the rest of this in a little bit.

69
00:04:19.910 --> 00:04:22.680
But take a look at how useful this array is.

70
00:04:23.590 --> 00:04:26.440
Here I'm creating an array of five integers.

71
00:04:26.440 --> 00:04:28.240
These are all integers right now right.

72
00:04:28.240 --> 00:04:33.580
I haven't made a generic yet but here I have an array of five integers and I can display what the array

73
00:04:33.580 --> 00:04:39.100
size it should display 5 and then it will display the the integers because I've overloaded the insertion

74
00:04:39.100 --> 00:04:40.390
operator.

75
00:04:40.390 --> 00:04:42.220
I can fill the array to zeros.

76
00:04:42.220 --> 00:04:44.300
I can't fill it to tens and display again.

77
00:04:44.380 --> 00:04:47.860
And this is where the overloaded subscript operator comes in.

78
00:04:47.860 --> 00:04:55.470
So I can specifically set and remember what's going to happen here it's going to call Nom's dot operator

79
00:04:56.500 --> 00:04:59.980
subscript operator and it's going to pass in zero in this case.

80
00:05:00.100 --> 00:05:01.830
So that's what's being called.

81
00:05:02.020 --> 00:05:04.330
And I'm just setting those values in this case.

82
00:05:04.330 --> 00:05:09.200
If this is on the left side where using the L value if it's on the right side will be using the R-value.

83
00:05:09.490 --> 00:05:11.110
That's it.

84
00:05:11.110 --> 00:05:16.450
And here in this case here we're actually using an initializer where initialize in 100 integers.

85
00:05:16.450 --> 00:05:24.840
All right so let's let me run this you can see the output and this is all we did and it's so powerful

86
00:05:24.840 --> 00:05:25.530
we really needed it.

87
00:05:25.530 --> 00:05:30.560
We did was pass in that integer n as a non type template parameter.

88
00:05:30.720 --> 00:05:38.090
So you can see what's happening here I've got five integers and that array is called names.

89
00:05:38.550 --> 00:05:42.780
And notice when I display it I get five pieces of garbage right here.

90
00:05:42.780 --> 00:05:43.020
Right.

91
00:05:43.020 --> 00:05:44.580
That's exactly what I would expect.

92
00:05:44.580 --> 00:05:48.600
Now here I'm filling it to zero and then I'm displaying it again and I'm getting this output right here

93
00:05:48.600 --> 00:05:50.250
all of a bunch of zeros.

94
00:05:50.250 --> 00:05:56.270
Then I'm filling it to tens and you could see them display right here and then in this case I'm setting

95
00:05:56.420 --> 00:06:01.110
some zero or two thousand and some three to 2000 and you can see right in this line when I display it

96
00:06:01.380 --> 00:06:03.450
you can see it in some zeros here.

97
00:06:03.570 --> 00:06:05.790
And number three is right here.

98
00:06:06.430 --> 00:06:06.860
OK.

99
00:06:06.970 --> 00:06:15.430
So let me scroll just a little bit down and this last example we're creating 100 integers member they're

100
00:06:15.490 --> 00:06:17.650
all integers or creating 100 integers.

101
00:06:17.650 --> 00:06:23.620
This right here is that template parameter and this right up there when we created the top one was the

102
00:06:23.650 --> 00:06:24.570
template parameter.

103
00:06:24.570 --> 00:06:28.580
And so in this case we're creating an array of 100 integers.

104
00:06:28.660 --> 00:06:30.370
It's a fixed size array.

105
00:06:30.370 --> 00:06:34.360
We're not doing any memory allocation it's happening on the stack which is pretty cool.

106
00:06:34.510 --> 00:06:39.990
The compiler's handling the sizing and we're initializing all of those elements to one display I'm all

107
00:06:39.990 --> 00:06:40.300
right here.

108
00:06:40.310 --> 00:06:42.660
This 100 of them OK.

109
00:06:42.780 --> 00:06:43.500
So that's it.

110
00:06:43.500 --> 00:06:50.130
Now we've got a pretty powerful little array class here that allow us to create an array of any size

111
00:06:50.160 --> 00:06:51.570
but only of integers.

112
00:06:51.600 --> 00:06:56.890
So let's take this to the next step and make it totally generic which is really where we want to go.

113
00:06:57.200 --> 00:07:01.830
So let me close this window down up here and a couple of things I'll scroll all the way to the top so

114
00:07:01.830 --> 00:07:04.570
I can give you these little notes here.

115
00:07:04.830 --> 00:07:12.510
Since C plus plus 11 the ACL has been around before C++ 11 but in C++ 11 we have stood array.

116
00:07:12.540 --> 00:07:14.490
And this is an array with a lowercase a.

117
00:07:14.490 --> 00:07:18.930
Here and I'll explain what that array is and a couple of videos for now when we go over some of these

118
00:07:18.930 --> 00:07:20.460
container classes.

119
00:07:20.460 --> 00:07:22.600
This is a template based array class.

120
00:07:23.400 --> 00:07:29.730
The idea here is in modern C++ we really shouldn't be using arrays raw arrays we should be using stood

121
00:07:29.730 --> 00:07:31.400
arrays instead vectors.

122
00:07:31.440 --> 00:07:33.840
Now the vector is great.

123
00:07:33.840 --> 00:07:38.760
Right but the vector can shrink and it can grow and it varies in size depending on what you need.

124
00:07:38.760 --> 00:07:40.530
That's one of the great things about the vector.

125
00:07:40.530 --> 00:07:44.970
You don't have to worry about that but sometimes you know exactly what you have you know that you have

126
00:07:44.970 --> 00:07:50.640
10 integers you have 20 integers or five strings and the vector might be overkill and it could be a

127
00:07:50.640 --> 00:07:53.380
little less efficient in a case like that.

128
00:07:53.460 --> 00:07:55.480
You really want to use stood array.

129
00:07:55.590 --> 00:07:56.730
It's much more efficient.

130
00:07:56.730 --> 00:07:57.680
It's not going to shrink.

131
00:07:57.680 --> 00:07:58.610
It's not going to grow.

132
00:07:58.650 --> 00:08:03.040
It's exactly that fixed size and sometimes that's exactly what we need.

133
00:08:03.060 --> 00:08:04.640
We've got 12 months in the year.

134
00:08:04.650 --> 00:08:06.230
That's not going to grow right.

135
00:08:06.240 --> 00:08:08.450
So it's a good example of using instead array.

136
00:08:08.460 --> 00:08:12.660
Now let's make this template class generic.

137
00:08:12.660 --> 00:08:14.540
So what do we have to do.

138
00:08:14.670 --> 00:08:17.110
It's really all about this guy right here.

139
00:08:18.000 --> 00:08:22.860
It's not about size size is always going to be an integer probably be even better if we made that a

140
00:08:22.860 --> 00:08:27.400
size t type since it's going to be an unsigned but we'll just leave it in it for now.

141
00:08:27.480 --> 00:08:29.640
Values is the one that's going to change.

142
00:08:29.640 --> 00:08:32.310
It's not just going to be integers could be anything.

143
00:08:32.310 --> 00:08:37.690
So that's where we want to replace our placeholder right are type named T.

144
00:08:37.710 --> 00:08:39.210
So we'll do that right now.

145
00:08:39.210 --> 00:08:45.060
So let's start right here in the template parameter right here and would say type name and Wookey is

146
00:08:45.060 --> 00:08:47.200
t again we can use anything we want.

147
00:08:47.220 --> 00:08:51.770
Now that's going to be what's going to be replaced by whatever type the user wants right.

148
00:08:51.780 --> 00:08:55.310
So let's walk through this and make sure we get them all.

149
00:08:55.890 --> 00:08:56.810
This is fine.

150
00:08:56.850 --> 00:09:05.040
This guy is going to be a team because now we've got values is an array that and size of T types.

151
00:09:05.230 --> 00:09:13.800
OK here we've got two template parameter so we need to split the comma and then this is just my friend

152
00:09:13.890 --> 00:09:17.880
operator that allows you to display these things on an output stream easily.

153
00:09:18.090 --> 00:09:19.830
So that should take care of that.

154
00:09:19.830 --> 00:09:21.930
Now let's take a look down here.

155
00:09:21.930 --> 00:09:27.930
We've got the initial value that we want to set the array elements to that can no longer be an int because

156
00:09:27.930 --> 00:09:29.070
it could be anything.

157
00:09:29.070 --> 00:09:35.930
So we want that to be a T here the same idea we want to fill the array with whatever T's are provided

158
00:09:35.930 --> 00:09:42.110
to us remember the is just a pluggable type could be an int a double a character or something more complicated.

159
00:09:42.710 --> 00:09:45.830
Get sizes OK it's going to return an integer.

160
00:09:45.830 --> 00:09:50.900
But this guy right here overloaded subscript operator is not going to return an integer reference it's

161
00:09:50.900 --> 00:09:55.630
going to return a reference to a T OK.

162
00:09:55.640 --> 00:09:57.410
Now this won't compile any longer.

163
00:09:57.410 --> 00:09:59.840
Let me compile it just so you can see what's going on.

164
00:09:59.840 --> 00:10:01.340
We're going to get errors right here.

165
00:10:01.340 --> 00:10:01.640
Why.

166
00:10:01.640 --> 00:10:06.160
Because look at our template definition right here it's expecting 2 items.

167
00:10:06.170 --> 00:10:09.030
It's expecting a type and it's expecting an integer.

168
00:10:09.110 --> 00:10:12.600
But right now we're only providing the integer here.

169
00:10:12.650 --> 00:10:17.800
So we need to provide the type so we could say int comma and then the 5.

170
00:10:17.840 --> 00:10:20.460
And now we've got exactly what we did before.

171
00:10:20.570 --> 00:10:21.040
Right.

172
00:10:21.170 --> 00:10:22.430
So let's try that again.

173
00:10:23.680 --> 00:10:29.920
Same here we've got a hundred but that's try integers and we'll modify this to a different type of just

174
00:10:29.920 --> 00:10:30.550
a second.

175
00:10:30.700 --> 00:10:31.390
That's it.

176
00:10:31.390 --> 00:10:37.630
Now if I run this I've got a clean run it looks like I didn't do much but there's a lot going on here

177
00:10:37.660 --> 00:10:43.060
because in this case the compiler is providing two template classes for me right.

178
00:10:43.090 --> 00:10:47.590
One is using integers with five and one is using integers with 100.

179
00:10:47.590 --> 00:10:50.690
So now what we can do is we can modify this.

180
00:10:50.760 --> 00:10:55.480
Let's say we want to modify it so that we can hold stood strings and not just integers.

181
00:10:55.480 --> 00:11:02.880
So we're going to create an array provide the type which is going to be stewed string and how many do

182
00:11:02.880 --> 00:11:03.390
we want.

183
00:11:03.390 --> 00:11:07.200
So we want ten of them.

184
00:11:07.210 --> 00:11:10.440
That's it you can really see the power of templates here.

185
00:11:10.440 --> 00:11:16.710
So now what do we do let's call this guy strings and let's give it an initial value we'll call that

186
00:11:16.710 --> 00:11:22.140
constructor with the initial value and what we'll do is we'll just say stood string and we'll construct

187
00:11:22.140 --> 00:11:23.280
a string let's just call it.

188
00:11:23.280 --> 00:11:24.850
Frank makes it easy.

189
00:11:27.620 --> 00:11:28.520
That's it.

190
00:11:28.520 --> 00:11:35.390
And then I'm going to just copy and paste this right here and rename a few variables so that we know

191
00:11:35.390 --> 00:11:39.110
now that the size of strings now Nom's.

192
00:11:39.650 --> 00:11:48.550
That's my array right here that I just named is strings that get size and what we want to do is display.

193
00:11:48.950 --> 00:11:49.720
That's it.

194
00:11:49.730 --> 00:11:52.100
Let's run this bears.

195
00:11:52.110 --> 00:11:58.280
There it is the size of strings is 10 and I've got 10 stood strings in there they're pretty cool right.

196
00:11:58.270 --> 00:12:01.840
I mean I didn't really do much all I did was make this class generic.

197
00:12:01.860 --> 00:12:02.790
That's awesome.

198
00:12:02.790 --> 00:12:05.590
Now suppose I want to change that first string.

199
00:12:05.730 --> 00:12:05.940
Right.

200
00:12:05.940 --> 00:12:14.760
The zeroth index so I could simply say strings Sub-Zero equals and we'll create a stud string I can't

201
00:12:14.760 --> 00:12:18.900
use a character pointer literal right here because the typing would be wrong.

202
00:12:18.990 --> 00:12:22.270
So I'm going to create a string for let's say Larry.

203
00:12:23.460 --> 00:12:29.520
And that is going to be put in for the 0 if item and then I just display them again and we should be

204
00:12:29.520 --> 00:12:34.870
able to see that first item in that strings array should not be Larry's.

205
00:12:34.870 --> 00:12:39.210
Let me run that real quick and there it is you see right there is Larry.

206
00:12:39.430 --> 00:12:40.520
That's pretty corny.

207
00:12:41.780 --> 00:12:45.450
All right last thing is let's fill this array with some X's let's say.

208
00:12:45.560 --> 00:12:48.780
So all six strings dot fill.

209
00:12:48.950 --> 00:12:58.000
And again I want to fill this with less than string and it's just say X and we'll display it one more

210
00:12:58.000 --> 00:12:58.540
time.

211
00:13:01.240 --> 00:13:05.000
Now we should see all x's when it displays and there they are right down here.

212
00:13:06.090 --> 00:13:11.310
So that really finishes this video up and this little mini section about templates including function

213
00:13:11.310 --> 00:13:14.920
templates and class templates you can see the power here right.

214
00:13:15.000 --> 00:13:16.510
It's so so powerful.

215
00:13:16.530 --> 00:13:19.150
Now obviously let me scroll up right here.

216
00:13:19.170 --> 00:13:21.260
Obviously you would never do this right here.

217
00:13:21.330 --> 00:13:26.310
We're just doing this to learn if you need an array use stood array.

218
00:13:26.370 --> 00:13:29.460
It's part of the SPL everything's baked into it.

219
00:13:29.460 --> 00:13:34.050
It supports algorithms and iterators and all kinds of good stuff that we'll talk about soon.

220
00:13:34.050 --> 00:13:41.750
So again if you need a fixed size array and modern C++ use stood array.

221
00:13:42.150 --> 00:13:44.330
So the next video will start talking about.

222
00:13:44.370 --> 00:13:47.280
Containers iterators algorithms.

223
00:13:47.400 --> 00:13:49.770
And then we'll look at each one of the containers.

224
00:13:49.950 --> 00:13:55.470
In other words array vector lists sets and maps and everything and we'll go through some examples for

225
00:13:55.470 --> 00:13:55.860
those.
