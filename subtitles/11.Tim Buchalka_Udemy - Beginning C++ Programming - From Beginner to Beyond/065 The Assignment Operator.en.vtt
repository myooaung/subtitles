WEBVTT
1
00:00:05.730 --> 00:00:12.210
Nearly all programming languages have the ability to change the value of a variable in C++.

2
00:00:12.210 --> 00:00:17.940
We can change the value stored in a variable using the assignment operator the assignment operator is

3
00:00:17.940 --> 00:00:19.770
a single equal sign.

4
00:00:19.770 --> 00:00:25.500
It's important to understand that this does not represent equality in the code sample on this page.

5
00:00:25.620 --> 00:00:29.310
We are not asserting that the left hand side is equal to the right hand side.

6
00:00:29.460 --> 00:00:32.880
Nor are we comparing the left hand side and the right hand side.

7
00:00:33.000 --> 00:00:38.940
In this case we're evaluating the value of the expression on the right hand side and storing that value

8
00:00:39.000 --> 00:00:41.840
into the variable represented by the left hand side.

9
00:00:42.870 --> 00:00:44.970
C++ is statically typed.

10
00:00:44.990 --> 00:00:49.640
That means that the compiler will be checking to see if it makes sense to store the value from the right

11
00:00:49.640 --> 00:00:51.780
hand side to the left hand side.

12
00:00:52.010 --> 00:00:58.680
If it does it make sense you'll get a compiler error saying exactly that in order to store value into

13
00:00:58.680 --> 00:01:02.270
the left hand side the left hand side must be assignable.

14
00:01:02.340 --> 00:01:03.380
It can't be literal.

15
00:01:03.390 --> 00:01:07.920
It can't be a constant if it is the compiler will produce an error message.

16
00:01:07.920 --> 00:01:12.010
We can assign multiple variables all at once in a single assignment statement.

17
00:01:12.030 --> 00:01:16.970
This is possible because the assignment expression evaluates to what was just assigned.

18
00:01:17.100 --> 00:01:19.920
So it's easy to chain assignment statements together.

19
00:01:19.980 --> 00:01:23.920
Let's head over to the ID and will work with the assignment operator in live code.

20
00:01:25.830 --> 00:01:28.330
Ok so now I'm in the code like ID.

21
00:01:28.330 --> 00:01:33.210
I'm in the Section 8 workspace and the project is called assignment operator.

22
00:01:33.480 --> 00:01:37.530
We'll go through some examples of how to use the assignment operator and the effects of the assignment

23
00:01:37.530 --> 00:01:38.870
operator in this video.

24
00:01:39.150 --> 00:01:45.420
So what I've done here is I've created two variables number one and number two I'm declaring them and

25
00:01:45.420 --> 00:01:48.100
initializing them to 10 and 20 respectively.

26
00:01:48.240 --> 00:01:52.440
And then I've just got a simple output statement that prints out number one and number two.

27
00:01:52.530 --> 00:01:54.770
Right now this is not assignment right.

28
00:01:54.960 --> 00:02:00.350
What you see appear right now and let me just mark that up what you see here is not assignment.

29
00:02:00.360 --> 00:02:01.500
It's initialization.

30
00:02:01.500 --> 00:02:03.350
It's important to understand the difference.

31
00:02:03.540 --> 00:02:09.000
Initialization happens when the variable is declared and it gets that value for the very first time

32
00:02:09.900 --> 00:02:13.910
assignment is when you change a value that already exists in the variable.

33
00:02:14.010 --> 00:02:17.490
Ok so let's try to change one of those values.

34
00:02:17.550 --> 00:02:24.050
I'm going to type in here just something really simple like no one equals 100.

35
00:02:24.060 --> 00:02:27.300
You notice I just said number one equals 100.

36
00:02:27.300 --> 00:02:29.550
This is one of the ways that programmers read this.

37
00:02:29.550 --> 00:02:31.360
Number one equals 100.

38
00:02:31.470 --> 00:02:33.420
Assign 100 to number 1.

39
00:02:33.450 --> 00:02:36.090
Move 100 to one.

40
00:02:36.180 --> 00:02:39.810
You'll hear this sort of jargon but often you'll hear no one equals 100.

41
00:02:39.810 --> 00:02:45.450
And what we mean there is it's an assignment statement we're not saying that someone is actually equivalent

42
00:02:45.450 --> 00:02:46.260
to 100.

43
00:02:46.260 --> 00:02:47.600
This is an assignment statement.

44
00:02:47.610 --> 00:02:49.650
No one in this case has 10 remember.

45
00:02:49.690 --> 00:02:52.600
So what we're doing is we're moving a hundred into that value.

46
00:02:52.840 --> 00:02:57.960
OK so let's break this down and go through this one step at a time so you really see what's going on

47
00:02:57.960 --> 00:02:59.610
here what we're doing is.

48
00:02:59.610 --> 00:03:05.370
Again we have a left hand side of an assignment operator and the right hand side right.

49
00:03:05.430 --> 00:03:06.730
That's an assignment expression.

50
00:03:06.720 --> 00:03:09.920
We put a semi-colon in the end now it's an assignment statement.

51
00:03:10.020 --> 00:03:13.550
In this case we're evaluating the right hand side expression.

52
00:03:13.560 --> 00:03:15.500
In this case it's 100.

53
00:03:15.690 --> 00:03:16.350
It's a literal.

54
00:03:16.350 --> 00:03:19.380
It's going to evaluate to 100.

55
00:03:19.620 --> 00:03:26.000
Now here is my variable number one Currently it has a 10 in there.

56
00:03:26.010 --> 00:03:28.820
You can see that right there I initialized it to 10.

57
00:03:29.360 --> 00:03:33.400
When we say something like no one equals 100.

58
00:03:33.440 --> 00:03:36.100
Or again assign 100 to 1.

59
00:03:36.140 --> 00:03:41.510
We're evaluating that right hand side in this case as I said it's 100 and we're storing that hundred

60
00:03:41.690 --> 00:03:44.110
into number one.

61
00:03:44.390 --> 00:03:46.350
But no one is 10.

62
00:03:46.370 --> 00:03:52.190
Yes but when you use Number one this variable number one on the left hand side we're using it's location

63
00:03:52.190 --> 00:04:02.710
not its value in C++ there's the concept of l value and R value and it gets pretty complicated when

64
00:04:02.710 --> 00:04:08.150
we're talking about more advanced features in C++ but at this level it's really pretty simple.

65
00:04:08.230 --> 00:04:12.530
The R-value is the contents of a variable bullet say.

66
00:04:12.610 --> 00:04:18.110
In this case the contents of number 1 is 10 so the R-value of Number One will be 10.

67
00:04:18.160 --> 00:04:21.190
The value is the location of that variable.

68
00:04:21.190 --> 00:04:26.680
So again what this means is move 100 or store 100 into the location of number one.

69
00:04:26.680 --> 00:04:32.690
So what's going to happen is that we just change the 10 to 100 k again.

70
00:04:32.690 --> 00:04:34.760
Conceptually it's a pretty straightforward thing.

71
00:04:34.790 --> 00:04:39.190
So let me clear this will run it and what we expect now is we expect no one to be 100.

72
00:04:39.320 --> 00:04:43.150
And number two to still be 20 because we haven't messed with it at all.

73
00:04:43.340 --> 00:04:49.040
Let me compile and run and you can see no one is 100.

74
00:04:49.040 --> 00:04:53.050
Because we change an assignment statement and number two is 20.

75
00:04:53.420 --> 00:04:53.920
OK.

76
00:04:54.000 --> 00:04:55.370
It's pretty simple.

77
00:04:55.430 --> 00:05:02.250
We don't have to use literals here we can use anything we like in this case I could say no to.

78
00:05:02.700 --> 00:05:03.080
OK.

79
00:05:03.110 --> 00:05:09.170
So remember because this variable number two is on the right hand side of that assignment statement

80
00:05:09.170 --> 00:05:13.490
we're using it's our value or its value or its contents we're using the 20 basically.

81
00:05:13.640 --> 00:05:19.010
So we're taking the 20 and we're assigning it to the location where number one is that box where someone

82
00:05:19.100 --> 00:05:20.210
lives.

83
00:05:20.330 --> 00:05:23.910
So it's going to change that got to 20 ok.

84
00:05:24.550 --> 00:05:28.390
Or we'll put a 20 in number one however you want to look at it all means the same thing.

85
00:05:28.400 --> 00:05:32.780
So now when we print these two values we should get 20 and 20.

86
00:05:32.780 --> 00:05:33.810
So let's give it a run.

87
00:05:36.050 --> 00:05:42.370
So I'm building and running and now we've got 20 and 20 Remember we've got a left hand side.

88
00:05:42.530 --> 00:05:46.390
The assignment operator and the right hand side followed by a semicolon.

89
00:05:46.520 --> 00:05:49.960
This right hand side could be really really complex.

90
00:05:49.970 --> 00:05:56.540
I mean it could be some really you know it could be some really complex mathematical expression that

91
00:05:56.540 --> 00:05:58.180
just goes on and on and on and on.

92
00:05:58.240 --> 00:06:03.430
Does it really matter what the compiler is going to do it's going to evaluate this expression to some

93
00:06:03.440 --> 00:06:04.150
value.

94
00:06:05.530 --> 00:06:10.430
And then it's going to assign that value it was just calculated into that variable.

95
00:06:12.120 --> 00:06:18.630
The compiler does type checking for us remember C++ is statically typed which means that a lot of errors

96
00:06:18.660 --> 00:06:20.370
are caught by the compiler.

97
00:06:20.370 --> 00:06:25.650
This is very different from other languages like Python and Ruby and so forth where they do all this

98
00:06:25.650 --> 00:06:27.460
type checking at runtime.

99
00:06:27.660 --> 00:06:29.870
C++ does it at compile time.

100
00:06:29.940 --> 00:06:34.980
So when the program is running you're guaranteed that this is going to be correct because it's already

101
00:06:34.980 --> 00:06:37.200
done a lot of this checking for you.

102
00:06:37.350 --> 00:06:43.740
So what the compiler does now is it's going to check to see does it make sense for me to assign whatever

103
00:06:43.740 --> 00:06:46.110
value is in here to here.

104
00:06:46.110 --> 00:06:50.490
How does it know it's looking at the types it's saying.

105
00:06:50.480 --> 00:06:52.710
Number two is an integer number one is an integer.

106
00:06:52.730 --> 00:06:59.270
OK if I did something like number one equals 200 it's going to say OK that's an integer does it make

107
00:06:59.270 --> 00:07:02.240
sense to assign an integer integer to an integer.

108
00:07:02.240 --> 00:07:03.030
Sure it does.

109
00:07:03.050 --> 00:07:08.870
It's got its rules internally and we'll talk about mixed mode assignment in mixed mode math in a couple

110
00:07:08.870 --> 00:07:09.920
of videos from now.

111
00:07:10.100 --> 00:07:15.980
That's where we're adding and multiplying integers and real numbers and assigning potentially a real

112
00:07:15.980 --> 00:07:17.020
number to an integer.

113
00:07:17.120 --> 00:07:21.800
It's not just it's within it's right we've got different types going working together and that all works

114
00:07:21.800 --> 00:07:22.420
really well too.

115
00:07:22.430 --> 00:07:26.350
But we'll talk about that in a couple of videos so that takes care of this.

116
00:07:26.510 --> 00:07:29.440
Hopefully you can see that conceptually it's really really straightforward.

117
00:07:29.450 --> 00:07:33.950
Let's say that we wanted to change these together.

118
00:07:35.230 --> 00:07:37.870
OK so what we can do here is we can change those.

119
00:07:37.880 --> 00:07:43.190
Those assignment operators together and again let's break this down so you can see what's happening.

120
00:07:43.190 --> 00:07:51.580
We're going to say it no one to and some value could be a big old mathematical expression.

121
00:07:51.670 --> 00:07:54.790
But in this case I'm just going to use a thousand to make things easier.

122
00:07:55.340 --> 00:07:59.050
OK so we've got two assignment operators here.

123
00:07:59.050 --> 00:08:03.850
What's important to understand with assignment operators and excessive expressions is that they return

124
00:08:03.850 --> 00:08:05.200
a value themselves.

125
00:08:05.320 --> 00:08:07.930
They returned what was just assigned.

126
00:08:08.290 --> 00:08:14.020
And they associate right to left which makes sense right.

127
00:08:14.020 --> 00:08:16.160
In other words this will be the last thing done.

128
00:08:16.330 --> 00:08:22.600
So the first thing the compiler does is it sees this expression right here and it says OK I want to

129
00:08:22.600 --> 00:08:24.660
assign a thousand to number two.

130
00:08:24.970 --> 00:08:25.920
OK let's do that.

131
00:08:26.020 --> 00:08:29.910
So numb to right here is going to get a thousand.

132
00:08:30.090 --> 00:08:35.280
Now the value of that discretion evaluates to is a thousand because that's the number that was just

133
00:08:35.280 --> 00:08:36.030
assigned.

134
00:08:36.300 --> 00:08:40.000
So now you've got number one equals a thousand.

135
00:08:40.010 --> 00:08:43.510
So what we do is we assign a thousand to number one

136
00:08:46.690 --> 00:08:47.370
OK.

137
00:08:47.710 --> 00:08:48.680
And now we're done.

138
00:08:48.700 --> 00:08:52.050
So you could see that you can chain these things together and they go right to left.

139
00:08:52.050 --> 00:08:56.270
It's a handy way to initialize a bunch of variables to the same value.

140
00:08:56.320 --> 00:09:00.650
Again we can have all sorts of expressions in here and so forth if we want.

141
00:09:00.790 --> 00:09:02.920
That's really not considered good practice.

142
00:09:02.920 --> 00:09:07.240
The only time that you really should even consider changing these assignment operators is when you're

143
00:09:07.240 --> 00:09:09.440
assigning the same thing to everything.

144
00:09:09.490 --> 00:09:13.940
Like number one number two and three and four equals 10 or zero or something like that.

145
00:09:14.050 --> 00:09:19.090
That makes sense but if you've got really complicated expressions in this and these pieces here that's

146
00:09:19.090 --> 00:09:20.690
probably not a good idea to do.

147
00:09:20.980 --> 00:09:26.210
OK so let's take a look at that and let's run this.

148
00:09:26.440 --> 00:09:31.660
And you can see now that when they print out you get a thousand and the thousand just like you would

149
00:09:31.750 --> 00:09:32.200
expect.

150
00:09:32.200 --> 00:09:34.680
No one is a thousand to two a thousand.

151
00:09:35.270 --> 00:09:37.020
OK let's do an error here.

152
00:09:40.070 --> 00:09:44.240
Let's say we wanted to do something like that.

153
00:09:45.380 --> 00:09:48.230
Now the C++ compiler is pretty smart.

154
00:09:48.230 --> 00:09:53.750
And when we talk about classes and objects we'll talk about how we can make the assignment operator

155
00:09:53.750 --> 00:09:58.850
our own so it works with our own classes as the senator said C++ is pretty smart.

156
00:09:58.850 --> 00:10:04.610
It's going to try to see if it's possible to convert whatever's on the right hand side to the left hand

157
00:10:04.610 --> 00:10:05.150
side.

158
00:10:05.300 --> 00:10:09.290
In this case you're telling the compiler store a string Frank.

159
00:10:09.290 --> 00:10:13.070
Write a sequence of characters into an integer that makes no sense.

160
00:10:13.070 --> 00:10:18.110
The compiler is going to try to see if it can convert that string to an integer somehow and if it's

161
00:10:18.110 --> 00:10:22.610
got some sort of code that maybe you've written it will execute that code and convert it.

162
00:10:22.610 --> 00:10:24.480
In this case there is no such code.

163
00:10:24.500 --> 00:10:30.770
So if I build and run this I'm going to get an air and the air is going to say Invalid conversion from

164
00:10:31.100 --> 00:10:32.050
a character pointer.

165
00:10:32.050 --> 00:10:35.300
We'll talk about what that is and a few videos to an integer.

166
00:10:35.300 --> 00:10:40.910
So again it's a conversion issue it's saying I don't know this is these are apples and oranges as far

167
00:10:40.910 --> 00:10:42.250
as the compiler is concerned.

168
00:10:42.440 --> 00:10:51.520
So let me clear this and let's do one more let's say I want to assign 100 to number one.

169
00:10:51.770 --> 00:10:53.140
We've seen that works fine.

170
00:10:53.150 --> 00:10:55.540
But what if no one is a constant.

171
00:10:55.700 --> 00:11:01.230
So let's say we made no one to contest this shouldn't be allowed right because you've just said I've

172
00:11:01.230 --> 00:11:05.370
got a constant integer here number one and I initialized it to 10.

173
00:11:05.490 --> 00:11:07.400
And now you want to change it to 100.

174
00:11:07.470 --> 00:11:12.030
Obviously the compiler is going to say well wait a minute you just told me that was a constant I can't

175
00:11:12.030 --> 00:11:12.830
do that for you.

176
00:11:12.990 --> 00:11:14.640
So let's try that.

177
00:11:14.640 --> 00:11:16.970
We'll run it and you should see an error.

178
00:11:17.010 --> 00:11:18.510
Something about read only.

179
00:11:18.510 --> 00:11:19.450
There you go.

180
00:11:19.450 --> 00:11:22.630
Error assignment of read only variables not allowed.

181
00:11:22.740 --> 00:11:23.640
So you can't do that.

182
00:11:24.730 --> 00:11:28.380
And similarly I can't do something like this.

183
00:11:31.330 --> 00:11:38.310
One hundred say equals 1 right.

184
00:11:38.780 --> 00:11:40.180
What are you trying to do here.

185
00:11:40.190 --> 00:11:42.630
Your compiler is probably thinking what in the world do they want to do.

186
00:11:42.750 --> 00:11:44.650
It's OK we know what no one is right.

187
00:11:44.660 --> 00:11:47.250
It's value it's 10 because it's on the right hand side.

188
00:11:47.360 --> 00:11:52.850
But now you want to assign it to 100 to 100 is a literal 100 doesn't have an l value it doesn't have

189
00:11:52.850 --> 00:11:55.100
a location in memory.

190
00:11:55.280 --> 00:12:02.340
So when you run this you'll see something like Error l value required as the left operand of an assignment.

191
00:12:02.390 --> 00:12:06.780
I need to store this somewhere and either location and 100 is a literal.

192
00:12:06.800 --> 00:12:08.340
Does it have a location.

193
00:12:08.720 --> 00:12:10.910
OK so that's it.

194
00:12:10.910 --> 00:12:13.310
Assignment at this level is pretty simple.

195
00:12:13.310 --> 00:12:15.210
We're going to use it at this level for a bit.

196
00:12:15.230 --> 00:12:20.600
Once we get to our own classes and objects we can make assignment work for us in a really really powerful

197
00:12:20.600 --> 00:12:25.370
way and we'll talk about that when we get there in the next video what we'll do is we'll talk about

198
00:12:25.370 --> 00:12:31.070
the mathematical operators or the arithmetic operators plus the minus the multiply the divide and the

199
00:12:31.070 --> 00:12:31.580
remainder.
