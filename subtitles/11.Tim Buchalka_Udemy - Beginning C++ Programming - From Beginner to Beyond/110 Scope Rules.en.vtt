WEBVTT
1
00:00:05.590 --> 00:00:11.970
This video we'll learn a little bit more about C++ as scope rules C++ uses scope rules to determine

2
00:00:11.970 --> 00:00:14.780
when and where an identifier can be used.

3
00:00:14.790 --> 00:00:19.950
It uses static or lexical scope in which means that the scope is determined the same way you read a

4
00:00:19.950 --> 00:00:21.150
program.

5
00:00:21.450 --> 00:00:24.960
C++ has two main scopes local scope and global scope

6
00:00:27.990 --> 00:00:33.190
local or block scope refers to the visibility of an identifier that's been declared in a block.

7
00:00:33.480 --> 00:00:39.380
That is a set of open or closed curly braces function parameters also have block scope.

8
00:00:39.660 --> 00:00:43.410
These identifiers are visible within the block in which they are declared.

9
00:00:43.410 --> 00:00:47.790
I talked about this earlier in the course but it's important to understand it in the context of functions

10
00:00:48.660 --> 00:00:50.050
when a function is called.

11
00:00:50.100 --> 00:00:56.070
You can think of the function as being activated and the function parameters are bound to storage.

12
00:00:56.310 --> 00:01:00.250
They become alive and their lifetime is while the function is executing.

13
00:01:00.420 --> 00:01:05.400
Once the function completes the function is deactivated and these variables and parameters are no longer

14
00:01:05.400 --> 00:01:06.190
alive.

15
00:01:06.600 --> 00:01:09.410
That doesn't mean that they're somehow marked as unavailable.

16
00:01:09.450 --> 00:01:14.070
It simply means that the compiler doesn't recognize them any longer and the storage they were bound

17
00:01:14.070 --> 00:01:16.760
to will likely be reused.

18
00:01:16.770 --> 00:01:22.320
That means that the values of local variables are not preserved between function calls.

19
00:01:22.440 --> 00:01:27.930
If we have nested blocks then statements in the inner blocks can see identifiers declared and the outer

20
00:01:27.930 --> 00:01:32.140
blocks but outer blocks cannot see variables defined in the inner blocks.

21
00:01:34.570 --> 00:01:39.750
However there is one type of variable whose value is preserved between function calls.

22
00:01:39.760 --> 00:01:42.010
This is a static local variable.

23
00:01:42.190 --> 00:01:45.150
It's a variable whose lifetime is the lifetime of the program.

24
00:01:45.400 --> 00:01:48.880
But it's only visible to the statements in the function body.

25
00:01:48.880 --> 00:01:53.770
These variables can come in very handy when you need to know a previous value in a function without

26
00:01:53.770 --> 00:01:55.930
having to pass it in all the time.

27
00:01:56.170 --> 00:02:04.120
Static local variables are only initialized once if no initializer is provided they're set to zero identifiers

28
00:02:04.120 --> 00:02:09.000
with global scope or identifiers that are declared outside of any function or class.

29
00:02:09.130 --> 00:02:14.100
These identifiers are visible to all parts of the program following their declaration.

30
00:02:14.110 --> 00:02:19.930
Best practice with identifiers with global scope is that it's OK to use global constants but global

31
00:02:19.930 --> 00:02:21.510
variables should be avoided.

32
00:02:21.790 --> 00:02:24.490
Let's see scope rules in action in the ID.

33
00:02:25.030 --> 00:02:32.130
OK so now I'm in the code like IEEE and I'm in the section 11 workspace in the scope example project.

34
00:02:32.410 --> 00:02:36.970
Here I've got an example program that just exercises a few of the scope rules and I'll walk through

35
00:02:36.970 --> 00:02:37.560
them.

36
00:02:37.570 --> 00:02:39.160
They're very straightforward.

37
00:02:39.160 --> 00:02:45.010
The nice thing about languages like C++ and other languages that use static scoping is that the scoping

38
00:02:45.010 --> 00:02:50.620
is lexical So it's as you read the code it's not something that's happening at runtime on the call stack

39
00:02:50.970 --> 00:02:54.980
languages that use dynamic scoping rules are a little harder to follow in this sense.

40
00:02:55.060 --> 00:02:57.110
So let's take a look at this example here.

41
00:02:57.160 --> 00:03:00.930
I've got my main and I've got two local variables defined in Maine.

42
00:03:00.940 --> 00:03:05.000
They're local to Maine because they're defined inside those brackets.

43
00:03:05.130 --> 00:03:06.950
OK that's really important.

44
00:03:07.360 --> 00:03:09.760
So what's the scoping deal all about.

45
00:03:09.760 --> 00:03:15.870
Well when I use a variable name for example I'm using Gnome here which no way am I talking about.

46
00:03:15.880 --> 00:03:17.750
That's what scope is all about.

47
00:03:18.070 --> 00:03:19.690
And the rule is really very simple.

48
00:03:19.690 --> 00:03:23.750
First you look inside your own scope inside your local scope.

49
00:03:23.950 --> 00:03:26.080
So here is not why I'm using it.

50
00:03:26.080 --> 00:03:26.850
Which one is it.

51
00:03:26.860 --> 00:03:32.930
Well look in the inside your scope here and you'll see it's this one right here right.

52
00:03:32.950 --> 00:03:35.890
That's the closest one within the scope that you're in.

53
00:03:35.890 --> 00:03:41.690
So this is going to print 100 now block statements just like we had here.

54
00:03:41.710 --> 00:03:46.750
BLOCK statements create a new level of scope and we're going to see this again when we use classes.

55
00:03:46.750 --> 00:03:50.440
So every time that you create a block you've got a new level of scope.

56
00:03:50.470 --> 00:03:52.590
So notice here I'm declaring Gnome again.

57
00:03:52.620 --> 00:03:55.930
This is a different numnah I'm using the same name on purpose.

58
00:03:56.290 --> 00:04:01.140
So now when I use it here in the output statement which number am I talking about.

59
00:04:01.140 --> 00:04:05.700
Am I talking about this one here on 9:36 from my talking about the one on line 42.

60
00:04:05.950 --> 00:04:08.730
Well you look in your closest scope first right.

61
00:04:08.740 --> 00:04:10.330
You look for a local variable.

62
00:04:10.420 --> 00:04:13.650
So this here refers to this number right here.

63
00:04:13.660 --> 00:04:14.770
That's the variable.

64
00:04:14.770 --> 00:04:18.160
So this is going to display 200.

65
00:04:18.160 --> 00:04:19.670
What about this one here.

66
00:04:19.750 --> 00:04:22.660
Number one the rule again that you follow.

67
00:04:22.660 --> 00:04:24.820
Look inside here first.

68
00:04:24.820 --> 00:04:26.930
Do you see a number one declared in here.

69
00:04:26.980 --> 00:04:27.940
No you don't.

70
00:04:27.970 --> 00:04:30.310
Then you look out to your outer scope.

71
00:04:30.340 --> 00:04:31.830
There it is right here.

72
00:04:31.930 --> 00:04:35.350
So that's the one I'm using and that will display 500

73
00:04:38.440 --> 00:04:38.980
OK.

74
00:04:38.980 --> 00:04:39.970
Hopefully that makes sense.

75
00:04:39.970 --> 00:04:40.800
Now here we go.

76
00:04:40.800 --> 00:04:41.960
We're using Gnome again.

77
00:04:42.220 --> 00:04:47.220
But now we've got two Nom's we've got them here on 9:36 and we've got the name here on 9:42.

78
00:04:47.260 --> 00:04:48.730
Which one do we use.

79
00:04:48.730 --> 00:04:51.090
Well you look in your level of scope.

80
00:04:51.150 --> 00:04:52.180
Your local variable.

81
00:04:52.180 --> 00:04:54.530
You can't look into another block.

82
00:04:54.660 --> 00:04:57.390
You notice how this block here could see out.

83
00:04:57.430 --> 00:04:59.950
So we could see someone that's perfectly normal.

84
00:04:59.950 --> 00:05:03.360
First you look in your local scope then you look outwards.

85
00:05:03.550 --> 00:05:04.970
You don't look inwards.

86
00:05:05.090 --> 00:05:13.820
OK so this numb refers to this guy right here on 9:36 So this is going to display 100 as well.

87
00:05:14.090 --> 00:05:16.090
We'll go through a few more examples down here.

88
00:05:16.090 --> 00:05:21.160
But let's run this one for us we're expecting 100 200 500 and 100.

89
00:05:21.340 --> 00:05:28.390
So let me run this example and here we go 100 200 500 and 100.

90
00:05:28.480 --> 00:05:34.600
Just what we expected when you read about scoping books on Web sites and tutorials.

91
00:05:34.600 --> 00:05:41.110
It's really complicated when you first learn about your local non-local global and other stuff but conceptually

92
00:05:41.110 --> 00:05:42.100
it's pretty straightforward.

93
00:05:42.100 --> 00:05:46.790
First you look local then you look out out out out as far as you need to go until you find it.

94
00:05:46.840 --> 00:05:49.950
If you don't find it you have a compiler error for sure.

95
00:05:49.990 --> 00:05:50.230
All right.

96
00:05:50.230 --> 00:05:51.950
So let's look at this one here.

97
00:05:52.540 --> 00:05:58.120
I'm calling a function called local example and I'm passing in a 10 and let me show you what that function

98
00:05:58.120 --> 00:05:58.640
looks like.

99
00:05:58.640 --> 00:06:00.100
It's right here.

100
00:06:00.100 --> 00:06:02.510
We expand a little.

101
00:06:02.750 --> 00:06:09.380
So I'm calling this with a 10 so I'm passing in a 10 by value so this X right here will be a 10 right.

102
00:06:09.380 --> 00:06:15.790
I'm going to copy the 10 I've got a numb variable right here and I'm initializing it's 1000.

103
00:06:16.010 --> 00:06:19.990
So my output statement is using numb which number my using.

104
00:06:20.000 --> 00:06:21.430
Well I've got two choices right.

105
00:06:21.440 --> 00:06:24.990
I can use this one on line 20 or I can use this one on line 11.

106
00:06:25.520 --> 00:06:28.500
I always use the local variable in this case.

107
00:06:28.530 --> 00:06:34.380
I'm going to use this one on line 20 so this is going to display a thousand.

108
00:06:34.490 --> 00:06:36.570
Then I'm setting numb equal to x.

109
00:06:36.590 --> 00:06:38.470
Ok x is 10.

110
00:06:38.480 --> 00:06:40.220
Which number am I talking about.

111
00:06:40.280 --> 00:06:42.800
I'm talking about this number again.

112
00:06:42.950 --> 00:06:49.230
So when I set this to 10 and I'm going to display Nahm which is again the 10.

113
00:06:49.670 --> 00:06:53.150
So this will display a thousand and ten.

114
00:06:53.150 --> 00:06:59.960
Notice that I can't use number one here because it's not within the scope that was defined inside main.

115
00:06:59.960 --> 00:07:05.480
OK so if I run this I expect a thousand N10 and let's try that out.

116
00:07:08.760 --> 00:07:12.650
And you go local numbers a thousand and then local number is 10.

117
00:07:12.820 --> 00:07:17.270
Suppose I call this again but I pass him 20 into it.

118
00:07:17.690 --> 00:07:18.940
And what do you think is going to happen.

119
00:07:18.940 --> 00:07:20.550
Well let's go back here again.

120
00:07:20.890 --> 00:07:23.760
In this case I'm passing you know 20.

121
00:07:23.830 --> 00:07:28.120
So X is going to get to 20 I'm initialized to a thousand.

122
00:07:28.120 --> 00:07:31.670
Every time I call this function that number will be initialized 2000.

123
00:07:31.840 --> 00:07:35.530
So in this case there's no way I'm using this one right here again.

124
00:07:35.530 --> 00:07:38.230
So this will display a thousand.

125
00:07:38.260 --> 00:07:42.660
Now I'm setting that same variable to 20 and then I'm displaying it right here.

126
00:07:42.670 --> 00:07:45.530
This is going to display 1020.

127
00:07:45.880 --> 00:07:46.320
OK.

128
00:07:46.360 --> 00:07:49.150
So it's the same idea and it's pretty straightforward.

129
00:07:49.150 --> 00:07:50.650
Let me run this.

130
00:07:50.710 --> 00:07:55.670
So we thought we saw 2010 we're going to see a thousand and 20.

131
00:07:55.690 --> 00:08:00.490
OK so now let's look at example of global variable.

132
00:08:00.520 --> 00:08:05.230
You'll notice that way up here the top of the program I want to scroll all the way up and we close that

133
00:08:05.440 --> 00:08:08.350
function and expand this one.

134
00:08:08.410 --> 00:08:15.010
This is what we've got right here we've got a global variable called numb right here on line 11 and

135
00:08:15.010 --> 00:08:17.230
I'm initializing that global variable of 300.

136
00:08:17.230 --> 00:08:19.130
How do I know it's a global variable.

137
00:08:19.150 --> 00:08:22.780
It's not declared inside any function is not declared inside any class.

138
00:08:22.780 --> 00:08:24.370
It's just sitting there all on its own right.

139
00:08:24.370 --> 00:08:26.900
This is global to the entire program.

140
00:08:26.920 --> 00:08:31.750
So in this case I'm calling global example and which number do I use.

141
00:08:31.840 --> 00:08:34.500
What's the first thing you do you look in here.

142
00:08:34.630 --> 00:08:37.620
Is there a variable called knowm defined in here.

143
00:08:37.660 --> 00:08:38.740
No there isn't.

144
00:08:38.740 --> 00:08:41.730
Then you look outward and there it is.

145
00:08:41.980 --> 00:08:48.260
So this displays 300 then I take no minimal to apply to.

146
00:08:48.370 --> 00:08:49.490
OK which Nahm.

147
00:08:49.600 --> 00:08:50.410
Same one.

148
00:08:50.410 --> 00:08:56.810
So this will now become 600 and I'm going to display 600.

149
00:08:56.920 --> 00:08:59.890
Now what if I call this function again and I'll call it twice in the main.

150
00:08:59.890 --> 00:09:00.930
What if I call it again.

151
00:09:01.030 --> 00:09:05.910
Well the next time I call it this variable still has 600 in it it's a global variable.

152
00:09:05.950 --> 00:09:12.770
So the next time I call it we look at Nahm numbers 600 which display I multiply it by 2.

153
00:09:12.780 --> 00:09:14.670
OK so that's twelve hundred now.

154
00:09:15.750 --> 00:09:17.410
And then I display it again.

155
00:09:17.630 --> 00:09:19.560
So it's twelve hundred this time.

156
00:09:19.590 --> 00:09:24.410
Notice the global variable does not get re-initialize every time it only gets initialized that one time

157
00:09:24.410 --> 00:09:27.520
when you actually before main is even called that's initialized.

158
00:09:27.650 --> 00:09:32.500
So here we're going to end up with 300 600 and then six hundred and twelve hundred.

159
00:09:32.510 --> 00:09:37.510
So let's me and comment that one line out so we can call this twice right here.

160
00:09:39.460 --> 00:09:40.540
And let's run that.

161
00:09:40.690 --> 00:09:44.660
And you could see here we've got three hundred six hundred and six hundred twelve hundred.

162
00:09:44.840 --> 00:09:46.930
Just what we would expect.

163
00:09:46.930 --> 00:09:49.180
All right so let's look at one more example.

164
00:09:49.180 --> 00:09:55.480
Here is the static local example and I scroll up close that down.

165
00:09:55.480 --> 00:10:03.010
Now we mentioned what a static variable was a static variable is a variable that is defined locally.

166
00:10:03.130 --> 00:10:08.860
In this case this is a static local variable so numb is visible in here.

167
00:10:09.190 --> 00:10:15.490
But because we're using the static qualifier what that means is that this number variable will be initialized

168
00:10:15.490 --> 00:10:18.410
to 5 0 0 0 0 in the first time this function is called.

169
00:10:18.580 --> 00:10:21.190
After that it retains its previous value.

170
00:10:21.310 --> 00:10:26.080
Real different from the example we see on local value which had got re-initialize every time.

171
00:10:26.200 --> 00:10:35.400
So let's say I call static local example the first time we're initializing numb to 5000 that only happens

172
00:10:35.400 --> 00:10:36.180
once.

173
00:10:36.450 --> 00:10:37.350
Then I'm using it.

174
00:10:37.350 --> 00:10:37.950
Which one.

175
00:10:37.950 --> 00:10:40.840
Again I'm looking inside local scope first.

176
00:10:40.950 --> 00:10:46.160
So that's going to display 5000 here then I'm incrementing number 0 0 0 0 0.

177
00:10:46.260 --> 00:10:46.910
OK.

178
00:10:48.110 --> 00:10:51.900
Now it's six 6000 and then I'm displaying it again.

179
00:10:51.900 --> 00:10:55.070
Well now it's six thousand.

180
00:10:55.090 --> 00:10:57.660
Now suppose I call static local again.

181
00:10:57.700 --> 00:11:02.530
Since this has already been initialized it won't be initialized again and it's going to retain its previous

182
00:11:02.530 --> 00:11:02.970
value.

183
00:11:02.970 --> 00:11:04.900
So it's six thousand right now.

184
00:11:04.900 --> 00:11:06.040
Here it is.

185
00:11:06.040 --> 00:11:11.400
So if I display it I'm going to get a 6000 thousand and then I'm going to incremented again by a thousand

186
00:11:11.620 --> 00:11:12.550
and display it again.

187
00:11:12.550 --> 00:11:18.350
So I'm going to get 7000 and when I run this a third time I'll end up with the 7000 I started with.

188
00:11:18.590 --> 00:11:21.190
And the eight thousand that I end up with.

189
00:11:21.550 --> 00:11:23.650
So as you can see it's pretty straightforward.

190
00:11:23.650 --> 00:11:29.590
This is a real useful concept the concept of static local variables because you've got to of a number

191
00:11:29.680 --> 00:11:34.840
or a variable in this case that behaves like a global variable right because it's retaining its value

192
00:11:35.200 --> 00:11:37.150
but its scope is local.

193
00:11:37.300 --> 00:11:41.380
So you don't have the same problems that you have with global variables which means that they're visible

194
00:11:41.380 --> 00:11:44.560
throughout the program in any piece of code could change it.

195
00:11:44.620 --> 00:11:49.490
In this case if this number variable right here gets a really strange value.

196
00:11:49.510 --> 00:11:53.410
The only place they could have gotten it from was inside this function and you know exactly where to

197
00:11:53.410 --> 00:11:54.110
look.

198
00:11:54.460 --> 00:11:56.410
So that wraps up scope.

199
00:11:56.410 --> 00:11:57.880
It's a pretty simple concept.

200
00:11:57.880 --> 00:12:04.390
And it's again think look local first then look out then look out and look out until you hit global

201
00:12:04.390 --> 00:12:05.060
scope.

202
00:12:05.350 --> 00:12:08.450
If you don't find that variable there then you've got a compiler error.
