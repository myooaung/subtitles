WEBVTT
1
00:00:05.880 --> 00:00:13.840
In this video we'll learn about operator precedence and associativity and C++ C++ has well-defined operator

2
00:00:13.840 --> 00:00:16.210
precedence and associativity rules.

3
00:00:16.300 --> 00:00:21.820
Here's a table showing the precedence and associativity of some of C++ his operators.

4
00:00:21.820 --> 00:00:23.760
Note that this table is not complete.

5
00:00:23.800 --> 00:00:26.900
It only shows a subset of C++ operators.

6
00:00:27.100 --> 00:00:33.110
You can find complete operator precedence tables online and in most C++ books.

7
00:00:33.110 --> 00:00:34.370
Note that there's two columns.

8
00:00:34.370 --> 00:00:40.220
The first column shows the operator the operators and higher rows have higher precedence than operators

9
00:00:40.220 --> 00:00:41.580
on lower rows.

10
00:00:41.690 --> 00:00:46.060
So as you can see the assignment operators are down at the bottom as you would expect.

11
00:00:46.190 --> 00:00:52.570
And the parenthesis operator is at the top operators on the same row have the same precedence.

12
00:00:52.580 --> 00:00:58.220
So for example you can see that addition and subtraction have the same precedence.

13
00:00:58.250 --> 00:01:00.680
I think precedence is pretty easy to understand.

14
00:01:00.920 --> 00:01:04.130
We learned operator precedence when we learn math in grammar school.

15
00:01:04.130 --> 00:01:10.760
It's the same idea here except we have more operators to consider the second column is the associativity

16
00:01:10.760 --> 00:01:11.660
column.

17
00:01:11.660 --> 00:01:16.520
This is the part that many times confuses students and even C++ programmers.

18
00:01:16.850 --> 00:01:20.590
Notice that associativity is left to right or right to left.

19
00:01:20.780 --> 00:01:21.990
Let's see what it means.

20
00:01:24.030 --> 00:01:26.580
So what's associativity all about.

21
00:01:26.580 --> 00:01:31.200
Suppose you have an expression with two adjacent operators and these operators are different.

22
00:01:31.200 --> 00:01:36.990
Like we see in the first example we can look for operators in the precedence chart and if one of the

23
00:01:36.990 --> 00:01:41.790
operators has higher precedence than the other then that's the operator that supplied first.

24
00:01:41.790 --> 00:01:45.110
This is exactly what we've been doing with our math that we've learned.

25
00:01:45.570 --> 00:01:51.300
But suppose the two operators are the same or they're different but they have the same level of precedence

26
00:01:51.990 --> 00:01:55.470
now precedence doesn't really help us in this case.

27
00:01:55.500 --> 00:02:01.880
We determine how the operators are applied by using their associativity in the second example.

28
00:02:01.880 --> 00:02:08.250
We have the same operator up one use the JSA only if OP one associates left to right.

29
00:02:08.270 --> 00:02:14.690
Then we apply the operator to expression one and expression to first first if OP 1 associates right

30
00:02:14.690 --> 00:02:20.340
to left then we apply the operator to expression to an expression 3 first.

31
00:02:20.360 --> 00:02:25.250
Of course you can always use parentheses to remove any doubt and be sure that your result is what you

32
00:02:25.250 --> 00:02:26.330
expect.

33
00:02:26.330 --> 00:02:29.900
Using parentheses is good practice with complex expressions.

34
00:02:30.730 --> 00:02:32.710
Let's see a couple of simple examples.

35
00:02:34.110 --> 00:02:36.590
In the first example we have three operators.

36
00:02:36.590 --> 00:02:42.500
The assignment operator the addition operator and the multiplication operator depressin its chart tells

37
00:02:42.500 --> 00:02:48.760
us that the multiplication operator has the highest precedence followed by addition followed by assignment.

38
00:02:48.770 --> 00:02:55.760
So I've rewritten the same statement on line 2 showing the order of evaluation by including parentheses.

39
00:02:55.760 --> 00:03:02.980
Note that the evaluation takes place in order of multiplication addition and finally assignment in the

40
00:03:02.980 --> 00:03:04.140
second example.

41
00:03:04.150 --> 00:03:06.010
We again have three operators.

42
00:03:06.010 --> 00:03:09.690
The assignment operator the addition operator and the subtraction operator.

43
00:03:10.330 --> 00:03:16.060
In this case addition and subtraction are of higher precedence than assignment but they both have the

44
00:03:16.060 --> 00:03:18.090
same precedence.

45
00:03:18.140 --> 00:03:24.490
So in this case we need to use their associativity to determine the order of evaluation.

46
00:03:24.540 --> 00:03:28.440
We see that plus and minus associate left to right.

47
00:03:28.440 --> 00:03:35.500
I've rewritten this example using parenthesis to show the order of evaluation many beginning C++ programmers

48
00:03:35.890 --> 00:03:40.640
keep an operator precedence chart handy when they first start out with C++.

49
00:03:40.800 --> 00:03:45.520
After not too long you get to know the operators and this becomes second nature just like using math

50
00:03:45.530 --> 00:03:46.550
precedence did.

51
00:03:46.590 --> 00:03:47.870
The more we used it in school.
