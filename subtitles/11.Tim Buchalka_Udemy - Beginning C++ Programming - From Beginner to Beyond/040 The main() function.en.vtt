WEBVTT
1
00:00:05.590 --> 00:00:14.670
This video will briefly go over the C++ main function every C++ program must have exactly one main function

2
00:00:14.670 --> 00:00:19.030
somewhere a C++ program can consist of hundreds of files.

3
00:00:19.200 --> 00:00:23.070
But one of those files must contain the main function.

4
00:00:23.100 --> 00:00:26.560
Note that the named main must be written in lower case letters.

5
00:00:26.820 --> 00:00:33.240
When a C++ program executes the main function is called by the operating system and the code between

6
00:00:33.240 --> 00:00:40.380
the curly braces executes when execution hits the return statement the program returns the integer value

7
00:00:40.380 --> 00:00:42.340
to the operating system.

8
00:00:42.480 --> 00:00:49.090
If the return value is 0 then the program terminated successfully if the return value is not 0.

9
00:00:49.230 --> 00:00:55.310
Then the operating system can check the value returned and determined what went wrong.

10
00:00:55.320 --> 00:01:00.390
There are two versions of Main and they're both valid as per the C++ specification.

11
00:01:00.390 --> 00:01:05.250
So far we've only seen the version on the left which returns an integer and has nothing between the

12
00:01:05.250 --> 00:01:06.510
two parentheses.

13
00:01:06.810 --> 00:01:11.470
This version of main expects no information from the operating system in order to run.

14
00:01:11.490 --> 00:01:15.300
This is the version that will use mostly in this course.

15
00:01:15.390 --> 00:01:21.030
The second version of Main is the one on the right that is version main expects information from the

16
00:01:21.030 --> 00:01:22.220
operating system.

17
00:01:22.320 --> 00:01:27.150
So suppose that when you execute the program you need to pass information into the program from the

18
00:01:27.150 --> 00:01:28.350
command line.

19
00:01:28.350 --> 00:01:31.820
This is very very common for command line applications.

20
00:01:31.950 --> 00:01:35.980
In this case we tell the compiler that we need two pieces of information.

21
00:01:36.090 --> 00:01:39.820
First we need the number of pieces of information that were passed in.

22
00:01:39.880 --> 00:01:46.110
That's Argosy we can use any variable name here but historically we use args C which stands for argument

23
00:01:46.110 --> 00:01:47.440
count.

24
00:01:47.610 --> 00:01:52.630
The second piece of information is the actual arguments that we passed in into the program.

25
00:01:52.680 --> 00:01:56.340
This is captured by arger V which is the argument vector.

26
00:01:56.420 --> 00:02:00.980
The syntax for R V looks a little strange but it all makes sense as the course progresses.

27
00:02:01.140 --> 00:02:07.770
It's basically a bunch of strings such as programs that DXi argument one argument to in this example.

28
00:02:07.830 --> 00:02:10.500
We'll talk more about strings and vectors as we move forward.

29
00:02:10.620 --> 00:02:13.300
But I wanted to show you both versions of the main function.

30
00:02:13.410 --> 00:02:16.770
In case you're looking at code out there you see the second version.

31
00:02:16.770 --> 00:02:20.190
Both are perfectly valid and both are commonly seen.

32
00:02:20.190 --> 00:02:23.240
Note that main must always return an integer.

33
00:02:23.400 --> 00:02:25.870
Main happens to be an example of a function.

34
00:02:25.950 --> 00:02:30.200
A function is basically a name that we can use to reference a block of code.

35
00:02:30.240 --> 00:02:34.530
In this example maned is everything between the curly braces.

36
00:02:34.540 --> 00:02:39.320
Functions are very commonly used and will write her own functions as the course progresses.

37
00:02:39.540 --> 00:02:45.000
There'll be an entire section of the course devoted to functions but Maine is a very special function

38
00:02:45.450 --> 00:02:47.020
as we learn C++.

39
00:02:47.040 --> 00:02:53.430
Our entire program will be contained inside the main function and as our programs become more complex

40
00:02:53.700 --> 00:03:00.090
we'll write our own functions and then classes to better modularize and organize our code in the next

41
00:03:00.090 --> 00:03:00.650
video.

42
00:03:00.660 --> 00:03:04.820
We'll talk about name spaces and see how we can use them in our first program.
