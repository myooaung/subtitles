WEBVTT
1
00:00:05.600 --> 00:00:09.990
In this short video we'll see how the concert qualifier affects pointers.

2
00:00:10.380 --> 00:00:14.970
We've already seen that the use of concert with function reference parameters essentially makes them

3
00:00:14.970 --> 00:00:19.560
read only in C++ we can qualify a pointer in several ways.

4
00:00:19.560 --> 00:00:21.890
First we don't have to use Konst at all.

5
00:00:21.960 --> 00:00:25.840
In this case we have a pointer just as we've been using up to this point.

6
00:00:25.890 --> 00:00:30.850
We can change the data the pointers pointed to and we can change the pointer itself and make it point

7
00:00:30.850 --> 00:00:32.370
somewhere else.

8
00:00:32.370 --> 00:00:37.170
The Konst qualifier gives us more fine grained control of what we allow to be changed.

9
00:00:37.230 --> 00:00:42.810
We can have pointers to constants constant pointers and constant pointers to constants.

10
00:00:42.810 --> 00:00:46.210
These will be very useful when we pass pointers to functions in the next video.

11
00:00:46.320 --> 00:00:53.440
Let's take a look at each one of the in the case of pointers to constants the data pointed to by the

12
00:00:53.440 --> 00:00:55.790
pointer is constant and can't be changed.

13
00:00:55.810 --> 00:00:59.230
However the pointer itself can change and point elsewhere.

14
00:00:59.230 --> 00:01:01.120
Let's take a look at this example.

15
00:01:01.180 --> 00:01:03.520
We have two integers declared in initialize.

16
00:01:03.520 --> 00:01:05.280
These are high score and low score.

17
00:01:05.590 --> 00:01:11.250
But this time when we declare the pointer we use the Konst qualifier before the type that we point to.

18
00:01:11.260 --> 00:01:18.430
So score pointer is a pointer to an integer constant and we initialize it to point to a high score.

19
00:01:18.430 --> 00:01:23.650
If we attempt to change the value of the pointed to data in this case high score will get a compiler

20
00:01:23.650 --> 00:01:24.780
error.

21
00:01:24.820 --> 00:01:29.500
However we're free to assign another address to the pointer and have it points somewhere else as we

22
00:01:29.500 --> 00:01:35.390
do in the last assignment statement in the case of constant pointers.

23
00:01:35.400 --> 00:01:37.550
It's the pointer itself that's constant.

24
00:01:37.560 --> 00:01:41.400
So the data pointed to by the pointer can be changed via the pointer.

25
00:01:41.400 --> 00:01:46.740
However the pointer itself cannot be changed and can't point to anything else.

26
00:01:46.740 --> 00:01:49.110
Notice that we still use the Konst qualifier.

27
00:01:49.110 --> 00:01:52.910
However we use it before the asterisk in the pointer declaration.

28
00:01:53.010 --> 00:01:57.080
So we're declaring score pointer as a Konst pointer to integer.

29
00:01:57.090 --> 00:01:59.680
All right let's look at the last case.

30
00:01:59.790 --> 00:02:03.220
In this case it's a constant pointer to constants.

31
00:02:03.300 --> 00:02:09.960
We need to use the cons qualifier twice in the pointer declaration so the data pointed to by the pointer

32
00:02:09.960 --> 00:02:15.720
is constant and can't change and the pointer itself is also constant and can't change.

33
00:02:15.720 --> 00:02:21.250
Notice the syntax score pointer is a constant pointer to an integer constant.

34
00:02:21.360 --> 00:02:27.460
In this case if we try to modify either the data or the pointer we get compiler errors.

35
00:02:27.510 --> 00:02:32.190
The cons qualifier is very useful and it's often used when passing pointers to functions.

36
00:02:32.310 --> 00:02:33.670
We'll see that in the next video.
