WEBVTT
1
00:00:05.480 --> 00:00:09.050
Welcome back I hope you had fun doing that challenge.

2
00:00:09.050 --> 00:00:13.340
I'm in the Section 20 work space and the challenge three solution.

3
00:00:13.340 --> 00:00:18.050
This is an example of explaining something is going to be much easier than explaining the actual problem

4
00:00:18.050 --> 00:00:20.230
to be with this code is so simple.

5
00:00:20.330 --> 00:00:23.660
Hopefully did it similar to the way I did it.

6
00:00:23.660 --> 00:00:25.480
Let the T.L. do its thing.

7
00:00:25.480 --> 00:00:27.460
Yes JELAS superpowerful.

8
00:00:27.710 --> 00:00:29.330
Let's take a look at part one.

9
00:00:30.620 --> 00:00:35.620
Here's the solution for part 1 and let's walk through this one line at a time.

10
00:00:35.660 --> 00:00:43.740
We've got our map here called words and it's a map of a string integer key value pairs of mine.

11
00:00:43.850 --> 00:00:48.980
That's what I'm going to read the line from a file into I've got a word and this is how I want to process

12
00:00:48.980 --> 00:00:53.320
my words here's my file my file is words dot text.

13
00:00:53.570 --> 00:01:00.530
If I can't open it I'm down here and I'm out if I can't open it when I want to do is I want to process

14
00:01:00.530 --> 00:01:02.480
the words from the line I just read.

15
00:01:02.570 --> 00:01:04.140
And that's not so easy to do there.

16
00:01:04.150 --> 00:01:06.800
It's much easier to do if you use a string Stream.

17
00:01:06.800 --> 00:01:10.770
And if you look at the IO videos I talked about string streams in that video.

18
00:01:10.940 --> 00:01:15.380
So in this case I'm creating a string stream called s s over line.

19
00:01:15.500 --> 00:01:19.640
So remember we just read a line that said we read and this is a test

20
00:01:22.430 --> 00:01:25.030
and we don't want to deal with new lines would want to deal with any of that.

21
00:01:25.040 --> 00:01:28.850
We just read that line and then what we're going to do is we're going to create the string stream from

22
00:01:28.850 --> 00:01:30.790
that line and that's going to put in that buffer.

23
00:01:30.800 --> 00:01:36.390
So now I can read words from the string stream and it makes it really really easy.

24
00:01:36.470 --> 00:01:42.260
So you can see right there while I'm going to extract a word from the strings.

25
00:01:42.300 --> 00:01:47.600
I'm going to extract this word and then this word and then this word and then this word for each one

26
00:01:47.600 --> 00:01:53.000
of those words I'm going to pass it into clean string so I could get rid of the periods at the end and

27
00:01:53.010 --> 00:01:55.600
suppose I have something like commas and so forth.

28
00:01:55.670 --> 00:01:57.110
It'll get rid of that.

29
00:01:57.110 --> 00:02:02.930
So in this case I will end up with a clean word and all I have to do is just say words and that's my

30
00:02:02.930 --> 00:02:06.290
map I'm using the subscript OPERATOR Right.

31
00:02:06.290 --> 00:02:12.180
So in this case it's equivalent to saying something like this words this.

32
00:02:12.880 --> 00:02:15.830
Let's assume that we're working with that guy right there.

33
00:02:16.060 --> 00:02:17.380
That is my key.

34
00:02:17.400 --> 00:02:20.280
If it doesn't exist the value is going to be added with the key right.

35
00:02:20.320 --> 00:02:21.980
So in this case that's my key.

36
00:02:22.090 --> 00:02:23.320
What do I want to do.

37
00:02:23.320 --> 00:02:26.380
I want to increment the value at that key.

38
00:02:26.410 --> 00:02:27.190
Simple as that.

39
00:02:27.190 --> 00:02:29.390
So now I just put that word in once.

40
00:02:29.590 --> 00:02:33.340
The next time I see that same word it will already be there.

41
00:02:33.340 --> 00:02:36.050
So it's going to increment this to two and so forth.

42
00:02:36.070 --> 00:02:36.610
That's it.

43
00:02:36.610 --> 00:02:37.570
That's the code.

44
00:02:37.570 --> 00:02:42.390
It's really one line right there that does all the good work.

45
00:02:42.610 --> 00:02:47.200
I come into this line out right here and you can use that for debugging purposes if you like to make

46
00:02:47.200 --> 00:02:49.990
sure that you're reading these lines correctly from the file.

47
00:02:49.990 --> 00:02:50.390
That's it.

48
00:02:50.410 --> 00:02:52.870
That's that's part what I told you was pretty simple.

49
00:02:52.870 --> 00:02:59.440
I'm closing the file and then I'm calling display words and display words will come up here for part

50
00:02:59.440 --> 00:03:06.640
one and it's going to call this function right there and all it's doing is it's just doing a lot of

51
00:03:07.030 --> 00:03:08.780
formatting which is just to look nice.

52
00:03:08.920 --> 00:03:17.980
But for each pair from the words map I'm dealing with the first and the second.

53
00:03:17.980 --> 00:03:20.170
The first is the key.

54
00:03:20.720 --> 00:03:23.010
The second is the value.

55
00:03:23.050 --> 00:03:25.430
So this is just displaying at 8.

56
00:03:25.460 --> 00:03:27.480
Frank 3 and so forth.

57
00:03:28.040 --> 00:03:30.150
OK let's look at part two.

58
00:03:31.900 --> 00:03:38.320
Here's part two very very similar the idea we've got our map is words and this little bit different

59
00:03:38.470 --> 00:03:46.390
because I've got a key here and my value is not an end in this case it's a set of events the whole point

60
00:03:46.390 --> 00:03:50.120
of this exercise was to show you how you can build these things up.

61
00:03:50.120 --> 00:03:51.820
I mean it's really really powerful.

62
00:03:51.970 --> 00:03:58.240
Many times we need to solve a problem like this and you'll see some programmers creating classes for

63
00:03:58.240 --> 00:04:02.910
words and for lines and you create a new class that's going to model the occurrences of a line.

64
00:04:03.040 --> 00:04:06.430
You really don't need to do any of that because the ACL does this for you.

65
00:04:06.490 --> 00:04:08.430
This is a real powerful concept.

66
00:04:08.620 --> 00:04:13.930
I mean I'm already modeling a key value pairs right here why do I need to create another class to do

67
00:04:13.930 --> 00:04:16.080
this when I just need to solve this problem.

68
00:04:16.270 --> 00:04:18.960
OK so in this case I've got the same variables.

69
00:04:18.970 --> 00:04:20.170
I've got the same file.

70
00:04:20.170 --> 00:04:23.400
I'm opening my file right here on line 88.

71
00:04:23.560 --> 00:04:28.240
I need to have a running count of line numbers because I need my line numbers so I'm just starting line

72
00:04:28.240 --> 00:04:29.140
numbers at 0.

73
00:04:29.140 --> 00:04:31.610
I mean I haven't really read anything yet.

74
00:04:31.630 --> 00:04:35.110
Now what I'm going to do is I'm going to read me clear this little bit.

75
00:04:35.110 --> 00:04:38.670
I'm going to read the line into this variable from the file.

76
00:04:39.160 --> 00:04:44.150
And now I want to increment line number because I just read a line so my number now would be 1.

77
00:04:44.170 --> 00:04:49.970
Again I'm using the string stream just to process words cleaning the string.

78
00:04:50.140 --> 00:04:54.390
And this is the only difference here since I'm doing something like words.

79
00:04:54.490 --> 00:05:02.620
Again let's assume we're using that same that word we just read this this piece right here.

80
00:05:02.620 --> 00:05:04.120
That's the key.

81
00:05:04.150 --> 00:05:09.310
This where we turned the pair and I can access the value right there.

82
00:05:09.310 --> 00:05:10.530
So what am I doing.

83
00:05:10.570 --> 00:05:20.080
I am inserting 9 number into the value which is that guy right so I'm using the sets insert method which

84
00:05:20.080 --> 00:05:24.160
is really really easy the first time through the line numbers the line number.

85
00:05:24.160 --> 00:05:31.490
I'm just inserting that key value pair and the next time it's just updating that value and that's it.

86
00:05:31.520 --> 00:05:33.230
Let's run this one last time

87
00:05:36.610 --> 00:05:40.940
here's my output and you can double check it in the code line editor.

88
00:05:40.960 --> 00:05:42.810
But it's really really straightforward.

89
00:05:42.970 --> 00:05:47.200
Here's part one where you've got your word and the number of times that occurs.

90
00:05:47.500 --> 00:05:54.090
And here's part two where we've got the word and the line numbers that occurred on.

91
00:05:54.310 --> 00:05:54.590
OK.

92
00:05:54.610 --> 00:05:58.200
So hopefully you had fun with this one and hopefully you can see how easy it is now.

93
00:05:58.450 --> 00:06:03.250
So in the next video we'll talk about the container adapter's stack and queue and then we'll have another

94
00:06:03.250 --> 00:06:04.150
challenge for this.
