1
00:00:05,510 --> 00:00:13,060
We've seen how we can attempt to write generic functions using preprocessor macros in this video we'll

2
00:00:13,060 --> 00:00:18,050
see how we can you see post plus templates to accomplish writing generic functions.

3
00:00:18,430 --> 00:00:20,720
So what is a C++ template.

4
00:00:21,070 --> 00:00:27,610
A template is a generic blueprint that the compiler uses to generate specialized functions and classes

5
00:00:28,630 --> 00:00:33,550
as I just said C++ supports function and class templates.

6
00:00:33,550 --> 00:00:38,870
In this video we'll learn about function templates and more C-Class templates in the next video.

7
00:00:39,850 --> 00:00:46,060
The idea with templates is that we define a template with a placeholder type and then we plug in the

8
00:00:46,060 --> 00:00:48,500
actual type we want when we need it.

9
00:00:49,250 --> 00:00:53,250
Then the compiler generates the specific function or class that we need.

10
00:00:54,010 --> 00:00:57,040
Remember all of this happens at compile time.

11
00:00:57,400 --> 00:01:02,570
If you're coming from other programming languages you might be used to this happening at runtime.

12
00:01:02,590 --> 00:01:04,670
C++ does it at compile time.

13
00:01:04,750 --> 00:01:12,380
So we get the benefit of the compiler performing type checking for us before the program executes C++

14
00:01:12,380 --> 00:01:16,810
template supports the concept of generic programming or metaprogramming.

15
00:01:17,120 --> 00:01:23,000
Since we're providing a generic representation of a function or class and then the compiler writes the

16
00:01:23,000 --> 00:01:25,160
actual function or class for us.

17
00:01:25,370 --> 00:01:33,950
That's very very powerful However with power comes complexity C++ templates can be very very complex.

18
00:01:34,010 --> 00:01:39,620
And while the concept is easy to understand seeing them in practice can sometimes be very intimidating

19
00:01:39,950 --> 00:01:42,790
even for experienced programmers.

20
00:01:42,840 --> 00:01:48,270
Also the error message is provided by the compiler can be very difficult to understand.

21
00:01:48,780 --> 00:01:55,970
So let's see how we can use function templates with the Max function that we used in the previous video.

22
00:01:55,980 --> 00:02:01,500
Let's quickly review we want to write a max function that returns the maximum of two integers passed

23
00:02:01,500 --> 00:02:02,360
into it.

24
00:02:02,490 --> 00:02:08,880
We can use a simple conditional expression which if you recall is equivalent to an if else statement.

25
00:02:08,880 --> 00:02:15,050
Now we can simply use the max function in passing integers and get back the max of those integers.

26
00:02:15,050 --> 00:02:19,260
Now suppose we need a max function for doubles and another for characters.

27
00:02:19,380 --> 00:02:22,450
Then we could have another one for floats and longs you get the idea.

28
00:02:22,490 --> 00:02:27,780
We could end up writing many of these max functions just as we saw in the previous lecture.

29
00:02:27,800 --> 00:02:29,820
The code is the same for all of them.

30
00:02:29,840 --> 00:02:32,270
It's the code with the conditional operator.

31
00:02:32,390 --> 00:02:35,860
The only thing that changes are the types of the parameters.

32
00:02:36,230 --> 00:02:42,550
So now let's see how we can use templates to allow us to write just one blueprint for this function.

33
00:02:42,710 --> 00:02:48,640
Why don't we simply replace the type with an identifier that represents any type.

34
00:02:48,660 --> 00:02:54,070
In this case we use the uppercase t but we can use any valid identifier we wish.

35
00:02:54,300 --> 00:02:54,900
So that's it.

36
00:02:54,900 --> 00:02:55,950
That was easy.

37
00:02:56,010 --> 00:02:57,320
That's what we want right.

38
00:02:57,540 --> 00:03:02,570
Yes indeed but the compiler won't know what to do with this and it's going to give us a compiler error.

39
00:03:02,610 --> 00:03:08,250
We need to explicitly tell the compiler that this is a template function so let's do that in the next

40
00:03:08,250 --> 00:03:10,590
slide.

41
00:03:10,590 --> 00:03:17,810
Notice that now we provide the compiler with the line template and type name T in angle brackets.

42
00:03:17,860 --> 00:03:19,950
That's the template parameter type.

43
00:03:19,960 --> 00:03:25,390
This tells the compiler that T is the type name that will be replaced with whatever the user needs.

44
00:03:26,200 --> 00:03:30,090
Now this will compile but it will not generate any code.

45
00:03:30,130 --> 00:03:32,980
Let me say that again this will not generate any code.

46
00:03:32,980 --> 00:03:35,430
It's simply a template or a blueprint.

47
00:03:36,260 --> 00:03:41,560
Code is not generated by the compiler until the user uses a specialized version of the template.

48
00:03:41,810 --> 00:03:43,460
I'll show you how to do that a second.

49
00:03:43,610 --> 00:03:50,760
But first I want you to know that we can use the reserve word type name or class in templates.

50
00:03:51,510 --> 00:03:53,410
They are essentially equivalent.

51
00:03:53,410 --> 00:03:58,430
I will use type name in this course but you'll see both type name and class in production code.

52
00:03:58,650 --> 00:04:00,240
So please be aware of that.

53
00:04:00,600 --> 00:04:03,820
OK so now how do we use this template function.

54
00:04:03,840 --> 00:04:08,560
Notice the code in the slide we declared two integers a and b and initialize them.

55
00:04:08,670 --> 00:04:14,600
Then we call Max with a and b as parameters but also notice the template parameter we're using.

56
00:04:14,640 --> 00:04:16,910
That's the end in angle brackets.

57
00:04:16,950 --> 00:04:22,770
This gives the compiler all the information it needs to actually generate a specialized function from

58
00:04:22,770 --> 00:04:26,730
the template we created using it in place of T.

59
00:04:26,820 --> 00:04:28,400
The syntax should look familiar.

60
00:04:28,410 --> 00:04:31,830
We used it previously when we created vectors and smart pointers.

61
00:04:32,070 --> 00:04:32,860
You guessed it.

62
00:04:32,860 --> 00:04:37,940
Vector unique pointers shared pointers and so forth are implemented as template classes.

63
00:04:39,100 --> 00:04:42,540
Now suppose we need a max function for doubles easy.

64
00:04:42,580 --> 00:04:45,340
We simply use max and passen to doubles.

65
00:04:45,340 --> 00:04:46,510
Say C and D.

66
00:04:46,930 --> 00:04:50,210
And use a template parameter double in the angle brackets.

67
00:04:50,230 --> 00:04:55,630
The compiler now knows that it needs to generate the double version of the Max function.

68
00:04:55,630 --> 00:05:01,060
Often the compiler can deduce the type of the template parameter and we don't even need to provide it

69
00:05:01,060 --> 00:05:02,950
as in the second statement.

70
00:05:02,950 --> 00:05:03,690
How cool is that.

71
00:05:03,690 --> 00:05:09,640
And that makes it even easier and we don't have to stop with doubles if we need to compare two characters

72
00:05:10,090 --> 00:05:16,060
and return the max character we can simply use the template function Max with chars and the compiler

73
00:05:16,060 --> 00:05:19,110
will generate the character version of the Max function.

74
00:05:19,450 --> 00:05:21,730
We can use almost any type we need.

75
00:05:21,730 --> 00:05:25,620
Notice I said almost what do I mean by almost any type.

76
00:05:25,930 --> 00:05:29,280
Well let's take a closer look at the function again and you'll see what I mean.

77
00:05:30,490 --> 00:05:36,970
Notice that the code in the template function is using the Greater than operator to compare A and B.

78
00:05:36,970 --> 00:05:42,490
This means that whatever type we use for T must support this operator.

79
00:05:42,790 --> 00:05:46,890
For primitive types like ints in chars and doubles it's not a problem.

80
00:05:47,110 --> 00:05:53,320
But for our own class types we have to be sure that our class overloads the Greater than operator.

81
00:05:53,320 --> 00:05:55,740
Or this won't compile.

82
00:05:55,840 --> 00:06:02,110
In this example we're assuming we have a player class and we're using max with player objects so the

83
00:06:02,110 --> 00:06:08,470
compiler will generate the max function that expects and compares player objects unless the player class

84
00:06:08,500 --> 00:06:10,640
overloads the Greater than operator.

85
00:06:10,720 --> 00:06:16,650
This code won't compile there is no limit to the number of template parameters you can have.

86
00:06:16,830 --> 00:06:19,280
And of course they can be of different types.

87
00:06:19,440 --> 00:06:25,860
In this example we're creating a function template for a function named fuck it expects two parameters.

88
00:06:25,860 --> 00:06:30,130
The first is of type T one and the second is of type 2.

89
00:06:30,600 --> 00:06:34,060
Notice that we specify two template parameters in this case.

90
00:06:34,140 --> 00:06:35,820
So there is the function declaration.

91
00:06:35,820 --> 00:06:37,300
Now let's see how we would use it.

92
00:06:38,300 --> 00:06:44,930
We can call func and explicitly provide an integer and a double in this example or in the case of the

93
00:06:44,930 --> 00:06:50,990
call to fuck with no template parameters the compiler will deduce the types from the function arguments

94
00:06:51,900 --> 00:06:52,710
that's it.

95
00:06:52,710 --> 00:06:59,730
Now of course we can pass by value by reference by pointer with Konst modifiers and so forth and all

96
00:06:59,730 --> 00:07:02,820
of the function parameters don't have to be generic.

97
00:07:02,880 --> 00:07:05,820
You can see all the possibilities and combinations.

98
00:07:05,820 --> 00:07:10,620
Now let's head over to the idea and write a few template functions.

99
00:07:10,660 --> 00:07:18,000
Ok so I'm in the section 20 workspace in the function templates project and what I'd like to do here

100
00:07:18,030 --> 00:07:22,890
is go over those two templates that we created in the slides and I'll show you how they work with integers

101
00:07:22,890 --> 00:07:24,340
with doubles with characters.

102
00:07:24,480 --> 00:07:28,950
Basically with primitive types where there are no issues with overloading operators then what we'll

103
00:07:28,950 --> 00:07:31,080
do is create our own type.

104
00:07:31,110 --> 00:07:33,110
We'll call it person or something like that.

105
00:07:33,170 --> 00:07:37,860
And then you'll see some of the issues that we have to address to get that person class or structure

106
00:07:37,860 --> 00:07:40,310
in this case to work with these templates.

107
00:07:40,470 --> 00:07:43,890
And then what we'll do is we'll create a swap template function at the end.

108
00:07:43,890 --> 00:07:46,440
All right so let's go over what we've got here.

109
00:07:46,440 --> 00:07:52,340
Now if you recall we've got a function called men and it's a template function right.

110
00:07:52,350 --> 00:07:54,570
So there's my template parameter Tepe.

111
00:07:54,840 --> 00:07:59,460
And basically if you write this with ints instead of T's it's really really easy and all you need to

112
00:07:59,460 --> 00:08:02,300
do is replace it with the generic type T.

113
00:08:02,430 --> 00:08:07,920
The compiler will take care of the rest so it's going to be an array of type T A B of type T is what

114
00:08:07,920 --> 00:08:13,340
it expects and is going to return a type T and all we're doing is comparing using less than.

115
00:08:13,350 --> 00:08:15,050
Now here's where the issue is.

116
00:08:15,150 --> 00:08:20,730
If we're using integers here then assuming a and b are integers then the less sand works great right.

117
00:08:20,740 --> 00:08:24,720
We know how to compare integers and doubles in characters and so forth.

118
00:08:24,720 --> 00:08:27,120
But when we use our own types.

119
00:08:27,120 --> 00:08:29,780
That's where the issue comes in and I'll talk about that in a second.

120
00:08:30,030 --> 00:08:34,470
But first let's just look at a real simple example of using it and then we'll look at this template

121
00:08:34,470 --> 00:08:36,240
function right here next.

122
00:08:36,360 --> 00:08:39,660
Remember at this point the compiler has done nothing for us.

123
00:08:39,660 --> 00:08:45,360
It hasn't all it's done is made sure that this is valid but it has not created an integer version of

124
00:08:45,360 --> 00:08:46,980
this or double version of this.

125
00:08:46,980 --> 00:08:50,020
Nothing gets created it's just a blueprint right now.

126
00:08:50,070 --> 00:08:53,550
So what we've got here is right here on line 18.

127
00:08:53,760 --> 00:08:59,880
You can see that I'm calling men and I'm using the template parameter int that I'm passing into integers

128
00:09:00,300 --> 00:09:01,050
at this point.

129
00:09:01,050 --> 00:09:06,030
The compiler now sees this blueprint and generates the integer version of it.

130
00:09:06,030 --> 00:09:07,200
So t would be it.

131
00:09:07,200 --> 00:09:12,360
Now when I set this whole template stuff gets taken away and we just get a function that just like we

132
00:09:12,360 --> 00:09:14,910
wrote in the slides were just plain integers.

133
00:09:14,910 --> 00:09:19,110
So in this case I expect that result to be a 2 because that's the minimal.

134
00:09:19,110 --> 00:09:25,490
Now go also notice right here on line 19 that I'm not providing this template parameter right here.

135
00:09:25,500 --> 00:09:28,100
You see it's just min to come up 3.

136
00:09:28,170 --> 00:09:31,920
The compiler is smart enough to deduce that these these are integers.

137
00:09:32,070 --> 00:09:34,840
So it's going to create the integer version of it.

138
00:09:34,860 --> 00:09:37,140
A lot of times the compiler will figure it out.

139
00:09:37,140 --> 00:09:39,120
Other times the compiler won't figure it out.

140
00:09:39,240 --> 00:09:42,470
Depending on how complex the template function is.

141
00:09:42,690 --> 00:09:44,340
So in this case you can figure it out.

142
00:09:44,340 --> 00:09:48,720
So all I need to do is just call min pass in a two or three and I'll get a two.

143
00:09:48,900 --> 00:09:50,330
Just like before.

144
00:09:50,340 --> 00:09:54,630
Now here you can see I'm calling men with two characters a and b in this case their literals.

145
00:09:54,640 --> 00:09:55,970
Does it really matter in this.

146
00:09:56,000 --> 00:10:00,070
They're all literals in these examples but it doesn't really matter if they're literals or variables

147
00:10:00,070 --> 00:10:01,740
that will all work the same.

148
00:10:01,740 --> 00:10:03,500
The compiler will now see aha.

149
00:10:03,600 --> 00:10:09,060
Two characters here so it will deduce that this template parameter right here is a character and it

150
00:10:09,060 --> 00:10:12,990
would generate the character version of that template function.

151
00:10:13,180 --> 00:10:15,120
Will get an A right here when we display it.

152
00:10:15,120 --> 00:10:19,200
Same thing with one with the doubles here twelve point five 9.2.

153
00:10:19,200 --> 00:10:25,200
A double version of the function will get created by the compiler and in the very end here we've got

154
00:10:25,200 --> 00:10:25,740
integers.

155
00:10:25,740 --> 00:10:29,720
But this is a real difference between the template functions and macros.

156
00:10:29,760 --> 00:10:32,550
We don't have to worry about precedence or anything here.

157
00:10:32,550 --> 00:10:36,280
We just do what we need to do we want five plus four.

158
00:10:36,450 --> 00:10:41,700
We don't have to worry about C-style macros that we did before with the pound defined in the previous

159
00:10:41,850 --> 00:10:42,990
video.

160
00:10:43,030 --> 00:10:48,810
This is going to work correctly and because the compiler knows C++ So that's it.

161
00:10:48,810 --> 00:10:52,110
If we run this we should get what we expect.

162
00:10:52,110 --> 00:10:57,690
So let me build and run and hear my results right here and just roll them a bit up right here.

163
00:10:57,980 --> 00:11:02,040
And that's just what we expected a two or two and a nine point two and nine.

164
00:11:02,210 --> 00:11:05,240
What we'll do now is we'll create our own structure.

165
00:11:05,240 --> 00:11:07,110
Now this can be any it could be a class.

166
00:11:07,130 --> 00:11:11,390
I'm just going to create a structure so don't have to worry about private and public but it work exactly

167
00:11:11,390 --> 00:11:12,990
the same way with a class.

168
00:11:13,010 --> 00:11:18,830
So right here I'm going to create a structure and I'm going to call in person and I'm just going to

169
00:11:18,830 --> 00:11:27,580
say that every person has a name which is a string a C++ string and an age.

170
00:11:27,710 --> 00:11:28,190
That's it.

171
00:11:28,190 --> 00:11:31,150
There is my person that misspell struct correctly.

172
00:11:31,400 --> 00:11:34,540
It's a structure since I can create person objects right.

173
00:11:34,550 --> 00:11:38,160
So let's do that and I'm going to do it up here right about here.

174
00:11:38,290 --> 00:11:42,500
I am going to say person P1.

175
00:11:42,620 --> 00:11:46,850
And remember I've got a string right here name and I've got an age.

176
00:11:46,970 --> 00:11:56,180
So my first person will be curly and it's say that Curley's 50 years old and my second person is Mo

177
00:11:56,330 --> 00:12:01,580
and Mo is 30 years old and it keeps giving me that curly I'll get rid of that.

178
00:12:01,850 --> 00:12:06,870
OK so now I've got two person objects so what I want now is I want the minimum of those to write.

179
00:12:06,890 --> 00:12:11,990
I want to be able to use my mind function that I wrote to be generic so it should expect any type that

180
00:12:11,990 --> 00:12:13,090
makes sense.

181
00:12:13,100 --> 00:12:17,480
Well here it doesn't quite make sense yet but it will in a minute because what I want to do is I want

182
00:12:17,480 --> 00:12:18,910
to compare their ages.

183
00:12:19,070 --> 00:12:25,870
So let's just say Person p 3 is the minimum of P1 and P2.

184
00:12:25,880 --> 00:12:27,870
In other words men with the least age.

185
00:12:27,890 --> 00:12:32,930
Now if we try to compile this we're going to get an error and the error if you can see that here is

186
00:12:32,930 --> 00:12:33,380
his error.

187
00:12:33,380 --> 00:12:38,380
No match for operator less than for the operand types person person.

188
00:12:38,520 --> 00:12:43,030
So you can see that the compiler has generated that specialized function for the persons.

189
00:12:43,160 --> 00:12:47,870
But now it can't compile that because it doesn't know how to compare two persons using that less than

190
00:12:49,230 --> 00:12:49,510
can.

191
00:12:49,520 --> 00:12:50,600
So what do we do.

192
00:12:50,830 --> 00:12:53,890
Well we tell the compiler how do you how to do that.

193
00:12:53,920 --> 00:12:58,050
So what we'll do is simply write a real simple overloaded operator.

194
00:12:58,510 --> 00:13:00,340
Remember that return boolean.

195
00:13:00,340 --> 00:13:05,030
The operator is operator less than that's the one that's causing the problem.

196
00:13:05,320 --> 00:13:06,700
And what does it expect.

197
00:13:06,700 --> 00:13:09,180
Well remember this is a member.

198
00:13:09,190 --> 00:13:17,380
So we're going to say Konst person ref right hand side ofI has remembered this part of the Course and

199
00:13:17,380 --> 00:13:22,060
its cause because I really don't want to modify anything here and all I'm doing here is I'm just saying

200
00:13:22,060 --> 00:13:27,850
I want to return this person's age.

201
00:13:27,850 --> 00:13:31,020
Is it less than the other person's age.

202
00:13:32,030 --> 00:13:33,260
That's it.

203
00:13:33,260 --> 00:13:36,570
So if I run this now.

204
00:13:36,710 --> 00:13:38,180
Now we've got a clean run right.

205
00:13:38,180 --> 00:13:40,530
We just need to display the result which we haven't done yet.

206
00:13:40,640 --> 00:13:49,890
So I want to do that right here and I'll just say something like stood out and I'll just say P 3.0 name

207
00:13:52,350 --> 00:13:54,700
is younger.

208
00:13:56,640 --> 00:13:58,080
That's it.

209
00:13:58,090 --> 00:14:05,010
So if we run this at this point we suit see Mo right we should say Mo is younger let's run the there

210
00:14:05,010 --> 00:14:05,370
we go.

211
00:14:05,370 --> 00:14:11,760
Mo is younger so let's change the around now let's say that Curley's 15 and Mo is 13 and we should say

212
00:14:11,840 --> 00:14:13,340
Kerley is younger.

213
00:14:13,890 --> 00:14:16,330
And that's exactly what's going on.

214
00:14:16,350 --> 00:14:16,790
OK.

215
00:14:16,830 --> 00:14:18,090
So that's pretty cool.

216
00:14:18,100 --> 00:14:22,040
I am able to use persons and integers and doubles and all kinds of stuff right.

217
00:14:22,050 --> 00:14:28,910
And in this case I'm really explicitly saying that I'm interested in comparing ages here.

218
00:14:28,950 --> 00:14:35,190
OK so now let's look at this second example right here and this is when using two template parameters

219
00:14:35,190 --> 00:14:37,460
we're here on line 11.

220
00:14:37,470 --> 00:14:44,820
Our function is called phunk it expects two parameters and a B is of type 2 1 B is of type 2 they can

221
00:14:44,820 --> 00:14:46,380
be the same or they can be different.

222
00:14:46,740 --> 00:14:50,450
And all we're doing is just displaying a and b that's it real simple.

223
00:14:50,580 --> 00:14:54,440
So let's take a look at our main example down here.

224
00:14:54,630 --> 00:15:00,300
There's a bunch of test cases here but you can see in this case I'm explicitly providing the template

225
00:15:00,300 --> 00:15:02,740
parameters in that first example right here.

226
00:15:02,940 --> 00:15:06,620
And you can see that I've got two ants and I'm supplying those two.

227
00:15:06,630 --> 00:15:10,710
So we just expect this all this function does is display what's passed into it.

228
00:15:10,830 --> 00:15:12,460
So it'll display 10 or 20.

229
00:15:12,750 --> 00:15:14,390
Then we can do the same thing.

230
00:15:14,400 --> 00:15:17,530
But in this case the compiler is deducing the types.

231
00:15:17,530 --> 00:15:23,700
Notice I'm not providing them explicitly here or providing a character in a double explicitly here I'm

232
00:15:23,880 --> 00:15:25,850
just letting the compiler deduce it.

233
00:15:26,070 --> 00:15:29,010
And again here's an integer Here's a C string.

234
00:15:29,130 --> 00:15:32,230
Here's an integer Here's AC plus plus string.

235
00:15:32,280 --> 00:15:37,290
So I'm passing all kinds of stuff into this function and the compiler is going to generate the correct

236
00:15:37,320 --> 00:15:39,030
one for me which is really cool.

237
00:15:39,030 --> 00:15:46,060
So if I run this you could see down here we're getting a 10 and a 20 and a 10 and a 20 again and the

238
00:15:46,060 --> 00:15:51,730
A and the twelve point four twice I'm getting that then I'm seeing a thousand testing in 2000 Frank.

239
00:15:51,840 --> 00:15:54,010
Exactly like we expected.

240
00:15:54,570 --> 00:16:00,720
OK so now let me scroll up here just before mine 31 right here.

241
00:16:00,960 --> 00:16:08,200
And what I'd like to do here is let's call Phunk with a person or two persons.

242
00:16:08,200 --> 00:16:08,930
Doesn't really matter.

243
00:16:08,920 --> 00:16:13,320
Remember it's expecting two different types or two types that are the same.

244
00:16:13,320 --> 00:16:19,210
So let's do that let's call func with P1 and P2.

245
00:16:19,290 --> 00:16:22,620
Now when we try to compile here we're going to have a problem.

246
00:16:22,620 --> 00:16:27,700
It says error or no match for the insertion operator that expects a stream.

247
00:16:27,780 --> 00:16:31,890
And if I come over here just a little bit and a person what's the problem.

248
00:16:32,040 --> 00:16:39,240
Well the problem is that in this case a is a person and there is no overloaded insertion operator for

249
00:16:39,240 --> 00:16:40,140
a person.

250
00:16:40,380 --> 00:16:42,030
So that won't work.

251
00:16:42,030 --> 00:16:46,890
So what we want to do is we want to add the overloaded insertion operator and we can do that really

252
00:16:46,890 --> 00:16:48,390
easily could do it right here.

253
00:16:48,420 --> 00:16:52,050
We don't need a friend function here because this is all it's a structure.

254
00:16:52,050 --> 00:16:53,150
So everything public.

255
00:16:53,310 --> 00:17:01,140
So that we can do is we could just say stood stream remember this and who are returning and stream reference

256
00:17:02,340 --> 00:17:09,720
and what we're going to do here is its operator and we're doing the insertion operator the left hand

257
00:17:09,720 --> 00:17:15,630
side is the stream and we don't want to do that conc because we want to change it.

258
00:17:15,810 --> 00:17:17,520
Now the right hand side is the person.

259
00:17:17,520 --> 00:17:23,330
So in this case it's a contact person reference and call it P.

260
00:17:23,670 --> 00:17:25,140
So what do we want to put on the stream.

261
00:17:25,140 --> 00:17:30,450
Well we could just say yes and the states please name it makes it really easy and we want to return

262
00:17:30,510 --> 00:17:32,700
the stream.

263
00:17:32,700 --> 00:17:33,320
That's it.

264
00:17:33,320 --> 00:17:35,430
We run this now.

265
00:17:35,520 --> 00:17:40,020
Now we get Kirtley and Moe noticed they're both pretty out right here.

266
00:17:40,020 --> 00:17:41,550
That's exactly what we wanted.

267
00:17:41,760 --> 00:17:46,830
So this is one of the things that will get you when you first starting out with template functions is.

268
00:17:46,980 --> 00:17:52,710
Yeah I can supply any kind of type to it for sure but a lot of times when you're using operators you've

269
00:17:52,710 --> 00:17:56,160
got to really be careful with those operators to make sure that they work correctly.

270
00:17:56,160 --> 00:17:57,720
Overload them if you have to.

271
00:17:58,020 --> 00:18:03,540
OK so now the last thing I want to do is let's create another template function and will read it right

272
00:18:03,540 --> 00:18:05,560
down here right before the main.

273
00:18:05,700 --> 00:18:11,000
And what we'll do is we'll just call it my swap and I just want to swap two elements right.

274
00:18:11,100 --> 00:18:12,460
So how would we do this with an end.

275
00:18:12,480 --> 00:18:13,770
I would say something like.

276
00:18:13,800 --> 00:18:15,060
Int Oh sorry.

277
00:18:15,090 --> 00:18:19,360
Oh just something like void and we'll call it my swap.

278
00:18:19,560 --> 00:18:20,770
It expects to integers.

279
00:18:20,770 --> 00:18:24,610
Now we want to change them so we really want them by reference.

280
00:18:24,990 --> 00:18:26,780
And here's the second one.

281
00:18:27,240 --> 00:18:33,240
And then in here all we're doing is assigning temporary right so we have an int temp equals A then A

282
00:18:33,240 --> 00:18:36,660
equals B and then be equal temperament.

283
00:18:36,660 --> 00:18:40,190
Simple swap simple simple logic that'll work.

284
00:18:40,200 --> 00:18:43,410
That'll swap two integers but we don't just want to swap integers.

285
00:18:43,410 --> 00:18:45,050
We want to swap anything.

286
00:18:45,060 --> 00:18:49,330
So what we can do here is we can come to this it replace it with a T.

287
00:18:49,350 --> 00:18:53,510
Replace this guy with a T and replace that guy with a T.

288
00:18:53,520 --> 00:18:56,500
And remember that could be any letter I'm just using T.

289
00:18:56,620 --> 00:19:03,640
So now we'll tell the compiler This is a template function and its type name is T.

290
00:19:04,970 --> 00:19:05,630
That's it.

291
00:19:05,630 --> 00:19:08,290
Now we've got a template function called my swamp.

292
00:19:08,660 --> 00:19:09,770
That's pretty cool.

293
00:19:09,770 --> 00:19:10,790
Now I'll do it appear.

294
00:19:10,790 --> 00:19:13,250
So we'll see that is the first output.

295
00:19:13,250 --> 00:19:23,890
And what we can do here is we can just say ant X is 100 into Y is 200 and we can swap them.

296
00:19:23,960 --> 00:19:29,960
Right so that's X and Y if we displayed x and y we'd obviously get 100 200 but now we can call my swap

297
00:19:31,920 --> 00:19:35,560
and we can pass in X and Y.

298
00:19:36,530 --> 00:19:41,820
And at this point what I want to do is just display X and Y so I'll copy that in here real quick.

299
00:19:43,780 --> 00:19:44,150
That's it.

300
00:19:44,210 --> 00:19:48,700
It's going to display X and Y what I expect now is 200 100 right.

301
00:19:48,720 --> 00:19:52,540
I see you know what let me put this before and after the swap that way it'll be really really obvious

302
00:19:52,540 --> 00:19:54,620
what's going on.

303
00:19:54,750 --> 00:20:02,640
That's it right here so if I run this now you could see 100 200 at the top and then 200 100 which swap

304
00:20:02,640 --> 00:20:03,390
them.

305
00:20:03,390 --> 00:20:10,670
Now the cool thing about that I can write this with strings characters all kinds of good stuff right.

306
00:20:10,950 --> 00:20:15,420
And I'll leave that to you guys to play because this video is getting a little bit long try replacing

307
00:20:15,420 --> 00:20:20,730
some of these with your own types and playing around with it you'll see it's not so bad once you understand

308
00:20:20,730 --> 00:20:22,670
the basics of template functions.

309
00:20:22,770 --> 00:20:24,280
You'll see how powerful they are.

310
00:20:24,450 --> 00:20:29,160
But remember there's those little gotchas if you get those errors are typically about operators that

311
00:20:29,400 --> 00:20:30,630
the compiler can't resolve.

312
00:20:30,630 --> 00:20:32,380
So it's your job to resolve them.

313
00:20:32,590 --> 00:20:32,960
OK.

314
00:20:32,970 --> 00:20:38,370
So that's it for template functions in the next video will start talking about template classes.
