1
00:00:05,470 --> 00:00:12,180
In this video we'll go over using nested loops just like we nested if statements one inside the other.

2
00:00:12,190 --> 00:00:18,240
The same technique can be used to nested loops we can nest loops as many levels deep as we need.

3
00:00:18,310 --> 00:00:20,990
I'll be using just two levels and the examples I'll show you.

4
00:00:21,040 --> 00:00:26,680
That is one loop inside another nested loops have many uses but they're especially useful for multi

5
00:00:26,680 --> 00:00:32,740
dimensional structures like 2D 3D arrays in 2D and 3D vectors.

6
00:00:32,780 --> 00:00:37,890
When we talk about nested loops it's common to refer to the loops as the outer loop and the inner loop.

7
00:00:37,910 --> 00:00:39,270
Let's see some examples.

8
00:00:41,330 --> 00:00:43,930
Here's a pretty generic example of a nested loop.

9
00:00:44,000 --> 00:00:47,580
In this case we have a for loop with another for loop within it.

10
00:00:47,900 --> 00:00:55,490
The outer loop is incrementing outer value from 1 to 2 by 1 the inner loop is incrementing interval

11
00:00:55,730 --> 00:01:04,100
from 1 to 3 by 1 noticed the output the integer to the left of the comma is the outer vowel and the

12
00:01:04,100 --> 00:01:07,070
integer to the right of the comma is the interval.

13
00:01:07,070 --> 00:01:13,430
Notice how interval increments from 1 to 3 while outer vowel remains at one then outer Valot increments

14
00:01:13,430 --> 00:01:14,110
to two.

15
00:01:14,210 --> 00:01:15,700
And we do it all over again.

16
00:01:15,950 --> 00:01:20,960
You can think of this as the outer loop iterating two times and each time the inner loop iterates three

17
00:01:20,960 --> 00:01:21,830
times.

18
00:01:21,830 --> 00:01:25,380
That's why we say that the inner loop loops faster than the outer loop.

19
00:01:25,530 --> 00:01:32,570
But see another example in this example we can take advantage of a nested loop to display the multiplication

20
00:01:32,570 --> 00:01:34,680
table from 1 to 10.

21
00:01:34,700 --> 00:01:39,470
A nested loop is perfect since we want 1 times 1 1 times 2 1 times 3.

22
00:01:39,470 --> 00:01:41,290
All the way to 1 times 10.

23
00:01:41,420 --> 00:01:45,170
Then we want to do two times 1 2 times 2 and so forth.

24
00:01:45,560 --> 00:01:52,430
So we want an outer loop iterating from 1 to 10 and an inner loop also iterating from 1 to 10 and the

25
00:01:52,430 --> 00:01:58,260
body of the inner loop simply multiplies the outer loops variables times the inner loops variable.

26
00:01:58,280 --> 00:02:02,180
Notice the output statement after the inner loop that displays a line of dashes.

27
00:02:02,240 --> 00:02:08,690
This executes each time the inner loop completes will execute this loop in the idea in a minute so you

28
00:02:08,690 --> 00:02:10,100
can see it work.

29
00:02:10,100 --> 00:02:13,220
Let's see an example of a nested loop using a to array.

30
00:02:14,760 --> 00:02:20,250
In this example we have a two dimensional array of integers named grid grid has five rows and three

31
00:02:20,250 --> 00:02:21,630
columns.

32
00:02:21,630 --> 00:02:25,080
Suppose we want to assign 1000 to each element in the grid.

33
00:02:25,110 --> 00:02:28,190
We can do this easily with nested for loops.

34
00:02:28,260 --> 00:02:34,800
The outer loop iterates four rows 0 to 4 inclusive and the inner loop iterates the columns for each

35
00:02:34,800 --> 00:02:37,000
from 1 to 2 inclusive.

36
00:02:37,260 --> 00:02:42,960
Then in the body of the loop we simply assign 1000 to grids Sobero same column.

37
00:02:42,960 --> 00:02:45,510
Notice I'm using block statements for the body of these loops.

38
00:02:45,510 --> 00:02:51,580
I didn't have to here but it's good practice to do so since it makes adding code later much easier.

39
00:02:51,630 --> 00:02:56,430
Now that we've initialized the grid values to a thousand we can use a similar nested loops to display

40
00:02:56,430 --> 00:03:03,180
the values in this example we're assuming the grid has been initialized as in the previous slide at

41
00:03:03,180 --> 00:03:04,620
each iteration of the inner loop.

42
00:03:04,620 --> 00:03:09,140
We display the element at grid Cerebro sum column followed by space.

43
00:03:09,240 --> 00:03:11,970
So we're displaying these elements across the screen.

44
00:03:12,330 --> 00:03:17,110
When we complete the inner loop we print a new line and then execute the outer loop again.

45
00:03:17,920 --> 00:03:21,010
You can see the pattern is the same as with initialization.

46
00:03:21,010 --> 00:03:24,690
This is a very common pattern for working with multi dimensional structures.

47
00:03:24,940 --> 00:03:29,680
Let's see how we can use nested loops with vectors in this final example.

48
00:03:29,680 --> 00:03:32,620
We declare a vector of vector of integer.

49
00:03:32,920 --> 00:03:36,490
So we have a vector whose elements are vectors of integers.

50
00:03:36,580 --> 00:03:42,700
Very similar to a 2D array of integers with the advantage of vectors with a vector of vectors we can

51
00:03:42,700 --> 00:03:47,510
allow each vector within the vector to D to be of different size.

52
00:03:47,560 --> 00:03:53,250
In this case we have three vectors of vectors and each of those vectors is a vector of integers.

53
00:03:53,470 --> 00:03:57,130
I know it sounds complicated but if you look at the example it should be pretty clear.

54
00:03:57,220 --> 00:04:00,490
The first vector has three integers 1 2 3.

55
00:04:00,550 --> 00:04:04,390
The second vector has 4 integers 10 20 30 40.

56
00:04:04,420 --> 00:04:09,810
The third vector has 5 integers 100 200 300 400 and 500.

57
00:04:09,910 --> 00:04:16,000
If we wanted to display the contents of vector to d we could do it easily with nested range based for

58
00:04:16,000 --> 00:04:21,550
loops and if we use the auto keyword to allow the compiler to deduce the type of each loop element it

59
00:04:21,550 --> 00:04:23,440
makes it dead simple.

60
00:04:23,440 --> 00:04:29,990
Notice the outer loop in this case the compiler deduces VEC to be a vector of integers and in the inner

61
00:04:29,990 --> 00:04:34,820
loop it reduces vow to be an integer in the body of the inner loop.

62
00:04:34,820 --> 00:04:40,790
We simply display the value followed by space as we did in the previous example would display a new

63
00:04:40,790 --> 00:04:44,340
line after we're done displaying the inner vector values.

64
00:04:44,480 --> 00:04:47,390
You can see how little code and how simple the code is.

65
00:04:47,390 --> 00:04:50,290
You can see the output from this loop at the right on the screen.

66
00:04:50,630 --> 00:04:55,730
In these examples I've used for loops within four loops but you can use any combination of loops within

67
00:04:55,730 --> 00:04:58,300
any other loop to achieve your desired behavior.

68
00:04:58,520 --> 00:05:01,410
Let's head over to code light and see some of these examples live.

69
00:05:03,010 --> 00:05:05,080
OK so I mean the code like ID.

70
00:05:05,110 --> 00:05:10,620
I mean these still in the section 9 workspace and I mean the multiplication table project.

71
00:05:10,750 --> 00:05:16,920
This is the piece of code that executes and displays a multiplication table for up to 10 by 10.

72
00:05:16,930 --> 00:05:19,240
So let's go over this really carefully.

73
00:05:19,240 --> 00:05:22,530
This is a classic example of a nested loop.

74
00:05:22,540 --> 00:05:29,500
Notice we've got the two four loops one within the other and the outer loop is looping on the number

75
00:05:29,500 --> 00:05:31,120
one variable.

76
00:05:31,120 --> 00:05:36,110
The inner loop is looping on the two variable.

77
00:05:36,290 --> 00:05:40,700
So we're going to start the outer loop and we're going to assign right here we're going to number 1

78
00:05:40,700 --> 00:05:43,170
to 1 and then we check.

79
00:05:43,180 --> 00:05:45,070
Is no one less than or equal to 10.

80
00:05:45,100 --> 00:05:45,820
It is.

81
00:05:45,820 --> 00:05:50,480
So we go into the body of the loop while the body of this loop is another loop.

82
00:05:50,710 --> 00:05:54,080
And in this case we're initialising number two to one right here.

83
00:05:55,550 --> 00:05:58,090
And we check his number two less than or equal to 10.

84
00:05:58,110 --> 00:05:58,830
It is.

85
00:05:58,890 --> 00:06:03,680
So we execute the body of the inner loop which is this output statement right here.

86
00:06:03,690 --> 00:06:10,640
So what we do here is we display number one which is one we display the asterisk string right there.

87
00:06:10,740 --> 00:06:14,920
We displayed them too which is one we display that equal sign right here.

88
00:06:15,180 --> 00:06:17,280
And then we multiply number one number two.

89
00:06:17,280 --> 00:06:19,470
That gives us 1 and we display the value.

90
00:06:21,080 --> 00:06:21,860
That's it.

91
00:06:21,980 --> 00:06:24,600
We display a new line and we loop again.

92
00:06:24,770 --> 00:06:27,830
So we come back up to the loop we do the increment.

93
00:06:27,830 --> 00:06:33,140
So now number two is to we check is number two.

94
00:06:33,140 --> 00:06:34,330
Less than or equal to 10.

95
00:06:34,370 --> 00:06:39,770
It is execute the body of the loop again this time through we've gotten some one is still one right

96
00:06:39,770 --> 00:06:40,300
here.

97
00:06:41,820 --> 00:06:50,420
Number two is now to and we display yapper and so forth so we're going to do this until we get to 1

98
00:06:50,420 --> 00:06:53,250
times 10 equals 10.

99
00:06:53,530 --> 00:06:55,050
And someone will still be one.

100
00:06:55,070 --> 00:06:57,590
At this point number two is 10.

101
00:06:57,590 --> 00:07:01,420
Now we're going to incrementing up to 11.

102
00:07:01,490 --> 00:07:03,440
We come over here and we check is number two.

103
00:07:03,440 --> 00:07:04,460
Less than or equal to 10.

104
00:07:04,460 --> 00:07:06,160
It's not so we fail.

105
00:07:06,500 --> 00:07:08,200
Now we terminate the inner loop.

106
00:07:08,390 --> 00:07:10,120
We execute this statement right here.

107
00:07:10,250 --> 00:07:16,190
What's going to display a bunch of dashed lines here and then we remember we're still inside the outer

108
00:07:16,210 --> 00:07:18,480
loops we have to go back out to the outer loop.

109
00:07:19,380 --> 00:07:20,450
And do the increment.

110
00:07:20,580 --> 00:07:27,470
So now number one becomes to is to Enrico to attend Yes we go back into the inner loop again.

111
00:07:27,620 --> 00:07:31,190
So think of this says Here's your outer loop and it's looping.

112
00:07:31,190 --> 00:07:35,810
And each time it loops you're going to do the inner loop 10 times that you're going to go back out outer

113
00:07:35,810 --> 00:07:36,120
loop.

114
00:07:36,120 --> 00:07:38,420
You're going to do the inner loop again 10 times.

115
00:07:38,770 --> 00:07:39,350
OK.

116
00:07:39,350 --> 00:07:42,590
My art is not pretty but hopefully it and you'll understand what I'm talking about.

117
00:07:42,740 --> 00:07:45,280
All right so that's what's really going on here.

118
00:07:45,290 --> 00:07:50,320
Let me clear this and run it so you can see this in action.

119
00:07:50,330 --> 00:07:51,220
So there's the output.

120
00:07:51,230 --> 00:07:57,840
Let me scroll up so you could see here 1 times 1 is 1 1 times 2 is two and so forth.

121
00:07:58,030 --> 00:08:03,190
Notice in this case I mean move this just over here so you can see the variables over here.

122
00:08:03,190 --> 00:08:09,880
This left one is number one and then you can see that number two is looping faster.

123
00:08:09,880 --> 00:08:13,870
That's why we say the inner loop loops faster than the hour loop.

124
00:08:14,380 --> 00:08:19,850
We go through all 10 of them then we display the dashed line then we go back out to the outer loop.

125
00:08:19,870 --> 00:08:26,890
Now number one is two and then three and then all the way to the bottom where we ended up with the tens

126
00:08:27,250 --> 00:08:28,620
and we end up with 10 times 10.

127
00:08:28,630 --> 00:08:31,500
At this point the outer loop fails and we're done.

128
00:08:32,840 --> 00:08:33,170
OK.

129
00:08:33,180 --> 00:08:38,050
So hopefully that makes sense and what we'll do next is we'll do an example.

130
00:08:38,080 --> 00:08:41,130
That's a little bit more complicated we'll actually grab some user input.

131
00:08:41,130 --> 00:08:45,710
We'll grab some numbers put them in a vector and display a histogram based on those numbers.

132
00:08:48,340 --> 00:08:55,210
OK so I'll close this and I will open up the histogram project a double click on that to make it the

133
00:08:55,210 --> 00:08:56,790
active project.

134
00:08:56,800 --> 00:09:01,420
Right now there's not much in here it's just a really really simple basic main that does nothing just

135
00:09:01,420 --> 00:09:03,220
prints a new line.

136
00:09:03,230 --> 00:09:04,420
So what do we want to do here.

137
00:09:04,520 --> 00:09:09,780
We want to ask the user how many data items they have that say they type 6.

138
00:09:09,800 --> 00:09:13,520
Then we ask them for each one of those data items which is just an integer.

139
00:09:13,640 --> 00:09:17,950
And then when we're finished with that we'll output all that information using a histogram.

140
00:09:17,960 --> 00:09:19,700
So that's pretty straightforward.

141
00:09:19,700 --> 00:09:24,350
We need to ask the user how many items they've got so let's create an integer variable are called number

142
00:09:24,350 --> 00:09:34,850
items and we'll just initialize that to 0 and then we'll ask them how many items you have listed data

143
00:09:34,850 --> 00:09:35,350
items

144
00:09:42,600 --> 00:09:47,720
OK and will read that integer into items.

145
00:09:47,720 --> 00:09:50,790
So now we know how many data items they have.

146
00:09:50,810 --> 00:09:55,320
What we want to do next is loop that many times if I've got five data items.

147
00:09:55,320 --> 00:09:58,270
Well I want you to ask me five times to enter those data.

148
00:09:58,280 --> 00:10:04,450
So it really makes sense to use a for loop here because we know exactly how many times we want to iterate.

149
00:10:04,520 --> 00:10:08,810
We also need to store this information somewhere right so all that information they type in We'd like

150
00:10:08,810 --> 00:10:14,300
to store it somewhere since we really don't know what number they're going to type in an array would

151
00:10:14,300 --> 00:10:17,620
not be a good idea here because you don't know how big to make it.

152
00:10:17,620 --> 00:10:20,490
You'd have to make it really big just to be sure that everything will fit.

153
00:10:20,540 --> 00:10:21,890
So we use a vector.

154
00:10:21,890 --> 00:10:26,390
First thing we'll do is we'll include vector here.

155
00:10:29,210 --> 00:10:34,810
So we're going to go there and let's declare the vector right now we'll call it vector of integers in

156
00:10:34,810 --> 00:10:36,210
this case.

157
00:10:36,490 --> 00:10:40,480
And this is called a data because that's what it is and initialized the vector it's empty.

158
00:10:41,730 --> 00:10:46,330
All right member of vectors that dynamic data structures so we'll be able to read data from the user

159
00:10:46,330 --> 00:10:50,130
and put it into that vector using its push back method.

160
00:10:50,140 --> 00:10:53,610
So let's loop How many times are we going to loop.

161
00:10:53,620 --> 00:10:57,380
We're going to loop from 1 to that number they entered.

162
00:10:57,670 --> 00:11:01,550
Right so if they enter 10 we're going to go from 1 to 10 and we're going to grab 10 data items.

163
00:11:01,600 --> 00:11:05,020
So let's do that right now for it.

164
00:11:05,020 --> 00:11:11,620
Pi will use I will initialize I to 1 because we want to start here at 1 and I want to loop while I.

165
00:11:11,620 --> 00:11:19,030
Is less than or equal to the number of items that they want to enter into the vector will increment

166
00:11:19,770 --> 00:11:21,010
by 1 each time.

167
00:11:21,010 --> 00:11:23,210
I'm going to use a block statement here.

168
00:11:24,780 --> 00:11:26,370
Now what do you think is going on in here.

169
00:11:26,460 --> 00:11:29,250
Well I need to ask them for the data right.

170
00:11:30,120 --> 00:11:32,230
I would have to say I typed in 10 items.

171
00:11:32,230 --> 00:11:34,030
This is going to look 10 times.

172
00:11:34,060 --> 00:11:36,560
So we need somewhere to read the data into.

173
00:11:36,640 --> 00:11:42,880
That sounds like an integer means also a data item will initialize that to zero and then we'll just

174
00:11:42,880 --> 00:11:51,230
say seek out no enter data item and we may as well tell them which one it is because we know it right.

175
00:11:51,280 --> 00:11:58,240
I would do something like that would put a colon so it looks nice for them.

176
00:11:58,540 --> 00:12:00,730
So this will say enter data item 1 and 2 Date.

177
00:12:00,730 --> 00:12:04,040
Item 2 all the way up to whatever they decided they wanted.

178
00:12:04,150 --> 00:12:14,070
What we do now is we read that integer that they type in into that data item variable we just created.

179
00:12:14,110 --> 00:12:15,070
So we've got the data.

180
00:12:15,100 --> 00:12:15,620
What do we know.

181
00:12:15,700 --> 00:12:17,250
We need to put it into that vector.

182
00:12:17,250 --> 00:12:18,670
Now remember how to do that.

183
00:12:18,690 --> 00:12:20,370
The vectors name is data.

184
00:12:20,780 --> 00:12:25,870
So we say data push back and we put that data item in there.

185
00:12:25,870 --> 00:12:29,280
So it's going to put the data item in the back of the vector.

186
00:12:30,010 --> 00:12:30,920
That's it.

187
00:12:30,970 --> 00:12:31,990
That's pretty straightforward.

188
00:12:31,990 --> 00:12:38,590
So at this point now what we've got is a vector that contains whatever data they typed hence of the

189
00:12:38,620 --> 00:12:42,730
typed in five integers that vector has five images in there.

190
00:12:42,760 --> 00:12:43,980
So what we want to do now.

191
00:12:44,020 --> 00:12:48,700
Well we want to display the histogram But before we do that let's just display the data make sure we

192
00:12:48,700 --> 00:12:49,450
have it right.

193
00:12:49,450 --> 00:12:50,920
Always good to test as you go.

194
00:12:51,010 --> 00:12:51,790
So let's do that.

195
00:12:51,790 --> 00:12:55,710
We'll say for we'll use a range based for loop here.

196
00:12:55,780 --> 00:13:01,740
Otto Vau that's the value and the collection is data

197
00:13:05,020 --> 00:13:05,480
OK.

198
00:13:05,530 --> 00:13:09,280
So for each element in that data collection let's just put it.

199
00:13:09,280 --> 00:13:10,270
Now just to test

200
00:13:13,100 --> 00:13:14,480
OK.

201
00:13:14,560 --> 00:13:14,960
That's it.

202
00:13:14,980 --> 00:13:18,200
Let's run this.

203
00:13:18,260 --> 00:13:19,960
How many data items do you have.

204
00:13:20,030 --> 00:13:26,610
Well I have five data items enter data item 1 10 to 20.

205
00:13:26,630 --> 00:13:28,660
Let's just put them in tens that way we know what we're getting.

206
00:13:28,660 --> 00:13:32,110
30 40 should ask me one more time.

207
00:13:32,150 --> 00:13:32,680
Fifty.

208
00:13:32,690 --> 00:13:36,320
Now it should be done and I'm displaying the data items.

209
00:13:36,320 --> 00:13:37,310
So everything's looking good.

210
00:13:37,310 --> 00:13:41,020
Let's run it again with three data items.

211
00:13:41,210 --> 00:13:48,470
Let's put a thousand in here let's put a 10 in there and let's put a hundred in here 1010 twelve hundred

212
00:13:48,500 --> 00:13:48,910
perfect.

213
00:13:48,920 --> 00:13:51,100
So that's exactly what's going on right now.

214
00:13:51,170 --> 00:13:56,150
We want to be how many items do you have and entry data for each one of those values.

215
00:13:56,390 --> 00:14:01,310
So it's always a good idea to test as you go because it just makes life much much easier to test as

216
00:14:01,310 --> 00:14:04,440
you go rather than try to test this big monolithic thing at the end.

217
00:14:04,610 --> 00:14:10,160
All right so let me just do a quick statement here and I'll put a line in the end just to give a little

218
00:14:10,160 --> 00:14:10,580
space.

219
00:14:10,580 --> 00:14:13,630
I'm just going to say displaying histogram

220
00:14:18,750 --> 00:14:25,810
Now what we need to do is pretty much what we did here right except we don't want to display the value.

221
00:14:25,830 --> 00:14:30,990
We want to display a dash for each one of those values so for example if the values 10 we want to display

222
00:14:30,990 --> 00:14:34,360
10 dashes if the values 100 will display 100 dashes.

223
00:14:34,470 --> 00:14:36,050
That's what Mr. Graham looks like.

224
00:14:36,180 --> 00:14:38,100
So how do I do that.

225
00:14:38,130 --> 00:14:42,580
Well I need to have another loop in here and I'm just going to get rid of that right now.

226
00:14:42,600 --> 00:14:46,480
So we still have this loop right here just looping through the collection.

227
00:14:46,920 --> 00:14:47,970
So what do I do here.

228
00:14:47,970 --> 00:14:53,180
Well I know how many times I need to loop round be to loop Vau time so a for loop is good.

229
00:14:53,180 --> 00:14:56,610
We can use any loop we want really but let's use a for loop because it's really simple.

230
00:14:56,610 --> 00:15:01,670
So we're going to save for it and let's use I again.

231
00:15:01,980 --> 00:15:08,210
And we're going to start at one and we're going to loop while I is less Center equal to that.

232
00:15:08,760 --> 00:15:10,200
That's the number we just read

233
00:15:12,970 --> 00:15:13,930
OK.

234
00:15:14,120 --> 00:15:14,840
Now what.

235
00:15:14,840 --> 00:15:16,690
Well the increment is by 1.

236
00:15:16,700 --> 00:15:18,130
We need to increment by 1.

237
00:15:18,140 --> 00:15:19,770
So that's my inner loop.

238
00:15:20,090 --> 00:15:21,440
What do I want to do in here.

239
00:15:21,500 --> 00:15:27,560
I want to do just type hyper dash and will use dashes for a reason you could use an asterisk but I want

240
00:15:27,560 --> 00:15:29,680
to use an asterisk in a second.

241
00:15:29,690 --> 00:15:30,440
That's it.

242
00:15:30,440 --> 00:15:40,160
So if the me fix that typo if the user typed in five integers in the first one is 6 then Vau is going

243
00:15:40,160 --> 00:15:41,010
to be 6.

244
00:15:41,090 --> 00:15:43,530
And we're going to loop six times displaying six dashes.

245
00:15:43,610 --> 00:15:48,890
The next one is 12 are going to display 12 dashes after you were done displaying those dashes we need

246
00:15:48,890 --> 00:15:49,940
to display a new line.

247
00:15:49,940 --> 00:15:52,280
Otherwise everything's just going to go right across the screen.

248
00:15:52,460 --> 00:15:55,720
So I'm just going to say and line right here.

249
00:15:56,210 --> 00:15:58,500
And we need to close off this.

250
00:15:58,610 --> 00:16:01,970
Let's do that for loop right here in a block as well.

251
00:16:01,970 --> 00:16:04,460
Since we're probably going to add a little bit more code.

252
00:16:04,490 --> 00:16:05,800
OK so that's where we're at now.

253
00:16:05,810 --> 00:16:07,020
Actually pretty straightforward.

254
00:16:07,040 --> 00:16:14,210
Let's run this and I forgot a semi-colon right there.

255
00:16:14,240 --> 00:16:15,010
I put that in there

256
00:16:17,920 --> 00:16:18,180
OK.

257
00:16:18,180 --> 00:16:19,490
How many items do you have.

258
00:16:19,490 --> 00:16:22,650
This is start simple three items.

259
00:16:22,650 --> 00:16:24,230
What's the first data item.

260
00:16:24,390 --> 00:16:29,280
Five 10 15.

261
00:16:29,430 --> 00:16:37,010
What I expect now is three rows one with five dashes one with 10 dashes and one with 15 dashes.

262
00:16:37,020 --> 00:16:38,040
Awesome that's what we've got.

263
00:16:38,040 --> 00:16:39,610
Displaying histogram.

264
00:16:39,630 --> 00:16:44,280
One two three four five dashes 10 dashes 15 dashes.

265
00:16:44,540 --> 00:16:48,820
You see that it was pretty simple and it's pretty powerful because we've got dynamic data structure

266
00:16:48,840 --> 00:16:50,370
that's growing as we need it.

267
00:16:50,520 --> 00:16:53,490
Let's run this one more time with a little bit more data.

268
00:16:53,710 --> 00:17:01,620
You say I have 10 data items and I've got a 10 34 and I'm just going to put some really any numbers

269
00:17:01,620 --> 00:17:04,040
in here 7.

270
00:17:04,420 --> 00:17:05,430
I don't want to do a 90.

271
00:17:05,550 --> 00:17:13,970
Let's do a 30 let's do 50 and let's do a 1 and a to have at the bottom.

272
00:17:14,160 --> 00:17:14,890
So there we go.

273
00:17:14,900 --> 00:17:15,930
There's my histogram.

274
00:17:15,930 --> 00:17:21,690
You can see the last two should be one in two and they are right here one and two and you could count

275
00:17:21,690 --> 00:17:23,400
them if you like but I think they're correct.

276
00:17:23,400 --> 00:17:26,970
Obviously you would want to count them if you were going to test them to be sure that everything is

277
00:17:26,970 --> 00:17:27,520
correct.

278
00:17:27,540 --> 00:17:28,850
So there is my histogram.

279
00:17:28,920 --> 00:17:29,980
Pretty straightforward.

280
00:17:30,030 --> 00:17:31,330
This is kind of hard to see though.

281
00:17:31,330 --> 00:17:32,750
I mean how many dashes are here.

282
00:17:32,750 --> 00:17:33,910
I can't really tell.

283
00:17:33,930 --> 00:17:39,180
So why don't we say that every fifth dash let's display an asterisk instead.

284
00:17:39,210 --> 00:17:40,670
That will make it easier to see.

285
00:17:40,890 --> 00:17:41,350
OK.

286
00:17:41,400 --> 00:17:42,540
So how do we do that.

287
00:17:42,600 --> 00:17:44,600
We're right in here.

288
00:17:44,940 --> 00:17:52,920
So we could do is we can modify this code slightly we could say if that specific county variable mod

289
00:17:52,920 --> 00:17:55,440
5 is equal to zero.

290
00:17:55,440 --> 00:17:58,120
So that means I'm on the fifth number right.

291
00:17:58,320 --> 00:18:02,130
In this case I want to display an asterisk

292
00:18:05,080 --> 00:18:08,830
otherwise so anyone else here.

293
00:18:08,990 --> 00:18:14,130
I just want to display the dash and I'm in debt Dennis correctly.

294
00:18:14,300 --> 00:18:15,150
There we go.

295
00:18:15,440 --> 00:18:17,400
So notice the indentation here.

296
00:18:17,410 --> 00:18:18,590
It's really important.

297
00:18:18,800 --> 00:18:23,330
If you look at that piece of code right there you can see that I have a for loop and I've got another

298
00:18:23,330 --> 00:18:24,810
four nested within it.

299
00:18:25,130 --> 00:18:31,090
And that for loop has an if else statements every time that loop executes I'm executing that if statement.

300
00:18:31,320 --> 00:18:31,950
OK.

301
00:18:32,120 --> 00:18:36,360
So you can see the structure of the code by just looking at the code.

302
00:18:36,470 --> 00:18:40,040
You don't have to try to figure it out if everything here was indented to the left.

303
00:18:40,040 --> 00:18:41,170
Flush here.

304
00:18:41,210 --> 00:18:42,870
Be really hard to see the structure.

305
00:18:42,980 --> 00:18:44,320
So let's run this and see.

306
00:18:44,660 --> 00:18:54,200
OK let's say I've got 10 data items and I've got 34 32 24 5 10.

307
00:18:54,810 --> 00:18:59,880
And just some other numbers that I can put in.

308
00:19:00,240 --> 00:19:03,220
And let's do two and one to get it in.

309
00:19:03,480 --> 00:19:04,170
There we go.

310
00:19:04,170 --> 00:19:08,920
So now you can see that every fifth number is being displayed with an asterisk.

311
00:19:08,940 --> 00:19:11,180
In this case it's really easy until that's 10.

312
00:19:11,550 --> 00:19:13,070
I can tell that's 19.

313
00:19:13,170 --> 00:19:16,820
I think tell that's five 10 15 20 25 34 and so forth.

314
00:19:16,920 --> 00:19:19,670
So it makes it much easier to interpret the data.

315
00:19:20,040 --> 00:19:24,940
Here's a really easy simple example of using a nested loop.

316
00:19:25,350 --> 00:19:30,240
In this case the 4:4 makes sense because we know how far we're going but we could easily rewrite this

317
00:19:30,240 --> 00:19:32,560
with Wiles or do wells or anything we like.

318
00:19:32,730 --> 00:19:35,910
Remember at the end of the day a loop is a loop is a loop right.

319
00:19:35,940 --> 00:19:38,250
So they all do the same thing they all iterate.

320
00:19:38,250 --> 00:19:41,690
It's just a matter of trying to choose the right one for the application.

321
00:19:41,730 --> 00:19:46,890
So hope that helps these kinds of examples is going to be really useful in the challenge exercise which

322
00:19:46,890 --> 00:19:47,560
is next.
