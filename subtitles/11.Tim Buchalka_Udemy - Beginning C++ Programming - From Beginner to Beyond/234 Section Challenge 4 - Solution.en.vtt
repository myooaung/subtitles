WEBVTT
1
00:00:05.450 --> 00:00:10.180
Hello welcome to the section 19 challenge for solution video.

2
00:00:10.190 --> 00:00:15.430
I'm in the section 19 workspace and the challenge underscore for underscore solution project.

3
00:00:15.530 --> 00:00:17.800
And here's a solution to this project.

4
00:00:17.810 --> 00:00:19.310
It's pretty straightforward.

5
00:00:19.340 --> 00:00:20.600
We're going to do a couple of different ways.

6
00:00:20.600 --> 00:00:25.580
Like I said one would put my numbers on every line and then move modified a little bit so that we're

7
00:00:25.580 --> 00:00:28.460
only putting line numbers on lines that actually have text.

8
00:00:28.490 --> 00:00:34.280
So we've got our includes we're including stream extreme IO manip and string and we're creating our

9
00:00:34.280 --> 00:00:39.350
input stream right here our input file which is Romeo and Juliet text.

10
00:00:39.590 --> 00:00:44.190
And of course it's in my parent directory because I get them in code like I'm creating an output file

11
00:00:44.240 --> 00:00:49.310
stream where we're going to create a copy of this file with my numbers and I just called it Romeo and

12
00:00:49.310 --> 00:00:52.120
Juliet underscore out that text.

13
00:00:52.130 --> 00:00:57.400
I'm opening both files and I'm double checking that they're both open for reading and writing.

14
00:00:57.530 --> 00:01:00.740
If they're not I provide an heir just like we've seen before.

15
00:01:00.950 --> 00:01:06.680
Here I've got a line which is a stitch string and I've got a counter for the line numbers and I've initialized

16
00:01:06.680 --> 00:01:07.720
it to zero.

17
00:01:07.760 --> 00:01:08.750
Pretty simple.

18
00:01:08.750 --> 00:01:09.150
That's it.

19
00:01:09.150 --> 00:01:12.770
Now I'm going to start processing the file I'm going to use getline because I want to read a whole line

20
00:01:12.770 --> 00:01:13.730
at a time.

21
00:01:13.890 --> 00:01:20.120
I'm using getline and I'm reading a line from infile what I'm doing is no matter what if it's successful

22
00:01:20.270 --> 00:01:26.570
up I'm incrementing in line number here and I'm simply displaying a line number left justified in a

23
00:01:26.570 --> 00:01:27.470
width of seven.

24
00:01:27.500 --> 00:01:32.060
That gives me a nice formatted area on the left side of the file that's got all the line numbers in

25
00:01:32.060 --> 00:01:38.080
there and then line which is also be left justified against that eighth position basically.

26
00:01:38.210 --> 00:01:38.990
That's it.

27
00:01:39.020 --> 00:01:42.290
Then a display copy complete close both files and we're done.

28
00:01:42.290 --> 00:01:49.250
So if we run this copy complete we can go to our project and open up the folder.

29
00:01:49.790 --> 00:01:54.420
And we should have a Romeo and Juliet underscore out which we do right here I'll double click on that.

30
00:01:54.600 --> 00:01:58.890
And there you go you can see everything's lined up nicely with line numbers on the left hand side.

31
00:01:59.920 --> 00:02:00.270
OK.

32
00:02:00.350 --> 00:02:06.500
Now what I said earlier was this kind of bugs me all these line numbers on these blank lines.

33
00:02:06.500 --> 00:02:11.110
So I don't want that let's just do another version of this program that gets rid of those.

34
00:02:11.120 --> 00:02:12.690
So that's what we'll do next.

35
00:02:12.940 --> 00:02:15.810
What we'll do is we need the logic right in here.

36
00:02:15.950 --> 00:02:21.740
Basically what we want to do is we want to do this only if the line is not empty.

37
00:02:21.740 --> 00:02:22.240
Right.

38
00:02:22.430 --> 00:02:30.290
So let's put an if statement here will say if the line we just read is empty then what do we want to

39
00:02:30.290 --> 00:02:30.670
do.

40
00:02:30.700 --> 00:02:32.570
And we just want to write to the file.

41
00:02:32.570 --> 00:02:34.790
We still need to write the blank line to the file.

42
00:02:34.790 --> 00:02:39.200
So I'll just say in file sorry not in file out file.

43
00:02:39.630 --> 00:02:49.080
And more right then line that's it and we'll have an L statement here and we'll wrap all of this up

44
00:02:50.490 --> 00:02:54.090
inside that else and we'll just indented over

45
00:02:57.590 --> 00:02:58.060
OK.

46
00:02:58.150 --> 00:02:58.960
That's it.

47
00:02:58.960 --> 00:03:03.760
So now we're we're only display a new line we're not displaying text because there is no text right.

48
00:03:03.760 --> 00:03:07.650
We're not just playing a line number because we don't want to display a line number on an empty line.

49
00:03:07.870 --> 00:03:12.880
And if it is not an empty line then we're going to treat it as normal we're going to increment the line

50
00:03:12.880 --> 00:03:14.190
number and display it.

51
00:03:14.200 --> 00:03:17.140
So let's run that.

52
00:03:17.690 --> 00:03:19.690
And let's take a look at the output again.

53
00:03:24.360 --> 00:03:26.390
And that's pretty much what I wanted.

54
00:03:26.480 --> 00:03:26.790
Right.

55
00:03:26.820 --> 00:03:34.690
All the blank lines are still displayed but they are not numbered and that's it.

56
00:03:34.690 --> 00:03:39.340
I hope your challenge was fun and I hope you basically got the same kind of solution.

57
00:03:39.370 --> 00:03:43.490
There's a lot of different ways that you can modify this program if you had any and want to share.

58
00:03:43.630 --> 00:03:45.350
Please post on the forums.

59
00:03:45.520 --> 00:03:47.370
So that's it for this video.

60
00:03:47.380 --> 00:03:49.570
There are a couple of videos left in this section.

61
00:03:49.570 --> 00:03:56.200
The next one is going to be about using streams streams which allows us to use our own in memory strings

62
00:03:56.230 --> 00:04:01.360
as streams which is pretty cool and we will address input validation which is a question that's come

63
00:04:01.360 --> 00:04:03.030
up a bunch of times in the forums.
