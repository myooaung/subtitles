WEBVTT
1
00:00:05.300 --> 00:00:06.060
Hello everyone.

2
00:00:06.110 --> 00:00:11.220
I'm in the idea in the section 15 workspace and i'm mean the challenge project.

3
00:00:11.390 --> 00:00:16.220
And before I go over what the challenge is for this section I'd like to go over the account class that

4
00:00:16.220 --> 00:00:21.800
has been modified slightly and this is the account class hierarchy that we're going to use for the challenge.

5
00:00:21.830 --> 00:00:25.950
So I'd like to go through it in detail so you understand exactly what's going on.

6
00:00:25.970 --> 00:00:29.290
It's very very similar to the account class that we've been using all along.

7
00:00:29.360 --> 00:00:31.240
But I've made a couple of changes to it.

8
00:00:31.310 --> 00:00:35.870
So why don't we start here with the account class you can see I've got my account header file and my

9
00:00:35.870 --> 00:00:37.630
account implementation file.

10
00:00:37.670 --> 00:00:44.360
But let's talk about this account class as you can see there's my class account and I've got my overloaded

11
00:00:44.540 --> 00:00:49.610
insertion operator which allows me to put accounts on a stream really really easily that I've declared

12
00:00:49.610 --> 00:00:56.300
these two consecrations and think of these as constants that are available only to the class or within

13
00:00:56.300 --> 00:00:57.710
the class scope.

14
00:00:57.710 --> 00:01:00.340
Sure we could have defined these outside of class scope.

15
00:01:00.500 --> 00:01:04.650
But then what we do is we pollute the global namespace and we really don't want to do that.

16
00:01:04.670 --> 00:01:09.770
And the reason we're doing that is because we're providing default parameter values in the constructor

17
00:01:09.770 --> 00:01:10.210
here.

18
00:01:10.280 --> 00:01:14.570
So you can see that we've got default name here as well as to false balance here.

19
00:01:14.570 --> 00:01:19.010
So by using these I can do it like this and I could just change them in one place.

20
00:01:19.210 --> 00:01:22.430
The other option is just to do the constructor like this.

21
00:01:22.430 --> 00:01:28.200
Just that we've done before where I supply the default parameter unnamed count and the balance is zero.

22
00:01:28.340 --> 00:01:28.600
OK.

23
00:01:28.610 --> 00:01:30.550
So again you could do it either way.

24
00:01:30.620 --> 00:01:34.240
I kind of like doing it this way because it gives me all my constants in one place.

25
00:01:34.250 --> 00:01:38.900
They are within class scope and you can decide whether you want to make a private or protected or public

26
00:01:38.900 --> 00:01:40.740
and you've got a lot of flexibility.

27
00:01:41.090 --> 00:01:43.370
So there's my constructor.

28
00:01:43.550 --> 00:01:47.480
And obviously we've got an account in this case I added the name right.

29
00:01:47.480 --> 00:01:50.000
That name is a stud string a C++ string.

30
00:01:50.000 --> 00:01:54.760
So in this case what an account is it's got a name and it's got a balance.

31
00:01:54.770 --> 00:01:56.730
So here's my constructor.

32
00:01:56.930 --> 00:01:59.110
It expects a name and a balance.

33
00:01:59.120 --> 00:02:01.810
If we don't get a name we get a name to count.

34
00:02:01.880 --> 00:02:02.750
We don't get a balance.

35
00:02:02.750 --> 00:02:04.760
We get zero for the balance.

36
00:02:04.970 --> 00:02:09.590
And at this point we've got our deposit withdraw and I've just put in a good balance method here which

37
00:02:09.590 --> 00:02:10.970
could be handy to use.

38
00:02:10.970 --> 00:02:13.940
I don't think I'm using them in the code but you may want to use it.

39
00:02:14.000 --> 00:02:16.310
So I've got a deposit method and a withdrawal method.

40
00:02:16.310 --> 00:02:18.670
Real basic functionality here right.

41
00:02:18.710 --> 00:02:23.590
Simply add whatever is given to you to the balance and withdraw whatever is given to the balances to

42
00:02:23.590 --> 00:02:26.270
me that we don't run into a negative balance when it's over.

43
00:02:26.270 --> 00:02:28.430
So just like we've seen before.

44
00:02:28.430 --> 00:02:31.340
Now let's look at the implementation for this.

45
00:02:31.400 --> 00:02:34.530
So we look at accounts GPP.

46
00:02:34.640 --> 00:02:40.690
So here's the count and it's going to be again very very familiar implementation I think.

47
00:02:40.850 --> 00:02:43.410
So here you've got your account constructor.

48
00:02:43.730 --> 00:02:48.670
Notice that it expects these two parameters and those have defaults associated with them.

49
00:02:48.680 --> 00:02:54.590
So in this case this constructor fires and I'm just setting my name and my balance to whatever was passed

50
00:02:54.590 --> 00:02:56.840
in real simple constructor.

51
00:02:57.230 --> 00:03:01.770
Here's my deposit method it's expecting an amount you can see the amount right here.

52
00:03:01.790 --> 00:03:06.080
If the amount is less than zero on returning false this is one of the little changes that I made to

53
00:03:06.080 --> 00:03:06.680
these methods.

54
00:03:06.680 --> 00:03:13.050
Notice that deposit and withdraw both return true false values right boolean.

55
00:03:13.130 --> 00:03:17.680
So this will return true if the deposit was successful fault's otherwise.

56
00:03:17.780 --> 00:03:18.470
Same here.

57
00:03:18.470 --> 00:03:21.430
This would return true if the withdrawal was successful fault.

58
00:03:21.470 --> 00:03:28.100
Otherwise this is a pretty rudimentary way of doing error checking because you're just returning true

59
00:03:28.100 --> 00:03:28.900
false.

60
00:03:28.910 --> 00:03:31.410
That could be a lot of different reasons for failure.

61
00:03:31.550 --> 00:03:34.940
And we'll talk about that when we talk about exceptions and exception handling.

62
00:03:35.180 --> 00:03:37.480
But for now this would serve us just fine.

63
00:03:37.490 --> 00:03:39.650
So here's my deposit method.

64
00:03:39.650 --> 00:03:44.390
Given an amount if the amount is less than zero I'm going to return false because that really doesn't

65
00:03:44.390 --> 00:03:44.960
make sense.

66
00:03:44.960 --> 00:03:51.490
I don't want to deposit negative amounts which would be kind of like withdrawals if the amount is not

67
00:03:51.500 --> 00:03:56.610
less than zero then I'm simply incrementing the balance by the amount and returning troops successful

68
00:03:57.050 --> 00:04:00.640
Here's my withdraw same idea I'm getting an amount to withdraw.

69
00:04:00.770 --> 00:04:06.290
I'm checking to see if I subtract that from the balance if I still have the balance in which case if

70
00:04:06.290 --> 00:04:13.760
I do I do the withdrawal and I return True it was successful otherwise I return false right here.

71
00:04:13.760 --> 00:04:16.380
All right here's my get balance which simply returns the balance.

72
00:04:16.380 --> 00:04:18.050
Notice that's a Konst method.

73
00:04:18.200 --> 00:04:23.660
And then the very last function down here is my overloaded insertion operator which is a friend of this

74
00:04:23.660 --> 00:04:24.560
class.

75
00:04:24.830 --> 00:04:31.850
It expects a stream and it expects an account and all the displays is the account followed by the account

76
00:04:31.850 --> 00:04:32.200
name.

77
00:04:32.210 --> 00:04:37.300
Notice that I have access to these guys because I'm a friend so all it's displaying is he can't name

78
00:04:37.300 --> 00:04:38.520
the account balance.

79
00:04:38.600 --> 00:04:43.370
So hopefully that makes sense you can walk through it and study it a little bit before you start the

80
00:04:43.370 --> 00:04:44.040
challenge.

81
00:04:44.070 --> 00:04:46.660
And like I said I'll explain the challenge in the next video.

82
00:04:46.670 --> 00:04:49.530
So now let's take a look at our savings account.

83
00:04:49.550 --> 00:04:54.170
We've got two classes in this hierarchy we've got an account we've got a savings account.

84
00:04:54.260 --> 00:04:59.560
So here's my savings account and notice set in a savings account is a type of account.

85
00:04:59.600 --> 00:05:02.100
So that's kind of a clue as to what we're going to do.

86
00:05:02.110 --> 00:05:06.500
Right right here public inheritance so it's an account.

87
00:05:06.590 --> 00:05:10.650
But what it does is it adds an interest rate and you can see the interest rate right here.

88
00:05:10.680 --> 00:05:17.780
It's a protected data member and the withdraw is the same as a regular account so you can see that the

89
00:05:17.780 --> 00:05:19.620
withdraw isn't here right.

90
00:05:19.760 --> 00:05:24.320
There's no need to override withdraw because the accounts withdraw it works just fine.

91
00:05:24.320 --> 00:05:25.290
So all we want to do.

92
00:05:25.490 --> 00:05:27.520
We have no specialization for that.

93
00:05:27.650 --> 00:05:33.110
So I commented right here inherits the account withdraw method the deposit does specialize.

94
00:05:33.110 --> 00:05:33.970
It's a little bit different.

95
00:05:33.970 --> 00:05:39.200
So the amount supplied to the deposit will be incremented by the amount.

96
00:05:39.200 --> 00:05:40.640
I should say here sorry about that.

97
00:05:40.640 --> 00:05:46.070
I will fix that by the amount of times the interest rate divided by 100 rates of the interest rate is

98
00:05:46.070 --> 00:05:46.720
five.

99
00:05:46.880 --> 00:05:51.170
Then that would be point 0 5 which is the 5 percent times the amount.

100
00:05:51.170 --> 00:05:53.170
And we're going to put that right back in.

101
00:05:53.730 --> 00:05:54.350
OK.

102
00:05:54.410 --> 00:05:57.580
That's pretty much it hit here the rest is pretty self-explanatory.

103
00:05:57.590 --> 00:06:00.370
I think I've got three consecrations here.

104
00:06:00.440 --> 00:06:03.830
The first one is unnamed savings account which is my default name.

105
00:06:03.830 --> 00:06:05.930
Notice that it's right here if it's not supplied.

106
00:06:05.930 --> 00:06:07.100
That's it.

107
00:06:07.100 --> 00:06:13.370
My default balance and my default interest rate are over here and right here again you don't have to

108
00:06:13.370 --> 00:06:14.320
do this here.

109
00:06:14.420 --> 00:06:20.840
You can simply put them in right in here 0 0 0 0 and a named savings account right here.

110
00:06:20.840 --> 00:06:25.070
This has got to be c suppose plus 11 to do this kind of thing.

111
00:06:25.490 --> 00:06:29.330
And let's see what else what else do we have.

112
00:06:29.330 --> 00:06:36.560
We have the constructor which expects all three of those guys as I said and I've got my deposit which

113
00:06:36.560 --> 00:06:41.070
I have to override to support this kind of deposit behavior.

114
00:06:41.650 --> 00:06:42.280
OK.

115
00:06:42.290 --> 00:06:47.060
So one of the things that hopefully you'll notice and this is one of the ideas with inheritance is that

116
00:06:47.480 --> 00:06:52.310
as you derive classes you really should have to do a lot less than the previous class did.

117
00:06:52.310 --> 00:06:53.380
Right.

118
00:06:53.660 --> 00:06:58.490
Which makes sense because after all what we're doing is we're specializing we're not redoing.

119
00:06:58.700 --> 00:07:02.590
So let's take a look at the implementation for the savings account.

120
00:07:03.100 --> 00:07:06.140
So you see a lot of code here and that's the whole idea.

121
00:07:06.150 --> 00:07:11.180
Mean if you find yourself writing a lot of code in the specialization classes that you're deriving then

122
00:07:11.180 --> 00:07:15.140
either it's a really complex derivation or something is not quite right.

123
00:07:15.530 --> 00:07:17.680
So let's take a look at the constructor.

124
00:07:17.750 --> 00:07:23.580
Here you can see the constructor it's expects a name a balance and an interest rate.

125
00:07:23.780 --> 00:07:28.040
And remember a savings account is an account so I need to take care of that account.

126
00:07:28.040 --> 00:07:29.070
Part of me.

127
00:07:29.150 --> 00:07:36.550
So right here I'm invoking my base classes constructor and I'm passing in name and balance.

128
00:07:36.560 --> 00:07:39.530
Remember that's when an account has a name and a balance.

129
00:07:39.560 --> 00:07:41.960
So I'm going to let the account class take care of that.

130
00:07:41.960 --> 00:07:43.450
It knows about that.

131
00:07:43.550 --> 00:07:46.010
Those are not my instance variables here.

132
00:07:46.010 --> 00:07:48.080
I'm only putting in the rate.

133
00:07:48.260 --> 00:07:53.310
Once that's done I'll come back and I will initialize the the interest rate to whatever is passed in

134
00:07:53.320 --> 00:07:55.970
right over here and that'll do it.

135
00:07:55.970 --> 00:08:01.670
Notice that none of these constructors have bodies to them and said Did you have bodies to them you

136
00:08:01.670 --> 00:08:04.180
can see the body right here there's no code in the body.

137
00:08:04.340 --> 00:08:08.360
You could simply put out statements in there if you want to see them execute.

138
00:08:08.360 --> 00:08:13.400
Also there's no destructors there's no copy constructor is just overloaded assignment operators because

139
00:08:13.400 --> 00:08:14.780
we don't need any of those.

140
00:08:14.780 --> 00:08:19.020
The balance is double the interest rate as a double and the name is a STD string.

141
00:08:19.060 --> 00:08:22.040
They know how to take care of themselves so we don't have to worry about that.

142
00:08:22.130 --> 00:08:24.620
We don't have any raw pointers here.

143
00:08:24.620 --> 00:08:27.150
All right so now let's take a look at the deposit method.

144
00:08:27.380 --> 00:08:32.600
Here's the deposit method you can see we expect an amount to deposit and we're going to increment that

145
00:08:32.600 --> 00:08:39.040
amount by the amount itself times the interest rate divided by 100 that's what the business logic says.

146
00:08:39.380 --> 00:08:44.810
Once we know the amount that we want to deposits right here then we really don't want to do that ourselves.

147
00:08:44.810 --> 00:08:48.000
We want to ask our account class to do it for us.

148
00:08:48.170 --> 00:08:54.200
So we're going to call the deposit method in the account class which is right here and you need to put

149
00:08:54.200 --> 00:08:56.430
this piece right in front here.

150
00:08:56.480 --> 00:09:01.250
Otherwise the compiler will call this method right here and you can end up with recursion forever.

151
00:09:01.400 --> 00:09:03.800
And so be be real careful about that.

152
00:09:03.860 --> 00:09:08.340
You to be sure that you call the account class's deposit method and we pass in the amount.

153
00:09:08.390 --> 00:09:09.070
That's it.

154
00:09:09.380 --> 00:09:10.910
And noticed something else here.

155
00:09:10.940 --> 00:09:13.250
This returns a boolean right.

156
00:09:13.400 --> 00:09:20.270
Well I'm returning whatever my base class is deposit method returns to me.

157
00:09:20.410 --> 00:09:25.460
And so if it failed over there I'm just returning fail here if it worked over there I'm returning true

158
00:09:25.460 --> 00:09:26.170
here.

159
00:09:26.470 --> 00:09:32.090
OK so again we're leveraging on the fact that all of these deposit and withdraw methods will return

160
00:09:32.240 --> 00:09:33.090
booleans.

161
00:09:33.140 --> 00:09:36.730
Notice there is no withdraw method because we're inheriting our parents.

162
00:09:36.860 --> 00:09:39.450
It's public in the account so it's public and me.

163
00:09:39.470 --> 00:09:41.140
So I've got access to it.

164
00:09:41.810 --> 00:09:46.680
And here is the overloaded insertion operator for a savings account.

165
00:09:47.060 --> 00:09:53.270
I mentioned slicing before if we don't provide this and we pass a savings account into the account overloaded

166
00:09:53.270 --> 00:09:57.650
insertion operator it'll slice and this piece here won't print.

167
00:09:57.650 --> 00:10:01.090
It'll still print name and balance because all accounts have names and balances.

168
00:10:01.100 --> 00:10:06.760
But this piece here this is what my savings account brings so this will just display savings account

169
00:10:06.790 --> 00:10:11.780
the account name account balance and whatever the interest rate is in Perceptor.

170
00:10:12.060 --> 00:10:12.910
Okay perfect.

171
00:10:12.910 --> 00:10:16.620
So now I wrote a little bit more code just to make our lives a little easier.

172
00:10:16.660 --> 00:10:21.400
And it's right in these two files right here created two files one is called Account underscore you

173
00:10:21.400 --> 00:10:26.860
till that header file and then the count underscore you still implementation file.

174
00:10:26.950 --> 00:10:31.180
And these are utility functions that we're going to use with these classes.

175
00:10:31.180 --> 00:10:32.320
They're not part of the class.

176
00:10:32.320 --> 00:10:33.970
They're simply utility functions.

177
00:10:33.970 --> 00:10:34.850
Let's take a look.

178
00:10:34.990 --> 00:10:36.990
Let's take a look at the header file.

179
00:10:37.580 --> 00:10:43.450
Ok so I've got some simple utility helper functions for the account class and the savings account class.

180
00:10:43.780 --> 00:10:48.010
You'll see a lot of duplicated code here and a lot of this duplicated code is going to go away in the

181
00:10:48.010 --> 00:10:49.000
next section.

182
00:10:49.120 --> 00:10:53.800
When we talk about polymorphic functions but here we're doing everything statically So we've got to

183
00:10:53.800 --> 00:10:54.970
do it this way.

184
00:10:54.970 --> 00:10:56.150
So take a look at this.

185
00:10:56.150 --> 00:10:57.630
I've got a display function.

186
00:10:57.630 --> 00:11:00.080
I remember these are regular functions.

187
00:11:00.100 --> 00:11:06.160
These are not class member functions these are just plain old global C++ functions.

188
00:11:06.220 --> 00:11:12.820
It's called display and it expects a vector of accounts write a bunch of accounts by ref.

189
00:11:12.820 --> 00:11:16.510
Then I've got all that does is just loops through them and displays each one of them and I'll show you

190
00:11:16.510 --> 00:11:17.560
the code for that in a moment.

191
00:11:17.560 --> 00:11:22.210
These are just the prototypes that we're going to use in man here have got to deposit.

192
00:11:22.330 --> 00:11:28.330
And all that's going to do is give me a list or a vector in this case of account objects and I'm going

193
00:11:28.330 --> 00:11:30.880
to deposit this amount into all of them.

194
00:11:30.880 --> 00:11:34.180
So this is going to really be nice for us to test our code.

195
00:11:34.180 --> 00:11:35.810
Same thing here with withdraw.

196
00:11:36.040 --> 00:11:40.350
Withdraw a thousand dollars from all of these accounts that I sent you.

197
00:11:40.510 --> 00:11:42.160
So those are the ones for the account class.

198
00:11:42.160 --> 00:11:46.660
These are the ones for the savings account class you can see that I've got savings accounts here and

199
00:11:46.660 --> 00:11:48.500
accounts here.

200
00:11:48.670 --> 00:11:53.230
Also notice that the names are the same display display deposit deposit withdraw withdraw right so we're

201
00:11:53.240 --> 00:11:54.630
overloading here.

202
00:11:54.700 --> 00:11:59.290
We're using what we learned a long time ago when we talked about functions we're overloading the functions

203
00:11:59.290 --> 00:12:03.220
the compiler can tell them apart because of this first argument right here.

204
00:12:03.220 --> 00:12:04.930
This is a vector of savings accounts.

205
00:12:04.930 --> 00:12:07.190
This is a vector of accounts.

206
00:12:07.800 --> 00:12:08.120
OK.

207
00:12:08.140 --> 00:12:11.150
So let's take a look at some of the code for this.

208
00:12:11.170 --> 00:12:15.990
Like I said it's a bit long and repetitive but hopefully you'll get the idea.

209
00:12:16.550 --> 00:12:17.610
Here's the display.

210
00:12:17.770 --> 00:12:21.970
So if you send me a vector of account objects by reference.

211
00:12:22.090 --> 00:12:26.260
And again this is Cotts because I don't want to modify it I'm just displaying it then I'm just going

212
00:12:26.260 --> 00:12:31.240
to print this line accounts and then I'm going to loop and say use arr. base for loop and for every

213
00:12:31.240 --> 00:12:33.100
account in that vector.

214
00:12:33.100 --> 00:12:34.730
I'm just printing it out just like that.

215
00:12:34.730 --> 00:12:40.670
That's using the overloaded insertion operator and that'll display them real nicely.

216
00:12:41.020 --> 00:12:42.130
Here's the deposit.

217
00:12:42.130 --> 00:12:45.350
In this case I don't want this to be Konst as we did over there.

218
00:12:45.350 --> 00:12:52.300
Up up top here because I do want to modify it and it's as simple as loop through the accounts for each

219
00:12:52.300 --> 00:12:54.960
account deposit that amount into it.

220
00:12:55.270 --> 00:13:01.690
If it came back true that means the deposit was successful and I just display deposited however much

221
00:13:01.690 --> 00:13:06.070
amount to whatever account if it fails for whatever reason.

222
00:13:06.100 --> 00:13:16.160
I'm just saying failed deposit to this this account and last method here is the withdraw.

223
00:13:16.840 --> 00:13:17.850
Same idea.

224
00:13:17.950 --> 00:13:23.350
I want to withdraw this amount from all of the objects in that vector.

225
00:13:23.680 --> 00:13:29.320
So all I'm going to do is loop through I'm going to call the withdraw method on each account and if

226
00:13:29.320 --> 00:13:33.360
it comes back true then the withdrawal is successful and I'll display.

227
00:13:33.540 --> 00:13:36.570
I withdrew $1000 from each count.

228
00:13:36.610 --> 00:13:38.800
If it fails I'll say that as well.

229
00:13:39.990 --> 00:13:43.020
OK so you can see it's pretty standard it's nothing we haven't done before.

230
00:13:43.020 --> 00:13:45.910
The only thing that's different maybe is the organization that we're doing.

231
00:13:46.020 --> 00:13:53.040
So I've got those three functions for account and then I've basically got the same three functions for

232
00:13:53.050 --> 00:13:53.940
savings account.

233
00:13:53.940 --> 00:13:56.550
You can see savings accounts right there.

234
00:13:56.610 --> 00:14:01.530
So it's really pretty much the same the only difference is that this deposit and this withdrawal right

235
00:14:01.530 --> 00:14:08.940
here will use these specialized versions of the deposit and withdraw from the savings account.

236
00:14:09.630 --> 00:14:10.460
So that's it.

237
00:14:10.470 --> 00:14:12.200
Let's look at the main.

238
00:14:12.780 --> 00:14:16.470
Here's my main and not that long but we're got a lot going on here though.

239
00:14:16.500 --> 00:14:22.150
Notice that I'm including account utility H right because I need those utility functions.

240
00:14:22.410 --> 00:14:26.490
And let me scroll up just a little bit and see what's happening here with the count.

241
00:14:26.790 --> 00:14:31.770
I'm creating a vector we've used the vector before we'll learn more about the vector in the list and

242
00:14:31.770 --> 00:14:35.870
other things when we talk about the C++ standard template library.

243
00:14:35.880 --> 00:14:38.920
But we've used vectors so we should be pretty familiar with it.

244
00:14:39.270 --> 00:14:45.150
So I'm creating a vector here called accounts a vector of account objects and I'm just simply creating

245
00:14:45.240 --> 00:14:47.050
an empty account.

246
00:14:47.050 --> 00:14:50.050
Right that's going to be an unnamed account with a zero balance.

247
00:14:50.220 --> 00:14:56.400
I'm creating another account called Larry with zero Moe with 22000 and Curly with 5000.

248
00:14:56.400 --> 00:15:00.330
And I'm pushing those accounts at the back of that vector.

249
00:15:00.360 --> 00:15:05.250
So all we're doing there is creating a vector and creating four account objects and putting putting

250
00:15:05.250 --> 00:15:06.730
them in the vector.

251
00:15:06.810 --> 00:15:09.470
Once we're done with that we're going to use those utility functions.

252
00:15:09.480 --> 00:15:11.530
You can see this is where it comes in real handy.

253
00:15:11.700 --> 00:15:18.480
Display the accounts deposit 1000 into each one of those accounts and withdraw 2000 from each one of

254
00:15:18.480 --> 00:15:19.830
those accounts.

255
00:15:19.860 --> 00:15:24.390
So that's going to deal with accounts and then we're going to do the exact same thing with savings accounts.

256
00:15:24.390 --> 00:15:30.090
So in this case I've got a vector of savings account objects and I'll call it safe accounts and the

257
00:15:30.090 --> 00:15:34.530
same idea I'm going to create a savings account object that's empty.

258
00:15:35.100 --> 00:15:40.200
I'm going to create a savings account object that Superman and another one for a Batman with 2000.

259
00:15:40.320 --> 00:15:47.310
And finally one woman with five thousand and five percent interest these get the default values for

260
00:15:47.310 --> 00:15:48.960
both the balance and the interest.

261
00:15:48.960 --> 00:15:53.160
These guys right here and this guy gets all three default values right.

262
00:15:53.160 --> 00:15:57.610
It's going to be an unnamed savings account with no balance and no interest rate.

263
00:15:58.020 --> 00:16:01.590
And then we'll do the same thing with this saving display deposit and withdraw.

264
00:16:01.590 --> 00:16:06.600
You can see that we've got the same code here and here but different functions will be called because

265
00:16:06.600 --> 00:16:08.160
of the overloading.

266
00:16:08.220 --> 00:16:13.290
So let's run this and you'll see the output and hopefully you'll see why I did those utility use those

267
00:16:13.290 --> 00:16:18.940
utility function because it's just going to make our lives much much easier and make our main very clear.

268
00:16:18.940 --> 00:16:21.390
So let me run this build and run.

269
00:16:21.750 --> 00:16:23.760
And here you can see the output.

270
00:16:24.030 --> 00:16:30.480
I'll scroll to the top and right here I'm displaying the accounts and this is what you're seeing here

271
00:16:30.960 --> 00:16:33.400
on the right side account unnamed account.

272
00:16:33.420 --> 00:16:35.590
That's from this guy right here.

273
00:16:35.880 --> 00:16:42.870
Then we see Larry with no balance then we see mode with 2000 and then we see with 5000.

274
00:16:42.870 --> 00:16:44.890
Then I call the deposit function.

275
00:16:44.970 --> 00:16:49.010
And what that's going to do is it's going to loop through all these four accounts and deposit a thousand

276
00:16:49.010 --> 00:16:50.450
dollars into each one.

277
00:16:50.670 --> 00:16:56.400
So you can see here I'm deposited all of the returns successful so I deposited a thousand to the unnamed

278
00:16:56.400 --> 00:16:58.870
account and its balance is now a thousand.

279
00:16:59.010 --> 00:17:05.410
I deposited a thousand to Larry he's a thousand Moe is now three thousand and Curley's six thousand.

280
00:17:05.970 --> 00:17:10.560
And then what I'm going to do is I'm going to withdraw $2000 from each one of those accounts as I do

281
00:17:10.560 --> 00:17:13.040
through them and I'll scroll this up just a little bit.

282
00:17:13.050 --> 00:17:20.130
And you can see that right now I'm withdrawing $2000 from the unnamed account but the named account

283
00:17:20.130 --> 00:17:22.210
only had a $1000 balance.

284
00:17:22.230 --> 00:17:25.740
So it failed and the balance is still frozen.

285
00:17:26.190 --> 00:17:29.120
I tried to withdraw $2000 from Larry.

286
00:17:29.130 --> 00:17:32.340
Well Larry only has a thousand so that failed as well.

287
00:17:32.700 --> 00:17:35.610
And I tried to withdraw 2000 from Moe and Curly.

288
00:17:35.610 --> 00:17:41.070
They have enough balance so Mo is now a thousand Kerley is now 4000.

289
00:17:41.190 --> 00:17:42.580
And now the savings.

290
00:17:42.600 --> 00:17:46.310
Let me scroll up just a little bit so you can see it better here.

291
00:17:46.320 --> 00:17:49.050
Now we're doing the same thing but with savings accounts.

292
00:17:49.050 --> 00:17:57.390
So I'm creating four savings account objects in this case the empty one that Superman with zero zero

293
00:17:57.390 --> 00:18:04.890
Batman with 2000 and 0 and Wonderwoman with 5 0 0 0 0 and 5 percent interest and then displaying them

294
00:18:04.890 --> 00:18:12.090
you can see them being displayed here on display the unnamed savings account 0 0 Superman 0 0 Batman

295
00:18:12.090 --> 00:18:17.340
2000 0 and then Wonderwoman 5 0 0 0 0 0 and 5 percent interest.

296
00:18:17.340 --> 00:18:22.350
Then I'm calling the deposit method for each one of those guys again in the loop using the utility function

297
00:18:22.610 --> 00:18:26.620
and what's happening is I'm going to deposit a thousand dollars into each one of those counts.

298
00:18:26.970 --> 00:18:31.410
And notice that I'm depositing a thousand into unnamed writes and now it's kind of thousand balance

299
00:18:32.000 --> 00:18:34.040
under Pazin a thousand into Superman.

300
00:18:34.110 --> 00:18:41.000
So it has a thousand Husni a thousand into Batman so it was 2000 here now it's 3000 notice.

301
00:18:41.010 --> 00:18:46.320
It had a zero percent interest rate so we didn't get that extra little bonus that we want but in this

302
00:18:46.320 --> 00:18:51.900
case I'm depositing a thousand to wonder woman and wonder woman who's got a 5 percent interest rate

303
00:18:51.900 --> 00:18:55.210
so you can see that that indeed took that into account.

304
00:18:55.200 --> 00:18:58.660
So it's really using that specialized deposit method.

305
00:18:58.920 --> 00:19:03.090
And then what we're doing is we withdraw some $2000 from each one of those accounts.

306
00:19:03.180 --> 00:19:08.370
In this case it's going to fail with the unnamed account because the unnamed account only has a balance

307
00:19:08.370 --> 00:19:09.560
of a thousand.

308
00:19:09.720 --> 00:19:14.730
It's going to fail again with the Superman account because it also only has a balance of a thousand.

309
00:19:15.030 --> 00:19:23.140
But with Batman and Wonder Woman it'll be just fine because Batman at 3000 and wonder woman had 60 50.

310
00:19:23.340 --> 00:19:28.990
So you can see that now we've got a thousand Batman and 40 50 in wonder woman.

311
00:19:29.220 --> 00:19:32.950
Hopefully that makes sense and that gives you an idea of these classes.

312
00:19:33.090 --> 00:19:35.150
Study these look at them play with them.

313
00:19:35.150 --> 00:19:40.260
Run through the debugger throw some statements in there and what do you think you know what we're going

314
00:19:40.260 --> 00:19:45.870
to do we're going to add a few new classes to this hierarchy and I'll talk about that in the next video

315
00:19:46.050 --> 00:19:47.940
when I talk about the actual challenge.
