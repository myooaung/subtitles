1
00:00:05,260 --> 00:00:09,950
In this video we'll see how to format boolean types to output streams.

2
00:00:09,970 --> 00:00:15,160
Note that we're using C out in these examples but any output stream will work including file output

3
00:00:15,160 --> 00:00:17,880
streams which we'll learn about later in this section.

4
00:00:19,350 --> 00:00:25,170
By default a boolean value is displayed as a 1 if the value is true or is zero.

5
00:00:25,170 --> 00:00:29,370
The value is false but sometimes we'd like to display the strings.

6
00:00:29,370 --> 00:00:30,550
True or false.

7
00:00:30,690 --> 00:00:35,410
And I really don't want to write if else logic all over our code every time we need to do that.

8
00:00:35,580 --> 00:00:43,080
Instead we can tell our output stream to display boolean values as 0 1 or as true false whichever we

9
00:00:43,080 --> 00:00:45,320
want first.

10
00:00:45,330 --> 00:00:49,180
Let's see an example of the default behavior for boolean values.

11
00:00:49,290 --> 00:00:52,900
First we display the value of the expression 10 equals 10.

12
00:00:52,920 --> 00:00:59,370
Since this is true a 1 will be displayed then we display the value of the expression 10 equals 20 which

13
00:00:59,370 --> 00:01:00,070
is false.

14
00:01:00,090 --> 00:01:02,730
And as you see a zero is displayed.

15
00:01:02,730 --> 00:01:08,830
Now let's use a stream manipulator to switch this to true false mode in the first statement.

16
00:01:08,850 --> 00:01:12,360
We're setting the output stream C out to Boutelle alpha mode.

17
00:01:12,360 --> 00:01:15,560
This means that all further output to see out will display.

18
00:01:15,560 --> 00:01:24,190
True or false as strings and you can see the output from the same program now displays true and false.

19
00:01:24,210 --> 00:01:30,150
It's important to understand that with Boolean formatting once we set it with bool alpha or noble alpha

20
00:01:30,390 --> 00:01:36,150
then all further boolean values will be displayed that way we can toggle back and forth as appropriate

21
00:01:36,150 --> 00:01:37,340
as shown in this slide.

22
00:01:38,930 --> 00:01:43,410
We can also set the format for boolean types using the set f method.

23
00:01:43,550 --> 00:01:49,380
In this case we have a bunch of flags that can be used to set and reset formatting directives.

24
00:01:49,460 --> 00:01:57,800
In this example we can pass stood IRS bull alpha or Stewart iOS noble alpha to the C or object to change

25
00:01:57,800 --> 00:01:59,540
its formatting.

26
00:01:59,550 --> 00:02:01,960
Finally we also have a method named reset.

27
00:02:01,980 --> 00:02:05,440
AOS flags that expects the flag to reset.

28
00:02:05,730 --> 00:02:11,490
In this case we can pass in studio as bool Alpha and it will reset the stream to whatever the default

29
00:02:11,550 --> 00:02:12,900
is for that flag.

30
00:02:13,140 --> 00:02:19,260
In this case it will go back to displaying booleans as zeros and ones although you sometimes see this

31
00:02:19,260 --> 00:02:20,770
type of code in production.

32
00:02:20,790 --> 00:02:25,470
It's more common to see the manipulator version and that's what I focus on in this section.

33
00:02:25,470 --> 00:02:31,320
So let's head over to the IDM will do a couple of examples using bool Alpha and noble Alpha.

34
00:02:31,320 --> 00:02:32,700
OK so you mean the ID.

35
00:02:32,700 --> 00:02:39,720
I mean the section 19 workspace in the manip underscore Bouley in project and in this project.

36
00:02:39,720 --> 00:02:45,630
I've got a bunch of simple test cases here that just display certain values just pointed out or see

37
00:02:45,690 --> 00:02:46,110
out.

38
00:02:46,140 --> 00:02:51,990
In this case those values are boolean values and we're going to manipulate them using the noble Alpha

39
00:02:52,050 --> 00:02:54,930
and bhool Alpha manipulators.

40
00:02:54,930 --> 00:03:00,440
So here's the default what we're doing here we're going to use this same test case throughout.

41
00:03:00,450 --> 00:03:03,970
You can see what we've got here we've got word is 9:39.

42
00:03:03,990 --> 00:03:05,160
That's either true or false.

43
00:03:05,160 --> 00:03:10,290
Obviously this is true so this will always display true and 10 equals 20 will never be true so that

44
00:03:10,290 --> 00:03:12,200
will always display false.

45
00:03:12,210 --> 00:03:16,050
In this case we're using an expression but we can certainly use a variable.

46
00:03:16,050 --> 00:03:18,680
Anything that evaluates to a true false value.

47
00:03:18,990 --> 00:03:23,000
So by default this will display true which is a 1.

48
00:03:23,030 --> 00:03:25,560
And this will display false which is zero.

49
00:03:25,800 --> 00:03:30,970
So by default that is the way that we display boolean values as we saw in the slides.

50
00:03:30,990 --> 00:03:32,750
So why don't we run this program.

51
00:03:32,850 --> 00:03:37,650
And then we'll start modifying it just a little bit so we can start displaying the actual string true

52
00:03:37,650 --> 00:03:38,440
false.

53
00:03:38,460 --> 00:03:41,370
So let me run this and you can see right here.

54
00:03:41,370 --> 00:03:43,720
I'll move this over here so you can see what's going on.

55
00:03:44,870 --> 00:03:47,180
Noble Alpha is the default.

56
00:03:47,210 --> 00:03:50,060
I didn't set it but it was just the default you can see I've sent nothing here.

57
00:03:50,060 --> 00:03:55,520
All I'm doing is those to see out statements and I'm getting a one here and I'm getting zero here exactly

58
00:03:55,520 --> 00:03:56,630
what I expect.

59
00:03:57,000 --> 00:04:02,290
OK so now let's make a few changes here so you can see what I'm doing here on line 14.

60
00:04:02,300 --> 00:04:05,000
I'm inserting stood Alpha onto Seow.

61
00:04:05,030 --> 00:04:06,320
It's a manipulator.

62
00:04:06,320 --> 00:04:11,900
This will switch the the default formatting in this case now to true false.

63
00:04:11,900 --> 00:04:15,250
Now it's important to understand it will show you on lines 19 and 20.

64
00:04:15,250 --> 00:04:16,270
That this is true.

65
00:04:16,370 --> 00:04:21,470
Once we set that everything else whenever you need to display a boolean value.

66
00:04:21,470 --> 00:04:27,120
This is the setting that'll stick there so if we need to go back to 0 1 we have to do that manually.

67
00:04:27,160 --> 00:04:32,270
All right so what we expect here now is to actually display the word true in the word false so let's

68
00:04:32,270 --> 00:04:33,180
give this a run.

69
00:04:34,460 --> 00:04:40,760
And who you go you can see the original two statements 1 0 but now we're seeing true false.

70
00:04:40,830 --> 00:04:44,690
Ok so here all we're doing is showing that once we set it it's set.

71
00:04:44,690 --> 00:04:45,220
Right.

72
00:04:45,260 --> 00:04:50,240
So here it's set to true false and we just displayed two statements to see out.

73
00:04:50,240 --> 00:04:54,530
Now we've got another two and we expect those to be true false as well.

74
00:04:54,530 --> 00:04:55,070
There you go.

75
00:04:55,070 --> 00:04:56,430
True False True False.

76
00:04:56,450 --> 00:04:59,070
It's going to keep doing this until you change it.

77
00:04:59,360 --> 00:05:07,840
And that's what we're going to do here on this lines 23 to 25 I'm using stood no bull Alfonso this is

78
00:05:07,840 --> 00:05:14,030
toggling back to the default of 0 1 and at this point we should be getting 0 1.

79
00:05:14,200 --> 00:05:17,680
So I should get again 1 0.

80
00:05:17,680 --> 00:05:19,540
TRUE FALSE true false.

81
00:05:19,540 --> 00:05:24,860
And then 1 0 again and that's exactly what I'm getting 1 0.

82
00:05:24,860 --> 00:05:26,250
TRUE FALSE true false.

83
00:05:26,330 --> 00:05:28,170
And then 1 0 here.

84
00:05:28,870 --> 00:05:29,480
OK.

85
00:05:29,630 --> 00:05:31,490
So that's pretty straightforward.

86
00:05:31,520 --> 00:05:36,470
And believe it or not what you're seeing here holds for every one of the manipulators that we're going

87
00:05:36,470 --> 00:05:36,920
to see.

88
00:05:36,920 --> 00:05:42,380
So it's the same kind of behavior not the part of once you said it it's set some of them just work for

89
00:05:42,380 --> 00:05:44,950
one insertion but we'll talk about those.

90
00:05:45,000 --> 00:05:47,770
But I'm talking about the syntax and the general flow here.

91
00:05:47,780 --> 00:05:49,540
It's pretty much the same for all of them.

92
00:05:49,550 --> 00:05:56,360
So let me comment out these lines 28 to 30 and in this case I'm doing the same thing except I'm not

93
00:05:56,360 --> 00:05:59,830
using the manipulator I'm using the set f method.

94
00:06:00,140 --> 00:06:02,420
So you can see him saying stood out.

95
00:06:02,510 --> 00:06:08,450
Dot set f set f is the method and it expects a stood iOS bhool Alpha.

96
00:06:08,450 --> 00:06:11,890
Now that looks maybe kind of intimidating and nasty it's not so bad.

97
00:06:11,990 --> 00:06:18,730
Stood is the namespace iOS is a class and bhool Alpha is a flag that's defined in that class.

98
00:06:18,750 --> 00:06:23,090
OK so C++ is doing exactly what it is expected to do.

99
00:06:23,090 --> 00:06:28,290
If you just type bool Alpha it won't know where to find it so you have to say it's stood namespace I

100
00:06:28,380 --> 00:06:31,820
Os class bool Alpha flag.

101
00:06:31,820 --> 00:06:38,090
If you're using namespace standard then you don't need to put stood here or here or anywhere here that

102
00:06:38,090 --> 00:06:39,230
you see it lighting up right.

103
00:06:39,230 --> 00:06:41,330
You could just use iOS Alpha.

104
00:06:41,820 --> 00:06:47,250
OK so in this case again I'm sending it back to true false but I'm doing it with this method now.

105
00:06:47,420 --> 00:06:52,690
So you should see those last two statements display the words true false and there they are right.

106
00:06:52,690 --> 00:07:01,560
Here you can see there is true and here is false and then the last one is used to reset certain flags.

107
00:07:01,580 --> 00:07:08,000
All of these flags that we're going to use have default values so when we talk about left and right

108
00:07:08,000 --> 00:07:14,390
justification and you know the way we display numbers or the way we display booleans as in this case

109
00:07:14,390 --> 00:07:16,100
they have default ways of doing it.

110
00:07:16,100 --> 00:07:20,950
We know the default for booleans is the number is 0 or 1 right.

111
00:07:21,110 --> 00:07:29,340
So there is a manipulator here called reset U.S. flags and again it's understood namespace reset Iowas

112
00:07:29,360 --> 00:07:34,900
flags and then you pass into it whatever flag you want to reset and it will reset that.

113
00:07:35,030 --> 00:07:40,940
Not to Alpha but reset it to the default behavior for displaying booleans which in this case will be

114
00:07:41,180 --> 00:07:42,770
numbers right 0 1.

115
00:07:42,770 --> 00:07:46,460
So when we run this we expect that to be reset to the default.

116
00:07:46,550 --> 00:07:52,020
And what's nice about this is suppose you've got a modifier that has there aren't any like this.

117
00:07:52,010 --> 00:07:55,070
But suppose you had 8 different values right.

118
00:07:55,160 --> 00:07:56,730
One of them is obviously the default.

119
00:07:56,750 --> 00:07:58,670
You don't have to worry about which one it to set.

120
00:07:58,670 --> 00:08:04,220
You could just basically call this with the flag you want and reset it to the appropriate behavior.

121
00:08:04,220 --> 00:08:09,680
So let's run this in now we expect that those last two statements to print out one in zero.

122
00:08:09,840 --> 00:08:13,150
And there you go so that's it.

123
00:08:13,150 --> 00:08:18,340
The basics of everything else we're going to do with most with the manipulators are here.

124
00:08:18,490 --> 00:08:24,310
We can use them in line we can use them with functions and what we'll do next is we'll talk about integer

125
00:08:24,610 --> 00:08:27,050
output so we'll be right back to do that.
