1
00:00:05,460 --> 00:00:13,030
In this video we'll go over the C++ equality operators these operators compare the values of two expressions

2
00:00:13,420 --> 00:00:14,950
and evaluate to a boolean.

3
00:00:15,010 --> 00:00:16,930
That's a true false value.

4
00:00:17,050 --> 00:00:23,140
The operators are the equals which is represented by two equal signs and the not equal operator which

5
00:00:23,140 --> 00:00:29,640
is represented by the exclamation point or Bang's symbol followed immediately by an equal symbol be

6
00:00:29,700 --> 00:00:31,440
extra careful when you're starting.

7
00:00:31,530 --> 00:00:36,030
It's super common for beginning C++ programmers to use a single equal sign.

8
00:00:36,210 --> 00:00:42,620
That's assignment not comparison these simple operators along with the operators would learn about in

9
00:00:42,620 --> 00:00:47,990
the next several videos give us so much power in programming we use these operators all the time and

10
00:00:47,990 --> 00:00:50,230
control flow statements that we'll learn shortly.

11
00:00:50,450 --> 00:00:53,180
So suppose we want to do something when x is equal to 100.

12
00:00:53,180 --> 00:00:54,240
We can do that.

13
00:00:54,260 --> 00:00:57,590
We can also test for two expressions not being equal.

14
00:00:57,590 --> 00:01:03,650
So if my password doesn't match the password on file then you want to do something specific the following

15
00:01:03,650 --> 00:01:09,340
code snippets only show the equality expressions they're always used within statements.

16
00:01:09,380 --> 00:01:14,900
The first example evaluate to TRUE if the value of expression 1 is equal to the value of expression

17
00:01:14,900 --> 00:01:19,790
to these two expressions could be very complex or very simple.

18
00:01:19,790 --> 00:01:26,240
The second example will evaluate to TRUE if the value of expression 1 is not equal to the value expression

19
00:01:26,240 --> 00:01:32,620
to the 30 sample will always evaluate to false since 100 will never equal 200.

20
00:01:32,620 --> 00:01:37,160
We don't usually write expressions like these but it serves to illustrate how this operator works.

21
00:01:38,020 --> 00:01:42,810
The final example evaluates to true if number one is not equal to number two.

22
00:01:44,510 --> 00:01:47,160
Let's go over a few more examples that you statements.

23
00:01:47,210 --> 00:01:52,880
First we're declaring a variable named result that's of type Boolean and we're initializing it to False.

24
00:01:53,030 --> 00:01:57,170
Then we compare one hundred and fifty plus 50 for equality.

25
00:01:57,170 --> 00:02:03,340
This will result in a boolean that's a true false value which we assign to result in the next example

26
00:02:03,350 --> 00:02:05,230
we compare number 1 and number two.

27
00:02:05,420 --> 00:02:08,270
And if they're not equal we store true end result.

28
00:02:08,270 --> 00:02:10,080
Otherwise false.

29
00:02:10,130 --> 00:02:15,530
Notice how we can use boolean expressions in output statements in the first output statement we're comparing

30
00:02:15,530 --> 00:02:20,610
number one and number two and we're displaying one if they're equal or 0 if they're not equal.

31
00:02:20,870 --> 00:02:26,540
Sometimes it's handy to display the words true and false rather than 1 and 0 in the output statements.

32
00:02:26,540 --> 00:02:32,630
We can do that using the bool Alpha stream manipulator Alpha and noble Alpha are located in the standard

33
00:02:32,630 --> 00:02:33,700
named space.

34
00:02:33,740 --> 00:02:38,700
Once you use them all boolean output to the stream will result in the words true and false being displayed.

35
00:02:38,780 --> 00:02:44,670
That can be pretty handy if you want to go back to the default of 0 and 1 just use noble Alpha.

36
00:02:45,110 --> 00:02:47,520
Let's head over to code light and see some examples.

37
00:02:48,610 --> 00:02:55,510
So I mean code like I am in the section 8 workspace the equality operators project let's run over a

38
00:02:55,510 --> 00:02:58,010
few examples of using these equality operators.

39
00:02:58,090 --> 00:03:02,080
These are going to be really really straightforward examples I don't think you'll have any issues understanding

40
00:03:02,090 --> 00:03:06,550
this but you may see a couple of surprises so stay tuned for that.

41
00:03:06,550 --> 00:03:12,270
So here we go we've got and we've got a boolean called equal result which I'm initialising to faults

42
00:03:12,340 --> 00:03:17,200
and another building called not equal result which I'm also initialising to faults and I've got two

43
00:03:17,200 --> 00:03:17,920
integers here.

44
00:03:17,920 --> 00:03:19,160
Number one and number two.

45
00:03:19,240 --> 00:03:21,370
And we'll just play around with this a little bit.

46
00:03:21,370 --> 00:03:26,530
I've got my C out bu alpha here commented out uncomment that out in a moment moments you can see the

47
00:03:26,530 --> 00:03:27,940
difference between the behavior.

48
00:03:28,120 --> 00:03:29,220
When you do that.

49
00:03:29,260 --> 00:03:33,820
So here I'm prompting the user to enter two integers separated by space.

50
00:03:33,820 --> 00:03:39,670
I'm reading in those two integers on line 15 I'm comparing those two integers for equality right here

51
00:03:39,670 --> 00:03:41,000
on line 16.

52
00:03:41,020 --> 00:03:47,890
So I'm saying is no one equal to number two that result is going to be stored in equal results so it's

53
00:03:47,890 --> 00:03:52,300
either going to be true if they're equal or not true if they're not equal then I'm going to compare

54
00:03:52,300 --> 00:03:55,270
the same two numbers using the not equal operator.

55
00:03:55,270 --> 00:03:59,380
So is number one not equal to number two in this case if they are not equal then I'm going to store

56
00:03:59,410 --> 00:04:03,190
true into the not equal result otherwise false.

57
00:04:03,310 --> 00:04:03,810
OK.

58
00:04:03,910 --> 00:04:08,050
And then I'm just going to print out those two results so let's run this piece of the code right now

59
00:04:08,650 --> 00:04:10,260
and you'll see what happens.

60
00:04:10,270 --> 00:04:14,620
Let's enter two integers in this case let's enter two integers that are equal to one another.

61
00:04:14,710 --> 00:04:21,580
So I'll type in 10 and 10 and Precentor and you can see here the comparison result for equals is 1 which

62
00:04:21,580 --> 00:04:22,290
is true.

63
00:04:22,630 --> 00:04:26,600
And for not equals zero because they are obviously are equal.

64
00:04:26,980 --> 00:04:27,220
OK.

65
00:04:27,220 --> 00:04:34,120
Now notice I have a one in a 0 being I put it here when I uncomment down the alpha stream manipulator

66
00:04:34,120 --> 00:04:36,930
and recompile and run.

67
00:04:36,960 --> 00:04:43,340
Now I can say that say 20 20 and instead of 0 1 we see true fault so that's pretty handy.

68
00:04:44,290 --> 00:04:48,250
So in this case they are True's to the equals will be true and the articles will be false.

69
00:04:48,280 --> 00:04:51,470
Let's use an example whether they are not equal.

70
00:04:52,360 --> 00:04:55,810
And let's say we're trying to do 10 and 20 this time.

71
00:04:57,040 --> 00:04:57,410
So.

72
00:04:57,460 --> 00:04:59,780
Equals is false and not equals is true.

73
00:04:59,860 --> 00:05:01,870
Just like what we would expect.

74
00:05:01,870 --> 00:05:02,300
OK.

75
00:05:02,390 --> 00:05:04,360
So I said that's pretty straightforward.

76
00:05:04,630 --> 00:05:09,550
I'm going to comment out this piece of code right here and now we'll do the same thing except we'll

77
00:05:09,550 --> 00:05:13,570
do it with characters remember we can do this with any type of pair any type.

78
00:05:13,580 --> 00:05:20,920
So in this case I've declared two characters char one and Tartu and initialize them both to empty to

79
00:05:20,920 --> 00:05:21,530
zero.

80
00:05:21,820 --> 00:05:24,910
And I'm asking the user to enter two characters separated by space.

81
00:05:24,910 --> 00:05:29,920
I'm reading and the characters then doing exactly the same thing I'm comparing them for equality and

82
00:05:29,920 --> 00:05:31,910
I'm comparing them to see if they're not equal.

83
00:05:32,230 --> 00:05:33,550
So let's run this.

84
00:05:33,790 --> 00:05:38,860
And the first test will do is say lower case and upper case A.

85
00:05:39,020 --> 00:05:43,100
There are different characters or Precentor or they equals.

86
00:05:43,150 --> 00:05:44,280
No that's false.

87
00:05:44,290 --> 00:05:45,150
Are they not equal.

88
00:05:45,160 --> 00:05:46,170
True that's true.

89
00:05:46,210 --> 00:05:48,020
That's exactly what we expect.

90
00:05:48,160 --> 00:05:55,870
And let's test it one more time with let's say a capital Z and another capital Z in this case they are

91
00:05:55,870 --> 00:05:56,200
equal.

92
00:05:56,200 --> 00:05:58,850
So that's true and they're not equals is false.

93
00:05:59,350 --> 00:06:02,430
Ok so you can understand the logic that's going on here.

94
00:06:02,530 --> 00:06:10,760
Comment that out and I will uncomment the next section which is dealing with doubles.

95
00:06:10,790 --> 00:06:13,960
So again exactly the same thing except I'm using doubles.

96
00:06:14,000 --> 00:06:22,070
I run this and will type in say two doubles that are the same twelve point one and twelve point one.

97
00:06:22,070 --> 00:06:24,060
The comparison result is they are equal.

98
00:06:24,200 --> 00:06:26,350
Exactly what would expect again.

99
00:06:26,810 --> 00:06:32,230
And let's do an example where they are not equal So let's say twelve point five and thirteen point two

100
00:06:34,360 --> 00:06:38,910
the equals is false because they're not equals and they're not equals is true because they are not equals.

101
00:06:39,010 --> 00:06:39,770
OK.

102
00:06:39,970 --> 00:06:45,700
Now this is the example that I want to run to show you something that may not be real obvious.

103
00:06:45,760 --> 00:06:53,890
Let's say we want to enter two doubles separated by a space and then type in twelve point zero and eleven

104
00:06:54,190 --> 00:06:58,450
point a lot of nines.

105
00:06:58,450 --> 00:07:04,270
Now to us those are not the same number but remember the way the computer stores floating point numbers

106
00:07:04,470 --> 00:07:06,180
it stores approximations.

107
00:07:06,220 --> 00:07:10,360
So that might be surprising as far as the computer is concerned.

108
00:07:10,360 --> 00:07:16,030
Those numbers are equal because the representation that it's using to store them behind the scenes is

109
00:07:16,030 --> 00:07:16,650
equal.

110
00:07:16,900 --> 00:07:23,080
OK so it's important to understand that if you're dealing with applications that need this kind of precision

111
00:07:23,080 --> 00:07:29,170
you know scientific application medical applications many many safety critical type applications you

112
00:07:29,170 --> 00:07:35,560
would not use these built in doubles we would use specific specialized libraries that really help us

113
00:07:35,560 --> 00:07:40,730
deal with this so that 12.0 is not equal to eleven point nine nine nine.

114
00:07:40,820 --> 00:07:41,230
OK.

115
00:07:41,290 --> 00:07:45,220
So it's important to understand that but the way that it stores it is an approximation.

116
00:07:45,220 --> 00:07:49,400
So as far as the computer is concerned these are the same.

117
00:07:49,720 --> 00:07:56,620
So let's do one more and I'll leave that double declaration there and I'll uncomment this last piece

118
00:07:56,620 --> 00:08:00,790
of code here and here I'm just grabbing an integer and a double.

119
00:08:00,790 --> 00:08:03,660
So we're doing some mixed mode comparison here.

120
00:08:03,700 --> 00:08:08,440
Run it and it says give me an integer and a double separated by a space.

121
00:08:08,450 --> 00:08:11,860
In this case I could say 10 and ten point zero.

122
00:08:11,990 --> 00:08:16,590
You remember what happens it's using an operator to compare two different types.

123
00:08:16,610 --> 00:08:17,800
It doesn't want to do that.

124
00:08:17,810 --> 00:08:19,320
This types have to be the same.

125
00:08:19,400 --> 00:08:22,840
So the 10 will be promoted to a ten point zero.

126
00:08:22,910 --> 00:08:24,700
And then the comparison happens.

127
00:08:24,710 --> 00:08:26,660
That's the mixed mode expressions.

128
00:08:26,660 --> 00:08:31,130
So what we're doing here is we're eventually comparing 10.0 and 10.0.

129
00:08:31,130 --> 00:08:39,250
So we expect this to be true and it is right there and you get the same sort of issue here if I say

130
00:08:39,250 --> 00:08:43,860
10 and nine point ninety nine a whole bunch of nines.

131
00:08:43,930 --> 00:08:49,900
What's going to happen again is the 10 will be promoted to ten point zero ten point zero nine point

132
00:08:49,900 --> 00:08:55,330
a bunch of nines as far as the internal representation is concerned are equal.

133
00:08:55,450 --> 00:08:57,280
So there's your True.

134
00:08:57,530 --> 00:09:02,140
OK so that it finishes off this video and that's it I'll see in the next video.
