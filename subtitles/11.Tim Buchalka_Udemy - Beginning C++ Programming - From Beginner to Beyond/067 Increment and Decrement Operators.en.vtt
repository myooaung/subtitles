WEBVTT
1
00:00:05.630 --> 00:00:11.210
In this video we'll go over C++ is increment and decrement operators.

2
00:00:11.210 --> 00:00:16.660
I'm in the Section 8 workspace in the increment decrement operators project.

3
00:00:16.710 --> 00:00:21.450
This is a pretty simple looking operator but there's a lot to it and it can be extremely confusing if

4
00:00:21.450 --> 00:00:22.570
you ever use it.

5
00:00:22.830 --> 00:00:24.060
Let's talk about it.

6
00:00:24.330 --> 00:00:27.940
Basically it's the plus plus minus minus operator.

7
00:00:27.990 --> 00:00:31.470
You've got two plus side by side or two minuses side by side.

8
00:00:31.710 --> 00:00:37.210
All that means is increment something by one or decrement something by one.

9
00:00:37.230 --> 00:00:42.330
In this example I'm only going to be using the increment operator but everything will apply to the detriment.

10
00:00:42.330 --> 00:00:47.620
Operator OK so all it does is increment or decrement its operand by 1.

11
00:00:47.640 --> 00:00:52.860
So if you use it with an integer it increases the integer by want or decreases the integer by 1 depending

12
00:00:52.860 --> 00:00:54.150
on which one you're using.

13
00:00:54.150 --> 00:00:58.560
If you're using it with the floating point numbers same thing it will increase it by one or decrease

14
00:00:58.560 --> 00:01:03.960
it by one and we can also use it with pointers to move pointers along we haven't talked about pointers

15
00:01:03.960 --> 00:01:08.620
yet but we'll use this operator when we talk about pointers in a future section.

16
00:01:08.640 --> 00:01:10.440
There are two variants to this operator.

17
00:01:10.440 --> 00:01:14.270
There's a prefix notation and a postfix notation.

18
00:01:14.310 --> 00:01:20.640
All that means is that the operator is either before its operand or after its operand.

19
00:01:20.670 --> 00:01:27.990
You can see here on line number nine that the operand is numb and the operator is to the left of it.

20
00:01:27.990 --> 00:01:33.580
So that's prefix notation to postfix notation is when it appears to the right of the operand.

21
00:01:33.910 --> 00:01:40.290
OK I'll say this a few times don't over use this operator and never use it twice for the same variable

22
00:01:40.290 --> 00:01:44.220
in the same statement because the behavior is undefined You really don't know what you're going to get

23
00:01:44.620 --> 00:01:45.290
good.

24
00:01:45.330 --> 00:01:47.470
So now let's talk about the operator.

25
00:01:47.520 --> 00:01:53.670
Let me scroll down just a little bit and I've got some examples here and I'll walk through these examples

26
00:01:53.670 --> 00:01:57.640
really really carefully and slowly so you can understand what's going on.

27
00:01:57.870 --> 00:02:01.600
For all of the examples I'll be using these two variables right here.

28
00:02:01.620 --> 00:02:06.490
I'll be using a variable called counter in a variable called result.

29
00:02:06.600 --> 00:02:08.130
They're both integers.

30
00:02:08.130 --> 00:02:11.250
Counter will be initialized to 10 and result to zero.

31
00:02:11.430 --> 00:02:16.770
OK so real straightforward counter will be 10 result will be zero Moken to manipulate those variables

32
00:02:16.800 --> 00:02:19.670
and we'll see how this operator really works.

33
00:02:19.950 --> 00:02:22.030
So let's start right here.

34
00:02:22.080 --> 00:02:30.830
Uncomment example one I walk through this really slowly you can see what's happening I'm outputting

35
00:02:30.840 --> 00:02:31.990
counter.

36
00:02:32.250 --> 00:02:33.740
OK will counter is 10.

37
00:02:33.750 --> 00:02:39.960
So this you expect it to display A10 And that's exactly what happens in this case I'm saying Kountry

38
00:02:39.990 --> 00:02:42.360
equals counter plus 1 right.

39
00:02:42.390 --> 00:02:44.470
So what's counter 10.

40
00:02:44.770 --> 00:02:51.600
I'm adding 1 to it and then I'm putting it right back into counter some changing this 2011 and this

41
00:02:51.600 --> 00:02:54.470
output statement would display an 11.

42
00:02:54.930 --> 00:03:00.960
In this case I'm using counter plus plus that's the increment operator that's going to increment the

43
00:03:00.960 --> 00:03:03.590
variable counter by one.

44
00:03:03.750 --> 00:03:10.860
When you use it all alone like that if you've got an operand followed by a plus plus or a plus plus

45
00:03:10.980 --> 00:03:14.460
before the operand it means exactly the same thing.

46
00:03:14.460 --> 00:03:17.050
All it means is increment the operand by one.

47
00:03:17.360 --> 00:03:18.010
OK.

48
00:03:18.270 --> 00:03:22.320
It'll get a little more confusing in the next few examples but let's just get this one under our belt

49
00:03:22.320 --> 00:03:24.200
so we can understand what's going on.

50
00:03:24.210 --> 00:03:28.650
So what's happening here is we're incrementing that l value counter by 1.

51
00:03:28.770 --> 00:03:31.700
So we're going to counter incrementing it by 1.

52
00:03:31.710 --> 00:03:33.230
Now it's 12.

53
00:03:33.780 --> 00:03:40.800
And we're going to display counter here which is 12 the pre-increment works exactly the same as the

54
00:03:40.800 --> 00:03:41.580
post-increment.

55
00:03:41.580 --> 00:03:44.780
When that thing is all alone on the line just like I said over here.

56
00:03:44.940 --> 00:03:51.030
So in this case exactly the same thing will happen when you take the 12 and add 1 to it make it a 13

57
00:03:51.610 --> 00:03:55.420
counter and I'll be 13 and output 13.

58
00:03:55.420 --> 00:03:55.670
All right.

59
00:03:55.670 --> 00:04:01.130
So in this context where do you want to increment something you could say counter equals counter plus

60
00:04:01.130 --> 00:04:05.400
one or you could just say counter plus plus or you could say plus plus counter.

61
00:04:05.510 --> 00:04:07.380
All three of them mean the same thing.

62
00:04:07.580 --> 00:04:09.850
Later on we'll talk about a different operator.

63
00:04:10.070 --> 00:04:13.750
The plus equals operator that does does the same thing as well.

64
00:04:13.760 --> 00:04:17.060
So there's a bunch of different ways that you can achieve the same result.

65
00:04:17.330 --> 00:04:18.740
I'm going to clear this.

66
00:04:18.740 --> 00:04:21.860
And remember we've got 10 11 12 and 13 as the output.

67
00:04:21.860 --> 00:04:30.630
So I'll clean or clear this and let's run this example and you can see that counter is 10 11 12 and

68
00:04:30.630 --> 00:04:33.630
13 just like what we expected.

69
00:04:33.630 --> 00:04:37.650
All right so now let's look at a little bit more complicated example and I'm going to comment this out

70
00:04:38.220 --> 00:04:41.100
and I'll pass a comment.

71
00:04:41.100 --> 00:04:42.790
It's not the lead.

72
00:04:43.860 --> 00:04:47.010
And I will uncomment out example to

73
00:04:50.320 --> 00:04:50.700
OK.

74
00:04:50.710 --> 00:04:56.860
So let's go through this one again really carefully what we've got here is again I've reset counter

75
00:04:56.860 --> 00:04:58.600
to 10 end result to zero.

76
00:04:58.600 --> 00:05:03.360
All of these examples are going to start in the same place counter will be 10 result will be zero.

77
00:05:03.670 --> 00:05:08.060
So here I mean to say I want to output counter will counter is 10 right.

78
00:05:08.080 --> 00:05:11.300
So we expect this to display a 10.

79
00:05:11.330 --> 00:05:18.330
Now we're doing a pre-increment of counter and we're storing the result into that variable called result.

80
00:05:18.330 --> 00:05:22.090
So what's happening here is there's really a few things going on here.

81
00:05:22.140 --> 00:05:28.260
If you just see that plus plus and just taken out for a second and the result is something like this

82
00:05:28.320 --> 00:05:33.130
result equals counter.

83
00:05:33.340 --> 00:05:37.030
That's the real assignment statement that's going on here.

84
00:05:37.100 --> 00:05:44.080
The plus plus in front of countermands it's prefix notation which means that counter will be incremented

85
00:05:44.380 --> 00:05:45.860
before it's used.

86
00:05:46.060 --> 00:05:52.840
So in this case before happens here its use is right here but before it's used We're going to say counter

87
00:05:53.440 --> 00:05:54.190
equals.

88
00:05:54.250 --> 00:05:57.790
I'll just say counter plus one just to be really explicit.

89
00:05:57.970 --> 00:06:01.550
So this statement right here that's the effect of that statement.

90
00:06:01.630 --> 00:06:04.460
I want to increment counter before I use it.

91
00:06:04.510 --> 00:06:07.840
And then I want to use it by assigning it to result.

92
00:06:07.840 --> 00:06:10.510
All right so let's do those two steps and see what happens.

93
00:06:10.630 --> 00:06:17.780
Counter equals counterplot one we just made Kountry 11 and then we're going to assign counter to results

94
00:06:17.800 --> 00:06:18.900
we'll count these 11.

95
00:06:18.910 --> 00:06:26.650
So result when I'll be 11 now I want to display counter counts will be 11 and result will be 11.

96
00:06:26.650 --> 00:06:31.310
So this is what I expect is the output 10 11 and 11.

97
00:06:31.510 --> 00:06:38.210
Remember this is the use and this is the effect of that pre-increment.

98
00:06:38.220 --> 00:06:40.270
All right so let me clear this and run it again.

99
00:06:40.360 --> 00:06:42.150
We're expecting 10:11 in 11

100
00:06:45.050 --> 00:06:50.500
build and run and there it is 10 11 and 11 exactly what we expected.

101
00:06:51.540 --> 00:06:58.470
All right I'll comment out that piece and we'll do another example this time with a post-increment.

102
00:06:58.470 --> 00:07:01.980
And remember I'm using the increment but the decrement works exactly the same way.

103
00:07:01.980 --> 00:07:04.420
It just decreases the value by 1.

104
00:07:05.190 --> 00:07:05.470
All right.

105
00:07:05.480 --> 00:07:12.160
Uncomment this example and let's walk through this one again one more time I'm initialising count or

106
00:07:12.170 --> 00:07:15.290
I'm assigning tend to counter and 0 2 result.

107
00:07:15.540 --> 00:07:16.380
And I'm saying.

108
00:07:16.470 --> 00:07:19.680
Print out the counter while it's 10 we expect the 10 here.

109
00:07:19.680 --> 00:07:20.870
That's an easy one.

110
00:07:21.150 --> 00:07:23.100
But now we're doing a post-increment.

111
00:07:23.220 --> 00:07:27.080
Notice it's on the right side or it's following counter its operand.

112
00:07:27.090 --> 00:07:31.880
So this becomes result equals counter

113
00:07:34.700 --> 00:07:39.500
and the post-increment simply means that we're going to increment counter after we use it.

114
00:07:39.500 --> 00:07:40.960
Well we're using it here.

115
00:07:41.120 --> 00:07:42.100
So let's increment it.

116
00:07:42.140 --> 00:07:43.610
After this time.

117
00:07:43.760 --> 00:07:49.490
So again I'll be really explicit here and I'll say counter equals counter plus one.

118
00:07:49.530 --> 00:07:52.360
So that's the effect of that statement.

119
00:07:52.530 --> 00:07:55.490
So let's execute this statement result is counter.

120
00:07:55.650 --> 00:07:56.520
Counters 10.

121
00:07:56.520 --> 00:07:59.100
So let's put ten in here.

122
00:07:59.220 --> 00:08:02.110
Now we increment countered by 1.

123
00:08:02.160 --> 00:08:09.670
So that becomes 11 and now we display counter which is 11 and result which is 10.

124
00:08:09.680 --> 00:08:14.740
So in this case this is the output we expect 10 11 and then 10.

125
00:08:14.740 --> 00:08:16.170
All right let's give that a shot.

126
00:08:19.210 --> 00:08:26.350
And there we go 10 11 and 10 let's do a few more examples so I want to be sure that you really understand

127
00:08:26.350 --> 00:08:26.700
this.

128
00:08:26.710 --> 00:08:29.280
That's uncomment example for here.

129
00:08:30.420 --> 00:08:35.120
An example for just uses the expression that's a little bit more complicated not much but a little bit

130
00:08:35.130 --> 00:08:36.640
so you can see how this works.

131
00:08:36.900 --> 00:08:44.600
In this case one more time I've set those to 10 and 0 and I'm displaying counter counters 10.

132
00:08:44.610 --> 00:08:45.980
Again really easy.

133
00:08:46.010 --> 00:08:48.380
Now we've got this statement going on right here.

134
00:08:48.430 --> 00:08:51.500
Result equals plus plus counterplot 10.

135
00:08:51.510 --> 00:08:56.190
The best way to really look at these things is just get rid of that guy right now.

136
00:08:56.250 --> 00:09:03.330
So just say result equals counter plus 10.

137
00:09:03.480 --> 00:09:05.820
That's the statement.

138
00:09:05.930 --> 00:09:12.150
And now since the plus plus is a pre-increment it's on the left side of counter that means that we increment

139
00:09:12.150 --> 00:09:14.330
counter before we use it.

140
00:09:14.370 --> 00:09:15.380
We're using it here.

141
00:09:15.480 --> 00:09:19.620
So that means that we use we do this before we execute that statement.

142
00:09:19.620 --> 00:09:23.970
So again counter equals counter plus 1.

143
00:09:23.970 --> 00:09:24.420
All right.

144
00:09:24.450 --> 00:09:25.370
So let's do this.

145
00:09:25.390 --> 00:09:33.870
Counter's counterplot one this becomes 11 then we say result is counter plus 10 will counter is 11.

146
00:09:33.990 --> 00:09:39.190
So 11 plus 10 is going to give us a 21 which we're going to store in result.

147
00:09:39.300 --> 00:09:45.820
So result here we'll get a 21 got it perfect now we're displaying counter.

148
00:09:45.890 --> 00:09:49.170
It's 11 result is 21.

149
00:09:49.380 --> 00:09:53.310
That's what we expect to display 10 11 and 21.

150
00:09:53.310 --> 00:09:59.720
This may seem a little contrived and puzzle like and it may be but this kind of code is seen out there

151
00:09:59.730 --> 00:10:05.080
you really need to understand the effect of the pre-increment in the post-increment with these operators.

152
00:10:05.220 --> 00:10:07.340
So 10 11 and 21 is what we expect.

153
00:10:07.380 --> 00:10:08.370
Let's run this

154
00:10:11.810 --> 00:10:14.260
and 10 11 and 21 is what we get.

155
00:10:15.820 --> 00:10:16.290
OK.

156
00:10:16.330 --> 00:10:23.830
So let's come at this one out and you'll notice what this one the next one exemple five is exactly like

157
00:10:23.830 --> 00:10:30.970
example for except we've got a post-increment right here right there you can see it's the same idea

158
00:10:30.970 --> 00:10:34.200
except it's the plus plus is after the operand.

159
00:10:34.680 --> 00:10:35.130
OK.

160
00:10:35.140 --> 00:10:40.030
So again 10.0 we're starting out we're saying just play the counter what the counter is 10.

161
00:10:40.180 --> 00:10:41.510
That's pretty easy.

162
00:10:41.800 --> 00:10:45.830
Here's the statement let's just rewrite it without the increment.

163
00:10:45.880 --> 00:10:48.270
So we're going to say result equals again.

164
00:10:48.270 --> 00:10:51.030
Counter plus 10.

165
00:10:51.030 --> 00:10:54.040
I'm trying to write nice and big so hopefully everybody can see this OK.

166
00:10:54.760 --> 00:10:57.520
And we're doing the increment of counter after we use it.

167
00:10:57.520 --> 00:11:00.250
That means after we use it we're using it here.

168
00:11:00.250 --> 00:11:06.890
So this becomes counter is counter plus one.

169
00:11:06.890 --> 00:11:11.270
All right so let's execute these two statements we'll put some semi-colons there just to be complete.

170
00:11:11.330 --> 00:11:15.680
So result is counter plus 10 will what's counter-counter is 10.

171
00:11:15.710 --> 00:11:22.940
So that becomes a 20 and we're storing 20 and 2 result and then we're incrementing counter by 1.

172
00:11:22.960 --> 00:11:29.960
So counter becomes 11 OK the output says what's counter 11 words result 20.

173
00:11:30.370 --> 00:11:35.340
So in this case 10 11 and 20 is what we expect 10 11 and 20.

174
00:11:35.350 --> 00:11:36.240
Let's run this

175
00:11:39.970 --> 00:11:42.580
and 10 11 and 20 is exactly what we get

176
00:11:46.180 --> 00:11:46.620
OK.

177
00:11:46.690 --> 00:11:48.340
So hopefully that clears it up.

178
00:11:48.430 --> 00:11:52.870
And one of the examples if you know if you remember up at the top I mentioned just scroll up a little

179
00:11:52.870 --> 00:11:53.750
bit it says here.

180
00:11:53.830 --> 00:11:57.270
Never use it twice for the same variable in the same statement.

181
00:11:57.400 --> 00:11:59.060
That could be something like.

182
00:11:59.140 --> 00:12:08.120
Suppose you do see out and you've got something like I don't know let's just say we have an integer.

183
00:12:08.150 --> 00:12:14.540
I will say I plus plus and then go do something like plus plus I and you have something like that you

184
00:12:14.540 --> 00:12:19.790
really have no clue what's going to happen because you're incrementing two times in the same statement

185
00:12:19.850 --> 00:12:21.200
and that's not a good idea.

186
00:12:21.200 --> 00:12:28.490
Sometimes you'll see people do silly things like plus plus plus plus plus or something like that just

187
00:12:28.490 --> 00:12:31.240
because you can see puzzles.

188
00:12:31.250 --> 00:12:35.810
But that's that's a bad thing to do because you're you're using it twice on the same variable in the

189
00:12:35.810 --> 00:12:36.740
same statement.

190
00:12:37.010 --> 00:12:41.630
And that's that behavior is totally undefined so your guess is as good as mine as to what the result

191
00:12:41.630 --> 00:12:43.050
is going to be.

192
00:12:43.070 --> 00:12:48.260
OK so hopefully this gives you a little bit of a little bit of insight into this.

193
00:12:48.260 --> 00:12:53.960
Operator It's a simple operator when you just say I plus Pusser count plus plus or plus plus count.

194
00:12:53.960 --> 00:12:54.980
Really really simple.

195
00:12:55.070 --> 00:12:59.870
But when you start combining it with other operands and other expressions and operators it can get pretty

196
00:12:59.870 --> 00:13:03.310
complicated and that's why I say don't overuse this operator.

197
00:13:03.530 --> 00:13:08.840
It's really a great operator to use when we'd loop and we'll do that later on when we used pointers.

198
00:13:08.840 --> 00:13:10.950
But keep your eye on don't over use it.
