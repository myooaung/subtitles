WEBVTT
1
00:00:05.860 --> 00:00:13.050
In this video we'll talk about the steps needed to write output to text files using C++ streams and

2
00:00:13.060 --> 00:00:14.010
the following slides.

3
00:00:14.020 --> 00:00:19.210
Talk about the main classes and methods that we can use to write to files and then I go over a few examples

4
00:00:19.210 --> 00:00:26.830
in life code the two classes I've discussed for textfile output are extreme and O.F. stream.

5
00:00:27.060 --> 00:00:29.140
We must always include string.

6
00:00:29.490 --> 00:00:34.260
Then we declare a stream object of either extreme or O.F. stream type.

7
00:00:34.260 --> 00:00:39.100
We then connect a stream object we just create it to the file we want to write to and our file system

8
00:00:39.540 --> 00:00:43.940
once the file is connected and open we can write to it by default.

9
00:00:44.000 --> 00:00:50.170
C++ will create the file if it does not exist and if it does exist the contents of the file will be

10
00:00:50.170 --> 00:00:56.980
truncated or removed unless we state otherwise we can write the files in binary or text mode and we

11
00:00:56.980 --> 00:01:02.490
can use any of the stream manipulators that we've already learned about then when we're done processing

12
00:01:02.490 --> 00:01:04.440
the file we must close the file.

13
00:01:04.440 --> 00:01:09.450
This is very important for output files since it flushes any buffers that may not have been written

14
00:01:09.450 --> 00:01:10.660
out to the file yet.

15
00:01:11.040 --> 00:01:17.130
It's pretty easy in the next few slides will discuss the details of opening a file for output checking

16
00:01:17.130 --> 00:01:19.290
to make sure the file was opened correctly.

17
00:01:19.290 --> 00:01:25.070
Writing to the file in different ways and then closing the file.

18
00:01:25.140 --> 00:01:30.420
It's important to remember that by default output files will be created if they don't exist but we have

19
00:01:30.420 --> 00:01:35.160
to make sure that if we provide a path along with the file name when we open the file that that path

20
00:01:35.160 --> 00:01:36.540
must exist.

21
00:01:36.540 --> 00:01:39.630
Otherwise we'll get an error when creating the file.

22
00:01:39.840 --> 00:01:43.340
If the file already exists then it will be overwritten or truncated.

23
00:01:43.440 --> 00:01:48.450
Unless we specify that we want to append to the contents of the existing file.

24
00:01:48.450 --> 00:01:57.290
Finally we can write in text mode or in binary mode in this section we're only concentrating on textmode.

25
00:01:57.370 --> 00:02:03.910
So in this example we're creating an object named out file and we're using the stream class as its type.

26
00:02:03.910 --> 00:02:06.800
Notice I'm also initialized in the object as well.

27
00:02:06.910 --> 00:02:11.770
The initializer takes two arguments the first is the name of the file as we've already seen with input

28
00:02:11.770 --> 00:02:12.550
files.

29
00:02:12.550 --> 00:02:18.410
This can be very operating system and Id dependent so in code like we're going to use dot dot slash

30
00:02:18.410 --> 00:02:20.790
So it puts the file in our parent directory.

31
00:02:21.500 --> 00:02:26.840
The second parameter specifies the mode and properties of the file that's being opened in the first

32
00:02:26.840 --> 00:02:29.780
example we're using stood iOS out.

33
00:02:29.780 --> 00:02:32.540
This means to open the file in output mode.

34
00:02:32.540 --> 00:02:36.470
So we're able to write to it but not read from it by default.

35
00:02:36.470 --> 00:02:42.380
Files are opened in text mode in the second example we're opening the file and output mode and in binary

36
00:02:42.380 --> 00:02:48.740
mode this is necessary when we're writing non-text files that contain binary data.

37
00:02:48.770 --> 00:02:53.660
Notice the vertical bar pipe character between stood out and stood I always binary.

38
00:02:53.870 --> 00:02:55.800
This is the bitwise OR operator.

39
00:02:55.880 --> 00:03:01.520
And when we use it in context like this it sets both output and binary modes to true.

40
00:03:01.850 --> 00:03:06.500
At this point the file will be opened if it was found and truncate it or will be created.

41
00:03:07.360 --> 00:03:12.760
In this slide we use the extreme class the extreme class can actually open a file for reading and writing

42
00:03:12.760 --> 00:03:13.910
at the same time.

43
00:03:14.020 --> 00:03:14.960
We won't be doing that.

44
00:03:14.990 --> 00:03:20.560
But if you have a file that you need to read from and write to we can use the stream class to do that

45
00:03:24.850 --> 00:03:25.430
in this line.

46
00:03:25.480 --> 00:03:31.840
Be Using the O.F. stream class is the type of our file o f stream is used commonly for output files

47
00:03:31.890 --> 00:03:32.720
only.

48
00:03:33.010 --> 00:03:37.450
We can create an off stream object the same way we created an extreme object.

49
00:03:37.450 --> 00:03:43.530
However in the case of a O.F. stream object stood iOS out is optional since it's already the default.

50
00:03:43.840 --> 00:03:48.550
So the first two declarations of our file have the same effect.

51
00:03:48.610 --> 00:03:52.780
There's another way to open the file as commonly seen in code we saw it with input files so let's see

52
00:03:52.780 --> 00:03:53.490
those next

53
00:03:57.460 --> 00:04:03.820
when we open a file for output we have a few choices as to how we want to open the file butterfat the

54
00:04:03.820 --> 00:04:10.510
file is opened for truncation and we can explicitly specify that as in the first example if we want

55
00:04:10.510 --> 00:04:15.250
the output file open but we want all further output to append to the end of the file.

56
00:04:15.310 --> 00:04:20.230
Then we can use this stupid iOS app flag when we open the file.

57
00:04:20.230 --> 00:04:26.350
Finally we can use the Stood iOS 8 flag when we want to open a file that exists and we want to set the

58
00:04:26.350 --> 00:04:30.680
initial position of the next right to the end of the existing file.

59
00:04:30.880 --> 00:04:33.790
But we're free to move around using random access.

60
00:04:33.830 --> 00:04:40.610
We're going to use random access files and this course will focus solely on text based sequential files.

61
00:04:40.840 --> 00:04:45.670
Now just as we saw with input files we can first create the stream object and then open it.

62
00:04:45.670 --> 00:04:46.540
So let's see that

63
00:04:50.110 --> 00:04:55.900
in this example notice that we're creating out file as an o f stream object but we haven't provided

64
00:04:55.900 --> 00:04:59.240
any file name to associate with it.

65
00:04:59.290 --> 00:05:03.160
This is common use case since many times we don't know the file and when we have to get it from the

66
00:05:03.160 --> 00:05:09.550
user or from some other resource at runtime once we have the filename we can then use the open method

67
00:05:09.550 --> 00:05:15.700
on the stream object to open the file so we can say out file that open and give it the file name or

68
00:05:15.700 --> 00:05:20.500
out file open file name and any flags we need.

69
00:05:20.500 --> 00:05:24.120
Now we attempted to create the output stream and connected to a file.

70
00:05:24.190 --> 00:05:30.840
We have to be sure this was successful before we start writing to the file and we'll do that next.

71
00:05:30.970 --> 00:05:34.650
The process here is exactly as it was with input file streams.

72
00:05:34.780 --> 00:05:40.300
We have to be sure that the file was opened successfully so we can call the is open method on the file

73
00:05:40.300 --> 00:05:40.930
stream up to it.

74
00:05:40.930 --> 00:05:46.120
We created this returns a boolean indicating whether the file is open for processing.

75
00:05:46.450 --> 00:05:47.130
If we get back.

76
00:05:47.130 --> 00:05:52.770
True we're good to go if we get back fault's some error occurred if no error occur.

77
00:05:52.780 --> 00:05:55.870
Then we can go ahead and write to the file.

78
00:05:55.870 --> 00:06:02.380
Let's see another way that we can test to see if the file was open successfully.

79
00:06:02.640 --> 00:06:08.590
In this case we can simply test a stream object itself if the stream object was not instantiated then

80
00:06:08.640 --> 00:06:12.230
this would return false and we can decide what to do next.

81
00:06:12.240 --> 00:06:15.590
Otherwise it's good to go and we can proceed writing to the file

82
00:06:20.730 --> 00:06:23.590
once we finish writing to the file we have to close it.

83
00:06:23.610 --> 00:06:27.540
This is a simple method call to the close method without put files.

84
00:06:27.540 --> 00:06:33.540
This is very important since it flushes out any buffers that may not have been written out to file yet.

85
00:06:33.540 --> 00:06:37.520
OK so now we know how to open a file check to make sure that it's open and close it.

86
00:06:37.530 --> 00:06:42.390
Now let's write to it.

87
00:06:42.390 --> 00:06:46.770
There are many ways to write to a file and these examples we're going to use text files.

88
00:06:46.890 --> 00:06:51.340
The most common ways to use formatted output using the stream insertion operator.

89
00:06:51.510 --> 00:06:55.680
So in this example we have an integer a double and a string and three variables.

90
00:06:55.790 --> 00:07:02.160
If we want to write them out to our output file we can assume that outfought was created successfully.

91
00:07:02.160 --> 00:07:07.260
All we have to do is use the insertion operator as we've been using all along with C out except that

92
00:07:07.260 --> 00:07:09.630
we insert the values into our file.

93
00:07:09.720 --> 00:07:10.410
That's it.

94
00:07:10.530 --> 00:07:12.510
Very simple very powerful.

95
00:07:12.510 --> 00:07:17.280
Remember the stream manipulators we learned about in the beginning of the section we can use them all

96
00:07:17.280 --> 00:07:20.600
as well to format our output however we want.

97
00:07:20.670 --> 00:07:24.390
Also notice that end line flushes out any unwritten buffers

98
00:07:27.090 --> 00:07:33.390
so let's write a program that copies one txt file to another we'll assume the existing file is my file

99
00:07:33.390 --> 00:07:38.440
that text and we want to copy it to another file named copied text.

100
00:07:39.030 --> 00:07:44.140
First we create an extreme object in file and initialized it to our input file.

101
00:07:44.280 --> 00:07:49.260
Then we create an o f stream object out file and initialize it to our output file.

102
00:07:49.260 --> 00:07:53.380
In this case if the output file does not exist it will be created.

103
00:07:53.640 --> 00:07:57.090
If it does exist it will be truncated.

104
00:07:57.090 --> 00:08:02.190
We need to be sure that both files were opened successfully So we checked using two if statements and

105
00:08:02.190 --> 00:08:10.230
if there's any error we terminate in the next slide will complete the program and actually do the copying.

106
00:08:10.230 --> 00:08:14.970
So at this point our input file and output files are open and ready for processing.

107
00:08:15.090 --> 00:08:20.940
We can use a while loop with a getline to read the input file one line at a time into the stream variable

108
00:08:20.940 --> 00:08:21.920
line.

109
00:08:22.050 --> 00:08:27.420
If the read was successful the while loop condition will be true and we write the line to out file.

110
00:08:27.420 --> 00:08:28.920
Then we close both files.

111
00:08:28.920 --> 00:08:33.950
That's it really really easy to copy one file to another.

112
00:08:35.370 --> 00:08:41.010
OK so let's see one more example this time will use an formatted read and write and then we'll see some

113
00:08:41.010 --> 00:08:42.850
examples in life code.

114
00:08:43.170 --> 00:08:49.560
In this example again we're using infile as an extreme object an out file as an o a stream object.

115
00:08:49.740 --> 00:08:54.620
We go through the same steps necessary to open the files check to be sure they are open and so forth.

116
00:08:54.750 --> 00:09:00.330
And then in the next slide we'll do the actual copying but this time in an formatted manner one character

117
00:09:00.330 --> 00:09:02.930
at a time.

118
00:09:03.030 --> 00:09:08.940
So here in the while loop we read a character from infile using the get method and if it's successful

119
00:09:08.940 --> 00:09:12.720
we write that character to file using the put method.

120
00:09:12.930 --> 00:09:16.240
When we reach the end of file the loop terminates and we close the files.

121
00:09:16.320 --> 00:09:16.980
That's it.

122
00:09:17.130 --> 00:09:23.040
So there you go two different ways to copy text files one that's doing it one line at a time and another

123
00:09:23.040 --> 00:09:27.610
one that's doing it one character at a time using an formatted read and write.

124
00:09:27.930 --> 00:09:28.260
Great.

125
00:09:28.260 --> 00:09:33.070
So now let's head over to the idea and we'll see some examples of creating and writing to text files.
