1
00:00:05,360 --> 00:00:11,170
In this video will overload the movie assignment operator for my string class.

2
00:00:11,170 --> 00:00:16,420
Remember the copy assignment operator that we just overloaded in the previous video works with l value

3
00:00:16,420 --> 00:00:17,540
references.

4
00:00:17,620 --> 00:00:22,120
The move operator that will overloading this video works with our value references.

5
00:00:22,180 --> 00:00:25,360
Again think temporary unnamed objects.

6
00:00:25,740 --> 00:00:30,850
You don't have to provide a move assignment operator and if you don't C++ we'll use the copy constructor

7
00:00:30,850 --> 00:00:31,840
by default.

8
00:00:31,840 --> 00:00:36,710
But as we said when we talked about the move constructor move semantics can be much more efficient.

9
00:00:36,940 --> 00:00:41,650
And it's not a lot of extra work to provide a move constructor and a move assignment operator.

10
00:00:41,650 --> 00:00:46,630
First let's see when the move assignment operator will be used in the code snippet in this slide you

11
00:00:46,630 --> 00:00:51,970
can see that we create a string object as one that's basically just an empty string.

12
00:00:51,970 --> 00:00:55,910
Now we assigned to my string object with the string Frank to it.

13
00:00:55,930 --> 00:01:01,480
Notice that to my string object initialized to Frank must be constructed and once it's constructed it

14
00:01:01,480 --> 00:01:02,490
has no name.

15
00:01:02,500 --> 00:01:04,010
It's a temporary object.

16
00:01:04,090 --> 00:01:10,450
So it's an r value that means that when we assign it to S1 the move assignment operator will be called.

17
00:01:10,450 --> 00:01:18,380
Since we're providing an r value reference let's see how to do this syntactically Lolitas the move assignment

18
00:01:18,410 --> 00:01:23,570
operator declaration is very similar to copy assignment but there are a few differences.

19
00:01:23,570 --> 00:01:28,910
First we use the double ampersand operator in the parameter list to tell the compiler that the right

20
00:01:28,910 --> 00:01:31,170
side object is an r value.

21
00:01:31,490 --> 00:01:35,540
So the right side value will be a r value reference.

22
00:01:35,540 --> 00:01:40,640
Second the right hand side object reference can't be Konst Since will be modifying that object when

23
00:01:40,640 --> 00:01:42,140
we move the data.

24
00:01:42,260 --> 00:01:48,320
So the declaration for the my string class returns a string object by reference and expects an r value

25
00:01:48,320 --> 00:01:51,110
reference to a String object.

26
00:01:51,260 --> 00:01:55,760
You can see that in the two assignment statements on this slide the move assignment operator will be

27
00:01:55,760 --> 00:02:00,470
called because the right hand side of the assignment statements are our values.

28
00:02:00,530 --> 00:02:05,120
So let's look at the code for the move assignment operator for this example as you would expect the

29
00:02:05,120 --> 00:02:07,390
code is very similar to the copy assignment.

30
00:02:07,490 --> 00:02:11,070
With the exception that we're not deep copying from the right hand side object.

31
00:02:11,330 --> 00:02:15,830
Instead we're simply stealing the pointer and the nulling out the right hand side pointer.

32
00:02:16,130 --> 00:02:20,760
Again you can see from this code how much more efficient This is compared to copy assignment.

33
00:02:20,780 --> 00:02:24,140
Let's walk through this one step at a time.

34
00:02:24,170 --> 00:02:28,910
First we check for self assignment just before and if we're self assigning then we returned the left

35
00:02:28,910 --> 00:02:30,630
hand side object and we're done.

36
00:02:30,740 --> 00:02:36,680
Since there was nothing to do otherwise we again deallocate the storage pointed to by the left side

37
00:02:36,680 --> 00:02:37,270
object.

38
00:02:37,370 --> 00:02:41,290
Since we'll be overwriting this and we don't want a memory leak.

39
00:02:41,330 --> 00:02:43,240
Now the left hand side object is ready.

40
00:02:43,250 --> 00:02:46,740
So let's move the pointer over.

41
00:02:46,850 --> 00:02:51,590
First we steal the pointer from the right side object and assign it to the left side object.

42
00:02:51,590 --> 00:02:54,200
This is simply a copy of a pointer variable.

43
00:02:54,200 --> 00:02:56,430
We're not doing a deep copy here.

44
00:02:56,570 --> 00:03:01,190
Then we know that the pointer on the right side object this step is critical.

45
00:03:01,190 --> 00:03:03,440
Finally we returned the left side object.

46
00:03:03,440 --> 00:03:08,270
Now let's head over to the ID and compare the assignment operator to the copy assignment operator in

47
00:03:08,270 --> 00:03:09,480
life code.

48
00:03:10,070 --> 00:03:18,260
Ok so I'm back in the ID I'm in the section 14 workspace in the my dash move dash assignment project.

49
00:03:18,260 --> 00:03:24,620
Now what I'd like to do in this project is add a move assignment operator to are my string class.

50
00:03:24,680 --> 00:03:28,250
This can be really useful when we're assigning R-value references.

51
00:03:28,250 --> 00:03:30,550
So let me give you an example of how this would work.

52
00:03:30,710 --> 00:03:36,500
Here we've created an object A and it's using an overloaded constructor that's expecting that character

53
00:03:36,500 --> 00:03:38,960
pointer and we're just constructing a simple object.

54
00:03:38,990 --> 00:03:42,980
A That's got that string attribute pointing to hello on the heap.

55
00:03:42,980 --> 00:03:46,850
Now at this point we want to use a sign that remember already exists.

56
00:03:46,850 --> 00:03:49,510
Now this would be assignment not initialization.

57
00:03:49,550 --> 00:03:55,410
And what I want to do is construct another my midstream object off of the initialization string.

58
00:03:56,420 --> 00:03:59,540
At this point that temporary object has no name.

59
00:03:59,540 --> 00:04:01,320
So it's an R-value.

60
00:04:01,370 --> 00:04:07,610
If we don't provide any move semantics then it's going to use a copy constructor or a copy assignment

61
00:04:07,640 --> 00:04:09,580
operator to do what it needs to do.

62
00:04:09,620 --> 00:04:14,110
And if I run this right now remember I don't have any move constructors.

63
00:04:14,180 --> 00:04:17,740
Sorry I don't have any move assignment operator implemented.

64
00:04:17,810 --> 00:04:23,520
So if I run this at this point you'll see that it's using copy assignment using copy assignment.

65
00:04:23,540 --> 00:04:28,220
Now we really could use move assignment here since we got this R-value references and that's what we'll

66
00:04:28,220 --> 00:04:29,250
do.

67
00:04:29,330 --> 00:04:36,770
So let's go over conceptually what's going on here again at this point we've created that object and

68
00:04:36,770 --> 00:04:37,990
it's on the stack.

69
00:04:38,030 --> 00:04:41,050
It's got as TR attribute which is a pointer.

70
00:04:41,390 --> 00:04:47,450
And once this object has been constructed that pointers point it to the string hello which is on the

71
00:04:47,450 --> 00:04:48,210
heap.

72
00:04:48,440 --> 00:04:51,030
And again remember it's got that null terminator at the end.

73
00:04:51,110 --> 00:04:54,460
So this is the situation once we instantiate a.

74
00:04:54,650 --> 00:05:00,730
Now what we want to do is we want to assign to a the object that we created right here.

75
00:05:00,770 --> 00:05:05,540
So let's create that object that object creates created exactly the same way as we created run it using

76
00:05:05,540 --> 00:05:07,100
the overloaded constructor.

77
00:05:07,100 --> 00:05:08,590
But it doesn't have a name.

78
00:05:08,590 --> 00:05:10,790
It's an unnamed temporary object.

79
00:05:10,790 --> 00:05:13,630
So I'm just going to leave it right over here like this without a name.

80
00:05:13,760 --> 00:05:20,460
It's got an AS TR attribute and it's pointing to Ola which is on the heap.

81
00:05:20,600 --> 00:05:23,110
So that's the situation like right now.

82
00:05:23,210 --> 00:05:29,900
Now what we want to do is we want to assign this guy over to this guy but we really don't want to do

83
00:05:29,900 --> 00:05:35,470
the overhead of copying because we don't need to this temporary object will be destroyed soon.

84
00:05:35,510 --> 00:05:40,850
So let's just use move assignment so that we can steal that pointer and not have to make any copies

85
00:05:40,850 --> 00:05:42,620
of anything or copy anything over.

86
00:05:42,840 --> 00:05:43,150
OK.

87
00:05:43,160 --> 00:05:44,440
So let's do that.

88
00:05:44,750 --> 00:05:45,500
How does this work.

89
00:05:45,500 --> 00:05:46,310
What are the semantics.

90
00:05:46,310 --> 00:05:50,020
Well the first thing we need to do is deallocate the space here.

91
00:05:50,030 --> 00:05:50,330
Right.

92
00:05:50,330 --> 00:05:53,460
We need to call the lead for this guy because we're not going to use that.

93
00:05:53,720 --> 00:05:56,000
That's the whole point I want to assign to it.

94
00:05:56,030 --> 00:05:58,010
So we're going to get rid of that.

95
00:05:58,130 --> 00:06:00,990
And what that's going to do it's going to leave us in this situation.

96
00:06:02,080 --> 00:06:06,240
Where we're no longer pointing to that area and then what we want to do is we want to steal the pointer.

97
00:06:06,280 --> 00:06:14,460
So I want to make this point here point to all the and then once that's done what I want to do is not

98
00:06:14,460 --> 00:06:17,130
delete this I don't want to delete this information here right.

99
00:06:17,130 --> 00:06:20,210
I don't want to deallocate that because I'm using it now over here.

100
00:06:20,460 --> 00:06:22,910
All I want to do is just KNOW out that pointer.

101
00:06:22,920 --> 00:06:23,990
So that's what I'll do.

102
00:06:24,090 --> 00:06:26,850
I'll just know this pointer out.

103
00:06:27,270 --> 00:06:28,310
So this guy is now.

104
00:06:28,320 --> 00:06:29,140
No.

105
00:06:29,560 --> 00:06:36,450
You'll notice a is now with a stream attribute and is not pointing to the correct string in the heap

106
00:06:36,450 --> 00:06:37,720
which is what I want.

107
00:06:37,740 --> 00:06:43,590
This guy has been called out so when it gets destroyed by the destructor it won't delete anything out

108
00:06:43,590 --> 00:06:46,120
there on the heap because it's not pointing to anything on the heap.

109
00:06:46,290 --> 00:06:52,520
So once this gets destroyed we're right back to here which is exactly where we want to be.

110
00:06:52,890 --> 00:07:00,320
And the same is true with the statement right here is your will create a temporary object.

111
00:07:00,510 --> 00:07:04,020
There is the s t r and it's going to be pointing to your

112
00:07:07,190 --> 00:07:10,350
right now when we assign over we'll do the same thing.

113
00:07:10,400 --> 00:07:13,930
We want to deallocate that storage right here.

114
00:07:14,030 --> 00:07:16,490
So we want to get rid of this.

115
00:07:16,590 --> 00:07:18,330
We want to move the pointer right.

116
00:07:18,330 --> 00:07:25,130
We just want to seal this pointer let it point over here and then what we want to do is set this point

117
00:07:25,130 --> 00:07:31,420
to right here to no right so we just move the data and simply by just pointing to it from a different

118
00:07:31,420 --> 00:07:32,020
place.

119
00:07:33,270 --> 00:07:34,940
This will be destroyed.

120
00:07:35,580 --> 00:07:38,200
And that's the effect that we want.

121
00:07:38,700 --> 00:07:39,400
Okay perfect.

122
00:07:39,410 --> 00:07:44,160
So now let's write some code for this and you'll see it's actually a little bit simpler even than the

123
00:07:45,000 --> 00:07:45,960
copy assignment.

124
00:07:45,960 --> 00:07:46,690
First things first.

125
00:07:46,710 --> 00:07:52,650
Let's go to the header file and you'll notice that I've already implemented a move constructor.

126
00:07:52,830 --> 00:07:57,900
I just wanted to be complete there so the move constructor has been implemented and it's about as dead

127
00:07:57,900 --> 00:07:58,920
simple as you can get.

128
00:07:58,920 --> 00:08:01,790
I mean what the move constructor looks like.

129
00:08:01,800 --> 00:08:03,610
It's right here.

130
00:08:03,600 --> 00:08:05,070
Remember this is a constructor.

131
00:08:05,070 --> 00:08:11,550
Now this is not an assignment so this is actually creating a new object based on an r value reference.

132
00:08:11,550 --> 00:08:15,770
So you can see right here on line 35.

133
00:08:15,840 --> 00:08:17,700
I'm stealing the pointer right.

134
00:08:17,760 --> 00:08:24,920
I'm taking the source object's pointer and moving it right twist here and then I'm nullifying the source

135
00:08:24,920 --> 00:08:26,240
subject point.

136
00:08:26,700 --> 00:08:27,470
So that's it.

137
00:08:27,480 --> 00:08:31,530
We just store the pointer that other object will eventually be destroyed.

138
00:08:31,800 --> 00:08:34,770
Let's write the assignment operator.

139
00:08:34,770 --> 00:08:40,080
So let's go back to our header file and we'll do it right here and we'll do something like my string

140
00:08:40,140 --> 00:08:42,220
reference because it's the same idea here.

141
00:08:42,330 --> 00:08:44,830
We're overloading operator equal.

142
00:08:45,180 --> 00:08:49,140
We don't want to be Konst here because we do need to modify that right hand sides.

143
00:08:49,140 --> 00:08:51,250
String attribute to knock it out.

144
00:08:51,390 --> 00:08:57,300
So it's simply going to be my string to ampersands here because we wanted our value reference right

145
00:08:57,300 --> 00:08:58,850
hand side.

146
00:08:59,040 --> 00:08:59,980
That's it.

147
00:09:00,150 --> 00:09:03,090
And we'll call this guy move the sun.

148
00:09:03,120 --> 00:09:03,410
All right.

149
00:09:03,420 --> 00:09:10,620
So now let's go implement that methods will go to my string BPP file and right underneath the copy assignment

150
00:09:10,620 --> 00:09:11,100
right here.

151
00:09:11,100 --> 00:09:14,740
I'll just put it right here on the move assignment and you can see I've already set some breakpoints

152
00:09:14,790 --> 00:09:16,250
just to save a little time.

153
00:09:16,290 --> 00:09:17,880
So let's implement this here.

154
00:09:17,880 --> 00:09:18,680
So what do we do.

155
00:09:18,840 --> 00:09:25,860
We're going to return to my string reference and it's part of the my string class we're overloading

156
00:09:25,920 --> 00:09:28,080
operator equal.

157
00:09:28,290 --> 00:09:35,100
And we're expecting my string r value reference.

158
00:09:35,890 --> 00:09:36,930
OK that's it.

159
00:09:36,930 --> 00:09:44,910
So first thing we do is as usual let's just put a string out Ansted at c out and we'll just say something

160
00:09:44,910 --> 00:09:48,310
like using move assignment.

161
00:09:49,350 --> 00:09:55,860
That way we know that we're actually in here and we'll put an end line here.

162
00:09:55,860 --> 00:09:56,220
Perfect.

163
00:09:56,220 --> 00:09:58,280
Now let's check for self assignment.

164
00:09:58,280 --> 00:10:00,200
I'll scroll up just a little bit here.

165
00:10:00,240 --> 00:10:01,450
We'll check for self assignment.

166
00:10:01,460 --> 00:10:09,120
So we're going to say if the current object right the address of this object is equal to the address

167
00:10:09,180 --> 00:10:14,460
of the right hand side object if that's the case I've got self assignment.

168
00:10:14,490 --> 00:10:20,970
So all I want to do is just return this in the case that we're not doing self assignment.

169
00:10:20,970 --> 00:10:23,210
Remember the conceptual drawing I just drew.

170
00:10:23,250 --> 00:10:24,440
So what do we want to do.

171
00:10:24,480 --> 00:10:34,790
We want to delete see you from the current object we want to steal the pointer.

172
00:10:35,500 --> 00:10:43,670
So we want to assign the right hand sides pointer to the left hand side pointer and we want to nullify

173
00:10:43,670 --> 00:10:44,950
the right side pointer.

174
00:10:44,960 --> 00:10:49,220
This was really really important if you forget to do this step then there's going to be problems because

175
00:10:49,220 --> 00:10:54,320
what's going to happen is when that temporary object gets destroyed it's going to take this data with

176
00:10:54,320 --> 00:10:54,640
it.

177
00:10:54,650 --> 00:10:56,820
So you want to be sure that this is pointing to nowhere.

178
00:10:56,930 --> 00:11:05,280
So right hand side string equals null pointer that's it.

179
00:11:05,320 --> 00:11:08,800
We return this.

180
00:11:08,890 --> 00:11:12,760
Now we'll step through this in a second but let's run it first.

181
00:11:13,390 --> 00:11:17,880
And now you can see the difference in the run using move assignment using assignment.

182
00:11:17,890 --> 00:11:19,180
That's exactly what we want.

183
00:11:19,210 --> 00:11:22,270
And then we've got two destructors being called for no pointers.

184
00:11:22,510 --> 00:11:22,770
Right.

185
00:11:22,780 --> 00:11:25,990
Which is again exactly what we want.

186
00:11:25,990 --> 00:11:28,090
All right so let me put a breakpoint here.

187
00:11:29,600 --> 00:11:36,290
And let's walk through this using the debugger some and go back to my main here and I'll start the debugger

188
00:11:36,290 --> 00:11:37,200
over here.

189
00:11:37,220 --> 00:11:37,580
All right.

190
00:11:37,580 --> 00:11:42,860
So this is where we're at right now we're about to call the overloaded constructor to create the A That's

191
00:11:42,860 --> 00:11:43,850
pretty standard stuff.

192
00:11:43,850 --> 00:11:49,400
Now here we are we don't have a null pointer so we're simply going to allocate space for the string

193
00:11:49,400 --> 00:11:51,320
and copy it over and we're done.

194
00:11:51,320 --> 00:11:57,770
So now a is hello you can see the address of that string attribute right here.

195
00:11:57,770 --> 00:12:04,880
Now what we need to do here is first construct that temporary object and then call the overloaded assignment

196
00:12:04,910 --> 00:12:07,790
operator right with an r value reference.

197
00:12:07,790 --> 00:12:10,630
That's exactly what this is this is an unnamed object.

198
00:12:10,820 --> 00:12:12,230
So let's walk through this.

199
00:12:12,230 --> 00:12:16,760
So first we're going to create the object using the overloaded constructor right here.

200
00:12:17,030 --> 00:12:18,940
So we'll walk through that.

201
00:12:19,430 --> 00:12:20,550
Allocate the space.

202
00:12:20,570 --> 00:12:22,030
Copy it over.

203
00:12:22,160 --> 00:12:23,100
It's done.

204
00:12:23,150 --> 00:12:26,810
Now notice that the move assignment operator gets called right away.

205
00:12:26,840 --> 00:12:31,580
That's exactly what you expect because we have an r value reference here which is a temporary unnamed

206
00:12:31,620 --> 00:12:32,330
object.

207
00:12:32,480 --> 00:12:35,870
So we display using move assignment.

208
00:12:35,870 --> 00:12:38,910
We check for self assignment which we don't have.

209
00:12:38,960 --> 00:12:41,000
We delete this as TR.

210
00:12:41,030 --> 00:12:41,410
Right.

211
00:12:41,410 --> 00:12:43,510
Remember this is this object right here.

212
00:12:43,730 --> 00:12:49,840
So we're going to delete that and deallocate it we're going to steal the pointer and then we're going

213
00:12:49,840 --> 00:12:51,770
to nullify that other point too.

214
00:12:52,030 --> 00:12:55,560
Now the temporary OBD-II is being destructed right here.

215
00:12:56,020 --> 00:13:00,100
And we do have a null pointer now because we know that you can see it zero right there.

216
00:13:00,100 --> 00:13:08,230
So this will print out calling destructor for a null pointer will delete the area and that's it.

217
00:13:08,230 --> 00:13:13,530
Now if we refresh or see that a now is all.

218
00:13:13,780 --> 00:13:19,900
So we did exactly what we said we were going to do here it's the same idea first we're going to construct

219
00:13:20,110 --> 00:13:23,130
a temporary object based on that string.

220
00:13:23,140 --> 00:13:24,750
So let's do that.

221
00:13:24,880 --> 00:13:30,290
Here we are we're in the overloaded constructor and that's going to create a temporary object with Bonjour

222
00:13:30,350 --> 00:13:31,830
in it.

223
00:13:32,200 --> 00:13:36,700
Then we call the move assignment again because we have an r value reference.

224
00:13:36,850 --> 00:13:41,020
And what we're going to do here is we're just going to steal that Bullen's your pointer first.

225
00:13:41,020 --> 00:13:42,580
We delete what we're pointing to right.

226
00:13:42,580 --> 00:13:46,410
So all eyes gone then we steal the bones your pointer.

227
00:13:46,420 --> 00:13:49,570
We set that temporary objects pointer to NULL.

228
00:13:49,570 --> 00:13:53,680
We return the object and then we're going to destroy that temporary object again the one that we just

229
00:13:53,680 --> 00:13:57,250
stole the pointer from We'll delete it.

230
00:13:57,420 --> 00:14:08,840
We're back and you can see now that A is on your will unwind now and it will destroy a.

231
00:14:08,850 --> 00:14:09,540
There you go.

232
00:14:09,590 --> 00:14:15,330
And you can see over here that we've got to move assignments three destructors to destroy and just null

233
00:14:15,330 --> 00:14:21,310
pointers temp objects and then the final one destroying the actual object that we created.

234
00:14:21,330 --> 00:14:21,890
That's it.

235
00:14:21,900 --> 00:14:26,300
So you can see it's pretty straightforward and we'll see that in the main driver here.

236
00:14:26,430 --> 00:14:30,630
I've got a lot more code and if you recall that code running from before.

237
00:14:30,630 --> 00:14:33,570
So I'll run this code again in the main Now that I've commented it.

238
00:14:33,690 --> 00:14:38,360
And if we remember when we ran it before it was use the copy constructor and copy assignment.

239
00:14:38,490 --> 00:14:42,840
Well in this case when we run it we're going to see a lot more moves semantics going on so I scroll

240
00:14:42,840 --> 00:14:48,300
up here and you can see that we've got move assignment move assignment move assignments move assignments

241
00:14:48,810 --> 00:14:50,160
move constructors.

242
00:14:50,160 --> 00:14:52,640
So this version is much much more efficient.

243
00:14:52,650 --> 00:14:58,020
And if you again walk through it check out the statements use the debugger if you like and really understand

244
00:14:58,020 --> 00:14:58,650
what's going on.

245
00:14:58,650 --> 00:15:00,570
But it's very very straightforward.

246
00:15:00,570 --> 00:15:06,300
In the case of our values we really want those move assignments and move constructors just to make our

247
00:15:06,300 --> 00:15:07,440
code so much more efficient.
