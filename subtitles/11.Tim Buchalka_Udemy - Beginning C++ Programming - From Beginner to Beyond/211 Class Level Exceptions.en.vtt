WEBVTT
1
00:00:05.340 --> 00:00:12.760
In this video I'd like to briefly talk about exceptions in the context of a post-process class exceptions

2
00:00:12.760 --> 00:00:17.270
can be thrown from class methods constructors and destructors.

3
00:00:17.470 --> 00:00:19.820
Let's talk about the last one first.

4
00:00:20.110 --> 00:00:22.930
Do not throw exceptions from a destructor.

5
00:00:22.990 --> 00:00:29.500
The destructor is marked in C++ as no except by default which means that it does not throw exceptions

6
00:00:30.310 --> 00:00:35.590
if a destructor is called as a result of an exception being thrown elsewhere and then the destructor

7
00:00:35.590 --> 00:00:36.940
throws an exception.

8
00:00:37.090 --> 00:00:40.810
Then there's a problem since the original catch block will never be reached.

9
00:00:40.810 --> 00:00:43.330
This is a very bad situation.

10
00:00:43.420 --> 00:00:47.970
The only time a destructor might throw an exception is if it handles it itself.

11
00:00:47.980 --> 00:00:50.200
And that's a very unlikely use case.

12
00:00:50.200 --> 00:00:55.760
So remember best practice is to not throw exceptions from a destructor.

13
00:00:55.930 --> 00:00:58.720
OK so now let's talk about methods and constructors.

14
00:00:58.720 --> 00:01:04.460
In the case of class methods exception handling here works just as we've seen with regular functions.

15
00:01:04.810 --> 00:01:10.690
What about constructors constructors could certainly fail and since constructors don't return values

16
00:01:10.690 --> 00:01:13.350
we can't return a boolean or an error code.

17
00:01:13.600 --> 00:01:16.030
Constructors may fail for many reasons.

18
00:01:16.030 --> 00:01:20.630
For example suppose you're allocating memory dynamically and you're unable to allocate it.

19
00:01:20.770 --> 00:01:24.330
Or if you open a file in the constructor but the file doesn't exist.

20
00:01:24.610 --> 00:01:28.770
In cases such as these the constructor can throw an exception.

21
00:01:28.840 --> 00:01:31.200
The rest works just as you would expect.

22
00:01:31.210 --> 00:01:35.920
Let's see an example of throwing an exception from a constructor.

23
00:01:36.160 --> 00:01:40.890
In this slide we're using the account classes that we've been using throughout the course.

24
00:01:40.900 --> 00:01:44.130
Suppose we cannot have accounts with negative balances.

25
00:01:44.340 --> 00:01:49.240
So in the account class constructor we can check the balance in if it's less than zero.

26
00:01:49.240 --> 00:01:52.450
Throw an illegal balance exception object.

27
00:01:52.780 --> 00:01:57.580
In this case we're assuming that we've created our own illegal balas exception class.

28
00:01:57.580 --> 00:01:58.590
That's it.

29
00:01:58.600 --> 00:02:01.380
Now let's see how we can catch this exception if it occurs.

30
00:02:02.470 --> 00:02:07.360
So here we have a try block and in that try block we're declaring a unique pointer to an account object

31
00:02:07.870 --> 00:02:13.810
and using make unique to create a checking account object for MO with a negative balance on the heap.

32
00:02:14.170 --> 00:02:19.510
Since the account balance is negative the account constructor is going to throw an illegal balance exception

33
00:02:19.840 --> 00:02:25.770
which we're ketching in our catch block we display an error in our program continues.

34
00:02:25.790 --> 00:02:30.830
Now there's a lot more to class level exceptions but for the purpose of this course this is the basic

35
00:02:30.830 --> 00:02:35.270
information necessary to use and understand class level exceptions.

36
00:02:35.450 --> 00:02:41.480
In the next video we'll look at the exception class hierarchy that the C++ standard library uses internally

37
00:02:42.020 --> 00:02:46.100
and we'll see how we can tap into that hierarchy for our own exception classes.

38
00:02:46.190 --> 00:02:52.360
But first let's head over to the IDC and let's throw a class level exception from our account class.

39
00:02:52.380 --> 00:02:53.010
Welcome back.

40
00:02:53.010 --> 00:02:59.040
I mean the ID and I mean the still in the Section 18 workspace and I'm in the constructor exception

41
00:02:59.070 --> 00:02:59.940
project.

42
00:03:00.150 --> 00:03:04.770
And what I've done here is I've copied all those files that we created for the account class that we've

43
00:03:04.770 --> 00:03:06.190
been using throughout the term.

44
00:03:06.240 --> 00:03:11.190
So I've got accounts and checking accounts and portables and basically everything we've done this is

45
00:03:11.190 --> 00:03:12.470
the latest version of it.

46
00:03:12.660 --> 00:03:18.330
But what I've done is I've added a new header file right here called illegal balance exception and I

47
00:03:18.330 --> 00:03:22.140
don't need the CBP file because everything can be done in this header file.

48
00:03:22.140 --> 00:03:23.430
Notice what I've done here.

49
00:03:23.430 --> 00:03:28.680
I've created a class called illegal balance exception which represents the condition where we've got

50
00:03:28.680 --> 00:03:31.290
an illegal balance in this case a negative value.

51
00:03:31.290 --> 00:03:33.640
This is the exception object we're going to throw.

52
00:03:33.780 --> 00:03:38.700
And then we've got a constructor and destructor and I've tagged them both as default that we were using

53
00:03:38.700 --> 00:03:42.520
just regular default constructor and regular default destructor.

54
00:03:42.810 --> 00:03:43.860
That's it.

55
00:03:43.860 --> 00:03:47.510
Now what we want to do is go to our accounts file.

56
00:03:47.880 --> 00:03:53.550
And what we're going to do is in the account constructor right here we're going to check to see if the

57
00:03:53.550 --> 00:03:59.640
balance is less than zero if the balance is negative then we're going to throw in a legal balance exception.

58
00:03:59.640 --> 00:04:02.040
That's that class that we just created.

59
00:04:02.040 --> 00:04:04.580
This will throw an object of that class.

60
00:04:04.770 --> 00:04:05.400
OK.

61
00:04:05.460 --> 00:04:10.310
Now I mentioned that there was a lot more to a constructor level exception handling.

62
00:04:10.500 --> 00:04:13.710
One of the things that you can do with instructors is you can try.

63
00:04:13.710 --> 00:04:16.160
Remember we have an initializer list here.

64
00:04:16.650 --> 00:04:19.770
We could try to execute some of that.

65
00:04:19.800 --> 00:04:22.980
So it's possible to put trial statements in there as well.

66
00:04:22.980 --> 00:04:27.060
In this case we didn't do that but you might want to do that in subclasses.

67
00:04:27.090 --> 00:04:29.190
Again that's a little bit beyond the scope of the class.

68
00:04:29.190 --> 00:04:32.980
But I just wanted to bring it to your attention in case you see that up there.

69
00:04:33.030 --> 00:04:34.000
So this is it here.

70
00:04:34.020 --> 00:04:35.060
Right we've got an account.

71
00:04:35.070 --> 00:04:37.770
If the balance is negative we're going to throw an exception.

72
00:04:37.770 --> 00:04:41.500
So now let's look at our main and let's test this out.

73
00:04:41.580 --> 00:04:42.840
So here's my man.

74
00:04:42.930 --> 00:04:45.990
And notice what I've done in the main I've got a try block right here.

75
00:04:46.010 --> 00:04:47.910
Let me grab my pen so I can mark this up.

76
00:04:47.910 --> 00:04:49.330
Make it a little clearer.

77
00:04:49.380 --> 00:04:51.520
I've got to try block right here.

78
00:04:51.680 --> 00:04:59.220
And in the try block I've got a unique pointer to the base class I call it Mo's account and I'm using

79
00:04:59.250 --> 00:05:05.640
stood make unique to create a checking account on the heap that checking account contains the name Mo

80
00:05:06.000 --> 00:05:08.830
and notice that negative balance right there.

81
00:05:09.030 --> 00:05:11.060
That's going to throw an exception.

82
00:05:11.070 --> 00:05:16.110
We're using this in the try block because that constructor for the account class in this case remember

83
00:05:16.110 --> 00:05:19.800
it's checking it out but it's calling the base class constructor as well.

84
00:05:19.860 --> 00:05:22.560
And that's the guy that's going to throw the exception.

85
00:05:22.560 --> 00:05:25.650
So in this case this will throw an exception.

86
00:05:25.640 --> 00:05:32.040
It'll it'll throw a illegal balance exception which I'm catching here by Konst ref.

87
00:05:32.290 --> 00:05:36.920
If it doesn't throw an exception then we simply dereference Mo's account and print it out to stand it

88
00:05:36.930 --> 00:05:37.910
out.

89
00:05:38.140 --> 00:05:41.670
If it does throw an exception we're going to catch it right here.

90
00:05:42.900 --> 00:05:44.010
And we're going to deal with it.

91
00:05:44.010 --> 00:05:44.820
How do we deal with it.

92
00:05:44.820 --> 00:05:47.350
We're just going to say couldn't create account negative balance.

93
00:05:47.370 --> 00:05:48.060
That's it.

94
00:05:48.270 --> 00:05:51.750
But the point is our program completes successfully this will execute.

95
00:05:51.750 --> 00:05:52.940
It doesn't crash.

96
00:05:53.160 --> 00:05:55.460
OK now let's do this two different ways.

97
00:05:55.650 --> 00:06:01.060
Let's run this test case and first let's create it with a positive balance a $10 balance.

98
00:06:01.080 --> 00:06:09.640
Let me build and run and the output says checking account mode $10 program completed successfully.

99
00:06:09.760 --> 00:06:10.920
Just what we'd expect.

100
00:06:11.110 --> 00:06:18.250
But now let's create the negative balance and we'll build and run again and notice the output now says

101
00:06:18.580 --> 00:06:23.700
couldn't create account negative balance and again program completed successfully.

102
00:06:23.710 --> 00:06:24.650
That's pretty cool.

103
00:06:24.850 --> 00:06:26.470
So that works really really well.

104
00:06:26.890 --> 00:06:30.580
And that pretty much does it for the section challenge in this section.

105
00:06:30.580 --> 00:06:32.440
It's actually a pretty easy challenge.

106
00:06:32.710 --> 00:06:34.800
Although some of the things will be a little bit advance.

107
00:06:34.800 --> 00:06:36.620
The challenge is pretty easy to do.

108
00:06:36.880 --> 00:06:42.310
What I'd like you to do for that challenge and I'll talk about it and the challenge video is to provide

109
00:06:42.310 --> 00:06:46.350
an exception when we've got insufficient funds.

110
00:06:46.390 --> 00:06:50.920
Remember before we created right here this withdraw that was true false.

111
00:06:51.370 --> 00:06:55.070
Well rather than do True False let's throw an exception and catch it.

112
00:06:55.270 --> 00:06:57.670
But we'll get to that in the next video.

113
00:06:57.670 --> 00:07:01.750
We'll talk about the C plus plus standard exception class hierarchy.
