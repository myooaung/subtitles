1
00:00:05,790 --> 00:00:12,930
In this video we'll talk about string stream's strings dreams allow us to use in-memory String objects

2
00:00:12,990 --> 00:00:14,490
as streams.

3
00:00:14,610 --> 00:00:19,590
That means that we can read and write data strings in the same way that we can read write data to any

4
00:00:19,590 --> 00:00:20,950
stream.

5
00:00:21,000 --> 00:00:25,640
This is a very powerful concept and it's very useful for data validation.

6
00:00:25,650 --> 00:00:29,720
It's also very easy to use since we already know how to use streams.

7
00:00:32,920 --> 00:00:38,650
There are three classes that we can use when using string streams the string stream class allows us

8
00:00:38,650 --> 00:00:44,980
to read and write from string streams the string stream class allows us to read from string streams

9
00:00:45,280 --> 00:00:51,280
and the O stream string class allows us to write to string streams for all of these we must include

10
00:00:51,280 --> 00:00:53,320
the stream header file.

11
00:00:53,320 --> 00:00:56,020
The rest is very much like using any other stream.

12
00:00:56,020 --> 00:01:00,400
First we declare a string stream object of one of the three types that I mentioned.

13
00:01:00,430 --> 00:01:01,930
Then we connected to a string.

14
00:01:01,990 --> 00:01:02,440
That's it.

15
00:01:02,440 --> 00:01:07,910
Now we can read or write to that string stream using formatted IO and stream manipulators if we wish.

16
00:01:09,510 --> 00:01:13,200
Let's see an example of how we could read from a string stream.

17
00:01:13,200 --> 00:01:18,450
Suppose we have three variables declared an integer named Naam a double named total and a string called

18
00:01:18,450 --> 00:01:19,530
name.

19
00:01:19,530 --> 00:01:24,960
Now suppose that we have a string info with the string Moe one hundred one two three four point five

20
00:01:24,960 --> 00:01:26,180
is its contents.

21
00:01:27,100 --> 00:01:30,840
Remember we did this example in this section and that same data was in a file.

22
00:01:30,910 --> 00:01:33,460
Well now it's in memory in a string.

23
00:01:33,700 --> 00:01:40,520
We can create an ice stream stream object we'll call it ISIS and connect it to the info string.

24
00:01:40,780 --> 00:01:47,420
So now we can read from the string stream now we can use the stream extraction operator to extract those

25
00:01:47,420 --> 00:01:49,000
data from the string.

26
00:01:49,010 --> 00:01:50,330
That's pretty cool.

27
00:01:50,390 --> 00:01:57,510
I'm sure you could see lots of applications for this especially in Data Validation So now let's see

28
00:01:57,510 --> 00:02:00,110
how we can write data to a stream stream.

29
00:02:00,270 --> 00:02:04,880
In this case we've initialized our variables name total and name to 100.

30
00:02:04,980 --> 00:02:08,580
One two three four point five and Mo respectively.

31
00:02:08,580 --> 00:02:14,560
We can create an o string stream object named o ss and we can write to the stream object.

32
00:02:14,730 --> 00:02:18,920
In this case I'm inserting the three values onto the string stream.

33
00:02:18,990 --> 00:02:24,190
Remember we can use any stream manipulators to format that data that we're putting on the stream.

34
00:02:24,210 --> 00:02:27,260
So now how do we display the string that we just formatted.

35
00:02:27,270 --> 00:02:33,900
Notice I didn't notice that in this case we didn't connect the stream stream to any string object we

36
00:02:33,900 --> 00:02:39,540
could have just like we did with the string stream example in the previous slide the string stream has

37
00:02:39,540 --> 00:02:43,800
a string buffer that it uses internally and we can use that.

38
00:02:43,800 --> 00:02:50,370
So if we want to display that string Oh we have to do is call the string streams dot as our method.

39
00:02:50,480 --> 00:02:54,710
In this last example we'll do some basic data validation.

40
00:02:54,730 --> 00:02:58,480
The idea is that I want to ask the user to enter an integer.

41
00:02:58,480 --> 00:03:03,340
The idea is that I want to ask the user to enter an integer and I want to be sure that they do enter

42
00:03:03,340 --> 00:03:06,550
an integer not some invalid data like a name.

43
00:03:06,610 --> 00:03:12,760
So we have a string named input and we read the user's input into that string.

44
00:03:12,790 --> 00:03:14,440
We don't read it into an integer.

45
00:03:14,440 --> 00:03:16,940
Again we read it into a string.

46
00:03:17,080 --> 00:03:22,540
Then what we want to do is to try to convert that string to an integer if possible.

47
00:03:22,560 --> 00:03:25,340
There are many ways to accomplish this in C++.

48
00:03:25,350 --> 00:03:26,790
Some are better than others.

49
00:03:26,820 --> 00:03:29,910
Let's do it with a string stream it's pretty easy.

50
00:03:29,910 --> 00:03:35,700
What we can do is we can create a string stream object we'll call it s s and we can connect it to the

51
00:03:35,730 --> 00:03:38,530
input string that the user just entered.

52
00:03:39,270 --> 00:03:44,580
Then we can try to extract an integer from SS and store it in value.

53
00:03:44,580 --> 00:03:49,610
We can do that using the stream extraction operator if the extraction was successful.

54
00:03:49,620 --> 00:03:52,540
That means that we have a valid integer stored in value.

55
00:03:52,800 --> 00:03:58,050
If the extraction was not successful we know that the user didn't enter an integer and we can ask them

56
00:03:58,050 --> 00:04:02,460
to enter the number again or we can do whatever else makes sense in our program.

57
00:04:02,460 --> 00:04:07,830
So now let's head over to the IDC and we'll see these examples and we'll do a more complete data validation

58
00:04:07,830 --> 00:04:08,870
example as well.

59
00:04:09,780 --> 00:04:16,080
Ok so many the IDM in the section 19 workspace in the string Stream project what we'll do here is we'll

60
00:04:16,080 --> 00:04:20,460
do a few examples using strings James will read from them or right from them and then I'll show you

61
00:04:20,460 --> 00:04:24,940
a little bit better data validation example then the one in the slide a little more complete.

62
00:04:25,140 --> 00:04:29,280
So what we're doing here is we've got some includes And we were including limits and I'll show you what

63
00:04:29,280 --> 00:04:30,960
that's about later.

64
00:04:30,960 --> 00:04:36,710
But right now we have IO stream I manip are extreme for our string streams and the string class.

65
00:04:36,800 --> 00:04:37,280
OK.

66
00:04:37,470 --> 00:04:38,840
So here's what we've got.

67
00:04:38,840 --> 00:04:45,120
We've got these three variables just like we saw on the slides numbers and in totals a double and name

68
00:04:45,120 --> 00:04:51,750
as a string and we've created this string right here called info that just has those three pieces of

69
00:04:51,840 --> 00:04:52,800
data in there.

70
00:04:52,800 --> 00:04:58,050
It's all a string right now but what we want to do is we want to be able to read that or extract that

71
00:04:58,050 --> 00:05:04,680
information from the string as a string an integer and a double and store them into these variables

72
00:05:04,680 --> 00:05:05,760
right up here.

73
00:05:06,030 --> 00:05:07,690
It's really easy to do.

74
00:05:08,120 --> 00:05:13,650
All we have to do is create an AI string Stream we'll call it ISIS and we're going to hook it up to

75
00:05:13,650 --> 00:05:14,620
that string info.

76
00:05:14,670 --> 00:05:16,610
This guy right here.

77
00:05:16,950 --> 00:05:22,890
And what we can do is we can extract information from ISIS which is a stream the same way that we extracted

78
00:05:22,890 --> 00:05:27,020
information from C in the same way we extract information from a file.

79
00:05:27,030 --> 00:05:30,090
Same idea member we're using the stream abstraction.

80
00:05:30,090 --> 00:05:32,820
And we really don't care what the stream is connected to.

81
00:05:32,970 --> 00:05:37,690
In this case it's connected to an in-memory string and that's what we're doing here.

82
00:05:37,890 --> 00:05:40,470
We're reading name numb and total.

83
00:05:40,470 --> 00:05:44,320
The compiler knows the types for these guys because they're defined right up here.

84
00:05:44,580 --> 00:05:50,490
So it's going to try to read a string from the string ISIS which is connected to this guy right here

85
00:05:50,880 --> 00:05:55,950
and he's going to grab Moe and stored a name and it's going to get 100 stored and numb and it's going

86
00:05:55,950 --> 00:06:03,720
to get 123 4.5 and stored in total will display this information out to the console right here and see

87
00:06:03,720 --> 00:06:07,650
out and we'll get a nice formatted output so let's see what it looks like.

88
00:06:10,680 --> 00:06:14,180
And there you go mo one hundred and one twenty three point forty five.

89
00:06:14,280 --> 00:06:16,710
That's the data that was in this string.

90
00:06:16,770 --> 00:06:22,080
So you can see how easily we really what we were doing is actually parsing that string and parsing information

91
00:06:22,080 --> 00:06:24,700
out of there type it which is kind of cool.

92
00:06:24,750 --> 00:06:27,180
And it was so easy to do we really had to do very little.

93
00:06:27,180 --> 00:06:29,700
We had to do this one line 17 right here.

94
00:06:29,700 --> 00:06:32,260
Once we hooked up the strength stream.

95
00:06:32,280 --> 00:06:32,680
OK.

96
00:06:32,760 --> 00:06:34,280
So that's an example of input.

97
00:06:34,450 --> 00:06:36,120
An example of output I'll comment.

98
00:06:36,120 --> 00:06:39,330
This piece of code out or comment and I should say.

99
00:06:39,750 --> 00:06:41,160
Notice what we're doing here.

100
00:06:41,220 --> 00:06:43,760
We're going to use an output string stream here and we'll call it.

101
00:06:43,770 --> 00:06:44,860
Oh yes.

102
00:06:44,960 --> 00:06:49,710
And we're not going to hook it up to anything behind the scenes the stream stream class has its own

103
00:06:49,710 --> 00:06:52,470
string buffer and that's what we're going to use.

104
00:06:52,620 --> 00:06:57,870
So in this case what we're doing is we're instantiating o ss right here and then we're just going to

105
00:06:57,870 --> 00:07:02,490
write to the stream and the stream is going to store that information in that string buffer that it

106
00:07:02,490 --> 00:07:03,090
has.

107
00:07:03,090 --> 00:07:05,680
So what we're going to do is we're going to display name.

108
00:07:05,800 --> 00:07:10,020
We're going to display Namma when display total we still have those from this piece of code up here

109
00:07:10,320 --> 00:07:14,430
and we're going to display them using these three manipulators.

110
00:07:14,430 --> 00:07:16,870
And then when we're done we want to display the string.

111
00:07:16,900 --> 00:07:22,740
Right but all we have is that stream o ss and a string and stream sounds like it's hard for me to say

112
00:07:22,740 --> 00:07:25,170
them because I confused them myself.

113
00:07:25,170 --> 00:07:30,220
So all we have is a stream o ss it's connected to a string.

114
00:07:30,480 --> 00:07:35,970
So what we want to do is display the string and the way we get to that string is we use the as our method

115
00:07:36,300 --> 00:07:38,140
for the Stream.

116
00:07:38,140 --> 00:07:42,720
And that will return that internal string buffer that it's got and will display it.

117
00:07:42,720 --> 00:07:49,710
So what we're doing here is where we're putting all of this information to that stream which is connected

118
00:07:49,710 --> 00:07:50,930
to its own string.

119
00:07:50,930 --> 00:07:52,320
And then we're displaying the string.

120
00:07:52,380 --> 00:07:56,690
So when we display the string you should see this display in a formatted manner.

121
00:07:56,730 --> 00:07:59,700
So let's try that.

122
00:08:00,150 --> 00:08:00,920
There it is.

123
00:08:00,930 --> 00:08:06,250
Mo one hundred twenty three point forty five it's the same formatting that we used right up here.

124
00:08:06,360 --> 00:08:10,710
Makes sense of what we're doing is where we're displaying this member before it went to see out.

125
00:08:10,710 --> 00:08:14,200
Now it's not going to see that now it's going to that string stream.

126
00:08:14,260 --> 00:08:19,500
They're both streams right out is an output stream and SS is an output stream.

127
00:08:19,620 --> 00:08:21,640
It just happens to go to a string.

128
00:08:21,750 --> 00:08:26,330
And now let's do an example for data validation you guys had a lot of questions about data validations

129
00:08:26,360 --> 00:08:27,600
on the forums.

130
00:08:27,660 --> 00:08:32,100
So I decided to do an example using the stream stream.

131
00:08:32,100 --> 00:08:32,730
All right.

132
00:08:33,000 --> 00:08:35,320
So let's go through this one really slowly here.

133
00:08:36,180 --> 00:08:39,080
This is the value at the end of this.

134
00:08:39,120 --> 00:08:45,190
I want the user to enter an integer and I want that integer to be in that value variable right here.

135
00:08:45,390 --> 00:08:46,410
OK.

136
00:08:46,800 --> 00:08:47,530
But I can't.

137
00:08:47,530 --> 00:08:52,830
And you've seen how we can't just ask the user for an integer and then do something like C in.

138
00:08:53,010 --> 00:08:58,530
So we could read the console input into that value variable.

139
00:08:58,530 --> 00:09:03,510
That doesn't work for a right when they type strings and when they type silly stuff on the keyboard

140
00:09:03,840 --> 00:09:05,160
it's going to fail.

141
00:09:05,160 --> 00:09:07,130
So we've got to have a better way to do that.

142
00:09:07,140 --> 00:09:10,000
We have to be able to validate the type that are entering.

143
00:09:10,140 --> 00:09:14,030
So that's what we're going to do here rather than read directly into an integer.

144
00:09:14,030 --> 00:09:17,670
We're going to read into a string right here entry.

145
00:09:18,090 --> 00:09:18,740
OK.

146
00:09:18,780 --> 00:09:21,870
And we're going to do this in a loop and we're going to keep doing it until they enter something that's

147
00:09:21,870 --> 00:09:22,730
valid.

148
00:09:22,740 --> 00:09:24,730
So let's talk about the loop.

149
00:09:25,050 --> 00:09:30,780
What we're doing what we'll do first is we're going to create a boolean flag right here called done

150
00:09:31,280 --> 00:09:34,080
and we're going to see that done to fault's because we're not done.

151
00:09:34,140 --> 00:09:36,510
We're done when we're done right when we're starting out.

152
00:09:36,510 --> 00:09:38,360
Obviously we're not done when we first start.

153
00:09:38,550 --> 00:09:45,690
So we've got to loop or do wollop here and what we're going to do first is we're going to say hey user

154
00:09:45,690 --> 00:09:49,660
please enter an integer and we're going to read the integer into entry.

155
00:09:49,740 --> 00:09:52,680
Remember entry is that string.

156
00:09:52,690 --> 00:09:55,700
So now we're allowing them to enter anything they want.

157
00:09:55,720 --> 00:10:00,430
We're going to grab a string so they can type in numbers letters decimals whatever they want and what

158
00:10:00,430 --> 00:10:05,380
we'll do is we'll try to validate that to make sure that what they typed in is an integer.

159
00:10:05,380 --> 00:10:10,060
This is where the string stream comes in and we're going to use an ice string stream here we have just

160
00:10:10,060 --> 00:10:13,520
used a regular string string it doesn't really matter cause it goes both ways.

161
00:10:13,600 --> 00:10:19,030
But this is an input string stream and we're going to call a validator called it anything you want.

162
00:10:19,030 --> 00:10:22,660
Typically you see these things called s s out there in real code.

163
00:10:22,660 --> 00:10:27,350
I don't know why but it's very very common to see strings James named.

164
00:10:27,350 --> 00:10:32,120
SS So I call a validator and I'm looking at up to entry.

165
00:10:32,740 --> 00:10:40,030
So now I remember entry is suppose entry has a user entered one instead of the number one.

166
00:10:40,030 --> 00:10:42,720
They entered the string one.

167
00:10:42,880 --> 00:10:49,240
What we're doing is we're hooking up this string right input sorry entry right here to that validator

168
00:10:49,240 --> 00:10:53,380
string stream and then this is the key right here.

169
00:10:53,380 --> 00:10:57,490
I'm going to try to extract value once value an integer.

170
00:10:57,850 --> 00:11:01,570
I'm going to try to extract a value from the stream.

171
00:11:01,580 --> 00:11:02,600
There's no way.

172
00:11:02,620 --> 00:11:05,370
Right we've got a string here that's all o n e.

173
00:11:05,380 --> 00:11:06,970
That's not an integer.

174
00:11:06,970 --> 00:11:12,360
This will fail if this fails we're going to say sorry that's not an integer.

175
00:11:12,400 --> 00:11:14,210
Done is still false.

176
00:11:14,230 --> 00:11:17,540
We're going to loop again and I'll talk about this statement here in a second.

177
00:11:17,950 --> 00:11:23,250
But now suppose that they do enter a valid integer suppose they enter 123.

178
00:11:23,260 --> 00:11:27,220
Remember it's a string they're entry strings but that's a valid integer in that string.

179
00:11:27,340 --> 00:11:34,120
When we get to here and we try to extract that integer from that entry that they put in through the

180
00:11:34,120 --> 00:11:38,800
stream we're going to get back 123 and that's going to be stored right in value.

181
00:11:38,800 --> 00:11:40,560
So that's going to be perfect.

182
00:11:40,600 --> 00:11:47,280
This will pass we'll set Dunta true and we're looping while we're not done so we're done right.

183
00:11:47,290 --> 00:11:53,140
Our loop will finish and then I believe there's a statement done here at the bottom that says you entered

184
00:11:53,140 --> 00:11:55,690
the integer value and I'll run this for you in a minute.

185
00:11:55,690 --> 00:12:00,420
Now let's talk about this statement right here.

186
00:12:01,150 --> 00:12:06,520
This is something I hadn't talked about yet and this is these are the more advanced edge cases and nuances

187
00:12:06,520 --> 00:12:08,100
of C++.

188
00:12:08,140 --> 00:12:15,070
Suppose that the user entered something like twelve point thirty eight.

189
00:12:15,460 --> 00:12:23,210
Well this right here will extract the 12 and 12 will be put into value.

190
00:12:23,560 --> 00:12:26,710
But then we have all this stuff left over on the stream.

191
00:12:26,710 --> 00:12:30,310
So the next stream read doesn't really know that that's there.

192
00:12:30,310 --> 00:12:35,440
So what we're doing here is we're saying stood CN and we're using C-n here because that's where we're

193
00:12:35,440 --> 00:12:37,040
reading data from.

194
00:12:37,180 --> 00:12:43,370
We're going to ignore everything in that stream up to the new line and that's what we're doing here.

195
00:12:43,420 --> 00:12:46,010
And that's where that limits header file comes in.

196
00:12:46,180 --> 00:12:51,850
So we're using student numeric limits up to whatever the Studd stream size is and that's dependent on

197
00:12:51,850 --> 00:12:53,070
your platform.

198
00:12:53,230 --> 00:13:00,100
So how big that stream is the maximum number I'm getting rid of all of this stuff I'm just ignoring

199
00:13:00,100 --> 00:13:05,290
all them clearing up that stream so that the next time I read from the stream it's clean and there's

200
00:13:05,290 --> 00:13:06,810
nothing left over.

201
00:13:06,870 --> 00:13:10,490
They remember that the user could have typed in 12.

202
00:13:10,660 --> 00:13:13,810
Hello there.

203
00:13:13,960 --> 00:13:14,630
Right.

204
00:13:15,220 --> 00:13:22,570
And that space right there Rab's that 12 and that 12 goes into value this passes this is true.

205
00:13:22,570 --> 00:13:23,550
So we've got an integer.

206
00:13:23,560 --> 00:13:25,430
They did that to type in an integer.

207
00:13:25,540 --> 00:13:27,680
They typed in a bunch of other stuff as well.

208
00:13:27,790 --> 00:13:32,230
But what we do is we can grab the 12 and just delete that rest of that stuff so the next time we read

209
00:13:32,440 --> 00:13:33,420
we're clean.

210
00:13:33,430 --> 00:13:38,180
All right so let's run this example.

211
00:13:38,430 --> 00:13:42,950
And please enter an integer 12 you entered into your 12.

212
00:13:42,960 --> 00:13:43,250
Good.

213
00:13:43,240 --> 00:13:45,130
That wasn't until just what we expected.

214
00:13:45,330 --> 00:13:46,560
So let's run this again.

215
00:13:46,560 --> 00:13:47,500
Please enter an integer.

216
00:13:47,510 --> 00:13:49,270
Let's say I typed in Frank.

217
00:13:49,380 --> 00:13:50,850
Sorry that's not an integer.

218
00:13:50,850 --> 00:13:53,600
How about point 0 1.

219
00:13:53,640 --> 00:13:55,040
Sorry that's not an integer.

220
00:13:55,050 --> 00:14:01,260
But notice now that when I loop around whatever was left in that input stream is gone because I ignored

221
00:14:01,260 --> 00:14:02,770
it I got rid of it all.

222
00:14:02,790 --> 00:14:05,550
So that really helps us with with future input.

223
00:14:05,550 --> 00:14:11,580
So now if I did something like 10 Frank is a good teacher.

224
00:14:12,840 --> 00:14:17,460
Something like that you entered 10 notice it grabbed the integer but then it just discarded everything

225
00:14:17,460 --> 00:14:18,850
else.

226
00:14:19,440 --> 00:14:25,220
So we're ready to read again and our stream will be in a known state and not some unknown state.

227
00:14:25,800 --> 00:14:26,220
All right.

228
00:14:26,220 --> 00:14:27,570
So that's it.

229
00:14:27,750 --> 00:14:29,620
I hope you enjoyed this.

230
00:14:29,670 --> 00:14:33,500
This section on stream streams they're very very powerful.

231
00:14:33,540 --> 00:14:38,670
They're not used that often out there but sometimes you'll see them used and they used a lot in GUI

232
00:14:38,670 --> 00:14:43,820
work sometimes when you want to display strings too gooey a graphical user interface elements.

233
00:14:43,860 --> 00:14:47,100
We tend to format them in memory and then display them out.

234
00:14:47,560 --> 00:14:48,120
That's it.

235
00:14:48,120 --> 00:14:50,260
So let me know if you have any questions about this.
