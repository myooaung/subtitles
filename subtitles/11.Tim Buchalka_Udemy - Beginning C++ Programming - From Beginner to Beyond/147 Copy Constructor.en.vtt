WEBVTT
1
00:00:05.420 --> 00:00:11.290
In this video we'll learn about the C++ copy constructor when objects are copied.

2
00:00:11.350 --> 00:00:16.840
C++ must be able to create a new object from an existing object in order to do this.

3
00:00:16.840 --> 00:00:20.120
It uses something called a copy constructor.

4
00:00:20.270 --> 00:00:23.500
There are several use cases where a copy constructor is used.

5
00:00:23.570 --> 00:00:30.020
For example if we pass an object by value to a function or method as a parameter then we need to make

6
00:00:30.020 --> 00:00:31.970
a copy of that object.

7
00:00:32.000 --> 00:00:37.760
The same is true when we return an object by value from a function or method and the last common use

8
00:00:37.760 --> 00:00:43.610
case is when you want to construct a new object based on an existing object of the same class.

9
00:00:43.800 --> 00:00:46.930
C++ must provide a way to accomplish this copying.

10
00:00:46.990 --> 00:00:49.810
So C++ uses a copy constructor.

11
00:00:49.970 --> 00:00:55.970
We can provide our own copy constructor and we can define exactly the semantics we need for object copying.

12
00:00:56.180 --> 00:01:02.780
But if we don't provide a copy constructor the C++ compiler will provide a compiler generated one.

13
00:01:02.790 --> 00:01:08.420
Let's look at some of the use cases in more detail so you can see exactly where an object copy is required.

14
00:01:10.240 --> 00:01:15.490
The first use case is when we pass an object to a function or method by value.

15
00:01:15.490 --> 00:01:21.580
Remember the default mode of passing data in C++ is by value which means a copy is made.

16
00:01:21.640 --> 00:01:27.370
So in this example we have here which is a player object and then we have a display player function

17
00:01:27.370 --> 00:01:29.850
that expects a player object by value.

18
00:01:30.130 --> 00:01:35.860
So when we call this function and pass in Hero the function parameter p will be created and it will

19
00:01:35.860 --> 00:01:40.450
be created as a copy of hero using the copy constructor.

20
00:01:40.450 --> 00:01:43.640
Notice that P is local to the display player function.

21
00:01:43.810 --> 00:01:47.240
So when P goes out of scope the destructor will be called as well.

22
00:01:49.310 --> 00:01:53.080
In this use case we have an enemy object which is a player.

23
00:01:53.090 --> 00:01:58.130
We also have a function create super enemy that creates and returns a player object.

24
00:01:58.130 --> 00:02:03.850
Notice that the player object an enemy is created in the function and then return from this function.

25
00:02:03.950 --> 00:02:12.210
Since we're returning an enemy by value a copy of the an enemy object is made by the copy constructor.

26
00:02:12.290 --> 00:02:17.810
The last use case will look at is we want to explicitly create a new object from an existing object.

27
00:02:17.870 --> 00:02:23.150
In this example we have a hero object and we want to create another object called another hero based

28
00:02:23.150 --> 00:02:24.260
on hero.

29
00:02:24.260 --> 00:02:28.920
In this case a copy is made using the copy constructor.

30
00:02:28.930 --> 00:02:32.110
So now you can see where copy constructors are used.

31
00:02:32.110 --> 00:02:33.710
Now let's see what they do.

32
00:02:34.210 --> 00:02:40.210
If you don't provide a copy constructor C++ will generate a default copy constructor that will do member

33
00:02:40.210 --> 00:02:41.650
wise copy.

34
00:02:41.650 --> 00:02:46.000
That means that it will go through the class attributes and copy them from the source object to the

35
00:02:46.000 --> 00:02:52.240
target object for attributes that are objects then their copy constructor will be called.

36
00:02:52.390 --> 00:02:56.850
In many cases this is perfectly fine and the default copy constructor is all you need.

37
00:02:57.160 --> 00:03:01.840
But if you're using raw pointers that only the pointer will be copied not the data that it's pointing

38
00:03:01.840 --> 00:03:02.940
to.

39
00:03:02.950 --> 00:03:07.360
This is referred to as a shallow copy rather than a deep copy.

40
00:03:07.420 --> 00:03:13.360
I'll defer shallow versus deep copying until the next video Well we'll look at a specific example.

41
00:03:13.360 --> 00:03:19.520
So best practice with copy constructors are always provided a user defined copy constructor.

42
00:03:19.540 --> 00:03:26.270
If you use using raw pointers always implement the copy constructor or the Konst reference parameter.

43
00:03:26.290 --> 00:03:29.590
Use the standard template library classes as membra attributes.

44
00:03:29.650 --> 00:03:35.950
They already provide copy constructors or you can avoid using raw pointers as data members if possible

45
00:03:35.980 --> 00:03:37.440
or use smart pointers.

46
00:03:39.510 --> 00:03:43.520
So what does the method signature look like for a copy constructor.

47
00:03:43.530 --> 00:03:47.100
The syntax might look strange at first but it's pretty straightforward.

48
00:03:47.100 --> 00:03:52.620
First it's a constructor so it has the same name as the class and in the parameter list we have a single

49
00:03:52.620 --> 00:03:55.340
object passed in of the same type.

50
00:03:55.500 --> 00:04:01.680
We pass that object in as a reference and a constant y by reference and constant first.

51
00:04:01.940 --> 00:04:05.290
If we pass it by value then we have to make a copy of it.

52
00:04:05.460 --> 00:04:07.700
That's the whole point of the copy constructor.

53
00:04:07.830 --> 00:04:13.900
We would defeat the purpose and end up with never ending recursive calls and as a constant because the

54
00:04:13.900 --> 00:04:18.490
semantics of copying means that we're copying the source we're not modifying it.

55
00:04:18.790 --> 00:04:23.010
So the Konst prevents any modification to the source object.

56
00:04:23.110 --> 00:04:27.940
The last two statements are the prototypes for the player and the Count copy constructors.

57
00:04:27.940 --> 00:04:32.510
Note that are exactly the same except for the names of the classes.

58
00:04:32.690 --> 00:04:36.730
So how do we actually implement the copy constructor in the next video.

59
00:04:36.730 --> 00:04:41.330
We'll look at the case where we have raw pointers as data members and we'll do a deep copy.

60
00:04:41.570 --> 00:04:44.570
And this video will just concentrate on shallow copies.

61
00:04:45.430 --> 00:04:50.260
In the body of the copy constructor we do whatever we need to initialize a new object.

62
00:04:50.260 --> 00:04:55.630
Remember we have access to source so we can reference any attributes we want from source but rather

63
00:04:55.630 --> 00:05:00.580
than write assignment statements in the constructor body we can use a constructor initialization list

64
00:05:00.610 --> 00:05:02.020
as we've done before.

65
00:05:03.010 --> 00:05:06.690
Here is the implemented player class copy constructor.

66
00:05:06.700 --> 00:05:11.470
Notice that we're initializing the newly created object attributes in the initializer list based on

67
00:05:11.470 --> 00:05:13.760
the source object's attributes.

68
00:05:13.780 --> 00:05:20.260
Pretty simple and intuitive of course any code we write in the constructor body will be executed immediately

69
00:05:20.260 --> 00:05:23.740
after the new object is initialized.

70
00:05:23.760 --> 00:05:27.250
And here you can see the copy constructor for the account class.

71
00:05:27.420 --> 00:05:33.000
Again we're initializing the newly created object based on the existing source account object.

72
00:05:33.000 --> 00:05:37.710
Now let's head over to the idea we'll write a copy constructor for the player class and step through

73
00:05:37.710 --> 00:05:40.400
the code so you can see exactly what it's called.

74
00:05:41.010 --> 00:05:47.170
Ok so I mean the idea now and I'm in the section 13 workspace in the copy constructor project.

75
00:05:47.520 --> 00:05:50.890
And what we've got here is that player class that we've been using all along.

76
00:05:50.940 --> 00:05:53.340
I just made a couple of little changes to it.

77
00:05:53.370 --> 00:05:59.310
I created three getters here and we're going to use those getters in a display function which will write

78
00:05:59.310 --> 00:06:03.110
in a little bit and then just return the name to health and DXP.

79
00:06:03.300 --> 00:06:09.990
We've got our single three our constructor here with default parameters as we've done before and it's

80
00:06:10.020 --> 00:06:14.250
implemented right down here using our initializer.

81
00:06:14.610 --> 00:06:17.660
OK so that's all we've got we've created four objects down here.

82
00:06:17.660 --> 00:06:19.790
Now the first thing we want to do is.

83
00:06:19.950 --> 00:06:20.730
That's right.

84
00:06:20.730 --> 00:06:23.940
The prototype for the copy constructor

85
00:06:26.600 --> 00:06:31.170
and it looks like the name of the class which is player in this case.

86
00:06:31.530 --> 00:06:39.900
And a single object in the parameter list and it's a constant player by reference.

87
00:06:39.960 --> 00:06:42.330
And we could just leave that or we can put source in here.

88
00:06:42.330 --> 00:06:43.620
Doesn't really matter.

89
00:06:43.620 --> 00:06:44.300
So that's it.

90
00:06:44.310 --> 00:06:45.720
That's all we need to say.

91
00:06:45.750 --> 00:06:49.800
Obviously we need to implement that we'll do it in a minute and the other thing I want to do here is

92
00:06:49.800 --> 00:06:55.020
I want to write a destructor and basically I just want to know when this thing is going to be destroyed

93
00:06:55.050 --> 00:06:59.700
because it's going to be very important so that we understand the lifecycle of these objects so again

94
00:06:59.730 --> 00:07:04.950
how do we write a destructor if we put a Tildy in front of the destructor name which is the name of

95
00:07:04.950 --> 00:07:06.020
the class.

96
00:07:06.090 --> 00:07:14.100
No parameters and in this case I'm just simply saying I want to output that the destructor is being

97
00:07:14.100 --> 00:07:17.050
called for.

98
00:07:17.190 --> 00:07:21.530
It would just put a colon here and would do that for that name.

99
00:07:21.590 --> 00:07:24.470
That what we know which object is actually being destroyed.

100
00:07:27.970 --> 00:07:28.700
OK that's it.

101
00:07:28.700 --> 00:07:30.110
So now we've got our destructor.

102
00:07:30.160 --> 00:07:36.400
So what we need to do now is implement that copy constructor and I'm going to do it right down here

103
00:07:36.400 --> 00:07:40.590
right after our constructor.

104
00:07:40.630 --> 00:07:41.320
So what do we do.

105
00:07:41.350 --> 00:07:42.820
Well we start off by writing.

106
00:07:42.820 --> 00:07:44.740
Player.

107
00:07:45.460 --> 00:07:47.030
Scope resolution operator.

108
00:07:47.110 --> 00:07:48.390
Player again.

109
00:07:49.030 --> 00:07:52.380
And we're going to implement the same prototype basically right.

110
00:07:52.510 --> 00:07:58.530
So it's Konst player by reference source.

111
00:07:59.440 --> 00:08:03.580
And now what we can do is we can create the initializer list if we like it.

112
00:08:03.610 --> 00:08:04.780
How are we going to initialize this.

113
00:08:04.780 --> 00:08:08.680
Well I want to initialize the name attribute to what.

114
00:08:08.680 --> 00:08:10.970
To this object's name attribute.

115
00:08:11.140 --> 00:08:13.510
In which case it would be source

116
00:08:15.940 --> 00:08:18.150
daat name.

117
00:08:19.270 --> 00:08:25.600
I want to initialize the health attribute to source non-health number I'm making a copy so I'm copying

118
00:08:25.600 --> 00:08:32.290
these values over and the XP to source dot XP.

119
00:08:32.890 --> 00:08:33.350
That's it.

120
00:08:33.370 --> 00:08:41.050
Now we implement an empty body for that copy constructor and what we'll do is in the body will write

121
00:08:41.050 --> 00:08:48.940
an output statement will say see out and we'll write something like copy constructor and we'll do something

122
00:08:48.940 --> 00:08:55.970
like made that C we made a copy of what we made a copy of.

123
00:08:55.990 --> 00:08:57.010
Source name

124
00:09:02.380 --> 00:09:08.110
will put an end line there.

125
00:09:08.120 --> 00:09:09.070
OK so that's it.

126
00:09:09.080 --> 00:09:13.280
That just tells us that it'll will tell us what we've made a copy of that will come in handy when we're

127
00:09:13.280 --> 00:09:16.310
stepping through this and we can understand what's going on.

128
00:09:16.700 --> 00:09:21.580
OK so now we've got our copy constructor set up.

129
00:09:21.620 --> 00:09:27.110
Now let's get this create a function that expects a player by value and we know that that's one of the

130
00:09:27.110 --> 00:09:30.310
use cases where the copy constructor is called So let's do that.

131
00:09:30.440 --> 00:09:34.420
Let's write just a regular function and we'll call it display player

132
00:09:37.520 --> 00:09:41.450
and it will expect a player object or call it P.

133
00:09:42.620 --> 00:09:45.220
And remember it's expecting it by value here.

134
00:09:45.230 --> 00:09:48.160
That's the default way of passing parameters around.

135
00:09:48.320 --> 00:09:53.690
So this implies a copy in in here all we're gonna do and I'll just copy the code that I've got over

136
00:09:53.690 --> 00:09:55.340
here and so I don't have to type it all in.

137
00:09:55.640 --> 00:10:03.710
And what we'll do here is just create those three out put statements that displays P-doc get name P-doc

138
00:10:03.800 --> 00:10:04.680
get help.

139
00:10:04.730 --> 00:10:07.210
So which just going to display those values for P.

140
00:10:07.550 --> 00:10:12.920
Ok now I'm going to put some breakpoints all over here so we can see what's being called.

141
00:10:13.100 --> 00:10:14.370
We won't do it in the destructor.

142
00:10:14.390 --> 00:10:18.150
We'll see that being called it'll just print out destructor called.

143
00:10:18.330 --> 00:10:24.140
And what we've got now is we've got an empty object Frank hero and villain which are all objects and

144
00:10:24.140 --> 00:10:26.980
these are just regular constructor calls happening here.

145
00:10:27.230 --> 00:10:30.350
So what we'll do down here is actually we'll do it right here.

146
00:10:32.140 --> 00:10:39.970
What we'll do now is we'll say something like display player leave an extra line here will say display

147
00:10:39.970 --> 00:10:45.500
player and we'll pass it in empty empty is an object.

148
00:10:45.520 --> 00:10:48.960
So what's going to happen is a copy of that object will be made.

149
00:10:49.300 --> 00:10:55.070
OK so what I'm going to do is again put a break a breakpoint right there and let's debug this and we'll

150
00:10:55.090 --> 00:10:55.990
step through it.

151
00:11:00.190 --> 00:11:02.830
And I'll move the output window just over there.

152
00:11:02.830 --> 00:11:08.020
OK so let's step through this and you can see that right now we're online 26 and that's because that's

153
00:11:08.110 --> 00:11:10.470
empty player object is being created here.

154
00:11:10.660 --> 00:11:14.000
And we should see that print out that constructor right there.

155
00:11:14.170 --> 00:11:16.570
So we've just three args constructor for none.

156
00:11:16.570 --> 00:11:19.570
Remember that's the default none zero zero.

157
00:11:19.870 --> 00:11:25.160
And we'll step through again and now we're just about to call this display player function here.

158
00:11:25.210 --> 00:11:31.630
We'll look at empty which is the object we just created and it contains none for name zero and for health

159
00:11:31.630 --> 00:11:32.880
and zero for XP.

160
00:11:33.130 --> 00:11:37.120
OK so we're just about to call this function right here.

161
00:11:37.150 --> 00:11:42.160
Now before we pass any information in we have to make a copy of it right because we're doing pass by

162
00:11:42.160 --> 00:11:44.680
value or pass by copy.

163
00:11:44.740 --> 00:11:47.220
So I've got empty which you can see right here.

164
00:11:47.320 --> 00:11:51.540
I need to make a copy of empty and that's what is going to be.

165
00:11:51.670 --> 00:11:53.980
Now P is local to this function.

166
00:11:53.980 --> 00:11:58.420
So again it's a copy of empty and it's on the stack right.

167
00:11:58.480 --> 00:12:03.580
So let's step through them what we should see is we should see the copy constructor being called because

168
00:12:03.580 --> 00:12:05.650
a copy needs to be made right now.

169
00:12:05.650 --> 00:12:07.060
So let's step through.

170
00:12:07.300 --> 00:12:13.060
And there you go you can see we're right on line 31 and we're in the copy constructor what are we doing

171
00:12:13.060 --> 00:12:13.680
now.

172
00:12:13.750 --> 00:12:19.040
We're making a copy of empty and that copy is going to be called Pete.

173
00:12:19.090 --> 00:12:20.970
So let's step through again.

174
00:12:22.270 --> 00:12:29.020
We just did the initialization and now it's going to say copy constructor made copy of none.

175
00:12:29.050 --> 00:12:30.190
That's exactly what we did.

176
00:12:30.190 --> 00:12:33.640
We made a copy of that object whose name is none.

177
00:12:33.870 --> 00:12:36.240
OK now I'll step through one more time.

178
00:12:36.310 --> 00:12:42.370
Now that P has been created you can see right here it's a local variable to this function and it's none

179
00:12:42.370 --> 00:12:43.440
0 0.

180
00:12:43.540 --> 00:12:46.840
It's a copy of empty.

181
00:12:46.840 --> 00:12:50.890
There are two different objects but they have the same values right now.

182
00:12:50.920 --> 00:12:52.490
OK let's walk through this.

183
00:12:53.920 --> 00:12:58.870
We just displayed the name the health and the expe.

184
00:12:58.880 --> 00:13:02.570
Now what should happen is P is going out of scope right now right.

185
00:13:02.570 --> 00:13:03.980
We're going to leave this function.

186
00:13:03.980 --> 00:13:06.270
So that stack frame needs to be cleaned up.

187
00:13:06.350 --> 00:13:11.810
So the destructor for p should be called the destructor for the copy not the destructor for empty but

188
00:13:11.810 --> 00:13:14.090
the destructor for that P copy.

189
00:13:14.120 --> 00:13:15.680
So let's do that.

190
00:13:15.680 --> 00:13:21.320
And there you go you can see the destructor has been called and now we're back in Main on line 46 and

191
00:13:21.320 --> 00:13:24.600
from this point on we're just constructing objects as usual.

192
00:13:24.650 --> 00:13:25.160
OK.

193
00:13:25.250 --> 00:13:30.650
So hopefully that's clear you can see it's these little nuances in that using the debugger to step through

194
00:13:30.650 --> 00:13:34.290
things really really makes things very nice to follow.

195
00:13:34.370 --> 00:13:36.250
So let's do another example here.

196
00:13:36.260 --> 00:13:43.760
I'm going to stop the debugger here and what I'll do is we'll create that empty when you know what let's

197
00:13:43.760 --> 00:13:45.850
create a different Let's create a different empty.

198
00:13:45.920 --> 00:13:53.600
In this case let's just create something called x x x x with one hundred and fifty.

199
00:13:53.600 --> 00:13:55.910
That way we know what those values are.

200
00:13:55.910 --> 00:13:59.250
And what I want to do here is I want to get rid of that break point right here.

201
00:13:59.330 --> 00:14:02.160
I want to create another player object.

202
00:14:02.790 --> 00:14:03.240
OK.

203
00:14:03.350 --> 00:14:06.200
And I'm going to call it my new object

204
00:14:09.170 --> 00:14:16.020
and I'm going to create a copy of that empty object.

205
00:14:16.170 --> 00:14:18.880
So again let's see what's going on here.

206
00:14:18.980 --> 00:14:25.130
I've got empty is a player object and I'm setting the name to a bunch of X's to health 200 DXP to 50

207
00:14:25.640 --> 00:14:30.980
then I'm creating another object is called My new object and I'm creating it from empty.

208
00:14:30.980 --> 00:14:35.090
So I want a copy of empty this will call the copy constructor.

209
00:14:35.090 --> 00:14:37.270
That's the whole idea making a copy.

210
00:14:37.290 --> 00:14:48.180
OK so let me put a breakpoint there and it's run this debugger through again.

211
00:14:48.200 --> 00:14:51.950
OK so now we're here constructing that empty object right over here.

212
00:14:51.950 --> 00:14:58.270
So let's walk through that until we get to that other break point on line 44 and that's where we're

213
00:14:58.270 --> 00:14:58.630
at now.

214
00:14:58.630 --> 00:15:01.300
So at this point empty has been created.

215
00:15:01.420 --> 00:15:06.420
If I look at empty up here you can see I've got a bunch of X's 150.

216
00:15:06.520 --> 00:15:09.790
So now I'm right here on line 44.

217
00:15:09.790 --> 00:15:11.660
This is a constructor right.

218
00:15:11.670 --> 00:15:18.460
I'm constructing or initialiser instantiating the jargons all the same a my new object which is a player

219
00:15:19.060 --> 00:15:22.120
in this case from this object that I've already created.

220
00:15:22.120 --> 00:15:23.850
That's where the copy comes in.

221
00:15:23.860 --> 00:15:28.280
So when I step through this I expect the copy constructor to be called again.

222
00:15:28.300 --> 00:15:29.410
So let's do that.

223
00:15:30.320 --> 00:15:35.120
And there we are we're right in the copy constructor in the initialiser and I'm going to walk through

224
00:15:35.120 --> 00:15:37.960
that.

225
00:15:38.150 --> 00:15:43.720
It says right here I made a copy of that original x x x x x object.

226
00:15:44.030 --> 00:15:46.260
I'll step through again.

227
00:15:46.340 --> 00:15:49.780
And now we're right back to where we started before.

228
00:15:49.790 --> 00:15:50.280
OK.

229
00:15:50.330 --> 00:15:54.290
So hopefully that gives you some insight into these copy constructors and how they work they really

230
00:15:54.290 --> 00:15:55.650
make a lot of sense.

231
00:15:55.670 --> 00:15:59.300
The syntax is a little wonky sometimes but it's pretty straightforward.

232
00:15:59.300 --> 00:16:02.380
Now one thing that I should mention is right here.

233
00:16:02.420 --> 00:16:07.610
We're using the initializer list to initialize that new object.

234
00:16:07.610 --> 00:16:11.810
We could change this if we like and just do something like

235
00:16:14.670 --> 00:16:17.010
use a delegating constructor here.

236
00:16:17.100 --> 00:16:17.430
Right.

237
00:16:17.460 --> 00:16:25.080
So we could delegate source don't name source DOD health

238
00:16:28.260 --> 00:16:29.980
and source DOD Expwy

239
00:16:34.730 --> 00:16:37.960
and I need a little colon in front of that just like before.

240
00:16:37.970 --> 00:16:44.030
So what we're doing there is we're doing the delegation and the same exact thing should happen.

241
00:16:45.840 --> 00:16:49.920
We run the debugger here and we'll walk through that real quick so you can see the delegation now happening

242
00:16:50.190 --> 00:16:53.680
before we weren't delegating because we were just initialising right in place there.

243
00:16:53.760 --> 00:16:54.170
Right.

244
00:16:54.330 --> 00:17:00.660
So at this point let's walk through it until we get to 9:45 this time which is where we're at right

245
00:17:00.660 --> 00:17:01.240
now.

246
00:17:01.470 --> 00:17:06.930
So now I'm going to call the copy constructor again to make a copy of this empty opted we just created.

247
00:17:06.930 --> 00:17:09.080
So let's step through it right here.

248
00:17:09.080 --> 00:17:10.510
I mean the copy constructor.

249
00:17:10.590 --> 00:17:16.500
But now rather than use this initializer I'm going to delegate the construction of this object to my

250
00:17:16.500 --> 00:17:19.330
constructor and which is this guy right up here.

251
00:17:19.500 --> 00:17:24.530
So in this case when I walk through it you see transferral control will transfer up to here on line

252
00:17:24.530 --> 00:17:27.690
25 and that's exactly where we are now.

253
00:17:27.680 --> 00:17:33.740
Now we're in the regular 3R constructor and it's going to say three args constructor member the first

254
00:17:33.740 --> 00:17:35.180
one was for empty.

255
00:17:35.210 --> 00:17:36.620
This is for the copy of empty.

256
00:17:36.620 --> 00:17:38.710
So we've got the two objects alive now.

257
00:17:39.230 --> 00:17:42.280
And when I'm done I'm going to come back and I said made a copy of it.

258
00:17:42.680 --> 00:17:43.510
OK so there you go.

259
00:17:43.520 --> 00:17:44.890
There's the copy constructor.

260
00:17:44.890 --> 00:17:47.100
You can see how we can get from that as well.
