WEBVTT
1
00:00:05.520 --> 00:00:09.590
It this video we'll learn about the ACL map containers.

2
00:00:09.610 --> 00:00:12.250
These are also associative containers.

3
00:00:12.280 --> 00:00:19.310
They're collections of stored objects that allow for fast retrieval using a key the shell provides both

4
00:00:19.310 --> 00:00:23.110
sets and maps we saw sets in the last video in this video.

5
00:00:23.160 --> 00:00:25.130
Learn about maps.

6
00:00:25.130 --> 00:00:32.360
The ACL has four types of map containers the map the unordered map the multimap and the unwatered multimap

7
00:00:33.160 --> 00:00:36.670
will focus mainly on the map since it's the one that's most often used

8
00:00:40.680 --> 00:00:44.550
in order to use the map you must include the map header file.

9
00:00:44.730 --> 00:00:50.010
The map is like a dictionary where we have a key a word in the case of a dictionary and an associated

10
00:00:50.010 --> 00:00:57.240
value which would be a definition map store their elements is key value pairs using this could Pair

11
00:00:57.240 --> 00:01:03.360
objects the elements in the map are ordered by key and no duplicate keys are allowed.

12
00:01:03.360 --> 00:01:11.040
We can directly access an element in the map using that key and all iterators are available.

13
00:01:11.120 --> 00:01:15.290
Let's initialize a few map objects in the first example in this slide.

14
00:01:15.290 --> 00:01:20.380
I declare one is a map of string integer key value pairs.

15
00:01:20.390 --> 00:01:23.030
The key is the string and the value is the integer.

16
00:01:23.060 --> 00:01:26.040
Then I initialize one with two key value pairs.

17
00:01:26.240 --> 00:01:35.810
Larry 18 and Mo 25 in the second example I declare M2 as a map of string string key value pairs and

18
00:01:35.810 --> 00:01:41.350
I'm initializing it to Bob butcher and baker George candlestick maker.

19
00:01:43.370 --> 00:01:46.730
We'll use the map M and this slide for the next several examples.

20
00:01:47.810 --> 00:01:53.300
The size method returns the number of elements that are in the map three in this case and max size will

21
00:01:53.300 --> 00:01:56.630
tell us the maximum number of elements the map can contain.

22
00:01:56.630 --> 00:01:59.290
Maps have no concept of front or back.

23
00:01:59.300 --> 00:02:01.890
We'll see how we can add elements in the next slide.

24
00:02:04.280 --> 00:02:08.810
So let's see how we can insert elements into a map we can use the insert method.

25
00:02:08.810 --> 00:02:15.440
Remember maps consist of stood Pair objects where the first attribute is the key and the second attribute

26
00:02:15.440 --> 00:02:16.520
is the value.

27
00:02:16.640 --> 00:02:23.370
We can create P1 as a stood pair object of type string string and initialize it to James mechanic.

28
00:02:23.420 --> 00:02:26.070
James is the key mechanic is the value.

29
00:02:26.390 --> 00:02:32.130
We can then insert p one into the map M since M is a map of string string key value pairs.

30
00:02:32.210 --> 00:02:33.470
Pretty easy.

31
00:02:33.470 --> 00:02:38.960
We can also use the Stood make pair function to make it even easier for us to create those key value

32
00:02:38.960 --> 00:02:42.460
pairs and we can insert them right into the map.

33
00:02:42.500 --> 00:02:47.930
You can see in the last example how easy it is in this case we're adding the key value pair Roger Ranger

34
00:02:47.930 --> 00:02:50.080
to the map.

35
00:02:50.110 --> 00:02:53.110
So let's see another way we can insert elements into the map.

36
00:02:53.380 --> 00:02:59.020
We can use the subscript operator and the dot at method to make the syntax pretty easy.

37
00:02:59.020 --> 00:03:03.630
Suppose I want to insert the Frank teach your key value pair into the map m.

38
00:03:03.940 --> 00:03:06.460
I can provide the key Frank in this case.

39
00:03:06.460 --> 00:03:10.210
Inside the square brackets and assign the value to it.

40
00:03:10.330 --> 00:03:14.700
This will insert the key value pair into the map m if it doesn't exist.

41
00:03:14.710 --> 00:03:18.340
I can also modify existing map values in the same way.

42
00:03:18.340 --> 00:03:20.270
And the syntax is dead simple.

43
00:03:20.380 --> 00:03:26.410
If I wanted to change the value associated with the key Frank from teacher to instructor I can simply

44
00:03:26.410 --> 00:03:32.200
use the subscript operator to do it the dot method does the same thing with different syntax of course

45
00:03:32.560 --> 00:03:36.630
but it will throw an exception of the keys not in the map.

46
00:03:36.640 --> 00:03:40.550
We can also erase elements in a map very easily and I'm done.

47
00:03:40.570 --> 00:03:45.520
Erase and will erase the key value pair whose key is an A from the map.

48
00:03:45.520 --> 00:03:50.530
We can also use the find method to get an iterator to A map's element as with the set.

49
00:03:50.530 --> 00:03:56.500
For efficiency use the member method find not the find in the algorithm library in the second example.

50
00:03:56.500 --> 00:03:59.240
I'm finding the key Bob in the map.

51
00:03:59.440 --> 00:04:04.570
If I get back an iterator that's not pointing to the end of the map then I found the matching element

52
00:04:05.240 --> 00:04:06.700
for I wanted to erase that element.

53
00:04:06.700 --> 00:04:11.770
I can simply call em daddy race and pass in the iterator in the last example.

54
00:04:11.770 --> 00:04:13.300
That's exactly what I'm doing.

55
00:04:13.510 --> 00:04:17.490
I'm looking for the key George in the map and if it's in there I'm erasing it.

56
00:04:19.020 --> 00:04:22.470
Finally we can use the count method the same way we did with sets.

57
00:04:22.470 --> 00:04:25.760
It's an easy way to see if an element exists in the map.

58
00:04:25.950 --> 00:04:32.160
If it does exist count will return one and if it doesn't count will return 0 as we've seen with all

59
00:04:32.160 --> 00:04:33.700
the ACL containers.

60
00:04:33.720 --> 00:04:39.390
The clear method removes all elements from the map and the empty method returns true if the map is empty

61
00:04:39.450 --> 00:04:40.850
false otherwise.

62
00:04:41.070 --> 00:04:43.430
Well that's a quick summary of the math class.

63
00:04:43.500 --> 00:04:48.260
As I mentioned previously with all the SDL components there is much more to learn.

64
00:04:48.270 --> 00:04:53.220
Please become familiar with the basics and then take your learning to the next level by studying the

65
00:04:53.220 --> 00:04:54.920
SBL documentation.

66
00:04:54.930 --> 00:05:02.180
Let's see some of the other map containers provided by the SDL the multimap class is also defined in

67
00:05:02.180 --> 00:05:03.650
the map header file.

68
00:05:03.900 --> 00:05:10.640
A multimap is a map that is ordered by key but does allow duplicate elements all iterators are available

69
00:05:10.640 --> 00:05:16.220
to the multimap the unordered map is in the unordered map header file.

70
00:05:16.460 --> 00:05:23.290
The unordered map is a map that's an ordered unordered maps do not allow Reversi iterators the last

71
00:05:23.290 --> 00:05:30.570
type of map provided by the CEO is the unordered multimap the unordered multimap does not order elements

72
00:05:30.700 --> 00:05:32.770
and it does allow duplicates.

73
00:05:32.860 --> 00:05:35.620
Again no reverse iterators are allowed.

74
00:05:35.620 --> 00:05:38.690
These maps are very powerful and pretty easy to use.

75
00:05:38.710 --> 00:05:40.120
Let's head over to the idea.

76
00:05:40.120 --> 00:05:47.340
We'll see some examples of using the map OK so I'm back in the IDM in the section 20 workspace in the

77
00:05:47.340 --> 00:05:54.030
Map Project and what I'd like to do is go for a couple of map examples and one in particular that I

78
00:05:54.030 --> 00:05:57.900
think is going to help you out a lot with the challenge that's coming up in the next video.

79
00:05:57.930 --> 00:06:03.770
So let's start with Test 1 and there's only I think two Tests in this example.

80
00:06:03.770 --> 00:06:08.220
This one's a little ball but we'll go through it slowly and then what we'll do is we'll talk about spy

81
00:06:08.280 --> 00:06:09.400
function I wrote.

82
00:06:09.430 --> 00:06:11.850
OK so we're here in test one.

83
00:06:12.360 --> 00:06:21.620
And what I've got here is I've defined M to be a map of string integer key value pairs.

84
00:06:21.870 --> 00:06:23.700
The string is the key.

85
00:06:25.570 --> 00:06:29.030
And the integer is the value.

86
00:06:29.110 --> 00:06:31.910
These guys can be just about anything.

87
00:06:31.930 --> 00:06:36.970
I'm just going to use strings for the key because they're really easy to understand but those keys can

88
00:06:36.970 --> 00:06:41.850
actually be our own custom objects as well and the value can be more complicated as well.

89
00:06:41.860 --> 00:06:46.120
What we're going to do is in the next test what we're going to do is we're going to have the key be

90
00:06:46.120 --> 00:06:50.070
a string and the value be a set of integers.

91
00:06:50.080 --> 00:06:54.590
So again you can build these things up to get really complicated and very very very powerful.

92
00:06:54.790 --> 00:07:00.160
So again M is a map of string integer key value pairs.

93
00:07:00.160 --> 00:07:02.430
Here are my pairs right here.

94
00:07:02.440 --> 00:07:03.940
These are not person objects.

95
00:07:03.940 --> 00:07:06.100
I don't mean how a person class in this demo.

96
00:07:06.220 --> 00:07:12.960
So there's a string Larry and there's the value in the integer three mo one Cur-Lee to.

97
00:07:12.970 --> 00:07:13.890
What this means.

98
00:07:13.900 --> 00:07:19.060
Who knows if you're just associating a string with an integer it could be how many times Larry went

99
00:07:19.060 --> 00:07:19.890
to the movies today.

100
00:07:19.900 --> 00:07:21.400
Could be just about anything.

101
00:07:21.440 --> 00:07:26.470
Ok then I'm displaying em and you could see that right up here.

102
00:07:26.620 --> 00:07:29.770
It's just plain Curly to Larry three mo one.

103
00:07:29.770 --> 00:07:31.290
Now look at the ordering there.

104
00:07:31.300 --> 00:07:35.290
It's ordering by key and the key in this case is the string.

105
00:07:35.530 --> 00:07:38.660
So you're going to get curly first Larry second third.

106
00:07:38.680 --> 00:07:41.900
It's using string order perfect.

107
00:07:41.900 --> 00:07:47.260
Now let's add another 10 to that map.

108
00:07:47.630 --> 00:07:50.420
Remember what we're doing is we're adding stewed pairs.

109
00:07:50.450 --> 00:07:57.290
So in this case we're creating a good pair object right here and it's got to be of the same key value

110
00:07:57.290 --> 00:07:58.040
pair type.

111
00:07:58.040 --> 00:08:00.320
It's got to be string into Can't be anything else.

112
00:08:00.410 --> 00:08:02.960
Or I can insert into this map here.

113
00:08:02.990 --> 00:08:06.500
So in this case there's my key there's my value.

114
00:08:06.500 --> 00:08:12.120
I'm creating a pair and I'm inserting that pair into em and then I'm displaying them.

115
00:08:12.140 --> 00:08:17.870
So when you see that next display statement here you can see Anna is in there now with the 10 and Anna

116
00:08:17.880 --> 00:08:21.600
is at the beginning of the list because it's being sorted by the key.

117
00:08:21.790 --> 00:08:27.770
That is a handy little function called Make pair that makes this really easy so we can insert call make

118
00:08:27.770 --> 00:08:34.630
pair it's going to create that stood pair for us and it's going to be the key is Joe the value is five.

119
00:08:34.790 --> 00:08:39.450
So that'll automatically do kind of what we did up here without all the template parameter.

120
00:08:39.450 --> 00:08:41.510
There Any that it will figure it all out.

121
00:08:41.510 --> 00:08:47.090
So in this case it's going to make the pair Joe five and insert that into the map and then we're going

122
00:08:47.090 --> 00:08:49.320
to display the map right here.

123
00:08:49.380 --> 00:08:52.670
You can see that Joe five is now in the map.

124
00:08:52.760 --> 00:08:55.200
Pretty easy right now here.

125
00:08:55.220 --> 00:08:58.130
This is really easy here in this case.

126
00:08:58.340 --> 00:09:01.250
I'm saying m and I'm providing the key.

127
00:09:01.250 --> 00:09:05.140
This is the key inside the subscripts.

128
00:09:05.140 --> 00:09:07.030
So what it's going to do is it's convincer.

129
00:09:07.060 --> 00:09:13.330
Frank is in there right now it's going to insert the key value pair Frank 18 into the map using this

130
00:09:13.330 --> 00:09:19.720
syntax which is really really easy to read and then displaying it and you can see right here that there

131
00:09:19.720 --> 00:09:21.690
is Frank 18.

132
00:09:21.700 --> 00:09:27.820
Now what's really cool is if I wanted to change the value associated with the key Frank right now it's

133
00:09:27.850 --> 00:09:28.630
18.

134
00:09:28.660 --> 00:09:30.610
Suppose I wanted to add 10 to it.

135
00:09:30.610 --> 00:09:34.860
All I have to say is give me the value for that key and the math.

136
00:09:34.870 --> 00:09:36.060
That's what I'm doing here.

137
00:09:36.370 --> 00:09:38.500
And add tend to it display again.

138
00:09:38.510 --> 00:09:43.080
So now you could see that Frank is 28 right here right.

139
00:09:43.150 --> 00:09:45.130
So I've added 10 to the 18.

140
00:09:45.130 --> 00:09:46.200
Pretty cool.

141
00:09:46.210 --> 00:09:48.830
Let me clear this and that scroll up just a little bit.

142
00:09:48.910 --> 00:09:50.500
A couple of more examples.

143
00:09:50.830 --> 00:09:52.490
Let's do this one right here.

144
00:09:53.780 --> 00:10:01.220
All I want to do here is erase Frank from the map I'm just providing the key right here where this is

145
00:10:01.220 --> 00:10:02.070
all key base.

146
00:10:02.070 --> 00:10:06.460
So in this case MDD race Frank and then I'm displaying the map again.

147
00:10:06.590 --> 00:10:09.110
You can see the output right here on this line.

148
00:10:09.140 --> 00:10:10.550
Frank is gone.

149
00:10:10.550 --> 00:10:14.460
Frank was here was 28 and now it's gone.

150
00:10:14.630 --> 00:10:19.850
And then we can call the count methods here just to see how those ront I'm displaying the count for

151
00:10:19.850 --> 00:10:20.250
Joe.

152
00:10:20.270 --> 00:10:22.070
How many times does Joe appear in the map.

153
00:10:22.070 --> 00:10:24.170
Well it's either there or it's not there.

154
00:10:24.230 --> 00:10:25.780
In this case Joe is there.

155
00:10:25.790 --> 00:10:31.630
So we're getting back a one and Frank is no longer there because I just the lead of Frank right here.

156
00:10:31.640 --> 00:10:36.260
So I should get back to zero and that's exactly what I get back right here.

157
00:10:36.260 --> 00:10:39.230
And then what we can do is we can call the find method.

158
00:10:39.230 --> 00:10:45.440
Remember this is the find method for the math class not these the find method and the algorithms library.

159
00:10:45.440 --> 00:10:48.390
So I want to find that Larry in this map.

160
00:10:48.860 --> 00:10:55.690
I'm going to get back an iterator that iterator is an iterator not to Larry not to.

161
00:10:55.760 --> 00:10:59.980
There is value which is three but to this stood pair.

162
00:10:59.990 --> 00:11:06.830
So if I get back an iterator and I'm not at the end then I've got a pair so I can access the first element

163
00:11:06.830 --> 00:11:11.720
in the pair and the second element in the pair makes sense the first element is the key.

164
00:11:11.750 --> 00:11:14.050
The second element is the value.

165
00:11:14.480 --> 00:11:18.860
So this right here will display Larry this right here will display three.

166
00:11:19.010 --> 00:11:23.000
And that's what's happening right here found Larry 3.

167
00:11:23.060 --> 00:11:25.820
Then of course we're clearing the map and displaying the map.

168
00:11:25.820 --> 00:11:27.770
And now we've got an empty map right here.

169
00:11:28.030 --> 00:11:34.150
So go through these slowly you can play them with your own you can modify this and learn from it.

170
00:11:34.400 --> 00:11:38.400
Let's take a look at test two and we're here in test.

171
00:11:38.400 --> 00:11:41.250
You can see the output actually me scrolling up as well.

172
00:11:41.260 --> 00:11:41.740
Perfect.

173
00:11:41.740 --> 00:11:47.210
You can see that test to output is right over here on the right and the console.

174
00:11:47.210 --> 00:11:50.960
Now this one's a little bit more complicated so let's go through this slowly.

175
00:11:50.960 --> 00:11:53.220
I've got a map.

176
00:11:53.480 --> 00:12:03.310
It's called grades and it's a map of string is the key and the value is a set of integers.

177
00:12:03.320 --> 00:12:05.570
So in this case grade's is a map.

178
00:12:05.570 --> 00:12:09.520
The key is a string and the value is a set of integers.

179
00:12:09.650 --> 00:12:12.050
So I can have values in there like.

180
00:12:12.050 --> 00:12:22.180
Frank is the key and I could have a set of integers 10 20 30 that say make sense.

181
00:12:22.190 --> 00:12:23.060
So this is pretty cool.

182
00:12:23.060 --> 00:12:29.660
So in this case let's say that I'm trying to model the top three grades that Frank got this semester.

183
00:12:29.790 --> 00:12:33.290
Number we can't have duplicates in here so we're just having three grades.

184
00:12:33.410 --> 00:12:36.100
So what we're doing is we're saying the key is Frank right.

185
00:12:36.110 --> 00:12:43.550
That way I can identify that that key value pair once I have that I can get the value part of it.

186
00:12:43.580 --> 00:12:47.070
It's a set of integers and then I can process a set of integers.

187
00:12:47.240 --> 00:12:49.400
So that's what we're doing here right.

188
00:12:49.400 --> 00:12:51.030
So let's go through this again.

189
00:12:51.080 --> 00:12:53.950
Here is Key value.

190
00:12:54.630 --> 00:12:58.230
Here's the key here's the key here's the key.

191
00:12:58.230 --> 00:13:01.390
There's the value it's a set of two integers.

192
00:13:01.440 --> 00:13:02.820
Here's a set of one integer.

193
00:13:02.820 --> 00:13:07.980
Here's a set of three integers and then what I'm doing is I'm just displaying grades and I'll show you

194
00:13:07.980 --> 00:13:10.410
how that display function works in a minute.

195
00:13:10.560 --> 00:13:19.110
But you can see I'm displaying grades right here and it's sorting ordering rather by the key which is

196
00:13:19.110 --> 00:13:19.890
a string.

197
00:13:19.980 --> 00:13:22.380
So Curly 80 90 100.

198
00:13:22.380 --> 00:13:24.030
There it is Larry.

199
00:13:24.080 --> 00:13:27.570
90 100 and Mo 94.

200
00:13:27.570 --> 00:13:36.410
Now suppose I want to insert ninety five into that set of integers for Larry I can get Larry right here.

201
00:13:36.510 --> 00:13:41.610
That's when I return a reference to that element and I can insert 95 into it's value.

202
00:13:41.790 --> 00:13:43.320
Well remember it's value is a set.

203
00:13:43.320 --> 00:13:46.690
So I'm actually inserting 95 into that set of integers.

204
00:13:46.710 --> 00:13:50.580
So now you can see that Larry originally was 190.

205
00:13:50.610 --> 00:13:57.650
Now Larry is 90 95 and 100 right here right.

206
00:13:57.690 --> 00:14:00.370
So I just added that 95 right in here.

207
00:14:00.370 --> 00:14:05.010
And remember that set of integers is ordered as well so we get that benefit as well.

208
00:14:05.020 --> 00:14:09.480
So we've got the map as ordered and the set within the map is ordered as well.

209
00:14:09.520 --> 00:14:14.110
So my last example here is let's say that we want to find mo.

210
00:14:14.530 --> 00:14:15.720
So let's look for Moe.

211
00:14:15.730 --> 00:14:19.870
We're going to get back an iterator right if that iterator is not at the end.

212
00:14:19.870 --> 00:14:24.320
Then I found Mo Mo is in there I know he's in there he's right over here.

213
00:14:24.490 --> 00:14:31.420
So now what I want to do is using the iterator I want to access the second attribute right remember

214
00:14:31.420 --> 00:14:32.730
the first is the key.

215
00:14:32.740 --> 00:14:33.060
Ever.

216
00:14:33.100 --> 00:14:39.010
I know what the key is it's Mo what I want is the second attribute which is the set of integers and

217
00:14:39.010 --> 00:14:40.880
I want to insert a thousand in there.

218
00:14:41.170 --> 00:14:43.920
So it's similar to this example right here.

219
00:14:44.230 --> 00:14:49.420
Except that in this case we're using an iterator somewhere on sort of thousand into the set of integers

220
00:14:49.420 --> 00:14:56.950
associated with Mo member Mo is the key the set of integers is the value and you can see right there

221
00:14:56.950 --> 00:15:01.010
is the thousand and that's from displaying the grades.

222
00:15:01.010 --> 00:15:04.170
Now let me show you the display function.

223
00:15:04.580 --> 00:15:06.160
There's actually two display functions.

224
00:15:06.170 --> 00:15:13.500
I've got this one right here which is a template function that is displaying any two types.

225
00:15:13.500 --> 00:15:16.450
This is the one that's really being called in this case.

226
00:15:16.470 --> 00:15:21.580
So again in this case I might be getting my it's a map right.

227
00:15:21.620 --> 00:15:23.900
It's a map of key value pairs.

228
00:15:23.910 --> 00:15:25.380
The key is this guy right here.

229
00:15:25.380 --> 00:15:32.710
That could be curly and the value is the set of integers associated with curly.

230
00:15:32.790 --> 00:15:37.080
So that could be the set 80 90 and 100.

231
00:15:37.110 --> 00:15:39.770
In this case.

232
00:15:39.770 --> 00:15:41.520
So that's the information I'm getting.

233
00:15:41.520 --> 00:15:44.040
What I have to do is display it out nicely like this.

234
00:15:44.190 --> 00:15:48.630
So the first thing I'm doing I'm just displaying that little the left bracket which is this guy right

235
00:15:48.630 --> 00:15:50.040
here.

236
00:15:50.310 --> 00:15:57.390
Then for each element each element L.M. I called it in that map.

237
00:15:57.720 --> 00:15:59.670
The first item is the key.

238
00:15:59.680 --> 00:16:00.870
So that's Curly.

239
00:16:00.900 --> 00:16:01.670
That's Larry.

240
00:16:01.680 --> 00:16:03.160
That's moe.

241
00:16:03.240 --> 00:16:08.050
And then each time I get one of those what I'm doing is here I'm iterating over the second which is

242
00:16:08.050 --> 00:16:11.320
the set of integers makes sense.

243
00:16:11.340 --> 00:16:18.960
So remember the outer loop here is iterating over Curly Larry Moe and then each time I have one of those

244
00:16:18.960 --> 00:16:22.120
I'm iterating over their values set right here.

245
00:16:22.140 --> 00:16:26.060
So that's just displaying that information nicely.

246
00:16:26.220 --> 00:16:29.850
I know this may be a little confusing if you sit down and walk through it.

247
00:16:29.880 --> 00:16:35.340
It'll be really clear I hope in the next video we're going to do a challenge we're going to use something

248
00:16:35.340 --> 00:16:36.870
that's almost exactly like this.

249
00:16:36.870 --> 00:16:43.420
We're going to use a map where the string is the key and we have a set of integers as the value.

250
00:16:43.530 --> 00:16:47.460
And what we're going to do is we're going to grab words from a document and we're going to figure out

251
00:16:48.000 --> 00:16:52.220
how many times they occur and then we're going to figure out how many times what lines they occur on.

252
00:16:52.230 --> 00:16:53.550
So it's going to be pretty fun.

253
00:16:53.610 --> 00:16:55.090
So I'll see you in the next video.
