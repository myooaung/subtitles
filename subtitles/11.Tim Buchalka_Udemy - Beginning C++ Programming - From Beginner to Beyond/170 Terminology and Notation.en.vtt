WEBVTT
1
00:00:05.340 --> 00:00:11.130
It this video will learn some of the terminology and notation used with inheritance.

2
00:00:11.130 --> 00:00:15.660
The terminology we use is pretty straightforward but it's important that it's clear since she'll be

3
00:00:15.660 --> 00:00:19.040
using it throughout your career as a C++ developer.

4
00:00:19.080 --> 00:00:24.780
First let's review inheritance as we've already seen inheritances the process of creating new classes

5
00:00:25.020 --> 00:00:27.050
from existing classes.

6
00:00:27.060 --> 00:00:33.940
It's a mechanism that allows us to reuse existing code when we use inheritance to create a new class.

7
00:00:33.960 --> 00:00:37.290
There may be several classes involved in this course.

8
00:00:37.380 --> 00:00:39.930
We'll mainly talk about single inheritance.

9
00:00:39.930 --> 00:00:46.440
That is when we create a new class based on another single class multiple inheritance is when we create

10
00:00:46.440 --> 00:00:49.300
a new class from two or more other classes.

11
00:00:53.070 --> 00:00:58.890
The classes that are involved in the inheritance relationship also have terms associated with them.

12
00:00:59.130 --> 00:01:05.940
The base class is the class being extended or inherited from these classes also referred to as the parent

13
00:01:05.940 --> 00:01:13.770
class or superclass in the inheritance relationship the derived class is the class it's being created

14
00:01:13.770 --> 00:01:15.770
from the base class.

15
00:01:15.840 --> 00:01:22.020
This class will inherit the attributes and operations from the base class and this class is also referred

16
00:01:22.020 --> 00:01:25.800
to as the child class or the subclass.

17
00:01:25.800 --> 00:01:31.650
You can see in the diagram the commonly used notation used to express this inherit its relationship.

18
00:01:31.710 --> 00:01:37.690
We draw a solid line between the base class and the derived class with a closed unfilled arrowhead or

19
00:01:37.690 --> 00:01:40.880
a triangle pointing to the base class.

20
00:01:40.890 --> 00:01:46.080
This is a UML class diagram and can also show much more information about the classes we're modeling

21
00:01:48.920 --> 00:01:54.860
a very important concept to understand is that of an is a relationship with object oriented programming

22
00:01:54.860 --> 00:01:56.090
and inheritance.

23
00:01:56.630 --> 00:02:04.130
When we use Classic or public inheritance our derived classes are generally subtypes of their base classes.

24
00:02:04.130 --> 00:02:09.020
This implies an is a relationship so a circle is a shape.

25
00:02:09.230 --> 00:02:11.640
A savings account is an account.

26
00:02:11.960 --> 00:02:15.800
This very simple concept will provide us with a great deal of power.

27
00:02:16.100 --> 00:02:17.180
We learned how to leverage.

28
00:02:17.180 --> 00:02:22.130
This is a relationship and the next section of the course when we learn about polymorphic functions

29
00:02:22.790 --> 00:02:29.720
generalization is about combining similar classes into a single more general class based on the classes

30
00:02:29.720 --> 00:02:35.780
common attributes the more general classes is obviously more abstract and can therefore potentially

31
00:02:35.780 --> 00:02:38.280
be reused more easily.

32
00:02:38.360 --> 00:02:41.530
Specialization is the opposite of generalization.

33
00:02:41.540 --> 00:02:47.390
This is about creating new classes from existing classes and these new classes generally add attributes

34
00:02:47.630 --> 00:02:53.050
and operations to the already inherited ones as programmers and designers.

35
00:02:53.090 --> 00:02:59.860
We use both generalization and specialization to create inheritance hierarchies inheritance hierarchies

36
00:02:59.870 --> 00:03:05.480
is how we organize our inheritance relationships so that we can more effectively organize and reuse

37
00:03:05.480 --> 00:03:07.240
our code.

38
00:03:07.250 --> 00:03:15.020
Let's see a simple example in this example we have classes A B C D and D and we have public inheritance.

39
00:03:15.140 --> 00:03:19.880
That is is a relationships between derived and base classes.

40
00:03:19.880 --> 00:03:23.870
You can see that class A is not being derived from any other class.

41
00:03:23.870 --> 00:03:28.670
This class is often referred to as the root class in the hierarchy.

42
00:03:28.670 --> 00:03:30.130
B is derived from A.

43
00:03:30.170 --> 00:03:35.780
C is also derived from a D is derived from C and is derived from D.

44
00:03:35.810 --> 00:03:38.600
You can see the class hierarchy in the diagram.

45
00:03:38.600 --> 00:03:44.090
Notice that the higher up we go in the hierarchy the more general our classes are and the lower we go

46
00:03:44.090 --> 00:03:47.890
in our hierarchy the more specialized they are.

47
00:03:47.900 --> 00:03:50.700
Also notice the is a relationships.

48
00:03:50.960 --> 00:03:53.110
In this example B is an A.

49
00:03:53.360 --> 00:04:01.970
C is also in since they're both derived from the class A and E is a D because e is derived from class

50
00:04:01.970 --> 00:04:03.050
D.

51
00:04:03.050 --> 00:04:05.930
Now notice that E is also a c.

52
00:04:05.930 --> 00:04:08.240
Since inheritance is transitive.

53
00:04:08.240 --> 00:04:11.620
In fact in this example E is also an A.

54
00:04:12.140 --> 00:04:15.800
However Class B is not a C.

55
00:04:16.280 --> 00:04:20.360
There is no inheritance relationship directly between B and C..

56
00:04:20.360 --> 00:04:23.330
Let's look at a more concrete example.

57
00:04:23.780 --> 00:04:26.310
In this example we have a root class person.

58
00:04:26.480 --> 00:04:30.500
That's the most general or abstract class in this class hierarchy.

59
00:04:30.770 --> 00:04:33.690
We can see that student is derived from person.

60
00:04:33.830 --> 00:04:40.020
So a student is a person and inherits the attributes and operations of the Person class.

61
00:04:40.040 --> 00:04:46.540
We also see that employee is a person and faculty staff and administrators are derived from employee.

62
00:04:46.610 --> 00:04:48.620
So they are employees.

63
00:04:48.620 --> 00:04:55.520
In fact there are also persons but notice that a student is not an employee in this class hierarchy.

64
00:04:55.520 --> 00:04:59.720
Also notice that the is a relationships are not bi directional.

65
00:04:59.720 --> 00:05:06.160
For example a person is not necessarily an employee because they could be a student.

66
00:05:06.620 --> 00:05:11.720
You can see how useful a class diagram can be since it provides a high level structural overview of

67
00:05:11.720 --> 00:05:18.080
the classes and their relationships in the next video will look at another way of using classes in C++

68
00:05:18.080 --> 00:05:21.310
called composition and see how it differs from inheritance.
