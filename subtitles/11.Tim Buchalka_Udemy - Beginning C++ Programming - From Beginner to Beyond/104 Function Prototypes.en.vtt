WEBVTT
1
00:00:05.550 --> 00:00:11.190
In the previous video I mentioned that the C++ compiler must know all about a function before it allows

2
00:00:11.190 --> 00:00:13.060
that function to be called.

3
00:00:13.080 --> 00:00:14.660
I didn't say why though.

4
00:00:14.940 --> 00:00:19.890
The reason for this is that the compiler can't check to see if the number of parameters passed in and

5
00:00:19.890 --> 00:00:24.450
their types are correct when the function is called unless it knows about the function being called

6
00:00:24.450 --> 00:00:26.230
before it's called.

7
00:00:26.250 --> 00:00:28.170
There are two ways we can make this happen.

8
00:00:28.170 --> 00:00:32.220
The first way is to make sure we define all functions before they're used.

9
00:00:32.220 --> 00:00:37.040
This is OK for many small programs but it quickly becomes very difficult to do.

10
00:00:37.200 --> 00:00:40.390
And in the case of two functions that call one another it's impossible.

11
00:00:40.680 --> 00:00:46.350
So rather than have to worry about the order in which we define functions C++ allows us to create function

12
00:00:46.350 --> 00:00:52.620
prototypes function prototypes tell the compiler All it needs to know about a function so they can be

13
00:00:52.620 --> 00:00:58.600
sure that the function is being called correctly function prototypes are also called forward declarations.

14
00:00:58.710 --> 00:01:03.090
Since you're basically telling the compiler Hey compiler This is what this function is going to look

15
00:01:03.090 --> 00:01:03.600
like.

16
00:01:03.630 --> 00:01:05.240
Make sure I use it that way.

17
00:01:05.400 --> 00:01:10.850
In smaller programs all the function prototypes are generally placed near the top of a program usually

18
00:01:10.860 --> 00:01:13.860
after the pound includes as programs get larger.

19
00:01:13.860 --> 00:01:19.800
We split our programs up into multiple files so we include H or header files and we include function

20
00:01:19.800 --> 00:01:21.710
prototypes in these files.

21
00:01:21.780 --> 00:01:23.960
We'll see that a little bit later in the course.

22
00:01:23.970 --> 00:01:26.990
Let's see what these function prototypes look like.

23
00:01:27.660 --> 00:01:32.820
Here I've defined a function called function name at the bottom of the slide the function prototype

24
00:01:32.820 --> 00:01:35.660
for this function is the first line of code you see.

25
00:01:35.700 --> 00:01:38.240
Notice it looks very much like the function header.

26
00:01:38.400 --> 00:01:40.340
That's the part of the function definition.

27
00:01:40.500 --> 00:01:45.630
Right before the body of the function with a function prototype the compiler doesn't need to know what

28
00:01:45.630 --> 00:01:50.330
the implementation of the function is only its header information.

29
00:01:50.340 --> 00:01:55.560
So in this case it knows that you later define a function named function name that expects no parameters

30
00:01:55.620 --> 00:01:57.660
and returns an integer.

31
00:01:57.690 --> 00:02:01.920
If you use a function named function name it will enforce those conditions.

32
00:02:02.010 --> 00:02:06.640
If you try to use it in any other way say by calling it with an integer in the parameter list then you

33
00:02:06.650 --> 00:02:07.710
get a compiler error.

34
00:02:07.920 --> 00:02:09.100
Pretty easy right.

35
00:02:09.120 --> 00:02:14.160
You can have as many prototypes as you need one per function and it doesn't matter what order you declare

36
00:02:14.160 --> 00:02:14.810
them in.

37
00:02:15.120 --> 00:02:17.530
Let's take a look at another one.

38
00:02:17.850 --> 00:02:20.570
In this case we have the same function named function name.

39
00:02:20.640 --> 00:02:23.400
But this time it expects exactly one parameter.

40
00:02:23.640 --> 00:02:28.320
So we provide a function prototype to the compiler that has an INT in the parameter list.

41
00:02:28.320 --> 00:02:33.210
Note that we can supply the name of the parameter if we wish but it is used by the compiler.

42
00:02:33.210 --> 00:02:35.830
The compiler doesn't care about the name only the type.

43
00:02:36.150 --> 00:02:39.020
So either of these function prototypes can be used.

44
00:02:39.210 --> 00:02:43.160
Best practice is to provide the parameter names for documentation purposes.

45
00:02:43.350 --> 00:02:49.430
Let's see another example in this example we have a function that returns nothing when call.

46
00:02:49.500 --> 00:02:54.120
So the function prototype must include the void keyword prior to the function name.

47
00:02:54.120 --> 00:02:57.220
Just like the function definition does.

48
00:02:57.550 --> 00:03:01.980
In this case the function expects two parameters an integer and a standard string.

49
00:03:02.260 --> 00:03:07.510
So either one of these function prototypes in the slide is valid in one case we provide the parameter

50
00:03:07.510 --> 00:03:12.270
types and names and the other only the parameter types.

51
00:03:12.760 --> 00:03:17.680
The function prototype for the say hello function we saw in the previous video would look like this.

52
00:03:17.680 --> 00:03:21.130
Void say hello and then the empty parameter list.

53
00:03:21.130 --> 00:03:22.590
Notice the semi-colon at the end.

54
00:03:22.600 --> 00:03:23.580
It's very important.

55
00:03:23.800 --> 00:03:27.150
We're not specifying a body only the prototype.

56
00:03:27.280 --> 00:03:32.530
If we try to call this function in any other manner we'll get a compiler error.

57
00:03:32.530 --> 00:03:37.700
So let's see how the compiler uses this information and the function prototype to help us write code.

58
00:03:37.960 --> 00:03:43.090
The function prototype here says that I'll define a function named say hello that expects no parameters

59
00:03:43.360 --> 00:03:45.250
and returns nothing.

60
00:03:45.250 --> 00:03:47.560
Then I use or call the function in main.

61
00:03:47.740 --> 00:03:51.430
The first function call is fine since it matches the prototype.

62
00:03:51.460 --> 00:03:54.520
The second function call will cause a compiler error.

63
00:03:54.520 --> 00:03:59.410
We told the compiler that the function expects no parameters but we're passing in an integer to the

64
00:03:59.410 --> 00:04:00.270
function call.

65
00:04:00.280 --> 00:04:02.440
The compiler won't allow this.

66
00:04:02.440 --> 00:04:05.530
The third function call is within an output statement.

67
00:04:05.530 --> 00:04:07.200
Think about this one for a second.

68
00:04:07.210 --> 00:04:13.030
You're telling the compiler to display the value that say hello evaluates to but the function prototype

69
00:04:13.030 --> 00:04:16.060
says that the function say hello doesn't return anything.

70
00:04:16.210 --> 00:04:20.320
So the compiler gives you an error since something's not right.

71
00:04:20.800 --> 00:04:24.150
In this slide I'm providing the same code that you saw in the previous video.

72
00:04:24.280 --> 00:04:29.680
However in this example I'm providing function prototypes for the say hello say world's functions at

73
00:04:29.680 --> 00:04:31.670
the top of the file.

74
00:04:31.690 --> 00:04:36.610
Now the computer knows about these functions and I can call them in any order I wish in my program and

75
00:04:36.610 --> 00:04:39.330
the compiler will make sure that they're called as intended.

76
00:04:39.640 --> 00:04:47.200
Let's head over to the ID and prototype some functions OK I'm in the code like ID and I'm the section

77
00:04:47.200 --> 00:04:54.220
11 workspace in the function prototypes project what I'm going to do here is I'm going to take the sample

78
00:04:54.220 --> 00:04:59.620
that we did in the previous video where we calculate the area of a circle and the volume of a cylinder

79
00:04:59.620 --> 00:05:00.580
and so forth.

80
00:05:00.580 --> 00:05:04.120
And I'm going to rearrange these functions to actually break the program.

81
00:05:04.120 --> 00:05:09.250
Now this worked out because I was very careful about how I define these functions and where I defined

82
00:05:09.250 --> 00:05:10.210
these functions.

83
00:05:10.210 --> 00:05:17.140
So again the compiler is going straight down and reading the source file so it sees calque area defined

84
00:05:17.140 --> 00:05:23.240
here Kuchh area of a circle then it sees it used since it's already seen it defined it's happy about

85
00:05:23.240 --> 00:05:23.830
it.

86
00:05:24.010 --> 00:05:27.730
In this case it's the same thing it sees calque volume of a cylinder.

87
00:05:27.790 --> 00:05:29.380
I use it down here.

88
00:05:29.530 --> 00:05:30.950
It's happy about that.

89
00:05:30.970 --> 00:05:34.250
So everything it's seen before it's being used.

90
00:05:34.300 --> 00:05:40.810
But if I take some of this code let's say that I take all of this code actually right before my main

91
00:05:40.850 --> 00:05:42.540
and I just cut it.

92
00:05:42.760 --> 00:05:49.110
And I want to pace head after the main case and we've got some issues because the compiler is now seeing

93
00:05:49.110 --> 00:05:51.990
only clean up this white space a little bit.

94
00:05:51.990 --> 00:05:57.480
The compiler is now seeing area circle function being called but it hasn't seen the definition yet because

95
00:05:57.480 --> 00:05:59.970
it comes later that's going to cause an issue.

96
00:05:59.970 --> 00:06:01.820
Same thing with volume of a cylinder.

97
00:06:01.980 --> 00:06:03.750
So you're going to get issues here.

98
00:06:03.780 --> 00:06:06.840
So let me run this or compile it actually won't run.

99
00:06:06.840 --> 00:06:09.710
And there you go area the circle was not declared in the scope.

100
00:06:09.780 --> 00:06:13.940
So it has no idea what that functions all about because it hasn't seen it yet.

101
00:06:14.110 --> 00:06:14.960
OK.

102
00:06:15.030 --> 00:06:16.700
You're going to get two errors here.

103
00:06:16.860 --> 00:06:23.220
If we change the order and put this guy down here we're going to get even more errors because now we're

104
00:06:23.220 --> 00:06:25.420
using something before it's being seen.

105
00:06:25.430 --> 00:06:27.430
So now we're going to get probably three errors.

106
00:06:27.630 --> 00:06:28.290
Right.

107
00:06:28.320 --> 00:06:30.320
So that's a problem.

108
00:06:30.330 --> 00:06:34.040
How do we fix this problem well that's where function prototypes come in.

109
00:06:34.140 --> 00:06:37.430
So let's use function prototypes are really really easy to use.

110
00:06:37.440 --> 00:06:42.750
What I want to do is where every function that I'm defining I want to prototype it before I've defined

111
00:06:42.750 --> 00:06:43.000
it.

112
00:06:43.080 --> 00:06:47.690
So obviously at the beginning of the file it will do it right after the namespace statement.

113
00:06:47.700 --> 00:06:50.320
So let's look at this first one here.

114
00:06:50.430 --> 00:06:55.410
I'm just going to copy it and paste it because it basically that's what I want someone to put up right

115
00:06:55.410 --> 00:06:59.390
here and I'll just put a little comment here.

116
00:06:59.480 --> 00:07:00.400
You know what's going on

117
00:07:03.870 --> 00:07:05.910
here my function prototypes.

118
00:07:05.910 --> 00:07:09.720
Remember the function prototype is only the name of the function.

119
00:07:09.960 --> 00:07:15.180
And what it expects and what it returns with a semi-colon at the end right here no function body.

120
00:07:15.180 --> 00:07:22.200
So now the compiler sees that you've prototyped calc volume cylinder to expects to doubles and return

121
00:07:22.220 --> 00:07:24.170
doubles so we can type check that.

122
00:07:24.290 --> 00:07:24.920
OK.

123
00:07:25.140 --> 00:07:26.380
Let's deal with all of these.

124
00:07:26.460 --> 00:07:32.320
So let's do the next one which is my calculate area of the circle.

125
00:07:32.340 --> 00:07:35.610
Copy that up here and paste it.

126
00:07:35.670 --> 00:07:38.220
Put a semi-colon on the end.

127
00:07:38.220 --> 00:07:42.860
Now remember we don't need to have these variable names here and these parameter names.

128
00:07:42.990 --> 00:07:44.570
The compiler could care less.

129
00:07:44.590 --> 00:07:49.830
I'm going to get rid of this one just so you can see the compiler doesn't care all the compiler needs

130
00:07:49.830 --> 00:07:53.190
to know is what is the type of that parameter.

131
00:07:53.190 --> 00:07:54.890
So in this case double is fine.

132
00:07:54.960 --> 00:07:59.750
As I mentioned earlier best practice is to put the names in there for documentation purposes.

133
00:07:59.760 --> 00:08:03.300
But I'll leave it out here just so you can see that it actually does work just fine.

134
00:08:03.690 --> 00:08:05.070
So now we've got those too.

135
00:08:05.250 --> 00:08:09.390
Let's deal with area of the circle and then we'll deal with volume of the cylinder.

136
00:08:09.750 --> 00:08:12.040
So we'll put the circle right here.

137
00:08:12.210 --> 00:08:16.590
The order in which you put the prototypes in doesn't matter because the is going to see them all.

138
00:08:16.620 --> 00:08:18.270
So there's the area of the circle.

139
00:08:18.270 --> 00:08:21.500
Notice this returns nothing and expects nothing.

140
00:08:21.770 --> 00:08:28.850
OK and then we'll do the last one which is the volume of the cylinder so I come back up and I'll put

141
00:08:28.850 --> 00:08:32.120
that last prototype right in here.

142
00:08:32.120 --> 00:08:32.960
That's it.

143
00:08:32.960 --> 00:08:37.110
Now if I compile and run I'll get a clean run.

144
00:08:37.180 --> 00:08:42.290
So we'll put 12 and type in whatever numbers you like.

145
00:08:42.520 --> 00:08:44.380
So that's pretty cool.

146
00:08:44.380 --> 00:08:47.240
Makes it really easy to not have to worry about order.

147
00:08:47.350 --> 00:08:51.170
Oh my goodness you know what did I call this did I define this first.

148
00:08:51.610 --> 00:08:54.070
This was a problem in early languages.

149
00:08:54.400 --> 00:08:57.190
I remember using Pascal and there was just no way to get around this.

150
00:08:57.190 --> 00:09:01.630
Eventually they added something like forward declarations which really makes things handy.

151
00:09:01.660 --> 00:09:07.890
So this is just standard practice that C and C++ programmers use to create those function prototypes.

152
00:09:07.900 --> 00:09:15.220
Now what really is nice about this suppose it I mess up my function prototype and I tell the compiler

153
00:09:15.220 --> 00:09:21.250
that that area circle function that I'm going to define later this is the way you should check to make

154
00:09:21.250 --> 00:09:22.610
sure I use it correctly.

155
00:09:22.840 --> 00:09:26.530
Well I'm not using it correctly right there because I'm not passing an integer into it.

156
00:09:26.650 --> 00:09:28.270
So this won't compile.

157
00:09:28.330 --> 00:09:32.680
This will give me an error right here as is too few arguments to this function right here.

158
00:09:32.680 --> 00:09:36.270
So you've told it again remember it hasn't seen this one down here yet.

159
00:09:36.280 --> 00:09:37.500
Right.

160
00:09:37.750 --> 00:09:40.670
You've told it that that function will be used as in the prototype.

161
00:09:40.690 --> 00:09:43.240
And here you're not using it as in the prototype.

162
00:09:43.450 --> 00:09:45.130
And so I mean get rid of that.

163
00:09:45.190 --> 00:09:51.370
Also if I send in let's say 5 into here before I write again this is not going to match you've just

164
00:09:51.370 --> 00:09:54.290
told it that this function here expects nothing.

165
00:09:54.430 --> 00:09:55.960
But now you passed in an int..

166
00:09:55.960 --> 00:09:59.790
So again it's not going to like that it's going to say too many arguments.

167
00:09:59.790 --> 00:10:04.200
Now to the function call so let's clean that up.

168
00:10:04.450 --> 00:10:06.220
And that's really all there is to prototypes.

169
00:10:06.220 --> 00:10:12.550
Now normally as you programs get larger these prototypes will end up going in a different file in a

170
00:10:12.850 --> 00:10:16.650
h file and we'll get to dot h files or header files our own header files.

171
00:10:16.810 --> 00:10:22.330
When we talk about classes because that's very common to create two pieces of the program.

172
00:10:22.420 --> 00:10:26.820
One is the header information and one is the actual implementation.

173
00:10:26.860 --> 00:10:29.680
Very similar to what's going on here with IO stream.

174
00:10:29.680 --> 00:10:31.530
Those are really considered header files.

175
00:10:31.660 --> 00:10:36.250
So you're going to grab a lot of information from there and that's usually where we put our function

176
00:10:36.250 --> 00:10:36.840
prototypes.

177
00:10:36.850 --> 00:10:38.320
But there you go.

178
00:10:38.350 --> 00:10:44.410
Let me run this again and make sure it's clean got a clean run here so I'll leave this code out there

179
00:10:44.410 --> 00:10:47.590
for you to play with as well get used to these function prototypes.

180
00:10:47.590 --> 00:10:51.080
We do them all the time and it will really make your code better.

181
00:10:51.190 --> 00:10:53.500
Let the compiler help you every chance he gets.
