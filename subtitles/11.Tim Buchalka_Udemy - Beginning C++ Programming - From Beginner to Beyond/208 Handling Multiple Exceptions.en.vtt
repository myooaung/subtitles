WEBVTT
1
00:00:05.350 --> 00:00:09.360
In this video we'll see how we can throw and catch multiple exceptions.

2
00:00:10.770 --> 00:00:13.630
Suppose we have a function such as the one in this slide.

3
00:00:13.770 --> 00:00:18.360
The function is called calculate miles per gallon and it expects a number of miles and the number of

4
00:00:18.360 --> 00:00:19.690
gallons is parameters.

5
00:00:19.830 --> 00:00:23.270
And it just simply divides miles by gallons and returns the result.

6
00:00:23.720 --> 00:00:28.190
This function will fail if the number of gallons is zero because we'd have a divide by zero error.

7
00:00:28.200 --> 00:00:30.140
That's what we did in the previous video.

8
00:00:30.600 --> 00:00:36.290
But it would also produce incorrect results if either miles or gallons is negative.

9
00:00:36.460 --> 00:00:42.090
In this case we can check for both of these situations and throw a different exception for each case.

10
00:00:42.100 --> 00:00:43.750
Let's see how we can write this function.

11
00:00:43.750 --> 00:00:48.180
So it does just that the code is pretty much what you would expect.

12
00:00:48.240 --> 00:00:53.080
We check if gallons is 0 and if it is we throw in a teacher zero exception.

13
00:00:53.100 --> 00:00:56.070
We also check if either miles or gallons are negative.

14
00:00:56.100 --> 00:01:01.580
And if they are we throw a stood string object initialized to the string negative value air.

15
00:01:02.430 --> 00:01:05.650
Otherwise we simply perform the division and return the result.

16
00:01:05.910 --> 00:01:07.940
Let's see how we would call this function.

17
00:01:07.980 --> 00:01:13.530
Notice in the try block we're calling calculate mpg and that function may or may not throw an exception

18
00:01:14.280 --> 00:01:18.730
if it does not then we simply assign the result of the function two miles per gallon.

19
00:01:18.750 --> 00:01:23.000
Display it and then we display by at the end of the program and we're done.

20
00:01:23.040 --> 00:01:26.820
However what if calculate miles per gallon does throw an exception.

21
00:01:26.850 --> 00:01:33.990
Remember it could throw an INT or a stood staring so we create to catch handlers one for each exception

22
00:01:33.990 --> 00:01:37.900
type and we write our exception handling code in the catch box.

23
00:01:38.580 --> 00:01:42.690
If an exception is thrown then one of these catch handlers will handle it.

24
00:01:42.690 --> 00:01:47.580
If we don't handle a particular exception type here then C poster posts will terminate this function

25
00:01:47.850 --> 00:01:54.600
and proceed up the call stack looking for a handler until it finds one or the program terminates.

26
00:01:54.600 --> 00:02:00.960
It's also possible to have a catch all handler this catch handler will fire no matter what type of exception

27
00:02:00.960 --> 00:02:01.910
is thrown.

28
00:02:02.010 --> 00:02:07.050
If this is used it's common to place it as the last of your catch blocks since it really serves to catch

29
00:02:07.050 --> 00:02:09.080
anything that wasn't handled before.

30
00:02:09.090 --> 00:02:12.800
Notice the three dots are ellipsis in the catch all parameter list.

31
00:02:12.960 --> 00:02:17.670
You don't have access to the exception object thrown in this case but you can deal with the exception

32
00:02:17.670 --> 00:02:20.070
in the body of the catch all Block.

33
00:02:20.070 --> 00:02:26.120
Now let's head over to the ID and we'll rewrite that calculate miles per gallon to throw multiple exceptions.

34
00:02:27.370 --> 00:02:33.940
OK so I mean the Kotler idea in the Section 18 workspace and I mean the MPG function multiple exceptions

35
00:02:33.950 --> 00:02:40.650
project what we've got is the same calculate mpg function that it's simply throwing an exception when

36
00:02:40.650 --> 00:02:46.290
gallons was 0 and what we want to do is we want to extend this a little bit so that will also throw

37
00:02:46.290 --> 00:02:51.270
a different exception when Miles or gallons is less than zero.

38
00:02:51.670 --> 00:02:57.120
OK so right now we've got it throwing 0 if gallons is zero and we can simply add another check that

39
00:02:57.120 --> 00:03:08.010
says if Miles is less than zero or gallons is less than zero then we want to throw an exception here.

40
00:03:08.010 --> 00:03:11.340
Now it can't be another integer we're already throwing an integer type.

41
00:03:11.340 --> 00:03:14.100
So in this case I simply want to throw a std string

42
00:03:17.980 --> 00:03:25.440
and I'll just initialize it to something like negative value error or something like that.

43
00:03:25.690 --> 00:03:29.170
And that might include string appear.

44
00:03:30.790 --> 00:03:31.210
That's it.

45
00:03:31.210 --> 00:03:35.740
So in this case if we're getting in a division by zero error right here with gallons equals zero I'm

46
00:03:35.740 --> 00:03:36.960
throwing the integer.

47
00:03:37.090 --> 00:03:40.760
In this case if I've got an illegal negative value I'm just going to throw a.

48
00:03:40.810 --> 00:03:44.770
String that's been initialized to that string negative value air.

49
00:03:44.890 --> 00:03:45.320
That's it.

50
00:03:45.320 --> 00:03:50.500
Now down here if I run this now and throw a string it's going to terminate right because I'm not catching

51
00:03:50.500 --> 00:03:51.210
a string.

52
00:03:51.220 --> 00:03:56.010
So what I need to do down here is add another catch handler for that stood string.

53
00:03:56.320 --> 00:04:02.530
So I can add that right down here and I can say I'm catching a string by reference we can call it anything

54
00:04:02.530 --> 00:04:02.930
we like.

55
00:04:02.930 --> 00:04:05.930
I just I always call them X for exception.

56
00:04:05.980 --> 00:04:08.870
A lot of people call them e whatever you like.

57
00:04:08.890 --> 00:04:10.320
It's just a variable name.

58
00:04:10.540 --> 00:04:14.980
And in this case I'm going to display two standard error.

59
00:04:16.030 --> 00:04:20.420
The actual exception which is a string so I don't really have to type anything here for the for the

60
00:04:20.500 --> 00:04:25.740
string it's just going to display that string value that's in that exception object.

61
00:04:25.930 --> 00:04:27.040
That's it.

62
00:04:27.040 --> 00:04:28.110
So let's try this.

63
00:04:28.180 --> 00:04:36.930
Let's run it and let's do something like 120 divided by zero which gives us the try to divide by zero

64
00:04:36.960 --> 00:04:37.820
error.

65
00:04:37.950 --> 00:04:39.260
And now we've got to buy.

66
00:04:39.270 --> 00:04:40.610
So that's correct.

67
00:04:40.620 --> 00:04:48.180
And now let's try to throw on negative So let's say negative 1 and 123 negative value error just like

68
00:04:48.180 --> 00:04:49.210
we expected.

69
00:04:49.500 --> 00:04:54.900
And we'll test it with negative 1 for gallons or negative anything actually.

70
00:04:55.120 --> 00:04:57.080
There's your negative value there.

71
00:04:57.330 --> 00:04:58.110
That's it.

72
00:04:58.110 --> 00:04:59.090
Simple as that.

73
00:04:59.130 --> 00:05:04.380
So you can see here we're throwing multiple exception types and down here we're catching multiple exception

74
00:05:04.380 --> 00:05:05.130
types.

75
00:05:05.130 --> 00:05:10.260
Now if I had to catch all hÃ¤ndler here if I didn't have this handler right here and I simply had a catch

76
00:05:12.540 --> 00:05:18.480
something like this with the ellipsis and not have this string here then that would certainly catch

77
00:05:18.480 --> 00:05:19.140
the string.

78
00:05:19.140 --> 00:05:22.230
I just wouldn't have access to the object that's all.

79
00:05:23.130 --> 00:05:23.450
OK.

80
00:05:23.460 --> 00:05:24.540
So that's it for this video.

81
00:05:24.540 --> 00:05:25.370
See you in the next video.
