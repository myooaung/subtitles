1
00:00:05,390 --> 00:00:09,550
In this video we'll learn about function overloading in C++.

2
00:00:09,560 --> 00:00:13,820
We can have functions with different parameter lists that have the same name.

3
00:00:13,970 --> 00:00:19,630
For example I may have many ways to display information to the screen depending on what I want to display.

4
00:00:19,670 --> 00:00:25,310
So rather than having many functions with different names such as display char display and display double

5
00:00:25,310 --> 00:00:31,130
and so forth we can have a single name display and then implement a version of the function for each

6
00:00:31,130 --> 00:00:32,650
type of parameter.

7
00:00:32,750 --> 00:00:37,370
Then we just let the compiler figure out which function to use based on the function call arguments

8
00:00:37,640 --> 00:00:40,450
and the defined function parameters.

9
00:00:40,460 --> 00:00:44,600
It sounds more complicated than it is and we'll see an example in the next slide that I'll show you

10
00:00:44,600 --> 00:00:46,340
just how simple it is.

11
00:00:46,370 --> 00:00:49,870
This is a great use of abstraction since as a developer.

12
00:00:49,910 --> 00:00:54,080
All I need to think is display and pass in whatever information I need.

13
00:00:54,110 --> 00:00:59,710
I don't have to keep track of dozens of different function names in software engineering.

14
00:00:59,710 --> 00:01:04,870
We have a principle called polymorphism which means many forms for the same concept.

15
00:01:04,880 --> 00:01:07,470
This is an example of polymorphism.

16
00:01:07,550 --> 00:01:09,570
Let's see what overloaded functions look like.

17
00:01:12,420 --> 00:01:17,460
In this example we have two functions that are both called add numbers.

18
00:01:17,460 --> 00:01:22,270
The first function expects to integers and the second function expects to doubles.

19
00:01:22,950 --> 00:01:27,660
I'm only showing the function prototypes in this slide but we actually have to implement both functions.

20
00:01:27,660 --> 00:01:29,640
I'll do that in the next line.

21
00:01:29,640 --> 00:01:30,640
Notice that in main.

22
00:01:30,690 --> 00:01:34,450
I'm calling both functions but I don't have to think about different names.

23
00:01:34,470 --> 00:01:36,510
I just want to add two numbers.

24
00:01:36,750 --> 00:01:43,350
If I call add numbers with two integers then the int into version of the function is called If I call

25
00:01:43,350 --> 00:01:50,030
add numbers with two doubles then the double double version of the function is called In this light

26
00:01:50,060 --> 00:01:54,350
I'm providing the function definitions for the add numbers functions that we prototyped in the previous

27
00:01:54,350 --> 00:01:55,270
slide.

28
00:01:55,310 --> 00:01:59,600
It's important to understand that we must implement all of the overloaded versions.

29
00:01:59,600 --> 00:02:03,970
Notice that the code for these two functions is nearly identical except for the types.

30
00:02:04,100 --> 00:02:09,740
C++ has a feature called function templates that allow us to just write one generic version of the add

31
00:02:09,740 --> 00:02:15,140
numbers function and it will take care of providing the correct version when called function templates

32
00:02:15,140 --> 00:02:20,380
are a little bit more advanced topic and we'll discuss it when we talk about the standard template library.

33
00:02:20,390 --> 00:02:21,820
Let's take a look at another example.

34
00:02:24,060 --> 00:02:29,760
In this example only show the function prototypes but remember that you'd have to implement all of these.

35
00:02:29,870 --> 00:02:32,010
I have five functions named display.

36
00:02:32,180 --> 00:02:36,640
The parameter lists for these functions must be different so the compiler can tell them apart.

37
00:02:37,010 --> 00:02:41,240
Once these functions are implemented I can call display and pass in my data.

38
00:02:41,240 --> 00:02:45,800
The compiler will check the type of the argument in the function and match it to one of the available

39
00:02:45,800 --> 00:02:47,900
overloaded display functions.

40
00:02:47,900 --> 00:02:52,910
If it can't match it or if it can't convert the argument to one that matches then we get a compiler

41
00:02:52,910 --> 00:02:53,380
error.

42
00:02:56,660 --> 00:03:01,790
There is one restriction to function overloading the return type is not considered when the compiler

43
00:03:01,790 --> 00:03:04,670
is trying to determine which function to call.

44
00:03:04,670 --> 00:03:10,640
So here we have two overloaded functions both called Get value and both expect no parameters.

45
00:03:10,640 --> 00:03:14,140
The only difference is that one returns an integer and the other a double.

46
00:03:14,270 --> 00:03:18,630
This will produce a compiler error since the only difference is the return type.

47
00:03:18,740 --> 00:03:21,390
Consider the output statement at the bottom of the slide.

48
00:03:21,560 --> 00:03:25,670
Which function would the compiler call it could call either and that's the problem.

49
00:03:25,670 --> 00:03:31,950
It won't guess so to produce a compiler error overloading functions is used extensively in Object-Oriented

50
00:03:32,030 --> 00:03:37,550
Design and we'll see it again when we design our own C++ Object-Oriented classes.

51
00:03:37,680 --> 00:03:45,470
I mean the code like ID in the section 11 workspace and M&amp;A function overloading project here it just

52
00:03:45,470 --> 00:03:48,050
want to go through some examples of overloading of function.

53
00:03:48,050 --> 00:03:54,480
Remember overloading a function simply means using the same name for various forms of that same function.

54
00:03:54,500 --> 00:03:59,270
In this case it's print and what I want to do is don't want to overload print to work with different

55
00:03:59,270 --> 00:04:02,320
types so you can see some of the function prototypes here.

56
00:04:02,630 --> 00:04:07,340
In this case I've got an inch version of print so if I pass in an integer to print it will use this

57
00:04:07,340 --> 00:04:13,730
version of the function one that expects a double one that expects a C++ string object one that expects

58
00:04:13,730 --> 00:04:18,480
to see plus String objects and the last one expects a vector of string objects.

59
00:04:18,580 --> 00:04:22,760
OK remember we have to implement each one of these and that's what I'm doing here.

60
00:04:22,760 --> 00:04:27,170
I'm just saying printing and printing double so that we know which one is being called.

61
00:04:27,170 --> 00:04:32,690
So in the case of print it is simply says printing integer and it displays the number for double it's

62
00:04:32,690 --> 00:04:35,110
doing the same thing string and so forth.

63
00:04:35,220 --> 00:04:39,740
OK and then for the vector version it's just iterating through the vector and pretty up all the strings

64
00:04:39,740 --> 00:04:41,900
in the vector.

65
00:04:41,900 --> 00:04:43,340
So let's see how this works.

66
00:04:43,460 --> 00:04:48,820
In this first case I'm simply calling print in a passing in 100 not 100 as an integer.

67
00:04:48,980 --> 00:04:54,290
So I expect that this integer version of print is the one that's going to be called and it'll say printing

68
00:04:54,290 --> 00:04:54,750
it.

69
00:04:54,860 --> 00:04:56,520
OK so let's give that a try.

70
00:04:59,150 --> 00:05:02,530
Printing it 100 exactly what we expected.

71
00:05:03,020 --> 00:05:07,090
In this version I'm passing in a character now.

72
00:05:07,100 --> 00:05:09,600
Characters are always promoted to integers.

73
00:05:09,620 --> 00:05:14,720
So in this case it's going to call the same function that expects an integer but it's not going to print

74
00:05:14,720 --> 00:05:15,560
out the character.

75
00:05:15,650 --> 00:05:21,500
It's going to print out 65 which is the ASCII code for a member it's using integers here.

76
00:05:21,530 --> 00:05:22,760
So let's run that.

77
00:05:23,420 --> 00:05:28,330
And there you see it says printing integer and it's Partita 65.

78
00:05:28,340 --> 00:05:33,470
In this case I'll come in both of these out in this case we're going to use the doubled version which

79
00:05:33,470 --> 00:05:38,030
is this version right up here print expecting a double and is just going to say printing double and

80
00:05:38,030 --> 00:05:39,870
display the number that was passed in.

81
00:05:39,890 --> 00:05:43,680
So in the first example I'm passing in 120 3.5.

82
00:05:43,810 --> 00:05:44,460
No problem.

83
00:05:44,460 --> 00:05:48,120
One twenty three point five is a double so they should match perfectly.

84
00:05:48,140 --> 00:05:52,880
However in the second example that f right there makes this a fluke not a double.

85
00:05:52,880 --> 00:05:58,310
So in this case I'm passing a float to the function but there is no overloaded function that expects

86
00:05:58,310 --> 00:05:59,080
a float.

87
00:05:59,090 --> 00:06:05,270
So what the compiler does is it will promote the float to a double it'll match that function and call

88
00:06:05,270 --> 00:06:05,500
it.

89
00:06:05,600 --> 00:06:08,990
So both these statements will use that same function.

90
00:06:09,080 --> 00:06:10,360
Let's run that.

91
00:06:10,730 --> 00:06:13,430
And you can see here one twenty three point five.

92
00:06:13,520 --> 00:06:17,810
And in this case one twenty three point three.

93
00:06:17,850 --> 00:06:22,120
OK so what about C-style strings.

94
00:06:22,550 --> 00:06:23,750
Let me uncomment that out.

95
00:06:23,750 --> 00:06:29,600
Remember we've got a version of print right here that expects a string object and it simply prints out

96
00:06:29,600 --> 00:06:31,090
that string object.

97
00:06:31,520 --> 00:06:36,920
However I'm not passing in a string object here and passing in a C-style string an array of characters

98
00:06:37,490 --> 00:06:40,100
that does not match that function prototype.

99
00:06:40,370 --> 00:06:47,660
But the C++ compiler knows how to convert a C-style string write an array of characters to a C++ string

100
00:06:47,720 --> 00:06:48,410
object.

101
00:06:48,470 --> 00:06:52,710
So we'll use that conversion and it'll pass in the literal.

102
00:06:52,710 --> 00:06:55,470
Make it an object and then we're going to display the object.

103
00:06:55,520 --> 00:07:01,290
So if we run it you'll see you'll see a printing string C style string.

104
00:07:01,610 --> 00:07:02,990
Ok exactly what we expect.

105
00:07:02,990 --> 00:07:08,480
Once you understand how the conversions work it all makes a lot of sense in this next example.

106
00:07:08,960 --> 00:07:12,700
I'm declaring right here s to be a string object.

107
00:07:12,710 --> 00:07:14,750
This is not a C A C style string.

108
00:07:14,750 --> 00:07:21,380
This is a C++ style string object and I'm passing it into print that's going to match exactly and print

109
00:07:21,380 --> 00:07:23,780
out C++ string.

110
00:07:23,810 --> 00:07:31,150
All right in misprints statement here we're passing in a C-style string and a string object both.

111
00:07:31,160 --> 00:07:35,200
Now we've got a version of a print function that expects to string objects.

112
00:07:35,220 --> 00:07:36,420
Well no problem right.

113
00:07:36,500 --> 00:07:42,260
We'll convert the first argument to a string object and then pass the second one as well.

114
00:07:42,260 --> 00:07:47,000
So in this case when I run it you'll see that that same printing to strings method is called with a

115
00:07:47,000 --> 00:07:49,370
C-style string and a C++ string.

116
00:07:49,370 --> 00:07:51,470
Ok pretty cool.

117
00:07:51,470 --> 00:07:57,950
And then the last one is this vector here I'm creating a vector called Three Stooges which is a vector

118
00:07:57,950 --> 00:08:03,050
of string objects and we've got Larry Moe and Curly in there and I'm calling the print function in passing

119
00:08:03,050 --> 00:08:04,080
and three stooges.

120
00:08:04,100 --> 00:08:08,350
So it's going to match this one right here that expects a vector of strings.

121
00:08:08,630 --> 00:08:12,620
And I'm just going to iterate through there and print out the three stooges names of the three strings

122
00:08:12,620 --> 00:08:14,270
in that particular vector.

123
00:08:14,270 --> 00:08:18,050
OK so I'll run it and there you go.

124
00:08:18,050 --> 00:08:19,520
Pretty vector of strings there.

125
00:08:19,520 --> 00:08:20,350
Moe and Curly.

126
00:08:20,390 --> 00:08:24,860
So you could see how nice it is to be able to overload functions the nice part about it isn't so much

127
00:08:24,860 --> 00:08:27,760
all the code that I've written that's that's not that great.

128
00:08:27,830 --> 00:08:32,020
The nice part about it is once the code is written I can just think print.

129
00:08:32,240 --> 00:08:37,520
So if I'm solving an application I'm printing Print Print Print and printing everywhere I'm not doing.

130
00:08:37,520 --> 00:08:42,740
You know I don't have to do print int and print string and so forth I'm just thinking in print which

131
00:08:42,740 --> 00:08:45,670
is what abstraction is all about.

132
00:08:45,680 --> 00:08:49,580
Now there's some couple of things you need to worry about when you're overloading functions.

133
00:08:49,610 --> 00:08:53,390
Be careful when you overload functions and you use default arguments.

134
00:08:53,390 --> 00:08:54,770
Ok I'll show you why.

135
00:08:54,770 --> 00:08:58,170
Here's an example of the print with the integer version.

136
00:08:58,220 --> 00:09:02,060
I could certainly default this to 100 let's say.

137
00:09:02,120 --> 00:09:07,110
So if I don't supply the argument to the print function it's going to default to 100.

138
00:09:07,280 --> 00:09:10,490
And let's test that out we'll do it right up here.

139
00:09:10,800 --> 00:09:15,020
OK so at this point now we should get 100 here and then 100 on the next line as well right.

140
00:09:15,260 --> 00:09:18,690
So let's run that and you can see there's the hundred.

141
00:09:18,800 --> 00:09:22,520
That's the default argument right there that makes sense.

142
00:09:22,640 --> 00:09:28,210
But what about if we didn't do that and we did it down here in the print double.

143
00:09:28,430 --> 00:09:29,630
Let's say that we wanted default.

144
00:09:29,630 --> 00:09:33,670
This went to 125 point five.

145
00:09:33,670 --> 00:09:41,570
Now when I call print here it will default to one twenty five point five because it's up here right

146
00:09:41,630 --> 00:09:43,750
there that's when it's going to match rank.

147
00:09:43,820 --> 00:09:48,330
So there's the 125 point five in the double version it's called again.

148
00:09:48,350 --> 00:09:54,570
Makes sense where you run into trouble is when you do both see you do something like that.

149
00:09:54,590 --> 00:09:59,240
Now you really are in trouble because the compiler can't figure out which one to use.

150
00:09:59,240 --> 00:10:01,480
Again look at the print call right here.

151
00:10:01,550 --> 00:10:05,850
It says print but it doesn't supply any type information.

152
00:10:05,870 --> 00:10:10,520
So now the compiler can choose either one because they both match and it's not going to choose either

153
00:10:10,520 --> 00:10:12,160
and he may give you a compiler error.

154
00:10:12,440 --> 00:10:17,810
And when I write it say something about an ambiguous call right here error or call of overloaded print

155
00:10:17,870 --> 00:10:18,870
is ambiguous.

156
00:10:18,920 --> 00:10:23,990
So whenever you use overloaded functions with default arguments you've got to be a little careful.

157
00:10:24,040 --> 00:10:29,600
So get rid of that and I'll set those back up to the way they were.

158
00:10:29,940 --> 00:10:35,420
OK so that covers overloaded functions we're going to see overloaded functions a lot when we talk about

159
00:10:35,900 --> 00:10:40,880
object orientation and when we create our own classes we want to have different ways to initialize our

160
00:10:40,880 --> 00:10:42,020
classes.

161
00:10:42,020 --> 00:10:46,250
You saw that with the Vector class in the String class all the different ways that we can create those

162
00:10:46,250 --> 00:10:46,950
objects.

163
00:10:47,090 --> 00:10:49,640
Well that's all based on overloading functions.
