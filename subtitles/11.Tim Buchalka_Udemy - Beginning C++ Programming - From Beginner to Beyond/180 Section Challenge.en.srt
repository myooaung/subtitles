1
00:00:05,370 --> 00:00:06,090
Hello everyone.

2
00:00:06,090 --> 00:00:08,640
Welcome to the section 15 challenge.

3
00:00:08,640 --> 00:00:10,530
That's the inheritance challenge.

4
00:00:10,530 --> 00:00:13,220
This is a very challenging challenge.

5
00:00:13,230 --> 00:00:15,710
You're no longer beginning C++ programmers.

6
00:00:15,720 --> 00:00:17,030
That's for sure.

7
00:00:17,040 --> 00:00:22,080
This challenge involves extending a class hierarchy by adding a few more classes and I'll talk about

8
00:00:22,080 --> 00:00:24,030
them in just a second.

9
00:00:24,060 --> 00:00:29,160
And it also involves understanding someone else's code which is you know something that happens in real

10
00:00:29,160 --> 00:00:33,480
life or actually more often than not you're modifying someone else's code.

11
00:00:33,510 --> 00:00:36,370
We don't write our own code from scratch very often out there.

12
00:00:36,510 --> 00:00:40,800
So this is part of the challenge before you attempt this challenge.

13
00:00:40,800 --> 00:00:46,350
Watch the video previous to this video where I go over the classes that are in this project I go over

14
00:00:46,350 --> 00:00:49,950
the account class and the savings account classes in detail.

15
00:00:49,950 --> 00:00:55,310
If you haven't done that I encourage you to do so now and then come back and give the challenge a shot.

16
00:00:55,320 --> 00:00:58,660
So let me go over the challenge and tell you what's involved.

17
00:00:58,710 --> 00:01:03,580
First of all I'm in the section 15 workspace in the challenge project.

18
00:01:03,630 --> 00:01:05,300
This is your starting point.

19
00:01:05,340 --> 00:01:10,240
This has an account class and a savings account class that's derived from the account class.

20
00:01:10,560 --> 00:01:11,400
Everything's working.

21
00:01:11,400 --> 00:01:14,820
The tests are there the utility functions there and so forth.

22
00:01:14,820 --> 00:01:20,400
So you're provided with these two classes as I mentioned here your provider of the Account class and

23
00:01:20,400 --> 00:01:21,820
the savings account class.

24
00:01:21,980 --> 00:01:25,780
The Savings Account class is an account so we're using Puplick inheritance.

25
00:01:25,800 --> 00:01:30,330
So in this case we have an account that has a name and a balance and then the savings account is an

26
00:01:30,330 --> 00:01:32,880
account and it adds an interest rate.

27
00:01:32,880 --> 00:01:38,100
And as I mentioned watch the previous video and you'll get a good understanding of exactly how the deposit

28
00:01:38,430 --> 00:01:41,010
method works and the withdraw methods work and so forth.

29
00:01:41,020 --> 00:01:47,250
Also I created some account helper functions in the utile header and CBP files that make it easier to

30
00:01:47,250 --> 00:01:52,890
display deposit to them withdraw funds from a vector of accounts and savings accounts.

31
00:01:52,950 --> 00:01:56,150
And that's what I'm using in the main driver just to make it a little easier.

32
00:01:56,280 --> 00:02:01,390
Otherwise your main gets really really convoluted and you're always checking for was this a successful

33
00:02:01,410 --> 00:02:03,600
deposit or was this a successful withdrawal.

34
00:02:03,720 --> 00:02:05,710
And the code just gets really nasty to follow.

35
00:02:05,790 --> 00:02:07,680
So what's this challenge about.

36
00:02:07,860 --> 00:02:09,740
Let me just scroll up just a little bit.

37
00:02:09,990 --> 00:02:16,590
And so this challenges we're going to add two classes to this hierarchy.

38
00:02:16,590 --> 00:02:22,620
The first class you see right here it's a checking account class and we want to add that to the inheritance

39
00:02:22,620 --> 00:02:23,160
hierarchy.

40
00:02:23,160 --> 00:02:27,480
So we want this to be a derived class of either account or savings account.

41
00:02:27,480 --> 00:02:33,810
You decide a checking account has a name and a balance and it has a fee of a dollar 50 per withdrawal

42
00:02:33,810 --> 00:02:34,980
transaction.

43
00:02:35,340 --> 00:02:41,700
So every time we do a withdrawal we're going to assess a dollar fifty flat fee the trust account is

44
00:02:41,700 --> 00:02:42,310
the other account.

45
00:02:42,330 --> 00:02:44,360
I want you to add to the hierarchy.

46
00:02:44,400 --> 00:02:49,500
And again you decide whether it belongs under account or under savings or under checking account.

47
00:02:49,650 --> 00:02:52,420
And for that matter is the checking account under a trust account.

48
00:02:52,530 --> 00:02:55,200
So you figure out what the hierarchy is it's pretty straightforward.

49
00:02:55,200 --> 00:02:57,340
I think once you sit down and think about it.

50
00:02:57,390 --> 00:03:03,450
So a trust account has a name a balance and an interest rate but the trust account deposit works just

51
00:03:03,450 --> 00:03:05,110
like the savings account deposit.

52
00:03:05,130 --> 00:03:12,520
Except when we've got deposits that are five thousand dollars or more we'll get a $50 bonus by the bank

53
00:03:13,560 --> 00:03:16,940
the trust account withdrawal is also different.

54
00:03:16,950 --> 00:03:22,830
It only allows three withdrawals per year and each of these must be less than 20 percent of the account

55
00:03:22,830 --> 00:03:23,980
balance.

56
00:03:24,030 --> 00:03:26,130
You don't have to keep track of calendar time.

57
00:03:26,130 --> 00:03:27,090
As I mentioned here.

58
00:03:27,120 --> 00:03:30,520
So just make it fail on the fourth attempt to withdraw.

59
00:03:30,510 --> 00:03:32,530
Sorry a change that should be withdrawn.

60
00:03:32,630 --> 00:03:35,000
Fixed that in the spec.

61
00:03:35,460 --> 00:03:37,690
So the fourth withdrawal will fail.

62
00:03:37,710 --> 00:03:38,830
So what are some hints.

63
00:03:38,880 --> 00:03:41,800
Well reuse existing functionality.

64
00:03:41,800 --> 00:03:43,620
That's the whole idea behind inheritance right.

65
00:03:43,620 --> 00:03:45,240
It's all about reusability.

66
00:03:45,240 --> 00:03:51,400
So don't reinvent the wheel don't duplicate code reuse as much as you can.

67
00:03:51,660 --> 00:03:56,740
Think about what the base class will be for each of these new classes that we're going to add.

68
00:03:56,890 --> 00:04:01,020
Also I've created those helper functions in the account Udal file.

69
00:04:01,170 --> 00:04:05,650
You may want to add the trustee account and checking current versions to them.

70
00:04:05,730 --> 00:04:07,110
I would recommend that you do that.

71
00:04:07,110 --> 00:04:11,490
That just makes it much easier to use these things in the main but you don't have to.

72
00:04:11,490 --> 00:04:15,960
You can just test these in the main it's up to you as always have fun.

73
00:04:16,050 --> 00:04:19,920
You're no longer beginner C++ programmers that's for sure.

74
00:04:19,920 --> 00:04:25,840
Once we delve into the world of inheritance this is no longer beginning C++ is more intermediate C++

75
00:04:25,870 --> 00:04:30,990
So congratulations that you made it this far in the course and the last thing is if you want more practice

76
00:04:30,990 --> 00:04:36,150
with operator overloading you can overload the plus equal in the minus equals so that they do deposit

77
00:04:36,150 --> 00:04:38,580
and withdrawal which can be handy.

78
00:04:39,090 --> 00:04:40,830
OK so that's it.

79
00:04:41,040 --> 00:04:44,700
I'll be back in the next video with my solution but give this a shot.

80
00:04:44,700 --> 00:04:47,820
And as I said Don't get frustrated with this.

81
00:04:47,830 --> 00:04:49,890
This is not an easy challenge.

82
00:04:49,890 --> 00:04:51,240
There's a lot going on here.

83
00:04:51,480 --> 00:04:57,090
And just take it one step at a time do one class at a time implement one method at a time test as you

84
00:04:57,090 --> 00:04:57,610
go.

85
00:04:57,750 --> 00:04:59,910
And before you know it you've got a great solution.

86
00:04:59,910 --> 00:05:00,160
All right.

87
00:05:00,180 --> 00:05:02,300
So good luck and I'll see you on the next video.
