1
00:00:05,560 --> 00:00:10,650
So at this point you may be wondering how we can allocate an entire array of integers and store address

2
00:00:10,660 --> 00:00:12,140
into a pointer to an image.

3
00:00:12,580 --> 00:00:17,260
That's a good question and it's critical that you understand the relationship between arrays and pointers

4
00:00:17,260 --> 00:00:19,480
and C++.

5
00:00:19,600 --> 00:00:24,550
Remember that the value of an array name is the location or the address of the first element of the

6
00:00:24,550 --> 00:00:27,860
array and the value of a pointer is an address.

7
00:00:27,880 --> 00:00:33,250
So if a pointer points to the same type of data as the array elements then the pointer in the array

8
00:00:33,250 --> 00:00:36,560
name are the same as far as C++ is concerned.

9
00:00:36,940 --> 00:00:40,780
The only difference is that the array name is not a variable so you can't change it.

10
00:00:40,810 --> 00:00:46,090
But otherwise all the calculations done to access array elements can be done with the array name or

11
00:00:46,150 --> 00:00:49,730
the pointer name.

12
00:00:49,810 --> 00:00:53,500
In this example we have scores as an array of three integers.

13
00:00:53,500 --> 00:00:59,170
If you display scores then the value of the array name is the address of the first element of the array.

14
00:00:59,170 --> 00:01:01,300
What if I dereference scores.

15
00:01:01,300 --> 00:01:02,710
Wait a minute score's is an array.

16
00:01:02,710 --> 00:01:07,910
How can I dereference that sure score's is the address of the first array element.

17
00:01:07,910 --> 00:01:12,540
So if I go to that address which is what dereferencing is I get the integer.

18
00:01:12,610 --> 00:01:18,040
So the output statement for dereferencing score's displays 100 the first array element.

19
00:01:18,040 --> 00:01:23,630
Now if I declare a score pointer is a pointer to an integer and I initialize it discourse.

20
00:01:23,650 --> 00:01:27,340
Notice that the value of score pointer is the same as scores.

21
00:01:27,670 --> 00:01:30,780
So when I dereference score pointer we get the same results.

22
00:01:30,820 --> 00:01:36,930
The value of the element at that location which is 100 in this case I know this can be a bit confusing.

23
00:01:36,980 --> 00:01:41,500
And when we head over to the idea I'll try it out visually so you can see exactly what's happening.

24
00:01:43,910 --> 00:01:49,070
So if we can pretty much use an array name and appointer name interchangeably that means we should be

25
00:01:49,070 --> 00:01:51,670
able to use arrays subscripting on a pointer right.

26
00:01:51,950 --> 00:01:56,840
And that's absolutely correct if score pointer points to the first element of the score's array as it

27
00:01:56,840 --> 00:01:58,360
does in this example.

28
00:01:58,460 --> 00:02:04,460
Then when we display score pointer Sub-Zero we get 100 score points or so of one is ninety five score

29
00:02:04,460 --> 00:02:06,240
points or Step two is 89.

30
00:02:06,260 --> 00:02:07,490
That's weird right.

31
00:02:07,490 --> 00:02:12,530
Well not really if you understand the C++ doesn't really have two arrays and that arrays are just the

32
00:02:12,530 --> 00:02:15,370
address of the first element in a chunk of memory.

33
00:02:15,470 --> 00:02:17,120
Then this makes sense.

34
00:02:17,180 --> 00:02:21,530
So does that mean that we can add the offset to the pointer variable then we can make a point to any

35
00:02:21,530 --> 00:02:22,330
array element.

36
00:02:22,430 --> 00:02:23,780
And again yes it does.

37
00:02:23,780 --> 00:02:28,330
Let me show you how we're using the same example here.

38
00:02:28,330 --> 00:02:30,400
Notice that we display score pointer.

39
00:02:30,430 --> 00:02:36,000
We get back in address if we add one to score pointer then you can see that the value of score pointer

40
00:02:36,010 --> 00:02:39,000
has increased by four not by 1.

41
00:02:39,010 --> 00:02:39,560
Why.

42
00:02:39,670 --> 00:02:44,320
Because we're not adding one to the pointer value we're adding the size of one integer to the pointer

43
00:02:44,320 --> 00:02:49,080
value the pointer doesn't hold integers and holds addresses of integers.

44
00:02:49,150 --> 00:02:54,280
So when we add one we're adding the address of the next integer which is 4 bytes away.

45
00:02:54,490 --> 00:02:58,940
If we add two we increment score pointer by 8 which is two integers away.

46
00:02:58,990 --> 00:03:02,990
This is the basis of pointer arithmetic which we'll talk about in the next video.

47
00:03:03,520 --> 00:03:08,410
Once we have scored pointer pointed to the image that we want we can simply dereference the pointer

48
00:03:08,410 --> 00:03:09,580
to get to the integer.

49
00:03:09,580 --> 00:03:10,850
Let me show you how that works.

50
00:03:12,290 --> 00:03:15,880
Here's the same example except that I'm dereferencing the expression.

51
00:03:16,100 --> 00:03:21,440
Notice that how we follow the pointer and display the integer that we point to in this case we're moving

52
00:03:21,440 --> 00:03:23,240
along the array using the pointer.

53
00:03:23,240 --> 00:03:24,320
That's pretty cool.

54
00:03:24,680 --> 00:03:27,130
Let's see this altogether so it makes more sense.

55
00:03:29,530 --> 00:03:33,370
This table shows the equivalence between arrays and pointers.

56
00:03:33,370 --> 00:03:39,670
Notice that we can access array elements using array subscript or pointers subscript notation using

57
00:03:39,670 --> 00:03:43,240
either the name of the array or the name of the pointer.

58
00:03:43,240 --> 00:03:47,640
You can also see we can use array offset or pointer offset notation.

59
00:03:47,650 --> 00:03:51,040
Also using the array name where the pointer name.

60
00:03:51,040 --> 00:03:55,720
Take your time with this and that can be confusing but when it clicks you'll be able to easily understand

61
00:03:55,720 --> 00:03:58,350
more advanced memory allocation principles.

62
00:03:58,660 --> 00:03:59,790
Let's head over to the idea.

63
00:03:59,800 --> 00:04:03,100
What over some of the examples in his video.

64
00:04:03,110 --> 00:04:08,570
OK so I'm in the IDM in the section 12 workspace in the arrays and pointers project.

65
00:04:08,570 --> 00:04:13,310
I've gone ahead and written some code that uses array subscript notation pointers subscript notation

66
00:04:13,790 --> 00:04:19,250
pointer offset notation and array offset notation just so that we can walk through this he can really

67
00:04:19,250 --> 00:04:23,820
understand the equivalence of pointers and arrays and C++.

68
00:04:23,870 --> 00:04:25,160
So let's get started here.

69
00:04:25,160 --> 00:04:31,910
First of all I've created a score scores array of integers right here and I initialize it to 195 in

70
00:04:31,970 --> 00:04:36,230
89 and that's it over here in this little box over here so this is 100.

71
00:04:36,230 --> 00:04:41,600
This is 95 and this is 89 and it scores.

72
00:04:41,800 --> 00:04:46,740
And let's assume that this is at location 1000.

73
00:04:46,830 --> 00:04:52,010
So what that means is that this integer 100 is at location 1000.

74
00:04:52,080 --> 00:04:58,340
This integer 95 is that location 1004 assuming that we've got 4 byte integers which I do on my machine

75
00:04:59,070 --> 00:05:03,390
and this 89 is at location 1 0 0 0 0 8 in memory.

76
00:05:03,910 --> 00:05:11,390
OK we know they contiguous because it's an array perfect so when we display scores here the name of

77
00:05:11,390 --> 00:05:15,050
an array is the address of the first element in the array.

78
00:05:15,050 --> 00:05:16,790
So in this case it's a thousand.

79
00:05:16,790 --> 00:05:23,300
So we expect this to print a thousand Obviously when I run this on my machine I'm going to get a different

80
00:05:23,300 --> 00:05:25,140
value but that's OK.

81
00:05:25,250 --> 00:05:29,700
Now I've created another variable right here called Score pointer.

82
00:05:29,920 --> 00:05:38,150
So don't put this guy I'm going to put him right here score pointer and score pointer we're assigning

83
00:05:38,150 --> 00:05:45,200
to score points or scores scores is the array name which is the address of the first element in the

84
00:05:45,200 --> 00:05:45,830
array.

85
00:05:45,890 --> 00:05:48,850
So score pointer was have 1000 in it right now.

86
00:05:49,340 --> 00:05:50,910
And there's my pointer.

87
00:05:51,170 --> 00:05:56,930
There's no need to put the ampersand here and percent score since the score the name of the array already

88
00:05:56,930 --> 00:05:58,550
is an address.

89
00:05:58,610 --> 00:06:03,090
So now we print out the value of score points while it's a thousand.

90
00:06:03,090 --> 00:06:09,780
So these two values will print the same because they are the same the name of the array and we just

91
00:06:09,780 --> 00:06:15,080
store the name of the array which is the address in two score points.

92
00:06:15,360 --> 00:06:18,150
So now let's do array subscript notation.

93
00:06:18,210 --> 00:06:22,200
This is what we've been doing all along scores is an array so scores Sub-Zero.

94
00:06:22,200 --> 00:06:24,390
Now look look at what the compiler is doing here.

95
00:06:24,390 --> 00:06:32,310
The computer saying scores Sub-Zero is really 1000 right.

96
00:06:32,310 --> 00:06:37,240
That's what scores is plus 1 0 integers away.

97
00:06:37,260 --> 00:06:38,820
So that's going to be a thousand.

98
00:06:38,940 --> 00:06:43,410
So it's going to grab whatever is that location of 0 0 0 0 0 and display it which is in this case 100

99
00:06:45,520 --> 00:06:47,030
What about score someone.

100
00:06:47,200 --> 00:06:54,170
So in the case of score someone it's going to have scores again which is a thousand and it's going to

101
00:06:54,170 --> 00:06:59,060
go one away from that and it's not going to be a thousand One it's going to be one integer away from

102
00:06:59,060 --> 00:07:02,300
it because it knows it's horse is an array of integers.

103
00:07:02,450 --> 00:07:09,080
So in this case it's going to be a thousand four so it's going to go to 1000 for it sees the 95 and

104
00:07:09,080 --> 00:07:16,340
displays that then the same thing with score Sabtu would display the 89 K that's using a raise subscript

105
00:07:16,340 --> 00:07:17,270
notation.

106
00:07:17,270 --> 00:07:20,720
Now take a look at pointer's subscript notation is exactly the same.

107
00:07:20,720 --> 00:07:25,740
The only difference is that I replaced scores with score pointer right.

108
00:07:25,820 --> 00:07:29,110
Therefore we've got pointer and subscript.

109
00:07:29,150 --> 00:07:39,420
So again score pointer Sub-Zero what is score pointer a thousand.

110
00:07:39,450 --> 00:07:44,420
In this case right it's right here plus 0 away.

111
00:07:44,420 --> 00:07:53,230
So it's going to go to location 1000 and grab what's there which is going to be 100 the one we use subscript

112
00:07:53,230 --> 00:07:56,860
notation we're basically grabbing what's at that address.

113
00:07:56,860 --> 00:07:58,450
Same thing with score points.

114
00:07:58,450 --> 00:08:04,080
So one it's going to go to 1000 plus one integer away which is a thousand four.

115
00:08:04,330 --> 00:08:05,940
And there's the 95.

116
00:08:06,070 --> 00:08:09,070
And here's the 89 OK.

117
00:08:09,130 --> 00:08:10,200
So hopefully that makes sense.

118
00:08:10,200 --> 00:08:14,220
Now here we've got pointer offset notation.

119
00:08:14,220 --> 00:08:17,220
We don't have any square brackets so we're using the offset.

120
00:08:17,240 --> 00:08:19,200
Now let's start right here.

121
00:08:19,230 --> 00:08:24,940
What happens if I dereference score pointer follow the pointer to where it's pointing score points is

122
00:08:24,960 --> 00:08:29,540
a thousand I'm going to dereference it which means I'm going to go to that location here.

123
00:08:30,030 --> 00:08:31,250
And what do I do.

124
00:08:31,320 --> 00:08:34,570
I display 100.

125
00:08:34,770 --> 00:08:37,230
Now what about this line right here let's go with that one carefully.

126
00:08:37,260 --> 00:08:41,810
When it's say score pointer plus 1.

127
00:08:41,810 --> 00:08:44,810
Now notice the parentheses and then dereference.

128
00:08:44,900 --> 00:08:45,850
So what happens first.

129
00:08:45,860 --> 00:08:47,360
What's in the parentheses.

130
00:08:47,360 --> 00:08:49,310
What's score pointer 1 0 0 0 0.

131
00:08:49,350 --> 00:08:50,870
And it hasn't changed.

132
00:08:50,870 --> 00:08:52,670
Plus 1 What.

133
00:08:52,670 --> 00:08:56,870
Plus one whatever score pointer is pointing to integer in this case.

134
00:08:56,880 --> 00:09:05,290
So 1004 I'm dereferencing 1004 which means I'm going to 1004 for getting what's there.

135
00:09:05,460 --> 00:09:07,720
That's the 95.

136
00:09:07,950 --> 00:09:14,500
Same thing here I'm going to 1000 eight and getting what's there which is the 89 so there's pointer

137
00:09:14,540 --> 00:09:15,390
offset.

138
00:09:15,490 --> 00:09:18,080
And then the last one is a re offset.

139
00:09:18,080 --> 00:09:19,790
Notice here I'm using scores.

140
00:09:19,820 --> 00:09:21,330
Well what does an array name.

141
00:09:21,380 --> 00:09:24,560
Well an array name is the address of the first element in the array.

142
00:09:24,560 --> 00:09:25,010
Right.

143
00:09:25,220 --> 00:09:30,890
So the reference scores is the same as saying scores of 0 here.

144
00:09:30,900 --> 00:09:35,180
So in this case score's is a thousand Sigma to 1000 and grab what's there.

145
00:09:35,370 --> 00:09:37,730
Display 100.

146
00:09:37,950 --> 00:09:47,130
Here we've got scores plus one dereferenced right what scores the name of the array is the value of

147
00:09:47,400 --> 00:09:54,070
the address of that first element right there a thousand plus for right them dereferencing that again.

148
00:09:54,090 --> 00:09:57,600
You can see it's exactly like what we did with pointer offset.

149
00:09:57,780 --> 00:10:00,920
So we've got 95 and 89.

150
00:10:01,170 --> 00:10:06,720
So the output from this program is going to be exactly the same array subscript pointer subscript pointer

151
00:10:06,720 --> 00:10:11,610
offset an array offset their equivalent as far as C++ is concerned.

152
00:10:11,610 --> 00:10:12,890
Now why is this important.

153
00:10:13,110 --> 00:10:18,930
This is important too because when we allocate arrays dynamically on the heap we can we have to be able

154
00:10:18,930 --> 00:10:23,040
to walk them right use them display them change them do whatever we like with them.

155
00:10:23,190 --> 00:10:29,760
Well we have a pointer to them and that's what we got back when we used that storage that pointer to

156
00:10:29,760 --> 00:10:30,680
that array.

157
00:10:31,550 --> 00:10:35,200
It's going to be a pointer so we could use pointer subscript notation if we want.

158
00:10:35,300 --> 00:10:37,930
We could use pointer offset notation if we want.

159
00:10:38,030 --> 00:10:38,720
Right.

160
00:10:38,720 --> 00:10:44,630
Either one we can use and we'll be able to get to that array and the array elements really really easily.

161
00:10:44,630 --> 00:10:51,380
All right so let me run this and we'll be sure that we get the correct values and you can see here this

162
00:10:51,380 --> 00:10:59,270
is the important piece the value of scores is that Hex address right there and the value of score pointer

163
00:10:59,270 --> 00:11:02,210
is the same hex address.

164
00:11:02,210 --> 00:11:08,780
Makes sense right because we assign scores to score appointer and scores is the address of that first

165
00:11:08,900 --> 00:11:10,530
element in that array 100.

166
00:11:11,730 --> 00:11:15,960
Then we go through array subscript notation we print out one hundred ninety five eighty nine you can

167
00:11:15,960 --> 00:11:22,250
see pointer subscript pointer offset an array offset it's all exactly the same thing.

168
00:11:22,350 --> 00:11:24,820
Take your time understand this walk through it.

169
00:11:24,840 --> 00:11:28,650
Play around with it you know change a few things if you like.

170
00:11:28,730 --> 00:11:35,430
It's really important once you understand the equivalence of arrays and pointers in C++ it really opens

171
00:11:35,430 --> 00:11:36,640
up the world of power.
