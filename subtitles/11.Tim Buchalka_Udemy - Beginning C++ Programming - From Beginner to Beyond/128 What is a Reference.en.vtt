WEBVTT
1
00:00:05.360 --> 00:00:07.710
In this video we'll learn more about references.

2
00:00:07.850 --> 00:00:12.560
We've already seen how useful references can be when used as function parameters.

3
00:00:12.590 --> 00:00:17.420
We learned about them in the function section of the course although a reference may sound similar to

4
00:00:17.420 --> 00:00:17.900
a point.

5
00:00:17.900 --> 00:00:19.740
They're actually very different.

6
00:00:19.760 --> 00:00:21.990
A reference is an alias for a variable.

7
00:00:22.100 --> 00:00:26.560
So whenever you use the reference you're actually using the variable it refers to.

8
00:00:26.900 --> 00:00:32.460
References must always be initialized to a variable when you declare them and that can never be null.

9
00:00:32.510 --> 00:00:35.140
Once you initialize a reference you can't change.

10
00:00:35.150 --> 00:00:37.440
So that's an alias for a different variable.

11
00:00:37.820 --> 00:00:42.290
As mentioned earlier references are great to use as function parameters.

12
00:00:42.290 --> 00:00:47.930
When you first start out in C++ you might find it useful to think of a reference as a constant pointer

13
00:00:47.950 --> 00:00:51.050
that's automatically dereferenced when you use it.

14
00:00:51.290 --> 00:00:54.030
We've already seen using references as function parameters.

15
00:00:54.080 --> 00:00:55.450
So let's see some other uses

16
00:00:58.120 --> 00:01:04.630
references are often used in range based for loops to access collection elements inside each iteration.

17
00:01:04.630 --> 00:01:08.620
Here's an example of arr. base for loop that does not use references.

18
00:01:08.830 --> 00:01:14.590
In this case we have a vector of C++ string object's name Stooges and it's initialized to Larry Moe

19
00:01:14.590 --> 00:01:15.930
and Curly.

20
00:01:15.940 --> 00:01:21.610
Then we use a range based for loop to iterate through the vector at each iteration we assign funny to

21
00:01:21.610 --> 00:01:23.380
each vector element.

22
00:01:23.380 --> 00:01:28.200
Then we have another range base for loop that displays the contents of the Stooges vector.

23
00:01:28.210 --> 00:01:29.320
Notice the output.

24
00:01:29.320 --> 00:01:30.520
Nothing changed.

25
00:01:30.520 --> 00:01:35.200
We didn't change the vector at all even though we assigned funny to each element in the loop.

26
00:01:35.200 --> 00:01:36.280
So what's going on.

27
00:01:36.340 --> 00:01:41.560
The problem is that the variable name in the first loop is a copy for each of the vector elements as

28
00:01:41.560 --> 00:01:42.970
we loop through them.

29
00:01:42.970 --> 00:01:48.280
So we're setting the copy to funny but we're never changing the actual elements in the vector.

30
00:01:48.280 --> 00:01:53.280
Now let's see how we can use references to actually change the vector elements.

31
00:01:53.390 --> 00:01:59.240
Here we have the same example except that the two are variable in the first loop is now a reference.

32
00:01:59.240 --> 00:02:06.750
In this case a reference to each of the C++ string object's now is is an alias for those objects.

33
00:02:06.900 --> 00:02:11.770
And when we assign funny to us here we're actually changing the vector elements.

34
00:02:11.880 --> 00:02:16.380
You can see now that when we display the vector the elements in the vector have all indeed changed to

35
00:02:16.380 --> 00:02:19.690
funny.

36
00:02:19.700 --> 00:02:24.440
Notice what happens if we add the Konst qualifier to the loop variable in the first loop.

37
00:02:24.860 --> 00:02:30.410
Now we're preventing any change to the data in the vector because the compiler marks it as read only.

38
00:02:30.500 --> 00:02:32.750
So this code now gives us a compiler error.

39
00:02:32.750 --> 00:02:37.340
This is not what we want since we really do want to modify the vector elements but you can see that

40
00:02:37.340 --> 00:02:40.100
the compiler is doing exactly what you're asking it to do.

41
00:02:40.130 --> 00:02:45.050
It makes sense for us to use the cost qualifier in the second loop the loop that actually displays the

42
00:02:45.050 --> 00:02:46.760
vector elements.

43
00:02:46.760 --> 00:02:52.250
Also by using a reference we're not incurring the costs of copying each vector element in each loop

44
00:02:52.250 --> 00:02:54.380
iteration.

45
00:02:54.440 --> 00:02:59.600
So in this case it makes sense to use the cons qualifier for the reference as TR in the loop when we're

46
00:02:59.600 --> 00:03:01.490
displaying the vector elements.

47
00:03:01.490 --> 00:03:04.460
So any attempt to change them would probably be a mistake.

48
00:03:04.520 --> 00:03:09.500
So we can have the compiler help us out by making the reference Konst now any attempt to change the

49
00:03:09.500 --> 00:03:11.880
vector element results in a compiler error.

50
00:03:12.110 --> 00:03:17.240
Unless you have a specific reason to copy elements in range base for loops you should use reference

51
00:03:17.240 --> 00:03:19.470
variables to make your code more efficient.

52
00:03:19.870 --> 00:03:25.720
And if you are going to modify the collection elements make the reference Konst rather than go over

53
00:03:25.720 --> 00:03:29.400
everything we already covered regarding using references as function parameters.

54
00:03:29.470 --> 00:03:34.840
Please refer to the section 11 videos and examples where I go over the use of reference parameters in

55
00:03:34.840 --> 00:03:40.180
functions in detail we'll head over to the ID now and see some of these examples in life code.

56
00:03:40.900 --> 00:03:47.250
Ok so I'm in the IDM in the section 12 workspace and the references project and this is about as simple

57
00:03:47.250 --> 00:03:50.830
and examples I can come up with for references.

58
00:03:50.830 --> 00:03:55.460
So here I've got an integer called numb and I'm initializing it to 100.

59
00:03:55.960 --> 00:03:59.810
And I've got a reference called ref that I'm initializing it to numb.

60
00:03:59.950 --> 00:04:02.000
So ref is an alias too.

61
00:04:02.130 --> 00:04:04.740
So if I display numb I'm going to get 100.

62
00:04:04.900 --> 00:04:11.200
If I display ref I'm going to get 100 there aliases were in this case the reference is an alias to the

63
00:04:11.200 --> 00:04:11.830
name.

64
00:04:12.130 --> 00:04:12.910
OK.

65
00:04:12.910 --> 00:04:17.590
So notice no dereferencing no nothing just use it straight as is.

66
00:04:17.620 --> 00:04:20.460
And it's automatically going to be dereference behind the scenes.

67
00:04:20.470 --> 00:04:21.710
It's basically a pointer.

68
00:04:21.710 --> 00:04:22.630
That's how it's implemented.

69
00:04:22.630 --> 00:04:26.240
Behind the scenes but all that's been abstracted away for you.

70
00:04:26.260 --> 00:04:32.200
So in this case here I'm changing numb to 200 so I'm going straight to the variable and changing it

71
00:04:32.200 --> 00:04:33.100
to 200.

72
00:04:33.130 --> 00:04:37.930
So when I display name I'm going to get two hundred and one to splay the reference is an alias to the

73
00:04:37.930 --> 00:04:41.360
number again I'm going to get 200 here.

74
00:04:41.410 --> 00:04:44.380
I'm changing but I'm changing it through the reference.

75
00:04:44.380 --> 00:04:46.740
So I'm setting it to 300 again.

76
00:04:47.040 --> 00:04:49.850
There alias's So that's what you get.

77
00:04:49.900 --> 00:04:52.500
Hopefully that's pretty easy to understand I think.

78
00:04:52.540 --> 00:04:53.730
Now let's do another example.

79
00:04:53.730 --> 00:04:56.440
That's based on the example that I did on the slides.

80
00:04:56.470 --> 00:04:59.210
But before we do that let's run this.

81
00:04:59.260 --> 00:05:06.520
So I build and run and you can see 100 100 200 200 300 300 just what we expected.

82
00:05:06.540 --> 00:05:11.740
OK so now let's do an example of using reference parameters inside range based for loops just like we

83
00:05:11.740 --> 00:05:12.940
did in the slides.

84
00:05:12.940 --> 00:05:20.020
So let me clear that and I'll scroll up just a little bit and uncomment out this code right here.

85
00:05:20.730 --> 00:05:23.780
And this is the code that worked on the vector of strings.

86
00:05:23.910 --> 00:05:24.810
So here's where we're at.

87
00:05:24.810 --> 00:05:31.290
We've got a vector of string objects right here on line 29 called Stooges and we're initializing it

88
00:05:31.300 --> 00:05:33.010
to Larry Moe and Curly.

89
00:05:33.300 --> 00:05:35.180
Then I've got a based for loop.

90
00:05:35.190 --> 00:05:40.550
Now I remember the auto lets the compiler figure out what the type of s t r is.

91
00:05:40.710 --> 00:05:45.680
In this case the collection of stooges and it's a vector of strings so as TR will be a string at each

92
00:05:45.680 --> 00:05:49.820
generation and then what we're doing is we're saying it's funny.

93
00:05:49.860 --> 00:05:55.010
So the idea is that or the what the programmer intended to do was to change.

94
00:05:55.080 --> 00:05:57.370
Larry Moe and Curly too funny funny funny.

95
00:05:57.410 --> 00:05:57.660
OK.

96
00:05:57.680 --> 00:05:58.930
But it doesn't work.

97
00:05:58.950 --> 00:06:03.040
The reason it doesn't work is because as TR is a copy.

98
00:06:03.180 --> 00:06:08.880
So each time in we're making a copy of lairy a copy of Moe and a copy of Kerley so sure we're changing

99
00:06:08.880 --> 00:06:13.080
the copy to funny but we're not changing any of these actuals to funny.

100
00:06:13.080 --> 00:06:18.300
So what we can do is and if you notice we have a simple loop here that just displays them and when we

101
00:06:18.300 --> 00:06:21.770
run this in a second you'll see that this will display Larry Moe and Curly.

102
00:06:21.890 --> 00:06:25.010
OK so no changes at all just like we saw in the slides.

103
00:06:26.330 --> 00:06:31.130
In this next example what we're doing is we're using a reference here you can see the ampersand.

104
00:06:31.490 --> 00:06:37.210
So each iteration of the loop as TR will be a reference to the actual.

105
00:06:37.430 --> 00:06:43.850
So now that as TR is going to be an alias for each one of these guys at each iteration of the loop.

106
00:06:43.940 --> 00:06:50.170
So when we say ESR's funny now we're really replacing Larry Moe and Curly with funny funny funny.

107
00:06:50.180 --> 00:06:52.400
So we come over here and display.

108
00:06:52.400 --> 00:06:54.550
We're going to see funny funny funny.

109
00:06:54.980 --> 00:06:55.430
OK.

110
00:06:55.550 --> 00:07:02.480
So we'll run that in a second but the other thing we wanted to say was in this example here I'm displaying

111
00:07:02.750 --> 00:07:05.990
those three string objects that are in the vector.

112
00:07:06.710 --> 00:07:09.400
But in this case are making copies of them.

113
00:07:09.560 --> 00:07:14.000
There's no danger in changing them right because I've got a copy of them so if I do change them like

114
00:07:14.000 --> 00:07:18.260
I did here I'm changing the copy but I'm making copies.

115
00:07:18.290 --> 00:07:20.640
So that's pretty inefficient in this case.

116
00:07:20.750 --> 00:07:27.740
String objects are pretty efficient but it could be some user defined type where making a copy of it

117
00:07:27.740 --> 00:07:28.880
could be pretty expensive.

118
00:07:28.880 --> 00:07:33.110
You know you're allocating space and you're making a copy let's say a couple hundred thousand bytes

119
00:07:33.110 --> 00:07:33.750
or something.

120
00:07:33.920 --> 00:07:36.810
So it could be very very expensive operation.

121
00:07:36.980 --> 00:07:44.200
In this case we want to pass that in by reference like we're doing here and but the danger with that

122
00:07:44.200 --> 00:07:47.860
is that now we can change the elements right which we don't want.

123
00:07:47.890 --> 00:07:50.340
So that's why we use the cost.

124
00:07:50.410 --> 00:07:54.830
So this gives us the protection of making those elements Read-Only.

125
00:07:55.000 --> 00:07:57.940
But it also allows them not to be copied.

126
00:07:57.940 --> 00:08:03.130
In this case we're just going to create aliases to them so very efficient and pretty safe because we

127
00:08:03.130 --> 00:08:04.440
can't change them.

128
00:08:04.660 --> 00:08:05.980
OK so hopefully that makes sense.

129
00:08:05.980 --> 00:08:09.050
Let me run this real quick.

130
00:08:10.180 --> 00:08:15.030
And you could see the first time through and I've moved this slightly over here we've got there are

131
00:08:15.100 --> 00:08:16.170
Larry Moe and Curly.

132
00:08:16.170 --> 00:08:18.160
So we didn't change a thing we expected.

133
00:08:18.160 --> 00:08:19.040
Funny funny funny.

134
00:08:19.060 --> 00:08:21.000
We got Larry Moe and Curly.

135
00:08:21.250 --> 00:08:23.170
Now we're using a reference.

136
00:08:23.170 --> 00:08:27.920
We do indeed change the actual So now we see funny funny funny.

137
00:08:27.930 --> 00:08:29.970
OK so give it a try.

138
00:08:29.970 --> 00:08:30.990
Play around with these.

139
00:08:30.990 --> 00:08:35.060
Try to create a reference to a pointer and see if you can figure out how that works.

140
00:08:35.070 --> 00:08:35.300
All right.

141
00:08:35.320 --> 00:08:41.040
So that's pretty much it for references remember I covered how to use reference parameters and how to

142
00:08:41.040 --> 00:08:43.880
pass references to functions in Section 11.

143
00:08:43.890 --> 00:08:49.210
There's a whole section there on using reference parameters and when you use constant so forth.

144
00:08:49.260 --> 00:08:50.460
So I'll see you in the next video.
