WEBVTT
1
00:00:05.450 --> 00:00:11.530
In this video we'll learn a little bit more about classes and objects you can think of classes as blueprints

2
00:00:11.530 --> 00:00:15.850
from which objects are created classes or user defined types.

3
00:00:15.910 --> 00:00:20.890
And one of the goals in Object-Oriented Programming is to make the user defined types feel like they're

4
00:00:20.890 --> 00:00:22.950
part of the programming language.

5
00:00:23.020 --> 00:00:27.910
So when we create our classes we want to be able to use them just like we use integers doubles and so

6
00:00:27.910 --> 00:00:28.600
forth.

7
00:00:28.600 --> 00:00:35.130
Easy and simple classes have attributes which are data and they also have functions which are called

8
00:00:35.130 --> 00:00:38.600
methods as mentioned in the previous videos.

9
00:00:38.720 --> 00:00:43.440
Classes can hide data and methods that are only used internally by the class.

10
00:00:43.550 --> 00:00:47.750
This is done using the private and public access modifiers.

11
00:00:47.750 --> 00:00:53.450
The goal of the class is to provide a well-defined public interface that the user of the class can easily

12
00:00:53.450 --> 00:00:54.900
use to solve the problem.

13
00:00:55.790 --> 00:00:56.750
Here's an example.

14
00:00:56.790 --> 00:01:01.800
Classes account employee image standard vector and standard string.

15
00:01:01.940 --> 00:01:05.300
These are all classes that modeled real world entities.

16
00:01:05.300 --> 00:01:11.510
Vector unstring are part of the C++ standard library account employee and image might be classes that

17
00:01:11.510 --> 00:01:13.580
we would create in our applications.

18
00:01:15.400 --> 00:01:18.380
Ok so now that we know what a class is what's an object.

19
00:01:18.580 --> 00:01:24.310
Well objects are created from classes and represent a specific instance of the class they're created

20
00:01:24.310 --> 00:01:25.150
from.

21
00:01:25.150 --> 00:01:28.950
So if I have an account class I can create a Franke's account object.

22
00:01:29.110 --> 00:01:34.860
That's a specific instance of an account that models Franke's account information.

23
00:01:35.110 --> 00:01:39.780
We can have as many objects as we need if we're remodeling a real banking application.

24
00:01:39.880 --> 00:01:45.070
We could have hundreds of thousands of account objects each representing an individual instance of an

25
00:01:45.070 --> 00:01:52.290
account each object has its own identity and each can use the methods defined in the class.

26
00:01:52.300 --> 00:01:57.450
Let's see an example we know that ints and doubles are primitive types in C++.

27
00:01:57.580 --> 00:02:04.030
They're not classes but this anality will help make a point in the first two lines we define two integers

28
00:02:04.150 --> 00:02:05.910
high score and low score.

29
00:02:05.920 --> 00:02:06.940
What does that tell us.

30
00:02:07.060 --> 00:02:10.770
Well it tells us what the valid values are for those variables.

31
00:02:11.080 --> 00:02:16.360
And it also tells us the operations we can perform on the variables for example addition subtraction

32
00:02:16.510 --> 00:02:18.500
multiplication and so forth.

33
00:02:18.820 --> 00:02:22.230
Again integers are not classes but just for a moment.

34
00:02:22.240 --> 00:02:25.840
Think of it as the class and low score and high scores.

35
00:02:25.840 --> 00:02:33.080
Objects created from the in-class notice that low score and high score are instances of integer.

36
00:02:33.080 --> 00:02:36.410
They each have a value and they each have an identity.

37
00:02:36.410 --> 00:02:37.980
Now look at the next two lines.

38
00:02:38.180 --> 00:02:43.480
Let's assume that we've already written the account class and it's a true C++ class.

39
00:02:43.490 --> 00:02:47.670
Notice the syntax and how similar it is to the syntax for the integers above.

40
00:02:48.520 --> 00:02:50.880
Account is a user defined type.

41
00:02:50.940 --> 00:02:55.740
So Frank account and Jim account are instances of the Account class.

42
00:02:55.740 --> 00:02:57.540
They are objects.

43
00:02:57.540 --> 00:03:01.470
Each of these objects has an identity and values associated with them.

44
00:03:01.470 --> 00:03:06.820
Just like high and low score did this should look familiar since we've already been using objects all

45
00:03:06.820 --> 00:03:13.250
along the last two lines create a score's object that's an instance of a vector of integers and a name

46
00:03:13.250 --> 00:03:15.590
object that's an instance of string.

47
00:03:16.160 --> 00:03:20.900
Ok so now that we know a little bit more about classes and objects let's see how we can declare a class

48
00:03:20.930 --> 00:03:22.940
in C++ in the next video.
