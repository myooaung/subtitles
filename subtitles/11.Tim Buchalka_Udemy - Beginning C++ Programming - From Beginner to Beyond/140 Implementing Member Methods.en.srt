1
00:00:05,500 --> 00:00:10,580
In this video we'll learn about how to implement member methods in our C++ classes.

2
00:00:10,580 --> 00:00:15,800
You'll be glad to hear that class methods are implemented in a manner very similar to the way we implemented

3
00:00:15,800 --> 00:00:16,790
functions.

4
00:00:16,790 --> 00:00:19,660
But I'd say that are generally less complex.

5
00:00:19,700 --> 00:00:23,660
This is because member methods have access to the classes member attributes.

6
00:00:23,780 --> 00:00:29,900
So we don't have to pass so many arguments around C++ gives you many options regarding where to write

7
00:00:29,900 --> 00:00:31,630
code for member methods.

8
00:00:31,730 --> 00:00:35,390
You can define the member methods right inside the class declaration.

9
00:00:35,450 --> 00:00:38,970
If you do this then the methods become implicitly in line.

10
00:00:39,170 --> 00:00:44,990
While this is OK for small and relatively simple methods we tend to implement larger more complex methods

11
00:00:45,320 --> 00:00:49,300
outside of the class declaration in order to do so.

12
00:00:49,370 --> 00:00:54,710
We need to tell the compiler that we're implementing a method that belongs to a specific class so we

13
00:00:54,710 --> 00:00:59,630
use the class name followed by the scope resolution operator and then the method name.

14
00:00:59,960 --> 00:01:06,500
This unambiguously tells the compiler that you are implementing a method for a specific class in C++.

15
00:01:06,500 --> 00:01:12,740
It's also very common to separate classes specification from its implementation.

16
00:01:12,740 --> 00:01:15,310
This makes the class much easier to manage.

17
00:01:15,320 --> 00:01:22,250
We usually create a header or include file that has a dot H or dot HP extension for the class specification

18
00:01:22,520 --> 00:01:27,020
and then a separate data file for the class implementation.

19
00:01:27,020 --> 00:01:31,340
First let's look at implementing methods inside the class declaration.

20
00:01:32,940 --> 00:01:36,240
In this example we're declaring an account class.

21
00:01:36,240 --> 00:01:41,130
Notice that the account class has a private double named balance and two public methods.

22
00:01:41,220 --> 00:01:48,210
Set balance and get balance set balance sets the balance to the value passed in by the user and get

23
00:01:48,210 --> 00:01:51,300
balance returns a copy of the account balance.

24
00:01:51,300 --> 00:01:56,610
These public methods are necessary to access the balances the balance is private.

25
00:01:56,610 --> 00:02:02,160
Notice the syntax is exactly as it was for defining regular C++ functions.

26
00:02:02,160 --> 00:02:07,860
Also notice that the public methods have direct access to the private ballots because they're members

27
00:02:07,860 --> 00:02:09,840
of the same class.

28
00:02:09,840 --> 00:02:13,830
Now let's see how we would implement these methods outside the class declaration.

29
00:02:14,980 --> 00:02:20,500
In this example we're defining the set balance and get balance methods outside the class declaration

30
00:02:21,460 --> 00:02:26,440
inside the class declaration we simply provide the method prototype or declaration.

31
00:02:26,440 --> 00:02:31,080
This tells the compiler the name of the methods the parameters they expect them with return type.

32
00:02:32,120 --> 00:02:35,830
The compiler can then type check the method implementation when it sees them.

33
00:02:36,290 --> 00:02:41,420
In order for the compiler to know that these methods belong to the account class we have to prefix the

34
00:02:41,420 --> 00:02:46,160
method names with a count followed by the scope resolution operator.

35
00:02:46,190 --> 00:02:48,770
Then we implement the method as we normally would.

36
00:02:48,890 --> 00:02:53,810
In this case the compiler knows that the two method implementations are for the method declarations

37
00:02:53,840 --> 00:03:00,230
in the account class we provided as our programs get larger we really want a separate class specification

38
00:03:00,470 --> 00:03:03,190
and class implementation of two different files.

39
00:03:03,200 --> 00:03:05,900
Let's see the sample of how we can do that.

40
00:03:06,230 --> 00:03:08,980
In this example we create a file named account.

41
00:03:09,080 --> 00:03:10,090
H.

42
00:03:10,100 --> 00:03:16,580
This is an include or header file that will pass and include in our data files whenever we need to use

43
00:03:16,580 --> 00:03:18,320
the account class.

44
00:03:18,320 --> 00:03:25,010
Notice that in this file we provide the specification for the account class before we can use or poun

45
00:03:25,010 --> 00:03:27,380
include this account that H header file.

46
00:03:27,380 --> 00:03:29,930
We need to take care of a potential problem.

47
00:03:30,080 --> 00:03:36,470
If this file is included by more than one C.P. file then the compiler will see the declaration for the

48
00:03:36,470 --> 00:03:43,150
account class more than once and give us an error about duplicate declarations in order to solve this.

49
00:03:43,160 --> 00:03:48,920
We can use what's called an include guard that ensures that the compiler will process this file only

50
00:03:48,920 --> 00:03:49,540
once.

51
00:03:49,550 --> 00:03:53,500
No matter how many times it's included an include guard.

52
00:03:53,500 --> 00:03:59,720
It's just a series of preprocessor directives that guarantees the file will only be included Once the

53
00:03:59,720 --> 00:04:04,790
way it works is we wrap up our entire class declaration in this include guard.

54
00:04:04,790 --> 00:04:06,560
The first line is pounde.

55
00:04:06,590 --> 00:04:12,180
If not defined underscore account underscore h underscore it all in uppercase.

56
00:04:12,260 --> 00:04:17,810
This checks to see if the preprocessor has a symbol named underscore account underscore H.

57
00:04:17,840 --> 00:04:21,090
Underscore this symbol name can be anything you want.

58
00:04:21,170 --> 00:04:27,060
But best practice is to use some sort of combination of the file name in uppercase with preceding and

59
00:04:27,060 --> 00:04:28,760
ending underscores.

60
00:04:28,970 --> 00:04:32,450
Any name is fine as long as it's unique in the program.

61
00:04:32,660 --> 00:04:39,160
If the preprocessor has that name defined then it skips the entire file and goes to the pound END-IF

62
00:04:39,260 --> 00:04:40,010
at the end.

63
00:04:40,750 --> 00:04:46,400
In other words it doesn't process the file since it's already seen it because the symbol has been defined.

64
00:04:46,720 --> 00:04:52,390
If the symbol has not been defined then the symbol is set and the file is processed as usual.

65
00:04:52,480 --> 00:04:57,480
As you can see it's pretty simple but not very elegant compared to more modern programming languages.

66
00:04:58,610 --> 00:05:02,450
So now this is what the account that h file typically contains.

67
00:05:02,480 --> 00:05:06,010
You can see the include guard wrapping the class declaration.

68
00:05:06,020 --> 00:05:11,780
Now we can provide the implementation for the account class in a separate file named account that C-p

69
00:05:13,800 --> 00:05:19,140
many compilers also support the pound pragma once compiled a directive.

70
00:05:19,140 --> 00:05:22,470
The effect of this directive is the same as the include guard.

71
00:05:22,470 --> 00:05:25,230
While many compilers support this directive some don't.

72
00:05:25,230 --> 00:05:28,660
So check your compiler documentation to be sure.

73
00:05:28,680 --> 00:05:33,640
Now we can provide the implementation for the account class in a separate file named account that C

74
00:05:33,640 --> 00:05:34,530
P P.

75
00:05:34,530 --> 00:05:36,730
Let's take a look at that.

76
00:05:36,760 --> 00:05:40,600
This is the source code for the account that file.

77
00:05:40,600 --> 00:05:44,880
Notice that we include a count H and it's in double quotes.

78
00:05:45,160 --> 00:05:49,370
Up to this point our includes have used angle brackets with no extensions.

79
00:05:49,390 --> 00:05:55,000
There is an important difference between the two forms of include include with angle brackets as in

80
00:05:55,000 --> 00:06:01,620
include IO stream is used to include system header files and the compiler knows where these are located.

81
00:06:02,620 --> 00:06:04,020
Includes with double quotes.

82
00:06:04,020 --> 00:06:07,980
Tell the compiler to include header files that are local to this project.

83
00:06:07,990 --> 00:06:10,750
The compiler also knows where those are.

84
00:06:10,750 --> 00:06:15,820
Notice that this file implements the two methods declared in the account that age header file.

85
00:06:16,030 --> 00:06:18,130
Now our current class is complete.

86
00:06:18,190 --> 00:06:24,960
The specification is an account that H and the implementation is an account that CGP how do we use an

87
00:06:24,960 --> 00:06:27,130
account in our main file though.

88
00:06:27,360 --> 00:06:29,070
Let's see in the next slide.

89
00:06:29,880 --> 00:06:32,530
Here's our main data file.

90
00:06:32,580 --> 00:06:36,630
Notice how we include IO stream as well as account dot H.

91
00:06:36,660 --> 00:06:42,310
It's important to always include that h files never include data files.

92
00:06:42,570 --> 00:06:48,420
Then we just write our main as we normally would when the program is compiled both the main dot TPP

93
00:06:48,690 --> 00:06:53,560
and the account that CBP files are compiled and then link to produce the executive.

94
00:06:53,760 --> 00:06:57,570
Let's see how all this works in the ID OK.

95
00:06:57,570 --> 00:07:05,110
So I mean the ID and I in the section 13 workspace in the implementing methods 1 project.

96
00:07:05,120 --> 00:07:09,800
What I'm going to do here is I'm going to implement these methods in this account class and will implement

97
00:07:09,800 --> 00:07:14,730
some of them inside the class declaration and some of them outside the class declaration.

98
00:07:14,730 --> 00:07:20,750
This will create another project implement implementing methods to where will separate the specification

99
00:07:20,750 --> 00:07:25,900
from the implementation and will create the account that h file and the account that C.P. file.

100
00:07:26,090 --> 00:07:28,190
OK so let's start here.

101
00:07:28,310 --> 00:07:33,710
What we're doing here is we have our class account right here and we've got two private attributes.

102
00:07:33,710 --> 00:07:37,890
Name and balance of them we've got the methods and the methods are really what we're interested in here.

103
00:07:38,060 --> 00:07:42,140
Now in this case I've got six methods all public.

104
00:07:42,140 --> 00:07:47,750
We've got a set balance and a get balance and you can see that these methods have been implemented line

105
00:07:47,750 --> 00:07:50,340
right inside the class declaration.

106
00:07:50,360 --> 00:07:51,710
This is easy to do.

107
00:07:51,710 --> 00:07:56,710
And this is OK to do when you've got methods like these that are really really straightforward methods.

108
00:07:57,020 --> 00:07:59,860
They're done they're implemented and we're all set.

109
00:07:59,930 --> 00:08:03,740
Now we can also implement methods outside the class declaration.

110
00:08:03,740 --> 00:08:09,200
Notice these last four methods I've got set name get name deposit and withdraw.

111
00:08:09,380 --> 00:08:14,630
And what you see right here are basically the function prototypes are the method prototypes.

112
00:08:14,780 --> 00:08:16,160
They're not defined here.

113
00:08:16,160 --> 00:08:17,800
These are only declarations.

114
00:08:17,960 --> 00:08:21,070
What we want to do is we want to find them outside the class.

115
00:08:21,170 --> 00:08:25,920
And you'll notice the class begins here on line 8 and it ends right here on line 26.

116
00:08:26,060 --> 00:08:29,930
So what we want to do is define them outside the class and let me show you how to do that it's really

117
00:08:29,930 --> 00:08:31,040
straightforward.

118
00:08:31,250 --> 00:08:32,970
What we've got here is.

119
00:08:33,110 --> 00:08:35,120
So let me show you how easy it is.

120
00:08:35,150 --> 00:08:38,910
Here are the methods that have been implemented outside the class.

121
00:08:38,930 --> 00:08:40,910
We're starting on line 28 right here.

122
00:08:40,910 --> 00:08:45,590
The method is set name which is this method right there it's called Set name.

123
00:08:45,590 --> 00:08:50,660
Now it's not just good enough to say void set name that would just that would just define any method

124
00:08:51,200 --> 00:08:54,380
we want to define the set name for the account class.

125
00:08:54,410 --> 00:09:00,320
So we need to prefix the name of the method set name with the name of the class followed by the scope

126
00:09:00,320 --> 00:09:01,760
resolution operator.

127
00:09:01,760 --> 00:09:03,740
Now when the compiler sees this it knows.

128
00:09:03,770 --> 00:09:09,320
OK you're defining the set name method that you declared in the account class.

129
00:09:09,380 --> 00:09:11,740
So it's in a come up here and will be able to type check.

130
00:09:11,960 --> 00:09:15,130
All of these things together and make sure that just no mistakes.

131
00:09:15,350 --> 00:09:20,340
OK so you can see what's going on here in this example it's really straightforward.

132
00:09:20,420 --> 00:09:25,590
String is being passed in and the name is said to whatever string was passed in which is an remember

133
00:09:25,610 --> 00:09:28,020
name is one of the attributes of the class.

134
00:09:28,070 --> 00:09:29,840
It was private and that's OK.

135
00:09:29,840 --> 00:09:33,980
This is a member method so it has access to private information.

136
00:09:33,980 --> 00:09:37,900
Get name simply returns a copy of that string.

137
00:09:37,970 --> 00:09:38,660
OK.

138
00:09:38,930 --> 00:09:41,540
And in this case we've got our deposit and withdraw.

139
00:09:41,630 --> 00:09:44,960
So you're going to pass in an amount to deposit.

140
00:09:44,960 --> 00:09:50,600
This method would somehow verify that that amount is indeed there so that you can deposit it and all

141
00:09:50,600 --> 00:09:55,370
it does is it increments balance by whatever the amount is and it returns true.

142
00:09:55,430 --> 00:09:59,310
Obviously would return false if it didn't verify.

143
00:09:59,510 --> 00:10:04,720
And then the last method that will implement is this account withdrawal method.

144
00:10:04,910 --> 00:10:10,190
Again it's the same idea we prefix the name of the method with the name of the class because it's a

145
00:10:10,190 --> 00:10:11,810
class method.

146
00:10:11,810 --> 00:10:12,800
And here's the amount.

147
00:10:12,800 --> 00:10:13,510
And what do we do here.

148
00:10:13,510 --> 00:10:16,970
Well we look at the balance and we subtract the amount from it.

149
00:10:16,970 --> 00:10:21,860
If that's greater than or equal to zero then there is sufficient funds would just decrement the balance

150
00:10:21,860 --> 00:10:23,810
by the amount and we'll return true.

151
00:10:24,260 --> 00:10:24,670
OK.

152
00:10:24,710 --> 00:10:25,500
Simple as that.

153
00:10:25,550 --> 00:10:28,420
If the funds aren't there then we'll just return false.

154
00:10:28,550 --> 00:10:33,890
So let's see how we can use this in the main and it's really really straight about some breakpoints

155
00:10:33,920 --> 00:10:35,910
in here that will follow in the second.

156
00:10:36,620 --> 00:10:42,290
So what I'm doing here is I'm creating an account called frank account and I'm setting the name to Frank's

157
00:10:42,290 --> 00:10:47,000
account and I can't say Frank account dot name because that's private.

158
00:10:47,000 --> 00:10:50,920
So I've got to go through this public method called Set name.

159
00:10:51,000 --> 00:10:52,640
I'm doing the same thing for balance.

160
00:10:52,650 --> 00:10:55,490
Frank account set balance to a thousand.

161
00:10:55,680 --> 00:11:00,660
I can't say Frank account balance equals a thousand because balance is private.

162
00:11:01,550 --> 00:11:02,060
OK.

163
00:11:02,190 --> 00:11:03,960
So at this point I've got an account.

164
00:11:04,110 --> 00:11:06,530
It's got Frank's account as the name 0 0 0.

165
00:11:06,550 --> 00:11:07,890
That is the balance.

166
00:11:07,890 --> 00:11:11,580
And then I want to deposit $200 into that account.

167
00:11:11,580 --> 00:11:14,780
I'm going to call Frank account deposit 200.

168
00:11:14,790 --> 00:11:18,950
If that returns true then the deposit was OK and I'm going to just display that.

169
00:11:19,140 --> 00:11:23,850
If that returns false then the deposit was not allowed for whatever reason.

170
00:11:23,850 --> 00:11:29,100
Now when it cost them withdraw methods here I'm going to call the withdraw method on the frank account

171
00:11:29,100 --> 00:11:30,150
with five hundred.

172
00:11:30,240 --> 00:11:32,620
Someone to check I should have a thousand in there right.

173
00:11:32,620 --> 00:11:34,390
Actually I should have twelve hundred in there.

174
00:11:34,490 --> 00:11:36,230
I just put $200 in there.

175
00:11:36,420 --> 00:11:38,320
So as of.

176
00:11:38,970 --> 00:11:39,980
I'll check to see if.

177
00:11:39,990 --> 00:11:43,850
Twelve hundred minus 500 is greater than zero which it is.

178
00:11:44,010 --> 00:11:47,910
And the withdraw should be ok I should have seven hundred dollars left after that.

179
00:11:48,030 --> 00:11:51,290
Then I try to do another withdraw with 1300 and that should fail.

180
00:11:52,490 --> 00:11:55,110
OK so let's let's run this through the debugger here.

181
00:11:55,130 --> 00:12:00,860
Right now I'm at lined fifty three and I'm going to set a watch to Frank account.

182
00:12:01,100 --> 00:12:06,070
That way I can see that as it changes really easily and that's already set here.

183
00:12:06,110 --> 00:12:08,470
So what I'm going to do is I'm going to hit next.

184
00:12:08,840 --> 00:12:14,690
And remember I'm right here on line 53 So at this point I've just created the frank account object.

185
00:12:14,690 --> 00:12:15,920
Now I want to set that name.

186
00:12:15,920 --> 00:12:19,120
Notice that the name is empty right now and the balance is garbage.

187
00:12:19,360 --> 00:12:21,250
I want to set the name to Frank's account.

188
00:12:21,410 --> 00:12:25,680
So when I select next you could see that that's changed right here to Frank account.

189
00:12:26,500 --> 00:12:28,420
And I want to set the balance to a thousand.

190
00:12:28,420 --> 00:12:30,640
So we should see that change here as well.

191
00:12:31,590 --> 00:12:34,620
Again remember these two attributes are private.

192
00:12:34,620 --> 00:12:38,170
That's why we're going through those public methods to change them.

193
00:12:38,420 --> 00:12:41,930
Now what we're going to do is we're going to deposit $200 into that account.

194
00:12:41,940 --> 00:12:46,080
So let's step through here and what we're going to do now is we're going to go we're going to jump to

195
00:12:46,080 --> 00:12:47,730
this method right here.

196
00:12:47,790 --> 00:12:52,140
I've got a breakpoint in there that's where I'm at right now assuming there was some business logic

197
00:12:52,140 --> 00:12:58,620
here that would verify that that deposit amount was there going to increase the balance by 200 so I

198
00:12:58,620 --> 00:13:02,190
should have 1200 here when I finish and return true.

199
00:13:03,820 --> 00:13:10,730
And I'm back now you can see I've got 1200 here and I'm going to return true and it should display deposit.

200
00:13:10,750 --> 00:13:15,160
OK over here and exactly what happens.

201
00:13:15,380 --> 00:13:17,140
Now we're going to withdraw 500.

202
00:13:17,220 --> 00:13:19,320
I've got 1200 so that should work.

203
00:13:19,500 --> 00:13:22,730
So let's try that and you can see I'm right in here now.

204
00:13:22,740 --> 00:13:25,130
I've jumped to this function this method right here.

205
00:13:25,170 --> 00:13:30,270
So balance is twelve hundred minus 500 is greater than or equal to zero so we should be good in that

206
00:13:30,270 --> 00:13:30,720
case.

207
00:13:30,730 --> 00:13:37,150
I'm going to decrement the balance by the amount and I want to return true and I'm right back here now

208
00:13:37,150 --> 00:13:39,170
on line 63.

209
00:13:39,170 --> 00:13:44,550
Notice I've got seven hundred left in the account and it should display withdrawal OK.

210
00:13:45,740 --> 00:13:49,420
The last example here is I'm going to withdraw 5300.

211
00:13:49,460 --> 00:13:50,900
I don't have 1300.

212
00:13:51,140 --> 00:13:54,190
So it should fail someone to go back up here.

213
00:13:54,200 --> 00:13:56,170
Balance amount is greater than or equal to zero.

214
00:13:56,180 --> 00:14:00,740
It's not so it's going to go straight to fault's which is going to return.

215
00:14:00,740 --> 00:14:05,960
And then when I come back to my main I'm right here on line 70 and it should display not sufficient

216
00:14:05,960 --> 00:14:08,580
funds and that's exactly what it does.

217
00:14:08,950 --> 00:14:09,430
OK.

218
00:14:09,470 --> 00:14:10,160
So there you go.

219
00:14:10,160 --> 00:14:17,360
This is a real simple example of implementing these class methods both inside the class declaration

220
00:14:17,390 --> 00:14:19,360
and outside the class declaration.

221
00:14:19,490 --> 00:14:25,100
OK what I'm going to do next is we'll create a new project called implementing methods too and what

222
00:14:25,100 --> 00:14:30,560
we'll do is we create the account that age an account that CBP and then will have a main C.P. that runs

223
00:14:30,560 --> 00:14:31,350
the whole thing.

224
00:14:31,610 --> 00:14:33,280
So I set that up and be right back.

225
00:14:36,990 --> 00:14:38,150
OK so I'm back.

226
00:14:38,310 --> 00:14:43,080
I'm still in the section 13 workspace but I've just created a new project called implementing methods

227
00:14:43,080 --> 00:14:47,790
too and all it has in it is a main CGP file that you're looking at right here.

228
00:14:47,860 --> 00:14:53,880
But we're going to do here is we're going to create our countdown h file our current data file and then

229
00:14:53,880 --> 00:14:59,670
we'll use this main file as a driver so that we can create some objects and so forth.

230
00:14:59,790 --> 00:15:01,860
OK so what do we do.

231
00:15:01,860 --> 00:15:09,450
Well we need to create an account class every ID has its way of creating a new class code like is no

232
00:15:09,450 --> 00:15:14,480
different if you select the source directory and right click you'll have an option for new class will

233
00:15:14,550 --> 00:15:20,020
select that and then you get this pop up dialog and it's going to ask you what's the class name.

234
00:15:20,110 --> 00:15:22,050
Well the class name is a count.

235
00:15:22,350 --> 00:15:24,060
Again with a capital A.

236
00:15:24,450 --> 00:15:28,680
Don't worry about name space and then the block card is what you saw with the include guard that I talked

237
00:15:28,680 --> 00:15:31,380
about this is that pound define.

238
00:15:31,380 --> 00:15:36,680
So I'm just going to say underscore account underscore 8 underscore you can really do anything you like.

239
00:15:36,680 --> 00:15:40,170
You can even leave that blank and it's going to use its own way of doing it.

240
00:15:40,200 --> 00:15:40,770
OK.

241
00:15:41,010 --> 00:15:42,190
So that's it.

242
00:15:42,210 --> 00:15:46,430
There's some more advanced options here which should all be off at this point.

243
00:15:46,770 --> 00:15:50,490
And you can choose to create a dot HTP file instead of a dot h file.

244
00:15:50,490 --> 00:15:51,530
I'm not going to.

245
00:15:51,750 --> 00:15:54,780
And you can also choose to use the pragma once command.

246
00:15:54,780 --> 00:15:58,670
Again I'm not going to I'm just going to use the block art you select.

247
00:15:58,680 --> 00:15:59,540
OK.

248
00:16:00,120 --> 00:16:04,890
And what happens here on the left hand side you'll see that we've got two files that were created.

249
00:16:04,890 --> 00:16:10,490
We've got the countdown h file and the account that C-p file that's exactly what we want.

250
00:16:10,500 --> 00:16:12,790
Now we're going to start with the count h file.

251
00:16:12,810 --> 00:16:19,380
Notice the wrapper and I'm going to get rid of what it generated for me and what I'm going to do is

252
00:16:19,440 --> 00:16:24,600
I'm going to copy and paste the account that we were working on and I'm just going to copy and paste

253
00:16:24,600 --> 00:16:30,610
the declaration of the account so that we do that right now and paste it right in here.

254
00:16:30,660 --> 00:16:32,320
It should be pretty familiar.

255
00:16:32,700 --> 00:16:33,790
There's the class account.

256
00:16:33,810 --> 00:16:37,660
Those are the two private attributes that see what we've got here.

257
00:16:37,650 --> 00:16:40,910
Now we've got to do a couple of things we were using a string here.

258
00:16:41,130 --> 00:16:49,080
So we want to do is here we want to pounded clewed string so that our account header file is complete

259
00:16:49,590 --> 00:16:56,880
and we really don't want to use a name in here so I'm just going to prefix this with standard and see

260
00:16:56,880 --> 00:16:59,280
C got a string here as well.

261
00:17:00,300 --> 00:17:05,670
And I believe I've got one here as well and I think that'll do it.

262
00:17:05,670 --> 00:17:07,000
So that's my count.

263
00:17:07,050 --> 00:17:07,710
H file.

264
00:17:07,710 --> 00:17:10,210
You can see it exactly as we had before.

265
00:17:10,230 --> 00:17:14,210
There's my account declaration and it's wrapped up in that guard.

266
00:17:14,670 --> 00:17:15,300
OK.

267
00:17:15,300 --> 00:17:17,590
Now let's go to the account see.

268
00:17:17,610 --> 00:17:24,750
Now you'll notice that it's generated the include for me and also it's generated these two functions

269
00:17:24,750 --> 00:17:26,930
these two member functions.

270
00:17:27,000 --> 00:17:28,020
We're going to get rid of those.

271
00:17:28,020 --> 00:17:32,270
This is a constructor and destructor will talk about those in a couple of videos.

272
00:17:32,340 --> 00:17:38,130
But for now I just want to get rid of them and what I want to do is I want to copy and paste those four

273
00:17:38,130 --> 00:17:41,560
methods that we wrote remember the ones we wrote outside the class.

274
00:17:41,610 --> 00:17:44,130
So I'm going to copy them right in here like that.

275
00:17:44,130 --> 00:17:51,720
There's my account there's my and again I'm going to prefix this with standard wherever we're using

276
00:17:51,720 --> 00:17:52,760
strings.

277
00:17:53,190 --> 00:17:54,720
And I think that was the right.

278
00:17:54,720 --> 00:17:58,380
Here's the other one.

279
00:17:58,380 --> 00:17:59,880
That's it.

280
00:17:59,880 --> 00:18:05,150
Now what we'll do is we'll go to the main and what we're going to do here is we're going to include

281
00:18:06,240 --> 00:18:10,290
a count that H because we're going to need it in our main.

282
00:18:10,490 --> 00:18:16,140
And if you remember the code for the main again I'll copy and paste it because it's really straightforward.

283
00:18:18,590 --> 00:18:23,150
That was the code for the main where we created the frank account we set the name for the account and

284
00:18:23,150 --> 00:18:23,890
so forth.

285
00:18:24,020 --> 00:18:28,160
Now what we're going to do is I want to save this and we'll compile the whole thing would just basically

286
00:18:28,160 --> 00:18:30,960
do build and run control 5.

287
00:18:30,980 --> 00:18:37,450
What's going to happen is the data files were both compiled and everything will be linked into an acceptable.

288
00:18:37,460 --> 00:18:40,520
Now we may run into some errors here and we'll fix those as we go.

289
00:18:40,520 --> 00:18:44,150
So mean take control of 5 no errors.

290
00:18:44,150 --> 00:18:45,460
Everything worked great.

291
00:18:45,470 --> 00:18:51,740
You can see I run the file and I get deposit OK withdrawal OK not sufficient funds exactly like we had

292
00:18:51,740 --> 00:18:58,550
before we could run this through the debugger if we like but it's really as simple as that throughout

293
00:18:58,550 --> 00:18:59,270
the course.

294
00:18:59,270 --> 00:19:04,190
This is the way we're going to start writing code now we're going to have the specification here and

295
00:19:04,190 --> 00:19:09,540
the implementation in the dot C-p file and you can see again to this one more time.

296
00:19:09,560 --> 00:19:16,520
You can see the accounts page the header or the include file that is our declaration for the account

297
00:19:16,520 --> 00:19:17,280
class.

298
00:19:17,420 --> 00:19:23,360
We have to wrap that up so that the compiler only sees it once we're including string here because we've

299
00:19:23,360 --> 00:19:29,360
got our string class that we're using right there and we really don't want to use name spaces inside

300
00:19:29,360 --> 00:19:34,490
these header files because everything that includes them is going to get that all that namespace stuff

301
00:19:34,760 --> 00:19:36,620
which is really not necessary.

302
00:19:36,770 --> 00:19:41,840
So what we've got there is that we've got our private stuff we've got our public stuff we've defined

303
00:19:42,200 --> 00:19:45,990
these two methods right inside the class declaration.

304
00:19:46,400 --> 00:19:52,390
And then these other methods we've defined outside the class declaration in accounts.

305
00:19:52,880 --> 00:19:58,970
Now in order for the compiler to understand what you're talking about here you have to include account

306
00:19:58,970 --> 00:19:59,980
data age.

307
00:20:00,110 --> 00:20:03,820
Once you include account that age the compiler now knows what this is.

308
00:20:04,590 --> 00:20:10,170
OK once that's done you go to your main and you can see the main is now pretty self-contained or just

309
00:20:10,170 --> 00:20:12,160
including account dot H.

310
00:20:12,210 --> 00:20:14,100
It's really really simple to do.

311
00:20:14,100 --> 00:20:20,040
The idea is just you're going to have a lot of header files and a lot of C.P files in your application

312
00:20:20,340 --> 00:20:23,590
and everything gets compiled and linked to a single executable.
