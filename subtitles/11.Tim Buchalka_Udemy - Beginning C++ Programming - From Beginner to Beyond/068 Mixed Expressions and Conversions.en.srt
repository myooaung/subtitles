1
00:00:05,600 --> 00:00:09,620
In this video we'll learn about mixed type expressions.

2
00:00:09,620 --> 00:00:13,330
This is when you have an expression where the operands are of different types.

3
00:00:13,430 --> 00:00:21,440
For example a plus b where as an integer and B is a double C++ is very consistent with its application

4
00:00:21,440 --> 00:00:28,930
of an operator to operands the operands must be of the same type as we'll see in the next few slides.

5
00:00:28,940 --> 00:00:34,820
It's very important to understand the rules that C++ uses to ensure that the types are the same since

6
00:00:34,820 --> 00:00:40,760
the results of the calculation could be different depending on which operand type is changed.

7
00:00:40,760 --> 00:00:45,470
C++ will try to convert one of the operands so it matches the other.

8
00:00:45,470 --> 00:00:51,320
In many cases this happens automatically and we'll talk about how that works in the next slide if an

9
00:00:51,350 --> 00:00:56,990
automatic conversion or coersion is not possible then a compiler error will occur.

10
00:00:56,990 --> 00:01:01,760
We saw an example of this in the assignment operator video when we tried to assign a string to an integer

11
00:01:03,830 --> 00:01:06,370
in order to understand how these conversions happen.

12
00:01:06,380 --> 00:01:09,710
We need to understand higher versus lower types.

13
00:01:09,710 --> 00:01:14,960
The idea is simple the lower types are those types that can hold smaller values and the higher types

14
00:01:14,960 --> 00:01:16,450
can hold large values.

15
00:01:16,520 --> 00:01:22,640
So a long double is a higher type than a long and a Long is of higher type than an int.

16
00:01:22,640 --> 00:01:28,430
The idea is that we can typically convert from a lower type to a larger type automatically since the

17
00:01:28,430 --> 00:01:31,560
lower types value will fit into the higher types value.

18
00:01:31,670 --> 00:01:33,790
But the opposite may not be true.

19
00:01:34,370 --> 00:01:37,940
Short and character types are always converted to integers.

20
00:01:37,940 --> 00:01:43,070
So let's look at the terminology a type conversion is also called a coersion.

21
00:01:43,130 --> 00:01:45,560
Since we're chorusing one type to another.

22
00:01:45,560 --> 00:01:50,350
Sometimes this happens automatically and sometimes we do it ourselves in code.

23
00:01:50,450 --> 00:01:54,490
Promotion is when we convert a lower type to a higher type.

24
00:01:54,500 --> 00:01:57,920
An example would be when we add an integer and a double.

25
00:01:58,040 --> 00:02:02,580
In this case we promote the integer to a double and then do the calculation.

26
00:02:02,630 --> 00:02:06,170
Demotion is when we convert a higher type to a lower type.

27
00:02:06,170 --> 00:02:10,070
Suppose we want to store twelve point five into an integer variable.

28
00:02:10,070 --> 00:02:11,340
It won't fit.

29
00:02:11,450 --> 00:02:17,090
So a demotion happens and the decimal part of twelve point five is truncated and we're left just with

30
00:02:17,090 --> 00:02:18,450
the integer 12.

31
00:02:18,890 --> 00:02:22,750
Let's see a few examples in the first example.

32
00:02:22,760 --> 00:02:28,880
We have two different types and an operator you can think of the operator is the multiplication operator

33
00:02:29,120 --> 00:02:33,260
but it applies to any operator in order to perform the multiplication.

34
00:02:33,260 --> 00:02:39,370
The compiler will convert the lower type to the higher type and then perform the multiplication.

35
00:02:39,440 --> 00:02:44,630
You can see in the example where we multiply the integer 2 and the double 5.2.

36
00:02:45,110 --> 00:02:51,230
In this case we can promote the lower type which is the integer 2 to the double two point zero and then

37
00:02:51,230 --> 00:02:55,450
perform the multiplication in the second example.

38
00:02:55,490 --> 00:02:58,870
We're assigning a value from a higher type to a lower type.

39
00:02:58,940 --> 00:03:05,180
In this case the compiler demotes the higher type to the lower type potentially losing information.

40
00:03:05,180 --> 00:03:10,480
Many compilers will warn you about the possible loss of precision but not all do.

41
00:03:10,490 --> 00:03:16,750
In this example we have Gnome as an integer and we assign a double one hundred point to one hundred

42
00:03:16,750 --> 00:03:21,970
point two will be demoted to the integer 100 and 100 will be assigned to them.

43
00:03:22,940 --> 00:03:27,950
As mentioned previously the C++ compiler will try to do automatic coersion when it can.

44
00:03:28,100 --> 00:03:34,130
However as programmers we can explicitly tell the compiler to cast to a specific type if we wish.

45
00:03:34,130 --> 00:03:35,870
Let's see how.

46
00:03:35,990 --> 00:03:41,110
So let's talk about how we can tell the compiler to coerce or cast one type to another.

47
00:03:41,120 --> 00:03:43,030
Let's walk through this example.

48
00:03:43,250 --> 00:03:45,620
You can see we have two integer variables.

49
00:03:45,620 --> 00:03:50,980
Think of total amount as a running sum of several numbers and we want to know the average of those numbers.

50
00:03:51,380 --> 00:03:53,940
So we need to know how many numbers there are in this case.

51
00:03:53,930 --> 00:04:00,250
This is represented by the integer total number which is a the average in this case would be total amount

52
00:04:00,430 --> 00:04:03,990
divided by total number which is twelve point five.

53
00:04:04,240 --> 00:04:09,250
But since both of these variables are integers the compiler will do integer division and the result

54
00:04:09,250 --> 00:04:10,390
will be 12.

55
00:04:10,720 --> 00:04:15,330
That's not what we want we could change the type of total amount to double.

56
00:04:15,550 --> 00:04:20,040
But we're modeling a running total of integers so an integer type is more appropriate.

57
00:04:20,050 --> 00:04:26,590
The solution is for us to tell the compiler to cast or perform a coersion of total amount from integer

58
00:04:26,590 --> 00:04:27,760
to double.

59
00:04:27,760 --> 00:04:34,750
The syntax is to use static underscore cast followed by the type we want to convert to in angle brackets

60
00:04:35,290 --> 00:04:37,550
and then the variable name in parentheses.

61
00:04:37,900 --> 00:04:42,760
Now one of the operands is a double so the compiler will automatically convert the total number to a

62
00:04:42,760 --> 00:04:46,480
double and do double division which is exactly what we want.

63
00:04:46,480 --> 00:04:49,780
Now we get twelve point five which is the result we wanted.

64
00:04:50,170 --> 00:04:54,430
Let's head over to code line and write a program that asks the user for three integers and computes

65
00:04:54,430 --> 00:04:56,800
their average.

66
00:04:56,860 --> 00:05:03,640
OK so now I'm in the cold light idea I mean the Section 8 workspace in the mixed expressions project.

67
00:05:03,640 --> 00:05:08,080
So let's write a program here that asks the user to enter three integers.

68
00:05:08,080 --> 00:05:12,070
We calculate the sum of those integers and then we calculate the average of the integers.

69
00:05:12,070 --> 00:05:12,280
All right.

70
00:05:12,310 --> 00:05:15,190
Then it then will just display the three integers that were entered.

71
00:05:15,190 --> 00:05:18,500
The sum of the integers and the average that we calculate it.

72
00:05:18,520 --> 00:05:20,310
All right so let's get started.

73
00:05:20,320 --> 00:05:25,420
We have an empty Main here and I'll scroll this up so we have a little bit more room to work.

74
00:05:25,600 --> 00:05:27,040
And we know we need a total wreck.

75
00:05:27,040 --> 00:05:29,100
We need to sum up those three numbers.

76
00:05:29,110 --> 00:05:31,580
But we also need to store those three numbers.

77
00:05:31,690 --> 00:05:33,820
So let's create those variables first.

78
00:05:34,000 --> 00:05:35,820
We'll create a total variable.

79
00:05:36,130 --> 00:05:42,460
And again the names you use can be anything you like and will zero that out and we'll create three variables

80
00:05:42,490 --> 00:05:44,700
for the numbers that we're going to enter.

81
00:05:44,860 --> 00:05:49,900
We'll call them number 1 and I could do this and do each one on each line but what I'm going to do is

82
00:05:49,900 --> 00:05:51,550
I'm going to do them all in one line.

83
00:05:51,650 --> 00:05:52,650
Some to say number one.

84
00:05:52,720 --> 00:05:54,450
And I'm going to say number two.

85
00:05:55,330 --> 00:06:00,420
And finally I'll say them three this initialises all three of them to zero.

86
00:06:00,430 --> 00:06:07,480
If you don't do it this way or rather if you do it this way and you don't put those initializers there

87
00:06:07,870 --> 00:06:11,020
then some three will be zero and no one in them two will be undefined.

88
00:06:11,020 --> 00:06:16,430
So if you do it this way be certain that each one of them gets its own initialiser.

89
00:06:16,660 --> 00:06:17,290
So that's it.

90
00:06:17,290 --> 00:06:21,210
We've got our three numbers we've got our total.

91
00:06:21,700 --> 00:06:23,760
And we also need a count right.

92
00:06:23,770 --> 00:06:24,850
We're going to have three numbers.

93
00:06:24,850 --> 00:06:31,470
We may as well define that integer as a contest and we'll call it count.

94
00:06:31,680 --> 00:06:33,790
And again we'll initialize that three.

95
00:06:33,870 --> 00:06:37,380
That way we know we're not going to make any silly mistakes.

96
00:06:37,380 --> 00:06:37,640
Great.

97
00:06:37,640 --> 00:06:46,710
So let's prompt the user will say see out and I'll just say Enter three integers separated by spaces.

98
00:06:46,800 --> 00:06:49,070
That way they could just type them in on one line.

99
00:06:49,080 --> 00:06:50,510
Would have to do three prompts

100
00:06:54,120 --> 00:06:55,650
and we'll just leave it at that.

101
00:06:55,650 --> 00:06:57,630
Don't forget the semi-colon at the end.

102
00:06:57,630 --> 00:06:59,500
We don't need an end line here.

103
00:06:59,910 --> 00:07:03,410
Now we're going to read all three integers so what do you see in.

104
00:07:03,420 --> 00:07:04,880
We'll use the extraction operator.

105
00:07:04,890 --> 00:07:07,320
No one would just chain them together.

106
00:07:07,470 --> 00:07:10,310
Two and them three.

107
00:07:10,320 --> 00:07:13,010
All right so now we've got all three of our integers.

108
00:07:13,170 --> 00:07:14,380
We need to total them up.

109
00:07:14,380 --> 00:07:18,140
Now we need to some of them all up so we've got our total variable.

110
00:07:18,540 --> 00:07:25,170
So we'll just say total is number one plus two plus number three.

111
00:07:25,170 --> 00:07:30,750
All right so now we've got that now obviously we could have total be a double but it really makes sense

112
00:07:30,750 --> 00:07:34,850
for it to be integers because we're adding up integers so the total should be in the.

113
00:07:35,250 --> 00:07:39,600
So now let's calculate the average We need a variable to hold that.

114
00:07:39,600 --> 00:07:45,930
So that will be a double and we'll just call it average and it's initialized to zero point zero.

115
00:07:46,230 --> 00:07:49,570
That way we know we've got a known value in there.

116
00:07:49,570 --> 00:07:49,800
Great.

117
00:07:49,800 --> 00:07:52,690
So let's do the calculation now average.

118
00:07:52,710 --> 00:07:55,860
And I'm just using some blank lines here just to separate them.

119
00:07:55,860 --> 00:07:59,400
Normally you wouldn't write all these blank lines but I just want to write them so you can really see

120
00:07:59,400 --> 00:08:00,560
what's going on.

121
00:08:00,630 --> 00:08:11,450
So I'll say average is the total divided by count.

122
00:08:11,640 --> 00:08:12,190
That's it.

123
00:08:12,190 --> 00:08:19,340
And now we've got our output statements will say that just say something like the three numbers were

124
00:08:20,490 --> 00:08:30,710
and will display all three numbers will say no one will put a comma here forcing them to put another

125
00:08:30,710 --> 00:08:31,660
comma.

126
00:08:32,570 --> 00:08:40,820
And finally number three followed by the line next day we'll say the same

127
00:08:44,060 --> 00:08:48,090
the sum of the numbers is.

128
00:08:49,020 --> 00:08:51,710
And obviously that is our total variable.

129
00:08:51,770 --> 00:09:00,530
So we'll split total here and again we'll follow it by and then line and then finally average is my

130
00:09:00,530 --> 00:09:03,380
last output statement and I would just say the average

131
00:09:06,090 --> 00:09:11,530
of the numbers is and again average.

132
00:09:12,100 --> 00:09:15,960
OK so so far so good in line.

133
00:09:16,020 --> 00:09:17,040
That's it.

134
00:09:17,100 --> 00:09:20,880
Let's compile this and see if we've got any compiler errors that we have to fix.

135
00:09:23,050 --> 00:09:23,380
OK.

136
00:09:23,390 --> 00:09:24,920
No compiler errors it runs.

137
00:09:24,920 --> 00:09:29,260
So let's run this into three integers separated by spaces.

138
00:09:29,270 --> 00:09:34,810
How about 10 30 and 20 right.

139
00:09:34,810 --> 00:09:39,390
That's 40 50 60 60 divided by three is going to give me 20.

140
00:09:39,400 --> 00:09:46,390
So I expect that to be the average Precentor the output says the three numbers were 10 30 20 That's

141
00:09:46,390 --> 00:09:47,000
correct.

142
00:09:47,030 --> 00:09:48,550
The sum of the numbers is 60.

143
00:09:48,550 --> 00:09:49,540
That's correct.

144
00:09:49,600 --> 00:09:51,280
The average of the numbers is 20.

145
00:09:51,280 --> 00:09:52,390
That's also correct.

146
00:09:52,540 --> 00:09:53,140
OK.

147
00:09:53,140 --> 00:09:59,780
One more test case we'll say 10 20 15.

148
00:09:59,860 --> 00:10:04,190
In this case we've got 45.

149
00:10:04,240 --> 00:10:05,990
The average is 15.

150
00:10:06,100 --> 00:10:07,050
Good.

151
00:10:07,060 --> 00:10:08,370
We're done.

152
00:10:08,380 --> 00:10:08,980
No we're not.

153
00:10:09,010 --> 00:10:11,590
Program has a pretty big problem in it.

154
00:10:11,590 --> 00:10:13,180
And we saw that in the slides.

155
00:10:13,390 --> 00:10:20,770
Suppose that I run it again with a different test case something like 10 20 20.

156
00:10:20,770 --> 00:10:25,660
In this case it's 50 divided by three which is sixteen point six six seven.

157
00:10:26,100 --> 00:10:29,940
Instead I'm getting 16 because I'm doing integer division.

158
00:10:29,980 --> 00:10:33,220
This is why testing your program is so important.

159
00:10:33,280 --> 00:10:37,750
We're talking about testing as we go through the course but testing your program is important in testing

160
00:10:37,750 --> 00:10:41,940
involves knowing what the result is before you run your program.

161
00:10:42,040 --> 00:10:42,590
Right.

162
00:10:42,610 --> 00:10:49,690
So in this case have some test cases ready maybe 000 something that is divisible evenly by three.

163
00:10:49,690 --> 00:10:52,560
Another test case it isn't divisible by three and so forth.

164
00:10:52,600 --> 00:10:53,050
OK.

165
00:10:53,110 --> 00:10:54,150
So how do we fix this.

166
00:10:54,160 --> 00:11:02,320
Well what we can do is we can cast that guy or this guy either one to a double and we'll use a static

167
00:11:02,320 --> 00:11:02,980
cast.

168
00:11:02,980 --> 00:11:10,600
So we'll say static underscore cast then in the angle brackets we put in the type that we want to cast

169
00:11:10,600 --> 00:11:17,950
to in this case I want to cast it to a double or convert it to a double and then we put total inside

170
00:11:17,950 --> 00:11:19,960
parentheses.

171
00:11:21,100 --> 00:11:21,940
That's it.

172
00:11:21,940 --> 00:11:27,310
Now what's going to happen is the compiler will convert totals would double the compiler will say oh

173
00:11:27,310 --> 00:11:31,030
I want to do have got to double in an integer here so I'll convert the integer which would double as

174
00:11:31,030 --> 00:11:34,290
well and do double division which is what we want.

175
00:11:34,300 --> 00:11:40,850
So let's run this again and let's use that same test case 10 20 20.

176
00:11:42,100 --> 00:11:45,210
And now we've got the correct average here.

177
00:11:45,790 --> 00:11:46,270
OK.

178
00:11:46,300 --> 00:11:53,620
Now before I finish this video off in older C-code instead of seeing this cast the static cast here

179
00:11:54,460 --> 00:11:56,650
you might have seen something that looked like this

180
00:12:01,590 --> 00:12:02,700
something like that.

181
00:12:02,730 --> 00:12:03,510
Then total

182
00:12:06,120 --> 00:12:08,190
divided by count or something like that.

183
00:12:08,550 --> 00:12:09,160
OK.

184
00:12:09,180 --> 00:12:12,600
This is the old C-style cast.

185
00:12:12,600 --> 00:12:17,180
The static cast is what we want to be using in modern C++.

186
00:12:17,340 --> 00:12:22,320
It's a little bit more restrictive than this kind of cast this kind of cast just assumes that whatever

187
00:12:22,320 --> 00:12:27,450
totallers is going to be converted to a double The static cast double checks to make sure that it can

188
00:12:27,450 --> 00:12:28,660
be converted to a double.

189
00:12:28,770 --> 00:12:32,360
So you don't want to do this I'll just write.

190
00:12:32,360 --> 00:12:37,150
Here is the comment old style just so if you've seen it you'll know it's all about.

191
00:12:37,350 --> 00:12:38,250
OK so that's it.

192
00:12:38,250 --> 00:12:39,520
That's the example.

193
00:12:39,540 --> 00:12:41,640
Pretty straightforward way to finding some variables.

194
00:12:41,640 --> 00:12:42,940
We're getting some input.

195
00:12:43,110 --> 00:12:47,610
We're doing some calculations and then we're checking that calculation to be sure it's correct.

196
00:12:47,820 --> 00:12:50,840
In this case I've got integer integer division.

197
00:12:50,940 --> 00:12:54,880
I've got to make one of those double Otherwise I'm not going to get the right result.

198
00:12:54,890 --> 00:12:55,260
OK.

199
00:12:55,290 --> 00:12:56,140
That's it for this video.
