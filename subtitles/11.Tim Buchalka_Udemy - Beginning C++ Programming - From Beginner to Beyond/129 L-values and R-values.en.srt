1
00:00:05,590 --> 00:00:11,960
Now that we know about references and how to use them let's look at L values and our values L values

2
00:00:11,960 --> 00:00:16,700
and our values are something you don't worry about too much when you're first learning C++ but as you

3
00:00:16,700 --> 00:00:20,450
learn more advanced features of the language they become very important.

4
00:00:20,450 --> 00:00:26,180
It's important that the fundamentals make sense now so that when we move on to topics like C++ elevons

5
00:00:26,240 --> 00:00:30,260
R-value references and move semantics there'll be much clearer.

6
00:00:30,710 --> 00:00:36,680
So in this video we do a basic introduction to L values our values and l value references.

7
00:00:36,680 --> 00:00:43,140
So let's start with an l value an l value is an object that occupies a location in memory and is addressable.

8
00:00:43,160 --> 00:00:46,390
So in these examples X and name are L values.

9
00:00:46,490 --> 00:00:48,590
They have names and they are addressable.

10
00:00:48,590 --> 00:00:53,510
We know that there are addressable since we can use them on the left hand side of an assignment statement.

11
00:00:53,600 --> 00:01:00,710
So what's not a null value in these examples 100 is not an l value because it's not addressable.

12
00:01:00,710 --> 00:01:01,940
It's a literal.

13
00:01:01,940 --> 00:01:07,220
In fact the compiler generates a compiler error for the one hundred equals x statement saying that 100

14
00:01:07,220 --> 00:01:09,860
is not an assignable value.

15
00:01:09,880 --> 00:01:17,560
Similarly in the assignment statement 1000 plus 20 equals x 1000 plus 20 produces a temporary variable

16
00:01:17,560 --> 00:01:24,580
with the value 1020 but that variable is not addressable so we can't use it as an l value in the last

17
00:01:24,580 --> 00:01:25,740
assignment statement.

18
00:01:25,750 --> 00:01:27,190
Frank equals name.

19
00:01:27,260 --> 00:01:30,380
Moe Frank is not an l value since it's not addressable.

20
00:01:30,730 --> 00:01:33,870
So these examples are of non L values.

21
00:01:33,960 --> 00:01:35,740
They're in fact called our values.

22
00:01:35,890 --> 00:01:37,790
Let's talk a bit about our values.

23
00:01:39,550 --> 00:01:42,020
We can define our values by exclusion.

24
00:01:42,040 --> 00:01:44,910
So anything that's not an l value is in our value.

25
00:01:45,250 --> 00:01:48,920
Usually our values are on the right hand side of an assignment expression.

26
00:01:49,000 --> 00:01:54,220
Our values can also be temporary values that the C++ compiler creates.

27
00:01:54,220 --> 00:01:59,680
We saw some examples of our values in the previous slide and see a few more here in the first statement.

28
00:01:59,680 --> 00:02:06,490
One hundred is an R-value in the second statement X plus 200 will produce a temporary variable and that

29
00:02:06,490 --> 00:02:12,910
variable is an r value since it's not addressable the string literal Frank is also an r value.

30
00:02:13,090 --> 00:02:19,730
And Max 20:30 is an r value because it returns a result that's a temporary and not addressable.

31
00:02:20,560 --> 00:02:24,000
Our values can be assigned to L values explicitly.

32
00:02:24,190 --> 00:02:29,050
So L values can appear both on the left and right sides of an assignment statement.

33
00:02:29,050 --> 00:02:33,970
In this example we see the first assignment statement is using the R-value 100 on the right hand side

34
00:02:33,970 --> 00:02:35,170
of the assignment statement.

35
00:02:35,380 --> 00:02:42,040
And this will be assigned to the l value Y in the second example the temporary R value with the sum

36
00:02:42,070 --> 00:02:46,990
X plus Y will be assigned to the l value x.

37
00:02:46,990 --> 00:02:51,910
Now let's look at references from the perspective of L values and our values.

38
00:02:52,300 --> 00:02:56,170
The references we've used so far have all been l value references.

39
00:02:56,200 --> 00:03:02,380
That means that we're referring to L values in the first reference declaration we're declaring ref 1

40
00:03:02,800 --> 00:03:04,510
as a reference to x.

41
00:03:04,510 --> 00:03:06,360
Notice that X is an l value.

42
00:03:07,140 --> 00:03:12,360
This makes sense since we are an alias for X and we can use ref 1 to the left hand side of an assignment

43
00:03:12,360 --> 00:03:14,750
statement since it refers to an l value.

44
00:03:15,710 --> 00:03:19,000
But what happens when we declare ref to is a reference to 100.

45
00:03:19,160 --> 00:03:20,990
Well 100 is an r value.

46
00:03:21,080 --> 00:03:25,060
So this isn't allowed and the compiler will generate an error.

47
00:03:25,070 --> 00:03:28,810
The same applies when we pass parameters by reference to functions.

48
00:03:28,910 --> 00:03:33,760
In this case we define a function square that expects an integer by reference.

49
00:03:33,890 --> 00:03:38,660
We have an integer initialized to 10 and then we call square and pass in.

50
00:03:38,900 --> 00:03:44,070
This is fine because N is a reference to an l value and knowm is an l value.

51
00:03:44,090 --> 00:03:49,850
However if we pass in the literal five to the function we get a compiler error because 5 is not an l

52
00:03:49,850 --> 00:03:53,990
value it's an r value and we must reference L values.

53
00:03:54,290 --> 00:03:59,610
Don't worry if this is a bit confusing now as we learn more about C++ semantics it will make more sense

54
00:03:59,780 --> 00:04:01,410
but it's important going forward.

55
00:04:01,460 --> 00:04:03,020
When we talk about move semantics.
