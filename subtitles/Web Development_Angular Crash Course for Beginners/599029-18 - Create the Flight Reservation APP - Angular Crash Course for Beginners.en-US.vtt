WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.220 --> 00:00:03.465
In the next few lectures,

00:00:03.465 --> 00:00:04.829
you will build a flight

00:00:04.829 --> 00:00:07.290
reservation single-page
application

00:00:07.290 --> 00:00:09.525
using AngularJS.

00:00:09.525 --> 00:00:10.889
This application will be

00:00:10.889 --> 00:00:12.795
comprised of four
different screens.

00:00:12.795 --> 00:00:15.599
The first screen is the
find flight screen,

00:00:15.599 --> 00:00:16.995
where the user will enter

00:00:16.995 --> 00:00:19.155
the city from which
he wants to fly,

00:00:19.155 --> 00:00:20.640
to which he wants to fly,

00:00:20.640 --> 00:00:22.274
and then a departure date.

00:00:22.274 --> 00:00:24.045
When he hits the Search button.

00:00:24.045 --> 00:00:26.594
Our angular
application will make

00:00:26.594 --> 00:00:29.129
a back-end RESTful call to

00:00:29.129 --> 00:00:30.810
the Java API that we

00:00:30.810 --> 00:00:33.239
have developed earlier
to the RESTful API,

00:00:33.239 --> 00:00:35.589
which will fetch all the flights

00:00:35.589 --> 00:00:38.104
that will match this criteria.

00:00:38.104 --> 00:00:39.590
So this is the second screen

00:00:39.590 --> 00:00:41.555
wherein we are displaying
all the flights.

00:00:41.555 --> 00:00:43.430
The user can select

00:00:43.430 --> 00:00:46.054
a flight by clicking on
this select at the end.

00:00:46.054 --> 00:00:48.110
Once it clicks on,
it will be taken to

00:00:48.110 --> 00:00:50.494
the third screen where

00:00:50.494 --> 00:00:53.674
the complete reservation
details will be displayed.

00:00:53.674 --> 00:00:56.089
Here we'll see all the
flight details which will be

00:00:56.089 --> 00:00:58.595
fetched by making
a backend call.

00:00:58.595 --> 00:01:00.319
Whichever flight he selects,

00:01:00.319 --> 00:01:01.849
that flight details will be

00:01:01.849 --> 00:01:03.920
fetched, they will be displayed.

00:01:03.920 --> 00:01:06.994
And we will gather
the passenger details

00:01:06.994 --> 00:01:10.564
and the card details
through HTML forms.

00:01:10.564 --> 00:01:11.914
Once he enters the teeth,

00:01:11.914 --> 00:01:14.360
these details hits
the Confirm button.

00:01:14.360 --> 00:01:17.825
A backend call will be made
with all this information,

00:01:17.825 --> 00:01:22.024
which will create a
reservation in their database.

00:01:22.024 --> 00:01:23.840
And then the confirmation
message will

00:01:23.840 --> 00:01:26.570
be displayed on the next screen.

00:01:26.570 --> 00:01:29.734
So this application
has four screens

00:01:29.734 --> 00:01:32.930
and it will be made up of the
following important pieces.

00:01:32.930 --> 00:01:34.220
You're going to create a

00:01:34.220 --> 00:01:36.635
flight reservation
Angular project,

00:01:36.635 --> 00:01:39.425
which will be comprised
of four components.

00:01:39.425 --> 00:01:43.594
Find flights, display
flights, passenger details.

00:01:43.594 --> 00:01:48.439
And finally the confirmation
page or confirm reservation.

00:01:48.439 --> 00:01:51.980
And we'll have one service
that is responsible for

00:01:51.980 --> 00:01:55.444
making all the backend
RESTful calls.

00:01:55.444 --> 00:01:59.239
The service will act as
a RESTful client for us.

00:01:59.239 --> 00:02:01.925
And of course it will
be configuring routing

00:02:01.925 --> 00:02:05.270
so that the end user can
navigate through our screens.

00:02:05.270 --> 00:02:08.210
You will be using forms to
gather passenger details,

00:02:08.210 --> 00:02:09.934
card information, et cetera.

00:02:09.934 --> 00:02:12.440
And also you'll be
using data binding in

00:02:12.440 --> 00:02:16.110
these forms to get
that information.

00:02:17.110 --> 00:02:19.639
In this lecture, we'll start

00:02:19.639 --> 00:02:21.889
coding or flight
reservation application

00:02:21.889 --> 00:02:24.199
starting with their
reservation service

00:02:24.199 --> 00:02:26.914
that is responsible
for fetching the data,

00:02:26.914 --> 00:02:28.730
as well as sending the data to

00:02:28.730 --> 00:02:32.104
the back-end to
create a reservation.

00:02:32.104 --> 00:02:34.339
Go to the folder
where you how created

00:02:34.339 --> 00:02:36.589
the project launch
Visual Studio Code.

00:02:36.589 --> 00:02:38.210
Drag the folder onto

00:02:38.210 --> 00:02:41.090
Visual Studio code
that will open it up.

00:02:41.090 --> 00:02:44.374
Once opened, go to the source.

00:02:44.374 --> 00:02:45.274
App.

00:02:45.274 --> 00:02:50.434
Services, open up the
reservation service, dot ts.

00:02:50.434 --> 00:02:54.454
Maximize it. So this
reservation service,

00:02:54.454 --> 00:02:56.420
there are different calls
that we need to make.

00:02:56.420 --> 00:02:59.824
The very first call
is the find flights.

00:02:59.824 --> 00:03:04.714
Once the passenger enters
the from and the date,

00:03:04.714 --> 00:03:06.889
we need to fetch
all the flights.

00:03:06.889 --> 00:03:08.930
So that's the very
first backend call.

00:03:08.930 --> 00:03:13.175
To do that, we need the
HTTP service in here.

00:03:13.175 --> 00:03:15.110
So let's import that.

00:03:15.110 --> 00:03:20.089
Import. Then in brackets,

00:03:20.089 --> 00:03:26.389
HTTP response from
within single quotes

00:03:26.389 --> 00:03:33.649
at angular slash HTTP
semicolon at the end.

00:03:33.649 --> 00:03:37.894
And then we'll have to
inject HTTP right here.

00:03:37.894 --> 00:03:44.600
Private underscore HTTP,
colon of type HTTP.

00:03:44.600 --> 00:03:48.214
So now we can use this
to make backend calls.

00:03:48.214 --> 00:03:52.700
The very first method
is public get flights.

00:03:52.700 --> 00:03:55.445
And this get flights will
get three parameters

00:03:55.445 --> 00:04:00.065
from which is of type
string comma two,

00:04:00.065 --> 00:04:03.814
which is the to the city which
the passenger is flying.

00:04:03.814 --> 00:04:07.429
And the last one is
the departure date,

00:04:07.429 --> 00:04:10.009
the date on which
he is traveling.

00:04:10.009 --> 00:04:12.680
And this method can
return any because it

00:04:12.680 --> 00:04:16.069
returns a JSON object back.

00:04:16.069 --> 00:04:18.034
Now to make a backend call,

00:04:18.034 --> 00:04:23.120
this dot underscore http dot get

00:04:23.120 --> 00:04:25.069
because the fine flights is

00:04:25.069 --> 00:04:27.050
mapped to the HTTP GET method.

00:04:27.050 --> 00:04:30.230
In the backend, we are
using the get method here.

00:04:30.230 --> 00:04:33.920
The first parameter is the URL.

00:04:33.920 --> 00:04:35.630
The first and the
only parameter that

00:04:35.630 --> 00:04:37.355
is required here is the URL.

00:04:37.355 --> 00:04:39.469
So let's define it as

00:04:39.469 --> 00:04:42.935
a global parameter
right here, flight URL,

00:04:42.935 --> 00:04:46.699
colon, string is equal to

00:04:46.699 --> 00:04:50.315
within double-quotes HTTP
colon two forward slashes.

00:04:50.315 --> 00:04:52.639
You can copy this from
postman as well because you

00:04:52.639 --> 00:04:55.430
have tested all these
from postman earlier.

00:04:55.430 --> 00:04:57.019
So you can go to Postman,

00:04:57.019 --> 00:04:59.480
grab this URL if you have it.

00:04:59.480 --> 00:05:02.405
Right here, this is the URL.

00:05:02.405 --> 00:05:04.554
Or you can type it in.

00:05:04.554 --> 00:05:08.150
I'm going to type in
localhost colon 80,

00:05:08.150 --> 00:05:13.924
80 slash flight,
services slash flight.

00:05:13.924 --> 00:05:16.490
So let's leave it there
so that we can reuse

00:05:16.490 --> 00:05:19.519
this URL for multiple
service calls.

00:05:19.519 --> 00:05:26.060
Now go here, use
this dot flight URL.

00:05:26.060 --> 00:05:29.629
Plus we need to append
the parameters because

00:05:29.629 --> 00:05:33.109
we need to send the query
parameters question mark.

00:05:33.109 --> 00:05:37.909
So after these flights
question mark is equal

00:05:37.909 --> 00:05:42.694
to and you can append the
parameter that comes in here,

00:05:42.694 --> 00:05:43.834
right to this method.

00:05:43.834 --> 00:05:48.440
Similarly, plus within
double-quotes and

00:05:48.440 --> 00:05:51.514
two is equal to plus

00:05:51.514 --> 00:05:55.490
two plus within
double-quotes ampersand.

00:05:55.490 --> 00:06:00.209
The last one is departure date.

00:06:00.520 --> 00:06:07.920
And plus the departure date
that comes in as a parameter.

00:06:08.440 --> 00:06:10.910
So that will make the GET call

00:06:10.910 --> 00:06:12.079
features all the flights that

00:06:12.079 --> 00:06:16.020
matches the criteria dot pipe.

00:06:16.570 --> 00:06:19.474
So we get the response,
we have piping it.

00:06:19.474 --> 00:06:21.020
Let's take it to the next line.

00:06:21.020 --> 00:06:25.070
Within pipe is where
we use the map method.

00:06:25.070 --> 00:06:26.614
And to use the map method,

00:06:26.614 --> 00:06:30.770
we need to import map

00:06:30.770 --> 00:06:41.600
from x js slash operators
are S j, x slash operators.

00:06:41.600 --> 00:06:48.299
Semicolon at the end
should be our x j.

00:06:49.420 --> 00:06:52.834
And within the pipe method,
you know what to do.

00:06:52.834 --> 00:06:54.694
You have done it
several times, already.

00:06:54.694 --> 00:06:58.655
Map the response
that comes back.

00:06:58.655 --> 00:07:03.485
Use pipe symbol, open
and close the braces.

00:07:03.485 --> 00:07:05.285
And within the map method,

00:07:05.285 --> 00:07:11.900
this dot flight data is
equal to response dot json.

00:07:11.900 --> 00:07:14.689
So I'm assigning the response
that comes back the JSON

00:07:14.689 --> 00:07:18.290
to a variable
called flight data.

00:07:18.290 --> 00:07:22.339
And we have to declare
this variable up top here.

00:07:22.339 --> 00:07:24.964
So flight data colon.

00:07:24.964 --> 00:07:26.194
Any.

00:07:26.194 --> 00:07:28.790
In this lecture, you
have implemented

00:07:28.790 --> 00:07:31.010
your very first method
inside the service,

00:07:31.010 --> 00:07:34.609
which is get flights that
features the flights that

00:07:34.609 --> 00:07:38.734
match the given criteria
from two and departure date.

00:07:38.734 --> 00:07:41.509
We have done it using
the HTTP module.

00:07:41.509 --> 00:07:44.150
And once the response
comes back from this,

00:07:44.150 --> 00:07:47.510
we are assigning it to a
flight data so that we can

00:07:47.510 --> 00:07:51.660
use it later in the
component or on the screen.

00:07:52.270 --> 00:07:54.830
The next step is to implement

00:07:54.830 --> 00:07:57.830
the passenger details component.

00:07:57.830 --> 00:07:59.975
Go to Visual Studio Code.

00:07:59.975 --> 00:08:02.315
Go to the passenger details dot

00:08:02.315 --> 00:08:04.805
HTML and the component as well,

00:08:04.805 --> 00:08:06.874
or the modal class
passenger details.

00:08:06.874 --> 00:08:10.385
Open up the TypeScript
file and the HTML.

00:08:10.385 --> 00:08:12.049
Clean up the HTML.

00:08:12.049 --> 00:08:15.290
We're back to the TypeScript.

00:08:15.290 --> 00:08:17.315
Maximize.

00:08:17.315 --> 00:08:20.659
So in here we need at least
a couple of things that

00:08:20.659 --> 00:08:22.954
router and then the activated

00:08:22.954 --> 00:08:25.699
route and then also the service.

00:08:25.699 --> 00:08:28.069
So let's inject all of them

00:08:28.069 --> 00:08:33.710
private because we need
to navigate later on.

00:08:33.710 --> 00:08:36.754
So we would definitely need
the router imported comma.

00:08:36.754 --> 00:08:39.320
We need the activated
route so that we can

00:08:39.320 --> 00:08:42.980
retrieve the flight ID
that comes in the URL.

00:08:42.980 --> 00:08:47.150
Now, dot activated route comma.

00:08:47.150 --> 00:08:50.315
The last one is private service,

00:08:50.315 --> 00:08:53.990
colon reservation service
though that we can fetch

00:08:53.990 --> 00:08:59.464
the flight details
in the init method.

00:08:59.464 --> 00:09:02.705
We'll use this dot service,

00:09:02.705 --> 00:09:06.275
dot, get flight information.

00:09:06.275 --> 00:09:08.119
It's not get flights
this time get as

00:09:08.119 --> 00:09:09.949
single flight and we'll pass

00:09:09.949 --> 00:09:14.389
it the ID that comes in the URL.

00:09:14.389 --> 00:09:16.924
So the idea itself
can be retrieved

00:09:16.924 --> 00:09:20.030
using the this dot route,

00:09:20.030 --> 00:09:21.665
which points to the
activated route,

00:09:21.665 --> 00:09:24.410
that is the current
that is activated.

00:09:24.410 --> 00:09:33.034
Dot snapshot, dot,
params, map, dot, get.

00:09:33.034 --> 00:09:36.629
The name is IID.

00:09:36.940 --> 00:09:39.620
And we need to pass this because

00:09:39.620 --> 00:09:42.185
the get flight method
expects n number,

00:09:42.185 --> 00:09:45.605
number dot parse integer.

00:09:45.605 --> 00:09:49.249
And within brackets,
we are passing in

00:09:49.249 --> 00:09:53.790
the number dot subscribe.

00:09:55.120 --> 00:09:57.875
Handle the response right there.

00:09:57.875 --> 00:09:59.029
Inside the subtract, we get

00:09:59.029 --> 00:10:02.045
a response back arrow function.

00:10:02.045 --> 00:10:04.909
And we can assign that responds

00:10:04.909 --> 00:10:07.805
to a variable on this
component, this dot.

00:10:07.805 --> 00:10:13.199
Flight data is
equal to response.

00:10:13.480 --> 00:10:17.465
Define this fill up top here.

00:10:17.465 --> 00:10:23.729
Flight data colon any, save it.

00:10:23.890 --> 00:10:28.939
So in this lecture, you have
successfully configured,

00:10:28.939 --> 00:10:31.730
are injected the router which
we are going to use later,

00:10:31.730 --> 00:10:33.170
the activated route, which

00:10:33.170 --> 00:10:35.344
we have used it to fetch the id.

00:10:35.344 --> 00:10:38.434
Out of the route information
and then the service,

00:10:38.434 --> 00:10:41.704
which is responsible for
making a backend call.

00:10:41.704 --> 00:10:43.369
By taking the ID,

00:10:43.369 --> 00:10:44.960
it gets the flight data,

00:10:44.960 --> 00:10:47.990
which we have assigned to
the flight data variable.

00:10:47.990 --> 00:10:52.620
In the next lecture, we will
render this in the HTML.

00:10:53.710 --> 00:10:58.115
The next method is the
save reservation method.

00:10:58.115 --> 00:11:00.380
That is, we need to
make a backend call

00:11:00.380 --> 00:11:01.970
that will save the
reservation once

00:11:01.970 --> 00:11:04.235
the passenger enters
the passenger details

00:11:04.235 --> 00:11:06.290
and the card details,

00:11:06.290 --> 00:11:09.740
go to Visual Studio
Code and create

00:11:09.740 --> 00:11:11.869
this save reservation
method right

00:11:11.869 --> 00:11:14.630
here so that our component
can use it later on.

00:11:14.630 --> 00:11:17.704
Save reservation.

00:11:17.704 --> 00:11:20.299
And this will get
a parameter which

00:11:20.299 --> 00:11:22.370
is a object called reservation,

00:11:22.370 --> 00:11:23.779
which will have the
passenger details,

00:11:23.779 --> 00:11:26.149
the card information, et cetera.

00:11:26.149 --> 00:11:28.279
And this call is also simple.

00:11:28.279 --> 00:11:30.229
You can simply return

00:11:30.229 --> 00:11:32.885
the object that comes
back from the post call.

00:11:32.885 --> 00:11:38.219
This dot underscore HTTP post.

00:11:39.370 --> 00:11:41.690
Again, if you go back to

00:11:41.690 --> 00:11:46.264
Postman and go to the
post call right here,

00:11:46.264 --> 00:11:48.320
this is the body
we are passing in

00:11:48.320 --> 00:11:50.870
the flight ID and the
passenger information,

00:11:50.870 --> 00:11:52.804
and we get a response back,

00:11:52.804 --> 00:11:56.000
which will be a complete
reservation object.

00:11:56.000 --> 00:11:57.184
Whenever you hit send,

00:11:57.184 --> 00:11:59.059
you will get a complete
reservation object

00:11:59.059 --> 00:12:01.759
back The saved reservation.

00:12:01.759 --> 00:12:04.324
So here we need to
pass in the URL.

00:12:04.324 --> 00:12:08.329
So this dot the
reservation URL this time.

00:12:08.329 --> 00:12:11.945
So create another
field up top here.

00:12:11.945 --> 00:12:15.619
Copy this, paste it,

00:12:15.619 --> 00:12:20.150
call it reservation URL,

00:12:20.150 --> 00:12:23.120
flight services
slash reservations.

00:12:23.120 --> 00:12:24.319
We are adding a reservation

00:12:24.319 --> 00:12:26.104
to the reservation collection.

00:12:26.104 --> 00:12:33.304
Scroll down, use this
dot reservation URL,

00:12:33.304 --> 00:12:36.004
comma passenger
reservation object

00:12:36.004 --> 00:12:37.654
as the second parameter.

00:12:37.654 --> 00:12:39.814
So this object is nothing but

00:12:39.814 --> 00:12:44.420
this JSON which you
see on postmen.

00:12:44.420 --> 00:12:48.239
Once the response
comes back pipette.

00:12:48.640 --> 00:12:52.369
And within the pipe
method, use map.

00:12:52.369 --> 00:12:56.435
And the map is where
you map the response.

00:12:56.435 --> 00:12:59.869
Use RES arrow function,

00:12:59.869 --> 00:13:07.040
open it up and simply
return response dot js on.

00:13:07.040 --> 00:13:09.380
Here. I'm not handling
the error conditions.

00:13:09.380 --> 00:13:11.059
You know how to handle
the error conditions

00:13:11.059 --> 00:13:12.274
after the map method,

00:13:12.274 --> 00:13:14.405
you can have right here
within the map method.

00:13:14.405 --> 00:13:17.239
You can also map the error like

00:13:17.239 --> 00:13:20.974
this e IRR arrow function.

00:13:20.974 --> 00:13:22.430
And you can do whatever you

00:13:22.430 --> 00:13:23.809
want with the error right here,

00:13:23.809 --> 00:13:28.324
you can simply log it to the
console, console dot error.

00:13:28.324 --> 00:13:30.589
And the error that comes back.

00:13:30.589 --> 00:13:33.590
You can do the same for other
methods as well so that you

00:13:33.590 --> 00:13:37.040
can see the failure responses
when something goes wrong.

00:13:37.040 --> 00:13:38.765
You have successfully
implemented

00:13:38.765 --> 00:13:40.280
all the three key methods

00:13:40.280 --> 00:13:43.864
for the UI components
in the service.

00:13:43.864 --> 00:13:47.569
Get flights which will fetch
all the flight information

00:13:47.569 --> 00:13:49.519
once the passenger enters

00:13:49.519 --> 00:13:52.295
the criteria for
M21 departure city,

00:13:52.295 --> 00:13:56.869
and then get single flight
and then Create Reservation,

00:13:56.869 --> 00:14:00.720
which is the last service
that will be used.

00:14:01.540 --> 00:14:04.309
Before we go ahead and implement

00:14:04.309 --> 00:14:05.630
the various components and

00:14:05.630 --> 00:14:07.445
the screens for our application,

00:14:07.445 --> 00:14:10.369
let's configure
routing so that we can

00:14:10.369 --> 00:14:13.745
navigate through these
components as we implement them.

00:14:13.745 --> 00:14:15.424
To configure routing.

00:14:15.424 --> 00:14:18.020
Let's take the help of the
routing module lot Ts,

00:14:18.020 --> 00:14:19.775
which we have created earlier.

00:14:19.775 --> 00:14:23.420
Go to the product client
where you how configured

00:14:23.420 --> 00:14:27.275
routing earlier on
go-to source app,

00:14:27.275 --> 00:14:30.214
copy the routing module dot ts,

00:14:30.214 --> 00:14:32.974
and come back to our project,

00:14:32.974 --> 00:14:35.075
which is flight reservation,

00:14:35.075 --> 00:14:40.924
go-to source app, and paste
the routing module.js.

00:14:40.924 --> 00:14:44.405
Come back to Visual Studio
Code and you can open it up.

00:14:44.405 --> 00:14:45.949
Let's edit it.

00:14:45.949 --> 00:14:49.579
Get it off these four
components. We don't need them.

00:14:49.579 --> 00:14:51.530
Instead, the very
first component,

00:14:51.530 --> 00:14:55.175
let's name it as find flights.

00:14:55.175 --> 00:14:57.904
And this will be the
fine flights module,

00:14:57.904 --> 00:15:01.295
find flights component.

00:15:01.295 --> 00:15:03.229
And automatically
the import will

00:15:03.229 --> 00:15:05.015
be added here it is from

00:15:05.015 --> 00:15:09.485
the components folder or
the package or the module.

00:15:09.485 --> 00:15:14.495
The second one is
display flights.

00:15:14.495 --> 00:15:20.570
And the module is display
flights component.

00:15:20.570 --> 00:15:25.670
The third one is responsible
for the passenger details,

00:15:25.670 --> 00:15:27.395
for gathering the
passenger details.

00:15:27.395 --> 00:15:30.935
So let's call it
passenger details.

00:15:30.935 --> 00:15:34.160
Slash id.

00:15:34.160 --> 00:15:36.829
The passenger details to
display the passenger details,

00:15:36.829 --> 00:15:39.500
we need to pass
in the flight ID.

00:15:39.500 --> 00:15:40.879
If you go back to the screen,

00:15:40.879 --> 00:15:43.439
let me show you what this is.

00:15:43.960 --> 00:15:47.075
Search, you click on a flight.

00:15:47.075 --> 00:15:51.500
The flight ID will be passed
in as a part of this URL.

00:15:51.500 --> 00:15:55.310
So this flight ID you see
here will be binded to

00:15:55.310 --> 00:15:57.529
this ID and the
component will use

00:15:57.529 --> 00:16:00.515
it to display the
flight information.

00:16:00.515 --> 00:16:03.470
By fetching the flight
information for this id.

00:16:03.470 --> 00:16:06.320
So that is included
in the route there.

00:16:06.320 --> 00:16:12.139
And the component is
passenger details component.

00:16:12.139 --> 00:16:15.394
And the last one is the
confirmation component.

00:16:15.394 --> 00:16:18.844
And the confirmation
component also needs an ID.

00:16:18.844 --> 00:16:21.200
So forward slash colon ID,

00:16:21.200 --> 00:16:23.450
because when we enter

00:16:23.450 --> 00:16:26.120
the passenger
information hit Confirm.

00:16:26.120 --> 00:16:28.369
Reservation will be saved and

00:16:28.369 --> 00:16:30.274
we get a reservation ID back.

00:16:30.274 --> 00:16:33.410
That idea should we pass it
to the confirmation page or

00:16:33.410 --> 00:16:37.520
screen so that it can be
displayed to the end user.

00:16:37.520 --> 00:16:42.539
And this is the confirmation
complement component.

00:16:42.910 --> 00:16:46.519
Scroll up makes sure we got
all the defaults correct.

00:16:46.519 --> 00:16:48.499
So path is blank to

00:16:48.499 --> 00:16:51.665
blank automatically,
that is the default.

00:16:51.665 --> 00:16:55.294
And then path match is full.

00:16:55.294 --> 00:16:57.680
Scroll down, make sure we have

00:16:57.680 --> 00:17:00.155
the NG module, routing module.

00:17:00.155 --> 00:17:01.490
The routes are configured.

00:17:01.490 --> 00:17:03.770
So all the routes that
we are defining here

00:17:03.770 --> 00:17:06.919
as an array or being
passed to this,

00:17:06.919 --> 00:17:09.570
which will load them up.

00:17:11.740 --> 00:17:15.710
In this lecture, we will work
on the very first component

00:17:15.710 --> 00:17:19.655
that is responsible for
rendering the following UI.

00:17:19.655 --> 00:17:22.790
To do that, go to
Visual Studio Code,

00:17:22.790 --> 00:17:28.505
go to components and open
the find flights components,

00:17:28.505 --> 00:17:32.929
HTML page, control, a,
delete, everything.

00:17:32.929 --> 00:17:36.335
Maximize, start
typing in your HTML.

00:17:36.335 --> 00:17:41.639
Html within the
HTML header block.

00:17:41.890 --> 00:17:46.099
And then a body block.

00:17:46.099 --> 00:17:48.470
Within the body, we
are going to have

00:17:48.470 --> 00:17:50.599
a HTML form so that the user

00:17:50.599 --> 00:17:54.784
can submit this information
within the header,

00:17:54.784 --> 00:17:57.035
give it a title.

00:17:57.035 --> 00:18:04.369
And the title is find
flights within the body.

00:18:04.369 --> 00:18:06.259
Use a hitch to our H1.

00:18:06.259 --> 00:18:10.620
And the text also should
say find flights.

00:18:10.630 --> 00:18:12.890
And our HTML form.

00:18:12.890 --> 00:18:14.285
We'll start right here.

00:18:14.285 --> 00:18:18.749
The very first field
is from Colin.

00:18:19.120 --> 00:18:22.084
Input type is equal to,

00:18:22.084 --> 00:18:27.094
text, name is equal to from.

00:18:27.094 --> 00:18:30.094
And we can close it right there.

00:18:30.094 --> 00:18:34.699
Copy that, paste it
a couple more times.

00:18:34.699 --> 00:18:36.724
The second one is two,

00:18:36.724 --> 00:18:41.580
and the last one is
the departure date,

00:18:42.580 --> 00:18:45.140
followed by the submit button.

00:18:45.140 --> 00:18:49.549
So input type is
equal to submit,

00:18:49.549 --> 00:18:53.160
value is equal to search.

00:18:56.110 --> 00:18:58.550
That completes our form.

00:18:58.550 --> 00:19:00.694
And right next to the HTML here,

00:19:00.694 --> 00:19:05.689
let's add the router outlet,
router hyphen outlet.

00:19:05.689 --> 00:19:07.775
This is the one
which initializes

00:19:07.775 --> 00:19:11.360
all the routing and
our roots will be

00:19:11.360 --> 00:19:13.879
ready once you add this
to HTML and we should

00:19:13.879 --> 00:19:17.870
always add it to the starting
point of our application.

00:19:17.870 --> 00:19:19.970
So we have the form ready.

00:19:19.970 --> 00:19:25.980
Now let's make it angular
form by creating hash.

00:19:25.980 --> 00:19:28.524
Passenger form.

00:19:28.524 --> 00:19:30.670
Are, this is flight form.

00:19:30.670 --> 00:19:33.100
Find flights form.

00:19:33.100 --> 00:19:35.320
You can give it any
name you want is equal

00:19:35.320 --> 00:19:38.004
to within double-quotes
and G form.

00:19:38.004 --> 00:19:42.024
So here we are doing
template driven forms.

00:19:42.024 --> 00:19:43.540
And when this form is submitted,

00:19:43.540 --> 00:19:44.965
you're going to handle it using

00:19:44.965 --> 00:19:48.504
NG submit within brackets.

00:19:48.504 --> 00:19:53.559
And G submit is equal to within
double-quotes on submit.

00:19:53.559 --> 00:19:56.200
This method that we're
going to create inside

00:19:56.200 --> 00:19:58.314
the TypeScript file or the model

00:19:58.314 --> 00:20:01.059
of this component on Submit,

00:20:01.059 --> 00:20:08.220
person or the find
flights form dot value.

00:20:08.220 --> 00:20:10.190
We are passing
whatever name we are

00:20:10.190 --> 00:20:12.065
giving here to the form object.

00:20:12.065 --> 00:20:14.569
We are passing that
form object's value

00:20:14.569 --> 00:20:16.235
to this on submit button.

00:20:16.235 --> 00:20:19.850
So using this inside our
model or the TypeScript file,

00:20:19.850 --> 00:20:21.740
we can access all these fields

00:20:21.740 --> 00:20:23.629
when the user submits them.

00:20:23.629 --> 00:20:26.299
The names here should be two,

00:20:26.299 --> 00:20:30.980
and the last one
is departure date.

00:20:30.980 --> 00:20:32.930
So just to make sure we have

00:20:32.930 --> 00:20:34.309
got everything right
in this lecture,

00:20:34.309 --> 00:20:36.245
you have created F find flights

00:20:36.245 --> 00:20:39.349
HTML within which
we have a form.

00:20:39.349 --> 00:20:41.405
We have named that form.

00:20:41.405 --> 00:20:43.400
Find flights form.

00:20:43.400 --> 00:20:45.409
You have used N D form
so that Angular will

00:20:45.409 --> 00:20:47.584
create an instance
of form group here.

00:20:47.584 --> 00:20:49.775
When we do something like this,

00:20:49.775 --> 00:20:51.574
it has three fields.

00:20:51.574 --> 00:20:53.599
And when this form is submitted,

00:20:53.599 --> 00:20:55.775
when the user clicks
the Submit button,

00:20:55.775 --> 00:20:58.910
the onsubmit method
of the model will be

00:20:58.910 --> 00:21:02.940
invoked and the firm's
value will be passed to it.

00:21:03.850 --> 00:21:08.150
In this lecture, we will
bind our HTML form to

00:21:08.150 --> 00:21:10.280
the model so that
we can retrieve

00:21:10.280 --> 00:21:12.949
this inside our model classes.

00:21:12.949 --> 00:21:14.629
To do that, you
know how to do it.

00:21:14.629 --> 00:21:17.464
You can either use two-way
binding or one-way binding.

00:21:17.464 --> 00:21:20.389
To use two-way binding,
use square brackets.

00:21:20.389 --> 00:21:22.864
Within that use normal brackets.

00:21:22.864 --> 00:21:25.489
And within those,
we will specify

00:21:25.489 --> 00:21:31.729
the model or NG model is
the directive is equal to.

00:21:31.729 --> 00:21:33.890
From, so this is how

00:21:33.890 --> 00:21:36.680
the data will be available
inside the model.

00:21:36.680 --> 00:21:38.599
Grabbed that this is

00:21:38.599 --> 00:21:39.860
the variable name
through which we can

00:21:39.860 --> 00:21:42.004
retrieve that data
inside of our model,

00:21:42.004 --> 00:21:44.360
based it on the
other two as well.

00:21:44.360 --> 00:21:49.369
This is two and the last
one is departure date.

00:21:49.369 --> 00:21:51.600
Save it.

00:21:53.620 --> 00:21:56.690
In this lecture, we
will handle the button

00:21:56.690 --> 00:21:59.810
click when the user enter
some information here.

00:21:59.810 --> 00:22:02.555
And when he clicks
the Search button,

00:22:02.555 --> 00:22:04.999
we should fetch all
the flight details

00:22:04.999 --> 00:22:07.489
by using this service
that we already have.

00:22:07.489 --> 00:22:09.830
So to do that, go to
Visual Studio Code

00:22:09.830 --> 00:22:11.734
or to the components model,

00:22:11.734 --> 00:22:16.114
the TypeScript file, and

00:22:16.114 --> 00:22:21.619
add the onsubmit method
public on Submit.

00:22:21.619 --> 00:22:24.784
Let's say data is
the parameter name.

00:22:24.784 --> 00:22:28.775
We can have this after
the NG on in it.

00:22:28.775 --> 00:22:32.824
Just the harder the
readability purposes.

00:22:32.824 --> 00:22:34.610
And within the onsubmit,

00:22:34.610 --> 00:22:36.859
we can retrieve all
the form information,

00:22:36.859 --> 00:22:38.660
whatever the user submits here.

00:22:38.660 --> 00:22:40.534
Through this data.

00:22:40.534 --> 00:22:42.694
You can invoke the service.

00:22:42.694 --> 00:22:44.209
In this, we need the access to

00:22:44.209 --> 00:22:46.970
the service component that
we have created earlier.

00:22:46.970 --> 00:22:54.110
So in the constructor,
private service, colon,

00:22:54.110 --> 00:22:57.124
reservation service,

00:22:57.124 --> 00:22:59.599
there's a service which
we have created earlier

00:22:59.599 --> 00:23:02.119
under services that is
automatically imported and it will

00:23:02.119 --> 00:23:05.449
be injected in here.
And on submit.

00:23:05.449 --> 00:23:12.260
This dot surveys, dot get
flights is the method.

00:23:12.260 --> 00:23:14.780
And the get flights
take three parameters.

00:23:14.780 --> 00:23:20.165
Data dot from data
dot to come on,

00:23:20.165 --> 00:23:23.390
data dot, departure date.

00:23:23.390 --> 00:23:26.359
So these three from two
and departure date are

00:23:26.359 --> 00:23:29.120
the input field names that

00:23:29.120 --> 00:23:32.254
we have given here from
one departure date.

00:23:32.254 --> 00:23:35.910
This data represents
the HTML form.

00:23:36.070 --> 00:23:38.225
Once you invoke the method,

00:23:38.225 --> 00:23:41.690
you should use dot subscribe
because except promise,

00:23:41.690 --> 00:23:44.719
dot subscribe within
brackets handle

00:23:44.719 --> 00:23:49.049
the response with
the arrow function.

00:23:49.780 --> 00:23:52.939
And we can assign this

00:23:52.939 --> 00:23:54.859
corresponds to our
arrow function

00:23:54.859 --> 00:23:56.540
or simply invoke this method.

00:23:56.540 --> 00:23:58.489
And whatever comes back

00:23:58.489 --> 00:24:00.454
will be saved if you go
back to the get flight,

00:24:00.454 --> 00:24:02.554
the way we have quoted
it in the service,

00:24:02.554 --> 00:24:04.850
get flights is not
returning anything.

00:24:04.850 --> 00:24:08.509
Instead, it will assign
the flight data that comes

00:24:08.509 --> 00:24:10.279
back in the response
to a flight data

00:24:10.279 --> 00:24:12.935
variable inside of the service.

00:24:12.935 --> 00:24:15.125
So this will be available to

00:24:15.125 --> 00:24:17.240
any component that
uses the service.

00:24:17.240 --> 00:24:18.289
Once we fetch the data,

00:24:18.289 --> 00:24:19.999
it will be in there
and we can use

00:24:19.999 --> 00:24:22.024
it in the next
component as well.

00:24:22.024 --> 00:24:23.734
So what we're going to do here,

00:24:23.734 --> 00:24:28.654
simply route to
another page here,

00:24:28.654 --> 00:24:30.484
will not be using the data.

00:24:30.484 --> 00:24:31.939
Here, the data will be used in

00:24:31.939 --> 00:24:34.715
the display flight
details component,

00:24:34.715 --> 00:24:36.380
which you are going to go next.

00:24:36.380 --> 00:24:39.275
So now what we need to do
here is to route this.

00:24:39.275 --> 00:24:41.000
We need a router,

00:24:41.000 --> 00:24:42.560
go to the constructor,

00:24:42.560 --> 00:24:46.219
private router,

00:24:46.219 --> 00:24:52.460
colon router from Angular,
router, import that.

00:24:52.460 --> 00:24:54.620
And once the responses back,

00:24:54.620 --> 00:24:57.499
we're going to say
this dot router,

00:24:57.499 --> 00:25:04.159
dot navigate within
single quotes,

00:25:04.159 --> 00:25:06.560
within square brackets.

00:25:06.560 --> 00:25:09.650
Navigate to display flights.

00:25:09.650 --> 00:25:11.629
Display flights.

00:25:11.629 --> 00:25:13.759
If you go back to
the router conflict,

00:25:13.759 --> 00:25:16.400
the component that
is responsible for

00:25:16.400 --> 00:25:19.265
displaying the flights is
mapped to display flights.

00:25:19.265 --> 00:25:22.850
So that is where we are
navigating it to onsubmit.

00:25:22.850 --> 00:25:24.410
We are taking the form data,

00:25:24.410 --> 00:25:25.714
passing it to the service.

00:25:25.714 --> 00:25:26.900
The service will make up,

00:25:26.900 --> 00:25:28.219
make a backend call.

00:25:28.219 --> 00:25:29.600
By using this information,

00:25:29.600 --> 00:25:31.175
it fetches the data.

00:25:31.175 --> 00:25:34.384
It will store it in a
variable inside the service

00:25:34.384 --> 00:25:35.840
so that it can be accessed in

00:25:35.840 --> 00:25:38.030
any component that
uses this service.

00:25:38.030 --> 00:25:40.864
And we are forwarding
to display flights.

00:25:40.864 --> 00:25:43.369
And that data can be
used whether display

00:25:43.369 --> 00:25:46.459
flights component
to render this UI,

00:25:46.459 --> 00:25:49.200
which we'll do in
the next lecture.

00:25:50.190 --> 00:25:53.079
In this lecture, we
will start coding

00:25:53.079 --> 00:25:55.675
the passenger details HTML.

00:25:55.675 --> 00:25:59.169
So go to find flights or
any of the previous HTML's.

00:25:59.169 --> 00:26:01.284
Copy the contents of it.

00:26:01.284 --> 00:26:07.570
Come back to the passenger
details HTML component,

00:26:07.570 --> 00:26:10.645
HTML paste that
changed the title to

00:26:10.645 --> 00:26:14.830
either complete preservation
or passenger details.

00:26:14.830 --> 00:26:17.050
Either of those are fine.

00:26:17.050 --> 00:26:20.500
And that H2 should be complete.

00:26:20.500 --> 00:26:23.575
Reserve vacation.

00:26:23.575 --> 00:26:25.179
You can clean up this form.

00:26:25.179 --> 00:26:26.544
We need forms later on,

00:26:26.544 --> 00:26:29.649
on this page, but we will
add them later as required.

00:26:29.649 --> 00:26:32.610
The first thing we're
going to display is the

00:26:32.610 --> 00:26:35.614
Flight details so that
the passenger can

00:26:35.614 --> 00:26:37.070
see and confirm that that

00:26:37.070 --> 00:26:39.364
is the flight he
wants to fly on.

00:26:39.364 --> 00:26:45.350
Airline. To start
with airline colon,

00:26:45.350 --> 00:26:48.920
use the string
interpolation syntax.

00:26:48.920 --> 00:26:54.094
We can access flight data
from the component dot.

00:26:54.094 --> 00:26:59.885
Operating. Airlines is
the first information.

00:26:59.885 --> 00:27:00.350
Here.

00:27:00.350 --> 00:27:03.035
It should be airline or
airlines, that's fine here,

00:27:03.035 --> 00:27:04.655
use a question mark that is,

00:27:04.655 --> 00:27:06.289
if the call asynchronous

00:27:06.289 --> 00:27:07.984
call to the backend
is not complete.

00:27:07.984 --> 00:27:11.060
We do not want to render
that data as undefined.

00:27:11.060 --> 00:27:13.130
Get rid of the unwanted brace.

00:27:13.130 --> 00:27:16.025
Copy this before copying it,

00:27:16.025 --> 00:27:20.915
add a line break at the
end BR, close that BR.

00:27:20.915 --> 00:27:26.104
Now copied that line and
paste it three more times.

00:27:26.104 --> 00:27:30.079
The second one is
the departure city.

00:27:30.079 --> 00:27:32.944
The third guy is
the arrival city,

00:27:32.944 --> 00:27:36.364
and the last one
is the departure.

00:27:36.364 --> 00:27:39.599
Date or date time.

00:27:41.590 --> 00:27:44.629
Change it appropriately
on the right side.

00:27:44.629 --> 00:27:48.294
The second one is
departure city.

00:27:48.294 --> 00:27:51.574
Third is arrival city,

00:27:51.574 --> 00:27:56.764
and the last one is
date of departure.

00:27:56.764 --> 00:28:00.470
Save it if you go
back to the UI now,

00:28:00.470 --> 00:28:03.380
there we go, The flight
details are displayed.

00:28:03.380 --> 00:28:04.474
Let's come from the beginning,

00:28:04.474 --> 00:28:06.380
osteon to New York.

00:28:06.380 --> 00:28:08.149
The departure date
is September 5th.

00:28:08.149 --> 00:28:09.860
Search the flights
are displayed.

00:28:09.860 --> 00:28:11.585
You click on the Select button.

00:28:11.585 --> 00:28:14.374
Only the flight details
are displayed currently,

00:28:14.374 --> 00:28:16.610
we are going to change it.

00:28:16.610 --> 00:28:18.980
So that will also have

00:28:18.980 --> 00:28:21.319
the passenger information form

00:28:21.319 --> 00:28:23.449
and the credit card
information as well.

00:28:23.449 --> 00:28:25.159
We are going to collect
all that information

00:28:25.159 --> 00:28:26.915
from the end user,

00:28:26.915 --> 00:28:29.119
since we are only
displaying the date here,

00:28:29.119 --> 00:28:31.235
we can change this
field name too.

00:28:31.235 --> 00:28:33.245
Departure, date.

00:28:33.245 --> 00:28:34.999
This is date of departure if

00:28:34.999 --> 00:28:36.230
you want the time you can get it

00:28:36.230 --> 00:28:39.020
from estimated departure time.

00:28:39.020 --> 00:28:40.174
If you go to the
database, there is

00:28:40.174 --> 00:28:42.439
an estimated departure time,

00:28:42.439 --> 00:28:45.425
so you can use that and
display it right now,

00:28:45.425 --> 00:28:48.059
let's change it to
departure date.

00:28:49.060 --> 00:28:53.315
Before we go ahead and code
the rest of the application,

00:28:53.315 --> 00:28:55.069
lets bootstrap our application

00:28:55.069 --> 00:28:56.779
that is configure everything in

00:28:56.779 --> 00:29:00.665
the app dot module
dot PS and test it.

00:29:00.665 --> 00:29:03.920
Opened up the app dot
module.js. Maximize it.

00:29:03.920 --> 00:29:06.905
We have all the component
declarations already.

00:29:06.905 --> 00:29:08.840
Imports is what we need.

00:29:08.840 --> 00:29:10.280
Along with the browser module,

00:29:10.280 --> 00:29:13.340
we need the HTTP module,

00:29:13.340 --> 00:29:18.444
comma, the app router
module. Select that.

00:29:18.444 --> 00:29:21.559
Let's do the HTTP module once
again so that we can import

00:29:21.559 --> 00:29:25.354
it the HTTP module
from Angular HTTP,

00:29:25.354 --> 00:29:28.444
the app router module, comma,

00:29:28.444 --> 00:29:31.769
the forms module.

00:29:32.980 --> 00:29:36.029
Forms module.

00:29:36.250 --> 00:29:38.509
If you can't find the import,

00:29:38.509 --> 00:29:40.234
we know where to add it from.

00:29:40.234 --> 00:29:48.380
Import forms, module from space.

00:29:48.380 --> 00:29:52.865
At angular slash forms.

00:29:52.865 --> 00:29:55.355
Let's semicolon at the end.

00:29:55.355 --> 00:29:57.125
So all the declarations
are in place,

00:29:57.125 --> 00:29:58.355
imports are in place.

00:29:58.355 --> 00:30:01.939
The providers is where
the services should go.

00:30:01.939 --> 00:30:03.620
The only service we have is

00:30:03.620 --> 00:30:06.470
the reservation service that

00:30:06.470 --> 00:30:08.840
will be automatically
imported and the bootstrap,

00:30:08.840 --> 00:30:11.149
we don't want the app
component because we are

00:30:11.149 --> 00:30:13.834
not doing anything in
the default component,

00:30:13.834 --> 00:30:17.240
which would be the find
flights component,

00:30:17.240 --> 00:30:19.489
that should be the
very first component

00:30:19.489 --> 00:30:20.989
that should be rendered,

00:30:20.989 --> 00:30:23.179
which will display the UI.

00:30:23.179 --> 00:30:25.415
So in this lecture,
you have successfully

00:30:25.415 --> 00:30:28.669
configured everything in
the app dot module dot ds,

00:30:28.669 --> 00:30:33.095
starting with the imports
and then the services,

00:30:33.095 --> 00:30:36.029
as well as the
Bootstrap component.

00:30:36.990 --> 00:30:41.289
In this lecture, we will see
our application in action.

00:30:41.289 --> 00:30:44.109
To do that, we need to
make a small change to the

00:30:44.109 --> 00:30:46.435
index.html and fix a few things

00:30:46.435 --> 00:30:48.970
inside our reservation service.

00:30:48.970 --> 00:30:50.965
Close everything.

00:30:50.965 --> 00:30:53.649
Go to index dot HTML,

00:30:53.649 --> 00:30:55.705
which is the starting
point of our application.

00:30:55.705 --> 00:30:58.209
Get rid off this app route
because we're not using

00:30:58.209 --> 00:31:01.255
the default component
that gets generated.

00:31:01.255 --> 00:31:03.745
Code to find flights, model.

00:31:03.745 --> 00:31:07.090
Scroll up, grab the selector.

00:31:07.090 --> 00:31:09.520
App, python, find
hyphen flights.

00:31:09.520 --> 00:31:12.460
Come back to the
index.html within body,

00:31:12.460 --> 00:31:15.415
open up a new element.

00:31:15.415 --> 00:31:18.760
So that should be the starting
point of our application.

00:31:18.760 --> 00:31:22.645
Scroll up, open the
reservation service dot PS.

00:31:22.645 --> 00:31:25.794
There are few fixes that
we need to make here.

00:31:25.794 --> 00:31:31.329
Flight services in the URL
should be all lowercase,

00:31:31.329 --> 00:31:33.850
no camelCase, all lowercase.

00:31:33.850 --> 00:31:36.295
Next come to the
get flights method.

00:31:36.295 --> 00:31:38.229
In this URL.

00:31:38.229 --> 00:31:40.134
After the departure date,

00:31:40.134 --> 00:31:41.770
there should be a is equal to

00:31:41.770 --> 00:31:44.215
sin if you have water that
right, You are awesome.

00:31:44.215 --> 00:31:47.199
Also add a return statement
right at the beginning.

00:31:47.199 --> 00:31:49.269
If not, it will not work.

00:31:49.269 --> 00:31:51.160
Then the component
tries to invoke this.

00:31:51.160 --> 00:31:53.365
It will not get anything back.

00:31:53.365 --> 00:31:58.269
And this JSON here should be
a function, not a variable.

00:31:58.269 --> 00:31:59.590
If you scroll down, we have got

00:31:59.590 --> 00:32:01.274
it right. In other places.

00:32:01.274 --> 00:32:03.169
But in get flights,

00:32:03.169 --> 00:32:06.919
make sure you how
parenthesis at the end.

00:32:06.919 --> 00:32:09.320
So those seniors, once
you make those fixes,

00:32:09.320 --> 00:32:12.214
go to the console or
whatever command line,

00:32:12.214 --> 00:32:14.720
make sure you are under
the project directory,

00:32:14.720 --> 00:32:15.994
flight reservation,

00:32:15.994 --> 00:32:21.439
and G hyphen 0 to run
that application.

00:32:21.439 --> 00:32:23.120
While it builds.

00:32:23.120 --> 00:32:26.089
Let me quickly summarize
what we have done so far.

00:32:26.089 --> 00:32:30.724
We have created a flight
reservation project

00:32:30.724 --> 00:32:32.764
with four components.

00:32:32.764 --> 00:32:34.940
And as surveys,
you also configure

00:32:34.940 --> 00:32:37.250
the routing for the component
within the service.

00:32:37.250 --> 00:32:38.180
There are three methods.

00:32:38.180 --> 00:32:40.429
The first method features
all the flights that match

00:32:40.429 --> 00:32:42.980
the criteria which we
have already used.

00:32:42.980 --> 00:32:45.395
The get flight
with an ID returns

00:32:45.395 --> 00:32:47.885
only one flight by
making a backend call,

00:32:47.885 --> 00:32:50.119
which we will use in
the next few lectures.

00:32:50.119 --> 00:32:52.460
And finally, the
save reservation.

00:32:52.460 --> 00:32:54.485
That will save the
entire reservation

00:32:54.485 --> 00:32:56.540
by making it a rest call.

00:32:56.540 --> 00:32:58.129
Go back to our browser.

00:32:58.129 --> 00:32:58.910
There we go.

00:32:58.910 --> 00:33:01.879
These are first UI page from

00:33:01.879 --> 00:33:06.609
Austin to New York and the
departure date is September 5,

00:33:06.609 --> 00:33:09.994
2018 because that is the
data I have in the database.

00:33:09.994 --> 00:33:13.369
This criteria will match
at least four flights.

00:33:13.369 --> 00:33:14.794
Hit the search button,

00:33:14.794 --> 00:33:16.040
and there we go.

00:33:16.040 --> 00:33:18.275
The display flights component

00:33:18.275 --> 00:33:21.290
renders all the flight
onto the screen.

00:33:21.290 --> 00:33:24.169
In the next lecture, we
will add a select here

00:33:24.169 --> 00:33:28.409
so that the passenger
can pick f flight.

00:33:29.050 --> 00:33:32.420
In this lecture, we will
allow the end user to

00:33:32.420 --> 00:33:35.494
pick a flight from
the search results.

00:33:35.494 --> 00:33:38.750
To do that, go to their
display component.

00:33:38.750 --> 00:33:41.749
Open up the HTML which
is rendering the

00:33:41.749 --> 00:33:44.329
data are and new column copy

00:33:44.329 --> 00:33:45.934
the last column, paste it.

00:33:45.934 --> 00:33:49.760
We don't need this string
interpolation syntax. Open.

00:33:49.760 --> 00:33:51.754
An H ref.

00:33:51.754 --> 00:33:55.189
Select is what the
texts that should be

00:33:55.189 --> 00:33:58.070
displayed within the
H ref will handle

00:33:58.070 --> 00:34:02.750
the click event using the
Angular syntax click is equal

00:34:02.750 --> 00:34:08.030
to provide Type Script
function here on select.

00:34:08.030 --> 00:34:09.889
Within brackets, we need to pass

00:34:09.889 --> 00:34:12.770
the flight ID to this function.

00:34:12.770 --> 00:34:18.064
So we can do that
using flight dot id.

00:34:18.064 --> 00:34:21.349
So flight is the object that
we're getting from here.

00:34:21.349 --> 00:34:24.080
Dot id will give us the idea of

00:34:24.080 --> 00:34:28.055
the flight that will go
to our TypeScript file,

00:34:28.055 --> 00:34:32.420
open up the TypeScript
and add public

00:34:32.420 --> 00:34:35.600
on Select function that

00:34:35.600 --> 00:34:38.960
takes an ID which
is of type number,

00:34:38.960 --> 00:34:42.605
and it returns any type back.

00:34:42.605 --> 00:34:47.705
Within this function, we
will make navigation call.

00:34:47.705 --> 00:34:51.620
So we need a router here
to the constructor.

00:34:51.620 --> 00:34:59.794
Inject the router comma
private route colon

00:34:59.794 --> 00:35:03.919
of type router from
Angular router.

00:35:03.919 --> 00:35:05.360
And once we have it,

00:35:05.360 --> 00:35:10.895
use router dot navigate

00:35:10.895 --> 00:35:15.540
should say this dot
router dot navigate.

00:35:15.610 --> 00:35:19.190
Within brackets, within
square brackets,

00:35:19.190 --> 00:35:21.815
within single quotes slash

00:35:21.815 --> 00:35:26.435
passenger details
is the next screen.

00:35:26.435 --> 00:35:30.455
And while doing
that forward slash,

00:35:30.455 --> 00:35:32.914
we can do a plus ID.

00:35:32.914 --> 00:35:34.409
Here.

00:35:35.080 --> 00:35:39.559
We're passing in the id that
comes along with the URL.

00:35:39.559 --> 00:35:41.389
There are multiple ways
in which we can do this.

00:35:41.389 --> 00:35:43.894
You can use comma and
then pass the ID or

00:35:43.894 --> 00:35:48.244
append it to the path that
we want it to navigate to.

00:35:48.244 --> 00:35:51.695
So it's very simple
onclick off this select.

00:35:51.695 --> 00:35:54.184
It should be navigated
to the next page

00:35:54.184 --> 00:35:56.660
wherein the flight details
should be displayed.

00:35:56.660 --> 00:35:59.030
And also the end-user
or the passenger

00:35:59.030 --> 00:36:01.370
should be able to enter
the passenger details.

00:36:01.370 --> 00:36:04.110
That's the screen that
should be generated.

00:36:04.600 --> 00:36:08.419
So go back to the
very first page,

00:36:08.419 --> 00:36:10.785
do a search. Again.

00:36:10.785 --> 00:36:12.609
Search.

00:36:12.609 --> 00:36:15.325
There we go. We have the
select onclick of this select.

00:36:15.325 --> 00:36:17.514
It will go to the next screen.

00:36:17.514 --> 00:36:20.020
Right now it says
passenger detail works,

00:36:20.020 --> 00:36:22.044
but we will change that
in the next lecture.

00:36:22.044 --> 00:36:24.220
Get the flight details by making

00:36:24.220 --> 00:36:28.400
a backend call and display
that flight information.

00:36:29.220 --> 00:36:32.109
In the previous lecture,
you how I implemented

00:36:32.109 --> 00:36:35.229
the flights method in the
surveys that will fetch

00:36:35.229 --> 00:36:36.820
all the flights that match

00:36:36.820 --> 00:36:38.980
the criteria which the component

00:36:38.980 --> 00:36:40.809
will render onto the screen when

00:36:40.809 --> 00:36:43.044
we work on the
component later on.

00:36:43.044 --> 00:36:45.579
The next service method is

00:36:45.579 --> 00:36:48.580
the method that will fetch a
single flight information.

00:36:48.580 --> 00:36:51.880
That is when a user or the
passenger selects a flight,

00:36:51.880 --> 00:36:53.880
it should fetch
this information,

00:36:53.880 --> 00:36:56.660
display it so that the
component can use it.

00:36:56.660 --> 00:36:58.279
And then he will enter

00:36:58.279 --> 00:37:00.590
the passenger details
on the card details.

00:37:00.590 --> 00:37:03.409
So the next service method
is the method that fetches

00:37:03.409 --> 00:37:07.490
a single flight details
given a flight ID.

00:37:07.490 --> 00:37:10.040
So go back to
Visual Studio Code.

00:37:10.040 --> 00:37:12.155
Start with the next method.

00:37:12.155 --> 00:37:15.184
Let me add some spaces here
so that you can see it.

00:37:15.184 --> 00:37:19.414
Public flight this time
instead of flights,

00:37:19.414 --> 00:37:24.995
It's a single flight wherein
an ID is passed in of type,

00:37:24.995 --> 00:37:26.629
a response of type any will

00:37:26.629 --> 00:37:28.175
be returned back because again,

00:37:28.175 --> 00:37:29.569
the JSON will go back.

00:37:29.569 --> 00:37:31.670
You can simply add return.

00:37:31.670 --> 00:37:35.339
This dot underscore HTTP.

00:37:37.570 --> 00:37:40.219
Dot get method again,

00:37:40.219 --> 00:37:42.440
but this time we'll
use the distort

00:37:42.440 --> 00:37:47.419
flight URL plus within

00:37:47.419 --> 00:37:50.690
double-quotes forward
slash cluster ID.

00:37:50.690 --> 00:37:52.159
If you remember,
if you go back to

00:37:52.159 --> 00:37:54.784
Postman to fetch
a single flight,

00:37:54.784 --> 00:37:56.839
this is how the URL
will look like.

00:37:56.839 --> 00:37:59.374
Flight services slash flights,

00:37:59.374 --> 00:38:05.165
slash one, which is the ID
of the flight path variable.

00:38:05.165 --> 00:38:07.189
So this is how we should pass in

00:38:07.189 --> 00:38:10.535
the flight URL ends with
flight services slash,

00:38:10.535 --> 00:38:12.650
flight slash id is

00:38:12.650 --> 00:38:16.280
the path variable that
we're sending there.

00:38:16.280 --> 00:38:18.559
Then whatever
response comes back,

00:38:18.559 --> 00:38:21.395
you need to pipette.

00:38:21.395 --> 00:38:25.520
And within the pipe
method map the response,

00:38:25.520 --> 00:38:32.464
RES, return,

00:38:32.464 --> 00:38:36.755
response dot JSON. That's it.

00:38:36.755 --> 00:38:39.679
So the fight and flight or
get flight is really simple.

00:38:39.679 --> 00:38:41.329
You take the ID, make

00:38:41.329 --> 00:38:44.285
the backend call using that
ID as a path variable,

00:38:44.285 --> 00:38:46.115
whatever response comes back,

00:38:46.115 --> 00:38:49.529
we are returning
that responds back.

00:38:50.290 --> 00:38:52.789
The next step is to display

00:38:52.789 --> 00:38:56.510
the flight details that is
rendered the following UI.

00:38:56.510 --> 00:39:00.425
To do that, go to the
display flights component,

00:39:00.425 --> 00:39:01.939
go to the TypeScript file,

00:39:01.939 --> 00:39:05.165
the model class in
the NG in it here,

00:39:05.165 --> 00:39:07.909
we need to invoke
or use the service.

00:39:07.909 --> 00:39:09.110
The service already has

00:39:09.110 --> 00:39:11.195
the data because in our
previous component,

00:39:11.195 --> 00:39:12.890
we have loaded the data and it

00:39:12.890 --> 00:39:14.839
is available on this service.

00:39:14.839 --> 00:39:17.885
So simply inject the
service in here.

00:39:17.885 --> 00:39:24.514
Private service, colon,
reservation service.

00:39:24.514 --> 00:39:28.010
Once that is injected in
the NG on init method,

00:39:28.010 --> 00:39:31.100
we are going to
say this dot data,

00:39:31.100 --> 00:39:33.050
this variable is not defined it,

00:39:33.050 --> 00:39:34.129
we are going to define it.

00:39:34.129 --> 00:39:36.500
This dot data is
equal to this dot

00:39:36.500 --> 00:39:40.309
service dot flight data.

00:39:40.309 --> 00:39:42.169
So this data is already

00:39:42.169 --> 00:39:44.119
fetched and it is
available like this.

00:39:44.119 --> 00:39:46.820
We are assigning it to this
component so that we can use

00:39:46.820 --> 00:39:50.540
it in the HTML template
of this component.

00:39:50.540 --> 00:39:53.734
Define a field
called data colon.

00:39:53.734 --> 00:39:55.264
Any.

00:39:55.264 --> 00:39:57.499
Now go to the template or

00:39:57.499 --> 00:39:59.465
the HTML file off
this component,

00:39:59.465 --> 00:40:02.225
which will render all
the flight information,

00:40:02.225 --> 00:40:07.025
control a, delete
everything, maximize.

00:40:07.025 --> 00:40:09.380
You can grab the
previous HTML by

00:40:09.380 --> 00:40:11.554
going to find flights HTML.

00:40:11.554 --> 00:40:13.535
So that will reduce
some work for us.

00:40:13.535 --> 00:40:16.835
Control a, come back
to the display,

00:40:16.835 --> 00:40:20.840
flights dot HTML to
a control a paste.

00:40:20.840 --> 00:40:23.539
The HTML changed the title to

00:40:23.539 --> 00:40:25.549
flights because this is going to

00:40:25.549 --> 00:40:27.694
display the flights
within the body.

00:40:27.694 --> 00:40:30.469
Get rid off, find
flights is fine.

00:40:30.469 --> 00:40:31.939
We don't need a form.

00:40:31.939 --> 00:40:36.509
Get it off that, and also get
rid off the router outlet.

00:40:36.670 --> 00:40:40.055
We're going to
generate an HTML table

00:40:40.055 --> 00:40:42.634
that will render this UI.

00:40:42.634 --> 00:40:44.210
So this is the first row with

00:40:44.210 --> 00:40:45.965
all the table
headings, airlines,

00:40:45.965 --> 00:40:50.075
departure city, arrival
city, and departure time.

00:40:50.075 --> 00:40:52.969
So within the table, TR.

00:40:52.969 --> 00:40:55.850
Within the TR, th,

00:40:55.850 --> 00:41:00.005
the first one is airlines.

00:41:00.005 --> 00:41:04.290
Copy that, paste it three times.

00:41:04.290 --> 00:41:07.689
Second is departure.

00:41:07.689 --> 00:41:12.385
City is the rival city.

00:41:12.385 --> 00:41:15.189
Next, departure, date,

00:41:15.189 --> 00:41:18.475
time or time,
departure, date, time.

00:41:18.475 --> 00:41:21.445
The second row is where the data

00:41:21.445 --> 00:41:24.234
will be rendered.
Within the second row.

00:41:24.234 --> 00:41:26.509
Use at TD.

00:41:26.940 --> 00:41:29.859
Use the string
interpolation syntax

00:41:29.859 --> 00:41:32.410
or the expression which
displays the data.

00:41:32.410 --> 00:41:34.254
To get the data itself,

00:41:34.254 --> 00:41:37.225
this TR will be
generated dynamically,

00:41:37.225 --> 00:41:38.574
so it will be repeated for

00:41:38.574 --> 00:41:41.484
each flight that
matches the criteria.

00:41:41.484 --> 00:41:45.355
Will use MDG4 within this row.

00:41:45.355 --> 00:41:46.995
Use anglers.

00:41:46.995 --> 00:41:52.175
And G4 directive is equal
to within double-quotes.

00:41:52.175 --> 00:41:56.705
Let flight of data.

00:41:56.705 --> 00:41:59.270
This data is what we have

00:41:59.270 --> 00:42:01.700
defined here in the
component in the model.

00:42:01.700 --> 00:42:03.665
And then we are
getting that data,

00:42:03.665 --> 00:42:05.014
looping through that data.

00:42:05.014 --> 00:42:07.849
Every time we loop
through will display

00:42:07.849 --> 00:42:13.039
flight dot operating airlines.

00:42:13.039 --> 00:42:15.289
If you go back to your
spring tool suit,

00:42:15.289 --> 00:42:18.934
here, the information, the
flight data that comes back.

00:42:18.934 --> 00:42:20.705
If you look at the
flight object,

00:42:20.705 --> 00:42:22.429
it is operating airlines,

00:42:22.429 --> 00:42:26.179
departure city, arrival
city and date of departure.

00:42:26.179 --> 00:42:29.760
So go back, copy this column,

00:42:30.120 --> 00:42:34.120
paste it three more times.

00:42:34.120 --> 00:42:38.170
The second one is
the departure city.

00:42:38.170 --> 00:42:41.574
Third one is the arrival city.

00:42:41.574 --> 00:42:50.169
And the last one is
estimated departure time.

00:42:50.169 --> 00:42:53.680
Estimated departure time.

00:42:53.680 --> 00:42:56.005
That is what we need.

00:42:56.005 --> 00:42:57.399
So that's it.

00:42:57.399 --> 00:42:59.380
So here we are taking

00:42:59.380 --> 00:43:02.215
the information that comes
back from the back-end,

00:43:02.215 --> 00:43:03.955
which was fetched in
the previous component,

00:43:03.955 --> 00:43:07.520
and then we are simply
rendering it onto the y.

00:43:08.100 --> 00:43:11.609
The next step is to
allow the end-user to.

00:43:11.609 --> 00:43:13.699
And enter the
passenger details and

00:43:13.699 --> 00:43:16.429
the credit card information
for the payment.

00:43:16.429 --> 00:43:18.575
So go back to the HTML,

00:43:18.575 --> 00:43:24.750
add another H2 which
says passenger details.

00:43:26.620 --> 00:43:30.499
And create a HTML form
which we are going

00:43:30.499 --> 00:43:34.040
to bind using all the angular
stuff within the form.

00:43:34.040 --> 00:43:37.654
Use a pre so that our elements
are ordered correctly.

00:43:37.654 --> 00:43:39.679
Get rid of the PR.

00:43:39.679 --> 00:43:41.840
And within the pre,

00:43:41.840 --> 00:43:44.345
the first thing
we need to gather

00:43:44.345 --> 00:43:46.654
is the passengers firstName.

00:43:46.654 --> 00:43:53.164
Colon. Input type
is equal to xt.

00:43:53.164 --> 00:44:00.599
My name is equal to
passenger first name.

00:44:00.610 --> 00:44:03.634
Let's also do the
binding in one chart

00:44:03.634 --> 00:44:06.770
within square brackets,
within regular brackets,

00:44:06.770 --> 00:44:09.950
you give it NG model
is the direct tool

00:44:09.950 --> 00:44:13.069
is equal to whatever
name you want to give.

00:44:13.069 --> 00:44:17.524
We'll go here, call it
passenger first name.

00:44:17.524 --> 00:44:21.035
And you can close that
element right there.

00:44:21.035 --> 00:44:23.254
So that's the firstName.

00:44:23.254 --> 00:44:25.684
Copy it, copy that line,

00:44:25.684 --> 00:44:30.679
paste it three more
times, at least.

00:44:30.679 --> 00:44:33.605
Firstname, lastName.

00:44:33.605 --> 00:44:36.875
Then we have the passengers

00:44:36.875 --> 00:44:41.405
email the middle limb before
we go to e-mail middle name,

00:44:41.405 --> 00:44:44.929
then the email information,

00:44:44.929 --> 00:44:47.195
and finally paste
it one more time.

00:44:47.195 --> 00:44:50.240
The phone number, phone.

00:44:50.240 --> 00:44:52.700
Save it changed the
names appropriately.

00:44:52.700 --> 00:44:58.850
This should be passenger,
last name, LastName,

00:44:58.850 --> 00:45:06.980
passenger, middle
name, middle name.

00:45:06.980 --> 00:45:11.584
Then here we have
passenger, E-mail.

00:45:11.584 --> 00:45:13.310
Passenger e-mail.

00:45:13.310 --> 00:45:14.405
You can copy that,

00:45:14.405 --> 00:45:18.035
paste it on the right-hand
side passenger phone.

00:45:18.035 --> 00:45:21.725
And do the same
copy, paste it here.

00:45:21.725 --> 00:45:24.109
And on the form itself.

00:45:24.109 --> 00:45:29.284
We should have used
the NG form directive.

00:45:29.284 --> 00:45:38.824
So slash passenger form
is equal to N G form.

00:45:38.824 --> 00:45:42.650
And NG Submit is the
event we need to handle.

00:45:42.650 --> 00:45:47.240
And just submit is
equal to ill-defined.

00:45:47.240 --> 00:45:49.579
Or we'll declare, use
a function that we are

00:45:49.579 --> 00:45:52.654
going to define later on
in our model on submit,

00:45:52.654 --> 00:45:56.044
passenger form dot value.

00:45:56.044 --> 00:45:58.490
So whatever name we gave
here to that object,

00:45:58.490 --> 00:46:01.174
we are passing in that
value so that we can access

00:46:01.174 --> 00:46:04.459
all these fields
and their values.

00:46:04.459 --> 00:46:05.869
Last but not the least.

00:46:05.869 --> 00:46:08.884
We can also add a submit button.

00:46:08.884 --> 00:46:10.100
Right here.

00:46:10.100 --> 00:46:15.620
Input type is equal to submit.

00:46:15.620 --> 00:46:19.610
Value is equal to confirm,

00:46:19.610 --> 00:46:21.559
confirm the reservation once he

00:46:21.559 --> 00:46:24.125
enters the passenger details,
you should hit Confirm.

00:46:24.125 --> 00:46:26.900
I'll go to the UI and
you should be able to

00:46:26.900 --> 00:46:29.569
see passenger details where
we can enter first name,

00:46:29.569 --> 00:46:32.390
last name, middle name,
email, and phone.

00:46:32.390 --> 00:46:33.829
And we're going to hit Confirm.

00:46:33.829 --> 00:46:36.110
We're going to add the
credit card information

00:46:36.110 --> 00:46:38.579
as well in the next lecture.

00:46:38.800 --> 00:46:42.349
Last piece of
information we need to

00:46:42.349 --> 00:46:45.634
finish the reservation process
is the card information.

00:46:45.634 --> 00:46:47.570
We do not use it
in the back-end,

00:46:47.570 --> 00:46:50.360
but our request has
that information.

00:46:50.360 --> 00:46:52.145
So you can add that to the UI

00:46:52.145 --> 00:46:53.750
or you can completely skip it.

00:46:53.750 --> 00:46:55.250
It's up to you, but I'm going

00:46:55.250 --> 00:46:57.664
to add it as a place holder.

00:46:57.664 --> 00:47:01.309
So before the submit
button, the first,

00:47:01.309 --> 00:47:02.689
or you can copy one of

00:47:02.689 --> 00:47:05.960
these lines here to
make our job easier.

00:47:05.960 --> 00:47:08.764
Paste it three times.

00:47:08.764 --> 00:47:10.594
Let me scroll it up.

00:47:10.594 --> 00:47:13.804
The first one is
the card number.

00:47:13.804 --> 00:47:17.375
Second one is the expiry date.

00:47:17.375 --> 00:47:19.999
Expiry date.

00:47:19.999 --> 00:47:23.210
And the last one is
the security code that

00:47:23.210 --> 00:47:25.400
three-digit Security Core on

00:47:25.400 --> 00:47:28.159
the card and change the
names appropriately.

00:47:28.159 --> 00:47:30.995
The first one should
be card number.

00:47:30.995 --> 00:47:33.229
Copy that, paste it
on the right side.

00:47:33.229 --> 00:47:39.419
Second one should
be expiration date.

00:47:39.760 --> 00:47:44.869
And the last one is
the security called.

00:47:44.869 --> 00:47:47.299
Copy that, paste it,

00:47:47.299 --> 00:47:50.180
save it, go back to the UI.

00:47:50.180 --> 00:47:52.954
And we should see all the fields

00:47:52.954 --> 00:47:55.189
displayed along with the
passenger information.

00:47:55.189 --> 00:47:57.589
We are gathering the card
information as well.

00:47:57.589 --> 00:48:02.040
This should be card
number, not card number.

00:48:02.980 --> 00:48:05.779
In the next lecture,

00:48:05.779 --> 00:48:09.110
we will cord the onsubmit
that will handle

00:48:09.110 --> 00:48:10.880
the confirmation and sales

00:48:10.880 --> 00:48:14.370
the reservation back
to the database.

00:48:14.740 --> 00:48:18.905
The next step is to save
the reservation and

00:48:18.905 --> 00:48:22.235
navigate the passenger to
the confirmation screen.

00:48:22.235 --> 00:48:23.930
So once he entrusts
these retails,

00:48:23.930 --> 00:48:25.534
hits this Confirm button,

00:48:25.534 --> 00:48:28.830
the onsubmit method
will be invoked.

00:48:28.830 --> 00:48:32.199
We need to add that
method in the model.

00:48:32.199 --> 00:48:35.809
The passenger details
component dot ts.

00:48:36.750 --> 00:48:41.080
Public on Submit will

00:48:41.080 --> 00:48:44.754
receive the form data
within the onsubmit.

00:48:44.754 --> 00:48:46.209
We can invoke the service.

00:48:46.209 --> 00:48:51.189
So this dot service,
dot save Reservation.

00:48:51.189 --> 00:48:54.789
And we can pass in the entire
data that comes from here,

00:48:54.789 --> 00:48:57.280
the firstName, lastName,
all these can be passed

00:48:57.280 --> 00:49:00.115
to the backend
RESTful web service.

00:49:00.115 --> 00:49:03.294
Dot subscribe.

00:49:03.294 --> 00:49:08.859
Handle the response
using a arrow function.

00:49:08.859 --> 00:49:11.220
And within the arrow function,

00