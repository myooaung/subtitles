WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.550 --> 00:00:04.425
In this and the
next few lectures,

00:00:04.425 --> 00:00:06.045
we're going to build the flight

00:00:06.045 --> 00:00:07.890
check-in application
that will allow

00:00:07.890 --> 00:00:09.150
the passenger to use

00:00:09.150 --> 00:00:12.614
the reservation ID and
chicken to have flight.

00:00:12.614 --> 00:00:14.489
This Angular application will be

00:00:14.489 --> 00:00:16.770
comprised of three
important components.

00:00:16.770 --> 00:00:19.784
The start chicken component,
the chicken component.

00:00:19.784 --> 00:00:21.300
And finally, the confirmation

00:00:21.300 --> 00:00:22.769
can form chicken component which

00:00:22.769 --> 00:00:26.445
will display the confirmation
message to the end-user.

00:00:26.445 --> 00:00:28.229
And one service that is

00:00:28.229 --> 00:00:30.770
responsible for fitting
the reservation,

00:00:30.770 --> 00:00:33.094
given a ID of the reservation,

00:00:33.094 --> 00:00:34.490
and then of course, update

00:00:34.490 --> 00:00:37.355
the reservation and
checking the passenger.

00:00:37.355 --> 00:00:40.984
It's going to make the backend
RESTful calls to do that.

00:00:40.984 --> 00:00:43.280
And we will be using routing

00:00:43.280 --> 00:00:46.564
forms as required
and data binding.

00:00:46.564 --> 00:00:48.305
So let's get started and create

00:00:48.305 --> 00:00:50.164
a project. Go to
the command line.

00:00:50.164 --> 00:00:53.554
And G, new flight.

00:00:53.554 --> 00:00:56.614
Chicken is the application
name hit Enter.

00:00:56.614 --> 00:01:00.139
And that will create
a project as follows.

00:01:00.139 --> 00:01:01.579
The flight Chicken Project,

00:01:01.579 --> 00:01:04.265
drag and drop it onto
Visual Studio Code.

00:01:04.265 --> 00:01:05.479
Close Visual Studio Code.

00:01:05.479 --> 00:01:06.694
If you have something else open,

00:01:06.694 --> 00:01:10.070
or you can just drag
this project onto

00:01:10.070 --> 00:01:15.550
Visual Studio Code that will
open up the project for us.

00:01:15.550 --> 00:01:17.079
Let's also create the components

00:01:17.079 --> 00:01:18.729
since we know what they are.

00:01:18.729 --> 00:01:21.729
Once you how the project and G,

00:01:21.729 --> 00:01:26.500
G, C, space components slash.

00:01:26.500 --> 00:01:30.174
The first one is
the start chicken.

00:01:30.174 --> 00:01:33.819
So start chicken is
the first component.

00:01:33.819 --> 00:01:36.084
Flight.

00:01:36.084 --> 00:01:38.410
Chicken is the project.

00:01:38.410 --> 00:01:40.345
Now hit the up arrow,

00:01:40.345 --> 00:01:43.344
create that very
first component.

00:01:43.344 --> 00:01:49.009
The second component, which
is the chicken component.

00:01:49.320 --> 00:01:51.609
And the last one is

00:01:51.609 --> 00:01:54.919
the confirmation competent
call it confirm.

00:01:55.240 --> 00:01:57.529
And we have one service.

00:01:57.529 --> 00:02:00.530
So create the
service and g g es,

00:02:00.530 --> 00:02:03.559
services slash the service name

00:02:03.559 --> 00:02:06.239
could be check-in service.

00:02:06.610 --> 00:02:09.140
And we have the service as well.

00:02:09.140 --> 00:02:11.809
If you go back to Visual
Studio Code under source,

00:02:11.809 --> 00:02:13.730
you will see under

00:02:13.730 --> 00:02:17.060
app components and
the services as well.

00:02:17.060 --> 00:02:20.819
We'll start coding the
service in the next lecture.

00:02:21.580 --> 00:02:25.354
In this lecture, we'll start
implementing this service,

00:02:25.354 --> 00:02:27.214
which will make the
back-end calls.

00:02:27.214 --> 00:02:29.839
So open up the service
dot TypeScript.

00:02:29.839 --> 00:02:31.504
Start with the imports,

00:02:31.504 --> 00:02:39.635
import Http from
Angular slash HTTP.

00:02:39.635 --> 00:02:43.519
And the second one, import map

00:02:43.519 --> 00:02:47.510
method from within
single quotes are

00:02:47.510 --> 00:02:56.310
x js slash operators are
axes slash operators,

00:02:56.350 --> 00:02:58.864
semicolon at the end.

00:02:58.864 --> 00:03:01.639
And in the constructor we
have to inject the HTTP,

00:03:01.639 --> 00:03:07.650
so private http, colon HTTP.

00:03:08.440 --> 00:03:11.000
The very first method here is

00:03:11.000 --> 00:03:13.189
responsible for getting
the reservation.

00:03:13.189 --> 00:03:17.000
So public, get or find
reservation is the method name.

00:03:17.000 --> 00:03:21.559
It takes a reservation
ID is of type number,

00:03:21.559 --> 00:03:25.114
and it will return back
the JSON that comes back.

00:03:25.114 --> 00:03:27.019
So this get reservation
is responsible

00:03:27.019 --> 00:03:29.029
for fetching the
reservation by invoking

00:03:29.029 --> 00:03:33.304
this fine reservation RESTful
API on the Java back-end,

00:03:33.304 --> 00:03:37.099
we need to provide the ID
as the path parameter.

00:03:37.099 --> 00:03:40.129
Inside this, you can simply

00:03:40.129 --> 00:03:49.205
return this dot http dot get.

00:03:49.205 --> 00:03:51.005
We need the URL here,

00:03:51.005 --> 00:03:52.519
so you can hard-code it here.

00:03:52.519 --> 00:03:54.544
And later we'll move
this to a field.

00:03:54.544 --> 00:03:58.459
The URL is HTTP colon
two forward slashes,

00:03:58.459 --> 00:04:01.220
local host colon 80,

00:04:01.220 --> 00:04:09.860
80 slash flight services
slash reservations,

00:04:09.860 --> 00:04:11.644
and a forward slash.

00:04:11.644 --> 00:04:12.935
At the end. To this,

00:04:12.935 --> 00:04:16.490
we can append the id that
comes in as a parameter.

00:04:16.490 --> 00:04:20.839
So that will be passed
in as a path variable.

00:04:20.839 --> 00:04:23.570
So that's the
getMethod and it will

00:04:23.570 --> 00:04:25.490
bring us back a reservation.

00:04:25.490 --> 00:04:29.104
So pipe that response pipe.

00:04:29.104 --> 00:04:30.829
And inside the pipe,

00:04:30.829 --> 00:04:34.295
we will map it and
return it back.

00:04:34.295 --> 00:04:39.575
Map response arrow function,

00:04:39.575 --> 00:04:42.785
angular brackets
within the body of it,

00:04:42.785 --> 00:04:47.045
return response
dot JSON function.

00:04:47.045 --> 00:04:48.830
That's it. If you want,

00:04:48.830 --> 00:04:50.329
you can handle the
errors as well.

00:04:50.329 --> 00:04:51.559
You know how to do that.

00:04:51.559 --> 00:04:54.259
But anyhow started coding the
service you have imported

00:04:54.259 --> 00:04:57.664
the HTTP and the
map methods anyhow,

00:04:57.664 --> 00:04:59.809
invoked with a fine
reservation and returning

00:04:59.809 --> 00:05:03.120
back the response
that comes back.

00:05:04.240 --> 00:05:06.379
The second method is

00:05:06.379 --> 00:05:08.360
the same reservation
method which

00:05:08.360 --> 00:05:10.565
will update the reservation
to the back-end.

00:05:10.565 --> 00:05:12.185
So copy this first method,

00:05:12.185 --> 00:05:14.525
get reservation, paste it.

00:05:14.525 --> 00:05:17.570
We can call the second
method, the chicken method.

00:05:17.570 --> 00:05:21.755
And it takes a reservation
object as the parameter.

00:05:21.755 --> 00:05:24.889
Reservation, or you can
also call it chicken

00:05:24.889 --> 00:05:26.449
requests because this does not

00:05:26.449 --> 00:05:28.520
have the entire reservation.

00:05:28.520 --> 00:05:29.990
It will have only the partial

00:05:29.990 --> 00:05:31.369
information that is required to

00:05:31.369 --> 00:05:34.519
update the reservation.
The Java back-end.

00:05:34.519 --> 00:05:37.069
If you look at the update
reservation request,

00:05:37.069 --> 00:05:38.900
these three fields are

00:05:38.900 --> 00:05:40.820
only required to
update a reservation.

00:05:40.820 --> 00:05:43.040
The idea of the
reservation chicken flag,

00:05:43.040 --> 00:05:46.024
which will be true, and
the number of bags.

00:05:46.024 --> 00:05:48.364
So all those three
will be in here.

00:05:48.364 --> 00:05:50.585
Change the
implementation to post,

00:05:50.585 --> 00:05:52.730
to use post http dot post.

00:05:52.730 --> 00:05:55.760
The URL, get rid of the id.

00:05:55.760 --> 00:05:59.165
The rest of the URL
will remain the same.

00:05:59.165 --> 00:06:02.450
And the second parameter
here should be

00:06:02.450 --> 00:06:07.610
comma, the chicken request.

00:06:07.610 --> 00:06:08.795
That's it.

00:06:08.795 --> 00:06:11.299
Everything else can
remain the same,

00:06:11.299 --> 00:06:13.655
whatever response comes back,
we can still return it.

00:06:13.655 --> 00:06:17.495
As you can see, this URL
is same here and here.

00:06:17.495 --> 00:06:20.105
So you can cut it,

00:06:20.105 --> 00:06:23.300
scroll up straight right here,

00:06:23.300 --> 00:06:28.670
define f field, call
it reservation URL.

00:06:28.670 --> 00:06:31.295
Cordoned off type string
is equal to that.

00:06:31.295 --> 00:06:32.959
Copy the reservation URL.

00:06:32.959 --> 00:06:36.350
You can use it here

00:06:36.350 --> 00:06:41.189
as well as we make
the call right here.

00:06:44.280 --> 00:06:46.329
Let's see what the problem is.

00:06:46.329 --> 00:06:48.160
Cannot find reservation URL,

00:06:48.160 --> 00:06:50.980
should use this dot reservation.

00:06:50.980 --> 00:06:52.134
You want to.

00:06:52.134 --> 00:06:54.369
In this lecture, you
have implemented

00:06:54.369 --> 00:06:56.919
the chicken service
method that will make

00:06:56.919 --> 00:06:58.359
a post call to

00:06:58.359 --> 00:06:59.860
our RESTful web service that

00:06:59.860 --> 00:07:01.404
will receive the
chicken request.

00:07:01.404 --> 00:07:03.489
Do the chicken,
and it will return

00:07:03.489 --> 00:07:06.670
an updated reservation
back as the response.

00:07:06.670 --> 00:07:08.829
So if you go back to the
reservation rest controller,

00:07:08.829 --> 00:07:12.199
we are returning the
entire reservation back.

00:07:12.660 --> 00:07:15.549
Before we go ahead and start

00:07:15.549 --> 00:07:18.325
implementing the components
for our application,

00:07:18.325 --> 00:07:20.604
let's do the routing first.

00:07:20.604 --> 00:07:22.389
Go to any of the
earlier projects,

00:07:22.389 --> 00:07:24.840
go to the flight
reservation project,

00:07:24.840 --> 00:07:26.839
grab the routing
module from under

00:07:26.839 --> 00:07:32.029
the source routing copy that,

00:07:32.029 --> 00:07:34.580
come back, paste it

00:07:34.580 --> 00:07:37.235
under their flight
check-in applications.

00:07:37.235 --> 00:07:40.624
Source. App.

00:07:40.624 --> 00:07:42.545
Paste it right there.

00:07:42.545 --> 00:07:46.114
Come back to Visual
Studio Code, open it,

00:07:46.114 --> 00:07:51.365
maximize, delete the
imports that how errors,

00:07:51.365 --> 00:07:53.789
all these three right here.

00:07:53.830 --> 00:07:59.000
The first one is start chicken.

00:07:59.000 --> 00:08:03.289
And that should be mapped to
the start chicken component.

00:08:03.289 --> 00:08:05.089
The second one is the chicken,

00:08:05.089 --> 00:08:07.084
which does the actual
chicken itself.

00:08:07.084 --> 00:08:12.080
This is where we pass in the
ID that the user enters.

00:08:12.080 --> 00:08:15.454
So chicken slash colon ID.

00:08:15.454 --> 00:08:18.740
This is the responsibility
of the chicken component.

00:08:18.740 --> 00:08:21.499
And the last one, of course,

00:08:21.499 --> 00:08:24.599
is the conformation component.

00:08:25.510 --> 00:08:27.530
Confirm.

00:08:27.530 --> 00:08:29.089
No need of passing the ID,

00:08:29.089 --> 00:08:31.430
we simply display a
confirmation message.

00:08:31.430 --> 00:08:35.195
And this will be the
conformation component.

00:08:35.195 --> 00:08:37.025
Get it off the last one,

00:08:37.025 --> 00:08:39.994
we only have three
components in this case.

00:08:39.994 --> 00:08:41.705
Let's stop. It should be okay.

00:08:41.705 --> 00:08:44.090
The redirect to the root

00:08:44.090 --> 00:08:46.190
and the path match
should be full.

00:08:46.190 --> 00:08:49.560
Scroll down,
everything looks good.

00:08:50.490 --> 00:08:52.899
In this lecture, we'll implement

00:08:52.899 --> 00:08:54.580
the very first UI page or

00:08:54.580 --> 00:08:56.409
the component for
our applications,

00:08:56.409 --> 00:09:01.460
starting with the app
component dot HTML.

00:09:01.470 --> 00:09:04.105
The HTML control, a,

00:09:04.105 --> 00:09:07.180
delete everything, maximize it.

00:09:07.180 --> 00:09:09.519
This is the starting
point of our application

00:09:09.519 --> 00:09:12.430
where we'll display a
message called flight.

00:09:12.430 --> 00:09:15.639
Chicken, will be the first thing

00:09:15.639 --> 00:09:19.705
the user sees and will
provide them with a button,

00:09:19.705 --> 00:09:23.185
which will start the
chicken process.

00:09:23.185 --> 00:09:27.010
Within the button
use router link

00:09:27.010 --> 00:09:32.069
is equal to within double-quotes
forward slash star.

00:09:32.069 --> 00:09:34.010
Chicken is the route.

00:09:34.010 --> 00:09:35.449
So this is the route we have

00:09:35.449 --> 00:09:37.010
configured in the
routing module.

00:09:37.010 --> 00:09:38.570
Start chicken.

00:09:38.570 --> 00:09:40.625
We're going to add styles.

00:09:40.625 --> 00:09:42.260
Later on we'll
revisit the project,

00:09:42.260 --> 00:09:43.370
but for now it will be

00:09:43.370 --> 00:09:48.394
a simple button followed
by the router outlet.

00:09:48.394 --> 00:09:50.285
So this will expose out

00:09:50.285 --> 00:09:51.619
all the routes that we are going

00:09:51.619 --> 00:09:53.150
to use in the application.

00:09:53.150 --> 00:09:54.110
Save it.

00:09:54.110 --> 00:09:55.460
To run our application,

00:09:55.460 --> 00:09:58.310
we need to make sure the
bootstrapping is in place.

00:09:58.310 --> 00:10:00.589
Go to app dot module.js.

00:10:00.589 --> 00:10:04.655
Maximize the components are
in place in the imports,

00:10:04.655 --> 00:10:06.604
we need to add a
couple of things.

00:10:06.604 --> 00:10:09.740
Http module, comma,

00:10:09.740 --> 00:10:14.460
the router module,
app, router module.

00:10:14.490 --> 00:10:17.515
Those two and in the
provider section,

00:10:17.515 --> 00:10:20.650
provide the service,
the chicken service.

00:10:20.650 --> 00:10:23.725
And a Bootstrap component
is the app component.

00:10:23.725 --> 00:10:26.020
So the application, the
first thing that will be

00:10:26.020 --> 00:10:29.709
rendered is from the
app component HTML.

00:10:29.709 --> 00:10:31.600
Save everything, go to

00:10:31.600 --> 00:10:34.120
the console and run
the application.

00:10:34.120 --> 00:10:35.949
Make sure you are in
the project directory.

00:10:35.949 --> 00:10:36.940
And G.

00:10:36.940 --> 00:10:42.790
So hyphen 0, hit Enter while
the application is launched.

00:10:42.790 --> 00:10:45.175
Let me summarize
everything as always.

00:10:45.175 --> 00:10:46.660
So, so far, you're

00:10:46.660 --> 00:10:49.150
created a simple single
page application

00:10:49.150 --> 00:10:51.475
using Angular called
flight chicken

00:10:51.475 --> 00:10:53.484
with three components.

00:10:53.484 --> 00:10:57.705
Check-in, start chicken,
chicken and confirm.

00:10:57.705 --> 00:10:59.509
A single service. The service is

00:10:59.509 --> 00:11:02.284
responsible for making
the back-end calls.

00:11:02.284 --> 00:11:04.040
Given a reservation ID,

00:11:04.040 --> 00:11:05.690
it will fetch the
reservation which we

00:11:05.690 --> 00:11:07.684
are going to render on the UI.

00:11:07.684 --> 00:11:09.349
And then once the user provides

00:11:09.349 --> 00:11:11.090
the number of bags to chicken,

00:11:11.090 --> 00:11:14.449
will use the chicken method
that will make it back and

00:11:14.449 --> 00:11:17.614
call to update their reservation.
Go back to the browser.

00:11:17.614 --> 00:11:19.519
You'll see the very first page

00:11:19.519 --> 00:11:21.379
once we apply styling later on,

00:11:21.379 --> 00:11:23.390
as I said, this will
look different.

00:11:23.390 --> 00:11:25.759
Click on the Start
button that will take

00:11:25.759 --> 00:11:27.964
you to this chicken page.

00:11:27.964 --> 00:11:31.229
We'll start coding this
in the next lecture.

00:11:32.140 --> 00:11:34.490
In this lecture we will code

00:11:34.490 --> 00:11:37.130
the chicken component
that is responsible

00:11:37.130 --> 00:11:41.809
for prompting the end-user
to enter reservation ID.

00:11:41.809 --> 00:11:44.600
And then we'll fix
that reservation.

00:11:44.600 --> 00:11:47.540
Or to the start
checking component.

00:11:47.540 --> 00:11:49.940
Open up the HTML,

00:11:49.940 --> 00:11:54.630
control, a delete
everything, use a H1.

00:11:54.790 --> 00:12:00.720
Enter their reservation ID.

00:12:01.000 --> 00:12:08.790
This will be followed by an
input type is equal to text.

00:12:10.420 --> 00:12:13.279
Close it right there. And let's

00:12:13.279 --> 00:12:15.079
use the binding two-way data

00:12:15.079 --> 00:12:17.300
binding here within
square brackets,

00:12:17.300 --> 00:12:19.295
within normal brackets,

00:12:19.295 --> 00:12:28.450
NG model is equal to within
double-quotes reservation ID,

00:12:28.450 --> 00:12:29.889
a very simple binding here we

00:12:29.889 --> 00:12:31.989
are taking whatever
value the user

00:12:31.989 --> 00:12:33.339
enters and we're assigning it to

00:12:33.339 --> 00:12:36.084
a reservation ID
JavaScript variable.

00:12:36.084 --> 00:12:38.559
And we can use it later on

00:12:38.559 --> 00:12:44.335
button onclick of this pattern.

00:12:44.335 --> 00:12:46.945
Let's close the
button to start with.

00:12:46.945 --> 00:12:52.345
This pattern will have
a value called Next.

00:12:52.345 --> 00:12:54.399
On click is equal

00:12:54.399 --> 00:12:57.940
to a function that we
are going to invoke,

00:12:57.940 --> 00:13:00.474
call it on click,

00:13:00.474 --> 00:13:02.590
which we can pass this

00:13:02.590 --> 00:13:05.569
the reservation ID
as the parameter.

00:13:05.569 --> 00:13:07.849
So copy that, paste
it right there.

00:13:07.849 --> 00:13:10.175
You can add a line
break right here.

00:13:10.175 --> 00:13:11.419
Save it.

00:13:11.419 --> 00:13:14.450
So a very simple
HTML template here.

00:13:14.450 --> 00:13:16.490
We are capturing
the reservation ID.

00:13:16.490 --> 00:13:19.069
We are binding it to a variable
called reservation ID.

00:13:19.069 --> 00:13:20.329
On click of this button,

00:13:20.329 --> 00:13:22.819
we're passing it to
this type script or

00:13:22.819 --> 00:13:25.070
JavaScript function
so that we can pull

00:13:25.070 --> 00:13:28.440
that reservation
from the backend.

00:13:29.740 --> 00:13:33.365
In this lecture, we'll
handle the onclick event,

00:13:33.365 --> 00:13:35.554
fetch the reservation
from the backend,

00:13:35.554 --> 00:13:37.745
and move on to the next UI,

00:13:37.745 --> 00:13:40.024
which is the chicken component.

00:13:40.024 --> 00:13:41.630
Go to the model class,

00:13:41.630 --> 00:13:44.060
the TypeScript file maximize.

00:13:44.060 --> 00:13:46.010
First we need access to

00:13:46.010 --> 00:13:47.659
the service here
because there are

00:13:47.659 --> 00:13:51.724
multiple ways in which we can
handle the onclick event.

00:13:51.724 --> 00:13:53.134
Public.

00:13:53.134 --> 00:13:57.380
Onclick. We get a ID which
is the reservation ID,

00:13:57.380 --> 00:13:58.594
which is of type number.

00:13:58.594 --> 00:14:02.195
We can simply navigate
to the next screen here.

00:14:02.195 --> 00:14:04.819
And then that next component

00:14:04.819 --> 00:14:07.294
is responsible for
pulling the reservation.

00:14:07.294 --> 00:14:09.379
Or simply we can
pull the reservation

00:14:09.379 --> 00:14:11.495
here which will be
stored in the service.

00:14:11.495 --> 00:14:15.515
And the next component can
use that reservation details.

00:14:15.515 --> 00:14:17.930
So let's do that.
The constructor

00:14:17.930 --> 00:14:20.029
needs a couple of things.

00:14:20.029 --> 00:14:22.955
The router and the
service itself.

00:14:22.955 --> 00:14:30.184
So private. Start with the
service colon of type chicken,

00:14:30.184 --> 00:14:32.389
service comma router so

00:14:32.389 --> 00:14:35.135
that we can navigate
to the next component.

00:14:35.135 --> 00:14:42.290
Weight throughout the colon
router that will be imported.

00:14:42.290 --> 00:14:44.689
Inside the onclick.

00:14:44.689 --> 00:14:52.760
We'll use this dot surveys,
dot get reservation.

00:14:52.760 --> 00:14:54.605
We need to change
the reservation and

00:14:54.605 --> 00:14:57.424
I will show you why
we how to change it.

00:14:57.424 --> 00:15:05.345
Dot subscribe, subscribe,
we get a response back.

00:15:05.345 --> 00:15:08.074
Handle that using
an arrow function.

00:15:08.074 --> 00:15:13.804
So right here the reservation
returns something back.

00:15:13.804 --> 00:15:16.324
So we need to pass it an ID

00:15:16.324 --> 00:15:17.915
that will get rid of that error.

00:15:17.915 --> 00:15:22.295
And in here, we're going to
navigate to the next screen.

00:15:22.295 --> 00:15:27.869
So this dot, router,
dot navigate.

00:15:28.990 --> 00:15:34.490
Then brackets use square
brackets within single quotes.

00:15:34.490 --> 00:15:37.970
Check-in is where we
want to navigate.

00:15:37.970 --> 00:15:41.344
So use chicken here.

00:15:41.344 --> 00:15:44.150
Can go to the routing
dot module.js just

00:15:44.150 --> 00:15:46.549
to check check-in.
It expects an id.

00:15:46.549 --> 00:15:47.720
This is how we have it,

00:15:47.720 --> 00:15:50.509
but we can get rid off this.

00:15:50.509 --> 00:15:53.405
We are no longer
going to pass the ID.

00:15:53.405 --> 00:15:55.939
Right here. We are pulling
the reservation information.

00:15:55.939 --> 00:15:57.109
It will be stored
in the service,

00:15:57.109 --> 00:15:59.075
it will be available
to the next component.

00:15:59.075 --> 00:16:02.720
Simply going to chicken will do.

00:16:02.720 --> 00:16:05.599
We can add a forward
slash here, save it.

00:16:05.599 --> 00:16:06.919
But in the service itself,

00:16:06.919 --> 00:16:08.089
we need to make a small change,

00:16:08.089 --> 00:16:09.530
go to get reservation.

00:16:09.530 --> 00:16:12.289
Right now we are returning
this response back.

00:16:12.289 --> 00:16:13.175
Instead.

00:16:13.175 --> 00:16:16.654
Let's assign this to this dot.

00:16:16.654 --> 00:16:20.959
Reservation data
is equal to that,

00:16:20.959 --> 00:16:24.169
so that the next component can
use this reservation data.

00:16:24.169 --> 00:16:26.750
So that is how we have
been sharing data across

00:16:26.750 --> 00:16:30.695
components by storing
them inside the service.

00:16:30.695 --> 00:16:32.955
So reservation.

00:16:32.955 --> 00:16:37.219
Data, colon any.

00:16:37.770 --> 00:16:39.399
So that's it.

00:16:39.399 --> 00:16:41.215
In the start chicken component,

00:16:41.215 --> 00:16:42.640
we have received the ID,

00:16:42.640 --> 00:16:44.169
made a backend call,

00:16:44.169 --> 00:16:46.704
got a response which will
be saved in the service.

00:16:46.704 --> 00:16:48.610
We are navigating
to the next screen,

00:16:48.610 --> 00:16:52.940
which will use that data
from within the service.

00:16:53.310 --> 00:16:57.084
In this lecture, we'll move
on to the last component,

00:16:57.084 --> 00:16:58.974
which is the chicken component.

00:16:58.974 --> 00:17:00.744
In order to navigate there,

00:17:00.744 --> 00:17:06.144
we need to add the forms module
to our app module dot ds.

00:17:06.144 --> 00:17:12.025
Under the imports, we need
to add the forms module.

00:17:12.025 --> 00:17:14.954
Scroll up and add that import.

00:17:14.954 --> 00:17:17.149
You can copy the HTTP module,

00:17:17.149 --> 00:17:18.830
paste it in the next line,

00:17:18.830 --> 00:17:20.795
change the two forms,

00:17:20.795 --> 00:17:24.950
module and imported
from angular forms.

00:17:24.950 --> 00:17:27.544
On to go back to
the browser, now,

00:17:27.544 --> 00:17:31.039
you should be able to see the
application getting loaded.

00:17:31.039 --> 00:17:32.749
If not, go to the starting page,

00:17:32.749 --> 00:17:36.185
the very first page,
click on Start.

00:17:36.185 --> 00:17:39.979
A reservation ID, save one
is the reservation ID.

00:17:39.979 --> 00:17:42.019
Click next, and you go to

00:17:42.019 --> 00:17:44.225
the next page which
says chicken works.

00:17:44.225 --> 00:17:46.775
But at this point the
data should be loaded.

00:17:46.775 --> 00:17:48.410
If you want to
check that quickly,

00:17:48.410 --> 00:17:50.389
go back to Visual Studio Code.

00:17:50.389 --> 00:17:54.919
Go to either the service or
the star chicken component,

00:17:54.919 --> 00:17:57.079
and you can add a
console log here,

00:17:57.079 --> 00:18:05.705
console dot log this dot
service dot reservation data.

00:18:05.705 --> 00:18:09.035
So once we make this
call and it completes,

00:18:09.035 --> 00:18:12.800
we should have that reservation
data inside the service.

00:18:12.800 --> 00:18:15.499
Save it, go back to the console.

00:18:15.499 --> 00:18:17.885
We can start one.

00:18:17.885 --> 00:18:19.220
Next.

00:18:19.220 --> 00:18:23.029
Go to View Javascript Console.

00:18:23.029 --> 00:18:26.179
And they will see an object
coming back which has

00:18:26.179 --> 00:18:29.989
the entire reservation
information.

00:18:29.989 --> 00:18:33.169
So now we can navigate
to the next page,

00:18:33.169 --> 00:18:35.194
which is the chicken screen.

00:18:35.194 --> 00:18:36.995
Go to chicken component,

00:18:36.995 --> 00:18:40.580
open up the TypeScript
file in the init method.

00:18:40.580 --> 00:18:42.499
All we're going to do is to take

00:18:42.499 --> 00:18:45.170
the data inside the
service and assign it

00:18:45.170 --> 00:18:47.450
to a variable called data
so that we can use it

00:18:47.450 --> 00:18:49.925
in the view in the HTML.

00:18:49.925 --> 00:18:54.965
So define a variable
called data colon of pipe.

00:18:54.965 --> 00:18:58.085
Any in the NG in it.

00:18:58.085 --> 00:18:59.510
Data is equal to,

00:18:59.510 --> 00:19:01.624
we need service to
be injected here.

00:19:01.624 --> 00:19:07.279
So private service, colon
reservation or chicken,

00:19:07.279 --> 00:19:11.554
chicken service right there.

00:19:11.554 --> 00:19:16.775
This dot service dot
reservation data.

00:19:16.775 --> 00:19:19.100
So by the time it comes
to this component,

00:19:19.100 --> 00:19:20.599
this data is available.

00:19:20.599 --> 00:19:24.080
We are assigning it to a
variable called data on this so

00:19:24.080 --> 00:19:27.845
that we can use it in the
HTML and render it on the UI,

00:19:27.845 --> 00:19:30.780
which we're going to do
in the next lecture.

00:19:31.570 --> 00:19:35.599
In this lecture, we will use
the reservation data and

00:19:35.599 --> 00:19:39.220
render the chicken
component dot HTML,

00:19:39.220 --> 00:19:43.370
UI, control, a,
delete everything.

00:19:43.370 --> 00:19:47.330
H1, save, review details.

00:19:47.330 --> 00:19:48.890
This is where the
user can review

00:19:48.890 --> 00:19:50.765
the passenger and
flight details,

00:19:50.765 --> 00:19:54.274
then enter the number of
bags he wants to chicken.

00:19:54.274 --> 00:19:57.844
Second hedge one. Let's use H2.

00:19:57.844 --> 00:20:01.354
H2 for flight details

00:20:01.354 --> 00:20:04.559
is what we're going
to display first.

00:20:04.990 --> 00:20:08.734
Lines to start with.

00:20:08.734 --> 00:20:11.359
Use the string
interpolation syntax.

00:20:11.359 --> 00:20:16.109
Data is the field name
inside the modal data.

00:20:17.320 --> 00:20:19.579
Dot flight.

00:20:19.579 --> 00:20:20.690
If you look at the JSON,

00:20:20.690 --> 00:20:21.740
it will have the

00:20:21.740 --> 00:20:23.719
reservation information
at the root level,

00:20:23.719 --> 00:20:26.029
but the flight information
will be inside

00:20:26.029 --> 00:20:31.085
the flight data dot
flight, flight number.

00:20:31.085 --> 00:20:33.005
And this data and flight

00:20:33.005 --> 00:20:34.549
should be followed
by question marks

00:20:34.549 --> 00:20:38.119
because if they are not
loaded yet, UI is rendering.

00:20:38.119 --> 00:20:39.724
If this data is not available,

00:20:39.724 --> 00:20:41.435
then we don't want
to display it.

00:20:41.435 --> 00:20:44.749
We want to render it only
when the data is available.

00:20:44.749 --> 00:20:48.095
The first one should
be operating.

00:20:48.095 --> 00:20:55.984
Airlines. Grab that and
paste it five more times.

00:20:55.984 --> 00:20:59.479
The second one is flight number.

00:20:59.479 --> 00:21:03.500
The third one is departure city.

00:21:03.500 --> 00:21:11.299
Next is arrival city,
date of departure.

00:21:11.299 --> 00:21:18.810
And the last one is
estimated departure time.

00:21:19.500 --> 00:21:22.045
So after the operating airlines,

00:21:22.045 --> 00:21:28.074
the second one is flight
number, departure,

00:21:28.074 --> 00:21:36.070
city, arrival city, date of
departure, all camelCase.

00:21:36.070 --> 00:21:39.320
The last one is estimated.

00:21:40.560 --> 00:21:43.839
Departure time.

00:21:43.839 --> 00:21:45.085
Save it.

00:21:45.085 --> 00:21:46.660
Let's go back to our UI.

00:21:46.660 --> 00:21:48.519
Go back to the
homepage local host

00:21:48.519 --> 00:21:50.905
for two zero-zero click Start,

00:21:50.905 --> 00:21:52.299
entered the reservation ID,

00:21:52.299 --> 00:21:54.414
save one, click Next.

00:21:54.414 --> 00:21:57.535
And we see all the details
in one single line.

00:21:57.535 --> 00:21:59.919
We don't want that go back
to Visual Studio Code.

00:21:59.919 --> 00:22:02.040
Add a line break.

00:22:02.040 --> 00:22:03.949
At the end, we're going to

00:22:03.949 --> 00:22:05.870
beautify these UIs
by revisiting them.

00:22:05.870 --> 00:22:07.879
We'll apply some
styles later on.

00:22:07.879 --> 00:22:10.160
Once it gets going.

00:22:10.160 --> 00:22:13.579
So paste a line break at the
end of each one of them.

00:22:13.579 --> 00:22:15.485
Even at the end of the last one.

00:22:15.485 --> 00:22:16.895
Save it.

00:22:16.895 --> 00:22:19.129
Go back to the beginning
because right now it

00:22:19.129 --> 00:22:21.679
refreshes only this page
which will not load the data.

00:22:21.679 --> 00:22:23.000
So go back to the beginning,

00:22:23.000 --> 00:22:27.994
hit one Next, and now you
see all the airline details.

00:22:27.994 --> 00:22:30.904
Let's also render that
passenger details.

00:22:30.904 --> 00:22:32.495
You can grab one of these,

00:22:32.495 --> 00:22:35.750
the last lines, paste it,

00:22:35.750 --> 00:22:37.039
and just before that line,

00:22:37.039 --> 00:22:44.000
grab this H2 passenger details.

00:22:44.000 --> 00:22:47.794
So the first one
is the first name,

00:22:47.794 --> 00:22:55.264
ada dot passenger is the
child object, dot first name.

00:22:55.264 --> 00:23:01.130
Copy that line. Based it
for lastname, email, phone.

00:23:01.130 --> 00:23:02.930
That should be good enough.

00:23:02.930 --> 00:23:04.910
Firstname, lastname,

00:23:04.910 --> 00:23:08.465
email, and one more
foreign information.

00:23:08.465 --> 00:23:10.894
Change them appropriately.

00:23:10.894 --> 00:23:14.930
Last name, last name,

00:23:14.930 --> 00:23:20.310
followed by email. It off this.

00:23:20.440 --> 00:23:22.550
Then the phone if you want,

00:23:22.550 --> 00:23:24.185
you can display
additional information.

00:23:24.185 --> 00:23:26.359
I'm going to display
only these four.

00:23:26.359 --> 00:23:30.620
You can show him the middle
name, et cetera, e-mail.

00:23:30.620 --> 00:23:33.470
The last one is phone.

00:23:33.470 --> 00:23:34.715
Save it.

00:23:34.715 --> 00:23:36.439
Go back to the browser,

00:23:36.439 --> 00:23:38.599
go back or click on the start.

00:23:38.599 --> 00:23:41.510
And the reservation ID lead
Center to if you have to,

00:23:41.510 --> 00:23:43.505
if not, just enter one.

00:23:43.505 --> 00:23:44.539
Next.

00:23:44.539 --> 00:23:46.070
There we go. It displays

00:23:46.070 --> 00:23:49.850
all the flight details as well
as the passenger details.

00:23:49.850 --> 00:23:52.039
In the next lecture, we will ask

00:23:52.039 --> 00:23:54.109
the end-user to enter
the number of bags.

00:23:54.109 --> 00:23:56.630
So we're going to add those
elements onto the UI.

00:23:56.630 --> 00:23:58.130
And when he clicks the button,

00:23:58.130 --> 00:24:00.660
the chicken should happen.

00:24:01.450 --> 00:24:03.890
In this lecture, we will prompt

00:24:03.890 --> 00:24:05.810
the end user to
enter the number of

00:24:05.810 --> 00:24:09.500
bags he wants to check in and
then give him a button on,

00:24:09.500 --> 00:24:12.755
click off, watch, the check-in
process will be complete.

00:24:12.755 --> 00:24:15.725
So to do that, add a text,

00:24:15.725 --> 00:24:19.460
enter the number of bags.

00:24:19.460 --> 00:24:27.169
Chicken colon, followed by
input type is equal to text.

00:24:27.169 --> 00:24:29.180
Close it right there.

00:24:29.180 --> 00:24:32.300
And we are going to
bind this value to

00:24:32.300 --> 00:24:36.485
a variable using square
brackets, regular brackets.

00:24:36.485 --> 00:24:41.330
And GEE, model is equal
to within double-quotes.

00:24:41.330 --> 00:24:43.744
Give it a name,

00:24:43.744 --> 00:24:47.914
number, bags, or
capital of bags.

00:24:47.914 --> 00:24:51.335
Now we can use this on click
of a button, et cetera.

00:24:51.335 --> 00:24:55.400
Button. Close it right there.

00:24:55.400 --> 00:24:59.540
Within brackets, click is equal

00:24:59.540 --> 00:25:03.710
to chicken is f function

00:25:03.710 --> 00:25:06.634
that we are going to
create chicken I capital.

00:25:06.634 --> 00:25:11.600
And here we can pass the number
of bags to this function.

00:25:11.600 --> 00:25:13.430
And this button.

00:25:13.430 --> 00:25:15.229
The value for this or

00:25:15.229 --> 00:25:18.319
the texts that should be
displayed is chicken.

00:25:18.319 --> 00:25:20.900
We have given a input
type where you can enter

00:25:20.900 --> 00:25:22.910
the number of bags
onclick of this button,

00:25:22.910 --> 00:25:24.979
it should invoke a
chicken function

00:25:24.979 --> 00:25:26.750
that will finish the
chicken process.

00:25:26.750 --> 00:25:28.729
Copy this function,

00:25:28.729 --> 00:25:31.565
go to the chicken
component dot TypeScript,

00:25:31.565 --> 00:25:36.360
add it right there, and
you can make it public.

00:25:37.510 --> 00:25:41.884
And this number of
bags can be a number.

00:25:41.884 --> 00:25:43.850
Within this, you need to invoke

00:25:43.850 --> 00:25:46.835
this dot service
dot chicken method.

00:25:46.835 --> 00:25:49.384
The second method needs request,

00:25:49.384 --> 00:25:51.469
a chicken request
in the backend.

00:25:51.469 --> 00:25:54.170
The chicken request or the
update reservation request

00:25:54.170 --> 00:25:55.444
has three fields,

00:25:55.444 --> 00:26:00.485
id, chicken flat and
then number of bags.

00:26:00.485 --> 00:26:02.630
So we have the number
of bags and the ID

00:26:02.630 --> 00:26:05.134
as the ID is available
in this data.

00:26:05.134 --> 00:26:07.129
That is data that comes back.

00:26:07.129 --> 00:26:10.340
So we can use that.
Let's build a request.

00:26:10.340 --> 00:26:12.740
Var request is equal to,

00:26:12.740 --> 00:26:15.574
let's create an
object dynamically.

00:26:15.574 --> 00:26:17.419
And this object, the first field

00:26:17.419 --> 00:26:19.625
is IID within double-quotes.

00:26:19.625 --> 00:26:22.579
The first property, colon.

00:26:22.579 --> 00:26:25.670
The value for ID,
can be retrieved

00:26:25.670 --> 00:26:28.759
from data dot id comma.

00:26:28.759 --> 00:26:32.225
So it should be this
dot data dot ID.

00:26:32.225 --> 00:26:36.964
The second field is
the chicken flag.

00:26:36.964 --> 00:26:42.229
So check in flag that should
go into double-quotes.

00:26:42.229 --> 00:26:44.539
And the value of it should

00:26:44.539 --> 00:26:47.314
be true since we are
checking in comma.

00:26:47.314 --> 00:26:51.735
The last one is the
number of bags.

00:26:51.735 --> 00:26:54.955
Number of bags.

00:26:54.955 --> 00:26:57.339
Colon. Use this number of

00:26:57.339 --> 00:26:59.949
packs that comes in as a
parameter to the method.

00:26:59.949 --> 00:27:02.094
And we have the request ready.

00:27:02.094 --> 00:27:05.155
So pass that request
to the chicken,

00:27:05.155 --> 00:27:07.750
and that will
update the chicken.

00:27:07.750 --> 00:27:09.669
And once the chicken
process is complete,

00:27:09.669 --> 00:27:13.554
we should navigate
to the next screen,

00:27:13.554 --> 00:27:15.850
which is the
confirmation screen.

00:27:15.850 --> 00:27:17.799
So we need access to the router.

00:27:17.799 --> 00:27:20.875
Go ahead and inject the
router in the constructor,

00:27:20.875 --> 00:27:31.270
private router, colon route
down from angular-ui-router.

00:27:31.270 --> 00:27:34.020
And after this service request.

00:27:34.020 --> 00:27:38.010
We will do this dot,

00:27:38.380 --> 00:27:45.425
dot navigate within
square brackets,

00:27:45.425 --> 00:27:49.624
single quotes, slash, confirm,

00:27:49.624 --> 00:27:52.084
semicolon at the end.

00:27:52.084 --> 00:27:54.079
We need to use subscribe here,

00:27:54.079 --> 00:27:55.099
although we're not going to

00:27:55.099 --> 00:27:56.404
do anything with the response,

00:27:56.404 --> 00:28:04.880
you should wear dot
subscribe method response

00:28:04.880 --> 00:28:07.640
since it's a promise,
we should do this.

00:28:07.640 --> 00:28:11.809
And within that, we should
do this navigation.

00:28:11.809 --> 00:28:13.835
Always a good thing to do it

00:28:13.835 --> 00:28:16.380
once the chicken is complete.

00:28:16.380 --> 00:28:18.760
So this dot service,
dot chicken,

00:28:18.760 --> 00:28:20.380
we are passing the request.

00:28:20.380 --> 00:28:23.484
Then we have the subscribe.

00:28:23.484 --> 00:28:24.849
Once the responses back,

00:28:24.849 --> 00:28:27.114
we are navigating
to the next screen,

00:28:27.114 --> 00:28:28.330
go to the routing module,

00:28:28.330 --> 00:28:30.039
make sure that the last colonies

00:28:30.039 --> 00:28:33.790
confirm to the spelling
should be confirmed.

00:28:33.790 --> 00:28:35.259
Make sure you got it right.

00:28:35.259 --> 00:28:40.160
Go back to the model and
everything looks good.

00:28:41.460 --> 00:28:44.905
In this lecture, we will
test our check-in process

00:28:44.905 --> 00:28:48.160
by wrapping up the last
little pieces here.

00:28:48.160 --> 00:28:49.630
Go to the chicken.

00:28:49.630 --> 00:28:51.654
And the method that
we should use here

00:28:51.654 --> 00:28:54.985
is not a post because
we are doing an update.

00:28:54.985 --> 00:28:56.380
And in the back-end,

00:28:56.380 --> 00:29:00.019
we have mapped the update
to a foot HTTP methods.

00:29:00.019 --> 00:29:02.165
So you put that small change,

00:29:02.165 --> 00:29:04.249
go back to the
chicken component ts,

00:29:04.249 --> 00:29:06.410
make sure everything is okay.

00:29:06.410 --> 00:29:09.785
Go to the HTML page,

00:29:09.785 --> 00:29:13.460
which is the last
one, confirm HTML.

00:29:13.460 --> 00:29:16.820
And you can display whatever
message you want here.

00:29:16.820 --> 00:29:20.404
Check-in, complete.

00:29:20.404 --> 00:29:22.204
Save it.

00:29:22.204 --> 00:29:26.134
Go back to the browser or
to the very first page.

00:29:26.134 --> 00:29:27.710
Should be chicken complete,

00:29:27.710 --> 00:29:30.785
not checking complete
check-in, complete, save it.

00:29:30.785 --> 00:29:32.630
Let's start from the beginning.

00:29:32.630 --> 00:29:37.145
Hit Start, enter reservation
ID, one, click Next.

00:29:37.145 --> 00:29:41.030
All the details are displayed
and we should see a button.

00:29:41.030 --> 00:29:42.454
We, along with the input type,

00:29:42.454 --> 00:29:43.640
enter the number of bags.

00:29:43.640 --> 00:29:46.609
Given a chance I would
like to check in ten bags.

00:29:46.609 --> 00:29:49.489
Click on chicken and it goes to

00:29:49.489 --> 00:29:52.730
the next screen says
chicken is complete.

00:29:52.730 --> 00:29:55.759
Let's go to the
database and check,

00:29:55.759 --> 00:29:58.385
execute the select
star from Reservation.

00:29:58.385 --> 00:30:01.384
And the very first
reservation here,

00:30:01.384 --> 00:30:04.264
as you can see,
check DNase one now,

00:30:04.264 --> 00:30:06.830
and the number of bags are ten.

00:30:06.830 --> 00:30:08.375
Let's take another ID.

00:30:08.375 --> 00:30:10.129
If you haven't reservation where

00:30:10.129 --> 00:30:11.945
the check didn't flag is zero,

00:30:11.945 --> 00:30:14.750
take another reservation
for me, it is three.

00:30:14.750 --> 00:30:16.760
And it is not checked in yet.

00:30:16.760 --> 00:30:18.800
So go back. Start.

00:30:18.800 --> 00:30:20.734
Reservation ID is three.

00:30:20.734 --> 00:30:26.944
Click on Next. Scroll down
number of bags, five, chicken.

00:30:26.944 --> 00:30:29.660
And the chicken is complete.

00:30:29.660 --> 00:30:31.295
Go back to the database,

00:30:31.295 --> 00:30:34.970
execute the select star
from reservation and ID3.

00:30:34.970 --> 00:30:36.679
Now check DNase one.

00:30:36.679 --> 00:30:39.870
Number of bags are five.
