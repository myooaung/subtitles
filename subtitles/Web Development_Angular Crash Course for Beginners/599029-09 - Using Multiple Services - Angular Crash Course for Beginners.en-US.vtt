WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.610 --> 00:00:03.720
In the next few lectures,

00:00:03.720 --> 00:00:07.125
you will learn how to
use multiple services

00:00:07.125 --> 00:00:09.135
within a single component

00:00:09.135 --> 00:00:11.175
that is able to adapt
to different services.

00:00:11.175 --> 00:00:13.370
One that invokes observe is

00:00:13.370 --> 00:00:16.745
a RESTful service to
get this response back.

00:00:16.745 --> 00:00:19.175
And the second one
will get a list of

00:00:19.175 --> 00:00:22.400
customer data to
different services.

00:00:22.400 --> 00:00:23.930
We are going to
consume them from

00:00:23.930 --> 00:00:26.195
within a single component.

00:00:26.195 --> 00:00:27.815
These two RESTful services,

00:00:27.815 --> 00:00:30.155
again, are hosted
on the Internet.

00:00:30.155 --> 00:00:32.765
The URLs for them
are right here.

00:00:32.765 --> 00:00:35.300
One goes to the S droughts.

00:00:35.300 --> 00:00:37.310
Hello is the RESTful
web services.

00:00:37.310 --> 00:00:43.250
The second one is hosted by
W3 schools customer dot PHP.

00:00:43.250 --> 00:00:45.755
So you can go to the Resources
section of this lecture,

00:00:45.755 --> 00:00:47.629
grab these two URLs,

00:00:47.629 --> 00:00:50.780
which we are going to use
in the next few lectures to

00:00:50.780 --> 00:00:54.840
make these calls to get
this response back.

00:00:55.920 --> 00:00:58.270
In this lecture, we will create

00:00:58.270 --> 00:01:00.115
the Angular project
that we'll have

00:01:00.115 --> 00:01:02.740
to services and one
single component

00:01:02.740 --> 00:01:05.320
that we'll use
both the services.

00:01:05.320 --> 00:01:07.300
The first service will retrieve

00:01:07.300 --> 00:01:10.945
the customer information which
is hosted by W3 schools.

00:01:10.945 --> 00:01:14.575
The second service will simply
invoke the hello service

00:01:14.575 --> 00:01:16.345
hosted by Things Done

00:01:16.345 --> 00:01:19.390
and it will receive
this message back.

00:01:19.390 --> 00:01:23.125
Go ahead, create the project
by going to command line.

00:01:23.125 --> 00:01:25.810
Go back to the angular
folder on your machine.

00:01:25.810 --> 00:01:32.275
Use NG new multiple services
is the project name.

00:01:32.275 --> 00:01:34.510
Hit Enter. And it will take

00:01:34.510 --> 00:01:37.755
some time and it will create
the project as follows.

00:01:37.755 --> 00:01:40.235
Once you have the project,

00:01:40.235 --> 00:01:43.100
use N G, G,

00:01:43.100 --> 00:01:47.510
S services slash hello,

00:01:47.510 --> 00:01:49.955
service is the first one.

00:01:49.955 --> 00:01:52.080
Enter.

00:01:52.600 --> 00:01:54.620
To execute that command,

00:01:54.620 --> 00:01:55.880
make sure you are inside

00:01:55.880 --> 00:01:58.175
the multiple
services for Les CD,

00:01:58.175 --> 00:01:59.765
multiple services,

00:01:59.765 --> 00:02:03.740
then execute the same
command using your up arrow.

00:02:03.740 --> 00:02:06.590
That will create the
services for us,

00:02:06.590 --> 00:02:08.240
execute the same command with

00:02:08.240 --> 00:02:10.250
different service name this time

00:02:10.250 --> 00:02:14.525
the second one is the
customer service.

00:02:14.525 --> 00:02:16.130
Enter.

00:02:16.130 --> 00:02:18.395
We get the second
service as well.

00:02:18.395 --> 00:02:20.855
Last but not the least, N, G, G,

00:02:20.855 --> 00:02:25.670
C components slash
I'm going to call

00:02:25.670 --> 00:02:27.980
it multiple services component

00:02:27.980 --> 00:02:30.875
because it's using
multiple services.

00:02:30.875 --> 00:02:34.535
Multiple services is
the component name.

00:02:34.535 --> 00:02:37.880
We get the four
files and the module

00:02:37.880 --> 00:02:40.580
app dot module.js is updated.

00:02:40.580 --> 00:02:42.740
So in this lecture, you have
successfully created to

00:02:42.740 --> 00:02:44.930
services and one component

00:02:44.930 --> 00:02:46.790
that's going to use
those services.

00:02:46.790 --> 00:02:50.720
Along with the project lecture,

00:02:50.720 --> 00:02:52.700
you will implement
the hello service and

00:02:52.700 --> 00:02:54.740
also the customer service.

00:02:54.740 --> 00:02:56.210
So we're going to
make calls into

00:02:56.210 --> 00:02:58.280
two different RESTful APIs.

00:02:58.280 --> 00:03:00.470
Let's start with
the hello service.

00:03:00.470 --> 00:03:03.245
Go to the URLs,
the angular URLs.

00:03:03.245 --> 00:03:04.730
Grab the third URL,

00:03:04.730 --> 00:03:06.575
which is the Hello RESTful API,

00:03:06.575 --> 00:03:09.485
launch your web
browser. Let's test it.

00:03:09.485 --> 00:03:11.570
If you hit that URL,

00:03:11.570 --> 00:03:16.160
we should get hello
response back.

00:03:16.160 --> 00:03:19.175
There we go. Message. Thanks
for using things stir.

00:03:19.175 --> 00:03:21.275
You are awesome. So
that's the very simple.

00:03:21.275 --> 00:03:24.725
Restful APIs are
RESTful service.

00:03:24.725 --> 00:03:27.395
Grab the last URL which
is from W3 schools,

00:03:27.395 --> 00:03:29.405
go back, open up a new tab,

00:03:29.405 --> 00:03:30.995
paste it, hit Enter.

00:03:30.995 --> 00:03:32.960
You see a lot of records
coming back here,

00:03:32.960 --> 00:03:35.225
name, city and country.

00:03:35.225 --> 00:03:37.760
So we don't really care
about those RESTful calls.

00:03:37.760 --> 00:03:39.605
You simply want to
learn how to make

00:03:39.605 --> 00:03:42.485
multiple calls from
within a single project.

00:03:42.485 --> 00:03:44.360
So go back to the hello service.

00:03:44.360 --> 00:03:45.980
The first step you
can start with

00:03:45.980 --> 00:03:47.945
the method or you can
start with the import,

00:03:47.945 --> 00:03:51.500
import HTTP client from

00:03:51.500 --> 00:03:54.245
within single quotes
at angular slash,

00:03:54.245 --> 00:03:58.310
common slash HTTP semicolon.

00:03:58.310 --> 00:04:00.830
Next, injected in
the constructor,

00:04:00.830 --> 00:04:06.620
private underscore
HTTP client colon.

00:04:06.620 --> 00:04:09.620
Http client is the type

00:04:09.620 --> 00:04:12.230
that is injected create
a public method.

00:04:12.230 --> 00:04:17.240
Public hello service
is the method name.

00:04:17.240 --> 00:04:20.210
This method will
return data JSON back.

00:04:20.210 --> 00:04:23.945
So any is the type and
the body is simple.

00:04:23.945 --> 00:04:28.325
Return HTTP client or underscore

00:04:28.325 --> 00:04:30.320
HTTP client dot

00:04:30.320 --> 00:04:34.460
this dot underscore HTTP
client dot get is the method.

00:04:34.460 --> 00:04:38.855
And pass it the URL
within single quotes.

00:04:38.855 --> 00:04:41.690
Go back, grab the
hello service URL,

00:04:41.690 --> 00:04:43.295
come back, paste it.

00:04:43.295 --> 00:04:44.525
No spaces.

00:04:44.525 --> 00:04:47.075
Get rid of all those spaces.

00:04:47.075 --> 00:04:48.470
Save it.

00:04:48.470 --> 00:04:51.815
Now go back to the customer
service, the other one.

00:04:51.815 --> 00:04:54.305
So the import, you can grab
it from the previous one.

00:04:54.305 --> 00:04:55.970
Once you have a service,
it is very easy.

00:04:55.970 --> 00:04:57.965
You can implement any
number of services.

00:04:57.965 --> 00:04:59.240
Same with the constructor.

00:04:59.240 --> 00:05:02.090
You can grab this complete
constructor, come back,

00:05:02.090 --> 00:05:04.100
replaced the constructor here,

00:05:04.100 --> 00:05:05.960
so that that will be injected.

00:05:05.960 --> 00:05:10.924
Then you create a method public.

00:05:10.924 --> 00:05:16.220
Let's call this method get
customers is the method name.

00:05:16.220 --> 00:05:18.020
That is what this
information here is.

00:05:18.020 --> 00:05:20.525
This is all customer information
or customer records.

00:05:20.525 --> 00:05:22.130
It is a customer service,

00:05:22.130 --> 00:05:23.810
as you can see in the URL,

00:05:23.810 --> 00:05:31.290
get customers,
colon, any return.

00:05:31.330 --> 00:05:34.385
This dot HTTP client or

00:05:34.385 --> 00:05:38.555
get within single
quotes, grab the URL.

00:05:38.555 --> 00:05:40.115
The last guy.

00:05:40.115 --> 00:05:42.275
Come back, paste it,

00:05:42.275 --> 00:05:44.795
semicolon, save
it, and that's it.

00:05:44.795 --> 00:05:46.370
So you have implemented two

00:05:46.370 --> 00:05:47.840
different services
and we are going

00:05:47.840 --> 00:05:49.520
to consume these two in

00:05:49.520 --> 00:05:52.470
the component in the
next few lectures.

00:05:52.750 --> 00:05:55.010
In this lecture, we will use

00:05:55.010 --> 00:05:57.935
both the services inside
of our component.

00:05:57.935 --> 00:06:00.589
To do that, go to the
multiple components

00:06:00.589 --> 00:06:03.605
dot txt file, which
is right here.

00:06:03.605 --> 00:06:08.299
Open it up. Close the Explorer,

00:06:08.299 --> 00:06:11.360
import both the
services, import.

00:06:11.360 --> 00:06:13.805
The first one is
the hello service.

00:06:13.805 --> 00:06:15.185
You can go there and grab it.

00:06:15.185 --> 00:06:16.985
Hello, surveys. Surveys.

00:06:16.985 --> 00:06:19.339
We could have simply
named the file hello

00:06:19.339 --> 00:06:21.710
so that we would have just
caught Hello service here.

00:06:21.710 --> 00:06:25.900
That's okay. Hello service,

00:06:25.900 --> 00:06:30.370
service from dot-dot slash,

00:06:30.370 --> 00:06:34.540
dot-dot slash services
slash hello service.

00:06:34.540 --> 00:06:37.765
That's the first one.
And the second input

00:06:37.765 --> 00:06:42.280
is the customer service surveys.

00:06:42.280 --> 00:06:44.575
So when we have
created the project,

00:06:44.575 --> 00:06:46.240
I have given it as
Customer Service.

00:06:46.240 --> 00:06:49.435
That's the reason we are
seeing a double service here.

00:06:49.435 --> 00:06:51.775
If you simply use customer,

00:06:51.775 --> 00:06:53.050
it would be customer service.

00:06:53.050 --> 00:06:55.660
The service will
always be upended by

00:06:55.660 --> 00:07:01.495
the Angular CLI
within single quotes,

00:07:01.495 --> 00:07:04.330
dot dot slash, dot

00:07:04.330 --> 00:07:09.610
dot slash services slash The
customer service service,

00:07:09.610 --> 00:07:11.560
not the hello service service.

00:07:11.560 --> 00:07:15.080
I want the customer service.

00:07:15.270 --> 00:07:19.345
I'm not importing the
HTTP error response here.

00:07:19.345 --> 00:07:22.300
That's your responsibility
to handle the errors again.

00:07:22.300 --> 00:07:23.800
So go ahead and import it.

00:07:23.800 --> 00:07:25.150
If you want to
handle the errors,

00:07:25.150 --> 00:07:27.430
you know how to do that
in the constructor.

00:07:27.430 --> 00:07:30.279
This time we're going
to inject two services.

00:07:30.279 --> 00:07:32.155
Private underscore.

00:07:32.155 --> 00:07:38.050
Hello service of type.

00:07:38.050 --> 00:07:43.180
Hello service, service,
comma, private underscore,

00:07:43.180 --> 00:07:49.845
customer service, colon
of type customer service.

00:07:49.845 --> 00:07:52.220
So that will inject
those two inside

00:07:52.220 --> 00:07:54.320
the NG on init method.

00:07:54.320 --> 00:08:00.180
Simply invoke this
dot hello service.

00:08:00.490 --> 00:08:03.485
The service name, which
is hello service,

00:08:03.485 --> 00:08:08.345
again, dot subscribe
to the response.

00:08:08.345 --> 00:08:10.609
Within brackets.

00:08:10.609 --> 00:08:12.605
Response.

00:08:12.605 --> 00:08:16.385
A single line arrow function,

00:08:16.385 --> 00:08:18.410
wherein we will assign
the response to

00:08:18.410 --> 00:08:22.050
a variable which we will
define up top here, private.

00:08:22.240 --> 00:08:23.960
Hello.

00:08:23.960 --> 00:08:27.920
Response is the variable
name colon of type Any.

00:08:27.920 --> 00:08:30.065
Also define one more variable.

00:08:30.065 --> 00:08:34.774
Any is the type private.

00:08:34.774 --> 00:08:39.690
Customer response colon, any.

00:08:40.090 --> 00:08:43.370
Use it here. Hello.

00:08:43.370 --> 00:08:50.090
Response is equal to
the response that comes

00:08:50.090 --> 00:08:59.495
back at a semicolon there.

00:08:59.495 --> 00:09:03.680
Do the second call. This
dot customer service,

00:09:03.680 --> 00:09:08.570
dot get customers is the
method dot subscribe.

00:09:08.570 --> 00:09:12.530
Same again, response
arrow function.

00:09:12.530 --> 00:09:17.645
This dot. The response
is customer response.

00:09:17.645 --> 00:09:19.385
That's the variable
we want it to assign,

00:09:19.385 --> 00:09:24.200
is equal to the response
that is coming back RES.

00:09:24.200 --> 00:09:26.810
So the component is very simple.

00:09:26.810 --> 00:09:30.320
We have injected to services
that we have imported,

00:09:30.320 --> 00:09:33.650
then we have invoked with the
methods on those services,

00:09:33.650 --> 00:09:36.350
and we have assigned them to
these variables which we can

00:09:36.350 --> 00:09:40.320
use in the UI or
the view later on.

00:09:40.810 --> 00:09:45.185
The last step is to render
the responses on the UI.

00:09:45.185 --> 00:09:48.125
Open up the HTML page
for our component.

00:09:48.125 --> 00:09:51.890
Clean it up. Use a heading H1.

00:09:51.890 --> 00:09:53.750
Within the heading will display

00:09:53.750 --> 00:09:57.665
the first response using the
string interpolation syntax.

00:09:57.665 --> 00:10:03.545
We named them the hello
response and customer response.

00:10:03.545 --> 00:10:05.300
So the first one is
the hallow response.

00:10:05.300 --> 00:10:07.010
You can format it
if you want to use

00:10:07.010 --> 00:10:09.545
the pipe JSON from Angular,

00:10:09.545 --> 00:10:12.365
copy this, paste it.

00:10:12.365 --> 00:10:17.060
Second is the customer response.

00:10:17.060 --> 00:10:20.330
Customer corresponds.

00:10:20.330 --> 00:10:22.475
Can add styling here,

00:10:22.475 --> 00:10:26.690
style is equal to
within double-quotes.

00:10:26.690 --> 00:10:29.220
Simply give it a color.

00:10:29.350 --> 00:10:32.555
Colon, read for the first one,

00:10:32.555 --> 00:10:37.055
copy it, paste it
inside the second H1,

00:10:37.055 --> 00:10:39.305
and change this to green.

00:10:39.305 --> 00:10:42.650
All the customer data
will be in green.

00:10:42.650 --> 00:10:44.460
That's it.

00:10:45.370 --> 00:10:49.024
Time to bootstrap our
application or configure

00:10:49.024 --> 00:10:52.340
the services and the root
component for our application.

00:10:52.340 --> 00:10:55.700
To do that, go to
the app module.js.

00:10:55.700 --> 00:10:58.085
Start with the
imports as always,

00:10:58.085 --> 00:11:00.124
right after the
component import.

00:11:00.124 --> 00:11:03.709
The first guy is
the hello service.

00:11:03.709 --> 00:11:06.590
So you can grab it by going
to the hello service.

00:11:06.590 --> 00:11:08.645
Hello service, service
is the name of it.

00:11:08.645 --> 00:11:12.425
So come back, paste
it right there.

00:11:12.425 --> 00:11:15.740
From within single quotes,

00:11:15.740 --> 00:11:18.920
dot slash services slash hello,

00:11:18.920 --> 00:11:21.500
service, that guy right there.

00:11:21.500 --> 00:11:24.245
So we service next import.

00:11:24.245 --> 00:11:27.260
The second one is the customer
service, grab that guy,

00:11:27.260 --> 00:11:29.060
customer service come back,

00:11:29.060 --> 00:11:32.735
paste it from single quotes.

00:11:32.735 --> 00:11:34.520
Again, dot slash services

00:11:34.520 --> 00:11:37.145
slash customer
service, this type.

00:11:37.145 --> 00:11:41.345
And the last important is the
HTTP module within braces.

00:11:41.345 --> 00:11:48.230
Http client module from
single codes, dot slash,

00:11:48.230 --> 00:11:51.860
no dots hit angular slash,

00:11:51.860 --> 00:11:55.790
common slash HTTP, semicolon,

00:11:55.790 --> 00:11:57.305
you know where the services go.

00:11:57.305 --> 00:11:59.000
They go right here
in the providers.

00:11:59.000 --> 00:12:02.330
So crap, the hello service put
it in the parameters comma

00:12:02.330 --> 00:12:06.020
that customer service
service will go right there.

00:12:06.020 --> 00:12:09.425
Then the module itself,

00:12:09.425 --> 00:12:11.375
the client module
will go right here.

00:12:11.375 --> 00:12:13.925
Http client module.

00:12:13.925 --> 00:12:16.280
And the root component
right now is app component.

00:12:16.280 --> 00:12:19.220
So let's change that to
multiple services component,

00:12:19.220 --> 00:12:22.070
grab that, come back,
paste it right there.

00:12:22.070 --> 00:12:24.335
That's the app module.js.

00:12:24.335 --> 00:12:27.155
One last step before we see
our application in action

00:12:27.155 --> 00:12:30.889
is to go to the index dot HTML.

00:12:30.889 --> 00:12:34.370
Here. Right now, this
is the root components,

00:12:34.370 --> 00:12:36.380
so get it up that app route.

00:12:36.380 --> 00:12:38.795
That is not what we want
to use in the index.js.

00:12:38.795 --> 00:12:40.190
Go back to our component,

00:12:40.190 --> 00:12:42.920
the multiple services
component dot HTML,

00:12:42.920 --> 00:12:46.760
or the component
itself, not the HTML.

00:12:46.760 --> 00:12:48.335
So go to component,

00:12:48.335 --> 00:12:49.820
open the TypeScript file,

00:12:49.820 --> 00:12:54.560
grab the selector, this
guy right here. Copy that.

00:12:54.560 --> 00:12:58.590
Come back to the index.html.

00:12:59.020 --> 00:13:04.335
Right there. Open
up angular bracket.

00:13:04.335 --> 00:13:06.160
Hello, Is it right there?

00:13:06.160 --> 00:13:07.615
A less than symbol, I mean,

00:13:07.615 --> 00:13:09.460
so that's the tag that should be

00:13:09.460 --> 00:13:11.815
their app hyphen, multiple
hyphens services.

00:13:11.815 --> 00:13:13.675
That, that's the last step

00:13:13.675 --> 00:13:15.220
in this lecture you
how successfully

00:13:15.220 --> 00:13:17.290
configure the services and

00:13:17.290 --> 00:13:18.685
then the history
API client module,

00:13:18.685 --> 00:13:20.080
in the app module Ts,

00:13:20.080 --> 00:13:21.670
and in the index.js,

00:13:21.670 --> 00:13:24.460
you have user the
component that we

00:13:24.460 --> 00:13:28.130
have created instead of
the default component.

00:13:28.830 --> 00:13:31.090
You're all set to run

00:13:31.090 --> 00:13:33.940
our application and
see multiple services

00:13:33.940 --> 00:13:36.070
working at the same
time or invoking

00:13:36.070 --> 00:13:38.455
multiple services from
the same component,

00:13:38.455 --> 00:13:45.440
go to the command line and
G. So hyphen 0, Enter.

00:13:46.650 --> 00:13:49.390
So while that launches,

00:13:49.390 --> 00:13:51.355
let me summarize
what we have done.

00:13:51.355 --> 00:13:54.550
We have created two services
in the same project,

00:13:54.550 --> 00:13:56.995
Hello service and the
customer service.

00:13:56.995 --> 00:13:59.530
And then we have those two in

00:13:59.530 --> 00:14:03.295
a single component called
multiple services component,

00:14:03.295 --> 00:14:05.215
which invokes those two.

00:14:05.215 --> 00:14:08.230
As science, the response two
variables, two variables,

00:14:08.230 --> 00:14:12.475
which we used in the HTML
to render the output.

00:14:12.475 --> 00:14:14.140
There we go.

00:14:14.140 --> 00:14:16.360
The output is, the first one

00:14:16.360 --> 00:14:18.190
comes from the first
service in read,

00:14:18.190 --> 00:14:21.055
the second response contains
all the customer data,

00:14:21.055 --> 00:14:23.750
which is all green.

00:14:24.120 --> 00:14:27.370
In this lecture, you
will learn how to make

00:14:27.370 --> 00:14:29.700
parallel calls using fork,

00:14:29.700 --> 00:14:31.970
join method or function.

00:14:31.970 --> 00:14:34.579
To do that, go to the component,

00:14:34.579 --> 00:14:36.530
multiple services
component where we are

00:14:36.530 --> 00:14:39.320
invoking one service
after the ADA,

00:14:39.320 --> 00:14:40.970
get it off discord.

00:14:40.970 --> 00:14:43.130
And we're going to
make parallel calls

00:14:43.130 --> 00:14:45.875
now using fork join.

00:14:45.875 --> 00:14:50.555
So the first step is to import
the fourth joint function,

00:14:50.555 --> 00:14:53.045
fork giant camel case.

00:14:53.045 --> 00:14:59.000
J capital join from our x js.

00:14:59.000 --> 00:15:01.310
So this import can
vary depending on

00:15:01.310 --> 00:15:03.710
the angular version you
have in Angular six.

00:15:03.710 --> 00:15:04.880
This is the way to do it.

00:15:04.880 --> 00:15:10.205
Directly. Import the fork-join
function from R x, js.

00:15:10.205 --> 00:15:13.115
Scroll down, go to
the init method,

00:15:13.115 --> 00:15:14.630
use the folk join method.

00:15:14.630 --> 00:15:17.570
Fork. Join is the function.

00:15:17.570 --> 00:15:19.805
This folk giant
function can take

00:15:19.805 --> 00:15:23.105
an array of service calls.

00:15:23.105 --> 00:15:24.635
So within this array,

00:15:24.635 --> 00:15:26.360
you will pass the first call,

00:15:26.360 --> 00:15:31.880
this dot hello surveys,
dot hello services.

00:15:31.880 --> 00:15:34.160
The method name comma,

00:15:34.160 --> 00:15:37.025
this dot customer service,

00:15:37.025 --> 00:15:41.870
dot get customers
is the second call.

00:15:41.870 --> 00:15:44.930
It is able to make
multiple calls.

00:15:44.930 --> 00:15:47.465
It's the responsibility
of fork-join to do that.

00:15:47.465 --> 00:15:49.490
Dot subscribe.

00:15:49.490 --> 00:15:51.875
You will process the
response just like before.

00:15:51.875 --> 00:15:54.950
But let's take this
subscribing to the new line.

00:15:54.950 --> 00:15:58.730
We have to process the
response for multiple methods.

00:15:58.730 --> 00:16:01.085
Within subscribe.

00:16:01.085 --> 00:16:05.255
You can get multiple responses
from the response array.

00:16:05.255 --> 00:16:09.650
So now this response will
be an array of responses.

00:16:09.650 --> 00:16:11.450
Use the arrow function,

00:16:11.450 --> 00:16:14.090
find the body of
the arrow function.

00:16:14.090 --> 00:16:17.315
You can retrieve
the first response

00:16:17.315 --> 00:16:19.100
as well as the second response,

00:16:19.100 --> 00:16:23.900
this dot hello response
we are assigning

00:16:23.900 --> 00:16:29.675
the response is equal
to response of zero.

00:16:29.675 --> 00:16:31.730
It's an array, the first

00:16:31.730 --> 00:16:34.325
element in the array
of this response.

00:16:34.325 --> 00:16:36.020
It can be accessed
using the zero

00:16:36.020 --> 00:16:37.640
subscript or the zero index.

00:16:37.640 --> 00:16:38.780
That will be the response of

00:16:38.780 --> 00:16:40.595
the first call in this array,

00:16:40.595 --> 00:16:41.900
which we have provided.

00:16:41.900 --> 00:16:46.220
This dot customer
response is equal

00:16:46.220 --> 00:16:51.485
to response of one. That's it.

00:16:51.485 --> 00:16:53.225
So to use fork-join,

00:16:53.225 --> 00:16:56.405
simply import the
fork-join from our XJs.

00:16:56.405 --> 00:16:59.225
Use it in your NGO
on init method.

00:16:59.225 --> 00:17:03.260
Pass it the multiple
calls within an array.

00:17:03.260 --> 00:17:04.760
So these are function calls to

00:17:04.760 --> 00:17:07.460
the services dot subscribe.

00:17:07.460 --> 00:17:12.020
You get a response which
is an array of responses.

00:17:12.020 --> 00:17:14.360
And then you assign
those responses to

00:17:14.360 --> 00:17:17.375
UVA fields that you
have defined here.

00:17:17.375 --> 00:17:19.790
If you go back to your UI,

00:17:19.790 --> 00:17:22.880
the multiple services the
UI is still stays the

00:17:22.880 --> 00:17:24.590
same because everything is

00:17:24.590 --> 00:17:26.570
compiled and pushed
onto the screen.

00:17:26.570 --> 00:17:29.450
If you want, you can
stop the server.

00:17:29.450 --> 00:17:32.390
Started again. That will

00:17:32.390 --> 00:17:33.890
build the application once

00:17:33.890 --> 00:17:36.320
again so that you can
see the rendering.

00:17:36.320 --> 00:17:38.870
Here we have tiny
little services.

00:17:38.870 --> 00:17:40.475
One is the hello service,

00:17:40.475 --> 00:17:42.395
which is not facing
a lot of data.

00:17:42.395 --> 00:17:45.965
But if you want to see
the power of fork-join,

00:17:45.965 --> 00:17:48.950
change the hello service
to the country's service,

00:17:48.950 --> 00:17:51.515
retrieve all the countries
and display that data.

00:17:51.515 --> 00:17:53.075
If you want to.

00:17:53.075 --> 00:17:56.705
Output. It will see,

00:17:56.705 --> 00:17:59.360
does the processing in
parallel, as I said,

00:17:59.360 --> 00:18:01.100
if you invoke some
other service or

00:18:01.100 --> 00:18:03.725
invoke the same service,

00:18:03.725 --> 00:18:05.885
the service which
is returning as

00:18:05.885 --> 00:18:08.645
countries or the customer
data multiple times.

00:18:08.645 --> 00:18:11.300
You will probably see
a difference when you

00:18:11.300 --> 00:18:14.195
use the sequence calls and
when you use fork-join,

00:18:14.195 --> 00:18:17.285
you will see that they
both work in parallel.

00:18:17.285 --> 00:18:18.635
But the important thing,

00:18:18.635 --> 00:18:22.830
you now know the syntax
to use fork-join.
