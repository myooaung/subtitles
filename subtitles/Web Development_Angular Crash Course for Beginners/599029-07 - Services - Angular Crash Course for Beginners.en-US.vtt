WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.490 --> 00:00:04.200
In this lecture,
you will learn what

00:00:04.200 --> 00:00:06.930
dependency injection is and how

00:00:06.930 --> 00:00:08.700
to do dependency injection in

00:00:08.700 --> 00:00:11.910
Angular applications
into simple steps.

00:00:11.910 --> 00:00:14.715
When we build huge
software applications

00:00:14.715 --> 00:00:16.365
are single-page applications.

00:00:16.365 --> 00:00:20.460
We don't put all the code in
one single component that

00:00:20.460 --> 00:00:25.410
COVID will be spread
across components, e.g.

00:00:25.410 --> 00:00:27.630
for a simple login module,

00:00:27.630 --> 00:00:29.385
we can have a login component,

00:00:29.385 --> 00:00:33.105
a login service, which
uses a HTTP module,

00:00:33.105 --> 00:00:35.980
which will make
server-side calls.

00:00:35.980 --> 00:00:38.915
One way to deal with
these dependencies.

00:00:38.915 --> 00:00:42.080
So here, the login component
depends on Login service and

00:00:42.080 --> 00:00:45.470
the login service depends
on the HTTP module.

00:00:45.470 --> 00:00:47.210
This kind of relationship is

00:00:47.210 --> 00:00:49.654
called a, has a relationship.

00:00:49.654 --> 00:00:52.655
To use the login service
inside login component,

00:00:52.655 --> 00:00:54.650
we can create an object of

00:00:54.650 --> 00:00:58.970
login service by using the
new operator and then use it.

00:00:58.970 --> 00:01:02.495
Similarly to use the HTTP
module in login service, we,

00:01:02.495 --> 00:01:04.670
as developers, will
create an object of

00:01:04.670 --> 00:01:07.835
this and then use it
inside the login service.

00:01:07.835 --> 00:01:09.380
Instead of doing

00:01:09.380 --> 00:01:11.975
all that dependency
injection on our own,

00:01:11.975 --> 00:01:14.495
we can delegate
that responsibility

00:01:14.495 --> 00:01:16.910
to frameworks like Angular.

00:01:16.910 --> 00:01:19.760
That is nothing but
dependency injection.

00:01:19.760 --> 00:01:21.890
So we'll tell
Angular that we need

00:01:21.890 --> 00:01:24.620
this login service
automatically at runtime,

00:01:24.620 --> 00:01:27.020
angular will create
that login service.

00:01:27.020 --> 00:01:30.620
It will inject it into a
login component as a field,

00:01:30.620 --> 00:01:32.315
and then we can use it.

00:01:32.315 --> 00:01:34.340
Similarly on the Login service,

00:01:34.340 --> 00:01:35.870
we will tell Angular
that we need

00:01:35.870 --> 00:01:37.880
the http module automatically.

00:01:37.880 --> 00:01:40.145
It will create that
object injected.

00:01:40.145 --> 00:01:44.075
So that will give us a lot
of dynamism at runtime.

00:01:44.075 --> 00:01:46.400
We can easily switch this from

00:01:46.400 --> 00:01:48.710
a real HTTPS HTP service to

00:01:48.710 --> 00:01:50.930
their markets,
GDP, service, etc.

00:01:50.930 --> 00:01:53.525
For our testing as well.

00:01:53.525 --> 00:01:56.405
To do dependency
injection in Angular,

00:01:56.405 --> 00:01:58.730
we can do it in
two simple steps.

00:01:58.730 --> 00:02:01.310
The first step is to register

00:02:01.310 --> 00:02:06.335
any component or any
dependency inside the module.

00:02:06.335 --> 00:02:09.560
That is in our app
dot module.js,

00:02:09.560 --> 00:02:11.285
which is our configuration file.

00:02:11.285 --> 00:02:15.500
We will import anything
that we want to

00:02:15.500 --> 00:02:17.750
inject that dependency
and we will then

00:02:17.750 --> 00:02:20.540
include that in the
provider's section.

00:02:20.540 --> 00:02:22.385
That is how Angular knows that

00:02:22.385 --> 00:02:24.710
that particular component or

00:02:24.710 --> 00:02:28.280
service or any other
module can be injected.

00:02:28.280 --> 00:02:30.260
This is the
registration process.

00:02:30.260 --> 00:02:34.595
The second step is to
use our inject itself.

00:02:34.595 --> 00:02:38.090
We do that by simply
providing a constructor.

00:02:38.090 --> 00:02:39.470
That's all we need to do.

00:02:39.470 --> 00:02:41.990
So here, this login component

00:02:41.990 --> 00:02:45.155
needs this login
service to work.

00:02:45.155 --> 00:02:46.790
So we are telling Angular,

00:02:46.790 --> 00:02:49.970
please inject this login
service by simply adding

00:02:49.970 --> 00:02:54.005
a constructor and defining
this field here as private.

00:02:54.005 --> 00:02:56.120
Once you do that, Angular

00:02:56.120 --> 00:02:58.430
will search for
this login surveys.

00:02:58.430 --> 00:03:01.100
If it is registered in
the provider's like this,

00:03:01.100 --> 00:03:05.030
it will create a singleton
object of this login service.

00:03:05.030 --> 00:03:07.895
It will inject it right here.

00:03:07.895 --> 00:03:10.970
We can then use this login
service anywhere inside

00:03:10.970 --> 00:03:14.450
of our login component
to get our work done.

00:03:14.450 --> 00:03:17.120
So dependency injection, the

00:03:17.120 --> 00:03:19.520
process of injecting
their dependencies.

00:03:19.520 --> 00:03:21.200
Instead of redoing it,

00:03:21.200 --> 00:03:24.530
we can ask frameworks like
Angular to do it for us.

00:03:24.530 --> 00:03:26.900
And in Angular we do it
in two simple steps.

00:03:26.900 --> 00:03:29.810
Add the dependency to
the provider section

00:03:29.810 --> 00:03:33.095
of energy module in
the app module dot ds,

00:03:33.095 --> 00:03:36.350
and then simply
provide a constructor.

00:03:36.350 --> 00:03:38.300
The parameters for
that constructor

00:03:38.300 --> 00:03:40.355
are nothing but
those dependencies.

00:03:40.355 --> 00:03:43.310
Angular will automatically
inject them by creating

00:03:43.310 --> 00:03:47.610
a singleton object of that type.

00:03:49.960 --> 00:03:52.145
The next few lectures,

00:03:52.145 --> 00:03:53.720
you are going to
create your very

00:03:53.720 --> 00:03:56.090
first Angular service that

00:03:56.090 --> 00:03:58.190
will fetch the information by

00:03:58.190 --> 00:04:00.635
consuming a RESTful web service.

00:04:00.635 --> 00:04:03.350
You're going to fetch
all the country details.

00:04:03.350 --> 00:04:05.105
That is the country name,

00:04:05.105 --> 00:04:08.600
capital, flag of the
country, and the currencies.

00:04:08.600 --> 00:04:11.510
And they will build a
angular component that will

00:04:11.510 --> 00:04:14.855
render that onto
the UI as follows.

00:04:14.855 --> 00:04:16.745
So go to your web browser,

00:04:16.745 --> 00:04:18.530
open up a new tab,

00:04:18.530 --> 00:04:24.440
and go to a website called
rest countries dot edu.

00:04:24.440 --> 00:04:26.780
Rest countries dot edu,

00:04:26.780 --> 00:04:29.390
enter this website, experts

00:04:29.390 --> 00:04:32.285
out RESTful APIs
which we can consume.

00:04:32.285 --> 00:04:33.650
On the left-hand side,

00:04:33.650 --> 00:04:36.140
you'll see all the
API endpoints.

00:04:36.140 --> 00:04:39.560
Click on All that
will take you to

00:04:39.560 --> 00:04:40.940
the URL that you can use to

00:04:40.940 --> 00:04:43.160
fetch all the
country information.

00:04:43.160 --> 00:04:45.830
So this is the
RESTful URL that can

00:04:45.830 --> 00:04:48.545
be used with the
HTTP GET method.

00:04:48.545 --> 00:04:52.740
It's copy that URL, open it
in a new browser window.

00:04:53.860 --> 00:04:56.450
Have a JSON formatter.

00:04:56.450 --> 00:04:59.360
That is why you see
this formatted JSON.

00:04:59.360 --> 00:05:02.600
This has the country name
and flag inflammation,

00:05:02.600 --> 00:05:04.400
capital information, et cetera.

00:05:04.400 --> 00:05:06.515
We're going to invoke
this web service

00:05:06.515 --> 00:05:08.285
from our Angular service.

00:05:08.285 --> 00:05:09.950
Uses that Angular service within

00:05:09.950 --> 00:05:14.790
a component and render
the following UI.

00:05:16.840 --> 00:05:19.595
In this and the
next few sections,

00:05:19.595 --> 00:05:22.430
you will be learning how
to use services within

00:05:22.430 --> 00:05:26.885
Angular application to
fetch as well as post data.

00:05:26.885 --> 00:05:29.990
And we're going to use
some RESTful web services

00:05:29.990 --> 00:05:31.895
that are available
over the internet.

00:05:31.895 --> 00:05:34.729
Here are the links
to those services.

00:05:34.729 --> 00:05:37.040
You can download this
angular links dot

00:05:37.040 --> 00:05:38.780
TXT file by going to

00:05:38.780 --> 00:05:40.610
the resources section
of this lecture.

00:05:40.610 --> 00:05:42.710
And we will be
using this links in

00:05:42.710 --> 00:05:46.560
this as well as the
next few sections.

00:05:48.300 --> 00:05:51.070
The first step is to create

00:05:51.070 --> 00:05:54.220
a country's project
or Angular app.

00:05:54.220 --> 00:05:56.170
To do that, go to
the command line,

00:05:56.170 --> 00:05:57.730
make sure you are under

00:05:57.730 --> 00:06:00.985
the angular folder where we
are storing all our projects.

00:06:00.985 --> 00:06:02.620
Use NG.

00:06:02.620 --> 00:06:06.790
New space countries
is the app name.

00:06:06.790 --> 00:06:11.080
Hit Enter, and that will
create a project as follows.

00:06:11.080 --> 00:06:14.065
I already created this
project to save us some time,

00:06:14.065 --> 00:06:15.820
you know, all the
important folders

00:06:15.820 --> 00:06:17.575
and files under this project.

00:06:17.575 --> 00:06:19.510
The next step, once you create

00:06:19.510 --> 00:06:22.420
the project is to go into
the project folder from

00:06:22.420 --> 00:06:25.240
your command line and add

00:06:25.240 --> 00:06:29.370
a service to it or generate
a service in that project.

00:06:29.370 --> 00:06:32.270
Do that using energy space G for

00:06:32.270 --> 00:06:35.569
generate S for service space.

00:06:35.569 --> 00:06:37.115
Now that we are going to have

00:06:37.115 --> 00:06:39.680
both services and components,

00:06:39.680 --> 00:06:41.735
Let's organize
them into folders.

00:06:41.735 --> 00:06:43.220
All the services
score will go into

00:06:43.220 --> 00:06:45.154
a folder called services.

00:06:45.154 --> 00:06:48.095
And the name of the
service is countries.

00:06:48.095 --> 00:06:50.930
Because it's going to retrieve
the country information.

00:06:50.930 --> 00:06:55.760
Hit Enter, that will generate
two files for us countries.

00:06:55.760 --> 00:06:58.175
Dot service, dot spec dot PS,

00:06:58.175 --> 00:06:59.930
country startService dot PS.

00:06:59.930 --> 00:07:03.785
This is the key file which
we're going to modify and add.

00:07:03.785 --> 00:07:06.170
Oliver Record will create

00:07:06.170 --> 00:07:08.465
the component later
on when we get to it,

00:07:08.465 --> 00:07:11.045
you can drag and drop
this project by opening

00:07:11.045 --> 00:07:14.240
a new Visual Studio
Code window, File menu.

00:07:14.240 --> 00:07:15.845
New window.

00:07:15.845 --> 00:07:21.170
Drag the project, drop it
onto Visual Studio Code.

00:07:21.170 --> 00:07:23.825
Go-to source.

00:07:23.825 --> 00:07:27.815
And you will see app
and you find services.

00:07:27.815 --> 00:07:31.235
The spec file and the
country service dot ds.

00:07:31.235 --> 00:07:32.930
This is the file
which we are going

00:07:32.930 --> 00:07:35.880
to modify in the next lecture.

00:07:36.460 --> 00:07:38.900
In this lecture, I
will walk you through

00:07:38.900 --> 00:07:40.460
the services code that got

00:07:40.460 --> 00:07:42.110
created in the previous lecture.

00:07:42.110 --> 00:07:44.060
And we'll also add
an import that is

00:07:44.060 --> 00:07:46.800
required for our
surveys to work.

00:07:46.800 --> 00:07:49.555
The very first line
here is important.

00:07:49.555 --> 00:07:52.930
Injectable from angular core is

00:07:52.930 --> 00:07:55.240
injectable is that
decorator that

00:07:55.240 --> 00:07:57.820
has been used on the
country's service.

00:07:57.820 --> 00:08:00.925
And this decorator
tells Angular that

00:08:00.925 --> 00:08:03.010
this particular
class object can be

00:08:03.010 --> 00:08:05.095
created or should be
created at runtime,

00:08:05.095 --> 00:08:07.255
and it should be injected into

00:08:07.255 --> 00:08:10.374
other components or
classes when required.

00:08:10.374 --> 00:08:13.555
So that is dependency,
injection.

00:08:13.555 --> 00:08:16.330
Whatever dependencies we
need will be automatically

00:08:16.330 --> 00:08:18.220
created and injected into

00:08:18.220 --> 00:08:19.840
other classes where
they are needed.

00:08:19.840 --> 00:08:22.555
So when you create the
country's component, later on,

00:08:22.555 --> 00:08:24.385
we will request
angular to create

00:08:24.385 --> 00:08:26.500
an object of this
and inject it into

00:08:26.500 --> 00:08:28.555
the component so
that we can start

00:08:28.555 --> 00:08:31.445
using the service
inside the component.

00:08:31.445 --> 00:08:34.490
And this provided in
property is where we tell

00:08:34.490 --> 00:08:38.645
Angular to use the root
dependency injection module.

00:08:38.645 --> 00:08:40.130
So Angular comes with

00:08:40.130 --> 00:08:42.365
a default route dependency
injection model,

00:08:42.365 --> 00:08:45.395
which is responsible
for creating objects,

00:08:45.395 --> 00:08:46.730
injecting these objects into

00:08:46.730 --> 00:08:48.440
other components as required.

00:08:48.440 --> 00:08:50.120
So we are telling
Angular please use

00:08:50.120 --> 00:08:53.615
the root default, dependency
injection module.

00:08:53.615 --> 00:08:56.480
If you want to have your
own custom modules to

00:08:56.480 --> 00:08:59.930
create the objects
and injecting them.

00:08:59.930 --> 00:09:02.060
You can always do
that by going to app

00:09:02.060 --> 00:09:04.490
module.js in the
provider section,

00:09:04.490 --> 00:09:06.890
you can provide a custom module

00:09:06.890 --> 00:09:10.650
and then you can start
using that module. In here.

00:09:11.650 --> 00:09:14.195
We need a single import.

00:09:14.195 --> 00:09:16.505
So let's add an important and
I'll explain what that is.

00:09:16.505 --> 00:09:19.730
Import within angular brackets.

00:09:19.730 --> 00:09:25.685
Http client from
within single quotes

00:09:25.685 --> 00:09:32.825
at angular slash,
common slash HTTP.

00:09:32.825 --> 00:09:35.405
That guy right there
semicolon at the end.

00:09:35.405 --> 00:09:38.210
So this HTTP client is
the client we're going to

00:09:38.210 --> 00:09:41.330
use in the next few lectures
to make the RESTful calls.

00:09:41.330 --> 00:09:44.630
It has support for all the
RESTful calls, get, put,

00:09:44.630 --> 00:09:46.430
post, all that can be done

00:09:46.430 --> 00:09:49.235
using this in very simple steps.

00:09:49.235 --> 00:09:51.950
In this lecture, you have
learned what injectable is.

00:09:51.950 --> 00:09:53.420
It is a decorator
that tells Angular

00:09:53.420 --> 00:09:55.610
that this service
classes object can be

00:09:55.610 --> 00:09:59.540
created and injected anywhere
as the application needs.

00:09:59.540 --> 00:10:00.950
And root is the default at

00:10:00.950 --> 00:10:02.390
dependency injection module that

00:10:02.390 --> 00:10:04.325
takes care of dependency
injection for us.

00:10:04.325 --> 00:10:07.460
And you have also added an
import is TDP client from

00:10:07.460 --> 00:10:09.410
Angular common history
DP that we'll be

00:10:09.410 --> 00:10:12.390
using in the next few lectures.

00:10:12.940 --> 00:10:16.475
In this lecture, we will
learn how easy it is to make

00:10:16.475 --> 00:10:18.350
a RESTful call and return

00:10:18.350 --> 00:10:20.675
the response from the
country's service.

00:10:20.675 --> 00:10:24.695
To do that, go to the
angular links dot txt file,

00:10:24.695 --> 00:10:26.750
grab the very first URL.

00:10:26.750 --> 00:10:29.735
This is the guy which is
responsible for fetching us

00:10:29.735 --> 00:10:33.140
all the country information
along with the flag, etc.

00:10:33.140 --> 00:10:35.720
Go back to Visual Studio Code.

00:10:35.720 --> 00:10:38.000
The first step is to inject

00:10:38.000 --> 00:10:40.865
this HTTP client into
that country service.

00:10:40.865 --> 00:10:45.650
So in the constructor
private space,

00:10:45.650 --> 00:10:49.175
underscore HTTP client colon,

00:10:49.175 --> 00:10:51.425
this is of type HTTP client

00:10:51.425 --> 00:10:52.910
that we have already imported.

00:10:52.910 --> 00:10:54.710
This tells Angular that

00:10:54.710 --> 00:10:57.200
an object of HTTP
client and instance of

00:10:57.200 --> 00:10:59.224
this HTTP client
should be injected

00:10:59.224 --> 00:11:01.655
at runtime into this variable.

00:11:01.655 --> 00:11:05.195
Once we have it, create
a method, public method,

00:11:05.195 --> 00:11:10.025
public get countries
is the method name,

00:11:10.025 --> 00:11:12.830
colon any, the return type is

00:11:12.830 --> 00:11:16.610
any that comes
after the brackets.

00:11:16.610 --> 00:11:18.575
So get countries is
the method name.

00:11:18.575 --> 00:11:20.180
It can return any within

00:11:20.180 --> 00:11:22.190
angular brackets
in a single line.

00:11:22.190 --> 00:11:24.260
We can fetch the
countries and written it.

00:11:24.260 --> 00:11:28.700
This dot underscore HTTP
client, we have access to that.

00:11:28.700 --> 00:11:32.795
Dot get is the
method HTTP client

00:11:32.795 --> 00:11:35.975
has various methods like
post, get, etcetera.

00:11:35.975 --> 00:11:38.420
Put all the HTTP methods
that are available here.

00:11:38.420 --> 00:11:39.530
In this particular case,

00:11:39.530 --> 00:11:40.550
we are fetching the countries,

00:11:40.550 --> 00:11:41.900
so use the getMethod,

00:11:41.900 --> 00:11:43.985
give it the URL
within double quotes

00:11:43.985 --> 00:11:46.820
or single quotes, paste the URL.

00:11:46.820 --> 00:11:49.550
And that will fetch all
the countries for us.

00:11:49.550 --> 00:11:52.340
And these methods
return an observable.

00:11:52.340 --> 00:11:53.360
If you point the cursor,

00:11:53.360 --> 00:11:57.245
you can see that it
returns an observable.

00:11:57.245 --> 00:11:59.240
Hi, I will show you
how to handle that

00:11:59.240 --> 00:12:01.190
corresponds when you
create a component,

00:12:01.190 --> 00:12:02.750
since it returns an observable,

00:12:02.750 --> 00:12:05.465
we need to get the data
out of that observable.

00:12:05.465 --> 00:12:06.410
That is very easy.

00:12:06.410 --> 00:12:08.090
I will show you when you
create the competence.

00:12:08.090 --> 00:12:09.905
So in this lecture,
you have made

00:12:09.905 --> 00:12:12.080
a RESTful call by injecting

00:12:12.080 --> 00:12:13.670
the HTTP client into

00:12:13.670 --> 00:12:16.850
the constructor of
the pantry service.

00:12:16.850 --> 00:12:19.250
And then you have created
a get countries method

00:12:19.250 --> 00:12:21.020
with any as return type.

00:12:21.020 --> 00:12:23.885
And the homemade a
restful get called

00:12:23.885 --> 00:12:25.160
HTTP GET call using

00:12:25.160 --> 00:12:29.070
the history API client
and giving it the URL.

00:12:31.180 --> 00:12:34.970
The next step is to create
a component that will

00:12:34.970 --> 00:12:39.005
consume the service are used
the service to do that,

00:12:39.005 --> 00:12:40.505
go to Command Line.

00:12:40.505 --> 00:12:43.760
Use N, G, G, C.

00:12:43.760 --> 00:12:45.410
I want the component to go into

00:12:45.410 --> 00:12:47.285
a folder called components

00:12:47.285 --> 00:12:52.200
slash countries is the
component name as well.

00:12:53.230 --> 00:12:58.145
And G, G, C components
slash countries hit Enter.

00:12:58.145 --> 00:13:00.290
And it will create
the four files

00:13:00.290 --> 00:13:01.895
which you are already aware of.

00:13:01.895 --> 00:13:05.750
And it will also update
the app dot module dot PS.

00:13:05.750 --> 00:13:08.360
Go back to Visual
Studio Code and they

00:13:08.360 --> 00:13:10.700
will see the components
folder under App,

00:13:10.700 --> 00:13:12.425
which has those four files.

00:13:12.425 --> 00:13:12.920
Open.

00:13:12.920 --> 00:13:15.365
The last file, which is
the TypeScript file,

00:13:15.365 --> 00:13:19.910
where all our logic will
go close the Explorer.

00:13:19.910 --> 00:13:22.265
The first step is to import

00:13:22.265 --> 00:13:24.785
the country's service here
so that we can use it

00:13:24.785 --> 00:13:30.095
import within angular
brackets, countries service.

00:13:30.095 --> 00:13:32.840
This country surveys is

00:13:32.840 --> 00:13:35.845
in a folder which
is related to this.

00:13:35.845 --> 00:13:38.660
We will have to go back one
folder up two countries,

00:13:38.660 --> 00:13:40.010
then up two components,

00:13:40.010 --> 00:13:42.920
then to services,
go into services.

00:13:42.920 --> 00:13:45.800
And that is where we have
the country's service dot py

00:13:45.800 --> 00:13:50.600
is to use the relative
path dot, dot slash, dot,

00:13:50.600 --> 00:13:55.370
dot slash services slash

00:13:55.370 --> 00:13:58.985
countries dot service
at a semicolon.

00:13:58.985 --> 00:14:01.850
Now we can use country's
service in here,

00:14:01.850 --> 00:14:04.355
so injected into the
country's component

00:14:04.355 --> 00:14:06.395
by using the constructor.

00:14:06.395 --> 00:14:11.390
Private underscore
surveys, colon.

00:14:11.390 --> 00:14:13.745
Countries service.

00:14:13.745 --> 00:14:16.235
Angularjs at runtime will inject

00:14:16.235 --> 00:14:17.750
this country service by creating

00:14:17.750 --> 00:14:20.195
an object into this variable.

00:14:20.195 --> 00:14:22.100
And to implement the logic,

00:14:22.100 --> 00:14:24.380
we are going to use the
first life cycle method

00:14:24.380 --> 00:14:25.610
which will be invoked right

00:14:25.610 --> 00:14:29.825
after this component is
created and g on in it.

00:14:29.825 --> 00:14:31.520
In here, you will use

00:14:31.520 --> 00:14:35.885
this dot underscore
service, dot get countries.

00:14:35.885 --> 00:14:39.080
Dot subscribe is the best way

00:14:39.080 --> 00:14:41.750
to invoke a function subscribe.

00:14:41.750 --> 00:14:43.310
Within brackets.

00:14:43.310 --> 00:14:49.100
We can handle the response
response user arrow function

00:14:49.100 --> 00:14:51.980
and add a semicolon
at the end of it.

00:14:51.980 --> 00:14:53.840
So within this arrow function,

00:14:53.840 --> 00:14:56.600
we can do whatever we want
to do with this response.

00:14:56.600 --> 00:14:59.135
I'm going to assign
it to a field,

00:14:59.135 --> 00:15:04.340
define a private field
called data of type any.

00:15:04.340 --> 00:15:06.575
And inside the arrow function,

00:15:06.575 --> 00:15:08.870
I'm going to assign

00:15:08.870 --> 00:15:15.150
this dot data is equal to the
response that comes back.

00:15:15.580 --> 00:15:18.095
In this lecture,
you have created

00:15:18.095 --> 00:15:20.555
a component successfully
from the command line.

00:15:20.555 --> 00:15:22.670
You have imported
the country service,

00:15:22.670 --> 00:15:24.170
you have injected it into

00:15:24.170 --> 00:15:26.135
the component through
the constructor.

00:15:26.135 --> 00:15:29.570
Then you have implemented
the method and g on in

00:15:29.570 --> 00:15:33.080
it by invoking the get countries
method on the service,

00:15:33.080 --> 00:15:34.910
you have assigned
the response to

00:15:34.910 --> 00:15:38.610
a global variable
on this component.

00:15:40.630 --> 00:15:42.830
In the previous lecture, we have

00:15:42.830 --> 00:15:44.705
handled the success response,

00:15:44.705 --> 00:15:48.050
but it is also important to
handle the error response.

00:15:48.050 --> 00:15:49.400
That is, if something goes wrong

00:15:49.400 --> 00:15:51.050
when this gets called happens,

00:15:51.050 --> 00:15:53.405
then we need to handle
that case as well.

00:15:53.405 --> 00:15:55.565
So right after this
flower bracket,

00:15:55.565 --> 00:16:01.490
where this method, this arrow
function ends, add a comma.

00:16:01.490 --> 00:16:03.050
And we're going to add

00:16:03.050 --> 00:16:06.530
one more function here that
can handle the error for us.

00:16:06.530 --> 00:16:10.235
Use error as the variable name.

00:16:10.235 --> 00:16:12.950
Arrow function begins
there and it ends there.

00:16:12.950 --> 00:16:17.060
Within which we can throw
the exception from here,

00:16:17.060 --> 00:16:18.950
we can simply log
it to the console,

00:16:18.950 --> 00:16:20.165
or we can define

00:16:20.165 --> 00:16:23.210
a function that can
handle the error for us.

00:16:23.210 --> 00:16:27.060
So inside the service, public,

00:16:27.610 --> 00:16:32.270
handle, error is the method name

00:16:32.270 --> 00:16:36.570
and it takes the error that
comes back as a parameter.

00:16:36.880 --> 00:16:39.590
Within this will do

00:16:39.590 --> 00:16:42.170
a console dot error

00:16:42.170 --> 00:16:44.090
that will be shown in red on

00:16:44.090 --> 00:16:45.995
the console instead
of console.log,

00:16:45.995 --> 00:16:48.995
we are using a
console dot error.

00:16:48.995 --> 00:16:57.185
Error ease colon space plus
the error that is passed in.

00:16:57.185 --> 00:16:59.870
Then we'll use the
observable and

00:16:59.870 --> 00:17:02.540
throw the error back. Return.

00:17:02.540 --> 00:17:03.320
This is important.

00:17:03.320 --> 00:17:07.830
Return observable dot through

00:17:08.200 --> 00:17:10.550
and throw the error back to

00:17:10.550 --> 00:17:12.680
the next component
or the next layer.

00:17:12.680 --> 00:17:16.205
In this case, the component
will be invoking the service.

00:17:16.205 --> 00:17:17.780
So if an exception is thrown,

00:17:17.780 --> 00:17:19.880
it will go back to
the component and

00:17:19.880 --> 00:17:23.220
the component needs
to handle the error.

00:17:23.500 --> 00:17:28.550
If there is no error, you can
simply say double-quotes.

00:17:28.550 --> 00:17:30.905
If this error is undefined,
for some reason,

00:17:30.905 --> 00:17:36.570
we'll add a default message,
internal server error.

00:17:36.570 --> 00:17:38.470
So using the pipe symbol,

00:17:38.470 --> 00:17:40.450
you can define a
default value for it.

00:17:40.450 --> 00:17:43.255
If this is undefined, save it,

00:17:43.255 --> 00:17:47.260
then invoke this
handle error up here,

00:17:47.260 --> 00:17:48.730
this door handle error,

00:17:48.730 --> 00:17:53.095
and pass in the error
that is being raised.

00:17:53.095 --> 00:17:54.970
In this lecture, you
have successfully

00:17:54.970 --> 00:17:56.380
handled the error or

00:17:56.380 --> 00:17:58.360
the exception case by defining

00:17:58.360 --> 00:18:01.750
a arrow function right
after the map function.

00:18:01.750 --> 00:18:03.880
And you have created

00:18:03.880 --> 00:18:05.290
a handle error method

00:18:05.290 --> 00:18:07.120
that is logging there
to the console.

00:18:07.120 --> 00:18:09.430
It uses observable dot through

00:18:09.430 --> 00:18:11.935
which we'll throw it
to the next layer,

00:18:11.935 --> 00:18:14.380
which is invoking
the services layer.

00:18:14.380 --> 00:18:15.850
And that layer should handle

00:18:15.850 --> 00:18:19.580
the error and do whatever
it wants to do with it.

00:18:20.950 --> 00:18:24.980
The last of the coding steps
is to implement the view

00:18:24.980 --> 00:18:28.205
or the HTML go-to
countries component.

00:18:28.205 --> 00:18:31.805
Html. Delete everything here.

00:18:31.805 --> 00:18:34.760
We're going to create
a HTML table that

00:18:34.760 --> 00:18:38.060
will display the country's name,

00:18:38.060 --> 00:18:42.950
capital, flag, and currencies
in a table format.

00:18:42.950 --> 00:18:47.060
To do that, use the HTML
table to start with.

00:18:47.060 --> 00:18:51.170
We are going to beautify
this later by using styles.

00:18:51.170 --> 00:18:54.810
But for now, simply
defined p head.

00:18:55.600 --> 00:18:59.315
Within the T-head define a row,

00:18:59.315 --> 00:19:03.185
BR, and all the table
headings be hitch.

00:19:03.185 --> 00:19:05.210
First one is name
of the country.

00:19:05.210 --> 00:19:06.575
You can copy this,

00:19:06.575 --> 00:19:09.080
paste it three more times.

00:19:09.080 --> 00:19:13.145
Name followed by capital
of that country,

00:19:13.145 --> 00:19:16.490
followed by flag, which
will be an image.

00:19:16.490 --> 00:19:19.860
And finally, currency cord.

00:19:21.760 --> 00:19:25.865
Currency or currencies.

00:19:25.865 --> 00:19:28.565
So that's the table heading.

00:19:28.565 --> 00:19:33.930
Next, use t body to
define the table body.

00:19:35.170 --> 00:19:38.780
This is where we're
going to use NG four

00:19:38.780 --> 00:19:41.795
because we have multiple rows,

00:19:41.795 --> 00:19:43.550
one for each country.

00:19:43.550 --> 00:19:45.035
So within this TR element,

00:19:45.035 --> 00:19:47.270
on this TR element inside it,

00:19:47.270 --> 00:19:50.525
use star and G.

00:19:50.525 --> 00:19:56.300
F capital for is equal
to within double-quotes.

00:19:56.300 --> 00:20:01.435
Let C of data.

00:20:01.435 --> 00:20:03.560
The data is what

00:20:03.560 --> 00:20:05.360
we have already assigned
in the component,

00:20:05.360 --> 00:20:07.205
this variable, which will have,

00:20:07.205 --> 00:20:09.455
which will be
accessed in the HTML.

00:20:09.455 --> 00:20:10.730
Right here.

00:20:10.730 --> 00:20:12.515
Angular will take care of it.

00:20:12.515 --> 00:20:16.280
So let C of data will
give us each country as

00:20:16.280 --> 00:20:20.285
we loop through the json data
that comes back like this.

00:20:20.285 --> 00:20:21.995
So for each country,

00:20:21.995 --> 00:20:23.570
it will be assigned to this.

00:20:23.570 --> 00:20:26.015
See, you can call it
whatever you want.

00:20:26.015 --> 00:20:27.215
Inside of it.

00:20:27.215 --> 00:20:29.870
Had a Td. The first set of

00:20:29.870 --> 00:20:33.725
information will go into the
string interpolation syntax.

00:20:33.725 --> 00:20:40.025
C dot name, dot name.

00:20:40.025 --> 00:20:42.290
Because if you search
here, right here,

00:20:42.290 --> 00:20:45.005
name is the field or
the property name,

00:20:45.005 --> 00:20:47.360
that is exactly what
we are using here.

00:20:47.360 --> 00:20:50.210
Copy this, paste it.

00:20:50.210 --> 00:20:53.240
Second property is the capital.

00:20:53.240 --> 00:20:58.175
So u dot capital copy pasted.

00:20:58.175 --> 00:21:00.455
The third one is a
little bit tricky.

00:21:00.455 --> 00:21:02.720
We have to use the image element

00:21:02.720 --> 00:21:04.865
here because the third
field is the flag.

00:21:04.865 --> 00:21:06.950
We want to display
the flag here.

00:21:06.950 --> 00:21:08.990
So if you search for flag,

00:21:08.990 --> 00:21:11.000
you see that it is a URL.

00:21:11.000 --> 00:21:13.070
So we need to point to that URL

00:21:13.070 --> 00:21:15.935
using an image tag
inside the TD.

00:21:15.935 --> 00:21:20.405
Use image.

00:21:20.405 --> 00:21:26.285
Within the image SRC is equal
to within double-quotes.

00:21:26.285 --> 00:21:28.550
We can use the string
interpolation syntax.

00:21:28.550 --> 00:21:30.785
Close this image right here.

00:21:30.785 --> 00:21:34.040
Open to flower
brackets, close them.

00:21:34.040 --> 00:21:36.215
X or c dot.

00:21:36.215 --> 00:21:38.510
Flag is the property.

00:21:38.510 --> 00:21:40.940
So we're simply
referring to that URL as

00:21:40.940 --> 00:21:43.910
the image source so that
the flag will be displayed.

00:21:43.910 --> 00:21:47.280
Lastly, TD,

00:21:50.470 --> 00:21:56.030
C dot currencies is an array.

00:21:56.030 --> 00:21:59.630
If you go back, look at
currencies, it's an array.

00:21:59.630 --> 00:22:02.780
So we will have to say
currencies of zero.

00:22:02.780 --> 00:22:06.240
I just want to display the
first currencies code,

00:22:06.250 --> 00:22:09.450
dot code.

00:22:09.970 --> 00:22:13.535
So currency code will year.

00:22:13.535 --> 00:22:15.575
There is only one currency
for this country,

00:22:15.575 --> 00:22:18.275
but some countries, they might
have multiple currencies.

00:22:18.275 --> 00:22:19.910
And we are retrieving

00:22:19.910 --> 00:22:23.270
just the first currency
code in that array.

00:22:23.270 --> 00:22:27.560
So to summarize this,
It's very simple.

00:22:27.560 --> 00:22:29.015
We have added a table,

00:22:29.015 --> 00:22:33.470
and the table body has a PR
within which we are looping.

00:22:33.470 --> 00:22:35.960
So the angular will
create multiple TR's,

00:22:35.960 --> 00:22:39.425
one for each country that
comes back from the data.

00:22:39.425 --> 00:22:42.770
And we are displaying
the name capital image.

00:22:42.770 --> 00:22:44.795
We have used it, the flag,

00:22:44.795 --> 00:22:46.880
URL, and currencies we

00:22:46.880 --> 00:22:49.890
are displaying the
first currency scored.

00:22:51.240 --> 00:22:54.295
The next step is
to wire everything

00:22:54.295 --> 00:22:56.875
together or configure
everything together.

00:22:56.875 --> 00:23:00.415
To do that, go to the
app dot module dot ds.

00:23:00.415 --> 00:23:02.440
We need a couple
of imports here.

00:23:02.440 --> 00:23:05.140
We need to import the
service, the country Service,

00:23:05.140 --> 00:23:08.500
and also we need to import the
history HTP client module.

00:23:08.500 --> 00:23:12.370
So start with the service
import within brackets.

00:23:12.370 --> 00:23:20.230
Countries service from
within single quotes,

00:23:20.230 --> 00:23:21.550
it is at the same level.

00:23:21.550 --> 00:23:27.310
So dot slash services slash
countries dot service,

00:23:27.310 --> 00:23:28.720
that is the first
one, the second one

00:23:28.720 --> 00:23:31.165
import within angular brackets,

00:23:31.165 --> 00:23:37.130
HTTP client module from within

00:23:37.130 --> 00:23:46.520
single quotes at angular
slash, common slash HTTP.

00:23:46.520 --> 00:23:50.300
This is the client module
that should go into

00:23:50.300 --> 00:23:52.250
the import section right here

00:23:52.250 --> 00:23:54.740
along with the browser
module from Angular,

00:23:54.740 --> 00:23:58.220
HTTP client module, paste
it right there and inside

00:23:58.220 --> 00:24:01.625
the providers is where the
country's service will go.

00:24:01.625 --> 00:24:04.220
So countries surveys
should go right there.

00:24:04.220 --> 00:24:06.635
Once you do that,
Angular can create

00:24:06.635 --> 00:24:08.060
objects of this type and it will

00:24:08.060 --> 00:24:09.680
inject it wherever required,

00:24:09.680 --> 00:24:12.170
especially into the component.

00:24:12.170 --> 00:24:13.970
Similarly, Angular
will know that

00:24:13.970 --> 00:24:16.160
our project needs
HTTP client module.

00:24:16.160 --> 00:24:17.915
And once you add
it to the imports,

00:24:17.915 --> 00:24:20.930
that will be imported
for our application.

00:24:20.930 --> 00:24:22.070
And we have already used

00:24:22.070 --> 00:24:26.165
the HTTP client
inside the service.

00:24:26.165 --> 00:24:28.040
And last and very important,

00:24:28.040 --> 00:24:29.855
the bootstrap by default,

00:24:29.855 --> 00:24:32.449
the Bootstrap component
is the App component.

00:24:32.449 --> 00:24:33.950
But I don't want that. I want

00:24:33.950 --> 00:24:35.510
the default component
to the Doobie,

00:24:35.510 --> 00:24:39.575
the country's component,
countries component.

00:24:39.575 --> 00:24:41.060
So an Angular application

00:24:41.060 --> 00:24:43.100
starts when our application
starts running,

00:24:43.100 --> 00:24:44.615
the very first competent that is

00:24:44.615 --> 00:24:46.970
responsible for generating
the homepage or

00:24:46.970 --> 00:24:48.800
the only pays in
this application is

00:24:48.800 --> 00:24:50.660
the country's
component that will

00:24:50.660 --> 00:24:54.030
render all the
country information.

00:24:55.260 --> 00:24:59.500
It's time to see our
application in action before we

00:24:59.500 --> 00:25:02.965
go ahead and use the
component in the index.html,

00:25:02.965 --> 00:25:05.695
go to the country's
service dot py file

00:25:05.695 --> 00:25:08.950
and add a return statement here.

00:25:08.950 --> 00:25:10.540
Use the return keyword.

00:25:10.540 --> 00:25:13.375
If not, the response will
not be returned back.

00:25:13.375 --> 00:25:15.805
If you have already done
it, You are awesome.

00:25:15.805 --> 00:25:18.415
I missed it. Once that is done,

00:25:18.415 --> 00:25:21.625
the next thing is to
use the component,

00:25:21.625 --> 00:25:25.570
which is countries
dot component dot ts,

00:25:25.570 --> 00:25:28.345
which is mapper to
app hyphen countries.

00:25:28.345 --> 00:25:29.680
This is the selector.

00:25:29.680 --> 00:25:32.455
Copy it up hyphen countries.

00:25:32.455 --> 00:25:35.380
Go to the index.html.

00:25:35.380 --> 00:25:40.730
Scroll down. Right now the
index.html uses app route,

00:25:40.730 --> 00:25:42.110
which is the default component.

00:25:42.110 --> 00:25:46.265
Get rid of it, and
use App hyphen.

00:25:46.265 --> 00:25:49.730
Countries, close that
element, save it.

00:25:49.730 --> 00:25:51.560
Go to the command line.

00:25:51.560 --> 00:25:54.245
Make sure you are inside
the country's project.

00:25:54.245 --> 00:25:57.830
Do N G hyphen,

00:25:57.830 --> 00:26:01.295
or to open it in the
web browser, hit Enter.

00:26:01.295 --> 00:26:04.530
That will build our application.

00:26:04.630 --> 00:26:10.475
Once that completes, it will
even launch the server.

00:26:10.475 --> 00:26:13.500
So it's running on 4200.

00:26:17.230 --> 00:26:19.340
There we go.

00:26:19.340 --> 00:26:22.730
And it displays all
the country names

00:26:22.730 --> 00:26:24.950
and the flags right now
the flags are huge.

00:26:24.950 --> 00:26:26.090
We'll take care of it.

00:26:26.090 --> 00:26:28.340
We're going to apply styling
in the next lecture.

00:26:28.340 --> 00:26:32.390
But the key is everything
works as expected.

00:26:32.390 --> 00:26:35.405
It goes from the
component to the service.

00:26:35.405 --> 00:26:37.850
The service fit just
the data for us.

00:26:37.850 --> 00:26:41.780
And then the component sends
the data back to the UI.

00:26:41.780 --> 00:26:44.975
All that is being
done by Angular.

00:26:44.975 --> 00:26:47.300
And in the next lecture
we will apply styling

00:26:47.300 --> 00:26:50.400
and we'll beautify
this a little bit.

00:26:51.550 --> 00:26:54.980
In this lecture, we'll
beautify our view

00:26:54.980 --> 00:26:58.430
by adding some inline
styling to our HTML.

00:26:58.430 --> 00:27:00.770
To do that, go to the
Visual Studio Code,

00:27:00.770 --> 00:27:06.480
go to the countries dot
component dot HTML page,

00:27:06.790 --> 00:27:09.530
and use inline styling.

00:27:09.530 --> 00:27:11.975
We can also use the CSS.

00:27:11.975 --> 00:27:14.330
If you add styles
to the CSS file,

00:27:14.330 --> 00:27:16.250
those will be
applied to the HTML,

00:27:16.250 --> 00:27:19.250
but we are going to use some
inline styling for now.

00:27:19.250 --> 00:27:22.310
Starting with the table element,

00:27:22.310 --> 00:27:24.050
add a border to the table.

00:27:24.050 --> 00:27:32.525
One cell spacing is
equal to five pixels.

00:27:32.525 --> 00:27:39.545
Cell padding is equal
to five pixels as well.

00:27:39.545 --> 00:27:41.975
Give it an alignment.

00:27:41.975 --> 00:27:45.455
Align is equal to center align.

00:27:45.455 --> 00:27:49.970
Last, let's add a
style attribute.

00:27:49.970 --> 00:27:52.160
To add a font.

00:27:52.160 --> 00:27:55.880
Hyphen size, font size,

00:27:55.880 --> 00:27:58.714
colon space 20 pixels.

00:27:58.714 --> 00:28:01.835
I want the font-size to be
20 pixels for all the text.

00:28:01.835 --> 00:28:04.670
Then move on to that
table header T head.

00:28:04.670 --> 00:28:09.290
Use the style element to
define a background color.

00:28:09.290 --> 00:28:11.930
Background color,
which is right here.

00:28:11.930 --> 00:28:14.720
Colon gray is the
background color.

00:28:14.720 --> 00:28:17.810
You are welcome to use any of
your favorite colors here.

00:28:17.810 --> 00:28:25.595
Save it. Next, move on
directly to the image,

00:28:25.595 --> 00:28:27.800
because we are seeing
huge images here.

00:28:27.800 --> 00:28:29.135
We don't want that what

00:28:29.135 --> 00:28:32.915
the image element and fix
the width and height.

00:28:32.915 --> 00:28:40.320
Image width is equal to
within double-quotes.

00:28:41.650 --> 00:28:44.735
Let's say 100 pixels.

00:28:44.735 --> 00:28:46.310
Close it right there,

00:28:46.310 --> 00:28:51.319
and height is equal
to 50 pixels.

00:28:51.319 --> 00:28:53.765
Save it. And as soon
as you save it,

00:28:53.765 --> 00:28:55.760
that should reflect on the UI.

00:28:55.760 --> 00:28:58.040
Now that looks much better.

00:28:58.040 --> 00:29:00.350
All the country names, capitals,

00:29:00.350 --> 00:29:03.450
flags, and the currency code.
