WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.640 --> 00:00:04.604
Direct use in Angular or

00:00:04.604 --> 00:00:07.544
attributes we added
to our HTML elements,

00:00:07.544 --> 00:00:09.165
which will dynamically affect

00:00:09.165 --> 00:00:11.100
the HTML DOM that gets

00:00:11.100 --> 00:00:13.950
generated when our
page is rendered.

00:00:13.950 --> 00:00:15.750
Using the direct use,

00:00:15.750 --> 00:00:18.959
which are attributes
on every HTML element.

00:00:18.959 --> 00:00:23.025
We can control the way
our dorm is generated.

00:00:23.025 --> 00:00:24.870
In this section, we will explore

00:00:24.870 --> 00:00:26.969
the various inbuilt
directives that you are

00:00:26.969 --> 00:00:29.520
going to use throughout
this course.

00:00:29.520 --> 00:00:33.689
The first one is mg if the NG

00:00:33.689 --> 00:00:35.009
if directive is used to

00:00:35.009 --> 00:00:38.144
display HTML element
conditionally.

00:00:38.144 --> 00:00:42.085
That is if the result on the
right hand side of this MGF,

00:00:42.085 --> 00:00:44.494
a Boolean true, then

00:00:44.494 --> 00:00:47.090
this element will be
added to the DOM.

00:00:47.090 --> 00:00:50.149
If it is false that
this element will not

00:00:50.149 --> 00:00:54.125
be added to the dorm or it
will be removed from the dump.

00:00:54.125 --> 00:00:56.329
This value.

00:00:56.329 --> 00:00:58.805
Here we have
hard-coded it to true,

00:00:58.805 --> 00:01:01.295
but it can be a
JavaScript variable

00:01:01.295 --> 00:01:04.340
or even a function call,

00:01:04.340 --> 00:01:07.669
which is just like switch in

00:01:07.669 --> 00:01:10.174
JavaScript or any other
programming language.

00:01:10.174 --> 00:01:12.094
When we use EMG switch,

00:01:12.094 --> 00:01:14.644
the elements that match

00:01:14.644 --> 00:01:18.035
the EMG switches case
will be displayed.

00:01:18.035 --> 00:01:19.475
And we can also define

00:01:19.475 --> 00:01:22.040
a default case which will
be displayed when none of

00:01:22.040 --> 00:01:26.434
the other cases match
the given or choice.

00:01:26.434 --> 00:01:29.285
The next directive
is the NG four,

00:01:29.285 --> 00:01:30.950
as the name itself says,

00:01:30.950 --> 00:01:33.920
it is used to repeat
a given DOM element

00:01:33.920 --> 00:01:37.520
based on each
element in an array.

00:01:37.520 --> 00:01:43.190
So in G4 uses the syntax and
it goes against an array.

00:01:43.190 --> 00:01:45.125
As we loop through the array,

00:01:45.125 --> 00:01:48.080
where each element
in the array inside

00:01:48.080 --> 00:01:51.869
the loop to render
the appropriate HTML.

00:01:52.750 --> 00:01:56.465
We use N G non binding to tell

00:01:56.465 --> 00:02:01.249
Angular not to bind our
compile a part of our page.

00:02:01.249 --> 00:02:02.225
Here.

00:02:02.225 --> 00:02:05.809
This string interpolation
syntax will not be compiled.

00:02:05.809 --> 00:02:09.679
You will see this as it is
if you make this do here.

00:02:09.679 --> 00:02:13.220
And G non mandible will also

00:02:13.220 --> 00:02:16.909
explore and G style and
NG class directives,

00:02:16.909 --> 00:02:19.799
which will help us with styling.

00:02:20.800 --> 00:02:25.444
The very first angular inbuilt
directive, which is mg.

00:02:25.444 --> 00:02:26.885
If to do that,

00:02:26.885 --> 00:02:28.804
Let's create Angular project.

00:02:28.804 --> 00:02:30.439
Make sure you are
under the angular

00:02:30.439 --> 00:02:32.194
directory on your machine.

00:02:32.194 --> 00:02:37.459
And G, new directives is
the project name hit Enter.

00:02:37.459 --> 00:02:40.789
And that will create
a project as follows.

00:02:40.789 --> 00:02:44.074
Grab the project onto
Visual Studio Code,

00:02:44.074 --> 00:02:46.970
drag and drop it onto
Visual Studio code.

00:02:46.970 --> 00:02:49.710
Go back to the command line.

00:02:50.400 --> 00:02:54.879
Go into the directives
directory or the project,

00:02:54.879 --> 00:02:59.935
and create the first component
and G, G, c4 components.

00:02:59.935 --> 00:03:01.780
I want the components
to be stored in

00:03:01.780 --> 00:03:05.169
the components folder slash if.

00:03:05.169 --> 00:03:07.389
Since we are exploring
the if directive,

00:03:07.389 --> 00:03:09.565
let's create a component
called if I hit

00:03:09.565 --> 00:03:14.889
Enter that will create all
the files for the component.

00:03:14.889 --> 00:03:16.809
Go back to Visual Studio Code,

00:03:16.809 --> 00:03:19.839
close everything if you
have anything open.

00:03:19.839 --> 00:03:24.939
Right here we have app
components, if component,

00:03:24.939 --> 00:03:29.604
if dot HTML and if
dot component dot ts,

00:03:29.604 --> 00:03:31.644
the selector for
it is app hyphen.

00:03:31.644 --> 00:03:35.044
If go to the HTML straightaway,

00:03:35.044 --> 00:03:38.344
clean this up. Use the Angular.

00:03:38.344 --> 00:03:41.554
If you use a bold tag.

00:03:41.554 --> 00:03:45.679
This bold tag displays
a text called you

00:03:45.679 --> 00:03:50.315
are the creator of your destiny.

00:03:50.315 --> 00:03:53.134
My favorite quotes within bold.

00:03:53.134 --> 00:03:57.695
Now you to use the
NG if you star N G,

00:03:57.695 --> 00:04:00.710
capital F is equal to,

00:04:00.710 --> 00:04:02.599
it takes a Boolean value,

00:04:02.599 --> 00:04:04.879
which could be a value directly,

00:04:04.879 --> 00:04:06.979
an expression that
can be evaluated,

00:04:06.979 --> 00:04:09.904
a comparison or even
a function call.

00:04:09.904 --> 00:04:11.495
Let's try the first one.

00:04:11.495 --> 00:04:12.934
Pass false.

00:04:12.934 --> 00:04:14.489
Here.

00:04:17.080 --> 00:04:20.690
To use this component
are two series on the UI

00:04:20.690 --> 00:04:23.915
grabbed this app hyphen
if from the component,

00:04:23.915 --> 00:04:26.570
go to the default app HTML,

00:04:26.570 --> 00:04:32.705
clean it up and use App
happen if right here.

00:04:32.705 --> 00:04:35.074
So when we go to the homepage,

00:04:35.074 --> 00:04:38.449
we should see the output
of our component now.

00:04:38.449 --> 00:04:40.534
Go back to the command line.

00:04:40.534 --> 00:04:47.189
And G hyphen 0, hit Enter.

00:04:54.490 --> 00:04:57.169
Once it's built.

00:04:57.169 --> 00:05:01.220
We should not see the
code on the web browser.

00:05:01.220 --> 00:05:03.770
Because we have used N, G,

00:05:03.770 --> 00:05:06.139
F, and the result was false.

00:05:06.139 --> 00:05:07.954
So there is nothing in here.

00:05:07.954 --> 00:05:09.469
If you go to the console,

00:05:09.469 --> 00:05:11.000
we don't have any errors,

00:05:11.000 --> 00:05:12.364
but you don't see anything.

00:05:12.364 --> 00:05:15.169
Because all we have
in our HTML page,

00:05:15.169 --> 00:05:19.100
if dot component dot
HTML is this bold tag,

00:05:19.100 --> 00:05:21.019
and this bold tag will not be

00:05:21.019 --> 00:05:23.150
rendered on the UI because we

00:05:23.150 --> 00:05:27.244
have conditionally evaluated
the value of it to false.

00:05:27.244 --> 00:05:29.059
If you change this to true,

00:05:29.059 --> 00:05:32.405
save it, go back to
the web browser.

00:05:32.405 --> 00:05:35.210
Once it renders, it
will see the code.

00:05:35.210 --> 00:05:39.119
That is how Angie, if works.

00:05:39.820 --> 00:05:41.929
In the previous lecture,

00:05:41.929 --> 00:05:44.270
we have used a
Boolean literal value

00:05:44.270 --> 00:05:46.264
inside NG if directly.

00:05:46.264 --> 00:05:48.545
We rarely check it like this.

00:05:48.545 --> 00:05:50.540
Often we get the values from

00:05:50.540 --> 00:05:53.059
the backend or from
our component.

00:05:53.059 --> 00:05:56.134
So go to the F dot
component dot ts.

00:05:56.134 --> 00:06:00.200
Here inside the constructor
we can define two variables.

00:06:00.200 --> 00:06:04.085
Say this dot x is equal to,

00:06:04.085 --> 00:06:08.120
In, this dot y is equal to 20.

00:06:08.120 --> 00:06:09.920
We haven't defined
these two properties,

00:06:09.920 --> 00:06:11.254
so let's do that here.

00:06:11.254 --> 00:06:16.280
X colon number, y
colon number as well.

00:06:16.280 --> 00:06:19.189
And we are initializing
them to 10.20.

00:06:19.189 --> 00:06:23.510
Now we can use these x
and y inside the HTML.

00:06:23.510 --> 00:06:25.759
Can grab this.

00:06:25.759 --> 00:06:32.749
Paste it evaluated, simply
use x is greater than y.

00:06:32.749 --> 00:06:34.759
Let's try that first.

00:06:34.759 --> 00:06:36.874
Go back to the web browser.

00:06:36.874 --> 00:06:38.764
Nothing is rendered.

00:06:38.764 --> 00:06:41.119
The second coat is
not rendered at all.

00:06:41.119 --> 00:06:43.505
Instead of this code,
let's change the text.

00:06:43.505 --> 00:06:46.444
Conditional logic.

00:06:46.444 --> 00:06:47.630
Save it.

00:06:47.630 --> 00:06:49.925
You still will not
see it on the UI.

00:06:49.925 --> 00:06:52.009
Now if you change this,
flip this around,

00:06:52.009 --> 00:06:54.635
x is less than Y.

00:06:54.635 --> 00:06:56.165
Save it.

00:06:56.165 --> 00:06:59.104
Now it will appear right here.

00:06:59.104 --> 00:07:01.925
Because this expression here,

00:07:01.925 --> 00:07:04.760
the conditional
expression returns true.

00:07:04.760 --> 00:07:07.339
That is why you are
seeing conditional logic.

00:07:07.339 --> 00:07:11.210
You can add a BR at the
end of the first one.

00:07:11.210 --> 00:07:13.490
Grab that BR, paste

00:07:13.490 --> 00:07:15.784
it at the end of the
second one as well.

00:07:15.784 --> 00:07:17.930
Go back to the component dot ts.

00:07:17.930 --> 00:07:20.210
You can also do string
comparison if you want.

00:07:20.210 --> 00:07:24.379
So define S colon
of type string.

00:07:24.379 --> 00:07:30.469
And this dot S is
equal to success.

00:07:30.469 --> 00:07:32.059
Save it.

00:07:32.059 --> 00:07:33.800
Go back to the HTML,

00:07:33.800 --> 00:07:37.999
grab the previous
NG if paste it,

00:07:37.999 --> 00:07:45.110
and check if S w equal
to within single quotes.

00:07:45.110 --> 00:07:48.694
The value you want
to check success.

00:07:48.694 --> 00:07:54.199
Here. Success is the
message I want to display.

00:07:54.199 --> 00:07:56.010
Save it.

00:07:56.380 --> 00:07:59.945
Go back to the
browser and you see

00:07:59.945 --> 00:08:03.079
success if you compare
it with something else.

00:08:03.079 --> 00:08:05.570
So ASU CCE, save it,

00:08:05.570 --> 00:08:07.295
go back to the web Rosa.

00:08:07.295 --> 00:08:10.220
You will not see the
output which is success.

00:08:10.220 --> 00:08:12.845
This n element,
the bold element,

00:08:12.845 --> 00:08:14.659
is not rendered at all.

00:08:14.659 --> 00:08:18.724
Change it back and
you will see it.

00:08:18.724 --> 00:08:22.954
And this can even be a
function call inside the Ts.

00:08:22.954 --> 00:08:29.310
If you define a
function, say, my fun.

00:08:29.470 --> 00:08:33.034
Return, true.

00:08:33.034 --> 00:08:35.510
So whatever logic
you want to define,

00:08:35.510 --> 00:08:36.800
you can define within
this function,

00:08:36.800 --> 00:08:39.889
you can even make backend calls
as you would do later on.

00:08:39.889 --> 00:08:42.259
And once the
response comes back,

00:08:42.259 --> 00:08:44.270
whatever this
function returns that

00:08:44.270 --> 00:08:46.279
will be used in your NG.

00:08:46.279 --> 00:08:51.440
If grab that, paste it.

00:08:51.440 --> 00:08:56.675
Within double-quotes here,
we can invoke my fun.

00:08:56.675 --> 00:09:00.965
And you can say from f function,

00:09:00.965 --> 00:09:06.244
or you can say using
f function, save it.

00:09:06.244 --> 00:09:07.894
Go back to the browser.

00:09:07.894 --> 00:09:09.679
You will see using f function.

00:09:09.679 --> 00:09:13.445
Now, this function is invoked
since it returns true.

00:09:13.445 --> 00:09:16.610
The HTML element is
included in their dorm.

00:09:16.610 --> 00:09:18.589
If not, that HTML
element will not

00:09:18.589 --> 00:09:21.394
be rendered or add
it to the DOM,

00:09:21.394 --> 00:09:24.454
change it to false to
do one final test.

00:09:24.454 --> 00:09:27.469
Save it, go back to the browser.

00:09:27.469 --> 00:09:31.019
And using the function is gone.

00:09:31.930 --> 00:09:34.130
In this lecture.

00:09:34.130 --> 00:09:36.980
The switch direct
you to do that,

00:09:36.980 --> 00:09:38.180
go to the command line,

00:09:38.180 --> 00:09:40.520
stop the server if
it's up and running.

00:09:40.520 --> 00:09:43.415
And G, G, C,

00:09:43.415 --> 00:09:48.050
components slash switch
is the new component.

00:09:48.050 --> 00:09:50.600
Go back to Visual Studio Code,

00:09:50.600 --> 00:09:53.555
close everything to do with if.

00:09:53.555 --> 00:09:58.744
Expand, switch, open
up the HTML page.

00:09:58.744 --> 00:10:00.800
Select everything to use.

00:10:00.800 --> 00:10:05.314
Switch. Let's explore
or use do elements.

00:10:05.314 --> 00:10:07.144
We have one root do,

00:10:07.144 --> 00:10:08.840
which will act as
a container and

00:10:08.840 --> 00:10:11.735
the internal dues will
display some details.

00:10:11.735 --> 00:10:16.430
Case, one should be executed
when the case is one,

00:10:16.430 --> 00:10:18.125
when the case matches one.

00:10:18.125 --> 00:10:24.019
Let's have four
different cases, 23.4.

00:10:24.019 --> 00:10:26.689
So we want these to
be conditionally

00:10:26.689 --> 00:10:29.210
displayed or render each
of these deals should

00:10:29.210 --> 00:10:30.949
be included only if

00:10:30.949 --> 00:10:32.570
the case that we

00:10:32.570 --> 00:10:34.684
are mentioning in the
switch matches them.

00:10:34.684 --> 00:10:38.435
To use the switch directive
within the container,

00:10:38.435 --> 00:10:39.950
we'll use N G,

00:10:39.950 --> 00:10:45.170
S capital switch
is equal to case.

00:10:45.170 --> 00:10:46.610
This is where we
mentioned the case.

00:10:46.610 --> 00:10:48.949
Let's hard-code it to one.

00:10:48.949 --> 00:10:51.005
And within the dues,

00:10:51.005 --> 00:10:56.429
we should use star and G switch.

00:10:56.860 --> 00:10:58.850
Case.

00:10:58.850 --> 00:11:02.089
So these are individual
cases for the switch is

00:11:02.089 --> 00:11:05.584
equal to within
double-quotes one.

00:11:05.584 --> 00:11:08.659
So when the case
matches this value,

00:11:08.659 --> 00:11:11.585
this entire do will be rendered.

00:11:11.585 --> 00:11:14.270
Grab that and G switch case,

00:11:14.270 --> 00:11:17.129
paste it on the
rest of the deuce.

00:11:18.340 --> 00:11:24.634
Change that to 23.4,

00:11:24.634 --> 00:11:27.350
save it, go to the Explorer.

00:11:27.350 --> 00:11:29.854
Let's use this component.

00:11:29.854 --> 00:11:31.280
This component is
called if you go to

00:11:31.280 --> 00:11:33.889
the switch dot component
dot ts selector

00:11:33.889 --> 00:11:36.245
is app hyphen switch.

00:11:36.245 --> 00:11:40.610
Go to the default app
component HTML instead of app.

00:11:40.610 --> 00:11:42.080
If get it off it,

00:11:42.080 --> 00:11:44.870
use App hyphen switch,

00:11:44.870 --> 00:11:48.514
save it, go back to the browser.

00:11:48.514 --> 00:11:50.420
Our application is down,

00:11:50.420 --> 00:11:55.290
so let's start it md hyphen 0.

00:11:55.600 --> 00:11:57.859
Next time we will not stop,

00:11:57.859 --> 00:11:59.645
the server will simply

00:11:59.645 --> 00:12:02.165
open up a terminal
window from here

00:12:02.165 --> 00:12:04.579
and then add the
components so that

00:12:04.579 --> 00:12:08.250
our application will be up
and running all the time.

00:12:08.770 --> 00:12:11.569
Once it builds and launches,

00:12:11.569 --> 00:12:15.419
we can see in this
switch in action.

00:12:30.390 --> 00:12:34.465
There we go. Finally,
it executes case one.

00:12:34.465 --> 00:12:37.720
Case one is what it
matches in the HTML.

00:12:37.720 --> 00:12:39.729
We have hard-coded it
to one, change it to,

00:12:39.729 --> 00:12:42.564
to save it, go back
to the browser.

00:12:42.564 --> 00:12:44.289
Now you will see k x2.

00:12:44.289 --> 00:12:45.910
Similarly, if you
change it to four,

00:12:45.910 --> 00:12:48.309
you will see k is four.

00:12:48.309 --> 00:12:51.654
Will not usually hardcode
this value like this.

00:12:51.654 --> 00:12:54.459
Typically this value will
come from the component or

00:12:54.459 --> 00:12:57.684
a back-end system where we
make RESTful calls, etc.

00:12:57.684 --> 00:13:01.900
So go to switch component
dot ts and define a

00:13:01.900 --> 00:13:06.129
variable inside the constructor
directly use this dot.

00:13:06.129 --> 00:13:11.390
My case is equal to
a value set three.

00:13:12.240 --> 00:13:15.790
And up top, you can
define that variable,

00:13:15.790 --> 00:13:19.584
my case, colon number.

00:13:19.584 --> 00:13:23.575
Save it, go back to the HTML.

00:13:23.575 --> 00:13:25.494
And instead of four here,

00:13:25.494 --> 00:13:28.720
now we can use my case, save it.

00:13:28.720 --> 00:13:34.059
Go back to the web browser
that see what it renders.

00:13:34.059 --> 00:13:36.609
It renders case three because

00:13:36.609 --> 00:13:38.920
now we haven't hard-coded
the value here.

00:13:38.920 --> 00:13:41.349
We have used the
value that comes from

00:13:41.349 --> 00:13:44.659
the component, which is three.

00:13:46.200 --> 00:13:50.860
In this lecture, we will learn
how to use a default case.

00:13:50.860 --> 00:13:52.449
We can use it to render

00:13:52.449 --> 00:13:55.390
a default element
that is on the UI.

00:13:55.390 --> 00:13:58.285
If none of these match
the case that comes in,

00:13:58.285 --> 00:14:01.764
then we will use the default
case that will be rendered.

00:14:01.764 --> 00:14:04.419
Add a new do, get it off

00:14:04.419 --> 00:14:09.819
this NG switch case
star and G switch.

00:14:09.819 --> 00:14:12.384
Instead of case, it should be

00:14:12.384 --> 00:14:15.685
default and change
the value of it.

00:14:15.685 --> 00:14:22.629
Default to the default case.

00:14:22.629 --> 00:14:24.520
Save it.

00:14:24.520 --> 00:14:28.725
Go to switch component dot
ts and the value here,

00:14:28.725 --> 00:14:31.745
Let's assign a value of five.

00:14:31.745 --> 00:14:34.190
We don't have a case
that matches five.

00:14:34.190 --> 00:14:35.795
We have only up to four.

00:14:35.795 --> 00:14:37.459
If you go back to the UI now,

00:14:37.459 --> 00:14:40.130
the output is the default case.

00:14:40.130 --> 00:14:43.234
So N G switch default.

00:14:43.234 --> 00:14:45.740
That case will be
used when none of

00:14:45.740 --> 00:14:50.309
the other ones match the
incoming case or option.

00:14:51.400 --> 00:14:56.254
In this lecture, we will
explore the NG for direct you.

00:14:56.254 --> 00:14:59.180
To do that, go to the
integrated terminal

00:14:59.180 --> 00:15:02.524
by going to View
integrated terminal.

00:15:02.524 --> 00:15:08.915
N, G, G, C, components
slash four.

00:15:08.915 --> 00:15:15.504
Hit Enter. Go-to for
close everything else.

00:15:15.504 --> 00:15:18.880
Open up the four dot
PS4 dot component

00:15:18.880 --> 00:15:20.364
dot TypeScript file.

00:15:20.364 --> 00:15:23.299
We'll create an array here.

00:15:24.060 --> 00:15:31.195
Define an array called
courses colon, string array.

00:15:31.195 --> 00:15:35.049
And we'll initialize that
array inside the constructor.

00:15:35.049 --> 00:15:39.130
This dot courses is equal
to within square brackets.

00:15:39.130 --> 00:15:41.349
The first course is Angular,

00:15:41.349 --> 00:15:43.510
the second course is react.

00:15:43.510 --> 00:15:50.529
The third one is Nord
semicolon at the end. Save it.

00:15:50.529 --> 00:15:53.110
Now we can refer
to these courses,

00:15:53.110 --> 00:15:58.595
should be courses in our
HTML and use the NG four.

00:15:58.595 --> 00:16:01.339
Open the four dot
component dot HTML,

00:16:01.339 --> 00:16:03.780
clean up everything.

00:16:04.630 --> 00:16:08.540
Use a star.

00:16:08.540 --> 00:16:14.090
Ng4 is equal to this
where we define a

00:16:14.090 --> 00:16:20.299
variable using let each
course of courses.

00:16:20.299 --> 00:16:23.584
So we are using the for loop,

00:16:23.584 --> 00:16:26.915
let each course of courses.

00:16:26.915 --> 00:16:28.759
So one-by-one, the course

00:16:28.759 --> 00:16:31.100
will come into the
course. Variable.

00:16:31.100 --> 00:16:33.350
Close that do right there.

00:16:33.350 --> 00:16:35.314
And inside the do,

00:16:35.314 --> 00:16:36.934
we can use a bold.

00:16:36.934 --> 00:16:40.460
Use the string interpolation
syntax to flower brackets,

00:16:40.460 --> 00:16:45.709
and you can access the
course. Paste it right there.

00:16:45.709 --> 00:16:48.469
Save it, use this for

00:16:48.469 --> 00:16:51.275
component at the selectors
app hyphen four.

00:16:51.275 --> 00:16:54.470
In the app component dot HTML,

00:16:54.470 --> 00:16:58.550
change this switch to four.

00:16:58.550 --> 00:17:01.400
Same on the right-hand
side as well.

00:17:01.400 --> 00:17:02.840
Save it.

00:17:02.840 --> 00:17:04.489
Go back to the web browser.

00:17:04.489 --> 00:17:06.620
And we see all the
three courses,

00:17:06.620 --> 00:17:09.080
Angular, React, and node.

00:17:09.080 --> 00:17:11.329
So that syntax again is

00:17:11.329 --> 00:17:14.989
star and G for F
capital is equal to,

00:17:14.989 --> 00:17:18.139
let is a prefix that we
use to define variables.

00:17:18.139 --> 00:17:22.400
Course is a variable
off the course's array.

00:17:22.400 --> 00:17:24.500
So each value in
the Coursera will

00:17:24.500 --> 00:17:27.094
fall into course as
this loop goes through.

00:17:27.094 --> 00:17:29.600
And every time we are rendering

00:17:29.600 --> 00:17:34.470
bold element with the course
information on the UI.

00:17:35.440 --> 00:17:37.730
In this lecture,
you will learn how

00:17:37.730 --> 00:17:39.259
to deal with an array of

00:17:39.259 --> 00:17:43.520
objects instead of strings
while working with and G4.

00:17:43.520 --> 00:17:45.995
Go back to the component file

00:17:45.995 --> 00:17:48.124
or the compound TypeScript file.

00:17:48.124 --> 00:17:52.339
And we'll add a new array
here called students.

00:17:52.339 --> 00:17:55.054
This array is of type object.

00:17:55.054 --> 00:17:58.380
So say object array.

00:17:59.000 --> 00:18:02.090
Within the constructor will use

00:18:02.090 --> 00:18:06.184
this dot students is equal
to within the array,

00:18:06.184 --> 00:18:08.330
we are going to define
multiple objects.

00:18:08.330 --> 00:18:10.369
So use the flower brackets.

00:18:10.369 --> 00:18:17.404
The student will have
a fname, colon, John,

00:18:17.404 --> 00:18:24.874
comma colon, Bailey comma,

00:18:24.874 --> 00:18:27.244
his test score colon,

00:18:27.244 --> 00:18:31.174
same line P. Define
one more student.

00:18:31.174 --> 00:18:34.529
By grabbing this from here.

00:18:34.570 --> 00:18:36.785
Paste it.

00:18:36.785 --> 00:18:40.350
Defined the second student, Bob.

00:18:41.740 --> 00:18:48.244
Lastname is ready,
and this code is API.

00:18:48.244 --> 00:18:50.029
So we have successfully defined

00:18:50.029 --> 00:18:52.595
two objects here
within the array.

00:18:52.595 --> 00:18:56.040
Now go to the UI,
which is the HTML.

00:18:56.740 --> 00:18:59.959
And we're going to
display a table.

00:18:59.959 --> 00:19:04.290
So use HTML table head.

00:19:05.590 --> 00:19:08.839
In T-head included table row.

00:19:08.839 --> 00:19:10.954
The table row will have TD.

00:19:10.954 --> 00:19:15.454
The first td is the F
name or the first name.

00:19:15.454 --> 00:19:19.279
Copy that, paste it
a couple of times,

00:19:19.279 --> 00:19:22.130
close or open the TD properly.

00:19:22.130 --> 00:19:24.259
Lastname is the second field,

00:19:24.259 --> 00:19:26.405
the last one is the score.

00:19:26.405 --> 00:19:28.535
So that's the table heading.

00:19:28.535 --> 00:19:30.409
After the T-head.

00:19:30.409 --> 00:19:32.600
Create a row.

00:19:32.600 --> 00:19:36.710
This is where we are going
to use NG four inside

00:19:36.710 --> 00:19:38.719
the table row on
whichever element we

00:19:38.719 --> 00:19:41.149
want to repeat multiple
times dynamically,

00:19:41.149 --> 00:19:43.280
that is where we use the NG

00:19:43.280 --> 00:19:47.165
four is equal to
within double-quotes.

00:19:47.165 --> 00:19:52.819
Let student of students

00:19:52.819 --> 00:19:55.415
is the array which we
have defined right here.

00:19:55.415 --> 00:20:02.285
Students use that and
within TR use TD.

00:20:02.285 --> 00:20:05.255
String interpolation syntax.

00:20:05.255 --> 00:20:10.775
Student dot F name will
give you the firstName,

00:20:10.775 --> 00:20:15.484
copied this TD, and paste
it a couple of times.

00:20:15.484 --> 00:20:17.539
A lame is the second field,

00:20:17.539 --> 00:20:20.599
and score is the third one.

00:20:20.599 --> 00:20:21.890
Save it.

00:20:21.890 --> 00:20:24.425
If you go back to the
web browser, now,

00:20:24.425 --> 00:20:25.970
you see a beautiful table with

00:20:25.970 --> 00:20:28.145
all the student information.

00:20:28.145 --> 00:20:31.625
You have learned how to
deal with array of objects,

00:20:31.625 --> 00:20:32.960
which is very important when

00:20:32.960 --> 00:20:35.729
you develop real-time
applications.

00:20:36.970 --> 00:20:39.650
In this lecture, I
will show you how to

00:20:39.650 --> 00:20:42.244
use the NG non-binding double.

00:20:42.244 --> 00:20:44.029
By giving you a simple example,

00:20:44.029 --> 00:20:46.820
go back to the four dot
component dot HTML.

00:20:46.820 --> 00:20:50.240
Here I want to tell the
end-user that the code

00:20:50.240 --> 00:20:53.944
that we are using to render
the courses is as follows.

00:20:53.944 --> 00:20:59.285
That right here, we can use ADU,

00:20:59.285 --> 00:21:02.045
within which I'm going
to say that course.

00:21:02.045 --> 00:21:05.315
Part of the code that does

00:21:05.315 --> 00:21:10.985
the elbow is the code
that renders the elbow,

00:21:10.985 --> 00:21:13.910
is use the string
interpolation syntax.

00:21:13.910 --> 00:21:17.615
You can grab this and
paste it right here.

00:21:17.615 --> 00:21:20.344
Now if you go back
to the browser,

00:21:20.344 --> 00:21:22.069
you will see that it says

00:21:22.069 --> 00:21:24.709
the code that renders
the elbow is Angular,

00:21:24.709 --> 00:21:25.984
but I don't want that.

00:21:25.984 --> 00:21:28.279
I want this string
interpolation syntax

00:21:28.279 --> 00:21:30.379
to be displayed as it is.

00:21:30.379 --> 00:21:35.674
To do that, you will
have to use do space.

00:21:35.674 --> 00:21:40.969
Within the do N, G
non buy-in double.

00:21:40.969 --> 00:21:43.010
N and b are capitals,

00:21:43.010 --> 00:21:45.694
N, G, non bind double.

00:21:45.694 --> 00:21:46.894
Save it.

00:21:46.894 --> 00:21:48.574
Go back to the browser.

00:21:48.574 --> 00:21:51.815
And now you see the code
that renders the about

00:21:51.815 --> 00:21:53.509
ease and the string

00:21:53.509 --> 00:21:56.599
interpolation syntax with
the course as it is.

00:21:56.599 --> 00:22:00.650
So the angular will not
processed this at all.

00:22:00.650 --> 00:22:04.339
So whatever elements are
in genomes bendable,

00:22:04.339 --> 00:22:07.860
they will not be
processed and bind it.

00:22:09.430 --> 00:22:12.485
Using the NG style directive,

00:22:12.485 --> 00:22:15.079
we can set the CSS
properties from

00:22:15.079 --> 00:22:18.589
the angular expressions
on our HTML DOM elements.

00:22:18.589 --> 00:22:20.779
There are a couple of
syntax as we can use.

00:22:20.779 --> 00:22:22.790
The first syntax is very easy.

00:22:22.790 --> 00:22:26.840
To set a single CSS property
on an HTML element.

00:22:26.840 --> 00:22:30.545
We use within square
brackets, style dot,

00:22:30.545 --> 00:22:32.450
the property we want to

00:22:32.450 --> 00:22:35.810
effect or to update is
equal to the value.

00:22:35.810 --> 00:22:37.490
Property could be color,

00:22:37.490 --> 00:22:40.114
background, color,
font size, etc.

00:22:40.114 --> 00:22:41.990
Let's see this in action.

00:22:41.990 --> 00:22:43.745
Go to Visual Studio Code.

00:22:43.745 --> 00:22:46.850
Go to the four dot
component dot HTML.

00:22:46.850 --> 00:22:49.099
Right now, this component

00:22:49.099 --> 00:22:51.439
does not have any
styling applied.

00:22:51.439 --> 00:22:55.039
Everything is, as is like
whatever we have in our HTML,

00:22:55.039 --> 00:22:56.480
it shows up as it is.

00:22:56.480 --> 00:22:58.490
Let's apply some styles to

00:22:58.490 --> 00:23:00.799
the data on these td

00:23:00.799 --> 00:23:03.770
here where we are displaying
the student information.

00:23:03.770 --> 00:23:07.955
Use within square
brackets, style dot.

00:23:07.955 --> 00:23:10.339
I want the color to be

00:23:10.339 --> 00:23:14.284
red for this guy or the
student name firstname.

00:23:14.284 --> 00:23:18.140
So style dot color is equal
to within double-quotes.

00:23:18.140 --> 00:23:20.824
We need to give the values
within single quotes.

00:23:20.824 --> 00:23:28.234
Read. Grab this, paste
it on the next two TDs.

00:23:28.234 --> 00:23:30.319
The second one is L0,

00:23:30.319 --> 00:23:32.180
third one is blue.

00:23:32.180 --> 00:23:35.615
Save it. Make sure your
server is up and running.

00:23:35.615 --> 00:23:37.745
If you go to the browser, now,

00:23:37.745 --> 00:23:41.075
you see that the color
has changed to red,

00:23:41.075 --> 00:23:43.610
halo, which you can't
see, and then blue.

00:23:43.610 --> 00:23:44.989
Similarly, you can change it to

00:23:44.989 --> 00:23:46.699
background color if you want to.

00:23:46.699 --> 00:23:53.269
Instead of color, you can
use background hyphen color.

00:23:53.269 --> 00:23:56.809
Save it. Now the
background color

00:23:56.809 --> 00:24:00.079
has changed to read only
for the first column.

00:24:00.079 --> 00:24:03.380
This is one of the
syntaxes for applying

00:24:03.380 --> 00:24:05.000
styles to a single property or

00:24:05.000 --> 00:24:06.964
using one property from the CSS.

00:24:06.964 --> 00:24:09.244
But if you have
multiple properties

00:24:09.244 --> 00:24:11.285
than the second syntax
that you can use,

00:24:11.285 --> 00:24:14.930
instead of separately
specifying each CSS property.

00:24:14.930 --> 00:24:16.444
Using this, you can use

00:24:16.444 --> 00:24:21.575
NG style on the TD right
here in the table headings.

00:24:21.575 --> 00:24:25.249
Let's try NG style
within brackets and

00:24:25.249 --> 00:24:30.484
G S capital style is equal
to within double-quotes.

00:24:30.484 --> 00:24:34.970
We give a object which takes
multiple CSS properties.

00:24:34.970 --> 00:24:39.964
Color is equal to
within single quotes,

00:24:39.964 --> 00:24:43.910
read comma within single quotes.

00:24:43.910 --> 00:24:46.340
This time, I will
explain why we need IT.

00:24:46.340 --> 00:24:48.600
Background color.

00:24:49.330 --> 00:24:51.829
This should be color colon.

00:24:51.829 --> 00:24:56.010
Here we are passing multiple
CSS properties directly.

00:24:56.140 --> 00:25:00.200
Colon within single quotes.

00:25:00.200 --> 00:25:02.915
Say blue. Save it.

00:25:02.915 --> 00:25:05.090
So here, using NG style,

00:25:05.090 --> 00:25:07.190
we are able to pass in

00:25:07.190 --> 00:25:09.890
multiple CSS properties
within flower brackets,

00:25:09.890 --> 00:25:11.359
which are rapid
within double-quotes.

00:25:11.359 --> 00:25:13.820
Here we were passing
one property at a time.

00:25:13.820 --> 00:25:16.549
We were setting one CSS
property at a time.

00:25:16.549 --> 00:25:18.410
Go back to the web browser.

00:25:18.410 --> 00:25:21.170
And on the table heading
for the FirstName,

00:25:21.170 --> 00:25:23.269
you see the background color is

00:25:23.269 --> 00:25:26.314
blue and the color
of the font is red.

00:25:26.314 --> 00:25:27.979
But the key here is that you

00:25:27.979 --> 00:25:29.989
have learned two
different syntaxes.

00:25:29.989 --> 00:25:34.744
One that uses style
dot CSS property.

00:25:34.744 --> 00:25:38.105
This also is MG
style internally.

00:25:38.105 --> 00:25:41.915
This syntax within square
brackets you use and the style,

00:25:41.915 --> 00:25:46.430
and you can provide multiple
styles in single shot.

00:25:46.430 --> 00:25:48.559
The reason I have

00:25:48.559 --> 00:25:51.469
wrapped this background
color in single quotes,

00:25:51.469 --> 00:25:52.729
but the color is not wrapped in

00:25:52.729 --> 00:25:54.964
single quotes because
we have a hyphen here.

00:25:54.964 --> 00:25:56.944
Whenever we have those
special symbols,

00:25:56.944 --> 00:26:00.035
we need to wrap them
in single quotes.

00:26:00.035 --> 00:26:03.659
The key itself should be
wrapped in single quotes.

00:26:04.420 --> 00:26:06.665
The real power of

00:26:06.665 --> 00:26:10.189
n g style directive
comes from its dynamism.

00:26:10.189 --> 00:26:11.765
That is, we can dynamically

00:26:11.765 --> 00:26:14.359
apply the values in our script,

00:26:14.359 --> 00:26:17.150
in the TypeScript
of the component

00:26:17.150 --> 00:26:19.279
to the style values

00:26:19.279 --> 00:26:21.020
instead of hard-coding
them like this,

00:26:21.020 --> 00:26:22.685
we can define some fields here.

00:26:22.685 --> 00:26:24.290
We can retrieve the values

00:26:24.290 --> 00:26:25.789
for those fields
from anywhere we

00:26:25.789 --> 00:26:29.450
want and then apply those
values to the styles.

00:26:29.450 --> 00:26:31.369
Let's see that in
action, let's define

00:26:31.369 --> 00:26:33.845
a couple of properties
on our component.

00:26:33.845 --> 00:26:37.010
Say color, colon string and

00:26:37.010 --> 00:26:41.974
font size colon string as well.

00:26:41.974 --> 00:26:45.335
And initialize these two
properties in the constructor.

00:26:45.335 --> 00:26:51.410
This dark color is
equal to green,

00:26:51.410 --> 00:26:58.280
and this dot font size is
equal to say, 40 pixels.

00:26:58.280 --> 00:27:00.455
With it's a string as well.

00:27:00.455 --> 00:27:02.554
We need not provide the
pixel information here,

00:27:02.554 --> 00:27:04.700
I will show you that
the angular directory

00:27:04.700 --> 00:27:06.950
itself has the
pixel information.

00:27:06.950 --> 00:27:10.025
Go back to the Ford
dot component dot HTML

00:27:10.025 --> 00:27:13.054
and the color wherever we're
hard-coding the color.

00:27:13.054 --> 00:27:16.865
Now I can simply use
the color variable,

00:27:16.865 --> 00:27:19.220
the field that is defined on

00:27:19.220 --> 00:27:22.280
our component class
here as well.

00:27:22.280 --> 00:27:27.750
I'm going to get it up this
L0 and use color instead.

00:27:29.200 --> 00:27:33.064
Color, save it, go back
to the web browser.

00:27:33.064 --> 00:27:35.690
Now you see that the
color has changed

00:27:35.690 --> 00:27:38.525
to green for these fields here.

00:27:38.525 --> 00:27:40.159
The student lastName,

00:27:40.159 --> 00:27:42.395
the student's score
has changed to green.

00:27:42.395 --> 00:27:45.140
And since we have
applied the color here,

00:27:45.140 --> 00:27:48.439
which is font, they internally
inside blue, it is green.

00:27:48.439 --> 00:27:49.700
If you get it off
this background

00:27:49.700 --> 00:27:53.089
color property, save it.

00:27:53.089 --> 00:27:55.744
You can see that it is green.

00:27:55.744 --> 00:27:58.640
So that way, we need not
hardcode the values.

00:27:58.640 --> 00:28:01.235
We can dynamically fetch
them from our component,

00:28:01.235 --> 00:28:02.870
which itself can
retrieve them from

00:28:02.870 --> 00:28:04.369
anywhere else and apply

00:28:04.369 --> 00:28:07.594
them to our HTML DOM elements.

00:28:07.594 --> 00:28:09.694
The second one is the font size.

00:28:09.694 --> 00:28:13.580
Here, we can use the font
size on any of these.

00:28:13.580 --> 00:28:15.335
Let's try it on the data.

00:28:15.335 --> 00:28:17.029
Right here.

00:28:17.029 --> 00:28:20.689
On the second TV within
square brackets,

00:28:20.689 --> 00:28:29.359
style dot, font, hyphen size.px.

00:28:29.359 --> 00:28:31.610
So Angular gives us a
cool way to specify

00:28:31.610 --> 00:28:34.085
whether it is packed
pixels or something else.

00:28:34.085 --> 00:28:36.170
And it is mandatory
that you tell

00:28:36.170 --> 00:28:39.065
whether it's pixels or
something else like EM,

00:28:39.065 --> 00:28:41.479
style dot, font, type and size

00:28:41.479 --> 00:28:46.565
dot BX is equal to within
double-quotes font.

00:28:46.565 --> 00:28:49.325
Size is the variable
that we have

00:28:49.325 --> 00:28:53.014
defined in our
component right here.

00:28:53.014 --> 00:28:55.324
So that font size should take

00:28:55.324 --> 00:28:58.219
effect on the student last name.

00:28:58.219 --> 00:29:00.289
Save it, go back to
the web browser.

00:29:00.289 --> 00:29:02.960
Now you can see that
Bailey and ready are

00:29:02.960 --> 00:29:06.184
super big because
the font size is 40.

00:29:06.184 --> 00:29:07.984
So in this lecture,
you have learned

00:29:07.984 --> 00:29:10.040
how to dynamically pass in

00:29:10.040 --> 00:29:13.295
this tiling information
from your component and

00:29:13.295 --> 00:29:17.699
use that in your NG
style directive.

00:29:19.030 --> 00:29:22.924
The NG class directive
helps us assign

00:29:22.924 --> 00:29:26.765
a particular CSS class
to the HTML elements.

00:29:26.765 --> 00:29:31.039
We use the NG class as an
attribute on an HTML element.

00:29:31.039 --> 00:29:33.184
Then we assign an object

00:29:33.184 --> 00:29:35.870
literal as a value
to that NG class.

00:29:35.870 --> 00:29:40.444
This object literal contains
the CSS class name,

00:29:40.444 --> 00:29:42.484
which we defined
in our CSS files.

00:29:42.484 --> 00:29:45.199
Colon, the value
is boolean true,

00:29:45.199 --> 00:29:47.749
which tells that this
class should be applied.

00:29:47.749 --> 00:29:49.640
And it can be Boolean false,

00:29:49.640 --> 00:29:52.325
which tells Angular
that this class,

00:29:52.325 --> 00:29:54.649
CSS class should
not be applied to

00:29:54.649 --> 00:29:57.229
that particular HTML
element or toggle

00:29:57.229 --> 00:30:00.454
it if it is already applied,
remove that styling.

00:30:00.454 --> 00:30:03.860
Let's try it out by going
to Visual Studio Code.

00:30:03.860 --> 00:30:06.349
Open up the four dot component,

00:30:06.349 --> 00:30:10.879
dot CSS, which is
currently empty, expanded.

00:30:10.879 --> 00:30:13.625
Let's add font here.

00:30:13.625 --> 00:30:15.590
Font-style for p data,

00:30:15.590 --> 00:30:16.925
for the table data,

00:30:16.925 --> 00:30:20.539
we're going to
define a CSS class.

00:30:20.539 --> 00:30:23.494
Add a property called font.

00:30:23.494 --> 00:30:30.530
Hyphen size is equal to
our colon, 80 pixels.

00:30:30.530 --> 00:30:32.285
Save it.

00:30:32.285 --> 00:30:35.390
Go back to the four dot
component dot HTML.

00:30:35.390 --> 00:30:37.189
Here inside the table data,

00:30:37.189 --> 00:30:39.754
we can now use that
class on any of these.

00:30:39.754 --> 00:30:42.275
I'm going to use
it on the last td,

00:30:42.275 --> 00:30:45.170
which is displaying
the student's score.

00:30:45.170 --> 00:30:47.150
Within square brackets.

00:30:47.150 --> 00:30:52.489
And G, Class C capital is
equal to within double-quotes.

00:30:52.489 --> 00:30:54.500
Use angular brackets.

00:30:54.500 --> 00:30:56.540
That is the object
literal syntax.

00:30:56.540 --> 00:30:59.615
The className, which is T data.

00:30:59.615 --> 00:31:03.065
This is the class name which
we have defined in the CSS.

00:31:03.065 --> 00:31:07.910
Use the class name colon, true.

00:31:07.910 --> 00:31:09.560
If it is true, it
will be applied

00:31:09.560 --> 00:31:11.179
if you go back to
the web browser now,

00:31:11.179 --> 00:31:13.370
you will see huge score,

00:31:13.370 --> 00:31:16.890
will come back,
turn it to false,

00:31:18.040 --> 00:31:20.239
and that will not be applied.

00:31:20.239 --> 00:31:23.705
It goes back to the regular
font, the default font.

00:31:23.705 --> 00:31:26.389
So that is how we use NG class.

00:31:26.389 --> 00:31:27.980
Here we have hard-coded.

00:31:27.980 --> 00:31:31.625
Everything. That is this Boolean
condition is hard-coded.

00:31:31.625 --> 00:31:33.290
In the next lecture, I
will show you how to

00:31:33.290 --> 00:31:37.650
dynamically toggle it
from our TypeScript.

00:31:38.700 --> 00:31:42.489
In this lecture, you will
learn how to dynamically

00:31:42.489 --> 00:31:46.224
pass in an object
value to NG class.

00:31:46.224 --> 00:31:49.329
To do that, go to
the TypeScript file,

00:31:49.329 --> 00:31:51.055
define two properties here.

00:31:51.055 --> 00:31:52.749
The first property
indicates whether

00:31:52.749 --> 00:31:55.974
the T data class should
be applied or not.

00:31:55.974 --> 00:32:01.610
So use the data colon
of type Boolean.

00:32:01.740 --> 00:32:04.300
The second field will carry

00:32:04.300 --> 00:32:06.610
this entire object
literal value,

00:32:06.610 --> 00:32:08.004
whatever we have here,

00:32:08.004 --> 00:32:09.909
D data colon false.

00:32:09.909 --> 00:32:13.419
That value will be carried
by object called class

00:32:13.419 --> 00:32:15.849
OBJ because it's going to carry

00:32:15.849 --> 00:32:18.309
the information for a CSS class,

00:32:18.309 --> 00:32:21.180
class object of type object.

00:32:21.180 --> 00:32:23.210
Inside the constructor.

00:32:23.210 --> 00:32:28.159
This dot use d Theta
is equal to true.

00:32:28.159 --> 00:32:29.404
Let's start with true.

00:32:29.404 --> 00:32:32.525
This dot class object

00:32:32.525 --> 00:32:36.695
is equal to use the
object literal syntax.

00:32:36.695 --> 00:32:39.154
And pass in. P.

00:32:39.154 --> 00:32:40.609
Data is the key.

00:32:40.609 --> 00:32:42.995
Colon, value is this flag.

00:32:42.995 --> 00:32:45.060
Use T data.

00:32:48.160 --> 00:32:52.415
T data used to data.

00:32:52.415 --> 00:32:55.144
That should be this tort.

00:32:55.144 --> 00:32:59.134
Use T data because we
can't access it directly.

00:32:59.134 --> 00:33:01.790
Now go back to the HTML.

00:33:01.790 --> 00:33:04.760
And instead of hard-coding
the values like this,

00:33:04.760 --> 00:33:06.739
you can simply use

00:33:06.739 --> 00:33:09.304
this object which we
have created here,

00:33:09.304 --> 00:33:10.940
class OBJ, copy that,

00:33:10.940 --> 00:33:12.245
come back to the HTML,

00:33:12.245 --> 00:33:14.210
paste it, save it,

00:33:14.210 --> 00:33:15.964
go back to the web browser.

00:33:15.964 --> 00:33:18.320
And the output. You'll see that

00:33:18.320 --> 00:33:20.779
the font is taking into effect.

00:33:20.779 --> 00:33:23.285
If you want to toggle it,
you can add the logic for it

00:33:23.285 --> 00:33:26.030
or simply go to the
TypeScript file.

00:33:26.030 --> 00:33:29.190
If you change this to false,

00:33:29.320 --> 00:33:31.489
come back to the browser.

00:33:31.489 --> 00:33:33.290
Now the styles will
not be applied.

00:33:33.290 --> 00:33:36.200
The class is not applied
to the HTML element.

00:33:36.200 --> 00:33:38.510
We have made it dynamic by

00:33:38.510 --> 00:33:41.149
creating a couple of fields
on the TypeScript file.

00:33:41.149 --> 00:33:43.745
And here you can add
whatever logic you want.

00:33:43.745 --> 00:33:45.919
You can toggle this
by moving this to

00:33:45.919 --> 00:33:48.575
a function called toggle.

00:33:48.575 --> 00:33:51.125
And on click of a
button in this HTML,

00:33:51.125 --> 00:33:53.180
you can switch between
true and false.

00:33:53.180 --> 00:33:54.559
All that logic can be added.

00:33:54.559 --> 00:33:57.619
But the key is that
we can dynamically

00:33:57.619 --> 00:34:02.189
control how the CSS
classes can be applied.
