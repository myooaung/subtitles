WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.210 --> 00:00:04.350
In the next few lectures,

00:00:04.350 --> 00:00:07.020
you will develop an
Angular service that will

00:00:07.020 --> 00:00:11.470
post data to a
RESTful Web Service.

00:00:11.480 --> 00:00:14.220
So the application
you will build will

00:00:14.220 --> 00:00:16.650
send some data text. So e.g.

00:00:16.650 --> 00:00:20.529
if a pass in parallel,
all lowercase hit Submit,

00:00:20.529 --> 00:00:22.370
it will invoke a RESTful service

00:00:22.370 --> 00:00:23.855
that will convert this text

00:00:23.855 --> 00:00:27.800
into capitals and send it
back a very simple surveys,

00:00:27.800 --> 00:00:30.980
but the key is you are
going to learn how to post

00:00:30.980 --> 00:00:34.430
data and get a response
instead of simply http.

00:00:34.430 --> 00:00:35.330
Get.

00:00:35.330 --> 00:00:38.840
To do this, you need to
access the following URL.

00:00:38.840 --> 00:00:40.730
You can grab this
URL by going to

00:00:40.730 --> 00:00:43.010
the resources section
of this lecture or

00:00:43.010 --> 00:00:47.510
this URL is also present
in the links dot txt file.

00:00:47.510 --> 00:00:49.100
You would have downloaded from

00:00:49.100 --> 00:00:51.290
the software setup section.

00:00:51.290 --> 00:00:53.300
So get ready to convert

00:00:53.300 --> 00:00:55.880
text from lowercase
to uppercase by

00:00:55.880 --> 00:01:01.140
posting data to a
RESTful web service.

00:01:02.200 --> 00:01:04.640
In this lecture, we will create

00:01:04.640 --> 00:01:07.385
the project which we
are going to use to

00:01:07.385 --> 00:01:11.855
post to this particular URL
and get a response back.

00:01:11.855 --> 00:01:14.120
We're going to do that
by creating a project

00:01:14.120 --> 00:01:17.044
than a service and
then a component.

00:01:17.044 --> 00:01:23.225
And G, new post service is
the project name, hit Enter.

00:01:23.225 --> 00:01:26.795
And that will create
a project as follows.

00:01:26.795 --> 00:01:29.975
How already created it to
save us some time again.

00:01:29.975 --> 00:01:32.120
But go ahead and
create that project.

00:01:32.120 --> 00:01:33.590
Once you have created it,

00:01:33.590 --> 00:01:37.280
go into that project,
cd post surveys.

00:01:37.280 --> 00:01:39.905
The first step is to
create the services.

00:01:39.905 --> 00:01:41.825
And G space.

00:01:41.825 --> 00:01:44.810
G space, S space.

00:01:44.810 --> 00:01:48.815
We says slash uppercase.

00:01:48.815 --> 00:01:50.300
Since we are going to convert

00:01:50.300 --> 00:01:52.310
a string from lowercase
to uppercase,

00:01:52.310 --> 00:01:54.455
I'm calling that
service as uppercase.

00:01:54.455 --> 00:01:56.900
You can also call it
uppercase converter

00:01:56.900 --> 00:02:00.095
if you want to hit Enter.

00:02:00.095 --> 00:02:03.110
And that will generate
the services for us.

00:02:03.110 --> 00:02:05.330
Let's also create the
component because

00:02:05.330 --> 00:02:07.985
we know that we need the
competent at some point.

00:02:07.985 --> 00:02:11.460
And G, G, C,

00:02:12.040 --> 00:02:15.440
uppercase converter,
but the folder should

00:02:15.440 --> 00:02:19.380
be components
instead of services.

00:02:20.230 --> 00:02:23.570
And that will create
the popular for files.

00:02:23.570 --> 00:02:27.140
And it will also update
the app dot module.js.

00:02:27.140 --> 00:02:29.330
Grab the folder or

00:02:29.330 --> 00:02:32.720
the project onto your
Visual Studio Code

00:02:32.720 --> 00:02:34.860
by opening a new window.

00:02:36.100 --> 00:02:42.755
And we should see our services
and component folders.

00:02:42.755 --> 00:02:46.920
In the next lecture, we will
start coding this service.

00:02:47.680 --> 00:02:51.335
In this lecture, we'll
implement the component,

00:02:51.335 --> 00:02:53.210
which we'll use this service.

00:02:53.210 --> 00:02:55.730
To do that, open
up the component

00:02:55.730 --> 00:02:58.940
dot TypeScript file,
minimize the Explorer.

00:02:58.940 --> 00:03:02.825
Here we are going to implement
a method called convert,

00:03:02.825 --> 00:03:05.225
or you can call it
send data or whatever.

00:03:05.225 --> 00:03:08.345
That is, the method that we'll
use the services method.

00:03:08.345 --> 00:03:09.635
Before we do that,

00:03:09.635 --> 00:03:12.575
the first step is to
import the service itself.

00:03:12.575 --> 00:03:15.515
Import the surveys class

00:03:15.515 --> 00:03:18.755
is the uppercase converter
service grabbed that,

00:03:18.755 --> 00:03:20.765
paste it in the flower brackets

00:03:20.765 --> 00:03:24.245
from within single quotes.

00:03:24.245 --> 00:03:26.270
Dot, dot slash, dot,

00:03:26.270 --> 00:03:28.594
dot slash services slash,

00:03:28.594 --> 00:03:32.420
the first one, which is
uppercase converter service.

00:03:32.420 --> 00:03:34.655
Next, import

00:03:34.655 --> 00:03:38.345
the HTTP error response that
we are going to handle.

00:03:38.345 --> 00:03:45.080
Http error spawns from

00:03:45.080 --> 00:03:52.470
within single quotes at angular
slash, common slash HTTP.

00:03:54.310 --> 00:03:58.100
Now that we have the imports
go to the constructor and

00:03:58.100 --> 00:04:01.955
inject the service using
private underscore service,

00:04:01.955 --> 00:04:07.804
colon, uppercase
converter service.

00:04:07.804 --> 00:04:10.880
Next, implement a method called

00:04:10.880 --> 00:04:14.405
public convert is the method.

00:04:14.405 --> 00:04:19.445
This method takes the object
that comes from the HTML.

00:04:19.445 --> 00:04:22.650
And the return type is any.

00:04:24.330 --> 00:04:28.540
This dot, surveys
dot converted to

00:04:28.540 --> 00:04:30.910
uppercase and simply
pass in the object

00:04:30.910 --> 00:04:33.985
that comes in as an
argument to the function.

00:04:33.985 --> 00:04:38.245
Dot subscribe is
what we should use.

00:04:38.245 --> 00:04:41.080
Subscribe within
brackets, we are going

00:04:41.080 --> 00:04:43.915
to handle the different
types of responses.

00:04:43.915 --> 00:04:50.350
The first one is the successful
response arrow function.

00:04:50.350 --> 00:04:53.980
This dot, we need to
create a variable to

00:04:53.980 --> 00:04:57.790
which we can add the response
so that the UI can use it.

00:04:57.790 --> 00:05:03.025
So right here, private
response, our result, colon.

00:05:03.025 --> 00:05:07.455
Any hear response.

00:05:07.455 --> 00:05:09.290
We take the response,

00:05:09.290 --> 00:05:12.320
and when we implement
the arrow function,

00:05:12.320 --> 00:05:13.400
it's a single line function.

00:05:13.400 --> 00:05:16.325
This dot result is
equal to response,

00:05:16.325 --> 00:05:20.555
as simple as that comma to
handle the error condition,

00:05:20.555 --> 00:05:23.600
start implementing
the next method or

00:05:23.600 --> 00:05:29.540
the function error colon
HTTP error response

00:05:29.540 --> 00:05:30.830
that we have already imported.

00:05:30.830 --> 00:05:33.560
So we are handling the
error response here.

00:05:33.560 --> 00:05:36.095
Create a arrow
function for that,

00:05:36.095 --> 00:05:39.860
which is the unnamed
dynamic anonymous function.

00:05:39.860 --> 00:05:41.870
You can check for
different types

00:05:41.870 --> 00:05:43.730
of errors here are simply do

00:05:43.730 --> 00:05:49.490
a console dot error and push
that out to the console.

00:05:49.490 --> 00:05:51.020
As simple as that.

00:05:51.020 --> 00:05:55.160
So it's up to us how we want
to handle the exceptions.

00:05:55.160 --> 00:05:57.989
You have successfully
implemented

00:05:58.060 --> 00:06:00.770
the component layer first by

00:06:00.770 --> 00:06:02.780
importing everything you need,

00:06:02.780 --> 00:06:04.595
then you have
injected the service.

00:06:04.595 --> 00:06:05.750
Then you have implemented

00:06:05.750 --> 00:06:09.695
a convert method inside which
we have used the service.

00:06:09.695 --> 00:06:11.914
We handled a successful response

00:06:11.914 --> 00:06:14.240
by creating arrow
function and then you

00:06:14.240 --> 00:06:16.040
how handle the error response as

00:06:16.040 --> 00:06:19.770
well by creating
another arrow function.

00:06:20.140 --> 00:06:23.810
This lecture will make
an HTTP post call.

00:06:23.810 --> 00:06:24.980
That is, we are
going to implement

00:06:24.980 --> 00:06:27.980
the uppercase converter service.

00:06:27.980 --> 00:06:36.840
Start by creating a method
public convert to upper case.

00:06:37.000 --> 00:06:39.200
This method will take

00:06:39.200 --> 00:06:42.920
an object and it will
return JSON back.

00:06:42.920 --> 00:06:46.370
So it will take the data
that we pass it and that

00:06:46.370 --> 00:06:49.580
will be sent to the service,
the RESTful service.

00:06:49.580 --> 00:06:52.070
And then it will
return JSON back,

00:06:52.070 --> 00:06:53.945
which will be returned
back to the component.

00:06:53.945 --> 00:06:55.790
So here we add a
return statement,

00:06:55.790 --> 00:06:59.030
return, this is where we will
be using the HTTP client.

00:06:59.030 --> 00:07:05.930
So import that, import
HTTP client from within

00:07:05.930 --> 00:07:14.465
single quotes at angular
slash, common slash HTTP.

00:07:14.465 --> 00:07:17.390
Inject that into
the constructor.

00:07:17.390 --> 00:07:23.705
So private space underscore
HTTP client colon.

00:07:23.705 --> 00:07:26.180
Http client is the type.

00:07:26.180 --> 00:07:29.210
Once we have that next
to the return statement,

00:07:29.210 --> 00:07:33.410
this dot underscore
HTTP client dot post

00:07:33.410 --> 00:07:35.945
these the method instead
of get this time.

00:07:35.945 --> 00:07:37.820
And post takes two things.

00:07:37.820 --> 00:07:40.025
It takes the URL, as
you can see here.

00:07:40.025 --> 00:07:42.365
And the second parameter
is the body itself.

00:07:42.365 --> 00:07:44.135
The data that should go in.

00:07:44.135 --> 00:07:47.630
The first parameter is the
URL within single quotes,

00:07:47.630 --> 00:07:50.870
wrap the URL from the
Angular reward else dot TXT,

00:07:50.870 --> 00:07:52.850
the second year URLLC here.

00:07:52.850 --> 00:07:54.905
That is the one you
should be using.

00:07:54.905 --> 00:07:58.265
That go back, paste it,

00:07:58.265 --> 00:08:02.465
get the single quotes pack
on that line right there.

00:08:02.465 --> 00:08:04.580
Comma, the second parameter is

00:08:04.580 --> 00:08:07.655
the object itself
and add a semicolon.

00:08:07.655 --> 00:08:08.330
That's it.

00:08:08.330 --> 00:08:10.910
So you make a post call to

00:08:10.910 --> 00:08:13.070
this RESTful service
running right

00:08:13.070 --> 00:08:15.965
here on the herokuapp.com.

00:08:15.965 --> 00:08:18.200
You are passing it, the data,

00:08:18.200 --> 00:08:20.750
which will pass it to the
service from the component.

00:08:20.750 --> 00:08:23.000
And a component gets
it from the user input

00:08:23.000 --> 00:08:25.580
through the HTML that
runs on a web browser.

00:08:25.580 --> 00:08:27.260
And then when the
response comes back,

00:08:27.260 --> 00:08:29.360
we are returning that
JSON response back

00:08:29.360 --> 00:08:31.460
to the component
which are our users.

00:08:31.460 --> 00:08:35.510
This in this lecture

00:08:35.510 --> 00:08:37.535
we'll implement the
last coding step,

00:08:37.535 --> 00:08:42.095
which is to create the HTML
page or implement the HTML,

00:08:42.095 --> 00:08:45.020
which will grab the
information that comes from

00:08:45.020 --> 00:08:48.230
our component and it
renders it onto the UI.

00:08:48.230 --> 00:08:51.545
So clean it up, remove
everything in the HTML.

00:08:51.545 --> 00:08:54.650
You are going to use
the input binding and

00:08:54.650 --> 00:08:57.905
output bindings skills that
you have learned earlier.

00:08:57.905 --> 00:09:00.980
The first one is to
add an input field so

00:09:00.980 --> 00:09:04.235
that the user can enter
some text as a input.

00:09:04.235 --> 00:09:07.130
Input type is equal to text.

00:09:07.130 --> 00:09:10.040
Then this is where
we are going to bind

00:09:10.040 --> 00:09:14.855
the input to a model object
within square brackets.

00:09:14.855 --> 00:09:16.310
This is Angular syntax.

00:09:16.310 --> 00:09:18.245
Use the Angular directive.

00:09:18.245 --> 00:09:21.320
Within regular
brackets, you define

00:09:21.320 --> 00:09:27.065
NG model is equal to
within double-quotes,

00:09:27.065 --> 00:09:29.105
use whatever variable
name you want.

00:09:29.105 --> 00:09:35.250
Let's say my underscore message.

00:09:35.320 --> 00:09:38.000
Close the text
field right there.

00:09:38.000 --> 00:09:39.890
I'll explain what this
is here we are using

00:09:39.890 --> 00:09:42.140
the NG model directive
from Angular.

00:09:42.140 --> 00:09:44.750
What it does is it
takes the value of

00:09:44.750 --> 00:09:47.585
this particular text
field and it will assign

00:09:47.585 --> 00:09:50.900
or bind it to this
JavaScript variable.

00:09:50.900 --> 00:09:53.960
So it's binding the
input type values to

00:09:53.960 --> 00:09:58.490
a JavaScript variable so
that we can use it later on.

00:09:58.490 --> 00:10:01.070
Next, create a button and

00:10:01.070 --> 00:10:03.740
handle the onclick
event of the button,

00:10:03.740 --> 00:10:05.270
onclick of this button.

00:10:05.270 --> 00:10:08.900
Within the double-quotes, we
need to take some action.

00:10:08.900 --> 00:10:12.500
And that action is to invoke

00:10:12.500 --> 00:10:14.000
the Convert method on

00:10:14.000 --> 00:10:16.400
the component which we
can directly access here,

00:10:16.400 --> 00:10:20.885
convert, passing the message.

00:10:20.885 --> 00:10:24.514
So we need to create a
message here as a parameter,

00:10:24.514 --> 00:10:26.510
which is JSON message to use

00:10:26.510 --> 00:10:29.825
flower brackets
within single quotes.

00:10:29.825 --> 00:10:31.655
Call it message.

00:10:31.655 --> 00:10:33.500
If you remember from postman,

00:10:33.500 --> 00:10:35.330
the key should be message.

00:10:35.330 --> 00:10:39.630
That is exactly what we
are creating here. Colon.

00:10:39.880 --> 00:10:43.530
Passing the message.

00:10:43.540 --> 00:10:46.370
Simple here we are

00:10:46.370 --> 00:10:48.920
binding whatever the
user enters to this

00:10:48.920 --> 00:10:50.600
JavaScript variable using

00:10:50.600 --> 00:10:53.810
Angular's NG model directive
that does it for us.

00:10:53.810 --> 00:10:56.420
Then we are taking that
value and we're passing

00:10:56.420 --> 00:10:59.570
it by handling a onclick event.

00:10:59.570 --> 00:11:02.045
And they user
clicks on a button,

00:11:02.045 --> 00:11:06.440
can give this a value or
simply use some text here.

00:11:06.440 --> 00:11:10.310
Submit and close the
button right there,

00:11:10.310 --> 00:11:13.055
so that we will see this submit.

00:11:13.055 --> 00:11:15.035
Last but not the least.

00:11:15.035 --> 00:11:18.650
You also need to handle the
response that comes back.

00:11:18.650 --> 00:11:20.690
So give it a line break.

00:11:20.690 --> 00:11:22.160
And after the line break,

00:11:22.160 --> 00:11:24.935
Let's use H1 for the response.

00:11:24.935 --> 00:11:27.140
To display the result.

00:11:27.140 --> 00:11:29.540
We know that the
result comes back into

00:11:29.540 --> 00:11:32.165
a variable called result
in our component.

00:11:32.165 --> 00:11:34.940
So it can directly
access that using

00:11:34.940 --> 00:11:38.060
this string interpolation
syntax result.

00:11:38.060 --> 00:11:41.630
In Angular, we can format
the JSON object that comes

00:11:41.630 --> 00:11:46.129
back beautifully using
pipe symbol JSON.

00:11:46.129 --> 00:11:48.905
So this syntax is from Angular.

00:11:48.905 --> 00:11:52.190
It will beautify the JSON
object that comes out.

00:11:52.190 --> 00:11:54.980
It will format the
JSON output you want.

00:11:54.980 --> 00:11:56.600
You can add some styling here.

00:11:56.600 --> 00:12:02.030
For this H1 style is equal to

00:12:02.030 --> 00:12:08.945
within double-quotes
color colon red,

00:12:08.945 --> 00:12:11.629
just to differentiate
the response.

00:12:11.629 --> 00:12:12.590
That's it.

00:12:12.590 --> 00:12:15.890
So how successfully added a
input type so that the user

00:12:15.890 --> 00:12:19.190
can input some data that will
be converted to uppercase.

00:12:19.190 --> 00:12:20.975
You have given him
a submit button,

00:12:20.975 --> 00:12:25.020
and also you are displaying
the results back to him.

00:12:25.690 --> 00:12:29.105
Picture will bootstrap
everything together.

00:12:29.105 --> 00:12:30.380
And to do that,
you have to go to

00:12:30.380 --> 00:12:33.605
the app dot modules dot ts.

00:12:33.605 --> 00:12:35.225
Start with the import.

00:12:35.225 --> 00:12:37.040
We need three inputs here.

00:12:37.040 --> 00:12:41.645
The first import is the
HTTP module itself.

00:12:41.645 --> 00:12:50.690
So HTTP client module from
within single quotes,

00:12:50.690 --> 00:12:55.115
angular slash,
common slash HTTP.

00:12:55.115 --> 00:12:57.095
That is the first
one. The second one

00:12:57.095 --> 00:12:59.435
is the service class
that we have created.

00:12:59.435 --> 00:13:02.270
You can grab the name of it
from here, the class name,

00:13:02.270 --> 00:13:04.970
uppercase converter
service, come back,

00:13:04.970 --> 00:13:06.395
paste it right there.

00:13:06.395 --> 00:13:07.670
Within.

00:13:07.670 --> 00:13:10.565
It is from within single quotes.

00:13:10.565 --> 00:13:13.730
Dot slash services,

00:13:13.730 --> 00:13:17.300
slash the uppercase
converter service,

00:13:17.300 --> 00:13:20.600
that guy right there. Semicolon.

00:13:20.600 --> 00:13:24.155
The last one, we also
need the forms module.

00:13:24.155 --> 00:13:29.180
So import forms or

00:13:29.180 --> 00:13:37.594
from within single quotes
at angular slash forms.

00:13:37.594 --> 00:13:40.490
So we have everything
that is needed now.

00:13:40.490 --> 00:13:43.520
Go to the imports after
the browser module,

00:13:43.520 --> 00:13:48.290
at the forms module and also
the HTTP client module,

00:13:48.290 --> 00:13:51.965
HTTP client module
comma forms module.

00:13:51.965 --> 00:13:53.930
So those two can be used
in our application.

00:13:53.930 --> 00:13:55.535
Now in the provider section,

00:13:55.535 --> 00:13:57.500
we need to add the service at

00:13:57.500 --> 00:13:59.660
that guy uppercase
converter service.

00:13:59.660 --> 00:14:03.050
And the last step is to switch
this from app component.

00:14:03.050 --> 00:14:06.470
I want to use the uppercase
converter component as

00:14:06.470 --> 00:14:09.140
the starting point of
our application and

00:14:09.140 --> 00:14:12.095
it puts boots up
or when it starts.

00:14:12.095 --> 00:14:13.550
So three things here.

00:14:13.550 --> 00:14:15.620
The HTTP client
module that will be

00:14:15.620 --> 00:14:17.675
used by the uppercase
converter service,

00:14:17.675 --> 00:14:19.580
then the forms model,
which is required in

00:14:19.580 --> 00:14:23.090
the HTML page for doing
everything on the web browser.

00:14:23.090 --> 00:14:26.044
And you have configured
those in the imports,

00:14:26.044 --> 00:14:28.175
in the priority help
provided to the service.

00:14:28.175 --> 00:14:29.570
And in the Bootstrap section,

00:14:29.570 --> 00:14:31.340
you are using your
component instead

00:14:31.340 --> 00:14:34.080
of the default component.

00:14:34.560 --> 00:14:38.230
It's time to see our
application in action.

00:14:38.230 --> 00:14:39.970
To do that, go to

00:14:39.970 --> 00:14:44.770
your component class
and grab the selector.

00:14:44.770 --> 00:14:48.535
Go to the index.html,
open it up.

00:14:48.535 --> 00:14:49.780
Right now it'll be using

00:14:49.780 --> 00:14:52.900
the default component
app roots selector.

00:14:52.900 --> 00:14:54.880
Get rid of that and add

00:14:54.880 --> 00:14:58.104
our element app
uppercase converter.

00:14:58.104 --> 00:14:59.755
Close that right there.

00:14:59.755 --> 00:15:00.955
Save it.

00:15:00.955 --> 00:15:02.410
To run our application,

00:15:02.410 --> 00:15:03.700
go to the command line,

00:15:03.700 --> 00:15:08.245
use N. So hyphen 0,

00:15:08.245 --> 00:15:09.400
make sure you are in the

00:15:09.400 --> 00:15:12.100
project directory
when you do this.

00:15:12.100 --> 00:15:14.935
And G cell space hyphen 0,

00:15:14.935 --> 00:15:17.354
which we'll build
our application.

00:15:17.354 --> 00:15:21.245
And then it will push
it to the browser.

00:15:21.245 --> 00:15:23.870
It will launch a browser
using which we can

00:15:23.870 --> 00:15:27.360
access the application running
on the server right here.

00:15:28.180 --> 00:15:30.440
There we go.

00:15:30.440 --> 00:15:33.455
It renders a UI wherein it has

00:15:33.455 --> 00:15:36.875
a text field where you
enter a lowercase string.

00:15:36.875 --> 00:15:37.970
It could be anything.

00:15:37.970 --> 00:15:44.360
Say, I am the creator
of my destiny.

00:15:44.360 --> 00:15:45.845
A very long string.

00:15:45.845 --> 00:15:47.825
I am the creator of my destiny.

00:15:47.825 --> 00:15:49.400
Hit the submit button,

00:15:49.400 --> 00:15:52.115
and that will go all
the way to the server.

00:15:52.115 --> 00:15:53.510
And the response that comes

00:15:53.510 --> 00:15:55.820
back has a key called message,

00:15:55.820 --> 00:15:59.645
and the value is all uppercase.

00:15:59.645 --> 00:16:02.570
So our application is
working as expected.

00:16:02.570 --> 00:16:05.660
You have successfully
made a post call this

00:16:05.660 --> 00:16:10.680
time by using the service
that you have created.

00:16:10.720 --> 00:16:14.690
Within the service, you
have used http dot post,

00:16:14.690 --> 00:16:17.345
wherein you are using the
URL as the first parameter.

00:16:17.345 --> 00:16:18.740
And the second parameter is

00:16:18.740 --> 00:16:22.100
the JSON object that
should go in the request.

00:16:22.100 --> 00:16:23.855
Then you how handle the response

00:16:23.855 --> 00:16:25.475
and the error condition as well.

00:16:25.475 --> 00:16:27.350
The component was
straightforward.

00:16:27.350 --> 00:16:29.794
You simply use it the
service in the component.

00:16:29.794 --> 00:16:33.829
In the HTML though,
which is important.

00:16:33.829 --> 00:16:36.500
You have used the
form binding by

00:16:36.500 --> 00:16:39.170
using the angular forms module.

00:16:39.170 --> 00:16:43.775
You have binded the input model

00:16:43.775 --> 00:16:47.105
to the JavaScript
variable using NG model,

00:16:47.105 --> 00:16:51.245
and then use the onclick
event to invoke a function

00:16:51.245 --> 00:16:53.480
and pass to the input that

00:16:53.480 --> 00:16:55.910
the user has entered
in the JSON format.

00:16:55.910 --> 00:16:57.410
Once the response comes back,

00:16:57.410 --> 00:16:58.970
you have handled
it successfully.

00:16:58.970 --> 00:17:01.280
You can also use
it the pipe json,

00:17:01.280 --> 00:17:03.485
which angular users, which will

00:17:03.485 --> 00:17:06.800
beautifully format the
JSON that comes back here.

00:17:06.800 --> 00:17:08.495
It's tiny little JSON.

00:17:08.495 --> 00:17:11.390
But when you have
huge JSON messages,

00:17:11.390 --> 00:17:15.150
this pipe JSON will
format it nicely for you.
