WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:03.975
In this lecture, we
will start working

00:00:03.975 --> 00:00:05.820
on the Angular side of things.

00:00:05.820 --> 00:00:06.990
That is, we're going to create

00:00:06.990 --> 00:00:09.210
a angular client
project that will

00:00:09.210 --> 00:00:11.460
consume the RESTful API which

00:00:11.460 --> 00:00:14.325
we have created using
Node and Express.

00:00:14.325 --> 00:00:17.220
The first step is to create
the Angular project.

00:00:17.220 --> 00:00:18.690
The next step is to create

00:00:18.690 --> 00:00:21.495
the service that can
consume the RESTful API.

00:00:21.495 --> 00:00:24.390
Then the component which
we'll use that service to

00:00:24.390 --> 00:00:27.660
render the output onto the HTML.

00:00:27.660 --> 00:00:30.360
So get started by
creating a new project,

00:00:30.360 --> 00:00:33.255
by going to command
line or terminal,

00:00:33.255 --> 00:00:37.630
open up a new shell
or a new window.

00:00:37.630 --> 00:00:40.340
If you have not up and
running, that's fine.

00:00:40.340 --> 00:00:41.735
You can leave that
window as it is,

00:00:41.735 --> 00:00:44.195
open up a new window,

00:00:44.195 --> 00:00:46.670
and make sure you are under

00:00:46.670 --> 00:00:49.849
the angular folder where
you have all the projects.

00:00:49.849 --> 00:00:52.535
So right-click, get info,

00:00:52.535 --> 00:00:58.200
grab that path, go back
to the command line CD.

00:00:58.330 --> 00:01:01.500
Go into that folder.

00:01:01.930 --> 00:01:04.340
Once you are in that,
you know how to

00:01:04.340 --> 00:01:06.545
create a new project.

00:01:06.545 --> 00:01:13.970
Let me zoom in Z,

00:01:13.970 --> 00:01:17.030
space, new space,
the product name or

00:01:17.030 --> 00:01:21.110
the project name,
products, client.

00:01:21.110 --> 00:01:25.280
So we have called the other
project as product API.

00:01:25.280 --> 00:01:28.760
So let's call this
product client,

00:01:28.760 --> 00:01:32.810
hit Enter, and that will
create a project for us.

00:01:32.810 --> 00:01:35.990
We'll start coding the services,
components, et cetera.

00:01:35.990 --> 00:01:38.100
In the next lecture.

00:01:38.500 --> 00:01:41.390
In this lecture, you
will start creating

00:01:41.390 --> 00:01:44.705
the services to do that
go to command line,

00:01:44.705 --> 00:01:46.625
go into the project data tree,

00:01:46.625 --> 00:01:47.990
which is product client,

00:01:47.990 --> 00:01:50.375
which you have just created.

00:01:50.375 --> 00:01:53.465
Once you are in
there execute n g,

00:01:53.465 --> 00:01:56.015
G is for services space.

00:01:56.015 --> 00:01:57.500
I want it inside the services

00:01:57.500 --> 00:02:02.450
folder slash product data
is the name of service.

00:02:02.450 --> 00:02:04.970
N G. G, Yes.

00:02:04.970 --> 00:02:08.225
Services is the folder
slash product data.

00:02:08.225 --> 00:02:10.385
Hit Enter, that will

00:02:10.385 --> 00:02:13.085
create the service and
the spec file for us.

00:02:13.085 --> 00:02:14.780
Now go to the project.

00:02:14.780 --> 00:02:18.920
Drag that onto
Visual Studio Code.

00:02:18.920 --> 00:02:21.919
Go open the service.

00:02:21.919 --> 00:02:25.774
The product hyphen
data hyphen service.

00:02:25.774 --> 00:02:28.370
Close the Explorer,
start implementing it

00:02:28.370 --> 00:02:30.545
will implement the very
first client method,

00:02:30.545 --> 00:02:33.770
which is the read operation
where we use HTTP.

00:02:33.770 --> 00:02:35.525
Get to do that,

00:02:35.525 --> 00:02:43.835
import HTTP client from single
codes at angular slash,

00:02:43.835 --> 00:02:47.690
common slash HTTP injected in

00:02:47.690 --> 00:02:53.240
the constructor private
underscore HTTP client colon.

00:02:53.240 --> 00:02:57.080
Http client is the
type that's injected.

00:02:57.080 --> 00:02:59.000
Next, implement
the public method.

00:02:59.000 --> 00:03:05.240
Public Get Products
is the first method.

00:03:05.240 --> 00:03:07.025
This method will not take

00:03:07.025 --> 00:03:10.625
any parameters and it will
return the JSON of products.

00:03:10.625 --> 00:03:14.750
So any is the return
type, return.

00:03:14.750 --> 00:03:19.760
This dot HTTP client
dot get is the method.

00:03:19.760 --> 00:03:23.315
Pass it the URL to our
RESTful services running

00:03:23.315 --> 00:03:27.470
on Express JS are running on
Node within single quotes,

00:03:27.470 --> 00:03:31.355
the URL http colon
two forward slashes,

00:03:31.355 --> 00:03:33.650
local host colon 80,

00:03:33.650 --> 00:03:37.415
80 slash api slash products.

00:03:37.415 --> 00:03:40.190
That will pitch us
all the products

00:03:40.190 --> 00:03:43.805
back from the server
application that is running.

00:03:43.805 --> 00:03:46.460
So in this lecture, you
have successfully created

00:03:46.460 --> 00:03:47.810
a service and also

00:03:47.810 --> 00:03:50.105
implemented the very first
of the crud operations,

00:03:50.105 --> 00:03:53.180
which is to retrieve a
bunch of products by using

00:03:53.180 --> 00:03:59.160
the HTTP GET method and by
using the RESTful service URL.

00:04:00.670 --> 00:04:04.489
In this lecture, we'll
implement the UI logic

00:04:04.489 --> 00:04:05.600
that will consume

00:04:05.600 --> 00:04:07.895
this Get Products method
from the service.

00:04:07.895 --> 00:04:09.590
To do that, we're going to use

00:04:09.590 --> 00:04:12.830
the default component
typically to perform

00:04:12.830 --> 00:04:14.900
the crud operations
in any application on

00:04:14.900 --> 00:04:16.370
the UI level will have

00:04:16.370 --> 00:04:18.605
four different
components for create,

00:04:18.605 --> 00:04:20.375
update, read, and delete.

00:04:20.375 --> 00:04:23.405
But here, since you haven't
learned about routing yet,

00:04:23.405 --> 00:04:24.680
which is required to navigate

00:04:24.680 --> 00:04:26.255
from one component to another.

00:04:26.255 --> 00:04:28.295
We'll use the default component,

00:04:28.295 --> 00:04:29.840
will implement everything in

00:04:29.840 --> 00:04:32.705
one single HTML
and one component.

00:04:32.705 --> 00:04:35.165
But later on, once you
learn about routing,

00:04:35.165 --> 00:04:36.725
will come back to this project,

00:04:36.725 --> 00:04:39.545
we will refactor
it so that each,

00:04:39.545 --> 00:04:43.085
each operation in the crowd
will have its own component.

00:04:43.085 --> 00:04:46.650
So get started with
App dot module.js,

00:04:46.650 --> 00:04:48.715
which will use the service.

00:04:48.715 --> 00:04:50.455
So the first line here,

00:04:50.455 --> 00:04:52.285
not the app dot module.js,

00:04:52.285 --> 00:04:55.090
app dot component dot ts.

00:04:55.090 --> 00:04:58.960
Import the surveys, which is

00:04:58.960 --> 00:05:04.270
Product Data Service from

00:05:04.270 --> 00:05:09.760
dot slash services slash
Product Data Service.

00:05:09.760 --> 00:05:12.715
Once we have that, you
can get it up this title,

00:05:12.715 --> 00:05:14.905
we're not going to use that.

00:05:14.905 --> 00:05:18.460
Define a constructor that

00:05:18.460 --> 00:05:21.235
will take the service
as its parameter,

00:05:21.235 --> 00:05:23.815
private, underscore,

00:05:23.815 --> 00:05:30.139
service, colon,
Product, Data Service.

00:05:30.510 --> 00:05:33.235
Next we need to use the method

00:05:33.235 --> 00:05:35.575
called get products from
the surveys invoke it

00:05:35.575 --> 00:05:41.785
will do that in the NG in
it method of our component,

00:05:41.785 --> 00:05:44.005
mg on in it.

00:05:44.005 --> 00:05:47.305
I want to display the products
as soon as the component

00:05:47.305 --> 00:05:50.125
is created and
initialized right here.

00:05:50.125 --> 00:05:56.680
This dot service dot get
products, dot subscribe.

00:05:56.680 --> 00:05:58.810
Within subscribe, we
are going to handle

00:05:58.810 --> 00:06:02.425
the response by creating
an arrow function.

00:06:02.425 --> 00:06:05.350
And I want to assign this to

00:06:05.350 --> 00:06:08.020
a variable which we are
going to define globally.

00:06:08.020 --> 00:06:09.550
Private.

00:06:09.550 --> 00:06:12.750
Call IT products colon.

00:06:12.750 --> 00:06:17.120
Or you can call it Get
Products response and let it,

00:06:17.120 --> 00:06:19.205
let it be simple products.

00:06:19.205 --> 00:06:22.430
Colon any, we're simply
taking the JSON for now.

00:06:22.430 --> 00:06:26.120
We're not dealing with
any objects at this one

00:06:26.120 --> 00:06:27.170
of course is an object but

00:06:27.170 --> 00:06:30.680
not a specific object like
a product model objects.

00:06:30.680 --> 00:06:32.225
In here.

00:06:32.225 --> 00:06:36.650
Products. Or this
dot products is

00:06:36.650 --> 00:06:38.990
equal to the response
that comes back so

00:06:38.990 --> 00:06:41.989
that we can use these
products on the HTML.

00:06:41.989 --> 00:06:46.970
Go to the Explorer, open the
app dot component dot HTML.

00:06:46.970 --> 00:06:49.970
Do a Control, a
delete everything.

00:06:49.970 --> 00:06:55.020
H1 products is the heading.

00:06:55.330 --> 00:06:58.040
One more, which one? You use

00:06:58.040 --> 00:07:00.290
the string interpolation
syntax within

00:07:00.290 --> 00:07:02.450
that use the variable
products from

00:07:02.450 --> 00:07:06.260
the component by JSON.

00:07:06.260 --> 00:07:08.240
Ui is very simple.

00:07:08.240 --> 00:07:10.175
We are retrieving
all the products

00:07:10.175 --> 00:07:12.995
from the service by invoking
the method on the service.

00:07:12.995 --> 00:07:15.755
Then we are assigning the
response to a global variable,

00:07:15.755 --> 00:07:18.800
and then we are using
that field in the HTML.

00:07:18.800 --> 00:07:20.330
In the next lecture, we will

00:07:20.330 --> 00:07:22.805
configure the app dot module.js,

00:07:22.805 --> 00:07:26.190
bootstrap our
application and run it.

00:07:26.710 --> 00:07:30.170
In this lecture, we will
bootstrap our application

00:07:30.170 --> 00:07:33.305
by going to app dot module.js.

00:07:33.305 --> 00:07:34.610
And then we will run it,

00:07:34.610 --> 00:07:36.545
see if there are any issues.

00:07:36.545 --> 00:07:39.770
We'll fix them and then
see the output as well.

00:07:39.770 --> 00:07:42.275
Go to app dot module.js.

00:07:42.275 --> 00:07:44.765
Instead of importing
by going here,

00:07:44.765 --> 00:07:46.220
you have done a lot of typing.

00:07:46.220 --> 00:07:48.350
So go to the providers
directly and

00:07:48.350 --> 00:07:51.095
use Product Data Service.

00:07:51.095 --> 00:07:55.740
And automatically the IDE
we'll do the import for you.

00:07:55.900 --> 00:07:58.730
So now that you are familiar
with all the imports,

00:07:58.730 --> 00:08:02.675
you can use the shortcuts
go to Import imports.

00:08:02.675 --> 00:08:06.440
We need the http module
from Angular http module,

00:08:06.440 --> 00:08:08.000
select that and that will be

00:08:08.000 --> 00:08:09.695
automatically imported for you,

00:08:09.695 --> 00:08:10.940
Just those two for now

00:08:10.940 --> 00:08:14.195
the Product Data Service
and HTTP module.

00:08:14.195 --> 00:08:16.010
Using the default component.

00:08:16.010 --> 00:08:20.885
To start, go to View
integrated terminal.

00:08:20.885 --> 00:08:27.425
Run the application, use
N G. So hyphen bull.

00:08:27.425 --> 00:08:29.540
And while that happens,

00:08:29.540 --> 00:08:32.075
launch your web
browser and search for

00:08:32.075 --> 00:08:36.740
Si Wo es in Express JS.

00:08:36.740 --> 00:08:41.780
Urls stands for cross-origin
request scripting,

00:08:41.780 --> 00:08:45.660
cross-site request
support. So enter.

00:08:48.940 --> 00:08:51.830
Scroll down, go to
this link which

00:08:51.830 --> 00:08:54.410
says course on Express JS,

00:08:54.410 --> 00:08:56.450
select that we need to

00:08:56.450 --> 00:08:59.300
configure the support
on the server side.

00:08:59.300 --> 00:09:01.100
If not, it will see an error.

00:09:01.100 --> 00:09:03.455
Once the application
builds ups, There you go.

00:09:03.455 --> 00:09:05.525
It does not display
any products.

00:09:05.525 --> 00:09:08.195
It just simply displays
the text called products.

00:09:08.195 --> 00:09:10.670
If you go to the
browser console,

00:09:10.670 --> 00:09:13.100
you will see an error
where it says failed

00:09:13.100 --> 00:09:15.650
to load local host 80, 80.

00:09:15.650 --> 00:09:18.515
No access control allow

00:09:18.515 --> 00:09:22.385
origin header is present
on the requested resource.

00:09:22.385 --> 00:09:26.630
So here, the server
side application is

00:09:26.630 --> 00:09:28.610
not rejecting our request

00:09:28.610 --> 00:09:31.520
because this is running
from this port.

00:09:31.520 --> 00:09:34.460
And other application
is running on port 80.

00:09:34.460 --> 00:09:34.790
80.

00:09:34.790 --> 00:09:36.395
So the cross origin,

00:09:36.395 --> 00:09:39.335
the origin is different from
which the request is coming.

00:09:39.335 --> 00:09:40.910
Typically, we see
this problem in

00:09:40.910 --> 00:09:42.890
angular replication
React applications,

00:09:42.890 --> 00:09:45.995
and we need to configure
the course support.

00:09:45.995 --> 00:09:47.135
To do that.

00:09:47.135 --> 00:09:48.560
Grab these lines from here,

00:09:48.560 --> 00:09:51.080
just this part
app.use where we are

00:09:51.080 --> 00:09:54.380
adding the core
support, copy it.

00:09:54.380 --> 00:09:57.680
Go to the server side
application by minimizing

00:09:57.680 --> 00:10:02.465
this war to the
server dot js file.

00:10:02.465 --> 00:10:04.940
And right below where you

00:10:04.940 --> 00:10:06.860
have configured the body parser,

00:10:06.860 --> 00:10:08.705
add the lines you have copied.

00:10:08.705 --> 00:10:13.040
That will add the support
for cross-origin requests.

00:10:13.040 --> 00:10:15.485
And also, we need to
support by default,

00:10:15.485 --> 00:10:18.515
the GET and post
methods are supported,

00:10:18.515 --> 00:10:21.695
but we need support for
PUT and delete as well.

00:10:21.695 --> 00:10:30.035
So here, just before the next
use response dot header,

00:10:30.035 --> 00:10:32.885
we need to add one
more header here.

00:10:32.885 --> 00:10:35.525
Within double-quotes.

00:10:35.525 --> 00:10:38.675
Access hyphen,

00:10:38.675 --> 00:10:46.670
control, C capital
hyphen, hyphen methods.

00:10:46.670 --> 00:10:48.440
So what are all the HTTP methods

00:10:48.440 --> 00:10:49.760
that needs to be supported?

00:10:49.760 --> 00:10:52.655
Comma within double-quotes.

00:10:52.655 --> 00:10:55.160
All capital get comma post,

00:10:55.160 --> 00:10:56.900
comma, put comma delete.

00:10:56.900 --> 00:10:59.945
You can also use a star to
support all the HTTP methods.

00:10:59.945 --> 00:11:03.170
But right now our application
needs only these four.

00:11:03.170 --> 00:11:07.370
So we are using a header
called access control,

00:11:07.370 --> 00:11:10.490
access hyphen control
hyphen, hyphen methods.

00:11:10.490 --> 00:11:12.140
And given all the methods.

00:11:12.140 --> 00:11:14.915
So these headers will allow

00:11:14.915 --> 00:11:18.980
the cars are cross-origin
requests support.

00:11:18.980 --> 00:11:21.650
Now let's restart
the application by

00:11:21.650 --> 00:11:24.485
going to the other IDE.

00:11:24.485 --> 00:11:29.670
Stop it started again.

00:11:29.980 --> 00:11:32.735
And also we need
to stop the node.

00:11:32.735 --> 00:11:34.595
Actually, we should have
stopped the node server,

00:11:34.595 --> 00:11:37.849
stop it, start the application.

00:11:37.849 --> 00:11:41.270
Now it supports course.

00:11:41.270 --> 00:11:43.670
Once these application builds

00:11:43.670 --> 00:11:45.380
and launches this
time we should see

00:11:45.380 --> 00:11:50.820
the all the products displayed
as JSON on the web, Rosa.

00:11:55.080 --> 00:11:57.260
Trying to come. There we go.

00:11:57.260 --> 00:11:59.150
So our client application has

00:11:59.150 --> 00:12:01.190
successfully loaded
all the products.

00:12:01.190 --> 00:12:03.560
It's not beautiful. I
know we can use it in G4.

00:12:03.560 --> 00:12:04.760
Build a table on all that.

00:12:04.760 --> 00:12:05.915
You are welcome to do that,

00:12:05.915 --> 00:12:08.810
but we will refactor
it later on by

00:12:08.810 --> 00:12:12.689
having separate component for
each of these operations.

00:12:13.900 --> 00:12:16.835
In this lecture, we'll
implement the rest

00:12:16.835 --> 00:12:18.965
of the client methods.

00:12:18.965 --> 00:12:20.450
That is create a product,

00:12:20.450 --> 00:12:23.615
updating your product, and
then deleting their product.

00:12:23.615 --> 00:12:26.225
To do that, go to the
Product Data Service,

00:12:26.225 --> 00:12:28.400
copy that Get Products method.

00:12:28.400 --> 00:12:29.300
Based.

00:12:29.300 --> 00:12:32.910
It changed the method
name to create.

00:12:33.370 --> 00:12:37.114
The create method expects
the product object.

00:12:37.114 --> 00:12:39.230
So the component,
the user will enter

00:12:39.230 --> 00:12:41.120
the product information
that will be passed

00:12:41.120 --> 00:12:43.235
in as a product
object to the create.

00:12:43.235 --> 00:12:45.320
And that needs to
be passed in to

00:12:45.320 --> 00:12:49.160
the RESTful API
through a post method.

00:12:49.160 --> 00:12:51.365
And the post method
expects two things,

00:12:51.365 --> 00:12:54.365
the URL and then the data

00:12:54.365 --> 00:12:57.245
or the object pass
in the product.

00:12:57.245 --> 00:12:59.780
So that's the create method,
which is very simple.

00:12:59.780 --> 00:13:02.450
We use HTTP post pass the data.

00:13:02.450 --> 00:13:04.115
We are adding a product to

00:13:04.115 --> 00:13:06.200
existing collection of products.

00:13:06.200 --> 00:13:08.570
That is the reason this
URL should be used.

00:13:08.570 --> 00:13:09.955
This is the URL
that we have mapper

00:13:09.955 --> 00:13:11.750
to on the server side,

00:13:11.750 --> 00:13:13.430
on the Node and Express side.

00:13:13.430 --> 00:13:15.995
But if you see this
URL is being repeated,

00:13:15.995 --> 00:13:19.850
so you can copy that entire
thing or cut it from the get.

00:13:19.850 --> 00:13:23.765
Go up top here, define a
new variable anywhere here,

00:13:23.765 --> 00:13:28.820
URL, colon, string is
equal to paste that.

00:13:28.820 --> 00:13:33.785
Now semicolon after
the single quotes

00:13:33.785 --> 00:13:35.180
here in the getMethod,

00:13:35.180 --> 00:13:37.865
you can say this.url,

00:13:37.865 --> 00:13:40.250
same in the create as well.

00:13:40.250 --> 00:13:42.590
Get rid off that this dot URL.

00:13:42.590 --> 00:13:43.790
We can reuse it. We are going

00:13:43.790 --> 00:13:45.095
to reuse it again in the update.

00:13:45.095 --> 00:13:47.240
Update is even super
easier because you

00:13:47.240 --> 00:13:49.565
can copy the Create, paste it.

00:13:49.565 --> 00:13:51.305
So even in case of update,

00:13:51.305 --> 00:13:52.595
change that method name,

00:13:52.595 --> 00:13:55.804
we get a product that
needs to be updated.

00:13:55.804 --> 00:14:01.460
We take that, we use the HTTP
PUT method and hit the URL,

00:14:01.460 --> 00:14:03.545
the very same URL,
the products URL.

00:14:03.545 --> 00:14:06.410
We are updating an existing
product in the collection.

00:14:06.410 --> 00:14:08.420
And then we pass

00:14:08.420 --> 00:14:10.040
the updated information of

00:14:10.040 --> 00:14:11.405
the product as a product object.

00:14:11.405 --> 00:14:14.330
Whatever we get back, the
response will be returned.

00:14:14.330 --> 00:14:15.260
That's super easy.

00:14:15.260 --> 00:14:17.675
Delete is slightly different,

00:14:17.675 --> 00:14:20.060
not much. So let's type it in.

00:14:20.060 --> 00:14:21.290
Public.

00:14:21.290 --> 00:14:23.120
Delete is the method.

00:14:23.120 --> 00:14:26.165
This guy takes a
id colon number.

00:14:26.165 --> 00:14:29.900
This is the primary key
of the product colon.

00:14:29.900 --> 00:14:31.145
This will return any,

00:14:31.145 --> 00:14:32.840
again the response of a delete.

00:14:32.840 --> 00:14:35.130
Return, delete.

00:14:35.130 --> 00:14:37.390
This dot HTTP client

00:14:37.390 --> 00:14:43.180
Dot Delete is the HTTP
operation that will take a URL,

00:14:43.180 --> 00:14:49.990
which is this dot URL
plus the ID at the end.

00:14:49.990 --> 00:14:53.600
That's the delete method.

00:14:55.440 --> 00:14:59.350
This should be HTTP
client, not the URL.

00:14:59.350 --> 00:15:02.095
That's the reason we were
seeing that error to this URL.

00:15:02.095 --> 00:15:05.500
At the end, we are appending
an IDE like one or two.

00:15:05.500 --> 00:15:07.060
So that particular
product will be

00:15:07.060 --> 00:15:09.670
deleted from the collection
from the database.

00:15:09.670 --> 00:15:12.460
That is exactly what
is happening here.

00:15:12.460 --> 00:15:15.700
Url plus ID, that ID will be

00:15:15.700 --> 00:15:19.865
passed from the UI for us
when the user enters an ID,

00:15:19.865 --> 00:15:21.905
that particular product
will be deleted,

00:15:21.905 --> 00:15:23.330
that will be
appended to the URL.

00:15:23.330 --> 00:15:26.550
Here we hit the delete
HTTP delete method.

00:15:27.220 --> 00:15:29.900
Now that we have
all the services

00:15:29.900 --> 00:15:31.445
and the component methods,

00:15:31.445 --> 00:15:32.960
it's time to create

00:15:32.960 --> 00:15:34.790
the view portion will create

00:15:34.790 --> 00:15:36.620
the view for create product in

00:15:36.620 --> 00:15:39.170
this lecture and update
and rest of them will

00:15:39.170 --> 00:15:42.155
be quite simple as we
can reuse the logic.

00:15:42.155 --> 00:15:44.375
Start in the HTML page.

00:15:44.375 --> 00:15:45.170
Create.

00:15:45.170 --> 00:15:48.875
Product is the label.

00:15:48.875 --> 00:15:51.080
We're going to
define input types.

00:15:51.080 --> 00:15:54.545
Id is what users should enter.

00:15:54.545 --> 00:15:59.375
So use input type
is equal to number.

00:15:59.375 --> 00:16:01.745
And do the angular binding using

00:16:01.745 --> 00:16:03.110
NG model directive within

00:16:03.110 --> 00:16:05.285
square brackets, within
regular brackets.

00:16:05.285 --> 00:16:10.250
And G, M capital model is equal

00:16:10.250 --> 00:16:13.190
to within double-quotes id

00:16:13.190 --> 00:16:15.590
flows that element right there.

00:16:15.590 --> 00:16:18.605
Give a line break as well.

00:16:18.605 --> 00:16:21.380
Copy that field.

00:16:21.380 --> 00:16:23.945
Paste it three more times,

00:16:23.945 --> 00:16:28.160
changes to name,
description of the product.

00:16:28.160 --> 00:16:31.445
And finally, the
price of the product.

00:16:31.445 --> 00:16:37.670
And change the type to text
for name and description.

00:16:37.670 --> 00:16:38.960
Otherwise, you'll not be able to

00:16:38.960 --> 00:16:41.585
enter any text,
just the numbers.

00:16:41.585 --> 00:16:45.650
In this to name description.

00:16:45.650 --> 00:16:48.575
So these are the JavaScript
variable names that

00:16:48.575 --> 00:16:51.395
the value we enter will be
binded to are assigned to two.

00:16:51.395 --> 00:16:53.675
The last one is price.

00:16:53.675 --> 00:16:55.340
Once he enters those,

00:16:55.340 --> 00:16:57.560
we need to provide
him a button which

00:16:57.560 --> 00:16:59.720
he can click handle that using

00:16:59.720 --> 00:17:02.090
the Angular click event is equal

00:17:02.090 --> 00:17:06.500
to the method name
should go in here.

00:17:06.500 --> 00:17:07.910
So first let's close the button.

00:17:07.910 --> 00:17:10.100
Create is what the
button will show up

00:17:10.100 --> 00:17:12.559
as onclick on the component.

00:17:12.559 --> 00:17:15.740
We are going to invoke the
create product method,

00:17:15.740 --> 00:17:20.090
saying that this guy
needs a product object,

00:17:20.090 --> 00:17:23.915
which we are going
to create as JSON.

00:17:23.915 --> 00:17:30.575
Jason. Id, colon id comma
within single quotes,

00:17:30.575 --> 00:17:34.520
name, colon name comma,
two more fields.

00:17:34.520 --> 00:17:36.815
Third one is description.

00:17:36.815 --> 00:17:43.910
Description, comma,
price, colon price.

00:17:43.910 --> 00:17:48.560
The price should go into
single quotes as well.

00:17:48.560 --> 00:17:50.195
Save it.

00:17:50.195 --> 00:17:51.920
For this binding to work,

00:17:51.920 --> 00:17:53.375
the form binding to work,

00:17:53.375 --> 00:17:57.275
we need to update the
app dot module.js,

00:17:57.275 --> 00:17:59.420
the last important here.

00:17:59.420 --> 00:18:02.690
And import the forms module from

00:18:02.690 --> 00:18:06.830
Angular slash forms
and use it right

00:18:06.830 --> 00:18:09.920
out of the HTTP module in
the imports so that it will

00:18:09.920 --> 00:18:14.045
be important for our
project forms module.

00:18:14.045 --> 00:18:17.270
Save it. Once the application

00:18:17.270 --> 00:18:18.830
of railroads in the web browser,

00:18:18.830 --> 00:18:22.055
we should be able to see
the new form appearing.

00:18:22.055 --> 00:18:23.180
There you go.

00:18:23.180 --> 00:18:25.310
So along with all the
product information,

00:18:25.310 --> 00:18:28.940
we see a Create product
where you can enter id.

00:18:28.940 --> 00:18:33.605
Three, says Samsung phone.

00:18:33.605 --> 00:18:37.190
Anyone off your choice
description, it's good.

00:18:37.190 --> 00:18:41.405
And price is $800.

00:18:41.405 --> 00:18:42.920
Hit Create.

00:18:42.920 --> 00:18:47.030
If you hit Create, we're
not displaying any output.

00:18:47.030 --> 00:18:48.740
So that's something
we need to handle.

00:18:48.740 --> 00:18:50.690
And this three is not the
character tidy anyways,

00:18:50.690 --> 00:18:53.915
so let's go back,
go to the HTML.

00:18:53.915 --> 00:18:56.074
And right after the creation,

00:18:56.074 --> 00:18:59.150
we need to display the
output here as well.

00:18:59.150 --> 00:19:02.045
So go ahead and do
that within H1.

00:19:02.045 --> 00:19:05.344
Use the string
interpolation syntax.

00:19:05.344 --> 00:19:07.925
Will grab the response called

00:19:07.925 --> 00:19:10.385
create response
from the component.

00:19:10.385 --> 00:19:14.555
Pipe JSON, format it, save it.

00:19:14.555 --> 00:19:16.250
Now come back.

00:19:16.250 --> 00:19:18.485
We'll enter the right
information this time.

00:19:18.485 --> 00:19:21.810
Four should be the ID
because we have ID3 already.

00:19:21.810 --> 00:19:25.149
Samsung phone.

00:19:25.149 --> 00:19:28.345
Samsung Galaxy, probably price

00:19:28.345 --> 00:19:30.370
is 800, not the description.

00:19:30.370 --> 00:19:31.150
Here.

00:19:31.150 --> 00:19:33.355
It's awesome.

00:19:33.355 --> 00:19:36.850
Hit Create, and it's super fast.

00:19:36.850 --> 00:19:38.950
So the request goes
all the way from

00:19:38.950 --> 00:19:41.695
our client application
running or 4200,

00:19:41.695 --> 00:19:44.815
all the way to our Node
Express application.

00:19:44.815 --> 00:19:46.660
And we get a response back.

00:19:46.660 --> 00:19:49.285
And if you refresh the screen,

00:19:49.285 --> 00:19:51.250
we'll also see this because we

00:19:51.250 --> 00:19:53.770
haven't done a
data binding here.

00:19:53.770 --> 00:19:56.005
We're not seeing the latest.

00:19:56.005 --> 00:19:58.060
You can go to the database.

00:19:58.060 --> 00:20:01.045
And if you do a select
star from product,

00:20:01.045 --> 00:20:02.500
you will see the fourth one,

00:20:02.500 --> 00:20:04.665
which is Samsung phone.

00:20:04.665 --> 00:20:07.370
In the next lecture,
we'll create the update,

00:20:07.370 --> 00:20:10.860
getting a single product
and deleting it.

00:20:11.170 --> 00:20:14.810
Let's wrap up the crud
operations by implementing

00:20:14.810 --> 00:20:18.065
the update and delete views.

00:20:18.065 --> 00:20:21.365
Grab this, create and
paste it right below it,

00:20:21.365 --> 00:20:23.375
change it to update product.

00:20:23.375 --> 00:20:26.390
In updation, we are allowing
the name and the price,

00:20:26.390 --> 00:20:27.935
so get it off description.

00:20:27.935 --> 00:20:29.885
The ID needs to be passed in.

00:20:29.885 --> 00:20:34.085
So to avoid confusion
between this id name, etc,

00:20:34.085 --> 00:20:36.605
let's change them to id1,

00:20:36.605 --> 00:20:40.040
name1, and price one.

00:20:40.040 --> 00:20:43.865
So again, all this
will go away when we,

00:20:43.865 --> 00:20:47.135
how components, when we
separate the components out.

00:20:47.135 --> 00:20:50.539
But for now, we have id1,

00:20:50.539 --> 00:20:53.630
name1, and price one,

00:20:53.630 --> 00:20:55.370
which is the last one.

00:20:55.370 --> 00:20:56.930
Save it.

00:20:56.930 --> 00:21:01.955
And this here will
be update ponds.

00:21:01.955 --> 00:21:05.975
That is what we have in the
component update response.

00:21:05.975 --> 00:21:07.970
Come back to the HTML,

00:21:07.970 --> 00:21:10.490
makes sure we got
everything right onclick,

00:21:10.490 --> 00:21:12.860
we need to invoke
update product,

00:21:12.860 --> 00:21:16.070
not create, update product.

00:21:16.070 --> 00:21:20.990
Next, implement, get single
method fits single call.

00:21:20.990 --> 00:21:27.330
So grab the first two lines
where the ID is present.

00:21:27.790 --> 00:21:30.560
Fetch product,

00:21:30.560 --> 00:21:34.610
input type number ID is
what he should be entering.

00:21:34.610 --> 00:21:38.255
And then we need a button.

00:21:38.255 --> 00:21:40.355
So grab the button from here.

00:21:40.355 --> 00:21:42.200
You can grab the last
two lines as well.

00:21:42.200 --> 00:21:46.340
The button under JSON
response, based it.

00:21:46.340 --> 00:21:48.900
Let me scroll it up.

00:21:49.810 --> 00:21:52.790
Change this ID to id2.

00:21:52.790 --> 00:21:56.750
And the delete request
just needs one parameter.

00:21:56.750 --> 00:21:58.280
Delete.

00:21:58.280 --> 00:22:02.465
And we can pass the
ID without JSON.

00:22:02.465 --> 00:22:04.520
So get it off the JSON object.

00:22:04.520 --> 00:22:08.060
All it needs is id to here,

00:22:08.060 --> 00:22:10.790
and this should
change to delete.

00:22:10.790 --> 00:22:14.825
Similarly here, we should
change that to update.

00:22:14.825 --> 00:22:18.390
Let's make sure we
have got it right.

00:22:19.840 --> 00:22:24.630
Change the response
to delete response.

00:22:25.180 --> 00:22:28.415
Okay, since I have used delete,

00:22:28.415 --> 00:22:30.545
let, let, let us go with delete.

00:22:30.545 --> 00:22:34.820
We can grab this
and do the fetch.

00:22:34.820 --> 00:22:38.825
Call this delete product
I intended to do,

00:22:38.825 --> 00:22:40.685
but I have done delete.

00:22:40.685 --> 00:22:42.380
So here this will be delete,

00:22:42.380 --> 00:22:43.670
this will be fetched,

00:22:43.670 --> 00:22:46.430
change this to get

00:22:46.430 --> 00:22:49.040
product is the method
that should be invoked.

00:22:49.040 --> 00:22:50.960
Let's make sure that's
the method name.

00:22:50.960 --> 00:22:55.790
Create, Update, get product
that needs a number as well.

00:22:55.790 --> 00:22:57.665
So passing id2.

00:22:57.665 --> 00:23:03.980
And here this is product
corresponds, that's coming back.

00:23:03.980 --> 00:23:08.210
Delete product changes to ID3,

00:23:08.210 --> 00:23:12.350
pass in ID3 to the
delete method.

00:23:12.350 --> 00:23:18.005
Update is fine. Here.

00:23:18.005 --> 00:23:19.640
Id we're passing in Name,

00:23:19.640 --> 00:23:21.530
no need to pass in description.

00:23:21.530 --> 00:23:23.180
So get rid of it.
Even if you pass it,

00:23:23.180 --> 00:23:25.415
it will not be used
on the server side.

00:23:25.415 --> 00:23:27.680
Next phage product,
we are passing in

00:23:27.680 --> 00:23:30.890
the ID that the user
enters onclick we are,

00:23:30.890 --> 00:23:34.385
we are invoking the get
product method call this.

00:23:34.385 --> 00:23:37.820
Get product should
be the name of

00:23:37.820 --> 00:23:42.995
the button displaying the right
response, delete product.

00:23:42.995 --> 00:23:45.245
Same thing again, ID3.

00:23:45.245 --> 00:23:47.735
This time, delete
product will be invoked.

00:23:47.735 --> 00:23:49.100
Id3 will be passed.

00:23:49.100 --> 00:23:51.815
That delete product
response will be displayed.

00:23:51.815 --> 00:23:56.495
Save it, go to the UI to see
if it reflects our changes.

00:23:56.495 --> 00:24:00.095
It does create product we
have already tested that.

00:24:00.095 --> 00:24:02.315
Let's try to update it.

00:24:02.315 --> 00:24:05.945
So you see id for
a Samsung phone.

00:24:05.945 --> 00:24:11.585
So let's use ID for change
their name or price of it.

00:24:11.585 --> 00:24:14.825
My name is right now
Samsung phone change it to

00:24:14.825 --> 00:24:20.960
Samsung Galaxy and
the price is $900.

00:24:20.960 --> 00:24:26.074
Now, hit Update and you
get updates success.

00:24:26.074 --> 00:24:28.699
You can check that by
going to the database.

00:24:28.699 --> 00:24:30.410
Right now it's Samsung phone,

00:24:30.410 --> 00:24:32.555
it's awesome and
the price is 800.

00:24:32.555 --> 00:24:34.550
Execute the select query and

00:24:34.550 --> 00:24:36.905
that is updated successfully.

00:24:36.905 --> 00:24:38.825
Next is Fitch product.

00:24:38.825 --> 00:24:41.420
This time we should get
only a single product back.

00:24:41.420 --> 00:24:45.215
You can use any of the IDs 2-4.

00:24:45.215 --> 00:24:47.075
Let's try three.

00:24:47.075 --> 00:24:48.860
Get product and you get

00:24:48.860 --> 00:24:50.870
the product back
from the backend.

00:24:50.870 --> 00:24:53.930
Last but not the least,
delete a product.

00:24:53.930 --> 00:24:58.265
I'm going to delete ID for,

00:24:58.265 --> 00:25:01.955
hit, Delete, and the
response is delete success.

00:25:01.955 --> 00:25:05.525
If you go to the database
or MySQL Workbench,

00:25:05.525 --> 00:25:06.920
execute the select again,

00:25:06.920 --> 00:25:09.260
the product force
should be gone.

00:25:09.260 --> 00:25:11.615
So now you have successfully

00:25:11.615 --> 00:25:13.565
than all the crud operations,

00:25:13.565 --> 00:25:15.410
although the UI looks weird,

00:25:15.410 --> 00:25:16.640
we are going to change that.

00:25:16.640 --> 00:25:18.470
In the next few sections.

00:25:18.470 --> 00:25:21.545
We have displayed all the
products, created a product,

00:25:21.545 --> 00:25:24.365
updated a product,
Fichte a product,

00:25:24.365 --> 00:25:27.720
and then even deleted a product.
