WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.460 --> 00:00:05.760
Routing is what
applications do when user

00:00:05.760 --> 00:00:07.860
navigates from one web page to

00:00:07.860 --> 00:00:10.890
another in a web
application, e.g.

00:00:10.890 --> 00:00:13.560
if you go to amazon.com

00:00:13.560 --> 00:00:16.620
and when you enter something
for a search here,

00:00:16.620 --> 00:00:19.125
Let's say angular book,

00:00:19.125 --> 00:00:21.735
and click on this button.

00:00:21.735 --> 00:00:24.135
That's nothing but routing.

00:00:24.135 --> 00:00:26.505
Amazon has navigated
as are routed as

00:00:26.505 --> 00:00:29.400
from the search to the
search results page.

00:00:29.400 --> 00:00:30.780
Click on one of
these, it will go to

00:00:30.780 --> 00:00:34.275
the next level and click
on the details of that are

00:00:34.275 --> 00:00:36.000
that link we are being routed

00:00:36.000 --> 00:00:37.920
to the details page where we can

00:00:37.920 --> 00:00:40.015
see more details about that book

00:00:40.015 --> 00:00:42.485
added to the cart or by now.

00:00:42.485 --> 00:00:44.420
So every time you are
clicking on a link,

00:00:44.420 --> 00:00:46.265
an image, a button,

00:00:46.265 --> 00:00:48.950
what is happening behind the
scenes is the application

00:00:48.950 --> 00:00:52.355
is routing you from one
web page to another.

00:00:52.355 --> 00:00:54.485
In traditional web applications

00:00:54.485 --> 00:00:56.390
before single-page applications,

00:00:56.390 --> 00:00:57.860
the way it used to work is

00:00:57.860 --> 00:00:59.840
that the application running on

00:00:59.840 --> 00:01:02.000
the browser will
send a request to

00:01:02.000 --> 00:01:05.030
the server every time the
user clicks on something.

00:01:05.030 --> 00:01:08.690
And then the server will
process that request and

00:01:08.690 --> 00:01:12.575
send the next view
back to the browser.

00:01:12.575 --> 00:01:14.510
So the routing and
the navigation

00:01:14.510 --> 00:01:16.820
used to happen on
the server side.

00:01:16.820 --> 00:01:18.290
The server side application had

00:01:18.290 --> 00:01:20.765
complete control on routing.

00:01:20.765 --> 00:01:23.720
But in case of
single-page applications,

00:01:23.720 --> 00:01:27.935
the entire routing is done
on the client side itself.

00:01:27.935 --> 00:01:29.480
And once in a while, we make

00:01:29.480 --> 00:01:32.060
server-side calls
to update the data

00:01:32.060 --> 00:01:36.590
or to fetch data as required
by the application.

00:01:36.590 --> 00:01:39.335
Angular provides router module,

00:01:39.335 --> 00:01:41.240
which is super easy to use and

00:01:41.240 --> 00:01:43.444
configure routing
for our application.

00:01:43.444 --> 00:01:46.264
And there are three
important components

00:01:46.264 --> 00:01:47.915
in router module.

00:01:47.915 --> 00:01:50.780
The first one is
the routes itself.

00:01:50.780 --> 00:01:54.305
This routes represents
all the routes,

00:01:54.305 --> 00:01:57.455
the navigation links
in our application.

00:01:57.455 --> 00:01:59.960
Second is the router outlet.

00:01:59.960 --> 00:02:03.035
This is the place holder
component that shows

00:02:03.035 --> 00:02:07.700
Angular where to put the
content of each route.

00:02:07.700 --> 00:02:10.280
Last but not the least,
the router link.

00:02:10.280 --> 00:02:12.500
Using this, we
will add a link to

00:02:12.500 --> 00:02:14.990
our HTML pages and clicked on

00:02:14.990 --> 00:02:17.270
that link automatically
the client will be

00:02:17.270 --> 00:02:20.720
routed to the appropriate
page or router.

00:02:20.720 --> 00:02:22.670
So you're going to see all these

00:02:22.670 --> 00:02:26.040
in action in the
next few lectures.

00:02:26.910 --> 00:02:29.140
In the next few lectures,

00:02:29.140 --> 00:02:32.200
we're going to revisit the
product angular client,

00:02:32.200 --> 00:02:33.730
which you have created earlier

00:02:33.730 --> 00:02:37.329
and implement routing
for this application.

00:02:37.329 --> 00:02:39.880
Right now, everything in

00:02:39.880 --> 00:02:41.290
this application happens in

00:02:41.290 --> 00:02:43.255
one single component and page.

00:02:43.255 --> 00:02:45.355
That is, we display
the products, create,

00:02:45.355 --> 00:02:47.860
update and Fitch, and even

00:02:47.860 --> 00:02:51.040
delete on one single
screen, which is not good.

00:02:51.040 --> 00:02:54.130
So we're going to refactor
this project so that each of

00:02:54.130 --> 00:02:58.150
these will have their own
component with their own view.

00:02:58.150 --> 00:03:00.190
And then we will
allow the end user to

00:03:00.190 --> 00:03:03.955
navigate to a particular
link or screen.

00:03:03.955 --> 00:03:06.160
Create a product will
have its own screen,

00:03:06.160 --> 00:03:09.355
update, a product will have
its own screen and so on.

00:03:09.355 --> 00:03:11.650
On the homepage of
our application

00:03:11.650 --> 00:03:13.840
will display all the
products and we'll

00:03:13.840 --> 00:03:15.790
display the links using which

00:03:15.790 --> 00:03:18.805
the user can navigate to
the appropriate screen.

00:03:18.805 --> 00:03:20.800
So before we implement routing,

00:03:20.800 --> 00:03:22.930
let's create four components for

00:03:22.930 --> 00:03:25.120
create, update, and delete.

00:03:25.120 --> 00:03:28.030
And then we'll get
back to routing.

00:03:28.030 --> 00:03:30.100
So go to Visual Studio Code.

00:03:30.100 --> 00:03:31.630
If your server is running,

00:03:31.630 --> 00:03:33.475
Kill it by going
to the terminal,

00:03:33.475 --> 00:03:36.655
hit Control C, clear.

00:03:36.655 --> 00:03:39.745
Create four components and G,

00:03:39.745 --> 00:03:44.500
G, C for component components
is the folder slash.

00:03:44.500 --> 00:03:47.740
The first component is
the Create Component.

00:03:47.740 --> 00:03:51.160
Enter that creates all
the files we need.

00:03:51.160 --> 00:03:55.350
Second is update.

00:03:55.540 --> 00:04:00.395
Hit the up arrow
30s Fitch or read.

00:04:00.395 --> 00:04:04.200
The last one is delete.

00:04:04.720 --> 00:04:08.165
The default component will
display these details,

00:04:08.165 --> 00:04:09.740
and it should then
display the links

00:04:09.740 --> 00:04:11.405
which we will get back to.

00:04:11.405 --> 00:04:13.550
But right now we have
four components,

00:04:13.550 --> 00:04:14.660
which is respond, which are

00:04:14.660 --> 00:04:16.730
responsible for
performing the thread.

00:04:16.730 --> 00:04:19.160
So go to the components folder.

00:04:19.160 --> 00:04:21.620
We have four components here.

00:04:21.620 --> 00:04:25.100
And the app dot module.js
also would've got

00:04:25.100 --> 00:04:29.195
updated with all the imports
and those new components.

00:04:29.195 --> 00:04:31.700
What add it to the
NG module as well.

00:04:31.700 --> 00:04:33.875
So in the next lecture,
we will implement

00:04:33.875 --> 00:04:35.870
these four components by

00:04:35.870 --> 00:04:38.120
moving the code from
one single component,

00:04:38.120 --> 00:04:42.060
which is app dot
component dot ts.

00:04:43.060 --> 00:04:46.415
In this lecture, we
will move the code from

00:04:46.415 --> 00:04:49.265
app dot component dot ts into

00:04:49.265 --> 00:04:52.940
individual files to do
that, close the terminal.

00:04:52.940 --> 00:04:55.370
Right now this app
dot component dot ts

00:04:55.370 --> 00:04:57.530
has the import for the service.

00:04:57.530 --> 00:04:59.390
And then it has

00:04:59.390 --> 00:05:02.195
variable declarations
for different responses.

00:05:02.195 --> 00:05:05.150
And then the methods which
invoke the surveys to perform,

00:05:05.150 --> 00:05:07.100
create, update and so on.

00:05:07.100 --> 00:05:09.170
So this NG on in
it will remain the

00:05:09.170 --> 00:05:11.330
same because the
default component is

00:05:11.330 --> 00:05:13.595
responsible for displaying
all the products

00:05:13.595 --> 00:05:15.365
on the screen like this.

00:05:15.365 --> 00:05:17.330
But then they create
and all should be

00:05:17.330 --> 00:05:20.135
moved to their
respective components.

00:05:20.135 --> 00:05:24.800
Go all the way up,
grab this, copy it.

00:05:24.800 --> 00:05:30.290
Go to the Create component,
which is right here.

00:05:30.290 --> 00:05:35.060
Open the Create dot
T is the last one.

00:05:35.060 --> 00:05:39.140
Maximize, paste the import.

00:05:39.140 --> 00:05:41.870
The services is not here.

00:05:41.870 --> 00:05:43.820
So we'll have to go back
to directories from

00:05:43.820 --> 00:05:45.260
the components and then

00:05:45.260 --> 00:05:47.345
services, dot-product
Data Service.

00:05:47.345 --> 00:05:53.090
Go back to the default component

00:05:53.090 --> 00:05:56.640
ts file app dot
component dot ts.

00:05:58.420 --> 00:06:02.000
Copy this where we

00:06:02.000 --> 00:06:03.875
are injecting the
Product Data Service.

00:06:03.875 --> 00:06:05.270
Go back to the Create component.

00:06:05.270 --> 00:06:07.174
If we do it for one
of the components,

00:06:07.174 --> 00:06:08.690
then it becomes super easy to

00:06:08.690 --> 00:06:10.939
perform the same on
other components.

00:06:10.939 --> 00:06:15.125
Scroll down, copy that
create product method,

00:06:15.125 --> 00:06:18.350
come back to Create component
after NGO on in it,

00:06:18.350 --> 00:06:20.780
paste the method, we
need the response.

00:06:20.780 --> 00:06:23.435
So go back, scroll up,

00:06:23.435 --> 00:06:25.595
the create response
is right here,

00:06:25.595 --> 00:06:28.220
copy it, come back,

00:06:28.220 --> 00:06:30.755
paste it into class level.

00:06:30.755 --> 00:06:31.805
That's it.

00:06:31.805 --> 00:06:33.935
So the input is the first thing.

00:06:33.935 --> 00:06:38.075
Then we have injected
this service,

00:06:38.075 --> 00:06:40.460
and then we have copy
pasted the method,

00:06:40.460 --> 00:06:43.790
and we have defined
the response as well.

00:06:43.790 --> 00:06:47.525
Similarly, we have to do
it for other components.

00:06:47.525 --> 00:06:50.705
So minimize create,
go to update,

00:06:50.705 --> 00:06:52.595
open the TypeScript file.

00:06:52.595 --> 00:06:56.465
Maximize it. Grabbed
the import from create.

00:06:56.465 --> 00:06:59.060
That way we need not change it.

00:06:59.060 --> 00:07:00.650
Copy.

00:07:00.650 --> 00:07:06.539
Go back to the
default component,

00:07:07.570 --> 00:07:12.005
which is app dot
component dot ts.

00:07:12.005 --> 00:07:15.350
Grab the update response
we know that we need that.

00:07:15.350 --> 00:07:18.080
Come back to the
Update component.

00:07:18.080 --> 00:07:19.565
Pasted.

00:07:19.565 --> 00:07:24.440
The constructor needs the
service to be injected.

00:07:24.440 --> 00:07:27.380
Copy that, come back,

00:07:27.380 --> 00:07:29.765
paste it right there.

00:07:29.765 --> 00:07:32.660
Last but not the least,
copy the method.

00:07:32.660 --> 00:07:35.510
So go back to app dot
component dot ds.

00:07:35.510 --> 00:07:38.480
Update Product is the
method we need this time.

00:07:38.480 --> 00:07:44.370
So copy, come back to
update component pasted.

00:07:44.590 --> 00:07:47.045
We have two more to go.

00:07:47.045 --> 00:07:50.075
Next is Fitch or two phage.

00:07:50.075 --> 00:07:53.490
This phage is for
single product Fitch.

00:07:54.250 --> 00:07:57.680
Again, you have to
grab the import or to

00:07:57.680 --> 00:08:00.500
any of the previous
components, grab import,

00:08:00.500 --> 00:08:03.335
paste it, go to the constructor,

00:08:03.335 --> 00:08:08.675
grabbed the service, based it.

00:08:08.675 --> 00:08:12.635
Last one is the read method.

00:08:12.635 --> 00:08:16.100
The default component again,

00:08:16.100 --> 00:08:20.540
get product which takes
n IID is what we need.

00:08:20.540 --> 00:08:23.300
Copy that, come back to Fitch,

00:08:23.300 --> 00:08:27.200
paste it, and we need that
get product response.

00:08:27.200 --> 00:08:29.825
So go back to the
default component,

00:08:29.825 --> 00:08:34.190
grab the get product response,

00:08:34.190 --> 00:08:38.130
copy it, come back
to Fitch, bested.

00:08:38.290 --> 00:08:44.200
The last one is
the delete method.

00:08:44.200 --> 00:08:45.580
So go to the default competent

00:08:45.580 --> 00:08:48.560
grabbed the delete
method from here,

00:08:48.600 --> 00:08:52.270
which takes an ID, go

00:08:52.270 --> 00:08:55.510
to the delete component
that we have created.

00:08:55.510 --> 00:08:58.870
So fetches done, delete
is the last one,

00:08:58.870 --> 00:09:00.625
delete component dot ts.

00:09:00.625 --> 00:09:02.020
We're going the
reverse way here.

00:09:02.020 --> 00:09:03.685
We're pasting the method first,

00:09:03.685 --> 00:09:05.710
then go back to any
of the previous ones.

00:09:05.710 --> 00:09:09.745
Grab the import, come
back, paste the import.

00:09:09.745 --> 00:09:12.325
The constructor
needs the service,

00:09:12.325 --> 00:09:14.815
will grab the hand
type constructor,

00:09:14.815 --> 00:09:19.675
come back, paste the
constructor, that's even better.

00:09:19.675 --> 00:09:21.820
And finally, the
delete response we

00:09:21.820 --> 00:09:24.854
need from the default component.

00:09:24.854 --> 00:09:29.180
So grab it from the
default component or Ts.

00:09:29.180 --> 00:09:31.590
Scroll up.

00:09:32.080 --> 00:09:35.330
We have the Delete response.

00:09:35.330 --> 00:09:41.630
Come back to delete and
paste it right here.

00:09:41.630 --> 00:09:43.070
That's it.

00:09:43.070 --> 00:09:44.990
So how successfully move

00:09:44.990 --> 00:09:47.450
the cord from the
default component,

00:09:47.450 --> 00:09:49.595
which is app component dot ds.

00:09:49.595 --> 00:09:52.055
We can get it off all
this, clean it up.

00:09:52.055 --> 00:09:54.140
We don't need all those methods.

00:09:54.140 --> 00:09:56.240
All we need is the
NG init method,

00:09:56.240 --> 00:09:58.595
which will display the
products to the end-user.

00:09:58.595 --> 00:10:03.510
So the default component now
looks much, much simpler.

00:10:06.070 --> 00:10:09.485
Now that we have
mood all the code

00:10:09.485 --> 00:10:10.850
to the respect to components,

00:10:10.850 --> 00:10:12.200
the next step is to move

00:10:12.200 --> 00:10:16.325
the view logic to the
respect to HTML's as well.

00:10:16.325 --> 00:10:19.170
So you can close all these.

00:10:19.390 --> 00:10:20.750
Save.

00:10:20.750 --> 00:10:23.180
If something is not saved.

00:10:23.180 --> 00:10:25.610
Go to the Explorer.

00:10:25.610 --> 00:10:28.820
Go to the individual
HTML's create component

00:10:28.820 --> 00:10:30.725
dot HTML is the first one.

00:10:30.725 --> 00:10:32.240
Clean it up.

00:10:32.240 --> 00:10:34.580
Go to the default app component.

00:10:34.580 --> 00:10:39.020
Html. Grabbed the
creation part here,

00:10:39.020 --> 00:10:41.975
which is the second piece
after we display the product,

00:10:41.975 --> 00:10:46.925
this is where Create product
starts from Control X,

00:10:46.925 --> 00:10:49.249
go to the Create
Component dot HTML.

00:10:49.249 --> 00:10:50.825
It, It's that simple.

00:10:50.825 --> 00:10:51.920
Save it.

00:10:51.920 --> 00:10:54.380
Next is the update.

00:10:54.380 --> 00:10:57.065
Open the HTML.

00:10:57.065 --> 00:11:01.280
Go back to the default HTML
or the app component HTML,

00:11:01.280 --> 00:11:04.280
grab the update part, Control X,

00:11:04.280 --> 00:11:08.269
Control a, paste it in the
update component HTML,

00:11:08.269 --> 00:11:10.385
same for the rest of them,

00:11:10.385 --> 00:11:13.370
which is Fitch single.

00:11:13.370 --> 00:11:15.665
Open up the HTML,

00:11:15.665 --> 00:11:17.960
go back to the component.

00:11:17.960 --> 00:11:20.585
Let me maximize this.

00:11:20.585 --> 00:11:24.035
The App component or
HTML, grab the fetch,

00:11:24.035 --> 00:11:27.590
cut it back, control a paste.

00:11:27.590 --> 00:11:30.600
The last one is the delete.

00:11:31.860 --> 00:11:34.270
Delete HTML.

00:11:34.270 --> 00:11:37.210
Maximize, go to app component.

00:11:37.210 --> 00:11:38.950
Now the app component,

00:11:38.950 --> 00:11:40.870
HTML is much, much cleaner.

00:11:40.870 --> 00:11:43.660
All it does is it
displays the products.

00:11:43.660 --> 00:11:46.315
Go back to delete, Control, a,

00:11:46.315 --> 00:11:49.210
Control V. So we
have successfully

00:11:49.210 --> 00:11:53.630
moved all the HTML2
individual components.

00:11:54.660 --> 00:11:57.565
Now that we're done
with refactoring,

00:11:57.565 --> 00:11:59.755
let's see where our
application stance,

00:11:59.755 --> 00:12:01.539
how it looks to the end-user.

00:12:01.539 --> 00:12:06.775
Go to View integrated
terminal and started md.

00:12:06.775 --> 00:12:09.130
Hyphen four.

00:12:09.130 --> 00:12:11.890
If it's already up
and running for you,

00:12:11.890 --> 00:12:13.934
go ahead and refresh.

00:12:13.934 --> 00:12:15.635
We have our web browser.

00:12:15.635 --> 00:12:18.560
I have stopped it, so
I'm restarting it.

00:12:18.560 --> 00:12:24.350
Once it's done. We can
see that the first page,

00:12:24.350 --> 00:12:28.925
we'll just have the
list of products.

00:12:28.925 --> 00:12:30.410
There we go.

00:12:30.410 --> 00:12:32.360
It doesn't show the
create, update,

00:12:32.360 --> 00:12:34.400
delete, and fetch
opsins anymore.

00:12:34.400 --> 00:12:35.630
It's hidden now.

00:12:35.630 --> 00:12:38.405
So all those components
have no access.

00:12:38.405 --> 00:12:39.860
We need to provide the access to

00:12:39.860 --> 00:12:42.755
the end-user by
defining routing,

00:12:42.755 --> 00:12:45.740
which we are going to do
in the next few lectures.

00:12:45.740 --> 00:12:47.060
The steps for implementing

00:12:47.060 --> 00:12:49.565
routing are three
important ones.

00:12:49.565 --> 00:12:55.070
The first step is to create
a routing dot module.js.

00:12:55.070 --> 00:12:58.145
You can do it right when
the project is created,

00:12:58.145 --> 00:13:00.260
when you have done NG

00:13:00.260 --> 00:13:02.825
create from your command
line right here.

00:13:02.825 --> 00:13:08.045
And g, g or NG new and
gave it a project name.

00:13:08.045 --> 00:13:09.680
We could have given a hyphen,

00:13:09.680 --> 00:13:11.720
hyphen routing flag, which will

00:13:11.720 --> 00:13:14.510
automatically add
this module for us.

00:13:14.510 --> 00:13:16.490
But right now we
are going to create

00:13:16.490 --> 00:13:18.470
it on our own so that you will

00:13:18.470 --> 00:13:20.300
learn everything
from scratch and

00:13:20.300 --> 00:13:22.340
from next time when you
are creating a project,

00:13:22.340 --> 00:13:23.915
if you need routing support,

00:13:23.915 --> 00:13:26.555
which you will need, we
can do it like this,

00:13:26.555 --> 00:13:28.445
right from the command line.

00:13:28.445 --> 00:13:30.920
So the first step is to add

00:13:30.920 --> 00:13:34.580
the support for routing by
creating a routing module,

00:13:34.580 --> 00:13:38.225
we'll define all the
routes inside this module.

00:13:38.225 --> 00:13:43.580
Once we do that, we'll add
those routes to our HTML,

00:13:43.580 --> 00:13:45.020
the default component, HTML,

00:13:45.020 --> 00:13:47.480
so that it will display
all the links here.

00:13:47.480 --> 00:13:49.610
And when the user
clicks on that link,

00:13:49.610 --> 00:13:52.430
the appropriate routing
will happen because

00:13:52.430 --> 00:13:54.890
their outer outlet from Angular

00:13:54.890 --> 00:13:58.640
knows how to route when
a user clicks on a link.

00:13:58.640 --> 00:14:00.095
Last but not the least,

00:14:00.095 --> 00:14:01.400
we should include the routing

00:14:01.400 --> 00:14:04.310
module.js in our app module,

00:14:04.310 --> 00:14:07.385
which is the configuration
file for our application,

00:14:07.385 --> 00:14:10.565
three steps define the routes
in the routing module,

00:14:10.565 --> 00:14:14.330
then use those routes
in our HTML and also

00:14:14.330 --> 00:14:15.920
configure the routing module in

00:14:15.920 --> 00:14:19.620
the App Model so that it
will be used at runtime.

00:14:20.440 --> 00:14:23.570
In this lecture, we will
execute the first step,

00:14:23.570 --> 00:14:26.870
which is to create the
routing dot module.js,

00:14:26.870 --> 00:14:30.530
within which we will use
the angular router module

00:14:30.530 --> 00:14:32.150
for Visual Studio Code.

00:14:32.150 --> 00:14:35.105
Close everything,
go to the project.

00:14:35.105 --> 00:14:37.715
Right-click on the app folder,

00:14:37.715 --> 00:14:39.830
create a new file,

00:14:39.830 --> 00:14:45.060
call it routing dot module.js.

00:14:45.490 --> 00:14:50.090
Outing taught module
dot type script file,

00:14:50.090 --> 00:14:54.275
maximize, close the console.

00:14:54.275 --> 00:14:56.810
The first step is to include or

00:14:56.810 --> 00:14:59.750
import the module
because we're going to

00:14:59.750 --> 00:15:02.330
use the NG module to initialize

00:15:02.330 --> 00:15:11.790
our router defined energy
modulator on from angular core.

00:15:13.150 --> 00:15:15.785
So that's the very first step.

00:15:15.785 --> 00:15:18.485
Next, we need the router module,

00:15:18.485 --> 00:15:23.660
routes to define the routes
comma and the router module

00:15:23.660 --> 00:15:30.455
from angular route slash route.

00:15:30.455 --> 00:15:33.320
Those are the two key
imports should be

00:15:33.320 --> 00:15:36.440
router module, save it.

00:15:36.440 --> 00:15:39.155
Now create a class export.

00:15:39.155 --> 00:15:42.215
The class itself will
not how much code here.

00:15:42.215 --> 00:15:46.610
Export class, AP, router module.

00:15:46.610 --> 00:15:47.960
You can call it
whatever you want,

00:15:47.960 --> 00:15:51.560
close and open and close
the flower brackets.

00:15:51.560 --> 00:15:55.835
The first step is to
define a constant.

00:15:55.835 --> 00:15:57.695
Routes.

00:15:57.695 --> 00:16:02.135
It's an array of type
routes from Angular.

00:16:02.135 --> 00:16:04.730
So here, this is the
type we are using here.

00:16:04.730 --> 00:16:06.665
So this array will carry

00:16:06.665 --> 00:16:08.570
all the routes for
our application

00:16:08.570 --> 00:16:13.010
is equal to open and close
angular bracket for an array.

00:16:13.010 --> 00:16:16.340
We'll initialize this array
in the next lecture with

00:16:16.340 --> 00:16:18.380
all our application routes to

00:16:18.380 --> 00:16:20.615
configure the angular router.

00:16:20.615 --> 00:16:22.010
Right, about this class,

00:16:22.010 --> 00:16:25.580
we'll use f and g module.

00:16:25.580 --> 00:16:28.745
This the way we can import
any module and use it.

00:16:28.745 --> 00:16:30.605
So here we are importing
the router module.

00:16:30.605 --> 00:16:32.420
Here we're going to
create an instance

00:16:32.420 --> 00:16:34.535
of it and export it out.

00:16:34.535 --> 00:16:36.410
So inside this NG module,

00:16:36.410 --> 00:16:40.490
we define an object which will

00:16:40.490 --> 00:16:46.589
have imports colon
within square brackets.

00:16:46.960 --> 00:16:50.460
Router module.

00:16:52.360 --> 00:16:55.640
There is a static method on
the router module which is

00:16:55.640 --> 00:16:59.300
called for root out.

00:16:59.300 --> 00:17:01.445
So this will create
this static method,

00:17:01.445 --> 00:17:04.550
will create a router
module for our application

00:17:04.550 --> 00:17:08.915
with all the given routes
which we are configuring here.

00:17:08.915 --> 00:17:11.435
So we will initialize the
droughts in the next lecture.

00:17:11.435 --> 00:17:12.890
But for now we have successfully

00:17:12.890 --> 00:17:15.424
created a router module
for our application.

00:17:15.424 --> 00:17:17.585
And we are exporting it out.

00:17:17.585 --> 00:17:23.910
Exports colon within angular
brackets, the router module.

00:17:27.010 --> 00:17:29.750
So this here is a static method

00:17:29.750 --> 00:17:31.160
on the router module which will

00:17:31.160 --> 00:17:32.750
initialize all the roots are

00:17:32.750 --> 00:17:35.030
routes and then we
are exporting it out.

00:17:35.030 --> 00:17:37.550
So to configure a router,
it's that simple.

00:17:37.550 --> 00:17:41.345
We import the module
routes and router module.

00:17:41.345 --> 00:17:43.130
Then we initialize or create

00:17:43.130 --> 00:17:45.185
an array which will
contain all the routes.

00:17:45.185 --> 00:17:47.090
Then using the NG module,

00:17:47.090 --> 00:17:50.630
we will initialize our
router by invoking

00:17:50.630 --> 00:17:52.040
the static method and passing it

00:17:52.040 --> 00:17:54.410
all the routes and
export it out.

00:17:54.410 --> 00:17:56.540
And here is the class
for this module,

00:17:56.540 --> 00:17:57.950
which is just like
a place holder

00:17:57.950 --> 00:18:00.360
so that we can do all this.

00:18:01.360 --> 00:18:03.890
In this lecture,
we will configure

00:18:03.890 --> 00:18:06.020
all the routes for
our application.

00:18:06.020 --> 00:18:07.820
So go to the routes
array which we

00:18:07.820 --> 00:18:09.530
have created here up top.

00:18:09.530 --> 00:18:11.750
The very first object inside

00:18:11.750 --> 00:18:14.195
this array will have
two properties.

00:18:14.195 --> 00:18:17.750
That path colon
within single quotes,

00:18:17.750 --> 00:18:20.240
some value comma, the

00:18:20.240 --> 00:18:23.525
component that should
be used for this path.

00:18:23.525 --> 00:18:26.675
Colon, the component name.

00:18:26.675 --> 00:18:28.415
In the web browser.

00:18:28.415 --> 00:18:30.560
If the navigation is happening

00:18:30.560 --> 00:18:32.810
to local host for two zeros,

00:18:32.810 --> 00:18:34.730
zeros slash create,

00:18:34.730 --> 00:18:37.565
then the create components
should be used.

00:18:37.565 --> 00:18:39.455
That is exactly what we
are going to map here.

00:18:39.455 --> 00:18:40.955
So if the path is create,

00:18:40.955 --> 00:18:46.024
the component that should be
used is create component,

00:18:46.024 --> 00:18:47.885
which we have created earlier

00:18:47.885 --> 00:18:50.690
automatically that will
be imported for us.

00:18:50.690 --> 00:18:52.745
You can copy this.

00:18:52.745 --> 00:18:56.060
Use a comma, paste it, comma,

00:18:56.060 --> 00:19:04.020
paste, comma and paste
it one more time.

00:19:04.030 --> 00:19:05.480
Create.

00:19:05.480 --> 00:19:07.949
Second one is update.

00:19:08.620 --> 00:19:12.230
This, we'll use the
update component.

00:19:12.230 --> 00:19:17.000
The third one is fetch that
uses the phage component.

00:19:17.000 --> 00:19:22.055
The last one is delete, delete.

00:19:22.055 --> 00:19:26.810
And that should use
the Delete component.

00:19:26.810 --> 00:19:29.300
When the user navigates
to create it,

00:19:29.300 --> 00:19:32.180
we'll use the Create
component and so on.

00:19:32.180 --> 00:19:35.375
Let's make this clean.

00:19:35.375 --> 00:19:38.855
By moving the paths
to the next line.

00:19:38.855 --> 00:19:44.010
We can even add a tab here
that looks much cleaner.

00:19:52.060 --> 00:19:55.040
So these are all the paths
for our application.

00:19:55.040 --> 00:19:58.490
We can also, we also need
to define a default path.

00:19:58.490 --> 00:20:02.135
That is, when the user
does not use anything.

00:20:02.135 --> 00:20:04.880
When he accesses this URL.

00:20:04.880 --> 00:20:06.680
If you want to, optionally,

00:20:06.680 --> 00:20:08.765
you can configure
a default page.

00:20:08.765 --> 00:20:11.240
But by default, the index.html,

00:20:11.240 --> 00:20:12.770
which uses the
default component,

00:20:12.770 --> 00:20:14.450
will be sold anyways,

00:20:14.450 --> 00:20:22.085
pap colon blank, comma redirect
to is another property.

00:20:22.085 --> 00:20:25.340
Colon blank as well.

00:20:25.340 --> 00:20:28.100
So we are telling if nothing
is used in the path,

00:20:28.100 --> 00:20:29.840
just go to the default base.

00:20:29.840 --> 00:20:32.550
That is what this means here.

00:20:34.300 --> 00:20:37.940
One other important property on

00:20:37.940 --> 00:20:42.920
this default path right here
is to provide a path match.

00:20:42.920 --> 00:20:44.840
Match is equal to.

00:20:44.840 --> 00:20:47.225
There are two values
which we can pass to it.

00:20:47.225 --> 00:20:51.905
Math match, colon,
full or prefix.

00:20:51.905 --> 00:20:53.300
When we give full,

00:20:53.300 --> 00:20:56.810
that means the full
path in that URI should

00:20:56.810 --> 00:20:58.760
match only then the route will

00:20:58.760 --> 00:21:00.710
be mapped to a
particular component.

00:21:00.710 --> 00:21:03.080
So we will how to use
a complete create.

00:21:03.080 --> 00:21:06.080
We just use CRA that won't work.

00:21:06.080 --> 00:21:08.990
But if you use something
called prefix,

00:21:08.990 --> 00:21:11.345
then we can just use c

00:21:11.345 --> 00:21:15.050
are so full and prefix
are the two values.

00:21:15.050 --> 00:21:16.445
And I want it to be

00:21:16.445 --> 00:21:19.490
strict full pattern match

00:21:19.490 --> 00:21:22.310
on our very first
object in that array.

00:21:22.310 --> 00:21:26.910
If I end that property and
use the value as full.

00:21:27.880 --> 00:21:30.695
The last step is to import

00:21:30.695 --> 00:21:33.035
and use the routing
module dot PS.

00:21:33.035 --> 00:21:35.915
In our app module, the
configuration file.

00:21:35.915 --> 00:21:38.375
Go to the app module.js.

00:21:38.375 --> 00:21:41.690
Maximize. Go ahead and

00:21:41.690 --> 00:21:45.660
use it in the import
definitions right here.

00:21:45.790 --> 00:21:48.590
It's called the routing module.

00:21:48.590 --> 00:21:50.510
If you scroll down,
you can call it the

00:21:50.510 --> 00:21:52.430
router module or
the routing module.

00:21:52.430 --> 00:21:54.995
We have call it called
it AP router module.

00:21:54.995 --> 00:21:59.885
That's fine. Come back in
here in the imports, use it.

00:21:59.885 --> 00:22:01.715
You start typing it in AP,

00:22:01.715 --> 00:22:04.190
router, hit control space.

00:22:04.190 --> 00:22:07.535
That will give you the option
to import it, select it,

00:22:07.535 --> 00:22:09.110
and automatically that will be

00:22:09.110 --> 00:22:10.910
imported for you. That's it.

00:22:10.910 --> 00:22:16.050
That's all that is required
to for the routing to work.

00:22:16.870 --> 00:22:20.450
Now that we have the routes
configured and everything,

00:22:20.450 --> 00:22:22.700
the last step is to use them in

00:22:22.700 --> 00:22:25.505
the app component dot HTML,

00:22:25.505 --> 00:22:27.680
where we are displaying
all the products.

00:22:27.680 --> 00:22:29.734
Once the products are displayed,

00:22:29.734 --> 00:22:34.670
let's start using the routes
using a instead of H ref,

00:22:34.670 --> 00:22:39.410
use square brackets
for the router link.

00:22:39.410 --> 00:22:42.635
Directive from
Angular router link

00:22:42.635 --> 00:22:46.040
is equal to within
double-quotes.

00:22:46.040 --> 00:22:49.640
Use single quotes, forward slash

00:22:49.640 --> 00:22:51.965
the router links
which we have created

00:22:51.965 --> 00:22:54.890
earlier in the
routing module.js,

00:22:54.890 --> 00:22:56.510
I'm using create four,

00:22:56.510 --> 00:22:59.960
create, close it right there.

00:22:59.960 --> 00:23:04.085
Create product is the
text I want to display.

00:23:04.085 --> 00:23:06.215
So this is just like
a hitch href tag,

00:23:06.215 --> 00:23:08.375
but instead of using H ref,

00:23:08.375 --> 00:23:11.630
we are using Angular
directive called router link.

00:23:11.630 --> 00:23:14.420
And we're mapping this link to

00:23:14.420 --> 00:23:18.605
a router pap called create.

00:23:18.605 --> 00:23:22.370
Add a line break at the end, BR.

00:23:22.370 --> 00:23:27.640
Copy this, paste it
three more times.

00:23:27.640 --> 00:23:29.260
The second one is update,

00:23:29.260 --> 00:23:31.285
the third one is fetch.

00:23:31.285 --> 00:23:34.300
The last one is delete
product, change.

00:23:34.300 --> 00:23:37.345
The URIs are the router paths.

00:23:37.345 --> 00:23:40.915
Update, fetch.

00:23:40.915 --> 00:23:42.730
The last one is delete.

00:23:42.730 --> 00:23:44.710
These paths here should exactly

00:23:44.710 --> 00:23:46.960
match whatever path
we are using here,

00:23:46.960 --> 00:23:48.985
create, update,

00:23:48.985 --> 00:23:53.335
and delete with a forward
slash right here.

00:23:53.335 --> 00:23:55.390
So that's the first step and the

00:23:55.390 --> 00:23:57.490
second and the last
step is to use

00:23:57.490 --> 00:24:01.495
a router hyphen outlet,

00:24:01.495 --> 00:24:04.330
which is responsible for
taking care of resolving

00:24:04.330 --> 00:24:06.010
all these links and opening

00:24:06.010 --> 00:24:07.995
up their outer
navigation for us.

00:24:07.995 --> 00:24:10.700
Router outlet is an element

00:24:10.700 --> 00:24:13.950
from Angular that
should go in here.

00:24:15.670 --> 00:24:18.545
It's time to see
routing in action.

00:24:18.545 --> 00:24:21.035
So go to the
integrated terminal.

00:24:21.035 --> 00:24:23.420
Make sure your Node app,

00:24:23.420 --> 00:24:25.130
which can sell the products from

00:24:25.130 --> 00:24:26.720
the database, is up and running.

00:24:26.720 --> 00:24:28.595
If not start the node server

00:24:28.595 --> 00:24:30.920
by going to that application.

00:24:30.920 --> 00:24:34.355
Once you do that, come back
to our angular client app

00:24:34.355 --> 00:24:38.820
and G serve hyphen 0.

00:24:40.060 --> 00:24:42.425
That will pick up

00:24:42.425 --> 00:24:44.780
all the latest changes
and it will pull it up,

00:24:44.780 --> 00:24:47.315
push it to the web
browser as well.

00:24:47.315 --> 00:24:50.580
So let's wait for it to build.

00:24:57.820 --> 00:25:02.765
Hello Almost there. On
the products client pays.

00:25:02.765 --> 00:25:04.265
Now you will see

00:25:04.265 --> 00:25:07.700
all the products displayed
and then all the links.

00:25:07.700 --> 00:25:08.750
It's not a great UI,

00:25:08.750 --> 00:25:12.110
but at least we can now navigate
to the individual pages.

00:25:12.110 --> 00:25:15.245
Let's start with Create.
Click on that link.

00:25:15.245 --> 00:25:18.410
Now you see the power
of single-page app.

00:25:18.410 --> 00:25:21.590
That create product is
rendered right there.

00:25:21.590 --> 00:25:23.360
So you can use this as

00:25:23.360 --> 00:25:26.210
a navigation bar or
a left side menu,

00:25:26.210 --> 00:25:29.300
and you can navigate
to independent UIs.

00:25:29.300 --> 00:25:31.310
So create product. Right now we

00:25:31.310 --> 00:25:35.090
have Up to three depending on
what you have been testing.

00:25:35.090 --> 00:25:36.590
For me, the ID is three,

00:25:36.590 --> 00:25:38.570
that's the last I will use for

00:25:38.570 --> 00:25:41.855
simply add a product
called we have,

00:25:41.855 --> 00:25:43.265
do we have Samsung here now?

00:25:43.265 --> 00:25:47.570
So Samsung phone description

00:25:47.570 --> 00:25:51.065
is good and the
price is 700 bucks.

00:25:51.065 --> 00:25:52.235
Create.

00:25:52.235 --> 00:25:54.035
And you see the Create response

00:25:54.035 --> 00:25:56.030
right there as well,
which is awesome.

00:25:56.030 --> 00:25:57.740
Let's update this information

00:25:57.740 --> 00:26:00.035
by clicking on Update Product,

00:26:00.035 --> 00:26:03.350
which will take you
to the update screen.

00:26:03.350 --> 00:26:06.080
So the update component
is being used here.

00:26:06.080 --> 00:26:09.770
Enter the ID, which now if
you go back to the database,

00:26:09.770 --> 00:26:11.195
the idea is for,

00:26:11.195 --> 00:26:15.560
for Samsung axiom updating

00:26:15.560 --> 00:26:18.110
it to Samsung Galaxy
instead of Samsung phone,

00:26:18.110 --> 00:26:21.125
price has increased
to 800 bucks.

00:26:21.125 --> 00:26:23.600
Update, an update is
successful as well.

00:26:23.600 --> 00:26:26.150
Everything else is
working as expected.

00:26:26.150 --> 00:26:28.070
Go to fetch product.

00:26:28.070 --> 00:26:30.785
Given ID1, get the product.

00:26:30.785 --> 00:26:33.575
There is no product with
id1. We have deleted it.

00:26:33.575 --> 00:26:37.265
So try to get product to,

00:26:37.265 --> 00:26:39.170
if you try four,

00:26:39.170 --> 00:26:42.290
you get product for right
now we are displaying JSON.

00:26:42.290 --> 00:26:44.060
We can beautify
it further and we

00:26:44.060 --> 00:26:47.090
will beautified delete product.

00:26:47.090 --> 00:26:51.380
We know that there is a
product with ID 23.4.

00:26:51.380 --> 00:26:56.855
So let's delete two,
and that's gone.

00:26:56.855 --> 00:26:59.060
So the key here is that you

00:26:59.060 --> 00:27:01.130
have successfully
implemented routing.

00:27:01.130 --> 00:27:02.360
Just like in now bar,

00:27:02.360 --> 00:27:05.060
we are now able to click
on each of these links and

00:27:05.060 --> 00:27:09.350
perform or go to a particular
route, a particular page.

00:27:09.350 --> 00:27:11.585
And it's much better
for the end-user.

00:27:11.585 --> 00:27:13.580
Instead of doing everything
from a single page,

00:27:13.580 --> 00:27:15.860
you can navigate through
the application and

00:27:15.860 --> 00:27:19.560
perform whatever
operations he wants.
