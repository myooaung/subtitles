WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
We will start this
course by learning

00:00:02.490 --> 00:00:05.295
what single-page
applications are,

00:00:05.295 --> 00:00:08.639
what AngularJS is, and why

00:00:08.639 --> 00:00:10.530
AngularJS is so popular

00:00:10.530 --> 00:00:13.515
in creating single-page
applications.

00:00:13.515 --> 00:00:16.200
It will then want to set up

00:00:16.200 --> 00:00:18.630
the Angular CLI and

00:00:18.630 --> 00:00:20.460
the Visual Studio Core
that will help you

00:00:20.460 --> 00:00:23.410
work on the hands-on lectures.

00:00:23.410 --> 00:00:28.280
Components are the heart of
every Angular application.

00:00:28.280 --> 00:00:31.835
We do all our coding
inside of the components.

00:00:31.835 --> 00:00:33.050
So you're going to create

00:00:33.050 --> 00:00:34.895
your very first Angular project.

00:00:34.895 --> 00:00:37.085
Create your very
first component,

00:00:37.085 --> 00:00:40.100
and learn all the
important files and

00:00:40.100 --> 00:00:41.285
folders that make up

00:00:41.285 --> 00:00:43.650
a Angular project as
well as a component.

00:00:43.650 --> 00:00:46.580
In the process, you
will use input data

00:00:46.580 --> 00:00:51.140
binding and output
event binding as well.

00:00:51.140 --> 00:00:55.310
That abuse, which are
inbuilt into AngularJS will

00:00:55.310 --> 00:00:59.464
help us add dynamism
and logic to our UIs.

00:00:59.464 --> 00:01:02.345
You will use if, switch for

00:01:02.345 --> 00:01:06.090
style and several
other directors.

00:01:06.160 --> 00:01:09.319
Here we'll then move
on to master services

00:01:09.319 --> 00:01:10.670
which are key to

00:01:10.670 --> 00:01:15.409
fetch and post data from within
our Angular application.

00:01:15.409 --> 00:01:17.585
You will use multiple services

00:01:17.585 --> 00:01:20.180
within a single
component as well.

00:01:20.180 --> 00:01:22.400
We're going to accomplish
all that using

00:01:22.400 --> 00:01:24.065
several RESTful services or

00:01:24.065 --> 00:01:27.695
APIs that are available
over the internet.

00:01:27.695 --> 00:01:30.575
It will then create
your own RESTful API

00:01:30.575 --> 00:01:34.040
using Express JS and Node.js.

00:01:34.040 --> 00:01:38.210
Going to expose out
a RESTful API that

00:01:38.210 --> 00:01:42.500
will perform card operations
against a database table.

00:01:42.500 --> 00:01:45.875
You can then create
Angular client project

00:01:45.875 --> 00:01:49.400
that we'll use this RESTful
API to perform create,

00:01:49.400 --> 00:01:54.299
read, update, and delete
operations against the database.

00:01:54.790 --> 00:01:57.995
Will then move on
to master routing,

00:01:57.995 --> 00:02:00.350
which will help the
end users to navigate

00:02:00.350 --> 00:02:03.005
from one part of the
application to another.

00:02:03.005 --> 00:02:05.630
Use pipes to format data on

00:02:05.630 --> 00:02:09.890
our UIs allows the end-user
to submit data through forms,

00:02:09.890 --> 00:02:13.340
both reactive and
model-driven forms.

00:02:13.340 --> 00:02:18.755
And it will create your own
custom directives as well.

00:02:18.755 --> 00:02:20.870
Last but not the least,

00:02:20.870 --> 00:02:22.550
they will put everything
that you have

00:02:22.550 --> 00:02:24.935
learned from the
course into action

00:02:24.935 --> 00:02:27.725
by working on a flight
reservation and

00:02:27.725 --> 00:02:29.360
chicken use case where it will

00:02:29.360 --> 00:02:31.370
be creating multiple projects,

00:02:31.370 --> 00:02:35.599
starting with a Java
back-end RESTful API.

00:02:35.599 --> 00:02:38.690
You will expose a RESTful API

00:02:38.690 --> 00:02:41.765
that will be done
using Java and Spring.

00:02:41.765 --> 00:02:44.810
And it will then create
two Angular applications,

00:02:44.810 --> 00:02:46.685
namely the flight reservation

00:02:46.685 --> 00:02:48.980
app and the flight chicken app,

00:02:48.980 --> 00:02:51.725
which act as microservices.

00:02:51.725 --> 00:02:53.780
The flight reservation
app will consume

00:02:53.780 --> 00:02:55.985
the same Java
back-end RESTful API.

00:02:55.985 --> 00:02:59.030
And the flight chicken app
will allow the passenger

00:02:59.030 --> 00:03:02.090
to check into the flight
whenever that time comes.

00:03:02.090 --> 00:03:06.090
And that will use the
Java back-end as well.
