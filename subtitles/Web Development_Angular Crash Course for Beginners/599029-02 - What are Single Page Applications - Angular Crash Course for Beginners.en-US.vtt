WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.770
In this lecture, you will learn

00:00:01.770 --> 00:00:04.920
what single-page
applications are.

00:00:04.920 --> 00:00:09.525
Single-page applications,
or SPAs, as they're called,

00:00:09.525 --> 00:00:14.655
are web applications that run
entirely in a web browser.

00:00:14.655 --> 00:00:18.465
And they do not need
any page reloads.

00:00:18.465 --> 00:00:21.705
In traditional web applications
when a user is using

00:00:21.705 --> 00:00:24.645
our web application and he
clicks on a button or a link,

00:00:24.645 --> 00:00:26.955
than a request will be
sent to the server.

00:00:26.955 --> 00:00:29.790
And the server side
code is responsible for

00:00:29.790 --> 00:00:33.390
generating a brand new
UI or a HTML page,

00:00:33.390 --> 00:00:35.325
which will be sent
back to the browser,

00:00:35.325 --> 00:00:38.095
which will result
in a page refresh.

00:00:38.095 --> 00:00:40.640
In single page applications,

00:00:40.640 --> 00:00:43.280
the page is loaded only once,

00:00:43.280 --> 00:00:46.220
initially when the user
accesses the web application.

00:00:46.220 --> 00:00:49.444
That is why the name is
single-page applications.

00:00:49.444 --> 00:00:51.125
And from that point in time,

00:00:51.125 --> 00:00:53.914
every time the user
interacts with our webpage,

00:00:53.914 --> 00:00:56.270
a request will be
sent to the backend.

00:00:56.270 --> 00:00:58.520
But the backend is
responsible only for

00:00:58.520 --> 00:01:01.445
sending the appropriate
data for that request.

00:01:01.445 --> 00:01:05.570
And the front end will
dynamically update

00:01:05.570 --> 00:01:10.205
the HTML DOM without refreshing
the entire web page.

00:01:10.205 --> 00:01:12.800
That is a single-page
application,

00:01:12.800 --> 00:01:16.250
it provides a great
user experience.

00:01:16.250 --> 00:01:19.010
You're going to create the
flight reservation application

00:01:19.010 --> 00:01:20.330
later in the course.

00:01:20.330 --> 00:01:22.010
This is a single-page
application

00:01:22.010 --> 00:01:24.365
you built using Angular.

00:01:24.365 --> 00:01:26.570
You will enter the from city to

00:01:26.570 --> 00:01:28.880
city and then the
departure date.

00:01:28.880 --> 00:01:31.970
Click on the Search button
to search for flights.

00:01:31.970 --> 00:01:34.010
The entire page will
not be refreshed,

00:01:34.010 --> 00:01:36.860
but only this portion of

00:01:36.860 --> 00:01:40.415
the HTML page will be
generated dynamically.

00:01:40.415 --> 00:01:42.440
If you select a flight, you will

00:01:42.440 --> 00:01:44.510
go to the next screen again.

00:01:44.510 --> 00:01:46.490
So once the user visits

00:01:46.490 --> 00:01:49.025
the very first page
in our application,

00:01:49.025 --> 00:01:51.305
from that point, we will,

00:01:51.305 --> 00:01:53.000
as he browses through
our application,

00:01:53.000 --> 00:01:56.480
that content will be loaded
dynamically using JavaScript.

00:01:56.480 --> 00:02:00.050
We're going to generate
the HTML DOM dynamically,

00:02:00.050 --> 00:02:02.659
that is, single-page
application.

00:02:02.659 --> 00:02:05.600
There are several advantages
of single-page applications.

00:02:05.600 --> 00:02:08.795
The first one, it provides
a great user experience.

00:02:08.795 --> 00:02:10.385
The end-user thinks that

00:02:10.385 --> 00:02:12.830
he's accessing the
entire application.

00:02:12.830 --> 00:02:14.030
The entire application is

00:02:14.030 --> 00:02:15.710
running on his own
mission that is

00:02:15.710 --> 00:02:19.070
the field that it
gives to the end user.

00:02:19.070 --> 00:02:21.020
It is very fast because once

00:02:21.020 --> 00:02:23.675
the data is loaded
onto the web browser,

00:02:23.675 --> 00:02:26.165
we need not fetch the
data again and again.

00:02:26.165 --> 00:02:28.700
We can just use
that data and build

00:02:28.700 --> 00:02:32.465
the screens dynamically only
in case the data is updated,

00:02:32.465 --> 00:02:34.010
the data has to be created.

00:02:34.010 --> 00:02:35.990
We go to the backend, otherwise,

00:02:35.990 --> 00:02:38.885
we have all the data
on the browser.

00:02:38.885 --> 00:02:41.600
Third, it's very easy to develop

00:02:41.600 --> 00:02:43.370
single-page applications
because we can

00:02:43.370 --> 00:02:45.560
separate out the back-end
and the front-end.

00:02:45.560 --> 00:02:47.735
And also we can use
the same backend

00:02:47.735 --> 00:02:49.460
against multiple front-ends.

00:02:49.460 --> 00:02:50.600
That is, we can use

00:02:50.600 --> 00:02:54.785
the same backend APIs
for our web application,

00:02:54.785 --> 00:02:57.410
as well as a mobile application.

00:02:57.410 --> 00:02:59.615
Single-page
applications can work

00:02:59.615 --> 00:03:02.330
offline ones all the
data is fetched.

00:03:02.330 --> 00:03:05.570
We can go offline and the user
can use our application in

00:03:05.570 --> 00:03:06.920
the web browser only when

00:03:06.920 --> 00:03:09.020
the creates or updates
needs to happen,

00:03:09.020 --> 00:03:10.580
then he can connect and send

00:03:10.580 --> 00:03:13.070
the data back to the backend.

00:03:13.070 --> 00:03:15.155
Of course, with great power

00:03:15.155 --> 00:03:17.450
comes some
disadvantages as well.

00:03:17.450 --> 00:03:19.805
Single-page applications
are less secure

00:03:19.805 --> 00:03:22.130
and there are chances
for memory leaks.

00:03:22.130 --> 00:03:25.190
We have to handle JavaScript
memory leaks carefully,

00:03:25.190 --> 00:03:27.740
less secure because for

00:03:27.740 --> 00:03:29.495
single-page applications to work

00:03:29.495 --> 00:03:30.740
to connect to the backend,

00:03:30.740 --> 00:03:33.950
we need to enable
cross-site scripting,

00:03:33.950 --> 00:03:36.754
which will enable
attackers to inject

00:03:36.754 --> 00:03:39.980
client-side scripts that can
crash our web application.

00:03:39.980 --> 00:03:42.230
So we have to handle
those with care.

00:03:42.230 --> 00:03:45.260
And since everything
happens in the web browser,

00:03:45.260 --> 00:03:48.274
we have to handle the JavaScript
memory leaks carefully,

00:03:48.274 --> 00:03:50.900
which otherwise will slow
down the application

00:03:50.900 --> 00:03:54.695
and provide a bad
user experience.

00:03:54.695 --> 00:03:57.065
Single-page
applications are those

00:03:57.065 --> 00:04:00.350
which lowered onto the
web browser just once,

00:04:00.350 --> 00:04:02.555
once the user accesses
the very first page.

00:04:02.555 --> 00:04:04.715
From that point in time.

00:04:04.715 --> 00:04:06.440
As the data is required,

00:04:06.440 --> 00:04:09.260
it will be fetched and
the HTML DOM will be

00:04:09.260 --> 00:04:13.530
updated without a page refresh.
