WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.310 --> 00:00:05.579
A component is a key
feature of Angular,

00:00:05.579 --> 00:00:10.604
using which we will create
our own HTML like elements.

00:00:10.604 --> 00:00:13.350
Example now bar, my menu footer.

00:00:13.350 --> 00:00:16.650
These are all
custom HTML tags or

00:00:16.650 --> 00:00:21.750
custom elements which have
their own look and behavior.

00:00:21.750 --> 00:00:23.459
And we create these using

00:00:23.459 --> 00:00:27.915
existing HTML elements
like do, H1, etc.

00:00:27.915 --> 00:00:30.434
And we structure and organize

00:00:30.434 --> 00:00:32.399
Angular application as a bunch

00:00:32.399 --> 00:00:36.584
of components that we'll
use each other as required.

00:00:36.584 --> 00:00:40.094
E.g. launch your web
browser and go to

00:00:40.094 --> 00:00:43.760
ebay.com or any other website.

00:00:43.760 --> 00:00:46.579
And you will see that this
website is divided into

00:00:46.579 --> 00:00:51.064
multiple components,
e.g. right here.

00:00:51.064 --> 00:00:52.910
This is a header block or

00:00:52.910 --> 00:00:55.489
component where you see

00:00:55.489 --> 00:00:57.785
sign-in register daily
deals and so on.

00:00:57.785 --> 00:00:59.930
Then this is the search
component right here.

00:00:59.930 --> 00:01:01.789
You can search for a product.

00:01:01.789 --> 00:01:05.840
So this UI here can be rendered
by a header component,

00:01:05.840 --> 00:01:07.954
this part by a search component,

00:01:07.954 --> 00:01:10.895
and this menu or navigation.

00:01:10.895 --> 00:01:12.710
Now bar can be rendered by

00:01:12.710 --> 00:01:15.650
another component
and this carousel

00:01:15.650 --> 00:01:18.695
by another component and so on.

00:01:18.695 --> 00:01:21.469
Ai application, especially
built-in Angular,

00:01:21.469 --> 00:01:24.829
is a combination of multiple
components that can

00:01:24.829 --> 00:01:29.509
talk to each other or use
each other as required.

00:01:29.509 --> 00:01:32.840
Creating a component
is super easy.

00:01:32.840 --> 00:01:34.789
You create a class,

00:01:34.789 --> 00:01:36.709
a TypeScript class
to start with,

00:01:36.709 --> 00:01:38.645
which is our modal class.

00:01:38.645 --> 00:01:40.895
Then you mark that model class

00:01:40.895 --> 00:01:44.795
with a Component annotation.

00:01:44.795 --> 00:01:47.779
Within this Add
Component annotation,

00:01:47.779 --> 00:01:48.830
there are two attributes.

00:01:48.830 --> 00:01:51.979
The first attribute is
the selector attribute,

00:01:51.979 --> 00:01:56.840
using which we will give a
name for our custom HTML.

00:01:56.840 --> 00:01:58.909
Once you give this
name, now you can use

00:01:58.909 --> 00:02:01.039
this my iPhone component in

00:02:01.039 --> 00:02:04.910
any HTML page in
our application.

00:02:04.910 --> 00:02:08.330
The next is the template URL.

00:02:08.330 --> 00:02:11.060
This is the HTML that is

00:02:11.060 --> 00:02:14.989
responsible for rendering
the UI for this component.

00:02:14.989 --> 00:02:16.580
So the model class here,

00:02:16.580 --> 00:02:19.639
the y component will have
all the data and the logic,

00:02:19.639 --> 00:02:23.929
and the HTML is responsible
for rendering the UI.

00:02:23.929 --> 00:02:26.570
You can think of a component as

00:02:26.570 --> 00:02:28.940
a combination of
this class here,

00:02:28.940 --> 00:02:31.294
which is the model which
represents the data.

00:02:31.294 --> 00:02:33.094
And it can also
make backend calls,

00:02:33.094 --> 00:02:34.699
etc, through services.

00:02:34.699 --> 00:02:36.785
And this HTML page,

00:02:36.785 --> 00:02:38.405
which is responsible for

00:02:38.405 --> 00:02:41.359
rendering the UI
to the end-user.

00:02:41.359 --> 00:02:44.900
So remember, a component is
a key feature of Angular,

00:02:44.900 --> 00:02:47.150
which is a combination
of two important things,

00:02:47.150 --> 00:02:49.670
the model and the view,

00:02:49.670 --> 00:02:51.904
or that data and the logic,

00:02:51.904 --> 00:02:53.344
and then the HTML.

00:02:53.344 --> 00:02:57.980
And we organize our
angular applications as

00:02:57.980 --> 00:03:00.260
a bunch of components
which are nothing

00:03:00.260 --> 00:03:04.319
but custom HTML elements.

00:03:05.080 --> 00:03:07.639
In this lecture, you will create

00:03:07.639 --> 00:03:09.484
your first Angular project

00:03:09.484 --> 00:03:12.455
using the Angular
CLI and run it.

00:03:12.455 --> 00:03:16.159
To do that, go to the angular
folder on your machine.

00:03:16.159 --> 00:03:19.219
If you don't have one created
anywhere on your machine,

00:03:19.219 --> 00:03:21.020
grab the path to it by

00:03:21.020 --> 00:03:23.344
going to your Windows
Explorer or on Mac,

00:03:23.344 --> 00:03:25.744
you can right-click,
go to get info.

00:03:25.744 --> 00:03:28.595
Grab the path, copy it,

00:03:28.595 --> 00:03:30.304
go to the command line,

00:03:30.304 --> 00:03:33.679
CD, paste the path,

00:03:33.679 --> 00:03:36.904
and you should be under angular.

00:03:36.904 --> 00:03:38.734
Once you are in there,

00:03:38.734 --> 00:03:41.180
use the Angular CLI
command to create

00:03:41.180 --> 00:03:44.959
a project and G new space,

00:03:44.959 --> 00:03:46.069
the name of the project,

00:03:46.069 --> 00:03:48.590
call it angular basics.

00:03:48.590 --> 00:03:51.514
And G new Angular basics.

00:03:51.514 --> 00:03:52.774
Hit Enter.

00:03:52.774 --> 00:03:55.999
And that will pull all
the required libraries.

00:03:55.999 --> 00:03:57.950
It will create all
the folders and

00:03:57.950 --> 00:04:00.679
files that are required
for Angular project.

00:04:00.679 --> 00:04:02.570
While it does that, launch

00:04:02.570 --> 00:04:07.760
your web browser and
search for Angular CLI.

00:04:07.760 --> 00:04:11.069
Click on the very first link.

00:04:11.860 --> 00:04:14.030
And that will open
up the Angular

00:04:14.030 --> 00:04:16.190
CLI documentation for us.

00:04:16.190 --> 00:04:18.274
The first command
that you have used

00:04:18.274 --> 00:04:20.465
is MG knew that creates

00:04:20.465 --> 00:04:24.275
Angular project with all
the required folders

00:04:24.275 --> 00:04:25.594
and files in them.

00:04:25.594 --> 00:04:28.775
And it follows all the
best practices for us.

00:04:28.775 --> 00:04:30.515
The next command which will,

00:04:30.515 --> 00:04:32.914
which will be using a lot
throughout the course,

00:04:32.914 --> 00:04:35.105
is the NG generate command,

00:04:35.105 --> 00:04:38.045
using which we can create
components, services,

00:04:38.045 --> 00:04:41.824
routes, and even pipes
in Angular application.

00:04:41.824 --> 00:04:43.864
So instead of wheat coding,

00:04:43.864 --> 00:04:47.314
each and every component
and service from scratch,

00:04:47.314 --> 00:04:49.370
we can use these
commands and get

00:04:49.370 --> 00:04:51.140
the boilerplate code and we

00:04:51.140 --> 00:04:53.539
can customize them
from that point.

00:04:53.539 --> 00:04:55.234
Last but not the least,

00:04:55.234 --> 00:04:57.530
energy so is the command using

00:04:57.530 --> 00:05:00.020
which we can run
our application on

00:05:00.020 --> 00:05:02.540
a local server and
we can test it from

00:05:02.540 --> 00:05:05.855
the web browser or
project is created.

00:05:05.855 --> 00:05:08.569
If you go to the
Windows Explorer

00:05:08.569 --> 00:05:10.609
or Finder under the
angular folder,

00:05:10.609 --> 00:05:13.865
you will find a
angular Basics folder.

00:05:13.865 --> 00:05:17.570
Open it up and you will
see a lot of folders and

00:05:17.570 --> 00:05:22.504
files which make up Angular
project. Let's run it.

00:05:22.504 --> 00:05:27.920
Go to the command line
and G serve space.

00:05:27.920 --> 00:05:31.384
It's not servers serve hyphen 0.

00:05:31.384 --> 00:05:35.704
But to run this, you
should be in the project.

00:05:35.704 --> 00:05:40.770
Cd, angular basics
is the folder.

00:05:40.840 --> 00:05:43.849
Make sure you are
in that project.

00:05:43.849 --> 00:05:49.564
Then it will run
n g, So hyphen 0.

00:05:49.564 --> 00:05:52.025
So this will run the
application and it will

00:05:52.025 --> 00:05:55.040
even launch the application
in the web browser.

00:05:55.040 --> 00:05:56.900
We can access the
application running

00:05:56.900 --> 00:05:59.390
on the server from
our web browser.

00:05:59.390 --> 00:06:01.744
Hit Enter.

00:06:01.744 --> 00:06:04.895
That will build the
application first.

00:06:04.895 --> 00:06:08.610
It's building the
application. Currently.

00:06:08.620 --> 00:06:12.170
Once that completes, it will

00:06:12.170 --> 00:06:14.950
run it on local
host for two zeros.

00:06:14.950 --> 00:06:17.164
Zero, that's the port
Angular application users.

00:06:17.164 --> 00:06:18.169
And there you go.

00:06:18.169 --> 00:06:19.759
So you have successfully created

00:06:19.759 --> 00:06:22.249
our first application
which is running here.

00:06:22.249 --> 00:06:23.810
And it has even launched

00:06:23.810 --> 00:06:26.840
a web browser window
local host for two zeros.

00:06:26.840 --> 00:06:31.625
Zero will take us to the
application. Scroll down.

00:06:31.625 --> 00:06:33.319
It has some useful
links which will take

00:06:33.319 --> 00:06:35.299
you to the angular
documentation.

00:06:35.299 --> 00:06:37.099
In the next lecture,
I will explain

00:06:37.099 --> 00:06:40.200
where all this is coming from.

00:06:41.290 --> 00:06:43.640
In this lecture, I will walk you

00:06:43.640 --> 00:06:45.110
through the important files

00:06:45.110 --> 00:06:48.440
and folders that make up
our angular application.

00:06:48.440 --> 00:06:50.840
We'll be exploring a
lot more of them in

00:06:50.840 --> 00:06:53.314
the future sections
and lectures.

00:06:53.314 --> 00:06:56.435
So go to the folder
where you have

00:06:56.435 --> 00:06:57.995
your Angular project launch

00:06:57.995 --> 00:07:00.739
Visual Studio Code,
which is our IDE.

00:07:00.739 --> 00:07:03.574
Once it opens up,
grab this folder,

00:07:03.574 --> 00:07:06.094
and drop it onto
Visual Studio code.

00:07:06.094 --> 00:07:09.019
That will open it
in the Explorer.

00:07:09.019 --> 00:07:11.945
If potent folder where
we'll be spending

00:07:11.945 --> 00:07:14.524
most of our time is
the source folder.

00:07:14.524 --> 00:07:17.900
We'll all our application
source code loose.

00:07:17.900 --> 00:07:19.774
Let's start there.

00:07:19.774 --> 00:07:22.549
Then you will have access
to this application using

00:07:22.549 --> 00:07:26.284
the web browser
localhost colon 4200.

00:07:26.284 --> 00:07:27.709
The default page of

00:07:27.709 --> 00:07:29.929
this application will
be sold for you,

00:07:29.929 --> 00:07:32.389
which is the index.html,

00:07:32.389 --> 00:07:36.334
which leaves here right under
the liver source folder.

00:07:36.334 --> 00:07:37.669
Open it up.

00:07:37.669 --> 00:07:41.059
It has all the regular HTML
elements with a title.

00:07:41.059 --> 00:07:47.690
Within the body, you see app
hyphen root HTML element,

00:07:47.690 --> 00:07:50.869
but it is a angular
component that got

00:07:50.869 --> 00:07:54.649
generated automatically when
we created our application.

00:07:54.649 --> 00:07:56.255
Go to the app folder,

00:07:56.255 --> 00:07:57.859
which is another
important folder

00:07:57.859 --> 00:08:00.034
where it will be
spending a lot of time.

00:08:00.034 --> 00:08:05.119
Under SRC app, you see this
app dot component dot CSS,

00:08:05.119 --> 00:08:09.155
app dot component dot
HTML, spec and Ts.

00:08:09.155 --> 00:08:13.145
These four files and
also this app module.js.

00:08:13.145 --> 00:08:16.849
All these got generated when
we created our project.

00:08:16.849 --> 00:08:19.460
This is a default component.

00:08:19.460 --> 00:08:23.389
If you open the app
component dot ds.

00:08:23.389 --> 00:08:27.875
This is a TypeScript file
with all the coordinate.

00:08:27.875 --> 00:08:30.320
It has a class using

00:08:30.320 --> 00:08:33.335
which any object of this
component can be created.

00:08:33.335 --> 00:08:35.600
It has a property called title,

00:08:35.600 --> 00:08:38.209
and it is initialized to app.

00:08:38.209 --> 00:08:41.359
The app that you see
here, if you scroll up,

00:08:41.359 --> 00:08:45.770
welcome to AP, that's
coming from right here.

00:08:45.770 --> 00:08:47.330
So this is a component that is

00:08:47.330 --> 00:08:49.010
how you will create a competent.

00:08:49.010 --> 00:08:50.899
Every component
will be marked with

00:08:50.899 --> 00:08:54.920
the component decorator
or annotation.

00:08:54.920 --> 00:08:57.934
And it will import that
component decorator

00:08:57.934 --> 00:09:01.310
from the Angular core module.

00:09:01.310 --> 00:09:03.724
So this import statement
is doing that.

00:09:03.724 --> 00:09:05.600
Once you do that,
you can use it and

00:09:05.600 --> 00:09:08.660
that component has
several properties on it,

00:09:08.660 --> 00:09:10.249
which we represent using

00:09:10.249 --> 00:09:12.890
this object notation,
the curly braces.

00:09:12.890 --> 00:09:15.484
And the properties are Selector,

00:09:15.484 --> 00:09:19.624
template, URL and style URLs.

00:09:19.624 --> 00:09:22.235
The selector is where we specify

00:09:22.235 --> 00:09:26.509
a name or when this
component should be used,

00:09:26.509 --> 00:09:28.595
or when this component
should be executed.

00:09:28.595 --> 00:09:29.900
So this approach is

00:09:29.900 --> 00:09:33.410
the HTML element that we
should use in the HTML's.

00:09:33.410 --> 00:09:35.675
That is exactly
what we do in the

00:09:35.675 --> 00:09:38.780
index.html when we use uproot,

00:09:38.780 --> 00:09:42.259
angular knows that
any component that is

00:09:42.259 --> 00:09:46.775
marked with this app route
selector should be executed.

00:09:46.775 --> 00:09:48.740
We have a user that
selector here,

00:09:48.740 --> 00:09:50.510
that is the mapping
that is happening.

00:09:50.510 --> 00:09:51.530
Don't worry about it.

00:09:51.530 --> 00:09:54.425
We're going to create a
component from scratch.

00:09:54.425 --> 00:09:57.770
We are going to use all
these selectors and

00:09:57.770 --> 00:09:59.720
template URLs in the
next few lectures

00:09:59.720 --> 00:10:02.164
if you don't get it completely,
but it's very simple.

00:10:02.164 --> 00:10:05.000
You use the selector
and map it to

00:10:05.000 --> 00:10:08.405
an element that can be used
anywhere in your HTML.

00:10:08.405 --> 00:10:12.139
The template URL
points to a HTML page.

00:10:12.139 --> 00:10:14.570
So every component has
a TypeScript file,

00:10:14.570 --> 00:10:18.845
it has a CSS, and it
is also having a HTML.

00:10:18.845 --> 00:10:21.785
So all this, this entire page

00:10:21.785 --> 00:10:25.640
you see is coming
from this HTML page.

00:10:25.640 --> 00:10:30.715
Welcome to that you see
up top is right here.

00:10:30.715 --> 00:10:32.664
And this title.

00:10:32.664 --> 00:10:34.749
Before this title, we use

00:10:34.749 --> 00:10:37.059
the string
interpolation syntax to

00:10:37.059 --> 00:10:39.340
flower brackets will get

00:10:39.340 --> 00:10:41.574
the value of that
string or property,

00:10:41.574 --> 00:10:44.154
and it will display
that on the browser.

00:10:44.154 --> 00:10:46.569
And it will end with two
flower brackets as well.

00:10:46.569 --> 00:10:48.760
This title is a property on

00:10:48.760 --> 00:10:52.180
the class inside our component.

00:10:52.180 --> 00:10:55.315
A component is a
combination of all these.

00:10:55.315 --> 00:10:57.819
Angular will execute
all of these together.

00:10:57.819 --> 00:10:59.080
It will bundle them together

00:10:59.080 --> 00:11:00.550
and it will use them together.

00:11:00.550 --> 00:11:04.195
It will render a UI using
everything for a component.

00:11:04.195 --> 00:11:07.570
That is the reason
this HTML can directly

00:11:07.570 --> 00:11:09.460
access whatever is there in

00:11:09.460 --> 00:11:11.640
this particular component here.

00:11:11.640 --> 00:11:13.520
That is what you
see up top here.

00:11:13.520 --> 00:11:16.399
The rest of it is
all static content,

00:11:16.399 --> 00:11:18.680
all dues and links.

00:11:18.680 --> 00:11:21.244
If you scroll it down, target.

00:11:21.244 --> 00:11:24.470
And then it has links to
the angular websites.

00:11:24.470 --> 00:11:25.519
When you click on those links,

00:11:25.519 --> 00:11:28.565
it will simply open
up those links.

00:11:28.565 --> 00:11:30.619
Before we end it.

00:11:30.619 --> 00:11:33.589
One important file which is
outside the source itself,

00:11:33.589 --> 00:11:36.365
which is directly
under the project,

00:11:36.365 --> 00:11:39.679
is package.json will not

00:11:39.679 --> 00:11:42.514
be directly touching and
modifying this file.

00:11:42.514 --> 00:11:44.419
But for your knowledge,

00:11:44.419 --> 00:11:47.240
this file is where
all the dependencies,

00:11:47.240 --> 00:11:49.940
all the angular libraries
are listed here.

00:11:49.940 --> 00:11:53.660
These are all used by our
project or any Angular project.

00:11:53.660 --> 00:11:56.885
You can see that the
version is 6.0 dot three.

00:11:56.885 --> 00:11:58.010
In the future, if you use

00:11:58.010 --> 00:12:00.454
a different version to
create your projects,

00:12:00.454 --> 00:12:02.674
you will see that version here.

00:12:02.674 --> 00:12:05.869
So package.json is
another important file

00:12:05.869 --> 00:12:08.885
where all the libraries for
our project are listed.

00:12:08.885 --> 00:12:10.445
In this lecture.

00:12:10.445 --> 00:12:12.740
I've opened up the
Angular project

00:12:12.740 --> 00:12:14.824
that you have created
in Visual Studio Code.

00:12:14.824 --> 00:12:16.310
And you have seen that

00:12:16.310 --> 00:12:20.270
the app folder under the
SRC is the main folder.

00:12:20.270 --> 00:12:22.669
And we have walked
through the component.

00:12:22.669 --> 00:12:26.044
We have left the
app dot module.js,

00:12:26.044 --> 00:12:27.290
which is another important

00:12:27.290 --> 00:12:29.480
configuration file
for our project.

00:12:29.480 --> 00:12:31.684
I'll explain that when we create

00:12:31.684 --> 00:12:34.069
our own component in
the next lecture,

00:12:34.069 --> 00:12:37.219
this is where we glue
our component and

00:12:37.219 --> 00:12:38.959
all the modules
that are required

00:12:38.959 --> 00:12:41.700
for our project to work.

00:12:42.640 --> 00:12:44.689
In the previous lecture,

00:12:44.689 --> 00:12:47.810
when you have created your
first Angular project,

00:12:47.810 --> 00:12:50.630
you have seen that
the Angular CLI also

00:12:50.630 --> 00:12:54.800
created a default component
under the app folder.

00:12:54.800 --> 00:12:58.744
And a component is made
up of a TypeScript file,

00:12:58.744 --> 00:13:01.130
HTML file style sheet,

00:13:01.130 --> 00:13:02.900
and also spec file.

00:13:02.900 --> 00:13:06.110
So that's some combination
of all these four files.

00:13:06.110 --> 00:13:08.705
Whatever output comes
out of these four files,

00:13:08.705 --> 00:13:10.910
is what we see on the web Rosa

00:13:10.910 --> 00:13:14.119
here when we use that
component in our application.

00:13:14.119 --> 00:13:16.819
So this component was being

00:13:16.819 --> 00:13:19.894
referred to by
using the selector.

00:13:19.894 --> 00:13:21.560
So we have to refer to it as

00:13:21.560 --> 00:13:23.525
approved and we have done that.

00:13:23.525 --> 00:13:26.030
Or the Angular CLI by
default did it in the

00:13:26.030 --> 00:13:30.799
index.html by using an
element called app route.

00:13:30.799 --> 00:13:32.780
When this is used,
automatically,

00:13:32.780 --> 00:13:39.215
angular will ran all these
whatever output comes out,

00:13:39.215 --> 00:13:42.215
it will render it wherever
that component is used.

00:13:42.215 --> 00:13:43.670
That is what exactly happened.

00:13:43.670 --> 00:13:45.770
So the Ts will define
all the logic.

00:13:45.770 --> 00:13:48.320
Html knows how to
render the CSS.

00:13:48.320 --> 00:13:50.929
We'll add styling in this and

00:13:50.929 --> 00:13:53.764
the next few lectures when you
define your own component,

00:13:53.764 --> 00:13:56.884
you are going to follow
the same structure.

00:13:56.884 --> 00:13:59.390
So we can hand cord these files.

00:13:59.390 --> 00:14:02.089
We can create them
manually or we can use

00:14:02.089 --> 00:14:04.340
the Angular CLI and use

00:14:04.340 --> 00:14:07.969
the NG generate command to
generate the component.

00:14:07.969 --> 00:14:11.015
Go to the console wherever
we are running the server.

00:14:11.015 --> 00:14:16.669
You can stop it by hitting
Command C or Control C, N, G.

00:14:16.669 --> 00:14:21.305
Generate is the command space
component, space product.

00:14:21.305 --> 00:14:23.570
We are going to read and display

00:14:23.570 --> 00:14:26.944
the product details
using this component.

00:14:26.944 --> 00:14:28.535
There is a shortcut for this.

00:14:28.535 --> 00:14:30.590
Instead of using NG generate,

00:14:30.590 --> 00:14:34.295
you can simply use n, g, g.

00:14:34.295 --> 00:14:36.889
And for component,
you can use C.

00:14:36.889 --> 00:14:39.185
You will later on see that
when you create services,

00:14:39.185 --> 00:14:41.119
it'll be S instead of C.

00:14:41.119 --> 00:14:44.630
So N, G space, space, space,

00:14:44.630 --> 00:14:48.784
the component name, which
is product, hit Enter.

00:14:48.784 --> 00:14:54.484
And that will create product
dot component dot CSS, HTML,

00:14:54.484 --> 00:14:58.490
spec dot ts, and that
component dot PS,

00:14:58.490 --> 00:15:02.150
which will hold the logic for
us or any TypeScript code.

00:15:02.150 --> 00:15:05.870
And also the last statement
it says it has updated

00:15:05.870 --> 00:15:09.875
the configuration file
app dot module dot ds,

00:15:09.875 --> 00:15:12.590
which we haven't looked
at it in detail.

00:15:12.590 --> 00:15:15.380
If you open the app
dot module.js now,

00:15:15.380 --> 00:15:18.575
you will find the
product component.

00:15:18.575 --> 00:15:20.960
It has added an important also

00:15:20.960 --> 00:15:22.729
it has added it to
the Declaration's.

00:15:22.729 --> 00:15:25.655
We'll come back here and
I'll explain it in detail.

00:15:25.655 --> 00:15:27.755
But if you notice
under the app folder,

00:15:27.755 --> 00:15:31.310
there is a folder called
product that got generated.

00:15:31.310 --> 00:15:33.620
And it has all the four files,

00:15:33.620 --> 00:15:37.354
CSS, HTML, spec and
TypeScript file.

00:15:37.354 --> 00:15:44.659
Open the TypeScript file and
add some properties in here.

00:15:44.850 --> 00:15:48.685
Product id, colon number.

00:15:48.685 --> 00:15:51.025
We are providing the
TypeScript type here,

00:15:51.025 --> 00:15:53.035
name of the product colon,

00:15:53.035 --> 00:15:58.150
string, and price of the
product colon number again.

00:15:58.150 --> 00:15:59.755
And within the constructor,

00:15:59.755 --> 00:16:01.585
we can initialize
these properties.

00:16:01.585 --> 00:16:04.284
Id is equal to one.

00:16:04.284 --> 00:16:07.314
We can refer to this
using this dot.

00:16:07.314 --> 00:16:15.649
This dot name of the product
is equal to Mac Book Pro.

00:16:15.930 --> 00:16:23.450
This dot price is
equal to, say, $1,300.

00:16:24.730 --> 00:16:27.390
Save it.

00:16:27.670 --> 00:16:30.500
And we can define
getter methods to

00:16:30.500 --> 00:16:32.824
retrieve each of
these properties.

00:16:32.824 --> 00:16:35.360
Go ahead and define a method,

00:16:35.360 --> 00:16:39.499
get ID, colon number.

00:16:39.499 --> 00:16:41.540
This function should
return a number

00:16:41.540 --> 00:16:43.594
out at the return statement.

00:16:43.594 --> 00:16:46.759
It returns this dot id.

00:16:46.759 --> 00:16:50.150
Similarly, get name.

00:16:50.150 --> 00:16:52.310
Colon.

00:16:52.310 --> 00:16:56.040
String is the return type.

00:16:56.890 --> 00:17:01.564
Return this dot name.

00:17:01.564 --> 00:17:03.334
Last but not the least,

00:17:03.334 --> 00:17:07.219
also do the same for
price get price.

00:17:07.219 --> 00:17:08.569
Colon number.

00:17:08.569 --> 00:17:10.250
Again. Let me scroll it

00:17:10.250 --> 00:17:13.139
up so that you can
see it clearly.

00:17:16.750 --> 00:17:21.829
Return this dot price.

00:17:21.829 --> 00:17:24.440
So very simple
component which has

00:17:24.440 --> 00:17:26.630
defined three properties which

00:17:26.630 --> 00:17:28.520
we have initialized
in the constructor.

00:17:28.520 --> 00:17:30.380
And we're returning
those properties through

00:17:30.380 --> 00:17:34.279
these methods will come
to the NG on it later on,

00:17:34.279 --> 00:17:36.620
there's a method that
gets executed when

00:17:36.620 --> 00:17:39.334
the component is created
and initialized.

00:17:39.334 --> 00:17:42.635
We use it later on when we
create services, et cetera.

00:17:42.635 --> 00:17:44.555
Now we have a component.

00:17:44.555 --> 00:17:46.879
All the logic is defined here.

00:17:46.879 --> 00:17:52.729
We have to use this component
in the HTML and render it.

00:17:52.729 --> 00:17:55.204
If not, it will simply
display product works.

00:17:55.204 --> 00:17:57.755
Instead of that, let's
get rid off these.

00:17:57.755 --> 00:17:59.990
Use H1 or bold.

00:17:59.990 --> 00:18:02.279
It's up to you which one?

00:18:02.279 --> 00:18:07.270
Use the string interpolation
syntax to flower brackets

00:18:07.270 --> 00:18:12.400
to access get ID.

00:18:12.400 --> 00:18:13.989
But we need to define these as

00:18:13.989 --> 00:18:17.050
public methods so that they
will be available publicly.

00:18:17.050 --> 00:18:21.640
So public is an access
specifier in TypeScript.

00:18:21.640 --> 00:18:23.829
Use that go back here.

00:18:23.829 --> 00:18:27.039
Get ID is the first one.

00:18:27.039 --> 00:18:28.419
That's a function.

00:18:28.419 --> 00:18:30.265
So use the function syntax,

00:18:30.265 --> 00:18:33.910
copy that line based
at couple more times.

00:18:33.910 --> 00:18:39.234
Getname. And the last
one is get price.

00:18:39.234 --> 00:18:40.855
Save it.

00:18:40.855 --> 00:18:43.809
So in this lecture, you
have successfully created

00:18:43.809 --> 00:18:45.379
your component by going to

00:18:45.379 --> 00:18:47.509
the command line,
executing the N,

00:18:47.509 --> 00:18:50.135
G, G, C, the component name,

00:18:50.135 --> 00:18:52.189
which has generated
all the files

00:18:52.189 --> 00:18:54.290
required for angular component.

00:18:54.290 --> 00:18:58.040
And also it has included that
in the configuration file.

00:18:58.040 --> 00:19:01.639
The new component was added
to the app dot module.js,

00:19:01.639 --> 00:19:04.400
then updated the component logic

00:19:04.400 --> 00:19:06.320
simply to include
three properties.

00:19:06.320 --> 00:19:09.350
And we have user the
component methods to

00:19:09.350 --> 00:19:13.414
render the values of those
properties onto the HTML.

00:19:13.414 --> 00:19:15.710
We'll see it in action
in the next lecture,

00:19:15.710 --> 00:19:19.264
where I'll first explain
the app dot module.js,

00:19:19.264 --> 00:19:20.840
where we will bootstrap

00:19:20.840 --> 00:19:24.990
our component and
then we will run it.

00:19:25.930 --> 00:19:30.484
The basic building blocks
of Angular application,

00:19:30.484 --> 00:19:33.979
our NG modules, or
angular modules.

00:19:33.979 --> 00:19:36.079
Every Angular application has

00:19:36.079 --> 00:19:38.630
at least one root module that

00:19:38.630 --> 00:19:41.314
bootstraps all the
functional modules together.

00:19:41.314 --> 00:19:43.130
So the components,
the services are

00:19:43.130 --> 00:19:45.514
called functional NG modules.

00:19:45.514 --> 00:19:48.619
And the app module is
where we configure

00:19:48.619 --> 00:19:50.029
our Bootstrap all these

00:19:50.029 --> 00:19:53.120
together so we can
run our application.

00:19:53.120 --> 00:19:56.150
So NG module, the file defines

00:19:56.150 --> 00:19:59.180
a compilation
context for a set of

00:19:59.180 --> 00:20:01.684
components and services that

00:20:01.684 --> 00:20:06.110
address a particular
functionality in our application.

00:20:06.110 --> 00:20:08.869
E.g. if you are working on

00:20:08.869 --> 00:20:11.225
a flight reservation
Angular application,

00:20:11.225 --> 00:20:14.239
then you will have at
least one module called

00:20:14.239 --> 00:20:16.924
the app module that will tie up

00:20:16.924 --> 00:20:19.609
all the components
within that application.

00:20:19.609 --> 00:20:22.220
Find flights, display
flights, select Flights,

00:20:22.220 --> 00:20:25.025
complete reservation
are all the components.

00:20:25.025 --> 00:20:27.275
And there will be
one or more services

00:20:27.275 --> 00:20:30.035
which are required to
perform backend calls.

00:20:30.035 --> 00:20:31.429
So this app module,

00:20:31.429 --> 00:20:35.704
we'll tie all these components
and services together.

00:20:35.704 --> 00:20:37.805
And in turn, we can also use

00:20:37.805 --> 00:20:39.649
readily available
energy modules in

00:20:39.649 --> 00:20:42.605
Angular application
like router to perform

00:20:42.605 --> 00:20:45.740
routing or navigating his GTP to

00:20:45.740 --> 00:20:50.434
make external RESTful
client calls and so on.

00:20:50.434 --> 00:20:54.769
So these NG modules
will make our life to

00:20:54.769 --> 00:20:56.525
maintain our application very

00:20:56.525 --> 00:20:59.104
easy and they can
also be reused.

00:20:59.104 --> 00:21:01.580
Once we have one
particular module defined,

00:21:01.580 --> 00:21:03.680
we can use it in
other applications

00:21:03.680 --> 00:21:04.969
or within our application,

00:21:04.969 --> 00:21:08.000
we can use it in multiple
places by importing them.

00:21:08.000 --> 00:21:09.665
And as you can see later on,

00:21:09.665 --> 00:21:11.240
you will be importing router in

00:21:11.240 --> 00:21:12.920
multiple applications
you create.

00:21:12.920 --> 00:21:15.139
It will be importing HTTP also

00:21:15.139 --> 00:21:17.599
in multiple applications
that you create.

00:21:17.599 --> 00:21:20.720
So the advantages are easy
maintainability because we

00:21:20.720 --> 00:21:25.170
modularize our code
and then reusability.

00:21:26.590 --> 00:21:29.404
In this lecture,
we will bootstrap

00:21:29.404 --> 00:21:31.775
and run our custom component.

00:21:31.775 --> 00:21:33.709
To do that, you
need to understand

00:21:33.709 --> 00:21:36.950
the app dot module dot txt file.

00:21:36.950 --> 00:21:39.005
The app dot module.js,

00:21:39.005 --> 00:21:40.475
as I have said earlier,

00:21:40.475 --> 00:21:45.035
is a configuration file for
the entire application.

00:21:45.035 --> 00:21:48.170
Here you see a lot of imports

00:21:48.170 --> 00:21:52.115
followed by N G
module decorator.

00:21:52.115 --> 00:21:57.275
So the NG model is being
imported from angular core.

00:21:57.275 --> 00:22:01.429
And inside it we have an object
with multiple properties.

00:22:01.429 --> 00:22:03.454
Declaration's is one property,

00:22:03.454 --> 00:22:07.114
imports, providers
and Bootstrap.

00:22:07.114 --> 00:22:09.949
So there are four array
type properties here.

00:22:09.949 --> 00:22:13.234
All of these are JSON arrays.

00:22:13.234 --> 00:22:15.290
Declaration's is where we

00:22:15.290 --> 00:22:18.365
put all the components
in our application.

00:22:18.365 --> 00:22:21.829
We have the app component that
was generated by default,

00:22:21.829 --> 00:22:23.630
and then the product
component that

00:22:23.630 --> 00:22:25.550
was defined by S. So we need to

00:22:25.550 --> 00:22:27.229
declare all the components using

00:22:27.229 --> 00:22:29.975
the declarations
blocked the inputs.

00:22:29.975 --> 00:22:32.659
We'll import the
external modules

00:22:32.659 --> 00:22:35.135
that are required for
our application to work.

00:22:35.135 --> 00:22:37.969
Almost all the angular
applications need

00:22:37.969 --> 00:22:39.620
the browser module for

00:22:39.620 --> 00:22:42.140
our application to be
rendered in the web browser.

00:22:42.140 --> 00:22:44.630
So it has all the
browsers support that is

00:22:44.630 --> 00:22:47.585
required for our applications
to run in the browser.

00:22:47.585 --> 00:22:50.195
We import the
browser module from

00:22:50.195 --> 00:22:52.760
Angular platform browser that

00:22:52.760 --> 00:22:55.295
was already included for us.

00:22:55.295 --> 00:22:58.460
The provider section, I
will talk about it later.

00:22:58.460 --> 00:22:59.825
But if you point on it,

00:22:59.825 --> 00:23:03.245
you can see that defines
the set off injectable

00:23:03.245 --> 00:23:04.849
objects that are available in

00:23:04.849 --> 00:23:06.950
the injector of this module.

00:23:06.950 --> 00:23:09.260
As I said, we'll come
back to that later.

00:23:09.260 --> 00:23:13.250
Last and very important
one, Bootstrap.

00:23:13.250 --> 00:23:15.575
Bootstrap is where we mentioned,

00:23:15.575 --> 00:23:18.725
which is the starting
point of our application.

00:23:18.725 --> 00:23:21.589
So when Angular
application boots up,

00:23:21.589 --> 00:23:23.840
it will use this component as

00:23:23.840 --> 00:23:25.879
the very first component
that will render

00:23:25.879 --> 00:23:28.475
the UI from that point.

00:23:28.475 --> 00:23:30.349
Whichever other
components are used

00:23:30.349 --> 00:23:32.179
within this component will

00:23:32.179 --> 00:23:36.620
be used to render the UI
and that three goes on.

00:23:36.620 --> 00:23:38.269
So right now the app component

00:23:38.269 --> 00:23:40.129
that got generated by default is

00:23:40.129 --> 00:23:41.810
the component that is being used

00:23:41.810 --> 00:23:44.660
to bootstrap our application.

00:23:44.660 --> 00:23:48.215
So now if you want to
use the new model,

00:23:48.215 --> 00:23:50.674
the product module
which we have defined,

00:23:50.674 --> 00:23:54.574
the selector for
it is app product.

00:23:54.574 --> 00:23:56.629
So you can grab that.

00:23:56.629 --> 00:24:01.445
Go to the App
component dot HTML,

00:24:01.445 --> 00:24:04.069
which is rendering
this entire UI.

00:24:04.069 --> 00:24:07.175
Control a, get rid
off everything.

00:24:07.175 --> 00:24:08.990
Use it, do tag.

00:24:08.990 --> 00:24:12.755
And within that do define

00:24:12.755 --> 00:24:17.209
our new component or

00:24:17.209 --> 00:24:21.259
use our new component
which is app product.

00:24:21.259 --> 00:24:23.224
Save it.

00:24:23.224 --> 00:24:26.555
And we're ready to
run our application.

00:24:26.555 --> 00:24:32.135
Go to the command
line N G, hyphen 0.

00:24:32.135 --> 00:24:34.040
Hit Enter.

00:24:34.040 --> 00:24:37.504
Wait for it to launch,

00:24:37.504 --> 00:24:41.639
and open up in a web browser.

00:24:43.900 --> 00:24:47.434
In the meantime, you can
go back and review the

00:24:47.434 --> 00:24:49.940
module.js where everything is

00:24:49.940 --> 00:24:52.490
configured and the key
elements inside it.

00:24:52.490 --> 00:24:56.600
As it builds, depending
on your Internet speed.

00:24:56.600 --> 00:25:00.120
It can be a little slow.

00:25:00.250 --> 00:25:03.784
Again, in this app
dot module.js,

00:25:03.784 --> 00:25:05.764
we have the NG module,

00:25:05.764 --> 00:25:08.179
which will bundle everything

00:25:08.179 --> 00:25:10.790
for our application together
in the declarations,

00:25:10.790 --> 00:25:12.724
we have the components,
in the imports,

00:25:12.724 --> 00:25:15.545
we have the modules that we're
using in our application.

00:25:15.545 --> 00:25:17.510
We'll come back to
provide us later.

00:25:17.510 --> 00:25:20.149
The bootstrap tells what is

00:25:20.149 --> 00:25:22.039
the first component
that should be used

00:25:22.039 --> 00:25:24.890
when the application starts up.

00:25:24.890 --> 00:25:26.719
There you go.

00:25:26.719 --> 00:25:29.434
You have created your very
first custom component

00:25:29.434 --> 00:25:31.099
and you have seen the output.

00:25:31.099 --> 00:25:33.589
This output here is coming from

00:25:33.589 --> 00:25:37.099
the sum total of the
custom component,

00:25:37.099 --> 00:25:40.249
which is the product component
that we have created.

00:25:40.249 --> 00:25:42.109
In here.

00:25:42.109 --> 00:25:46.070
Always a component declaration
starts with Ed component,

00:25:46.070 --> 00:25:48.140
within which we have a selector,

00:25:48.140 --> 00:25:49.790
a template URL that

00:25:49.790 --> 00:25:52.070
points to the
corresponding HTML page,

00:25:52.070 --> 00:25:55.100
style URLs that
points to the CSS.

00:25:55.100 --> 00:25:57.900
Within this HTML page.

00:25:58.120 --> 00:26:01.159
We have used.

00:26:01.159 --> 00:26:03.919
The three properties are
the three methods that are

00:26:03.919 --> 00:26:06.605
available in the
TypeScript file.

00:26:06.605 --> 00:26:09.140
And those three
methods are returning

00:26:09.140 --> 00:26:11.480
the values which we
have initialized here,

00:26:11.480 --> 00:26:14.749
and that is what is being
displayed on the console.

00:26:14.749 --> 00:26:18.469
So you can use one component
inside another component.

00:26:18.469 --> 00:26:20.584
And as the application grows,

00:26:20.584 --> 00:26:23.615
the component tree
will build up.

00:26:23.615 --> 00:26:25.984
So we have used the
product component

00:26:25.984 --> 00:26:27.769
inside the app component,

00:26:27.769 --> 00:26:30.059
which is the default component.

00:26:33.430 --> 00:26:37.429
Put off your custom component
on the web browser.

00:26:37.429 --> 00:26:39.889
We have included a
custom component in

00:26:39.889 --> 00:26:42.529
the root component or
the Bootstrap component,

00:26:42.529 --> 00:26:44.524
which was generated by default.

00:26:44.524 --> 00:26:47.090
Here in the app component HTML,

00:26:47.090 --> 00:26:49.850
we have included our
own component and that

00:26:49.850 --> 00:26:52.820
has rendered the output
on the web browser,

00:26:52.820 --> 00:26:55.369
the sum total of all
the files you see here.

00:26:55.369 --> 00:26:58.939
But if you want to
directly use or

00:26:58.939 --> 00:27:02.405
make this product component
as the Bootstrap component.

00:27:02.405 --> 00:27:05.300
That is the very first
component in your application.

00:27:05.300 --> 00:27:07.969
In the index.html, we can use

00:27:07.969 --> 00:27:11.599
the product component that
is instead of app route.

00:27:11.599 --> 00:27:13.294
You can use app,

00:27:13.294 --> 00:27:17.689
product. App product directly.

00:27:17.689 --> 00:27:19.250
Now, once you do that,

00:27:19.250 --> 00:27:21.560
you are the default
component that

00:27:21.560 --> 00:27:24.290
got generated will
not be used anymore.

00:27:24.290 --> 00:27:27.079
And you should change
the app module.js,

00:27:27.079 --> 00:27:29.194
which is our
configuration file. Here.

00:27:29.194 --> 00:27:31.940
Instead of app component
as the root component,

00:27:31.940 --> 00:27:34.879
we should use product component.

00:27:34.879 --> 00:27:39.139
So copy that, paste it, save it.

00:27:39.139 --> 00:27:41.225
The beauty of AngularJS,

00:27:41.225 --> 00:27:42.649
we need not restart the server.

00:27:42.649 --> 00:27:43.834
If you go back to the console,

00:27:43.834 --> 00:27:46.489
it has already detected
those changes.

00:27:46.489 --> 00:27:48.950
And it has build our
application and it

00:27:48.950 --> 00:27:51.304
pushes those changes
to the web browser.

00:27:51.304 --> 00:27:54.019
And you still see
the same output

00:27:54.019 --> 00:27:56.209
to ensure that the
output is really

00:27:56.209 --> 00:27:59.899
being generated from
our product component

00:27:59.899 --> 00:28:02.735
and we no longer are
using the app component.

00:28:02.735 --> 00:28:04.970
We can either delete
all these four files

00:28:04.970 --> 00:28:09.260
are simply go to the
App component dot HTML,

00:28:09.260 --> 00:28:11.194
add some text here,

00:28:11.194 --> 00:28:15.994
product details 123,

00:28:15.994 --> 00:28:19.009
just to differentiate
product details 123.

00:28:19.009 --> 00:28:23.555
And here by going to the
product component dot HTML,

00:28:23.555 --> 00:28:27.605
I'm going to add
product details.

00:28:27.605 --> 00:28:30.560
Let's see what we'll see
on the output. Save it.

00:28:30.560 --> 00:28:31.985
As soon as you save it,

00:28:31.985 --> 00:28:33.904
the application is built

00:28:33.904 --> 00:28:36.470
and the changes are pushed
to the web browser.

00:28:36.470 --> 00:28:39.185
You only see product details,

00:28:39.185 --> 00:28:43.054
which is coming from our
product component dot HTML.

00:28:43.054 --> 00:28:44.749
So the other HTML,

00:28:44.749 --> 00:28:46.565
which is the default component,

00:28:46.565 --> 00:28:50.075
HTML, is not being used anymore.

00:28:50.075 --> 00:28:53.089
So two changes to the
configuration file.

00:28:53.089 --> 00:28:55.685
In the configuration
file app module Ts,

00:28:55.685 --> 00:28:57.619
we have to change the
Bootstrap component

00:28:57.619 --> 00:28:59.090
to our new component.

00:28:59.090 --> 00:29:01.280
And in the index.html,

00:29:01.280 --> 00:29:02.674
we'll direct directly use

00:29:02.674 --> 00:29:05.570
our component instead of
the default component.

00:29:05.570 --> 00:29:07.654
Now, inside this
product component,

00:29:07.654 --> 00:29:11.704
we can start including
other components.

00:29:11.704 --> 00:29:14.419
So in here, you can create
other components and

00:29:14.419 --> 00:29:17.670
include them as elements. Here.

00:29:18.730 --> 00:29:21.350
In this lecture,
you will develop

00:29:21.350 --> 00:29:23.060
another component that will

00:29:23.060 --> 00:29:26.944
list out all the sellers of
this particular product.

00:29:26.944 --> 00:29:28.399
To do that, you can go to

00:29:28.399 --> 00:29:30.499
the command line
window and do it

00:29:30.499 --> 00:29:31.790
from here by stopping

00:29:31.790 --> 00:29:34.129
the server or open up
a new command line,

00:29:34.129 --> 00:29:36.410
or go to Visual Studio Code.

00:29:36.410 --> 00:29:40.984
Go to View, open up
integrated terminal.

00:29:40.984 --> 00:29:43.880
That will launch a
terminal here and you

00:29:43.880 --> 00:29:46.834
will be inside the
project directory.

00:29:46.834 --> 00:29:48.935
You can execute N G,

00:29:48.935 --> 00:29:53.510
G for generate C4
component space.

00:29:53.510 --> 00:29:56.089
The name of the
component is seller.

00:29:56.089 --> 00:29:57.409
Hit Enter.

00:29:57.409 --> 00:30:00.890
That will create the four
files as you know already,

00:30:00.890 --> 00:30:05.479
and it will also update
the app dot module dot ts.

00:30:05.479 --> 00:30:08.699
We go to the app dot module.js.

00:30:08.950 --> 00:30:11.315
The new component will be

00:30:11.315 --> 00:30:14.209
imported and also it

00:30:14.209 --> 00:30:16.070
will be added to the
declaration section.

00:30:16.070 --> 00:30:18.395
It is ready to be used.

00:30:18.395 --> 00:30:21.590
Go to the Explorer, open
up the new component,

00:30:21.590 --> 00:30:23.600
you will find a seller component

00:30:23.600 --> 00:30:26.224
here, expand that folder.

00:30:26.224 --> 00:30:31.310
Seller dot css and
the seller dot HTML.

00:30:31.310 --> 00:30:34.415
That ts file, which
is at the end,

00:30:34.415 --> 00:30:38.370
open up the PS file.

00:30:39.220 --> 00:30:42.589
Dot component dot
ts defined an array

00:30:42.589 --> 00:30:45.334
here as a global variable.

00:30:45.334 --> 00:30:49.519
And the array is the
list of sellers, colon,

00:30:49.519 --> 00:30:52.550
string array, open and
close bracket that

00:30:52.550 --> 00:30:54.169
represents a string array within

00:30:54.169 --> 00:30:56.180
the constructor will
initialize this.

00:30:56.180 --> 00:30:57.545
Sellers.

00:30:57.545 --> 00:31:01.339
Sellers is equal to
within square brackets.

00:31:01.339 --> 00:31:02.885
Should use this dot.

00:31:02.885 --> 00:31:04.895
Sellers is equal to.

00:31:04.895 --> 00:31:11.780
A laptop is available
in Best Buy comma.

00:31:11.780 --> 00:31:13.370
It's also available, of course,

00:31:13.370 --> 00:31:16.190
from Apple itself by
going to the Apple Store.

00:31:16.190 --> 00:31:20.270
And last but not the
least, Amazon as well.

00:31:20.270 --> 00:31:21.860
Save it.

00:31:21.860 --> 00:31:25.909
So our competent simply
initialize the array,

00:31:25.909 --> 00:31:29.640
add a method called get sellers.

00:31:30.490 --> 00:31:35.104
It returns a string array back.

00:31:35.104 --> 00:31:38.075
Return this dot.

00:31:38.075 --> 00:31:42.245
Sellers. Save it,

00:31:42.245 --> 00:31:44.330
go to the HTML file.

00:31:44.330 --> 00:31:47.420
Sellers dot component dot HTML.

00:31:47.420 --> 00:31:53.249
Remove everything
within bold element.

00:31:53.650 --> 00:31:58.475
Just use the string
interpolation syntax,

00:31:58.475 --> 00:32:00.124
two angular brackets.

00:32:00.124 --> 00:32:04.159
Get sellers is the method name.

00:32:04.159 --> 00:32:06.724
Right now, whatever we
are returning here,

00:32:06.724 --> 00:32:09.229
we are not converting
an array into a string.

00:32:09.229 --> 00:32:10.970
We are simply
returning the string

00:32:10.970 --> 00:32:12.724
or simply returning
the array itself.

00:32:12.724 --> 00:32:14.900
Let's see what
happens on the UI.

00:32:14.900 --> 00:32:16.655
Save it.

00:32:16.655 --> 00:32:18.740
Go to the component.

00:32:18.740 --> 00:32:22.099
And this is mapper
to app seller.

00:32:22.099 --> 00:32:26.210
So we can use app seller
as the element name

00:32:26.210 --> 00:32:31.085
inside the index.html or
inside other components,

00:32:31.085 --> 00:32:32.899
which is the product component,

00:32:32.899 --> 00:32:36.605
go to product component
HTML. At the end of it.

00:32:36.605 --> 00:32:40.730
We can use apps
seller, and close it.

00:32:40.730 --> 00:32:42.919
So firstly, it should
list the product details,

00:32:42.919 --> 00:32:46.355
then it should also list
the seller details.

00:32:46.355 --> 00:32:48.860
If you go back to your web
browser, as you can see,

00:32:48.860 --> 00:32:52.729
the output is already
there because it compiles,

00:32:52.729 --> 00:32:55.085
it pushes the changes
on to the web browser.

00:32:55.085 --> 00:32:57.829
You'll see best by
Apple and Amazon,

00:32:57.829 --> 00:33:00.620
which is the output
of the new component.

00:33:00.620 --> 00:33:02.989
This ts files, whatever

00:33:02.989 --> 00:33:06.390
this ts file is
returning, the array.

00:33:06.850 --> 00:33:10.310
The seller dot PS is being used

00:33:10.310 --> 00:33:12.965
inside the seller
component dot HTML.

00:33:12.965 --> 00:33:15.335
This is what is
producing this output.

00:33:15.335 --> 00:33:17.644
Then that output
is being included

00:33:17.644 --> 00:33:19.850
in the other component
because we are using

00:33:19.850 --> 00:33:22.069
the component as
a child component

00:33:22.069 --> 00:33:25.190
inside product
component dot HTML,

00:33:25.190 --> 00:33:28.625
you can play around with the
seller component dot ds.

00:33:28.625 --> 00:33:31.010
You can use your own logic here

00:33:31.010 --> 00:33:33.514
instead of directly returning
an array like this,

00:33:33.514 --> 00:33:35.344
you can loop through the array,

00:33:35.344 --> 00:33:38.760
sent back a list as you want.

00:33:39.430 --> 00:33:43.714
Now that you have mastered
it angular component,

00:33:43.714 --> 00:33:45.260
and to use them to come up with

00:33:45.260 --> 00:33:47.239
the application tree or

00:33:47.239 --> 00:33:50.284
the component tree for
our angular application.

00:33:50.284 --> 00:33:52.670
In this lecture, you're
going to learn how

00:33:52.670 --> 00:33:55.310
to deal with arrays of data.

00:33:55.310 --> 00:33:57.994
So here instead of
a single product,

00:33:57.994 --> 00:33:59.779
if we have multiple products,

00:33:59.779 --> 00:34:05.660
we can use the angular NG for
directive inside the HTML,

00:34:05.660 --> 00:34:09.320
loop through those products
and display their details.

00:34:09.320 --> 00:34:11.554
So let's explore that syntax.

00:34:11.554 --> 00:34:18.720
Go to the product PS product
component TypeScript file.

00:34:18.880 --> 00:34:21.635
And instead of single product,

00:34:21.635 --> 00:34:24.289
we are going to define products

00:34:24.289 --> 00:34:27.515
as a property colon
object array.

00:34:27.515 --> 00:34:30.724
You're going to send back a
group of products together,

00:34:30.724 --> 00:34:33.980
delete those properties,
clean up the constructor.

00:34:33.980 --> 00:34:35.464
Inside of the constructor.

00:34:35.464 --> 00:34:41.434
This dot products equal to
within square brackets,

00:34:41.434 --> 00:34:43.834
we are going to
define our array.

00:34:43.834 --> 00:34:46.520
Can delete all these
three methods,

00:34:46.520 --> 00:34:49.340
getID, getName, and get price.

00:34:49.340 --> 00:34:53.699
We're going to return one
single product array back.

00:34:54.460 --> 00:34:57.560
Initialize at least two objects

00:34:57.560 --> 00:34:59.224
here within flower brackets.

00:34:59.224 --> 00:35:03.290
Add the first object,
product id, colon,

00:35:03.290 --> 00:35:05.899
within double-quotes, the
ID for the product is

00:35:05.899 --> 00:35:09.560
one comma product name, colon.

00:35:09.560 --> 00:35:12.485
Macbook Pro.

00:35:12.485 --> 00:35:15.169
That's good enough
at another object

00:35:15.169 --> 00:35:18.394
separating it by a comma id

00:35:18.394 --> 00:35:27.424
colon and the product
name colon. Iphone.

00:35:27.424 --> 00:35:28.939
Save it.

00:35:28.939 --> 00:35:31.205
So you have successfully
defined a product array.

00:35:31.205 --> 00:35:33.230
Now let's return it back.

00:35:33.230 --> 00:35:37.804
Get products is the
name of the function.

00:35:37.804 --> 00:35:40.790
Let's make it a public function.

00:35:40.790 --> 00:35:43.460
And inside this function,

00:35:43.460 --> 00:35:46.339
simply, I'm adding some lines

00:35:46.339 --> 00:35:49.980
so that you can see it clearly
and I can scroll it up.

00:35:51.070 --> 00:35:59.495
Return this dot products
from Eva component logic,

00:35:59.495 --> 00:36:02.149
you are returning back
a array of products.

00:36:02.149 --> 00:36:05.539
Now if you go to
the products HTML,

00:36:05.539 --> 00:36:07.700
we need to loop
through the products.

00:36:07.700 --> 00:36:09.695
You can't access it
like this anymore.

00:36:09.695 --> 00:36:11.420
So below the product details,

00:36:11.420 --> 00:36:16.415
get it off that and
add a new element.

00:36:16.415 --> 00:36:23.779
Do within the do you
use star or asterix?

00:36:23.779 --> 00:36:26.990
N G, F capital for.

00:36:26.990 --> 00:36:28.909
So this is the energy for

00:36:28.909 --> 00:36:31.370
structural directive
from Angular.

00:36:31.370 --> 00:36:32.554
It is called a
structural directive

00:36:32.554 --> 00:36:33.724
because it's going to affect

00:36:33.724 --> 00:36:37.529
the structure of our DOM HTML.

00:36:37.720 --> 00:36:40.534
Within this, within
double-quotes,

00:36:40.534 --> 00:36:45.950
let product of products.

00:36:45.950 --> 00:36:47.989
So you are going to
use the JavaScript or

00:36:47.989 --> 00:36:50.525
TypeScript for loop syntax here.

00:36:50.525 --> 00:36:53.930
Let product of products.

00:36:53.930 --> 00:36:56.374
So products is what
we are returning from

00:36:56.374 --> 00:36:59.510
our Ts right here.

00:36:59.510 --> 00:37:04.505
So we are accessing it
inside the HTML as follows.

00:37:04.505 --> 00:37:07.699
And within this Do we
can use this product to

00:37:07.699 --> 00:37:12.755
display individual product
properties. So use H1.

00:37:12.755 --> 00:37:15.229
And within that H1 use

00:37:15.229 --> 00:37:18.710
the angular brackets string
interpolation syntax.

00:37:18.710 --> 00:37:22.130
Product dot name will

00:37:22.130 --> 00:37:25.054
give us the name or
ID is the first one.

00:37:25.054 --> 00:37:28.759
Grab that line, paste it.

00:37:28.759 --> 00:37:31.924
Name is the second property.

00:37:31.924 --> 00:37:33.199
That's it.

00:37:33.199 --> 00:37:37.595
This is how you use the Angular
and G4 Attack to save it.

00:37:37.595 --> 00:37:39.605
Go back to the web browser.

00:37:39.605 --> 00:37:44.450
We see one, MacBook
Pro to iPhone.

00:37:44.450 --> 00:37:45.679
If your server is stopped for

00:37:45.679 --> 00:37:47.285
some reason, go
ahead and stop it.

00:37:47.285 --> 00:37:49.415
But usually if the server
is up and running,

00:37:49.415 --> 00:37:51.410
it will pick up the
changes and it will

00:37:51.410 --> 00:37:54.155
push them onto the web browser.

00:37:54.155 --> 00:37:57.005
So to summarize it
quickly, in this lecture,

00:37:57.005 --> 00:38:00.379
you have updated the
product component logic or

00:38:00.379 --> 00:38:05.029
the script file to use
an array of products.

00:38:05.029 --> 00:38:07.700
And in the constructor we
have initialized the array.

00:38:07.700 --> 00:38:10.864
You How come up with a
method called get products

00:38:10.864 --> 00:38:15.184
that will return an
array of products.

00:38:15.184 --> 00:38:18.364
And in the HTML file,

00:38:18.364 --> 00:38:22.279
we are directly
accessing the products.

00:38:22.279 --> 00:38:25.489
Assigning it to a product
as we look through it,

00:38:25.489 --> 00:38:26.810
each time the loop goes through,

00:38:26.810 --> 00:38:30.720
we are displaying
the ID and name.

00:38:31.780 --> 00:38:34.939
In the previous lecture
when you have access to

00:38:34.939 --> 00:38:37.699
the products inside the
product component HTML,

00:38:37.699 --> 00:38:40.235
we have access to the
property directly.

00:38:40.235 --> 00:38:41.690
That is, we have not invoked

00:38:41.690 --> 00:38:45.079
the get products method
on the product competent.

00:38:45.079 --> 00:38:46.640
This method was never used.

00:38:46.640 --> 00:38:49.565
Instead, this property
was directly accessed.

00:38:49.565 --> 00:38:52.174
And since in the constructor
we are initializing it,

00:38:52.174 --> 00:38:55.445
we saw that output as expected.

00:38:55.445 --> 00:38:57.589
But the best way
to do it is to go

00:38:57.589 --> 00:38:59.659
back to your HTML and invoke

00:38:59.659 --> 00:39:04.159
the get products
method, save it.

00:39:04.159 --> 00:39:07.159
That will push the changes

00:39:07.159 --> 00:39:10.560
and the output will
still remain the same.

00:39:14.560 --> 00:39:18.110
You are going to
explore input property

00:39:18.110 --> 00:39:21.064
binding and output
event binding.

00:39:21.064 --> 00:39:23.674
Angular supports two-way
binding and more,

00:39:23.674 --> 00:39:26.194
which you will explore
in lectures later on.

00:39:26.194 --> 00:39:30.005
But now we'll explore
input property binding.

00:39:30.005 --> 00:39:32.300
I want to hide

00:39:32.300 --> 00:39:34.879
this seller's information when

00:39:34.879 --> 00:39:37.159
this UI is rendered initially.

00:39:37.159 --> 00:39:39.320
And I want it to appear only

00:39:39.320 --> 00:39:41.689
when the user
clicks on a button.

00:39:41.689 --> 00:39:43.144
So we're going to accomplish it

00:39:43.144 --> 00:39:45.274
using the input
property binding.

00:39:45.274 --> 00:39:49.549
Go to the cellular component
dot PS and the HTML file.

00:39:49.549 --> 00:39:51.499
Open up the HTML to start with.

00:39:51.499 --> 00:39:53.359
If you want to hide this,

00:39:53.359 --> 00:39:58.369
you can simply use HTML
attribute called hidden.

00:39:58.369 --> 00:40:00.724
You need not assign it a value.

00:40:00.724 --> 00:40:03.364
And automatically
the seller is gone.

00:40:03.364 --> 00:40:05.179
To do the same in Angular,

00:40:05.179 --> 00:40:11.510
he will use square brackets
around the property.

00:40:11.510 --> 00:40:13.700
And within double-quotes,
we provide it

00:40:13.700 --> 00:40:17.539
a value of true or false.

00:40:17.539 --> 00:40:20.255
True means it will be hidden.

00:40:20.255 --> 00:40:23.045
If you give it a value false,

00:40:23.045 --> 00:40:25.684
it will be shown.

00:40:25.684 --> 00:40:27.979
So the value on the
right-hand side,

00:40:27.979 --> 00:40:29.239
if it's a JavaScript value,

00:40:29.239 --> 00:40:30.350
it will be evaluated.

00:40:30.350 --> 00:40:32.134
It pretty simply a
literal like this.

00:40:32.134 --> 00:40:34.714
It'll be used, so make it true.

00:40:34.714 --> 00:40:36.694
And that is gone.

00:40:36.694 --> 00:40:38.840
So go back to the
product component or

00:40:38.840 --> 00:40:41.570
the seller, the TypeScript file.

00:40:41.570 --> 00:40:45.334
We'll add a flag called hide.

00:40:45.334 --> 00:40:47.930
This is of type Boolean.

00:40:47.930 --> 00:40:50.360
We will set it in
the constructor.

00:40:50.360 --> 00:40:54.109
This dot height is

00:40:54.109 --> 00:40:58.339
equal to true initially
when the UI is rendered.

00:40:58.339 --> 00:41:00.979
Now if you go back
to the UI here,

00:41:00.979 --> 00:41:02.674
instead of hard-coding
it like this,

00:41:02.674 --> 00:41:05.854
you can use the
hide flag directly.

00:41:05.854 --> 00:41:08.749
So this height will
be referred from

00:41:08.749 --> 00:41:12.530
the TypeScript file which
corresponds to that component.

00:41:12.530 --> 00:41:14.464
So the seller component dot PS

00:41:14.464 --> 00:41:16.279
has the height that will be used

00:41:16.279 --> 00:41:20.180
by the HTML and the
UI is rendered.

00:41:20.180 --> 00:41:22.309
So you don't see it
because you have

00:41:22.309 --> 00:41:25.189
set it to true in
that TypeScript file.

00:41:25.189 --> 00:41:31.145
So this is how the angular
input property binding works.

00:41:31.145 --> 00:41:34.609
We use a particular property.

00:41:34.609 --> 00:41:35.929
This is a DOM property.

00:41:35.929 --> 00:41:38.179
Remember, this is not
an HTML attribute.

00:41:38.179 --> 00:41:41.150
Internally, angular will
manipulate the HTML DOM

00:41:41.150 --> 00:41:44.600
that gets generated and it
has a property called hidden.

00:41:44.600 --> 00:41:46.955
On that we can assign
true or false.

00:41:46.955 --> 00:41:49.729
That is exactly what
we are doing here.

00:41:49.729 --> 00:41:52.759
We are doing an input
property by binding.

00:41:52.759 --> 00:41:56.929
We are binding a property
on our component for

00:41:56.929 --> 00:41:59.225
our model to the UI

00:41:59.225 --> 00:42:01.804
that is getting generated
depending on the value of it,

00:42:01.804 --> 00:42:05.615
the UI will be hidden
or it will be shown.

00:42:05.615 --> 00:42:07.129
In the next lecture, we will add

00:42:07.129 --> 00:42:09.260
a button onclick
off that button.

00:42:09.260 --> 00:42:11.870
This should toggle, it
should display the sellers.

00:42:11.870 --> 00:42:13.354
And if you click on it, again,

00:42:13.354 --> 00:42:16.320
it should hide the sellers.

00:42:17.650 --> 00:42:19.924
In the previous lecture, we have

00:42:19.924 --> 00:42:21.769
hidden the seller information.

00:42:21.769 --> 00:42:23.929
In this one, we're
going to show it to

00:42:23.929 --> 00:42:26.420
the end-user when
he clicks a button.

00:42:26.420 --> 00:42:28.834
And in the process you are
going to learn a concept

00:42:28.834 --> 00:42:31.505
of output event binding.

00:42:31.505 --> 00:42:34.114
So in the previous
lecture, you have received

00:42:34.114 --> 00:42:36.934
an input using the
square brackets.

00:42:36.934 --> 00:42:38.690
We are manipulating the DOM.

00:42:38.690 --> 00:42:40.939
Using a input from
our component,

00:42:40.939 --> 00:42:42.559
which is the model
from the data,

00:42:42.559 --> 00:42:44.359
whatever is coming in,
we're manipulating

00:42:44.359 --> 00:42:47.164
the DOM and the syntax for
it is square brackets.

00:42:47.164 --> 00:42:48.785
These are angular syntax.

00:42:48.785 --> 00:42:50.959
Now we are going to
use another syntax

00:42:50.959 --> 00:42:52.759
which is regular brackets.

00:42:52.759 --> 00:42:55.985
For output event binding.

00:42:55.985 --> 00:43:02.045
Input type is equal to button.

00:43:02.045 --> 00:43:03.620
Onclick of this button,

00:43:03.620 --> 00:43:05.644
I want the user to
see the sellers.

00:43:05.644 --> 00:43:08.585
If he clicks it again, I
want it to be hidden again.

00:43:08.585 --> 00:43:14.315
Input type button value
is equal to toggle.

00:43:14.315 --> 00:43:17.569
And this is where the square
brackets will come in.

00:43:17.569 --> 00:43:18.934
And the event we want,

00:43:18.934 --> 00:43:20.939
or the regular brackets.

00:43:20.939 --> 00:43:23.319
And the event we
want to handle on

00:43:23.319 --> 00:43:26.709
this DOM element is click.

00:43:26.709 --> 00:43:29.995
So this is like
onclick is equal to.

00:43:29.995 --> 00:43:31.840
Within double-quotes.

00:43:31.840 --> 00:43:33.880
We can use whatever
logic we want or we

00:43:33.880 --> 00:43:36.205
can even invoke at
TypeScript function.

00:43:36.205 --> 00:43:40.224
For now, simply
toggle this Hide.

00:43:40.224 --> 00:43:42.279
Hide is equal to,

00:43:42.279 --> 00:43:46.149
I want to change the
value of it, not hide.

00:43:46.149 --> 00:43:48.490
So if it is true, it
will become false.

00:43:48.490 --> 00:43:50.830
If it is false, it
will become true.

00:43:50.830 --> 00:43:52.779
So as simple as that.

00:43:52.779 --> 00:43:56.184
So again, that syntax for
handling output event

00:43:56.184 --> 00:44:01.134
binding on a property is
within regular brackets.

00:44:01.134 --> 00:44:03.720
Use the event which in
this case is clicked,

00:44:03.720 --> 00:44:06.140
is equal to assign the handler

00:44:06.140 --> 00:44:08.974
or come up with a logic
within this double-quotes.

00:44:08.974 --> 00:44:11.569
Save it, go back
to your browser.

00:44:11.569 --> 00:44:14.630
Now, you see a toggle
button on the UI.

00:44:14.630 --> 00:44:17.720
Click on it and they will
see all the sellers.

00:44:17.720 --> 00:44:19.265
If you click on it, again,

00:44:19.265 --> 00:44:21.244
the sellers are hidden.

00:44:21.244 --> 00:44:24.484
So our logic is
working as expected.

00:44:24.484 --> 00:44:26.135
You can move this logic,

00:44:26.135 --> 00:44:30.199
this one single line here
to the component as well.

00:44:30.199 --> 00:44:34.310
So cut it, go to the
cellular component dot ts,

00:44:34.310 --> 00:44:37.590
define a function called toggle.

00:44:39.490 --> 00:44:44.510
And within this, you can say
this dot height is not equal

00:44:44.510 --> 00:44:49.730
or equal to not this height.

00:44:49.730 --> 00:44:51.919
The same logic we
are defining it

00:44:51.919 --> 00:44:53.720
inside at toggle method.

00:44:53.720 --> 00:44:56.900
And then we can
invoke this function.

00:44:56.900 --> 00:44:58.680
Here.

00:44:59.740 --> 00:45:02.959
Save it, go back to the browser.

00:45:02.959 --> 00:45:05.510
The output is already
generated. Click on Toggle.

00:45:05.510 --> 00:45:08.434
It still works as expected.

00:45:08.434 --> 00:45:11.540
So remember, input
property binding,

00:45:11.540 --> 00:45:13.519
we use the square brackets and

00:45:13.519 --> 00:45:16.370
then whatever property on
that particular DOM element.

00:45:16.370 --> 00:45:17.960
And we can assign the logic on

00:45:17.960 --> 00:45:20.540
the right-hand side or
simply use the logic.

00:45:20.540 --> 00:45:21.829
If it is quite simple, we can

00:45:21.829 --> 00:45:23.989
use or add that
logic itself here.

00:45:23.989 --> 00:45:25.339
If it is complex, create

00:45:25.339 --> 00:45:28.025
a function and then
invoke that function.

00:45:28.025 --> 00:45:30.620
For the output event binding.

00:45:30.620 --> 00:45:32.180
For any output events,

00:45:32.180 --> 00:45:34.249
you use the regular
brackets syntax.

00:45:34.249 --> 00:45:36.064
The event will go
into the bracket,

00:45:36.064 --> 00:45:39.930
followed by the logic
or the function name.
