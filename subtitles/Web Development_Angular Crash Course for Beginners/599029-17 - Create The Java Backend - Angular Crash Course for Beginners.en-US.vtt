WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.340 --> 00:00:05.070
In this lecture, I will give
you the instructions to

00:00:05.070 --> 00:00:09.375
install Java eight or
JDK eight ANOVA machine.

00:00:09.375 --> 00:00:12.090
To do that, launch
your web browser

00:00:12.090 --> 00:00:15.989
and do a search for Java eight.

00:00:15.989 --> 00:00:20.310
Download. Click on
the very first link

00:00:20.310 --> 00:00:23.760
which says Java Development
Kit eight downloads.

00:00:23.760 --> 00:00:26.099
And it will go to the
Java downloads page,

00:00:26.099 --> 00:00:27.720
scroll down and you will

00:00:27.720 --> 00:00:31.059
see different versions
of downloads here.

00:00:31.059 --> 00:00:34.205
This is what we need
Java SE development kit.

00:00:34.205 --> 00:00:37.339
We don't need the
samples and downloads.

00:00:37.339 --> 00:00:39.574
Accept the license agreement

00:00:39.574 --> 00:00:41.825
by clicking on the radio button.

00:00:41.825 --> 00:00:44.749
And you have different downloads

00:00:44.749 --> 00:00:46.460
here for different
operating systems.

00:00:46.460 --> 00:00:49.309
If you are on Windows, you
will download the EXE and

00:00:49.309 --> 00:00:52.999
simply double-click on the
EXE and keep clicking Next.

00:00:52.999 --> 00:00:54.995
And JDK will be typically

00:00:54.995 --> 00:00:57.409
installed and reward
program files.

00:00:57.409 --> 00:00:59.210
If you want to change
that, you can change that

00:00:59.210 --> 00:01:01.504
during the process
of installation.

00:01:01.504 --> 00:01:02.975
And if you're on Mac,

00:01:02.975 --> 00:01:05.210
you will download
the DMZ file again,

00:01:05.210 --> 00:01:07.040
double-click on it, and it will

00:01:07.040 --> 00:01:08.930
automatically do the
installation for you.

00:01:08.930 --> 00:01:12.230
It will simply go to the
apps folder on a Mac.

00:01:12.230 --> 00:01:16.834
And you How versions for
Linux, Solaris as well.

00:01:16.834 --> 00:01:19.129
So it's that simple download.

00:01:19.129 --> 00:01:21.005
Once you accept the
license agreement,

00:01:21.005 --> 00:01:23.749
you will download the
EXE or DMZ or whatever,

00:01:23.749 --> 00:01:25.490
depending on your
operating system,

00:01:25.490 --> 00:01:29.849
double-click on it and keep
clicking the next button.

00:01:31.720 --> 00:01:36.049
Spring tool suit is a
very powerful IDE that

00:01:36.049 --> 00:01:40.175
helps us build spring based
projects very easily.

00:01:40.175 --> 00:01:45.844
Launch your web browser and
search for spring to suit.

00:01:45.844 --> 00:01:47.285
Download.

00:01:47.285 --> 00:01:49.819
Spring tool suit, download.

00:01:49.819 --> 00:01:52.054
Click on the Downloads
link spring tool suit

00:01:52.054 --> 00:01:54.154
is built on the
Eclipse platform.

00:01:54.154 --> 00:01:57.050
So it is very similar
to eclipse with support

00:01:57.050 --> 00:02:01.009
for special support for
spring based projects.

00:02:01.009 --> 00:02:04.204
On the downloads page you
will see the downloads for

00:02:04.204 --> 00:02:05.750
different operating systems if

00:02:05.750 --> 00:02:06.994
you are on Windows, click this.

00:02:06.994 --> 00:02:08.510
If you're on Mac this and for

00:02:08.510 --> 00:02:10.805
Linux theories and other link.

00:02:10.805 --> 00:02:13.954
Once you download it
will be zip file.

00:02:13.954 --> 00:02:15.650
Unzip the contents of it.

00:02:15.650 --> 00:02:18.934
And you will see on Mac,

00:02:18.934 --> 00:02:21.394
it'll be sts dot app.

00:02:21.394 --> 00:02:23.480
You will see the following
folder on Windows it will

00:02:23.480 --> 00:02:26.044
be SPS dot EXE.

00:02:26.044 --> 00:02:28.054
To launch SDS.

00:02:28.054 --> 00:02:29.975
Double-click it.

00:02:29.975 --> 00:02:33.725
And you need to
choose a workspace.

00:02:33.725 --> 00:02:36.679
This is similar to
how you use Eclipse.

00:02:36.679 --> 00:02:38.735
Workspace is a folder where

00:02:38.735 --> 00:02:41.360
Oliver projects will be
saved on your machine.

00:02:41.360 --> 00:02:45.184
For me, it is under my documents
I have chosen a folder.

00:02:45.184 --> 00:02:47.000
You can create a folder
wherever you want

00:02:47.000 --> 00:02:49.085
on your machine and
point it to that.

00:02:49.085 --> 00:02:51.289
Click on Launch.

00:02:51.289 --> 00:02:56.039
That will take us to
the workspace in SDS.

00:02:56.820 --> 00:02:59.484
And you are ready to create

00:02:59.484 --> 00:03:02.509
and work with Spring projects.

00:03:03.450 --> 00:03:06.039
The next step is to create

00:03:06.039 --> 00:03:08.050
a Spring Boot Project which

00:03:08.050 --> 00:03:10.674
will host our flight
services API.

00:03:10.674 --> 00:03:14.079
To do that launch, the SDS ID.

00:03:14.079 --> 00:03:16.074
Go to the File menu,

00:03:16.074 --> 00:03:19.569
say New Spring starter project,

00:03:19.569 --> 00:03:22.759
that is how we create
Spring Boot projects.

00:03:22.770 --> 00:03:25.989
Enter a name for your project,

00:03:25.989 --> 00:03:29.750
call it flight services.

00:03:30.060 --> 00:03:33.084
The group name is
something unique.

00:03:33.084 --> 00:03:34.689
So com dot powerapps,

00:03:34.689 --> 00:03:39.515
dot flight services,
the group name,

00:03:39.515 --> 00:03:42.680
the artifact name is
derived from the name here.

00:03:42.680 --> 00:03:44.180
So this is nothing
but the project name,

00:03:44.180 --> 00:03:46.310
the version you can
leave it as it is,

00:03:46.310 --> 00:03:50.749
and the description you can
give it as flight services.

00:03:50.749 --> 00:03:52.790
Change the package name also to

00:03:52.790 --> 00:03:56.930
com.net dot flight services.

00:03:56.930 --> 00:03:58.865
So this package name is

00:03:58.865 --> 00:04:02.374
unique place where all our
code or classes will be saved.

00:04:02.374 --> 00:04:05.165
Next, this where we can select

00:04:05.165 --> 00:04:07.954
all the libraries that
are project needs.

00:04:07.954 --> 00:04:11.839
The very first library we
need is the web library.

00:04:11.839 --> 00:04:16.594
So type in web here and
select Web from down here.

00:04:16.594 --> 00:04:20.674
Next is the spring data.

00:04:20.674 --> 00:04:24.650
Or you can search for JPA.

00:04:24.650 --> 00:04:27.994
Select JPA that will
give you spring data.

00:04:27.994 --> 00:04:31.144
And the last library is MySQL.

00:04:31.144 --> 00:04:32.659
We need this to connect to

00:04:32.659 --> 00:04:36.394
the MySQL database from
within our Java applications.

00:04:36.394 --> 00:04:38.390
The JPL Library is for

00:04:38.390 --> 00:04:40.340
doing the object
relational mapping.

00:04:40.340 --> 00:04:42.109
Mysql is to connect to

00:04:42.109 --> 00:04:44.945
the MySQL database
and execute queries.

00:04:44.945 --> 00:04:48.965
And the web is to create
our RESTful APIs.

00:04:48.965 --> 00:04:50.509
Finish.

00:04:50.509 --> 00:04:53.810
That will pull all the
libraries from over

00:04:53.810 --> 00:04:58.019
the Internet and it will
create the project for us.

00:04:59.140 --> 00:05:01.400
As it pulls the libraries,

00:05:01.400 --> 00:05:03.829
let's open up the palm dot xml.

00:05:03.829 --> 00:05:06.259
All the information
you have entered on

00:05:06.259 --> 00:05:09.305
that screen will go
into this poem dot xml.

00:05:09.305 --> 00:05:11.810
Go to the last tab.

00:05:11.810 --> 00:05:14.750
Here are the project
coordinates that you have

00:05:14.750 --> 00:05:16.940
entered flight services
is the name version,

00:05:16.940 --> 00:05:18.589
it's of type char.

00:05:18.589 --> 00:05:20.479
Scroll down.

00:05:20.479 --> 00:05:22.549
The dependencies section is

00:05:22.549 --> 00:05:25.084
the key section where we
include all the libraries.

00:05:25.084 --> 00:05:26.359
So whatever you have entered on

00:05:26.359 --> 00:05:28.369
the UI or automatically
included here,

00:05:28.369 --> 00:05:30.379
Spring Boot starter Data,

00:05:30.379 --> 00:05:32.825
JPA is the ORM library.

00:05:32.825 --> 00:05:34.760
This is the web
library required to

00:05:34.760 --> 00:05:37.610
develop RESTful
services or rest API.

00:05:37.610 --> 00:05:39.634
And here is the MySQL library,

00:05:39.634 --> 00:05:41.435
which will help us connect.

00:05:41.435 --> 00:05:46.139
Mysql database and do
database operations.

00:05:47.320 --> 00:05:51.439
The next step is to
create the GPA entities

00:05:51.439 --> 00:05:55.115
that represent the database
tables and columns.

00:05:55.115 --> 00:05:59.239
Go to SDS, go to
source main Java.

00:05:59.239 --> 00:06:01.205
This is where all our
source code will do.

00:06:01.205 --> 00:06:03.650
You will see that there is
a class that got generated

00:06:03.650 --> 00:06:06.724
when a project was
created. Open that up.

00:06:06.724 --> 00:06:09.124
This class is the starting point

00:06:09.124 --> 00:06:10.879
of the spring Boot application.

00:06:10.879 --> 00:06:14.089
It is MakerBot at Spring
Boot application annotation.

00:06:14.089 --> 00:06:15.919
And this main method is where

00:06:15.919 --> 00:06:18.889
our application will
start up when we run it.

00:06:18.889 --> 00:06:21.064
Right-click on this package,

00:06:21.064 --> 00:06:25.205
create a new class,
call it flight.

00:06:25.205 --> 00:06:27.110
There's the very first entity or

00:06:27.110 --> 00:06:29.029
the model class that
we are creating,

00:06:29.029 --> 00:06:31.505
which represents
their database table.

00:06:31.505 --> 00:06:33.559
And put it in a package called

00:06:33.559 --> 00:06:36.889
Flight services dot entities.

00:06:36.889 --> 00:06:38.734
Finish.

00:06:38.734 --> 00:06:41.600
This flight class will be

00:06:41.600 --> 00:06:43.865
mapped to the database
table called flight.

00:06:43.865 --> 00:06:46.399
So it should have
all the columns as

00:06:46.399 --> 00:06:49.234
fields starting with IID
flight number and so on.

00:06:49.234 --> 00:06:52.879
So the first field
is private int id,

00:06:52.879 --> 00:06:54.170
which is the primary key.

00:06:54.170 --> 00:06:56.615
But I wait string

00:06:56.615 --> 00:06:59.359
flight number because
the flight number

00:06:59.359 --> 00:07:02.435
can have characters we are
using the string type.

00:07:02.435 --> 00:07:05.060
Copy that, and paste

00:07:05.060 --> 00:07:08.659
it five more times for
the rest of the fields.

00:07:08.659 --> 00:07:14.250
The next field is the
operating airlines.

00:07:14.950 --> 00:07:19.204
Next comes departure city,

00:07:19.204 --> 00:07:28.249
followed by arrival
city, date of departure.

00:07:28.249 --> 00:07:35.929
And last is the estimated
departure time.

00:07:35.929 --> 00:07:39.004
The last two fields
here, the departure,

00:07:39.004 --> 00:07:40.580
date of departure should be of

00:07:40.580 --> 00:07:43.609
type date because in
the database it is

00:07:43.609 --> 00:07:48.395
of type date and estimated
departure time is timestamp.

00:07:48.395 --> 00:07:52.549
So change that to time stamp.

00:07:52.549 --> 00:07:55.880
Hit Control one on
date imported from

00:07:55.880 --> 00:08:00.919
Java dot SQL Control
or Command on Mac.

00:08:00.919 --> 00:08:03.859
Important timestamp
from Java dot sequel

00:08:03.859 --> 00:08:06.305
and that will add
those two imports.

00:08:06.305 --> 00:08:08.450
Select all these fields,

00:08:08.450 --> 00:08:11.120
go to source and
generate getters

00:08:11.120 --> 00:08:14.389
and setters. Select all.

00:08:14.389 --> 00:08:18.125
Insertion point is
after the last field.

00:08:18.125 --> 00:08:20.015
Hit, Okay,

00:08:20.015 --> 00:08:22.760
hit Control Shift F to format

00:08:22.760 --> 00:08:25.669
the code on Mac is
Command Shift F,

00:08:25.669 --> 00:08:27.785
that will format
the code for us.

00:08:27.785 --> 00:08:30.440
So we have defined all these
fields as private and we

00:08:30.440 --> 00:08:33.125
have encapsulated them
using the methods,

00:08:33.125 --> 00:08:35.225
using the getters
we can access it.

00:08:35.225 --> 00:08:39.990
And using setters we can set
the values for these fields.

00:08:40.480 --> 00:08:47.720
Next is the passenger,
new class. Passenger.

00:08:47.720 --> 00:08:49.609
Finish.

00:08:49.609 --> 00:08:51.604
Passenger will also have

00:08:51.604 --> 00:08:54.379
an ID which is the
primary key, private int,

00:08:54.379 --> 00:09:00.229
id, string, first name.

00:09:00.229 --> 00:09:02.329
If you go to the database,

00:09:02.329 --> 00:09:06.619
in the database, all these
fields have underscores.

00:09:06.619 --> 00:09:09.214
First underscore name,
last underscore name,

00:09:09.214 --> 00:09:10.670
middle underscore
name, et cetera.

00:09:10.670 --> 00:09:12.799
But in here we will
use camelCase.

00:09:12.799 --> 00:09:15.740
And automatically, these
fields will be mapped to

00:09:15.740 --> 00:09:17.209
the columns by

00:09:17.209 --> 00:09:21.079
hour or object relational
mapping framework.

00:09:21.079 --> 00:09:22.730
Private String.

00:09:22.730 --> 00:09:28.385
Lastname can copy that and
paste it three more times.

00:09:28.385 --> 00:09:31.499
For middle name.

00:09:32.050 --> 00:09:34.970
Next is email.

00:09:34.970 --> 00:09:38.374
And finally, the phone number.

00:09:38.374 --> 00:09:41.045
Select those go-to source,

00:09:41.045 --> 00:09:43.115
generate getters and setters.

00:09:43.115 --> 00:09:47.525
Select all that will be
after the phone hit.

00:09:47.525 --> 00:09:48.380
Okay.

00:09:48.380 --> 00:09:51.335
Do I control Shift F2 format.

00:09:51.335 --> 00:09:55.700
The last is the flight or
the reservation itself.

00:09:55.700 --> 00:10:03.950
So a new class,
reservation, finish.

00:10:03.950 --> 00:10:08.720
Reservation also will have
an id, private int id.

00:10:08.720 --> 00:10:11.374
Next is private.

00:10:11.374 --> 00:10:14.600
If you scroll down, it has
the number of bags and

00:10:14.600 --> 00:10:18.604
the chicken flag right here,

00:10:18.604 --> 00:10:22.864
checked in is the
flag, so checked in.

00:10:22.864 --> 00:10:24.980
And that is of type.

00:10:24.980 --> 00:10:28.205
Boolean means checked in,

00:10:28.205 --> 00:10:31.310
false means not checked in,

00:10:31.310 --> 00:10:33.980
or we can use the int
value as well if you want.

00:10:33.980 --> 00:10:36.995
But boolean is a
good type to use.

00:10:36.995 --> 00:10:43.310
Int number of bags
is the last field.

00:10:43.310 --> 00:10:45.679
So here we can define this as

00:10:45.679 --> 00:10:48.875
a class type as well if you
want or use a primitive type,

00:10:48.875 --> 00:10:50.780
both of them will work.

00:10:50.780 --> 00:10:53.645
So chicken, number
of bags and ID.

00:10:53.645 --> 00:10:56.180
We also have foreign
key references

00:10:56.180 --> 00:10:57.769
to passenger and flight table.

00:10:57.769 --> 00:11:00.409
We'll define that relationships
in the next lecture.

00:11:00.409 --> 00:11:03.094
So select all these
go-to source,

00:11:03.094 --> 00:11:05.330
generate getters and setters.

00:11:05.330 --> 00:11:09.349
Select all after
the number of bags.

00:11:09.349 --> 00:11:13.340
Okay, formatted.
In this lecture,

00:11:13.340 --> 00:11:14.480
you have successfully created

00:11:14.480 --> 00:11:16.594
the three entities,
namely flight,

00:11:16.594 --> 00:11:18.634
passenger, and reservation,

00:11:18.634 --> 00:11:21.839
that mapped to the
database tables.

00:11:22.330 --> 00:11:26.134
So far we have just
defined the model classes.

00:11:26.134 --> 00:11:28.909
They will become
JP entities only

00:11:28.909 --> 00:11:31.910
if we mark them with the
appropriate annotations.

00:11:31.910 --> 00:11:33.439
So let's mark each of

00:11:33.439 --> 00:11:36.815
these classes with
entity annotation.

00:11:36.815 --> 00:11:38.104
If you hit Control one,

00:11:38.104 --> 00:11:41.195
you can import that from
Java x dot persistence,

00:11:41.195 --> 00:11:44.195
which is the JPA package.

00:11:44.195 --> 00:11:47.194
So you can grab that
annotation, copy that,

00:11:47.194 --> 00:11:50.104
paste it on the
passenger class as well.

00:11:50.104 --> 00:11:53.555
And on the flight class.

00:11:53.555 --> 00:11:55.970
The only other
annotation that is

00:11:55.970 --> 00:11:58.295
required is on the ID field.

00:11:58.295 --> 00:12:02.480
We need to mark this
width at IID control one,

00:12:02.480 --> 00:12:05.285
again, imported from
Java x-dot persistence.

00:12:05.285 --> 00:12:08.239
And also we want this
to be automatically

00:12:08.239 --> 00:12:12.320
incremented or we need
to tell in the database,

00:12:12.320 --> 00:12:15.574
if you see this is an
auto-increment field.

00:12:15.574 --> 00:12:19.235
We need to specify the
generation strategy.

00:12:19.235 --> 00:12:24.424
Generation strategy
are generated value.

00:12:24.424 --> 00:12:27.260
This is the annotation from
JPA that we should use.

00:12:27.260 --> 00:12:28.939
Within brackets, we specify

00:12:28.939 --> 00:12:30.590
that generation strategy using

00:12:30.590 --> 00:12:37.805
the strategy attribute is
equal to generation type,

00:12:37.805 --> 00:12:42.259
dot generation type from JPA.

00:12:42.259 --> 00:12:46.779
That's an enumeration
dot identity.

00:12:46.779 --> 00:12:49.534
We are saying that this is Id

00:12:49.534 --> 00:12:51.050
and automatically that will be

00:12:51.050 --> 00:12:52.490
incremented in the database.

00:12:52.490 --> 00:12:53.645
So we need to repeat

00:12:53.645 --> 00:12:57.560
these two annotations
on all the IDs.

00:12:57.560 --> 00:12:58.879
For each of these.

00:12:58.879 --> 00:13:00.559
Instead of that, we
can move this to

00:13:00.559 --> 00:13:03.094
a common place just
to refactor this,

00:13:03.094 --> 00:13:06.239
do a Control X.

00:13:06.280 --> 00:13:09.170
And we're going
to define them in

00:13:09.170 --> 00:13:12.065
a parent class called
abstract entity.

00:13:12.065 --> 00:13:14.479
New class.

00:13:14.479 --> 00:13:19.355
Call it abstract entity.

00:13:19.355 --> 00:13:20.780
Finish.

00:13:20.780 --> 00:13:22.955
This class will have
only one field,

00:13:22.955 --> 00:13:24.470
the ID field, which will be

00:13:24.470 --> 00:13:26.525
marked with all the annotations.

00:13:26.525 --> 00:13:28.339
And this class itself
should be mapped

00:13:28.339 --> 00:13:33.060
with at mapped superclass.

00:13:33.100 --> 00:13:37.325
At mapped superclass from JPA.

00:13:37.325 --> 00:13:40.444
Once it loads up mapped

00:13:40.444 --> 00:13:43.445
superclass from Java
x dot persistence,

00:13:43.445 --> 00:13:44.779
hit Control one on

00:13:44.779 --> 00:13:47.855
this ID field and generate
getters and setters.

00:13:47.855 --> 00:13:51.634
Hit, Okay, we get the
getters and setters,

00:13:51.634 --> 00:13:53.599
go back to the
flight and you can

00:13:53.599 --> 00:13:55.940
get it off these two
getter and setter methods.

00:13:55.940 --> 00:14:05.664
And flight will now extend,
extends abstract entity.

00:14:05.664 --> 00:14:08.330
Automatically it will
get the id field.

00:14:08.330 --> 00:14:10.339
You can remove
these two imports.

00:14:10.339 --> 00:14:13.129
The advantage of this
is that we no longer

00:14:13.129 --> 00:14:16.384
have to repeat the
same code for the ID

00:14:16.384 --> 00:14:21.920
across all the entities
based or hear extent

00:14:21.920 --> 00:14:24.169
abstract entity
get rid of the id

00:14:24.169 --> 00:14:27.725
and the getter and setter
methods as well formatted.

00:14:27.725 --> 00:14:30.140
The last one is the reservation.

00:14:30.140 --> 00:14:36.000
Do the same. This should extend
abstract entity removed.

00:14:36.640 --> 00:14:39.484
In this lecture, you
have successfully mapped

00:14:39.484 --> 00:14:41.855
our entities to the
database tables that

00:14:41.855 --> 00:14:44.675
this Add entity annotation
maps this the reservation

00:14:44.675 --> 00:14:46.519
automatically to a table called

00:14:46.519 --> 00:14:48.695
reservation in the database.

00:14:48.695 --> 00:14:50.705
If you have a different
table name in the database,

00:14:50.705 --> 00:14:53.179
we can use table annotation and

00:14:53.179 --> 00:14:56.015
provide the table
name within brackets.

00:14:56.015 --> 00:14:58.459
But in our case, our class names

00:14:58.459 --> 00:15:00.530
and the table names
are the same.

00:15:00.530 --> 00:15:04.099
So at entity will
do the IDE itself.

00:15:04.099 --> 00:15:06.199
We have defined it
in abstract entity.

00:15:06.199 --> 00:15:08.524
We need to market with at ID.

00:15:08.524 --> 00:15:10.519
And that generated
a value strategy

00:15:10.519 --> 00:15:12.964
ies generation type identity,

00:15:12.964 --> 00:15:16.769
that is the type of
column in the database.

00:15:17.400 --> 00:15:21.160
One last step in defining
the entities is to

00:15:21.160 --> 00:15:24.280
define the relationship
between the reservation,

00:15:24.280 --> 00:15:27.654
the passenger, and the
flight in the database.

00:15:27.654 --> 00:15:29.229
As you would have noticed,

00:15:29.229 --> 00:15:33.370
the reservation uses are

00:15:33.370 --> 00:15:36.850
it needs to have the passenger
information under flight,

00:15:36.850 --> 00:15:39.714
information, that is how
a reservation will be.

00:15:39.714 --> 00:15:42.009
So we need to define
this relationship in

00:15:42.009 --> 00:15:45.114
our Java JPA entities as well.

00:15:45.114 --> 00:15:46.899
It's super easy to do that.

00:15:46.899 --> 00:15:49.705
Private flight.

00:15:49.705 --> 00:15:51.565
Flight.

00:15:51.565 --> 00:15:55.705
Reservation will have a
flight and also a passenger,

00:15:55.705 --> 00:15:59.549
a single passenger in
our use case, passenger.

00:15:59.549 --> 00:16:02.750
Once we do that, we
need to mark this width

00:16:02.750 --> 00:16:06.275
GPA annotation
called one to one,

00:16:06.275 --> 00:16:09.304
because this relationship is
a one-to-one relationship.

00:16:09.304 --> 00:16:10.505
Each reservation will have

00:16:10.505 --> 00:16:13.369
only one flight
and one passenger.

00:16:13.369 --> 00:16:16.609
So at 121, hit Control one.

00:16:16.609 --> 00:16:19.475
Import that from Java
x-dot persistence.

00:16:19.475 --> 00:16:24.950
Same on the second 1121
is the annotation.

00:16:24.950 --> 00:16:26.839
And you can generate getters and

00:16:26.839 --> 00:16:28.819
setters for this
hit Control one.

00:16:28.819 --> 00:16:31.250
Create getter and
setter for flight.

00:16:31.250 --> 00:16:33.139
Hit Control one on passenger,

00:16:33.139 --> 00:16:36.560
create getters and setters
for passenger as well.

00:16:36.560 --> 00:16:38.959
So these two
annotations will tell

00:16:38.959 --> 00:16:41.600
the JPA framework like

00:16:41.600 --> 00:16:43.159
hibernate that whenever we

00:16:43.159 --> 00:16:45.125
save a reservation
automatically,

00:16:45.125 --> 00:16:46.490
the flight primary key should

00:16:46.490 --> 00:16:48.109
be saved in the
reservation table.

00:16:48.109 --> 00:16:49.910
And the passenger
information as well.

00:16:49.910 --> 00:16:52.249
If the passenger does not
exist in the database,

00:16:52.249 --> 00:16:53.960
the passenger will be created,

00:16:53.960 --> 00:16:56.164
a row will be created
in the passenger table,

00:16:56.164 --> 00:16:58.820
and that primary key
will be saved in

00:16:58.820 --> 00:17:03.120
the reservation table right
here as a foreign key.

00:17:03.250 --> 00:17:05.659
So that is why we need to mark

00:17:05.659 --> 00:17:09.359
these fields at
one-to-one annotations.

00:17:10.330 --> 00:17:13.714
The next step is to
create the repositories,

00:17:13.714 --> 00:17:15.710
which will perform
the crud operations

00:17:15.710 --> 00:17:17.390
against the database.

00:17:17.390 --> 00:17:18.965
It's super easy to do that.

00:17:18.965 --> 00:17:21.634
All we need to do is to
create some interfaces.

00:17:21.634 --> 00:17:24.139
One interface part,
entity and spring

00:17:24.139 --> 00:17:26.779
will take care of the
implementation for us.

00:17:26.779 --> 00:17:30.079
Go to sts, right-click
on the package.

00:17:30.079 --> 00:17:35.210
Knew interface, not a
class but an interface.

00:17:35.210 --> 00:17:36.740
Change the package name to

00:17:36.740 --> 00:17:39.470
repos are repositories, repose.

00:17:39.470 --> 00:17:44.750
The name of the interface
is flight repository.

00:17:44.750 --> 00:17:46.880
For each of the
entities here we're

00:17:46.880 --> 00:17:48.740
going to create a repository and

00:17:48.740 --> 00:17:50.765
these repositories should extend

00:17:50.765 --> 00:17:52.369
an interface from spring.

00:17:52.369 --> 00:17:53.930
Click on this Add button.

00:17:53.930 --> 00:17:58.009
Search for JPA repository.

00:17:58.009 --> 00:18:00.620
And it will find the
following interface.

00:18:00.620 --> 00:18:03.949
Select that that is from
spring data package.

00:18:03.949 --> 00:18:06.830
It okay, Finish.

00:18:06.830 --> 00:18:09.500
You need to provide the type.

00:18:09.500 --> 00:18:11.600
This repository is
responsible for

00:18:11.600 --> 00:18:13.895
taking care of the
flight entity,

00:18:13.895 --> 00:18:17.299
control one important flight
from the other package.

00:18:17.299 --> 00:18:19.895
And the type of
ID inside flight.

00:18:19.895 --> 00:18:22.924
The id is of type integer.

00:18:22.924 --> 00:18:26.300
So we need to tell Spring or JPA

00:18:26.300 --> 00:18:29.119
what type of ID this flight has.

00:18:29.119 --> 00:18:31.010
It is of type integer.

00:18:31.010 --> 00:18:33.064
So you can copy this,

00:18:33.064 --> 00:18:34.894
paste it on the same package,

00:18:34.894 --> 00:18:39.485
change it to
passenger repository.

00:18:39.485 --> 00:18:43.295
Hit Okay, open up the
passenger repository.

00:18:43.295 --> 00:18:46.340
The only change here is
change this to passenger.

00:18:46.340 --> 00:18:48.274
Hit Control one.

00:18:48.274 --> 00:18:51.809
Should be passenger.

00:18:52.270 --> 00:18:55.775
Hit Control one
import passenger.

00:18:55.775 --> 00:18:59.270
That's it. You can get it
off the unwanted imports.

00:18:59.270 --> 00:19:00.470
The flight is not require

00:19:00.470 --> 00:19:03.769
hit control D to delete that
by pointing your cursor.

00:19:03.769 --> 00:19:06.514
The last one is the
Reservation Repository.

00:19:06.514 --> 00:19:09.769
Copy of that repository is
paste it on this package,

00:19:09.769 --> 00:19:16.070
changes the name to
Reservation Repository.

00:19:16.070 --> 00:19:17.689
Hit, Okay.

00:19:17.689 --> 00:19:20.090
Open up the Reservation
Repository,

00:19:20.090 --> 00:19:26.609
change this entity to type
reservation and import that.

00:19:28.630 --> 00:19:31.580
So we have created all
the three repositories

00:19:31.580 --> 00:19:33.709
which will allow us
to perform, create,

00:19:33.709 --> 00:19:35.720
read, update, and delete against

00:19:35.720 --> 00:19:39.179
the following database tables.

00:19:39.990 --> 00:19:42.609
In this lecture,
we will expose out

00:19:42.609 --> 00:19:45.085
the very first
RESTful API method,

00:19:45.085 --> 00:19:47.620
which is the find
flights method.

00:19:47.620 --> 00:19:50.649
The end user or the client
will be able to use

00:19:50.649 --> 00:19:54.745
this URI slash flights
with the HTTP GET method.

00:19:54.745 --> 00:19:56.035
And when he does that,

00:19:56.035 --> 00:19:57.640
he should get a list of

00:19:57.640 --> 00:20:00.205
flights available
from our database.

00:20:00.205 --> 00:20:03.519
Go to SDS. The first step is to

00:20:03.519 --> 00:20:06.849
create the reservation
rest controller.

00:20:06.849 --> 00:20:08.949
This reservation rest
controller will use

00:20:08.949 --> 00:20:11.110
the repository
interfaces that you have

00:20:11.110 --> 00:20:13.795
created earlier to
access the database,

00:20:13.795 --> 00:20:17.695
to fetch information or to
do the Save send updates.

00:20:17.695 --> 00:20:21.810
Go to SDS, right-click on
any one of the packages,

00:20:21.810 --> 00:20:30.390
say new class, call it
reservation rest controller.

00:20:30.460 --> 00:20:33.589
And the package
should be com.net dot

00:20:33.589 --> 00:20:36.410
flight services dot API,

00:20:36.410 --> 00:20:38.479
or we can call it integration

00:20:38.479 --> 00:20:41.644
because this is the
integration layer which

00:20:41.644 --> 00:20:44.240
allows other applications
to communicate with

00:20:44.240 --> 00:20:47.765
this application or to integrate
with this application.

00:20:47.765 --> 00:20:49.769
Finish.

00:20:50.410 --> 00:20:53.134
To make this a controller class,

00:20:53.134 --> 00:20:56.434
in spring, we need to
market width at rest.

00:20:56.434 --> 00:21:00.229
Controller annotation.
Hit Control one.

00:21:00.229 --> 00:21:03.844
Important that, that will
make it a RESTful controller.

00:21:03.844 --> 00:21:07.129
Create a method which will
return a list of flights.

00:21:07.129 --> 00:21:08.344
Public.

00:21:08.344 --> 00:21:11.479
Find flights is the method name.

00:21:11.479 --> 00:21:16.955
And this method should
return a list of flights.

00:21:16.955 --> 00:21:22.999
So list of flight control one,

00:21:22.999 --> 00:21:25.775
import lists from java.util

00:21:25.775 --> 00:21:28.789
control one important flight
from our very own package.

00:21:28.789 --> 00:21:32.060
This is nothing but the entity
we have created earlier.

00:21:32.060 --> 00:21:34.024
Hit Control one on the error,

00:21:34.024 --> 00:21:35.495
add a return statement.

00:21:35.495 --> 00:21:38.959
The next step is to
map this method to

00:21:38.959 --> 00:21:42.529
the HTTP GET method to this URI.

00:21:42.529 --> 00:21:44.239
We have to bind it to that URI.

00:21:44.239 --> 00:21:46.324
We do that using it.

00:21:46.324 --> 00:21:51.479
Request mapping,
annotation from spring.

00:21:55.150 --> 00:21:58.624
At request mapping from spring,

00:21:58.624 --> 00:22:00.499
once you have that
annotation within

00:22:00.499 --> 00:22:07.655
brackets, provide a value.

00:22:07.655 --> 00:22:09.980
Attribute value is equal
to this is where we do

00:22:09.980 --> 00:22:13.024
the URI slash flights.

00:22:13.024 --> 00:22:20.615
Comma method is equal to
request method dot get.

00:22:20.615 --> 00:22:22.565
That again is from spring.

00:22:22.565 --> 00:22:25.430
Request method is enumeration

00:22:25.430 --> 00:22:27.934
that has all the
history to be methods.

00:22:27.934 --> 00:22:30.454
We're binding this
method to slash

00:22:30.454 --> 00:22:33.085
flights URI and the
HTTP GET method.

00:22:33.085 --> 00:22:35.690
Here we need to return
all the flights back.

00:22:35.690 --> 00:22:36.829
That is where we will be using

00:22:36.829 --> 00:22:40.610
the flight repository that
you have created earlier.

00:22:40.610 --> 00:22:46.385
Flight rapport C3 until
one, import that.

00:22:46.385 --> 00:22:49.265
And mark this with auto

00:22:49.265 --> 00:22:54.630
wired annotation from spring
control one again imported.

00:22:54.940 --> 00:22:58.280
This annotation tells
Spring framework

00:22:58.280 --> 00:23:00.320
that it should create
a implementation of

00:23:00.320 --> 00:23:02.150
this repository
dynamically at runtime

00:23:02.150 --> 00:23:04.400
and injected or auto wire it

00:23:04.400 --> 00:23:06.499
into this field so
that we can use it

00:23:06.499 --> 00:23:09.274
wherever we want within
this class and methods.

00:23:09.274 --> 00:23:14.599
Here, you can use flight
repository, taught.

00:23:17.340 --> 00:23:19.720
Flight repository.

00:23:19.720 --> 00:23:20.905
I got the spelling wrong here.

00:23:20.905 --> 00:23:23.095
So it should be
flight repository.

00:23:23.095 --> 00:23:27.235
Now I can use it
flight repository

00:23:27.235 --> 00:23:30.850
dot find all that said.

00:23:30.850 --> 00:23:32.200
It's that simple because we have

00:23:32.200 --> 00:23:34.480
a repository called
flight Repository.

00:23:34.480 --> 00:23:36.429
Spring will automatically create

00:23:36.429 --> 00:23:38.289
a implementation for
it dynamically at

00:23:38.289 --> 00:23:42.925
runtime and it will invoke
that find all method.

00:23:42.925 --> 00:23:45.745
Internally this find all
will execute a select query,

00:23:45.745 --> 00:23:46.989
fetch all the flights,

00:23:46.989 --> 00:23:50.274
convert them into
a list of flights,

00:23:50.274 --> 00:23:51.580
and return it back.

00:23:51.580 --> 00:23:53.129
That is what we're
returning here.

00:23:53.129 --> 00:23:57.319
Spring will automatically
convert this into JSON,

00:23:57.319 --> 00:23:59.390
which our clients can then read

00:23:59.390 --> 00:24:02.659
and de-serialized
into JavaScript, etc.

00:24:02.659 --> 00:24:06.470
So in this lecture, you
have created a controller,

00:24:06.470 --> 00:24:09.214
which will be our
restful resource.

00:24:09.214 --> 00:24:12.440
You Hammacher that controller
with rest controller.

00:24:12.440 --> 00:24:15.049
So that spring we'll know that
this is a rest controller.

00:24:15.049 --> 00:24:16.339
Within that you have created

00:24:16.339 --> 00:24:17.899
a method called find flights.

00:24:17.899 --> 00:24:22.640
You have binded that method
to a URI call flights.

00:24:22.640 --> 00:24:24.845
And the HTTP method get

00:24:24.845 --> 00:24:27.380
using at request
mapping annotation.

00:24:27.380 --> 00:24:29.090
And within that method,

00:24:29.090 --> 00:24:31.549
we have used the flight
repository which you

00:24:31.549 --> 00:24:34.639
are auto injecting right here.

00:24:34.639 --> 00:24:38.225
How invoke the find all
method which returns a list

00:24:38.225 --> 00:24:42.180
of flights that are
retrieved from the database.

00:24:42.700 --> 00:24:45.334
In this and the next lecture,

00:24:45.334 --> 00:24:49.639
we will create a save
reservation restful method.

00:24:49.639 --> 00:24:51.769
This method will be binded to

00:24:51.769 --> 00:24:56.479
the HTTP post method and
also the URI that it will be

00:24:56.479 --> 00:24:59.524
binded to E slash reservations
because we are adding

00:24:59.524 --> 00:25:00.979
a new reservation to

00:25:00.979 --> 00:25:03.814
the existing collection
of reservations.

00:25:03.814 --> 00:25:06.770
That is why we use
slash reservations.

00:25:06.770 --> 00:25:10.430
Go to SDS, low to

00:25:10.430 --> 00:25:14.390
our controller and add
the new method public.

00:25:14.390 --> 00:25:17.344
This guy will return,
sail reservation back.

00:25:17.344 --> 00:25:20.480
So public reservation, Create

00:25:20.480 --> 00:25:24.635
Reservation or you can
call it save reservation.

00:25:24.635 --> 00:25:29.929
And it takes a create,
a reservation request.

00:25:29.929 --> 00:25:31.775
This class does not exist yet.

00:25:31.775 --> 00:25:33.095
We're going to create it.

00:25:33.095 --> 00:25:36.634
First import reservation
by hitting Control one,

00:25:36.634 --> 00:25:39.635
and then hit Control
one on this.

00:25:39.635 --> 00:25:42.710
And SDS will give you an
option of creating a class,

00:25:42.710 --> 00:25:46.069
create this inside a
package called Flight

00:25:46.069 --> 00:25:50.929
services.dd for data
transfer object.

00:25:50.929 --> 00:25:52.655
So this class will have

00:25:52.655 --> 00:25:55.745
all the fields that are required
to create a reservation.

00:25:55.745 --> 00:25:58.520
And our clients
will send that as

00:25:58.520 --> 00:26:01.700
JSON and the client request
comes in in JSON format,

00:26:01.700 --> 00:26:04.280
all that reservation
creation information will

00:26:04.280 --> 00:26:07.729
be deserialized into this class.

00:26:07.729 --> 00:26:09.709
So this will have the
passenger firstName,

00:26:09.709 --> 00:26:10.940
passenger lastName,

00:26:10.940 --> 00:26:12.469
the credit card information,

00:26:12.469 --> 00:26:14.480
et cetera, even the flight ID.

00:26:14.480 --> 00:26:15.979
So start with the flight ID,

00:26:15.979 --> 00:26:19.535
private int, flight ID.

00:26:19.535 --> 00:26:22.205
There's the first
field, private,

00:26:22.205 --> 00:26:27.270
string, passenger, first name.

00:26:27.820 --> 00:26:32.584
Again, copy that and paste it.

00:26:32.584 --> 00:26:35.339
So six times.

00:26:35.800 --> 00:26:40.220
The second field is
passenger lastName.

00:26:40.220 --> 00:26:42.889
The third field is passenger.

00:26:42.889 --> 00:26:44.480
Middle name.

00:26:44.480 --> 00:26:48.860
Next is the passenger
email and phone.

00:26:48.860 --> 00:26:55.925
Passenger email,
passenger phone.

00:26:55.925 --> 00:26:58.010
And then the card
information which we're

00:26:58.010 --> 00:27:00.740
not going to use
but codon number.

00:27:00.740 --> 00:27:04.384
These are for demonstration
reasons, paste it again.

00:27:04.384 --> 00:27:09.874
Expiration date of the card
and last but not the least,

00:27:09.874 --> 00:27:14.795
security cord on the card.

00:27:14.795 --> 00:27:17.869
Flight ID, all the
passenger details that are

00:27:17.869 --> 00:27:20.404
required to create
that reservation.

00:27:20.404 --> 00:27:22.430
And then the card information.

00:27:22.430 --> 00:27:24.994
Select all these go-to source,

00:27:24.994 --> 00:27:26.989
generate getters and setters.

00:27:26.989 --> 00:27:32.029
Select all insertion point
is after security code hit,

00:27:32.029 --> 00:27:36.424
Okay, hit Control Shift
F to format that code.

00:27:36.424 --> 00:27:39.275
Go back to the reservation
rest controller.

00:27:39.275 --> 00:27:41.314
Open up the body of the method.

00:27:41.314 --> 00:27:42.559
We are going to
implement the method

00:27:42.559 --> 00:27:43.909
itself in the next lecture.

00:27:43.909 --> 00:27:45.664
For now hit Control one.

00:27:45.664 --> 00:27:48.020
Add the return statement
so that the error will go

00:27:48.020 --> 00:27:50.330
away and map this method

00:27:50.330 --> 00:27:55.430
using a request
mapping annotation.

00:27:55.430 --> 00:28:04.040
The value is equal to slash
reservations is the URL,

00:28:04.040 --> 00:28:07.760
URI comma, the method,

00:28:07.760 --> 00:28:11.750
the HTTP method is equal to
no need of double-quotes.

00:28:11.750 --> 00:28:18.425
We can use request method
dot post is the method.

00:28:18.425 --> 00:28:20.839
We are binding this
method to HTTP post,

00:28:20.839 --> 00:28:22.759
and this is the URI
the client should use

00:28:22.759 --> 00:28:25.830
to save it reservation.

00:28:27.100 --> 00:28:29.419
The next key step is to

00:28:29.419 --> 00:28:31.999
implement the same
reservation method.

00:28:31.999 --> 00:28:34.820
To do that, we need to first fit

00:28:34.820 --> 00:28:37.775
the flight information
from the database.

00:28:37.775 --> 00:28:41.719
This request has
the flight phase

00:28:41.719 --> 00:28:43.505
that flight then create

00:28:43.505 --> 00:28:46.009
a passenger sale that
passenger to the database.

00:28:46.009 --> 00:28:48.650
Then we will use the
flight information and

00:28:48.650 --> 00:28:52.834
the passenger information
to save the reservation.

00:28:52.834 --> 00:28:56.794
Go to the method.
And the first step

00:28:56.794 --> 00:29:00.575
is to fetch the flight using
the flight or repository.

00:29:00.575 --> 00:29:05.015
Flight repository dot find one.

00:29:05.015 --> 00:29:07.910
Find one. You can pass it.

00:29:07.910 --> 00:29:12.289
Or find by id is the matter
that we should use passive

00:29:12.289 --> 00:29:13.490
the flight ID request

00:29:13.490 --> 00:29:18.109
dot get flight ID will
give us the flight ID dot.

00:29:18.109 --> 00:29:20.120
You need to invoke
the get method to get

00:29:20.120 --> 00:29:22.820
a flight object out of it.

00:29:22.820 --> 00:29:24.739
So hit Control one,

00:29:24.739 --> 00:29:26.119
assign this statement to

00:29:26.119 --> 00:29:28.579
a new local variable,
call it flight.

00:29:28.579 --> 00:29:32.794
The next step is to create
a passenger entity.

00:29:32.794 --> 00:29:38.210
So new passenger control,

00:29:38.210 --> 00:29:40.999
one important that passenger
hit Control on again,

00:29:40.999 --> 00:29:42.710
assign statement to a
new local variable,

00:29:42.710 --> 00:29:44.420
call it Passenger.

00:29:44.420 --> 00:29:46.714
Passenger dot.

00:29:46.714 --> 00:29:52.415
Set. Firstname is
equal to request dot,

00:29:52.415 --> 00:29:58.205
get first name, get
passenger firstName.

00:29:58.205 --> 00:30:00.815
From the request, we are
taking the firstName,

00:30:00.815 --> 00:30:02.570
setting it to the firstname on

00:30:02.570 --> 00:30:04.160
the passenger entity
so that we can

00:30:04.160 --> 00:30:05.900
save it to the
database later on.

00:30:05.900 --> 00:30:11.639
Next, passenger
dot set lastName.

00:30:15.370 --> 00:30:23.045
Again, we'll get the request
dot, get passenger lastName.

00:30:23.045 --> 00:30:24.454
Similarly, we need to set

00:30:24.454 --> 00:30:26.749
the other fields as well
so you can copy this,

00:30:26.749 --> 00:30:29.165
paste it three times.

00:30:29.165 --> 00:30:32.419
The third one is middle name.

00:30:32.419 --> 00:30:36.079
Change that to middle
name on the left as well.

00:30:36.079 --> 00:30:39.920
Middle name next is email.

00:30:39.920 --> 00:30:42.140
Set email.

00:30:42.140 --> 00:30:46.234
And here we should
get passenger email.

00:30:46.234 --> 00:30:48.920
And the last one is set

00:30:48.920 --> 00:30:51.934
phone information
of the passenger.

00:30:51.934 --> 00:30:55.830
And get passenger phone.

00:30:55.900 --> 00:31:00.455
So we have set all the
fields on the passenger.

00:31:00.455 --> 00:31:03.034
Now we'll use the
passenger repository

00:31:03.034 --> 00:31:05.660
and save this passenger
to the database.

00:31:05.660 --> 00:31:07.789
We need to inject
that right here.

00:31:07.789 --> 00:31:13.100
Passenger, rapport Sitecore,
call it passenger report,

00:31:13.100 --> 00:31:19.129
secondary market with
auto wired annotation.

00:31:19.129 --> 00:31:20.720
Hit Control one important,

00:31:20.720 --> 00:31:23.150
the passenger repository that
you have created earlier.

00:31:23.150 --> 00:31:24.440
Let me add some lines here

00:31:24.440 --> 00:31:26.819
so that you can see it clearly.

00:31:26.980 --> 00:31:31.970
Passenger repository dot save

00:31:31.970 --> 00:31:34.340
is the method that takes
the passenger object,

00:31:34.340 --> 00:31:36.780
saves it to the database.

00:31:37.420 --> 00:31:40.715
It will return that
saved object back,

00:31:40.715 --> 00:31:43.009
which will have an id as well.

00:31:43.009 --> 00:31:46.654
Here we are not setting the
ID because the ID field

00:31:46.654 --> 00:31:48.139
is the primary key and it is

00:31:48.139 --> 00:31:50.854
an auto-increment
field in the database.

00:31:50.854 --> 00:31:54.140
So automatically that
id will be created when

00:31:54.140 --> 00:31:57.110
the record is inserted and
when this object returns,

00:31:57.110 --> 00:31:58.520
when this method
returns an object,

00:31:58.520 --> 00:32:00.259
that object will have an id.

00:32:00.259 --> 00:32:01.474
So hit Control one,

00:32:01.474 --> 00:32:03.530
assign statement to
any local variable,

00:32:03.530 --> 00:32:06.815
call it saved passenger.

00:32:06.815 --> 00:32:10.850
Saved passenger, that
will have an ID on it.

00:32:10.850 --> 00:32:12.905
Now we have the
flight information

00:32:12.905 --> 00:32:14.915
and the passenger information.

00:32:14.915 --> 00:32:16.550
We can save a reservation.

00:32:16.550 --> 00:32:21.150
So create a new
reservation object.

00:32:21.670 --> 00:32:24.199
Hit Control one
assign statement to

00:32:24.199 --> 00:32:27.200
a new local variable
on this reservation,

00:32:27.200 --> 00:32:30.439
reservation dot set flight.

00:32:30.439 --> 00:32:32.209
So that will be
the flight we are

00:32:32.209 --> 00:32:34.474
retrieving here
that's already set.

00:32:34.474 --> 00:32:39.274
Reservation dot set
passenger is the next one.

00:32:39.274 --> 00:32:41.195
Set disabled passenger onto it.

00:32:41.195 --> 00:32:41.779
That's fine.

00:32:41.779 --> 00:32:44.000
So that's disabled passenger.
We're setting that.

00:32:44.000 --> 00:32:45.830
And the last field
we want to set is

00:32:45.830 --> 00:32:50.120
a reservation dot
set checked in.

00:32:50.120 --> 00:32:51.620
That flag should be

00:32:51.620 --> 00:32:53.974
false when the
reservation is created,

00:32:53.974 --> 00:32:56.209
the passenger is not checked in.

00:32:56.209 --> 00:32:58.189
We'll take them in
later on when he

00:32:58.189 --> 00:33:00.665
checks in using the
chicken application.

00:33:00.665 --> 00:33:02.599
And this will return,

00:33:02.599 --> 00:33:06.170
whenever we save that will
return as a reservation.

00:33:06.170 --> 00:33:07.849
To save this reservation now,

00:33:07.849 --> 00:33:10.190
we needed the
Reservation Repository.

00:33:10.190 --> 00:33:13.234
So finally we have used
all the repositories,

00:33:13.234 --> 00:33:16.204
the flight repository,
the passenger repository.

00:33:16.204 --> 00:33:21.379
Next is the Reservation
Repository.

00:33:21.379 --> 00:33:24.965
The salvation repository.

00:33:24.965 --> 00:33:29.540
Market with auto wide
annotation control.

00:33:29.540 --> 00:33:34.100
One important that Reservation
Repository scroll down.

00:33:34.100 --> 00:33:39.930
This is where we'll invoke
Reservation Repository.

00:33:40.810 --> 00:33:44.180
Dot save that.

00:33:44.180 --> 00:33:46.835
We'll take a reservation object.

00:33:46.835 --> 00:33:48.920
It will save it to
the database and

00:33:48.920 --> 00:33:50.720
it will return the
sacred object,

00:33:50.720 --> 00:33:52.790
which will have the ID back.

00:33:52.790 --> 00:33:54.740
So you can assign that
to a local variable,

00:33:54.740 --> 00:33:56.615
call it saved reservation,

00:33:56.615 --> 00:33:58.010
or get rid of it,

00:33:58.010 --> 00:34:00.184
and simply add a
return statement here,

00:34:00.184 --> 00:34:01.999
delete this return statement.

00:34:01.999 --> 00:34:04.100
What our reservation comes back.

00:34:04.100 --> 00:34:07.564
We are returning that
reservation back to the client.

00:34:07.564 --> 00:34:09.829
In this lecture, you have
successfully implemented

00:34:09.829 --> 00:34:11.794
the same reservation method

00:34:11.794 --> 00:34:14.555
by retrieving the
flight information,

00:34:14.555 --> 00:34:16.685
creating a new passenger
in the database.

00:34:16.685 --> 00:34:17.899
Then we have user their plight,

00:34:17.899 --> 00:34:20.225
inflammation and the
passenger details

00:34:20.225 --> 00:34:23.030
to create a reservation
in the database.

00:34:23.030 --> 00:34:25.715
It is important that
we mark this method

00:34:25.715 --> 00:34:30.994
with transactional
annotation from Spring,

00:34:30.994 --> 00:34:33.020
hit Control on
imported from spring,

00:34:33.020 --> 00:34:35.030
not from Java x-dot transaction,

00:34:35.030 --> 00:34:37.400
but from org dot
Spring framework.

00:34:37.400 --> 00:34:40.775
Because here we have
multiple saves going on.

00:34:40.775 --> 00:34:43.059
So if this cell fails,

00:34:43.059 --> 00:34:47.144
should be rolled back or
if the sale here fails,

00:34:47.144 --> 00:34:49.199
we don't want to save the
passenger information

00:34:49.199 --> 00:34:50.400
into the database.

00:34:50.400 --> 00:34:53.730
So all should happen or
nothing should happen.

00:34:53.730 --> 00:34:56.399
That is what this at
transactional is for.

00:34:56.399 --> 00:34:59.760
Spring will internally
create a transaction.

00:34:59.760 --> 00:35:03.569
The boundary for the transaction
is this complete method.

00:35:03.569 --> 00:35:05.520
The transaction will
start right here.

00:35:05.520 --> 00:35:08.919
It will end at the
end of the method.

00:35:10.690 --> 00:35:15.290
The next step is to create
the find reservation RESTful

00:35:15.290 --> 00:35:16.789
API methods that will help

00:35:16.789 --> 00:35:19.640
the clients in the
chicken process.

00:35:19.640 --> 00:35:22.640
The client needs to first
fetch the reservation,

00:35:22.640 --> 00:35:25.864
then allow the passenger to
enter the number of bags,

00:35:25.864 --> 00:35:28.130
bags, and update the reservation

00:35:28.130 --> 00:35:29.794
with the chicken information.

00:35:29.794 --> 00:35:32.194
So find reservation
is straightforward.

00:35:32.194 --> 00:35:33.860
From the reservations
collection,

00:35:33.860 --> 00:35:36.559
we're going to return a
reservation that will

00:35:36.559 --> 00:35:40.099
match a given ID in the URL.

00:35:40.099 --> 00:35:43.444
So the URL is slash
reservations slash id,

00:35:43.444 --> 00:35:45.980
which could be 123, etc,

00:35:45.980 --> 00:35:49.069
which matches the reservation
ID in their database.

00:35:49.069 --> 00:35:54.289
And the HTTP method
is GET or two STS.

00:35:54.289 --> 00:35:58.640
And implement a new
method called public.

00:35:58.640 --> 00:36:00.869
Let me scroll it up.

00:36:01.390 --> 00:36:06.245
Public, this returns
our reservation back.

00:36:06.245 --> 00:36:10.414
And the method name
is find reservation.

00:36:10.414 --> 00:36:13.969
And the parameter here is int,

00:36:13.969 --> 00:36:17.254
reservation, ID or ID.

00:36:17.254 --> 00:36:20.479
Hit Control one, add
a return statement,

00:36:20.479 --> 00:36:24.380
map this method using
a request mapping.

00:36:24.380 --> 00:36:30.719
Within brackets, the
value is equal to slash,

00:36:31.780 --> 00:36:36.065
slash within flower brackets ID.

00:36:36.065 --> 00:36:38.464
So this acts as a placeholder

00:36:38.464 --> 00:36:41.465
for whatever id that
comes in the URL.

00:36:41.465 --> 00:36:44.914
So it is slashed
reservations slash id,

00:36:44.914 --> 00:36:47.899
and we need to inject this
ID into the parameter here.

00:36:47.899 --> 00:36:52.895
We do that using an annotation
called path variable.

00:36:52.895 --> 00:36:55.250
Within brackets,
we need to specify

00:36:55.250 --> 00:36:57.515
the name that we have used here.

00:36:57.515 --> 00:36:58.999
So this name could
be different from

00:36:58.999 --> 00:37:01.400
the field name or the
parameter name itself,

00:37:01.400 --> 00:37:05.194
but it's always a convention
that we use the same names.

00:37:05.194 --> 00:37:09.364
Hit Control one import
path variable from spring.

00:37:09.364 --> 00:37:12.890
So, so far we have mapped
with this method to a URI.

00:37:12.890 --> 00:37:16.280
And in the URI we are
randomly getting a ID.

00:37:16.280 --> 00:37:18.860
So we are mapping
that ID or injecting

00:37:18.860 --> 00:37:20.585
that ID into this parameter

00:37:20.585 --> 00:37:22.834
so that we can use it
inside this method.

00:37:22.834 --> 00:37:27.350
Return Reservation
Repository hit

00:37:27.350 --> 00:37:30.470
control space that will
show you all the options.

00:37:30.470 --> 00:37:35.480
Reservation Repository
dot find, one.

00:37:35.480 --> 00:37:38.584
Pass in the ID, we get
a reservation back.

00:37:38.584 --> 00:37:43.204
Dot git will give us
the actual reservation,

00:37:43.204 --> 00:37:45.395
should not be fined one find by

00:37:45.395 --> 00:37:47.780
ID used to be find
one at one point,

00:37:47.780 --> 00:37:49.685
but the APA has changed.

00:37:49.685 --> 00:37:53.630
Reservation Repository dot
find by ID, passenger,

00:37:53.630 --> 00:37:59.279
ID dot get will give us
the reservation entity.

00:38:00.760 --> 00:38:03.829
The last of the APA methods is

00:38:03.829 --> 00:38:06.949
the update reservation method
or the chicken method.

00:38:06.949 --> 00:38:10.309
This is where the client
will chicken by providing

00:38:10.309 --> 00:38:13.595
the number of bags he wants
to chicken and also the flag,

00:38:13.595 --> 00:38:16.750
the chicken flag will
come in as true.

00:38:16.750 --> 00:38:18.859
To implement this, go to SDS and

00:38:18.859 --> 00:38:20.689
we're going to map
this method to

00:38:20.689 --> 00:38:22.775
a HTTP port because

00:38:22.775 --> 00:38:25.789
update methods are
often mapper to HTTP.

00:38:25.789 --> 00:38:29.405
Put. Go to SDS.

00:38:29.405 --> 00:38:32.405
We're going to create
a new method public.

00:38:32.405 --> 00:38:35.509
We can either leave
this as void or

00:38:35.509 --> 00:38:38.794
we can return the updated
reservation back.

00:38:38.794 --> 00:38:45.724
Update reservation is the
method and we need to update

00:38:45.724 --> 00:38:50.030
a reservation request so
that the client can pass

00:38:50.030 --> 00:38:51.949
in the information
and we'll take

00:38:51.949 --> 00:38:54.710
that in this request,
call it request.

00:38:54.710 --> 00:38:56.690
This class does not exist.

00:38:56.690 --> 00:38:58.879
We're going to create
it, hit Control one.

00:38:58.879 --> 00:39:01.670
Create class that should go into

00:39:01.670 --> 00:39:06.060
the package called
Flight services.dto.

00:39:06.310 --> 00:39:10.355
This class will have
three fields on it.

00:39:10.355 --> 00:39:15.454
The first wheel is the private
int, the reservation ID.

00:39:15.454 --> 00:39:19.799
So reservation ID
is the first field.

00:39:20.290 --> 00:39:23.720
We can also simply use ID
because we know that this

00:39:23.720 --> 00:39:26.689
is a reservation that is
being updated private.

00:39:26.689 --> 00:39:33.005
Second field is the
chicken flag. Chicken.

00:39:33.005 --> 00:39:36.529
This will be of type Boolean.

00:39:36.529 --> 00:39:39.349
And the last field
that we need is

00:39:39.349 --> 00:39:42.319
the private number
of bags to chicken.

00:39:42.319 --> 00:39:46.440
This can be, again,
number of bags.

00:39:46.510 --> 00:39:48.649
Select those three.

00:39:48.649 --> 00:39:51.769
Go-to source, generate
getters and setters.

00:39:51.769 --> 00:39:55.954
Select all after
the last member.

00:39:55.954 --> 00:39:57.950
Will have getters and setters do

00:39:57.950 --> 00:40:00.049
a Control Shift F2 format,

00:40:00.049 --> 00:40:02.915
go back to the
RESTful controller.

00:40:02.915 --> 00:40:06.050
Save this, hit Control one,

00:40:06.050 --> 00:40:07.624
add a return statement.

00:40:07.624 --> 00:40:10.100
You can grab the
request mapping from

00:40:10.100 --> 00:40:12.904
the create method right here,

00:40:12.904 --> 00:40:15.380
flash reservations and
the method is post.

00:40:15.380 --> 00:40:17.549
You can grab that guy,

00:40:18.250 --> 00:40:24.139
Come down and on the Update
reservation method, paste it.

00:40:24.139 --> 00:40:25.930
And the method here
should be changed

00:40:25.930 --> 00:40:28.444
to put instead of post.

00:40:28.444 --> 00:40:30.649
And inside this
method will create

00:40:30.649 --> 00:40:32.885
a new reservation entity.

00:40:32.885 --> 00:40:34.850
Or we need to fetch
the reservation

00:40:34.850 --> 00:40:36.860
from the database so
that we can update it.

00:40:36.860 --> 00:40:40.040
So the first step is to
fetch the reservation,

00:40:40.040 --> 00:40:47.060
reservation repository
dot find by ID,

00:40:47.060 --> 00:40:50.045
request dot get ID.

00:40:50.045 --> 00:40:52.069
In the request we get the id.

00:40:52.069 --> 00:40:55.519
We are using the find by ID
to fetch the reservation dot.

00:40:55.519 --> 00:40:59.490
Get is the method that
returns reservation.

00:40:59.740 --> 00:41:03.080
Hit Control one.
That's IN statement

00:41:03.080 --> 00:41:04.100
to a new local variable.

00:41:04.100 --> 00:41:06.259
So this is the current
reservation in the database.

00:41:06.259 --> 00:41:09.425
We need to update this
with reservation dot set.

00:41:09.425 --> 00:41:11.809
Number of bags is equal to

00:41:11.809 --> 00:41:15.619
request dot set or
get from the request,

00:41:15.619 --> 00:41:20.674
get the number of bags and
set it on to the reservation.

00:41:20.674 --> 00:41:22.669
The last field we
want to update is

00:41:22.669 --> 00:41:26.510
the reservation dot
set checked in.

00:41:26.510 --> 00:41:28.804
This flag should be true.

00:41:28.804 --> 00:41:30.844
So that will come in
the request as well.

00:41:30.844 --> 00:41:35.374
Request dot get number of nodes.

00:41:35.374 --> 00:41:40.685
It should be get checked in R.

00:41:40.685 --> 00:41:42.934
Since it's a Boolean flag,

00:41:42.934 --> 00:41:47.450
the method itself is
called, is checked in.

00:41:47.450 --> 00:41:49.099
So go back.

00:41:49.099 --> 00:41:53.100
Request dot is checked in.

00:41:53.620 --> 00:41:55.219
Here.

00:41:55.219 --> 00:42:01.564
We can return Reservation
Repository dot, save.

00:42:01.564 --> 00:42:04.080
Passing this reservation.

00:42:04.520 --> 00:42:07.250
That same method will return

00:42:07.250 --> 00:42:09.139
the same updated reservation and

00:42:09.139 --> 00:42:11.480
we're returning that
back to the client.

00:42:11.480 --> 00:42:13.430
So this sale method does both

00:42:13.430 --> 00:42:15.725
the creation as
well as updation.

00:42:15.725 --> 00:42:18.035
If this reservation
has an ID already,

00:42:18.035 --> 00:42:19.099
then this method knows

00:42:19.099 --> 00:42:21.290
that this is not a
new reservation.

00:42:21.290 --> 00:42:23.300
It is a update
that is happening,

00:42:23.300 --> 00:42:26.720
so it will just execute it
update sequel statement.

00:42:26.720 --> 00:42:29.089
So in this lecture,
we have implemented

00:42:29.089 --> 00:42:31.820
the update reservation
method that is used

00:42:31.820 --> 00:42:34.820
during the check-in process
to chicken air passenger.

00:42:34.820 --> 00:42:36.079
We are mapped it to slash

00:42:36.079 --> 00:42:38.389
reservations put
you are fetching

00:42:38.389 --> 00:42:39.679
the current reservation from

00:42:39.679 --> 00:42:42.395
the database using the
ID in the request.

00:42:42.395 --> 00:42:44.299
Then you are setting the
number of bags that come

00:42:44.299 --> 00:42:46.099
in the request and
the chicken flag

00:42:46.099 --> 00:42:48.200
to whatever the client sends

00:42:48.200 --> 00:42:50.824
him for chicken,
this will be true.

00:42:50.824 --> 00:42:53.149
And you're saving
that reservation,

00:42:53.149 --> 00:42:54.335
which does the update,

00:42:54.335 --> 00:42:57.870
and you are returning
that reservation pack.

00:42:58.360 --> 00:43:02.599
The last step is to
configure the data source,

00:43:02.599 --> 00:43:04.610
that is the database
connection information,

00:43:04.610 --> 00:43:07.580
and also give a unique name for

00:43:07.580 --> 00:43:09.919
our web application so that
the clients will use it in

00:43:09.919 --> 00:43:12.589
the URL when they
access our application.

00:43:12.589 --> 00:43:15.320
All that can be done by going to

00:43:15.320 --> 00:43:16.940
the application dot properties

00:43:16.940 --> 00:43:19.040
under source main resources.

00:43:19.040 --> 00:43:20.870
Open that file.

00:43:20.870 --> 00:43:23.390
There's a property file
that will be read by

00:43:23.390 --> 00:43:26.494
the Spring Boot when
our application is run.

00:43:26.494 --> 00:43:32.869
So spring dot data source
URL is the first property,

00:43:32.869 --> 00:43:34.685
should be data source

00:43:34.685 --> 00:43:40.564
dot URL is equal to the
JDBC connection URL,

00:43:40.564 --> 00:43:44.510
JDBC colon, MySQL colon,

00:43:44.510 --> 00:43:47.585
two forward slashes, local host,

00:43:47.585 --> 00:43:50.510
because our MySQL is running
on our local machine.

00:43:50.510 --> 00:43:52.100
If it is running on
a remote machine,

00:43:52.100 --> 00:43:53.704
this will be the IP address.

00:43:53.704 --> 00:43:56.435
You will provide the IP
address of that server here.

00:43:56.435 --> 00:43:59.869
Colon, the port
number of MySQL is

00:43:59.869 --> 00:44:06.739
3306 slash the database
name, which is Reservation.

00:44:06.739 --> 00:44:10.640
Spring dot data source
URL is equal to

00:44:10.640 --> 00:44:14.885
JDBC colon MySQL colon
two forward slashes,

00:44:14.885 --> 00:44:18.815
localhost colon 3306
slash reservation.

00:44:18.815 --> 00:44:20.750
And to connect to that database,

00:44:20.750 --> 00:44:22.670
we need to provide
two more properties,

00:44:22.670 --> 00:44:24.185
the username and the password.

00:44:24.185 --> 00:44:26.540
Spring dot data.

00:44:26.540 --> 00:44:32.945
Source dot user name is equal
to root is the username.

00:44:32.945 --> 00:44:37.339
Spring dot data dot password

00:44:37.339 --> 00:44:40.534
is equal to test is the
password that I'm using.

00:44:40.534 --> 00:44:41.989
In your case, it
might be different.

00:44:41.989 --> 00:44:44.899
So configured that
password here that said,

00:44:44.899 --> 00:44:47.315
You have successfully
configure the data source.

00:44:47.315 --> 00:44:48.980
You can run this application

00:44:48.980 --> 00:44:50.915
by right-clicking
on the project.

00:44:50.915 --> 00:44:54.755
Go to run as Spring Boot app.

00:44:54.755 --> 00:44:58.115
Once you click on that or
application will be built,

00:44:58.115 --> 00:44:59.540
and it will be run on

00:44:59.540 --> 00:45:04.719
an embedded Tomcat that Spring
Boot comes with run it.

00:45:04.719 --> 00:45:07.255
It's launching. Our application

00:45:07.255 --> 00:45:09.880
starts off at Tomcat on port 80.

00:45:09.880 --> 00:45:10.600
80.

00:45:10.600 --> 00:45:13.119
And our application
is up and running.

00:45:13.119 --> 00:45:14.800
If it's call it to the left.

00:45:14.800 --> 00:45:17.110
You can see that our
application is up and running.

00:45:17.110 --> 00:45:18.850
Go to the web browser.

00:45:18.850 --> 00:45:25.855
Go to local host colon
80, 80 slash flights.

00:45:25.855 --> 00:45:28.960
Flights is mapper to a method.

00:45:28.960 --> 00:45:31.150
If you go back to the
reservation rest controller

00:45:31.150 --> 00:45:33.500
that you have developed earlier.

00:45:35.340 --> 00:45:38.649
Here, we have multiple methods

00:45:38.649 --> 00:45:41.050
and flights is mapped
to find flights.

00:45:41.050 --> 00:45:43.960
So let's use that URI,
localhost colon 80,

00:45:43.960 --> 00:45:47.494
80 slash flights hit
enter and you get

00:45:47.494 --> 00:45:49.699
a blank array back because

00:45:49.699 --> 00:45:52.189
there are no flights
in the database.

00:45:52.189 --> 00:45:53.480
But the key here is

00:45:53.480 --> 00:45:55.219
that our application
is up and running.

00:45:55.219 --> 00:45:59.000
We're able to hit one of
the RESTful web services.

00:45:59.000 --> 00:46:01.279
When you start your application.

00:46:01.279 --> 00:46:03.200
If you have any
issues like class

00:46:03.200 --> 00:46:05.539
not found or no class
definition etc.

00:46:05.539 --> 00:46:07.249
to troubleshoot it, go to

00:46:07.249 --> 00:46:10.790
your user directory
on your machine,

00:46:10.790 --> 00:46:13.729
and go to the dot m2 folder.

00:46:13.729 --> 00:46:16.160
This folder that will
be automatically

00:46:16.160 --> 00:46:19.684
created when you create Spring
Boot or maven projects.

00:46:19.684 --> 00:46:23.254
Go into that folder,
right-click on this repository,

00:46:23.254 --> 00:46:27.449
delete it, and then come back.

00:46:29.140 --> 00:46:31.520
Right-click on the project,

00:46:31.520 --> 00:46:36.215
do a Maven update project

00:46:36.215 --> 00:46:38.780
and it will resolve all
the issues you might have.

00:46:38.780 --> 00:46:41.090
So you should do that only
if you have any issues.

00:46:41.090 --> 00:46:44.164
If your application, if your
application is not starting,

00:46:44.164 --> 00:46:46.760
if the server is not up and
running when you try to run

00:46:46.760 --> 00:46:49.399
our application only
then follow those steps.

00:46:49.399 --> 00:46:52.280
Go to the user
directory dot m2 folder

00:46:52.280 --> 00:46:53.764
under your user directory,

00:46:53.764 --> 00:46:55.910
delete the repository,
come back to

00:46:55.910 --> 00:47:00.139
a Maven project update and
try to run our application.

00:47:00.139 --> 00:47:03.020
One last step here is to

00:47:03.020 --> 00:47:06.214
configure a web
application name.

00:47:06.214 --> 00:47:07.580
Right now we are directly using

00:47:07.580 --> 00:47:09.964
localhost 80, 80 slash flights.

00:47:09.964 --> 00:47:12.860
But we should give each
application a context.

00:47:12.860 --> 00:47:15.304
So go to application
or properties.

00:47:15.304 --> 00:47:21.060
Add another property
called server dot servlet.

00:47:21.940 --> 00:47:25.760
So let dot context hyphen

00:47:25.760 --> 00:47:29.914
path dot dot contexts
happened path

00:47:29.914 --> 00:47:34.159
is equal to slash
flight services.

00:47:34.159 --> 00:47:37.730
So this is a unique name
for our application.

00:47:37.730 --> 00:47:41.419
Now, grab that, go back to
the browser, localhost 80.

00:47:41.419 --> 00:47:41.704
80.

00:47:41.704 --> 00:47:47.279
Now our clients should use
Flight services slash flights.

00:47:47.740 --> 00:47:49.879
Let's get the right name.

00:47:49.879 --> 00:47:52.009
It should be Flight services.

00:47:52.009 --> 00:47:53.359
I didn't start and stop

00:47:53.359 --> 00:47:55.325
the server or I didn't
stop the server,

00:47:55.325 --> 00:47:56.779
these changes are not picked up,

00:47:56.779 --> 00:47:59.404
so stop the server by
hitting this red button.

00:47:59.404 --> 00:48:01.070
Right-click.

00:48:01.070 --> 00:48:05.569
Do run as Spring Boot app.

00:48:05.569 --> 00:48:07.534
And this time it should pick up.

00:48:07.534 --> 00:48:09.200
This new name for

00:48:09.200 --> 00:48:12.050
our web application
or the context path.

00:48:12.050 --> 00:48:14.465
It's up and running, go
back to the browser.

00:48:14.465 --> 00:48:18.394
Hit refresh, and there
we go, an empty array.

00:48:18.394 --> 00:48:21.095
So you have configured
a context path,

00