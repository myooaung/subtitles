WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.460 --> 00:00:06.105
Firms are a key part of
any web application.

00:00:06.105 --> 00:00:08.039
If you go to facebook.com,

00:00:08.039 --> 00:00:09.705
right on this page here,

00:00:09.705 --> 00:00:11.549
you will see two
different forms,

00:00:11.549 --> 00:00:14.969
the login form and
create an account form.

00:00:14.969 --> 00:00:16.829
So using a create
an account form,

00:00:16.829 --> 00:00:19.050
you will fill it in, click
on the Sign Up button,

00:00:19.050 --> 00:00:21.269
you get an account,
and then you will use

00:00:21.269 --> 00:00:25.095
your e-mail and
password to log in.

00:00:25.095 --> 00:00:27.510
So already you have
seen two forms here.

00:00:27.510 --> 00:00:29.369
The firms will
allow the end user

00:00:29.369 --> 00:00:31.530
to enter some data,
our application,

00:00:31.530 --> 00:00:34.410
we'll gather that data and
it can give you the end-user

00:00:34.410 --> 00:00:37.934
an opportunity to edit that
data are entered that data,

00:00:37.934 --> 00:00:41.365
as you have seen during
the login process.

00:00:41.365 --> 00:00:43.925
In Angular applications,
we can create

00:00:43.925 --> 00:00:46.925
and use forms in
two different ways.

00:00:46.925 --> 00:00:52.144
The first approach is model
driven or reactive forms,

00:00:52.144 --> 00:00:56.359
and the second approach
is template driven forms.

00:00:56.359 --> 00:00:58.520
You will explore the
model-driven forms in

00:00:58.520 --> 00:01:00.319
the next few lectures and then

00:01:00.319 --> 00:01:02.764
move on to the
template driven forms.

00:01:02.764 --> 00:01:05.600
In a model-driven
or reactive forms.

00:01:05.600 --> 00:01:06.949
As the name itself says,

00:01:06.949 --> 00:01:10.550
we create the model first
or the component first.

00:01:10.550 --> 00:01:13.519
And we'll then create the HTML,

00:01:13.519 --> 00:01:15.380
which will have the HTML form.

00:01:15.380 --> 00:01:19.520
And we will bind or
map the HTML form to

00:01:19.520 --> 00:01:24.934
the model using the directives
that Angular provides.

00:01:24.934 --> 00:01:27.649
We create reactive forms using

00:01:27.649 --> 00:01:29.780
their reactive forms module.

00:01:29.780 --> 00:01:32.359
Reactive farms module uses

00:01:32.359 --> 00:01:36.424
two important
objects or classes,

00:01:36.424 --> 00:01:40.220
the form group and
the form control.

00:01:40.220 --> 00:01:42.679
A form group object represents

00:01:42.679 --> 00:01:45.859
a HTML form and a form control

00:01:45.859 --> 00:01:48.665
represents the input types are

00:01:48.665 --> 00:01:52.280
elements that we use
within an HTML form.

00:01:52.280 --> 00:01:55.280
We can also do
validations on each of

00:01:55.280 --> 00:01:58.235
these Form controls
are the input types.

00:01:58.235 --> 00:02:02.959
And this form control and
form group will have a state.

00:02:02.959 --> 00:02:05.344
Form control will
maintain the state of

00:02:05.344 --> 00:02:08.090
each input element
we have in the form.

00:02:08.090 --> 00:02:10.699
That is, it will have the value

00:02:10.699 --> 00:02:13.984
that the user enters
for each input element.

00:02:13.984 --> 00:02:16.010
And also if we add

00:02:16.010 --> 00:02:18.529
validations to each of
these input elements,

00:02:18.529 --> 00:02:20.240
this form control will

00:02:20.240 --> 00:02:22.549
have the result of
that validation,

00:02:22.549 --> 00:02:25.939
that the validation has
succeeded or failed.

00:02:25.939 --> 00:02:29.825
In the same manner, the form
group is a collection of

00:02:29.825 --> 00:02:33.230
various form controls and the
state of the form group is

00:02:33.230 --> 00:02:35.075
nothing but the combination
of the state of

00:02:35.075 --> 00:02:37.354
all the form controls.

00:02:37.354 --> 00:02:40.985
So a form group is valid only if

00:02:40.985 --> 00:02:45.869
all the form control
validations are successful.

00:02:47.190 --> 00:02:50.034
In this and the
next few lectures,

00:02:50.034 --> 00:02:51.459
we will learn how to use

00:02:51.459 --> 00:02:55.194
the reactive or model-driven
forms. In Angular.

00:02:55.194 --> 00:02:57.880
You are going to work on a use
case where we are going to

00:02:57.880 --> 00:03:00.414
capture the person details,

00:03:00.414 --> 00:03:02.770
the person's
FirstName, lastname,

00:03:02.770 --> 00:03:06.954
email address, which will have
street, city and country.

00:03:06.954 --> 00:03:09.609
And finally, the
gender of the person.

00:03:09.609 --> 00:03:12.399
We'll first create a model

00:03:12.399 --> 00:03:15.084
that represents
all these fields.

00:03:15.084 --> 00:03:17.380
And then we will
map this model to

00:03:17.380 --> 00:03:20.544
the HTML where we'll
create our form.

00:03:20.544 --> 00:03:24.069
So we're going to use the
form groups, form controls,

00:03:24.069 --> 00:03:26.874
and more from react to form

00:03:26.874 --> 00:03:30.329
API or react to form
module in Angular.

00:03:30.329 --> 00:03:32.779
So let's create
the project first.

00:03:32.779 --> 00:03:35.584
40 or Visual Studio code.

00:03:35.584 --> 00:03:40.139
Go to View integrated terminal.

00:03:40.900 --> 00:03:43.430
And once that opens
up, make sure you

00:03:43.430 --> 00:03:45.859
are in the project directory.

00:03:45.859 --> 00:03:50.610
For me, it's under Angular,
under my documents.

00:03:51.910 --> 00:03:55.924
Copy that CD.

00:03:55.924 --> 00:03:59.039
Go into that directory.

00:03:59.510 --> 00:04:04.744
Then CD angular, NG new,

00:04:04.744 --> 00:04:08.330
create a project
called reactive forms.

00:04:08.330 --> 00:04:11.239
Reactive forms hit Enter.

00:04:11.239 --> 00:04:13.654
It will take a few seconds
to create the project.

00:04:13.654 --> 00:04:15.589
Once the project is created,

00:04:15.589 --> 00:04:18.965
drag the project onto
Visual Studio Code.

00:04:18.965 --> 00:04:22.414
Close the terminal
once it opens up.

00:04:22.414 --> 00:04:25.309
And there is our
projects source.

00:04:25.309 --> 00:04:26.660
We have the app component,

00:04:26.660 --> 00:04:28.145
which is the default component.

00:04:28.145 --> 00:04:30.439
We're going to use the
app component itself.

00:04:30.439 --> 00:04:32.374
Instead of creating
a new component,

00:04:32.374 --> 00:04:34.445
we'll start by defining

00:04:34.445 --> 00:04:38.270
our model in the app
dot component dot ts,

00:04:38.270 --> 00:04:40.010
right here in the next lecture.

00:04:40.010 --> 00:04:44.885
And we'll add the form to the
app dot component dot HTML.

00:04:44.885 --> 00:04:48.469
And we're also going to
use the Bootstrap CSS,

00:04:48.469 --> 00:04:50.899
just the Bootstrap
CSS component to add

00:04:50.899 --> 00:04:54.360
some styling to our HTML form.

00:04:55.300 --> 00:04:58.040
Now that we have
defined the model,

00:04:58.040 --> 00:05:00.409
the next step is
to define the form

00:05:00.409 --> 00:05:03.635
itself in the app
component dot HTML.

00:05:03.635 --> 00:05:06.019
Before we do that, let's include

00:05:06.019 --> 00:05:08.900
the Bootstrap style
sheet so that we can

00:05:08.900 --> 00:05:12.935
apply Bootstrap styling
to our HTML components.

00:05:12.935 --> 00:05:18.360
Launch your web browser
and search for Bootstrap.

00:05:20.080 --> 00:05:23.405
Css link.

00:05:23.405 --> 00:05:25.819
Click on the very
first link which

00:05:25.819 --> 00:05:28.160
takes you to W3 schools.

00:05:28.160 --> 00:05:30.659
Scroll down.

00:05:31.540 --> 00:05:34.159
If you already know
where that link is,

00:05:34.159 --> 00:05:35.705
you can use it if not,

00:05:35.705 --> 00:05:37.505
grab that link from right here.

00:05:37.505 --> 00:05:39.919
The first one, link stylesheet,

00:05:39.919 --> 00:05:44.240
which takes us to
bootstrap.min.css, copy that.

00:05:44.240 --> 00:05:46.535
Come back to Visual Studio Code.

00:05:46.535 --> 00:05:49.889
Open up the index.html.

00:05:49.930 --> 00:05:51.530
Right here.

00:05:51.530 --> 00:05:52.925
You can paste it anywhere.

00:05:52.925 --> 00:05:55.400
I'm going to paste it
right above the link,

00:05:55.400 --> 00:05:58.205
which is already there
for the favicon.

00:05:58.205 --> 00:05:59.554
Save it.

00:05:59.554 --> 00:06:03.019
Go back to the app dot
component dot HTML.

00:06:03.019 --> 00:06:04.294
This is where we're
going to define

00:06:04.294 --> 00:06:06.559
our form, clean it up,

00:06:06.559 --> 00:06:08.914
delete everything, and
in the next lecture,

00:06:08.914 --> 00:06:12.240
we'll start defining our form.

00:06:12.880 --> 00:06:14.959
The first step in

00:06:14.959 --> 00:06:17.164
model-driven or reactive forms

00:06:17.164 --> 00:06:19.805
is to create the model itself.

00:06:19.805 --> 00:06:23.374
We need to represent this
model within our TypeScript.

00:06:23.374 --> 00:06:26.059
Go to app dot component dot ts,

00:06:26.059 --> 00:06:28.499
which is our modal class.

00:06:28.990 --> 00:06:31.369
The first step is to import

00:06:31.369 --> 00:06:33.920
the form group and
the form control.

00:06:33.920 --> 00:06:37.025
A form group
represents a form or

00:06:37.025 --> 00:06:40.579
it can represent a subgroup
within a form, e.g.

00:06:40.579 --> 00:06:43.519
here, we are going to
have another form group

00:06:43.519 --> 00:06:44.750
within the form group will have

00:06:44.750 --> 00:06:46.985
a subgroup to
represent the address.

00:06:46.985 --> 00:06:50.660
And that subgroup will hold
street, city and country.

00:06:50.660 --> 00:06:54.349
You will see that inaction
form, group, form control.

00:06:54.349 --> 00:06:56.810
Each form control, we use it to

00:06:56.810 --> 00:06:59.269
represent one element
within the form.

00:06:59.269 --> 00:07:01.175
The input type is equal to text,

00:07:01.175 --> 00:07:04.789
a select box, a radio
button, and so on.

00:07:04.789 --> 00:07:08.539
So important, form
group and form control

00:07:08.539 --> 00:07:15.215
from Angular slash
forms is the module.

00:07:15.215 --> 00:07:16.325
Save it.

00:07:16.325 --> 00:07:18.530
Second step, get
rid off this title.

00:07:18.530 --> 00:07:19.624
We don't need it.

00:07:19.624 --> 00:07:22.250
Define a global variable

00:07:22.250 --> 00:07:25.009
of type form group which
represents our form.

00:07:25.009 --> 00:07:30.229
So private person form
is the object of type.

00:07:30.229 --> 00:07:32.609
Form group.

00:07:32.950 --> 00:07:35.884
This form group or
this person form

00:07:35.884 --> 00:07:37.579
represents our HTML form.

00:07:37.579 --> 00:07:41.704
When we create it. Next, N G on,

00:07:41.704 --> 00:07:43.340
in it, we can do it in

00:07:43.340 --> 00:07:45.424
the constructor or in
the NGO on Annette.

00:07:45.424 --> 00:07:47.104
We're going to initialize

00:07:47.104 --> 00:07:50.285
our form with all
the form controls.

00:07:50.285 --> 00:07:53.269
And to do that, use
this dot personal form

00:07:53.269 --> 00:07:56.614
is equal to new form group.

00:07:56.614 --> 00:07:59.270
This form group
constructor takes

00:07:59.270 --> 00:08:02.090
an object within which

00:08:02.090 --> 00:08:05.075
we can define all
the form controls.

00:08:05.075 --> 00:08:09.004
The first one is first name.

00:08:09.004 --> 00:08:11.869
So object will have
name and value pairs.

00:08:11.869 --> 00:08:15.350
The name is the field name
in the HTML firstName,

00:08:15.350 --> 00:08:17.420
and we create the
HTML form later.

00:08:17.420 --> 00:08:19.280
This will be the exact
field name which

00:08:19.280 --> 00:08:21.485
we'll use to input type text.

00:08:21.485 --> 00:08:22.789
We'll see how that happens.

00:08:22.789 --> 00:08:24.710
Firstname, colon,

00:08:24.710 --> 00:08:31.204
new form control is the
value form control object.

00:08:31.204 --> 00:08:34.999
This class represents each
control within the form.

00:08:34.999 --> 00:08:36.334
That could be input type,

00:08:36.334 --> 00:08:38.824
text, select box, etc.

00:08:38.824 --> 00:08:41.810
The second field
is the last name,

00:08:41.810 --> 00:08:46.430
colon, new form, control again.

00:08:46.430 --> 00:08:48.724
So you can copy paste this for

00:08:48.724 --> 00:08:53.050
each field we have FirstName,

00:08:53.050 --> 00:08:54.999
lastname, email
address is different

00:08:54.999 --> 00:08:59.335
and then gender address.

00:08:59.335 --> 00:09:01.390
We're going to handle
it separately.

00:09:01.390 --> 00:09:03.699
The third one is e-mail,

00:09:03.699 --> 00:09:06.670
and the last one is gender.

00:09:06.670 --> 00:09:09.534
And in-between
E-mail and gender.

00:09:09.534 --> 00:09:11.575
Get rid of the comma
at the end we have

00:09:11.575 --> 00:09:14.470
address which we want
to be a subgroup.

00:09:14.470 --> 00:09:17.680
It's just a way of logically
grouping related fields.

00:09:17.680 --> 00:09:20.575
So address, copy, paste it.

00:09:20.575 --> 00:09:23.020
Instead of new form control,

00:09:23.020 --> 00:09:30.114
it will be a new form group
of its own form group.

00:09:30.114 --> 00:09:32.139
To this form group,

00:09:32.139 --> 00:09:38.035
we can pass in a constructor
again our object again,

00:09:38.035 --> 00:09:40.599
within which we will
define three fields,

00:09:40.599 --> 00:09:42.730
street, city, and country.

00:09:42.730 --> 00:09:44.770
So you can copy these
three first name,

00:09:44.770 --> 00:09:47.649
last name, and
email, paste them.

00:09:47.649 --> 00:09:55.279
Street, city, and country.

00:09:56.250 --> 00:10:00.250
And we have successfully
defined our model.

00:10:00.250 --> 00:10:03.070
So all we have done here
is we have imported

00:10:03.070 --> 00:10:05.829
the two classes
that we need from

00:10:05.829 --> 00:10:08.934
the angular forms module form
group represents a form.

00:10:08.934 --> 00:10:13.149
We have used it to declare
an object of type form.

00:10:13.149 --> 00:10:14.755
And within the NG on

00:10:14.755 --> 00:10:17.069
innate when this
component is initialized,

00:10:17.069 --> 00:10:19.624
we are creating an instance

00:10:19.624 --> 00:10:21.680
of form group
within which we are

00:10:21.680 --> 00:10:26.659
defining all the form controls
by giving them names.

00:10:26.659 --> 00:10:30.515
So each property here is
mapped to a form control.

00:10:30.515 --> 00:10:33.514
And we have also logically
grouped all the address fields

00:10:33.514 --> 00:10:37.529
into a subgroup called address.

00:10:39.070 --> 00:10:42.109
In this lecture, you
will start creating

00:10:42.109 --> 00:10:44.764
the view for our
Forms component.

00:10:44.764 --> 00:10:48.679
Within the view, we're going
to define several views.

00:10:48.679 --> 00:10:50.390
We're going to use Duo elements.

00:10:50.390 --> 00:10:52.414
The first du will be
the root element,

00:10:52.414 --> 00:10:55.220
which will contain
everything else in our view.

00:10:55.220 --> 00:10:59.414
And we'll be applying
styles from Bootstrap, CSS.

00:10:59.414 --> 00:11:02.980
The root element will always use

00:11:02.980 --> 00:11:04.600
a style called container

00:11:04.600 --> 00:11:06.459
because it's going to
contain all the elements.

00:11:06.459 --> 00:11:08.679
And the style comes
from Bootstrap.

00:11:08.679 --> 00:11:11.364
Once we have the root
element within that,

00:11:11.364 --> 00:11:14.390
we're going to define a form.

00:11:14.440 --> 00:11:17.739
The first step is to
bind this form to

00:11:17.739 --> 00:11:20.829
the form object we have
defined on our model class.

00:11:20.829 --> 00:11:25.240
To do that, within square
brackets, use form.

00:11:25.240 --> 00:11:30.385
Group G capital is equal
to within double-quotes.

00:11:30.385 --> 00:11:32.649
Person form is the name of

00:11:32.649 --> 00:11:36.069
the property or the
field on our model.

00:11:36.069 --> 00:11:38.724
So the form group is a
directive that binds

00:11:38.724 --> 00:11:42.784
our HTML form to our Form
defined in the model.

00:11:42.784 --> 00:11:44.720
And within this
form, we're going to

00:11:44.720 --> 00:11:47.105
define all the formed elements.

00:11:47.105 --> 00:11:49.399
The first element
is the firstName.

00:11:49.399 --> 00:11:51.169
In this lecture, we
will define FirstName,

00:11:51.169 --> 00:11:53.735
lastname, email, and gender.

00:11:53.735 --> 00:11:56.974
And we will address the
address in that next lecture.

00:11:56.974 --> 00:12:00.349
So first name, last name,
e-mail, and gender.

00:12:00.349 --> 00:12:01.924
Again, use it. Do.

00:12:01.924 --> 00:12:03.890
For each one of those.

00:12:03.890 --> 00:12:09.770
Apply a style plus is equal
to form hyphen group.

00:12:09.770 --> 00:12:13.489
So bootstrap defines styling
classes that we can apply to

00:12:13.489 --> 00:12:15.769
our angular elements or

00:12:15.769 --> 00:12:20.059
HTML elements which are
in Angular application.

00:12:20.059 --> 00:12:22.939
This view represents
the firstName,

00:12:22.939 --> 00:12:28.355
so label is firstName,

00:12:28.355 --> 00:12:30.815
and the second is input.

00:12:30.815 --> 00:12:33.740
Type is equal to text.

00:12:33.740 --> 00:12:37.070
Apply a class is equal to form.

00:12:37.070 --> 00:12:38.014
Hyphen.

00:12:38.014 --> 00:12:42.814
Control is style
again from bootstrap.

00:12:42.814 --> 00:12:45.290
And to bind this input type

00:12:45.290 --> 00:12:46.865
is equal to text to our model,

00:12:46.865 --> 00:12:49.070
which is firstName property
that is defined here,

00:12:49.070 --> 00:12:50.359
which is a form control.

00:12:50.359 --> 00:12:55.054
We use form, control, name,

00:12:55.054 --> 00:12:57.950
form control Name
Camel case is equal

00:12:57.950 --> 00:13:01.700
to the property name
within our model,

00:13:01.700 --> 00:13:03.695
which is firstName.

00:13:03.695 --> 00:13:05.900
Use that here.

00:13:05.900 --> 00:13:10.039
Now this input type text is
binded to the firstName,

00:13:10.039 --> 00:13:13.834
which is a form control defined
right here in our model.

00:13:13.834 --> 00:13:15.575
Similar to this, we can define

00:13:15.575 --> 00:13:16.729
rest of the fields as well.

00:13:16.729 --> 00:13:23.705
So grab this, paste
it three more times.

00:13:23.705 --> 00:13:28.129
Lastname, email, and then
gender will format it later.

00:13:28.129 --> 00:13:29.255
It's called up.

00:13:29.255 --> 00:13:31.445
The second one is LastName.

00:13:31.445 --> 00:13:35.375
The form control name
is also lastName.

00:13:35.375 --> 00:13:39.330
The third one is e-mail.

00:13:39.370 --> 00:13:42.575
Change that to e-mail.

00:13:42.575 --> 00:13:44.900
Scroll down.

00:13:44.900 --> 00:13:48.035
The next one is gender.

00:13:48.035 --> 00:13:51.319
Agenda, change that to gender.

00:13:51.319 --> 00:13:54.529
That's the model name that
we have defined here.

00:13:54.529 --> 00:13:56.974
Go back the gender itself.

00:13:56.974 --> 00:13:59.210
We don't want him to
type in the text.

00:13:59.210 --> 00:14:01.115
We can use a radio button here.

00:14:01.115 --> 00:14:03.950
You can change that
to input type.

00:14:03.950 --> 00:14:05.779
Radio.

00:14:05.779 --> 00:14:08.855
Form control style
is still fine.

00:14:08.855 --> 00:14:10.700
Apply, give it a value.

00:14:10.700 --> 00:14:13.910
Value is equal to
within double-quotes.

00:14:13.910 --> 00:14:16.609
Male is the first one.

00:14:16.609 --> 00:14:20.854
You can copy that the Form
Control name is same.

00:14:20.854 --> 00:14:23.839
And to the radio button we
need to show a value as well.

00:14:23.839 --> 00:14:27.360
So we'll close that radio
button right there.

00:14:29.770 --> 00:14:34.319
Not the do but the
radio button itself.

00:14:39.040 --> 00:14:43.205
Right next to it provide a
male that's good enough.

00:14:43.205 --> 00:14:46.139
And copy that.

00:14:46.930 --> 00:14:49.055
Paste it.

00:14:49.055 --> 00:14:51.395
Change this to female,

00:14:51.395 --> 00:14:56.720
the second one and the
value for it is female.

00:14:56.720 --> 00:14:58.504
Save it.

00:14:58.504 --> 00:15:01.370
And we are all set. Let's
format it a little.

00:15:01.370 --> 00:15:04.020
Let's drag this back.

00:15:06.340 --> 00:15:09.329
This one as well.

00:15:12.640 --> 00:15:15.470
So we have defined four
fields in the form,

00:15:15.470 --> 00:15:18.814
FirstName, lastname,
email, and gender.

00:15:18.814 --> 00:15:22.260
We'll define the address
in the next lecture.

00:15:22.390 --> 00:15:25.160
The reason for handling address

00:15:25.160 --> 00:15:28.399
separately is because
address is a subgroup,

00:15:28.399 --> 00:15:31.310
we are grouping all the address
fields like street, city,

00:15:31.310 --> 00:15:34.669
and country within
another form group.

00:15:34.669 --> 00:15:36.349
So go back to the HTML.

00:15:36.349 --> 00:15:42.439
Within this form, we're going
to add another subgroup.

00:15:42.439 --> 00:15:49.384
Do class is equal to
form hyphen group.

00:15:49.384 --> 00:15:52.414
Use the form group name.

00:15:52.414 --> 00:15:55.700
Form group name.

00:15:55.700 --> 00:16:00.930
We use a form group name to
map or bind as subgroup.

00:16:01.270 --> 00:16:04.985
Do the address here,

00:16:04.985 --> 00:16:06.874
whatever property
name is defined here,

00:16:06.874 --> 00:16:07.969
you can use that name.

00:16:07.969 --> 00:16:08.999
We how to use that name,

00:16:08.999 --> 00:16:12.454
come back form group
name is address.

00:16:12.454 --> 00:16:14.584
And that way we are binding

00:16:14.584 --> 00:16:19.145
our subgroup to the subgroup
which we have defined here.

00:16:19.145 --> 00:16:21.574
Form group name.

00:16:21.574 --> 00:16:23.120
And within this we can define

00:16:23.120 --> 00:16:26.360
all the HTML elements
like we have done before.

00:16:26.360 --> 00:16:27.920
So you can grab any of

00:16:27.920 --> 00:16:30.949
these HTML elements here
starting from the label,

00:16:30.949 --> 00:16:33.904
are starting with
the duty itself.

00:16:33.904 --> 00:16:36.179
Grab the last one.

00:16:36.179 --> 00:16:40.045
Better grab the email, paste it.

00:16:40.045 --> 00:16:46.959
The first one is street,
street, city country.

00:16:46.959 --> 00:16:52.240
So street name is also Street.

00:16:52.240 --> 00:16:53.950
Rest can remain the same.

00:16:53.950 --> 00:16:56.960
Next is city.

00:16:58.320 --> 00:17:01.705
Change that to city,

00:17:01.705 --> 00:17:05.270
and the name to city as well.

00:17:05.370 --> 00:17:08.319
The last one is the country,

00:17:08.319 --> 00:17:10.270
which is a little different
because we can use

00:17:10.270 --> 00:17:12.999
a select a drop-down
for the country.

00:17:12.999 --> 00:17:15.520
So let's type it in.

00:17:15.520 --> 00:17:22.079
Do class is equal to
form hyphen group.

00:17:22.480 --> 00:17:24.619
And within that do,

00:17:24.619 --> 00:17:27.770
let me scroll it up so that
you can see it clearly.

00:17:27.770 --> 00:17:36.350
Users select class is equal
to form hyphen control.

00:17:36.350 --> 00:17:39.019
Form, control.

00:17:39.019 --> 00:17:42.830
Name is equal to country here,

00:17:42.830 --> 00:17:46.145
binding it to the country
property in the model.

00:17:46.145 --> 00:17:48.830
And within the select
Define options.

00:17:48.830 --> 00:17:50.330
We'll make it dynamic.

00:17:50.330 --> 00:17:52.550
Later on. We'll get an array of

00:17:52.550 --> 00:17:54.935
countries from our model
and we'll use them.

00:17:54.935 --> 00:17:56.344
I iterate over and display it.

00:17:56.344 --> 00:18:01.260
But for now, let's
hard-coded option one, USA.

00:18:01.920 --> 00:18:08.209
And the value is equal to USA.

00:18:08.250 --> 00:18:12.789
Copy that, paste it
a couple of times.

00:18:12.789 --> 00:18:15.579
India, India.

00:18:15.579 --> 00:18:18.024
The third one is Canada.

00:18:18.024 --> 00:18:20.094
You can add whatever
country you want.

00:18:20.094 --> 00:18:23.900
Canada. That's good enough.

00:18:25.320 --> 00:18:27.820
So in this lecture
you have defined

00:18:27.820 --> 00:18:29.769
a subgroup and bind it to

00:18:29.769 --> 00:18:31.599
the subgroup which you
have already defined in

00:18:31.599 --> 00:18:33.550
the model for the address.

00:18:33.550 --> 00:18:35.754
And within address we
have defined Street,

00:18:35.754 --> 00:18:37.419
which is of type
input type text.

00:18:37.419 --> 00:18:39.924
We have binded it
to street density.

00:18:39.924 --> 00:18:41.559
And finally country, which is

00:18:41.559 --> 00:18:44.479
a Select, which is a dropdown.

00:18:45.580 --> 00:18:48.050
The last step is to include

00:18:48.050 --> 00:18:51.740
a Submit button and then
handle the submit event.

00:18:51.740 --> 00:18:54.905
Define a due right at the
end of the form our draft,

00:18:54.905 --> 00:19:01.744
all the fields within
the do use input type

00:19:01.744 --> 00:19:05.210
is equal to submit

00:19:05.210 --> 00:19:09.800
and class is equal to
within double-quotes,

00:19:09.800 --> 00:19:13.130
button space, button
hyphen success.

00:19:13.130 --> 00:19:16.114
There are multiple styles from
Bootstrap that we can use.

00:19:16.114 --> 00:19:18.949
Let's use button
and Button success.

00:19:18.949 --> 00:19:23.164
You can align this to center
on the do use airline

00:19:23.164 --> 00:19:29.255
is equal to center,

00:19:29.255 --> 00:19:33.544
will see and apply other
styles as required later on.

00:19:33.544 --> 00:19:36.785
Go to the form where we
have defined our form.

00:19:36.785 --> 00:19:40.684
And right here, we need
to handle onsubmit event.

00:19:40.684 --> 00:19:42.740
So you can use the Angular way

00:19:42.740 --> 00:19:44.495
of doing it within brackets.

00:19:44.495 --> 00:19:48.665
Handle the NG submit event

00:19:48.665 --> 00:19:53.510
is equal to on Submit or
handle submit. It's up to you.

00:19:53.510 --> 00:19:55.519
We can define any function.

00:19:55.519 --> 00:19:57.739
This function should go inside

00:19:57.739 --> 00:20:00.784
the app dot component dot ts,

00:20:00.784 --> 00:20:02.824
which we will do in
the next lecture

00:20:02.824 --> 00:20:05.220
so that we can test it out.

00:20:05.950 --> 00:20:08.479
The last step is to implement

00:20:08.479 --> 00:20:11.600
the on submit method
inside our components.

00:20:11.600 --> 00:20:13.310
So go to the model.

00:20:13.310 --> 00:20:16.730
And when the user clicks
on the submit button,

00:20:16.730 --> 00:20:18.950
on submit is what is invoked.

00:20:18.950 --> 00:20:22.790
So public on submit.

00:20:22.790 --> 00:20:24.590
Within this on submit,

00:20:24.590 --> 00:20:30.155
we can access this
dot form dot value R.

00:20:30.155 --> 00:20:32.180
You can access individual
fields as well.

00:20:32.180 --> 00:20:34.744
If you say this dot
form dot first name,

00:20:34.744 --> 00:20:36.320
you will get the value
of the firstName,

00:20:36.320 --> 00:20:38.479
lastName, address dot street

00:20:38.479 --> 00:20:41.044
will give you the
address, and so on.

00:20:41.044 --> 00:20:45.470
Console dot log, this
will be one huge object,

00:20:45.470 --> 00:20:48.155
JavaScript object or
TypeScript object.

00:20:48.155 --> 00:20:49.339
Save it.

00:20:49.339 --> 00:20:53.490
And we are all set to
test our application.

00:20:54.490 --> 00:20:56.794
In this lecture, we will see

00:20:56.794 --> 00:20:59.764
our model-driven forms
application in action.

00:20:59.764 --> 00:21:03.410
To do that, go to
app dot module.js.

00:21:03.410 --> 00:21:05.179
And we need to include

00:21:05.179 --> 00:21:08.990
the reactive forms module
before we run our application.

00:21:08.990 --> 00:21:11.600
So right in imports
browser module

00:21:11.600 --> 00:21:17.029
comma, reactive forms module.

00:21:17.029 --> 00:21:19.219
Click that and automatically

00:21:19.219 --> 00:21:20.720
the reactive forms module will

00:21:20.720 --> 00:21:23.165
be imported from angular forms.

00:21:23.165 --> 00:21:24.875
And now we're all set.

00:21:24.875 --> 00:21:28.444
Go to View,
integrated, terminal.

00:21:28.444 --> 00:21:30.035
And G.

00:21:30.035 --> 00:21:34.774
So hyphen 0, hit Enter.

00:21:34.774 --> 00:21:36.409
And that will open up

00:21:36.409 --> 00:21:40.170
the web browser when our
application is up and running.

00:21:44.920 --> 00:21:47.944
Let happens. You can go
to the App component,

00:21:47.944 --> 00:21:52.265
HTML makes sure we have
everything as expected.

00:21:52.265 --> 00:21:54.124
Scroll down.

00:21:54.124 --> 00:21:56.300
Make sure we have all
the labels for email,

00:21:56.300 --> 00:21:59.675
gender, street, city.

00:21:59.675 --> 00:22:02.089
For the country, I
have a select box,

00:22:02.089 --> 00:22:04.279
but I have not defined a label.

00:22:04.279 --> 00:22:05.990
So we can do that. Let's see it.

00:22:05.990 --> 00:22:08.524
So you see the form right here.

00:22:08.524 --> 00:22:10.175
We didn't add any heading.

00:22:10.175 --> 00:22:11.659
You can always include a heading

00:22:11.659 --> 00:22:15.079
called personal details.
Let's test it out.

00:22:15.079 --> 00:22:19.130
Is the firstName, the parody.

00:22:19.130 --> 00:22:23.464
B dot t hat team hail.com.

00:22:23.464 --> 00:22:26.479
Gender is male.

00:22:26.479 --> 00:22:29.810
Scroll down street, address.

00:22:29.810 --> 00:22:33.050
Best. Cds test.

00:22:33.050 --> 00:22:35.089
And for the country, you
do not see the label

00:22:35.089 --> 00:22:37.475
here because we haven't
included a label,

00:22:37.475 --> 00:22:42.095
but include India or
select India, submit.

00:22:42.095 --> 00:22:43.729
On Submit, we have simply

00:22:43.729 --> 00:22:45.499
displaying the object
on the console.

00:22:45.499 --> 00:22:49.534
So you go to the browser
console, Javascript Console.

00:22:49.534 --> 00:22:52.849
The object here is
the form object.

00:22:52.849 --> 00:22:54.499
It has address, e-mail,

00:22:54.499 --> 00:22:57.649
FirstName, Gender,
LastName, and more.

00:22:57.649 --> 00:23:00.259
How successfully created
a model-driven form

00:23:00.259 --> 00:23:02.045
or react to form.

00:23:02.045 --> 00:23:04.640
Go back, include a label,

00:23:04.640 --> 00:23:06.410
copy this label from the city.

00:23:06.410 --> 00:23:10.310
Include a label called country.

00:23:10.310 --> 00:23:12.329
Save it.

00:23:12.610 --> 00:23:15.289
So to summarize it so far,

00:23:15.289 --> 00:23:18.770
you are started by
building a model within

00:23:18.770 --> 00:23:20.540
the TypeScript
file or the within

00:23:20.540 --> 00:23:22.760
the model component
or the model,

00:23:22.760 --> 00:23:24.664
we have used the form group,

00:23:24.664 --> 00:23:28.865
which represents a HTML form
within the NGO on in it,

00:23:28.865 --> 00:23:31.624
we have included all
the form controls

00:23:31.624 --> 00:23:34.879
which this form group
represents for a person.

00:23:34.879 --> 00:23:37.655
In this case. Once
we have done that

00:23:37.655 --> 00:23:40.954
using the form control and
a subgroup called address,

00:23:40.954 --> 00:23:43.745
we went back to the index.html.

00:23:43.745 --> 00:23:45.109
We have included Bootstrap

00:23:45.109 --> 00:23:46.789
so that we can use that styling.

00:23:46.789 --> 00:23:50.479
Then we went back to the
HTML page of our component.

00:23:50.479 --> 00:23:52.995
And we have defined

00:23:52.995 --> 00:23:57.205
the HTML form with
various elements on it.

00:23:57.205 --> 00:23:59.079
While doing that, you use it

00:23:59.079 --> 00:24:00.850
the form group directive to bind

00:24:00.850 --> 00:24:03.504
this HTML form to the model.

00:24:03.504 --> 00:24:05.800
The form that we have
defined in the model.

00:24:05.800 --> 00:24:09.084
The person for an NG Submit

00:24:09.084 --> 00:24:12.400
to handle the onsubmit
event of this form.

00:24:12.400 --> 00:24:14.200
And while defining the various

00:24:14.200 --> 00:24:16.105
HTML elements within the form,

00:24:16.105 --> 00:24:18.880
we have used the
Bootstrap styling as well

00:24:18.880 --> 00:24:21.970
as Form Control name to bind

00:24:21.970 --> 00:24:24.190
each of these HTML elements to

00:24:24.190 --> 00:24:25.615
the properties we have

00:24:25.615 --> 00:24:28.810
defined right here,
which is our model.

00:24:28.810 --> 00:24:33.819
And also while doing
subgrouping for address,

00:24:33.819 --> 00:24:37.864
we have used form group name,

00:24:37.864 --> 00:24:40.234
that Angular directive to

00:24:40.234 --> 00:24:43.130
subgroup or use
subgrouping binding,

00:24:43.130 --> 00:24:44.779
which bind at this address to

00:24:44.779 --> 00:24:47.759
the address that is
defined right here.

00:24:51.760 --> 00:24:55.309
And for the country itself,
we have hard-coded.

00:24:55.309 --> 00:24:58.009
The values will change
this later to be dynamic,

00:24:58.009 --> 00:25:00.215
we will define an array
in the component,

00:25:00.215 --> 00:25:02.270
and then we'll use
that array with

00:25:02.270 --> 00:25:05.310
the NG four to display these.

00:25:06.100 --> 00:25:09.440
In this lecture, you will
learn how to fill in

00:25:09.440 --> 00:25:11.990
the form fields when the
forms are loaded by default,

00:25:11.990 --> 00:25:15.080
if you want to put some values
into these text fields.

00:25:15.080 --> 00:25:18.544
We can do that right
in our model class.

00:25:18.544 --> 00:25:21.319
When we create a form
control for each of

00:25:21.319 --> 00:25:23.960
the form fields to
the constructor,

00:25:23.960 --> 00:25:25.729
we can pass in a value in

00:25:25.729 --> 00:25:27.830
the string format or
any other format,

00:25:27.830 --> 00:25:29.359
and that value will be,

00:25:29.359 --> 00:25:33.829
use it to fill in that
particular component on the UI.

00:25:33.829 --> 00:25:36.289
So for the first name
I have assigned John.

00:25:36.289 --> 00:25:38.700
So if I go back, save it.

00:25:40.810 --> 00:25:43.475
Come back to the UI.

00:25:43.475 --> 00:25:45.619
You'll see John
in the firstName.

00:25:45.619 --> 00:25:48.964
Similarly, you can add values
to lastname, email, etc.

00:25:48.964 --> 00:25:50.314
This is very useful,

00:25:50.314 --> 00:25:53.269
especially when you are
fetching data from the backend,

00:25:53.269 --> 00:25:55.745
allowing the user to
update that data.

00:25:55.745 --> 00:25:57.365
So you will fill in this form

00:25:57.365 --> 00:25:58.819
with the current existing data

00:25:58.819 --> 00:26:01.819
from the database and the
user can change the values,

00:26:01.819 --> 00:26:03.245
hit the submit button.

00:26:03.245 --> 00:26:05.809
You will gather the
data and send it

00:26:05.809 --> 00:26:09.545
back to the backend to
update in the database.

00:26:09.545 --> 00:26:13.280
The second parameter
here is what we can

00:26:13.280 --> 00:26:17.359
use to add validations
to the form fields.

00:26:17.359 --> 00:26:22.100
So the angular forms has a
class called validators,

00:26:22.100 --> 00:26:24.260
which can be passed in
as a second parameter,

00:26:24.260 --> 00:26:25.805
which is an array parameter,

00:26:25.805 --> 00:26:29.435
the form control accepts
an array of validators.

00:26:29.435 --> 00:26:34.384
So validators is
from angular forms,

00:26:34.384 --> 00:26:37.700
select that validators.it has

00:26:37.700 --> 00:26:41.510
several pre-built an inbuilt
validations required.

00:26:41.510 --> 00:26:43.565
If you use that, that means

00:26:43.565 --> 00:26:47.330
this particular form field
firstName is required,

00:26:47.330 --> 00:26:49.760
but it is not there at
the validation will

00:26:49.760 --> 00:26:53.329
fail and it will push the
errors back to the UI.

00:26:53.329 --> 00:26:54.469
How to handle those errors

00:26:54.469 --> 00:26:55.970
will see it in the next lecture.

00:26:55.970 --> 00:27:00.365
Add one more validation
to the array validators,

00:27:00.365 --> 00:27:06.350
dot mean, length, and
say three characters.

00:27:06.350 --> 00:27:08.030
Once you do that automatically,

00:27:08.030 --> 00:27:09.529
this minlength will check if

00:27:09.529 --> 00:27:11.090
this firstName entered by

00:27:11.090 --> 00:27:12.725
the end-user has
three characters.

00:27:12.725 --> 00:27:13.325
At least.

00:27:13.325 --> 00:27:17.239
If not, it will throw
an error pack comma.

00:27:17.239 --> 00:27:22.504
Validators dot max length.

00:27:22.504 --> 00:27:25.669
So all of these validations
are on the firstName.

00:27:25.669 --> 00:27:27.560
So all the errors
that might come out

00:27:27.560 --> 00:27:29.630
will be binded to the FirstName.

00:27:29.630 --> 00:27:32.060
We can retrieve them as you
will see in the next lecture.

00:27:32.060 --> 00:27:35.269
So, so far you have
added three validations.

00:27:35.269 --> 00:27:38.449
And we can also check if
a form is valid using

00:27:38.449 --> 00:27:41.764
this dot person form
dot instead of value.

00:27:41.764 --> 00:27:45.829
You can say e is valid or not.

00:27:45.829 --> 00:27:47.734
Valid is the property.

00:27:47.734 --> 00:27:50.165
It will be true if
the form is valid.

00:27:50.165 --> 00:27:52.009
That is, if none
of the validations

00:27:52.009 --> 00:27:53.704
on the form fields fail,

00:27:53.704 --> 00:27:55.085
on all the form fields fail,

00:27:55.085 --> 00:27:56.225
then the form is valid.

00:27:56.225 --> 00:27:58.744
Even if a single
validation fails,

00:27:58.744 --> 00:28:03.005
then this will be invalid
or it will be false.

00:28:03.005 --> 00:28:04.999
Go back to the browser.

00:28:04.999 --> 00:28:06.979
Now it is prefilled with John

00:28:06.979 --> 00:28:08.855
because we have
initialized it to John.

00:28:08.855 --> 00:28:11.419
If you take out a couple
of characters here,

00:28:11.419 --> 00:28:14.869
scroll all the way down,
hit the submit button,

00:28:14.869 --> 00:28:16.339
you will not see any errors

00:28:16.339 --> 00:28:18.574
here because we need to handle

00:28:18.574 --> 00:28:21.454
the errors or the
validation failures

00:28:21.454 --> 00:28:23.419
on the UI as well in the HTML,

00:28:23.419 --> 00:28:25.010
we need to make changes.

00:28:25.010 --> 00:28:26.990
But Angular by now
would have pushed

00:28:26.990 --> 00:28:28.699
all the errors and it would

00:28:28.699 --> 00:28:30.695
have binded them
onto this firstName,

00:28:30.695 --> 00:28:32.180
as we'll see in
the next lecture.

00:28:32.180 --> 00:28:34.559
But if you go to the console,

00:28:35.230 --> 00:28:38.240
you will see false.

00:28:38.240 --> 00:28:42.140
That is because the
validations up top here.

00:28:42.140 --> 00:28:43.430
How failed when you say

00:28:43.430 --> 00:28:46.460
this dot form dot
valid, it says false.

00:28:46.460 --> 00:28:48.559
If you go back to the UI, change

00:28:48.559 --> 00:28:50.300
it to three or more characters,

00:28:50.300 --> 00:28:52.669
say John, scroll down,

00:28:52.669 --> 00:28:54.035
hit the Submit again.

00:28:54.035 --> 00:28:55.534
This time we will see here

00:28:55.534 --> 00:28:58.429
true because all
the validations,

00:28:58.429 --> 00:29:02.660
how succeeded mainland
maxlength and even required.

00:29:02.660 --> 00:29:04.279
So they require validation also

00:29:04.279 --> 00:29:05.659
happens automatically if you

00:29:05.659 --> 00:29:08.644
delete it, clean it up,

00:29:08.644 --> 00:29:11.000
scroll down, submit,

00:29:11.000 --> 00:29:12.470
and you get a false because

00:29:12.470 --> 00:29:13.969
the required validation fails,

00:29:13.969 --> 00:29:16.159
the minlength fails and
also the maxlength fails.

00:29:16.159 --> 00:29:18.034
You can try out the maxlength by

00:29:18.034 --> 00:29:21.740
entering more than ten
characters in here and they will

00:29:21.740 --> 00:29:26.110
see a false when

00:29:26.110 --> 00:29:28.840
these angular will bind

00:29:28.840 --> 00:29:31.824
those errors to that
particular field or property.

00:29:31.824 --> 00:29:33.370
And we can access them in

00:29:33.370 --> 00:29:37.345
our HTML page to display
those errors to the end-user.

00:29:37.345 --> 00:29:40.060
So go to the
firstName control or

00:29:40.060 --> 00:29:42.804
the field right here
outside this do,

00:29:42.804 --> 00:29:44.995
we're going to define a new deal

00:29:44.995 --> 00:29:47.829
to handle each of
the error cases.

00:29:47.829 --> 00:29:53.559
One do per case start with
a class is equal to alert,

00:29:53.559 --> 00:29:59.065
space alert, hyphen
danger from bootstrap.

00:29:59.065 --> 00:30:01.910
And within this do

00:30:02.010 --> 00:30:05.529
as an attribute on
this deal, we can use,

00:30:05.529 --> 00:30:12.170
if this entire do will carry
a text called this field,

00:30:12.170 --> 00:30:14.329
firstName, to be direct,

00:30:14.329 --> 00:30:19.369
first name cannot be empty,

00:30:19.369 --> 00:30:21.379
is the message that we want to

00:30:21.379 --> 00:30:23.839
display it to the end-user,
but conditionally.

00:30:23.839 --> 00:30:25.864
And that condition star

00:30:25.864 --> 00:30:30.799
n g is equal to
within double-quotes.

00:30:30.799 --> 00:30:33.425
Our form name is percent form,

00:30:33.425 --> 00:30:37.100
so person form dot
the field name.

00:30:37.100 --> 00:30:38.930
We can directly
access person access,

00:30:38.930 --> 00:30:42.814
first-person form dot
firstName or percent form dot

00:30:42.814 --> 00:30:46.189
controls within square brackets

00:30:46.189 --> 00:30:50.129
within single quotes first name.

00:30:50.350 --> 00:30:53.419
So these controls will
have all the fields.

00:30:53.419 --> 00:30:55.985
This is an array which will
have all the form fields.

00:30:55.985 --> 00:30:58.475
If you pass in the
exact form field name,

00:30:58.475 --> 00:31:01.070
you get that
particular form field.

00:31:01.070 --> 00:31:03.875
In this case it is
the input type text

00:31:03.875 --> 00:31:08.000
firstname dot has error is

00:31:08.000 --> 00:31:12.559
a method that tells
us if there is

00:31:12.559 --> 00:31:15.259
an error on this and what
type of error can be

00:31:15.259 --> 00:31:19.010
passed in here within
single quotes required.

00:31:19.010 --> 00:31:21.665
Here in the model.

00:31:21.665 --> 00:31:24.965
We are checking for required.

00:31:24.965 --> 00:31:27.800
It will push when that error
is binded to this field,

00:31:27.800 --> 00:31:30.319
it will bind it as
a required error.

00:31:30.319 --> 00:31:33.695
That is the reason
hazard required.

00:31:33.695 --> 00:31:35.285
Save it.

00:31:35.285 --> 00:31:38.369
Now if you go back to the UI,

00:31:40.030 --> 00:31:42.530
once the refresh happens,

00:31:42.530 --> 00:31:45.470
if you try to make this
empty, immediately,

00:31:45.470 --> 00:31:47.900
you will see firstName
cannot be empty,

00:31:47.900 --> 00:31:49.849
so you need to provide some data

00:31:49.849 --> 00:31:51.335
in there and the error is gone.

00:31:51.335 --> 00:31:54.095
All that magic happens
behind the scenes.

00:31:54.095 --> 00:31:57.019
We can also add the
two other errors,

00:31:57.019 --> 00:31:58.700
the mainland and the
maxlength copied that

00:31:58.700 --> 00:32:02.464
do best at a couple of times.

00:32:02.464 --> 00:32:07.530
The second one is minimum.

00:32:07.930 --> 00:32:15.620
Three characters should be
used for the FirstName.

00:32:15.620 --> 00:32:16.850
The validation message itself

00:32:16.850 --> 00:32:18.695
can be any meaningful message.

00:32:18.695 --> 00:32:23.795
Copy that, paste it.

00:32:23.795 --> 00:32:29.120
Maximum. Ten characters should
be used for the FirstName,

00:32:29.120 --> 00:32:32.179
a maximum of ten
characters or whatever.

00:32:32.179 --> 00:32:34.474
And in here instead of required,

00:32:34.474 --> 00:32:37.715
we should say mean length.

00:32:37.715 --> 00:32:40.399
This is the exact method name,

00:32:40.399 --> 00:32:43.160
but not camelCase in the
component you how to use

00:32:43.160 --> 00:32:45.620
the method name called mean
length, which is camelCase.

00:32:45.620 --> 00:32:49.355
But here, all small
letters, mean length.

00:32:49.355 --> 00:32:54.379
The next one you can
guess, max, length.

00:32:54.379 --> 00:32:55.624
Save it.

00:32:55.624 --> 00:32:57.455
Go back to the UI.

00:32:57.455 --> 00:32:59.989
Now try to enter
just two characters.

00:32:59.989 --> 00:33:01.550
Let's see what the problem is.

00:33:01.550 --> 00:33:03.379
It says main three characters

00:33:03.379 --> 00:33:05.150
should be used for
the FirstName.

00:33:05.150 --> 00:33:07.459
You enter one more character,
the error is gone.

00:33:07.459 --> 00:33:09.364
Let's go beyond ten characters.

00:33:09.364 --> 00:33:10.805
And immediately we'll see

00:33:10.805 --> 00:33:14.930
maximum ten characters should
be used for the FirstName.

00:33:14.930 --> 00:33:16.774
So it's that easy to use

00:33:16.774 --> 00:33:20.509
validations and then show
those errors on the UI.

00:33:20.509 --> 00:33:21.890
Everything will happen for

00:33:21.890 --> 00:33:24.539
you automatically
once you do that.

00:33:25.840 --> 00:33:30.139
Right now, when we render this
drop-down here at the end,

00:33:30.139 --> 00:33:32.405
we're hard-coding
these values instead.

00:33:32.405 --> 00:33:34.175
Typically we can
either have them

00:33:34.175 --> 00:33:36.020
on the component as constants,

00:33:36.020 --> 00:33:37.609
on the model as constants,

00:33:37.609 --> 00:33:39.799
or we can retrieve
that information from

00:33:39.799 --> 00:33:42.619
the database and
push it onto the UI.

00:33:42.619 --> 00:33:47.570
Let's define an array inside
our model right here.

00:33:47.570 --> 00:33:51.530
But I wait, or public so that
it can be used directly.

00:33:51.530 --> 00:34:02.059
Public. Countries is the array
and it's of type string.

00:34:02.059 --> 00:34:05.060
So countries is
this string array.

00:34:05.060 --> 00:34:08.749
And we will initialize the
values for this array inside

00:34:08.749 --> 00:34:10.550
our engineers are we can do

00:34:10.550 --> 00:34:13.529
it in the constructor
wherever you want.

00:34:13.630 --> 00:34:21.095
This dot countries is equal
to within angular brackets.

00:34:21.095 --> 00:34:23.615
Within square brackets,
it's not an object.

00:34:23.615 --> 00:34:26.224
So the first country is USA,

00:34:26.224 --> 00:34:29.330
the second country is India,

00:34:29.330 --> 00:34:34.169
and the third country is Canada.

00:34:35.260 --> 00:34:37.175
Save it.

00:34:37.175 --> 00:34:39.530
Go back to the HTML.

00:34:39.530 --> 00:34:43.144
And wherever we are rendering
the countries as options,

00:34:43.144 --> 00:34:44.750
we can remove this hardcoding.

00:34:44.750 --> 00:34:46.970
Now, get rid off that.

00:34:46.970 --> 00:34:48.455
On the first option.

00:34:48.455 --> 00:34:50.225
That is the only
option we have now,

00:34:50.225 --> 00:34:53.509
star and G for use
the energy for

00:34:53.509 --> 00:34:57.409
directive is equal to
within double-quotes.

00:34:57.409 --> 00:35:03.455
Let country of countries

00:35:03.455 --> 00:35:06.304
that we have defined
in the model.

00:35:06.304 --> 00:35:08.150
Within these double quotes,

00:35:08.150 --> 00:35:12.725
you can use the
expression country.

00:35:12.725 --> 00:35:17.810
And here as well use
expression country.

00:35:17.810 --> 00:35:20.989
So each country we are taking
it and then we are using

00:35:20.989 --> 00:35:24.005
it here and as the
value as well, save it.

00:35:24.005 --> 00:35:26.120
Go back to the UI.

00:35:26.120 --> 00:35:28.460
If you scroll down
in the drop-down,

00:35:28.460 --> 00:35:31.849
you should still see the
same three countries.

00:35:31.849 --> 00:35:36.245
You have simply move the
static or hard-coded countries

00:35:36.245 --> 00:35:40.099
in the UI or the HTML
page into the component.

00:35:40.099 --> 00:35:41.435
And we made it dynamic

00:35:41.435 --> 00:35:43.099
the same array instead
of hard-coding,

00:35:43.099 --> 00:35:45.260
these values here
can be retrieved

00:35:45.260 --> 00:35:48.690
from a back-end rest
web service call.
