WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.250 --> 00:00:03.990
In this and the
next few lectures,

00:00:03.990 --> 00:00:05.010
you are going to create

00:00:05.010 --> 00:00:08.370
your very first custom
directive called my

00:00:08.370 --> 00:00:10.680
year if this will work just

00:00:10.680 --> 00:00:13.110
like the inbuilt
NG if directive.

00:00:13.110 --> 00:00:15.045
But you will learn how to create

00:00:15.045 --> 00:00:17.160
your own directives and

00:00:17.160 --> 00:00:19.335
implement your own
logic inside of them.

00:00:19.335 --> 00:00:23.085
The first step is to
create a directory itself.

00:00:23.085 --> 00:00:24.405
Once you create a project,

00:00:24.405 --> 00:00:27.434
you will accomplish
this using the CLI.

00:00:27.434 --> 00:00:29.550
Creating a directive
is similar to how

00:00:29.550 --> 00:00:32.020
you have created a
component earlier.

00:00:32.020 --> 00:00:33.875
Once you create a directive,

00:00:33.875 --> 00:00:37.430
then it will use the template
and the view container raft

00:00:37.430 --> 00:00:41.255
to manipulate the DOM
in our HTML template.

00:00:41.255 --> 00:00:42.770
The last step, of course,

00:00:42.770 --> 00:00:44.660
is to implement the logic itself

00:00:44.660 --> 00:00:46.535
depending on our requirements.

00:00:46.535 --> 00:00:48.080
In this case, we're going to

00:00:48.080 --> 00:00:51.200
conditionally display
HTML element.

00:00:51.200 --> 00:00:52.460
If the condition is true,

00:00:52.460 --> 00:00:53.930
we will add it to the view.

00:00:53.930 --> 00:00:58.650
If not, we will not add it
to the view or clear it.

00:00:58.660 --> 00:01:01.445
Go to Command Line,

00:01:01.445 --> 00:01:07.445
create a new project and
G, new custom directives.

00:01:07.445 --> 00:01:11.315
Custom directives is the
project name hit Enter.

00:01:11.315 --> 00:01:14.525
And that will create
a project as follows.

00:01:14.525 --> 00:01:18.570
That project onto your
Visual Studio code.

00:01:22.090 --> 00:01:27.510
Go to the terminal window
view integrated terminal.

00:01:29.410 --> 00:01:33.890
Once it opens up to create
a direct to, you use n,

00:01:33.890 --> 00:01:37.745
g, g, d for directory space.

00:01:37.745 --> 00:01:39.440
Give it a name. I'm
going to create

00:01:39.440 --> 00:01:40.955
my directors under
a folder called

00:01:40.955 --> 00:01:45.980
directives slash my IF
is the directory name.

00:01:45.980 --> 00:01:48.245
So N, G, G,

00:01:48.245 --> 00:01:52.130
D directives slash my F enter.

00:01:52.130 --> 00:01:53.870
That will create the directory,

00:01:53.870 --> 00:01:58.340
will also update the
app module dot ds.

00:01:58.340 --> 00:02:00.380
As you can see,
the app module.js

00:02:00.380 --> 00:02:03.110
has opened up here because
I have clicked here.

00:02:03.110 --> 00:02:06.020
The if Direct do is add

00:02:06.020 --> 00:02:09.170
a new class that got created
or a new type script

00:02:09.170 --> 00:02:12.095
file that got created and
it was imported and it is

00:02:12.095 --> 00:02:15.290
added to the declaration
section just like a component.

00:02:15.290 --> 00:02:18.020
Go to the my-if
directory dot PS,

00:02:18.020 --> 00:02:21.930
that TypeScript file,
close the terminal.

00:02:22.510 --> 00:02:25.205
And the important thing here,

00:02:25.205 --> 00:02:27.440
this type script class is macro

00:02:27.440 --> 00:02:29.749
with direct you annotation.

00:02:29.749 --> 00:02:33.244
So every custom directive is
macro with this decorator.

00:02:33.244 --> 00:02:36.710
Instead of at component there
marker with Ed, director.

00:02:36.710 --> 00:02:39.110
And the selector is

00:02:39.110 --> 00:02:41.525
where we specify the
name for our director.

00:02:41.525 --> 00:02:43.759
This is what we should
use in our HTML,

00:02:43.759 --> 00:02:47.045
just like how you
have used NG, NG far,

00:02:47.045 --> 00:02:49.280
we can use app my,

00:02:49.280 --> 00:02:51.785
if you can change this
to whatever you want,

00:02:51.785 --> 00:02:55.290
you can simply call
it my if as well.

00:02:56.800 --> 00:02:59.915
And the next step is to inject

00:02:59.915 --> 00:03:02.420
the container ref and

00:03:02.420 --> 00:03:03.950
template rough inside

00:03:03.950 --> 00:03:05.480
our constructor so
that we can use them.

00:03:05.480 --> 00:03:06.845
So private.

00:03:06.845 --> 00:03:10.550
Template, href is the first one.

00:03:10.550 --> 00:03:15.230
Colon itself, type
template, ref.

00:03:15.230 --> 00:03:17.030
Select that.

00:03:17.030 --> 00:03:19.490
And automatically that
import will be added here,

00:03:19.490 --> 00:03:23.630
that is from angular core
template href is the first one.

00:03:23.630 --> 00:03:25.130
You can give it any as

00:03:25.130 --> 00:03:27.020
the type of it
because temperature f

00:03:27.020 --> 00:03:31.384
can accept different
types of objects.

00:03:31.384 --> 00:03:35.600
And the second parameter
is the container ref.

00:03:35.600 --> 00:03:38.449
So the next field is private.

00:03:38.449 --> 00:03:42.740
Container, can call it
container or container ref,

00:03:42.740 --> 00:03:47.135
colon view container ref.

00:03:47.135 --> 00:03:48.740
The second one,
they're important

00:03:48.740 --> 00:03:53.240
that we have successfully
injected the template ref,

00:03:53.240 --> 00:03:55.655
which represents the
current HTML element.

00:03:55.655 --> 00:03:58.850
And the second one is the
view container rough.

00:03:58.850 --> 00:03:59.960
So using these two will

00:03:59.960 --> 00:04:02.015
implement the logic
in the next lecture.

00:04:02.015 --> 00:04:04.040
In this lecture, I hope
successfully created

00:04:04.040 --> 00:04:06.395
the project, created
the director.

00:04:06.395 --> 00:04:08.390
And we have seen that
the directives or marker

00:04:08.390 --> 00:04:11.150
with direct to annotation.

00:04:11.150 --> 00:04:14.000
And the selector
represents the name of

00:04:14.000 --> 00:04:17.490
the directory that we
should use in our HTML.

00:04:19.180 --> 00:04:21.710
The next step is to implement

00:04:21.710 --> 00:04:24.425
the logic for our
online if directive.

00:04:24.425 --> 00:04:26.030
The logic is simple.
We're going to

00:04:26.030 --> 00:04:29.375
conditionally display a
particular HTML element.

00:04:29.375 --> 00:04:31.190
If the condition evaluates

00:04:31.190 --> 00:04:32.765
to true, then we
will display it.

00:04:32.765 --> 00:04:34.865
If not, we are not
going to display it.

00:04:34.865 --> 00:04:36.170
To implement that method,

00:04:36.170 --> 00:04:39.005
we'll use set keyword space.

00:04:39.005 --> 00:04:40.550
The method name should be same

00:04:40.550 --> 00:04:42.575
as the selector that
we have used here.

00:04:42.575 --> 00:04:45.590
My, if, this can
also be different,

00:04:45.590 --> 00:04:46.880
I will show you how we

00:04:46.880 --> 00:04:49.830
can use a different
method name later.

00:04:50.080 --> 00:04:54.455
To implement the logic we
need to receive a parameter.

00:04:54.455 --> 00:04:55.700
And that parameter is of

00:04:55.700 --> 00:05:00.350
type Boolean condition
colon of type Boolean.

00:05:00.350 --> 00:05:04.100
And within the
method if condition,

00:05:04.100 --> 00:05:08.645
if it is true, then we need
to include that HTML element.

00:05:08.645 --> 00:05:10.550
Wherever we are
using this my-if,

00:05:10.550 --> 00:05:11.960
if it evaluates to true,

00:05:11.960 --> 00:05:14.270
then we should include that
HTML element in the view.

00:05:14.270 --> 00:05:16.924
So this dot container,

00:05:16.924 --> 00:05:20.375
dot create embedded view

00:05:20.375 --> 00:05:23.915
is the method that will
create a dome dynamically.

00:05:23.915 --> 00:05:26.960
Create embedded view
where we are going to

00:05:26.960 --> 00:05:30.455
include this dot template ref.

00:05:30.455 --> 00:05:31.595
So as I have said earlier,

00:05:31.595 --> 00:05:33.470
the template ref
always points to

00:05:33.470 --> 00:05:37.480
the HTML element on which
that directory is being used.

00:05:37.480 --> 00:05:40.805
We are including that
HTML element in the view.

00:05:40.805 --> 00:05:42.740
If the condition is true,

00:05:42.740 --> 00:05:50.100
else we can clear it off this
dot container, a dot clear.

00:05:51.190 --> 00:05:55.115
Very simple logic here.

00:05:55.115 --> 00:05:58.700
Should be container,
not the template rough.

00:05:58.700 --> 00:06:01.145
And to receive this condition,

00:06:01.145 --> 00:06:04.760
input, we need to
mark this width.

00:06:04.760 --> 00:06:10.170
Input decorator from Angular.

00:06:10.330 --> 00:06:13.325
At input, these
brackets are empty.

00:06:13.325 --> 00:06:16.550
This input is from angular core.

00:06:16.550 --> 00:06:19.145
If you want to use a
different name here,

00:06:19.145 --> 00:06:22.355
other than the selector
name inside this input,

00:06:22.355 --> 00:06:24.560
you can match that name.

00:06:24.560 --> 00:06:28.745
So here you can use whatever
name you want, my custom.

00:06:28.745 --> 00:06:33.065
But inside this input you
need to specify my EF,

00:06:33.065 --> 00:06:34.610
that is how Angular knows that

00:06:34.610 --> 00:06:36.470
whatever input is being used on

00:06:36.470 --> 00:06:38.750
the custom directive
that should be mapped to

00:06:38.750 --> 00:06:41.675
the parameter that we
have defined here.

00:06:41.675 --> 00:06:45.530
But let's change it
back to my F. So

00:06:45.530 --> 00:06:46.640
only if you use

00:06:46.640 --> 00:06:49.280
a different name than that
directory name itself,

00:06:49.280 --> 00:06:51.140
then you need to make sure

00:06:51.140 --> 00:06:53.775
that within the
input you specify

00:06:53.775 --> 00:06:56.920
the directive or
the selector name

00:06:56.920 --> 00:06:58.420
so that angular nodes for

00:06:58.420 --> 00:07:02.725
which this method should be
mapped for which directive,

00:07:02.725 --> 00:07:04.195
if not by default,

00:07:04.195 --> 00:07:06.040
Angular will map this method to

00:07:06.040 --> 00:07:09.340
this particular
directive, which is my.

00:07:09.340 --> 00:07:12.130
So in this lecture, how
successfully implemented

00:07:12.130 --> 00:07:15.550
the logic or the method
for if directive,

00:07:15.550 --> 00:07:17.395
Angular will by default,

00:07:17.395 --> 00:07:19.810
search for a method
with the same name as

00:07:19.810 --> 00:07:23.815
the directory name within that
directive implementation.

00:07:23.815 --> 00:07:25.870
And here we're passing in

00:07:25.870 --> 00:07:28.780
a condition which is Boolean
based on that condition.

00:07:28.780 --> 00:07:32.365
We are adding the
template ref to the view.

00:07:32.365 --> 00:07:33.850
If it is true, if it is false,

00:07:33.850 --> 00:07:36.290
then we are clearing it up.

00:07:36.990 --> 00:07:40.810
In this lecture, we will
use our custom my-if

00:07:40.810 --> 00:07:44.260
direct you in our template
or in the HTML page,

00:07:44.260 --> 00:07:47.529
which is app dot
component dot HTML.

00:07:47.529 --> 00:07:50.710
Go to app component
HTML, clear it up.

00:07:50.710 --> 00:07:53.050
Use a new element within this,

00:07:53.050 --> 00:07:57.385
do use a bold tag and
add any text you want.

00:07:57.385 --> 00:08:01.555
You are the creator
of your destiny.

00:08:01.555 --> 00:08:05.710
And you can use the my-if on
any of these HTML elements.

00:08:05.710 --> 00:08:07.075
Now, let's use it on that.

00:08:07.075 --> 00:08:11.410
Do use it, use star or asterix.

00:08:11.410 --> 00:08:13.945
My if. This is just
like how you have

00:08:13.945 --> 00:08:17.185
used NG if earlier,
the inbuilt directive.

00:08:17.185 --> 00:08:19.710
But now this is
our own directive.

00:08:19.710 --> 00:08:23.300
We need to pass it input
within double-quotes.

00:08:23.300 --> 00:08:25.475
True is the Boolean value.

00:08:25.475 --> 00:08:27.650
This value itself can come from

00:08:27.650 --> 00:08:31.310
your TypeScript files are
from within your HTML, etc.

00:08:31.310 --> 00:08:33.110
So this can be a
JavaScript variable.

00:08:33.110 --> 00:08:35.150
This can be a function
call or whatever.

00:08:35.150 --> 00:08:36.980
You know how to use
it because you've

00:08:36.980 --> 00:08:39.110
already done it with NG if.

00:08:39.110 --> 00:08:42.140
But here we're
hard-coding it to true.

00:08:42.140 --> 00:08:43.550
Save it.

00:08:43.550 --> 00:08:47.150
Go to View integrated terminal.

00:08:47.150 --> 00:08:53.225
Run the application
and G hyphen 0.

00:08:53.225 --> 00:08:55.145
And while that happens,

00:08:55.145 --> 00:08:57.785
I will summarize what
we have done so far.

00:08:57.785 --> 00:09:01.620
We have started by
creating a directive.

00:09:01.900 --> 00:09:04.790
The directives are marked with

00:09:04.790 --> 00:09:08.075
direct you annotation
or a decorator.

00:09:08.075 --> 00:09:09.590
I keep calling it
annotation because I

00:09:09.590 --> 00:09:11.555
keep going back to
my Java experience.

00:09:11.555 --> 00:09:12.810
And within the directive,

00:09:12.810 --> 00:09:14.300
we have injected that template

00:09:14.300 --> 00:09:17.075
rough and the container rough.

00:09:17.075 --> 00:09:19.850
The template rough. You can
think of it as if it is

00:09:19.850 --> 00:09:21.140
the current HTML element

00:09:21.140 --> 00:09:22.775
on which we are
using the direct to,

00:09:22.775 --> 00:09:25.640
the container is the container

00:09:25.640 --> 00:09:28.880
to which we can add
this embedded view.

00:09:28.880 --> 00:09:32.600
And then we have implemented
the logic for our directive.

00:09:32.600 --> 00:09:36.200
Within a method, the method
name should be same as

00:09:36.200 --> 00:09:40.445
the selector or the
directory name.

00:09:40.445 --> 00:09:42.785
And we have marked
it with an input

00:09:42.785 --> 00:09:45.080
so that we can receive
the Boolean input.

00:09:45.080 --> 00:09:47.630
We have used that input to
come up with our logic.

00:09:47.630 --> 00:09:49.190
Now let's go back
to the browser.

00:09:49.190 --> 00:09:51.110
And you see you

00:09:51.110 --> 00:09:52.970
are the creator of your
destiny because we

00:09:52.970 --> 00:09:57.125
have given a Boolean
flag value as true,

00:09:57.125 --> 00:09:59.750
change this to false, save.

00:09:59.750 --> 00:10:01.250
The changes should be pushed.

00:10:01.250 --> 00:10:03.410
And let's see if our
directive works as expected.

00:10:03.410 --> 00:10:06.365
You see nothing on the view.

00:10:06.365 --> 00:10:08.645
You have successfully created.

00:10:08.645 --> 00:10:10.490
Your very first
structural direct you to

00:10:10.490 --> 00:10:13.175
manipulate the DOM dynamically.

00:10:13.175 --> 00:10:15.215
So only if this
condition is true,

00:10:15.215 --> 00:10:18.365
you will see the output or
the element being added.

00:10:18.365 --> 00:10:20.300
If not, it's cleared up.

00:10:20.300 --> 00:10:22.310
You can add other text elements

00:10:22.310 --> 00:10:24.990
and play around with
their director.

00:10:25.710 --> 00:10:28.480
In this lecture, we
are going to implement

00:10:28.480 --> 00:10:32.365
one more custom directive
called my loop.

00:10:32.365 --> 00:10:34.735
Given a number, it will

00:10:34.735 --> 00:10:37.240
loop through those
many number of times.

00:10:37.240 --> 00:10:40.090
And it will display the HTML
element that many number

00:10:40.090 --> 00:10:43.450
of times it will act
like the end G4 direct.

00:10:43.450 --> 00:10:46.120
You go to the terminal,

00:10:46.120 --> 00:10:48.730
stop the application if
it's up and running,

00:10:48.730 --> 00:10:52.225
hitting Control C, create
a new directory and g,

00:10:52.225 --> 00:10:57.100
g, b, directives.

00:10:57.100 --> 00:10:58.285
Slash.

00:10:58.285 --> 00:10:59.755
We can organize them further.

00:10:59.755 --> 00:11:01.090
If you want, like loop,

00:11:01.090 --> 00:11:02.350
you can create one
more directory,

00:11:02.350 --> 00:11:04.435
but let's leave it
under directives.

00:11:04.435 --> 00:11:09.840
Call it my loop, Enter.

00:11:10.300 --> 00:11:12.440
And that will create

00:11:12.440 --> 00:11:15.320
two more files for
us under directives,

00:11:15.320 --> 00:11:17.375
the mile loop direct you spec,

00:11:17.375 --> 00:11:21.050
which is the test case, and
the mile loop that E2 dot ds,

00:11:21.050 --> 00:11:23.510
which we are going to
work with, go inside.

00:11:23.510 --> 00:11:28.290
You can change this to my
loop instead of app my loop.

00:11:28.390 --> 00:11:31.655
Inject their template
rough. You know what to do.

00:11:31.655 --> 00:11:33.770
You can go back to the
earlier directed graph.

00:11:33.770 --> 00:11:36.905
These two guys are copy
the constructor itself,

00:11:36.905 --> 00:11:39.515
come back, paste
the constructor,

00:11:39.515 --> 00:11:40.640
and we have template,

00:11:40.640 --> 00:11:42.650
rough and view container.

00:11:42.650 --> 00:11:44.450
You need to import those two.

00:11:44.450 --> 00:11:47.150
So go back, drop
the import as well.

00:11:47.150 --> 00:11:50.165
So that will have the input
and everything required.

00:11:50.165 --> 00:11:53.525
Come back, paste it.

00:11:53.525 --> 00:11:56.900
Or we need to overwrite

00:11:56.900 --> 00:11:59.570
the earlier input and we
have the constructor.

00:11:59.570 --> 00:12:02.900
The next step is to
implement the method itself.

00:12:02.900 --> 00:12:06.470
So start with set.

00:12:06.470 --> 00:12:08.630
Set, the method name.

00:12:08.630 --> 00:12:10.790
You can use, whatever
method name you want.

00:12:10.790 --> 00:12:13.865
You can call it my custom loop.

00:12:13.865 --> 00:12:18.320
And this takes a
number, so numb colon,

00:12:18.320 --> 00:12:22.055
number type how many times
we want the loop to execute.

00:12:22.055 --> 00:12:24.450
Use input.

00:12:24.850 --> 00:12:29.190
And this input should take.

00:12:29.290 --> 00:12:34.985
At input, we need to
provide the mapping.

00:12:34.985 --> 00:12:36.785
We need to use my loop here

00:12:36.785 --> 00:12:38.960
because the method
name now is different.

00:12:38.960 --> 00:12:41.720
So Angular will know only
if you use my loop here,

00:12:41.720 --> 00:12:44.390
it knows that this
particular method should be

00:12:44.390 --> 00:12:47.795
executed when this directory
users in the HTML.

00:12:47.795 --> 00:12:50.525
So do that and the
logic is very simple.

00:12:50.525 --> 00:12:52.940
Inside the method,
use a for loop.

00:12:52.940 --> 00:12:57.170
Var I is equal to zero.

00:12:57.170 --> 00:13:01.640
I is less than
number I plus plus.

00:13:01.640 --> 00:13:07.175
Within the body this dot
container dot create

00:13:07.175 --> 00:13:10.220
embedded view to
which you pass in

00:13:10.220 --> 00:13:13.790
the template rough
this dot template.

00:13:13.790 --> 00:13:18.005
Or if we're going to repeat
the template ref in the view,

00:13:18.005 --> 00:13:20.990
or we're going to append the
template ref to the DOM as

00:13:20.990 --> 00:13:24.680
many number of times
as the user wants.

00:13:24.680 --> 00:13:28.385
To use this, go to the app
dot component dot HTML,

00:13:28.385 --> 00:13:31.460
define a UL.

00:13:31.460 --> 00:13:33.995
And within the UL LI.

00:13:33.995 --> 00:13:37.880
And on this LI you can use star.

00:13:37.880 --> 00:13:43.820
My loop is equal to the number
of times, say four times.

00:13:43.820 --> 00:13:46.700
And within this ally, you can
add whatever text you want.

00:13:46.700 --> 00:13:49.985
You are awesome.

00:13:49.985 --> 00:13:54.890
Save it. Go back to
the terminal and

00:13:54.890 --> 00:14:00.690
run the application
and G. So hyphen 0.

00:14:01.630 --> 00:14:04.175
To summarize it,
well that happens.

00:14:04.175 --> 00:14:06.725
You have created a
mile loop directive,

00:14:06.725 --> 00:14:10.085
injected the template ref
and the container rough.

00:14:10.085 --> 00:14:11.600
And then we have implemented

00:14:11.600 --> 00:14:13.805
the method called
my custom loop,

00:14:13.805 --> 00:14:16.940
done the mapping, and
also injected the input

00:14:16.940 --> 00:14:20.180
using at input decorator so
that we will get this number.

00:14:20.180 --> 00:14:21.890
We are looping through
as many number

00:14:21.890 --> 00:14:24.545
of times and repeating

00:14:24.545 --> 00:14:26.960
the current HTML element and

00:14:26.960 --> 00:14:29.735
adding it to the
container or the view.

00:14:29.735 --> 00:14:32.940
Let's see the output
once it builds.

00:14:39.630 --> 00:14:42.400
And this directly
would've been added to

00:14:42.400 --> 00:14:44.380
the app module.js, right?

00:14:44.380 --> 00:14:47.480
When we have created it,
you can see it here.

00:14:49.230 --> 00:14:53.725
And in the output, you see
you are awesome four times.

00:14:53.725 --> 00:14:54.985
So you have created

00:14:54.985 --> 00:14:57.205
another structural
directive and used it

00:14:57.205 --> 00:15:02.155
successfully to add the same
HTML element multiple times.

00:15:02.155 --> 00:15:05.110
This value itself can
come from the back-end,

00:15:05.110 --> 00:15:08.480
it can come from our
model, and so on.

00:15:08.970 --> 00:15:11.260
In this lecture, you will create

00:15:11.260 --> 00:15:13.855
your first attribute directive.

00:15:13.855 --> 00:15:16.120
Now that you have created
structural directives,

00:15:16.120 --> 00:15:20.360
creating attribute
directive is quite simple.

00:15:20.650 --> 00:15:23.345
We're going to
create a directive

00:15:23.345 --> 00:15:25.790
which when used on
the HTML elements,

00:15:25.790 --> 00:15:28.700
we'll apply some styles
to the HTML element.

00:15:28.700 --> 00:15:31.070
So go to the console,
integrated console,

00:15:31.070 --> 00:15:33.020
stop the server if
it's up and running or

00:15:33.020 --> 00:15:35.825
the application
hit the up arrow.

00:15:35.825 --> 00:15:37.580
And Gigi directives.

00:15:37.580 --> 00:15:38.720
This is where we're
going to create

00:15:38.720 --> 00:15:42.215
a new directory
called my styles.

00:15:42.215 --> 00:15:43.745
Is the direct you name.

00:15:43.745 --> 00:15:45.620
The creation of the
directory itself

00:15:45.620 --> 00:15:47.300
no matter whether it is

00:15:47.300 --> 00:15:49.055
structural directives or

00:15:49.055 --> 00:15:51.470
attribute directives
remains the same.

00:15:51.470 --> 00:15:53.270
But how we implement

00:15:53.270 --> 00:15:56.030
the logic and the code
will be different.

00:15:56.030 --> 00:15:59.285
The app dot module.js
got updated.

00:15:59.285 --> 00:16:01.175
If you click on that,

00:16:01.175 --> 00:16:03.170
do a Command click that will

00:16:03.170 --> 00:16:04.609
open up the app dot module.js.

00:16:04.609 --> 00:16:06.920
We have the new directory
called my styles direct.

00:16:06.920 --> 00:16:08.900
You add it to the NG.

00:16:08.900 --> 00:16:11.960
Module. Declarations. Open up

00:16:11.960 --> 00:16:16.830
the new director by going
to the directives itself.

00:16:16.990 --> 00:16:21.500
Maximize it, close the console.

00:16:21.500 --> 00:16:23.810
The first difference between

00:16:23.810 --> 00:16:25.955
a structural directive
attribute director

00:16:25.955 --> 00:16:30.035
is we inject element rough
into the constructor,

00:16:30.035 --> 00:16:34.790
private EL ref colon
of type element rough.

00:16:34.790 --> 00:16:37.460
So this element ref points to

00:16:37.460 --> 00:16:39.080
the current element on which

00:16:39.080 --> 00:16:41.675
this directive is being used.

00:16:41.675 --> 00:16:44.300
So let's change the selector to

00:16:44.300 --> 00:16:48.080
my styles instead
of app my styles.

00:16:48.080 --> 00:16:50.300
Within the constructor,
we are going

00:16:50.300 --> 00:16:51.890
to apply some styles to

00:16:51.890 --> 00:16:55.625
any HTML element on which
this directory will be used.

00:16:55.625 --> 00:16:59.810
Yellow ref to access the
native HTML element.

00:16:59.810 --> 00:17:01.595
Use native element.

00:17:01.595 --> 00:17:05.705
Dot style is equal to dot style,

00:17:05.705 --> 00:17:08.285
dot whatever style
you want to change.

00:17:08.285 --> 00:17:12.335
Say color is equal to red,

00:17:12.335 --> 00:17:18.620
yellow, ref dot, native element
dot style dot background.

00:17:18.620 --> 00:17:24.050
Color is equal to say hello.

00:17:24.050 --> 00:17:27.020
You can access any
styling information

00:17:27.020 --> 00:17:29.390
from here and you can
change the styling for

00:17:29.390 --> 00:17:31.700
that particular HTML
element to element

00:17:31.700 --> 00:17:34.565
dot style dot. Let's use font.

00:17:34.565 --> 00:17:40.250
Size is equal to bx.

00:17:40.250 --> 00:17:44.105
So you can use either
the double quotes

00:17:44.105 --> 00:17:45.170
or single quotes here,

00:17:45.170 --> 00:17:47.885
Let's be consistent.
Let's use double-quotes.

00:17:47.885 --> 00:17:50.585
So we have applied
three styles here,

00:17:50.585 --> 00:17:52.655
and we're all set to use this.

00:17:52.655 --> 00:17:55.745
Direct you on any of
our HTML elements go to

00:17:55.745 --> 00:18:00.904
app dot component dot
HTML defined a H1.

00:18:00.904 --> 00:18:04.670
And within the H1 you can say

00:18:04.670 --> 00:18:09.360
all the power is within you.

00:18:10.240 --> 00:18:13.610
And we use the direct.
You. No need to use star,

00:18:13.610 --> 00:18:16.955
simply use the directive
name inside the H1.

00:18:16.955 --> 00:18:20.930
My styles is the directory name

00:18:20.930 --> 00:18:22.055
or the selector that we have.

00:18:22.055 --> 00:18:24.470
User, just use that and
that directive will

00:18:24.470 --> 00:18:27.245
be applied to this HTML element.

00:18:27.245 --> 00:18:30.920
Save it, or to
integrate a terminal.

00:18:30.920 --> 00:18:34.610
Start the server
and G, So hyphen 0.

00:18:34.610 --> 00:18:36.500
While that happens.

00:18:36.500 --> 00:18:39.515
So implementing the attribute
directives is very simple.

00:18:39.515 --> 00:18:41.585
We have created a directory

00:18:41.585 --> 00:18:44.750
and you have changed it a
selector to whatever you want.

00:18:44.750 --> 00:18:46.475
This will be the directory name.

00:18:46.475 --> 00:18:50.390
And inside the constructor
itself, we are initializing.

00:18:50.390 --> 00:18:51.935
We are injecting
the element ref,

00:18:51.935 --> 00:18:54.680
which points to the HTML element

00:18:54.680 --> 00:18:56.750
on which the directive
is being used.

00:18:56.750 --> 00:18:59.450
And then we are changing
the styling or we are

00:18:59.450 --> 00:19:03.110
applying some styling
to that HTML element.

00:19:03.110 --> 00:19:05.779
So let's see if
our styling works.

00:19:05.779 --> 00:19:10.320
Once the application is
built and refreshed.

00:19:12.610 --> 00:19:16.760
There we go. So it says all
the power is within you.

00:19:16.760 --> 00:19:17.930
The font size is 40.

00:19:17.930 --> 00:19:19.655
You can play around
with the font size.

00:19:19.655 --> 00:19:25.470
The color is red and the
background color is yellow.

00:19:26.890 --> 00:19:29.540
In this lecture, we
will learn how to

00:19:29.540 --> 00:19:32.495
dynamically pass values
to the director,

00:19:32.495 --> 00:19:34.610
to the attribute
directive and then use

00:19:34.610 --> 00:19:36.725
them to change the styling,

00:19:36.725 --> 00:19:38.720
etc, on our template.

00:19:38.720 --> 00:19:40.865
To do that first,
we need to define

00:19:40.865 --> 00:19:43.310
a field on our directives.

00:19:43.310 --> 00:19:44.720
So close the terminal.

00:19:44.720 --> 00:19:45.965
Right here.

00:19:45.965 --> 00:19:47.900
We can define a field,

00:19:47.900 --> 00:19:53.240
say font size, colon
of type string.

00:19:53.240 --> 00:19:57.440
And we need to mark this
with input decorator.

00:19:57.440 --> 00:20:01.640
So that Angular will
inject this input when

00:20:01.640 --> 00:20:03.260
we use it on the directive from

00:20:03.260 --> 00:20:05.645
the template will be able
to provide this value.

00:20:05.645 --> 00:20:07.955
And to use this, we
need to use this

00:20:07.955 --> 00:20:11.794
after our template is
completely rendered.

00:20:11.794 --> 00:20:15.664
So we need to define
a lifecycle hook mg.

00:20:15.664 --> 00:20:20.630
After view in it is
the lifecycle method.

00:20:20.630 --> 00:20:22.790
It returns a type white,

00:20:22.790 --> 00:20:24.365
so it doesn't return anything.

00:20:24.365 --> 00:20:26.840
Within the body of
this will access

00:20:26.840 --> 00:20:33.680
this dot dot native element
dot style dot font size

00:20:33.680 --> 00:20:38.690
is equal to whatever font
size the user is passing in.

00:20:38.690 --> 00:20:42.125
This dot font size is
being assigned here.

00:20:42.125 --> 00:20:43.970
So right when the
directory was created,

00:20:43.970 --> 00:20:45.905
these are the values
that will be used.

00:20:45.905 --> 00:20:48.740
But once the HTML is
rendered dynamically,

00:20:48.740 --> 00:20:51.125
we can pass in whatever
value we want.

00:20:51.125 --> 00:20:57.560
Right here. I can say font
size is equal to say, API.

00:20:57.560 --> 00:21:02.475
Within double-quotes.

00:21:02.475 --> 00:21:07.930
Atp x. So this value will be
used inside the directive.

00:21:07.930 --> 00:21:11.530
Once the view is
rendered, save it.

00:21:11.530 --> 00:21:14.030
Go back to the browser.

00:21:15.060 --> 00:21:19.000
And you'll see the
font size is a

00:21:19.000 --> 00:21:22.015
t. Now, in this lecture,

00:21:22.015 --> 00:21:26.035
how successfully user the input

00:21:26.035 --> 00:21:28.720
to receive some inputs
inside the directive.

00:21:28.720 --> 00:21:32.065
And we're using that input to

00:21:32.065 --> 00:21:34.210
assign it to the
style information

00:21:34.210 --> 00:21:36.055
of a particular HTML element.

00:21:36.055 --> 00:21:38.995
And we do that in the
energy after view in it,

00:21:38.995 --> 00:21:41.650
which is a lifecycle hook
method in Angular that

00:21:41.650 --> 00:21:45.439
will be invoked after
the UI is rendered.

00:21:46.590 --> 00:21:50.290
We can also use handle
HTML events and

00:21:50.290 --> 00:21:54.745
bind methods to them inside
our attribute directives.

00:21:54.745 --> 00:21:57.610
That is right here,
we can handle

00:21:57.610 --> 00:22:00.070
the onmouseover on P pressed,

00:22:00.070 --> 00:22:02.050
et cetera, all the DOM events,

00:22:02.050 --> 00:22:04.419
and then take
appropriate actions.

00:22:04.419 --> 00:22:06.415
We are going to use the host

00:22:06.415 --> 00:22:08.920
listener decorator to do that.

00:22:08.920 --> 00:22:13.015
To handle the most over
our mouse enter event.

00:22:13.015 --> 00:22:16.570
Define a method called
on mouse enter.

00:22:16.570 --> 00:22:19.405
The method name itself
can be anything.

00:22:19.405 --> 00:22:23.110
Within this. We can define
all the logic you want to

00:22:23.110 --> 00:22:26.755
do when the most enters on
a particular HTML element.

00:22:26.755 --> 00:22:31.235
But we need to mark this
with host listener.

00:22:31.235 --> 00:22:33.065
From angular core.

00:22:33.065 --> 00:22:35.975
The host listener
within brackets takes

00:22:35.975 --> 00:22:39.620
the event that we want
to handle or listen to.

00:22:39.620 --> 00:22:42.830
Mouse. Enter is an event,

00:22:42.830 --> 00:22:45.290
and this is the method
that we are binding to

00:22:45.290 --> 00:22:48.245
the most enter event.

00:22:48.245 --> 00:22:51.785
Inside this, we can take
whatever action you want.

00:22:51.785 --> 00:22:54.440
You can copy this, paste it,

00:22:54.440 --> 00:22:57.380
and you can change the font
size here or style dot.

00:22:57.380 --> 00:23:00.050
Let's change the color,
the background color.

00:23:00.050 --> 00:23:02.390
We want to change it to.

00:23:02.390 --> 00:23:05.075
From a low. Initially
it will be yellow.

00:23:05.075 --> 00:23:08.220
So let's change it to say blue.

00:23:10.270 --> 00:23:15.110
Save it. Go back to
the web browser.

00:23:15.110 --> 00:23:16.910
Right now, as you can see,

00:23:16.910 --> 00:23:18.815
as soon as your mouse
moves, it is blue.

00:23:18.815 --> 00:23:21.230
But let's refresh the page.

00:23:21.230 --> 00:23:23.405
Right now it's
yellow, but your most

00:23:23.405 --> 00:23:25.700
enters, it becomes blue.

00:23:25.700 --> 00:23:27.290
So this is how you can handle

00:23:27.290 --> 00:23:29.345
HTML events or the DOM events.

00:23:29.345 --> 00:23:31.565
Copy it, copy the entire method,

00:23:31.565 --> 00:23:38.640
paste it will handle another
event on mouse leave.

00:23:39.040 --> 00:23:43.280
And it's called
mouse live event.

00:23:43.280 --> 00:23:44.375
Instead of moles enter,

00:23:44.375 --> 00:23:46.025
this should be most leave.

00:23:46.025 --> 00:23:48.710
Change the color either
back to L0 or you can

00:23:48.710 --> 00:23:51.725
change it to green. Save it.

00:23:51.725 --> 00:23:53.480
Go back to the web browser.

00:23:53.480 --> 00:23:56.900
Right now it's L0. You place
the mouse, it becomes blue.

00:23:56.900 --> 00:23:59.510
You take the mouse
out, it becomes green.

00:23:59.510 --> 00:24:02.810
But the key here is you
can use at host listener

00:24:02.810 --> 00:24:04.310
a decorator and handle

00:24:04.310 --> 00:24:07.760
a particular event inside
of our attribute directive.

00:24:07.760 --> 00:24:10.055
And bind that event to a method

00:24:10.055 --> 00:24:13.590
within which you define
what our logic you want.
