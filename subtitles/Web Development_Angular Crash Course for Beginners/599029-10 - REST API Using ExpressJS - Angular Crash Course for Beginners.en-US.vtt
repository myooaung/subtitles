WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.070 --> 00:00:03.285
In the next few lectures,

00:00:03.285 --> 00:00:04.529
you are going to create

00:00:04.529 --> 00:00:06.779
a RESTful API that

00:00:06.779 --> 00:00:09.330
can be consumed by
Angular application.

00:00:09.330 --> 00:00:13.874
And you are going to do that
using Node and Express.

00:00:13.874 --> 00:00:17.234
Node is a JavaScript
framework that allows us to

00:00:17.234 --> 00:00:21.220
create server-side
applications using JavaScript.

00:00:21.220 --> 00:00:23.569
You're going to expose
out the crud operations,

00:00:23.569 --> 00:00:24.875
create, read, update,

00:00:24.875 --> 00:00:28.489
and delete on a product table in

00:00:28.489 --> 00:00:32.885
the database using the
combination of Node and Express.

00:00:32.885 --> 00:00:35.660
Express is a module in node.

00:00:35.660 --> 00:00:37.970
Node has several inbuilt models

00:00:37.970 --> 00:00:40.640
and we can create our
own modules as well.

00:00:40.640 --> 00:00:43.054
We're going to use three
important modules,

00:00:43.054 --> 00:00:46.279
Express to create RESTful APIs.

00:00:46.279 --> 00:00:49.580
Mysql module in
node to connect to

00:00:49.580 --> 00:00:52.969
the MySQL database and perform
the crud operations and

00:00:52.969 --> 00:00:55.340
the body parser module to parse

00:00:55.340 --> 00:00:57.469
the incoming request into

00:00:57.469 --> 00:01:00.755
a JavaScript object
and vice a versa.

00:01:00.755 --> 00:01:02.405
So it's very simple.

00:01:02.405 --> 00:01:04.130
You're going to use node

00:01:04.130 --> 00:01:06.649
and the modules within node
that we're going to use

00:01:06.649 --> 00:01:09.740
our Express JS MySQL module to

00:01:09.740 --> 00:01:13.130
connect to MySQL database
and the body parser module.

00:01:13.130 --> 00:01:14.509
And we'll expose out

00:01:14.509 --> 00:01:16.744
a RESTful web service API

00:01:16.744 --> 00:01:18.769
that can be used by the clients,

00:01:18.769 --> 00:01:21.095
which are nothing but
our angular applications

00:01:21.095 --> 00:01:22.580
to create, read,

00:01:22.580 --> 00:01:27.299
update, and delete a
product in their database.

00:01:28.450 --> 00:01:30.800
In this lecture, we'll create

00:01:30.800 --> 00:01:33.200
the product table against
which we are going to

00:01:33.200 --> 00:01:35.060
perform the crud operations by

00:01:35.060 --> 00:01:37.595
exposing outer RESTful API.

00:01:37.595 --> 00:01:39.169
In the next few lectures,

00:01:39.169 --> 00:01:41.540
Go to your MySQL Workbench,

00:01:41.540 --> 00:01:42.769
open up a query window.

00:01:42.769 --> 00:01:47.404
The first statement is
use my DB execute that.

00:01:47.404 --> 00:01:50.194
Now we are inside
the DB database.

00:01:50.194 --> 00:01:52.429
Execute the next statement
which is to create

00:01:52.429 --> 00:01:54.995
a table called product with ID,

00:01:54.995 --> 00:01:56.375
which is of type int.

00:01:56.375 --> 00:02:00.515
Name is varchar,
description is var char.

00:02:00.515 --> 00:02:02.795
Price is of type int,

00:02:02.795 --> 00:02:04.385
so the product has an ID,

00:02:04.385 --> 00:02:10.235
name, description, and
price, select that, execute.

00:02:10.235 --> 00:02:12.679
The last one is a simple
select statement.

00:02:12.679 --> 00:02:15.904
Right now, the product table
does not have any records,

00:02:15.904 --> 00:02:18.020
but we're going to put some and

00:02:18.020 --> 00:02:21.359
fetch them in the
next few lectures.

00:02:22.560 --> 00:02:26.784
In this lecture, you will
create your first Node project,

00:02:26.784 --> 00:02:29.154
the product API that will host

00:02:29.154 --> 00:02:31.149
the RESTful services to perform

00:02:31.149 --> 00:02:33.699
the crud operations
against the product.

00:02:33.699 --> 00:02:36.279
This project will use
the Express module,

00:02:36.279 --> 00:02:37.825
the MySQL module to

00:02:37.825 --> 00:02:40.074
connect and work with
the MySQL database.

00:02:40.074 --> 00:02:42.189
And then the body parser module,

00:02:42.189 --> 00:02:44.409
which will parse
the post requests

00:02:44.409 --> 00:02:46.509
for us to create a project.

00:02:46.509 --> 00:02:47.844
It's very simple.

00:02:47.844 --> 00:02:50.769
Go to the folder where we are
storing all our projects,

00:02:50.769 --> 00:02:52.494
create a new folder,

00:02:52.494 --> 00:02:56.379
call it product API.

00:02:56.379 --> 00:02:58.524
That's our project.

00:02:58.524 --> 00:03:00.640
Navigate to this folder from

00:03:00.640 --> 00:03:03.639
the command line right
now I'm under angular.

00:03:03.639 --> 00:03:04.979
Cd.

00:03:04.979 --> 00:03:08.209
Product API will take
me to that folder

00:03:08.209 --> 00:03:11.569
and start adding the
modules we want express,

00:03:11.569 --> 00:03:15.304
MySQL and bodyParser, an

00:03:15.304 --> 00:03:17.840
ad and is the package manager we

00:03:17.840 --> 00:03:20.419
are adding a module,
so add space.

00:03:20.419 --> 00:03:23.389
The name of the module
is express space,

00:03:23.389 --> 00:03:26.494
hyphen, hyphen, Save, hit Enter.

00:03:26.494 --> 00:03:28.970
That will download all
the required files

00:03:28.970 --> 00:03:31.295
from the internet,
as you can see here.

00:03:31.295 --> 00:03:33.319
If you go back to the project.

00:03:33.319 --> 00:03:36.139
Now this folder will
have node underscore

00:03:36.139 --> 00:03:39.965
modules with all the
Express modules in there.

00:03:39.965 --> 00:03:45.379
And the package.json file
open this in a text editor.

00:03:45.379 --> 00:03:47.495
The package.json lists out

00:03:47.495 --> 00:03:50.569
all the dependencies for
our project. Right now.

00:03:50.569 --> 00:03:53.150
It has just the
Express dependency.

00:03:53.150 --> 00:03:56.279
Close it, go back,

00:03:56.560 --> 00:04:01.054
hit the up arrow, and add.

00:04:01.054 --> 00:04:04.490
The second module is the
MySQL module space hyphen,

00:04:04.490 --> 00:04:07.159
hyphen Save, hit Enter.

00:04:07.159 --> 00:04:10.729
That will download the SQL
dependencies apparel Again,

00:04:10.729 --> 00:04:14.524
the last dependency
is the body parser.

00:04:14.524 --> 00:04:17.494
Bodyparser enter.

00:04:17.494 --> 00:04:20.344
That will pull the body
parser dependency.

00:04:20.344 --> 00:04:21.829
If you go back to the folder,

00:04:21.829 --> 00:04:24.334
open up the package.json again.

00:04:24.334 --> 00:04:27.574
This time we will see all
the three dependencies

00:04:27.574 --> 00:04:29.615
and the three models
that we have added.

00:04:29.615 --> 00:04:33.124
And all of those modules
under files are downloaded

00:04:33.124 --> 00:04:35.015
under the node underscore

00:04:35.015 --> 00:04:37.505
modules folder
automatically for us.

00:04:37.505 --> 00:04:39.605
You can drag and
drop this project

00:04:39.605 --> 00:04:41.194
onto Visual Studio Code,

00:04:41.194 --> 00:04:43.115
open up a new window,

00:04:43.115 --> 00:04:46.189
grab it, drop it.

00:04:46.189 --> 00:04:48.575
And that will open
their products

00:04:48.575 --> 00:04:50.690
API with the node modules,

00:04:50.690 --> 00:04:53.734
the package.json, which
lists out our dependencies,

00:04:53.734 --> 00:04:57.719
will start using this
project in the next lecture.

00:04:58.330 --> 00:05:02.884
The first step is to establish
a database connection.

00:05:02.884 --> 00:05:05.749
Do that, we're going
to use two files,

00:05:05.749 --> 00:05:08.090
the DBA underscore
connection dot js,

00:05:08.090 --> 00:05:10.085
which is responsible
for creating

00:05:10.085 --> 00:05:12.080
a database connection
and returning

00:05:12.080 --> 00:05:14.615
it using the MySQL module.

00:05:14.615 --> 00:05:16.670
And then the DB
endoscope properties,

00:05:16.670 --> 00:05:18.785
which will store the
connection information.

00:05:18.785 --> 00:05:20.809
And this DB under scope
properties will be

00:05:20.809 --> 00:05:23.675
used by db underscore
connection.

00:05:23.675 --> 00:05:25.985
Go to Visual Studio Code.

00:05:25.985 --> 00:05:30.199
In the project, create a
new folder, call it config.

00:05:30.199 --> 00:05:33.169
Under the conflict, we are
going to create two files.

00:05:33.169 --> 00:05:38.764
The first file is db
underscore connection dot js,

00:05:38.764 --> 00:05:47.150
and the second file is db
underscore properties dot js.

00:05:47.150 --> 00:05:48.949
In this properties file,

00:05:48.949 --> 00:05:52.054
we are going to create an
object which will store

00:05:52.054 --> 00:05:56.704
all the connection information
within angular brackets.

00:05:56.704 --> 00:06:01.895
Host is the first property,
colon. Local host.

00:06:01.895 --> 00:06:05.404
Mysql server for me is it's
running on my local machine.

00:06:05.404 --> 00:06:10.609
User within double-quotes,
root is the user for me,

00:06:10.609 --> 00:06:13.415
comma, b comma here.

00:06:13.415 --> 00:06:15.350
Next is password.

00:06:15.350 --> 00:06:17.000
Colon.

00:06:17.000 --> 00:06:18.889
Test is my password.

00:06:18.889 --> 00:06:20.480
If you are a root
password is root or

00:06:20.480 --> 00:06:22.415
whatever, use that here.

00:06:22.415 --> 00:06:28.850
And the last one is
the database name,

00:06:28.850 --> 00:06:31.039
or simply DB name.

00:06:31.039 --> 00:06:32.345
These properties
can be anything.

00:06:32.345 --> 00:06:33.994
You can call them
whatever you want

00:06:33.994 --> 00:06:36.230
because we're going to
use them in the next JS

00:06:36.230 --> 00:06:41.705
we're going to create my
DB is the last property.

00:06:41.705 --> 00:06:42.725
Save it.

00:06:42.725 --> 00:06:46.250
And we need to do a
module dot exports

00:06:46.250 --> 00:06:49.639
so that this object
can be used anywhere.

00:06:49.639 --> 00:06:52.205
And a semicolon at the end.

00:06:52.205 --> 00:06:54.620
Module dot exports is

00:06:54.620 --> 00:06:57.079
equal to this object we
have created this simply is

00:06:57.079 --> 00:06:59.359
a JavaScript object
that can be used when

00:06:59.359 --> 00:07:02.060
this module is imported
in other files.

00:07:02.060 --> 00:07:03.755
Now go to DB connection.

00:07:03.755 --> 00:07:07.879
The very first statement
here is to import by

00:07:07.879 --> 00:07:09.859
using the require
function that's

00:07:09.859 --> 00:07:12.260
available in
JavaScript standard.

00:07:12.260 --> 00:07:16.820
Require, give the name
of the module we want to

00:07:16.820 --> 00:07:19.189
import dot slash DB properties

00:07:19.189 --> 00:07:20.989
just like import
statement require.

00:07:20.989 --> 00:07:22.670
We'll import this module,

00:07:22.670 --> 00:07:30.679
assign it to an object where
db props is equal to that.

00:07:30.679 --> 00:07:35.360
Next step is to import
the MySQL module.

00:07:35.360 --> 00:07:37.580
So var MySQL is

00:07:37.580 --> 00:07:40.400
equal to use require
again, it's super simple.

00:07:40.400 --> 00:07:41.914
Within double-quotes.

00:07:41.914 --> 00:07:45.140
My SQL that will

00:07:45.140 --> 00:07:46.639
import the MySQL model which we

00:07:46.639 --> 00:07:48.589
have added earlier
to the project.

00:07:48.589 --> 00:07:51.229
Now that we have both the
connection information

00:07:51.229 --> 00:07:53.179
and the MySQL module,

00:07:53.179 --> 00:07:55.355
we're going to use
it by creating

00:07:55.355 --> 00:07:57.889
a method called get connection,

00:07:57.889 --> 00:08:01.260
which is a arrow function.

00:08:02.410 --> 00:08:05.690
Get connection colon.

00:08:05.690 --> 00:08:08.119
That our function
syntax followed

00:08:08.119 --> 00:08:10.640
by the body of the
arrow function,

00:08:10.640 --> 00:08:14.600
within which will return MySQL.

00:08:14.600 --> 00:08:16.369
The model we have imported here,

00:08:16.369 --> 00:08:21.004
dot create connection is the
function on the MySQL model,

00:08:21.004 --> 00:08:23.749
which will take all the
connection information and it

00:08:23.749 --> 00:08:26.884
will create a connection for us.

00:08:26.884 --> 00:08:31.050
To create connection, we
need to pass in an object.

00:08:31.600 --> 00:08:39.259
In here, host colon,
OBJ dot host.

00:08:39.259 --> 00:08:41.869
So here we are
using the DB props.

00:08:41.869 --> 00:08:46.445
So it's not OBJ, it should
be DB props dot host comma.

00:08:46.445 --> 00:08:51.229
Next is User colon, BB,

00:08:51.229 --> 00:08:57.299
props dot user password

00:08:57.700 --> 00:09:07.024
colon DB props dot
password comma.

00:09:07.024 --> 00:09:10.085
The last information is
the database information.

00:09:10.085 --> 00:09:19.474
Colon DB name or BB props
dot db name. Save it.

00:09:19.474 --> 00:09:21.380
In this get connection method,

00:09:21.380 --> 00:09:22.399
which is a arrow function,

00:09:22.399 --> 00:09:23.719
which is an anonymous function

00:09:23.719 --> 00:09:24.889
that we are creating
dynamically.

00:09:24.889 --> 00:09:27.080
We are returning a
connection back that we are

00:09:27.080 --> 00:09:30.605
creating using MySQL
dot create connection.

00:09:30.605 --> 00:09:35.539
And this create connection
expects an object with host,

00:09:35.539 --> 00:09:39.350
user password and database
properties on it,

00:09:39.350 --> 00:09:41.720
which it will use to
connect to the database.

00:09:41.720 --> 00:09:44.659
And here we are using the
model we have imported so

00:09:44.659 --> 00:09:47.855
that we have externalized
our connection information.

00:09:47.855 --> 00:09:51.440
Instead of hard-coding those
values here, host, user,

00:09:51.440 --> 00:09:53.300
password and DB name,

00:09:53.300 --> 00:09:56.010
that will give us
a connection back.

00:09:56.760 --> 00:09:59.455
The next step is to create

00:09:59.455 --> 00:10:02.979
a controller that will
host our RESTful API.

00:10:02.979 --> 00:10:04.329
This controller will use

00:10:04.329 --> 00:10:07.074
the db connection module
and also the router

00:10:07.074 --> 00:10:11.394
from Express to create their
routes for our RESTful API,

00:10:11.394 --> 00:10:12.579
they are nothing, nothing but

00:10:12.579 --> 00:10:17.769
the URI mappings to our
Restful endpoint methods.

00:10:17.769 --> 00:10:21.984
Go to the Visual Studio Code
and Android Product API,

00:10:21.984 --> 00:10:27.055
our project, create a new
folder, call it controllers.

00:10:27.055 --> 00:10:30.129
This is a convention that
they express projects follow.

00:10:30.129 --> 00:10:34.450
Under controllers we put all
our RESTful API endpoints.

00:10:34.450 --> 00:10:38.639
New file, call it product dot.

00:10:38.639 --> 00:10:41.929
Controller dot js.

00:10:41.929 --> 00:10:45.905
The first step here is to
import this DB connection.

00:10:45.905 --> 00:10:48.589
We do that using require.

00:10:48.589 --> 00:10:53.750
Db connection is equal to
require within brackets,

00:10:53.750 --> 00:10:56.464
within double quotes
or single quotes.

00:10:56.464 --> 00:10:59.164
Dot dot, go back to directories

00:10:59.164 --> 00:11:04.115
slash just one directory

00:11:04.115 --> 00:11:06.589
because config and
controllers are parallel.

00:11:06.589 --> 00:11:09.950
So dot-dot slash config
slash DB connection,

00:11:09.950 --> 00:11:12.869
that will give us
the DB connection.

00:11:14.200 --> 00:11:16.669
Now to create a connection,

00:11:16.669 --> 00:11:19.549
we need to invoke the
connection method.

00:11:19.549 --> 00:11:21.350
This needs to be exported

00:11:21.350 --> 00:11:23.120
so that it can be
used in other places.

00:11:23.120 --> 00:11:26.285
So modules dot export.

00:11:26.285 --> 00:11:28.144
Within flower brackets,

00:11:28.144 --> 00:11:29.749
we are exporting
the DB connection.

00:11:29.749 --> 00:11:31.819
Close that right there.

00:11:31.819 --> 00:11:37.114
Modules dot or more
taught, exports.

00:11:37.114 --> 00:11:38.660
Just like how we have exploited

00:11:38.660 --> 00:11:40.730
the DB properties we
are exporting that get

00:11:40.730 --> 00:11:45.330
connection method so that it
can be used in other places.

00:11:45.330 --> 00:11:47.439
Module.exports is equal to

00:11:47.439 --> 00:11:50.755
that object which contains
this get connection method.

00:11:50.755 --> 00:11:54.549
Now we can use the get
connection in our controller.

00:11:54.549 --> 00:12:01.750
Wire connection is equal to
db conn dot get connection.

00:12:01.750 --> 00:12:05.275
That will give us a MySQL
database connection back.

00:12:05.275 --> 00:12:10.525
And you do connection,
dot connect.

00:12:10.525 --> 00:12:12.445
So once you get a connection,

00:12:12.445 --> 00:12:13.930
It's like a pool of connections.

00:12:13.930 --> 00:12:16.060
You say connection dot connect,

00:12:16.060 --> 00:12:17.890
that will open up a connection.

00:12:17.890 --> 00:12:19.899
This connection object
knows how to connect.

00:12:19.899 --> 00:12:21.804
This here, the connect method

00:12:21.804 --> 00:12:24.039
will connect to the database.

00:12:24.039 --> 00:12:26.664
Next step is to
import the express.

00:12:26.664 --> 00:12:29.180
Var. Express is equal to

00:12:29.180 --> 00:12:34.110
require within double-quotes
they express module.

00:12:34.330 --> 00:12:36.710
Once we have the express module,

00:12:36.710 --> 00:12:39.620
we can create a router
which we use to map to a

00:12:39.620 --> 00:12:45.814
restful endpoints
express router.

00:12:45.814 --> 00:12:47.825
The last one, express router,

00:12:47.825 --> 00:12:49.325
will give us a router.

00:12:49.325 --> 00:12:50.375
Back.

00:12:50.375 --> 00:12:52.129
In this lecture, you
are successfully

00:12:52.129 --> 00:12:54.365
initialized it to the
controller by creating it.

00:12:54.365 --> 00:12:55.924
We have water DB connection.

00:12:55.924 --> 00:12:57.994
You have imported
the express module,

00:12:57.994 --> 00:13:01.654
and you have also imported
or created a router,

00:13:01.654 --> 00:13:02.870
it will start creating

00:13:02.870 --> 00:13:05.909
the RESTful API in
the next lecture.

00:13:06.580 --> 00:13:10.339
Stressful method that we're
going to expose out is

00:13:10.339 --> 00:13:12.260
the getMethod that will return

00:13:12.260 --> 00:13:14.570
all the products to the client.

00:13:14.570 --> 00:13:17.194
We're going to do
that using a router.

00:13:17.194 --> 00:13:20.000
Dot get is the HTTP methods.

00:13:20.000 --> 00:13:21.185
So on the router for

00:13:21.185 --> 00:13:24.709
every HTTP method
that is a function,

00:13:24.709 --> 00:13:27.409
and it maps it to the HTTP verb.

00:13:27.409 --> 00:13:30.380
So this GET, post
PUT are called HTTP

00:13:30.380 --> 00:13:33.920
verbs and we are mapping
the following URL.

00:13:33.920 --> 00:13:36.499
So the first
parameter is the URL.

00:13:36.499 --> 00:13:41.404
I'm using just the
forward slash comma.

00:13:41.404 --> 00:13:43.984
Within here, the arrow function,

00:13:43.984 --> 00:13:47.809
which will handle the request
and send a response back.

00:13:47.809 --> 00:13:48.920
We'll go.

00:13:48.920 --> 00:13:51.439
So you are defining
a arrow function.

00:13:51.439 --> 00:13:54.079
Request and response
are the parameters.

00:13:54.079 --> 00:13:57.904
Arrow, open up the floor
bracket and close it.

00:13:57.904 --> 00:13:59.854
And in here you will
handle the request

00:13:59.854 --> 00:14:01.970
and send whatever
response you want.

00:14:01.970 --> 00:14:03.035
Back.

00:14:03.035 --> 00:14:05.569
In this function we will use

00:14:05.569 --> 00:14:10.535
connection dot query is the
method on this connection.

00:14:10.535 --> 00:14:14.645
Query is the method to execute
all the SQL statements.

00:14:14.645 --> 00:14:16.715
You can pass in whatever
query you want.

00:14:16.715 --> 00:14:20.510
Select star from
product is the query in

00:14:20.510 --> 00:14:24.680
this particular case, comma.

00:14:24.680 --> 00:14:27.604
So the query method has
a second parameter,

00:14:27.604 --> 00:14:30.499
which is a callback function
to handle the response

00:14:30.499 --> 00:14:31.760
that comes back from the query

00:14:31.760 --> 00:14:33.770
open up arrow function again.

00:14:33.770 --> 00:14:37.609
The first parameter
here is a error.

00:14:37.609 --> 00:14:39.500
If some error
happens that can be

00:14:39.500 --> 00:14:41.509
handled using Error comma.

00:14:41.509 --> 00:14:42.649
If there are no errors,

00:14:42.649 --> 00:14:44.855
we get records back.

00:14:44.855 --> 00:14:48.200
Comma, the last parameter
in case of select queries,

00:14:48.200 --> 00:14:52.859
we also get the fields,
field names back.

00:14:53.710 --> 00:14:56.029
So that's the arrow function.

00:14:56.029 --> 00:14:57.724
So open up the arrow,

00:14:57.724 --> 00:14:59.764
open and close for our bracket.

00:14:59.764 --> 00:15:01.325
So this arrow function here is

00:15:01.325 --> 00:15:02.660
the RESTful API which is

00:15:02.660 --> 00:15:04.234
handling the request
and response.

00:15:04.234 --> 00:15:06.110
This arrow function here is

00:15:06.110 --> 00:15:08.584
handling the response
from this query.

00:15:08.584 --> 00:15:11.615
It should be select
star from product.

00:15:11.615 --> 00:15:13.850
If error.

00:15:13.850 --> 00:15:15.799
If there is an error.

00:15:15.799 --> 00:15:21.180
We will do a console dot error

00:15:21.820 --> 00:15:30.239
within double-quotes error
while fetching data.

00:15:31.240 --> 00:15:33.574
If there is no error,

00:15:33.574 --> 00:15:36.484
that means we can say we have
successfully processed it,

00:15:36.484 --> 00:15:39.649
or the query is returning data.

00:15:39.649 --> 00:15:42.200
So response, which is
the variable here,

00:15:42.200 --> 00:15:45.770
dot send is the method response.

00:15:45.770 --> 00:15:48.440
Dotson will send the
response back to the client.

00:15:48.440 --> 00:15:49.699
And we are going to return

00:15:49.699 --> 00:15:53.209
all the records that came
back from the query.

00:15:53.209 --> 00:15:55.189
That said you have created

00:15:55.189 --> 00:15:58.205
your first RESTful API
methods successfully.

00:15:58.205 --> 00:16:03.289
Using router, mapped it to
get HTTP method and a URI.

00:16:03.289 --> 00:16:04.550
You how to use this forward

00:16:04.550 --> 00:16:08.045
slash request and response
requests will have

00:16:08.045 --> 00:16:09.469
all the requests
information that

00:16:09.469 --> 00:16:11.090
comes from the client will use

00:16:11.090 --> 00:16:12.574
it in methods later on

00:16:12.574 --> 00:16:14.704
when we retrieve
the product by id.

00:16:14.704 --> 00:16:16.955
And in other cases as well.

00:16:16.955 --> 00:16:18.679
Response is how we

00:16:18.679 --> 00:16:21.199
return the response
back to the client.

00:16:21.199 --> 00:16:24.185
Connection dot query
method will execute

00:16:24.185 --> 00:16:25.699
a query and it will return

00:16:25.699 --> 00:16:27.890
the response if there
is error response,

00:16:27.890 --> 00:16:29.360
or it will give us the records

00:16:29.360 --> 00:16:31.160
back along with the fields.

00:16:31.160 --> 00:16:33.230
We are processing
the error response

00:16:33.230 --> 00:16:34.999
by logging data to the console.

00:16:34.999 --> 00:16:37.534
And the successful response

00:16:37.534 --> 00:16:40.889
will send the records
back to the client.

00:16:41.730 --> 00:16:44.470
Before we go ahead and create

00:16:44.470 --> 00:16:48.219
the other routes or the other
RESTful API like create,

00:16:48.219 --> 00:16:50.379
update, delete, et cetera.

00:16:50.379 --> 00:16:55.810
Let's test this getMethod
by creating a server.js,

00:16:55.810 --> 00:16:58.165
which will act as
a Bootstrap file

00:16:58.165 --> 00:17:00.309
or the file that will start,

00:17:00.309 --> 00:17:02.409
kick-start our
application and configure

00:17:02.409 --> 00:17:05.050
everything required
for our application.

00:17:05.050 --> 00:17:07.254
The server.js can live

00:17:07.254 --> 00:17:10.254
directly under the
Product API project.

00:17:10.254 --> 00:17:12.265
So click anywhere, create

00:17:12.265 --> 00:17:16.519
a new file called server dot js.

00:17:16.620 --> 00:17:18.609
Maximize.

00:17:18.609 --> 00:17:20.920
The first line is to import

00:17:20.920 --> 00:17:26.900
express var x is equal to
required within double-quotes.

00:17:26.900 --> 00:17:28.550
Express.

00:17:28.550 --> 00:17:33.215
Once we have it, you can
create an instance of app.

00:17:33.215 --> 00:17:36.529
This app is like the root
for your application that

00:17:36.529 --> 00:17:38.450
presents our application
using which we can

00:17:38.450 --> 00:17:40.535
configure everything
for our application,

00:17:40.535 --> 00:17:42.560
Express is a function that

00:17:42.560 --> 00:17:44.600
will give us a new application.

00:17:44.600 --> 00:17:46.940
Back from this express module,

00:17:46.940 --> 00:17:49.249
we are in working the
experts function,

00:17:49.249 --> 00:17:52.205
which will give us an object
using which we can configure

00:17:52.205 --> 00:17:55.580
everything required for
our RESTful application.

00:17:55.580 --> 00:17:57.335
If it is above application,

00:17:57.335 --> 00:17:59.570
you can use this app to
configure everything

00:17:59.570 --> 00:18:02.540
for your web
application as well.

00:18:02.540 --> 00:18:06.469
App dot the very first step to

00:18:06.469 --> 00:18:10.535
use or configure a path
to our RESTful API.

00:18:10.535 --> 00:18:17.389
So to do that, space, our API,

00:18:17.389 --> 00:18:19.535
which is the Product API,

00:18:19.535 --> 00:18:25.159
is equal to require
import the module,

00:18:25.159 --> 00:18:28.265
which is the product
controller.js.

00:18:28.265 --> 00:18:32.000
So within double-quotes,
dot slash controllers

00:18:32.000 --> 00:18:37.339
slash product
controller. App dot.

00:18:37.339 --> 00:18:42.364
Use is the method which
will configure a property,

00:18:42.364 --> 00:18:45.124
give it a URL slash,

00:18:45.124 --> 00:18:48.589
api slash products
is the URL I want to

00:18:48.589 --> 00:18:52.819
configure it to this
comma, the Product API.

00:18:52.819 --> 00:18:55.594
So we are telling that

00:18:55.594 --> 00:18:58.129
this particular URI is

00:18:58.129 --> 00:19:01.130
being configured to this
API. It's relate to you.

00:19:01.130 --> 00:19:02.540
Inside the product controller,

00:19:02.540 --> 00:19:04.325
we can use any URIs.

00:19:04.325 --> 00:19:07.084
But when the client invokes
one of these methods,

00:19:07.084 --> 00:19:09.170
when he uses this RESTful API,

00:19:09.170 --> 00:19:12.049
you should use api
slash products.

00:19:12.049 --> 00:19:15.334
And then whatever
we configure here.

00:19:15.334 --> 00:19:19.054
For the getMethod, we didn't
configure any relative URI.

00:19:19.054 --> 00:19:20.735
But for other methods we will,

00:19:20.735 --> 00:19:21.905
as we will see later on,

00:19:21.905 --> 00:19:24.080
we'll pass in some parameters.

00:19:24.080 --> 00:19:25.954
So that's the first step.

00:19:25.954 --> 00:19:28.654
How created the app object.

00:19:28.654 --> 00:19:31.100
Then we have
configured a URI for

00:19:31.100 --> 00:19:35.914
our API using app dot used
that will register that.

00:19:35.914 --> 00:19:39.545
Then app dot listen.

00:19:39.545 --> 00:19:43.205
We are configuring a port
and I want it to run on 80.

00:19:43.205 --> 00:19:43.910
80.

00:19:43.910 --> 00:19:46.730
If you have something else
running on your ADHD,

00:19:46.730 --> 00:19:49.415
you can start it
on another port.

00:19:49.415 --> 00:19:51.319
Last but not the least.

00:19:51.319 --> 00:19:57.409
You can say console dot
log within double-quotes,

00:19:57.409 --> 00:20:02.879
server up and
running on port, AP.

00:20:03.160 --> 00:20:05.225
Save it.

00:20:05.225 --> 00:20:08.449
So you have successfully
created a x plus object,

00:20:08.449 --> 00:20:11.269
initialized the app with the URI

00:20:11.269 --> 00:20:14.720
that you want to map to
UVA restful router module.

00:20:14.720 --> 00:20:16.955
And how kickstarted the server,

00:20:16.955 --> 00:20:19.310
who asked it to run on ADHD.

00:20:19.310 --> 00:20:21.020
When you run this server.js,

00:20:21.020 --> 00:20:23.059
it will start the server
and we should be able to

00:20:23.059 --> 00:20:26.579
access our RESTful GET method.

00:20:27.130 --> 00:20:31.520
We're all set to run our node
application and test it.

00:20:31.520 --> 00:20:33.919
Before we do that, one
step that I missed

00:20:33.919 --> 00:20:36.409
here is in the product
dot controller,

00:20:36.409 --> 00:20:39.200
we need to export
out this router so

00:20:39.200 --> 00:20:43.220
that when we use it in
the server.js right here,

00:20:43.220 --> 00:20:45.530
we do the product API.

00:20:45.530 --> 00:20:47.600
We are really
configuring the router

00:20:47.600 --> 00:20:49.624
that is returned by this module.

00:20:49.624 --> 00:20:53.735
For this API module,

00:20:53.735 --> 00:20:56.630
dot exports is equal

00:20:56.630 --> 00:20:59.494
to the router which
we are creating here.

00:20:59.494 --> 00:21:01.580
That outer will be
returned and it will be

00:21:01.580 --> 00:21:04.610
mapped to this URL. That's it.

00:21:04.610 --> 00:21:05.600
Save it.

00:21:05.600 --> 00:21:07.159
Go to the console.

00:21:07.159 --> 00:21:08.750
Make sure you are
under the project

00:21:08.750 --> 00:21:10.189
directory where we have the

00:21:10.189 --> 00:21:14.659
server.js du Nord space server.

00:21:14.659 --> 00:21:17.359
The server here
is not a command.

00:21:17.359 --> 00:21:19.730
It's the file that we
have created here.

00:21:19.730 --> 00:21:22.774
So the node command is going
to run this JavaScript file,

00:21:22.774 --> 00:21:26.105
and it will execute these
commands in this order.

00:21:26.105 --> 00:21:31.490
Arnett and server is up
and running on port 80.

00:21:31.490 --> 00:21:32.330
80.

00:21:32.330 --> 00:21:33.844
Now we can access

00:21:33.844 --> 00:21:37.670
our RESTful API by simply
going to the web browser.

00:21:37.670 --> 00:21:40.789
Launched the postman, which is

00:21:40.789 --> 00:21:43.519
our RESTful API client
or a testing tool.

00:21:43.519 --> 00:21:46.234
Open up a new tab like this,

00:21:46.234 --> 00:21:50.209
use the getMethod and
the URL is local host

00:21:50.209 --> 00:21:55.715
colon slash the API URL.

00:21:55.715 --> 00:21:58.114
If you go back to your Visual
Studio code right here,

00:21:58.114 --> 00:22:05.629
api slash products, api
slash products, hit Send.

00:22:05.629 --> 00:22:07.594
And we get a response back,

00:22:07.594 --> 00:22:09.185
which is an empty array,

00:22:09.185 --> 00:22:11.630
but it has successfully
hit the server and

00:22:11.630 --> 00:22:14.405
regard this back because
there are no records,

00:22:14.405 --> 00:22:17.720
no product records right
now in the database.

00:22:17.720 --> 00:22:19.069
You can create one,

00:22:19.069 --> 00:22:23.614
insert into product values.

00:22:23.614 --> 00:22:26.794
The first one is the id comma.

00:22:26.794 --> 00:22:28.655
Second one is the
name of the product,

00:22:28.655 --> 00:22:31.849
hyphen comma description.

00:22:31.849 --> 00:22:32.974
Good.

00:22:32.974 --> 00:22:35.824
Karma, price is thousand bucks.

00:22:35.824 --> 00:22:37.144
It's going up every day.

00:22:37.144 --> 00:22:42.140
Insert into product
values. Excuse that.

00:22:42.140 --> 00:22:43.295
Now we have a record,

00:22:43.295 --> 00:22:44.960
go back to the postman,

00:22:44.960 --> 00:22:48.979
hit Send, and we will
see that record back.

00:22:48.979 --> 00:22:51.379
So this is an array that is
coming back because we are

00:22:51.379 --> 00:22:54.035
returning all the products
inside the JSON array.

00:22:54.035 --> 00:22:55.700
We have one object with

00:22:55.700 --> 00:22:58.519
the information which
we have just created.

00:22:58.519 --> 00:23:00.125
So you have successfully
tested DBA,

00:23:00.125 --> 00:23:03.360
very first restful method.

00:23:04.510 --> 00:23:06.920
In this lecture, we will expose

00:23:06.920 --> 00:23:09.289
a Restful endpoint
that will allow

00:23:09.289 --> 00:23:13.924
the client to pass
in an ID in the URL.

00:23:13.924 --> 00:23:16.430
And we're going to retrieve
the product with that ID and

00:23:16.430 --> 00:23:19.414
return that product back
to Visual Studio Code,

00:23:19.414 --> 00:23:21.245
go to the product controller,

00:23:21.245 --> 00:23:25.679
grab the very first method
that you have created.

00:23:25.690 --> 00:23:28.260
Paste it.

00:23:28.510 --> 00:23:31.745
Get is the method the
client is going to use.

00:23:31.745 --> 00:23:35.495
So we're going to map
again to get is the verb,

00:23:35.495 --> 00:23:37.610
the URL here the URI will

00:23:37.610 --> 00:23:41.000
change to accept
this URL parameter.

00:23:41.000 --> 00:23:44.599
This is called path
variable or path parameter.

00:23:44.599 --> 00:23:48.094
We use slash colon ID.

00:23:48.094 --> 00:23:50.404
So whatever value
the client sends in,

00:23:50.404 --> 00:23:53.689
it will be binded to this
particular variable now.

00:23:53.689 --> 00:23:56.509
And we can retrieve this
variable wherever we want within

00:23:56.509 --> 00:24:01.250
the function using the
request dot params.

00:24:01.250 --> 00:24:04.160
So here this select
query now should use

00:24:04.160 --> 00:24:07.625
where class ID is equal to

00:24:07.625 --> 00:24:11.794
plus request dot params

00:24:11.794 --> 00:24:16.220
will give us access to all
the parameters dot id.

00:24:16.220 --> 00:24:20.075
So whatever paradigm comes in
that will go into this id.

00:24:20.075 --> 00:24:21.770
And to access that,
we should use

00:24:21.770 --> 00:24:25.115
request dot params dot ID.

00:24:25.115 --> 00:24:27.379
That's it. Everything else
will remain the same.

00:24:27.379 --> 00:24:29.945
We are getting the records
back from this query.

00:24:29.945 --> 00:24:31.730
If it is successful,
we are sending

00:24:31.730 --> 00:24:34.610
those records back to test it.

00:24:34.610 --> 00:24:36.875
Stop the server if it's running,

00:24:36.875 --> 00:24:39.199
started again so
that it will pick up

00:24:39.199 --> 00:24:42.275
the changes. Go to Postman.

00:24:42.275 --> 00:24:47.735
This time the URL will change
to products slash one.

00:24:47.735 --> 00:24:51.439
Hit Send. You will still
get the same response back

00:24:51.439 --> 00:24:53.074
with single record
because we have

00:24:53.074 --> 00:24:55.069
only one record in the database.

00:24:55.069 --> 00:24:56.224
If you want to.

00:24:56.224 --> 00:24:59.630
You can add one more record.

00:24:59.630 --> 00:25:03.034
Just to see the
difference. Copy-pasted.

00:25:03.034 --> 00:25:05.735
Macbook is the second record,

00:25:05.735 --> 00:25:08.509
good and prices to those inbox.

00:25:08.509 --> 00:25:10.700
Execute that.

00:25:10.700 --> 00:25:12.710
Now go back to Postman.

00:25:12.710 --> 00:25:14.359
Hit Send.

00:25:14.359 --> 00:25:18.019
We'll get just that one record
for which we pass the ID,

00:25:18.019 --> 00:25:20.224
change the ID to to send,

00:25:20.224 --> 00:25:22.070
will get the second record.

00:25:22.070 --> 00:25:24.035
If you get rid off the id,

00:25:24.035 --> 00:25:28.500
send, we will get all
the products back.

00:25:29.290 --> 00:25:31.969
The next APA method is

00:25:31.969 --> 00:25:34.520
the create product
method that will allow

00:25:34.520 --> 00:25:36.980
the end client to create or

00:25:36.980 --> 00:25:40.069
add a product to the existing
collection of products.

00:25:40.069 --> 00:25:41.660
This will be the URI mapping,

00:25:41.660 --> 00:25:42.829
which we have
already mapped it to

00:25:42.829 --> 00:25:46.879
the router and post HTTP method

00:25:46.879 --> 00:25:49.190
that should be used
to create objects.

00:25:49.190 --> 00:25:51.724
Go to Visual Studio Code,
go to the controller,

00:25:51.724 --> 00:25:53.599
grab the last drought,

00:25:53.599 --> 00:25:57.174
exposed out, create a new one.

00:25:57.174 --> 00:26:01.285
By pasting it. The method
should be post that we'll have.

00:26:01.285 --> 00:26:02.950
This will handle the
create requests,

00:26:02.950 --> 00:26:04.269
which will be a post.

00:26:04.269 --> 00:26:07.869
Get it off the ID in
the URL, the URI.

00:26:07.869 --> 00:26:11.500
And the query here will
be an insert query.

00:26:11.500 --> 00:26:14.845
So get rid of the select
and the parameter.

00:26:14.845 --> 00:26:24.504
Insert into table, which
is the product values,

00:26:24.504 --> 00:26:27.640
followed by a bracket in
which the value should go.

00:26:27.640 --> 00:26:30.039
So this is the same
insert query which you

00:26:30.039 --> 00:26:32.754
have used in the database here
all the values should go.

00:26:32.754 --> 00:26:34.930
These values come
from the request,

00:26:34.930 --> 00:26:37.679
but this time it's
not parameters.

00:26:37.679 --> 00:26:40.865
The body of the request.

00:26:40.865 --> 00:26:45.140
Inside the body, where
ID is equal to request

00:26:45.140 --> 00:26:49.775
dot body dot that Jason
parameter name ID.

00:26:49.775 --> 00:26:51.470
This is the property
name which should,

00:26:51.470 --> 00:26:52.895
we should use in the Json,

00:26:52.895 --> 00:26:56.329
the body parser, which we
will use in the next lecture.

00:26:56.329 --> 00:26:59.150
We'll pass it and put it into
this field so that we can

00:26:59.150 --> 00:27:02.284
use it where name
is the second one.

00:27:02.284 --> 00:27:05.210
You can copy paste this
three times so that

00:27:05.210 --> 00:27:08.240
we can save some time.

00:27:08.240 --> 00:27:10.939
Second property is name.

00:27:10.939 --> 00:27:14.239
Third one is description,

00:27:14.239 --> 00:27:16.729
and the last one is price.

00:27:16.729 --> 00:27:19.919
Grab the name, paste it
on the right-hand side.

00:27:21.180 --> 00:27:24.595
Grab the description,
do the same.

00:27:24.595 --> 00:27:27.219
And finally the price.

00:27:27.219 --> 00:27:28.780
Now we can use these for

00:27:28.780 --> 00:27:31.134
variables to come
up with our query.

00:27:31.134 --> 00:27:34.914
The first field is
the ID, so plus id,

00:27:34.914 --> 00:27:40.240
plus within double-quotes
comma colon,

00:27:40.240 --> 00:27:42.820
because name needs a colon,

00:27:42.820 --> 00:27:44.830
it should be
surrounded by colon.

00:27:44.830 --> 00:27:47.514
Similarly, the description also.

00:27:47.514 --> 00:27:49.000
So first surround the name with

00:27:49.000 --> 00:27:53.050
a colon plus the name that
comes in dynamically.

00:27:53.050 --> 00:27:55.240
Plus within double-quotes,

00:27:55.240 --> 00:27:58.164
close the colon
separated by a comma.

00:27:58.164 --> 00:28:00.219
Open up the colon because next

00:28:00.219 --> 00:28:02.235
we know that the
description is coming up.

00:28:02.235 --> 00:28:05.240
Use description plus
within double-quotes,

00:28:05.240 --> 00:28:06.875
close the colon again,

00:28:06.875 --> 00:28:13.250
followed by a comma plus the
last field, which is price.

00:28:13.250 --> 00:28:18.049
Hit enter, go on
to the next row.

00:28:18.049 --> 00:28:19.880
The result here, in

00:28:19.880 --> 00:28:23.540
this case will not
have any fields in it.

00:28:23.540 --> 00:28:29.284
So either it's an error or
the result from the insert.

00:28:29.284 --> 00:28:32.750
So in here we can say
error while fetching or

00:28:32.750 --> 00:28:37.010
LR while inserting data.

00:28:37.010 --> 00:28:38.659
And response dot send,

00:28:38.659 --> 00:28:41.150
simply return a JSON response.

00:28:41.150 --> 00:28:42.514
For now.

00:28:42.514 --> 00:28:45.920
Insert is the key.

00:28:45.920 --> 00:28:47.750
Colon.

00:28:47.750 --> 00:28:52.865
Success is the response
that we want to go back.

00:28:52.865 --> 00:28:56.039
Get rid of the extra
flower bracket here.

00:28:59.140 --> 00:29:02.464
You have successfully
created a post by retrieving

00:29:02.464 --> 00:29:05.270
all the parameters that
come in the post body.

00:29:05.270 --> 00:29:07.160
Then we are using those in

00:29:07.160 --> 00:29:10.219
the insert statement
using the right syntax,

00:29:10.219 --> 00:29:11.750
we are handling the response.

00:29:11.750 --> 00:29:13.009
There are response then we

00:29:13.009 --> 00:29:14.464
have user the
appropriate message.

00:29:14.464 --> 00:29:16.189
If it is success,
then we're simply

00:29:16.189 --> 00:29:19.115
returning, insert success Back.

00:29:19.115 --> 00:29:21.200
To use this post,

00:29:21.200 --> 00:29:23.809
we need to use the body parser.

00:29:23.809 --> 00:29:26.490
So in the server.js,

00:29:26.890 --> 00:29:33.740
body parser is equal
to require within

00:29:33.740 --> 00:29:37.459
double-quotes body hyphen parser

00:29:37.459 --> 00:29:40.684
is the module name that
you have added already.

00:29:40.684 --> 00:29:42.005
Save it.

00:29:42.005 --> 00:29:45.455
Once we have it, you
need to tell the app.

00:29:45.455 --> 00:29:46.880
So you can do that anywhere.

00:29:46.880 --> 00:29:48.065
You can do it right here.

00:29:48.065 --> 00:29:51.350
Or since we have created
app here, App dot,

00:29:51.350 --> 00:29:59.100
use, body parser, dot json.

00:30:00.460 --> 00:30:05.614
And you should also tell
app.use what type of

00:30:05.614 --> 00:30:10.819
encoding for URL bodyParser
dot URL encoded.

00:30:10.819 --> 00:30:14.630
You can either use
true or false. Here.

00:30:14.630 --> 00:30:17.120
Within brackets,
we need to pass in

00:30:17.120 --> 00:30:23.750
an object extended
colon, false or true.

00:30:23.750 --> 00:30:25.820
I'll explain that later on.

00:30:25.820 --> 00:30:26.990
Save it.

00:30:26.990 --> 00:30:29.360
So you have successfully
implemented the post method,

00:30:29.360 --> 00:30:30.995
uses the body parser,

00:30:30.995 --> 00:30:33.725
it's time to stop the server.

00:30:33.725 --> 00:30:35.810
Started.

00:30:35.810 --> 00:30:38.700
Go to Postman.

00:30:38.710 --> 00:30:41.824
Grab this single
object from here,

00:30:41.824 --> 00:30:43.100
one of the objects

00:30:43.100 --> 00:30:45.185
from the flower bracket
to flower bracket,

00:30:45.185 --> 00:30:47.105
open up a new tab.

00:30:47.105 --> 00:30:51.455
Change this method to
post go-to body tab here.

00:30:51.455 --> 00:30:55.010
Click on raw, change
this from text

00:30:55.010 --> 00:30:58.429
to application JSON,
paste the JSON,

00:30:58.429 --> 00:31:00.500
change this ID to three,

00:31:00.500 --> 00:31:05.915
change this to name is
let's say a laptop.

00:31:05.915 --> 00:31:08.600
This time simply,
description is good and

00:31:08.600 --> 00:31:11.720
the price is 2000 bucks again.

00:31:11.720 --> 00:31:16.339
And the URL localhost colon 80,

00:31:16.339 --> 00:31:22.099
80 slash api slash products.

00:31:22.099 --> 00:31:25.909
So api slash products slash.

00:31:25.909 --> 00:31:31.009
That's it. In this lecture

00:31:31.009 --> 00:31:34.219
we will test the post method
that we have ex post out.

00:31:34.219 --> 00:31:36.680
If you have noticed, I
have purposely didn't

00:31:36.680 --> 00:31:39.350
close the bracket at the end of

00:31:39.350 --> 00:31:42.019
the insert to show
you what happens

00:31:42.019 --> 00:31:45.349
and how to resolve or
troubleshoot issues like this,

00:31:45.349 --> 00:31:49.835
to test it, stop the
server if it's running,

00:31:49.835 --> 00:31:52.850
started again so that it
will pick up our changes.

00:31:52.850 --> 00:31:56.974
Go to Postman,
open up a new tab.

00:31:56.974 --> 00:31:59.914
Change the method
from get to post.

00:31:59.914 --> 00:32:03.920
The URL is local, host colon 80,

00:32:03.920 --> 00:32:07.715
80 slash products API or

00:32:07.715 --> 00:32:13.024
APIs slash products,
api slash products.

00:32:13.024 --> 00:32:15.694
We are adding a new object
to this collection.

00:32:15.694 --> 00:32:17.675
Click on the body tab,

00:32:17.675 --> 00:32:22.894
select raw, change this
text to application JSON.

00:32:22.894 --> 00:32:24.619
Go back to the previous tab,

00:32:24.619 --> 00:32:27.515
grab one of the objects

00:32:27.515 --> 00:32:30.229
from flower bracket
to flower bracket,

00:32:30.229 --> 00:32:35.135
paste it, change
the ID to three.

00:32:35.135 --> 00:32:39.050
Change this to HP laptop. Good.

00:32:39.050 --> 00:32:41.794
Price is thousand
bucks, that's fine.

00:32:41.794 --> 00:32:45.815
If you hit Send now will
not get a response back.

00:32:45.815 --> 00:32:48.034
As you can see,
it stays loading.

00:32:48.034 --> 00:32:49.849
If you go to the node console,

00:32:49.849 --> 00:32:53.074
it says error while
inserting data.

00:32:53.074 --> 00:32:54.919
But it doesn't tell
us what the error

00:32:54.919 --> 00:32:57.965
is because we haven't
logged it here.

00:32:57.965 --> 00:33:00.890
So here inside if error,

00:33:00.890 --> 00:33:03.169
you can say plus ARR,

00:33:03.169 --> 00:33:04.640
that will give us some details.

00:33:04.640 --> 00:33:05.915
But we know that the problem

00:33:05.915 --> 00:33:07.639
is with the insert statement.

00:33:07.639 --> 00:33:11.029
So you can copy the entire
insert statement and

00:33:11.029 --> 00:33:15.124
do a console.log right here.

00:33:15.124 --> 00:33:16.640
So that will tell us what

00:33:16.640 --> 00:33:19.310
exactly is wrong with the query.

00:33:19.310 --> 00:33:22.979
Stop the server Started.

00:33:23.080 --> 00:33:27.604
Go back to Postman,
hit Send again.

00:33:27.604 --> 00:33:30.529
And this time you will see
a lot more information.

00:33:30.529 --> 00:33:32.000
It says insert into product.

00:33:32.000 --> 00:33:33.649
You don't see the
bracket at the end.

00:33:33.649 --> 00:33:37.130
And also you see the
exception error parse error.

00:33:37.130 --> 00:33:39.664
You have an error
in your SQL syntax.

00:33:39.664 --> 00:33:41.509
Check the manual
that corresponds to

00:33:41.509 --> 00:33:43.940
your MySQL server,
which is okay,

00:33:43.940 --> 00:33:46.370
It's not all that helpful,

00:33:46.370 --> 00:33:48.709
but it at least gives us a
little more information.

00:33:48.709 --> 00:33:50.824
But here you can see it clearly.

00:33:50.824 --> 00:33:56.105
So go back, close that
bracket by appending.

00:33:56.105 --> 00:33:57.529
Right here.

00:33:57.529 --> 00:33:58.790
After the price.

00:33:58.790 --> 00:34:03.569
Plus within double-quotes.

00:34:03.670 --> 00:34:07.399
Close the brackets, then
close they're double-quotes.

00:34:07.399 --> 00:34:08.899
Save it. Now if you want,

00:34:08.899 --> 00:34:11.540
you can comment out this
console.log or get rid

00:34:11.540 --> 00:34:14.465
of it because you know that
you have fixed the problem.

00:34:14.465 --> 00:34:16.159
But leave this error as it

00:34:16.159 --> 00:34:19.190
is so that we can see
it on the console.

00:34:19.190 --> 00:34:22.759
Stop, the server, started again.

00:34:22.759 --> 00:34:26.615
Go to Postman, hit Send.

00:34:26.615 --> 00:34:29.525
And now we see insert success.

00:34:29.525 --> 00:34:31.309
If you go to the database,

00:34:31.309 --> 00:34:33.139
select star from product,

00:34:33.139 --> 00:34:36.810
you should see the new product
in the database as well.

00:34:37.870 --> 00:34:40.564
Now that we have
the create method

00:34:40.564 --> 00:34:43.579
implementing the update
method or the envoy,

00:34:43.579 --> 00:34:44.930
and it's super easy.

00:34:44.930 --> 00:34:47.285
Grab this post route.

00:34:47.285 --> 00:34:48.845
Based it.

00:34:48.845 --> 00:34:51.079
For updating, we
need to map it to

00:34:51.079 --> 00:34:56.375
the HTTP verb or method that
URI will remain the same.

00:34:56.375 --> 00:34:58.340
We are going to allow
the end user to update

00:34:58.340 --> 00:35:00.485
the name and the price,

00:35:00.485 --> 00:35:03.514
not the description
based on the id.

00:35:03.514 --> 00:35:08.389
Remove this insert statement
all the way up to here.

00:35:08.389 --> 00:35:10.339
And within the brackets
we are going to use

00:35:10.339 --> 00:35:12.710
the update table name.

00:35:12.710 --> 00:35:14.404
Set.

00:35:14.404 --> 00:35:17.134
Name is equal to

00:35:17.134 --> 00:35:19.849
single quotes plus the value

00:35:19.849 --> 00:35:22.325
that comes in the
request body name.

00:35:22.325 --> 00:35:27.740
Plus within double-quotes,
close the single quotes comma.

00:35:27.740 --> 00:35:33.739
The next field is price is
equal to plus the price plus

00:35:33.739 --> 00:35:36.889
the rare class where ID is equal

00:35:36.889 --> 00:35:40.700
to plus the id that comes
in that JSON request.

00:35:40.700 --> 00:35:43.579
So update products
setName prize,

00:35:43.579 --> 00:35:47.555
where ID is equal to Id.

00:35:47.555 --> 00:35:50.030
Paste here for the wear,

00:35:50.030 --> 00:35:51.890
make sure we have
the right spacing.

00:35:51.890 --> 00:35:53.060
If not, we'll see an error

00:35:53.060 --> 00:35:54.770
and we can come back and fix it.

00:35:54.770 --> 00:35:59.119
The error here should say
error while updating data.

00:35:59.119 --> 00:36:02.779
And the response,
simply update, success.

00:36:02.779 --> 00:36:06.904
Save it, stop the
server if it's running.

00:36:06.904 --> 00:36:10.310
Start it again. Go
back to Postman,

00:36:10.310 --> 00:36:12.785
open a new tab,

00:36:12.785 --> 00:36:17.075
grab the request from the
previous tab, come back,

00:36:17.075 --> 00:36:21.919
change this method to
put go-to body raw,

00:36:21.919 --> 00:36:24.169
change the type to JSON.

00:36:24.169 --> 00:36:25.280
Don't forget to do that.

00:36:25.280 --> 00:36:27.334
If not, we will get an error.

00:36:27.334 --> 00:36:30.035
Pasted the URL,

00:36:30.035 --> 00:36:32.704
you can grab it from the
previous screen as well.

00:36:32.704 --> 00:36:36.080
We are updating a product
in the existing collection.

00:36:36.080 --> 00:36:38.104
That's why we use this URI.

00:36:38.104 --> 00:36:39.815
Get rid off description.

00:36:39.815 --> 00:36:43.850
Change the name to
HP laptop per row,

00:36:43.850 --> 00:36:46.445
and the price to 2000 bucks.

00:36:46.445 --> 00:36:48.515
Hit Send.

00:36:48.515 --> 00:36:52.279
Scroll this up, we get
a 200 OK response.

00:36:52.279 --> 00:36:53.975
But the key here is this.

00:36:53.975 --> 00:36:56.150
And if you go to the database,

00:36:56.150 --> 00:36:58.775
do a select star from product.

00:36:58.775 --> 00:37:03.274
The HP laptop now is pro and
the price is 2000 bucks.

00:37:03.274 --> 00:37:05.285
So it's that simple to use

00:37:05.285 --> 00:37:10.740
a put verb and update
an existing record.

00:37:11.140 --> 00:37:15.229
The last operation is
the delete operation.

00:37:15.229 --> 00:37:19.070
And I want the end-user to be
able to delete a product by

00:37:19.070 --> 00:37:20.479
its ID very similar to

00:37:20.479 --> 00:37:23.625
the get method that you
have implemented earlier.

00:37:23.625 --> 00:37:25.509
Go to Visual Studio Code,

00:37:25.509 --> 00:37:28.000
go to the getMethod
where you are allowing

00:37:28.000 --> 00:37:30.879
the client to retrieve
a product by ID,

00:37:30.879 --> 00:37:35.425
can copy this all the way down.

00:37:35.425 --> 00:37:37.600
The end.

00:37:37.600 --> 00:37:39.414
Based it.

00:37:39.414 --> 00:37:42.520
Change this HTTP
method to delete,

00:37:42.520 --> 00:37:44.259
that is what we
are mapping it to.

00:37:44.259 --> 00:37:46.075
This will remain the same.

00:37:46.075 --> 00:37:46.945
Here.

00:37:46.945 --> 00:37:49.700
The select will change.

00:37:51.150 --> 00:37:56.215
Delete from product where

00:37:56.215 --> 00:37:59.500
ID is equal to request
dot params dot ID.

00:37:59.500 --> 00:38:04.959
Here I will change this to
error while deleting data.

00:38:04.959 --> 00:38:10.239
And the response will not
contain any response like this,

00:38:10.239 --> 00:38:12.519
we are not sending a
response like this.

00:38:12.519 --> 00:38:16.129
Simply use flower brackets.

00:38:16.950 --> 00:38:19.930
Within double-quotes.

00:38:19.930 --> 00:38:23.349
Say Delete is the key colon.

00:38:23.349 --> 00:38:26.260
Delete, success.

00:38:26.260 --> 00:38:27.520
Save it.

00:38:27.520 --> 00:38:28.420
So it's that simple.

00:38:28.420 --> 00:38:30.700
We are mapping there
delete verb to

00:38:30.700 --> 00:38:33.640
this particular endpoint
function within

00:38:33.640 --> 00:38:36.910
which the user can
pass in an ID that is

00:38:36.910 --> 00:38:38.800
being mapped to the request

00:38:38.800 --> 00:38:40.854
parameter that we
are retrieving here.

00:38:40.854 --> 00:38:45.444
Delete from product where
ID is equal to that.

00:38:45.444 --> 00:38:49.620
Stop the server started.

00:38:49.620 --> 00:38:53.164
Go to Postman, create a new tab.

00:38:53.164 --> 00:38:54.845
You can grab the UR LR,

00:38:54.845 --> 00:38:56.569
use the delete method,

00:38:56.569 --> 00:38:59.209
and grab the URL from one of

00:38:59.209 --> 00:39:04.250
the gets pasted slash the
id you want to delete,

00:39:04.250 --> 00:39:07.789
save one, hit, Send,

00:39:07.789 --> 00:39:09.680
and you get a response back.

00:39:09.680 --> 00:39:12.709
Elite, success, go
to the database,

00:39:12.709 --> 00:39:14.705
select star from products,

00:39:14.705 --> 00:39:18.150
and you don't see the
first record anymore.
