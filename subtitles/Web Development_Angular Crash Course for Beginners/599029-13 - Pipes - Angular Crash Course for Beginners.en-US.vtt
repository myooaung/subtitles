WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.220 --> 00:00:04.770
Pipes are used to transform

00:00:04.770 --> 00:00:09.045
our format data in our
HTML template files.

00:00:09.045 --> 00:00:11.085
That is, if you want to format

00:00:11.085 --> 00:00:12.870
a certain data that comes back

00:00:12.870 --> 00:00:14.939
from our model or
from the back end.

00:00:14.939 --> 00:00:17.775
Just before rendering
it to the end-user,

00:00:17.775 --> 00:00:21.794
then we use in-built
pipes in Angular.

00:00:21.794 --> 00:00:25.529
You can also format this data
inside our model that is

00:00:25.529 --> 00:00:27.329
inside our TypeScript files if

00:00:27.329 --> 00:00:29.399
you want to use it
in multiple places.

00:00:29.399 --> 00:00:32.054
But if it is just for
rendering reasons,

00:00:32.054 --> 00:00:34.050
we do it in our template files

00:00:34.050 --> 00:00:36.520
which are going to
render our views.

00:00:36.520 --> 00:00:38.809
You already use,
or the JSON pipe,

00:00:38.809 --> 00:00:41.600
which renders the
JavaScript object,

00:00:41.600 --> 00:00:44.419
or which transforms the
JavaScript object into

00:00:44.419 --> 00:00:48.199
a string so that it can
be rendered on the UI.

00:00:48.199 --> 00:00:50.209
There are several
other inbuilt pipes

00:00:50.209 --> 00:00:51.424
available in Angular,

00:00:51.424 --> 00:00:53.839
starting with title
case, uppercase,

00:00:53.839 --> 00:00:57.154
and lowercase, which
work with text data.

00:00:57.154 --> 00:00:59.030
The title case pipe converts

00:00:59.030 --> 00:01:01.459
the first letter in
the given text to

00:01:01.459 --> 00:01:03.950
capitalize the
uppercase pipe converts

00:01:03.950 --> 00:01:07.189
the entire text into uppercase.

00:01:07.189 --> 00:01:09.529
The lowercase does
the opposite of it.

00:01:09.529 --> 00:01:11.930
Then we have date
that can be used to

00:01:11.930 --> 00:01:15.334
format the dates that
we are dealing with.

00:01:15.334 --> 00:01:16.685
Currency.

00:01:16.685 --> 00:01:18.020
When we work with currencies,

00:01:18.020 --> 00:01:20.945
we can display different
country currencies,

00:01:20.945 --> 00:01:24.335
different formats that are
available for each country.

00:01:24.335 --> 00:01:26.660
Json, you already
know it converts

00:01:26.660 --> 00:01:30.244
the given JavaScript object
into a JSON string for

00:01:30.244 --> 00:01:34.310
display number to format
numbers and transform

00:01:34.310 --> 00:01:36.200
numbers percentages to convert

00:01:36.200 --> 00:01:39.200
a given number to a percentage.

00:01:39.200 --> 00:01:42.679
We have async that
deals with promises for

00:01:42.679 --> 00:01:44.780
asynchronous processing and also

00:01:44.780 --> 00:01:47.694
slice that we'll
work with arrays.

00:01:47.694 --> 00:01:50.750
You're going to explore
all these in-built pipes

00:01:50.750 --> 00:01:53.129
in the next few lectures.

00:01:53.850 --> 00:01:56.530
In this lecture, we
are going to explore

00:01:56.530 --> 00:01:58.269
the first three pipes,

00:01:58.269 --> 00:02:00.534
title case, uppercase,
and lowercase,

00:02:00.534 --> 00:02:02.680
which work with text data.

00:02:02.680 --> 00:02:05.049
To do that go to
Visual Studio Code.

00:02:05.049 --> 00:02:06.820
We're going to create
a new project.

00:02:06.820 --> 00:02:10.279
Go to View integrated terminal.

00:02:11.040 --> 00:02:13.945
Make sure you are in the
directory where you have

00:02:13.945 --> 00:02:15.955
been saving all your
projects for me.

00:02:15.955 --> 00:02:19.070
It's under my documents.

00:02:20.070 --> 00:02:22.689
Browse to that folder.

00:02:22.689 --> 00:02:25.930
Slash Angular is where
all my projects Liu,

00:02:25.930 --> 00:02:30.054
create a new project
and G, new space.

00:02:30.054 --> 00:02:32.034
The project name is pipes.

00:02:32.034 --> 00:02:33.804
I have already
created that project.

00:02:33.804 --> 00:02:35.969
In your case, go
ahead and hit Enter.

00:02:35.969 --> 00:02:39.199
And that will create
a project as follows.

00:02:39.199 --> 00:02:43.679
Wrap that project onto
your Visual Studio Code.

00:02:44.650 --> 00:02:47.960
Close the integrated
terminal and I have

00:02:47.960 --> 00:02:50.884
the app dot component dot ts

00:02:50.884 --> 00:02:52.969
and the app dot
component dot HTML.

00:02:52.969 --> 00:02:54.934
We're going to use
the default component

00:02:54.934 --> 00:02:56.510
to demonstrate the pipes.

00:02:56.510 --> 00:02:59.510
That's good enough. Open
up the TypeScript file.

00:02:59.510 --> 00:03:02.674
And here you see
title is equal to AP.

00:03:02.674 --> 00:03:05.359
Go ahead and change
it to your own name.

00:03:05.359 --> 00:03:07.220
I'm using parrot here.

00:03:07.220 --> 00:03:09.679
Go to the HTML page where

00:03:09.679 --> 00:03:13.025
all the data is rendered
and clean it up,

00:03:13.025 --> 00:03:15.589
select it, get it
off everything.

00:03:15.589 --> 00:03:21.454
Use the string interpolation
syntax and use that title.

00:03:21.454 --> 00:03:24.379
You can put it inside a H1,

00:03:24.379 --> 00:03:26.825
wrap it inside a hitch one,

00:03:26.825 --> 00:03:31.549
and close that page one
right after the title.

00:03:31.549 --> 00:03:32.900
Save it.

00:03:32.900 --> 00:03:35.419
Run the app in the web browser.

00:03:35.419 --> 00:03:38.044
Run the app and see the
output in the browser.

00:03:38.044 --> 00:03:42.570
To do that, N G hyphen 0.

00:03:45.610 --> 00:03:48.829
So far we haven't
used any pipes.

00:03:48.829 --> 00:03:51.439
So the title, whatever
we have here,

00:03:51.439 --> 00:03:54.155
should be displayed as it is.

00:03:54.155 --> 00:03:56.880
All lowercase.

00:04:00.660 --> 00:04:02.395
There we go.

00:04:02.395 --> 00:04:04.315
Everything is
lowercase as it is.

00:04:04.315 --> 00:04:08.050
Now. Go back, grab
that line, paste it.

00:04:08.050 --> 00:04:09.550
To use a pipe. You use

00:04:09.550 --> 00:04:11.575
the pipe symbol
which is just above

00:04:11.575 --> 00:04:16.600
your Enter key space.

00:04:16.600 --> 00:04:20.935
The type of pipe I want
to use this title case.

00:04:20.935 --> 00:04:23.799
Title case. We'll
make the first letter

00:04:23.799 --> 00:04:25.900
in the text as capital.

00:04:25.900 --> 00:04:27.865
Now if we go back
to the web browser,

00:04:27.865 --> 00:04:30.324
this is titled case applied.

00:04:30.324 --> 00:04:32.455
Next I want uppercase.

00:04:32.455 --> 00:04:34.239
Right now it's all lowercase.

00:04:34.239 --> 00:04:37.314
So go back, copy that line.

00:04:37.314 --> 00:04:43.370
Based it. Upper case, save it.

00:04:43.440 --> 00:04:45.639
And it's all uppercase.

00:04:45.639 --> 00:04:48.204
It's that simple. Go back
to the TypeScript file.

00:04:48.204 --> 00:04:50.440
Let's change this to

00:04:50.440 --> 00:04:53.845
some of these letters to
capitalize the first letter,

00:04:53.845 --> 00:04:56.020
or the first two
letters are capital.

00:04:56.020 --> 00:04:57.820
Go back to the HTML,

00:04:57.820 --> 00:05:00.834
copy the previous line pasted,

00:05:00.834 --> 00:05:05.180
lawyer, case, save it.

00:05:05.580 --> 00:05:07.780
Go back to the browser,

00:05:07.780 --> 00:05:10.599
you see all lowercase letters.

00:05:10.599 --> 00:05:12.640
So you have explored three
different pipes here.

00:05:12.640 --> 00:05:15.114
The title case makes
the first letter

00:05:15.114 --> 00:05:18.099
in a given word as capital.

00:05:18.099 --> 00:05:22.599
The second one converts the
entire string into uppercase.

00:05:22.599 --> 00:05:26.809
The last one converts the
entire string into lowercase.

00:05:27.540 --> 00:05:31.899
In this lecture, you will learn
how to use the Tate pipe,

00:05:31.899 --> 00:05:35.319
which will help us format
the date type of data.

00:05:35.319 --> 00:05:36.879
Go to Visual Studio Code,

00:05:36.879 --> 00:05:38.410
go to the TypeScript file,

00:05:38.410 --> 00:05:43.150
define a new field here
called my date of type.

00:05:43.150 --> 00:05:45.909
Date from TypeScript is equal to

00:05:45.909 --> 00:05:50.570
create a new object,
a new datatype.

00:05:50.850 --> 00:05:53.469
So our variable
might date will be

00:05:53.469 --> 00:05:55.690
initialized to the
current systems date

00:05:55.690 --> 00:06:00.264
and time when we do a new
date object, go to the HTML.

00:06:00.264 --> 00:06:02.454
Up top right at the beginning,

00:06:02.454 --> 00:06:04.764
at a hitch one within which

00:06:04.764 --> 00:06:07.600
use the string
interpolation syntax.

00:06:07.600 --> 00:06:12.109
My gate is the field name.

00:06:12.109 --> 00:06:14.285
Let's see what gets
displayed on the UI.

00:06:14.285 --> 00:06:15.890
We see a long date,

00:06:15.890 --> 00:06:18.109
Thursday, July 12th, 2018.

00:06:18.109 --> 00:06:23.075
That time, the time zone and
also the expanded time zone.

00:06:23.075 --> 00:06:24.469
But in our applications,

00:06:24.469 --> 00:06:26.555
we do not need this long date.

00:06:26.555 --> 00:06:28.819
Often we need just a short date.

00:06:28.819 --> 00:06:33.350
So we can format this
date using pipe.

00:06:33.350 --> 00:06:36.664
The type of pipe I want
to use is the datatype.

00:06:36.664 --> 00:06:40.490
The datatype expects a
string separated by a colon.

00:06:40.490 --> 00:06:42.335
So here, within single quotes,

00:06:42.335 --> 00:06:46.115
you can send or pass
whatever format you want.

00:06:46.115 --> 00:06:50.735
Dd, four days,
hyphen, md, hyphen.

00:06:50.735 --> 00:06:55.285
Why, why, why, why? Save it?

00:06:55.285 --> 00:06:57.819
Go back to the web
browser and you will

00:06:57.819 --> 00:06:59.770
see a short date now here,

00:06:59.770 --> 00:07:04.059
this 12, is that
this DD before days?

00:07:04.059 --> 00:07:08.770
Mm, is month July 07, 2018.

00:07:08.770 --> 00:07:10.404
Why, why, why why?

00:07:10.404 --> 00:07:14.065
If you take out two
y's here, save it.

00:07:14.065 --> 00:07:19.375
You will see only two digits
in the year 20 years con.

00:07:19.375 --> 00:07:21.504
Copy that.

00:07:21.504 --> 00:07:23.664
Let's try another format.

00:07:23.664 --> 00:07:26.240
Instead of dv if I pass in M, m,

00:07:26.240 --> 00:07:29.979
M months first, but
three M's and two Ds.

00:07:29.979 --> 00:07:32.080
And let's say four Y's.

00:07:32.080 --> 00:07:33.550
Save it.

00:07:33.550 --> 00:07:36.000
Go back. You will see July.

00:07:36.000 --> 00:07:39.544
Now you see alphabets
instead of digits like 07,

00:07:39.544 --> 00:07:43.400
month comes first, then
the days, then the year.

00:07:43.400 --> 00:07:46.109
So you can play around
with that format.

00:07:46.300 --> 00:07:49.820
The date pipe also gives
us a shorthand syntax.

00:07:49.820 --> 00:07:51.815
Instead of passing
a format like this,

00:07:51.815 --> 00:07:54.124
you can use within
single quotes,

00:07:54.124 --> 00:07:58.549
some inbuilt shortcuts
like short date.

00:07:58.549 --> 00:07:59.975
Save it.

00:07:59.975 --> 00:08:02.270
And that will give
us a short date,

00:08:02.270 --> 00:08:05.284
days, months, and then the year.

00:08:05.284 --> 00:08:09.380
Similarly, there is a medium
and full date as well.

00:08:09.380 --> 00:08:12.485
The second one is Medium Date.

00:08:12.485 --> 00:08:18.125
Save it. And you will
see July 12th, 2018.

00:08:18.125 --> 00:08:22.655
The last one is the full date.

00:08:22.655 --> 00:08:26.164
Full date. Save it.

00:08:26.164 --> 00:08:29.750
Go back and they will see a
long red Thursday, July 12th.

00:08:29.750 --> 00:08:31.579
It also includes the day here,

00:08:31.579 --> 00:08:34.205
along with the
medium date format.

00:08:34.205 --> 00:08:36.155
So depending on your
application needs,

00:08:36.155 --> 00:08:38.330
you can use some of
these shortcuts.

00:08:38.330 --> 00:08:41.435
Out of these three odd if
you want a custom format,

00:08:41.435 --> 00:08:45.990
then you can pass in that
format with the date pipe.

00:08:47.500 --> 00:08:50.839
The next type of pipe
is the currency pipe,

00:08:50.839 --> 00:08:52.550
which will help us format

00:08:52.550 --> 00:08:56.404
the currencies are the
numeric values as money.

00:08:56.404 --> 00:08:58.789
When we display them on the UI.

00:08:58.789 --> 00:09:01.610
Go to Visual Studio Code,
go to the TypeScript,

00:09:01.610 --> 00:09:05.629
add a new field called my money.

00:09:05.629 --> 00:09:08.840
Colon of type number is equal

00:09:08.840 --> 00:09:12.350
to initialize it to say 1,200.

00:09:12.350 --> 00:09:15.394
Save it, go back to the HTML,

00:09:15.394 --> 00:09:17.404
grab the topmost line,

00:09:17.404 --> 00:09:18.950
paste it above it.

00:09:18.950 --> 00:09:23.195
Change this to my
money, save it.

00:09:23.195 --> 00:09:24.695
If you go back to
the web browser,

00:09:24.695 --> 00:09:27.994
there is no formatting
here, no crunchy details.

00:09:27.994 --> 00:09:31.925
Now to apply some currency
details, use the pipe.

00:09:31.925 --> 00:09:36.005
Currency is the inbuilt
pipe name, save it.

00:09:36.005 --> 00:09:39.110
By default, dollars
will be used as

00:09:39.110 --> 00:09:42.740
the currency type and it
will use the US formatting.

00:09:42.740 --> 00:09:45.424
And it formats this number.

00:09:45.424 --> 00:09:47.314
If you want to change that,

00:09:47.314 --> 00:09:50.915
you can use colon and
the country code.

00:09:50.915 --> 00:09:54.095
There is a three-digit
country code for currencies.

00:09:54.095 --> 00:09:56.104
If I use GBP,

00:09:56.104 --> 00:09:57.919
that is for Great Britain,

00:09:57.919 --> 00:09:59.719
that should go into
single quotes or

00:09:59.719 --> 00:10:02.345
double quotes. Save it.

00:10:02.345 --> 00:10:04.234
Go back to the browser.

00:10:04.234 --> 00:10:07.340
Now you see pounds
as the symbol.

00:10:07.340 --> 00:10:10.279
So let's leave the default
currency as it is.

00:10:10.279 --> 00:10:12.545
Let's copy this line.

00:10:12.545 --> 00:10:15.410
Paste it, changed
the previous line,

00:10:15.410 --> 00:10:18.719
get rid off GBP so that we
can see the difference.

00:10:18.719 --> 00:10:20.889
The first one is in dollars,

00:10:20.889 --> 00:10:23.035
the second one is
for Great Britain.

00:10:23.035 --> 00:10:27.040
It's pounds. If you want to
do it for India, copy that,

00:10:27.040 --> 00:10:33.415
paste it, change this
to INR. Indian rupees.

00:10:33.415 --> 00:10:34.539
Go back.

00:10:34.539 --> 00:10:37.000
Now you see the rupee
symbol right here,

00:10:37.000 --> 00:10:39.350
and it's all formatted.

00:10:39.900 --> 00:10:43.810
The next pipe is the JSON
pipe which you have already

00:10:43.810 --> 00:10:47.079
been using when you worked
on applications earlier,

00:10:47.079 --> 00:10:48.729
the JSON pipe converts

00:10:48.729 --> 00:10:52.540
a JavaScript object
into a JSON string.

00:10:52.540 --> 00:10:56.064
Let's see that quickly or
to Visual Studio Code,

00:10:56.064 --> 00:11:01.485
create object, say my OBJ colon.

00:11:01.485 --> 00:11:03.889
Is equal to just use the object

00:11:03.889 --> 00:11:06.259
literal syntax and create
an object type script

00:11:06.259 --> 00:11:11.240
will automatically
assume that type name,

00:11:11.240 --> 00:11:20.749
colon, John, comma
salary colon 9,000.

00:11:20.749 --> 00:11:25.669
Let me format it by moving
it to the next line.

00:11:25.669 --> 00:11:29.254
So here we have created
a simple object literal

00:11:29.254 --> 00:11:32.930
with two properties on
it, name and salary.

00:11:32.930 --> 00:11:33.875
Save it.

00:11:33.875 --> 00:11:35.930
Go back to the HTML.

00:11:35.930 --> 00:11:38.209
Right here up top,
grab this line

00:11:38.209 --> 00:11:41.149
again to display the object.

00:11:41.149 --> 00:11:46.474
Get rid of the pipe. My OBJ
is the object, save it.

00:11:46.474 --> 00:11:48.529
Now by default, it will

00:11:48.529 --> 00:11:50.884
render the object
as key-value pairs,

00:11:50.884 --> 00:11:52.760
objects and object type.

00:11:52.760 --> 00:11:55.039
But I want the JSon data.

00:11:55.039 --> 00:11:57.665
That is when we use pipe space,

00:11:57.665 --> 00:12:01.249
that JSON pipe that will convert

00:12:01.249 --> 00:12:03.934
the object into a JSON string

00:12:03.934 --> 00:12:06.539
and you see the proper output.

00:12:07.360 --> 00:12:10.309
In this lecture, you
will see the number

00:12:10.309 --> 00:12:12.830
or decimal pipe in action.

00:12:12.830 --> 00:12:15.094
The syntax to use it is number,

00:12:15.094 --> 00:12:16.655
which is the pipe colon,

00:12:16.655 --> 00:12:18.949
the minimum number
of integer digits,

00:12:18.949 --> 00:12:20.179
that is the digit before

00:12:20.179 --> 00:12:24.154
the decimal point
in the number dot.

00:12:24.154 --> 00:12:25.669
The minimum decimal digits,

00:12:25.669 --> 00:12:27.620
that is the digits after
the decimal point.

00:12:27.620 --> 00:12:29.374
You want the minimum
number of them,

00:12:29.374 --> 00:12:31.205
hyphen the maximum number of

00:12:31.205 --> 00:12:35.044
decimal digits from the number
you want to be rendered.

00:12:35.044 --> 00:12:36.529
So let's see that in action,

00:12:36.529 --> 00:12:38.044
go to Visual Studio Code,

00:12:38.044 --> 00:12:40.775
define a new number type.

00:12:40.775 --> 00:12:41.719
Call it.

00:12:41.719 --> 00:12:47.254
My number is equal to 1.123, 45.

00:12:47.254 --> 00:12:49.850
Here we can optionally
assigned at type.

00:12:49.850 --> 00:12:52.610
It's always a good practice
to assign at Type.

00:12:52.610 --> 00:12:54.575
Go to HTML.

00:12:54.575 --> 00:13:02.150
The first line.
Within the brackets,

00:13:02.150 --> 00:13:05.210
my number is what
we have defined.

00:13:05.210 --> 00:13:08.210
No surprises there it will
define or it will display

00:13:08.210 --> 00:13:12.484
the number as it is now
to format it my number.

00:13:12.484 --> 00:13:16.400
By number, I want only
three digits after

00:13:16.400 --> 00:13:19.070
the decimal point number colon

00:13:19.070 --> 00:13:21.485
within single quotes
pass the format.

00:13:21.485 --> 00:13:23.480
The first thing we need to

00:13:23.480 --> 00:13:26.390
pass is the minimum
integer digits.

00:13:26.390 --> 00:13:28.430
So here I want four

00:13:28.430 --> 00:13:30.124
is the minimum integer
number of digits.

00:13:30.124 --> 00:13:31.969
I want all the
digits, of course,

00:13:31.969 --> 00:13:37.564
will always include all the
digits in the number dot.

00:13:37.564 --> 00:13:42.004
The second parameter is the
minimum decimal digits.

00:13:42.004 --> 00:13:45.409
I only want, I want three
decimal digits at a minimum.

00:13:45.409 --> 00:13:50.390
I want to, and at a
maximum I want three.

00:13:50.390 --> 00:13:54.440
So hyphen three is the
maximum decimal digits.

00:13:54.440 --> 00:13:56.060
So save it.

00:13:56.060 --> 00:13:58.415
Go back to the browser.

00:13:58.415 --> 00:14:00.620
Let's make sure we
got the syntax right.

00:14:00.620 --> 00:14:02.989
This single code should
go right at the end

00:14:02.989 --> 00:14:05.599
of the format for dot to

00:14:05.599 --> 00:14:08.014
minimum after the
decimal point hyphen

00:14:08.014 --> 00:14:10.924
three maximum digits
after the decimal point.

00:14:10.924 --> 00:14:12.289
Save it, go back.

00:14:12.289 --> 00:14:14.975
Now you see four digits

00:14:14.975 --> 00:14:17.390
before the decimal
point and three digits

00:14:17.390 --> 00:14:20.210
because maximum we have
specified three if I change

00:14:20.210 --> 00:14:23.884
it to two and one,

00:14:23.884 --> 00:14:27.814
we'll see 12 because
maximum number of

00:14:27.814 --> 00:14:32.165
digits is two and
minimum is one.

00:14:32.165 --> 00:14:35.135
If I change this to five.

00:14:35.135 --> 00:14:38.645
Let's see what happens. So
before the decimal point,

00:14:38.645 --> 00:14:40.055
I want five digits.

00:14:40.055 --> 00:14:42.439
Without changing the value
of the number itself.

00:14:42.439 --> 00:14:44.419
It happens at zero
at the beginning.

00:14:44.419 --> 00:14:46.130
So you can play around
with the syntax.

00:14:46.130 --> 00:14:49.609
The syntax to
remember is number,

00:14:49.609 --> 00:14:51.200
which is the pipe colon,

00:14:51.200 --> 00:14:53.510
minimum integer digits like this

00:14:53.510 --> 00:14:55.879
before the decimal point dot or

00:14:55.879 --> 00:14:57.499
the decimal point after

00:14:57.499 --> 00:15:00.590
the decimal point,
minimum decimal digits.

00:15:00.590 --> 00:15:05.520
You want hyphen that
maximum decimal digits.

00:15:06.520 --> 00:15:10.624
The person pipe converts
a given number into

00:15:10.624 --> 00:15:12.590
a percentage and it appends

00:15:12.590 --> 00:15:15.065
the person tastes symbol
at the end of it.

00:15:15.065 --> 00:15:17.329
Go ahead and use it.

00:15:17.329 --> 00:15:18.814
Go to Visual Studio Code.

00:15:18.814 --> 00:15:20.225
In that TypeScript file,

00:15:20.225 --> 00:15:23.764
define a new field called stock.

00:15:23.764 --> 00:15:28.625
Colon number is
equal to say 3.5.

00:15:28.625 --> 00:15:31.804
Go to the HTML, grab
the first line.

00:15:31.804 --> 00:15:35.540
Pasted stock is the number.

00:15:35.540 --> 00:15:37.474
Copy that paste it.

00:15:37.474 --> 00:15:40.985
Use the percentage pipe. Pipe.

00:15:40.985 --> 00:15:44.765
Person is the pipe name
not percentage per cent.

00:15:44.765 --> 00:15:49.985
Save it to the HTML and
you see 350 per cent.

00:15:49.985 --> 00:15:53.119
So it simply multiplies the
given number by hundred

00:15:53.119 --> 00:15:57.019
and it adds the percentage
symbol at the end.

00:15:57.019 --> 00:15:58.895
While using the percent pipe,

00:15:58.895 --> 00:16:01.055
we can use a formatting
similar to that

00:16:01.055 --> 00:16:03.470
of the number. You can pass in.

00:16:03.470 --> 00:16:07.505
The minimum number of digits
before the decimal point.

00:16:07.505 --> 00:16:11.120
The maximum number of digits
after the decimal point,

00:16:11.120 --> 00:16:12.575
and also the minimum
number of digits

00:16:12.575 --> 00:16:14.644
after the decimal point as well.

00:16:14.644 --> 00:16:15.799
So try it out.

00:16:15.799 --> 00:16:18.499
Go to Visual Studio
Code percentage or per

00:16:18.499 --> 00:16:21.394
cent colon within single quotes.

00:16:21.394 --> 00:16:23.220
I want.

00:16:23.620 --> 00:16:26.405
We have one digit

00:16:26.405 --> 00:16:28.219
or three digits before
the decimal point.

00:16:28.219 --> 00:16:32.630
So three digits after the
decimal point at a minimum,

00:16:32.630 --> 00:16:36.469
I want one hyphen, maximum two.

00:16:36.469 --> 00:16:38.599
I don't have any digits after

00:16:38.599 --> 00:16:40.594
the decimal point here
I have one digit,

00:16:40.594 --> 00:16:42.350
but when the number
is converted,

00:16:42.350 --> 00:16:44.119
there'll be no digits at all.

00:16:44.119 --> 00:16:47.075
So it will append zeros
after the decimal point.

00:16:47.075 --> 00:16:48.620
Go to the web browser.

00:16:48.620 --> 00:16:52.250
As you can see, 350
dot zero because

00:16:52.250 --> 00:16:53.855
at a minimum I said I want

00:16:53.855 --> 00:16:56.029
one digit after
the decimal point.

00:16:56.029 --> 00:16:58.910
If I change this to, to save it,

00:16:58.910 --> 00:17:02.734
it will add two zeros
after the decimal point.

00:17:02.734 --> 00:17:06.200
And here, if you add a
lot of decimal points,

00:17:06.200 --> 00:17:09.665
say 666, etc, save it.

00:17:09.665 --> 00:17:13.909
Now you see a 35666.

00:17:13.909 --> 00:17:16.235
So that is how you can
convert a given number

00:17:16.235 --> 00:17:19.610
into percentage and also
use the formatting,

00:17:19.610 --> 00:17:24.690
apply the formatting
rules just like a number.

00:17:25.840 --> 00:17:29.779
Before you go ahead and
explore the async pipe and

00:17:29.779 --> 00:17:31.670
other cool pipe that
we can use with

00:17:31.670 --> 00:17:34.085
arrays is the slides pipe.

00:17:34.085 --> 00:17:36.949
The slides pipe slices
and array given

00:17:36.949 --> 00:17:39.919
the starting index
and the ending index.

00:17:39.919 --> 00:17:44.449
Here, we use an array
pipe slice colon.

00:17:44.449 --> 00:17:45.844
The starting index is two,

00:17:45.844 --> 00:17:46.969
so it will start from

00:17:46.969 --> 00:17:48.739
the second index and it

00:17:48.739 --> 00:17:50.705
will go all the way
to the fourth index.

00:17:50.705 --> 00:17:53.959
And it will return only
those array elements.

00:17:53.959 --> 00:17:55.910
If you don't pass
in one of these,

00:17:55.910 --> 00:17:57.860
it will be assumed that
you want to start from

00:17:57.860 --> 00:18:00.545
the start or go all
the way to the end.

00:18:00.545 --> 00:18:04.819
You can also use a negative
value to indicate an offset.

00:18:04.819 --> 00:18:06.319
And if you use a negative value,

00:18:06.319 --> 00:18:10.355
it would be treated as it
is starting from the end.

00:18:10.355 --> 00:18:13.565
And negative value is
an offset from the end.

00:18:13.565 --> 00:18:17.060
Let's try it out. Go
to Visual Studio Code.

00:18:17.060 --> 00:18:19.339
Define an array.

00:18:19.339 --> 00:18:21.665
Say numbers.

00:18:21.665 --> 00:18:25.384
Numbers is an array
of type number.

00:18:25.384 --> 00:18:28.655
So colon number.

00:18:28.655 --> 00:18:33.259
Array is equal to
within square brackets,

00:18:33.259 --> 00:18:38.760
assign some values,
10203040, comma 50.

00:18:39.880 --> 00:18:43.235
Up top, grab this line.

00:18:43.235 --> 00:18:45.320
Based it.

00:18:45.320 --> 00:18:48.574
Numbers is the array.

00:18:48.574 --> 00:18:52.235
Use pipe, slice,
pass in the index.

00:18:52.235 --> 00:18:58.295
I want all the numbers 2-4
to Poland for save it,

00:18:58.295 --> 00:19:03.125
go back to the browser
and the output is 30.40.

00:19:03.125 --> 00:19:04.925
So here we are
getting starting from

00:19:04.925 --> 00:19:10.145
012 all the way to
four before four.

00:19:10.145 --> 00:19:12.394
So zero to two to four,

00:19:12.394 --> 00:19:16.609
it will give us the
elements 30.40.

00:19:16.609 --> 00:19:19.340
It will stop when
it reaches four.

00:19:19.340 --> 00:19:24.020
You can change it to five.

00:19:24.020 --> 00:19:27.049
Now we'll see 50 as well.

00:19:27.049 --> 00:19:29.104
So this is the starting index

00:19:29.104 --> 00:19:31.040
and this is the ending
index right here.

00:19:31.040 --> 00:19:33.679
If you don't pass the
ending index, save it.

00:19:33.679 --> 00:19:35.730
Let's see what happens.

00:19:35.770 --> 00:19:39.050
You don't have to
use the colon there.

00:19:39.050 --> 00:19:42.079
So it will start from
whatever index UQ,

00:19:42.079 --> 00:19:43.940
and it will go all the way to

00:19:43.940 --> 00:19:45.410
the last element in

00:19:45.410 --> 00:19:47.929
the array or the last
index in the array.

00:19:47.929 --> 00:19:50.569
You can also pass in
negative values, e.g.

00:19:50.569 --> 00:19:52.850
if you say colon minus one,

00:19:52.850 --> 00:19:56.555
that means one element
before the last index,

00:19:56.555 --> 00:19:58.520
R1 index before the last index

00:19:58.520 --> 00:20:00.709
negative always starts from

00:20:00.709 --> 00:20:02.854
the ending and it will stop

00:20:02.854 --> 00:20:05.584
at one index before
the last index.

00:20:05.584 --> 00:20:11.209
So we see 30.40 because it
starts from the second index,

00:20:11.209 --> 00:20:13.174
30 goes all the way to

00:20:13.174 --> 00:20:17.479
one index before the
last index, which is 40.

00:20:17.479 --> 00:20:20.900
This is how you can
slice an array.

00:20:20.900 --> 00:20:22.969
In the next lecture, I
will show you how to use

00:20:22.969 --> 00:20:26.850
these slides inside
a for loop as well.

00:20:27.730 --> 00:20:32.674
In this lecture, you will
use the slice inside and G4.

00:20:32.674 --> 00:20:34.834
Define a bold element.

00:20:34.834 --> 00:20:40.505
Use star ng4 is equal to
within double-quotes.

00:20:40.505 --> 00:20:46.054
Let V for value of the
array here is numbers.

00:20:46.054 --> 00:20:47.540
Numbers is the array.

00:20:47.540 --> 00:20:49.460
Slice it.

00:20:49.460 --> 00:20:53.659
Or use the slice
pipe and pass in

00:20:53.659 --> 00:20:57.664
the index colon due to
the end of the array.

00:20:57.664 --> 00:20:59.449
So I'm not passing
the array index,

00:20:59.449 --> 00:21:01.984
close the bold tag and
within the bold tag,

00:21:01.984 --> 00:21:05.779
use the string interpolation
syntax expression V

00:21:05.779 --> 00:21:09.544
for the value which will
come from this guy here.

00:21:09.544 --> 00:21:11.509
Save it, go back to

00:21:11.509 --> 00:21:13.729
the web browser and it will

00:21:13.729 --> 00:21:16.594
display all the
elements, 30, 40, 50.

00:21:16.594 --> 00:21:18.919
So he never for-loops
or NG four.

00:21:18.919 --> 00:21:21.680
If you want to
slice the elements,

00:21:21.680 --> 00:21:25.200
you can use the slice
syntax as follows.

00:21:27.250 --> 00:21:29.809
And I think pipe is very

00:21:29.809 --> 00:21:32.375
useful when we are
dealing with promises are

00:21:32.375 --> 00:21:35.525
observables in our
HTML components

00:21:35.525 --> 00:21:37.889
and model type script files.

00:21:37.889 --> 00:21:41.110
We can directly use the
promises that are returned from

00:21:41.110 --> 00:21:46.239
a backend call or from our
services in the HTML template.

00:21:46.239 --> 00:21:49.240
Let's see how we deal
with promises are

00:21:49.240 --> 00:21:51.970
observables without using
the async pipe first.

00:21:51.970 --> 00:21:54.999
And then we will use
the async pipe and use

00:21:54.999 --> 00:21:58.779
those promises directly
in the HTML template.

00:21:58.779 --> 00:22:00.834
You already dealt with

00:22:00.834 --> 00:22:04.794
observables when you have
made back-end calls earlier,

00:22:04.794 --> 00:22:06.940
handled observables, you have

00:22:06.940 --> 00:22:08.680
subscribed to the
method calls and

00:22:08.680 --> 00:22:10.690
have handle the
asynchronous response

00:22:10.690 --> 00:22:12.415
that comes back and
you are competent.

00:22:12.415 --> 00:22:15.925
But now we are going to
create our own promise.

00:22:15.925 --> 00:22:18.370
Go to app dot component dot ts.

00:22:18.370 --> 00:22:20.385
And we'll create a method here

00:22:20.385 --> 00:22:22.820
that will return a promise back.

00:22:22.820 --> 00:22:25.684
A promise is something that
happens in the future.

00:22:25.684 --> 00:22:29.194
And we use promises for
asynchronous processing.

00:22:29.194 --> 00:22:34.579
Get promises a method that
returns back a new promise.

00:22:34.579 --> 00:22:37.594
Instead of returning an
object or something else,

00:22:37.594 --> 00:22:39.365
we return a promise back.

00:22:39.365 --> 00:22:41.539
A promise is
asynchronous function.

00:22:41.539 --> 00:22:44.479
As a parameter to the
promised constructor.

00:22:44.479 --> 00:22:46.579
We pass in a function that takes

00:22:46.579 --> 00:22:50.910
two arguments,
resolved and reject.

00:22:51.040 --> 00:22:53.554
Start the arrow function,

00:22:53.554 --> 00:22:55.220
open up the body
of the function.

00:22:55.220 --> 00:22:58.790
Within this body, we can
add any asynchronous logic.

00:22:58.790 --> 00:23:00.109
It could be a database call,

00:23:00.109 --> 00:23:02.929
it could be a back-end rest
web service call, etc..

00:23:02.929 --> 00:23:05.209
But in this case, we're
simply going to return

00:23:05.209 --> 00:23:08.839
a string back using setTimeout.

00:23:08.839 --> 00:23:10.970
Just to simulate some delay,

00:23:10.970 --> 00:23:12.739
we are using the
setTimeout method

00:23:12.739 --> 00:23:14.989
available in
JavaScript TypeScript.

00:23:14.989 --> 00:23:17.540
The setTimeout method
takes two parameters.

00:23:17.540 --> 00:23:20.134
The first parameter
is a function call,

00:23:20.134 --> 00:23:22.744
and the second
parameter is a timeout.

00:23:22.744 --> 00:23:28.070
Here we are passing a timeout
of 2000 milliseconds.

00:23:28.070 --> 00:23:31.639
And the setTimeout will invoke
any function that we pass

00:23:31.639 --> 00:23:35.209
in as the first parameter
after this hi mode.

00:23:35.209 --> 00:23:38.089
For the first parameter
is a function call.

00:23:38.089 --> 00:23:40.769
Create a arrow function.

00:23:40.870 --> 00:23:46.774
Within the body. I'm simply
invoking resolve function.

00:23:46.774 --> 00:23:47.930
So this parameter here,

00:23:47.930 --> 00:23:50.389
the first parameter
here is a resolve,

00:23:50.389 --> 00:23:52.295
which is a function again,

00:23:52.295 --> 00:23:59.460
returns a string
promise response.

00:23:59.470 --> 00:24:01.804
When we invoke resolve,

00:24:01.804 --> 00:24:03.830
that means the
promise is done with

00:24:03.830 --> 00:24:06.050
its work and whatever
value we pass here,

00:24:06.050 --> 00:24:09.019
we'll go back as the response
of the promise you can use

00:24:09.019 --> 00:24:12.259
reject to send a response back.

00:24:12.259 --> 00:24:14.240
The learn about more
about promises.

00:24:14.240 --> 00:24:17.930
You can check out my advanced
JavaScript and ES6 course.

00:24:17.930 --> 00:24:21.209
But typically, a promise is,

00:24:21.220 --> 00:24:24.140
a promise is used for
asynchronous processing.

00:24:24.140 --> 00:24:26.149
It is something that
happens in the future.

00:24:26.149 --> 00:24:27.860
And whatever logic you want,

00:24:27.860 --> 00:24:29.779
you can put it into the promise.

00:24:29.779 --> 00:24:32.599
We use the result to

00:24:32.599 --> 00:24:35.375
send a successful response
back when you invoke this,

00:24:35.375 --> 00:24:38.135
it tells the JavaScript
engine that the promise

00:24:38.135 --> 00:24:39.650
is done it with it's worth and

00:24:39.650 --> 00:24:41.314
it should return
the response back.

00:24:41.314 --> 00:24:42.919
If you use reject,
that means you are

00:24:42.919 --> 00:24:44.479
sending an error response

00:24:44.479 --> 00:24:47.975
back instead of a
successful response.

00:24:47.975 --> 00:24:50.164
And this resolver and
reject can be named

00:24:50.164 --> 00:24:52.745
anything here we have named
them resolve and reject,

00:24:52.745 --> 00:24:54.454
and this is a common practice.

00:24:54.454 --> 00:24:56.524
You can name them x and y.

00:24:56.524 --> 00:24:59.009
And in x and y.

00:24:59.009 --> 00:25:01.910
So far we have
created a promise and

00:25:01.910 --> 00:25:04.459
you are returning that promise
from this get promise.

00:25:04.459 --> 00:25:06.439
Now we're going to
use this inside

00:25:06.439 --> 00:25:09.300
the constructor
of our component.

00:25:09.310 --> 00:25:15.785
And invoke this dot get promise.

00:25:15.785 --> 00:25:18.410
Once we invoke something
that returns a promise,

00:25:18.410 --> 00:25:21.035
we need to handle
it using, then.

00:25:21.035 --> 00:25:23.344
Then we pass in

00:25:23.344 --> 00:25:26.030
a callback function that
can handle the response.

00:25:26.030 --> 00:25:29.974
So I'm using an arrow
function, V arrow function.

00:25:29.974 --> 00:25:32.435
And we assign this value to

00:25:32.435 --> 00:25:34.790
a variable that we
defined up top here,

00:25:34.790 --> 00:25:36.005
I have done, done this

00:25:36.005 --> 00:25:39.049
earlier while dealing
with asynchronous calls,

00:25:39.049 --> 00:25:40.790
whatever JSON was coming back,

00:25:40.790 --> 00:25:44.420
we were assigning that to a
variable here we can call

00:25:44.420 --> 00:25:46.984
that variable promise response

00:25:46.984 --> 00:25:50.510
or promised data colon type any.

00:25:50.510 --> 00:25:52.759
Here in the arrow function.

00:25:52.759 --> 00:25:56.959
This dot promised data

00:25:56.959 --> 00:26:00.394
is equal to whatever
the promise returns.

00:26:00.394 --> 00:26:02.165
That's it.

00:26:02.165 --> 00:26:04.400
Inside the constructor, we are

00:26:04.400 --> 00:26:06.860
invoking the promise
and then we are

00:26:06.860 --> 00:26:08.990
handling the asynchronous
that response that

00:26:08.990 --> 00:26:12.365
comes back whenever
this is done.

00:26:12.365 --> 00:26:14.720
Now to use this response in

00:26:14.720 --> 00:26:16.909
the component HTML
in the template.

00:26:16.909 --> 00:26:18.005
Go to the top.

00:26:18.005 --> 00:26:18.859
We're going to have this hetero

00:26:18.859 --> 00:26:20.570
and right at the beginning,

00:26:20.570 --> 00:26:27.004
add it back and
use Promise data.

00:26:27.004 --> 00:26:30.485
That's the variable which
we have defined right here.

00:26:30.485 --> 00:26:33.110
So we are displaying the
response back on the UI.

00:26:33.110 --> 00:26:34.834
If you go back to
the browser now,

00:26:34.834 --> 00:26:36.920
you see promise response.

00:26:36.920 --> 00:26:38.689
This is the response coming back

00:26:38.689 --> 00:26:42.440
from the promised you
have created right here,

00:26:42.440 --> 00:26:44.389
whatever you are
sending back from here,

00:26:44.389 --> 00:26:46.249
we are assigning it to

00:26:46.249 --> 00:26:48.410
promise data and then
we're displaying it here.

00:26:48.410 --> 00:26:51.634
But so far, we have not
used the async pipe.

00:26:51.634 --> 00:26:54.380
We have only simulated
how we deal with

00:26:54.380 --> 00:26:57.275
promises are observables
in our components.

00:26:57.275 --> 00:26:58.969
We typically deal with them.

00:26:58.969 --> 00:27:00.769
In the model classes,

00:27:00.769 --> 00:27:02.854
we invoke a function

00:27:02.854 --> 00:27:05.824
which returns a promise
or an observable back.

00:27:05.824 --> 00:27:07.670
And then if it's a promise,

00:27:07.670 --> 00:27:10.535
we use that then to handle it.

00:27:10.535 --> 00:27:12.740
And we assign the data to

00:27:12.740 --> 00:27:14.990
feel that we define if
it is an observable,

00:27:14.990 --> 00:27:16.489
then it will invoke subscribe

00:27:16.489 --> 00:27:18.964
method and they will do
the same processing.

00:27:18.964 --> 00:27:21.529
In the next lecture,
we'll learn how using

00:27:21.529 --> 00:27:23.014
the async pipe will make

00:27:23.014 --> 00:27:26.580
our life easier to
deal with this data.

00:27:27.220 --> 00:27:31.220
In this lecture, we will
use the async pipe to deal

00:27:31.220 --> 00:27:34.714
with the promise directly
inside of our HTML template.

00:27:34.714 --> 00:27:36.230
And also that will reduce

00:27:36.230 --> 00:27:38.014
the amount of code that we write

00:27:38.014 --> 00:27:41.690
inside our model class
to deal with a promise.

00:27:41.690 --> 00:27:45.455
So here, instead of handling
the promise like this,

00:27:45.455 --> 00:27:47.120
all this code that

00:27:47.120 --> 00:27:50.359
handles the response from
a promise will go away.

00:27:50.359 --> 00:27:51.829
And we're going to assign the

00:27:51.829 --> 00:27:53.090
promise that comes back from

00:27:53.090 --> 00:27:57.500
the get promised method to
a variable called Promise.

00:27:57.500 --> 00:27:59.509
So get rid of promised data.

00:27:59.509 --> 00:28:01.144
Promises the variable name,

00:28:01.144 --> 00:28:03.260
and this is of type promise

00:28:03.260 --> 00:28:06.305
that can return
any type of data.

00:28:06.305 --> 00:28:07.834
And in the constructor,

00:28:07.834 --> 00:28:10.865
we will assign this dot promise

00:28:10.865 --> 00:28:14.609
is equal to this
dot get promised.

00:28:15.280 --> 00:28:17.614
This get promised simulates

00:28:17.614 --> 00:28:21.529
what typically services
layer class would do.

00:28:21.529 --> 00:28:23.539
And it returns a promise back.

00:28:23.539 --> 00:28:25.985
We're assigning that
to a promise directly.

00:28:25.985 --> 00:28:30.470
And now we can use this promise
in the HTML right here.

00:28:30.470 --> 00:28:33.109
Instead of promise
data promise use

00:28:33.109 --> 00:28:37.265
the pipe symbol async
is the pipe name.

00:28:37.265 --> 00:28:40.114
The async pipe knows how to

00:28:40.114 --> 00:28:42.170
handle the promise and

00:28:42.170 --> 00:28:44.405
whenever the response comes
back from the promise,

00:28:44.405 --> 00:28:46.069
it will render it onto the UI.

00:28:46.069 --> 00:28:47.824
If you go to the UI now,

00:28:47.824 --> 00:28:49.370
you will see that it's

00:28:49.370 --> 00:28:51.199
refreshing and it will

00:28:51.199 --> 00:28:53.390
take some time for the
response to come back.

00:28:53.390 --> 00:28:55.594
If you refresh this
page again, hit Enter,

00:28:55.594 --> 00:28:57.799
you will see all the other
responses on the screen,

00:28:57.799 --> 00:29:01.370
but the promise response
itself comes back later.

00:29:01.370 --> 00:29:03.260
And this pipe knows

00:29:03.260 --> 00:29:05.299
how to deal with that
data internally,

00:29:05.299 --> 00:29:06.919
it will do then and all that.

00:29:06.919 --> 00:29:08.945
And then it is
rendering that data.

00:29:08.945 --> 00:29:10.790
There is a weight
here because we have

00:29:10.790 --> 00:29:13.144
added timeout right here.

00:29:13.144 --> 00:29:15.020
So that is how asynchronous
processing is done.

00:29:15.020 --> 00:29:16.219
It will take some time,

00:29:16.219 --> 00:29:18.890
but the rest of the
rendering can happen.

00:29:18.890 --> 00:29:20.480
That's the beauty
of promises and

00:29:20.480 --> 00:29:23.269
observables are
asynchronous processing.

00:29:23.269 --> 00:29:25.954
And you have successfully used

00:29:25.954 --> 00:29:29.450
the async pipe to handle
promise directly inside

00:29:29.450 --> 00:29:33.005
of our HTML template
instead of processing it

00:29:33.005 --> 00:29:38.009
in your model class or
the type script class.

00:29:40.240 --> 00:29:43.280
So far we have
learned how to use

00:29:43.280 --> 00:29:47.179
the various inbuilt pipes that
are available in Angular.

00:29:47.179 --> 00:29:49.010
For most of our requirements,

00:29:49.010 --> 00:29:50.975
these pipes are
quite sufficient.

00:29:50.975 --> 00:29:52.699
But if we want to create

00:29:52.699 --> 00:29:54.230
your own custom pipe for

00:29:54.230 --> 00:29:57.019
a requirement that
these don't match for.

00:29:57.019 --> 00:29:59.135
It's very easy to do that.

00:29:59.135 --> 00:30:01.265
Go to Visual Studio Code,

00:30:01.265 --> 00:30:03.530
stop the server if
it's up and running,

00:30:03.530 --> 00:30:06.515
I want to create a
pipe that will take

00:30:06.515 --> 00:30:10.594
any text or string and it
will reverse that string.

00:30:10.594 --> 00:30:12.859
Once you learn how to
implement a custom pipe,

00:30:12.859 --> 00:30:14.959
you can implement
any logic within

00:30:14.959 --> 00:30:17.975
that pipe to create a pipe.

00:30:17.975 --> 00:30:22.580
Use N, G, D, P for pipe.

00:30:22.580 --> 00:30:24.140
Or you can type in pipe,

00:30:24.140 --> 00:30:26.179
It's up to you. Space.

00:30:26.179 --> 00:30:29.389
Pipes is the folder where I
want my pipe and I'm going to

00:30:29.389 --> 00:30:33.229
call it reverse pipe. Hit Enter.

00:30:33.229 --> 00:30:35.330
That will create a couple of

00:30:35.330 --> 00:30:38.420
components for as diverse pipe.

00:30:38.420 --> 00:30:40.474
Pipe dot spec.

00:30:40.474 --> 00:30:42.740
If you go to the
folder called pipes,

00:30:42.740 --> 00:30:47.360
you will see the test
script and the pipe itself.

00:30:47.360 --> 00:30:50.149
And it also updates the app dot

00:30:50.149 --> 00:30:54.274
module.js with the pipe
that just got created.

00:30:54.274 --> 00:30:56.300
Let's close the console.

00:30:56.300 --> 00:30:58.294
You'll see that the
reverse pipe is

00:30:58.294 --> 00:31:00.529
imported and it's added it to

00:31:00.529 --> 00:31:02.510
the declarations section so

00:31:02.510 --> 00:31:05.615
that we can use it
in our application.

00:31:05.615 --> 00:31:08.270
Go back to the pipe
that God created.

00:31:08.270 --> 00:31:10.700
Open up the reverse
pipe dot pipe dot PS.

00:31:10.700 --> 00:31:12.725
This is where all the
source code lives.

00:31:12.725 --> 00:31:16.445
Every pipe that we create
is a TypeScript class that

00:31:16.445 --> 00:31:21.320
implements pipe transform
from angular core.

00:31:21.320 --> 00:31:23.209
So you can see in
the import that we

00:31:23.209 --> 00:31:25.340
import pipe because we

00:31:25.340 --> 00:31:29.990
mark every pipe class with
that decorator called pipe.

00:31:29.990 --> 00:31:32.209
And this is where
we give it a name.

00:31:32.209 --> 00:31:35.240
This is the name that
we should use when

00:31:35.240 --> 00:31:38.929
we want to use this pipe
in our HTML template.

00:31:38.929 --> 00:31:41.720
And a transform method is

00:31:41.720 --> 00:31:44.824
what we implement
from this interface.

00:31:44.824 --> 00:31:48.350
This transform method has
one argument at least,

00:31:48.350 --> 00:31:49.624
and then variable number of

00:31:49.624 --> 00:31:51.275
arguments that we can pass in,

00:31:51.275 --> 00:31:53.869
get it off the variable
number of arguments for now,

00:31:53.869 --> 00:31:57.424
let's deal with one
argument, call this input.

00:31:57.424 --> 00:31:59.674
We are going to
reverse this input.

00:31:59.674 --> 00:32:03.455
We are assuming that this
input is of type string.

00:32:03.455 --> 00:32:07.550
Go inside. Define your own logic

00:32:07.550 --> 00:32:10.040
to reverse the given string.

00:32:10.040 --> 00:32:15.079
For var I is equal to zero.

00:32:15.079 --> 00:32:20.015
I is less than input dot length.

00:32:20.015 --> 00:32:22.129
So you can change this
to string because we

00:32:22.129 --> 00:32:24.799
are sure that we are going
to pass in string type.

00:32:24.799 --> 00:32:29.180
Dot length is the
method I plus, plus.

00:32:29.180 --> 00:32:32.000
I'm going to loop through
and then I'm going to append

00:32:32.000 --> 00:32:34.984
each character in that
string to this data.

00:32:34.984 --> 00:32:46.229
Data is equal to the
input of I plus data.

00:32:47.260 --> 00:32:51.604
And I'm going to
return the data back.

00:32:51.604 --> 00:32:53.794
This will be the
reverse of the string.

00:32:53.794 --> 00:32:55.850
So the transform
method is where we

00:32:55.850 --> 00:32:57.605
write whatever logic we

00:32:57.605 --> 00:32:59.389
want that should be applied on

00:32:59.389 --> 00:33:01.909
the input so that the
transformation will be run.

00:33:01.909 --> 00:33:05.644
And whatever we return that
will be rendered on the UI.

00:33:05.644 --> 00:33:07.489
Go ahead and use
this pipe called

00:33:07.489 --> 00:33:09.980
reverse pipe in the HTML.

00:33:09.980 --> 00:33:20.610
Up top here. Let's
grab this copy. Paste.

00:33:20.710 --> 00:33:26.390
The pipe name itself
is reverse pipe.

00:33:26.390 --> 00:33:30.809
And the data we want to
apply that on is hello.

00:33:30.820 --> 00:33:34.204
Hello is string type data,

00:33:34.204 --> 00:33:36.019
so n close it within string.

00:33:36.019 --> 00:33:38.179
This string now
should be reversed

00:33:38.179 --> 00:33:41.249
when we apply this
pipe, save it.

00:33:41.320 --> 00:33:44.630
Run your server if it's down,

00:33:44.630 --> 00:33:46.775
or run the application.

00:33:46.775 --> 00:33:50.029
And G, So hyphen 0.

00:33:50.029 --> 00:33:52.459
While that happens, let
me summarize it again.

00:33:52.459 --> 00:33:56.195
In this lecture, you have
created a pipe using the CLI.

00:33:56.195 --> 00:33:59.434
When you create a pipe,
you got two files.

00:33:59.434 --> 00:34:02.629
Diverse pipe dot pipe dot PS is

00:34:02.629 --> 00:34:05.300
the source and this
one is the test case.

00:34:05.300 --> 00:34:06.769
And inside the pipe,

00:34:06.769 --> 00:34:08.134
every pipe implements

00:34:08.134 --> 00:34:11.209
a pipe transform
interface from Angular,

00:34:11.209 --> 00:34:13.160
and it implements
the transform method

00:34:13.160 --> 00:34:14.930
where all the logic lives.

00:34:14.930 --> 00:34:16.699
And each pipe is marked with

00:34:16.699 --> 00:34:21.299
a pipe decorator where
we give the pipe a name.

00:34:22.030 --> 00:34:25.640
And also the pipe was
automatically configured for

00:34:25.640 --> 00:34:28.430
us in the app dot
module dot ds in

00:34:28.430 --> 00:34:30.080
the Declaration's section so

00:34:30.080 --> 00:34:31.819
that we can use it
in other places

00:34:31.819 --> 00:34:35.284
in our application. It's
rendering the page.

00:34:35.284 --> 00:34:36.320
There we go.

00:34:36.320 --> 00:34:38.360
H-e-l-l-o.

00:34:38.360 --> 00:34:41.330
So our reverse pipe has
worked successfully.

00:34:41.330 --> 00:34:43.279
You can use any other string in

00:34:43.279 --> 00:34:45.500
the HTML and test your pipe,

00:34:45.500 --> 00:34:47.660
and you can create
other pipes as well.

00:34:47.660 --> 00:34:50.284
Here we have implemented
the reverse logic.

00:34:50.284 --> 00:34:53.479
We took the input and we
have a reverser the input.

00:34:53.479 --> 00:34:55.340
And we have sent that. We have

00:34:55.340 --> 00:34:58.440
returned to the diversity
of string back.
