1
00:00:01,940 --> 00:00:05,980
To execute the batch functionality, I'm going to start off by

2
00:00:05,980 --> 00:00:09,530
adding a column to our database table that's going to give us

3
00:00:09,530 --> 00:00:12,940
something to update with our batch statement.

4
00:00:12,940 --> 00:00:18,230
So I'm going to switch to our MySQL Workbench and I'm going to execute this

5
00:00:18,230 --> 00:00:27,080
SQL statement to alter the table and add a ride_date column to the table

6
00:00:27,080 --> 00:00:31,740
after the duration column. So I'm going to select that field and execute

7
00:00:31,740 --> 00:00:33,680
the statement underneath that cursor.

8
00:00:33,680 --> 00:00:37,980
You can see that it executed green down below in our log statement, but

9
00:00:37,980 --> 00:00:43,950
I'm going to double check that by saying select * from ride and execute

10
00:00:43,950 --> 00:00:53,260
that statement, and we can see that we have a column, ride_date, that has

11
00:00:53,260 --> 00:00:56,590
all null values inside of that table.

12
00:00:56,590 --> 00:01:00,540
So it added our column, but we didn't populate that with anything.

13
00:01:00,540 --> 00:01:05,790
Let's switch back over to our IDE and go into our

14
00:01:05,790 --> 00:01:11,800
RestControllerTest. From here, we're going to execute a

15
00:01:11,800 --> 00:01:15,140
call to trigger that batch statement.

16
00:01:15,140 --> 00:01:21,380
Now I will tell you that passing an array list of variables across a

17
00:01:21,380 --> 00:01:26,440
RESTful call is outside the scope of this course, and we're just going to

18
00:01:26,440 --> 00:01:33,160
shortcut that by grabbing our get from up above and using that to call our

19
00:01:33,160 --> 00:01:41,360
URL. So let's go up and grab our getRide and take a copy of that and paste

20
00:01:41,360 --> 00:01:51,980
it down below. And I'm going to call this testBatchUpdate. And from here,

21
00:01:51,980 --> 00:01:56,780
we can go through and say restTemplate.getForObject, and we're not going to

22
00:01:56,780 --> 00:02:00,960
store this to anything because we really don't care that it grabs an object,

23
00:02:00,960 --> 00:02:04,910
we're just going to use it to call the URL batch. So I'm going to

24
00:02:04,910 --> 00:02:09,920
change that URL to batch. And say that it just returns an

25
00:02:09,920 --> 00:02:17,560
Object.class, and save that. So, our testBatchUpdate method looks

26
00:02:17,560 --> 00:02:20,050
just like that. Very simple,

27
00:02:20,050 --> 00:02:23,010
I'm going to call this URL, we really just want to get it.

28
00:02:23,010 --> 00:02:26,840
We could even trigger that from just a browser call and

29
00:02:26,840 --> 00:02:29,840
have it issue the statement as well.

30
00:02:29,840 --> 00:02:34,730
Now we can switch over to our RideController and we're

31
00:02:34,730 --> 00:02:39,340
going to create a batch request down here.

32
00:02:39,340 --> 00:02:46,380
I'll grab our getRide from up above again and paste

33
00:02:46,380 --> 00:02:48,630
that down below. And the same thing,

34
00:02:48,630 --> 00:02:54,610
I'm going to change that URL to batch, I'm going to leave the request

35
00:02:54,610 --> 00:03:00,570
method type as GET, the response body is going to just be Object because

36
00:03:00,570 --> 00:03:04,140
we don't care about it, we're actually going to throw it away, and we're

37
00:03:04,140 --> 00:03:12,800
going to change the name to batch and just give it an empty set of

38
00:03:12,800 --> 00:03:15,040
arguments that we call in there.

39
00:03:15,040 --> 00:03:16,350
Now inside of here,

40
00:03:16,350 --> 00:03:23,270
I'm going to just change the body of this method to return null.

41
00:03:23,270 --> 00:03:29,190
And, then we can start by implementing our service calls that we're

42
00:03:29,190 --> 00:03:31,850
going to execute in our service tier.

43
00:03:31,850 --> 00:03:39,550
So I want to start off by saying rideService.batch, and

44
00:03:39,550 --> 00:03:42,750
we're going to now create a method inside of our service

45
00:03:42,750 --> 00:03:44,540
tier that does a couple of things.

46
00:03:44,540 --> 00:03:46,940
So let's save this method,

47
00:03:46,940 --> 00:03:54,840
click the red X to tell it to create a method batch in type RideService.

48
00:03:54,840 --> 00:03:57,390
It will add that to our interface.

49
00:03:57,390 --> 00:03:59,280
Once we save this,

50
00:03:59,280 --> 00:04:03,640
it will now tell us that we have a problem in our RideServiceImpl.

51
00:04:03,640 --> 00:04:09,240
I can switch over to our RideServiceImpl, hit Ctrl+spacebar,

52
00:04:09,240 --> 00:04:14,440
and it will ask us for a batch statement. Now is where we can

53
00:04:14,440 --> 00:04:17,240
start utilizing our services tier.

54
00:04:17,240 --> 00:04:19,040
Inside of here,

55
00:04:19,040 --> 00:04:26,140
I am going to now create a method to retrieve a list of rides, and we're

56
00:04:26,140 --> 00:04:28,600
actually going to use the method that we created up above.

57
00:04:28,600 --> 00:04:39,940
So we'll say Ride rides = rideRepository.getRides.

58
00:04:39,940 --> 00:04:44,730
Now this will return our list of rides for us from up above, just like we had

59
00:04:44,730 --> 00:04:49,650
used to return all of the rides to our test. From here,

60
00:04:49,650 --> 00:04:53,230
I'm going to create a name value pair, and this is where it

61
00:04:53,230 --> 00:04:54,940
might get a little interesting for you.

62
00:04:54,940 --> 00:05:00,530
So I'm going to create a list of object arrays, and I'm just

63
00:05:00,530 --> 00:05:04,500
going to call this pairs, and set that equal to a new array

64
00:05:04,500 --> 00:05:10,860
list. And save that. Now from here,

65
00:05:10,860 --> 00:05:16,900
I'm going to execute a foreach statement, and this is going to iterate

66
00:05:16,900 --> 00:05:24,640
over the Ride objects from our rides array list.

67
00:05:24,640 --> 00:05:29,130
So we'll save this. Now inside of here, we're going to create a name

68
00:05:29,130 --> 00:05:32,440
value pair, and the order of this does matter.

69
00:05:32,440 --> 00:05:38,080
So we're going to say Object [] tmp =,

70
00:05:38,080 --> 00:05:44,820
and we're just going to use the array syntax and say new Date and then

71
00:05:44,820 --> 00:05:55,790
ride.getId. Close that curly brace off. And then we'll say pairs.add, and we're

72
00:05:55,790 --> 00:06:02,040
going to add that object array to our array list of pairs.

73
00:06:02,040 --> 00:06:10,480
Now we can call the rideRepository.updateRides, and we

74
00:06:10,480 --> 00:06:12,480
have not created this method yet.

75
00:06:12,480 --> 00:06:18,630
We're going to, we're going to pass our pairs into it. Now we can save this,

76
00:06:18,630 --> 00:06:24,040
click the red X, and create the method updateRides in our

77
00:06:24,040 --> 00:06:29,480
RideRepository. Save that, and the same thing, we will get that

78
00:06:29,480 --> 00:06:32,110
red X inside of our RideRepository.

79
00:06:32,110 --> 00:06:37,310
Same pattern we've been using the last two examples. From here, we can hit

80
00:06:37,310 --> 00:06:44,100
Ctrl+spacebar and say updateRides, and this will add the stubbed out

81
00:06:44,100 --> 00:06:49,500
functionality of our updateRides method that we're going to use the batch

82
00:06:49,500 --> 00:06:54,810
functionality from our JdbcTemplate in. From here,

83
00:06:54,810 --> 00:07:06,230
let's say jdbcTemplate.batchUpdate, and we're going to use the SQL of

84
00:07:06,230 --> 00:07:20,740
update ride set ride_date = ? where id = ?. Again,

85
00:07:20,740 --> 00:07:25,470
that PreparedStatement syntax. We're going to pass in that

86
00:07:25,470 --> 00:07:30,290
pair for the array list a pair of objects into here, and

87
00:07:30,290 --> 00:07:32,720
this is why that order mattered.

88
00:07:32,720 --> 00:07:36,200
The first order it's looking for is the ride date and the second

89
00:07:36,200 --> 00:07:39,140
order of objects it's looking for is the ID.

90
00:07:39,140 --> 00:07:45,680
So that object array that's inside that array list has the right setup for

91
00:07:45,680 --> 00:07:54,090
the order of those elements. From here, we're ready to save that, exit

92
00:07:54,090 --> 00:07:59,240
full screen, I'm going to start up our server,

93
00:07:59,240 --> 00:08:01,980
everything looks fine on the startup of our server, and I'm

94
00:08:01,980 --> 00:08:09,370
going to go to our unit test, rightâ€‘click on batchUpdate, and

95
00:08:09,370 --> 00:08:16,490
say Run As, JUnit Test, and once that executes on our server we

96
00:08:16,490 --> 00:08:19,550
can go over to our JUnit test, everything looks good there.

97
00:08:19,550 --> 00:08:25,090
I'm going to switch back to our MySQL Workbench and execute that select *

98
00:08:25,090 --> 00:08:32,160
from ride again, and we'll see that all of our ride dates are now populated

99
00:08:32,160 --> 00:08:36,780
with a date. Now, I get that this example may not be quite as full featured

100
00:08:36,780 --> 00:08:40,900
that you may be looking for because we are just taking inside of our

101
00:08:40,900 --> 00:08:47,200
RideServiceImpl and putting in a new date, but you see that you could put in

102
00:08:47,200 --> 00:08:51,530
whatever value you wanted there. We could calculate a date, or if you're

103
00:08:51,530 --> 00:08:55,810
using a different type of column, possibly storing some other value inside

104
00:08:55,810 --> 00:09:00,370
of there. For the sake of the example, we just shoved new data in here and

105
00:09:00,370 --> 00:09:04,240
you'll see that it populated our database. Pretty simple.

106
00:09:04,240 --> 00:09:10,310
All we had to do was go through in our RestControllerTest and create

107
00:09:10,310 --> 00:09:15,080
a call to that URL, again passing those values through the JSON

108
00:09:15,080 --> 00:09:18,840
instance and to our controllers, really outside the scope of what

109
00:09:18,840 --> 00:09:20,340
we're doing inside this course.

110
00:09:20,340 --> 00:09:26,420
But it calls the URL inside of our controller. And you can see here

111
00:09:26,420 --> 00:09:30,370
we're just going to call rideService.batch, which eventually calls

112
00:09:30,370 --> 00:09:34,390
our service tier where we go through and we can see that we're going

113
00:09:34,390 --> 00:09:36,130
to get all those rides back,

114
00:09:36,130 --> 00:09:41,320
create our array list of temp items. Inside of that we

115
00:09:41,320 --> 00:09:44,190
have an array of those temp objects,

116
00:09:44,190 --> 00:09:49,700
add that, and then call our batch statement, which eventually

117
00:09:49,700 --> 00:09:55,960
goes through and executes our updateRides. Now, it should be

118
00:09:55,960 --> 00:10:02,310
noted that the batchUpdate will work with both updating rows,

119
00:10:02,310 --> 00:10:04,000
as well as inserting rows.

120
00:10:04,000 --> 00:10:10,080
So maybe you had 20 rides you wanted to insert into this database at once, you

121
00:10:10,080 --> 00:10:14,220
can use the insert statement. It doesn't care, the batch update will just

122
00:10:14,220 --> 00:10:18,280
execute whatever you have based off that array list of objects that you're

123
00:10:18,280 --> 00:10:21,740
passing into it and execute it for each row.

124
00:10:21,740 --> 00:10:31,000
The order of those elements does matter, though, as it does look for those question marks in a specific order.

