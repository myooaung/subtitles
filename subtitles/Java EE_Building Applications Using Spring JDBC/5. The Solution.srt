1
00:00:01,535 --> 00:00:06,487
So the solution we're looking to get out of Spring JDBC is that

2
00:00:06,487 --> 00:00:10,011
we can remove configuration code or lookup code and developers

3
00:00:10,011 --> 00:00:11,440
can focus on the business needs.

4
00:00:11,440 --> 00:00:12,154
Like I said,

5
00:00:12,154 --> 00:00:15,899
that's a big one for me is that the business doesn't care that I have

6
00:00:15,899 --> 00:00:18,626
a try catch block or how I handle this exception,

7
00:00:18,626 --> 00:00:23,535
they care that when we ask for a CAR we get that CAR back.

8
00:00:23,535 --> 00:00:26,535
Our code can also focus on testing.

9
00:00:26,535 --> 00:00:28,285
So on that previous slide,

10
00:00:28,285 --> 00:00:33,535
it really wasn't that testable as far as I have things hard coded in there,

11
00:00:33,535 --> 00:00:36,868
I have a driver manager that I'm getting a connection,

12
00:00:36,868 --> 00:00:40,335
where's that connection coming from and that type of information.

13
00:00:40,335 --> 00:00:45,535
Spring JDBC is built on top of Spring so we also indirectly have

14
00:00:45,535 --> 00:00:48,202
the power of Spring using dependency injection.

15
00:00:48,202 --> 00:00:51,868
If we want to annotate our code rather than having so

16
00:00:51,868 --> 00:00:56,080
much configuration code in there, Spring can help us with this as well.

17
00:00:56,080 --> 00:01:00,535
So make things easier to test, make things focused on what the business needs,

18
00:01:00,535 --> 00:01:04,843
and remove the configuration lookup code through doing

19
00:01:04,843 --> 00:01:14,000
annotations or XML based development. Let's look at that JDBC code again and compare it with what it could be.

