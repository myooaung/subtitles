WEBVTT
1
00:00:00.640 --> 00:00:05.310
Now that we have downloaded our application from either GitHub or from

2
00:00:05.310 --> 00:00:09.570
the exercise files underneath the URL for this course,

3
00:00:09.570 --> 00:00:16.440
we can open up our pom.xml file and select the Dependencies tab at the bottom.

4
00:00:16.440 --> 00:00:21.540
We need to add two dependencies inside of our application here.

5
00:00:21.540 --> 00:00:28.740
Let's give it a group ID of org.springframework and

6
00:00:28.740 --> 00:00:34.340
an artifact ID of spring‑jdbc.

7
00:00:34.340 --> 00:00:42.110
The version should match your spring‑webmvc version of 5.2.7.RELEASE.

8
00:00:42.110 --> 00:00:47.450
And click Save on that or OK,

9
00:00:47.450 --> 00:00:54.240
depending on if you're on a Windows machine or an OS X or Linux box,

10
00:00:54.240 --> 00:00:58.940
and that will automatically download that JAR for you.

11
00:00:58.940 --> 00:01:02.540
We're going to add one more dependency inside of here.

12
00:01:02.540 --> 00:01:10.370
We can click the Add button again and give it a group ID of mysql and an

13
00:01:10.370 --> 00:01:22.610
artifact ID of mysql‑connector‑java and a version of 6.0.5.

14
00:01:22.610 --> 00:01:26.840
Click OK.

15
00:01:26.840 --> 00:01:30.640
Both of those resources should now be downloaded automatically for you,

16
00:01:30.640 --> 00:01:33.130
and you can double check that by looking at your Maven

17
00:01:33.130 --> 00:01:39.750
Dependencies and see that we have the connectors and JDBC

18
00:01:39.750 --> 00:01:43.640
pieces inside of our application.

19
00:01:43.640 --> 00:01:47.510
It will take it a minute to download if you haven't looked at yours yet.

20
00:01:47.510 --> 00:01:49.310
That's why it's always a good idea to check this.

21
00:01:49.310 --> 00:01:53.120
And so now we have all of those features inside of our dependencies.

22
00:01:53.120 --> 00:01:58.440
We can now begin configuring the XML to talk to our database.

23
00:01:58.440 --> 00:02:04.550
I'm going to close the pom.xml file and even minimize the Maven Dependencies

24
00:02:04.550 --> 00:02:10.640
portion and open up the src/main/resources jdbc‑config file.

25
00:02:10.640 --> 00:02:15.250
I'm going to create two XML beans inside of here.

26
00:02:15.250 --> 00:02:17.280
I'm going to make this full screen so you can see it a little bit

27
00:02:17.280 --> 00:02:21.510
better. And it's a lot of typing. You can grab yours out of the

28
00:02:21.510 --> 00:02:27.920
XML section inside of the exercise files or out of GitHub, or you

29
00:02:27.920 --> 00:02:29.640
can type it in as well.

30
00:02:29.640 --> 00:02:33.940
I'm going to type it in and and explain to you what these two beans are.

31
00:02:33.940 --> 00:02:39.440
The first bean is a dataSource, and that's what ties us to our

32
00:02:39.440 --> 00:02:44.040
DriverManagerDataSource or our database connection.

33
00:02:44.040 --> 00:02:46.740
They're kind of synonymous for one another.

34
00:02:46.740 --> 00:02:51.830
We give an ID of dataSource and the class is case sensitive,

35
00:02:51.830 --> 00:02:58.420
org.springframework.jdbc.datasource.DriverManagerDataSource. And it

36
00:02:58.420 --> 00:03:01.030
has four properties inside of there, the class name of

37
00:03:01.030 --> 00:03:06.020
com.mysql.jdbc.driver, the URL to our database.

38
00:03:06.020 --> 00:03:10.790
If you look at the end of that URL, localhost:3306/ride_tracker,

39
00:03:10.790 --> 00:03:16.740
that is the schema we created in the previous demo.

40
00:03:16.740 --> 00:03:22.880
It has a username and password of root and password. And then on to the second

41
00:03:22.880 --> 00:03:26.700
bean. It's called jdbcTemplate, and this is the bean we're going to inject in

42
00:03:26.700 --> 00:03:29.810
our code and use inside of our code from here on out.

43
00:03:29.810 --> 00:03:33.690
And it has a property by name of dataSource where we

44
00:03:33.690 --> 00:03:35.840
pass in the reference of dataSource.

45
00:03:35.840 --> 00:03:39.370
That is the dataSource we just created just up above here.

46
00:03:39.370 --> 00:03:44.040
So, those two beans reference one another.

47
00:03:44.040 --> 00:03:48.140
Let's walk through our application though and finally run a test.

48
00:03:48.140 --> 00:03:52.840
We can exit out of full screen mode on our jdbc‑config, and when you downloaded

49
00:03:52.840 --> 00:03:55.510
the source code you had a couple of packages inside of here.

50
00:03:55.510 --> 00:03:57.050
We've already started going into them.

51
00:03:57.050 --> 00:04:03.040
We've got our controller, model, repository, and service packages.

52
00:04:03.040 --> 00:04:07.120
We start with our controller. We're going to see that we have our

53
00:04:07.120 --> 00:04:10.060
RideController, and this is the entry point for our application.

54
00:04:10.060 --> 00:04:15.480
It's where our URL is going to go and hit. And this has

55
00:04:15.480 --> 00:04:22.580
injected into it a RideService, and that RideService is where

56
00:04:22.580 --> 00:04:24.530
our business logic should reside.

57
00:04:24.530 --> 00:04:26.640
So we have an interface and an implementation.

58
00:04:26.640 --> 00:04:30.930
Let's open up the implementation, and you'll also see inside of here that

59
00:04:30.930 --> 00:04:34.520
there is a repository that gets injected inside of here.

60
00:04:34.520 --> 00:04:39.340
If we open up our repository, we're going to see the same thing,

61
00:04:39.340 --> 00:04:45.530
the interface and the implementation. And inside of our implementation, this

62
00:04:45.530 --> 00:04:49.960
is where we will put the SQL to interact with our database, but we can start

63
00:04:49.960 --> 00:04:53.520
by injecting that template that we just created.

64
00:04:53.520 --> 00:04:58.840
So I'm going to add an @Autowired private JdbcTemplate,

65
00:04:58.840 --> 00:05:03.750
Jdbc camelCase'd template object inside of here. And I'll save

66
00:05:03.750 --> 00:05:06.240
this, we're not going to use this just yet,

67
00:05:06.240 --> 00:05:07.930
but it's set up to talk to our database.

68
00:05:07.930 --> 00:05:12.010
We literally just need to start writing our JdbcTemplate queries

69
00:05:12.010 --> 00:05:14.250
here, and that's what we're going to do in the next module, but

70
00:05:14.250 --> 00:05:16.080
let's run a unit test against this.

71
00:05:16.080 --> 00:05:18.480
So, everything's up and running here.

72
00:05:18.480 --> 00:05:23.140
We can make sure our server is started, and mine is up and running,

73
00:05:23.140 --> 00:05:29.260
and we can go to our src/test/java RestControllerTest, and if we

74
00:05:29.260 --> 00:05:34.130
right‑click on this and say Run As, JUnit Test,

75
00:05:34.130 --> 00:05:38.090
which should be one of your options, you can see that it will go

76
00:05:38.090 --> 00:05:41.300
through and run and it executes and comes back to the screen and

77
00:05:41.300 --> 00:05:43.090
the Ride name: Corner Canyon is there,

78
00:05:43.090 --> 00:05:46.980
which is exactly what's being returned from our ride repository.

79
00:05:46.980 --> 00:05:48.810
So we just did a bunch of stuff there.

80
00:05:48.810 --> 00:05:50.580
Let's look at that really quick.

81
00:05:50.580 --> 00:05:52.940
Let's kind of recap what we've gone over.

82
00:05:52.940 --> 00:06:01.340
So, we started off by adding some dependencies to our POM and we had our

83
00:06:01.340 --> 00:06:06.040
Spring JDBC dependency, as well as our MySQL connector.

84
00:06:06.040 --> 00:06:10.440
From there, we went to our jdbc‑config and added a

85
00:06:10.440 --> 00:06:14.340
dataSource and our jdbcTemplate beans.

86
00:06:14.340 --> 00:06:18.040
We walked through our controller, which has the RideService autowired into

87
00:06:18.040 --> 00:06:23.030
it, the service, which has the repository wired into it, and then we added

88
00:06:23.030 --> 00:06:27.640
our JdbcTemplate to our rideRepository as well.

89
00:06:27.640 --> 00:06:30.650
And then we went ahead and executed our unit test, and that went

90
00:06:30.650 --> 00:06:33.470
through all of the tiers of our application,

91
00:06:33.470 --> 00:06:38.690
it went clear through our web service and our web front end, clear to the

92
00:06:38.690 --> 00:06:43.230
back end and back out to our unit test and made that roundtrip. Successful

93
00:06:43.230 --> 00:06:52.000
roundtrip, whether it was localhost or hosted on a remote server, we actually made that complete roundtrip lifecycle.

