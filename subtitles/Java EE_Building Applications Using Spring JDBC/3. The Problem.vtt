WEBVTT
1
00:00:00.000 --> 00:00:03.906
What problem is Spring JDBC trying to solve?

2
00:00:03.906 --> 00:00:09.551
Whenever I'm going to introduce another framework or tool into my code base,

3
00:00:09.551 --> 00:00:13.301
I want to look and see what this is actually buying me.

4
00:00:13.301 --> 00:00:18.301
These are the big questions I ask, what is it trying to solve for me?

5
00:00:18.301 --> 00:00:22.015
Well Spring JDBC fixes quite a few problems over standard JDBC and is

6
00:00:22.015 --> 00:00:25.301
simpler to work with than an ORM like Hibernate and JPA.

7
00:00:25.301 --> 00:00:30.301
The biggest thing it fixes, and for me this is reason enough to use it,

8
00:00:30.301 --> 00:00:34.158
is the reduced complexity of my code base.

9
00:00:34.158 --> 00:00:39.301
Spring JDBC code is much simpler than standard JDBC.

10
00:00:39.301 --> 00:00:42.301
And although not a full featured ORM like Hibernate,

11
00:00:42.301 --> 00:00:46.701
it still encourages the use of object oriented programming in its design.

12
00:00:46.701 --> 00:00:49.968
Since it's written using the Spring framework,

13
00:00:49.968 --> 00:00:53.368
configuration information is injected into our application,

14
00:00:53.368 --> 00:00:56.034
making our application more portable.

15
00:00:56.034 --> 00:01:03.248
And overall I like the simplicity it brings and allows you to focus on the

16
00:01:03.248 --> 00:01:13.000
business needs and not the extraneous code of closing and opening connections or dealing with various JDBC problems.

