1
00:00:01,740 --> 00:00:05,450
To get started downloading the project from GitHub,

2
00:00:05,450 --> 00:00:10,640
I've gone ahead and navigated in my browser to github.com.

3
00:00:10,640 --> 00:00:13,810
In the previous slide I gave you a shortened URL,

4
00:00:13,810 --> 00:00:16,720
and this is the place that it resides at,

5
00:00:16,720 --> 00:00:21,330
github.com/bh5k/ride_tracker.

6
00:00:21,330 --> 00:00:23,790
Now,

7
00:00:23,790 --> 00:00:27,060
you will want to go ahead and fork this to your own

8
00:00:27,060 --> 00:00:29,930
repository so you can track your changes with it,

9
00:00:29,930 --> 00:00:33,040
and then from there go ahead and clone it.

10
00:00:33,040 --> 00:00:41,010
So I'm going to grab the clone URL and I'm going to go ahead and go

11
00:00:41,010 --> 00:00:47,790
to the GitHub client and add a new repository.

12
00:00:47,790 --> 00:00:51,680
Now because I have this synced over to my repository,

13
00:00:51,680 --> 00:00:54,600
it's here available for me to already clone.

14
00:00:54,600 --> 00:00:57,940
If you don't, you're going to have to go ahead and enter the URL.

15
00:00:57,940 --> 00:01:03,640
So I'm going to click ride_tracker and I'm going to tell us

16
00:01:03,640 --> 00:01:06,100
the directory that I want this to go to.

17
00:01:06,100 --> 00:01:10,740
I like to put my projects under C:\dev\workspace,

18
00:01:10,740 --> 00:01:15,440
so I'm going to navigate to that,

19
00:01:15,440 --> 00:01:21,280
and I'm going to go ahead and click OK. Now it has

20
00:01:21,280 --> 00:01:24,740
my project all synced in there.

21
00:01:24,740 --> 00:01:34,070
We can minimize this, and now I can open up the Spring STS instance. As this

22
00:01:34,070 --> 00:01:38,040
loads, it's going to ask us for that C:\dev\workspace again.

23
00:01:38,040 --> 00:01:44,150
And now when I come in my project, it will go ahead and be able

24
00:01:44,150 --> 00:01:47,440
to import that project from my file system.

25
00:01:47,440 --> 00:01:49,740
There's a bunch of different ways you can do this.

26
00:01:49,740 --> 00:01:55,200
I like using the external source tool for GitHub that shows

27
00:01:55,200 --> 00:01:57,050
you the changes that you have in there.

28
00:01:57,050 --> 00:02:01,680
You can do this directly from inside of Spring STS, but I can now go

29
00:02:01,680 --> 00:02:07,340
ahead and say Import, Existing Project into Workspace through Maven,

30
00:02:07,340 --> 00:02:13,710
so an existing Maven project, and it will ask us for the root

31
00:02:13,710 --> 00:02:21,940
directory. We're going to look for our C:\dev\workspace\ride_tracker,

32
00:02:21,940 --> 00:02:26,010
and we'll see that it finds our POM and asks us if we want to go ahead

33
00:02:26,010 --> 00:02:26,890
and import that.

34
00:02:26,890 --> 00:02:31,860
We'll click Yes. As this goes through, yours may take a minute

35
00:02:31,860 --> 00:02:35,370
the very first time it does this because it will have to download

36
00:02:35,370 --> 00:02:41,260
some libraries and things that your Maven library and repository

37
00:02:41,260 --> 00:02:43,240
hasn't been updated with.

38
00:02:43,240 --> 00:02:46,710
But once you have this set up, you should have a src/main/java

39
00:02:46,710 --> 00:02:49,790
directory, src/main/resources directory,

40
00:02:49,790 --> 00:02:55,790
a src/test/java directory, as well as a src/main/webapp and

41
00:02:55,790 --> 00:03:00,370
WEB‑INF directory for configurations. From here, we can go

42
00:03:00,370 --> 00:03:04,000
ahead and create our server. Now,

43
00:03:04,000 --> 00:03:08,550
all of this I have covered in previous courses in my Spring MVC course

44
00:03:08,550 --> 00:03:12,120
and Spring Fundamentals course, so I'm not going through all the step

45
00:03:12,120 --> 00:03:15,500
by step of it because you should be familiar with that at this point in

46
00:03:15,500 --> 00:03:20,500
this course. Let's go ahead and add a new server, and I'm going to

47
00:03:20,500 --> 00:03:23,740
choose a Tomcat 8 Server,

48
00:03:23,740 --> 00:03:32,430
click Next, and add my ride_tracker application to this and click Finish.

49
00:03:32,430 --> 00:03:39,930
From this point, our application should be ready to be deployed and ran. I

50
00:03:39,930 --> 00:03:44,440
can go ahead and click the Start server button.

51
00:03:44,440 --> 00:03:47,490
We can verify that everything inside of here looks good.

52
00:03:47,490 --> 00:03:50,940
I'm going to make this full screen for a minute to see. I don't see any

53
00:03:50,940 --> 00:03:55,960
errors in here, so it looks like it's deployed correctly. And I have

54
00:03:55,960 --> 00:04:04,660
created a small test under src/test/java for this RestController. Inside of

55
00:04:04,660 --> 00:04:08,910
here, this just does a basic call that's currently not connected to our

56
00:04:08,910 --> 00:04:17,240
database to verify that our localhost is returning a get on our

57
00:04:17,240 --> 00:04:21,340
RidesController. So it's going to go through and pull this back and pull

58
00:04:21,340 --> 00:04:23,760
back any rides we have, and right now I just have some hard coded

59
00:04:23,760 --> 00:04:25,340
information inside of here.

60
00:04:25,340 --> 00:04:27,890
So let's go ahead and run this as a unit test.

61
00:04:27,890 --> 00:04:33,520
We can just right‑click on it and say Run As and JUnit Test should

62
00:04:33,520 --> 00:04:36,340
be one of the options that comes up for you.

63
00:04:36,340 --> 00:04:38,040
Once I do this,

64
00:04:38,040 --> 00:04:41,680
you'll go through and see that it's loading up this runtime JAR the first

65
00:04:41,680 --> 00:04:48,340
time, and our output should come back green just as it did.

66
00:04:48,340 --> 00:04:52,320
If this is the first time you've ran your application and it times out for

67
00:04:52,320 --> 00:04:56,560
whatever reason, you may need to run this unit test again because it does

68
00:04:56,560 --> 00:05:02,030
have a timeout built in there of 1 full second. And my console will show that

69
00:05:02,030 --> 00:05:04,840
it returned the ride named Corner Canyon.

70
00:05:04,840 --> 00:05:09,360
We'll dive into what this functionality is, but our application is

71
00:05:09,360 --> 00:05:14,900
now downloaded from GitHub, imported into our local Git repo, and

72
00:05:14,900 --> 00:05:19,900
imported into our application as a Maven project now. So everything

73
00:05:19,900 --> 00:05:21,530
should be configured here.

74
00:05:21,530 --> 00:05:25,160
Now let's set up our database and get things tied to this so we

75
00:05:25,160 --> 00:05:35,000
can start building out our connection pool, as well as our first instances of our create statements.

