1
00:00:01,140 --> 00:00:04,710
We are now to a point where we can modify our

2
00:00:04,710 --> 00:00:09,040
RideRepository to utilize Spring JdbcTemplate.

3
00:00:09,040 --> 00:00:12,310
Let's start off by giving ourselves a little whitespace, and I'm

4
00:00:12,310 --> 00:00:15,670
going to leave that return null down below because we're going to

5
00:00:15,670 --> 00:00:19,540
change that out later with a select statement.

6
00:00:19,540 --> 00:00:22,840
I'm always caught off guard a little bit by Spring JdbcTemplate

7
00:00:22,840 --> 00:00:28,490
in that we use the update method to insert,

8
00:00:28,490 --> 00:00:30,710
update, and delete records.

9
00:00:30,710 --> 00:00:36,190
The only thing we don't utilize it for is reading records back.

10
00:00:36,190 --> 00:00:40,450
So we're going to go ahead and create some basic SQL inside of here

11
00:00:40,450 --> 00:00:47,290
and say insert into ride, and we're going to pass in name and

12
00:00:47,290 --> 00:01:01,540
duration, and then we'll say values ?,?, and this uses the standard

13
00:01:01,540 --> 00:01:06,030
prepared statement approach of substituting in values into those

14
00:01:06,030 --> 00:01:08,240
question mark fields.

15
00:01:08,240 --> 00:01:17,950
And we'll pass in var args here by saying , ride.getName and ,

16
00:01:17,950 --> 00:01:24,970
ride.getDuration, and now we've actually created everything that we

17
00:01:24,970 --> 00:01:29,290
need to to insert a record into our database.

18
00:01:29,290 --> 00:01:33,520
If our SQL is all correct and our object gets populated correctly,

19
00:01:33,520 --> 00:01:36,950
everything is here to insert that record into our database.

20
00:01:36,950 --> 00:01:41,830
Let's go ahead and test that now. I'm going to save this code, I'm going to

21
00:01:41,830 --> 00:01:48,940
exit full screen. Make sure your server is started up.

22
00:01:48,940 --> 00:01:50,460
Once that's up and running,

23
00:01:50,460 --> 00:01:56,030
I'm going to go ahead and go to my RestControllerTest and we'll

24
00:01:56,030 --> 00:02:01,340
right‑click on that createRide method, Run as, Unit Test.

25
00:02:01,340 --> 00:02:07,970
Once this completes, we come back with our green bar, we should

26
00:02:07,970 --> 00:02:12,660
have a record into our database. Now we can test that by going to

27
00:02:12,660 --> 00:02:22,360
our MySQL Workbench and saying select * from Ride and execute that,

28
00:02:22,360 --> 00:02:27,040
and we should see that we have the Bobsled Trail Ride in there with

29
00:02:27,040 --> 00:02:29,340
a duration of 35.

30
00:02:29,340 --> 00:02:31,060
If you want to test that again,

31
00:02:31,060 --> 00:02:34,660
we can go back to our IDE, go into that unit test and

32
00:02:34,660 --> 00:02:36,680
change this name to something else.

33
00:02:36,680 --> 00:02:44,140
So we'll say the Willow Trail Ride, and it was a duration of 30,

34
00:02:44,140 --> 00:02:48,440
save that. We can right‑click on that test,

35
00:02:48,440 --> 00:02:50,940
Run As, Unit Test.

36
00:02:50,940 --> 00:02:54,830
Once that's finished running, we can go back to our database,

37
00:02:54,830 --> 00:02:58,480
execute that statement again, and you will see that Willow

38
00:02:58,480 --> 00:03:02,140
Trail Ride with a duration of 30 is in there.

39
00:03:02,140 --> 00:03:05,980
Now if your IDs don't look exactly the same as mine, that's because it's an

40
00:03:05,980 --> 00:03:09,970
auto‑incrementing field and if you've ran it a few times and deleted a few

41
00:03:09,970 --> 00:03:14,400
records, that auto‑incrementing field will continue to increase regardless of

42
00:03:14,400 --> 00:03:16,040
whether you've deleted those rows out.

43
00:03:16,040 --> 00:03:20,950
So, on mine you'll see that the Willow Trail Ride has an ID of 4, and

44
00:03:20,950 --> 00:03:24,440
that's just because I ran this a couple of times testing it.

45
00:03:24,440 --> 00:03:32,600
So, now you have an end‑to‑end example of our code that will call our database.

46
00:03:32,600 --> 00:03:37,800
Really from beginning to end we have our unit test here that calls the

47
00:03:37,800 --> 00:03:42,420
RestTemplate and does a put with an object of the Willow Trail Ride with a

48
00:03:42,420 --> 00:03:46,470
duration of 30 that goes through our controller and our service tier and our

49
00:03:46,470 --> 00:03:55,040
repository until it finally gets to our createRide method where we then pass in

50
00:03:55,040 --> 00:04:01,990
our values into this prepared statement using the Spring JdbcTemplate of insert

51
00:04:01,990 --> 00:04:06,920
into ride, name, duration, these two values, and this is just using var arg

52
00:04:06,920 --> 00:04:13,940
syntax to say ride.getName and ride.getDuration, and it inserts those in there.

53
00:04:13,940 --> 00:04:16,200
Very slick, very clean,

54
00:04:16,200 --> 00:04:23,040
very succinct code. I am going to show you how to use the simple JdbcTemplate,

55
00:04:23,040 --> 00:04:28,460
but I will tell you up front that this is the approach I like to use.

56
00:04:28,460 --> 00:04:32,450
This is the smallest amount of code and it feels like you're just in the

57
00:04:32,450 --> 00:04:35,700
database and you can get done exactly what you need to.

58
00:04:35,700 --> 00:04:38,590
The other approach does feel a little bit more like an

59
00:04:38,590 --> 00:04:48,000
ORM and maybe that's appealing to you, but this is my default and my first choice when I'm doing this type of work.

