WEBVTT
1
00:00:01.540 --> 00:00:05.160
To simulate exception handling inside of our application,

2
00:00:05.160 --> 00:00:11.540
I'm going to first open up our test and scroll to the bottom and

3
00:00:11.540 --> 00:00:17.950
copy the testDelete method and paste it below that.

4
00:00:17.950 --> 00:00:24.410
I'm going to change the name of it to testException and we'll

5
00:00:24.410 --> 00:00:32.550
call a getForObject on it with a URL of test.

6
00:00:32.550 --> 00:00:37.700
And it's going to want a return type of Ride.class,

7
00:00:37.700 --> 00:00:41.120
which we don't really care about because it's always

8
00:00:41.120 --> 00:00:44.840
going to just throw an exception.

9
00:00:44.840 --> 00:00:46.580
So this is what our method looks like.

10
00:00:46.580 --> 00:00:53.740
To call this, let's go ahead and define that test URL inside of our application.

11
00:00:53.740 --> 00:01:00.840
Now if I open up my src/main/java RightController,

12
00:01:00.840 --> 00:01:04.540
I'm going to do something quite similar to what we just did there.

13
00:01:04.540 --> 00:01:11.040
I'm going to grab this batch method that we had created

14
00:01:11.040 --> 00:01:13.410
and copy and paste that down below.

15
00:01:13.410 --> 00:01:15.900
And I did the batch method because it's the closest

16
00:01:15.900 --> 00:01:17.790
to what we're trying to do here.

17
00:01:17.790 --> 00:01:21.340
So I'm going to change the value of that to test,

18
00:01:21.340 --> 00:01:25.560
and for the ResponseBody object we can leave that,

19
00:01:25.560 --> 00:01:29.030
the name, I'm just going to leave it test as well,

20
00:01:29.030 --> 00:01:40.440
and then inside of here I'm going to throw a new DataAccessException,

21
00:01:40.440 --> 00:01:43.990
and it takes a string for the constructor.

22
00:01:43.990 --> 00:01:49.260
So we'll say Testing exception thrown.

23
00:01:49.260 --> 00:01:52.240
We'll save this.

24
00:01:52.240 --> 00:01:56.440
Now let's go ahead and run this and see what happens.

25
00:01:56.440 --> 00:02:01.760
So if I start my server up, make sure there's no errors upon startup,

26
00:02:01.760 --> 00:02:02.980
and everything looks fine there,

27
00:02:02.980 --> 00:02:06.940
I'm going to go back to the test method that we created

28
00:02:06.940 --> 00:02:11.650
and right‑click on it and say Run As, JUnit Test,

29
00:02:11.650 --> 00:02:16.760
it should come back and give me a stack trace saying that it failed.

30
00:02:16.760 --> 00:02:21.140
And this is the exact response we were expecting to get,

31
00:02:21.140 --> 00:02:26.660
an ugly error with a stack trace that was propagated clear back to our client.

32
00:02:26.660 --> 00:02:30.600
Let's see how we can make that a little bit better of an experience for them.

33
00:02:30.600 --> 00:02:32.750
Now I will say there are lots of ways you can

34
00:02:32.750 --> 00:02:37.620
deliver messages back to the end user, and we're not going to cover all of them,

35
00:02:37.620 --> 00:02:42.010
we're just going to show you one good way using the exception

36
00:02:42.010 --> 00:02:46.040
handling mechanism to give them a better error message.

37
00:02:46.040 --> 00:02:50.240
So let's right‑click on src/main/java and say New,

38
00:02:50.240 --> 00:02:58.240
Package, and we're going to put in here com.pluralsight.util and click Finish.

39
00:02:58.240 --> 00:03:03.440
We're going to click on that newly created package and create a class.

40
00:03:03.440 --> 00:03:09.340
I'm going to call this class ServiceError. I'll click Finish.

41
00:03:09.340 --> 00:03:11.110
And this is a very simple class.

42
00:03:11.110 --> 00:03:15.930
We're going to have two field member variables inside of here

43
00:03:15.930 --> 00:03:26.940
called private int code and private String message.

44
00:03:26.940 --> 00:03:29.760
We're going to do two things inside of here.

45
00:03:29.760 --> 00:03:30.270
First,

46
00:03:30.270 --> 00:03:36.300
let's right‑click on these and say Source, Generate Getters and

47
00:03:36.300 --> 00:03:40.330
Setters, and make sure you have both of them selected, code and

48
00:03:40.330 --> 00:03:46.170
message, and click OK. And then the second thing we're going to do is

49
00:03:46.170 --> 00:03:49.540
create some constructors inside of here.

50
00:03:49.540 --> 00:03:59.500
So we want to go ahead and say public ServiceError, and we'll just create

51
00:03:59.500 --> 00:04:03.050
a default no arguments constructor, and then the second one we'll do is

52
00:04:03.050 --> 00:04:13.430
public ServiceError that takes an int code and a String message and

53
00:04:13.430 --> 00:04:20.840
assigns those to our two member variables. So we'll say this.code = code

54
00:04:20.840 --> 00:04:26.340
and this.message = message.

55
00:04:26.340 --> 00:04:30.940
We'll save those. And I'm going to right‑click and say Source,

56
00:04:30.940 --> 00:04:35.480
Format, and it should clean up that for us, as well as a

57
00:04:35.480 --> 00:04:41.740
Source, Sort members, and click OK.

58
00:04:41.740 --> 00:04:46.340
Now this looks like what we're expecting to see inside of our application.

59
00:04:46.340 --> 00:04:51.680
We can go ahead and go back to our controller, and at the bottom

60
00:04:51.680 --> 00:04:54.900
of our application inside of our controller,

61
00:04:54.900 --> 00:04:56.870
let's add an exception handler here.

62
00:04:56.870 --> 00:05:03.680
So we'll say @ExceptionHandler, and this is an exception

63
00:05:03.680 --> 00:05:12.640
handler for any RuntimeException that is thrown.

64
00:05:12.640 --> 00:05:16.670
Now we can generate the body of the method that we

65
00:05:16.670 --> 00:05:18.170
want to to handle these responses.

66
00:05:18.170 --> 00:05:25.620
So we'll say public ResponseEntity, and this class uses

67
00:05:25.620 --> 00:05:28.950
generics, so we're going to pass in a ServiceError,

68
00:05:28.950 --> 00:05:38.510
the service error that we just created, and we want to say handle and

69
00:05:38.510 --> 00:05:45.730
pass in the RuntimeException that we are handling, and give that a

70
00:05:45.730 --> 00:05:49.320
variable name of ex. Now that we've got the body,

71
00:05:49.320 --> 00:05:59.740
let's put the meat of this exception handler in here. We'll say ServiceError.

72
00:05:59.740 --> 00:06:05.650
And this is just the instance that we're creating to pass back to that end user.

73
00:06:05.650 --> 00:06:15.360
So we'll say ServiceError = new ServiceError. And, you may have different

74
00:06:15.360 --> 00:06:19.990
types of errors that you pass back to your user. For our sample, we're

75
00:06:19.990 --> 00:06:24.820
just going to pass back the OK value. You could have some specific ones

76
00:06:24.820 --> 00:06:28.670
coded to your application, but that's really outside the scope of what

77
00:06:28.670 --> 00:06:30.640
we're doing for this example.

78
00:06:30.640 --> 00:06:41.140
So we're going to say OK.value, and then we're going to say ex.getMessage.

79
00:06:41.140 --> 00:06:51.640
Now we want to return that new ResponseEntity and we're going to pass back

80
00:06:51.640 --> 00:07:02.280
our error instance that we just created and an HttpStatus of ok. Now, our

81
00:07:02.280 --> 00:07:06.690
exception that gets thrown up above of our DataAccessException will get

82
00:07:06.690 --> 00:07:11.440
handled down below by our exception handler.

83
00:07:11.440 --> 00:07:12.880
Let's try this out.

84
00:07:12.880 --> 00:07:14.580
I'm going to exit full screen,

85
00:07:14.580 --> 00:07:24.040
go back to our test, and I'm going to right‑click and say Run As, JUnit Test.

86
00:07:24.040 --> 00:07:29.700
Once this runs, we'll see we have a green bar now, and in our console we

87
00:07:29.700 --> 00:07:33.500
have the error message from before in there, but now when we ran there

88
00:07:33.500 --> 00:07:37.800
is no big stack trace that's dumped out to our application. So it

89
00:07:37.800 --> 00:07:41.800
gracefully handled that message, and you can go ahead and look at the

90
00:07:41.800 --> 00:07:45.990
response body that comes back, but that's just one way we can grab those

91
00:07:45.990 --> 00:07:56.000
exceptions from our database tand pass back a more user friendly to our client.

