WEBVTT
1
00:00:02.140 --> 00:00:05.440
Spring JDBC is a framework for working with the

2
00:00:05.440 --> 00:00:09.740
standard JDBC API that Java provides.

3
00:00:09.740 --> 00:00:15.140
JDBC by itself is very error prone and not really user friendly.

4
00:00:15.140 --> 00:00:17.700
Spring JDBC is also patternâ€‘based,

5
00:00:17.700 --> 00:00:21.880
relying heavily on the template method pattern where you just need to focus on

6
00:00:21.880 --> 00:00:25.840
the portions of the code that deal with the business logic.

7
00:00:25.840 --> 00:00:29.480
Spring JDBC also builds on top of Spring and its dependency

8
00:00:29.480 --> 00:00:33.660
injection libraries. Templates that we create can be injected

9
00:00:33.660 --> 00:00:36.340
into other classes very easily.

10
00:00:36.340 --> 00:00:41.340
It's also an ORM, much like Hibernate and JPA.

11
00:00:41.340 --> 00:00:45.370
Using Spring JDBC still encourages the use of an object.

12
00:00:45.370 --> 00:00:47.350
I would argue that one of the best reasons,

13
00:00:47.350 --> 00:00:47.500
though,

14
00:00:47.500 --> 00:00:51.820
for using it is that it works very well with existing database structures

15
00:00:51.820 --> 00:01:03.000
where many of the other ORM tools struggle in this regard. Let's look at some of the particular problems that Spring JDBC solves.

