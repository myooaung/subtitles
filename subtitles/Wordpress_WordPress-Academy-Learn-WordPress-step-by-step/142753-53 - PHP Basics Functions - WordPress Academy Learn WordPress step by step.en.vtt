WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.360 --> 00:00:07.855
In this video, we're going to take a look at how we can use functions in PHP.

00:00:07.855 --> 00:00:10.770
A function is basically a block of code.

00:00:10.770 --> 00:00:16.225
We assign a name to this block of code and call it Juno program, when we want to run it.

00:00:16.225 --> 00:00:20.290
It's really useful when we have the same code more than once in

00:00:20.290 --> 00:00:24.940
our program and rather than type all the code over and over again.

00:00:24.940 --> 00:00:30.965
We can place a code inside a function and call the function when it's required.

00:00:30.965 --> 00:00:36.165
PHP also has lots of built-in functions I would disposal.

00:00:36.165 --> 00:00:39.670
We've looked at one or two of these in the last few videos.

00:00:39.670 --> 00:00:42.600
We get started by creating a function,

00:00:42.600 --> 00:00:45.605
by using the function keyword,

00:00:45.605 --> 00:00:48.065
and then after that,

00:00:48.065 --> 00:00:50.420
we then give the function a name,

00:00:50.420 --> 00:00:54.244
followed by the parenthesis or the brackets,

00:00:54.244 --> 00:01:00.825
the name can be myFunction and then use the brackets after,

00:01:00.825 --> 00:01:07.470
and then the contents of the function is within a set of curly braces.

00:01:07.840 --> 00:01:14.035
Every time this function is called the code inside these curly braces will be run.

00:01:14.035 --> 00:01:20.185
For example, a basic way of given function is just a echo.

00:01:20.185 --> 00:01:30.140
My first function, on its own,

00:01:30.140 --> 00:01:33.185
this function doesn't do anything until we'll call it,

00:01:33.185 --> 00:01:37.490
and the way we call it is you simply by typing in the function name,

00:01:37.490 --> 00:01:43.260
myFunction, and then the parenthesis followed by a semicolon.

00:01:43.310 --> 00:01:46.585
Now when we run myFunction,

00:01:46.585 --> 00:01:51.770
we should get the text of my first function print it to the browser,

00:01:51.770 --> 00:01:54.110
and inside the function,

00:01:54.110 --> 00:01:57.415
we can even have different variables inside there.

00:01:57.415 --> 00:02:00.665
Just like we looked at a few videos ago,

00:02:00.665 --> 00:02:03.605
we can use a username.

00:02:03.605 --> 00:02:14.475
Username equal to Chris and the second variable of posts equal to 5,

00:02:14.475 --> 00:02:16.670
and then we can echo to the screen.

00:02:16.670 --> 00:02:18.985
Chris has five posts,

00:02:18.985 --> 00:02:23.125
echo within the quotations,

00:02:23.125 --> 00:02:32.100
the username has five posts,

00:02:33.080 --> 00:02:35.675
now when we call this function,

00:02:35.675 --> 00:02:40.120
we should get the message to the screen within the echo.

00:02:40.120 --> 00:02:43.970
Save that and then refresh the browser,

00:02:43.970 --> 00:02:46.775
and we can take functions even further,

00:02:46.775 --> 00:02:49.445
by passing in parameters.

00:02:49.445 --> 00:02:52.560
Let's create a new function,

00:02:54.050 --> 00:02:58.480
and if you want to create a function to multiply numbers.

00:03:00.190 --> 00:03:04.160
This time, instead of just leaving the brackets empty,

00:03:04.160 --> 00:03:07.690
we can pass in two parameters or even more.

00:03:07.690 --> 00:03:11.355
I'm going to use this to multiply two variables.

00:03:11.355 --> 00:03:18.700
Variable Number A and then separated by commas, variable Number B.

00:03:20.150 --> 00:03:22.340
Every time this function is called,

00:03:22.340 --> 00:03:26.870
want it to multiply the value of A with the value of B.

00:03:26.870 --> 00:03:30.845
Let's echo variable A,

00:03:30.845 --> 00:03:34.080
multiply by variable B,

00:03:34.520 --> 00:03:40.010
and then passing the numbers will call the function by its name.

00:03:40.010 --> 00:03:44.810
Multiply numbers and the two numbers

00:03:44.810 --> 00:03:48.730
that we want to multiply will compass inside these brackets.

00:03:48.730 --> 00:03:52.800
Twelve and two for example,

00:03:52.800 --> 00:03:55.265
now when we call this function,

00:03:55.265 --> 00:03:59.480
we now have the value of 12 multiplied by 2.

00:03:59.480 --> 00:04:03.100
We should get the value of 24 on the screen.

00:04:03.100 --> 00:04:11.690
Great. What we've just done is we've effectively created a variable of A and

00:04:11.690 --> 00:04:15.710
B and then needs to take up the values of 12 and

00:04:15.710 --> 00:04:21.280
2 and then multiply them together and display the results to the browser.

00:04:21.280 --> 00:04:24.480
That's how we work with functions in PHP,

00:04:24.480 --> 00:04:27.320
and it's also how we can pass parameters into

00:04:27.320 --> 00:04:30.040
functions and I'll see you in the next video,

00:04:30.040 --> 00:04:35.070
we'll take a look at conditional statements and more operators.
