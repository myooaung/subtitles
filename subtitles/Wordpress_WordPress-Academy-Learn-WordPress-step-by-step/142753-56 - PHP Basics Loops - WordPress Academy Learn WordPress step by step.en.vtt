WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.090 --> 00:00:07.515
In programming, we can use loops to make repetitive tasks much easier.

00:00:07.515 --> 00:00:12.359
For example, we can loop through all your friends' names inside a database,

00:00:12.359 --> 00:00:14.760
and then display them onto the screen.

00:00:14.760 --> 00:00:20.135
This saves type and on the same line of code over and over again for each friend.

00:00:20.135 --> 00:00:25.805
In this video, we'll be taking a look at the four types of loops we can use in PHP.

00:00:25.805 --> 00:00:29.410
We're going to begin with what's called a while loop.

00:00:29.410 --> 00:00:35.390
While loops basically run a block of code as long as a condition is true,

00:00:35.390 --> 00:00:40.500
so let's take a look at what while loop looks like in PHP.

00:00:40.500 --> 00:00:45.045
I'm going to create a variable set to be one.

00:00:45.045 --> 00:00:49.700
A while loop is set out a

00:00:49.700 --> 00:00:54.575
little bit similar to a if statements that we looked at a few videos ago.

00:00:54.575 --> 00:00:56.720
But the while keyword,

00:00:56.720 --> 00:01:00.760
the condition within the brackets to test and

00:01:00.760 --> 00:01:05.560
then the outcome to perform between the curly braces.

00:01:05.560 --> 00:01:13.725
I want to start by checking if our variable of number is less than 10.

00:01:13.725 --> 00:01:16.490
While our number is less than 10,

00:01:16.490 --> 00:01:22.405
we're going to create a echo of number,

00:01:22.405 --> 00:01:24.390
and you will just type yourself first,

00:01:24.390 --> 00:01:26.775
and then I'll explain what it's doing.

00:01:26.775 --> 00:01:31.440
It's less than 10,

00:01:31.440 --> 00:01:33.150
and we'll also need a braid second there,

00:01:33.150 --> 00:01:35.760
and you'll see why in just a moment.

00:01:35.760 --> 00:01:38.140
Then the variable number,

00:01:38.140 --> 00:01:42.320
we're going to increment with the plus plus.

00:01:43.280 --> 00:01:47.085
You may be looking at this, a wondering what is going on.

00:01:47.085 --> 00:01:49.850
Basically we're creating a loop,

00:01:49.850 --> 00:01:54.645
and we'll start to test if the number is less than 10,

00:01:54.645 --> 00:01:58.820
which it is, so in that case we're going to print out number,

00:01:58.820 --> 00:02:01.915
so it'll be number 1 is less than 10.

00:02:01.915 --> 00:02:03.940
Then once this is printed,

00:02:03.940 --> 00:02:08.315
I'm going to increment the number by using the plus plus,

00:02:08.315 --> 00:02:12.630
so this will change the value of number to number 2.

00:02:12.710 --> 00:02:18.380
Then this condition is still true because number 2 is still less than 10.

00:02:18.380 --> 00:02:21.425
Then the second time around on the loop we should get printed,

00:02:21.425 --> 00:02:24.990
number 2 is less than 10.

00:02:25.160 --> 00:02:27.915
Then again it's incremented,

00:02:27.915 --> 00:02:30.775
and then number becomes the value of 3,

00:02:30.775 --> 00:02:34.455
which again is still less than 10,

00:02:34.455 --> 00:02:37.370
so we'll get the text printed to the screen.

00:02:37.370 --> 00:02:41.630
Number 3 is less than 10, and so on.

00:02:41.630 --> 00:02:45.095
This keeps repeating until the condition is no longer true,

00:02:45.095 --> 00:02:49.085
or in our case, until we get up to the number 9.

00:02:49.085 --> 00:02:56.275
Let's change it back to 1, save, and then refresh.

00:02:56.275 --> 00:03:01.810
There we've also got number 1 all the way through to 9 to be less than 10,

00:03:01.810 --> 00:03:05.450
and that's why we needed to insert a break tag just so each

00:03:05.450 --> 00:03:09.505
one of these is on a separate line and it's more readable.

00:03:09.505 --> 00:03:14.300
The next we're going to take a look at a variance of the while loop,

00:03:14.300 --> 00:03:17.285
and this is called a do-while loop.

00:03:17.285 --> 00:03:23.470
The while loop that we just looked at will only work while a condition is true.

00:03:23.470 --> 00:03:29.150
However, the do-while loop will always run once first before checking if

00:03:29.150 --> 00:03:31.580
a condition is true,s o the code between

00:03:31.580 --> 00:03:35.575
the curly braces will always run a minimum of once.

00:03:35.575 --> 00:03:41.340
Let's take a look at how we can do a do-while loop in PHP.

00:03:41.420 --> 00:03:45.550
We start with the do keyword,

00:03:45.830 --> 00:03:48.240
and then we can just leave the brackets

00:03:48.240 --> 00:03:52.515
there because this is going to run once whatever we do.

00:03:52.515 --> 00:04:00.290
We're going to print to the screen the value of the variable number and then a break tag,

00:04:00.290 --> 00:04:02.575
so it's on its own line.

00:04:02.575 --> 00:04:07.470
This section will always run and am going to write a while,

00:04:07.470 --> 00:04:10.520
and this is the condition we are going to test against,

00:04:10.520 --> 00:04:15.810
so while number again is less than 10.

00:04:16.070 --> 00:04:19.910
Whatever we do will always get number printed to the screen,

00:04:19.910 --> 00:04:24.050
and then the loop will continue while a condition is true.

00:04:24.050 --> 00:04:26.600
Because this condition is true,

00:04:26.600 --> 00:04:30.260
we should get a loop all the way through to 9,

00:04:30.260 --> 00:04:35.280
in fact this needs to put the increments inside there,

00:04:35.520 --> 00:04:42.540
so number plus plus and save, and then refresh.

00:04:42.540 --> 00:04:46.410
We've got the values all the way through to 9.

00:04:47.000 --> 00:04:52.300
Let's see what happens if we change this to be the greater than symbol.

00:04:52.300 --> 00:04:55.465
Of course, 1 is not greater than 10,

00:04:55.465 --> 00:04:57.385
so this is false.

00:04:57.385 --> 00:05:01.090
Using a while loop, we wouldn't get anything printed at all.

00:05:01.090 --> 00:05:04.140
The do section will always run once,

00:05:04.140 --> 00:05:07.305
and then we shouldn't get anything after that.

00:05:07.305 --> 00:05:14.920
Let's test this, and we'll just get the number 1 because the loop does not repeat.

00:05:15.370 --> 00:05:19.945
There's two more types of loops we can look at in PHP,

00:05:19.945 --> 00:05:23.680
the for loop and the for each loop.

00:05:23.680 --> 00:05:26.915
Next we're going to take a look at the for loop.

00:05:26.915 --> 00:05:31.630
For loops are useful for when we know how many times we want to repeat the loop.

00:05:31.630 --> 00:05:35.455
A while loop will run until a condition is no longer true

00:05:35.455 --> 00:05:40.820
whereas a for loop we need to set how many times the loop will run.

00:05:40.820 --> 00:05:43.755
Let's take a look at the for loop.

00:05:43.755 --> 00:05:48.280
We use the for keyword and then the brackets,

00:05:48.280 --> 00:05:50.570
and of course the curly braces,

00:05:50.570 --> 00:05:52.705
just like the other loops,

00:05:52.705 --> 00:05:58.395
but this time we need to pass in three parameters into the brackets.

00:05:58.395 --> 00:06:02.780
The first volume we need to enter is the initializer,

00:06:02.780 --> 00:06:08.755
and this is effectively going to be like old variable that we used in the while loop.

00:06:08.755 --> 00:06:12.300
I'm going to set the variable once more of

00:06:12.300 --> 00:06:18.090
number and then we're going to initialize this to be 0.

00:06:18.140 --> 00:06:24.320
Then each one of these parameters need to be separated with a semicolon.

00:06:24.320 --> 00:06:29.105
The second parameter is our condition to test against,

00:06:29.105 --> 00:06:31.985
so I'm going to use the number variable.

00:06:31.985 --> 00:06:38.485
We want to test if this is less than or equal to the value of 5.

00:06:38.485 --> 00:06:41.205
Once again, the semicolon,

00:06:41.205 --> 00:06:45.990
and the third one I'm going to use for incrementing.

00:06:45.990 --> 00:06:47.930
Every time we go through the loop,

00:06:47.930 --> 00:06:54.200
we're going to increment the variable of number by one on each loop,

00:06:54.200 --> 00:06:56.830
so number plus plus.

00:06:56.830 --> 00:07:00.155
Just like the other loops between the curly braces,

00:07:00.155 --> 00:07:05.330
we're going to echo the number, so number,

00:07:05.330 --> 00:07:07.715
and then the variable number,

00:07:07.715 --> 00:07:10.550
and then the break tag,

00:07:10.550 --> 00:07:13.735
and don't forget the semicolon at the end,

00:07:13.735 --> 00:07:16.260
that's what for loop looks like.

00:07:16.260 --> 00:07:21.940
Once again, we begin by saying a initial value of 0,

00:07:21.940 --> 00:07:28.250
and every time we loop around we check in if the value is less than or equal to 5,

00:07:28.250 --> 00:07:32.300
if it is, we are going to echo the number,

00:07:32.300 --> 00:07:36.580
and also increments by one on each loop.

00:07:36.580 --> 00:07:40.695
Lets save and then refresh.

00:07:40.695 --> 00:07:42.900
Great. We've got all the values,

00:07:42.900 --> 00:07:45.480
we've got the initial value of zero,

00:07:45.480 --> 00:07:49.620
and then we loop through until we get to the value of five.

00:07:51.500 --> 00:07:57.005
The last type of loop we'll look at in this video is the for each loop,

00:07:57.005 --> 00:08:00.060
it's designed to work on arrays.

00:08:00.060 --> 00:08:04.910
In the arrays video, we looked at how to create an array and how to print

00:08:04.910 --> 00:08:11.130
a value to the browser by selecting it by its index number just like this,

00:08:12.500 --> 00:08:17.795
so we had an array name shapes,

00:08:17.795 --> 00:08:25.320
and we set that equal to an array with the values of square,

00:08:26.090 --> 00:08:33.240
circle, and also triangle.

00:08:33.410 --> 00:08:39.100
Then if we wanted to display any of these values inside the browser,

00:08:39.100 --> 00:08:43.935
we need it to echo the array of shapes,

00:08:43.935 --> 00:08:46.000
and then inside the square brackets,

00:08:46.000 --> 00:08:51.340
we need it to select the shape by its index number, so 0, 1,

00:08:51.340 --> 00:08:55.900
and 2, so triangle will be number 2,

00:08:58.700 --> 00:09:01.530
so we get the value of triangle.

00:09:01.530 --> 00:09:04.320
Create a new echo for each array item,

00:09:04.320 --> 00:09:06.315
can be a long boring task,

00:09:06.315 --> 00:09:10.180
and in programming, we should always try to avoid repetition.

00:09:10.670 --> 00:09:15.055
Let's take a look at how we can create a for each loop.

00:09:15.055 --> 00:09:20.030
We don't need this echo because we're going to do this inside the loop.

00:09:20.030 --> 00:09:24.945
Begin a for each loop with the for each keyword,

00:09:24.945 --> 00:09:31.370
and like the other loops have a set of brackets and then the curly braces.

00:09:31.550 --> 00:09:36.490
The first thing we need to do is pass in the name of the array,

00:09:36.490 --> 00:09:39.845
so that is the name of shapes.

00:09:39.845 --> 00:09:43.435
Then every time we loop through the shapes array,

00:09:43.435 --> 00:09:47.145
we need to store the values inside a new variable,

00:09:47.145 --> 00:09:52.605
so do this by declaring as and then a new variable name,

00:09:52.605 --> 00:09:55.090
so I'm going to call this value,

00:09:55.250 --> 00:09:58.960
and then let's create our echo.

00:09:59.780 --> 00:10:05.010
Because all the new values are stored into our value variable,

00:10:05.010 --> 00:10:08.040
we need to echo out the value variable,

00:10:08.040 --> 00:10:13.950
and then we'll put a break tag inside there and a semicolon,

00:10:13.950 --> 00:10:17.580
so that's how a for each loop is laid out.

00:10:17.580 --> 00:10:21.045
Every time we loop through the shapes array,

00:10:21.045 --> 00:10:25.135
we'll install these values inside a new variable,

00:10:25.135 --> 00:10:27.170
which we've called value,

00:10:27.170 --> 00:10:29.845
and also with each pass of the loop,

00:10:29.845 --> 00:10:32.950
it also moves on to the next item in the array.

00:10:32.950 --> 00:10:35.780
This means that the loop will continue to live through

00:10:35.780 --> 00:10:39.925
all the values of the array until it finds the last one.

00:10:39.925 --> 00:10:45.780
Let's say this and then refresh the browser. There we go.

00:10:45.780 --> 00:10:48.080
We've loop through the first item,

00:10:48.080 --> 00:10:51.240
the second item and the third,

00:10:53.270 --> 00:10:57.065
and that's a lot more convenient way of printing out

00:10:57.065 --> 00:11:02.075
all the values of an array rather than selecting each individual index number.

00:11:02.075 --> 00:11:08.309
I hope this video leaves you with a better understanding of how loops work in PHP.
