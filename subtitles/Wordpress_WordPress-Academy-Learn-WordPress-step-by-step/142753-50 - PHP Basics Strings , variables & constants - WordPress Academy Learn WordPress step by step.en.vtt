WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.830 --> 00:00:03.300
Welcome back. In the last video,

00:00:03.300 --> 00:00:05.910
we took a look at some PHP basics,

00:00:05.910 --> 00:00:09.000
such as echoing texts to the browser,

00:00:09.000 --> 00:00:13.470
comments, and also how to make PHP and HTML.

00:00:13.470 --> 00:00:16.050
In this video, we're going to move on to taking a look at

00:00:16.050 --> 00:00:20.530
strings, variables, and constants.

00:00:24.770 --> 00:00:31.245
I'm just going to delete the code between the PHP tags from the last section.

00:00:31.245 --> 00:00:34.605
First of all, we're going to take a look at strings.

00:00:34.605 --> 00:00:37.460
A string is a sequence of characters,

00:00:37.460 --> 00:00:39.605
such as a single letter,

00:00:39.605 --> 00:00:41.855
a word, or a sentence.

00:00:41.855 --> 00:00:44.405
A string is what we used in the last video,

00:00:44.405 --> 00:00:46.070
where we were doing a echo.

00:00:46.070 --> 00:00:49.250
We printed a string between quotations.

00:00:49.250 --> 00:00:52.650
This is a string.

00:00:52.840 --> 00:00:56.470
Don't forget the semicolon at the end.

00:00:56.470 --> 00:01:03.260
The string must be surrounded with either a single or a double quotation.

00:01:03.260 --> 00:01:06.215
They both work perfectly fine.

00:01:06.215 --> 00:01:09.955
So echo and then this time a single quotes.

00:01:09.955 --> 00:01:13.510
This is also a string.

00:01:13.820 --> 00:01:18.015
Let's take a look at that on the browser while refreshing.

00:01:18.015 --> 00:01:21.790
This is a string and this is also a string.

00:01:21.790 --> 00:01:26.580
Most of the time it doesn't matter if we use single or double quotes.

00:01:26.580 --> 00:01:29.705
The only time it really matters is if you want to

00:01:29.705 --> 00:01:33.395
surround one of these words with the quotation marks.

00:01:33.395 --> 00:01:39.860
For example, if you wanted the word string to have the quotations printed on the screen,

00:01:39.860 --> 00:01:42.530
we need to make sure that the quotations we use around

00:01:42.530 --> 00:01:46.655
the word are opposite to what is surrounding the sentence.

00:01:46.655 --> 00:01:50.000
So if we save that and then refresh,

00:01:50.000 --> 00:01:52.970
the word string has the double quotes.

00:01:52.970 --> 00:02:01.620
But if were to do this and all had the same style of quotes, save that.

00:02:01.620 --> 00:02:04.825
The text editor has picked up a issue,

00:02:04.825 --> 00:02:07.000
so it's making a different color.

00:02:07.000 --> 00:02:09.880
If we were to refresh, we see the local host page

00:02:09.880 --> 00:02:13.175
isn't working because we've got a error.

00:02:13.175 --> 00:02:18.920
But if we change this to be single quotes and

00:02:18.920 --> 00:02:24.890
then the surrounding ones back to double and then refresh.

00:02:24.890 --> 00:02:29.100
That's how we can add single and double quotes within a string.

00:02:29.100 --> 00:02:34.450
There's lots of other ways we can work with strings by using string functions.

00:02:34.450 --> 00:02:38.425
For example, if we wanted to reverse a string,

00:02:38.425 --> 00:02:40.550
I'll just use this example there.

00:02:40.550 --> 00:02:45.655
If we wanted to reverse a string,

00:02:45.655 --> 00:02:51.595
we could use the string reverse function, which is strrev().

00:02:51.595 --> 00:02:59.245
Then we need to surround the string inside the brackets and then save that.

00:02:59.245 --> 00:03:03.020
Then let's check out the browser and see what happens.

00:03:03.020 --> 00:03:06.730
That reverses all the characters inside the string.

00:03:06.730 --> 00:03:09.200
So it's now back to difference.

00:03:09.440 --> 00:03:16.345
We can also do other things such as make all the words uppercase or lowercase.

00:03:16.345 --> 00:03:18.040
To make them all uppercase,

00:03:18.040 --> 00:03:20.780
we can use the string to upper function.

00:03:20.780 --> 00:03:28.485
So strtoupper(), and then save that and then refresh,

00:03:28.485 --> 00:03:32.460
and now all the characters inside the string are uppercase.

00:03:32.460 --> 00:03:35.610
We can do the same way string to lower.

00:03:35.610 --> 00:03:42.090
So strtolower(), save and refresh.

00:03:42.090 --> 00:03:45.700
Now there's no capitals at all in the string.

00:03:45.700 --> 00:03:49.070
Of course there's many more different string functions

00:03:49.070 --> 00:03:51.725
which you can find with a quick Google.

00:03:51.725 --> 00:03:55.670
Search for PHP string functions.

00:03:55.670 --> 00:04:00.825
We are instantly taken to a list,

00:04:00.825 --> 00:04:04.965
and is either a PHP.net or W3schools,

00:04:04.965 --> 00:04:07.740
which has lots of examples.

00:04:07.740 --> 00:04:09.750
As you can see, there's quite a list.

00:04:09.750 --> 00:04:11.890
There's lots of different things we can do with

00:04:11.890 --> 00:04:16.435
strings such as split a string into an array.

00:04:16.435 --> 00:04:20.230
We can randomly shuffle all the characters in a string.

00:04:20.230 --> 00:04:22.870
We can check out the length of the string,

00:04:22.870 --> 00:04:25.640
which returns the number of characters.

00:04:25.640 --> 00:04:27.750
Have a play around with these.

00:04:27.750 --> 00:04:31.360
You may not have a need for these two functions which I've just shown you,

00:04:31.360 --> 00:04:33.790
and I'm sure if you work with PHP regularly,

00:04:33.790 --> 00:04:36.605
you'll come across many of these different functions.

00:04:36.605 --> 00:04:39.660
Next we're going to move on to variables.

00:04:39.660 --> 00:04:41.995
Like many other programming languages,

00:04:41.995 --> 00:04:47.125
PHP uses variables as containers for storing information,

00:04:47.125 --> 00:04:50.810
and the information inside these variables can change.

00:04:50.810 --> 00:04:54.770
I'm just going to delete this string.

00:04:55.370 --> 00:04:59.630
The way we declare a variable is by first using

00:04:59.630 --> 00:05:03.950
a $ sign and then assigning a variable name.

00:05:03.950 --> 00:05:07.100
For example, number one.

00:05:07.100 --> 00:05:11.300
I'm going to set the value to be equal to a string,

00:05:11.300 --> 00:05:13.355
a number, a boolean,

00:05:13.355 --> 00:05:15.500
or various other things.

00:05:15.500 --> 00:05:19.560
I'm going to set the number one to be equal to ten.

00:05:20.420 --> 00:05:25.695
When we're dealing with numbers, we don't need to put the quotations either side of it.

00:05:25.695 --> 00:05:29.360
What we're doing is create a variable with the name of number one,

00:05:29.360 --> 00:05:34.950
and we've assigned the value of ten to this number. Then we can do the same.

00:05:34.950 --> 00:05:37.440
We can create a second variable.

00:05:37.440 --> 00:05:40.055
This time I'm going to call it number two,

00:05:40.055 --> 00:05:43.525
and this time I'll set the value to be 20,

00:05:43.525 --> 00:05:47.090
and now we can use the echo that we looked at before.

00:05:47.090 --> 00:05:49.505
Instead of echoing a string,

00:05:49.505 --> 00:05:54.380
we can echo the variable name, number one.

00:05:54.380 --> 00:05:58.710
Now it just got printed to the browser the value of ten.

00:06:00.220 --> 00:06:04.270
Refresh and there's our number ten.

00:06:04.270 --> 00:06:07.650
We can also add variables together.

00:06:07.650 --> 00:06:10.355
We can echo the value of number one,

00:06:10.355 --> 00:06:14.860
plus the value of number two.

00:06:14.860 --> 00:06:18.250
We should now get 30 in the browser.

00:06:19.220 --> 00:06:23.650
We can also combine strings with variables.

00:06:24.050 --> 00:06:27.639
If I have a variable,

00:06:27.800 --> 00:06:30.765
so the number of posts,

00:06:30.765 --> 00:06:33.880
let's set that to be seven.

00:06:34.520 --> 00:06:37.680
Then we have a variable name.

00:06:37.680 --> 00:06:41.630
The variable called name assigned to a string.

00:06:41.630 --> 00:06:44.395
I'm going to call that Chris.

00:06:44.395 --> 00:06:48.995
If the user called Chris has created seven posts,

00:06:48.995 --> 00:06:51.305
we can then print this to the browser.

00:06:51.305 --> 00:06:54.770
Echo, and then because it's string,

00:06:54.770 --> 00:06:57.040
we need to put this in quotations.

00:06:57.040 --> 00:07:00.830
If we wanted to print Chris has seven posts,

00:07:00.830 --> 00:07:03.780
we could start with the variable name.

00:07:04.360 --> 00:07:07.595
Place our name, so that will be Chris,

00:07:07.595 --> 00:07:16.035
and then has, and then we want the value of posts, so put that into there.

00:07:16.035 --> 00:07:19.590
Currently it says, Chris has seven,

00:07:19.590 --> 00:07:27.575
and then posts, and then like we mentioned before we can put a HTML tag inside there.

00:07:27.575 --> 00:07:29.900
I'm just going to add a break tag into there.

00:07:29.900 --> 00:07:33.980
Let's save that, and hopefully we should get the value

00:07:33.980 --> 00:07:38.070
of Chris has seven posts which we do, so that's working fine.

00:07:38.070 --> 00:07:43.705
I mentioned that values of a variable can be changed.

00:07:43.705 --> 00:07:47.220
If we go back to our number example,

00:07:47.220 --> 00:07:55.720
so number one equal to ten and then echo number one.

00:07:57.380 --> 00:08:00.290
Now we should get the value of ten,

00:08:00.290 --> 00:08:02.560
print it to the browser.

00:08:02.560 --> 00:08:04.830
But further on down the program,

00:08:04.830 --> 00:08:07.655
if you wanted to change the value of number one,

00:08:07.655 --> 00:08:10.400
we can reassign the value.

00:08:10.400 --> 00:08:14.730
Number one, we can change that to be 20,

00:08:14.840 --> 00:08:17.450
and then when we echo number one,

00:08:17.450 --> 00:08:19.550
we should get the value of 20,

00:08:19.550 --> 00:08:23.825
print it to the browser, which we do.

00:08:23.825 --> 00:08:27.350
This is because the program is read line by line.

00:08:27.350 --> 00:08:31.220
When it gets to line 11, number one is set

00:08:31.220 --> 00:08:34.930
to the value of ten and then moves down to the next line,

00:08:34.930 --> 00:08:38.485
and then realizes that number one is now set to 20.

00:08:38.485 --> 00:08:40.010
When we echo number one,

00:08:40.010 --> 00:08:42.310
we have the value of 20.

00:08:42.310 --> 00:08:46.625
The last thing I want to look at in this video is constants.

00:08:46.625 --> 00:08:48.890
On constants, just like variables,

00:08:48.890 --> 00:08:52.865
can store some information or store a value.

00:08:52.865 --> 00:08:58.135
However, unlike variables, the value can change once it's been set.

00:08:58.135 --> 00:09:02.820
This is how you set a constant in PHP.

00:09:02.820 --> 00:09:10.415
First of all, we use the define function or the define keyword to declare a constant,

00:09:10.415 --> 00:09:13.460
and then we open up the curly brackets.

00:09:13.460 --> 00:09:16.570
Then we need to pass in two parameters.

00:09:16.570 --> 00:09:19.550
The first parameter in-between

00:09:19.550 --> 00:09:24.740
the quotations and in capital letters is the name of the constant.

00:09:24.740 --> 00:09:29.035
For example, if you wanted to store the value of your own name,

00:09:29.035 --> 00:09:31.365
we can call it name,

00:09:31.365 --> 00:09:33.855
and then separated by a comma.

00:09:33.855 --> 00:09:37.425
We add the value of the constant.

00:09:37.425 --> 00:09:39.795
This will be my name,

00:09:39.795 --> 00:09:42.780
and then a semicolon at the end.

00:09:42.780 --> 00:09:48.080
We've defined a constant with the name of NAME,

00:09:48.080 --> 00:09:51.455
and then we've added the value of Chris to this constant.

00:09:51.455 --> 00:09:55.960
We can print this to the browser in the same way as before.

00:09:55.960 --> 00:10:00.340
All we need to do is echo the name,

00:10:00.590 --> 00:10:06.300
and then we should get the value of Chris inside the browser.

00:10:06.300 --> 00:10:09.095
There we go. That's how we use strings,

00:10:09.095 --> 00:10:12.810
variables, and constants in PHP.
