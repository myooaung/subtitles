1
00:00:00,840 --> 00:00:01,680
Welcome back.

2
00:00:02,330 --> 00:00:08,630
When it comes to layout using CSS, a very important skill of a developer.

3
00:00:09,200 --> 00:00:13,400
There are probably three really good ways to do it this year.

4
00:00:14,540 --> 00:00:19,940
One is something that we've discussed and that is Flexbox.

5
00:00:20,540 --> 00:00:27,680
Another one was Bootstrap four, and we're going to learn about a new way of doing it, which is called

6
00:00:27,680 --> 00:00:29,150
CSS grid.

7
00:00:30,220 --> 00:00:33,340
And if you go for a Google image search.

8
00:00:34,140 --> 00:00:39,990
And type in something like CSS, Flexbox versus Grid, you're going to get a lot of images explaining

9
00:00:39,990 --> 00:00:43,290
what the differences are, why you would use one over the other.

10
00:00:43,290 --> 00:00:50,760
But I want to just preface the next couple of videos and let you know that there's no one versus the

11
00:00:50,760 --> 00:00:52,830
other one that wins out over the other.

12
00:00:52,830 --> 00:01:00,330
There's always a trade off, and the best way to think about these tools is as complementary tools.

13
00:01:00,330 --> 00:01:03,540
That is, they both work really, really well together.

14
00:01:03,540 --> 00:01:11,880
You don't only have to use just Flexbox or just CSS grid, ideally use them both together and I'll show

15
00:01:11,880 --> 00:01:19,140
you later on how we can use both Flexbox and CSS grid to pretty much do anything we want when it comes

16
00:01:19,140 --> 00:01:20,130
to layout.

17
00:01:20,400 --> 00:01:26,220
But just to start us off, a good way to think about Flexbox versus CSS grid.

18
00:01:27,710 --> 00:01:32,600
Is that Flexbox is really good to use if you just have one dimensional.

19
00:01:32,630 --> 00:01:38,720
Maybe you're only thinking about columns and how to do layout based on columns.

20
00:01:39,230 --> 00:01:46,430
CSS grids are really, really powerful, especially when it comes to two dimensional layouts.

21
00:01:46,430 --> 00:01:49,820
That is both columns and rows.

22
00:01:49,820 --> 00:01:56,810
So it's really, really good at, let's say, image galleries or listing out your portfolio projects

23
00:01:56,810 --> 00:01:59,090
on your own personal web page.

24
00:01:59,270 --> 00:02:00,620
And we'll get into that.

25
00:02:00,890 --> 00:02:06,350
But now you might be asking yourself, okay, isn't this what, bootstrap?

26
00:02:07,180 --> 00:02:08,229
Allows us to do.

27
00:02:09,139 --> 00:02:10,639
And you'd be right.

28
00:02:10,669 --> 00:02:16,190
Bootstrap came at a time when we didn't have Flexbox and CSS grid.

29
00:02:16,550 --> 00:02:25,610
It came at a time when we just had display and floats and positioning CSS properties that, as we saw,

30
00:02:25,610 --> 00:02:30,800
are really, really difficult to use when it comes to layouts and bootstrap.

31
00:02:30,800 --> 00:02:31,720
Solve that problem.

32
00:02:31,730 --> 00:02:36,970
It gave us this grid system that we can use within bootstrap to make really beautiful layouts.

33
00:02:36,980 --> 00:02:39,290
So that was really, really useful.

34
00:02:40,380 --> 00:02:45,060
But on your resume, if you say that, you know, bootstrapped for.

35
00:02:45,090 --> 00:02:45,990
Yeah, that's good.

36
00:02:45,990 --> 00:02:53,820
But it won't be that impressive to employers anymore, especially if you're going for a real developer

37
00:02:53,820 --> 00:03:00,300
job, which is why I haven't focused too much on Bootstrap four, because I argue that everything that

38
00:03:00,300 --> 00:03:05,400
you can do in Bootstrap four, although sometimes it's easy because it comes with their own prebuilt

39
00:03:05,400 --> 00:03:14,310
components, you can do now using Flexbox and CSS grid, and because being a good developer means not

40
00:03:14,310 --> 00:03:17,580
just learning one library, that always changes, always evolves.

41
00:03:17,580 --> 00:03:19,350
It's learning the fundamentals.

42
00:03:20,180 --> 00:03:26,990
It's more important for us to learn Flexbox and CSS grid because now if we know these two, we can create

43
00:03:26,990 --> 00:03:28,880
any sort of layouts we want.

44
00:03:29,150 --> 00:03:30,290
One last thing.

45
00:03:30,290 --> 00:03:34,490
When it comes to CSS grid, it's a new feature.

46
00:03:34,730 --> 00:03:40,760
Most Web browsers have support for it, but we do see a few reds and older versions of browsers that

47
00:03:40,760 --> 00:03:43,250
do not support CSS grid.

48
00:03:43,550 --> 00:03:50,570
When we look at Flexbox, it's a little bit better because it's older than CSS grid.

49
00:03:50,960 --> 00:03:53,300
And we've learned all about this before, right?

50
00:03:53,360 --> 00:03:59,630
Each browser has their own implementation and any new feature has to be implemented individually.

51
00:03:59,750 --> 00:04:07,190
So although CSS grid has become pretty standard across the web, if you're trying to support all the

52
00:04:07,190 --> 00:04:13,940
browsers or something like Opera Mini, then you might want to consider using floats to do layout.

53
00:04:14,180 --> 00:04:20,660
Although to be honest, most of the web is moving towards CSS Grid and Flexbox, so I just recommend

54
00:04:20,660 --> 00:04:26,990
starting to use this right away because eventually this will have really, really good support.

55
00:04:27,470 --> 00:04:28,640
But enough talk.

56
00:04:28,670 --> 00:04:34,670
I think it's time for us to learn CSS grids, to see what all the hype is about and start working on

57
00:04:34,670 --> 00:04:36,320
a fun little project.

58
00:04:36,980 --> 00:04:37,970
I'll see you in the next one.

59
00:04:38,560 --> 00:04:39,090
Bye bye.

