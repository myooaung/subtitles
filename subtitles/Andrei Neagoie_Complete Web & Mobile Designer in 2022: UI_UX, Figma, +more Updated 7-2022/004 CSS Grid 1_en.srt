1
00:00:00,540 --> 00:00:01,410
Welcome back.

2
00:00:01,680 --> 00:00:07,390
I've given you some starter files, so I recommend watching these videos as you go along as well.

3
00:00:07,410 --> 00:00:12,890
On your computer, we have a few animal carts here that are extremely cute.

4
00:00:12,900 --> 00:00:21,750
Obviously, right now if we look at what we have, we have an HTML page with just simple divs that contain

5
00:00:21,750 --> 00:00:24,240
these little emojis of animals.

6
00:00:24,240 --> 00:00:32,009
And if we go to the style tab, I've pre-filled a few things for you just so things look good, but

7
00:00:32,009 --> 00:00:39,330
all we're really doing here is we have a few colors and we've added gradients here just so it looks

8
00:00:39,330 --> 00:00:40,320
a little bit nicer.

9
00:00:40,320 --> 00:00:48,900
And we have the zones which are these individual cards with some predefined CSS properties that we've

10
00:00:48,900 --> 00:00:51,030
already seen in the previous videos.

11
00:00:51,270 --> 00:00:58,740
Just with this base CSS that we have, we see that we have some really nice looking cards and right

12
00:00:58,740 --> 00:01:01,960
now we're using display inline block.

13
00:01:01,980 --> 00:01:08,070
If I change this to display block and I save this, let's refresh.

14
00:01:08,340 --> 00:01:11,610
We see that we now have blocks.

15
00:01:12,150 --> 00:01:12,900
That's great.

16
00:01:13,500 --> 00:01:21,840
But we want a little bit more control and perhaps make this grid a little bit more responsive, maybe

17
00:01:21,840 --> 00:01:25,050
look a little bit different and just overall cleaner.

18
00:01:25,470 --> 00:01:28,440
And when it comes to grids, CSS grid is a way to go.

19
00:01:28,440 --> 00:01:29,820
So how do we use it?

20
00:01:30,330 --> 00:01:34,110
Well, the first thing we need to do is to have a container.

21
00:01:35,470 --> 00:01:37,180
Around these items.

22
00:01:37,980 --> 00:01:41,790
So I'm just going to create a new div and give it a class.

23
00:01:43,100 --> 00:01:44,510
Of container.

24
00:01:45,400 --> 00:01:47,020
We can name it whatever we want.

25
00:01:47,020 --> 00:01:48,580
But container is a nice.

26
00:01:49,830 --> 00:01:55,470
Descriptive class name and we wrap all the items in this container.

27
00:01:55,980 --> 00:02:00,990
Now, the way CSS grid works is very similar to Flexbox.

28
00:02:01,350 --> 00:02:12,810
That is, we give it the property of display grid and all the children will now be able to be part of

29
00:02:12,810 --> 00:02:14,490
this grid system.

30
00:02:14,730 --> 00:02:16,440
So let's see what that looks like.

31
00:02:16,620 --> 00:02:20,370
I'm going to have the container.

32
00:02:21,170 --> 00:02:25,730
Class and this container class will have display.

33
00:02:29,280 --> 00:02:29,830
Grid.

34
00:02:30,060 --> 00:02:33,130
So remember with Flexbox, we can do flex.

35
00:02:33,150 --> 00:02:34,140
It's similar to that.

36
00:02:34,140 --> 00:02:40,290
We do display grid and we no longer want to use the display block of the zones because we're going to

37
00:02:40,290 --> 00:02:41,370
have a grid system.

38
00:02:41,370 --> 00:02:43,340
So I'm just going to comment this out for now.

39
00:02:43,350 --> 00:02:47,910
We've just declared this as a grid system, but we actually need to tell it what to do now.

40
00:02:47,910 --> 00:02:57,390
And the most important part of CSS grid is this property grid template columns.

41
00:02:58,550 --> 00:03:03,230
And most likely you're going to be using this in all your CSS grid implementation.

42
00:03:04,120 --> 00:03:10,570
And what we can use these grid template columns is to tell our page how many columns we want to use

43
00:03:11,200 --> 00:03:11,950
in here.

44
00:03:11,950 --> 00:03:14,380
If I say something like 300 pixels.

45
00:03:15,490 --> 00:03:19,900
And 300 pixels I save and refresh your.

46
00:03:21,140 --> 00:03:21,890
Look at that.

47
00:03:22,070 --> 00:03:30,470
I have 300 pixels and then 300 pixels and automatically it because I've declared it this way with two

48
00:03:30,470 --> 00:03:39,230
definitions or two values, it assumes that we have two grids, two grids of 300 pixels and 300 pixels.

49
00:03:39,230 --> 00:03:43,490
So if I make this larger or smaller.

50
00:03:44,180 --> 00:03:47,960
It's always going to have 300 pixels, two columns.

51
00:03:52,160 --> 00:03:58,190
If I add, let's say another 300 pixels here and save refresh.

52
00:03:58,220 --> 00:03:59,030
Look at that.

53
00:04:00,030 --> 00:04:01,950
We now have three columns.

54
00:04:02,310 --> 00:04:03,870
Very, very nice.

55
00:04:03,900 --> 00:04:09,060
Another one that you'll see a lot of is the grid gap.

56
00:04:11,380 --> 00:04:16,570
And as you might guess from the name, it tells us how much gap we want between the grids.

57
00:04:16,839 --> 00:04:19,660
So if I do 20 pixels here and I refresh.

58
00:04:20,970 --> 00:04:24,060
I see that we get 20 pixels of gap.

59
00:04:24,540 --> 00:04:32,070
Now this looks really good right now, but if I change things around, this isn't really responsive

60
00:04:32,070 --> 00:04:39,900
because each column is 300 pixels wide and as we know, users have different display sizes.

61
00:04:40,200 --> 00:04:45,450
So you get these ugly grids where you have white space over here.

62
00:04:45,600 --> 00:04:48,150
How will we go about solving this?

63
00:04:49,050 --> 00:04:53,070
And you might be thinking, Hmm, what if we just do percentages here?

64
00:04:53,790 --> 00:05:02,110
What if we had four columns and we say 25%, 25%, 25%, 25%?

65
00:05:03,570 --> 00:05:05,040
If I refresh this.

66
00:05:07,990 --> 00:05:08,470
Look at that.

67
00:05:09,800 --> 00:05:13,970
I have four columns, but there's still some scrawling involved.

68
00:05:16,550 --> 00:05:20,090
Although we see that things are a little bit more responsive now.

69
00:05:23,080 --> 00:05:29,020
Now you can totally do percentages with great template columns and it's definitely a lot better than

70
00:05:29,020 --> 00:05:30,640
using something like pixels.

71
00:05:31,180 --> 00:05:37,600
But you now have to start calculating the fact that you also have a grid gap of 20 pixels and well,

72
00:05:37,600 --> 00:05:43,840
CSS grid actually gives us a really, really good tool that I recommend you use 100% of the time instead

73
00:05:43,840 --> 00:05:51,790
of percentages or pixels or M's or REMS, and that is called a F, R or a fraction.

74
00:05:53,050 --> 00:05:53,500
Now.

75
00:05:53,500 --> 00:05:55,390
What does the phrase syntax mean?

76
00:05:55,510 --> 00:05:58,210
If I do want f r here and I save.

77
00:05:58,240 --> 00:05:59,320
Now let's refresh.

78
00:06:00,870 --> 00:06:09,720
All right, I get one item F R means we have one fraction in this column, so just fill it all up.

79
00:06:10,080 --> 00:06:13,050
If I do one fr again.

80
00:06:14,340 --> 00:06:18,240
And I refresh, I get two columns, but look at this.

81
00:06:18,510 --> 00:06:28,290
As I expand and make it smaller, it automatically resizes because I'm saying I want two columns that

82
00:06:28,290 --> 00:06:30,250
are one for one and four.

83
00:06:32,870 --> 00:06:41,420
Now a better way to explain what this f r value means is if I do something like 2fr here, what do you

84
00:06:41,420 --> 00:06:42,230
think will happen?

85
00:06:43,140 --> 00:06:45,270
If I save and refresh.

86
00:06:46,390 --> 00:06:48,280
This should give you a better idea.

87
00:06:48,430 --> 00:06:51,220
All we're saying is we want three columns.

88
00:06:52,180 --> 00:07:01,990
And in terms of the proportion or the sizes, I want the first two columns to be half the size of the

89
00:07:01,990 --> 00:07:07,560
third column because in terms of fractions, this is twice as big as the other ones.

90
00:07:09,500 --> 00:07:16,170
As I make this larger and larger, it's always going to say and keep those proportions.

91
00:07:16,190 --> 00:07:19,250
This is going to be twice as large as the other ones.

92
00:07:22,640 --> 00:07:29,960
So when you using CSS grid, this is the best way for you to maintain this grid system and make sure

93
00:07:29,960 --> 00:07:31,070
that it's responsive.

94
00:07:31,710 --> 00:07:32,760
How cool is that?

95
00:07:33,290 --> 00:07:39,890
Just by writing three properties saying that we want to use the grid system, adding maybe a grid gap

96
00:07:39,890 --> 00:07:44,060
and grid template columns with these four values.

97
00:07:44,720 --> 00:07:50,960
We've made a grid system that is quite responsive, but there are a few more properties that we can

98
00:07:50,960 --> 00:07:54,320
use in CSS grid, so let's check them out in the next video.

