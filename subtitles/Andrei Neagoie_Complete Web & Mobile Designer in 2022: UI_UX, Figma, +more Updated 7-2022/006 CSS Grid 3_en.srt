1
00:00:01,490 --> 00:00:08,180
Another property that is very important when it comes to CSS grid is justify.

2
00:00:09,190 --> 00:00:09,910
Items.

3
00:00:11,130 --> 00:00:12,690
And justify items.

4
00:00:13,140 --> 00:00:16,950
And the default is right now stretch.

5
00:00:17,740 --> 00:00:20,860
So that if I refresh this, nothing's going to change.

6
00:00:21,250 --> 00:00:23,170
But if I do start.

7
00:00:24,000 --> 00:00:31,320
And refresh it aligns the contents in a grid item along what we call the row axis.

8
00:00:31,650 --> 00:00:34,950
So the row axis is each row.

9
00:00:35,310 --> 00:00:38,190
If I do end and I refresh.

10
00:00:39,160 --> 00:00:42,160
We see that there now towards the end.

11
00:00:42,890 --> 00:00:48,710
But a better way to visualize this is to actually use our developer tools.

12
00:00:48,980 --> 00:00:56,000
So if I go to view developer developer tools and we select our grid.

13
00:00:57,520 --> 00:01:02,070
You see that by clicking on this pointing icon and hovering over it?

14
00:01:02,080 --> 00:01:05,260
In Google Chrome, we actually see our grid system.

15
00:01:05,830 --> 00:01:09,340
And if I scroll, you see that it actually stays in place.

16
00:01:10,650 --> 00:01:17,040
But you see that we now have our items at the end of our grid system.

17
00:01:17,580 --> 00:01:24,650
Our last item, which is to fr right over here, is justified to the end.

18
00:01:24,990 --> 00:01:28,170
Our second column.

19
00:01:28,960 --> 00:01:30,250
Is justified to the end.

20
00:01:30,250 --> 00:01:32,160
And we see a bit of a gap here.

21
00:01:32,170 --> 00:01:41,350
And that is because remember we have one FR and then the first item because it's auto and the size is

22
00:01:41,350 --> 00:01:44,530
according to its content doesn't really move.

23
00:01:44,530 --> 00:01:46,960
Whether we have end or start here.

24
00:01:46,960 --> 00:01:55,920
It's already within the maxed space of the grid system and just like we have the axis around the row,

25
00:01:55,930 --> 00:01:58,720
if I change this to align items.

26
00:02:00,260 --> 00:02:02,210
And I save and refresh.

27
00:02:03,720 --> 00:02:04,890
This one's hard to see.

28
00:02:04,890 --> 00:02:10,229
So let's just do five or 300 pixels and refresh here.

29
00:02:11,250 --> 00:02:18,600
We see that a line item is the exact opposite, where it's around a column axis.

30
00:02:19,710 --> 00:02:26,190
And we can use start and here to move those grid boxes around.

31
00:02:26,950 --> 00:02:30,970
But most of the time we want this filled and we don't want to move items around.

32
00:02:30,970 --> 00:02:34,330
So I don't really like using those two properties.

33
00:02:34,780 --> 00:02:37,300
So let's fix that to one far.

34
00:02:38,610 --> 00:02:39,390
If I refresh.

35
00:02:39,390 --> 00:02:41,580
All right, we have things back to normal.

36
00:02:41,610 --> 00:02:42,720
I'm going to close this.

37
00:02:43,980 --> 00:02:50,280
Now, the last thing I want to show you inside of this container is my preferred method of actually

38
00:02:50,280 --> 00:02:53,400
creating a grid layout in any website that I built.

39
00:02:53,940 --> 00:02:58,980
And what I usually like to do is something new that we haven't seen before.

40
00:02:59,160 --> 00:03:03,850
I usually do repeat and define here how many rows I want.

41
00:03:03,870 --> 00:03:07,230
Let's say I want three at one FR.

42
00:03:07,230 --> 00:03:10,530
So I want everything to have the same size.

43
00:03:11,040 --> 00:03:13,380
But there's a problem here, right?

44
00:03:13,980 --> 00:03:17,460
Because right now this is stretching.

45
00:03:17,460 --> 00:03:27,570
But as soon as we make it too small or too big, it's just it's not extremely responsive or it's not

46
00:03:27,570 --> 00:03:28,990
100% responsive.

47
00:03:29,010 --> 00:03:33,690
So instead, I like using auto fill.

48
00:03:34,910 --> 00:03:37,460
And then autofill just to show you what it does.

49
00:03:37,460 --> 00:03:40,640
If I do something like 300 pixels and I refresh.

50
00:03:43,300 --> 00:03:45,190
And now I change the sizing.

51
00:03:45,280 --> 00:03:55,990
You'll see that our grid system or the column system adjusts auto fills according to the size of our

52
00:03:55,990 --> 00:03:59,170
viewport, which is really, really nice.

53
00:03:59,560 --> 00:04:02,830
But right now I just said 300 pixels.

54
00:04:03,100 --> 00:04:06,010
So again, it's not super, super responsive.

55
00:04:06,780 --> 00:04:10,890
So instead we can use something else called the min max.

56
00:04:12,690 --> 00:04:19,079
And I know this can look confusing, but if you remember this pattern, this is the most common pattern

57
00:04:19,079 --> 00:04:22,410
I would say to use when it comes to CSS grid.

58
00:04:22,440 --> 00:04:26,070
So once you get used to this, you can just copy and paste it and use it everywhere.

59
00:04:26,490 --> 00:04:33,170
And here what we want to do is say, well, the minimum that we want, the size of our columns to be,

60
00:04:33,180 --> 00:04:36,900
let's say I want the minimum to be 200 pixels.

61
00:04:36,900 --> 00:04:40,280
So that's the smallest that's going to get the max, though.

62
00:04:40,290 --> 00:04:42,810
How big do we want these to get?

63
00:04:42,930 --> 00:04:44,690
And this is a common thing.

64
00:04:44,700 --> 00:04:46,330
What do we want as the biggest?

65
00:04:46,350 --> 00:04:55,560
Well, just one fr because as we will see by doing this, it'll automatically adjust to the size of

66
00:04:55,560 --> 00:04:56,340
the viewport.

67
00:04:56,430 --> 00:04:59,700
Let me just save and show you what I mean by refresh here.

68
00:04:59,910 --> 00:05:00,360
I see.

69
00:05:00,360 --> 00:05:02,730
I have three here at auto adjusts.

70
00:05:02,730 --> 00:05:06,030
Auto adjusts based on our size.

71
00:05:06,980 --> 00:05:14,450
But you also see that the container itself is also adjusting in size so that if I go smaller and smaller

72
00:05:14,450 --> 00:05:15,500
and smaller.

73
00:05:17,540 --> 00:05:18,290
Look at that.

74
00:05:18,940 --> 00:05:23,800
As soon as we hit the 200 pixel minimum.

75
00:05:24,700 --> 00:05:30,040
It adjusts and because we said one hour as the max.

76
00:05:30,960 --> 00:05:36,300
As soon as the viewport is really, really small and goes below 200 pixels.

77
00:05:37,040 --> 00:05:40,640
It's going to just take up one fraction.

78
00:05:40,640 --> 00:05:43,670
And in our case, it will be the entire screen.

79
00:05:44,400 --> 00:05:54,090
So using this syntax of repeat autofill min max giving it a minimum, we're able to make this completely

80
00:05:54,090 --> 00:05:55,140
responsive.

81
00:05:55,410 --> 00:05:58,500
And as you can see here, it's pretty powerful, right?

82
00:06:01,370 --> 00:06:03,020
In just a few lines of code.

83
00:06:03,020 --> 00:06:06,140
We've made this grid system that is completely responsive.

84
00:06:07,470 --> 00:06:08,100
All right.

85
00:06:08,130 --> 00:06:11,550
Up to this point, we've just focused on the container.

86
00:06:11,550 --> 00:06:13,710
But what about the individual items?

87
00:06:13,830 --> 00:06:20,430
What if we want something that's maybe bigger than the other item and we don't want them all symmetrical

88
00:06:20,430 --> 00:06:21,120
like this?

89
00:06:21,510 --> 00:06:22,590
What would we do?

90
00:06:22,920 --> 00:06:24,750
Let's find out in the next video.

