WEBVTT
1
00:00:00.940 --> 00:00:03.870
[Autogenerated] similar to when we connected to rDS we won't be

2
00:00:03.870 --> 00:00:08.280
using the AWS SDK to connect to our readers cluster Instead

3
00:00:08.280 --> 00:00:10.640
we'll just connect to it directly.

4
00:00:10.640 --> 00:00:11.540
The web framework.

5
00:00:11.540 --> 00:00:15.490
Our application is built with Happy is already using an in

6
00:00:15.490 --> 00:00:18.460
memory cache for user sessions it's compose.

7
00:00:18.460 --> 00:00:21.520
Herbal nature is going to make it very easy for us to swap

8
00:00:21.520 --> 00:00:24.140
this out with our red is cache cluster.

9
00:00:24.140 --> 00:00:26.910
The library to make the reddest connection has already been

10
00:00:26.910 --> 00:00:31.020
included in the project package dot JSON file so it will be

11
00:00:31.020 --> 00:00:33.940
downloaded with an NPM install command.

12
00:00:33.940 --> 00:00:37.870
Our first step is to register read this as a cash option which

13
00:00:37.870 --> 00:00:42.620
will have our server connect to it an index dot Js look online

14
00:00:42.620 --> 00:00:45.800
seven where we create our server object.

15
00:00:45.800 --> 00:00:51.740
We will pass in a cash option here inside the object that's passed into the

16
00:00:51.740 --> 00:00:57.900
happy dot server function call at a property with the key of cache The value

17
00:00:57.900 --> 00:01:00.990
of that property will be an array with one object,

18
00:01:00.990 --> 00:01:02.540
literal value.

19
00:01:02.540 --> 00:01:06.490
This is an array because you can have more than one cache type in this

20
00:01:06.490 --> 00:01:09.460
object literal We'll start with the name property,

21
00:01:09.460 --> 00:01:13.070
which is how you'll reference this cache throughout the application.

22
00:01:13.070 --> 00:01:17.030
Call it readies next is the provider property which

23
00:01:17.030 --> 00:01:20.240
will have the value of an object, literal.

24
00:01:20.240 --> 00:01:24.280
The first property is constructor here is where we'll import the

25
00:01:24.280 --> 00:01:27.240
dependency to make the reddest connection,

26
00:01:27.240 --> 00:01:31.450
call the require function here and pass in the string at

27
00:01:31.450 --> 00:01:36.240
happy slash cat box dash readiness.

28
00:01:36.240 --> 00:01:41.240
Next is an options property with the value of another object literal.

29
00:01:41.240 --> 00:01:45.180
The first property is partition which is used by red is to

30
00:01:45.180 --> 00:01:50.830
help keep applications data separated, give it the value of cash.

31
00:01:50.830 --> 00:01:54.070
Next is the host where the reddest cache is located.

32
00:01:54.070 --> 00:01:59.120
We need to get that from our reddest cache switch back to the reddest clusters,

33
00:01:59.120 --> 00:02:03.700
list in the AWS web console and in the row entry for

34
00:02:03.700 --> 00:02:08.240
the cache cluster you created, click the expand arrow.

35
00:02:08.240 --> 00:02:12.720
The endpoint is here in the primary endpoint field copy

36
00:02:12.720 --> 00:02:16.140
everything except the colon and port at the end.

37
00:02:16.140 --> 00:02:20.540
Back in your code editor paste the endpoint URL as a string.

38
00:02:20.540 --> 00:02:25.550
Now the cash will be configured here at the start of our application Now we

39
00:02:25.550 --> 00:02:30.140
just need to use it in the plugins Js file in the util folder.

40
00:02:30.140 --> 00:02:35.380
Find line 29 here we are configuring the cash to use for our

41
00:02:35.380 --> 00:02:39.240
application we can keep the segment and expiration date.

42
00:02:39.240 --> 00:02:44.740
Just add another property with the key cash and the value readiness.

43
00:02:44.740 --> 00:02:47.340
This value corresponds with the name we gave our

44
00:02:47.340 --> 00:02:51.030
cash in index dot Js and that's it.

45
00:02:51.030 --> 00:02:52.750
We're all done with our code.

46
00:02:52.750 --> 00:02:55.560
Let's go try it out for security reasons.

47
00:02:55.560 --> 00:03:01.120
Amazon has made it difficult to access your last a cache cluster outside of AWS.

48
00:03:01.120 --> 00:03:05.400
So let's just try our app out in the cloud first.

49
00:03:05.400 --> 00:03:07.940
Let's give our at the permissions it needs to access

50
00:03:07.940 --> 00:03:12.940
Alaska cash in the I am dashboard, click on roles in the left menu,

51
00:03:12.940 --> 00:03:14.530
select the pizza ec.

52
00:03:14.530 --> 00:03:18.330
To roll click the attached policy button and then

53
00:03:18.330 --> 00:03:20.940
type it last to cash in the filter,

54
00:03:20.940 --> 00:03:24.370
select the policy titled amazon elasticache full

55
00:03:24.370 --> 00:03:28.040
access and then click attach policy.

56
00:03:28.040 --> 00:03:30.830
Now zip up your local Pizza lovers project.

57
00:03:30.830 --> 00:03:35.240
Again we're going to be deploying it with elastic beanstalk.

58
00:03:35.240 --> 00:03:40.540
Once you have your zip package, navigate to the elastic beanstalk dashboard,

59
00:03:40.540 --> 00:03:44.070
select your Pizza Lovers environment to deploy new code to your

60
00:03:44.070 --> 00:03:46.520
elastic beanstalk application environment.

61
00:03:46.520 --> 00:03:50.790
You can either upload the code as a new application version and then manually

62
00:03:50.790 --> 00:03:55.520
deploy it or use this button here that does both in one go,

63
00:03:55.520 --> 00:03:56.740
let's do that.

64
00:03:56.740 --> 00:03:58.740
Click upload and deploy,

65
00:03:58.740 --> 00:04:04.440
then click choose file and select the zip file that you just made,

66
00:04:04.440 --> 00:04:09.020
give the version label a helpful name like Pizza Alaska cache and then

67
00:04:09.020 --> 00:04:13.470
click deploy elastic beanstalk will upload the zip file,

68
00:04:13.470 --> 00:04:18.240
save it as an application version and then deploy it to this environment.

69
00:04:18.240 --> 00:04:23.630
This process will take a few minutes, so again I'm skipping ahead the video.

70
00:04:23.630 --> 00:04:27.720
If we click on the elastic beanstalk URL it will take us to Pizza

71
00:04:27.720 --> 00:04:31.640
lovers running with readiness as our cache mechanism.

72
00:04:31.640 --> 00:04:38.240
Click log in and use the same Ryan username and pass password to log in.

73
00:04:38.240 --> 00:04:41.830
Now your session is being stored in readiness if you

74
00:04:41.830 --> 00:04:43.700
really want the ultimate experience,

75
00:04:43.700 --> 00:04:51.000
you can even use the cloudfront URL instead and then you'll notice that the application is super fast

