WEBVTT
1
00:00:00.940 --> 00:00:02.900
[Autogenerated] having your web application running on a

2
00:00:02.900 --> 00:00:06.780
single ec two instance is great for the short term to make

3
00:00:06.780 --> 00:00:08.640
it accessible to the public.

4
00:00:08.640 --> 00:00:11.600
But what happens if the instance goes bad?

5
00:00:11.600 --> 00:00:15.530
Maybe it gets too many requests and slows down or you push a

6
00:00:15.530 --> 00:00:18.030
new release and you have a memory leak.

7
00:00:18.030 --> 00:00:20.680
There are innumerable ways that things could go wrong.

8
00:00:20.680 --> 00:00:24.330
So it's important to not rely on only a single

9
00:00:24.330 --> 00:00:26.840
instance running your application.

10
00:00:26.840 --> 00:00:30.390
That's where scaling your application becomes very important.

11
00:00:30.390 --> 00:00:34.000
Amazon provides several different ways to do scaling with a W.

12
00:00:34.000 --> 00:00:34.420
S.

13
00:00:34.420 --> 00:00:38.000
But we will look at a combination of technologies that will provide

14
00:00:38.000 --> 00:00:41.640
a stable and scalable base for your application.

15
00:00:41.640 --> 00:00:45.120
Remember when we chose amazon Linux as our machine image

16
00:00:45.120 --> 00:00:48.240
to install on the Ec two instance,

17
00:00:48.240 --> 00:00:51.590
wouldn't it be great if the image we installed on our instance was

18
00:00:51.590 --> 00:00:56.090
the operating system with all the software like node and our

19
00:00:56.090 --> 00:01:00.790
application just ready to go well by creating an amazon machine

20
00:01:00.790 --> 00:01:03.420
image from an existing Ec two instance.

21
00:01:03.420 --> 00:01:04.740
You can do that,

22
00:01:04.740 --> 00:01:09.430
amazon lets you essentially take a snapshot of an instance which can

23
00:01:09.430 --> 00:01:12.840
then be copied two instances whenever you want.

24
00:01:12.840 --> 00:01:17.460
You can name and manage these images easily enabling you to reproduce a

25
00:01:17.460 --> 00:01:20.960
well constructed ec two instance as much as you like.

26
00:01:20.960 --> 00:01:25.550
Of course having an image of our application instance is great but we don't

27
00:01:25.550 --> 00:01:28.680
want to monitor traffic and manually create new instances.

28
00:01:28.680 --> 00:01:29.640
Right.

29
00:01:29.640 --> 00:01:33.600
This is where auto scaling groups come in an auto scaling group

30
00:01:33.600 --> 00:01:38.420
uses a launch template and scaling rules to expand or shrink a

31
00:01:38.420 --> 00:01:40.830
pool of instances automatically.

32
00:01:40.830 --> 00:01:43.530
As long as you set your thresholds correctly,

33
00:01:43.530 --> 00:01:47.160
you can let the auto scaling group worry about creating and managing the

34
00:01:47.160 --> 00:01:50.660
instances of your application with an auto scaling group,

35
00:01:50.660 --> 00:01:52.290
adding a removing instances.

36
00:01:52.290 --> 00:01:55.070
There's one last piece of the puzzle to complete this

37
00:01:55.070 --> 00:01:57.940
application scaling masterpiece.

38
00:01:57.940 --> 00:02:03.470
How do you tell your users where to find your application instances if the I PS

39
00:02:03.470 --> 00:02:07.590
keep changing there's no way to create accurate DNS entries.

40
00:02:07.590 --> 00:02:10.080
This is where a load balancer comes into the picture.

41
00:02:10.080 --> 00:02:14.550
A load balancer is essentially a router instance that provides a stable

42
00:02:14.550 --> 00:02:19.440
endpoint to reliably send your users and set DNS entries too.

43
00:02:19.440 --> 00:02:21.610
The load balancer will keep track of which I.

44
00:02:21.610 --> 00:02:21.890
P.

45
00:02:21.890 --> 00:02:22.020
S.

46
00:02:22.020 --> 00:02:25.440
Are available and send users to them efficiently.

47
00:02:25.440 --> 00:02:28.500
The load balancer connects to an auto scaling group so they

48
00:02:28.500 --> 00:02:31.790
both work together to efficiently create groups of

49
00:02:31.790 --> 00:02:34.640
instances and route users to them.

50
00:02:34.640 --> 00:02:38.020
Now that we've gone over the key concepts and scaling with a W.

51
00:02:38.020 --> 00:02:43.000
S. Let's try it out by configuring our own scaling setup

