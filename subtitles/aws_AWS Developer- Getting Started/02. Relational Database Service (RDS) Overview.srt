1
00:00:00,940 --> 00:00:02,980
[Autogenerated] databases are a fundamental piece

2
00:00:02,980 --> 00:00:05,110
of nearly every web application.

3
00:00:05,110 --> 00:00:09,310
They are an efficient tool to store and retrieve data quickly that have been in

4
00:00:09,310 --> 00:00:13,800
use with any type of application for a long time installing and managing

5
00:00:13,800 --> 00:00:17,940
databases introduced a completely different set of considerations to the

6
00:00:17,940 --> 00:00:23,140
software development life cycle that can often be randomizing and time intensive

7
00:00:23,140 --> 00:00:26,570
updates to software performance tuning, backups,

8
00:00:26,570 --> 00:00:30,530
all of these necessities for database health require a lot of work

9
00:00:30,530 --> 00:00:33,720
and can sometimes require hiring someone completely different to a

10
00:00:33,720 --> 00:00:36,540
team just to manage this concern.

11
00:00:36,540 --> 00:00:41,440
Luckily this need is not unique and is required by enough companies that amazon

12
00:00:41,440 --> 00:00:47,100
has provided a solution relational database service allows you to easily create

13
00:00:47,100 --> 00:00:49,940
and configure relational databases running on ec.

14
00:00:49,940 --> 00:00:54,440
Two instances these database instances are managed by a W.

15
00:00:54,440 --> 00:00:57,890
S in which they handle many maintenance activities that you can

16
00:00:57,890 --> 00:01:01,710
configure some of the tasks they perform our operating system

17
00:01:01,710 --> 00:01:03,880
and minor version database upgrades,

18
00:01:03,880 --> 00:01:07,640
periodic backups and system health monitoring.

19
00:01:07,640 --> 00:01:11,240
Combined with quick creation and easy configuration RDS is the

20
00:01:11,240 --> 00:01:14,500
best solution for working with databases in AWS.

21
00:01:14,500 --> 00:01:19,150
When you create a database instance on RDS, it creates an ec two instance.

22
00:01:19,150 --> 00:01:22,270
Under the covers installing an appropriate operating

23
00:01:22,270 --> 00:01:25,230
system and database engine because of this,

24
00:01:25,230 --> 00:01:27,040
you choose the size of the ec.

25
00:01:27,040 --> 00:01:30,720
Two instance that is powering your database This turns out to be very

26
00:01:30,720 --> 00:01:34,850
important since an underpowered Ec two instance won't be able to process

27
00:01:34,850 --> 00:01:38,840
queries very well and will impact your upstream application.

28
00:01:38,840 --> 00:01:39,380
Therefore,

29
00:01:39,380 --> 00:01:43,420
think carefully when choosing the instance type that will power your database,

30
00:01:43,420 --> 00:01:47,200
you do have the option to change the instance type once the database has

31
00:01:47,200 --> 00:01:52,120
been created in response to increased load but from my experience that

32
00:01:52,120 --> 00:01:55,040
change can be a time intensive activity.

33
00:01:55,040 --> 00:01:58,960
The data inside a database is sometimes the real value of any company.

34
00:01:58,960 --> 00:02:03,470
So it's incredibly important to keep it safe, secure and available.

35
00:02:03,470 --> 00:02:07,440
There are few features that RDS provides that enable this.

36
00:02:07,440 --> 00:02:12,660
The first feature is periodic backups of your database configured by default.

37
00:02:12,660 --> 00:02:16,540
RDS will take a backup of your database daily during a

38
00:02:16,540 --> 00:02:18,840
backup window that you can choose.

39
00:02:18,840 --> 00:02:24,510
The backup can be stored from one day up to 35 and using this feature,

40
00:02:24,510 --> 00:02:27,020
you can restore your database back to a certain

41
00:02:27,020 --> 00:02:29,690
snapshot in case your data gets corrupted.

42
00:02:29,690 --> 00:02:32,500
The second feature RDS provides to make your data more

43
00:02:32,500 --> 00:02:35,430
available is multi AZ deployment.

44
00:02:35,430 --> 00:02:38,440
AZ standing for availability zone,

45
00:02:38,440 --> 00:02:43,130
if you turn multi AZ deployment on for a given database AWS

46
00:02:43,130 --> 00:02:45,600
will create a replica of your database and another

47
00:02:45,600 --> 00:02:48,240
availability zone in the same region.

48
00:02:48,240 --> 00:02:51,740
If for some reason one availability zone goes down or

49
00:02:51,740 --> 00:02:53,720
your specific database goes down.

50
00:02:53,720 --> 00:02:56,880
RDS will automatically fail over to the instance

51
00:02:56,880 --> 00:03:00,850
and the other availability zone, ensuring your database experiences.

52
00:03:00,850 --> 00:03:02,740
No downtime.

53
00:03:02,740 --> 00:03:06,690
The last feature I want to highlight with RDS is the ability to create a

54
00:03:06,690 --> 00:03:10,670
read replica of your database this is essentially a copy of your

55
00:03:10,670 --> 00:03:13,540
database that is not being used in production.

56
00:03:13,540 --> 00:03:16,590
The copying of data to this replica is done with eventual

57
00:03:16,590 --> 00:03:20,840
consistency so it won't impact the production database.

58
00:03:20,840 --> 00:03:24,800
Read replicas are perfect to let analysts and developers query

59
00:03:24,800 --> 00:03:27,840
data without impacting the customer experience.

60
00:03:27,840 --> 00:03:31,380
Read replicas are different from multi AZ deployment and that

61
00:03:31,380 --> 00:03:37,000
the read replica will never be failed over to. It is only for non production usage.

