WEBVTT
1
00:00:00.330 --> 00:00:10.070
All right, so turning back to the A.D., we are still in the main Java class here, and I want to present

2
00:00:10.080 --> 00:00:11.550
you with another scenario.

3
00:00:12.240 --> 00:00:24.570
So let's say that we want our application to allow a user to enter a first name of an employee just

4
00:00:24.570 --> 00:00:31.050
saying first name just to keep it simple to enter a first name of an employee and get the calculated

5
00:00:31.050 --> 00:00:32.910
salary for that employee.

6
00:00:32.940 --> 00:00:37.290
OK, now we're not going to actually fully implement all of that at this time.

7
00:00:37.300 --> 00:00:41.850
I don't feel like I don't think we really need to bother implementing the ability to actually type in

8
00:00:41.850 --> 00:00:42.840
their name right now.

9
00:00:44.550 --> 00:00:49.980
But let us imagine that that's the basic scenario that we are going for, right?

10
00:00:50.580 --> 00:00:56.640
Type in a first name, get the the calculated salary for that particular employee.

11
00:00:57.360 --> 00:01:03.210
So let us first consider how we could do this with the knowledge that you currently have.

12
00:01:03.270 --> 00:01:03.750
OK.

13
00:01:03.990 --> 00:01:14.820
And in fact, I think what we might even try to do here is to create a method that represents this functionality

14
00:01:14.820 --> 00:01:16.080
that I'm talking about.

15
00:01:16.110 --> 00:01:24.150
OK, so let's dust off one of the skills that we learned a while back just to kind of review a few things.

16
00:01:24.150 --> 00:01:26.280
And I think this will actually be kind of helpful.

17
00:01:26.290 --> 00:01:32.910
So what I'm thinking we will do, we will create a method that takes as an input, a string, which

18
00:01:32.910 --> 00:01:39.810
will be the first name of a potential employee of the company, and it will return an integer, which

19
00:01:39.810 --> 00:01:43.210
will be the associated salary for that user.

20
00:01:43.230 --> 00:01:43.650
OK.

21
00:01:44.280 --> 00:01:50.760
However, in order to test out this functionality, let's actually write a few unit tests, something

22
00:01:50.760 --> 00:01:52.200
that we haven't done in a while.

23
00:01:52.230 --> 00:01:52.650
OK.

24
00:01:53.010 --> 00:02:01.110
So one of the easy ways that we can do this is while we are here in the main Java class, we can tell

25
00:02:01.110 --> 00:02:08.220
the ID to go ahead and just generate a test for us, and we can do that if you'll recall with a command

26
00:02:08.220 --> 00:02:09.270
shift T.

27
00:02:10.420 --> 00:02:10.780
All right.

28
00:02:10.810 --> 00:02:15.610
And so I'm getting presented with the Create new test item here.

29
00:02:15.730 --> 00:02:19.090
Menu item here, and I'm going to hit Enter or you can click on it.

30
00:02:20.620 --> 00:02:25.500
And sure, we'll use the Unit five and we'll take the default name here.

31
00:02:28.160 --> 00:02:29.570
Default name is OK.

32
00:02:29.600 --> 00:02:31.910
Destination packages, OK?

33
00:02:31.940 --> 00:02:35.360
Everything looks pretty good to me, and I'm going to click, OK?

34
00:02:36.510 --> 00:02:37.200
All right.

35
00:02:38.280 --> 00:02:44.460
So I'm going to hold down on shift and hit return to make a new line, maybe a couple of new lines,

36
00:02:44.460 --> 00:02:50.760
in fact, and I'm going to do an at test and hit enter to get that imported, which you now see on Line

37
00:02:50.760 --> 00:02:51.330
three.

38
00:02:52.140 --> 00:02:59.130
And then a hit return again and a public void.

39
00:02:59.130 --> 00:03:02.970
Remember that test methods need to be public and void.

40
00:03:03.600 --> 00:03:04.950
And let's see.

41
00:03:04.950 --> 00:03:06.570
So we'll test a scenario.

42
00:03:06.570 --> 00:03:12.690
And honestly, now oftentimes when I create my unit test methods, initially, I don't even want to

43
00:03:12.690 --> 00:03:14.520
think a whole lot about what to call them.

44
00:03:14.700 --> 00:03:17.940
I'll often just put a placeholder name there.

45
00:03:18.150 --> 00:03:21.180
Go ahead and start kind of fleshing out what I want to test.

46
00:03:21.180 --> 00:03:27.960
And then once I'm kind of done with that, I will then come back and name my test method something meaningful.

47
00:03:28.080 --> 00:03:31.560
You don't have to do it that way, by the way, that's not something I read in the book.

48
00:03:31.770 --> 00:03:35.510
That's just what seems to work better for my head, for whatever reason.

49
00:03:35.520 --> 00:03:45.990
So for right now, I'm just going to call this maybe a test name to salary, and I'll probably come

50
00:03:45.990 --> 00:03:47.040
back and rename that.

51
00:03:48.920 --> 00:03:59.060
OK, so let's see here we are going to have an instance of the main class somewhere for now, I will

52
00:03:59.060 --> 00:04:01.550
just refer to it in this way.

53
00:04:01.680 --> 00:04:04.430
Main Main.

54
00:04:06.270 --> 00:04:09.120
Equals new main.

55
00:04:11.820 --> 00:04:20.850
OK, so I've created an instance of the main class, and then I'm going to actually want it to run because

56
00:04:21.120 --> 00:04:26.130
if we jump back over to the main class with another command shift, because command shift, you not

57
00:04:26.130 --> 00:04:31.770
only will create the test if it doesn't exist, but it also allows us to toggle back and forth between

58
00:04:31.770 --> 00:04:34.590
the test class and the system under test.

59
00:04:34.860 --> 00:04:39.600
So command shift again and I jump back over to the main class now.

60
00:04:39.930 --> 00:04:50.550
So our main method in the main class is where we're doing all of the work currently, as you see here.

61
00:04:51.030 --> 00:04:59.550
And so one of the things to keep in mind is that currently this main method is parsing this list.

62
00:04:59.550 --> 00:05:10.350
This text less this string really of employees and then populating our collection from that text list,

63
00:05:10.350 --> 00:05:10.610
right?

64
00:05:10.770 --> 00:05:16.170
So we're kind of initializing a collection of data, and I'm thinking offhand that we're going to still

65
00:05:16.170 --> 00:05:17.280
want to do that.

66
00:05:17.280 --> 00:05:21.660
So I'm sort of thinking we probably need to go ahead and just call the main method.

67
00:05:21.660 --> 00:05:28.350
And in fact, if you think about it, the way we've been testing our code thus far has been manually

68
00:05:28.710 --> 00:05:33.780
by simply running the main method, right where we're either clicking here or I'm doing a command shift

69
00:05:34.080 --> 00:05:35.220
or something like that.

70
00:05:35.400 --> 00:05:40.680
But what I'm doing is I'm running the main method now that we're about to write an automated test.

71
00:05:41.460 --> 00:05:44.130
We may still want to run that main method.

72
00:05:44.290 --> 00:05:46.500
OK, that's kind of what I'm thinking there.

73
00:05:46.980 --> 00:05:48.560
So let's see what this looks like.

74
00:05:48.570 --> 00:05:52.410
So I'm going to jump back over to the test class again with a command shift T.

75
00:05:53.400 --> 00:05:58.800
And all I need to do is type main main like that.

76
00:06:00.500 --> 00:06:06.290
Now it's giving me an error because the main method takes some inputs, and if I hover my cursor right

77
00:06:06.290 --> 00:06:15.470
here at the parentheses, it's telling me that it's expecting a an array of strings, right?

78
00:06:15.650 --> 00:06:17.840
A string array to be passed in.

79
00:06:18.860 --> 00:06:26.600
So what I can do here is I can just create one on the on the fly new string array.

80
00:06:26.870 --> 00:06:28.520
And now I need to give it a size.

81
00:06:28.520 --> 00:06:34.370
But since I don't mean to pass in a string array with any actual values in it because we don't need

82
00:06:34.370 --> 00:06:38.930
that here, I will initialize it to size zero just like that.

83
00:06:39.140 --> 00:06:43.910
OK, so I'm passing in an empty string array in this case.

84
00:06:45.190 --> 00:06:47.560
And now my errors have gone away.

85
00:06:49.360 --> 00:06:58.390
All right, now, I'm going to pretend like I have another method on this, on this class where I can

86
00:06:58.390 --> 00:07:02.570
pass in a first name of someone and then get back a salary, right?

87
00:07:02.950 --> 00:07:03.730
So.

88
00:07:04.840 --> 00:07:07.450
Let's say main dot.

89
00:07:09.650 --> 00:07:15.800
Get salary and I will pass in someone's name like.

90
00:07:19.010 --> 00:07:19.640
Wilma?

91
00:07:23.330 --> 00:07:32.060
And then I will pretend like that method, which does not yet exist, will return an integer and I will

92
00:07:32.060 --> 00:07:36.500
just capture that integer in a variable called salary for right now.

93
00:07:38.730 --> 00:07:39.120
All right.

94
00:07:39.600 --> 00:07:46.320
And now I will want to go ahead and address these, this this red mark here, forget salary because

95
00:07:46.320 --> 00:07:49.980
the aide is telling me get salary is a method that does not yet exist.

96
00:07:50.880 --> 00:07:58.860
And so I can put my cursor here and then to an option return or alt enter to have the ADP go ahead and

97
00:07:58.860 --> 00:08:01.620
create this method for me in the main class.

98
00:08:01.620 --> 00:08:04.950
So I will choose this first option create method, get salary in Maine.

99
00:08:05.280 --> 00:08:06.300
Hit return.

100
00:08:06.990 --> 00:08:07.620
There we go.

101
00:08:07.890 --> 00:08:14.100
And so now I have the boilerplate for this, and if I just hit, enter and accept the most of the options

102
00:08:14.100 --> 00:08:17.580
that it's offering me, so the return type isn't, I'm good with that.

103
00:08:17.910 --> 00:08:20.100
The input type is strong.

104
00:08:20.100 --> 00:08:20.880
I'm good with that.

105
00:08:21.150 --> 00:08:23.880
The name of that input variable, though, is Wilma.

106
00:08:23.880 --> 00:08:24.980
I don't like that.

107
00:08:24.990 --> 00:08:26.430
I will simply call it

108
00:08:29.070 --> 00:08:33.540
first name and then I'm going to hit return again.

109
00:08:33.750 --> 00:08:34.490
And there we go.

110
00:08:34.500 --> 00:08:36.530
So it's returning me a zero there.

111
00:08:37.800 --> 00:08:42.390
OK, and now the red marks have gone away back over here in the test class.

112
00:08:42.420 --> 00:08:43.050
Sorry about that.

113
00:08:43.050 --> 00:08:45.050
I jumped back over to the test class.

114
00:08:45.060 --> 00:08:46.020
Hopefully you caught that.

115
00:08:46.800 --> 00:08:47.490
All right.

116
00:08:48.300 --> 00:08:50.850
And then I need to assert something.

117
00:08:50.850 --> 00:08:57.480
If you'll recall, we don't have a valid unit test method if we aren't actually asserting anything.

118
00:08:57.480 --> 00:09:00.720
So by default, if I were to run this test right now, it would pass.

119
00:09:00.840 --> 00:09:03.350
But that pass would be meaningless, right?

120
00:09:03.360 --> 00:09:05.010
Because I'm not doing anything.

121
00:09:05.760 --> 00:09:07.810
So we need to make an actual assertion.

122
00:09:08.130 --> 00:09:12.360
OK, so I don't actually recall how much Wilma is supposed to make.

123
00:09:13.980 --> 00:09:22.440
Let me see here, actually, if I if we jump back over here to the main class and I guess we'll just

124
00:09:22.440 --> 00:09:25.800
rerun it and then we can see the output.

125
00:09:26.170 --> 00:09:27.300
Let's see.

126
00:09:27.630 --> 00:09:29.460
Uh, Wilma?

127
00:09:30.650 --> 00:09:31.040
OK.

128
00:09:31.070 --> 00:09:32.960
Let's see, so, Wilma.

129
00:09:34.740 --> 00:09:42.510
Well, it's making two thousand five hundred six, if you'll recall, this first number is the salary

130
00:09:42.510 --> 00:09:47.370
and then the second number is the bonus or whatever.

131
00:09:48.120 --> 00:09:51.090
So I guess we'll we'll take this this first bit here.

132
00:09:51.630 --> 00:09:53.430
Two thousand five hundred six.

133
00:09:53.460 --> 00:09:53.850
OK.

134
00:09:54.990 --> 00:09:58.970
And then I will do a command shift you to jump back over to the test.

135
00:09:59.020 --> 00:10:05.820
What's actually I need to be my focus needs to be up here in the in the ED and not down here in the

136
00:10:05.820 --> 00:10:06.450
output.

137
00:10:06.450 --> 00:10:11.190
So if I put my focus up here and then command shift T. Okay, cool.

138
00:10:11.220 --> 00:10:12.660
Now I can jump back over here.

139
00:10:13.170 --> 00:10:19.110
And so now I can make an assertion so I will assert equals.

140
00:10:21.310 --> 00:10:25.420
And I will assert that I'm expecting.

141
00:10:26.850 --> 00:10:35.040
Two thousand five hundred six from the salary.

142
00:10:36.180 --> 00:10:42.840
OK, so notice I'm leaving off the dollar sign and the decimal place because this is an integer.

143
00:10:43.110 --> 00:10:44.220
It's not a string.

144
00:10:44.220 --> 00:10:51.930
So dollar signs wouldn't be applicable here at this point, nor would a nor would a decimal place right?

145
00:10:53.810 --> 00:10:59.540
OK, so let's run this and see it fail, because that's how we properly do tests, right?

146
00:10:59.560 --> 00:11:01.430
We we write the test.

147
00:11:01.760 --> 00:11:07.040
And just a minimal implementation of the method to not have errors.

148
00:11:07.820 --> 00:11:11.210
Then we run the test and generally speaking, it should fail.

149
00:11:11.510 --> 00:11:14.660
Then we do the minimal thing to make it past typically.

150
00:11:15.500 --> 00:11:15.800
All right.

151
00:11:15.810 --> 00:11:18.970
So I'm going to run this test, OK?

152
00:11:19.130 --> 00:11:20.360
And it failed.

153
00:11:20.360 --> 00:11:27.140
And if I highlight this test here now, there's our output because we're running the main method.

154
00:11:27.440 --> 00:11:28.340
And that's fine.

155
00:11:28.580 --> 00:11:35.150
And then here's the so there's the output of the actual, you know, running of the main class because

156
00:11:35.150 --> 00:11:36.290
it's still going to do that.

157
00:11:36.290 --> 00:11:38.930
We're calling main method from here now.

158
00:11:39.680 --> 00:11:41.090
So that's all expected.

159
00:11:41.090 --> 00:11:46.310
But down here is the output of the actual test, you know, assertions and everything.

160
00:11:46.310 --> 00:11:48.470
So we were expecting two thousand five hundred six.

161
00:11:48.470 --> 00:11:55.820
We got back to zero because our newly created get salary method is hard coded currently to return a

162
00:11:55.820 --> 00:11:56.300
zero.

163
00:11:56.570 --> 00:12:04.430
Now, technically with TDD, what I should do at this point is to simply hard code two thousand five

164
00:12:04.430 --> 00:12:09.880
hundred six into the implementation of the get salary method and then rerun this test.

165
00:12:09.890 --> 00:12:16.070
It would pass and then go write another test similar to this one, but with a different input.

166
00:12:16.760 --> 00:12:22.520
I'm going to skip over that, but I'm stating what I should be doing here so that I remind you of how

167
00:12:22.520 --> 00:12:29.780
to do TDD and just testing in general in the official proper way.

168
00:12:29.900 --> 00:12:35.150
But for time constraints, I'm not going to go through all of that because I want to stay a little more

169
00:12:35.150 --> 00:12:37.190
focused on the main problem at hand.

170
00:12:37.760 --> 00:12:38.110
All right.

171
00:12:38.120 --> 00:12:42.680
So how do we get this number to actually work, right?

172
00:12:42.860 --> 00:12:50.300
So let's jump over here into our get salary method, and I just did a command option B to jump into

173
00:12:50.300 --> 00:12:57.250
this, by the way, or a command alt or a control alt B. All right.

174
00:12:57.260 --> 00:13:00.650
So and let's minimize this.

175
00:13:02.190 --> 00:13:08.550
OK, so how can we get this salary so if we jump up here?

176
00:13:10.700 --> 00:13:20.300
So we know that we have all of this data at our disposal and that it is contained within the employee's

177
00:13:20.300 --> 00:13:22.490
collection right here, right?

178
00:13:22.880 --> 00:13:28.280
Because here we are looping over the employees, storing it one one at a time in this worker variable

179
00:13:28.280 --> 00:13:34.130
here and then calling two string, which is printing out all of that information, the first name,

180
00:13:34.130 --> 00:13:37.820
last name and the the salary and the bonus and all of that.

181
00:13:37.820 --> 00:13:40.970
So there's all that data there, right?

182
00:13:41.900 --> 00:13:51.290
So one thing that we could conceptually do here is to iterate over this collection and look for the

183
00:13:51.290 --> 00:13:54.670
employee with the first name that we care about, right?

184
00:13:54.680 --> 00:13:57.410
Which would be whatever first name was passed into here.

185
00:13:57.800 --> 00:14:03.950
And then when we find that particular employee, then dig out their salary and return it right.

186
00:14:04.310 --> 00:14:05.810
However, we've got an issue.

187
00:14:06.470 --> 00:14:13.940
We want to do that in this method here, but this method does not have access to the employee's collection,

188
00:14:13.970 --> 00:14:14.330
right?

189
00:14:14.870 --> 00:14:21.770
How can we allow this method to access this employee's collection?

190
00:14:22.220 --> 00:14:24.230
Why don't you take a moment to think about that?

191
00:14:27.110 --> 00:14:35.030
OK, so there are maybe a couple of ways you may think about doing this one way is that you could perhaps

192
00:14:35.030 --> 00:14:41.930
change the get salary method to pass in this collection of employees, and then this method could maybe

193
00:14:41.930 --> 00:14:47.960
like iterate over the employees and look for the one with the first name and return the salary that

194
00:14:47.960 --> 00:14:48.350
way.

195
00:14:48.680 --> 00:14:52.490
However, the problem with that approach is that it's a bit convoluted.

196
00:14:52.490 --> 00:14:59.360
First off, who would need to pass in the employee's collection into this get salary method, right?

197
00:14:59.370 --> 00:15:01.100
So if we go back over to the test?

198
00:15:01.820 --> 00:15:02.840
Think of the test.

199
00:15:02.840 --> 00:15:07.720
As you know, it's kind of an outsider who's using the program.

200
00:15:07.730 --> 00:15:10.640
OK, the test itself is not part of the program.

201
00:15:10.640 --> 00:15:14.660
The test represents a user of the program, if you will.

202
00:15:14.690 --> 00:15:15.110
OK.

203
00:15:15.560 --> 00:15:17.990
It's a robot that's using the program.

204
00:15:18.950 --> 00:15:30.590
So right now, the main class has no easy way for the test to get a hold of the employees and then pass

205
00:15:30.590 --> 00:15:34.160
those employees into this get salary method call.

206
00:15:34.460 --> 00:15:40.910
OK, now we could expose that somehow, but I'm just saying right now that capability is not there.

207
00:15:42.080 --> 00:15:44.000
So but that maybe could be one way.

208
00:15:44.720 --> 00:15:49.400
I'm going to say right now, that's not my preferred way to do this at all, though I would not like

209
00:15:49.400 --> 00:15:53.630
to expose that internal collection for that purpose.

210
00:15:53.930 --> 00:15:55.730
I think it's unnecessary to do.

211
00:15:56.060 --> 00:15:56.300
All right.

212
00:15:56.310 --> 00:16:04.100
So jumping back over into the get salary method, the other way that I can think of that we could do

213
00:16:04.100 --> 00:16:13.040
this, though, might be to simply turn this employee's collection, which is being initialized right

214
00:16:13.040 --> 00:16:19.820
here on Line 43, turn this employee's collection or this variable, which is currently a local variable

215
00:16:19.820 --> 00:16:20.990
in the main method.

216
00:16:21.230 --> 00:16:29.480
Turn it into a field because by making this variable a field of the entire class, we now make this

217
00:16:29.480 --> 00:16:33.530
variable visible to all methods of the class.

218
00:16:35.570 --> 00:16:36.020
OK.

219
00:16:36.650 --> 00:16:38.300
And it's easy enough to do.

220
00:16:38.450 --> 00:16:42.080
We can simply highlight this, this variable here.

221
00:16:42.710 --> 00:16:46.100
Right click it, go down to refactor.

222
00:16:47.440 --> 00:16:50.260
And then choose Introduce Field, right?

223
00:16:50.290 --> 00:16:53.080
We've done this before, so I'm going to select that.

224
00:16:57.360 --> 00:17:05.250
And the ABC is asking us if we want to accept the default settings here, and I think that's OK.

225
00:17:05.280 --> 00:17:07.710
Let's see what we get, so I'm going to just hit return.

226
00:17:09.390 --> 00:17:10.890
OK, so notice now.

227
00:17:11.700 --> 00:17:17.850
The left hand side of what we had for this employees variable here has disappeared now.

228
00:17:17.880 --> 00:17:18.190
OK?

229
00:17:18.210 --> 00:17:23.580
Where we were specifying the data type and all of that, that's that's gone from here because we are

230
00:17:23.580 --> 00:17:28.440
no longer declaring the employees filled here on Line 46.

231
00:17:28.710 --> 00:17:33.730
It is now being declared in a field right here on Line 12.

232
00:17:33.750 --> 00:17:38.160
So basically, it just moved all of these bits up here.

233
00:17:38.250 --> 00:17:38.760
OK.

234
00:17:40.390 --> 00:17:47.410
Now, take note that this variable is static because our main method is static.

235
00:17:47.680 --> 00:17:55.420
And so by default, the IDC assumes that any variables that were being utilized in the static main method

236
00:17:55.420 --> 00:17:57.190
should continue to be static.

237
00:17:58.570 --> 00:18:04.180
Which is correct, in fact, they need they have to remain static with the way that the code is currently

238
00:18:04.180 --> 00:18:04.570
written.

239
00:18:05.800 --> 00:18:13.360
But now the nice thing is that we can access this variable from all other methods of the class.

240
00:18:13.960 --> 00:18:21.550
So now if we come down here to the get salary method, let me go ahead and just write this code real

241
00:18:21.550 --> 00:18:22.030
quick.

242
00:18:22.480 --> 00:18:29.200
So we want to iterate over the employees pretty much the same way that we are doing here.

243
00:18:29.710 --> 00:18:30.970
Pretty much the same thing.

244
00:18:33.250 --> 00:18:35.320
So let's see what we'll get here.

245
00:18:40.290 --> 00:18:49.800
For AI employee employee, now we're using the enhanced for loop, right?

246
00:18:50.010 --> 00:18:56.580
So we're we specify the data type of the the data, type of the objects inside of the collection that

247
00:18:56.580 --> 00:19:03.720
we want to iterate over, followed by a colon and then the name of the collection that we want to iterate,

248
00:19:03.720 --> 00:19:09.270
which is employees just like so and so just note.

249
00:19:10.860 --> 00:19:16.800
Again, if it wasn't 100 percent clear, we could not have access this employee's variable inside of

250
00:19:16.800 --> 00:19:24.300
this method without first extracting this method or converting this method into a field of the entire

251
00:19:24.300 --> 00:19:24.790
class.

252
00:19:24.810 --> 00:19:25.070
OK.

253
00:19:25.110 --> 00:19:29.460
And so that's why we extracted this out into a field so that it would be visible.

254
00:19:29.460 --> 00:19:33.660
This variable employees would be visible to all methods of the class.

255
00:19:35.470 --> 00:19:35.950
All right.

256
00:19:37.850 --> 00:19:47.210
Now also recall that because we're currently referring to the employees with the type I employee, that

257
00:19:47.210 --> 00:19:52.880
method only exposes the salary and not the name.

258
00:19:53.210 --> 00:20:01.640
We are going to need access to the name, so we're going to have to cast this employee to two another

259
00:20:01.640 --> 00:20:04.460
data type that exposes the actual names on it.

260
00:20:04.460 --> 00:20:10.760
So the names are there, but we won't be able to see them underneath this employee interface.

261
00:20:10.760 --> 00:20:11.810
That's the problem, right?

262
00:20:12.020 --> 00:20:19.940
So we need to recast the employee variable to something of another data type, and that data type will

263
00:20:19.940 --> 00:20:22.520
be just the capital employee, right?

264
00:20:22.910 --> 00:20:30.620
So what I will do here is put my cursor right here and just create another variable of type employee

265
00:20:30.620 --> 00:20:37.560
with a capital E. And I'll just call this MP equals, and now I'm going to cast and to cast.

266
00:20:37.580 --> 00:20:39.140
I just use parentheses.

267
00:20:39.710 --> 00:20:42.140
Employee like that.

268
00:20:43.190 --> 00:20:46.400
And then I refer to the variable I'm casting.

269
00:20:46.760 --> 00:20:56.450
So we're telling Java to take this variable, which is of type I employee, which it does have the name

270
00:20:56.450 --> 00:21:03.710
data in it, but it can't be seen underneath the mask, if you will, of of this interface, I employee.

271
00:21:04.280 --> 00:21:13.250
And we're telling Java to recast this variable to look like an actual employee, and we can do that

272
00:21:13.250 --> 00:21:15.070
because it is an actual employee.

273
00:21:15.090 --> 00:21:20.870
We you can't just you can't just cast any variable type to any other variable type.

274
00:21:20.870 --> 00:21:31.190
Of course, we can do this because in truth, this really is a variable that is both an I employee as

275
00:21:31.190 --> 00:21:32.990
well as an employee, right?

276
00:21:32.990 --> 00:21:38.780
Because of the interface that it's implementing, as well as the actual sub or as well as the actual

277
00:21:38.780 --> 00:21:41.750
superclass that it is a type of.

278
00:21:41.780 --> 00:21:45.980
OK, so that's why we can we can do this, this casting in this case.

279
00:21:47.030 --> 00:21:47.360
OK.

280
00:21:47.370 --> 00:21:54.030
And so the new the new requested employee will be referred to simply with the name ENP.

281
00:21:54.440 --> 00:21:54.830
OK.

282
00:21:56.330 --> 00:21:56.810
All right.

283
00:21:57.080 --> 00:22:08.390
And then maybe we want to say something like if first equals MP Typekit first name,

284
00:22:13.220 --> 00:22:16.390
then maybe just return.

285
00:22:17.200 --> 00:22:19.850
MP does get salary.

286
00:22:22.660 --> 00:22:23.430
How about that?

287
00:22:26.020 --> 00:22:26.360
All right.

288
00:22:26.380 --> 00:22:33.130
So we can just go ahead and try this real quick, and actually I still have my test window open right

289
00:22:33.160 --> 00:22:41.530
here, so I could just rerun this test right here if you, for whatever reason, happened to completely

290
00:22:41.560 --> 00:22:42.970
have closed this, though.

291
00:22:44.370 --> 00:22:47.690
You could also just jump back over to the test with a command shift.

292
00:22:48.450 --> 00:22:52.200
And then rerun the test right there as well, either way.

293
00:22:52.620 --> 00:22:54.750
So I'm going to rerun this now.

294
00:22:55.820 --> 00:22:57.230
And let's see what we end up with.

295
00:22:59.200 --> 00:23:00.130
Hey, there we go.

296
00:23:00.340 --> 00:23:01.570
And now it passes.

297
00:23:02.110 --> 00:23:07.390
OK, so that works, right, that that works just fine.

298
00:23:07.840 --> 00:23:09.820
Now let me tell you this.

299
00:23:10.240 --> 00:23:11.110
Don't do this.

300
00:23:11.440 --> 00:23:14.470
This is maybe not the greatest, right?

301
00:23:15.010 --> 00:23:21.410
So let's let's talk about why this is not why this is maybe not the best way to to do this.

302
00:23:21.430 --> 00:23:26.200
So what we're doing is we're simply saying, Hey, here's in fact here, let me jump up here.

303
00:23:26.500 --> 00:23:31.810
So what we're doing is we're saying, here's a list of all these employees and all these employees have

304
00:23:31.810 --> 00:23:34.270
an association with a salary, right?

305
00:23:34.720 --> 00:23:40.720
And for any given employee by their first name, I want to grab their salary, right?

306
00:23:41.020 --> 00:23:48.310
And the way we're doing it now is just to methodically iterate through this list of employees and say,

307
00:23:48.310 --> 00:23:49.990
Are you for it or are you?

308
00:23:50.350 --> 00:23:51.250
Who are we looking for?

309
00:23:51.460 --> 00:23:52.300
Are you, Wilma?

310
00:23:52.300 --> 00:23:53.080
Are you, Wilma?

311
00:23:53.090 --> 00:23:53.800
Are you, Wilma?

312
00:23:53.800 --> 00:23:54.460
Are you, Wilma?

313
00:23:54.470 --> 00:24:00.310
And when we finally find Wilma, then we grab her salary and return it right?

314
00:24:00.610 --> 00:24:07.750
The problem with this approach is that it is tedious and and kind of a waste of time, really.

315
00:24:08.140 --> 00:24:16.750
What we're having to iterate over potentially potentially all of the employees, if you happen to pick

316
00:24:16.750 --> 00:24:19.540
someone who comes at the very bottom of the list, right?

317
00:24:19.540 --> 00:24:21.730
So you're having to go through this entire list.

318
00:24:22.180 --> 00:24:25.840
What if we had millions and millions of employees now granted?

319
00:24:25.840 --> 00:24:30.660
I mean, it's a computer, so it could iterate through even millions of these small records very quickly.

320
00:24:30.670 --> 00:24:37.210
However, it is still a very wasteful way of looking up this data.

321
00:24:37.900 --> 00:24:43.870
A much better way to do this might actually be in this case to utilize a map.

322
00:24:45.190 --> 00:24:54.700
And so what we could do instead is to populate a map of this association of the first name of an employee

323
00:24:54.700 --> 00:24:55.750
to their salary.

324
00:24:55.750 --> 00:25:00.190
So you'd end up with this list, but it would be a list of of key value pairs.

325
00:25:00.790 --> 00:25:01.210
OK.

326
00:25:01.390 --> 00:25:08.140
And then you can ask the map to give you the salary for the given key of the first name, and the map

327
00:25:08.140 --> 00:25:12.340
doesn't need to iterate through this whole entire list.

328
00:25:12.550 --> 00:25:18.520
It's actually really, really fast, especially if we use the hash map, right, because it will create

329
00:25:18.520 --> 00:25:21.220
a hash for each key.

330
00:25:21.910 --> 00:25:29.650
And then when we supply it with a name, it will regenerate that hash for the inputted name that we've

331
00:25:29.650 --> 00:25:30.160
given it.

332
00:25:30.490 --> 00:25:35.140
Find out what index that's at and then just jump straight to that index and give us the value.

333
00:25:35.170 --> 00:25:37.150
OK, so that's what a hash map can do.

334
00:25:37.180 --> 00:25:40.540
So let's go ahead and do that in the next lesson.

335
00:25:40.660 --> 00:25:41.440
I'll see you there.
