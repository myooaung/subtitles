1
00:00:00,630 --> 00:00:08,490
All right, so now we've got this compound interest calculator code written, and it is doing what it

2
00:00:08,490 --> 00:00:13,530
needs to do more or less, it's giving us the correct answer now that we fixed it.

3
00:00:13,830 --> 00:00:16,520
However, the answer's a little unwieldy.

4
00:00:16,530 --> 00:00:21,470
We would never want to see a number like that, nor would we ever want to present a number like that,

5
00:00:21,690 --> 00:00:23,970
especially when we're talking about money.

6
00:00:24,000 --> 00:00:27,600
We wouldn't want to present that to anyone using our code, you know.

7
00:00:27,660 --> 00:00:33,090
So now let's learn how we can format this so that it looks like actual money.

8
00:00:33,420 --> 00:00:39,240
And I'm in North America, so I'm going to particularly want to see this formatted in the way that we

9
00:00:39,240 --> 00:00:42,690
typically present sums of money when written out.

10
00:00:42,810 --> 00:00:51,240
So Java has some really nice, convenient ways to do this type of formatting very easily.

11
00:00:51,420 --> 00:00:55,800
And so I'm going to show you a few ways that we could do this.

12
00:00:55,980 --> 00:01:03,240
So there is a class in Java called no format, and this class is almost like magic.

13
00:01:03,540 --> 00:01:10,110
Not only can it format our numbers for us, in this case, it can format numbers according to all of

14
00:01:10,110 --> 00:01:17,160
the rules of how numbers and money and things like that are typically shown in different countries or

15
00:01:17,160 --> 00:01:18,630
regions of the world.

16
00:01:19,020 --> 00:01:25,800
So we'll start off with the most simple way to use this, though, so we'll create a number format,

17
00:01:26,100 --> 00:01:29,790
and that's what it's called here under the Java Dot text package.

18
00:01:29,940 --> 00:01:36,390
And I just hit return so that it would get imported properly, and we're going to make a format that

19
00:01:36,390 --> 00:01:37,950
can format for money.

20
00:01:37,960 --> 00:01:40,800
So I'm going to call, I'm going to create a variable here.

21
00:01:41,090 --> 00:01:43,440
I'm going to call it money form matter.

22
00:01:45,240 --> 00:01:52,920
And now to create an instance of this, I'm not going to use the new operator and instead I'm going

23
00:01:52,920 --> 00:01:56,070
to use one of its static methods.

24
00:01:56,070 --> 00:02:06,390
So to do that, I will refer to number format dot and then I can call the get currency instance because

25
00:02:06,390 --> 00:02:13,710
what I want to format here is money or currency, so I can get currency instance just like that.

26
00:02:14,130 --> 00:02:20,490
And now I can simply use this money format or down here where where I'm printing.

27
00:02:20,490 --> 00:02:24,300
I could use it in a few different ways, but I'll start with the simplest way.

28
00:02:24,300 --> 00:02:25,290
I think so.

29
00:02:25,290 --> 00:02:28,590
Money form, matter, dot format.

30
00:02:28,980 --> 00:02:33,930
And then I can just pass in the big decimal here.

31
00:02:34,380 --> 00:02:34,740
All right.

32
00:02:34,860 --> 00:02:39,030
And so that's actually going to be calling this format method.

33
00:02:39,150 --> 00:02:43,110
There are many overloaded versions of this dot format method here.

34
00:02:43,110 --> 00:02:50,430
As you can see, there's one that takes along a double and an object, a few additional parameters as

35
00:02:50,430 --> 00:02:50,820
well.

36
00:02:51,000 --> 00:02:55,650
So this one that we're using right now is the one that just takes an object, which means it's simply

37
00:02:55,650 --> 00:02:59,420
going to call the two string method, which is what we're getting down here.

38
00:02:59,430 --> 00:03:00,060
All of that.

39
00:03:00,390 --> 00:03:00,800
OK.

40
00:03:01,140 --> 00:03:03,330
So let's see what we get now.

41
00:03:05,050 --> 00:03:11,920
Look at that perfect for North America, at least thirty six thousand seventy five and 81 cents.

42
00:03:12,580 --> 00:03:17,710
Now there's so much that you can do with this right now.

43
00:03:17,710 --> 00:03:25,360
When I call the get currency instance, what's happening is this method is first determining what Cal

44
00:03:25,360 --> 00:03:27,730
or what part of the world I'm in.

45
00:03:27,760 --> 00:03:30,610
Or rather, what part of the world my computer is in.

46
00:03:31,120 --> 00:03:35,320
And it's determining that I am in America, essentially.

47
00:03:35,860 --> 00:03:43,750
And it knows that in America, we format our money typically in groupings of three with two decimal

48
00:03:43,750 --> 00:03:47,470
places and with a leading dollar sign symbol.

49
00:03:48,190 --> 00:03:56,530
And so what this get currency instance method did was to return an instance of a no form matter that

50
00:03:56,530 --> 00:04:03,100
is configured to format numbers exactly the way that I need them in North America.

51
00:04:03,550 --> 00:04:11,950
And so if I ran this exact same code on a computer in, let's say, Japan, this is not what I would

52
00:04:11,950 --> 00:04:12,610
have gotten.

53
00:04:12,610 --> 00:04:18,970
I would have gotten the formatting that is most prevalent in Japan with a yen symbol, presumably.

54
00:04:19,450 --> 00:04:27,430
However, I can actually take charge a little bit and actually specify a local or a part of the world

55
00:04:27,790 --> 00:04:30,430
that I want to get a currency instance for.

56
00:04:30,580 --> 00:04:35,350
And I can do that by simply passing any local right here as an input.

57
00:04:36,160 --> 00:04:37,600
So this takes a look.

58
00:04:37,600 --> 00:04:38,440
How so?

59
00:04:39,100 --> 00:04:46,930
To do this, I can type all look uppercase, local and there are actually a whole lot of predefined

60
00:04:46,930 --> 00:04:48,580
locales right here.

61
00:04:48,850 --> 00:04:50,170
Now, I don't have to use these.

62
00:04:50,170 --> 00:04:55,450
I could specify what makes up these things on my own, but why would I want to do that?

63
00:04:55,480 --> 00:04:57,310
I'm a programmer who wants to be lazy.

64
00:04:57,760 --> 00:04:59,830
So let's say we wanted France.

65
00:05:00,520 --> 00:05:07,090
OK, so now I'm passing in low Cal Dot France, and so if I run this again, let's see what we get now.

66
00:05:07,510 --> 00:05:14,050
OK, so now we get a space for the grouping separator because apparently that's how they do things there.

67
00:05:14,320 --> 00:05:19,810
And instead of a period for the decimal point, we get a comma because again, I guess that's what they

68
00:05:19,810 --> 00:05:23,700
do and they are on the euro.

69
00:05:23,710 --> 00:05:26,020
They don't use francs anymore, they use euros.

70
00:05:26,020 --> 00:05:28,930
And so we get the little symbol for euro.

71
00:05:28,940 --> 00:05:33,340
So thirty six thousand seventy five and eighty one.

72
00:05:34,870 --> 00:05:42,610
I don't even know how to read that in English, but thirty six thousand 75 euros and 81 euro cents,

73
00:05:42,610 --> 00:05:43,210
I guess.

74
00:05:43,570 --> 00:05:45,250
OK, let's do one more.

75
00:05:45,260 --> 00:05:47,380
Let's do I don't know.

76
00:05:47,380 --> 00:05:49,240
Let's do Japan.

77
00:05:52,310 --> 00:05:52,670
Cool.

78
00:05:52,880 --> 00:05:54,290
Thirty six thousand seventy six.

79
00:05:55,220 --> 00:06:01,610
Notice that it dropped the 81 cents here because in Japan, they use the currency called the yen.

80
00:06:01,910 --> 00:06:08,840
And there isn't a denomination of money smaller than the yen, so you can't have a point eight one.

81
00:06:09,080 --> 00:06:09,580
All right.

82
00:06:09,590 --> 00:06:19,220
So yeah, so that's definitely the quickest and easiest way to format our answers for money right now.

83
00:06:19,520 --> 00:06:23,760
There are some other interesting things that we can do with these.

84
00:06:23,780 --> 00:06:24,920
Number four matters.

85
00:06:25,100 --> 00:06:31,250
So first, I'm going to put my format back to the default for my locale here.

86
00:06:31,640 --> 00:06:34,430
Just make sure that that gets back to normal real quick.

87
00:06:35,240 --> 00:06:36,110
All right, there we are.

88
00:06:36,620 --> 00:06:48,350
Now what if I wanted to be able to specify my inputs using appropriate things like money, for example?

89
00:06:48,350 --> 00:06:53,780
So for this first input here, which is my starting balance and my annual contribution?

90
00:06:53,930 --> 00:06:57,860
What if I want to be able to specify that using this format?

91
00:06:58,250 --> 00:07:00,470
Well, I can actually do that.

92
00:07:00,620 --> 00:07:03,500
So let's see a way in which we could do that.

93
00:07:03,710 --> 00:07:10,070
Currently, this method is receiving a string for the principal and the contribution.

94
00:07:10,250 --> 00:07:11,480
Let's see where these are used.

95
00:07:11,540 --> 00:07:21,080
The principle is used just in one place here and the contribution is used in just one place as well.

96
00:07:21,090 --> 00:07:24,170
So this will hopefully be pretty easy, actually.

97
00:07:24,180 --> 00:07:26,060
Let's start with this principle.

98
00:07:26,540 --> 00:07:35,660
So what we can do is we can actually utilize the money formatter, both to format an unformed ID number

99
00:07:35,900 --> 00:07:37,070
to look like this.

100
00:07:37,340 --> 00:07:39,020
And we can also go the other way.

101
00:07:39,380 --> 00:07:46,610
We could pass in a number that looks like this and then get back an unformed ID, simple number like

102
00:07:46,610 --> 00:07:50,900
what we have here and here, so we can go either way.

103
00:07:51,290 --> 00:07:59,390
Now, when you are using these for matters, the most efficient thing to do is to only create one instance

104
00:07:59,390 --> 00:08:03,140
of the formatter and then use that instance all over the place.

105
00:08:03,350 --> 00:08:09,050
So now I have a situation where I'm using this number formatter, which is doing the right thing down

106
00:08:09,050 --> 00:08:12,110
here, but now I want to use it up here as well.

107
00:08:12,230 --> 00:08:21,050
So maybe what I want to do is first, consider converting this whole thing into a field of the class

108
00:08:21,050 --> 00:08:23,960
so that I can use it in both of these methods.

109
00:08:24,080 --> 00:08:28,820
However, keep in mind now these methods are both static.

110
00:08:28,820 --> 00:08:34,760
And so if I want to use this as a field, it will likely need to be static as well.

111
00:08:34,880 --> 00:08:42,350
So first, let's just see what options the ADP gives for converting this local variable.

112
00:08:42,380 --> 00:08:47,840
And again, I will just state that a local variable is simply a variable that we create inside of a

113
00:08:47,840 --> 00:08:53,120
method as opposed to a variable that is created outside of a method.

114
00:08:53,450 --> 00:08:54,320
Well, all right.

115
00:08:54,320 --> 00:08:56,480
So let's see what our options are here.

116
00:08:56,490 --> 00:09:05,480
Someone just right click on this and go down here to refactor and let's see, we can introduce a field.

117
00:09:06,110 --> 00:09:08,150
Let's see what happens when we do that.

118
00:09:08,960 --> 00:09:09,370
All right.

119
00:09:09,380 --> 00:09:12,050
So it asks, Where do we want to initialize this?

120
00:09:12,050 --> 00:09:13,710
We've actually done this once before.

121
00:09:13,730 --> 00:09:14,960
I don't know if you remember it.

122
00:09:15,140 --> 00:09:16,760
So where do we want to initialize it?

123
00:09:16,770 --> 00:09:20,870
So the initialization is just this bit here where we say equals blah blah blah.

124
00:09:21,290 --> 00:09:23,570
Do we want to keep doing that in this method?

125
00:09:23,810 --> 00:09:25,700
Or do we want to do that elsewhere?

126
00:09:25,710 --> 00:09:30,050
And I'm thinking we want to do that in the declaration itself.

127
00:09:30,560 --> 00:09:32,570
So let's see what that looks like.

128
00:09:32,930 --> 00:09:33,380
OK.

129
00:09:33,680 --> 00:09:35,210
And then we're going to hit enter.

130
00:09:35,750 --> 00:09:37,340
OK, now awesome.

131
00:09:37,550 --> 00:09:44,480
The I.D., which is called intelligent for a reason, was smart enough to realize that if we wanted

132
00:09:44,480 --> 00:09:55,370
to move that variable up into the class as a field and keep using it as we are, then this variable

133
00:09:55,370 --> 00:10:01,640
would have to become static because the method we're calling it from is static.

134
00:10:02,150 --> 00:10:09,380
And if this were not made static, then we'd have to create an instance of this class in order to utilize

135
00:10:09,380 --> 00:10:09,590
it.

136
00:10:09,920 --> 00:10:10,340
OK.

137
00:10:10,550 --> 00:10:14,540
So intelligence was smart enough to realize, Hey, just make that static.

138
00:10:14,690 --> 00:10:19,100
And then it brought up the whole bit here where we're initializing it as well.

139
00:10:19,760 --> 00:10:20,900
So good job there.

140
00:10:21,200 --> 00:10:21,430
All right.

141
00:10:21,440 --> 00:10:26,060
And now we can use this money formatter everywhere in the program.

142
00:10:26,690 --> 00:10:38,720
So now what we can do is we can call a different method of the money formatter or the number format

143
00:10:38,720 --> 00:10:41,240
formatter really to pass.

144
00:10:44,390 --> 00:10:52,040
Whatever we pass into this contribution field here now, now that I've done this though, I'm getting

145
00:10:52,040 --> 00:10:57,350
a squiggly line and when I hover over the squiggly line, I can see what what is the problem here?

146
00:10:57,530 --> 00:11:02,150
And so it's telling me that, OK, now you've got an unhindered exception.

147
00:11:02,360 --> 00:11:09,110
Now we haven't learned about exceptions yet, but to fix this, what you can do is put your cursor right

148
00:11:09,110 --> 00:11:11,900
after the word pass like I have done here.

149
00:11:12,350 --> 00:11:14,900
And then, well, there's a couple of ways to fix this, actually.

150
00:11:15,230 --> 00:11:18,320
You can see this little red light bulb here.

151
00:11:18,560 --> 00:11:23,090
And if you click on it, it offers to try to fix this problem for us.

152
00:11:23,240 --> 00:11:29,930
You can simply click Add Exception to Method Signature, or if you like to use only keyboard shortcuts

153
00:11:29,930 --> 00:11:34,970
like I do, the equivalent of that is to click on option return.

154
00:11:35,420 --> 00:11:41,030
And then you get the same option there, and then you can hit enter or just select this.

155
00:11:41,570 --> 00:11:44,420
OK, now we get another issue here.

156
00:11:44,840 --> 00:11:48,530
Cannot resolve constructor big decimal.

157
00:11:48,560 --> 00:11:54,230
OK, so now what's happening is that the pass method returns something of type.

158
00:11:54,440 --> 00:12:01,580
No, if I can show you that, so put my cursor here right after the period and do a control space.

159
00:12:01,790 --> 00:12:07,070
And then I just kind of move over a little bit and I can see that this pass method that's getting called

160
00:12:07,070 --> 00:12:09,860
will return something of type number.

161
00:12:09,860 --> 00:12:17,540
And this type number is not understood as one of the inputs for a big decimal.

162
00:12:17,690 --> 00:12:20,480
So we need to convert that number into something.

163
00:12:20,750 --> 00:12:26,240
And how we can do that is putting a period right here at the end of the pass call.

164
00:12:26,270 --> 00:12:33,470
So on the right side of the little parentheses which is yellow there and then period and then we can

165
00:12:33,470 --> 00:12:37,070
simply convert that to a string by calling two string.

166
00:12:37,980 --> 00:12:39,990
And now we're back to a string again.

167
00:12:41,190 --> 00:12:47,730
OK, so now let's go ahead and try this out now, I just realized I did this on the contribution field

168
00:12:47,730 --> 00:12:51,240
first instead of the principle, but no, no big deal.

169
00:12:51,420 --> 00:13:01,110
So what this will allow us to do now is to format this number as actual money and thereby making it

170
00:13:01,110 --> 00:13:02,250
a little more readable.

171
00:13:02,430 --> 00:13:06,810
Perhaps so I can put a dollar sign here and I can put a comma there.

172
00:13:06,900 --> 00:13:07,380
OK?

173
00:13:07,680 --> 00:13:13,480
And that's how we would typically, you know, specify money in in the US anyway.

174
00:13:13,830 --> 00:13:17,100
So now let's let's see what happens when we run this.

175
00:13:18,600 --> 00:13:20,400
OK, so it still works.

176
00:13:20,850 --> 00:13:22,380
So we didn't break anything there.

177
00:13:22,650 --> 00:13:25,920
So now let's do the same for the principle.

178
00:13:27,250 --> 00:13:34,600
So we'll refer to this money formatter Matterport Pass, and we will wrap this.

179
00:13:37,010 --> 00:13:39,350
Like so and then we will call to string.

180
00:13:40,370 --> 00:13:40,940
There we go.

181
00:13:42,180 --> 00:13:48,360
And so now if we come down here and we format this as well, and I'll put a comma in there.

182
00:13:49,450 --> 00:13:50,650
Now, let's run this.

183
00:13:52,520 --> 00:13:54,080
OK, very good, it still works.

184
00:13:54,320 --> 00:13:57,290
Now let's try a different number just to make sure.

185
00:13:57,380 --> 00:14:01,280
So let's do 25000.

186
00:14:02,270 --> 00:14:13,670
Three hundred and let's do an annual contribution of seven thousand five hundred dollars.

187
00:14:14,930 --> 00:14:16,250
So let's run that.

188
00:14:18,260 --> 00:14:21,830
OK, so we get one hundred sixty three thousand two hundred seventy.

189
00:14:22,160 --> 00:14:24,410
I'm going to go ahead and just assume that's correct.

190
00:14:24,420 --> 00:14:25,310
I'm sure it is.

191
00:14:25,850 --> 00:14:32,570
Now what if we don't want to specify the rate as a decimal like this and instead we just want to refer

192
00:14:32,570 --> 00:14:34,100
to it as a percentage, right?

193
00:14:34,100 --> 00:14:35,210
Like eight percent?

194
00:14:35,480 --> 00:14:36,830
Well, we can do that, too.

195
00:14:36,950 --> 00:14:41,990
So we created a money format and now we're going to need a different format or to do this because now

196
00:14:41,990 --> 00:14:43,730
we're talking about a percentage.

197
00:14:44,270 --> 00:14:50,990
So the way we can do that is let's just create another one following the same basic pattern.

198
00:14:52,040 --> 00:14:58,010
By the way, the ADC made our number formatter final by default, which just means that it should not

199
00:14:58,010 --> 00:15:00,800
be changed after it has been created.

200
00:15:00,890 --> 00:15:06,980
OK, so that's kind of like a safety mechanism to make our formatter final, not just formatter, but

201
00:15:07,160 --> 00:15:12,920
in general any variable, especially when that's going to be a field, it is strongly recommended that

202
00:15:12,920 --> 00:15:15,800
you make them final, if at all possible.

203
00:15:15,830 --> 00:15:16,150
All right.

204
00:15:16,160 --> 00:15:19,730
So we'll make another instance of a number formatter.

205
00:15:20,240 --> 00:15:28,280
This one will be a percent, for matter, though, and we'll do this get two percent instance.

206
00:15:28,280 --> 00:15:28,820
Look at that.

207
00:15:30,640 --> 00:15:31,240
There we go.

208
00:15:31,510 --> 00:15:38,930
So now we've got a number for matter for percentages and so we can use this.

209
00:15:38,950 --> 00:15:42,160
Now let's see where are all the places where this is used?

210
00:15:42,400 --> 00:15:43,120
OK, very good.

211
00:15:43,130 --> 00:15:46,180
So it's only used in one place anyway, which is right there at rate.

212
00:15:46,510 --> 00:15:50,740
So to use this now, we can do the same kind of basic thing.

213
00:15:50,740 --> 00:16:01,270
Percent Formatter Dot Pass will wrap this and then we'll do two string just like that.

214
00:16:02,140 --> 00:16:10,300
And now we can come down here and we can change this from point zero eight to simply eight percent like

215
00:16:10,300 --> 00:16:10,810
that.

216
00:16:11,110 --> 00:16:13,450
And now again, that becomes more readable.

217
00:16:14,830 --> 00:16:21,160
Oh, and looks like we're actually using the rate in more than one place, so.

218
00:16:21,550 --> 00:16:21,880
OK.

219
00:16:22,060 --> 00:16:28,240
The best thing to do here would be to grab where we're doing this correctly.

220
00:16:28,250 --> 00:16:35,890
Woops, actually, I want all of that and then to convert that into a variable, a local variable with

221
00:16:35,890 --> 00:16:43,630
a command option V and I don't know, I'll just call it rate as percent, maybe.

222
00:16:44,020 --> 00:16:47,200
And now the move this line up.

223
00:16:48,410 --> 00:16:56,060
To the very top and then this bit here, I will replace with my rate as percent.

224
00:16:57,020 --> 00:16:57,560
There we go.

225
00:16:57,830 --> 00:17:01,040
And so now I'm using it in two places, so notice what I did there.

226
00:17:01,340 --> 00:17:08,360
I could have replicated this line in two places where I'm using rate as percent.

227
00:17:08,360 --> 00:17:14,690
But one big guideline in good programming is to try not to repeat yourself.

228
00:17:14,690 --> 00:17:20,270
If there's duplication in the code, you want to try to weed it out and get rid of it.

229
00:17:20,480 --> 00:17:27,020
So rather than having this percent formatter thing here being used identically in two or more places

230
00:17:27,020 --> 00:17:33,080
in the code, it's better that I use it one time, capture the output of that and then just refer to

231
00:17:33,080 --> 00:17:35,930
that output, which is simpler in two places.

232
00:17:36,080 --> 00:17:40,580
And that way, if I needed to do any other changes, I would only need to make those changes for the

233
00:17:40,700 --> 00:17:47,330
foreign matter in one place on Line 14, rather than going to two or more places to make that same change.

234
00:17:47,360 --> 00:17:47,780
OK.

235
00:17:48,110 --> 00:17:48,410
All right.

236
00:17:48,410 --> 00:17:51,320
So now that we've done that, let's run this now.

237
00:17:53,050 --> 00:17:53,410
OK.

238
00:17:53,500 --> 00:17:53,830
Good.

239
00:17:54,070 --> 00:17:55,000
No blow ups.

240
00:17:55,390 --> 00:18:01,450
And so now we're able to specify these numbers in potentially a little bit more meaningful way that's

241
00:18:01,450 --> 00:18:08,500
more readable now in actual real life in my Java code where I'm calling a method like this.

242
00:18:08,950 --> 00:18:14,740
I probably wouldn't want to actually be passing in these formatted strings like this because they're

243
00:18:14,830 --> 00:18:16,510
highly opinionated here.

244
00:18:16,870 --> 00:18:27,430
However, if I wrote a user interface for this calculator, such as what we are seeing in the website

245
00:18:27,460 --> 00:18:35,080
itself, where we can, you know, type in numbers and things notice here that this number is mostly

246
00:18:35,080 --> 00:18:35,710
formatted.

247
00:18:35,710 --> 00:18:40,330
The only thing that isn't formatted here is that they're they're implying the dollar sign, they're

248
00:18:40,330 --> 00:18:46,360
giving you the dollar sign there, but it is accepting the commas and the decimal points and things

249
00:18:46,360 --> 00:18:46,870
like that.

250
00:18:47,050 --> 00:18:47,920
Same thing here.

251
00:18:47,950 --> 00:18:50,790
It's not expecting you to type in a zero point zero eight.

252
00:18:50,800 --> 00:18:55,690
It's letting you type in a whole number and then they're implying that they'll figure it out by the

253
00:18:55,690 --> 00:18:57,820
fact that they're showing this percent sign here.

254
00:18:58,180 --> 00:19:00,810
So this is semi formatted, if you will.

255
00:19:00,820 --> 00:19:09,160
So if I were writing a program where I had an actual user interface, I would likely want to accept

256
00:19:09,580 --> 00:19:12,970
either this input or something close to it.

257
00:19:12,970 --> 00:19:18,550
Maybe where I'd be leaving off the dollar sign in the percent sign, possibly.

258
00:19:18,640 --> 00:19:19,990
It just kind of depends.

259
00:19:20,200 --> 00:19:25,660
Or ideally, I'd make it very flexible where I could supply either or write with or without.

260
00:19:25,870 --> 00:19:30,970
And my code would be smart enough to figure out what to do there for maximum flexibility.

261
00:19:31,210 --> 00:19:38,560
But this is really just to show that we can both format numbers and we can pass them as well.

262
00:19:38,920 --> 00:19:39,330
All right.

263
00:19:39,340 --> 00:19:44,680
So we're going to look at a few more things that we can do it with no format in the next few lessons.

264
00:19:44,680 --> 00:19:45,580
So I'll see you then.
