1
00:00:00,090 --> 00:00:07,170
All right, so now we're ready to create a new project to learn about Java and how it can connect and

2
00:00:07,170 --> 00:00:09,270
work with actual databases.

3
00:00:09,870 --> 00:00:14,880
So going in to our idea here, let's create a new project.

4
00:00:15,420 --> 00:00:19,980
So we're going to go up here to file new project.

5
00:00:22,560 --> 00:00:23,170
All right.

6
00:00:23,670 --> 00:00:29,730
Make sure you've got now this is going to be a great project, so make sure you've selected Gradle and

7
00:00:29,730 --> 00:00:33,360
then make sure you've got version 17 of Java selected here.

8
00:00:33,540 --> 00:00:39,390
If at the time that you're watching this, there's a later version of Java that might be OK, too.

9
00:00:39,390 --> 00:00:44,010
But we want to be a little bit careful here because sometimes the version of Gradle that ships with

10
00:00:44,010 --> 00:00:52,860
the intelligent I.D. may not be updated yet to have full support for the current version of Java.

11
00:00:53,190 --> 00:00:59,460
So if you run into a message telling you that it can't do something with version 18 or whatever version

12
00:00:59,460 --> 00:01:05,970
of Java is out at the time that you're going through this course, you may need to temporarily choose

13
00:01:05,970 --> 00:01:10,700
the previous version of Java that has full support for your I.D..

14
00:01:11,400 --> 00:01:13,620
Just a quick little little note there.

15
00:01:13,920 --> 00:01:14,190
All right.

16
00:01:14,220 --> 00:01:19,950
But anyway, as of the time of this recording, Java 17 has only been out for a month and a half couple

17
00:01:19,950 --> 00:01:21,030
of months, something like that.

18
00:01:21,360 --> 00:01:23,280
And I want Java selected here.

19
00:01:23,280 --> 00:01:24,720
And so click next.

20
00:01:24,720 --> 00:01:25,730
And let's see here.

21
00:01:25,740 --> 00:01:30,630
Let's call this project people D.B for People database.

22
00:01:30,810 --> 00:01:31,270
OK.

23
00:01:31,290 --> 00:01:33,690
And then click Finish.

24
00:01:35,260 --> 00:01:37,660
And I will put this in a new window.

25
00:01:41,010 --> 00:01:46,590
All right, so now Gradle will be downloading things that need to be downloaded.

26
00:01:46,710 --> 00:01:52,200
So we'll give it a minute to do all of that good stuff and get our project ready to go.

27
00:01:54,460 --> 00:01:55,120
OK.

28
00:01:55,150 --> 00:01:58,180
And it looks like it's done and it's ready to go.

29
00:01:58,600 --> 00:01:59,290
All right, cool.

30
00:01:59,440 --> 00:02:06,880
So the first thing we're going to do is we're going to install an additional dependency for this new

31
00:02:06,880 --> 00:02:09,070
application that we are about to write.

32
00:02:09,370 --> 00:02:16,540
So since this is going to be a database driven application, we will need to connect to a database.

33
00:02:16,810 --> 00:02:24,760
In the previous lessons, we were working with the H2 database using the Squirrel sequel client.

34
00:02:25,390 --> 00:02:33,130
So if we want this new application that we are about to write to be able to work and connect to an H2

35
00:02:33,130 --> 00:02:38,630
database, we will need an H2 database driver embedded in our application.

36
00:02:38,650 --> 00:02:39,010
OK?

37
00:02:39,250 --> 00:02:46,510
And that driver will take the form of a library dependency on our project.

38
00:02:46,810 --> 00:02:52,270
So one of the reasons why we're using Gradle besides the fact that Gradle or MAVEN, which are very

39
00:02:52,270 --> 00:02:57,730
equivalent in functionality, are industry standards for professional Java developers.

40
00:02:58,090 --> 00:03:03,640
The other reason, though, is because they give us a nice, standardized way of downloading libraries,

41
00:03:03,640 --> 00:03:06,850
and we've already played with this a little bit in a few previous lessons.

42
00:03:06,850 --> 00:03:12,490
So here we are, just kind of using it some more, just so you can get more accustomed to some of these

43
00:03:12,490 --> 00:03:15,730
industry standard tools and techniques.

44
00:03:15,760 --> 00:03:16,180
OK.

45
00:03:16,720 --> 00:03:23,920
So in our I.D. here, we're currently looking at the build that Gradle file, and this is really just

46
00:03:23,920 --> 00:03:27,790
the configuration file for Gradle based projects.

47
00:03:27,970 --> 00:03:34,390
And one of the things we can specify in this file is additional libraries that we want to get pulled

48
00:03:34,390 --> 00:03:37,120
in and become part of our project.

49
00:03:37,270 --> 00:03:43,090
Now, by the way, if for whatever reason, you didn't start right off with having the build that Gradle

50
00:03:43,090 --> 00:03:47,240
file open like I did, you can easily just navigate to it.

51
00:03:47,260 --> 00:03:51,700
It's right here build.gradle so you can just double click it and then it should open up for you.

52
00:03:51,730 --> 00:03:52,120
OK.

53
00:03:52,390 --> 00:03:57,100
So now my cursor is over here in the editor for this file, and it's really just a text file.

54
00:03:57,370 --> 00:03:57,730
All right.

55
00:03:58,060 --> 00:04:05,470
And so now if I want to add a new dependency via Gradle, I can let the ADP do that for me pretty easily

56
00:04:05,620 --> 00:04:11,860
by hitting command in on Mac, and then I can select add dependency.

57
00:04:11,860 --> 00:04:16,840
By the way, if you're on Windows, I know that the command in think has typically not existed for the

58
00:04:16,840 --> 00:04:17,680
Windows people.

59
00:04:17,830 --> 00:04:23,450
I think you can just right click somewhere in black space here and then choose Generate.

60
00:04:23,470 --> 00:04:23,830
Yeah.

61
00:04:24,520 --> 00:04:24,810
All right.

62
00:04:24,820 --> 00:04:26,920
So same thing for for the Windows players.

63
00:04:27,490 --> 00:04:27,880
All right.

64
00:04:28,210 --> 00:04:29,710
Ad dependency.

65
00:04:30,010 --> 00:04:33,100
And that pulls up this window here now.

66
00:04:33,130 --> 00:04:38,710
My window looks a little weird, as you know, because I keep my screen in presentation mode so that

67
00:04:38,710 --> 00:04:40,300
all the text is easy to see.

68
00:04:40,870 --> 00:04:41,290
All right.

69
00:04:41,530 --> 00:04:46,870
But I'm going to come down here to my search area that's kind of flaking out on me a little bit there

70
00:04:47,140 --> 00:04:48,610
and I'm going to type h.

71
00:04:49,810 --> 00:04:50,170
All right.

72
00:04:50,200 --> 00:04:54,070
And so now we're seeing a list of all of the dependencies here.

73
00:04:54,250 --> 00:04:57,880
And I believe the one that we're interested in is this very first one here.

74
00:04:57,930 --> 00:05:02,670
H2 database engine now looks like I need to select a version.

75
00:05:02,680 --> 00:05:07,510
And generally speaking, this is probably the most recent version, though really, truly it doesn't.

76
00:05:07,510 --> 00:05:10,420
It's not going to matter a whole lot for what we're going to be doing.

77
00:05:10,660 --> 00:05:15,160
So I'm selecting the version that's at the top of the list because by the time you're running this,

78
00:05:15,310 --> 00:05:18,550
that version might be something even higher than one point forty two.

79
00:05:18,580 --> 00:05:19,270
Don't worry about it.

80
00:05:19,270 --> 00:05:24,520
Just generally speaking, pick the pick the one that's at the top, and then you can click Add.

81
00:05:25,750 --> 00:05:33,340
And so now what that has done is that has added this line right here under dependencies in my build.gradle

82
00:05:33,340 --> 00:05:33,790
file.

83
00:05:33,970 --> 00:05:35,500
And we're done here.

84
00:05:35,590 --> 00:05:36,030
All right.

85
00:05:36,040 --> 00:05:38,440
So now we've got that dependency here.

86
00:05:38,470 --> 00:05:42,010
Let me open back up my project pane on the left.

87
00:05:42,730 --> 00:05:48,100
And for some of you, that may trigger Gradle via the ADP to go out and download that dependency.

88
00:05:48,130 --> 00:05:52,690
I think I already had that dependency in my computer, so I didn't have to go through that.

89
00:05:52,720 --> 00:05:53,230
All right.

90
00:05:53,380 --> 00:05:59,320
So the next step here is that we're going to do this project TDD style, test driven development.

91
00:05:59,320 --> 00:06:04,750
We haven't done that in a while, but as we're getting towards the end of this course, I'm trying to

92
00:06:04,990 --> 00:06:12,370
do things a little bit more formally to wrap things up and make sure that you're fully engaged in the

93
00:06:12,370 --> 00:06:18,370
standard ways that professional Java developers might be creating applications or at least getting kind

94
00:06:18,370 --> 00:06:19,360
of closer to it.

95
00:06:19,660 --> 00:06:23,640
And you know it actually, while we're at it, let's install one more dependency.

96
00:06:23,650 --> 00:06:29,950
So if I'm going to do another command in here and add dependency again, and this time I'm going to

97
00:06:29,950 --> 00:06:32,650
search for a Cert J.

98
00:06:34,040 --> 00:06:34,460
All right.

99
00:06:34,760 --> 00:06:43,340
This will be used for our TD, for our tests and the very first one here, a search, a fluent assertions,

100
00:06:43,340 --> 00:06:44,310
that's the one we want.

101
00:06:44,330 --> 00:06:47,660
And so again, we'll click on this not set thing here.

102
00:06:47,930 --> 00:06:52,790
Click on that, and I'm going to pick the number at the top there, the version at the top and then

103
00:06:52,790 --> 00:06:53,930
click Add.

104
00:06:54,830 --> 00:07:01,160
And you're going to want to then change the line that says a search from implementation to test implementation

105
00:07:01,160 --> 00:07:02,690
and make sure you have a capital I.

106
00:07:03,200 --> 00:07:03,750
All right.

107
00:07:03,800 --> 00:07:07,370
And so now we are good to go.

108
00:07:07,610 --> 00:07:15,830
All right now, while we're over here in the build that Gradle file, we may need to trigger intelligence

109
00:07:15,860 --> 00:07:19,340
to make sure that it has actually downloaded this library here.

110
00:07:19,370 --> 00:07:25,310
Now, at this moment, I'm actually not 100 percent certain that Intel AJ has in fact downloaded this

111
00:07:25,310 --> 00:07:26,720
Assert J Library.

112
00:07:26,900 --> 00:07:32,420
So if I want to check that I can come over here to the external libraries and open and click on this

113
00:07:32,420 --> 00:07:37,460
little greater than symbol here and then I can search and I can look through here.

114
00:07:37,460 --> 00:07:43,850
And in fact, I do not see it being referenced here, so I need to trigger intelligence to reread and

115
00:07:43,850 --> 00:07:49,700
reload everything that I have listed out as a dependency in this field that Gradle file.

116
00:07:50,150 --> 00:07:55,040
So what I'm going to do is temporarily jump out of presentation mode for just a second here so that

117
00:07:55,040 --> 00:07:56,750
I can see what I'm doing.

118
00:07:57,260 --> 00:08:00,500
So let me let me jump into regular mode.

119
00:08:00,890 --> 00:08:01,130
All right.

120
00:08:01,140 --> 00:08:06,860
So now in regular mode here, sorry that everything's smaller now, but in regular mode, I can come

121
00:08:06,860 --> 00:08:11,900
over here to the Gradle tab, which actually I do need to show this to you anyway.

122
00:08:12,470 --> 00:08:16,610
And I can always click on this little refresh button here or reload button.

123
00:08:16,880 --> 00:08:20,480
And that will trigger Intel AJ to reread things.

124
00:08:20,480 --> 00:08:27,170
And I just noticed that as I did, that looks like it indeed did bring in actually, looks like it might

125
00:08:27,170 --> 00:08:31,760
have had to bring in the H2 database as well, but it certainly brought in the Assert J Library now.

126
00:08:32,150 --> 00:08:32,440
All right.

127
00:08:32,450 --> 00:08:34,100
And so that's what I wanted.

128
00:08:34,550 --> 00:08:35,000
All right.

129
00:08:35,270 --> 00:08:41,750
So now I know that I've got the dependencies that I needed in this project and they're loaded up, OK,

130
00:08:41,930 --> 00:08:45,440
and now I can jump back in to my presentation mode here.

131
00:08:45,770 --> 00:08:47,060
Give me a just a second here.

132
00:08:47,090 --> 00:08:47,750
There we go.

133
00:08:47,840 --> 00:08:48,320
OK.

134
00:08:48,770 --> 00:08:54,050
OK, so the next thing that we're going to do is we're going to actually just write a test.

135
00:08:54,440 --> 00:09:01,610
So I'm going to come over here to my test folder and expand that out and click on Java and then do a

136
00:09:01,610 --> 00:09:02,630
command in.

137
00:09:03,900 --> 00:09:06,660
And create a new Java class.

138
00:09:08,920 --> 00:09:14,950
And so what we're going to do is we're going to start with tests, and the first thing we're going to

139
00:09:14,950 --> 00:09:19,210
write tests for is a new repository.

140
00:09:19,510 --> 00:09:23,790
So we did play around with this repository pattern a tiny little bit.

141
00:09:23,800 --> 00:09:30,730
We made a little bit of a poor man's repository a few lessons ago that was backed by an array list,

142
00:09:30,730 --> 00:09:31,990
if I recall correctly.

143
00:09:32,110 --> 00:09:39,790
So we were simulating some of the types of methods that you might find on a typical repository class

144
00:09:39,790 --> 00:09:42,040
in a real company's Java code.

145
00:09:42,610 --> 00:09:48,550
Now we're going to write a more realistic one that actually will connect to an actual database, though.

146
00:09:48,580 --> 00:09:49,000
OK.

147
00:09:49,390 --> 00:09:58,720
So when we create these repositories, typically you'll get one repository per primary domain concept

148
00:09:59,140 --> 00:10:01,000
and buy primary domain concept.

149
00:10:01,000 --> 00:10:03,470
I mean, like a domain model idea.

150
00:10:03,490 --> 00:10:12,130
OK, so this application is going to allow us to do basic what are called crud operations on a person

151
00:10:12,130 --> 00:10:19,630
class crud, by the way, for native English speakers, that's not like crud as in like Creedy or terrible,

152
00:10:19,630 --> 00:10:19,890
right?

153
00:10:20,170 --> 00:10:24,760
Crud is an acronym that stands for Create, Read, Update and Delete.

154
00:10:25,000 --> 00:10:32,290
And we actually were running through examples of how to do basic crud operations with sequel in one

155
00:10:32,290 --> 00:10:35,440
of the previous lessons with the Squirrel sequel client.

156
00:10:35,710 --> 00:10:41,560
Now we're going to implement a lot of those same types of crud operations in Java code.

157
00:10:41,590 --> 00:10:42,010
OK.

158
00:10:42,550 --> 00:10:50,110
So anyway, we're going to create our first test here for a repository that will be called People Repository.

159
00:10:50,440 --> 00:10:57,530
And so the test class, we can name something like people repository tests, OK?

160
00:10:58,150 --> 00:10:59,380
And this will be a class.

161
00:10:59,680 --> 00:11:01,120
And so we will hit enter.

162
00:11:02,020 --> 00:11:02,620
There we go.

163
00:11:02,920 --> 00:11:04,630
Oh, I'm sorry, and I forgot.

164
00:11:04,960 --> 00:11:10,510
We also want this to exist inside of a specific package, though, so let's go and create that as well.

165
00:11:10,570 --> 00:11:16,690
So if you click on Java right above the People Repository Tests class, click on that and I'll do another

166
00:11:16,690 --> 00:11:19,710
command in and we'll make a package.

167
00:11:19,720 --> 00:11:21,340
So choose package.

168
00:11:21,790 --> 00:11:27,250
And so typically when you're working at a company and we've gone through this before, you'll create

169
00:11:27,250 --> 00:11:33,580
a root package structure, which is based on an internet domain name for the company or something like

170
00:11:33,580 --> 00:11:33,880
that.

171
00:11:34,000 --> 00:11:35,710
So I will use my own company's name.

172
00:11:35,830 --> 00:11:40,570
You can use your last name, got first name if you like, or you can make up a fictitious company name

173
00:11:40,570 --> 00:11:43,480
or if you work for a company, you can use their actual domain name.

174
00:11:43,720 --> 00:11:50,020
Now, it's typically done in reverse, though, so in my case, it would become that neutrino system.

175
00:11:50,140 --> 00:11:50,590
OK.

176
00:11:50,920 --> 00:11:54,820
And then maybe the name of the application itself.

177
00:11:54,820 --> 00:11:57,100
So this application is people DB.

178
00:11:57,790 --> 00:12:03,400
And then from here we may choose to group up our classes by function.

179
00:12:03,550 --> 00:12:09,070
Now, grouping our classes by function is probably the most common way to group them by, and I will

180
00:12:09,070 --> 00:12:10,430
stick with that for now.

181
00:12:10,660 --> 00:12:15,520
But I think I may have mentioned this a long time ago and one of the previous lessons, but another

182
00:12:15,520 --> 00:12:19,570
way that you could do it is to group by domain concept.

183
00:12:19,660 --> 00:12:24,850
But since we don't have many of those concepts yet, that would be harder for me to explain and show.

184
00:12:24,880 --> 00:12:27,070
So for now, let's just group them by function.

185
00:12:27,430 --> 00:12:27,710
All right.

186
00:12:27,730 --> 00:12:33,010
And so the function of this class that we're about to create is a repository.

187
00:12:33,010 --> 00:12:36,880
So we'll just call this people do that repository like so.

188
00:12:37,660 --> 00:12:38,010
All right.

189
00:12:38,020 --> 00:12:40,240
So now we've just created that package.

190
00:12:40,390 --> 00:12:46,420
And so now what I'm going to do is I'm going to just drag the people repository tests class that we've

191
00:12:46,420 --> 00:12:47,290
previously created.

192
00:12:47,290 --> 00:12:52,810
I'm going to drag that right on top of the newly created repository.

193
00:12:52,960 --> 00:12:58,120
And so now the idea is ask me, Hey, do you want to move that class into this new repository?

194
00:12:58,150 --> 00:12:58,980
And yes, I do.

195
00:12:58,990 --> 00:13:01,030
So I'm going to tell it to refactor that.

196
00:13:02,250 --> 00:13:09,180
There we go, and so now you see that the ABC has modified the class code a little bit and put a package

197
00:13:09,180 --> 00:13:14,190
here to say that this is inside of the people DVD repository package.

198
00:13:14,220 --> 00:13:14,910
All right.

199
00:13:15,480 --> 00:13:17,550
And so now I'm going to make a new line.

200
00:13:17,730 --> 00:13:21,090
And let's just start writing a first test.

201
00:13:21,930 --> 00:13:22,250
All right.

202
00:13:22,260 --> 00:13:26,970
So there's an app test there, and our tests have to be public and void.

203
00:13:27,510 --> 00:13:30,750
So what's a first scenario to actually test?

204
00:13:30,780 --> 00:13:33,090
Let me make some room there for myself.

205
00:13:33,450 --> 00:13:39,840
So I think the first thing we're going to need is some actual data and to have some data like in the

206
00:13:39,840 --> 00:13:42,720
database, we need to be able to save records.

207
00:13:42,900 --> 00:13:49,060
So let's write a test for us to be able to save one person to the database.

208
00:13:49,080 --> 00:13:49,470
OK.

209
00:13:49,800 --> 00:13:54,540
So I'm just going to call this can save until I think of a better name for it.

210
00:13:56,710 --> 00:13:57,390
All right.

211
00:13:58,780 --> 00:14:08,020
So I'm going to pretend like there is already a class called People Repository People Repository.

212
00:14:09,870 --> 00:14:17,520
And I'm going to create an instance of it, and I will just call it repo for four short, and I will

213
00:14:17,520 --> 00:14:24,840
just knew that guy up or instantiated new people repository for now.

214
00:14:25,650 --> 00:14:26,290
Like so.

215
00:14:27,060 --> 00:14:30,960
All right, so now people repository is red because it doesn't actually exist.

216
00:14:30,960 --> 00:14:33,390
So let's make that happy right now.

217
00:14:33,540 --> 00:14:38,670
I put my cursor, you know, kind of right before the parentheses there, and I'm going to do an option

218
00:14:38,670 --> 00:14:42,270
return and let's just create this class.

219
00:14:43,080 --> 00:14:48,780
And yes, we do want that to be placed inside of the people DB repository repository.

220
00:14:48,810 --> 00:14:54,450
However, we don't want the target destination directory to be the Dot Test folder.

221
00:14:54,570 --> 00:14:55,470
We don't want that.

222
00:14:56,100 --> 00:15:01,200
We want to click on these ellipses here, and we want to move that into the main folder.

223
00:15:01,200 --> 00:15:06,930
OK, because tests belong in the test folder, but real code, which is what this is about to be, what

224
00:15:06,930 --> 00:15:10,110
it's going to create for us that belongs in the main folder.

225
00:15:10,140 --> 00:15:10,590
OK.

226
00:15:11,250 --> 00:15:19,280
So I'm double clicking main and then the idea is giving me a parallel option down down here under main.

227
00:15:19,290 --> 00:15:25,470
So just as we have the people DB repository in Test, we've also got one under Maine, so that's the

228
00:15:25,470 --> 00:15:26,760
one that we actually want.

229
00:15:26,910 --> 00:15:30,840
And now we can click OK and then OK again.

230
00:15:31,830 --> 00:15:37,350
All right, so now it has created this class for us, it doesn't have anything in it yet, but there

231
00:15:37,350 --> 00:15:37,770
it is.

232
00:15:37,980 --> 00:15:45,360
And now to jump back over to the test class, I can either do a command shift and then choose people

233
00:15:45,360 --> 00:15:48,390
repository tests or I could also just go back.

234
00:15:48,900 --> 00:15:49,240
All right.

235
00:15:49,240 --> 00:15:52,890
And so the red marks went away because we've now created this class.

236
00:15:53,430 --> 00:15:53,850
All right.

237
00:15:53,860 --> 00:16:02,760
So then the next thing I may want to do is to pretend like I've got a save method on this class repo

238
00:16:02,760 --> 00:16:03,720
dot save.

239
00:16:04,260 --> 00:16:06,330
Now what am I actually going to save, though?

240
00:16:06,690 --> 00:16:12,930
Well, I'm thinking we should model a person and then have an instance of a person that we can pass

241
00:16:12,930 --> 00:16:16,050
into this save method to save that person.

242
00:16:16,410 --> 00:16:22,290
So in order to do that, then I would need to create an instance of this fictional person, right?

243
00:16:22,590 --> 00:16:29,340
So let me make a new line right up here, and I'm going to pretend like I have a class already in this

244
00:16:29,550 --> 00:16:30,840
project called person.

245
00:16:31,830 --> 00:16:33,810
And I'm going to just say, I don't know.

246
00:16:33,820 --> 00:16:42,210
Call it John equals new person, and I'm going to pretend like I've even got a constructor here, something

247
00:16:42,210 --> 00:16:43,920
that maybe takes a first name.

248
00:16:44,190 --> 00:16:53,130
John Comma, a last name, Smith comma, maybe a date of birth, and I will model the date of birth

249
00:16:53,610 --> 00:16:55,860
with a zoned date time.

250
00:16:57,640 --> 00:17:06,010
Of and I guess I may use this version here, so I can specify a year.

251
00:17:06,370 --> 00:17:19,030
So let's say, I don't know, 1980 and a month of November and a day of 15th and an hour of 15 three

252
00:17:19,030 --> 00:17:19,630
p.m..

253
00:17:21,410 --> 00:17:26,000
Fifteen and seconds will be zero.

254
00:17:26,180 --> 00:17:28,010
And I'm running off the screen here.

255
00:17:29,410 --> 00:17:32,170
And what else do we have here in nanoseconds even?

256
00:17:32,890 --> 00:17:33,220
All right.

257
00:17:33,250 --> 00:17:36,270
Zero nanoseconds and what else do we have?

258
00:17:36,280 --> 00:17:40,630
And then a zone I'd OK Zone I.D. of?

259
00:17:41,470 --> 00:17:42,490
And I don't know.

260
00:17:42,490 --> 00:17:46,030
Let's say that he's from Chicago, so I happen to know that.

261
00:17:46,240 --> 00:17:49,390
So I think that should be minus six.

262
00:17:50,530 --> 00:17:52,480
And if it's not, that's OK, I don't care.

263
00:17:54,910 --> 00:17:55,660
All right.

264
00:17:57,190 --> 00:18:02,440
So there's our person who is in error because he does not actually exist.

265
00:18:02,710 --> 00:18:06,220
So now let's let the idea go ahead and create that for us.

266
00:18:07,150 --> 00:18:12,100
So I'm putting my cursor right there before the left parentheses and do an option return.

267
00:18:12,340 --> 00:18:15,880
And let's go ahead and create this class called person.

268
00:18:16,510 --> 00:18:22,510
And so now again, I need to click on these ellipses down here to change where this is going to go because

269
00:18:22,510 --> 00:18:26,140
I don't want this class to be created in the test folder.

270
00:18:26,350 --> 00:18:31,840
So I'm going to click on that and then click on it, and then I'm going to double click on Main and

271
00:18:31,840 --> 00:18:34,300
then I'm going to click here as well.

272
00:18:34,420 --> 00:18:39,160
Now, actually, I don't even want this to go into the repository folder either, but let me click OK,

273
00:18:39,190 --> 00:18:48,130
first and now up here I will change the repository to model because this is going to be a model class.

274
00:18:49,060 --> 00:18:49,510
OK?

275
00:18:49,990 --> 00:18:51,280
And then click OK.

276
00:18:53,220 --> 00:18:53,880
There we go.

277
00:18:54,210 --> 00:18:54,630
All right.

278
00:18:54,660 --> 00:19:02,340
And so now the ad has created this class for us, and it's even trying to create a constructor for us

279
00:19:02,340 --> 00:19:03,060
as well.

280
00:19:04,020 --> 00:19:04,500
So.

281
00:19:05,440 --> 00:19:13,210
A string is fine for the first name, so we'll call that first filled first name and then the last name

282
00:19:13,210 --> 00:19:14,770
will be your last name.

283
00:19:15,040 --> 00:19:17,120
And then this field here will be.

284
00:19:17,170 --> 00:19:18,070
Date of birth.

285
00:19:18,220 --> 00:19:19,030
All right.

286
00:19:19,360 --> 00:19:22,480
And now let's jump back over to our test.

287
00:19:24,590 --> 00:19:27,980
And the red marks went away, so that's good.

288
00:19:28,490 --> 00:19:34,460
And so now I should be able to simply pass in John like that.

289
00:19:34,760 --> 00:19:37,960
And now I want to address this red mark here.

290
00:19:37,970 --> 00:19:44,960
So I put my cursor to the left of the parentheses and then option return and create the save method

291
00:19:44,960 --> 00:19:47,660
and in people repository.

292
00:19:47,840 --> 00:19:48,890
Yes, do that.

293
00:19:49,430 --> 00:19:52,250
OK, so for now, we'll let that return typed be void.

294
00:19:52,250 --> 00:19:54,840
But I think I have stated this before.

295
00:19:54,860 --> 00:20:02,030
Typically, the save method of a repository would return the object that you just saved, and I think

296
00:20:02,030 --> 00:20:03,080
we will update that.

297
00:20:03,080 --> 00:20:09,770
But we'll let the TDI will let the test evolve us into doing that rather than just putting the code

298
00:20:09,770 --> 00:20:13,820
out there before anything actually warranted us doing that.

299
00:20:13,820 --> 00:20:14,180
OK?

300
00:20:15,140 --> 00:20:15,500
All right.

301
00:20:15,530 --> 00:20:19,490
The input type will be of type person, and we don't want to call that John.

302
00:20:19,490 --> 00:20:21,110
Let's just call it person.

303
00:20:22,800 --> 00:20:23,370
All right.

304
00:20:23,640 --> 00:20:25,410
And no more errors here.

305
00:20:25,980 --> 00:20:28,620
Let's jump back over here and no errors here, either.

306
00:20:30,040 --> 00:20:30,740
All right.

307
00:20:31,660 --> 00:20:38,740
So now I think we might be ready to assert something.

308
00:20:39,360 --> 00:20:45,640
So now at this point, I'm just sitting here kind of contemplating what what would be a good thing to

309
00:20:45,640 --> 00:20:53,350
actually assert that isn't like too much, but isn't absolutely nothing, either.

310
00:20:53,800 --> 00:21:02,620
So I'm kind of thinking here, let's assert that upon calling the save method, we would receive an

311
00:21:02,620 --> 00:21:12,920
object back out and that object will now have an I.D. and that I.D. would be generated by the database.

312
00:21:12,940 --> 00:21:17,080
OK, so actually, that's kind of a lot of steps, but that's where we're headed.

313
00:21:17,080 --> 00:21:18,490
So let's just go ahead and do it.

314
00:21:18,670 --> 00:21:19,090
All right.

315
00:21:19,570 --> 00:21:28,810
So let's go ahead and pretend like the safe method will return something to us of type person, and

316
00:21:28,810 --> 00:21:33,520
I'm going to just refer to this thing as a saved person like that.

317
00:21:34,600 --> 00:21:36,250
And so now we're in error again.

318
00:21:36,250 --> 00:21:42,790
So if I do an option, return now the ID is offering to make the save method return something of type

319
00:21:42,790 --> 00:21:44,050
person, which is cool.

320
00:21:44,050 --> 00:21:45,190
That's what I want.

321
00:21:46,380 --> 00:21:51,300
All right, so it's going to return in this case, it's going to return the person that we're passing

322
00:21:51,300 --> 00:21:52,140
in, which is cool.

323
00:21:52,350 --> 00:21:55,800
It went for basically about the simplest thing that we can do, I suppose.

324
00:21:56,130 --> 00:21:57,150
Or that it could do.

325
00:21:57,810 --> 00:21:58,260
All right.

326
00:21:58,980 --> 00:22:01,710
And so now I want to assert something.

327
00:22:01,710 --> 00:22:06,510
So let me show you something now as we're about to jump into these assertions here.

328
00:22:07,140 --> 00:22:17,400
I had you install this test library called a Cert J, because the Assert Test Library works well with

329
00:22:17,400 --> 00:22:21,510
J Unit, which is the, you know, framework that is running our tests for us.

330
00:22:21,660 --> 00:22:28,530
But it gives us what is considered to be a more fluent API for writing our assertions and you'll see

331
00:22:28,530 --> 00:22:29,870
what I mean in just a minute here.

332
00:22:29,880 --> 00:22:31,020
So I just wanted to point that out.

333
00:22:31,020 --> 00:22:32,460
That's why we added this in.

334
00:22:32,730 --> 00:22:35,890
I actually prefer to use the search a lot of the times.

335
00:22:35,940 --> 00:22:41,070
I didn't want to introduce it too early, though, because a lot of companies maybe haven't quite standardized

336
00:22:41,070 --> 00:22:41,700
on a search.

337
00:22:42,240 --> 00:22:47,850
And you can always be safe to just use the default assertions that come with J Unit, but those are

338
00:22:47,850 --> 00:22:49,170
a little lackluster.

339
00:22:49,740 --> 00:22:53,280
Perhaps I'll say, OK, so jumping back now?

340
00:22:54,060 --> 00:22:54,390
All right.

341
00:22:54,390 --> 00:23:00,000
So now we're ready for our first assertion and we're going to use the assertions from the Assert J libraries.

342
00:23:00,180 --> 00:23:03,210
And so let's see now if I can refer to.

343
00:23:04,320 --> 00:23:05,640
My assert, J.

344
00:23:05,790 --> 00:23:06,460
Yes, I can.

345
00:23:06,480 --> 00:23:09,450
OK, so all right, let me let me do that a little slower now.

346
00:23:09,720 --> 00:23:15,150
So I typed assert that and then I went ahead and put my parentheses in here, and then I put my cursor

347
00:23:15,150 --> 00:23:17,610
to the left of the left parentheses.

348
00:23:17,790 --> 00:23:23,160
And then I did an option return, and now I have the option to import static method.

349
00:23:23,310 --> 00:23:28,920
And so what's happening here is that intelligence is pretty familiar with the Assert J Library.

350
00:23:29,580 --> 00:23:35,430
And or or maybe it's being so smart that it's actually scanning through that library that we just got

351
00:23:35,430 --> 00:23:37,800
loaded in and finding all the static methods.

352
00:23:37,800 --> 00:23:43,560
I'm not sure which way it's doing it, but the searching library is an extremely popular one and so

353
00:23:43,560 --> 00:23:51,180
intelligent knows to make the static methods of the Assert J Library available to me conveniently with

354
00:23:51,180 --> 00:23:53,970
this import static method option right there.

355
00:23:53,970 --> 00:23:55,800
And yes, I do want to import that.

356
00:23:56,370 --> 00:23:56,660
All right.

357
00:23:56,670 --> 00:23:58,590
And then it's asking me, well, which version?

358
00:23:58,590 --> 00:24:00,000
Because there's a bunch of them.

359
00:24:00,120 --> 00:24:00,540
All right.

360
00:24:01,260 --> 00:24:06,600
And I think I'll just go for the simplest one here assertions that assert that.

361
00:24:06,810 --> 00:24:07,200
All right.

362
00:24:07,380 --> 00:24:09,120
So let's pull that one in.

363
00:24:09,120 --> 00:24:13,350
Assert that saved person.

364
00:24:14,010 --> 00:24:16,290
So what do we actually want to assert here?

365
00:24:16,830 --> 00:24:18,330
I'm thinking, let's assert.

366
00:24:18,330 --> 00:24:20,490
Well, I kind of already stated it earlier.

367
00:24:20,490 --> 00:24:26,790
I said, Let's test that we get back a saved person and that saved person is going to have an actual

368
00:24:26,790 --> 00:24:29,460
I.D. that is set to something.

369
00:24:29,550 --> 00:24:29,970
OK.

370
00:24:30,510 --> 00:24:35,790
So in that case, maybe we can say assert that saved person died.

371
00:24:35,820 --> 00:24:36,570
Get ID.

372
00:24:37,050 --> 00:24:41,010
I know we don't actually have this method yet, but we will get ID.

373
00:24:42,480 --> 00:24:43,110
Like that?

374
00:24:43,830 --> 00:24:46,350
So let's let's make that happy real quick.

375
00:24:46,590 --> 00:24:52,500
So I'm putting my cursor to the left of the parentheses there and then doing in an option return.

376
00:24:53,130 --> 00:24:55,080
And sure.

377
00:24:56,180 --> 00:25:01,580
All right, now, caller ID is actually giving me the option to generate a property called ID, which

378
00:25:01,580 --> 00:25:07,490
I actually prefer to do that, so let's do that because then it will also go ahead and generate the

379
00:25:07,490 --> 00:25:08,480
method as well.

380
00:25:08,720 --> 00:25:15,710
And let's let the type the data type for this be a rapper long, so uppercase long.

381
00:25:16,250 --> 00:25:18,710
Now I could have gone for a lower case long as well.

382
00:25:18,710 --> 00:25:27,340
But what I'm kind of thinking here is that initially when we create a person, they won't have an I.D.

383
00:25:28,190 --> 00:25:34,310
and if I used a primitive long, you can't have a primitive long set to nothing.

384
00:25:34,610 --> 00:25:36,800
It has to be set to something, right?

385
00:25:36,800 --> 00:25:40,370
So you could do negative one or zero or something like that.

386
00:25:40,970 --> 00:25:50,030
So the best that I can kind of think to do right now would be to probably just set it to a long.

387
00:25:50,210 --> 00:25:55,220
Now, if I gave this to a rapper, long now, if I gave this a little more thought, I've never actually

388
00:25:55,220 --> 00:25:56,060
done this before.

389
00:25:56,240 --> 00:26:03,880
I could consider what it would look like to make this an optional, long and optional long.

390
00:26:03,890 --> 00:26:10,370
However, I happen to know because of my experience that I've never in life seen any project do that

391
00:26:10,370 --> 00:26:12,830
before and later down the road.

392
00:26:12,830 --> 00:26:18,470
We're going to learn a little tiny bit about the spring framework and some of the amazing tools that

393
00:26:18,470 --> 00:26:23,420
it makes available to us to ease a lot of what you're going to do in this module.

394
00:26:23,780 --> 00:26:29,360
And I'm a little concerned about over complicating it by bringing in the optional long.

395
00:26:29,360 --> 00:26:34,220
So we're not going to do that right now, but it's certainly worth considering, and it might even be

396
00:26:34,220 --> 00:26:37,910
conceptually the most correct thing to do, possibly.

397
00:26:38,270 --> 00:26:39,860
But for now, we'll use a wrapper long.

398
00:26:40,310 --> 00:26:41,000
All right.

399
00:26:41,540 --> 00:26:45,950
And so now the ID has created a property called ID for us of type long.

400
00:26:46,160 --> 00:26:47,990
So now we can jump back over here.

401
00:26:48,290 --> 00:26:54,290
So now, if I put my cursor at the end of this and then do a period, now here's where we get into what

402
00:26:54,290 --> 00:26:58,850
I was saying a little bit earlier about the Assert J Assertion Library.

403
00:26:59,120 --> 00:27:06,320
It implements what is called a fluent library, and that is to say that you can kind of read your lines

404
00:27:06,320 --> 00:27:11,000
of assertions almost like in English or at least closer to English.

405
00:27:11,000 --> 00:27:15,080
So we can say assert that the saved person's.

406
00:27:16,850 --> 00:27:22,010
And then I can say something like is greater than zero.

407
00:27:22,970 --> 00:27:23,350
See?

408
00:27:23,810 --> 00:27:30,230
So it reads more like English, assert that the saved person's ID is greater than zero.

409
00:27:30,440 --> 00:27:30,890
All right.

410
00:27:31,280 --> 00:27:33,950
So let's go ahead and run that and see it fell.

411
00:27:36,020 --> 00:27:39,710
All right, so that failed, and let's see why it failed, exactly.

412
00:27:40,370 --> 00:27:41,630
Let's see here.

413
00:27:41,870 --> 00:27:47,600
Expecting actual not to be null So yeah, the idea is currently null.

414
00:27:47,750 --> 00:27:48,140
Right?

415
00:27:48,740 --> 00:27:57,830
So in the time honored standards of TDD, what we want to do now is the simplest possible thing to make

416
00:27:57,830 --> 00:28:03,200
this pass, even though the simplest possible thing to make this past may likely be meaningless.

417
00:28:04,040 --> 00:28:05,180
We're going to do it anyway.

418
00:28:05,480 --> 00:28:05,780
All right.

419
00:28:05,780 --> 00:28:12,620
So let's go over here to the Get ID method, and all we need to do is just have this method somehow

420
00:28:12,620 --> 00:28:14,240
return a zero?

421
00:28:14,630 --> 00:28:15,020
Right?

422
00:28:15,530 --> 00:28:20,720
So I could either hardcoded zero here or I could set this field here to zero or something, something

423
00:28:20,720 --> 00:28:21,860
along those lines.

424
00:28:22,310 --> 00:28:27,560
Technically, I should probably be doing it right here because that would probably be the most direct

425
00:28:27,560 --> 00:28:30,240
place to do the minimal change, right?

426
00:28:30,260 --> 00:28:33,570
And then I can just click this green button here and just run that again.

427
00:28:33,590 --> 00:28:37,400
OK, so it's still filled, but I bet it's failing now.

428
00:28:37,400 --> 00:28:40,720
For now, it might be failing for a slightly different reason.

429
00:28:40,730 --> 00:28:44,780
Let's see here expecting actual zero to be greater.

430
00:28:44,870 --> 00:28:45,440
Oh, right.

431
00:28:45,470 --> 00:28:46,340
Oh, so sorry.

432
00:28:46,400 --> 00:28:48,170
Yeah, I forgot my own assertion.

433
00:28:48,170 --> 00:28:50,480
I said that it should be something greater than zero, right?

434
00:28:50,690 --> 00:28:50,980
All right.

435
00:28:50,990 --> 00:28:51,680
Easy enough.

436
00:28:51,830 --> 00:28:56,210
So let's just make this one and run that again.

437
00:28:56,630 --> 00:28:57,310
There we go.

438
00:28:57,320 --> 00:28:58,400
Now it's passing.

439
00:28:59,150 --> 00:29:04,610
All right, so let's go ahead and stop here, and we'll pick right back up at this spot when we get

440
00:29:04,610 --> 00:29:10,520
back into the next lesson and we'll start to get more into the actual database code itself.

441
00:29:10,760 --> 00:29:11,960
So I'll see you in the next one.
