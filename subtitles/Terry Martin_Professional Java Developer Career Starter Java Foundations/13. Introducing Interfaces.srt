1
00:00:00,910 --> 00:00:07,900
All right, so here we are back in the main class and, you know, in the last lesson, we did a nice

2
00:00:07,900 --> 00:00:14,530
job of simplifying each of the cases of our switch, reducing them down to about three lines of code

3
00:00:14,530 --> 00:00:15,070
or so.

4
00:00:15,310 --> 00:00:16,730
And so that's pretty nice.

5
00:00:17,050 --> 00:00:20,380
But I think we can do even more still.

6
00:00:21,070 --> 00:00:26,770
Now, one thing we often want to look out for as professional programmers is duplicated.

7
00:00:26,770 --> 00:00:35,620
Code duplicated code is often not a great thing because if we need to make changes to the underlying

8
00:00:35,620 --> 00:00:41,170
structure of the code, there's a good chance that those changes will have to be duplicated also, and

9
00:00:41,170 --> 00:00:43,960
all the same places wherever we have the duplicated code.

10
00:00:44,110 --> 00:00:49,660
Whereas if we just had that duplication minimized down to hopefully just one instance of whatever the

11
00:00:49,660 --> 00:00:54,160
duplicated thing was, then you'd only have the one place to go to make your changes.

12
00:00:54,490 --> 00:01:00,820
And so with that in mind, as I look at these case statements, I still see a little bit of duplication

13
00:01:00,820 --> 00:01:01,150
here.

14
00:01:01,210 --> 00:01:03,160
We're following the same basic pattern.

15
00:01:03,160 --> 00:01:07,220
We create a new whatever employee type, right?

16
00:01:07,240 --> 00:01:10,420
And then we call the two string method of that employee.

17
00:01:10,570 --> 00:01:14,410
And then we also call get salary of that employee.

18
00:01:14,890 --> 00:01:21,970
So the question becomes, is there a way for us to reduce this duplication a little further?

19
00:01:22,150 --> 00:01:24,130
And obviously the answer is yes.

20
00:01:24,430 --> 00:01:30,040
Now there are actually multiple ways in which to do this, but the first way I'm going to show you is

21
00:01:30,040 --> 00:01:35,680
something that we have not discussed at all, and it's an incredibly important and powerful concept

22
00:01:35,980 --> 00:01:39,200
that is the concept of interfaces.

23
00:01:39,220 --> 00:01:41,440
So we're going to learn about interfaces.

24
00:01:41,770 --> 00:01:45,190
So the first thing is, well, what is an interface?

25
00:01:45,760 --> 00:01:52,630
So let me take a quick, high level stab at trying to give you a basic definition that may or may not

26
00:01:52,630 --> 00:01:54,670
be all that helpful until you see some code.

27
00:01:55,240 --> 00:01:58,400
So interfaces are very much related to classes.

28
00:01:58,450 --> 00:02:02,610
They are almost like hollowed out skeletons of a class.

29
00:02:02,620 --> 00:02:11,540
In fact, interfaces traditionally describe some or all of the public methods of a class.

30
00:02:11,560 --> 00:02:12,100
OK.

31
00:02:12,910 --> 00:02:23,620
So one of the primary purposes of an interface is kind of to almost hide or abstract away the details

32
00:02:23,710 --> 00:02:30,880
of one or more classes so you can have one or more classes that all have a relationship to an interface.

33
00:02:31,060 --> 00:02:37,630
And generally speaking, when a class has a relationship to an interface, that class is said to implement

34
00:02:37,630 --> 00:02:39,130
that interface, OK?

35
00:02:39,460 --> 00:02:46,870
So you can have one or more classes that implement an interface so that when other code wants to use

36
00:02:46,870 --> 00:02:53,760
those classes, that code doesn't necessarily have to know specifically what classes they are.

37
00:02:53,980 --> 00:02:56,830
That code can just know about their interface.

38
00:02:57,140 --> 00:02:59,290
OK, so it gives you an abstraction.

39
00:02:59,440 --> 00:03:06,970
Maybe one way to think of an interface might be if you think of the electrical outlets in your home

40
00:03:06,970 --> 00:03:14,020
where you plug in power cords and things right into the wall of your home, the outlet with the holes

41
00:03:14,020 --> 00:03:16,120
or whatever, depending on what country you're in.

42
00:03:16,240 --> 00:03:19,270
The outlet itself is an interface.

43
00:03:19,480 --> 00:03:28,520
It interfaces your devices that you want to plug in to the electricity that your house is carrying.

44
00:03:28,540 --> 00:03:29,050
OK.

45
00:03:29,170 --> 00:03:38,230
And it gives a standard way to interface with that house electricity the little plug socket itself being

46
00:03:38,230 --> 00:03:39,430
the interface, OK?

47
00:03:39,730 --> 00:03:47,620
It also serves to abstract away some of the complexity of interacting with the electricity because you

48
00:03:47,620 --> 00:03:55,270
certainly could just have the bare wires that are behind that outlet exposed and someone come along

49
00:03:55,270 --> 00:03:57,370
and splice the wires together.

50
00:03:57,580 --> 00:04:03,340
But that would be a level of implementation detail that most people would not want to get into.

51
00:04:03,610 --> 00:04:04,000
All right.

52
00:04:04,030 --> 00:04:05,800
So enough talk about interfaces.

53
00:04:05,800 --> 00:04:13,420
Let's see how we can use an interface to help us to reduce some of the duplication that we have here.

54
00:04:13,660 --> 00:04:14,100
OK.

55
00:04:14,500 --> 00:04:16,270
So here's the thing.

56
00:04:16,420 --> 00:04:24,220
Each of these employee classes that we have here are already implementing two of the exact same methods

57
00:04:24,220 --> 00:04:25,090
that we call.

58
00:04:25,300 --> 00:04:31,510
We're calling two string, which actually, in this case, all classes have a two string method that

59
00:04:31,510 --> 00:04:36,280
can be overridden, and they all implement a get salary method.

60
00:04:36,400 --> 00:04:40,720
Obviously, that's by design, but it actually makes good sense here, right?

61
00:04:40,720 --> 00:04:47,770
Because that is a trait that all of these different types of employees have in common anyway, right?

62
00:04:48,190 --> 00:04:57,100
So when you identify methods that can be in common between multiple classes, that can be a sign that

63
00:04:57,100 --> 00:05:00,340
you could abstract those classes behind and.

64
00:05:00,480 --> 00:05:01,260
Interface.

65
00:05:01,290 --> 00:05:01,740
OK.

66
00:05:02,190 --> 00:05:04,200
So let's see what that might look like.

67
00:05:04,980 --> 00:05:13,740
So let's see if we can further reduce the lines that we have in these cases, and to do so, we might

68
00:05:13,740 --> 00:05:16,320
even change the way we're using the switch.

69
00:05:16,560 --> 00:05:24,870
What I'm what I have in mind here is instead of the switch returning the salary from each case, which

70
00:05:24,870 --> 00:05:32,760
we're doing here with the yield, perhaps we'll just create an instance of a class and then collect

71
00:05:32,760 --> 00:05:40,950
that class at the end of each of these case statements and then just get the salary one time.

72
00:05:41,100 --> 00:05:45,540
So in other words, just call it get salary once instead of for each of these types.

73
00:05:45,660 --> 00:05:48,630
If that's not making sense to you yet, don't worry, it will.

74
00:05:48,720 --> 00:05:49,950
So let's see how we can do this.

75
00:05:49,960 --> 00:05:56,430
So the first thing we need to do is to introduce an interface, and we do that very similarly as we

76
00:05:56,430 --> 00:05:57,650
would create a class.

77
00:05:57,660 --> 00:06:02,250
So I'm going to open up the project pane and let's see here.

78
00:06:02,250 --> 00:06:12,000
I'm going to select our package and right click on it and and choose new Java class again.

79
00:06:12,570 --> 00:06:15,210
However, this time we're not going to make the new class.

80
00:06:15,210 --> 00:06:16,800
We're going to make an interface.

81
00:06:16,800 --> 00:06:18,750
I'm clicking on interface now.

82
00:06:19,290 --> 00:06:19,680
All right.

83
00:06:20,660 --> 00:06:27,800
Now, I need a name for this interface, and for right now, I think the most logical name that I can

84
00:06:27,800 --> 00:06:28,580
come up with.

85
00:06:28,880 --> 00:06:35,120
It needs to be a name like you would name a class, but it needs to be a name that makes sense for all

86
00:06:35,120 --> 00:06:40,070
of the different classes that you plan to hide behind this interface.

87
00:06:40,400 --> 00:06:44,600
So we've got programmer analyst, CEO manager, right?

88
00:06:45,020 --> 00:06:53,480
What would be a good word or a good name that would describe more generically all of those types?

89
00:06:55,270 --> 00:07:00,230
Well, for right now, I think one potentially good name could be employee.

90
00:07:00,550 --> 00:07:00,850
Right?

91
00:07:01,120 --> 00:07:06,490
These are all employees of a company or worker worker could work as well.

92
00:07:06,520 --> 00:07:06,860
Right?

93
00:07:06,880 --> 00:07:07,600
Something like that.

94
00:07:07,600 --> 00:07:14,470
So we're looking for a word that just describes more generally what all of these types of roles have

95
00:07:14,470 --> 00:07:15,400
in common.

96
00:07:15,730 --> 00:07:16,180
OK.

97
00:07:16,570 --> 00:07:16,840
All right.

98
00:07:16,870 --> 00:07:19,570
So I'm going to go for employee for right now.

99
00:07:20,140 --> 00:07:23,140
So we're going to create an interface and call it employee.

100
00:07:23,350 --> 00:07:24,100
All right.

101
00:07:24,370 --> 00:07:32,950
Now we want to define the methods that all employees should have in common.

102
00:07:33,040 --> 00:07:33,520
OK.

103
00:07:34,060 --> 00:07:39,220
And there's really just one in this particular case and that method.

104
00:07:39,310 --> 00:07:43,840
So if we go back over to the main class here, that method is get salary.

105
00:07:44,290 --> 00:07:49,450
Now you might be wondering, well, we also have the two string method and they the they all have that

106
00:07:49,450 --> 00:07:50,430
in common and that is true.

107
00:07:50,440 --> 00:07:56,110
They do, however, be mindful of the fact that the two string method is actually being inherited and

108
00:07:56,110 --> 00:08:01,150
overridden from the super super class of object, right?

109
00:08:01,360 --> 00:08:09,790
And so all of these classes share the two string method in common with each other from the object super

110
00:08:09,790 --> 00:08:10,210
class.

111
00:08:10,390 --> 00:08:17,320
And so we're not going to define the two string method on the interface because it's already in common

112
00:08:17,320 --> 00:08:18,880
to all of these classes.

113
00:08:18,910 --> 00:08:19,300
OK.

114
00:08:19,600 --> 00:08:19,950
All right.

115
00:08:19,960 --> 00:08:25,240
So you need to get the get salary method on to the interface.

116
00:08:25,720 --> 00:08:26,100
All right.

117
00:08:26,110 --> 00:08:32,290
So there are actually a couple of ways to get a get salaried method on to the employee class.

118
00:08:32,560 --> 00:08:39,130
So one thing we can do is to just jump into any one of these new classes that we created programmer,

119
00:08:39,130 --> 00:08:41,040
manager, CEO or analyst.

120
00:08:41,050 --> 00:08:48,610
I'll jump into the programmer class here, and I'm just going to copy this method here minus the curly

121
00:08:48,610 --> 00:08:49,090
brace.

122
00:08:49,090 --> 00:08:50,730
OK, and I'll do a command.

123
00:08:50,740 --> 00:08:53,680
See, then jump over to employee.

124
00:08:54,990 --> 00:08:56,440
Shift enter.

125
00:08:56,460 --> 00:08:58,440
And then I'm going to paste.

126
00:08:59,580 --> 00:09:07,020
And then put a semicolon now, not a curly brace, but a semicolon now, because an interface defines

127
00:09:07,020 --> 00:09:12,570
all of the public methods that you might want a class to implement.

128
00:09:12,810 --> 00:09:15,080
We don't need the public keyword.

129
00:09:15,210 --> 00:09:21,060
It's not wrong if we have it there, but we don't need it because by default, any methods that are

130
00:09:21,060 --> 00:09:24,720
defined on an interface are understood to be public.

131
00:09:24,750 --> 00:09:30,960
OK, so I'm going to just remove the public key word here because it's superfluous at this point.

132
00:09:31,440 --> 00:09:33,180
Now why the semicolon?

133
00:09:33,750 --> 00:09:43,800
Well, because the general purpose of an interface is to simply describe what methods should be implemented

134
00:09:43,800 --> 00:09:46,620
in classes of this interface.

135
00:09:46,640 --> 00:09:49,590
Okay, so it's just a description for the most part.

136
00:09:49,860 --> 00:09:55,830
Now, in the latest versions of Java, they have actually expanded what we can do with an interface

137
00:09:55,830 --> 00:10:01,410
to the point that we actually can provide implementation details and by implementation details.

138
00:10:01,410 --> 00:10:07,230
I mean, you know, curly brace and then like, do stuff, you know, write code in here, that would

139
00:10:07,230 --> 00:10:08,730
be an implementation detail.

140
00:10:08,910 --> 00:10:15,960
We actually can do that under certain circumstances in interfaces, but that's a really new capability.

141
00:10:15,960 --> 00:10:23,280
And and it's intended mostly for a very specific set of circumstances that we don't necessarily have

142
00:10:23,280 --> 00:10:24,030
right now.

143
00:10:24,150 --> 00:10:26,440
So we won't be getting into that right now.

144
00:10:26,760 --> 00:10:33,510
But the historical and standard use of an interface is simply to say, Hey, if you're an employee,

145
00:10:33,930 --> 00:10:38,740
you're capable of giving a salary, OK, that's what this method would do.

146
00:10:38,760 --> 00:10:39,210
All right.

147
00:10:39,810 --> 00:10:47,460
Now how we give the salary that's going to be left as an implementation detail of the individual classes

148
00:10:47,460 --> 00:10:49,470
that implement this interface.

149
00:10:49,470 --> 00:10:51,270
And so we're not getting into that here.

150
00:10:51,300 --> 00:10:57,510
OK, now I will make it a little more clear as to exactly why we do it in this way, if it's not clear

151
00:10:57,510 --> 00:11:02,370
yet, but right now, this is all we need on the employee interface.

152
00:11:02,760 --> 00:11:10,050
Now, the next thing we need to do, though, is we need to expand the definition of our employee classes

153
00:11:10,050 --> 00:11:16,410
to tell Java that these classes will now be implementing the employee interface.

154
00:11:16,830 --> 00:11:21,660
And so if we jump over to programmer, for example, and go up to the top.

155
00:11:23,320 --> 00:11:30,700
On this line, public class programmer, if we put our cursor after the word programmer, we can now

156
00:11:30,700 --> 00:11:36,820
type all lowercase implements space capital employee.

157
00:11:38,040 --> 00:11:39,870
Space, just like that.

158
00:11:40,260 --> 00:11:47,400
So now that is telling Java that this class not only is a programmer, but it is essentially a type

159
00:11:47,400 --> 00:11:48,270
of employee.

160
00:11:48,420 --> 00:11:48,900
OK.

161
00:11:49,440 --> 00:11:51,570
That's kind of what we're saying, kind of.

162
00:11:52,200 --> 00:11:52,530
All right.

163
00:11:52,650 --> 00:11:53,790
Now this is different.

164
00:11:53,940 --> 00:12:02,100
We have seen in earlier modules where I introduced you to some of the object oriented concepts of classes

165
00:12:02,100 --> 00:12:06,150
and super classes and hierarchies and extensions and things of that sort.

166
00:12:06,180 --> 00:12:06,510
Right.

167
00:12:06,810 --> 00:12:10,420
This is related, but not quite the same thing.

168
00:12:10,440 --> 00:12:15,720
OK, because this employee doesn't actually implement any actual code, right?

169
00:12:15,990 --> 00:12:18,210
It's more like just a while.

170
00:12:18,210 --> 00:12:19,200
It's just an interface.

171
00:12:19,200 --> 00:12:26,580
It's just a template, if you will, that says employees have the ability to give their salary information.

172
00:12:26,880 --> 00:12:27,150
All right.

173
00:12:27,160 --> 00:12:32,070
So now we just want to do this same thing on the other employee class type.

174
00:12:32,080 --> 00:12:36,960
So I'm going to copy this and implements employee and I'm going to jump over to manager.

175
00:12:38,050 --> 00:12:41,290
And I'm going to put my cursor right there and paste.

176
00:12:42,360 --> 00:12:45,780
And I'm going to do the same thing on CEO.

177
00:12:46,800 --> 00:12:48,030
Jump up to the top.

178
00:12:48,330 --> 00:12:49,770
Put my cursor right there.

179
00:12:49,800 --> 00:12:55,830
Paste space and do the same thing for analyst as well, put my cursor right there.

180
00:12:56,100 --> 00:12:58,650
Space are paced and space.

181
00:12:59,070 --> 00:12:59,730
There we go.

182
00:12:59,760 --> 00:13:00,180
OK.

183
00:13:00,420 --> 00:13:06,660
So other than just pasting the implements employee onto each of these classes, I really haven't made

184
00:13:06,660 --> 00:13:07,710
any other changes.

185
00:13:07,740 --> 00:13:15,900
OK, now jumping back over to the main class, though, now here this class is using all of these different

186
00:13:15,900 --> 00:13:17,400
types of employees now.

187
00:13:17,730 --> 00:13:20,580
And so now we can start to make some changes here.

188
00:13:20,700 --> 00:13:22,800
That might be kind of interesting.

189
00:13:22,890 --> 00:13:24,720
So let's see here.

190
00:13:24,720 --> 00:13:26,880
First, let's make a little space again.

191
00:13:27,270 --> 00:13:33,750
So I think one of the first things I'm thinking of doing here is to change what the Switch statement

192
00:13:33,750 --> 00:13:34,710
is returning.

193
00:13:34,920 --> 00:13:38,220
So currently, the Switch statement is returning the actual salary.

194
00:13:38,580 --> 00:13:46,260
I'm now thinking of having the Switch statement simply return whatever new employee type we are creating.

195
00:13:46,290 --> 00:13:46,800
OK.

196
00:13:46,950 --> 00:13:48,270
That's what I wanted to do.

197
00:13:48,450 --> 00:13:51,240
Just return the employee type.

198
00:13:51,480 --> 00:13:56,880
But if I return that type, I may want to hold it in a variable.

199
00:13:57,060 --> 00:14:04,530
Now, the reason we currently are creating the employee type and then holding it in a local variable

200
00:14:04,530 --> 00:14:14,490
local to the case is because in order to be able to reference the object that we're creating here twice,

201
00:14:14,790 --> 00:14:22,260
like on this line and then on this line, we need we need a variable right to refer to to to make these

202
00:14:22,260 --> 00:14:23,330
two different calls.

203
00:14:23,340 --> 00:14:24,810
And that variable.

204
00:14:25,170 --> 00:14:30,270
Up until now had to be of whatever the type is that we just created.

205
00:14:30,270 --> 00:14:35,370
Okay, so if you're instantiating a programmer, then you have to create a variable of type programmer.

206
00:14:35,460 --> 00:14:40,440
But now that we have an interface, we no longer have that necessity.

207
00:14:40,710 --> 00:14:48,810
We can now do something pretty cool, which is we can store a reference to each of these types in a

208
00:14:48,810 --> 00:14:51,240
variable of type employee.

209
00:14:51,450 --> 00:14:57,030
Let me show you what that looks like, so I can actually just select each of these.

210
00:14:57,330 --> 00:15:01,140
I'm going to select programmer, and in fact, I'm going to use my.

211
00:15:02,640 --> 00:15:07,230
Option shift here, and I'm going to select the programmer here, and I'm going to select the manager

212
00:15:07,230 --> 00:15:11,730
here by double clicking, so I'm holding down an option shift while I double click and I'm going to

213
00:15:11,730 --> 00:15:15,060
select the analyst and I'm going to select the CEO.

214
00:15:15,060 --> 00:15:18,060
OK, I've selected all of these, all at the same time.

215
00:15:18,300 --> 00:15:27,120
And now I can actually refer to them all as type employee like so and then I will hit return and that's

216
00:15:27,120 --> 00:15:28,050
going to.

217
00:15:29,690 --> 00:15:31,430
Complete that and look at what happened there.

218
00:15:31,580 --> 00:15:32,450
No errors.

219
00:15:33,580 --> 00:15:42,340
Now, I could not have done that if these classes were not implementing the interface called employee.

220
00:15:42,370 --> 00:15:42,790
All right.

221
00:15:43,060 --> 00:15:47,950
Now that didn't really buy me anything yet, but it's about two in just a moment here.

222
00:15:48,340 --> 00:15:48,730
All right.

223
00:15:49,150 --> 00:15:56,230
So I did that mostly just to show you that I can now refer to each of these instances as an employee.

224
00:15:57,280 --> 00:16:06,580
And because the employee interface defines a get salary method on it, I'm able to call get salary.

225
00:16:06,710 --> 00:16:13,180
OK, now, if I didn't have a get salary method defined on employee, I couldn't do this and let me

226
00:16:13,180 --> 00:16:14,260
prove that to you real quick.

227
00:16:14,260 --> 00:16:22,480
So if I jump into the employee interface and I temporarily comment out that definition there, that

228
00:16:22,480 --> 00:16:23,620
declaration there.

229
00:16:23,800 --> 00:16:26,080
And I jump back over to the main class.

230
00:16:27,180 --> 00:16:36,390
Now we get red marks for each of these calls, because this analyst is not known in this code as something

231
00:16:36,390 --> 00:16:39,690
of type analyst, which has he gets salary method on it.

232
00:16:39,900 --> 00:16:47,880
This analyst is known as something of type employee, and currently the employee interface does not

233
00:16:47,880 --> 00:16:49,950
have a get salary method on it.

234
00:16:49,980 --> 00:16:50,430
OK.

235
00:16:50,520 --> 00:16:51,780
Is that making sense?

236
00:16:52,380 --> 00:16:52,770
All right.

237
00:16:52,800 --> 00:17:00,560
So now I will jump back over to the employee interface and I will uncomment the get salary method and

238
00:17:00,570 --> 00:17:02,850
then I will jump back over to main again.

239
00:17:02,850 --> 00:17:05,040
And now these methods are good.

240
00:17:05,190 --> 00:17:12,840
OK, so even though the analyst class had a get salary method on it, this analyst variable is only

241
00:17:13,110 --> 00:17:21,780
seen as an employee currently in this code, and the employee class didn't have the get salary method

242
00:17:21,780 --> 00:17:23,880
on it when we commented it out.

243
00:17:23,940 --> 00:17:24,360
OK.

244
00:17:24,480 --> 00:17:30,150
So you could almost think of it as this interface is almost kind of masking all of the methods that

245
00:17:30,150 --> 00:17:32,940
may actually exist on a given class.

246
00:17:32,970 --> 00:17:41,160
If those methods aren't defined on the interface, then any variable whose type is that interface won't

247
00:17:41,160 --> 00:17:46,210
expose all of the other methods that may exist on the underlying class.

248
00:17:46,230 --> 00:17:49,830
OK, so it's kind of masking them, if you will, or at least it can.

249
00:17:50,490 --> 00:17:53,280
So let's see what changes we can make here.

250
00:17:53,290 --> 00:18:02,850
So what I want to do now is to actually just return the instance rather than the salary itself.

251
00:18:02,850 --> 00:18:04,530
So we're going to make a couple of changes here.

252
00:18:04,560 --> 00:18:12,870
One change I want to make is let's make a new line right here at the switch and let's let's prepare

253
00:18:12,870 --> 00:18:17,820
for the switch to simply return the instance as an employee.

254
00:18:17,850 --> 00:18:18,270
OK.

255
00:18:18,600 --> 00:18:20,040
So let's see here.

256
00:18:20,040 --> 00:18:28,050
What we can do is let's create another variable here of type employee and we'll just call it employee

257
00:18:28,620 --> 00:18:34,800
and we'll set it to null initially, which means it hasn't been instantiated yet.

258
00:18:34,980 --> 00:18:44,070
All right, then, for this switch here, what we'll do is we'll simply say employee equals like so

259
00:18:44,220 --> 00:18:47,190
and I would like to an indent that also.

260
00:18:47,430 --> 00:18:47,850
All right.

261
00:18:48,330 --> 00:18:51,180
And then this total salaries bit here.

262
00:18:51,210 --> 00:18:54,240
I'm going to delete it for now.

263
00:18:54,450 --> 00:18:58,530
All right now, our yield statement is wrong, right?

264
00:18:58,560 --> 00:19:07,620
So we can actually simplify what's in these case statements now to the point that we don't even need

265
00:19:07,620 --> 00:19:09,150
the curly brace anymore.

266
00:19:09,150 --> 00:19:10,340
The curly brace here.

267
00:19:10,350 --> 00:19:14,760
This code block is here because we have multiple lines of code that we're doing.

268
00:19:15,000 --> 00:19:20,520
But now all we need to do is just return a new instance of an employee.

269
00:19:20,910 --> 00:19:29,760
And so what I think we can do is I'm going to copy this line here, then I'm going to select this entire

270
00:19:29,760 --> 00:19:32,400
code block and I'm going to simply paste.

271
00:19:33,410 --> 00:19:34,100
Like so.

272
00:19:35,080 --> 00:19:37,420
And then I'm going to do the same thing here.

273
00:19:37,840 --> 00:19:39,040
Copy all of that.

274
00:19:40,390 --> 00:19:44,500
Then select this whole entire code block and then paste.

275
00:19:46,540 --> 00:19:48,400
And same thing again.

276
00:19:49,090 --> 00:19:50,590
Copy all of this.

277
00:19:53,970 --> 00:19:59,820
Select the code block and paste books, and I missed the semicolon there.

278
00:19:59,850 --> 00:20:00,180
All right.

279
00:20:00,210 --> 00:20:01,920
And then for this last one?

280
00:20:02,130 --> 00:20:02,830
Same deal.

281
00:20:03,770 --> 00:20:07,760
Copy all of that, then paste.

282
00:20:08,090 --> 00:20:08,850
All right.

283
00:20:08,870 --> 00:20:12,740
So look what we have here, it's getting getting smaller and smaller, right?

284
00:20:12,830 --> 00:20:18,350
All right now, we've got to figure out what we want to do with the default for right now.

285
00:20:18,440 --> 00:20:19,970
I don't want to think about it too much.

286
00:20:19,970 --> 00:20:24,260
So it needs to return something that can represent an object.

287
00:20:24,260 --> 00:20:27,620
What I'm inclined to do for right now is just to return null.

288
00:20:27,890 --> 00:20:28,540
OK, yes.

289
00:20:28,540 --> 00:20:33,560
So looks like it's OK with that will need to be a little careful with that decision, though, in the

290
00:20:33,560 --> 00:20:34,070
future.

291
00:20:34,640 --> 00:20:39,920
But for right now, it makes all the errors go away and we don't have to deal with exactly the thinking

292
00:20:39,920 --> 00:20:41,450
along these lines right now.

293
00:20:41,810 --> 00:20:47,480
Now we're not actually calculating anything anymore, though, so we need to bring back the actual calculations.

294
00:20:47,930 --> 00:20:57,560
So what we can do now is outside of our switch, which would be right here, we can still call the two

295
00:20:57,590 --> 00:21:02,960
string and then get salary method, but now we only need to call them one time each instead of for each

296
00:21:02,960 --> 00:21:03,980
of these types.

297
00:21:04,280 --> 00:21:14,060
Watch this So we can call system that out dot employee, which is what we're capturing from any one

298
00:21:14,060 --> 00:21:16,910
of these dot to string.

299
00:21:18,070 --> 00:21:22,240
And then we can also call total salaries.

300
00:21:23,260 --> 00:21:24,580
Plus equals.

301
00:21:25,910 --> 00:21:28,520
Employees get salary.

302
00:21:28,700 --> 00:21:29,480
Look at that.

303
00:21:29,510 --> 00:21:30,680
Does that make sense?

304
00:21:31,100 --> 00:21:38,720
And the reason we can do all of this now is because even though each of these is a different class,

305
00:21:39,470 --> 00:21:48,560
they all implement the same employee interface, which defines a get salary method on it.

306
00:21:48,710 --> 00:21:52,820
And that's primarily all we actually care about anyway as we get salary method.

307
00:21:52,880 --> 00:22:00,470
So this code here doesn't even need to care about the distinction of a programmer or a manager or an

308
00:22:00,470 --> 00:22:02,060
analyst or a CEO.

309
00:22:02,390 --> 00:22:05,270
This code here only cares about two things.

310
00:22:05,270 --> 00:22:12,050
It knows that all class objects have a two string method, so it's going to call that, and it knows

311
00:22:12,050 --> 00:22:18,470
that all employees have a get salary method, and that's the only thing it needs to care about.

312
00:22:18,830 --> 00:22:19,320
OK.

313
00:22:19,940 --> 00:22:28,460
And so these details of what the underlying classes are unimportant to this code here, and that allows

314
00:22:28,460 --> 00:22:34,490
us to abstract those details away and just get right down to the part that we actually care about,

315
00:22:34,490 --> 00:22:36,140
which is the get salary.

316
00:22:36,890 --> 00:22:43,370
So now let me prove it, and let's run this and make sure we're we're still getting 8.6 million or so.

317
00:22:43,850 --> 00:22:44,750
All right, so.

318
00:22:47,000 --> 00:22:48,410
Hey, looking good.

319
00:22:49,250 --> 00:22:49,790
Look at that.

320
00:22:49,880 --> 00:22:58,340
No difference in the output and still getting 8.6 million, and we just made our code even shorter than

321
00:22:58,340 --> 00:23:03,530
it had been before, and we didn't have to do very much to get this nice benefit either.

322
00:23:03,800 --> 00:23:08,120
Now this default case here is a little problematic.

323
00:23:08,690 --> 00:23:17,570
If we were to add another line in here or if we had a typo, for example on one of the rolls here,

324
00:23:18,470 --> 00:23:24,710
then it would not match any of these cases and it would come down to the default, which currently is

325
00:23:24,710 --> 00:23:25,160
null.

326
00:23:25,490 --> 00:23:32,940
And as soon as we tried to call to string on a null object, we'd get a null pointer exception.

327
00:23:32,960 --> 00:23:36,090
OK, we'd get an exception because that can't be null.

328
00:23:36,440 --> 00:23:40,270
So in real life, this wouldn't be quite good enough.

329
00:23:40,280 --> 00:23:42,140
This would not be very robust code.

330
00:23:42,380 --> 00:23:46,010
Now, a couple of things that we could do about that circumstance.

331
00:23:46,340 --> 00:23:54,170
We could define one more class, which is kind of like an empty employee class, and that could be like

332
00:23:54,170 --> 00:23:55,000
our default, right?

333
00:23:55,010 --> 00:24:00,170
Like we could say new nobody employee or something, something along those lines.

334
00:24:00,350 --> 00:24:05,540
And when you call, get salary on that class, it could just return zero.

335
00:24:05,780 --> 00:24:07,610
You know, we could do something like that.

336
00:24:07,730 --> 00:24:09,650
I will leave that as an exercise for you.

337
00:24:09,650 --> 00:24:13,790
But basically, you know, you just create another class.

338
00:24:14,000 --> 00:24:15,470
You'd call it whatever.

339
00:24:15,590 --> 00:24:21,950
You'd make this new class, implement the employee interface, which would then force you to also implement

340
00:24:21,950 --> 00:24:23,150
the get salary method.

341
00:24:23,150 --> 00:24:26,450
And then in that get salary method, you could just return zero.

342
00:24:26,870 --> 00:24:29,300
So it would be pretty trivial thing to do.

343
00:24:29,990 --> 00:24:30,340
Yeah.

344
00:24:30,350 --> 00:24:33,350
So like I said, I'll leave that as an exercise for you.

345
00:24:33,800 --> 00:24:37,430
OK, so I think we're going to wrap up this lesson.

346
00:24:37,430 --> 00:24:40,460
We have accomplished a good deal now.

347
00:24:40,700 --> 00:24:43,640
So you've been introduced to interfaces.

348
00:24:43,910 --> 00:24:46,340
We'll just take another quick look at the interface.

349
00:24:46,340 --> 00:24:54,110
So it looks a lot like a class, except instead of the word class, we use the word interface all lowercase

350
00:24:54,110 --> 00:25:00,650
than the name of the interface, which again follows the same naming conventions as classes and inhumane.

351
00:25:01,220 --> 00:25:04,050
And then we can define methods in it.

352
00:25:04,070 --> 00:25:11,240
We don't need to be explicit about the visibility for the most part, because by default, any methods

353
00:25:11,240 --> 00:25:16,400
that we declare in an interface are presumed to be public.

354
00:25:16,580 --> 00:25:23,120
That's kind of the whole point of an interface is to say, Hey, this is the the public interface of

355
00:25:23,390 --> 00:25:25,670
of this class or these classes.

356
00:25:25,820 --> 00:25:26,210
All right.

357
00:25:26,360 --> 00:25:31,760
We give it the method name, but we don't supply an implementation of the method.

358
00:25:31,760 --> 00:25:33,550
So we just put a semicolon there.

359
00:25:33,560 --> 00:25:43,430
OK, so all we're really saying to code like this code here is objects of type employee have a get salary

360
00:25:43,430 --> 00:25:44,290
method on them.

361
00:25:44,390 --> 00:25:44,900
OK.

362
00:25:45,020 --> 00:25:46,940
We're saying things like that.

363
00:25:47,030 --> 00:25:48,050
Let's see.

364
00:25:48,500 --> 00:25:52,220
We can have lots of methods on an interface, by the way.

365
00:25:52,250 --> 00:25:55,310
I'm only showing one here, but you can have as many as you need.

366
00:25:55,700 --> 00:26:03,050
However, for every method that you define on an interface, all of the classes that implement that

367
00:26:03,050 --> 00:26:08,270
interface must also implement those methods if it is a concrete class.

368
00:26:08,300 --> 00:26:13,940
Now we're going to learn in the future about things like abstract classes and in an abstract class.

369
00:26:14,090 --> 00:26:20,150
Abstract classes don't have to implement the methods of an interface, so we will take a look at that.

370
00:26:20,540 --> 00:26:23,840
So I'll try to remember to make sure to show you what that looks like.

371
00:26:23,840 --> 00:26:29,810
But regular classes like these that we have created here, if they implement an interface, then they

372
00:26:29,810 --> 00:26:32,960
must implement the methods of that interface.

373
00:26:32,990 --> 00:26:37,520
Also, classes can implement multiple interfaces.

374
00:26:37,520 --> 00:26:43,010
So if I had other interfaces, in fact, maybe yeah, if I had other interfaces here, I could actually

375
00:26:43,010 --> 00:26:50,510
have a comma delimited list and mention, you know, other interfaces, interface one, an interface

376
00:26:50,510 --> 00:26:52,220
two and so on and so forth.

377
00:26:52,520 --> 00:27:00,050
And all of the methods that would be declared on these interfaces would have to be implemented in this

378
00:27:00,050 --> 00:27:00,650
class.

379
00:27:01,130 --> 00:27:09,300
What's cool about that is that I could then refer to instances of this class by any of these interfaces.

380
00:27:09,320 --> 00:27:17,270
Now, if I were to refer to this class by one of these other interfaces, I'd only be able to access

381
00:27:17,270 --> 00:27:20,120
the methods that are defined on that interface.

382
00:27:20,390 --> 00:27:27,830
So if I created an instance of a programmer and stored it in a variable of type interface two, I would

383
00:27:27,830 --> 00:27:36,590
not then be able to call the employee died get salary method because I was referring to it as an interface,

384
00:27:36,590 --> 00:27:38,450
too, and not as an employee.

385
00:27:38,480 --> 00:27:38,990
OK.

386
00:27:39,380 --> 00:27:45,380
So again, we'll take a look at what some of these other scenarios look like in the near future.

387
00:27:46,570 --> 00:27:47,000
All right.

388
00:27:47,020 --> 00:27:53,590
So before I wrap this up, I want to take one more quick stab at giving you a really simple summarization

389
00:27:53,590 --> 00:27:55,600
of what interfaces are for.

390
00:27:56,080 --> 00:27:57,040
And here we go.

391
00:27:57,340 --> 00:28:04,810
So if you have multiple classes that are not related to each other, in other words, they don't all

392
00:28:04,810 --> 00:28:07,840
inherit from the same parent class.

393
00:28:08,080 --> 00:28:10,870
You know, they they're just completely separate classes.

394
00:28:11,080 --> 00:28:18,580
But they do all implement some version of the same function or functionality.

395
00:28:18,760 --> 00:28:26,290
Like in our case with these classes here, the programmer manager, a CEO and analyst, all are capable

396
00:28:26,290 --> 00:28:29,500
of calculating a salary, right?

397
00:28:29,680 --> 00:28:31,660
But they're not related to each other.

398
00:28:31,870 --> 00:28:35,890
They just happen to all have this ability to calculate a salary.

399
00:28:36,220 --> 00:28:44,470
You can make those classes all look like they are the same type by slapping an interface on top of them,

400
00:28:44,470 --> 00:28:49,360
so to speak, or by making them all quote unquote, implement that interface.

401
00:28:49,720 --> 00:28:58,930
And that way, other code, such as the main class, can think that they are all the same type and and

402
00:28:58,930 --> 00:29:06,310
thus make it really easy for the main class or some other class to interact with all of these other

403
00:29:06,310 --> 00:29:09,970
classes, even though they're not actually related to each other.

404
00:29:09,970 --> 00:29:11,890
So that's the that's the gist right there.

405
00:29:11,980 --> 00:29:17,560
You want to make a bunch of different unrelated classes look like they are the same type.

406
00:29:17,920 --> 00:29:18,280
All right.

407
00:29:18,970 --> 00:29:25,810
This is just an initial look at what we can do with interfaces and the fact that they even exist.

408
00:29:26,320 --> 00:29:26,650
All right.

409
00:29:26,660 --> 00:29:29,620
So I'm going to wrap this up and I will see you in the next one.
