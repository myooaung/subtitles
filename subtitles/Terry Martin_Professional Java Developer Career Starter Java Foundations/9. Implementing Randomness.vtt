WEBVTT
1
00:00:00.300 --> 00:00:08.550
All right, so in the last lesson, we started implementing this method to give us some idea of whether

2
00:00:08.550 --> 00:00:17.550
or not our get random number method is capable of generating unique random numbers within the range

3
00:00:17.580 --> 00:00:23.820
of roughly like one through 10 or technically right now, I guess it's able to check zero through 10

4
00:00:24.290 --> 00:00:25.320
for the time being.

5
00:00:25.440 --> 00:00:32.640
And the way that it's doing that is by simply using an array of currently an array of 11 elements numbered

6
00:00:32.700 --> 00:00:34.080
zero through 10.

7
00:00:34.380 --> 00:00:41.850
And any time the method get random number generator, a number presumably between zero and 10, we just

8
00:00:41.850 --> 00:00:47.810
put a one in the element with that same index number.

9
00:00:47.820 --> 00:00:51.540
OK, so as you see here, these would be the index numbers of the array.

10
00:00:51.570 --> 00:00:52.680
This would be the array.

11
00:00:52.980 --> 00:00:53.370
OK?

12
00:00:53.490 --> 00:01:00.500
And these would be the values example values that we could potentially be storing in those elements,

13
00:01:00.510 --> 00:01:00.810
right?

14
00:01:00.990 --> 00:01:07.380
So every time we get random number, generator number between in this case, zero through 11, if it

15
00:01:07.380 --> 00:01:10.710
generates one of those numbers, we access that particular element.

16
00:01:10.920 --> 00:01:13.770
And then we saw a one in that element.

17
00:01:13.980 --> 00:01:22.320
And then down here we use a for loop to simply loop through each of the 11 elements of that array and

18
00:01:22.320 --> 00:01:24.960
sum up the values in them.

19
00:01:25.170 --> 00:01:32.250
And so if we had a perfect get random number method that we ran, let's say, 100 times to make sure

20
00:01:32.250 --> 00:01:35.650
that the randomness gets a chance to kind of spread out, right?

21
00:01:35.670 --> 00:01:42.750
Then you would expect that if you were to sum up all of the ones that we had put in all of the elements,

22
00:01:42.750 --> 00:01:49.110
you should get it a 10 back out or currently the way it's written, you'd get 11 now because we're also

23
00:01:49.350 --> 00:01:52.120
allowing for the zero with Element four right now.

24
00:01:52.140 --> 00:01:53.970
Well, we'll limit that soon enough.

25
00:01:54.180 --> 00:02:01.530
So we finished writing this test and we ran it and it gave us a one when we were expecting a 10, which

26
00:02:01.530 --> 00:02:07.620
I thought was good because that represents the fact that currently a random number generator is giving

27
00:02:07.620 --> 00:02:10.040
us a zero every single time.

28
00:02:10.050 --> 00:02:11.220
So I think that's good.

29
00:02:11.460 --> 00:02:19.430
So now we just need to go implement this get random number method to actually generate random numbers

30
00:02:19.440 --> 00:02:20.550
right now.

31
00:02:20.580 --> 00:02:25.170
One thing we want to be careful about when we're doing this kind of testing is you want to be careful.

32
00:02:25.470 --> 00:02:30.870
Are you testing your code or are you testing someone else's code, right?

33
00:02:31.260 --> 00:02:34.470
We can already pretty much assume that this could get random.

34
00:02:34.470 --> 00:02:41.880
Number method is going to end up simply using one of the random number generation techniques that was

35
00:02:41.880 --> 00:02:43.590
built into Java.

36
00:02:44.070 --> 00:02:49.680
And one thing that you want to be careful of when writing unit tests is you don't generally want to

37
00:02:49.680 --> 00:02:52.350
be writing unit tests for other people's code.

38
00:02:52.770 --> 00:03:00.780
We tend to assume that especially code that comes from a framework or that is part of Java itself has

39
00:03:00.780 --> 00:03:06.300
already been thoroughly tested, and we don't want to waste our time testing their code right.

40
00:03:06.550 --> 00:03:07.980
We just want to test our code.

41
00:03:08.220 --> 00:03:13.500
So what I would say we're really doing here is we don't want to be writing a test that's testing jobless

42
00:03:13.500 --> 00:03:15.200
ability to generate random numbers.

43
00:03:15.210 --> 00:03:23.190
Instead, we want to write a test that's testing our ability to utilize java's random number generation

44
00:03:23.310 --> 00:03:25.560
for the purposes of our game.

45
00:03:25.620 --> 00:03:26.010
OK.

46
00:03:26.040 --> 00:03:29.850
There's a there's a certain distinction there, so just be careful about that.

47
00:03:30.150 --> 00:03:30.420
All right.

48
00:03:30.430 --> 00:03:37.770
So first thing I think I would do is to jump into this get random number method here, which is currently

49
00:03:37.770 --> 00:03:40.800
hardcoded to just generate a zero every time.

50
00:03:41.220 --> 00:03:47.010
And now we know that what we really want is for this method to generate a random number between one

51
00:03:47.010 --> 00:03:51.030
and 10 inclusively, and we know how we can do that.

52
00:03:51.690 --> 00:03:59.340
So we can use java's random class by creating an instance of a new brand which exists on the Java that

53
00:03:59.370 --> 00:04:00.870
util package, right?

54
00:04:03.600 --> 00:04:05.400
And then we'll need to import that.

55
00:04:08.160 --> 00:04:08.800
Dot.

56
00:04:09.240 --> 00:04:12.170
And then we can simply call next and.

57
00:04:12.420 --> 00:04:17.140
But I will use the version of next extent that allows us to pass in an upper bound.

58
00:04:17.170 --> 00:04:23.190
And if you recall this version that accepts an upper bound, that upper bound will not be inclusive.

59
00:04:23.190 --> 00:04:30.930
So if I were to say 10, for example, then this method would be generating random numbers between zero

60
00:04:30.930 --> 00:04:31.980
and nine.

61
00:04:32.130 --> 00:04:38.010
Right, which is fine, because then what we can do is simply add one to it.

62
00:04:38.460 --> 00:04:43.710
And so now we would be returning numbers between one and 10 inclusively.

63
00:04:43.920 --> 00:04:50.450
OK, so next tent always will return numbers starting on the lower end with a zero.

64
00:04:50.460 --> 00:04:57.210
And if you read the Java documentation, it says that distributed integer value between zero inclusively

65
00:04:57.510 --> 00:04:59.850
and the specified value exclusive.

66
00:04:59.850 --> 00:05:01.260
So we specify the 10.

67
00:05:01.500 --> 00:05:06.300
But that would be exclusive, which means you're going to get back between zero and nine by default.

68
00:05:06.600 --> 00:05:12.600
But then we just had one to shift that range up by one number to from one to 10.

69
00:05:12.720 --> 00:05:13.120
Right.

70
00:05:13.140 --> 00:05:15.060
And that might be all we need there.

71
00:05:15.330 --> 00:05:19.680
So in fact, let's just run this whole entire thing again.

72
00:05:19.680 --> 00:05:25.590
Now I can already anticipate we may have just broken one of the other test methods, but let's just

73
00:05:25.590 --> 00:05:26.760
see what happens here.

74
00:05:27.600 --> 00:05:32.040
OK, so we got one failing test.

75
00:05:32.430 --> 00:05:39.030
First off, the random number generation test is is passing now, which means that this approach to

76
00:05:39.030 --> 00:05:46.590
generate generating a random number is giving us an even enough spread that it is hitting all numbers

77
00:05:46.590 --> 00:05:48.060
between one and 10.

78
00:05:48.210 --> 00:05:49.950
I don't know how equally it's hitting them.

79
00:05:49.950 --> 00:05:56.490
We're not tracking that with our tests, but we do know that all numbers between one and 10 are being

80
00:05:56.520 --> 00:05:59.700
chosen eventually if you run it 100 times.

81
00:06:00.000 --> 00:06:04.920
I'd be curious to play around with that test, by the way, in the future and reduce the number of times

82
00:06:04.920 --> 00:06:10.110
that we run it from 100 and see what is the threshold at which you always get it like, do you have

83
00:06:10.110 --> 00:06:12.510
to read it 20 times or 50 times or whatever?

84
00:06:12.630 --> 00:06:16.320
That would be a curious little experiment for us to try to remember to come back to.

85
00:06:16.470 --> 00:06:22.110
However, now we do have one test that is failing, and that is the test simple win situation.

86
00:06:22.140 --> 00:06:27.080
So let's jump in to that test and see what is failing now.

87
00:06:27.090 --> 00:06:32.130
And I was anticipating that something would fail because I knew the way that we wrote our implementations

88
00:06:32.130 --> 00:06:33.930
wasn't very robust yet.

89
00:06:34.140 --> 00:06:35.370
But let's see what we got here.

90
00:06:36.310 --> 00:06:41.080
All right, so we're calling the get random number method, which we now know is truly generating a

91
00:06:41.080 --> 00:06:42.910
random number between one and 10.

92
00:06:43.660 --> 00:06:48.250
And then we make a guess by passing in that random number.

93
00:06:49.300 --> 00:06:51.370
And I think I know what the problem is here.

94
00:06:51.730 --> 00:06:57.280
So the test is correct, but our actual game logic is bad.

95
00:06:57.640 --> 00:07:06.340
So if we jump over to this game, that gets massive here, so we will see that what's happening is first,

96
00:07:06.340 --> 00:07:13.120
the test is calling this get random number and that is generate generating a random number for us between

97
00:07:13.120 --> 00:07:13.900
one and 10.

98
00:07:14.350 --> 00:07:19.240
And then the test is taking whatever that number was and passing it into this method here.

99
00:07:19.240 --> 00:07:20.470
So let's say it was a three.

100
00:07:21.160 --> 00:07:26.950
So then we're doing a guest number, which in this example would be a three, for example, we're saying

101
00:07:26.950 --> 00:07:31.510
is three equal two and then we're calling the get random number method again.

102
00:07:32.350 --> 00:07:38.170
And so that's going to generate another random number, which we may not necessarily be the same number

103
00:07:38.170 --> 00:07:39.760
that we had before.

104
00:07:39.880 --> 00:07:40.300
Right.

105
00:07:40.660 --> 00:07:42.070
That's the problem here.

106
00:07:42.310 --> 00:07:50.110
We're not retaining the randomly generated number that we generated the initial time.

107
00:07:50.470 --> 00:07:56.190
And so this calls into question, OK, so how should we be generating random number?

108
00:07:56.200 --> 00:07:59.260
Or maybe when should we be generating a random number?

109
00:07:59.440 --> 00:08:07.240
And if you recall, when we were talking about using the setup method up here, I even mentioned maybe

110
00:08:07.240 --> 00:08:14.650
we want to use this setup approach when we create a new guessing game so that we could be generating

111
00:08:14.650 --> 00:08:19.000
a new random number every time this guessing game is created, right?

112
00:08:19.250 --> 00:08:21.130
But we're not actually doing that yet.

113
00:08:21.220 --> 00:08:27.790
Instead, what we're doing is we're just generating a new random number every time we call the get random

114
00:08:27.790 --> 00:08:29.590
number method, right?

115
00:08:29.830 --> 00:08:31.330
Even on the same game.

116
00:08:31.810 --> 00:08:34.880
So we need to kind of deal with this now.

117
00:08:34.900 --> 00:08:41.260
I intentionally put it off because the tests weren't forcing us to deal with it, but now I think they

118
00:08:41.260 --> 00:08:41.800
kind of are.

119
00:08:41.890 --> 00:08:47.770
So let's go back over here to this guess method here and decide, how do we want to handle this?

120
00:08:49.240 --> 00:08:57.760
So what I'm kind of leaning towards is maybe we want to generate this random number only when we create

121
00:08:57.760 --> 00:08:59.440
a new guessing game.

122
00:08:59.740 --> 00:09:09.880
And if that is the case, then we could make a field for the guessing game that holds on to a random

123
00:09:09.880 --> 00:09:13.960
number for the life of this guessing game object.

124
00:09:14.410 --> 00:09:20.860
Now, I'm kind of thinking ahead a few steps and thinking that that could present some issues for the

125
00:09:20.860 --> 00:09:27.670
way that we currently have written our random number generation test because currently it expects a

126
00:09:27.670 --> 00:09:31.030
new random number every time we call this method here.

127
00:09:31.240 --> 00:09:32.680
But one step at a time.

128
00:09:32.860 --> 00:09:36.400
So let's see what happens if we introduce a field.

129
00:09:38.790 --> 00:09:43.830
That represents our random numbers, so let's just say this is going to be a private.

130
00:09:44.160 --> 00:09:48.570
And I think we'll go ahead and make it final, though we'll have to be careful with that.

131
00:09:48.900 --> 00:09:54.570
I think they're going to be some potential ramifications to that and it'll be an integer and they'll

132
00:09:54.570 --> 00:09:58.950
call it random number equals.

133
00:09:58.950 --> 00:10:05.760
And then I think we can just take this bit right here and use it to initialize this.

134
00:10:06.390 --> 00:10:08.580
This this value, this variable here.

135
00:10:08.820 --> 00:10:09.180
All right.

136
00:10:09.510 --> 00:10:13.470
And now this get random number method here.

137
00:10:13.740 --> 00:10:18.960
Maybe what it should be doing now is simply returning that random number there.

138
00:10:19.030 --> 00:10:19.450
OK.

139
00:10:19.770 --> 00:10:20.850
Just like that.

140
00:10:21.360 --> 00:10:28.530
And so now what this has the potential to do is when we create a new instance of this guessing game,

141
00:10:28.800 --> 00:10:32.100
this random number is going to get generated right away.

142
00:10:32.250 --> 00:10:36.500
Now we could also do this in a constructor, which would be a very appropriate way to do that.

143
00:10:36.510 --> 00:10:41.430
But since this is just the one line thing here, we can do it in the declaration as well.

144
00:10:41.430 --> 00:10:44.040
I'm OK to do it either way, for now, at least.

145
00:10:44.520 --> 00:10:44.840
All right.

146
00:10:44.850 --> 00:10:50.720
So we would create a new guessing game object or instance the random number would get generated.

147
00:10:50.730 --> 00:10:55.850
The test would call the test that failed would call get random number first.

148
00:10:55.860 --> 00:11:00.630
It would get this number, whatever it may be, and then pass that in.

149
00:11:00.630 --> 00:11:05.130
And then the number that was generated here and the number that was passed then would be the same.

150
00:11:05.130 --> 00:11:07.020
And so this bit here would be equal.

151
00:11:07.020 --> 00:11:09.420
And then you would get this, you got it correct.

152
00:11:09.750 --> 00:11:14.880
So I think that would cause this test to now pass, and we'll we'll check that in just a moment.

153
00:11:14.910 --> 00:11:23.880
However, now our random number generation method is going to fail because it currently is expecting

154
00:11:23.880 --> 00:11:30.030
that every time we call it get random number, we're going to get different numbers spread across 100

155
00:11:30.030 --> 00:11:30.690
tries.

156
00:11:30.870 --> 00:11:35.700
And currently, now that with this change, every time you get random number, you're going to get the

157
00:11:35.700 --> 00:11:37.170
same random number every time.

158
00:11:37.200 --> 00:11:40.590
So let's just run all these tests and see if I'm right.

159
00:11:40.740 --> 00:11:46.500
So I think this test simple win situation is going to go back to working, but the random number generation

160
00:11:46.500 --> 00:11:48.480
method is going to go back to failing.

161
00:11:49.230 --> 00:11:49.470
All right.

162
00:11:49.470 --> 00:11:51.270
So let's run all the tests and see.

163
00:11:53.070 --> 00:11:58.140
Yep, that's exactly what happened, so now as simple one situation is back to working test, random

164
00:11:58.140 --> 00:11:59.760
number generation is failing again.

165
00:11:59.850 --> 00:12:00.810
But we know why.

166
00:12:01.290 --> 00:12:01.590
All right.

167
00:12:01.590 --> 00:12:04.680
So let's go look at this failing scenario.

168
00:12:04.950 --> 00:12:06.360
So let's see here.

169
00:12:06.370 --> 00:12:11.520
Yeah, right here is where we are generating our random number.

170
00:12:11.850 --> 00:12:15.360
So we need to do this differently.

171
00:12:15.450 --> 00:12:25.140
So one thing I'm thinking is that if we simply created a new game instance inside of this loop, then

172
00:12:25.140 --> 00:12:28.770
call Get Random Number, we'd get a new random number every time.

173
00:12:28.980 --> 00:12:34.170
Now, normally for these methods, we want to use this game field here.

174
00:12:34.350 --> 00:12:39.810
But in this particular method, because of the way that we are now, only going to generate a random

175
00:12:39.810 --> 00:12:47.970
number once per game by default, at least, we would either have to create a new game instance inside

176
00:12:47.970 --> 00:12:50.490
of this loop every time, which we absolutely can do.

177
00:12:50.760 --> 00:12:57.900
Or another way we could do it is we could create a new method, an additional method that regenerates

178
00:12:57.900 --> 00:13:00.660
the random number, right, so we could do either one.

179
00:13:00.690 --> 00:13:01.060
All right.

180
00:13:01.080 --> 00:13:08.880
I think the way that I want to do this is to just create a new game.

181
00:13:08.880 --> 00:13:15.060
And since each time within this loop and the reason I'm leaning towards that way versus having this

182
00:13:15.060 --> 00:13:23.610
test call some new method like generate random number is because if we add a new method to generate

183
00:13:23.610 --> 00:13:29.820
a number, then we will also have to make sure that that method gets called maybe like from a constructor

184
00:13:29.820 --> 00:13:36.210
or something from each other method here, and we'd have to have a test that makes us do that.

185
00:13:36.210 --> 00:13:41.370
And I think that might get a little more involved than I maybe want to get into right now.

186
00:13:41.520 --> 00:13:47.430
So let's just see what this looks like if we simply create a new game.

187
00:13:50.500 --> 00:14:01.690
Guessing game game equals new guessing game like, so now you may be wondering when we refer to this

188
00:14:01.690 --> 00:14:05.190
game object here, which game object is it going to use?

189
00:14:05.200 --> 00:14:09.910
Is it going to use this one here or is it going to use this one here?

190
00:14:09.940 --> 00:14:15.880
Well, by default, Java is going to use the most local object you have.

191
00:14:16.090 --> 00:14:18.130
Now I'm going to admit this isn't.

192
00:14:18.520 --> 00:14:23.620
Some people might actually be uncomfortable with this type of coding that I'm doing here because I'm

193
00:14:23.620 --> 00:14:26.620
allowing for a certain degree of ambiguity here.

194
00:14:26.920 --> 00:14:33.190
Perhaps I should rename this object to something a little less ambiguous, like local game or something

195
00:14:33.190 --> 00:14:34.330
along those lines.

196
00:14:34.660 --> 00:14:40.450
Personally, I'm comfortable with it, but you do want to probably be careful when you have methods

197
00:14:40.450 --> 00:14:46.450
that are creating local variables that have the same names as fields in your code.

198
00:14:46.480 --> 00:14:46.990
OK.

199
00:14:47.020 --> 00:14:48.640
Just be careful about doing that.

200
00:14:48.850 --> 00:14:52.870
You will see some people when they want to refer to the field here.

201
00:14:53.080 --> 00:15:00.520
What they will often do in that case is if if I wanted this game here to refer to the field, you might

202
00:15:00.520 --> 00:15:07.870
see a lot of developers say this, that if I did this game, then that always will be referring to the

203
00:15:07.870 --> 00:15:14.800
object because the word this means this whole entire object or kind of this class, right?

204
00:15:16.170 --> 00:15:24.480
So you're saying I'm referring to the game variable that is a member, a direct member of this instance,

205
00:15:24.480 --> 00:15:28.350
which is the entire class as opposed to the game.

206
00:15:28.560 --> 00:15:31.710
And since that is local to this variable.

207
00:15:31.860 --> 00:15:37.260
So that's one thing some you'll see a lot of code actually do, especially where there's ambiguity.

208
00:15:37.380 --> 00:15:37.790
OK.

209
00:15:38.730 --> 00:15:41.640
But for me, for right now, there's no ambiguity.

210
00:15:41.760 --> 00:15:47.340
This game instance refers to this variable right here, which is very, very local.

211
00:15:47.700 --> 00:15:47.990
All right.

212
00:15:48.000 --> 00:15:53.730
So we're going to create a new instance of the guessing game 100 times, which is a little wasteful,

213
00:15:53.730 --> 00:16:00.120
but it's OK for our unit test and that should in turn generate a new random number every single time.

214
00:16:00.420 --> 00:16:07.410
So now if we rerun these tests, all of the tests, let's see what we get.

215
00:16:08.670 --> 00:16:11.160
All right, very good, so everything is passing.

216
00:16:11.910 --> 00:16:16.620
All right, now that we've got everything passing, let's try that little experiment that I mentioned

217
00:16:16.620 --> 00:16:17.430
a bit ago.

218
00:16:17.760 --> 00:16:24.330
Let's see what's the minimum number of times that we have to run this, that we have to generate the

219
00:16:24.330 --> 00:16:28.560
game to get a good spread across one through 10?

220
00:16:28.800 --> 00:16:32.940
So let's start with 10, which I seriously doubt it's going to be good enough.

221
00:16:35.010 --> 00:16:39.480
And I'm just going to run only this one test yet, not quite good enough.

222
00:16:39.690 --> 00:16:41.370
We expect that at 10:00, we've got an eight.

223
00:16:41.370 --> 00:16:47.430
That's a pretty good spread, though, you know, 80 percent of the expected values were hit within

224
00:16:47.430 --> 00:16:48.490
only 10 tries.

225
00:16:48.510 --> 00:16:51.690
I'm kind of surprised that it was that high.

226
00:16:51.900 --> 00:16:58.320
That tells me that maybe if we just went about 15, that probably would get it at least many, many

227
00:16:58.320 --> 00:16:59.610
times, maybe not every time.

228
00:16:59.910 --> 00:17:00.540
Let's see.

229
00:17:00.690 --> 00:17:01.620
So I'm going to try.

230
00:17:01.620 --> 00:17:02.310
15.

231
00:17:03.270 --> 00:17:08.640
This is just a little fun to see how how well implemented is the random number generator.

232
00:17:09.000 --> 00:17:10.750
How random is it, OK?

233
00:17:10.770 --> 00:17:15.250
Getting closer got nine out of the 10 with a spread of 15.

234
00:17:15.270 --> 00:17:16.860
OK, so let's try 20.

235
00:17:20.350 --> 00:17:20.950
We run.

236
00:17:21.430 --> 00:17:21.790
Mm hmm.

237
00:17:21.950 --> 00:17:22.390
Okay.

238
00:17:22.540 --> 00:17:24.580
Still not quite eight out of 10.

239
00:17:24.640 --> 00:17:25.060
All right.

240
00:17:25.960 --> 00:17:27.370
Try 30.

241
00:17:27.730 --> 00:17:28.840
I think this will get it.

242
00:17:31.080 --> 00:17:31.510
Oh, wow.

243
00:17:31.560 --> 00:17:33.120
Still not quite there.

244
00:17:33.390 --> 00:17:33.780
All right.

245
00:17:33.790 --> 00:17:34.530
Forty.

246
00:17:37.290 --> 00:17:39.330
All right, that got it for now.

247
00:17:39.360 --> 00:17:41.640
I don't know the word for it to get it every single time.

248
00:17:41.760 --> 00:17:44.940
So let me introduce you to another annotation of tests.

249
00:17:45.210 --> 00:17:52.080
If you want to run a test multiple times, you can do that with a special annotation.

250
00:17:52.830 --> 00:18:00.390
You can call repeated test, and all we have to do is specify how many times we want it to be repeated.

251
00:18:00.540 --> 00:18:00.870
I don't know.

252
00:18:00.870 --> 00:18:02.400
I'm going to start with five.

253
00:18:02.760 --> 00:18:09.090
And by the way, this is another type of automated test, so you don't need both the test and the repeated

254
00:18:09.090 --> 00:18:13.050
test, so we can actually get rid of the test if we want this to be repeated.

255
00:18:13.530 --> 00:18:19.050
So if we run this now, it's going to actually rerun this test five times, and I just want to make

256
00:18:19.050 --> 00:18:21.810
sure that is 40 really, truly enough.

257
00:18:22.050 --> 00:18:28.260
Let's just run it five times with this value of 40 and see if it passes every single time so we can

258
00:18:28.260 --> 00:18:29.280
rerun this.

259
00:18:30.030 --> 00:18:34.140
Maybe we just got lucky with the number 40 the first time, for example.

260
00:18:34.770 --> 00:18:36.030
Oh, look at that.

261
00:18:36.030 --> 00:18:42.210
Yeah, yeah, it looks like 40 is pretty good, but not perfect so that we ran the test five times and

262
00:18:42.210 --> 00:18:47.690
on the fourth time we only got nine out of 10 of our expected numbers.

263
00:18:47.700 --> 00:18:53.100
So yeah, 40 isn't quite enough, apparently to consistently get it there.

264
00:18:53.370 --> 00:18:55.680
So let's try 50.

265
00:18:57.070 --> 00:18:58.240
And then let's rerun.

266
00:18:58.750 --> 00:19:00.970
All right, so that gets it every single time.

267
00:19:01.240 --> 00:19:06.820
Now I'm inclined to just increase this number to 10, and then I'll really be confident that we've got

268
00:19:06.820 --> 00:19:08.450
the right number here with 50.

269
00:19:09.130 --> 00:19:11.440
Yep, looks like we get it every time there.

270
00:19:11.620 --> 00:19:12.040
All right.

271
00:19:12.050 --> 00:19:15.460
So 50 seems to be roughly the magic number there.

272
00:19:15.490 --> 00:19:15.850
All right.

273
00:19:16.000 --> 00:19:21.430
And now that we have this number, I feel comfortable to roll this back down to just running at once,

274
00:19:21.430 --> 00:19:28.510
which means I can just run the test and no, no value there at all.

275
00:19:29.080 --> 00:19:32.080
And it's yeah.

276
00:19:32.530 --> 00:19:37.240
So now let's just run all the tests again on the entire class.

277
00:19:38.620 --> 00:19:38.880
All right.

278
00:19:39.220 --> 00:19:40.840
So everything is still passing.

279
00:19:41.080 --> 00:19:47.200
All right, so let's go ahead and end this lesson and we will flesh out more rules of the guessing game.

280
00:19:47.320 --> 00:19:48.880
So I will see you in the next one.
