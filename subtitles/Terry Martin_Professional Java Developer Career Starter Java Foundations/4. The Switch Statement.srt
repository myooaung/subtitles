1
00:00:00,540 --> 00:00:08,100
OK, so there's another way to do this same type of conditional logic that we're looking at here with

2
00:00:08,100 --> 00:00:10,020
the if else clause.

3
00:00:10,530 --> 00:00:12,790
And to explain that.

4
00:00:12,810 --> 00:00:17,340
Let me show you a little bit more of what we could do first with the if else.

5
00:00:17,580 --> 00:00:19,680
And then I'll show you the alternative.

6
00:00:19,830 --> 00:00:27,360
So let's say that we what I want to do, first of all, is to simplify this a bit.

7
00:00:28,740 --> 00:00:31,320
So let's just say we had something like.

8
00:00:33,330 --> 00:00:42,970
This randomness equals three, and I don't know, maybe it will do one more random number equals four.

9
00:00:45,390 --> 00:00:46,200
We'll do another.

10
00:00:47,040 --> 00:00:50,650
The color is purple.

11
00:00:51,780 --> 00:00:55,690
And then finally, we'll have a kind of like a default, right?

12
00:00:55,710 --> 00:01:00,960
So like, if it wasn't any of these, then do whatever the default is, right?

13
00:01:00,960 --> 00:01:03,570
So that's with our final else block here.

14
00:01:03,990 --> 00:01:11,370
Otherwise, the color is whatever.

15
00:01:12,420 --> 00:01:19,260
OK, so this last little else else block here is our catchall.

16
00:01:19,530 --> 00:01:26,610
If it wasn't one to three or four anything else, just do this right.

17
00:01:26,610 --> 00:01:27,570
That's what we're saying.

18
00:01:28,170 --> 00:01:34,650
OK, so this is a pretty common construct where you kind of have like almost like a list of things kind

19
00:01:34,650 --> 00:01:37,830
of in order, not that they have to be in order they do not have to be.

20
00:01:38,100 --> 00:01:42,570
Now let me show you an alternative way to do this same thing.

21
00:01:42,840 --> 00:01:48,780
So I'm going to comment this out and remember again to comment one or more lines.

22
00:01:48,780 --> 00:01:55,140
You can just select those lines and then do a command forward slash or control forward slash on Windows

23
00:01:55,140 --> 00:01:55,800
and Linux.

24
00:01:56,130 --> 00:01:56,420
All right.

25
00:01:56,430 --> 00:01:58,170
So I've come into that out.

26
00:01:58,410 --> 00:02:01,710
So now I want to show you an alternative way.

27
00:02:02,160 --> 00:02:09,630
So there's another approach using what is called a switch statement and to to use this, what you do

28
00:02:09,630 --> 00:02:16,490
is you simply type switch and then the parentheses and then your variable again.

29
00:02:16,500 --> 00:02:23,640
However, whereas with the if statement, you have to give it some logic like here we're saying random

30
00:02:24,090 --> 00:02:24,780
equals one.

31
00:02:24,780 --> 00:02:29,800
So we're saying if the random number equals one, then do blah blah blah.

32
00:02:30,210 --> 00:02:34,890
Here with the Switch statement, there's no logic here to test for something.

33
00:02:35,040 --> 00:02:40,710
Instead, we're saying, I want you to switch based on the value of the random number.

34
00:02:40,830 --> 00:02:45,000
So let me finish this statement, and then you'll maybe it'll become clear what I mean.

35
00:02:45,180 --> 00:02:52,350
So very similar to the f block switch parentheses, random num and then an opening curly brace here

36
00:02:52,830 --> 00:02:54,510
because we're going to set up a block.

37
00:02:54,750 --> 00:03:06,120
But now inside of this block, what we can do is something like this case one colon and then I can optionally

38
00:03:06,120 --> 00:03:07,050
hit enter.

39
00:03:07,440 --> 00:03:09,600
And then I can use system that out.

40
00:03:10,380 --> 00:03:12,750
The color is red.

41
00:03:13,740 --> 00:03:19,980
And then since that's the only thing I want to do in this particular case, you get it.

42
00:03:20,130 --> 00:03:25,290
In this particular case, then when I'm done with this, what I want it to do there, I have to type

43
00:03:25,380 --> 00:03:33,780
break to finish up this case, and then I can go into another case, such as Case two colon.

44
00:03:33,990 --> 00:03:40,920
Now notice when I hit that colon, the ID automatically unintended, I guess the case structure here

45
00:03:41,160 --> 00:03:46,020
to line these up so that you can kind of see hierarchically case one.

46
00:03:46,020 --> 00:03:48,480
Does this case to does something else, right?

47
00:03:48,690 --> 00:03:52,020
Then I'll hit enter do another print line there.

48
00:03:52,380 --> 00:03:55,080
The color is blue.

49
00:03:56,430 --> 00:03:57,720
Go to the next line.

50
00:03:57,720 --> 00:04:00,480
Put a break their case.

51
00:04:01,080 --> 00:04:03,720
Three Colon enter.

52
00:04:06,520 --> 00:04:12,340
The color is what what was the color green break?

53
00:04:13,010 --> 00:04:16,040
Let's go to the next case.

54
00:04:16,060 --> 00:04:23,230
Case for purple, the color is purple.

55
00:04:24,340 --> 00:04:29,950
And then finally, I can have a catchall or or default scenario as well.

56
00:04:30,640 --> 00:04:31,630
And for that?

57
00:04:31,690 --> 00:04:34,090
Well, actually, let me finish putting the brake there.

58
00:04:34,330 --> 00:04:39,670
And then for my default scenario, I can literally just type the word default colon.

59
00:04:39,940 --> 00:04:48,160
And then whatever the default scenario is, in this case, the color is whatever, just like that.

60
00:04:48,370 --> 00:04:54,850
Now, functionally, this is equivalent to my if clause here.

61
00:04:55,150 --> 00:04:56,350
So it does the same thing.

62
00:04:56,350 --> 00:04:58,750
So let's look at this now just to make sure it's clear.

63
00:04:58,900 --> 00:05:07,570
What we're essentially saying is I want you to switch depending on the value in this variable.

64
00:05:07,690 --> 00:05:13,810
And the testing part where we test for it, if it's blah blah blah, or if it's whatever the testing

65
00:05:13,810 --> 00:05:15,490
comes with these cases, right?

66
00:05:15,730 --> 00:05:23,380
So what we're essentially saying is if random numb equals one, then do this.

67
00:05:23,710 --> 00:05:30,280
If random numb equals two, then do this and so on and so forth.

68
00:05:30,790 --> 00:05:38,200
Otherwise, if it doesn't equal any of these things, then do this default thing here.

69
00:05:38,210 --> 00:05:44,520
Oh, and you can optionally include a break for the default as well, but it is optional.

70
00:05:44,530 --> 00:05:45,430
You don't have to have it.

71
00:05:45,790 --> 00:05:48,280
Now let me explain why we need this break.

72
00:05:48,550 --> 00:05:56,700
Unlike the if else block with a switch statement, let's say that random NUM does equal one.

73
00:05:56,710 --> 00:06:01,750
And so the thread comes down here and executes this line.

74
00:06:02,470 --> 00:06:10,750
Well, if we don't have this break here, the thread will keep moving through these case statements

75
00:06:10,750 --> 00:06:12,520
until it is told to break.

76
00:06:12,910 --> 00:06:14,500
So we'll see that in just a moment.

77
00:06:14,530 --> 00:06:18,610
Let's first just go ahead and run this and see it, see it.

78
00:06:18,610 --> 00:06:21,310
Work with its normal behavior here.

79
00:06:22,150 --> 00:06:22,600
OK.

80
00:06:22,660 --> 00:06:28,240
So the generated number was four and we got the color purple.

81
00:06:28,240 --> 00:06:29,260
So that is correct.

82
00:06:29,290 --> 00:06:30,650
Let's run it a few times.

83
00:06:31,120 --> 00:06:32,170
We got a five.

84
00:06:32,410 --> 00:06:38,500
And so it printed whatever which is correct because five is a catchall or a default, right?

85
00:06:38,500 --> 00:06:40,840
We don't have an explicit case for five.

86
00:06:41,080 --> 00:06:43,220
And so that falls to the default.

87
00:06:43,240 --> 00:06:44,410
So that is correct.

88
00:06:44,800 --> 00:06:45,760
Let's do it again.

89
00:06:46,060 --> 00:06:48,040
Four again for purple.

90
00:06:48,700 --> 00:06:50,350
Four again for purple.

91
00:06:51,790 --> 00:06:52,240
Wow.

92
00:06:53,470 --> 00:06:54,600
Did I hard code this?

93
00:06:54,610 --> 00:06:55,930
No, I don't think I did.

94
00:06:58,360 --> 00:07:00,610
There we go, wow, that was pretty weird, wasn't it?

95
00:07:01,180 --> 00:07:02,680
That was a lot of fours in a row.

96
00:07:02,980 --> 00:07:04,350
Now we got it too.

97
00:07:04,390 --> 00:07:06,070
Yes, that is correct for blue.

98
00:07:07,210 --> 00:07:08,120
Another four.

99
00:07:08,140 --> 00:07:08,440
Wow.

100
00:07:08,440 --> 00:07:10,720
Really likes for three.

101
00:07:10,720 --> 00:07:11,590
Four Green.

102
00:07:11,620 --> 00:07:14,200
OK, so you get the point two for blue.

103
00:07:14,230 --> 00:07:14,620
All right.

104
00:07:14,680 --> 00:07:19,480
Now let's see what happens if we don't have the breaks in here.

105
00:07:19,510 --> 00:07:22,090
I'm just going to comment them all out.

106
00:07:26,550 --> 00:07:28,020
All right, now, let's see.

107
00:07:30,120 --> 00:07:30,780
Mhm.

108
00:07:30,840 --> 00:07:35,100
Look at that, so see, now it's printing multiple things, so it generated one.

109
00:07:35,340 --> 00:07:41,790
And so it just ran through all of the cases red, blue, green, purple, whatever in order, right?

110
00:07:42,150 --> 00:07:43,200
Let's run it again.

111
00:07:45,030 --> 00:07:49,290
This time we got a three sort of printed green, then purple, then whatever.

112
00:07:49,290 --> 00:07:51,780
So it's falling through, right?

113
00:07:51,960 --> 00:07:56,970
It comes to whatever case the number matched on which in this case was three, right?

114
00:07:57,300 --> 00:07:59,310
It does what it was supposed to do here.

115
00:07:59,310 --> 00:08:03,690
But then it falls through to the other cases, including the default.

116
00:08:03,870 --> 00:08:06,550
If you don't have this brake statement here.

117
00:08:06,660 --> 00:08:07,020
Right?

118
00:08:07,230 --> 00:08:08,580
Let's do a couple more.

119
00:08:09,180 --> 00:08:12,000
There's a two blue, green, purple, whatever.

120
00:08:12,000 --> 00:08:13,680
So you I think you get the point, right?

121
00:08:13,830 --> 00:08:23,910
So what this brake statement does is it tells the thread to jump out of this switch block to the next

122
00:08:23,910 --> 00:08:27,810
line, right, which in this case would be outside here.

123
00:08:27,940 --> 00:08:29,700
OK, and there is no next line.

124
00:08:29,700 --> 00:08:31,590
So then the program just ends.

125
00:08:31,890 --> 00:08:33,800
In this particular case, OK?

126
00:08:34,050 --> 00:08:39,690
But otherwise, the thread would just keep executing each of the subsequent cases.

127
00:08:39,930 --> 00:08:44,880
Some things to look out for, though it's really easy to forget to put this brake here.

128
00:08:44,880 --> 00:08:49,830
Very easy to do, but hopefully it'll also be pretty easy to realize you forgot it when you run your

129
00:08:49,830 --> 00:08:53,700
program and you're getting multiple other cases executing at the same time.

130
00:08:53,700 --> 00:08:58,890
So be really careful about putting that brake statement on each case.

131
00:08:59,160 --> 00:08:59,920
OK, let's see.

132
00:08:59,940 --> 00:09:01,620
So a few other things now.

133
00:09:01,650 --> 00:09:08,640
So far, I've only been showing the if then and now the switch statements, which are testing values

134
00:09:08,640 --> 00:09:10,380
of a number.

135
00:09:10,680 --> 00:09:18,870
But both the false and the switch statements can actually test, if you will, on more than just numbers.

136
00:09:19,710 --> 00:09:25,440
So let me clear this out and show you a quick a couple of quick examples.

137
00:09:25,830 --> 00:09:36,300
So let's say that we have a string called command, and let's set it to go for right now.

138
00:09:36,690 --> 00:09:44,940
And then let's have a switch a switch statement that switches on the word command so we could have a

139
00:09:44,940 --> 00:09:52,680
case where if command is stop, then we do something right.

140
00:09:52,770 --> 00:09:56,390
And by the way, obviously we could do more than just do these print lines.

141
00:09:56,400 --> 00:10:02,460
I'm just using these because they're convenient for us to see something, but we could add some numbers

142
00:10:02,460 --> 00:10:07,170
or call some other method or whatever we wanted to do here.

143
00:10:07,320 --> 00:10:11,580
So let's just say we're going to say something like stopping now.

144
00:10:13,620 --> 00:10:18,990
And then we'll break, and we could have another case for GO.

145
00:10:22,850 --> 00:10:26,930
Going now, and we'll break.

146
00:10:28,180 --> 00:10:37,390
And then let's have a default scenario, also command not understood.

147
00:10:38,800 --> 00:10:46,780
OK, so imagine if we were taking some command line input on this program and that input was getting

148
00:10:46,780 --> 00:10:49,580
stored here in this command and then it did something right.

149
00:10:49,600 --> 00:10:52,050
So let's run this, OK?

150
00:10:52,090 --> 00:10:53,020
So we had to go.

151
00:10:53,050 --> 00:10:55,630
So it called going now and then.

152
00:10:55,630 --> 00:11:00,790
If we had the word stop in here stopping now, so you get the point.

153
00:11:01,000 --> 00:11:06,220
And just as we've done this with a switch statement, we could have done this with an if block as well.

154
00:11:06,580 --> 00:11:11,770
I don't know that I'm going to write the whole thing out, but one quick thing now when you're comparing

155
00:11:12,040 --> 00:11:20,440
variables with an if statement, it is often recommended actually to do the comparison in a way that

156
00:11:20,440 --> 00:11:23,570
might seem a little backward to many of us.

157
00:11:23,590 --> 00:11:24,760
And let me show you what I mean.

158
00:11:25,030 --> 00:11:32,350
So what would normally be somewhat intuitive in this case would be to do something like command dot

159
00:11:32,350 --> 00:11:36,250
equals stop what?

160
00:11:38,990 --> 00:11:43,100
So if command equals stop, then.

161
00:11:47,390 --> 00:11:48,680
Stopping now.

162
00:11:53,150 --> 00:11:58,280
Else, if command that equals go.

163
00:12:02,380 --> 00:12:03,430
Going now.

164
00:12:04,270 --> 00:12:08,680
OK, so you get the idea right now, this is fairly intuitive.

165
00:12:09,490 --> 00:12:09,800
All right.

166
00:12:09,820 --> 00:12:11,860
So now let me show you something.

167
00:12:12,130 --> 00:12:20,620
Let's say that for some reason, the user didn't enter anything on this command, so the command somehow

168
00:12:20,620 --> 00:12:23,770
is null, meaning there's nothing set on it.

169
00:12:24,160 --> 00:12:31,480
And we haven't talked a whole lot about null values, but null is what an object can be set to when

170
00:12:31,480 --> 00:12:33,230
it has no value at all.

171
00:12:33,250 --> 00:12:35,830
OK, so it's not pointing at anything yet.

172
00:12:36,040 --> 00:12:42,460
So it's a null OK, and we can we can explicitly set the value of this object to null.

173
00:12:42,580 --> 00:12:45,580
OK, so just think of it as meaning not nothing.

174
00:12:46,420 --> 00:12:46,660
All right.

175
00:12:46,690 --> 00:12:49,120
So let's run this and see what happens.

176
00:12:50,070 --> 00:12:50,860
Mm hmm.

177
00:12:51,340 --> 00:12:57,370
We get an exception, which again, exceptions are errors, essentially, and the exception is cannot

178
00:12:57,370 --> 00:13:01,180
invoke string that equals object because command is null.

179
00:13:01,190 --> 00:13:08,470
So what what's happening here is we're calling a method the equals method on an object.

180
00:13:08,800 --> 00:13:13,720
But you can't call a method on an object that doesn't actually exist.

181
00:13:13,900 --> 00:13:17,500
And in this particular case, command is null.

182
00:13:17,530 --> 00:13:19,300
There's no object here.

183
00:13:19,420 --> 00:13:25,540
If you recall really when we're dealing with objects, not primitives, but actual objects and storing

184
00:13:25,540 --> 00:13:33,490
them in variables, what those variables really pretty much represent is a reference to an object in

185
00:13:33,490 --> 00:13:34,330
memory somewhere.

186
00:13:34,360 --> 00:13:38,290
They basically point to an object in memory, right?

187
00:13:38,710 --> 00:13:46,120
However, in this case, this variable is pointing to nothing like there's there is no address of an

188
00:13:46,120 --> 00:13:48,310
object in memory that this is pointing to.

189
00:13:48,310 --> 00:13:49,390
It's it's nothing.

190
00:13:49,630 --> 00:13:49,990
Right?

191
00:13:50,290 --> 00:13:57,970
And therefore, when we try to call this method, there is no method to call because there is no object

192
00:13:58,030 --> 00:13:59,890
for which that method lives, right?

193
00:14:00,010 --> 00:14:10,330
And so calling equals or any method on an on a null object results in an error or in an in an exception

194
00:14:10,330 --> 00:14:11,170
being thrown.

195
00:14:11,440 --> 00:14:11,880
OK.

196
00:14:12,730 --> 00:14:19,810
And oftentimes in a program like this, you, the programmer, won't necessarily know whether or not

197
00:14:19,810 --> 00:14:25,120
this object is null at the time when the program is running, which is called runtime.

198
00:14:25,420 --> 00:14:29,020
Now, in this case, I know it because I have explicitly said it this way.

199
00:14:29,290 --> 00:14:36,040
But there are many situations where perhaps you're taking input from somewhere else from a database,

200
00:14:36,040 --> 00:14:42,550
or you're asking the user to enter some, some data and maybe somehow they escaped out of it and didn't

201
00:14:42,550 --> 00:14:46,060
enter anything yet or whatever the case may be.

202
00:14:46,300 --> 00:14:51,370
And so you were expecting that there would be a string here in this particular case, but there's really

203
00:14:51,370 --> 00:14:52,240
nothing at all.

204
00:14:52,570 --> 00:14:59,680
And so you end up with a null and then you try to call some method on a no object and then your whole

205
00:14:59,680 --> 00:15:00,820
program blows up.

206
00:15:00,880 --> 00:15:01,300
OK.

207
00:15:01,450 --> 00:15:07,630
So there's an easy fix for this situation, and what it is is just to flip these things around because

208
00:15:07,630 --> 00:15:11,170
all you're really testing for is, does this equal this?

209
00:15:11,320 --> 00:15:15,730
Well, so you could flip it the other way, and that would still be a valid question, right?

210
00:15:15,760 --> 00:15:22,750
So we could, we could say, does stop equal command?

211
00:15:23,200 --> 00:15:30,670
And now what's good about this scenario is that the equals method will never blow up because of this

212
00:15:31,150 --> 00:15:31,990
being null.

213
00:15:32,170 --> 00:15:33,040
It's not null.

214
00:15:33,040 --> 00:15:34,780
It's right there in front of us, right?

215
00:15:34,810 --> 00:15:35,770
It's a constant.

216
00:15:36,070 --> 00:15:37,720
And so we have some safety here.

217
00:15:37,720 --> 00:15:40,960
So let me flip the other one around as well.

218
00:15:45,920 --> 00:15:55,340
Like so and now let's run it, OK, now nothing prints out because the command is null, so it doesn't

219
00:15:55,340 --> 00:16:00,470
match this one, nor does it match this one either, and I didn't give it a default.

220
00:16:00,800 --> 00:16:02,870
We'll give it a default real quick or else.

221
00:16:05,630 --> 00:16:08,090
Command not understood.

222
00:16:09,140 --> 00:16:11,000
OK, so if we run this again?

223
00:16:11,270 --> 00:16:11,760
There we go.

224
00:16:11,780 --> 00:16:17,420
Command not understood, but the the pertinent thing here is that our program did not blow up this time.

225
00:16:17,930 --> 00:16:22,370
Now with the Switch statement, let me go back to that if I can.

226
00:16:22,370 --> 00:16:29,610
Just I'm just undoing everything until we get back to the version of the code with the Switch statement.

227
00:16:29,630 --> 00:16:30,140
There we go.

228
00:16:30,560 --> 00:16:30,910
All right.

229
00:16:30,920 --> 00:16:37,640
So if we set this Switch statement to null and run this, let's see what happens.

230
00:16:38,780 --> 00:16:47,930
OK, so in this case, because the command was null, the Switch statement is blowing up.

231
00:16:48,260 --> 00:16:54,740
So we don't have that same level of protection against null statements on a switch statement that we

232
00:16:54,740 --> 00:16:57,210
can easily have with the if statement.

233
00:16:57,220 --> 00:17:04,070
So now you're wondering, OK, so when do I use a switch statement versus an if statement?

234
00:17:04,490 --> 00:17:09,920
Well, most people usually consider switch statements to be more readable.

235
00:17:10,190 --> 00:17:16,660
So if you are one of those people, then you may simply prefer to use a switch statement more often.

236
00:17:16,670 --> 00:17:23,900
Also, switch statements execute faster generally than if statements for the same thing, like apple

237
00:17:23,900 --> 00:17:25,670
apples to apples comparison.

238
00:17:25,970 --> 00:17:33,740
Because there are optimizations that the compiler can make when evaluating a switch statement that it

239
00:17:33,740 --> 00:17:40,610
cannot do as well with if statements so switch statements can be faster, however, then there are some

240
00:17:40,610 --> 00:17:41,930
downsides, obviously.

241
00:17:42,170 --> 00:17:50,000
One of them is the fact that you have to put these explicit break statements at the end of each case,

242
00:17:50,000 --> 00:17:54,590
which I don't particularly find to be very elegant myself.

243
00:17:54,800 --> 00:17:59,300
And I think a lot of other developers also don't find that to be super elegant.

244
00:17:59,390 --> 00:18:03,290
It's easy to forget to put that in for sure.

245
00:18:03,680 --> 00:18:06,200
So you've got to be really careful about that.

246
00:18:06,440 --> 00:18:14,870
And then we just saw that you don't have as easy a way to protect against null variables that you may

247
00:18:14,870 --> 00:18:15,790
be switching on.

248
00:18:15,800 --> 00:18:22,670
So you'd have to do an explicit check beforehand to make sure that the variable isn't null.

249
00:18:22,790 --> 00:18:23,750
And you could do that.

250
00:18:23,750 --> 00:18:31,880
Actually, it's not hard to do one way you can do it and would be to simply say something like if command

251
00:18:32,570 --> 00:18:35,990
is not equal to null.

252
00:18:37,010 --> 00:18:45,080
So you could do that, or perhaps you might even want to flip it around and say, if command is null,

253
00:18:46,520 --> 00:18:48,980
then whatever.

254
00:18:49,220 --> 00:18:56,930
So maybe you skip over this if block here now you don't want to make your logic overly complicated.

255
00:18:57,110 --> 00:19:02,960
And when you start nesting, if blocks and else blocks and things like that, you're probably heading

256
00:19:02,960 --> 00:19:06,140
down a road that you really should try to avoid.

257
00:19:06,380 --> 00:19:13,490
But in the interest of just showing some completion here, maybe you do something like else and then

258
00:19:13,490 --> 00:19:22,700
you could put this entire switch inside of an else block like so and so now you're only going to run

259
00:19:22,700 --> 00:19:26,450
this switch if the command is not null.

260
00:19:26,660 --> 00:19:28,100
That's a possibility.

261
00:19:28,250 --> 00:19:32,540
However, I would hope that you could find other ways to avoid having to do something like this.

262
00:19:32,750 --> 00:19:33,100
All right.

263
00:19:33,110 --> 00:19:38,750
So I'm going to wrap this one up and we'll have some more fun with some more of these constructs in

264
00:19:38,750 --> 00:19:41,180
the next lesson, and I will see you there.
