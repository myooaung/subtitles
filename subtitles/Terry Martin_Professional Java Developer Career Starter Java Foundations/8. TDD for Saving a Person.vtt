WEBVTT
1
00:00:00.540 --> 00:00:01.720
All right, welcome back.

2
00:00:01.740 --> 00:00:09.420
So in the last lesson, we got this first test working now, although the test is working, we're not

3
00:00:09.420 --> 00:00:12.060
actually doing any real database things yet.

4
00:00:12.300 --> 00:00:15.500
And the reason for that is because the test isn't forcing us to.

5
00:00:15.520 --> 00:00:18.900
So as a quick reminder of what TDD is all about.

6
00:00:19.200 --> 00:00:26.460
With test driven development, we try to limit adding any features or capabilities to that code until

7
00:00:26.460 --> 00:00:29.240
a test forces us to do so.

8
00:00:29.250 --> 00:00:37.020
And so that's why in order to get this one test passing, I simply hardcoded a one into the Get ID method

9
00:00:37.020 --> 00:00:37.600
here, right?

10
00:00:37.620 --> 00:00:42.360
So if we just go take a quick rate, I just hard coded to one there because that was the simplest thing

11
00:00:42.360 --> 00:00:43.050
I could do.

12
00:00:43.590 --> 00:00:49.650
Obviously, that's not what we really want, but we're going to kind of play a cat and mouse game with

13
00:00:49.650 --> 00:00:59.220
the tests to force ourselves to write proper tests that will then justify us adding more code to the

14
00:00:59.220 --> 00:01:00.840
implementing code here.

15
00:01:00.930 --> 00:01:01.410
OK.

16
00:01:01.860 --> 00:01:08.370
And one of the reasons for that is because quite often when developers write the code that they assume

17
00:01:08.370 --> 00:01:13.170
needs to exist, sometimes they end up writing extraneous code.

18
00:01:13.470 --> 00:01:20.290
And the more code you have in your project, the more likelihood of bugs ending up in your project.

19
00:01:20.320 --> 00:01:28.470
So by only writing the code that the tests force you to write, you actually end up reducing the opportunities

20
00:01:28.470 --> 00:01:36.450
to introduce bugs into the code while simultaneously also writing implementing code that is easily testable

21
00:01:36.480 --> 00:01:39.360
because that's the only way you got the code in there is by writing tests.

22
00:01:39.840 --> 00:01:40.140
All right.

23
00:01:40.140 --> 00:01:46.260
So having said that, we know that this is not a true, workable implementation for this, so we need

24
00:01:46.260 --> 00:01:49.980
to force ourselves to write the real database code.

25
00:01:50.430 --> 00:01:52.590
So the question is, how can we do that?

26
00:01:53.040 --> 00:01:58.380
So if we go back over here to the test, what I'm thinking is let's write a second test.

27
00:01:58.860 --> 00:02:06.540
And in the second Test, let's have that test, create two people and save them all in one test.

28
00:02:06.990 --> 00:02:14.850
And the test will simply confirm that the two saved people don't both have the same ID because right

29
00:02:14.850 --> 00:02:20.790
now, if we were to write that test without changing any implementing code, that test would fail.

30
00:02:20.940 --> 00:02:21.270
Right?

31
00:02:21.300 --> 00:02:21.600
All right.

32
00:02:21.610 --> 00:02:23.010
So let's go ahead and do that.

33
00:02:23.010 --> 00:02:28.350
And because that's what we're going to do, I think I'm inclined to change the name of this test method

34
00:02:28.350 --> 00:02:33.000
now to something kind of compared to the next test that we're going to write.

35
00:02:33.210 --> 00:02:35.310
So in the next test, we're going to save two people.

36
00:02:35.310 --> 00:02:42.990
So maybe I'm going to call this one something like I can save one person.

37
00:02:44.220 --> 00:02:44.610
All right.

38
00:02:45.060 --> 00:02:51.030
All right, so let's get started with the second Test then, so here's our annotation public void and

39
00:02:51.030 --> 00:02:54.450
maybe this is can save two people.

40
00:02:56.540 --> 00:03:05.600
All right, so now maybe I will start by doing a little copy pasta as some of the young coder kids like

41
00:03:05.600 --> 00:03:06.770
to say these days.

42
00:03:06.800 --> 00:03:10.100
Copy paste for the old, for the old folks out there.

43
00:03:11.000 --> 00:03:11.450
All right.

44
00:03:11.480 --> 00:03:16.790
So we're going to start off by just having this one person here and then maybe we just duplicate this

45
00:03:16.790 --> 00:03:18.500
line and make another one.

46
00:03:19.100 --> 00:03:19.850
So I don't know.

47
00:03:19.850 --> 00:03:21.680
I'm just making up a name here, Bobby.

48
00:03:23.790 --> 00:03:30.600
And let's change this name to Bobby, and I don't know, we'll change a few, a few details.

49
00:03:34.070 --> 00:03:34.850
All right.

50
00:03:35.150 --> 00:03:41.510
So there's that second person, and then let's go ahead and save this second person.

51
00:03:42.550 --> 00:03:43.210
Bobby.

52
00:03:44.500 --> 00:03:50.860
And let's just call the first one salesperson one and save the person, too.

53
00:03:51.400 --> 00:03:59.590
And so now maybe we assert that the idea of saved person one is not equal to the idea of saved person

54
00:03:59.590 --> 00:04:01.480
to maybe, maybe let's try that.

55
00:04:01.780 --> 00:04:03.880
OK, so saved person.

56
00:04:03.880 --> 00:04:06.880
One that get I.D. is.

57
00:04:07.420 --> 00:04:10.570
And honestly, I'm not sure what methods we have here for that.

58
00:04:10.580 --> 00:04:17.530
So let's see is well, I know we could say just is not equal to yeah, I guess we can just do that.

59
00:04:17.650 --> 00:04:20.290
That makes a lot of sense, doesn't it is not equal to.

60
00:04:20.500 --> 00:04:21.130
There you go.

61
00:04:21.820 --> 00:04:27.070
Is not equal to saved person to get I.D..

62
00:04:27.460 --> 00:04:27.790
Right.

63
00:04:28.030 --> 00:04:28.310
All right.

64
00:04:28.330 --> 00:04:31.950
I think that looks about right to me now.

65
00:04:31.960 --> 00:04:38.830
I do see some duplication of code here, and that is something that we can address.

66
00:04:39.310 --> 00:04:43.470
But let's go ahead and run this first and just see what we get.

67
00:04:43.480 --> 00:04:48.130
And then maybe we'll address the duplication after we get the basics.

68
00:04:48.130 --> 00:04:49.570
Just all working again.

69
00:04:49.600 --> 00:04:51.520
OK, so let's go ahead and run this.

70
00:04:52.850 --> 00:04:59.000
And that predictably fails because I know that we're getting a hard coded one in the Get ID for both

71
00:04:59.000 --> 00:05:03.710
of these people now expecting actual one not to be equal to one.

72
00:05:03.820 --> 00:05:04.030
Right.

73
00:05:04.040 --> 00:05:08.990
So we're getting one for both, and that's not how it's supposed to be.

74
00:05:09.650 --> 00:05:10.520
All right.

75
00:05:11.040 --> 00:05:18.560
So now I think I'm inclined to go ahead and write the real database code.

76
00:05:18.920 --> 00:05:24.620
I'm not inclined to play too many more cat and mouse games with, you know, trying to get this to pass

77
00:05:24.620 --> 00:05:26.120
without doing the real work.

78
00:05:26.540 --> 00:05:28.580
Because let's see.

79
00:05:28.580 --> 00:05:30.350
I mean, what would what would we even do?

80
00:05:30.350 --> 00:05:36.280
I I am giving it a little consideration, but I don't think it's worth any effort here to to do.

81
00:05:36.290 --> 00:05:40.070
I mean, I guess we could do like, you know, generate a random number or something like that.

82
00:05:40.580 --> 00:05:49.340
But that feels like it would take us actually somehow down a worse road than just going ahead and implementing

83
00:05:49.340 --> 00:05:51.050
the real code at this point.

84
00:05:51.350 --> 00:05:57.320
Now there may be some TDD practitioners who may, you know, disagree with me, but that's that's what

85
00:05:57.320 --> 00:06:00.020
I'm judging to make the most sense at this point.

86
00:06:00.410 --> 00:06:00.740
All right.

87
00:06:00.750 --> 00:06:03.920
So I think we're going to get into the good stuff now.

88
00:06:04.070 --> 00:06:07.310
So let's jump back over here.

89
00:06:07.790 --> 00:06:08.210
All right.

90
00:06:08.450 --> 00:06:14.240
So one of the very first things we're going to need if we're going to be talking to the database via

91
00:06:14.240 --> 00:06:18.200
our Java code is a connection to the H2 database.

92
00:06:18.500 --> 00:06:24.950
And the way we can get that connection is by using one of the JTBC classes, which is called driver

93
00:06:24.950 --> 00:06:25.670
manager.

94
00:06:25.880 --> 00:06:31.820
That is the class that is responsible for managing connections to a database.

95
00:06:31.850 --> 00:06:38.180
Now we're going to actually utilize this class from within our tests rather than by putting it into

96
00:06:38.180 --> 00:06:39.260
our repository.

97
00:06:39.440 --> 00:06:44.720
It might have been natural to actually want to put this in the repository, but I will show a little

98
00:06:44.720 --> 00:06:48.560
bit later why, in this particular case, I don't want to do that.

99
00:06:49.160 --> 00:06:50.750
We could, but I don't want to.

100
00:06:50.900 --> 00:06:52.520
And so you'll see why shortly.

101
00:06:52.730 --> 00:06:53.000
All right.

102
00:06:53.010 --> 00:07:00.200
So to use the driver manager, all we have to do is to reference driver manager and it's under the Java

103
00:07:00.200 --> 00:07:02.120
Dot sequel package.

104
00:07:02.810 --> 00:07:06.690
And then we can call the Get Connection method.

105
00:07:07.100 --> 00:07:11.930
And there are a few overloaded versions, but for right now, we just can take this first one here,

106
00:07:11.960 --> 00:07:14.450
that connection that takes a string of a URL.

107
00:07:14.990 --> 00:07:15.440
All right.

108
00:07:15.890 --> 00:07:18.740
And so now we need to pass in a URL.

109
00:07:19.370 --> 00:07:21.320
So where are we going to get that URL from?

110
00:07:21.650 --> 00:07:28.940
Well, if you recall, we had to use a URL to make our initial connection to H2 database from within

111
00:07:28.940 --> 00:07:30.470
the scroll SQL client.

112
00:07:30.650 --> 00:07:37.190
So we can actually just jump over to scroll sequel and grab the URL right out of there.

113
00:07:37.730 --> 00:07:44.120
So here we are in the scroll SQL client, and if you go to the aliases here, you can just make sure

114
00:07:44.120 --> 00:07:45.710
you open up the alias there.

115
00:07:45.750 --> 00:07:51.200
These should have the database alias for the people test and then you can right click on it and go down

116
00:07:51.200 --> 00:07:53.000
to modify alias.

117
00:07:53.540 --> 00:08:00.110
And so that just brings back open the little dialog window here, where we initially specified the URL

118
00:08:00.380 --> 00:08:04.720
and so you can select that URL and then do a control.

119
00:08:04.730 --> 00:08:11.270
See now one note if you're on a Mac, you actually still need to do a control C, not a command C for

120
00:08:11.270 --> 00:08:12.260
some reason.

121
00:08:12.500 --> 00:08:15.380
The Command C just doesn't work correctly here.

122
00:08:15.590 --> 00:08:19.430
So Control C and for Windows, it's all already control C.

123
00:08:19.850 --> 00:08:21.980
All right, so control C to copy that.

124
00:08:22.340 --> 00:08:26.270
And then I'm going to just close this down and jump back over to the ADC now.

125
00:08:26.720 --> 00:08:27.140
OK.

126
00:08:27.320 --> 00:08:28.790
So here we are in the IDF.

127
00:08:28.790 --> 00:08:34.430
Got my quotes ready and now I can just do a command v now for Mac users, it's command v over here to

128
00:08:34.430 --> 00:08:35.090
paste.

129
00:08:35.810 --> 00:08:36.860
All right, so there we go.

130
00:08:37.070 --> 00:08:45.770
Now, another thing I need to point out is that this tilde here represents your home directory, the

131
00:08:45.770 --> 00:08:47.810
path to your home directory.

132
00:08:48.170 --> 00:08:55.400
And in the Squirrel sequel client that tilde works on Windows, Mac and Linux.

133
00:08:55.400 --> 00:08:59.810
But in your Java code, the tilde does not work on Windows.

134
00:09:00.140 --> 00:09:05.960
So it seems that what's actually happening in Squirrel Client is that Squirrel Client is smart enough

135
00:09:05.960 --> 00:09:12.980
to see that we're using that tilde and actually translates it into your actual home directory path,

136
00:09:13.280 --> 00:09:15.560
no matter what operating system you're on.

137
00:09:15.770 --> 00:09:23.210
But our code isn't quite smart enough to do that, as is, but we can probably make it be approximately

138
00:09:23.210 --> 00:09:23.990
that smart.

139
00:09:24.110 --> 00:09:29.270
OK, so in other words, if you're following along in windows and you use that tilde, this isn't going

140
00:09:29.270 --> 00:09:30.310
to work for you.

141
00:09:30.320 --> 00:09:34.970
It's not going to find the people test file in your home directory.

142
00:09:35.270 --> 00:09:37.910
But here's what we can do to help it along.

143
00:09:38.390 --> 00:09:44.330
So since this URL that we're passing in is really just the string, we can actually just use one of

144
00:09:44.330 --> 00:09:51.470
the string methods to replace that tilde with whatever the path is to your home directory and you don't

145
00:09:51.470 --> 00:09:52.310
even have to know what.

146
00:09:52.340 --> 00:09:55.490
That path is explicitly because I'm going to show you a little trick here.

147
00:09:55.700 --> 00:10:03.590
So if you do a dot replace and I think I taught this method OK, so it takes an input of some text within

148
00:10:03.590 --> 00:10:07.070
this string that you want to search for, which in this case would be the tilde.

149
00:10:07.460 --> 00:10:09.800
And then you can supply it as a second parameter.

150
00:10:10.010 --> 00:10:12.920
The text that you want to replace the tilde with?

151
00:10:13.100 --> 00:10:13.550
OK.

152
00:10:13.790 --> 00:10:19.460
So we're going to select that and then we're going to say to search for tilde.

153
00:10:19.880 --> 00:10:21.710
OK, so that's what we wanted to find.

154
00:10:21.890 --> 00:10:25.880
And then we want to replace it with the path to our home directory.

155
00:10:25.880 --> 00:10:32.030
No matter what operating system run, Java actually knows this path and to have Java tell it to us.

156
00:10:32.180 --> 00:10:34.130
We need to invoke system.

157
00:10:34.370 --> 00:10:39.800
So the same system that we invoke when we do system that out that print line, this system class actually

158
00:10:39.800 --> 00:10:43.070
has a ton of really cool functionality on it.

159
00:10:43.370 --> 00:10:46.490
And now we're going to call system get property.

160
00:10:47.060 --> 00:10:55.790
So when Java applications start up, they have access to a lot of standard system property information

161
00:10:55.790 --> 00:10:57.560
like Where's your home directory?

162
00:10:57.680 --> 00:10:59.430
Where is Java installed?

163
00:10:59.450 --> 00:11:00.620
All sorts of things.

164
00:11:00.770 --> 00:11:01.190
OK.

165
00:11:01.550 --> 00:11:07.640
And there's actually a list of all of these standard properties known by their keys, because this is

166
00:11:07.640 --> 00:11:09.060
essentially just the map.

167
00:11:09.080 --> 00:11:09.620
OK.

168
00:11:10.070 --> 00:11:16.370
And we can actually just invoke one of those standard keys to get access access to our home directory.

169
00:11:16.490 --> 00:11:18.680
Let me show you that real quick, in fact.

170
00:11:19.040 --> 00:11:25.910
OK, so if you go into a browser and you Google for a Java system property list, you will find a link

171
00:11:25.910 --> 00:11:29.770
that will take you to this page in the Java documentation.

172
00:11:29.780 --> 00:11:36.890
And here we've got a list of some of the most popular keys that the Java system that get property method

173
00:11:36.890 --> 00:11:37.820
understands.

174
00:11:38.030 --> 00:11:42.230
And the one that we care about is this one down here, users at home.

175
00:11:42.680 --> 00:11:49.670
That is the path to your home directory, no matter what operating system you're on, users at home.

176
00:11:49.880 --> 00:11:52.130
So if we jump back over to the add e-mail.

177
00:11:53.260 --> 00:12:00.400
We can actually just use that users at home just like that and then go to the end of all these three

178
00:12:00.400 --> 00:12:03.470
parentheses and semicolon.

179
00:12:03.490 --> 00:12:08.550
OK, so what we're saying here is for this string here.

180
00:12:10.370 --> 00:12:20.120
Replace the tilde that is in this string with the home directory that we can obtain by calling system

181
00:12:20.120 --> 00:12:22.250
that get property users at home.

182
00:12:22.490 --> 00:12:27.380
OK, so that will replace fertility with whatever our actual home directory is.

183
00:12:27.500 --> 00:12:33.650
And I wouldn't be surprised if Squirrel sequel is actually just doing pretty much this exact same code

184
00:12:33.980 --> 00:12:34.760
for us.

185
00:12:35.090 --> 00:12:36.800
All right, so there's that.

186
00:12:36.830 --> 00:12:39.170
Now we've got an issue get connection.

187
00:12:39.170 --> 00:12:45.980
If we hover over this, we see that the Get Connection method is capable of throwing a Java sequel sequel

188
00:12:45.980 --> 00:12:46.790
exception.

189
00:12:47.090 --> 00:12:53.960
And so we need to decide what to do with that for right now, because this is a test and not our implementation

190
00:12:53.960 --> 00:12:58.730
code, like not the real code that we would actually be running for, you know, doing real work.

191
00:12:58.850 --> 00:13:01.700
This is the test code that test the real work.

192
00:13:02.240 --> 00:13:07.970
I'm OK to actually just allow the ADP to add the exception to the method signature here.

193
00:13:08.000 --> 00:13:08.360
OK.

194
00:13:08.540 --> 00:13:11.540
So if we just click on, add exception to Method Signature.

195
00:13:12.050 --> 00:13:15.440
So now it just adds a throws sequel exception.

196
00:13:15.650 --> 00:13:24.200
This is OK in this case for now, because what this means is that if anything didn't work in our attempt

197
00:13:24.200 --> 00:13:29.120
to establish a connection to this database, that exception is going to be thrown.

198
00:13:29.120 --> 00:13:35.330
And if that exception is thrown, the best thing we would probably want to have happen within the context

199
00:13:35.330 --> 00:13:42.110
of running this test is for the test to fail and tests will fail automatically if an exception is thrown

200
00:13:42.110 --> 00:13:44.690
and not caught within the test code.

201
00:13:44.840 --> 00:13:52.160
So in fact, if we were to do something like this, I just if we were to, you know, actually explicitly

202
00:13:52.610 --> 00:13:55.160
throw a try catch block.

203
00:13:55.170 --> 00:13:56.300
You don't need to follow me here.

204
00:13:56.300 --> 00:13:57.410
I'm just showing you this, right?

205
00:13:57.590 --> 00:14:04.010
If we were to do this, this would actually be bad because with this approach having an explicit try

206
00:14:04.040 --> 00:14:08.990
catch here, this connection could fail and an exception could be thrown.

207
00:14:09.230 --> 00:14:16.310
But our test could still pass because in this case, our assertion here would never be reached.

208
00:14:17.180 --> 00:14:22.580
And if you don't have an assertion in a test, the test passes by default.

209
00:14:22.850 --> 00:14:28.580
OK, which I kind of wish G-Unit didn't work that way, but that is how it happens to work.

210
00:14:28.910 --> 00:14:34.310
So you could actually end up with a false sense of security running by running a bunch of tests and

211
00:14:34.310 --> 00:14:39.620
seeing that they all pass even though exceptions are being thrown like crazy.

212
00:14:39.920 --> 00:14:46.190
OK, so in this particular case, and in most cases in my experience, it's often not a good idea to

213
00:14:46.190 --> 00:14:50.120
surround your test code with a try catch.

214
00:14:50.150 --> 00:14:54.440
Now there are some exceptions to that no pun intended, but this isn't one of them.

215
00:14:54.470 --> 00:14:57.380
OK, so you don't want to do that here.

216
00:14:57.620 --> 00:15:02.480
It's actually better to just let the exception bubble up through the method.

217
00:15:02.750 --> 00:15:08.000
And what will end up happening is that the unit code that we don't write that actually, you know,

218
00:15:08.240 --> 00:15:14.660
runs our tests, it will receive this exception and then fail our test, which is actually a good thing.

219
00:15:14.660 --> 00:15:18.770
We want this test to fail if there's a problem connecting to the database.

220
00:15:19.040 --> 00:15:19.430
All right.

221
00:15:19.430 --> 00:15:25.400
So now we are getting our connection, but now we need to do something with that connection.

222
00:15:25.400 --> 00:15:28.430
So the first thing we probably want to do is to just capture it.

223
00:15:28.760 --> 00:15:35.000
So I'm going to put my cursor here at the end and do an option Command V. and capture that connection.

224
00:15:35.000 --> 00:15:37.670
And I'm OK to just refer to it as connection.

225
00:15:37.850 --> 00:15:39.410
And I'm kind of running off the screen here.

226
00:15:39.410 --> 00:15:44.690
So there's our connection now, our database code itself.

227
00:15:44.690 --> 00:15:50.810
Other than establishing the connection, our database code will actually live inside of this repository,

228
00:15:51.200 --> 00:15:55.460
so the repository needs to get its hands on this connection.

229
00:15:56.030 --> 00:16:02.930
And so one of the nicest ways that we can actually get that connection in to the repository is actually

230
00:16:02.930 --> 00:16:05.690
to just pass it in through the constructor.

231
00:16:06.170 --> 00:16:09.230
So I'm going to just do this now.

232
00:16:09.230 --> 00:16:15.080
When I do this, we're going to get a red squiggly because there is not currently a constructor on the

233
00:16:15.080 --> 00:16:17.540
repository that can accept the connection.

234
00:16:17.780 --> 00:16:24.470
So if I hover the mouse over this red squiggly, I get the option from the ADP to create that constructor.

235
00:16:24.560 --> 00:16:26.040
And yes, I do want that.

236
00:16:26.120 --> 00:16:27.710
So I'm going to click on that.

237
00:16:28.160 --> 00:16:28.820
There we go.

238
00:16:29.000 --> 00:16:32.020
And then I will accept that type of connection.

239
00:16:32.030 --> 00:16:36.770
That's fine to hit return and I will accept the name of connection as well.

240
00:16:37.310 --> 00:16:42.470
Hit return there, and we're actually going to need that to become a field of the class.

241
00:16:42.860 --> 00:16:46.520
So I'm going to go ahead and just create that field right here.

242
00:16:46.520 --> 00:16:47.950
Private Connect.

243
00:16:47.960 --> 00:16:48.350
Oops.

244
00:16:48.590 --> 00:16:50.820
Connection connection.

245
00:16:51.270 --> 00:16:56.600
Like so then we'll come down here and say this connection equals connection.

246
00:16:57.350 --> 00:16:58.580
Then we'll jump back over here.

247
00:16:58.760 --> 00:17:05.450
Now that I've done that, I've got an error down here because I do not have a new ARG default constructor

248
00:17:05.450 --> 00:17:06.050
anymore.

249
00:17:06.350 --> 00:17:09.750
Remember that if you don't write your own explicit content.

250
00:17:09.780 --> 00:17:10.970
Structure for a class.

251
00:17:11.300 --> 00:17:17.780
Java will give you a no default constructor automatically, and that's what this was referring to.

252
00:17:17.930 --> 00:17:23.870
But as soon as you write your own constructor that does take arguments, you will no longer get the

253
00:17:23.870 --> 00:17:28.520
Java automatically generated no ARG default constructor for you.

254
00:17:28.730 --> 00:17:33.440
And so you will then have to write your own or do something different, right?

255
00:17:33.620 --> 00:17:41.000
So what I'm inclined to do to make this happy is actually to make this connection a field of the test

256
00:17:41.000 --> 00:17:44.810
itself so that I can refer to it from all tests.

257
00:17:45.380 --> 00:17:50.810
So I will actually just put my cursor right here and then do an option command f for field.

258
00:17:51.290 --> 00:17:56.840
And if you'll recall, I have the option of specifying where I want to initialize this connection.

259
00:17:56.840 --> 00:18:00.050
Currently, it's being initialized in line right here in the method.

260
00:18:00.260 --> 00:18:04.250
And that's what this option here is for current method.

261
00:18:04.610 --> 00:18:11.300
But if I click on this dropdown, we could do it in the field declaration or in a constructor or in

262
00:18:11.300 --> 00:18:11.960
a setup.

263
00:18:12.140 --> 00:18:17.450
Since this is a test, I'm inclined to go ahead and actually do this in a setup method.

264
00:18:17.450 --> 00:18:19.010
Someone to select that.

265
00:18:20.170 --> 00:18:22.000
All right, and then hit return.

266
00:18:22.870 --> 00:18:31.720
And so what has happened now is this whole entire driver manager code has been pulled up into a setup

267
00:18:31.720 --> 00:18:32.260
method.

268
00:18:32.410 --> 00:18:37.900
And now I'm back to the other issue that we had before, though, of needing to handle the exception

269
00:18:37.900 --> 00:18:38.290
here.

270
00:18:38.470 --> 00:18:43.780
But I'm going to handle it the same way I did before and just tell it to add the exception method to

271
00:18:43.780 --> 00:18:46.870
the signature of the setup method now, because it's the same thing.

272
00:18:47.050 --> 00:18:53.050
If it fails here, that will cause any tests that are depending on this setup to fail as well.

273
00:18:53.050 --> 00:18:56.260
And that's what I would actually want to have happen in this case.

274
00:18:56.830 --> 00:19:03.640
And now I can come down here and refer to this same connection down here as well.

275
00:19:03.790 --> 00:19:06.140
And now all of my code is happy again.

276
00:19:06.880 --> 00:19:11.950
And I think this is probably a good place for us to go ahead and stop and give you a little break.

277
00:19:12.220 --> 00:19:17.680
And when we pick back up in the next lesson, we'll jump right into the repository class and see what

278
00:19:17.680 --> 00:19:19.560
we can do with this connection class.

279
00:19:19.570 --> 00:19:20.800
So I'll see you in the next one.
