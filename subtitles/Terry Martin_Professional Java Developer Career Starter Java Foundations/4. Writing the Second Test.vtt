WEBVTT
1
00:00:00.870 --> 00:00:09.060
All right, so now that we've got our first unit test working, we're ready to jump to a second unit

2
00:00:09.060 --> 00:00:09.570
test.

3
00:00:10.200 --> 00:00:16.070
So we need to think of what the next logical, reasonable scenario to test.

4
00:00:16.080 --> 00:00:17.310
So we started off with.

5
00:00:17.310 --> 00:00:22.830
What I would propose is probably the simplest possible thing you could do with a calculator that can

6
00:00:22.830 --> 00:00:26.220
add, which is to simply add zero plus zero.

7
00:00:26.610 --> 00:00:32.660
So now maybe we do, you know, one plus one or one plus zero or something like that.

8
00:00:32.670 --> 00:00:40.080
So OK, the way we can do this is to first select this first test method, including the annotation,

9
00:00:40.080 --> 00:00:42.780
which we will need, and I'm going to copy that.

10
00:00:43.380 --> 00:00:48.780
And then I'm going to make a new line here and I'm going to paste a duplicate.

11
00:00:49.260 --> 00:00:52.740
And now we can just make a new method name here.

12
00:00:52.740 --> 00:00:58.470
So I think I'm going to test can add one plus one.

13
00:00:58.830 --> 00:01:03.270
Let's do that one plus.

14
00:01:05.380 --> 00:01:14.440
One now, of course, we're not going to just keep making these simple test scenarios exhaustively,

15
00:01:14.650 --> 00:01:18.280
but we want a few and I will show you why in just a moment.

16
00:01:18.550 --> 00:01:18.790
All right.

17
00:01:18.790 --> 00:01:21.100
So now we're going to test one plus one.

18
00:01:21.610 --> 00:01:27.040
So what do we need to change in this second method to make this a valid test?

19
00:01:28.510 --> 00:01:32.360
Well, we need to change our parameters that we're passing in, right?

20
00:01:32.380 --> 00:01:35.500
We're currently passing in zero and zero to be added.

21
00:01:35.500 --> 00:01:39.610
So now we want to pass in one and one.

22
00:01:40.330 --> 00:01:40.810
All right.

23
00:01:40.960 --> 00:01:48.130
And then we need to update our assertion because now we expect that adding one plus one should equal

24
00:01:48.160 --> 00:01:48.670
two.

25
00:01:48.700 --> 00:01:49.090
Right.

26
00:01:49.780 --> 00:01:51.430
So let's put that there.

27
00:01:51.670 --> 00:01:56.170
And then if you're going to keep this message, I'm going to get rid of this message for now because

28
00:01:56.170 --> 00:01:56.830
we don't need it.

29
00:01:57.130 --> 00:02:00.130
I was just wanting to show that you can have that option.

30
00:02:01.240 --> 00:02:01.550
All right.

31
00:02:01.570 --> 00:02:05.670
Assert that the sum of one plus one is two.

32
00:02:05.680 --> 00:02:08.170
That's basically basically what we're saying here.

33
00:02:09.070 --> 00:02:09.700
All right.

34
00:02:09.940 --> 00:02:17.080
Now we already know that this is going to fail because if we jump over to the calculator class, by

35
00:02:17.080 --> 00:02:23.140
the way, the way I just did that, there are so many ways to jump around in the ADP is I held down

36
00:02:23.140 --> 00:02:25.750
on the command, key or control.

37
00:02:25.750 --> 00:02:27.250
I believe in Windows and Linux.

38
00:02:27.490 --> 00:02:33.280
I held down on the command key and then hovered over a class in this case calculator.

39
00:02:33.280 --> 00:02:39.520
And then I clicked once OK, oh, I'm sorry, actually, for Windows and Linux, you can do control

40
00:02:39.520 --> 00:02:40.030
be.

41
00:02:41.400 --> 00:02:47.040
Control be all right, and so we can see here that we're hard coding a zero.

42
00:02:47.370 --> 00:02:47.730
Right?

43
00:02:47.940 --> 00:02:52.710
So we already know that this next test scenario is going to fail.

44
00:02:53.070 --> 00:03:01.590
However, we're not going to change this yet because we don't change or write any additional code in

45
00:03:01.590 --> 00:03:03.270
the system under test.

46
00:03:03.270 --> 00:03:12.900
That is the class that we're testing until we see our test fail and therefore forcing us to modify the

47
00:03:12.900 --> 00:03:16.530
system under test to get that test to stop failing.

48
00:03:16.530 --> 00:03:20.400
And this is an important key point in TDD.

49
00:03:20.550 --> 00:03:28.590
So if we jump back over to the calculator test, let's go ahead and run both of these tests now and

50
00:03:28.590 --> 00:03:29.520
see what happens.

51
00:03:29.730 --> 00:03:37.080
So I'm going to run all the tests in the class by selecting the play button on the class itself.

52
00:03:38.250 --> 00:03:39.870
Run calculator test.

53
00:03:44.100 --> 00:03:44.550
OK.

54
00:03:44.940 --> 00:03:53.880
And so now over here, we see again that it ran the tests in 105 milliseconds and we see the two test

55
00:03:53.880 --> 00:03:54.330
methods.

56
00:03:54.330 --> 00:04:00.420
The first one can add zero plus zero passed and we see that indicated with the green checkmark.

57
00:04:00.630 --> 00:04:08.430
But then the second test we ran failed and we see that with the little yellow X, and we can click on

58
00:04:08.430 --> 00:04:11.730
that if we want to to kind of zoom in on it.

59
00:04:12.360 --> 00:04:17.230
And so over here, we see that we expected it to.

60
00:04:17.790 --> 00:04:23.940
But we actually got zero, which makes sense because we hardcoded a zero or we didn't really do it.

61
00:04:23.940 --> 00:04:27.090
The I.D. generated that when we created that method.

62
00:04:28.230 --> 00:04:30.270
All right, so we can see that that's wrong.

63
00:04:30.540 --> 00:04:35.130
So here's the basic recipe for programming in TDD.

64
00:04:35.880 --> 00:04:42.270
We write a test, we write the minimum amount of test that we won't have any errors.

65
00:04:42.990 --> 00:04:48.870
And so to not have any errors, we had to create a minimum amount of this calculator class.

66
00:04:50.240 --> 00:04:57.500
And the minimum amount of that calculator class with this method of add was to return something.

67
00:04:57.950 --> 00:05:01.880
And so the ADP generated a method to return a zero.

68
00:05:02.850 --> 00:05:04.230
And we left it at that.

69
00:05:05.220 --> 00:05:11.670
And then we ran the test now by virtue of the fact that we chose a scenario where we were adding zero

70
00:05:11.670 --> 00:05:12.390
and zero.

71
00:05:12.600 --> 00:05:20.220
It just so happened that that test automatically passed, but normally what we would do is we would

72
00:05:20.220 --> 00:05:24.210
write a minimal amount of test with a minimal assertion.

73
00:05:24.810 --> 00:05:28.470
We would run that test and first see it fail.

74
00:05:28.680 --> 00:05:35.190
Then we would modify the code in the system under test, which again in this case would be the calculator

75
00:05:35.190 --> 00:05:35.670
class.

76
00:05:35.820 --> 00:05:44.550
We would modify the code in that system under test in the most minimal way possible to just make that

77
00:05:44.550 --> 00:05:45.840
test pass.

78
00:05:48.560 --> 00:05:55.280
And that means if you have to, you can just hard code a value in there without trying to get fancy.

79
00:05:55.640 --> 00:05:59.060
That would be the most minimal thing you could do in that case.

80
00:05:59.810 --> 00:06:03.530
And then you rerun the test again and you get it to pass.

81
00:06:04.100 --> 00:06:13.910
Now, in this case, we want to keep this test working while also enabling our second test to work.

82
00:06:16.140 --> 00:06:24.120
So if we jump back into the calculator class again, in that case, it would not be appropriate to simply

83
00:06:24.120 --> 00:06:33.150
hard code A to here because we already know that that would cause the first test to fail.

84
00:06:33.570 --> 00:06:36.360
And we don't want to go backward if we can help it.

85
00:06:36.390 --> 00:06:40.410
We want all of the tests in that class to pass.

86
00:06:40.830 --> 00:06:48.660
And so I would argue that the simplest thing we can do to make both of those tests pass would be to

87
00:06:48.660 --> 00:06:54.060
do the actual math now number one plus number two.

88
00:06:55.200 --> 00:07:00.240
However, let me jump back over to the test class again.

89
00:07:00.570 --> 00:07:06.240
Let us imagine for a moment that we had started off with our first test being this one.

90
00:07:06.930 --> 00:07:14.550
In this case, if this had been the only test in this class initially, then we would have started off

91
00:07:14.550 --> 00:07:23.670
with this method being returning a zero and we would have seen the one plus one scenario fail.

92
00:07:24.390 --> 00:07:29.940
And then the most minimal thing to do to get that test to pass would have been to simply hardcoded two,

93
00:07:30.420 --> 00:07:36.980
and that would have been the correct and proper thing to do under the general ideas of TDD.

94
00:07:37.710 --> 00:07:38.190
OK.

95
00:07:38.790 --> 00:07:46.170
And then we would have had to write a second test before it would force us to do something more involved,

96
00:07:46.170 --> 00:07:47.820
like doing the actual math.

97
00:07:47.860 --> 00:07:49.380
OK, so I want to make that point.

98
00:07:49.620 --> 00:07:55.210
You don't write any more code than you absolutely have to to get the tests passing.

99
00:07:55.530 --> 00:08:02.790
But once you have a test passing and you add additional tests, you ideally don't want to do things

100
00:08:02.790 --> 00:08:06.720
that would break previously working test if you can help it.

101
00:08:07.560 --> 00:08:07.980
All right.

102
00:08:08.190 --> 00:08:15.120
And so now in this case, we have to test methods here.

103
00:08:16.060 --> 00:08:24.040
And to keep both of them working, I would say that the simplest thing we can do is to actually just

104
00:08:24.040 --> 00:08:25.720
do the actual math now.

105
00:08:26.950 --> 00:08:27.370
All right.

106
00:08:28.300 --> 00:08:34.930
But in general, you want to write a new test, see it fail, then revise your code to make it pass.

107
00:08:35.110 --> 00:08:35.530
All right.

108
00:08:35.710 --> 00:08:42.280
So now if we go back over to the test class, actually, we don't even have to technically go back over

109
00:08:42.280 --> 00:08:46.300
to the test class because we've got this test pane open right here.

110
00:08:46.510 --> 00:08:54.040
So if you click on this little green button here, we can rerun all of the tests on the calculator class,

111
00:08:54.190 --> 00:08:57.160
even while we're on this calculator class here.

112
00:08:57.520 --> 00:09:05.860
So I'm going to click that to cause all the tests to be rerun A. And look at that now, both of our

113
00:09:05.860 --> 00:09:07.480
tests are passing.

114
00:09:07.900 --> 00:09:09.700
So good success there.

115
00:09:10.300 --> 00:09:10.630
All right.

116
00:09:10.660 --> 00:09:14.020
Now I'm going to jump back over to the test class.

117
00:09:15.100 --> 00:09:22.030
So now we would want to consider what would be some additional scenarios to test on adding now.

118
00:09:22.060 --> 00:09:30.400
One scenario that I can think of next might be perhaps we'd want to test what happens when we pass negative

119
00:09:30.400 --> 00:09:34.510
numbers, or at least one of the parameters could be negative.

120
00:09:34.540 --> 00:09:34.900
Right?

121
00:09:35.050 --> 00:09:36.820
So I'd like to challenge you now.

122
00:09:37.000 --> 00:09:44.050
Why don't you go ahead and create one or more additional test methods where you're testing out some

123
00:09:44.050 --> 00:09:45.010
other scenarios?

124
00:09:45.250 --> 00:09:51.700
So like I said, one good scenario I can think of would be to test what happens when you pass in at

125
00:09:51.700 --> 00:09:53.740
least one negative parameter.

126
00:09:54.100 --> 00:09:57.910
Maybe also another one where you pass in two negative numbers.

127
00:09:58.120 --> 00:10:01.150
So why don't you do that and then jump back when you're done?

128
00:10:01.840 --> 00:10:02.200
All right.

129
00:10:02.210 --> 00:10:02.920
Did you do that?

130
00:10:03.400 --> 00:10:03.730
All right.

131
00:10:03.760 --> 00:10:06.220
Hopefully, that was pretty easy for you to do.

132
00:10:06.250 --> 00:10:10.930
I don't think I'm going to demonstrate that because it should be the same pretty much as what you've

133
00:10:10.930 --> 00:10:11.530
got here.

134
00:10:11.740 --> 00:10:15.490
And then you would have just had to remember to update what you're expecting.

135
00:10:15.700 --> 00:10:16.100
All right.

136
00:10:16.120 --> 00:10:21.490
One unfortunate aspect of writing unit tests is that they are only as good as the scenarios that you

137
00:10:21.490 --> 00:10:23.050
can think of, OK?

138
00:10:23.170 --> 00:10:28.240
And for that reason, a lot of companies actually employ professional testers.

139
00:10:28.540 --> 00:10:36.160
And one of those testers jobs is to think of good scenarios for testing separately and distinctly from

140
00:10:36.160 --> 00:10:38.530
the people who are actually writing the code.

141
00:10:38.980 --> 00:10:41.800
But in this particular case, we're wearing both hats.

142
00:10:42.190 --> 00:10:42.600
All right.

143
00:10:42.610 --> 00:10:45.850
So now we've got two working tests here.

144
00:10:45.910 --> 00:10:51.010
So now the next logical thing to do, by the way, I'm going to I'm going to close that pain to give

145
00:10:51.010 --> 00:10:52.660
us a little more space here.

146
00:10:53.020 --> 00:11:03.130
So now a next logical thing to do in unit testing would be to look for any duplication in our code and

147
00:11:03.130 --> 00:11:09.580
do what is called refactoring to refactor our code so that there is less duplication.

148
00:11:09.970 --> 00:11:10.360
All right.

149
00:11:10.370 --> 00:11:13.450
So do you see any obvious duplication here?

150
00:11:13.480 --> 00:11:15.130
I see one thing.

151
00:11:15.970 --> 00:11:16.390
All right.

152
00:11:16.780 --> 00:11:22.360
I'm looking at lines 11 and line 18.

153
00:11:22.960 --> 00:11:32.260
These are 100 percent identical lines of code, and we want to find duplication like this every so often

154
00:11:32.260 --> 00:11:35.560
and figure out if there's a good way to get rid of it.

155
00:11:35.620 --> 00:11:41.980
Duplication is not our friend when we are coding both in tests and in production code.

156
00:11:42.010 --> 00:11:43.840
We don't want duplication.

157
00:11:44.170 --> 00:11:46.360
If we can reasonably do something about it.

158
00:11:46.660 --> 00:11:50.080
So now the question is, well, what can we do about this duplication?

159
00:11:50.680 --> 00:11:55.420
Well, there are a couple of things I can think of that we could do fairly easily.

160
00:11:55.510 --> 00:12:01.780
One of them is a technique that we've actually already seen a couple of times in previous lessons.

161
00:12:02.050 --> 00:12:07.030
So we're creating a calculator instance here, right?

162
00:12:07.210 --> 00:12:13.990
And then we're storing that instance in this local variable called calc so that we can then call the

163
00:12:13.990 --> 00:12:16.810
add method on the calculator.

164
00:12:16.990 --> 00:12:17.380
Right?

165
00:12:17.710 --> 00:12:21.190
And we're doing that in both test methods.

166
00:12:21.850 --> 00:12:27.440
Can you think of what we might be able to do to reduce the amount of duplication?

167
00:12:27.460 --> 00:12:28.390
I'll give you a moment.

168
00:12:28.630 --> 00:12:31.060
If you want to pause, OK?

169
00:12:31.090 --> 00:12:37.270
So one thing we could do is to convert this local variable into a field.

170
00:12:37.750 --> 00:12:39.700
And we've done this before, right?

171
00:12:40.120 --> 00:12:47.680
And so it could be as easy as just cutting, selecting this whole thing, cutting it and then pasting

172
00:12:47.680 --> 00:12:51.790
it into a field of the calculator class, right?

173
00:12:51.940 --> 00:12:55.660
And then just referring to the calculator right here.

174
00:12:55.690 --> 00:13:00.190
Another way you could do that is to select the local calc variable.

175
00:13:00.430 --> 00:13:06.160
Right click on it, go down to refactor and introduce field.

176
00:13:07.610 --> 00:13:09.170
Which is pretty much the same thing.

177
00:13:10.460 --> 00:13:16.730
And then in the initialize option here, you could select field declaration.

178
00:13:16.730 --> 00:13:23.030
And as a reminder, what that means is the initialization is this part right here where we say equals

179
00:13:23.030 --> 00:13:24.160
new calculator, right?

180
00:13:24.180 --> 00:13:30.560
So that's where your your initializing are setting the value of this variable here.

181
00:13:30.710 --> 00:13:35.210
So it's asking where do we want to do this equals new calculator business?

182
00:13:35.390 --> 00:13:41.210
Do we want to do it in the field declaration, which is to say, you know, would we want to do it up

183
00:13:41.210 --> 00:13:43.850
here where we're actually putting the field?

184
00:13:44.390 --> 00:13:49.310
Or we could do it in the current method, which is what's happening right now?

185
00:13:49.790 --> 00:13:50.880
Where do we want to do this?

186
00:13:50.900 --> 00:13:52.610
Equals new calculator business.

187
00:13:52.760 --> 00:13:56.510
So if we choose field declaration and then hit return.

188
00:13:59.090 --> 00:14:06.980
That just ends up basically copying that same line of code that we had like this one here that basically

189
00:14:06.980 --> 00:14:12.530
just copies it up here and then it adds a couple of little safekeeping keywords to it.

190
00:14:12.530 --> 00:14:18.080
It makes it private by default, which is generally always a good thing to to default to your fields,

191
00:14:18.080 --> 00:14:24.340
to private unless you absolutely must make them public or some some other level of visibility.

192
00:14:24.350 --> 00:14:31.970
And it makes it final, which prevents this field from being set to some other value other than this

193
00:14:31.970 --> 00:14:32.990
new calculator.

194
00:14:33.110 --> 00:14:39.290
Later on in the code, and again, that's kind of just the safety mechanism that's usually a good idea

195
00:14:39.320 --> 00:14:39.800
to do.

196
00:14:40.340 --> 00:14:40.700
All right.

197
00:14:40.710 --> 00:14:47.480
So by moving this up into a field, the aid has gotten rid of that line here.

198
00:14:47.630 --> 00:14:53.150
And now we can actually come down here to line 19 and get rid of it from here as well by just deleting

199
00:14:53.150 --> 00:14:53.330
it.

200
00:14:53.960 --> 00:14:54.440
OK.

201
00:14:54.650 --> 00:14:59.240
So in other words, what we're saying is let's create a new instance of a calculator.

202
00:14:59.720 --> 00:15:03.590
We only need one calculator for both of these methods anyway.

203
00:15:03.610 --> 00:15:04.080
Right?

204
00:15:04.220 --> 00:15:05.900
And here it is, right?

205
00:15:06.110 --> 00:15:14.150
And so now we're referring to this one instance of a calculator from both of these methods, rather

206
00:15:14.150 --> 00:15:20.240
than having two separate instances of a calculator which is wasteful and unnecessary.

207
00:15:20.570 --> 00:15:20.890
All right.

208
00:15:20.900 --> 00:15:23.750
So that's one way we could do it.

209
00:15:24.020 --> 00:15:30.800
I'm going to undo this, though, and I'm going to show you another very common way to do this, especially

210
00:15:30.800 --> 00:15:32.120
in unit testing.

211
00:15:32.330 --> 00:15:38.630
So the other thing we could have done is to select this calculator variable again.

212
00:15:39.950 --> 00:15:44.450
Go through all the same steps, so refactor introduce field.

213
00:15:45.080 --> 00:15:54.680
But this time for the initialise in portion, we can go down here to set up and choose set up and then

214
00:15:54.680 --> 00:15:55.730
hit return.

215
00:15:56.360 --> 00:16:00.160
So now this approach is kind of interesting.

216
00:16:00.170 --> 00:16:07.000
What it does is it still introduces a field of calc, right?

217
00:16:07.010 --> 00:16:09.470
So that part is kind of the same.

218
00:16:09.650 --> 00:16:11.360
It still makes it private.

219
00:16:11.720 --> 00:16:18.410
It does not make it final, though, and the reason it doesn't make it final is because we are not initializing

220
00:16:18.410 --> 00:16:20.380
it in this declaration here.

221
00:16:20.390 --> 00:16:23.240
So this this area here is the declaration.

222
00:16:23.240 --> 00:16:29.910
This is where this is, where we declare to Java that we want a variable of type calculator.

223
00:16:29.930 --> 00:16:34.480
OK, we're declaring that here, but we're not setting it here.

224
00:16:34.490 --> 00:16:39.260
We're not actually storing an instance of a calculator at this time.

225
00:16:39.620 --> 00:16:45.500
Instead, the idea has generated a new method for us called Set.

226
00:16:46.040 --> 00:16:55.460
And it is in this setup method that we are instantiating a calculator and storing it in this field.

227
00:16:55.850 --> 00:16:56.360
OK.

228
00:16:56.540 --> 00:17:06.140
And then notice that the IDE has also annotated this setup method with this at before each annotation.

229
00:17:06.530 --> 00:17:09.680
Now this annotation is specific to J Unit.

230
00:17:09.800 --> 00:17:13.160
And let me explain what it does and how this works.

231
00:17:14.570 --> 00:17:24.440
So just as we can annotate any public void method with an at test annotation to tell the J Unit testing

232
00:17:24.440 --> 00:17:34.340
framework that that is a method that should be run as a test, we can also annotate any void method

233
00:17:34.820 --> 00:17:42.530
to be run for setting data up right before J Unit runs any test method.

234
00:17:42.860 --> 00:17:51.200
So what would happen in this case is if we were to tell the unit to run the tests in this class, j

235
00:17:51.200 --> 00:17:57.980
unit would find all of the tests that are annotated with at Test, so that would be these two.

236
00:17:58.610 --> 00:18:06.740
And then right before it ran the code in this test, it would actually run this code first, which would

237
00:18:06.740 --> 00:18:11.540
instantiate a new calculator object and stored in this field.

238
00:18:12.050 --> 00:18:19.700
Then it would run this test method and use that newly instantiated calculator, which is stored in this

239
00:18:19.700 --> 00:18:20.180
field.

240
00:18:21.230 --> 00:18:30.650
It would run this test, get the assertion, etc. And then before it jumped down to running this test,

241
00:18:31.490 --> 00:18:38.390
it would run this again, which means it would create a second instance of a calculator.

242
00:18:38.630 --> 00:18:45.080
But it would store that instance in this same field, which means that the first calculator instance

243
00:18:45.080 --> 00:18:47.720
would now become kind of orphaned, if you will.

244
00:18:47.720 --> 00:18:49.280
It would become de reference.

245
00:18:49.370 --> 00:18:57.320
No variable would be pointing in any longer to that first calculator instance and when an object in

246
00:18:57.320 --> 00:19:00.290
Java is no longer being referenced.

247
00:19:00.590 --> 00:19:04.730
Meaning no, no variable is pointing to it any more.

248
00:19:04.760 --> 00:19:13.130
That allows Java's Garbage Collector to be able to reclaim the memory being used by that first instance

249
00:19:13.130 --> 00:19:13.970
of the calculator.

250
00:19:14.090 --> 00:19:18.870
Now, that doesn't necessarily mean that it will be reclaimed, as I've stated in a previous lesson.

251
00:19:18.890 --> 00:19:27.560
We don't have much direct control over when the garbage collection actually occurs, but it does flag

252
00:19:27.590 --> 00:19:34.460
that first calculator instance in this case to be eligible to be collected for garbage if and when the

253
00:19:34.460 --> 00:19:38.930
JVM, the Java virtual machine decides that it makes sense to do so.

254
00:19:39.290 --> 00:19:39.740
All right.

255
00:19:39.980 --> 00:19:46.670
So the first instance of the calculator that was created before this method was run would now become

256
00:19:46.670 --> 00:19:52.460
de referenced, meaning there is no variable that's referencing or referring to it anymore.

257
00:19:52.700 --> 00:20:01.550
And a new calculator instance would be created and pointed to by this same field variable.

258
00:20:01.820 --> 00:20:04.880
And now this method would be using that.

259
00:20:05.120 --> 00:20:14.600
Now what's the difference between using this setup approach versus using the approach where we are initializing

260
00:20:14.600 --> 00:20:16.340
the field directly here?

261
00:20:16.610 --> 00:20:24.440
Well, one major difference is that if we were to comment this out for a moment, pretend like that's

262
00:20:24.440 --> 00:20:25.160
not there.

263
00:20:25.610 --> 00:20:32.900
One major difference would be that with this approach, there's just one instance of the calculator

264
00:20:32.900 --> 00:20:38.030
that's going to be used for both of these methods or for all methods.

265
00:20:38.120 --> 00:20:38.480
Well.

266
00:20:38.690 --> 00:20:41.570
Actually, now let me take that back, one thing I forgot to do here.

267
00:20:41.750 --> 00:20:46.460
We'd also want to go ahead and delete this line, right, because we don't need that line now.

268
00:20:46.670 --> 00:20:47.840
That was duplication.

269
00:20:48.440 --> 00:20:48.790
All right.

270
00:20:48.800 --> 00:20:58.100
So in the event that now all of our methods are just using this field calc here with this approach where

271
00:20:58.100 --> 00:21:07.460
we are initializing in the field declaration itself, all test methods would be using the same instance

272
00:21:07.460 --> 00:21:08.660
of the calculator.

273
00:21:09.020 --> 00:21:18.170
And that's an important thing to be mindful of because if our calculator class were capable of maintaining

274
00:21:18.170 --> 00:21:26.420
state, and what that means is if our calculator class were capable of storing values in it and keeping

275
00:21:26.420 --> 00:21:34.910
those values in it, the act of storing those values in this instance could affect subsequent calculations.

276
00:21:35.510 --> 00:21:42.710
Now, I didn't say all of that to suggest that this is a bad approach because in this particular case,

277
00:21:43.040 --> 00:21:49.280
where all we have is this simple add method, and especially currently our calculator does not maintain

278
00:21:49.280 --> 00:21:50.990
state of any kind.

279
00:21:51.320 --> 00:21:58.520
This is actually the more efficient thing to do at this time to create just one instance of the calculator

280
00:21:58.730 --> 00:22:05.480
to be used with all of these methods, specifically because the calculator does not maintain state.

281
00:22:05.870 --> 00:22:14.300
But if the calculator did maintain state and we wanted to ensure that on each test method, we got a

282
00:22:14.300 --> 00:22:17.780
brand new pristine calculator every single time.

283
00:22:17.960 --> 00:22:28.880
Then in that case, using this setup method might be the smarter way to go in many cases, because in

284
00:22:28.880 --> 00:22:36.620
this case, like I said earlier, this method would be called right before each test method is called,

285
00:22:36.800 --> 00:22:42.800
which gives us an opportunity to reset things right to reset up things in whatever way they need to

286
00:22:42.800 --> 00:22:47.380
be set up or to clear things out or whatever it is that you might need.

287
00:22:47.390 --> 00:22:47.780
Okay?

288
00:22:47.900 --> 00:22:56.570
So that's probably the biggest distinction between initializing our system under test at the field declaration

289
00:22:56.570 --> 00:22:58.820
versus doing it in the setup.

290
00:22:59.390 --> 00:22:59.690
All right.

291
00:22:59.720 --> 00:23:06.380
And so now that we've refactored our code, the smart thing to do before writing any more tests would

292
00:23:06.380 --> 00:23:11.990
be to rerun all of the tests and make sure we did not break anything with our refactoring.

293
00:23:12.680 --> 00:23:14.660
All right, so we'd want to run this again.

294
00:23:16.100 --> 00:23:16.430
All right.

295
00:23:16.430 --> 00:23:17.950
And everything still looks good.

296
00:23:17.960 --> 00:23:20.360
We apparently haven't broken anything.

297
00:23:20.840 --> 00:23:22.610
And I'm going to minimize this again.

298
00:23:22.910 --> 00:23:23.230
All right.

299
00:23:23.240 --> 00:23:29.180
So in the next lesson, we will look at how to consider testing edge cases.

300
00:23:29.330 --> 00:23:30.980
So I'll see you in the next one.
