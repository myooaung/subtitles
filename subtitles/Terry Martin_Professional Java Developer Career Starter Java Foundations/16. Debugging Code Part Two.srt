1
00:00:00,090 --> 00:00:05,220
Another thing I can do with break points, though, is sometimes you'll have many break points throughout

2
00:00:05,220 --> 00:00:09,330
the code because you're trying to really figure out, Okay, what happens when I'm in this area of the

3
00:00:09,330 --> 00:00:11,070
code versus that area of the code, right?

4
00:00:11,190 --> 00:00:12,030
In fact, I'll do that.

5
00:00:12,210 --> 00:00:18,420
I'll put a breakpoint here, and then I will jump back into the guest's method and I'll put a breakpoint

6
00:00:18,480 --> 00:00:21,900
here and I will put one down here as well.

7
00:00:21,930 --> 00:00:24,300
OK, so now I've got break three break points.

8
00:00:24,300 --> 00:00:28,770
OK, if I go back over here, let's say that I decide, you know what?

9
00:00:28,920 --> 00:00:31,260
I don't need this particular break point now.

10
00:00:31,260 --> 00:00:37,080
I know that this isn't probably doing much for me, but I don't want to get rid of it for whatever reason.

11
00:00:37,260 --> 00:00:43,350
I just want to temporarily not stop here while I'm in my debug session.

12
00:00:43,360 --> 00:00:50,310
So what I can do, I can pull up a list of all of the break points that I have, which is actually quite

13
00:00:50,340 --> 00:00:51,120
helpful to do.

14
00:00:51,120 --> 00:00:55,920
Sometimes, especially sometimes you'll be in a you'll be in a debugging session where you've set so

15
00:00:55,920 --> 00:00:59,910
many break points that you starting to lose track of where they all are.

16
00:01:00,000 --> 00:01:04,290
OK, and you kind of want to see the big picture of where are all of the break points?

17
00:01:04,530 --> 00:01:07,500
So for that, you can actually click on this little icon here.

18
00:01:07,500 --> 00:01:10,050
View Break Points, So I'll click on that.

19
00:01:10,410 --> 00:01:16,800
OK, so now if I expand this top thing here, Java line break points, those are your standard break

20
00:01:16,800 --> 00:01:17,220
points.

21
00:01:17,400 --> 00:01:20,720
I can expand that and there are my three break points.

22
00:01:20,730 --> 00:01:26,940
OK, so one on line 21 and guessing Game Line 14 and guessing game and then in the test on line 64.

23
00:01:27,210 --> 00:01:33,560
And from here I can actually uncheck any of these to kind of just temporarily ignore or turn them off.

24
00:01:33,570 --> 00:01:34,830
So I'm not the leading them.

25
00:01:34,950 --> 00:01:36,560
I'm just turning it off, right?

26
00:01:36,570 --> 00:01:40,380
So if I wanted to get rid of this one, that's in the test, I can just.

27
00:01:41,620 --> 00:01:42,910
Uncheck that right.

28
00:01:43,030 --> 00:01:48,310
And it's nice that I can kind of see a little snippet of the code right there so that I don't have to

29
00:01:48,310 --> 00:01:50,830
remember now which one was this and what is it doing?

30
00:01:51,040 --> 00:01:56,080
I can just click on it, not on the checkmark, but on the actual name itself.

31
00:01:56,230 --> 00:02:02,620
And I get to see a little snippet of that code right there so that I have more context as to what that

32
00:02:02,620 --> 00:02:04,270
particular breakpoint was.

33
00:02:04,570 --> 00:02:05,770
And same thing here.

34
00:02:05,920 --> 00:02:06,370
OK.

35
00:02:06,610 --> 00:02:07,660
So that's kind of nice.

36
00:02:08,260 --> 00:02:08,620
So.

37
00:02:09,630 --> 00:02:13,680
You've got all kinds of little options here while you're highlighted on a break point.

38
00:02:13,950 --> 00:02:19,440
Just as I can check and uncheck the check marks here, I can also do the same thing here.

39
00:02:19,560 --> 00:02:21,630
OK, so this is more like a detailed view.

40
00:02:21,930 --> 00:02:26,830
This check mark here for enabled is the same as this check mark there, right?

41
00:02:26,850 --> 00:02:31,530
You see that I'm I'm toggling it here, but it's changing here also.

42
00:02:33,940 --> 00:02:35,890
So, yeah, so you can do that.

43
00:02:36,760 --> 00:02:44,860
And let's see, I can also specify what should happen when that breakpoint is hit, right?

44
00:02:44,980 --> 00:02:51,250
When the thread gets to that line with that particular break point, should it suspend, which is pretty

45
00:02:51,250 --> 00:02:53,320
much almost always what you'll want.

46
00:02:53,410 --> 00:02:56,200
You can tell it to just suspend the thread.

47
00:02:56,590 --> 00:03:02,230
Now here, I'm actually telling it to suspend all threads, which doesn't really apply too much for

48
00:03:02,230 --> 00:03:03,670
what I'm currently doing.

49
00:03:03,670 --> 00:03:10,420
There's really only one thread, but if I were somehow testing an application that has multiple threads,

50
00:03:10,930 --> 00:03:18,340
I could cause all of the threads to be suspended any time that particular breakpoint was hit.

51
00:03:18,490 --> 00:03:22,420
For the most part, I don't think you really need to be too concerned with this right now.

52
00:03:23,110 --> 00:03:29,410
And then there's another really cool feature that I sometimes really like, and that is to make a conditional

53
00:03:29,410 --> 00:03:30,130
break point.

54
00:03:30,460 --> 00:03:36,340
So this is kind of like having a breakpoint with an if statement where you can say, don't just stop

55
00:03:36,340 --> 00:03:42,610
because I have a breakpoint only stop at this breakpoint if a certain condition is met.

56
00:03:42,760 --> 00:03:49,270
And typically that condition will be some expression similar to an expression that you might have inside

57
00:03:49,270 --> 00:03:50,290
of an if statement.

58
00:03:50,350 --> 00:03:52,270
Let me show you what that would look like.

59
00:03:52,660 --> 00:03:55,510
Real quick, I'm going to close this for a moment.

60
00:03:56,650 --> 00:04:04,270
So let's see here if we go back into the guessing game code, and I think what I will do is I will make

61
00:04:04,270 --> 00:04:05,470
a change right here.

62
00:04:05,680 --> 00:04:08,260
I'm going to change this from a one.

63
00:04:09,720 --> 00:04:10,740
To a two.

64
00:04:11,070 --> 00:04:16,260
OK, so I'm intentionally kind of slightly breaking the application again.

65
00:04:16,620 --> 00:04:17,010
All right.

66
00:04:17,310 --> 00:04:21,470
And while I'm at it, I'm going to go ahead and get rid of these particular break points.

67
00:04:21,490 --> 00:04:28,650
I'm going to go back into the break point view here, and what I can do is just select them all like

68
00:04:28,650 --> 00:04:28,860
that.

69
00:04:28,860 --> 00:04:30,180
I just held down on shift.

70
00:04:30,420 --> 00:04:31,440
Well, here, let me show you.

71
00:04:31,620 --> 00:04:33,300
So I had this last one selected.

72
00:04:33,300 --> 00:04:38,640
So if I hold down on shift and then select the top one, then that will select everything in between

73
00:04:38,640 --> 00:04:40,050
right inclusively.

74
00:04:40,650 --> 00:04:47,550
And then from here, I can delete these by clicking the minus button here or remove, right?

75
00:04:47,580 --> 00:04:51,090
OK, so now I got rid of those break points and then I can click done.

76
00:04:51,720 --> 00:04:52,060
All right.

77
00:04:52,080 --> 00:05:00,600
Now, if I jump back over to the tests and just run all the tests, not in debug mode, but just regular

78
00:05:00,600 --> 00:05:05,010
run, because I want to just verify that I have broken at least one other test.

79
00:05:05,430 --> 00:05:05,940
All right.

80
00:05:05,940 --> 00:05:09,900
So we've got one failed test now, and it's a different one.

81
00:05:10,020 --> 00:05:10,440
Let's see.

82
00:05:10,440 --> 00:05:11,650
This is the test.

83
00:05:11,670 --> 00:05:12,900
I mean, double click on it.

84
00:05:13,260 --> 00:05:16,350
This is the test random number generation test.

85
00:05:16,500 --> 00:05:23,580
And what we're getting here is an array index out of bounds exception index 11 out of bounds for links

86
00:05:23,580 --> 00:05:28,570
11 and that's happening at one at line 49.

87
00:05:28,590 --> 00:05:31,890
So we're now trying to access.

88
00:05:33,030 --> 00:05:43,230
And Index 11 on this array, and there is no index 11, because Index 11 would be the 12th element in

89
00:05:43,230 --> 00:05:46,780
the array, and this array only has 11 elements.

90
00:05:46,800 --> 00:05:50,100
OK, so that's the bug we're trying to access.

91
00:05:50,340 --> 00:05:56,820
One element beyond the number of elements that are actually allocated in this array.

92
00:05:56,850 --> 00:06:01,000
OK, and that's all because I added, I changed that one to a two.

93
00:06:01,020 --> 00:06:02,730
So now we're going a little too far.

94
00:06:02,760 --> 00:06:03,180
OK.

95
00:06:03,540 --> 00:06:05,400
So here's the kind of neat thing.

96
00:06:05,640 --> 00:06:15,750
What if I wanted to make a breakpoint that stops right here, but it only does so if random NUM equals

97
00:06:15,990 --> 00:06:17,490
11, right?

98
00:06:18,060 --> 00:06:21,780
So normally to create a breakpoint, I can just click here, bam.

99
00:06:21,810 --> 00:06:22,730
Now I have a breakpoint.

100
00:06:22,740 --> 00:06:24,630
But here's the here's the reason I wouldn't.

101
00:06:24,870 --> 00:06:27,960
I might not want to just do a regular old breakpoint here.

102
00:06:28,320 --> 00:06:29,970
I'm inside of a loop.

103
00:06:31,000 --> 00:06:41,650
And that means I'd have to sit here and let the debugger stop on this line 10 times before 10 or 11

104
00:06:41,650 --> 00:06:46,630
times before I finally got to the scenario that I actually care about.

105
00:06:46,810 --> 00:06:48,010
Huge waste of my time.

106
00:06:48,160 --> 00:06:50,740
What if it wasn't an array with 12 elements?

107
00:06:50,740 --> 00:06:53,170
What if it was an array with a thousand elements?

108
00:06:53,350 --> 00:06:55,450
I don't want to sit there waiting on that right?

109
00:06:55,690 --> 00:06:56,720
And I don't have to.

110
00:06:57,010 --> 00:07:03,550
What I can do is just tell it only stop here when random numb equals 11.

111
00:07:03,970 --> 00:07:08,170
So the way I can do that is I can actually right click on this break point.

112
00:07:10,010 --> 00:07:15,840
And bam, right here, I get a little condensed version of what we were seeing in the bigger break point

113
00:07:15,860 --> 00:07:19,040
view, I don't have it available right now, but you know what I'm talking about.

114
00:07:19,520 --> 00:07:26,000
And so right here I can just type in a little a little expression random numb.

115
00:07:27,660 --> 00:07:29,610
Equals 11.

116
00:07:30,550 --> 00:07:37,810
So in other words, you can read this as if it were saying if random numb equals 11, then.

117
00:07:38,900 --> 00:07:44,210
Suspend the the debugger when you get to this line, that's that's pretty much what it's saying.

118
00:07:44,450 --> 00:07:45,800
Someone to click done.

119
00:07:47,430 --> 00:07:50,190
And then I can come up here and just run.

120
00:07:50,670 --> 00:07:56,670
Just this one test in debug mode, though, so we'll click on it and then choose Debug.

121
00:08:03,280 --> 00:08:09,820
And now I'm stopped here, but random numb equals 11, so that means it didn't stop here until it had

122
00:08:09,820 --> 00:08:15,550
iterated over this enough times for random numb to get to the value of 11, right?

123
00:08:15,820 --> 00:08:20,410
And now I can jump in if I want to or do whatever I want to do here.

124
00:08:21,220 --> 00:08:28,930
OK, so at any rate, that just shows you how a conditional breakpoint can be used quite effectively

125
00:08:28,930 --> 00:08:36,970
to prevent you from having to sit there and wait for some rare circumstance to occur.

126
00:08:37,000 --> 00:08:37,330
Right?

127
00:08:37,630 --> 00:08:45,580
By the way, this might also come in very handy in conjunction with the at repeat annotation that we

128
00:08:45,580 --> 00:08:46,930
learned earlier, right?

129
00:08:47,050 --> 00:08:52,390
So if you're waiting for some circumstance, that doesn't happen very often, you might want to set

130
00:08:52,390 --> 00:08:58,450
that repeat there to have it repeat many, many times so that you get more opportunities in conjunction

131
00:08:58,450 --> 00:09:00,430
with a conditional breakpoint, right?

132
00:09:00,430 --> 00:09:06,820
So that you don't have to sit there and manually keep clicking things until you get to wherever you're

133
00:09:06,850 --> 00:09:07,450
looking for.

134
00:09:07,490 --> 00:09:09,820
So that's a neat little technique that you can use.

135
00:09:10,030 --> 00:09:10,510
Let's see.

136
00:09:10,810 --> 00:09:18,040
Oh, now if you want to stop the debugger prematurely because you figured it out before you already

137
00:09:18,040 --> 00:09:22,780
figured it out or you don't care, or you need to go to lunch or whatever, or it's the end of the day,

138
00:09:23,080 --> 00:09:29,500
you can just click this little stop button right here to stop your current debug session.

139
00:09:31,220 --> 00:09:35,540
And now that session is is done, and I'm going to go ahead and get rid of that.

140
00:09:36,500 --> 00:09:44,300
Now if we jump back over to the guessing game code itself and scroll down here, and here's our main

141
00:09:44,300 --> 00:09:47,900
method where we can actually run this thing, right, like in real life.

142
00:09:48,680 --> 00:09:54,030
Now let me point out, you don't have to use the debugger with automated tests.

143
00:09:54,050 --> 00:10:00,620
You can use the debugger anywhere if you have lines of code that you can execute somehow, whether it's

144
00:10:00,620 --> 00:10:07,430
by hitting the play button on a main method or hitting the play button on a test method or wherever

145
00:10:07,430 --> 00:10:10,790
else, you can hit a play button or execute some code.

146
00:10:11,000 --> 00:10:12,230
You can put breakpoint.

147
00:10:12,560 --> 00:10:18,680
All you have to do is make sure that when you tell the ad to run that code that you tell it to run it

148
00:10:18,680 --> 00:10:20,030
in debug mode.

149
00:10:20,300 --> 00:10:25,250
That's the only way the weak points will be honored is if you're in debug mode.

150
00:10:25,970 --> 00:10:31,130
OK, and I just want to mention a couple final thoughts before I wrap up this lesson on debugging.

151
00:10:31,550 --> 00:10:39,680
One of the things that I notice novice developers do quite often is when they are stepping through code

152
00:10:39,680 --> 00:10:48,500
in debug mode, they have a tendency sometimes to just indiscriminately step into third party library

153
00:10:48,500 --> 00:10:48,790
code.

154
00:10:48,800 --> 00:10:53,060
I kind of touched on this a little bit ago, but I just want to finalize the point here.

155
00:10:53,480 --> 00:10:58,430
When you're stepping through code and especially when you're stepping into code in debug mode, you

156
00:10:58,430 --> 00:11:02,720
pretty much never want to step into third party libraries.

157
00:11:02,990 --> 00:11:10,040
So any line of code that contains method calls and those are method calls that you didn't write and

158
00:11:10,040 --> 00:11:11,030
they're not your code.

159
00:11:11,150 --> 00:11:13,320
You don't want to step into those lines.

160
00:11:13,340 --> 00:11:13,740
OK.

161
00:11:13,760 --> 00:11:14,190
Period.

162
00:11:14,210 --> 00:11:16,010
You just you don't want to step into those.

163
00:11:16,610 --> 00:11:19,550
OK, so don't use step into.

164
00:11:19,580 --> 00:11:23,900
So if we were on this line right here, for example, I do not.

165
00:11:23,900 --> 00:11:26,180
In fact, here I will actually do it.

166
00:11:26,330 --> 00:11:26,870
Debug.

167
00:11:28,260 --> 00:11:37,020
OK, so here I am now, if I were to step into this line, the I.D. would ask me which of these methods

168
00:11:37,020 --> 00:11:42,000
I want to step into, which is actually a nice touch in older versions of most I.D. ease.

169
00:11:42,300 --> 00:11:43,800
They wouldn't even give you the option.

170
00:11:43,800 --> 00:11:48,560
They would just start from the outer, from the innermost call and then work their way out from there.

171
00:11:48,900 --> 00:11:49,640
Kind of annoying.

172
00:11:49,650 --> 00:11:54,510
However, the main thing to note here is I didn't write any of this code, so I don't want to step into

173
00:11:54,510 --> 00:11:55,020
any of it.

174
00:11:55,030 --> 00:11:56,300
That's a waste of my time.

175
00:11:56,310 --> 00:11:58,800
It's going to be a fruitless endeavor for me.

176
00:11:59,130 --> 00:12:03,960
The appropriate thing to do here would be to step over this line and get to the next one.

177
00:12:04,290 --> 00:12:08,430
Now, in this particular case, I'm not actually going to be able to do that because I can't technically

178
00:12:08,550 --> 00:12:14,910
run this code that is trying to access the console from within the ADF for reasons that I've explained

179
00:12:14,910 --> 00:12:15,930
already before.

180
00:12:16,080 --> 00:12:19,990
So that's going to blow up with an exception being thrown or an error being thrown.

181
00:12:20,010 --> 00:12:20,370
OK.

182
00:12:20,460 --> 00:12:22,860
I was just using this as a as a quick example.

183
00:12:22,980 --> 00:12:24,210
So keep that in mind.

184
00:12:24,450 --> 00:12:32,940
Don't ever willy nilly just step into a line of code if that line of code contains third party methods

185
00:12:32,940 --> 00:12:39,900
that you did not write OK unless you actually mean to do that, and you will almost never mean to do

186
00:12:39,900 --> 00:12:40,170
that.

187
00:12:40,320 --> 00:12:44,100
Now I have done it a few times in the past, but usually on purpose.

188
00:12:44,130 --> 00:12:49,140
OK, so just pay attention, OK, if it's this kind of line, just step over it.

189
00:12:49,650 --> 00:12:56,100
One thing that I have noticed when I'm working with some developers, especially either novice developers

190
00:12:56,100 --> 00:12:58,510
or developers who frankly just aren't very good.

191
00:12:58,530 --> 00:13:05,070
I noticed that once they learned how to use the debugger just a little bit, they have a tendency to

192
00:13:05,070 --> 00:13:09,870
overuse the debugger like they use it to find out everything all the time.

193
00:13:10,230 --> 00:13:16,530
In my experience, the debugger can be a fantastic tool, especially when you just can't figure out

194
00:13:16,530 --> 00:13:17,790
what's going wrong, right?

195
00:13:17,790 --> 00:13:24,060
You can step through the code methodically until you figure out, OK, this this variable is actually

196
00:13:24,060 --> 00:13:27,530
set to this value, and I thought it was set to some other value, right?

197
00:13:27,600 --> 00:13:33,360
Probably almost nothing beats being able to simply step through the code while it's running and actually

198
00:13:33,360 --> 00:13:36,810
verify what is happening line by line.

199
00:13:37,530 --> 00:13:40,020
However, that process does take time.

200
00:13:40,050 --> 00:13:43,830
So what I like to do is a combination of things.

201
00:13:44,100 --> 00:13:50,250
I like to use automated tests, and the more strictly you're using TDD, the less likely it is that

202
00:13:50,250 --> 00:13:53,130
you're going to have many unexpected bugs.

203
00:13:53,280 --> 00:13:59,340
And in fact, technically speaking, the only bugs you should be able to have in a program that was

204
00:13:59,340 --> 00:14:06,140
written via TDD are bugs that weren't discovered because you didn't think of those testing scenarios,

205
00:14:06,150 --> 00:14:06,350
right?

206
00:14:06,360 --> 00:14:09,690
So you didn't write a test to test that scenario.

207
00:14:09,750 --> 00:14:12,390
And that's the scenario where where the bugs are.

208
00:14:12,540 --> 00:14:13,860
And that would make sense, right?

209
00:14:13,980 --> 00:14:20,520
And so in that case, what you'd want to do is as soon as you encounter a bug, you want to first write

210
00:14:20,520 --> 00:14:28,350
a test that reproduces that bug, and you should see that that test will indeed fail, right?

211
00:14:28,350 --> 00:14:35,130
Because you have that bug, do that first, then go and fix the bug, OK?

212
00:14:35,490 --> 00:14:40,620
And then to fix the bug, you may need to use the debugger and step through your code and figure out

213
00:14:40,620 --> 00:14:42,760
what is going on and analyze it right.

214
00:14:42,780 --> 00:14:45,360
And then once you figure that out, you can fix it.

215
00:14:45,360 --> 00:14:50,260
And hopefully, once you've fixed it, your newly written test will now pass.

216
00:14:50,280 --> 00:14:57,420
And now having that passing test, that passing test along with all of the other tests there, serves

217
00:14:57,420 --> 00:15:04,610
as a safety net to ensure that hopefully that particular bug never comes back.

218
00:15:04,620 --> 00:15:11,790
And if it does come back, you'll get an early warning system because that particular test will now

219
00:15:11,790 --> 00:15:12,330
fail.

220
00:15:12,960 --> 00:15:20,820
So you should understand that in most professional programming environments, there are servers that

221
00:15:20,820 --> 00:15:26,550
are set up to build and compile code that is written by the team automatically.

222
00:15:26,550 --> 00:15:33,090
So team members will write code and then they will kind of like check that code into a central code

223
00:15:33,090 --> 00:15:38,400
repository, which we will talk about a little bit more in detail in a future lesson.

224
00:15:38,790 --> 00:15:47,220
But after that code is built, any tests that exist for that code should ideally be run automatically

225
00:15:47,220 --> 00:15:49,260
by this build server.

226
00:15:49,800 --> 00:15:57,000
And if any of those tests fail, then a notification will be sent out to the entire team, letting them

227
00:15:57,000 --> 00:16:01,590
know right away, Hey, one of your tests or some of your tests have just failed.

228
00:16:01,800 --> 00:16:03,210
You need to go check this out.

229
00:16:03,210 --> 00:16:11,550
And ideally, that code can't proceed any further down the pipeline to moving into production use by

230
00:16:11,550 --> 00:16:16,590
customers or whomever until those tests are all passing.

231
00:16:16,620 --> 00:16:17,010
OK.

232
00:16:17,160 --> 00:16:24,120
So there's a lot more value to writing these tests than just to help you as an individual developer

233
00:16:24,300 --> 00:16:25,830
to write clean code write.

234
00:16:25,980 --> 00:16:27,480
These tests serve.

235
00:16:27,660 --> 00:16:34,620
As a an early warning system to let you know when someone might not even be, you might be another developer

236
00:16:34,620 --> 00:16:38,370
has inadvertently broken the the code, right?

237
00:16:39,240 --> 00:16:44,640
OK, so at any rate, you now have learned the basics of how to use a debugger.

238
00:16:44,640 --> 00:16:46,590
It's really not that complicated, right?

239
00:16:46,620 --> 00:16:51,870
And I encourage you to just play with the debugger right on working code, on broken code, whatever

240
00:16:51,900 --> 00:16:54,740
both sets and break points, run some code.

241
00:16:54,750 --> 00:16:57,090
Let it stop their step through the code.

242
00:16:57,090 --> 00:16:58,290
Step over the code.

243
00:16:58,920 --> 00:16:59,220
All right.

244
00:16:59,220 --> 00:17:04,290
So I think that's going to wrap it up for this lesson and I will see you in the next one.
