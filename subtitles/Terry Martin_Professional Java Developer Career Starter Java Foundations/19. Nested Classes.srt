1
00:00:00,180 --> 00:00:03,660
All right, so we're going to define this class at the bottom now.

2
00:00:03,930 --> 00:00:10,350
I'm going to let you know there are about probably, I don't know, four different ways to create classes

3
00:00:10,350 --> 00:00:11,400
within a class.

4
00:00:11,970 --> 00:00:17,130
Right now, we're just going to focus on one particular way and which is one of the most recommended

5
00:00:17,130 --> 00:00:17,430
ways.

6
00:00:17,460 --> 00:00:17,790
OK.

7
00:00:18,270 --> 00:00:18,510
All right.

8
00:00:18,600 --> 00:00:22,140
So what we can do is we'll come down here.

9
00:00:22,470 --> 00:00:29,430
Now we want to limit the scope of this class because we're only creating it for use right here.

10
00:00:29,700 --> 00:00:30,550
Nowhere else.

11
00:00:30,570 --> 00:00:33,960
OK, so we're going to make it private.

12
00:00:34,800 --> 00:00:37,350
Static final.

13
00:00:39,130 --> 00:00:40,390
It's going to be a class.

14
00:00:41,590 --> 00:00:46,420
And we'll call it, I don't know, dummy employee.

15
00:00:48,090 --> 00:00:54,300
And so it needs to extend our employee class, just like all of our other subclasses do.

16
00:00:55,290 --> 00:00:55,710
All right.

17
00:00:56,810 --> 00:01:00,800
OK, now we're going to need to implement some things here.

18
00:01:01,550 --> 00:01:03,560
Let's see what it's telling us first off.

19
00:01:03,860 --> 00:01:10,240
So class dummy employee must either be declared abstract or implement abstract method, get salary.

20
00:01:10,250 --> 00:01:14,720
So here we are being forced to implement the get salary method, which is a good thing.

21
00:01:14,720 --> 00:01:21,650
So I will do a control for override, which lets me override the methods that need to be implemented.

22
00:01:21,890 --> 00:01:26,570
And I'm going to start with that one there the get salary method and look at that.

23
00:01:26,570 --> 00:01:32,120
It gives us the exact implementation that I wanted anyway, which is simply to return to zero.

24
00:01:32,450 --> 00:01:33,740
Nothing more, nothing less.

25
00:01:33,890 --> 00:01:35,900
All right now, let's see what else it's complaining about.

26
00:01:36,140 --> 00:01:40,040
There is no default constructor available on employee.

27
00:01:40,040 --> 00:01:46,190
So the deal here is that currently we're not defining any constructor at all.

28
00:01:46,370 --> 00:01:53,180
And if you don't define a constructor on a on a subclass, then that subclass, when it's when instances

29
00:01:53,180 --> 00:02:01,610
of it are created, the JVM will look to call a no ARG default constructor on the superclass, of which

30
00:02:01,610 --> 00:02:05,630
there is none because we didn't define one because we didn't need one up until now.

31
00:02:05,810 --> 00:02:06,950
So now we kind of do.

32
00:02:07,460 --> 00:02:09,860
So we're going to make one real quick.

33
00:02:10,040 --> 00:02:12,110
But now let's be careful here.

34
00:02:12,950 --> 00:02:14,460
We don't really need this.

35
00:02:14,510 --> 00:02:17,600
No, our default constructor like for our own purposes.

36
00:02:17,600 --> 00:02:24,560
And so knowing that we don't want this to be public because it doesn't need to be used outside of this

37
00:02:24,560 --> 00:02:25,640
class at all.

38
00:02:25,820 --> 00:02:26,270
OK.

39
00:02:26,600 --> 00:02:31,010
So let's generate a new constructor.

40
00:02:33,000 --> 00:02:41,520
And we will use none of the inputs there, because this will be a default no ARG constructor and let's

41
00:02:41,520 --> 00:02:48,810
just make it protected so that it can be called by subclasses.

42
00:02:50,090 --> 00:02:56,600
But not from outside of the class hierarchy, OK, which which makes sense anyway, because this class

43
00:02:56,600 --> 00:02:57,530
is abstract, right?

44
00:02:57,530 --> 00:03:03,500
So you wouldn't really wouldn't make any sense for this constructor to be called for any other reason.

45
00:03:03,740 --> 00:03:06,470
Now when I created this, we got an error here.

46
00:03:06,500 --> 00:03:07,640
Let's see what this is.

47
00:03:07,850 --> 00:03:11,930
It's saying that variable people, matt might not have been initialized.

48
00:03:11,950 --> 00:03:18,080
So the problem here is that this people matter is declared final, which means it can only be initialized

49
00:03:18,080 --> 00:03:18,950
one time.

50
00:03:19,280 --> 00:03:28,190
Now that I've created a second constructor, Java and the A.D. upon analysis are realizing that if some

51
00:03:28,190 --> 00:03:33,380
code tried to create an instance of this employee again, which doesn't really make sense.

52
00:03:33,380 --> 00:03:40,970
But if if, if an instance was attempted to be created via this constructor here, which does nothing

53
00:03:40,970 --> 00:03:45,800
in its body, then that would mean that this people matter would be undefined.

54
00:03:45,800 --> 00:03:48,470
And since it's final, that's unacceptable.

55
00:03:48,680 --> 00:03:50,310
So we need to do something with that.

56
00:03:50,330 --> 00:03:56,750
I think the easiest thing we can do here is to simply set it to null.

57
00:03:58,610 --> 00:03:59,480
And voila!

58
00:03:59,630 --> 00:04:01,190
That error goes away.

59
00:04:01,610 --> 00:04:01,880
All right.

60
00:04:01,910 --> 00:04:03,470
Let's go back down here again.

61
00:04:03,830 --> 00:04:05,540
See what else we need to do.

62
00:04:06,260 --> 00:04:06,580
All right.

63
00:04:06,590 --> 00:04:09,200
So here's our dummy employee now.

64
00:04:09,620 --> 00:04:15,680
The other employees, when they're working properly, they will be setting a first name and a last name

65
00:04:15,680 --> 00:04:16,370
in all of that.

66
00:04:16,640 --> 00:04:24,290
And I have none of that code here, so we probably want to do something about that as well.

67
00:04:24,770 --> 00:04:32,750
So the easiest thing I think we could do is to simply use this, know our default constructor here to

68
00:04:32,750 --> 00:04:35,840
initialize these fields to something.

69
00:04:36,140 --> 00:04:39,560
OK, let's just see what that might look like so we could do.

70
00:04:39,920 --> 00:04:44,330
Last name equals, and I'm just going to set it to empty string.

71
00:04:44,690 --> 00:04:45,730
First name.

72
00:04:46,640 --> 00:04:47,600
Empty string.

73
00:04:48,760 --> 00:04:50,590
And date of birth

74
00:04:53,290 --> 00:04:55,600
for now, I'm just going to let it be null.

75
00:04:56,410 --> 00:05:00,700
And so this dummy employee will inherit all of that.

76
00:05:01,480 --> 00:05:04,210
And now all we need to do is fix this bit here.

77
00:05:04,480 --> 00:05:10,900
So now, instead of returning a null, let's just return a new dummy employee.

78
00:05:11,840 --> 00:05:15,710
Like so and we can do the same here as well.

79
00:05:18,250 --> 00:05:22,720
And now, if we go back over to the main class here now.

80
00:05:23,910 --> 00:05:30,480
We don't need this check anymore, because in theory, this employee can never be null.

81
00:05:30,630 --> 00:05:33,840
At worst, it'll just be a dummy employee.

82
00:05:34,170 --> 00:05:38,430
So let's get rid of let's unwrap that.

83
00:05:41,400 --> 00:05:48,330
And then let's onion dent, and then let's just rerun this program again, because if you recall, we've

84
00:05:48,330 --> 00:05:56,520
got one invalid employee role right here, which should result now in the creation of a dummy employee.

85
00:05:56,790 --> 00:05:58,440
So let's see what happens here.

86
00:06:00,340 --> 00:06:01,240
OK, cool.

87
00:06:01,360 --> 00:06:03,190
Same value, it didn't blow up.

88
00:06:03,970 --> 00:06:06,850
And there's our second instance right there.

89
00:06:06,940 --> 00:06:08,140
It's a little too empty.

90
00:06:08,210 --> 00:06:12,970
We might have wanted to fix that, but it doesn't blow up, right?

91
00:06:12,970 --> 00:06:14,320
We get empty values there.

92
00:06:14,410 --> 00:06:19,420
Now, if we wanted to make this look a little better, we can come back over here to employee go up

93
00:06:19,420 --> 00:06:23,410
to this constructor here and maybe just put something in.

94
00:06:23,410 --> 00:06:31,770
I don't know, like in a in a, you know, for not applicable do something like that.

95
00:06:31,780 --> 00:06:33,070
Let's run it again.

96
00:06:34,250 --> 00:06:34,630
There.

97
00:06:34,670 --> 00:06:36,460
There we go in a in a so.

98
00:06:36,620 --> 00:06:37,310
Little bit better.

99
00:06:37,400 --> 00:06:43,940
And by the way, this is proving something to this is proving that when we create a dummy employee,

100
00:06:44,090 --> 00:06:51,680
even though we did not explicitly define a constructor on it, the inherited no, our default constructor

101
00:06:51,680 --> 00:06:56,350
is getting called right because that's where we're setting the nnanna.

102
00:06:56,360 --> 00:07:01,340
So this no, our default protected constructor is getting called here.

103
00:07:01,460 --> 00:07:10,220
One other thing we could consider making this constructor protected as well because we only went outside

104
00:07:10,220 --> 00:07:15,290
code to create employee instances via this factory method here.

105
00:07:15,320 --> 00:07:22,640
OK, so if we wanted to force everyone to only use this factory method, then we'd want to just make

106
00:07:22,640 --> 00:07:26,390
this protected like so.

107
00:07:27,350 --> 00:07:33,590
So if we jump over here back to Maine one more time and just run it all again and just make sure that

108
00:07:33,590 --> 00:07:34,490
that's all legit.

109
00:07:35,730 --> 00:07:37,050
Yeah, looks good.

110
00:07:37,290 --> 00:07:39,660
Same values, everything's looking good.

111
00:07:39,870 --> 00:07:40,200
Yeah.

112
00:07:40,620 --> 00:07:42,840
All right, so I'm going to wrap this up.

113
00:07:43,140 --> 00:07:45,700
So you've learned a whole lot here.

114
00:07:45,720 --> 00:07:49,770
Abstract classes, interfaces, that's class.

115
00:07:49,800 --> 00:07:50,790
Oh yeah, by the way.

116
00:07:51,480 --> 00:07:59,220
So let's see this class here is what is known as A. That class that makes sense, right?

117
00:07:59,220 --> 00:08:01,440
It's a class defined inside of a class.

118
00:08:01,560 --> 00:08:03,150
It's a nested class.

119
00:08:03,330 --> 00:08:05,580
Now let me be clear on a couple of things.

120
00:08:05,850 --> 00:08:13,830
I chose to create this class as a nested class instead of creating a class outside here because of a

121
00:08:13,830 --> 00:08:14,400
few things.

122
00:08:14,610 --> 00:08:16,380
First off, look how minimal it is.

123
00:08:16,680 --> 00:08:18,690
It's just the bare minimum, right?

124
00:08:18,840 --> 00:08:24,300
All it's really doing, in fact, is just implementing the get salary method, right?

125
00:08:24,330 --> 00:08:25,410
That's pretty much it.

126
00:08:25,950 --> 00:08:33,300
So I didn't want to create a whole additional class just for that, and I made it private because there's

127
00:08:33,300 --> 00:08:37,840
no external code that should ever need to instantiate this.

128
00:08:37,860 --> 00:08:38,700
As of now?

129
00:08:38,820 --> 00:08:39,300
OK.

130
00:08:39,600 --> 00:08:45,630
So instances of this class never need to be created outside of this class here.

131
00:08:46,140 --> 00:08:46,530
OK.

132
00:08:46,800 --> 00:08:56,730
It's static because of the way that the compiler handles nested classes, and it is strongly recommended

133
00:08:57,030 --> 00:09:03,900
that when we need a nested class of this sort that we first go with it just being static.

134
00:09:03,900 --> 00:09:09,690
So if you want to know more about that, I will point you to an excellent book that is one of the seminal

135
00:09:09,690 --> 00:09:18,600
Bibles of Java and programming in general called Effective Java by Joshua Block by Pelosi H.

136
00:09:18,900 --> 00:09:24,960
It's a fantastic book, and it will teach you so many things, like if you're going to make an nested

137
00:09:24,960 --> 00:09:29,190
class for this kind of purpose, you should prefer for it to be static again.

138
00:09:29,310 --> 00:09:35,130
And we're making it final because since it is a dummy class, I don't expect that this should ever need

139
00:09:35,130 --> 00:09:38,130
to be extended by making a class final.

140
00:09:38,250 --> 00:09:42,060
We prevent any other class from being able to extend it.

141
00:09:42,240 --> 00:09:42,690
OK.

142
00:09:43,020 --> 00:09:43,610
All right.

143
00:09:43,620 --> 00:09:47,880
So that's going to wrap this up and I will see you in the next one.
