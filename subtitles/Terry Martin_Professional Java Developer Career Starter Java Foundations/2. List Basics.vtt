WEBVTT
1
00:00:00.890 --> 00:00:07.460
All right, so the first type of collection we're going to learn about is a list, so lists are very

2
00:00:07.460 --> 00:00:11.450
similar to arrays in terms of their functionality.

3
00:00:12.380 --> 00:00:18.020
We've used the phrase a few times in the past where we've created strings or numbers or even objects,

4
00:00:18.230 --> 00:00:20.900
and we can store them in an array.

5
00:00:21.710 --> 00:00:23.780
Lists are much the same.

6
00:00:24.050 --> 00:00:29.960
The primary reason for using a list is that we want to collect a bunch of objects usually so that we

7
00:00:29.960 --> 00:00:33.800
can iterate over them later or so that we can pass them around.

8
00:00:33.980 --> 00:00:36.860
From method to method or something along those lines.

9
00:00:37.130 --> 00:00:43.190
So lists are great for storing lots of objects and specifically for storing them in order.

10
00:00:43.250 --> 00:00:43.730
OK.

11
00:00:43.970 --> 00:00:51.110
That is the main distinction of a list versus some of the other types of collections that we will look

12
00:00:51.110 --> 00:00:51.410
at.

13
00:00:51.800 --> 00:00:56.810
Lists are intended to allow us to store objects in order.

14
00:00:57.380 --> 00:01:02.330
Now, list itself is an interface, as I have already mentioned.

15
00:01:02.870 --> 00:01:07.040
And as such, you cannot create specifically a list.

16
00:01:07.220 --> 00:01:12.740
You need to create an instance of a class that implements the list interface.

17
00:01:12.770 --> 00:01:20.330
Two of the fairly well known implementations of the list interface are linked list and array list.

18
00:01:20.480 --> 00:01:24.680
These are actual classes that we can instantiate of the two.

19
00:01:24.920 --> 00:01:26.270
I would say for sure.

20
00:01:26.480 --> 00:01:28.490
Array list is the most popular.

21
00:01:28.850 --> 00:01:36.050
Most developers, if they just need a generic collection to store a bunch of objects, then usually

22
00:01:36.050 --> 00:01:41.180
will just automatically go with the array list without really analyzing or thinking.

23
00:01:41.300 --> 00:01:43.150
I'm not saying that's necessarily a bad thing.

24
00:01:43.160 --> 00:01:46.370
I'm just saying that's how popular it is, is it?

25
00:01:46.580 --> 00:01:50.120
It tends to be everybody's go to collection type.

26
00:01:50.630 --> 00:01:57.650
So Array List actually uses an array internally in its implementation.

27
00:01:58.130 --> 00:01:59.330
Thus, the name.

28
00:01:59.630 --> 00:02:05.780
Now you may be wondering, well, what's the difference between just using an actual array versus using

29
00:02:05.780 --> 00:02:07.430
this array list thing?

30
00:02:07.910 --> 00:02:14.960
And I would say the biggest difference would probably have to be the fact that with a traditional array,

31
00:02:14.990 --> 00:02:18.320
you must initialize its size when you're creating it.

32
00:02:18.470 --> 00:02:23.000
And once you've initialized its size, you cannot change that size.

33
00:02:23.270 --> 00:02:30.350
So if you think you're going to need an array that holds 10 strings and you create and initialize it

34
00:02:30.350 --> 00:02:36.110
to hold 10 strings and then later on, for some reason you realize you need to add two more.

35
00:02:36.350 --> 00:02:38.960
You need to actually add 12 strings to it.

36
00:02:39.170 --> 00:02:41.750
You're out of luck with that particular array.

37
00:02:41.930 --> 00:02:48.650
You'll likely just need to create a bigger array and then store all 12 strings in that newer array or

38
00:02:48.650 --> 00:02:50.120
something along those lines.

39
00:02:50.420 --> 00:02:58.930
However, with lists and array lists in particular, lists are able to grow or shrink dynamically.

40
00:02:58.940 --> 00:03:05.180
And so when we create an instance of a list, we don't need to specify its size beforehand.

41
00:03:05.540 --> 00:03:12.200
It will grow dynamically as needed, or it may even shrink dynamically as needed as well.

42
00:03:12.530 --> 00:03:19.490
And so that is one of the biggest functional differences between array lists and just regular plain

43
00:03:19.490 --> 00:03:20.600
old arrays.

44
00:03:20.930 --> 00:03:26.030
Additionally, lists can only hold objects, not primitives.

45
00:03:26.300 --> 00:03:31.640
So arrays, as you may recall, can be used to store primitive numbers.

46
00:03:31.760 --> 00:03:33.590
Lists cannot do that.

47
00:03:33.770 --> 00:03:37.580
Everything that goes into a list has to be an actual object.

48
00:03:38.180 --> 00:03:44.000
This isn't actually that big of a deal in terms of usability, though, because if you want to store

49
00:03:44.000 --> 00:03:50.360
numbers in a list, for example, you can simply wrap them inside of the numeric wrapper classes first

50
00:03:50.690 --> 00:03:51.680
and then you can go.

51
00:03:51.830 --> 00:03:57.440
Now, of course, because the wrapper classes are objects, they do take up more memory and they are

52
00:03:57.440 --> 00:03:58.310
heavier weight.

53
00:03:58.430 --> 00:04:02.390
But it does give you a way to use lists to store numbers.

54
00:04:02.540 --> 00:04:05.420
So let's turn to the code here.

55
00:04:05.450 --> 00:04:11.420
We're still working in the employees project because it will actually serve as a very good project for

56
00:04:11.420 --> 00:04:16.700
us to play around with collections seeing as how we have already here.

57
00:04:17.060 --> 00:04:18.890
Basically, a list of people.

58
00:04:19.610 --> 00:04:27.380
So what we're going to do is we're going to experiment with changing the way that we are totaling up

59
00:04:27.380 --> 00:04:33.380
the salaries and we will make use of a list to do this instead.

60
00:04:33.770 --> 00:04:37.250
So the first thing to know is, well, how do we create a list?

61
00:04:37.820 --> 00:04:41.060
So what we're going to do is we're going to create a collection.

62
00:04:41.480 --> 00:04:47.930
And for every employee that's getting created inside of this loop, we'll take that employee and add

63
00:04:47.930 --> 00:04:48.980
them to the collection.

64
00:04:48.980 --> 00:04:50.900
And in this case, the collection will be a list.

65
00:04:51.230 --> 00:04:57.680
And then after we've added all of the employees to this new collection, we can play with that collection

66
00:04:57.680 --> 00:04:59.540
and see what kinds of things we can do with it.

67
00:05:00.040 --> 00:05:05.260
So the first thing we need to do is to actually create an instance of a collection or specifically of

68
00:05:05.290 --> 00:05:06.070
a list.

69
00:05:06.800 --> 00:05:13.810
So we need to create that instance above this while loop.

70
00:05:14.590 --> 00:05:15.730
Can you think of why?

71
00:05:18.680 --> 00:05:26.780
Well, the reason is because if we're going to be adding employees to the list, if we create the list

72
00:05:26.780 --> 00:05:33.620
inside of the while loop, then that list will keep getting re initialized and we'll never be accumulating

73
00:05:33.620 --> 00:05:35.180
all of the employee objects.

74
00:05:35.480 --> 00:05:37.700
So let's let me show you how we'll do this.

75
00:05:37.880 --> 00:05:42.680
So we'll I'll make a new line above the beginning of this loop, like so.

76
00:05:44.330 --> 00:05:51.710
And to create an actual instance of a list, we just use the new operator as we would when we create

77
00:05:51.710 --> 00:05:53.030
any other type of object.

78
00:05:53.150 --> 00:06:00.860
Now, keep in mind, we can't say new list because list is an interface and you cannot instantiate an

79
00:06:00.860 --> 00:06:01.550
interface.

80
00:06:01.790 --> 00:06:07.550
So we need to instantiate one of the classes that implements the list interface.

81
00:06:07.550 --> 00:06:13.790
And I mentioned earlier that the two most popular ones are array list and linked list.

82
00:06:14.060 --> 00:06:18.590
So I'm going to go for array list as it is the most popular.

83
00:06:19.640 --> 00:06:20.060
OK.

84
00:06:20.360 --> 00:06:22.490
And so we can do this now.

85
00:06:22.490 --> 00:06:31.100
Normally, when we create an object instance, we type new and then the class type and then parentheses

86
00:06:31.100 --> 00:06:31.850
like this.

87
00:06:32.210 --> 00:06:40.010
And I'll import this class right now because it's in red, so I'm going to do an option return to import

88
00:06:40.010 --> 00:06:40.340
that.

89
00:06:40.550 --> 00:06:41.600
And then a semicolon.

90
00:06:42.110 --> 00:06:44.600
So that's normally how you would create any object.

91
00:06:44.810 --> 00:06:50.420
Now I'm going to show you in a moment, though, that this isn't the recommended way to do this, but

92
00:06:50.570 --> 00:06:52.580
I will come right back to this in just a moment.

93
00:06:52.910 --> 00:06:53.180
All right.

94
00:06:53.190 --> 00:06:59.480
So normally from here, we then want to store this instance in a variable.

95
00:06:59.720 --> 00:07:04.070
So if I do a option command V to create a variable?

96
00:07:05.630 --> 00:07:06.080
All right.

97
00:07:06.320 --> 00:07:07.400
The I.D..

98
00:07:09.290 --> 00:07:14.910
Generates a little bit of code on the left side of the equals, first look at what the ad does.

99
00:07:14.930 --> 00:07:24.830
It already knows that I want to store this instance not in a variable of type ArrayList, but in a variable

100
00:07:24.830 --> 00:07:26.120
of type list.

101
00:07:26.510 --> 00:07:34.730
If you recall from, I think, the last lesson in the previous module, I mentioned briefly that we

102
00:07:34.730 --> 00:07:39.620
should generally prefer to store instances in a more generic type.

103
00:07:40.010 --> 00:07:47.360
Or maybe I can say another way we should prefer to store object instances in interfaces, at least if

104
00:07:47.360 --> 00:07:54.110
there is a logical interface that can represent the functionality that we need from that object.

105
00:07:54.320 --> 00:07:59.450
So in the case of ArrayList, it does implement the list interface.

106
00:07:59.450 --> 00:08:07.070
And so it's a smart move to store instances of array lists inside of variables of type list rather than

107
00:08:07.070 --> 00:08:08.840
variables of type array list.

108
00:08:09.170 --> 00:08:12.890
You'll see why this is actually a very good idea in just a little bit.

109
00:08:13.610 --> 00:08:13.880
All right.

110
00:08:13.890 --> 00:08:17.690
So the ADC already chose the list interface for me.

111
00:08:17.870 --> 00:08:21.890
I don't know for a fact that it will do the same for you on your computer.

112
00:08:21.890 --> 00:08:24.740
It may be because they've already played around with this a little bit.

113
00:08:25.310 --> 00:08:32.990
So be careful if you do generate a variable to hold an instance of the array list, make sure that that

114
00:08:32.990 --> 00:08:35.000
variable instances of type list.

115
00:08:35.480 --> 00:08:35.810
All right.

116
00:08:35.820 --> 00:08:39.980
And then the next thing I need to do is to name my variable.

117
00:08:40.880 --> 00:08:45.110
So this variable is going to be holding on to the employees.

118
00:08:45.110 --> 00:08:53.420
And so I'm inclined to just call it employees, plural, because my intention is to store multiple employees

119
00:08:53.420 --> 00:08:53.720
in it.

120
00:08:53.720 --> 00:08:55.220
And so I will make it plural.

121
00:08:55.640 --> 00:08:57.260
And then I will hit return.

122
00:08:57.740 --> 00:08:58.110
All right.

123
00:08:58.130 --> 00:09:03.080
So with this, I can store employees right now.

124
00:09:03.440 --> 00:09:08.570
And in fact, I'm going to go ahead and do that to show you how to use this in the in the most straightforward

125
00:09:08.570 --> 00:09:08.930
way.

126
00:09:09.290 --> 00:09:15.650
So we've got this list that can hold employees, and I didn't need to say anything like how big it needs

127
00:09:15.650 --> 00:09:16.970
to be or anything like that.

128
00:09:17.300 --> 00:09:23.570
So now down here in the while loop, we've got line thirty eight where we create employee objects and

129
00:09:23.570 --> 00:09:30.050
those get spat out right here and stored temporarily into this employee variable.

130
00:09:30.350 --> 00:09:41.270
So what I could do now is make a new line and then I can reference the employees list like so and then

131
00:09:41.270 --> 00:09:47.030
I can call one of the list methods, which is add.

132
00:09:49.010 --> 00:09:53.930
And then I can simply add this new employee created on Line 38.

133
00:09:56.260 --> 00:09:59.890
Like so and it's just that easy to do this.

134
00:10:00.280 --> 00:10:04.720
Now let me show you what's wrong with this code so that you have an appreciation for it.

135
00:10:04.990 --> 00:10:06.490
This will work, by the way.

136
00:10:07.870 --> 00:10:08.740
This will work.

137
00:10:08.740 --> 00:10:11.440
I won't get any errors if I run this code.

138
00:10:11.470 --> 00:10:11.890
OK.

139
00:10:12.190 --> 00:10:15.040
However, let me show you something that's bad.

140
00:10:15.430 --> 00:10:20.920
Now, if I make another line, I can reference the employees list again.

141
00:10:24.720 --> 00:10:29.790
And I can call and again, and this time, though, I can pass in a string.

142
00:10:33.690 --> 00:10:34.560
Now, look at that.

143
00:10:35.550 --> 00:10:36.060
That.

144
00:10:36.890 --> 00:10:38.510
That's also being allowed.

145
00:10:38.780 --> 00:10:40.460
Do you see what the problem is here?

146
00:10:42.540 --> 00:10:44.400
All right, so the problem is that.

147
00:10:45.440 --> 00:10:50.450
This list is allowing me to store different types of objects.

148
00:10:50.840 --> 00:10:56.000
This object is an object of type I employee, which is an interface.

149
00:10:56.600 --> 00:10:59.210
This object here is a string.

150
00:10:59.750 --> 00:11:03.110
These are obviously totally different types of objects.

151
00:11:03.260 --> 00:11:09.920
And the problem with this is that later on, I may want to write some code where I loop over all of

152
00:11:09.920 --> 00:11:18.080
the items that I stored in this list and do something like summing up their salaries right by calling

153
00:11:18.080 --> 00:11:18.800
get salary.

154
00:11:19.040 --> 00:11:26.060
Well, that's going to blow up if I happen to encounter an object that is different from the employee

155
00:11:26.060 --> 00:11:27.290
object, for example.

156
00:11:27.950 --> 00:11:34.940
So in the earlier versions of Java, this kind of code was completely permitted, and there wasn't a

157
00:11:34.940 --> 00:11:42.530
great way to protect one's self from making mistakes like this storing objects of different types in

158
00:11:42.530 --> 00:11:43.580
your collections.

159
00:11:43.880 --> 00:11:51.560
However, eventually a new feature was added to Java to help protect us from making this kind of mistake.

160
00:11:51.770 --> 00:11:53.960
And the new feature is called generics.

161
00:11:54.350 --> 00:12:00.710
So with generics, we're able to not only create a collection and then store objects in it.

162
00:12:01.010 --> 00:12:08.840
We're actually able to specify to Java what type of objects we actually intend to store in that collection.

163
00:12:09.260 --> 00:12:17.390
And by specifying that at the time that we are creating the instance, the I-D and Java in general can

164
00:12:17.390 --> 00:12:20.600
protect us from doing dumb things like this.

165
00:12:20.990 --> 00:12:27.650
And so to use generics here to specify what type of objects we're going to be storing in here, all

166
00:12:27.650 --> 00:12:35.300
I need to do is put my cursor here on the list here and I'm going to use special symbols.

167
00:12:36.350 --> 00:12:44.810
The less than and greater than symbol, which together are called the diamond operator and inside and

168
00:12:44.810 --> 00:12:52.970
in-between these two symbols, I can simply specify a type a data type that I want to allow to be stored

169
00:12:52.970 --> 00:12:54.140
in this collection.

170
00:12:54.320 --> 00:13:01.670
So in this case, again, I employee recreate employee returns, objects of type I employee.

171
00:13:02.060 --> 00:13:09.800
So here if I type, I employee like, so look at what happens.

172
00:13:10.040 --> 00:13:17.360
Suddenly, Line 40 goes in error, and if I hover over it, I get a message saying the required type

173
00:13:17.360 --> 00:13:18.530
should be an employee.

174
00:13:18.530 --> 00:13:19.880
But I provided a string.

175
00:13:20.030 --> 00:13:26.690
And so now my ID is warning me that I'm trying to add an object of a data type that is incompatible

176
00:13:26.930 --> 00:13:29.420
with this particular collection.

177
00:13:29.900 --> 00:13:36.260
And that's great because otherwise I wouldn't have discovered this until I did something dumb while

178
00:13:36.260 --> 00:13:40.370
I was actually running the program at runtime, as we would call it.

179
00:13:40.550 --> 00:13:43.460
And by that point, it's too late to do much about it.

180
00:13:43.760 --> 00:13:48.800
So you'd rather catch this kind of mistake while you're writing the code and not while you're running

181
00:13:48.800 --> 00:13:49.310
the code.

182
00:13:50.240 --> 00:13:53.060
So I'm going to delete that line now.

183
00:13:53.960 --> 00:13:57.170
Now there's one other thing that I should do.

184
00:13:57.260 --> 00:14:04.160
I was able to specify the type of objects that I want to store in this variable, but I can also make

185
00:14:04.160 --> 00:14:10.940
sure that Java knows what types of objects are going to be used when it's creating this array list in

186
00:14:10.940 --> 00:14:11.810
the first place.

187
00:14:12.170 --> 00:14:20.090
Now you might think that I should just do the same thing here like I employee and I can, I can do that.

188
00:14:20.510 --> 00:14:27.680
However, even newer versions of Java have helped us out a little bit to not have to be so redundant.

189
00:14:27.950 --> 00:14:32.030
You know, if we're already saying we want to store it, we want to work with our employees for the

190
00:14:32.030 --> 00:14:32.720
list here.

191
00:14:32.900 --> 00:14:34.460
Why should we have to say it again here?

192
00:14:34.460 --> 00:14:39.500
And in fact, if you notice this word, I employee on the right hand side is in gray.

193
00:14:39.590 --> 00:14:42.890
That's because that's telling us it's redundant information.

194
00:14:44.020 --> 00:14:50.860
It says the explicit type argument I employee can be replaced with just the diamond operator itself.

195
00:14:51.280 --> 00:14:51.880
So.

196
00:14:52.860 --> 00:14:57.960
We can actually just remove those words.

197
00:14:58.320 --> 00:15:06.270
And so now what we're what we're basically telling Java is create a new ArrayList that adheres to generics,

198
00:15:06.870 --> 00:15:10.470
but we don't have to specify what the data type is for the generic.

199
00:15:10.710 --> 00:15:18.090
It will infer that based on what I said over here on the left side, OK, so this is called type inference

200
00:15:18.090 --> 00:15:24.030
because it's able to infer based on the total context of what we're saying here.

201
00:15:24.270 --> 00:15:27.600
And so that basically, again, just saves us a little bit of typing.

202
00:15:27.780 --> 00:15:30.970
If you may recall, I also mentioned in a previous lesson.

203
00:15:31.200 --> 00:15:37.140
A lot of the newest features that are being added to Java tend to boil down to one main theme, which

204
00:15:37.140 --> 00:15:40.680
is How can we allow you to do more with less typing?

205
00:15:41.310 --> 00:15:44.880
And so here's another example of that doing more with less typing.

206
00:15:46.200 --> 00:15:46.620
All right.

207
00:15:46.630 --> 00:15:53.880
So now what we will end up with is a bunch of employees being added to this collection called employees.

208
00:15:54.960 --> 00:15:56.460
What can we do next with it?

209
00:15:57.600 --> 00:16:02.400
Well, one thing we could do now, I'm not saying this makes a lot of sense to do, by the way, but

210
00:16:02.520 --> 00:16:10.590
here's one thing we could do we could do no additional processing inside of this loop.

211
00:16:10.800 --> 00:16:16.830
So it could be like the purpose of this first loop is simply to create a bunch of employee objects and

212
00:16:16.830 --> 00:16:18.990
store them in this collection.

213
00:16:19.020 --> 00:16:19.470
OK.

214
00:16:20.250 --> 00:16:27.510
But then we could have another loop where we loop over all of the objects in this collection and then

215
00:16:27.510 --> 00:16:29.310
we do all of the totaling and everything.

216
00:16:29.580 --> 00:16:34.320
Now, obviously, in this particular case, it doesn't make a lot of sense to do it, but I'm going

217
00:16:34.320 --> 00:16:39.060
to do it this way so that I have an excuse to show you yet another cool feature of loops.

218
00:16:39.600 --> 00:16:43.680
So you have learned how to make for loops in the past.

219
00:16:43.830 --> 00:16:46.890
And I'll remind you of what the format for for loop is.

220
00:16:46.890 --> 00:16:54.900
We do four and then we can define and initialize a variable in the first section of the for loop like.

221
00:16:54.900 --> 00:17:07.230
So let's say that we want to count up to 10 so I could create an integer and give it a name like counter,

222
00:17:08.160 --> 00:17:13.230
and I can initialize it to a number like zero and then I can use a semicolon.

223
00:17:13.650 --> 00:17:22.920
And then in the second section of the for loop, I can specify a criteria for how long this loop should

224
00:17:22.920 --> 00:17:23.730
keep going.

225
00:17:23.940 --> 00:17:31.410
So I can say something like while counter is less than 10, for example, and then in the final section

226
00:17:31.440 --> 00:17:38.640
of the loop, I can specify how to increment the counter so I can simply say something like counter

227
00:17:38.640 --> 00:17:39.510
+ +.

228
00:17:39.870 --> 00:17:46.500
And then I have my loop body here, and so then I can do something right and I can even reference this

229
00:17:46.650 --> 00:17:54.780
counter thing so I could print out the counter value, for example, or if I had an array, I could

230
00:17:54.780 --> 00:17:59.340
use the counter here to access the elements of the array.

231
00:17:59.340 --> 00:18:05.430
So I could say something like array counter right, and then I can.

232
00:18:06.500 --> 00:18:16.430
And then I could pull data out of the array, or I could put data in the array data going in like so

233
00:18:16.430 --> 00:18:17.810
right if I had an array.

234
00:18:17.840 --> 00:18:22.940
OK, well now I can teach you another form of for loop.

235
00:18:23.330 --> 00:18:30.740
And this form of the for loop is specifically designed for use with collections, and it's really,

236
00:18:30.740 --> 00:18:31.880
really convenient.

237
00:18:32.570 --> 00:18:38.660
And so the way we do that, I'm going to delete this for loop here and I'm going to do four again.

238
00:18:40.280 --> 00:18:40.720
All right.

239
00:18:40.730 --> 00:18:47.930
So the next thing I need to do, just as with the other version of the for loop, I need to specify

240
00:18:47.990 --> 00:18:54.230
a variable in which we're going to hold on to the employees as we're looping over them.

241
00:18:54.410 --> 00:19:00.710
So since I'm going to be using that variable to hold an employee one at a time temporarily, my data

242
00:19:00.710 --> 00:19:03.350
type will be I employee.

243
00:19:06.300 --> 00:19:07.350
And then I need a name.

244
00:19:07.620 --> 00:19:13.860
Now I need to be careful because I've got an employee variable right up here, but I was using this

245
00:19:13.860 --> 00:19:16.680
one in the context of this loop here.

246
00:19:17.040 --> 00:19:21.150
And so I don't want to reuse that particular one.

247
00:19:21.510 --> 00:19:26.430
So down here, I'm going to create another variable and I'm I guess I'm going to just call it worker

248
00:19:27.300 --> 00:19:31.050
just to keep it, you know, kind of out of the way of this other one here.

249
00:19:31.830 --> 00:19:38.790
Now the next thing we do in a in the traditional for a loop, we would then use a semicolon and then

250
00:19:38.790 --> 00:19:45.270
specify like some kind of a statement that states how long we should be looping, like counter while

251
00:19:45.270 --> 00:19:47.400
counter is less than 10 or something like that.

252
00:19:47.670 --> 00:19:53.790
But for this enhanced form of loop, we use a colon instead.

253
00:19:54.570 --> 00:19:58.170
And then all we have to do is tell it the name of a collection variable.

254
00:19:58.530 --> 00:20:01.380
So we've got a collection variable right here, employees.

255
00:20:01.650 --> 00:20:09.690
So I can reference that just like so and then I can just create the body of a loop.

256
00:20:10.710 --> 00:20:18.300
And so what this is saying is take the individual employees that are inside of this employee's collection

257
00:20:18.450 --> 00:20:19.890
and loop over them.

258
00:20:20.100 --> 00:20:26.580
And for each employee, store it in this variable, which I happen to be calling worker.

259
00:20:26.850 --> 00:20:33.720
OK, so this is the standard pattern for how to use a for loop to iterate over a collection.

260
00:20:34.320 --> 00:20:38.910
And so from here, I can just use these workers to do something.

261
00:20:39.210 --> 00:20:43.110
So at this point, I could do pretty much what we were doing before.

262
00:20:43.290 --> 00:20:51.000
So in fact, I'm going to just copy these two lines come down here, paste, fix my formatting a bit.

263
00:20:51.990 --> 00:20:58.530
And instead of using the word employee, I will now use the word worker and I'll do the same here.

264
00:21:02.370 --> 00:21:03.060
There we go.

265
00:21:03.600 --> 00:21:06.720
And then everything else should be exactly the same.

266
00:21:07.050 --> 00:21:13.110
And in fact, let's go ahead and delete these two lines, and then I'm going to run the code and confirm

267
00:21:13.110 --> 00:21:14.280
that that still works.

268
00:21:16.740 --> 00:21:18.300
Yep, 8.6 million.

269
00:21:18.870 --> 00:21:20.880
There we go, so that's still working.

270
00:21:22.140 --> 00:21:26.160
Now, as I mentioned before, there's no real point on this program.

271
00:21:26.160 --> 00:21:31.410
There's no real point in actually doing this using two loops that's just going to make the program take

272
00:21:31.410 --> 00:21:31.920
longer.

273
00:21:32.220 --> 00:21:38.790
The only reason I'm showing you it in this way is because there's a typical pattern that in one part

274
00:21:38.790 --> 00:21:43.830
of a program, we will populate a collection with some data.

275
00:21:43.980 --> 00:21:50.100
And then in some other part of the program, we will iterate over the data in that collection to process

276
00:21:50.100 --> 00:21:51.030
it in some way.

277
00:21:51.090 --> 00:21:56.280
And so that's really all I'm showing you here, populating the collection and then processing the collection

278
00:21:56.280 --> 00:21:56.940
in some way.

279
00:21:57.060 --> 00:21:57.460
OK.

280
00:21:57.810 --> 00:22:05.490
And then also introducing you to this pattern of using the enhanced for loop to iterate over a collection.

281
00:22:06.330 --> 00:22:12.880
Now, there are actually a couple other ways to iterate over collections that we will look at shortly,

282
00:22:12.900 --> 00:22:16.890
but this is usually the best and most popular way to do it.

283
00:22:17.400 --> 00:22:23.580
All right, so let's end this lesson, and in the next lesson, I will show you more things that we

284
00:22:23.580 --> 00:22:24.780
can do with lists.
