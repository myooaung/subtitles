WEBVTT
1
00:00:00.180 --> 00:00:06.240
All right, so we now have this new interim two new uniforms for suit and rank.

2
00:00:06.510 --> 00:00:15.900
And we've revised the card class to utilize these two data types, these two enemies for its two main

3
00:00:15.900 --> 00:00:16.620
properties.

4
00:00:16.800 --> 00:00:19.020
But now, like, what can we do with this?

5
00:00:19.560 --> 00:00:26.190
OK, so if we jump back over to the Wikipedia article on cards, I think it kind of gets clear that

6
00:00:26.190 --> 00:00:34.380
if we were wanting to model a blackjack game using these concepts, then one key thing that we kind

7
00:00:34.380 --> 00:00:39.720
of need, I think, is to be able to take a card and then get a value from that card, right?

8
00:00:39.960 --> 00:00:46.200
So if you've got a two of whatever, that's going to have an ultimate value of two, if you've got a

9
00:00:46.200 --> 00:00:50.250
jack, that's going to have an ultimate value of 10.

10
00:00:50.790 --> 00:01:00.330
So what I'm thinking is let's make a test for the card class and then we're going to implement a little

11
00:01:00.330 --> 00:01:04.950
bit of logic for this card to be able to give us its value.

12
00:01:04.980 --> 00:01:05.340
OK.

13
00:01:05.640 --> 00:01:09.000
So I'm going to do a command shift tee now.

14
00:01:09.000 --> 00:01:16.320
I think I showed you in the testing module that when we do a command shift, we can toggle between the

15
00:01:16.320 --> 00:01:18.630
test for the class and then the actual class.

16
00:01:19.230 --> 00:01:25.200
But if you don't already have a test and you want to create one and you're on the class that you want

17
00:01:25.200 --> 00:01:31.530
to write the test for, like in this case card and you do a command shift, then the ADC will offer

18
00:01:31.530 --> 00:01:33.630
to create the new test for you.

19
00:01:33.780 --> 00:01:34.830
And so that's kind of nice.

20
00:01:34.830 --> 00:01:41.820
So I'm going to hit enter and notice that we have the option here already set to use the GI Unit five

21
00:01:41.820 --> 00:01:42.690
library.

22
00:01:43.050 --> 00:01:49.020
There are other options as well, such as previous version versions of J Unit, Groovy J Unit Spark

23
00:01:49.020 --> 00:01:55.200
and Testing Spike and testing G in particular are some competing unit testing frameworks, but we're

24
00:01:55.200 --> 00:01:56.790
going to stick with G Unit five.

25
00:01:56.790 --> 00:02:04.110
The ADC takes the class name that we were already working on and just tax on the word test to the end

26
00:02:04.110 --> 00:02:04.350
of it.

27
00:02:04.350 --> 00:02:09.900
To create the new name for the test class, which is a fairly standard naming convention, it will use

28
00:02:09.900 --> 00:02:12.900
the same package that we're already in now.

29
00:02:13.290 --> 00:02:20.490
We could opt to have it create a skeleton setup method or tear down method we kind of learned about

30
00:02:20.490 --> 00:02:24.690
set up before we didn't learn about tear down, but it's pretty much the opposite of setup.

31
00:02:24.690 --> 00:02:29.670
So any time we need to set things up before the tests run, they can go into the setup.

32
00:02:29.670 --> 00:02:34.830
And any time we need to get rid of things or tear them down, we can do that with a tear down method

33
00:02:34.830 --> 00:02:39.450
so this can generate the beginnings of those methods for us.

34
00:02:39.630 --> 00:02:42.990
Obviously, it won't be smart enough to know like what do we actually need to do?

35
00:02:42.990 --> 00:02:45.600
And then we'd have to write that code ourselves still.

36
00:02:45.870 --> 00:02:51.390
And then any methods that we already have in the class, in the system under test it can offer.

37
00:02:51.390 --> 00:02:58.380
If we were to put check marks in any of these, it will offer to generate starter test methods as well.

38
00:02:58.500 --> 00:03:00.870
We won't be utilizing any of that, though.

39
00:03:01.170 --> 00:03:02.370
So go ahead and click OK.

40
00:03:02.970 --> 00:03:03.370
All right.

41
00:03:03.390 --> 00:03:09.360
And so we've got our new test class, and I'll just confirm that that was created in the correct place,

42
00:03:09.360 --> 00:03:17.130
which is under the test folder, Java and then our same package, but now a class called card test.

43
00:03:17.340 --> 00:03:22.080
OK, so these two classes kind of go hand in hand card in card test.

44
00:03:22.470 --> 00:03:22.920
All right.

45
00:03:22.920 --> 00:03:25.320
So now we can create a new test.

46
00:03:25.590 --> 00:03:30.990
Let me also show you you can have the I.D. generate the beginnings of that test method for you.

47
00:03:31.110 --> 00:03:34.980
So on Mac, we can do a command in and then tell it to generate.

48
00:03:34.980 --> 00:03:39.630
And of course, for Windows and Linux users, I think you'll have to just right click and choose Generate

49
00:03:40.230 --> 00:03:41.310
and then we can.

50
00:03:41.490 --> 00:03:44.940
We have all these options here so we can tell it to create a test method.

51
00:03:45.360 --> 00:03:48.690
We could also say create a setup method, tear down, et cetera, et cetera.

52
00:03:49.020 --> 00:03:49.340
All right.

53
00:03:49.350 --> 00:03:51.030
So I'm going to choose test method.

54
00:03:51.030 --> 00:03:56.700
And so we just get this nice little beginning boilerplate and it does the import of the annotation and

55
00:03:56.700 --> 00:03:57.570
all of that for us.

56
00:03:57.570 --> 00:03:58.590
So that's kind of nice.

57
00:03:58.620 --> 00:03:59.040
All right.

58
00:03:59.250 --> 00:04:06.810
So let's just make a test to test our ability to get the value from a card.

59
00:04:06.840 --> 00:04:07.260
OK.

60
00:04:07.440 --> 00:04:09.300
And I don't know what that card is going to be yet.

61
00:04:09.300 --> 00:04:16.260
So for right now, I'm going to just say I don't know can get the value of a card.

62
00:04:16.800 --> 00:04:21.360
We'll probably come back and rename this once I decide, you know what card that's going to be.

63
00:04:21.630 --> 00:04:26.190
And so let's create an instance of a card card.

64
00:04:26.190 --> 00:04:29.130
One equals new card.

65
00:04:29.520 --> 00:04:35.340
And so for the suit, let's make it sure diamonds is find is fine.

66
00:04:35.640 --> 00:04:38.370
And for the rank, let's make it.

67
00:04:38.640 --> 00:04:41.850
Well, I guess let's start with something relatively simple here.

68
00:04:41.850 --> 00:04:50.520
So let's do a rank of two and then let's assert equals.

69
00:04:51.300 --> 00:04:58.560
So let's assert that there will be a method that we could call on this object to get its.

70
00:04:58.660 --> 00:05:01.570
Value, so let's just call it get value.

71
00:05:01.960 --> 00:05:04.120
OK, so obviously that does not exist yet.

72
00:05:04.420 --> 00:05:10.390
And let's also assume or let's even assert that once we do have that method created and implemented

73
00:05:10.390 --> 00:05:17.470
properly that if we were to get it this scenario here, we would get back an integer with a value of

74
00:05:17.470 --> 00:05:17.980
two.

75
00:05:18.400 --> 00:05:19.660
You see where I'm going with this.

76
00:05:19.990 --> 00:05:23.290
So for the rank two, we get back a value of two.

77
00:05:23.620 --> 00:05:24.040
All right.

78
00:05:24.370 --> 00:05:26.770
So let's go ahead and create this method.

79
00:05:26.950 --> 00:05:33.190
So we'll put the cursor right here on the word get value and I'll do an option return and choose to

80
00:05:33.190 --> 00:05:34.360
create that method.

81
00:05:34.780 --> 00:05:41.080
And I will accept that default there and we'll accept this default method implementation for right now.

82
00:05:41.260 --> 00:05:46.000
And then if I do a command shift to jump back over to the test now the read has gone away.

83
00:05:46.390 --> 00:05:49.330
And I will run this test, watch it fail.

84
00:05:49.480 --> 00:05:52.420
And then we will implement it and make it pass.

85
00:05:52.720 --> 00:05:56.260
So I'll do a control shift are to run this test.

86
00:05:57.040 --> 00:05:57.670
All right.

87
00:05:57.700 --> 00:05:59.080
Let's see what we got here.

88
00:05:59.090 --> 00:06:02.890
Yes, so we were expecting a two, but we got a zero.

89
00:06:03.250 --> 00:06:03.580
All right.

90
00:06:03.610 --> 00:06:04.460
As expected.

91
00:06:04.480 --> 00:06:13.480
So now let's jump in to the get value method here and fix this now in the standard of TDD, the standard

92
00:06:13.480 --> 00:06:22.810
thing I should do is to simply hard code that with a to rerun the test, OK, see that it passes and

93
00:06:22.810 --> 00:06:26.770
then go back over to the test and then create another test, right?

94
00:06:26.770 --> 00:06:33.300
So I will do that now, so I will copy this and we'll create another test with a different scenario.

95
00:06:33.310 --> 00:06:35.440
So now I know what my scenario was, by the way.

96
00:06:35.470 --> 00:06:40.980
So let me revisit this method name so I can get value of a.

97
00:06:41.440 --> 00:06:43.540
So I'm going to change the name of this method.

98
00:06:43.540 --> 00:06:47.200
A little bit of a two.

99
00:06:47.200 --> 00:06:51.730
I don't think I need to say diamonds because that's not really going to factor into the value.

100
00:06:51.730 --> 00:06:52.750
We already know that.

101
00:06:53.080 --> 00:06:57.370
So I'm just going to say can get the value of a two card.

102
00:06:57.640 --> 00:06:58.450
I'll just say that.

103
00:06:58.720 --> 00:07:06.040
So here, I will say, can get value of a three card.

104
00:07:07.030 --> 00:07:10.210
And so I will change that rank to three.

105
00:07:10.870 --> 00:07:11.660
Like so.

106
00:07:12.010 --> 00:07:20.320
And then will change the expected to a three and run all of the tests.

107
00:07:23.270 --> 00:07:23.730
All right.

108
00:07:23.750 --> 00:07:27.590
And as expected, one test passes, the other fails.

109
00:07:27.830 --> 00:07:31.820
And so now we will be forced to actually make this work for real.

110
00:07:32.210 --> 00:07:32.510
All right.

111
00:07:32.510 --> 00:07:35.480
So let's jump in to the get value method.

112
00:07:35.480 --> 00:07:39.440
And so now we know that we can't just hard code values here.

113
00:07:39.530 --> 00:07:41.000
We need to actually do something.

114
00:07:41.000 --> 00:07:44.980
So now we will learn a little bit more about enemies.

115
00:07:44.990 --> 00:07:52.580
So let's jump in to the rank enum here and talk a little bit about how this works.

116
00:07:52.580 --> 00:07:58.370
So as as I've mentioned, now, an enum is really just a special form of a class.

117
00:07:58.640 --> 00:08:07.610
And as such, enemies actually have a few methods and properties inherent in them.

118
00:08:08.060 --> 00:08:08.510
OK?

119
00:08:08.780 --> 00:08:16.730
And one of the methods that is available on all enemies is a method called ordinal.

120
00:08:17.180 --> 00:08:26.510
And what that method does is it can return and ordinal number that is associated with any given constant.

121
00:08:26.600 --> 00:08:27.800
So what do I mean by that?

122
00:08:28.100 --> 00:08:37.310
Well, imagine if we could associate an index, if you will, with each of these constants starting

123
00:08:37.310 --> 00:08:37.880
with zero.

124
00:08:37.880 --> 00:08:43.040
So let's pretend like aces zero two is one, three is two and so on and so forth.

125
00:08:43.070 --> 00:08:52.010
OK, then if we were to call the ranked ordinal method, it would return whatever that imaginary number

126
00:08:52.010 --> 00:08:56.450
is that is associated with the value or the constant of this enum.

127
00:08:56.450 --> 00:08:58.220
So let's let's see what that looks like.

128
00:08:59.330 --> 00:09:09.110
So what we could potentially do is instead of returning that to, we might be able to return this dot

129
00:09:09.140 --> 00:09:11.120
rank dot.

130
00:09:11.300 --> 00:09:13.850
And now look, here, we've got a few methods on here.

131
00:09:13.850 --> 00:09:16.040
We've got name right.

132
00:09:16.460 --> 00:09:18.350
We've also got ordinal, though.

133
00:09:18.950 --> 00:09:26.240
And if I hover on this method for ordinal, we actually can see here it returns the ordinal of this

134
00:09:26.240 --> 00:09:28.010
enumeration constant.

135
00:09:28.040 --> 00:09:28.510
OK.

136
00:09:28.730 --> 00:09:36.560
In other words, what position that constant comes within its list, OK, its position and its enum

137
00:09:36.560 --> 00:09:37.490
declaration?

138
00:09:38.060 --> 00:09:38.540
All right.

139
00:09:39.200 --> 00:09:45.980
So let's see what happens if we just run our tests with this method.

140
00:09:46.100 --> 00:09:52.250
OK, so we'll jump back over here and just rerun all the tests.

141
00:09:52.920 --> 00:09:53.870
Oh, OK.

142
00:09:53.990 --> 00:09:56.110
We just took two steps back, right?

143
00:09:56.120 --> 00:09:58.700
Because now both tests are failing.

144
00:09:59.060 --> 00:10:01.370
So let's see in what way they are failing.

145
00:10:01.580 --> 00:10:08.420
So I will click on the first test that we wrote and we were expecting a two and we got a one.

146
00:10:08.810 --> 00:10:13.430
And then I'll click on this other one and we were expecting a three, but we got it too.

147
00:10:13.430 --> 00:10:21.830
So it looks like our ordinal rolls are sort of working, but they are one value below what we were expecting,

148
00:10:21.980 --> 00:10:23.860
and I'll show you why that is.

149
00:10:23.870 --> 00:10:25.970
I pretty much already explained that, in fact.

150
00:10:25.970 --> 00:10:27.350
So if we jump back over.

151
00:10:28.740 --> 00:10:36.840
If we jump back into the into the enum class itself, so these ordinances are zero based.

152
00:10:36.870 --> 00:10:43.710
OK, so ACE would have the number of zero associated with it, two would have the value of one associated

153
00:10:43.710 --> 00:10:44.100
with it.

154
00:10:44.110 --> 00:10:51.300
And so they're all kind of like one below what we might have intuitively expected them to be valued

155
00:10:51.300 --> 00:10:51.570
at.

156
00:10:51.600 --> 00:10:51.960
Right.

157
00:10:52.170 --> 00:10:58.980
So how can we fix that in our new method to get the value?

158
00:10:59.550 --> 00:11:01.590
Well, I think this is pretty easy.

159
00:11:01.620 --> 00:11:06.750
How about we just add plus one plus one, right?

160
00:11:06.750 --> 00:11:10.050
So we'll kind of just shift everything up by one, right?

161
00:11:10.530 --> 00:11:15.360
So let's run all the tests again and look at that.

162
00:11:15.360 --> 00:11:16.790
Everything's passing now.

163
00:11:16.800 --> 00:11:19.160
OK, test past two.

164
00:11:19.290 --> 00:11:21.180
Got the nice green checkmark there?

165
00:11:21.510 --> 00:11:21.960
All right.

166
00:11:21.970 --> 00:11:29.840
So this is a sometimes useful little property or method of enemies to be able to get that ordinal.

167
00:11:29.970 --> 00:11:36.240
Now we do want to be careful using this, though, and in fact, it is actually advised in in many cases

168
00:11:36.240 --> 00:11:37.670
not to depend on this.

169
00:11:37.680 --> 00:11:38.850
And let me show you why.

170
00:11:39.510 --> 00:11:41.490
So we'll jump back over here into the ranking.

171
00:11:41.790 --> 00:11:42.150
All right.

172
00:11:42.160 --> 00:11:50.790
So this is working out nicely as long as these constants remain in exactly this order right now.

173
00:11:50.790 --> 00:11:58.080
In this particular case, I'm pretty comfortable going ahead and proceeding with using the ordinal to

174
00:11:58.080 --> 00:12:05.940
get this numeric value here, because in this particular case, these constants have a meaningful order,

175
00:12:05.940 --> 00:12:06.300
right?

176
00:12:06.510 --> 00:12:12.600
They really represent numbers for the most part, and even these face cards down here even represent

177
00:12:12.600 --> 00:12:15.630
essentially numbers of of a kind, right?

178
00:12:15.660 --> 00:12:20.130
Even the ace, one of its values that it can represent, is a one.

179
00:12:20.130 --> 00:12:27.840
And so it does make sense to have this be associated with zero plus one or, you know, one plus one

180
00:12:27.840 --> 00:12:29.730
for the two and so on and so forth, right?

181
00:12:29.730 --> 00:12:31.470
They are in a real order.

182
00:12:31.680 --> 00:12:39.930
However, when we when we start working with the Suit Enum, it might make a lot less sense to try to

183
00:12:39.930 --> 00:12:42.600
depend on ordinal values for the suits.

184
00:12:42.610 --> 00:12:45.840
In fact, here let's let's jump over to the suit.

185
00:12:46.260 --> 00:12:55.920
So here it may be more detrimental to try to associate an ordinal value and use that with these constants

186
00:12:55.920 --> 00:13:02.040
because there is no logical inherent ordering of these constants.

187
00:13:02.040 --> 00:13:05.700
I mean, I suppose we could have put them in alphabetical order.

188
00:13:05.700 --> 00:13:08.490
And I guess maybe they already are clubs, diamonds, hearts.

189
00:13:08.500 --> 00:13:10.800
Yeah, I guess they are in alphabetical medical order.

190
00:13:11.010 --> 00:13:18.150
But you know, I don't I don't think we would want to rely on that to ensure that they always remain

191
00:13:18.150 --> 00:13:18.870
in that order.

192
00:13:18.870 --> 00:13:24.300
Right of some other programmer came in here and had done something or just move them around, shuffled

193
00:13:24.300 --> 00:13:25.510
them around or whatever.

194
00:13:25.530 --> 00:13:31.410
Suddenly, your code would be broken if you had written any code that was depending on the ordinal value

195
00:13:31.410 --> 00:13:33.060
associated with these constants.

196
00:13:33.060 --> 00:13:34.710
So be careful there.

197
00:13:34.920 --> 00:13:41.670
But like I said, I'm more comfortable doing it here because this order really does make sense for these

198
00:13:41.670 --> 00:13:42.420
constants.

199
00:13:43.080 --> 00:13:49.560
All right, so let's go make a few more tests because we need to try out a few other scenarios now,

200
00:13:49.560 --> 00:13:49.920
right?

201
00:13:50.160 --> 00:13:53.580
So let's see what would happen with the ACE.

202
00:13:54.090 --> 00:14:02.160
That's going to be an interesting one I think can get value of an ace card.

203
00:14:02.730 --> 00:14:05.010
So we'll set this to ace.

204
00:14:05.580 --> 00:14:07.560
And so what should the value be here?

205
00:14:07.560 --> 00:14:10.200
Because this is a little bit more complicated one, right?

206
00:14:10.410 --> 00:14:15.180
The ace actually can be valued as a one or an 11.

207
00:14:15.840 --> 00:14:22.830
So I'm going to just tell you now what I'm inclined to do for right now is if we're if we just have

208
00:14:22.830 --> 00:14:29.940
an ace by itself and we call it get value, let's just make it so that it's just going to return a one

209
00:14:30.120 --> 00:14:33.750
that's generally going to be a safe value to get out of it.

210
00:14:33.960 --> 00:14:39.320
And when we get into some more complicated scenarios, then we can get fancier with the logic somewhere.

211
00:14:39.340 --> 00:14:46.320
OK, but for now, let's just say that an ace should yield a one whenever we call the get value method.

212
00:14:46.530 --> 00:14:51.570
All right, so let's run all the tests and see what we get and awesome.

213
00:14:51.570 --> 00:14:57.060
So by virtue of the fact that the ace is the first constant in the list of ranks, which sets it to

214
00:14:57.060 --> 00:15:01.620
zero, and then we're adding one, we're already getting the right value for the ace, so that works

215
00:15:01.620 --> 00:15:01.800
out.

216
00:15:01.800 --> 00:15:02.160
Great.

217
00:15:02.370 --> 00:15:02.770
All right.

218
00:15:02.790 --> 00:15:06.120
And so now let's move on to the face cards.

219
00:15:06.750 --> 00:15:12.990
So let's do the jack can get value of

220
00:15:15.480 --> 00:15:18.480
a Jack card.

221
00:15:18.720 --> 00:15:19.050
All right.

222
00:15:19.050 --> 00:15:21.300
So if we have a jack?

223
00:15:22.980 --> 00:15:27.410
We expect that the value, according to the rules, should be 10.

224
00:15:27.720 --> 00:15:28.110
Right.

225
00:15:28.470 --> 00:15:31.410
So let's run all the tests and see what we end up with.

226
00:15:31.650 --> 00:15:32.120
All right.

227
00:15:32.130 --> 00:15:37.560
So that failed as expected and if we jump into the get value method.

228
00:15:37.740 --> 00:15:39.540
So we've got something here.

229
00:15:39.570 --> 00:15:48.780
How do we want to handle this so we could use maybe some kind of a conditional like that says if the

230
00:15:48.780 --> 00:15:53.460
rank is a jack, then return one thing.

231
00:15:53.460 --> 00:15:54.870
Otherwise we turn this.

232
00:15:54.870 --> 00:15:56.820
Let's let's see what that would look like, in fact.

233
00:15:57.060 --> 00:16:00.540
So maybe we can use a ternary just to keep it short for right now?

234
00:16:00.570 --> 00:16:01.920
Let's see what this might look like.

235
00:16:01.930 --> 00:16:11.370
So if here, let me put a little space there first, if this doesn't rank equals.

236
00:16:12.030 --> 00:16:17.430
Now, one other nice thing about genomes is you can just use the equals sign the equals operator.

237
00:16:17.550 --> 00:16:19.710
If this doesn't rank equals.

238
00:16:19.950 --> 00:16:23.900
And let me show you something else you can do, Jack.

239
00:16:24.300 --> 00:16:26.730
I can just type the word jack here.

240
00:16:26.970 --> 00:16:35.040
And the ADP knows that I'm talking about the constant called Jack, which is on the rank enum.

241
00:16:35.190 --> 00:16:42.870
The reason the ID knows this is because it knows that I'm comparing to an enum of type rank, so it's

242
00:16:42.870 --> 00:16:44.760
smart enough to figure that out, OK?

243
00:16:45.090 --> 00:16:47.730
So this that rank equals Jack.

244
00:16:47.730 --> 00:16:56.220
So then I can kind of use a ternary and say, like if this that rank equals Jack or ranked Jack, then

245
00:16:57.270 --> 00:17:03.090
10 otherwise return this, OK?

246
00:17:03.210 --> 00:17:04.110
So we can do that.

247
00:17:04.500 --> 00:17:05.670
Let's run this now.

248
00:17:06.300 --> 00:17:07.880
Hey, and that fixed that.

249
00:17:07.890 --> 00:17:09.300
So that's cool, right?

250
00:17:09.960 --> 00:17:18.810
But let's see what happens when we make another test for another one of the face cards.

251
00:17:19.230 --> 00:17:21.650
So how about King?

252
00:17:23.280 --> 00:17:23.820
All right.

253
00:17:23.820 --> 00:17:31.110
So if we've got a king, we expect that that all also should return a 10.

254
00:17:31.350 --> 00:17:34.470
So let's run all the tests and see what we end up with now.

255
00:17:36.550 --> 00:17:44.080
And no, that failed, and we got it back a 13, because it's not a jack and therefore it.

256
00:17:44.320 --> 00:17:47.950
Well, here let's jump back into the get value method to see why.

257
00:17:48.310 --> 00:17:52.410
So a king is not a jack, so this does not pass muster.

258
00:17:52.420 --> 00:17:57.940
And so instead of returning a 10, we return the ordinal value, right?

259
00:17:58.210 --> 00:17:59.680
So that's what's happening there.

260
00:17:59.980 --> 00:18:06.430
So we need a better way to handle all face cards Jack, Queen and King, right?

261
00:18:06.700 --> 00:18:14.650
We could use a bigger if bloc and say if this start rank is Jack, return 10 else.

262
00:18:14.650 --> 00:18:19.700
If this rank is queen, return 10, right, we could do something like that.

263
00:18:19.720 --> 00:18:23.320
We also, if you remember, could use a switch, right?

264
00:18:23.380 --> 00:18:25.290
Let's see what that might look like, in fact.

265
00:18:25.300 --> 00:18:36.280
So if we did a switch on this rank, so now not only we can use a switch, but we can use what is considered

266
00:18:36.280 --> 00:18:41.740
to be the newer version of the Switch, which is a switch expression.

267
00:18:42.100 --> 00:18:49.570
And so in this case, we would use the word case, but we would skip the colon as you initially learned.

268
00:18:49.750 --> 00:19:02.800
And instead, we can just specify a constant right so we can do jack comma, queen, comma king like

269
00:19:02.800 --> 00:19:03.280
so.

270
00:19:03.700 --> 00:19:12.760
And notice I'm not having to type out the entire constant ranked jack ranked queen ranking again, because

271
00:19:13.000 --> 00:19:20.680
Java can infer that these are constants of the data type that comes from this variable here, this dot

272
00:19:20.680 --> 00:19:20.980
ring.

273
00:19:20.980 --> 00:19:25.660
So it figures out, OK, you're talking about a rank, so you don't have to do all that extra typing.

274
00:19:25.660 --> 00:19:28.420
You can just mention the the constants themselves.

275
00:19:28.900 --> 00:19:29.230
All right.

276
00:19:29.380 --> 00:19:36.520
Now here we use the arrow indicator or the arrow sign, if you will, and then the value that we want

277
00:19:36.520 --> 00:19:38.080
to be able to return.

278
00:19:38.110 --> 00:19:42.520
So in this case, a 10 followed by a semicolon.

279
00:19:42.970 --> 00:19:47.860
Now we're getting the red squiggly here because we're not quite done defining things here.

280
00:19:48.490 --> 00:19:54.100
This is now going to be an actual expression, which means that it can return a value, right?

281
00:19:54.120 --> 00:19:56.800
And so we need a semicolon, for one thing.

282
00:19:57.550 --> 00:20:00.790
And then we also need to do something with the value that it's going to return.

283
00:20:00.940 --> 00:20:06.160
Now what I'm inclined to do here is actually just use a return statement here.

284
00:20:07.810 --> 00:20:13.120
And I suppose for right now, I will comment that bit out.

285
00:20:14.230 --> 00:20:20.710
And then we need to handle the situation where it doesn't match a jack queen or king, right?

286
00:20:21.040 --> 00:20:25.960
So what we can do here is to have a default case.

287
00:20:26.290 --> 00:20:31.510
So that is to say for all other scenarios, arrow operator there.

288
00:20:32.170 --> 00:20:40.090
And then we can just use this little snippet of code here to return the ordinal plus one.

289
00:20:41.990 --> 00:20:48.290
Like so and now there are no more errors here, so in other words, we're saying, all right, if it's

290
00:20:48.290 --> 00:20:55.430
a jack queen or king, just map all of those 10 for everything else, map it to whatever it's ordinal

291
00:20:55.430 --> 00:20:56.540
is plus one.

292
00:20:56.570 --> 00:20:57.050
OK.

293
00:20:57.080 --> 00:20:58.100
Does that make sense?

294
00:20:58.460 --> 00:21:04.280
And I will delete that last that original return statement that we had.

295
00:21:04.550 --> 00:21:06.740
And so now let's rerun all the tests.

296
00:21:07.490 --> 00:21:09.770
Hey, and look at that now everything is passing.

297
00:21:09.950 --> 00:21:17.710
Now, let me remind you, this switch statement only works from, I believe Java version 14 had like

298
00:21:17.720 --> 00:21:18.560
a preview.

299
00:21:18.560 --> 00:21:19.820
I think in 13, though.

300
00:21:19.820 --> 00:21:26.630
So if you ever find yourself working on a job as a Java developer and you think, Oh, I could use this

301
00:21:26.630 --> 00:21:31.550
switch expression where I use the Arrow operator and all of this, you are only allowed to do that if

302
00:21:31.550 --> 00:21:35.780
you're in Java 14 or higher if you're in a lower version of Java.

303
00:21:35.990 --> 00:21:41.810
You'd have to use the older version of a switch, and because of that, you would have to do more typing

304
00:21:41.810 --> 00:21:42.080
right.

305
00:21:42.090 --> 00:21:48.260
You wouldn't be able to do this nice, concise form here where you can map Jack, Queen and king really

306
00:21:48.260 --> 00:21:51.230
quickly and concisely to 10, right?

307
00:21:51.620 --> 00:21:58.070
All right, so let's wrap this one up, and we'll look at a few more scenarios in the next lesson.

308
00:21:58.070 --> 00:21:58.940
So I'll see you there.
