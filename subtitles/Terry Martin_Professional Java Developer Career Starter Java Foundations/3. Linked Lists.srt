1
00:00:01,350 --> 00:00:08,280
All right, so in the last lesson, we learned how to use the illicit interface and make an instance

2
00:00:08,280 --> 00:00:09,270
of an ArrayList.

3
00:00:09,630 --> 00:00:17,820
And we also learned how to add objects to the collection or the list and to iterate over them using

4
00:00:17,820 --> 00:00:19,410
the enhanced for loop.

5
00:00:19,500 --> 00:00:25,980
So in this lesson, we're going to continue learning more of these patterns with the collections.

6
00:00:26,310 --> 00:00:32,280
And the first thing we're going to do, if you recall from the last lesson or two, I mentioned the

7
00:00:32,280 --> 00:00:39,270
fact that we should prefer to store instances of objects in their interfaces when there is an applicable

8
00:00:39,270 --> 00:00:40,530
interface to use.

9
00:00:40,860 --> 00:00:44,010
And I said that I would show in more detail why that is.

10
00:00:44,160 --> 00:00:45,570
So that time is now.

11
00:00:45,750 --> 00:00:53,910
So turning back to the code here, let's go where we actually created our array list, which is here

12
00:00:53,910 --> 00:00:55,080
on line 36.

13
00:00:55,080 --> 00:01:02,700
So we're creating a new ArrayList and we're storing the instance of that array list in the employee's

14
00:01:02,700 --> 00:01:03,630
variable here.

15
00:01:04,530 --> 00:01:11,230
So on the left side, though, we declare that this employees variable is not of type array list.

16
00:01:11,250 --> 00:01:14,490
It's a list of I employee, OK?

17
00:01:14,700 --> 00:01:18,060
Rather than an array list of I employee.

18
00:01:18,930 --> 00:01:27,300
So what's cool about this is the fact that since I left the variable declaration somewhat generic and

19
00:01:27,300 --> 00:01:32,910
I don't mean generic in the sense that I'm using these, this less than greater than symbol, which

20
00:01:32,910 --> 00:01:38,550
this functionality here is called generics, where we can specify a type for our collection.

21
00:01:39,870 --> 00:01:45,480
But I mean, generic in the sense that I wasn't so specific as to say that this is an array list right

22
00:01:46,050 --> 00:01:48,550
now since I did that in this way.

23
00:01:48,900 --> 00:01:51,060
I now have a little bit of flexibility.

24
00:01:51,360 --> 00:01:59,520
I can come over here and actually change this data type that we're using to some other implementation

25
00:01:59,520 --> 00:02:00,870
of a list.

26
00:02:01,290 --> 00:02:06,170
Do you get it by using interfaces to store our variables?

27
00:02:06,180 --> 00:02:14,700
It gives us the flexibility to to swap in and out different implementations of that interface.

28
00:02:15,000 --> 00:02:22,800
So, for example, at one point in time, it may make sense for us to use an array list to get our work

29
00:02:22,800 --> 00:02:23,160
done.

30
00:02:23,160 --> 00:02:24,000
But we could.

31
00:02:24,510 --> 00:02:31,470
We could realize later on because maybe there's more data than we were expecting or something that it

32
00:02:31,470 --> 00:02:36,120
might make more sense not to use an array list, but to use a linked list instead.

33
00:02:36,360 --> 00:02:42,930
So watch what happens when I change this implementation from a ArrayList to a linked list, and all

34
00:02:42,930 --> 00:02:50,210
I need to do is just remove the word array and put in the word linked and it's already imported.

35
00:02:50,220 --> 00:02:50,910
I don't know why.

36
00:02:50,910 --> 00:02:55,620
I guess I must have done it earlier or something, but no errors.

37
00:02:56,760 --> 00:03:05,310
And so instantly, I get all of the diff deferring benefits of a linked list versus an array list without

38
00:03:05,310 --> 00:03:12,300
having to change any code because I used a more generic interface type for the variable.

39
00:03:12,420 --> 00:03:17,580
And that is, the power of coding to interface is rather than implementation types.

40
00:03:17,640 --> 00:03:23,310
OK, so this program will work just the same, and I'll prove that by running it.

41
00:03:24,740 --> 00:03:25,410
There we go.

42
00:03:25,430 --> 00:03:29,120
So no difference there, no difference that we can see.

43
00:03:29,360 --> 00:03:33,410
It just implements the list differently internally.

44
00:03:33,710 --> 00:03:40,190
So I don't want to go into too much detail, but I'll try to outline basically the difference between

45
00:03:40,190 --> 00:03:42,110
the ArrayList and the linked list.

46
00:03:42,440 --> 00:03:48,740
The array list, as I mentioned earlier, uses an array internally and you know that when we create

47
00:03:48,740 --> 00:03:53,180
an array, we have to initialize it with a size or with actual data.

48
00:03:53,330 --> 00:03:56,510
And after it has been initialized, it cannot be changed.

49
00:03:56,750 --> 00:04:04,040
So if we realized that the array was not big enough, we would have to create a new array with a bigger

50
00:04:04,040 --> 00:04:04,610
size.

51
00:04:05,420 --> 00:04:08,960
Linked list does not use an array internally.

52
00:04:09,110 --> 00:04:16,220
Instead, it requests individual pockets of memory for each element that we add to it.

53
00:04:16,790 --> 00:04:24,800
And as it requests additional memory locations, it stores the address of the new memory locations in

54
00:04:24,800 --> 00:04:26,870
the previous memory location.

55
00:04:26,870 --> 00:04:29,420
So it forms a linked list, right?

56
00:04:29,630 --> 00:04:38,510
So if we've got memory location A and then linked lists requests from the computer, additional memory

57
00:04:38,510 --> 00:04:45,650
for memory, location B memory location B might be given an address of T and memory.

58
00:04:45,650 --> 00:04:48,410
Location A might have an address of 10.

59
00:04:48,740 --> 00:04:57,620
And so the linked list will take the address of B, which is 20, and store that address of 20 in a

60
00:04:57,620 --> 00:05:01,520
special little pocket of storage in location A..

61
00:05:01,910 --> 00:05:10,520
And that way, when the linked list has to traverse the elements in the linked list, it can do so by

62
00:05:10,520 --> 00:05:14,750
simply following the trail of addresses one at a time.

63
00:05:14,930 --> 00:05:21,410
If you're an Element A and you need to get to Element B, it can look inside of Element A and C that

64
00:05:21,410 --> 00:05:30,560
the next address of B is 20 in this case, and then it can jump to address location 20 to find B and

65
00:05:30,560 --> 00:05:31,430
so on and so forth.

66
00:05:31,610 --> 00:05:37,070
However, and additionally, linked list goes the other way as well.

67
00:05:37,340 --> 00:05:44,420
So not only does it store the next location in the previous location, it also stores the previous location

68
00:05:44,420 --> 00:05:45,560
in the next location.

69
00:05:45,560 --> 00:05:53,210
So it's what we call a doubly linked list that makes it easy and fast to be able to traverse forward

70
00:05:53,210 --> 00:05:55,280
and backward either way.

71
00:05:55,820 --> 00:05:58,010
So that's how a linked list works.

72
00:05:58,190 --> 00:06:03,590
One of the advantages of using a linked list is the fact that it can grow with a constant amount of

73
00:06:03,590 --> 00:06:04,130
time.

74
00:06:04,880 --> 00:06:11,510
Unlike an array list, which uses an array to store its data when the internal array of an array list

75
00:06:11,510 --> 00:06:12,320
gets full.

76
00:06:12,500 --> 00:06:19,730
The array list has to create a new, bigger array, then copy all the data from its original array into

77
00:06:19,730 --> 00:06:25,340
the new array, then let that original array get garbage collected and proceed.

78
00:06:25,580 --> 00:06:31,760
As you can imagine, if we're dealing with thousands or millions of objects that could take some time

79
00:06:31,760 --> 00:06:35,750
to do, the length list is more efficient in that regard.

80
00:06:35,780 --> 00:06:43,430
However, a potential downside to the linked list is the fact that every single time you add a new item

81
00:06:43,430 --> 00:06:50,330
to the linked list, it may need to take a hit of requesting new memory allocation from the computer.

82
00:06:50,480 --> 00:06:56,660
Now, honestly, I don't know if it does that each time or if it allocates a few in advance and then

83
00:06:56,660 --> 00:07:01,730
uses them, but it's not going to go as far in advance as an array would go.

84
00:07:01,880 --> 00:07:08,780
And so there is going to be more of a time hit each and every time we request more memory or the linked

85
00:07:08,780 --> 00:07:15,110
list requests more memory from the computer and requesting memory from the computer and allocating objects

86
00:07:15,110 --> 00:07:20,900
and things of that sort is considered, generally speaking, to be an expensive operation.

87
00:07:21,110 --> 00:07:26,780
So it's kind of like picking, you know, which which of those scenarios do you want to take the hit

88
00:07:26,780 --> 00:07:27,080
on?

89
00:07:27,950 --> 00:07:28,220
All right.

90
00:07:28,230 --> 00:07:35,330
But at any rate, now you can see a little bit more firsthand some more of the power of coding to interfaces

91
00:07:35,330 --> 00:07:36,470
whenever possible.

92
00:07:37,760 --> 00:07:44,750
This this truism of coding to interface is being a good thing isn't just true for working with collections

93
00:07:44,900 --> 00:07:46,700
in general, it's true everywhere.

94
00:07:47,780 --> 00:07:54,170
We saw it here as well where we were creating employees, and we chose to store them inside of a variable

95
00:07:54,170 --> 00:08:02,980
of Type II employee instead of being more specific in saying it's a manager or a programmer or whatever

96
00:08:02,990 --> 00:08:04,340
right now.

97
00:08:04,820 --> 00:08:06,470
There's something else I want to show you.

98
00:08:06,650 --> 00:08:15,620
So in the last lesson, we saw how we could iterate over a collections elements using the enhanced for

99
00:08:15,620 --> 00:08:15,950
loop.

100
00:08:16,130 --> 00:08:22,310
And this is the primary and preferred or recommended way of iterating.

101
00:08:22,520 --> 00:08:25,280
However, I want to give you a small scenario here now.

102
00:08:26,270 --> 00:08:36,950
Imagine that after having populated the employees collection with all of these employees here, the

103
00:08:36,950 --> 00:08:43,910
program receives a little bit of extra data, telling it that a few employees should be actually removed

104
00:08:44,180 --> 00:08:46,410
from the collection.

105
00:08:46,460 --> 00:08:46,970
OK.

106
00:08:47,420 --> 00:08:50,570
And so we need to get rid of those somehow.

107
00:08:51,650 --> 00:09:00,290
And imagine that for whatever reason, it makes sense to do to remove those from the collection in this

108
00:09:00,290 --> 00:09:02,240
loop down here, the secondary loop.

109
00:09:02,360 --> 00:09:07,850
So imagine again that these two loops are happening in two very, completely different parts of the

110
00:09:07,850 --> 00:09:09,710
program at different times.

111
00:09:09,980 --> 00:09:15,020
Unlike in this program here, where we're doing them back to back, just imagine that we populate in

112
00:09:15,020 --> 00:09:22,910
one part of the program and then maybe hours later, days later, another part of the program is looping

113
00:09:22,910 --> 00:09:25,980
over that populated list.

114
00:09:26,000 --> 00:09:26,450
OK.

115
00:09:27,110 --> 00:09:30,350
So we would want to remove.

116
00:09:30,950 --> 00:09:33,770
So let me show you something here.

117
00:09:34,580 --> 00:09:37,670
So in order to know which elements to remove?

118
00:09:37,880 --> 00:09:42,560
Let us pretend that we have another collection.

119
00:09:43,520 --> 00:09:52,760
So I'm going to create another list, but this list will be of strings, and the strings will be the

120
00:09:52,760 --> 00:09:55,730
names of people who should be removed.

121
00:09:55,760 --> 00:09:56,240
OK.

122
00:09:57,890 --> 00:10:09,320
So I will call this variable removal names and I will create an array list like so and then I'm going

123
00:10:09,320 --> 00:10:11,930
to add a few names to this list.

124
00:10:11,930 --> 00:10:15,960
So I'm going to remove all names that add.

125
00:10:16,700 --> 00:10:18,440
So let's see.

126
00:10:19,010 --> 00:10:21,170
Let's do Wilma.

127
00:10:21,170 --> 00:10:21,950
Five.

128
00:10:28,480 --> 00:10:35,200
And I'll duplicate this a couple more times, and we'll pick a couple more names, Barney four, and

129
00:10:35,200 --> 00:10:37,120
I'm just randomly picking these names.

130
00:10:39,350 --> 00:10:41,150
And Fred to.

131
00:10:45,840 --> 00:10:55,140
OK, so the idea now is as we're iterating over these employees or these workers, I want to remove

132
00:10:55,770 --> 00:10:59,040
these three from the list.

133
00:11:00,460 --> 00:11:11,680
So perhaps I could do something like this if Worker Dot get in right here, I have a small problem because

134
00:11:11,680 --> 00:11:14,920
I'm working with the interface of I employee.

135
00:11:15,070 --> 00:11:22,030
It does not actually expose the gutter methods for getting the first or last name right now.

136
00:11:22,540 --> 00:11:28,480
I'm not going to change the data type that I'm working with here, but maybe what I'll do instead is

137
00:11:28,480 --> 00:11:35,350
just cast the worker to another data type that does expose the methods for getting the name.

138
00:11:35,710 --> 00:11:42,100
So maybe what I can do is just cast this to an employee like so.

139
00:11:45,490 --> 00:11:50,380
Then I'm going to have to embed this now in several parentheses, right?

140
00:11:50,380 --> 00:11:58,930
So this first parentheses here lets me put the casting of the employee in this second one.

141
00:11:58,930 --> 00:12:09,310
Here I will use to close off the entire worker object so that I can basically convert the worker into

142
00:12:09,310 --> 00:12:10,240
an employee.

143
00:12:11,900 --> 00:12:15,500
And then the third is for the if statement itself.

144
00:12:15,800 --> 00:12:23,420
So now if I come over here and do a control space now I can get at the actual name on the employee.

145
00:12:24,500 --> 00:12:26,210
And let's see, do I have a.

146
00:12:29,980 --> 00:12:35,740
All right, so I will grab the first name, and it looks like I didn't, I guess I did not generate

147
00:12:35,740 --> 00:12:40,390
getters and setters for the name, but it looks like it's available to me anyway.

148
00:12:40,840 --> 00:12:41,110
All right.

149
00:12:41,110 --> 00:12:44,470
So this will give me the workers first name.

150
00:12:44,470 --> 00:12:52,780
But now what I want to do is I want to say is this first name contained within this list here.

151
00:12:53,290 --> 00:12:53,590
Right.

152
00:12:53,600 --> 00:12:54,940
That's what I want to do.

153
00:12:55,480 --> 00:13:03,700
And luckily, I can do exactly that because the list interface does indeed have a contained method on

154
00:13:03,700 --> 00:13:03,880
it.

155
00:13:04,210 --> 00:13:06,130
So first, let me fix my formatting here.

156
00:13:06,130 --> 00:13:10,090
I only put those spaces in just so you could see what was going on a little more easily.

157
00:13:10,300 --> 00:13:16,840
So what I'm going to do is I go to the beginning of this statement here and I'm going to reference the

158
00:13:16,840 --> 00:13:22,900
removal names variable here or the collection removal names.

159
00:13:23,110 --> 00:13:29,410
And then I can access a method on this, which is contains.

160
00:13:35,360 --> 00:13:43,280
So what I'm asking here is, does the list of names to remove called remove all names contain this first

161
00:13:43,280 --> 00:13:48,350
name for this current worker that I happen to be iterating over now?

162
00:13:48,350 --> 00:13:53,030
By doing this, I need to put one more parentheses here.

163
00:13:56,630 --> 00:13:59,420
And then one more here as well, there we go.

164
00:13:59,600 --> 00:14:00,170
There we go.

165
00:14:00,710 --> 00:14:00,950
All right.

166
00:14:00,950 --> 00:14:05,690
So that's a little that's a little difficult to look at, isn't it, because of all the parentheses

167
00:14:05,690 --> 00:14:06,020
here?

168
00:14:06,830 --> 00:14:10,250
So you'll have to just be careful to group these up nicely, right?

169
00:14:10,580 --> 00:14:15,920
Because of the casting that I'm doing here, I need this parentheses pair here.

170
00:14:17,040 --> 00:14:25,020
Then I need this next one to actually treat the worker as an employee so that the period works and then

171
00:14:25,020 --> 00:14:26,820
I can get the first name out of it.

172
00:14:27,390 --> 00:14:35,550
Then the next parentheses is for the contains call and then the final parentheses is for the entire

173
00:14:35,550 --> 00:14:36,270
if statement.

174
00:14:36,280 --> 00:14:38,580
Now, we could simplify that a little bit.

175
00:14:39,330 --> 00:14:46,470
I could extract another local variable for the worker that has been cast to an employee so I can select

176
00:14:47,220 --> 00:14:51,240
all of that and then do an option command V..

177
00:14:52,110 --> 00:14:54,840
And maybe I'll call it temp worker.

178
00:14:57,150 --> 00:15:03,630
And that makes this more readable now, so don't ever be afraid to extract variables or method names

179
00:15:04,290 --> 00:15:06,880
to make things easier to read and to see.

180
00:15:06,900 --> 00:15:07,290
Look at that.

181
00:15:07,290 --> 00:15:09,150
That's a lot easier to look at, in fact.

182
00:15:10,140 --> 00:15:10,710
All right.

183
00:15:11,220 --> 00:15:22,860
So if the removal names contains the current temporary workers first name, then we'd want to remove

184
00:15:22,980 --> 00:15:25,970
that worker from the employee's list.

185
00:15:25,980 --> 00:15:33,540
So again, this is the list of the employees and we want to remove this current worker from the employee's

186
00:15:33,540 --> 00:15:33,840
list.

187
00:15:33,840 --> 00:15:44,010
So what that might look like is employee's employees dot and there is a remove method right here.

188
00:15:44,430 --> 00:15:45,180
Remove.

189
00:15:45,540 --> 00:15:48,060
And now I can just tell it to remove the worker.

190
00:15:48,060 --> 00:15:54,240
Now I'm going to actually reference the worker here and not this temp worker because the temp worker

191
00:15:54,240 --> 00:16:01,440
is of type employee and I just want to keep things really straight and that not so confusing.

192
00:16:01,590 --> 00:16:12,420
And so since this employee's collection is a collection of I employees and worker here and here is also

193
00:16:12,420 --> 00:16:15,690
of type I employee, I'd rather just stick with that.

194
00:16:16,230 --> 00:16:19,240
So I'm just going to put the word worker right there.

195
00:16:20,100 --> 00:16:20,490
OK.

196
00:16:21,750 --> 00:16:26,430
Now, this is what you might have thought to do, but I'm going to go ahead and tell you right now this

197
00:16:26,430 --> 00:16:32,760
actually isn't going to work, and this is a very common mistake for developers to make, especially

198
00:16:32,760 --> 00:16:33,660
new developers.

199
00:16:33,750 --> 00:16:38,070
And that's why I'm just starting right off telling you and showing you all of this just so I can tell

200
00:16:38,070 --> 00:16:38,970
you this won't work.

201
00:16:38,970 --> 00:16:41,070
So let's go ahead and run it and see what happens.

202
00:16:43,660 --> 00:16:51,480
All right, so let's see what we got here, we got a class cast exception, blah blah blah lambda.

203
00:16:51,490 --> 00:16:57,340
That's a key thing to make note of cannot be cast to employee.

204
00:16:57,370 --> 00:17:01,030
I think that's probably all we need to know right there.

205
00:17:01,570 --> 00:17:02,170
OK.

206
00:17:03,410 --> 00:17:06,210
Lambda cannot be cast to employee.

207
00:17:06,230 --> 00:17:07,730
What do you think that saying?

208
00:17:08,030 --> 00:17:09,830
And why do you think we're getting that?

209
00:17:11,280 --> 00:17:14,370
Lambda cannot be cast to employee.

210
00:17:16,020 --> 00:17:20,550
All right, so what's happening here?

211
00:17:21,270 --> 00:17:24,000
If you recall from several lessons ago.

212
00:17:25,500 --> 00:17:34,170
Our code is written in such a way that this create employee method tries to convert each of these text

213
00:17:34,170 --> 00:17:37,980
lines into an actual employee object.

214
00:17:38,280 --> 00:17:47,610
However, when it encounters a text line with a with a role that it does not actually recognize or know

215
00:17:47,610 --> 00:17:48,690
anything about.

216
00:17:50,000 --> 00:17:57,440
We created a lambda expression, which results in the creation of basically like an anonymous type of

217
00:17:57,440 --> 00:17:57,920
class.

218
00:17:58,070 --> 00:18:02,240
And let's go, let's go remind ourselves of what that code looks like.

219
00:18:02,450 --> 00:18:08,930
Someone to jump into the employee class here and go up to the create employee method.

220
00:18:09,200 --> 00:18:17,690
And right here, if the role of the text line that we're on a line that will look something like this.

221
00:18:17,690 --> 00:18:19,580
And here's the roll part right there.

222
00:18:19,970 --> 00:18:28,790
If that roll isn't one of these roles here, then we go to this default switch block here and we have

223
00:18:28,790 --> 00:18:36,170
this lambda expression, which just represents a method that takes no input and returns a zero.

224
00:18:36,440 --> 00:18:42,870
And this lambda expression maps to the I employee interface.

225
00:18:42,890 --> 00:18:43,400
OK.

226
00:18:44,120 --> 00:18:53,990
So this what ends up happening is Java will create an object that looks more or less like an I employee,

227
00:18:53,990 --> 00:18:58,040
even though I employee isn't a class, it's just an interface.

228
00:18:58,160 --> 00:19:03,530
But it will make a fake object that looks like it is of type I employee.

229
00:19:04,250 --> 00:19:07,190
And then for that, objects get salary method.

230
00:19:07,490 --> 00:19:12,980
It will map this lambda expression, OK, which will just return to zero.

231
00:19:12,990 --> 00:19:14,870
That's really all we were trying to get out of.

232
00:19:14,870 --> 00:19:19,190
It was just an implementation for the get salary method that returns a zero.

233
00:19:19,370 --> 00:19:21,320
But here's the crucial point here.

234
00:19:21,890 --> 00:19:29,990
This is resulting in the creation of an object that has nothing to do with employee with the data type

235
00:19:29,990 --> 00:19:30,890
of employee.

236
00:19:31,040 --> 00:19:33,110
It's not related to an employee at all.

237
00:19:33,410 --> 00:19:37,340
It's just an interface of Type I employee.

238
00:19:37,790 --> 00:19:46,070
And so it is impossible to cast this object or the thing that will become an object based on this,

239
00:19:46,070 --> 00:19:53,120
it's impossible to cast that to an employee because you can't go from an AI employee to an employee

240
00:19:53,300 --> 00:19:55,340
if you never had an employee to begin with.

241
00:19:55,490 --> 00:19:56,870
This thing was never an employee.

242
00:19:57,170 --> 00:20:06,860
These are these are all fine because these are all sub types of employee that additionally implement

243
00:20:06,860 --> 00:20:09,980
the AI employee interface.

244
00:20:10,220 --> 00:20:11,510
OK, does that make sense?

245
00:20:11,630 --> 00:20:13,820
And so that's why these can be mapped.

246
00:20:14,360 --> 00:20:16,020
So what can we do about this?

247
00:20:16,040 --> 00:20:21,140
And now we're getting into kind of a real type of problem that you might encounter as a professional

248
00:20:21,140 --> 00:20:21,860
developer.

249
00:20:22,880 --> 00:20:30,170
So do you want to take a moment to try to think of a of a minimalistic way to get around this problem?

250
00:20:30,170 --> 00:20:34,160
And I'm I'm going to give you a small hint as to what I think I would do.

251
00:20:36,230 --> 00:20:38,870
I don't think I would change anything here at all.

252
00:20:39,840 --> 00:20:43,850
And I would look to change the most minimal amount of code possible.

253
00:20:46,010 --> 00:20:48,740
All right, so here's what I think I would do.

254
00:20:49,880 --> 00:20:53,660
Going back over here to the main class.

255
00:20:54,750 --> 00:20:57,960
And go down to our problem code here.

256
00:20:59,380 --> 00:21:11,710
So what I think I would try doing here is to test whether or not the current worker is actually an instance

257
00:21:11,710 --> 00:21:17,800
of employee before I try to cast it, OK?

258
00:21:18,370 --> 00:21:19,990
And I think it's as simple as that.

259
00:21:20,380 --> 00:21:24,790
So maybe I could do something like if.

260
00:21:27,060 --> 00:21:37,170
Worker instance of employee, then you can proceed with all this other stuff.

261
00:21:37,380 --> 00:21:41,040
Now there is a little bit that I don't like about this.

262
00:21:41,040 --> 00:21:44,160
Let me let me proceed with it, though, and show you what I mean.

263
00:21:44,550 --> 00:21:49,950
So what I'm going to do is I'm going to indent all of this and then do this.

264
00:21:50,100 --> 00:21:54,360
In other words, I don't want to do any of this business here.

265
00:21:54,630 --> 00:21:59,790
If the current worker is not an instance of employee.

266
00:22:01,620 --> 00:22:01,950
Right.

267
00:22:02,160 --> 00:22:09,510
Because I want to be able to cast the worker to some, to something of type employee first so that I

268
00:22:09,510 --> 00:22:13,740
can get it its first thing because if it's that lambda expression object, it's not even going to have

269
00:22:13,740 --> 00:22:14,790
a first name, right?

270
00:22:15,000 --> 00:22:23,370
So I can't do any of this stuff on objects that are not a subtype of employee.

271
00:22:24,760 --> 00:22:31,690
All of that would just be completely invalid, so we only want to be doing the casting if the current

272
00:22:31,690 --> 00:22:39,460
worker instance is an instance of employee, also recall that we learned that we could do something

273
00:22:39,460 --> 00:22:45,910
similar to this by calling workers get class right worker that get class.

274
00:22:46,180 --> 00:22:52,300
And then we could say something like if that equals employee class.

275
00:22:52,540 --> 00:23:00,670
However, I didn't do this because if you may recall, the get class method here is very specific.

276
00:23:01,120 --> 00:23:05,860
We want to use instance of because it honors the entire class hierarchy.

277
00:23:05,870 --> 00:23:09,070
So in other words, this worker instance let me undo this.

278
00:23:09,400 --> 00:23:16,210
So this worker instance, even if it's an instance of a programmer, this will be true because programmer

279
00:23:16,210 --> 00:23:23,320
is a subclass of employee manager, is a subclass of employee, whereas get classes specific, it just

280
00:23:23,320 --> 00:23:25,240
gets the actual type.

281
00:23:25,540 --> 00:23:27,960
So if it was a programmer, it would say programmer.

282
00:23:28,120 --> 00:23:30,700
So it would say programmer is not equal to employee.

283
00:23:30,700 --> 00:23:32,230
And therefore that's false, right?

284
00:23:32,380 --> 00:23:33,650
That's not what we want here.

285
00:23:33,670 --> 00:23:36,520
We actually want to honor the class hierarchy.

286
00:23:36,850 --> 00:23:37,300
All right.

287
00:23:37,990 --> 00:23:38,360
Let's see.

288
00:23:38,380 --> 00:23:40,360
So we're going to run this again.

289
00:23:40,450 --> 00:23:44,860
But I'm going to warn you now, this still isn't the final solution that we need.

290
00:23:44,890 --> 00:23:46,470
You'll see that in just a moment here.

291
00:23:46,470 --> 00:23:47,410
So let me run this.

292
00:23:50,490 --> 00:23:55,830
All right, so now we get an air concurrent modification exception.

293
00:23:56,040 --> 00:23:58,620
And that's another error that I was expecting to see.

294
00:23:59,100 --> 00:24:05,640
Now this is an extremely common error that Java developers get all the time, especially novice Java

295
00:24:05,640 --> 00:24:06,360
developers.

296
00:24:06,360 --> 00:24:09,660
And so let me explain to you what is going on here.

297
00:24:11,850 --> 00:24:20,760
So basically, in a nutshell, we are trying to remove something from the list while we're looping over

298
00:24:20,760 --> 00:24:21,240
the list.

299
00:24:21,600 --> 00:24:29,440
Imagine it's kind of like you're trying to change a tire in a car while the car is moving right.

300
00:24:29,490 --> 00:24:30,720
It just doesn't make sense.

301
00:24:30,720 --> 00:24:33,420
You can't do that sort of like that.

302
00:24:34,380 --> 00:24:40,980
A little more specifically, another way of looking at it is that the JDK that is Java, the Java development

303
00:24:40,980 --> 00:24:49,350
kit, it senses, if you will, that there is the possibility that two threads, two or more threads

304
00:24:49,350 --> 00:24:55,310
we remember the threads are the little guys who actually go line by line, executing each line right,

305
00:24:55,320 --> 00:24:58,080
jumping into the methods and doing whatever those methods say.

306
00:24:58,920 --> 00:25:04,650
Up until now, we've been just imagining that there's always just one thread that's going line by line

307
00:25:04,650 --> 00:25:06,420
and executing our code.

308
00:25:07,080 --> 00:25:16,260
But in this particular case, what you can kind of imagine is happening is that two threads come into

309
00:25:16,260 --> 00:25:17,190
existence.

310
00:25:18,720 --> 00:25:25,450
One thread has the job of looping over this employee's collection here, right?

311
00:25:25,470 --> 00:25:27,990
So he's just looping through the collection.

312
00:25:28,470 --> 00:25:30,180
But when we say remove.

313
00:25:30,990 --> 00:25:38,310
You can imagine that another thread is trying to grab one of the employees out of that collection while

314
00:25:38,460 --> 00:25:43,170
the first thread is looping over the collection.

315
00:25:43,170 --> 00:25:52,260
So imagine that some guy has the has the job of counting items in a list and another guy comes along

316
00:25:52,260 --> 00:26:00,060
and tries to steal items out of that list at the same time that would cause chaos and Java, or the

317
00:26:00,060 --> 00:26:06,030
JDK senses that something like that looks like it could be happening here.

318
00:26:06,030 --> 00:26:12,780
And so it throws this exception to warn us to tell us, Hey, this doesn't look kosher, what you're

319
00:26:12,780 --> 00:26:13,860
trying to do here.

320
00:26:14,580 --> 00:26:21,690
So the proper thing to do would be to use my analogy again of these two threads here, and one thread

321
00:26:21,690 --> 00:26:25,800
is looping over items or counting items or something.

322
00:26:25,800 --> 00:26:32,160
The proper thing to do would be to ask that guy the one guy, the thread, Hey, when you get a chance,

323
00:26:32,160 --> 00:26:35,340
could you remove this item from your own list?

324
00:26:35,460 --> 00:26:36,720
Let him do it that way.

325
00:26:36,720 --> 00:26:39,360
He doesn't get off track or anything.

326
00:26:39,510 --> 00:26:41,910
And so we can do that, however, to do it.

327
00:26:42,000 --> 00:26:45,930
We're going to have to implement a different type of loop.

328
00:26:45,960 --> 00:26:46,410
OK.

329
00:26:47,550 --> 00:26:51,090
And I'm going to introduce that to you in the next lesson.
