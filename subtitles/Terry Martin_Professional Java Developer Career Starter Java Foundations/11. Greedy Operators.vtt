WEBVTT
1
00:00:00.150 --> 00:00:05.040
OK, so now that we have the transcript parsing fully working.

2
00:00:05.220 --> 00:00:11.520
I want to take a deeper dive into something that will almost certainly trip you up.

3
00:00:11.600 --> 00:00:17.670
It used to trip me up all the time when I was for the first several years, in fact, after I had initially

4
00:00:17.670 --> 00:00:18.870
learned rejects.

5
00:00:19.200 --> 00:00:23.820
And that has to do with the way that the asterisk works.

6
00:00:24.360 --> 00:00:24.810
OK.

7
00:00:25.320 --> 00:00:32.640
So I think I've already mentioned that the asterisk has a behavior in which it is considered to be greedy.

8
00:00:32.880 --> 00:00:38.190
And what that means is that it wants to match as many characters as possible.

9
00:00:38.460 --> 00:00:44.700
And this behavior can be unintuitive for us if we don't really understand how it works.

10
00:00:44.940 --> 00:00:49.290
So to show this, I'm going to change how we're writing.

11
00:00:49.290 --> 00:00:54.720
This rejects a little bit to make the point in the way I'm going to do this is first, I'm going to

12
00:00:54.720 --> 00:01:00.900
duplicate that line and then I'm going to comment out these two lines here.

13
00:01:01.110 --> 00:01:07.650
And instead of anchoring the GPA sections of the rejects with the words weighted in unweighted, which

14
00:01:07.650 --> 00:01:12.930
are obviously two different words, instead, I'm going to anchor it on the word cumulative.

15
00:01:13.140 --> 00:01:19.260
And the reason I'm going to do that is because that is going to open up the possibility for ambiguity

16
00:01:19.260 --> 00:01:22.770
because we've got two words of cumulative here, right?

17
00:01:23.040 --> 00:01:26.220
I chose waited in unweighted before because they're different.

18
00:01:26.760 --> 00:01:33.090
But if I had chosen the word cumulative, I would have caused myself a little extra work or a little

19
00:01:33.090 --> 00:01:34.980
extra thinking that I'd have to do.

20
00:01:35.070 --> 00:01:39.920
So now I'm going to show you what, what would happen if we had chosen the word cumulative?

21
00:01:39.930 --> 00:01:44.250
We can still make it work, but we have to be a little bit more mindful of some things.

22
00:01:45.180 --> 00:01:49.170
So I'm going to change this word weighted here to cumulative.

23
00:01:50.300 --> 00:01:55.790
Like so and then OK, yeah, and I've already commented out the last bit here.

24
00:01:55.940 --> 00:02:00.230
Now I'm going to leave this this one here on line 35, because we'll make use of that.

25
00:02:00.590 --> 00:02:01.040
OK?

26
00:02:01.310 --> 00:02:05.940
And then we're also going to have to change this because this won't match anything we've got here.

27
00:02:06.140 --> 00:02:09.320
So the way I'm going to do that is with another star.

28
00:02:09.740 --> 00:02:17.930
So you might think what we're saying here now is, in fact, if we start at the state ID part here,

29
00:02:18.170 --> 00:02:26.540
you might think what this is saying is after you match the state I.D., which is this bit here in between

30
00:02:26.540 --> 00:02:32.630
the parentheses, then match a word boundary and then take off.

31
00:02:32.640 --> 00:02:41.030
And let me remind you, a word boundary is just the area between a word character and a non word character.

32
00:02:41.060 --> 00:02:41.510
OK.

33
00:02:42.020 --> 00:02:47.450
So in this case, the last word character we have is this three within the parentheses.

34
00:02:47.840 --> 00:02:53.510
And what comes after it is presumably a new line character.

35
00:02:53.660 --> 00:02:57.830
And the way I know that is because there are no more spaces or characters that I can select here.

36
00:02:57.830 --> 00:03:04.610
If I try to select, it's not letting me select any, you know, any explicit characters.

37
00:03:05.060 --> 00:03:08.630
OK, so so I know that where that cursor is is a boundary.

38
00:03:08.810 --> 00:03:16.310
So next, what it appears that we're saying is match zero or more characters this bit right here, match

39
00:03:16.370 --> 00:03:24.140
zero or more of any character until you encounter the word cumulative.

40
00:03:24.560 --> 00:03:26.780
So you would think that that would mean.

41
00:03:27.750 --> 00:03:32.990
Come down here and match until you get here to the word cumulative, right?

42
00:03:33.540 --> 00:03:39.000
Then match the word cumulative, which is here and then again.

43
00:03:39.180 --> 00:03:48.430
Match zero or more characters until you get to a digit or a period, which you would think would mean

44
00:03:48.450 --> 00:03:52.530
match any and all of these until you're right here, right?

45
00:03:52.770 --> 00:03:56.580
And then we would expect that the three point eighty two would be captured.

46
00:03:57.240 --> 00:04:04.320
And so then when we print weighted GPA, we expect that way too deeper will be printed here, by the

47
00:04:04.320 --> 00:04:05.700
way, the squiggly line here.

48
00:04:05.880 --> 00:04:13.440
The reason this is coming up, the I.D. sees that we are referring to a named capture group with the

49
00:04:13.440 --> 00:04:14.670
same name twice.

50
00:04:15.000 --> 00:04:22.200
And the idea, though it is very smart, it's not quite smart enough to recognize that this Line 21

51
00:04:22.200 --> 00:04:26.940
is actually being commented out within the regular expression language itself.

52
00:04:27.180 --> 00:04:28.860
I guess the idea just doesn't.

53
00:04:29.010 --> 00:04:35.520
Isn't parsing the X enough to see that this is common to that, or it doesn't know that that's a comment.

54
00:04:35.880 --> 00:04:40.020
So that's why we're getting that squiggly lines, we can ignore it, even though it's it's causing a

55
00:04:40.020 --> 00:04:42.920
little consternation to the idea.

56
00:04:43.380 --> 00:04:43.740
OK.

57
00:04:43.890 --> 00:04:47.310
So anyway, let's go ahead and run this and see what we end up with.

58
00:04:48.920 --> 00:04:49.340
OK.

59
00:04:49.670 --> 00:04:57.170
We get a six and that six must be coming from right there.

60
00:04:57.500 --> 00:04:59.600
So what is going on?

61
00:04:59.780 --> 00:05:01.610
You probably weren't expecting that.

62
00:05:01.880 --> 00:05:10.610
Well, to understand this, we need to understand exactly how the asterisks modifying this diet is actually

63
00:05:10.610 --> 00:05:11.420
behaving.

64
00:05:11.480 --> 00:05:20.960
So as we've stated, as I've stated, the asterisk is greedy and it wants to match as many characters

65
00:05:20.960 --> 00:05:26.180
as it possibly can while allowing the regular expression to still be true.

66
00:05:26.300 --> 00:05:35.690
And so while it may appear that the regular expression engine would start here and then match until

67
00:05:35.690 --> 00:05:40.040
it gets to this first, see that is not what it does at all.

68
00:05:40.490 --> 00:05:49.460
Instead, the way you should look at it is that any time you use this pattern of a dot star, you should

69
00:05:49.460 --> 00:05:55.340
pretty much assume that what it's going to do with the regular expression engine is going to do by default

70
00:05:55.850 --> 00:05:59.420
is to grab the entire rest of the string.

71
00:05:59.630 --> 00:06:07.220
So not from here to here, but actually from here all the way to the end of the string.

72
00:06:08.090 --> 00:06:16.550
And then it's going to go backward until it finds something that just that matches the expression as

73
00:06:16.550 --> 00:06:17.210
it exists.

74
00:06:17.690 --> 00:06:24.620
So if you assume that initially the Start star will try to grab everything and then it will work its

75
00:06:24.620 --> 00:06:27.980
way backward until it is satisfied.

76
00:06:28.610 --> 00:06:30.260
Let's see what that looks like.

77
00:06:30.950 --> 00:06:34.290
So we're on this dot star right here.

78
00:06:34.370 --> 00:06:34.850
OK?

79
00:06:35.390 --> 00:06:40.760
And the next thing that comes after it is the fact that it says, OK, now find the word cumulative,

80
00:06:40.770 --> 00:06:41.120
right?

81
00:06:41.480 --> 00:06:48.230
So if we assume that it's going to start off by grabbing everything and then it's going to look for

82
00:06:48.230 --> 00:06:51.590
the word cumulative, then it's going to go backward.

83
00:06:51.740 --> 00:06:58.310
It's going to say the Dot star here matches all of this, followed by a six.

84
00:06:58.310 --> 00:07:02.570
And then it's going to say, OK, is this thing that's following my dot star selection?

85
00:07:03.110 --> 00:07:07.490
The word cumulative, obviously, the answer is no, it is not.

86
00:07:07.670 --> 00:07:09.620
So then it's going to back off again.

87
00:07:09.830 --> 00:07:15.080
It's going to say, OK, now everything to the right of what I have selected, which again, is this

88
00:07:15.080 --> 00:07:16.310
dot star pattern.

89
00:07:16.310 --> 00:07:18.970
Here is everything to the right of this.

90
00:07:18.980 --> 00:07:20.090
The word cumulative.

91
00:07:20.100 --> 00:07:21.230
The answer is no.

92
00:07:21.710 --> 00:07:23.570
And so it's going to keep backing off.

93
00:07:23.780 --> 00:07:28.170
Are we are we seeing the word cumulative yet to the right of the selection?

94
00:07:28.190 --> 00:07:29.720
Everything that's highlighted in blue?

95
00:07:29.990 --> 00:07:31.520
The answer continues to be no.

96
00:07:31.670 --> 00:07:35.510
So it keeps backing off until.

97
00:07:36.610 --> 00:07:44.890
Bam, now we've got the word cumulative to the right or after everything that is selected in blue.

98
00:07:45.160 --> 00:07:51.130
And again, everything that's selected in blue is represented by this that star here on line 19 at the

99
00:07:51.130 --> 00:07:51.970
very end.

100
00:07:52.150 --> 00:07:55.870
OK, so now we're at a word cumulative.

101
00:07:56.500 --> 00:07:58.510
OK, so now we've got a match here.

102
00:07:59.790 --> 00:08:07.140
So now this cumulative is this cumulative, so already we're kind of in a little bit of a unexpected

103
00:08:07.140 --> 00:08:12.660
situation, we thought it would match this first cumulative, but it's actually matching the second

104
00:08:12.660 --> 00:08:20.730
cumulative because it started off selecting everything and then back going backward, backtracking until

105
00:08:20.730 --> 00:08:23.550
it found a match for that word.

106
00:08:23.550 --> 00:08:24.460
Cumulative.

107
00:08:24.480 --> 00:08:24.960
OK.

108
00:08:25.830 --> 00:08:30.780
And then now that we're at this word cumulative, then we have another dot stars.

109
00:08:30.780 --> 00:08:34.590
So again, what should we assume from this point here?

110
00:08:34.740 --> 00:08:43.830
We've got this match, so we should now assume that this that star also is going to select all of the

111
00:08:43.830 --> 00:08:46.260
rest of the string to the very, very end.

112
00:08:46.890 --> 00:08:47.420
OK.

113
00:08:48.120 --> 00:08:53.280
And then it's going to backtrack until the rest of this expression is true.

114
00:08:53.760 --> 00:09:04.080
So what it's going to look for after this, that star is one or more digits or periods.

115
00:09:05.620 --> 00:09:11.860
Followed by a boundary and then zero or more characters, so we can just assume nothing here because

116
00:09:11.920 --> 00:09:13.290
it can be zero, right?

117
00:09:13.320 --> 00:09:14.290
But a boundary?

118
00:09:14.320 --> 00:09:19.060
OK, so one or more digits or periods followed by a boundary?

119
00:09:19.360 --> 00:09:28.240
OK, so first off, the Dot Stark grabs everything and then it says, OK, do I do I have a digit or

120
00:09:28.240 --> 00:09:32.270
a period, one or more digits or periods to the right of my selection?

121
00:09:32.290 --> 00:09:33.280
The answer is no.

122
00:09:33.430 --> 00:09:37.720
So then it's going to back off by one, backtrack by one.

123
00:09:38.050 --> 00:09:45.040
So now it says, OK, now do I have a one or more digits or periods followed by a boundary?

124
00:09:45.310 --> 00:09:53.730
Well, now the answer is yes, because you have one digit and then you've got a boundary again.

125
00:09:53.980 --> 00:09:59.200
And so the six ends up being captured in this capture group.

126
00:09:59.620 --> 00:10:01.840
And Bam, that's what's printed out there.

127
00:10:01.960 --> 00:10:04.270
So that's the six that we are seeing here.

128
00:10:05.080 --> 00:10:05.560
All right.

129
00:10:05.620 --> 00:10:11.080
Now, now that you understand what the regex engine is actually doing.

130
00:10:11.260 --> 00:10:12.430
What can we do about it?

131
00:10:12.520 --> 00:10:19.930
Well, we can make the rejects engine behave in a less greedy way, and it's actually quite easy to

132
00:10:19.930 --> 00:10:20.260
do.

133
00:10:20.920 --> 00:10:29.470
So we'll start with this greediness right here on Line 19, which caused the regex engine to find the

134
00:10:29.470 --> 00:10:32.050
second cumulative instead of the first one.

135
00:10:32.050 --> 00:10:34.140
Like we kind of thought it was going to do.

136
00:10:34.150 --> 00:10:42.550
All we need to do is to simply tell the regular expression engine, don't treat this asterisk as behaving

137
00:10:42.550 --> 00:10:43.210
greedily.

138
00:10:43.450 --> 00:10:43.960
OK.

139
00:10:43.990 --> 00:10:45.400
Make it not greedy.

140
00:10:45.580 --> 00:10:49.600
And to do that, you simply put a question mark behind it.

141
00:10:50.320 --> 00:10:54.370
So let's run this again and see what we get now.

142
00:10:55.960 --> 00:10:57.340
Oh, look at that.

143
00:10:57.670 --> 00:10:59.170
We still get a six.

144
00:11:00.330 --> 00:11:02.550
Now, why are we still getting a fix?

145
00:11:03.090 --> 00:11:06.740
Well, I'll explain why we actually have made progress.

146
00:11:06.750 --> 00:11:07.950
It just doesn't look like it.

147
00:11:08.460 --> 00:11:16.920
So now what's happening is the regular expression engine from this point here where the state idea is

148
00:11:16.920 --> 00:11:20.700
selected, which is where we are in in this neighborhood, right?

149
00:11:21.090 --> 00:11:22.170
We're right around here.

150
00:11:22.260 --> 00:11:25.260
We've told the asterisk not to be greedy anymore.

151
00:11:25.470 --> 00:11:33.200
So now it is actually going to just go forward until it encounters this word.

152
00:11:33.210 --> 00:11:34.200
Cumulative.

153
00:11:34.230 --> 00:11:39.630
OK, so now it's behaving on this cumulative match the way that we would have expected it to.

154
00:11:40.700 --> 00:11:43.130
OK, so now we're at the word cumulative.

155
00:11:43.370 --> 00:11:51.860
However, when it gets to this that star here from this first word cumulative, what's it going to do?

156
00:11:52.910 --> 00:11:58.790
It's still going to select all the way to the end first, and then it's going to backtrack.

157
00:11:59.300 --> 00:12:04.250
We're still in the same place that we were before, which is OK, it's going to backtrack until it finds

158
00:12:04.250 --> 00:12:05.330
a digit or a period.

159
00:12:05.960 --> 00:12:10.640
It does so here finds the six six gets captured, gets printed.

160
00:12:10.910 --> 00:12:17.180
So we're still getting the same apparent results, even though it started from the first cumulative

161
00:12:17.180 --> 00:12:18.740
rather than the second one.

162
00:12:19.130 --> 00:12:21.560
But the end result still is the same.

163
00:12:21.920 --> 00:12:30.650
So now all we need to do is put another question mark right here, like so to tell the regex engine,

164
00:12:30.890 --> 00:12:34.490
don't be greedy on this asterisk either, right?

165
00:12:34.490 --> 00:12:35.150
Right there.

166
00:12:35.750 --> 00:12:37.460
So let's run this again.

167
00:12:38.640 --> 00:12:40.020
Oh, look at that.

168
00:12:40.260 --> 00:12:41.010
Three point eight.

169
00:12:41.040 --> 00:12:41.460
Two.

170
00:12:42.000 --> 00:12:44.850
So let's just analyze what just happened here.

171
00:12:45.150 --> 00:12:52.740
Starting from the state I.D. OK, so it matched the state I.D. It found the state I.D. and captured

172
00:12:52.740 --> 00:12:54.750
it, and then it found the boundary.

173
00:12:55.380 --> 00:13:04.380
And then and then it tried to select as many characters, zero or more characters without being greedy,

174
00:13:04.380 --> 00:13:10.480
though, as it could until it came to the first instance of the word cumulative.

175
00:13:10.500 --> 00:13:18.180
So that is to say it started here at the boundary and then it went forward until it found the word cumulative

176
00:13:18.180 --> 00:13:23.700
as opposed to the normal greedy behavior, which would be to grab everything and then go backward until

177
00:13:23.700 --> 00:13:26.760
it has the word cumulative to the right of it.

178
00:13:26.970 --> 00:13:27.330
Right.

179
00:13:27.810 --> 00:13:32.160
So this time it went forward until it had the word cumulative.

180
00:13:32.250 --> 00:13:35.580
Then it finds, then it matches cumulative, which is right here.

181
00:13:35.850 --> 00:13:43.530
Then again, it goes forward because we now have another dot star which is told to not be greedy, which

182
00:13:43.530 --> 00:13:51.330
means it's going to go forward instead of backward, OK, until it finds a digit or a period.

183
00:13:51.870 --> 00:13:58.830
So the Dot star is all of this, including this space right up until here.

184
00:13:59.040 --> 00:14:03.990
And then it finds a digit or period, right?

185
00:14:04.010 --> 00:14:06.690
Three point eight two and then it grabbed all of that.

186
00:14:06.780 --> 00:14:09.900
So now it's behaving the way that we originally thought it would be.

187
00:14:10.200 --> 00:14:10.650
OK.

188
00:14:11.340 --> 00:14:20.700
Now you will encounter this pattern any time you are trying to apply a regular expression to a string

189
00:14:20.970 --> 00:14:29.400
that has some repeating pattern in it, and you're using the greedy operator like we originally were.

190
00:14:29.760 --> 00:14:36.750
Any time you've got that greedy operator and you have the possibility of looking for something in your

191
00:14:36.750 --> 00:14:39.720
regular expression, especially after the greedy operator.

192
00:14:39.930 --> 00:14:45.780
And the thing that's after it is repeated throughout the string or throughout the string.

193
00:14:46.140 --> 00:14:46.550
OK.

194
00:14:46.890 --> 00:14:49.590
That's when you can encounter this kind of problem.

195
00:14:49.890 --> 00:14:52.560
So you need to be really well aware of that.

196
00:14:53.220 --> 00:15:02.400
So like I said, it actually took me a few years to fully grasp why the greedy operator or greedy quantifier

197
00:15:02.550 --> 00:15:07.470
was giving me weird results that I just couldn't intuitively understand.

198
00:15:07.470 --> 00:15:12.300
And it was because I just didn't understand that it actually grabs everything and then goes backward.

199
00:15:12.330 --> 00:15:12.720
OK.

200
00:15:13.290 --> 00:15:20.130
So this is an incredibly helpful lesson for you to make sure you take the heart and learn really well.

201
00:15:20.130 --> 00:15:28.350
It will save you a lot of time in trying to analyze how your regular expressions are working, and that's

202
00:15:28.350 --> 00:15:30.960
going to wrap up this lesson and I'll see you in the next one.
