1
00:00:00,930 --> 00:00:07,360
All right, so before we get on with learning some of the other implementations of the set interface.

2
00:00:07,380 --> 00:00:09,630
Let's do a little bit of quick housekeeping.

3
00:00:10,770 --> 00:00:12,090
Let's jump over.

4
00:00:12,120 --> 00:00:13,500
Let me minimize this.

5
00:00:13,770 --> 00:00:24,330
Let's jump back in to the employee class and let's uncomment the hash code method so we can get get

6
00:00:24,330 --> 00:00:26,700
things working more correctly again.

7
00:00:26,700 --> 00:00:30,120
So I'm coming down here to this comment about hash code method.

8
00:00:30,150 --> 00:00:33,090
Make sure you select the annotation as well.

9
00:00:33,840 --> 00:00:39,120
So on my idiot's line 71 through 74, but it may be different for you a little bit.

10
00:00:39,480 --> 00:00:39,800
All right.

11
00:00:39,810 --> 00:00:46,860
And then I'll do a command forward slash to uncomment or control forward slash for Windows and Linux.

12
00:00:47,430 --> 00:00:55,520
And then we can go back over to the main class, and let's just make sure that that took effect.

13
00:00:55,530 --> 00:00:59,010
So I'm going to just rerun the program again.

14
00:01:02,210 --> 00:01:09,200
And yeah, okay, we're down to 17 items instead of twenty two, so I think that's looking good.

15
00:01:09,590 --> 00:01:09,970
All right.

16
00:01:09,980 --> 00:01:16,490
So now that we've done that little bit of housekeeping, let me present you with another scenario.

17
00:01:16,940 --> 00:01:25,040
So we're using a set because we want to ensure that there are no duplicate objects.

18
00:01:25,040 --> 00:01:31,280
And obviously the definition of duplicate for employees is two or more employees with the same first

19
00:01:31,280 --> 00:01:33,240
name, last name and date of birth.

20
00:01:33,260 --> 00:01:33,530
OK.

21
00:01:33,560 --> 00:01:38,750
For our purposes, if we wanted to change that definition, we certainly could do so.

22
00:01:38,870 --> 00:01:45,670
We could add in roll or something else like that, and we'd have to go into the employee class.

23
00:01:45,680 --> 00:01:49,850
In fact, I'll just jump over there real quick to show you this is just a very quick review.

24
00:01:50,150 --> 00:01:58,430
So if we wanted the definition of duplicate to include first name, last name, date of birth and roll,

25
00:01:58,430 --> 00:02:05,810
for example, then what we could do is go over to the employee class, go down to the equals and hash

26
00:02:05,810 --> 00:02:08,030
code methods which are here.

27
00:02:08,420 --> 00:02:16,190
And perhaps we would have to add in something like class itself or a string representation of the class,

28
00:02:16,190 --> 00:02:24,170
because in our current implementation here, the role is not a an explicit field, it is the actual

29
00:02:24,170 --> 00:02:26,090
subclass of employee, right?

30
00:02:26,660 --> 00:02:34,160
If you are a programmer, there is no there is no field called roll that then encodes the string of

31
00:02:34,160 --> 00:02:34,730
programmer.

32
00:02:34,730 --> 00:02:39,980
Instead, the entire class itself or in our case, really the subclass would be programmers.

33
00:02:39,980 --> 00:02:44,000
So maybe we'd be looking to do something along these lines.

34
00:02:44,330 --> 00:02:50,000
Maybe we do something like simply add in a call to get class.

35
00:02:50,360 --> 00:02:59,060
OK, now note if we add this here in hash code, we need to do something equivalent in the equals method,

36
00:02:59,060 --> 00:02:59,930
though, right?

37
00:03:00,140 --> 00:03:08,030
Because we want the the the approach to determining uniqueness or whatever to be consistent between

38
00:03:08,030 --> 00:03:11,020
both the equals method and the hash code method.

39
00:03:11,030 --> 00:03:11,310
OK?

40
00:03:11,330 --> 00:03:20,330
So if I if I'm adding in that uniqueness of an employee includes the class type here, then I must also

41
00:03:20,330 --> 00:03:24,440
add that up here and let's see how much they do that.

42
00:03:25,790 --> 00:03:30,570
So in this case, maybe I would do something like real quick first.

43
00:03:30,590 --> 00:03:35,810
Let me let me clean this up a little bit so I can make it a little easier just to show you what I'm

44
00:03:35,810 --> 00:03:36,680
talking about.

45
00:03:36,680 --> 00:03:43,640
So maybe I would add another and here and then I would need to say something like get class.

46
00:03:45,960 --> 00:03:51,840
Equals, oh, dot, get class.

47
00:03:53,310 --> 00:03:59,070
OK, so there's an example of how you might do that in that particular case, and that's a little bit

48
00:03:59,070 --> 00:04:08,010
of an oddball one because normally you'd be using explicit fields of the class itself rather than the

49
00:04:08,010 --> 00:04:09,300
whole entire class.

50
00:04:09,810 --> 00:04:12,990
But this hopefully gives you some ideas.

51
00:04:13,170 --> 00:04:13,420
All right.

52
00:04:13,440 --> 00:04:14,580
So let me undo that.

53
00:04:16,850 --> 00:04:17,210
All right.

54
00:04:17,570 --> 00:04:20,900
And I will jump back over to the main class now.

55
00:04:21,620 --> 00:04:30,650
So we've we've learned that with the hash set, it is very good at filtering out duplicates as long

56
00:04:30,650 --> 00:04:36,500
as we have done an adequate job of implementing our equals and hash code methods.

57
00:04:37,040 --> 00:04:45,830
However, we also have learned that the hash set implementation of the set interface does not honor

58
00:04:45,920 --> 00:04:53,120
the insertion order or any type of ordering that we would be able to intuitively understand.

59
00:04:54,050 --> 00:05:00,920
And the reason for that is because it uses a hash code which then derives an index, and it is by that

60
00:05:00,920 --> 00:05:05,960
index that the items in the hash that are effectively ordered.

61
00:05:06,620 --> 00:05:14,210
So what if we did want the items in our set to be in the same order in which we inserted them so-called

62
00:05:14,210 --> 00:05:19,610
insertion order, which is what the list interface gives us, right?

63
00:05:19,850 --> 00:05:22,610
Well, there's actually a way to do that and to do so.

64
00:05:22,610 --> 00:05:29,840
All we need to do is change the implementation of our set from a hash set to a linked hash set.

65
00:05:30,260 --> 00:05:34,040
So that's actually as easy as simply coming up here.

66
00:05:36,410 --> 00:05:46,310
And changing this to Linked has said like, so I got a little extra there, someone to delete the extra

67
00:05:46,310 --> 00:05:47,180
bits there.

68
00:05:47,240 --> 00:05:48,110
All right, there we go.

69
00:05:48,350 --> 00:05:49,940
Linked hash set.

70
00:05:52,230 --> 00:06:01,230
And so now let's take note real quick of the current order with the hash set, and then we'll rerun

71
00:06:01,230 --> 00:06:04,830
this with the linked hash and see what the difference will be.

72
00:06:05,010 --> 00:06:12,270
So with the hash set, we've got The Flintstones and then some rubbles and then some more Flintstones

73
00:06:12,270 --> 00:06:14,610
and then the Nay and then some more Flintstones.

74
00:06:14,640 --> 00:06:14,860
Right?

75
00:06:14,880 --> 00:06:17,550
That's that's the order we happen to be getting at this time.

76
00:06:17,610 --> 00:06:21,180
So now let's run it with the linked hash said and see what we get.

77
00:06:22,920 --> 00:06:23,860
All right.

78
00:06:24,180 --> 00:06:28,040
So we're getting Fred Flintstone in A..

79
00:06:28,350 --> 00:06:34,950
And then two, three, four and five and then Barney Rubble two, three, four and five, Wilma and

80
00:06:34,950 --> 00:06:35,430
Betty.

81
00:06:35,640 --> 00:06:39,330
And then if we I'm going to make this come down just a little bit.

82
00:06:40,580 --> 00:06:46,370
And then over here in the top, I'll come up here, so what we should be seeing now is other than having

83
00:06:46,370 --> 00:06:55,190
filtered out the five duplicates or so, we should be seeing the same order between the top and the

84
00:06:55,190 --> 00:06:55,970
bottom now, right?

85
00:06:55,980 --> 00:06:58,880
So we've got the Fred Flintstone with no no right.

86
00:06:59,270 --> 00:07:06,170
Then the next one after we skip over the duplicates is this one with a roll that doesn't match up with

87
00:07:06,170 --> 00:07:07,550
any of our standard roles.

88
00:07:07,550 --> 00:07:13,430
The programmers, which maps to a not applicable right the in a right here.

89
00:07:13,610 --> 00:07:14,750
So that's correct.

90
00:07:15,440 --> 00:07:17,510
And then let's see.

91
00:07:18,570 --> 00:07:21,840
And then Fred Flintstone, two, three, four and five.

92
00:07:21,970 --> 00:07:23,740
Here we go two, three, four and five.

93
00:07:23,760 --> 00:07:26,460
Barney Rubble two, three, four and five.

94
00:07:26,820 --> 00:07:34,770
So, yeah, so as you can see, it appears to be more or less the same behavior that we got with the

95
00:07:34,770 --> 00:07:41,970
list interface, except with an added little bonus, if you will, that it's also capable of filtering

96
00:07:41,970 --> 00:07:43,230
out the duplicates.

97
00:07:43,500 --> 00:07:47,610
Now let me remind you, I can hear some of you already thinking because you may have forgotten or not

98
00:07:47,610 --> 00:07:50,670
caught some of the points that I made earlier.

99
00:07:51,000 --> 00:07:55,560
Some of you are thinking, Oh, why don't I just use the linked hash that for everything?

100
00:07:55,860 --> 00:08:04,860
And I mean, for in certain cases, perhaps you could if your list isn't very long or if your application

101
00:08:04,860 --> 00:08:10,260
isn't very time sensitive and you don't need to care about access times and things like that, like

102
00:08:10,260 --> 00:08:15,090
in this program, where our list really isn't that long and it's not particularly time sensitive at

103
00:08:15,090 --> 00:08:19,230
all, you very well may choose to prefer using a linked hash set.

104
00:08:19,920 --> 00:08:28,830
However, as I've noted before, the hash that is much quicker for accessing the elements within it

105
00:08:28,830 --> 00:08:30,000
because of how it works.

106
00:08:30,720 --> 00:08:33,330
The linked hash that isn't bad, by the way.

107
00:08:33,330 --> 00:08:34,890
It's really not too bad at all.

108
00:08:35,130 --> 00:08:38,650
But it's not quite as fast as the hash set.

109
00:08:38,850 --> 00:08:41,340
And so that's just something to bear in mind.

110
00:08:43,430 --> 00:08:50,210
But yeah, you do get some some nice benefits here if you need the items to come out of it in order.

111
00:08:50,390 --> 00:08:55,550
Now one other thing I will I will note if we go.

112
00:08:55,670 --> 00:08:57,890
Let me see, let me bring this down a bit.

113
00:08:58,070 --> 00:09:02,720
So here's where we are actually printing them out right in this bit of a loop here.

114
00:09:02,960 --> 00:09:10,820
And we're using and we're using the enhanced for loop or the more modern for loop to do so.

115
00:09:11,960 --> 00:09:17,780
So this works great because the interface that we're using here is a set.

116
00:09:17,990 --> 00:09:26,810
Just note that even though the items are now being saved in this linked hash set in insertion order

117
00:09:27,050 --> 00:09:31,880
and they are coming out in in the insertion order.

118
00:09:32,060 --> 00:09:39,980
When we use an enhanced loop, we are not able to say things like give me the third or give me the seventh

119
00:09:40,280 --> 00:09:48,440
element in this in this collection, as we could do with a list, the list interface has the get method

120
00:09:48,440 --> 00:09:54,740
on it, where you can say get the 3rd or the 5th or the 10th index of the Element.

121
00:09:55,010 --> 00:10:01,310
The set interface does not have those random access type methods in it.

122
00:10:01,850 --> 00:10:03,740
And so that's just one thing to bear in mind.

123
00:10:03,740 --> 00:10:12,140
In other words, you can get a whole set, no pun intended of items out of the linked hash set in order

124
00:10:12,140 --> 00:10:18,890
in the insertion order while you're iterating over them with an iterator or an enhanced loop or whatever.

125
00:10:19,070 --> 00:10:26,480
But you cannot randomly go to specific indexes, as you could with the list, OK?

126
00:10:27,440 --> 00:10:32,600
If you wanted to be able to do that, even though you had been storing everything ultimately in a set,

127
00:10:32,810 --> 00:10:40,520
you could create a new list temporarily and and initialize it with a set.

128
00:10:40,520 --> 00:10:44,360
As I have shown once before, I'll just show you what that looks like real quick again.

129
00:10:44,660 --> 00:10:53,060
So let's say you wanted to be able to get specifically the seventh element out of this out of this set

130
00:10:53,060 --> 00:10:53,480
here.

131
00:10:53,750 --> 00:11:02,270
What you could do if you really must do so is you could create a new array list.

132
00:11:04,330 --> 00:11:15,010
And then simply initialize it with the hash set or with with the set like so and then you could even

133
00:11:15,010 --> 00:11:19,090
just go ahead and say get and then pass in an index, right?

134
00:11:19,120 --> 00:11:24,730
And now you're pulling out the 11th element in the set.

135
00:11:24,790 --> 00:11:25,270
OK.

136
00:11:25,390 --> 00:11:26,620
So that's something you could do.

137
00:11:27,190 --> 00:11:34,000
Keep in mind, though, that's kind of an expensive operation to do just to get one item.

138
00:11:35,800 --> 00:11:39,580
So, you know, you just want to be mindful of that, right?

139
00:11:39,640 --> 00:11:45,970
You're effectively going to make a whole other copy of that employee's collection.

140
00:11:46,180 --> 00:11:50,890
So in our case, where we only have whatever it is, 17, 22, whatever.

141
00:11:51,460 --> 00:11:52,630
Probably not a big deal.

142
00:11:52,750 --> 00:11:57,790
But if that thing had millions and millions of records, that might not be the best way to go about

143
00:11:57,790 --> 00:12:03,820
doing that at all because you'd effectively be duplicating those structures, right?

144
00:12:04,870 --> 00:12:07,390
So just keep that in mind, I'm going to delete this line.

145
00:12:07,390 --> 00:12:13,030
I just wanted to show you and remind you of the fact that you can always create new collections and

146
00:12:13,030 --> 00:12:15,640
initialize them with existing collections.

147
00:12:16,690 --> 00:12:17,080
All right.

148
00:12:17,710 --> 00:12:18,140
OK.

149
00:12:18,160 --> 00:12:23,560
And that's going to wrap up my little discussion here on the linked hash set.

150
00:12:23,560 --> 00:12:29,950
And then in the next lesson, we'll take a quick look at the remaining popular implementation of set,

151
00:12:29,950 --> 00:12:33,010
which is the tree said see in the next one.
