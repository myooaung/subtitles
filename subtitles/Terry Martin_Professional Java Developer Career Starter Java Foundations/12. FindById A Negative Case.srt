1
00:00:01,080 --> 00:00:08,220
All right, so in the last lesson, we implemented the first Test for implementing the find by ID method,

2
00:00:08,220 --> 00:00:11,210
and we got that working in this lesson.

3
00:00:11,220 --> 00:00:18,330
One of the things I want to do now is to test a negative situation in which we provide an ID of a person

4
00:00:18,330 --> 00:00:23,070
that we know doesn't exist in the database and see how that should be handled.

5
00:00:23,160 --> 00:00:26,430
OK, so let's create a new test.

6
00:00:28,580 --> 00:00:29,960
Public void.

7
00:00:30,290 --> 00:00:36,260
And let's see, test person I.D. not found.

8
00:00:37,420 --> 00:00:40,240
OK, so let's set this up a little bit.

9
00:00:40,600 --> 00:00:48,880
Let's say that we're going to call repo find by I.D. and we need to pass in an I.D. that we know won't

10
00:00:48,880 --> 00:00:51,160
actually be found in the database.

11
00:00:51,490 --> 00:00:55,960
And the easiest way I can think to do this is to use maybe like a negative number.

12
00:00:56,320 --> 00:00:58,210
So negative one.

13
00:00:58,810 --> 00:01:03,820
For example, I know that the H2 database isn't generating negative IDs.

14
00:01:04,000 --> 00:01:07,270
And so I think this should work pretty well for our purposes.

15
00:01:07,570 --> 00:01:07,990
OK.

16
00:01:08,170 --> 00:01:15,250
And then I'm going to go ahead and capture the result of this found person.

17
00:01:15,670 --> 00:01:18,280
Now what do I want to assert here?

18
00:01:18,760 --> 00:01:27,070
I actually think this might be a great opportunity for us to return an optional person, actually.

19
00:01:27,130 --> 00:01:27,460
Right?

20
00:01:27,790 --> 00:01:29,800
Because it shouldn't find a person.

21
00:01:29,830 --> 00:01:30,190
Right.

22
00:01:30,520 --> 00:01:35,980
But we have to return something and we've learned about options, and we know that they are, generally

23
00:01:35,980 --> 00:01:39,880
speaking, much better and more desirable than returning null.

24
00:01:40,510 --> 00:01:44,560
And they might actually be better than throwing an exception.

25
00:01:44,710 --> 00:01:51,460
Traditionally, a lot of applications back in the day that would implement a functionality like this

26
00:01:51,730 --> 00:01:58,120
might have just chosen to throw some kind of an exception saying something like, you know, person

27
00:01:58,120 --> 00:02:01,840
not found or invalid ID something along those lines, right?

28
00:02:02,200 --> 00:02:07,210
But when you have to do all this exception, handling that code is considered kind of nasty.

29
00:02:07,210 --> 00:02:12,340
And really, a lot of developers would prefer not to have to do all of this nasty trade catch stuff

30
00:02:12,340 --> 00:02:13,240
all over the place.

31
00:02:13,450 --> 00:02:20,950
And so here's an opportunity for us to avoid nulls and try catch stuff, I think, and simply return

32
00:02:20,950 --> 00:02:21,640
it optional.

33
00:02:22,090 --> 00:02:26,590
So if this were to return an optional, then that would look like.

34
00:02:27,950 --> 00:02:28,610
This.

35
00:02:30,010 --> 00:02:34,900
Optional of person, and I will import that.

36
00:02:36,070 --> 00:02:39,760
And then down here, we could assert something.

37
00:02:40,180 --> 00:02:46,210
Now do I want to go ahead and implement the assertion or do I want to address these squiggly red lines?

38
00:02:46,420 --> 00:02:53,230
I think probably we want to address the red squiggly lines here to address these red squiggly lines.

39
00:02:54,100 --> 00:02:55,630
Do you know why you're getting this?

40
00:02:55,690 --> 00:02:58,840
Do you want to take a quick guess before I before I hover over it?

41
00:02:59,650 --> 00:03:06,730
So the the issue here should be the fact that the signature for the Find My ID method currently is defined

42
00:03:06,730 --> 00:03:10,180
to simply return a person and not an optional person.

43
00:03:10,390 --> 00:03:19,450
So to fix this, we would need to modify the signature of the find by ID method in the repository class

44
00:03:19,450 --> 00:03:22,660
to not return a person but return an optional person.

45
00:03:22,810 --> 00:03:27,730
That in turn, though, is going to have ripple effects on what we're doing up here, right?

46
00:03:27,880 --> 00:03:30,580
So it's forcing us to refactor our code a bit.

47
00:03:31,180 --> 00:03:32,320
Let's go for it, though.

48
00:03:32,560 --> 00:03:32,770
All right.

49
00:03:32,770 --> 00:03:35,560
So let's jump in here to the find by ID method now.

50
00:03:35,920 --> 00:03:40,180
And so I'm going to declare that this method will return and oops.

51
00:03:40,180 --> 00:03:44,530
And optional loops optional person.

52
00:03:46,160 --> 00:03:49,370
All right, and then I need to import the optional class there.

53
00:03:49,580 --> 00:03:49,920
All right.

54
00:03:49,940 --> 00:03:54,380
And so then down here, we're returning this person now.

55
00:03:54,390 --> 00:04:03,590
The easiest thing I can think of doing to make this happy is probably just to say optional or optional

56
00:04:03,590 --> 00:04:05,570
dot of knowable.

57
00:04:07,790 --> 00:04:10,400
Person, why did I use of Nullarbor?

58
00:04:10,790 --> 00:04:16,460
Well, because we're different, we're declaring this person up here in line 39 to be null.

59
00:04:16,910 --> 00:04:25,460
And if we didn't get any results in this, in this result set here, then none of this code is going

60
00:04:25,460 --> 00:04:26,450
to execute.

61
00:04:26,660 --> 00:04:30,500
And so then when we return the person, that person is still going to be null.

62
00:04:30,890 --> 00:04:31,280
Right?

63
00:04:31,520 --> 00:04:38,480
And so if you know that that object is null and you do an optional dot of that will blow up with an

64
00:04:38,480 --> 00:04:39,260
exception.

65
00:04:39,530 --> 00:04:46,460
But if you do an of Nullarbor, then the optional will allow you to pass in a null person as well as

66
00:04:46,460 --> 00:04:48,380
a non null person.

67
00:04:48,410 --> 00:04:48,890
OK.

68
00:04:49,100 --> 00:04:54,440
So we need the oven culpable here to avoid any potential exceptions being thrown.

69
00:04:54,740 --> 00:04:55,160
All right.

70
00:04:55,340 --> 00:04:58,580
So then jump back over here to the test.

71
00:04:59,300 --> 00:05:02,740
So now we've got to deal with this, and now it's a little bit of whack a mole, right?

72
00:05:02,750 --> 00:05:05,060
So we go fix one thing and then that breaks another.

73
00:05:05,090 --> 00:05:06,570
Now go fix that break another.

74
00:05:06,590 --> 00:05:14,120
OK, now this line is not happy because it returns a an optional person, but here we're just catching

75
00:05:14,120 --> 00:05:15,470
a regular person.

76
00:05:15,620 --> 00:05:20,360
So I've got a few options here that options no pun intended.

77
00:05:20,780 --> 00:05:25,850
I could put a cursor here and then be lazy and just call it get.

78
00:05:26,950 --> 00:05:29,510
And then that makes everything happy right away.

79
00:05:29,920 --> 00:05:38,650
And because this is test code, I'm OK to do this actually right, because I control the circumstances

80
00:05:38,650 --> 00:05:40,990
of this test entirely, right?

81
00:05:41,170 --> 00:05:47,650
So I know that every single time this test runs, there should be a legitimate person here.

82
00:05:47,650 --> 00:05:54,880
And therefore this optional that's coming out of the fine by ID should never be empty, and therefore

83
00:05:54,880 --> 00:05:57,160
the message should always work.

84
00:05:57,340 --> 00:06:02,380
And if any of these assumptions don't work, I want this test to fail, right?

85
00:06:02,470 --> 00:06:08,470
So I'm very OK in this case, just calling okay and not being any fancier than that.

86
00:06:08,710 --> 00:06:14,290
So again, keep in mind the difference of how you would think about handling test code versus how you

87
00:06:14,290 --> 00:06:20,290
might think about handling real implementation code in your system under test, which in this case would

88
00:06:20,290 --> 00:06:21,670
be the repository class.

89
00:06:22,420 --> 00:06:22,990
All right.

90
00:06:23,020 --> 00:06:27,340
So then down here, we'd be getting this object here.

91
00:06:28,060 --> 00:06:38,410
And so then I think I can just make a really simple assertion like assert that the found person is empty.

92
00:06:41,480 --> 00:06:45,080
Now, notice here how I did that I didn't call.

93
00:06:46,200 --> 00:06:53,700
Sound person Dot is empty inside of these parentheses here, right, I didn't do it that way.

94
00:06:54,660 --> 00:07:02,760
I referenced the optional class here, found person and then outside of the parentheses, I let a certain

95
00:07:02,760 --> 00:07:05,400
DJ give me and is empty method.

96
00:07:05,490 --> 00:07:06,600
Now, why did I do that?

97
00:07:06,690 --> 00:07:14,850
Well, by using a certain JS is empty method, I allow a certain DJ to be aware of what my intent is

98
00:07:14,850 --> 00:07:15,180
here.

99
00:07:15,330 --> 00:07:23,040
And that way, a search way, along with DJ unit, can report back when my assumption isn't true, and

100
00:07:23,040 --> 00:07:27,720
it can give me more detailed information about how my assertion isn't true.

101
00:07:27,750 --> 00:07:36,840
OK, so a search is now aware that I am dealing with an optional that I expect to be empty.

102
00:07:36,990 --> 00:07:37,410
OK.

103
00:07:37,620 --> 00:07:38,010
All right.

104
00:07:38,100 --> 00:07:39,540
So let's run that.

105
00:07:40,470 --> 00:07:41,190
And there we go.

106
00:07:41,190 --> 00:07:41,700
That works.

107
00:07:41,850 --> 00:07:42,890
And I apologize to you.

108
00:07:42,900 --> 00:07:48,690
One thing I actually forgot to do in the last lesson was once we got one of those tests working to go

109
00:07:48,690 --> 00:07:50,010
back and just run everything.

110
00:07:50,430 --> 00:07:55,590
And really, you could always just run everything, even as you're implementing one test at a at a time.

111
00:07:55,650 --> 00:07:59,310
I really just was being lazy and didn't want to scroll all the way back up here again.

112
00:07:59,340 --> 00:08:00,810
So let's run all the tests.

113
00:08:01,650 --> 00:08:02,160
Very good.

114
00:08:02,310 --> 00:08:07,950
So you do want to make sure that you're constantly rerunning all of your tests so that you can ensure

115
00:08:07,950 --> 00:08:11,340
that you haven't introduced what's called a regression?

116
00:08:11,550 --> 00:08:14,150
A regression is literally going backward, right?

117
00:08:14,220 --> 00:08:16,560
So you had functionality that had been working.

118
00:08:16,650 --> 00:08:22,530
But then when you implemented some new thing, you unintentionally broke some old functionality that

119
00:08:22,530 --> 00:08:24,780
had been working, so you regressed.

120
00:08:25,050 --> 00:08:31,710
So you want to rerun all of the tests frequently so that you can catch any potential regressions.

121
00:08:31,740 --> 00:08:32,130
OK.

122
00:08:32,220 --> 00:08:34,390
And that is called regression testing.

123
00:08:34,680 --> 00:08:34,890
All right.

124
00:08:34,890 --> 00:08:36,540
So it looks like we're all good here.

125
00:08:37,110 --> 00:08:43,590
OK, so now that we've got this test working, let's jump back over into the find by ID method here.

126
00:08:43,590 --> 00:08:53,880
And one little cleanup thing that I would like to do is to extract this SQL query here out into a constant.

127
00:08:54,150 --> 00:09:01,260
So I will just select the entire thing there and then do an option command C for constant or control,

128
00:09:01,260 --> 00:09:02,910
alt C for Windows and Linux.

129
00:09:03,150 --> 00:09:05,670
And I'm going to name this.

130
00:09:06,360 --> 00:09:06,840
Let's see.

131
00:09:06,850 --> 00:09:14,160
Well, I guess I'm going to name it something like find out about just fine by Edee sequel.

132
00:09:16,520 --> 00:09:17,840
It would go all right.

133
00:09:17,870 --> 00:09:24,680
And so now that sequel is right up here next to the previously created constant right there.

134
00:09:24,890 --> 00:09:25,250
OK.

135
00:09:25,760 --> 00:09:31,370
One other thing that you may want to consider as well, though I don't think I'm going to bother with

136
00:09:31,370 --> 00:09:31,490
it.

137
00:09:31,490 --> 00:09:36,830
Here is these constants here for the column names and stuff.

138
00:09:37,580 --> 00:09:45,380
There may be some really, really strict teams who are still using GDC to do database coding, and they

139
00:09:45,380 --> 00:09:50,540
may have decided not to allow these kinds of string literals to be peppered throughout throughout the

140
00:09:50,540 --> 00:09:54,440
code, and instead, they may prefer to extract those out into constants.

141
00:09:55,090 --> 00:09:56,840
I, I don't know.

142
00:09:56,840 --> 00:09:59,990
I'm not real crazy about doing that to that extent.

143
00:10:00,350 --> 00:10:07,430
I do know of frameworks that could be utilized where the frameworks would generate a lot of constants

144
00:10:07,430 --> 00:10:12,080
for you, like the framework will go out and scan the database and become aware of all the columns and

145
00:10:12,080 --> 00:10:13,310
everything that are out there.

146
00:10:13,580 --> 00:10:18,820
And then it'll generate classes that define these constants for you.

147
00:10:18,830 --> 00:10:21,770
So that way you don't have to create them yourself.

148
00:10:22,040 --> 00:10:29,780
And the idea there is to keep the constants in sync, always with what's actually out in the database.

149
00:10:30,530 --> 00:10:31,060
I don't know.

150
00:10:31,070 --> 00:10:37,330
I kind of maybe, maybe I kind of prefer approaches like that in real world application development.

151
00:10:37,340 --> 00:10:38,260
So I don't know.

152
00:10:38,270 --> 00:10:40,610
I'm just mentioning some things to think about.

153
00:10:40,850 --> 00:10:47,210
But for me, in a case like this, I'd probably just leave these string literals right here as they

154
00:10:47,210 --> 00:10:49,400
are, to be really honest with you.

155
00:10:49,850 --> 00:10:50,260
All right.

156
00:10:50,270 --> 00:10:54,920
And I think that was a pretty easy once we're going to wrap this one up and will implement some more

157
00:10:54,920 --> 00:10:57,080
functionality in the upcoming lessons.

158
00:10:57,230 --> 00:10:58,430
I will see you in the next one.
