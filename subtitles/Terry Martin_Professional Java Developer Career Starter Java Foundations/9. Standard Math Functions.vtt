WEBVTT
1
00:00:00.450 --> 00:00:03.480
All right, next up, we're going to get into some really good stuff.

2
00:00:03.660 --> 00:00:10.830
So remember in when we were learning about text, we had a number of lessons where we dug into a lot

3
00:00:10.830 --> 00:00:15.270
of the text manipulation methods on the string class.

4
00:00:15.660 --> 00:00:20.880
Well, there is something kind of equivalent to that in math, and it's where a lot of the really good

5
00:00:20.880 --> 00:00:22.590
math functions exist.

6
00:00:22.920 --> 00:00:32.700
So there is a class called math, and this class has a huge number of utility methods, as I call them

7
00:00:32.700 --> 00:00:38.790
static methods that are there for doing all of the rest of the typical math that you would see on a

8
00:00:38.790 --> 00:00:41.070
scientific calculator or something like that.

9
00:00:41.280 --> 00:00:47.340
And so we're going to step through a lot of the most common methods on this class so that you can see

10
00:00:47.340 --> 00:00:50.160
how to use them and how to get real math things done.

11
00:00:50.370 --> 00:00:50.710
All right.

12
00:00:50.730 --> 00:00:56.400
So what I'm going to do is just literally just walk through this and I'll start kind of at the top and

13
00:00:56.400 --> 00:00:58.710
I won't hit every single method.

14
00:00:58.710 --> 00:01:03.240
Some of the methods I don't even know how to use because I just don't need them, but I will hit the

15
00:01:03.240 --> 00:01:05.850
most obvious and commonly used ones.

16
00:01:06.300 --> 00:01:10.910
All right, so first up is the ABS method, which stands for absolute.

17
00:01:10.920 --> 00:01:14.850
So this method gives you the absolute value of a number.

18
00:01:15.090 --> 00:01:16.350
So let's see how to use it.

19
00:01:16.560 --> 00:01:23.130
So what I will do here is I will do a sizzle and then we'll call math dot abs.

20
00:01:24.030 --> 00:01:27.780
And so what we can do is pass in a negative number here.

21
00:01:27.790 --> 00:01:32.500
OK, so if we pass in a negative number, this is going to give us the absolute value.

22
00:01:32.520 --> 00:01:37.710
I'm hoping that everyone who's taking this course at least has had pre-algebra.

23
00:01:37.950 --> 00:01:41.280
So you should probably know what an absolute value is.

24
00:01:41.280 --> 00:01:47.370
But the absolute value of a number is basically just taking that number and stripping off any negative

25
00:01:47.370 --> 00:01:48.000
on it.

26
00:01:48.060 --> 00:01:48.630
OK.

27
00:01:48.660 --> 00:01:53.160
So the absolute value of the negative five should be positive five or just five.

28
00:01:53.340 --> 00:01:54.600
So let's see that real quick.

29
00:01:54.600 --> 00:01:55.440
We'll run this.

30
00:01:55.860 --> 00:01:56.430
There you go.

31
00:01:56.460 --> 00:01:58.590
So negative five becomes positive.

32
00:01:58.590 --> 00:01:59.070
Five.

33
00:01:59.760 --> 00:02:01.230
So pretty straightforward.

34
00:02:01.470 --> 00:02:03.020
Nothing real crazy there.

35
00:02:03.030 --> 00:02:06.150
I think there are a couple of versions of this method.

36
00:02:06.170 --> 00:02:11.860
Yeah, so there's one for many of the common types and long float and double.

37
00:02:11.910 --> 00:02:12.400
OK.

38
00:02:12.420 --> 00:02:14.910
But I don't think you need to run each of those.

39
00:02:15.090 --> 00:02:15.460
All right.

40
00:02:15.480 --> 00:02:17.310
So that's absolute value.

41
00:02:17.430 --> 00:02:19.290
Next up, let's see.

42
00:02:19.980 --> 00:02:26.220
I'm not going to demonstrate every single method, as I said before, but I may speak to a few of them.

43
00:02:26.220 --> 00:02:28.380
Like this one here, a C.O.s.

44
00:02:28.380 --> 00:02:30.120
That's a trigonometric function.

45
00:02:30.360 --> 00:02:33.030
I believe the A is for arc cosine.

46
00:02:33.150 --> 00:02:34.270
I'm not going to run that.

47
00:02:34.290 --> 00:02:38.250
The ceiling function is an interesting one.

48
00:02:38.370 --> 00:02:44.460
So first, I will just demonstrate it with a few different values and then we'll talk about it.

49
00:02:44.700 --> 00:02:51.390
So let's say we had a five point zero and I'm going to duplicate this a couple of times and a five point

50
00:02:51.390 --> 00:02:52.260
five.

51
00:02:52.440 --> 00:02:57.270
Well, actually this to a five point four and then a five point six.

52
00:02:58.110 --> 00:03:01.670
And let's print that all of this out and see what we end up with.

53
00:03:04.440 --> 00:03:04.900
OK.

54
00:03:07.390 --> 00:03:11.500
OK, so as we can see here, we got 5.0, 6.0 and 6.0.

55
00:03:11.710 --> 00:03:15.550
So this may require a little bit of explanation, but it's not that complicated.

56
00:03:15.850 --> 00:03:21.950
This function mostly wants to round up, typically wants to round up to an integer.

57
00:03:21.970 --> 00:03:29.140
OK, now if you're already on an even integer like 5.0, then it's not going to do anything at all.

58
00:03:29.410 --> 00:03:37.740
But anything even infinitesimally larger than 5.0, such as 5.1 or 5.4.

59
00:03:37.750 --> 00:03:43.540
It's going to round that up to the next highest integer, which is six.

60
00:03:43.780 --> 00:03:44.230
OK.

61
00:03:44.470 --> 00:03:53.230
So it's called ceiling, because if you think of this as the set point for 5.0 and 6.0 is here, it's

62
00:03:53.350 --> 00:03:57.640
anything greater than 5.0, such as five point zero one.

63
00:03:57.790 --> 00:04:01.480
It's going to round up to the ceiling, which will be six.

64
00:04:01.870 --> 00:04:09.370
So let's also let's try five point zero one and just confirm that.

65
00:04:10.250 --> 00:04:10.680
Yes.

66
00:04:10.700 --> 00:04:16.970
So see it even rounded up five point zero one to six point, oh, OK.

67
00:04:17.330 --> 00:04:20.450
So that's what the ceiling function does.

68
00:04:20.900 --> 00:04:25.700
And since we're on the ceiling function, we might as well look at the floor function, which is pretty

69
00:04:25.700 --> 00:04:26.690
much the same thing.

70
00:04:26.780 --> 00:04:33.740
So what I will do is I will switch into my column selection mode here and then I will select all of

71
00:04:33.740 --> 00:04:39.170
those ceiling functions and I will just change it all to floor.

72
00:04:40.490 --> 00:04:41.720
Just like that.

73
00:04:43.510 --> 00:04:46.960
OK, so now let's run.

74
00:04:47.170 --> 00:04:50.320
Hold on a minute, and I think I'll change these values a bit.

75
00:04:50.890 --> 00:04:53.650
Let's do five point 9-9-9.

76
00:04:55.260 --> 00:04:57.630
And let's do.

77
00:04:58.560 --> 00:04:59.280
Yeah, that's fine.

78
00:04:59.330 --> 00:05:00.450
Let's let's do this.

79
00:05:01.350 --> 00:05:01.740
OK.

80
00:05:02.010 --> 00:05:11.640
So as you can see, everything ends up being 5.00 in this case, so it wants to go down to the floor.

81
00:05:11.670 --> 00:05:19.980
So again, if this is five point, oh, and this is six point, oh, anything that is less than 6.0

82
00:05:20.280 --> 00:05:24.930
and greater than or equal to 5.0 is going to end up becoming 5.0.

83
00:05:25.110 --> 00:05:25.500
OK.

84
00:05:25.530 --> 00:05:28.920
I hope that's fairly obvious how that's working.

85
00:05:29.670 --> 00:05:30.330
All right.

86
00:05:31.020 --> 00:05:31.970
Let's see.

87
00:05:31.980 --> 00:05:39.870
Let's clear out these extra two, and let's go back in here and look at the other methods.

88
00:05:40.410 --> 00:05:40.800
Oops.

89
00:05:43.030 --> 00:05:49.000
All right, let's take a look at the MEN function, and this is pretty straightforward.

90
00:05:49.150 --> 00:05:55.150
So the way this would be used in a real program is that you might have a program that takes some input.

91
00:05:55.160 --> 00:06:01.420
So at the time of the writing of the code, you may not know what the input might be, but let's but

92
00:06:01.420 --> 00:06:02.860
it will be stored in some variables.

93
00:06:02.860 --> 00:06:07.420
So let's say you've got two variables number one, number one equals.

94
00:06:08.470 --> 00:06:13.840
Three and numb to equals five.

95
00:06:15.330 --> 00:06:15.760
All right.

96
00:06:15.780 --> 00:06:23.040
And then so the MEN function takes two numbers, so I will pass it and I'm one and a numb to it will

97
00:06:23.220 --> 00:06:28.920
it will return whichever number is the smaller one, the minimum one?

98
00:06:29.010 --> 00:06:29.490
OK.

99
00:06:29.520 --> 00:06:30.900
That's what it will return.

100
00:06:31.440 --> 00:06:34.230
So if we run this, there we go.

101
00:06:34.230 --> 00:06:35.510
So return to three.

102
00:06:35.520 --> 00:06:41.190
Like I said, a situation where you might want to use this would be one in which you're taking some

103
00:06:41.190 --> 00:06:46.020
input and you always want to just go with the smaller input.

104
00:06:46.170 --> 00:06:50.430
But at the time, when you're writing the code, you won't know which input is smaller, right?

105
00:06:50.430 --> 00:06:52.560
Because you don't know what the user is going to enter.

106
00:06:52.710 --> 00:06:56.400
So then you'd use a function like this to make that determination.

107
00:06:56.700 --> 00:06:57.060
All right.

108
00:06:57.240 --> 00:07:04.860
And so then there's an opposite of this, which is a max and we can use it just like this.

109
00:07:05.100 --> 00:07:09.000
So now if we run this now it returns the five, right?

110
00:07:09.150 --> 00:07:13.740
It's giving us the larger value and same type of scenario here.

111
00:07:13.770 --> 00:07:14.550
All right.

112
00:07:15.150 --> 00:07:18.180
Moving on, let's look at the power method.

113
00:07:18.420 --> 00:07:20.330
And this is pretty straightforward.

114
00:07:20.340 --> 00:07:26.910
If you want to raise a number to a certain power like two to the third power, for example, you would

115
00:07:26.910 --> 00:07:31.920
use this, I guess for this, I won't use the variables we'll just use.

116
00:07:33.600 --> 00:07:38.520
OK, so two to the third power will run that that should be eight.

117
00:07:39.000 --> 00:07:39.570
There you go.

118
00:07:39.990 --> 00:07:48.840
Now notice it returned 8.0, and that's because this method is actually storing these values in doubles

119
00:07:48.840 --> 00:07:51.390
and therefore it's going to return a double as well.

120
00:07:51.480 --> 00:07:53.640
OK, but pretty straightforward.

121
00:07:54.580 --> 00:07:59.270
Next up is the random function, and this is an extremely useful function.

122
00:07:59.290 --> 00:08:05.800
So any time we need to do something random in a program, there are a couple of ways to do this.

123
00:08:05.920 --> 00:08:08.650
Built in two Java and this is one of them.

124
00:08:08.830 --> 00:08:10.750
And then there's a more robust way.

125
00:08:10.780 --> 00:08:16.780
The difference between this way and the more robust way is that this random function is considered to

126
00:08:16.780 --> 00:08:19.420
be pseudo random, believe it or not.

127
00:08:19.450 --> 00:08:26.680
Quick little minor side note Believe it or not, computers actually are not good at generating random

128
00:08:26.800 --> 00:08:28.090
numbers at all.

129
00:08:28.270 --> 00:08:34.120
And when you think about it, it should kind of make sense, because how can a computer generate anything

130
00:08:34.120 --> 00:08:36.430
random, you know, it requires?

131
00:08:36.670 --> 00:08:43.360
There's a whole entire line of thinking, in fact, to engineer computers to be able to generate a good

132
00:08:43.360 --> 00:08:45.460
set of truly random numbers.

133
00:08:45.640 --> 00:08:49.500
And so this particular function isn't all that great at it.

134
00:08:49.510 --> 00:08:52.510
It's just a good approximation for simple things.

135
00:08:52.630 --> 00:08:57.160
It's like if you're going to make a really simple card game or something, this random function might

136
00:08:57.160 --> 00:08:57.970
be fine.

137
00:08:58.180 --> 00:09:04.660
But if you were going to do something like writing some type of security related code that needs to

138
00:09:04.660 --> 00:09:11.920
generate large ciphers and do a lot of randomness that way, you would not want to use this random function

139
00:09:11.920 --> 00:09:14.080
for something as important as that.

140
00:09:14.530 --> 00:09:14.770
All right.

141
00:09:14.780 --> 00:09:17.920
So anyway, let's see how this works, and then I'll explain.

142
00:09:18.100 --> 00:09:19.810
I'll explain a little bit about it.

143
00:09:20.110 --> 00:09:21.220
So we'll run this.

144
00:09:21.970 --> 00:09:22.450
All right.

145
00:09:22.460 --> 00:09:24.160
Look at what that returned.

146
00:09:24.580 --> 00:09:26.290
Point seven six five.

147
00:09:26.320 --> 00:09:27.510
Blah blah, blah, blah blah.

148
00:09:27.520 --> 00:09:29.540
But that's not what you were expecting.

149
00:09:29.560 --> 00:09:30.280
Let's do this.

150
00:09:30.280 --> 00:09:32.260
Also, let's run it a few times.

151
00:09:32.380 --> 00:09:37.390
Let's generate a few random numbers in a row, OK, and just see what we end up with.

152
00:09:40.470 --> 00:09:47.970
OK, so we've got a few random numbers point five, seven point five, four point seven point four point

153
00:09:47.970 --> 00:09:49.620
six and point one.

154
00:09:49.950 --> 00:09:53.970
Let's run it one more time and just see what we get.

155
00:09:54.750 --> 00:09:57.330
So we got two point five seven four six 11.

156
00:09:59.450 --> 00:10:07.160
OK, so at least we are getting different sets of random numbers for two consecutive runs and, you

157
00:10:07.160 --> 00:10:09.770
know, so that's that's not nothing that's that's good.

158
00:10:10.100 --> 00:10:18.080
OK, so let me now delete the X, the extra calls here and now let's talk about how to use this in a

159
00:10:18.080 --> 00:10:24.650
useful way, because almost nobody who ever wants to generate a random number wants to get these like

160
00:10:24.650 --> 00:10:26.290
decimal numbers and stuff.

161
00:10:26.300 --> 00:10:34.910
So let's say we were going to write a guessing game, and the game can pick a number between zero and

162
00:10:35.240 --> 00:10:36.530
10, I guess.

163
00:10:36.920 --> 00:10:37.370
OK.

164
00:10:37.730 --> 00:10:41.270
So what we would need to do is a little bit of math here.

165
00:10:41.330 --> 00:10:42.320
Just a tiny bit.

166
00:10:42.350 --> 00:10:47.330
Nothing scary, basically, to use this random function in a useful way.

167
00:10:47.510 --> 00:10:53.420
You need to multiply its output times whatever your upper range is.

168
00:10:53.430 --> 00:10:59.180
So if we're wanting numbers between zero and 10, then we need to multiply times.

169
00:10:59.180 --> 00:10:59.810
10.

170
00:10:59.840 --> 00:11:06.230
Now you're never going to actually get the value of 10 out of this, the highest it can go is going

171
00:11:06.230 --> 00:11:09.890
to be something less than 10 write like a nine point, whatever.

172
00:11:10.220 --> 00:11:14.710
That's by virtue of the fact that this function will never return 1.0.

173
00:11:14.720 --> 00:11:19.490
It will always return something greater than zero and less than one.

174
00:11:19.670 --> 00:11:20.150
OK.

175
00:11:21.320 --> 00:11:23.210
So let's run this.

176
00:11:24.450 --> 00:11:25.920
And see what we end up with.

177
00:11:29.100 --> 00:11:31.740
OK, so we got seven point one.

178
00:11:31.860 --> 00:11:35.520
Now, what if you didn't want these fractional components here, right?

179
00:11:35.700 --> 00:11:37.620
And you just wanted nice integers?

180
00:11:37.740 --> 00:11:43.560
Can you think of a way that you could force the output here to just give you a nice, simple integers?

181
00:11:43.800 --> 00:11:44.490
Take a moment.

182
00:11:44.490 --> 00:11:47.850
Pause the video if you need to to think about it, and then let's let's figure that out.

183
00:11:49.170 --> 00:11:58.590
OK, so if you will recall in one of the previous lessons, I showed you how we can tell Java to force

184
00:11:58.590 --> 00:12:01.560
a number to become a different type.

185
00:12:01.570 --> 00:12:06.270
So in other words, if it was an integer, we can force it to be a double or a float.

186
00:12:06.390 --> 00:12:12.720
Well, we can also force in this case what is a double to become a and an integer.

187
00:12:12.990 --> 00:12:16.380
And the way we can do that is.

188
00:12:17.580 --> 00:12:19.260
To simply wrap.

189
00:12:21.420 --> 00:12:22.920
This whole thing.

190
00:12:27.860 --> 00:12:32.660
And then cast it to an integer just like that.

191
00:12:33.200 --> 00:12:34.760
So if we run this now?

192
00:12:36.880 --> 00:12:37.240
Cool.

193
00:12:37.270 --> 00:12:42.340
Now we get an eight, and so if we run this a few times, just to make sure.

194
00:12:45.330 --> 00:12:46.770
All right, so there we go.

195
00:12:48.050 --> 00:12:57.270
Now we're getting nice hole numbers now notice, because we are casting the results of this bit to integer.

196
00:12:57.290 --> 00:12:59.540
We're now able to get zero.

197
00:12:59.750 --> 00:13:03.690
So the math, the random function itself will never return to zero.

198
00:13:03.710 --> 00:13:06.140
It will always return values greater than zero.

199
00:13:06.860 --> 00:13:14.660
However, it is possible for values that are less than one to two become a zero when they are cast to

200
00:13:14.660 --> 00:13:15.290
an integer.

201
00:13:15.560 --> 00:13:17.420
So you get your zeros there.

202
00:13:17.450 --> 00:13:18.260
All right.

203
00:13:20.430 --> 00:13:22.830
Let's look at some more functions.

204
00:13:23.910 --> 00:13:26.730
OK, next up, we'll take a look at let's see.

205
00:13:27.780 --> 00:13:35.490
We'll take a look at math round and this does what you probably are guessing it does.

206
00:13:35.490 --> 00:13:37.020
It rounds numbers.

207
00:13:37.290 --> 00:13:39.800
So let's take a look at a few examples here.

208
00:13:39.810 --> 00:13:49.260
We'll do five point o and I'm going to duplicate this a few times and let's do five nine two three four

209
00:13:49.260 --> 00:13:51.980
five five seven eight nine nine nine.

210
00:13:52.410 --> 00:13:52.860
All right.

211
00:13:52.870 --> 00:13:54.420
Let's run this and see what we get.

212
00:13:58.230 --> 00:14:05.040
OK, so for the first three, we get five, five point zero, five point two and five point four.

213
00:14:05.250 --> 00:14:06.480
I think that makes sense.

214
00:14:06.480 --> 00:14:12.210
If you recall back to your elementary school lessons when you probably learned about rounding in the

215
00:14:12.210 --> 00:14:17.910
first place, most likely the teacher told you between two integers, such as five and six when you

216
00:14:17.910 --> 00:14:19.090
get to five point five.

217
00:14:19.110 --> 00:14:20.320
Then you round up, right?

218
00:14:20.700 --> 00:14:23.820
And that's pretty much what this is doing right here.

219
00:14:24.090 --> 00:14:27.720
So from 5.0, two and four, we go down.

220
00:14:27.720 --> 00:14:34.030
But once we get to the halfway point, which is five point five, now we start rounding up, right?

221
00:14:34.060 --> 00:14:36.480
That's the fourth one one two three fourth one.

222
00:14:36.480 --> 00:14:37.890
It rounds up to six.

223
00:14:37.890 --> 00:14:39.830
And so that's that's what it's doing.

224
00:14:39.840 --> 00:14:43.530
I don't think any more explanation is needed beyond this.

225
00:14:44.580 --> 00:14:44.910
All right.

226
00:14:44.910 --> 00:14:47.340
And then we've got a square root function as well.

227
00:14:47.340 --> 00:14:48.920
So we had the power function.

228
00:14:48.930 --> 00:14:50.360
We have a square root function.

229
00:14:50.370 --> 00:14:53.910
So let's do something like the square root of 81.

230
00:14:55.260 --> 00:14:55.800
There you go.

231
00:14:55.950 --> 00:14:56.760
It's nine.

232
00:14:57.360 --> 00:14:57.750
OK.

233
00:14:57.810 --> 00:14:59.700
So just like a calculator?

234
00:15:00.210 --> 00:15:00.510
All right.

235
00:15:00.540 --> 00:15:06.810
And then finally, I'm going to show you that there are a couple of math constants on the math function,

236
00:15:06.810 --> 00:15:09.090
as on on the math class as well.

237
00:15:09.090 --> 00:15:13.230
And those two constants are math dot pi.

238
00:15:13.410 --> 00:15:18.210
So the number PI, I don't know how many places this is, and I'm not going to count them, but there's

239
00:15:18.210 --> 00:15:18.690
PI.

240
00:15:18.930 --> 00:15:25.260
So sometimes you're doing trig or you're wanting to calculate the area of a circle or a cylinder or

241
00:15:25.260 --> 00:15:31.140
something like that, and you need PI rather than having to go, look it up and then type it into a

242
00:15:31.140 --> 00:15:33.270
variable as a constant somewhere.

243
00:15:33.480 --> 00:15:36.240
They give you PI in the math class.

244
00:15:36.240 --> 00:15:37.260
So there's PI.

245
00:15:37.620 --> 00:15:44.220
And then the other number that you get as a constant is E, which is Euler's number 2.7, whatever.

246
00:15:44.670 --> 00:15:47.520
So another very useful math constant.

247
00:15:48.570 --> 00:15:52.590
And I think this is pretty much going to wrap up what we're going to learn in math.

248
00:15:52.680 --> 00:15:58.150
I would encourage you, though, to open up your if you weren't following along with me, go to your

249
00:15:58.150 --> 00:16:00.350
I.D. and do what I'm doing here.

250
00:16:00.360 --> 00:16:05.610
Just type in math and then a period and then just look through all the functions because I did not cover

251
00:16:05.610 --> 00:16:06.300
all of them.

252
00:16:06.540 --> 00:16:12.810
There are so many mathematical functions on the math class that I have never used myself.

253
00:16:12.840 --> 00:16:13.260
OK?

254
00:16:13.590 --> 00:16:18.120
And by the way, you may have seen me do this a little bit, but I may not have explicitly called it

255
00:16:18.120 --> 00:16:18.360
out.

256
00:16:18.600 --> 00:16:24.870
If you want to understand more about anything, any function, not just on the math class, but anywhere

257
00:16:25.140 --> 00:16:33.330
but anywhere at all type math dot and then you can scroll through and look for functions that you might

258
00:16:33.330 --> 00:16:35.730
want to use or that you're just curious about.

259
00:16:35.940 --> 00:16:37.590
And then you can select one.

260
00:16:38.310 --> 00:16:38.600
OK.

261
00:16:38.640 --> 00:16:39.240
Like so.

262
00:16:39.360 --> 00:16:48.090
And then if you put your cursor anywhere on the name of that method and hit the F1 key or control Q

263
00:16:48.090 --> 00:16:51.840
on Windows and Linux, you'll get a little documentation for that.

264
00:16:52.200 --> 00:16:57.510
Now here I need to pick which overloaded version of the same function I want.

265
00:16:57.540 --> 00:17:00.240
There's one that takes a floating and there's one that takes a double.

266
00:17:00.420 --> 00:17:01.950
So I'll take the float one.

267
00:17:02.130 --> 00:17:07.350
And now when I click on that, I get a little bit of documentation about that function so that I or

268
00:17:07.530 --> 00:17:07.860
that.

269
00:17:08.100 --> 00:17:13.200
Well, now you hearing me calling these functions because now we're talking about math functions, but

270
00:17:13.200 --> 00:17:16.230
technically they are methods in Java still.

271
00:17:16.590 --> 00:17:16.890
All right.

272
00:17:16.890 --> 00:17:22.890
So and then you can read here a little description of what this particular method or function is doing

273
00:17:22.980 --> 00:17:27.300
returns the unbiased exponent used in the representation of a float.

274
00:17:27.540 --> 00:17:27.900
OK.

275
00:17:28.230 --> 00:17:28.830
All right.

276
00:17:28.860 --> 00:17:35.400
That's going to wrap up our whirlwind tour of the math functions.
