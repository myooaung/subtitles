1
00:00:01,100 --> 00:00:09,140
Welcome back in this lesson, we're going to learn about something called class member visibility that

2
00:00:09,140 --> 00:00:13,100
might sound kind of complicated, but it's actually a pretty simple concept.

3
00:00:13,340 --> 00:00:18,440
So in order to learn about this concept, we first need to define what is a class member.

4
00:00:18,950 --> 00:00:26,300
So if we go back to our person class first, I will point out what the class members are here, and

5
00:00:26,300 --> 00:00:29,480
then we'll have a look at the concept in another way.

6
00:00:29,810 --> 00:00:32,120
So here we have our class person.

7
00:00:33,190 --> 00:00:39,250
And the person class has a number of items that are directly contained within it.

8
00:00:39,340 --> 00:00:46,600
This variable here middle name that is a class member because it is an item that is directly underneath

9
00:00:46,600 --> 00:00:47,320
the class.

10
00:00:47,500 --> 00:00:49,160
So is this method?

11
00:00:49,180 --> 00:00:55,090
Say hello and say something and get middle initial and add.

12
00:00:55,120 --> 00:01:06,400
So really, a class member is really just any item, especially a variable or a method that is directly

13
00:01:06,430 --> 00:01:08,280
underneath the class.

14
00:01:08,290 --> 00:01:16,570
And when we refer to class member visibility, all we're really talking about is the accessibility of

15
00:01:16,570 --> 00:01:25,390
those members based on the keywords of private or public or protected or no keyword at all, which also

16
00:01:25,390 --> 00:01:27,490
means something in terms of access.

17
00:01:28,390 --> 00:01:28,770
OK.

18
00:01:29,110 --> 00:01:31,060
So let's take a look at this in another way.

19
00:01:31,480 --> 00:01:40,360
I have prepared a graphical representation of classes, packages, methods, et cetera.

20
00:01:41,530 --> 00:01:49,510
So here we have two different packages, this default package has one class in it, which just has a

21
00:01:49,510 --> 00:01:51,010
generic name of class.

22
00:01:51,610 --> 00:01:57,220
And then over here we've got another package called Carm that example dot model.

23
00:01:57,760 --> 00:02:04,450
And in it, it has multiple classes, but this largest class here is labeled person.

24
00:02:05,500 --> 00:02:14,350
And then within sight of this person class, we have several methods do stuff speak, get age, greet

25
00:02:14,650 --> 00:02:21,520
plus a constructor turned to the side, and then we also have some variables in particular this one

26
00:02:21,520 --> 00:02:24,160
labeled name and another one labeled Dobby.

27
00:02:24,160 --> 00:02:27,550
And then there's one off to the side that looks a little weird, called greeting.

28
00:02:28,030 --> 00:02:29,920
In fact, they'll zoom in a bit.

29
00:02:30,430 --> 00:02:30,880
There we go.

30
00:02:31,120 --> 00:02:31,510
OK.

31
00:02:31,930 --> 00:02:40,570
So in this person class, the class members would be these variables named job in greeting, as well

32
00:02:40,570 --> 00:02:47,020
as the methods such as do stuff, speak at age, etc. Those would be the class members.

33
00:02:47,380 --> 00:02:52,330
Now some of these methods, such as speak, have variables.

34
00:02:52,330 --> 00:02:57,010
And by the way, I'm representing variables in this diagram as hexagons.

35
00:02:57,490 --> 00:03:00,400
OK, so let me zoom in a bit more here.

36
00:03:00,850 --> 00:03:04,210
Some of these methods have variables inside of them as well.

37
00:03:04,420 --> 00:03:11,110
These variables inside of the methods are not class members because they are not directly underneath

38
00:03:11,110 --> 00:03:11,920
the class.

39
00:03:12,160 --> 00:03:12,610
OK.

40
00:03:12,790 --> 00:03:13,120
All right.

41
00:03:13,130 --> 00:03:17,470
So let's talk about the significance of the color coding here.

42
00:03:18,100 --> 00:03:25,690
What I'm doing here is simply color coding, the different items within a class so that I can convey

43
00:03:25,690 --> 00:03:30,550
what level of accessibility or visibility the items have.

44
00:03:31,000 --> 00:03:35,710
So we'll start with the simplest one, which is green in this diagram.

45
00:03:35,710 --> 00:03:43,990
Green means public, and we already discussed in a previous lesson the visibility rules for classes.

46
00:03:44,140 --> 00:03:50,380
But as you can see here, I have the person class itself in green, which means that it is a public

47
00:03:50,380 --> 00:03:55,390
class and that means it can be seen from everywhere.

48
00:03:55,540 --> 00:04:00,400
So if we were to jump over here to this, in fact, let me zoom out a little.

49
00:04:00,850 --> 00:04:07,960
So if we were to jump over here to this generic class, which is in a different package, in fact,

50
00:04:07,960 --> 00:04:11,020
it's in the default package, but that is still a package.

51
00:04:11,230 --> 00:04:20,200
Any code within this generic class would be able to access the person class because the person class

52
00:04:20,200 --> 00:04:20,920
is public.

53
00:04:21,130 --> 00:04:23,140
OK, so that's kind of a little review.

54
00:04:23,500 --> 00:04:30,340
What we want to focus on here, though, is the rules for visibility of the class members themselves.

55
00:04:30,580 --> 00:04:35,470
And so we will continue with the conversation of the meaning of public.

56
00:04:35,920 --> 00:04:42,550
And we will apply it first to some of the public methods that are on the person class.

57
00:04:42,850 --> 00:04:47,890
And this won't be a real long discussion at all as far as public methods, because it's pretty simple.

58
00:04:48,430 --> 00:04:56,110
Any method that is public can be accessed from anywhere as long as its class is accessible.

59
00:04:56,770 --> 00:05:02,950
Now notice I didn't say as long as its class is public because there are ways that a class can be accessible

60
00:05:03,160 --> 00:05:06,340
from outside of itself without being public.

61
00:05:06,460 --> 00:05:16,270
But as long as the method is public, it can be accessed from anywhere that its class is accessible.

62
00:05:17,420 --> 00:05:28,340
So in this diagram code that is over here in this generic class would be able to access any of these

63
00:05:28,340 --> 00:05:29,990
green methods.

64
00:05:30,440 --> 00:05:36,440
And we have two green methods the constructor and the speak method.

65
00:05:36,800 --> 00:05:42,680
So let's just review a little example of what that might look like in code.

66
00:05:42,950 --> 00:05:48,740
So if we go back over to the ADC and I'm going to open up the Project Explorer.

67
00:05:49,780 --> 00:05:56,260
And I'm going to just create two packages, and I'm going to give them very generic names.

68
00:05:57,960 --> 00:06:03,090
OK, so package one, I'm going to call it package one.

69
00:06:04,100 --> 00:06:06,500
And then I'm going to create another package.

70
00:06:09,730 --> 00:06:11,890
And I will call this one package, too.

71
00:06:12,700 --> 00:06:17,530
And then I'm going to create two classes, one in each package.

72
00:06:19,940 --> 00:06:21,020
Class A.

73
00:06:25,120 --> 00:06:29,350
And I will create another class and package to.

74
00:06:30,630 --> 00:06:31,950
Class B.

75
00:06:33,590 --> 00:06:34,130
All right.

76
00:06:35,040 --> 00:06:41,460
And so let's see here in Class B, let's just create a very simple method.

77
00:06:43,030 --> 00:06:44,920
And we're going to make it public.

78
00:06:46,290 --> 00:06:54,390
And I'll let it be void, and I'm going to call this method public method.

79
00:06:55,110 --> 00:06:58,170
It will take no inputs and it will return no output.

80
00:06:59,510 --> 00:07:02,900
And this method can just print something to the screen.

81
00:07:04,230 --> 00:07:05,460
This is.

82
00:07:06,680 --> 00:07:09,380
A public method.

83
00:07:11,470 --> 00:07:11,950
All right.

84
00:07:12,520 --> 00:07:13,840
So that's in Class B.

85
00:07:14,620 --> 00:07:23,950
So now if we jump over to Class A, let's write a little code where we're going to access the method

86
00:07:23,950 --> 00:07:24,910
in Class B.

87
00:07:25,150 --> 00:07:30,160
So I will create a public static void main method so that I can actually run this thing.

88
00:07:30,310 --> 00:07:34,270
And what we'll do is we'll create an instance of Class B.

89
00:07:36,990 --> 00:07:38,760
We'll call it Class B.

90
00:07:42,480 --> 00:07:42,900
OK.

91
00:07:43,500 --> 00:07:51,840
And please note that when I reference Class B, I allowed the ID e to automatically import it from Package

92
00:07:51,840 --> 00:07:59,880
two, if you may recall classes that are in packages other than the where you're coding have to be imported.

93
00:08:00,120 --> 00:08:04,980
So I'm coding in Class A, which lives in Package one.

94
00:08:05,370 --> 00:08:13,620
And so if I want Class eight to be able to access Class B or use anything from Class B, I must first

95
00:08:13,620 --> 00:08:17,340
import Class B, but I allowed the ID e to do that for me.

96
00:08:18,840 --> 00:08:20,640
Don't worry, we'll do plenty more of this.

97
00:08:20,790 --> 00:08:22,770
If you didn't quite track all of that.

98
00:08:23,130 --> 00:08:23,580
All right.

99
00:08:23,580 --> 00:08:32,670
So now we have an instance of Class B because we've created a new instance of Class B from package to.

100
00:08:33,780 --> 00:08:40,200
And we're storing that new instance, or we're referencing that new instance inside of this variable,

101
00:08:40,200 --> 00:08:43,290
which I am calling Class B with a lowercase C.

102
00:08:44,220 --> 00:08:51,870
And so now, because there is a public method on Class B, we should be able to call it Class B dot

103
00:08:52,470 --> 00:08:53,430
public method.

104
00:08:54,520 --> 00:08:55,090
There we go.

105
00:08:55,690 --> 00:08:59,500
And if we run this, let's see what we get.

106
00:09:01,570 --> 00:09:02,350
OK, great.

107
00:09:02,560 --> 00:09:05,000
This is a public method, actually.

108
00:09:05,020 --> 00:09:06,760
Let's make this a little clearer.

109
00:09:07,000 --> 00:09:10,720
If we jump over here to this method, let's even say this is.

110
00:09:12,560 --> 00:09:15,500
This is the public method.

111
00:09:17,270 --> 00:09:19,250
Of Class B.

112
00:09:20,810 --> 00:09:23,420
And maybe I shouldn't have a space there, Class B.

113
00:09:23,960 --> 00:09:24,350
All right.

114
00:09:24,980 --> 00:09:28,330
And then we'll jump back over here to Class AA and A..

115
00:09:28,400 --> 00:09:29,690
I'll run that one more time.

116
00:09:30,980 --> 00:09:31,340
Great.

117
00:09:31,940 --> 00:09:39,230
This is the public method of Class B, so we can see that class is able to run a public method on Class

118
00:09:39,230 --> 00:09:39,560
B.

119
00:09:40,280 --> 00:09:40,590
All right.

120
00:09:40,610 --> 00:09:48,410
So let's jump back over to Class B and now let's introduce probably the next easiest level of visibility

121
00:09:48,410 --> 00:09:50,700
to understand, and that would be private.

122
00:09:51,110 --> 00:09:55,130
So we'll make a private message now public.

123
00:09:56,290 --> 00:09:59,380
Void, private method.

124
00:10:01,150 --> 00:10:03,550
And we'll make this output something as well.

125
00:10:04,570 --> 00:10:11,200
This is the private method of Class B, OK?

126
00:10:11,500 --> 00:10:17,260
Now one thing this is supposed to be a private method, so we need to go to this keyword here and make

127
00:10:17,260 --> 00:10:18,640
it private.

128
00:10:19,900 --> 00:10:20,410
All right.

129
00:10:20,590 --> 00:10:22,420
So now we have a private method.

130
00:10:22,780 --> 00:10:25,780
OK, so then if we jump back over to Class A.

131
00:10:26,800 --> 00:10:32,800
And we try to call the private method on Class B, let's see what happens.

132
00:10:33,370 --> 00:10:37,240
Class B Dot where is it?

133
00:10:37,450 --> 00:10:38,920
Well, it's not even showing up.

134
00:10:39,250 --> 00:10:40,940
Private method.

135
00:10:41,020 --> 00:10:45,970
All right, that's what it should be called, but it's not even showing up for us because it's private.

136
00:10:46,300 --> 00:10:53,890
So the idea isn't even bothering to let us try this if I want to bulldoze my way through the private

137
00:10:53,890 --> 00:10:54,610
method.

138
00:10:56,180 --> 00:10:57,470
And type it anyway.

139
00:10:57,650 --> 00:11:02,810
The idea is going to warn me and I get all kinds of this, so it's just really not happy with me even

140
00:11:02,810 --> 00:11:03,650
trying to go there.

141
00:11:04,520 --> 00:11:06,980
Let's see what happens if I try to run this anyway.

142
00:11:08,500 --> 00:11:16,630
OK, I get an error in the error private method has private access in package to that Class B, so yeah,

143
00:11:16,990 --> 00:11:21,910
just nothing's going to let me access this method or run it.

144
00:11:22,750 --> 00:11:29,260
So if we go back over to our diagram, I'll just try to show a little bit of what that might look like.

145
00:11:29,260 --> 00:11:35,890
So if this class over here in the default package was Class A, just, you know, some class in a different

146
00:11:35,890 --> 00:11:45,520
package and then this class over here was Class B, this red structure here, this red method, that

147
00:11:45,520 --> 00:11:47,520
would be our private method.

148
00:11:47,530 --> 00:11:56,080
And so what we're seeing is that code over here in Class A, if you imagine this is class is not able

149
00:11:56,110 --> 00:12:03,370
to see or access a private method in a different class, in a different package.

150
00:12:03,880 --> 00:12:04,330
OK.

151
00:12:05,770 --> 00:12:06,130
All right.

152
00:12:06,160 --> 00:12:07,780
Let's jump back over to the code.

153
00:12:08,050 --> 00:12:13,620
So I'm going to go ahead and I'm going to comment that out, and I did that with a command forward slash,

154
00:12:13,630 --> 00:12:14,170
by the way.

155
00:12:14,500 --> 00:12:19,990
And let's let's see what else we can and cannot do with a private method.

156
00:12:20,440 --> 00:12:22,750
So I'm going to go back over here to Class B.

157
00:12:22,960 --> 00:12:31,810
So now private methods can be accessed from other methods within the same class.

158
00:12:32,200 --> 00:12:43,120
And to prove that I will add another line into the public method of Class B and here I will call the

159
00:12:43,120 --> 00:12:44,920
private method and look at that.

160
00:12:44,920 --> 00:12:46,450
The ADP lets me do that.

161
00:12:46,840 --> 00:12:48,250
No problems, right?

162
00:12:48,730 --> 00:12:56,320
So this public method of Class B is more than welcome to call the private method of Class B.

163
00:12:57,480 --> 00:12:59,340
But it gets even more interesting.

164
00:13:00,420 --> 00:13:06,630
Since the public method of Class B is able to call the private method of Class B and the public method

165
00:13:06,630 --> 00:13:11,790
of Class B is able to be called from Class A.

166
00:13:12,120 --> 00:13:16,560
That should mean I'm going to go and just delete this commented thing here.

167
00:13:16,740 --> 00:13:21,210
So Class B, that public method, so what happens if we run this now?

168
00:13:21,780 --> 00:13:22,680
So let's see.

169
00:13:23,040 --> 00:13:24,400
I'm going to run class.

170
00:13:25,050 --> 00:13:25,890
Look at that.

171
00:13:26,340 --> 00:13:30,330
So now we get this is the public method of Class B.

172
00:13:30,330 --> 00:13:32,670
This is the private method of Class B.

173
00:13:33,150 --> 00:13:34,740
So what does happen there?

174
00:13:35,550 --> 00:13:42,420
Well, we created an instance of Class B, then we called the public method, which is the only method

175
00:13:42,420 --> 00:13:45,840
on Class B. that that class can actually call.

176
00:13:46,350 --> 00:13:49,710
We're calling the public method and there's no problem there.

177
00:13:50,220 --> 00:13:55,240
And then in turn, the public method prints out its first message.

178
00:13:55,260 --> 00:13:59,940
This is the public method of Class B, but then it calls the private method the the.

179
00:13:59,940 --> 00:14:06,240
The public method of Class B is calling the private method of Class B, so it's like a daisy chain,

180
00:14:06,240 --> 00:14:06,930
if you will.

181
00:14:07,110 --> 00:14:07,620
OK.

182
00:14:08,100 --> 00:14:11,880
And then the private method prints, it prints out its message.

183
00:14:12,330 --> 00:14:19,890
So this is perfectly permissible because Class A isn't calling this method directly.

184
00:14:19,890 --> 00:14:25,740
Class is only calling the public method and then the public method in turn is calling the private method.

185
00:14:25,980 --> 00:14:32,190
And this indeed is the typical pattern for use of private methods.

186
00:14:32,580 --> 00:14:39,000
Private methods can be called from other members of their own class.

187
00:14:39,240 --> 00:14:43,980
They just can't be called from outside of their own class.

188
00:14:45,110 --> 00:14:49,460
Now, you may be wondering, why would you ever want to make anything private?

189
00:14:49,820 --> 00:14:58,370
One of the reasons can be that you need to implement a lot of logic and functionality in your program

190
00:14:58,370 --> 00:15:00,860
in order to get things done.

191
00:15:01,190 --> 00:15:06,230
But that logic and functionality is not needed outside of the class.

192
00:15:06,530 --> 00:15:16,310
And so you are generally encouraged in object oriented programming to reduce the visibility and accessibility

193
00:15:16,340 --> 00:15:24,410
of class members as much as reasonably possible, so that you can protect your code from unintentional

194
00:15:24,410 --> 00:15:32,060
consequences, essentially unintended accessing and accidentally or potentially manipulating or changing

195
00:15:32,060 --> 00:15:35,480
data in ways that were possibly unforeseen.

196
00:15:35,840 --> 00:15:43,610
So really, a private method in this case could serve as a helper, if you will, to the public methods

197
00:15:43,610 --> 00:15:44,510
on the class.

198
00:15:44,960 --> 00:15:46,670
If you want to think of it that way.

199
00:15:47,270 --> 00:15:53,150
OK, so now let's introduce an additional class to package to.

200
00:15:54,870 --> 00:15:56,880
So I'm going to create another class.

201
00:15:58,520 --> 00:16:00,770
And I'm going to call this other class.

202
00:16:02,570 --> 00:16:05,210
Because sometimes I don't have much imagination.

203
00:16:06,470 --> 00:16:06,990
All right.

204
00:16:07,010 --> 00:16:19,070
And here's what I want to test now, can other class in package to access the private method of Class

205
00:16:19,070 --> 00:16:20,630
B in Package two?

206
00:16:20,640 --> 00:16:23,090
So in other words, two classes of the same package?

207
00:16:23,510 --> 00:16:26,330
Can one see the others private methods?

208
00:16:27,170 --> 00:16:28,220
Let's find out.

209
00:16:28,670 --> 00:16:35,300
So I'm going to jump over here to other class, and I will just create a simple public method.

210
00:16:39,490 --> 00:16:41,620
I will call it method one.

211
00:16:43,890 --> 00:16:44,340
All right.

212
00:16:44,580 --> 00:16:54,930
So in method one of other class of Package two, we will create an instance of Class B and we'll call

213
00:16:54,930 --> 00:17:00,040
it Class B, so we'll create that new instance just like that.

214
00:17:00,060 --> 00:17:05,610
And now let's see if we can access Class B dot.

215
00:17:07,010 --> 00:17:08,960
Private method and look at that.

216
00:17:09,110 --> 00:17:09,980
No, we cannot.

217
00:17:11,030 --> 00:17:13,220
It's not available to us.

218
00:17:13,910 --> 00:17:14,370
All right.

219
00:17:14,390 --> 00:17:18,590
So we now see that a private method here.

220
00:17:18,610 --> 00:17:29,480
Let's jump back over to Class B, so a private method can only be accessed from other members of its

221
00:17:29,480 --> 00:17:31,250
own class period.

222
00:17:31,370 --> 00:17:35,510
Now let's introduce another method to Class B.

223
00:17:35,750 --> 00:17:38,690
Let's introduce a protected method.

224
00:17:41,880 --> 00:17:44,370
Protected void.

225
00:17:45,360 --> 00:17:48,480
And we'll name this protected method.

226
00:17:50,120 --> 00:17:53,300
And then we'll say we'll have it output.

227
00:17:54,110 --> 00:18:00,590
This is the protected method of Class B.

228
00:18:01,070 --> 00:18:01,580
All right.

229
00:18:01,700 --> 00:18:10,370
So let's well, actually first, we need to clean this up in the other class because the I.D. and Java

230
00:18:10,370 --> 00:18:12,290
are not happy someone to just delete that.

231
00:18:12,950 --> 00:18:13,310
All right.

232
00:18:13,950 --> 00:18:20,090
So jumping back over to Class B, so now Class B has one public method, one private method and one

233
00:18:20,090 --> 00:18:21,500
protected method.

234
00:18:22,520 --> 00:18:28,250
So let's see if the protected method is accessible from Class A.

235
00:18:29,670 --> 00:18:32,670
So here we are in Class A of Package one.

236
00:18:34,600 --> 00:18:41,860
And let's see if we can access the protected method Class B protected method and look at that it doesn't

237
00:18:41,860 --> 00:18:42,240
show up.

238
00:18:42,250 --> 00:18:50,320
So no, we cannot access be protected method of Class B from a class in another package.

239
00:18:51,710 --> 00:18:56,540
All right, now, let's jump into the other class of package to.

240
00:18:57,910 --> 00:18:59,380
And try the same thing.

241
00:19:01,870 --> 00:19:03,880
Class B Dot.

242
00:19:04,240 --> 00:19:12,850
Oh, look at that protected method is accessible from a different class in the same package.

243
00:19:13,060 --> 00:19:18,280
OK, so we're we're kind of piecing together the rules of visibility here.

244
00:19:19,780 --> 00:19:29,950
OK, so just restating that a protected method of a class is accessible from other classes in the same

245
00:19:30,160 --> 00:19:30,970
package.

246
00:19:31,330 --> 00:19:39,070
However, it is not accessible from classes outside of that same package.

247
00:19:39,610 --> 00:19:44,350
Now why might we want that kind of capability?

248
00:19:44,890 --> 00:19:54,580
Well, to answer that, I'll jump back over to our diagram again, and let's focus a little bit on this

249
00:19:54,580 --> 00:19:56,890
combat example package here.

250
00:19:57,220 --> 00:20:03,970
So we've got this class here, person, and then we have several other classes as well.

251
00:20:04,690 --> 00:20:10,840
Now what these other classes are meant to model is not important at all for this discussion.

252
00:20:11,440 --> 00:20:21,850
But one concept that you can take away from this lesson is the idea that we can designate certain classes

253
00:20:22,060 --> 00:20:31,690
within a package to be the key classes that for that package such that other code outside of that package

254
00:20:31,900 --> 00:20:39,430
can only interact with designated classes within this combat example, that model package, for example.

255
00:20:39,790 --> 00:20:42,160
It's kind of like setting up gatekeepers.

256
00:20:42,190 --> 00:20:42,610
OK.

257
00:20:42,850 --> 00:20:49,390
So it could be a situation where there's super useful functionality in some of these other classes,

258
00:20:49,690 --> 00:20:55,990
and that functionality is very useful to this main class here in this package.

259
00:20:56,260 --> 00:21:03,730
And so this there might be code in the person class that calls a lot of different code in these other

260
00:21:03,850 --> 00:21:04,900
classes here.

261
00:21:05,410 --> 00:21:14,080
But you generally don't want these other classes being accessed from code over here.

262
00:21:14,800 --> 00:21:19,940
Outside of the combat example, that model package, for example.

263
00:21:19,960 --> 00:21:20,410
OK.

264
00:21:20,710 --> 00:21:27,400
Or to get a little more complex, maybe there are some methods on some of these classes that you do

265
00:21:27,400 --> 00:21:30,460
want to allow to be accessed, but not all of them.

266
00:21:31,090 --> 00:21:31,480
Right?

267
00:21:31,750 --> 00:21:37,450
So in that case, you might have some of these other classes being public and some of their methods

268
00:21:37,480 --> 00:21:41,110
being public, but some other methods being protected.

269
00:21:41,380 --> 00:21:48,220
And that would mean that code over here is able to call some of these green met or all of these green

270
00:21:48,220 --> 00:21:55,830
methods, but maybe not able to call the orange methods definitely not able to call the red methods

271
00:21:55,840 --> 00:21:57,070
if I zoom in here.

272
00:21:58,340 --> 00:22:02,330
Right, so we've got a red method here, we've got an orange method, a white method.

273
00:22:02,690 --> 00:22:12,110
Only the green methods might be the ones that we want to permit to be called from over here from outside

274
00:22:12,110 --> 00:22:17,720
of this package, but this class.

275
00:22:18,920 --> 00:22:22,190
Person class would be allowed to call.

276
00:22:23,720 --> 00:22:26,450
For example, this do stuff method.

277
00:22:26,540 --> 00:22:32,240
Let's assume that this orange color here, if you can see that if you're not colorblind, this orange

278
00:22:32,240 --> 00:22:37,130
method here orange orange can signify that that method is protected.

279
00:22:37,310 --> 00:22:46,850
OK, so let's say that green signifies public, orange signifies protected, red signifies private and

280
00:22:46,850 --> 00:22:47,300
white.

281
00:22:47,300 --> 00:22:48,770
I haven't introduced yet.

282
00:22:49,400 --> 00:22:52,180
All right, so let's jump back over to our I.D..

283
00:22:52,400 --> 00:22:52,850
All right.

284
00:22:53,180 --> 00:22:57,470
And again, don't worry if this isn't all completely meaningful to you.

285
00:22:57,470 --> 00:23:00,380
We will be writing so much code in this course.

286
00:23:00,380 --> 00:23:06,710
We will have other opportunities to see how these concepts can actually be used in real life.

287
00:23:07,340 --> 00:23:14,930
OK, so let's introduce one more level of visibility and that is called package protected.

288
00:23:15,850 --> 00:23:24,460
And to do that, we just don't put anything for visibility, so we'll just say void package protected.

289
00:23:27,640 --> 00:23:29,750
And we'll have this printout a message.

290
00:23:29,770 --> 00:23:35,950
This is the package protected method of Class B.

291
00:23:37,520 --> 00:23:38,000
All right.

292
00:23:38,510 --> 00:23:42,080
So let's find out what the rules are for this one.

293
00:23:43,570 --> 00:23:45,940
So let's jump back over to Class A.

294
00:23:47,470 --> 00:23:55,780
And let's see if this new package protected method is visible Class B Dot.

295
00:23:56,440 --> 00:23:56,860
Nope.

296
00:23:57,070 --> 00:23:57,880
It is not.

297
00:23:58,630 --> 00:23:59,020
All right.

298
00:23:59,030 --> 00:24:01,930
So that that keeps things actually pretty simple.

299
00:24:01,930 --> 00:24:10,270
The only thing that a class outside of the package in question can access is a public method or a public

300
00:24:10,270 --> 00:24:10,840
member.

301
00:24:11,860 --> 00:24:12,220
OK.

302
00:24:12,370 --> 00:24:13,860
So let me be careful here.

303
00:24:13,900 --> 00:24:19,930
These rules of accessibility are not only for methods, they are also for variables, and I will show

304
00:24:19,930 --> 00:24:21,280
that in just a few moments.

305
00:24:23,570 --> 00:24:24,050
All right.

306
00:24:25,290 --> 00:24:27,990
So then let's see what the other class can do.

307
00:24:29,610 --> 00:24:31,490
Class B Dot.

308
00:24:32,430 --> 00:24:40,830
OK, so a package protected method is accessible from another class in the same package.

309
00:24:41,010 --> 00:24:46,560
So then in that case, what's the difference between a protected method and a package protected method?

310
00:24:46,950 --> 00:24:54,000
Well, the only difference has to do with a concept called subclass thing, and I don't want to get

311
00:24:54,000 --> 00:24:55,830
too much into that right now.

312
00:24:55,840 --> 00:25:00,150
But if we jump over to the Hello World Program.

313
00:25:01,090 --> 00:25:05,020
And I opened up the project thinking here.

314
00:25:08,060 --> 00:25:11,840
I want to refresh your memory on one thing.

315
00:25:12,350 --> 00:25:19,400
Over here, we modeled several concepts, we modeled addresses in cats and dogs and persons and pets.

316
00:25:19,790 --> 00:25:30,800
If you recall, the classes for cat and dog actually extended a higher level concept of pet.

317
00:25:32,540 --> 00:25:42,500
And by doing so, the class for cat and dog became subclasses of the pet class.

318
00:25:43,160 --> 00:25:51,410
So there are special rules for the visibility of methods within subclasses.

319
00:25:52,100 --> 00:25:53,060
In other words?

320
00:25:54,180 --> 00:26:04,740
I could decide to make certain methods of this parent class of pet visible or accessible to its subclasses

321
00:26:04,740 --> 00:26:05,670
or not.

322
00:26:06,210 --> 00:26:12,180
This also has to do with whether or not the subclasses are in the same package.

323
00:26:12,780 --> 00:26:17,610
If the subclasses are within the same package, they're going to be able to see everything other than

324
00:26:17,610 --> 00:26:18,720
private methods.

325
00:26:19,740 --> 00:26:24,930
OK, so let's actually see a quick example of this because it's not too difficult.

326
00:26:25,170 --> 00:26:29,190
So I'm going to introduce a throwaway method here.

327
00:26:29,190 --> 00:26:31,160
Just a little example method.

328
00:26:31,170 --> 00:26:33,120
And let's see, we will.

329
00:26:33,360 --> 00:26:37,500
In fact, I will introduce two methods I will introduce one that is protected.

330
00:26:42,310 --> 00:26:45,340
And we'll call it protected method.

331
00:26:46,800 --> 00:26:48,480
And we'll have it print out.

332
00:26:49,470 --> 00:26:50,490
This is.

333
00:26:51,450 --> 00:26:52,020
The.

334
00:26:52,950 --> 00:26:56,010
Protected method of PET.

335
00:26:56,880 --> 00:27:03,540
And then I'll make another method that will just be package protected so I won't put any visibility

336
00:27:03,540 --> 00:27:05,100
keyword here void.

337
00:27:06,370 --> 00:27:08,290
Package protected.

338
00:27:13,130 --> 00:27:19,520
This is the package protected method of PET.

339
00:27:21,310 --> 00:27:21,760
All right.

340
00:27:23,170 --> 00:27:23,650
Now.

341
00:27:24,830 --> 00:27:28,640
I'm going to create another package.

342
00:27:33,890 --> 00:27:37,130
And I'm going to call this specific.

343
00:27:38,590 --> 00:27:39,970
That animals.

344
00:27:41,370 --> 00:27:45,070
It's not a great package name, by the way, but it will suffice.

345
00:27:45,100 --> 00:27:46,800
OK, specific animals.

346
00:27:47,190 --> 00:27:54,120
And then I'm going to take cat and dog and I'm going to move them into specific animals package.

347
00:27:57,580 --> 00:27:58,000
All right.

348
00:27:58,240 --> 00:28:02,350
So now if I open up specific animals and jump in here.

349
00:28:04,040 --> 00:28:11,390
Let's see if those other methods that we just added to pet are accessible here.

350
00:28:12,610 --> 00:28:21,610
And way I will do that is I'll just jump in here into this existing method and let's see if we can call

351
00:28:22,150 --> 00:28:23,560
either of those other methods.

352
00:28:24,010 --> 00:28:31,840
So the way that we can refer to methods that are on this parent class with this super class is by using

353
00:28:31,870 --> 00:28:36,100
a special keyword of Java called super.

354
00:28:37,030 --> 00:28:46,870
Super lets us access whatever may be on the parent class or parent hierarchy so I can type super and

355
00:28:46,870 --> 00:28:53,470
then dot, and now I can see what methods are available to me from up above, right?

356
00:28:53,510 --> 00:28:55,810
Because Cat extends pet.

357
00:28:56,020 --> 00:28:59,050
So these are the methods that are on the pet class.

358
00:29:00,500 --> 00:29:05,000
And indeed, I do see that there's the protected method there.

359
00:29:05,490 --> 00:29:07,070
Do we also have the package?

360
00:29:07,940 --> 00:29:12,740
No, but we don't have the the the package protected method.

361
00:29:13,040 --> 00:29:17,420
And I can double check that by trying to type a little bit of that method name.

362
00:29:17,420 --> 00:29:23,780
And no, it doesn't give me that, but I can get to the protected method.

363
00:29:24,350 --> 00:29:26,090
So that's kind of interesting.

364
00:29:26,220 --> 00:29:29,360
OK, so I can call the protected method.

365
00:29:30,080 --> 00:29:35,750
And if you'll recall, in fact, here you don't have to recall it will jump back over to the other project.

366
00:29:35,750 --> 00:29:44,030
And we will recall together that we had class say and package one in Class B and Package two and in

367
00:29:44,030 --> 00:29:45,260
Class A.

368
00:29:45,560 --> 00:29:52,970
If we tried to access the protected method of Class B, which is in a different package, we weren't

369
00:29:52,970 --> 00:29:53,620
able to do it.

370
00:29:53,630 --> 00:29:55,100
I'll just show that again.

371
00:29:55,100 --> 00:29:56,330
Class B that.

372
00:29:57,450 --> 00:30:00,080
No, no protected methods.

373
00:30:01,480 --> 00:30:10,150
Are accessible here, and that's because Class A does not extend Class B and Class C is also not in

374
00:30:10,150 --> 00:30:12,520
the same package as Class B.

375
00:30:13,920 --> 00:30:14,370
OK.

376
00:30:16,210 --> 00:30:19,810
But over here in the Hello World project.

377
00:30:21,530 --> 00:30:32,210
Cat is able to access protected methods of the pet class, even while Cat is in a different package

378
00:30:32,210 --> 00:30:33,170
from PET.

379
00:30:33,680 --> 00:30:42,680
And the reason Cat is able to access the protected method of PET is because it extends pet.

380
00:30:42,830 --> 00:30:48,890
And that's what the protected methods allow for, however.

381
00:30:49,780 --> 00:30:51,100
If we jump over here to pet.

382
00:30:52,270 --> 00:30:59,290
Pat also has a package protected method, and that method is not accessible.

383
00:31:00,520 --> 00:31:02,830
To the cat class.

384
00:31:03,830 --> 00:31:11,600
Now I'm going to create one more animal that extends Pet, but I'm going to put that animal in the model

385
00:31:11,630 --> 00:31:17,240
package, so it'll be in the same package with Pet, so I'll create another animal.

386
00:31:17,660 --> 00:31:18,740
I don't know Turtle.

387
00:31:20,220 --> 00:31:20,880
Turtle.

388
00:31:22,220 --> 00:31:24,710
Turtle extends pet.

389
00:31:26,240 --> 00:31:26,720
All right.

390
00:31:28,030 --> 00:31:28,900
Let's create a.

391
00:31:30,750 --> 00:31:33,780
A method that is unique to Turtle.

392
00:31:35,260 --> 00:31:36,490
It will be turned void.

393
00:31:37,540 --> 00:31:42,130
I'm going to create a hide method, as in, you know, the turtle can hide in its shell.

394
00:31:43,410 --> 00:31:43,830
OK.

395
00:31:44,190 --> 00:31:51,960
So Turtle has a hide method, and now we want Turtle to be able to access the well, we want to see

396
00:31:51,960 --> 00:31:56,430
what methods off of pet can we access from within the turtle?

397
00:31:56,440 --> 00:31:59,580
So again, we'll call Super Dot.

398
00:32:00,590 --> 00:32:02,750
And now look at what we have access to.

399
00:32:02,780 --> 00:32:08,900
We now have access to both the package protected and the protected methods.

400
00:32:09,940 --> 00:32:11,120
So we can do either.

401
00:32:11,140 --> 00:32:14,170
In fact, I'll go ahead and call both Super Dot.

402
00:32:16,950 --> 00:32:17,760
So there we go.

403
00:32:17,880 --> 00:32:28,950
We can access both of those methods from the turtle class because not only turtle extends pet, which

404
00:32:28,950 --> 00:32:34,740
is one of the reasons why it's able to get to the protected method, but it's also in the same package

405
00:32:34,740 --> 00:32:41,430
as PET, and therefore it has access to the package protected method as well.

406
00:32:42,060 --> 00:32:46,890
So again, don't feel too bad if you don't feel like you're quite getting this.

407
00:32:46,900 --> 00:32:52,020
I'm a big believer in repetition to really start to get the hang of things.

408
00:32:52,260 --> 00:32:57,690
So this will just be the first time I'm mentioning this concept, but we'll review it again when we

409
00:32:57,690 --> 00:33:00,710
learn more specifically about class hierarchy.

410
00:33:00,720 --> 00:33:01,770
So don't worry about it.

411
00:33:01,980 --> 00:33:09,030
Just kind of take in what you can, and we'll get to the class hierarchy section and we'll go into this

412
00:33:09,030 --> 00:33:10,920
some more and we'll see more examples.
