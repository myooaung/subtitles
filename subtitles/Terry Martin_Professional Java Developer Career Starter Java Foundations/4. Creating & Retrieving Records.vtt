WEBVTT
1
00:00:00.240 --> 00:00:04.800
All right, so picking up from where we left off, let's create a few more records.

2
00:00:05.580 --> 00:00:12.900
So we created this one person here so we can actually reuse this line here and just change the values

3
00:00:12.900 --> 00:00:15.480
in it to create additional people.

4
00:00:15.980 --> 00:00:18.960
We're not going to make a whole lot of people here, but let's just make a few.

5
00:00:19.260 --> 00:00:22.740
So let's make a few people in one family with the same surname.

6
00:00:22.770 --> 00:00:24.150
Okay, so we've got Harry.

7
00:00:24.690 --> 00:00:27.180
Let's create a jack.

8
00:00:27.960 --> 00:00:29.520
And I don't know.

9
00:00:29.520 --> 00:00:35.670
Let's say that Jack was born in 2000 and.

10
00:00:37.350 --> 00:00:38.460
Jan?

11
00:00:39.620 --> 00:00:44.600

12
10:00 at 8:45.

13
00:00:45.110 --> 00:00:48.710
And Jack makes.

14
00:00:49.810 --> 00:00:51.100
50000.

15
00:00:52.230 --> 00:00:52.560
All right.

16
00:00:52.590 --> 00:00:58.830
And so to create that record, all I need to do now is just do a controlled return or I can click that

17
00:00:58.830 --> 00:01:01.680
little button there, someone to do a control return.

18
00:01:02.430 --> 00:01:02.820
All right.

19
00:01:02.820 --> 00:01:06.570
And then down here, I see that that was successfully inserted.

20
00:01:07.140 --> 00:01:08.940
And let's create a few more.

21
00:01:09.900 --> 00:01:10.860
So we've got Jack.

22
00:01:10.860 --> 00:01:14.340
Let's create a Mary Johnson.

23
00:01:15.730 --> 00:01:21.370
And two thousand three and five.

24
00:01:22.720 --> 00:01:23.800
Thirteen.

25
00:01:24.810 --> 00:01:27.180
And 17.

26
00:01:28.320 --> 00:01:31.830
30 and you can put in whatever values you want here, this doesn't matter.

27
00:01:32.490 --> 00:01:35.430
And Mary kind of young, right?

28
00:01:35.440 --> 00:01:37.440
So let's say that Mary makes.

29
00:01:37.590 --> 00:01:45.120
So I don't know, 2000 bucks per year and let's enter her.

30
00:01:46.170 --> 00:01:46.740
All right.

31
00:01:47.070 --> 00:01:53.310
And let's get a mom in here, Susan Johnson born.

32
00:01:55.230 --> 00:01:59.160
Born in 1951.

33
00:02:02.820 --> 00:02:03.840
October.

34
00:02:05.660 --> 00:02:11.120
Thirty four, so she's kind of spooky and 19.

35
00:02:13.190 --> 00:02:14.240
Thirteen.

36
00:02:19.010 --> 00:02:21.260
And mom makes.

37
00:02:21.530 --> 00:02:25.670
Let's give mom a big salary, 200000 bucks.

38
00:02:26.120 --> 00:02:26.570
All right.

39
00:02:27.080 --> 00:02:28.160
Unless into her.

40
00:02:29.670 --> 00:02:33.440
OK, and then let's get one person who's not in the family.

41
00:02:34.680 --> 00:02:37.530
Just we have an oddball here, Jake.

42
00:02:42.040 --> 00:02:42.850
Smith.

43
00:02:44.420 --> 00:02:49.640
Jake is born 1970, and I don't care about the rest of that.

44
00:02:49.940 --> 00:02:50.210
All right.

45
00:02:50.300 --> 00:02:51.500
Let's enter Jake.

46
00:02:53.180 --> 00:02:58.040
And let's see, and Jake's salary is.

47
00:03:00.760 --> 00:03:04.480
75000, let's enter, Jake.

48
00:03:06.060 --> 00:03:06.660
All right.

49
00:03:06.930 --> 00:03:11.370
So now let's see if we've actually got all of these people, so I'm moving my cursor down here to the

50
00:03:11.370 --> 00:03:17.070
select star from People line, and I'm just going to do a control return to run that line.

51
00:03:17.610 --> 00:03:23.280
And now we've got five people in the database Harry, Jack, Mary, Susan and Jake, right?

52
00:03:23.640 --> 00:03:28.230
So they're all here with all their different salaries and different dates of birth and all that good

53
00:03:28.230 --> 00:03:28.710
stuff.

54
00:03:29.100 --> 00:03:33.210
So now we have enough data that we can actually do a little bit of playing around with some more of

55
00:03:33.210 --> 00:03:36.870
the capabilities of sequel and the database.

56
00:03:37.530 --> 00:03:44.310
So the first thing I want to look at with you is a little bit more about this select statement here.

57
00:03:44.580 --> 00:03:51.990
So as you can already see, this allows us to query the database for data that's in it, starting with

58
00:03:51.990 --> 00:03:53.280
the table here.

59
00:03:53.310 --> 00:03:59.850
Obviously, we're able to tell the database what table we want to query data from.

60
00:03:59.910 --> 00:04:02.310
So in this case, it's the people table.

61
00:04:02.640 --> 00:04:06.900
We could create additional tables here and we could query data from them.

62
00:04:07.050 --> 00:04:14.460
We could even query data from multiple tables at the same time, especially if there is any data that

63
00:04:14.460 --> 00:04:17.940
is in common between two or more tables.

64
00:04:18.390 --> 00:04:28.530
And this star here, or asterisk, indicates that we want to return all of the columns from that table,

65
00:04:28.830 --> 00:04:30.360
but we don't have to do this.

66
00:04:30.480 --> 00:04:34.770
We could actually specify specific columns that we're interested in.

67
00:04:34.980 --> 00:04:42.810
So if I put my cursor here and specify first name and then execute that line.

68
00:04:44.090 --> 00:04:49.340
We only get back the first names, so obviously we could do last name or whatever.

69
00:04:49.460 --> 00:04:57.650
We could also query for any number of columns, so maybe I want first name, comma, last name and I'll

70
00:04:57.650 --> 00:04:58.550
execute that.

71
00:04:59.060 --> 00:04:59.390
All right.

72
00:04:59.390 --> 00:05:01.910
And so now we get back those two columns, right?

73
00:05:02.780 --> 00:05:09.020
So you can get back any number of columns you want or you can get back all of the columns.

74
00:05:09.170 --> 00:05:16.340
It is often said that it can be more efficient to be explicit with what columns you want rather than

75
00:05:16.340 --> 00:05:17.600
using asterisk.

76
00:05:17.870 --> 00:05:23.540
I think a big part of that has to simply do with the fact that in a lot of professional databases,

77
00:05:23.540 --> 00:05:27.920
there are a lot of columns, and why would you bring back more data than you actually needed?

78
00:05:28.670 --> 00:05:35.540
So in addition to these capabilities, we can also filter just like we did with the Streams API.

79
00:05:35.600 --> 00:05:42.920
Now this is actually one of the interesting differences between some of the capabilities of Java versus

80
00:05:42.950 --> 00:05:43.650
sequel.

81
00:05:43.670 --> 00:05:52.400
And what I mean by that is, by default, there isn't a great equivalent in Java to our ability in school

82
00:05:52.640 --> 00:05:56.870
to specify individual columns that we want to get back.

83
00:05:56.900 --> 00:06:04.130
So imagine if we created a bunch of people objects in Java and put them into an array list, and we

84
00:06:04.130 --> 00:06:07.100
treated the array list sort of like a database here.

85
00:06:07.610 --> 00:06:09.320
And then we said.

86
00:06:10.450 --> 00:06:17.860
Give me back just the first name and last name of all of these people from that array list, like maybe

87
00:06:17.860 --> 00:06:20.320
using the Streams API or something like that.

88
00:06:20.860 --> 00:06:29.980
There's not a real great natural Java way to do that because Java being an object oriented language.

89
00:06:30.310 --> 00:06:35.220
It really wants to operate at the object level or the class level, right?

90
00:06:35.230 --> 00:06:38.290
So you could get back entire objects.

91
00:06:38.560 --> 00:06:45.440
But first name and last name are just components of the person or people object, right?

92
00:06:45.460 --> 00:06:46.900
It's not the entire class.

93
00:06:47.290 --> 00:06:54.190
And so that can sometimes lead to a bit of a mismatch when we want to translate between data that we're

94
00:06:54.190 --> 00:06:58.990
getting from a database versus data that we're pulling in to Java.

95
00:06:59.200 --> 00:07:01.180
So keep that mismatch in mind.

96
00:07:01.180 --> 00:07:09.250
We might we might revisit this concept later now, just as we were able to filter objects with the Streams

97
00:07:09.250 --> 00:07:10.720
API in Java.

98
00:07:10.900 --> 00:07:14.530
We can filter records with sequel as well.

99
00:07:14.860 --> 00:07:17.710
And it's pretty simple to do in a number of ways.

100
00:07:18.070 --> 00:07:27.970
So first off, let's just filter this data set to only give us the people whose last name is Johnson,

101
00:07:27.980 --> 00:07:28.360
right?

102
00:07:28.540 --> 00:07:30.580
So we'll just get the people in the same family.

103
00:07:30.580 --> 00:07:34.240
So to do that, we can start off with this same query.

104
00:07:34.240 --> 00:07:36.250
Or I could change this back to a star, in fact.

105
00:07:36.250 --> 00:07:40.750
Yeah, let me, I guess for now, I will change that back to a star or asterisk.

106
00:07:41.080 --> 00:07:47.980
So select everybody from people, select everything from people and to do our filtering.

107
00:07:47.980 --> 00:07:49.930
We use the where clause.

108
00:07:50.470 --> 00:07:53.860
Where last name.

109
00:07:55.800 --> 00:08:01.080
Equals and then I just provided with a string Johnson.

110
00:08:02.400 --> 00:08:03.210
Just like that.

111
00:08:03.270 --> 00:08:04.560
So if I execute this.

112
00:08:06.020 --> 00:08:07.430
There we go now.

113
00:08:07.760 --> 00:08:12.020
I have all the Johnsons and I don't have Jake Smith.

114
00:08:12.170 --> 00:08:17.450
Now there are a whole lot of things that we could do with this where clause, and I'm not going to exhaustively

115
00:08:17.450 --> 00:08:20.780
show all of them here, but I will show a few of the key ones.

116
00:08:21.410 --> 00:08:28.340
So here we're doing a literal match on the last name field, but we could also do things like partial

117
00:08:28.340 --> 00:08:29.080
matches.

118
00:08:29.150 --> 00:08:35.930
So, for example, I could query for everybody whose last name starts with J.

119
00:08:36.950 --> 00:08:40.070
So to do that, I won't use an equals sign.

120
00:08:40.250 --> 00:08:45.980
I will now use the like method where last name is like.

121
00:08:47.360 --> 00:08:50.630
And then I can do something like J.

122
00:08:51.620 --> 00:08:55.910
Percent saying so that percent sign acts as a matter, if you will.

123
00:08:55.970 --> 00:08:58.370
OK, so let's see what this will do.

124
00:09:00.520 --> 00:09:00.830
All right.

125
00:09:00.850 --> 00:09:08.230
So that also gives us back Jonathan, and we could use that in a number of ways so I could remove the

126
00:09:08.230 --> 00:09:12.550
J and put something like ASO in.

127
00:09:13.210 --> 00:09:14.230
Let's see what that does.

128
00:09:14.770 --> 00:09:16.120
OK, so that works, too.

129
00:09:16.810 --> 00:09:18.790
How about querying for Jake?

130
00:09:19.630 --> 00:09:21.940
So his last name is Smith.

131
00:09:22.450 --> 00:09:27.220
So let's do as m percent sign.

132
00:09:27.940 --> 00:09:29.290
OK, so there's Jake.

133
00:09:29.590 --> 00:09:35.080
How about querying for people whose first names begin with Jay?

134
00:09:36.320 --> 00:09:39.020
First name like.

135
00:09:40.740 --> 00:09:42.450
Capital, J percent.

136
00:09:43.480 --> 00:09:50.710
OK, so then we get Jack and Jake, so you get the idea there, that percent sign can be really flexible.

137
00:09:51.340 --> 00:09:58.150
And then let's also query and filter data based on other data types besides the VAR cars or strings.

138
00:09:58.630 --> 00:10:02.590
So let's say that we want to query based on salary.

139
00:10:03.560 --> 00:10:06.740
So let's first grab everybody.

140
00:10:08.660 --> 00:10:10.580
Whose salary?

141
00:10:14.660 --> 00:10:16.490
Is greater than.

142
00:10:17.060 --> 00:10:22.250
And I don't know, let's say greater than 99000.

143
00:10:23.090 --> 00:10:23.540
OK.

144
00:10:25.760 --> 00:10:32.750
All right, so we got Harry and Susan, because they're making 100000 and 200000, respectively.

145
00:10:33.200 --> 00:10:36.230
Or we could query by date.

146
00:10:36.710 --> 00:10:41.240
So let's filter for everyone who was born before 1980.

147
00:10:41.360 --> 00:10:45.290
Okay, so where date of birth is less than?

148
00:10:45.470 --> 00:10:47.300
And so we're comparing dates here.

149
00:10:47.390 --> 00:10:53.380
So what we need to do is specify the keyword date and then we can provided with a date.

150
00:10:53.390 --> 00:10:59.960
So I will say something like 1980 and we can just do January 1st like so.

151
00:11:00.380 --> 00:11:01.710
And then let's run that.

152
00:11:02.420 --> 00:11:03.290
And there we go.

153
00:11:03.650 --> 00:11:04.580
So that returned.

154
00:11:04.580 --> 00:11:09.380
Everyone who's date of birth is before 1980.

155
00:11:09.950 --> 00:11:15.440
So this is another reminder of something that I've mentioned before in Java, which is that whenever

156
00:11:15.440 --> 00:11:24.620
possible, it's usually better to model not only Java classes, but even database tables with meaningful

157
00:11:24.620 --> 00:11:31.130
and proper data types so that we can get meaningful comparisons when we need to do things like this.

158
00:11:31.370 --> 00:11:39.290
If I had modeled the date of birth as text by using a bar car right, which is the sequel equivalent

159
00:11:39.290 --> 00:11:46.400
of a string, it would have been a bit more problematic for me to be able to then say, Show me all

160
00:11:46.400 --> 00:11:51.140
the people who were born before a certain date or after a certain date or something like that, I'd

161
00:11:51.140 --> 00:11:59.900
have had to go through another step of translating those text representations of dates into actual dates

162
00:11:59.900 --> 00:12:01.250
that have meaning to them.

163
00:12:01.490 --> 00:12:10.340
So it's almost always better in most cases to model your data with accurate data types that really represent

164
00:12:10.340 --> 00:12:13.850
whatever the concept of those values is right.

165
00:12:14.150 --> 00:12:20.030
And we could even get a little fancier and do compound statements and things so we could say something

166
00:12:20.030 --> 00:12:24.320
like find everybody who was born before 1980.

167
00:12:26.190 --> 00:12:26.880
And.

168
00:12:28.970 --> 00:12:30.350
First name.

169
00:12:31.570 --> 00:12:32.590
It is like.

170
00:12:36.000 --> 00:12:36.600
H.

171
00:12:38.500 --> 00:12:40.900
Meaning, you know, first name starts with an H.

172
00:12:41.230 --> 00:12:42.280
Let's try that out.

173
00:12:42.910 --> 00:12:43.540
There you go.

174
00:12:43.930 --> 00:12:49.640
So now you're just getting Harry Johnson back so you can do these compound things or you could say or

175
00:12:49.960 --> 00:12:50.320
so.

176
00:12:50.770 --> 00:12:52.840
Pretty, pretty cool flexibility there.

177
00:12:53.020 --> 00:12:53.530
All right.

178
00:12:53.530 --> 00:12:54.540
So see here.

179
00:12:54.550 --> 00:12:58.720
Let's go back to the basic forms like everything from people.

180
00:12:59.320 --> 00:12:59.590
All right.

181
00:12:59.590 --> 00:13:00.550
So there's everybody.

182
00:13:00.790 --> 00:13:03.490
Now we can also sort or order records.

183
00:13:03.610 --> 00:13:07.210
And that's one of the many strong suits of relational databases.

184
00:13:07.660 --> 00:13:13.360
So to do that, we use a special set of keywords which are ordered by.

185
00:13:13.960 --> 00:13:19.660
And then all we have to do is tell it what column we want to order everything by or columns.

186
00:13:19.660 --> 00:13:23.500
We can specify primary and secondary and tertiary and so on and so forth.

187
00:13:23.650 --> 00:13:26.170
Columns by which to order records.

188
00:13:26.440 --> 00:13:28.180
So let's start with something simple.

189
00:13:28.300 --> 00:13:31.630
So let's just do something like let's order by the first.

190
00:13:31.630 --> 00:13:34.810
The names first name.

191
00:13:35.920 --> 00:13:36.300
All right.

192
00:13:36.340 --> 00:13:44.440
So now what we end up with is all of these records are sorted by first name in alphabetical order ascending.

193
00:13:44.620 --> 00:13:48.590
Now we could also flip that and sort them in descending order.

194
00:13:48.610 --> 00:13:53.470
And if we want that, all we do is add in the DC keyword there.

195
00:13:53.470 --> 00:13:54.700
That means descending.

196
00:13:54.910 --> 00:13:58.330
So if we run this again now, we just flipped the order.

197
00:13:58.420 --> 00:14:01.960
Susan, Mary, Jake, Jack and Harry, OK.

198
00:14:02.620 --> 00:14:07.600
And by the way, if you ever needed to explicitly say that you wanted to sort everything in ascending

199
00:14:07.600 --> 00:14:09.520
order, though, that is the default.

200
00:14:09.670 --> 00:14:10.990
You could say AC.

201
00:14:11.800 --> 00:14:12.610
So there you go.

202
00:14:14.460 --> 00:14:24.090
And then if we wanted to have a secondary sort order, we could do that as well, so we could sort secondarily

203
00:14:24.090 --> 00:14:31.470
by date of birth or salary or anything, we can put a comma here and then specified date of birth.

204
00:14:33.560 --> 00:14:36.290
Now, I don't think I saw anything change there.

205
00:14:37.650 --> 00:14:40.260
Let's see if we do descending.

206
00:14:41.190 --> 00:14:42.120
Yeah, I don't think we're going to.

207
00:14:42.380 --> 00:14:45.240
I don't know that I'm seeing any any change there.

208
00:14:45.390 --> 00:14:48.870
In fact, it might be better if we did date of birth first.

209
00:14:49.110 --> 00:14:50.340
Let's try that and see.

210
00:14:50.370 --> 00:14:52.680
Date of birth, order by date of birth.

211
00:14:53.370 --> 00:14:54.110
And I don't know.

212
00:14:54.120 --> 00:14:56.190
Let's go in descending order.

213
00:14:56.880 --> 00:15:02.070
And then secondarily, let's order by first name.

214
00:15:02.280 --> 00:15:02.700
Oops.

215
00:15:02.700 --> 00:15:04.320
First name.

216
00:15:05.040 --> 00:15:06.150
Let's see what that does.

217
00:15:06.660 --> 00:15:12.000
OK, so yeah, we've got the youngest person first and the oldest person last.

218
00:15:12.540 --> 00:15:18.210
And actually, I mean, of course, the secondary sort order really isn't going to come into play here

219
00:15:18.360 --> 00:15:23.910
in this case, unless we have two or more people with the same date of birth.

220
00:15:23.910 --> 00:15:26.250
So that's not really doing anything for us.

221
00:15:26.250 --> 00:15:28.440
But now you get to see how you could do that.

222
00:15:29.610 --> 00:15:34.200
And what if we wanted to group these people up by some column?

223
00:15:34.620 --> 00:15:41.880
You may recall that we were able to do a grouping in the Streams API, and that felt very database ish

224
00:15:41.910 --> 00:15:43.550
to me when we were doing it.

225
00:15:43.560 --> 00:15:51.180
And whenever I use that functionality in Java, I always assume that the makers of Java were heavily

226
00:15:51.180 --> 00:15:57.090
influenced by the same types of typical functions that you would do in a database.

227
00:15:57.450 --> 00:16:01.170
So let's see what that looks like in the originating technology here.

228
00:16:01.620 --> 00:16:09.960
So let's say that we wanted to group these records by last name and we wanted to do a reduce in the

229
00:16:09.960 --> 00:16:11.010
reducing function.

230
00:16:11.010 --> 00:16:14.170
We want to sum up the salaries.

231
00:16:14.190 --> 00:16:18.930
OK, so we're going to group by last name and then get us some, which really means that we're going

232
00:16:18.930 --> 00:16:24.450
to get the grand total salary for the Johnsons vs. Jake Smith, right?

233
00:16:24.870 --> 00:16:25.150
All right.

234
00:16:25.170 --> 00:16:29.820
So the way we can do that is a couple of things here.

235
00:16:30.390 --> 00:16:39.380
First, we can get rid of this order by and then we're going to replace that with the keywords group

236
00:16:39.390 --> 00:16:39.860
I.

237
00:16:40.140 --> 00:16:43.440
And then all we have to do is specify what column we want to group by.

238
00:16:43.470 --> 00:16:50.130
So last name, for example, and then over here in the beginning, though, we're not going to select

239
00:16:50.340 --> 00:16:51.600
everything now.

240
00:16:51.960 --> 00:16:54.960
Now we're going to select basically the salary.

241
00:16:54.960 --> 00:16:59.940
However, we want to implement a function on this salary.

242
00:16:59.940 --> 00:17:03.000
And so now we also are going to see about functions.

243
00:17:03.270 --> 00:17:10.680
There are lots of functions that we can use with each with school and with the H2 databases implementation

244
00:17:10.680 --> 00:17:11.400
of sequel.

245
00:17:12.690 --> 00:17:16.260
And so the function that we would need here is called sum.

246
00:17:17.100 --> 00:17:24.690
And so I can use the sum function with parentheses and then state what field I want to sum up, which

247
00:17:24.690 --> 00:17:28.410
is the salary field like, sir.

248
00:17:28.980 --> 00:17:29.320
All right.

249
00:17:29.340 --> 00:17:35.970
So select some of the salary from people and group the people by last name.

250
00:17:36.420 --> 00:17:39.390
So if I run this, there we go.

251
00:17:39.600 --> 00:17:43.020
So we get the same salary and we get it.

252
00:17:43.020 --> 00:17:43.530
What is that?

253
00:17:43.530 --> 00:17:49.830
Three hundred fifty two thousand for the for the family and 75000?

254
00:17:50.130 --> 00:17:55.050
Now I could also include something some additional information.

255
00:17:55.050 --> 00:17:58.320
So if I want to get the last name.

256
00:17:59.290 --> 00:18:03.160
For example, right, so now we know who's who.

257
00:18:03.190 --> 00:18:08.440
Right, the Johnsons are getting that much and Smith is getting that much, or perhaps they want an

258
00:18:08.440 --> 00:18:09.250
average.

259
00:18:09.580 --> 00:18:12.380
There's an average function that we could use a.

260
00:18:14.710 --> 00:18:20.620
Now, notice that that's returning the numbers in, I guess that's engineering notation of scientific

261
00:18:20.620 --> 00:18:21.340
notation.

262
00:18:21.730 --> 00:18:27.760
If we want to make that a little nicer to look at, we can actually cast these values.

263
00:18:27.760 --> 00:18:33.220
So similarly to casting in Java, where we can cast one data type to another data type.

264
00:18:33.340 --> 00:18:37.450
We can do something like that in the in SQL as well.

265
00:18:37.690 --> 00:18:46.090
So we will use the cast function here and I will wrap this average salary inside of the function and.

266
00:18:47.650 --> 00:18:53.440
Close that off, but then I need to say as some some data type, and let's try.

267
00:18:54.190 --> 00:18:56.770
What is this big big tent?

268
00:18:57.160 --> 00:18:58.450
Let's see what that looks like.

269
00:18:59.830 --> 00:19:00.360
OK, yes.

270
00:19:00.360 --> 00:19:01.180
So that works.

271
00:19:01.900 --> 00:19:06.880
So now we get 88000 as the average for Johnson and seventy five thousand, he's the only one in there.

272
00:19:06.880 --> 00:19:10.000
So the average is going to be the same as his original salary.

273
00:19:10.000 --> 00:19:14.890
And there are quite a number of functions that we can utilize in sequel.

274
00:19:15.040 --> 00:19:21.160
So let me bring the browser window over here and I will show you some of those functions and will try

275
00:19:21.160 --> 00:19:22.360
out a few of them as well.

276
00:19:22.540 --> 00:19:29.050
Now I'm back on the H2 database website and I to get to this, I just went down to functions there.

277
00:19:30.150 --> 00:19:32.940
And so there's numeric functions.

278
00:19:33.300 --> 00:19:38.130
These would be a lot of these numeric functions would be somewhat equivalent to a lot of the functions

279
00:19:38.130 --> 00:19:43.170
that you would find in Java on the math class math that pi math, whatever.

280
00:19:43.530 --> 00:19:49.380
So these are those similar types of functions and then their string functions, many of which would

281
00:19:49.650 --> 00:19:54.780
be similar to the types of functions that you would find on the string class.

282
00:19:55.970 --> 00:19:59.180
We've got functions for date and time and date.

283
00:19:59.300 --> 00:20:05.390
We won't go over what the system functions are, but these are the main types that you might find yourself

284
00:20:05.390 --> 00:20:07.310
wanting to utilize from time to time.

285
00:20:07.400 --> 00:20:14.300
OK, so in the next lesson, let's take a deeper look into the various functions that are available

286
00:20:14.330 --> 00:20:18.970
to us, both with sequel and with H2 database specifically.

287
00:20:19.040 --> 00:20:26.120
Keep in mind, H2 is just one of several sequel compatible databases and one of several that implements

288
00:20:26.120 --> 00:20:29.270
the GDC Driver standard as well.

289
00:20:29.660 --> 00:20:36.110
So many databases, while being fairly standard in their abilities to implement the sequel language,

290
00:20:36.380 --> 00:20:41.900
will also implement some of their own specific or native capabilities.

291
00:20:42.140 --> 00:20:47.180
And so when we look at some of the functions in the next lesson, some of those may be standard sequel

292
00:20:47.180 --> 00:20:47.750
functions.

293
00:20:47.930 --> 00:20:51.560
Others may be more specific to H2 database.

294
00:20:51.770 --> 00:20:53.990
All right, so we'll take a look at that in the next lesson.
