WEBVTT
1
00:00:00.900 --> 00:00:01.740
Hey, welcome back.

2
00:00:02.010 --> 00:00:07.320
I want to show you one more scenario with regards to passing inputs into methods.

3
00:00:08.070 --> 00:00:15.990
Let's say that you want to create a method that can take any number of inputs, but you don't know how

4
00:00:15.990 --> 00:00:18.900
many inputs you'll need beforehand.

5
00:00:19.230 --> 00:00:25.170
One example of this already exists, and we've seen it a number of times any time we have a public static

6
00:00:25.170 --> 00:00:25.440
void.

7
00:00:25.440 --> 00:00:32.760
Main method The public static void main methods always take an array of strings called args.

8
00:00:32.880 --> 00:00:39.400
This is the standardized signature of the entry point into any Java application.

9
00:00:39.420 --> 00:00:39.780
OK.

10
00:00:40.050 --> 00:00:42.840
This is kind of a contractual pattern here.

11
00:00:43.590 --> 00:00:52.230
The nice thing about this approach is that the program does not have to know beforehand how many arguments

12
00:00:52.230 --> 00:00:55.290
a user of the program may want to pass in, right?

13
00:00:55.300 --> 00:00:57.600
That's why they're using an array here.

14
00:00:57.660 --> 00:01:04.530
You can pass in any number so we can actually create our own methods that use this same approach.

15
00:01:04.890 --> 00:01:10.500
So I will just put my cursor here and I'm going to create a method real quick.

16
00:01:10.710 --> 00:01:17.370
Let's see, and I don't know for now, we'll just make it void, and I will just call it test because

17
00:01:17.370 --> 00:01:20.880
this is just some temporary, temporary thing that I just want to show you.

18
00:01:21.120 --> 00:01:29.130
So let's say we have this method that will take a string array called words.

19
00:01:31.680 --> 00:01:35.670
And what it's going to do with these words may not even matter right now.

20
00:01:36.060 --> 00:01:42.150
So I will just put a commentary, do something clever with words.

21
00:01:42.780 --> 00:01:43.170
All right.

22
00:01:43.410 --> 00:01:51.810
Now, if we want to call this test method that would look like this, we could do something like one

23
00:01:52.020 --> 00:02:04.590
dot test and then we can pass in an array of words so we could do something like new string array.

24
00:02:17.880 --> 00:02:24.210
Just like that, so that's one way we could do this, another way is that we could create the string

25
00:02:24.210 --> 00:02:27.360
array outside of the call of the method, right?

26
00:02:27.360 --> 00:02:35.400
So we could say I'm going to have a string array called words and then say, give me a new string array

27
00:02:37.170 --> 00:02:38.100
like this.

28
00:02:38.430 --> 00:02:42.060
And then pretty much do the same thing like we're doing below one.

29
00:02:44.740 --> 00:02:47.020
To three.

30
00:02:50.600 --> 00:03:01.580
Then down here, we could just pass in the reference to the words variable, like, so OK, so there's

31
00:03:01.580 --> 00:03:03.110
a lot of ways that we can do this.

32
00:03:03.500 --> 00:03:05.450
Not all of which I'm showing you right now.

33
00:03:05.660 --> 00:03:14.660
However, since Java version five, I believe they created another way to pass in a variable list of

34
00:03:14.660 --> 00:03:15.440
arguments.

35
00:03:15.680 --> 00:03:18.530
And that technique is actually called VAR.

36
00:03:18.530 --> 00:03:19.820
ARGs VAR.

37
00:03:20.390 --> 00:03:21.530
Yes, var args.

38
00:03:21.530 --> 00:03:23.990
Meaning variable number of arguments.

39
00:03:24.530 --> 00:03:30.590
We use this with methods when we don't necessarily know how many arguments of the same type a caller

40
00:03:30.590 --> 00:03:33.050
of our method will be passing in.

41
00:03:33.230 --> 00:03:40.400
We can use VAR, args and the benefit of using VAR args over an array is really just that.

42
00:03:40.400 --> 00:03:46.310
It's it's a little more natural and easier for the caller to actually make this call.

43
00:03:46.550 --> 00:03:53.840
So what I will do here is I will create another method public void, and I will just call this one Test

44
00:03:53.840 --> 00:03:59.300
two and will make it appear to do the same thing that our test method does.

45
00:03:59.450 --> 00:04:03.090
Our first test method does, but we won't use an array.

46
00:04:03.110 --> 00:04:04.340
We'll use barracks.

47
00:04:04.610 --> 00:04:08.870
So our test method takes an array of strings, right?

48
00:04:09.890 --> 00:04:16.010
So the equivalent of that with VAR args would be to declare an input type of string.

49
00:04:16.190 --> 00:04:18.770
However, here's where we defer.

50
00:04:18.920 --> 00:04:26.750
Instead of using the square brackets to say we are going to be passing in an array of strings, we use

51
00:04:26.960 --> 00:04:37.160
three dots or ellipses to indicate that this will be a VAR ARG of type string.

52
00:04:37.700 --> 00:04:42.560
And then we can state what the actual variable is going to be called.

53
00:04:42.710 --> 00:04:45.320
And still, I can call it words if I like.

54
00:04:48.070 --> 00:04:54.280
And do something clever, clever, and we'll come back to that in just a moment.

55
00:04:54.850 --> 00:05:02.860
But now to call this is a little bit more convenient P. one test, too.

56
00:05:03.400 --> 00:05:09.580
So if I do the equivalent of what we're doing here, passing in one, two and three to do that with

57
00:05:09.580 --> 00:05:18.220
the P, with the test tube method, all I have to do is just start typing in the the the words the strings

58
00:05:18.220 --> 00:05:18.850
right away.

59
00:05:18.880 --> 00:05:25.030
One comma separated two three.

60
00:05:26.470 --> 00:05:29.940
Like so and so that's just a little more convenient.

61
00:05:29.950 --> 00:05:36.670
I don't have to bother instantiating an actual array, and there are a few other things that we can

62
00:05:36.670 --> 00:05:38.800
do with this that are kind of nice.

63
00:05:39.010 --> 00:05:47.230
So what if I wanted to pass in a few other arguments that are not strings in addition to my array?

64
00:05:47.230 --> 00:05:47.590
Right?

65
00:05:47.740 --> 00:05:54.940
So up here, if I wanted to pass in a couple of numbers first, I could say int number one and number

66
00:05:54.940 --> 00:05:58.200
two comma and then my array of strings, right?

67
00:05:58.210 --> 00:05:58.990
I can do that.

68
00:05:59.260 --> 00:06:00.970
Now I just broke this call.

69
00:06:00.970 --> 00:06:05.560
So now down here, I have to update this and say something like, you know, whatever three comma,

70
00:06:05.560 --> 00:06:07.540
five comma words, right?

71
00:06:08.410 --> 00:06:11.920
I can still do that with VAR args as well.

72
00:06:12.340 --> 00:06:14.410
And it's pretty much exactly the same.

73
00:06:14.920 --> 00:06:21.850
And number one and number two and then I've got my string VAR here and then down here.

74
00:06:22.060 --> 00:06:26.070
Now here's where it's a little interesting, though, because it'll look a little different up here.

75
00:06:26.080 --> 00:06:30.720
I'm literally passing in exactly three arguments, right?

76
00:06:30.730 --> 00:06:34.510
The three, the five and then the words and appear.

77
00:06:34.510 --> 00:06:39.820
It looks like I'm expecting exactly three arguments because I am on on the test method.

78
00:06:40.060 --> 00:06:42.070
Number one, two and then words.

79
00:06:42.400 --> 00:06:48.730
But down here, because I'm using VAR args, it looks here in test tubes signature.

80
00:06:48.910 --> 00:06:51.760
That is the the description of the method.

81
00:06:51.970 --> 00:07:00.730
It looks like I'm expecting three arguments, but because of the way that VAR args work when I call

82
00:07:00.740 --> 00:07:09.950
this guy properly, such as with passing in a three comma five, it looks like I'm passing in five arguments.

83
00:07:09.970 --> 00:07:10.420
OK.

84
00:07:10.840 --> 00:07:17.470
So that actually does raise one point that you need to be a little bit careful with if you are going

85
00:07:17.470 --> 00:07:19.330
to use VAR args and I love VAR args.

86
00:07:19.330 --> 00:07:20.950
They're very, very useful.

87
00:07:20.980 --> 00:07:25.970
They just saved me from having to type, you know, the extra bits to create an array.

88
00:07:26.110 --> 00:07:32.800
The VAR ARG part has to be the last argument in your method signature.

89
00:07:32.810 --> 00:07:37.690
OK, so this bit here with the three ellipses has to come at the end.

90
00:07:37.840 --> 00:07:42.130
Let me show you what will happen, in fact, if I move this to the beginning.

91
00:07:44.620 --> 00:07:50.260
So if I put this in front, I get an error.

92
00:07:50.650 --> 00:07:55.310
And if I hover over this, VAR arc parameter must be the last in the list.

93
00:07:55.330 --> 00:07:55.660
OK?

94
00:07:55.870 --> 00:08:03.820
And the reason for that is should be maybe kind of obvious, since VAR args allow us to pass in any

95
00:08:03.820 --> 00:08:05.230
number of arguments.

96
00:08:05.710 --> 00:08:11.710
How would Java know when we're done passing in the things that should be part of the words versus the

97
00:08:11.710 --> 00:08:12.250
rest of this?

98
00:08:12.250 --> 00:08:14.920
Especially, let's say, if I change the data type here?

99
00:08:15.070 --> 00:08:19.810
You could argue that, oh, well, you know, if you're using int, then it should know that way because

100
00:08:19.810 --> 00:08:23.320
this was a string or are this is a string bar and these are int.

101
00:08:23.650 --> 00:08:28.420
But let's say that, you know, we might have made these strings.

102
00:08:30.850 --> 00:08:37.150
And now it's even more ambiguous, right, as to, you know, which strings go for words and which strings

103
00:08:37.150 --> 00:08:39.100
go for number one and number two, right?

104
00:08:39.370 --> 00:08:43.920
Or and I could have made this Varg a bar of integers, right?

105
00:08:43.930 --> 00:08:45.990
And and then these could be ins.

106
00:08:46.180 --> 00:08:50.290
And so you still have the same ambiguous situation there.

107
00:08:50.620 --> 00:08:59.530
And so for that reason, your VAR args have to be the last argument in your method declaration.

108
00:09:00.280 --> 00:09:00.730
OK.

109
00:09:00.760 --> 00:09:08.350
Like that now to access the individual items in the VAR ARG.

110
00:09:08.440 --> 00:09:14.320
That's actually pretty convenient because the dirty little secret is that VAR args really are just arrays.

111
00:09:14.740 --> 00:09:22.330
This is really just a nice shorthand for creating an array that basically that the the ADP is doing

112
00:09:22.330 --> 00:09:28.870
us a favor, essentially making it very convenient for us to basically still just do what we're doing

113
00:09:28.870 --> 00:09:30.400
up here on Line 48.

114
00:09:31.180 --> 00:09:40.150
So let's say I wanted to print out the first word in my VAR ARG variable called words, so I could do

115
00:09:40.150 --> 00:09:46.870
something like the print line words and then I can just use the square bracket.

116
00:09:47.500 --> 00:09:48.060
There you go.

117
00:09:48.070 --> 00:09:49.270
There's the first one.

118
00:09:50.260 --> 00:09:52.960
The second one, the third one, et cetera, et cetera.

119
00:09:52.990 --> 00:09:55.540
Same thing that I would have done with an array.

120
00:09:55.570 --> 00:10:01.750
Now you'll want to be careful, though, because since you can have a variable number of arguments in

121
00:10:01.750 --> 00:10:08.680
here or elements really in this word's variable, you'd want to make sure you know how many were passed

122
00:10:08.680 --> 00:10:12.460
in before you just start hard coding a number like this, right?

123
00:10:12.670 --> 00:10:19.150
And really, later on, when we learn about control flow, you'll learn ways that you can make loops

124
00:10:19.150 --> 00:10:22.450
that will just loop over the elements in this array.

125
00:10:22.450 --> 00:10:28.030
And then you don't even have to know up front how many elements are in the array or, in this case,

126
00:10:28.030 --> 00:10:29.050
the VAR arc, right?

127
00:10:29.380 --> 00:10:33.610
But essentially, everything that you can do with an array you can do with these Ferragu.

128
00:10:33.610 --> 00:10:39.650
So if you want to get the length, you can do that word's dot length.

129
00:10:40.030 --> 00:10:40.630
There you go.

130
00:10:40.690 --> 00:10:46.720
Because underneath the hood, it's still just an array, and there are a number of methods that come

131
00:10:46.720 --> 00:10:51.220
with Java that make heavy use of these VAR args, in fact.

132
00:10:51.430 --> 00:10:55.660
So you will see these from time to time with some of those methods.

133
00:10:55.810 --> 00:10:58.600
But like I said, very convenient technique.

134
00:10:58.600 --> 00:11:05.110
It saves us from having to type out and create an actual instance of an array ourselves.

135
00:11:05.320 --> 00:11:13.900
Basically, the JVM, the Java virtual machine Java will create it for us if our method is expecting

136
00:11:13.900 --> 00:11:14.530
a VAR arc.

137
00:11:14.740 --> 00:11:19.630
And so that will, in this lesson, just wanted to show you that it's very convenient and something

138
00:11:19.630 --> 00:11:23.280
you definitely should put in your toolbox and use when necessary.

139
00:11:23.530 --> 00:11:24.430
See in the next one.
