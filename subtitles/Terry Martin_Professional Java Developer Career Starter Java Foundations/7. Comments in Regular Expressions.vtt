WEBVTT
1
00:00:00.750 --> 00:00:07.920
All right, so next up, in learning how to kind of clean up and and make things a little more accessible

2
00:00:07.920 --> 00:00:10.620
and readable, sometimes with regular expressions.

3
00:00:10.800 --> 00:00:12.540
We're going to learn about comments.

4
00:00:13.020 --> 00:00:20.700
So it is possible to actually put comments in our regular expressions so that we can give ourselves

5
00:00:20.700 --> 00:00:28.110
a little bit more of a hint or clue as to what's going on in this big mess of, you know, gobbledygook

6
00:00:28.710 --> 00:00:28.900
now.

7
00:00:28.920 --> 00:00:34.860
By default, the Java Rejects Engine does not enable this, so we have to go out of our way a little

8
00:00:34.860 --> 00:00:35.070
bit.

9
00:00:35.100 --> 00:00:38.760
I mean, not out of our way, but so we have to enable this ourselves.

10
00:00:38.790 --> 00:00:43.350
OK, first off, let me close this this area here.

11
00:00:43.620 --> 00:00:43.920
All right.

12
00:00:43.930 --> 00:00:46.200
So the way to do this is right here.

13
00:00:46.200 --> 00:00:52.680
When we first are compiling our rig, our regular expression, we can actually pass in a second parameter,

14
00:00:53.130 --> 00:00:56.310
which will be a number of what are called flags.

15
00:00:57.360 --> 00:01:03.900
And those flags allow us to turn on or off certain behaviors of the regular expression engine so we

16
00:01:03.900 --> 00:01:09.330
can kind of configure how it will behave or how it will interpret our rejects.

17
00:01:09.570 --> 00:01:09.960
OK.

18
00:01:10.140 --> 00:01:17.580
And so what we can do is put the comma right after the the regular expression parameter there, but

19
00:01:17.580 --> 00:01:21.610
a comma there, and now we can reference some of those flags.

20
00:01:21.630 --> 00:01:26.910
These flags are just like, think of them as toggle switches that you're turning on or off to to tell

21
00:01:26.910 --> 00:01:30.420
the Rig X engine how you want it to behave in more detail.

22
00:01:30.660 --> 00:01:30.990
OK.

23
00:01:31.020 --> 00:01:38.910
Those flags are actually constants that live on the pattern class, so to access them, we reference

24
00:01:38.910 --> 00:01:42.810
the pattern class just like this pattern dot.

25
00:01:43.080 --> 00:01:50.220
And now we will see they are all of these capitalized all caps values here, and they're actually integers.

26
00:01:50.370 --> 00:01:53.110
These are just the names of the integer values.

27
00:01:53.140 --> 00:01:58.590
OK, so multi line and can an IQ commons case insensitive?

28
00:01:58.590 --> 00:02:03.180
All these different things that we can kind of turn on or off or whatever will mostly turn on?

29
00:02:03.570 --> 00:02:08.640
The one that we're most interested in right now is comments so we can just select that.

30
00:02:09.690 --> 00:02:17.310
And so now we're telling the ragga engine to allow us to comment in our regular expression.

31
00:02:17.610 --> 00:02:23.640
Now this has certain ramifications, though, that you need to be very aware of.

32
00:02:23.790 --> 00:02:26.940
And I have tripped myself up with this, in fact.

33
00:02:26.940 --> 00:02:27.330
So.

34
00:02:27.690 --> 00:02:34.110
And so what this is is not only is it going to allow us to put comments in here, but it also, perhaps

35
00:02:34.110 --> 00:02:40.080
more importantly, tells the regex engine to ignore spaces now white space.

36
00:02:40.350 --> 00:02:45.870
So I don't know if you remember in one of the earlier regex lessons when we were first learning how

37
00:02:45.870 --> 00:02:48.150
to do basic things with cat or whatever.

38
00:02:48.480 --> 00:02:54.600
I think I showed that you could just put a space in a rag accent that would match if you had a space

39
00:02:54.600 --> 00:02:56.400
in your incoming string or whatever.

40
00:02:56.820 --> 00:03:04.380
But when you use the comments mode of the rejects engine putting a space somewhere like if I were to,

41
00:03:04.380 --> 00:03:06.510
I don't know where to put a good one here.

42
00:03:09.230 --> 00:03:16.100
Looks like we're not using spaces here anyway, which is good, but let's say here, I'll use a really

43
00:03:16.100 --> 00:03:17.570
simple example right here.

44
00:03:17.570 --> 00:03:18.710
I'm going to make a comment here.

45
00:03:18.710 --> 00:03:25.310
So let's say we had an incoming string of I am good, OK?

46
00:03:26.690 --> 00:03:28.790
And then we had a reggae acts.

47
00:03:29.450 --> 00:03:34.310
Now we could just do a literal string, literal rejects here that would just match one for one.

48
00:03:34.320 --> 00:03:36.520
I am good, just like that, right?

49
00:03:36.530 --> 00:03:38.740
So that the second line would be the rejects.

50
00:03:38.780 --> 00:03:41.960
The first line would be the string that we're trying to match against.

51
00:03:42.260 --> 00:03:44.990
And by default, this would work just fine.

52
00:03:45.350 --> 00:03:52.100
However, if we did this with the Rejects engine, with the comments mode turned on, this would not

53
00:03:52.100 --> 00:03:56.250
work because it would ignore these spaces here.

54
00:03:56.270 --> 00:03:57.210
That's what I'm saying.

55
00:03:57.230 --> 00:04:05.090
OK, so you got to be careful, and what you'd have to do instead is explicitly say there's a space

56
00:04:05.090 --> 00:04:12.500
expected here and there's a space expected there which suddenly becomes less readable, ironically.

57
00:04:12.860 --> 00:04:17.150
But that's so that's a little bit of a tradeoff with using the comments mode.

58
00:04:17.180 --> 00:04:25.190
OK, now you can comment things, but you can't just put literal spaces in your regular expression anymore.

59
00:04:25.790 --> 00:04:26.150
All right.

60
00:04:26.330 --> 00:04:28.600
So I'm going to delete those two lines.

61
00:04:28.610 --> 00:04:36.410
OK, so we've turned on the comments ability and in our current projects here, I don't see that we

62
00:04:36.410 --> 00:04:38.750
are depending on spaces anyway.

63
00:04:38.750 --> 00:04:42.060
So I think we're good in fact here to test that.

64
00:04:42.080 --> 00:04:46.280
We'll just quickly run this again and make sure that it still works because the only thing we've changed

65
00:04:46.280 --> 00:04:48.560
is just by turning on the comments for now.

66
00:04:50.020 --> 00:04:51.090
Yet still works.

67
00:04:51.100 --> 00:04:52.030
OK, so we're good.

68
00:04:53.020 --> 00:04:53.710
All right.

69
00:04:53.890 --> 00:04:57.880
So then the next thing we can do is actually put some comments in here.

70
00:04:58.360 --> 00:05:02.050
Now there are a couple of ways that we can go about doing this.

71
00:05:02.050 --> 00:05:09.340
And one way that I kind of like in modern versions of Java is actually to use a text block or a multi-line

72
00:05:09.340 --> 00:05:09.970
string.

73
00:05:10.270 --> 00:05:16.270
And if you'll recall to do that, what we do is we just instead of using one quotation, we use three.

74
00:05:16.660 --> 00:05:19.750
So I'm just going to introduce three quotes there.

75
00:05:20.140 --> 00:05:22.540
And then over here, I'm going to put two more.

76
00:05:23.320 --> 00:05:23.700
OK.

77
00:05:23.980 --> 00:05:29.920
And then the way this works is that when you're using a text block in Java, the you have to have a

78
00:05:29.920 --> 00:05:33.810
new line after those opening three quotes, right?

79
00:05:33.850 --> 00:05:36.850
OK, so now the squiggly lines all went away.

80
00:05:37.180 --> 00:05:40.440
Now let's just run this again and make sure that it's still happy.

81
00:05:42.320 --> 00:05:42.710
OK.

82
00:05:42.900 --> 00:05:44.660
Yeah, so that still works.

83
00:05:45.910 --> 00:05:46.600
All right.

84
00:05:46.870 --> 00:05:54.040
And so now we can start breaking this apart a little bit and making it a little easier perhaps to to

85
00:05:54.040 --> 00:05:54.370
read.

86
00:05:54.520 --> 00:06:00.130
And I think the most natural way to break this apart would be based on the parts that we're trying to

87
00:06:00.130 --> 00:06:00.970
pass, right?

88
00:06:00.970 --> 00:06:03.580
So here's the country code, right?

89
00:06:03.580 --> 00:06:11.620
So the country code bits are from here to here, including that question mark there, right?

90
00:06:12.040 --> 00:06:18.580
So I'm going to put the cursor right there and break that off and then let's run this again and just

91
00:06:18.580 --> 00:06:20.530
make sure that we didn't break anything.

92
00:06:22.260 --> 00:06:29.070
Yet still works, and that's still working, in part because in comment mode, it's ignoring white space,

93
00:06:29.070 --> 00:06:30.540
which would be all of this, right?

94
00:06:30.870 --> 00:06:31.140
All right.

95
00:06:31.170 --> 00:06:34.300
And then the next part is the area code.

96
00:06:34.680 --> 00:06:38.790
So that goes until here.

97
00:06:38.790 --> 00:06:43.830
I believe the even I have to look at this really carefully to make sure I'm getting it in the right

98
00:06:43.830 --> 00:06:44.720
places, right?

99
00:06:44.980 --> 00:06:45.270
Okay.

100
00:06:45.280 --> 00:06:51.930
So again, I'm going to just hit return there and break that, and I guess I'm going to run it again

101
00:06:51.930 --> 00:06:52.560
and make sure.

102
00:06:54.270 --> 00:06:59.190
It doesn't hurt to just, you know, make small changes and then run it, run your code again and make

103
00:06:59.190 --> 00:07:00.750
sure you didn't break anything.

104
00:07:01.050 --> 00:07:06.660
Later on, we can learn about writing unit tests, which are automated tests where we don't even have

105
00:07:06.660 --> 00:07:06.930
to.

106
00:07:07.140 --> 00:07:11.760
We don't have to run this manually because sometimes you might have a really big program where to get

107
00:07:11.760 --> 00:07:13.290
to the part that you're trying to test.

108
00:07:13.740 --> 00:07:14.970
It would take a lot of time.

109
00:07:15.150 --> 00:07:19.170
And really, you just want to make sure that the small part where you're making code changes didn't

110
00:07:19.170 --> 00:07:24.240
break, and that's where something like a technique like unit testing can really come in handy.

111
00:07:24.390 --> 00:07:26.700
So we will learn that later in the in the course.

112
00:07:27.090 --> 00:07:27.430
All right.

113
00:07:27.450 --> 00:07:28.830
And it looks like we're good here.

114
00:07:28.830 --> 00:07:32.430
And then another place to break out is right here.

115
00:07:33.420 --> 00:07:33.900
OK.

116
00:07:34.290 --> 00:07:37.440
All right, so it looks like we've gotten everything broken down now.

117
00:07:38.340 --> 00:07:39.690
And I'm just running again.

118
00:07:41.450 --> 00:07:49.010
OK, cool, so we didn't break anything, but we did split that string are split the regex up into logical

119
00:07:49.310 --> 00:07:50.450
groupings now.

120
00:07:50.540 --> 00:07:54.170
So that makes it a little nicer to read already.

121
00:07:54.290 --> 00:08:01.070
And especially since we've got these these named Captur groups, these already kind of serve as little

122
00:08:01.070 --> 00:08:03.590
little hints of what's going on in each line.

123
00:08:03.800 --> 00:08:05.900
But we can be even more explicit now.

124
00:08:06.200 --> 00:08:13.610
Now that we have support for comments, we can put a cursor somewhere on a line like here and I'm going

125
00:08:13.610 --> 00:08:14.240
to use a space.

126
00:08:14.240 --> 00:08:14.870
I don't need it.

127
00:08:15.110 --> 00:08:23.000
And then if I want to type an explicit comment, I can use no sign or hashtag and then I can write a

128
00:08:23.000 --> 00:08:23.570
comment.

129
00:08:23.870 --> 00:08:29.030
I'm big on having spaces, but you don't need a space here, and I'm going to say I don't know gets

130
00:08:29.840 --> 00:08:34.760
country code, and let's just run this and make sure that this is still going to work.

131
00:08:36.450 --> 00:08:37.500
Yep, still good.

132
00:08:37.770 --> 00:08:50.670
All right, so I'm going to comment everything now gets area code, gets exchange looks.

133
00:08:54.440 --> 00:08:57.110
And then the last one now here you want to be a little careful.

134
00:08:57.320 --> 00:09:04.220
I left the closing tax block thing here, which is the three closing quotes on the same line.

135
00:09:04.520 --> 00:09:06.710
I may or may not want to keep it that way.

136
00:09:06.740 --> 00:09:08.540
I don't know if you do keep it that way.

137
00:09:08.540 --> 00:09:09.140
That's fine.

138
00:09:09.290 --> 00:09:14.360
So I can just do a space and then here and then say, get line number.

139
00:09:14.540 --> 00:09:15.590
I can do it that way.

140
00:09:15.770 --> 00:09:20.450
Or I can probably put this on its own line by simply hitting return right there.

141
00:09:20.570 --> 00:09:23.060
Let's run this and make sure it's still happy.

142
00:09:24.270 --> 00:09:25.480
Yeah, we're still good.

143
00:09:25.560 --> 00:09:25.980
OK.

144
00:09:26.220 --> 00:09:30.030
And then I can even have a comment up here at top.

145
00:09:31.620 --> 00:09:43.770
This is my ex to pass in the parts of a phone number and I'll run again just to make sure that is still

146
00:09:43.770 --> 00:09:44.280
happy.

147
00:09:45.500 --> 00:09:46.700
Yep, still good.

148
00:09:46.910 --> 00:09:50.150
So look at that now that just got a lot more readable, didn't it?

149
00:09:50.300 --> 00:09:55.040
It's still a little little intimidating on the inside of each of these, but now at least you've broken

150
00:09:55.040 --> 00:09:57.830
it out by logical parts, right?

151
00:09:57.920 --> 00:10:04.250
And so your brain doesn't have to process one big, long, scary line, and instead your brain can process

152
00:10:04.610 --> 00:10:06.020
just one part.

153
00:10:06.290 --> 00:10:11.550
You know, one functional part of the expression, which is much, much, much better.

154
00:10:11.570 --> 00:10:17.540
OK, so that's a really powerful technique that I would definitely encourage you to be aware of.

155
00:10:17.540 --> 00:10:22.970
But again, I'm just going to reemphasize one more time you have to be careful with this, because now

156
00:10:23.120 --> 00:10:30.080
if you're going to if you were writing regular expressions that were depending on literal spaces in

157
00:10:30.080 --> 00:10:36.770
the expression itself, those will no longer work and your rejects will suddenly go from having worked

158
00:10:36.770 --> 00:10:38.970
to immediately being broken.

159
00:10:39.200 --> 00:10:46.040
And sometimes, if you're not remembering this rule or this fact, you'll wonder, Oh my gosh, how

160
00:10:46.040 --> 00:10:47.060
come it's not working?

161
00:10:47.150 --> 00:10:49.010
Which is why it's a really good idea.

162
00:10:49.010 --> 00:10:55.850
Probably if you do retroactively enable this common thing to just only make one change at a time.

163
00:10:55.940 --> 00:11:00.080
And the first change should be to simply enable comments and then run your regex.

164
00:11:00.080 --> 00:11:01.370
Write them right away.

165
00:11:01.700 --> 00:11:05.330
If it suddenly doesn't work after you knew it had been working.

166
00:11:05.420 --> 00:11:10.460
Almost certainly your problem is that you have literal spaces somewhere in the rejects that you need

167
00:11:10.460 --> 00:11:17.690
to go find and replace with a character class like like the English s something like that.

168
00:11:18.410 --> 00:11:18.780
All right.

169
00:11:18.800 --> 00:11:24.650
And I think that's going to wrap up this lesson on commenting, and I'll see you in the next one.
