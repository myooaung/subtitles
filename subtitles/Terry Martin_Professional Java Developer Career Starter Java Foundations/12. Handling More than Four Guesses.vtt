WEBVTT
1
00:00:00.540 --> 00:00:03.030
All right, so picking up where we left off.

2
00:00:03.120 --> 00:00:03.960
Let's see.

3
00:00:03.990 --> 00:00:13.830
I noticed that we still had this message here hardcoded in the scenario where we have had four wrong

4
00:00:14.130 --> 00:00:14.970
guesses.

5
00:00:15.120 --> 00:00:17.340
We're saying you didn't get it and you've had four tries.

6
00:00:17.520 --> 00:00:19.800
So maybe we don't want to hard code this.

7
00:00:19.950 --> 00:00:25.290
So let's go back over to the test and let's write a test for this scenario where I guess the test scenarios

8
00:00:25.290 --> 00:00:32.340
specifically would be well, oh well, I guess first, let's just revise the test that forced us to

9
00:00:32.340 --> 00:00:36.500
implement this functionality and revise what we're displaying here.

10
00:00:36.510 --> 00:00:38.530
So let's go find that test.

11
00:00:38.640 --> 00:00:39.660
Looks like it's right here.

12
00:00:39.690 --> 00:00:42.480
You didn't get it and you've had four tries.

13
00:00:42.750 --> 00:00:47.820
So first of all, let's just make this the number four.

14
00:00:47.820 --> 00:00:53.970
And OK, so I think that's all we need to change first and then let's just run all the tests and see

15
00:00:53.970 --> 00:00:54.810
that fail.

16
00:00:56.490 --> 00:01:02.280
OK, so there's our failing test, and now let's go fix it.

17
00:01:02.610 --> 00:01:04.860
So we'll jump over here.

18
00:01:05.370 --> 00:01:13.300
And so what I think we can do is just move these two lines right up above the f block here.

19
00:01:13.320 --> 00:01:19.860
First off, like so and I just did that with an option shift up arrow.

20
00:01:20.070 --> 00:01:26.010
Or let's see on Windows Alt shift up arrow to move those lines up.

21
00:01:26.160 --> 00:01:26.710
Let's see.

22
00:01:26.710 --> 00:01:31.100
I kind of naturally think I want to have a little space there.

23
00:01:31.110 --> 00:01:32.180
That's an optional thing.

24
00:01:32.240 --> 00:01:34.320
It's just I don't know what I want.

25
00:01:34.330 --> 00:01:40.950
And now that these two variables have been moved up above the if we can use them in the if so, you

26
00:01:40.950 --> 00:01:42.540
can't use a variable.

27
00:01:42.600 --> 00:01:48.120
If I left these two lines below the if statement, then I could not use them in the if statement itself,

28
00:01:48.120 --> 00:01:49.320
because they would not.

29
00:01:49.470 --> 00:01:54.480
These two variables would not have been declared yet, but now they've been declared and now I can use

30
00:01:54.480 --> 00:01:56.970
them below these two lines.

31
00:01:57.270 --> 00:02:05.460
So what I'm thinking here is to replace that four and the word tries with, you know, with these two

32
00:02:05.460 --> 00:02:06.690
formatted guys here.

33
00:02:06.930 --> 00:02:11.670
And I think the way we can do that is just use the string format method again.

34
00:02:11.880 --> 00:02:24.330
So string that format like so and then we will replace that for with a percent D and we will replace

35
00:02:24.330 --> 00:02:27.180
the tries with the percent s.

36
00:02:27.420 --> 00:02:31.080
So it's going to be exactly the same thing that we're doing here, really.

37
00:02:31.260 --> 00:02:31.640
All right.

38
00:02:31.650 --> 00:02:38.850
So then a comma counter comma, try text like, so all right.

39
00:02:38.850 --> 00:02:43.530
So let's rerun all the tests and see if that fixes that.

40
00:02:44.430 --> 00:02:46.560
Yep, looks like we got that now.

41
00:02:46.680 --> 00:02:47.550
All right.

42
00:02:47.790 --> 00:02:49.500
What else can we do here?

43
00:02:50.310 --> 00:02:51.750
I think I got one.

44
00:02:52.260 --> 00:03:00.120
What would happen if we had five wrong guesses or 10 wrong guesses?

45
00:03:00.270 --> 00:03:01.680
Do you see where I'm going with this?

46
00:03:02.370 --> 00:03:05.650
Let's let's jump back over here, and let's see.

47
00:03:05.670 --> 00:03:08.070
So this is test for wrong guesses.

48
00:03:08.130 --> 00:03:20.880
So let's copy this, matt, this test method and see what happens if we have, I don't know, 10 wrong

49
00:03:20.880 --> 00:03:21.600
guesses.

50
00:03:21.600 --> 00:03:23.360
Oops, I guess I could write that out.

51
00:03:23.370 --> 00:03:26.340
Test 10 wrong guesses.

52
00:03:26.670 --> 00:03:29.220
So here we've got four.

53
00:03:31.590 --> 00:03:42.750
Five, six, seven, eight, nine, 10 think that's 10, one two three four five six seven eight nine

54
00:03:42.750 --> 00:03:43.440
and then 10.

55
00:03:43.450 --> 00:03:46.050
Yeah, so that's 10 wrong guesses.

56
00:03:47.100 --> 00:03:50.010
Now what do we expect to have happen here?

57
00:03:50.070 --> 00:03:53.250
You didn't get it and you've had four tries.

58
00:03:53.490 --> 00:03:57.990
So the question is what should happen when you go over your four tries, right?

59
00:03:58.200 --> 00:04:05.850
Because there's nothing stopping us from calling the guess method again, should we simply say you didn't

60
00:04:05.850 --> 00:04:07.890
get it and you've had four tries?

61
00:04:08.550 --> 00:04:09.270
Game over?

62
00:04:09.270 --> 00:04:10.200
Should we keep saying that?

63
00:04:10.200 --> 00:04:14.370
Or should we state the number of tries that you had?

64
00:04:15.420 --> 00:04:16.890
I'm OK.

65
00:04:16.920 --> 00:04:22.680
I think with simply stating the number of tries, perhaps, and then just letting them know that the

66
00:04:22.680 --> 00:04:26.130
game is really as well and truly over.

67
00:04:26.370 --> 00:04:27.450
So let's see what happens here.

68
00:04:27.480 --> 00:04:32.880
You didn't get it and you've had, well, actually, you know, maybe we should limit them and just

69
00:04:32.880 --> 00:04:42.060
say something like, sorry, you are limited to only four tries.

70
00:04:42.990 --> 00:04:47.370
Your game is over.

71
00:04:47.430 --> 00:04:48.420
Maybe we can do that.

72
00:04:48.630 --> 00:04:48.980
All right.

73
00:04:48.990 --> 00:04:53.010
So let's run all the tests and see what we actually are getting currently.

74
00:04:53.880 --> 00:04:55.930
OK, so that failed.

75
00:04:56.160 --> 00:04:56.770
Let's see.

76
00:04:56.790 --> 00:04:58.470
So it failed with a message.

77
00:04:58.470 --> 00:05:00.560
Sorry, your you didn't get it.

78
00:05:00.570 --> 00:05:08.490
Yeah, so notice here when you go over four guesses, you don't get this special output.

79
00:05:08.490 --> 00:05:10.620
You didn't get it and you've had four tries.

80
00:05:10.800 --> 00:05:15.270
Instead, it reverts back to just the more generic you didn't get it.

81
00:05:15.390 --> 00:05:23.430
And the reason for that, if we jump over here, the reason for that is because currently our special

82
00:05:23.430 --> 00:05:30.900
message that you get if you get up to four guesses wrong is that it's it's just looking exactly for

83
00:05:30.900 --> 00:05:32.400
the number four, right?

84
00:05:33.510 --> 00:05:35.760
So it's a little too specific.

85
00:05:36.120 --> 00:05:40.500
And that's how it should have been, though, because we didn't have a test that was asking us to do

86
00:05:40.500 --> 00:05:42.870
anything more than that until now.

87
00:05:43.260 --> 00:05:49.890
So if we're going to implement our logic such that on your fourth wrong, guess you are going to get

88
00:05:49.890 --> 00:05:50.730
this message.

89
00:05:50.730 --> 00:05:57.420
But if you try to call the guess method beyond four, you're going to get this message, then we need

90
00:05:57.420 --> 00:05:59.280
some additional logic here.

91
00:05:59.340 --> 00:05:59.730
Right?

92
00:06:00.210 --> 00:06:05.820
So we want to be able to say this message if you have exceeded four.

93
00:06:06.030 --> 00:06:13.310
So I'm thinking we can use another conditional here or maybe even let's see if we do a few else.

94
00:06:13.320 --> 00:06:24.120
If counter is greater than four, then return.

95
00:06:24.750 --> 00:06:31.110
And then maybe we can just return this string exactly hardcoded.

96
00:06:32.610 --> 00:06:36.930
I don't think we need to access the counter because we're kind of hard coding to let them know, Hey,

97
00:06:36.930 --> 00:06:39.090
you only get four tries, period.

98
00:06:39.750 --> 00:06:40.080
All right.

99
00:06:40.080 --> 00:06:41.990
So let's not think a whole lot.

100
00:06:42.000 --> 00:06:45.750
Let's just run the tests and see if this satisfies this new scenario.

101
00:06:47.070 --> 00:06:49.740
Hey, that that yeah, that satisfies it.

102
00:06:49.740 --> 00:06:57.390
Right now, I do kind of really want to get rid of all these excess of return statements.

103
00:06:57.420 --> 00:07:03.150
I don't know that I'm ever going to be able to think of a unit test that would force me to do this because

104
00:07:03.150 --> 00:07:05.310
this is kind of like internal housekeeping.

105
00:07:05.310 --> 00:07:12.810
But I, as I've mentioned in one of the previous lessons, I'm not a fan of having so many return statements.

106
00:07:12.990 --> 00:07:20.130
Ideally, I usually want to have just one return statement, in fact, for the entire method.

107
00:07:20.580 --> 00:07:25.650
So how could we get rid of all these return statements?

108
00:07:25.860 --> 00:07:32.790
One possibility that I am considering is that since all, we're ultimately returning our strings anyway,

109
00:07:32.790 --> 00:07:44.670
we could just have one master string that gets set to either this bit, this bit or this bit exclusively.

110
00:07:45.300 --> 00:07:52.290
And then whichever one of these three bits sets, that string ends up setting that string no matter

111
00:07:52.290 --> 00:07:52.620
what.

112
00:07:52.920 --> 00:07:55.950
We just return whatever that one master string is.

113
00:07:56.550 --> 00:07:58.410
So let's see what that might look like.

114
00:07:58.410 --> 00:08:00.710
So let's say that we declare a string.

115
00:08:03.810 --> 00:08:04.320
I don't know.

116
00:08:04.320 --> 00:08:12.060
Let's just call it response, and we don't really want to initialize it here.

117
00:08:12.210 --> 00:08:15.750
So I suppose we could just set it to null at this point.

118
00:08:16.560 --> 00:08:26.460
And then instead of returning these strings, we instead just set the response to any of these values

119
00:08:26.460 --> 00:08:27.000
like this.

120
00:08:27.000 --> 00:08:30.300
So instead of a return, we say response equals.

121
00:08:30.960 --> 00:08:31.500
That.

122
00:08:33.630 --> 00:08:40.740
Response groups equals that, and then we return response.

123
00:08:41.310 --> 00:08:43.080
Now we need to do one more thing.

124
00:08:43.080 --> 00:08:49.680
I think I think now that we're not using that return statement, the return statement that we had here

125
00:08:49.680 --> 00:08:58.710
and here on line 15 and 17, we're short circuiting the return that we had on on what is now line 19.

126
00:08:58.800 --> 00:09:07.170
But now that we've removed those two return statements, currently, Line 19 is going to execute every

127
00:09:07.170 --> 00:09:09.060
time and we don't want that.

128
00:09:09.060 --> 00:09:16.410
We want either line 15, Line 17 or Line 19 to execute exclusively.

129
00:09:16.530 --> 00:09:23.770
So how can we make sure that only one of this line, this line or that line executes right?

130
00:09:23.790 --> 00:09:25.740
We don't want this line to execute.

131
00:09:25.740 --> 00:09:31.080
If one of these two also is executing, we want them all to be mutually exclusive.

132
00:09:31.650 --> 00:09:32.610
How can we do that?

133
00:09:34.180 --> 00:09:36.260
Well, it's actually should be pretty easy.

134
00:09:36.280 --> 00:09:46.060
I think all we need to do is just use an else block here and then we'll indent that and then close this

135
00:09:46.060 --> 00:09:46.330
off.

136
00:09:46.450 --> 00:09:53.440
So now each of these clauses is mutually exclusive, including this last one.

137
00:09:53.560 --> 00:09:54.070
OK.

138
00:09:54.670 --> 00:09:58.390
So you could not have any two of these execute.

139
00:09:58.570 --> 00:10:01.330
Only one of these can actually be executed.

140
00:10:01.480 --> 00:10:07.120
So either the counter equals four and you get this or counter is greater than four and you get this

141
00:10:07.510 --> 00:10:09.490
or all other circumstances.

142
00:10:09.490 --> 00:10:11.770
You get this output here.

143
00:10:12.070 --> 00:10:18.310
And then regardless of what happened at the end, one of these response strings should have been set.

144
00:10:18.610 --> 00:10:21.580
And whatever it is, we'll just return that.

145
00:10:21.820 --> 00:10:23.110
OK, does that make sense?

146
00:10:23.230 --> 00:10:23.610
All right.

147
00:10:23.620 --> 00:10:27.910
So let's rerun everything and see if we broke anything with that refactoring.

148
00:10:28.600 --> 00:10:31.060
Hey, awesome, awesome.

149
00:10:31.070 --> 00:10:32.290
So we didn't break anything.

150
00:10:32.470 --> 00:10:39.940
So this highlights another great point of unit testing, which is that with a good set of unit tests

151
00:10:39.940 --> 00:10:46.420
in place, you can have the confidence to go back into your code and refactor things.

152
00:10:46.420 --> 00:10:52.100
And by refactor, I just mean, you know, change things up to try to improve things in various ways,

153
00:10:52.120 --> 00:10:52.420
right?

154
00:10:52.660 --> 00:10:57.610
And as long as before you started the refactoring, you knew that all your tests were passing.

155
00:10:58.000 --> 00:11:04.630
Then when you do a small refactoring and you rerun your tests, you can have the confidence to to pretty

156
00:11:04.630 --> 00:11:08.910
well know if you've broken anything as a result of the refactoring.

157
00:11:08.950 --> 00:11:17.320
So conversely, it is usually strongly advised not to refactor code before you have a strong suite of

158
00:11:17.320 --> 00:11:24.790
tests that validate all of the functionality is working as it should before you do the refactoring.

159
00:11:25.360 --> 00:11:27.280
All right, so let's see here.

160
00:11:27.280 --> 00:11:34.930
I think we're going to go ahead and end this lesson and and I think we can do a couple more changes

161
00:11:34.930 --> 00:11:35.620
coming up.

162
00:11:35.890 --> 00:11:37.300
So I'll see you in the next one.
