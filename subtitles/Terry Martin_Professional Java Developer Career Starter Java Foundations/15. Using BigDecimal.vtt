WEBVTT
1
00:00:01.290 --> 00:00:08.520
All right, so let's clear out what we have here, and we'll start doing a little bit of a tour through

2
00:00:08.520 --> 00:00:11.910
some of the key methods of big decimal.

3
00:00:13.080 --> 00:00:16.970
OK, so now let's just try out some math on Big Decimal.

4
00:00:16.980 --> 00:00:23.190
It has a lot of methods for doing pretty much all of the same types of math operations that you could

5
00:00:23.190 --> 00:00:27.060
do with primitives and also with the math class.

6
00:00:27.210 --> 00:00:32.610
So let's just walk through some of the key methods on it and try them out and see how they work.

7
00:00:32.880 --> 00:00:34.170
To do so, we'll do.

8
00:00:34.170 --> 00:00:39.720
We'll just do a system that out that print line and then we can just create a couple of big decimals

9
00:00:39.720 --> 00:00:41.370
and do math operations on them.

10
00:00:41.610 --> 00:00:48.930
So one way we can do this is to simply instantiate one or two big decimals in line here.

11
00:00:49.080 --> 00:00:56.130
So, for example, I can just do a new big decimal like, so give it a number, so we'll do.

12
00:00:56.460 --> 00:00:57.390
It doesn't even matter.

13
00:00:57.390 --> 00:01:02.070
Zero point three one four, Whatever I just typed in a random number there.

14
00:01:02.970 --> 00:01:03.360
All right.

15
00:01:03.510 --> 00:01:09.130
Now to do the math with it, we can then change a method call.

16
00:01:09.150 --> 00:01:17.160
So this new big decimal results in the creation of a new big decimal object, that object has the big

17
00:01:17.160 --> 00:01:18.270
decimal methods on it.

18
00:01:18.270 --> 00:01:25.650
So to access those methods, I can simply hit period and now call up the various methods available on

19
00:01:25.650 --> 00:01:26.430
the class.

20
00:01:26.880 --> 00:01:31.110
All right, so let's start off with additions so we can add.

21
00:01:32.600 --> 00:01:39.890
And it takes a big decimal, as do most of the methods of the big decimal, so I can create another

22
00:01:39.890 --> 00:01:45.470
big decimal as the input to this, and I know this can look a little unwieldy and this might not be

23
00:01:45.470 --> 00:01:50.570
the way you'd really want to do any significant amount of math with big decimal.

24
00:01:50.660 --> 00:01:52.550
But for right now, this is OK.

25
00:01:52.670 --> 00:01:56.960
New Big Decimal and we'll add, I don't know, five point three to one.

26
00:01:56.990 --> 00:02:01.060
OK, so let's run that and see see that it, that it works.

27
00:02:01.070 --> 00:02:04.550
Now, I'm not going to verify that these answers are correct because I already know they're going to

28
00:02:04.550 --> 00:02:05.240
be correct.

29
00:02:05.660 --> 00:02:06.450
All right, there we go.

30
00:02:06.470 --> 00:02:10.850
So we get five point six, three, five and then a bunch more.

31
00:02:11.180 --> 00:02:11.450
All right.

32
00:02:11.450 --> 00:02:12.890
So that's how you use add.

33
00:02:13.310 --> 00:02:16.580
And while we're at it, let's just go ahead and do subtract.

34
00:02:18.700 --> 00:02:19.150
All right.

35
00:02:19.330 --> 00:02:22.720
So I just changed that method, and I don't change anything else.

36
00:02:22.930 --> 00:02:24.040
And we'll run this.

37
00:02:25.180 --> 00:02:25.590
OK.

38
00:02:25.990 --> 00:02:27.850
Negative five and whatever.

39
00:02:28.030 --> 00:02:30.850
OK, let's see what other methods do we have here?

40
00:02:30.860 --> 00:02:34.090
We've got add, subtract, let's do a multiply.

41
00:02:35.440 --> 00:02:42.280
OK, so now let's try dividing something, and I don't know, I'll just divide something random again.

42
00:02:44.340 --> 00:02:45.090
So.

43
00:02:47.060 --> 00:02:47.750
Divide.

44
00:02:48.560 --> 00:02:50.330
All right, so let's run this.

45
00:02:53.010 --> 00:02:56.190
OK, now we got something fun here.

46
00:02:56.880 --> 00:03:02.410
We got what is called an exception, we've seen exceptions before in some of our programs.

47
00:03:02.430 --> 00:03:04.470
These are errors, essentially.

48
00:03:04.680 --> 00:03:09.230
Now this exception is saying that there is a non terminating decimal expansion.

49
00:03:09.240 --> 00:03:11.820
No exact represent the decimal result.

50
00:03:12.120 --> 00:03:19.410
What that's basically saying is that the answer to this division problem either has no ending or for

51
00:03:19.410 --> 00:03:24.180
whatever reason, it can't be easily represented without us helping it out.

52
00:03:24.540 --> 00:03:33.180
So what we have to do is specify how much precision we want in the answer to this division problem and

53
00:03:33.210 --> 00:03:34.520
how to round off.

54
00:03:34.530 --> 00:03:39.870
Because when we specify the amount of precision, what we're really basically saying is how many digits,

55
00:03:40.020 --> 00:03:45.390
how many significant digits we want in the response, which means that when we get to wherever we're

56
00:03:45.390 --> 00:03:49.200
going to cut off or our number of digits, we have to round.

57
00:03:49.380 --> 00:03:57.300
And so we need to specify two big decimal what rounding strategy we want to use because there are actually

58
00:03:57.300 --> 00:04:00.250
quite a number of different rounding strategies.

59
00:04:00.270 --> 00:04:05.970
It doesn't just assume how we may want it to round the numbers for us.

60
00:04:06.030 --> 00:04:07.230
We have to specify.

61
00:04:07.530 --> 00:04:11.190
So we do this by creating something called a math context.

62
00:04:11.400 --> 00:04:18.570
And so what I will do is create a new line here, and then I will create a new object of type math context,

63
00:04:19.710 --> 00:04:25.050
and I will store this in a variable that I will call IMSI, and then I will create the instance of it

64
00:04:25.050 --> 00:04:27.150
new math context.

65
00:04:27.330 --> 00:04:35.790
And it has a constructor that takes I just did a command p four parameters, two inputs, the precision,

66
00:04:35.880 --> 00:04:40.740
which is just an integer, and then the rounding mode or the strategy for rounding.

67
00:04:40.950 --> 00:04:44.830
So let's try a precision of five to begin with.

68
00:04:45.300 --> 00:04:47.430
And then a comma space.

69
00:04:47.440 --> 00:04:52.830
And then if you just type the letter R here, the ADP knows that you're referring to a rounding mode

70
00:04:52.830 --> 00:04:58.290
because that's the only data type that can be accepted as the second parameter of this constructor.

71
00:04:58.710 --> 00:05:05.160
And then you can pick a rounding mode and you can go read the documentation on what all of these do.

72
00:05:05.160 --> 00:05:06.480
I'm not going to go through all of them.

73
00:05:06.660 --> 00:05:08.220
I'm going to choose.

74
00:05:08.550 --> 00:05:09.570
Let's see.

75
00:05:09.750 --> 00:05:12.870
How about yeah, I guess I'll choose the first one that I have here half up.

76
00:05:13.380 --> 00:05:13.800
All right.

77
00:05:14.250 --> 00:05:17.970
So I put a semicolon there, and now I've created a math context.

78
00:05:17.970 --> 00:05:22.740
So now in the divide method, here there is another version.

79
00:05:22.740 --> 00:05:25.830
Let me give myself a little little room.

80
00:05:26.610 --> 00:05:26.970
Oops.

81
00:05:27.480 --> 00:05:27.960
Sorry.

82
00:05:29.490 --> 00:05:31.440
Let me give myself a little room here.

83
00:05:32.010 --> 00:05:32.490
There we go.

84
00:05:32.670 --> 00:05:39.510
So on the divide method, there's another version of the Divide method, which takes two and puts the

85
00:05:39.660 --> 00:05:42.270
big decimal that you want to use there.

86
00:05:42.480 --> 00:05:44.730
And then the math context.

87
00:05:44.970 --> 00:05:50.670
So I and I know that because I'm a little bit familiar with the divide method, but if you didn't know

88
00:05:50.670 --> 00:05:57.480
that you could put your period here right before the divide and then hit control space, then arrow

89
00:05:57.480 --> 00:05:59.760
over the word divide.

90
00:05:59.760 --> 00:06:04.170
And now we're seeing all the different versions of the divide method.

91
00:06:04.470 --> 00:06:08.490
So currently we're using this first one that only takes one parameter.

92
00:06:08.790 --> 00:06:14.520
The divisor, but there's another one that takes the divisor and then a math context, and that's the

93
00:06:14.520 --> 00:06:15.270
one that we want.

94
00:06:15.420 --> 00:06:20.310
There's also another one here where if you didn't want to go through the bother of creating this math

95
00:06:20.310 --> 00:06:26.400
context, you could just specify things like the scale and rounding mode all in line.

96
00:06:26.430 --> 00:06:28.200
So you have a lot of options here.

97
00:06:28.740 --> 00:06:29.030
All right.

98
00:06:29.040 --> 00:06:31.910
So anyway, we're going to use this second one.

99
00:06:32.220 --> 00:06:34.140
Now, I'm not going to actually pick that.

100
00:06:34.320 --> 00:06:40.020
I'm just going to move my cursor right there at the end of the creation of the new Big Decimal.

101
00:06:40.170 --> 00:06:45.870
Put a comma space and then refer to my math context that I've already created, right?

102
00:06:45.960 --> 00:06:46.980
Like that.

103
00:06:47.460 --> 00:06:47.760
All right.

104
00:06:47.770 --> 00:06:49.800
So now let's run this and see.

105
00:06:51.250 --> 00:06:52.030
There we go.

106
00:06:52.390 --> 00:06:53.710
And no more error.

107
00:06:54.160 --> 00:06:55.510
So we just had to tell it.

108
00:06:55.660 --> 00:07:01.440
Basically, the decimal was saying, Hey, this number is like crazy long.

109
00:07:01.450 --> 00:07:05.860
It may not even have any ending, so you need to tell me, how do you want me to handle this?

110
00:07:06.040 --> 00:07:09.250
And so we just told it, well, cut it off somewhere.

111
00:07:09.400 --> 00:07:16.540
And notice that because we set the precision to five, we are getting one two three four five meaningful

112
00:07:16.540 --> 00:07:17.050
digits.

113
00:07:17.050 --> 00:07:20.140
They're not including these the zeros, right?

114
00:07:20.170 --> 00:07:24.640
So let's see if we were to specify precision of seven.

115
00:07:25.000 --> 00:07:26.230
Let's see what we get there.

116
00:07:26.440 --> 00:07:26.870
All right.

117
00:07:26.890 --> 00:07:34.780
So one two three four five six seven, so that should look kind of obvious what what the precision is

118
00:07:34.780 --> 00:07:35.800
doing for us, right?

119
00:07:36.280 --> 00:07:42.850
So yeah, keep that in mind that if you do use the divide method and there are a few other methods that

120
00:07:42.850 --> 00:07:47.410
where you could get this, but divide is a big one where you may see that that kind of exception.

121
00:07:47.530 --> 00:07:54.010
If you didn't automatically think to specify a math context or at least specify the precision and the

122
00:07:54.010 --> 00:07:57.760
rounding mode, and you get that exception now, you know what to do about it.

123
00:07:57.910 --> 00:08:01.390
You'll just need to specify the precision and rounding mode somehow.

124
00:08:01.690 --> 00:08:05.020
All right, let's move on to another method.

125
00:08:05.410 --> 00:08:07.660
Let's take a look at the square root method.

126
00:08:08.140 --> 00:08:09.970
And this should be pretty straightforward.

127
00:08:09.970 --> 00:08:14.740
Let's put a good number in here that we know the square root of like forty nine.

128
00:08:15.100 --> 00:08:21.700
Now notice this method takes an input and it wants a math context.

129
00:08:21.880 --> 00:08:27.760
And so we've already got this one up here on Line nine, so let's just use that will pass that in just

130
00:08:27.760 --> 00:08:29.830
like so and then let's run this.

131
00:08:30.250 --> 00:08:31.930
So we should get back to seven.

132
00:08:32.590 --> 00:08:33.190
There we go.

133
00:08:33.550 --> 00:08:35.960
And let's try something crazy.

134
00:08:35.980 --> 00:08:40.300
I don't even know like point zero five four seven nine eight.

135
00:08:40.420 --> 00:08:42.160
Let's see what happens with this one.

136
00:08:42.670 --> 00:08:43.610
Ooh, look at that.

137
00:08:43.660 --> 00:08:44.110
Cool.

138
00:08:44.590 --> 00:08:50.140
One two three four zero eight nine seven OK, so there's a square root function or method.

139
00:08:51.160 --> 00:08:53.140
All right, let's try another one.

140
00:08:55.150 --> 00:08:58.370
Oh, OK, so here's a max function.

141
00:08:58.390 --> 00:09:03.180
So there was a max function or method on the math class.

142
00:09:03.190 --> 00:09:05.830
This is similar, except the math classes.

143
00:09:05.830 --> 00:09:09.910
Max function took two numbers and then it just returned.

144
00:09:09.910 --> 00:09:16.160
Whichever one was greater because these methods exist on an instance of a big decimal.

145
00:09:16.180 --> 00:09:23.260
This max method only takes one number because the other number is the number that you're using here.

146
00:09:23.290 --> 00:09:25.720
Let's just see it so I can show you.

147
00:09:26.290 --> 00:09:29.110
So I can be a little more clear of what I mean here.

148
00:09:29.530 --> 00:09:31.510
So we'll get rid of this.

149
00:09:31.690 --> 00:09:32.020
All right.

150
00:09:32.020 --> 00:09:39.430
So let's say we've got a big decimal with the number of seven and then this math function or method

151
00:09:39.430 --> 00:09:41.020
takes another big decimal.

152
00:09:41.020 --> 00:09:45.410
So we'll create another big decimal and we'll pass in 13, right?

153
00:09:45.430 --> 00:09:46.980
So this is how you use this.

154
00:09:46.990 --> 00:09:49.930
And so it's going to compare seven and 13.

155
00:09:50.230 --> 00:09:54.910
But the method is actually part of the big decimal for seven.

156
00:09:55.510 --> 00:09:56.860
So not a big deal.

157
00:09:57.280 --> 00:09:59.390
We'll go ahead and run this, OK.

158
00:09:59.470 --> 00:10:01.780
And so you get back to the bigger one, which is 13.

159
00:10:02.380 --> 00:10:02.830
All right.

160
00:10:03.760 --> 00:10:08.410
And then of course, there's a men and that does the opposite.

161
00:10:08.410 --> 00:10:09.490
So we'll run this.

162
00:10:10.360 --> 00:10:11.080
And there you go.

163
00:10:11.110 --> 00:10:11.650
You get back.

164
00:10:11.650 --> 00:10:12.100
Seven.

165
00:10:13.740 --> 00:10:16.230
All right, let's see what else we've got here.

166
00:10:17.430 --> 00:10:19.380
You can get the absolute value.

167
00:10:20.330 --> 00:10:27.980
Now, this one does not take an input, so let's pass in negative seven.

168
00:10:28.340 --> 00:10:32.420
And we should get back a positive seven or also known as just seven.

169
00:10:33.380 --> 00:10:33.870
There we go.

170
00:10:33.890 --> 00:10:34.880
There's seven.

171
00:10:34.970 --> 00:10:35.790
All right.

172
00:10:36.590 --> 00:10:39.020
So that's the absolute value method.

173
00:10:39.830 --> 00:10:40.290
OK.

174
00:10:40.310 --> 00:10:48.800
If you remember, we learned about the modulo operator, which simply returns the remainder of a division

175
00:10:48.800 --> 00:10:49.340
problem.

176
00:10:49.700 --> 00:10:56.060
There is an equivalent to that with big decimal, and it is the remainder method right here.

177
00:10:56.330 --> 00:11:02.610
So we will supply the remainder method with another big decimal that will represent a divisor.

178
00:11:02.630 --> 00:11:10.670
So let's say we wanted to divide, I don't know, 13 divided by and then we'll pass in a new big decimal

179
00:11:11.330 --> 00:11:13.610
13 divided by eight.

180
00:11:13.820 --> 00:11:22.340
So this method will return the remainder and that remainder will will be returned as a big decimal,

181
00:11:22.340 --> 00:11:22.910
by the way.

182
00:11:23.300 --> 00:11:23.540
All right.

183
00:11:23.540 --> 00:11:24.650
So let's run this.

184
00:11:25.280 --> 00:11:31.700
OK, so we get back of five so we can even use this the same way that we did when we were seeing how

185
00:11:31.700 --> 00:11:33.200
the modulo worked.

186
00:11:33.470 --> 00:11:40.640
So I think we did something like we did a sequence of of integers like one through 10 or something like

187
00:11:40.640 --> 00:11:40.880
that.

188
00:11:40.880 --> 00:11:44.330
And then we had the divisor be like two or something.

189
00:11:44.420 --> 00:11:47.480
So let's do the equivalent of that.

190
00:11:47.480 --> 00:11:49.100
But with big decimal.

191
00:11:49.520 --> 00:11:49.900
All right.

192
00:11:49.910 --> 00:11:54.620
So we'll change this to two three, four five.

193
00:11:55.010 --> 00:12:00.920
And let's run this and we should see some kind of toggling on and off zero one type behavior.

194
00:12:00.950 --> 00:12:03.010
There we go one zero one zero one.

195
00:12:03.020 --> 00:12:07.250
So that just goes to show that we can do the same thing with big decimal.

196
00:12:07.880 --> 00:12:08.570
All right.

197
00:12:09.140 --> 00:12:09.460
All right.

198
00:12:09.470 --> 00:12:16.760
And so I think that's going to wrap up the small tour of some of the more common typical math functions

199
00:12:16.760 --> 00:12:18.560
and methods on Big Decimal.

200
00:12:18.860 --> 00:12:24.710
So next up, though, we will take a look at some of the other methods on Big Decimal that you will

201
00:12:24.710 --> 00:12:28.040
likely need to know about and use from time to time.

202
00:12:28.040 --> 00:12:29.060
So we'll see in the next one.
