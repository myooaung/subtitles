WEBVTT
1
00:00:01.230 --> 00:00:02.100
All right, welcome back.

2
00:00:02.310 --> 00:00:08.220
So in the last lesson, we learned the basics of how to use the grouping by function to literally group

3
00:00:08.220 --> 00:00:12.870
up our record data set by some column, essentially.

4
00:00:13.150 --> 00:00:16.770
OK, now in this lesson, we're going to continue forward with that.

5
00:00:16.920 --> 00:00:18.660
And we're going to learn the next cool thing.

6
00:00:18.840 --> 00:00:25.170
At least what I think is cool, which is how we can actually sum up data or apply other types of collector

7
00:00:25.170 --> 00:00:27.510
methods within the grouping.

8
00:00:27.540 --> 00:00:27.930
OK.

9
00:00:28.080 --> 00:00:32.370
So again, we'll start with the spreadsheet so that you can see visually and conceptually, what am

10
00:00:32.370 --> 00:00:34.260
I talking about if it's not clear?

11
00:00:34.320 --> 00:00:38.160
OK, so jumping back over here to our spreadsheet dataset?

12
00:00:38.610 --> 00:00:44.880
So let's say that we've got this grouping that we have now or this categories or this categorization,

13
00:00:44.880 --> 00:00:55.440
as I think this program calls it, let's say that we want to see the sum total of salaries by state,

14
00:00:55.590 --> 00:00:55.980
right?

15
00:00:56.900 --> 00:01:02.690
So we don't want to just total up all of the salaries for the entire data set anymore.

16
00:01:02.930 --> 00:01:09.410
Now we want to see the total by state, maybe because we want to compare which state, you know, makes

17
00:01:09.410 --> 00:01:11.120
the most money or whatever.

18
00:01:11.150 --> 00:01:11.480
Right?

19
00:01:11.870 --> 00:01:19.880
So in the spreadsheet, the way that I can do this is by selecting this, this header row here in this

20
00:01:19.880 --> 00:01:25.550
row, these these rows here all correspond to the the states, right?

21
00:01:25.700 --> 00:01:26.450
The grouping.

22
00:01:27.910 --> 00:01:29.710
The grouping header, if you will.

23
00:01:29.780 --> 00:01:35.110
OK, so going back over here to the salary so I can come over here and I can click on this little thing

24
00:01:35.110 --> 00:01:39.450
and I can tell it, I want to sum up the data there, right?

25
00:01:39.460 --> 00:01:43.270
So it gives me these nice, easy to use functions right off the bat.

26
00:01:43.420 --> 00:01:50.230
So this is really equivalent to the various functions that that exist on the collectors class, right?

27
00:01:50.410 --> 00:01:57.260
In fact, I think every single one of these mathematical functions here exists on the collectors class.

28
00:01:57.280 --> 00:01:57.700
OK.

29
00:01:58.210 --> 00:01:58.430
All right.

30
00:01:58.450 --> 00:02:04.060
So anyway, we want to sum these up, and there they are, and then we can also format them to look

31
00:02:04.060 --> 00:02:04.420
nicer.

32
00:02:04.420 --> 00:02:13.040
So I will open up the format here and I will choose currency and let's put the separators in there.

33
00:02:13.040 --> 00:02:13.840
And now look at that.

34
00:02:13.840 --> 00:02:15.550
That looks really nice, doesn't it?

35
00:02:15.820 --> 00:02:16.300
OK.

36
00:02:16.600 --> 00:02:24.160
And then what I can also do now, I could even collapse all of these.

37
00:02:26.040 --> 00:02:26.430
Right.

38
00:02:26.610 --> 00:02:31.530
And I can scroll back over here and now we're seeing just these values, but I can do even better than

39
00:02:31.530 --> 00:02:31.800
that.

40
00:02:32.940 --> 00:02:36.240
We're not even paying any attention to any of these middle columns, right?

41
00:02:36.420 --> 00:02:41.670
So what I can also do is select these middle columns that we're not paying any attention to.

42
00:02:41.940 --> 00:02:48.540
And then I can hide them like so and I can get rid of these ones as well.

43
00:02:50.240 --> 00:02:52.720
Outside those high tide.

44
00:02:52.750 --> 00:02:53.380
There they are.

45
00:02:53.920 --> 00:02:55.420
And now look what I've got.

46
00:02:57.350 --> 00:03:08.660
Not only do I have a nice, easy to read mapping of states to sum total of salaries, but I also have

47
00:03:08.930 --> 00:03:12.230
really an easy to see map here.

48
00:03:12.500 --> 00:03:16.730
It's really a very obvious map, right in the Java Sense, right?

49
00:03:16.760 --> 00:03:20.450
Key value, key value pairs right now.

50
00:03:20.450 --> 00:03:25.310
We had that before, even when we were showing all of the records underneath it.

51
00:03:25.610 --> 00:03:28.640
But that might have been a little less obvious to some of you.

52
00:03:28.730 --> 00:03:35.690
The fact that the value inside of our key value pair was a list of people originally right?

53
00:03:35.870 --> 00:03:44.960
But visually, right now, what we're seeing is just an easy mapping of a state to a salary, right?

54
00:03:45.380 --> 00:03:46.250
Nothing could be.

55
00:03:46.520 --> 00:03:49.460
So you couldn't have it be too much more straightforward than that.

56
00:03:49.940 --> 00:03:55.040
And so now we're going to go do this in Java code, and it's pretty simple.

57
00:03:55.550 --> 00:03:55.810
All right.

58
00:03:55.820 --> 00:04:02.390
So jumping back over to the ADP, basically all we need to do is change this bit right here.

59
00:04:02.750 --> 00:04:03.200
OK.

60
00:04:03.500 --> 00:04:10.340
So if you want to think of it this way, when or when we're using this, this three parameter version

61
00:04:10.340 --> 00:04:15.980
of grouping by the first parameter is asking us, What do you want and group by what field do you want

62
00:04:15.980 --> 00:04:16.670
to group by?

63
00:04:17.270 --> 00:04:24.080
This second parameter in this particular case is letting us specify what type of map do we want to use

64
00:04:24.350 --> 00:04:29.660
or what map do we want to use because we can supply the map that we wanted to make use of as we're doing

65
00:04:29.660 --> 00:04:30.020
here.

66
00:04:30.380 --> 00:04:39.500
And then the third column is, what do you want me to do with all of the resulting records for each

67
00:04:39.500 --> 00:04:42.770
category, for each categorization, right?

68
00:04:43.130 --> 00:04:48.590
So in this case, we're telling it just list them out, but we can tell it to do just about any of those

69
00:04:48.590 --> 00:04:51.260
functions that exist on the collector's class.

70
00:04:51.410 --> 00:04:57.050
And you already know that there is a summing function on that collector's class, right?

71
00:04:57.230 --> 00:05:08.180
So if I get rid of this to list here and I invoke the summing long method like so and then you know

72
00:05:08.180 --> 00:05:16.040
that the summing long method wants me to specify what field or column right we want to sum up.

73
00:05:16.310 --> 00:05:23.690
So now it becomes easy again because we can just say person Colin Colin salary just like that.

74
00:05:24.020 --> 00:05:26.510
And we've basically already used this technique before.

75
00:05:26.510 --> 00:05:28.910
We're just using it in an expanded form now.

76
00:05:29.210 --> 00:05:32.390
Now you'll notice that we've got the nasty red marks again.

77
00:05:32.390 --> 00:05:33.890
Can you guess why that is?

78
00:05:35.600 --> 00:05:43.340
OK, so did you get it, so it's because now we're no longer returning a mapping of strings to a list

79
00:05:43.340 --> 00:05:44.030
of people.

80
00:05:44.240 --> 00:05:51.040
Now we're returning a mapping of strings, which are the states to longues, which are the salaries

81
00:05:51.050 --> 00:05:51.410
right?

82
00:05:52.830 --> 00:05:54.270
Just like we're seeing here.

83
00:05:55.240 --> 00:05:55.690
OK.

84
00:05:55.990 --> 00:05:58.030
And so I can just change that.

85
00:05:58.940 --> 00:06:03.230
So now we're getting a mapping of string to long.

86
00:06:04.320 --> 00:06:07.090
And the red marks go away, all right.

87
00:06:07.110 --> 00:06:09.120
And so now if I run this.

88
00:06:11.230 --> 00:06:12.070
Let's see what we get.

89
00:06:13.510 --> 00:06:14.140
There we go.

90
00:06:14.170 --> 00:06:16.690
Look at that really, really short and sweet, right?

91
00:06:17.020 --> 00:06:19.450
Key value pairs, key value.

92
00:06:19.450 --> 00:06:25.750
Key value now, now now one thing to note is I'm no longer using the full data set, but now I can go

93
00:06:25.750 --> 00:06:30.730
back to using that full data set because I won't get inundated with all of the listings of the individual

94
00:06:30.730 --> 00:06:31.450
people, right?

95
00:06:31.720 --> 00:06:37.540
So I'm going to comment that back out and rerun this one more time with the full data set now.

96
00:06:37.930 --> 00:06:38.700
Yeah, there we go.

97
00:06:38.710 --> 00:06:42.510
So now we've got all of the states and their data.

98
00:06:42.520 --> 00:06:46.600
However, you may be noticing that the numbers are not pretty.

99
00:06:46.660 --> 00:06:55.210
Right now, we've learned one way that we could fix this when we use the print F. When we use the print

100
00:06:55.420 --> 00:06:56.170
method, right?

101
00:06:56.470 --> 00:07:01.600
But I bet you're kind of looking at this and looking at our code and thinking, Hmm, how could we use

102
00:07:01.600 --> 00:07:03.190
the print death in this case?

103
00:07:03.340 --> 00:07:04.800
Now there is a way to do that.

104
00:07:05.730 --> 00:07:12.240
However, however, that might not be the most natural thing to do anyway.

105
00:07:12.250 --> 00:07:15.460
Now that we're doing this, all this collector's stuff, right?

106
00:07:15.610 --> 00:07:22.790
So let me show you the collector way that we could format these these values now.

107
00:07:22.810 --> 00:07:25.300
OK, so here we are using the grouping by.

108
00:07:25.630 --> 00:07:28.250
And by the way, I just want to show you something real quick here.

109
00:07:28.270 --> 00:07:34.900
We also could get rid of this tree map if we didn't care about these entries being alphabetized by key.

110
00:07:34.990 --> 00:07:39.670
We could get rid of this and just have the two parameters here in the field that we're grouping by,

111
00:07:40.030 --> 00:07:45.280
followed by the operation that we want to execute on each of the grouped up records, right?

112
00:07:45.700 --> 00:07:50.320
So this middle parameter here is optional as as you saw originally, right?

113
00:07:50.500 --> 00:07:51.700
I just wanted to point that out.

114
00:07:53.380 --> 00:08:00.490
So this last guy is us telling the group by function what to do with all of those records, right?

115
00:08:01.880 --> 00:08:06.800
Well, what if we want to do two things with all of those records or even five things with all those

116
00:08:06.800 --> 00:08:07.190
records?

117
00:08:07.430 --> 00:08:15.410
We don't just want to sum them up, we want to sum them up and then we want to format the result of

118
00:08:15.410 --> 00:08:16.730
that thumbing, right?

119
00:08:17.450 --> 00:08:18.800
So how can we do that?

120
00:08:19.040 --> 00:08:22.040
We want to some and then format.

121
00:08:22.670 --> 00:08:32.330
Well, it just so happens that the collectors class actually gives us kind of like a utility function

122
00:08:32.540 --> 00:08:34.130
called collecting.

123
00:08:34.130 --> 00:08:35.480
And then right.

124
00:08:35.630 --> 00:08:38.630
So in our case, we want to continue summing up.

125
00:08:39.260 --> 00:08:42.500
But then we also want to format.

126
00:08:42.770 --> 00:08:51.860
So what we can do here is if we embed this first operation inside of the end, then clause, if you

127
00:08:51.860 --> 00:08:54.200
will, or the end, then function.

128
00:08:54.710 --> 00:08:59.830
It will allow us to say a next thing that we want to do with the result of the first thing.

129
00:08:59.840 --> 00:09:04.670
So the first thing would be the summing and then the second thing would be the formatting and our case,

130
00:09:04.680 --> 00:09:05.000
right?

131
00:09:05.240 --> 00:09:07.850
So it's actually quite straightforward to use.

132
00:09:08.090 --> 00:09:09.670
So I'm going to I'm going on it.

133
00:09:09.680 --> 00:09:11.020
I'm going to just move this.

134
00:09:11.020 --> 00:09:16.010
Summing long down to a new line, though, just so that it's a little easier for us to see with our

135
00:09:16.010 --> 00:09:20.090
eyes what's going on because these lines are going to start to get a little bit too long.

136
00:09:20.420 --> 00:09:20.690
All right.

137
00:09:20.720 --> 00:09:29.420
So what I can do now is I can refer to the collecting and then function or method, right?

138
00:09:30.410 --> 00:09:33.860
And then I can simply embed.

139
00:09:35.050 --> 00:09:39.980
This summing bit here, I'm going to cut that and just paste it right there.

140
00:09:40.000 --> 00:09:47.170
I can embed that inside of the collecting and then with a comma and then I can supply another operation

141
00:09:47.170 --> 00:09:52.860
that I want to execute on the result of this first operation.

142
00:09:52.870 --> 00:09:56.650
So the first operation within the collecting and then is to sum up all the values.

143
00:09:56.950 --> 00:10:00.760
And then that's going to spit out, in our case, a long.

144
00:10:01.480 --> 00:10:10.300
And then I can supply a lambda or a method reference here as the second parameter to the collecting

145
00:10:10.300 --> 00:10:13.180
and then which will receive that long.

146
00:10:13.180 --> 00:10:15.970
And then I can do whatever I want with that long, right?

147
00:10:17.450 --> 00:10:23.300
So if we want to format along, there are several ways that we could do it.

148
00:10:24.050 --> 00:10:26.090
We could use the string that format.

149
00:10:26.090 --> 00:10:32.900
In fact, I'll show you here so we could we could use a lambda expression that represents the salary.

150
00:10:32.900 --> 00:10:38.780
I'll call that s and then we could say something like string dot format.

151
00:10:39.260 --> 00:10:43.370
And then we could use that the same type of format string that we were using down here.

152
00:10:43.370 --> 00:10:45.290
And in fact, here we'll just do that.

153
00:10:47.780 --> 00:10:49.370
Well, grab all of that.

154
00:10:52.260 --> 00:10:54.090
And paste that right there.

155
00:10:54.840 --> 00:10:55.530
Comma.

156
00:10:55.950 --> 00:10:56.460
S.

157
00:10:58.030 --> 00:11:04.810
Like so now we get the red marks again, because now we're no longer returning a mapping of strings

158
00:11:04.810 --> 00:11:05.650
to longs.

159
00:11:05.890 --> 00:11:10.300
Now we'll be returning the output of this string, that format, which is a string, right?

160
00:11:10.300 --> 00:11:14.590
So now it would be a string, a mapping of string to string.

161
00:11:15.590 --> 00:11:16.070
OK.

162
00:11:18.350 --> 00:11:23.750
Now, I know this is starting to look a little complex, but just take your time and just break it down

163
00:11:23.750 --> 00:11:27.500
and keep thinking back to what we have in the spreadsheet here, right?

164
00:11:28.070 --> 00:11:33.470
To kind of kind of reconcile what you're seeing in the code to what you know you're going to get.

165
00:11:34.710 --> 00:11:38.520
OK, so that's what you would get with this approach, in fact, you know what, let's go ahead and

166
00:11:38.520 --> 00:11:39.900
just run it so I can prove it.

167
00:11:44.520 --> 00:11:45.120
There we go.

168
00:11:45.150 --> 00:11:45.990
So look at that.

169
00:11:47.590 --> 00:11:47.950
Right.

170
00:11:48.410 --> 00:11:51.760
They're all pretty nicely formatted in everything, right?

171
00:11:52.660 --> 00:11:54.520
All right, so that's one way you could do this.

172
00:11:55.750 --> 00:11:56.970
Let me show you another way.

173
00:11:58.150 --> 00:11:59.230
Which is quite similar.

174
00:12:00.610 --> 00:12:00.980
Let's see.

175
00:12:01.000 --> 00:12:06.460
So instead of using the string that format, we could actually use a money format or write a number

176
00:12:06.460 --> 00:12:07.360
format, right?

177
00:12:07.780 --> 00:12:12.130
So we could refer to the number format.

178
00:12:15.000 --> 00:12:18.600
And then we can get a currency instance of it, like so.

179
00:12:18.990 --> 00:12:25.590
And then from here we could just use a method reference and refer to the format method itself.

180
00:12:25.800 --> 00:12:26.680
This format method?

181
00:12:26.700 --> 00:12:28.110
Let me just show you explicitly.

182
00:12:28.110 --> 00:12:34.980
In fact, the real quick format method takes an input of a number, right?

183
00:12:35.160 --> 00:12:44.520
And so if I use a lambda expression again as maps to blah blah blah and then we just throw that into

184
00:12:44.520 --> 00:12:45.750
there, like so?

185
00:12:47.100 --> 00:12:50.700
So, so here we're supplying a lambda expression.

186
00:12:50.880 --> 00:12:57.030
Please forgive the million billion parentheses there that we've got at the end to close off all of this

187
00:12:57.330 --> 00:12:58.650
block of code here.

188
00:12:59.550 --> 00:13:03.300
But here's our lambda expression something that takes a.

189
00:13:04.250 --> 00:13:07.460
Something of type long I'm using ask for salary here, right?

190
00:13:07.670 --> 00:13:10.370
That is coming from the output of the summing long.

191
00:13:10.400 --> 00:13:10.580
Right.

192
00:13:10.580 --> 00:13:15.830
So something long is returning a long, a number of type long and then.

193
00:13:16.900 --> 00:13:25.060
The collecting and then function is passing that output into this second clause here, if you will,

194
00:13:25.090 --> 00:13:25.420
right?

195
00:13:25.780 --> 00:13:31.090
So you've got an input of type along, which is the salary, and then you can do whatever you want with

196
00:13:31.090 --> 00:13:31.390
that.

197
00:13:31.390 --> 00:13:33.850
So we can do a number format that get currency.

198
00:13:33.850 --> 00:13:35.260
And since that format, right?

199
00:13:35.350 --> 00:13:36.250
So we can do this.

200
00:13:36.730 --> 00:13:45.070
We could shorten it a tiny bit by using a method reference so I could get rid of all of that.

201
00:13:45.580 --> 00:13:52.930
And I can get rid of that as well, and I can just replace that with the two.

202
00:13:54.400 --> 00:13:56.140
The two colons there, right?

203
00:13:56.470 --> 00:14:03.820
So in this case, because of the rules of how method references work, the JV team would know that I'm

204
00:14:03.820 --> 00:14:11.110
referring to this method here that takes one input, and it knows that the interface that is expected

205
00:14:11.110 --> 00:14:18.910
here as the second parameter here needs to be a function that can take an input and spit in output out,

206
00:14:18.910 --> 00:14:19.210
right?

207
00:14:20.230 --> 00:14:21.850
And so we can do this.

208
00:14:22.240 --> 00:14:22.660
All right.

209
00:14:22.840 --> 00:14:28.780
And so just to prove that let's just run this also and we shouldn't see any difference.

210
00:14:29.200 --> 00:14:31.690
I don't think we should see any difference, at least.

211
00:14:32.710 --> 00:14:38.410
OK, so there we go, there's all our values still nicely formatted, right?

212
00:14:40.410 --> 00:14:40.680
All right.

213
00:14:40.710 --> 00:14:48.240
And one more thing I want to show you now, what if we wanted to print these out a little more similarly

214
00:14:48.240 --> 00:14:49.560
to how they appear here?

215
00:14:49.560 --> 00:14:57.210
In other words, like one key value pair per per line, right, rather than them printing out horizontally?

216
00:14:57.570 --> 00:14:59.610
We can do that in a number of ways.

217
00:14:59.640 --> 00:15:04.380
Now, this isn't even going to be very related to us using the collect method here.

218
00:15:05.220 --> 00:15:12.480
So note that what's ultimately coming out of this collect call now collect call is in a phone.

219
00:15:14.310 --> 00:15:15.900
What's coming out of this collect call?

220
00:15:15.930 --> 00:15:18.000
Here is a map, right?

221
00:15:18.780 --> 00:15:23.040
And so the map class itself has a number of methods on it.

222
00:15:23.460 --> 00:15:28.590
And one thing that we could do if I move this down to a new line and I'm going to just comment that

223
00:15:28.590 --> 00:15:31.620
out, and I guess I'm going to comment this out as well.

224
00:15:31.980 --> 00:15:39.960
So what I could do now if I hit period right here, I will be looking at methods that exist on the map

225
00:15:39.960 --> 00:15:40.950
class, right?

226
00:15:41.250 --> 00:15:43.380
So I'm going to move down to a new line.

227
00:15:43.980 --> 00:15:44.420
OK.

228
00:15:44.700 --> 00:15:46.470
And then I'm going to hit, period.

229
00:15:47.220 --> 00:15:47.520
All right.

230
00:15:47.550 --> 00:15:54.390
And so now I can use methods of the map class, and one of those methods is for each.

231
00:15:54.570 --> 00:15:59.850
In fact, there's a few there's a few interesting methods that I might want to play with here, but

232
00:15:59.970 --> 00:16:01.770
for now, we'll play with the for each method.

233
00:16:01.890 --> 00:16:08.190
So the cool thing about the for each method is it's pretty much it's very similar to the for each method

234
00:16:08.310 --> 00:16:11.940
that we've used with the Streams API, and it's by design.

235
00:16:11.940 --> 00:16:14.310
It's meant that it's meant to look like that.

236
00:16:15.240 --> 00:16:19.260
And this for each method, though, takes what's called a by consumer.

237
00:16:19.560 --> 00:16:24.750
That's just the fancy name for a particular interface that takes two inputs, right?

238
00:16:24.780 --> 00:16:28.230
So a method that takes two inputs y two inputs.

239
00:16:28.620 --> 00:16:34.380
Well, because this for each method, we'll call whatever function you put inside of it.

240
00:16:35.160 --> 00:16:41.910
As long as that function can take these two inputs, which are the key and the value, OK.

241
00:16:42.030 --> 00:16:44.220
And so for each key value pair.

242
00:16:45.150 --> 00:16:51.240
Think each row here, row, one row to row, three row four, right, these are key value pairs.

243
00:16:51.450 --> 00:17:00.060
So for each key value pair, the for each method will call your function passing in these two values

244
00:17:00.060 --> 00:17:01.710
and then you can do whatever you want with them.

245
00:17:03.290 --> 00:17:03.680
All right.

246
00:17:03.950 --> 00:17:04.880
So.

247
00:17:06.170 --> 00:17:08.770
We can use for each looks.

248
00:17:09.110 --> 00:17:14.540
I didn't mean to do that for each, and I can pass in a lambda.

249
00:17:16.670 --> 00:17:17.480
That takes.

250
00:17:18.020 --> 00:17:21.230
Let's see what will we call these, I guess, state?

251
00:17:22.560 --> 00:17:24.870
And salary.

252
00:17:27.700 --> 00:17:28.060
OK.

253
00:17:29.250 --> 00:17:35.340
And, you know, often I've been using single letter names in my expressions, but in this case, I

254
00:17:35.340 --> 00:17:39.930
just decided to spell them out because I normally would have done the first letter right and that would

255
00:17:39.930 --> 00:17:43.320
have been ambiguous and wouldn't have worked if I'd done SX and SX, right?

256
00:17:43.320 --> 00:17:44.580
So I just wrote them out.

257
00:17:45.120 --> 00:17:45.430
All right.

258
00:17:45.450 --> 00:17:53.400
So state and salary, and maybe what we want to do here is perhaps do a let's see here.

259
00:17:55.180 --> 00:17:58.420
Let's just do a system out of formatted system out.

260
00:18:00.720 --> 00:18:03.510
And so we'll do the state.

261
00:18:08.480 --> 00:18:12.100
And I don't know, maybe a little separator here symbol.

262
00:18:12.350 --> 00:18:13.670
And then the.

263
00:18:15.230 --> 00:18:17.330
Salary and then we need a new line.

264
00:18:19.240 --> 00:18:22.900
And then we can simply refer to the state and the salary like so.

265
00:18:23.710 --> 00:18:24.090
All right.

266
00:18:24.100 --> 00:18:27.160
So let's run that and see what we get.

267
00:18:29.180 --> 00:18:30.040
There we go.

268
00:18:30.860 --> 00:18:31.640
Look at that.

269
00:18:33.820 --> 00:18:35.020
So let's see here.

270
00:18:36.400 --> 00:18:37.360
Three billion.

271
00:18:37.510 --> 00:18:43.030
Now notice our values are huge here versus what we see here, because in the spreadsheet we're only

272
00:18:43.030 --> 00:18:45.340
using what was it, 100 records or so?

273
00:18:45.370 --> 00:18:45.640
Right?

274
00:18:46.600 --> 00:18:49.180
Whereas over here we're using five million records.

275
00:18:49.180 --> 00:18:54.640
So again, we're now, you know, processing the full entire data set, right?

276
00:18:54.640 --> 00:18:57.340
So these numbers are massive at this point.

277
00:18:59.550 --> 00:19:00.210
All right.

278
00:19:00.990 --> 00:19:08.250
OK, now let me see here before we close out on this lesson, let me just talk to you a little bit about

279
00:19:08.250 --> 00:19:12.540
another way that we maybe could have done this as well so that we use the for each here.

280
00:19:12.930 --> 00:19:20.400
But maybe we also could have done just comment that out for a bit and I will do another period.

281
00:19:22.020 --> 00:19:25.590
We also could have maybe referred to the entry set.

282
00:19:25.860 --> 00:19:28.260
So this is a set of entries.

283
00:19:28.440 --> 00:19:28.830
Right?

284
00:19:28.860 --> 00:19:33.390
And again, entries are the individual key value pairs, right?

285
00:19:33.810 --> 00:19:34.860
That's an entry.

286
00:19:34.860 --> 00:19:35.750
That's an entry.

287
00:19:35.760 --> 00:19:39.480
OK, so we could refer to the entry set.

288
00:19:39.720 --> 00:19:46.260
And then because it's a set, which is a collection, the collections, as you already know, generally

289
00:19:46.260 --> 00:19:51.030
speaking, offer a stream method right there, right?

290
00:19:51.210 --> 00:19:56.940
And so we could do the stream and then we could do a for each just like that as well, right?

291
00:19:56.940 --> 00:19:59.250
And then we could just pretty much do the exact same thing.

292
00:19:59.490 --> 00:20:02.430
This just cut right to the chase for us, right?

293
00:20:03.420 --> 00:20:07.920
So just another way of looking at it that we could have considered doing as well.

294
00:20:11.510 --> 00:20:16.700
And of course, you always could have just captured the map, and then separately, somewhere else in

295
00:20:16.700 --> 00:20:20.030
another piece of code decided what to do with the data in that map.

296
00:20:20.100 --> 00:20:20.450
Right?

297
00:20:21.710 --> 00:20:24.770
In fact, quite often, keep this in mind.

298
00:20:25.100 --> 00:20:26.000
Typically.

299
00:20:27.020 --> 00:20:33.620
As a professional developer, you won't actually be using print if I've mentioned this before, I'm

300
00:20:33.620 --> 00:20:34.700
just going to reiterate it.

301
00:20:34.910 --> 00:20:44.840
You won't typically be using print f as a real form of output for a professional program in Java.

302
00:20:45.080 --> 00:20:52.760
I would say the most popular use for Java programs, in fact, is either to transfer data back and forth

303
00:20:52.760 --> 00:21:02.480
between various data systems within a an organization or between organizations or and or to convey data

304
00:21:02.480 --> 00:21:05.250
and process data to be interacted with.

305
00:21:05.270 --> 00:21:09.170
In the end, a web browser in the form of a web application.

306
00:21:09.210 --> 00:21:15.110
OK, so you might have some program running in a browser, and that program is communicating with Java

307
00:21:15.110 --> 00:21:17.450
code that runs on a server.

308
00:21:17.960 --> 00:21:19.100
Behind the scenes?

309
00:21:19.160 --> 00:21:19.520
Right?

310
00:21:20.390 --> 00:21:26.510
And so in that case, you'd be writing Java code that might be grabbing all this data and then presenting

311
00:21:26.510 --> 00:21:28.980
that data to a web browser.

312
00:21:29.000 --> 00:21:29.390
OK.

313
00:21:29.660 --> 00:21:33.770
And so you would not be using system out that print and things of this sort.

314
00:21:34.190 --> 00:21:40.910
There are other mechanisms for sending that data basically over the internet or over a network and.

315
00:21:42.300 --> 00:21:48.960
We'll get into a little taste of that, though, that opens up a whole other course that I will be that

316
00:21:48.960 --> 00:21:50.400
I will be producing as well.

317
00:21:51.690 --> 00:21:52.010
All right.

318
00:21:52.020 --> 00:21:59.280
So at any rate, now you've seen a few really cool techniques for not only how to sum up and implement

319
00:21:59.280 --> 00:22:06.930
other easy mathematical functions on data, but also how you can group that data up in various ways.

320
00:22:07.530 --> 00:22:14.190
And in the Latin and in the next lesson, we'll go yet a little further still with a few more things

321
00:22:14.190 --> 00:22:16.440
that we can do with this grouping functionality.

322
00:22:16.450 --> 00:22:17.880
So see you in the next one.
