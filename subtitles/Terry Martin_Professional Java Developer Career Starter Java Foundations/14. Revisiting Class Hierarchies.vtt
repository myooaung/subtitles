WEBVTT
1
00:00:00.540 --> 00:00:01.530
All right, welcome back.

2
00:00:01.890 --> 00:00:09.240
Now in this lesson, I want to show you yet some more object oriented techniques that we can use here

3
00:00:09.420 --> 00:00:13.260
to further simplify or clean up our code.

4
00:00:13.650 --> 00:00:18.120
So if we jump over into, let's say, the it doesn't really matter.

5
00:00:18.450 --> 00:00:22.870
The programmer class and we kind of peruse the code here.

6
00:00:22.890 --> 00:00:30.810
One thing that stands out to me is that we still have quite a bit of code duplication.

7
00:00:31.080 --> 00:00:35.550
Now, I'm not necessarily talking about duplicated code within the class.

8
00:00:35.790 --> 00:00:43.710
I'm talking about duplicated code across the programmer, manager and analyst and CEO classes.

9
00:00:43.950 --> 00:00:51.570
If you recall, in fact, we really pretty much just copied and pasted the guts of one of the one of

10
00:00:51.570 --> 00:00:56.220
these classes to make the other two or three right that we did a lot of copy and pasting.

11
00:00:56.220 --> 00:01:01.530
And any time you're doing copying and pasting, that's a strong indication that you might need to rethink

12
00:01:01.560 --> 00:01:06.390
your coding there because you're going to have a lot of duplication by by virtue of the fact that you're

13
00:01:06.390 --> 00:01:07.470
copying and pasting.

14
00:01:07.890 --> 00:01:10.980
So the question becomes, what can we do about this?

15
00:01:11.130 --> 00:01:16.350
So I think the first thing we'd want to do is to do a little analysis as to where is the duplication

16
00:01:16.350 --> 00:01:16.860
of code.

17
00:01:17.250 --> 00:01:25.920
So obviously, all of these employee classes, employee derived classes have a first name, last name

18
00:01:25.920 --> 00:01:26.880
and a date of birth.

19
00:01:27.030 --> 00:01:28.830
So that's all duplicate code.

20
00:01:29.020 --> 00:01:29.400
Right?

21
00:01:30.510 --> 00:01:31.010
Let's see.

22
00:01:31.020 --> 00:01:40.470
And then in the constructor, the way that all of these classes uses this matter and has this find bit

23
00:01:40.470 --> 00:01:41.880
here, that's all duplicate.

24
00:01:42.240 --> 00:01:42.570
Right?

25
00:01:43.200 --> 00:01:47.820
At least all of this is duplicate code right here.

26
00:01:47.850 --> 00:01:53.130
So the question is, is there something we can do to reduce this duplication?

27
00:01:53.280 --> 00:01:55.280
And the answer obviously is yes, there is.

28
00:01:55.290 --> 00:02:00.010
And we've already actually seen and utilized a few of these techniques that I'm about to show you.

29
00:02:00.030 --> 00:02:06.810
So this will at least partially be a review of something that I introduced way back in the original

30
00:02:06.810 --> 00:02:13.320
object oriented module, the first one, but now will be a little more structured about it, I suppose.

31
00:02:13.710 --> 00:02:14.070
All right.

32
00:02:14.080 --> 00:02:24.180
So what we can do is we can implement a super class for all of these classes and then that super class,

33
00:02:24.180 --> 00:02:30.030
we can basically pull up a lot of the duplicate code and declarations.

34
00:02:30.360 --> 00:02:36.810
Now there are two ways that we could do this we could introduce a new class or.

35
00:02:37.050 --> 00:02:39.840
And I think this is what I'm going to prefer for now.

36
00:02:39.990 --> 00:02:44.430
We could take over this interface and basically just turn it into a class.

37
00:02:44.460 --> 00:02:44.850
OK.

38
00:02:45.000 --> 00:02:49.650
So I introduced you to this interface because it's an important technique for you to know about.

39
00:02:49.650 --> 00:02:54.570
But it is not the only one, and we don't have to keep this interface.

40
00:02:55.200 --> 00:03:01.380
So a lot of the benefits that we're getting from using this interface, we also can get by simply introducing

41
00:03:01.380 --> 00:03:02.250
a super class.

42
00:03:02.490 --> 00:03:10.230
So what we can do is come over here to this employee class or into this employee file, and I'm going

43
00:03:10.230 --> 00:03:15.930
to actually change its key word now from interface just to class.

44
00:03:16.200 --> 00:03:16.620
OK.

45
00:03:16.800 --> 00:03:20.730
Now, as soon as I do that, I'm told that there are lots of problems and of course, there are.

46
00:03:21.270 --> 00:03:27.090
Now one thing I'm going to have to do is that if I'm going to make this now a class, then I cannot

47
00:03:27.090 --> 00:03:31.080
have this method declaration with a semicolon like this.

48
00:03:31.320 --> 00:03:34.830
Methods and classes have to actually implement something.

49
00:03:35.310 --> 00:03:45.030
So for now, I'm just going to create a dummy implementation of this method that will return a zero

50
00:03:45.660 --> 00:03:46.260
like so.

51
00:03:46.620 --> 00:03:50.760
And I'm also going to go back to declaring this as public now.

52
00:03:51.750 --> 00:03:52.170
All right.

53
00:03:52.590 --> 00:03:59.340
Now I've got four related problems, and I bet those four related problems are related to the programmer,

54
00:03:59.340 --> 00:04:02.760
the manager, the CEO and the analyst.

55
00:04:03.240 --> 00:04:05.520
So let's just jump through them and see.

56
00:04:05.520 --> 00:04:05.760
Yeah.

57
00:04:05.970 --> 00:04:12.390
So we've got a red squiggly line here because I'm using the implements key word, which is only used

58
00:04:12.390 --> 00:04:18.270
when you're referring to an interface and this employee is no longer an interface, it is now a class.

59
00:04:18.630 --> 00:04:27.780
Now, if I want my programmer to be a type of employee class, I need to use a different keyword, which

60
00:04:27.780 --> 00:04:33.210
is extends OK, so I can just replace that with extend.

61
00:04:33.240 --> 00:04:40.260
So let me just remind you, in case you have forgotten how we were using extends and class hierarchies

62
00:04:40.260 --> 00:04:42.390
in the original object oriented module.

63
00:04:42.630 --> 00:04:47.040
So what we're doing is we're still saying that a programmer is a type of employee.

64
00:04:47.400 --> 00:04:55.140
But now, instead of it just being like an empty skeleton shell that declares certain methods that all

65
00:04:55.140 --> 00:04:59.700
employees should have, we are actually creating a real.

66
00:04:59.860 --> 00:05:00.940
Class, OK.

67
00:05:00.970 --> 00:05:07.660
A real class, and then that's why the get salary method that we have on the employee now needs to actually

68
00:05:07.660 --> 00:05:08.710
do something now.

69
00:05:08.710 --> 00:05:11.350
In our case, right now, it can just return to zero.

70
00:05:11.410 --> 00:05:17.380
OK, so it goes from being like an empty skeleton of something to an actual class, right?

71
00:05:17.420 --> 00:05:19.600
Going back over here to the programmer, though.

72
00:05:19.840 --> 00:05:23.500
So everything else looks OK for now.

73
00:05:23.740 --> 00:05:27.190
So then we'll just do the same thing for the manager will change.

74
00:05:27.190 --> 00:05:36.970
This implements to extends and we'll go to the CEO and do the same thing here extends.

75
00:05:37.540 --> 00:05:39.970
And same thing for the analyst.

76
00:05:40.510 --> 00:05:43.750
Got to the top extents.

77
00:05:44.350 --> 00:05:44.980
There we go.

78
00:05:45.160 --> 00:05:46.870
And now, no more errors.

79
00:05:47.530 --> 00:05:47.860
All right.

80
00:05:47.860 --> 00:05:49.120
So that's step one.

81
00:05:50.230 --> 00:05:58.270
Now, the other thing that we can do is we can refactor these four classes and pull up these three fields

82
00:05:58.270 --> 00:05:58.600
here.

83
00:05:58.660 --> 00:06:00.970
Last name, first name and date of birth and by pull up.

84
00:06:00.970 --> 00:06:06.760
What I mean is, if you think of this, what we're really doing now with this extends business is we're

85
00:06:06.760 --> 00:06:12.300
creating a class hierarchy and at the top of that hierarchy is the employee class.

86
00:06:12.310 --> 00:06:17.170
And then below it are these for what are now called subclasses, right?

87
00:06:17.350 --> 00:06:22.640
The analyst's CEO, manager and programmer class.

88
00:06:22.660 --> 00:06:23.170
OK.

89
00:06:24.010 --> 00:06:32.580
And so what we want to do now is we want to pull up these common fields up into the super class, OK,

90
00:06:32.650 --> 00:06:35.770
which will be common to all of these four subclasses.

91
00:06:36.160 --> 00:06:43.960
Now the way we can do that is to put our cursor on a variable, such as last name and right click go

92
00:06:43.960 --> 00:06:47.950
to refactor and then choose pull members up.

93
00:06:50.360 --> 00:06:58.730
All right, now here we are presented with a list of all of the so-called members of this class and

94
00:06:58.730 --> 00:07:02.510
by members, it just means the methods and the fields.

95
00:07:02.550 --> 00:07:10.370
OK, so I can select last name and first name and date of birth, for starters.

96
00:07:10.550 --> 00:07:15.170
And let's just go with that for right now, and we may pull some more things up in in a moment.

97
00:07:15.170 --> 00:07:16.540
But let's see what this looks like.

98
00:07:16.550 --> 00:07:20.990
So let's refactor by clicking this refactor button here.

99
00:07:22.710 --> 00:07:26.340
And look at that, those three fields just disappeared.

100
00:07:26.730 --> 00:07:27.720
Where did they go?

101
00:07:28.230 --> 00:07:33.150
So if we jump over to the employee class, look at that.

102
00:07:33.270 --> 00:07:34.050
There they are.

103
00:07:34.350 --> 00:07:35.630
And look at what happened.

104
00:07:35.640 --> 00:07:42.270
The IED not only moved those fields from the analyst class into the employee class, but it also changed

105
00:07:42.270 --> 00:07:45.780
their visibility from private to protected, which it needs.

106
00:07:45.990 --> 00:07:52.110
They need to be protected now if they are still to be accessed from within the subclasses.

107
00:07:52.140 --> 00:07:55.530
OK, so they had to move from being private to protected.

108
00:07:55.800 --> 00:07:59.790
The I.D. knew and understood that and did that for us automatically.

109
00:07:59.880 --> 00:08:05.930
OK, so then I'll go back over here to the analyst class and nothing is broken.

110
00:08:05.970 --> 00:08:08.490
It just moved those those three fields up.

111
00:08:08.700 --> 00:08:12.180
We're still referring to those fields within the code.

112
00:08:12.210 --> 00:08:17.820
Like here, this last name, this that last name now is on the employee class.

113
00:08:17.820 --> 00:08:20.760
And in fact, if I command, click on this to jump to it.

114
00:08:21.180 --> 00:08:23.970
It takes me to the employee class where it lives now.

115
00:08:24.030 --> 00:08:32.100
OK, so recall that properties and methods of a super class such as employee are inherited or can be

116
00:08:32.100 --> 00:08:37.080
inherited as long as they are visible, as long as they are at least protected or public.

117
00:08:37.260 --> 00:08:44.040
They can be inherited by subclasses and the subclasses are the child classes basically so in this case,

118
00:08:44.040 --> 00:08:46.800
analysts, CEO, manager and programmer.

119
00:08:47.070 --> 00:08:47.460
OK.

120
00:08:47.820 --> 00:08:48.170
All right.

121
00:08:48.180 --> 00:08:49.590
So that's all looking good.

122
00:08:49.620 --> 00:08:52.860
So now let's just go look at the other classes here now.

123
00:08:53.130 --> 00:08:56.610
I don't need to pull up last name, first name and date of birth here.

124
00:08:56.850 --> 00:08:58.440
It's already on the employee.

125
00:08:58.500 --> 00:09:06.390
So now these three lines here are redundant, so I'm going to simply delete them and look at that.

126
00:09:06.400 --> 00:09:10.920
When I do that, I don't break anything and I know I don't break anything because I'm looking over here

127
00:09:10.920 --> 00:09:13.330
in the gutter and there's no red marks anywhere.

128
00:09:13.530 --> 00:09:13.950
OK?

129
00:09:14.290 --> 00:09:16.530
And I will do the same thing for manager.

130
00:09:16.920 --> 00:09:23.040
I will select these three and just command, delete and programmer.

131
00:09:23.970 --> 00:09:25.830
Select those three again.

132
00:09:26.070 --> 00:09:27.810
Command, delete.

133
00:09:28.710 --> 00:09:29.250
All right.

134
00:09:29.280 --> 00:09:35.520
So got rid of a little bit of duplication there, but I think there's more that we can get rid of.

135
00:09:35.970 --> 00:09:36.420
All right.

136
00:09:36.430 --> 00:09:38.610
So let's see here.

137
00:09:38.640 --> 00:09:44.430
One that I think we're going to have to tackle is what we're doing down here in the constructor.

138
00:09:45.630 --> 00:09:45.960
Right.

139
00:09:46.110 --> 00:09:53.940
So basically, this first half of the constructor is taking in a string representation of an employee

140
00:09:53.940 --> 00:09:54.450
type.

141
00:09:54.840 --> 00:09:55.570
Let's see.

142
00:09:55.590 --> 00:10:03.030
And then we're creating a a matcher from the people pattern passing in that text that we received,

143
00:10:03.390 --> 00:10:08.130
getting the matter, checking to see if the match or matches the text.

144
00:10:08.340 --> 00:10:08.640
Right?

145
00:10:08.670 --> 00:10:10.530
In other words, does it apply?

146
00:10:10.680 --> 00:10:12.600
Does the Red X match the pattern?

147
00:10:13.020 --> 00:10:18.120
And if so, that means we can proceed to extract the last name, first name and date of birth out.

148
00:10:18.570 --> 00:10:23.610
So I think what we can do here is we can pull.

149
00:10:24.630 --> 00:10:31.470
All of this up into a constructor on the employee.

150
00:10:32.310 --> 00:10:37.890
Now, I don't believe we can do that in an automated fashion because we're not pulling up the entire

151
00:10:37.890 --> 00:10:38.580
constructor.

152
00:10:38.610 --> 00:10:42.330
We're going to just pull up these five or so lines.

153
00:10:42.540 --> 00:10:45.090
And so what I'm inclined to do here is just a copy.

154
00:10:45.780 --> 00:10:53.940
And then I'm going to jump up into the employee class and I'm going to simply generate a constructor

155
00:10:53.940 --> 00:10:54.480
right here.

156
00:10:54.480 --> 00:10:57.660
So I'm going to do a command in constructor.

157
00:10:57.690 --> 00:11:01.800
I'm not going to select any of these defaults, so I'm going to select none.

158
00:11:02.550 --> 00:11:10.620
Now I'm going to re introduce this constructor is taking a string, and I keep forgetting what did we

159
00:11:10.620 --> 00:11:14.340
call the input for the constructor because this will be the same.

160
00:11:14.610 --> 00:11:18.420
So we called it, Uh, let's see, where is that person?

161
00:11:18.430 --> 00:11:19.050
Text?

162
00:11:19.070 --> 00:11:27.370
OK, so I'll jump back over here and I will still call it person text like so then I will shift enter.

163
00:11:27.570 --> 00:11:29.280
And now I'm just going to paste.

164
00:11:29.550 --> 00:11:33.870
Now there's going to be some brokenness because we're not done bringing everything over yet.

165
00:11:34.230 --> 00:11:34.680
OK.

166
00:11:34.980 --> 00:11:41.880
So we'll just do a little piece at a time here, and it looks like I missed the closing for the f block

167
00:11:41.880 --> 00:11:42.090
here.

168
00:11:42.090 --> 00:11:47.490
So I'm going to close off this f block like so all right.

169
00:11:47.490 --> 00:11:51.840
So now we've got some errors, so we need to bring over this people pattern.

170
00:11:51.990 --> 00:11:54.480
So let's jump back over here to the programmer.

171
00:11:54.630 --> 00:11:55.320
So let's see.

172
00:11:55.320 --> 00:11:58.880
We've got this people pattern, which refers to the people rejects.

173
00:11:58.880 --> 00:12:01.800
So I think I want to copy both of these.

174
00:12:03.070 --> 00:12:03.490
All right.

175
00:12:03.520 --> 00:12:08.740
So now I'm comfortable to go ahead and pull these two fields up.

176
00:12:08.980 --> 00:12:16.780
And so again, I'm going to simply right click refactor pull members up and I need to make a note now.

177
00:12:16.780 --> 00:12:19.810
These are the people, -- and the people pattern.

178
00:12:20.930 --> 00:12:21.330
All right.

179
00:12:21.350 --> 00:12:25.520
So people ready access already selected and people pattern.

180
00:12:26.300 --> 00:12:28.880
All right, so I'm going to click refactor.

181
00:12:30.540 --> 00:12:37.730
And now those have disappeared, and if I jump in to the employee class, there they are at the top,

182
00:12:37.740 --> 00:12:42.960
they're in the wrong order, though, so the people rejects needs to come before the people patterns.

183
00:12:42.960 --> 00:12:49.920
So I will simply put my cursor on line eight and then do an option shift down arrow to move that below.

184
00:12:50.250 --> 00:12:51.630
Do you see what happened there now?

185
00:12:51.660 --> 00:12:56.190
Because the people rig X has to be defined before I can use it?

186
00:12:56.490 --> 00:12:57.330
All right.

187
00:12:58.080 --> 00:13:06.030
And so now that red error went away, and now I also need the date time for matter here.

188
00:13:06.450 --> 00:13:12.540
So I'm going to jump back over to the programmer class, and I think I'm just going to pull that up

189
00:13:12.540 --> 00:13:13.230
to someone.

190
00:13:13.560 --> 00:13:14.010
All right.

191
00:13:14.100 --> 00:13:17.460
So I'm going to right click on.

192
00:13:17.730 --> 00:13:25.740
I'm going to right click on the formatter, refactor pull members up, and I'm going to select that

193
00:13:26.040 --> 00:13:29.730
formatter, which is already checked and click Refactor.

194
00:13:30.240 --> 00:13:30.620
All right.

195
00:13:30.630 --> 00:13:33.240
So now that just pulled that guy up.

196
00:13:34.220 --> 00:13:38.180
And I will jump over to the employee class and confirm.

197
00:13:39.510 --> 00:13:43.110
And there it is, and now those errors went away.

198
00:13:43.530 --> 00:13:44.130
Very good.

199
00:13:44.790 --> 00:13:50.910
OK, so now let's go back over to the programmer class and now I've got an error here and let's see

200
00:13:50.910 --> 00:13:51.590
what this is saying.

201
00:13:51.600 --> 00:13:58.890
There is no default constructor available in com neutrino service employees, dot employee.

202
00:13:59.130 --> 00:13:59.420
All right.

203
00:13:59.430 --> 00:14:10.470
So what we're going to want to do here is first off, all of this code here is now already on the employee

204
00:14:10.470 --> 00:14:11.070
class.

205
00:14:11.310 --> 00:14:20.190
So we want this code to be called on the employee class, and there's a nice way that we can do this.

206
00:14:21.030 --> 00:14:27.810
So when we're in a constructor and we want to allow the constructor of a subclass to be able to call

207
00:14:27.810 --> 00:14:33.060
a constructor of a super class, what we can actually do is to actually call super.

208
00:14:33.570 --> 00:14:40.810
Now this is going to call the constructor that we have already been creating on the employee class.

209
00:14:40.830 --> 00:14:42.960
And if you recall, I'll jump over here real quick.

210
00:14:43.350 --> 00:14:47.040
This constructor requires a string, right?

211
00:14:47.340 --> 00:14:49.540
And so we'll need to pass that in now.

212
00:14:49.560 --> 00:14:50.880
We have that right here.

213
00:14:51.030 --> 00:14:53.460
So all we need to do is just pass that in person.

214
00:14:53.460 --> 00:14:55.440
Text semicolon.

215
00:14:55.620 --> 00:14:56.100
All right.

216
00:14:56.220 --> 00:15:03.360
So now that's allowing us to to still do all of that code that we had here, but do it all in one call

217
00:15:03.360 --> 00:15:06.350
here because we moved it into the employee class.

218
00:15:06.360 --> 00:15:06.810
OK?

219
00:15:07.920 --> 00:15:14.880
So what that's going to do, just as a quick reminder, is that's going to take that string and use

220
00:15:14.880 --> 00:15:22.380
the rejects stuff to parse it, to get the last name, first name and date of birth and set them on

221
00:15:22.560 --> 00:15:23.550
the instance.

222
00:15:23.550 --> 00:15:25.620
OK, so that'll happen for us now.

223
00:15:25.650 --> 00:15:31.590
Nice and easy in the employee class, and therefore we won't have to do it down here in the programmer

224
00:15:31.590 --> 00:15:32.790
class also.

225
00:15:33.270 --> 00:15:33.600
All right.

226
00:15:33.630 --> 00:15:37.740
Now we've got a red mark here that's referring to the people matcher.

227
00:15:37.890 --> 00:15:39.570
Let's see what we can do about that.

228
00:15:39.840 --> 00:15:43.780
So this people matcher got pulled into the employee class.

229
00:15:43.800 --> 00:15:44.610
Let's find it.

230
00:15:46.950 --> 00:15:48.880
OK, so it's right here.

231
00:15:48.900 --> 00:15:56.850
Here's the people matcher now, currently we're creating it inside of the constructor so that we can

232
00:15:56.850 --> 00:16:00.210
use it down here in the block.

233
00:16:01.440 --> 00:16:05.760
Now we only create an instance of it one time per employee.

234
00:16:06.150 --> 00:16:11.880
And so really, this is really just kind of uncovering what I would say is probably a bit of a design

235
00:16:11.880 --> 00:16:12.630
flaw here.

236
00:16:12.900 --> 00:16:13.200
All right.

237
00:16:13.210 --> 00:16:19.350
So to resolve the problem that we see in the programmer, all we need to do is to pull this.

238
00:16:19.350 --> 00:16:26.520
People match up as a field instead of as a local variable, so we can just right click on the people

239
00:16:26.520 --> 00:16:28.620
match or refactor.

240
00:16:30.110 --> 00:16:31.940
And then introduce field.

241
00:16:33.020 --> 00:16:35.780
Like so and then I'm just going to hit return.

242
00:16:36.500 --> 00:16:37.160
There we go.

243
00:16:37.730 --> 00:16:41.690
So we're initializing it in the constructor, which is fine.

244
00:16:41.720 --> 00:16:46.700
In fact, we have to because that's the only time when we will have access to this person text, which

245
00:16:46.700 --> 00:16:47.900
is what goes in here.

246
00:16:48.260 --> 00:16:48.470
All right.

247
00:16:48.470 --> 00:16:53.990
So we're initializing it in the constructor, but we're declaring it as a field now.

248
00:16:54.170 --> 00:16:54.590
OK?

249
00:16:54.830 --> 00:17:02.300
And by doing so, subclasses now will be able to access this people match or object as well.

250
00:17:02.600 --> 00:17:02.850
All right.

251
00:17:02.870 --> 00:17:09.080
Now there's one other thing that will have to do we we pulled this up into a field so that the subclasses

252
00:17:09.080 --> 00:17:13.010
would be able to make use of it as well, but they won't be able to do that while it's private.

253
00:17:13.190 --> 00:17:16.610
It actually needs to be protected like so.

254
00:17:17.060 --> 00:17:17.570
All right.

255
00:17:17.750 --> 00:17:22.790
So now if we jump back over to the programmer class, there we go.

256
00:17:23.300 --> 00:17:27.080
So now that people matter is no longer in error.

257
00:17:27.410 --> 00:17:27.770
All right.

258
00:17:27.920 --> 00:17:31.880
So we're now accessing this from the super class itself.

259
00:17:32.420 --> 00:17:33.200
All right.

260
00:17:33.770 --> 00:17:35.030
Let's see.

261
00:17:35.900 --> 00:17:41.840
We've got one too many curly braces now because I had one left over, which is why we have a little

262
00:17:42.080 --> 00:17:43.940
error here on one curly brace.

263
00:17:43.940 --> 00:17:47.900
I'm going to leave that one because that one lines up with the constructor.

264
00:17:47.900 --> 00:17:50.360
So this is the one that should not exist.

265
00:17:50.360 --> 00:17:53.260
So I'm going to just delete that line.

266
00:17:54.500 --> 00:18:01.670
And then all of this is now indented too far to the right because it was inside of a and if block.

267
00:18:01.880 --> 00:18:07.700
So now I'm just going to bring it over by one by doing a shift tab to just unintended.

268
00:18:08.300 --> 00:18:11.210
And that's looking pretty decent now.

269
00:18:11.340 --> 00:18:15.740
Now let's see if there's anything else that might make sense to pull up.

270
00:18:16.310 --> 00:18:16.760
Let's see.

271
00:18:16.760 --> 00:18:23.300
We've got this programmer pattern, so there should be specific to the programmer and not generic for

272
00:18:23.300 --> 00:18:25.710
employees, but let's see.

273
00:18:25.730 --> 00:18:31.740
So the programmer pattern is created from the programmer rejects, and that is very specific.

274
00:18:31.760 --> 00:18:38.360
So I think I'm comfortable to leave these two here so far.

275
00:18:38.630 --> 00:18:47.500
Now this money format, however, I have a feeling that guy is not specific to a programmer.

276
00:18:47.510 --> 00:18:52.000
I think we can pull this guy up and we won't break anything at all.

277
00:18:52.010 --> 00:18:53.450
So I'm going to put my cursor there.

278
00:18:53.450 --> 00:18:56.180
Right click Refactor.

279
00:18:57.960 --> 00:18:59.280
Paul members up.

280
00:19:01.180 --> 00:19:02.620
Money format is checked.

281
00:19:03.370 --> 00:19:04.780
Click Refactor.

282
00:19:05.470 --> 00:19:06.050
Look at that.

283
00:19:06.070 --> 00:19:07.720
I don't think we broke anything at all.

284
00:19:07.930 --> 00:19:16.630
And while we're at it, I think the two string method is not specific either to the programmer.

285
00:19:16.810 --> 00:19:22.960
I think we have the exact same implementation of two string on all of the subclasses, so this is a

286
00:19:22.960 --> 00:19:25.330
great candidate to pull up as well.

287
00:19:26.080 --> 00:19:36.340
So I can right click on the two string method, choose refactor pull members up and it's already selected

288
00:19:36.340 --> 00:19:37.930
and then click Refactor.

289
00:19:38.710 --> 00:19:39.390
There we go.

290
00:19:39.400 --> 00:19:42.280
And so that just disappeared and it is now.

291
00:19:43.650 --> 00:19:46.140
Over here on the employee class.

292
00:19:47.690 --> 00:19:49.160
And we haven't broken anything.

293
00:19:50.930 --> 00:19:56.510
Now, jump back over to the programmer class and now the programmer class.

294
00:19:58.160 --> 00:20:01.820
Pretty much fits inside of one screen view here.

295
00:20:02.540 --> 00:20:08.750
Now I've got a few imports that are no longer being used, and that's why they're in gray like this

296
00:20:09.560 --> 00:20:15.680
and I can do something called cleaning up the imports, where the IED will simply look for unused imports

297
00:20:15.680 --> 00:20:16.850
and then just get rid of them.

298
00:20:17.060 --> 00:20:20.930
To do that, I can simply do a command option.

299
00:20:20.940 --> 00:20:24.170
Oh, and here it's called optimize imports.

300
00:20:24.180 --> 00:20:28.040
OK, so now it just deleted the unused imports.

301
00:20:28.280 --> 00:20:28.760
OK.

302
00:20:30.200 --> 00:20:34.700
And it's nice to do that from time to time, just to kind of do a little housekeeping.

303
00:20:35.690 --> 00:20:36.090
All right.

304
00:20:36.110 --> 00:20:40.220
So I think this is a pretty good refactoring for programmer.

305
00:20:40.400 --> 00:20:47.210
So in the next lesson, we will apply these same refactoring to the other remaining three classes and

306
00:20:47.210 --> 00:20:50.090
then we'll run it all and make sure that it's all still working.

307
00:20:50.390 --> 00:20:50.810
All right.

308
00:20:51.140 --> 00:20:52.820
And so I'll see in the next one.
