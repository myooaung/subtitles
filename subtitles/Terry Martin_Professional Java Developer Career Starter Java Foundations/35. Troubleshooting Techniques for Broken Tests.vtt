WEBVTT
1
00:00:00.390 --> 00:00:05.460
All right, so picking up from where we left off, let's go ahead and just try running all of the tests

2
00:00:05.460 --> 00:00:05.850
now.

3
00:00:05.850 --> 00:00:11.010
So let me open that up and I will just jump over here to the test class.

4
00:00:11.010 --> 00:00:18.270
Actually, I guess I can close that jump up here to the top and select that and just run everything

5
00:00:18.270 --> 00:00:18.480
now.

6
00:00:18.480 --> 00:00:19.770
And let's see what happens.

7
00:00:21.230 --> 00:00:21.620
All right.

8
00:00:21.650 --> 00:00:24.890
As I suspected, we do have a few failures.

9
00:00:25.160 --> 00:00:30.260
All right, and we actually are ignoring the find all now, we may need to do something with that because

10
00:00:30.260 --> 00:00:33.380
I'm pretty sure we're going to see some real issues with the find all.

11
00:00:33.380 --> 00:00:35.410
But let's see what else we've got here.

12
00:00:35.420 --> 00:00:40.730
So here's one can find person by IED with home address.

13
00:00:40.740 --> 00:00:42.270
So what's the issue here?

14
00:00:42.290 --> 00:00:43.430
We're getting a null pointer.

15
00:00:43.430 --> 00:00:54.260
Exception cannot invoke long value because the return type of the get value by Alias is null.

16
00:00:55.190 --> 00:00:57.980
So let's click on this line.

17
00:00:57.980 --> 00:01:03.470
119 Get value by alias and this is on the extract person.

18
00:01:03.620 --> 00:01:07.550
So we're trying to get the person's I.D..

19
00:01:08.090 --> 00:01:12.770
Now, what this seems to be implying is that we're trying to find a column.

20
00:01:13.010 --> 00:01:17.870
Now, I don't know what was in the prefix here, but we're trying to find a column with the term ID

21
00:01:18.140 --> 00:01:18.740
in it.

22
00:01:18.890 --> 00:01:24.140
And one way or another, that's returning back with a null from the database.

23
00:01:24.260 --> 00:01:31.310
And I think the issue here is that we're trying to set a primitive long to a null.

24
00:01:31.430 --> 00:01:36.290
There is no way to convert a null value into a primitive long.

25
00:01:36.320 --> 00:01:36.710
OK.

26
00:01:36.860 --> 00:01:39.350
So I see two ways of solving this.

27
00:01:39.710 --> 00:01:45.980
I could solve it on face value by simply making this a wrapper long instead of a primitive long, which

28
00:01:45.980 --> 00:01:48.200
would then allow this person idea to be null.

29
00:01:48.380 --> 00:01:51.650
But the bigger question in my mind is why is this null at all?

30
00:01:51.740 --> 00:01:53.000
I don't think it should be.

31
00:01:53.600 --> 00:02:01.100
So what I'm really thinking here is to maybe stick a breakpoint on here and run just that one test and

32
00:02:01.100 --> 00:02:04.640
stop here and see what column is it actually trying to retrieve?

33
00:02:04.790 --> 00:02:09.830
And how come there apparently isn't a column with whatever that name is?

34
00:02:10.040 --> 00:02:11.060
So let's try that.

35
00:02:11.060 --> 00:02:18.620
So I'm going to double click on this one failing method test method here and then come up here and run

36
00:02:18.620 --> 00:02:20.030
this in debug mode.

37
00:02:22.730 --> 00:02:23.450
All right.

38
00:02:23.690 --> 00:02:27.070
So what is our alias here?

39
00:02:31.160 --> 00:02:36.410
Parent underscore is the alias, and let's also see.

40
00:02:37.350 --> 00:02:41.190
Our stack over here to see like, how did we get here?

41
00:02:41.370 --> 00:02:49.410
OK, so parent underscore I.D. Let's go check our school for find my I.D. parent underscore ID that

42
00:02:49.410 --> 00:02:58.080
should exist, and we are using the get value by alias method, which honors aliases and we can also

43
00:02:58.080 --> 00:03:00.870
peek inside of this result set.

44
00:03:01.230 --> 00:03:03.660
So here's our results set variable right here.

45
00:03:04.020 --> 00:03:09.300
So I'm going to click on that and then I can click on this result here.

46
00:03:11.440 --> 00:03:14.620
And then I can go inside of this current row.

47
00:03:14.920 --> 00:03:17.770
All right, so that's clearly an ID right there.

48
00:03:17.980 --> 00:03:20.530
And if I open this up, let's see.

49
00:03:20.800 --> 00:03:26.920
So what I want to see now is what is the maybe the metadata that's associated with that column?

50
00:03:26.920 --> 00:03:27.700
Perhaps.

51
00:03:28.300 --> 00:03:28.570
All right.

52
00:03:28.600 --> 00:03:36.100
So in this result here, if I come down here to expressions and then open that up, I can see here that

53
00:03:36.100 --> 00:03:42.580
one of the expressions, which pretty much aligns with the columns is parent that ID as parent ID.

54
00:03:42.730 --> 00:03:47.830
And then I can even expand that and I can see right here that there is indeed an alias called Parent

55
00:03:47.860 --> 00:03:48.760
Underscore ID.

56
00:03:49.000 --> 00:03:50.980
I don't know if I can dig into this more.

57
00:03:51.070 --> 00:03:52.150
OK, that's far enough.

58
00:03:52.160 --> 00:03:58.000
So Parent Underscore ID is an actual alias in this results set.

59
00:03:58.180 --> 00:04:01.630
So let's see what happens if I step over this.

60
00:04:02.380 --> 00:04:03.940
So that did not blow up.

61
00:04:04.030 --> 00:04:12.880
OK, so I'm going to let this run because maybe something about my test is causing this method to get

62
00:04:12.880 --> 00:04:14.260
called more than once.

63
00:04:14.590 --> 00:04:16.990
So I'm going to let that resume.

64
00:04:18.190 --> 00:04:20.890
OK, so yes, it is getting called again.

65
00:04:22.750 --> 00:04:27.640
And I still have an alias of parent I.D. here, so I'm guessing this should be OK.

66
00:04:27.670 --> 00:04:29.260
In fact, they will step over it.

67
00:04:30.240 --> 00:04:32.860
Ah, so that one just blew up.

68
00:04:34.260 --> 00:04:35.010
OK.

69
00:04:35.040 --> 00:04:40.320
OK, so that's interesting, so I'm going to run this again now, because now I know that the second

70
00:04:40.320 --> 00:04:45.180
time that I step over that, the second time that I iterate over this, that's when it's going to blow

71
00:04:45.180 --> 00:04:45.320
up.

72
00:04:45.330 --> 00:04:48.030
So then I'll pay closer attention to what's going on.

73
00:04:48.450 --> 00:04:48.770
All right.

74
00:04:48.780 --> 00:04:51.000
So I'm going to run that again.

75
00:04:52.410 --> 00:04:57.330
All right, so this first time, I can just skip over that or let it run all the way through, so I

76
00:04:57.330 --> 00:04:58.950
just click that button to run through.

77
00:04:59.070 --> 00:05:02.190
And now I'm back in here again for a second time now.

78
00:05:02.190 --> 00:05:07.770
This time I'm going to pay more attention, so I'm going to open up this result set.

79
00:05:09.030 --> 00:05:11.400
And then I'm going to go down to result.

80
00:05:12.660 --> 00:05:16.770
And all and current row.

81
00:05:16.890 --> 00:05:22.530
OK, so the current row has an ID of two three five one, apparently.

82
00:05:22.710 --> 00:05:25.020
Let's see what's in this rose object here.

83
00:05:25.260 --> 00:05:29.610
Yeah, there's there's the ID going to close that.

84
00:05:30.210 --> 00:05:32.250
Let's look in here in expressions.

85
00:05:33.240 --> 00:05:35.630
Parent ID's, parent underscore I.D..

86
00:05:37.470 --> 00:05:38.190
And there's.

87
00:05:38.310 --> 00:05:44.820
There it is, parent underscore ID, so there is an alias called Parent Underscore ID.

88
00:05:45.990 --> 00:05:52.080
So what I'm going to do now is I'm going to jump into this get value by alias method here, so I can

89
00:05:52.080 --> 00:05:54.450
do that right here, step into rather.

90
00:05:55.290 --> 00:05:59.040
So I'm going to step into that and then I'm going to step over.

91
00:05:59.760 --> 00:06:07.740
So there's the column count, which is 30, and then we're setting up a loop to loop over all of the

92
00:06:07.740 --> 00:06:08.940
columns now.

93
00:06:09.180 --> 00:06:10.740
So I'm going to step over that.

94
00:06:11.900 --> 00:06:19.820
And now we're saying if the current alias, which is child underscore I.D. equals whatever the metadata

95
00:06:19.820 --> 00:06:27.470
column label is for the current column index, which is the first index, if that's equal, then we

96
00:06:27.470 --> 00:06:28.630
found what we're looking for.

97
00:06:28.640 --> 00:06:33.620
So currently we're looking for the column whose alias is child I.D..

98
00:06:34.070 --> 00:06:36.710
So I think this is going to get skipped over.

99
00:06:37.550 --> 00:06:39.080
Yet that got skipped over.

100
00:06:41.160 --> 00:06:47.610
Now, I don't really want to have to iterate over this 30 times, so what I can do is I can set up what's

101
00:06:47.610 --> 00:06:53.280
called a watch variable so that I can keep an eye on what this value is right here.

102
00:06:53.580 --> 00:06:56.610
Each time I iterate over this little loop quickly.

103
00:06:56.850 --> 00:06:59.970
So to do that, I can select all of this and then right click on it.

104
00:07:01.190 --> 00:07:04.970
And come down here and click on add to watches.

105
00:07:05.450 --> 00:07:13.430
So now this expression is being evaluated in real time for me, and currently it is equal to parent

106
00:07:13.430 --> 00:07:14.900
underscore first name.

107
00:07:14.930 --> 00:07:19.910
OK, so now I can just quickly iterate over this for loop.

108
00:07:21.120 --> 00:07:21.900
Like so.

109
00:07:22.530 --> 00:07:24.960
Date of birth, salary.

110
00:07:25.410 --> 00:07:28.950
Email and now child I.D..

111
00:07:29.070 --> 00:07:31.230
And that is what the alias is equal to.

112
00:07:31.230 --> 00:07:32.730
Alias is equal detailed ID.

113
00:07:32.910 --> 00:07:34.950
So now this should work.

114
00:07:35.190 --> 00:07:37.860
So now we shouldn't skip over this.

115
00:07:37.870 --> 00:07:45.210
If Bloch because alias, which is currently set the Child ID, will in fact equal child ID, which is

116
00:07:45.210 --> 00:07:47.460
the result of this entire expression here.

117
00:07:47.470 --> 00:07:51.810
So now the the thread should step in to this line.

118
00:07:52.290 --> 00:07:53.670
So let's see that.

119
00:07:54.630 --> 00:07:54.960
Yep.

120
00:07:55.380 --> 00:08:02.160
So it stepped in, and now we're going to get this value here and we can even set up a watch for that

121
00:08:02.670 --> 00:08:03.180
to.

122
00:08:05.090 --> 00:08:06.350
Add to watches.

123
00:08:06.980 --> 00:08:08.360
OK, so here.

124
00:08:09.410 --> 00:08:16.010
This value is null, which really I think is just telling us essentially that there is no child for

125
00:08:16.010 --> 00:08:21.200
this particular parent, which makes sense because most of the parents in our database don't have children.

126
00:08:21.200 --> 00:08:25.580
And I think this use case that we're testing here is one where we don't have a child.

127
00:08:25.640 --> 00:08:25.980
All right.

128
00:08:26.000 --> 00:08:28.210
So the child ID is null.

129
00:08:28.220 --> 00:08:31.850
So let's see what happens now if we keep stepping over.

130
00:08:32.270 --> 00:08:36.320
So we're going to return a null right here.

131
00:08:37.160 --> 00:08:39.380
Oh, now that's kind of interesting.

132
00:08:39.500 --> 00:08:43.820
Our alias prefix is currently set to child.

133
00:08:43.940 --> 00:08:45.170
I don't think it should be.

134
00:08:45.200 --> 00:08:49.220
Why is our alias prefix set the child and not parent?

135
00:08:49.490 --> 00:08:52.040
Let's see here what called this.

136
00:08:52.850 --> 00:08:57.440
So we got to this extract person call from here.

137
00:08:57.820 --> 00:09:02.720
Ah, well, because we're calling the extract person to get a child now.

138
00:09:03.290 --> 00:09:05.130
Ah, and there we have it.

139
00:09:05.150 --> 00:09:05.420
OK.

140
00:09:05.450 --> 00:09:05.870
OK.

141
00:09:06.170 --> 00:09:12.740
So we're trying to extract the child from a record that doesn't have a child.

142
00:09:13.130 --> 00:09:20.990
And so what should happen in this case is that this method probably should just return either a null

143
00:09:21.020 --> 00:09:25.520
or an empty optional of a of a child, one or the other.

144
00:09:27.780 --> 00:09:35.520
So what's going to happen here is that this method is going to return a null, but a null value cannot

145
00:09:35.520 --> 00:09:38.580
be assigned to a primitive long.

146
00:09:38.760 --> 00:09:42.650
And so it's going to blow up with a null pointer exception.

147
00:09:42.660 --> 00:09:43.980
That's what's happening here.

148
00:09:44.490 --> 00:09:51.840
So maybe what we want to do in this case is, first off, I think we are going to need to use a wrapper

149
00:09:51.840 --> 00:09:56.790
long instead of a primitive long so that this can be assigned a null, perhaps.

150
00:09:57.510 --> 00:10:03.600
And then we may want to simply have a test right after this line that says something like if person

151
00:10:03.600 --> 00:10:10.650
idea is null, then either return a null or return an empty optional of a person, something along those

152
00:10:10.650 --> 00:10:11.010
lines.

153
00:10:11.040 --> 00:10:13.350
OK, so now we see what this issue is.

154
00:10:13.380 --> 00:10:18.150
OK, so I'm going to go ahead and let that run through and it's going to blow up.

155
00:10:18.660 --> 00:10:25.920
And so the first thing we'll do is just make this a wrapper long that would prevent the null pointer

156
00:10:25.920 --> 00:10:27.630
exception from occurring.

157
00:10:28.530 --> 00:10:41.010
And now what we could do is just test right here, if person I.D. is null, then return.

158
00:10:41.290 --> 00:10:44.910
Now, I think we probably really should use an optional here.

159
00:10:45.180 --> 00:10:46.530
So I'm going to say it this way.

160
00:10:46.530 --> 00:10:49.530
I'm going to say return optional.

161
00:10:49.860 --> 00:10:50.520
Empty.

162
00:10:52.720 --> 00:10:57.780
I need to close that off now I'm getting the red squiggly, because currently this method is designed

163
00:10:57.780 --> 00:11:00.870
to not return an optional, but to return an actual person.

164
00:11:01.080 --> 00:11:07.950
So we want to change this signature now to return an optional of a person.

165
00:11:08.760 --> 00:11:12.480
And that means down here now we're going to have to do the same.

166
00:11:12.780 --> 00:11:18.930
So return an optional of person notice.

167
00:11:18.930 --> 00:11:25.710
I'm not using of knowable here because I presume that if I got this far that I do have a real person

168
00:11:25.710 --> 00:11:29.370
object, I'm stopping it short, though up here.

169
00:11:29.880 --> 00:11:34.710
If I don't have an ID, then surely I shouldn't even bother with the rest of these lines.

170
00:11:34.710 --> 00:11:40.470
And so let's just immediately short circuit all of that and just return an empty, optional.

171
00:11:40.560 --> 00:11:44.520
Now, of course, that's going to cause problems up here now.

172
00:11:44.790 --> 00:11:47.430
So first, let's just address this one.

173
00:11:47.910 --> 00:11:53.940
So I think what I will do here is make this just take an optional person.

174
00:11:58.440 --> 00:11:59.190
Like so.

175
00:12:00.690 --> 00:12:05.400
And now we need to decide what are we going to do if we're now dealing with optional?

176
00:12:05.460 --> 00:12:09.000
I don't even want to add an empty, optional child here.

177
00:12:09.270 --> 00:12:16.050
So what we really want to do is conditionally add the child if the child isn't empty, right?

178
00:12:16.230 --> 00:12:19.530
Let's see if we can do something kind of fancy with optional here.

179
00:12:19.530 --> 00:12:24.210
So maybe we can say something like child dot if present.

180
00:12:25.710 --> 00:12:27.570
Then final.

181
00:12:28.510 --> 00:12:30.530
Parent, can we do this?

182
00:12:30.550 --> 00:12:32.720
Can we use a method reference, hey, look at that.

183
00:12:32.740 --> 00:12:33.700
I think we can.

184
00:12:35.290 --> 00:12:40.820
So let's take out the Java doc for the fifth president, by the way, because let's see here if a value

185
00:12:40.820 --> 00:12:44.920
US president performs to give action with the value otherwise does nothing.

186
00:12:44.920 --> 00:12:51.280
So that's good because it looks like the if president will unwrap the value inside of the optional,

187
00:12:51.280 --> 00:12:56.860
which is exactly what we want here and then pass that in to the add child method, which is why this

188
00:12:56.860 --> 00:12:58.150
isn't giving us an error.

189
00:12:58.240 --> 00:13:00.700
And that's exactly the behavior that we want.

190
00:13:00.970 --> 00:13:02.410
So that's quite nice.

191
00:13:02.620 --> 00:13:09.730
That way, we don't have to explicitly write if child that is present, then final parent died, add

192
00:13:09.730 --> 00:13:12.190
child and then add the we don't have to write all of that.

193
00:13:12.400 --> 00:13:13.930
This is more concise.

194
00:13:14.230 --> 00:13:15.880
OK, so that's quite lovely.

195
00:13:16.300 --> 00:13:18.370
Then what do we want to do appear?

196
00:13:18.940 --> 00:13:23.580
I think for now, let's just call get.

197
00:13:24.160 --> 00:13:27.760
The reason I'm doing that for now is because two things.

198
00:13:27.760 --> 00:13:33.610
First off, I'm inclined to let our tests tell me if I need to do more than this.

199
00:13:34.060 --> 00:13:40.360
And secondly, if our framework is calling this method and we're getting this far, there is supposed

200
00:13:40.360 --> 00:13:42.010
to be at least a parent.

201
00:13:42.270 --> 00:13:44.140
That parent is supposed to exist.

202
00:13:44.830 --> 00:13:50.140
So I don't believe that there should generally be a situation where we get this far.

203
00:13:50.440 --> 00:13:55.300
And yet we can't extract this parent properly and the parent doesn't exist.

204
00:13:55.480 --> 00:14:01.070
If there is no parent existing, then this method shouldn't even get called because our results set

205
00:14:01.090 --> 00:14:03.850
shouldn't have any rose returning from it.

206
00:14:03.970 --> 00:14:10.660
In other words, you know, we're trying to do a fine by ID in this particular case, and if there is

207
00:14:10.660 --> 00:14:17.710
no record in the database with that parent ID or what that person ID, then there will be no results

208
00:14:17.950 --> 00:14:19.930
returned from our results set.

209
00:14:20.530 --> 00:14:23.800
And therefore this method should not even get called at all.

210
00:14:24.220 --> 00:14:26.140
That's what I believe should be happening.

211
00:14:26.530 --> 00:14:26.850
All right.

212
00:14:26.860 --> 00:14:31.130
So let's go ahead and rerun all of the tests.

213
00:14:31.180 --> 00:14:31.540
Let's see.

214
00:14:31.540 --> 00:14:35.110
So we had four tests that failed before, so let's see what we have now.

215
00:14:36.420 --> 00:14:37.050
Oh, wow.

216
00:14:37.170 --> 00:14:38.430
All of them fell now.

217
00:14:40.410 --> 00:14:40.920
OK.

218
00:14:41.250 --> 00:14:45.060
Let's click on this and see Oh, because I'm back in the database, am I?

219
00:14:45.460 --> 00:14:47.220
No, no, I'm not back in the database.

220
00:14:47.220 --> 00:14:53.370
So here's I think what's happening right now is that one of our debug sessions is still running and

221
00:14:53.370 --> 00:14:55.260
this this can happen sometimes.

222
00:14:55.560 --> 00:15:01.260
So what I'm going to do now, so now I need to find where that debug session is that may be running

223
00:15:01.260 --> 00:15:01.950
right now.

224
00:15:02.520 --> 00:15:06.670
So what I can do is come up here to run and look at that right there.

225
00:15:06.690 --> 00:15:08.670
Stop rerun failed tests.

226
00:15:08.820 --> 00:15:10.890
So yeah, something was still running there.

227
00:15:10.890 --> 00:15:13.050
So I'm going to click that, OK?

228
00:15:13.350 --> 00:15:14.580
Hopefully, that killed it.

229
00:15:14.790 --> 00:15:17.340
And now let me try again to run all the tests.

230
00:15:18.320 --> 00:15:19.640
OK, that looks a lot better.

231
00:15:20.060 --> 00:15:21.200
So hope you caught that.

232
00:15:21.830 --> 00:15:23.540
Oh, and that's looking a lot better, too.

233
00:15:23.840 --> 00:15:24.830
Hey, look at that.

234
00:15:25.070 --> 00:15:26.630
It looks like we fixed everything.

235
00:15:26.750 --> 00:15:27.170
Wow.

236
00:15:27.560 --> 00:15:30.860
Honestly, I was sort of expecting that more would still be broken.

237
00:15:31.700 --> 00:15:38.270
So that's cool, though I do think now we if I were to come in here and allow this, find all to run,

238
00:15:38.270 --> 00:15:39.950
we might run into issues again.

239
00:15:40.370 --> 00:15:44.660
So let's go ahead and try to address this issue now with the fine doll.

240
00:15:44.930 --> 00:15:52.760
And I think all we need to do is just revise its query so that it won't actually be capable of retrieving

241
00:15:52.760 --> 00:15:54.890
every single record in the database.

242
00:15:55.040 --> 00:15:58.490
We will limit it to perhaps like 100 records or so.

243
00:15:58.640 --> 00:16:00.590
OK, so select everything.

244
00:16:00.590 --> 00:16:06.950
Here's our here's our Find All sequel from people, and what we can do is simply something like that.

245
00:16:07.490 --> 00:16:10.520
First 100 rows only.

246
00:16:11.030 --> 00:16:11.690
There you go.

247
00:16:12.050 --> 00:16:17.540
Now I could parameter rise this number and we could make it so that we could change that programmatically

248
00:16:17.540 --> 00:16:17.990
or something.

249
00:16:18.000 --> 00:16:22.700
But for now, we'll just do it this way and then we'll jump over to our test.

250
00:16:23.180 --> 00:16:25.580
And I think that was kind of towards the bottom.

251
00:16:25.940 --> 00:16:26.480
There it is.

252
00:16:26.480 --> 00:16:29.120
Disabled note that's the low data one.

253
00:16:30.290 --> 00:16:33.860
There it is, this guy right here, so I'm going to remove that.

254
00:16:34.460 --> 00:16:36.650
And now let's run all the tests again.

255
00:16:39.430 --> 00:16:43.180
All right, and we've got one failed test, and can we guess which one it is yet?

256
00:16:43.360 --> 00:16:50.500
Is this can find all and column not found for alias parent I.D. OK, so we're not going to try to fix

257
00:16:50.500 --> 00:16:51.700
this in this lesson.

258
00:16:51.820 --> 00:16:56.020
I just wanted to confirm that we would have an issue there as I thought we would OK.

259
00:16:56.230 --> 00:16:58.740
So we'll we'll fix this one in the next lesson.

260
00:16:58.750 --> 00:17:00.490
All right, so I'll see you in the next one.
