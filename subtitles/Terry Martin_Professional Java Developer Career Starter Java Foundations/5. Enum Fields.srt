1
00:00:00,090 --> 00:00:07,500
All right, so in the last lesson, we learned that enemies are special forms of classes, and as such,

2
00:00:07,500 --> 00:00:10,140
they can have methods on them.

3
00:00:10,140 --> 00:00:17,220
And armed with that knowledge, we were able to take the original get value method that we had on the

4
00:00:17,220 --> 00:00:25,230
card class and actually just relocated essentially to our rank enum class.

5
00:00:25,530 --> 00:00:25,980
OK.

6
00:00:26,070 --> 00:00:30,060
And we just had to do a very minor refactoring there to make it work.

7
00:00:30,330 --> 00:00:31,770
But it all works right.

8
00:00:31,920 --> 00:00:37,800
If enemies are special forms of classes on which methods can work.

9
00:00:38,190 --> 00:00:40,510
What else do you think we can do with any new?

10
00:00:40,540 --> 00:00:44,970
Well, enemies can also have fields or properties.

11
00:00:45,150 --> 00:00:51,570
So with that information, I want to show you something else that's kind of neat that we can do with

12
00:00:51,570 --> 00:00:52,260
an enum.

13
00:00:52,980 --> 00:01:02,070
So as you see here, I am showing that when we define these constants of an enum, you can kind of think

14
00:01:02,070 --> 00:01:09,510
of it in your head as being somewhat equivalent to these lines here, where you're creating individual

15
00:01:09,510 --> 00:01:12,600
instances of that enum type.

16
00:01:13,020 --> 00:01:14,340
Kind of like this.

17
00:01:14,370 --> 00:01:21,390
OK, now if you think of it in this way, that will help you when I show you the next thing that you

18
00:01:21,390 --> 00:01:21,930
can do.

19
00:01:22,440 --> 00:01:31,380
So as I just said a moment ago, we can also include fields or variables, properties, instance variables

20
00:01:31,380 --> 00:01:34,420
as they're also called on enemies.

21
00:01:34,440 --> 00:01:44,610
So watch what happens if I create a new line here and I define a field, some make it private, and

22
00:01:44,610 --> 00:01:52,530
let's say I create a field that is an integer and oh, I don't know what if I call it value?

23
00:01:53,580 --> 00:01:55,260
Anybody know where I'm going with this?

24
00:01:55,470 --> 00:02:01,410
I can actually use this field in many of the ways that I could use a field on any other class.

25
00:02:01,410 --> 00:02:09,690
So I could, for example, replace this code here and just say something like return value.

26
00:02:10,380 --> 00:02:13,820
OK, so no errors right now.

27
00:02:13,830 --> 00:02:19,770
As you may imagine, if I were to go rerun all of the tests, they should fail like right now.

28
00:02:19,770 --> 00:02:20,640
And in fact, you know what?

29
00:02:20,640 --> 00:02:24,120
I will go ahead and rerun the tests just to prove that.

30
00:02:25,090 --> 00:02:25,520
OK.

31
00:02:25,690 --> 00:02:31,960
So we just re ran all of the tests on the card class, and every single one of them is failing, which

32
00:02:31,960 --> 00:02:33,460
is exactly what should happen.

33
00:02:33,460 --> 00:02:40,630
And the reason they're failing is because we're now returning this integer value called value, which

34
00:02:40,660 --> 00:02:42,820
hasn't been set to anything at all.

35
00:02:42,850 --> 00:02:43,210
Right.

36
00:02:43,510 --> 00:02:49,720
So right now, this code isn't very useful, but we can make it quite useful.

37
00:02:49,930 --> 00:02:51,520
And let me show you how.

38
00:02:51,970 --> 00:02:59,830
So now that we have this field here, we can actually define a new constructor for this enum.

39
00:02:59,830 --> 00:03:05,440
So again, take a look at these vake lines of code that I've got here, where I'm telling you that each

40
00:03:05,440 --> 00:03:14,860
time we define a constant for an enum, it is fairly equivalent to having a line of code like this where

41
00:03:14,860 --> 00:03:22,750
we have can automatically generated constructor that is sort of automatically setting the text of the

42
00:03:22,750 --> 00:03:25,840
constant on a property that we can't see here.

43
00:03:25,840 --> 00:03:28,280
But but it exists called name.

44
00:03:28,300 --> 00:03:28,720
OK.

45
00:03:28,840 --> 00:03:30,010
That's what this is doing.

46
00:03:30,190 --> 00:03:33,370
However, we can actually define our own.

47
00:03:33,370 --> 00:03:36,430
We can kind of like you can almost think of it as override.

48
00:03:36,430 --> 00:03:41,410
We can kind of override this default constructor, if you will.

49
00:03:41,620 --> 00:03:43,990
Let me show you what that looks like.

50
00:03:44,230 --> 00:03:47,020
So we can create a new constructor.

51
00:03:47,020 --> 00:03:51,880
And in fact, I can even do a command in and just tell it to generate a constructor.

52
00:03:51,910 --> 00:03:54,010
OK, now look at that.

53
00:03:54,490 --> 00:04:04,000
As soon as I did that, the ID said, Do you want to use this new value field as an input for the constructor?

54
00:04:04,000 --> 00:04:10,360
So that intelligence was smart enough to know that if I'm trying to make my own constructor on an enum

55
00:04:10,570 --> 00:04:17,140
and that enum already has a field variable defined on it, there's a good chance.

56
00:04:17,260 --> 00:04:23,110
I'm probably wanting to use that variable as an input for my constructor.

57
00:04:23,120 --> 00:04:24,760
So yes, we do want to do that.

58
00:04:24,760 --> 00:04:28,330
So I'm going to click OK here and now look what it just did.

59
00:04:28,810 --> 00:04:35,200
It generated this new constructor, which again, is almost basically just the method that returns a

60
00:04:35,200 --> 00:04:37,550
new instance of an object, right?

61
00:04:37,570 --> 00:04:44,830
It takes as input an integer called value, and then it sets that value on this internal field called

62
00:04:44,830 --> 00:04:45,790
value, OK?

63
00:04:46,000 --> 00:04:49,720
However, as soon as this constructor got created.

64
00:04:49,750 --> 00:04:56,320
Now all of these constants, these enum constants are in error.

65
00:04:56,860 --> 00:04:58,600
Why do you think that would be?

66
00:04:59,710 --> 00:05:07,240
Well, again, if you look down here at what I said is kind of like the default way of thinking about

67
00:05:07,450 --> 00:05:09,380
defining each of these constants.

68
00:05:09,400 --> 00:05:16,870
What you see is that you can think of it as though there was a default constructor that was taking just

69
00:05:16,870 --> 00:05:21,310
one input, which is the constant name itself.

70
00:05:21,820 --> 00:05:26,950
But now I've created a new constructor that takes an integer.

71
00:05:27,250 --> 00:05:27,730
OK.

72
00:05:27,940 --> 00:05:37,630
And so what's happening is if each of these definitions is equivalent to this, well, then this pattern

73
00:05:37,630 --> 00:05:41,050
doesn't match this constructor here.

74
00:05:41,290 --> 00:05:49,060
This constructor is expecting an integer, and there is no integer to be found anywhere in any of these

75
00:05:49,060 --> 00:05:49,890
definitions.

76
00:05:49,930 --> 00:05:50,350
OK.

77
00:05:50,650 --> 00:05:58,660
And so what we need to do to get these out of error is we now need to pass in this new value, as we

78
00:05:58,660 --> 00:06:00,400
would with any constructor.

79
00:06:00,520 --> 00:06:02,740
So let me show you what that's going to look like.

80
00:06:02,890 --> 00:06:08,620
So all we need to do is use parentheses just like you would with a constructor.

81
00:06:08,830 --> 00:06:11,170
And then we can pass in an integer now.

82
00:06:11,470 --> 00:06:16,270
So what if I want an ace to simply be equivalent to a one?

83
00:06:16,660 --> 00:06:18,250
I can just do that.

84
00:06:19,340 --> 00:06:19,880
To.

85
00:06:21,350 --> 00:06:29,420
Three, four, five, six, eight, nine and 10, 10 and 10.

86
00:06:30,520 --> 00:06:31,000
All right.

87
00:06:31,360 --> 00:06:41,350
So now I'm explicitly setting whatever value I want to associate with these constants, so I no longer

88
00:06:41,350 --> 00:06:47,380
need to rely on the ordinal property and method that is inherited by all enemies.

89
00:06:47,380 --> 00:06:55,420
And instead, I can just take control and say, I want this instance to be associated with this value.

90
00:06:55,450 --> 00:06:56,020
One.

91
00:06:56,050 --> 00:06:56,500
OK.

92
00:06:56,950 --> 00:06:58,330
And so on and so forth.

93
00:06:58,330 --> 00:07:07,000
And the nice thing is that down here, I can explicitly set all of these face cards to 10 or whatever

94
00:07:07,000 --> 00:07:08,650
value I might want to.

95
00:07:09,220 --> 00:07:15,310
And by doing so, my get value method now can simply return whatever.

96
00:07:15,310 --> 00:07:17,980
I set that to this this value here.

97
00:07:18,100 --> 00:07:23,430
OK, now my enum can have additional properties.

98
00:07:23,440 --> 00:07:30,700
If I wanted it to, I could have arbitrary, fake, ridiculous properties like, you know, private

99
00:07:31,390 --> 00:07:34,900
string favorite song, right?

100
00:07:34,930 --> 00:07:41,680
I could just have ridiculous things here, and I could add that to the constructor here if I wanted

101
00:07:41,680 --> 00:07:42,040
to.

102
00:07:42,220 --> 00:07:49,570
Now, as soon as I would do that, these would be an error again until I specified a string as a second

103
00:07:49,570 --> 00:07:52,540
parameter in these basically constructors.

104
00:07:52,570 --> 00:07:52,930
Right?

105
00:07:53,050 --> 00:07:54,550
That's pretty much what these are.

106
00:07:55,060 --> 00:08:01,900
So now having done this, we should be able to rerun these tests and they should go back to working

107
00:08:01,900 --> 00:08:02,300
again.

108
00:08:02,320 --> 00:08:02,980
Let's see.

109
00:08:05,030 --> 00:08:05,540
Look at that.

110
00:08:05,780 --> 00:08:07,010
Back to working again.

111
00:08:07,280 --> 00:08:14,830
So now, you know, a couple of ways that you can associate some data with Constance on an enum.

112
00:08:14,840 --> 00:08:21,950
If the data is numeric and and makes sense to be in some kind of order and you put your enemies in order.

113
00:08:21,980 --> 00:08:30,680
You may be able to rely on the ordinal method, but if you want arbitrary values or just values of whatever

114
00:08:30,680 --> 00:08:35,750
you want and they don't even have to be numeric, they could be anything really.

115
00:08:36,200 --> 00:08:44,450
Then you could always just define a field on the enum itself and then define that field as an input

116
00:08:44,450 --> 00:08:51,440
on a custom constructor for the enum and then make the associations that way as well.

117
00:08:51,980 --> 00:09:00,920
OK, now knowing this, let's go take a look at this suit because there's something kind of interesting

118
00:09:00,920 --> 00:09:04,160
that I think we might be able to do with this.

119
00:09:04,520 --> 00:09:13,070
So let's say that when we create an instance of a card, we may want to override the card classes to

120
00:09:13,070 --> 00:09:13,940
string method.

121
00:09:13,940 --> 00:09:22,910
And if you recall, the two string method is a method that all classes and enemies to inherit from the

122
00:09:23,060 --> 00:09:33,290
object superclass, and it enables any instance of a class to be represented as text as a string, right?

123
00:09:33,560 --> 00:09:34,550
So we can do.

124
00:09:34,580 --> 00:09:40,790
We can pass any object to the system that out that print line method and it will print out it'll print

125
00:09:40,790 --> 00:09:41,720
something, right?

126
00:09:41,750 --> 00:09:51,410
So what if we wanted the suit enum to be able to display the actual symbols for these words, right?

127
00:09:51,410 --> 00:09:53,150
Clubs, diamonds, spades.

128
00:09:53,600 --> 00:09:58,160
It is my understanding, and I promise you, as I'm saying this and recording it, I haven't actually

129
00:09:58,160 --> 00:09:58,970
tried this out.

130
00:09:59,120 --> 00:10:00,770
I'm kind of going out on a limb here.

131
00:10:00,770 --> 00:10:05,390
So hopefully I don't have to delete this part of the video that I'm making right now.

132
00:10:05,540 --> 00:10:14,360
But what I'm thinking of doing here is let's let's associate the text symbol for each of these words

133
00:10:14,570 --> 00:10:20,240
so that when we want to print one of them, we actually get that symbol printed out.

134
00:10:20,270 --> 00:10:20,720
OK.

135
00:10:20,930 --> 00:10:22,760
So here's what I'm thinking will do.

136
00:10:23,090 --> 00:10:26,090
Well, first off, do you want to try taking a stab at this?

137
00:10:26,090 --> 00:10:32,810
So what I have in mind is obviously we'll have a field that will be a string or a character.

138
00:10:32,820 --> 00:10:38,990
You might choose to do a character and we will associate that field with each of these constants.

139
00:10:39,260 --> 00:10:47,360
And then the key here is that I'm thinking we'll use Google and search for Unicode characters that represent

140
00:10:47,360 --> 00:10:53,060
these words because I think those characters are in the Unicode Standard.

141
00:10:53,060 --> 00:11:00,650
And if you don't remember what Unicode is, Unicode is the world standard for associating a number,

142
00:11:00,650 --> 00:11:08,480
a really big number with letters and characters of most of the writing symbols of most of the world.

143
00:11:08,540 --> 00:11:09,080
OK.

144
00:11:09,350 --> 00:11:13,550
So remember, a capital A is a 65, for example.

145
00:11:13,790 --> 00:11:14,180
All right.

146
00:11:14,510 --> 00:11:14,870
All right.

147
00:11:14,880 --> 00:11:20,600
So if you want to try that on your own, you can pause this video and go try that and meet back up with

148
00:11:20,600 --> 00:11:20,810
me.

149
00:11:20,810 --> 00:11:23,900
Otherwise I'm going to move on and see if I can work it out, too.

150
00:11:24,260 --> 00:11:24,680
All right.

151
00:11:24,690 --> 00:11:28,910
So first thing I'm going to do is to define a new field.

152
00:11:28,910 --> 00:11:31,040
And I don't know.

153
00:11:31,040 --> 00:11:32,770
Let's try making it a character.

154
00:11:33,970 --> 00:11:35,470
I think we should be able to do that.

155
00:11:35,800 --> 00:11:36,190
All right.

156
00:11:36,220 --> 00:11:37,210
Private care.

157
00:11:37,390 --> 00:11:39,400
And I'm going to call it symbol.

158
00:11:39,820 --> 00:11:40,300
All right.

159
00:11:40,450 --> 00:11:46,990
And then let's make a new constructor that will use that.

160
00:11:47,770 --> 00:11:48,640
And there we go.

161
00:11:49,180 --> 00:11:51,950
And then we just need to fix these.

162
00:11:52,060 --> 00:11:52,390
All right.

163
00:11:52,400 --> 00:11:55,360
So here now we need to do a little googling.

164
00:11:55,660 --> 00:11:58,390
So let me open up a browser window.

165
00:11:59,770 --> 00:12:08,670
Let me open up a tab and I'm going to Google Unicode Spades.

166
00:12:09,550 --> 00:12:10,180
Look at that.

167
00:12:10,300 --> 00:12:12,610
Google already knows what I'm looking for.

168
00:12:13,540 --> 00:12:14,260
There we go.

169
00:12:15,310 --> 00:12:22,330
Playing cards in Unicode and looks like we've got the Unicode symbols.

170
00:12:22,360 --> 00:12:26,530
Are the Unicode for those particular symbols right there?

171
00:12:27,100 --> 00:12:27,760
Perfect.

172
00:12:28,180 --> 00:12:28,690
All right.

173
00:12:28,720 --> 00:12:30,440
Now to use these.

174
00:12:30,460 --> 00:12:32,680
So what was my first thing here?

175
00:12:32,680 --> 00:12:33,350
Clubs?

176
00:12:33,370 --> 00:12:36,280
OK, so clubs is right.

177
00:12:36,280 --> 00:12:37,120
Here it is.

178
00:12:37,120 --> 00:12:39,550
Unicode Symbol two six six seven.

179
00:12:39,730 --> 00:12:42,000
Now I want to show you something else.

180
00:12:42,010 --> 00:12:48,940
I don't want you to think that I just memorize every single aspect of Java and everything we do as a

181
00:12:48,940 --> 00:12:50,290
professional programmer.

182
00:12:50,440 --> 00:12:56,800
You can't possibly memorize every single trick in technique because there are lots of techniques that

183
00:12:56,800 --> 00:12:58,420
you just don't use that frequently.

184
00:12:58,720 --> 00:13:04,780
And one technique that I never use, in fact, I don't know that I've ever done this before is to look

185
00:13:04,780 --> 00:13:11,830
up a Unicode symbol and then specify that in a character in Java.

186
00:13:11,860 --> 00:13:14,260
I don't think I've ever done that before.

187
00:13:14,680 --> 00:13:22,210
And so I may have to look that up myself, and I'm not going to edit the video and cut myself doing

188
00:13:22,210 --> 00:13:25,900
that because I don't want you to think like, I just remember every single thing.

189
00:13:26,020 --> 00:13:26,950
I remember a lot.

190
00:13:27,820 --> 00:13:32,380
I absolutely do remember a lot, but I don't remember everything, and I especially don't remember everything.

191
00:13:32,530 --> 00:13:37,990
Four four techniques that I don't even use or may never have use, such as what I'm about to do here.

192
00:13:38,380 --> 00:13:44,470
So what I do know is that I'm going to need parentheses and I'm going to need single ticks.

193
00:13:44,620 --> 00:13:49,270
And by the way, I don't know if I pointed this out, but be careful when you're using these single

194
00:13:49,270 --> 00:13:52,270
ticks if you haven't already discovered this issue.

195
00:13:52,480 --> 00:13:58,560
The single tick character is the same character that's on the same key with the regular quotation marks,

196
00:13:58,570 --> 00:13:58,870
right?

197
00:13:59,350 --> 00:14:05,050
And the reason I call this out is because there's another key on the keyboard, especially on United

198
00:14:05,050 --> 00:14:10,340
States or North American Kurdy keyboards that's on the same key with the tilde symbol.

199
00:14:10,360 --> 00:14:10,750
OK.

200
00:14:10,930 --> 00:14:12,000
That's a back tick.

201
00:14:12,010 --> 00:14:12,910
You don't want that.

202
00:14:13,420 --> 00:14:13,750
All right.

203
00:14:13,960 --> 00:14:18,370
So to specify a Unicode symbol, let me see if I can wingless now.

204
00:14:18,640 --> 00:14:22,300
I think it might be backslash you.

205
00:14:23,770 --> 00:14:32,050
And then the numbers, two, six, six, three, two, six, six three.

206
00:14:33,580 --> 00:14:35,980
Hey, I might be on to something here.

207
00:14:36,430 --> 00:14:40,780
I'm going to go with this for for a minute and see, maybe I didn't need to look this up, OK?

208
00:14:41,050 --> 00:14:43,210
I really do know almost everything.

209
00:14:45,010 --> 00:14:45,610
We'll see.

210
00:14:46,180 --> 00:14:49,570
I'm not going to get too cocky until I actually run this and see what happens.

211
00:14:50,260 --> 00:14:50,650
All right.

212
00:14:50,680 --> 00:14:56,440
And then Diamonds is two six six six.

213
00:14:57,010 --> 00:14:58,180
All right, so single.

214
00:14:58,180 --> 00:15:01,720
Take backslash you two six six six.

215
00:15:02,530 --> 00:15:03,340
All right.

216
00:15:04,000 --> 00:15:20,740
And then Hearts is two six six five backslash you two six six five and then Spades is two six six zero.

217
00:15:20,740 --> 00:15:24,070
Backslash you two six six zero.

218
00:15:25,240 --> 00:15:26,110
All right.

219
00:15:27,190 --> 00:15:30,940
Well, we're going to find out shortly if this actually works.

220
00:15:31,060 --> 00:15:39,220
So what I am thinking of doing next is to override the two string method of the Enum.

221
00:15:39,400 --> 00:15:44,920
We can do that because again, in rooms are really just special classes, right?

222
00:15:45,190 --> 00:15:51,510
So I will put my cursor at the bottom of this constructor here and I will create a new line.

223
00:15:51,520 --> 00:15:56,080
Be careful that you didn't put your cursor inside of the constructor method that would not be the place

224
00:15:56,080 --> 00:15:56,470
to go.

225
00:15:57,040 --> 00:15:57,500
All right.

226
00:15:57,520 --> 00:15:59,650
And so I can generate an override.

227
00:15:59,650 --> 00:16:04,230
I can override an existing method with a control o and bam.

228
00:16:04,240 --> 00:16:05,050
It already knew.

229
00:16:05,050 --> 00:16:07,150
Hey, there's only one method for you to override.

230
00:16:07,150 --> 00:16:09,420
You must want to override the two string method.

231
00:16:09,430 --> 00:16:10,180
Yes, I do.

232
00:16:10,420 --> 00:16:13,170
All right, so I will click OK, all right.

233
00:16:13,180 --> 00:16:19,060
And now my implementation of the two string method will simply return the symbol.

234
00:16:19,090 --> 00:16:23,850
However, I cannot directly say return this symbol.

235
00:16:24,040 --> 00:16:31,370
And the reason I cannot do that is because symbol is a character and two string returns a string.

236
00:16:31,390 --> 00:16:33,100
That's why it's called two string, right?

237
00:16:33,310 --> 00:16:38,620
So I need to convert this character into a string, right?

238
00:16:38,650 --> 00:16:43,870
There are quite a number of ways I could do that, but one way that's coming to mind right now, and

239
00:16:43,870 --> 00:16:48,520
honestly, I don't know that this is the best or the worst way, but it's a way that I'm thinking of

240
00:16:48,520 --> 00:16:49,150
right now.

241
00:16:49,330 --> 00:16:56,860
So the character primitive also has a wrapper class version, which is character.

242
00:16:56,950 --> 00:17:03,400
And if you recall, when we're wanting to convert numbers to strings, we're able to use the wrapper

243
00:17:03,400 --> 00:17:10,720
class versions of the numbers and then we have a pass method on those numeric wrapper classes to convert

244
00:17:10,720 --> 00:17:11,770
them into a string.

245
00:17:12,040 --> 00:17:16,750
Let's see if the character class has something equivalent in BAM.

246
00:17:16,750 --> 00:17:18,790
Look at that as soon as I type it in.

247
00:17:19,300 --> 00:17:23,320
The very first thing that comes up is probably exactly what I want to string.

248
00:17:23,350 --> 00:17:23,980
There we go.

249
00:17:24,340 --> 00:17:31,330
So I will just surround my character with the two string method there, and it looks like we're good

250
00:17:31,330 --> 00:17:32,020
to go there.

251
00:17:32,080 --> 00:17:32,380
All right.

252
00:17:33,040 --> 00:17:33,970
All right.

253
00:17:34,180 --> 00:17:38,740
So now to test this out, I'm going to create another test.

254
00:17:38,740 --> 00:17:41,500
I'm going to create a test class for the suit.

255
00:17:41,710 --> 00:17:49,180
So I will do a command shift T and then I will hit Enter four, create new test and I will accept all

256
00:17:49,180 --> 00:17:52,450
the defaults and then I will do a shift.

257
00:17:52,450 --> 00:17:59,260
Enter maybe a couple of times and I will create a new test with a command in and choose test method.

258
00:17:59,740 --> 00:18:04,870
And I will make a method and I will call it I don't know heart.

259
00:18:06,480 --> 00:18:07,260
Print.

260
00:18:09,100 --> 00:18:14,050
Heart, all right now, really, I don't really even need a test here.

261
00:18:14,080 --> 00:18:18,940
What I really want to see this actually print out on the screen, but you know what I'll make.

262
00:18:18,940 --> 00:18:20,800
I'll make a failing test first.

263
00:18:21,010 --> 00:18:22,270
Okay, just to see.

264
00:18:22,600 --> 00:18:23,740
So here's what I will do.

265
00:18:23,740 --> 00:18:32,500
I will say assert equals and I will pass in a string and I will say I'm expecting the word heart.

266
00:18:33,160 --> 00:18:37,120
And then I will create a suit.

267
00:18:39,030 --> 00:18:46,140
And I will reference the heart's constant just like that.

268
00:18:46,620 --> 00:18:51,060
Now this will be an interesting test because I'm making a few assumptions here.

269
00:18:51,210 --> 00:18:58,740
I'm assuming that a certain equals will be kind of forced, if you will, to see that since my expected

270
00:18:58,740 --> 00:19:07,560
is a heart string, a string with the word heart that ultimately it should call the two string method

271
00:19:07,560 --> 00:19:09,360
of suit eckhart's.

272
00:19:09,540 --> 00:19:12,360
Honestly, I'm not 100 percent certain that that's what it's going to do.

273
00:19:12,390 --> 00:19:13,650
Let's try it out and see.

274
00:19:14,010 --> 00:19:15,450
So I'm going to run this.

275
00:19:16,940 --> 00:19:17,280
All right.

276
00:19:17,300 --> 00:19:22,610
So it failed, as I expect, but the real thing here is that because it failed, it should show me the

277
00:19:22,610 --> 00:19:25,220
difference and that's actually what I wanted to see.

278
00:19:25,490 --> 00:19:27,650
So let's all look at that.

279
00:19:27,680 --> 00:19:33,890
Look at that expected was the word heart and actual is a symbol of a heart.

280
00:19:34,190 --> 00:19:37,370
So it looks like that actually works.

281
00:19:37,520 --> 00:19:38,960
That's pretty cool, huh?

282
00:19:39,230 --> 00:19:39,620
All right.

283
00:19:39,650 --> 00:19:40,910
Now to fix this.

284
00:19:41,030 --> 00:19:49,910
What I can do is get rid of that string there and instead reference the actual Unicode.

285
00:19:50,510 --> 00:19:54,980
And the heart was two six six five two six six five.

286
00:19:55,610 --> 00:20:06,020
And notice now that Java is permitting me to define this Unicode character inside of the string, just

287
00:20:06,020 --> 00:20:09,840
as well as it allowed me to define it inside of a character.

288
00:20:09,880 --> 00:20:14,390
OK, so the only difference is here I'm using double ticks or quotes, right?

289
00:20:14,720 --> 00:20:21,770
And then inside of the suit enum, I used single ticks.

290
00:20:22,190 --> 00:20:25,130
OK, but the Unicode part is the same.

291
00:20:25,760 --> 00:20:26,130
All right.

292
00:20:26,150 --> 00:20:27,860
And so now this should pass.

293
00:20:28,160 --> 00:20:34,340
And as a result of passing, though, I will no longer get to actually see the output, which is again

294
00:20:34,340 --> 00:20:39,560
one of the reasons why I started the test off with something that I knew would fail because I wanted

295
00:20:39,560 --> 00:20:44,660
it to show me the difference so that I could get a chance to see the actual heart character there.

296
00:20:44,780 --> 00:20:47,090
So let's run this again, and it should pass.

297
00:20:48,080 --> 00:20:50,780
OK, so it actually did not pass.

298
00:20:51,170 --> 00:20:52,700
And let's see why.

299
00:20:53,060 --> 00:21:02,900
So it's saying it was expecting a string of value with that heart there, but instead it returned a

300
00:21:02,900 --> 00:21:06,980
different object, not a string, but a suit.

301
00:21:07,430 --> 00:21:16,100
So what's happening here is that now that I've switched to an actual object, J Unit is comparing the

302
00:21:16,100 --> 00:21:21,620
entire object representation and not just the string value.

303
00:21:21,800 --> 00:21:29,150
So if I want this comparison to work properly, probably the easiest thing to do here is to explicitly

304
00:21:29,150 --> 00:21:31,190
call the two string method.

305
00:21:31,700 --> 00:21:32,810
Let's try it now.

306
00:21:33,260 --> 00:21:33,800
There we go.

307
00:21:33,980 --> 00:21:40,850
So yeah, and probably for future reference, if what you're really wanting to compare is the string

308
00:21:40,850 --> 00:21:45,260
representation, it never hurts to just explicitly call the two string method.

309
00:21:45,470 --> 00:21:52,880
I knew I was living a little bit on the edge by relying on J Unit to eventually meander its way towards

310
00:21:52,880 --> 00:21:56,840
calling the two string method, and that worked fine for the first version of this.

311
00:21:56,840 --> 00:22:02,600
But as soon as I put this inside of quotes and this became an object, J Unit decided to compare them

312
00:22:02,930 --> 00:22:05,450
differently than just calling to string.

313
00:22:05,810 --> 00:22:06,020
All right.

314
00:22:06,050 --> 00:22:09,470
Not a big deal, but something worth worth keeping in mind.

315
00:22:09,800 --> 00:22:15,650
So let's go ahead and close out on this lesson, and I can think of a couple of other cool things we

316
00:22:15,650 --> 00:22:16,430
will do.

317
00:22:16,520 --> 00:22:23,000
We'll go ahead and integrate a little piece of code to actually print a card on the screen with the

318
00:22:23,000 --> 00:22:26,840
system that out that print line maybe and actually show the symbols.

319
00:22:26,880 --> 00:22:31,970
OK, so whenever we create a card and we print that card, we'll get the cool little symbol and the

320
00:22:31,970 --> 00:22:33,290
value or something like that.

321
00:22:33,320 --> 00:22:35,990
We'll do that in the next video, though, so I'll see you there.
