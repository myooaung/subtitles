1
00:00:00,570 --> 00:00:07,770
All right, so in this lesson, we are going to take a look at how to perform some sorting or ordering

2
00:00:07,770 --> 00:00:14,250
of our objects using the Streams API, because that's some of the functionality that we played with

3
00:00:14,250 --> 00:00:16,950
in the previous Collections module.

4
00:00:17,490 --> 00:00:25,140
So turning back to our code base here and we're still in the streams stuff class.

5
00:00:26,220 --> 00:00:36,270
So first thing we'll do is let's just try sorting these objects, sorting these employees by the the

6
00:00:36,270 --> 00:00:37,320
salary, OK?

7
00:00:37,830 --> 00:00:46,620
So luckily enough, as you might have imagined, the Streams API has built in support for ordering our

8
00:00:46,620 --> 00:00:47,250
objects.

9
00:00:47,400 --> 00:00:53,370
So the first question is where might we want to stick and ordering function?

10
00:00:53,370 --> 00:00:55,440
Call right where in this pipeline?

11
00:00:55,770 --> 00:01:02,380
So if we think about this for a moment, the line's method here is just breaking.

12
00:01:03,270 --> 00:01:08,370
This is just breaking out the individual lines of this string.

13
00:01:08,820 --> 00:01:15,660
I suppose that could be one place where we could do some, some, some sorting, perhaps some ordering,

14
00:01:15,660 --> 00:01:16,230
perhaps.

15
00:01:16,890 --> 00:01:24,900
But since we want to order them by the by the salary, we wouldn't have the salary data available to

16
00:01:24,900 --> 00:01:28,650
us at that point because at that point, it's just text, right?

17
00:01:28,860 --> 00:01:35,780
The salaries are getting calculated after these text lines become actual objects of type employee,

18
00:01:35,790 --> 00:01:36,150
right?

19
00:01:36,420 --> 00:01:39,120
That's when we are actually able to calculate the salary.

20
00:01:39,130 --> 00:01:45,720
So that wouldn't do us a whole lot of good to try to order them after this line, after the lines call

21
00:01:45,720 --> 00:01:46,080
here.

22
00:01:46,560 --> 00:01:58,430
Let's see then next line thirty eight is where we are converting the text lines into employee's, right?

23
00:01:59,050 --> 00:02:06,420
Uh, and then after that we're taking those employees and we are converting them into integers so that

24
00:02:06,420 --> 00:02:07,290
they can be summed up.

25
00:02:07,290 --> 00:02:09,510
So I think we don't have a lot of choices here.

26
00:02:09,510 --> 00:02:15,180
It looks to me like the place to order them would be right after line.

27
00:02:15,180 --> 00:02:16,080
Thirty eight.

28
00:02:16,620 --> 00:02:17,670
Does that make sense?

29
00:02:19,080 --> 00:02:19,410
All right.

30
00:02:19,410 --> 00:02:26,100
So I'm going to put a new line in here and a period, and we've got a method here called sorted.

31
00:02:26,100 --> 00:02:30,870
And if you look down this list, we've actually got a couple of them, one that doesn't take any inputs

32
00:02:30,870 --> 00:02:32,250
and then another one that does.

33
00:02:32,520 --> 00:02:37,710
Let's let's take a quick look at what this one does for sorted with no inputs.

34
00:02:38,040 --> 00:02:39,450
I'm going to select that.

35
00:02:39,720 --> 00:02:45,420
So if I hover over this, we see that it returns a stream of whatever.

36
00:02:45,810 --> 00:02:52,710
So in other words, it's still going to just return back a string of employees just like we're getting

37
00:02:52,710 --> 00:02:54,090
out of line thirty eight.

38
00:02:54,870 --> 00:02:55,650
So that's good.

39
00:02:55,860 --> 00:03:01,320
And it returns a stream consisting of the elements of the stream sorted according to the natural order.

40
00:03:02,130 --> 00:03:04,000
So we should now know what that means.

41
00:03:04,020 --> 00:03:12,240
It means that as long as the objects that are in that stream implement the comparable interface which

42
00:03:12,240 --> 00:03:19,080
ours do, then it's just going to sort them according to whatever that comparable interfaces is being

43
00:03:19,080 --> 00:03:20,940
implemented to do, right?

44
00:03:21,270 --> 00:03:23,400
So that's fairly straightforward.

45
00:03:24,360 --> 00:03:26,280
So let's just see here real quick.

46
00:03:27,360 --> 00:03:29,550
I'm going to just run this now.

47
00:03:31,100 --> 00:03:37,910
And we can already kind of see here it does look like it's in alphabetical order right now, notice.

48
00:03:38,000 --> 00:03:42,200
We've we've got these duplicate Fred Flintstones here currently.

49
00:03:43,520 --> 00:03:49,170
So we've got a lot of we got a lot of bang for the buck just by using the sorted here.

50
00:03:49,370 --> 00:03:57,440
But just recall now that's only working as well as it is because the employee class happens to be implementing

51
00:03:57,440 --> 00:03:58,490
a comparable.

52
00:03:58,910 --> 00:03:59,660
Now what if?

53
00:03:59,870 --> 00:04:07,730
What if it were not implementing comparable or what if we wanted to override the sort order that our

54
00:04:08,240 --> 00:04:16,010
comparable implementation is, is is implementing, then in that case, we'd use the other sorted method

55
00:04:16,010 --> 00:04:17,510
that takes an input.

56
00:04:17,870 --> 00:04:26,780
And if we hover here, the other version takes an instance of our familiar comparator interface, right?

57
00:04:27,140 --> 00:04:28,910
So we've learned how to do this as well.

58
00:04:29,060 --> 00:04:37,010
And we know that we could satisfy this input with a lambda expression or within anonymous class, right?

59
00:04:37,340 --> 00:04:39,620
We could do either of those in just for grins.

60
00:04:39,620 --> 00:04:42,140
Will will flesh a little bit of that out for a moment.

61
00:04:42,140 --> 00:04:43,960
So we'll do this with a lambda.

62
00:04:43,970 --> 00:04:50,390
So if you'll recall, the comparator interface has a method on, in fact, here we don't have to recall,

63
00:04:50,390 --> 00:04:51,890
we'll just go there and take a look.

64
00:04:52,340 --> 00:04:52,610
All right.

65
00:04:52,620 --> 00:04:58,940
So here we are in the comparator interface and we know that it has a method on it called CP. That takes

66
00:04:58,940 --> 00:05:06,320
two objects to generic objects for input and then returns an integer expected to be negative one, zero

67
00:05:06,320 --> 00:05:11,450
or one so that it can know if the two objects are equal or one is less than or greater than the other,

68
00:05:11,450 --> 00:05:11,780
right?

69
00:05:12,380 --> 00:05:14,870
And we get to decide, you know, how all of that works.

70
00:05:15,080 --> 00:05:20,660
But that's just a quick refresher on how comparator and the compare method work.

71
00:05:21,140 --> 00:05:21,510
OK.

72
00:05:21,530 --> 00:05:27,920
So knowing that then we can supply this sorted method with a lambda expression that takes those two

73
00:05:27,920 --> 00:05:28,970
objects, right?

74
00:05:29,240 --> 00:05:34,010
So we'll refer to them as, I don't know, X and Y.

75
00:05:35,170 --> 00:05:39,830
Then we'll use our arrow and then what we would need to do is to compare something.

76
00:05:39,830 --> 00:05:43,010
So in this case, we want to compare the salaries.

77
00:05:43,130 --> 00:05:45,830
The salaries are primitive integers, right?

78
00:05:46,100 --> 00:05:52,610
So you know that we cannot just do something like X that good salary dot compare because there is no

79
00:05:52,610 --> 00:05:55,850
compare method because primitives don't have methods, right?

80
00:05:56,180 --> 00:06:05,240
However, we can use the wrapper integer class, which has a compare method on it, and we can pass

81
00:06:05,240 --> 00:06:06,710
these guys in this way.

82
00:06:07,400 --> 00:06:15,770
X that get salary, comma y don't get salary like so, and then we need to close that.

83
00:06:16,340 --> 00:06:19,460
And so now if we run this, let's see what we get.

84
00:06:20,600 --> 00:06:25,820
Yep, now they appear to be sorted by salary, right?

85
00:06:27,410 --> 00:06:28,190
OK, cool.

86
00:06:28,970 --> 00:06:36,260
So that works now, as you may recall, if we wanted to do something a little more involved, though

87
00:06:36,260 --> 00:06:37,070
like sort.

88
00:06:37,260 --> 00:06:40,090
According to multiple fields, right?

89
00:06:40,100 --> 00:06:42,800
So right now we're only sorting on one field, which is salary.

90
00:06:42,980 --> 00:06:44,360
What if we wanted to sort?

91
00:06:45,050 --> 00:06:51,200
First on last name, then first name and then salary, right?

92
00:06:52,100 --> 00:06:53,690
That would get more involved.

93
00:06:53,690 --> 00:06:58,910
And we couldn't really do that easily with the lambda expression in this way.

94
00:06:59,120 --> 00:06:59,430
Right.

95
00:06:59,450 --> 00:07:03,410
We'd have to have like a block of code where we kind of be nesting down.

96
00:07:03,590 --> 00:07:05,780
We've played with that a little bit previously.

97
00:07:06,080 --> 00:07:09,260
Now I want to show you an easier way to do this, though.

98
00:07:10,780 --> 00:07:20,980
There is actually some help in Java for doing exactly this use case and what we can do, it's actually

99
00:07:21,130 --> 00:07:23,230
the easiest thing that we could possibly do.

100
00:07:23,230 --> 00:07:30,280
In fact, what we can do is will clear this out and there is a static method on the comparator class

101
00:07:30,280 --> 00:07:31,810
called comparing.

102
00:07:32,380 --> 00:07:36,970
So I can actually refer to it by simply starting to type lowercase lower column.

103
00:07:37,270 --> 00:07:43,210
And the idea already knows where I'm where I'm heading and it beats me to the punch, so to speak,

104
00:07:43,210 --> 00:07:43,890
so to speak.

105
00:07:43,900 --> 00:07:51,760
So we've got various static methods on the comparator class that are all based on this basic idea of

106
00:07:51,760 --> 00:07:52,690
comparing.

107
00:07:53,890 --> 00:08:01,540
And so let's say that we wanted to sort by last name and then first name.

108
00:08:01,780 --> 00:08:02,230
OK.

109
00:08:02,530 --> 00:08:05,830
So what we can do is we can first reference this comparing.

110
00:08:05,950 --> 00:08:09,490
Now look at what this comparing method takes.

111
00:08:09,850 --> 00:08:12,960
It actually takes a function function.

112
00:08:12,970 --> 00:08:17,980
Here again is just an interface that has one method on it.

113
00:08:17,980 --> 00:08:24,670
It's a functional interface that has one method on it that takes one input of a class, and then it

114
00:08:24,670 --> 00:08:26,600
returns an output of another class.

115
00:08:26,620 --> 00:08:29,760
It could be the same type of class, by the way, but it doesn't have to be.

116
00:08:29,770 --> 00:08:31,310
It's it can be a different class.

117
00:08:31,340 --> 00:08:34,030
OK, so it takes one input, one output.

118
00:08:35,020 --> 00:08:36,490
Here's some cool stuff, though.

119
00:08:36,730 --> 00:08:41,650
Now that we've learned about method references, we can do something pretty interesting here.

120
00:08:41,650 --> 00:08:41,980
So.

121
00:08:42,060 --> 00:08:49,270
So let me back up and just say again, we're wanting to sort these employees by the first name and last

122
00:08:49,270 --> 00:08:49,870
name, right?

123
00:08:51,250 --> 00:08:55,570
Well, there's a couple of things we're going to need to do if we want to be able to do that.

124
00:08:56,800 --> 00:09:02,320
So, so let's see what happens here if I reference the comparing method here.

125
00:09:04,580 --> 00:09:10,220
What I can do is I can pass into it something called a key extractor now.

126
00:09:10,430 --> 00:09:15,620
I know this may start to look kind of complicated, but it's actually pretty straightforward.

127
00:09:15,630 --> 00:09:23,720
What it's looking for here is for me to essentially give it a method reference to a method that returns

128
00:09:24,080 --> 00:09:27,260
a field that we want to sort by.

129
00:09:27,290 --> 00:09:27,770
OK.

130
00:09:28,370 --> 00:09:29,810
So for example.

131
00:09:32,850 --> 00:09:38,520
If I reference the I employee, Colin Colin, get salary, there's a method reference right there,

132
00:09:38,940 --> 00:09:42,920
so I'm telling it to sort by salary.

133
00:09:42,960 --> 00:09:45,330
That's what I'm doing there now.

134
00:09:45,360 --> 00:09:51,690
In this scenario, though, what I kind of laid out is I want to now be able to sort by two fields,

135
00:09:51,930 --> 00:09:55,980
the last name and then the first name right now.

136
00:09:55,980 --> 00:10:03,420
Unfortunately, right now, I can only use method references that refer to methods that are declared

137
00:10:03,420 --> 00:10:05,760
on the I employee interface.

138
00:10:05,910 --> 00:10:13,260
And as you may recall, the I Am employee interface does only specifies the get salary method.

139
00:10:13,470 --> 00:10:19,890
So if I wanted to be able to sort by last name and first name, I cannot use a method reference to refer

140
00:10:19,890 --> 00:10:22,290
to those fields to those methods.

141
00:10:22,560 --> 00:10:29,400
From the I employee interface, I need to make references to the employee interface.

142
00:10:29,640 --> 00:10:38,280
And we've now learned that I can't just do this because, well, if I hover over it, we get this familiar

143
00:10:38,280 --> 00:10:38,640
method.

144
00:10:38,640 --> 00:10:42,300
Non static method cannot be referenced from a static context.

145
00:10:42,330 --> 00:10:47,940
In other words, the output of Line 38 is a stream of employees.

146
00:10:48,330 --> 00:10:53,340
And now I'm referencing something of type employee and it just isn't going to work that way.

147
00:10:54,000 --> 00:11:03,930
So one way for me to work around this would be first to remap the stream of I am employee to a stream

148
00:11:03,930 --> 00:11:05,640
of employees, right?

149
00:11:05,850 --> 00:11:07,590
And that's easy enough to do.

150
00:11:07,770 --> 00:11:09,350
Do you want to think of how to do that?

151
00:11:09,360 --> 00:11:15,450
Would you want to take a moment and see if you can figure out how to map the stream of AI employees

152
00:11:15,450 --> 00:11:17,520
to a stream of employees?

153
00:11:18,240 --> 00:11:19,170
Why don't you take a moment?

154
00:11:20,960 --> 00:11:29,630
OK, so now I'm going to do this, so what we can do is we know that the output of Line Thirty Eight

155
00:11:29,630 --> 00:11:31,580
is a stream of AI employees.

156
00:11:31,820 --> 00:11:35,090
And so I want to just convert that to a stream of employees.

157
00:11:35,540 --> 00:11:39,260
So what we can do is just another map.

158
00:11:40,610 --> 00:11:41,030
All right.

159
00:11:41,960 --> 00:11:43,910
Now, I don't think off the top of my head.

160
00:11:43,910 --> 00:11:49,970
I don't think there is a fancy method reference way to do this because really what I want to do is just

161
00:11:49,970 --> 00:11:50,570
cast.

162
00:11:51,440 --> 00:11:53,770
So I'm going to use a lambda to do this.

163
00:11:53,780 --> 00:12:01,550
OK, so I will refer to the individual instances of I employee that are coming out of line.

164
00:12:01,550 --> 00:12:04,410
Thirty eight out of the stream of Line thirty eight.

165
00:12:04,760 --> 00:12:06,190
I'll refer to those as EE.

166
00:12:06,530 --> 00:12:10,310
Then I'll use my arrow here and then I'm just going to cast.

167
00:12:10,850 --> 00:12:19,430
So I'm going to cast these AI employees to employees just like that.

168
00:12:20,690 --> 00:12:26,220
And now and so now we're going from a stream of AI employees to a stream of employees.

169
00:12:26,570 --> 00:12:32,930
And now down here, the sorted method is taking as an input a stream of employees.

170
00:12:33,080 --> 00:12:38,270
And now we can easily access the last name and first name in all of those guys, right?

171
00:12:38,450 --> 00:12:40,970
And the way we can do that is right here.

172
00:12:41,060 --> 00:12:41,340
Right?

173
00:12:41,360 --> 00:12:44,690
So instead of calling this now, we can call.

174
00:12:47,520 --> 00:12:49,320
But we got one more problem here.

175
00:12:50,130 --> 00:12:56,850
I never actually implemented getters and setters for the first name and last name, so now we need to

176
00:12:56,850 --> 00:12:59,910
take a quick detour and actually go implement those.

177
00:13:00,720 --> 00:13:06,360
Finally, after all of these lessons where we've just been kind of skirting that issue, right?

178
00:13:06,570 --> 00:13:09,330
So we'll jump into the employee class here.

179
00:13:11,230 --> 00:13:16,630
And let's see here, I'm going to scroll down.

180
00:13:18,300 --> 00:13:20,460
Oh, let's see, maybe two around here.

181
00:13:21,940 --> 00:13:29,110
And generate those real quick with a with a command in getter and setter.

182
00:13:31,220 --> 00:13:37,490
And now I only want to do this for the last name and the first name, so I'm I just held down on the

183
00:13:37,490 --> 00:13:38,000
shift.

184
00:13:38,300 --> 00:13:42,770
So what I did was I selected the last name and then I held down on shift and then selected the first

185
00:13:42,770 --> 00:13:43,310
name field.

186
00:13:43,310 --> 00:13:46,490
So those are the only two that I care to do this for at this time.

187
00:13:46,730 --> 00:13:49,220
And then I will click, OK, and there we go.

188
00:13:49,250 --> 00:13:53,750
Now finally, we've got a we've got getters and setters for the first name and last name.

189
00:13:53,930 --> 00:13:59,930
And then I'm going to do an option command left Arrow to go back or control all left arrow and I'll

190
00:13:59,930 --> 00:14:00,830
go back again.

191
00:14:01,550 --> 00:14:01,970
OK.

192
00:14:02,150 --> 00:14:10,220
And so now if I put my cursor after that, g that I started to type in, forget and do a control space.

193
00:14:10,250 --> 00:14:10,990
There we go.

194
00:14:10,990 --> 00:14:14,300
And now I've got access to the get last name.

195
00:14:16,270 --> 00:14:17,020
There we go.

196
00:14:17,410 --> 00:14:20,170
And so now we can sort by the last name.

197
00:14:21,220 --> 00:14:26,340
Now one quick thing here, because this comparing method is a static method.

198
00:14:26,350 --> 00:14:33,280
I actually can get rid of the comparator dot bit here by just selecting that and deleting.

199
00:14:33,550 --> 00:14:38,020
And now I can do what's called a static import, which I believe we did learn before.

200
00:14:38,680 --> 00:14:46,330
That'll just import the this method statically so that I don't have to pretend it with its class size

201
00:14:46,340 --> 00:14:47,620
so I can save a little space.

202
00:14:47,860 --> 00:14:54,340
So I'll just put my cursor at the end of the word comparing there, and I can do an option return and

203
00:14:54,340 --> 00:14:59,230
then choose import static method java util comparator comparing.

204
00:15:00,040 --> 00:15:00,520
There we go.

205
00:15:00,550 --> 00:15:09,260
Just like that and what that results in is there it is on line nine import static, blah blah blah comparing.

206
00:15:09,280 --> 00:15:11,850
So just save a little bit of space.

207
00:15:11,860 --> 00:15:13,150
That's the only reason I did that.

208
00:15:14,470 --> 00:15:15,250
All right.

209
00:15:15,370 --> 00:15:17,860
So we've got the last name I want now.

210
00:15:17,860 --> 00:15:26,710
I also want to have a secondary sort order, though, by the first name, and we've learned many lessons

211
00:15:26,710 --> 00:15:33,700
that go in another module that that was a little more involved because you kind of had to do some nested

212
00:15:33,700 --> 00:15:40,000
conditional where you said, basically, if the last name is less than then, that's cool.

213
00:15:40,000 --> 00:15:41,350
If it's greater than and that's cool.

214
00:15:41,350 --> 00:15:48,550
But if they're equal, then come down to another level of nesting and then compare the first names,

215
00:15:48,550 --> 00:15:48,760
right?

216
00:15:48,760 --> 00:15:50,830
So that that code got a little involved.

217
00:15:51,190 --> 00:16:00,550
Watch this though, with this new comparing static method here, we can actually string together additional

218
00:16:01,120 --> 00:16:02,950
levels of sorting order.

219
00:16:03,610 --> 00:16:11,740
So what I can do here now is put a period right after this closing quotation mark, and then I can choose

220
00:16:11,740 --> 00:16:16,570
this fancy additional static method then comparing.

221
00:16:16,840 --> 00:16:24,400
So this is allowing me to kind of do that nested bit here really, really nicely, really concisely

222
00:16:24,400 --> 00:16:25,360
and easily, right?

223
00:16:25,360 --> 00:16:30,820
So I can just choose then comparing and now I use this the same way that I used comparing.

224
00:16:30,820 --> 00:16:42,520
I just use another method reference and refer to some other field so I could refer to employee dot employee

225
00:16:43,030 --> 00:16:44,050
get first name.

226
00:16:45,010 --> 00:16:47,250
And now I'm comparing the first names, right?

227
00:16:47,290 --> 00:16:48,280
Secondarily.

228
00:16:48,490 --> 00:16:49,600
And guess what else?

229
00:16:49,600 --> 00:16:50,830
I can keep going with this.

230
00:16:50,860 --> 00:16:55,330
So in fact, let me clean this up just a little bit, though I don't want to go too far out to the side

231
00:16:55,330 --> 00:16:59,980
there, and I'm kind of backing up the the indentation there.

232
00:17:00,190 --> 00:17:02,980
And let's say I want to add in the salary as well.

233
00:17:04,780 --> 00:17:11,200
I can do that then comparing employee get salary.

234
00:17:12,850 --> 00:17:14,080
Isn't that nice?

235
00:17:15,500 --> 00:17:18,550
So concise and easy to read, right?

236
00:17:18,710 --> 00:17:23,900
I don't have to write any logic and nothing of the logic and all of that business, right?

237
00:17:23,960 --> 00:17:25,580
I can just get right down to it.

238
00:17:26,840 --> 00:17:30,530
And now to prove that this will actually work, let's just run it and see.

239
00:17:34,240 --> 00:17:35,920
All right, what do we have here?

240
00:17:37,160 --> 00:17:39,950
Yeah, they look like they are still in Alpha.

241
00:17:40,400 --> 00:17:46,610
They look like they are back into alphabetical order and we've got a bunch of Fred Flintstones right

242
00:17:46,610 --> 00:17:46,940
here.

243
00:17:47,060 --> 00:17:53,810
And so now if we look at the salaries we can see, yes, the salaries are in ascending order as well.

244
00:17:54,050 --> 00:17:55,370
So I think that's working.

245
00:17:55,730 --> 00:17:56,450
All right, cool.

246
00:17:56,720 --> 00:18:03,230
Now one other thing you may have noticed when we were selecting these additional methods, like the

247
00:18:03,230 --> 00:18:10,130
then comparing if I put my cursor here in hover, you'll see that there are other versions of the then

248
00:18:10,130 --> 00:18:13,070
comparing and I actually of the comparing method as well.

249
00:18:13,310 --> 00:18:16,560
There's then comparing end and double and long.

250
00:18:16,730 --> 00:18:19,250
You may have kind of wondered what are those all about?

251
00:18:19,820 --> 00:18:26,210
That gets into the natural versus lexical graphic ordering of computers.

252
00:18:26,210 --> 00:18:33,530
I've mentioned this once before that by default, the natural ordering that we tend to get from computers

253
00:18:33,860 --> 00:18:38,540
is not actually what we humans would normally consider to be natural at all.

254
00:18:39,200 --> 00:18:47,570
In the sense that the number 10 expressed as a string would actually be would actually come before the

255
00:18:47,570 --> 00:18:58,430
number two in so-called natural ordering because the one in the 10 comes comes before the two, right?

256
00:18:58,640 --> 00:19:01,160
And so that ordering isn't natural.

257
00:19:02,060 --> 00:19:11,390
However, if we use these numeric, these numerical aware versions of the comparing methods, then they

258
00:19:11,390 --> 00:19:17,300
will sort in what humans would consider to be a more natural ordering, if you will.

259
00:19:17,330 --> 00:19:17,780
OK.

260
00:19:17,990 --> 00:19:25,850
So if you want numbers to show up truly in order consistently, you probably will prefer to use the

261
00:19:25,850 --> 00:19:31,880
specific numerical comparing methods here, depending on whatever the data type is.

262
00:19:32,030 --> 00:19:39,590
In our case, the salaries are integers, so we can very well just use the then comparing and just like

263
00:19:39,590 --> 00:19:44,930
so I don't know that we're going to see any difference, though, because in this case, these numbers

264
00:19:44,930 --> 00:19:47,660
are all pretty clear and straightforward anyway.

265
00:19:48,290 --> 00:19:50,390
But we'll go ahead and run this just so you can see.

266
00:19:54,500 --> 00:19:55,610
Yeah, there we go.

267
00:19:56,330 --> 00:19:56,720
All right.

268
00:19:57,620 --> 00:19:58,550
Let's see.

269
00:20:00,200 --> 00:20:08,150
And then let's say that we wanted to reverse the order right of our listings here, we can easily do

270
00:20:08,150 --> 00:20:08,510
that.

271
00:20:08,930 --> 00:20:17,330
So what we can do there is just stick a keyword on the end of our little internal comparing chain here,

272
00:20:17,750 --> 00:20:19,010
Dot reversed.

273
00:20:21,000 --> 00:20:24,120
Just like that, and then we'll run this again.

274
00:20:24,150 --> 00:20:29,160
So currently, we've got Fred Flintstone coming up first, right?

275
00:20:30,350 --> 00:20:36,800
Now, Fred Flintstone at the bottom, though, and at the top we've got Barney rubble, so it's being

276
00:20:37,880 --> 00:20:39,770
printed out in reverse order.

277
00:20:39,980 --> 00:20:41,690
OK, so pretty straightforward.

278
00:20:42,110 --> 00:20:52,400
So you can see now how much easier it can be to sort objects or data within our stream here.

279
00:20:52,820 --> 00:20:57,670
So now let me just make make it clear what is this comparing method actually doing?

280
00:20:57,680 --> 00:20:59,180
How is it actually working right?

281
00:20:59,570 --> 00:21:04,850
So if you'll recall, the sorted method itself takes as an input, simply a comparator.

282
00:21:05,300 --> 00:21:12,710
So what this comparing method is doing this static method here is it builds a comparator for us, right?

283
00:21:13,640 --> 00:21:20,600
Our competitor was doing something like, let's see, we had the the lambda there.

284
00:21:22,620 --> 00:21:34,170
Expedite get whatever last name that compared to, why don't get last name?

285
00:21:39,420 --> 00:21:42,540
Oops, I forgot my parentheses there.

286
00:21:44,470 --> 00:21:51,490
OK, so that's you know, how you might have done just the last name comparisons with a lambda expression

287
00:21:51,490 --> 00:21:55,330
that will in turn implement a comparator right.

288
00:21:56,440 --> 00:22:04,030
So what this comparing is doing is it's basically taking a pattern like this, but temple of teasing

289
00:22:04,030 --> 00:22:04,990
it, if you will.

290
00:22:05,350 --> 00:22:11,200
It's getting down to just the most essence of what we actually care about, which in this case is just

291
00:22:11,200 --> 00:22:13,090
this bit right here, right?

292
00:22:14,230 --> 00:22:15,370
The last names.

293
00:22:15,370 --> 00:22:25,330
And so it's allowing us to kind of skip the whole entire boilerplate and just specify just the method

294
00:22:25,660 --> 00:22:31,180
of the data, the just the method that that refers to the data that we actually care about.

295
00:22:31,360 --> 00:22:34,590
And we're doing it with a method reference right here, right?

296
00:22:34,600 --> 00:22:42,340
So you can kind of imagine that underneath the hood of this comparing static method here, you've got

297
00:22:42,340 --> 00:22:47,730
the code equivalent of this, except that this bit here is kind of templated out, right?

298
00:22:47,740 --> 00:22:51,970
It's able to be replaced by whatever we pass in here.

299
00:22:52,090 --> 00:22:52,540
OK.

300
00:22:52,720 --> 00:22:55,990
So that's kind of what's so that's essentially what's happening here.

301
00:22:57,220 --> 00:23:04,840
And then they've got a more complex pattern that they're kind of taking in if you use the then comparing,

302
00:23:04,840 --> 00:23:05,170
right?

303
00:23:05,320 --> 00:23:12,010
So they've just written out the more complex code in a smart way and they are then temp and then they

304
00:23:12,010 --> 00:23:17,710
are turning that into a template that allows us to plug in just the bits that we care about, which

305
00:23:17,710 --> 00:23:21,190
in this case is just, you know, the field that we're trying to do.

306
00:23:21,370 --> 00:23:29,110
And then when it's all said and done, the comparing method spits back out an instance of a comparator

307
00:23:29,320 --> 00:23:32,010
which can be plugged into this sorted method here.

308
00:23:32,020 --> 00:23:34,540
So that's that's essentially what's going on there.

309
00:23:35,110 --> 00:23:42,730
It's really, really quite intelligent and look at how much more readable our code is now, right?

310
00:23:42,970 --> 00:23:49,180
So in fact, before we wrap this up, let's just kind of read through this just to kind of drive home

311
00:23:49,180 --> 00:23:54,940
the point of how much more readable code can be when we use the Stream's API, right?

312
00:23:55,390 --> 00:24:00,310
So we take a line, we convert that line to an AI employee.

313
00:24:01,210 --> 00:24:03,510
Then we converted again to an employee.

314
00:24:03,520 --> 00:24:05,590
In fact, you can kind of see the hints over here.

315
00:24:06,700 --> 00:24:14,860
Then we sort those employees first by last name, then by first name, then by salary, and then we

316
00:24:15,010 --> 00:24:23,410
flip the order of all of that and then we convert all of those to integers while also printing them

317
00:24:23,410 --> 00:24:23,740
out.

318
00:24:24,660 --> 00:24:30,750
And then we take those integers and sum them all up and then we can print the sums, so it's just really,

319
00:24:30,750 --> 00:24:36,210
really nice to be able to read the code so, so easily now, right?

320
00:24:36,900 --> 00:24:42,720
You're not so much focused on how to write that code to extract these things here and all of this.

321
00:24:42,870 --> 00:24:46,350
And instead, we're more focused on just what is it that we want to do.

322
00:24:46,350 --> 00:24:47,620
It's more declarative.

323
00:24:47,640 --> 00:24:48,390
OK, OK.

324
00:24:48,570 --> 00:24:55,470
We're declaring what we want to do, but we're not so much focused on how we want to do it in terms

325
00:24:55,470 --> 00:24:57,690
of writing all of the explicit code.

326
00:24:57,900 --> 00:25:04,140
And that's kind of emblematic of this type of functional style of coding.

327
00:25:04,860 --> 00:25:05,250
All right.

328
00:25:05,250 --> 00:25:08,520
So we'll wrap this one up and I'll see you in the next one.
