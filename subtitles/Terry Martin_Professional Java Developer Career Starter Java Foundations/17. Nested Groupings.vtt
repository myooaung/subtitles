WEBVTT
1
00:00:00.660 --> 00:00:00.970
All right.

2
00:00:00.990 --> 00:00:08.100
So picking up where we left off in the last lesson, we learned how we could programmatically categorize

3
00:00:08.100 --> 00:00:15.810
or group our records by some field, and I'll just jump back over to the spreadsheet to give you a quick

4
00:00:15.810 --> 00:00:18.700
visual reminder of what that looked like.

5
00:00:18.720 --> 00:00:25.560
So here in the spreadsheet, we had taken a lot of data with lots of columns or fields, right?

6
00:00:25.560 --> 00:00:32.730
And we basically collapsed that all down to just two fields where we were grouping all of the data by

7
00:00:32.730 --> 00:00:35.700
state and then showing by state.

8
00:00:35.940 --> 00:00:41.850
What were the total salaries right of all the people in those particular states?

9
00:00:42.540 --> 00:00:51.540
And so we were able to reproduce programmatically this type of structure in code, and we'll just kind

10
00:00:51.540 --> 00:00:53.040
of review how we did that.

11
00:00:53.700 --> 00:00:54.310
Let's see here.

12
00:00:54.330 --> 00:00:56.100
So let me see.

13
00:00:56.130 --> 00:01:03.830
So, yeah, I mean, so you know, well, let's let's just walk back through this whole little bit again,

14
00:01:03.840 --> 00:01:04.080
right?

15
00:01:04.100 --> 00:01:07.980
So here are all of our records basically right from this line.

16
00:01:07.980 --> 00:01:10.440
This line is going to spit out all of our records.

17
00:01:10.440 --> 00:01:17.910
We're skipping over the header line and then we are going to convert each record into an array.

18
00:01:19.410 --> 00:01:26.190
And then here we're going to convert each array into an instance of a person.

19
00:01:26.340 --> 00:01:31.350
And the only reason we're really doing this, this is just to make it a little bit easier for us to

20
00:01:31.350 --> 00:01:36.160
refer to the individual fields or columns by meaningful names.

21
00:01:36.180 --> 00:01:42.720
That's that's a big part of why we're doing it and the fact that the Streams API kind of sort of assumes

22
00:01:42.720 --> 00:01:48.540
that you're usually streaming over objects that are modeled, right?

23
00:01:48.560 --> 00:01:52.650
So here we are with an object that's modeled or many objects that will be modeled, right?

24
00:01:52.800 --> 00:02:01.010
And so we're mapping the individual elements of an array into the fields of a person, right?

25
00:02:01.020 --> 00:02:08.800
So we're converting the array to a person and then we're able to tell the Streams API to collect all

26
00:02:08.800 --> 00:02:13.170
of those, all of those people essentially and then let us group them.

27
00:02:13.380 --> 00:02:21.870
And in this case, we're saying grouped them by state, OK, and the grouping by method or function

28
00:02:21.870 --> 00:02:25.950
is ultimately going to return a Java collections map.

29
00:02:26.130 --> 00:02:26.550
All right.

30
00:02:26.940 --> 00:02:32.160
And so here we're allowed to specify what type of map we want to use.

31
00:02:32.170 --> 00:02:38.850
So by default, if we don't specify that it's going to return a hash map, but if we want to use some

32
00:02:38.850 --> 00:02:46.530
other type of map and in this case, we decided to use a tree map so that our map entries would be alphabetized

33
00:02:46.980 --> 00:02:48.330
by key, right?

34
00:02:48.930 --> 00:02:51.360
Which in this case means the state by state.

35
00:02:51.990 --> 00:02:54.540
So we decided to use the tree map there, right?

36
00:02:54.660 --> 00:03:02.130
And then finally, it asks us, What do you want to do with the individual records after we do the grouping,

37
00:03:02.130 --> 00:03:02.460
right?

38
00:03:02.670 --> 00:03:08.400
And so we decided to use this hybrid thing here that lets us do a couple of operations.

39
00:03:10.140 --> 00:03:18.690
So we first will sum up all of the salaries of all of the people per state.

40
00:03:18.880 --> 00:03:19.170
Right.

41
00:03:19.220 --> 00:03:20.730
That's what we're doing here.

42
00:03:21.450 --> 00:03:24.540
And then right, and that's why we're using this collecting.

43
00:03:24.540 --> 00:03:34.680
And then and then take that sum by state, take that sum and then pipe it over here into this method

44
00:03:34.680 --> 00:03:41.220
reference, which is using a currency format or a number format or with a currency instance so that

45
00:03:41.220 --> 00:03:46.770
we can format that salary as money essentially right.

46
00:03:47.910 --> 00:03:49.980
And that will become a string.

47
00:03:50.010 --> 00:03:50.940
Now, OK.

48
00:03:51.270 --> 00:03:58.880
And so again, you end up with this, this structure, and it will look pretty much exactly like this

49
00:03:58.890 --> 00:03:59.490
more or less.

50
00:03:59.520 --> 00:04:08.670
Right now, the thing is the thing that we're getting out of this out of the streams API call here is,

51
00:04:08.670 --> 00:04:10.440
of course, it's not a picture, right?

52
00:04:10.440 --> 00:04:12.090
It's it's it's data.

53
00:04:12.120 --> 00:04:12.630
OK.

54
00:04:13.020 --> 00:04:16.920
So just I hope you'll all be able to understand that somewhat right?

55
00:04:16.930 --> 00:04:22.950
Like here we're looking at a at a visual representation of data, right?

56
00:04:23.990 --> 00:04:30.710
Here we just have the data, right, there's not really a visual representation of it other than like

57
00:04:30.710 --> 00:04:32.420
where we're calling this for each year.

58
00:04:32.720 --> 00:04:34.190
And you don't have to do this.

59
00:04:34.280 --> 00:04:41.180
And I mentioned before that in most professional programming in Java, you wouldn't typically be printing

60
00:04:41.180 --> 00:04:44.330
something out on the command line anyway.

61
00:04:44.420 --> 00:04:46.730
You'd be sending the raw data.

62
00:04:46.850 --> 00:04:48.560
In this case, that would be the map.

63
00:04:48.770 --> 00:04:53.630
You'd be sending that map or whatever the output is to some other system.

64
00:04:53.750 --> 00:05:02.540
And ultimately, you would you might render that data out on a screen inside of a bigger application,

65
00:05:02.660 --> 00:05:09.080
like a web application where you've got a web interface, and maybe it would display as a table somewhat

66
00:05:09.080 --> 00:05:10.340
like we have here, right?

67
00:05:10.490 --> 00:05:14.180
But the data that's coming out of this would just be the data, right?

68
00:05:14.180 --> 00:05:17.780
It wouldn't be a picture or something graphical or visual.

69
00:05:17.850 --> 00:05:19.520
OK, all right.

70
00:05:19.530 --> 00:05:25.580
So sorry for the long review, but I thought that might be an order because now we're about to crank

71
00:05:25.580 --> 00:05:26.750
it up another notch.

72
00:05:26.780 --> 00:05:27.230
OK.

73
00:05:27.950 --> 00:05:36.050
So interestingly, here, we don't have to just stop here by just doing the grouping by one field.

74
00:05:36.200 --> 00:05:38.780
We could actually keep grouping.

75
00:05:39.020 --> 00:05:43.880
And I want to show you what that looks like because again, that may not be obvious to those of you

76
00:05:43.880 --> 00:05:47.480
who have never done anything like this, particularly with a spreadsheet.

77
00:05:47.660 --> 00:05:49.760
So let's jump back over to the spreadsheet.

78
00:05:50.180 --> 00:05:57.730
And I think what we will do first is let's untied the the columns that we were hiding.

79
00:05:57.740 --> 00:06:00.410
So I think I can come up over here and.

80
00:06:02.160 --> 00:06:03.870
Untied columns.

81
00:06:04.350 --> 00:06:04.950
There we go.

82
00:06:05.670 --> 00:06:06.840
Let's see, did it get them all?

83
00:06:06.870 --> 00:06:07.540
Yes, I did.

84
00:06:07.560 --> 00:06:17.250
OK, so we've unhidden the columns, and let's also re expand all of these categories.

85
00:06:18.420 --> 00:06:21.150
OK, so now we can kind of see all the data again, right?

86
00:06:22.520 --> 00:06:33.290
So let's say that in addition to grouping all of these records by state and getting the what is it,

87
00:06:33.300 --> 00:06:35.220
the salary total here?

88
00:06:35.660 --> 00:06:44.810
Let's say that we also wanted to know what is the total salary by gender, by state?

89
00:06:44.870 --> 00:06:45.260
Right?

90
00:06:45.470 --> 00:06:52.310
So not only do we want to categorize by state, we also want a sub categorization under that by gender.

91
00:06:52.320 --> 00:06:56.870
So in other words, we want to know how much money in total.

92
00:06:57.020 --> 00:07:02.450
Do women in each state make vs. men in each state?

93
00:07:02.610 --> 00:07:08.240
OK, so that's like a second level of of categorization or grouping.

94
00:07:08.270 --> 00:07:13.280
OK, so first, let's do it here in the spreadsheet so that you can see visually, what will that look

95
00:07:13.280 --> 00:07:13.730
like?

96
00:07:14.000 --> 00:07:16.410
OK, and then we'll do it programmatically.

97
00:07:16.610 --> 00:07:18.230
So it's actually pretty easy.

98
00:07:19.010 --> 00:07:26.030
What we can do here is in this particular program, Apple Numbers and Excel can do this as well.

99
00:07:26.720 --> 00:07:30.820
But in this program, I can come over here to the Organize website.

100
00:07:30.820 --> 00:07:31.820
I just closed it there.

101
00:07:32.000 --> 00:07:36.320
And we're seeing here where we already are grouping by state.

102
00:07:36.350 --> 00:07:38.270
OK, so that's what it's showing us here.

103
00:07:38.270 --> 00:07:39.380
It's grouping by state.

104
00:07:39.560 --> 00:07:45.740
But I can come down here and add another category as they're calling it or a grouping, OK?

105
00:07:46.070 --> 00:07:47.870
And so let's see.

106
00:07:47.900 --> 00:07:56.210
So, yeah, I want to add a secondary category for gender so I can come here and select gender right

107
00:07:56.210 --> 00:07:56.660
there.

108
00:07:57.930 --> 00:07:58.690
And look at that.

109
00:07:58.710 --> 00:08:02.880
OK, so now we've got females and males, right?

110
00:08:03.330 --> 00:08:06.630
And if we scroll over now.

111
00:08:07.590 --> 00:08:13.290
Now, we're only seeing the thumb totals for the state still.

112
00:08:13.620 --> 00:08:21.780
But if I come down here to the gender header, any one of them this one or that one, right, if I come

113
00:08:21.780 --> 00:08:27.330
over here to this gender header and click that thing again and now I can do a sum again.

114
00:08:28.600 --> 00:08:34.360
Now it has added the sum total by gender for each state.

115
00:08:34.540 --> 00:08:34.930
Right.

116
00:08:35.200 --> 00:08:36.400
And it's done that everywhere.

117
00:08:36.610 --> 00:08:40.990
So now if I come back over here and collapse, let's see.

118
00:08:40.990 --> 00:08:44.020
Let's collapse all the gender info.

119
00:08:44.320 --> 00:08:44.650
Right?

120
00:08:45.280 --> 00:08:49.990
And again, just to make this a little easier to see, I will hide.

121
00:08:51.790 --> 00:08:54.400
A lot of these columns as well.

122
00:08:57.890 --> 00:09:03.170
OK, I'm not going to hide the ones to the right, we don't care, but at any rate now we can see the

123
00:09:03.170 --> 00:09:10.050
totals by gender for each state, and I guess I could format these again as well.

124
00:09:10.070 --> 00:09:15.680
Let's go over the format and set that to currency and turn on the separators.

125
00:09:15.700 --> 00:09:16.250
There we go.

126
00:09:16.640 --> 00:09:18.480
And it will close that out.

127
00:09:18.500 --> 00:09:19.790
OK, so there we go.

128
00:09:20.090 --> 00:09:28.370
So now we're seeing women in Alabama total two hundred and fifty eight thousand four, our data set

129
00:09:28.370 --> 00:09:29.870
of only 100 records.

130
00:09:29.950 --> 00:09:30.290
Right.

131
00:09:30.530 --> 00:09:34.340
And men totaled three hundred ninety five thousand right.

132
00:09:34.350 --> 00:09:39.500
And if I were to add these two up, that should add up to this number here for the entire state.

133
00:09:40.280 --> 00:09:48.230
OK, so that's what it would look like if you were to add a secondary level of categorization or grouping

134
00:09:48.230 --> 00:09:54.350
by and and you could just keep adding these categorizations if it made sense to do and they would just

135
00:09:54.350 --> 00:09:57.560
keep inventing visually here, right?

136
00:09:57.830 --> 00:10:01.880
So now let's go do the equivalent of this encode.

137
00:10:03.680 --> 00:10:09.860
All right, so here we are back in the I.D. and again, this is going to be relatively easy to do.

138
00:10:10.880 --> 00:10:12.680
So what we can do here?

139
00:10:14.140 --> 00:10:15.550
Here's our first grouping.

140
00:10:15.750 --> 00:10:18.880
Right, and so we're saying group by state.

141
00:10:19.330 --> 00:10:25.120
And then here's what we want it to do with the resulting records of that grouping.

142
00:10:25.120 --> 00:10:28.600
We wanted to add them up and then format them basically right?

143
00:10:28.630 --> 00:10:29.380
Do all of this.

144
00:10:29.710 --> 00:10:37.660
Well, if we want to add another level of grouping, what we'll basically do is just replace this bit

145
00:10:37.660 --> 00:10:43.750
here because this is the part where we tell it what to do with the resulting records after the after

146
00:10:43.930 --> 00:10:45.190
this grouping was done.

147
00:10:45.370 --> 00:10:51.250
So now what we're going to tell it is after you're done doing this grouping, do another grouping.

148
00:10:51.360 --> 00:10:51.650
Right?

149
00:10:51.670 --> 00:10:55.030
So we're just going to replace this with another grouping.

150
00:10:55.240 --> 00:10:57.070
So let me show you what that looks like.

151
00:10:57.280 --> 00:11:03.610
So I can just hit enter here and I can literally just invoke another grouping by.

152
00:11:03.850 --> 00:11:04.150
Right?

153
00:11:04.160 --> 00:11:08.050
It's it's actually pretty straightforward, really, except for one thing now.

154
00:11:08.290 --> 00:11:16.750
Now, in the spreadsheet, our secondary categorization or grouping by was done on the what did we use?

155
00:11:16.760 --> 00:11:18.760
We use the the gender right gender.

156
00:11:19.090 --> 00:11:19.540
OK.

157
00:11:20.470 --> 00:11:27.370
So here though, we have not modelled gender as part of our person class, right?

158
00:11:27.550 --> 00:11:29.080
So we need to add that in.

159
00:11:29.260 --> 00:11:31.280
OK, so that's the first thing we need to do.

160
00:11:31.300 --> 00:11:32.360
So let's do that real quick.

161
00:11:32.380 --> 00:11:38.350
So what I will do here is this go back up here to the definition of our person recorder class, right?

162
00:11:38.560 --> 00:11:46.120
And I'm just going to add another field for gender now in the spreadsheet, gender is modeled as just

163
00:11:46.120 --> 00:11:49.360
a single letter F or M, right?

164
00:11:49.600 --> 00:11:55.510
So let's let's model this a little more accurately if you want to think of it in this way.

165
00:11:56.170 --> 00:12:01.240
And by that, I mean, let's not use a string as we did for the state codes.

166
00:12:01.390 --> 00:12:04.060
Let's use a character.

167
00:12:04.100 --> 00:12:04.480
OK?

168
00:12:05.140 --> 00:12:07.120
To save on space and things.

169
00:12:07.540 --> 00:12:07.860
All right.

170
00:12:07.870 --> 00:12:11.920
So we can model this as a character KTAR, right?

171
00:12:12.160 --> 00:12:17.500
I'm using the lowercase character, though, which is the primitive character rather than the class

172
00:12:18.100 --> 00:12:22.450
only because in the end, it doesn't really matter all that much in many cases.

173
00:12:23.140 --> 00:12:31.450
But you should know now that primitives will always be leaner and and make less use of memory and use

174
00:12:31.450 --> 00:12:37.390
up less memory than their than their class counterparts.

175
00:12:37.430 --> 00:12:37.650
Right.

176
00:12:37.660 --> 00:12:44.470
So I could do a primitive character like I'm doing here, or I could do a class character like this,

177
00:12:44.620 --> 00:12:48.790
but the class character will use up more space because it's a full class, right?

178
00:12:48.910 --> 00:12:53.020
It will create full objects with methods and all kinds of stuff, right?

179
00:12:53.110 --> 00:12:57.990
And we'd have one of those for each of the five million records, right?

180
00:12:58.000 --> 00:13:04.030
So that would, you know, use up a little more space in the memory, so it'd be a little more polite.

181
00:13:04.960 --> 00:13:10.480
I will just use a primitive character, but functionally speaking, it doesn't matter much.

182
00:13:11.500 --> 00:13:17.320
And then I'm going to name this field gender, and as soon as I do this now, I get red marks down here

183
00:13:17.320 --> 00:13:24.010
where we're creating a new instance of a person because now I'm incomplete in specifying all of the

184
00:13:24.010 --> 00:13:26.140
fields to create a new person, right?

185
00:13:26.470 --> 00:13:28.690
Each of these fields is required.

186
00:13:28.720 --> 00:13:29.050
Right.

187
00:13:29.260 --> 00:13:35.650
And so now I need to add in the, you know, setting the the gender here.

188
00:13:35.680 --> 00:13:36.070
OK.

189
00:13:36.370 --> 00:13:39.130
So let me put a comma here.

190
00:13:39.340 --> 00:13:41.020
Now, let's see here.

191
00:13:41.020 --> 00:13:46.720
So this is going to have an index and let me jump back over to the spreadsheet and determine what index

192
00:13:46.720 --> 00:13:48.520
this would be out of our array.

193
00:13:48.700 --> 00:13:52.060
If you will recall when we were doing this before?

194
00:13:52.060 --> 00:13:55.660
Oh yeah, I guess I need to untied the columns real quick here.

195
00:13:55.660 --> 00:13:58.480
Let's unwind all columns, OK?

196
00:13:58.840 --> 00:14:03.700
If you will recall, each record here gets converted into an array and.

197
00:14:05.530 --> 00:14:12.850
And each column or field of the record corresponds to an element in the array.

198
00:14:12.940 --> 00:14:18.640
So we need to determine again which what is the index of the element for the gender field?

199
00:14:18.670 --> 00:14:19.030
Right.

200
00:14:19.240 --> 00:14:23.350
So this would be zero one two three four five.

201
00:14:23.380 --> 00:14:25.960
OK, so gender would be index five.

202
00:14:26.300 --> 00:14:26.620
Right?

203
00:14:26.860 --> 00:14:27.130
All right.

204
00:14:27.140 --> 00:14:32.250
So now that we know that we can reference a five?

205
00:14:32.260 --> 00:14:39.730
Like so now this is not going to work just this way, though, because this by default is an array of

206
00:14:39.730 --> 00:14:47.770
strings and we have modeled our gender as a character, so we need to convert this string here into

207
00:14:47.770 --> 00:14:48.550
a character.

208
00:14:48.790 --> 00:14:51.340
And that's actually quite easy to do in this case.

209
00:14:51.940 --> 00:14:58.690
We can simply use a method on the string class called character add or care at right, and we're going

210
00:14:58.690 --> 00:15:06.040
to just grab the presumably the very first character in that string, which would be character zero.

211
00:15:06.370 --> 00:15:08.440
And now we have a character.

212
00:15:08.500 --> 00:15:11.860
OK, now you might want to be a little careful in real life.

213
00:15:12.160 --> 00:15:13.250
And in fact, you know, a hero.

214
00:15:13.300 --> 00:15:14.170
I'll be real careful.

215
00:15:14.230 --> 00:15:16.180
I'll be a little more careful even here.

216
00:15:16.420 --> 00:15:21.760
So you could have a situation presumably where let me expand this.

217
00:15:22.000 --> 00:15:28.290
You could have a situation where maybe there was an extra space or something in that field, right?

218
00:15:28.300 --> 00:15:34.570
If you don't trust the data and how clean that data is, like, maybe someone put spaces or things like

219
00:15:34.570 --> 00:15:35.640
that, then you.

220
00:15:35.650 --> 00:15:38.890
We have learned that you could always call strip.

221
00:15:40.710 --> 00:15:42.300
And then you could do the character.

222
00:15:42.570 --> 00:15:47.930
And so that strip method would just strip off any leading and trailing spaces, right?

223
00:15:48.060 --> 00:15:54.960
Just to make sure that you are just dealing with the actual data and know miscellaneous spaces and things

224
00:15:54.960 --> 00:15:55.470
like that.

225
00:15:56.160 --> 00:15:57.030
So you could do that.

226
00:15:57.720 --> 00:16:02.580
And that would actually apply to any of these elements from this this array, right?

227
00:16:02.610 --> 00:16:08.370
I'm just not doing that because I happen to know that my data set here is already clean and I'm not

228
00:16:08.370 --> 00:16:09.210
real worried about it.

229
00:16:09.210 --> 00:16:15.630
But in real life, you probably would want to do that, especially if you're not in complete and total

230
00:16:15.630 --> 00:16:19.410
control of that data like you don't know where that data's coming from.

231
00:16:19.740 --> 00:16:19.970
All right.

232
00:16:19.980 --> 00:16:25.260
So anyway, now we've populated this new gender field, right?

233
00:16:25.470 --> 00:16:31.380
And so now we can come down here and say, after you're done grouping by state, do another grouping

234
00:16:31.590 --> 00:16:36.360
right group by person gender.

235
00:16:37.430 --> 00:16:38.690
Like so OK.

236
00:16:39.140 --> 00:16:46.580
And then just like we're doing the grouping by up here, we can specify additional things about this

237
00:16:46.580 --> 00:16:49.310
grouping now if I don't specify anything else here.

238
00:16:50.090 --> 00:16:54.590
By default, this secondary grouping is going to group by gender.

239
00:16:54.770 --> 00:16:58.910
And then it's going to spit out those records again.

240
00:16:58.940 --> 00:16:59.300
Right?

241
00:16:59.420 --> 00:17:06.920
Like just the the records for all of the females for that state and then all of the males for that state

242
00:17:06.920 --> 00:17:07.870
right now.

243
00:17:07.880 --> 00:17:09.110
That's not what we want.

244
00:17:09.140 --> 00:17:18.470
We want to continue to add up all of the salaries for each of the genders, for each state and then

245
00:17:18.470 --> 00:17:20.450
format them as well, right?

246
00:17:21.080 --> 00:17:22.190
We don't need the tree map.

247
00:17:22.190 --> 00:17:23.210
I could put that in there.

248
00:17:23.210 --> 00:17:26.840
But as I mentioned before, that that second option there is optional.

249
00:17:27.740 --> 00:17:28.490
We don't need it.

250
00:17:29.240 --> 00:17:35.060
So if we want to now add up everything, we can just put a comma here and then we can do what we're

251
00:17:35.060 --> 00:17:35.930
doing down here.

252
00:17:35.930 --> 00:17:44.180
And in fact, this bit here is no longer valid in this location because this was inside of our original

253
00:17:44.180 --> 00:17:45.050
grouping by.

254
00:17:45.140 --> 00:17:50.140
And now what I'm going to do is I'm actually going to select all of this collecting business here.

255
00:17:50.300 --> 00:17:51.260
It's not that much.

256
00:17:51.620 --> 00:17:57.230
And I'm actually going to just cut it and paste it right here.

257
00:17:58.740 --> 00:18:03.600
So now we're just saying do the adding and formatting after grouping by gender?

258
00:18:03.630 --> 00:18:03.940
Right?

259
00:18:03.960 --> 00:18:05.130
That's what we're doing here.

260
00:18:05.790 --> 00:18:12.690
Let me also just kind of reformat the code a little bit so that it might be a little clearer if if there's

261
00:18:12.690 --> 00:18:14.400
any ambiguity still right.

262
00:18:14.580 --> 00:18:23.010
So I'm I'm inventing the grouping buys here a little bit better, and I guess I could even take this

263
00:18:23.010 --> 00:18:31.320
collecting thing here and do that and then maybe even take that and break that out there and this one

264
00:18:31.320 --> 00:18:32.640
and break that out as well.

265
00:18:32.910 --> 00:18:37.200
I don't know if that's helping anybody, but it might help you to just be able to see a little more

266
00:18:37.200 --> 00:18:38.250
clearly here, right?

267
00:18:38.490 --> 00:18:46.950
So first, do this level of grouping by state, then do a secondary level of grouping by gender, then

268
00:18:46.950 --> 00:18:49.380
take all of the records for that.

269
00:18:49.710 --> 00:18:51.610
And do two things right.

270
00:18:51.630 --> 00:18:53.360
That's what this is allowing us to do.

271
00:18:53.400 --> 00:18:55.020
Do to do two things here.

272
00:18:55.290 --> 00:18:59.010
Sum them up and then format them right.

273
00:18:59.220 --> 00:19:00.650
That's what this is allowing us to do.

274
00:19:00.660 --> 00:19:05.280
And again, if we didn't care about formatting and all we wanted to do was just some, then I could

275
00:19:05.280 --> 00:19:08.340
just take this something and just put it here, right?

276
00:19:08.430 --> 00:19:10.110
And we wouldn't have a collecting.

277
00:19:10.260 --> 00:19:11.520
I'm only using the collecting.

278
00:19:11.520 --> 00:19:15.930
And then because I want to do two things, I want to sum up these salaries and then I'm going to take

279
00:19:15.930 --> 00:19:20.940
those sums, which will be numbers, and then I want to format them as currency.

280
00:19:21.030 --> 00:19:22.620
And that's why I'm using the collecting.

281
00:19:22.620 --> 00:19:23.630
And then, OK.

282
00:19:24.880 --> 00:19:28.960
And so now you can see the pattern pretty quickly, so it pretty easily.

283
00:19:29.110 --> 00:19:34.660
So if I wanted to do a third and a fourth and a fifth level of grouping, I could just keep nesting

284
00:19:34.660 --> 00:19:35.500
bees, right?

285
00:19:35.620 --> 00:19:40.750
I could just keep going person and then pick some other field, right?

286
00:19:40.750 --> 00:19:45.700
If I had other fields that that made sense to do that with right, and I could just keep nesting those

287
00:19:45.700 --> 00:19:47.590
groupings in in that way.

288
00:19:47.620 --> 00:19:47.980
Right?

289
00:19:48.640 --> 00:19:49.020
All right.

290
00:19:49.030 --> 00:19:58.270
So now another thing this for each bit here where that I was using really just to visualize the data

291
00:19:58.480 --> 00:20:02.740
in a somewhat nice way is going to make less sense.

292
00:20:02.890 --> 00:20:09.190
Now, in fact, actually, as it edges as it is currently written, it won't make much sense at all.

293
00:20:09.940 --> 00:20:15.610
The first part, the state that part will work, but the second part will not right.

294
00:20:15.610 --> 00:20:23.440
Because originally, before making these changes, we had a map of strings, two strings.

295
00:20:23.740 --> 00:20:28.060
Now, though, we have a map, we actually should even say What?

296
00:20:28.360 --> 00:20:31.390
So actually, why don't you try to anticipate?

297
00:20:31.540 --> 00:20:35.530
What is the output of this dot collect call now?

298
00:20:35.740 --> 00:20:37.040
Can you anticipate that?

299
00:20:37.060 --> 00:20:39.160
Why don't you take a moment and really study this?

300
00:20:39.160 --> 00:20:45.700
And guess what will be the output of this collect call as as as we have the code now?

301
00:20:47.250 --> 00:20:47.550
OK.

302
00:20:47.580 --> 00:20:53.490
Did you get it all right, so let's let's analyze it, so we know that this grouping by is going to

303
00:20:53.490 --> 00:20:56.970
result in a map of strings, right?

304
00:20:56.970 --> 00:21:03.840
Because we're going to have the state in the state is a string, a map of strings mapping strings to

305
00:21:03.930 --> 00:21:05.220
something else, right?

306
00:21:05.730 --> 00:21:10.620
So I've said in the past that the grouping by method returns a map.

307
00:21:10.860 --> 00:21:20.050
OK, so this first grouping by is going to return a map of strings to whatever this outputs.

308
00:21:20.220 --> 00:21:22.560
And we know that this is another grouping by.

309
00:21:22.560 --> 00:21:26.610
So we know that that's going to output a map of something also.

310
00:21:26.620 --> 00:21:32.310
So we are going to have a map of strings to another map.

311
00:21:32.670 --> 00:21:33.150
OK.

312
00:21:33.480 --> 00:21:39.560
And now this other map is going to also have whatever the data type is for this.

313
00:21:39.570 --> 00:21:40.980
What is the data type for this?

314
00:21:41.310 --> 00:21:43.040
It's character, right?

315
00:21:43.050 --> 00:21:44.040
Gender is character.

316
00:21:44.040 --> 00:21:47.780
So this will be a map of characters too.

317
00:21:48.180 --> 00:21:53.250
And then whatever the output of this is which we've already seen before, it's going to be strings,

318
00:21:53.280 --> 00:21:53.610
right?

319
00:21:53.820 --> 00:21:56.970
Because we're going to have here the numbers, which are long.

320
00:21:57.180 --> 00:22:02.980
But then those are going to be passed into this call here, which no format is always spit out.

321
00:22:03.000 --> 00:22:03.960
Strings, right?

322
00:22:04.290 --> 00:22:08.910
So let me see if I can just show you this somewhere real quick.

323
00:22:09.090 --> 00:22:17.300
So ultimately, we're going to have a map of strings, which will be the state.

324
00:22:17.310 --> 00:22:19.770
I'm just going to cheat and show it to you in this way.

325
00:22:19.770 --> 00:22:20.940
A map of string.

326
00:22:21.420 --> 00:22:24.240
What a map of string to.

327
00:22:25.620 --> 00:22:27.510
A map of.

328
00:22:30.030 --> 00:22:33.390
Characters, which will be the gender.

329
00:22:36.090 --> 00:22:42.810
To string, which will be the salary, actually, in fact, I should say formatted.

330
00:22:44.280 --> 00:22:45.060
Salary.

331
00:22:49.040 --> 00:22:51.150
OK, so that's what we're going to have here.

332
00:22:51.170 --> 00:22:52.130
Let's look at that again.

333
00:22:52.280 --> 00:22:58.580
A map of strings, which will be the state's two maps, right?

334
00:22:58.610 --> 00:23:00.440
A map of strings to maps.

335
00:23:00.710 --> 00:23:09.730
And then the internal map would be a map of gender characters to strings, which are the formatted salary

336
00:23:09.740 --> 00:23:10.100
OK?

337
00:23:10.550 --> 00:23:17.510
So because that is because now the return type is going to be this nested mapping a map inside of a

338
00:23:17.510 --> 00:23:17.960
map.

339
00:23:18.800 --> 00:23:23.000
I'm not inclined to even bother trying to use this for each business anymore.

340
00:23:23.450 --> 00:23:24.800
I mean, we could adapt this.

341
00:23:24.800 --> 00:23:32.120
I could change this bit here to be whatever map stuff or something like that.

342
00:23:32.810 --> 00:23:38.480
But what we what we would be showing here, I'm not inclined to even try to format that in some kind

343
00:23:38.480 --> 00:23:39.760
of a nice way because it's a map.

344
00:23:39.770 --> 00:23:41.570
It's just going to be a map, right?

345
00:23:42.380 --> 00:23:50.030
So I'm inclined to simply go back to just printing out the result in a more raw format.

346
00:23:50.150 --> 00:23:54.890
It won't look pretty, but it will have all the data there, right?

347
00:23:55.100 --> 00:24:00.110
And so that means we want to go back to just capturing the output of this dot collect call.

348
00:24:00.320 --> 00:24:00.580
Right.

349
00:24:00.800 --> 00:24:09.890
So the easiest thing to do in this case, in my opinion, would be to finish off this whole dot collect

350
00:24:09.890 --> 00:24:12.530
again with a semicolon.

351
00:24:13.430 --> 00:24:13.780
All right.

352
00:24:13.880 --> 00:24:18.560
And then I guess I'll just comment that for each out, because that's no longer valid.

353
00:24:18.800 --> 00:24:19.130
All right.

354
00:24:19.340 --> 00:24:25.610
And then if I put my cursor here around this at the end of this dot collect call, I'll just capture

355
00:24:25.610 --> 00:24:26.630
another variable, right?

356
00:24:26.650 --> 00:24:28.460
So another option command V..

357
00:24:30.350 --> 00:24:33.170
And I'm going to just still call it result.

358
00:24:34.500 --> 00:24:39.840
And the reason I did it this way with just capturing the variable is because I'm just making the I.D.

359
00:24:39.930 --> 00:24:42.390
figure out what the data type should be.

360
00:24:42.420 --> 00:24:48.750
Right now, it went explicitly here and decided to say that it's returning a tree map rather than a

361
00:24:48.750 --> 00:24:51.310
generic map and whatever.

362
00:24:52.170 --> 00:25:01.110
Normally you'll you'll typically want to prefer the most generic interface that you can in your declaration

363
00:25:01.110 --> 00:25:05.430
of your variable data types, but whatever.

364
00:25:05.700 --> 00:25:06.420
All right, so.

365
00:25:06.710 --> 00:25:12.360
So this is saying we're going to get back a tree map of strings to map of character string, right?

366
00:25:12.720 --> 00:25:13.740
Now notice here.

367
00:25:14.280 --> 00:25:19.140
The generic data type is capital character instead of lowercase character, and that's just because

368
00:25:19.140 --> 00:25:20.460
of the way that generics work.

369
00:25:20.460 --> 00:25:29.790
Generics cannot actually have primitive data types, so it will so, so Java will map those primitives

370
00:25:29.790 --> 00:25:32.850
to their class wrapper type.

371
00:25:32.880 --> 00:25:33.240
OK.

372
00:25:33.480 --> 00:25:35.370
Just for the generics business.

373
00:25:35.940 --> 00:25:36.330
All right.

374
00:25:37.830 --> 00:25:38.680
But yeah, let's see.

375
00:25:38.700 --> 00:25:43.560
So that should pretty much map up with no no pun intended to what I said down here.

376
00:25:43.560 --> 00:25:44.310
Write a map.

377
00:25:44.460 --> 00:25:45.480
So this is tree map.

378
00:25:45.630 --> 00:25:46.530
I said, map.

379
00:25:46.530 --> 00:25:50.820
In fact, here, let me just bring let me bring that up.

380
00:25:51.830 --> 00:25:52.220
Here.

381
00:25:55.140 --> 00:26:03.000
So map of string to a map of character to string.

382
00:26:03.240 --> 00:26:03.570
Right?

383
00:26:03.900 --> 00:26:07.110
So yeah, we've got we've got all of that there.

384
00:26:08.040 --> 00:26:09.810
And it's called result, right?

385
00:26:10.080 --> 00:26:15.570
And so then we can come down here and uncomment this line.

386
00:26:15.570 --> 00:26:18.060
Thirty seven, where we were printing out the result.

387
00:26:18.060 --> 00:26:23.610
In that way, we can let it just print out the new monstrosity of a map of a map, right?

388
00:26:24.450 --> 00:26:24.790
OK.

389
00:26:24.840 --> 00:26:26.460
And so now we can run this guy.

390
00:26:30.140 --> 00:26:38.210
All right, so let's see what we've got here, so we've got Arkansas women or females in Arkansas made

391
00:26:38.210 --> 00:26:42.980
one point nine billion dollars and men made one point nine.

392
00:26:42.990 --> 00:26:50.690
Also interesting looks like the women made a little bit more rate one point nine three one to one point

393
00:26:50.690 --> 00:26:52.610
ninety seven Good for the ladies, right?

394
00:26:53.240 --> 00:26:56.300
We always hear that the ladies are getting paid a little less usually.

395
00:26:56.300 --> 00:27:00.440
But apparently in Arkansas with this fake, I guess it's a fake data set.

396
00:27:00.680 --> 00:27:04.940
The ladies made a little more so good for them than in Alabama.

397
00:27:04.940 --> 00:27:12.830
The women made six six point zero zero seven billion and the men made six point zero one three.

398
00:27:12.880 --> 00:27:13.200
Right.

399
00:27:13.220 --> 00:27:15.110
So they're the men made a little more.

400
00:27:15.350 --> 00:27:17.060
And I guess this is Arizona.

401
00:27:17.720 --> 00:27:24.140
So, yeah, so we can see what these people are actually making in each of these states grouped up by

402
00:27:24.140 --> 00:27:25.490
gender now, right?

403
00:27:25.760 --> 00:27:26.870
So that's pretty cool.

404
00:27:28.040 --> 00:27:28.940
Let's see.

405
00:27:29.630 --> 00:27:33.500
Now, I just want to be a little bit clear on another thing here.

406
00:27:34.430 --> 00:27:42.140
I'm showing you these examples based on just adding, but just keep in mind this function that we're

407
00:27:42.140 --> 00:27:47.400
calling here, whatever function we're calling at this point, it can be just about anything, right?

408
00:27:47.420 --> 00:27:50.800
So in this case, I'm summing, but we could average right.

409
00:27:50.810 --> 00:27:51.200
We could.

410
00:27:52.190 --> 00:27:53.360
We could average.

411
00:27:54.840 --> 00:27:57.840
These lungs just like that, just that easily, right?

412
00:27:58.230 --> 00:28:05.700
Again, you could go look at all of the various methods that exist on the collector's class and and

413
00:28:05.700 --> 00:28:11.280
have lots of ideas for other things that we could do not only here, but just in general, right?

414
00:28:11.370 --> 00:28:13.560
So you don't have to just do something right.

415
00:28:14.220 --> 00:28:16.140
You could do a lot of different things here.

416
00:28:16.380 --> 00:28:23.850
Plus, I think in the next lesson, I will show you a way that you could do even other functions that

417
00:28:23.850 --> 00:28:27.150
don't explicitly exist on the collector's class.

418
00:28:27.150 --> 00:28:31.560
If you can think of some other way that you'd want to do things with that data.

419
00:28:31.740 --> 00:28:33.780
You could implement your own.

420
00:28:34.680 --> 00:28:36.990
You can implement your own operations.

421
00:28:38.170 --> 00:28:38.560
All right.

422
00:28:38.830 --> 00:28:44.800
So, yeah, I think this is basically what I wanted to show, though, the fact that we connect these

423
00:28:44.800 --> 00:28:52.990
grouping by clauses here and you can theoretically go as deeply as you want to, as long as it's meaningful

424
00:28:52.990 --> 00:28:54.550
for what you want to do.

425
00:28:54.670 --> 00:28:55.030
Right?

426
00:28:55.660 --> 00:28:56.010
All right.

427
00:28:56.020 --> 00:29:00.010
So I think that's going to wrap up this lesson and I will see you in the next one.
