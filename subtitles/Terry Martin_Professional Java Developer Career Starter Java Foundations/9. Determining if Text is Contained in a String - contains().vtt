WEBVTT
1
00:00:00.890 --> 00:00:04.520
All right, next up, we're going to look at the containers method.

2
00:00:04.940 --> 00:00:12.950
This is a method that simply answers the question does this string of text contain some smaller string

3
00:00:12.950 --> 00:00:14.720
of text that we're looking for?

4
00:00:15.110 --> 00:00:20.270
So again, I will clear out what we had here before.

5
00:00:22.750 --> 00:00:28.930
And we'll start over, so I will create a string, and this time, let's see well, I guess I'm going

6
00:00:28.930 --> 00:00:30.850
to call it the same thing I always call it.

7
00:00:30.970 --> 00:00:37.150
But however, I think I'll put like a whole entire, maybe a longer string in here, something like

8
00:00:37.600 --> 00:00:41.950
four score and seven years ago.

9
00:00:43.490 --> 00:00:51.290
For those of you who are not Americans, this is some text from Abraham Lincoln's famous Gettysburg

10
00:00:51.290 --> 00:00:52.100
Address.

11
00:00:52.730 --> 00:00:53.240
All right.

12
00:00:53.570 --> 00:01:01.490
And so what we can do here is, again, we'll do an absolutely system.out.println line and then we will

13
00:01:02.240 --> 00:01:04.580
reference the my text variable.

14
00:01:04.610 --> 00:01:09.560
But this time we will use the contains method here.

15
00:01:09.560 --> 00:01:17.180
So this method takes a character sequence, which basically you can think of it as a string takes a

16
00:01:17.180 --> 00:01:23.480
character sequence as input, and it answers the question of whether or not the text we're looking for

17
00:01:23.510 --> 00:01:25.580
exists in the string here.

18
00:01:26.180 --> 00:01:28.730
So we've got the text fourscore and seven years ago.

19
00:01:28.730 --> 00:01:39.590
So let's say that we pass in the word seven, OK, so we would be asking the question is the string

20
00:01:39.590 --> 00:01:42.980
seven contained within this string?

21
00:01:43.280 --> 00:01:44.480
Yes or no?

22
00:01:45.170 --> 00:01:46.730
And so if we run this?

23
00:01:48.240 --> 00:01:50.220
We get true, meaning yes.

24
00:01:50.610 --> 00:01:55.860
The String seven is indeed contained inside of this string.

25
00:01:56.950 --> 00:01:58.690
Now, let's play with this a little bit.

26
00:01:58.930 --> 00:02:07.270
Let's ask it if the word sevens is contained in this string, so we'll run this again.

27
00:02:07.600 --> 00:02:08.290
False.

28
00:02:09.250 --> 00:02:15.850
OK, so there is no string with sevens, with a z on the end contained in here, so it has to be an

29
00:02:15.850 --> 00:02:18.550
exact match for the sub part there.

30
00:02:18.640 --> 00:02:19.090
OK.

31
00:02:19.480 --> 00:02:20.890
In terms of spaces?

32
00:02:21.490 --> 00:02:24.790
OK, so that's really about all there is to this.

33
00:02:25.090 --> 00:02:31.510
So some reasons why you might want to use a method like this might be that again, user entered some

34
00:02:31.510 --> 00:02:38.050
text and you want to check for the existence of certain strings that you already know to look for.

35
00:02:38.110 --> 00:02:41.950
Again, maybe it could be bad words or could be pretty much anything.

36
00:02:41.950 --> 00:02:47.560
Maybe you're looking for certain keywords and you just want to know, are any of these keywords present

37
00:02:47.560 --> 00:02:49.210
in the string there?

38
00:02:49.300 --> 00:02:52.120
Also, it doesn't have to be text that a user entered.

39
00:02:52.120 --> 00:02:57.970
It could be text that you're reading in from a database or retrieving from what's called a web service

40
00:02:57.970 --> 00:03:03.280
where you write some code that goes out onto the internet and pulls back some text of some sort.

41
00:03:03.460 --> 00:03:09.460
And you're just wanting to check for the presence of certain certain strings or sub strings or things

42
00:03:09.460 --> 00:03:10.000
like that.

43
00:03:10.360 --> 00:03:16.900
So it's a pretty simple method and that's going to cover this topic, and I will see you for the next

44
00:03:16.900 --> 00:03:17.170
one.
