1
00:00:00,120 --> 00:00:08,010
All right, so now we've written two tests and we've refactored any duplication out of the tests as

2
00:00:08,010 --> 00:00:08,400
well.

3
00:00:08,760 --> 00:00:11,790
So now the question becomes, OK, what should we test next?

4
00:00:12,420 --> 00:00:18,480
Another great type of scenario is to try to consider are what are called edge cases.

5
00:00:18,660 --> 00:00:25,320
Now, there's no great formula that I can give you for how to think of edge cases, unfortunately.

6
00:00:25,320 --> 00:00:31,470
But maybe I can at least clue you in a little bit into some some ways of thinking about them.

7
00:00:32,040 --> 00:00:37,620
So in this particular domain here, where we've got this calculator object and currently we're just

8
00:00:37,620 --> 00:00:44,160
testing our ability to add, let's jump into this add method and just be reminded of what it's actually

9
00:00:44,160 --> 00:00:44,550
doing.

10
00:00:44,910 --> 00:00:51,120
So this ad method is taking two integers number one and number two, and then it returns an integer.

11
00:00:51,180 --> 00:00:51,970
Simple enough.

12
00:00:51,990 --> 00:00:59,730
So when I ask myself, are there any potential edge cases that might be good to test with this one thought

13
00:00:59,730 --> 00:01:06,780
that does come to my mind is the fact that we are using an integer and there is a limit of how large

14
00:01:06,780 --> 00:01:08,720
an integer number can actually be.

15
00:01:08,730 --> 00:01:13,290
As we learned in the number module right and integer is 32 bit wide.

16
00:01:13,650 --> 00:01:21,540
And the most significant bit of the integer is used to specify the sign of the number, meaning whether

17
00:01:21,540 --> 00:01:23,490
or not it's negative or positive, right?

18
00:01:24,000 --> 00:01:29,640
And if I recall offhand, because I'm too lazy to go, look, right now, the range of an integer is

19
00:01:29,640 --> 00:01:33,750
roughly on the positive side two point one billion, if I'm not mistaken.

20
00:01:34,200 --> 00:01:34,680
OK.

21
00:01:34,740 --> 00:01:41,760
So one question that comes to my mind is what would happen if we were to pass in the largest number

22
00:01:41,760 --> 00:01:47,380
that an integer can represent in Java plus one or plus two?

23
00:01:47,400 --> 00:01:50,040
These would be edge case scenarios, right?

24
00:01:50,040 --> 00:01:55,260
Because it it's not necessarily entirely clear what the result of that would be.

25
00:01:55,590 --> 00:02:00,690
And because of that, those might be some pretty good scenarios to test.

26
00:02:00,840 --> 00:02:04,380
So how might we want to go about testing that?

27
00:02:04,440 --> 00:02:04,770
All right.

28
00:02:04,770 --> 00:02:15,060
So let's jump back over to the calculator test, and let's just copy one of these test methods and create

29
00:02:15,060 --> 00:02:15,990
a new test.

30
00:02:16,940 --> 00:02:20,270
And let's say something like can add.

31
00:02:21,390 --> 00:02:21,840
I don't know.

32
00:02:22,110 --> 00:02:24,690
Max Ent., +1.

33
00:02:25,230 --> 00:02:28,110
OK, let's consider testing that scenario.

34
00:02:28,740 --> 00:02:31,290
Now we're going to have to consider some things here.

35
00:02:31,320 --> 00:02:34,080
First off, what is the maximum value for an integer?

36
00:02:34,230 --> 00:02:36,990
Well, there's a couple of ways that we could find this out.

37
00:02:37,290 --> 00:02:40,200
Obviously, we could just google it and we might actually do that.

38
00:02:40,380 --> 00:02:46,680
But I do want you to be aware of something if we use the integer wrapper class.

39
00:02:46,990 --> 00:02:49,620
Remember this guy that that class right there?

40
00:02:49,680 --> 00:02:54,810
If you will recall the integer wrapper class and all of the numeric wrapper classes for this matter

41
00:02:55,050 --> 00:02:57,090
have a number of methods on them.

42
00:02:57,270 --> 00:03:05,370
They also have a few constants defined on them, and the integer wrapper class actually has a constant

43
00:03:05,370 --> 00:03:07,050
called max value.

44
00:03:07,770 --> 00:03:13,560
So this does indeed refer to the maximum value of an integer.

45
00:03:13,740 --> 00:03:19,920
And if I select that and hover on it, it even tells us here in the Java Dock a constant holding the

46
00:03:19,920 --> 00:03:24,780
maximum value and can have, which is two to the 31st power minus one.

47
00:03:24,840 --> 00:03:28,590
Oh, and look at that, there's the actual number right there.

48
00:03:28,890 --> 00:03:30,540
If I press f one.

49
00:03:31,730 --> 00:03:36,350
I can make that bigger and then I can select that number and copy it.

50
00:03:36,740 --> 00:03:45,500
So I am now setting up a scenario where we can add the maximum value of an integer plus one.

51
00:03:45,710 --> 00:03:48,920
But now I need to assert what that would equal.

52
00:03:49,370 --> 00:03:52,220
And here's where we need to be a little bit careful.

53
00:03:52,400 --> 00:03:59,960
Now, some of you who may be kind of shrewd might think that we could do something like integer dot

54
00:03:59,960 --> 00:04:02,270
max value plus one.

55
00:04:02,870 --> 00:04:06,440
And I think that's a very logical assumption to make.

56
00:04:06,770 --> 00:04:09,980
So let's run just this one test and see what happens.

57
00:04:12,520 --> 00:04:14,330
OK, great, so that passed.

58
00:04:14,350 --> 00:04:15,670
So we're done right.

59
00:04:16,300 --> 00:04:17,440
Well, not so fast.

60
00:04:17,740 --> 00:04:22,750
We need to be a little careful here because as we've already stated and acknowledged, we're we're running

61
00:04:22,750 --> 00:04:24,010
edge cases now.

62
00:04:24,550 --> 00:04:26,110
So I would encourage that.

63
00:04:26,110 --> 00:04:29,290
In a case like this, we're making certain assumptions here.

64
00:04:29,530 --> 00:04:38,470
We're assuming that adding one to this integer value is going to do what we expect it to do, but we

65
00:04:38,470 --> 00:04:39,820
don't actually know that.

66
00:04:40,300 --> 00:04:46,570
So consider if there's anything faulty in the way that this add method is implemented, which we already

67
00:04:46,570 --> 00:04:49,480
know is essentially doing exactly this.

68
00:04:50,260 --> 00:04:53,850
And then our expected field is doing the exact same thing.

69
00:04:53,860 --> 00:04:59,650
We might just be doubling down on logic that's faulty from the beginning here.

70
00:04:59,680 --> 00:05:00,130
OK.

71
00:05:00,250 --> 00:05:09,370
So what we might want to do in this particular case is to at least just print out what this sum actually

72
00:05:09,370 --> 00:05:09,730
is.

73
00:05:10,000 --> 00:05:17,050
So we could temporarily just put a system that out and then just reference that some just like so.

74
00:05:17,380 --> 00:05:20,590
So let's let's run this again and see what that what that prints out.

75
00:05:21,010 --> 00:05:27,790
Oh, and one more thing before we do that, I copied the actual maximum integer value from the Java

76
00:05:27,790 --> 00:05:30,970
Dock, and I'm going to just put that somewhere in a comment.

77
00:05:31,180 --> 00:05:32,230
So there's that number.

78
00:05:32,260 --> 00:05:32,650
OK.

79
00:05:32,800 --> 00:05:33,180
All right.

80
00:05:33,190 --> 00:05:40,300
So we would expect that the sum of the integer max value and one would be this big, huge number, but

81
00:05:40,300 --> 00:05:41,860
instead of a seven and eight.

82
00:05:42,190 --> 00:05:43,650
Is that a reasonable assumption?

83
00:05:43,660 --> 00:05:45,160
I think that should be reasonable.

84
00:05:45,460 --> 00:05:45,790
All right.

85
00:05:45,940 --> 00:05:48,310
So now let's run this and see what we get.

86
00:05:49,780 --> 00:05:52,240
Oh, interesting, we get a negative number.

87
00:05:52,720 --> 00:05:54,370
Does that make any sense to you?

88
00:05:54,850 --> 00:05:57,820
That is not what I think we would have expected.

89
00:05:57,940 --> 00:06:01,800
It looks like the right digits, but the sign is wrong.

90
00:06:01,810 --> 00:06:02,890
It's negative.

91
00:06:03,160 --> 00:06:06,430
So that's telling us something right here now.

92
00:06:06,430 --> 00:06:12,310
We would have expected that the answer should have been this no, except with an eight on the end positive,

93
00:06:12,310 --> 00:06:12,670
though.

94
00:06:13,060 --> 00:06:18,520
But we got a negative out of this since our assertion is passing.

95
00:06:18,760 --> 00:06:25,930
That means that when we take this max integer and add one to it right here in the assertion, we must

96
00:06:25,930 --> 00:06:31,480
be getting this same negative number, which means that our own assumption of what to expect is actually

97
00:06:31,480 --> 00:06:32,080
wrong.

98
00:06:32,470 --> 00:06:32,860
Right?

99
00:06:33,430 --> 00:06:39,640
So this is shining a light on the fact that our unit tests are only as good as our scenarios that we

100
00:06:39,640 --> 00:06:46,240
can think of, and our unit tests are only as good as our assumptions of what to actually expect.

101
00:06:47,080 --> 00:06:55,660
Now I think what's happening here, if you remember back to how the numbers work in Java, since we

102
00:06:55,660 --> 00:07:05,430
only have 32 bits available to use and the most significant bit of an integer is used for the sign,

103
00:07:05,440 --> 00:07:05,890
right?

104
00:07:06,310 --> 00:07:14,530
What happens when you take the largest number that you can use in an integer, which is this, and then

105
00:07:14,530 --> 00:07:16,510
you add one more to it?

106
00:07:17,230 --> 00:07:23,890
Well, you're likely going to bump up against the most significant bit that last 32 bit.

107
00:07:24,190 --> 00:07:29,520
And I think that's probably the reason why we're getting a negative value now.

108
00:07:29,530 --> 00:07:32,140
If that makes any sense for you, go back and watch.

109
00:07:32,140 --> 00:07:38,290
That lesson is if you need a refresher on some of the concepts that I'm talking about here, but my

110
00:07:38,290 --> 00:07:41,290
suspicion is that something along those lines is happening.

111
00:07:41,860 --> 00:07:48,910
So can you think of a way that we could do a proper comparison without having to worry about running

112
00:07:48,910 --> 00:07:51,520
out of bits down here in the assertion?

113
00:07:51,670 --> 00:07:55,000
If you need to pause the video and think about that for a moment?

114
00:07:56,020 --> 00:07:56,450
All right.

115
00:07:56,470 --> 00:08:04,240
So one thing that I can think of that we might do is in our assertion for the expected field.

116
00:08:04,900 --> 00:08:12,730
What if we don't use an integer and we use something with more precision like a long?

117
00:08:13,150 --> 00:08:20,800
So we could convert these numbers to a long and therefore give ourselves more bits to ensure that we're

118
00:08:20,800 --> 00:08:25,720
not running up against the edge of those of the 32 bits that we have.

119
00:08:25,810 --> 00:08:27,550
Does that make sense now?

120
00:08:27,580 --> 00:08:34,540
Can you think of how we could ensure that when we do this integer max value plus one, we're not stuck

121
00:08:34,540 --> 00:08:38,830
inside of 32 bits and we actually increase the number of bits?

122
00:08:39,370 --> 00:08:40,780
Can you think of how we could do that?

123
00:08:41,680 --> 00:08:42,050
All right.

124
00:08:42,070 --> 00:08:49,330
So you may recall that by default, numbers like this one that we have here are of type, integer or

125
00:08:49,330 --> 00:08:52,600
end, and we know that this number here is an event.

126
00:08:52,780 --> 00:08:59,530
And when you do a math operation like an enter plus an end, by default, the result will be another

127
00:08:59,530 --> 00:08:59,920
event.

128
00:09:00,250 --> 00:09:05,710
But we know that integer only has 32 bits, and we suspect that we're running up against the very edge

129
00:09:05,710 --> 00:09:09,460
of those 32 bits and that may be causing this issue here.

130
00:09:09,910 --> 00:09:18,580
So we can force the JVM or Java to do this math with more bits by simply making one of these numbers

131
00:09:18,820 --> 00:09:20,500
not be an integer.

132
00:09:20,710 --> 00:09:25,510
And the easiest thing I can think to do here would be to actually put my cursor right after this one

133
00:09:25,720 --> 00:09:28,990
and then put an L here, meaning long.

134
00:09:29,560 --> 00:09:36,370
So by doing that, I'm telling the JVM that I want this one to not be an integer with 32 bits, but

135
00:09:36,370 --> 00:09:39,430
I want it to be a long with 64 bits.

136
00:09:39,610 --> 00:09:48,790
And now, by doing so, the sum of these two numbers will be of type long, which has much more room

137
00:09:48,790 --> 00:09:54,250
to grow in the event that you're adding one to the maximum value of an integer.

138
00:09:54,400 --> 00:09:54,710
OK.

139
00:09:54,730 --> 00:09:56,680
So we're giving ourselves more space here.

140
00:09:57,130 --> 00:10:03,400
Now, this isn't a super obvious scenario here, and my purpose in showing you this isn't to revisit

141
00:10:03,520 --> 00:10:05,280
the number module per se.

142
00:10:05,410 --> 00:10:11,140
My purpose here is to shine a light on the fact that when you're testing, you want to try to think

143
00:10:11,140 --> 00:10:17,890
of true edge cases because it is in those edge cases that a lot of bugs can exist and you have to be

144
00:10:17,890 --> 00:10:20,620
really careful when you're doing those edge cases.

145
00:10:20,770 --> 00:10:27,040
But one simple thing that you may want to do is simply print out some of the intermediate values of

146
00:10:27,040 --> 00:10:31,630
what you may assume you're going to get right so you can see it with your own eyes.

147
00:10:31,900 --> 00:10:37,360
And that may help shine a light on how best to go about testing these scenarios as well.

148
00:10:37,450 --> 00:10:41,140
So let's rerun this now and see what we end up with.

149
00:10:42,420 --> 00:10:43,000
Hmm.

150
00:10:43,220 --> 00:10:44,390
Now we get a failure.

151
00:10:44,690 --> 00:10:47,530
And now when we look at that failure, look at what we see here.

152
00:10:47,540 --> 00:10:54,200
We expected a positive number ending with an eight, but we got a negative number ending with an eight.

153
00:10:54,320 --> 00:11:01,010
And it looks like the numbers are the same other than the sign to one four seven four eight three six

154
00:11:01,010 --> 00:11:01,610
four eight.

155
00:11:01,820 --> 00:11:02,090
Yeah.

156
00:11:02,210 --> 00:11:08,930
So the numbers are the same, but the sign is different, and that's enough to now show that this isn't

157
00:11:08,930 --> 00:11:10,070
working correctly.

158
00:11:10,130 --> 00:11:10,620
Right?

159
00:11:10,640 --> 00:11:14,360
So we just uncovered a potential bug.

160
00:11:14,660 --> 00:11:22,430
If someone had chosen to use this add method and pass in a number that is right at the edge of what's

161
00:11:22,460 --> 00:11:25,010
allowed with an integer right.

162
00:11:25,040 --> 00:11:28,850
The I.D. and Java wouldn't have complained at all.

163
00:11:28,940 --> 00:11:31,790
And yet our answers would have been just dead wrong.

164
00:11:32,210 --> 00:11:37,550
Now we're not going to actually try to fix this, because that would require us to really think even

165
00:11:37,550 --> 00:11:41,230
more about the number of systems and how we would want to handle this.

166
00:11:41,240 --> 00:11:44,030
And that's a little beyond the scope of what I want to get into.

167
00:11:44,270 --> 00:11:51,950
For this testing, but I wanted to again, just show that it's important to try to think of edge cases.

168
00:11:52,160 --> 00:11:56,930
You may not always be able to think of a good one like this one, but you should at least try.

169
00:11:56,960 --> 00:12:02,330
And then you want to be super careful with what you're doing to test those edge cases, because in this

170
00:12:02,330 --> 00:12:08,540
case, we made an assumption that we could simply refer to the max value plus one and that that would

171
00:12:08,540 --> 00:12:09,020
work.

172
00:12:09,230 --> 00:12:10,820
And it did pass.

173
00:12:10,850 --> 00:12:12,080
But it wasn't correct.

174
00:12:12,260 --> 00:12:12,650
Right?

175
00:12:12,800 --> 00:12:13,970
It wasn't correct at all.

176
00:12:14,180 --> 00:12:14,530
All right.

177
00:12:14,540 --> 00:12:17,810
So we're going to wrap up this lesson and I will see you in the next one.
