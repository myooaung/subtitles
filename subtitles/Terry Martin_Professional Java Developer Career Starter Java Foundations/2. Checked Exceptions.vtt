WEBVTT
1
00:00:00.390 --> 00:00:06.750
On the other hand, we've got the checked exceptions, and we're going to just jump back over to the

2
00:00:06.750 --> 00:00:08.370
employees class again.

3
00:00:08.700 --> 00:00:11.610
Now this guy here files that lines.

4
00:00:12.870 --> 00:00:16.740
Forgive the mess here, but you guys should know this code pretty comfortably by now.

5
00:00:17.580 --> 00:00:25.140
So when we call the files that lines method, we have to do something with the exception that can result

6
00:00:25.140 --> 00:00:26.160
from this call.

7
00:00:26.400 --> 00:00:34.410
We know for a fact the creator of this method line's method knows that it is possible that the path

8
00:00:34.420 --> 00:00:38.070
that we are passing into it might not be a valid path.

9
00:00:38.370 --> 00:00:44.430
And because he or she knew at the time of writing this method that that could happen.

10
00:00:46.500 --> 00:00:56.520
They declared that this method is capable of throwing an Io exception and B and they made their IO exception

11
00:00:56.520 --> 00:01:03.180
class extend not from runtime exception, but directly from exception.

12
00:01:03.330 --> 00:01:09.360
And because it extends directly from exception, it is a checked exception, which means that we have

13
00:01:09.360 --> 00:01:10.860
to do something with it.

14
00:01:11.100 --> 00:01:11.550
OK.

15
00:01:11.880 --> 00:01:18.510
And so what we're doing here is we're surrounding all of this code inside of a try catch block.

16
00:01:19.020 --> 00:01:19.260
All right.

17
00:01:19.270 --> 00:01:25.710
So let me show you an alternative way that we might have done this just so you can see what that might

18
00:01:25.710 --> 00:01:26.550
have looked like.

19
00:01:26.790 --> 00:01:30.870
So we'll jump back over here to the people class.

20
00:01:32.470 --> 00:01:39.310
And let me close this down, and and I'll tell you what we'll do, I'll just make a bunch of empty space

21
00:01:39.310 --> 00:01:45.190
so that I don't have to look at all of that and appear, though we'll do something a little different.

22
00:01:45.490 --> 00:01:53.200
Let's let's call the files the lines method here, and we'll do path.

23
00:01:54.520 --> 00:01:58.260
Of blah blah blah.

24
00:01:59.980 --> 00:02:00.760
Like so.

25
00:02:02.270 --> 00:02:09.860
OK, so you see here that we're getting the red squiggles because we have an unhindered exception.

26
00:02:10.040 --> 00:02:14.690
So we've already seen one of the ways that we can handle this back when we were writing the big data

27
00:02:14.690 --> 00:02:15.380
class, right?

28
00:02:16.040 --> 00:02:17.560
I think we just what do we do?

29
00:02:17.570 --> 00:02:22.550
We put our cursor there, I think, and then I did an option return and then the idea gave me a couple

30
00:02:22.550 --> 00:02:23.570
of options here.

31
00:02:23.870 --> 00:02:30.560
Now, the option that we chose at that time was to surround with try catch right.

32
00:02:30.570 --> 00:02:33.080
And so I'll do that for you here, right?

33
00:02:33.290 --> 00:02:38.150
So we can surround with a try catch and then we could just keep going right?

34
00:02:38.150 --> 00:02:45.590
And I think we did parallel and then we just kept doing stuff here like whatever limit.

35
00:02:46.910 --> 00:02:47.450
Blah blah blah.

36
00:02:47.510 --> 00:02:49.130
Right, and we wrote a bunch of code, right?

37
00:02:49.340 --> 00:02:53.450
And so that's what we did there, and we did that all inside of the try catch.

38
00:02:53.450 --> 00:02:57.200
So that's one that's one way that you could handle this.

39
00:02:57.440 --> 00:03:04.790
However, the other way that we didn't look at because we weren't ready to learn it yet was to add an

40
00:03:04.790 --> 00:03:07.340
exception to the method signature.

41
00:03:07.460 --> 00:03:09.230
So let me show you what that looks like.

42
00:03:11.530 --> 00:03:13.660
Now this looks cleaner, right?

43
00:03:14.170 --> 00:03:15.910
But be careful with this.

44
00:03:16.630 --> 00:03:27.070
So now what we've done is we've just declared to the JVM as a whole that, yeah, yeah, yeah, I know

45
00:03:27.070 --> 00:03:34.090
that the line's method is capable of throwing an exception and I o exception, but I don't want to be

46
00:03:34.090 --> 00:03:35.410
the one to handle that.

47
00:03:35.590 --> 00:03:41.350
So what I'm going to do, I'm saying I from the perspective of the main method here.

48
00:03:41.710 --> 00:03:49.690
What so what I'm going to do is I'm going to take that particular exception if it is thrown and I'm

49
00:03:49.690 --> 00:03:54.050
going to re throw it back to whoever called me.

50
00:03:54.310 --> 00:03:57.400
So whatever code calls the main method?

51
00:03:58.430 --> 00:04:02.660
It will have to handle whatever happens with this exception now.

52
00:04:02.780 --> 00:04:09.950
So we're kind of passing the buck on to the code that called this main method, which in this case is

53
00:04:09.950 --> 00:04:11.090
the AVM itself.

54
00:04:11.240 --> 00:04:14.030
And so the JVM is just going to blow up all the same.

55
00:04:14.540 --> 00:04:20.720
So in this particular case, I suppose you're not really losing much in such a simple program like this.

56
00:04:20.870 --> 00:04:29.960
However, imagine if we were writing a program with a user interface and we asked the user to select

57
00:04:29.960 --> 00:04:31.070
a file, right?

58
00:04:31.070 --> 00:04:35.570
Like it's a graphical program right in like a file open dialogue.

59
00:04:35.570 --> 00:04:36.470
In fact, here I'll show you.

60
00:04:36.500 --> 00:04:40.610
So like in the 80s, here we go to file open.

61
00:04:42.350 --> 00:04:42.710
Right.

62
00:04:43.490 --> 00:04:44.270
Just like that.

63
00:04:45.530 --> 00:04:54.350
And I select some file, and let's say that I select the file that that I don't have permission to open.

64
00:04:54.380 --> 00:04:58.070
OK, maybe the ID doesn't check for that.

65
00:04:58.100 --> 00:05:00.680
Maybe it just blindly tries to go and open that file, right?

66
00:05:00.680 --> 00:05:07.730
So I navigate to some file and and I click open and the program is written in Java.

67
00:05:07.940 --> 00:05:13.310
And so I have code that looks just like this that tries to open up that file.

68
00:05:13.310 --> 00:05:20.150
But the operating system won't allow it because I, the current user of the computer, don't have permissions

69
00:05:20.150 --> 00:05:21.890
to open up that file.

70
00:05:22.340 --> 00:05:27.410
So in that case, presumably an EO exception would be thrown.

71
00:05:27.770 --> 00:05:30.770
Now, should the program just blow up and die?

72
00:05:31.430 --> 00:05:32.330
I don't think so.

73
00:05:32.600 --> 00:05:34.100
It should not blow up and die.

74
00:05:34.370 --> 00:05:38.660
And most well-written programs won't just die or exit exit, right?

75
00:05:39.020 --> 00:05:46.490
Instead, what should happen is I, the user of this program, should be given a message telling me

76
00:05:46.490 --> 00:05:47.210
something.

77
00:05:47.820 --> 00:05:54.410
You know, you don't have permissions to read that file or the program was unable to open that file

78
00:05:54.410 --> 00:05:55.370
something like that.

79
00:05:56.000 --> 00:06:00.500
And then I should be allowed to try again with some other file, right?

80
00:06:00.520 --> 00:06:03.230
So the program doesn't have to just completely die.

81
00:06:03.860 --> 00:06:08.510
It could just give me some feedback that that particular file isn't working for us.

82
00:06:08.750 --> 00:06:13.460
Maybe I can go look at that file and change its permissions or something like that, right?

83
00:06:14.120 --> 00:06:21.560
So if I do this where I just throw this new exception without trying to handle it, in this particular

84
00:06:21.560 --> 00:06:23.810
case, the program is just going to die.

85
00:06:23.990 --> 00:06:28.910
And so that is not a good use of the exception handling at all.

86
00:06:29.090 --> 00:06:38.270
The better thing to do here would have been let me undo this would have been to still use the try catch

87
00:06:38.840 --> 00:06:40.580
surround with try catch.

88
00:06:41.480 --> 00:06:44.240
And now at least I can do something like.

89
00:06:46.070 --> 00:06:53.900
Give the users some feedback like we were unable to open the file.

90
00:06:54.410 --> 00:06:58.850
All right, so now let's try running that because we know that there is no file called blah blah blah.

91
00:07:00.500 --> 00:07:01.170
Let's see.

92
00:07:01.190 --> 00:07:04.610
So no file, blah blah blah.

93
00:07:04.730 --> 00:07:05.420
There we go.

94
00:07:05.720 --> 00:07:07.370
And then we get our stack trace.

95
00:07:07.580 --> 00:07:08.240
Now notice.

96
00:07:08.240 --> 00:07:16.460
In this particular case, the Stack Trace is actually showing us code that is internal to Java.

97
00:07:16.730 --> 00:07:17.690
How do I know that?

98
00:07:18.020 --> 00:07:20.030
Well, I can see right here from the path.

99
00:07:20.120 --> 00:07:20.480
Right?

100
00:07:20.690 --> 00:07:22.490
That's not code that we wrote.

101
00:07:22.700 --> 00:07:24.920
Now here's one thing to be careful of.

102
00:07:25.540 --> 00:07:35.540
I 98 percent of the time, 98 to 99 percent of the time when I am reading a stack trace, I do not jump

103
00:07:35.540 --> 00:07:39.770
into any of the code that is part of Java itself, right?

104
00:07:39.800 --> 00:07:43.430
These are all standard Java classes, part of the Java Library.

105
00:07:43.910 --> 00:07:49.880
I can pretty much assume that there is nothing broken or wrong with any of this code and nine times

106
00:07:49.880 --> 00:07:50.570
out of 10.

107
00:07:50.810 --> 00:07:54.800
Me jumping in to these lines of code isn't going to shed any light on anything.

108
00:07:54.800 --> 00:07:56.810
Is this going to convoluted the problem?

109
00:07:57.140 --> 00:08:05.270
So what I will typically do in this case is I will start at the top, but I will go down until I encounter

110
00:08:05.270 --> 00:08:07.820
code that I wrote right?

111
00:08:07.820 --> 00:08:11.060
Or that was written by me or my team or whatever, right?

112
00:08:11.270 --> 00:08:13.940
And in this case, that would be this line right here.

113
00:08:15.370 --> 00:08:16.180
Line eight.

114
00:08:16.390 --> 00:08:18.900
And in this case, I could see, OK.

115
00:08:18.950 --> 00:08:21.220
There's no file called blah blah blah, right?

116
00:08:22.300 --> 00:08:24.580
So that would be the thought process that I would have.

117
00:08:24.590 --> 00:08:32.440
So I would be automatically skipping over all of these lines until I saw a line with code that I knew

118
00:08:32.590 --> 00:08:34.480
I could do something about, right?

119
00:08:34.480 --> 00:08:36.370
Because I'm not going to be changing.

120
00:08:36.570 --> 00:08:43.120
And in fact, it wouldn't even be able to change any lines of code inside of the Java Standard Library

121
00:08:43.120 --> 00:08:44.040
or any of that, right?

122
00:08:45.760 --> 00:08:47.350
So I would just skip all of these things.

123
00:08:47.560 --> 00:08:53.590
The only reason we're seeing all of this is because the thread got this deep into file related code

124
00:08:53.590 --> 00:08:58.700
before the fundamental root cause of the error actually occurred down here.

125
00:08:58.730 --> 00:08:59.170
OK.

126
00:08:59.320 --> 00:09:04.990
And so we're just seeing the path that the thread took to get to that exception.

127
00:09:05.950 --> 00:09:06.370
OK.

128
00:09:06.490 --> 00:09:11.500
A couple other little things I want to show you before wrapping up on this lesson.

129
00:09:12.430 --> 00:09:19.180
There's one more thing that we can add to our try catch blocks, and that is a finally clause.

130
00:09:19.540 --> 00:09:22.000
So we can say finally.

131
00:09:24.180 --> 00:09:26.790
Down here and then we can do something here.

132
00:09:26.830 --> 00:09:29.160
OK, so for example, we could say.

133
00:09:30.610 --> 00:09:34.150
Make sure this runs no matter what.

134
00:09:36.030 --> 00:09:37.470
And I will run that.

135
00:09:38.590 --> 00:09:42.190
All right, and so we see here make sure this runs no matter what.

136
00:09:44.720 --> 00:09:51.170
So what's happening here is that sometimes depending on what you're trying to do inside of your try

137
00:09:51.680 --> 00:10:00.430
block, you may need to clean up or finish up some things before the program completely dies.

138
00:10:00.440 --> 00:10:07.670
Because as we've seen here, in many cases with a try catch block, the program is going to just die.

139
00:10:07.680 --> 00:10:12.230
Even though you may have that catch, you might be handling things in such a way that the program is

140
00:10:12.230 --> 00:10:16.100
still going to just die when it's done OK.

141
00:10:16.550 --> 00:10:20.990
But before it dies, you may feel compelled to clean a few things up.

142
00:10:21.170 --> 00:10:28.040
One example of this would be in some kinds of applications where we might be opening files to read or

143
00:10:28.040 --> 00:10:32.870
write to them, or making connections to databases or things of that sort.

144
00:10:33.740 --> 00:10:40.040
If something goes wrong with any of those opening of connections and files and stuff, we don't want

145
00:10:40.040 --> 00:10:46.610
to just leave the file that we may have been able to open in in in a strange state.

146
00:10:46.940 --> 00:10:53.750
We want to ensure that even if something went wrong while we were reading data from somewhere, even

147
00:10:53.750 --> 00:11:02.750
if something went wrong, we still close that connection or closed that file gracefully and we can do

148
00:11:02.750 --> 00:11:04.250
that in a final block.

149
00:11:04.280 --> 00:11:10.970
So what happens with the final block is that any code that we put here is strongly attempted by the

150
00:11:10.970 --> 00:11:17.300
JVM to be executed regardless of what went wrong in in the try in the try block.

151
00:11:17.330 --> 00:11:25.130
OK, so the house may be on fire, but we're telling the JVM, please try your best to do whatever I

152
00:11:25.130 --> 00:11:26.150
said down here.

153
00:11:26.420 --> 00:11:32.690
Now, with that being said, you'd prefer to avoid doing things in the final block that also are capable

154
00:11:32.690 --> 00:11:35.430
of throwing exceptions, because then that could screw up what?

155
00:11:35.450 --> 00:11:36.980
What's happening with the final block?

156
00:11:37.130 --> 00:11:39.410
There have been cases where you still had to do that.

157
00:11:39.590 --> 00:11:43.430
We might see one of those when we learn about file handling, by the way.

158
00:11:44.180 --> 00:11:49.760
But you generally want to do kind of like last resort types of things down here, like, Hey, clean

159
00:11:49.760 --> 00:11:50.570
up everything.

160
00:11:50.720 --> 00:11:51.080
Hurry up.

161
00:11:51.080 --> 00:11:53.420
Get your stuff out of this house because it's on fire.

162
00:11:53.430 --> 00:11:54.620
Kind of a situation.

163
00:11:55.840 --> 00:12:02.440
Finally, blocks, though, are really useful to guarantee that no matter how bad things are going,

164
00:12:02.620 --> 00:12:06.520
we get one last shot to try some final cleanup.

165
00:12:06.760 --> 00:12:13.990
There's another clause that we can add to try catch blocks now also called a resource, so try with

166
00:12:13.990 --> 00:12:14.830
resources.

167
00:12:15.430 --> 00:12:21.880
We may take a look at that as well in the module where we will learn how to work more with files.

168
00:12:22.390 --> 00:12:28.900
So coming back down here now to the original little try catch code that we had when we were passing

169
00:12:28.900 --> 00:12:36.070
in that number and everything, I just wanted to give a couple a couple of comments on this code.

170
00:12:37.270 --> 00:12:42.700
So because we're dealing with runtime exceptions here that don't need to be caught in the first place,

171
00:12:42.970 --> 00:12:47.530
you may be wondering, well, what do we do to protect ourselves from this type of situation?

172
00:12:47.680 --> 00:12:55.180
And it's actually not that hard to protect ourselves from some of these situations in this particular

173
00:12:55.180 --> 00:13:00.430
case, where we have this code here, that's about to do in a raid length divide by NUM.

174
00:13:00.640 --> 00:13:07.510
We could explicitly just check, you know, we could say something like if NUM.

175
00:13:09.340 --> 00:13:14.000
Is zero then blah blah blah.

176
00:13:14.020 --> 00:13:15.820
I do do some things right?

177
00:13:16.210 --> 00:13:19.030
Or we could even consider if.

178
00:13:20.050 --> 00:13:25.060
NUM is not zero then.

179
00:13:29.270 --> 00:13:32.090
Then we allow that line to be executed.

180
00:13:32.120 --> 00:13:32.580
OK.

181
00:13:32.600 --> 00:13:35.870
And that would protect us from the divide by zero.

182
00:13:35.900 --> 00:13:36.230
Right.

183
00:13:36.380 --> 00:13:39.260
So sometimes you can do some defensive things like this.

184
00:13:39.470 --> 00:13:41.030
And then same thing down here.

185
00:13:41.780 --> 00:13:42.230
Let's see.

186
00:13:42.230 --> 00:13:45.860
We're accessing a value out of this array.

187
00:13:45.890 --> 00:13:50.390
So let's say that this value was inside of a variable.

188
00:13:50.390 --> 00:13:52.700
So I'm going to introduce a variable here.

189
00:13:55.160 --> 00:13:56.510
I'll just call it index.

190
00:13:57.520 --> 00:13:57.910
All right.

191
00:13:58.060 --> 00:14:08.360
So same thing here, we could say something like if if index is less than a raid length less than a

192
00:14:08.370 --> 00:14:13.360
ray length, then there we go.

193
00:14:14.540 --> 00:14:16.940
All right, so let's just kind of look at that.

194
00:14:17.180 --> 00:14:22.460
So we know in this case, three would make this blow up because that would have been the fourth element

195
00:14:22.460 --> 00:14:26.930
in the array and the array only has three elements in it in this particular case.

196
00:14:27.380 --> 00:14:37.790
So what we're effectively saying is if three is less than in this case, three, which it is not, but

197
00:14:37.790 --> 00:14:40.220
if it were, then we would have allowed this to go.

198
00:14:40.340 --> 00:14:42.470
So let me change it this way.

199
00:14:42.470 --> 00:14:47.840
So if this had been a two, which would be valid, right, that would give us the third element in the

200
00:14:47.840 --> 00:14:48.350
array.

201
00:14:49.340 --> 00:14:55.190
If two is less than a at length, which is three, which is true, then go ahead and run this.

202
00:14:55.190 --> 00:14:56.450
So that would have been OK.

203
00:14:56.660 --> 00:15:00.110
So just be really careful when you're dealing with arrays and indexes.

204
00:15:00.110 --> 00:15:03.530
This is not a lesson on arrays, but it's kind of pertinent, right?

205
00:15:03.530 --> 00:15:09.080
Because I'm teaching a little bit of defensive programming techniques here when dealing with the race.

206
00:15:09.080 --> 00:15:16.310
And by the way, I personally rarely actually even use arrays just about any time that I need to have

207
00:15:16.310 --> 00:15:17.480
a collection of things.

208
00:15:17.480 --> 00:15:22.770
I actually use a collections class probably nine point five times out of 10.

209
00:15:22.790 --> 00:15:23.120
Right?

210
00:15:23.600 --> 00:15:29.330
The about the only time that I'm using arrays is when I need to call some old style method or some type

211
00:15:29.330 --> 00:15:32.240
of method that only accepts arrays.

212
00:15:32.420 --> 00:15:39.470
And even then, I'm probably taking a collection class and then converting it into an array so that

213
00:15:39.470 --> 00:15:42.080
I can pass it into that weird method or whatever.

214
00:15:42.620 --> 00:15:49.100
So these are just a couple of examples of trying to utilize more defensive coding in some cases.

215
00:15:49.220 --> 00:15:51.410
Now it's possible to get carried away with this.

216
00:15:52.040 --> 00:15:58.910
I'm not a big fan of having every other line wrapped in some defensive if block.

217
00:15:58.940 --> 00:15:59.840
Don't do that.

218
00:16:00.050 --> 00:16:00.770
Don't do that.

219
00:16:01.130 --> 00:16:03.430
You got to try to find a balance, OK?

220
00:16:03.650 --> 00:16:06.710
And I think humans don't do well with balance.

221
00:16:06.710 --> 00:16:09.980
We tend to want to go all the way, one way or all the way the other.

222
00:16:10.190 --> 00:16:12.500
But you've really got to try to find a balance here.

223
00:16:12.530 --> 00:16:12.980
OK.

224
00:16:13.190 --> 00:16:17.810
So I'm not saying that this is a great idea to do in every single case.

225
00:16:18.350 --> 00:16:20.870
I'm not saying that it's a great idea to never do this.

226
00:16:20.870 --> 00:16:26.870
I'm saying kind of write out some code and then gauge how frequently you think certain types of exceptions

227
00:16:26.870 --> 00:16:34.190
or errors could occur and how much of a mess your code is with a million, you know, little if blocks

228
00:16:34.190 --> 00:16:37.460
all over the place to protect yourself from various things, right?

229
00:16:37.610 --> 00:16:39.140
You're just going to have to gauge that.

230
00:16:39.530 --> 00:16:45.650
OK, so in closing, I want to just leave you with a few things that I'm not showing here because this

231
00:16:45.650 --> 00:16:53.810
is a beginner Java programming course, and I don't expect that many of you will be doing the things

232
00:16:53.810 --> 00:16:57.110
that I'm not showing, but I'm going to let you know what I'm not showing here.

233
00:16:57.350 --> 00:17:03.230
I'm not going out of my way right now to teach you the fact that you can create your own exception classes.

234
00:17:03.320 --> 00:17:04.970
But I do want you to be aware of that.

235
00:17:05.000 --> 00:17:06.290
It's actually not that hard.

236
00:17:06.410 --> 00:17:09.500
All you do is create a class that extends either from exception.

237
00:17:09.620 --> 00:17:14.630
If it's something that you feel, people who encounter that exception should be able to recover from

238
00:17:14.630 --> 00:17:22.010
somehow like file i o exceptions and things, then you'll want to extend from the exception class.

239
00:17:22.220 --> 00:17:26.400
If, on the other hand, you think it's something that they may not be able to recover from.

240
00:17:26.600 --> 00:17:33.140
But it still needs to be conveyed that that is an exceptional situation, then you may want to extend

241
00:17:33.140 --> 00:17:34.770
from runtime exception.

242
00:17:34.790 --> 00:17:35.270
OK.

243
00:17:36.020 --> 00:17:42.350
And then the other thing is that when you are creating methods, you can declare that certain methods

244
00:17:42.350 --> 00:17:49.940
will throw certain exceptions, whether they be exceptions that you have created or standard exceptions

245
00:17:49.940 --> 00:17:52.400
that exist within the Java API itself.

246
00:17:52.550 --> 00:17:55.610
And the Java API actually has tons of exceptions.

247
00:17:55.760 --> 00:18:02.210
I would encourage you always to be familiar with a lot of the exceptions that already exist in the Java

248
00:18:02.210 --> 00:18:08.510
API before you decide to just go and create your own exception because there may already be a class

249
00:18:08.510 --> 00:18:11.990
that best represents the situation that you're dealing with.

250
00:18:12.140 --> 00:18:18.710
For example, if you write some method that handles files in some way and you want to handle the circumstance

251
00:18:18.710 --> 00:18:24.680
where some some aspect of handling the file doesn't work anymore, you should really go look at the

252
00:18:24.680 --> 00:18:33.110
i o exception class or other related types of classes first and see if you can simply throw that class

253
00:18:33.110 --> 00:18:39.260
or one of the others before you go, creating a brand new one that might effectively just do about the

254
00:18:39.260 --> 00:18:40.280
same thing anyway.

255
00:18:41.330 --> 00:18:45.890
And then just know that these exception classes are really just informational.

256
00:18:46.160 --> 00:18:50.090
They're not usually meant to do any processing of any kind, OK?

257
00:18:50.120 --> 00:18:58.160
They're just data holders that hold on to whatever pertinent information that might be helpful for someone

258
00:18:58.160 --> 00:19:02.420
to analyze the program when they are later on looking at what went wrong.

259
00:19:02.450 --> 00:19:02.930
OK.

260
00:19:03.620 --> 00:19:03.920
All right.

261
00:19:03.930 --> 00:19:09.290
So with that being said, I am going to bring this lesson to a close and I will see you in the next

262
00:19:09.290 --> 00:19:09.620
one.
