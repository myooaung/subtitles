1
00:00:00,360 --> 00:00:07,560
All right, so continuing on now, we're going to take a look at the exercises from number 10 on, so

2
00:00:07,560 --> 00:00:11,400
these tests are focused on the movements of the night.

3
00:00:11,730 --> 00:00:19,860
And I included them because the night moves in particularly interesting and perhaps strange ways, which

4
00:00:19,860 --> 00:00:22,080
I think I had already kind of mentioned earlier.

5
00:00:22,710 --> 00:00:28,590
So the first test here, number 10, switching to the night test that Java file, the first Test to

6
00:00:28,590 --> 00:00:31,920
get passing is Knight can move northeast.

7
00:00:32,190 --> 00:00:35,220
Now let me show you what I meant with all of these different directions.

8
00:00:35,250 --> 00:00:40,170
These are just my own nomenclature for how to describe the movements.

9
00:00:40,530 --> 00:00:43,710
These are not like standard chess terms or anything.

10
00:00:43,920 --> 00:00:51,150
OK, so by Northeast, what I simply meant was that one of the movements that the pond could make would

11
00:00:51,150 --> 00:00:57,260
be two steps north or forward and then east, which would be one step to the right.

12
00:00:57,270 --> 00:01:01,110
OK, so northeast two steps forward, one step to the right.

13
00:01:01,140 --> 00:01:02,190
OK, northeast.

14
00:01:02,280 --> 00:01:10,860
So we just want to write some code that checks that this square here relative to where the night is,

15
00:01:11,130 --> 00:01:16,530
is one of all of these potentially valid squares that the pond could move to.

16
00:01:17,010 --> 00:01:17,400
OK.

17
00:01:17,850 --> 00:01:19,140
So let's see how I did that.

18
00:01:19,320 --> 00:01:19,610
All right.

19
00:01:19,620 --> 00:01:23,520
So I'm going to jump into the night test.

20
00:01:23,910 --> 00:01:24,510
Here we go.

21
00:01:24,630 --> 00:01:27,420
And here's the very first one night can move northeast.

22
00:01:27,420 --> 00:01:34,860
So I create a new instance of a white knight, and then I set the coordinates to see one.

23
00:01:34,950 --> 00:01:37,200
So see, one would be right here.

24
00:01:38,390 --> 00:01:45,530
And then I get the valid moves and then I create an expected coordinate of the three.

25
00:01:45,770 --> 00:01:52,910
So we're starting on see one, and I'm wanting to confirm that one of the valid squares that a night

26
00:01:52,910 --> 00:01:58,520
on C one could move to would be up up over, which would be right here.

27
00:01:58,520 --> 00:01:59,630
D3.

28
00:01:59,870 --> 00:02:00,620
D3.

29
00:02:02,070 --> 00:02:03,520
And so that's what I've got there.

30
00:02:03,630 --> 00:02:04,980
And then there's my assertion.

31
00:02:05,160 --> 00:02:07,440
All right, so let's see how I did this one.

32
00:02:08,070 --> 00:02:12,030
So I will jump into the get valid moves method now.

33
00:02:12,150 --> 00:02:18,720
Remember, this is going to be the get valid moves method for the night, not for the --.

34
00:02:18,780 --> 00:02:19,240
OK.

35
00:02:19,770 --> 00:02:22,740
So you can already see that this looks a little more streamlined now.

36
00:02:22,740 --> 00:02:28,800
Part of the reason for that is because I didn't bother to capture a variable name for these movements

37
00:02:29,010 --> 00:02:31,650
and then set them on the array separately.

38
00:02:31,650 --> 00:02:38,220
I decided to consolidate all of that into single lines just so it would be more convenient to look at,

39
00:02:38,220 --> 00:02:38,760
I guess.

40
00:02:38,790 --> 00:02:40,710
So here's the very first one and notice.

41
00:02:40,710 --> 00:02:47,790
I also just made these comments here Northeast, so I'm still using the offsets with the coordinates.

42
00:02:47,790 --> 00:02:53,000
And now all I have to say is go one to the right and go to up.

43
00:02:53,070 --> 00:02:57,000
Now notice, though here I did not yet flip these signs.

44
00:02:57,000 --> 00:03:02,400
Remember, I flipped the signs and then I changed the code for this calculate y with direction factor.

45
00:03:02,400 --> 00:03:09,150
So actually, right now, if I go and run the night tests, I'm thinking they're probably going to fail.

46
00:03:09,270 --> 00:03:11,040
Let's let's just see real quick here.

47
00:03:12,540 --> 00:03:14,850
Let's run all of these night tests.

48
00:03:15,860 --> 00:03:18,770
And that several of them, maybe all of them will fail.

49
00:03:19,160 --> 00:03:21,020
Now, actually, that's pretty interesting.

50
00:03:21,170 --> 00:03:23,450
They actually are all still passing.

51
00:03:23,930 --> 00:03:32,980
I have a suspicion that maybe the reason that they are passing is because the pattern of legal spots

52
00:03:32,990 --> 00:03:34,580
is symmetrical.

53
00:03:34,880 --> 00:03:42,710
So from sea one, one of the valid squares would be this square right here, which would mirror a square

54
00:03:42,710 --> 00:03:47,270
that would be two squares back this way if we could keep going with the squares in this direction,

55
00:03:47,270 --> 00:03:47,610
you know.

56
00:03:47,660 --> 00:03:49,100
So in other words, they're a mirror.

57
00:03:49,370 --> 00:03:50,450
Each of these has a mirror.

58
00:03:50,450 --> 00:03:58,190
This, in fact, if we pretend like this, if we pretend like this is see one for a moment, then one

59
00:03:58,190 --> 00:04:06,050
of the valid squares would be this one here, which would be to forward and to the right, but to backward

60
00:04:06,050 --> 00:04:09,200
and to the right would be here, which is a mirror of this one.

61
00:04:09,200 --> 00:04:16,490
So I suspect what may be happening here is that the unit test is still passing because it's picking

62
00:04:16,490 --> 00:04:21,110
up on the equivalent of this square here instead of this one.

63
00:04:21,350 --> 00:04:27,380
That's that's my guess as to what what's probably allowing that to work at any rate.

64
00:04:27,740 --> 00:04:33,050
Let me go ahead and switch the signs of all of these still.

65
00:04:33,260 --> 00:04:36,140
So I'm just going to go ahead and just flip all the signs.

66
00:04:37,670 --> 00:04:43,930
He united America's enemies, and I didn't use my fancy multi-person selection here because I didn't

67
00:04:43,930 --> 00:04:48,340
want to lose track of which ones should be negative and which ones should be positive, it was easier

68
00:04:48,340 --> 00:04:51,070
to just do each one at a time in this case.

69
00:04:51,220 --> 00:04:56,560
So now let me jump back over to the night test again, and let's just run everything and see if they

70
00:04:56,650 --> 00:04:57,550
all still pass.

71
00:04:57,580 --> 00:04:58,200
Hopefully they do.

72
00:04:58,210 --> 00:04:58,840
Yeah, yeah.

73
00:04:59,050 --> 00:05:04,300
So I think that kind of just proves that the reason why these work in either direction is because of

74
00:05:04,300 --> 00:05:12,070
the mirror effect, which actually does suggest that maybe I could have written even better tests that

75
00:05:12,070 --> 00:05:14,860
wouldn't work if you mirrored things.

76
00:05:15,010 --> 00:05:17,980
And one way that I probably could have done that.

77
00:05:18,490 --> 00:05:19,900
I'm not going to do it here.

78
00:05:19,900 --> 00:05:26,440
But one way that I maybe could have done that is to have used a different origin or a different starting

79
00:05:26,440 --> 00:05:27,220
position.

80
00:05:27,460 --> 00:05:31,780
We're like just random, different starting positions for each of these tests.

81
00:05:32,710 --> 00:05:38,080
But instead, what I did was I used a lot of the same positions and I even kind of used mirror positions

82
00:05:38,080 --> 00:05:39,820
for each, for in many cases.

83
00:05:39,820 --> 00:05:45,100
So for example, these two for east, northeast and northwest both starred on C one.

84
00:05:45,970 --> 00:05:48,010
And even this one here is C one.

85
00:05:48,190 --> 00:05:51,070
Then I used C three, which I think was a mirror.

86
00:05:51,070 --> 00:05:56,740
C one was here, then C three OK, well, maybe not so much of a mirror for that one, but I think I

87
00:05:56,740 --> 00:06:00,130
ended up using a lot of the same origins for a lot of the same tests.

88
00:06:00,220 --> 00:06:00,520
All right.

89
00:06:00,530 --> 00:06:02,560
But anyway, so that works.

90
00:06:02,950 --> 00:06:08,860
And so I don't think I really need to go through any of the details of the rest of these because all

91
00:06:08,860 --> 00:06:13,600
of the rest of these moves are really just variations on the same thing, right?

92
00:06:13,810 --> 00:06:21,820
So if the line can move north, west or east, north or east south, for example, all I did was something

93
00:06:21,820 --> 00:06:29,440
like, OK, east south would be two to the right and then one down, which is here or south east, which

94
00:06:29,440 --> 00:06:36,460
would be two to south and then one east southwest to south one west.

95
00:06:37,670 --> 00:06:45,430
West, south to west, one south west, north to west, one north, et etc., OK.

96
00:06:45,620 --> 00:06:52,820
And all I had to do then was just keep using the offset right to specify how many to the left or how

97
00:06:52,820 --> 00:06:56,990
many to the right, or how many to the left and how many up and how many down, basically, OK.

98
00:06:57,010 --> 00:06:59,090
So I think I think that makes sense, right?

99
00:06:59,120 --> 00:07:03,770
So let's just take one more look at the implementation here, and you can see that again.

100
00:07:03,770 --> 00:07:12,480
So north east to north, one east to north, one west, one north to east, et cetera, et cetera.

101
00:07:12,500 --> 00:07:17,270
And then I'm just storing all of those moves in this array and then returning the array.

102
00:07:17,390 --> 00:07:19,440
And that's super simple.

103
00:07:19,460 --> 00:07:21,310
OK, so let's see now.

104
00:07:21,320 --> 00:07:25,910
So I'm going to skip over all the rest of these because they're pretty much all the same thing now that

105
00:07:25,910 --> 00:07:29,750
you've taught your -- and night classes how they're permitted to move.

106
00:07:30,140 --> 00:07:34,160
Let's enable them to be moved by the chessboard class.

107
00:07:34,550 --> 00:07:41,120
Going back to the tests for the chess board in the chess board test Java file, please implement the

108
00:07:41,120 --> 00:07:42,800
ability can move.

109
00:07:42,800 --> 00:07:45,260
See one night to D3.

110
00:07:45,890 --> 00:07:50,240
The test will create a chess board and add a night at sea one.

111
00:07:50,480 --> 00:07:56,240
It will assert that the night is on Square C one, then it will.

112
00:07:56,570 --> 00:08:01,760
It will then request the chess board to move the night to D3.

113
00:08:02,240 --> 00:08:07,820
It will then assert that the night is no longer at C one and that it is now at D3.

114
00:08:07,820 --> 00:08:13,610
So I know this may sound really obvious that I'm being really explicit here, but this is the nature

115
00:08:13,610 --> 00:08:16,100
of halfway, decently written tests.

116
00:08:16,280 --> 00:08:19,250
So let's just take a look at the chess board to see what we're saying here.

117
00:08:19,250 --> 00:08:21,620
So we're going to start tonight on Square C one.

118
00:08:22,010 --> 00:08:27,590
Then we're going to ask the chess board to move the night to D three, and then we are going to assert

119
00:08:27,590 --> 00:08:28,940
at least a couple of things.

120
00:08:28,940 --> 00:08:34,570
We will assert that the night is no longer on c one and that it is now one D3.

121
00:08:34,580 --> 00:08:35,810
So let's see what that would look like.

122
00:08:35,810 --> 00:08:42,770
So we'll have the chess board now place a night at C one, then we will ask the chess board to move

123
00:08:42,770 --> 00:08:48,710
the night to D three, and then we will assert that the night is here and no longer here on C one.

124
00:08:48,740 --> 00:08:50,810
All right, so let's take a look at that.

125
00:08:50,990 --> 00:08:52,130
OK, so here it is.

126
00:08:52,340 --> 00:08:59,300
Can move C one night to D three, so we create an instance of a chessboard, then we create a white

127
00:08:59,300 --> 00:08:59,940
knight.

128
00:08:59,960 --> 00:09:04,960
Then we ask the board to add the knight to Square C one.

129
00:09:04,970 --> 00:09:12,620
Then we ask the board to give us the peace at coordinates C one so that we can just confirm our starting

130
00:09:12,620 --> 00:09:13,100
state.

131
00:09:13,220 --> 00:09:20,510
We want to just confirm that we asked the board to put a white knight on C one and then we want to turn

132
00:09:20,510 --> 00:09:24,590
around and ask the board, Is there still a night at C one at this point, which there should be?

133
00:09:24,890 --> 00:09:31,010
OK, so we use an assert equals to say that the night that we created here should be the night that

134
00:09:31,010 --> 00:09:34,310
we get back from the board at Position C one.

135
00:09:34,340 --> 00:09:38,270
OK, so this is all really just set up OK at this point.

136
00:09:38,750 --> 00:09:39,020
All right.

137
00:09:39,020 --> 00:09:42,800
So now that we've confirmed that our night is where we said it should be.

138
00:09:43,340 --> 00:09:50,940
We then ask the board, please move this night to D3, then we assert a couple of things.

139
00:09:50,960 --> 00:09:57,530
First, we assert that when we ask the board what piece is now at C1, it should be null and we can

140
00:09:57,530 --> 00:10:00,200
do that directly within assert null.

141
00:10:00,590 --> 00:10:06,740
And if for any reason this assertion, this null assertion happens to be false, we will be presented

142
00:10:06,740 --> 00:10:10,530
with this message after move night should no longer be at C1.

143
00:10:10,550 --> 00:10:14,330
OK, so that'll let us know that this particular assertion is the one that failed.

144
00:10:14,540 --> 00:10:16,820
And you may recall that I mentioned before.

145
00:10:17,120 --> 00:10:24,320
I don't frequently use multiple assertions in one test method or in one in one test method, but one

146
00:10:24,320 --> 00:10:30,740
place where I will often use them is if I have multiple assertions in a method like this one here,

147
00:10:30,890 --> 00:10:35,960
because otherwise it can be a little difficult to determine when this test method fails.

148
00:10:36,350 --> 00:10:40,340
Where did it feel like which assertion is the failing assertion?

149
00:10:40,490 --> 00:10:44,930
And so when you get this message here, then it lets you know which assertion failed.

150
00:10:45,170 --> 00:10:52,850
And then finally, I assert that the board sees the P Z, the three as being that night.

151
00:10:52,970 --> 00:10:58,220
So that just lets me know that the board indeed did move that night from C one to D three.

152
00:10:58,430 --> 00:11:05,180
So there's no chance of a copy of the night still being at C1 and at D3 or something crazy like that.

153
00:11:05,240 --> 00:11:09,890
I want to know that it literally moved that night from C one to three.

154
00:11:10,100 --> 00:11:12,140
So let's take a quick look at how I did that.

155
00:11:12,320 --> 00:11:14,360
We'll take a look at the move method here.

156
00:11:14,420 --> 00:11:14,830
All right.

157
00:11:14,840 --> 00:11:17,720
So this gets a little bit more involved.

158
00:11:19,280 --> 00:11:25,250
So the first thing I do is get the starting coordinates of our chess piece, which would be C one.

159
00:11:25,280 --> 00:11:26,990
OK, so that's what we're doing here.

160
00:11:27,260 --> 00:11:32,060
Get the peace, which in this case would be the night, get its coordinates, and I just store those

161
00:11:32,060 --> 00:11:36,150
coordinates right here in a variable called origin, right?

162
00:11:36,190 --> 00:11:36,830
The starting.

163
00:11:36,980 --> 00:11:45,530
Position then I create a new coordinates from the requested destination, which was D3, right?

164
00:11:45,830 --> 00:11:49,490
And so there's the destination or the requested destination.

165
00:11:49,520 --> 00:11:51,230
Now I'm checking some things.

166
00:11:51,740 --> 00:11:59,480
If the destination is occupied by a friendly piece, meaning a chess piece of the same color as the

167
00:11:59,480 --> 00:12:03,160
piece that we're moving, then basically I'm saying do nothing.

168
00:12:03,170 --> 00:12:06,020
This return with nothing here means do nothing.

169
00:12:06,050 --> 00:12:09,020
OK, now this will be an exercise that comes up later.

170
00:12:09,020 --> 00:12:13,610
But since we're looking through the code, I'm choosing to go ahead and explain this at least a little

171
00:12:13,610 --> 00:12:14,180
bit right now.

172
00:12:14,180 --> 00:12:19,580
But maybe I won't dig into how this method is working, but just know that this little bit here, this

173
00:12:19,580 --> 00:12:26,690
condition here is simply saying if the destination that we want to move to is already occupied by a

174
00:12:26,690 --> 00:12:32,090
friendly piece of the same color, then don't do the move because that's an invalid move.

175
00:12:32,420 --> 00:12:34,330
And then I have another condition here.

176
00:12:34,340 --> 00:12:42,800
If the destination is occupied by an enemy, meaning a chess piece of the opposite color, then I do

177
00:12:42,800 --> 00:12:47,510
allow for a lot of things that I'm not going to get into right now because that's also a future use

178
00:12:47,510 --> 00:12:47,830
case.

179
00:12:47,840 --> 00:12:52,250
OK, so we're going to skip over both of these now for what we're doing right now.

180
00:12:52,400 --> 00:12:55,070
Neither of these cases are valid.

181
00:12:55,200 --> 00:12:58,550
OK, we're not moving to a destination that's occupied by a friendly.

182
00:12:58,700 --> 00:13:03,140
Nor are we moving to a destination that's occupied by an enemy.

183
00:13:03,380 --> 00:13:06,620
Instead, we're moving to a destination that is empty.

184
00:13:07,070 --> 00:13:10,690
And so that is going to be covered right down here.

185
00:13:10,700 --> 00:13:12,470
Perform actual move.

186
00:13:12,500 --> 00:13:12,950
OK.

187
00:13:12,980 --> 00:13:17,060
And I pass in the piece the destination coordinates as text.

188
00:13:17,060 --> 00:13:22,880
I believe the as a string and then the origin as a coordinate object and the destination as a coordinate

189
00:13:22,880 --> 00:13:23,390
object.

190
00:13:23,570 --> 00:13:26,990
And probably, I don't actually need this one, I think.

191
00:13:26,990 --> 00:13:28,010
But let's just see.

192
00:13:28,520 --> 00:13:32,840
So let's dig into this perform actual move, because that's where we're doing the good stuff.

193
00:13:33,110 --> 00:13:35,300
So here's the perform actual move method.

194
00:13:35,570 --> 00:13:43,520
So I have a condition here that says if the destination is a permitted move, then get all the valid

195
00:13:43,520 --> 00:13:44,210
moves.

196
00:13:44,390 --> 00:13:50,870
So I have this method call here within the conditional saying destination that is permitted move.

197
00:13:51,320 --> 00:13:53,690
And then we pass into this method.

198
00:13:53,720 --> 00:13:57,290
All of the chess pieces, valid moves.

199
00:13:57,710 --> 00:14:04,430
So really, all I'm trying to do here is to determine whether or not this destination here is one of

200
00:14:04,430 --> 00:14:05,660
the valid moves.

201
00:14:05,690 --> 00:14:07,250
That's really all we're doing here.

202
00:14:07,370 --> 00:14:13,310
And actually, we're essentially doing this exact same kind of check in some of our tests themselves.

203
00:14:13,340 --> 00:14:20,300
Let me just jump over real quick and remind you if we go into the pond tests, for example, this method

204
00:14:20,300 --> 00:14:24,440
right here is Move found an array that's actually pretty much the same move.

205
00:14:24,830 --> 00:14:28,540
So I actually did end up copying this code essentially.

206
00:14:28,550 --> 00:14:35,330
So remember this this method here takes a coordinate and then checks to see if that coordinate is contained

207
00:14:35,330 --> 00:14:37,640
within an array of coordinates.

208
00:14:37,640 --> 00:14:39,120
That's all this is doing.

209
00:14:39,140 --> 00:14:44,720
That's essentially what this guy is doing as well, except I kind of flipped it inside out, and now

210
00:14:44,720 --> 00:14:47,060
the code to do the checking is right here.

211
00:14:47,060 --> 00:14:49,140
So let's jump into that real quick and see.

212
00:14:49,160 --> 00:14:52,040
So there's our familiar for loop right there.

213
00:14:52,370 --> 00:14:56,570
And so again, we're just iterating over all of the moves.

214
00:14:56,570 --> 00:15:03,530
All of the coordinates passed in to this method and checking to see is one of these moves or coordinates

215
00:15:03,530 --> 00:15:06,510
equal to this coordinate that we're in here.

216
00:15:06,530 --> 00:15:08,510
Now this code here is permitted new.

217
00:15:08,630 --> 00:15:12,650
This is a method on the coordinate class.

218
00:15:12,740 --> 00:15:13,280
OK.

219
00:15:13,370 --> 00:15:14,820
In this particular case?

220
00:15:14,840 --> 00:15:15,240
All right.

221
00:15:15,260 --> 00:15:21,530
So let me just make sure this is clear what you're seeing here with the word this that method is on

222
00:15:21,530 --> 00:15:23,000
the destination.

223
00:15:23,030 --> 00:15:23,540
OK.

224
00:15:23,570 --> 00:15:26,690
So I'm going to jump back into here is permitted move.

225
00:15:26,900 --> 00:15:33,530
And so we're saying if any one of these permitted moves, which are these moves here is equal to this

226
00:15:33,530 --> 00:15:35,050
destination move, right?

227
00:15:35,060 --> 00:15:41,180
Because when this code is running, we will be inside of one instance of a destination coordinate.

228
00:15:41,480 --> 00:15:45,920
So we're saying, is this destination one of these permitted moves?

229
00:15:46,040 --> 00:15:52,670
And in fact, maybe I should even rename this variable here to permitted moves just to be even more

230
00:15:52,700 --> 00:15:56,060
clear permitted moves.

231
00:15:56,120 --> 00:15:56,520
OK.

232
00:15:56,540 --> 00:16:00,080
And if it is one of these permitted moves, then return to true.

233
00:16:00,350 --> 00:16:07,670
Otherwise, finish up that loop and then just return a false and I could go ahead and probably rewrite

234
00:16:07,670 --> 00:16:11,090
this method to use the enhanced for loop also.

235
00:16:11,390 --> 00:16:17,120
And in fact, one thing I think I can do if I click on this light bulb here, I think the idea can do

236
00:16:17,120 --> 00:16:18,800
that for it's replaced with enhanced floor.

237
00:16:18,830 --> 00:16:21,890
Let's see what the l- look at that isn't that isn't that awesome?

238
00:16:22,250 --> 00:16:23,870
Now that's intelligent doing that.

239
00:16:23,870 --> 00:16:28,880
That's not Java that was just intelligent, recognizing that, oh yeah, you could just use the enhanced

240
00:16:28,880 --> 00:16:29,660
for loop here.

241
00:16:29,810 --> 00:16:30,650
So that was kind of cool.

242
00:16:30,770 --> 00:16:32,360
I don't think I've ever used that before.

243
00:16:32,720 --> 00:16:36,590
I kind of knew that it was sort of there, but until it does so many.

244
00:16:36,620 --> 00:16:43,070
Things, folks, there, there are capabilities that intelligence has that I sort of kind of see from

245
00:16:43,070 --> 00:16:49,670
time to time, but there's just so much that even I just can't bring myself to always, like consciously

246
00:16:49,670 --> 00:16:52,880
think, Oh, I should use this or I should use that, there's just so much there.

247
00:16:53,120 --> 00:16:54,360
But that was kind of nice.

248
00:16:54,380 --> 00:16:55,970
I'll probably use that again someday.

249
00:16:56,000 --> 00:16:56,390
All right.

250
00:16:56,630 --> 00:16:58,910
So that's what that's doing.

251
00:16:59,060 --> 00:17:05,660
So if the destination that we're trying to get to is one of the permitted destinations, then we do

252
00:17:05,660 --> 00:17:06,620
something kind of cool.

253
00:17:06,890 --> 00:17:10,550
We access the internal array of the chessboard.

254
00:17:10,550 --> 00:17:16,400
Remember that internal two dimensional array, we access the internal rate of the the chessboard.

255
00:17:16,700 --> 00:17:25,160
And the first thing we do is we erase the night on C one by setting the array element that was storing

256
00:17:25,160 --> 00:17:26,390
the night to null.

257
00:17:26,420 --> 00:17:26,900
OK.

258
00:17:27,170 --> 00:17:33,670
So that is to say, we first find the element in the array that corresponds to this square here.

259
00:17:33,680 --> 00:17:35,990
See one in this particular case.

260
00:17:36,290 --> 00:17:40,640
And then we set it to null, which will remove the night from that square.

261
00:17:40,670 --> 00:17:41,930
OK, so that's what we're doing.

262
00:17:41,930 --> 00:17:44,000
They remove from original square.

263
00:17:44,690 --> 00:17:51,650
Then we simply call the add method and add the night to the destination coordinates.

264
00:17:51,830 --> 00:17:55,760
So that's the way that we originally were putting any pieces on the chessboard anyway.

265
00:17:55,880 --> 00:17:59,080
So it's always nice to reuse our own methods here.

266
00:17:59,270 --> 00:18:04,790
So we have this add method right up here was like the very first method I ever wrote that just allows

267
00:18:04,790 --> 00:18:06,650
us to add a piece to the board.

268
00:18:06,680 --> 00:18:06,980
All right.

269
00:18:07,010 --> 00:18:09,080
And so that's how we get the chess piece there.

270
00:18:09,200 --> 00:18:15,650
By the way, I don't remember if I explicitly showed or or talked about this, but you know, in our

271
00:18:15,650 --> 00:18:21,470
Pon and night tests, we didn't even have a chess board, and we were just kind of telling the chess

272
00:18:21,470 --> 00:18:27,080
piece where it was on and an imaginary board by calling P starts at coordinates.

273
00:18:27,290 --> 00:18:30,710
As you can see here, the chess board itself also does this.

274
00:18:30,920 --> 00:18:36,320
It tells the chess piece where it is on the board by calling piece that set coordinates.

275
00:18:36,800 --> 00:18:43,760
So some things will not work correctly if we ever move a chess piece without telling the chess piece

276
00:18:43,760 --> 00:18:46,040
what its own internal coordinates are.

277
00:18:46,160 --> 00:18:50,690
And that's another reason why I'm using the add method to do this.

278
00:18:50,720 --> 00:18:58,040
That way, I can ensure that not only does the chess board have its internal board array updated to

279
00:18:58,040 --> 00:19:02,120
note where that pieces, but also the piece knows where it is.

280
00:19:02,300 --> 00:19:07,070
Now, some of you might be wondering if I'm setting the coordinates on the piece directly.

281
00:19:07,250 --> 00:19:09,810
Why do we even need this internal board?

282
00:19:09,830 --> 00:19:11,570
Also, why do we need that?

283
00:19:12,080 --> 00:19:19,260
Well, the reason we're going to need that is because the chess board itself needs to know where all

284
00:19:19,290 --> 00:19:20,270
the pieces are.

285
00:19:20,390 --> 00:19:24,620
And later on, we'll see a use case where that'll come in.

286
00:19:24,620 --> 00:19:29,090
So I'm not going to go too much more into detail on that right now, but just know that the board needs

287
00:19:29,090 --> 00:19:30,980
to know where everything is, OK.

288
00:19:31,280 --> 00:19:37,490
And so this array just gives us a way to allow the board to track where is everybody?

289
00:19:37,730 --> 00:19:42,890
So the chess pieces need to know where they are so that they can generate their valid moves, right?

290
00:19:43,190 --> 00:19:48,530
They need to know their own position, but the board needs to know where everybody is for various other

291
00:19:48,530 --> 00:19:49,310
use cases.

292
00:19:49,610 --> 00:19:52,410
All right, so let's jump back over to the tests.

293
00:19:52,430 --> 00:20:00,560
And so now I think we have seen how all of this test is working, and I think we'll stop here and we'll

294
00:20:00,560 --> 00:20:03,440
pick back up on the next test in the next lesson.

295
00:20:03,470 --> 00:20:04,130
I'll see you there.
