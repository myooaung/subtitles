1
00:00:00,600 --> 00:00:01,590
Hey, and welcome back.

2
00:00:02,040 --> 00:00:09,270
So in this lesson, we're going to talk about getters and setters, what are those?

3
00:00:10,110 --> 00:00:17,790
So if we jump into our person class, we have some getters and setters that we generated that we allowed

4
00:00:17,790 --> 00:00:22,050
the idea to generate for us when we created this class.

5
00:00:22,320 --> 00:00:24,960
I'm going to point out which ones they are.

6
00:00:25,200 --> 00:00:27,000
So we've got.

7
00:00:28,090 --> 00:00:36,280
This method here get first name, which returns first name, set, first name, which takes an input

8
00:00:36,310 --> 00:00:41,500
of a first name string and then sets that inside of the field here.

9
00:00:41,680 --> 00:00:46,600
So we've got these getters and setters for the first name, the last name and the date of birth.

10
00:00:47,550 --> 00:00:50,160
Why do we have these at all?

11
00:00:50,170 --> 00:00:54,550
Because actually in this program so far, we're not even using them.

12
00:00:54,910 --> 00:00:56,410
So that's what we're going to talk about.

13
00:00:56,800 --> 00:01:07,900
There is a strong convention in Java that when we have fields like this, we often want to make that

14
00:01:07,900 --> 00:01:09,550
information private.

15
00:01:10,590 --> 00:01:10,980
OK.

16
00:01:11,010 --> 00:01:18,840
First of all, because we want to, by default, protect our internal data of a class.

17
00:01:19,880 --> 00:01:32,030
But we may need to allow some of that data to be accessed from outside and the way that we typically

18
00:01:32,030 --> 00:01:32,900
will do that.

19
00:01:33,110 --> 00:01:34,970
There are a couple of ways that we can do that.

20
00:01:35,150 --> 00:01:44,180
But the way that is most standard is to expose access to this data via getter and setter methods.

21
00:01:44,930 --> 00:01:47,480
Now we could make these public.

22
00:01:48,620 --> 00:01:56,630
And then code from outside of this class could directly read or access, read and write this data.

23
00:01:57,200 --> 00:02:01,700
But that is considered a bad pattern to do.

24
00:02:01,850 --> 00:02:04,870
And I'll explain a little bit more of why in just a moment.

25
00:02:06,010 --> 00:02:14,890
OK, so the default standard way of writing classes is that if if our class is going to have any fields.

26
00:02:15,910 --> 00:02:24,040
We will typically let those fields be private or protected or package protected, but the default would

27
00:02:24,040 --> 00:02:30,340
be to make them private, to protect them and then to expose them via getters and setters.

28
00:02:30,550 --> 00:02:35,680
Now you may be wondering, well, if you're just going to make them private, but then turn around and

29
00:02:35,680 --> 00:02:40,660
expose them via getters and setters, and you're going to automatically make a getter an asset or something

30
00:02:40,660 --> 00:02:44,140
that can get the data and then something that can set the data back.

31
00:02:44,890 --> 00:02:49,120
You're no longer protecting the data, and to a large degree, you would be right.

32
00:02:49,330 --> 00:02:49,970
You're not.

33
00:02:50,260 --> 00:02:58,240
However, by using getters and setters, we have the opportunity to do a level of protection if we want

34
00:02:58,240 --> 00:02:58,690
to.

35
00:02:58,690 --> 00:03:06,250
And the person who is calling me getter and setter doesn't need to know if we are doing any protections

36
00:03:06,490 --> 00:03:09,000
or changing of the data at all.

37
00:03:09,010 --> 00:03:15,820
Whereas if we did not use getters and setters and we just allowed external code to directly access these

38
00:03:15,820 --> 00:03:22,990
fields, well, now we never have an opportunity to to put any good protections or ability to change

39
00:03:23,200 --> 00:03:28,570
any of that data coming in or coming out at all, like you have no opportunity to do that any more.

40
00:03:28,840 --> 00:03:36,040
So by putting getters and setters in front of, if you will, in front of these fields, it gives us

41
00:03:36,040 --> 00:03:45,790
the future-proof ability to protect our access to that data later down the road if we want or need to,

42
00:03:46,120 --> 00:03:51,160
or to even be able to translate or change in some way that data.

43
00:03:51,580 --> 00:03:54,490
So let's look at what I mean here.

44
00:03:55,590 --> 00:03:59,620
So what we can do is we can will write a little bit more code.

45
00:03:59,820 --> 00:04:07,260
That's going to use the person class and we'll do that by going over to the Hello world class.

46
00:04:07,980 --> 00:04:14,070
OK, so I'm going to go over here to this line where we created a person called Johnny, and I'm going

47
00:04:14,070 --> 00:04:20,550
to create a new line here and we're going to print out Johnny's first name.

48
00:04:20,580 --> 00:04:22,650
Let's start with that and we'll do that.

49
00:04:22,770 --> 00:04:27,210
Now I'm going to use a slightly different method this time before I used print line.

50
00:04:27,450 --> 00:04:29,610
This time I'm going to use format.

51
00:04:31,360 --> 00:04:32,800
And let's see, we'll say.

52
00:04:35,140 --> 00:04:39,010
The person's first name is.

53
00:04:45,070 --> 00:04:47,530
And then we will plug in.

54
00:04:49,570 --> 00:04:54,970
Well, we'll call the gutter for the first name, get first name just like that.

55
00:04:55,660 --> 00:05:03,580
OK, now what this is meant to do is it should print the the text the person's first name is, but it

56
00:05:03,580 --> 00:05:11,650
won't print this percent S. That is a format string and that is a it's a symbol basically that tells

57
00:05:11,680 --> 00:05:12,850
this method.

58
00:05:13,210 --> 00:05:13,870
Take.

59
00:05:14,970 --> 00:05:23,700
Whatever arguments I pass in at the end of this method, which is here and plug those argument values

60
00:05:23,700 --> 00:05:30,330
into any places in this string where I have percent signs in this case, I have a percent less, which

61
00:05:30,330 --> 00:05:32,070
means expect a string.

62
00:05:32,580 --> 00:05:36,240
So the get name method returns a string.

63
00:05:36,240 --> 00:05:43,110
And so this would be an index card with the first name of this person written on it.

64
00:05:43,440 --> 00:05:47,010
So take that name and plug that in wherever you see.

65
00:05:47,140 --> 00:05:50,760
Well, in this place here where we see the percent s OK?

66
00:05:51,150 --> 00:05:53,880
And that's just a nice way of formatting a string.

67
00:05:54,090 --> 00:06:00,350
Conveniently, this approach, by the way, incidentally, comes to us from the C programming language

68
00:06:00,360 --> 00:06:06,630
C as a function that does pretty much exactly this, and it uses the same symbol and everything.

69
00:06:06,630 --> 00:06:11,580
So the creators of Java said, Hey, it was good enough for C back in 1970.

70
00:06:11,700 --> 00:06:13,200
It's good enough for us now.

71
00:06:13,560 --> 00:06:16,320
It's a very venerable capability in C.

72
00:06:16,320 --> 00:06:22,320
It's not called format, but it works pretty much identically as far as the format string goes.

73
00:06:22,650 --> 00:06:23,010
OK.

74
00:06:23,250 --> 00:06:26,790
So let's go ahead and run this and see what we get.

75
00:06:26,790 --> 00:06:32,520
So I'm going to do a control shifter or control shift of 10 for Windows and Linux.

76
00:06:33,390 --> 00:06:34,140
OK?

77
00:06:34,170 --> 00:06:37,260
The person's first name is Johnny.

78
00:06:37,410 --> 00:06:38,250
So that worked.

79
00:06:38,940 --> 00:06:48,600
Now, let's say, whenever we get a first name of a person, we want that first name to be capitalized.

80
00:06:49,380 --> 00:06:51,480
OK, so here, let's do this.

81
00:06:51,480 --> 00:06:56,250
In fact, I'm going to go over here where we created the first name, and I'm going to replace that

82
00:06:56,250 --> 00:06:58,910
Jay with a lowercase j.

83
00:06:59,010 --> 00:07:02,370
And I'll do the same for the last name, too, even though we're not working with the last name right

84
00:07:02,370 --> 00:07:02,700
now.

85
00:07:02,940 --> 00:07:03,300
OK.

86
00:07:03,540 --> 00:07:10,850
So if I run this again, OK, the person's first name is Johnny, and now I have a lowercase j.

87
00:07:11,250 --> 00:07:17,310
Now, typically in computer systems and record keeping, we want names to be capitalized.

88
00:07:17,490 --> 00:07:24,990
So what if you know the person who created this code here forgot to capitalize that name for some reason,

89
00:07:25,000 --> 00:07:25,260
right?

90
00:07:25,440 --> 00:07:27,930
So we could protect ourselves from that a little bit.

91
00:07:28,140 --> 00:07:33,750
So I'm going to command click on this method here to jump back over to that method.

92
00:07:34,260 --> 00:07:39,690
And now we're about to see a little bit of the power of using getters and setters, because getters

93
00:07:39,690 --> 00:07:45,520
and setters not only allow us to simply access the data that we're interested in.

94
00:07:45,540 --> 00:07:52,680
And not only do they allow us to protect access to that data, they also can allow us to translate that

95
00:07:52,680 --> 00:07:58,620
data to make it more friendly to the outside world and in this case, I mean, outside of this class.

96
00:07:59,100 --> 00:08:07,290
So within this class, at this point, the first name field has the word, Yeah, I'll put it here.

97
00:08:09,820 --> 00:08:13,030
Johnny, in lower case, OK?

98
00:08:13,540 --> 00:08:21,720
But when we ask to get the first name out of this person object, we don't want that name to be lowercase.

99
00:08:21,730 --> 00:08:23,710
We want to make sure it's always capitalized.

100
00:08:24,160 --> 00:08:25,390
So how can we do that?

101
00:08:25,930 --> 00:08:34,800
Well, we could have this get first name method to translate whatever name we have inside of that field.

102
00:08:34,810 --> 00:08:36,640
We can have it capitalize it for us.

103
00:08:36,790 --> 00:08:39,270
And there's a method that we can use to do that.

104
00:08:39,280 --> 00:08:42,790
Strings are objects string as a class.

105
00:08:43,120 --> 00:08:50,320
And when we work with strings, we have objects and therefore we have methods that were built into the

106
00:08:50,320 --> 00:08:51,160
string class.

107
00:08:51,160 --> 00:08:54,370
We didn't write that string class that comes as part of the Java language.

108
00:08:54,670 --> 00:09:01,480
So the way to capitalize just the first letter of that name is a little bit involved with the way that

109
00:09:01,480 --> 00:09:02,380
we're writing this code.

110
00:09:02,560 --> 00:09:07,990
So the purpose here isn't for you to become an expert at how to capitalize, and I can show you easier

111
00:09:07,990 --> 00:09:10,130
ways to do this in subsequent lessons.

112
00:09:10,150 --> 00:09:15,460
The purpose here is simply to show that we can actually make these getters and setters do useful things

113
00:09:15,460 --> 00:09:15,910
for us.

114
00:09:16,210 --> 00:09:25,510
OK, so what we want to do is we want to grab first just the first letter of the first name field,

115
00:09:25,660 --> 00:09:27,230
which in this case would be Johnny.

116
00:09:27,250 --> 00:09:33,100
So we want to grab the J of Johnny, the first letter in there so we can do that by grabbing what's

117
00:09:33,100 --> 00:09:34,390
called a sub string.

118
00:09:34,840 --> 00:09:36,190
And we want the first letter.

119
00:09:36,280 --> 00:09:40,930
So in a lot of programming, whenever you're talking about first, second, third and you're trying

120
00:09:40,930 --> 00:09:47,890
to grab an index of something typically in most programming languages, the first other thing is usually

121
00:09:47,890 --> 00:09:49,000
going to be zero.

122
00:09:49,000 --> 00:09:52,660
If you have to refer to it by a number and index number, it'll be zero.

123
00:09:53,020 --> 00:09:59,680
That is to say that many methods in many programming languages, many methods and functions are zero

124
00:09:59,680 --> 00:10:01,780
based and arrays as well.

125
00:10:02,050 --> 00:10:03,010
Lists of things.

126
00:10:03,220 --> 00:10:10,900
So anyway, so we will say we want the zero with character in this string, which would be the the J-

127
00:10:10,900 --> 00:10:11,580
in Jerry.

128
00:10:11,830 --> 00:10:16,510
And we also want to tell it that we only want to go as long as one string.

129
00:10:16,690 --> 00:10:24,760
So we're just saying start with the very first letter in this string and only give me one of one letter,

130
00:10:24,760 --> 00:10:25,700
which would be the J.

131
00:10:25,960 --> 00:10:26,380
OK.

132
00:10:26,770 --> 00:10:27,850
So there's the J.

133
00:10:28,970 --> 00:10:33,380
And then we want to take that and we want to uppercase it just like that.

134
00:10:34,400 --> 00:10:45,020
And then we want to add on the rest of the string, minus the first character, so to do that, we can

135
00:10:45,020 --> 00:10:47,720
append and we can do that in a few ways.

136
00:10:47,720 --> 00:10:50,300
But for now, we'll just use a plus sign.

137
00:10:50,570 --> 00:10:56,890
So when you're dealing with strings or text, the plus sign allows you to take some text here and and

138
00:10:56,900 --> 00:10:59,660
tack on some more text onto it with the plus.

139
00:10:59,720 --> 00:11:00,170
OK.

140
00:11:00,200 --> 00:11:02,690
And so now we will basically do this again.

141
00:11:02,690 --> 00:11:08,420
We'll say first name dot substring, but this time we won't start on the zero with.

142
00:11:08,660 --> 00:11:13,940
We'll start on the number one index, which would be the second character.

143
00:11:13,970 --> 00:11:14,450
OK.

144
00:11:15,050 --> 00:11:21,290
Don't worry if this doesn't make sense to you right now, we will spend time to dig into this and we'll

145
00:11:21,290 --> 00:11:22,580
make sure that it makes sense.

146
00:11:22,820 --> 00:11:23,240
OK?

147
00:11:23,270 --> 00:11:25,310
And that is all I need now.

148
00:11:25,310 --> 00:11:26,000
Notice here.

149
00:11:26,000 --> 00:11:30,470
I'm not even specifying a second value to say how long.

150
00:11:30,620 --> 00:11:36,070
If I if I leave that out, it'll just grab all of the rest of the string, which is exactly what I want

151
00:11:36,070 --> 00:11:36,650
to anyway.

152
00:11:36,950 --> 00:11:44,510
OK, so this first part here grabs the J and then uppercase, is it?

153
00:11:44,510 --> 00:11:53,390
And then this part grabs the E and Jerry all the way to the end of the word Jerry and leaves it alone.

154
00:11:53,420 --> 00:11:57,110
OK, so it just strips off the J because we don't want that there now.

155
00:11:57,410 --> 00:12:05,210
OK, so then if we jump back over to the hello world and run it again, now we should get a capital,

156
00:12:05,210 --> 00:12:05,720
J.

157
00:12:07,270 --> 00:12:08,050
In Johnny.

158
00:12:09,960 --> 00:12:14,880
Look at that, and we do the person's first name is Johnny.

159
00:12:15,180 --> 00:12:26,640
So here we have managed to write a letter that is translating the first name from one format to a more

160
00:12:26,970 --> 00:12:30,120
desirable format by capitalizing that Jay.

161
00:12:30,250 --> 00:12:30,740
OK.

162
00:12:30,960 --> 00:12:33,870
And we could go the other way as well.

163
00:12:34,230 --> 00:12:36,990
So let's see here we could.

164
00:12:37,290 --> 00:12:37,620
Let's.

165
00:12:39,160 --> 00:12:40,600
Just for thoroughness.

166
00:12:41,350 --> 00:12:44,440
Let's go back over here to the get first name.

167
00:12:45,380 --> 00:12:46,260
I'll tell you what.

168
00:12:46,270 --> 00:12:49,120
Well, we'll do it with the with the last name here.

169
00:12:49,210 --> 00:12:50,260
Let's see here.

170
00:12:50,920 --> 00:12:52,720
So I'm back over in the hello world.

171
00:12:52,720 --> 00:12:53,890
And yeah, OK.

172
00:12:53,890 --> 00:12:56,800
So we set the last name to Smith, right?

173
00:12:57,550 --> 00:13:04,480
So this time, let's be a little inconsistent, though instead of writing a getter for the last name

174
00:13:04,480 --> 00:13:08,080
that translates it into capitalized name.

175
00:13:08,410 --> 00:13:14,560
Let's translate it into a capitalized name with a setter in.

176
00:13:15,540 --> 00:13:23,730
OK, so first, let's prove that the last name is lowercase and I'm going to just duplicate line 10,

177
00:13:23,940 --> 00:13:30,240
and I did that by doing a command or on Windows and Linux, a control D. So I duplicated the line 10

178
00:13:30,690 --> 00:13:39,000
and then I'm going to just change this to last name is and then I'm going to call get last name.

179
00:13:40,120 --> 00:13:40,600
Here we go.

180
00:13:41,110 --> 00:13:48,280
All right, and so let's run that and we should see that Smith is going to be lower case in our output.

181
00:13:50,250 --> 00:13:52,680
Oh, let's see, let's all say, well, that's OK.

182
00:13:52,890 --> 00:13:55,230
The person's first name is Johnny.

183
00:13:55,560 --> 00:14:00,360
The person's last name is Smith, and that's lowercase, and that's not what we want.

184
00:14:00,600 --> 00:14:00,960
OK.

185
00:14:01,200 --> 00:14:07,740
So this time the way we're going to fix that is I'm going to put a line in the middle here and we're

186
00:14:07,740 --> 00:14:09,570
going to call the center.

187
00:14:09,780 --> 00:14:15,270
So here we're calling the getter, get first name, get last name, but we can call the setter also.

188
00:14:15,660 --> 00:14:22,890
So we'll call Johnny that set last name to Smith.

189
00:14:24,810 --> 00:14:25,110
OK.

190
00:14:25,470 --> 00:14:28,140
And now if we run this.

191
00:14:30,160 --> 00:14:31,780
Now we get a capital s.

192
00:14:31,930 --> 00:14:32,320
OK.

193
00:14:32,530 --> 00:14:40,030
So even though at the time that we created the person with our constructor and we passed in a lowercase

194
00:14:40,030 --> 00:14:45,920
Smith, even though we did that, we have an opportunity to change it using the center.

195
00:14:45,940 --> 00:14:46,450
OK.

196
00:14:47,920 --> 00:14:54,100
Now we could make this better smart the way that we made to get her smart so we could make this lower

197
00:14:54,100 --> 00:14:59,260
case, which wouldn't bias anything over what we already have here, but just to be consistent, I guess,

198
00:14:59,260 --> 00:15:01,780
or to show a few other little tricks, I guess.

199
00:15:01,900 --> 00:15:07,570
So if we do this, I'm not going to bother to run this, but obviously it would print with a lowercase

200
00:15:07,570 --> 00:15:07,930
s.

201
00:15:08,170 --> 00:15:14,320
So let's make let's change our setter now so that when we're passing information in to it, it translates

202
00:15:14,410 --> 00:15:18,580
and we'll have it capitalize the pretty much the same way that we did before.

203
00:15:18,730 --> 00:15:23,230
OK, so what we can do here is a variation of what we did in the letter.

204
00:15:23,230 --> 00:15:28,140
So we'll take this last name here, which is right here.

205
00:15:28,150 --> 00:15:36,520
By the way, the reason that we have the word this not last name here and not here is because in a method

206
00:15:36,520 --> 00:15:46,390
of a class when you pretend a variable or a method with the word this, then you are referring to a

207
00:15:46,390 --> 00:15:48,670
field or a method that is.

208
00:15:49,630 --> 00:15:58,540
Part of that class, as opposed to this first name, which is you can think of as a field that came

209
00:15:58,540 --> 00:16:03,460
from outside of the class, so there's the data that's coming from outside of the class and then there's

210
00:16:03,460 --> 00:16:07,480
data that is internal to the class if it's internal to the class.

211
00:16:07,660 --> 00:16:14,380
We can differentiate it with the word this and by the way, the word this here is not always necessary,

212
00:16:14,380 --> 00:16:19,930
but in this case it is because there would be ambiguity as to which first name we were referring to.

213
00:16:20,290 --> 00:16:27,490
Sometimes you'll see developers just slightly change the name of the field there to avoid any ambiguity.

214
00:16:27,490 --> 00:16:33,670
They sometimes you'll even see that they might name the internal field with an underscore.

215
00:16:33,970 --> 00:16:40,690
For example, I personally am not a fan of doing that because I think the more symbols we use like underscores

216
00:16:40,690 --> 00:16:47,050
and things, I just find that in a more advanced application, seeing a lot of underscores and weird

217
00:16:47,050 --> 00:16:50,380
symbols all over the place just makes my head hurt a little bit.

218
00:16:50,380 --> 00:16:55,420
It makes me have to do a little extra work to parse and understand what I'm looking at.

219
00:16:55,630 --> 00:16:58,540
So I prefer I personally prefer not to do it that way.

220
00:16:58,750 --> 00:17:04,000
And there are a number of coding standards for various language where that is actually frowned upon

221
00:17:04,000 --> 00:17:04,690
anyway.

222
00:17:04,870 --> 00:17:11,230
I think for similar reasons and sometimes under scores and things are reserved symbols for internal

223
00:17:11,440 --> 00:17:13,570
coding and things like that anyway.

224
00:17:14,580 --> 00:17:19,680
All right, so let's translate this first name, so we're going to do pretty much exactly what we did

225
00:17:19,680 --> 00:17:22,060
before, so we're going to grab a substring.

226
00:17:22,080 --> 00:17:27,270
We're going to grab the zero with and we only want one character from there.

227
00:17:27,540 --> 00:17:33,240
And then we're going to uppercase that and then we're going to spend the rest of that.

228
00:17:33,240 --> 00:17:39,870
Oh, oh, wait, I'm sorry, I'm on the wrong one, the wrong center.

229
00:17:40,290 --> 00:17:44,130
We're meant to be doing this on the last name filled, aren't we?

230
00:17:44,160 --> 00:17:44,970
Sorry about that.

231
00:17:45,360 --> 00:17:45,780
All right.

232
00:17:45,780 --> 00:17:54,510
So last name dot substring, get the zero with instance are the zero with character, and we only want

233
00:17:54,780 --> 00:17:57,360
one character from one character.

234
00:17:58,470 --> 00:18:05,430
And then we will uppercase that, and then we will append the rest of the string.

235
00:18:05,790 --> 00:18:09,450
So we will grab the last name again and do another substring.

236
00:18:09,450 --> 00:18:15,780
But this time we will start with the second character, which would be one because the first character

237
00:18:15,780 --> 00:18:16,440
is zero.

238
00:18:16,440 --> 00:18:19,380
So we will start with the second character, which is one.

239
00:18:19,650 --> 00:18:25,530
And then if we don't specify the range, it will assume that we want all of the rest of the string,

240
00:18:25,530 --> 00:18:31,650
which is exactly what we want in this case, and that should be all we need there.

241
00:18:31,830 --> 00:18:36,440
And so then if we jump back over to our hello world, let's see.

242
00:18:36,450 --> 00:18:41,100
And yeah, we're calling set last name with a lowercase S..

243
00:18:41,220 --> 00:18:42,660
Let's go ahead and run this.

244
00:18:43,920 --> 00:18:44,910
And very good.

245
00:18:45,360 --> 00:18:45,660
Yeah.

246
00:18:45,780 --> 00:18:49,020
So we're getting a capital s now for Smith.

247
00:18:49,590 --> 00:18:54,630
So I recognize this could be a little confusing because there are so many ways that we could have done

248
00:18:54,630 --> 00:18:55,070
this right.

249
00:18:55,110 --> 00:18:56,850
We could have done it in the setter.

250
00:18:56,850 --> 00:19:00,300
We could have done it in the we also could have done it in the constructor.

251
00:19:00,300 --> 00:19:04,260
By the way, I didn't even show that when we talked about constructors before.

252
00:19:04,820 --> 00:19:06,180
Let's just jump over here real quick.

253
00:19:06,190 --> 00:19:12,060
So yeah, I mean what we could have said, hey, whenever any data is passed in while we're building

254
00:19:12,060 --> 00:19:16,950
this class, go ahead and just make sure that the first name and last name are uppercase.

255
00:19:16,980 --> 00:19:17,360
Right?

256
00:19:17,430 --> 00:19:25,380
So we could have done all of this here on both the first name and the last name to protect any data

257
00:19:25,380 --> 00:19:26,850
coming in right off the bat.

258
00:19:26,880 --> 00:19:28,530
We could have done that as well.

259
00:19:28,710 --> 00:19:31,950
There are a lot of places where you could you could do this.

260
00:19:32,220 --> 00:19:40,080
But like I said, the basic thing, though, is that getters and setters allow us to protect our data,

261
00:19:40,080 --> 00:19:43,350
our fields that normally should be protected.

262
00:19:43,350 --> 00:19:50,460
And I say that word in the general sense, not in the Java keyword since private or protected or whatever,

263
00:19:50,460 --> 00:19:54,450
and also give us an opportunity to translate the data.

264
00:19:54,600 --> 00:19:59,280
Let me also show you now if I were to make the date of birth field, I'm just picking another field

265
00:19:59,280 --> 00:20:03,300
that we haven't played with much if I were to make this field public.

266
00:20:04,690 --> 00:20:08,620
Like this that won't adversely affect anything in the code.

267
00:20:09,130 --> 00:20:09,610
OK.

268
00:20:09,730 --> 00:20:17,620
But by making it public, I just want to show that I could access that field without using a getter

269
00:20:17,620 --> 00:20:18,610
or a setter now.

270
00:20:18,820 --> 00:20:22,780
So I could say something like Johnny Dot.

271
00:20:22,930 --> 00:20:37,990
Date of birth equals local date of 1969 comma, some random month and some random day.

272
00:20:39,820 --> 00:20:45,970
Perfectly valid for me to do that, but not a good idea, because now what's happening is.

273
00:20:47,070 --> 00:20:54,270
Code that is outside of Johnny, which that means, you know, in this hello world class is directly

274
00:20:54,270 --> 00:20:59,580
manipulating internal data of the Johnny object.

275
00:20:59,700 --> 00:21:00,180
OK.

276
00:21:00,270 --> 00:21:06,540
And there's no code inside of the Johnny object that gets an opportunity to police what I'm setting

277
00:21:06,540 --> 00:21:08,700
here and make sure that it's valid and it's good.

278
00:21:08,700 --> 00:21:11,900
And all of that, because that's just wide open in public.

279
00:21:11,910 --> 00:21:15,390
Any code anywhere could just come in here and manipulate that.

280
00:21:15,480 --> 00:21:21,540
Now, granted, I will say again, changing this vote getter and setter in most cases usually isn't

281
00:21:21,540 --> 00:21:22,390
much better.

282
00:21:22,650 --> 00:21:30,390
But if we realized after we created a veteran setter that just was allowing us to just blindly change

283
00:21:30,390 --> 00:21:35,850
things, if we realized later on that that was not right, we could go into that gutter or center and

284
00:21:35,850 --> 00:21:41,310
change that code and code that calls the getter and setter doesn't even have to know that anything changed.

285
00:21:41,590 --> 00:21:49,080
OK, but here, since we're directly accessing the date of birth, if if we find that this is allowing

286
00:21:49,080 --> 00:21:49,680
a bug.

287
00:21:50,800 --> 00:21:53,230
And we want to safeguard ourselves from it.

288
00:21:53,260 --> 00:21:55,510
There wouldn't be the easiest way to change that.

289
00:21:55,510 --> 00:22:01,570
We'd probably have to go find all the places in the code where where there's code that's calling Johnny

290
00:22:01,570 --> 00:22:04,330
that Dobby or whatever that Dobby.

291
00:22:04,720 --> 00:22:13,570
And we'd have to change that somehow probably make it start using a sweater instead of directly accessing

292
00:22:13,570 --> 00:22:13,720
that.

293
00:22:13,730 --> 00:22:18,130
And that's a little bit bigger of a change of a refactoring, if you will.

294
00:22:18,400 --> 00:22:24,940
So it's kind of better to just make sure that all of your external code, all of your external classes,

295
00:22:25,120 --> 00:22:32,710
if they need to access data within a class or an object, they should do it via a getter and setter.

296
00:22:33,250 --> 00:22:33,700
OK.

297
00:22:34,600 --> 00:22:37,940
All right, I think that's we've probably beat this horse to death.

298
00:22:37,990 --> 00:22:40,720
So I think that's about enough for this lesson.

299
00:22:40,730 --> 00:22:43,690
Join me in the next one and we'll go deep on something else.

300
00:22:43,900 --> 00:22:44,830
See in the next one.
