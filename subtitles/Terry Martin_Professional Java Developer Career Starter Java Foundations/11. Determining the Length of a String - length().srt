1
00:00:00,460 --> 00:00:07,570
OK, so I almost debated whether or not I needed to explicitly make a lesson for this next topic because

2
00:00:07,570 --> 00:00:09,910
I am hoping that it will be very, very short.

3
00:00:10,150 --> 00:00:12,640
We're just going to look at the links method.

4
00:00:12,910 --> 00:00:18,850
I think we've already touched on this in some of the other lessons, but I may not have been super explicit

5
00:00:18,850 --> 00:00:19,300
about it.

6
00:00:19,300 --> 00:00:25,690
So it certainly is a method that you will use a lot when dealing with strings in Java.

7
00:00:25,930 --> 00:00:30,550
And so it's probably worthwhile just to touch on it very quickly, explicitly.

8
00:00:31,000 --> 00:00:31,300
All right.

9
00:00:31,330 --> 00:00:35,860
So back here again, we've got our class emptied out with our main method.

10
00:00:36,130 --> 00:00:46,540
And again, I will create a string my text equals and four score and seven years ago.

11
00:00:48,340 --> 00:00:48,680
All right.

12
00:00:48,700 --> 00:00:50,890
And this one super super simple.

13
00:00:51,220 --> 00:00:58,360
Well, let's just set ourselves up to output some text, but we'll reference the my text variable.

14
00:00:58,570 --> 00:01:02,770
And then we will use the dot linked method.

15
00:01:02,920 --> 00:01:06,340
And it does exactly what it probably implies.

16
00:01:06,340 --> 00:01:06,820
It does.

17
00:01:07,090 --> 00:01:12,350
It tells us the length of the string in terms of characters.

18
00:01:12,370 --> 00:01:12,760
OK.

19
00:01:13,000 --> 00:01:14,140
So if we run this?

20
00:01:16,150 --> 00:01:17,560
We get 29.

21
00:01:17,710 --> 00:01:23,010
I'm not going to sit here and count all of those help, but I trust it for an easier scenario.

22
00:01:23,020 --> 00:01:28,180
The Why don't I just make that three characters long and then we'll run this again.

23
00:01:29,410 --> 00:01:29,890
There we go.

24
00:01:29,920 --> 00:01:30,370
Three.

25
00:01:30,520 --> 00:01:32,980
So it does what it looks like it should do.

26
00:01:33,190 --> 00:01:35,080
It tells us the length of the string.

27
00:01:35,500 --> 00:01:39,100
So let's just talk briefly why we would ever need that.

28
00:01:39,340 --> 00:01:47,080
As we've already seen, there are times when we might do something like break out a string into an array.

29
00:01:47,260 --> 00:01:47,620
Right?

30
00:01:47,860 --> 00:01:49,780
In fact, I will do that real quick.

31
00:01:50,080 --> 00:01:57,240
So we might do something like two character array and then capture that.

32
00:01:57,910 --> 00:02:01,270
And then let's say we want to print that print out.

33
00:02:01,300 --> 00:02:06,580
One of the characters, like the third character in that array.

34
00:02:07,090 --> 00:02:08,320
So we'll run that.

35
00:02:09,250 --> 00:02:13,600
OK, so there's the R in the word for right?

36
00:02:13,600 --> 00:02:18,700
Because that's the third character, which is index two, because indexes are zero based.

37
00:02:18,700 --> 00:02:21,340
So the F is index zero.

38
00:02:21,670 --> 00:02:26,510
The O is index one and then the R is index two.

39
00:02:26,530 --> 00:02:26,890
OK.

40
00:02:26,920 --> 00:02:27,940
That's how that works.

41
00:02:28,690 --> 00:02:34,960
Now here I'm hard coding this number, but in real code, you probably you might not be hard coding

42
00:02:34,960 --> 00:02:35,920
a number like that.

43
00:02:35,920 --> 00:02:40,300
You might be figuring out that number through some programmatic means.

44
00:02:40,750 --> 00:02:47,090
However, you'd want to safeguard that you don't exceed the length of that string, right?

45
00:02:47,110 --> 00:02:49,030
Because we've seen what happens when we do that.

46
00:02:49,210 --> 00:02:56,260
If you exceed the length of a of an array, for example, here I'll put a big number in here like 100.

47
00:02:56,410 --> 00:03:04,420
There definitely is not a a index 100 character in here because the string itself is only three characters

48
00:03:04,420 --> 00:03:05,160
long, right?

49
00:03:05,440 --> 00:03:07,510
So if we run this, let's just see.

50
00:03:07,780 --> 00:03:14,650
OK, so we get a predictable exception index 100 out of bounds for length three, right?

51
00:03:14,770 --> 00:03:22,870
And so one place where you might want to use the length is simply to safeguard against something dumb

52
00:03:22,870 --> 00:03:24,250
happening like this.

53
00:03:24,790 --> 00:03:32,200
So let's say that we had determined the number of the index that we wanted to retrieve out of this string

54
00:03:32,500 --> 00:03:36,070
through some programmatic means and that that number was stored in a variable.

55
00:03:36,070 --> 00:03:42,370
So I will select this number just to simulate this scenario, and I'll do an option command V to select

56
00:03:42,370 --> 00:03:44,830
that and put it into a variable.

57
00:03:45,160 --> 00:03:46,960
And I'm going to call it index.

58
00:03:47,560 --> 00:03:48,010
OK.

59
00:03:49,090 --> 00:03:49,810
So.

60
00:03:51,850 --> 00:03:59,950
So then I could protect myself from having my program blow up by putting an if statement in here, and

61
00:03:59,950 --> 00:04:06,850
we will learn about if statements in the future, so I could say something like if index is less than

62
00:04:07,600 --> 00:04:09,780
my text length.

63
00:04:12,350 --> 00:04:12,980
Then.

64
00:04:15,500 --> 00:04:20,630
I'm going to indent that because I want that to be inside of this f block or conditional block.

65
00:04:21,080 --> 00:04:23,600
Then I will allow this.

66
00:04:25,020 --> 00:04:26,580
Statement to execute.

67
00:04:26,940 --> 00:04:34,290
So this is basically putting some protection around my program a little bit here, I'm saying only execute

68
00:04:34,320 --> 00:04:37,830
this line of code if.

69
00:04:38,840 --> 00:04:47,840
The index that I'm trying to pull out of this character's array, this index here is less than the length

70
00:04:47,840 --> 00:04:48,920
of my string.

71
00:04:48,930 --> 00:04:53,630
So if let's say that instead of 100, we make this three.

72
00:04:54,530 --> 00:04:54,950
OK.

73
00:04:55,460 --> 00:05:02,090
So if Index three is less than the length of this text, which in this case is three.

74
00:05:02,360 --> 00:05:03,710
So that would be false.

75
00:05:04,040 --> 00:05:06,410
So this would not execute.

76
00:05:07,500 --> 00:05:08,370
Now, if this were.

77
00:05:09,420 --> 00:05:12,030
To which would be the R.

78
00:05:13,520 --> 00:05:21,770
If two is less than three, write my text that length, the length of this string is three.

79
00:05:21,980 --> 00:05:30,680
So if two, because that's what this evaluates to is less than three, which is true, then go ahead

80
00:05:30,680 --> 00:05:31,820
and print this.

81
00:05:32,450 --> 00:05:33,560
So let me do that again.

82
00:05:33,770 --> 00:05:37,220
However, if Index's three.

83
00:05:38,970 --> 00:05:45,240
Is if three is less than three, which is not true, three is not less than three.

84
00:05:46,460 --> 00:05:49,640
Then this will not be permitted to execute.

85
00:05:50,300 --> 00:05:52,130
So if we run this now.

86
00:05:55,740 --> 00:06:03,540
It is no longer possible to cause the program to blow up because we have a safeguard in place with this

87
00:06:03,540 --> 00:06:04,830
if statement here.

88
00:06:05,310 --> 00:06:09,870
So even if I put an excessively large number in there, like 1000.

89
00:06:13,160 --> 00:06:13,970
Everything's good.

90
00:06:14,270 --> 00:06:17,990
But if I put a number that fits like two.

91
00:06:20,280 --> 00:06:23,520
Now we get the AH printing out, because that's safe.

92
00:06:23,580 --> 00:06:24,030
OK.

93
00:06:24,300 --> 00:06:28,440
So there's one example and then another example that we saw earlier.

94
00:06:29,130 --> 00:06:30,570
Let's see here.

95
00:06:31,480 --> 00:06:34,270
I'm going to delete all of that.

96
00:06:35,610 --> 00:06:37,260
And I'm going to make another string.

97
00:06:38,480 --> 00:06:40,640
Second text.

98
00:06:42,070 --> 00:06:42,880
Score.

99
00:06:46,110 --> 00:06:49,420
Then I'm going to make a string builder.

100
00:06:54,750 --> 00:07:03,030
And maybe you'll recall that string builders allow us to concatenate lots of strings together into one

101
00:07:03,030 --> 00:07:03,450
string.

102
00:07:03,750 --> 00:07:10,500
And it is possible to use the string builder to do this in a highly efficient way by telling the string

103
00:07:10,500 --> 00:07:13,320
builder at the time that we initialize it and create it.

104
00:07:13,500 --> 00:07:21,090
What is the final length of the final string that we are going to make out of all of these smaller strings?

105
00:07:21,090 --> 00:07:28,650
So if I wanted to combine these two strings together and I wanted to do that really, really, really

106
00:07:28,650 --> 00:07:32,360
efficiently, though this isn't super necessary to do.

107
00:07:32,370 --> 00:07:40,920
But if I wanted it to be totally efficient, I could tell the string builder the total length of the

108
00:07:40,920 --> 00:07:45,570
final string that I want, but I don't have to sit there and count it.

109
00:07:45,870 --> 00:07:54,660
I could just let the computer figure that out for me by simply doing something like my text that length

110
00:07:55,620 --> 00:08:02,790
plus second text length, and let me give myself some some room here.

111
00:08:04,640 --> 00:08:07,580
Just like that, then I can append.

112
00:08:09,430 --> 00:08:12,430
My text and I can append.

113
00:08:14,340 --> 00:08:22,560
Second, text, OK, so I just built the string builder that is going to concatenate these two strings,

114
00:08:22,560 --> 00:08:29,250
but it's going to do it very efficiently, and I'll just remind you if I did not initialize the capacity

115
00:08:29,670 --> 00:08:36,480
of the final string, in fact, here let's go ahead and that's print out the final string so I can do

116
00:08:36,480 --> 00:08:38,280
builder dot to string.

117
00:08:39,090 --> 00:08:39,510
OK.

118
00:08:40,470 --> 00:08:41,580
So we'll run this.

119
00:08:43,660 --> 00:08:50,140
OK, so the final string is one two three four five six seven eight characters long.

120
00:08:50,680 --> 00:08:58,810
So if if I did not initialize this builder to know that the final string was going to be eight characters

121
00:08:58,810 --> 00:09:04,750
long, what the string builder would do by default is it would have to just guess what it considered

122
00:09:04,750 --> 00:09:09,490
to be a reasonable amount of space to allocate in the memory of the computer.

123
00:09:09,850 --> 00:09:14,620
And honestly, I don't even know what that amount would be, but I'm sure it would be larger than eight,

124
00:09:15,010 --> 00:09:22,540
OK, which means that we'd be temporarily wasting some of the space in the memory of the computer just

125
00:09:22,540 --> 00:09:25,750
to append these two small strings together.

126
00:09:26,830 --> 00:09:33,400
Or conversely, if I had an excessively long resulting string longer than what the string builder would

127
00:09:33,400 --> 00:09:40,360
normally try to allocate by default, then that would cause the string builder to be a little less efficient

128
00:09:40,360 --> 00:09:47,710
because it would have to go and reallocate even more space after the fact, rather than just getting

129
00:09:47,710 --> 00:09:48,760
it right the first time.

130
00:09:48,770 --> 00:09:55,030
So by me, supplying it with the exact length that I need, it can be more efficient, more efficient

131
00:09:55,030 --> 00:09:58,180
in allocating exactly the right amount of space.

132
00:09:58,420 --> 00:10:03,010
But like I said, in a case like this with just two strings or three strings or whatever, and they're

133
00:10:03,010 --> 00:10:08,920
pretty short, you're not going to notice any change in speed or optimization at all.

134
00:10:08,950 --> 00:10:14,470
This will matter more, though, if you were going to be appending tens or hundreds or thousands of

135
00:10:14,470 --> 00:10:21,250
strings together, somehow you might really want to be able to specify exactly how much space you'll

136
00:10:21,250 --> 00:10:22,150
need for that.

137
00:10:22,930 --> 00:10:29,830
But anyway, so there's the link method being used again, and we had seen this before, and that's

138
00:10:29,830 --> 00:10:31,000
it for length.

139
00:10:31,180 --> 00:10:32,530
So see in the next one.
