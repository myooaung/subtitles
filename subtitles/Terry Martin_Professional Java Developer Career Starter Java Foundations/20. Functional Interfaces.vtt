WEBVTT
1
00:00:00.390 --> 00:00:04.140
All right, so in this lesson, I want to cover a few loose ends.

2
00:00:04.470 --> 00:00:11.280
A few things that we've been working with, but maybe I haven't given you a very explicit explanation

3
00:00:11.280 --> 00:00:13.080
for what some of these things are.

4
00:00:13.680 --> 00:00:20.940
So one of the things that I wanted to show you was the fact that, for example, in a lot of in so many

5
00:00:20.940 --> 00:00:24.450
of these streams, API methods and such.

6
00:00:24.720 --> 00:00:30.720
They take inputs that are referring to various interfaces like predicates and consumers and things of

7
00:00:30.720 --> 00:00:31.350
that sort.

8
00:00:31.590 --> 00:00:37.350
And I tried to explain to you what that means, but you may have wondered, how do I know what that

9
00:00:37.350 --> 00:00:38.190
means, right?

10
00:00:38.370 --> 00:00:43.170
So I want to kind of give you the clues of how to figure this out for yourself.

11
00:00:43.980 --> 00:00:47.130
As an example here, here's the grouping by method.

12
00:00:47.340 --> 00:00:52.920
And if I put my cursor right on the inside there and do a command p to show the parameters, we see

13
00:00:52.920 --> 00:00:58.650
that there are the three different overloaded versions of this guy right in each of the overloaded versions,

14
00:00:58.650 --> 00:01:01.560
though the first parameter is something called a function.

15
00:01:01.770 --> 00:01:06.360
And I've been stating in general, when we have to do these things, a function in general is going

16
00:01:06.360 --> 00:01:12.870
to be an interface for essentially a method that takes an input and then returns an output usually.

17
00:01:13.350 --> 00:01:18.960
And typically, that will be an input of one type and an output of potentially a different type, though

18
00:01:18.960 --> 00:01:21.310
it could be the same data type as well.

19
00:01:21.540 --> 00:01:24.540
That's what a function is now.

20
00:01:24.570 --> 00:01:29.160
I mean, you could just memorize that the fact that I told you that, but I want to teach you how you

21
00:01:29.160 --> 00:01:35.130
can kind of figure out what these things are on your own so that you can know how to utilize them,

22
00:01:35.130 --> 00:01:35.430
right?

23
00:01:36.060 --> 00:01:37.740
Let's see what else here.

24
00:01:37.740 --> 00:01:41.700
The here's one that takes something called a supplier.

25
00:01:42.600 --> 00:01:48.150
And again, I happen to know that a supplier is essentially a function that doesn't take any input,

26
00:01:48.150 --> 00:01:49.620
but it returns some output.

27
00:01:49.770 --> 00:01:56.970
It's often used as something like a generator, like giving you an opportunity to to supply a fresh

28
00:01:57.360 --> 00:01:58.680
something to be used.

29
00:01:58.680 --> 00:02:06.950
In this case, it gives us the opportunity to supply our own instance or our own instance of a map.

30
00:02:06.960 --> 00:02:07.260
Right?

31
00:02:07.260 --> 00:02:11.730
It's a map factory, a thing that supplies maps, if you will.

32
00:02:12.600 --> 00:02:18.810
So let me show you how you can kind of figure these things out on your own when you encounter functional

33
00:02:18.810 --> 00:02:22.200
methods that are referring to various types of functional interfaces.

34
00:02:22.200 --> 00:02:24.810
And you may not be certain what that means, right?

35
00:02:25.260 --> 00:02:32.820
So perhaps a kind of a Bible that you can refer to for these things would be in the package where all

36
00:02:32.820 --> 00:02:34.890
of these interfaces are actually defined.

37
00:02:35.130 --> 00:02:39.930
And we can jump over to the browser here and I'm in the Java Dock for that package.

38
00:02:39.930 --> 00:02:42.390
It is Java that you tilled that function.

39
00:02:43.460 --> 00:02:47.990
OK, now one way that you know, you don't even have to memorize Java you till that function, you don't

40
00:02:47.990 --> 00:02:48.890
need to write it down.

41
00:02:49.160 --> 00:02:55.580
What you can do is when you are trying to use one of these methods, like grouping by and you hover

42
00:02:55.580 --> 00:03:02.360
over it, for example, or you hit F1 to see the Java Dock or you do a command like I did earlier.

43
00:03:02.930 --> 00:03:08.390
And you take a look of the Java Dock and it tells you right there that the method there it is grouping

44
00:03:08.390 --> 00:03:10.700
by takes a function, right?

45
00:03:10.850 --> 00:03:13.730
So you can see right here java you till that function, right?

46
00:03:13.760 --> 00:03:19.970
So there's the package on which that particular functional interface exists.

47
00:03:20.180 --> 00:03:24.920
So that's a way that you can find out what that package is, and you could always just click on that

48
00:03:25.100 --> 00:03:28.340
and then go, look at what this is in this way.

49
00:03:28.670 --> 00:03:32.300
Or you could go to Google and type in Java.

50
00:03:32.300 --> 00:03:35.780
You function Java dot util dot function and then it would bring you here.

51
00:03:36.110 --> 00:03:42.470
So let's just take a look at a few of these and just see, because here's a whole long list of all of

52
00:03:42.470 --> 00:03:47.540
the pre canned functional interfaces that Java knows about.

53
00:03:49.410 --> 00:03:55.800
So a by consumer, so there are keywords that you can use to glean what these what these should be.

54
00:03:55.890 --> 00:04:03.090
And that will inform you as to what kind of lambda expression you might want to write or what type of

55
00:04:03.090 --> 00:04:06.300
method reference would satisfy these guys, right?

56
00:04:06.510 --> 00:04:07.800
So by consumers.

57
00:04:07.800 --> 00:04:15.450
So consumers are going to be functions that take input but don't return anything.

58
00:04:15.750 --> 00:04:18.900
And the word by here means too.

59
00:04:18.930 --> 00:04:24.120
So this is telling me that this is a function that takes two inputs and doesn't return anything.

60
00:04:24.120 --> 00:04:29.100
And you can see over here in the description as well represents an operation that accepts two input

61
00:04:29.100 --> 00:04:30.780
arguments and returns.

62
00:04:30.790 --> 00:04:31.560
No result.

63
00:04:31.800 --> 00:04:36.870
And then we're seeing this little generic stuff here, and we will in the future go a little deeper

64
00:04:36.870 --> 00:04:37.650
into generics.

65
00:04:37.650 --> 00:04:44.550
I think I touched on it in the collections module, but Will will shore up, will firm up a little bit

66
00:04:44.550 --> 00:04:46.020
more of your understanding of that.

67
00:04:46.030 --> 00:04:51.780
We won't go super deep into it because I don't believe it's really necessary, but will firm up a little

68
00:04:51.780 --> 00:04:53.070
bit more of your understanding for this.

69
00:04:53.310 --> 00:05:00.480
But by seeing this generic definition here, combined with the fact that I know that this is a function

70
00:05:00.480 --> 00:05:06.960
that takes two inputs and returns nothing, I can infer then that the two inputs that it can take don't

71
00:05:06.960 --> 00:05:08.340
have to be the same type.

72
00:05:08.790 --> 00:05:13.980
If they were the same type, then you'd just be seeing one letter here instead of two.

73
00:05:15.210 --> 00:05:15.470
All right.

74
00:05:15.480 --> 00:05:22.770
And then we've got a function, so functions, they take input and return output in general.

75
00:05:23.700 --> 00:05:29.040
And the fact that this is something called a bi function tells me that it takes two inputs and returns

76
00:05:29.130 --> 00:05:30.060
one output.

77
00:05:30.360 --> 00:05:31.320
OK, so let's see.

78
00:05:31.320 --> 00:05:35.220
What they say here represents a function that accepts two arguments and produces a result, right?

79
00:05:35.310 --> 00:05:38.430
And the two inputs are are of two different types.

80
00:05:38.610 --> 00:05:41.340
And then the output can be of a third type.

81
00:05:42.390 --> 00:05:43.050
Now it doesn't.

82
00:05:43.230 --> 00:05:44.970
They don't all have to be different, by the way.

83
00:05:44.970 --> 00:05:47.820
They could all be the same and still use this interface.

84
00:05:48.330 --> 00:05:48.690
All right.

85
00:05:49.020 --> 00:05:51.240
Then we've got an binary operator.

86
00:05:51.240 --> 00:05:57.000
So operator, very similar to a function, still takes an input and returns an output binary, meaning

87
00:05:57.000 --> 00:05:58.530
it takes two inputs if we read.

88
00:05:58.530 --> 00:06:05.250
The description represents an operation upon two operations of the same type, producing a result of

89
00:06:05.250 --> 00:06:07.410
the same type as the operations.

90
00:06:07.620 --> 00:06:11.730
And I think that's the key differentiator between operators and functions.

91
00:06:11.730 --> 00:06:17.040
This the fact that the operator is dealing with the same types and then a by predicate.

92
00:06:17.040 --> 00:06:22.230
So predicates we've seen before, we use a predicate for filtering, for example.

93
00:06:22.530 --> 00:06:25.170
So predicates are functions that take an input.

94
00:06:25.260 --> 00:06:28.590
And then and then they return a boolean a true or false.

95
00:06:28.770 --> 00:06:35.880
So they're used in the filters, for example, so that it can inspect properties of the items in a stream

96
00:06:36.060 --> 00:06:43.530
and then determine whether or not those items should be allowed to keep going through the stream with

97
00:06:43.530 --> 00:06:45.990
a truly with a boolean, a true or false.

98
00:06:47.340 --> 00:06:53.820
Suppliers are functions that take no inputs, but they return something, so a Boolean supplier would

99
00:06:53.820 --> 00:06:58.290
be a function that returns Boolean true or false, but it doesn't take any inputs.

100
00:06:58.800 --> 00:06:59.130
Let's see.

101
00:06:59.130 --> 00:07:00.210
Did we already see consumer?

102
00:07:00.210 --> 00:07:00.390
Yes.

103
00:07:00.390 --> 00:07:02.670
So consumer, here's just a can so appear.

104
00:07:02.670 --> 00:07:03.810
We had a buy consumer.

105
00:07:03.930 --> 00:07:07.680
That was the thing that takes two inputs, but returns nothing.

106
00:07:07.800 --> 00:07:14.160
Here's just the regular consumer, so you can infer that this is a function that takes one input and

107
00:07:14.160 --> 00:07:15.030
returns nothing.

108
00:07:15.240 --> 00:07:21.120
We've used these consumers quite a bit, for example, v for each method, right, where we're usually

109
00:07:21.120 --> 00:07:27.810
taking an input of items from the stream and then we're calling like system that out-of-print line or

110
00:07:27.810 --> 00:07:29.280
print f or something like that.

111
00:07:29.790 --> 00:07:32.070
Print line and print f don't return anything.

112
00:07:32.070 --> 00:07:34.950
They just print stuff to the screen, but they don't return anything.

113
00:07:35.190 --> 00:07:36.660
So that would be a consumer.

114
00:07:36.780 --> 00:07:38.190
And then here's another operator.

115
00:07:38.200 --> 00:07:41.460
So then we get into these a couple of fancier things double binary.

116
00:07:41.460 --> 00:07:46.410
So that's just going to be an operator that takes two inputs of type double.

117
00:07:47.370 --> 00:07:50.860
And then presumably it's going to return a double as well.

118
00:07:50.890 --> 00:07:57.270
I I can infer that because it's an operator, a double consumer, it's something that returns nothing

119
00:07:57.270 --> 00:08:02.280
but takes a double just one double, presumably a double function.

120
00:08:02.280 --> 00:08:08.130
That's going to be a function that takes something of type double as an input and then returns something

121
00:08:08.130 --> 00:08:11.610
presumably of another type, though it could be a double as well.

122
00:08:12.030 --> 00:08:17.470
But it allows for some other type, and it's a generic type double predicate.

123
00:08:17.490 --> 00:08:22.350
So again, this is going to be something that takes an input of a double and then returns a true or

124
00:08:22.350 --> 00:08:23.880
false because it's a predicate.

125
00:08:24.600 --> 00:08:29.210
A supplier is going to take no input, but it's going to return a double right.

126
00:08:29.230 --> 00:08:32.820
Let's make sure I'm saying that right represents the supplier of double valued result.

127
00:08:32.820 --> 00:08:33.180
Yes.

128
00:08:35.190 --> 00:08:38.260
So I think I hope you're starting to get the pattern here.

129
00:08:38.280 --> 00:08:42.570
Let's see if there's anything else that I really need to be explicit about.

130
00:08:43.530 --> 00:08:44.480
For the most part.

131
00:08:44.490 --> 00:08:47.940
I mean, if you have any questions as to how to implement any of these.

132
00:08:48.020 --> 00:08:52.550
Things when you encounter them, if and when you encounter them, you can always just look over here

133
00:08:52.550 --> 00:08:57.310
at the at the Java Dock description, or you can even just hover over it, right?

134
00:08:57.440 --> 00:09:02.330
Or you can click on the link and go, See this information here would be in the job.

135
00:09:02.330 --> 00:09:04.490
And that's where this is coming from, in fact.

136
00:09:04.640 --> 00:09:10.130
So for the rest of these that we may or may not have encountered in real life, you should now begin

137
00:09:10.130 --> 00:09:15.920
to to kind of get the the patterns of how they're named and what those names mean, right?

138
00:09:16.340 --> 00:09:17.900
So that's where these come from.

139
00:09:18.800 --> 00:09:19.120
All right.

140
00:09:19.130 --> 00:09:24.760
So let's say that we wanted to create a lambda expression for a bi consumer then, right?

141
00:09:24.770 --> 00:09:30.530
So that's a thing, a function that takes two inputs and doesn't return anything.

142
00:09:30.740 --> 00:09:37.880
So if we were going to make one of those that would look like, well, actually, it just so happens,

143
00:09:37.880 --> 00:09:39.620
I think I'm seeing one right here.

144
00:09:40.640 --> 00:09:47.720
This for each right here, it's taking two inputs and it's calling print death, which means it doesn't

145
00:09:47.720 --> 00:09:48.500
return anything.

146
00:09:48.500 --> 00:09:50.480
So that right, there would be a buy consumer.

147
00:09:50.480 --> 00:10:01.160
And in fact, let me see here if I uncomment that and I comment this one instead, and I will put my

148
00:10:01.160 --> 00:10:03.980
cursor right there and do a command p now.

149
00:10:03.980 --> 00:10:09.350
Currently, this is saying that it just takes a consumer, but I think that's simply because of this

150
00:10:09.350 --> 00:10:13.310
mapping operation that I have right before it.

151
00:10:13.310 --> 00:10:14.240
I think we had this.

152
00:10:14.690 --> 00:10:18.200
I think we were using this for it when we were doing a grouping by.

153
00:10:18.350 --> 00:10:23.720
So if I had the grouping by then we'd have a key and a value and then the for each here would be telling

154
00:10:23.720 --> 00:10:26.780
me that it takes something of type by consumer, I'm pretty sure.

155
00:10:28.100 --> 00:10:30.140
So that's just an example that right?

156
00:10:30.140 --> 00:10:33.470
But that's how I would know what to what to provide there.

157
00:10:33.620 --> 00:10:36.710
So let me comment that one out and uncomment this one again.

158
00:10:36.710 --> 00:10:38.330
So this one here?

159
00:10:40.070 --> 00:10:49.400
Let's see now in in this particular case, I'm actually using this second version here that just implements

160
00:10:49.400 --> 00:10:50.480
a collector, right?

161
00:10:51.260 --> 00:10:51.610
All right.

162
00:10:51.620 --> 00:10:55.520
And let's see here if I put my do a command p right here.

163
00:10:56.060 --> 00:10:56.930
Yeah, here we go.

164
00:10:56.930 --> 00:11:05.240
So this this map once a function and so we now know that a function could be satisfied in this case

165
00:11:05.480 --> 00:11:11.630
with a lambda expression that takes one input and then returns one output.

166
00:11:11.630 --> 00:11:13.640
And that is exactly what we've got here.

167
00:11:13.790 --> 00:11:16.820
We're taking one input and we're calling it whatever we want to.

168
00:11:16.820 --> 00:11:17.680
You know that right?

169
00:11:17.690 --> 00:11:20.450
So I'm calling it s for string.

170
00:11:20.660 --> 00:11:26.240
And then the output is going to be the output method of the split method here, which in our case would

171
00:11:26.540 --> 00:11:30.890
result in outputting a string array, right?

172
00:11:32.310 --> 00:11:35.040
All right, so that's one loose end that I wanted to cover.

173
00:11:35.520 --> 00:11:40.650
Join me in the next lesson and I will cover one more loose end from a while back.

174
00:11:40.650 --> 00:11:44.460
That totally pertains to this module, though, so I'll see you there.
