WEBVTT
1
00:00:00.510 --> 00:00:07.200
All right, next up, we're going to learn another way to compare two strings this time, though, instead

2
00:00:07.200 --> 00:00:12.270
of comparing two strings to determine which one comes first alphabetically.

3
00:00:12.510 --> 00:00:18.180
We're going to compare two strings just to determine if they are equivalent in values.

4
00:00:18.570 --> 00:00:22.380
OK, so again, we'll clear this out.

5
00:00:22.920 --> 00:00:23.330
Oops.

6
00:00:23.790 --> 00:00:24.480
And let's see.

7
00:00:24.490 --> 00:00:35.090
So we'll create two strings first text and we'll start with something straightforward like Apple and

8
00:00:35.100 --> 00:00:35.500
oops!

9
00:00:36.590 --> 00:00:42.360
Second text and we'll do the same thing again, Apple and Apple.

10
00:00:42.360 --> 00:00:47.130
And then we'll do this and we'll say first string dot.

11
00:00:48.990 --> 00:00:51.600
Content equals.

12
00:00:53.580 --> 00:01:03.420
Second, text, OK, so this method also returns a Boolean that is to say that it returns a true false

13
00:01:03.420 --> 00:01:09.480
yes, no on off type of thing as opposed to returning text or numbers.

14
00:01:09.630 --> 00:01:09.930
All right.

15
00:01:09.930 --> 00:01:11.550
So this method returns a Boolean.

16
00:01:11.550 --> 00:01:18.150
And what it does is it tells us whether or not the string that the method is on has the same text value

17
00:01:18.150 --> 00:01:20.760
as the second string here.

18
00:01:20.940 --> 00:01:22.920
OK, so if we run this?

19
00:01:24.900 --> 00:01:29.610
OK, and we get a true, you know, I should take this moment to point out something, and I'm sorry

20
00:01:29.610 --> 00:01:34.590
that if this wasn't clear for everyone, we're seeing the word true here.

21
00:01:35.040 --> 00:01:41.040
But that's just the string representation of the output of this method.

22
00:01:41.280 --> 00:01:48.600
So in fact, I could capture the output of this method in a variable by doing a command option or command

23
00:01:48.600 --> 00:01:50.070
alt for Windows users.

24
00:01:50.310 --> 00:01:51.840
The four variable.

25
00:01:52.230 --> 00:01:52.680
OK.

26
00:01:52.920 --> 00:01:53.850
And I don't know.

27
00:01:53.850 --> 00:01:55.290
I'll just call it result.

28
00:01:55.950 --> 00:02:03.690
So I just want you to notice here the output of this method and all of the other Boolean methods that

29
00:02:03.690 --> 00:02:05.130
we have looked at so far.

30
00:02:05.130 --> 00:02:10.980
Those methods that return a Boolean, they return a Boolean, not text.

31
00:02:11.160 --> 00:02:18.510
However, when we take this, this Boolean result, which I am now storing in a variable here and we

32
00:02:18.510 --> 00:02:26.940
print that out, it prints the English words true or false, but that's not actually what's inside of

33
00:02:26.940 --> 00:02:27.700
this variable.

34
00:02:28.230 --> 00:02:29.400
It's not a string.

35
00:02:29.430 --> 00:02:29.910
OK.

36
00:02:30.270 --> 00:02:38.160
The reason it prints true or false is because this print line method here is actually translating the

37
00:02:38.160 --> 00:02:39.750
Boolean to text.

38
00:02:39.930 --> 00:02:44.970
And the way it's doing that is that the print line method is actually what we call overloaded, which

39
00:02:44.970 --> 00:02:48.510
means that there are many variations of this print line method.

40
00:02:48.810 --> 00:02:54.660
The particular version of print line that is being used in this case is one that is expecting to receive

41
00:02:54.660 --> 00:02:55.440
a Boolean.

42
00:02:55.590 --> 00:03:00.570
And so really quickly, I'll just dig into this a little bit just to give you a little bit of insight

43
00:03:00.570 --> 00:03:00.870
here.

44
00:03:01.110 --> 00:03:04.770
So if we dig into that print line method, it looks like it's doing a lot of things.

45
00:03:04.950 --> 00:03:11.850
But the main thing to note is this bit right here, where the print line method is delegating down to

46
00:03:11.880 --> 00:03:15.000
a simpler print method that receives a Boolean.

47
00:03:15.000 --> 00:03:23.340
And then if we dig into that method, we will see that this in turn, calls a write method and it takes

48
00:03:23.340 --> 00:03:29.880
our Boolean value and converts it into a string by calling string value of now.

49
00:03:29.880 --> 00:03:34.320
This value of method here is also expecting a Boolean as input.

50
00:03:34.740 --> 00:03:38.520
So there are many variations of this value of method as well.

51
00:03:38.790 --> 00:03:43.710
But if we dig into this particular one that accepts a Boolean, then we see that it is using what is

52
00:03:43.710 --> 00:03:45.330
called a unitary operator.

53
00:03:45.480 --> 00:03:52.110
And all that means is that it tests whether or not this boolean that we've passed in is true or not.

54
00:03:52.410 --> 00:03:59.610
If this Boolean is true, then this unitary operator expression is returning a string of true.

55
00:04:00.000 --> 00:04:03.990
Otherwise it returns a false, a string of false.

56
00:04:04.230 --> 00:04:05.910
And that's how all of this is working.

57
00:04:05.910 --> 00:04:08.690
So I'm not showing you all of this to confuse you.

58
00:04:08.700 --> 00:04:14.670
I'm just showing this to you, just to shed a little bit more light into what's actually being stored

59
00:04:14.970 --> 00:04:16.380
all the way back here.

60
00:04:16.800 --> 00:04:19.560
Inside of this Boolean, it really is a boolean.

61
00:04:19.560 --> 00:04:20.640
There is no text here.

62
00:04:20.640 --> 00:04:25.380
The text translation is happening as an indirect result of the print line method.

63
00:04:26.070 --> 00:04:30.600
All right, sorry for that tangent, but kind of an important one in case anybody was kind of wondering

64
00:04:30.600 --> 00:04:32.940
how come they keep seeing the text there?

65
00:04:33.180 --> 00:04:36.750
That's not what's really coming out of this method.

66
00:04:38.370 --> 00:04:38.760
OK.

67
00:04:38.880 --> 00:04:45.780
So anyway, yeah, we got this word true out of the result here, because the these the contents of

68
00:04:45.780 --> 00:04:47.940
these two variables are equal.

69
00:04:48.810 --> 00:04:57.180
OK, so I'm going to undo this and and put this bit back in here and I'm going to use a refactoring

70
00:04:57.180 --> 00:04:59.100
to do that, which is called inline.

71
00:04:59.100 --> 00:05:09.150
So inline will take a variable and it will take whatever code was used to create the value of that variable

72
00:05:09.150 --> 00:05:13.640
and it will get rid of the variable and just replace the variable with the original thing.

73
00:05:13.650 --> 00:05:19.800
So in other words, we we selected all of this and then create extracted a variable out of it.

74
00:05:19.800 --> 00:05:21.030
And that's what this is.

75
00:05:21.180 --> 00:05:22.410
We can go the other way.

76
00:05:22.620 --> 00:05:27.930
We can get rid of this variable and just replace it all with this with an inline.

77
00:05:28.260 --> 00:05:35.670
OK, so I will put my cursor on the variable and then I will do an inline with command option or command

78
00:05:35.670 --> 00:05:38.280
alt and in like Nancy.

79
00:05:38.370 --> 00:05:41.880
But here it stands for inline, even though the word in line starts with an eye.

80
00:05:42.570 --> 00:05:49.590
OK, and then the ID asks me, Do I want to inline all the references and remove that variable for in

81
00:05:49.590 --> 00:05:50.970
this case, there's only one reference.

82
00:05:50.970 --> 00:05:52.080
So yeah, that's fine.

83
00:05:52.710 --> 00:05:52.980
All right.

84
00:05:52.980 --> 00:05:54.120
So see what that did there.

85
00:05:54.330 --> 00:05:56.460
It just replaced the variable.

86
00:05:56.460 --> 00:05:57.960
It got rid of the variable entirely.

87
00:05:57.960 --> 00:05:59.970
And now I'm back to pretty much what I had before.

88
00:06:00.150 --> 00:06:02.070
Minus this extra line there.

89
00:06:02.490 --> 00:06:10.710
OK, now I'm going to replace this content equals with another method that does seemingly the same thing

90
00:06:11.130 --> 00:06:13.230
and that is simply just equals.

91
00:06:13.500 --> 00:06:15.810
So let's run this and see what we get.

92
00:06:17.530 --> 00:06:19.090
OK, we get the same thing.

93
00:06:20.230 --> 00:06:22.060
We get true again.

94
00:06:23.460 --> 00:06:30.080
So then you should be wondering, OK, what's the difference between the equals in the equals contents

95
00:06:30.090 --> 00:06:32.160
or equal contents methods?

96
00:06:32.490 --> 00:06:35.190
And the the difference is an interesting one.

97
00:06:36.330 --> 00:06:39.600
This equals method does more or less the same thing.

98
00:06:39.840 --> 00:06:43.740
However, it is a little more strict in what it's looking for.

99
00:06:44.010 --> 00:06:51.030
This equals method will only allow you to compare two strings.

100
00:06:51.280 --> 00:06:59.490
OK, so not only do the contents of the two strings have to match, but they have to both be strings.

101
00:07:00.240 --> 00:07:02.640
However, the content equals method.

102
00:07:04.750 --> 00:07:07.510
Is quite a bit more flexible.

103
00:07:07.720 --> 00:07:13.480
It doesn't actually just compare to strings, it can compare a character sequence.

104
00:07:13.570 --> 00:07:15.460
I mean, let me show you what I mean by that.

105
00:07:15.700 --> 00:07:22.690
So for the second text, I'm going to make this actually a string buffer.

106
00:07:25.770 --> 00:07:29.870
And we learned a little bit about the string buffer, although I told you that generally speaking,

107
00:07:29.870 --> 00:07:37.250
if you wanted to append lots of text more than two or three together, you should use a string builder.

108
00:07:37.370 --> 00:07:42.410
But for right now, I'm going to use a string buffer and I'm going to use it in this way.

109
00:07:42.410 --> 00:07:45.320
New string buffer.

110
00:07:48.320 --> 00:07:53.870
OK, so I've initialized the string buffer with the text of Apple here.

111
00:07:54.260 --> 00:08:00.380
All right, so note string buffer is not the same thing as a string, though they are kind of related.

112
00:08:00.380 --> 00:08:06.470
A string buffer can hold string information, right, and a string certainly can hold string or text

113
00:08:06.470 --> 00:08:09.200
information, but they're not the same data type there.

114
00:08:09.230 --> 00:08:10.490
They are different types.

115
00:08:10.790 --> 00:08:17.120
However, the content equals method will accept or work on either.

116
00:08:17.240 --> 00:08:23.930
And the reason for that is because both the string and the string buffer have something in common.

117
00:08:24.170 --> 00:08:28.940
Not only is the string class A string, it is also a character sequence.

118
00:08:29.270 --> 00:08:36.320
And not only is the string buffer class a string buffer, it also is a character sequence.

119
00:08:36.320 --> 00:08:42.920
So we haven't learned how this could be the case yet, but it's sort of related to if you recall in

120
00:08:42.920 --> 00:08:51.860
the code where we had a pet and then we had cat and dog, cat was its own class, dog was its own class,

121
00:08:51.860 --> 00:08:56.450
but cat and dog were also simultaneously both pets.

122
00:08:56.490 --> 00:09:05.060
OK, now in that case, cat and dog were both pets because they both inherited from the same super class

123
00:09:05.060 --> 00:09:05.750
of pet.

124
00:09:06.680 --> 00:09:14.990
In this particular case, string and string buffer do not both inherit from the class of character sequence.

125
00:09:15.170 --> 00:09:19.790
They are both character sequences for another reason that we'll get into when we get into slightly more

126
00:09:19.790 --> 00:09:21.650
advanced, object oriented things.

127
00:09:21.650 --> 00:09:27.140
But just know that string and string buffer both have something in common with each other, and that

128
00:09:27.140 --> 00:09:32.480
is that they are both also character sequences, and there are a few other classes that are also.

129
00:09:32.510 --> 00:09:37.700
In fact, there are a lot of other classes that are also considered character sequences, and any of

130
00:09:37.700 --> 00:09:42.830
those classes are permissible to be used with the content equals method.

131
00:09:42.980 --> 00:09:50.150
So let's go ahead and run this real quick, and we will see that we still get a true here, even though

132
00:09:50.150 --> 00:09:54.350
we're now comparing two objects that are seemingly of a different type.

133
00:09:54.620 --> 00:09:55.010
OK.

134
00:09:55.220 --> 00:10:03.560
So it's kind of like this content equals method is almost kind of ignoring the fact that these two objects

135
00:10:03.560 --> 00:10:09.650
are seemingly of different types, and it's getting down to the essence of what it is that we want to

136
00:10:09.650 --> 00:10:15.530
compare, which is the contents of these two objects, right?

137
00:10:15.680 --> 00:10:17.880
This bit here, that bit there.

138
00:10:17.930 --> 00:10:24.140
So basically, we're saying the content equals method is saying, I don't care what the data type seems

139
00:10:24.140 --> 00:10:24.650
to be.

140
00:10:24.920 --> 00:10:30.140
I just want to get right down to the gist of, Hey, there's text in here and there's text in here.

141
00:10:30.440 --> 00:10:33.290
Are those two content equal or not?

142
00:10:33.290 --> 00:10:38.030
And that's exactly what this method is doing now, just for grins.

143
00:10:38.510 --> 00:10:43.610
I'm going to show you that if I put my cursor right here on the content equals inside of the content

144
00:10:43.610 --> 00:10:50.570
equals method, you know, to the right of the parentheses here, and I do a command p on Mac or control

145
00:10:50.570 --> 00:10:52.100
people on Windows and Linux.

146
00:10:52.310 --> 00:10:55.730
And I can confirm again what versions of this method there are.

147
00:10:55.730 --> 00:10:56.690
There are two versions.

148
00:10:56.690 --> 00:11:00.950
There's one that takes a string buffer and then there's something that takes a character sequence.

149
00:11:01.280 --> 00:11:07.820
Now, if I wanted to know, well, what more about a character sequence and what that is, I can do

150
00:11:07.820 --> 00:11:17.330
a command o and then type in cat rc q character sequence to narrow that down.

151
00:11:17.480 --> 00:11:20.330
And then I can go to that class by hitting enter.

152
00:11:21.290 --> 00:11:26.940
Now I see here that the character sequence is what's called an interface that's sort of like a class.

153
00:11:26.960 --> 00:11:31.730
It's sort of like an empty shell of a class, and that tells me that there are going to be a bunch of

154
00:11:31.730 --> 00:11:37.460
classes that sort of kind of are relatives of this character sequence.

155
00:11:37.460 --> 00:11:42.170
And if I want to know what all of those classes are, I can come over here to this thing here.

156
00:11:42.170 --> 00:11:48.860
This little icon is telling me, if I click on that, it'll show me all of the classes that implement.

157
00:11:49.040 --> 00:11:50.540
And that's the term we use here.

158
00:11:50.660 --> 00:11:53.200
This class of character sequence.

159
00:11:53.200 --> 00:11:58.370
So I want to see what are all the types of classes that are related to the character sequence.

160
00:11:58.580 --> 00:12:01.940
So I just clicked on that and now I can see the whole entire list.

161
00:12:01.950 --> 00:12:04.380
So let's see what's here just to get a little bit of an idea.

162
00:12:04.400 --> 00:12:11.960
So string character buffer, string builder, string buffer, string, a bunch of other things.

163
00:12:12.170 --> 00:12:12.620
OK.

164
00:12:13.100 --> 00:12:24.050
So that tells me that I could use instances or objects of any of these types with the content equals

165
00:12:24.050 --> 00:12:26.670
method and all of them would work.

166
00:12:26.690 --> 00:12:27.110
OK.

167
00:12:27.290 --> 00:12:33.470
So I just used a string buffer, but I could also use the string builder and let's just try that real

168
00:12:33.470 --> 00:12:33.710
quick.

169
00:12:33.710 --> 00:12:34.850
So I'm going to close this.

170
00:12:35.120 --> 00:12:40.850
I'm going to change this to string builder string.

171
00:12:41.970 --> 00:12:42.810
Builder.

172
00:12:45.920 --> 00:12:48.230
And I have to change it over here as well.

173
00:12:50.090 --> 00:12:50.540
OK.

174
00:12:51.170 --> 00:12:54.950
And then I'm going to run this again and look at that, I still get a true.

175
00:12:55.460 --> 00:12:55.880
All right.

176
00:12:56.390 --> 00:13:00.800
Now, in case you think this is some kind of a trick or whatever where we're just always getting true,

177
00:13:00.980 --> 00:13:07.370
I'm going to change this to something that is totally not related to a string or a character sequence.

178
00:13:07.640 --> 00:13:10.070
And we'll see what happens when I do that.

179
00:13:10.310 --> 00:13:15.310
So if I change this to mean changes to something drastically different.

180
00:13:19.060 --> 00:13:23.830
Now I'm having to import this class, and I need to change this over here as well.

181
00:13:24.790 --> 00:13:32.800
OK, so now that I'm using something that is totally, totally not a character sequence at all, notice

182
00:13:32.800 --> 00:13:38.350
down here I get this red squiggly line and that's this telling me if I hover over it cannot resolve

183
00:13:38.350 --> 00:13:41.110
method content equals Java ISO file.

184
00:13:41.320 --> 00:13:48.190
And so what that's the thing is there is no content equals method that accepts as input something of

185
00:13:48.190 --> 00:13:49.510
type file.

186
00:13:49.630 --> 00:13:50.140
OK.

187
00:13:50.290 --> 00:13:51.760
It doesn't know what to do with that.

188
00:13:51.760 --> 00:13:52.660
That's an error.

189
00:13:52.810 --> 00:13:55.360
This code won't even compile if I try that.

190
00:13:55.390 --> 00:13:55.780
OK.

191
00:13:56.170 --> 00:14:01.000
So that's what would happen if you tried to use something that it doesn't understand or accept.

192
00:14:01.270 --> 00:14:02.400
I'm going to undo that.

193
00:14:06.930 --> 00:14:07.320
OK.

194
00:14:07.470 --> 00:14:13.290
And like I said, there are cases where you'll just want to compare two strings and make sure that they

195
00:14:13.290 --> 00:14:19.200
really are the same and by the same, I mean, their contents, character by character are the same.

196
00:14:19.500 --> 00:14:23.940
And so, yeah, I think this will wrap up this lesson and I will see you in the next one.
