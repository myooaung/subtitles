WEBVTT
1
00:00:01.050 --> 00:00:01.530
All right.

2
00:00:01.710 --> 00:00:02.430
Welcome back.

3
00:00:02.820 --> 00:00:09.780
So in one of the previous lessons where I was going through many of the most common methods of the list

4
00:00:09.780 --> 00:00:12.270
interface, I skipped over a few.

5
00:00:12.540 --> 00:00:19.260
And one of them that I skipped over in particular was the salt method because I wanted to dedicate a

6
00:00:19.260 --> 00:00:20.790
lesson just for that.

7
00:00:21.180 --> 00:00:25.140
And so now we're going to dig into that and understand how we can use it.

8
00:00:27.030 --> 00:00:36.990
So let me lay out a scenario, let's say that we want to be able to simply list out all of the employees

9
00:00:36.990 --> 00:00:40.470
that we have contained in a collection, such as a list.

10
00:00:40.740 --> 00:00:45.010
But we want to list them out in alphabetical order, perhaps.

11
00:00:45.030 --> 00:00:47.370
OK, so we want to sort them in order.

12
00:00:47.610 --> 00:00:48.570
How can we do that?

13
00:00:48.900 --> 00:00:55.470
So first thing I want to do is let's just run the program to the point that it just prints out the employees

14
00:00:55.470 --> 00:00:57.960
in the list as they currently are.

15
00:00:58.350 --> 00:01:04.740
OK, so maybe the easiest way to do that would be to just uncomment these three lines here where we're

16
00:01:04.740 --> 00:01:10.740
looping over all of the employees and we're calling the two string and printing them out.

17
00:01:10.740 --> 00:01:12.480
So let's just select those.

18
00:01:12.720 --> 00:01:18.930
And I'm just doing a command forward slash to uncomment, and then let's just run this.

19
00:01:20.010 --> 00:01:22.620
Okay, so let's see here.

20
00:01:23.130 --> 00:01:24.690
Make a little room here.

21
00:01:25.590 --> 00:01:25.830
All right.

22
00:01:25.840 --> 00:01:32.820
So these should be in the order in which they were listed in the text string itself.

23
00:01:33.180 --> 00:01:38.190
Up here, I think these should all be the same order, the programmers.

24
00:01:38.190 --> 00:01:43.380
This is the second one which results in this lambda thing and then two three four five four flintstone

25
00:01:43.380 --> 00:01:44.000
and then rubble.

26
00:01:44.010 --> 00:01:44.260
Yeah.

27
00:01:44.300 --> 00:01:46.920
So I think we're in the same order here.

28
00:01:47.730 --> 00:01:55.530
So one thing to keep in mind is that we've got Wilma Flintstone separated from Fred Flintstone.

29
00:01:55.710 --> 00:01:57.970
We've got Barney rubble in between them.

30
00:01:57.990 --> 00:02:04.470
OK, so if this were in alphabetical order in a natural alphabetical order where we'd alphabetized by

31
00:02:04.470 --> 00:02:09.150
the last name first and then potentially the first name to be a tie breaker?

32
00:02:09.450 --> 00:02:09.810
Right.

33
00:02:10.620 --> 00:02:14.430
So clearly, this is not in a natural ordering as of now.

34
00:02:14.760 --> 00:02:18.930
OK, so we've established that that's what that's doing at the moment.

35
00:02:19.320 --> 00:02:24.780
OK, so we saw that there was a sort method on the list interface.

36
00:02:24.780 --> 00:02:26.550
So let's take another look at that.

37
00:02:26.760 --> 00:02:38.070
So if we were to simply reference our employees variable here, which is a list and we can see that

38
00:02:38.070 --> 00:02:43.320
right there, it's a list employees dot sort.

39
00:02:43.470 --> 00:02:46.980
So there's a sort method on this class.

40
00:02:47.190 --> 00:02:49.620
So the question is, how can we use it?

41
00:02:49.650 --> 00:02:50.010
Right?

42
00:02:50.700 --> 00:02:57.870
So if we look here, we can see that the sorting method takes an input of something called a comparator.

43
00:02:57.960 --> 00:03:00.650
So let me explain what that actually is.

44
00:03:00.990 --> 00:03:09.690
Comparator is an interface, and it defines a method on it that allows us to compare any two objects.

45
00:03:09.720 --> 00:03:10.230
OK.

46
00:03:11.040 --> 00:03:19.920
So if we had an implementation of a comparator, that comparator would be able to compare in this case,

47
00:03:20.520 --> 00:03:28.260
any two employees with each other to determine which one comes first or second, or if they are equal.

48
00:03:28.290 --> 00:03:28.770
OK.

49
00:03:29.160 --> 00:03:30.930
That's what a comparator will do.

50
00:03:31.200 --> 00:03:38.820
And then what happens is this sort and method here will apply what is called a sorting algorithm to

51
00:03:38.820 --> 00:03:47.730
that list, using our comparator to effectively figure out how can it sort all of the objects within

52
00:03:47.730 --> 00:03:49.780
the list using this comparator?

53
00:03:49.800 --> 00:03:50.190
OK.

54
00:03:50.820 --> 00:03:58.920
So it will use whatever sorting technique which we call an algorithm in this case that it has been coded

55
00:03:58.920 --> 00:04:03.360
for to compare all of these objects in a meaningful way.

56
00:04:03.510 --> 00:04:11.520
In this particular case, as of Java 16, the sought method will use a sorting algorithm called a merge

57
00:04:11.580 --> 00:04:12.120
sort.

58
00:04:12.300 --> 00:04:17.580
Now there are actually several algorithms for sorting objects and data.

59
00:04:17.970 --> 00:04:22.860
It'll be beyond the scope of this course for me to get into the details of that, and it's for the most

60
00:04:22.860 --> 00:04:24.690
part, not really going to matter.

61
00:04:24.690 --> 00:04:32.370
But just know there are actually a number of strategies, if you will, for how to sort things.

62
00:04:33.150 --> 00:04:42.540
But I think as of Java version seven, if I'm not mistaken, Java's sorting method here is utilizing

63
00:04:42.690 --> 00:04:44.550
the Merge sort.

64
00:04:45.930 --> 00:04:46.260
All right.

65
00:04:46.270 --> 00:04:51.360
So to use this first, we'll just finish that part up.

66
00:04:51.540 --> 00:04:55.170
Now we need an implementation of comparator.

67
00:04:55.590 --> 00:05:02.310
And I think for right now, the quickest way that we're going to get this list of employees sorted out

68
00:05:02.460 --> 00:05:06.990
is to simply create our own class that implements the comparator interface.

69
00:05:07.320 --> 00:05:14.220
Now, right now, this is the only place in all of our code where we're actually going to need that

70
00:05:14.220 --> 00:05:15.290
implementation.

71
00:05:15.300 --> 00:05:23.610
And so can you think of what might be one of the quickest ways for us to be able to quickly create an

72
00:05:23.610 --> 00:05:25.980
implementation of a comparator interface?

73
00:05:26.250 --> 00:05:27.600
Take a moment to think about it.

74
00:05:29.630 --> 00:05:33.890
OK, so there are a few ways that we can do this.

75
00:05:34.310 --> 00:05:40.640
I think what I'm going to start off with, though, is to show you the technique that we we've seen

76
00:05:40.640 --> 00:05:46.260
before, which is to create an anonymous class of a competitor.

77
00:05:46.280 --> 00:05:54.310
And I can do that by simply typing right inside of the parentheses here, new and then comparator.

78
00:05:54.410 --> 00:05:55.630
Now, I don't even have to type.

79
00:05:55.640 --> 00:06:00.650
I don't even have to finish typing because the ADP knows where I'm going with this.

80
00:06:01.760 --> 00:06:06.620
As you can see here, it's showing me something here so I can just hit, enter and watch what happens.

81
00:06:09.760 --> 00:06:18.160
It goes ahead and fills in the rest of the scaffolding for an anonymous class of type competitor.

82
00:06:18.460 --> 00:06:21.610
And this computer is using a generic.

83
00:06:22.240 --> 00:06:29.680
So it's saying that it knows how to compare specifically objects of type I employee.

84
00:06:29.710 --> 00:06:31.450
OK, so that's kind of important.

85
00:06:32.710 --> 00:06:41.770
And so within this comparator implementation, there is one method that comes from the comparator interface

86
00:06:41.770 --> 00:06:42.940
called Compare.

87
00:06:43.600 --> 00:06:51.280
This method takes two objects as input, and because we're using generics, it has gone ahead and set

88
00:06:51.280 --> 00:06:57.460
the type two I employee, which is great if we did not use generics.

89
00:06:57.760 --> 00:07:03.860
These would be of type object, which is very generic in the literal sense.

90
00:07:04.090 --> 00:07:05.980
And then we'd have to cast these.

91
00:07:06.730 --> 00:07:16.090
OK, so now the way that this compare method works on a comparator is it expects us to write code that

92
00:07:16.090 --> 00:07:23.410
compares these two objects with each other and returns an integer, depending on our determination of

93
00:07:23.410 --> 00:07:25.540
which one comes first or second.

94
00:07:25.810 --> 00:07:33.580
Basically, what happens is if if zero one, if 01 should come before oh two, then we should return

95
00:07:33.580 --> 00:07:34.720
a negative one.

96
00:07:36.040 --> 00:07:39.470
If 02 should come before 01.

97
00:07:39.490 --> 00:07:42.160
Then we should return a positive one.

98
00:07:42.700 --> 00:07:47.530
And if they are both equal to each other, then we should return to zero.

99
00:07:47.710 --> 00:07:48.220
OK.

100
00:07:48.730 --> 00:07:56.110
So negative one, zero or positive one are the results that we should return.

101
00:07:57.740 --> 00:08:05.870
Now, this can actually be done fairly easily for really, really simple scenarios, because a lot of

102
00:08:06.050 --> 00:08:16.400
java's most common data types, strings and numbers, dates, things like that actually already have

103
00:08:16.400 --> 00:08:23.210
a method on them which we can simply delegate down to to make the determination of what comes first

104
00:08:23.210 --> 00:08:23.690
or second.

105
00:08:23.810 --> 00:08:24.770
Let me show you what I mean.

106
00:08:24.980 --> 00:08:32.090
Let's say that we for right now, we just want to compare the last names of these two objects to determine

107
00:08:32.090 --> 00:08:33.930
which one comes first or second.

108
00:08:33.950 --> 00:08:34.340
Right?

109
00:08:35.270 --> 00:08:37.280
So we need to get at the last names.

110
00:08:37.690 --> 00:08:44.210
So one problem we're going to run into right away, though, is the fact that the eye employee interface

111
00:08:44.210 --> 00:08:46.880
doesn't know anything about names, right?

112
00:08:47.900 --> 00:08:50.440
All it knows is the method get salary.

113
00:08:50.450 --> 00:09:00.620
So we're we're going to want to probably cast these objects not just to an employee, but to employees

114
00:09:00.620 --> 00:09:06.110
so that we can actually access the last name of each of these objects.

115
00:09:06.530 --> 00:09:15.080
And we also have to be mindful, though, that there's going to be at least one object in our list that

116
00:09:15.080 --> 00:09:17.940
isn't an actual employee.

117
00:09:17.960 --> 00:09:18.320
Right?

118
00:09:18.470 --> 00:09:24.680
This line right here is going to be converted into an object of Type II employee, but it won't be an

119
00:09:24.680 --> 00:09:25.940
actual employee.

120
00:09:26.270 --> 00:09:29.630
It will be made by our lambda expression.

121
00:09:29.640 --> 00:09:36.080
And so this guy here won't actually convert to an object that has a name.

122
00:09:36.350 --> 00:09:36.690
OK.

123
00:09:36.710 --> 00:09:38.300
That's just the way we wrote the code.

124
00:09:38.540 --> 00:09:44.330
So we need to be a little bit careful when we get to objects made in that way.

125
00:09:44.660 --> 00:09:51.260
So what I'm thinking is maybe we'll start off with an if block here with an if block.

126
00:09:51.650 --> 00:10:10.910
And we'll say something like if, oh, one instance of employee and oh two instance of employee, then

127
00:10:10.910 --> 00:10:13.460
proceed to do some fancy stuff, right?

128
00:10:14.690 --> 00:10:16.670
I think that might be kind of a good start.

129
00:10:17.180 --> 00:10:24.800
Now we're also going to want to actually access the last name fields of 01 and 02.

130
00:10:25.490 --> 00:10:33.200
And so even though we're checking if they are instances of employee, this variable and this variable

131
00:10:33.200 --> 00:10:35.000
are still of type I employee.

132
00:10:35.010 --> 00:10:36.560
So we'd want to cast these.

133
00:10:36.800 --> 00:10:40.970
But now that we're using the instance of we can use, can you think of it?

134
00:10:42.260 --> 00:10:50.170
We can use we can use pattern matching to save us a line of code where we would have had to cast these.

135
00:10:50.180 --> 00:10:58.850
So let me just remind you real quick, what we might have done is to create new variables such as employee,

136
00:10:59.330 --> 00:11:06.650
I don't know, empty one equals and then we'd cast employee oh, one, right?

137
00:11:06.650 --> 00:11:09.320
And then we'd do that again for.

138
00:11:12.540 --> 00:11:22.620
Four 02, right, we do something like that, and then we could access the last name field of this because

139
00:11:22.620 --> 00:11:29.250
now it is a type employee which defines the last name, whereas I employee does not define their last

140
00:11:29.250 --> 00:11:29.430
name.

141
00:11:29.450 --> 00:11:31.290
Let me just prove that to you real quick.

142
00:11:31.890 --> 00:11:39.720
So if I just reference one period, there's a get salary method here, but there is no last name.

143
00:11:39.810 --> 00:11:43.830
Now I know you're seeing this here, but that's these this last name, first name, date of birth.

144
00:11:43.840 --> 00:11:50.820
These are only showing up here because the I.D. is smart enough to to know that there is the possibility

145
00:11:51.030 --> 00:11:57.000
that 01 not only is a type of type I employee, but it may also be of employee.

146
00:11:57.000 --> 00:11:59.850
And if I reference this, watch what happens.

147
00:12:00.180 --> 00:12:02.700
It actually just casts it all for us.

148
00:12:02.730 --> 00:12:03.030
Right?

149
00:12:03.300 --> 00:12:05.490
But it's a little convoluted looking.

150
00:12:05.490 --> 00:12:06.120
OK, so.

151
00:12:06.270 --> 00:12:10.320
So that's kind of like the ID is is doing a little trickery for us.

152
00:12:10.590 --> 00:12:11.040
OK.

153
00:12:11.370 --> 00:12:17.670
But the last thing Phil doesn't actually exist on the I employee interface itself.

154
00:12:17.700 --> 00:12:17.950
OK.

155
00:12:17.970 --> 00:12:20.670
The ID is just being like super smart.

156
00:12:20.790 --> 00:12:21.210
OK.

157
00:12:21.690 --> 00:12:24.270
So just wanted to prove that.

158
00:12:24.420 --> 00:12:32.190
However, we don't need any of this, and what we can do instead is to simply use pattern matching because

159
00:12:32.190 --> 00:12:38.790
we're using the instance of operator here so we can just go right behind the word employee right there

160
00:12:38.970 --> 00:12:41.430
and then just create a variable name.

161
00:12:41.430 --> 00:12:45.480
And since I'm already using this one here, that's as good a name as any.

162
00:12:45.720 --> 00:12:51.510
So I'll just reference that just like that and then I can do the same thing over here MP too.

163
00:12:52.860 --> 00:13:00.360
So not only are we asking, Hey, is oh one an instance of the employee?

164
00:13:00.570 --> 00:13:10.230
We're really saying if one is an instance of employee, then go ahead and create a a variable of type

165
00:13:10.230 --> 00:13:18.000
employee and and use that tool to recast 01 as an actual employee.

166
00:13:18.030 --> 00:13:21.150
OK, and now we can refer to it by this new name.

167
00:13:21.450 --> 00:13:25.500
MP one and and then we're saying, do it again over here.

168
00:13:25.560 --> 00:13:33.810
And by the way, so this ampersand, this and this logical and that we're doing here is nice as well

169
00:13:33.990 --> 00:13:34.770
because.

170
00:13:35.880 --> 00:13:40.230
We really want to make sure that both of these are an employee, right?

171
00:13:40.860 --> 00:13:44.380
If they're not both an employee, we can't really compare anything right.

172
00:13:44.430 --> 00:13:49.440
They've got to both be employees, meaning they both have to have a last name in this particular case.

173
00:13:49.980 --> 00:13:50.300
All right.

174
00:13:50.310 --> 00:13:54.420
So now that we've got all of that, all we have to do is simply return a number.

175
00:13:54.720 --> 00:14:00.150
And so what we can do is to say return employee one last name now.

176
00:14:00.240 --> 00:14:01.940
Last name is a string.

177
00:14:01.950 --> 00:14:10.980
And I was already mentioning that a number of common data types within Java already know how to compare

178
00:14:10.980 --> 00:14:14.040
themselves to each other, and string is one of them.

179
00:14:14.160 --> 00:14:20.010
And we simply can call the Compare two method, and it's right here, and we're going to learn more

180
00:14:20.010 --> 00:14:21.540
about this shortly.

181
00:14:22.410 --> 00:14:28.350
The reason that there is a compare to method on string and in a number of other classes is because all

182
00:14:28.350 --> 00:14:35.630
of these classes that we can compare with each other implement another interface called comparable right,

183
00:14:35.640 --> 00:14:37.290
they're able to be compared.

184
00:14:37.410 --> 00:14:37.860
OK.

185
00:14:38.130 --> 00:14:46.330
And the comparable interface declares a method called Compare two, and I'm relying on that fact.

186
00:14:46.380 --> 00:14:54.810
So compared to and then we'll reference MP two and grab the last name from this guy.

187
00:14:56.010 --> 00:14:57.240
And that's all we need to do.

188
00:14:57.240 --> 00:15:03.460
And the compare to method itself returns an integer, so it's really meant to work with comparing things.

189
00:15:03.480 --> 00:15:06.420
That's that's why it works out perfectly for us here.

190
00:15:06.450 --> 00:15:06.840
OK.

191
00:15:07.020 --> 00:15:12.000
So we're simply saying, Well, let's just compare the last name of the empty one to the last name of

192
00:15:12.000 --> 00:15:12.780
the empty two.

193
00:15:13.050 --> 00:15:17.100
If the last name of the empty one comes first, then it'll return a negative one.

194
00:15:17.250 --> 00:15:19.780
If they are equal, then it'll return to zero.

195
00:15:19.800 --> 00:15:22.230
And otherwise, it will return a positive one.

196
00:15:23.130 --> 00:15:26.430
Now we need to also look at what we're doing down here.

197
00:15:26.460 --> 00:15:34.860
If either of the two instances is not able to be cast as an employee, what do we want to do here?

198
00:15:35.250 --> 00:15:38.760
Well, I think for now, let's just run this and see what we get.

199
00:15:38.760 --> 00:15:47.850
I think will be OK simply to return a zero as the default consequence if this logic here doesn't work

200
00:15:47.850 --> 00:15:48.090
out.

201
00:15:48.240 --> 00:15:50.640
OK, so let's let's try that out and see.

202
00:15:51.360 --> 00:15:58.410
And other than that, I think we're done with our first implementation of this comparator.

203
00:15:58.890 --> 00:16:04.080
Now what should happen is that this sort of method doesn't actually return anything.

204
00:16:04.080 --> 00:16:09.600
If I hover on it here, you'll see that this method is a void method.

205
00:16:09.600 --> 00:16:17.330
So what it actually does is it tries to sort the elements in this list in place, right?

206
00:16:18.120 --> 00:16:24.390
So and so the elements should simply just be in a different order within the existing list, which is

207
00:16:24.390 --> 00:16:25.290
pretty convenient.

208
00:16:25.560 --> 00:16:30.150
And it means that this code right here that iterate over them and prints them out doesn't need to change.

209
00:16:30.300 --> 00:16:33.330
So let's run this and see if we see any difference.

210
00:16:35.340 --> 00:16:35.790
All right.

211
00:16:35.850 --> 00:16:37.230
So what do we have now?

212
00:16:38.160 --> 00:16:46.140
We've got Fred Flintstone, then we've got this lambda thing here, which is still in the same position

213
00:16:46.140 --> 00:16:48.270
that it was then up here.

214
00:16:48.510 --> 00:16:59.190
And I think that makes sense for the most part because we basically opted it out of this sorting determination

215
00:16:59.190 --> 00:16:59.430
here.

216
00:16:59.430 --> 00:17:00.510
Write this code here.

217
00:17:00.690 --> 00:17:03.420
It's not something that is an instance of an employee.

218
00:17:03.660 --> 00:17:06.480
And so the code will end up just coming down here.

219
00:17:06.570 --> 00:17:09.610
And I think the end result of that is that it just doesn't move.

220
00:17:09.630 --> 00:17:11.550
OK, so maybe we want that.

221
00:17:11.550 --> 00:17:12.240
Maybe we don't.

222
00:17:12.240 --> 00:17:12.720
We can.

223
00:17:12.720 --> 00:17:15.270
We can contemplate that a little bit more.

224
00:17:15.270 --> 00:17:17.190
But for the most part, that makes sense.

225
00:17:17.970 --> 00:17:24.480
Everything else, though Flintstone Flintstone two two three three four, four or five five then rubble.

226
00:17:25.170 --> 00:17:25.470
Yeah.

227
00:17:25.950 --> 00:17:35.190
And so that is different than what we originally had, where we had Fred and Wilma Flintstone separated

228
00:17:35.400 --> 00:17:38.460
with Barney rubble in between them.

229
00:17:38.580 --> 00:17:43.140
And now everything is completely ordered by the last name.

230
00:17:43.590 --> 00:17:43.980
All right.

231
00:17:44.340 --> 00:17:47.010
Now we could order by anything here.

232
00:17:47.370 --> 00:17:53.880
Currently, we're ordering by last name, but we could order by date of birth, and that would be very

233
00:17:53.880 --> 00:17:55.270
trivial to do, right?

234
00:17:55.290 --> 00:17:57.730
We could simply change this to the.

235
00:17:58.410 --> 00:18:03.150
Now, of course, we're not listing the dates of birth down here at this moment, so it wouldn't be

236
00:18:03.150 --> 00:18:05.350
very clear what we're looking at, right?

237
00:18:05.370 --> 00:18:11.220
So we could do something like that, but it wouldn't be printed here unless we were to come in and change

238
00:18:11.220 --> 00:18:13.260
that, which I'm not inclined to do right now.

239
00:18:13.950 --> 00:18:18.060
But I just wanted to show how easy it would be to sort by some other field.

240
00:18:18.090 --> 00:18:24.450
Right now, what if we also wanted to make sure that if there was a match on the last name, that we

241
00:18:24.450 --> 00:18:29.370
then proceed to the first name, which is how natural sorting order typically works, right?

242
00:18:30.300 --> 00:18:31.230
We could do that too.

243
00:18:31.230 --> 00:18:33.780
Now that will be slightly more involved.

244
00:18:33.960 --> 00:18:36.840
But let's go ahead and do it just so you can see what that would look like.

245
00:18:37.020 --> 00:18:42.960
So first thing I'll do is I'll put this back to the last name.

246
00:18:44.220 --> 00:18:53.370
So what we probably want to do in that case is to say something like, OK, if the last names are not

247
00:18:53.370 --> 00:19:00.660
zero, which means equal, if they're not equal, then just return whatever you got from this compare.

248
00:19:00.680 --> 00:19:00.920
Right.

249
00:19:00.930 --> 00:19:02.640
So it's either going to be negative one or one.

250
00:19:02.640 --> 00:19:07.290
So you'd want to do if they're not equal, you'd want to do exactly what we're doing here, return whatever

251
00:19:07.290 --> 00:19:08.100
comes out of this.

252
00:19:08.430 --> 00:19:16.230
But if they are zero, then you need to do a second round of this.

253
00:19:16.710 --> 00:19:19.560
But the second time you use the first name?

254
00:19:19.650 --> 00:19:20.040
OK.

255
00:19:20.220 --> 00:19:29.250
So a way that we could do that might be to first capture the result of this compared to method in a

256
00:19:29.250 --> 00:19:29.700
variable.

257
00:19:29.700 --> 00:19:37.560
So if I select all of this and then do an option, Command V. and I will call this L name result.

258
00:19:38.220 --> 00:19:38.670
OK.

259
00:19:40.110 --> 00:19:47.240
Then I can use maybe like a ternary operator, I could I could do an if invested, if I could do a ternary,

260
00:19:47.250 --> 00:19:52.320
I think I'll just keep it a little bit more simple right now and just use a ternary so I can say something

261
00:19:52.320 --> 00:19:52.590
like.

262
00:19:52.860 --> 00:19:53.160
All right.

263
00:19:53.160 --> 00:20:04.710
So if the L name result is not equal to zero, then question mark because this is a ternary operator,

264
00:20:04.710 --> 00:20:05.760
right, that I'm using.

265
00:20:05.910 --> 00:20:14.350
So if the L name result is not equal to zero, then just return whatever that result already was.

266
00:20:14.370 --> 00:20:14.800
OK.

267
00:20:16.140 --> 00:20:24.360
However, otherwise, and that's how I can kind of read this this colon in a ternary else or otherwise.

268
00:20:25.530 --> 00:20:27.210
Let's do this again.

269
00:20:27.210 --> 00:20:36.300
But using the first name so I could even just grab all of that, copy it, come down here, paste.

270
00:20:36.600 --> 00:20:42.180
And now I will just select the last name here, and I'm going to do an option shift to select it again

271
00:20:42.180 --> 00:20:42.990
over here, right?

272
00:20:42.990 --> 00:20:48.000
So I'm selecting both of these at the same time, and then I can just replace them both with first name

273
00:20:49.290 --> 00:20:50.250
just like that.

274
00:20:50.430 --> 00:20:54.180
And then I can hit Escape to get out of that dual cursor business.

275
00:20:54.600 --> 00:20:55.020
OK.

276
00:20:55.230 --> 00:21:01.200
So if the last names are not equal, then just sort by last name.

277
00:21:01.200 --> 00:21:08.880
But if the last names are equal, meaning you have a zero coming back from this compared to then sort

278
00:21:08.880 --> 00:21:10.020
by first name.

279
00:21:10.140 --> 00:21:17.010
Now I don't I don't think we're going to see any difference here in this particular case, because it

280
00:21:17.010 --> 00:21:24.210
looks like they're already in order like we've got Fred Flintstone coming before Wilma.

281
00:21:25.170 --> 00:21:25.740
Let's see.

282
00:21:25.740 --> 00:21:28.920
We've got Barney coming before Betty.

283
00:21:29.870 --> 00:21:34.700
Yeah, so I think in this case, we wouldn't see any difference, so I'll tell you what, let's use

284
00:21:34.700 --> 00:21:39.050
the salary instead for our second criteria that way.

285
00:21:39.890 --> 00:21:42.110
Yeah, that way we will see a difference, I think.

286
00:21:42.680 --> 00:21:43.080
All right.

287
00:21:43.100 --> 00:21:45.830
So now let me show you something here.

288
00:21:45.980 --> 00:21:53.390
You might think we can just select these two, the first names here and then call get salary.

289
00:21:54.910 --> 00:21:56.110
But I can't do that.

290
00:21:56.590 --> 00:22:02.620
And the reason I can't do that is because they get salary method returns a primitive integer and because

291
00:22:02.620 --> 00:22:03.970
that's primitive, primitive.

292
00:22:04.090 --> 00:22:05.370
It's not an object.

293
00:22:05.380 --> 00:22:10.600
And because it's not an object, we don't have a compare to method on it.

294
00:22:10.600 --> 00:22:10.870
Right?

295
00:22:10.870 --> 00:22:14.080
Primitives are not objects, therefore, they don't have methods.

296
00:22:14.110 --> 00:22:14.440
Right.

297
00:22:14.770 --> 00:22:20.260
We want a way, though, to compare this integer to this integer.

298
00:22:20.410 --> 00:22:26.050
Well, luckily, there's an easy way for us to do this, and what we can do is we can use the wrapper.

299
00:22:26.170 --> 00:22:30.370
In fact, there's two ways that we can do this that are kind of similar to each other.

300
00:22:30.580 --> 00:22:34.320
We can simply use the wrapper class integer, OK.

301
00:22:34.570 --> 00:22:39.580
However, the wrapper class integer actually gives us a method where we can do this without having to

302
00:22:39.580 --> 00:22:41.920
modify a whole lot more on this code.

303
00:22:42.100 --> 00:22:50.110
So what we can do is actually simply reference a static method on the integer wrapper class integer

304
00:22:50.140 --> 00:22:52.740
dot compare.

305
00:22:53.680 --> 00:22:59.200
And this method takes two numbers as input.

306
00:22:59.380 --> 00:22:59.860
OK.

307
00:23:00.160 --> 00:23:08.110
So if I do this compare and then I can just pass in the get salary from one employee one.

308
00:23:11.350 --> 00:23:15.430
Comma and then the get salary of employee two.

309
00:23:15.850 --> 00:23:20.950
And this method still returns the negative one, zero or positive one.

310
00:23:20.980 --> 00:23:28.750
OK, so that's one way I could do this, or I could have wrapped both of these in an actual integer

311
00:23:29.080 --> 00:23:34.800
and then called the compare to method of the integer class that way as well.

312
00:23:34.910 --> 00:23:40.780
But but this is more straightforward, and I don't have to create an entire instance of an integer.

313
00:23:40.780 --> 00:23:45.070
Instead, I just use a static method, which is more efficient in this case.

314
00:23:45.460 --> 00:23:45.880
All right.

315
00:23:46.090 --> 00:23:50.020
So now we're comparing by salary, so let's run this again and see what we get.

316
00:23:52.270 --> 00:23:54.700
All right, so what do we have now?

317
00:23:55.590 --> 00:24:00.120
Fred Flintstone at two point eight million.

318
00:24:00.690 --> 00:24:04.380
Then Wilma at two point five.

319
00:24:06.520 --> 00:24:10.630
At 2.5 six, then Flintstone, two at two point five.

320
00:24:11.200 --> 00:24:19.660
OK, so that's a way that we could do a secondary level of sorting if we wanted to and if we wanted

321
00:24:19.660 --> 00:24:23.170
to get even more fancy, you could go multiple levels deep.

322
00:24:23.290 --> 00:24:29.890
In that case, though, you might not be using a ternary anymore because that would probably look a

323
00:24:29.890 --> 00:24:31.000
little too complicated.

324
00:24:31.000 --> 00:24:38.470
And you're probably just going to switch over to using a regular plain old if block with a lot of nested

325
00:24:38.470 --> 00:24:39.970
if statements in it.

326
00:24:40.010 --> 00:24:40.290
Right.

327
00:24:40.300 --> 00:24:45.520
And then you could go as deep as you want it to go, though that code would also be a little difficult

328
00:24:45.520 --> 00:24:50.620
to to to read, probably if you went to too deep with it, but you could certainly do that.

329
00:24:51.400 --> 00:24:58.060
And then a couple of other things I will mention if you wanted to reverse the order, you could do that

330
00:24:58.060 --> 00:24:59.140
pretty easily.

331
00:24:59.140 --> 00:25:04.480
One way that you could do it is to simply reverse the objects that you're comparing.

332
00:25:04.480 --> 00:25:12.970
So instead of one and then two, I start with two and amp one, and then let's run this again.

333
00:25:12.970 --> 00:25:16.120
And now that should reverse the list.

334
00:25:18.280 --> 00:25:24.340
All right, so one thing you'll notice, though, is that we've got this lambda guy here that's kind

335
00:25:24.340 --> 00:25:27.520
of an oddball that's kind of messing everything else up.

336
00:25:27.700 --> 00:25:34.720
And the reason for that is because this pair of objects, this one here and then this lambda are being

337
00:25:34.720 --> 00:25:41.560
compared to each other, which is bypassing this bit here because they're not both instances of an employee.

338
00:25:41.710 --> 00:25:46.210
And we're coming down here, ideally in a situation like this.

339
00:25:46.360 --> 00:25:53.080
You really want to have all of your objects in the list being of the exact same type so that they can

340
00:25:53.080 --> 00:25:55.990
proper properly be compared to each other.

341
00:25:56.260 --> 00:26:01.820
So it would be more ideal, honestly to filter this guy out.

342
00:26:02.350 --> 00:26:09.160
Now, in many implementations in Java, where we can compare objects in a collection if one of those

343
00:26:09.160 --> 00:26:15.280
objects is determined not to be whatever the data type is that we care about, such as employee in this

344
00:26:15.280 --> 00:26:21.700
case, then what would happen is that we would actually do what's called throwing an exception.

345
00:26:21.880 --> 00:26:25.330
That's where we basically say, Hey, all bets are off.

346
00:26:25.510 --> 00:26:32.560
You've just passed me an object that can't actually be properly compared to the other objects in this

347
00:26:32.560 --> 00:26:33.010
list.

348
00:26:33.010 --> 00:26:36.190
And therefore, I'm just going to give up and not even try.

349
00:26:36.220 --> 00:26:36.640
OK.

350
00:26:36.790 --> 00:26:44.380
That is that is actually a pretty standard behavior that is implemented within Java within other methods

351
00:26:44.380 --> 00:26:46.600
of Java for doing things like sorting.

352
00:26:46.930 --> 00:26:51.170
What I've done here is to actually attempt to be a little bit more forgiving.

353
00:26:51.460 --> 00:26:55.180
But that actually causes more headaches, to be perfectly honest with you.

354
00:26:55.570 --> 00:27:02.140
And so in real life, I probably would have actually just written something to filter this out before

355
00:27:02.140 --> 00:27:04.750
I even started doing the comparisons.

356
00:27:04.780 --> 00:27:05.230
OK.

357
00:27:05.650 --> 00:27:12.460
So perhaps I might have created a new list, and to create that new list, I might have iterated over

358
00:27:12.460 --> 00:27:20.780
the existing list and only copied in the items that are of instances of employee.

359
00:27:20.800 --> 00:27:28.210
OK, now I'm not going to bother to do that exercise here because when we get deeper into lambdas,

360
00:27:28.210 --> 00:27:34.840
you'll see that all of this could be done so much more simplistically, including the filtering as well.

361
00:27:35.260 --> 00:27:40.270
And that is like the best way to handle this type of scenario going forward.

362
00:27:40.510 --> 00:27:42.300
But just just be aware.

363
00:27:42.310 --> 00:27:48.070
In fact, it's kind of good that we've got this little one off thing in here, just so you can see how

364
00:27:48.340 --> 00:27:54.970
somewhat unpredictable things can be when you do have an object that cannot properly be compared to

365
00:27:54.970 --> 00:27:57.620
all of the other objects in your list.

366
00:27:57.640 --> 00:28:04.030
Okay, so this guy is kind of ruining it for what otherwise would have been a really great little sorting

367
00:28:04.030 --> 00:28:05.230
implementation here.

368
00:28:05.260 --> 00:28:06.910
OK, and then let's see.

369
00:28:06.910 --> 00:28:14.950
There's maybe another little thing I want to show notice up here that this bit here that was kind of

370
00:28:15.190 --> 00:28:17.650
filled in for us by the ADP.

371
00:28:18.400 --> 00:28:19.990
This bit is in gray.

372
00:28:20.110 --> 00:28:27.220
And whenever the ADP shows a bit of code that's in gray, what it's basically telling us is that that's

373
00:28:27.220 --> 00:28:29.800
redundant or there's a different way to do that.

374
00:28:29.930 --> 00:28:34.540
And so if we actually just put our cursor here and hover for a moment, look at what the ADP tells us.

375
00:28:34.750 --> 00:28:38.860
Anonymous new comparator can be replaced with a lambda.

376
00:28:39.010 --> 00:28:46.840
And if you'll recall, we did this over in the employee class, which I will jump into for a moment.

377
00:28:50.410 --> 00:28:51.610
Right here, right?

378
00:28:52.990 --> 00:28:58.630
We when I was teaching you how to do this before we got to this implementation where we just used a

379
00:28:58.630 --> 00:28:59.260
lambda.

380
00:28:59.530 --> 00:29:07.810
I actually created a new I employee just like that, right?

381
00:29:08.050 --> 00:29:09.740
Same same basic pattern.

382
00:29:09.760 --> 00:29:13.630
OK, I'm going to undo this right now, but I just wanted to show you that.

383
00:29:13.640 --> 00:29:21.580
So anytime you have code that can return an implementation of an interface, and if that interface only

384
00:29:21.580 --> 00:29:27.940
defines one method, which is to say that that interface is what we call functional, that just basically

385
00:29:27.940 --> 00:29:33.670
means it's an interface that only defines one abstract method on it.

386
00:29:34.090 --> 00:29:42.880
Then anonymous classes of that interface can be replaced with lambda expressions like this one.

387
00:29:42.910 --> 00:29:43.360
OK.

388
00:29:43.750 --> 00:29:52.480
So if we jump back over here so we can actually hover over that bit there and come down here and we

389
00:29:52.480 --> 00:29:56.320
can actually let the ADA replace all of this with a lambda expression.

390
00:29:56.320 --> 00:29:58.630
So let's just see for grins what that will look like.

391
00:30:00.600 --> 00:30:00.990
All right.

392
00:30:01.230 --> 00:30:11.470
So all it basically did was to remove the reference to the computer itself and the name of the method.

393
00:30:11.490 --> 00:30:11.900
OK.

394
00:30:12.060 --> 00:30:16.260
And basically it stripped everything away other than the body of the method.

395
00:30:16.260 --> 00:30:19.950
So it just kind of condensed things a little bit for us.

396
00:30:19.980 --> 00:30:24.450
OK, it's saying here's a method that takes two two inputs.

397
00:30:24.990 --> 00:30:29.470
And then here's the body of what it actually does with those two inputs.

398
00:30:29.490 --> 00:30:32.160
OK, so it's just a little more stripped down, if you will.

399
00:30:33.000 --> 00:30:34.680
But other than that, it's the same thing.

400
00:30:35.310 --> 00:30:36.390
So that's pretty cool.

401
00:30:36.400 --> 00:30:40.620
And like I said, we're going to learn a lot more about lambdas and all kinds of cool things that we

402
00:30:40.620 --> 00:30:44.010
can do in the paradigm of functional programming.

403
00:30:44.700 --> 00:30:50.370
Real soon it's going to be very natural to jump into that after we've learned what we can do in general

404
00:30:50.370 --> 00:30:51.420
with collections.

405
00:30:51.960 --> 00:30:52.220
All right.

406
00:30:52.230 --> 00:30:57.540
And so having said that, I think I'm going to wrap up this lesson, but we're going to look at more

407
00:30:57.540 --> 00:31:01.410
ways that we can sort because this was just one of several.

408
00:31:01.440 --> 00:31:03.750
OK, so I'll see you in the next one.
