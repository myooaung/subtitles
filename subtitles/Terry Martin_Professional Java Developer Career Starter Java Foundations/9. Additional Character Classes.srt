1
00:00:00,690 --> 00:00:00,990
OK.

2
00:00:01,020 --> 00:00:01,690
Welcome back.

3
00:00:01,710 --> 00:00:09,660
There are a few more character classes and symbols that we should take a look at that you may encounter

4
00:00:09,660 --> 00:00:14,970
from time to time or a few of them, a couple of them you'll almost certainly encounter very frequently,

5
00:00:14,970 --> 00:00:15,510
in fact.

6
00:00:15,840 --> 00:00:20,280
So for this, I think we're going to leave the the phone number stuff alone.

7
00:00:20,280 --> 00:00:25,710
And I don't know, I'm going to just create a new class here so you can follow along.

8
00:00:26,160 --> 00:00:32,220
So I'm going back over to the source folder here, and I'm going to right click and see new Java class,

9
00:00:32,430 --> 00:00:35,250
and I don't feel like trying to think of a fancy name here.

10
00:00:35,280 --> 00:00:37,920
So what did I call the last one next practice?

11
00:00:37,930 --> 00:00:38,310
I don't know.

12
00:00:38,520 --> 00:00:39,450
So I'll call this one.

13
00:00:39,450 --> 00:00:42,000
Rejects Practice two.

14
00:00:43,230 --> 00:00:43,680
All right.

15
00:00:43,710 --> 00:00:47,010
Not a great name, but for what we're doing, it doesn't really matter.

16
00:00:47,010 --> 00:00:50,990
And I'm going to close the little output window that their loops.

17
00:00:51,180 --> 00:00:52,530
It's not the one I wanted.

18
00:00:53,010 --> 00:00:54,240
I wanted to close this one.

19
00:00:54,420 --> 00:00:54,810
OK?

20
00:00:55,050 --> 00:01:02,970
And as always, will create a public static void main method with SVM all lowercase and then hit return.

21
00:01:03,360 --> 00:01:09,450
OK, so now let's just make a system out like we did at the beginning of learning about regex here,

22
00:01:09,810 --> 00:01:12,590
and we'll make a string literal.

23
00:01:12,660 --> 00:01:19,770
I don't know, let's say like dorgi, and then we'll use the matches method again, and we'll provide

24
00:01:19,770 --> 00:01:21,930
it with a regular expression again.

25
00:01:22,470 --> 00:01:22,730
All right.

26
00:01:22,740 --> 00:01:28,320
So now the next symbol that I want to teach is called the DOT.

27
00:01:28,950 --> 00:01:36,360
So a dot in a regular expression represents any character at all.

28
00:01:36,510 --> 00:01:37,020
OK.

29
00:01:37,440 --> 00:01:46,100
So with this word, doggy, which is what is that five characters, we could match that with five dots

30
00:01:46,620 --> 00:01:47,570
four five.

31
00:01:47,580 --> 00:01:48,430
Just like that.

32
00:01:48,450 --> 00:01:48,900
OK.

33
00:01:49,050 --> 00:01:50,370
So if we run this?

34
00:01:51,500 --> 00:01:52,580
That is a match.

35
00:01:53,120 --> 00:01:57,260
If we only have three dots and we run this.

36
00:01:58,530 --> 00:02:05,310
That is not a match, because we have five characters in the input string and we told it to find a pattern

37
00:02:05,310 --> 00:02:06,340
of only three.

38
00:02:06,360 --> 00:02:06,830
OK.

39
00:02:07,140 --> 00:02:10,810
So the matches any character at all?

40
00:02:10,830 --> 00:02:12,000
Any character?

41
00:02:12,120 --> 00:02:14,760
So it's kind of a catchall on the surface.

42
00:02:14,760 --> 00:02:21,300
It might not seem that useful, but we will see in a later lesson where we'll start to put a lot of

43
00:02:21,300 --> 00:02:23,280
the techniques that we're learning together.

44
00:02:23,850 --> 00:02:29,760
Sometimes you need that dot just kind of to say and then forget about the rest of whatever's in a string.

45
00:02:29,760 --> 00:02:32,640
So if that doesn't make sense right now, it will shortly.

46
00:02:32,880 --> 00:02:39,420
Okay, so you can do a number of things with this dot we could if we wanted to match this whole entire

47
00:02:39,420 --> 00:02:42,120
pattern, we didn't really care what it what it says.

48
00:02:42,130 --> 00:02:43,290
You would just want to match it.

49
00:02:43,440 --> 00:02:49,230
Besides using five dots, you could use a an asterisks, which is a very common pattern.

50
00:02:49,230 --> 00:02:51,690
In Red X, you'll see this a lot.

51
00:02:51,960 --> 00:02:54,570
So this would match, obviously.

52
00:02:54,600 --> 00:02:59,130
So with this, I'm not going to run all of these examples, but OK, so.

53
00:02:59,670 --> 00:03:01,830
So that's one or more, right?

54
00:03:01,830 --> 00:03:02,760
It's one or more.

55
00:03:03,330 --> 00:03:06,060
This one would not match because this means what?

56
00:03:06,540 --> 00:03:07,990
Zero or one?

57
00:03:08,280 --> 00:03:10,040
And we have five.

58
00:03:10,050 --> 00:03:12,390
So zero or one is not five.

59
00:03:12,400 --> 00:03:13,920
So that would not match.

60
00:03:14,400 --> 00:03:14,860
OK.

61
00:03:15,950 --> 00:03:19,940
Some other symbols to be aware of the carrot.

62
00:03:20,390 --> 00:03:24,950
Now we learned about the carrot in the context of a bracket expression, right?

63
00:03:24,980 --> 00:03:29,120
Like an expression like looks like this where you have a carrot.

64
00:03:29,120 --> 00:03:30,650
And then we did something like.

65
00:03:31,180 --> 00:03:40,160
And and in this context, when the carrot symbol is inside of square brackets, this means opposite

66
00:03:40,160 --> 00:03:41,240
of or not.

67
00:03:41,450 --> 00:03:47,870
So we're saying match any character that isn't in a or a B or C or D.

68
00:03:48,110 --> 00:03:50,690
That's what this means inside of square brackets.

69
00:03:50,960 --> 00:04:00,170
However, outside of square brackets, this matches the beginning of a line or the beginning of a string.

70
00:04:00,200 --> 00:04:08,390
OK, so this carrot here would match where my cursor is right now in that string just the beginning

71
00:04:08,390 --> 00:04:09,290
of that string?

72
00:04:09,320 --> 00:04:09,800
OK.

73
00:04:10,580 --> 00:04:18,050
So I could say something like one, two, three, four or five, right?

74
00:04:18,410 --> 00:04:20,480
Let's see if this matches.

75
00:04:21,410 --> 00:04:21,910
Yes.

76
00:04:21,950 --> 00:04:29,990
So this matches because I'm saying start at the beginning of the of the string or of the line and then

77
00:04:30,170 --> 00:04:33,290
five characters of any sort.

78
00:04:33,620 --> 00:04:40,040
OK, so that matches and then along with this carrot, meaning the beginning of the string or the beginning

79
00:04:40,040 --> 00:04:46,910
of the line, there's also another symbol that means the end of the line and that is the dollar sign.

80
00:04:47,270 --> 00:04:47,730
OK.

81
00:04:48,380 --> 00:04:51,800
So there is actually the end of this string right here.

82
00:04:51,800 --> 00:04:55,250
So let's run this and see if that matches.

83
00:04:55,910 --> 00:04:56,540
Yes, so.

84
00:04:56,650 --> 00:04:58,040
So that matches as well.

85
00:04:58,340 --> 00:05:00,960
Now, if I were to put that dollar sign.

86
00:05:01,520 --> 00:05:02,780
Not at the end.

87
00:05:03,050 --> 00:05:04,310
I'll get rid of this, right?

88
00:05:04,940 --> 00:05:06,290
If I were to do this.

89
00:05:07,520 --> 00:05:10,580
That no longer matches, because that makes no sense.

90
00:05:10,880 --> 00:05:17,600
I'm saying start at the beginning of the string, which is here, then go to characters, which is the

91
00:05:17,600 --> 00:05:18,120
DNA.

92
00:05:18,160 --> 00:05:24,530
Oh, then there should be the end of that string, which there isn't.

93
00:05:24,830 --> 00:05:32,030
Now, technically, depending on what operating system you're on and what your settings are for the

94
00:05:32,030 --> 00:05:39,410
regular expression engine, this dollar sign can match what is called a new line character, which in

95
00:05:39,410 --> 00:05:44,960
normal text would cause a line of text to go down to the next line.

96
00:05:45,380 --> 00:05:52,160
But different operating systems and word processors and text editors will encode going to the next line

97
00:05:52,160 --> 00:05:53,600
in slightly different ways.

98
00:05:53,630 --> 00:06:00,650
There's two main ways that I can think of on Unix systems that is an operating system like Linux, not

99
00:06:00,650 --> 00:06:02,000
Windows, and not Mac.

100
00:06:02,210 --> 00:06:05,300
While the Mac is technically a Unix system now.

101
00:06:05,690 --> 00:06:07,640
I digress anyway.

102
00:06:07,790 --> 00:06:17,360
On Unix systems by default, simple Unix text editors will encode going to the new line with just a

103
00:06:17,360 --> 00:06:18,440
new line character.

104
00:06:18,440 --> 00:06:20,840
One character that means go to the new line.

105
00:06:20,870 --> 00:06:21,330
OK.

106
00:06:21,800 --> 00:06:24,140
And that's a non-visible character, by the way.

107
00:06:24,140 --> 00:06:25,550
It's an invisible character.

108
00:06:25,700 --> 00:06:26,450
It is it.

109
00:06:26,450 --> 00:06:35,090
It exists in the data of a file, but it does not visually show up on the screen other than to cause

110
00:06:35,090 --> 00:06:37,250
text to go to the next line.

111
00:06:37,580 --> 00:06:43,820
And then I think on Windows and some other editors by default, to go to the next line, they will use

112
00:06:43,820 --> 00:06:48,110
a combination of two characters, both a new line and a carriage return.

113
00:06:48,380 --> 00:06:51,080
And these are actually let me just show real quick.

114
00:06:51,110 --> 00:06:58,440
There are actually ASCII codes for this, and we talked a little bit about Unicode and character encoding.

115
00:06:58,670 --> 00:07:02,000
So let me just show you an ASCII code table.

116
00:07:02,210 --> 00:07:06,290
I'm going to bring a browser over here real quick and we'll Google for ASCII.

117
00:07:06,290 --> 00:07:08,060
It's AC III.

118
00:07:10,650 --> 00:07:13,830
And let's see what Wikipedia has to say about this.

119
00:07:14,640 --> 00:07:15,300
Here we go.

120
00:07:15,330 --> 00:07:19,770
Yeah, so here's a here's an ASCII table, essentially.

121
00:07:20,250 --> 00:07:23,130
And so there are a number of characters, wolf.

122
00:07:23,430 --> 00:07:29,880
First of all, we'll start with, yeah, let's look at some of the more straightforward characters that

123
00:07:29,880 --> 00:07:31,230
you'd be more familiar with.

124
00:07:31,410 --> 00:07:33,930
Mostly visible ones other than the space, right?

125
00:07:34,140 --> 00:07:43,500
So as I stated in a previous lesson, every character on a computer system has a numeric value associated

126
00:07:43,500 --> 00:07:43,920
with it.

127
00:07:44,130 --> 00:07:48,810
And it is those numeric values that are actually stored in the memory of the computer.

128
00:07:48,990 --> 00:07:52,400
So the computer doesn't literally store ABCD.

129
00:07:52,570 --> 00:07:58,170
Instead, it just stores numbers that represent ABCD and et cetera.

130
00:07:58,230 --> 00:07:58,650
OK.

131
00:07:58,710 --> 00:08:02,820
And every single character that can be represented in the computer has a number.

132
00:08:03,510 --> 00:08:11,010
Now there are a few different character in coatings or schemes, if you will, for assigning a number

133
00:08:11,040 --> 00:08:19,350
to a character or a letter or whatever the original and possibly most famous encoding that was used

134
00:08:19,350 --> 00:08:22,470
generally in America, at least.

135
00:08:22,620 --> 00:08:26,840
And I suppose by extension, probably a lot of the world is called ASCII.

136
00:08:26,850 --> 00:08:29,500
I think it stands for American Standard Code.

137
00:08:29,550 --> 00:08:30,180
Here, hold on.

138
00:08:30,190 --> 00:08:31,470
Let's see what does this stand for?

139
00:08:31,470 --> 00:08:34,830
American standard code for information interchange?

140
00:08:35,190 --> 00:08:35,610
OK.

141
00:08:35,760 --> 00:08:37,410
And I think this came out.

142
00:08:37,530 --> 00:08:38,000
Probably.

143
00:08:38,010 --> 00:08:39,630
Yeah, there you go, 1961.

144
00:08:39,630 --> 00:08:40,560
So it's quite old.

145
00:08:41,040 --> 00:08:41,490
OK?

146
00:08:41,850 --> 00:08:48,390
And just some some computer people got together and decided things like Here what we want to go.

147
00:08:48,570 --> 00:08:53,490
They decided that a capital A. would be the decimal number 41.

148
00:08:53,760 --> 00:08:55,470
Capital B would be, I'm sorry.

149
00:08:55,530 --> 00:09:01,970
The decimal number 65, a capital B would be decimal number 66 and so on and so on.

150
00:09:02,160 --> 00:09:09,270
These other numbers here are other number system representations of the number 65 if we scroll up to

151
00:09:09,270 --> 00:09:09,810
the top here.

152
00:09:09,810 --> 00:09:12,510
So we've got octal and hexadecimal.

153
00:09:12,510 --> 00:09:14,550
These are just other number systems.

154
00:09:14,670 --> 00:09:20,220
So in decimal, which is based 10, I'm not going to get super deep into the numbering systems and things.

155
00:09:20,220 --> 00:09:27,450
But you know, our normal counting, if you're not a computer nerd is called decimal or base 10, right?

156
00:09:27,720 --> 00:09:30,390
You have 10 digits, and that's how we typically count.

157
00:09:30,540 --> 00:09:37,110
But there are other number systems besides base 10 hexadecimal is base 16, so they have the digits

158
00:09:37,110 --> 00:09:40,770
zero through nine, and then they threw in a few letters as well.

159
00:09:40,920 --> 00:09:47,730
So that's why you see here like this to a that's a number, but it's a hexadecimal number.

160
00:09:47,760 --> 00:09:51,300
OK, and then there's also octal, which is base eight.

161
00:09:51,480 --> 00:09:54,630
So they got rid of two two possibilities.

162
00:09:54,630 --> 00:09:58,140
You know, they they got rid of two fingers and they only got to eight.

163
00:09:58,320 --> 00:10:04,320
And the reason that exists is because there have historically been some conveniences on computer systems

164
00:10:04,440 --> 00:10:07,290
to a number of things with a base of only eight.

165
00:10:07,320 --> 00:10:10,410
So when you get to eight, you kind of start over again.

166
00:10:10,740 --> 00:10:15,030
OK, but decimal is probably what you and I are most comfortable with.

167
00:10:15,150 --> 00:10:19,080
And so they give us these three representations actually give us four representations, and then they

168
00:10:19,080 --> 00:10:23,250
give us the binary representation as well right there.

169
00:10:23,280 --> 00:10:23,730
OK.

170
00:10:24,300 --> 00:10:29,370
So, all right, sorry to have gone down that rabbit hole, but it helps to give you a little bit more

171
00:10:29,370 --> 00:10:29,900
insight.

172
00:10:29,910 --> 00:10:36,840
So having seen that, all of these standard letters and characters and things have a number associated

173
00:10:36,840 --> 00:10:39,600
with them in some encoding.

174
00:10:39,630 --> 00:10:45,240
OK, now we'll look at a few of the characters that are not visible because I want you to understand

175
00:10:45,240 --> 00:10:46,740
this as well a little bit.

176
00:10:47,010 --> 00:10:54,600
So I was talking about a new line character, which will tell certain types of computer systems or text

177
00:10:54,600 --> 00:11:00,720
editors to drop down to the next line just to continue showing text or whatever.

178
00:11:00,810 --> 00:11:06,690
And that new line character, as I typically call it here, it's called a line feed.

179
00:11:06,930 --> 00:11:11,700
And so it is represented in some systems as a backslash in.

180
00:11:11,880 --> 00:11:17,850
Let's see what is what this this column represent character escape sequences in C programming.

181
00:11:17,850 --> 00:11:18,210
Okay?

182
00:11:18,480 --> 00:11:26,070
So if you were programming in C or Java, for that matter, backslash in is the common representation

183
00:11:26,070 --> 00:11:31,590
for this character, which humans don't see what their eyes typically.

184
00:11:31,590 --> 00:11:37,800
But it instructs the editor to just or a printer, for example, to go down to the next line.

185
00:11:38,070 --> 00:11:38,480
OK.

186
00:11:38,670 --> 00:11:46,140
And then there's also the carriage return character, which does something kind of similar, and these

187
00:11:46,140 --> 00:11:48,510
two characters have their own codes.

188
00:11:48,720 --> 00:11:52,560
The new line is a 10, and the carriage return is a 13.

189
00:11:52,710 --> 00:11:55,800
OK, so why did I go through all of explaining this?

190
00:11:55,980 --> 00:12:04,740
Well, because if we go back over here, what I'm telling you essentially is that these symbols really

191
00:12:04,740 --> 00:12:09,450
just match on some of these non-visible characters.

192
00:12:09,450 --> 00:12:09,720
That's.

193
00:12:10,090 --> 00:12:16,270
Pretty much all they're doing, and they can be configured in the regular expression because, as I

194
00:12:16,270 --> 00:12:24,520
said, some editors and operating systems will default such that a new line is comprised of both a line

195
00:12:24,520 --> 00:12:28,480
feed character and a carriage return character together.

196
00:12:28,660 --> 00:12:34,870
And in other systems such as default, editors of Unix operating systems is just one character.

197
00:12:35,140 --> 00:12:41,950
So this dollar sign could match either of those scenarios, depending on how you have the regular expression

198
00:12:41,950 --> 00:12:43,180
engine configured.

199
00:12:43,420 --> 00:12:47,650
And I don't know that's something that you want to keep in the back of your mind.

200
00:12:47,680 --> 00:12:52,600
It's not something that you'll probably have to be super aware of all the time, but something that

201
00:12:52,600 --> 00:12:54,070
you should just kind of know.

202
00:12:54,190 --> 00:12:55,780
And I'm making you aware of it now.

203
00:12:56,230 --> 00:12:56,610
All right.

204
00:12:56,620 --> 00:13:05,200
So now in the case of a string like this, there actually is not a new line character.

205
00:13:05,210 --> 00:13:13,870
So this this symbol here is also matching on simply the fact that that is the end of the string.

206
00:13:13,900 --> 00:13:14,340
OK.

207
00:13:14,830 --> 00:13:19,370
So in this case, it's not matching on any of these characters, per se.

208
00:13:19,390 --> 00:13:24,010
It's just literally matching on the fact that that's the very, very, very end of that string.

209
00:13:24,580 --> 00:13:27,520
And this one is the very beginning of this string.

210
00:13:28,510 --> 00:13:28,870
All right.

211
00:13:29,050 --> 00:13:29,620
Let's see.

212
00:13:29,650 --> 00:13:33,980
So there are some other characters and patterns to be aware of.

213
00:13:34,000 --> 00:13:37,150
There's a character class called Boundary.

214
00:13:37,480 --> 00:13:40,390
OK, let's see what happens when we run this.

215
00:13:41,260 --> 00:13:43,900
OK, so that matches so OK.

216
00:13:44,170 --> 00:13:55,450
The boundary character class simply matches the area between a word character and a non word character,

217
00:13:55,690 --> 00:13:58,060
or a non word character and a word character.

218
00:13:58,060 --> 00:14:01,990
So the the the the order of those two things doesn't matter.

219
00:14:02,110 --> 00:14:03,580
But that's what a boundary does.

220
00:14:04,060 --> 00:14:07,990
Sometimes this can be a little difficult to wrap one's head around.

221
00:14:08,230 --> 00:14:12,610
Let me put two words in here Cat space dog.

222
00:14:13,120 --> 00:14:20,410
And let's see, we'll do three characters like this.

223
00:14:20,680 --> 00:14:23,680
OK, so let's see if this matches.

224
00:14:24,860 --> 00:14:27,560
OK, so that does not match.

225
00:14:27,950 --> 00:14:36,410
And the reason it doesn't match is because of this space here and the boundary character, or I can

226
00:14:36,410 --> 00:14:42,530
call it a word boundary character does not match a space itself.

227
00:14:43,010 --> 00:14:47,210
But if I put a space here and then run this.

228
00:14:48,440 --> 00:14:58,790
Now it matches, so what we've got here is the S.A.T. matches these three dots, then we've got a space

229
00:14:58,790 --> 00:15:01,820
here, which is this space here.

230
00:15:02,180 --> 00:15:09,680
But then we've got something in between the space and the word character, and that is actually what

231
00:15:09,680 --> 00:15:13,190
this boundary character class is matching on.

232
00:15:13,340 --> 00:15:18,350
So that's it's another little bit of a weird thing, and sometimes it'll take a little bit of time to

233
00:15:18,350 --> 00:15:22,820
kind of get a sense for where you want to use that.

234
00:15:24,300 --> 00:15:31,140
All right, now, another set of character classes that should be pretty easy to understand are some

235
00:15:31,140 --> 00:15:35,910
character classes that are actually just kind of opposites of the ones we've already learned, some

236
00:15:35,910 --> 00:15:37,170
of the ones we've already learned.

237
00:15:37,920 --> 00:15:39,210
So for example.

238
00:15:41,400 --> 00:15:51,920
We learned about word character class, right, which uses a lowercase W, and so you could, you know,

239
00:15:52,500 --> 00:15:54,120
get rid of these.

240
00:15:55,160 --> 00:16:00,860
And we'll just kind of review this real quick, so I could have three word characters like this and

241
00:16:00,860 --> 00:16:03,110
that would match Cat just fine.

242
00:16:03,890 --> 00:16:04,310
OK?

243
00:16:04,640 --> 00:16:09,140
However, there is an opposite to this as well.

244
00:16:09,710 --> 00:16:18,530
If I wanted anything other than word characters, I could do slash capital W.

245
00:16:20,300 --> 00:16:22,580
OK, so I can do this.

246
00:16:24,610 --> 00:16:33,610
And that means anything other than word characters, so if I run this now, that should not match because.

247
00:16:34,950 --> 00:16:39,870
C a t r word characters, right, so I get a false now.

248
00:16:40,800 --> 00:16:42,660
So what would match this?

249
00:16:43,320 --> 00:16:49,500
Well, I could use hyphens because hyphens are not considered word characters.

250
00:16:50,190 --> 00:16:51,120
So let's run that.

251
00:16:52,090 --> 00:16:53,320
Yep, so that works.

252
00:16:53,470 --> 00:16:55,720
Now you might have thought that I could use numbers.

253
00:16:57,240 --> 00:16:57,820
Like this?

254
00:16:57,840 --> 00:16:58,200
Right?

255
00:16:59,100 --> 00:17:06,630
But if you'll recall, numbers are contained within the range of word characters where characters are

256
00:17:06,810 --> 00:17:11,430
lower and uppercase letters, numbers and underscore.

257
00:17:11,640 --> 00:17:15,240
So this actually would not match and I'll prove that real quick.

258
00:17:16,470 --> 00:17:16,760
Yeah.

259
00:17:16,890 --> 00:17:19,770
So we got a false there, so that actually does not match.

260
00:17:19,800 --> 00:17:20,160
OK.

261
00:17:20,460 --> 00:17:26,880
So there's there's that character class of non word numbers.

262
00:17:28,430 --> 00:17:35,870
And then there are opposites of the others as well, so there's there we learned about digit class,

263
00:17:35,870 --> 00:17:37,410
right with the lowercase D..

264
00:17:37,430 --> 00:17:42,080
Well, there's a Capital D as well, and you can pretty much guess what that's going to represent,

265
00:17:42,090 --> 00:17:42,440
right?

266
00:17:43,250 --> 00:17:43,600
Oops.

267
00:17:45,840 --> 00:17:49,500
And so that will represent non digits.

268
00:17:49,950 --> 00:17:54,090
So obviously, if we have these digits here, this should not match, we'll run it.

269
00:17:54,780 --> 00:17:55,200
Correct.

270
00:17:55,230 --> 00:17:55,550
OK.

271
00:17:55,560 --> 00:17:56,970
Yeah, so that doesn't match.

272
00:17:57,480 --> 00:18:07,350
However, if we do a b c, which are not digits and run this, it should be just fine.

273
00:18:08,340 --> 00:18:08,730
OK.

274
00:18:09,120 --> 00:18:15,270
So, you know, if you were parsing some text, then you wanted to make sure that no one could put explicitly

275
00:18:15,270 --> 00:18:21,180
digits in a certain location or position, you might want to use something like this or the capital

276
00:18:21,180 --> 00:18:22,830
W or whatever.

277
00:18:23,100 --> 00:18:30,990
And then there's also we've we've been using backslash s for space characters.

278
00:18:31,320 --> 00:18:38,310
There is capital s as well for nonce space characters.

279
00:18:38,820 --> 00:18:46,860
So let's see if we first do this with a space character and we'll just put one space in and run this.

280
00:18:46,860 --> 00:18:49,230
This should match one space.

281
00:18:50,300 --> 00:18:51,950
OK, yes, so that matches.

282
00:18:52,340 --> 00:18:59,840
But then if we change this to a non space and run this, obviously that should not match.

283
00:19:00,850 --> 00:19:02,290
Right, so that doesn't match.

284
00:19:02,500 --> 00:19:04,960
Now what happens if we just get rid of that space?

285
00:19:05,680 --> 00:19:06,640
Then what do we get?

286
00:19:07,870 --> 00:19:14,410
OK, now that also doesn't match, and that's because what this expression is saying is it's looking

287
00:19:14,410 --> 00:19:18,640
for one character that isn't a space over here.

288
00:19:18,820 --> 00:19:21,910
We have zero characters, so that doesn't match.

289
00:19:22,030 --> 00:19:25,000
So we need one character that isn't a space.

290
00:19:25,000 --> 00:19:28,930
So anything that isn't the space should make this match.

291
00:19:29,080 --> 00:19:30,640
So I just put a period here.

292
00:19:30,650 --> 00:19:31,240
Let's see.

293
00:19:32,340 --> 00:19:33,670
OK, so that matches.

294
00:19:33,690 --> 00:19:34,020
Right?

295
00:19:34,200 --> 00:19:41,310
So just any any single character in this case that isn't a space will match.

296
00:19:42,090 --> 00:19:42,330
All right.

297
00:19:42,340 --> 00:19:48,030
So those are some of the opposite, as I call them, predefined character classes.

298
00:19:48,720 --> 00:19:52,710
And I think that's going to wrap up this lesson and I will see you in the next one.
