WEBVTT
1
00:00:00.600 --> 00:00:07.260
All right, so now we're going to look a little more at some other things that we might be able to do

2
00:00:07.410 --> 00:00:09.810
with this main class here.

3
00:00:09.870 --> 00:00:19.260
So there's a question that is running through my mind and that question is this this block of code here?

4
00:00:19.440 --> 00:00:20.970
Do I really need this here?

5
00:00:21.180 --> 00:00:23.520
That's that's the question that's running through my mind.

6
00:00:23.970 --> 00:00:30.210
And let me try to let you in on what's going through my head here as I'm kind of analyzing this code,

7
00:00:30.300 --> 00:00:30.750
by the way.

8
00:00:30.760 --> 00:00:37.590
So the act of writing code is an act of writing a bit of code and then doing some analysis on that code

9
00:00:37.590 --> 00:00:41.220
to ask yourself, first off, is it doing what it's supposed to do?

10
00:00:41.460 --> 00:00:42.420
And then is it?

11
00:00:42.600 --> 00:00:48.990
Is there room for improvement and then making gradual improvements to the code, which is one step that

12
00:00:48.990 --> 00:00:52.470
a lot of not so great developers seem to forget about?

13
00:00:52.590 --> 00:00:56.880
And understandably, sometimes sometimes we're under the gun just to get something that works at all.

14
00:00:56.880 --> 00:01:03.570
And it's hard to maybe take some time to actually make that code clean and maintainable and readable,

15
00:01:03.570 --> 00:01:06.120
and all of that, which takes a lot of effort.

16
00:01:06.630 --> 00:01:14.790
OK, so here's my thinking I need to kind of step back a little bit and ask myself, What is this class

17
00:01:14.790 --> 00:01:17.600
doing over all this main class?

18
00:01:17.610 --> 00:01:19.890
Not the whole program, but just this main class?

19
00:01:20.070 --> 00:01:23.700
What are its real main responsibilities, right?

20
00:01:24.120 --> 00:01:29.520
So we've got our data set here, which is a which is a big string, right?

21
00:01:29.910 --> 00:01:31.260
And we want to pass it.

22
00:01:31.830 --> 00:01:33.480
And the main thing we want to do.

23
00:01:34.500 --> 00:01:45.990
I suppose, is to determine the salaries for each of these employees and add those all up and then print

24
00:01:45.990 --> 00:01:46.500
that out.

25
00:01:46.710 --> 00:01:49.350
That's the main thing we want to do, right?

26
00:01:49.950 --> 00:01:55.590
So if you look at it from that super, super high level like, that's the main thing this class is trying

27
00:01:55.590 --> 00:02:04.020
to do is just to say, hey, for for all of these people here, add up their salaries and then print

28
00:02:04.020 --> 00:02:07.020
that out, if that's the main thing we're trying to do.

29
00:02:07.410 --> 00:02:09.810
Then you have to ask yourself some more questions.

30
00:02:10.620 --> 00:02:13.320
What code maybe doesn't belong here?

31
00:02:14.040 --> 00:02:23.010
So for example, now that we have a generic superclass that we can use to refer to all of these classes

32
00:02:23.010 --> 00:02:24.630
from within the main class?

33
00:02:24.900 --> 00:02:30.210
And the only method on this super class that we really even care about or need to know about is the

34
00:02:30.210 --> 00:02:31.890
get salary method.

35
00:02:32.640 --> 00:02:39.840
Do we even need to really be knowing in this main class that there's a subclass of employee called programmer

36
00:02:39.840 --> 00:02:41.700
and manager and analyst and CEO?

37
00:02:41.700 --> 00:02:44.190
Do we need to know that here?

38
00:02:44.910 --> 00:02:48.630
Is that necessary to be in this class?

39
00:02:49.140 --> 00:02:50.880
Obviously, we need the code right.

40
00:02:50.880 --> 00:02:55.950
It needs to happen somewhere like, Hey, if you have a role of programmer, then you're going to create

41
00:02:55.950 --> 00:02:56.460
a program.

42
00:02:56.470 --> 00:02:58.890
If you have a role, a manager, you're going to create a manager, et cetera, et cetera.

43
00:02:59.220 --> 00:03:00.510
This code needs to exist.

44
00:03:00.520 --> 00:03:01.740
I'm not questioning that.

45
00:03:01.980 --> 00:03:07.350
I'm questioning should it exist here and is there not a better place for it to live now?

46
00:03:07.920 --> 00:03:13.590
And I would argue that there is likely a better place for this code to live now.

47
00:03:14.070 --> 00:03:23.670
This main class is not enhanced in any way by having this level of knowledge of these different subtypes

48
00:03:24.000 --> 00:03:25.380
of the employee.

49
00:03:25.680 --> 00:03:32.370
And so then a question arises, OK, well, where might be a better place to put code like this?

50
00:03:33.000 --> 00:03:41.520
And I'm going to cut to the chase and say, Well, I might consider that this code might be better to

51
00:03:41.520 --> 00:03:48.870
live, possibly on the employee class itself, because the employee class is the super class of all

52
00:03:48.870 --> 00:03:50.250
of these subtypes.

53
00:03:50.820 --> 00:03:51.270
OK.

54
00:03:51.390 --> 00:03:57.420
So in a manner, it does know about these, these subtypes already sort of kind of right.

55
00:03:57.420 --> 00:03:58.200
Or at least it has.

56
00:03:58.380 --> 00:04:05.190
It has an actual relationship to them, whereas the main class has no real direct relationship in terms

57
00:04:05.190 --> 00:04:07.780
of function to any of these guys.

58
00:04:07.800 --> 00:04:13.770
It certainly has a relationship directly to employee to the extent that it knows that an employee can

59
00:04:13.770 --> 00:04:15.060
give it a salary.

60
00:04:15.270 --> 00:04:23.880
But these lower level subtypes are all about how the salary is is created, and that's none of the business

61
00:04:23.880 --> 00:04:25.140
of this main class.

62
00:04:25.140 --> 00:04:29.850
The main class couldn't care less how we get those salaries calculated.

63
00:04:30.060 --> 00:04:32.220
It just knows give me a salary.

64
00:04:32.670 --> 00:04:33.990
Do you follow my thinking here?

65
00:04:34.260 --> 00:04:40.950
And so we want to always be asking ourselves what is the most appropriate place for certain code to

66
00:04:40.950 --> 00:04:41.430
live?

67
00:04:41.430 --> 00:04:48.510
And how can we get to the point that any given class has as few responsibilities as possible and ideally

68
00:04:48.510 --> 00:04:50.370
just one responsibility?

69
00:04:50.580 --> 00:04:50.970
OK.

70
00:04:51.210 --> 00:05:00.420
So with that being said, what I propose that we try doing here is to implement a method that can take

71
00:05:00.420 --> 00:05:11.340
as an input a role and returns an employee of a specific type that the main class won't even care about.

72
00:05:12.030 --> 00:05:12.350
All right.

73
00:05:12.360 --> 00:05:19.530
So we're going to hide these details essentially somewhere else and just spit out an employee.

74
00:05:20.070 --> 00:05:23.490
And we're going to do that with a pattern called a factory method.

75
00:05:23.490 --> 00:05:26.280
And we've actually used factory methods already.

76
00:05:26.460 --> 00:05:30.810
So let me show you real quick an example of a factory method before we create one.

77
00:05:31.290 --> 00:05:39.150
So when we have done something like number, format, dot get currency instance.

78
00:05:40.190 --> 00:05:44.120
This get currency instance is a factory method.

79
00:05:44.360 --> 00:05:48.890
What it is is it's basically a method that's very similar to a constructor.

80
00:05:49.390 --> 00:05:57.650
OK, in that it returns an instance of something, but it does so with just a well named method.

81
00:05:57.920 --> 00:06:03.740
The method is static, which means that we didn't have to first create an instance of the number format

82
00:06:03.740 --> 00:06:05.010
to get to this method.

83
00:06:05.030 --> 00:06:05.930
It's a static method.

84
00:06:05.940 --> 00:06:08.450
In fact, I'll jump to it and we'll see that.

85
00:06:08.780 --> 00:06:09.630
Let's see.

86
00:06:09.650 --> 00:06:11.960
So, yeah, get currency instance.

87
00:06:12.200 --> 00:06:13.700
Public static final.

88
00:06:14.000 --> 00:06:14.490
OK.

89
00:06:14.510 --> 00:06:16.490
And it returns something of type.

90
00:06:16.490 --> 00:06:17.390
No format.

91
00:06:17.480 --> 00:06:19.880
Let's see what a number format actually is, in fact.

92
00:06:19.880 --> 00:06:20.660
Oh, look at that.

93
00:06:20.810 --> 00:06:23.590
No format is an abstract class.

94
00:06:23.600 --> 00:06:25.550
Hey, look at that.

95
00:06:26.480 --> 00:06:26.960
OK.

96
00:06:27.380 --> 00:06:28.790
It's an abstract class.

97
00:06:29.060 --> 00:06:30.260
Looks familiar, huh?

98
00:06:30.770 --> 00:06:31.150
All right.

99
00:06:31.160 --> 00:06:36.540
So we're going to implement our own factory method.

100
00:06:36.560 --> 00:06:42.470
Ours will take an input, though, and if you recall, actually the get currency instance has a version

101
00:06:42.470 --> 00:06:43.820
that takes an input to.

102
00:06:43.940 --> 00:06:50.360
We can pass in a low cal and then it will return a specific type of currency instance set up for that

103
00:06:50.360 --> 00:06:50.900
locale.

104
00:06:51.200 --> 00:06:51.460
All right.

105
00:06:51.470 --> 00:06:54.860
So I just wanted to show you that we've already made use of factory methods.

106
00:06:54.860 --> 00:06:56.840
We didn't write any, but we've used a few.

107
00:06:57.020 --> 00:06:59.660
And so now we're going to make one for ourselves.

108
00:06:59.690 --> 00:07:00.140
OK.

109
00:07:01.160 --> 00:07:01.460
All right.

110
00:07:01.490 --> 00:07:08.990
So I think the way I'm going to do this is to first go over here to the employee class, and I am going

111
00:07:08.990 --> 00:07:16.400
to go ahead and create or define my static method, my factory method here.

112
00:07:16.400 --> 00:07:21.530
So it's going to be public static final.

113
00:07:22.070 --> 00:07:31.580
It's going to return an employee and I'm going to call it create employee and it's going to take a string.

114
00:07:32.180 --> 00:07:36.140
And I don't know, I'm just going to call it employee text.

115
00:07:39.030 --> 00:07:39.480
All right.

116
00:07:39.510 --> 00:07:42.090
So there's the scaffolding for this method.

117
00:07:42.420 --> 00:07:45.870
Now it's currently in error because I'm not actually returning anything.

118
00:07:46.170 --> 00:07:55.470
I'm going to jump back over to the main class here and I'm going to just select all of this because

119
00:07:55.560 --> 00:07:58.350
that is all of what I want to replace.

120
00:07:59.130 --> 00:07:59.430
All right.

121
00:07:59.430 --> 00:08:00.780
So I'm going to copy that.

122
00:08:01.200 --> 00:08:06.600
I'm going to jump back over here to the employee class, and I'm going to just paste all of that right

123
00:08:06.600 --> 00:08:07.890
in like so.

124
00:08:08.400 --> 00:08:08.810
All right.

125
00:08:08.820 --> 00:08:13.800
So as you can see here, we've got the people matcher here in error.

126
00:08:13.830 --> 00:08:14.400
It's red.

127
00:08:14.400 --> 00:08:19.290
And if we hover over it, it says nine static filled people that cannot be referenced from a static

128
00:08:19.290 --> 00:08:19.790
context.

129
00:08:19.800 --> 00:08:25.860
So what it's saying is we already have a people match the declared up here as a field.

130
00:08:26.190 --> 00:08:34.200
However, this new create employee method can't utilize this field here, and the reason is because

131
00:08:34.200 --> 00:08:40.230
the Create employee method is static and the field we have up here is not static.

132
00:08:40.230 --> 00:08:48.750
And you hopefully will recall that static members and by no, I mean a method or a filled static members

133
00:08:48.750 --> 00:08:52.740
cannot directly interact with non static members.

134
00:08:52.890 --> 00:09:00.890
And the reason is because static members exist without an instance of the class being created.

135
00:09:00.900 --> 00:09:01.280
OK?

136
00:09:01.560 --> 00:09:07.950
But these non static members here can only exist when an instance of the class is created.

137
00:09:08.190 --> 00:09:16.170
So it's kind of like the the static method here exists before, during and after the creation of any

138
00:09:16.170 --> 00:09:17.760
class instances.

139
00:09:17.940 --> 00:09:20.090
So how can it refer?

140
00:09:20.100 --> 00:09:28.740
How can this static method refer to a field which itself will only exist when an instance of this class

141
00:09:28.740 --> 00:09:29.460
is created?

142
00:09:29.500 --> 00:09:29.820
Right?

143
00:09:29.850 --> 00:09:36.000
It transcends any of these non static fields, and therefore you can't refer back to them.

144
00:09:36.750 --> 00:09:37.120
All right.

145
00:09:37.140 --> 00:09:45.000
So you might think, well, maybe we just make this field static, but there's a problem there.

146
00:09:45.010 --> 00:09:47.460
In fact, I'll do it and we'll see.

147
00:09:48.630 --> 00:09:48.870
All right.

148
00:09:48.870 --> 00:09:52.500
So now we get an error that it might not have been initialized.

149
00:09:52.500 --> 00:09:55.680
That's not the real issue that we're that's the problem, though.

150
00:09:55.980 --> 00:10:03.000
So the real issue is that we use this people match down here in the constructor, OK?

151
00:10:03.420 --> 00:10:10.770
And in order to use it in the constructor, well, in order to create it in the constructor, we need

152
00:10:10.770 --> 00:10:16.740
to create the matter and tell it to match against some kind of text.

153
00:10:16.920 --> 00:10:20.710
That text will be an input to the constructor itself.

154
00:10:20.750 --> 00:10:25.170
OK, so in other words, in order to create this, people match, or in fact, I'm going to go ahead

155
00:10:25.170 --> 00:10:27.000
and just remove the static for a moment.

156
00:10:27.000 --> 00:10:32.880
While I'm explaining this in order to create the actual instance of this, people matter in a way that

157
00:10:32.880 --> 00:10:34.410
we need it here.

158
00:10:34.410 --> 00:10:43.500
We need this input of some text to do so and that text just as a quick, quick reminder that text would

159
00:10:43.500 --> 00:10:44.070
be.

160
00:10:45.300 --> 00:10:46.800
One of these lines.

161
00:10:46.830 --> 00:10:47.260
OK.

162
00:10:47.280 --> 00:10:50.820
Any one of these lines, that's the text that we're talking about.

163
00:10:51.390 --> 00:10:57.930
OK, so that text needs to be provided in order for us to create this matter and when we're using the

164
00:10:58.260 --> 00:11:01.680
or in the constructor, it's provided as input of the constructor.

165
00:11:01.710 --> 00:11:08.550
OK, now it is true that the input that we're passing down here to this create employee is effectively

166
00:11:08.550 --> 00:11:09.300
the same.

167
00:11:09.600 --> 00:11:16.140
But if we do a little analysis here, I think we can see that there's probably at least at this time,

168
00:11:16.560 --> 00:11:22.290
not a great way that I can see that we can share this matter.

169
00:11:22.320 --> 00:11:22.710
Right.

170
00:11:22.920 --> 00:11:30.060
So the problem is that the matter that we need to use here in the constructor can only be created at

171
00:11:30.060 --> 00:11:36.120
the time when we're running the constructor because we need this input here.

172
00:11:36.570 --> 00:11:37.090
OK.

173
00:11:37.110 --> 00:11:44.700
And that's a slightly different timing than when we are needing this matter here for the Create employee,

174
00:11:44.730 --> 00:11:51.360
even though when we do call a new programmer, we're going to be passing in this text and then creating

175
00:11:51.360 --> 00:11:52.060
that matter.

176
00:11:52.170 --> 00:11:57.320
But because this is static and this one isn't, the timing is just a little bit off here.

177
00:11:57.330 --> 00:12:05.640
So what I would propose to do, at least for now, is to unfortunately just recreate this matter locally

178
00:12:05.640 --> 00:12:08.340
inside of this create employee method.

179
00:12:08.550 --> 00:12:12.510
So which means that we're going to have a little bit of duplication, maybe like one line.

180
00:12:12.780 --> 00:12:13.140
All right.

181
00:12:13.590 --> 00:12:16.840
So let's see how we can do this.

182
00:12:16.860 --> 00:12:20.670
Now we've got this people pattern matcher here.

183
00:12:20.670 --> 00:12:24.030
I think this guy can be static.

184
00:12:24.330 --> 00:12:25.770
So let's see what that looks like.

185
00:12:25.800 --> 00:12:34.140
We create the people pattern and we make it static and then we'll make this regex static as well.

186
00:12:34.170 --> 00:12:34.680
All right.

187
00:12:35.280 --> 00:12:41.850
Now, technically, now that we've made this people pattern static, we really should refer to it via

188
00:12:41.850 --> 00:12:49.620
the fully qualified class name that is pretty standard approach, usually like that.

189
00:12:49.770 --> 00:12:57.690
And now what I'm inclined to do is to just copy this line and do the same thing down here.

190
00:12:58.620 --> 00:13:02.110
So we'll create a local people matter.

191
00:13:02.610 --> 00:13:04.140
OK, let's see.

192
00:13:06.630 --> 00:13:15.660
Like so and then for the matter, bit here for this input here, we'll just take this input right there.

193
00:13:18.340 --> 00:13:21.100
And I think that makes it all good.

194
00:13:21.340 --> 00:13:22.510
Just by doing that.

195
00:13:23.170 --> 00:13:26.890
OK, now one more issue, we need to actually return something.

196
00:13:27.100 --> 00:13:31.930
So I think we can just put a return statement right here.

197
00:13:32.590 --> 00:13:36.580
So now the switch comes in the People Match Support Group.

198
00:13:36.580 --> 00:13:44.080
The local People Match Support Group will find the role field of the input text.

199
00:13:44.620 --> 00:13:52.120
Let me let me jump over here and grab a line of text, and then I'm going to come back here and I'm

200
00:13:52.420 --> 00:13:57.940
going to just put a little example so that we know what we're even talking about.

201
00:13:57.940 --> 00:14:02.560
OK, so here's one example of the input that could come into this, OK?

202
00:14:02.590 --> 00:14:03.880
Of what that might look like.

203
00:14:03.880 --> 00:14:12.940
So this pattern matcher and all of these guys here, the rig stuff is going to pass this or pass a line

204
00:14:12.940 --> 00:14:20.320
of text that looks like this, and the People Match Report Group is going to find that role there.

205
00:14:20.560 --> 00:14:24.430
And that's what's going to match for the switch cases here.

206
00:14:24.460 --> 00:14:24.970
OK.

207
00:14:25.300 --> 00:14:30.820
So if it's an analyst, it's going to create a new instance of the analyst just like this.

208
00:14:31.420 --> 00:14:38.760
Now this employee text, interestingly, is going to be the same as the People Match Report Group.

209
00:14:38.770 --> 00:14:40.060
That's all the same thing.

210
00:14:40.570 --> 00:14:50.650
So I think we can just replace that number and just do a regular search and replace with a command are.

211
00:14:52.000 --> 00:15:00.070
And I'm going to tell it, find people, Matt Group, just in this method and replace that with employee

212
00:15:00.700 --> 00:15:01.420
text.

213
00:15:01.990 --> 00:15:06.580
And so then I will do them one at a time because I don't want to get overzealous and leave this method.

214
00:15:06.590 --> 00:15:09.100
I only want to replace these instances here.

215
00:15:09.110 --> 00:15:12.220
So replace, replace, replace and replace.

216
00:15:12.340 --> 00:15:12.580
All right.

217
00:15:12.590 --> 00:15:14.430
And that's all there was anyway.

218
00:15:14.610 --> 00:15:15.850
And then I will close that.

219
00:15:16.150 --> 00:15:23.650
All right now, we'll go back over to the main method here.

220
00:15:25.600 --> 00:15:31.690
And I think we don't need any of this anymore, so what I'm going to do, first of all, though, is

221
00:15:31.690 --> 00:15:34.000
make a new line here just to get it out of the way.

222
00:15:34.210 --> 00:15:37.480
And then I'm going to comment all of that.

223
00:15:38.590 --> 00:15:39.520
And now?

224
00:15:40.690 --> 00:15:48.580
We should be able to say employee does not create employee and then we can pass in.

225
00:15:50.180 --> 00:16:01.070
People Matcha Diet Group, and this method now should be capable of creating the appropriate instance

226
00:16:01.070 --> 00:16:08.900
of a programmer passing it into this variable here, and then we can do this little bit here and print

227
00:16:08.900 --> 00:16:09.500
everything out.

228
00:16:09.680 --> 00:16:11.090
So let's see if this works.

229
00:16:11.270 --> 00:16:12.290
Let's just run it.

230
00:16:14.880 --> 00:16:17.850
Oh, no, match found, OK.

231
00:16:18.210 --> 00:16:19.740
Let's see what we messed up.

232
00:16:20.580 --> 00:16:22.980
So let's see, we'll jump into.

233
00:16:23.130 --> 00:16:25.230
So again, this is a stack trace.

234
00:16:25.470 --> 00:16:34.500
And so going from top to bottom, what I typically will do is look for the top, most class that I wrote

235
00:16:34.500 --> 00:16:35.820
or that my team wrote.

236
00:16:36.210 --> 00:16:38.970
And so that wouldn't be this line or this line.

237
00:16:39.060 --> 00:16:40.950
It would be this line here.

238
00:16:40.950 --> 00:16:47.540
And then I'm going to click on this blue bit, which tells me Line Thirty One in the class employee

239
00:16:47.550 --> 00:16:48.180
that Java.

240
00:16:48.930 --> 00:16:49.950
All right.

241
00:16:50.520 --> 00:16:52.860
So it found no match.

242
00:16:53.670 --> 00:16:55.390
Now I want to show you something.

243
00:16:55.650 --> 00:17:00.270
There's a chance that I may already have shown you this in the testing module, but I'm just letting

244
00:17:00.270 --> 00:17:03.900
you know now I have not yet recorded what I'm about to show you in the testing module.

245
00:17:03.900 --> 00:17:05.460
I might go back and put that in there.

246
00:17:05.460 --> 00:17:09.630
I'm still kind of debating that, but I'm going to give you a little sneak preview if I hadn't already.

247
00:17:09.840 --> 00:17:14.940
I want to show you a little bit of the fact that we can debug code using the ADC.

248
00:17:14.940 --> 00:17:19.380
Now, I'm probably probably not going to take the time to teach you the techniques in detail, but I

249
00:17:19.380 --> 00:17:20.790
just want to show you that I can do this.

250
00:17:21.060 --> 00:17:28.770
So what I'm curious about is the fact that when the code got to this point, it wasn't able to find

251
00:17:28.770 --> 00:17:37.290
a match, which means the capture group called Roll that matched to this string here.

252
00:17:37.500 --> 00:17:38.730
And I want to know why.

253
00:17:39.240 --> 00:17:45.510
And so I'm curious what people Match Support Group would even return at this point.

254
00:17:46.050 --> 00:17:51.600
And maybe one of the easiest ways for me to do that are one of two things I could do a system that out

255
00:17:51.840 --> 00:17:55.800
and then print out the value of people in that group.

256
00:17:56.070 --> 00:18:03.120
Or I could debug this code, which is to run this code and make it make the thread stop at a certain

257
00:18:03.120 --> 00:18:06.960
line and then I can inspect all of the values of variables and things.

258
00:18:07.230 --> 00:18:08.370
So I'm going to debug this.

259
00:18:08.370 --> 00:18:13.620
And to do that, what I think I'm going to do is I'm going to put what's called a breakpoint right here

260
00:18:13.620 --> 00:18:18.150
on Line Thirty one by just clicking to the right of the line number.

261
00:18:18.270 --> 00:18:20.250
And that puts a little stop sign here.

262
00:18:20.250 --> 00:18:26.550
It's called a breakpoint, and then I can rerun the program in debug mode, which you've never seen

263
00:18:26.550 --> 00:18:27.450
me do before.

264
00:18:27.600 --> 00:18:31.530
And what that's going to cause the idea to do is to run the program.

265
00:18:31.530 --> 00:18:38.370
But when it gets to line thirty one, it's going to pause and it's going to let me freeze time in the

266
00:18:38.370 --> 00:18:43.230
computer and then inspect the values of variables and things.

267
00:18:43.230 --> 00:18:50.460
And then I can even have the thread continue to execute one line at a time at my will so I can tell

268
00:18:50.460 --> 00:18:55.170
it, OK, go to the next line and so it will go at my speed rather than computer speed.

269
00:18:55.200 --> 00:19:01.320
OK, now to run this, all I need to do, I'm going to jump back over to Main.

270
00:19:02.790 --> 00:19:07.830
And instead of doing a control shift, are to run like a normally would, I'm going to do a control

271
00:19:07.830 --> 00:19:09.270
shift D for debug.

272
00:19:12.110 --> 00:19:15.950
All right, and so it's already hit my breakpoint here.

273
00:19:16.100 --> 00:19:20.740
So it's online 31, and now I can kind of see what's going on here.

274
00:19:20.750 --> 00:19:22.310
So here's the people matter.

275
00:19:22.610 --> 00:19:24.380
There's my regular expression.

276
00:19:24.500 --> 00:19:26.330
Here's my employee text.

277
00:19:27.700 --> 00:19:31.090
All right, so let's see, so the people match the.

278
00:19:32.950 --> 00:19:36.640
So there's my regex to extract a role.

279
00:19:41.680 --> 00:19:43.720
And I already see my problem here.

280
00:19:43.930 --> 00:19:47.800
It's the same problem that I've made before, I'm going to stop my debugger.

281
00:19:48.040 --> 00:19:49.510
Do you see what my problem is?

282
00:19:50.080 --> 00:19:52.600
I want you to actually take a moment to look at this.

283
00:19:53.080 --> 00:19:56.650
It has to do with how the regular expression engine actually works.

284
00:19:56.890 --> 00:19:59.710
And you've seen me make this mistake already once before.

285
00:20:01.910 --> 00:20:04.760
All right, I'm going to tell you what it is, if you didn't already get it.

286
00:20:04.910 --> 00:20:14.330
So here I'm trying to extract a value from the role the named capture group called Roll.

287
00:20:14.660 --> 00:20:22.730
But the problem is I did not first call people match or dot find or matches.

288
00:20:23.180 --> 00:20:26.030
I need one of these two methods.

289
00:20:26.930 --> 00:20:32.420
Now, the way I think I'm going to actually do this is I'm going to select that, I'm going to cut that,

290
00:20:32.630 --> 00:20:38.840
then I'm going to select all of this and I'm going to surround it in.

291
00:20:38.840 --> 00:20:39.590
And if.

292
00:20:40.610 --> 00:20:51.410
Statement like so and then I'm going to paste that some saying if there is a match right, then go ahead

293
00:20:51.410 --> 00:20:53.000
and do the rest of this.

294
00:20:53.810 --> 00:20:55.730
Now that does present a problem.

295
00:20:55.910 --> 00:20:59.030
If there is not a match, what should it do?

296
00:20:59.960 --> 00:21:06.920
And that's actually a really good question in general, like what should happen if there is no match,

297
00:21:06.950 --> 00:21:07.310
right?

298
00:21:07.640 --> 00:21:11.720
So I'm going to provide an else block here.

299
00:21:12.780 --> 00:21:16.620
And for right now, I'm going to just return a null.

300
00:21:17.010 --> 00:21:21.690
All right, and if you noticed there was a little error there and it went away as soon as I implemented

301
00:21:21.690 --> 00:21:28.060
this alternative block here, this else block because my method has to return something.

302
00:21:28.080 --> 00:21:28.560
OK?

303
00:21:28.800 --> 00:21:35.220
And until I implemented this statement with the return null, Java and the I.D. could clearly see that

304
00:21:35.220 --> 00:21:40.890
there was a possibility that I would have an invalid method that was capable of not returning anything

305
00:21:40.890 --> 00:21:41.280
at all.

306
00:21:41.430 --> 00:21:42.980
And it wasn't going to let me do that.

307
00:21:42.990 --> 00:21:49.020
It wouldn't have even compiled the code if I had left it that way, so I had to return something.

308
00:21:49.200 --> 00:21:54.660
Now there are better things that I could do, but I haven't taught you those yet, or at least things

309
00:21:54.660 --> 00:21:55.770
that I think would be better.

310
00:21:55.920 --> 00:22:01.440
What I would prefer to do probably is to actually throw an exception, which is an error like basically

311
00:22:01.440 --> 00:22:07.410
say, hey, if the code can't handle any of these scenarios, including the default, by the way, which

312
00:22:07.410 --> 00:22:13.500
does return to null if it can't do any of these at all, then we got bigger problems and it should probably

313
00:22:13.500 --> 00:22:16.980
just blow up right, like intentionally make it blow up.

314
00:22:17.280 --> 00:22:21.900
But I haven't thought to that now, and I don't like introducing too many new things all at once.

315
00:22:22.020 --> 00:22:24.180
So for now, we're just going to return a null.

316
00:22:24.360 --> 00:22:24.860
All right.

317
00:22:24.870 --> 00:22:26.730
And that seems to have made that happy.

318
00:22:27.330 --> 00:22:34.110
And so now let's jump back over to the main class and run this again, not in debug mode, but just

319
00:22:34.110 --> 00:22:41.460
regular mode, because I'm fairly confident that was the issue and we got 8.6 million.

320
00:22:42.240 --> 00:22:42.840
Look at that.

321
00:22:42.870 --> 00:22:44.400
That's looking pretty good, huh?

322
00:22:44.730 --> 00:22:51.300
So I think we can now take these lines of code and nuke them, get rid of them.

323
00:22:52.080 --> 00:22:52.890
There we go.

324
00:22:53.430 --> 00:22:58.200
And so now this main class has gotten even smaller.

325
00:22:58.890 --> 00:23:03.210
Now I see a little more duplication that I'm not crazy about.

326
00:23:03.450 --> 00:23:04.140
Do you see it?

327
00:23:06.520 --> 00:23:16.450
We've got duplication with this business here because these lines now exist in the employee class also.

328
00:23:17.110 --> 00:23:26.470
Now we kind of need some version of some of this because that is also how we're able to loop over this

329
00:23:26.980 --> 00:23:28.450
text list here.

330
00:23:29.170 --> 00:23:34.840
So now I'm kind of wondering what could we do to minimize the duplication?

331
00:23:34.840 --> 00:23:38.950
And I can think of at least a couple of halfway decent things we could do.

332
00:23:39.160 --> 00:23:41.350
So first, let's see what we're actually using here.

333
00:23:41.350 --> 00:23:49.930
So we're using the people matcher that find this matter is being created off of.

334
00:23:51.040 --> 00:23:55.600
That text there, I think one thing we could do.

335
00:23:56.720 --> 00:24:00.890
At least is I think we don't need these two lines here.

336
00:24:01.310 --> 00:24:08.870
I think we could get this people pattern here from the employee class.

337
00:24:09.320 --> 00:24:11.060
So let me show you what I mean.

338
00:24:11.150 --> 00:24:16.940
If we jump over here to the employee class and jump up here, let's see.

339
00:24:17.900 --> 00:24:19.670
Here's our people pattern.

340
00:24:20.330 --> 00:24:23.660
It is currently protected, but it is static.

341
00:24:24.410 --> 00:24:27.050
I think if we make this guy public.

342
00:24:28.910 --> 00:24:29.810
Like so.

343
00:24:31.280 --> 00:24:34.010
Then we can jump back over to the main class.

344
00:24:35.040 --> 00:24:43.530
And I think I want to comment out these two lines here and now I want to refer to this guy.

345
00:24:44.630 --> 00:24:50.510
As employee dot people pattern just like that.

346
00:24:50.990 --> 00:24:52.130
Now one more thing.

347
00:24:52.640 --> 00:24:55.460
Typically static members.

348
00:24:56.440 --> 00:24:59.380
Are usually all capitalized.

349
00:24:59.830 --> 00:25:05.620
So let's see what that might look like if we do that shift f six.

350
00:25:05.920 --> 00:25:07.580
And I think what I'm going to do.

351
00:25:07.610 --> 00:25:08.290
Oh, look at that.

352
00:25:08.290 --> 00:25:15.200
The ID is even offering some suggestions and yeah, I think these look OK, people pat.

353
00:25:16.030 --> 00:25:18.070
So not that one people pat.

354
00:25:19.900 --> 00:25:20.740
There we go.

355
00:25:21.580 --> 00:25:25.120
And then if we jump over here, we'll see that that was changed here as well.

356
00:25:26.330 --> 00:25:31.250
And same thing here, we should probably rename these now that they are static members.

357
00:25:31.340 --> 00:25:31.850
Wow.

358
00:25:33.130 --> 00:25:35.090
Looked at all of those suggestions.

359
00:25:35.110 --> 00:25:38.530
I think we want this last, the second to last when people rejects.

360
00:25:38.830 --> 00:25:39.730
There we go.

361
00:25:40.000 --> 00:25:42.550
What else did we make static?

362
00:25:45.080 --> 00:25:46.910
That we had more static things than that.

363
00:25:46.940 --> 00:25:47.780
I guess that's it.

364
00:25:47.810 --> 00:25:48.680
OK, cool.

365
00:25:49.100 --> 00:25:49.580
All right.

366
00:25:50.000 --> 00:25:52.280
So we'll go back over here to main.

367
00:25:54.840 --> 00:26:00.510
And I don't see that anything broke, so I think we're going to get rid of those two lines.

368
00:26:01.350 --> 00:26:05.190
And now there's a little less duplication again.

369
00:26:05.550 --> 00:26:09.030
And let's just run the code again, make sure everything's good.

370
00:26:10.330 --> 00:26:10.530
Yeah.

371
00:26:11.080 --> 00:26:13.120
And everything's still looking good there.

372
00:26:14.110 --> 00:26:16.990
All right, so I think let's do one more thing now.

373
00:26:17.200 --> 00:26:23.140
Now I gave this to you as an exercise to do on your own if you wanted to, but now I'm inclined to do

374
00:26:23.140 --> 00:26:26.740
it with you, and that is, let's handle the case.

375
00:26:26.760 --> 00:26:29.770
In fact, here, let's jump back over to the employee class.

376
00:26:30.220 --> 00:26:38.410
Let's handle the case where the role doesn't match any of these, and currently we're handling that

377
00:26:38.410 --> 00:26:40.870
in a default, just returning a null.

378
00:26:41.320 --> 00:26:44.620
Let's go ahead and create one more subclass now.

379
00:26:45.070 --> 00:26:47.920
That's just like an empty implementation of this.

380
00:26:48.400 --> 00:26:48.850
OK.

381
00:26:49.240 --> 00:26:52.810
And you know what, while we're at it, I'll show you another way to create this.

382
00:26:53.230 --> 00:26:59.020
So in this case, this is what I'm considering to be almost kind of like a throw away implementation

383
00:26:59.020 --> 00:27:00.590
of an employee.

384
00:27:00.610 --> 00:27:01.040
OK.

385
00:27:01.270 --> 00:27:04.060
It's not meant to be used for real business logic.

386
00:27:04.070 --> 00:27:09.410
It's just here to satisfy this scenario to do better than just returning a null.

387
00:27:09.410 --> 00:27:13.330
Let's just kind of return a dummy empty kind of a kind of a one.

388
00:27:13.540 --> 00:27:21.910
So what we can consider doing here is defining this additional class inside of the employee class itself.

389
00:27:22.120 --> 00:27:25.390
And you haven't we haven't done this before, but we can do it.

390
00:27:25.600 --> 00:27:27.670
And so let's see here.

391
00:27:27.970 --> 00:27:29.770
Maybe I'll do it down here at the bottom.

392
00:27:30.190 --> 00:27:30.550
All right.

393
00:27:30.560 --> 00:27:31.210
So what?

394
00:27:31.210 --> 00:27:35.260
What we can do is we can define a class.

395
00:27:35.410 --> 00:27:37.030
Now we're going to define this.
