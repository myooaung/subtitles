WEBVTT
1
00:00:01.440 --> 00:00:01.930
All right.

2
00:00:01.950 --> 00:00:10.320
So now that we've seen what can go wrong when we try to do even simple, precise calculations with the

3
00:00:10.320 --> 00:00:18.510
primitive floating point numeric types such as float and double, you should be wondering how do we

4
00:00:18.510 --> 00:00:19.550
get around this?

5
00:00:19.560 --> 00:00:26.580
And thankfully, the Java gods have seen fit to bless us with a solution to this problem.

6
00:00:27.000 --> 00:00:32.250
So before I explain exhaustively how this solution works?

7
00:00:32.520 --> 00:00:39.540
Let me just introduce you to it by showing you how we can fix this problem that we just saw earlier

8
00:00:39.540 --> 00:00:46.290
where we tried to subtract one float or double from another float or double, and we got really weird

9
00:00:46.290 --> 00:00:46.920
results.

10
00:00:47.220 --> 00:00:49.740
So we'll do the same program again.

11
00:00:49.740 --> 00:00:55.080
In fact, we'll just do it in line here right afterwards, and we'll do a printout of this and then

12
00:00:55.080 --> 00:00:57.150
we'll do a printout with the other solution.

13
00:00:57.150 --> 00:01:05.880
So the solution is that Java gives us a class called Big Decimal, and it's called Big Decimal because

14
00:01:05.880 --> 00:01:09.870
it allows us to do decimal math with a whole lot of precision.

15
00:01:10.140 --> 00:01:11.910
Thus, the big part.

16
00:01:12.300 --> 00:01:15.840
So what this is, though, it's a class, it's not a primitive.

17
00:01:16.080 --> 00:01:21.870
So right now, with the end float double byte, all of these things, what we've been dealing with are

18
00:01:21.870 --> 00:01:22.980
called primitives.

19
00:01:23.340 --> 00:01:33.180
They are fundamental data types built into Java, which are not classes, OK, but Big Decimal is an

20
00:01:33.180 --> 00:01:34.380
actual class.

21
00:01:34.560 --> 00:01:39.630
And so we have to create instances of it using the new operator.

22
00:01:39.630 --> 00:01:45.690
Although we have seen one or two classes that we do not use the new operator for instantiating, such

23
00:01:45.690 --> 00:01:49.650
as with the regular expressions, pattern and matter.

24
00:01:49.710 --> 00:01:53.880
But with this one, it would go back to the normal way of just using the new operator.

25
00:01:53.910 --> 00:01:56.430
So let's let's take a look at how to use this.

26
00:01:56.970 --> 00:02:04.300
So we'll create a couple of additional variables, but now they're data type will not be float or double.

27
00:02:04.320 --> 00:02:06.900
It will be big decimal.

28
00:02:06.900 --> 00:02:10.620
And I don't know if you saw that I did it kind of instinctively.

29
00:02:10.620 --> 00:02:16.560
But while the ADP was helping me out there, I hit enter, which then caused the big decimal package

30
00:02:16.560 --> 00:02:17.190
to be imported.

31
00:02:17.200 --> 00:02:23.640
Let me do that again, because some of you won't intuitively do it that way and you'll you'll have problems.

32
00:02:24.210 --> 00:02:31.560
So if you type out big decimal all the way, which you shouldn't do, you can just type B, you're Big

33
00:02:31.560 --> 00:02:35.340
D or whatever, and then just choose it from this list here.

34
00:02:35.430 --> 00:02:40.020
So if you get to this point that you're seeing the list, then you can just selected or hit enter,

35
00:02:40.170 --> 00:02:47.820
and that will cause it to be imported like so now my line one is Java Dot Math that big decimal?

36
00:02:48.480 --> 00:02:50.010
OK, Big Decimal.

37
00:02:50.010 --> 00:02:54.240
And I'll call this number a because I already used number one on.

38
00:02:54.240 --> 00:02:57.890
I guess I could do num num three, I suppose num three.

39
00:02:57.900 --> 00:02:58.680
Yeah, that's fine.

40
00:02:59.160 --> 00:02:59.520
All right.

41
00:02:59.940 --> 00:03:09.180
New Big Decimal Now Big Decimal has a constructor that takes a lot of different data types.

42
00:03:09.450 --> 00:03:18.150
However, let me emphasize the most important and preferred way to instantiate a big decimal is actually

43
00:03:18.150 --> 00:03:19.860
by using a string.

44
00:03:20.070 --> 00:03:22.020
Let me show you what that looks like.

45
00:03:22.260 --> 00:03:27.060
So up here on Line seven, we created a float with a value of two point one five.

46
00:03:27.240 --> 00:03:29.370
Let's just do the same thing with the big decimal.

47
00:03:29.370 --> 00:03:32.820
However, the way to do that is to just make a string.

48
00:03:33.420 --> 00:03:37.170
Two point one five and then close that and semicolon.

49
00:03:37.320 --> 00:03:45.540
Now that might look a little weird to you that we are intentionally specifying a number inside of a

50
00:03:45.540 --> 00:03:46.170
string.

51
00:03:46.740 --> 00:03:56.820
But the reason we're doing this is because we want Big Decimal to be 100 percent accurate in representing

52
00:03:56.820 --> 00:03:58.920
whatever it is that we are specifying.

53
00:03:59.370 --> 00:04:06.450
And if we were to use a primitive numeric type such as float or double, which we could do.

54
00:04:06.570 --> 00:04:13.500
The problem is that as soon as we use that float or double type, we introduced the rounding issues

55
00:04:13.500 --> 00:04:20.400
or we have the potential to introduce the rounding issues because the computer has to immediately take

56
00:04:20.400 --> 00:04:27.400
that two point one five and put it into a float or a double or whatever.

57
00:04:27.420 --> 00:04:27.780
Right.

58
00:04:27.900 --> 00:04:34.380
And we've already seen how the rounding issues can occur with that because of the binary representation

59
00:04:34.380 --> 00:04:35.460
of the bits and all.

60
00:04:35.820 --> 00:04:41.730
So to avoid that completely, the best thing to do is to simply use a string.

61
00:04:41.730 --> 00:04:50.010
And then you are 100 percent telling the decimal exactly what you meant and not allowing some other

62
00:04:50.010 --> 00:04:52.830
data type to interpret it.

63
00:04:53.160 --> 00:04:53.490
All right.

64
00:04:53.640 --> 00:04:56.650
So there's a two point one five, and then we'll make another one.

65
00:04:57.180 --> 00:04:58.650
We'll call this number four.

66
00:04:59.010 --> 00:04:59.970
Same deal.

67
00:05:00.620 --> 00:05:02.960
And this one will be a one point one zero.

68
00:05:03.800 --> 00:05:04.130
All right.

69
00:05:04.160 --> 00:05:08.150
Oh, sorry, and I want this print line to be up here.

70
00:05:08.390 --> 00:05:16.070
Did you see how I move that with the option shift up arrow or alt shift up arrow for Windows and Linux?

71
00:05:17.000 --> 00:05:17.480
All right.

72
00:05:17.660 --> 00:05:23.470
So now I will do a shift in here to make a new line and I will create another System.out.println line.

73
00:05:23.570 --> 00:05:31.160
Now I'll do the same math that I did before, however, because these two variables NUM three and four

74
00:05:31.160 --> 00:05:32.420
are not primitives.

75
00:05:32.420 --> 00:05:37.940
I cannot do something like, what did I do before NUM three minus NUM four?

76
00:05:37.940 --> 00:05:38.840
I can't do that.

77
00:05:39.020 --> 00:05:40.970
You see that I get an error there.

78
00:05:41.300 --> 00:05:48.560
These math operators can only operate ultimately on primitives, and so they can't work with big decimal.

79
00:05:49.130 --> 00:05:57.410
However, since Big Decimal is a class, it has methods on it and it has methods to handle all of the

80
00:05:57.410 --> 00:06:00.710
typical mass operations that we would want.

81
00:06:01.010 --> 00:06:11.300
So instead of using the minus sign operator, we can actually use a method on the decimal class, such

82
00:06:11.300 --> 00:06:14.750
as subtract, just like so.

83
00:06:15.140 --> 00:06:21.180
And then the input for this method will be our other value in this case.

84
00:06:21.200 --> 00:06:27.680
NUM four No decides to put another parentheses there to close the subtract method and then the last

85
00:06:27.680 --> 00:06:30.830
parentheses, which was to close the print line.

86
00:06:31.340 --> 00:06:36.800
All right, so now let's run this and see what we get, so we'll we'll print out the old one with float

87
00:06:36.800 --> 00:06:38.570
and then the new one with big decimal.

88
00:06:38.900 --> 00:06:39.170
All right.

89
00:06:39.170 --> 00:06:45.710
So there's the old one, which was one point zero five zero zero zero zero zero one, and now we get

90
00:06:45.710 --> 00:06:48.980
a perfect one point zero five with big decimal.

91
00:06:49.340 --> 00:06:55.910
So the moral of the story is any time you need to do absolutely any money calculations, you have to

92
00:06:55.910 --> 00:06:56.720
use big decimal.

93
00:06:56.750 --> 00:06:57.460
End of story.

94
00:06:57.470 --> 00:06:59.090
Don't even don't even think about it.

95
00:06:59.210 --> 00:06:59.630
OK.

96
00:07:00.140 --> 00:07:05.870
And then for other types of calculations such as scientific and engineering, depending on the level

97
00:07:05.900 --> 00:07:13.160
of precision or accuracy you require, you may strongly want to consider using big decimal there.

98
00:07:13.490 --> 00:07:21.730
Now, you may be wondering well, since float and double have been shown to give strange or erroneous,

99
00:07:21.750 --> 00:07:22.730
they're not really strange.

100
00:07:22.730 --> 00:07:29.960
They're predictable but unintended results, depending on what calculations you're asking them to do.

101
00:07:30.350 --> 00:07:32.360
Why bother using those at all?

102
00:07:32.510 --> 00:07:33.770
And that's a great question.

103
00:07:34.130 --> 00:07:43.520
The reason why you may want to prefer using float double and all of the primitive number types in general

104
00:07:43.520 --> 00:07:45.950
is because they are blazingly fast.

105
00:07:46.040 --> 00:07:52.850
There is a cost to having the level of accuracy that we get with Big Decimal, and by the way, Big

106
00:07:52.850 --> 00:08:01.790
Decimal has a cousin called Big Integer, which is just a huge integer like even bigger than the long

107
00:08:01.910 --> 00:08:03.680
that we already have seen.

108
00:08:04.070 --> 00:08:12.470
So big decimal and big integer store their data a little differently, and they go through a few operations

109
00:08:12.590 --> 00:08:13.490
to do so.

110
00:08:13.670 --> 00:08:22.790
And they are capable of growing to be as big as you may need them to be to support whatever values you're

111
00:08:22.790 --> 00:08:24.500
trying to calculate on.

112
00:08:24.890 --> 00:08:27.590
That comes at a fairly significant cost, though.

113
00:08:27.860 --> 00:08:36.470
So by default, you should prefer to use the primitive number types when you know you can get away with

114
00:08:36.470 --> 00:08:36.710
it.

115
00:08:36.920 --> 00:08:37.430
OK.

116
00:08:37.820 --> 00:08:45.440
It is only when you absolutely must have the high degree of accuracy, such as with financial calculations

117
00:08:45.650 --> 00:08:50.030
that you must switch to using big decimal or big integer.

118
00:08:50.630 --> 00:08:57.110
OK, so in the next lesson, we'll start looking at more of what you can actually do with big decimal.

119
00:08:57.230 --> 00:09:04.850
It has a lot of similar operations in the form of methods on it that the math class has.

120
00:09:05.000 --> 00:09:08.930
And so we'll just take a look at how to use it and we'll see in the next one.
