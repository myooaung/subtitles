1
00:00:00,450 --> 00:00:07,920
All right, so in this next lesson, we're going to learn about one of the most fundamental ways of

2
00:00:07,920 --> 00:00:13,170
controlling flow, and that is with something called an if then statement.

3
00:00:13,680 --> 00:00:22,020
So if then statements allow us to test for whether or not something is true or false and if it is true,

4
00:00:22,020 --> 00:00:24,720
then we will execute some code.

5
00:00:24,840 --> 00:00:29,610
And if it is not true, then we will execute a different block of code.

6
00:00:29,640 --> 00:00:34,530
Okay, so if true, we execute one block, if not true, we execute a different block.

7
00:00:34,770 --> 00:00:39,010
And this gives us the ability to kind of test things and figure out stuff.

8
00:00:39,030 --> 00:00:39,480
OK.

9
00:00:39,780 --> 00:00:46,680
And this really is kind of at the heart of program logic, right, where we actually start to kind of

10
00:00:46,710 --> 00:00:51,630
make our programs seem like they're thinking, OK, so let's try this out.

11
00:00:51,630 --> 00:00:53,820
And to do so, we will.

12
00:00:54,240 --> 00:00:57,570
Let me see here first, let me open up my project view here.

13
00:00:57,930 --> 00:01:01,130
And it doesn't really matter at this point what project you're in.

14
00:01:01,140 --> 00:01:02,930
We're just going to make a new class.

15
00:01:02,940 --> 00:01:10,800
So I'm in the people project, though if you care and I'm going to right click on the source folder

16
00:01:10,800 --> 00:01:15,330
as our see and I'm going to create a new Java class.

17
00:01:16,080 --> 00:01:19,770
So I think what we're going to do here is we're going to make a little bit of a guessing game.

18
00:01:19,860 --> 00:01:20,340
OK.

19
00:01:20,670 --> 00:01:25,780
And so I'm going to call this class guess.

20
00:01:25,800 --> 00:01:27,930
I guess it gets it.

21
00:01:28,650 --> 00:01:29,070
All right.

22
00:01:30,330 --> 00:01:30,690
All right.

23
00:01:30,700 --> 00:01:35,100
So here's my new class, and then I'm going to close the project view there.

24
00:01:35,130 --> 00:01:35,880
All right.

25
00:01:36,300 --> 00:01:42,090
Let's make a new line here, and let's just start off with our standard public static void.

26
00:01:42,090 --> 00:01:45,120
Main method PSV enter.

27
00:01:46,110 --> 00:01:47,990
And here's what I'm thinking.

28
00:01:48,000 --> 00:01:57,090
So let's make a very, very, very simple program that will first generate a random number.

29
00:01:57,270 --> 00:01:57,780
OK?

30
00:01:58,080 --> 00:01:59,790
Just a simple random number.

31
00:01:59,790 --> 00:02:08,670
And maybe we'll keep the range pretty, pretty small, and then we will test whether or not that number

32
00:02:08,670 --> 00:02:10,040
is, I don't know.

33
00:02:10,050 --> 00:02:10,590
Three.

34
00:02:11,010 --> 00:02:11,460
OK.

35
00:02:11,730 --> 00:02:16,200
And if it is three, then we will print some message.

36
00:02:16,590 --> 00:02:17,040
OK.

37
00:02:17,550 --> 00:02:19,330
So let's just start with that.

38
00:02:19,350 --> 00:02:24,750
So, so first off, let's decide what the range of random numbers will be.

39
00:02:24,780 --> 00:02:30,400
Maybe, for starters, let's keep the range between one and three inclusive.

40
00:02:30,420 --> 00:02:34,680
OK, so the number could be one, two or three.

41
00:02:34,890 --> 00:02:35,280
OK.

42
00:02:35,610 --> 00:02:37,560
So I'm going to give you a quick challenge.

43
00:02:37,650 --> 00:02:39,490
Can you think of how to do that?

44
00:02:39,510 --> 00:02:47,430
How can you generate a number and store it in a variable and the number needs to be one, two or three?

45
00:02:47,880 --> 00:02:50,550
Go ahead and take a moment and see if you can think of how to do that.

46
00:02:50,550 --> 00:02:53,400
And then unpaused the video when you think you've got it.

47
00:02:54,150 --> 00:02:54,610
All right.

48
00:02:54,630 --> 00:02:56,460
So hopefully you were able to do that.

49
00:02:56,520 --> 00:02:57,810
Now let me work it out.

50
00:02:58,410 --> 00:03:02,490
So we've learned a few ways to generate a random number.

51
00:03:03,270 --> 00:03:09,630
Actually, I think I'm going to use the Java date util random because it's a better implementation of

52
00:03:09,630 --> 00:03:10,110
random.

53
00:03:10,110 --> 00:03:16,350
But if you chose to use math at random, that's fine too, if you were able to get that to work.

54
00:03:16,440 --> 00:03:16,820
All right.

55
00:03:16,830 --> 00:03:18,480
So let's see here.

56
00:03:18,480 --> 00:03:28,650
So I know that we're going to end up with an integer and I'm going to just call it NUM, and then we're

57
00:03:28,650 --> 00:03:30,990
going to need a new random number.

58
00:03:31,200 --> 00:03:37,200
So I'm going to do new random and I'm not going to specify a seed.

59
00:03:37,320 --> 00:03:44,160
Now I'm probably doing this slightly differently than what I originally taught because I I don't think

60
00:03:44,160 --> 00:03:47,160
I'm going to capture this random object I'm creating.

61
00:03:47,160 --> 00:03:48,690
I'm just going to use it in line.

62
00:03:48,900 --> 00:03:50,280
So you'll see what I mean here.

63
00:03:50,430 --> 00:03:59,730
So instead of like storing this random object in a variable of type random and then using it, I'm just

64
00:03:59,730 --> 00:04:05,520
going to create it in line and then hit period here and then use it right away.

65
00:04:05,520 --> 00:04:11,020
And in so doing, I won't ever have the random object to go back to.

66
00:04:11,040 --> 00:04:16,650
OK, so I will lose the random object after I have gotten a random number and the reason I'm doing it

67
00:04:16,650 --> 00:04:18,960
that way is partially out of laziness.

68
00:04:19,170 --> 00:04:26,640
And then secondly, because I don't anticipate needing to use this random object again in this program

69
00:04:26,640 --> 00:04:27,420
for right now.

70
00:04:28,020 --> 00:04:28,380
All right.

71
00:04:28,420 --> 00:04:35,160
Let's see and am going to give it an upper bound someone to use the second version of the next entry

72
00:04:35,310 --> 00:04:35,970
method.

73
00:04:36,420 --> 00:04:41,160
Like so, and the upper bound I will give it will be three.

74
00:04:42,200 --> 00:04:44,690
Now, I think we need to remember something here.

75
00:04:45,230 --> 00:04:54,020
If I go look at the Java Dock for the next and method, I am reminded that this method will generate

76
00:04:54,020 --> 00:05:01,130
a number between zero inclusive, which means zero is one of the values that it's capable of returning

77
00:05:01,550 --> 00:05:08,960
between zero and whatever the upper bound number that I supply exclusive, which means it will never

78
00:05:08,960 --> 00:05:13,070
actually return the number that I'm specifying for the upper bound.

79
00:05:13,070 --> 00:05:16,830
It will go up to that number, but won't include that number.

80
00:05:16,850 --> 00:05:17,270
OK.

81
00:05:17,450 --> 00:05:23,240
So in this case, that would mean I could get numbers between zero and two, so zero, one and two.

82
00:05:23,630 --> 00:05:31,640
Now my criteria for this program were that I want to generate numbers one, two or three, not zero

83
00:05:31,640 --> 00:05:32,420
one in two.

84
00:05:32,840 --> 00:05:42,440
So can you think of what I can do to ensure that I always get one, two or three and not zero, one

85
00:05:42,440 --> 00:05:43,130
or two?

86
00:05:43,340 --> 00:05:45,320
Why don't you take a moment to think about that?

87
00:05:45,650 --> 00:05:48,800
Pause the video and then unpause when you think you've got it.

88
00:05:49,730 --> 00:05:50,180
OK.

89
00:05:50,270 --> 00:05:59,360
So what I would do, I think for that scenario is to simply add one like so.

90
00:06:00,790 --> 00:06:12,100
Because I now know that all of this is capable of generating a number of zero, one or two, it will

91
00:06:12,100 --> 00:06:18,460
never give me a three because the documentation says that it will never include the number I'm specifying,

92
00:06:18,460 --> 00:06:19,600
therefore the upper bound.

93
00:06:20,020 --> 00:06:22,690
So by default, this would give me zero, one or two.

94
00:06:22,900 --> 00:06:31,360
So then all I need to do is just kind of shift that range of zero, one or two over by one to one two

95
00:06:31,360 --> 00:06:31,900
or three.

96
00:06:32,050 --> 00:06:34,030
And to do that, I just had one right.

97
00:06:34,810 --> 00:06:41,740
I want to point out that is some of the thinking that you need to be able to do sometimes as a programmer,

98
00:06:41,740 --> 00:06:42,040
right?

99
00:06:42,050 --> 00:06:48,100
You need to be able to see those patterns and see, OK, I've got a thing that gives me data that looks

100
00:06:48,100 --> 00:06:49,360
like this.

101
00:06:49,810 --> 00:06:52,990
I need data that looks like this.

102
00:06:53,380 --> 00:06:58,480
How can I transform this to this right from this to that?

103
00:06:58,780 --> 00:07:02,660
And so in this case, zero one two, you want one two three.

104
00:07:02,680 --> 00:07:05,470
So mathematically, OK, everything's off by one.

105
00:07:05,480 --> 00:07:07,300
So then just add one, OK?

106
00:07:07,390 --> 00:07:12,730
In this particular case, it's a simple thing, but it's that type of thinking that you need to be able

107
00:07:12,730 --> 00:07:14,500
to do from time to time.

108
00:07:15,460 --> 00:07:15,890
All right.

109
00:07:15,910 --> 00:07:18,310
So hopefully that gives us what we want.

110
00:07:18,760 --> 00:07:26,320
And so now we can make sure that that actually is going to do what we want by simply printing it out.

111
00:07:26,740 --> 00:07:30,760
And I'm going to do that with a system out that print line.

112
00:07:30,940 --> 00:07:34,210
So we'll print out that number, the generated random number.

113
00:07:34,420 --> 00:07:37,960
You know, actually a better name for this variable would be random number.

114
00:07:37,970 --> 00:07:44,410
So I'm going to rename this sentiment to do that by using a refactoring on Mac Shift F six and on windows

115
00:07:44,410 --> 00:07:45,460
to shift F6.

116
00:07:45,670 --> 00:07:48,970
So I'm going to call this random number.

117
00:07:50,020 --> 00:07:57,280
And because I use the rename function of the ADP, it renamed that variable everywhere where I was using

118
00:07:57,280 --> 00:07:59,050
it on both lines in this case.

119
00:07:59,470 --> 00:07:59,860
All right.

120
00:08:00,400 --> 00:08:06,820
So now we're ready to utilize a new programming construct that I have not.

121
00:08:07,000 --> 00:08:12,160
Up until now really taught and that is the use of the if statement.

122
00:08:12,580 --> 00:08:16,990
So let me go ahead and just type this out and then I'll come back and explain it to the extent that

123
00:08:16,990 --> 00:08:18,490
it needs much explanation.

124
00:08:18,490 --> 00:08:25,210
OK, so to use the if statement, it's all lowercase the word if followed by parentheses.

125
00:08:25,570 --> 00:08:31,810
Notice that when I type one parentheses, the left parentheses, the ADP automatically gives me the

126
00:08:31,810 --> 00:08:35,710
right parentheses because that's the only legitimate way to use that.

127
00:08:35,710 --> 00:08:37,510
And then it puts the cursor right in the middle.

128
00:08:37,840 --> 00:08:45,190
So the point of what we want to do with this if statement here is we want to test if the random number

129
00:08:45,190 --> 00:08:47,910
equals some number that we're looking for.

130
00:08:47,920 --> 00:08:51,640
And I think I specified we want to see if it's three.

131
00:08:51,870 --> 00:08:54,730
And I'm just randomly picking that number.

132
00:08:54,730 --> 00:08:58,810
I could make it anything and you can choose to make yours whatever you want, although it should be

133
00:08:58,810 --> 00:09:01,000
in the range of one, two or three, ideally.

134
00:09:01,120 --> 00:09:11,300
So we can say something like if random number equals, do you remember we learned this equals equals?

135
00:09:11,320 --> 00:09:13,570
Operator That is the equals operator.

136
00:09:13,720 --> 00:09:18,760
That's how we can test it in this case, if one number is equal to another number, right?

137
00:09:19,150 --> 00:09:25,340
If random NUM equals three, then.

138
00:09:25,570 --> 00:09:31,450
Now the way we use the if statement is typically we will use a curly brace.

139
00:09:31,720 --> 00:09:39,250
And when I type that curly brace either out loud or in my head, I am always thinking then because that's

140
00:09:39,250 --> 00:09:40,990
what this essentially means.

141
00:09:40,990 --> 00:09:48,280
If random NUM equals three, then do something OK and that do something part is what we're about to

142
00:09:48,280 --> 00:09:48,850
type next.

143
00:09:48,850 --> 00:09:55,090
So as soon as I hit return after having typed that left curly brace and be careful, that is a curly

144
00:09:55,090 --> 00:10:03,010
brace, same brace that we use when we're creating a method or a class, OK, which just tells Java

145
00:10:03,010 --> 00:10:07,030
that here comes a block of code, so we'll hit return.

146
00:10:07,570 --> 00:10:08,050
All right.

147
00:10:08,080 --> 00:10:11,450
And now I'm set up to type a block of code.

148
00:10:11,470 --> 00:10:15,840
So this is where I typed the code that I want to have executed.

149
00:10:15,850 --> 00:10:21,220
If this thing here is true, OK, or evaluates to being true.

150
00:10:21,640 --> 00:10:22,070
All right.

151
00:10:22,270 --> 00:10:29,620
So in this case, if that number is three, I'm going to print out a message using system out that print

152
00:10:29,620 --> 00:10:30,110
line.

153
00:10:30,130 --> 00:10:34,310
Let's print out a message saying, You got it.

154
00:10:34,510 --> 00:10:34,990
OK.

155
00:10:35,800 --> 00:10:36,580
And that's it.

156
00:10:36,970 --> 00:10:40,450
I think that's all we're going to do with this program at this moment.

157
00:10:40,540 --> 00:10:41,020
All right.

158
00:10:41,110 --> 00:10:45,160
So now all we need to do is run it.

159
00:10:45,490 --> 00:10:46,620
So let's try this out.

160
00:10:46,630 --> 00:10:49,750
I'll just click here and run.

161
00:10:51,190 --> 00:10:52,080
OK.

162
00:10:52,900 --> 00:10:59,890
Well, looks like we did get it, apparently, because here's the random number that was actually generated,

163
00:10:59,890 --> 00:11:00,520
by the way.

164
00:11:01,060 --> 00:11:05,620
Let's let's make this line six a little more informative, shall we?

165
00:11:05,950 --> 00:11:09,940
And one way we can do that is let's use a formatted string.

166
00:11:09,940 --> 00:11:17,140
So instead of using the print line method, let's use the print f method and then we can use a string

167
00:11:18,310 --> 00:11:23,530
like so and say generated number is.

168
00:11:24,280 --> 00:11:29,680
And then we can use a percent d meaning print a decimal number.

169
00:11:29,920 --> 00:11:33,430
OK, and then over here is the actual number.

170
00:11:33,610 --> 00:11:37,360
Do you all remember we learned a little bit about the print statement.

171
00:11:37,720 --> 00:11:41,080
We've actually seen it now a few times in the numbers chapter.

172
00:11:41,090 --> 00:11:46,390
We even learned how to use print to format numbers in really cool ways.

173
00:11:46,510 --> 00:11:48,610
Here, we're not doing all the fancy formatting, though.

174
00:11:48,610 --> 00:11:54,670
We could do some type of formatting, but we're using this just as a placeholder so that we can generate

175
00:11:54,670 --> 00:11:56,890
a nice, you know, message there.

176
00:11:57,460 --> 00:11:57,820
All right.

177
00:11:58,030 --> 00:11:59,520
So let's run this again.

178
00:11:59,530 --> 00:12:01,180
This time, I'll do it from the keyboard.

179
00:12:03,370 --> 00:12:08,870
OK, so this time the generated number was one, and therefore it did not print.

180
00:12:08,890 --> 00:12:09,730
You got it.

181
00:12:09,850 --> 00:12:11,320
So do you, do you get it?

182
00:12:11,590 --> 00:12:13,930
Do you see how the if statement works right?

183
00:12:13,930 --> 00:12:15,260
It should be pretty straightforward.

184
00:12:15,280 --> 00:12:18,130
So in this case, random number was one.

185
00:12:18,430 --> 00:12:25,420
One is not equal to three and therefore Line nine did not execute.

186
00:12:25,660 --> 00:12:30,940
So the thread starts at the beginning of the main method here.

187
00:12:30,970 --> 00:12:38,560
It creates it request to have a random object created with the new random OK, which actually does jump

188
00:12:38,560 --> 00:12:40,420
into the constructor, by the way.

189
00:12:40,420 --> 00:12:41,410
I'm not going to.

190
00:12:41,590 --> 00:12:45,310
I wasn't being very explicit about that, but it does actually jump into the constructor, which is

191
00:12:45,310 --> 00:12:51,340
effectively a method that and then the constructor, you can kind of think of it as returning with a

192
00:12:51,340 --> 00:12:52,780
new random object.

193
00:12:53,230 --> 00:13:02,080
Then it jumps into the next into method, passing in the number three, and then it returns with a randomly

194
00:13:02,080 --> 00:13:05,830
generated number between zero and two.

195
00:13:06,190 --> 00:13:10,590
Then whatever that number was, it gets a one added to it.

196
00:13:10,810 --> 00:13:13,330
Then that gets stored in this variable.

197
00:13:13,630 --> 00:13:23,740
Then it calls the print method of the out object of the system class and passes in all of this and that

198
00:13:23,740 --> 00:13:26,770
causes all of this to be printed on the console.

199
00:13:26,890 --> 00:13:29,410
That's what this area is really called the console.

200
00:13:29,650 --> 00:13:37,900
Then it jumps down here to this if statement and it evaluates it, saying if in this case, one equals

201
00:13:37,900 --> 00:13:39,800
three, which it does not.

202
00:13:39,850 --> 00:13:47,320
So this evaluates to a Boolean OK, and that boolean in this particular execution of the program turned

203
00:13:47,320 --> 00:13:48,400
out to be false.

204
00:13:48,430 --> 00:13:50,370
OK, so let me let me point that out.

205
00:13:50,380 --> 00:13:56,740
The if statement at the end of the day, all it's going to do is if whatever is inside of the parentheses

206
00:13:56,740 --> 00:14:03,910
evaluates to a Boolean true, then it executes whatever is then in between these curly braces.

207
00:14:04,150 --> 00:14:12,310
If it evaluates to false, which is what happened this time, then the thread skips right over.

208
00:14:13,270 --> 00:14:20,770
All of this and jumps to the very next line of execution, which in this case, that is the end of the

209
00:14:20,770 --> 00:14:25,990
program, and so the next thing we see here is process finished with exit code zero.

210
00:14:26,230 --> 00:14:28,330
And this just means I'm done.

211
00:14:28,660 --> 00:14:31,630
And there was nothing eventful to come out of this.

212
00:14:31,900 --> 00:14:35,110
OK, so that is the end of the program.

213
00:14:35,260 --> 00:14:35,470
All right.

214
00:14:35,560 --> 00:14:41,380
So let's run it a few more times and and see, you know what happens here if we run it a few times in

215
00:14:41,380 --> 00:14:41,650
a row?

216
00:14:41,660 --> 00:14:44,470
So the first time we got to three, the next time we got a one.

217
00:14:44,740 --> 00:14:45,910
Let's see where we get this time.

218
00:14:46,390 --> 00:14:54,890
OK, another one, a two, a two, a two.

219
00:14:54,910 --> 00:14:57,070
I'm going to keep going until we get one more three.

220
00:14:57,940 --> 00:14:58,870
Another two.

221
00:15:00,340 --> 00:15:01,330
OK, there we go.

222
00:15:01,420 --> 00:15:02,320
So we got one more.

223
00:15:02,320 --> 00:15:02,770
Three.

224
00:15:02,800 --> 00:15:03,460
You got it.

225
00:15:03,700 --> 00:15:10,030
Oh, and then notice since I used a print off now, we didn't get a new line when it printed.

226
00:15:10,040 --> 00:15:10,750
You got it.

227
00:15:11,020 --> 00:15:15,160
So if we wanted that new line, do you remember what to put here to get a new line?

228
00:15:15,400 --> 00:15:15,880
All right.

229
00:15:16,150 --> 00:15:21,220
So I would use a percent in and I'm going to just make sure that that looks good.

230
00:15:21,910 --> 00:15:27,220
Oh, oops, I put it in the wrong place, didn't I percent in?

231
00:15:27,280 --> 00:15:27,820
There we go.

232
00:15:28,450 --> 00:15:31,540
And I happened to have gotten another randomly generated three.

233
00:15:32,440 --> 00:15:34,450
Well, a randomly generated two.

234
00:15:34,450 --> 00:15:35,710
And then we added one to it.

235
00:15:36,070 --> 00:15:36,340
All right.

236
00:15:36,370 --> 00:15:41,590
Now there's at least one thing I don't like about this implementation of the program.

237
00:15:42,100 --> 00:15:45,040
It's pretty nice when we do get a match.

238
00:15:45,040 --> 00:15:46,510
But what if we don't get a match?

239
00:15:46,640 --> 00:15:49,480
We don't get any message telling us that it wasn't a match.

240
00:15:49,510 --> 00:15:54,460
All we see is just the same thing at the end of the program, either way, which is that the process

241
00:15:54,460 --> 00:15:54,910
finished.

242
00:15:55,570 --> 00:16:02,230
I would like to be able to see either you got it or you didn't get it or something like that.

243
00:16:02,470 --> 00:16:08,080
OK, so now let me introduce you to another version of the if statement.

244
00:16:08,320 --> 00:16:11,080
This is called an if then statement, by the way.

245
00:16:11,080 --> 00:16:15,100
If then I can remember when I put this curly brace here, I read it.

246
00:16:15,100 --> 00:16:16,510
I read it as then.

247
00:16:16,540 --> 00:16:16,990
OK.

248
00:16:17,080 --> 00:16:21,730
So if then there's another version of this called the if?

249
00:16:21,730 --> 00:16:24,230
Then else, though, OK?

250
00:16:24,250 --> 00:16:34,000
And that allows us to specify if the if statement evaluates to true, then execute the code that is

251
00:16:34,000 --> 00:16:35,100
in one block.

252
00:16:35,110 --> 00:16:43,160
But if it evaluates to false, then execute another a different block of code.

253
00:16:43,180 --> 00:16:43,540
OK.

254
00:16:43,720 --> 00:16:48,100
And so the way we can do that is to simply type.

255
00:16:48,190 --> 00:16:51,400
Else so you're basically saying otherwise.

256
00:16:51,610 --> 00:16:51,930
Right?

257
00:16:51,940 --> 00:16:54,820
And then you use another opening curly brace again.

258
00:16:54,820 --> 00:16:57,670
So curly brace like this and then hit return.

259
00:16:58,060 --> 00:17:02,440
And then again, it gives us a matching closing curly brace right there.

260
00:17:02,470 --> 00:17:08,500
These two yellow guys and then this space in the middle is where we can put another block of code that

261
00:17:08,500 --> 00:17:13,030
should execute if this evaluates to false.

262
00:17:13,210 --> 00:17:16,210
So if it's true, do this.

263
00:17:16,360 --> 00:17:18,890
If it's false, do something else.

264
00:17:18,920 --> 00:17:19,360
OK.

265
00:17:19,450 --> 00:17:23,410
Else so let's have it print some alternative things.

266
00:17:23,410 --> 00:17:27,900
So I'll do a system that out and I'm going to say sorry.

267
00:17:28,240 --> 00:17:31,180
Sorry, you didn't get it.

268
00:17:31,450 --> 00:17:31,900
OK.

269
00:17:31,990 --> 00:17:34,300
And now we'll get a little bit better feedback.

270
00:17:34,510 --> 00:17:36,190
So now let's run this.

271
00:17:39,500 --> 00:17:41,900
OK, so sorry, you didn't get it.

272
00:17:42,230 --> 00:17:45,790
Let's run it a few more times, let's run it until, oh, there we go.

273
00:17:45,800 --> 00:17:48,470
So now we got a three and then we got you got it.

274
00:17:48,800 --> 00:17:52,880
But then when we run it again and we, OK, we got it again.

275
00:17:53,690 --> 00:17:54,020
All right.

276
00:17:54,020 --> 00:17:55,430
So now we didn't get it.

277
00:17:55,430 --> 00:17:57,770
So you get what's going on here.

278
00:17:57,800 --> 00:18:01,220
This gives us a little bit more control over things now.

279
00:18:01,460 --> 00:18:03,890
If it's a match, then you get this.

280
00:18:04,040 --> 00:18:05,810
If it's not a match, then you get this.

281
00:18:06,140 --> 00:18:11,570
Now what you can put in between these parentheses is actually quite powerful.

282
00:18:11,810 --> 00:18:17,840
You can put a lot of different things in here as long as whatever you put in here eventually evaluates

283
00:18:17,870 --> 00:18:18,820
to a Boolean.

284
00:18:18,830 --> 00:18:19,110
OK?

285
00:18:19,130 --> 00:18:19,940
That's the key.

286
00:18:20,120 --> 00:18:23,090
It needs to evaluate to a Boolean.

287
00:18:23,630 --> 00:18:28,060
So let's see here we could change this logic a little bit.

288
00:18:28,070 --> 00:18:31,760
Currently, it says if random NUM equals three, then do this.

289
00:18:31,970 --> 00:18:33,050
We could change it.

290
00:18:33,050 --> 00:18:36,590
We could flip it and say if it does not equal.

291
00:18:36,590 --> 00:18:36,890
Three.

292
00:18:37,040 --> 00:18:41,540
Do you remember how to say random name does not equal three?

293
00:18:41,840 --> 00:18:42,800
I'll give you a moment.

294
00:18:44,660 --> 00:18:47,930
OK, so to say does not equal three.

295
00:18:47,960 --> 00:18:56,560
All you do is get rid of that first equal sign and put and an exclamation, which I read as not OK.

296
00:18:56,570 --> 00:19:02,450
So if random num not equal to three, then do this.

297
00:19:02,540 --> 00:19:04,760
So now let's see how it works.

298
00:19:05,360 --> 00:19:08,300
OK, so generated number was three.

299
00:19:08,300 --> 00:19:09,370
But now we got these.

300
00:19:09,370 --> 00:19:14,240
Sorry, you didn't get it message because we're wanting it to not be a three, right?

301
00:19:14,340 --> 00:19:16,370
We flipped the logic right?

302
00:19:16,400 --> 00:19:17,840
We'll run that a few times.

303
00:19:18,320 --> 00:19:18,740
OK.

304
00:19:18,830 --> 00:19:19,850
So there you go.

305
00:19:19,970 --> 00:19:23,900
So now, if it's not three, it says you got it.

306
00:19:24,590 --> 00:19:27,590
OK, now some other things that we could do.

307
00:19:28,490 --> 00:19:33,520
OK, so we could call a method inside of these parentheses to do so.

308
00:19:33,530 --> 00:19:35,780
Let me just show you what that would look like.

309
00:19:35,810 --> 00:19:39,950
Now this is going to be probably a little nonsensical, and I'm going to make it private because it

310
00:19:39,950 --> 00:19:43,180
does not need to be public, private static.

311
00:19:43,190 --> 00:19:49,310
And this method is going to return a Boolean, and I'm going to call it.

312
00:19:49,310 --> 00:19:51,410
Should I go?

313
00:19:53,030 --> 00:19:53,420
All right.

314
00:19:53,720 --> 00:20:00,460
And I'm going to return true now if I replace all of this with it.

315
00:20:00,480 --> 00:20:00,790
Oops.

316
00:20:00,920 --> 00:20:04,070
With a call to my should I go method?

317
00:20:04,490 --> 00:20:05,600
Let's run that.

318
00:20:07,170 --> 00:20:13,320
OK, so now what's happening is we're no longer evaluating the random number, in fact, we're not even

319
00:20:13,320 --> 00:20:19,110
using the random number at the moment other than just to print out what it is and instead this if statement

320
00:20:19,110 --> 00:20:23,220
is testing whatever the output of this method call is.

321
00:20:23,220 --> 00:20:25,560
So the thread gets to line eight.

322
00:20:25,980 --> 00:20:27,630
It sees that there's a method here.

323
00:20:27,630 --> 00:20:31,200
And so the thread jumps down to this line.

324
00:20:31,200 --> 00:20:34,800
16 and all it says is return true.

325
00:20:35,250 --> 00:20:40,950
And so then this, should I go basically becomes the boolean value of true.

326
00:20:41,400 --> 00:20:47,340
And you already know now that within if statement, all it's waiting for is to see if it's true or not

327
00:20:47,340 --> 00:20:48,090
true or false.

328
00:20:48,240 --> 00:20:54,390
If it's true, then it executes whatever is inside of these curly braces.

329
00:20:55,140 --> 00:21:01,560
Otherwise, and that's another way that you could read this else or else it executes whatever is here.

330
00:21:01,710 --> 00:21:10,920
So if I changed this to false and run it again, now it's always going to run line 11.

331
00:21:11,280 --> 00:21:11,640
OK.

332
00:21:11,670 --> 00:21:12,900
So sorry, you didn't get it.

333
00:21:13,320 --> 00:21:19,770
It's always going to run 911 as long as I leave this method here and leave this logic the way that it

334
00:21:19,770 --> 00:21:20,100
is.

335
00:21:20,370 --> 00:21:20,800
OK.

336
00:21:21,780 --> 00:21:22,110
All right.

337
00:21:22,230 --> 00:21:28,140
Now there's one more variation of the if and else blocks.

338
00:21:28,290 --> 00:21:32,670
In this particular case, we're testing a very Boolean type of scenario.

339
00:21:33,150 --> 00:21:34,890
It's either one way or else.

340
00:21:34,890 --> 00:21:38,700
It's the other way, and those are really your only two options, OK?

341
00:21:39,000 --> 00:21:45,360
But if you wanted to be able to test for a few different scenarios, you could do that as well.

342
00:21:45,690 --> 00:21:49,110
And the way we can do that is, let's see here.

343
00:21:49,110 --> 00:21:50,860
First, I'm going to get rid of this.

344
00:21:50,890 --> 00:21:55,620
This method don't need it now, and we'll put this logic.

345
00:21:55,980 --> 00:21:58,080
Well, we're going to do this logic a little differently.

346
00:21:58,200 --> 00:22:07,740
So now let's say that we wanted our program to do something like if the random number is a one, then

347
00:22:07,740 --> 00:22:16,890
print the color red, OK, and if it's a two, then print the color green, OK, and then for any anything

348
00:22:16,890 --> 00:22:18,750
else, print blue.

349
00:22:19,020 --> 00:22:19,440
All right.

350
00:22:19,980 --> 00:22:22,980
And again, I'm just making random rules here, OK?

351
00:22:23,000 --> 00:22:27,390
So in fact, by the time we started implementing it, I'll probably have forgotten exactly what I said.

352
00:22:27,420 --> 00:22:27,630
All right.

353
00:22:27,640 --> 00:22:40,720
So so if the random number is one, then let's say the color is is red.

354
00:22:40,980 --> 00:22:41,430
All right.

355
00:22:41,640 --> 00:22:50,510
But now how can we say also, if the random number is two, then the color is green?

356
00:22:50,520 --> 00:22:51,480
How can we do that?

357
00:22:51,600 --> 00:22:53,850
Well, it's actually pretty easy.

358
00:22:53,880 --> 00:23:00,300
What we can do is I always have trouble deciding where to jump in here to actually do this.

359
00:23:00,600 --> 00:23:09,480
What we can do is I'm going to put a closing curly brace just like that, and then I'm going to say

360
00:23:10,170 --> 00:23:12,000
else space.

361
00:23:12,510 --> 00:23:18,720
If so, I can put more ifs in this if I put the word else there first.

362
00:23:19,140 --> 00:23:31,710
Else, if random NUM equals two, then and now, this new curly brace here is matching up with that

363
00:23:31,710 --> 00:23:34,020
curly brace, which was originally there.

364
00:23:34,020 --> 00:23:38,100
This curly brace here was the one on line 10 until I added a new line.

365
00:23:38,130 --> 00:23:38,550
OK.

366
00:23:38,640 --> 00:23:42,270
So then if I hit enter now it's waiting for me to say some more.

367
00:23:42,450 --> 00:23:52,140
So if the random NUM is two, then system out the color is whatever green.

368
00:23:52,860 --> 00:23:53,380
All right.

369
00:23:53,400 --> 00:24:04,890
And now this else here is saying for any other possibility that we didn't explicitly mention here or

370
00:24:04,920 --> 00:24:07,830
here for all other scenarios.

371
00:24:07,920 --> 00:24:09,360
This is like a catchall.

372
00:24:09,630 --> 00:24:11,040
Do this last thing?

373
00:24:11,070 --> 00:24:11,550
OK.

374
00:24:12,060 --> 00:24:19,170
So now we'll change this and say the color is blue.

375
00:24:19,800 --> 00:24:20,250
OK.

376
00:24:20,700 --> 00:24:22,140
So does that make sense?

377
00:24:23,040 --> 00:24:25,500
If it's one, then print red.

378
00:24:25,860 --> 00:24:34,050
If it's to then print green for all other possibilities other than one or two print blue.

379
00:24:34,590 --> 00:24:35,010
OK.

380
00:24:35,040 --> 00:24:36,390
That's what we're saying here.

381
00:24:36,570 --> 00:24:45,570
Now we could be more explicit and say if random number equals three, then print blue and just leave

382
00:24:45,570 --> 00:24:47,580
it like this, we could do that too.

383
00:24:47,760 --> 00:24:52,980
And in this particular case, that would be OK because one, two and three are the only possibilities

384
00:24:52,980 --> 00:24:54,210
that we could ever have.

385
00:24:54,540 --> 00:24:54,900
Right?

386
00:24:55,170 --> 00:24:59,820
But if I were to change this range to five, in fact, you know what?

387
00:24:59,830 --> 00:25:00,930
I will do it.

388
00:25:02,070 --> 00:25:02,280
All right.

389
00:25:02,290 --> 00:25:06,480
So let's run this a few times and just see what kinds of output we get.

390
00:25:06,750 --> 00:25:09,420
First, I said we'll run it several times.

391
00:25:10,200 --> 00:25:17,790
All right, so oh, so right away we got something that wasn't a one two or a three, and as a result,

392
00:25:18,090 --> 00:25:24,840
it didn't print any color at all because we no longer have a catchall for scenarios that don't match

393
00:25:24,840 --> 00:25:26,760
anything that we were looking for, right?

394
00:25:26,760 --> 00:25:28,740
So we were only looking for one, two or three.

395
00:25:28,860 --> 00:25:29,730
We got a four.

396
00:25:29,730 --> 00:25:32,130
We don't have a catch all for four, right?

397
00:25:32,280 --> 00:25:39,240
So if we want to have that catch all still, we need another else block here, right?

398
00:25:39,780 --> 00:25:40,500
Else.

399
00:25:42,700 --> 00:25:46,780
Let's say the color is.

400
00:25:48,260 --> 00:25:50,390
Polka dot.

401
00:25:50,480 --> 00:25:50,840
OK.

402
00:25:50,990 --> 00:25:51,410
All right.

403
00:25:51,500 --> 00:25:53,540
So now let's run this a few times.

404
00:25:55,230 --> 00:25:55,590
All right.

405
00:25:55,620 --> 00:26:01,650
So we got a two was the generated color, and so that matched here, and so it ran this line.

406
00:26:01,860 --> 00:26:03,030
The color is green.

407
00:26:03,270 --> 00:26:08,610
And then when it finishes running this line, by the way, I wasn't very explicit about this.

408
00:26:09,000 --> 00:26:11,490
It obviously doesn't execute these other lines.

409
00:26:11,490 --> 00:26:13,560
It just jumps to the end of this.

410
00:26:13,950 --> 00:26:17,550
If block, this whole entire thing is an Earth block.

411
00:26:17,760 --> 00:26:23,610
OK, so jumps to the end of the block and then it executes whatever commands are next, which in this

412
00:26:23,610 --> 00:26:25,870
case, there are no other lines of code to execute.

413
00:26:26,520 --> 00:26:30,090
So let's run this a few more times right now.

414
00:26:30,120 --> 00:26:32,280
The color is three, which is blue.

415
00:26:32,280 --> 00:26:33,180
Three Blue.

416
00:26:33,210 --> 00:26:34,410
Yep, that's right.

417
00:26:35,040 --> 00:26:36,000
Run it again.

418
00:26:36,540 --> 00:26:38,280
This time the color was four.

419
00:26:38,400 --> 00:26:41,120
We don't have an explicit mentioning four four.

420
00:26:41,130 --> 00:26:50,430
And so we get the default catchall polka dot a few more times to five.

421
00:26:50,760 --> 00:26:52,590
I'm not going to stop until we get a one.

422
00:26:53,340 --> 00:26:53,910
There it is.

423
00:26:53,910 --> 00:26:54,660
There's one.

424
00:26:54,690 --> 00:26:57,570
OK, the computer heard me and didn't want me to keep bothering it.

425
00:26:58,320 --> 00:26:59,100
All right.

426
00:26:59,130 --> 00:27:01,290
So I am going to end it here.

427
00:27:01,290 --> 00:27:08,730
I think you hopefully get the gist now of how to use if and else and if else, if and and all of the

428
00:27:08,730 --> 00:27:11,100
variations of if and else.

429
00:27:11,220 --> 00:27:16,680
And there are a few other ways to do similar things here that we will learn in the subsequent lesson.

430
00:27:16,680 --> 00:27:18,330
So I will see you in the next one.
