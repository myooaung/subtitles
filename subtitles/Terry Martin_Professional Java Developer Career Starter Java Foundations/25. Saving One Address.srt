1
00:00:00,390 --> 00:00:05,520
All right, so in the last lesson, we created an address table in our database.

2
00:00:05,850 --> 00:00:10,770
And so in this lesson, we're going to start modeling that address concept in Java.

3
00:00:11,190 --> 00:00:16,190
Now to do this, we're going to try to stick with the TDD approach to a fair degree.

4
00:00:16,200 --> 00:00:22,620
And so with that being said, we need to think of a scenario that would force us to have to model and

5
00:00:22,620 --> 00:00:24,840
address concept in Java code.

6
00:00:25,080 --> 00:00:31,310
And what I'm thinking here is we could go ahead and create an additional test for saving people.

7
00:00:31,320 --> 00:00:37,350
But this time, let's imagine that in our save person test, we not only create a person, but we also

8
00:00:37,350 --> 00:00:38,640
create an address.

9
00:00:38,910 --> 00:00:44,940
And then we set the address on the person and then we save the person, and then we confirm that the

10
00:00:44,940 --> 00:00:47,230
address ends up in the database.

11
00:00:47,250 --> 00:00:47,640
OK.

12
00:00:47,760 --> 00:00:51,960
So we're going to create a person, create an address, associate the address with the person and then

13
00:00:51,960 --> 00:00:54,280
save it all so that something along those lines.

14
00:00:54,300 --> 00:00:54,640
OK.

15
00:00:55,110 --> 00:00:55,460
All right.

16
00:00:55,470 --> 00:01:02,520
So to do that, let's jump in to our people repository test as a as a starting point here.

17
00:01:02,550 --> 00:01:02,940
All right.

18
00:01:03,240 --> 00:01:07,410
Now, before we go and create that test, let's do one quick thing here.

19
00:01:07,680 --> 00:01:12,030
Remember, we created this load data test that isn't really a test.

20
00:01:12,030 --> 00:01:18,330
It's just like a utility method that allows us to fire up the database and our code and then stuff five

21
00:01:18,330 --> 00:01:23,290
million records out into the database quickly, relatively quickly, at least quickly for me.

22
00:01:23,310 --> 00:01:23,980
I don't know how long.

23
00:01:24,000 --> 00:01:28,590
I don't know how long it's taking for you, taking 35 seconds or so for me anyway.

24
00:01:28,650 --> 00:01:35,700
We don't ever want this method to just accidentally run, but I might want to keep it around for a while.

25
00:01:35,970 --> 00:01:37,770
So let me show you something real quick here.

26
00:01:37,770 --> 00:01:43,680
If you want to write a test that you don't always want to have, run whenever you run all the tests

27
00:01:43,680 --> 00:01:45,120
in a test class.

28
00:01:45,330 --> 00:01:51,330
One thing you can do besides just commenting it out, which is kind of messy looking, is you can actually

29
00:01:51,330 --> 00:01:58,560
stick another annotation on the test method, which is called disabled, and that will just disable

30
00:01:58,560 --> 00:01:59,970
that test from ever running.

31
00:01:59,980 --> 00:02:01,110
Pretty easy thing to do.

32
00:02:01,320 --> 00:02:06,390
I mean, I guess another thing you could possibly do also would be to just comment out or delete the

33
00:02:06,390 --> 00:02:08,460
at test annotation, too.

34
00:02:08,850 --> 00:02:10,860
But yeah, yeah, whatever.

35
00:02:11,370 --> 00:02:19,290
OK, so now let's jump up to the area where we have our save tests here, so say it can save one person

36
00:02:19,290 --> 00:02:20,310
can save two people.

37
00:02:20,490 --> 00:02:26,190
So I'm thinking, let's see what it'll look like if we add a third save method in this neighborhood

38
00:02:26,190 --> 00:02:26,610
here.

39
00:02:27,090 --> 00:02:38,490
So at Test Public Void and maybe we can say, can save person with address something like that?

40
00:02:38,640 --> 00:02:39,000
All right.

41
00:02:39,030 --> 00:02:42,990
And so maybe we start off by just duplicating one of these people.

42
00:02:42,990 --> 00:02:46,860
So I just did a command to copy that guy or control D for Windows and Linux.

43
00:02:46,860 --> 00:02:53,640
And then I'm going to do an option shift or alt shift down arrow to bring that line down.

44
00:02:53,790 --> 00:02:54,090
All right.

45
00:02:54,090 --> 00:03:00,330
So there's a person and then I'm thinking, let's go ahead and create an instance of an address, so

46
00:03:00,330 --> 00:03:01,830
I'm going to make a new line.

47
00:03:02,040 --> 00:03:09,780
And in in true TDD fashion, I'm going to just start coding as if the address concept already exists

48
00:03:09,780 --> 00:03:10,770
in this code.

49
00:03:10,770 --> 00:03:17,610
And the idea will complain and scream and yell, and I will let the I.D. make it all come into existence,

50
00:03:17,610 --> 00:03:17,910
right?

51
00:03:18,300 --> 00:03:25,170
So I'm going to pretend like we have a class called address and I'm going to call it address.

52
00:03:25,290 --> 00:03:32,370
And then I'm going to make a new instance of this address as I would like to be able to make it.

53
00:03:32,940 --> 00:03:46,440
So I'm going to imagine that I can specify a street address one two three Beale Street, and I can also

54
00:03:46,440 --> 00:03:51,840
specify an address to field like Apartment one A.

55
00:03:53,470 --> 00:03:58,330
And I can specify a city, Walla Walla.

56
00:03:59,440 --> 00:04:08,890
And a state like Washington and a zip code or postal code like nine 00 to one 00, which I know that's

57
00:04:08,890 --> 00:04:13,750
in Beverly Hills, that's not in Washington, but that's Beverly Hills, California, but that's OK.

58
00:04:14,620 --> 00:04:18,160
And a country United States.

59
00:04:20,510 --> 00:04:24,410
And then let me go jump over to the database and remember what the other fields were.

60
00:04:24,590 --> 00:04:31,220
So in addition to those common fields, we also have county and region, so county.

61
00:04:32,790 --> 00:04:39,720
Fulton County and then region, and I don't remember what an example of a region was, let's jump into

62
00:04:39,720 --> 00:04:41,070
the spreadsheet.

63
00:04:41,160 --> 00:04:44,340
OK, so OK, so like Midwest, but whatever.

64
00:04:44,370 --> 00:04:48,420
OK, so we'll say West West.

65
00:04:48,660 --> 00:04:51,780
And actually, now let me let me show you something real quick here.

66
00:04:52,230 --> 00:04:58,470
Actually, this region business here, if we're limiting ourselves just to the United States, then

67
00:04:58,470 --> 00:05:05,880
this region business here actually might be a good opportunity to make use of an enum here because it

68
00:05:05,880 --> 00:05:08,730
looks like the options here are pretty few.

69
00:05:08,880 --> 00:05:13,050
It's not like these region areas are ever going to change, right?

70
00:05:13,470 --> 00:05:18,780
As long as we're only talking about the U.S. So just to mix it up a little more and show you a few other

71
00:05:18,780 --> 00:05:24,420
techniques that you could consider using when modeling classes that may map to a database.

72
00:05:24,630 --> 00:05:30,030
In a situation like this, where you have a limited number of possibilities for a region sometimes in

73
00:05:30,030 --> 00:05:31,740
in-room could be useful here.

74
00:05:31,770 --> 00:05:33,640
So let's make this as an interim.

75
00:05:33,990 --> 00:05:35,400
So to do that?

76
00:05:35,580 --> 00:05:37,710
Let me scroll over and get myself a little more room.

77
00:05:37,800 --> 00:05:43,770
What I'm going to do here is instead of hard coding a string like that, I'm going to pretend like there's

78
00:05:43,770 --> 00:05:48,510
an enum called a region with a constant called West.

79
00:05:48,630 --> 00:05:49,050
OK.

80
00:05:49,500 --> 00:05:50,820
And now that's red.

81
00:05:51,180 --> 00:05:52,290
Let me scroll up a bit.

82
00:05:52,830 --> 00:05:53,100
OK.

83
00:05:53,130 --> 00:06:00,870
And I'm actually going to tell it that we wanted to create an enum and I will have it create that in

84
00:06:00,870 --> 00:06:03,300
whom, I guess, in the model package.

85
00:06:03,750 --> 00:06:04,200
All right.

86
00:06:04,410 --> 00:06:10,190
So now if I jump back over here again, well, now it seems that I referred to a constant of West.

87
00:06:10,200 --> 00:06:14,240
And so if I put my cursor there, it should offer to add that constant.

88
00:06:14,250 --> 00:06:17,940
And there it is, the very first thing it's offering to do create enum constant.

89
00:06:17,940 --> 00:06:19,440
Less sure do that.

90
00:06:20,040 --> 00:06:20,460
All right.

91
00:06:20,700 --> 00:06:21,360
Very good.

92
00:06:21,540 --> 00:06:23,790
And now if I jump over there, there it is.

93
00:06:24,030 --> 00:06:28,960
And so then I can put a comma here and I can add the other constants as well.

94
00:06:28,980 --> 00:06:34,380
So I'm I guess we have a north and south and east and northeast and the west east to the west.

95
00:06:34,510 --> 00:06:38,970
The funny thing here in the Midwest also and hopefully that's all of them.

96
00:06:38,970 --> 00:06:40,380
If not, we'll see.

97
00:06:41,340 --> 00:06:41,790
All right.

98
00:06:41,910 --> 00:06:44,400
So jumping back over now to the test?

99
00:06:44,580 --> 00:06:52,380
OK, so let me close that off with a semicolon, and now we can let the A.D. create this address class

100
00:06:52,380 --> 00:06:55,230
for us, some going to do an option return.

101
00:06:55,980 --> 00:06:59,820
Now I'm also thinking of mixing things up a little bit more.

102
00:06:59,850 --> 00:07:04,140
And how about we create this as a record rather than as a class?

103
00:07:04,380 --> 00:07:07,770
As you may recall, records and classes are quite similar.

104
00:07:07,770 --> 00:07:12,150
They're essentially the same thing, except records have a few conveniences for us.

105
00:07:12,300 --> 00:07:17,550
We don't need to create our own getters and setters, and creating the record or defining the record

106
00:07:17,550 --> 00:07:24,220
rather is kind of a hybrid mix up between creating a class and creating a constructor for the class.

107
00:07:24,240 --> 00:07:31,410
OK, so records are trying to get rid of a lot of the common boilerplate code that we often end up generating

108
00:07:31,410 --> 00:07:36,480
or writing for typical classes such as getters and setters constructor.

109
00:07:36,660 --> 00:07:39,750
Slightly more useful to string methods and things of that sort.

110
00:07:39,780 --> 00:07:40,020
All right.

111
00:07:40,020 --> 00:07:41,130
So yeah, let's try that.

112
00:07:41,370 --> 00:07:46,140
Honestly, I haven't tried this out before, so we may run into something that makes me realize that

113
00:07:46,140 --> 00:07:48,320
this won't work the way that I was hoping it would.

114
00:07:48,330 --> 00:07:48,990
But let's see.

115
00:07:49,530 --> 00:07:50,000
All right.

116
00:07:50,010 --> 00:07:54,480
So we'll have this put into the model package also.

117
00:07:54,510 --> 00:07:55,010
All right.

118
00:07:55,020 --> 00:07:56,280
And let's see.

119
00:07:56,310 --> 00:08:03,240
So this first parameter is street address and then string is good.

120
00:08:03,240 --> 00:08:14,280
And then the second one was address two and then the next one is city and then state and then postcode

121
00:08:14,580 --> 00:08:16,950
and then country.

122
00:08:17,970 --> 00:08:19,440
And then county.

123
00:08:20,470 --> 00:08:23,350
And then region and then I can hit enter.

124
00:08:23,380 --> 00:08:23,980
All right.

125
00:08:24,070 --> 00:08:32,020
So that looks pretty OK, except for one thing now, since objects of this new address, class or record

126
00:08:32,200 --> 00:08:39,210
are destined for their own dedicated table in the database, they're going to need an I.D. also.

127
00:08:39,280 --> 00:08:44,610
And so let me add that on here, and that'll be of type long, and I will just call it I.D..

128
00:08:44,710 --> 00:08:45,100
All right.

129
00:08:45,370 --> 00:08:47,320
And now let's jump back over here.

130
00:08:47,410 --> 00:08:52,060
And so now we're going to have an error because I haven't specified that I.D. and this is going to be

131
00:08:52,060 --> 00:08:54,730
kind of interesting because I don't have an ID.

132
00:08:54,880 --> 00:08:57,190
The database is going to generate that for us.

133
00:08:57,400 --> 00:09:01,870
So what I'm going to see here is let's see if I can just provide a null.

134
00:09:02,410 --> 00:09:02,800
OK.

135
00:09:03,010 --> 00:09:04,350
So it is taking that.

136
00:09:04,360 --> 00:09:10,270
So that's one thing I'm not super crazy about in this case of using a record is that as far as I can

137
00:09:10,270 --> 00:09:16,810
tell, I maybe need to explicitly specify a null rather than just having a constructor that doesn't

138
00:09:16,810 --> 00:09:23,200
take an I.D. But I can still have an ID field on the class, which is something I could do if we were

139
00:09:23,200 --> 00:09:29,410
using a traditional class like the person here where I'm not specifying an I.D., but I can live with

140
00:09:29,410 --> 00:09:30,580
that being null for now.

141
00:09:30,640 --> 00:09:31,240
OK.

142
00:09:31,720 --> 00:09:31,930
All right.

143
00:09:31,930 --> 00:09:39,010
So now we've got an address for John and now we need to associate the address with John.

144
00:09:39,280 --> 00:09:44,920
And we haven't done a whole lot of this kind of stuff so far in this course where we've associated different

145
00:09:44,920 --> 00:09:48,280
instances of different types with each other.

146
00:09:48,490 --> 00:09:53,230
But when you start getting into these database applications, this is where you may start to really

147
00:09:53,260 --> 00:09:55,170
make these types of associations.

148
00:09:55,180 --> 00:09:58,930
It's a very common thing to do, which is why have contrived this scenario?

149
00:09:59,350 --> 00:09:59,680
All right.

150
00:09:59,680 --> 00:10:02,710
So so what we can do is say something like John.

151
00:10:02,710 --> 00:10:09,010
That said, I don't know, primary address to address.

152
00:10:09,550 --> 00:10:16,330
Now the reason I'm referring to this property as primary address is because I'm kind of thinking we

153
00:10:16,330 --> 00:10:23,470
might have a couple of address fields on the person class, maybe a primary, maybe a secondary or or

154
00:10:23,470 --> 00:10:27,720
we could have home and business, you know, we could do something like that, in fact.

155
00:10:27,730 --> 00:10:29,290
Yeah, maybe, maybe let's do that.

156
00:10:29,440 --> 00:10:30,610
Let's do home.

157
00:10:32,140 --> 00:10:33,780
Let's do home address.

158
00:10:33,820 --> 00:10:34,220
OK.

159
00:10:34,240 --> 00:10:35,440
Not that there's any difference.

160
00:10:35,440 --> 00:10:36,340
There's no difference here.

161
00:10:36,340 --> 00:10:45,070
But my point is that we could have multiple fields on the person class pointing back to one or more

162
00:10:45,070 --> 00:10:47,440
addresses in the address table.

163
00:10:47,560 --> 00:10:53,750
And this again gets into this whole relational thing that I was talking about in the last lesson.

164
00:10:53,770 --> 00:11:02,410
OK, so we're we are relating one instance in Java now, in addition to the database in Java to another

165
00:11:02,410 --> 00:11:03,820
instance and in Java.

166
00:11:03,850 --> 00:11:04,210
All right.

167
00:11:04,450 --> 00:11:05,260
So there's that.

168
00:11:05,380 --> 00:11:13,360
So I'm going to do an option return to prompt the E to let me do something with this and I'm thinking

169
00:11:13,360 --> 00:11:16,060
I'm going to go with the second option here, create property.

170
00:11:16,060 --> 00:11:18,550
And I haven't really explained this super well.

171
00:11:18,850 --> 00:11:19,930
Maybe you gleaned it.

172
00:11:19,930 --> 00:11:22,570
Maybe it was obvious from the other times when I've done this.

173
00:11:22,570 --> 00:11:26,350
So the difference between create method versus create property.

174
00:11:26,650 --> 00:11:33,580
If I choose create method, the idea is going to be really dumb and it's just going to create one method

175
00:11:33,580 --> 00:11:35,470
called set home address.

176
00:11:35,470 --> 00:11:36,340
And that's it.

177
00:11:37,090 --> 00:11:43,150
If I choose create property, though, the idea is going to understand that there should be a property

178
00:11:43,150 --> 00:11:51,400
on the person class called home address and that most likely, that property should probably also have

179
00:11:51,550 --> 00:11:54,220
both a getter and setter methods, right?

180
00:11:54,580 --> 00:12:01,150
So the property option is the smarter option in this case where I'm kind of doing a TDD style and I'm

181
00:12:01,150 --> 00:12:06,130
going backward, I'm kind of starting kind of towards the end and then working my way upfront, so to

182
00:12:06,130 --> 00:12:06,850
speak, right?

183
00:12:07,180 --> 00:12:09,670
So that's why I'm going to choose create property.

184
00:12:09,700 --> 00:12:10,040
All right.

185
00:12:10,060 --> 00:12:18,910
And so that puts me in the person class, and it has generated a set home address method that takes

186
00:12:18,910 --> 00:12:21,110
an address as an input.

187
00:12:21,140 --> 00:12:23,380
Now it hasn't imported it fully.

188
00:12:23,380 --> 00:12:27,350
It's showing me the fully qualified class name at the moment, but that's OK.

189
00:12:27,370 --> 00:12:29,800
And so I will accept OK on that.

190
00:12:29,980 --> 00:12:33,160
And it's going to call this home address, and that's fine.

191
00:12:33,400 --> 00:12:37,330
And then the field is this that home address and all of that is good.

192
00:12:37,340 --> 00:12:40,370
And then it also created a get home address.

193
00:12:40,480 --> 00:12:42,280
Right now, it's not happy with something.

194
00:12:42,280 --> 00:12:50,280
Here are, I think the address record probably was created in the test package.

195
00:12:50,290 --> 00:12:51,420
Let me see real quick here.

196
00:12:51,430 --> 00:12:52,920
That's probably why this is red.

197
00:12:53,170 --> 00:12:54,790
I should have been looking a little more closely.

198
00:12:54,970 --> 00:13:01,300
Let me open up the package stuff here, and I bet, yeah, there it is, got created in the test folder

199
00:13:01,300 --> 00:13:03,790
instead of the main folder.

200
00:13:04,030 --> 00:13:04,930
All right, that's fine.

201
00:13:04,940 --> 00:13:07,330
So I can literally just pick that up and move it.

202
00:13:07,330 --> 00:13:15,520
If I just put my cursor on an address here, I can drag it right into the model package right there

203
00:13:15,520 --> 00:13:16,870
and refactor.

204
00:13:16,870 --> 00:13:19,630
And I'm sorry that you can't see my options here, but under this.

205
00:13:19,820 --> 00:13:23,760
Question, do you wish to ignore them and continue, I'm going to click Continue.

206
00:13:23,790 --> 00:13:28,490
OK, so just saying like, Hey, do I do I care that there are issues that are being found?

207
00:13:28,580 --> 00:13:29,600
Yeah, I'm OK with it.

208
00:13:29,630 --> 00:13:30,740
I'm going to click Continue.

209
00:13:31,070 --> 00:13:31,520
Ah, oh.

210
00:13:31,520 --> 00:13:33,440
And so now I also need to move.

211
00:13:33,800 --> 00:13:35,620
Yeah, I wasn't paying close enough attention.

212
00:13:35,630 --> 00:13:38,510
I also need to move the region.

213
00:13:38,660 --> 00:13:39,100
All right.

214
00:13:39,110 --> 00:13:44,060
So I'm going to grab that and move that into model also.

215
00:13:44,360 --> 00:13:44,780
Yes.

216
00:13:44,780 --> 00:13:45,920
Refactor that.

217
00:13:46,100 --> 00:13:46,730
OK.

218
00:13:46,790 --> 00:13:51,830
And so now if I jump back over to the person class, yeah, everything's happy.

219
00:13:51,860 --> 00:13:52,170
All right.

220
00:13:52,190 --> 00:13:55,500
And now, actually, I don't like having all of this package here.

221
00:13:55,520 --> 00:13:59,950
So again, this is how you have to refer to classes if you don't import them, right?

222
00:13:59,960 --> 00:14:02,600
So there's no import for this address at the moment.

223
00:14:02,780 --> 00:14:08,450
So I'm going to just get rid of all of the the package part there, because now I don't need it anymore

224
00:14:08,480 --> 00:14:10,460
and it makes the code look messy.

225
00:14:10,760 --> 00:14:11,420
All right.

226
00:14:11,660 --> 00:14:16,310
And now let's come up to the very top to make sure that we've got an address field here.

227
00:14:16,310 --> 00:14:17,330
And yes, we do.

228
00:14:17,600 --> 00:14:19,610
So this is all looking pretty good.

229
00:14:19,640 --> 00:14:20,120
All right.

230
00:14:20,240 --> 00:14:25,910
And so I will close the package pane there so I can have a little more room.

231
00:14:25,940 --> 00:14:26,210
All right.

232
00:14:26,240 --> 00:14:29,600
And now I can jump back over to the test.

233
00:14:29,780 --> 00:14:31,670
Very good and no more red there.

234
00:14:31,940 --> 00:14:39,710
OK, so then I guess let's just pretend like we take our repo and call save on John.

235
00:14:40,370 --> 00:14:43,970
And let's say that we captured John saved person.

236
00:14:44,120 --> 00:14:50,090
So now we need to somehow confirm that that address actually made it into the database as part of our

237
00:14:50,090 --> 00:14:50,760
test, right?

238
00:14:50,780 --> 00:14:52,040
We want to assert something.

239
00:14:52,310 --> 00:15:00,110
So what I'm thinking of doing for now is let's just assert that this saved person will have an address

240
00:15:00,290 --> 00:15:03,650
and then that address will have an ID that isn't null.

241
00:15:03,680 --> 00:15:04,130
OK.

242
00:15:04,160 --> 00:15:16,730
So we can assert that Saved Person Dot Get Home Address I.D. is greater than zero.

243
00:15:17,180 --> 00:15:18,170
Let's start with that.

244
00:15:18,350 --> 00:15:22,130
All right, so let's run this and make sure that it does, in fact, fail.

245
00:15:23,000 --> 00:15:24,100
Okay.

246
00:15:24,160 --> 00:15:29,690
They did fail, and it failed because the ID is actually null as it should be.

247
00:15:30,140 --> 00:15:31,020
OK, very good.

248
00:15:31,100 --> 00:15:34,040
And so now we can proceed to make this work.

249
00:15:34,250 --> 00:15:39,410
Now I'm not going to play the cat and mouse game like we started off doing, because hopefully you understand

250
00:15:39,740 --> 00:15:42,740
that that is the proper way to do TDD.

251
00:15:42,740 --> 00:15:45,470
But in the interest of time, let's just get this going here.

252
00:15:45,830 --> 00:15:46,280
All right.

253
00:15:46,310 --> 00:15:52,780
So now there are at least two or three different ways that I can think of to implement this functionality.

254
00:15:52,790 --> 00:15:58,640
But the first approach that I think we should attempt here is to start off by creating a repository

255
00:15:58,640 --> 00:16:00,780
class specifically for the address.

256
00:16:00,860 --> 00:16:05,150
So just as we have a people repository, which, by the way, I probably should have actually named

257
00:16:05,150 --> 00:16:07,790
person repository, I think I should have made it plural.

258
00:16:07,880 --> 00:16:09,230
We actually could rename that.

259
00:16:09,230 --> 00:16:09,920
Maybe we will.

260
00:16:10,310 --> 00:16:14,690
We should now also create an address repository.

261
00:16:14,720 --> 00:16:15,080
OK.

262
00:16:15,290 --> 00:16:18,000
So let's actually go ahead and just do that.

263
00:16:18,020 --> 00:16:23,590
So I'm going to open up my Heyn over here and down here in repository.

264
00:16:23,600 --> 00:16:25,280
I'm just going to go ahead and create a new one.

265
00:16:25,550 --> 00:16:27,830
Now I have to be a little honest with you.

266
00:16:28,010 --> 00:16:31,970
I'm not doing this as strictly with TDD as I could.

267
00:16:32,360 --> 00:16:39,830
I'm going a little a few steps removed because I could justify in some ways just creating a test class

268
00:16:39,830 --> 00:16:43,310
for this new address repository and going that way.

269
00:16:43,640 --> 00:16:51,200
But I wanted to force myself to see how these addresses might actually be used in interacting with the

270
00:16:51,200 --> 00:16:52,520
person instance.

271
00:16:52,850 --> 00:16:57,230
And so I just had to kind of decide they're OK, well, where am I going to drive that?

272
00:16:57,440 --> 00:17:03,890
Maybe it wouldn't be quite as appropriate for me to create a person and then save the person from within

273
00:17:03,890 --> 00:17:06,200
an address repository test?

274
00:17:06,320 --> 00:17:06,920
Maybe it would.

275
00:17:06,920 --> 00:17:07,940
Maybe it wouldn't be.

276
00:17:08,060 --> 00:17:14,180
But I already have a repository test here that deals with people and addresses don't really mean much

277
00:17:14,180 --> 00:17:15,350
without a person.

278
00:17:15,350 --> 00:17:17,030
So that's kind of my thinking here.

279
00:17:17,030 --> 00:17:22,790
But you know, let's never spend so much time overthinking these concepts more than just getting actual

280
00:17:22,790 --> 00:17:24,080
working code, right?

281
00:17:24,260 --> 00:17:28,280
And let's have some tests, right, that are driving some coding somehow.

282
00:17:28,310 --> 00:17:28,640
Right?

283
00:17:28,700 --> 00:17:28,990
All right.

284
00:17:29,000 --> 00:17:35,360
So over here in the repository, so I'm going to do a command in to create a new Java class, and this

285
00:17:35,360 --> 00:17:40,250
class will be called address repository.

286
00:17:40,460 --> 00:17:40,800
All right.

287
00:17:40,820 --> 00:17:48,320
And so I'm creating that and now we get to really test out our credit repository because I'm going to

288
00:17:48,320 --> 00:17:56,780
go ahead and extend the crud repository, and I'm going to have to specify a generic type of address

289
00:17:56,900 --> 00:17:59,870
like so and then I need to import that.

290
00:18:00,170 --> 00:18:00,980
There we go.

291
00:18:01,490 --> 00:18:02,030
All right.

292
00:18:02,240 --> 00:18:04,520
And so I've got red squiggles here.

293
00:18:04,550 --> 00:18:05,780
Let me make some room here.

294
00:18:06,020 --> 00:18:11,270
And the reason I have red squiggles is because some methods need to be implemented.

295
00:18:11,480 --> 00:18:14,090
And so let me go ahead and just click on this.

296
00:18:14,090 --> 00:18:17,690
And there are three methods, according to this, that need to be implemented.

297
00:18:17,690 --> 00:18:19,260
And so I will click OK.

298
00:18:19,730 --> 00:18:23,990
And there they are, so now the aide is telling me what I need to do now.

299
00:18:24,140 --> 00:18:27,260
It looks like there's some more things here that I will need to do as well.

300
00:18:27,290 --> 00:18:27,700
Oh yeah.

301
00:18:27,920 --> 00:18:31,190
So also, I need to do something about the constructor.

302
00:18:31,430 --> 00:18:31,760
All right.

303
00:18:31,760 --> 00:18:35,230
So the idea is offering to create a constructor that matches the super.

304
00:18:35,240 --> 00:18:36,780
So let's just let it do that.

305
00:18:36,800 --> 00:18:37,400
Very nice.

306
00:18:37,430 --> 00:18:39,530
So now we didn't need to write any code.

307
00:18:39,680 --> 00:18:44,780
So that's just the constructor that takes the connection as an input and then it's going to pass it

308
00:18:44,780 --> 00:18:47,030
up to the crud repository.

309
00:18:47,300 --> 00:18:47,900
And you know what?

310
00:18:47,900 --> 00:18:49,610
This has been bothering me for a while.

311
00:18:50,060 --> 00:18:52,670
Just the fact that this is crud, all uppercase.

312
00:18:52,670 --> 00:18:56,070
I thought I would like that, but now I'm not liking it as much.

313
00:18:56,090 --> 00:18:58,150
So let me see what that looks like.

314
00:18:58,160 --> 00:18:59,260
I'm going to refactor this.

315
00:18:59,270 --> 00:19:00,750
You don't have to if you don't want to.

316
00:19:00,920 --> 00:19:06,500
But let me see what this looks like if I make it just more whatever.

317
00:19:06,650 --> 00:19:07,460
Yeah, you know what?

318
00:19:07,460 --> 00:19:09,890
I think I kind of like the way that looks a little better.

319
00:19:10,100 --> 00:19:16,580
I guess over the years, I've been exposed so much to people who take their acronyms in these names

320
00:19:16,580 --> 00:19:18,920
and just make only the first letter uppercase.

321
00:19:18,920 --> 00:19:24,470
And somehow the all caps crud incredibly positive was just a little too much for me.

322
00:19:24,500 --> 00:19:29,120
Like I said, you don't have to do that if you don't want to just personal taste or whatever your team

323
00:19:29,120 --> 00:19:29,840
tells you to do.

324
00:19:29,990 --> 00:19:30,500
All right.

325
00:19:30,500 --> 00:19:38,840
So now we need to actually implement these methods, and we're also going to have to specify some annotations

326
00:19:38,960 --> 00:19:40,760
that actually do the work right.

327
00:19:40,940 --> 00:19:45,470
So the one that we're going to care about for right now is mapping for save, right?

328
00:19:45,560 --> 00:19:51,800
So here we're going to be given an address as an input and a prepared statement, and our job is to

329
00:19:51,800 --> 00:19:56,340
set the various data of the address on that prepared statement.

330
00:19:56,360 --> 00:19:56,790
OK.

331
00:19:57,260 --> 00:20:03,920
So maybe first off, we may need to start off with creating our sequel to do an insert into the address

332
00:20:03,920 --> 00:20:04,600
table.

333
00:20:04,610 --> 00:20:11,880
So let's see what that might look like at school and by the way, the operation type I can specified

334
00:20:11,900 --> 00:20:12,500
anywhere.

335
00:20:12,530 --> 00:20:15,410
So we were putting it at the end, I'll put it at the beginning.

336
00:20:15,590 --> 00:20:16,490
It doesn't really matter.

337
00:20:16,490 --> 00:20:18,650
Since they're named, they can go anywhere.

338
00:20:19,100 --> 00:20:23,120
Operation type will be saved.

339
00:20:23,630 --> 00:20:24,020
All right.

340
00:20:24,020 --> 00:20:29,100
And then the value will be, and I'm just going to type it out right here explicitly.

341
00:20:29,120 --> 00:20:30,350
In fact, you know what?

342
00:20:30,350 --> 00:20:39,830
I'm going to use a tax block to do it because I didn't show that before either insert into addresses

343
00:20:40,220 --> 00:20:42,860
and let me go back over to the database.

344
00:20:42,860 --> 00:20:49,730
And I'm just going to drill into the address table this way and then look at the column names by clicking

345
00:20:49,730 --> 00:20:52,310
on columns here and then expanding that.

346
00:20:52,550 --> 00:20:55,190
OK, so I got street address and address to so.

347
00:20:56,750 --> 00:21:00,320
Street address, comma.

348
00:21:00,740 --> 00:21:11,600
Address to city, state postcode, county region and country.

349
00:21:12,410 --> 00:21:12,760
All right.

350
00:21:12,770 --> 00:21:19,550
And then I think on a new line, I'm going to say values and then this is just going to be a bunch of

351
00:21:19,550 --> 00:21:20,690
question marks, right?

352
00:21:20,810 --> 00:21:27,230
One two three four five six is it C?

353
00:21:27,230 --> 00:21:36,710
One two three four five six seven eight one two three four, five, six, seven and eight.

354
00:21:37,250 --> 00:21:40,430
All right, so there's our insert statement.

355
00:21:41,030 --> 00:21:45,410
So now that we know what we're dealing with now, we can come down here and start mapping.

356
00:21:46,250 --> 00:21:54,470
So I'm going to do a prepared statement piece set string and the first parameter will be parameter one,

357
00:21:54,470 --> 00:21:55,940
which is the street address.

358
00:21:55,940 --> 00:21:58,640
So then Entity Dot Street.

359
00:21:58,820 --> 00:21:59,240
Oops.

360
00:22:00,430 --> 00:22:01,540
Street address.

361
00:22:03,080 --> 00:22:12,680
Like so and then start such a string to entity and that is addressed to address to every girl.

362
00:22:13,970 --> 00:22:16,100
And that search string.

363
00:22:17,340 --> 00:22:22,590
For three, which is the city entity, the city.

364
00:22:24,540 --> 00:22:30,060
Piece that said string four parameter for which is the state.

365
00:22:34,330 --> 00:22:38,710
Search string parameter five, which is post code.

366
00:22:39,520 --> 00:22:43,310
Yes, search string parameters six.

367
00:22:44,210 --> 00:22:56,440
Entity, which is county passed that search string parameter seven, which is Entity Dot region.

368
00:22:56,650 --> 00:23:02,020
Now, this won't be quite as straightforward as the other fields because the other fields are strings

369
00:23:02,020 --> 00:23:04,150
and region is actually an enum.

370
00:23:04,450 --> 00:23:07,360
But never fear this is actually pretty easy to do.

371
00:23:07,630 --> 00:23:15,940
All we need to do is then call the two string method, and you may recall that within rooms by default,

372
00:23:15,940 --> 00:23:22,350
when you call the two string method on an enum constant, all you get is the constant and string form.

373
00:23:22,360 --> 00:23:28,510
And when we have to reconstitute the enum from a string, which we will need to do when we start loading

374
00:23:28,510 --> 00:23:34,690
the addresses back from the database, enum classes have a method where we can go in that direction,

375
00:23:34,690 --> 00:23:34,990
too.

376
00:23:35,020 --> 00:23:36,490
All right, so not a problem.

377
00:23:36,550 --> 00:23:37,180
There we go.

378
00:23:37,300 --> 00:23:41,050
And so now we've got the string representation of the Enum.

379
00:23:41,200 --> 00:23:44,320
And if you don't know what I mean, let me just show you explicitly here.

380
00:23:45,220 --> 00:23:52,190
OK, so if we jump into the region, basically these constants here will just be turned into strings

381
00:23:52,210 --> 00:23:55,360
and that's what we're going to actually store in the database.

382
00:23:55,630 --> 00:24:07,390
And so oh, and then one more one more piece that string parameter eight entity dot country, right?

383
00:24:07,660 --> 00:24:08,350
There we go.

384
00:24:08,770 --> 00:24:09,100
All right.

385
00:24:09,110 --> 00:24:11,380
So we've got this much created.

386
00:24:11,410 --> 00:24:18,160
Now we need to consider, OK, what are we actually going to do with this new address repository?

387
00:24:18,400 --> 00:24:21,190
Right now, it's just sitting out here kind of orphaned.

388
00:24:21,340 --> 00:24:23,210
There's no class anywhere else.

389
00:24:23,230 --> 00:24:28,180
That's instantiating this repository so that it can actually be utilized, right?

390
00:24:28,780 --> 00:24:34,420
So what I have in mind here is let's jump over to the people repository.

391
00:24:35,610 --> 00:24:41,070
And let's take a look at where we're saving people right now, so this is how we're currently saving

392
00:24:41,070 --> 00:24:41,640
a person.

393
00:24:41,640 --> 00:24:46,530
We take that person as an input and then we map all their fields, right?

394
00:24:47,160 --> 00:24:49,560
So here's some things that we need to consider now.

395
00:24:49,680 --> 00:24:55,980
So if you recall from our last lesson where we created the address table and we had to deal with the

396
00:24:55,980 --> 00:25:00,060
foreign key and the exported key and all of that stuff, right?

397
00:25:00,420 --> 00:25:06,360
And I said that the way we were modeling this relationship in the in the database for now, at least

398
00:25:06,690 --> 00:25:11,250
because there are multiple ways to model this, but the way we're doing it for now is that a person's

399
00:25:11,250 --> 00:25:16,020
primary address and by the way, that reminds me we did call that primary address in the database so

400
00:25:16,020 --> 00:25:16,980
we can change that name.

401
00:25:17,310 --> 00:25:24,480
The person's primary address field will contain the idea of an address.

402
00:25:24,510 --> 00:25:32,910
OK, so the primary address field of the person table will point to an address record in the address

403
00:25:32,910 --> 00:25:33,480
table.

404
00:25:33,570 --> 00:25:34,020
OK.

405
00:25:34,110 --> 00:25:40,440
That's important for us to keep in mind, because that means we will need to save an address to the

406
00:25:40,440 --> 00:25:42,390
database and get its ID.

407
00:25:42,540 --> 00:25:46,620
It's generated ID before we save a person.

408
00:25:46,710 --> 00:25:47,190
OK?

409
00:25:47,310 --> 00:25:50,820
And so that's where all of this is basically happening right here.

410
00:25:51,000 --> 00:25:51,390
OK.

411
00:25:51,570 --> 00:25:58,350
So that means if there is an address on a person instance like here, we will need to save that address

412
00:25:58,350 --> 00:25:59,040
first.

413
00:25:59,220 --> 00:26:04,140
Then we should hopefully be able to get our hands on the idea of that address.

414
00:26:04,350 --> 00:26:09,420
And then we can associate that address his ID with another field here.

415
00:26:09,450 --> 00:26:09,790
OK.

416
00:26:09,810 --> 00:26:10,860
Does that make sense?

417
00:26:11,310 --> 00:26:17,520
So first things first, though, let's go rename the address column in the database.

418
00:26:17,580 --> 00:26:17,820
All right.

419
00:26:17,820 --> 00:26:24,600
So here we are back in the database and let's see here we will jump into the sequel here, and we will

420
00:26:24,600 --> 00:26:26,340
just rename that column.

421
00:26:26,430 --> 00:26:30,750
So if you know that's what you need to do, but you don't quite remember how to do it, I will show

422
00:26:30,750 --> 00:26:32,370
you how to find it again in here.

423
00:26:32,640 --> 00:26:35,100
So let's jump up to the top here.

424
00:26:35,280 --> 00:26:36,840
We want to go to reference commands.

425
00:26:36,840 --> 00:26:42,990
I'm in the H2 documentation here commands, and now you're going to need to remember a few things you

426
00:26:42,990 --> 00:26:46,410
know that you're wanting to change a column name, right?

427
00:26:46,740 --> 00:26:51,940
So typically that's that's often going to relate to altering something.

428
00:26:51,960 --> 00:26:52,350
OK.

429
00:26:52,560 --> 00:26:57,480
So if we look through this list here, you can see that there's Altar Table Altar column.

430
00:26:57,480 --> 00:27:01,980
So that's a good bet that that's kind of along the lines of where we want to be.

431
00:27:02,010 --> 00:27:08,220
So I'm going to click on that Altar Table Altar column, and before we dig all the way into this, we

432
00:27:08,220 --> 00:27:12,210
can just take a quick look here and make sure that we're on the right track, right?

433
00:27:12,210 --> 00:27:17,100
So we're altering a table and then we're specifying a column name, and there we go.

434
00:27:17,100 --> 00:27:18,960
Right there there's a rename option.

435
00:27:18,970 --> 00:27:21,000
So this is this is the right path.

436
00:27:21,210 --> 00:27:21,420
All right.

437
00:27:21,420 --> 00:27:23,600
So we want to do an altar table altar column.

438
00:27:23,610 --> 00:27:31,860
So over here we'll say altar table and the table name is people, then altar column and then the column

439
00:27:31,860 --> 00:27:37,320
name is currently what was it, primary address?

440
00:27:37,560 --> 00:27:37,910
Right.

441
00:27:37,920 --> 00:27:39,080
So let's make sure that's right.

442
00:27:39,090 --> 00:27:41,160
Altar table table name.

443
00:27:41,940 --> 00:27:43,560
Altar Table People.

444
00:27:44,160 --> 00:27:46,860
Then Altar column column name.

445
00:27:47,610 --> 00:27:48,990
Altar column.

446
00:27:48,990 --> 00:27:55,170
And then there's our column name, primary address and then any one of these.

447
00:27:55,290 --> 00:27:57,060
So we want rename to.

448
00:27:58,610 --> 00:28:02,990
Rename two and then just decide on a name.

449
00:28:03,260 --> 00:28:06,650
And so we'll say home address.

450
00:28:06,920 --> 00:28:08,900
Let's try that and see if it just works.

451
00:28:09,080 --> 00:28:10,130
Looks like it works.

452
00:28:10,430 --> 00:28:10,780
All right.

453
00:28:10,790 --> 00:28:14,840
And so now we can jump back over here to the objects, and now we're going to jump over here to the

454
00:28:14,840 --> 00:28:16,190
people table.

455
00:28:16,520 --> 00:28:20,690
And let's just we're already on columns to show the column names.

456
00:28:20,690 --> 00:28:21,650
And there we go.

457
00:28:21,950 --> 00:28:25,130
Home address is now the name of that field.

458
00:28:25,520 --> 00:28:26,540
So we're good there.

459
00:28:26,570 --> 00:28:26,830
All right.

460
00:28:26,840 --> 00:28:28,760
So now jump into the idea here.

461
00:28:29,030 --> 00:28:37,580
So the first thing we're going to want to do here is let's get our hands on this new address, assuming

462
00:28:37,580 --> 00:28:40,340
that it has actually been set on the entity.

463
00:28:40,340 --> 00:28:43,880
So we would say entity that get home address.

464
00:28:43,910 --> 00:28:44,660
There it is.

465
00:28:45,050 --> 00:28:51,170
And I think what we're going to want to do here is simply save it using the address repository.

466
00:28:51,500 --> 00:28:57,470
So that means now that we need to get our hands on the address repository somehow.

467
00:28:57,860 --> 00:29:02,090
Now there are a couple of ways that we could go about doing this.

468
00:29:02,780 --> 00:29:09,980
The really, really simple way is that we could just create an instance of the address repository right

469
00:29:09,980 --> 00:29:12,350
here in the people repository, right?

470
00:29:12,380 --> 00:29:13,880
In fact, here I'll just do it.

471
00:29:14,480 --> 00:29:19,670
So we could say something like private address repo repository.

472
00:29:19,700 --> 00:29:20,150
Right?

473
00:29:21,130 --> 00:29:27,100
Like so and I could just instantiated in line right here, although that's going to be problematic a

474
00:29:27,100 --> 00:29:32,080
bit if we tried to do it in line because it's constructor requires a connection, so that's probably

475
00:29:32,080 --> 00:29:34,810
not the best place that we'd be able to do that.

476
00:29:35,020 --> 00:29:40,600
So maybe we'd just set that to null another place that we could do it and this would be better would

477
00:29:40,600 --> 00:29:42,280
be right here in the constructor.

478
00:29:42,310 --> 00:29:42,730
Right?

479
00:29:42,970 --> 00:29:50,950
So we could say address repository equals new address, repository instance and then pass in our connection.

480
00:29:51,040 --> 00:29:53,770
We absolutely can do this.

481
00:29:54,190 --> 00:30:00,490
Now there is a bit of a philosophical problem with doing this, and I might as well go ahead and introduce

482
00:30:00,490 --> 00:30:05,310
it to you now because you're never going to hear the end of this in the Java development world.

483
00:30:05,320 --> 00:30:10,390
If we do this in live production code like what we're writing here.

484
00:30:10,900 --> 00:30:17,440
We are very tightly coupling these two repository classes and tightly coupling means what it sounds

485
00:30:17,440 --> 00:30:17,590
like.

486
00:30:17,590 --> 00:30:23,290
It means we're really intrinsically linking these two classes now in real life.

487
00:30:23,290 --> 00:30:24,630
They need to be linked, right?

488
00:30:24,640 --> 00:30:29,290
I want to have this relationship because really, what I want to do at the end of the day is come down

489
00:30:29,290 --> 00:30:35,260
here and say something like address repository, dot save.

490
00:30:37,040 --> 00:30:41,370
That's what I want to do, right, and and in fact, I just did it right.

491
00:30:41,390 --> 00:30:43,610
So that's exactly what I want.

492
00:30:44,180 --> 00:30:52,310
And in fact, I'll even finish this bit here, and I even want to capture that address as a saved address

493
00:30:52,760 --> 00:30:56,030
so that I can make sure that I can pull the ID out of it.

494
00:30:56,060 --> 00:30:57,470
So let's go ahead and finish this code.

495
00:30:57,470 --> 00:31:01,790
And then I'll come back to telling you why the way I'm doing it right now is not the best way.

496
00:31:01,910 --> 00:31:02,340
OK.

497
00:31:03,020 --> 00:31:03,300
All right.

498
00:31:03,320 --> 00:31:12,200
So now what I'm going to want to do here is I'm going to need to modify the Save sequel here.

499
00:31:12,200 --> 00:31:17,960
So currently we're inserting into people first name, last name, date of birth, salary and email,

500
00:31:18,140 --> 00:31:22,190
and now we have also this.

501
00:31:23,230 --> 00:31:25,510
Home address, right?

502
00:31:25,720 --> 00:31:31,230
So I'm going to add one more question mark now, like so and so that's now a sixth, right?

503
00:31:31,240 --> 00:31:32,920
One two three four five six.

504
00:31:32,930 --> 00:31:34,780
Yes, that's a sixth parameter.

505
00:31:35,020 --> 00:31:38,830
And so now down here, I can do that set.

506
00:31:38,860 --> 00:31:44,010
Now this is going to be a long because it's going to be the ID of the address that just got saved,

507
00:31:44,020 --> 00:31:44,350
right?

508
00:31:44,680 --> 00:31:48,490
So set long and this is going to be parameter six.

509
00:31:48,760 --> 00:31:54,790
And now, instead of referring to entity, I'm going to refer to saved address Dot ID.

510
00:31:55,720 --> 00:31:56,920
That's what we want.

511
00:31:57,250 --> 00:31:58,330
Does that make sense?

512
00:31:58,390 --> 00:32:03,190
So we need to save the address first and the act of saving the address.

513
00:32:03,190 --> 00:32:08,590
Hopefully, if all of our code works correctly, which we'll find out shortly, if that all works correctly

514
00:32:08,590 --> 00:32:13,660
will get a saved address back out of it, which will eventually have an ID, though I think we're going

515
00:32:13,660 --> 00:32:14,680
to run into a problem.

516
00:32:15,070 --> 00:32:17,950
I'm anticipating it, but I know what that problem will be.

517
00:32:18,310 --> 00:32:18,610
All right.

518
00:32:18,880 --> 00:32:24,010
But in theory, when everything is working correctly to saved address will now have an I.D. on it,

519
00:32:24,010 --> 00:32:30,850
and then we will just pull that ID out, which will be along and then associate it with the home address

520
00:32:30,850 --> 00:32:35,260
column of the person instance that we are saving.

521
00:32:35,470 --> 00:32:37,060
That's what we want to do.

522
00:32:37,330 --> 00:32:37,750
All right.

523
00:32:38,140 --> 00:32:41,860
Now you know what, in fact, I think what I'm going to do, we're going to just leave this like it

524
00:32:41,860 --> 00:32:47,200
is right here where I'm just instantiating this address repository for right now, because I know I'm

525
00:32:47,200 --> 00:32:48,760
already hitting you with a lot of things.

526
00:32:48,760 --> 00:32:53,080
So let's just leave that as it is for right now, but we're going to come back to that.

527
00:32:53,170 --> 00:32:54,010
All right.

528
00:32:54,820 --> 00:32:57,770
Now we're not going to bother with loading and all of that right now.

529
00:32:57,790 --> 00:32:59,500
We'll do that in other lessons, OK?

530
00:32:59,710 --> 00:33:02,500
Let's just see if we can just get this much to work.

531
00:33:02,980 --> 00:33:03,380
All right.

532
00:33:03,400 --> 00:33:09,550
So let's jump back over to the test and let's run this and see what happened so far.

533
00:33:09,610 --> 00:33:10,000
All right.

534
00:33:10,000 --> 00:33:10,840
Still fails.

535
00:33:11,650 --> 00:33:13,330
And let's see what we're getting here.

536
00:33:13,330 --> 00:33:20,200
Cannot invoke long value because the return value of ID is null.

537
00:33:20,380 --> 00:33:24,460
Now let's see where this is happening, and this is kind of what I was anticipating.

538
00:33:24,490 --> 00:33:24,800
All right.

539
00:33:24,820 --> 00:33:28,410
In the map for Save Method Online 40.

540
00:33:28,420 --> 00:33:29,920
So let me click on that.

541
00:33:30,580 --> 00:33:31,030
OK?

542
00:33:31,060 --> 00:33:31,300
All right.

543
00:33:31,330 --> 00:33:39,130
So this is simply complaining that I cannot bind this ID to type long because the ID is null, which

544
00:33:39,130 --> 00:33:42,340
it shouldn't be if our code were working correctly.

545
00:33:42,340 --> 00:33:44,500
This, this should not actually be null.

546
00:33:44,530 --> 00:33:44,860
Right?

547
00:33:45,370 --> 00:33:47,740
But I was anticipating that it would be.

548
00:33:47,770 --> 00:33:54,670
Now I was thinking that we'd get an error earlier in the process, though that would tell us a little

549
00:33:54,670 --> 00:33:56,770
bit more about the fact that that was null.

550
00:33:56,890 --> 00:33:58,450
But apparently, we're not getting that.

551
00:33:58,480 --> 00:34:03,430
So let me just cut to the chase and say what I think is actually happening here.

552
00:34:03,970 --> 00:34:13,840
This is null because we actually need to place an at ID annotation in our address class record to designate

553
00:34:13,840 --> 00:34:15,430
which property is for IDs.

554
00:34:15,460 --> 00:34:19,900
Let me show you what I mean, if you may have forgotten so if we jump into the person entity class.

555
00:34:20,200 --> 00:34:21,640
Remember this guy right here?

556
00:34:21,790 --> 00:34:29,230
We need the sanitation in order to let our crud repository framework know that this field right here

557
00:34:29,590 --> 00:34:32,340
is our ID field, right?

558
00:34:32,350 --> 00:34:38,830
And that way, the framework knows what field to go and set the I.D. on when it retrieves it from the

559
00:34:38,830 --> 00:34:41,050
database and all of that good stuff, right?

560
00:34:41,320 --> 00:34:45,670
But currently, our new address record doesn't have one of these.

561
00:34:45,760 --> 00:34:51,400
And so now we're going to run into an interesting question, which is can we somehow annotate this on

562
00:34:51,400 --> 00:34:57,760
a record which doesn't have explicit fields and will reflection work the same way even if we could?

563
00:34:58,120 --> 00:34:59,530
So I honestly don't know.

564
00:34:59,560 --> 00:35:00,460
Let's go find out.

565
00:35:00,790 --> 00:35:04,960
So let's jump over to the address class.

566
00:35:06,100 --> 00:35:06,470
Sorry.

567
00:35:06,490 --> 00:35:13,600
Address record, and what I'm thinking to try here is just putting in at ID annotation right here and

568
00:35:13,600 --> 00:35:17,830
see if that works, OK, so nothing's complaining about it here.

569
00:35:18,430 --> 00:35:19,870
Let's see what happens.

570
00:35:19,960 --> 00:35:21,610
Let's just try running this again.

571
00:35:21,820 --> 00:35:22,090
All right.

572
00:35:22,090 --> 00:35:23,170
Still got a failure?

573
00:35:23,200 --> 00:35:27,190
Let's see if it's the same failure unable to set it filled.

574
00:35:27,190 --> 00:35:27,730
They are.

575
00:35:27,760 --> 00:35:31,240
So that's the error that I was originally expecting to get.

576
00:35:31,870 --> 00:35:36,640
Unable to set it filled value set, I'd by annotation.

577
00:35:36,640 --> 00:35:40,400
So if we jump into the credit repository line 101, here we go.

578
00:35:40,420 --> 00:35:48,670
So here we're iterating over all of the fields looking for any fields that are annotated with our ID

579
00:35:48,820 --> 00:35:49,840
annotation.

580
00:35:49,840 --> 00:35:52,390
And if we find one, we set our value on it.

581
00:35:52,690 --> 00:35:58,570
But if we don't find one, then we actually do throw a runtime exception to tell us that we were unable

582
00:35:58,570 --> 00:36:04,160
to do so and we are unable to do so because records are immutable.

583
00:36:04,180 --> 00:36:10,270
I've mentioned this before, but basically immutability means that an object can't be changed after

584
00:36:10,270 --> 00:36:11,350
it has been created.

585
00:36:11,620 --> 00:36:17,560
So when we create a record, we call it the constructor and we pass in all the necessary properties

586
00:36:17,800 --> 00:36:19,810
after those properties have been set.

587
00:36:20,050 --> 00:36:22,300
They can't be changed afterwards.

588
00:36:22,480 --> 00:36:29,800
And if you notice here in our code online 104, we're actually trying to access the ID field or the

589
00:36:29,800 --> 00:36:37,270
field that was annotated with an ID annotation and set a new value on that that is not permitted, even

590
00:36:37,270 --> 00:36:40,390
with the set accessible call on line one or two.

591
00:36:40,600 --> 00:36:46,270
So that's the reason why this isn't going to work and so probably going to have to implement this in

592
00:36:46,270 --> 00:36:47,020
a different way.

593
00:36:47,050 --> 00:36:52,540
So I think in order to get around this for right now, what I think we're going to do is just convert

594
00:36:52,540 --> 00:36:55,270
this record back into a regular class.

595
00:36:55,420 --> 00:36:58,930
And thankfully, we can do that really easily because we don't have to do anything.

596
00:36:58,930 --> 00:37:00,340
The 80 can do it for us.

597
00:37:00,730 --> 00:37:06,100
So what we can actually do here is just click on the address name here and then we get the little light

598
00:37:06,100 --> 00:37:09,940
bulb right and I can click on this little light bulb and look at that right there.

599
00:37:09,940 --> 00:37:15,490
Convert record to class, and I'm just going to click on it right here on the words and look at that

600
00:37:15,640 --> 00:37:22,360
and look at the fact that in the expansion here, it even went ahead and put the ID annotation properly

601
00:37:22,570 --> 00:37:23,860
on the field.

602
00:37:23,950 --> 00:37:26,080
So we tried a little record experiment.

603
00:37:26,260 --> 00:37:30,880
I do want to try that again, but we'll need to figure out what we need to do to make that work.

604
00:37:30,880 --> 00:37:32,590
And I don't want to hold this up right now.

605
00:37:32,680 --> 00:37:33,040
OK.

606
00:37:33,310 --> 00:37:35,800
So let's try running that test again.

607
00:37:36,130 --> 00:37:37,590
Hey, look at that.

608
00:37:37,600 --> 00:37:38,660
It's green, right?

609
00:37:38,680 --> 00:37:40,810
Someone to jump into this test here.

610
00:37:40,870 --> 00:37:46,660
Honestly, I'm kind of curious what the ID actually is, and I'd love to actually see it in the database.

611
00:37:47,290 --> 00:37:51,730
So in fact, I'll tell you what, I'm going to go ahead and commit this.

612
00:37:51,850 --> 00:37:58,810
We'll do a connection commit and we'll have to address the exception that can be thrown here.

613
00:37:58,810 --> 00:38:00,880
So I'll just add that to the signature there.

614
00:38:01,030 --> 00:38:07,000
And let's run that one more time, and this will allow a new address and the new person to actually

615
00:38:07,000 --> 00:38:10,930
be permanently saved now so that I can find this record more easily.

616
00:38:10,930 --> 00:38:13,330
The let me call it something distinctive.

617
00:38:13,480 --> 00:38:13,860
All right.

618
00:38:13,870 --> 00:38:17,710
So I'm putting four Z's on the end of the first name there, and let's run that again.

619
00:38:18,860 --> 00:38:19,490
All right.

620
00:38:19,820 --> 00:38:25,100
So now I'm going to go ahead and get rid of that commit because I don't want to accidentally keep doing

621
00:38:25,100 --> 00:38:26,870
that or forget to remove it later.

622
00:38:27,110 --> 00:38:32,210
And now let's jump in to squirrel, and let's just confirm what we see here.

623
00:38:32,240 --> 00:38:32,450
All right.

624
00:38:32,460 --> 00:38:39,380
So first, let's just take a quick peek in the address table, select everything from addresses.

625
00:38:39,380 --> 00:38:43,250
And right now, there shouldn't be, but I think there should only be like one record in here.

626
00:38:43,250 --> 00:38:45,680
So I think I'm OK to just do a select everything.

627
00:38:46,950 --> 00:38:48,900
There it is, one to three, Bill.

628
00:38:49,530 --> 00:38:51,570
Yeah, that's that's looking legit.

629
00:38:52,320 --> 00:38:57,750
And so then let's see the record in the people table.

630
00:38:57,750 --> 00:39:06,120
So select everything from people where and now what we could do is something like where home address

631
00:39:06,120 --> 00:39:09,480
equals four, because the ID here is four.

632
00:39:09,810 --> 00:39:10,140
Right?

633
00:39:10,440 --> 00:39:11,370
So let's try that.

634
00:39:11,760 --> 00:39:12,780
There he is, John.

635
00:39:14,040 --> 00:39:15,870
So that worked wonderfully.

636
00:39:15,870 --> 00:39:16,350
Didn't it?

637
00:39:16,470 --> 00:39:17,400
Totally worked.

638
00:39:18,420 --> 00:39:18,860
All right.

639
00:39:18,870 --> 00:39:22,080
So that is more than enough for this lesson.

640
00:39:22,260 --> 00:39:24,660
In the next lesson, we're going to continue working on this.

641
00:39:24,660 --> 00:39:26,200
There's so many things that we could do.

642
00:39:26,220 --> 00:39:27,540
Don't worry, we're not going to do them all.

643
00:39:27,750 --> 00:39:32,610
But I just want you to really have a decent understanding of these relationships that can exist between

644
00:39:32,610 --> 00:39:36,900
tables and how we can map them to and from our Java code.

645
00:39:37,050 --> 00:39:39,240
So with that, I will see you in the next one.
