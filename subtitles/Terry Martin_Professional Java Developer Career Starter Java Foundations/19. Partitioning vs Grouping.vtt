WEBVTT
1
00:00:00.270 --> 00:00:06.750
All right, so we're coming up on the end of our techniques that we can use with the collect method

2
00:00:06.750 --> 00:00:07.200
here.

3
00:00:07.500 --> 00:00:14.940
And so I think possibly the last major technique that I want to show you covers another interesting

4
00:00:14.940 --> 00:00:15.570
scenario.

5
00:00:15.780 --> 00:00:21.360
Now this scenario is sort of, in my mind, kind of a hybrid between the filter function of the Streams

6
00:00:21.360 --> 00:00:24.000
API and the Grouping Bay.

7
00:00:24.390 --> 00:00:26.220
And so let me give you a scenario here.

8
00:00:26.370 --> 00:00:31.470
So first off, let me just get rid of this collect bit here.

9
00:00:31.500 --> 00:00:41.580
We'll come back to that shortly, and let's say that we just wanted to filter these people by gender.

10
00:00:41.610 --> 00:00:44.670
OK, let's say that we only want the women, right?

11
00:00:44.850 --> 00:00:51.300
So we could do something like P Arrow, P Dot gender.

12
00:00:54.500 --> 00:00:57.470
Equals F. Right?

13
00:00:58.520 --> 00:01:00.810
And then we could do whatever with that.

14
00:01:00.830 --> 00:01:04.500
Maybe we could do it for each or something like that.

15
00:01:04.520 --> 00:01:09.380
OK, now I'm not going to clean up the errors here because I'm just showing you this for illustrative

16
00:01:09.380 --> 00:01:10.280
purposes, right?

17
00:01:10.430 --> 00:01:13.160
So we're all familiar with how to use Filter now.

18
00:01:13.220 --> 00:01:13.520
Right?

19
00:01:13.760 --> 00:01:17.440
So this would filter through only the women, right?

20
00:01:17.450 --> 00:01:20.300
Only those people marked with a gender of F.

21
00:01:21.020 --> 00:01:23.150
And then we could do whatever we wanted with them.

22
00:01:23.450 --> 00:01:29.540
But the items in our stream that are men, they would just go away, right?

23
00:01:29.570 --> 00:01:30.850
We just wouldn't see them.

24
00:01:30.860 --> 00:01:32.870
They'd get literally filtered out.

25
00:01:34.160 --> 00:01:43.730
Now, what if we wanted to use this type of expression, but we didn't want to lose the men, right?

26
00:01:43.910 --> 00:01:45.980
We wanted to still have both.

27
00:01:46.310 --> 00:01:51.140
Well, now you're kind of getting back into kind of a grouping situation right where you're sort of

28
00:01:51.140 --> 00:01:54.650
still grouping by gender in this particular case, right?

29
00:01:55.640 --> 00:02:03.020
The thing, though, is that with the grouping by function, you could have more than just two options,

30
00:02:03.020 --> 00:02:03.330
right?

31
00:02:03.350 --> 00:02:09.440
You could have a whole slew of options, such as grouping by state right into in the United States,

32
00:02:09.440 --> 00:02:17.330
we have 50 states plus D.C. and so you would get presumably like 50 one groupings, if you will.

33
00:02:17.360 --> 00:02:17.690
Right.

34
00:02:17.990 --> 00:02:21.620
But when you're filtering, it's a Boolean operation.

35
00:02:21.860 --> 00:02:24.710
Either you have a match or you don't have a match, right?

36
00:02:25.010 --> 00:02:30.320
But with a filter, you're going to lose the items that did not match that filter.

37
00:02:30.710 --> 00:02:38.390
So if you wanted to do almost the same thing as the filter, but you don't want to lose the items that

38
00:02:38.390 --> 00:02:41.120
didn't match, there's a function for that.

39
00:02:41.120 --> 00:02:45.230
As as we now know, there's a function for everything with the Streams API.

40
00:02:45.290 --> 00:02:47.660
And so that's what we're going to take a look at now.

41
00:02:48.020 --> 00:02:50.540
Having said that, let me delete this filter.

42
00:02:52.180 --> 00:02:54.730
And I will recommend out that for each.

43
00:02:55.060 --> 00:03:03.220
And I'm going to bring back the collect call here and now I'm going to introduce you to another collector

44
00:03:03.220 --> 00:03:06.070
function, and this one is called partition.

45
00:03:06.520 --> 00:03:11.050
So just as we can do a grouping by, we can also do a partitioning by.

46
00:03:11.290 --> 00:03:12.880
And it's really straightforward.

47
00:03:12.880 --> 00:03:20.350
It pretty much is, like I said, a hybrid of the filter function and the grouping by function.

48
00:03:20.380 --> 00:03:20.830
OK.

49
00:03:21.130 --> 00:03:26.890
So as you see here in its little in the description for it, in fact, it takes a predicate.

50
00:03:26.890 --> 00:03:32.230
A predicate is an interface that takes an input and returns a boolean a true or false right.

51
00:03:32.380 --> 00:03:35.860
And so the filter method takes a predicate.

52
00:03:36.070 --> 00:03:42.490
And as you see here, the first input to this partitioning by function is also a predicate.

53
00:03:42.520 --> 00:03:42.970
OK.

54
00:03:43.120 --> 00:03:49.010
And so the same kinds of lambda expressions and method references that we can pass into a filter.

55
00:03:49.030 --> 00:03:52.210
We can also pass into a partitioning by now.

56
00:03:52.210 --> 00:04:00.280
One of the big differences between the filter versus the partitioning by is that the filter simply returns

57
00:04:00.280 --> 00:04:07.120
a modified stream that does not contain whatever items didn't pass muster for the predicate, right?

58
00:04:07.450 --> 00:04:14.800
But with a partitioning by just like a grouping by, it actually returns a map, and that map will always

59
00:04:14.800 --> 00:04:17.230
have no more than two groupings, right?

60
00:04:17.590 --> 00:04:22.990
The items that did match the predicate and then the items that didn't match the predicate.

61
00:04:23.200 --> 00:04:24.280
That's really it.

62
00:04:24.790 --> 00:04:26.380
So let's give this a shot.

63
00:04:27.420 --> 00:04:29.860
So we'll do the same situation here.

64
00:04:29.880 --> 00:04:38.640
We'll we'll we'll partition by gender, OK, so we'll have our people and then we can say where the

65
00:04:38.640 --> 00:04:40.530
people's gender.

66
00:04:41.600 --> 00:04:42.500
Equals.

67
00:04:43.950 --> 00:04:44.940
Female, right?

68
00:04:47.360 --> 00:04:54.140
Now, I could just stop right here, and if I were to do so, what this would, this would behave very

69
00:04:54.140 --> 00:05:02.750
similarly to the grouping by where you only pass in just the one input in that it would return a map

70
00:05:02.750 --> 00:05:07.310
where the keys in this particular case would be true or false.

71
00:05:07.490 --> 00:05:07.970
OK.

72
00:05:08.420 --> 00:05:13.340
And then the values would be, by default, a list of all the people.

73
00:05:13.370 --> 00:05:15.380
OK, so that's what we would get from this.

74
00:05:15.380 --> 00:05:18.170
And in fact, let's go ahead and just take a look at that real quick.

75
00:05:18.650 --> 00:05:23.300
So as you see, we're getting the red marks again, and that's because the return type doesn't match

76
00:05:23.300 --> 00:05:25.100
what this would would return.

77
00:05:25.400 --> 00:05:31.060
So if I put my cursor over here and do an option, enter, I can have the ID e change the return type.

78
00:05:31.070 --> 00:05:37.160
And so you see right here it returns a map of a Boolean to list of people, right?

79
00:05:37.490 --> 00:05:39.650
So the true and the false.

80
00:05:39.770 --> 00:05:44.420
And then for each grouping of true or false, you're going to get a list of the people right.

81
00:05:44.630 --> 00:05:48.050
So you'll get one list of the women and another list of the men.

82
00:05:48.470 --> 00:05:48.740
All right.

83
00:05:48.790 --> 00:05:54.530
Oh, and before we run this, we're probably going to want to limit our results because again, this

84
00:05:54.530 --> 00:05:55.760
will be five million records.

85
00:05:55.760 --> 00:05:57.800
So I'm going to uncomment our limit.

86
00:05:57.800 --> 00:06:00.110
And I don't know, let's do maybe two hundred.

87
00:06:01.070 --> 00:06:01.460
All right.

88
00:06:01.790 --> 00:06:09.590
And so then let's run this, OK, so now we see that we've got a key of false and then we've got a bunch

89
00:06:09.590 --> 00:06:10.470
of people, right?

90
00:06:10.490 --> 00:06:12.560
So here's one person, Damian.

91
00:06:12.890 --> 00:06:16.190
And another person, Walker, and so on and so forth.

92
00:06:17.120 --> 00:06:22.160
I don't know that I'm going to be able to find where the ladies are in this easily.

93
00:06:23.150 --> 00:06:28.430
I guess I could maybe try doing a search for true.

94
00:06:28.610 --> 00:06:29.270
There it is.

95
00:06:29.300 --> 00:06:29.630
OK.

96
00:06:29.660 --> 00:06:30.940
Well, yeah, I can find them.

97
00:06:30.950 --> 00:06:33.830
So the true would be all of the women, right?

98
00:06:33.830 --> 00:06:43.430
Because true matches with this expression here, this predicate that we passed in right where gender

99
00:06:43.430 --> 00:06:46.010
equals four female right, so true.

100
00:06:46.250 --> 00:06:48.020
So these would be all of the women.

101
00:06:48.020 --> 00:06:52.750
And in fact, we see female names now, Elizabeth and uh.

102
00:06:54.420 --> 00:06:55.590
Argentina, huh?

103
00:06:55.740 --> 00:07:03.600
I didn't know that could be a lady's name, Imogene or Imogene, hey, associata bond and so on and

104
00:07:03.600 --> 00:07:04.010
so forth.

105
00:07:04.230 --> 00:07:05.760
So these are all the ladies, right?

106
00:07:06.990 --> 00:07:07.980
So there you go there.

107
00:07:08.010 --> 00:07:09.510
That's how that can work.

108
00:07:10.260 --> 00:07:15.230
Now, of course, we can get a little more sophisticated, just like we can with the grouping by and

109
00:07:15.270 --> 00:07:17.100
pretty much it works the same way, right?

110
00:07:17.340 --> 00:07:27.180
So if we don't want the list of people, but instead we want to reduce them down to other values like

111
00:07:27.450 --> 00:07:31.920
let's do count, right, let's let's see how many men and how many women there are.

112
00:07:31.950 --> 00:07:32.640
Let's do that.

113
00:07:32.910 --> 00:07:33.270
All right.

114
00:07:33.280 --> 00:07:38.970
So to determine the counts of the count of men versus women.

115
00:07:40.170 --> 00:07:47.130
All we need to do here is go down to the partitioning function and now we're going to add in an additional

116
00:07:47.430 --> 00:07:48.100
collector.

117
00:07:48.120 --> 00:07:48.400
Right.

118
00:07:48.420 --> 00:07:54.660
So just like we would have done with the grouping by, we can put a comma here and then specify a collector.

119
00:07:55.920 --> 00:07:56.940
So let's see.

120
00:07:56.940 --> 00:08:00.360
What we will do is use the.

121
00:08:01.770 --> 00:08:03.810
Counting collector.

122
00:08:05.590 --> 00:08:10.720
And in this particular case, it's as easy as that, right, because we are we're not doing anything

123
00:08:10.720 --> 00:08:17.020
with any fields or anything like that, we're just going to count the total number of items from the

124
00:08:17.020 --> 00:08:19.780
stream per partition or grouping.

125
00:08:19.810 --> 00:08:20.170
Right.

126
00:08:20.620 --> 00:08:26.140
And now you see that we've got the red areas again because now we're not going to return a mapping of

127
00:08:26.140 --> 00:08:28.690
Boolean to a list of people.

128
00:08:28.840 --> 00:08:35.710
It will now presumably be a mapping of a Boolean to an integer or along, probably along.

129
00:08:35.740 --> 00:08:36.250
Let's see.

130
00:08:36.520 --> 00:08:41.580
So if I put my cursor here and see if we can have the ADP fix that for us, there we go.

131
00:08:41.590 --> 00:08:42.100
Yes, it's a.

132
00:08:42.700 --> 00:08:47.290
And the way I could kind of guess that it was going to be along is the fact that I've told you before.

133
00:08:47.470 --> 00:08:53.830
Generally speaking, in Java, when you're counting items and especially you don't really know how many

134
00:08:53.920 --> 00:09:01.150
items there might be, the default tends to be to use a long for that type of situation or scenario.

135
00:09:01.510 --> 00:09:01.880
All right.

136
00:09:01.900 --> 00:09:02.950
And let's see.

137
00:09:02.950 --> 00:09:09.550
And now that we're just counting and we're not actually going to print out the items, I don't think

138
00:09:09.550 --> 00:09:11.260
we need this limit anymore.

139
00:09:11.490 --> 00:09:17.680
Now, you know, now that we're reducing the lists of people down to just a count of two numbers, right?

140
00:09:17.890 --> 00:09:19.870
So I don't think we need this limit anymore.

141
00:09:20.080 --> 00:09:21.490
This should go fairly quickly.

142
00:09:21.640 --> 00:09:23.350
And so let's run it and see.

143
00:09:24.480 --> 00:09:25.470
All right, there we go.

144
00:09:25.770 --> 00:09:29.190
And so what do we have there?

145
00:09:29.430 --> 00:09:33.960
Two point four, nine million men, I think it is.

146
00:09:34.380 --> 00:09:39.270
And two point five million women.

147
00:09:39.720 --> 00:09:40.890
So there you go.

148
00:09:41.160 --> 00:09:41.490
All right.

149
00:09:41.490 --> 00:09:43.590
So that's how you could do that.

150
00:09:43.590 --> 00:09:48.630
And then the last scenario that I want to show is kind of the granddaddy of them.

151
00:09:49.050 --> 00:09:52.650
We can actually use partitioning and grouping together.

152
00:09:52.680 --> 00:09:53.040
Right?

153
00:09:53.730 --> 00:10:01.260
Because really any any function that you can use, any any collector function really can be utilized

154
00:10:01.680 --> 00:10:04.050
in this second spot here, right?

155
00:10:04.380 --> 00:10:05.340
So let's say.

156
00:10:05.370 --> 00:10:08.100
So currently, we're partitioning by gender.

157
00:10:08.310 --> 00:10:13.230
So let's also secondarily partition by state.

158
00:10:13.410 --> 00:10:13.890
OK.

159
00:10:14.250 --> 00:10:18.780
So what I'm going to do is I'm going to delete that counting by animal to make a new line here, just

160
00:10:18.780 --> 00:10:24.570
so I have a little more space to think, right, so we're going to do a grouping by and let's see.

161
00:10:24.600 --> 00:10:31.080
So the first thing we're going to give is the classifier, which you should now know is just a function

162
00:10:31.080 --> 00:10:38.760
or a method reference or a lambda where we can specify the field essentially that we want to be grouping

163
00:10:38.760 --> 00:10:39.060
by.

164
00:10:39.090 --> 00:10:39.360
Right.

165
00:10:39.600 --> 00:10:46.380
So in this particular case, we can simply use a method reference of the person class for the state.

166
00:10:46.500 --> 00:10:46.830
Right.

167
00:10:47.130 --> 00:10:47.400
All right.

168
00:10:47.400 --> 00:10:55.950
So here we are doing grouping by the state and then I don't know now if I left it right here, we'd

169
00:10:55.950 --> 00:11:03.430
get a map of a map of states and then the list of people.

170
00:11:03.450 --> 00:11:06.600
So we'd be back to the business of having those lists of people.

171
00:11:06.600 --> 00:11:07.290
We don't want that.

172
00:11:07.290 --> 00:11:10.290
Let's reduce those lists down to something again, right?

173
00:11:10.560 --> 00:11:13.340
So let's just do the count again.

174
00:11:13.350 --> 00:11:18.420
So we will count the people by state, by gender.

175
00:11:18.590 --> 00:11:18.990
OK.

176
00:11:19.350 --> 00:11:28.980
So to do that then will simply pop over here and then use the counting collector method again.

177
00:11:29.310 --> 00:11:31.050
Collector function again.

178
00:11:31.290 --> 00:11:31.590
All right.

179
00:11:31.600 --> 00:11:33.960
And so now we've got red squiggles again.

180
00:11:34.230 --> 00:11:36.970
And let's see if the ID will clean that up for us.

181
00:11:36.990 --> 00:11:37.740
Yes, it will.

182
00:11:37.980 --> 00:11:39.660
And so we'll have it do that.

183
00:11:39.840 --> 00:11:45.660
And so now you see here that we're getting a mapping of a Boolean to a map and then the secondary map

184
00:11:45.660 --> 00:11:51.870
is a mapping of strings, which are the states and then long, which is the count, right?

185
00:11:52.410 --> 00:11:52.930
All right.

186
00:11:52.950 --> 00:11:54.840
And so then we can run that.

187
00:11:55.470 --> 00:11:55.830
All right.

188
00:11:55.830 --> 00:11:56.880
So here we are.

189
00:11:57.480 --> 00:11:59.400
So first, we have got the men.

190
00:11:59.760 --> 00:12:03.990
And so there are, what, eight thousand one hundred two men in Hawaii?

191
00:12:05.340 --> 00:12:06.660
Is the D. Delaware?

192
00:12:06.660 --> 00:12:07.500
I think Texas.

193
00:12:07.500 --> 00:12:10.530
So yeah, and then we can jump over to the women.

194
00:12:11.640 --> 00:12:12.570
So let's see.

195
00:12:12.570 --> 00:12:13.530
That would be true.

196
00:12:15.620 --> 00:12:22.610
And there we go, so there are the number of women by state as well.

197
00:12:23.390 --> 00:12:23.840
All right.

198
00:12:23.870 --> 00:12:24.290
So.

199
00:12:25.430 --> 00:12:28.100
That is how you can use partitioning.

200
00:12:28.700 --> 00:12:33.950
Like I said, it's very similar to grouping and you can actually mix and match both of them.

201
00:12:34.220 --> 00:12:37.740
And you could also keep going with the partitioning.

202
00:12:37.790 --> 00:12:41.750
So as I showed with grouping, you can actually nest layers of grouping.

203
00:12:41.840 --> 00:12:44.360
You could actually do the same with partitioning as well.

204
00:12:45.320 --> 00:12:49.640
And then all of the other bits work pretty much the same way between the two of them.

205
00:12:50.240 --> 00:12:50.720
All right.

206
00:12:50.720 --> 00:12:56.540
So that's going to wrap up this lesson on partitioning, and I will see you in the next one.
