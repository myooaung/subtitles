WEBVTT
1
00:00:00.180 --> 00:00:05.550
So now let's look at a few more things that we can do with the big decimal class, such as alternative

2
00:00:05.550 --> 00:00:11.520
ways of instantiating a big decimal, which you should prefer not to use under most circumstances.

3
00:00:11.520 --> 00:00:15.060
But let's just take a look at them and then a few other methods as well.

4
00:00:15.480 --> 00:00:17.940
So see here, we'll clear this out.

5
00:00:18.720 --> 00:00:20.400
So very, very quickly.

6
00:00:20.400 --> 00:00:24.020
Let's just see that we can create a big decimal.

7
00:00:24.030 --> 00:00:27.450
Let's create a variable like number one.

8
00:00:28.830 --> 00:00:30.600
And let's instantiated here.

9
00:00:30.610 --> 00:00:37.350
So instead of using a string which should always be your preferred approach to creating a big decimal

10
00:00:37.350 --> 00:00:42.660
if you have any choice in the matter at all, right, so you can always do this.

11
00:00:42.930 --> 00:00:48.360
This will give maximum precision in your numbers with big, big decimal.

12
00:00:48.480 --> 00:00:53.230
But let's say for some reason that you can't do this or don't want to do this.

13
00:00:53.460 --> 00:00:58.230
So we'll take a quick look at some of the alternative constructors that do exist.

14
00:00:58.560 --> 00:01:04.440
So there are a number of them we can pass in a character array, which is actually pretty much just

15
00:01:04.440 --> 00:01:07.710
as good as a string, except maybe a little less convenient.

16
00:01:07.950 --> 00:01:15.820
I'm not going to show how to do that, but each digit of the number would be one element in this character.

17
00:01:16.020 --> 00:01:20.670
And by the way, we haven't really learned officially how to make arrays yet anyway.

18
00:01:20.680 --> 00:01:23.940
So we'll come back to that in a later, in a later lesson.

19
00:01:24.810 --> 00:01:27.510
All right, so you can you character A's and strings.

20
00:01:27.750 --> 00:01:35.790
You can obviously initialize with another big integer, but then you also can pass in some of the primitive

21
00:01:35.790 --> 00:01:39.180
types, such as a double or an entry long.

22
00:01:39.270 --> 00:01:40.910
So let's see what that might look like.

23
00:01:40.920 --> 00:01:49.230
So if we were to pass in a double, let's do three point one four one five nine two like so and then

24
00:01:49.230 --> 00:01:49.830
close that.

25
00:01:49.860 --> 00:01:50.670
So there you go.

26
00:01:51.120 --> 00:01:56.250
So there's a short version of Pi being used to initialize the big decimal.

27
00:01:56.370 --> 00:01:59.400
And so let me just restate for like the third or fourth time.

28
00:01:59.670 --> 00:02:07.710
You should prefer not to do it this way because before actually being used to initialize this big decimal,

29
00:02:07.710 --> 00:02:13.800
this number gets represented in the computer's memory as a primitive double.

30
00:02:14.010 --> 00:02:21.810
And we've already seen that the computer has to essentially approximate this fractional component of

31
00:02:21.810 --> 00:02:25.020
the number before it can store it in binary.

32
00:02:25.140 --> 00:02:31.680
And the act of doing so opens us up to the possibility of losing some precision.

33
00:02:31.830 --> 00:02:34.800
In other words, you end up with an approximation.

34
00:02:35.130 --> 00:02:35.610
OK.

35
00:02:35.760 --> 00:02:39.030
And so we just want to avoid that whenever possible.

36
00:02:39.240 --> 00:02:43.290
The whole point of using a big decimal is to get maximum accuracy.

37
00:02:43.440 --> 00:02:50.070
And if you do something like this, initializing a big decimal from a primitive floating type such as

38
00:02:50.070 --> 00:02:56.880
double or float, you're off to a bad start if your goal was to achieve maximum accuracy.

39
00:02:57.360 --> 00:03:02.850
Now it could be that that's, you know, the best that you can do and you want to still use big decimal

40
00:03:02.860 --> 00:03:09.480
so that you don't lose any further accuracy or precision as you start to carry out your various math

41
00:03:09.480 --> 00:03:10.380
operations.

42
00:03:10.380 --> 00:03:12.210
And you know, that's a valid point.

43
00:03:12.450 --> 00:03:15.180
But just use a string whenever possible.

44
00:03:15.420 --> 00:03:15.790
All right.

45
00:03:15.810 --> 00:03:20.490
And then if we wanted to initialize with a float, you could just put an f behind there.

46
00:03:20.490 --> 00:03:22.770
And bam, now you're initializing with a float.

47
00:03:22.920 --> 00:03:24.210
It's as simple as that.

48
00:03:24.480 --> 00:03:31.470
And then, of course, you can also do integers or shorts or whatever.

49
00:03:31.590 --> 00:03:36.300
By the way, you could also do something like, let's say we want to create a short.

50
00:03:37.020 --> 00:03:40.770
My short equals one two three four.

51
00:03:41.100 --> 00:03:45.450
So then we could initialize with this variable here.

52
00:03:46.200 --> 00:03:47.730
So you can do that as well.

53
00:03:47.910 --> 00:03:51.360
And then you can change this over to whatever type you want.

54
00:03:51.390 --> 00:03:56.670
So I won't be able to make that a byte because that's too big, but I could do 100 here.

55
00:03:56.940 --> 00:04:05.040
And so now, of course, I probably should be changing this, this variable name to to my byte now.

56
00:04:05.280 --> 00:04:05.710
All right.

57
00:04:05.730 --> 00:04:07.000
So I think you get the gist.

58
00:04:07.020 --> 00:04:14.310
You can initialize the big decimal with any of the typical numeric primitives types as well as strings

59
00:04:14.310 --> 00:04:17.130
and characters prefer string.

60
00:04:17.880 --> 00:04:20.010
All right, so enough of that.

61
00:04:20.160 --> 00:04:27.690
So now let's look at a few other methods that exist on the big decimal, besides those for doing math

62
00:04:27.690 --> 00:04:28.530
operations.

63
00:04:28.950 --> 00:04:35.190
So we'll do a number one dot, and we'll just take a quick look at a few of the useful one.

64
00:04:35.190 --> 00:04:41.790
So there are methods for converting from a big decimal back to other numeric types.

65
00:04:41.970 --> 00:04:47.220
So, for example, you could get a bite value out of a big decimal.

66
00:04:47.760 --> 00:04:57.750
So if I call this, I can capture this with an option command fee and then I can print this be just

67
00:04:57.750 --> 00:04:58.380
like so.

68
00:04:59.590 --> 00:05:02.410
There's that one hundred and now it's a bite again.

69
00:05:02.650 --> 00:05:11.710
Now, obviously, this will only be meaningful if the value in the big decimal can actually be represented

70
00:05:11.710 --> 00:05:12.610
as a bite.

71
00:05:12.820 --> 00:05:14.050
So let's see what happens.

72
00:05:14.050 --> 00:05:19.870
I'm going to I'm going to get rid of this, my bait thing, and I'm going to initialize this with a

73
00:05:19.870 --> 00:05:25.180
string and then use something that cannot easily be represented as a byte, such as three point one

74
00:05:25.180 --> 00:05:27.010
four one five nine two.

75
00:05:28.000 --> 00:05:29.320
Let's see what happens here.

76
00:05:31.160 --> 00:05:37.760
So we're telling Big Decimal to take this number and give us a byte equivalent of it, so look what

77
00:05:37.760 --> 00:05:45.110
it did it it just stripped off the fractional parts because you can't encode fractions in a byte.

78
00:05:45.440 --> 00:05:48.300
So it just took that off and gave us the three.

79
00:05:48.320 --> 00:05:50.030
So it did the best that it could do there.

80
00:05:50.240 --> 00:05:55.280
What would happen, though, if we were to initialize this big decimal with a number that is outside

81
00:05:55.280 --> 00:06:00.200
of the range or beyond the range of a byte, such as one zero two four?

82
00:06:00.350 --> 00:06:06.740
If you'll recall, the range of a byte is minus 128 to positive 127.

83
00:06:06.950 --> 00:06:10.310
So 1024 would be well outside the range of a byte.

84
00:06:10.310 --> 00:06:11.630
Let's see what happens here.

85
00:06:11.990 --> 00:06:14.540
OK, so it just becomes a zero.

86
00:06:15.080 --> 00:06:15.590
All right.

87
00:06:15.800 --> 00:06:21.380
Now there are other methods that we could use, though, and let's take a look at some of those.

88
00:06:21.590 --> 00:06:28.400
In fact, what I'll do here is let's just replace this, and we'll just directly refer to some of these

89
00:06:28.400 --> 00:06:29.360
other methods.

90
00:06:30.290 --> 00:06:36.020
OK, so we could get the byte value, we could get the double value.

91
00:06:36.320 --> 00:06:37.400
Let's try that one.

92
00:06:38.630 --> 00:06:38.950
All right.

93
00:06:38.960 --> 00:06:44.180
So that works great because 1024 as well within the range of a double.

94
00:06:44.330 --> 00:06:47.420
And then obviously, we could have put some decimal points on here as well.

95
00:06:47.460 --> 00:06:48.820
Not going to bother to do that.

96
00:06:48.830 --> 00:06:49.700
I think you get it.

97
00:06:49.940 --> 00:06:55.280
So there's getting the double value and then there's and you can get an end.

98
00:06:57.140 --> 00:06:58.130
Or a float?

99
00:06:59.670 --> 00:07:06.270
All right, and then the maybe the last method that I want to talk about really quickly here is the

100
00:07:06.600 --> 00:07:14.310
two string method, which we've actually already been using extensively every time we pass a big decimal

101
00:07:14.310 --> 00:07:21.720
into a print line method that is resulting in the two string method of the big decimal class getting

102
00:07:21.720 --> 00:07:22.230
called.

103
00:07:22.410 --> 00:07:25.680
That's how these values are getting printed to the screen.

104
00:07:25.980 --> 00:07:30.170
I just wanted to call out explicitly, though, that there is a two string method.

105
00:07:30.180 --> 00:07:41.070
And so if you ever needed to convert a big decimal into a string explicitly, you could even do something

106
00:07:41.070 --> 00:07:42.960
like capturing that string.

107
00:07:43.140 --> 00:07:47.520
My string equals number one to string.

108
00:07:48.270 --> 00:07:54.160
And so now you have just converted the value of a big decimal into a string.

109
00:07:54.180 --> 00:07:59.910
Now, in this case, it looks kind of like a useless thing to do because you started off in this particular

110
00:07:59.910 --> 00:08:02.340
case with a string in the first place.

111
00:08:02.490 --> 00:08:09.420
But regardless of how you initialized the big decimal internally, it will no longer be a string anymore

112
00:08:09.690 --> 00:08:13.110
until you call to string to have it converted to a string.

113
00:08:13.320 --> 00:08:19.050
So there can be a number of good reasons why you might want to do that, especially when you want to

114
00:08:19.050 --> 00:08:25.050
present big decimals and their values to a user in an application or something.

115
00:08:25.230 --> 00:08:25.830
All right.

116
00:08:26.400 --> 00:08:31.890
And the last thing I want to mention, which I'm going to just throw into this last little bit on on

117
00:08:31.890 --> 00:08:38.090
Big Decimal is the big decimal class has a sibling, which is called big integer.

118
00:08:38.130 --> 00:08:42.420
I don't have a ton to say about big integer, but I'll just briefly discuss it.

119
00:08:42.420 --> 00:08:51.270
So just as we can create a big decimal, we can create a big integer like so my end, and it works pretty

120
00:08:51.270 --> 00:08:52.920
much the exact same way.

121
00:08:53.100 --> 00:08:57.270
So we can initialize it with a string.

122
00:08:58.020 --> 00:09:07.740
So the whole point of big integer is that it is capable of representing integers much larger than any

123
00:09:07.740 --> 00:09:10.890
of the other primitive data types for numbers.

124
00:09:11.130 --> 00:09:20.070
So you will recall that the largest primitive numerical type that we learned was a long and a long has

125
00:09:20.070 --> 00:09:21.600
64 bits.

126
00:09:21.840 --> 00:09:30.480
So if you needed to still have numbers even larger than what a long is capable of representing, which

127
00:09:30.480 --> 00:09:34.500
is a really large number, I don't even remember what that number was quintillion or something.

128
00:09:34.770 --> 00:09:40.890
If you needed for some reason to be able to handle numbers larger than that big integer would be the

129
00:09:40.890 --> 00:09:41.580
way to go.

130
00:09:42.120 --> 00:09:49.560
Incidentally, you may also have been wondering, OK, well, how is Big Decimal actually able to get

131
00:09:49.560 --> 00:09:51.210
around the rounding problems?

132
00:09:51.330 --> 00:09:54.120
I'm not going to go into much detail on that.

133
00:09:54.150 --> 00:10:01.440
However, I will say that internally the big decimal actually uses a big integer, and the basic approach

134
00:10:01.710 --> 00:10:09.300
that is used is that when we create a big decimal to represent a number such as, let's say, three

135
00:10:09.300 --> 00:10:19.950
point one four one five nine two, basically what ends up happening is that the big decimal class basically

136
00:10:19.980 --> 00:10:25.050
takes that decimal and moves it until it's left with just an integer.

137
00:10:25.680 --> 00:10:26.050
OK.

138
00:10:26.070 --> 00:10:29.010
So in other words, it goes from three point one four blah blah blah.

139
00:10:29.940 --> 00:10:34.110
Two three one four one five nine two.

140
00:10:34.770 --> 00:10:35.220
OK.

141
00:10:35.550 --> 00:10:42.570
So that decimal will have been moved in this case to the right until you're left with an integer.

142
00:10:42.750 --> 00:10:47.340
Obviously, it has to keep track of how many times it moved that decimal, though.

143
00:10:47.640 --> 00:10:48.120
OK.

144
00:10:48.300 --> 00:10:52.380
So that when it's done doing its calculations, it can put the decimal back.

145
00:10:52.590 --> 00:11:00.480
But by converting a number with a fractional component into a number with no fractional components suddenly

146
00:11:00.480 --> 00:11:03.360
maintaining precision, it becomes a lot easier.

147
00:11:03.360 --> 00:11:08.030
And doing all the math at that point is pretty straightforward as well.

148
00:11:08.040 --> 00:11:12.000
And then all that has to be done is to put the decimal point back.

149
00:11:12.150 --> 00:11:22.290
Once the math operations are done and it stores these newly created integers inside of a big integer,

150
00:11:22.680 --> 00:11:29.010
and because of that, the integer values can be ridiculously big.

151
00:11:29.220 --> 00:11:29.640
Right?

152
00:11:29.700 --> 00:11:31.240
Thus, the term big integer.

153
00:11:31.770 --> 00:11:39.720
So that's the gist of how Big Decimal is able to get around the problem of precision and rounding that

154
00:11:39.870 --> 00:11:44.340
the floating point primitive data types cannot get around.

155
00:11:44.430 --> 00:11:48.690
OK, so it's actually kind of pretty simple and straightforward, actually.

156
00:11:48.840 --> 00:11:56.010
So I think that's going to wrap up our conversation on Big Decimal and its sibling, Big Integer, and

157
00:11:56.010 --> 00:11:57.450
I will see you in the next one.
