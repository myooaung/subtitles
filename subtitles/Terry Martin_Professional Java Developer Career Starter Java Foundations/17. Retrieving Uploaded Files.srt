1
00:00:00,240 --> 00:00:00,670
All right.

2
00:00:00,690 --> 00:00:08,130
So now that we've implemented the ability to upload a photo or really any kind of a file from the browser

3
00:00:08,160 --> 00:00:13,710
to the back end, it only makes sense that we would now enable ourselves to go the opposite direction

4
00:00:13,830 --> 00:00:19,050
and grab files from the back end and bring them forth into the browser.

5
00:00:19,320 --> 00:00:26,490
And because we focused so far on uploading photos specifically, let's do something kind of cool.

6
00:00:26,670 --> 00:00:34,020
So we've got here in the table currently this photo column where we're just showing the name of the

7
00:00:34,020 --> 00:00:36,030
photo file that we uploaded.

8
00:00:36,600 --> 00:00:39,470
Why don't we change that, though, to actually show the photo right?

9
00:00:39,570 --> 00:00:40,350
Let's do that.

10
00:00:40,380 --> 00:00:41,400
That would be kind of cool.

11
00:00:41,880 --> 00:00:46,950
So the first thing I think we should do is just learn a tiny little bit about the HTML that would be

12
00:00:46,950 --> 00:00:49,260
needed to show a photo in general.

13
00:00:49,560 --> 00:00:55,380
So now let's jump back into our template file and let's find our table.

14
00:00:55,560 --> 00:00:58,290
There it is, and there's the photo header.

15
00:00:58,290 --> 00:01:02,850
And so here's the photo data cell for each row, right?

16
00:01:03,390 --> 00:01:10,830
So let's see what this would kind of look like if we were to embed images in that column, OK?

17
00:01:11,130 --> 00:01:18,540
And I think maybe we'll start off with is I'm going to duplicate that line and then I will comment out

18
00:01:18,900 --> 00:01:20,640
where we started from, OK?

19
00:01:20,940 --> 00:01:29,730
Because I think for right now, we won't use this timely text attribute, and instead we will replace

20
00:01:29,730 --> 00:01:30,480
the body of this.

21
00:01:30,490 --> 00:01:36,210
So right now, I'm just going to show for illustrative purposes the general type of HTML elements that

22
00:01:36,210 --> 00:01:39,090
we have to use to display an image, OK?

23
00:01:39,330 --> 00:01:42,240
And and this will be a broken image for right now.

24
00:01:42,690 --> 00:01:42,990
All right.

25
00:01:43,020 --> 00:01:48,450
So what you will use is an image tag, which is just IMG like.

26
00:01:48,450 --> 00:01:55,770
So and then the image tag has a number of attributes that you can specify, such as source, which is

27
00:01:55,770 --> 00:02:03,360
required and that will refer to a UI, URL or a file essentially that represents the image that you

28
00:02:03,360 --> 00:02:04,500
want to display.

29
00:02:04,530 --> 00:02:04,950
OK.

30
00:02:05,310 --> 00:02:09,690
And then there are a couple other attributes that I think might be useful here.

31
00:02:09,900 --> 00:02:17,370
Specifically, the height and the width, because I think we'd want to control how tall and wide these

32
00:02:17,370 --> 00:02:20,640
images are within the context of our table.

33
00:02:20,850 --> 00:02:23,370
Our table is already pretty well constrained.

34
00:02:23,520 --> 00:02:30,480
So even if we uploaded a very large image, we wouldn't want that image to display at full size.

35
00:02:30,690 --> 00:02:36,930
So for right now, what I'm thinking is constraining the height and width to something like 30 pixels,

36
00:02:36,930 --> 00:02:41,700
and we can just do do it this way, and we'll set the width to 30.

37
00:02:41,700 --> 00:02:42,690
Pixels is 30.

38
00:02:43,050 --> 00:02:44,790
I'm sorry, I said 30 30 pixels.

39
00:02:44,790 --> 00:02:45,990
32 pixels.

40
00:02:46,020 --> 00:02:46,410
All right.

41
00:02:46,590 --> 00:02:50,610
And if I refresh less to see what that does so far?

42
00:02:51,920 --> 00:02:58,760
OK, so we now have these broken images here, but that's really what I wanted to kind of show was to

43
00:02:58,760 --> 00:03:01,130
get a basic idea of what that was going to look like.

44
00:03:01,220 --> 00:03:05,480
And I think the 32 by 30 to the mention, looks decent here.

45
00:03:05,930 --> 00:03:12,980
OK, so now all we have to do is actually figure out how to retrieve those images that we uploaded.

46
00:03:13,520 --> 00:03:15,890
Wherever there is one available, at least.

47
00:03:16,550 --> 00:03:16,860
All right.

48
00:03:16,880 --> 00:03:18,430
Now one more thing I want to do.

49
00:03:18,440 --> 00:03:22,730
I'm going to put a dummy sauce value in here for now.

50
00:03:22,880 --> 00:03:27,710
So I'll just say Jake jpg and let's reload that.

51
00:03:28,370 --> 00:03:31,160
OK, now it's of course going to still be broken.

52
00:03:31,170 --> 00:03:38,420
And then let's open up the dev tools in the browser and refresh this page.

53
00:03:38,900 --> 00:03:44,600
OK, so what I wanted to show here is the way that the browser actually deals with images.

54
00:03:44,780 --> 00:03:51,080
You might have assumed that when the browser makes its request to the server to retrieve the HTML for

55
00:03:51,080 --> 00:03:57,890
the given page that the images and the HTML and everything all come back in one response, but they

56
00:03:57,890 --> 00:03:58,910
actually don't.

57
00:03:59,150 --> 00:04:05,630
What actually happens is that first, the browser makes a request for the page contents itself, which

58
00:04:05,630 --> 00:04:06,950
is generally the HTML.

59
00:04:06,950 --> 00:04:10,340
And that's this request right here, where it says people OK.

60
00:04:10,400 --> 00:04:15,830
But then after it receives the HTML, which will mostly look like what we have here, except without

61
00:04:15,830 --> 00:04:20,690
the Time-Life attributes, because those will all have been interpreted on the server side.

62
00:04:21,170 --> 00:04:28,700
So once the browser receives the interpreted HTML, it will then scan through it to see if there are

63
00:04:28,700 --> 00:04:36,110
any additional resources that it needs to request, and images are one of those types of resources.

64
00:04:36,320 --> 00:04:43,790
And so for each unique image source that the browser sees, it will make separate calls to retrieve

65
00:04:43,790 --> 00:04:44,930
those resources.

66
00:04:45,110 --> 00:04:53,270
And so we actually see right here the browsers attempt to retrieve an image called Jake that jpg using

67
00:04:53,270 --> 00:04:54,370
the get method.

68
00:04:54,380 --> 00:05:00,080
In fact, now it received what's called a 404 status code, which means that the file wasn't there on

69
00:05:00,080 --> 00:05:02,610
the server because I just made that name up.

70
00:05:02,630 --> 00:05:03,110
OK.

71
00:05:03,410 --> 00:05:11,630
But my point here is to show that the browser actually will request each unique image of a page, especially

72
00:05:11,630 --> 00:05:13,670
if it has never seen those images before.

73
00:05:13,820 --> 00:05:18,950
Now, if it has seen those images before and has already previously downloaded them, it will usually

74
00:05:18,950 --> 00:05:25,280
by default cache those images, which just means to store a copy of those images somewhere on the computer.

75
00:05:25,400 --> 00:05:30,410
Which is why probably most of you are familiar with clearing your cache, especially like when you're

76
00:05:30,410 --> 00:05:35,600
on a website and you think that it's looking a little stale, like you're not seeing the latest version

77
00:05:35,600 --> 00:05:36,350
of that site.

78
00:05:36,620 --> 00:05:42,200
That may be because your browser is caching some of the resources or some of the information on that

79
00:05:42,200 --> 00:05:47,510
page, and so you need to clear the cache to force the browser to update what it's displaying.

80
00:05:47,810 --> 00:05:52,080
But in general, the browser will just go out and go retrieve each of those images.

81
00:05:52,100 --> 00:05:58,730
And so this means that we need to either put those images somewhere where they can be retrieved by the

82
00:05:58,730 --> 00:06:06,920
browser or and this is what we're actually going to do, or we need to enable our application to receive

83
00:06:06,920 --> 00:06:13,760
those, get requests for the images and then load those images back up and then return them back to

84
00:06:13,760 --> 00:06:14,540
the browser.

85
00:06:14,540 --> 00:06:19,100
And that's how we're going to do it, because that will actually show you more interesting techniques.

86
00:06:19,220 --> 00:06:24,590
So first off, though, I do want to at least just mention very briefly that first approach that we're

87
00:06:24,590 --> 00:06:28,820
not going to do because honestly, it would in many ways be the easier approach.

88
00:06:29,120 --> 00:06:37,970
So if I open up my project pane here and just show you the structure of our project, you will recall

89
00:06:37,970 --> 00:06:40,370
that we've got this resources folder here.

90
00:06:40,370 --> 00:06:43,580
And then under that, we've got static and templates.

91
00:06:43,940 --> 00:06:51,230
So one thing that we could have done, to be perfectly honest with you, is I could have actually,

92
00:06:51,230 --> 00:06:52,280
let's do this.

93
00:06:52,430 --> 00:06:56,340
Let me let me go into the file storage repository here.

94
00:06:56,450 --> 00:07:02,960
OK, so hopefully you recall that we have this storage folder variable here, which is getting injected

95
00:07:03,230 --> 00:07:07,640
by spring with an environment variable called storage folder.

96
00:07:07,790 --> 00:07:15,500
And on my computer, I set this folder to correspond to an uploads folder within my own home directory,

97
00:07:15,710 --> 00:07:23,120
but I could have set that variable value to anything, including I could have set it to a location under

98
00:07:23,120 --> 00:07:26,750
this static folder so I could have made an uploads folder here.

99
00:07:27,170 --> 00:07:32,600
And then I could have set that environment variable to point to resources, static uploads or whatever

100
00:07:32,600 --> 00:07:34,010
the full path would have been.

101
00:07:34,400 --> 00:07:39,190
And then the application might have tried to upload those files to that folder.

102
00:07:39,200 --> 00:07:44,720
Now I'm just going to tell you right now if this application had been deployed onto a server in a fairly

103
00:07:44,720 --> 00:07:50,150
typical way, that approach probably actually wouldn't have worked for reasons that have to deal with

104
00:07:50,150 --> 00:07:51,020
directory map.

105
00:07:51,070 --> 00:07:57,550
Being and the way that an archived Java application kind of works, so that pretty much would not have

106
00:07:57,550 --> 00:08:01,960
worked on a server, I probably could have made it work though here.

107
00:08:01,990 --> 00:08:06,040
OK, so actually that is another reason why we probably shouldn't have done that anyway.

108
00:08:06,430 --> 00:08:07,750
But I just wanted to point that out.

109
00:08:07,790 --> 00:08:15,520
If we had caused the photos to be uploaded into a folder like this, then it would have been very easy

110
00:08:15,520 --> 00:08:25,540
to simply point the source attribute of our image tag right here to something like forward slash uploads,

111
00:08:25,720 --> 00:08:28,300
slash and then whatever the name of the picture was.

112
00:08:28,450 --> 00:08:33,370
And that would have retrieved those pictures very easily, and we wouldn't have had to write any additional

113
00:08:33,370 --> 00:08:33,760
code.

114
00:08:33,880 --> 00:08:34,210
All right.

115
00:08:34,240 --> 00:08:36,370
Now, having said that, we're not doing it that way.

116
00:08:36,460 --> 00:08:36,730
All right.

117
00:08:36,740 --> 00:08:38,950
So then how are we going to do this?

118
00:08:39,310 --> 00:08:45,490
Well, what we're going to do is we're going to need to come up with a path that will map to another

119
00:08:45,490 --> 00:08:47,260
method on our controller.

120
00:08:47,470 --> 00:08:51,520
Technically, it doesn't have to be the same controller, by the way, we could map paths to multiple

121
00:08:51,520 --> 00:08:52,120
controllers.

122
00:08:52,150 --> 00:08:55,300
I'm just doing everything, all within the people controller for now.

123
00:08:55,820 --> 00:09:03,760
But we will use a special path that will map to a new method on our controller, and that method will

124
00:09:03,760 --> 00:09:10,360
respond to get requests, but it will retrieve images that we are requesting.

125
00:09:10,390 --> 00:09:11,410
That's basically it.

126
00:09:11,890 --> 00:09:13,600
So let me show you how we can do this.

127
00:09:13,720 --> 00:09:20,920
So currently, the base path that results in requests being routed to our current people controller

128
00:09:21,340 --> 00:09:25,120
is forward slash people like so.

129
00:09:25,180 --> 00:09:28,180
And let me just remind you of how that's working.

130
00:09:28,390 --> 00:09:34,840
So in our people controller, we've got at the very top of the controller itself, this request mapping

131
00:09:34,840 --> 00:09:36,010
forward slash people.

132
00:09:36,020 --> 00:09:38,020
OK, so that's at the highest level.

133
00:09:38,020 --> 00:09:39,190
What is telling spring?

134
00:09:39,340 --> 00:09:45,190
Hey, if you see any requests come in that start with forward slash people, route them to the people

135
00:09:45,190 --> 00:09:46,130
controller class.

136
00:09:46,150 --> 00:09:47,680
So that's the first step.

137
00:09:47,950 --> 00:09:56,050
Now from there, we will want to introduce a new method that can further handle these requests and differentiate

138
00:09:56,050 --> 00:09:56,190
them.

139
00:09:56,290 --> 00:09:58,000
They're going to be get requests right.

140
00:09:58,210 --> 00:10:04,450
And so we need these requests to be differentiated from requests that are just trying to get this whole

141
00:10:04,450 --> 00:10:05,620
entire page OK.

142
00:10:05,770 --> 00:10:12,730
Because like right here, show people page that returns, people currently that respond to just a general

143
00:10:12,790 --> 00:10:14,050
get request, OK?

144
00:10:14,290 --> 00:10:21,210
So obviously, we need another method that also handles get requests but doesn't map to just slash people.

145
00:10:21,220 --> 00:10:23,890
We need a little more than slash people.

146
00:10:23,920 --> 00:10:24,370
OK.

147
00:10:24,400 --> 00:10:31,810
So jumping back over here, what I think I would do is maybe say something like slash people slash images,

148
00:10:31,810 --> 00:10:33,860
perhaps something like that.

149
00:10:33,880 --> 00:10:35,470
I think that could make sense.

150
00:10:35,890 --> 00:10:36,230
All right.

151
00:10:36,250 --> 00:10:42,250
And so then we're going to need to specify the actual file name itself, the file that we're trying

152
00:10:42,250 --> 00:10:43,000
to retrieve.

153
00:10:43,210 --> 00:10:45,400
And so you already see that up here.

154
00:10:45,410 --> 00:10:49,280
We were able to refer to that file name this way, right?

155
00:10:49,300 --> 00:10:50,680
Using timelines.

156
00:10:50,800 --> 00:10:55,720
However, now here we're doing it by using the timely text attribute.

157
00:10:55,990 --> 00:11:00,490
But down here in this image, we can't use that text attribute in this way.

158
00:11:00,760 --> 00:11:07,330
So what we can do, though, is that, of course, as with just about everything, time actually has

159
00:11:07,330 --> 00:11:12,700
a special source attribute that we can use alternatively to this one here.

160
00:11:12,910 --> 00:11:18,790
So we're going to have to modify this just a little bit so that we can use this file name value here.

161
00:11:18,910 --> 00:11:25,270
And so the way we can do that is by using a T-H, as you might have imagined colon source or SIRC that

162
00:11:25,270 --> 00:11:26,310
stands for source.

163
00:11:26,320 --> 00:11:32,320
And then over here, we have to use time Leaf's own special way of specifying things, right?

164
00:11:32,530 --> 00:11:36,640
And that would be with an at symbol and then curly brace.

165
00:11:36,850 --> 00:11:40,600
And I'm just going to wrap all of this in the in the curly brace.

166
00:11:41,020 --> 00:11:47,140
And you'll see this symbol utilized a lot when you referring to use URLs and paths and things of that

167
00:11:47,140 --> 00:11:48,520
sort with Time-Life.

168
00:11:48,640 --> 00:11:48,940
All right.

169
00:11:48,940 --> 00:11:57,850
So people flash images and then we can refer to a variable name such as file name like so.

170
00:11:58,120 --> 00:12:03,760
However, now that's not enough because we want to get the person photo file name right.

171
00:12:04,030 --> 00:12:10,390
So the way that we're going to do that is this you can think of this variable here as a local variable.

172
00:12:10,390 --> 00:12:12,220
And remember, we learned about local variables.

173
00:12:12,220 --> 00:12:18,670
Local variables are variables that only have scope or only exist within, usually a code block.

174
00:12:18,850 --> 00:12:25,720
So if you think of everything that's in between these outer curly braces as a code block and in fact,

175
00:12:25,720 --> 00:12:30,340
in Java, code blocks are typically implemented between two curly braces, right?

176
00:12:30,820 --> 00:12:34,600
So you can think of this as a local variable.

177
00:12:34,810 --> 00:12:40,450
And so we need to actually initialize this local variable with a value, OK, and that value will be

178
00:12:40,450 --> 00:12:41,710
what's up here, person?

179
00:12:41,950 --> 00:12:43,090
Photo file name.

180
00:12:43,240 --> 00:12:48,880
Unfortunately, I do not know of a way that is as concise as what I'm about to show you here, where

181
00:12:48,880 --> 00:12:50,980
we could just directly put person.

182
00:12:51,040 --> 00:12:56,350
That photo file name in here without doing a lot of extra stuff, which wouldn't be as concise.

183
00:12:56,740 --> 00:12:57,020
All right.

184
00:12:57,040 --> 00:13:04,690
So anyway, next we will put our cursor right after that file name, curly brace there and then put

185
00:13:05,170 --> 00:13:06,610
a pair of parentheses.

186
00:13:06,730 --> 00:13:13,870
And so within these parentheses, we can define the local variable of file name and we can simply say

187
00:13:13,870 --> 00:13:16,180
file name equals.

188
00:13:16,390 --> 00:13:19,840
And then here we can specify what we've got here.

189
00:13:19,840 --> 00:13:22,320
Right, person, that photo file name.

190
00:13:22,330 --> 00:13:24,880
So I will put that right in there.

191
00:13:24,880 --> 00:13:25,630
Like so.

192
00:13:25,660 --> 00:13:31,600
So I'm sorry that that's a tad bit overly complex looking, but that's just how timely wants us to do

193
00:13:31,600 --> 00:13:31,810
it.

194
00:13:32,080 --> 00:13:35,800
And so what will happen is this value will be interpreted.

195
00:13:36,280 --> 00:13:42,940
It will then be stored in a local variable, if you will, called file name and then file name will

196
00:13:42,940 --> 00:13:47,020
get interpreted within the greater context of this string here.

197
00:13:47,050 --> 00:13:52,390
OK, well, now what's one thing that is kind of nice, at least, is that Time-Life will interpret

198
00:13:52,390 --> 00:13:54,400
the rest of this literally.

199
00:13:54,430 --> 00:13:58,930
OK, and then append the value of this file name variable on to the end.

200
00:13:58,930 --> 00:14:01,090
So at least that part is kind of nice, I think.

201
00:14:01,450 --> 00:14:01,830
All right.

202
00:14:01,840 --> 00:14:04,360
So that should take care of that part.

203
00:14:04,570 --> 00:14:10,750
So then we need to jump over to our controller and actually make a method that will actually respond

204
00:14:10,780 --> 00:14:13,120
to requests that look like this.

205
00:14:13,690 --> 00:14:19,600
So we'll jump back over here, and maybe I will just put this new method right underneath the current

206
00:14:19,600 --> 00:14:21,750
get method that we have here to get mapping.

207
00:14:21,760 --> 00:14:25,330
All right, so this can be a new public method.

208
00:14:25,750 --> 00:14:28,270
Now the return type is going to be unique.

209
00:14:28,720 --> 00:14:34,900
Up until now, we've mostly been doing return types of type string and you know that these handler methods

210
00:14:34,900 --> 00:14:41,650
by default, when they return a string, that string represents the name of the view file that we want

211
00:14:41,650 --> 00:14:42,190
to load.

212
00:14:42,370 --> 00:14:44,680
So in this case, it would have been people died.

213
00:14:44,890 --> 00:14:50,750
HTML is what is the view file that's going to get loaded up and then kind of returned.

214
00:14:50,770 --> 00:14:51,100
Right?

215
00:14:51,430 --> 00:14:54,070
But in this case, we don't want to return any HTML.

216
00:14:54,070 --> 00:14:59,470
We want to return an actual response that references an image.

217
00:14:59,500 --> 00:14:59,950
OK.

218
00:15:00,100 --> 00:15:01,560
That's what we want to return.

219
00:15:01,810 --> 00:15:07,090
And so to do that, which is kind of a special case, I would say, relative to what you would normally

220
00:15:07,090 --> 00:15:13,540
be doing within a spring MVC controller, we're going to specify a different return type.

221
00:15:13,900 --> 00:15:22,570
And that return type is response entity and response entity is a generic type, so we can specify that

222
00:15:22,570 --> 00:15:26,650
this is a response for something called a resource, OK?

223
00:15:26,740 --> 00:15:29,230
And that's just like a very generic term.

224
00:15:29,410 --> 00:15:32,560
That means that you could be returning just about anything, really.

225
00:15:32,770 --> 00:15:38,500
So to do that, though, we will use our generic, our generic indicator there, and then we will simply

226
00:15:38,500 --> 00:15:43,240
say resource like, so now be careful which resource class you reference.

227
00:15:43,420 --> 00:15:50,080
We actually want this one here, the second one for spring framework that core that i o like.

228
00:15:50,080 --> 00:15:52,790
So all right, so that'll be our return type.

229
00:15:53,080 --> 00:16:00,010
And then we can give this method a name so we could just generically call it something like get resource.

230
00:16:00,580 --> 00:16:06,470
And maybe that's OK for now, and we'll come back and fill in what we're actually going to receive there.

231
00:16:06,490 --> 00:16:09,370
But let me just finish this much.

232
00:16:09,550 --> 00:16:09,970
OK.

233
00:16:10,270 --> 00:16:10,570
All right.

234
00:16:10,570 --> 00:16:12,480
So that's the basic scaffolding.

235
00:16:12,970 --> 00:16:16,330
And then we might as well go ahead and set up the mapping as well.

236
00:16:16,340 --> 00:16:19,120
So this will also be using a get mapping.

237
00:16:19,450 --> 00:16:25,270
But obviously, we do need to differentiate requests that should be routed to this new method versus

238
00:16:25,270 --> 00:16:28,600
the requests that are being routed currently to the show people page.

239
00:16:28,780 --> 00:16:32,360
And so we can do that by using parentheses.

240
00:16:32,380 --> 00:16:38,050
Now, up until now, we've been differentiating certain requests using parameters.

241
00:16:38,290 --> 00:16:42,520
However, in this case, we can actually differentiate by using the path, right?

242
00:16:42,730 --> 00:16:51,670
Because as you saw, we are going to these images path, and so that will allow us to differentiate.

243
00:16:52,570 --> 00:16:58,690
So then I'm actually going to specify images, forward slash images and then another forward slash.

244
00:16:58,690 --> 00:17:05,200
They're actually technically these forward slash is especially the leading one is is optional.

245
00:17:05,290 --> 00:17:10,900
Spring is smart enough to know that even if I leave this forward slash out, it will recognize people

246
00:17:10,900 --> 00:17:12,470
slash images it.

247
00:17:12,470 --> 00:17:17,680
It understands that, but sometimes out of habit, I may just prefix it with that forward slash there,

248
00:17:17,680 --> 00:17:19,450
but spring is pretty smart about that.

249
00:17:19,840 --> 00:17:27,370
Now this trailing forward slash I do actually need because I'm going to specify that I want also to

250
00:17:27,370 --> 00:17:32,800
capture the file name that is going to be referenced within this path.

251
00:17:32,830 --> 00:17:33,160
OK.

252
00:17:33,280 --> 00:17:39,070
So again, jumping back over here, you see that we're going to say forward slash people slash images

253
00:17:39,070 --> 00:17:42,730
slash and then we're going to specify the file name right there, right?

254
00:17:43,360 --> 00:17:48,880
So we need to capture that file name when the incoming requests, which will contain that file name

255
00:17:49,060 --> 00:17:50,760
comes into the controller.

256
00:17:50,910 --> 00:17:51,220
Acid.

257
00:17:51,250 --> 00:17:56,550
OK, we need to capture that so we can do that with what's called a path variable.

258
00:17:56,640 --> 00:17:57,020
OK.

259
00:17:57,450 --> 00:17:59,730
And I can name this path variable something.

260
00:17:59,910 --> 00:18:07,020
So I'm just going to call it reset source like so and so now down here in the actual method itself,

261
00:18:07,020 --> 00:18:12,720
I need to tell Spring to inject whatever it captured here as a variable down here.

262
00:18:12,720 --> 00:18:17,340
And so this should be pretty familiar to how you've seen us do lots of this kind of stuff already,

263
00:18:17,340 --> 00:18:18,660
with one exception, though.

264
00:18:18,750 --> 00:18:23,100
So first, let's go ahead and just set a type and this can be a string because it'll just be a file

265
00:18:23,100 --> 00:18:23,760
name, really?

266
00:18:24,060 --> 00:18:27,060
OK, now I'm going to just name it resource.

267
00:18:27,330 --> 00:18:27,750
OK.

268
00:18:28,230 --> 00:18:36,390
However, because I want this value to come from this captured path variable here, I need to help spring

269
00:18:36,390 --> 00:18:39,240
out to know that that's what I wanted to inject here.

270
00:18:39,420 --> 00:18:44,510
And so there is an annotation called at path variable like cell.

271
00:18:44,910 --> 00:18:53,160
And just like the request parameters, if I don't specify the actual name of the path, then by default,

272
00:18:53,370 --> 00:18:56,970
spring will simply match up this name with that name.

273
00:18:57,090 --> 00:19:03,090
However, if I was calling this name here something different, then of course I could come over here

274
00:19:03,090 --> 00:19:07,980
and specify what that what that different path variable name was.

275
00:19:08,010 --> 00:19:08,450
OK.

276
00:19:09,030 --> 00:19:12,420
So that works pretty much the same as the request parameters.

277
00:19:12,780 --> 00:19:13,140
All right.

278
00:19:13,150 --> 00:19:20,190
So then once we've got all of that now, we can actually proceed to try to retrieve this file that is

279
00:19:20,190 --> 00:19:21,270
being requested.

280
00:19:21,570 --> 00:19:29,040
So let's jump over to the what was the file storage repository because we're going to need to implement

281
00:19:29,040 --> 00:19:31,680
a find type of method now, right?

282
00:19:31,710 --> 00:19:32,970
We've got a save method.

283
00:19:33,090 --> 00:19:35,250
Now we need a find method, if you will.

284
00:19:35,700 --> 00:19:37,710
So let's create that.

285
00:19:38,070 --> 00:19:39,300
So this will be public.

286
00:19:39,510 --> 00:19:46,530
Now, the return type here can still be a resource because resources from the spring framework are not

287
00:19:46,530 --> 00:19:47,810
web specific.

288
00:19:47,850 --> 00:19:51,540
OK, there they are specific to spring, but they aren't specific to the web.

289
00:19:51,690 --> 00:19:57,300
So I'm OK with with returning something of type resource here.

290
00:19:57,690 --> 00:20:01,750
So we'll return a resource and again, make sure you're referring to.

291
00:20:01,770 --> 00:20:04,920
Org That spring framework that core that I like.

292
00:20:04,920 --> 00:20:12,480
So and I will name this method similarly to how my normal database repository methods would be named.

293
00:20:12,480 --> 00:20:16,860
And so I'm going to call this find by name, I suppose.

294
00:20:17,370 --> 00:20:21,840
And then it will accept an input of a file name.

295
00:20:23,010 --> 00:20:25,590
All right, now, what do you think I'm going to do here?

296
00:20:25,770 --> 00:20:29,760
It's going to be kind of related to what we did up here, really.

297
00:20:30,000 --> 00:20:32,070
So we're going to need to build a path again.

298
00:20:32,070 --> 00:20:35,910
And in fact, we're going to pretty much use all of this same code.

299
00:20:36,390 --> 00:20:45,120
So I'm going to start off by just copying this whole entire line and pasting it down here, like so.

300
00:20:45,390 --> 00:20:51,000
And then I will change this to file name like, so let's get a little more space here.

301
00:20:51,570 --> 00:20:59,130
Now, I certainly could consider refactoring all of this into a method so that I could just reuse that

302
00:20:59,130 --> 00:21:01,950
method down here in a more simplistic way.

303
00:21:02,340 --> 00:21:05,580
And honestly, for me, I'm kind of on a 50 50 with that.

304
00:21:05,580 --> 00:21:08,040
Like, I don't think it would be bad or wrong.

305
00:21:08,280 --> 00:21:15,270
The only reason why I might not choose to do that in this particular case at this time is because it

306
00:21:15,270 --> 00:21:18,090
would still just be one line of code right now.

307
00:21:18,330 --> 00:21:20,410
It took me two or more lines of code.

308
00:21:20,640 --> 00:21:24,900
I would almost definitely immediately go ahead and refactor that out.

309
00:21:24,930 --> 00:21:27,150
So I'm not saying don't refactor this, by the way.

310
00:21:27,150 --> 00:21:28,140
I'm not saying that at all.

311
00:21:28,260 --> 00:21:33,210
I'm just saying in this particular case, it's just one line and it's only a couple, a couple of little

312
00:21:33,210 --> 00:21:35,190
steps within that line, essentially.

313
00:21:35,370 --> 00:21:41,790
So I'm not as bothered by one line of duplication because in this case, extracting out a method would

314
00:21:41,790 --> 00:21:44,460
actually result in more lines than what I've already got here.

315
00:21:44,470 --> 00:21:45,540
So I don't know.

316
00:21:45,900 --> 00:21:49,560
Not saying don't do it, but just kind of thinking out loud a little bit there.

317
00:21:49,950 --> 00:21:50,220
All right.

318
00:21:50,250 --> 00:21:51,840
So anyway, there's my path.

319
00:21:53,300 --> 00:22:02,750
And then what I can do now is actually pretty straightforward, I can simply return a new you URL resource

320
00:22:02,750 --> 00:22:11,660
and that's a bring framework class, a new URL resource, and then I can call File Path Dot to Uri.

321
00:22:11,690 --> 00:22:12,170
OK.

322
00:22:12,350 --> 00:22:13,460
Just like that.

323
00:22:13,850 --> 00:22:18,200
Now, obviously, I've got the red squiggly again, and you can guess that's going to be because there's

324
00:22:18,200 --> 00:22:19,880
an un handled exception here.

325
00:22:20,420 --> 00:22:21,200
There always is.

326
00:22:21,200 --> 00:22:25,550
Whenever you're dealing with files and resources and things of that sort, there's always going to be

327
00:22:25,550 --> 00:22:28,250
potential exceptions that can be thrown from there.

328
00:22:28,370 --> 00:22:34,040
So again, for right now, I don't want to fully deal with this in a robust way just yet.

329
00:22:34,220 --> 00:22:41,750
So for now, I'm just going to wrap it in a try catch block like so now because it's possible that these

330
00:22:41,750 --> 00:22:44,240
calls could result in this exception.

331
00:22:44,330 --> 00:22:49,670
That means my method is kind of ambiguous in terms of what it's capable of returning.

332
00:22:49,670 --> 00:22:51,890
And so you may notice that little bitty red there.

333
00:22:52,070 --> 00:22:57,590
It's saying that I've got a missing return statement because if this blows up on Line three, then I

334
00:22:57,590 --> 00:23:01,310
won't be returning anything and the method won't be happy.

335
00:23:01,490 --> 00:23:09,230
So to make that happy for right now, I'm going to have to still specify an alternative return value.

336
00:23:09,230 --> 00:23:13,220
And so the easiest thing I can do for right now is probably just to return a null.

337
00:23:13,290 --> 00:23:17,030
OK, so I will need to come back and address this in a more robust way.

338
00:23:17,040 --> 00:23:20,360
So this is not production quality code that you're seeing here at all.

339
00:23:20,390 --> 00:23:20,660
OK.

340
00:23:20,810 --> 00:23:24,680
We'll come back and address both of these try catch scenarios.

341
00:23:24,920 --> 00:23:25,430
All right.

342
00:23:25,430 --> 00:23:29,150
So there's a way to retrieve our file, though.

343
00:23:29,450 --> 00:23:31,910
So then we can jump back over here to the controller.

344
00:23:32,210 --> 00:23:37,760
And so now we will have the ability to retrieve that file and return it.

345
00:23:37,940 --> 00:23:39,980
So now, though, how do we actually return it?

346
00:23:40,220 --> 00:23:42,260
That's a little bit involved as well.

347
00:23:42,590 --> 00:23:47,630
So what we're going to have to do is to build an HTTP response ourselves.

348
00:23:47,780 --> 00:23:51,560
It won't have to be super involved, but we will have to specify one header.

349
00:23:51,920 --> 00:23:57,410
And now you've seen what these headers look like within the requests and the responses, right?

350
00:23:57,530 --> 00:23:59,930
So we're going to have to build our own response.

351
00:24:00,050 --> 00:24:06,320
And in that response, we're going to specify at least one header for ourselves and then the body of

352
00:24:06,320 --> 00:24:09,920
that response, which will contain our resource, OK?

353
00:24:10,070 --> 00:24:14,690
So we're going to build that, and that's why we're specifying that we're going to return a response

354
00:24:14,690 --> 00:24:20,210
entity because that will allow us to build our own response kind of a little more manually.

355
00:24:20,240 --> 00:24:20,660
OK.

356
00:24:20,930 --> 00:24:21,170
All right.

357
00:24:21,180 --> 00:24:25,190
So the way to do that is to use the response entity class.

358
00:24:25,910 --> 00:24:30,950
And then it has a number of methods on it that make this relatively easy to do.

359
00:24:31,190 --> 00:24:33,890
And so we can start off with response entity.

360
00:24:34,220 --> 00:24:40,130
OK, now what this OK does, I'm not going to go into a lot of detail on it, but in general, whenever

361
00:24:40,340 --> 00:24:47,840
a browser makes a request for a resource to a server, if that resource exists on the server, whether

362
00:24:47,840 --> 00:24:53,120
it's HTML or an image, the server will retrieve that resource and then return it.

363
00:24:53,420 --> 00:24:58,580
And the first thing it will do is return a status code, OK, which lets the browser know in general

364
00:24:58,640 --> 00:25:00,470
what happened with that request.

365
00:25:00,830 --> 00:25:08,350
And so if everything is OK, then the status code of 200 will be returned in the response.

366
00:25:08,360 --> 00:25:14,000
And so what this really is saying is to build a response with a status code of 200.

367
00:25:14,180 --> 00:25:19,670
And there's actually a whole list of these status codes and you can just Google http status codes,

368
00:25:19,670 --> 00:25:23,540
but here are some of those status codes and what they generally mean.

369
00:25:23,540 --> 00:25:26,840
So there are some 100s, but here's 200 right here.

370
00:25:26,870 --> 00:25:27,500
OK.

371
00:25:27,530 --> 00:25:27,860
All right.

372
00:25:27,860 --> 00:25:31,310
So that OK directly corresponds to that number 200.

373
00:25:31,880 --> 00:25:39,410
So we will start off with building a new response with a status code of 200 or OK, and then we will

374
00:25:39,410 --> 00:25:46,310
want to also specify a particular header that we want to have within our response.

375
00:25:46,520 --> 00:25:49,760
So I'm going to go down to a new line and I'm going to type header.

376
00:25:50,090 --> 00:25:52,610
And now here I can actually specify headers.

377
00:25:52,610 --> 00:25:55,130
And so headers are really just key value pairs.

378
00:25:55,340 --> 00:25:57,900
So you'll see these patterns used all over the web.

379
00:25:57,920 --> 00:25:58,280
OK.

380
00:25:58,310 --> 00:25:59,870
And in computing in general, right?

381
00:25:59,990 --> 00:26:01,940
You got a key and then a value.

382
00:26:02,210 --> 00:26:02,600
All right.

383
00:26:03,050 --> 00:26:08,690
And we don't even have to fully memorize exactly what some of these headers need to be in.

384
00:26:08,690 --> 00:26:11,240
In our case, we only need to specify just this one.

385
00:26:11,600 --> 00:26:17,870
So what we can do if we don't want to memorize this particular header is that we can actually refer

386
00:26:17,870 --> 00:26:21,070
to HTTP headers from the spring framework.

387
00:26:21,080 --> 00:26:27,020
So there's this class here HDP headers under or spring framework that HTP.

388
00:26:27,080 --> 00:26:27,440
All right.

389
00:26:27,440 --> 00:26:34,340
So http headers dot and then we're going to specify a header called content disposition.

390
00:26:34,640 --> 00:26:35,090
All right.

391
00:26:35,240 --> 00:26:38,570
Now I know that sounds like a whole bunch of whatever, right?

392
00:26:38,780 --> 00:26:40,760
But you can actually read up on this as well.

393
00:26:40,790 --> 00:26:42,980
I will just show you very briefly here.

394
00:26:43,520 --> 00:26:43,850
Yeah.

395
00:26:44,090 --> 00:26:51,170
So here I am on a really popular reference page on the internet from developer dot Mozilla dot org.

396
00:26:51,380 --> 00:26:52,310
And it's specified.

397
00:26:52,820 --> 00:26:57,200
What kinds of headers can exist in both requests and responses?

398
00:26:57,230 --> 00:26:57,620
OK.

399
00:26:57,890 --> 00:27:04,550
And so this is just showing the format of a content disposition header and what it's for.

400
00:27:04,700 --> 00:27:11,720
Basically, it allows us to specify that, hey, this response is going to include an attachment and

401
00:27:11,720 --> 00:27:17,270
that attachments file name is file name that jpg like in this particular example, OK?

402
00:27:17,390 --> 00:27:20,630
And when I say attachment, I mean, just like attachments in email.

403
00:27:20,630 --> 00:27:26,720
And in fact, when you attach a file to an email, email uses some of these exact same mechanisms.

404
00:27:26,720 --> 00:27:32,210
So the people who have basically designed the way that the internet works have tried to be somewhat

405
00:27:32,210 --> 00:27:38,900
consistent between how the web works and how email messages work and things of that sort.

406
00:27:38,910 --> 00:27:46,580
So a lot of a lot of this stuff here is reused across multiple internet technologies, really?

407
00:27:46,670 --> 00:27:46,940
All right.

408
00:27:47,120 --> 00:27:49,430
So this is really what we're going to be building.

409
00:27:49,460 --> 00:27:49,820
OK.

410
00:27:49,970 --> 00:27:57,650
So when we have this this bit right here, header HD headers that content disposition position that

411
00:27:57,650 --> 00:27:59,720
is going to result in.

412
00:28:01,280 --> 00:28:06,860
A line of text within our response that starts off with exactly this bit right here.

413
00:28:07,100 --> 00:28:12,770
And then after that, we're going to want to add in something that looks like this, except that file

414
00:28:12,770 --> 00:28:15,740
names should be the file name that we are referring to.

415
00:28:15,770 --> 00:28:18,020
OK, that would be the one difference there.

416
00:28:18,320 --> 00:28:20,060
So we actually want that output.

417
00:28:20,060 --> 00:28:23,090
In fact, I could just copy that right there.

418
00:28:23,900 --> 00:28:24,890
Well, actually hold on.

419
00:28:25,340 --> 00:28:28,330
We do want that, that little blank space there.

420
00:28:28,340 --> 00:28:30,470
Also, that's actually important.

421
00:28:31,610 --> 00:28:33,470
So we can copy all of that.

422
00:28:34,370 --> 00:28:44,390
And what I could do is I could make a string variable and let's call it dispo because I don't want to

423
00:28:44,390 --> 00:28:53,720
type out disposition equals and then now notice over here we're going to need to have quotes embedded

424
00:28:53,720 --> 00:28:54,950
in this string.

425
00:28:55,280 --> 00:29:00,710
And so that I can avoid having to do any ugly escaping of the quotation marks.

426
00:29:00,890 --> 00:29:07,850
What I'm going to do here is I'm going to make use of a text block like so and then on a new line all

427
00:29:07,850 --> 00:29:15,500
by itself, I'm going to paste this guy just like this, but then I'm going to replace.

428
00:29:16,770 --> 00:29:20,910
That with a dollar sign s, you know, where I'm going with this.

429
00:29:21,090 --> 00:29:27,240
OK, so then down here on the header, if I do a command, I can see that, OK, the way this works

430
00:29:27,240 --> 00:29:31,710
is you specify the header name, which is right there and then a comma and then the value.

431
00:29:31,710 --> 00:29:36,090
And you actually can use VAR args to specify multiple values if you if you want to.

432
00:29:36,090 --> 00:29:37,140
But I don't need that.

433
00:29:37,380 --> 00:29:41,460
So I'm going to put a comma here and then I'm going to use the string that format.

434
00:29:41,460 --> 00:29:43,190
But to save space, I'm not even going.

435
00:29:43,200 --> 00:29:47,460
I'm going to leave off the string part and just say format like this.

436
00:29:47,610 --> 00:29:53,160
And then I'm going to statically import the format method, which you don't usually see me do.

437
00:29:53,160 --> 00:29:57,750
I usually just type string that format, but I just want to save a little bit of a little bit of space

438
00:29:57,750 --> 00:29:58,050
here.

439
00:29:58,500 --> 00:29:58,740
All right.

440
00:29:58,780 --> 00:30:03,030
And yes, I'm telling you, I want to statically import the string that format method.

441
00:30:03,750 --> 00:30:12,180
And so then I can refer to my dispo variable here comma and then pass in my resource name.

442
00:30:12,510 --> 00:30:14,220
Remember this variable right here?

443
00:30:14,250 --> 00:30:19,760
So again, what's going to happen is the browser is going to request a file like Jake that jpg.

444
00:30:19,770 --> 00:30:21,830
So it'll be forward slash images slash.

445
00:30:22,140 --> 00:30:28,890
Well, actually, it'll be forward slash people slash images slash jake that jpg that jake that jpg

446
00:30:28,890 --> 00:30:32,610
will be captured in this variable passed into my method here.

447
00:30:33,090 --> 00:30:39,720
And so then I can reference that right down here so that this this whole little value will just say

448
00:30:39,720 --> 00:30:42,240
attachment, blah blah blah file name equals Jake.

449
00:30:42,240 --> 00:30:43,140
That jpg.

450
00:30:43,200 --> 00:30:46,050
OK, so that's what I'm doing with all of that.

451
00:30:46,410 --> 00:30:52,650
And then I need to specify what will actually be in the body of this response, right?

452
00:30:52,650 --> 00:30:57,600
Because here I'm just building the headers, but I need to build the actual body also.

453
00:30:57,900 --> 00:31:01,190
And let me just show you a little bit bigger picture of what this response would look like.

454
00:31:01,200 --> 00:31:02,880
So here's a really good example right here.

455
00:31:03,030 --> 00:31:04,910
So here's a response you.

456
00:31:04,920 --> 00:31:06,240
It starts off with the 200.

457
00:31:06,240 --> 00:31:11,790
OK, so that's what's going to be rendered as a result of calling the response that entity that.

458
00:31:11,820 --> 00:31:12,360
OK.

459
00:31:12,390 --> 00:31:12,840
Method.

460
00:31:12,840 --> 00:31:16,290
Just like that, then you're going to get your header now.

461
00:31:16,290 --> 00:31:22,140
The only header that we're specifying here is this content disposition, when at least that's the only

462
00:31:22,140 --> 00:31:28,410
one that we would that we are explicitly specifying, OK, so we're building that header just like that

463
00:31:28,800 --> 00:31:31,380
and then we need to build the body now.

464
00:31:31,380 --> 00:31:37,920
This blank space here will be included automatically by the response entity when it builds this response.

465
00:31:38,430 --> 00:31:39,990
But then we need to supply a body now.

466
00:31:39,990 --> 00:31:44,370
In this case, the body of this particular example message is HTML.

467
00:31:44,580 --> 00:31:51,900
In our case, it's going to be the actual data of the image, the bytes essentially of the of the image

468
00:31:51,900 --> 00:31:52,770
file itself.

469
00:31:52,920 --> 00:31:55,380
And so now we need to specify that.

470
00:31:55,860 --> 00:32:02,730
So I'm going to come down here and then specify body and to actually get the value out of there, I'm

471
00:32:02,730 --> 00:32:11,370
going to refer to the file storage repository that find my name and then pass in yet again, a reference

472
00:32:11,370 --> 00:32:16,710
to this resource variable like so and then I can close that off.

473
00:32:17,070 --> 00:32:20,370
And in fact, if I just reformat this a tiny bit.

474
00:32:20,580 --> 00:32:20,910
Right?

475
00:32:21,060 --> 00:32:25,800
So now you can kind of see here we're going to have the OK, then the header and then the body.

476
00:32:26,010 --> 00:32:30,720
And then over here you've got the OK, then the headers and then the body.

477
00:32:31,020 --> 00:32:33,540
So that's what we're that's what we're building here.

478
00:32:33,570 --> 00:32:33,990
OK.

479
00:32:34,140 --> 00:32:40,460
And then I can simply return all of that, or I could have captured it into a variable and then returned

480
00:32:40,460 --> 00:32:41,430
to that either way.

481
00:32:41,760 --> 00:32:49,260
And let's see, I could also make this variable a constant of the class because this will never change.

482
00:32:49,620 --> 00:32:56,800
So I can do an option Command C and sure, I will still just call it dispo enter.

483
00:32:57,200 --> 00:32:57,480
Right.

484
00:32:57,490 --> 00:33:01,410
And so that moved that out of this method and put it up at the top somewhere.

485
00:33:01,440 --> 00:33:02,100
There it is.

486
00:33:02,460 --> 00:33:02,730
All right.

487
00:33:02,730 --> 00:33:04,860
So kind of got it out of our way a little bit.

488
00:33:05,010 --> 00:33:05,700
There we go.

489
00:33:05,730 --> 00:33:06,510
All right.

490
00:33:07,290 --> 00:33:08,070
Let's see.

491
00:33:08,070 --> 00:33:11,580
Let's try this out and see if I forgot something I may very well have.

492
00:33:11,820 --> 00:33:12,420
We'll see.

493
00:33:12,510 --> 00:33:14,790
Let's rebuild and reload our classes.

494
00:33:14,790 --> 00:33:19,530
In fact, let me open up the little thing in there so I can see that actually happening.

495
00:33:21,120 --> 00:33:27,180
Hey, look at what we've got right there, we've got one actual picture of a person.

496
00:33:27,600 --> 00:33:29,280
So that is working.

497
00:33:29,520 --> 00:33:34,770
Now the others aren't here because we never actually got their images uploaded, but now I think we

498
00:33:34,770 --> 00:33:35,850
may be able to fix that.

499
00:33:35,970 --> 00:33:38,470
Let's see what happens if we try to edit some of these.

500
00:33:38,470 --> 00:33:39,420
So let's edit.

501
00:33:39,690 --> 00:33:40,800
Albert Deira.

502
00:33:42,220 --> 00:33:42,850
Edit.

503
00:33:44,240 --> 00:33:49,280
And let's specify a file for Albert, and we've got one right there.

504
00:33:49,940 --> 00:33:51,080
And let's save.

505
00:33:52,170 --> 00:33:58,830
Hey, look at that, we've got an image now for Albert, and I think we've got Stephane also or Stephan.

506
00:33:59,370 --> 00:34:00,000
Edit.

507
00:34:01,370 --> 00:34:02,300
Come down here.

508
00:34:03,490 --> 00:34:09,670
Select the person, Stephan, yet we've got Stephan and then save, look at that.

509
00:34:09,700 --> 00:34:10,950
Oh, I guess, Stefan.

510
00:34:10,960 --> 00:34:12,130
Stefan, I don't know.

511
00:34:12,160 --> 00:34:13,120
Maybe that was a mistake.

512
00:34:13,330 --> 00:34:14,830
Stefan looks like it's a girl.

513
00:34:15,840 --> 00:34:17,160
Looks like Stefan is a girl.

514
00:34:18,390 --> 00:34:18,870
All right.

515
00:34:19,200 --> 00:34:24,390
So and I don't have the others, but we've got images for these people, so those are all loading up

516
00:34:24,390 --> 00:34:25,500
now, right?

517
00:34:25,770 --> 00:34:28,650
So it looks like we are in business for this.

518
00:34:29,250 --> 00:34:29,520
All right.

519
00:34:29,520 --> 00:34:35,550
So maybe in the next lesson, we will go ahead and address those exceptions that I've not been really

520
00:34:35,550 --> 00:34:37,920
wanting to address too much up until now.

521
00:34:38,190 --> 00:34:41,520
The solution for that is actually pretty easy for the most part.

522
00:34:41,880 --> 00:34:45,180
And then we'll also take a look at a few other things that we'll need to do.

523
00:34:45,390 --> 00:34:51,330
And then we'll also revisit some of our other crud methods for the person class and see if we have to

524
00:34:51,360 --> 00:34:55,510
make any alterations to accommodate the images.

525
00:34:55,530 --> 00:35:01,200
Because as I think I mentioned two lessons ago, what happens if we delete one of these records?

526
00:35:01,380 --> 00:35:06,510
Currently, we don't even have a delete method implemented for the images, right?

527
00:35:06,690 --> 00:35:11,970
So those would just sit there orphaned, essentially, and we probably don't want that to happen.

528
00:35:12,240 --> 00:35:15,780
And then also, we've got these broken images here so we can deal with those.

529
00:35:15,780 --> 00:35:17,580
But this lesson is long enough as it is.

530
00:35:17,580 --> 00:35:21,090
So let's take a look at those issues in the upcoming lessons.

531
00:35:21,210 --> 00:35:21,960
So I'll see you there.
