1
00:00:00,120 --> 00:00:00,540
All right.

2
00:00:00,720 --> 00:00:06,690
So continuing on our journey, the next thing up is we're going to take a slightly deeper dive into

3
00:00:06,690 --> 00:00:07,470
options.

4
00:00:07,650 --> 00:00:12,930
Again, this is one of these topics that we've been kind of touching up on in a few of the previous

5
00:00:12,930 --> 00:00:18,690
modules, a little bit here and there, but we haven't taken much of a deep dive into it.

6
00:00:18,900 --> 00:00:25,680
And again, this is one of these topics that I don't think really requires its own complete module.

7
00:00:25,950 --> 00:00:33,330
So we're going to do another just marathon race through most, maybe even all of the methods of optional

8
00:00:33,480 --> 00:00:35,820
so that I can show you a lot of the use cases.

9
00:00:36,390 --> 00:00:42,900
Now one thing about optional is that I really looked at trying to introduce them to you earlier.

10
00:00:43,140 --> 00:00:49,170
But the problem is that a lot of the really cool things that you can do with options is predicated on

11
00:00:49,170 --> 00:00:52,150
your knowledge of lambdas and the streams API.

12
00:00:52,170 --> 00:00:57,660
And so I realized that if I had tried to introduce optional before now, I wouldn't have been able to

13
00:00:57,660 --> 00:01:01,650
go very deep into a lot of the core functionality of them.

14
00:01:01,770 --> 00:01:03,870
So without further ado, let's jump in.

15
00:01:04,440 --> 00:01:09,300
OK, so what we're going to do, first of all, is to create a new class.

16
00:01:09,600 --> 00:01:13,890
And let's see, we'll do that in this same package.

17
00:01:14,130 --> 00:01:17,130
So we created the repository under data store.

18
00:01:17,130 --> 00:01:23,880
So I'm going to click on data store and do a command in and new Java class and create a new class.

19
00:01:23,880 --> 00:01:28,770
And I'm just going to call it optional test because I don't really care what we call it too much.

20
00:01:29,280 --> 00:01:30,390
All right, there we go.

21
00:01:30,390 --> 00:01:37,380
And then I can close down that side there, OK, and make a new line inside of this class, and we'll

22
00:01:37,380 --> 00:01:43,350
create a familiar public static void main method like so so that we can just kind of play around a little

23
00:01:43,350 --> 00:01:45,060
bit with optional.

24
00:01:45,540 --> 00:01:45,810
All right.

25
00:01:45,840 --> 00:01:49,300
And so the first thing we're going to do will be a little bit of review.

26
00:01:49,320 --> 00:01:51,300
You've seen a few of these tricks before.

27
00:01:51,450 --> 00:01:58,860
First thing we're going to do is to create an optional let me and import that of a string.

28
00:01:58,860 --> 00:02:04,200
And we'll just say something like, hello, and then I'm going to capture that string, and I will call

29
00:02:04,200 --> 00:02:06,630
this opt for optional.

30
00:02:06,630 --> 00:02:09,530
And maybe, I don't know, iMessage MSG, OK?

31
00:02:09,990 --> 00:02:13,200
And then let's print that out within our society.

32
00:02:13,380 --> 00:02:17,970
So we'll refer to the optional message there, and let's just run that and see what we get.

33
00:02:17,970 --> 00:02:18,960
So a little bit of review.

34
00:02:19,260 --> 00:02:19,550
All right.

35
00:02:19,560 --> 00:02:20,580
So we're printing this out.

36
00:02:20,580 --> 00:02:25,050
And as you can see, it does print out the word hello, but it's surrounded by this optional thing because

37
00:02:25,350 --> 00:02:28,740
the object that we have here is not a string.

38
00:02:28,920 --> 00:02:31,350
It is an optional of a string, right?

39
00:02:31,350 --> 00:02:32,670
And so optional.

40
00:02:32,700 --> 00:02:38,700
Present themselves with this word optional and then brackets and then whatever thing is inside of it.

41
00:02:38,700 --> 00:02:43,530
And then it's calling the two string method of whatever object is inside of the optional.

42
00:02:43,560 --> 00:02:51,120
So hopefully you may recall that options are really just wrappers for other objects or for nothing at

43
00:02:51,120 --> 00:02:51,390
all.

44
00:02:51,420 --> 00:02:51,720
Right?

45
00:02:51,750 --> 00:02:59,970
They give us the option of representing either some object existing or no object existing in a particular

46
00:03:00,060 --> 00:03:00,630
case.

47
00:03:00,660 --> 00:03:06,630
Let's talk real quick again about what options are really for the the number one use case for them has

48
00:03:06,630 --> 00:03:08,400
to do with null values.

49
00:03:08,880 --> 00:03:14,760
So whenever we're dealing with objects in Java, we store references to objects in variables, right?

50
00:03:15,530 --> 00:03:21,390
And those variables may or may not actually be pointing back to an object.

51
00:03:21,570 --> 00:03:28,250
So, for example, we could create a string called message and put a word in it, right?

52
00:03:28,260 --> 00:03:29,730
Like, like, so OK.

53
00:03:29,850 --> 00:03:36,520
So in this case, the variable mzgee is pointing to the object.

54
00:03:36,540 --> 00:03:37,060
Hello.

55
00:03:37,080 --> 00:03:39,420
OK, which exist somewhere in memory.

56
00:03:39,660 --> 00:03:43,950
But we could also have, I don't know, message to.

57
00:03:45,580 --> 00:03:46,930
Pointing to nothing.

58
00:03:47,350 --> 00:03:47,740
Right?

59
00:03:47,920 --> 00:03:49,450
That's not all right.

60
00:03:50,320 --> 00:03:58,660
And if I try to do something like amnesty to that to upper, and if I run this, that's going to blow

61
00:03:58,660 --> 00:04:00,760
up with a null pointer exception.

62
00:04:00,760 --> 00:04:01,120
There it is.

63
00:04:01,120 --> 00:04:02,830
NULL pointer exception, right?

64
00:04:03,310 --> 00:04:10,570
Because I'm trying to reference a method of a a method of an object that really does not exist.

65
00:04:10,780 --> 00:04:11,230
OK.

66
00:04:11,650 --> 00:04:18,610
And we don't like these null pointer exceptions because they cause our programs to stop, and we usually

67
00:04:18,610 --> 00:04:21,520
don't want our programs to blow up if we can help it.

68
00:04:21,850 --> 00:04:23,680
OK, so optional.

69
00:04:24,280 --> 00:04:34,120
Let us wrap these variables in a little pretty box, and they provide us with some cool methods that

70
00:04:34,480 --> 00:04:40,900
can help us to detect whether or not we actually have any value in the box.

71
00:04:41,050 --> 00:04:45,410
And if we do, then we can proceed to do things with that value.

72
00:04:45,430 --> 00:04:49,240
So, for example, here I've got the message to uppercase, right?

73
00:04:49,480 --> 00:04:54,700
So let's say that I wrap this message in an optional.

74
00:04:55,000 --> 00:05:01,100
So let's see here I could do something like optional sort of Nullarbor.

75
00:05:01,840 --> 00:05:07,710
Now, if you recall, we did look at the optional sort of an optional dot Nullarbor.

76
00:05:07,840 --> 00:05:15,370
In this particular case, I have to create an optional of the message to object using the of Nullarbor

77
00:05:15,370 --> 00:05:21,070
Method, because we can see right here that this guy is no right and we'll talk a little bit more about

78
00:05:21,160 --> 00:05:23,780
when to use of versus of Nullarbor.

79
00:05:23,800 --> 00:05:30,850
But let me just finish up this little example here, so I'm going to embed the message two in there

80
00:05:30,850 --> 00:05:33,460
and then I'm going to capture this.

81
00:05:33,730 --> 00:05:34,840
And I don't know.

82
00:05:34,840 --> 00:05:38,220
Let's just call it Optimus G, too, right?

83
00:05:38,230 --> 00:05:39,910
So the optional message, too.

84
00:05:40,480 --> 00:05:47,710
And now I'm going to come down here and reference that like, so now, as soon as I do that, I get

85
00:05:47,710 --> 00:05:55,530
at an error because there is no two uppercase method existing on the optional class right now.

86
00:05:55,540 --> 00:05:56,820
This is no longer a string.

87
00:05:56,830 --> 00:05:58,540
It's an optional now, right?

88
00:05:58,750 --> 00:06:00,970
And so I cannot call to uppercase.

89
00:06:01,180 --> 00:06:03,700
So then what's the whole point of using the optional right?

90
00:06:04,090 --> 00:06:12,040
Well, now I can use some of the methods on the optional class to determine first whether or not I have

91
00:06:12,070 --> 00:06:17,980
a value here and then only proceed with the rest of this stuff, sort of sort of kind of if there is

92
00:06:17,980 --> 00:06:19,060
something actually there.

93
00:06:19,210 --> 00:06:20,920
So let's take a look real quick here.

94
00:06:21,400 --> 00:06:30,310
I can do something like or else and then I can provide an alternative string if that value was actually

95
00:06:30,310 --> 00:06:30,940
null, right?

96
00:06:30,940 --> 00:06:31,780
So I don't know.

97
00:06:31,780 --> 00:06:35,440
I'll just say alternative like that.

98
00:06:35,560 --> 00:06:39,520
And now I can put a period here and now that's good.

99
00:06:39,550 --> 00:06:40,000
OK.

100
00:06:40,240 --> 00:06:42,370
So let's run this and see what we're going to get.

101
00:06:44,570 --> 00:06:46,820
Oh, I forgot to actually print it out.

102
00:06:47,810 --> 00:06:48,530
Let's see here.

103
00:06:48,560 --> 00:06:52,460
So tell you what we'll do, so we'll just capture the output of that.

104
00:06:54,490 --> 00:06:57,640
Final output, and then we'll print that out.

105
00:06:58,150 --> 00:06:59,080
Final output.

106
00:06:59,110 --> 00:06:59,800
There we go.

107
00:06:59,860 --> 00:07:00,850
Let's run that.

108
00:07:01,780 --> 00:07:05,140
OK, so we get the word alternative in all caps.

109
00:07:05,290 --> 00:07:12,880
And that makes sense because what this is saying is check and see what value is inside of this optional

110
00:07:13,480 --> 00:07:15,190
if there is a value in it.

111
00:07:15,490 --> 00:07:18,040
Then go ahead and return that value.

112
00:07:18,310 --> 00:07:18,560
Right.

113
00:07:18,620 --> 00:07:24,610
So then this whole entire thing would become whatever that value was that was in here if it wasn't null

114
00:07:25,000 --> 00:07:32,140
and then we would proceed with the two uppercase or else, though, if it is null, if the value that

115
00:07:32,140 --> 00:07:40,450
is inside of this optional is null, then return this value that I'm supplying here, which is alternative.

116
00:07:40,750 --> 00:07:45,340
And so then in that case, this whole entire thing becomes the value of alternative.

117
00:07:45,580 --> 00:07:49,210
And now still, this two uppercase will work, right?

118
00:07:49,450 --> 00:07:54,100
So the point of all of this is that it should now be impossible.

119
00:07:54,100 --> 00:08:02,560
I hope to get a null pointer exception as a result of this value here being null because this or else

120
00:08:02,560 --> 00:08:08,980
is essentially doing some fancy, if then else logic for us, but really, really compactly, right?

121
00:08:09,160 --> 00:08:14,470
And I think I showed that in probably the Stream's module, right?

122
00:08:14,470 --> 00:08:19,790
So this or else is saying, if blah blah blah is not null, then return whatever blah blah blah is.

123
00:08:20,230 --> 00:08:22,590
Or else return alternative, right?

124
00:08:22,600 --> 00:08:24,190
That's why this is saying or else.

125
00:08:25,000 --> 00:08:25,320
OK.

126
00:08:25,450 --> 00:08:29,950
And then I said we'd come back and talk a little bit more about the of knowable, which we've spoken

127
00:08:29,950 --> 00:08:32,470
about before, but this is just a quick reminder.

128
00:08:33,130 --> 00:08:40,000
So in this case, I just had to use this of knowable in order to create an optional of this message,

129
00:08:40,000 --> 00:08:44,560
too, because right here we can see clearly that this value is null.

130
00:08:44,800 --> 00:08:48,660
But let's go ahead and see what would have happened if I had not done it that way.

131
00:08:48,670 --> 00:08:54,490
Someone to just clear some things out a little bit here, so we'll not use the unknowable and instead

132
00:08:54,490 --> 00:08:59,740
we'll just use of right and then we will.

133
00:09:01,900 --> 00:09:02,980
Print that guy.

134
00:09:04,410 --> 00:09:10,050
And I'm not even going to bother with the fancy footwork to get the actual value out of it, we'll just

135
00:09:10,050 --> 00:09:13,440
stop right here and let's run that and see what happens.

136
00:09:13,470 --> 00:09:18,420
OK, so we get an old pointer exception with a nice stack trace, and now we know how to read the stack

137
00:09:18,420 --> 00:09:19,590
trace a little better, right?

138
00:09:19,860 --> 00:09:26,790
So starting from the top, this line here is not code that we wrote, so I do not care about it.

139
00:09:26,970 --> 00:09:31,770
This line here is also not code that we wrote, and so I don't care about it either.

140
00:09:32,040 --> 00:09:37,290
And so now down here, this is the first line in the stack trace that is code that we wrote.

141
00:09:37,350 --> 00:09:39,810
And that's the code I care about, which is line nine.

142
00:09:39,810 --> 00:09:42,210
And I can click on that and let's see where it blew up.

143
00:09:42,220 --> 00:09:43,350
So look at this.

144
00:09:43,530 --> 00:09:44,820
It blew up on Line nine.

145
00:09:44,940 --> 00:09:49,770
Some of you might have thought that it might have blown up down here when we actually tried to do something,

146
00:09:49,770 --> 00:09:53,550
although if you thought about it, that wouldn't actually make sense because even if this had just been

147
00:09:53,550 --> 00:09:54,720
interpreted as a null.

148
00:09:54,900 --> 00:09:56,100
We know that system out.

149
00:09:56,100 --> 00:10:00,030
That print line is doesn't have any problems with printing out a null, right?

150
00:10:00,270 --> 00:10:03,660
So that wouldn't have been an issue there, but it blew up here.

151
00:10:03,930 --> 00:10:12,150
The reason for that is that this of method here is expecting that the value you're passing in to it

152
00:10:12,150 --> 00:10:13,390
is not null.

153
00:10:13,470 --> 00:10:13,830
OK.

154
00:10:14,010 --> 00:10:15,840
So you can almost think of it as this.

155
00:10:16,200 --> 00:10:21,750
You would use an optional dot of so that you could intentionally test.

156
00:10:21,750 --> 00:10:26,970
In part, this is one of the reasons why you would use it so that you could intentionally test and make

157
00:10:26,970 --> 00:10:32,460
sure that the values that you were passing in to it were not null, OK?

158
00:10:32,610 --> 00:10:41,190
And its behavior is going to be to blow up with a null pointer exception if those values are in fact

159
00:10:41,220 --> 00:10:41,560
null.

160
00:10:41,580 --> 00:10:41,970
OK.

161
00:10:42,330 --> 00:10:46,830
So you should generally only be using optional sort of in maybe two cases.

162
00:10:47,070 --> 00:10:53,100
First case is you're 100 percent certain that the values that you will be passing into it won't be null.

163
00:10:53,700 --> 00:11:00,720
The second case, though, would be you're not sure if the values might be null and you're OK with your

164
00:11:00,720 --> 00:11:03,180
program blowing up with a null pointer exception.

165
00:11:03,180 --> 00:11:09,130
And in fact, maybe in some cases you want that to happen, because let's say that the variables that

166
00:11:09,130 --> 00:11:15,000
she'll be passing into the optional dot of ninety nine point nine percent of the time should not be

167
00:11:15,000 --> 00:11:15,450
null.

168
00:11:16,020 --> 00:11:21,300
And if they are, then you've got bigger problems and you want to know about those problems, right?

169
00:11:21,480 --> 00:11:23,790
I eluded to this a little bit in.

170
00:11:23,790 --> 00:11:27,840
I think the last lesson also where sometimes we want things to blow up on purpose.

171
00:11:27,840 --> 00:11:34,680
We don't want our program to just carry on happily when unexpected circumstances occur.

172
00:11:35,010 --> 00:11:41,550
In some cases, we want the program to blow up and die with a nice stack trace so that we can learn

173
00:11:41,550 --> 00:11:45,510
what's going on rather than just like sweeping it under the rug, right?

174
00:11:45,540 --> 00:11:51,240
We don't want things to be swept under the rug because that could result in worse problems.

175
00:11:51,480 --> 00:11:57,420
Think of programs that might be trying to store data in a database across millions of records or something,

176
00:11:57,750 --> 00:12:00,480
and you've got some underlying issue that you were not aware of.

177
00:12:00,600 --> 00:12:04,140
And now, like millions of records of data, are corrupted, right?

178
00:12:04,320 --> 00:12:08,100
Because you decided to just hide or ignore some exceptions.

179
00:12:08,310 --> 00:12:09,150
So don't do that.

180
00:12:09,510 --> 00:12:09,900
All right.

181
00:12:09,900 --> 00:12:13,170
So that's what happens with the optional data, right?

182
00:12:13,170 --> 00:12:17,970
It blows up as soon as you try to pass into it, a value that is null.

183
00:12:18,270 --> 00:12:23,490
If you don't want that behavior, you have to use of null a bull, which then doesn't do that check.

184
00:12:23,580 --> 00:12:25,800
And it's kind of like, maybe there's a value there.

185
00:12:25,800 --> 00:12:26,700
Maybe there isn't.

186
00:12:26,940 --> 00:12:30,060
You will figure it out later on in the in the thread, right?

187
00:12:30,570 --> 00:12:30,840
All right.

188
00:12:30,840 --> 00:12:35,940
So next up, let's look at a few more of the basic methods that exist on an optional.

189
00:12:36,270 --> 00:12:42,050
So we'll start with perhaps the most basic one, which is get right.

190
00:12:42,690 --> 00:12:45,600
So and by the way, let me let's fix this.

191
00:12:45,900 --> 00:12:48,030
Otherwise, we won't be getting too far.

192
00:12:48,840 --> 00:12:49,200
All right.

193
00:12:49,470 --> 00:12:50,070
So.

194
00:12:51,260 --> 00:12:55,580
Now we've got our get here, so now let's run this and see what happens.

195
00:12:55,610 --> 00:13:02,510
OK, so now we get a no such element exception and it is occurring on line 10 now.

196
00:13:02,630 --> 00:13:02,990
Right?

197
00:13:03,650 --> 00:13:04,640
Which is this line.

198
00:13:04,650 --> 00:13:10,580
So because we're using the of Nullarbor, we're not blowing up online nine anymore.

199
00:13:10,970 --> 00:13:15,860
When we pass in this null value now, we're blowing up down here with this get.

200
00:13:16,010 --> 00:13:18,560
So if you may recall the Dot get method.

201
00:13:19,660 --> 00:13:25,270
I actually don't consider it to be all that helpful under a lot of circumstances because it's pretty

202
00:13:25,270 --> 00:13:25,660
dumb.

203
00:13:25,930 --> 00:13:28,370
It just tries to get the value out, OK?

204
00:13:28,570 --> 00:13:32,020
And it doesn't do any checks and it doesn't give us any options.

205
00:13:32,170 --> 00:13:39,210
And I mean, optional, but I mean, like any options of how to do it wisely within the get method itself.

206
00:13:39,220 --> 00:13:41,650
OK, so it's just going to like, go for it.

207
00:13:41,920 --> 00:13:49,030
So oftentimes not a real good method to use because it can result in your program blowing up when you

208
00:13:49,030 --> 00:13:50,440
didn't expect it to.

209
00:13:50,680 --> 00:13:56,950
And in that case, to do what we're doing here is really no better than just not using options at all

210
00:13:57,070 --> 00:14:02,350
and just having a value that could possibly be null and then trying to use it right?

211
00:14:02,380 --> 00:14:08,920
It's pretty much the same thing at this point, especially if we tried to dig in and do something else

212
00:14:08,920 --> 00:14:12,910
like, I don't know, like this to uppercase, right?

213
00:14:13,120 --> 00:14:20,260
If we tried to do that right, in this case, there's no real difference between us doing this versus

214
00:14:20,260 --> 00:14:24,680
doing it, MST2 versus doing that right.

215
00:14:24,700 --> 00:14:25,900
They're both going to blow up.

216
00:14:26,410 --> 00:14:27,820
So no advantage to that.

217
00:14:29,500 --> 00:14:39,610
So the get method is probably only helpful if you combine it with a test and you can do some type of

218
00:14:39,610 --> 00:14:46,240
tests, like if optional message to diet is present.

219
00:14:51,610 --> 00:14:56,650
Then do all of this, right, so now we're wrapping, wrapping this inside of an f block here and we're

220
00:14:56,650 --> 00:15:02,920
testing, so the optional class has this method is present that lets us test whether or not there's

221
00:15:02,920 --> 00:15:04,590
actually a value in there, right?

222
00:15:04,780 --> 00:15:08,950
And in fact, here we'll even throw in both and else there.

223
00:15:11,250 --> 00:15:13,470
There was nothing there.

224
00:15:13,500 --> 00:15:15,240
Right, and let's run that.

225
00:15:15,870 --> 00:15:18,610
So look at what we get now, there was nothing there.

226
00:15:18,630 --> 00:15:19,560
Predictably, right?

227
00:15:19,920 --> 00:15:28,350
So just keep in mind now what we're doing with all of this is equivalent functionally to just doing

228
00:15:28,350 --> 00:15:33,420
something like optional message to that or else.

229
00:15:34,540 --> 00:15:36,700
There was nothing there.

230
00:15:37,270 --> 00:15:37,590
Right?

231
00:15:37,720 --> 00:15:43,030
That's the same thing, except way fewer lines of code right here.

232
00:15:43,030 --> 00:15:44,600
I'll run that and I will get it twice.

233
00:15:44,630 --> 00:15:45,250
So there you go.

234
00:15:45,280 --> 00:15:46,180
There was nothing there.

235
00:15:46,180 --> 00:15:47,050
There was nothing there.

236
00:15:47,080 --> 00:15:47,350
Right?

237
00:15:47,590 --> 00:15:58,120
And then on the other hand, if we point this Nullarbor to the MSG and then run this now we get.

238
00:15:58,930 --> 00:15:59,440
Hello.

239
00:15:59,470 --> 00:16:00,010
Hello.

240
00:16:00,040 --> 00:16:00,400
Right.

241
00:16:00,700 --> 00:16:05,200
So the first hello is all caps because it's coming from here.

242
00:16:06,360 --> 00:16:06,810
OK.

243
00:16:07,560 --> 00:16:13,140
The second one is coming here, and we're not doing anything with the resulting string and therefore

244
00:16:13,140 --> 00:16:18,510
it is not being capitalized, I could throw that on here at the end though, right?

245
00:16:18,540 --> 00:16:20,970
I can do that and run this again.

246
00:16:21,150 --> 00:16:21,670
There you go.

247
00:16:21,690 --> 00:16:24,270
So now you're getting hello, hello, all caps for both.

248
00:16:24,630 --> 00:16:31,820
So that just goes to show, though, that generally speaking, a method like or else.

249
00:16:31,830 --> 00:16:35,280
And we're going to see a bunch of variations on this in just a moment.

250
00:16:35,490 --> 00:16:39,360
It's probably a way better choice than using get.

251
00:16:39,600 --> 00:16:40,050
OK.

252
00:16:40,200 --> 00:16:45,510
So you really want to shy away from using that get because it's pretty much only useful if you combine

253
00:16:45,510 --> 00:16:50,940
it with tests above and as soon as you start doing these tests above and all of this.

254
00:16:51,120 --> 00:16:56,460
Well, now you kind of defeat a whole lot of the beauty of even using optional to begin with, right?

255
00:16:56,460 --> 00:17:01,380
Because now you're just writing all this, if they'll stuff all over the place and where's the fun in

256
00:17:01,380 --> 00:17:01,680
that?

257
00:17:01,860 --> 00:17:10,410
Similarly, now, in addition to the is present method, there is also and is empty method.

258
00:17:10,860 --> 00:17:14,670
So with the empty method, it's going to do what you think it's going to do, right?

259
00:17:15,210 --> 00:17:19,770
So in this case, if we wanted the logic to still make sense, we could put a.

260
00:17:20,770 --> 00:17:22,570
Not in front of it.

261
00:17:22,780 --> 00:17:25,840
Remember that the little exclamation mark there, right, so.

262
00:17:26,140 --> 00:17:34,310
So basically, we're saying if this optional is not empty, then go ahead and do all of this.

263
00:17:34,330 --> 00:17:36,160
Otherwise do the other thing right?

264
00:17:36,460 --> 00:17:37,510
So we'll run that.

265
00:17:38,230 --> 00:17:38,860
There you go.

266
00:17:39,070 --> 00:17:42,020
And then we'll point it back at the No.

267
00:17:42,070 --> 00:17:45,040
One, which would result in an empty, optional.

268
00:17:47,210 --> 00:17:47,810
There you go.

269
00:17:48,020 --> 00:17:48,320
Right.

270
00:17:48,830 --> 00:17:55,550
So that's how that would work, so you've got two sides of the same coin, you've got the is present

271
00:17:55,550 --> 00:17:58,040
or you can test for the is empty, right?

272
00:17:58,310 --> 00:18:02,450
They both do opposite versions of the same thing essentially, though, right?

273
00:18:02,990 --> 00:18:03,320
All right.

274
00:18:03,350 --> 00:18:08,550
So then let's look at some of these alternative methods of the or else.

275
00:18:08,600 --> 00:18:10,790
OK, so if I put my cursor down here.

276
00:18:11,600 --> 00:18:11,840
All right.

277
00:18:11,840 --> 00:18:16,100
So we just looked at or else there's also or else through.

278
00:18:16,220 --> 00:18:18,890
Now we did look at that in the last lesson.

279
00:18:19,070 --> 00:18:23,840
We were doing a fine first, I believe, which wants to return an optional.

280
00:18:24,260 --> 00:18:26,840
And we didn't want to return an optional, though.

281
00:18:26,960 --> 00:18:30,920
So instead, we opted to simply call the or else throw.

282
00:18:30,970 --> 00:18:31,180
Right.

283
00:18:31,200 --> 00:18:35,090
So we'll just do that again, just as a quick reminder of how that all works.

284
00:18:39,860 --> 00:18:41,480
And I'll clear this out.

285
00:18:43,130 --> 00:18:45,470
OK, so let's run that.

286
00:18:46,590 --> 00:18:50,690
All right, and so that's blowing up because we're pointing at the null value right here, in fact,

287
00:18:50,690 --> 00:18:55,130
let me it's clear all of that out there, so it's a little less confusing, right?

288
00:18:56,540 --> 00:18:58,250
OK, so no value present.

289
00:18:58,460 --> 00:19:02,840
We got a no such element exception with this guy or else throw.

290
00:19:02,990 --> 00:19:04,940
So that's one thing that you could do.

291
00:19:05,750 --> 00:19:06,170
Let's see.

292
00:19:06,170 --> 00:19:12,290
We also could do this other version, this overloaded version of or else throw that takes a supplier.

293
00:19:12,590 --> 00:19:16,130
So this one just allows us to supply our own exceptions.

294
00:19:16,130 --> 00:19:21,290
So if we wanted a different exception other than the no such element exception because the Orioles through

295
00:19:21,380 --> 00:19:28,760
with the version that we just used, is hardcoded essentially to throw a no such element exception.

296
00:19:28,760 --> 00:19:32,030
But let's say that we wanted to throw a different type of exception.

297
00:19:32,270 --> 00:19:38,630
Well, in that case, we could use the Orioles through method here, and it takes a supplier and supplier

298
00:19:38,630 --> 00:19:41,210
is one of our many, many, many functional interfaces.

299
00:19:41,420 --> 00:19:46,190
It's an interface that represents a method that doesn't take any input, but it throws something.

300
00:19:46,190 --> 00:19:47,930
It supplies something, right?

301
00:19:48,170 --> 00:19:51,080
So in that case, we could do this notice.

302
00:19:51,080 --> 00:19:57,890
By the way, I'm using just the empty parentheses there because again, we're not taking any input for

303
00:19:57,890 --> 00:19:59,880
a supplier interface, right?

304
00:19:59,900 --> 00:20:01,550
Or a supplier function, if you will.

305
00:20:02,390 --> 00:20:07,730
The thing that I'm going to return, though, will be something that extends runtime exception.

306
00:20:07,760 --> 00:20:08,210
OK.

307
00:20:08,570 --> 00:20:16,850
So what I can do here, just for grins, is I will just create an instance of a runtime exception and

308
00:20:16,850 --> 00:20:24,350
I can call its constructor so that I can pass in some simple message like nothing found.

309
00:20:24,950 --> 00:20:33,020
OK, now normally you may recall in the exceptions lesson, I did state that typically in real life,

310
00:20:33,200 --> 00:20:37,070
you don't want to be creating new runtime exceptions like this.

311
00:20:37,670 --> 00:20:43,910
You want a first go look through all of the standard exceptions that are already created with Java and

312
00:20:43,910 --> 00:20:49,370
see if there's one that's already existing whose name matches with your circumstance, right?

313
00:20:49,380 --> 00:20:54,620
So like if you were looking for a file and you couldn't find one, maybe there's a runtime exception

314
00:20:54,620 --> 00:20:57,650
that has something to do with file related exceptions, right?

315
00:20:57,800 --> 00:20:58,700
Something like that.

316
00:20:58,790 --> 00:21:04,430
And only after you've looked through all of the standard exceptions and couldn't find one that matches

317
00:21:04,430 --> 00:21:12,890
with your circumstance in terms of its name, then you could consider creating your own class that extends

318
00:21:12,890 --> 00:21:17,960
runtime exception or exception if that's your case for, like a checked exception or something.

319
00:21:17,990 --> 00:21:18,350
OK.

320
00:21:19,630 --> 00:21:23,560
But for illustrative purposes here, I don't feel like going and creating one of those.

321
00:21:23,680 --> 00:21:27,220
So we're going to just do this for right now, so I'm running this again.

322
00:21:27,340 --> 00:21:30,940
And so now we're getting a runtime exception and there's our message.

323
00:21:30,940 --> 00:21:32,010
Nothing found right?

324
00:21:32,020 --> 00:21:33,580
And that's what I passed in there.

325
00:21:33,760 --> 00:21:35,590
So that's the or else throw.

326
00:21:36,560 --> 00:21:36,980
All right.

327
00:21:39,020 --> 00:21:40,760
Let's see what else we've got here.

328
00:21:41,740 --> 00:21:43,510
We've got or else get.

329
00:21:45,300 --> 00:21:52,860
So this is very similar to the or else in fact, it's almost the same thing, except it uses a supplier.

330
00:21:53,130 --> 00:21:59,460
So let me just remind you real quick what the or else we just were able to give it an alternative string.

331
00:21:59,550 --> 00:22:03,530
Now I'm saying string here because that's what our optional is an optional love.

332
00:22:03,540 --> 00:22:09,090
But if I had created an optional the person, then the thing that I could return from this or else wouldn't

333
00:22:09,090 --> 00:22:09,680
be a string.

334
00:22:09,690 --> 00:22:11,010
It would be a person, right?

335
00:22:11,160 --> 00:22:13,320
So this is a generic class.

336
00:22:13,320 --> 00:22:15,540
And now you know more about these generics, right?

337
00:22:15,660 --> 00:22:20,550
So whatever we're supplying here, so to speak, needs to be of this type.

338
00:22:20,550 --> 00:22:24,840
Whatever the type is, the generic type is for the optional itself, right?

339
00:22:24,960 --> 00:22:30,030
But as the quick reminder, I was just going to show you again that the or else lets us give the alternative

340
00:22:30,180 --> 00:22:33,660
in this case, string right or the alternative object right?

341
00:22:34,320 --> 00:22:35,730
My alt right.

342
00:22:36,600 --> 00:22:44,850
However, we could use the other version of or else the or else get which takes a supplier, which is

343
00:22:44,850 --> 00:22:47,140
again one of the functional interfaces.

344
00:22:47,160 --> 00:22:52,740
And again, it's an interface that represents a method are a function that doesn't take an input, but

345
00:22:52,740 --> 00:22:55,260
it supplies things or values, right?

346
00:22:55,410 --> 00:23:02,670
And the dumb way that we could do this might be something like, here's a method that just returns that

347
00:23:02,670 --> 00:23:03,590
same text, right?

348
00:23:03,600 --> 00:23:08,670
So in this case, this is functionally what I'm doing right now is functionally no different from just

349
00:23:08,670 --> 00:23:10,800
doing the or else that I had before.

350
00:23:10,920 --> 00:23:13,650
So you may be wondering, well, why would you even do this then?

351
00:23:13,920 --> 00:23:20,700
So maybe we could have a method reference, like maybe there's some method somewhere else in our code

352
00:23:20,910 --> 00:23:24,420
that generates passwords, let's say.

353
00:23:24,720 --> 00:23:24,960
Yeah.

354
00:23:24,960 --> 00:23:28,080
In fact, that might be a good example right there.

355
00:23:28,740 --> 00:23:32,460
Maybe we've got some code here.

356
00:23:33,290 --> 00:23:42,480
What's the password that takes some input input from user for password, something like that?

357
00:23:42,870 --> 00:23:51,330
And let's say that for some reason, our code that gets that input from the user results in the user

358
00:23:51,330 --> 00:23:56,130
not having entered anything, though, we really should be checking that before we would get this far.

359
00:23:56,130 --> 00:24:01,710
But for whatever reason, let's say that the user didn't enter their password and they managed to get

360
00:24:01,710 --> 00:24:02,730
past us, right?

361
00:24:03,000 --> 00:24:09,120
And so now this password that we were expecting would have a password that they entered is in fact just

362
00:24:09,120 --> 00:24:10,140
null, OK?

363
00:24:10,680 --> 00:24:12,390
And so then we get down here.

364
00:24:12,540 --> 00:24:19,440
Well, in that case, what you could have is something like basically, if they supplied the password,

365
00:24:19,440 --> 00:24:22,010
then go ahead and do whatever you were planning to do with the password.

366
00:24:22,020 --> 00:24:27,870
But if they did not supply the password, then maybe you're doing this or else get and then this or

367
00:24:27,870 --> 00:24:34,650
else get is pointing at a method reference to some fancy method that can generate new passwords for

368
00:24:34,650 --> 00:24:36,090
us each time we call it.

369
00:24:36,120 --> 00:24:36,450
Right?

370
00:24:37,290 --> 00:24:43,740
And so that would be maybe a really good use of this or else get just giving you some context as to

371
00:24:43,740 --> 00:24:46,890
why you might ever want to use something like this.

372
00:24:46,920 --> 00:24:47,250
Right?

373
00:24:48,850 --> 00:24:54,760
And granted, even with that scenario, you could still just do something like or else.

374
00:24:55,730 --> 00:25:05,150
And then call that method, you know, fancy password generator method, which returns a string, you

375
00:25:05,150 --> 00:25:09,110
could still even just do that like a given they're giving us a lot of options.

376
00:25:09,650 --> 00:25:09,890
All right.

377
00:25:09,900 --> 00:25:18,110
And so finally, the last one here is just the plain old order method, and this one is very similar

378
00:25:18,320 --> 00:25:20,750
to our to our other methods.

379
00:25:20,750 --> 00:25:24,860
Except what it returns will be wrapped inside of an optional.

380
00:25:24,860 --> 00:25:26,180
So let me show you what I mean here.

381
00:25:26,180 --> 00:25:29,030
So it's basically expecting a supplier again.

382
00:25:29,030 --> 00:25:30,800
So I'll make a really dumb supplier.

383
00:25:31,430 --> 00:25:34,310
Nothing, nothing here.

384
00:25:35,030 --> 00:25:35,350
All right.

385
00:25:35,360 --> 00:25:37,970
So I showed you this before, but notice it's still red.

386
00:25:37,970 --> 00:25:43,700
And the reason for that is because I have to actually wrap my value here, my return value in another

387
00:25:43,700 --> 00:25:45,890
optional so I can do of.

388
00:25:48,820 --> 00:25:54,010
Like so now notice with this approach, by the way, let me let me get rid of that, OK?

389
00:25:54,930 --> 00:25:55,290
All right.

390
00:25:55,440 --> 00:25:59,220
And so now I'm just going to be returning another option.

391
00:25:59,340 --> 00:26:05,250
So that's really the only thing about using the border is that it is expecting to return an optional

392
00:26:05,250 --> 00:26:07,590
of some alternative thing.

393
00:26:07,620 --> 00:26:08,040
OK.

394
00:26:08,670 --> 00:26:10,440
And if you hover over it, you'll see here.

395
00:26:10,770 --> 00:26:11,040
Yeah.

396
00:26:11,040 --> 00:26:15,000
So it even shows it in the signature returns an optional of a thing.

397
00:26:15,900 --> 00:26:16,230
All right.

398
00:26:16,230 --> 00:26:19,230
And so let's look at the next method here.

399
00:26:19,320 --> 00:26:22,000
I'm going to go ahead and delete all of that.

400
00:26:22,050 --> 00:26:23,310
Did I get enough of it?

401
00:26:23,340 --> 00:26:24,050
Let's see.

402
00:26:24,060 --> 00:26:24,850
I guess one more.

403
00:26:24,870 --> 00:26:27,210
OK, so let's see.

404
00:26:27,210 --> 00:26:29,490
The next one we'll look at is filter.

405
00:26:30,360 --> 00:26:38,760
So this is cool because we get to see now a lot of these methods that were part of the Streams API have

406
00:26:38,760 --> 00:26:44,190
been brought over or there's a version of them on the optional class, which is another reason why it

407
00:26:44,190 --> 00:26:50,220
made a lot of sense to first learn about the Lambdas and Streams API before we jumped into all of this.

408
00:26:50,460 --> 00:26:56,880
So this filter here works pretty much exactly like the filter in the streams API takes a predicate does

409
00:26:56,880 --> 00:27:03,480
the same stuff, except where the filter from the Streams API would return a stream again.

410
00:27:03,480 --> 00:27:08,340
A stream of whatever this filter here returns an optional of whatever.

411
00:27:08,370 --> 00:27:13,260
OK, so it's got a good parallel there, but it's, you know, a little bit different in what it's returning.

412
00:27:13,260 --> 00:27:20,640
But the functionality is about the same and you'd want to use this if you wanted to ensure not only

413
00:27:21,000 --> 00:27:29,250
that there should be an object inside of the optional, but you can also have a chance to test that

414
00:27:29,250 --> 00:27:33,840
object for some type of property or behavior or whatever.

415
00:27:33,850 --> 00:27:35,580
So let's take a look at what that looks like.

416
00:27:35,760 --> 00:27:37,470
All right, so let me finish this up.

417
00:27:37,620 --> 00:27:47,460
So let's say that we wanted to only print out the value, the word in this case or the string in this

418
00:27:47,460 --> 00:27:52,290
optional if it is greater than three characters long.

419
00:27:52,320 --> 00:27:54,930
OK, so the filter takes a predicate.

420
00:27:54,930 --> 00:28:00,240
So we're going to create a lambda expression to represent this scenario, right?

421
00:28:00,450 --> 00:28:07,350
So that lambda expression is going to take as an input, the string that is in that is presumed to be

422
00:28:07,350 --> 00:28:09,120
inside of this optional right.

423
00:28:09,480 --> 00:28:15,180
So then we can represent that in a lambda expression with, let's say, s for string and then we'll

424
00:28:15,180 --> 00:28:16,680
do one of these things here.

425
00:28:16,770 --> 00:28:21,840
And so now we're just going to say if the length is greater than three.

426
00:28:22,020 --> 00:28:27,180
So if we just hover over the filter and take a look at its Java doc real quick, we can see that it

427
00:28:27,180 --> 00:28:30,180
will return and optional of whatever.

428
00:28:30,390 --> 00:28:39,210
So in this case, if the optional contains a value and that value, which is a string in this case,

429
00:28:39,420 --> 00:28:46,320
is greater in length than three, then this is going to return that optional, right?

430
00:28:46,590 --> 00:28:49,980
So it's not even going to unwrap it or anything, it's just going to return that optional.

431
00:28:50,280 --> 00:28:54,540
Otherwise, though, it's going to filter it out now because this returns an optional.

432
00:28:54,660 --> 00:28:58,980
We can then go on and do the rest of whatever else we might normally have done.

433
00:28:59,700 --> 00:28:59,970
All right.

434
00:28:59,970 --> 00:29:04,600
So let's just run this as it is, so you can just get a sense for how it's going to behave.

435
00:29:04,620 --> 00:29:05,970
So I'm just going to run that.

436
00:29:06,600 --> 00:29:06,930
All right.

437
00:29:07,050 --> 00:29:13,500
So we get an optional dot empty, which makes sense because we are still pointing to this message to

438
00:29:13,500 --> 00:29:15,300
which is currently just null.

439
00:29:15,330 --> 00:29:15,720
Right?

440
00:29:16,020 --> 00:29:18,030
And so we're just printing an optional.

441
00:29:18,030 --> 00:29:21,420
The optional is what came out of the filter, but it's an empty optional.

442
00:29:21,420 --> 00:29:22,920
And so we get optional that empty.

443
00:29:23,370 --> 00:29:29,250
Now, if we want to make sure that we get something more legit to print, which would be some type of

444
00:29:29,250 --> 00:29:35,490
a string, we can fall back on our familiar fallback methods like or else right, so we can do an or

445
00:29:35,490 --> 00:29:39,060
else and then say something like invalid, right?

446
00:29:39,300 --> 00:29:40,590
And so we'll run that.

447
00:29:41,040 --> 00:29:41,510
There we go.

448
00:29:41,520 --> 00:29:43,260
And so now we've got the invalid there.

449
00:29:43,620 --> 00:29:49,260
Now let's test what happens, though, if we actually put legitimate strings in here and not null.

450
00:29:49,350 --> 00:29:53,350
So let's start with something that's only three characters long so cat.

451
00:29:53,370 --> 00:29:53,730
Right?

452
00:29:53,940 --> 00:29:54,940
So let's run that.

453
00:29:55,500 --> 00:29:57,600
OK, so we still get the invalid now.

454
00:29:57,810 --> 00:30:04,980
And so that just goes to show that the word cat is not passing our predicate here because our predicate

455
00:30:04,980 --> 00:30:09,090
is expecting a word or string greater than three characters in length.

456
00:30:09,090 --> 00:30:12,000
And this is only three three is not greater than three.

457
00:30:12,180 --> 00:30:14,730
And so we end up still going into the or else.

458
00:30:14,730 --> 00:30:16,320
So you see what this is doing.

459
00:30:16,680 --> 00:30:24,000
If it's null, you get the URLs or if if the value doesn't pass our predicate, you also get the or

460
00:30:24,000 --> 00:30:26,280
else with with the with the filter here.

461
00:30:26,340 --> 00:30:26,820
OK.

462
00:30:27,480 --> 00:30:34,050
And then let's go ahead and make it a little longer catastrophe, let's say.

463
00:30:34,080 --> 00:30:35,790
OK, so let's run that.

464
00:30:36,420 --> 00:30:42,600
And now we get the original word out because it is now passing our predicate test for the filter.

465
00:30:42,750 --> 00:30:44,010
So that's what Filter does.

466
00:30:44,010 --> 00:30:44,700
Pretty nice.

467
00:30:45,420 --> 00:30:45,720
All right.

468
00:30:45,730 --> 00:30:53,250
And so now we get to jump in to another really interesting method that is pretty much taken straight

469
00:30:53,250 --> 00:30:54,410
from the Streams API.

470
00:30:54,760 --> 00:30:56,710
For this, we're going to do a little bit of setup, though.

471
00:30:57,010 --> 00:31:01,330
So the first thing I want to do is I'm going to create a couple of small.
