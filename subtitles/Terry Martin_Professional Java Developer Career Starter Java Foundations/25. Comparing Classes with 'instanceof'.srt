1
00:00:00,270 --> 00:00:03,600
All right, in this lesson, I've got another scenario for you.

2
00:00:03,840 --> 00:00:11,520
Still, with our employee project, so when we run this employee project, we get this output that we've

3
00:00:11,520 --> 00:00:12,900
seen many times already.

4
00:00:13,110 --> 00:00:19,230
So we basically are looping over each of the employees that we have up here, right?

5
00:00:19,860 --> 00:00:27,060
And as we're looping through them, we tally up the salaries and then we print each person in their

6
00:00:27,060 --> 00:00:30,240
salary and their bonus out right here, right?

7
00:00:30,420 --> 00:00:35,790
And we're doing that just by calling the two string method of the given employee.

8
00:00:36,180 --> 00:00:37,290
And that's all well and good.

9
00:00:37,440 --> 00:00:45,540
Well, let's pretend like we want more information or we want different kinds of information, depending

10
00:00:45,540 --> 00:00:47,820
on the type of employee it is.

11
00:00:47,830 --> 00:00:52,890
If it's a programmer, we want to see the programmer specific information, like the lines of code in

12
00:00:52,890 --> 00:00:53,820
the IQ and stuff.

13
00:00:54,090 --> 00:00:58,530
Now, obviously, if we're the ones who have written the code, which in this case we are the ones who

14
00:00:58,530 --> 00:01:04,470
have written the code, the most likely thing we do here is simply to go back into these subclasses

15
00:01:04,470 --> 00:01:09,090
and revise their two string methods to do something a little more unique.

16
00:01:09,330 --> 00:01:15,210
Right now, they're all inheriting the two string method from the employee class.

17
00:01:20,140 --> 00:01:20,800
Right here.

18
00:01:21,820 --> 00:01:27,640
Which is nice because we didn't have to implement anything so we could go into the subclasses and override

19
00:01:27,640 --> 00:01:31,280
this method and then implement specific testing methods.

20
00:01:31,300 --> 00:01:39,580
However, in this scenario, I want to pretend like we didn't write those classes.

21
00:01:39,580 --> 00:01:43,460
We didn't write the classes for the hierarchy of employees.

22
00:01:44,020 --> 00:01:50,290
Let's pretend like those are coming from some third party library or framework, or at least from another

23
00:01:50,290 --> 00:01:54,640
team, and that team won't share their code with us.

24
00:01:54,790 --> 00:02:01,270
Maybe they made the classes final also, so we can't extend them and then override those methods ourselves,

25
00:02:01,270 --> 00:02:01,600
right?

26
00:02:01,660 --> 00:02:08,320
But we still want to be able to revise what information we're printing as we're looping over each of

27
00:02:08,320 --> 00:02:10,600
those employees in this while loop.

28
00:02:11,410 --> 00:02:13,140
So how can we handle that?

29
00:02:13,150 --> 00:02:20,110
That's the scenario that I want to run through so that I can use it as an excuse to to to yet another

30
00:02:20,770 --> 00:02:24,280
technique relating to classes and object orientation.

31
00:02:25,390 --> 00:02:31,870
So basically, I think what we're wanting to do here is we're going to get a new employee and then we

32
00:02:31,870 --> 00:02:35,830
we'd have to find out externally from the classes.

33
00:02:35,830 --> 00:02:43,210
So somewhere in this loop, presumably we'd have to find out what is the class type of that employee.

34
00:02:43,480 --> 00:02:50,470
And then if it's a programmer, then we print out the programmer style of output.

35
00:02:50,470 --> 00:02:54,170
And if it's a manager, then we print out another style of output, right?

36
00:02:54,190 --> 00:02:56,290
That's basically what we're talking about.

37
00:02:56,500 --> 00:02:58,240
So let's see what that could look like.

38
00:03:00,370 --> 00:03:06,820
So maybe we'd literally just have an if block and we could say something like.

39
00:03:09,310 --> 00:03:17,320
If the employee now here's the thing, we haven't really I don't think I've shown you thus far in this

40
00:03:17,320 --> 00:03:24,130
course how you can determine what the class type is of an object.

41
00:03:24,250 --> 00:03:26,590
But there are a few ways to do this.

42
00:03:26,950 --> 00:03:30,250
So first, we'll start with the way that we're not going to end with.

43
00:03:31,450 --> 00:03:36,910
And so one thing you could do is to do something like this employee that get class.

44
00:03:36,910 --> 00:03:42,310
So all objects have a an inherited method called get class.

45
00:03:42,970 --> 00:03:44,710
And it's pretty straightforward.

46
00:03:44,920 --> 00:03:53,390
So you can call get class and then you can even call equals to test if it's equal to some other class.

47
00:03:53,410 --> 00:03:59,500
And so we could say something like if employee Typekit class equals programmer.

48
00:03:59,620 --> 00:04:04,060
Now here's the thing you can refer to a class as I'm doing here.

49
00:04:04,330 --> 00:04:10,930
But then if you want to compare it to what comes out of the get class method, then you'll do a period

50
00:04:11,260 --> 00:04:11,920
class.

51
00:04:12,310 --> 00:04:18,760
So programmer talked class, so you can say employee that get class equals program or class.

52
00:04:19,150 --> 00:04:25,780
Now I will just point out, as I've done before, when I showed you about you comparing string constants

53
00:04:25,780 --> 00:04:32,920
to variables, if there was any possibility that this variable employee could be null, you'd want to

54
00:04:32,920 --> 00:04:39,520
be careful here, though in our case, there should not be any possibility for that because of the way

55
00:04:39,520 --> 00:04:41,530
that we implemented create employee.

56
00:04:42,190 --> 00:04:44,290
So I just wanted to remind you of that fact.

57
00:04:44,440 --> 00:04:46,120
Always be careful about these nails.

58
00:04:46,330 --> 00:04:52,390
A little bit later, we'll learn how to never have to worry about Noelle's again with a technique called

59
00:04:52,390 --> 00:04:53,020
optional.

60
00:04:53,740 --> 00:04:54,170
All right.

61
00:04:54,190 --> 00:05:03,040
So yes, so you could compare and say like if the employee class is programmer class, then whatever,

62
00:05:03,040 --> 00:05:09,910
you know, maybe output, whatever unique type of output you want for that scenario.

63
00:05:10,060 --> 00:05:13,330
And then we could just keep going else if.

64
00:05:17,100 --> 00:05:25,380
Employee get class equals manager talked class.

65
00:05:28,280 --> 00:05:32,030
Then do something else and so on and so forth, right?

66
00:05:32,300 --> 00:05:36,410
And then finally, you could say for all other scenarios.

67
00:05:40,360 --> 00:05:45,250
Default output of some sort, you know, to say that the value is zero.

68
00:05:45,760 --> 00:05:46,030
All right.

69
00:05:46,040 --> 00:05:47,110
So I think you get that.

70
00:05:49,540 --> 00:05:55,240
All right, so that's one way you could do this, however, this is probably not the most typical way

71
00:05:55,240 --> 00:06:02,080
or idiomatic way that seasoned Java developers would probably handle this kind of scenario.

72
00:06:02,320 --> 00:06:10,570
So one issue with using the get class method and equals here is the fact that it is exact.

73
00:06:10,780 --> 00:06:12,310
And that might be what you want.

74
00:06:12,520 --> 00:06:13,270
It might be.

75
00:06:14,350 --> 00:06:18,460
But let me show you now an alternative approach to this.

76
00:06:18,820 --> 00:06:27,670
So in many cases, the more idiomatic way that Java developers would do this type of situation is with

77
00:06:27,670 --> 00:06:31,240
a special Java keyword called instance of.

78
00:06:31,660 --> 00:06:33,640
So let me show you what that would look like.

79
00:06:36,320 --> 00:06:40,130
You could say if employee instance of.

80
00:06:42,400 --> 00:06:50,500
Programmer like so now in this particular case, this is pretty much equivalent to what we had before.

81
00:06:50,530 --> 00:06:56,020
However, instance of actually can check for hierarchy.

82
00:06:56,290 --> 00:07:03,790
So if I were to say if employee instance of an employee with a big E.

83
00:07:04,510 --> 00:07:14,230
This would also be true because this instance of employee will be a subclass of the employee class.

84
00:07:14,800 --> 00:07:19,210
That is, unless it's an instance of our lambda expression.

85
00:07:19,480 --> 00:07:22,270
I'll just remind you, we'll jump into the create method here.

86
00:07:22,390 --> 00:07:29,350
We've got this last default bit here that just creates a lambda expression, which is basically an anonymous

87
00:07:29,350 --> 00:07:32,110
function which you can almost think of as a method.

88
00:07:32,740 --> 00:07:36,670
It's an anonymous function that in this case is returning zero.

89
00:07:36,820 --> 00:07:42,370
This anonymous function will essentially get wrapped inside of a shell of an interface.

90
00:07:42,520 --> 00:07:45,130
That interface will be I employee.

91
00:07:45,370 --> 00:07:54,880
So technically, the object that will eventually be returned from this switch expression won't be a

92
00:07:54,880 --> 00:07:56,290
subclass of employee.

93
00:07:56,470 --> 00:08:00,770
It will be an implementation of I employee, though.

94
00:08:00,790 --> 00:08:01,240
OK.

95
00:08:01,510 --> 00:08:04,870
So that's one thing to keep in mind in this particular case.

96
00:08:05,290 --> 00:08:11,620
So the object that gets generated by that lambda expression would not be an instance of employee.

97
00:08:11,800 --> 00:08:18,820
But in general, the biggest difference between the use of instance of versus comparing with get class

98
00:08:18,820 --> 00:08:26,260
is the fact that instance of is aware of class hierarchies and it honors the class hierarchy.

99
00:08:26,290 --> 00:08:29,860
OK, class is precise.

100
00:08:30,160 --> 00:08:36,010
You can only compare one class to that same class to say that they are both equivalent.

101
00:08:36,460 --> 00:08:45,190
So let me go ahead and update the other clauses here if we enter one if.

102
00:08:46,860 --> 00:08:47,040
Lest.

103
00:08:54,030 --> 00:08:55,530
All right, so there we have it.

104
00:08:56,010 --> 00:08:59,760
So that's our basic template for how we could do this now.

105
00:08:59,790 --> 00:09:01,080
Oh, and I just realize.

106
00:09:01,560 --> 00:09:03,390
Let me put this back to programmer.

107
00:09:04,710 --> 00:09:05,190
Here we go.

108
00:09:05,700 --> 00:09:06,060
All right.

109
00:09:06,390 --> 00:09:15,090
So now if I wanted to get specific information about the programmer to print out here right now, I

110
00:09:15,090 --> 00:09:16,350
can't do something.

111
00:09:16,380 --> 00:09:19,350
Well, first, let's go take a look at the programmer class.

112
00:09:20,470 --> 00:09:22,510
And let's see, so we've got lines of code.

113
00:09:22,630 --> 00:09:29,020
Years of experience in IQ, and I didn't generate any getter setter methods for those fields, but let

114
00:09:29,020 --> 00:09:30,770
me go ahead and generate some real quick.

115
00:09:31,540 --> 00:09:33,760
I guess I'll just put them at the bottom here.

116
00:09:33,760 --> 00:09:42,280
So I'm going to do a command in and getter setter enter and then I'm going to select those three fields,

117
00:09:42,520 --> 00:09:43,300
just those three.

118
00:09:43,300 --> 00:09:46,600
I don't want these other two here and click, OK.

119
00:09:46,930 --> 00:09:47,910
And there we go.

120
00:09:47,920 --> 00:09:51,790
So we've got our getters and setters for four these three fields.

121
00:09:52,030 --> 00:09:56,680
So now jump back over to the main class and now I can access those fields.

122
00:09:56,680 --> 00:09:59,290
So I'm not going to do anything fancy or special here.

123
00:09:59,290 --> 00:10:00,130
I just want to show.

124
00:10:00,430 --> 00:10:05,800
So if I wanted to just print out one of those fields, you might think that I would just be able to

125
00:10:05,800 --> 00:10:07,270
say something like employee died.

126
00:10:07,510 --> 00:10:10,060
Get IQ.

127
00:10:10,690 --> 00:10:13,600
Now watch what happens, though, when I do this.

128
00:10:15,990 --> 00:10:28,560
The I.D. casts my employee object into a programmer, and the reason it does this is because this employee

129
00:10:28,560 --> 00:10:34,680
object in this context of code right now is not actually known to be a programmer.

130
00:10:34,710 --> 00:10:37,530
It's only known to be an AI employee.

131
00:10:37,710 --> 00:10:43,170
This interface here, because that's what we created here, that's the variable type for employee as

132
00:10:43,170 --> 00:10:44,100
I employee.

133
00:10:44,940 --> 00:10:52,500
So in order for me to be able to access the methods that are you new unique to a programmer, this employee

134
00:10:52,500 --> 00:10:57,150
object has to first be cast into a programmer.

135
00:10:57,150 --> 00:10:59,850
And if you recall about casting, we learned about it.

136
00:10:59,850 --> 00:11:08,820
I think in the module on numbers in particular, we put the type that we're casting to in parentheses.

137
00:11:09,120 --> 00:11:15,720
Now that's not enough here because we're also trying to access a method on the programmer class.

138
00:11:15,720 --> 00:11:21,120
So not only do we have to first put the word programmer in parentheses, let me put a little space here

139
00:11:21,120 --> 00:11:22,710
so you can see more clearly.

140
00:11:22,890 --> 00:11:31,110
OK, so this this that I have highlighted is casting the employee variable to a programmer.

141
00:11:31,380 --> 00:11:38,790
But if I want to access programmer methods, that is methods that are specific to the programmer class.

142
00:11:39,090 --> 00:11:48,150
I must surround all of this blew in parentheses again first in order to get at those methods.

143
00:11:48,150 --> 00:11:58,470
And so the ADP also surrounded this whole entire thing here in blue in an additional set of parentheses.

144
00:12:00,210 --> 00:12:00,840
So I'll.

145
00:12:06,000 --> 00:12:14,460
Like so so you can think of these parentheses as grouping up and making one one object of type programmer,

146
00:12:14,670 --> 00:12:22,140
and now it is that object which I can then get get to those methods like get IQ.

147
00:12:22,170 --> 00:12:27,510
OK, so the idea did that for me automatically because it's smart enough to see that that's what I was

148
00:12:27,510 --> 00:12:28,590
trying to get to.

149
00:12:28,620 --> 00:12:35,340
OK, now if you happen to be coding in an I.D. that isn't intelligence such as Eclipse or NetBeans,

150
00:12:36,000 --> 00:12:41,550
I don't know if the latest versions of those IDs are that smart that they'd be able to do that for you.

151
00:12:41,760 --> 00:12:47,100
So under normal circumstances, if an I.D. wasn't doing that for you, let me show you what you would

152
00:12:47,100 --> 00:12:47,870
have gotten here.

153
00:12:47,880 --> 00:12:52,110
I'm going to get rid of all of this casting stuff.

154
00:12:55,050 --> 00:13:02,220
That's what you would have seen is just red for the method because there is no Get IQ method defined

155
00:13:02,220 --> 00:13:04,740
on the I employee interface.

156
00:13:04,950 --> 00:13:05,410
OK.

157
00:13:05,790 --> 00:13:13,680
So typically, if your ID doesn't do nice tricks for you like intelligence, does you typically see

158
00:13:13,680 --> 00:13:16,560
a pattern like this, something like this?

159
00:13:17,280 --> 00:13:28,320
We'd create another variable of the exact type that we care about, and then we do a cast programmer

160
00:13:29,370 --> 00:13:30,450
employee.

161
00:13:31,290 --> 00:13:34,890
So here I'm taking this employee variable.

162
00:13:35,010 --> 00:13:43,410
I'm casting it to a programmer, then I'm storing that into a new local variable of the specific type

163
00:13:43,410 --> 00:13:44,190
programmer.

164
00:13:44,370 --> 00:13:52,980
Then I can come down here and refer to it with this new name of the proper type that I want.

165
00:13:53,220 --> 00:14:01,500
OK, so I'm saying basically, if employee is an instance of the programmer class, then cast employee

166
00:14:01,740 --> 00:14:09,720
to a variable of type programmers so that I can then get at the programmer specific methods and capabilities.

167
00:14:09,870 --> 00:14:17,580
Right now, this is the old school way of handling the instance of pattern that you see here.

168
00:14:18,300 --> 00:14:19,470
Check for the type.

169
00:14:19,470 --> 00:14:25,740
If it is that type, then cast the variable to a specific variable of that type.

170
00:14:25,920 --> 00:14:30,600
And now you can access the data and methods of that specific type.

171
00:14:31,080 --> 00:14:32,490
That's the original pattern.

172
00:14:32,910 --> 00:14:40,920
However, as of Java version 16, which is the version that we're on right now, Java has finalized

173
00:14:40,920 --> 00:14:46,470
a more modern use of instance, of which is called pattern matching.

174
00:14:47,010 --> 00:14:56,700
And what it allows us to do now is we can do this bit here, as you already see, but we can put a variable

175
00:14:56,700 --> 00:14:58,770
name right after the type.

176
00:14:59,100 --> 00:15:05,700
So we could put Prague just like this, and now I can come down here on this line and just get rid of

177
00:15:05,700 --> 00:15:06,450
that line.

178
00:15:07,560 --> 00:15:16,560
So basically, they've given us a nice little shortcut to cast this variable into the specific type

179
00:15:16,560 --> 00:15:20,550
that we want and give us a variable to use it right there.

180
00:15:20,580 --> 00:15:21,090
OK.

181
00:15:21,120 --> 00:15:24,810
And so now we can just refer to it in this way so I can do that again.

182
00:15:24,950 --> 00:15:29,240
Employee instance of manager and then I can call it whatever, man.

183
00:15:29,850 --> 00:15:36,940
And now I can access whatever methods may be specific to the manager class.

184
00:15:36,960 --> 00:15:41,130
I don't think I've generated any here, but you get the point.

185
00:15:44,150 --> 00:15:47,060
Now, as I just stated, let me restate this.

186
00:15:47,630 --> 00:15:56,500
This capability, called pattern matching, is only available officially with Java version 16.

187
00:15:57,170 --> 00:16:04,280
It does exist as a preview in Java 14, which just means that you have to enable that in order to use

188
00:16:04,280 --> 00:16:06,140
it in previous versions of Java.

189
00:16:06,350 --> 00:16:11,440
But it has official support in Java version 16, and that's quite nice.

190
00:16:11,450 --> 00:16:18,140
So a lot of the a lot of the new language features that Java keeps adding are features that allow us

191
00:16:18,140 --> 00:16:19,160
to type less.

192
00:16:19,650 --> 00:16:21,710
That's that's pretty much what it comes down to.

193
00:16:22,340 --> 00:16:26,480
They give us nicer ways to say more with less.

194
00:16:26,960 --> 00:16:29,630
Now, one more thing that you might be wondering about.

195
00:16:30,020 --> 00:16:36,290
We've been using switch statements and expressions quite extensively for a number of projects in this

196
00:16:36,290 --> 00:16:36,740
course.

197
00:16:36,920 --> 00:16:43,190
And you might have been wondering why did I suddenly switch over no pun intended switch over to using

198
00:16:43,190 --> 00:16:45,800
a more traditional, if else, block?

199
00:16:46,190 --> 00:16:56,030
Well, let me show you what happens if we try to do this with Switch, so I will just add a switch here,

200
00:16:56,900 --> 00:16:59,990
Switch employee.

201
00:17:03,790 --> 00:17:05,860
And right away, it starts complaining.

202
00:17:07,150 --> 00:17:15,280
Incompatible types found neutrinos, this employees I employee required character byte short and character

203
00:17:15,280 --> 00:17:17,620
byte short integer string or an enum.

204
00:17:17,800 --> 00:17:26,590
Basically, what it's saying is switches only work for primitives, wrappers of primitives and enemies.

205
00:17:27,430 --> 00:17:33,070
So right now, switches cannot even be used for other data types.

206
00:17:33,250 --> 00:17:41,140
In this case, an interface or a class instance, and that is something that lots of people have complained

207
00:17:41,140 --> 00:17:43,780
about with Java for years and years.

208
00:17:43,810 --> 00:17:48,790
The fact that switches are seemingly so limited in their capabilities.

209
00:17:49,300 --> 00:17:56,140
Now I will just let you know that in upcoming versions of Java, there is a possibility that the Switch

210
00:17:56,140 --> 00:18:03,160
statement will be expanded where we could say something like Switch employee here, and then we could

211
00:18:03,160 --> 00:18:04,510
define a case.

212
00:18:06,370 --> 00:18:11,920
And we could even say something like programmer Prague.

213
00:18:14,350 --> 00:18:21,370
And then use the arrow notation, or we could do the or we could do the colon notation as well.

214
00:18:22,240 --> 00:18:28,660
So that is something that is very much being debated in the Java architecture community right now,

215
00:18:28,660 --> 00:18:36,430
and I'm hopeful that something like this will make its way into Java in the not too distant future,

216
00:18:36,610 --> 00:18:43,120
because I think that would be really nice and cut down on even more of this kind of boilerplate that

217
00:18:43,120 --> 00:18:43,900
we have here.

218
00:18:45,460 --> 00:18:45,900
All right.

219
00:18:45,910 --> 00:18:49,090
So you now have seen so let me get rid of that.

220
00:18:51,610 --> 00:18:54,190
So I'm going to leave it as an exercise for you.

221
00:18:54,310 --> 00:19:02,410
If you want to go ahead and complete this, this approach and make the output say something different

222
00:19:02,620 --> 00:19:04,510
for each data type.

223
00:19:04,720 --> 00:19:09,700
And then in that case, you wouldn't need what is currently Line 47 any longer.

224
00:19:09,790 --> 00:19:10,090
Right.

225
00:19:10,090 --> 00:19:15,280
This more generic standard output for all types might not be necessary anymore.

226
00:19:16,060 --> 00:19:16,420
All right.

227
00:19:16,430 --> 00:19:21,040
So with that, I'm going to bring it to a close and I will see you in the next one.
