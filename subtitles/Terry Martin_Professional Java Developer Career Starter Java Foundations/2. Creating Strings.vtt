WEBVTT
1
00:00:00.730 --> 00:00:04.450
OK, so welcome to the first lesson in learning about text.

2
00:00:04.720 --> 00:00:09.790
So the first thing we're going to do is just do a little bit of review combined with a little bit of

3
00:00:09.790 --> 00:00:10.150
new.

4
00:00:10.570 --> 00:00:16.360
So we've already seen how we can create strings in code.

5
00:00:16.600 --> 00:00:18.750
And we're going to review that a little bit.

6
00:00:18.760 --> 00:00:24.100
But then I'm going to introduce you to one other technique for creating a string and we'll talk about

7
00:00:24.100 --> 00:00:25.240
what the differences are.

8
00:00:25.840 --> 00:00:32.110
Also, we've been spending a lot of time in these previous two projects, so now I'm going to encourage

9
00:00:32.110 --> 00:00:37.930
you to actually follow along with me, whether you were already or not, so that you can start to build

10
00:00:37.930 --> 00:00:43.740
up more practice and muscle memory on more techniques, such as just how to create a new project.

11
00:00:43.750 --> 00:00:48.790
So we're going to go ahead and jump into the ad and we're going to start off by creating a new project

12
00:00:48.790 --> 00:00:49.600
for ourselves.

13
00:00:51.010 --> 00:00:51.490
OK.

14
00:00:51.550 --> 00:00:56.800
So I don't know where you may be in the ADC, and it doesn't really matter, but we're going to start

15
00:00:56.800 --> 00:01:01.000
a new project here so you can always go up to file no matter where you are.

16
00:01:01.480 --> 00:01:03.340
New project.

17
00:01:05.140 --> 00:01:05.560
OK.

18
00:01:05.830 --> 00:01:11.350
And just as we've done before, although it may have been a really long time since you felt like you

19
00:01:11.350 --> 00:01:16.090
did this, what we want to make sure that you've got Java selected here, make sure that you've got

20
00:01:16.090 --> 00:01:18.460
a number here for the project SDK.

21
00:01:18.670 --> 00:01:23.830
I would encourage you not to have anything lower than 16, but if you have something higher than 16,

22
00:01:23.830 --> 00:01:24.970
that's perfectly fine.

23
00:01:25.780 --> 00:01:29.230
And we're not selecting any of these libraries and frameworks.

24
00:01:31.010 --> 00:01:35.510
And let me let me get my yeah, the window on the screen there, OK?

25
00:01:35.720 --> 00:01:42.650
And then you can click next and leave everything unselected here, so I'm not selecting anything there.

26
00:01:42.950 --> 00:01:44.420
And click next again.

27
00:01:45.350 --> 00:01:47.210
Let's call this project.

28
00:01:47.840 --> 00:01:50.120
People with a capital p.

29
00:01:51.170 --> 00:01:53.150
And the location doesn't matter.

30
00:01:53.270 --> 00:01:57.650
I would recommend that you probably just take the default unless you really feel comfortable that you

31
00:01:57.650 --> 00:02:01.280
know what you're doing and you're not going to lose track of it and then finish.

32
00:02:02.830 --> 00:02:08.080
And if you were already in another project window, it's going to ask you if you want to open up the

33
00:02:08.080 --> 00:02:11.420
project in a new window or in the existing window.

34
00:02:11.440 --> 00:02:16.930
I'm going to open it up in the new window just in case I want to jump back into some of the old projects

35
00:02:16.930 --> 00:02:18.250
that we've been talking about.

36
00:02:18.460 --> 00:02:20.170
It's up to you what you want to do here, though.

37
00:02:23.820 --> 00:02:26.400
OK, so we've got our new project.

38
00:02:27.240 --> 00:02:34.110
So the first thing we want to do is just review and learn a little bit new things about how to create

39
00:02:34.110 --> 00:02:34.890
a string.

40
00:02:35.460 --> 00:02:38.280
So the first thing we're going to do is just create a class.

41
00:02:38.280 --> 00:02:43.170
And I think for right now, we're just going to create a kind of a a playground.

42
00:02:43.410 --> 00:02:47.490
So this may not be like the serious class that we're going to stick with for a long time.

43
00:02:47.490 --> 00:02:49.980
We just want a place to try some things out.

44
00:02:50.370 --> 00:02:55.710
So we're going to right click on the source folder as our see go to new Java class.

45
00:02:56.010 --> 00:02:59.130
And let's just call this class.

46
00:02:59.550 --> 00:03:00.330
Learn.

47
00:03:01.670 --> 00:03:02.660
String.

48
00:03:04.120 --> 00:03:04.750
Stings.

49
00:03:05.830 --> 00:03:07.780
You can call it whatever you want, really.

50
00:03:07.930 --> 00:03:11.590
Make sure you have class highlighted there and then you can hit return.

51
00:03:12.340 --> 00:03:16.020
OK, and then we'll create a new line inside of this class.

52
00:03:16.030 --> 00:03:19.600
I'm going to just hold down on the shift and return to make the new line.

53
00:03:20.470 --> 00:03:23.110
And then let's create a main method right away.

54
00:03:23.350 --> 00:03:27.550
So public static void main SVM and then hit enter.

55
00:03:27.730 --> 00:03:29.620
So this is all stuff we've done before.

56
00:03:30.100 --> 00:03:30.550
All right.

57
00:03:30.790 --> 00:03:33.340
So now we can, we can start playing around a little bit.

58
00:03:33.760 --> 00:03:38.600
So first thing we want to do is let's just create a string the way that we have done before.

59
00:03:39.100 --> 00:03:42.730
So we can create a string and we'll stored in a variable.

60
00:03:42.730 --> 00:03:48.310
So we'll create a string variable and then create a string and store that string in the string variable.

61
00:03:48.310 --> 00:03:53.020
So to create a variable, we first have to state what the type of the variable is.

62
00:03:53.110 --> 00:03:55.060
In this case, it'll be a string.

63
00:03:56.560 --> 00:03:58.600
And then we need to name the variable.

64
00:03:59.140 --> 00:04:02.680
Let's call this let's do something that we haven't done before.

65
00:04:02.710 --> 00:04:04.090
Let's call this fruit.

66
00:04:06.420 --> 00:04:10.800
And then equals and then some text a string, right?

67
00:04:11.070 --> 00:04:17.190
So we can do a quotation mark and then let's just put it a type of fruit in here, so let's say you

68
00:04:17.190 --> 00:04:18.120
can put whatever you want.

69
00:04:18.120 --> 00:04:19.080
I'll put Apple.

70
00:04:20.650 --> 00:04:27.670
All right, and so we just created a string and we are holding a reference to the string in a variable

71
00:04:27.670 --> 00:04:28.600
called fruit.

72
00:04:28.810 --> 00:04:35.770
So before I explain anything here because we've done this a million times, let's create another string

73
00:04:36.010 --> 00:04:38.530
in a different way, a new way.

74
00:04:39.040 --> 00:04:43.800
So we'll make a new line, so we'll hold this new string in a variable as well.

75
00:04:43.810 --> 00:04:48.490
So again, we're going to create a string here and let's see.

76
00:04:48.490 --> 00:04:57.340
Let's let's let's do vegetable a vegetable equals and then just put.

77
00:04:57.670 --> 00:05:03.160
Well, so now we're going to create another string, but we're going to do it in a different way.

78
00:05:03.820 --> 00:05:08.550
So this won't be new to you, but it'll be new as far as you creating a string.

79
00:05:08.560 --> 00:05:13.780
So what we're going to do here is use the new operator, which you've seen already when we've created

80
00:05:13.780 --> 00:05:20.320
instances of other objects, but we haven't used the new operator to create a string before it works

81
00:05:20.320 --> 00:05:20.950
the same way.

82
00:05:21.140 --> 00:05:26.830
So will you type new all lowercase, then string and then parentheses?

83
00:05:27.310 --> 00:05:29.410
And now inside of the parentheses?

84
00:05:31.000 --> 00:05:32.740
We still just type of string.

85
00:05:33.100 --> 00:05:38.590
OK, so this is a vegetable, so I don't know, let's do broccoli.

86
00:05:43.430 --> 00:05:46.730
And then we need to close all of that with a semicolon.

87
00:05:47.480 --> 00:05:47.930
OK.

88
00:05:48.770 --> 00:05:52.610
So this brings us to the first little bit of our lesson here.

89
00:05:53.660 --> 00:05:58.760
The fact that we can create a string in a couple of different ways.

90
00:05:59.030 --> 00:06:01.850
So we've seen this approach many times before.

91
00:06:01.850 --> 00:06:04.550
In fact, this is really the only other approach we've ever used.

92
00:06:04.550 --> 00:06:08.480
And now you're seeing that you can also create a string with the new operator.

93
00:06:08.930 --> 00:06:11.990
So you should be wondering, well, what's the difference?

94
00:06:12.740 --> 00:06:18.620
So to explain the difference here, it does require me to get just a tiny bit technical, but it will

95
00:06:18.650 --> 00:06:21.290
all be concepts that we've already talked about before.

96
00:06:21.680 --> 00:06:25.470
So looking here, this Apple string that we created.

97
00:06:25.490 --> 00:06:30.440
Let me remind you of the process that goes on within Java when we are creating this.

98
00:06:30.800 --> 00:06:34.490
So this is an object of type string.

99
00:06:35.300 --> 00:06:39.860
And what happens when Java sees this line?

100
00:06:40.960 --> 00:06:50.140
It starts here, and it realizes that it needs to create a new string object in memory.

101
00:06:51.820 --> 00:07:01.840
And so it asks the operating system, Windows or Linux or Mac OS to give it some memory to allocate

102
00:07:01.840 --> 00:07:04.840
some memory for this new string.

103
00:07:05.870 --> 00:07:14.810
And the operating system gives it an address of an area, an unused area in memory where this new string

104
00:07:15.110 --> 00:07:17.930
object, Apple can reside.

105
00:07:18.230 --> 00:07:23.210
And then it places this word in that new memory location.

106
00:07:23.540 --> 00:07:33.710
And then you can consider that essentially the new address of this apple string in memory, that address

107
00:07:33.710 --> 00:07:38.900
of that memory location essentially gets stored in this variable.

108
00:07:40.100 --> 00:07:45.830
Now, when we use this variable, we can think of it most of the time as though the word apple is stored

109
00:07:45.830 --> 00:07:46.730
in this variable.

110
00:07:46.910 --> 00:07:53.360
But really, it's a reference to the word Apple that is stored in this variable, and that reference

111
00:07:53.360 --> 00:08:00.740
is actually the memory location where this Apple object resides in memory.

112
00:08:00.770 --> 00:08:01.160
OK.

113
00:08:01.310 --> 00:08:01.640
But.

114
00:08:03.270 --> 00:08:10.530
Most of the time, the distinction between the word Apple being in this variable versus the address

115
00:08:10.530 --> 00:08:12.720
of Apple being in this variable, that distinction.

116
00:08:13.470 --> 00:08:18.270
Most of the time you don't have to remain like super super aware of that.

117
00:08:18.450 --> 00:08:21.570
Just in some cases it helps to just be aware of it.

118
00:08:21.720 --> 00:08:29.040
And that's why you hear me usually being careful to say that we're storing a reference to this object

119
00:08:29.040 --> 00:08:32.730
here rather than hearing me say, we're storing this object here.

120
00:08:32.850 --> 00:08:35.340
That's the reason why I keep saying storing a reference.

121
00:08:35.730 --> 00:08:38.700
I may not be 100 percent consistent, but I think I'm pretty good.

122
00:08:39.270 --> 00:08:39.660
All right.

123
00:08:40.050 --> 00:08:43.050
So that's what generally is happening here.

124
00:08:44.260 --> 00:08:47.410
And that's generally what would happen here as well.

125
00:08:47.740 --> 00:08:51.220
Now there's just one one small difference.

126
00:08:52.570 --> 00:08:56.380
Let me show you this difference by creating one more line here.

127
00:08:57.040 --> 00:09:01.960
I'm going to put my cursor on line three, make a new line and I'm going to make one more fruit.

128
00:09:06.690 --> 00:09:07.380
Another fruit.

129
00:09:07.590 --> 00:09:12.690
And I'm going to intentionally use the same fruit here.

130
00:09:13.410 --> 00:09:13.770
OK.

131
00:09:15.270 --> 00:09:19.980
And I'm also going to create another vegetable, and I'm going to just duplicate this line, which is

132
00:09:19.980 --> 00:09:20.790
what I should have done.

133
00:09:21.000 --> 00:09:21.660
The other one.

134
00:09:22.260 --> 00:09:26.500
Another vegetable with a capital D and keep.

135
00:09:27.870 --> 00:09:31.500
Please recall I'm using a capital v here because we do camel case.

136
00:09:31.500 --> 00:09:36.780
And this is another word, but we can't have spaces in variable names, so we have to put the two words

137
00:09:36.780 --> 00:09:37.410
together.

138
00:09:37.680 --> 00:09:45.060
But to make it easy to read, we just capitalize the first letter of the of the subsequent words.

139
00:09:45.660 --> 00:09:46.140
All right.

140
00:09:46.920 --> 00:09:49.980
So we got two apples and two vegetables.

141
00:09:51.340 --> 00:09:55.390
All right, so now let me explain what Java is going to do.

142
00:09:55.720 --> 00:10:02.200
So like I said, Java was going to ask the operating system for some space in memory for this string,

143
00:10:02.200 --> 00:10:07.840
and then it's going to put that string in there and then return the address and store that address essentially

144
00:10:07.840 --> 00:10:08.980
in this variable.

145
00:10:09.910 --> 00:10:14.600
Now, when we get to the next line on line for Java, we'll see.

146
00:10:14.620 --> 00:10:15.130
OK?

147
00:10:15.160 --> 00:10:19.390
He's asking me to allocate memory for a new string again.

148
00:10:19.930 --> 00:10:27.040
However, Java is going to well with this particular string because I'm.

149
00:10:29.350 --> 00:10:36.340
Because I'm asking Java to instantiate this string as what is called a string literal, that is that

150
00:10:36.340 --> 00:10:40.600
I am using just quotes rather than doing the new operator.

151
00:10:41.230 --> 00:10:44.620
Java is going to try to be a little bit smart.

152
00:10:45.130 --> 00:10:50.560
And what it's going to do is it's going to actually look essentially through memory or through a list

153
00:10:50.560 --> 00:10:57.760
that it maintains of all of the string literals that have already been allocated.

154
00:10:57.760 --> 00:11:06.940
And it's going to ask itself essentially before I ask the operating system to allocate this apple string.

155
00:11:07.180 --> 00:11:12.220
Let me go, look through my history and see if I've ever allocated an apple string before.

156
00:11:12.940 --> 00:11:20.650
And in fact, it's going to find that, yes, it has allocated an exact match for this before.

157
00:11:20.830 --> 00:11:26.830
As a string literal and again, string literal just means we're creating a string with quotes instead

158
00:11:26.830 --> 00:11:29.590
of with the new string operator.

159
00:11:29.620 --> 00:11:30.040
OK?

160
00:11:30.490 --> 00:11:37.450
So it's going to see that it has allocated an Apple string literal before, and because it has done

161
00:11:37.450 --> 00:11:45.850
that, it's not going to ask the operating system to give it some more space in memory to duplicate

162
00:11:45.850 --> 00:11:48.310
another Apple object.

163
00:11:48.610 --> 00:11:50.890
Another Apple string in memory.

164
00:11:51.010 --> 00:11:58.720
Instead, it's just going to get the address of the Apple string that already existed in memory and

165
00:11:58.720 --> 00:12:01.630
return that address and store it here.

166
00:12:01.870 --> 00:12:10.780
So this fruit variable and this another fruit variable are actually going to point to the same apple

167
00:12:10.780 --> 00:12:12.760
object in memory.

168
00:12:14.800 --> 00:12:15.280
OK.

169
00:12:16.000 --> 00:12:18.610
However, down here, these two.

170
00:12:20.150 --> 00:12:22.820
Won't work like that down here.

171
00:12:24.620 --> 00:12:30.080
Java is going to see that we have the new string operator and it's going to ask the operating system

172
00:12:30.080 --> 00:12:38.060
to allocate space for broccoli object and then store the broccoli object, then get the memory address

173
00:12:38.060 --> 00:12:43.310
and store that memory address here when it gets down here to the next one because we're using the new

174
00:12:43.310 --> 00:12:44.240
string operator.

175
00:12:44.390 --> 00:12:46.520
It's not going to try to be fancy at all.

176
00:12:46.910 --> 00:12:52.600
Java is simply going to ask the operating system for space to allocate another string.

177
00:12:52.640 --> 00:12:56.770
It doesn't care or even realize that this string is the same as this one.

178
00:12:56.780 --> 00:12:58.310
It's not going to look at that at all.

179
00:12:58.310 --> 00:13:03.020
It's just going to say, give me some more space for another string that happens to be broccoli.

180
00:13:03.350 --> 00:13:10.190
And that's going to be a new address in memory, and a different address is going to be stored here.

181
00:13:10.670 --> 00:13:19.100
So now if what I have just told you about the way that Java allocates objects in memory is true, that

182
00:13:19.100 --> 00:13:27.350
would mean that if we could somehow ask Java whether these two variables are pointing to the same memory

183
00:13:27.350 --> 00:13:32.840
space or not versus these two, we should get two different answers.

184
00:13:33.810 --> 00:13:40.680
And just to remind you, these two, the two fruits should be pointing to the same memory address.

185
00:13:41.280 --> 00:13:49.050
The two vegetables should be pointing to two different memory addresses because of the new string operator

186
00:13:49.050 --> 00:13:49.920
use there.

187
00:13:50.310 --> 00:13:58.290
So how can we ask Java what, whether or not to variables are pointing to the same memory address?

188
00:13:58.590 --> 00:14:06.150
Well, Java has an operator called the Equals Operator, and that is not this operator.

189
00:14:06.160 --> 00:14:12.430
This is actually an assignment operator, but the equals operator looks almost like this.

190
00:14:12.450 --> 00:14:14.370
So let's go ahead and use it in C.

191
00:14:14.370 --> 00:14:22.810
So I'm going to create a couple of new lines here and will will print this out, so we'll do an associati

192
00:14:22.890 --> 00:14:24.060
and hit return.

193
00:14:24.450 --> 00:14:26.490
So we get a system out that print line.

194
00:14:26.880 --> 00:14:32.640
And what we're going to do is will simply put a little bit of a statement here fruit.

195
00:14:33.770 --> 00:14:34.640
Space.

196
00:14:35.640 --> 00:14:41.280
Equals equals, that is the equals operator, another fruit.

197
00:14:41.520 --> 00:14:44.160
And notice I didn't have to type out the whole word.

198
00:14:44.250 --> 00:14:46.320
Another fruit, I just started typing.

199
00:14:46.320 --> 00:14:47.460
I'll do it slower here.

200
00:14:47.640 --> 00:14:50.990
I just typed a couple of letters there and then it gave the idea.

201
00:14:51.010 --> 00:14:56.490
It gave me the option, the options that I could choose from, and I can just choose the first one here.

202
00:14:57.060 --> 00:14:57.450
All right.

203
00:14:57.690 --> 00:15:02.490
So what we're really doing here is we're telling Java, we're asking Java.

204
00:15:02.850 --> 00:15:03.570
Hey, Java.

205
00:15:04.670 --> 00:15:14.360
Does the address that the fruit that's that the fruit variable is pointing to match the address that

206
00:15:14.360 --> 00:15:17.840
the another fruit variable is pointing to?

207
00:15:18.380 --> 00:15:18.820
OK.

208
00:15:19.310 --> 00:15:24.620
And this operator is going to return a true or a false.

209
00:15:26.190 --> 00:15:30.930
If they are pointing to the same address, then it will return true.

210
00:15:31.380 --> 00:15:36.180
Otherwise, it will return false, so we will expect to see the word true come here.

211
00:15:36.510 --> 00:15:38.670
So if we run this, let's see what we get.

212
00:15:39.330 --> 00:15:42.540
OK, so we do indeed get true here.

213
00:15:43.050 --> 00:15:43.470
All right.

214
00:15:43.710 --> 00:15:45.810
So now let's try it for the vegetables.

215
00:15:46.410 --> 00:15:47.120
So we'll do another.

216
00:15:47.190 --> 00:15:48.870
So you t return.

217
00:15:49.230 --> 00:15:52.240
And again, I'm just typing a couple of letters there.

218
00:15:52.260 --> 00:15:56.010
The vegetable is what comes up first, and that's what I want.

219
00:15:56.820 --> 00:15:58.920
Space equals equals.

220
00:16:00.380 --> 00:16:01.580
Another vegetable.

221
00:16:02.730 --> 00:16:05.880
And again, I only typed a couple of letters there, and then I hit return.

222
00:16:06.390 --> 00:16:06.680
All right.

223
00:16:06.690 --> 00:16:17.010
So because the new operator doesn't try to be fancy and it simply allocates new memory space every time

224
00:16:17.010 --> 00:16:17.790
you use it.

225
00:16:18.870 --> 00:16:25.260
That would mean that these two vegetables should be pointing at different addresses.

226
00:16:26.100 --> 00:16:30.990
And so I would expect this line will return false.

227
00:16:31.890 --> 00:16:32.970
Let's run it and see.

228
00:16:32.980 --> 00:16:39.570
So we should end up with the word true first for Line eight and then for Line nine, we should have

229
00:16:39.570 --> 00:16:40.500
a false.

230
00:16:41.370 --> 00:16:42.630
Let's run this and see.

231
00:16:43.080 --> 00:16:45.100
And indeed, that's exactly what we get.

232
00:16:45.210 --> 00:16:47.940
True and false.

233
00:16:48.510 --> 00:16:57.630
So that just confirms the difference between instantiating a string using a string literal versus instantiating

234
00:16:57.630 --> 00:16:59.490
a string using the new operator.

235
00:16:59.970 --> 00:17:02.490
And I think that's going to wrap up this lesson.

236
00:17:02.670 --> 00:17:06.670
We have many, many, many, many more to to get into.

237
00:17:06.690 --> 00:17:08.220
So I'll see you in the next one.
