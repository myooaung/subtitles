WEBVTT
1
00:00:00.330 --> 00:00:00.780
All right.

2
00:00:00.810 --> 00:00:06.710
So in the last one, we implemented the Find My I.D. method, where we pulled that up into the crowd

3
00:00:06.730 --> 00:00:07.580
repository.

4
00:00:07.590 --> 00:00:12.810
And so now we're ready to tackle the find all method and we'll go about it in the same way that we did

5
00:00:12.810 --> 00:00:13.260
the other one.

6
00:00:13.260 --> 00:00:20.310
So we'll start off by just copying all of the find all method currently there, and we'll jump over

7
00:00:20.310 --> 00:00:22.650
to the credit repository class.

8
00:00:22.950 --> 00:00:25.080
And let's just save.

9
00:00:25.500 --> 00:00:28.830
Or rather, let's just paste this right in here.

10
00:00:29.430 --> 00:00:30.240
All right.

11
00:00:30.360 --> 00:00:35.460
And so we'll need to template ties the call to find all sequel.

12
00:00:35.880 --> 00:00:37.950
And how did we name these other ones?

13
00:00:37.950 --> 00:00:44.310
So we'll just replace this with a get find all sequel.

14
00:00:45.800 --> 00:00:52.580
Like so oops and then option return, create abstract method.

15
00:00:53.480 --> 00:00:55.430
Yes, it can return a string.

16
00:00:55.670 --> 00:00:56.990
And we're good there.

17
00:00:57.380 --> 00:01:00.170
And now we need to address this red mark here.

18
00:01:00.170 --> 00:01:06.440
And that just has to do with the fact that now this extract entity from results, that method is defined

19
00:01:06.440 --> 00:01:13.040
to return something of type T, whereas this code here, as it's currently written, is expecting an

20
00:01:13.040 --> 00:01:15.140
actual instance of a person, right?

21
00:01:15.290 --> 00:01:18.500
So we just need to change all of our data types here, right?

22
00:01:18.500 --> 00:01:24.020
So this will become not a person, but a T, and this will become a T.

23
00:01:25.710 --> 00:01:28.170
And I think that did it right there.

24
00:01:28.530 --> 00:01:36.900
And let's rename people to entities maybe sort of shift f into entities.

25
00:01:39.820 --> 00:01:40.060
Right.

26
00:01:40.090 --> 00:01:44.350
So instead of entity, since it was people, it's plural because it's a collection.

27
00:01:44.530 --> 00:01:48.970
Make note of how I'm naming things, by the way, I don't think I've said this explicitly.

28
00:01:49.330 --> 00:01:54.790
So when we deal with collections, I may have mentioned a little bit of this once before, but when

29
00:01:54.790 --> 00:02:00.250
we deal with collections, we should try to name our collection variables.

30
00:02:00.580 --> 00:02:05.050
The plural form of whatever it is that they are meant to store.

31
00:02:05.080 --> 00:02:13.960
Ideally, that has real world meaning rather than using technical terms like set or list things like

32
00:02:13.960 --> 00:02:18.970
that, though sometimes it makes sense to call something a list or a set, but you just want to make

33
00:02:18.970 --> 00:02:25.030
sure that you're doing it from the real world context, perspective and not the computer programming

34
00:02:25.030 --> 00:02:25.870
perspective.

35
00:02:25.900 --> 00:02:26.350
OK.

36
00:02:26.440 --> 00:02:31.660
You know, the whole point of object oriented programming is to model the real world, right?

37
00:02:31.810 --> 00:02:36.190
Not modeling computer science concepts, modeling the real world.

38
00:02:36.670 --> 00:02:39.940
So, I mean, we already have no more red marks.

39
00:02:39.940 --> 00:02:41.400
We might be done with this one.

40
00:02:41.410 --> 00:02:45.310
Let's see if there's anything inside of it that we need to templates, but I don't think so.

41
00:02:45.850 --> 00:02:49.180
We've got the sequel that's going to execute it.

42
00:02:49.180 --> 00:02:54.520
And then you're going to get back a bunch of some things and then for each something, you're going

43
00:02:54.520 --> 00:02:55.300
to map it.

44
00:02:55.660 --> 00:02:58.570
And this is where we've already extracted out that part.

45
00:02:59.260 --> 00:03:04.480
And then you're going to add those some things to a collection and then you're going to return that

46
00:03:04.480 --> 00:03:06.190
collection generically.

47
00:03:06.210 --> 00:03:09.060
So, yeah, I think we're already done with this.

48
00:03:09.070 --> 00:03:10.810
So this is getting even easier, isn't it?

49
00:03:11.020 --> 00:03:11.260
All right.

50
00:03:11.260 --> 00:03:18.520
So let's jump back over to the people repository and we've got something that we need to implement as

51
00:03:18.520 --> 00:03:19.210
usual.

52
00:03:19.210 --> 00:03:27.310
So I'm going to scroll down a little ways here, I guess right here, right above the method that hopefully

53
00:03:27.310 --> 00:03:28.300
is about to go away.

54
00:03:28.480 --> 00:03:29.500
And then I'll do a control.

55
00:03:29.510 --> 00:03:34.570
Oh, and it looks like all that needs to be implemented is this get find all sequel.

56
00:03:34.570 --> 00:03:36.400
So we'll just double click that.

57
00:03:36.730 --> 00:03:43.060
And now I can reference the Find All sequel just like that.

58
00:03:43.480 --> 00:03:47.320
And then I think I can take this find all method.

59
00:03:47.320 --> 00:03:55.330
And first, though, I'll commented out, then jump over to the tests and just run all the tests.

60
00:03:58.450 --> 00:03:59.230
Looking good.

61
00:04:00.130 --> 00:04:07.660
All right, and then I will jump back over here to the people repository and delete the find all method.

62
00:04:08.440 --> 00:04:10.690
And that was so quick, let's go ahead and just do another one.

63
00:04:10.690 --> 00:04:13.600
We might finish this whole thing, in fact, in this lesson.

64
00:04:14.260 --> 00:04:15.640
So the next one is count.

65
00:04:15.940 --> 00:04:18.360
OK, let's grab all of that.

66
00:04:18.430 --> 00:04:19.180
Copy it.

67
00:04:19.360 --> 00:04:20.740
Jump up here.

68
00:04:20.740 --> 00:04:23.670
Jump over to the crud repository.

69
00:04:23.680 --> 00:04:24.220
Go below.

70
00:04:24.220 --> 00:04:25.210
Find all.

71
00:04:25.240 --> 00:04:27.130
Make a new couple of lines.

72
00:04:27.130 --> 00:04:28.540
Paste count.

73
00:04:29.380 --> 00:04:35.350
Now this is one that I forgot to extract the sequel for into a constant anyway.

74
00:04:35.920 --> 00:04:36.730
Well, all right.

75
00:04:36.730 --> 00:04:39.310
So what we'll do here is the same thing we've done before.

76
00:04:39.310 --> 00:04:50.620
We'll just define a get count sequel method like so we will let the idea generate the abstract version

77
00:04:50.620 --> 00:04:51.610
of that for us.

78
00:04:51.940 --> 00:04:58.360
Hit enter to get that and then jump back over to the people repository.

79
00:04:59.080 --> 00:05:05.830
And then we need to implement that, and I will implemented right above the existing count method.

80
00:05:06.280 --> 00:05:06.790
Control.

81
00:05:06.790 --> 00:05:08.320
Oh, to override.

82
00:05:08.320 --> 00:05:11.100
And there's the get count sequel method there.

83
00:05:11.110 --> 00:05:15.640
And now what I will do is what I should have done many lessons ago.

84
00:05:15.640 --> 00:05:18.060
I will select this count sequel right here.

85
00:05:18.070 --> 00:05:23.870
I will first extract the constant still, and I forgot how it was, how I was naming these before.

86
00:05:23.890 --> 00:05:24.760
What are they called?

87
00:05:25.120 --> 00:05:25.480
Fine.

88
00:05:25.540 --> 00:05:27.240
OK, just the verb count.

89
00:05:27.250 --> 00:05:29.530
I guess it's just count sequel.

90
00:05:29.680 --> 00:05:32.020
OK, so select count.

91
00:05:33.040 --> 00:05:35.200
Eskew will enter.

92
00:05:36.270 --> 00:05:42.990
All right, then over here in the Get Count sequel, I will just reference that.

93
00:05:45.700 --> 00:05:46.300
Here we go.

94
00:05:47.950 --> 00:05:48.490
OK.

95
00:05:49.880 --> 00:05:50.690
What else?

96
00:05:50.780 --> 00:05:51.680
That might be it.

97
00:05:52.730 --> 00:05:56.550
Let's clean up these imports also so I can do a control option.

98
00:05:56.570 --> 00:05:56.990
Oh.

99
00:05:58.510 --> 00:06:03.700
Or control Alto, and that just cleans up the imports, gets rid of the imports that are no longer needed

100
00:06:03.700 --> 00:06:07.270
because that code isn't here anymore, it's now in the credit repository.

101
00:06:07.570 --> 00:06:07.870
All right.

102
00:06:07.900 --> 00:06:10.690
So jump back over to the credit repository.

103
00:06:10.820 --> 00:06:12.730
Let's also clean up these imports.

104
00:06:12.730 --> 00:06:17.320
We just got that reference to the person control option or control alt.

105
00:06:17.350 --> 00:06:18.580
Oh, all right.

106
00:06:18.610 --> 00:06:22.090
And then let's find the what was the method count method?

107
00:06:22.390 --> 00:06:26.710
And let's just analyze it real quick and see what we've got here.

108
00:06:27.340 --> 00:06:27.640
Yeah.

109
00:06:27.640 --> 00:06:29.190
So this looks very straightforward.

110
00:06:29.200 --> 00:06:32.080
I think we are done with this.

111
00:06:32.680 --> 00:06:40.900
So let's jump back over to the people repository, and I think we can comment out the count method and

112
00:06:40.900 --> 00:06:43.120
then rerun our tests.

113
00:06:44.690 --> 00:06:48.620
Let's jump over to the tests and rerun them all.

114
00:06:51.360 --> 00:06:52.110
Looking good.

115
00:06:52.740 --> 00:06:59.040
Jump back over to the repository and let's delete the count method.

116
00:06:59.280 --> 00:07:03.240
And now let's go ahead and do delete also.

117
00:07:03.270 --> 00:07:07.320
And we do have a couple versions of Delete, but we'll see what we'll do with that.

118
00:07:07.860 --> 00:07:08.100
All right.

119
00:07:08.100 --> 00:07:11.130
So I'm going to copy the delete method.

120
00:07:11.520 --> 00:07:14.490
Jump back over to the credit repository.

121
00:07:15.150 --> 00:07:17.910
Come down to the count method.

122
00:07:19.410 --> 00:07:22.530
Make a couple new lines, paste.

123
00:07:24.950 --> 00:07:27.800
Change this data Typekit to T.

124
00:07:29.930 --> 00:07:35.480
Change the name with a shift of six to just entity.

125
00:07:36.660 --> 00:07:37.740
Click OK.

126
00:07:40.410 --> 00:07:45.840
Do the same thing here about this sequel here, so I'm going to just.

127
00:07:46.820 --> 00:07:52.640
Replace that with a Get to Elite sequel.

128
00:07:54.760 --> 00:07:59.000
Let the aid create that as an abstract method, hit enter.

129
00:07:59.020 --> 00:08:00.970
And while I'm here, let's see what else.

130
00:08:01.930 --> 00:08:04.480
Yeah, I think that's probably already done.

131
00:08:05.350 --> 00:08:14.590
So then jump back over to the people repository, come down to our delete method right above it, rather

132
00:08:14.590 --> 00:08:15.160
control.

133
00:08:15.160 --> 00:08:19.180
Oh, finally, get Delete sequel to be implemented.

134
00:08:19.780 --> 00:08:22.900
Now select all of this sequel here.

135
00:08:22.900 --> 00:08:24.550
Extract the constant.

136
00:08:25.620 --> 00:08:27.370
And I don't know.

137
00:08:27.390 --> 00:08:28.800
Call it delete.

138
00:08:32.760 --> 00:08:36.270
Sequel and then up here reference that.

139
00:08:38.270 --> 00:08:38.900
Here we go.

140
00:08:39.680 --> 00:08:45.730
And then all of that can be commented, jump over to the tests.

141
00:08:46.970 --> 00:08:48.440
Rerun the tests.

142
00:08:51.520 --> 00:08:58.450
Very good, minimize that jump back over to the repository, delete this implementation.

143
00:08:59.260 --> 00:09:05.140
So you see the pattern here right now, some of you might possibly be a little confused about the fact

144
00:09:05.140 --> 00:09:08.170
that I'm not doing technically like the TED thing.

145
00:09:08.290 --> 00:09:13.060
The reason I'm not is because you write a test first for new functionality.

146
00:09:13.300 --> 00:09:15.430
This isn't technically new functionality.

147
00:09:15.430 --> 00:09:17.350
This is technically just refactoring.

148
00:09:17.500 --> 00:09:24.130
Refactoring is where you're really just reshuffling existing functionality in some other way.

149
00:09:24.160 --> 00:09:24.610
OK.

150
00:09:24.790 --> 00:09:30.520
So as long as I'm not introducing any new functionality, I don't need to start with a new test.

151
00:09:30.850 --> 00:09:36.850
And in fact, because I have a suite of tests for the existing functionality, that's what's giving

152
00:09:36.850 --> 00:09:44.620
me guardrails to feel safe about doing this level of surgery on this class by me, moving things all

153
00:09:44.620 --> 00:09:45.370
over the place.

154
00:09:45.490 --> 00:09:48.940
I can move a little bit at a time, which is what you're seeing me do, right?

155
00:09:48.940 --> 00:09:52.270
I pick up one method and I move it somewhere else.

156
00:09:52.390 --> 00:09:58.060
I make a few changes just to help that new method or that newly moved method work.

157
00:09:58.390 --> 00:10:05.860
Then I then I jump back over to the tests and then I run all the tests to confirm whether or not I broke

158
00:10:06.040 --> 00:10:13.420
any previously existing functionality, which would be in if I had broken previously existing functionality

159
00:10:13.540 --> 00:10:15.430
that would be called a regression, right?

160
00:10:15.430 --> 00:10:22.750
So I'm regression testing my entire repository class each time I make a few changes, right?

161
00:10:23.140 --> 00:10:28.480
I don't try to re-implement every single crud method on this class, all in one fell swoop.

162
00:10:28.750 --> 00:10:29.590
I don't do that.

163
00:10:29.710 --> 00:10:32.700
I make a small change for one test method.

164
00:10:32.710 --> 00:10:36.430
I get rid of all the errors and then I go run the tests.

165
00:10:36.790 --> 00:10:40.720
All right, so let's grab this now.

166
00:10:40.730 --> 00:10:43.090
This one's going to be a little bit different.

167
00:10:43.120 --> 00:10:47.530
I've got something here that I think can probably be template ties.

168
00:10:47.560 --> 00:10:51.490
OK, but anyway, let's copy it, and let's jump up here.

169
00:10:51.520 --> 00:10:55.870
Go over to the repo and come down.

170
00:10:56.590 --> 00:11:00.130
OK, so let me also get rid of that extra space there.

171
00:11:01.000 --> 00:11:01.420
All right.

172
00:11:01.420 --> 00:11:06.790
So let's paste this different version of the delete method.

173
00:11:07.240 --> 00:11:08.740
Let's use the template.

174
00:11:08.950 --> 00:11:11.380
So that's rename this variable here.

175
00:11:11.390 --> 00:11:14.020
Shift six and call.

176
00:11:14.050 --> 00:11:17.410
Call it into entities.

177
00:11:19.690 --> 00:11:24.870
And then let's change this data type from person to just generic tea.

178
00:11:25.810 --> 00:11:29.200
OK, now this may be kind of interesting.

179
00:11:29.350 --> 00:11:37.150
OK, so now this goes red, but I have a feeling that this is going to need to be template taste anyway.

180
00:11:37.600 --> 00:11:39.610
So let's let's look at this now.

181
00:11:40.630 --> 00:11:45.880
We're creating a statement that's generic, but then we're taking our entities and we're turning them

182
00:11:45.880 --> 00:11:50.830
into a stream so that we can extract their ideas.

183
00:11:51.220 --> 00:11:55.210
Well, we might be able to leave this here as long as we don't heartwood this.

184
00:11:55.210 --> 00:11:56.590
So let's see something here.

185
00:11:56.620 --> 00:11:58.570
Now, I'm not sure if this is going to work.

186
00:11:58.840 --> 00:12:02.960
Let's see if we can refer to this class here with the generic type.

187
00:12:02.980 --> 00:12:04.040
Wow, we can do that.

188
00:12:04.060 --> 00:12:04.510
OK.

189
00:12:04.690 --> 00:12:12.880
So this is probably the first time I myself have ever referred to a method reference of a generic type

190
00:12:13.450 --> 00:12:15.280
T, you know, like this.

191
00:12:15.490 --> 00:12:20.410
So that's pretty cool if that really works, especially if that really works, that's going to be cool.

192
00:12:20.440 --> 00:12:27.190
OK, well, then in that case, I guess that line probably can stay there and then we need to extract

193
00:12:27.190 --> 00:12:29.600
out this sequel, though.

194
00:12:29.710 --> 00:12:32.470
Oh, and this is going to be interesting now.

195
00:12:32.470 --> 00:12:38.260
This sequel is going to have to have this colon ides bit in here.

196
00:12:38.260 --> 00:12:43.720
So again, the new method that we're going to extract out here is going to need to mention that maybe

197
00:12:43.720 --> 00:12:45.640
even leave this in as an example.

198
00:12:45.880 --> 00:12:50.980
So I'm going to copy this whole entire line because I might reference that in my Java doc for the new

199
00:12:50.980 --> 00:12:53.230
method that I'm about to create right now.

200
00:12:53.650 --> 00:12:54.020
All right.

201
00:12:54.040 --> 00:12:55.270
And so let's see.

202
00:12:55.270 --> 00:13:00.640
This will be get delete in sequel.

203
00:13:00.730 --> 00:13:06.490
Hopefully, that will not be too confusing, and I missed the little closing quote there.

204
00:13:06.580 --> 00:13:10.240
And so we'll let the A.D. create that now.

205
00:13:10.240 --> 00:13:15.490
The data type for this should just be string.

206
00:13:16.060 --> 00:13:22.600
So for some reason, the A.D. thought that that should be a generic method and we don't need or even

207
00:13:22.600 --> 00:13:23.710
want that to be.

208
00:13:24.100 --> 00:13:24.370
All right.

209
00:13:24.400 --> 00:13:24.910
So there we go.

210
00:13:24.940 --> 00:13:27.940
I just had to get rid of the generic thing there.

211
00:13:29.290 --> 00:13:30.160
All right.

212
00:13:30.790 --> 00:13:34.000
So let's put a Java doc on this.

213
00:13:34.570 --> 00:13:38.350
So forward slash our star star and.

214
00:13:40.000 --> 00:13:40.810
Let's see here.

215
00:13:41.370 --> 00:13:51.010
Should return a sequel string like this, and then I'll just reference the example there.

216
00:13:51.160 --> 00:13:52.990
And that's probably good enough right there.

217
00:13:53.260 --> 00:13:57.310
Other than just be sure to include the.

218
00:14:01.150 --> 00:14:06.640
Named parameter and call it IDs.

219
00:14:07.330 --> 00:14:07.720
OK.

220
00:14:07.870 --> 00:14:09.370
I think that is good.

221
00:14:09.670 --> 00:14:18.220
And so let's jump back over to the people repository jumped down to the remaining save method wherever

222
00:14:18.220 --> 00:14:18.850
it is.

223
00:14:19.360 --> 00:14:19.870
There it is.

224
00:14:19.900 --> 00:14:22.390
OK, so now let's grab.

225
00:14:24.150 --> 00:14:33.960
All of that and extract that out into a constant and I will call it delete in sequel and then appear.

226
00:14:34.260 --> 00:14:43.050
We will override the get delete in sequel method, which is right there, and then we can just reference

227
00:14:43.110 --> 00:14:47.370
our newly created constant delete in sequel.

228
00:14:47.610 --> 00:14:48.630
OK, there we go.

229
00:14:48.930 --> 00:14:50.130
And I think that's it.

230
00:14:50.490 --> 00:14:54.090
And so then I will select all of this comment that out.

231
00:14:54.450 --> 00:14:56.010
Jump over to the tests.

232
00:14:56.340 --> 00:14:57.810
Run all the tests.

233
00:15:03.250 --> 00:15:04.090
Looking good.

234
00:15:05.020 --> 00:15:09.430
I was thrown off for just a second with that little bit there, but that's not related to anything.

235
00:15:10.420 --> 00:15:17.350
So close that jump back over to the people repository and then I can delete that.

236
00:15:17.890 --> 00:15:18.250
All right.

237
00:15:18.250 --> 00:15:20.020
And then we've got update.

238
00:15:20.350 --> 00:15:23.830
So let's try update copy at all.

239
00:15:25.120 --> 00:15:27.340
Jump up into the crud repo.

240
00:15:28.270 --> 00:15:34.390
Come down here below the delete that we just did paste.

241
00:15:34.870 --> 00:15:40.110
Change the name shift six, call it entity woops.

242
00:15:40.120 --> 00:15:42.340
Not all caps into T.

243
00:15:42.760 --> 00:15:44.950
Enter click OK.

244
00:15:45.860 --> 00:15:49.290
Change the data type to just a generic T.

245
00:15:50.000 --> 00:15:50.480
OK.

246
00:15:50.570 --> 00:15:54.450
And so here we've got something that definitely needs to be templated.

247
00:15:55.130 --> 00:16:01.930
All of these lines here at least need to be templated, really.

248
00:16:01.940 --> 00:16:10.880
I don't need to include the this last one in my templating because this is getting the ID and binding

249
00:16:10.880 --> 00:16:11.210
it.

250
00:16:11.210 --> 00:16:21.020
So as long as the last parameter in my supplied sequel is for that ID, which is highly likely because

251
00:16:21.020 --> 00:16:28.280
it's set in the where clause, I would be OK, though I could include it if I wanted maximum flexibility.

252
00:16:28.280 --> 00:16:29.870
But I'm OK with this for now.

253
00:16:30.470 --> 00:16:35.630
OK, so now we did almost the exact same thing for Save.

254
00:16:35.630 --> 00:16:41.990
And in fact, eventually this this this template here for the update and the template that we have for

255
00:16:41.990 --> 00:16:45.680
the save, I think are going to possibly end up getting merged into one.

256
00:16:45.680 --> 00:16:46.280
But let's see.

257
00:16:46.290 --> 00:16:47.870
So we called that map for save.

258
00:16:47.870 --> 00:16:48.140
OK?

259
00:16:48.680 --> 00:16:50.180
All right, so.

260
00:16:51.310 --> 00:16:56.530
I think I will just extract the method out option command.

261
00:16:57.190 --> 00:16:57.330
Yeah.

262
00:16:58.450 --> 00:17:03.700
And we will call this map for update.

263
00:17:07.040 --> 00:17:07.670
All right.

264
00:17:07.820 --> 00:17:13.940
Got all of that, and then I will actually just get rid of the guts of it, though, because this will

265
00:17:13.940 --> 00:17:21.560
be abstract, so I'm replacing all of that with a semicolon and then change the private to abstract.

266
00:17:21.680 --> 00:17:22.670
Yep, there we go.

267
00:17:22.880 --> 00:17:32.600
And I think I would prefer to have this method live next door to its brother or siblings the the save

268
00:17:32.600 --> 00:17:33.290
method, right?

269
00:17:33.500 --> 00:17:34.460
Because they're the same thing.

270
00:17:34.460 --> 00:17:42.020
And I think in the future, these two methods may if I were to keep working on this, I would probably

271
00:17:42.170 --> 00:17:46.010
be able to refactor to the point that these are the same method, actually.

272
00:17:46.550 --> 00:17:49.640
But for right now, you know, one step at a time.

273
00:17:50.060 --> 00:17:50.390
All right.

274
00:17:50.400 --> 00:17:54.080
So let's jump back up here to the update.

275
00:17:54.800 --> 00:17:55.100
All right.

276
00:17:55.100 --> 00:17:58.640
So then let's let's select all of this.

277
00:18:00.040 --> 00:18:12.160
And create a get up date sequel method and let the ABC create that as an abstract, and that's fine.

278
00:18:12.190 --> 00:18:12.700
OK.

279
00:18:12.850 --> 00:18:22.480
And then jump back over to the people repository and down to our update method here, and we will let

280
00:18:22.570 --> 00:18:28.900
the A.D. generate these two overwritten methods for us or get them started.

281
00:18:29.380 --> 00:18:33.130
OK, so now we need to get the update sequel, which we have right here.

282
00:18:33.140 --> 00:18:39.130
So again, I will select all of this and then extract out the constant.

283
00:18:40.470 --> 00:18:45.120
Update sequel, and then I will reference that right here.

284
00:18:45.390 --> 00:18:47.220
Update sequel, there we go.

285
00:18:47.310 --> 00:18:57.960
So there's that part and then for the guts here, I just need to grab these four bindings copy, then

286
00:18:58.380 --> 00:18:59.280
come up here.

287
00:19:01.240 --> 00:19:09.010
And paste those, and I think that should be it, and then I can comment this out, jump over to the

288
00:19:09.010 --> 00:19:09.960
tests.

289
00:19:11.040 --> 00:19:12.540
Rerun the tests.

290
00:19:16.510 --> 00:19:17.920
And everything's looking good.

291
00:19:21.960 --> 00:19:24.840
So then I can get rid of this and that.

292
00:19:25.380 --> 00:19:28.320
So now let's see how much easier this looks.

293
00:19:28.530 --> 00:19:29.370
Oh, look at that.

294
00:19:29.380 --> 00:19:29.990
Look at that.

295
00:19:30.000 --> 00:19:30.600
Look at that.

296
00:19:30.720 --> 00:19:33.780
Let's clean up the imports again.

297
00:19:34.620 --> 00:19:38.070
Now that's what I like to see is just a nice, clean look.

298
00:19:38.070 --> 00:19:39.300
How clean that is, right?

299
00:19:39.330 --> 00:19:40.560
Look how clean that is.

300
00:19:41.040 --> 00:19:42.330
Map for save.

301
00:19:42.420 --> 00:19:48.450
It's just down to just the parts that you absolutely have to do to make all of these crud operations

302
00:19:48.450 --> 00:19:50.760
work and none of the extraneous stuff.

303
00:19:50.760 --> 00:19:54.350
The extraneous stuff is shoved in into the closet, right?

304
00:19:54.360 --> 00:19:58.830
Like when you have guests coming over, you just take all your stuff and just shove it all into a closet

305
00:19:59.040 --> 00:20:01.140
so that nobody has to look at that right?

306
00:20:01.260 --> 00:20:04.350
And all they see, is this a nice, clean house, right?

307
00:20:04.440 --> 00:20:07.200
So this is our nice, much cleaner house now.

308
00:20:09.660 --> 00:20:09.990
All right.

309
00:20:10.020 --> 00:20:20.280
So one thing I think I would like to move this method up, just going to cut it, I want to move that

310
00:20:20.280 --> 00:20:26.670
up to where we do a few of these other mapping type things here so that it's a little more like in the

311
00:20:26.670 --> 00:20:28.950
same neighborhood and everything, right?

312
00:20:30.430 --> 00:20:31.180
OK.

313
00:20:32.910 --> 00:20:38.130
Yeah, that is much more concise, much more concise.

314
00:20:38.220 --> 00:20:43.290
Oh, and this method here convert date of birth to time stamp.

315
00:20:43.650 --> 00:20:44.100
Let's see.

316
00:20:44.100 --> 00:20:46.080
Now we're we've been using this.

317
00:20:48.680 --> 00:20:49.940
Oh, right there.

318
00:20:49.970 --> 00:20:57.260
OK, well, that belongs, yeah, I think I think that that's appropriate, then we could take that

319
00:20:57.260 --> 00:21:00.560
method and push it up into the superclass.

320
00:21:00.890 --> 00:21:07.840
But I wouldn't do that until I knew that I needed it for another repository class that we would implement.

321
00:21:07.880 --> 00:21:13.340
So right now, this is the only class that needs that functionality, and it's only being used by these

322
00:21:13.340 --> 00:21:14.240
two methods.

323
00:21:14.630 --> 00:21:18.500
And these two methods have to live in the subclass, not in the superclass.

324
00:21:18.500 --> 00:21:22.010
So for right now, it's it's OK.

325
00:21:22.040 --> 00:21:24.950
I think it's appropriate enough that that method stay here.

326
00:21:26.850 --> 00:21:28.420
All right, man.

327
00:21:28.440 --> 00:21:32.280
That's that's just a work of art right there, and that's looking really nice.

328
00:21:32.430 --> 00:21:38.610
So this is where we get into more of the craftsmanship of writing code.

329
00:21:38.820 --> 00:21:48.150
So we just got to see some more of the the use of generics and abstract classes, super classes, subclasses

330
00:21:48.600 --> 00:21:54.240
also that we could clean up the messiness of the try catch and all that stuff that we had in this class

331
00:21:54.240 --> 00:21:54.630
before.

332
00:21:54.640 --> 00:21:57.030
And now it's just so much more concise.

333
00:21:57.330 --> 00:22:05.310
And more importantly, now we've set ourselves up to be able to create another repository class much

334
00:22:05.310 --> 00:22:09.330
more easily and much more quickly than we had before.

335
00:22:09.360 --> 00:22:09.730
OK.

336
00:22:09.750 --> 00:22:15.120
Because now when we create the next one, we don't have to do anything other than just focus on the

337
00:22:15.120 --> 00:22:20.640
most important bits, and all of the other scaffolding will already be taken care of for us.

338
00:22:20.670 --> 00:22:27.630
OK, so this is one of the types of exercises where you can start to really get an appreciation for

339
00:22:27.630 --> 00:22:31.020
some of the capabilities of object oriented programming.

340
00:22:31.230 --> 00:22:37.800
That's not to say that you couldn't do similarly nice clean up type activities with a different programming

341
00:22:37.800 --> 00:22:38.340
paradigm.

342
00:22:38.340 --> 00:22:39.430
I'm sure you could.

343
00:22:39.460 --> 00:22:44.310
OK, but this is some of how you can do this with object oriented programming.

344
00:22:44.430 --> 00:22:47.520
And it's, you know, it's kind of nice for what it is, right?

345
00:22:47.580 --> 00:22:52.170
So with that, let's bring this lesson to a close and I will see you in the next one.
