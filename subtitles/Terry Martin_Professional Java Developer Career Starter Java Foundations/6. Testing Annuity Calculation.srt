1
00:00:00,180 --> 00:00:00,600
All right.

2
00:00:00,630 --> 00:00:01,410
Welcome back.

3
00:00:01,770 --> 00:00:07,560
So now that we have done a little bit of unit testing with something very basic, I'd like to do a couple

4
00:00:07,560 --> 00:00:07,930
of things.

5
00:00:07,950 --> 00:00:16,140
First, I would like to encourage you and challenge you to continue to flesh out the calculator code

6
00:00:16,140 --> 00:00:24,210
that we already started with, so you can add in the ability to subtract, multiply and divide and think

7
00:00:24,210 --> 00:00:28,560
of a few scenarios and add those tests to our test class.

8
00:00:28,680 --> 00:00:33,900
So if you want to take up that challenge, you should probably go ahead and do that now before we move

9
00:00:33,900 --> 00:00:35,700
in to the next thing.

10
00:00:35,730 --> 00:00:36,100
All right.

11
00:00:36,120 --> 00:00:38,670
Now I want to do something a little more interesting.

12
00:00:38,700 --> 00:00:44,070
I want to revisit some of our ability to calculate using the big decimal class.

13
00:00:44,430 --> 00:00:51,270
And I have found on some random websites somewhere some more financial calculations for us to do.

14
00:00:51,480 --> 00:00:58,230
So what I would like to do next is to try doing that with this formula here.

15
00:00:58,470 --> 00:01:04,410
This is a formula for calculating ordinary annuity or a sinking fund.

16
00:01:04,830 --> 00:01:05,280
All right.

17
00:01:05,580 --> 00:01:09,210
So we're going to do this though now in a two way.

18
00:01:09,540 --> 00:01:15,900
So we'll start off writing a test based on the examples and practice answers that are given here.

19
00:01:15,900 --> 00:01:21,030
And that way, we can confirm whether or not we've implemented the code correctly implementing code

20
00:01:21,030 --> 00:01:27,330
in this way, where you're given a bunch of answers or a given set of inputs is fantastic and lends

21
00:01:27,330 --> 00:01:32,280
itself exceedingly well to both TDD and just then testing in general.

22
00:01:32,820 --> 00:01:35,340
So without further ado, let's jump right in.

23
00:01:35,790 --> 00:01:37,050
All right, so let's see.

24
00:01:37,050 --> 00:01:39,790
So we're going to be calculating ordinary annuity.

25
00:01:39,810 --> 00:01:46,020
And by the way, technically you have learned everything that you probably need to know to be able to

26
00:01:46,140 --> 00:01:47,490
work this out on your own.

27
00:01:47,500 --> 00:01:49,060
So if you'd like to.

28
00:01:49,080 --> 00:01:55,350
You certainly are more than welcome to pause the video and try implementing this formula on your own.

29
00:01:55,380 --> 00:01:57,930
Otherwise, I'm going to go ahead and get started here.

30
00:01:58,080 --> 00:01:58,470
All right.

31
00:01:58,470 --> 00:02:07,350
So see, I'm going to create a new test public void and see here now.

32
00:02:07,350 --> 00:02:13,950
I don't feel like thinking too much about the name of this, so I think I'm just going to call it annuity

33
00:02:14,670 --> 00:02:19,920
example, and I'm just taking that name just from this example right here for now.

34
00:02:20,340 --> 00:02:20,760
All right.

35
00:02:22,710 --> 00:02:31,500
So the answer that I expect to get out of whatever this problem is, is something that looks like this.

36
00:02:31,680 --> 00:02:34,650
And I think we now know how to format money and everything.

37
00:02:34,650 --> 00:02:39,780
So I think I want this to be a string that I'm going to get back.

38
00:02:39,900 --> 00:02:40,320
All right.

39
00:02:40,770 --> 00:02:47,190
So I'm going to imagine that I'm going to have some method that I can call and I'm going to pass in

40
00:02:47,190 --> 00:02:52,200
all of the given parts, the inputs and everything, and the output of it will be a string.

41
00:02:52,530 --> 00:02:54,180
So then let's see.

42
00:02:54,180 --> 00:02:55,380
What did they call this?

43
00:02:55,680 --> 00:03:01,680
Well, I'm just going to call it answer answer equals calc dot.

44
00:03:01,920 --> 00:03:03,390
Let's see here now.

45
00:03:03,540 --> 00:03:07,650
Calculate annuity is what I will call the method.

46
00:03:08,670 --> 00:03:16,260
And let's see now the givens are we've got a Joe deposits twenty two thousand dollars at the end of

47
00:03:16,260 --> 00:03:18,360
each year for seven years.

48
00:03:18,810 --> 00:03:19,200
All right.

49
00:03:19,200 --> 00:03:25,140
So we've got twenty two thousand dollars in the in in recurring deposits.

50
00:03:25,650 --> 00:03:26,120
Let's see.

51
00:03:26,130 --> 00:03:29,040
And I think that's probably this are here.

52
00:03:29,490 --> 00:03:30,720
Maybe that means recurring.

53
00:03:30,720 --> 00:03:31,380
I don't know.

54
00:03:31,380 --> 00:03:32,070
But anyway.

55
00:03:32,280 --> 00:03:32,610
All right.

56
00:03:32,610 --> 00:03:38,220
So I'm going to pass that in as a string, I suppose.

57
00:03:38,220 --> 00:03:39,540
Twenty two thousand.

58
00:03:39,720 --> 00:03:43,050
Now I'm going to use an unformed edge string for now.

59
00:03:43,800 --> 00:03:44,040
All right.

60
00:03:44,040 --> 00:03:50,220
So passes in twenty two thousand dollars at the end of each year for seven years.

61
00:03:50,250 --> 00:03:52,680
OK, so we've got a period of seven years.

62
00:03:53,010 --> 00:04:00,960
I guess I'm going to use an integer for that in an account paying six percent compounded annually.

63
00:04:01,260 --> 00:04:04,200
All right, I'm going to pass that in as a string, I suppose.

64
00:04:04,560 --> 00:04:10,730
Point zero six and compounded annually.

65
00:04:10,740 --> 00:04:11,450
Let's see.

66
00:04:11,460 --> 00:04:16,070
So the formula here, the R is probably this amount here.

67
00:04:16,090 --> 00:04:20,940
Twenty two thousand the rate are I'm sorry, the big R is twenty two thousand.

68
00:04:20,940 --> 00:04:26,670
The Little R is probably our interest rate or rate of growth, the end.

69
00:04:26,790 --> 00:04:32,340
I think that would be called the compounding times or times for compounding something like that, which

70
00:04:32,340 --> 00:04:34,830
in this case, it's compounded annually.

71
00:04:34,830 --> 00:04:36,900
So that would be a one in this case.

72
00:04:37,080 --> 00:04:41,500
And then the Ti would be the time, which is seven years.

73
00:04:41,520 --> 00:04:44,040
OK, so let's see.

74
00:04:44,040 --> 00:04:47,160
We've got the compounded annually.

75
00:04:47,520 --> 00:04:52,950
So that would be a one, and I'll use an integer for that and then the time and I'll use an integer

76
00:04:52,950 --> 00:04:57,480
for that as well, I suppose, which is a seven in this case.

77
00:04:58,110 --> 00:04:58,560
All right.

78
00:04:58,740 --> 00:04:59,580
So first.

79
00:04:59,780 --> 00:05:03,650
I want to do is let the idea generate this method.

80
00:05:04,280 --> 00:05:11,510
So I will put my cursor on it and then do an option return and tell it, yes, please create that method.

81
00:05:12,020 --> 00:05:12,360
All right.

82
00:05:12,380 --> 00:05:16,370
And yes, I want to return a string and I want to accept the string.

83
00:05:16,370 --> 00:05:23,750
And this first value will be the I'm just going to use their variable names for now, which are not

84
00:05:23,750 --> 00:05:27,950
good names for programming, but we can always refactor those names later.

85
00:05:28,250 --> 00:05:38,000
So I'm going to use a Capital R and then the next thing we passed in was for seven years.

86
00:05:38,240 --> 00:05:45,050
So that's the time which they're calling T lowercase T, so I will use that as well.

87
00:05:45,110 --> 00:05:51,800
And then a string for the rate they use the lower case R for that.

88
00:05:51,800 --> 00:05:53,330
So I will too.

89
00:05:53,840 --> 00:06:02,210
And then oh, and then the times to compound or compounding times or something like that, which they

90
00:06:02,210 --> 00:06:04,850
used then in lowercase in.

91
00:06:04,910 --> 00:06:06,350
So I will too.

92
00:06:06,500 --> 00:06:09,290
Now, I wouldn't always name my variables like this.

93
00:06:09,290 --> 00:06:10,910
And in fact, I almost never would.

94
00:06:11,120 --> 00:06:16,820
But I just don't feel like having to do a lot of mental gymnastics to translate between the terms that

95
00:06:16,820 --> 00:06:21,650
are used in this formula and the terms that I'm using in the code, at least not right now.

96
00:06:21,650 --> 00:06:24,620
I don't just I just don't feel like doing that at the moment.

97
00:06:24,710 --> 00:06:26,220
Let's see.

98
00:06:26,240 --> 00:06:30,620
Oh, and I'm missing something here and and I are time.

99
00:06:30,770 --> 00:06:32,870
Great time.

100
00:06:33,260 --> 00:06:33,830
Right?

101
00:06:34,640 --> 00:06:36,370
Compound time.

102
00:06:36,710 --> 00:06:39,470
And for some reason, I have an extra variable here.

103
00:06:39,470 --> 00:06:45,500
I don't remember passing that in some just kind of hit return and see what's going on here with that.

104
00:06:45,680 --> 00:06:47,840
Let's see if we go back here.

105
00:06:48,080 --> 00:06:48,740
Oh, OK.

106
00:06:48,770 --> 00:06:51,560
I referred to the time twice.

107
00:06:51,950 --> 00:06:52,220
All right.

108
00:06:52,220 --> 00:06:54,410
So I will get rid of that second one there.

109
00:06:54,410 --> 00:06:58,730
Somehow, I managed to add in one too many parameters.

110
00:06:59,210 --> 00:06:59,720
There we go.

111
00:07:00,620 --> 00:07:02,720
Then I'll go back here and get rid of it.

112
00:07:05,210 --> 00:07:05,780
There we go.

113
00:07:06,020 --> 00:07:06,920
All right.

114
00:07:07,430 --> 00:07:12,290
And so now we can assert equals.

115
00:07:13,040 --> 00:07:24,410
We will assert that we will receive a string with the value of 184 six six four 43 from the answer.

116
00:07:26,140 --> 00:07:28,300
OK, so there's our first Test set up.

117
00:07:28,450 --> 00:07:31,610
I want to jump back over here to the method real quick and just see.

118
00:07:31,630 --> 00:07:34,510
So currently it's returning a null.

119
00:07:34,600 --> 00:07:38,170
Let's see now we could return an empty string.

120
00:07:38,350 --> 00:07:40,450
I am inclined to do at least that much.

121
00:07:40,960 --> 00:07:46,690
But all right, so there's our empty string and then we can go back over here to our test.

122
00:07:46,870 --> 00:07:48,630
All right, now, let's just run this test.

123
00:07:48,640 --> 00:07:52,630
And in this case, I'm just going to run the test all by itself because this really has nothing to do

124
00:07:52,630 --> 00:07:55,240
with the other calculations that we were doing before.

125
00:07:56,740 --> 00:07:58,180
So let's run this.

126
00:08:00,120 --> 00:08:03,060
All right, so that failed as we would expect.

127
00:08:03,360 --> 00:08:06,840
We were expecting one hundred eighty four thousand and we got an empty string.

128
00:08:07,140 --> 00:08:08,520
That's to be expected.

129
00:08:08,850 --> 00:08:11,460
All right now, let's just go and implement this.

130
00:08:12,090 --> 00:08:15,390
So we'll jump into the annuity calculation here.

131
00:08:15,390 --> 00:08:16,540
And let's see.

132
00:08:16,560 --> 00:08:22,080
So I'm going to make a new line at the top and let's just start breaking it down.

133
00:08:22,380 --> 00:08:30,390
So over here, I'm looking for any patterns that I see first off and I see are over in here and I also

134
00:08:30,390 --> 00:08:31,440
see it here.

135
00:08:31,710 --> 00:08:37,530
So I am inclined to make one variable that represents, ah, over in.

136
00:08:37,890 --> 00:08:40,560
So I'm going to make a big decimal.

137
00:08:42,470 --> 00:08:51,620
Called a for lack of a better name for the term and big decimal equals new big decimal of R.

138
00:08:52,220 --> 00:09:02,480
And that's little R, which is a string so I can simply pass it in like that divided by in which is

139
00:09:02,480 --> 00:09:03,350
an integer.

140
00:09:03,680 --> 00:09:09,020
Now, because that's an integer, I will need to encapsulate it in a big decimal.

141
00:09:09,020 --> 00:09:19,520
So I will create a new big decimal like so and then use the constructor that takes an integer which

142
00:09:19,520 --> 00:09:21,530
is in in this case.

143
00:09:22,160 --> 00:09:22,580
All right.

144
00:09:22,730 --> 00:09:24,770
Now I know that's a little hard to see.

145
00:09:24,980 --> 00:09:28,850
Let me resize the windows a little bit here.

146
00:09:28,880 --> 00:09:33,590
Maybe we don't need quite as much of that, and maybe we can get a little more of this.

147
00:09:35,140 --> 00:09:35,710
There we go.

148
00:09:36,040 --> 00:09:39,280
So there might be a little easier to to see what we're doing now.

149
00:09:39,610 --> 00:09:43,290
OK, so that's our term are over in.

150
00:09:43,780 --> 00:09:49,340
And now we need to make another term one plus are over and so same deal.

151
00:09:49,360 --> 00:09:51,700
I'll call this B equals.

152
00:09:51,910 --> 00:09:52,860
Let's see.

153
00:09:52,870 --> 00:09:57,450
So for this will just do big decimal one, right?

154
00:09:57,460 --> 00:10:01,300
Because that's a constant that exists on the big decimal class one.

155
00:10:02,020 --> 00:10:05,080
And then we'll add a.

156
00:10:06,880 --> 00:10:10,270
So that's our one plus our over in.

157
00:10:10,990 --> 00:10:15,150
And then we need to take all of that and raise it to the end times T power.

158
00:10:15,700 --> 00:10:27,460
So we'll make another big decimal, call it C and we will take B dot power and we will raise it to the

159
00:10:27,460 --> 00:10:33,970
end times T. So now this method power, if you recall, just takes an integer directly.

160
00:10:34,180 --> 00:10:36,820
So we don't need to wrap anything in a big decimal.

161
00:10:36,820 --> 00:10:39,040
And in fact, that wouldn't even work if we tried to.

162
00:10:39,430 --> 00:10:47,230
So we need to just pass in in times T, and I think we can literally do end times T just like that.

163
00:10:47,530 --> 00:10:48,370
Nice and easy.

164
00:10:48,520 --> 00:10:48,940
All right.

165
00:10:48,950 --> 00:10:54,910
So now we've got the OnePlus R over in to the in times T power.

166
00:10:54,910 --> 00:10:58,840
We've got all of that and now we need to take all of that and subtract one from it.

167
00:10:59,140 --> 00:11:00,610
So that should be pretty easy.

168
00:11:00,940 --> 00:11:09,310
We'll do another big decimal, so we'll call this D equals c subtract one.

169
00:11:09,490 --> 00:11:13,120
So big decimal that one.

170
00:11:13,780 --> 00:11:14,260
All right.

171
00:11:14,410 --> 00:11:19,090
So now we have everything in the numerator of this internal bit here.

172
00:11:19,150 --> 00:11:20,020
The whole thing.

173
00:11:20,260 --> 00:11:27,940
And now we just need to divide all of that by R over in and we already have R over in as a so we can

174
00:11:27,940 --> 00:11:29,200
just reuse that part.

175
00:11:30,160 --> 00:11:42,340
So big decimal will make another variable e equals D, which is the whole entire numerator d divided

176
00:11:42,340 --> 00:11:44,650
by a.

177
00:11:45,940 --> 00:11:52,650
Because A is R over in, that's where we started our divided by end.

178
00:11:52,990 --> 00:11:53,260
Yep.

179
00:11:53,890 --> 00:11:54,400
All right.

180
00:11:54,400 --> 00:12:01,660
So now we've got all of this and then all we have left to do is multiply all of that, which is e times

181
00:12:01,840 --> 00:12:04,270
R, and that should be easy enough.

182
00:12:04,660 --> 00:12:11,260
So a big decimal, we'll call this f and by coincidence, it happens to actually be called F here.

183
00:12:11,620 --> 00:12:12,970
So that's nice.

184
00:12:13,330 --> 00:12:13,770
All right.

185
00:12:13,780 --> 00:12:22,540
And so we will simply do e multiply new big decimal of our.

186
00:12:24,670 --> 00:12:31,000
Just like so of course, I could have done this the other way around, I could have done our multipli

187
00:12:31,030 --> 00:12:33,020
e also, I could have done that.

188
00:12:33,040 --> 00:12:33,880
I just didn't.

189
00:12:34,180 --> 00:12:35,500
No reason it doesn't matter.

190
00:12:35,740 --> 00:12:36,560
All right.

191
00:12:36,610 --> 00:12:43,060
And then we want to format the answer as a North American currency.

192
00:12:43,480 --> 00:12:45,250
So do you remember how to do that?

193
00:12:45,910 --> 00:12:47,830
Do you want to pause it and see if you can remember?

194
00:12:48,730 --> 00:12:49,150
All right.

195
00:12:49,160 --> 00:12:51,310
So I'm going to do this now.

196
00:12:51,310 --> 00:13:02,920
So we need a no format so we can do a number format, dot get currency instance because we're doing

197
00:13:02,920 --> 00:13:08,830
money here and then I can do a command option V to capture that instance.

198
00:13:08,980 --> 00:13:10,740
And I'm not even going to rename it.

199
00:13:10,750 --> 00:13:14,410
I'm just going to use the default name currency instance.

200
00:13:14,830 --> 00:13:21,400
And then on my return here, I will just refer to that currency instance dot format.

201
00:13:21,760 --> 00:13:28,810
And then all I need to do is pass in our final big decimal, which was this ETH right here, f bam.

202
00:13:29,110 --> 00:13:33,100
And that should format it into North American money now.

203
00:13:33,340 --> 00:13:39,970
I will warn you that if you are watching this video on a computer in some place other than North America,

204
00:13:40,270 --> 00:13:48,130
but you want that answer to turn out the way it looks here in this example, then you will want to explicitly

205
00:13:48,130 --> 00:13:54,190
set your locale and you can do that by placing a cursor right here in the get currency instance.

206
00:13:54,880 --> 00:13:59,170
Parentheses there and do a L for low cal.

207
00:13:59,350 --> 00:14:04,630
And then you can actually select a locale such as us.

208
00:14:06,040 --> 00:14:11,110
So you can do that if you want to force it to look exactly the way that it does.

209
00:14:11,110 --> 00:14:15,520
In this example that I have found here, if you care, it doesn't matter really.

210
00:14:15,610 --> 00:14:17,920
The the actual digits won't change.

211
00:14:17,920 --> 00:14:22,900
Just the formatting of them will look different, depending on what locale you are in.

212
00:14:23,110 --> 00:14:23,560
All right.

213
00:14:23,650 --> 00:14:28,690
I think we're good there, and I don't even have to go back over to the test because we started off

214
00:14:28,690 --> 00:14:29,530
by running this test.

215
00:14:29,530 --> 00:14:35,510
So if I just click this play button that will rerun the test right now and we will see something.

216
00:14:35,800 --> 00:14:37,360
Oh, and it failed.

217
00:14:37,930 --> 00:14:38,500
All right.

218
00:14:38,530 --> 00:14:39,850
Why did that fail?

219
00:14:39,850 --> 00:14:45,670
So we expected one eighty four thousand six six four are interesting.

220
00:14:45,790 --> 00:14:48,430
Oh, I had a typo in the test.

221
00:14:48,670 --> 00:14:53,770
I put a comma where there should have been a decimal period, a decimal point.

222
00:14:54,400 --> 00:14:56,350
It's a very minor problem there.

223
00:14:56,530 --> 00:14:57,010
So let's go.

224
00:14:57,010 --> 00:14:58,060
But yet there it is.

225
00:14:58,070 --> 00:15:02,800
I put that comma in and I should have put a period period.

226
00:15:03,130 --> 00:15:03,760
Look at that.

227
00:15:04,300 --> 00:15:04,750
All right.

228
00:15:04,930 --> 00:15:06,640
And so let's run it again.

229
00:15:07,150 --> 00:15:08,410
Hey, there we go.

230
00:15:08,710 --> 00:15:09,970
And we've got a winner.

231
00:15:10,270 --> 00:15:11,090
All right.

232
00:15:11,710 --> 00:15:16,090
So now we've got that first example working.

233
00:15:16,470 --> 00:15:18,070
We got the exact same answer.

234
00:15:18,280 --> 00:15:23,170
So now let's just plug in one or two other problems and make sure that this is really working.

235
00:15:23,170 --> 00:15:30,910
So now let's see here, I will just copy all of this and then give myself some space based another one,

236
00:15:30,910 --> 00:15:33,760
and I will call this annuity.

237
00:15:34,330 --> 00:15:34,660
Let's see.

238
00:15:34,660 --> 00:15:35,230
What did they call?

239
00:15:35,240 --> 00:15:39,850
There's practice to practice two.

240
00:15:40,660 --> 00:15:41,020
All right.

241
00:15:41,030 --> 00:15:44,680
So for this one, Napolean deposits twelve hundred bucks.

242
00:15:44,680 --> 00:15:51,210
So I'm going to do 1200 bucks at the end of each quarter for ten years.

243
00:15:51,220 --> 00:15:55,600
So the time is ten in an account, paying eight percent.

244
00:15:55,930 --> 00:16:01,240
So that would be point zero eight compounded quarterly.

245
00:16:01,720 --> 00:16:08,110
So that would be a four four times per year rather than once per year, four times per year.

246
00:16:08,800 --> 00:16:11,980
And the answer is supposed to be.

247
00:16:14,630 --> 00:16:21,560
Seventy two thousand four hundred eighty two period and 38 cents.

248
00:16:22,100 --> 00:16:24,740
Let's see if that's what we get.

249
00:16:25,520 --> 00:16:28,670
And I'm going to run just this one test for free right now.

250
00:16:29,210 --> 00:16:31,740
Hey, we got it all right now.

251
00:16:32,210 --> 00:16:37,610
I might have mentioned earlier that it's actually a good idea to typically just rerun all of the tests

252
00:16:37,610 --> 00:16:43,820
so that we can quote unquote regression test, make sure that we didn't regress or fall fall backward

253
00:16:43,820 --> 00:16:45,860
in any of our previous functionality.

254
00:16:46,220 --> 00:16:52,670
However, in this particular case, we had started to create this one test here using the edge case

255
00:16:52,670 --> 00:16:56,210
scenario of a max, and we already know that that's not going to work.

256
00:16:56,330 --> 00:16:58,550
Let's go ahead and run all the tests, though, and just see.

257
00:16:58,700 --> 00:16:58,970
All right.

258
00:16:58,970 --> 00:17:03,560
So I'm going up to the to the top of the class and I'm going to run this.

259
00:17:03,560 --> 00:17:07,670
Click this test icon here to run all the tests in the class.

260
00:17:08,360 --> 00:17:08,620
All right.

261
00:17:08,630 --> 00:17:15,020
So as you can see, all the tests passed except for that edge case one now I've already indicated that

262
00:17:15,020 --> 00:17:21,860
I'm not interested in trying to resolve this in any meaningful way in this module, but I will take

263
00:17:21,860 --> 00:17:24,580
this time to show you something that you can do about this.

264
00:17:24,590 --> 00:17:29,060
So first off, I just double clicked on this to zoom in on this method here.

265
00:17:29,480 --> 00:17:35,510
Now, if you have a test that you don't want to delete, but you don't really want to deal with it right

266
00:17:35,510 --> 00:17:37,910
now, there are a few things you can do.

267
00:17:38,420 --> 00:17:41,720
You could go to the annotation for it.

268
00:17:42,170 --> 00:17:49,730
You can then hit Enter and then add an additional annotation at disabled.

269
00:17:50,090 --> 00:17:54,360
And so that can disable that particular annotation.

270
00:17:54,380 --> 00:17:55,330
Let me close that.

271
00:17:55,340 --> 00:18:00,080
So that allows you to disable that one test from running.

272
00:18:00,590 --> 00:18:02,960
OK, now let me state something.

273
00:18:02,960 --> 00:18:06,530
This is the latest version of G-Unit, which is G-Unit five.

274
00:18:06,710 --> 00:18:12,670
I don't see a whole lot of point in not teaching the latest stable release of a technology.

275
00:18:12,680 --> 00:18:15,890
However, should you go get a job somewhere?

276
00:18:15,920 --> 00:18:23,150
There's a really good chance they may not be using J Unit five yet, especially if you get a job with

277
00:18:23,150 --> 00:18:26,440
this knowledge in the year 2021.

278
00:18:26,450 --> 00:18:32,840
And so I should also show you, or at least explain to you the alternative approach here.

279
00:18:33,140 --> 00:18:40,400
So in versions of G-Unit prior to G-Unit Unit five, the most common way to do this would be to use

280
00:18:40,400 --> 00:18:43,550
an annotation called at Ignore.

281
00:18:43,880 --> 00:18:48,800
OK, so disabled and ignore will achieve the same thing.

282
00:18:49,100 --> 00:18:54,710
So just know that if you're not, if you're in a version of G-Unit earlier than version five, you will

283
00:18:54,710 --> 00:18:56,810
not be able to do a disabled.

284
00:18:56,840 --> 00:18:58,760
You'll have to use at ignore.

285
00:18:58,790 --> 00:18:59,210
OK.

286
00:18:59,300 --> 00:18:59,750
All right.

287
00:18:59,960 --> 00:19:07,190
So now if we rerun all the tests, we should get a clean bill of health, so to speak.

288
00:19:07,370 --> 00:19:08,180
There we go.

289
00:19:08,450 --> 00:19:09,200
All right.

290
00:19:09,500 --> 00:19:14,600
And so both of our annuity examples worked and passed.

291
00:19:14,810 --> 00:19:15,130
All right.

292
00:19:15,140 --> 00:19:20,360
And we're going to go ahead and end this lesson and I will see you in the next one.
