1
00:00:00,120 --> 00:00:06,690
All right, so in the last lesson we played around with making the database actually retain our data

2
00:00:06,690 --> 00:00:10,800
by using an actual file, and that meant that we had to take over some of the settings.

3
00:00:10,800 --> 00:00:14,220
So I showed you how to do that in the application that properties file.

4
00:00:14,430 --> 00:00:20,160
And and then we played around a little bit with some of the cosmetic layout issues, I guess.

5
00:00:20,400 --> 00:00:24,300
And you learn a little bit about bootstraps responsiveness, which is kind of a cool thing.

6
00:00:24,690 --> 00:00:24,980
All right.

7
00:00:24,990 --> 00:00:27,090
So now here's what I want to show you.

8
00:00:27,570 --> 00:00:34,260
Let's say that we are on this page here and we haven't put any information in the form and we just click,

9
00:00:34,260 --> 00:00:35,880
Save, what's going to happen?

10
00:00:36,960 --> 00:00:37,860
I'll look at that.

11
00:00:38,220 --> 00:00:40,800
It just lets us do that and let me do it again.

12
00:00:41,160 --> 00:00:46,800
And there's a fourth record and a fifth record that looks like a bit of a problem, doesn't it?

13
00:00:47,070 --> 00:00:52,110
We don't have any way of validating the data that's coming in here, so we're just allowing any and

14
00:00:52,230 --> 00:00:59,670
all random, you know, button presses to put fake data or erroneous, useless data into our database.

15
00:00:59,760 --> 00:01:01,740
We probably don't want that to happen.

16
00:01:02,010 --> 00:01:06,630
So now I'm going to show you how we can stop that by using validation.

17
00:01:06,660 --> 00:01:07,080
OK.

18
00:01:07,620 --> 00:01:10,890
So there are a couple of parts to this.

19
00:01:11,160 --> 00:01:14,220
There is the cosmetic aspects of the validation.

20
00:01:14,310 --> 00:01:19,650
So where we can actually convey to the user of our form that they did something wrong and maybe even

21
00:01:19,650 --> 00:01:26,250
tell them what they did wrong and maybe even prevent them from being able to successfully submit their

22
00:01:26,250 --> 00:01:27,810
wrong data to us?

23
00:01:27,960 --> 00:01:33,960
And then there's the back end where we actually control all the wrongness in this particular implementation.

24
00:01:34,260 --> 00:01:40,530
Now, a lot of modern web application development would would actually prevent the user from even being

25
00:01:40,530 --> 00:01:43,500
able to submit anything at all to the back end.

26
00:01:43,920 --> 00:01:51,300
But in order to keep this whole section simple and not have to introduce you to any more stuff like

27
00:01:51,300 --> 00:01:57,000
JavaScript or some cool JavaScript framework where we would do a lot of checking on the front end,

28
00:01:57,000 --> 00:02:01,500
I don't want to introduce you to that because that's a different language entirely, and you're already

29
00:02:01,500 --> 00:02:06,330
learning HTML a little bit now and a little tiny bit of CSS with bootstrap.

30
00:02:06,330 --> 00:02:09,340
I just don't want to hit you with everything all at once.

31
00:02:09,360 --> 00:02:09,750
OK.

32
00:02:10,080 --> 00:02:12,510
So we're going to do all of our validation on the backend.

33
00:02:12,510 --> 00:02:16,950
And besides that, there are fantastic capabilities of doing validation on the back end, which you

34
00:02:16,950 --> 00:02:18,120
will see in just a moment, OK?

35
00:02:18,240 --> 00:02:19,890
So that's what we're going to do.

36
00:02:20,160 --> 00:02:20,490
All right.

37
00:02:20,520 --> 00:02:28,830
So let's jump in to the I.D. and I guess we'll start with our domain model of all places.

38
00:02:29,070 --> 00:02:29,490
OK.

39
00:02:29,520 --> 00:02:33,840
So we'll go to the person class right here.

40
00:02:34,410 --> 00:02:42,900
And one of the dependencies that we added into our start that spring that i o page when we built the

41
00:02:43,110 --> 00:02:45,540
original zip file that started off our project.

42
00:02:45,690 --> 00:02:50,880
One of those dependencies that we added in was a dependency called something validation.

43
00:02:50,880 --> 00:02:56,910
And in fact, let's even take a quick peek at that build Gradle.

44
00:02:57,720 --> 00:02:58,260
There it is.

45
00:03:00,030 --> 00:03:00,510
There it is.

46
00:03:00,510 --> 00:03:02,810
Yes, spring boot starter validation.

47
00:03:02,820 --> 00:03:06,970
OK, so this package we're going to actually make use of now.

48
00:03:08,370 --> 00:03:08,670
All right.

49
00:03:08,700 --> 00:03:16,800
And basically what we can do and I think this is actually pretty cool is we can put annotations on various

50
00:03:16,800 --> 00:03:22,500
fields to specify what kind of data is allowed in those fields.

51
00:03:22,530 --> 00:03:22,980
OK.

52
00:03:23,310 --> 00:03:27,480
And we're using a validation framework to do this, OK?

53
00:03:27,600 --> 00:03:30,810
And the framework is actually a two part framework.

54
00:03:30,810 --> 00:03:34,470
But but at the lowest level, it's actually the hibernate framework.

55
00:03:34,470 --> 00:03:39,030
So that's the same framework that is actually talking to the database, although in this case, we're

56
00:03:39,030 --> 00:03:41,490
not going to use it so much for database stuff.

57
00:03:41,730 --> 00:03:47,970
We're going to use it now just in general to validate that that data that is trying to get entered into

58
00:03:47,970 --> 00:03:51,210
these fields matches up with what we want it to.

59
00:03:51,240 --> 00:03:51,630
OK.

60
00:03:51,780 --> 00:03:52,890
So let me show you how to do that.

61
00:03:53,070 --> 00:03:56,880
So I'm going to put a couple of spaces above the first name.

62
00:03:56,880 --> 00:04:00,840
And let's say that at the very least, we don't want the first name and last name to be blank.

63
00:04:00,870 --> 00:04:02,130
They're not allowed to be blank.

64
00:04:02,160 --> 00:04:02,520
OK.

65
00:04:02,940 --> 00:04:07,470
So there are a number of rules that we can use to do this via annotation.

66
00:04:07,860 --> 00:04:10,560
And one of them is called not empty.

67
00:04:11,130 --> 00:04:13,200
OK, so we can specify, not empty.

68
00:04:13,350 --> 00:04:18,180
And we can also specify a message to be relayed.

69
00:04:18,600 --> 00:04:22,320
If if it is empty, in fact, I forgot their never go message.

70
00:04:22,710 --> 00:04:27,900
And so we can say something like first name cannot be empty.

71
00:04:27,930 --> 00:04:28,440
OK.

72
00:04:28,980 --> 00:04:34,170
We can do that and I can put that on this field as well.

73
00:04:35,250 --> 00:04:38,910
Last name cannot be empty.

74
00:04:40,050 --> 00:04:42,270
And let's see the date of birth.

75
00:04:42,270 --> 00:04:50,040
So we can even do some cool things for a field, for a date filled like we can say that it has to be

76
00:04:50,040 --> 00:04:51,540
a date in the past.

77
00:04:51,690 --> 00:04:52,170
OK.

78
00:04:52,410 --> 00:04:54,600
So you can't put like future dates in there.

79
00:04:54,810 --> 00:04:56,430
We can do at least that much.

80
00:04:57,990 --> 00:04:59,670
So we can specify and not such and.

81
00:04:59,850 --> 00:05:04,170
A date of birth must be in the past.

82
00:05:05,940 --> 00:05:08,730
And then here's a good one email.

83
00:05:09,330 --> 00:05:12,870
There are actually a lot of complex rules around validating emails.

84
00:05:12,900 --> 00:05:19,560
Now we could have done a regular expression and in fact there is a an annotation of the validation framework

85
00:05:19,560 --> 00:05:23,010
that would allow us to specify a regular expression.

86
00:05:23,160 --> 00:05:29,460
However, we'd never write a good enough regular expression to capture all of the intricacies of a valid

87
00:05:29,460 --> 00:05:30,030
email.

88
00:05:30,120 --> 00:05:31,890
And thankfully, we don't need to.

89
00:05:32,040 --> 00:05:36,660
Instead, we can simply use the email constraint right there.

90
00:05:38,130 --> 00:05:44,730
And we'll specify a massage, and we can say email must be valid.

91
00:05:44,940 --> 00:05:46,320
I don't know something like that.

92
00:05:46,470 --> 00:05:49,260
OK, so maybe that's enough for right now.

93
00:05:49,740 --> 00:05:56,610
OK, so the next thing we need to do is jump over to the controller and we need to tell spring in the

94
00:05:56,610 --> 00:06:01,590
Sea to make use of our validation rules.

95
00:06:01,710 --> 00:06:03,000
And this is pretty cool.

96
00:06:03,390 --> 00:06:07,500
So to do this, all we need is another annotation of this annotation will be a little different than

97
00:06:07,500 --> 00:06:13,500
what I think we've ever seen before, because this annotation will go inside of the parameters here.

98
00:06:13,500 --> 00:06:15,870
So it's called valid.

99
00:06:16,200 --> 00:06:16,650
OK.

100
00:06:17,040 --> 00:06:18,930
And then let me import that.

101
00:06:19,620 --> 00:06:19,980
All right.

102
00:06:20,130 --> 00:06:27,660
So we're telling Spring MVC to validate any data that is coming in from the web browser that's trying

103
00:06:27,660 --> 00:06:31,620
to get bound to this person instance here, OK?

104
00:06:31,650 --> 00:06:35,310
We're just telling it to perform validation on all of that.

105
00:06:35,400 --> 00:06:43,530
Now, if that doesn't work out, we'd also like to get some feedback and we can do that by specifying

106
00:06:43,530 --> 00:06:49,240
that we also want to bring in D.C. to feed us the results of this validation attempt.

107
00:06:49,260 --> 00:06:49,680
OK.

108
00:06:49,860 --> 00:06:55,530
And all we have to do to get those results is to refer to this object called errors.

109
00:06:56,690 --> 00:06:58,430
And we'll create an instance of that.

110
00:06:58,940 --> 00:07:02,720
Well, we're not creating the American Spring in the Sea will create the instance, but it'll drop it

111
00:07:02,720 --> 00:07:07,040
off in this variable here and then we can do whatever we want with that variable.

112
00:07:07,080 --> 00:07:12,710
OK, so if there are any errors, we'll even if there aren't, this object will be populated and then

113
00:07:12,710 --> 00:07:15,860
we can check that object to see, Hey, are there any errors or not?

114
00:07:15,890 --> 00:07:16,310
OK.

115
00:07:16,580 --> 00:07:21,950
And then finally, what we can do is this bit here conditionally.

116
00:07:21,950 --> 00:07:25,670
OK, so we're going to say, like, do this if there aren't any errors?

117
00:07:25,730 --> 00:07:26,120
OK?

118
00:07:26,330 --> 00:07:31,820
And so I'm going to wrap all of that and an f block and I'm going to say errors.

119
00:07:32,210 --> 00:07:33,170
So if?

120
00:07:34,250 --> 00:07:41,330
Someone to flip that logic around and put a knot if there are not any errors, then go ahead and save

121
00:07:41,330 --> 00:07:50,210
that person and redirect back to the people page with a clean slate and refresh the table with whatever

122
00:07:50,390 --> 00:07:51,910
is in the database, right?

123
00:07:51,920 --> 00:07:53,870
So that would be what we would normally want.

124
00:07:54,050 --> 00:08:01,010
However, if there are errors, we don't want to redirect back to a clean version of the page.

125
00:08:01,010 --> 00:08:06,920
We want to actually take you back to the page with all of that state still there and by state, I mean,

126
00:08:07,100 --> 00:08:11,900
all of the fields and values that were in the form before we went.

127
00:08:11,900 --> 00:08:13,820
All of that to be repopulated.

128
00:08:13,940 --> 00:08:20,180
If you recall, before we were using this redirect people and we were just doing return people, things

129
00:08:20,180 --> 00:08:23,750
were sort of working, but the form wasn't getting cleared out right.

130
00:08:23,770 --> 00:08:27,080
It was actually retaining all the stuff that we had filled in.

131
00:08:27,290 --> 00:08:29,360
We didn't want that in that case.

132
00:08:29,480 --> 00:08:34,730
But if there were errors and you filled out all of this stuff and you submitted and then you got errors,

133
00:08:34,880 --> 00:08:37,810
you wouldn't want the stuff that you had filled in here to go away.

134
00:08:37,820 --> 00:08:39,380
You'd actually want that then, right?

135
00:08:39,530 --> 00:08:45,180
So we actually can make use of that behavior that we were getting before we implemented this redirect.

136
00:08:45,200 --> 00:08:48,530
OK, so that in this case, it would be a good thing to have.

137
00:08:48,740 --> 00:08:55,850
So what we can do is this alternative really do a another reader return and still just specify people,

138
00:08:55,850 --> 00:08:57,460
but no redirect now.

139
00:08:57,470 --> 00:09:03,230
OK, so this will retain the state of everything that was in this page when it was submitted so that

140
00:09:03,230 --> 00:09:07,890
it can be resubmitted with any changes that anyone might might implement.

141
00:09:07,910 --> 00:09:08,270
OK.

142
00:09:08,600 --> 00:09:14,090
Oh, and one more thing that would happen now is that these errors here would also be made available

143
00:09:14,480 --> 00:09:15,980
to that page.

144
00:09:16,220 --> 00:09:19,340
If there were any errors now, they're not going to show up by default.

145
00:09:19,340 --> 00:09:23,930
We have to actually do some HTML to make those show up OK.

146
00:09:24,110 --> 00:09:26,750
But but they will be put into the model for us.

147
00:09:26,780 --> 00:09:27,140
OK.

148
00:09:27,470 --> 00:09:27,760
All right.

149
00:09:27,770 --> 00:09:29,420
So we're actually done here.

150
00:09:29,840 --> 00:09:36,290
So then let's jump back over to the HTML template and let's make it so that if there are any errors,

151
00:09:36,290 --> 00:09:39,380
they will show up and we'll get some nice formatting also.

152
00:09:39,410 --> 00:09:39,830
OK.

153
00:09:40,310 --> 00:09:40,620
All right.

154
00:09:40,640 --> 00:09:42,470
So how do we do this?

155
00:09:42,750 --> 00:09:46,040
Well, I don't have that memorized, and I don't need to memorize it.

156
00:09:46,250 --> 00:09:55,670
What I will do is come over here to bootstrap and we can see how we can implement validation for a bootstrap

157
00:09:55,790 --> 00:09:56,330
form.

158
00:09:56,840 --> 00:09:57,130
All right.

159
00:09:57,140 --> 00:09:58,910
Or we can get some ideas, at least.

160
00:09:58,910 --> 00:10:00,830
OK, take some inspiration, if you will.

161
00:10:01,610 --> 00:10:03,770
So let's see here.

162
00:10:06,080 --> 00:10:06,560
All right.

163
00:10:06,590 --> 00:10:12,350
So what we're going to be doing is validation on the server side as opposed to validation on the client

164
00:10:12,350 --> 00:10:15,500
side, which would be in the browser using JavaScript typically.

165
00:10:15,830 --> 00:10:20,540
So for that, we need to come down here to the validation area where it talks about how to do it for

166
00:10:20,540 --> 00:10:22,520
the server side, which is right here.

167
00:10:22,550 --> 00:10:22,970
OK.

168
00:10:23,330 --> 00:10:29,600
And so we can look at some of these examples here and get a sense for the gist of what they're doing.

169
00:10:29,630 --> 00:10:38,810
So basically, what they are doing is the input field here has a class and we've got let's see here.

170
00:10:38,840 --> 00:10:41,000
Let's go down to our table.

171
00:10:42,680 --> 00:10:44,420
I mean, at our table, but our form.

172
00:10:44,450 --> 00:10:50,840
OK, so here are our fields, so there's an input field here and it's class form control.

173
00:10:50,960 --> 00:10:51,990
So look at what they're doing here.

174
00:10:52,010 --> 00:10:53,510
Class form control.

175
00:10:53,630 --> 00:11:02,090
But then they're specifying an additional style and they have an option here of either is valid or is

176
00:11:02,090 --> 00:11:03,110
invalid.

177
00:11:03,200 --> 00:11:10,850
OK, so if it's invalid, then you can set that class style to is invalid or you can add that style

178
00:11:10,880 --> 00:11:11,730
to the class.

179
00:11:11,750 --> 00:11:22,010
OK, so we need a way to conditionally add the is invalid style to an input if there is an error.

180
00:11:22,190 --> 00:11:22,670
OK.

181
00:11:22,850 --> 00:11:23,940
That's what we need to do.

182
00:11:23,960 --> 00:11:24,290
OK.

183
00:11:25,190 --> 00:11:26,550
So how can we do this?

184
00:11:27,080 --> 00:11:32,780
Well, so obviously the first thing is we need it to kind of see how to do this so that it looked nice

185
00:11:32,780 --> 00:11:34,640
using, in this case, bootstrap.

186
00:11:34,640 --> 00:11:39,230
OK, but then we'll also have to figure out how to do this with the time leave framework.

187
00:11:39,260 --> 00:11:39,620
OK.

188
00:11:40,040 --> 00:11:45,050
So first thing I'm going to do, though, is copy some of what they've got here because in addition

189
00:11:45,050 --> 00:11:53,030
to setting this style for invalid, if it is invalid, they're also showing the validation error message

190
00:11:53,270 --> 00:11:56,960
in a div underneath that widget.

191
00:11:56,960 --> 00:12:02,510
And we probably do want to copy this and and display that optionally as well.

192
00:12:02,540 --> 00:12:02,790
OK.

193
00:12:02,810 --> 00:12:09,710
So I'm going to just copy that that little bit there and then I'm going to come over here and let's

194
00:12:09,710 --> 00:12:10,070
see.

195
00:12:10,070 --> 00:12:19,640
I will do a shift enter and then I'm going to paste that in and I need to name this something validation.

196
00:12:20,210 --> 00:12:21,550
OK, I hate naming these things.

197
00:12:21,560 --> 00:12:25,160
Validation first name.

198
00:12:25,670 --> 00:12:26,130
All right.

199
00:12:27,450 --> 00:12:32,880
Now, this text here, I think, isn't going to matter, because that's going to get replaced automatically

200
00:12:33,090 --> 00:12:37,180
with whatever the error messages are that are associated with this guy.

201
00:12:37,200 --> 00:12:37,530
OK.

202
00:12:37,650 --> 00:12:39,300
That's that's how we're going to do this.

203
00:12:39,480 --> 00:12:39,750
All right.

204
00:12:39,840 --> 00:12:44,090
So now let's put that on hold for a minute and jump over to time leaf.

205
00:12:44,100 --> 00:12:50,190
OK, now to find out how to use validation, we actually can't use the generic, timely documentation.

206
00:12:50,370 --> 00:12:58,470
We need to look at the timely documentation for using time leaf with spring with the spring framework.

207
00:12:58,470 --> 00:13:05,160
OK, because Time Leaf has special support for for being used with spring, and thankfully they've got

208
00:13:05,160 --> 00:13:06,930
great documentation right here for that.

209
00:13:07,050 --> 00:13:09,420
So we're going to jump into this documentation now.

210
00:13:09,420 --> 00:13:14,640
So when you want to just do like kind of generic stuff with time timelines, that first documentation

211
00:13:14,640 --> 00:13:16,620
page that we were on is is fine.

212
00:13:16,770 --> 00:13:22,590
But when you want to find out a little bit more about how to use timely specifically with the spring

213
00:13:22,590 --> 00:13:26,550
framework, then you need to jump into this version of the documentation.

214
00:13:26,550 --> 00:13:30,750
Sorry that they have these two separate things, but I guess in theory, Time-Life can be used with

215
00:13:30,750 --> 00:13:35,460
other technologies besides spring, and that's the reason that they have that in that way.

216
00:13:36,800 --> 00:13:40,940
All right, so let's see here, we want to know how to validate.

217
00:13:40,970 --> 00:13:41,540
And here we go.

218
00:13:41,690 --> 00:13:43,250
Here's the validation stuff here.

219
00:13:43,430 --> 00:13:48,740
Then again, I'm showing you this so that you would know have some idea of how you can find out these

220
00:13:48,740 --> 00:13:49,800
things for yourself.

221
00:13:49,820 --> 00:13:54,080
OK, that's the reason I'm showing these to you, rather than just putting in a bunch of stuff, which

222
00:13:54,080 --> 00:13:55,110
obviously I could do.

223
00:13:55,370 --> 00:13:57,920
But then you'd be wondering, how did you know to do that?

224
00:13:57,920 --> 00:14:00,620
And I wouldn't be showing you every single case there is right.

225
00:14:00,620 --> 00:14:04,850
I'd only be showing you use cases that are specific to what I'm doing right here.

226
00:14:04,850 --> 00:14:09,140
But if you ever wanted to do something a little different from what I'm doing, well, now you'll know

227
00:14:09,140 --> 00:14:11,330
where to go in the documentation to find that.

228
00:14:11,420 --> 00:14:11,810
OK.

229
00:14:11,870 --> 00:14:22,760
So we are going to want a way to add in an additional class on our input fields like right there, for

230
00:14:22,760 --> 00:14:23,420
example, right?

231
00:14:23,450 --> 00:14:29,570
So if there is an error, we want an additional class to be specified there, and I think it was called

232
00:14:29,570 --> 00:14:31,700
is hyphen invalid, right?

233
00:14:31,790 --> 00:14:33,290
We want that to show up there.

234
00:14:33,350 --> 00:14:34,820
So how can we do that?

235
00:14:35,150 --> 00:14:39,620
Well, one thing we could do is what they're showing right here.

236
00:14:40,370 --> 00:14:47,360
They're overriding the class attribute with their own version of the class attribute to in class, and

237
00:14:47,360 --> 00:14:53,900
then they're digging into the fields of the object in question, which would be the person.

238
00:14:53,900 --> 00:14:54,890
And then they're calling.

239
00:14:54,890 --> 00:14:56,030
This method has air.

240
00:14:56,030 --> 00:15:00,230
So they're saying, does this particular field that we're on, which in this case would be the date

241
00:15:00,230 --> 00:15:01,040
planted field?

242
00:15:01,370 --> 00:15:03,410
Does that field have errors?

243
00:15:03,560 --> 00:15:08,090
If it does, that's what this little ternary operator thing is essentially doing there.

244
00:15:08,240 --> 00:15:12,800
If this field has errors, then render out a class called field error.

245
00:15:12,950 --> 00:15:19,310
Now that would work for a lot of people, but it won't quite work for us because we want this style

246
00:15:19,310 --> 00:15:20,560
here to still be here.

247
00:15:20,570 --> 00:15:24,710
We want this class here, we want this class to still be here also.

248
00:15:24,710 --> 00:15:28,280
So we want to add another class to this.

249
00:15:28,550 --> 00:15:34,190
And with this approach, we'd be overriding what's already here in this static class.

250
00:15:34,190 --> 00:15:38,360
We'd be getting rid of that completely and then just replacing it with this other thing.

251
00:15:38,450 --> 00:15:40,940
And so that's not ideal for us.

252
00:15:40,970 --> 00:15:48,890
OK, we want to add an additional class to the list of classes here, and thankfully there is a way

253
00:15:48,890 --> 00:15:50,420
to do that as well.

254
00:15:50,720 --> 00:15:56,450
And what we can do is this option down here to call an error class, OK?

255
00:15:56,870 --> 00:16:06,500
So this allows us to specify a class that should be added to our list of classes if there is an error.

256
00:16:06,620 --> 00:16:08,510
That's basically what that does, OK?

257
00:16:08,750 --> 00:16:10,130
And that's what we want.

258
00:16:10,490 --> 00:16:12,450
So let's do that.

259
00:16:12,470 --> 00:16:18,370
So I'm going to just grab that and I'm going to come up here.

260
00:16:19,010 --> 00:16:20,780
And I guess I'll just put it right here.

261
00:16:22,310 --> 00:16:26,480
Now we want ours to say is invalid.

262
00:16:26,480 --> 00:16:29,270
And remember now that's coming from bootstrap.

263
00:16:29,300 --> 00:16:30,200
Right, right.

264
00:16:30,200 --> 00:16:31,850
There is invalid.

265
00:16:32,000 --> 00:16:33,260
OK, that's what we want.

266
00:16:33,290 --> 00:16:35,890
If that field is invalid and that's what we should get.

267
00:16:35,920 --> 00:16:40,260
So you see here how they have class equals form control and is invalid.

268
00:16:40,280 --> 00:16:40,610
OK.

269
00:16:40,850 --> 00:16:51,320
So if there is an error on the first name field, then this value is invalid will be added to this class

270
00:16:51,320 --> 00:16:51,920
attribute here.

271
00:16:51,920 --> 00:16:53,670
And let me explain something else real quick.

272
00:16:53,690 --> 00:16:59,810
I just realized I hadn't explained this OK, and I'm sorry, but obviously I can't go infinitely deep

273
00:16:59,810 --> 00:17:02,140
into all of this in this last section.

274
00:17:02,150 --> 00:17:05,630
OK, I can only go so far, but I will explain this real quick this time.

275
00:17:05,630 --> 00:17:07,100
Leaf attributes here.

276
00:17:07,550 --> 00:17:14,890
What happens is timely, factually rewrites some of this sage html when it's executing.

277
00:17:14,900 --> 00:17:23,120
So, for example, this field attribute here will rewrite the IDE attribute with whatever value matches

278
00:17:23,120 --> 00:17:26,240
up to here, which in this case would be the same thing that we already have there.

279
00:17:26,600 --> 00:17:32,230
It will also, I believe, render a name attribute because sometimes you need that it'll do a few things

280
00:17:32,240 --> 00:17:32,630
OK.

281
00:17:32,870 --> 00:17:39,080
This error attribute here will check if there are any errors and then if there are some, it will take

282
00:17:39,080 --> 00:17:43,820
this value and add it on to the existing class attribute.

283
00:17:43,940 --> 00:17:45,800
OK, so that's what that would do.

284
00:17:45,830 --> 00:17:47,990
OK, so that's kind of how they work.

285
00:17:48,200 --> 00:17:56,090
And then we also need to make this error message thing here conditional like we don't want that to render

286
00:17:56,270 --> 00:17:58,430
unless there are actual errors.

287
00:17:58,610 --> 00:18:06,710
And so for that, we actually do want to use this to make errors annotation right here.

288
00:18:06,740 --> 00:18:07,160
OK.

289
00:18:07,490 --> 00:18:15,620
And so what we need to do there is simply add that on to errors equals and then we point it at.

290
00:18:16,420 --> 00:18:18,230
I always want to use the dollar sign.

291
00:18:18,230 --> 00:18:19,700
I don't know why I keep doing that.

292
00:18:19,940 --> 00:18:24,650
And then we pointed at the field that we are referring to, which in this case would be the first name

293
00:18:24,650 --> 00:18:25,010
field.

294
00:18:25,250 --> 00:18:25,530
All right.

295
00:18:25,550 --> 00:18:32,900
So what this two errors attribute does is it checks if there are errors for the first name field in

296
00:18:32,900 --> 00:18:35,750
the back end and spring, then.

297
00:18:36,040 --> 00:18:43,690
It will allow whatever element it's on, which in this case, this terror's attribute is on the device

298
00:18:43,960 --> 00:18:45,640
is on this device element here.

299
00:18:45,790 --> 00:18:48,010
It will allow that to render OK.

300
00:18:48,280 --> 00:18:49,210
That will render.

301
00:18:49,510 --> 00:18:54,840
But if there are not any errors, then this will just disappear when we are running our application.

302
00:18:54,850 --> 00:19:03,370
OK, so that will only show up if there are errors on the first page, and it will also populate this

303
00:19:03,370 --> 00:19:08,530
area right here with whatever error messages are associated with this field.

304
00:19:08,560 --> 00:19:08,980
OK.

305
00:19:09,220 --> 00:19:12,010
Which is why I don't need to replace this with anything.

306
00:19:12,040 --> 00:19:15,520
OK, that'll get replaced automatically if there are errors.

307
00:19:15,610 --> 00:19:17,410
Otherwise, it just won't even show up at all.

308
00:19:17,770 --> 00:19:18,130
All right.

309
00:19:18,220 --> 00:19:24,130
So sorry, I know I have to explain a lot here, but man, you know, that's that's how it goes sometimes

310
00:19:24,130 --> 00:19:25,150
with programming.

311
00:19:25,180 --> 00:19:32,200
OK, so now that I've done all of that, I'm going to copy this and let's see, and I'm going to do

312
00:19:32,200 --> 00:19:37,600
the same thing on each of these remaining fields where we're doing validations, at least.

313
00:19:39,010 --> 00:19:47,560
So let's see, we'll call this one validation last name, and we'll change this to last name.

314
00:19:49,440 --> 00:19:54,030
Last last name and I need to add in the.

315
00:19:56,590 --> 00:19:57,250
T. H.

316
00:19:57,880 --> 00:19:58,260
Oops.

317
00:19:58,870 --> 00:20:00,070
H error.

318
00:20:00,400 --> 00:20:05,890
Class is in invalid.

319
00:20:06,910 --> 00:20:07,270
OK.

320
00:20:07,360 --> 00:20:11,260
In fact, you know, let me let me just do that consistently first.

321
00:20:11,770 --> 00:20:13,570
So there it is there.

322
00:20:13,570 --> 00:20:16,660
And let's add it to the date of birth as well.

323
00:20:16,660 --> 00:20:20,140
Paste space and email.

324
00:20:21,400 --> 00:20:22,690
Paced space.

325
00:20:24,160 --> 00:20:29,170
And I didn't do salary might look at that later, but this is enough for now.

326
00:20:29,470 --> 00:20:29,980
OK.

327
00:20:30,340 --> 00:20:34,900
And then let's do this in a few more places as well.

328
00:20:34,900 --> 00:20:43,990
So we'll put this on the bottom of this input field here, and we will rename this to what is this Doby

329
00:20:44,530 --> 00:20:45,880
validation, Dobby?

330
00:20:50,530 --> 00:20:56,900
The lobby and email now this already has one div, but that's OK, we'll add another div.

331
00:20:59,320 --> 00:21:02,650
Validation email.

332
00:21:04,350 --> 00:21:06,810
And email.

333
00:21:08,030 --> 00:21:08,960
All right.

334
00:21:09,410 --> 00:21:11,960
And I think that is all we need.

335
00:21:12,470 --> 00:21:15,050
So now let's refresh.

336
00:21:16,780 --> 00:21:17,090
OK.

337
00:21:17,110 --> 00:21:23,890
Presumably that it's something we'll see here in just a second, so let's just hit this button and see

338
00:21:23,890 --> 00:21:24,610
what happens.

339
00:21:25,680 --> 00:21:27,190
Hey, look at that.

340
00:21:27,780 --> 00:21:32,400
Yeah, see, now it's complaining about these things and didn't do anything on the date of birth, and

341
00:21:32,400 --> 00:21:37,920
I think that's because of the fact that we're using this weird browser provided date of birth field.

342
00:21:38,190 --> 00:21:40,110
And it also didn't do anything on the email.

343
00:21:40,110 --> 00:21:46,270
And I think that's because I didn't specify that the email couldn't be blank or or empty.

344
00:21:46,290 --> 00:21:46,650
OK.

345
00:21:46,770 --> 00:21:48,450
We'll play around with that in just a minute.

346
00:21:48,720 --> 00:21:49,080
All right.

347
00:21:49,260 --> 00:21:52,230
But let's satisfy these two fields.

348
00:21:52,230 --> 00:21:53,520
So let's see here.

349
00:21:53,910 --> 00:21:56,850
Jerry Maguire.

350
00:21:57,890 --> 00:22:00,500
All right, and then let's try that again.

351
00:22:01,480 --> 00:22:04,450
OK, so that allowed that to go through.

352
00:22:04,750 --> 00:22:09,730
So I think what's happening here is that I didn't try to put any kind of date of birth at all, and

353
00:22:09,730 --> 00:22:13,980
our date of birth validation is allowing an empty date of birth.

354
00:22:13,990 --> 00:22:19,090
It's just not allowing actual dates of birth that are in the future.

355
00:22:19,120 --> 00:22:19,540
OK.

356
00:22:19,840 --> 00:22:22,180
And then it is allowing blank emails also.

357
00:22:22,180 --> 00:22:23,560
So let's go fix that now.

358
00:22:24,160 --> 00:22:26,260
So we'll go back over here to the person class.

359
00:22:26,470 --> 00:22:32,110
So for email, we will say that it's an email filled and also that it cannot be empty.

360
00:22:32,980 --> 00:22:33,430
All right.

361
00:22:36,900 --> 00:22:44,940
P.M. must not be empty, and let's see for the date of birth.

362
00:22:45,120 --> 00:22:46,280
I don't think we can do empty.

363
00:22:46,290 --> 00:22:51,480
I think that's only appropriate for strings, but I think we can do not null.

364
00:22:51,480 --> 00:22:52,740
Yeah, we can do, not in all.

365
00:22:54,080 --> 00:22:55,460
What message?

366
00:22:58,330 --> 00:23:05,590
Date of birth can't must be specified.

367
00:23:06,010 --> 00:23:06,850
Let's try that.

368
00:23:07,960 --> 00:23:10,600
OK, so now let's try this again.

369
00:23:12,790 --> 00:23:13,930
Look at that now.

370
00:23:14,050 --> 00:23:19,300
First name, last name, date of birth and email are all throwing up errors, right?

371
00:23:19,570 --> 00:23:21,010
So that's looking pretty good.

372
00:23:21,020 --> 00:23:29,320
So let's do a Bruce Wayne and I don't know one one, 1950.

373
00:23:30,730 --> 00:23:34,330
B. Wayne at that manned calm.

374
00:23:35,540 --> 00:23:36,660
And let's suppose.

375
00:23:36,770 --> 00:23:40,760
Well, we won't specify a salary because I didn't put any validation on that.

376
00:23:42,040 --> 00:23:42,700
OK, cool.

377
00:23:43,760 --> 00:23:45,640
And then let's try.

378
00:23:45,950 --> 00:23:48,050
Wonder Woman.

379
00:23:49,320 --> 00:23:59,970
And let's put a date in the future, so one one, 2023, and let's do no email, so let's try that.

380
00:24:00,750 --> 00:24:01,710
OK.

381
00:24:03,270 --> 00:24:08,400
So it's saying so it didn't retain that date of birth, and again, that has to do, I'm pretty sure,

382
00:24:08,400 --> 00:24:11,460
with the the way that the browser is rendering the date here.

383
00:24:11,880 --> 00:24:17,160
I don't think I really want to play with that right now, but just know that that's because of the browser

384
00:24:17,970 --> 00:24:19,740
on see the email.

385
00:24:20,310 --> 00:24:22,230
Email must not be empty.

386
00:24:22,260 --> 00:24:28,800
OK, so let's play around with email a little bit, though, so let's do an invalid one email address.

387
00:24:30,390 --> 00:24:38,730
Ah, OK, so now what happened there is that the browser attempted to do a little bit of validation

388
00:24:38,730 --> 00:24:41,220
for us, and I don't actually want that at all.

389
00:24:41,490 --> 00:24:49,290
So to try to make sure that doesn't happen, what I can do is jump back over here to the form and I

390
00:24:49,290 --> 00:24:52,680
can actually specify no validate.

391
00:24:53,280 --> 00:24:53,670
All right.

392
00:24:53,820 --> 00:24:56,720
So I can tell the browser, don't try to do any validation.

393
00:24:56,730 --> 00:24:58,560
Don't don't, don't do me any favors.

394
00:24:58,920 --> 00:24:59,190
All right.

395
00:24:59,190 --> 00:25:00,480
So I'm going to restart.

396
00:25:01,560 --> 00:25:04,830
OK, so now let's try that again.

397
00:25:05,160 --> 00:25:09,570
Invalid email, email must be valid.

398
00:25:09,600 --> 00:25:11,340
OK, let's try.

399
00:25:12,070 --> 00:25:14,340
W woman at.

400
00:25:14,850 --> 00:25:16,600
Yeah, and that's still not valid.

401
00:25:16,620 --> 00:25:18,090
OK, so you've got to do the whole thing.

402
00:25:18,090 --> 00:25:19,230
Wonder Woman Act.

403
00:25:19,920 --> 00:25:24,660
I don't remember what island Wonder Woman is from Butt Island dot com.

404
00:25:25,140 --> 00:25:25,670
All right.

405
00:25:25,680 --> 00:25:26,970
So, yeah, cool.

406
00:25:26,980 --> 00:25:28,630
So now that's not an error anymore.

407
00:25:28,630 --> 00:25:33,060
And now the only file that's in error is this date, which won't be retained, unfortunately.

408
00:25:33,060 --> 00:25:34,980
I mean, I'll look that up.

409
00:25:34,980 --> 00:25:35,430
Maybe.

410
00:25:36,030 --> 00:25:41,190
And maybe if I figure out how to do that, I'll teach in one of the future lessons, OK?

411
00:25:41,850 --> 00:25:45,780
But for now, we'll put let's try one more time a date in the future.

412
00:25:46,350 --> 00:25:46,640
Yeah.

413
00:25:46,650 --> 00:25:49,770
So we got the date of birth must be in the past.

414
00:25:49,800 --> 00:25:50,700
OK, cool.

415
00:25:51,210 --> 00:25:54,060
So that's how that can work.

416
00:25:54,600 --> 00:26:01,230
So now nobody can put stupid stuff in here and get past our validation, at least.

417
00:26:01,230 --> 00:26:01,590
OK?

418
00:26:02,160 --> 00:26:06,660
And yeah, let's go ahead and put some validation on the salary field now as well.

419
00:26:06,900 --> 00:26:18,960
So I will copy that and paste it right below and call this salary.

420
00:26:19,920 --> 00:26:23,070
And name this salary.

421
00:26:24,290 --> 00:26:32,330
As well and then jump back into the person class and put some kind of a rule on the salary now, so

422
00:26:32,330 --> 00:26:34,440
this will be a numeric rule.

423
00:26:34,460 --> 00:26:36,440
Let's see what annotations we've got here.

424
00:26:36,450 --> 00:26:42,800
So one way you could look this up kind of easily, I guess, is just to come up here to the imports

425
00:26:43,010 --> 00:26:46,240
and see that all the constraints are coming from this package.

426
00:26:46,240 --> 00:26:47,810
Java X validation constraints.

427
00:26:47,810 --> 00:26:52,610
So if you put your cursor right there and then have control space, you can kind of get a quick peek

428
00:26:52,850 --> 00:26:55,190
at a lot of what your options are.

429
00:26:55,220 --> 00:26:57,350
OK, so let's see.

430
00:26:57,350 --> 00:27:05,520
We've got digits and we've got decimal so we can specify a maximum decimal and a minimum decimal.

431
00:27:05,540 --> 00:27:06,410
I don't know that might.

432
00:27:06,440 --> 00:27:07,640
That might be useful.

433
00:27:07,760 --> 00:27:13,850
We could say like, you have to put in a number that's at least, you know, over a thousand dollars

434
00:27:13,850 --> 00:27:14,810
or something like that.

435
00:27:14,810 --> 00:27:15,890
Well, a thousand.

436
00:27:17,520 --> 00:27:17,820
Right.

437
00:27:17,850 --> 00:27:21,720
So that's one quick way that you can kind of just see what some of the options are, by the way, that

438
00:27:21,870 --> 00:27:27,060
if you want to do regular expressions, there's there's your there's your guy right there pattern that

439
00:27:27,060 --> 00:27:28,740
would allow you to specify reggae acts.

440
00:27:29,310 --> 00:27:31,620
So, yeah, let's try this decimal men.

441
00:27:32,500 --> 00:27:32,690
Right.

442
00:27:32,700 --> 00:27:36,060
So we'll throw that on there at decimal men.

443
00:27:38,620 --> 00:27:41,950
All right, so let's see, we have to provided a value.

444
00:27:43,500 --> 00:27:43,890
What?

445
00:27:45,160 --> 00:27:51,520
Value equals and this will take a string, though, so I don't know, let's try.

446
00:27:52,000 --> 00:27:55,000
You have to have a minimum of a thousand.

447
00:27:56,050 --> 00:28:02,770
And then a message salary must be at least.

448
00:28:04,980 --> 00:28:07,320
1000, OK.

449
00:28:07,470 --> 00:28:13,350
So and maybe also we don't want to allow that to be empty right now again.

450
00:28:13,470 --> 00:28:17,160
This is not a tax field, so I can't use not empty, but I can use not.

451
00:28:17,160 --> 00:28:17,700
No.

452
00:28:17,850 --> 00:28:20,130
OK, so let's do a not null.

453
00:28:21,060 --> 00:28:30,510
And then we'll provide a message and we'll say sal- salary can not be empty or whatever, or it must

454
00:28:30,510 --> 00:28:32,520
be specified or whatever you want to say there.

455
00:28:32,790 --> 00:28:34,530
OK, so let's restart.

456
00:28:35,810 --> 00:28:38,660
All right, so now if I try to save.

457
00:28:41,720 --> 00:28:42,180
Hmm.

458
00:28:42,230 --> 00:28:44,780
I didn't get anything there for the salary.

459
00:28:49,120 --> 00:28:51,940
Let's see, did I not finish putting in?

460
00:28:52,970 --> 00:28:54,950
All of the fields for the salary.

461
00:28:55,730 --> 00:28:57,020
Oh yeah, I did not.

462
00:28:57,080 --> 00:28:58,280
The error class.

463
00:28:58,550 --> 00:28:58,910
Yeah.

464
00:28:59,510 --> 00:29:06,200
T.H error class equals is invalid.

465
00:29:08,330 --> 00:29:08,990
There we go.

466
00:29:09,290 --> 00:29:10,850
Salary cannot be empty.

467
00:29:10,880 --> 00:29:20,120
OK, and then let's try a salary that is below $1000, so let's do 900 salary must be at least 1000.

468
00:29:20,930 --> 00:29:21,430
OK.

469
00:29:22,010 --> 00:29:26,850
Let's do one thousand even and see if that passes.

470
00:29:26,870 --> 00:29:27,980
Yeah, that does it.

471
00:29:28,550 --> 00:29:32,060
But right below that, so let's do 9-9-9.

472
00:29:33,960 --> 00:29:34,180
Yeah.

473
00:29:34,290 --> 00:29:36,900
So that validation rule is working well.

474
00:29:37,410 --> 00:29:37,660
All right.

475
00:29:37,680 --> 00:29:40,530
So I think that is more than enough for this lesson.

476
00:29:40,680 --> 00:29:48,090
And in the next lesson, I think we're going to probably tackle the ability to delete records from the

477
00:29:48,090 --> 00:29:48,720
database.

478
00:29:48,750 --> 00:29:49,110
OK.

479
00:29:49,380 --> 00:29:51,090
So I will see you in the next one.
