WEBVTT
1
00:00:00.180 --> 00:00:00.870
All right.

2
00:00:00.960 --> 00:00:09.030
So now we're about to get into some more of the nitty gritty of Java object orientation in order for

3
00:00:09.030 --> 00:00:15.330
us to proceed with these next few topics, though, I think it's going to be nice if we first create

4
00:00:15.330 --> 00:00:21.660
another project that can serve as a foundation to help us understand why these next few mechanisms that

5
00:00:21.660 --> 00:00:24.810
I'm about to teach you in Java exist.

6
00:00:24.870 --> 00:00:27.390
OK, so what kind of set up a scenario?

7
00:00:27.540 --> 00:00:27.990
All right.

8
00:00:28.440 --> 00:00:32.670
So we're going to make a project where we are going to have a list of people.

9
00:00:32.820 --> 00:00:36.420
We'll just have that list in a multi-line string for now.

10
00:00:36.600 --> 00:00:44.250
And these people will represent employees of a of a company, OK, and they all have different roles

11
00:00:44.250 --> 00:00:45.510
within that company.

12
00:00:45.690 --> 00:00:54.360
And our job as software developers will be to write a program that can pass through that list and based

13
00:00:54.360 --> 00:00:57.930
on each employee's role, determine their salary.

14
00:00:57.930 --> 00:01:00.140
So different roles have a different salary.

15
00:01:00.150 --> 00:01:00.510
OK?

16
00:01:00.600 --> 00:01:07.410
And then we will maybe just add up all of their salaries to determine how much the company needs to

17
00:01:07.410 --> 00:01:08.840
pay each month.

18
00:01:08.850 --> 00:01:10.650
Let's say something like that, OK?

19
00:01:10.740 --> 00:01:19.110
So I think this scenario will give us a decent excuse to evolve the program over the next few modules

20
00:01:19.260 --> 00:01:24.720
with each of the new concepts from Java object orientation that I'm going to introduce.

21
00:01:24.750 --> 00:01:25.110
OK.

22
00:01:25.230 --> 00:01:26.700
So that's what we're going to do.

23
00:01:27.240 --> 00:01:33.030
So with that being said, let's go to the ADC and we're going to create another project to file new

24
00:01:33.030 --> 00:01:33.840
project.

25
00:01:34.140 --> 00:01:36.310
And I guess we can use MAVEN again.

26
00:01:36.330 --> 00:01:39.660
So we'll leave it selected to Marvin or go ahead and select MAVEN.

27
00:01:39.840 --> 00:01:42.960
Honestly, at this point, it barely matters if you use MAVEN or Gradle.

28
00:01:42.990 --> 00:01:48.240
Like I said earlier, I prefer Gradle, but we're already on MAVEN and I want you to have a little bit

29
00:01:48.240 --> 00:01:50.550
of utilization of both.

30
00:01:52.080 --> 00:01:52.380
All right.

31
00:01:52.380 --> 00:01:58.260
Click next, and let's call this project employees.

32
00:01:58.470 --> 00:01:58.920
All right.

33
00:01:59.160 --> 00:02:00.390
And then click Finish.

34
00:02:00.960 --> 00:02:04.590
And I'm going to use a new window for for mine.

35
00:02:05.520 --> 00:02:06.510
All right.

36
00:02:06.870 --> 00:02:12.390
So let's see here and after it's done, after the ADC is done setting up the project, which I will

37
00:02:12.390 --> 00:02:17.370
know because there won't be any activity going on in this little right hand corner here.

38
00:02:17.580 --> 00:02:23.970
I'm going to expand this folder here for employees, and I will also open up the source and the main

39
00:02:23.970 --> 00:02:24.600
folder.

40
00:02:25.440 --> 00:02:32.220
So first thing I want to do is let's just create a main program that we're actually going to use to

41
00:02:32.220 --> 00:02:33.590
run everything, OK?

42
00:02:33.990 --> 00:02:41.100
So I'm going to right click on this new Java class, and for right now, I'm just going to call it main

43
00:02:41.100 --> 00:02:42.390
with a capital, M..

44
00:02:42.600 --> 00:02:43.050
OK.

45
00:02:43.320 --> 00:02:46.560
Oh, and let's also put it in a folder, though.

46
00:02:47.700 --> 00:02:48.240
Let's see.

47
00:02:48.270 --> 00:02:56.400
So com neutrino six dot employees dot main.

48
00:02:56.430 --> 00:02:56.880
OK.

49
00:02:57.150 --> 00:02:57.630
All right.

50
00:02:58.260 --> 00:03:00.030
And then return.

51
00:03:02.550 --> 00:03:02.850
All right.

52
00:03:02.850 --> 00:03:05.500
So there's our main class now.

53
00:03:05.520 --> 00:03:11.520
Honestly, I debated whether or not to continue teaching every single thing with unit tests.

54
00:03:11.700 --> 00:03:18.120
I really do want to keep you in good practice of doing unit testing, but sometimes I'm afraid that

55
00:03:18.120 --> 00:03:24.510
I'm having to spend more time with you on the unit testing, and you may sometimes miss sight of the

56
00:03:24.510 --> 00:03:27.070
new concept that I'm trying to teach you.

57
00:03:27.090 --> 00:03:27.870
So what?

58
00:03:27.870 --> 00:03:33.720
You're probably going to see me doing in this case, I will introduce you to some of these new concepts

59
00:03:33.720 --> 00:03:37.620
in object orientation with fewer tests initially.

60
00:03:37.620 --> 00:03:43.050
But then when we start to put it all together and make bigger programs, we'll probably jump back into

61
00:03:43.050 --> 00:03:44.130
the TDD approach.

62
00:03:44.340 --> 00:03:47.100
TDD takes real discipline and in practice.

63
00:03:47.280 --> 00:03:54.510
And I think part of that will come by you seeing me do it regularly and by you trying it out regularly

64
00:03:54.510 --> 00:03:54.970
as well.

65
00:03:55.110 --> 00:03:57.920
But I don't want to push too much on you too early.

66
00:03:57.930 --> 00:04:00.720
So we'll come back to the TDD from time to time.

67
00:04:01.200 --> 00:04:01.620
All right.

68
00:04:01.680 --> 00:04:07.140
With that being said, so we're here in the main class, and so we're going to actually do something

69
00:04:07.140 --> 00:04:11.990
very similar to what we did back in the regular expression module.

70
00:04:12.000 --> 00:04:17.940
I think like one of the last lessons there and in fact, I'm actually probably going to go grab that

71
00:04:17.940 --> 00:04:19.950
code as a starting point.

72
00:04:19.950 --> 00:04:22.920
So I'm going to just jump over there real quick.

73
00:04:26.940 --> 00:04:27.370
OK.

74
00:04:27.570 --> 00:04:35.000
So as you can see, I have actually just copied and pasted the original code from that last lesson,

75
00:04:35.010 --> 00:04:39.750
if you have that code, still, you can copy and paste it in, just as I've done here.

76
00:04:39.870 --> 00:04:45.750
Basically, I just grabbed the main method and pasted it right into this class as a starting point.

77
00:04:45.780 --> 00:04:49.740
We're going to modify it a little bit, I think, but it's probably a decent start.

78
00:04:49.770 --> 00:04:57.150
I'll try to also make this main method available as a text file or something on this lesson as well.

79
00:04:57.660 --> 00:04:57.970
All right.

80
00:04:57.990 --> 00:05:00.540
And then I'm going to make a little room here.

81
00:05:00.960 --> 00:05:01.310
All right.

82
00:05:01.320 --> 00:05:06.330
So I think what we've got here is a good start already.

83
00:05:06.630 --> 00:05:10.860
But one thing I think we're missing is what is their role, right?

84
00:05:10.860 --> 00:05:14.040
So we want to just put kind of like their role within the company.

85
00:05:14.340 --> 00:05:17.970
And I guess we can just do that at the end of each line.

86
00:05:17.970 --> 00:05:20.490
So we'll just give each person a role.

87
00:05:20.850 --> 00:05:23.540
And I don't know, I'm just going to make these up on the fly.

88
00:05:23.550 --> 00:05:28.020
So maybe Fred Flintstone is a programmer.

89
00:05:30.770 --> 00:05:44.120
And Barney Rubble is a manager, and Wilma is a an analyst and Betty is the CEO.

90
00:05:44.450 --> 00:05:45.500
OK, there we go.

91
00:05:46.130 --> 00:05:46.580
All right.

92
00:05:46.940 --> 00:05:48.470
Now let's revise.

93
00:05:48.470 --> 00:05:55.970
This rejects to be able to pass this last little addition here as a roll, right?

94
00:05:55.970 --> 00:06:03.710
So we've got the date of birth here, which ends with this new line.

95
00:06:04.010 --> 00:06:16.430
So now we'll put another comma in here and let's see a comma, followed by zero or more spaces and then

96
00:06:16.430 --> 00:06:19.250
a Capshaw group, a named Capshaw Group.

97
00:06:19.910 --> 00:06:21.890
And we'll call this roll.

98
00:06:22.640 --> 00:06:27.530
And I'm going to just close that parentheses before I forget to then come back inside of it.

99
00:06:27.770 --> 00:06:31.270
And so the pattern here, I think, is just.

100
00:06:35.040 --> 00:06:43.080
One or more word characters, and then that will be ended with a new line character, which takes us

101
00:06:43.080 --> 00:06:43.980
to the next line.

102
00:06:44.400 --> 00:06:46.140
So I think that's all we need there.

103
00:06:47.040 --> 00:06:48.280
Let's see.

104
00:06:49.260 --> 00:06:57.240
And to test that out, let's just I'm going to replace this date of birth bit here with roll.

105
00:06:57.720 --> 00:07:03.210
And then let's just run this real quick and make sure that that last bit is passing correctly.

106
00:07:04.050 --> 00:07:04.920
OK, looks good.

107
00:07:04.920 --> 00:07:07.770
Fred Flintstone is a programmer, manager, analyst's CEO.

108
00:07:07.780 --> 00:07:08.670
I think we've got it.

109
00:07:08.880 --> 00:07:09.480
OK, good.

110
00:07:09.690 --> 00:07:10.500
All right.

111
00:07:11.310 --> 00:07:13.770
Now let's get down to business.

112
00:07:14.850 --> 00:07:19.890
So our goal here is to pass each of these lines.

113
00:07:20.160 --> 00:07:28.980
And depending on what the person's role is, we will assign a salary to them and then we will add up

114
00:07:28.980 --> 00:07:30.260
all the salaries, OK?

115
00:07:30.300 --> 00:07:31.830
That's basically what we're going to do.

116
00:07:32.160 --> 00:07:38.310
So we've already got this loop here, and I think that's probably a good start and we already have a

117
00:07:38.310 --> 00:07:41.220
means of parsing each person as well.

118
00:07:41.640 --> 00:07:50.020
Now what we need to do, though, is to kind of like assign a salary to each of their roles.

119
00:07:50.040 --> 00:07:50.490
Right?

120
00:07:50.940 --> 00:07:59.220
So with what we know how to do so far, one thought that comes to my mind is that we could use either

121
00:07:59.220 --> 00:08:03.000
and if bloc or a switch, perhaps something like that.

122
00:08:03.120 --> 00:08:04.800
So I'm going to I don't know.

123
00:08:04.800 --> 00:08:06.990
I think I'm going to delete this line.

124
00:08:08.070 --> 00:08:18.990
And if we did a switch on Match Dot Group role.

125
00:08:23.990 --> 00:08:30.350
Then we should be able to say things like case.

126
00:08:34.990 --> 00:08:35.920
Programmer.

127
00:08:39.040 --> 00:08:47.290
Now I'm going to use the arrow notation here, which is the newer syntax for Switch as of Java 14.

128
00:08:47.440 --> 00:08:49.270
And I'll show you why in just a second here.

129
00:08:49.300 --> 00:08:55.270
So let's just say that a programmer earns three thousand.

130
00:08:56.680 --> 00:09:00.610
Now, I'm not even saying what the units are or how frequently this is.

131
00:09:00.610 --> 00:09:02.770
Is this per month per year per day, whatever?

132
00:09:02.770 --> 00:09:03.580
It doesn't matter.

133
00:09:03.820 --> 00:09:05.020
But 3000?

134
00:09:06.250 --> 00:09:06.520
All right.

135
00:09:06.520 --> 00:09:09.280
So we need to do something with this 3000, right?

136
00:09:09.310 --> 00:09:10.930
We need to assign it somewhere.

137
00:09:11.050 --> 00:09:18.700
And so what I'm thinking of here is since the whole point of this is to accumulate a total salary payout

138
00:09:18.700 --> 00:09:19.450
or whatever, right?

139
00:09:19.480 --> 00:09:29.260
Let's see what would happen if we create a variable called, I don't know, total salaries and we'll

140
00:09:29.260 --> 00:09:31.210
set that equal to zero.

141
00:09:31.750 --> 00:09:35.500
And then down here, can we do?

142
00:09:35.740 --> 00:09:37.180
Total salaries.

143
00:09:38.700 --> 00:09:51.420
Plus equals and then we'll put a semicolon here, OK, and then we can just add more cases.

144
00:09:52.320 --> 00:09:57.630
Now let's go ahead and do a default case in case nothing matches that group, right?

145
00:09:57.630 --> 00:10:01.950
In case there's no data there, then for that scenario, let's just return to zero.

146
00:10:02.490 --> 00:10:02.880
All right.

147
00:10:02.970 --> 00:10:07.290
And now that makes all the errors go away because basically saying, well, hey, what if this doesn't

148
00:10:07.290 --> 00:10:08.670
match what you have here?

149
00:10:08.880 --> 00:10:11.310
OK, and that case will just make it zero.

150
00:10:11.520 --> 00:10:11.940
All right.

151
00:10:12.330 --> 00:10:12.600
All right.

152
00:10:12.600 --> 00:10:19.380
So program, if you're a programmer, you're getting three grand per whatever, and then we'll do another

153
00:10:19.380 --> 00:10:19.800
case.

154
00:10:19.800 --> 00:10:28.200
If you're a manager, you will get, I don't know, 3500.

155
00:10:30.120 --> 00:10:39.060
And if you're an analyst, you'll get 2500.

156
00:10:40.530 --> 00:10:46.830
And if you're the CEO, you'll get 5000.

157
00:10:47.790 --> 00:10:48.330
All right.

158
00:10:49.350 --> 00:10:51.260
And so let's see here.

159
00:10:51.270 --> 00:10:52.500
So this loop will go.

160
00:10:52.590 --> 00:11:00.750
So hopefully what this should do, then it should loop through each line and pass out the role and then

161
00:11:00.750 --> 00:11:03.330
determine how much that role is worth.

162
00:11:03.480 --> 00:11:06.600
And then add that to the total salaries here.

163
00:11:06.900 --> 00:11:07.300
Right?

164
00:11:07.320 --> 00:11:12.520
And so then when it's done looping, which should be here, let's just print that out.

165
00:11:12.540 --> 00:11:17.640
Let's do a Esso up and say, let's see.

166
00:11:17.640 --> 00:11:25.920
The total payout should be percent as percent in.

167
00:11:26.820 --> 00:11:27.530
And you know what?

168
00:11:27.540 --> 00:11:29.680
Let's be cool and format nicely.

169
00:11:30.090 --> 00:11:31.380
We know how to do that, right?

170
00:11:32.130 --> 00:11:34.530
So let's create an instance of a number format.

171
00:11:36.620 --> 00:11:46.100
No format does it get currency instance, let's capture that.

172
00:11:47.340 --> 00:11:52.820
I'll call it a currency instance and then we can just use it in line here.

173
00:11:53.840 --> 00:12:07.220
So currency instance, dot format, and then we will pass in our number, which will be total salaries.

174
00:12:08.670 --> 00:12:09.510
Like so.

175
00:12:10.740 --> 00:12:11.320
All right.

176
00:12:11.370 --> 00:12:12.990
Let's run that and see what we get.

177
00:12:16.210 --> 00:12:19.780
All right, so it says the total payout should be 14 grand.

178
00:12:20.950 --> 00:12:25.330
OK, so there's our there's our basic approach, right?

179
00:12:25.870 --> 00:12:26.170
All right.

180
00:12:26.170 --> 00:12:34.180
So that's not a terrible approach to doing this, but we can do some things, perhaps to help the program

181
00:12:34.180 --> 00:12:42.670
to be a little more robust, like we could use an enum, perhaps to just kind of help force our possibilities

182
00:12:42.970 --> 00:12:49.660
to align to that which we already know for certain few little things of that sort.

183
00:12:50.410 --> 00:12:57.430
So what we'll do in the next few lessons is we'll use this as a foundation to learn some alternative

184
00:12:57.430 --> 00:13:00.370
approaches to how we might have modeled this.

185
00:13:00.370 --> 00:13:05.230
And then we'll analyze what are some of the pros and cons of these alternative approaches?

186
00:13:05.260 --> 00:13:13.030
OK, so that's all I wanted to do in this lesson is just to introduce you to a problem for us to solve

187
00:13:13.030 --> 00:13:14.350
in a number of different ways.

188
00:13:14.710 --> 00:13:14.980
All right.

189
00:13:14.980 --> 00:13:17.170
With that being said, I'll see you in the next one.
