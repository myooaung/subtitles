1
00:00:00,240 --> 00:00:06,360
All right, next up, let's talk about another number system, which is hexadecimal.

2
00:00:06,780 --> 00:00:11,280
Let's find out a little bit about this numbering system, why it exists and how it works.

3
00:00:11,760 --> 00:00:14,440
So let's do a quick review, though first.

4
00:00:14,460 --> 00:00:22,170
So we all grew up probably learning the decimal number system, and that is a system that is based on

5
00:00:22,170 --> 00:00:22,620
10.

6
00:00:22,630 --> 00:00:24,150
So it is based 10.

7
00:00:24,330 --> 00:00:32,190
And the reason it's considered base 10 is because each place in this number system, like the ones tens,

8
00:00:32,190 --> 00:00:36,990
hundreds or whatever, can hold digits between zero and nine.

9
00:00:37,020 --> 00:00:48,180
So 10 values in binary binary is called a base two system because each place in this case here, here,

10
00:00:48,180 --> 00:00:56,250
here and here, each place can hold only two different values a zero or a one.

11
00:00:56,280 --> 00:00:56,820
OK.

12
00:00:57,450 --> 00:01:02,940
So hexadecimal is a number system, which is base 16.

13
00:01:03,270 --> 00:01:08,130
So for each place, you can have 16 different values.

14
00:01:08,670 --> 00:01:17,250
Now, the way that those 16 values are implemented is that the first 10 values just use the same numbers

15
00:01:17,250 --> 00:01:22,890
as exist in the decimal system based 10 zero through nine.

16
00:01:23,160 --> 00:01:31,260
But after we run out of numbers, then we start using letters as the additional symbols for base 16.

17
00:01:31,440 --> 00:01:39,510
So a through F, ABCD, E and F and combined that gives us our 16 values.

18
00:01:40,530 --> 00:01:45,630
Now you should probably be wondering why on earth would we ever need this?

19
00:01:45,960 --> 00:01:54,480
And the short answer is that it's actually a very convenient number system that allows us to compress

20
00:01:54,660 --> 00:01:57,120
base 10 and binary numbers.

21
00:01:57,330 --> 00:02:06,930
So as you can see with binary numbers, it takes a lot more space, so to speak, to encode decimal

22
00:02:06,930 --> 00:02:07,770
numbers, right?

23
00:02:07,890 --> 00:02:15,690
So for example, here, decimal number 15 requires four bits to encode that same number.

24
00:02:15,720 --> 00:02:16,200
OK.

25
00:02:16,680 --> 00:02:21,960
In decimal, you need two places to encode the number 15.

26
00:02:22,320 --> 00:02:25,860
The one a one in the tens place and a five in the ones place.

27
00:02:26,010 --> 00:02:33,030
However, in hexadecimal, you can encode up to 15 with just one place and f.

28
00:02:33,870 --> 00:02:42,760
So hexadecimal allows us to have a compressed representation of numbers from base 10 or base two.

29
00:02:43,380 --> 00:02:48,810
Also, hexadecimal numbers line up really, really well with bytes.

30
00:02:49,290 --> 00:02:56,310
So if you were to take a bite eight bits and break it into two sets of four bits, by the way, Four

31
00:02:56,310 --> 00:02:57,780
Bits has a name as well.

32
00:02:57,790 --> 00:02:58,950
It's called a nibble.

33
00:02:58,980 --> 00:03:05,190
You don't hear that term very often, but because computers tend to be more like based on eight.

34
00:03:05,580 --> 00:03:07,560
But yeah, four bits is a nibble.

35
00:03:07,980 --> 00:03:08,250
All right.

36
00:03:08,250 --> 00:03:17,310
So one hexadecimal digit can very nicely represent one nibble or four bits.

37
00:03:17,610 --> 00:03:21,030
And let me show you what that looks like, so we'll come down here.

38
00:03:21,360 --> 00:03:25,900
I have here one hexadecimal number three E8.

39
00:03:26,040 --> 00:03:30,900
I know it looks weird, and I know it sounds weird to refer to something that has letters as a number,

40
00:03:30,900 --> 00:03:36,120
but it is a hexadecimal number three, eight and up above it.

41
00:03:36,120 --> 00:03:38,610
We've got the actual binary number.

42
00:03:38,820 --> 00:03:45,000
And what I've done here is I've broken this binary number into groups of four or nibbles, right?

43
00:03:45,240 --> 00:03:50,160
So the first grouping of four has a value of eight by itself.

44
00:03:50,280 --> 00:03:50,820
OK.

45
00:03:51,180 --> 00:03:53,640
And so I have an hexadecimal eight here.

46
00:03:53,640 --> 00:03:58,560
So what I'm doing is I'm converting this binary number into a hexadecimal equivalent.

47
00:03:58,890 --> 00:04:06,540
OK, so all you have to do is this break up the binary number into groupings of four and then you translate

48
00:04:06,570 --> 00:04:12,840
that individual binary number of four digits into the hexadecimal equivalent.

49
00:04:12,870 --> 00:04:15,870
So here, the first grouping of four would be an eight.

50
00:04:16,050 --> 00:04:17,430
And so I have an eight here.

51
00:04:17,460 --> 00:04:25,560
The next number here is a 14 because we've got zero one one one right one two four eight.

52
00:04:25,800 --> 00:04:34,110
So this first one here on the left is eight plus four is 12, plus two is 14 and then zero zero.

53
00:04:34,380 --> 00:04:38,730
And so that is 14 14, and hexadecimal is an E.

54
00:04:38,970 --> 00:04:42,030
We can go over here and see that 14 is E!

55
00:04:43,180 --> 00:04:45,670
And we even have the binary one one one zero.

56
00:04:45,910 --> 00:04:49,540
So if you come over here one one one zero, right, so that's an E.

57
00:04:49,870 --> 00:04:55,270
And then the last grouping of four is a three two plus one three.

58
00:04:55,480 --> 00:04:55,840
Right.

59
00:04:56,290 --> 00:05:03,340
So three eight, this is the hexadecimal conversion of this binary number.

60
00:05:03,520 --> 00:05:05,920
Let's look at one more here.

61
00:05:05,920 --> 00:05:12,760
We've got a hexadecimal number that spells out the word face and to convert this one from binary, what

62
00:05:12,760 --> 00:05:19,240
we've got is the first grouping of four in the binary is eight plus four plus two, which again is 14.

63
00:05:19,240 --> 00:05:30,460
There's that same e, then we've got 12 eight plus four and that is a C, and then we've got 10, eight

64
00:05:30,460 --> 00:05:33,490
plus two, which is an a in Hex.

65
00:05:33,880 --> 00:05:40,780
And then we've got a 15, which is one one one one, which is an f f a c e.

66
00:05:41,230 --> 00:05:41,650
OK.

67
00:05:41,800 --> 00:05:50,920
So like I said, hexadecimal is really convenient at compressing the amount of space visually and in

68
00:05:50,920 --> 00:05:56,230
writing required to represent decimal and binary numbers.

69
00:05:57,040 --> 00:06:04,030
And it also lines up really, really conveniently with every four bits of a binary number.

70
00:06:04,840 --> 00:06:10,090
Now, it's not overly important for you to really, really deeply understand this.

71
00:06:10,100 --> 00:06:16,000
However, you will encounter this from time to time, and we have seen this already hexadecimal numbers

72
00:06:16,030 --> 00:06:19,450
in Java, and I will show you what I mean.

73
00:06:19,690 --> 00:06:22,210
So we'll jump back over to the ADP.

74
00:06:24,660 --> 00:06:33,930
And if we were to create an instance of this, no class which doesn't do anything, by the way, but

75
00:06:33,930 --> 00:06:37,020
if we create an instance of the no class.

76
00:06:39,240 --> 00:06:43,230
My instance equals new.

77
00:06:44,360 --> 00:06:45,410
No stuff.

78
00:06:45,860 --> 00:06:49,040
OK, so there we've created an instance of the number of stuff.

79
00:06:49,400 --> 00:06:58,670
And then if we print out in this instance, do you recall what's going to happen if we do this?

80
00:06:58,910 --> 00:07:02,990
I'm going to comment out this one here, and let's just run this.

81
00:07:05,930 --> 00:07:11,360
Look at what we get here, do you remember this week this happened a long time ago when we were working,

82
00:07:11,360 --> 00:07:18,830
I think in the person class and we created a person and we tried to print that person before we overrode

83
00:07:18,830 --> 00:07:20,220
the two string method.

84
00:07:20,280 --> 00:07:28,010
So so what's happening here is that when you pass a reference to an object into the method, a method

85
00:07:28,010 --> 00:07:34,400
like print line which is expecting a string by default, the two string method of that object will be

86
00:07:34,400 --> 00:07:35,000
called.

87
00:07:35,510 --> 00:07:40,250
Now we haven't written our own two string method on this class.

88
00:07:40,430 --> 00:07:48,470
And so the inherited default two string method, which is inherited from the superclass object, is

89
00:07:48,470 --> 00:07:49,400
getting called.

90
00:07:49,730 --> 00:07:58,760
And the default implementation of that two string method is to simply print the name of the class itself

91
00:07:59,120 --> 00:08:03,860
and then the address of that object in memory.

92
00:08:03,860 --> 00:08:07,130
This is the address of the object in memory here.

93
00:08:07,520 --> 00:08:11,450
Notice it has a combination of numbers and letters.

94
00:08:11,600 --> 00:08:15,110
This is, in fact a hexadecimal number.

95
00:08:15,260 --> 00:08:25,610
This is simply a compressed way for Java to tell us where in memory does this object reside going back

96
00:08:25,610 --> 00:08:26,600
to the spreadsheet?

97
00:08:26,900 --> 00:08:35,960
Again, if we kind of imagine that every object in Java takes up some amount of space in the form of

98
00:08:35,960 --> 00:08:38,030
some number of bytes, right?

99
00:08:38,330 --> 00:08:42,560
Every bite in memory has an address.

100
00:08:42,980 --> 00:08:50,630
And so this is showing us the address where all the bytes that comprise this particular object reside

101
00:08:50,630 --> 00:08:51,440
in memory.

102
00:08:51,680 --> 00:08:52,130
OK.

103
00:08:52,610 --> 00:08:52,820
All right.

104
00:08:52,860 --> 00:08:57,620
And I think that's probably about all I need to say about Hex Hexadecimal.

105
00:08:57,830 --> 00:09:04,190
I just didn't want this to be some ongoing mystery to you as to what exactly is this and why is it this

106
00:09:04,190 --> 00:09:04,430
way?

107
00:09:04,610 --> 00:09:10,460
If the creators of Java had not chosen to use hexadecimal here, they could have used decimal.

108
00:09:10,760 --> 00:09:14,660
But then it would have taken up more space visually for us to see.

109
00:09:14,840 --> 00:09:20,690
They could have used binary, but then it would be really long and taken up even more visual space.

110
00:09:20,870 --> 00:09:27,020
And so hexadecimal is just a really convenient way to convey the address of this object in memory.

111
00:09:27,470 --> 00:09:27,820
All right.

112
00:09:27,830 --> 00:09:32,030
And that's going to wrap up this little short lesson on hexadecimal.
