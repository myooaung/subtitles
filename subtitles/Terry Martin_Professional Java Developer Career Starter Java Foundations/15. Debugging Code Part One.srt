1
00:00:00,450 --> 00:00:00,840
All right.

2
00:00:00,870 --> 00:00:07,080
I've got another topic that I want to present to you that is closely associated with automated testing,

3
00:00:07,080 --> 00:00:09,930
and that is the topic of debugging code.

4
00:00:10,410 --> 00:00:12,780
So what is debugging code and how do we do it?

5
00:00:12,840 --> 00:00:20,760
Well, debugging code is basically where we use capabilities of the ADC to allow us to essentially step

6
00:00:20,760 --> 00:00:23,100
through code while it's executing.

7
00:00:23,100 --> 00:00:30,360
And in fact, quite often we will control the pace at which the lines of code are executed so we can

8
00:00:30,360 --> 00:00:35,010
actually stop on each line while the program is executing.

9
00:00:35,190 --> 00:00:42,630
And then we can take the time to inspect values of variables and see what's going on in the program,

10
00:00:43,200 --> 00:00:45,570
kind of like from the perspective of the computer.

11
00:00:45,690 --> 00:00:50,760
So this is a very helpful technique that's been around for decades, really.

12
00:00:51,030 --> 00:00:59,340
And a lot of developers at some point often will choose to use debugging to figure out what's going

13
00:00:59,340 --> 00:01:02,190
wrong with the program or try to understand better.

14
00:01:02,340 --> 00:01:06,690
Why is the program functioning in a way that they didn't think it would?

15
00:01:07,170 --> 00:01:09,990
So that's what we're going to learn next.

16
00:01:10,380 --> 00:01:17,130
OK, so turning to the ADP, we're still in our guessing game, and what I have chosen to do here is

17
00:01:17,130 --> 00:01:20,250
to actually break it just a tiny bit.

18
00:01:20,250 --> 00:01:26,790
I just made one tiny change to it so that we'd have an excuse to play with the debugging capabilities

19
00:01:26,790 --> 00:01:27,860
of the ADP.

20
00:01:28,350 --> 00:01:34,200
Now there are maybe a couple of ways that you might in real life determine that something has gone wrong

21
00:01:34,200 --> 00:01:36,030
in your program one way.

22
00:01:36,030 --> 00:01:42,210
And I would argue this is the less efficient way would be to actually just run the guessing game and

23
00:01:42,210 --> 00:01:44,130
try out all the various scenarios.

24
00:01:44,370 --> 00:01:51,750
But I think by now, you should understand that if you've done particularly TDD to develop the application,

25
00:01:51,930 --> 00:01:57,390
the much quicker way to determine that something is wrong would be to just run all of the tests and

26
00:01:57,390 --> 00:01:58,920
see if anything breaks, right?

27
00:01:59,250 --> 00:02:00,540
So that's what we're going to do.

28
00:02:00,550 --> 00:02:08,040
So I'm going to do a command shift you to jump over to our tests and go up to the top here, and I'm

29
00:02:08,040 --> 00:02:10,260
just going to run all of the tests.

30
00:02:14,700 --> 00:02:22,200
All right, and as you can see, we've got one failing test and that failing test is this one here test

31
00:02:22,200 --> 00:02:23,280
for wrong guesses.

32
00:02:23,280 --> 00:02:28,890
So if I double click on this, that'll take us straight to that particular test.

33
00:02:29,250 --> 00:02:30,720
Now let's see what's going on here.

34
00:02:30,720 --> 00:02:37,950
So this is where we are simulating what happens when you make four wrong guesses.

35
00:02:38,250 --> 00:02:43,890
And apparently what we are expecting here is that you should we should get back a message from the guessing

36
00:02:43,890 --> 00:02:50,580
game engine saying you didn't guess you didn't get it and you've had four tries game over.

37
00:02:51,150 --> 00:02:54,510
But what we're actually getting now is you didn't get it.

38
00:02:54,750 --> 00:02:55,800
You're too low.

39
00:02:56,580 --> 00:02:56,930
All right.

40
00:02:56,940 --> 00:02:58,560
So that's the problem here.

41
00:02:58,830 --> 00:02:59,040
All right.

42
00:02:59,050 --> 00:03:04,710
So one more time, I just want to note what we're expecting to see here is you didn't get it and you've

43
00:03:04,710 --> 00:03:10,660
had four tries game over and this is presumably coming on our fourth guess.

44
00:03:10,660 --> 00:03:12,120
So we make a fourth wrong.

45
00:03:12,120 --> 00:03:17,520
Guess we captured the message and then we're expecting that that's what the message should be.

46
00:03:17,850 --> 00:03:22,140
So how can we figure this out using debugging techniques?

47
00:03:22,950 --> 00:03:32,250
Well, the first step is typically to put what we call a breakpoint on a particular line close to where

48
00:03:32,250 --> 00:03:34,470
we think things may be going awry.

49
00:03:34,590 --> 00:03:41,010
OK, now sometimes a developer may put a breakpoint kind of high up in the program, and then they'll

50
00:03:41,010 --> 00:03:42,990
kind of step through the entire program.

51
00:03:43,200 --> 00:03:47,330
That's pretty wasteful and inefficient, though, because then you've got to sit there and just like,

52
00:03:47,340 --> 00:03:49,500
keep going through line by line by line.

53
00:03:49,680 --> 00:03:55,470
It's usually a little better, in my opinion, to put the breakpoint somewhere close to where you think

54
00:03:55,470 --> 00:03:57,660
the actual problem is going wrong.

55
00:03:57,990 --> 00:04:01,440
And that way you get to skip over all the parts that are presumably fine.

56
00:04:01,740 --> 00:04:04,400
And if you're wrong, you can always change the breakpoint.

57
00:04:04,410 --> 00:04:09,540
Put it somewhere earlier in the in the execution and try again.

58
00:04:09,930 --> 00:04:18,120
All right, so here, since the focus of this test is to see what happens when you make a fourth guess.

59
00:04:18,120 --> 00:04:24,180
And that's the only time when we're actually getting a message and the message we know is wrong, I'm

60
00:04:24,180 --> 00:04:27,840
inclined to put a breakpoint on this line.

61
00:04:27,840 --> 00:04:28,600
64.

62
00:04:28,620 --> 00:04:36,870
OK, so what that breakpoint is going to do is it's going to tell the I.D. and Java to stop at that

63
00:04:36,870 --> 00:04:42,600
line before the line actually gets executed, though, and then we can decide what to do from that point.

64
00:04:42,990 --> 00:04:45,060
So the way to make a break point is easy.

65
00:04:45,330 --> 00:04:51,390
I'm going to move my cursor right to the right side of the line number, and I'm just going to click.

66
00:04:51,690 --> 00:04:53,610
So this is usually called the gutter.

67
00:04:53,910 --> 00:04:58,680
So clicking one time puts this little red dot here, and that's a breakpoint.

68
00:04:58,830 --> 00:04:59,280
OK.

69
00:04:59,760 --> 00:05:09,780
And so now if I run this program in a special mode called Debug Mode, the program will pause or halt

70
00:05:10,050 --> 00:05:16,230
when it gets to line sixty four and then I can choose what I want to do at that point.

71
00:05:16,350 --> 00:05:16,830
OK.

72
00:05:17,340 --> 00:05:24,930
So the most efficient thing I can think to do at this point is actually to just run only this one test.

73
00:05:24,930 --> 00:05:26,850
So I can do that in multiple ways.

74
00:05:26,850 --> 00:05:33,510
I could come down here to the failing test and right click on it and choose to debug right here.

75
00:05:34,020 --> 00:05:40,590
Or I could click on it up here and choose Debug Right so I can do any of these things.

76
00:05:40,590 --> 00:05:46,530
Or I could run all the tests and the breakpoint would still get stopped and the program would still

77
00:05:46,530 --> 00:05:49,950
stop or halt or pause when it gets to that breakpoint.

78
00:05:49,950 --> 00:05:51,570
But again, that's a little less efficient.

79
00:05:51,580 --> 00:05:53,610
Why run of all of the tests?

80
00:05:53,970 --> 00:05:54,270
All right.

81
00:05:54,270 --> 00:05:57,710
So I'm just going to choose up here for now, just randomly.

82
00:05:57,720 --> 00:05:59,640
I'm going to choose the debug option here.

83
00:06:00,000 --> 00:06:01,860
So that's going to run the program.

84
00:06:02,280 --> 00:06:04,830
And now I'm in debug mode right now.

85
00:06:04,980 --> 00:06:08,970
So the test is actually executing right now.

86
00:06:08,970 --> 00:06:11,700
But at the moment it's paused.

87
00:06:11,700 --> 00:06:14,910
If you will not technically pause, but it's halted.

88
00:06:14,910 --> 00:06:17,520
It's waiting on me to tell it what to do.

89
00:06:17,730 --> 00:06:23,580
So what has happened is it started running this test and it executed line.

90
00:06:23,580 --> 00:06:26,700
Sixty one, sixty two and sixty three just fine.

91
00:06:26,940 --> 00:06:28,670
Then it came to Line 64.

92
00:06:28,680 --> 00:06:31,350
It saw that I have placed the breakpoint here.

93
00:06:31,350 --> 00:06:36,400
And so now it's waiting for me to tell it whether what I want to do now.

94
00:06:36,690 --> 00:06:38,790
I have a couple of choices here.

95
00:06:39,060 --> 00:06:46,860
My first choice is I could just let the program do what we call step over, step over Line sixty four

96
00:06:47,250 --> 00:06:54,720
and I've never been a big fan of that terminology step over because it feels like it's saying like Skip,

97
00:06:55,320 --> 00:06:57,960
skip the line, and that's not really what it's doing at all.

98
00:06:58,050 --> 00:07:04,860
What stepping over will do is it will execute everything that needs to be executed on Line 64 and then

99
00:07:04,860 --> 00:07:06,750
go down to the next line.

100
00:07:06,780 --> 00:07:07,260
OK.

101
00:07:07,560 --> 00:07:09,780
So it doesn't skip anything, really.

102
00:07:09,780 --> 00:07:14,220
It just executes that line and moves on to the next line so that.

103
00:07:14,300 --> 00:07:18,830
Stepping over the other option, though, is to step in.

104
00:07:19,520 --> 00:07:28,580
Now I have the option of stepping in when there is a method that is going to be called on the line of

105
00:07:28,580 --> 00:07:29,720
my break point.

106
00:07:29,900 --> 00:07:34,520
So here there is a method that is able to be called it is Gamecock.

107
00:07:34,520 --> 00:07:36,260
Guess this method here?

108
00:07:36,440 --> 00:07:43,400
So if I step in, if I choose to step in, that will take me into this method, which is pretty much

109
00:07:43,400 --> 00:07:48,230
the same thing that the thread would do when it's executing this program, right?

110
00:07:48,410 --> 00:07:54,200
It steps in to all of the methods and everything and then starts running those lines as well.

111
00:07:54,320 --> 00:08:00,920
So if I choose to step over, the thread will still execute all of that, but I don't get to see it.

112
00:08:01,130 --> 00:08:05,970
OK, it's stepping over it from my perspective, if I step in.

113
00:08:06,140 --> 00:08:12,260
Then I'm kind of going along for the ride with the thread and jumping into this method.

114
00:08:12,500 --> 00:08:18,140
So I'm going to choose to step in because if I just step over this, I already know what's going to

115
00:08:18,140 --> 00:08:18,650
happen.

116
00:08:18,800 --> 00:08:26,300
The Gamecock guess method is going to return a message which is wrong, and I won't know why it's wrong,

117
00:08:26,810 --> 00:08:27,120
right?

118
00:08:27,140 --> 00:08:30,740
I want to know why this message is wrong and to find that out.

119
00:08:30,740 --> 00:08:37,100
The only way I'm going to figure that out is to is to jump into this guess method where all of the real

120
00:08:37,400 --> 00:08:39,170
logic exists, right?

121
00:08:39,920 --> 00:08:40,160
All right.

122
00:08:40,160 --> 00:08:42,320
So how do I step over or step in?

123
00:08:42,830 --> 00:08:44,240
So down here.

124
00:08:45,380 --> 00:08:48,080
There are these little buttons, tiny little buttons.

125
00:08:48,320 --> 00:08:53,810
And the first one is step over and I can just click it to step over.

126
00:08:53,810 --> 00:09:00,350
If I wanted to do that, which I'm not going to right now, or I could step in and notice, I can also

127
00:09:00,350 --> 00:09:02,750
use the function keys to do this.

128
00:09:02,750 --> 00:09:07,430
So f eight four step over F7 four step into.

129
00:09:07,520 --> 00:09:07,970
OK.

130
00:09:08,390 --> 00:09:15,620
And keep in mind that if you want to use the function keys on Mac, the I think it was maybe the third

131
00:09:15,620 --> 00:09:19,490
or fourth video that I ever made in the first module.

132
00:09:19,670 --> 00:09:27,620
I made a little addendum telling you how to set your Mac up to let the function keys behave as regular

133
00:09:27,620 --> 00:09:32,190
function keys so that you could use them without holding down on any additional keys, right?

134
00:09:32,210 --> 00:09:33,320
So just keep that in mind.

135
00:09:33,890 --> 00:09:34,280
All right.

136
00:09:34,290 --> 00:09:35,690
So I'm going to step in.

137
00:09:35,690 --> 00:09:40,100
I'm going to use the keyboard here because my function keys are set up correctly.

138
00:09:40,100 --> 00:09:44,060
If yours are not, it may be easier for you to press the button here.

139
00:09:44,070 --> 00:09:49,490
OK, so pressing this little button is going to jump us into this guess method.

140
00:09:49,700 --> 00:09:53,420
All right, so I'm going to do function or F7 right now.

141
00:09:53,600 --> 00:09:54,170
All right.

142
00:09:54,320 --> 00:09:59,570
And so now we are along for the ride with the thread, right?

143
00:09:59,690 --> 00:10:01,460
This is what the thread would have done.

144
00:10:01,490 --> 00:10:03,170
Now, notice a number of things here.

145
00:10:03,170 --> 00:10:04,400
It's pretty cool, actually.

146
00:10:04,760 --> 00:10:11,480
We're getting a lot of insight into what various variables are set to like, what their values are.

147
00:10:11,510 --> 00:10:13,430
We're seeing them in real time.

148
00:10:13,790 --> 00:10:17,450
So our test passed in the No.

149
00:10:17,450 --> 00:10:24,530
Negative three here, and we see that this guest no variable, its value is being shown off to the right

150
00:10:24,530 --> 00:10:24,740
here.

151
00:10:24,770 --> 00:10:27,110
Guest number is set to negative three.

152
00:10:27,320 --> 00:10:29,270
That's what we passed in from the test.

153
00:10:29,270 --> 00:10:34,070
And in fact, I can jump back over to the test just to see what that looked like.

154
00:10:34,340 --> 00:10:40,370
So over here in the bottom pane, we're seeing the stack, if you will.

155
00:10:40,400 --> 00:10:46,820
OK, so this is kind kind of showing us the flow of the thread, like where did the thread come from?

156
00:10:46,830 --> 00:10:54,400
What was its path to getting here and the top most entry in this stack view?

157
00:10:54,410 --> 00:10:58,530
Here is the most recent place that the thread has been.

158
00:10:58,550 --> 00:11:02,480
OK, so we're currently highlighted in blue online.

159
00:11:02,480 --> 00:11:11,240
12 inside of the guessing game class and down here we see we're in the guest method line 12 of the guessing

160
00:11:11,240 --> 00:11:12,920
game class, right?

161
00:11:13,430 --> 00:11:22,880
And even the package there and we can see previously we were in the test for wrong guesses method on

162
00:11:22,880 --> 00:11:26,570
line 64 of the guessing game test.

163
00:11:26,750 --> 00:11:32,960
And if I click on this, it actually takes us back to where the thread previously was.

164
00:11:33,800 --> 00:11:37,730
This line right here where you can see we're passing in a negative three.

165
00:11:37,850 --> 00:11:41,600
Now this line isn't like re re executing or anything.

166
00:11:41,600 --> 00:11:47,720
This is just taking us back to what things looked like when we were here previously.

167
00:11:47,730 --> 00:11:53,690
So you're almost like freezing time so that you can just kind of inspect how are things going?

168
00:11:53,900 --> 00:11:59,270
For some reason, I get this picture in my mind of what was the name Neo from The Matrix.

169
00:11:59,780 --> 00:12:04,940
When he's in bullet time, you know, time slows down and he's able to see individual bullets.

170
00:12:05,150 --> 00:12:11,750
We're kind of in programmer bullet time right now where we're able to see what's going on at such a

171
00:12:11,750 --> 00:12:13,610
slow rate of speed, right?

172
00:12:13,820 --> 00:12:16,880
That, well, technically, it's nothing's going on right now.

173
00:12:16,880 --> 00:12:18,500
We're just pausing, right?

174
00:12:18,500 --> 00:12:21,170
So we've halted the simulation, if you will.

175
00:12:21,200 --> 00:12:21,560
All right.

176
00:12:21,890 --> 00:12:27,770
So I'm going to click back on this top line, though, to go back to where the threat is currently waiting

177
00:12:27,770 --> 00:12:28,340
for us.

178
00:12:28,370 --> 00:12:28,820
OK.

179
00:12:30,020 --> 00:12:30,250
All right.

180
00:12:30,260 --> 00:12:34,790
So before we step through or over any of these lines, I kind of want to get my bearings here.

181
00:12:35,030 --> 00:12:41,660
So we know that what was supposed to happen in that test was that we were supposed to receive a method

182
00:12:41,660 --> 00:12:46,370
saying you didn't get it and you've had four tries and that the game is over.

183
00:12:46,580 --> 00:12:52,100
So I want to kind of find, where is that text and then kind of work my way backward from there to figure

184
00:12:52,100 --> 00:12:56,870
out, OK, what is supposed to happen in order for that text to be output, right?

185
00:12:57,170 --> 00:13:00,770
And it's kind of jumping out at me right here on Line 17.

186
00:13:00,980 --> 00:13:08,170
You didn't get it and you've had X number or the number of tries, right, game over.

187
00:13:08,180 --> 00:13:11,000
So this is the line that we want.

188
00:13:11,480 --> 00:13:18,920
And so I think what should be happening is that this conditional on Line 16 is supposed to evaluate

189
00:13:18,950 --> 00:13:27,740
to true, which would cause the thread to jump into Line 17 and execute this and then set this value

190
00:13:27,740 --> 00:13:29,210
on the response.

191
00:13:29,510 --> 00:13:34,610
And then that response should be returned, but that's not currently happening.

192
00:13:34,760 --> 00:13:43,670
So with that in mind, as we step over these next few lines, we want to determine if, in fact, this

193
00:13:43,670 --> 00:13:44,570
conditional.

194
00:13:44,790 --> 00:13:49,750
Is evaluating to true or false, and if it is false, why is it false, right?

195
00:13:49,770 --> 00:13:51,000
That's what we're here to figure out.

196
00:13:51,030 --> 00:13:57,750
OK, so coming back up to Line 12, which is where the threat currently is, we're going to let it step

197
00:13:57,930 --> 00:14:01,440
over the next few lines rather than stepping in.

198
00:14:01,590 --> 00:14:05,740
Although in this particular line, there is no method call here.

199
00:14:05,760 --> 00:14:11,790
So stepping over or stepping in would actually be the same thing as I have just shown here by actually

200
00:14:11,790 --> 00:14:15,930
stepping in from line 12, that just took me down to Line 13.

201
00:14:16,140 --> 00:14:21,990
However, you should be very mindful of the difference between stepping over versus stepping in.

202
00:14:22,620 --> 00:14:27,990
Oftentimes, if you step in in the wrong places, that will take you down a wild goose chase.

203
00:14:28,050 --> 00:14:34,620
And I've seen many novice developers who maybe didn't really fully understand the difference between

204
00:14:34,620 --> 00:14:39,270
stepping over and stepping in, and they just step into all kinds of crazy code, which I'm going to

205
00:14:39,270 --> 00:14:42,750
show you in a moment why that's just a terrible idea to do.

206
00:14:43,560 --> 00:14:43,920
All right.

207
00:14:43,920 --> 00:14:46,620
So we're now on this next line here.

208
00:14:47,160 --> 00:14:48,600
And what are we doing here?

209
00:14:48,610 --> 00:14:54,780
We're evaluating the counter variable and we're saying if the counter equals one, which it does not.

210
00:14:54,900 --> 00:15:03,600
And by the way, so one other thing to notice here now the ID is even showing us the value of this evaluation

211
00:15:03,600 --> 00:15:03,750
here.

212
00:15:03,750 --> 00:15:06,840
Counter equals one this this equals false bit here.

213
00:15:07,020 --> 00:15:13,680
That's not anything that we typed in the I.D. is is is adding that in there for us to tell us, hey,

214
00:15:13,920 --> 00:15:15,930
counter equals one is false.

215
00:15:16,170 --> 00:15:22,650
This expression is evaluating to false so that we don't have to figure that out on our own, even though

216
00:15:22,650 --> 00:15:23,220
we could.

217
00:15:23,220 --> 00:15:24,840
And I will show you that later.

218
00:15:25,050 --> 00:15:25,310
All right.

219
00:15:25,320 --> 00:15:26,820
So it's telling us that that's false.

220
00:15:26,970 --> 00:15:34,440
And since that is false, we already know that this word try is not going to be returned from this ternary

221
00:15:34,440 --> 00:15:35,250
expression.

222
00:15:35,430 --> 00:15:42,480
And instead, the word tries is going to be returned from this expression and therefore set on this

223
00:15:42,480 --> 00:15:44,490
try text variable here.

224
00:15:44,520 --> 00:15:44,880
All right.

225
00:15:45,180 --> 00:15:54,000
So I'm going to step over this line F8 and notice now that I've stepped over Line 13 and I said that

226
00:15:54,000 --> 00:15:58,590
the string tries would be set on the try text variable here.

227
00:15:58,710 --> 00:16:00,330
We can see that over here now.

228
00:16:00,420 --> 00:16:06,120
Now that I've actually stepped over the line, the line has executed, so the line doesn't execute until

229
00:16:06,120 --> 00:16:07,710
after you step over it.

230
00:16:07,740 --> 00:16:08,190
OK.

231
00:16:08,430 --> 00:16:13,290
So right now I'm on Line 14, but line 14 has not executed yet.

232
00:16:13,560 --> 00:16:16,440
Not until I step in or step over something.

233
00:16:17,900 --> 00:16:25,070
So over here, we're now seeing that the tri text variable is currently set to the word tries.

234
00:16:25,190 --> 00:16:31,640
So isn't that really convenient to be able to see in real time what the program is actually doing?

235
00:16:32,060 --> 00:16:33,020
Super useful.

236
00:16:33,290 --> 00:16:33,560
All right.

237
00:16:33,560 --> 00:16:38,840
So now we're online 14, and now I need to decide, do I want to step over or step in?

238
00:16:39,170 --> 00:16:44,030
Well, so here's the thing if I step in, where do you think it's going to go?

239
00:16:44,060 --> 00:16:45,710
Take take a good look at this.

240
00:16:46,610 --> 00:16:46,970
All right.

241
00:16:46,980 --> 00:16:54,830
So if I step in, the thread is going to jump into the format straight into the format method here.

242
00:16:55,160 --> 00:16:58,370
So let me just tell you right now, that's not useful to me.

243
00:16:58,580 --> 00:17:03,020
Let me let me make a little space here, by the way, I'm going to close this pain.

244
00:17:03,350 --> 00:17:03,830
Here we go.

245
00:17:03,950 --> 00:17:04,970
Got a little more room now.

246
00:17:05,000 --> 00:17:12,560
OK, now stepping into the string, that format method is not useful to me for for a few reasons.

247
00:17:13,580 --> 00:17:19,730
First off, and most importantly, the string, that format method is not code that I wrote.

248
00:17:20,270 --> 00:17:27,950
You should generally assume that code that you did not write that that came with the Java or was written

249
00:17:27,950 --> 00:17:32,690
by a third party library that you brought in to your code, which I'm not using here.

250
00:17:32,690 --> 00:17:37,070
But if I were, you should assume that that code doesn't have any problems.

251
00:17:37,280 --> 00:17:39,200
Occasionally, it might like.

252
00:17:39,800 --> 00:17:40,340
I don't know.

253
00:17:40,370 --> 00:17:47,750
Zero point zero zero zero one percent of the time there could be a legitimate bug in third party code

254
00:17:47,760 --> 00:17:54,830
that you did not write, but don't send yourself on a wild goose chase, jumping down in every nook

255
00:17:54,830 --> 00:17:57,200
and cranny of all code everywhere.

256
00:17:57,200 --> 00:17:58,700
Looking for what the problem is?

257
00:17:58,850 --> 00:18:05,270
You'll lose sight really quickly of and focus of what you're really here to find.

258
00:18:05,300 --> 00:18:05,660
OK.

259
00:18:05,870 --> 00:18:10,440
So we can just assume there's not a problem with the string that format method.

260
00:18:10,460 --> 00:18:10,880
OK?

261
00:18:11,240 --> 00:18:15,360
And therefore, we don't want to step in to that method.

262
00:18:15,380 --> 00:18:17,000
That's a waste of our time.

263
00:18:17,510 --> 00:18:21,920
So already, I know that I want to step over this line.

264
00:18:21,950 --> 00:18:22,400
OK.

265
00:18:22,430 --> 00:18:25,550
I don't want to jump into that into that method there.

266
00:18:25,940 --> 00:18:26,990
I want to step over it.

267
00:18:27,080 --> 00:18:29,510
So I'm going to do another F8.

268
00:18:30,380 --> 00:18:30,990
There we go.

269
00:18:31,010 --> 00:18:37,850
And now I can see the try text is still tries and I can also see winning text is said to you.

270
00:18:37,850 --> 00:18:42,170
Got it in four tries and the counter is set to four.

271
00:18:42,200 --> 00:18:42,500
Right?

272
00:18:43,100 --> 00:18:43,490
All right.

273
00:18:43,520 --> 00:18:49,100
We're not really doing anything here other than just creating an initializing the response variable

274
00:18:49,100 --> 00:18:49,910
to null.

275
00:18:50,090 --> 00:18:51,860
So I will step over that.

276
00:18:52,580 --> 00:18:55,220
And now we can see that over here, response is null.

277
00:18:55,580 --> 00:18:59,540
So now we're at the line in question, right?

278
00:18:59,600 --> 00:19:08,540
So we know that for the program to function correctly, we need this conditional to evaluate to true

279
00:19:08,960 --> 00:19:11,120
so that we will step into line.

280
00:19:11,120 --> 00:19:11,840
17.

281
00:19:11,850 --> 00:19:14,900
So let's just take a look at this and see what's going on here.

282
00:19:15,410 --> 00:19:22,460
So we already can see that this first little bit of the conditional expression counter equals two,

283
00:19:22,550 --> 00:19:27,560
which is to say, does the counter equal to because we're using the equals operator here, right?

284
00:19:27,860 --> 00:19:33,380
Well, the ID is already telling us, since we're in debug mode, that this is going to evaluate to

285
00:19:33,380 --> 00:19:34,250
false right.

286
00:19:34,460 --> 00:19:36,890
And we can see that in a few different ways.

287
00:19:37,070 --> 00:19:40,100
We can see that the value of counter.

288
00:19:40,190 --> 00:19:41,510
Well, a couple of things here.

289
00:19:41,570 --> 00:19:47,450
If I hover my cursor on the word counter or the variable counter, I can see its value right there.

290
00:19:47,780 --> 00:19:53,000
It's for another way I could see it is to jump over here to the right hand side.

291
00:19:53,210 --> 00:19:58,460
And again, I can see that counter is equal to four, so four does not equal to and that's why this

292
00:19:58,460 --> 00:19:59,090
is false.

293
00:19:59,270 --> 00:20:05,390
So this is to say that if you have made four guesses, right, that's what this part is saying.

294
00:20:05,690 --> 00:20:15,140
And this two ampersand together means a logical and right, and the number that you're guessing are,

295
00:20:15,140 --> 00:20:17,980
you guessed, is wrong, essentially right.

296
00:20:17,990 --> 00:20:25,460
The number that you guessed, which in this case is a negative three, does not match the actual random

297
00:20:25,460 --> 00:20:25,970
number.

298
00:20:26,270 --> 00:20:29,430
Now that's a method call to determine that.

299
00:20:29,450 --> 00:20:29,810
OK.

300
00:20:30,050 --> 00:20:36,500
So we're not getting the actual value shown to us if we hover over this, but we can actually find out

301
00:20:36,500 --> 00:20:41,090
what that value is going to be in a couple of ways that are very, very nice.

302
00:20:41,510 --> 00:20:50,360
So if I select this method, call here, I can right click on it and I can come down here to evaluate

303
00:20:50,360 --> 00:20:51,320
expression.

304
00:20:51,920 --> 00:20:59,450
And what that's going to do is it's going to have the I.D. essentially create a separate thread.

305
00:20:59,960 --> 00:21:07,250
OK, a temporary, separate thread that's just going to call that method and then give us the results

306
00:21:07,250 --> 00:21:07,580
of it.

307
00:21:07,730 --> 00:21:09,680
So I'm going to actually click this.

308
00:21:09,980 --> 00:21:10,400
All right.

309
00:21:10,910 --> 00:21:15,020
And it's just giving you another opportunity to see like, what am I about to do here?

310
00:21:15,380 --> 00:21:16,910
And let me let me.

311
00:21:17,290 --> 00:21:19,240
Resized that so you can see what's going on.

312
00:21:19,270 --> 00:21:26,770
OK, so this is going to create another temporary thread to run just this method, given the current

313
00:21:26,770 --> 00:21:28,660
state of this class, though.

314
00:21:28,930 --> 00:21:31,570
So I'm going to click, evaluate and look at that.

315
00:21:32,320 --> 00:21:33,620
I get back a three.

316
00:21:34,270 --> 00:21:38,800
So get random number is currently returning the value of three.

317
00:21:39,280 --> 00:21:47,680
So I can now close this and now I can come back up here and I can see, OK, so my guest number is negative

318
00:21:47,680 --> 00:21:48,160
three.

319
00:21:48,160 --> 00:21:53,290
But the get random number method is currently returning a positive three.

320
00:21:53,530 --> 00:21:56,980
So those don't match, which means you've made a wrong guess.

321
00:21:57,250 --> 00:22:03,550
And so if I just kind of revisit what is this conditional really saying, it's currently saying if we

322
00:22:03,550 --> 00:22:14,260
have made two guesses and this most recent guess is wrong, then go ahead and run line 17, right?

323
00:22:14,650 --> 00:22:22,510
But actually, we've made four guesses now and the last guess is wrong.

324
00:22:22,750 --> 00:22:27,370
And so we're not going to end up making it into line 17.

325
00:22:27,380 --> 00:22:30,100
So I think we've found out where the problem is.

326
00:22:30,370 --> 00:22:32,830
This number here should be four.

327
00:22:33,190 --> 00:22:37,900
So I'm going to go ahead and actually just change it right there.

328
00:22:38,080 --> 00:22:38,410
All right.

329
00:22:38,420 --> 00:22:47,320
So now that we've changed this value from two to four in order to try to fix this bug that we have,

330
00:22:47,320 --> 00:22:53,530
we're going to need to do one thing before we can proceed with the rest of the execution of the program.

331
00:22:54,190 --> 00:23:02,110
So you can't just change code in the middle of a debugging session and just expect that everything will

332
00:23:02,110 --> 00:23:03,070
continue to work.

333
00:23:03,070 --> 00:23:10,060
And the reason you can't do that is bear in mind, Java is a compiled programming language, right?

334
00:23:10,330 --> 00:23:17,950
That means that this text that we're seeing here on the screen all has to be translated or compiled

335
00:23:18,250 --> 00:23:23,830
into machine code, essentially right, which we call in Java bytecode.

336
00:23:24,340 --> 00:23:25,720
It's got to be compiled.

337
00:23:25,960 --> 00:23:33,580
And so when we make changes to the code here, those changes don't actually take effect until two things

338
00:23:33,580 --> 00:23:35,680
happen in a in a debugging session.

339
00:23:35,920 --> 00:23:44,020
One, the code has to be recompiled or the class in this case has to be recompiled and to that recompiled

340
00:23:44,020 --> 00:23:51,190
code then needs to be reloaded into the memory right in, in this case, reloaded into the debugging

341
00:23:51,190 --> 00:23:52,420
session itself.

342
00:23:52,870 --> 00:23:55,210
So those two things must happen first.

343
00:23:55,300 --> 00:23:55,720
OK.

344
00:23:56,080 --> 00:23:59,330
So in order to do that, there's several ways we can do it.

345
00:23:59,350 --> 00:24:05,680
We can do a command F9 to just rebuild if I come up here to the build menu.

346
00:24:06,070 --> 00:24:07,210
You'll see all the options here.

347
00:24:07,210 --> 00:24:08,220
Build Project, right?

348
00:24:08,230 --> 00:24:12,310
We've used this before, or we can just build the guessing game.

349
00:24:12,580 --> 00:24:18,970
Now, this first option will rebuild any and all classes that have changed in terms of their source

350
00:24:18,970 --> 00:24:19,290
code.

351
00:24:19,300 --> 00:24:23,230
So in this case, we've only made one change just in this file here.

352
00:24:23,230 --> 00:24:26,870
And so this would be the only file that actually gets recompiled.

353
00:24:27,130 --> 00:24:33,740
Or you could specifically tell the IDE to only recompile just this one file.

354
00:24:34,330 --> 00:24:39,320
So right now, all three of these options would be more or less equivalent to each other.

355
00:24:39,340 --> 00:24:39,760
OK.

356
00:24:40,390 --> 00:24:45,880
But that's what we need to do first in order to get this little code change that we've made to start

357
00:24:45,880 --> 00:24:46,720
to take effect.

358
00:24:46,900 --> 00:24:47,920
So I'm going to do that now.

359
00:24:47,920 --> 00:24:52,900
I'm just I'm just going to do a command F9 or control F9 on Windows and Linux.

360
00:24:53,110 --> 00:24:56,440
And you can see down here that a rebuild took place.

361
00:24:56,620 --> 00:25:00,610
And now that this class has been rebuilt, we're being prompted.

362
00:25:00,610 --> 00:25:02,330
Some classes have been changed.

363
00:25:02,350 --> 00:25:04,360
Reload changed classes now.

364
00:25:04,690 --> 00:25:07,030
So do we want to reload those classes now?

365
00:25:07,090 --> 00:25:10,870
Yes, we do want those to be reloaded now, so I'll click the reload.

366
00:25:11,910 --> 00:25:19,590
Now, notice one thing in particular, since we reloaded, the variable debug data that we had is now

367
00:25:19,920 --> 00:25:29,250
unavailable and and basically the debugging session is in somewhat of an unknown state, if you will.

368
00:25:29,280 --> 00:25:29,700
OK.

369
00:25:30,090 --> 00:25:37,050
And so we wouldn't want to just proceed with our debugging session from this point because we're not

370
00:25:37,050 --> 00:25:39,660
in a well defined state at the moment.

371
00:25:39,990 --> 00:25:41,520
So there's something we can do about that now.

372
00:25:41,520 --> 00:25:46,830
The easiest thing we could do, of course, is to stop the debugging session and then restart everything.

373
00:25:47,070 --> 00:25:54,240
But imagine if you had been in a debugging session where you were tracing through many method calls

374
00:25:54,240 --> 00:26:00,450
across many classes and it took you a while to get to wherever you currently were.

375
00:26:00,780 --> 00:26:03,830
You might not want to have to go through all of that again.

376
00:26:03,840 --> 00:26:09,540
You might want to just make the little surgical change like what we've made here and then just pick

377
00:26:09,540 --> 00:26:12,930
right back up from more or less where you left off, right?

378
00:26:13,260 --> 00:26:15,990
Well, you can do that in the debugger, and I want to show you how.

379
00:26:16,410 --> 00:26:22,980
So if we come down here to this lower left pane where we're basically seeing the path that we've taken

380
00:26:23,130 --> 00:26:29,760
from the test for wrong guesses method in the guessing game test class to where we are now, right?

381
00:26:30,090 --> 00:26:33,570
Each of these entries is actually called a frame.

382
00:26:33,930 --> 00:26:34,380
OK.

383
00:26:34,620 --> 00:26:43,050
And this top frame here represents the fact that we are currently in the guest method of the guessing

384
00:26:43,050 --> 00:26:44,070
game class.

385
00:26:44,100 --> 00:26:44,490
OK.

386
00:26:44,850 --> 00:26:52,440
So what we can do is we can actually drop this frame, which will allow us to just kind of restart not

387
00:26:52,440 --> 00:26:57,840
the entire debugging session, but just from the point where we were about to enter this frame.

388
00:26:57,870 --> 00:26:58,320
OK.

389
00:26:58,530 --> 00:26:59,390
That's what we can do.

390
00:26:59,400 --> 00:27:05,700
We can kind of just restart from this one frame rather than having to restart the entire program.

391
00:27:05,700 --> 00:27:11,070
Now, in our case, we only have two frames of note anyway, so it doesn't really matter.

392
00:27:11,160 --> 00:27:18,210
But like I said, if you had been 10 frames deep and you only needed to reload the last frame and it

393
00:27:18,210 --> 00:27:22,920
took you a while to get there, you don't want to have to go through all 10 frames again, right?

394
00:27:23,130 --> 00:27:29,070
OK, so to drop this frame, all we need to do is come up here and there's a little icon right there.

395
00:27:29,070 --> 00:27:30,250
Drop frame.

396
00:27:30,270 --> 00:27:30,780
OK.

397
00:27:31,140 --> 00:27:33,900
And so this will allow us to basically.

398
00:27:34,750 --> 00:27:38,440
Restart from right before we jumped into this frame.

399
00:27:38,470 --> 00:27:41,380
OK, now one thing I want to point out before we do that.

400
00:27:41,590 --> 00:27:45,700
Let us take note of the value of the counter variable.

401
00:27:45,910 --> 00:27:48,820
Currently counter is set to four, OK?

402
00:27:49,330 --> 00:27:52,350
Keep note of that for when we get back here again.

403
00:27:52,360 --> 00:27:53,920
OK, and we'll take another look at that.

404
00:27:54,490 --> 00:27:56,230
All right, so let's drop this frame.

405
00:27:56,230 --> 00:27:58,420
I'm going to click the drop frame button here.

406
00:27:59,650 --> 00:28:05,440
And so all it did is it just dropped us back to the previous frame and that that that top frame that

407
00:28:05,440 --> 00:28:08,170
we were in is gone now, so we basically deleted it.

408
00:28:08,320 --> 00:28:14,650
We kind of told the debugger and the thread pretend like we never went into that into that last frame

409
00:28:14,650 --> 00:28:18,730
and just drop us back into the previous frame, which is right here, right?

410
00:28:18,940 --> 00:28:23,110
And so now we kind of get to start over again from this point.

411
00:28:23,230 --> 00:28:28,630
And so again, I will just step into this game guess method with an S7.

412
00:28:29,410 --> 00:28:33,070
So currently, now we're back in the guest's method.

413
00:28:33,070 --> 00:28:39,970
And if we take a look at this counter variable, we'll see that counter currently is equal to four.

414
00:28:40,180 --> 00:28:45,190
Now keep in mind, we're highlighted on line 12, so we haven't executed Line 12 yet.

415
00:28:45,220 --> 00:28:46,450
We're about two, right?

416
00:28:46,780 --> 00:28:48,760
So it's currently set to four.

417
00:28:49,300 --> 00:28:57,760
If you may have noticed when we entered this frame or the guess method previously counter was set to

418
00:28:57,760 --> 00:28:58,360
three.

419
00:28:58,630 --> 00:28:59,110
OK?

420
00:28:59,200 --> 00:29:06,070
So one thing of note here is that even though we have dropped this frame and come back in to it, this

421
00:29:06,070 --> 00:29:12,040
counter variable has retained its value from the previous time that we entered here.

422
00:29:12,340 --> 00:29:19,990
And the reason for that is because this is a field of the class and we did not restart the class or

423
00:29:19,990 --> 00:29:21,910
remake the class or anything.

424
00:29:22,060 --> 00:29:26,530
All we've done is just reenter this guess method here.

425
00:29:26,710 --> 00:29:33,100
And so in the previous time that we entered this guess method, we had already gone past Line 12, where

426
00:29:33,100 --> 00:29:38,500
we incremented the counter variable from three to four, which is why it is currently four.

427
00:29:38,560 --> 00:29:40,060
And that variable is up here, right?

428
00:29:40,060 --> 00:29:41,920
It's a field of this class.

429
00:29:42,130 --> 00:29:48,250
So dropping a frame does not reset the values of fields in a class.

430
00:29:48,700 --> 00:29:57,250
All it does at best is to reset all of the local variables in a method, right?

431
00:29:57,250 --> 00:30:02,770
Because we're re-entering this method and local variables within methods lose their values when a thread

432
00:30:02,770 --> 00:30:03,790
leaves that method.

433
00:30:04,120 --> 00:30:08,170
And we in effect, have left the method and then come back in for a new pass.

434
00:30:08,200 --> 00:30:08,530
Right.

435
00:30:08,860 --> 00:30:15,670
So this is noteworthy because in order to properly simulate the scenario that we are trying to play

436
00:30:15,670 --> 00:30:23,830
through here, we need counter to right now be set to three OK, so we can do one or two things.

437
00:30:23,830 --> 00:30:29,650
We can either change it right now back to three, or we can move past this line and then change it from

438
00:30:29,650 --> 00:30:30,740
five back to four.

439
00:30:30,760 --> 00:30:32,410
So take your pick, right?

440
00:30:32,590 --> 00:30:35,290
But since we're talking about it now, let's go ahead and just change it now.

441
00:30:35,380 --> 00:30:37,330
And you can actually do this in two places.

442
00:30:37,330 --> 00:30:40,870
You can do it here by clicking on this little dropdown there, right?

443
00:30:41,200 --> 00:30:43,960
Or I'm going to click outside of there to let that go away.

444
00:30:44,110 --> 00:30:50,320
Or you can come down here to this little area called variables or the minus cutoff, and you can come

445
00:30:50,320 --> 00:30:53,690
down here to the same counter variable listed down here.

446
00:30:53,710 --> 00:30:56,920
You can click on it at press two, and you can change it that way.

447
00:30:56,930 --> 00:31:00,430
So I guess I'm going to do it that way for now, but there's no difference.

448
00:31:00,910 --> 00:31:08,770
So I can press off two and then I can replace the four with a three and then hit return to set that.

449
00:31:08,920 --> 00:31:14,170
And so you can see now that that value got changed up here as well, right?

450
00:31:14,200 --> 00:31:18,250
So we're seeing it changed everywhere now because it's the same variable everywhere.

451
00:31:18,460 --> 00:31:18,810
All right.

452
00:31:18,820 --> 00:31:27,070
And so now I could proceed to step over all of these lines until I get to line 16 with an f eight or

453
00:31:27,070 --> 00:31:29,500
with the step over button right there.

454
00:31:29,740 --> 00:31:39,010
Or I could put my cursor down here on line 16, anywhere on line 16, and then I could choose to have

455
00:31:39,010 --> 00:31:44,930
the debugger simply run all of these lines until it gets to line 16.

456
00:31:44,950 --> 00:31:46,030
There's an option for that.

457
00:31:46,240 --> 00:31:48,370
It is this option right here.

458
00:31:48,370 --> 00:31:56,080
This little this little icon run to cursor or I could do an option F9 or alt F9, OK?

459
00:31:56,260 --> 00:32:01,210
And that would tell the debugger to run down to the line where my cursor currently is.

460
00:32:01,240 --> 00:32:03,130
So for now, I'll just click this button.

461
00:32:05,450 --> 00:32:05,780
All right.

462
00:32:05,810 --> 00:32:12,710
And so now the threat is waiting for me online 16, and now we're back to where we were right before

463
00:32:12,710 --> 00:32:15,920
we recompiled and dropped the frame, right?

464
00:32:16,250 --> 00:32:21,890
And then if we check counter now is equal to four, right because it got incremented, we see it down

465
00:32:21,890 --> 00:32:22,280
here.

466
00:32:22,520 --> 00:32:23,960
And we also see it there.

467
00:32:24,080 --> 00:32:25,850
And we also see it over here, right?

468
00:32:26,090 --> 00:32:27,530
And we can still change that.

469
00:32:28,490 --> 00:32:35,720
Now, some of you might possibly be a little bit confused by the question of did we need to recompile

470
00:32:35,750 --> 00:32:38,870
when we changed the value of counter?

471
00:32:38,870 --> 00:32:40,310
And the answer is no.

472
00:32:40,310 --> 00:32:46,880
We don't need to recompile when we're changing the value of a variable because that's not code that's

473
00:32:46,880 --> 00:32:48,320
in memory, OK?

474
00:32:48,770 --> 00:32:50,360
We only need to change.

475
00:32:50,600 --> 00:32:53,420
So keep in mind, the idea is just showing us this.

476
00:32:53,420 --> 00:32:54,740
This isn't part of our code.

477
00:32:55,040 --> 00:33:02,390
This is just some metadata, if you will, that the I.D. is showing us for convenience sake because

478
00:33:02,390 --> 00:33:04,070
we are in debug mode.

479
00:33:04,070 --> 00:33:05,870
OK, it's not part of the code, right?

480
00:33:06,290 --> 00:33:08,630
This over here is the code right.

481
00:33:08,660 --> 00:33:15,560
So if I changed this zero to something else and I wanted that to take effect, I would need to recompile

482
00:33:15,920 --> 00:33:22,340
OK if I changed any of these lines that we typed originally any of them at all, including that for

483
00:33:22,340 --> 00:33:24,530
there, I would need to recompile.

484
00:33:24,800 --> 00:33:34,550
But changing a value that's in a variable that we can access like these here, those values can be changed

485
00:33:34,550 --> 00:33:35,930
without re compiling.

486
00:33:36,650 --> 00:33:42,770
Now sometimes, though, to have them take effect, you may need to drop the frame and get back in again.

487
00:33:42,770 --> 00:33:48,890
You may have to do that, but you won't need to recompile if the only change you're making is simply

488
00:33:48,890 --> 00:33:52,010
to change the value of a variable.

489
00:33:52,040 --> 00:33:52,490
OK.

490
00:33:52,790 --> 00:33:53,200
All right.

491
00:33:53,210 --> 00:33:59,090
So anyway, see, so we changed that before we dropped the frame and now we changed the counter, and

492
00:33:59,090 --> 00:34:00,410
I think we're good to go here.

493
00:34:00,980 --> 00:34:07,370
So I'm going to step over this line 16.

494
00:34:07,370 --> 00:34:13,010
And hopefully now what should happen is we will jump into line 17.

495
00:34:13,610 --> 00:34:16,280
So I will step over that with an f eight.

496
00:34:16,670 --> 00:34:17,540
And there we go.

497
00:34:17,780 --> 00:34:24,530
And now we're hitting Line 17, which the code clearly wasn't hitting before when we were testing whether

498
00:34:24,530 --> 00:34:27,230
or not counter was equal to two, right?

499
00:34:27,380 --> 00:34:28,260
But now we are.

500
00:34:28,640 --> 00:34:29,030
OK.

501
00:34:29,180 --> 00:34:32,600
So I'm pretty satisfied that this is now going to work.

502
00:34:32,600 --> 00:34:39,740
And so if I want to, I don't have to keep stepping over or in any of these lines, I can just let the

503
00:34:39,740 --> 00:34:41,990
rest of the program just run OK.

504
00:34:42,230 --> 00:34:48,440
And probably the easiest way for me to do that is to come over here to this green play looking button

505
00:34:48,440 --> 00:34:51,200
here and just click that to resume the program.

506
00:34:51,560 --> 00:34:56,810
Assuming you have no more breakpoint set anywhere in the rest of the program, we'll just run to the

507
00:34:56,810 --> 00:35:00,940
end or in this case, the rest of the test, sorry, will run until the end.

508
00:35:00,950 --> 00:35:02,930
OK, so I'm going to click that now.

509
00:35:05,150 --> 00:35:06,410
All right, there we go.

510
00:35:06,590 --> 00:35:11,510
And then I will click on the console tab here, which is partially hidden, though we can see right

511
00:35:11,510 --> 00:35:15,740
here Test Pass, right tests best one and we were only running one test.

512
00:35:16,040 --> 00:35:20,000
So if I test, if I click on console, I can see that test right there.

513
00:35:20,030 --> 00:35:23,180
I've got a green checkmark now, and so we're good.

514
00:35:23,240 --> 00:35:24,980
And I can double click on it even.

515
00:35:25,220 --> 00:35:27,380
And that's looking good there as well.

516
00:35:27,410 --> 00:35:34,730
OK, now if I want to get rid of a break point, the easiest thing I can do is simply click it one time,

517
00:35:35,060 --> 00:35:40,050
just as I put it there by clicking once I can toggle it off or get rid of it by clicking it again.

518
00:35:40,070 --> 00:35:41,240
OK, so I'll click.

519
00:35:41,240 --> 00:35:44,330
Once that puts a breakpoint there, I click again.

520
00:35:44,480 --> 00:35:45,410
That removes it.
