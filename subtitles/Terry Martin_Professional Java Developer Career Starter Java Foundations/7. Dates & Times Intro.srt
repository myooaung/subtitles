1
00:00:00,480 --> 00:00:08,190
All right, so in this lesson, we're going to take a deeper dive into how Java handles dates and times.

2
00:00:08,520 --> 00:00:14,100
Now we've already been playing around with a little tiny bit of this functionality throughout this entire

3
00:00:14,100 --> 00:00:21,120
course, any time we've needed to model a date in particular by using the local date class.

4
00:00:21,450 --> 00:00:28,740
But now we'll dig in a little deeper and see a lot more of the power that exists in this date time API

5
00:00:28,740 --> 00:00:35,910
that Java has, by the way, so quick little history on Java and how it has handled dates and times

6
00:00:35,910 --> 00:00:36,600
in the past.

7
00:00:36,810 --> 00:00:39,810
There's been a bit of controversy there over the years.

8
00:00:40,080 --> 00:00:45,270
I would say there have been three different regimes of how Java handles dates and times.

9
00:00:45,510 --> 00:00:53,670
There was a class called Java Dot You till date and it had some issues and there was Java dot util dot

10
00:00:53,670 --> 00:00:57,870
calendar that attempted to fix some of those issues.

11
00:00:58,770 --> 00:01:01,500
But there was still a lot of controversy.

12
00:01:01,800 --> 00:01:07,950
And so there were a few third party libraries that tried to really fix the issues with handling dates

13
00:01:07,950 --> 00:01:08,640
and time.

14
00:01:09,000 --> 00:01:17,010
And one of these libraries, called Joda Time, ended up becoming so successful that when Java eight

15
00:01:17,010 --> 00:01:24,060
was created, the creators decided to basically just roll a lot of the functionality from the go to

16
00:01:24,060 --> 00:01:31,500
time library, which was a third party library not directly affiliated with the development of the Java

17
00:01:31,500 --> 00:01:32,490
Developer Kit.

18
00:01:33,060 --> 00:01:34,690
They decided to roll that in.

19
00:01:34,710 --> 00:01:42,180
And so now the most modern implementation of handling dates and times in Java as of Java version eight

20
00:01:42,480 --> 00:01:49,600
is heavily influenced by, some might even say, basically copied from the Joda Time library.

21
00:01:49,620 --> 00:01:55,470
So towards the end of this lesson, I will talk a little bit more about what some of those issues were

22
00:01:55,710 --> 00:02:04,080
that caused the maintainers and developers of Java to create the new Java eight date and time API.

23
00:02:04,920 --> 00:02:09,150
All right, so let's jump in here, though, and play with the dates and things.

24
00:02:09,450 --> 00:02:14,400
So I think what we'll do is let's go ahead and just create another class.

25
00:02:14,550 --> 00:02:20,310
So I'm going to open up my project view here, and I think in this data store thing, this is fine.

26
00:02:21,210 --> 00:02:27,870
I will just highlight the data store package there and then do a command in and create a new Java class.

27
00:02:28,050 --> 00:02:31,130
And I guess I'll call this one time.

28
00:02:33,390 --> 00:02:34,050
Test.

29
00:02:35,610 --> 00:02:36,150
Enter.

30
00:02:36,750 --> 00:02:37,120
All right.

31
00:02:37,140 --> 00:02:41,160
And I'll make a new line SVM for public static void main.

32
00:02:41,190 --> 00:02:41,580
All right.

33
00:02:41,580 --> 00:02:43,980
Here we go, and then let me close that down.

34
00:02:44,970 --> 00:02:48,420
OK, so let's start with the basics, which we've already done before.

35
00:02:48,540 --> 00:02:53,130
So let's say that we just want to represent the date today.

36
00:02:53,430 --> 00:02:53,790
Right?

37
00:02:54,090 --> 00:02:58,650
So we can do that by creating an instance of a local date.

38
00:02:59,070 --> 00:03:00,000
Just like so.

39
00:03:00,150 --> 00:03:04,260
And keep in mind that that is under the Java that time package there.

40
00:03:04,260 --> 00:03:06,420
But the idea will know what you're talking about.

41
00:03:06,750 --> 00:03:13,920
And then if we just do a dot now, that will give us the date right now and so we can print that.

42
00:03:13,920 --> 00:03:20,160
By the way, I want to show you a little thing that I actually just realized exists in intelligence

43
00:03:20,160 --> 00:03:20,850
myself.

44
00:03:21,480 --> 00:03:22,110
Quite useful.

45
00:03:22,110 --> 00:03:25,800
So let's say that we want to print that that local date now.

46
00:03:25,980 --> 00:03:26,310
Right?

47
00:03:26,340 --> 00:03:29,040
I normally wrap that inside of a system dot out.

48
00:03:29,280 --> 00:03:30,060
We'll watch this.

49
00:03:30,060 --> 00:03:31,080
I can do a period.

50
00:03:31,240 --> 00:03:38,720
So you T. And this is, I guess, a little macro within intelligence, and that's going to take our

51
00:03:38,730 --> 00:03:44,010
expression and wrap it inside of a system that out that print line, that's what it expands out to very,

52
00:03:44,010 --> 00:03:44,730
very useful.

53
00:03:45,840 --> 00:03:53,220
Similarly, there's so you f, which sets us up for print and then we can, you know, put our little

54
00:03:53,940 --> 00:03:55,920
format string there or whatever.

55
00:03:57,050 --> 00:03:57,410
And.

56
00:04:01,330 --> 00:04:05,560
And there's the big thing now you may have seen me use this before, I can't remember if I've used it

57
00:04:05,590 --> 00:04:12,430
on camera, but this one is a little bit more generic, so it just wraps the whole expression in parentheses

58
00:04:12,430 --> 00:04:20,140
and then I could type out whatever or I could make some, you know, my method call if I had some method

59
00:04:20,140 --> 00:04:21,910
that I was trying to call or something like that.

60
00:04:25,500 --> 00:04:25,830
All right.

61
00:04:25,860 --> 00:04:29,220
So anyway, let's wrap that in a system that out, and let's run that.

62
00:04:30,120 --> 00:04:30,420
All right.

63
00:04:30,420 --> 00:04:32,460
So there's our date represented there.

64
00:04:32,940 --> 00:04:40,500
Now I could put my cursor here and select all of that and then capture that into a local date variable

65
00:04:40,680 --> 00:04:42,630
with the option command V..

66
00:04:42,660 --> 00:04:42,990
Right.

67
00:04:43,170 --> 00:04:50,040
And sure, I'll call it now and then I can manipulate that in certain ways.

68
00:04:50,310 --> 00:04:56,940
So there are lots and lots of methods for manipulating dates with the API here, and we'll look at a

69
00:04:56,940 --> 00:04:58,110
few of them right now.

70
00:04:58,500 --> 00:05:07,590
So let's say that I wanted to get the date for five days into the future so I could put my period after

71
00:05:07,590 --> 00:05:08,970
this variable for now.

72
00:05:09,510 --> 00:05:15,270
And then I can say plus days and then just put a five in there.

73
00:05:15,450 --> 00:05:16,740
And so that'll be the date.

74
00:05:16,740 --> 00:05:18,630
Five days from now, I can run that.

75
00:05:18,960 --> 00:05:19,380
There we go.

76
00:05:19,390 --> 00:05:20,910
So 11:17.

77
00:05:22,220 --> 00:05:28,070
And I can do that for any standard field, so right now, I'm doing it for days, but I could do that

78
00:05:28,070 --> 00:05:28,640
for.

79
00:05:28,970 --> 00:05:29,600
Let's see.

80
00:05:31,500 --> 00:05:38,070
Years, days, months and weeks, or I could use a more generic method here, I don't mean generic in

81
00:05:38,070 --> 00:05:39,240
the generic sense.

82
00:05:40,170 --> 00:05:42,180
I mean that in the English language sense.

83
00:05:42,960 --> 00:05:46,470
So we've got this, we've got a couple versions of this.

84
00:05:46,470 --> 00:05:55,090
We've got one version of the plus method that takes two arguments a value and then a unit, right?

85
00:05:55,290 --> 00:06:02,490
And so this value and unit thing are really just a long form version of what these methods here are

86
00:06:02,490 --> 00:06:03,740
already doing here.

87
00:06:03,750 --> 00:06:06,780
The unit is baked into the method itself.

88
00:06:07,110 --> 00:06:11,340
And then in this more generic form, we can specify what those units are.

89
00:06:11,350 --> 00:06:13,740
We'll we'll use that and let's do years.

90
00:06:13,740 --> 00:06:22,020
So let's do three years into the future and then to specify the temporal units, we can actually use

91
00:06:22,380 --> 00:06:23,790
the Chrono unit.

92
00:06:24,270 --> 00:06:28,290
And so there are a bunch of constants defined on this chrono unit.

93
00:06:28,650 --> 00:06:35,640
And so if I wanted years, I could do Chrono Unit eight years.

94
00:06:36,800 --> 00:06:39,530
Like so and so let's run that.

95
00:06:40,100 --> 00:06:40,580
There we go.

96
00:06:40,590 --> 00:06:43,790
And so now we're at 2024, 11 12.

97
00:06:43,880 --> 00:06:50,270
OK, so that's a more generic way that you can warp time, if you will.

98
00:06:50,360 --> 00:06:53,180
And just as there's a plus, there's also a minus let's.

99
00:06:54,650 --> 00:06:55,590
We show you that.

100
00:06:56,850 --> 00:07:03,120
So there you go, there's minus there and again, same same analogues to the to the plus message.

101
00:07:03,900 --> 00:07:04,140
All right.

102
00:07:04,170 --> 00:07:11,670
So now in addition to obviously just getting the date today or right now, we can set any arbitrary

103
00:07:11,670 --> 00:07:12,630
date as well.

104
00:07:12,930 --> 00:07:14,970
So that's easy enough to do.

105
00:07:15,300 --> 00:07:16,680
Let's let me see here.

106
00:07:16,690 --> 00:07:20,970
I'm going to just delete both of those and I'll create a new date.

107
00:07:20,970 --> 00:07:22,260
So local date.

108
00:07:23,900 --> 00:07:30,800
Of and we've seen this many times throughout this course, I've used the of method, so I can specify

109
00:07:30,830 --> 00:07:33,470
a year, month and a day of month.

110
00:07:33,500 --> 00:07:33,830
Right.

111
00:07:33,840 --> 00:07:37,910
So let's do New Year's Day, right?

112
00:07:38,150 --> 00:07:40,910
So of 2020.

113
00:07:42,600 --> 00:07:51,510
So month, one now, the month with the Java eight date and time API makes sense.

114
00:07:51,810 --> 00:07:56,670
They start with one OK and the days of the month start with one as well.

115
00:07:56,910 --> 00:08:05,070
That that was not the case where the previous Java date you till date and Java date you till date calendar

116
00:08:05,070 --> 00:08:05,820
classes.

117
00:08:05,970 --> 00:08:09,960
And that was one of many complaints, just the inconsistency.

118
00:08:09,960 --> 00:08:14,070
And in fact, if I'm if I'm not mistaken with Java you till date date.

119
00:08:14,280 --> 00:08:18,930
The months were zero based, but the day of the month was one day.

120
00:08:19,620 --> 00:08:20,710
I don't know why.

121
00:08:20,730 --> 00:08:26,160
So, yeah, little inconsistencies like that kind of drove a lot of developers a little bit nuts.

122
00:08:26,550 --> 00:08:26,820
All right.

123
00:08:26,830 --> 00:08:29,880
So anyway, so what were we doing New Year's Day, right?

124
00:08:29,880 --> 00:08:31,260
So 2020.

125
00:08:31,470 --> 00:08:32,880
January one.

126
00:08:33,430 --> 00:08:33,810
Okay.

127
00:08:33,810 --> 00:08:37,830
And then let's capture that and we'll call it New Year's.

128
00:08:38,760 --> 00:08:39,200
All right.

129
00:08:39,210 --> 00:08:41,280
And then we can print that out.

130
00:08:45,450 --> 00:08:46,440
All right, there we go.

131
00:08:46,980 --> 00:08:53,190
All right, so now let's say that we wanted to know what day of the week was New Year's Day in 2020.

132
00:08:53,400 --> 00:08:59,790
That's really easy to do because there are some really convenient methods on our local date classes

133
00:08:59,790 --> 00:09:03,090
to give us that kind of information so we can do a get.

134
00:09:03,420 --> 00:09:05,760
And there we go right there day of week.

135
00:09:06,600 --> 00:09:07,830
So let's run that.

136
00:09:08,880 --> 00:09:10,350
It was a Wednesday, apparently.

137
00:09:10,590 --> 00:09:16,320
And just to prove that that's really, really working, let's do one for today.

138
00:09:17,250 --> 00:09:25,350
So today is a Friday, so I could do a local date now that get day of the week.

139
00:09:26,250 --> 00:09:27,510
Let's see if it gives me.

140
00:09:27,700 --> 00:09:28,740
Yeah, there we go Friday.

141
00:09:28,740 --> 00:09:32,370
So all right, so there's that.

142
00:09:32,970 --> 00:09:38,370
And just as we have a get day of week, there are actually numerous getter methods, if you will.

143
00:09:38,970 --> 00:09:43,740
Let's just take a quick peek at a few of them so you can get an idea.

144
00:09:44,130 --> 00:09:46,470
So there's good day of the week.

145
00:09:46,620 --> 00:09:51,630
I'm not going to go through each and every one of these, but some key ones get day of month should

146
00:09:51,630 --> 00:09:53,040
be pretty self-explanatory.

147
00:09:53,070 --> 00:09:53,790
Get day of year.

148
00:09:53,790 --> 00:09:56,850
So that'll give us unilateral 365 days a year.

149
00:09:56,850 --> 00:10:00,510
It'll give us the number for the day out of the year.

150
00:10:00,930 --> 00:10:01,760
Get month.

151
00:10:02,250 --> 00:10:07,000
No notice to get month actually gives us something of type month.

152
00:10:07,260 --> 00:10:12,480
So it's not just a number, it's an actual class that represents the month.

153
00:10:12,780 --> 00:10:17,210
There's another one no get month value that does return an actual integer.

154
00:10:17,220 --> 00:10:22,980
So this would give us 11 if it's November get year, that gives us an actual number.

155
00:10:23,220 --> 00:10:30,750
OK, so what a nice, convenient methods there for getting basic date fields that you might be interested

156
00:10:30,750 --> 00:10:31,440
in having.

157
00:10:31,620 --> 00:10:37,200
Now I want to show you something else that builds on so much of what we've been learning in this course,

158
00:10:37,200 --> 00:10:42,780
especially in the last couple of modules where we've really started to get deep into the streams API

159
00:10:42,780 --> 00:10:44,190
and lambdas you.

160
00:10:44,460 --> 00:10:47,010
You can do a little bit of that stuff even with the dates.

161
00:10:47,250 --> 00:10:52,830
I guess once the Java creator has created the lambda and streams stuff, they were seeing all kinds

162
00:10:52,830 --> 00:10:58,230
of places where they could embed that functionality, and they even figured out a way to embedded into

163
00:10:58,230 --> 00:10:59,700
a little bit of the data stuff here.

164
00:10:59,880 --> 00:11:01,230
So let's take a look at that.

165
00:11:01,230 --> 00:11:02,160
So see here.

166
00:11:02,160 --> 00:11:08,370
Let me delete that, and I will use the New Year's variable there.

167
00:11:08,880 --> 00:11:13,380
And so we've got a method dates until.

168
00:11:13,890 --> 00:11:21,180
So what this method will do is it will basically generate all of the dates from whatever date we're

169
00:11:21,180 --> 00:11:22,470
starting on with the object.

170
00:11:22,470 --> 00:11:27,870
So in this case, New Year's right, because that was the date that we set up until some date that we

171
00:11:27,870 --> 00:11:28,410
get it.

172
00:11:28,500 --> 00:11:28,980
OK.

173
00:11:29,130 --> 00:11:31,890
So for example, here dates until.

174
00:11:32,280 --> 00:11:34,170
So this will take a local date.

175
00:11:34,170 --> 00:11:35,490
So I don't know.

176
00:11:35,490 --> 00:11:38,940
I'll just give it today, for example, local date.

177
00:11:40,900 --> 00:11:50,200
Now, all right, now what this returns, if we hover over this method here, it returns a stream of

178
00:11:50,200 --> 00:11:51,460
local dates.

179
00:11:52,450 --> 00:11:55,990
So here's a stream of local dates.

180
00:11:56,830 --> 00:12:04,090
So if I do something like a for each, I can print out each of these dates that it's going to calculate

181
00:12:04,090 --> 00:12:08,920
between new years of 2020 and now, for example.

182
00:12:09,190 --> 00:12:10,510
So let's try that out.

183
00:12:10,810 --> 00:12:14,320
So we'll do a system that out.

184
00:12:16,180 --> 00:12:19,480
And yeah, I can use the method reference format for this.

185
00:12:19,750 --> 00:12:21,610
All right, so let's print this out and see what we get.

186
00:12:23,530 --> 00:12:24,080
There we go.

187
00:12:24,100 --> 00:12:27,100
So it printed out a heck of a lot of dates, right?

188
00:12:27,460 --> 00:12:34,210
So it actually generated each day between 20 20 January 1st and now explicitly.

189
00:12:34,450 --> 00:12:41,380
OK, now if you didn't want that to generate each and every single day, you can actually specify with

190
00:12:41,380 --> 00:12:45,580
an overloaded version of the dates until method a period, right?

191
00:12:45,610 --> 00:12:48,880
Like an amount of time to skip over something like that.

192
00:12:49,060 --> 00:12:51,970
And so there's another version of this method.

193
00:12:52,360 --> 00:12:56,200
It's this second version here that takes a so-called period.

194
00:12:56,210 --> 00:13:03,250
So what a period is is exactly what it means, you know, in in the English time since it's a period

195
00:13:03,250 --> 00:13:03,940
of time.

196
00:13:03,970 --> 00:13:04,360
OK.

197
00:13:04,660 --> 00:13:06,430
So let's see how we can use this.

198
00:13:07,090 --> 00:13:09,100
So if I put my comma here?

199
00:13:10,320 --> 00:13:10,680
I can do.

200
00:13:10,710 --> 00:13:11,190
Period.

201
00:13:11,550 --> 00:13:17,970
And then there are these helper methods, the static helper methods on the period class like of years,

202
00:13:18,150 --> 00:13:19,470
in fact, here let's just see.

203
00:13:20,450 --> 00:13:26,180
So we've got of years of days, of weeks and of months, so I don't know.

204
00:13:26,210 --> 00:13:27,650
Let's do of months.

205
00:13:28,310 --> 00:13:33,140
So basically, we can say skip by month, one month at a time.

206
00:13:33,140 --> 00:13:35,540
OK, so then let's run that.

207
00:13:35,870 --> 00:13:41,840
And so now we're getting January 1st, February 1st, March 1st and so on and so forth, right?

208
00:13:41,840 --> 00:13:44,180
It's skipping by month at a time.

209
00:13:44,300 --> 00:13:46,820
And we could tell it to go every two months.

210
00:13:49,560 --> 00:13:53,010
So there, Jan, Mar May.

211
00:13:53,760 --> 00:13:55,320
And so on and so forth, right?

212
00:13:56,220 --> 00:13:57,180
We could do.

213
00:13:58,510 --> 00:14:06,170
Of days, and I don't know, we could go 150 days at a time.

214
00:14:06,190 --> 00:14:07,960
So I think you get the idea, right?

215
00:14:08,080 --> 00:14:14,630
OK, so going going by 150 days at a time, you end up with all of these oddball dates like this.

216
00:14:14,890 --> 00:14:16,480
But it's pretty cool.

217
00:14:16,490 --> 00:14:22,750
So anything that you could do generally with the Streams API, you can now apply that functionality

218
00:14:22,750 --> 00:14:27,100
to the calculation and iterating of dates, essentially.

219
00:14:27,280 --> 00:14:28,810
Now why might you want to do this?

220
00:14:29,170 --> 00:14:37,300
One scenario that I could kind of think of would be, what if I want to know all of the leap years between

221
00:14:37,300 --> 00:14:39,340
now and the next 10 years from now?

222
00:14:39,610 --> 00:14:41,560
OK, so let's see how we could do that.

223
00:14:41,980 --> 00:14:48,430
So between now and the next 10 years from now, so I'm going to just delete all of that and I will first

224
00:14:48,430 --> 00:14:53,530
create now dates until and I said 10 years from now.

225
00:14:53,950 --> 00:15:00,250
So the way we can do that is I can create another local date now.

226
00:15:01,120 --> 00:15:06,190
Plus years 10 now there are so many ways to skin this cat.

227
00:15:06,340 --> 00:15:09,250
But this is just one way that I'm thinking of at the moment, right?

228
00:15:09,430 --> 00:15:10,680
So dates until.

229
00:15:11,020 --> 00:15:12,670
And let's see.

230
00:15:12,670 --> 00:15:14,560
And then I want to go by years.

231
00:15:14,560 --> 00:15:19,330
So I will do period of years and I'll do every one year, right?

232
00:15:19,750 --> 00:15:24,010
And then what I can do is I can use a filter.

233
00:15:25,000 --> 00:15:31,180
And so watch what I can filter for, so I'm going to use a method that exists on the weight class,

234
00:15:31,180 --> 00:15:31,480
right?

235
00:15:31,690 --> 00:15:38,650
So each object that's going to fall through this stream is going to be a local date so I can call a

236
00:15:38,650 --> 00:15:41,680
method reference local date.

237
00:15:43,150 --> 00:15:48,850
And there's a method, right there is leap year and then I can print those or I could collect them,

238
00:15:48,850 --> 00:15:50,380
in fact, you know, let's let's collect.

239
00:15:50,380 --> 00:15:57,610
We haven't done collecting in a while, so I could collect these into a list like so, so collect and

240
00:15:57,610 --> 00:15:59,410
then collectors start to list.

241
00:15:59,830 --> 00:16:05,050
And now I need to capture that leap years.

242
00:16:06,840 --> 00:16:07,830
And then I can print.

243
00:16:09,130 --> 00:16:10,270
Those leap year.

244
00:16:12,350 --> 00:16:18,020
So there are apparently only two leap years between now and 10 years from now.

245
00:16:18,770 --> 00:16:22,580
Let's see 2024 and 2028.

246
00:16:24,330 --> 00:16:31,860
So like I said before, any time you want to be able to apply these streams, API capabilities and techniques,

247
00:16:31,860 --> 00:16:33,180
now you have a way to do that.

248
00:16:33,660 --> 00:16:34,010
All right.

249
00:16:34,020 --> 00:16:39,390
So now let's move away from local dates for a minute because there's another class that's quite similar

250
00:16:39,390 --> 00:16:40,440
and very helpful.

251
00:16:40,710 --> 00:16:42,030
There's local time.

252
00:16:42,330 --> 00:16:47,010
So basically, all the things that we can do that make sense with local date, we can also do with this

253
00:16:47,010 --> 00:16:47,670
local time.

254
00:16:47,680 --> 00:16:51,570
So let's create an instance of a local time now local time.

255
00:16:52,170 --> 00:16:57,470
So you create it pretty much the same way you can do a local time now.

256
00:16:58,870 --> 00:17:01,180
And let's go ahead and just print that.

257
00:17:04,080 --> 00:17:04,740
There we go.

258
00:17:05,070 --> 00:17:12,120
So there's my local time, 527, so some key things that I want to point out here.

259
00:17:12,450 --> 00:17:19,530
Local date represents literally a date with no time component associated with it.

260
00:17:19,800 --> 00:17:25,380
Local time represents a time with no date associated with it.

261
00:17:25,680 --> 00:17:34,200
This is key to point out because again, the previous date time modeling that Java had prior to Java

262
00:17:34,200 --> 00:17:41,790
version eight had a tendency to confuse and mix these concepts together, which is OK to do in certain

263
00:17:41,790 --> 00:17:43,860
circumstances in many circumstances.

264
00:17:44,490 --> 00:17:49,140
We developers actually do want to know both a date and a time at the same time.

265
00:17:49,440 --> 00:17:52,530
But sometimes we don't want these two things together.

266
00:17:52,740 --> 00:17:57,330
And sometimes by keeping them together, we actually make our jobs more difficult.

267
00:17:57,330 --> 00:17:59,430
And I'll give you a quick example of what I mean.

268
00:17:59,970 --> 00:18:06,270
Let's say that you're working for a company and you're writing an application that needs to store dates

269
00:18:06,540 --> 00:18:10,680
for, I don't know, maybe when people registered for something.

270
00:18:10,890 --> 00:18:11,300
OK?

271
00:18:11,670 --> 00:18:19,770
If you're using an API that doesn't make it easy to just represent dates by themselves, and instead

272
00:18:19,770 --> 00:18:25,710
you're forced to have both a date and a time, you're going to have to do some things if you want to

273
00:18:25,710 --> 00:18:27,870
later on, be able to compare to different people.

274
00:18:27,870 --> 00:18:34,590
So let's say two people registered on the same day, but at different times, and your API really only

275
00:18:34,590 --> 00:18:36,660
does date and time together.

276
00:18:37,110 --> 00:18:43,860
The most naive implementation of some code that might handle this situation might just leave the date

277
00:18:43,860 --> 00:18:46,800
and the time intact and then save it someplace.

278
00:18:47,190 --> 00:18:52,230
And so now, if you want to ask the question, did these two people register at the same time?

279
00:18:52,350 --> 00:18:55,800
Which really means did they register on the same date?

280
00:18:55,830 --> 00:18:57,450
The answer technically is yes.

281
00:18:57,450 --> 00:18:59,280
They did register on the same date.

282
00:18:59,520 --> 00:19:07,410
However, since their time components may be different, a naive implementation might say they do not

283
00:19:07,410 --> 00:19:08,010
match.

284
00:19:08,400 --> 00:19:16,320
And what you need to do in that case is normalize the time component of these date time things or these

285
00:19:16,320 --> 00:19:18,630
timestamps or whatever they're going to be called.

286
00:19:19,110 --> 00:19:21,450
So that's a little extra work on you now.

287
00:19:21,690 --> 00:19:28,050
Whereas if you could have simply modeled the data for what you actually care about, which in this case

288
00:19:28,050 --> 00:19:32,160
you only care about the date and not the time, then you would not have to do that.

289
00:19:32,160 --> 00:19:37,510
In fact, here, if we just create a couple of date objects, real quick local date.

290
00:19:37,550 --> 00:19:42,660
Sorry to go back to the dates, but I'll just show you real quick here d one equals local date.

291
00:19:44,160 --> 00:19:50,640
Of and let's just pick, I don't know, two thousand one one.

292
00:19:51,970 --> 00:20:00,430
And then we'll make another local day called the two local date of Oops, I got the wrong year there,

293
00:20:00,430 --> 00:20:00,820
didn't I?

294
00:20:00,850 --> 00:20:01,630
2000.

295
00:20:02,410 --> 00:20:13,950
And we'll do 2000 one two, and then we can say something like the one dud equals the two, right?

296
00:20:13,960 --> 00:20:15,970
So we're asking, are those equal?

297
00:20:15,970 --> 00:20:18,430
I'm going to comment out that last bit there for a minute.

298
00:20:19,270 --> 00:20:20,500
No, they're not equal.

299
00:20:20,950 --> 00:20:25,660
And then if I set this one to one, so now they should both be equal.

300
00:20:25,690 --> 00:20:26,200
OK, cool.

301
00:20:26,200 --> 00:20:26,860
We get that.

302
00:20:27,520 --> 00:20:31,000
Another way we could do this, by the way, is that there is a compare.

303
00:20:31,930 --> 00:20:34,900
Yeah, compared to D2.

304
00:20:35,320 --> 00:20:43,030
Now this compare to is just like the comparable functionality that we learned back in the collections

305
00:20:43,690 --> 00:20:47,590
module where we were able to compare any two objects, right?

306
00:20:47,590 --> 00:20:50,710
So these date objects implement that same interface.

307
00:20:50,980 --> 00:20:55,640
And so that means that this is going to return not a true false, but numbers, right?

308
00:20:55,660 --> 00:20:58,390
Negative one, zero or positive one, typically.

309
00:20:58,840 --> 00:21:01,840
So these are equal and therefore we get back a zero.

310
00:21:02,080 --> 00:21:08,530
The reason that these classes implement that interface is you can guess it now so that they can be sorted

311
00:21:08,530 --> 00:21:09,400
in order.

312
00:21:09,430 --> 00:21:09,820
Right?

313
00:21:10,120 --> 00:21:10,390
All right.

314
00:21:10,400 --> 00:21:11,830
So that's what that looks like.

315
00:21:11,830 --> 00:21:19,060
But now to get back to our local time examples here, let's create an explicit local time, not just

316
00:21:19,060 --> 00:21:24,730
the now right, but let's do a local time and we'll call this local L.T. one.

317
00:21:25,120 --> 00:21:27,880
And so we'll create a local time dot.

318
00:21:28,180 --> 00:21:35,140
So it works pretty much the same way as the local date and has some really nice, easy to use utility

319
00:21:35,140 --> 00:21:37,270
methods here for creating instances.

320
00:21:37,540 --> 00:21:42,880
So we could do just the hour in the minute or the hour, minute and second, or we could go all the

321
00:21:42,880 --> 00:21:44,410
way down to nanoseconds.

322
00:21:44,410 --> 00:21:47,170
Even for now, let's just go with hour and minute.

323
00:21:47,530 --> 00:21:50,520
So we'll do 10 30.

324
00:21:51,340 --> 00:21:51,790
All right.

325
00:21:52,060 --> 00:22:00,970
And then let's make another one local time L2 equals local time of and for this one, let's do 10.

326
00:22:01,450 --> 00:22:02,260
31.

327
00:22:02,500 --> 00:22:02,830
All right.

328
00:22:02,860 --> 00:22:12,490
And so we already know if we compare those LRT one equals L2, we know that that's going to be false.

329
00:22:12,880 --> 00:22:13,240
There we go.

330
00:22:13,250 --> 00:22:14,950
So yeah, we got false there.

331
00:22:15,160 --> 00:22:18,310
And then if we set that minute to be the same.

332
00:22:20,060 --> 00:22:20,780
Now it's true.

333
00:22:21,200 --> 00:22:28,010
So before we dig in too deeply on the local time methods, let me go ahead and just introduce one more

334
00:22:28,010 --> 00:22:30,110
class here while we're at it.

335
00:22:30,410 --> 00:22:36,320
There is a local date time, and so that would be like, you know, the full culmination of having both

336
00:22:36,320 --> 00:22:37,940
the date and the time together.

337
00:22:38,120 --> 00:22:43,610
And so to kind of wrap up this little example that I was giving you of how when you've got that time

338
00:22:43,610 --> 00:22:51,230
component combined with dates, you have to get the time part precisely to match between any two date

339
00:22:51,230 --> 00:22:51,920
times, right?

340
00:22:52,100 --> 00:22:58,370
So let's create a date time and that'll look the same local date time.

341
00:23:00,230 --> 00:23:04,130
L.D. one equals local date time of.

342
00:23:04,460 --> 00:23:06,680
Now we can create these in a number of ways.

343
00:23:06,950 --> 00:23:11,540
There are quite a number of variations of the of method here.

344
00:23:11,570 --> 00:23:11,870
Right.

345
00:23:12,050 --> 00:23:19,310
So we can specify a year, month, day, minute, year, month, day of month, hour, minute, second

346
00:23:20,090 --> 00:23:21,130
nanoseconds.

347
00:23:21,150 --> 00:23:26,690
Basically, they just took all of the constituent fields for creating a local date and a local time.

348
00:23:26,780 --> 00:23:31,130
And then they put them together in a number of variations, essentially.

349
00:23:31,220 --> 00:23:33,860
And then there are some rolled up versions as well.

350
00:23:33,860 --> 00:23:38,570
And by rolled up, I mean, like this one down here, we can even build a local date time out of a local

351
00:23:38,570 --> 00:23:41,090
date and a local time, which makes sense, right?

352
00:23:41,570 --> 00:23:46,460
And in fact, maybe let's go ahead and use that version for right now.

353
00:23:46,460 --> 00:23:52,280
So we'll make a local daytime comprised of a D one and an L T one.

354
00:23:53,380 --> 00:24:00,410
So what I'm doing here is I'm making a local great time from this date and this time, right?

355
00:24:00,670 --> 00:24:10,270
And then I will make another one local daytime elders to L.D. T-2 and look at a time of and then we'll

356
00:24:10,270 --> 00:24:13,870
do D2 and L.T. to like.

357
00:24:13,870 --> 00:24:22,930
So and then we can compare those LGT one that equals LGT to.

358
00:24:24,010 --> 00:24:25,000
Let's run that.

359
00:24:25,600 --> 00:24:26,800
So that is true.

360
00:24:26,950 --> 00:24:28,780
They are both equal.

361
00:24:28,870 --> 00:24:36,520
And that makes sense because currently we've got dates of 2000 January 1st for both dates and 10 for

362
00:24:36,520 --> 00:24:37,640
both times.

363
00:24:37,660 --> 00:24:37,990
Right.

364
00:24:39,550 --> 00:24:46,780
But now if I even just add a difference of one nanosecond and run this now no longer matching right,

365
00:24:46,780 --> 00:24:52,690
because it's just any difference at all down to that level means that they are just completely not the

366
00:24:52,690 --> 00:24:54,400
same date times anymore.

367
00:24:54,850 --> 00:25:00,880
And so typically you'd be wanting to strip off the time if you were just wanting to compare dates.

368
00:25:01,660 --> 00:25:08,140
And by the way, to strip that time off would be easy to do if you're using the Java eight API, because

369
00:25:08,140 --> 00:25:12,430
let's say that you ended up with a date time given to you from somewhere.

370
00:25:12,580 --> 00:25:19,450
Well, you can easily just extract the local date from a local date time or the local time from a local

371
00:25:19,450 --> 00:25:20,020
date time.

372
00:25:20,600 --> 00:25:22,390
And that's easy enough to do.

373
00:25:23,680 --> 00:25:33,730
We can do an LDL d T1, so that's our local date time dot, and then we can call to local date to get

374
00:25:34,120 --> 00:25:41,250
the local date or the local time so easy enough to just extract the component of either of those out

375
00:25:41,320 --> 00:25:43,090
back out of the local date time.

376
00:25:43,510 --> 00:25:49,150
And I think there's maybe one more fundamental time class that I want to mention briefly and that is

377
00:25:49,150 --> 00:25:50,380
called instant.

378
00:25:51,070 --> 00:26:00,400
So instant is actually quite similar, in my opinion, to local date time, except that local date,

379
00:26:00,430 --> 00:26:06,190
local time and local date time are really all meant for human consumption.

380
00:26:06,370 --> 00:26:11,590
OK, so if you're writing programs that are going to be dealing with dates and times that are meant

381
00:26:11,590 --> 00:26:18,550
for humans to enter or to read, you'd want to be using these classes generally speaking.

382
00:26:19,180 --> 00:26:19,830
Instant.

383
00:26:19,840 --> 00:26:27,100
On the other hand, though functionally somewhat similar to the local date, time has a different purpose,

384
00:26:27,100 --> 00:26:31,390
and that is for machines to share timing with each other.

385
00:26:31,840 --> 00:26:33,190
So let me show you what I mean here.

386
00:26:34,000 --> 00:26:35,480
Let's create an instant.

387
00:26:35,500 --> 00:26:36,880
I'll just make a new line.

388
00:26:38,350 --> 00:26:43,240
Instant is the class and I can do something like now.

389
00:26:45,060 --> 00:26:46,740
And let's just print that.

390
00:26:49,300 --> 00:26:55,540
All right, so here's our instant, so it has very familiar information in it, it's got every year,

391
00:26:55,840 --> 00:27:01,270
month day and then the time component designated by this T.

392
00:27:01,390 --> 00:27:01,690
Right.

393
00:27:01,690 --> 00:27:05,680
So that's why I said it's quite similar to a local date time.

394
00:27:06,190 --> 00:27:12,160
But the instant actually tracks time in terms of seconds.

395
00:27:12,340 --> 00:27:20,110
And this is actually part of a legacy in computing that dates back to a specific date in time 1970 January

396
00:27:20,110 --> 00:27:23,500
1st, which is known as epoch time.

397
00:27:23,950 --> 00:27:33,670
So basically, the creators of the very popular operating system Unix chose to track time in their operating

398
00:27:33,670 --> 00:27:35,050
system from that date.

399
00:27:35,080 --> 00:27:37,840
And that's around the period of time when Unix was released.

400
00:27:38,080 --> 00:27:40,780
So that's kind of the birth time of Unix.

401
00:27:41,050 --> 00:27:47,920
And so they just chose 1970 January 1st, and presumably because so many programs written from that

402
00:27:47,920 --> 00:27:54,190
period of time forward used this notion of time tracking called the epoch time.

403
00:27:54,550 --> 00:27:59,560
It has persisted to this day, which is kind of weird when you really think about it.

404
00:27:59,710 --> 00:28:07,240
And so there may be times as a developer when you need to specify dates and times to other systems that

405
00:28:07,240 --> 00:28:09,400
you may be trying to communicate with and by you.

406
00:28:09,400 --> 00:28:11,110
I mean, your your code, really.

407
00:28:11,620 --> 00:28:18,760
Some of these other systems may require that you pass them date time information using epoch time.

408
00:28:18,850 --> 00:28:24,220
And if you need to do that, you can use the instant class to do so.

409
00:28:24,460 --> 00:28:32,110
Now you may find yourself having to translate from human entered date time data, though, to instance.

410
00:28:32,320 --> 00:28:34,160
And that's easy enough to do.

411
00:28:34,180 --> 00:28:36,220
So let's play around with that a little bit.

412
00:28:36,580 --> 00:28:38,890
So we've got a local date time up here.

413
00:28:39,010 --> 00:28:40,020
I'll get one.

414
00:28:40,360 --> 00:28:43,720
And let's say that we want to convert that into an instant.

415
00:28:43,990 --> 00:28:44,920
How could we do that?
