WEBVTT
1
00:00:00.420 --> 00:00:05.730
All right, next up, we're going to learn about some strings, so some strings are basically where

2
00:00:05.730 --> 00:00:14.370
you just take some text that a string of text and you ask a method of the string class to return part

3
00:00:14.370 --> 00:00:17.200
of that text instead of the entire string.

4
00:00:17.250 --> 00:00:19.200
OK, so we'll take a look at that now.

5
00:00:19.620 --> 00:00:24.270
So back in our project again, again, we'll just clear out what we had before.

6
00:00:24.900 --> 00:00:28.170
All right, and let's create another string variable.

7
00:00:31.030 --> 00:00:33.970
My text equals.

8
00:00:35.890 --> 00:00:40.570
And I don't know, let's do Apple, at least that's what I'm going to do.

9
00:00:40.900 --> 00:00:41.350
Apple.

10
00:00:41.950 --> 00:00:52.310
OK, now we saw earlier in one of our lessons that we were able to uppercase the first letter of a word.

11
00:00:52.480 --> 00:00:55.760
And I want to review that again with you.

12
00:00:55.780 --> 00:01:02.260
As I've stated before, repetition really can tends to help people to learn better, so we'll repeat

13
00:01:02.260 --> 00:01:03.100
a little bit of that.

14
00:01:03.850 --> 00:01:04.180
All right.

15
00:01:04.190 --> 00:01:10.750
So the way we did that, let's say that we wanted to uppercase just the A in this word, apple.

16
00:01:10.960 --> 00:01:13.130
So let's start off by doing a.

17
00:01:13.360 --> 00:01:17.950
And so you t just to print out what we've already got there my text.

18
00:01:18.370 --> 00:01:18.670
All right.

19
00:01:18.680 --> 00:01:21.980
So that's going to print a lowercase apple right now.

20
00:01:22.000 --> 00:01:32.800
I'm going to make a new line and I'm going to make a new string variable in my new text now to set this

21
00:01:32.800 --> 00:01:34.400
my new text variable.

22
00:01:34.420 --> 00:01:40.300
We're going to base it on the original my text variable, but we're going to uppercase that first character.

23
00:01:40.360 --> 00:01:43.020
And to do that, we're going to use the sub string.

24
00:01:43.510 --> 00:01:48.160
So the way we'll do this is will first reference the my text variable.

25
00:01:48.850 --> 00:01:54.700
Then we're going to use a period and we're going to call the substring method here.

26
00:01:55.540 --> 00:02:00.010
Notice there are actually a couple versions of the sub string method.

27
00:02:00.340 --> 00:02:02.060
There's one that takes just one input.

28
00:02:02.080 --> 00:02:03.940
There's another one that takes two inputs.

29
00:02:04.330 --> 00:02:08.590
The first one's input is the be the beginning index.

30
00:02:08.590 --> 00:02:16.390
And as I stated when we used this before, the index just refers to the numerical place in the string

31
00:02:16.390 --> 00:02:19.330
where you are wanting to start your substring.

32
00:02:19.360 --> 00:02:19.810
OK?

33
00:02:20.170 --> 00:02:24.160
Starting with the number zero, meaning the first character.

34
00:02:24.580 --> 00:02:26.230
All right, so let's let's start with that.

35
00:02:26.530 --> 00:02:35.380
So if I select this first one here, this first method and I put zero in here, and let's just stop

36
00:02:35.380 --> 00:02:35.860
right there.

37
00:02:35.890 --> 00:02:42.040
OK, so and then what I'm going to do, actually, I'll just select this my new text.

38
00:02:43.490 --> 00:02:49.610
I'm going to copy that with a command or control C, and then I'm going to replace this, my text with

39
00:02:49.610 --> 00:02:52.820
that one there, I'm going to do a command v or control V.

40
00:02:53.120 --> 00:02:53.540
OK.

41
00:02:53.750 --> 00:02:54.140
All right.

42
00:02:54.320 --> 00:02:56.990
Now let's run this and see what we end up with.

43
00:02:57.800 --> 00:03:02.540
OK, so this just ran and we just got the whole entire word.

44
00:03:03.170 --> 00:03:05.330
Apple, why did we get that?

45
00:03:06.140 --> 00:03:13.040
Well, the reason we got the entire word Apple is because we told the substring method to begin to give

46
00:03:13.040 --> 00:03:20.690
us a substring of this string apple starting on the first character, which is a but since we didn't

47
00:03:20.960 --> 00:03:29.390
provide a second parameter here to tell it how how many characters of this string we want by default,

48
00:03:29.390 --> 00:03:31.730
it just takes the whole entire string.

49
00:03:31.910 --> 00:03:34.350
And so really, that's not doing anything for us.

50
00:03:34.370 --> 00:03:35.750
It just gave us the whole thing.

51
00:03:35.960 --> 00:03:41.930
So let's see what happens if we were to start on a different number like one, for example.

52
00:03:42.200 --> 00:03:42.520
All right.

53
00:03:42.530 --> 00:03:43.640
So let's run this.

54
00:03:44.520 --> 00:03:46.670
OK, now we got something a little different.

55
00:03:46.910 --> 00:03:51.590
Now it starts with Peli, or rather now it prints peopleThe.

56
00:03:51.860 --> 00:04:00.290
And the reason for that is we're telling it to start on the second index of the Apple string because

57
00:04:00.290 --> 00:04:02.840
zero is the first, zero is the first.

58
00:04:03.050 --> 00:04:07.090
So one would be the second index or the second character.

59
00:04:07.100 --> 00:04:11.380
So the first character is a the second character is this p here.

60
00:04:11.390 --> 00:04:17.690
So it starts inclusively with that p and then it grabs the whole rest of that string to the end.

61
00:04:18.200 --> 00:04:19.940
And so that's what you see here.

62
00:04:20.360 --> 00:04:24.800
So if we wanted only to grab the A.

63
00:04:25.750 --> 00:04:28.550
We would need to change this to zero.

64
00:04:29.200 --> 00:04:37.960
And we would need to supply one more parameter, which would be the length of the substring, OK, the

65
00:04:37.960 --> 00:04:38.500
length.

66
00:04:39.190 --> 00:04:47.410
And so we want a length of one, meaning just grab one character starting on the first character.

67
00:04:47.620 --> 00:04:49.840
OK, so that's what this is saying.

68
00:04:50.050 --> 00:04:56.950
Start on the zero with or the first character, which is this a and only give us?

69
00:04:58.340 --> 00:04:59.300
One character.

70
00:05:01.210 --> 00:05:04.600
So only give us the A. So if we run this now.

71
00:05:05.230 --> 00:05:05.890
There we go.

72
00:05:06.160 --> 00:05:08.500
Now we're just getting the A.

73
00:05:09.870 --> 00:05:12.750
Now, I want to give you one small distinction to make here.

74
00:05:12.780 --> 00:05:17.760
It's an I would say it's mostly an unimportant one, but just to be technically accurate here.

75
00:05:18.150 --> 00:05:25.590
This second parameter technically isn't directly referring to the number of characters we want.

76
00:05:25.830 --> 00:05:31.410
It's actually referring to the index of the character where we want to stop.

77
00:05:31.920 --> 00:05:39.810
So we're basically saying with the zero start on the first character, which is this a here and then

78
00:05:39.810 --> 00:05:47.130
go up to, but not including the second character, because again, we start with the zero, so one

79
00:05:47.130 --> 00:05:48.180
would be the second character.

80
00:05:48.180 --> 00:05:52.460
So the second character is this p here, but don't include the P.

81
00:05:52.470 --> 00:05:55.590
So start on the A and don't include the P.

82
00:05:56.130 --> 00:06:00.600
Now, if that sounds a little confusing to you, that's OK, and that's why you don't really need to

83
00:06:00.600 --> 00:06:01.560
think of it in that way.

84
00:06:01.560 --> 00:06:07.890
It's probably much easier just to think of the second parameter as the length or the number of characters

85
00:06:07.890 --> 00:06:13.620
you want to extend your sub selection out to or your substring out to.

86
00:06:13.620 --> 00:06:16.290
That's probably just a more intuitive way to think about it.

87
00:06:16.740 --> 00:06:19.980
But technically, this number isn't referring to the length.

88
00:06:20.160 --> 00:06:29.490
It's technically referring to the non-inclusive index of the character that you want to go up to.

89
00:06:29.730 --> 00:06:34.200
And again, that's a mouthful, so you can just think of it as the length.

90
00:06:34.560 --> 00:06:34.860
All right.

91
00:06:34.860 --> 00:06:44.250
So we have the A there, so let's revisit what we did in the program a few lessons ago when we took

92
00:06:44.250 --> 00:06:46.350
a string and uppercase it, OK?

93
00:06:46.440 --> 00:06:50.790
And now this is going to allow us to combine a few things that we've already learned now.

94
00:06:51.120 --> 00:06:52.920
So we know how to get this a.

95
00:06:53.310 --> 00:06:55.380
But we want that a to be uppercase.

96
00:06:55.410 --> 00:06:55.750
Right?

97
00:06:56.250 --> 00:07:01.830
So we can uppercase that by simply tacking on.

98
00:07:03.540 --> 00:07:06.060
A period right here and choosing.

99
00:07:07.720 --> 00:07:09.670
The two upper case method.

100
00:07:10.450 --> 00:07:11.560
Right there, right?

101
00:07:12.570 --> 00:07:15.180
So here's the word Apple.

102
00:07:16.140 --> 00:07:25.380
And then here is the lower case, a of Apple, and then all of this would be.

103
00:07:26.280 --> 00:07:30.090
And upper case, a of the word Apple.

104
00:07:30.360 --> 00:07:30.720
Right?

105
00:07:30.750 --> 00:07:35.310
That's what all of this means the upper case, a of the word apple.

106
00:07:35.970 --> 00:07:37.530
But we want more.

107
00:07:38.470 --> 00:07:46.330
We want to print the whole entire word, Apple with the upper case, so now we need the peoplethe to

108
00:07:46.330 --> 00:07:47.650
remain lowercase.

109
00:07:47.920 --> 00:07:50.920
So really, what we want to do is we want to append.

110
00:07:51.730 --> 00:08:00.730
We want to take the uppercase a, which is all of this and then we want to append onto that or concatenate

111
00:08:01.090 --> 00:08:03.430
onto that the lowercase.

112
00:08:04.780 --> 00:08:05.170
Right.

113
00:08:05.380 --> 00:08:09.320
So we learned how to concatenate and we learned several ways.

114
00:08:09.340 --> 00:08:10.750
So we'll we'll do that now.

115
00:08:10.750 --> 00:08:12.410
We'll do the easiest way first.

116
00:08:12.430 --> 00:08:15.070
Well, the simplest way, which is just a plus.

117
00:08:16.470 --> 00:08:23.430
And now we want to concatenate the plea, so this would be a good opportunity for you to pause the video

118
00:08:23.430 --> 00:08:31.860
for a moment and see if you can think of how you can print the word apple with the a capitalized and

119
00:08:31.860 --> 00:08:33.570
I'll give you a moment to figure that out.

120
00:08:33.900 --> 00:08:38.010
And then when you're done, resume the video and we'll see if you got it right.

121
00:08:39.540 --> 00:08:49.020
OK, so the way one of the ways we could do this, because there's several, is we could just do a plus

122
00:08:49.830 --> 00:08:50.790
space.

123
00:08:52.190 --> 00:08:53.360
My text.

124
00:08:54.410 --> 00:08:54.980
Dot.

125
00:08:56.010 --> 00:09:00.690
Substring, I'm going to give myself a little room here and now.

126
00:09:00.930 --> 00:09:06.510
So the substring method is asking, what character do we want to start on or what index do we want to

127
00:09:06.510 --> 00:09:07.230
start on?

128
00:09:07.410 --> 00:09:11.850
Well, we don't want to start on the zero with because that would include the A. We want to start on

129
00:09:11.850 --> 00:09:14.190
the second character, which would be one.

130
00:09:15.300 --> 00:09:24.870
And if we don't specify how many characters we want or the ending index, it will by default take the

131
00:09:24.870 --> 00:09:28.560
whole rest of that string, which is exactly what we want.

132
00:09:28.830 --> 00:09:31.470
So I think we're done right here.

133
00:09:32.870 --> 00:09:35.570
So let's run this now and see what we get.

134
00:09:36.410 --> 00:09:37.520
And there we go.

135
00:09:37.970 --> 00:09:39.770
Apple with a capital A..

136
00:09:40.610 --> 00:09:47.990
OK, now do you remember any of the other ways that you could concatenate these two strings?

137
00:09:48.140 --> 00:09:53.300
What's the maybe the next easiest way that we could concatenate these two strings again?

138
00:09:53.300 --> 00:09:59.270
If you want to go ahead and pause for a moment and see if you can code that up and then come back and

139
00:09:59.270 --> 00:10:00.080
see what I do.

140
00:10:01.400 --> 00:10:01.850
All right.

141
00:10:02.240 --> 00:10:12.020
So what we can do, alternatively, is we can delete that plus, and you could do another period right

142
00:10:12.020 --> 00:10:15.590
here and then use the contact method.

143
00:10:16.340 --> 00:10:16.670
All right.

144
00:10:16.820 --> 00:10:17.900
Now here's the trick.

145
00:10:18.230 --> 00:10:21.920
Currently, the cursor is inside of the parentheses and we need to get.

146
00:10:23.110 --> 00:10:30.210
All of this inside of those parentheses, so you could just select it the way that I just did here,

147
00:10:30.220 --> 00:10:36.610
select all of that don't include the semicolon, though, and then do a command or control X to cut.

148
00:10:37.540 --> 00:10:41.530
Put your cursor inside of the parentheses because that's where the input goes.

149
00:10:42.010 --> 00:10:44.350
And then do a command or control V.

150
00:10:45.350 --> 00:10:51.710
Like that, and personally, I would not like to have that trailing space between the closing parentheses

151
00:10:51.710 --> 00:10:52.970
and the semicolon.

152
00:10:53.270 --> 00:10:56.180
So this should work and we'll run it and make sure.

153
00:10:56.600 --> 00:10:56.830
Yep.

154
00:10:57.230 --> 00:10:59.030
And we still get the same thing again.

155
00:10:59.990 --> 00:11:04.940
Now one thing this might start to look a little scary to some people.

156
00:11:05.090 --> 00:11:09.830
It's starting to look a little bit like you kind of have to really pay attention to it to parse out

157
00:11:09.830 --> 00:11:10.700
what's going on.

158
00:11:11.030 --> 00:11:19.130
So I want to introduce you to a concept that I use extensively myself and that is refactoring so we

159
00:11:19.130 --> 00:11:25.700
can actually break up the parts of this possibly intimidating looking line of code to be a little more

160
00:11:25.700 --> 00:11:26.330
readable.

161
00:11:26.810 --> 00:11:33.740
And there are a lot of ways that we could do this, but one way that comes to my mind would be to take

162
00:11:34.100 --> 00:11:43.610
this part here, which represents the lowercase a and refactor that out into its own variable with a

163
00:11:43.610 --> 00:11:44.630
meaningful name.

164
00:11:44.690 --> 00:11:45.950
Let me show you what I mean by that.

165
00:11:45.980 --> 00:11:53.090
So I've selected all of this, and I'm going to do a command option V for variable.

166
00:11:55.490 --> 00:11:58.520
And then I'm going to name this first.

167
00:12:00.070 --> 00:12:03.310
Part and then I'm going to hit return.

168
00:12:03.640 --> 00:12:09.280
So now I have first part to upper case, do you see what it did there?

169
00:12:09.610 --> 00:12:15.760
It created a new variable called First Part, and then it took all of that and just assigned it to that.

170
00:12:15.760 --> 00:12:22.210
And then it replaced this whole big, scarier looking thing with something a little bit shorter because

171
00:12:22.210 --> 00:12:23.800
now I have this first part.

172
00:12:24.070 --> 00:12:24.520
OK.

173
00:12:24.970 --> 00:12:27.280
And then I could do the same thing over here.

174
00:12:27.280 --> 00:12:34.300
I could select this bit, which is the second part, and I can do the same thing command option V or

175
00:12:34.300 --> 00:12:35.440
control alt v.

176
00:12:35.830 --> 00:12:42.370
And I can call this whatever second part, or I could call it the rest or whatever.

177
00:12:42.850 --> 00:12:43.210
All right.

178
00:12:43.390 --> 00:12:46.300
So that looks a little less intimidating now.

179
00:12:46.330 --> 00:12:53.800
First Part two uppercase concatenate with the second part, and I could even go a little further if

180
00:12:53.800 --> 00:12:54.340
I wanted to.

181
00:12:54.340 --> 00:12:56.290
I could select all of this.

182
00:12:57.490 --> 00:13:03.070
And do another command or command option V and I could do something like

183
00:13:04.630 --> 00:13:07.210
capitalized.

184
00:13:08.840 --> 00:13:12.990
OK, so I could do capitalized contact second part and look at that.

185
00:13:13.010 --> 00:13:15.380
That's a lot less scary looking now.

186
00:13:16.130 --> 00:13:23.540
So you don't need to be shy about breaking things down into bite size bits that are easier for your

187
00:13:23.540 --> 00:13:29.100
brain to comprehend when blocks or lines of code start to look a little too intimidating.

188
00:13:29.120 --> 00:13:33.620
You can always refactor those, and I strongly encourage you to.

189
00:13:33.800 --> 00:13:37.920
The only thing is I encourage that when you do those refactoring.

190
00:13:38.180 --> 00:13:44.330
You take the time to come up with meaningful names for your variable so that you can follow along more

191
00:13:44.330 --> 00:13:45.200
easily in the code.

192
00:13:45.200 --> 00:13:47.090
As to what that's actually doing.

193
00:13:47.300 --> 00:13:52.400
A lot of programmers that I've worked with who I may not think are great programmers, one of their

194
00:13:52.400 --> 00:13:57.410
problems is that I think they are a little impatient when it comes to taking the time to name things

195
00:13:57.410 --> 00:13:58.430
in a meaningful way.

196
00:13:58.700 --> 00:14:02.540
On the one hand, you don't want to take an hour to do it right because you do need to chop, chop,

197
00:14:02.540 --> 00:14:03.260
get it done.

198
00:14:03.620 --> 00:14:09.910
But taking a few moments to just think of a meaningful name and also don't be shy if you come up with

199
00:14:09.920 --> 00:14:14.480
a name and then later on you decide, you know, that's not the best name you can rename it as well.

200
00:14:14.570 --> 00:14:16.550
In fact, I'll just show you that real quick as well.

201
00:14:16.700 --> 00:14:22.880
You can put your cursor on any method name or variable name or class name pretty much anything.

202
00:14:23.030 --> 00:14:24.770
Just put your cursor anywhere there.

203
00:14:25.010 --> 00:14:34.220
And on Mac, you can do a shift F6 to select that whole entire text and then you can rename it.

204
00:14:34.550 --> 00:14:35.420
So I don't know.

205
00:14:35.450 --> 00:14:37.130
I could call this something like.

206
00:14:38.170 --> 00:14:40.780
Capital First Letter.

207
00:14:40.870 --> 00:14:44.080
That's like super explicit, right?

208
00:14:44.440 --> 00:14:48.250
There's like no ambiguity there as to what that represents.

209
00:14:48.730 --> 00:14:50.650
By the way, quick side note.

210
00:14:50.890 --> 00:14:54.340
So I just did a shift F6 on Mac.

211
00:14:54.610 --> 00:15:00.870
And let me also remind myself so shift of six on Windows and Linux, and I'm going to hit Escape two

212
00:15:00.910 --> 00:15:04.600
to get out of that two times on for Mac users.

213
00:15:04.840 --> 00:15:11.500
Your function keys like the F6 may not be set up to work out of the box for you.

214
00:15:11.740 --> 00:15:18.970
You may have had to do a shift function key F6 like hold down on the little button, the little key

215
00:15:18.970 --> 00:15:22.480
that says f n for function and then F6.

216
00:15:22.600 --> 00:15:28.900
And that might be a little hard to do because the f in key may be pretty far away from the F6 key.

217
00:15:29.050 --> 00:15:34.660
So if you want your function keys to work more straightforwardly where you don't have to hold down on

218
00:15:34.660 --> 00:15:37.900
the function button every time you do a function key.

219
00:15:38.050 --> 00:15:44.650
I will add another quick video that will show you how you can go into your system preferences to change

220
00:15:44.650 --> 00:15:44.980
that.

221
00:15:45.460 --> 00:15:45.810
All right.

222
00:15:46.760 --> 00:15:48.340
So what else can we do here?

223
00:15:48.350 --> 00:15:53.030
So we have used the plus symbol and we've used the contact method.

224
00:15:53.180 --> 00:15:57.200
Let's go ahead and use some of the other techniques just as a quick little review.

225
00:15:57.410 --> 00:16:00.680
So again, I'm going to encourage you to pause here.

226
00:16:00.680 --> 00:16:01.730
But let's say this.

227
00:16:01.730 --> 00:16:07.370
Let's say you want to concatenate these two parts with the string builder.

228
00:16:07.820 --> 00:16:11.090
So why don't you pause and see if you can remember how to do that?

229
00:16:11.090 --> 00:16:13.340
And I'll give you a moment and then we'll do it together.

230
00:16:16.450 --> 00:16:26.650
OK, so one way that I might do that might be, let's see here, maybe I'll delete this and then I'm

231
00:16:26.650 --> 00:16:30.460
going to make a new string builder.

232
00:16:32.530 --> 00:16:35.170
Keep in mind, string builder, not string buffer.

233
00:16:35.380 --> 00:16:39.820
They both work pretty much identically, or at least in terms of how you use them, but string builder

234
00:16:39.820 --> 00:16:41.500
is newer and just better.

235
00:16:42.340 --> 00:16:44.020
All right, so string builder.

236
00:16:44.470 --> 00:16:49.540
And by the way, one thing I didn't show in the string builder is that you can start off with a string

237
00:16:49.720 --> 00:16:54.370
that you want to append to in the constructor of the string builder.

238
00:16:54.370 --> 00:16:59.050
So I can pass in this Capital First letter here just like that.

239
00:16:59.260 --> 00:17:02.140
And then I can do a dot append.

240
00:17:04.290 --> 00:17:05.400
Second part.

241
00:17:07.470 --> 00:17:09.780
Dot to string.

242
00:17:10.940 --> 00:17:13.370
Just like that, and let's run that.

243
00:17:14.640 --> 00:17:14.870
Yeah.

244
00:17:15.360 --> 00:17:16.540
OK, so that works.

245
00:17:16.560 --> 00:17:25.860
So that's one way, or I could use the no argh default constructor and do a dart append.

246
00:17:28.150 --> 00:17:30.070
Capital First letter this way.

247
00:17:31.450 --> 00:17:31.900
So.

248
00:17:33.110 --> 00:17:40.760
No ARG default constructor, followed by a data pin for the first part and another data pin for the

249
00:17:40.760 --> 00:17:43.670
second part, and then a two string that works as well.

250
00:17:44.030 --> 00:17:48.890
Also recall that you can format this to be a little more readable if you like.

251
00:17:50.260 --> 00:17:54.790
Just like that, or you could even put the two string on its own line as well.

252
00:17:55.600 --> 00:17:56.050
OK.

253
00:17:56.500 --> 00:17:58.390
So you could you could do that.

254
00:17:59.530 --> 00:18:06.070
Also recall that if you want to be hyper efficient, I'll be honest with you, I probably wouldn't bother

255
00:18:06.070 --> 00:18:11.560
with this for something where I'm only appending two strings, but just for, you know, thoroughness.

256
00:18:11.710 --> 00:18:16.900
Recall that you can also do something where you would say where you tell the string builder beforehand

257
00:18:17.110 --> 00:18:21.820
how many characters this whole entire new text string is going to be.

258
00:18:22.090 --> 00:18:24.860
So you could do something like this length.

259
00:18:25.750 --> 00:18:29.380
Plus second part length.

260
00:18:30.620 --> 00:18:36.680
And now the string builder will be hyper optimized with its use of memory.

261
00:18:37.490 --> 00:18:39.290
Now one more thing I want to show you here.

262
00:18:39.350 --> 00:18:44.300
This is maybe kind of a lot to be sticking inside of this constructor here.

263
00:18:44.450 --> 00:18:50.450
So again, you could refactor this out to be a little more clear as to why you have that there.

264
00:18:50.450 --> 00:18:57.590
So I've selected the Capital First letter, that length plus second part length, and I'm going to do

265
00:18:57.590 --> 00:19:00.080
a command option v again here.

266
00:19:00.800 --> 00:19:08.360
So the idea is suggesting that this new variable could be called capacity, and I will accept that for

267
00:19:08.360 --> 00:19:09.020
right now.

268
00:19:09.530 --> 00:19:16.460
And it got that word capacity because the string builder constructor that takes the capacity setting

269
00:19:16.460 --> 00:19:20.110
here names that parameter as the word capacity.

270
00:19:20.120 --> 00:19:24.670
In fact, here if we just jump in real quick to this constructor.

271
00:19:25.950 --> 00:19:27.520
So this is the actual code.

272
00:19:27.540 --> 00:19:30.690
Well, this is some of the code for that constructor.

273
00:19:31.200 --> 00:19:38.220
Its input is called capacity and intelligence saw that, and it said, well, if they're calling it

274
00:19:38.220 --> 00:19:42.360
capacity, then maybe you want your variable to be called capacity as well.

275
00:19:42.810 --> 00:19:44.190
So that's where that came from.

276
00:19:44.970 --> 00:19:46.590
And of course, I could call this something else.

277
00:19:46.590 --> 00:19:50.220
I could put my cursor here on this word capacity, and it doesn't matter.

278
00:19:50.220 --> 00:19:57.300
I could put it here on this capacity or there on that capacity, and I can do a shift f six to rename

279
00:19:57.750 --> 00:19:58.920
this variable.

280
00:19:59.100 --> 00:20:02.220
And maybe I want to call it total length.

281
00:20:03.090 --> 00:20:06.300
And notice it changed that name in both places.

282
00:20:07.250 --> 00:20:09.660
OK, so it doesn't matter where you put the cursor.

283
00:20:09.680 --> 00:20:13.400
The idea is smart enough to know where to find that, OK.

284
00:20:13.580 --> 00:20:18.140
And obviously we also learned that we could do this with string that format method.

285
00:20:18.140 --> 00:20:21.190
But I'm not going to show that I will leave it to you to play with that.

286
00:20:21.200 --> 00:20:24.920
Or you could go back and review that part of the concatenation VIDEO.

287
00:20:26.000 --> 00:20:31.520
OK, so I think that's going to wrap up our lesson on substring.

288
00:20:31.670 --> 00:20:35.570
Pretty straightforward, and I will see you in the next one.
