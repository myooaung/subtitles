WEBVTT
1
00:00:00.630 --> 00:00:06.870
OK, next up, we're going to learn about the compare to method, this method can basically tell you

2
00:00:06.870 --> 00:00:12.480
the order in which two strings are relative to each other, in other words, four Latin strings or Latin

3
00:00:12.480 --> 00:00:12.990
text.

4
00:00:13.140 --> 00:00:18.030
It can let you know which string comes first in alphabetical order.

5
00:00:18.330 --> 00:00:23.050
But it can also do this for non Latin text, which is actually pretty cool.

6
00:00:23.070 --> 00:00:31.050
So it has a notion of awareness, if you will, of the rules of order for text in other languages.

7
00:00:31.230 --> 00:00:36.660
OK, so to show how this works will, as usual, create two strings first.

8
00:00:38.200 --> 00:00:47.740
Word equals, and I don't know, let's make it Apple and second word equals banana.

9
00:00:48.930 --> 00:00:54.680
And we'll use our trusty system out that print line, and we will just do something like first word

10
00:00:54.700 --> 00:00:58.470
that compare to second word.

11
00:00:58.770 --> 00:00:59.190
All right.

12
00:00:59.580 --> 00:01:03.180
And so if we run this, we get a negative one.

13
00:01:03.600 --> 00:01:07.440
Now, the way that the compare to method works is pretty simple.

14
00:01:07.710 --> 00:01:10.650
It takes the string that it is part of.

15
00:01:10.680 --> 00:01:14.880
So in other words, the first string here and it compares it to the second string.

16
00:01:15.000 --> 00:01:22.260
If the first string comes before the second string, then the compare to method returns a negative number,

17
00:01:22.560 --> 00:01:24.270
something less than zero.

18
00:01:24.930 --> 00:01:31.110
If the first string is the same as the second string, then compared to returns a zero.

19
00:01:31.410 --> 00:01:39.270
And if the first string would come after the second string, then compared to returns, a positive number

20
00:01:39.270 --> 00:01:41.700
or a number greater than zero.

21
00:01:42.030 --> 00:01:42.500
OK.

22
00:01:42.750 --> 00:01:45.360
So it's fairly straightforward in that regard.

23
00:01:45.660 --> 00:01:54.270
So if we were to change this word here, banana to apple, just like so and then rerun this, we now

24
00:01:54.270 --> 00:01:56.430
get a zero because they are the same.

25
00:01:56.940 --> 00:02:02.730
And then if we were to change this second word to a word that comes before Apple in alphabetical order

26
00:02:02.730 --> 00:02:06.960
for Latin characters such as Aardvark, let's run this.

27
00:02:08.290 --> 00:02:08.740
OK.

28
00:02:08.920 --> 00:02:15.670
So, yeah, we're getting a positive number now because Apple comes after Aardvark.

29
00:02:16.650 --> 00:02:23.490
All right, now, there's another variation of the compare to method, and that is compared to ignore

30
00:02:23.490 --> 00:02:27.510
case, and this does pretty much exactly what it sounds like it does.

31
00:02:27.510 --> 00:02:36.060
It ignores case so well, actually, first, if we would go back here and I'm going to make this word

32
00:02:36.450 --> 00:02:40.800
Apple also, but let's make that with a lowercase a.

33
00:02:41.100 --> 00:02:42.350
And now let's see what we get.

34
00:02:42.360 --> 00:02:48.180
So before when we had both Capital A for Apple and Apple, we got a zero because they were the same.

35
00:02:48.360 --> 00:02:49.650
What do we get now?

36
00:02:52.680 --> 00:03:00.030
OK, so now it's saying that Apple, with a capital A. comes before Apple with a lowercase A. So there's

37
00:03:00.030 --> 00:03:01.170
a difference here.

38
00:03:01.440 --> 00:03:01.800
Right?

39
00:03:02.130 --> 00:03:09.600
However, if we switch over to using the ignore case version now, let's run it and see.

40
00:03:11.860 --> 00:03:13.150
Now we get a zero.

41
00:03:13.360 --> 00:03:17.110
OK, so the ignore case literally just ignores the case, right?

42
00:03:17.200 --> 00:03:24.520
And internally, it may be doing that by simply lower casing both strings and then comparing them or

43
00:03:24.520 --> 00:03:27.490
upper casing both strings and then comparing them something like that.

44
00:03:27.790 --> 00:03:32.530
Which is why when we learned about upper and lower case earlier, I said that sometimes you'll want

45
00:03:32.530 --> 00:03:37.990
to do things like that and even stripping, leading and trailing spaces out of words and strings so

46
00:03:37.990 --> 00:03:41.200
that you can kind of normalize the string before you compare it.

47
00:03:41.350 --> 00:03:41.770
OK.

48
00:03:41.950 --> 00:03:46.660
And so presumably something along those lines is probably what this method is doing.

49
00:03:46.690 --> 00:03:51.850
OK, so that should give you some insights as to how you maybe could write that method yourself or at

50
00:03:51.850 --> 00:03:52.870
least a part of it.

51
00:03:53.620 --> 00:03:54.090
All right.

52
00:03:54.100 --> 00:03:59.770
And then the last thing I want to show probably won't be very applicable to many people, but it's kind

53
00:03:59.770 --> 00:04:00.700
of a neat little thing.

54
00:04:00.700 --> 00:04:06.580
I think that the creators of Java took the time to do this, and that is the fact that this works not

55
00:04:06.580 --> 00:04:12.370
only with Latin based strings, but with texts of other languages as well.

56
00:04:12.490 --> 00:04:16.750
So I'm going to enter some Korean text.

57
00:04:18.040 --> 00:04:19.510
As a demonstration here.

58
00:04:20.760 --> 00:04:25.500
So I'm going to switch over to Korean and I'll type a word like Qana.

59
00:04:27.250 --> 00:04:27.700
OK.

60
00:04:30.230 --> 00:04:31.890
And then here, I'll do the opposite.

61
00:04:32.210 --> 00:04:32.810
Nagar.

62
00:04:34.460 --> 00:04:34.820
All right.

63
00:04:35.000 --> 00:04:40.070
Now I happen to know that in the Korean language car comes before NA.

64
00:04:40.640 --> 00:04:40.980
All right.

65
00:04:41.000 --> 00:04:45.050
So that's their alphabet alphabetical order, if you will.

66
00:04:45.080 --> 00:04:49.430
OK, so this word of should come before Naga.

67
00:04:50.120 --> 00:04:55.970
Let's see what what the ID has to say here, and I guess I can leave the ignore case.

68
00:04:58.760 --> 00:05:01.370
Because Korean doesn't actually have case.

69
00:05:01.700 --> 00:05:07.610
OK, so indeed, the Java is saying that Ghana comes before Nagar.

70
00:05:08.420 --> 00:05:08.870
All right.

71
00:05:09.230 --> 00:05:15.800
And now if I change the second word to just.

72
00:05:16.800 --> 00:05:18.720
Car like that.

73
00:05:18.750 --> 00:05:19.950
Now let's see what we get.

74
00:05:23.270 --> 00:05:30.020
OK, now we get a positive number, meaning that the second word would come alphabetically before the

75
00:05:30.020 --> 00:05:31.790
first word, which is correct.

76
00:05:32.120 --> 00:05:38.900
So this just gives you a little bit of a glimpse into the fact that the compare to Method is actually

77
00:05:38.930 --> 00:05:41.720
even aware of alphabetical rules.

78
00:05:41.720 --> 00:05:46.520
And I'm using that term loosely because there's lots of language systems that don't use an alphabet.

79
00:05:46.700 --> 00:05:48.110
But you know what I mean?

80
00:05:48.530 --> 00:05:56.690
It's aware of the alphabet medical rules in different character sets or languages, essentially beyond

81
00:05:56.690 --> 00:05:57.440
just Latin.

82
00:05:57.620 --> 00:06:05.840
I'm going to give a little challenge now just as we implemented our own version of the strip method

83
00:06:05.840 --> 00:06:06.500
before.

84
00:06:06.650 --> 00:06:13.700
Why don't you try creating your own version of the compare to Ignore case method, which will be based

85
00:06:13.700 --> 00:06:14.980
on the compare to method?

86
00:06:14.990 --> 00:06:20.000
So in other words, you don't need to create your own compare to method you'll use compared to, but

87
00:06:20.000 --> 00:06:26.660
you'll implement a little bit extra so that it can ignore the case and you can do it the same way that

88
00:06:26.660 --> 00:06:31.520
we did before, so you can add a static method.

89
00:06:35.870 --> 00:06:40.560
Now I'm going to give you a little hint here that it needs to return an integer, OK?

90
00:06:40.910 --> 00:06:47.690
And you can name it the same compared to ignore case and it can take a string.

91
00:06:49.640 --> 00:06:52.820
So you'd want to have two inputs.

92
00:06:53.060 --> 00:07:01.970
I don't know, I'm just going to call mine text one and string text to OK and then go ahead and see

93
00:07:01.970 --> 00:07:08.660
if you can implement your own version of the Compare to Ignore case, where you're still going to use

94
00:07:08.690 --> 00:07:13.520
the compare to method, but you're going to implement a way to ignore the case on your own.

95
00:07:14.030 --> 00:07:15.500
And go ahead and pause the video.

96
00:07:15.500 --> 00:07:18.500
See if you can work that out, and then I will see you when you get back.

97
00:07:20.660 --> 00:07:22.430
OK, so let's see how you did.

98
00:07:22.700 --> 00:07:26.390
Let me show you a way that I might go about doing this.

99
00:07:26.570 --> 00:07:36.020
I think what I would do is first, I might actually create two new local variables, so maybe I'll do

100
00:07:36.020 --> 00:07:38.000
something like lower text.

101
00:07:38.000 --> 00:07:44.600
One equals text one dot to lowercase.

102
00:07:47.410 --> 00:07:56.290
Then lower text two equals text to two, lower to lower case.

103
00:07:58.540 --> 00:08:02.740
Now, of course, what you name these variables doesn't really matter, but it should be something that's

104
00:08:02.740 --> 00:08:03.700
kind of meaningful.

105
00:08:04.420 --> 00:08:04.840
All right.

106
00:08:05.230 --> 00:08:09.220
Then I can now do something like return.

107
00:08:10.210 --> 00:08:13.750
Lower tax, one that compare to.

108
00:08:15.240 --> 00:08:17.940
Lower text to.

109
00:08:19.490 --> 00:08:20.360
Just like that.

110
00:08:20.900 --> 00:08:29.030
And so by doing this, we have created our own poor man's version of the ignore case method, essentially,

111
00:08:29.630 --> 00:08:34.640
now I'm excluding all the distinctions of local here.

112
00:08:34.670 --> 00:08:36.710
I'm not getting quite that fancy with it.

113
00:08:38.290 --> 00:08:47.160
But let's see here, so if we go back to a simpler example of Apple vs. Oops versus yikes.

114
00:08:48.750 --> 00:08:49.590
Versus.

115
00:08:52.270 --> 00:08:53.980
Apple like so.

116
00:08:55.190 --> 00:09:04.310
And and we're going to change this out to call our method now compare to ignore case.

117
00:09:04.790 --> 00:09:09.440
First word come a second word just like that, OK?

118
00:09:10.560 --> 00:09:13.500
So now let's run this, and hopefully we should get a zero.

119
00:09:15.250 --> 00:09:15.730
Cool.

120
00:09:16.330 --> 00:09:19.510
So we did get a zero, so looks like that is working.

121
00:09:20.110 --> 00:09:20.440
All right.

122
00:09:20.440 --> 00:09:27.910
So that's a way that you could use the two lowercase to implement your own partial version of the compare

123
00:09:27.910 --> 00:09:29.440
to ignore case method.

124
00:09:29.470 --> 00:09:29.920
OK.

125
00:09:30.340 --> 00:09:30.650
All right.

126
00:09:30.670 --> 00:09:31.570
And that's going to rapid.

127
00:09:31.570 --> 00:09:34.360
Wrap it up for this lesson, and I'll see you in the next one.
