WEBVTT
1
00:00:00.360 --> 00:00:07.980
All right, so up until now, we've been using the regular expression engine to match patterns against

2
00:00:07.980 --> 00:00:09.730
an entire string, right?

3
00:00:09.750 --> 00:00:15.630
So for example, here's an entire multi-line string in this particular example.

4
00:00:15.840 --> 00:00:21.240
And we've been creating regular expressions that match the whole entire string.

5
00:00:21.540 --> 00:00:26.130
And as such, we're able to extract bits and pieces out of that string.

6
00:00:26.310 --> 00:00:33.330
However, there is another way to use the regular expression engine to match repeating patterns within

7
00:00:33.330 --> 00:00:33.970
a string.

8
00:00:33.990 --> 00:00:35.790
And we're going to take a look at that now.

9
00:00:36.240 --> 00:00:40.710
So let's create another class in our source folder.

10
00:00:40.740 --> 00:00:45.480
I will right click on the source folder and go to new Java class.

11
00:00:45.780 --> 00:00:51.900
And I don't know, maybe I will call this people matching.

12
00:00:52.020 --> 00:00:54.390
All right and return.

13
00:00:54.840 --> 00:00:55.110
All right.

14
00:00:55.110 --> 00:01:02.160
So let's say that we have this class and we have another multi line string.

15
00:01:02.160 --> 00:01:10.440
So private string people I'm going to call it equals, and I'm going to make another text block or multi-line

16
00:01:10.440 --> 00:01:12.450
string with three quotes.

17
00:01:12.930 --> 00:01:14.790
And uh, let's see.

18
00:01:14.790 --> 00:01:19.320
I put my semicolon here and I'm going to make a new line here and I'm going to indent a little bit as

19
00:01:19.320 --> 00:01:19.590
well.

20
00:01:19.770 --> 00:01:28.170
So let's make a multi line string that represents a bunch of people, and we will type out these people

21
00:01:28.410 --> 00:01:33.900
with their first name, last name and maybe one or two attributes about them separated by commas.

22
00:01:33.930 --> 00:01:43.560
OK, so let's do something like Flintstone Fred, and let's come up with a date like a date of birth.

23
00:01:43.890 --> 00:01:54.210
Let's say one one nineteen hundred and then a new line and c rubble Barney.

24
00:01:54.930 --> 00:01:57.810
And we'll just do two to nineteen.

25
00:01:57.810 --> 00:02:01.010
Oh, five and another one.

26
00:02:01.020 --> 00:02:03.210
I don't even remember Fred Flintstone wife's name.

27
00:02:03.210 --> 00:02:04.320
These are cartoon characters.

28
00:02:04.320 --> 00:02:08.850
For those of you who did not grow up watching American cartoons, these are cartoon characters.

29
00:02:09.090 --> 00:02:09.960
Let's see.

30
00:02:10.110 --> 00:02:13.830
Wilma, I think, was Fred's wife's name Wilma.

31
00:02:14.580 --> 00:02:19.650
Three three, 1910 and rubble Betty.

32
00:02:20.250 --> 00:02:24.390
I think four four, 1915.

33
00:02:24.540 --> 00:02:26.520
And maybe that's enough people for right now.

34
00:02:26.610 --> 00:02:36.210
OK, so we've got this list of people, and let's say we just want to print each person out in a row,

35
00:02:36.240 --> 00:02:42.700
OK, but we want to pass this string out per person.

36
00:02:42.720 --> 00:02:51.420
OK, so first off, let's see what a regex might look like that can just grab the key fields of one

37
00:02:51.420 --> 00:02:51.970
person.

38
00:02:51.990 --> 00:02:54.880
OK, so let's let's try creating that rejects.

39
00:02:56.130 --> 00:02:56.480
Let's see.

40
00:02:56.490 --> 00:02:57.700
So we'll make a string.

41
00:02:57.760 --> 00:03:03.900
Rag X equals so we've got a bunch of word characters followed by a comma, right?

42
00:03:04.140 --> 00:03:12.240
So I'm going to say the word characters one or more, followed by a comma.

43
00:03:12.750 --> 00:03:15.150
And then we've got a space here.

44
00:03:15.450 --> 00:03:16.920
Maybe that space would be there.

45
00:03:16.920 --> 00:03:17.910
Maybe it wouldn't.

46
00:03:18.210 --> 00:03:26.280
So I will be careful here and I'll say, like, there's a let's say that there's there could be zero

47
00:03:26.280 --> 00:03:36.840
or more spaces followed by one or more word characters again and a comma, followed by zero or more

48
00:03:36.840 --> 00:03:37.520
spaces.

49
00:03:37.530 --> 00:03:40.620
So now I'm on this space right here.

50
00:03:41.810 --> 00:03:43.430
See, room or spaces.

51
00:03:43.580 --> 00:03:46.420
Followed by now.

52
00:03:47.270 --> 00:03:51.980
My date's here happen to only be one digit, one digit and then four digits.

53
00:03:51.980 --> 00:03:57.500
But if I went up to like 10, 11 and 12, then you could certainly have two digits.

54
00:03:57.500 --> 00:04:09.020
So let's say followed by one to two digits, followed by a forward slash, followed by one to two digits.

55
00:04:10.260 --> 00:04:16.770
Followed by another forward slash, followed by four digits.

56
00:04:17.990 --> 00:04:19.490
Followed by.

57
00:04:20.520 --> 00:04:22.200
A new line character.

58
00:04:23.170 --> 00:04:23.400
Right.

59
00:04:23.510 --> 00:04:28.360
A new line character being, you know, the end of that line and moving on to the next line.

60
00:04:28.630 --> 00:04:30.640
OK, so let's let's do that.

61
00:04:30.760 --> 00:04:36.860
OK, now let's also use named Captur groups, though, to capture the bits that we actually care about.

62
00:04:36.880 --> 00:04:44.170
Now I'm going to surround these parts, so we'll make a named capture group with a parenthesis opening

63
00:04:44.170 --> 00:04:46.150
parentheses question mark.

64
00:04:46.750 --> 00:04:48.220
Less than symbol.

65
00:04:48.220 --> 00:04:49.810
And we'll name this field.

66
00:04:50.350 --> 00:04:51.730
Last name?

67
00:04:52.660 --> 00:04:56.360
Close that, and then we'll close this.

68
00:04:56.380 --> 00:04:59.710
Be sure not to include the comma or the spaces.

69
00:04:59.710 --> 00:05:01.150
We don't want any of that.

70
00:05:01.930 --> 00:05:04.510
And then we'll do the same thing for the first name.

71
00:05:05.170 --> 00:05:06.790
First name.

72
00:05:07.630 --> 00:05:10.750
And then we'll wrap that in a closing.

73
00:05:11.920 --> 00:05:19.000
Parentheses and do the same again for the date of birth, right?

74
00:05:20.500 --> 00:05:21.640
Let's see.

75
00:05:22.300 --> 00:05:22.690
Oops.

76
00:05:25.080 --> 00:05:27.780
And I will just call it hobby, I guess.

77
00:05:28.740 --> 00:05:31.650
And then we'll close that, let me make some space here.

78
00:05:35.790 --> 00:05:36.190
All right.

79
00:05:36.210 --> 00:05:36.870
And.

80
00:05:38.540 --> 00:05:42.020
That should close that capture group.

81
00:05:43.370 --> 00:05:49.520
OK, so there's our rejects, and then we'll go ahead and create our pattern and our match or like we

82
00:05:49.520 --> 00:05:51.620
always do, so we'll create a pattern.

83
00:05:52.700 --> 00:05:55.640
I'll just call it patty pattern.

84
00:05:56.030 --> 00:06:00.980
Compile Rag X, all right, and then we'll make a matcher.

85
00:06:02.120 --> 00:06:11.180
Matt equals Pat matcher, and now we'll give it the input of this string called people.

86
00:06:14.570 --> 00:06:14.990
All right.

87
00:06:15.170 --> 00:06:20.570
Oh, and excuse me, I totally forgot to put all of this inside of a method, didn't I?

88
00:06:21.020 --> 00:06:21.290
Yeah.

89
00:06:21.310 --> 00:06:24.110
So let's go ahead and create a public static void.

90
00:06:24.410 --> 00:06:27.130
Main method SBM.

91
00:06:27.320 --> 00:06:34.310
And then I guess I'm just going to grab all of this stuff and just cut it with the Command X or Control

92
00:06:34.310 --> 00:06:34.820
X.

93
00:06:35.150 --> 00:06:41.780
I'm also going to delete a couple of lines there, and then I will paste all of that inside of the method

94
00:06:41.780 --> 00:06:45.050
like, so of course, now that it's inside of the method.

95
00:06:45.230 --> 00:06:49.370
Visibility keywords are not valid, so I need to get rid of this private.

96
00:06:49.790 --> 00:06:50.600
All right, there we go.

97
00:06:50.750 --> 00:06:51.200
OK.

98
00:06:52.310 --> 00:06:58.670
So up until now, we've been using the pattern in matcher with like something like an f block.

99
00:06:58.670 --> 00:07:03.870
And then we see something like Matt that matches right and then we proceed to do things right.

100
00:07:03.890 --> 00:07:05.720
That's how we've been using it up until now.

101
00:07:05.930 --> 00:07:07.670
So let me now tell you something.

102
00:07:08.000 --> 00:07:09.770
This matches here.

103
00:07:10.010 --> 00:07:16.520
It tries to match the entire string to the regular expression.

104
00:07:16.550 --> 00:07:17.030
OK.

105
00:07:17.480 --> 00:07:24.800
But in this particular case, now we've created a Rag X that's only meant to match one line of this

106
00:07:24.800 --> 00:07:29.240
total string multiple times, and we haven't done this before.

107
00:07:29.240 --> 00:07:35.300
But Java's regular expression implementation does allow us to do this and to do so, though we won't

108
00:07:35.300 --> 00:07:38.040
use match or matches any more.

109
00:07:38.060 --> 00:07:40.670
And instead, we will use.

110
00:07:42.650 --> 00:07:44.930
Matcher Dot find.

111
00:07:46.710 --> 00:07:56.250
So what this method does is it takes our regular expression and tries to find any part of this string

112
00:07:56.460 --> 00:07:59.100
that can match that expression.

113
00:07:59.190 --> 00:07:59.660
OK.

114
00:08:00.120 --> 00:08:04.200
And basically every time we call, find it will move on.

115
00:08:04.230 --> 00:08:06.720
It will try to find the next match.

116
00:08:06.750 --> 00:08:07.230
OK.

117
00:08:07.680 --> 00:08:18.930
So if this regex matches each of these lines properly, then if we called find four times, it should

118
00:08:19.140 --> 00:08:22.810
help us to zero in on each of these four lines.

119
00:08:22.830 --> 00:08:26.100
OK, so let's see what that might look like.

120
00:08:26.130 --> 00:08:28.560
OK, so we're calling matched find.

121
00:08:28.830 --> 00:08:33.640
So that should zero in on this sub string right here.

122
00:08:33.660 --> 00:08:34.140
OK.

123
00:08:34.470 --> 00:08:41.020
And now from here, let's just print out the parts of of the of whatever it matches.

124
00:08:41.040 --> 00:08:41.460
OK.

125
00:08:41.790 --> 00:08:42.420
So we'll do it.

126
00:08:42.570 --> 00:08:43.490
So you T..

127
00:08:44.040 --> 00:08:50.100
And let's first print out the first name, so we'll do a match dot group.

128
00:08:52.130 --> 00:08:53.570
First name.

129
00:08:55.450 --> 00:08:56.780
And let's just.

130
00:08:57.640 --> 00:09:04.690
And then we can do another so you t matched group last name.

131
00:09:05.350 --> 00:09:11.770
And one more for the date of birth matched group Dobby.

132
00:09:12.010 --> 00:09:12.380
All right.

133
00:09:12.490 --> 00:09:13.960
So let's just run that.

134
00:09:13.960 --> 00:09:18.010
And hopefully what we should get is Fred Flintstone one one nine.

135
00:09:18.640 --> 00:09:18.940
Right?

136
00:09:19.180 --> 00:09:20.620
Let's try that out and see.

137
00:09:21.690 --> 00:09:22.650
Hey, there we go.

138
00:09:23.610 --> 00:09:27.230
Yeah, so we got Fred Flintstone one one, 9500.

139
00:09:27.330 --> 00:09:31.050
OK, so now let's see what happens.

140
00:09:31.290 --> 00:09:32.700
Let me minimize this.

141
00:09:32.940 --> 00:09:35.870
Now let's see what happens if we just do this again.

142
00:09:35.880 --> 00:09:40.170
So I'm going to just copy all of that and

143
00:09:42.750 --> 00:09:43.410
paste.

144
00:09:44.610 --> 00:09:51.240
And in fact, let's just go ahead and do it four times three and four.

145
00:09:51.960 --> 00:09:54.510
And now let's run that and see what we get.

146
00:09:57.660 --> 00:09:59.130
I think we got something here.

147
00:09:59.580 --> 00:10:05.850
It's a little messy to look at, but it looks like we got Fred Flintstone his date of birth than another

148
00:10:05.910 --> 00:10:08.580
Barney rubble and his date of birth Wilma.

149
00:10:08.910 --> 00:10:09.750
Her date of birth.

150
00:10:09.750 --> 00:10:10.310
And Betty.

151
00:10:10.320 --> 00:10:10.620
Yep.

152
00:10:10.890 --> 00:10:12.810
So do you see what this does?

153
00:10:13.020 --> 00:10:15.330
Every time we call find.

154
00:10:16.620 --> 00:10:20.590
The regex engine will simply look for this.

155
00:10:21.150 --> 00:10:25.890
Any text in this total string that matches this pattern?

156
00:10:26.400 --> 00:10:32.250
And if it finds an instance that matches it, zeroes in on that.

157
00:10:32.490 --> 00:10:42.180
And then each of the subsequent methods like Match Dot Group will match to just that one instance of

158
00:10:42.180 --> 00:10:43.770
the substring that it found.

159
00:10:43.800 --> 00:10:47.270
OK, so it's hard to explain, but I think you can see what's happening, right?

160
00:10:47.280 --> 00:10:50.040
It's just going to find that pattern everywhere that it exists.

161
00:10:50.250 --> 00:10:55.080
And each time we call Match, it's going to move on to the next pattern.

162
00:10:55.110 --> 00:10:59.910
OK, now we can do a few other things with this.

163
00:11:00.150 --> 00:11:08.370
I'm going to delete the last two, find there so we can do things.

164
00:11:08.400 --> 00:11:11.070
In fact, I think I'll delete all but one.

165
00:11:12.950 --> 00:11:17.450
All right, now, there's another version of Find Method here that takes a.

166
00:11:17.600 --> 00:11:19.340
An index, essentially.

167
00:11:19.580 --> 00:11:24.560
And what that index is, it's it's the starting index into the string.

168
00:11:24.570 --> 00:11:29.690
So in other words, if we don't supply an input to the find method, it will start at the beginning

169
00:11:29.690 --> 00:11:32.180
of the string to look for matches.

170
00:11:32.420 --> 00:11:37.520
But we can tell it to skip over a certain number of characters, according to their index, and then

171
00:11:37.520 --> 00:11:38.540
start from there.

172
00:11:38.570 --> 00:11:43.640
OK, so let's say minor, I'm just going to put kind of a random number in here.

173
00:11:43.940 --> 00:11:45.350
25.

174
00:11:45.500 --> 00:11:45.890
OK.

175
00:11:46.040 --> 00:11:47.660
Let's see what that does.

176
00:11:49.100 --> 00:11:56.270
OK, so now at Prince Barney rubble, so what we just told it to do was to skip past the first 25 or

177
00:11:56.270 --> 00:12:01.490
so characters, which I don't know exactly where that's going to land, but apparently it lands somewhere

178
00:12:01.490 --> 00:12:02.270
in here.

179
00:12:02.510 --> 00:12:09.440
And so then when it starts looking for a match, it won't match this first line because it's not starting

180
00:12:09.440 --> 00:12:12.230
at the beginning, which this expression requires.

181
00:12:12.470 --> 00:12:16.250
So then it has to move on to the next line, which is Barney rubble.

182
00:12:16.460 --> 00:12:23.150
Now I bet if I make this sufficiently large, it'll skip past Barney rubble as well and go on to Wilma.

183
00:12:23.990 --> 00:12:24.620
Let's see.

184
00:12:25.990 --> 00:12:26.300
Yep.

185
00:12:26.530 --> 00:12:28.240
It goes on to Wilma now.

186
00:12:28.390 --> 00:12:33.220
So this is a nice way that you can skip past, you can skip past certain parts.

187
00:12:33.700 --> 00:12:39.370
Now we can also get a little bit of extra information from a particular match.

188
00:12:39.610 --> 00:12:40.600
So let's see.

189
00:12:40.600 --> 00:12:43.510
I will print out if we do match dot.

190
00:12:43.750 --> 00:12:45.070
Let's see what we've got here.

191
00:12:45.520 --> 00:12:46.620
We can do.

192
00:12:46.630 --> 00:12:49.120
We can get the starting index.

193
00:12:51.240 --> 00:12:52.200
So that'll be.

194
00:12:52.500 --> 00:12:56.970
What what character did that particular match start on?

195
00:12:58.060 --> 00:12:58.540
OK.

196
00:12:58.780 --> 00:13:03.010
And we can also get the ending index, so I'll.

197
00:13:05.110 --> 00:13:05.650
And.

198
00:13:07.240 --> 00:13:08.800
So if we run this.

199
00:13:10.330 --> 00:13:12.580
OK, so the starting index is 51.

200
00:13:12.820 --> 00:13:20.110
So if I were to count each character in here, which I'm not going to do, what we would find is that

201
00:13:20.110 --> 00:13:24.970
Wilma is the 51st is Index 51 in this string.

202
00:13:24.980 --> 00:13:31.000
In other words, if we started here zero one two three four five six and so on and so forth.

203
00:13:31.720 --> 00:13:32.110
OK.

204
00:13:32.230 --> 00:13:38.800
We also can get the start and end indexes for any captured groups.

205
00:13:38.860 --> 00:13:42.010
So we've got one, two, three capture groups here.

206
00:13:42.250 --> 00:13:49.870
So if we wanted to know what index does Wilma's first name start on, we could.

207
00:13:49.870 --> 00:13:51.820
We could determine that pretty easily.

208
00:13:51.970 --> 00:13:58.120
We can simply come up here and instead of printing out the the starting index for the entire string,

209
00:13:58.660 --> 00:14:01.930
we could supply the name of the capture group.

210
00:14:02.380 --> 00:14:05.200
So first name?

211
00:14:06.220 --> 00:14:13.180
And so this will tell us the index of where Wilma's first name began, so let's run that and see and

212
00:14:13.180 --> 00:14:17.080
actually we can do the same for the end index as well.

213
00:14:17.890 --> 00:14:19.120
First name.

214
00:14:21.120 --> 00:14:21.870
Let's run that.

215
00:14:23.920 --> 00:14:29.830
OK, so Wilmoth first name begins on index 62, let's see, so that would be here.

216
00:14:29.860 --> 00:14:32.710
So that is Index 62.

217
00:14:33.130 --> 00:14:41.020
So you really have a lot of cool control over drilling in even in the event that you have a repeating

218
00:14:41.020 --> 00:14:44.540
pattern throughout your input text.

219
00:14:44.610 --> 00:14:45.090
OK.

220
00:14:45.190 --> 00:14:48.040
And there's a few other methods in here.

221
00:14:48.250 --> 00:14:51.100
Let's see if there's anything else I care to explain.

222
00:14:51.200 --> 00:14:54.040
See, so we can get the start, we can get the end.

223
00:14:54.310 --> 00:14:57.460
We can skip over things with find with a start.

224
00:14:57.640 --> 00:14:58.570
We can.

225
00:14:58.630 --> 00:15:03.190
Yeah, we can do replacements on on text that we find as well.

226
00:15:03.310 --> 00:15:05.080
So that's kind of neat sometimes.

227
00:15:05.320 --> 00:15:10.480
Or we can we can replace text, we can append things to parts that we find.

228
00:15:11.170 --> 00:15:19.120
So a number of fairly nice utility methods to let us further manipulate the text that we find with these

229
00:15:19.120 --> 00:15:20.560
regular expressions.

230
00:15:20.980 --> 00:15:21.390
All right.

231
00:15:21.400 --> 00:15:24.580
So that's about all I wanted to show.

232
00:15:24.610 --> 00:15:30.760
I will point out, though, we may revisit Rig X a tiny bit more when we learn about control flow,

233
00:15:30.790 --> 00:15:32.500
which is where we'll learn about loops.

234
00:15:32.770 --> 00:15:40.090
Because as you can see here, when we call Nachiket, find multiple times, it gives us subsequent matches

235
00:15:40.090 --> 00:15:40.780
that it finds.

236
00:15:41.020 --> 00:15:47.590
That's a perfect place where we could use certain types of loops to just automatically loop through

237
00:15:47.590 --> 00:15:50.770
and keep looping until there are no more matches, right?

238
00:15:51.100 --> 00:15:56.110
So we'll probably take a brief look at that in the control flow module.

239
00:15:56.140 --> 00:16:03.280
So now you are well-armed to be able to use regular expressions to extract data in a number of ways.

240
00:16:03.610 --> 00:16:05.830
So with that, I will see you in the next one.
