WEBVTT
1
00:00:00.240 --> 00:00:08.790
All right, so in the last lesson, we converted the employee interface into a class which is now a

2
00:00:08.790 --> 00:00:17.760
super class of a class hierarchy and thereby making the programmer manager, CEO and analyst classes

3
00:00:18.000 --> 00:00:21.690
subclasses now of the employee class.

4
00:00:22.080 --> 00:00:29.340
And we did that so that we could reduce a lot of the duplication that existed in the programmer class.

5
00:00:29.490 --> 00:00:34.980
We had the first name, last name, date of birth fields, and then we had a bunch of code that was

6
00:00:34.980 --> 00:00:41.370
parsing data out of this person, text string using some regular expressions and things and then putting

7
00:00:41.370 --> 00:00:43.080
them into those fields.

8
00:00:43.230 --> 00:00:46.210
And now we can do all of that just in the super class.

9
00:00:46.230 --> 00:00:52.530
So now in this lesson, we're just going to do the same refactoring surgery on the remaining classes

10
00:00:52.530 --> 00:00:53.120
quickly.

11
00:00:53.130 --> 00:00:55.020
So we'll jump over here into manager.

12
00:00:55.290 --> 00:00:57.940
And so now let's see.

13
00:00:57.960 --> 00:01:03.300
We can get rid of a number of things we can get rid of.

14
00:01:03.300 --> 00:01:11.280
The people rejects the people pattern, the date, time, formatter and the money format.

15
00:01:11.490 --> 00:01:22.950
And then we can also get rid of all of these first bits here because this is all now handled by the

16
00:01:22.950 --> 00:01:23.970
super class.

17
00:01:24.150 --> 00:01:27.070
So I'm going to simply delete these.

18
00:01:27.090 --> 00:01:27.660
First, what is it?

19
00:01:27.660 --> 00:01:31.020
Five lines of code inside of the constructor?

20
00:01:31.170 --> 00:01:36.840
And I'm also going to get rid of this unnecessary closing curly brace.

21
00:01:37.590 --> 00:01:41.820
And then I'm going to select all of this and unintended.

22
00:01:42.240 --> 00:01:49.770
And then the very first thing we want to call now is super with and then passing the person text and

23
00:01:49.770 --> 00:01:55.530
then closed that off so that we still call the code that we just got rid of.

24
00:01:55.530 --> 00:01:59.470
Write that code that we just got rid of is in the super class, right?

25
00:01:59.490 --> 00:02:03.360
So if I jump in, if I command, click on this word super.

26
00:02:03.360 --> 00:02:08.030
In fact, it takes me to the constructor of of the employee class.

27
00:02:08.040 --> 00:02:13.680
OK, so super just calls the constructor of the parent class or the super class.

28
00:02:13.710 --> 00:02:14.160
OK.

29
00:02:14.790 --> 00:02:15.600
All right.

30
00:02:15.680 --> 00:02:16.860
Let's see.

31
00:02:16.860 --> 00:02:18.450
What else are we missing?

32
00:02:18.450 --> 00:02:20.550
And then I've got these unnecessary.

33
00:02:20.880 --> 00:02:25.590
Well, we've got a few things here so we can get rid of the two string method here because that's already

34
00:02:25.590 --> 00:02:29.230
being implemented in the super class.

35
00:02:29.280 --> 00:02:30.960
So got rid of that.

36
00:02:31.320 --> 00:02:36.990
And now I think we can just reorganize these imports with the control option.

37
00:02:36.990 --> 00:02:42.510
Oh, so that just got rid of those unused import lines.

38
00:02:42.510 --> 00:02:44.880
And I believe we're about done here.

39
00:02:44.880 --> 00:02:48.540
I'm going to maybe get rid of that little empty space there.

40
00:02:49.480 --> 00:02:53.290
Because I kind of wanted to see the entire class fit in one page view here.

41
00:02:54.100 --> 00:02:56.440
And I think that's looking pretty good.

42
00:02:57.370 --> 00:02:57.670
All right.

43
00:02:57.700 --> 00:03:02.170
And then we'll jump over to the CEO class and do the exact same things again.

44
00:03:02.620 --> 00:03:03.880
So let's see here.

45
00:03:03.880 --> 00:03:10.000
I'm going to get rid of the people rag ax and the people pattern and the date time format and the money

46
00:03:10.000 --> 00:03:10.900
form matter.

47
00:03:11.170 --> 00:03:14.140
And in here, I'll do it a little bit different order.

48
00:03:14.140 --> 00:03:22.780
This time I'm going to call super person text call all of that and then I'm going to get rid of all

49
00:03:22.780 --> 00:03:25.290
of these lines down to the this idea.

50
00:03:25.330 --> 00:03:29.590
Be because the super method call there is doing all of these lines now.

51
00:03:29.590 --> 00:03:36.520
So I'm going to just delete all of that and I'm going to delete that unused closing curly brace.

52
00:03:36.760 --> 00:03:45.130
And then I'm going to use those and then I'm going to select all of this and unimportant like so looking

53
00:03:45.130 --> 00:03:46.210
pretty good.

54
00:03:46.480 --> 00:03:55.360
And I'm going to get rid of the two string method here because it is being inherited anyway and then

55
00:03:55.360 --> 00:04:03.220
clean up the imports with a control option, which is control alt, by the way, for Windows and Linux.

56
00:04:04.800 --> 00:04:08.710
And that's looking really nice, really, really nice.

57
00:04:08.730 --> 00:04:15.000
And finally, the analyst class, I'm going to do the same things again, get rid of the people rag

58
00:04:15.000 --> 00:04:23.370
x people pattern date, time, format or no format, or I'm going to call super person text.

59
00:04:24.630 --> 00:04:30.670
Then I'm going to get rid of all of these lines that are being handled by super down to the this that

60
00:04:30.690 --> 00:04:34.860
Dobby and just do a command delete to get rid of all of that.

61
00:04:35.100 --> 00:04:39.480
Come down here, get rid of this unused closing curly brace.

62
00:04:39.900 --> 00:04:45.150
Select all of these lines here to undo.

63
00:04:45.150 --> 00:04:48.330
Let them come down here.

64
00:04:48.570 --> 00:04:56.010
Get rid of the two string method and its annotation, by the way, and I'll get rid of that unused,

65
00:04:56.190 --> 00:04:57.450
empty line there.

66
00:04:57.570 --> 00:05:01.470
And then finally get rid of these unused imports with a control option.

67
00:05:01.510 --> 00:05:03.390
Oh, there we go.

68
00:05:04.890 --> 00:05:09.360
All right, I think I am done with all of these refactoring.

69
00:05:10.140 --> 00:05:12.560
So now let's see if I broke anything.

70
00:05:12.590 --> 00:05:17.760
So I'm going to come over here to Maine and I'm just going to run it and see what happens.

71
00:05:20.420 --> 00:05:23.540
And look at that, we still get 8.6 million.

72
00:05:23.990 --> 00:05:29.210
So, yeah, I don't think we broke anything right?

73
00:05:29.630 --> 00:05:35.150
And we shouldn't have really, because again, all we've really done is just to shuffle code around.

74
00:05:35.420 --> 00:05:40.520
But well, we've done two things we've shuffled code around again, but by shuffling some of the duplicate

75
00:05:40.520 --> 00:05:47.990
code that we had in those four subclasses all up into the superclass, now we don't need the duplication

76
00:05:47.990 --> 00:05:48.620
anymore.

77
00:05:48.650 --> 00:05:49.160
OK.

78
00:05:49.340 --> 00:05:56.450
And so there are now actually fewer lines of code in the entire program because there's less duplication

79
00:05:56.480 --> 00:05:56.900
now.

80
00:05:57.110 --> 00:05:57.530
Right?

81
00:05:57.620 --> 00:06:01.130
So let's just go take a look at the employee class one more time here.

82
00:06:01.160 --> 00:06:01.440
Right?

83
00:06:01.460 --> 00:06:09.170
So yeah, all of these bits here are all in common to the four subclasses.

84
00:06:10.130 --> 00:06:13.340
Let's take another look at some of the subclasses one.

85
00:06:13.520 --> 00:06:22.640
One last time to see so now what's left in these subclasses is ideally just the fields and code that

86
00:06:22.850 --> 00:06:26.150
are unique to that particular subclass.

87
00:06:26.180 --> 00:06:26.480
Right?

88
00:06:26.720 --> 00:06:30.860
So programmers only care about lines of code, years of experience in IQ.

89
00:06:30.980 --> 00:06:32.660
And so that's all we're seeing here.

90
00:06:33.380 --> 00:06:42.590
And the programmer constructor is only concerned with what it takes to pass out the lines of code years

91
00:06:42.590 --> 00:06:47.300
of experience in IQ and set those on its internal fields, right?

92
00:06:47.420 --> 00:06:50.660
And so that's the main concern that you see here.

93
00:06:50.930 --> 00:06:55.310
All of the other parts, like what it takes to parse out the first name, last name and date of birth.

94
00:06:55.550 --> 00:07:02.450
That's common to all of the different employee subtypes, and therefore we just put all of that code

95
00:07:02.720 --> 00:07:06.080
up into the employee superclass, right?

96
00:07:06.170 --> 00:07:10.700
And we just handle it universally for all employee types.

97
00:07:11.030 --> 00:07:18.290
And in order to benefit from that, the only thing we have to do is that all subclasses need to call

98
00:07:18.320 --> 00:07:21.230
super to allow that to to happen now.

99
00:07:21.470 --> 00:07:28.730
That is one thing that I kind of do wish Java could figure out a nice way to make this type of situation

100
00:07:28.730 --> 00:07:35.450
more automatic, because it's easy to forget to call super here, especially since we have to pass in

101
00:07:35.450 --> 00:07:36.350
something as well.

102
00:07:36.500 --> 00:07:40.760
I wish there was a way that that could happen automatically, but I'm not aware of a way to do that.

103
00:07:40.970 --> 00:07:47.000
So if you in your programming endeavors forget to call super and pass in whatever, then you're going

104
00:07:47.000 --> 00:07:47.780
to have problems.

105
00:07:48.050 --> 00:07:53.180
OK, so you've got to remember to do that when you do this type of hierarchical coding or whatever.

106
00:07:53.210 --> 00:07:53.720
All right.

107
00:07:53.750 --> 00:07:57.790
Now let's talk a little bit now that we've done this in a few ways, right?

108
00:07:57.800 --> 00:08:03.650
We did it with an interface and now we're we're doing a few more changes with the superclass.

109
00:08:03.660 --> 00:08:12.230
Let's talk about the pros and cons of the interface approach and the superclass or class hierarchy approach.

110
00:08:12.500 --> 00:08:18.320
And well, maybe not so much of the pros and cons, but just let's let's compare and contrast, shall

111
00:08:18.320 --> 00:08:18.530
we?

112
00:08:18.740 --> 00:08:24.920
So the interface approach is what I would consider to be a lighter weight approach.

113
00:08:25.220 --> 00:08:28.670
It makes a lot of sense to do in real life.

114
00:08:29.000 --> 00:08:37.430
If each of your classes that you are applying the interface to don't have implementation details in

115
00:08:37.430 --> 00:08:44.150
common with each other and also don't have any data, and the data in this case would be the fields

116
00:08:44.330 --> 00:08:47.390
don't have any data in common with each other, OK?

117
00:08:47.540 --> 00:08:55.580
So you could just do a pure interface approach if if all of the classes that you intend to have implement

118
00:08:55.580 --> 00:09:04.130
that interface don't share any data and don't share any implementation details for the methods.

119
00:09:04.160 --> 00:09:04.610
OK.

120
00:09:04.730 --> 00:09:08.660
And by implementation details, I mean, like like this bit here, right?

121
00:09:08.660 --> 00:09:12.800
That would be an implementation of the get salary method.

122
00:09:12.830 --> 00:09:13.250
OK.

123
00:09:13.490 --> 00:09:22.250
On the other hand, if your classes do share data and or implementation details, then you may very

124
00:09:22.250 --> 00:09:27.440
well want to consider the possibility of introducing a super class.

125
00:09:27.740 --> 00:09:34.340
Now I'm only saying you may want to consider it, especially though if you end up having a fair amount

126
00:09:34.340 --> 00:09:40.290
of duplication of code, then you really should consider doing it because that duplication of code is

127
00:09:40.290 --> 00:09:43.940
is a bad thing and it should generally be avoided, right?

128
00:09:44.150 --> 00:09:47.390
And so that's what you really saw us doing here.

129
00:09:47.420 --> 00:09:53.750
We recognize that the programmer, manager, CEO and analyst all had the first name, last name and

130
00:09:53.750 --> 00:09:55.250
date of birth in common.

131
00:09:55.430 --> 00:09:58.760
They also had here, let's jump into the employee class.

132
00:09:59.930 --> 00:10:04.970
They all had a date time format or a number format, or the people rejects the people pattern.

133
00:10:05.240 --> 00:10:05.940
Let's see.

134
00:10:05.960 --> 00:10:08.540
And the people matter as well, right?

135
00:10:08.720 --> 00:10:11.030
They were all using all of this.

136
00:10:11.210 --> 00:10:12.050
Look at all of that.

137
00:10:12.200 --> 00:10:14.600
That was being duplicated four times.

138
00:10:14.600 --> 00:10:15.710
Just all of that.

139
00:10:15.980 --> 00:10:22.460
And then all of this was being duplicated four times as well for each of the four subclasses, right?

140
00:10:22.670 --> 00:10:24.320
So that's really, really bad.

141
00:10:24.350 --> 00:10:31.850
And so this was a fairly nice scenario in which to introduce a super class so that we could not just

142
00:10:31.850 --> 00:10:37.190
to do it for the fun of it so that I could teach object orientation, but for a real reason, which

143
00:10:37.190 --> 00:10:40.970
was to get rid of a ton of terrible, duplicated code.

144
00:10:41.000 --> 00:10:41.390
Right.

145
00:10:41.570 --> 00:10:46.850
That should be your your ultimate reasoning, by the way, to clean up your code, simplify it.

146
00:10:47.030 --> 00:10:48.450
Get rid of duplication.

147
00:10:48.470 --> 00:10:48.950
OK.

148
00:10:49.130 --> 00:10:52.400
Not just to have fun with object orientation.

149
00:10:52.400 --> 00:10:53.580
I mean, while you're learning.

150
00:10:53.600 --> 00:10:53.930
Sure.

151
00:10:53.930 --> 00:10:54.710
Have fun with it.

152
00:10:54.920 --> 00:11:01.160
But in real life, we want to use these techniques for practical reasons, and that is to simplify the

153
00:11:01.160 --> 00:11:02.810
code in various ways.

154
00:11:03.350 --> 00:11:08.480
Now I want to talk to you about another concept with this Java object orientation.

155
00:11:08.690 --> 00:11:09.290
If we go.

156
00:11:09.430 --> 00:11:16.120
Who one of these subclasses, like the programmer here, you see that our programmer is extending employee.

157
00:11:16.780 --> 00:11:24.460
Now one thing about object orientation and class hierarchies in Java, specifically in the Java language,

158
00:11:24.790 --> 00:11:30.970
is the fact that a Java class can only extend one class.

159
00:11:31.000 --> 00:11:31.510
OK.

160
00:11:31.990 --> 00:11:40.090
So if I had other classes, I could not, for example, put a comma here and then say other class two

161
00:11:40.510 --> 00:11:43.840
and other class three and so on and so forth.

162
00:11:43.960 --> 00:11:50.720
I can't do that in Java, so Java does not allow for what is called multiple inheritance.

163
00:11:50.740 --> 00:11:51.240
OK.

164
00:11:51.370 --> 00:11:53.710
It only allows for single inheritance.

165
00:11:53.920 --> 00:11:59.290
And the reason for that is because the creators of the Java programming language were very familiar

166
00:11:59.290 --> 00:12:04.600
with other object oriented languages that did allow for multiple inheritance.

167
00:12:04.870 --> 00:12:11.530
And they were very familiar with some of the headaches that can occur when you have multiple inheritance.

168
00:12:11.650 --> 00:12:19.120
One, for example, would be what if two or more of these classes have the same method declared on them,

169
00:12:19.120 --> 00:12:25.900
like get salary, then which gets salaries should actually get called on the programmer class.

170
00:12:26.140 --> 00:12:32.800
If the programmer is inheriting a get salary from two or more of these classes, right, things like

171
00:12:32.800 --> 00:12:39.250
that that are messy and not fun to have to deal with, the creators of Java just said, You know what?

172
00:12:39.460 --> 00:12:45.610
It doesn't bring enough value to overcome all the pain that can stem from things like that.

173
00:12:45.610 --> 00:12:47.110
So let's just not do it.

174
00:12:47.410 --> 00:12:54.250
But what they did do instead was they said, OK, we'll kind of meet you halfway ish.

175
00:12:54.640 --> 00:13:00.880
We won't allow for multiple inheritance, but we will allow for multiple interfaces.

176
00:13:00.910 --> 00:13:04.420
OK, so let me show you something here.

177
00:13:04.480 --> 00:13:07.000
I'm going to go back to the employee class now.

178
00:13:07.000 --> 00:13:09.730
We converted this employee from an interface, right?

179
00:13:09.940 --> 00:13:11.500
But let me show you something here.

180
00:13:11.650 --> 00:13:13.960
I'm going to put my cursor on the employee word.

181
00:13:13.960 --> 00:13:21.400
I'm going to right click refactor and I'm going to choose to extract an interface.

182
00:13:22.980 --> 00:13:31.140
All right, and so now it's going to allow me to create an interface based on this employee class.

183
00:13:31.290 --> 00:13:32.820
Now I need to give it a name.

184
00:13:33.060 --> 00:13:39.570
Now you'll see some developers call their interfaces something like with a capital I.

185
00:13:39.720 --> 00:13:46.080
I think that's a particularly popular in the darknet world or C-sharp world, for example, that's another

186
00:13:46.080 --> 00:13:47.160
programming language.

187
00:13:47.670 --> 00:13:49.440
So you'll see things like that.

188
00:13:49.590 --> 00:13:54.570
And for right now, I'm going to just use that because I don't feel like spending a lot of time thinking

189
00:13:54.570 --> 00:13:58.440
of a better name for this example interface.

190
00:13:58.860 --> 00:14:04.500
Now I need to also let the ADC know as it's getting ready to create this interface that I would like

191
00:14:04.500 --> 00:14:10.620
it to go ahead and declare the get salary method again, as we had when we first had this guy as an

192
00:14:10.620 --> 00:14:11.100
interface.

193
00:14:11.280 --> 00:14:14.220
So I just checked that and I'm going to click Refactor.

194
00:14:15.660 --> 00:14:16.170
All right.

195
00:14:16.430 --> 00:14:23.850
Interface I employee has been successfully created at this stage idea can analyze usages of employee

196
00:14:23.850 --> 00:14:28.140
and replace them with usages of I employee where possible.

197
00:14:28.140 --> 00:14:29.030
Do you want to proceed?

198
00:14:29.040 --> 00:14:37.650
So what it's telling me is now wherever I am creating instances of classes that implement employee such

199
00:14:37.650 --> 00:14:44.550
as in the main class here, I could go ahead and store those references to those instances in employee,

200
00:14:44.550 --> 00:14:46.200
which is what's currently happening.

201
00:14:46.530 --> 00:14:49.770
Or we could refer to them by their interface.

202
00:14:49.800 --> 00:14:50.280
OK.

203
00:14:50.580 --> 00:14:52.410
So I'm going to say no for right now.

204
00:14:52.410 --> 00:14:53.200
So they're in.

205
00:14:53.250 --> 00:14:56.480
I'm going to make this change manually so you can see what that really means.

206
00:14:56.510 --> 00:14:57.390
I'm going to say no.

207
00:14:57.660 --> 00:14:58.080
All right.

208
00:14:58.260 --> 00:14:59.570
So look at this.

209
00:14:59.580 --> 00:15:06.810
We now have an interface called I employee, and if I jump into that, it looks just like the original

210
00:15:06.810 --> 00:15:08.610
interface we had created before.

211
00:15:08.640 --> 00:15:09.090
OK.

212
00:15:09.780 --> 00:15:15.330
So it's not really doing much for us at this point, but it's also not hurting anything.

213
00:15:15.510 --> 00:15:15.960
OK.

214
00:15:16.470 --> 00:15:24.240
All right now, if I jump over to the main class here, we're still storing our employee references

215
00:15:24.240 --> 00:15:26.220
in a variable of type employee.

216
00:15:26.220 --> 00:15:28.860
But now this employee is not an interface.

217
00:15:29.130 --> 00:15:31.620
This is an actual class, right?

218
00:15:32.370 --> 00:15:35.090
But I can do this.

219
00:15:36.540 --> 00:15:41.880
I can refer to the interface version of employee and nothing breaks.

220
00:15:42.180 --> 00:15:48.960
And the reason nothing breaks is because, as you already know, the interface employee does implement

221
00:15:48.960 --> 00:15:51.450
a get salary method, right?

222
00:15:51.570 --> 00:15:56.900
And so I'm not breaking anything here now to further show some examples of this.

223
00:15:56.910 --> 00:16:02.490
I'm going to create one more interface and this will be like just a throwaway dumb interface just to

224
00:16:02.490 --> 00:16:03.150
prove a point.

225
00:16:03.270 --> 00:16:08.370
I'm to say interface, and then I'm going to create an interface and I'm going to call it Apple.

226
00:16:08.730 --> 00:16:10.780
Like it has nothing to do with anything at all.

227
00:16:10.800 --> 00:16:11.190
OK.

228
00:16:11.970 --> 00:16:12.290
All right.

229
00:16:12.300 --> 00:16:21.300
So here's my Apple interface, and now I will go to the programmer class and I'm going to say that yes,

230
00:16:21.300 --> 00:16:27.750
the programmer extends employee, but it also implements Apple.

231
00:16:27.900 --> 00:16:35.400
Look at that, and I can also say that it also implements them and put it in the front here.

232
00:16:35.490 --> 00:16:39.390
I employee karma like so.

233
00:16:39.930 --> 00:16:51.360
So my point here is that classes can only extend one class, but they can implement multiple interfaces.

234
00:16:51.390 --> 00:16:51.870
OK.

235
00:16:51.990 --> 00:16:57.570
So I could have as many interfaces here as as made sense to me for my for my coding.

236
00:16:57.750 --> 00:17:03.180
Now, obviously, this Apple interface doesn't define any methods, and so it's it's really doing nothing

237
00:17:03.180 --> 00:17:03.750
at all.

238
00:17:04.110 --> 00:17:05.700
Sometimes there are reasons to do that.

239
00:17:05.700 --> 00:17:12.150
By the way, if you want to just be able to flag a class as a certain type, for some reason, you can

240
00:17:12.150 --> 00:17:12.750
do that.

241
00:17:12.870 --> 00:17:15.930
It may or may not be the greatest thing to do, but you could do that.

242
00:17:16.500 --> 00:17:20.460
But I am now implementing two interfaces here.

243
00:17:20.490 --> 00:17:25.920
OK, now if I go back over to main, I could.

244
00:17:26.970 --> 00:17:28.110
Do this now.

245
00:17:28.140 --> 00:17:37.980
On the other three subclasses of employee, so I can come over here and I will paste and I'll come over

246
00:17:37.980 --> 00:17:39.410
to the CEO.

247
00:17:41.010 --> 00:17:46.140
And paste and the analyst.

248
00:17:47.210 --> 00:17:50.810
And paced like so.

249
00:17:50.990 --> 00:17:54.230
And then if I go back over to the main class now.

250
00:17:55.700 --> 00:17:56.870
So now watch this.

251
00:17:58.640 --> 00:18:02.900
I could try to refer to this employee as an apple.

252
00:18:05.140 --> 00:18:12.820
But when I do so now, I get an error down here, and the reason is because there is no get salary Method

253
00:18:12.970 --> 00:18:16.720
D defined on the Apple interface, right?

254
00:18:16.900 --> 00:18:21.880
And so now this employee variable here looks like it's an apple.

255
00:18:22.510 --> 00:18:25.330
If that makes sense, right, it looks like it's an apple.

256
00:18:26.660 --> 00:18:33.010
So right now, Apple does not define a get salary method, and so I can't call this OK.

257
00:18:33.740 --> 00:18:39.500
But my point here was to kind of show that you can implement multiple interfaces, but you can only

258
00:18:39.500 --> 00:18:41.300
extend one class.

259
00:18:42.110 --> 00:18:42.440
All right.

260
00:18:42.450 --> 00:18:45.740
So I'm going to put this back to.

261
00:18:47.080 --> 00:18:50.080
I guess just employee for now.

262
00:18:51.460 --> 00:18:57.760
So I think this is going to wrap up what I wanted to show in this lesson, but there's still more,

263
00:18:58.030 --> 00:18:59.420
there's still more to show you.

264
00:18:59.440 --> 00:19:01.510
So I'll see you in the next one.
