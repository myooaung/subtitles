WEBVTT
1
00:00:00.630 --> 00:00:07.770
All right, now, picking up where we left off, we were about to try to figure out how to keep extracting

2
00:00:07.770 --> 00:00:14.280
or parsing out these various parts of a phone number, but without these extraneous bits here, which

3
00:00:14.280 --> 00:00:19.890
in this case is the period, though we're only getting periods here because that's what we have currently

4
00:00:19.890 --> 00:00:22.250
in the in the original string.

5
00:00:22.260 --> 00:00:26.610
If we were to put spaces or commas, you'd be getting spaces or commas there instead.

6
00:00:26.850 --> 00:00:30.190
We don't want any of those whatever separator is being used, right?

7
00:00:30.210 --> 00:00:32.860
We just want just the number part itself.

8
00:00:32.890 --> 00:00:33.300
OK.

9
00:00:33.780 --> 00:00:36.660
And so I promised you that I'd show you some ways to do that.

10
00:00:37.080 --> 00:00:38.460
So let's dig in.

11
00:00:38.520 --> 00:00:38.830
All right.

12
00:00:38.850 --> 00:00:46.260
So as we learned earlier, when we put part of our regular expression inside of parentheses, we are

13
00:00:46.260 --> 00:00:52.110
creating what is called a capture group and whatever is in there by default will be remembered.

14
00:00:52.320 --> 00:00:57.330
And we can reference those capture groups by index, for one thing, right?

15
00:00:57.330 --> 00:01:00.000
So no one would be the first capture group.

16
00:01:00.180 --> 00:01:02.220
Number two is the is the second and so on.

17
00:01:02.340 --> 00:01:03.900
By the way, let me go ahead and show you real quick.

18
00:01:03.900 --> 00:01:06.720
I also promise to tell you what, what is zero?

19
00:01:06.900 --> 00:01:09.540
So let me show you what zero is real quick.

20
00:01:09.540 --> 00:01:14.130
So I'm going to duplicate one more line here and I'm going to just do zero there.

21
00:01:14.130 --> 00:01:19.440
And and then we'll run this and I'll show you what the last bit of output will be.

22
00:01:20.510 --> 00:01:26.810
OK, so there's Capture Group one, capture Group two to three to capture Group three three three are

23
00:01:26.930 --> 00:01:32.450
captured, Group three is three three three and then capture Group zero is the entire string.

24
00:01:32.480 --> 00:01:37.940
OK, so that's just a standard of how regular expressions tend to work.

25
00:01:38.180 --> 00:01:40.370
Capture Group Zero will be the entire string.

26
00:01:40.640 --> 00:01:47.360
OK, I'm going to delete that now, so we want to get just the pertinent bit.

27
00:01:47.370 --> 00:01:56.300
So the way we can do that is by simply using parentheses again without including the parts that we don't

28
00:01:56.300 --> 00:01:56.750
want.

29
00:01:56.900 --> 00:02:03.110
So starting on this first match here, we got a one period here which came out of Capture Group one.

30
00:02:03.110 --> 00:02:06.010
So that'll be the first bit that's in the parentheses, right?

31
00:02:06.020 --> 00:02:07.310
This bit here.

32
00:02:07.550 --> 00:02:07.940
OK.

33
00:02:08.150 --> 00:02:15.070
But within this bit, we've got the one and then we've got a character.

34
00:02:15.080 --> 00:02:19.580
It could be either a hyphen, period comma or space, right?

35
00:02:19.790 --> 00:02:23.030
But it's going to be zero or one of those.

36
00:02:23.120 --> 00:02:24.290
We don't want that part.

37
00:02:24.620 --> 00:02:25.960
We just want this part.

38
00:02:25.970 --> 00:02:27.330
And by the way, since.

39
00:02:27.500 --> 00:02:33.530
Let's let's also expand this a little bit since now I remember to realize that that first number here

40
00:02:33.530 --> 00:02:35.450
is actually the country code.

41
00:02:35.720 --> 00:02:39.560
Maybe we don't want a hard code that to only accept one, right?

42
00:02:39.770 --> 00:02:40.280
We can.

43
00:02:40.550 --> 00:02:44.840
We can go ahead and tell it to accept a digit.

44
00:02:44.840 --> 00:02:48.560
And really, we probably want to allow it to accept.

45
00:02:48.560 --> 00:02:53.990
And I'm not sure on this, but I think the country code can be up to two digits long.

46
00:02:54.440 --> 00:02:55.730
If I'm not mistaken.

47
00:02:56.060 --> 00:03:03.890
So if we say up to two digits right, then you want to take a stab at determining how can we tell the

48
00:03:03.890 --> 00:03:08.930
regular expression to allow the country code to be up to two digits, right?

49
00:03:08.930 --> 00:03:12.440
So it could be could be one digit or or two digits?

50
00:03:14.670 --> 00:03:15.240
Did you get it?

51
00:03:15.990 --> 00:03:25.170
OK, so the way we can do that is with a curly brace, one comma, two close curly brace, right?

52
00:03:25.350 --> 00:03:31.650
So that means we can have one from between one and two digits for the country code here.

53
00:03:32.010 --> 00:03:35.070
OK, well, I guess let's just test that out real quick.

54
00:03:35.080 --> 00:03:38.330
So let's say we have a country code of E. I don't know.

55
00:03:38.340 --> 00:03:38.880
12.

56
00:03:39.470 --> 00:03:41.220
OK, let's run this.

57
00:03:43.510 --> 00:03:44.260
Yep, there we go.

58
00:03:44.290 --> 00:03:45.250
We got 12 now.

59
00:03:45.280 --> 00:03:47.050
OK, so that part, that part is fine.

60
00:03:47.230 --> 00:03:51.940
So now we only want the 12 and not the period.

61
00:03:51.940 --> 00:03:57.100
So what we can actually do here is just use parentheses again.

62
00:03:59.490 --> 00:04:08.550
But only inside of the part that we want, right, so we want to capture just those first digits, one

63
00:04:08.550 --> 00:04:11.880
or two of them and not the rest of it now, actually.

64
00:04:12.010 --> 00:04:14.340
We are going to end up capturing the rest of it too.

65
00:04:14.850 --> 00:04:18.840
And we'll have to ignore that part, and I'll show you how to do that.

66
00:04:19.080 --> 00:04:23.640
So then if we come over here to the next bit, it's going to be the same kind of pattern again.

67
00:04:23.640 --> 00:04:24.720
So we'll capture.

68
00:04:25.080 --> 00:04:31.710
Put a parentheses to the left of the back slashes here and at the end of the curly brace for the three.

69
00:04:31.710 --> 00:04:33.290
And again, I know this looks.

70
00:04:33.660 --> 00:04:35.760
This can look really, really confusing.

71
00:04:35.760 --> 00:04:38.280
So take your time and just really, really look at it, right?

72
00:04:38.550 --> 00:04:39.750
This is the second.

73
00:04:39.750 --> 00:04:47.400
Well, this was the second capture group and we had three digits here, which corresponds to this part

74
00:04:47.400 --> 00:04:47.880
here.

75
00:04:48.150 --> 00:04:51.930
And then what follows is whatever separator we were going to use.

76
00:04:51.930 --> 00:04:59.130
So that's why I'm not putting the closing parentheses around the separator part here, the square bracket

77
00:04:59.400 --> 00:05:05.580
expression here, I'm putting the closing parentheses right after the three curly brace, OK, because

78
00:05:05.580 --> 00:05:10.410
I only am interested in those three digits right there for this part.

79
00:05:10.710 --> 00:05:17.820
And then we'll do the same thing again over here, left parentheses and then right after the curly brace,

80
00:05:17.970 --> 00:05:19.200
close that parentheses.

81
00:05:19.350 --> 00:05:23.250
And while we're at it, let's grab these last four digits also.

82
00:05:24.210 --> 00:05:29.280
And so we'll put a parentheses there and there.

83
00:05:29.490 --> 00:05:33.780
OK, now let's run this and see what we end up with.

84
00:05:35.790 --> 00:05:44.460
OK, now we get something interesting here, we got 12, 12 to three to 12 12 with a period and then

85
00:05:44.460 --> 00:05:48.390
two three to four capture groups one, two and three.

86
00:05:48.600 --> 00:05:54.840
So what's happening is that now that we've put these embedded capture group within a captured group,

87
00:05:54.840 --> 00:05:57.420
the numbering works differently now.

88
00:05:57.570 --> 00:06:02.070
And the way that it works is this outer capture group.

89
00:06:03.000 --> 00:06:06.330
All of that, that's one group one.

90
00:06:07.170 --> 00:06:14.460
Then the Enter Capture Group is Group two, then we go to the next one.

91
00:06:14.790 --> 00:06:17.700
This outer capture group would be three.

92
00:06:19.500 --> 00:06:21.750
Then for.

93
00:06:23.620 --> 00:06:24.250
Then.

94
00:06:26.060 --> 00:06:26.870
Five.

95
00:06:29.360 --> 00:06:34.130
Then six and finally, seven.

96
00:06:34.410 --> 00:06:43.430
OK, so if we only want this one, for starters, that would be two one and then two.

97
00:06:43.640 --> 00:06:47.570
So let's change this to a two.

98
00:06:48.600 --> 00:06:49.290
Then.

99
00:06:50.720 --> 00:06:53.780
Three, which we don't want.

100
00:06:55.450 --> 00:06:57.190
For which we do want.

101
00:06:57.730 --> 00:07:03.130
So then we'll get the fourth one there and then.

102
00:07:05.460 --> 00:07:06.330
Five.

103
00:07:08.860 --> 00:07:16.900
Six, So then we want the sixth one, and then I'll duplicate line 18 and then the last one we want

104
00:07:16.900 --> 00:07:17.710
is seven.

105
00:07:18.460 --> 00:07:20.590
So let's run that and see what we get.

106
00:07:25.000 --> 00:07:26.210
Hey, look at that.

107
00:07:27.010 --> 00:07:30.040
We got 12, 12.

108
00:07:31.260 --> 00:07:32.340
Two, three, two.

109
00:07:33.270 --> 00:07:35.910
Two, three, two, three, three three.

110
00:07:36.240 --> 00:07:38.370
And then two, three, six five.

111
00:07:38.610 --> 00:07:44.340
OK, so we now have been able to pass all of this and then we could we could get fans here right?

112
00:07:44.340 --> 00:07:51.020
Like we could use a, I don't know, format method instead and say the well, we can say, you know,

113
00:07:51.060 --> 00:07:58.290
country code colon this percent s new line.

114
00:08:00.140 --> 00:08:01.950
You know, so we can do something like that.

115
00:08:04.660 --> 00:08:07.810
What is this next one area code?

116
00:08:09.600 --> 00:08:17.880
Percent, as new line remember format, the format method doesn't output its own new line, so you have

117
00:08:17.880 --> 00:08:20.400
to you have to put one in there if you want one.

118
00:08:20.850 --> 00:08:26.190
Unlike the print line, which prints a whole entire line, including going to the next line with a new

119
00:08:26.190 --> 00:08:26.940
line character.

120
00:08:30.940 --> 00:08:35.260
Then the third one is the I always call it the exchange.

121
00:08:36.530 --> 00:08:40.000
There's another name for it, but I don't remember what it is and it does not matter.

122
00:08:42.110 --> 00:08:43.670
All right, and then finally.

123
00:08:45.440 --> 00:08:57.730
That last bit is called the local phone, I think it's called the line, no line, no sentence backslash

124
00:08:57.830 --> 00:08:58.460
in.

125
00:09:00.640 --> 00:09:01.320
All right.

126
00:09:01.780 --> 00:09:05.140
Let's run this and see.

127
00:09:07.780 --> 00:09:13.600
Country Code 12 area code two three two, exchange three, three three and line number two three six

128
00:09:13.600 --> 00:09:13.780
five.

129
00:09:13.810 --> 00:09:14.580
So look at that.

130
00:09:14.590 --> 00:09:15.610
Isn't that nice?

131
00:09:15.730 --> 00:09:19.240
OK, so we've been able to pass all of this.

132
00:09:19.540 --> 00:09:23.440
And if you'll recall, now we did this, we did this.

133
00:09:23.440 --> 00:09:29.140
Actually, we can jump over here and see, let's see, we can jump over to the other class where we

134
00:09:29.140 --> 00:09:32.440
did this in the other way using.

135
00:09:33.500 --> 00:09:34.820
Yeah, here it is to me.

136
00:09:35.480 --> 00:09:36.470
Oops, oops.

137
00:09:36.470 --> 00:09:37.370
I didn't mean to do that.

138
00:09:37.700 --> 00:09:39.410
Let's make a little room here.

139
00:09:39.440 --> 00:09:39.840
Oops.

140
00:09:40.820 --> 00:09:41.300
There we go.

141
00:09:41.720 --> 00:09:42.050
All right.

142
00:09:42.060 --> 00:09:47.630
So if you'll recall now we had the format a little bit different now that I see that.

143
00:09:47.930 --> 00:09:48.500
And that's fine.

144
00:09:48.510 --> 00:09:53.120
We might actually even teach it how to how to how to accept this format.

145
00:09:54.230 --> 00:10:00.650
So, yeah, just looking back here in this way, we we broke it out into methods just to make it a little

146
00:10:00.650 --> 00:10:02.210
more readable in this regard.

147
00:10:02.450 --> 00:10:07.250
Now, I would say that this is definitely more readable for a for a programmer.

148
00:10:07.520 --> 00:10:11.750
However, it is much less flexible, much, much less flexible.

149
00:10:11.870 --> 00:10:15.590
There's not a lot of wiggle room here for spaces and things.

150
00:10:15.590 --> 00:10:20.180
It has to remain pretty much other than this leading space here.

151
00:10:20.600 --> 00:10:28.100
That part can be optional, but this space here and where the hyphen is and all of that, that's pretty

152
00:10:28.100 --> 00:10:34.610
much the only format that this approach is ever going to accept without writing a whole, whole, whole

153
00:10:34.610 --> 00:10:39.050
lot more code and it will quickly get completely un maintainable.

154
00:10:39.230 --> 00:10:47.390
So it's readable for sure, but it's not very flexible in terms of what inputs it can actually accept.

155
00:10:47.660 --> 00:10:50.660
Whereas if we jump back over.

156
00:10:51.740 --> 00:10:59.660
Whereas this one, I will admit, is going to be very scary and intimidating looking to the untrained

157
00:10:59.660 --> 00:11:02.990
eye and sometimes even even to the trained eye.

158
00:11:03.260 --> 00:11:11.240
This won't immediately be very obvious what it's doing, but just just consider that this one line actually,

159
00:11:11.240 --> 00:11:13.670
let me just keep this open for a moment here.

160
00:11:14.510 --> 00:11:21.920
This one line of regular expression here is pretty much the equivalent of.

161
00:11:24.200 --> 00:11:25.430
All of this.

162
00:11:26.650 --> 00:11:35.260
All of this and all of this, and it's much more flexible, too much more flexible, less readable,

163
00:11:35.620 --> 00:11:37.090
but much more flexible.

164
00:11:37.240 --> 00:11:41.540
So there's a tradeoff there when using regular expressions, for sure.

165
00:11:41.560 --> 00:11:46.660
You know, I don't want to say that they should always be used for every single thing right off the

166
00:11:46.660 --> 00:11:47.080
bat.

167
00:11:47.410 --> 00:11:54.100
It really depends on who you are, how confident you are in your ability to write and maybe even read

168
00:11:54.280 --> 00:11:59.050
regular expressions and maybe even the team that you're working with and how often you may have to go

169
00:11:59.050 --> 00:12:00.040
in there and maintain it.

170
00:12:00.280 --> 00:12:05.740
But it definitely is way more concise way, way, way more concise.

171
00:12:06.190 --> 00:12:09.820
The only extra bit here, like actually, we didn't even need this line.

172
00:12:09.820 --> 00:12:11.890
I guess I'll get rid of that line now, right?

173
00:12:11.920 --> 00:12:13.530
We did need that line there.

174
00:12:13.780 --> 00:12:19.270
And then and then, you know, this is kind of boilerplate code that you need just to kind of set up

175
00:12:19.270 --> 00:12:22.270
using regular expressions in the more advanced ways.

176
00:12:22.420 --> 00:12:29.900
And then this bit here is equivalent to this bit right here, right?

177
00:12:29.950 --> 00:12:31.780
That's that's pretty much the same thing.

178
00:12:32.620 --> 00:12:37.780
In fact, maybe you could even argue it's more equivalent to all six of those lines there may.

179
00:12:38.110 --> 00:12:46.810
So, OK, now there are other ways to do this, and I want to show you a little bit more that we could

180
00:12:46.810 --> 00:12:49.760
do to make this even more readable.

181
00:12:49.780 --> 00:12:54.340
Well, a little more maintainable, perhaps, and a tiny bit more readable.

182
00:12:54.340 --> 00:12:57.190
And we'll take a look at that in the next video.
