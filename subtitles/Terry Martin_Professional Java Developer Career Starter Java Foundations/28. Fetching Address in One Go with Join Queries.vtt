WEBVTT
1
00:00:00.090 --> 00:00:06.000
All right, so in the last lesson, we taught our program, how to retrieve the address attached to

2
00:00:06.000 --> 00:00:11.250
a person when we call the find by ID method of the people repository.

3
00:00:11.580 --> 00:00:17.190
And I would say that was pretty straightforward and we didn't run into a whole lot of crazy snafus and

4
00:00:17.190 --> 00:00:18.270
things of that sort.

5
00:00:18.660 --> 00:00:24.900
So in this lesson, I want to stay on this theme and do a little bit of analysis on how that approach

6
00:00:24.900 --> 00:00:27.660
was working and see if we can improve on it.

7
00:00:27.990 --> 00:00:28.260
All right.

8
00:00:28.270 --> 00:00:36.240
So let's jump back over to the people repository, and let's just review what we were doing there for

9
00:00:36.240 --> 00:00:37.200
the loading.

10
00:00:37.440 --> 00:00:45.060
So we wrote some code down here to make use of the address repository to find an address by its idea.

11
00:00:45.360 --> 00:00:49.200
We're extracting that IED from our results set.

12
00:00:49.500 --> 00:00:51.960
So let me just back up again and just say so.

13
00:00:51.960 --> 00:00:58.320
This code here receives the results at which it receives from our KRudd repository, so that's doing

14
00:00:58.320 --> 00:01:05.100
some of the work for us to generate this result set and execute our find by IDs sequel, which I can

15
00:01:05.100 --> 00:01:10.170
hover over right here to let you, you know, get a little reminder of what that was doing, right?

16
00:01:10.530 --> 00:01:15.750
And the whole point is to execute some sequel that's capable of retrieving a person, right in this

17
00:01:15.750 --> 00:01:16.650
case by ID.

18
00:01:17.520 --> 00:01:20.340
Then it gives us the results set for that query.

19
00:01:20.760 --> 00:01:27.090
And then we simply have to go through the results and pull out all of the data from each of the columns

20
00:01:27.090 --> 00:01:28.320
in that query, right?

21
00:01:28.330 --> 00:01:32.790
And we temporarily store that data in these local variables here.

22
00:01:33.360 --> 00:01:38.760
And the last one that we pull out is the home address ID right here.

23
00:01:39.060 --> 00:01:46.080
Then we turn around and we call the address repositories, find my ID method pass in that home address

24
00:01:46.080 --> 00:01:49.160
ID and then we get back an optional address.

25
00:01:49.170 --> 00:01:53.120
So if it existed, then the optional will be filled in with that address.

26
00:01:53.130 --> 00:01:58.680
Otherwise, the optional will be empty and then we can just set that on the person and then return the

27
00:01:58.680 --> 00:01:59.170
person.

28
00:01:59.250 --> 00:02:00.450
So pretty straightforward.

29
00:02:00.600 --> 00:02:05.880
So now I want to do a little consideration of of this approach, though, so I would say this works

30
00:02:05.880 --> 00:02:08.550
well and it was pretty easy to implement.

31
00:02:08.550 --> 00:02:10.440
We didn't have to do a whole lot of work.

32
00:02:10.650 --> 00:02:16.740
We got some work done for us for free by virtue of the fact that we are extending the credit repository.

33
00:02:16.890 --> 00:02:24.960
All we really needed to do was to revise our find by IDs sequel here to add in the home address field.

34
00:02:25.290 --> 00:02:31.740
And then we also needed to create a find by ID query for the address repository to be able to go retrieve

35
00:02:31.800 --> 00:02:33.690
addresses by ID as well.

36
00:02:33.750 --> 00:02:40.440
And it it's pretty easy and straightforward, but what if we wanted to be able to retrieve not one person

37
00:02:40.440 --> 00:02:47.280
with their address, but tens, hundreds, thousands, maybe even millions of people with their addresses

38
00:02:47.310 --> 00:02:47.970
attached?

39
00:02:48.270 --> 00:02:52.020
What would be the ramifications of doing that with this approach?

40
00:02:52.530 --> 00:02:58.860
So one thing to be mindful of with this approach is that for every person that we retrieve from the

41
00:02:58.860 --> 00:03:05.730
database and additional SQL query has to be executed to retrieve their address as well.

42
00:03:05.940 --> 00:03:13.860
So there will be two SQL queries and two round trips from our Java code to the database and back again

43
00:03:14.130 --> 00:03:17.670
for every person that we retrieve via this approach.

44
00:03:17.760 --> 00:03:23.280
When you're only getting one or a handful of people from the database with this approach, not a big

45
00:03:23.280 --> 00:03:29.580
deal, but like I said, if you're getting hundreds or thousands or even millions of people with this

46
00:03:29.580 --> 00:03:35.640
approach, that means that you will now have doubled the number of queries to the database because of

47
00:03:35.640 --> 00:03:43.260
these addresses and making external calls from Java code to other systems like databases and things

48
00:03:43.500 --> 00:03:48.510
is and is considered an extremely expensive operation to do so.

49
00:03:48.510 --> 00:03:54.180
Needing to do it twice is not the best when multiplied times many, many people to retrieve.

50
00:03:54.990 --> 00:04:00.000
So in this lesson, I want to show you a potentially more efficient way that we could accomplish the

51
00:04:00.000 --> 00:04:06.360
same thing, but without having to take the hit of querying the database and additional time for each

52
00:04:06.360 --> 00:04:06.990
address.

53
00:04:07.410 --> 00:04:13.050
So let's jump over to our spreadsheet so that I can show you visually what we're going to be doing.

54
00:04:13.440 --> 00:04:13.740
All right.

55
00:04:13.750 --> 00:04:17.730
So here we are back in the spreadsheet and I've got this depiction.

56
00:04:17.730 --> 00:04:22.560
I think we took a very brief look at this in the last lesson, but now we'll go a little bit deeper

57
00:04:22.560 --> 00:04:22.950
with it.

58
00:04:23.490 --> 00:04:29.160
So I've got here a really, really simplified depiction of our people table in blue.

59
00:04:29.340 --> 00:04:33.030
And then the addresses table here in green, OK?

60
00:04:33.570 --> 00:04:35.550
And you already know how this works, right?

61
00:04:35.580 --> 00:04:42.330
Each person record is capable of pointing to a record in the addresses table, and those references

62
00:04:42.330 --> 00:04:45.930
would be these numbers here with which are called foreign keys.

63
00:04:45.960 --> 00:04:53.970
So the 300 here is referring to line 300 over here in the address table, which means that Gerry Smith

64
00:04:53.970 --> 00:04:57.390
lives at nine eight seven six Fountain Lane.

65
00:04:57.750 --> 00:04:59.820
This person here, Frank Jones.

66
00:05:00.090 --> 00:05:03.870
Lives at 200, which is five, six, seven eight Walden Street.

67
00:05:04.230 --> 00:05:10.940
This person, Larry Kim, does not have an address on record and therefore this value is null, OK?

68
00:05:11.250 --> 00:05:16.350
And so each time we retrieve a person in our code, currently we get that person.

69
00:05:16.560 --> 00:05:18.420
Then we inspect this value.

70
00:05:18.570 --> 00:05:24.750
Then we make a separate SQL call to back to the database to go find the address with that ID.

71
00:05:25.230 --> 00:05:26.430
Then we retrieve that.

72
00:05:26.610 --> 00:05:30.690
Then we reconstitute all of this back into Java objects.

73
00:05:31.080 --> 00:05:37.380
We put the address object inside of the people object, and then we return the person object with the

74
00:05:37.380 --> 00:05:38.400
address inside.

75
00:05:38.680 --> 00:05:40.500
Right, that's what we're currently doing.

76
00:05:40.800 --> 00:05:48.660
However, all relational databases actually give us a mechanism where we can basically join or combine

77
00:05:48.780 --> 00:05:53.190
one or more tables together when we query for data out of them.

78
00:05:53.490 --> 00:06:00.360
And when we do so, it basically makes it look as though you've got one table with all of the data that

79
00:06:00.360 --> 00:06:01.290
you're looking for.

80
00:06:01.650 --> 00:06:05.610
So I've depicted what that could look like down here in red.

81
00:06:06.000 --> 00:06:12.330
So basically, all I've done here is to simply combine all of the columns that I have up here and people

82
00:06:12.330 --> 00:06:17.340
table and all of the columns that I have in the addresses table all into one, right?

83
00:06:17.610 --> 00:06:22.880
So we've got the IDs of the people, the last name, first name, etc. And then these IDs here.

84
00:06:22.890 --> 00:06:28.980
And so it is possible to do a special type of query, which is called a joint query, which will give

85
00:06:28.980 --> 00:06:34.140
us results that will appear to be coming from just one table in effect.

86
00:06:34.350 --> 00:06:40.320
Now let me be clear, when we perform a joint query, we're not actually making a new table.

87
00:06:40.350 --> 00:06:42.090
That's not the result of a joint.

88
00:06:42.110 --> 00:06:44.370
You're not making a new table per say.

89
00:06:44.700 --> 00:06:45.690
You're just making.

90
00:06:45.690 --> 00:06:51.450
The results of the query seem as though they might have come from one table.

91
00:06:51.480 --> 00:06:55.770
OK, so you're effectively making like a virtual table, if you will.

92
00:06:56.100 --> 00:06:56.490
OK.

93
00:06:56.910 --> 00:06:59.130
And so that's what the results would look like.

94
00:06:59.370 --> 00:07:05.550
Now there are several types of queries that can be done with relational databases, and the most useful

95
00:07:05.550 --> 00:07:09.850
one for our purposes right now is called a left outer join.

96
00:07:10.200 --> 00:07:14.700
And the reason it's called a left outer join is because of the semantics of how it works.

97
00:07:14.790 --> 00:07:16.530
And let me just show you it's pretty simple.

98
00:07:16.560 --> 00:07:22.370
So we've got the people table on the left here and then we've got the addresses table on the right.

99
00:07:22.380 --> 00:07:28.740
And currently the way our code is devised is that we always want to be able to get the people that we're

100
00:07:28.740 --> 00:07:30.420
looking for in our code.

101
00:07:31.140 --> 00:07:35.670
Those people may or may not have a reference to an address.

102
00:07:35.700 --> 00:07:36.150
OK.

103
00:07:36.540 --> 00:07:42.540
So address is not the main thing that we're after in the current set of tests that we're working with

104
00:07:42.540 --> 00:07:47.130
in our program, people is the main thing that we're working on.

105
00:07:47.160 --> 00:07:53.070
People are the main concept that we're interested in, and because of that, we want to ensure that

106
00:07:53.070 --> 00:07:57.930
regardless of whether or not a person has an address, we always retrieve the people.

107
00:07:58.380 --> 00:08:04.390
So in that case, we can join these two tables together using a left outer join.

108
00:08:04.560 --> 00:08:11.010
And all that's going to ensure is that whether or not there's an address for a person, we will always

109
00:08:11.010 --> 00:08:12.070
get back to the person.

110
00:08:12.240 --> 00:08:15.030
So down here, let me show you what that really looks like.

111
00:08:15.570 --> 00:08:21.820
So for the people who do have a home address to refer to, it's pretty straightforward.

112
00:08:21.840 --> 00:08:28.230
You've got Jerry Smith here and then his address columns all on one virtual row, if you will.

113
00:08:28.440 --> 00:08:30.840
And the same goes for Frank and Ann.

114
00:08:31.110 --> 00:08:38.580
But then when we get here to Larry Kim, Larry does not have any reference to a home address, and so

115
00:08:38.610 --> 00:08:41.670
his home address columns are just going to be null.

116
00:08:41.940 --> 00:08:47.220
There are other types of joins where this might not be the case, and we will take a look at some of

117
00:08:47.220 --> 00:08:49.440
those other types of joins a little bit later.

118
00:08:49.710 --> 00:08:54.300
There are joints that could do the opposite of what we're seeing here, where you wouldn't see Larry

119
00:08:54.300 --> 00:08:59.370
Kim if he didn't have an address or you'd see all the addresses, whether or not there was a person

120
00:08:59.370 --> 00:09:01.620
to associated with them things of that sort.

121
00:09:01.680 --> 00:09:02.000
All right.

122
00:09:02.010 --> 00:09:05.670
So then the question is, well, how do we actually do this right?

123
00:09:05.730 --> 00:09:11.070
So now let's jump into Squirrel Sequel Client and see how we can perform these joints.

124
00:09:11.460 --> 00:09:11.760
All right.

125
00:09:11.770 --> 00:09:17.300
So here we are back in Squirrel and I'm going to reconnect to our people database.

126
00:09:18.410 --> 00:09:21.200
And jump over here to our school tab.

127
00:09:21.530 --> 00:09:24.980
So let's just learn how to execute a joint.

128
00:09:25.190 --> 00:09:32.170
So we'll start off by simply doing a regular old select everything from people.

129
00:09:32.180 --> 00:09:35.060
But of course, we don't want to actually retrieve everything, right?

130
00:09:35.060 --> 00:09:41.420
So maybe we'll limit this, but to maybe the first 10 records or so, so we'll do a thatch first.

131
00:09:41.660 --> 00:09:43.670
10 grows only.

132
00:09:43.880 --> 00:09:44.090
All right.

133
00:09:44.090 --> 00:09:45.320
So let's execute that.

134
00:09:45.620 --> 00:09:45.890
All right.

135
00:09:45.890 --> 00:09:49.240
So there's the first ten rows, and that's just the people, right?

136
00:09:49.250 --> 00:09:54.290
So that's all we're getting here and notice that there are no address references here.

137
00:09:54.320 --> 00:09:55.280
Those are all null.

138
00:09:55.430 --> 00:10:01.610
We only have one record in the entire database right now that actually refers to a real address.

139
00:10:01.610 --> 00:10:05.480
And in fact, here we can go ahead and just retrieve that as well.

140
00:10:05.570 --> 00:10:12.770
Select everything from people where home underscore address equals fraud because I just happen to remember

141
00:10:12.770 --> 00:10:14.540
that was the value there.

142
00:10:15.140 --> 00:10:15.480
All right.

143
00:10:15.500 --> 00:10:22.610
So there's the one guy that we entered into the database from one of our J unit tests, and he does

144
00:10:22.610 --> 00:10:24.410
have a home address of four.

145
00:10:24.590 --> 00:10:31.370
And, you know, while we're at it, let's go ahead and query all the records from the addresses table

146
00:10:31.370 --> 00:10:32.030
as well.

147
00:10:33.080 --> 00:10:33.360
All right.

148
00:10:33.380 --> 00:10:35.510
And there's only the one currently.

149
00:10:35.540 --> 00:10:35.960
OK.

150
00:10:36.110 --> 00:10:37.220
So there's all of that.

151
00:10:37.880 --> 00:10:44.090
So now if we want to do a select query and join the columns from the people table to the columns in

152
00:10:44.090 --> 00:10:50.960
the addresses table, we can do that with an additional clause in one of our select queries and can

153
00:10:50.960 --> 00:10:55.670
do something like select everything from people.

154
00:10:56.120 --> 00:11:03.200
Now, when we are joining multiple tables together, it is very common to make use of something called

155
00:11:03.200 --> 00:11:04.700
table aliases.

156
00:11:04.880 --> 00:11:11.330
And that's where we can simply give our tables and additional name or alias that we can use to refer

157
00:11:11.330 --> 00:11:13.790
to those individual tables columns.

158
00:11:13.940 --> 00:11:19.310
The reason for this is because when you're joining two or more tables together, some of the columns

159
00:11:19.310 --> 00:11:21.590
of those tables may have the same names.

160
00:11:21.830 --> 00:11:28.370
So, for example, over here are people table has an ID column, so does our addresses table.

161
00:11:28.640 --> 00:11:35.930
So if you wanted to be able to retrieve various information from either of those particular columns,

162
00:11:36.110 --> 00:11:39.620
how could you specify which ID column you're talking about?

163
00:11:39.710 --> 00:11:41.510
The people one or the addresses one?

164
00:11:41.690 --> 00:11:47.820
Well, you can prefix the ID column of either of these tables with an alias.

165
00:11:47.840 --> 00:11:48.290
OK.

166
00:11:48.440 --> 00:11:50.180
So let me show you what that would look like.

167
00:11:50.330 --> 00:11:56.320
So we can say select everything from people as P or I could even write it out as people.

168
00:11:56.330 --> 00:11:57.530
It doesn't really matter.

169
00:11:57.530 --> 00:12:02.600
Then I can say join addresses as.

170
00:12:03.510 --> 00:12:05.130
Address, for example.

171
00:12:05.580 --> 00:12:07.790
And then I can say on.

172
00:12:08.370 --> 00:12:13.350
And this is where I specify what the relationship is like, what is it that these two tables may have

173
00:12:13.350 --> 00:12:14.010
in common?

174
00:12:14.340 --> 00:12:19.470
And so if we jump over here, you can see that what they have in common are these IDs here, right?

175
00:12:19.680 --> 00:12:24.810
These home address foreign keys are really just IDs into the addresses table.

176
00:12:24.990 --> 00:12:32.700
So what we can say is essentially join these two tables on the people that home address values being

177
00:12:32.700 --> 00:12:36.990
equal to the address that ID values, right?

178
00:12:37.560 --> 00:12:40.880
And you can almost think of the ocean as another where clause.

179
00:12:40.890 --> 00:12:46.800
So it almost makes more sense in my head when I think where the people that home address is equal to

180
00:12:46.800 --> 00:12:48.810
the addresses that IDs.

181
00:12:49.080 --> 00:12:52.830
That's really what I'm thinking in my head when I look at these join clauses.

182
00:12:53.400 --> 00:12:53.750
All right.

183
00:12:53.760 --> 00:13:00.450
So then we can say on people that home address equal.

184
00:13:02.010 --> 00:13:05.320
To address Dot ID, OK.

185
00:13:05.670 --> 00:13:07.620
So let's run that and see what we end up with.

186
00:13:08.040 --> 00:13:08.520
All right.

187
00:13:08.790 --> 00:13:16.890
So when you first look at it, it looks like all it did was just return the one person who has a foreign

188
00:13:16.890 --> 00:13:18.330
key pointing to an address.

189
00:13:18.540 --> 00:13:24.660
However, if you notice we can scroll much farther now and look at what you start getting there.

190
00:13:25.470 --> 00:13:32.550
It's one result set row that's combining all of the columns of the people table with all the columns

191
00:13:32.550 --> 00:13:35.790
of the address table for this one person.

192
00:13:38.090 --> 00:13:38.510
OK.

193
00:13:38.720 --> 00:13:42.380
And so it kind of looks like it all came from one big, massive table.

194
00:13:42.500 --> 00:13:49.370
Right now, you may be wondering why did we only get one row because we didn't say anything like where

195
00:13:49.370 --> 00:13:52.460
home address equals four or something like that.

196
00:13:52.460 --> 00:13:54.110
So why did we only get one row?

197
00:13:54.560 --> 00:14:00.920
Well, the reason we only got one row in this particular case is because of the type of joint that is

198
00:14:00.920 --> 00:14:01.910
executing here.

199
00:14:02.120 --> 00:14:06.740
And this particular, joined by default, is what's known as an inner join.

200
00:14:07.040 --> 00:14:14.510
And basically, all an inner join is is that there has to be a match that satisfies this expression

201
00:14:14.510 --> 00:14:16.220
here on both tables.

202
00:14:16.250 --> 00:14:18.620
In order for a result set to be returned.

203
00:14:18.950 --> 00:14:25.190
And so since there's only one record in the people table that has a foreign key that points to an address,

204
00:14:25.340 --> 00:14:32.660
and there's only one address that is being used by the people table, we only got back one result set

205
00:14:32.660 --> 00:14:34.260
in this particular case.

206
00:14:34.280 --> 00:14:34.700
OK.

207
00:14:34.820 --> 00:14:39.320
So that's a very, very basic join that we are able to do.

208
00:14:39.560 --> 00:14:46.280
However, what if we wanted to be able to retrieve any or all people, whether or not they have a home

209
00:14:46.280 --> 00:14:47.540
address specified?

210
00:14:47.690 --> 00:14:53.210
And in fact, for our purposes in our code, that's exactly what we're going to need because when we

211
00:14:53.210 --> 00:14:57.590
find a person by ID, they might have an address and they might not.

212
00:14:57.650 --> 00:15:02.630
We don't want them to not show up just because they did not have an address, right?

213
00:15:03.140 --> 00:15:08.540
So to make that work, that's where we have to perform the left outer join right so that we can make

214
00:15:08.540 --> 00:15:13.100
sure that regardless of whether or not there's an address being pointed to.

215
00:15:13.220 --> 00:15:16.310
We always get back all of the people that we're looking for.

216
00:15:16.400 --> 00:15:21.800
So to do that, all we have to do is specify that we want a left outer join.

217
00:15:21.800 --> 00:15:26.570
So by default, if you only say join here, you're getting an enter, join OK.

218
00:15:26.930 --> 00:15:32.720
But if you want to left outer join, then you can simply add in left outer, join just like that.

219
00:15:32.900 --> 00:15:38.930
Now, if I go ahead and execute this as is, in fact, you know, I can go ahead and execute this as

220
00:15:38.930 --> 00:15:39.110
is.

221
00:15:39.110 --> 00:15:40.100
So let's see what we get.

222
00:15:41.720 --> 00:15:42.140
All right.

223
00:15:42.290 --> 00:15:47.800
So now we're getting back the first 100 rows of our database now.

224
00:15:48.080 --> 00:15:51.140
The fact that we're being limited currently to the first 100 rows.

225
00:15:51.350 --> 00:15:55.790
That's not because of the H2 database or our SQL query.

226
00:15:55.940 --> 00:16:00.860
That's just the Squirrel sequel client protecting us from our own potential stupidity.

227
00:16:01.580 --> 00:16:07.710
It's just saying, Hey, you can't possibly actually want to retrieve all five million records.

228
00:16:07.730 --> 00:16:11.660
So how about I just give you the first 100 and we call it a day?

229
00:16:12.230 --> 00:16:14.030
So that's the client is protecting us.

230
00:16:14.150 --> 00:16:20.300
Which reminds me we may want to implement something like this limiting here back in our own find all

231
00:16:20.300 --> 00:16:25.520
method in our code at some later point in time for precisely the exact same reasons.

232
00:16:25.940 --> 00:16:26.300
OK.

233
00:16:26.630 --> 00:16:31.640
So at any rate, it's returning back the first 100 rows of the people.

234
00:16:31.670 --> 00:16:39.680
However, if we scroll to the right, you'll see here that it also is including all of the address columns

235
00:16:39.680 --> 00:16:45.680
now, even though the values are all null because we don't have any addresses actually corresponding

236
00:16:45.680 --> 00:16:47.060
to any of these people.

237
00:16:47.090 --> 00:16:47.320
Right.

238
00:16:47.330 --> 00:16:54.050
Or rather, the people themselves are not referring to any addresses in the address table either, right?

239
00:16:54.140 --> 00:16:59.460
So all of those values are null, but we are getting back their columns.

240
00:16:59.480 --> 00:16:59.990
OK.

241
00:17:00.080 --> 00:17:03.620
So what if we wanted now to use the left outer join?

242
00:17:03.620 --> 00:17:10.010
But instead of retrieving everything, we can be specific with which person we want by ID, right?

243
00:17:10.020 --> 00:17:12.530
Because that's the query that we're actually going to need.

244
00:17:13.190 --> 00:17:20.840
So if we jump over to what was it this tab here for this one person, let's get this person's ID.

245
00:17:21.320 --> 00:17:22.910
So there it is right here.

246
00:17:22.910 --> 00:17:25.310
So I'm going to click on that and copy that ID.

247
00:17:26.300 --> 00:17:32.120
And now what we can do is add on to our query here.

248
00:17:32.120 --> 00:17:40.670
So we can say on people home address equals address that ID where people dot ID equals and then we can

249
00:17:40.670 --> 00:17:41.930
just paste in that ID.

250
00:17:42.260 --> 00:17:43.910
So let's run that and see what we get.

251
00:17:45.800 --> 00:17:46.460
Look at that.

252
00:17:47.210 --> 00:17:47.660
All right.

253
00:17:47.700 --> 00:17:56.210
So looks like we got the one person and and we got all of their additional address columns, too.

254
00:17:56.570 --> 00:17:59.450
OK, so that's how we can do that.

255
00:17:59.750 --> 00:18:06.200
Now, we could have been a little more explicit in our select query here and specified actual column

256
00:18:06.200 --> 00:18:07.070
names as well.

257
00:18:07.310 --> 00:18:11.060
I don't think I want to go through all of this, but let me just show you quickly what that would look

258
00:18:11.060 --> 00:18:11.330
like.

259
00:18:11.480 --> 00:18:17.330
Now for this, just so I can spare myself a little bit of typing, I am going to change these aliases

260
00:18:17.330 --> 00:18:18.980
to be shorter.

261
00:18:19.220 --> 00:18:24.380
So instead of people, I'll just say P. And instead of addresses, I'll say a.

262
00:18:26.570 --> 00:18:28.550
So I will change that here.

263
00:18:30.800 --> 00:18:31.970
And here.

264
00:18:33.650 --> 00:18:38.630
And here, let me make sure let me make sure I didn't break anything.

265
00:18:39.410 --> 00:18:41.000
OK, so that's still working, OK?

266
00:18:41.150 --> 00:18:45.830
So then I can come over here and now I can say he died.

267
00:18:47.620 --> 00:18:49.710
First name, comma p.

268
00:18:50.320 --> 00:18:51.840
Last name.

269
00:18:53.130 --> 00:19:04.500
Comma, and then I'm going to skip over to the address dot street address, comma, a dot city, and

270
00:19:04.500 --> 00:19:07.140
maybe that's enough for right now, so let's run that and see.

271
00:19:09.040 --> 00:19:11.080
OK, so you see what I've done here.

272
00:19:11.440 --> 00:19:15.190
I've just said only give me the first name, last name, street address and city.

273
00:19:15.400 --> 00:19:20.860
It still looks like it's all coming from one table, but I'm really joining across two different tables,

274
00:19:20.860 --> 00:19:21.160
right?

275
00:19:21.460 --> 00:19:26.890
And so that's how you can get really specific with what columns you're actually trying to retrieve.

276
00:19:27.340 --> 00:19:33.400
OK, so hopefully now you have a basic understanding of how we can perform a left outer join.

277
00:19:33.670 --> 00:19:38.470
And let me just remind you that we're doing the left outer join so that we can make sure that regardless

278
00:19:38.470 --> 00:19:43.330
of whether or not there is an address for a person, we still retrieve the person.

279
00:19:43.360 --> 00:19:43.870
OK.

280
00:19:44.050 --> 00:19:45.700
Oh, and one more thing now.

281
00:19:45.790 --> 00:19:52.270
Let me go back to the inner join while also specifying the idea of a person just so I can show you what

282
00:19:52.270 --> 00:19:53.820
would happen with an inner join.

283
00:19:53.830 --> 00:19:54.190
OK?

284
00:19:54.370 --> 00:20:02.650
So if I take this query back to just being an inner join and I give it the idea of a record that I know

285
00:20:02.650 --> 00:20:07.360
doesn't have an address or doesn't point to an address like one, for example, let's see what we get

286
00:20:07.360 --> 00:20:07.720
now.

287
00:20:08.410 --> 00:20:11.110
We get nothing back for the results set, right?

288
00:20:11.470 --> 00:20:15.370
Because with an inner join both sides of the table.

289
00:20:15.370 --> 00:20:16.930
In this case, it's a two table join.

290
00:20:16.930 --> 00:20:19.090
You could, by the way, you could join the multiple tables.

291
00:20:19.090 --> 00:20:21.160
You can even do a join to one table.

292
00:20:21.340 --> 00:20:24.700
So one table can join back to itself, which is kind of interesting.

293
00:20:24.700 --> 00:20:27.730
We might take a look at what that would look like later, possibly.

294
00:20:27.760 --> 00:20:32.380
But anyway, with an inner join the two or more tables that we are.

295
00:20:32.380 --> 00:20:35.380
Enter joining to have to have data in common.

296
00:20:35.500 --> 00:20:36.790
And in this case, we have.

297
00:20:36.790 --> 00:20:41.080
We do have a record for the people side, but we don't have a record for the address side and therefore

298
00:20:41.080 --> 00:20:41.960
you get nothing.

299
00:20:41.980 --> 00:20:45.790
So it's really doing an intersection of the two tables, right?

300
00:20:45.790 --> 00:20:49.810
And if you don't have anything in common between the two tables, then you get nothing at all.

301
00:20:49.840 --> 00:20:50.140
All right.

302
00:20:50.150 --> 00:20:53.520
So I'm going to undo that now, but that back.

303
00:20:53.530 --> 00:20:59.680
And so now we're ready to jump into the Java code and see how we can make use of this over there.

304
00:21:00.070 --> 00:21:00.440
All right.

305
00:21:00.460 --> 00:21:08.380
So back over here in the people repository class, let's take a look at our find by IDs school that

306
00:21:08.380 --> 00:21:09.580
we're currently using.

307
00:21:09.820 --> 00:21:10.570
So it's right here.

308
00:21:10.600 --> 00:21:15.370
So first thing I think I want to do is convert this to use a text block because it's about to get a

309
00:21:15.370 --> 00:21:16.810
little bit longer now.

310
00:21:17.710 --> 00:21:26.170
So I'm just going to add a couple more question marks here and then put this on its own line like so

311
00:21:26.860 --> 00:21:34.120
and maybe I will even put the individual columns on their own lines and input the from part on its own

312
00:21:34.120 --> 00:21:34.690
line.

313
00:21:36.250 --> 00:21:40.000
And maybe the where clause on its own line as well.

314
00:21:40.030 --> 00:21:44.350
Okay, so select all of these columns from people where ID equals blah blah blah.

315
00:21:45.160 --> 00:21:53.140
So now let's see if we can just convert this to use a left outer join query and see how our code needs

316
00:21:53.140 --> 00:21:57.220
to change to still do the same thing without breaking any of our tests, right?

317
00:21:57.610 --> 00:22:00.460
So we can continue to query for these columns here.

318
00:22:00.460 --> 00:22:05.770
However, now we're going to get this from people, so let's go ahead and introduce an alias now.

319
00:22:06.130 --> 00:22:15.580
So from people as P and so then I'm going to want to prepend each of these column names with that p,

320
00:22:15.850 --> 00:22:18.520
and I'm going to use a multi cursor here.

321
00:22:18.520 --> 00:22:25.360
So holding down on option or alt plus the shift key, I'm going to have multiple cursors in front of

322
00:22:25.360 --> 00:22:31.510
each of these bits so that I can do so that I can add the P to all of these all at once.

323
00:22:31.540 --> 00:22:33.720
So p dot just like that.

324
00:22:34.810 --> 00:22:36.940
Then escape to get out of that mode.

325
00:22:40.470 --> 00:22:40.740
All right.

326
00:22:40.770 --> 00:22:56.760
From people aspe and then I'm going to add a left outer join addresses as a on peaked home address equal

327
00:22:56.760 --> 00:22:59.250
to a dot IED.

328
00:23:00.000 --> 00:23:05.340
So join on the home addresses equaling the address IDs, right?

329
00:23:05.940 --> 00:23:09.990
And then let's include the address fields.

330
00:23:10.200 --> 00:23:18.900
So I think I'm going to just put those on their own line as well a date ID comma, a dot street.

331
00:23:20.750 --> 00:23:22.940
Address a dot.

332
00:23:23.440 --> 00:23:36.440
Address two comma, a dot city, comma, a dot state comrade post code, comma, a Dot Co., comma,

333
00:23:36.440 --> 00:23:41.030
a dot region, comma, a dot country.

334
00:23:41.480 --> 00:23:46.070
And I don't know if I got them all in the right order, but the order doesn't really matter at this

335
00:23:46.070 --> 00:23:46.530
point.

336
00:23:46.550 --> 00:23:48.710
You'll see why in a in a moment here.

337
00:23:48.860 --> 00:23:51.560
So we've got all of the address columns there.

338
00:23:51.860 --> 00:23:53.390
And by the way, let me show you this.

339
00:23:53.390 --> 00:23:56.870
Also, this is something that's kind of convenient to do sometimes.

340
00:23:57.170 --> 00:24:00.560
You can actually just grab all of this text right here.

341
00:24:00.980 --> 00:24:08.270
Jump over to a sequel client pasted all in just like this and then try it out.

342
00:24:09.910 --> 00:24:13.690
So I will grab that I.D. paste that right there.

343
00:24:13.780 --> 00:24:15.610
Maybe I will clean up my.

344
00:24:16.550 --> 00:24:18.290
Formatting a little bit there.

345
00:24:18.350 --> 00:24:19.310
Let's try that out.

346
00:24:19.340 --> 00:24:21.200
OK, so let's see.

347
00:24:21.710 --> 00:24:28.760
Ambiguous column name I.D. R C And that's why it's never a bad idea when you start to write these bigger

348
00:24:28.760 --> 00:24:34.850
queries and embed them in your code to copy them and paste them into a SQL client and try them out first,

349
00:24:35.210 --> 00:24:40.820
because it's easier to figure out the bugs here than it is in code after you've run everything right?

350
00:24:41.060 --> 00:24:46.340
So my problem is I forgot to prepend this ID here with a p dot.

351
00:24:47.240 --> 00:24:48.200
That's the problem.

352
00:24:48.230 --> 00:24:49.550
Okay, so let's try that again.

353
00:24:50.180 --> 00:24:50.810
There we go.

354
00:24:50.840 --> 00:24:53.090
OK, so now I know that this is good.

355
00:24:53.420 --> 00:24:56.420
And so I need to fix that right here.

356
00:24:56.570 --> 00:24:57.740
P Dot.

357
00:24:57.800 --> 00:24:58.400
There we go.

358
00:24:58.760 --> 00:24:59.120
All right.

359
00:24:59.450 --> 00:25:01.460
So there's the new query.

360
00:25:01.790 --> 00:25:08.900
So now I can come down here to where we extract the entity from the results set right here.

361
00:25:08.900 --> 00:25:17.420
And now what I can do is I can really just keep extracting more from this result set because now within

362
00:25:17.420 --> 00:25:24.110
this result set, not only do I have this home address ID here, but I actually have all of the columns

363
00:25:24.110 --> 00:25:25.460
of the address as well.

364
00:25:25.610 --> 00:25:31.790
Now I'm going to save myself a little bit of time and jump over to the address repository because over

365
00:25:31.790 --> 00:25:35.780
here I actually already have all the code that I need right here.

366
00:25:36.080 --> 00:25:39.770
And so I'm going to really just copy all of this.

367
00:25:41.900 --> 00:25:48.710
Just like so and then I will jump back over here, and I think I'm going to start off by just pasting

368
00:25:48.710 --> 00:25:50.660
it right here.

369
00:25:53.050 --> 00:25:59.410
So let's just paste all of that in, and then I'm going to change those variables name from ID to address

370
00:25:59.410 --> 00:26:02.380
ID just to make it a little more clear what it is.

371
00:26:02.980 --> 00:26:04.180
Shift F six.

372
00:26:04.840 --> 00:26:08.710
Address and I'm not going to write it all out, but ADR ID.

373
00:26:08.990 --> 00:26:09.400
OK.

374
00:26:09.430 --> 00:26:10.060
Like so.

375
00:26:10.240 --> 00:26:16.150
And then I'm also going to go ahead now and take all of that and extract out a method, because that's

376
00:26:16.150 --> 00:26:18.850
starting to be a lot of code inside a one method.

377
00:26:18.850 --> 00:26:20.710
And I'm not a big fan of doing that.

378
00:26:20.710 --> 00:26:26.950
So all I need to do is to select all of that and then do an option command M or a what is it?

379
00:26:26.980 --> 00:26:37.720
Control alt m and I will just say extract address like so now that didn't quite do what I wanted it

380
00:26:37.720 --> 00:26:41.110
to because I would have wanted it to return the address.

381
00:26:41.110 --> 00:26:41.880
But that's OK.

382
00:26:42.190 --> 00:26:42.790
I can.

383
00:26:42.790 --> 00:26:43.540
I can do that.

384
00:26:44.230 --> 00:26:52.030
So I will just say return address like so and then it's going to complain because my signature says

385
00:26:52.030 --> 00:26:58.600
that I don't return anything currently, but I can just do an option return and tell the ADC to change

386
00:26:58.600 --> 00:27:00.610
the return type to address.

387
00:27:00.730 --> 00:27:01.300
There we go.

388
00:27:01.660 --> 00:27:06.460
So the editing address there and then I can capture this address here.

389
00:27:09.610 --> 00:27:11.710
Sure, I will call that address.

390
00:27:12.340 --> 00:27:18.370
So now I no longer need to call the address repository to retrieve and address by ID.

391
00:27:18.850 --> 00:27:23.830
I'm actually just getting it with the one and only find my ID sequel.

392
00:27:24.160 --> 00:27:24.670
OK?

393
00:27:24.700 --> 00:27:29.020
You see what we're doing here so I can get rid of this line 80.

394
00:27:29.260 --> 00:27:34.450
And now I can just set this address right here instead.

395
00:27:34.660 --> 00:27:41.050
And keep in mind that this set home address method takes this irregular address, but internally it

396
00:27:41.050 --> 00:27:43.570
will wrap this address inside of an optional.

397
00:27:43.720 --> 00:27:48.220
OK, so that's being taken care of for us in this particular case.

398
00:27:48.850 --> 00:27:49.180
All right.

399
00:27:49.180 --> 00:27:55.360
So now we're ready to jump back over to our tests, and I think first off, I just want to run just

400
00:27:55.360 --> 00:27:59.710
this can find person by ID with an address test by itself.

401
00:28:01.200 --> 00:28:02.130
Very good.

402
00:28:02.370 --> 00:28:06.990
So that still works, and I can guarantee you, and I wish I had been paying attention to the timing

403
00:28:06.990 --> 00:28:12.030
on this, but I can guarantee you that this is now executing faster than it was before, when we were

404
00:28:12.030 --> 00:28:14.010
having to make two separate sequel calls.

405
00:28:14.160 --> 00:28:18.900
Now, of course, in both cases, we're talking milliseconds here, but those milliseconds can really

406
00:28:18.900 --> 00:28:23.760
add up when you multiply them times, making multiple calls to retrieve a person.

407
00:28:24.240 --> 00:28:24.660
All right.

408
00:28:24.670 --> 00:28:29.770
So we got that working and we're going to go ahead and end this lesson here.

409
00:28:29.850 --> 00:28:35.790
But in the next lesson, we're going to rain on our own parade again by running all the tests again,

410
00:28:35.790 --> 00:28:41.070
because they're going to be some more considerations that we need to make with a change like the one

411
00:28:41.070 --> 00:28:42.000
that we just did.

412
00:28:42.030 --> 00:28:42.450
OK.

413
00:28:42.780 --> 00:28:44.540
But hey, this is this is great.

414
00:28:44.550 --> 00:28:50.640
We have now enabled at least this one use case to operate potentially almost twice as quickly as it

415
00:28:50.640 --> 00:28:56.550
was before, because it can now make half the number of SQL queries to the database as it was before.

416
00:28:56.880 --> 00:28:59.670
So let's close this one out and I'll see you in the next one.
