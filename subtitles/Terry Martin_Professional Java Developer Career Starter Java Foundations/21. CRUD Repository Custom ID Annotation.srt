1
00:00:00,450 --> 00:00:06,990
All right, folks, I want to make one more custom annotation with you, and then I'm pretty sure we're

2
00:00:06,990 --> 00:00:10,020
going to be done with this, OK, but I think we can do this pretty quickly.

3
00:00:10,440 --> 00:00:15,310
So I'm back here in the credit repository and I wanted to show you something, OK?

4
00:00:15,330 --> 00:00:20,010
We're going to implement an alternative to one of the techniques that we're currently using here.

5
00:00:20,430 --> 00:00:22,980
Some on the delete method here and online.

6
00:00:22,980 --> 00:00:26,630
90, you see here that we've got this entity that get IDs.

7
00:00:26,640 --> 00:00:27,780
So let's see here.

8
00:00:27,780 --> 00:00:35,090
What we were doing was we were creating our prepared statement to delete one item by its I.D..

9
00:00:35,670 --> 00:00:39,990
And here's the item we're calling it entity of type T, right?

10
00:00:39,990 --> 00:00:41,550
Because it's generic sized.

11
00:00:41,880 --> 00:00:47,970
And then we're getting the ID from that entity so that we can bind it to one of the parameters of our

12
00:00:47,970 --> 00:00:49,420
prepared statement.

13
00:00:49,830 --> 00:00:53,040
OK, and then we execute the prepared statement here.

14
00:00:53,640 --> 00:01:01,260
Well, do you recall that the reason why we were able to call this get ID method on this object, even

15
00:01:01,260 --> 00:01:03,990
though we don't know its specific data type, right?

16
00:01:03,990 --> 00:01:04,980
Because it's generic?

17
00:01:05,190 --> 00:01:12,570
The reason we're able to get at that get ID is because at the very top here, when we generic sized

18
00:01:12,570 --> 00:01:19,530
this crud repository, we constrained the generic Typekit a little bit to say that we don't know exactly

19
00:01:19,530 --> 00:01:24,180
what it is, but we do know that it should be something that implements or extends.

20
00:01:24,180 --> 00:01:28,350
But really, it's implementing the entity interface, right?

21
00:01:28,560 --> 00:01:29,430
That's what we did.

22
00:01:29,430 --> 00:01:37,080
And then we defined a Get ID and a Set ID method on the entity interface just so that we'd be able to

23
00:01:37,080 --> 00:01:40,320
do what we're doing down here in the elite method, right?

24
00:01:40,980 --> 00:01:48,270
So that means, though, that any of our entity classes must implement the entity interface.

25
00:01:48,300 --> 00:01:48,750
OK.

26
00:01:49,530 --> 00:01:51,360
We can do a little better than that, though.

27
00:01:51,360 --> 00:01:56,870
So let's actually jump into the person class and I will show you what I mean here.

28
00:01:56,880 --> 00:01:59,640
So I'm going to jump into person.

29
00:02:00,480 --> 00:02:00,900
OK.

30
00:02:01,050 --> 00:02:04,800
So here we've got our person class and it implements entity.

31
00:02:04,800 --> 00:02:10,710
And the only reason we did this was just so that we could call the Get ID and maybe the set ID methods

32
00:02:10,860 --> 00:02:15,150
from within our credit repository and ensure that they'd be there, OK?

33
00:02:15,330 --> 00:02:21,210
But now that we know how to make custom annotations, there's actually an arguably better way to do

34
00:02:21,210 --> 00:02:21,720
this.

35
00:02:22,560 --> 00:02:29,190
So this entity annotation is really just the way of marking where we can get the ID from on this class.

36
00:02:29,640 --> 00:02:38,340
But we could alternatively make a custom annotation to mark which property is our ID property.

37
00:02:38,370 --> 00:02:38,880
OK.

38
00:02:38,970 --> 00:02:40,920
So that's what we're going to do in this lesson.

39
00:02:41,160 --> 00:02:41,400
All right.

40
00:02:41,430 --> 00:02:42,900
So here's how we're going to do this.

41
00:02:43,020 --> 00:02:49,050
So let's start off by just introducing a new custom annotation on this field of ID.

42
00:02:49,170 --> 00:02:53,940
Now, this will be the first time that we're introducing an annotation to a field instead of a method.

43
00:02:54,210 --> 00:02:56,370
But the process will be very similar.

44
00:02:56,520 --> 00:03:04,410
OK, so right before the private word here, I'm going to just put an ad I.D. just like that, and then

45
00:03:04,410 --> 00:03:09,270
we'll let the ID create this annotation for us by putting the cursor on the word ID.

46
00:03:09,690 --> 00:03:14,430
And then I will do an option return and there's our option create annotation ID.

47
00:03:14,640 --> 00:03:19,650
So I will select that and we will put this in the annotation package.

48
00:03:19,650 --> 00:03:25,710
Like so and click, OK, all right, and then we'll need to set the retention policy.

49
00:03:27,150 --> 00:03:33,450
To run time like so and then let's jump back over to the person class again.

50
00:03:33,600 --> 00:03:34,060
All right.

51
00:03:34,080 --> 00:03:39,600
And for whatever reason, the idea decided to reformat the code a little bit here, but that's fine.

52
00:03:39,900 --> 00:03:45,840
So I will maybe just put a space here because if I wanted to put other annotations which we don't,

53
00:03:45,840 --> 00:03:46,890
we're not going to be doing.

54
00:03:46,890 --> 00:03:54,690
But if we were to do so, I would prefer to have a space between each grouping of field and annotation.

55
00:03:54,990 --> 00:03:55,370
All right.

56
00:03:55,380 --> 00:03:57,210
So now we've got that annotation there.

57
00:03:57,210 --> 00:04:03,600
So now we can jump back over to our crud repository and add some code that will actually read this thing

58
00:04:03,600 --> 00:04:04,860
and do something with it.

59
00:04:04,890 --> 00:04:05,280
OK?

60
00:04:05,490 --> 00:04:11,340
By the way, I've been jumping between classes so frequently, and because I'm in presentation mode,

61
00:04:11,340 --> 00:04:17,520
I don't get the benefit of having the tabs show up here, which you may have in your ideas.

62
00:04:17,520 --> 00:04:22,470
Hopefully you do, which is a nicer way to kind of jump between classes that you're frequently getting

63
00:04:22,470 --> 00:04:23,190
in and out of.

64
00:04:23,370 --> 00:04:24,210
But I don't have that.

65
00:04:24,330 --> 00:04:30,270
So I'll just show you this another way that you can jump quickly between files that you frequently are

66
00:04:30,270 --> 00:04:36,380
working in is on Mac Command E or on Windows and Linux Control E!

67
00:04:36,570 --> 00:04:42,090
And then I get a nice little list here of all the most recent classes or files that I've been working

68
00:04:42,090 --> 00:04:42,320
in.

69
00:04:42,330 --> 00:04:46,230
So that's kind of nice for me because, like I said, I've been jumping around a lot lately.

70
00:04:46,440 --> 00:04:50,280
All right, so I'm going to jump back over to the Creed repository class here.

71
00:04:50,790 --> 00:04:58,350
And so what I want to do now is I want to replace the way that I'm getting this idea to make use of

72
00:04:58,350 --> 00:04:59,190
that annotation.

73
00:04:59,190 --> 00:05:04,980
So basically currently I'm just calling entity that get ID that works the way that you know it would.

74
00:05:05,220 --> 00:05:13,140
But I'd rather have some code that would dig into this entity using Reflexion API and find a field that

75
00:05:13,140 --> 00:05:16,560
is annotated with our new ID annotation.

76
00:05:16,560 --> 00:05:24,540
And if it finds one, then this code should get the value that is on that field and return that value

77
00:05:24,570 --> 00:05:24,960
here.

78
00:05:25,290 --> 00:05:26,580
So that's what we're going to do.

79
00:05:26,580 --> 00:05:33,000
We're going to write another annotation finding method that can do the equivalent of what this is doing,

80
00:05:33,000 --> 00:05:39,870
but it will do it via annotation and therefore we will no longer require this class to implement that

81
00:05:39,870 --> 00:05:40,510
interface.

82
00:05:40,530 --> 00:05:40,860
OK.

83
00:05:41,280 --> 00:05:41,560
All right.

84
00:05:41,580 --> 00:05:47,280
So this method can be private because I don't think it will need to be used by any subclasses and definitely

85
00:05:47,280 --> 00:05:49,950
not from classes that are outside of its hierarchy.

86
00:05:49,980 --> 00:05:55,320
OK, so private, and I think it's going to return along, although I do have some comments about that

87
00:05:55,320 --> 00:05:56,730
that I will mention later.

88
00:05:57,090 --> 00:05:58,620
OK, so it will return along.

89
00:05:58,620 --> 00:06:00,090
And I don't know.

90
00:06:00,090 --> 00:06:05,520
Let's say it's find I thee by annotation.

91
00:06:06,890 --> 00:06:12,530
And so it's going to take an input of type T and it's going to be an entity.

92
00:06:13,470 --> 00:06:13,890
All right.

93
00:06:14,250 --> 00:06:16,440
Because that's what we're dealing with up here.

94
00:06:16,710 --> 00:06:24,210
All right, so the first thing I think we'll do is we will need to get our hands on the class into T

95
00:06:24,540 --> 00:06:33,000
get class right now from here from this point, instead of asking for all of the methods on the class.

96
00:06:33,120 --> 00:06:36,540
I think what we'll want to do instead is to ask for the fields.

97
00:06:36,840 --> 00:06:38,670
So let's see what we've got here.

98
00:06:38,730 --> 00:06:42,660
So we've got methods for accessing the declared fields.

99
00:06:42,670 --> 00:06:45,460
I think we were accessing the declared methods before.

100
00:06:45,480 --> 00:06:51,540
So here's one to get declared fields, which returns an array of fields.

101
00:06:52,110 --> 00:06:52,590
All right.

102
00:06:52,980 --> 00:06:58,980
And then just as before, now that we've got this array of fields, I want to use the Streams API to

103
00:06:58,980 --> 00:07:04,440
iterate over the fields in that array and then do some lambda streamy stuff, right?

104
00:07:04,830 --> 00:07:11,760
So, all right, so I'm going to do a dot arg so that I can surround this whole entire line with parentheses

105
00:07:11,760 --> 00:07:15,030
and then do arrays dot stream.

106
00:07:16,020 --> 00:07:16,800
Like so.

107
00:07:17,700 --> 00:07:18,150
All right.

108
00:07:18,450 --> 00:07:25,020
And so that just converted our array of fields into a stream of fields.

109
00:07:25,770 --> 00:07:34,530
And then for each of those fields, let's do a filter so that we can find the field that is annotated

110
00:07:34,530 --> 00:07:37,530
with an at ID annotation, right?

111
00:07:37,710 --> 00:07:46,200
So for a field f, let's do something like f dot is annotation present, and then we can specify our

112
00:07:46,200 --> 00:07:49,440
new ID annotation ID class.

113
00:07:49,470 --> 00:07:49,950
OK.

114
00:07:50,430 --> 00:07:57,060
So if there is a field that is annotated with this new ID annotation, that will find it right there.

115
00:07:57,330 --> 00:08:03,840
OK, so now if that field is found, we will want to read its value.

116
00:08:04,260 --> 00:08:10,260
So really, what that means is we'd be converting from the field to the fields value.

117
00:08:10,260 --> 00:08:14,880
And anytime we're talking about converting from one thing to another in the streams API, we're talking

118
00:08:14,880 --> 00:08:15,960
about doing a map, right?

119
00:08:16,290 --> 00:08:16,640
All right.

120
00:08:16,650 --> 00:08:18,810
So we'll be doing a mapping here.

121
00:08:18,960 --> 00:08:22,200
And so we're going to have a field right now.

122
00:08:22,200 --> 00:08:23,440
Let me show you real quick here.

123
00:08:23,460 --> 00:08:27,780
There is a method on the field class to get a value because that's what we want to do.

124
00:08:27,780 --> 00:08:32,130
In fact, let me jump back over here to the person class real quick and just show you so.

125
00:08:32,340 --> 00:08:34,170
Here's the field in question, right?

126
00:08:34,170 --> 00:08:39,470
It's annotated with ID, and presumably it's going to have a value set on this field.

127
00:08:39,480 --> 00:08:45,240
So all we're trying to do with the Reflection API is to say, Hey, for this given field right here,

128
00:08:45,360 --> 00:08:50,820
give me its value, but we're going to run into a problem and the problem that we're going to run into

129
00:08:50,820 --> 00:08:57,300
if we just try to get the value directly without doing one little step first is that this field is private

130
00:08:57,780 --> 00:09:04,470
and our external code, our code that is external to the person class won't be allowed to just willy

131
00:09:04,470 --> 00:09:04,830
nilly.

132
00:09:04,830 --> 00:09:10,980
Go read this value off of a private field without us doing a little bit of a sidestep first.

133
00:09:10,980 --> 00:09:11,370
OK?

134
00:09:11,730 --> 00:09:13,950
And so jumping back over.

135
00:09:14,190 --> 00:09:22,350
OK, so if we were to try to do this f dot get OK and this would be the method that we would have tried

136
00:09:22,530 --> 00:09:29,850
and then we could pass in our entity like so this won't work as is because we won't have permission

137
00:09:29,850 --> 00:09:31,230
to read that field.

138
00:09:31,380 --> 00:09:31,800
OK.

139
00:09:32,550 --> 00:09:36,450
So what we would have to do is a couple of intermediate steps.

140
00:09:36,630 --> 00:09:42,900
So what I'm thinking here is we're actually going to put this inside of a code block, right?

141
00:09:42,900 --> 00:09:46,410
So step one, it's actually only it's only like one extra step.

142
00:09:46,410 --> 00:09:54,900
The step one is that we will have to first call F Dot set accessible to true.

143
00:09:55,170 --> 00:09:59,130
OK, so that's going to basically allow us to tell Java.

144
00:09:59,640 --> 00:10:05,520
Yeah, I know that this field is marked as private, but let's override that so that we can actually

145
00:10:05,520 --> 00:10:06,800
read this value out of here.

146
00:10:06,810 --> 00:10:11,820
OK, so that's basically us saying, let's override the stated level of access on that field.

147
00:10:11,970 --> 00:10:12,360
OK.

148
00:10:12,600 --> 00:10:14,670
So that's one thing we have to do.

149
00:10:15,150 --> 00:10:18,750
And so once we've done that now, we can access the field itself.

150
00:10:18,780 --> 00:10:23,460
OK, now let me explain why I'm having a pass in this entity here.

151
00:10:23,880 --> 00:10:27,550
This f is a field of the class.

152
00:10:27,570 --> 00:10:33,720
OK, so remember, now we're in object oriented programming, we're dealing with classes and we're dealing

153
00:10:33,720 --> 00:10:35,070
with objects, right?

154
00:10:35,490 --> 00:10:38,340
And they're kind of two sides of the same coin.

155
00:10:38,550 --> 00:10:42,480
So this field f is a field of the class.

156
00:10:42,600 --> 00:10:42,990
Right?

157
00:10:43,260 --> 00:10:48,580
But to read a value from that field, we're talking about the object, right?

158
00:10:48,600 --> 00:10:53,040
And so we have to pass in the object that actually has the value.

159
00:10:53,040 --> 00:10:57,630
The class doesn't have the value, it's the object that has the value, right?

160
00:10:57,810 --> 00:11:02,640
And so that's why we're having a pass in the object, which is this entity variable here.

161
00:11:02,670 --> 00:11:09,600
OK, now one other issue is if I hover over this red squiggly here, you see that our attempt to call

162
00:11:09,600 --> 00:11:16,890
the get method can result in an illegal access exception, and we're going to have to do something about

163
00:11:16,890 --> 00:11:17,340
that.

164
00:11:17,700 --> 00:11:23,160
So what we can try to do here is simply wrap this call in a try catch block.

165
00:11:25,360 --> 00:11:29,710
Now that's getting a little nasty looking, but that's about the best we can do, although we could

166
00:11:29,710 --> 00:11:33,490
extract this whole thing out into its own method, we might take a look at that.

167
00:11:33,940 --> 00:11:38,920
So anyway, though, here's our call to get this value and then we need to capture it.

168
00:11:39,190 --> 00:11:47,080
Now, if we capture it like this and just call it IED, we could try to somehow return that IED out

169
00:11:47,080 --> 00:11:48,070
of all of this.

170
00:11:48,730 --> 00:11:55,870
However, a slightly better thing to do probably would be to declare this object outside of the try

171
00:11:55,870 --> 00:11:56,440
catch.

172
00:11:58,460 --> 00:12:06,620
So I'll just make it null and then set that value like so now notice here that this call to get is actually

173
00:12:06,620 --> 00:12:09,000
returning something of just type object.

174
00:12:09,020 --> 00:12:09,470
OK?

175
00:12:09,500 --> 00:12:11,780
It doesn't know what the actual type is.

176
00:12:12,080 --> 00:12:14,990
There are actually other versions of this get method.

177
00:12:14,990 --> 00:12:17,330
Like we could explicitly say, get long.

178
00:12:17,840 --> 00:12:18,260
OK.

179
00:12:18,290 --> 00:12:19,070
We could do that.

180
00:12:19,070 --> 00:12:21,440
And then this type could be long.

181
00:12:21,620 --> 00:12:23,270
And that's perfectly fine, too.

182
00:12:23,390 --> 00:12:27,770
As long as you know that that really is going to be a long in this case.

183
00:12:28,910 --> 00:12:35,330
So then what would be coming out of this map function would be a stream of longs now?

184
00:12:35,600 --> 00:12:36,080
OK.

185
00:12:36,110 --> 00:12:38,870
And so then we can just return.

186
00:12:40,650 --> 00:12:46,950
This I'd like so and so then what would be coming out of this map would be a map of lungs.

187
00:12:47,160 --> 00:12:50,580
We also could have used the map to long method.

188
00:12:51,570 --> 00:12:52,890
We could have done that as well.

189
00:12:53,040 --> 00:12:56,650
And then that would have yielded a long stream, right?

190
00:12:56,670 --> 00:13:02,700
So in this case, either way is fine since we're not needing to do any math or anything like that on

191
00:13:02,700 --> 00:13:03,390
the lungs.

192
00:13:03,420 --> 00:13:09,480
I don't know that I really need the map to long in this particular case, but that that might have been

193
00:13:09,480 --> 00:13:10,170
fine too.

194
00:13:10,650 --> 00:13:10,910
All right.

195
00:13:10,920 --> 00:13:17,100
So now we're going to have a stream of lungs coming out of the map, and now we just need to decide

196
00:13:17,100 --> 00:13:18,090
what to do with it.

197
00:13:18,270 --> 00:13:21,960
So so I'm thinking we can just do a find first.

198
00:13:23,100 --> 00:13:29,940
And as you'll recall now, the find first method is going to return an optional though, OK?

199
00:13:30,090 --> 00:13:33,870
But I've declared here that this method will return an actual long.

200
00:13:34,230 --> 00:13:41,580
So the question is what should happen if our entity was not annotated with an ID annotation?

201
00:13:41,910 --> 00:13:43,080
What should happen here?

202
00:13:43,470 --> 00:13:48,450
I'm thinking, if that's the case, we should probably just throw some type of runtime exception.

203
00:13:48,690 --> 00:13:53,250
And the optional class has the ability for us to do exactly that.

204
00:13:53,850 --> 00:13:54,930
So we can call.

205
00:13:55,080 --> 00:13:58,110
I'm going to type the word through or I'm going to start to type it in.

206
00:13:58,110 --> 00:14:01,980
And you see here that we've got a couple versions of an oral through method.

207
00:14:02,400 --> 00:14:06,990
Now this first one will throw a no such element exception.

208
00:14:07,450 --> 00:14:13,140
And, you know, I mean, it doesn't matter a whole lot for what we're doing right now, but maybe that.

209
00:14:13,410 --> 00:14:19,080
But to my thinking, that might not be quite the best approach because I think I feel like that implies

210
00:14:19,080 --> 00:14:23,610
that it's dealing with some type of a collection of things that it where it couldn't find something.

211
00:14:23,940 --> 00:14:29,370
This other version, though, that takes a supplier as an input, allows us to control what exception

212
00:14:29,370 --> 00:14:33,150
is being thrown, and I'm kind of leaning a little bit more towards that one.

213
00:14:33,810 --> 00:14:39,390
So this takes a supplier, and the supplier is one of the functional interfaces that does not take an

214
00:14:39,390 --> 00:14:40,170
input.

215
00:14:40,590 --> 00:14:42,120
It just supplies things.

216
00:14:42,120 --> 00:14:45,240
So it just outputs stuff, but it doesn't take any input.

217
00:14:45,270 --> 00:14:45,690
OK.

218
00:14:46,050 --> 00:14:50,190
So what we could do here is just supply a basic lambda that takes no input.

219
00:14:52,250 --> 00:14:59,480
Like so and then does something like a new run time exception, and then we can supply a nice message

220
00:14:59,480 --> 00:15:06,920
here, like no I.D. annotated field found something like that.

221
00:15:07,070 --> 00:15:10,640
Now do recall, though, and I've mentioned this a couple of times in real life.

222
00:15:10,640 --> 00:15:16,520
What we really should be doing is actually creating our own custom runtime exception in this case,

223
00:15:16,910 --> 00:15:20,530
and we could make one called no ID found exception.

224
00:15:20,540 --> 00:15:21,820
OK, something like that.

225
00:15:21,830 --> 00:15:23,860
And then that's what we be returning here.

226
00:15:23,870 --> 00:15:28,170
But in the interest of time, I don't really want to bother doing that right now.

227
00:15:28,190 --> 00:15:33,620
OK, but that's what we really should be doing, so that if we needed to catch that exception for any

228
00:15:33,620 --> 00:15:40,670
reason, we'd have a specific exception that we knew to look for by using just the generic runtime exception.

229
00:15:40,910 --> 00:15:46,640
That makes it harder for us to test what exactly went wrong and what we want to do about it, because

230
00:15:46,640 --> 00:15:49,070
everything is just looking generic, OK?

231
00:15:49,100 --> 00:15:54,740
And so then I think we can just come back up here to the top and just say return and let me clean up

232
00:15:54,740 --> 00:15:56,570
my formatting a little bit here.

233
00:15:56,600 --> 00:15:56,990
OK?

234
00:15:57,260 --> 00:16:02,000
So this code should try to find that ID and return it in effect.

235
00:16:02,270 --> 00:16:10,130
So with that being said, now we can come up here and instead of doing entity that get I.D., we should

236
00:16:10,130 --> 00:16:17,150
be able to now do find ID by annotation and then pass in the entity that way.

237
00:16:17,420 --> 00:16:17,780
All right.

238
00:16:17,790 --> 00:16:21,560
So now let's just rerun our test and see if this actually works.

239
00:16:22,640 --> 00:16:26,300
All right, so I'm just opening up all of the tests, and I'm just going to run them all.

240
00:16:27,780 --> 00:16:29,250
Oh, OK, not quite.

241
00:16:29,430 --> 00:16:32,640
So let's click on the can delete and let's see what's going on here.

242
00:16:32,640 --> 00:16:39,900
Attempt to get field person that ID with illegal data type conversion too long.

243
00:16:40,230 --> 00:16:45,330
OK, so it says something here was an illegal attempt.

244
00:16:45,720 --> 00:16:47,430
And let's see where are we?

245
00:16:47,440 --> 00:16:48,930
Credit repository line one.

246
00:16:48,930 --> 00:16:49,850
Oh, six.

247
00:16:50,340 --> 00:16:51,300
OK, right here.

248
00:16:51,600 --> 00:16:55,920
Ah, OK, so it just doesn't like the fact that I explicitly tried to call.

249
00:16:55,950 --> 00:16:57,060
Get long here.

250
00:16:57,330 --> 00:16:58,950
OK, so it doesn't like that.

251
00:16:59,070 --> 00:17:04,440
So let's see what happens if we just change that back to just the plain old get method instead.

252
00:17:05,430 --> 00:17:08,280
But then we just cast it to a along.

253
00:17:08,310 --> 00:17:09,420
Let's see if that works.

254
00:17:10,730 --> 00:17:11,600
Hey, there we go.

255
00:17:11,690 --> 00:17:12,950
So that was pretty easy.

256
00:17:13,520 --> 00:17:14,300
All right.

257
00:17:14,660 --> 00:17:15,290
Awesome.

258
00:17:15,500 --> 00:17:21,560
So now that we know that this basic approach works, I think we've got a few other places in here where

259
00:17:21,560 --> 00:17:23,630
we're doing this like, I think right here.

260
00:17:23,700 --> 00:17:26,030
T. Colin Cohen get I.D..

261
00:17:26,420 --> 00:17:32,360
So this is one that will also need to replace and any place where we're calling get ID on the entity.

262
00:17:32,900 --> 00:17:38,840
Now this one, the way we're doing it now is that we're streaming over the entities and then we're converting

263
00:17:38,840 --> 00:17:44,510
the entities into their IDs by calling the entities own Get ID method.

264
00:17:44,660 --> 00:17:46,380
And now we won't do it that way.

265
00:17:46,400 --> 00:17:51,560
Instead, we pass in the entity and then call this method here.

266
00:17:51,800 --> 00:17:57,960
So we're going to have to change this into a more traditional lambda expression.

267
00:17:57,980 --> 00:18:01,760
OK, so the input type would be an entity.

268
00:18:01,760 --> 00:18:03,530
So I'm going to just call that E.

269
00:18:04,100 --> 00:18:12,320
And then I'm going to say that will map to a call to the Find ID by annotation where we will pass in

270
00:18:12,320 --> 00:18:13,730
the E like that.

271
00:18:15,190 --> 00:18:20,140
Now, unfortunately, we know now that we don't actually have an explicit test to test this out at this

272
00:18:20,140 --> 00:18:23,860
time, but I'm pretty comfortable that that is going to work.

273
00:18:23,890 --> 00:18:24,370
All right.

274
00:18:24,670 --> 00:18:27,310
And here's another one where we're calling Get it.

275
00:18:27,700 --> 00:18:29,590
And so this will be the same bill.

276
00:18:29,830 --> 00:18:38,170
So I'm just going to replace that with find my I.D. and then pass in the entity like so and now I'm

277
00:18:38,170 --> 00:18:40,240
just going to search for all other places.

278
00:18:40,240 --> 00:18:47,380
I'm doing a command F. Get I.D. and looks like there are no more references to the Get ID method.

279
00:18:47,380 --> 00:18:50,890
Call within this class, so we might be good there.

280
00:18:51,040 --> 00:18:58,600
And so now let's go ahead and just run all the tests again and see, Hey, looks like everything's good.

281
00:18:58,810 --> 00:19:05,890
So now one perhaps final thing we can do is to come up here and now we no longer need to constrain this

282
00:19:05,890 --> 00:19:08,680
generic type as some form of entity.

283
00:19:08,680 --> 00:19:10,660
I think we can actually get rid of that.

284
00:19:10,690 --> 00:19:12,760
Let's see if we break any code when we do it.

285
00:19:13,060 --> 00:19:13,810
Oh, we do.

286
00:19:14,110 --> 00:19:16,090
OK, so OK.

287
00:19:16,090 --> 00:19:21,520
So we do explicitly set an I.D. on one of these objects as well.

288
00:19:21,610 --> 00:19:26,530
So we're going to need a setter method as well that uses the annotation approach to do so.

289
00:19:26,620 --> 00:19:34,180
So let's go find our find by annotation method here, and let's create another version of this.

290
00:19:34,570 --> 00:19:37,720
Maybe like a set ID by annotation.

291
00:19:37,750 --> 00:19:38,140
OK.

292
00:19:38,800 --> 00:19:39,130
All right.

293
00:19:39,130 --> 00:19:40,750
So we'll make another method.

294
00:19:40,960 --> 00:19:45,820
It'll be private, but this one will be void because we're not asking for any information now, right?

295
00:19:45,820 --> 00:19:50,140
We're just setting information on the ID annotated field, right?

296
00:19:50,290 --> 00:19:57,880
And so I will call this set ID by annotation and the input.

297
00:19:57,880 --> 00:20:00,960
Now for this, I think, will just be of type long, right?

298
00:20:00,970 --> 00:20:06,340
It will be the actual it'll be the actual value that we want to set on that field.

299
00:20:06,850 --> 00:20:07,990
So I will call it ID.

300
00:20:08,740 --> 00:20:13,780
And then this makes me realize now, since I'm calling the Set ID by annotation, it probably would

301
00:20:13,780 --> 00:20:15,730
be better to call this method down here.

302
00:20:16,630 --> 00:20:19,810
Get ID by annotation rather than find Okay.

303
00:20:19,810 --> 00:20:25,360
So I'm going to put my cursor on there and do a shift of six and just rename that method from find to

304
00:20:25,390 --> 00:20:25,870
get.

305
00:20:26,590 --> 00:20:27,070
All right.

306
00:20:27,970 --> 00:20:34,210
So now we've got our set ID by annotation, and then I think we're going to do some of the same basic

307
00:20:34,210 --> 00:20:37,060
beginning steps I'm going to copy down to about here.

308
00:20:37,090 --> 00:20:41,470
OK, from this get ID by annotation method as a starting point.

309
00:20:41,680 --> 00:20:45,610
Copy that command, see or control C and then paste.

310
00:20:45,670 --> 00:20:52,930
OK, now some differences here, though, OK, well, actually first off, I see now that we also need

311
00:20:53,140 --> 00:20:57,430
the entity, so we need not just the value, but we also need the actual object that we're setting the

312
00:20:57,430 --> 00:21:01,390
value on so we can pass that in as another object.

313
00:21:01,510 --> 00:21:04,390
Now the data type for entity is generic, right?

314
00:21:04,400 --> 00:21:06,940
So it's going to be type T, right?

315
00:21:07,300 --> 00:21:08,140
So there we go.

316
00:21:08,170 --> 00:21:08,620
OK.

317
00:21:08,830 --> 00:21:13,930
So we're passing in the value and then the thing that we want to set that value on the object that we

318
00:21:13,930 --> 00:21:15,520
want to set that value on.

319
00:21:15,580 --> 00:21:16,030
OK.

320
00:21:16,420 --> 00:21:16,750
All right.

321
00:21:16,780 --> 00:21:22,930
So here we are finding the declared fields and then filtering through just the fields that are annotated

322
00:21:22,930 --> 00:21:27,040
with I.D. And now here we were doing a mapping down here.

323
00:21:27,040 --> 00:21:31,540
But up here, since we're not returning anything, so map doesn't quite make sense.

324
00:21:31,690 --> 00:21:34,570
I think instead of four each would make more sense.

325
00:21:34,570 --> 00:21:35,770
Does that make sense to you?

326
00:21:36,070 --> 00:21:41,410
Mapping is when you're converting from one thing to another and then presumably that other thing that

327
00:21:41,410 --> 00:21:45,130
you're going to get out of the mapping, you're going to keep doing something else with.

328
00:21:45,160 --> 00:21:45,490
Right?

329
00:21:45,670 --> 00:21:51,310
But in this case, we want to find this field and we're not going to convert the field to anything.

330
00:21:51,400 --> 00:21:55,000
Once we find that field, we just want to do something with that field, right?

331
00:21:55,120 --> 00:22:02,410
And so for each which is a terminating operation in the Streams API is, I think, more appropriate

332
00:22:02,440 --> 00:22:02,870
here.

333
00:22:02,890 --> 00:22:03,340
OK.

334
00:22:03,580 --> 00:22:04,940
So we're going to do a for each.

335
00:22:04,960 --> 00:22:06,400
I don't know why that just happened.

336
00:22:06,460 --> 00:22:07,510
Hold on a second here.

337
00:22:07,840 --> 00:22:08,100
All right.

338
00:22:08,110 --> 00:22:09,880
So we'll do a for each instead.

339
00:22:10,000 --> 00:22:14,440
And once we find this field, we do want to make it accessible.

340
00:22:14,450 --> 00:22:19,570
And then once it's accessible, I think we can just call F Dot set.

341
00:22:19,990 --> 00:22:20,680
There we go.

342
00:22:20,680 --> 00:22:26,200
And the setter method here set takes the object that we want to set something on, which would be this

343
00:22:26,200 --> 00:22:29,980
entity and then the value, which would be the ID, right?

344
00:22:30,220 --> 00:22:33,710
So entity comma idea.

345
00:22:33,720 --> 00:22:35,470
Let's see if it will be happy with that.

346
00:22:35,470 --> 00:22:39,600
And now it's probably going to want us to handle an exception, though.

347
00:22:39,610 --> 00:22:45,100
So we will wrap this call in a try catch as we did before.

348
00:22:45,130 --> 00:22:45,820
There we go.

349
00:22:46,270 --> 00:22:54,340
And if this does not work, I think what we can do here is actually just turn around and throw a new

350
00:22:54,340 --> 00:22:56,020
runtime exception.

351
00:22:57,040 --> 00:22:58,830
And then give a nice message here.

352
00:22:59,750 --> 00:23:05,690
Unable to set I.D. filled value.

353
00:23:06,680 --> 00:23:07,070
OK.

354
00:23:07,100 --> 00:23:08,030
Something like that.

355
00:23:08,180 --> 00:23:08,580
All right.

356
00:23:08,600 --> 00:23:15,620
And so then we can close off our for each and then I think we can close off the entire method as well.

357
00:23:16,190 --> 00:23:17,870
And let's see here.

358
00:23:17,970 --> 00:23:20,150
Yeah, I don't see any errors here.

359
00:23:20,300 --> 00:23:20,650
All right.

360
00:23:20,660 --> 00:23:23,600
So let's jump up to this guy now.

361
00:23:23,750 --> 00:23:25,190
OK, so set it.

362
00:23:25,520 --> 00:23:34,190
So now, instead of calling Set I.D., I think we can just call our set ID by annotation, which will

363
00:23:34,190 --> 00:23:36,890
take our ID and then our entity.

364
00:23:37,670 --> 00:23:38,470
There we go.

365
00:23:38,480 --> 00:23:42,260
And I don't see any other errors and notice now.

366
00:23:42,260 --> 00:23:46,880
When I'm looking for errors, I'm looking for red marks over in this gutter over here on the right,

367
00:23:47,210 --> 00:23:48,230
and I don't see any.

368
00:23:48,240 --> 00:23:49,430
So I think we're good there.

369
00:23:49,550 --> 00:23:52,070
So now I think we're ready to run our tests again.

370
00:23:54,890 --> 00:23:58,860
Look at that, everything's still working for us, and I don't know.

371
00:23:58,880 --> 00:24:02,630
You know, sometimes I don't 100 percent want to trust my own tests.

372
00:24:02,930 --> 00:24:11,660
So just for grins, if we comment out this whole setting business temporarily right there and then run

373
00:24:11,660 --> 00:24:14,690
this again, we should get a failure.

374
00:24:15,380 --> 00:24:17,450
Yeah, yeah, we got lots of failures.

375
00:24:17,870 --> 00:24:24,350
So by doing this kind of thing, this is just further helping me to trust that my tests are testing

376
00:24:24,350 --> 00:24:28,640
adequately because it is entirely possible to write inadequate tests.

377
00:24:28,820 --> 00:24:33,460
And you may not even fully realize it because they're just not very well written, right?

378
00:24:33,470 --> 00:24:36,700
And so they pass under very easy circumstances.

379
00:24:36,710 --> 00:24:38,530
So I feel pretty good with that.

380
00:24:38,540 --> 00:24:44,330
And so now I will come back up here and uncomment that and then run this one more time.

381
00:24:45,140 --> 00:24:45,860
Looking good?

382
00:24:46,310 --> 00:24:46,790
All right.

383
00:24:46,910 --> 00:24:55,100
And so now we can jump back over to the person class and get rid of this.

384
00:24:57,650 --> 00:25:01,970
And now we don't need these overrides here, either.

385
00:25:02,930 --> 00:25:03,620
Very good.

386
00:25:05,030 --> 00:25:11,420
And in fact, I could even delete the entity class are the entity interface itself.

387
00:25:18,350 --> 00:25:19,490
Gone, bye bye.

388
00:25:19,790 --> 00:25:25,160
And because of that surgery, let's just run all the tests again.

389
00:25:27,000 --> 00:25:27,570
Looking good.

390
00:25:28,200 --> 00:25:28,620
All right.

391
00:25:28,980 --> 00:25:36,360
So that's really all I wanted to do was to show you that now we didn't really even need to keep implementing

392
00:25:36,360 --> 00:25:37,020
that interface.

393
00:25:37,260 --> 00:25:40,050
Let me step back real quick and just tell you a little bit more here.

394
00:25:40,290 --> 00:25:44,640
What's informing my decisions to do these kinds of changes, by the way?

395
00:25:44,880 --> 00:25:48,240
I'm not so creative that I'm making up all these techniques myself.

396
00:25:48,240 --> 00:25:50,610
I mean, I am making up all the code myself.

397
00:25:50,610 --> 00:25:54,870
But the idea of sticking an ID on here instead of using an interface or whatever.

398
00:25:55,170 --> 00:26:01,830
This is informed by the fact that there are well known frameworks in Java for doing this kind of stuff.

399
00:26:01,950 --> 00:26:07,020
And basically, what I'm showing you here is a little bit of how those future frameworks that you will

400
00:26:07,020 --> 00:26:09,700
be learning are actually working.

401
00:26:09,720 --> 00:26:10,200
OK?

402
00:26:10,380 --> 00:26:16,290
And so some of those future frameworks have annotations that are actually named exactly this, in fact,

403
00:26:16,330 --> 00:26:18,540
and they work similarly to this.

404
00:26:18,690 --> 00:26:25,920
Now, a couple of differences are that our ID annotation is currently only written to work on the field

405
00:26:25,920 --> 00:26:26,640
itself.

406
00:26:26,880 --> 00:26:33,210
But more robust frameworks that do this kind of thing would also work if you put the Ad ID annotation

407
00:26:33,210 --> 00:26:38,550
on a method, so you could put it on the getter or setter method or whatever, right?

408
00:26:38,570 --> 00:26:39,480
Things like that.

409
00:26:39,660 --> 00:26:41,460
We're not going quite that far.

410
00:26:41,610 --> 00:26:48,600
Another thing I want to mention as well is that our credit repository framework now is just assuming

411
00:26:48,600 --> 00:26:56,910
that all entities will have an idea of type long, but more robust frameworks would actually not make

412
00:26:56,910 --> 00:26:58,140
that assumption at all.

413
00:26:58,320 --> 00:27:02,670
And we could have written ours to not make that assumption, except that I think it would have caused

414
00:27:02,670 --> 00:27:05,700
us to write a little bit extra code that I don't really want to write.

415
00:27:05,880 --> 00:27:08,340
And let me show you what that code would look like, by the way.

416
00:27:09,030 --> 00:27:15,330
So we'll jump back over to the credit repository wherever we're working with IDs like right here, start

417
00:27:15,360 --> 00:27:15,990
get long.

418
00:27:16,350 --> 00:27:22,500
If we had decided to generate size the ID type so that it could be any type and not just long.

419
00:27:22,770 --> 00:27:27,750
That would mean that we would have to have some type of conditional code right here.

420
00:27:27,870 --> 00:27:32,220
That would say if the generic ID type is long, then do it this way.

421
00:27:32,310 --> 00:27:37,890
If it's a string, then then, you know, do then do string ID equals restart that string blah blah

422
00:27:37,890 --> 00:27:38,240
blah, right?

423
00:27:38,250 --> 00:27:45,000
So we'd have to write an R-Sport that get method for each of the different data types that we supported.

424
00:27:45,060 --> 00:27:45,480
OK.

425
00:27:45,630 --> 00:27:49,500
And I didn't want to get into all of that, but it would be pretty straightforward.

426
00:27:49,620 --> 00:27:55,200
The other thing we would have done is right here, where we have generic sized the entity type.

427
00:27:55,350 --> 00:27:58,650
We would have added one more generic type for the ID.

428
00:27:58,980 --> 00:28:00,330
OK, right here.

429
00:28:00,600 --> 00:28:05,790
And you will see in the future with one of the most popular database frameworks these days for Java,

430
00:28:05,790 --> 00:28:09,550
which is called spring data, it works exactly like that.

431
00:28:09,570 --> 00:28:16,070
OK, so you could actually specify both the entity type and then the ID type as well past those both

432
00:28:16,080 --> 00:28:16,320
in.

433
00:28:16,470 --> 00:28:19,080
And that's almost certainly what they're doing in their own code.

434
00:28:19,080 --> 00:28:24,360
Implementation is they've probably extracted this out into a method with a conditional block that says

435
00:28:24,510 --> 00:28:26,670
if the ID type is long, then do it this way.

436
00:28:26,670 --> 00:28:31,050
If it's a string to it this way, if it's a date, do it another way and so on and so forth.

437
00:28:31,740 --> 00:28:33,330
So that was all I wanted to show you.

438
00:28:33,360 --> 00:28:37,770
So I think we're done now with the annotations and credit repository reflection stuff.

439
00:28:37,890 --> 00:28:42,540
We may still come in here and tweak it here and there, but the main focus going forward won't be on

440
00:28:42,540 --> 00:28:45,000
further revisions to this credit repository.

441
00:28:45,120 --> 00:28:50,790
I think instead, we'll focus more on the rest of all of the database, things that I still want to

442
00:28:50,790 --> 00:28:51,270
teach you.

443
00:28:51,480 --> 00:28:53,490
So with that, I'll see you in the next one.
