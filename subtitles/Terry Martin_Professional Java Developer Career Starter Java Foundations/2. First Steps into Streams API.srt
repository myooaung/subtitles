1
00:00:00,580 --> 00:00:05,890
All right, so in this lesson, the first thing we're going to do is to set ourselves up for an introduction

2
00:00:05,890 --> 00:00:09,700
into the Streams API and a bit more of lambdas.

3
00:00:10,090 --> 00:00:17,470
So specifically, what we're going to do is we're going to basically re implement some of this basic

4
00:00:17,470 --> 00:00:21,580
functionality that we have here in the main Java file.

5
00:00:21,730 --> 00:00:28,090
We're going to implement some of this, but using primarily the Streams API, and we'll do this in another

6
00:00:28,090 --> 00:00:32,440
Java class because there's kind of a lot going on here, kind of a lot of noise.

7
00:00:32,740 --> 00:00:36,790
So the first thing we're going to do, if you're not already there, go ahead and go back into the main

8
00:00:37,000 --> 00:00:45,460
Java file and let's copy the people text variable in all of the data inside of it, right?

9
00:00:45,460 --> 00:00:52,540
So I'm just going to select and drag or you can I just let go of my drag, but I can hold down on the

10
00:00:52,540 --> 00:00:59,440
ship key and then click down here to select the rest of that and then do a command C or A or a control

11
00:00:59,440 --> 00:01:00,730
C to copy.

12
00:01:01,870 --> 00:01:08,950
And then I'm going to open up the project view pane over here on the left, and I'm just going to create

13
00:01:08,950 --> 00:01:13,210
another class and it's not really going to matter too much what this class is called.

14
00:01:13,540 --> 00:01:15,850
We're kind of still just sort of playing around.

15
00:01:16,060 --> 00:01:22,480
So I'm going to go to new Java class and I don't know, maybe I'll call this one streams.

16
00:01:24,220 --> 00:01:26,740
Stuff you can call yours whatever you like.

17
00:01:27,310 --> 00:01:29,920
And this will be a class and enter.

18
00:01:30,950 --> 00:01:36,260
All right, and then I'm going to make a new line inside of the class by holding that on shift and enter,

19
00:01:36,560 --> 00:01:40,880
and I will create a public static void main with IBM and hit enter.

20
00:01:41,240 --> 00:01:41,520
All right.

21
00:01:41,550 --> 00:01:46,430
And now the first thing I'm going to do is just go ahead and paste that variable here.

22
00:01:47,430 --> 00:01:47,940
Here we go.

23
00:01:48,240 --> 00:01:53,940
And then I'm going to give myself a little more room by closing the project pane on the left.

24
00:01:55,630 --> 00:02:02,710
OK, so we'll start off with something relatively simple, let's just reproduce the capability of this

25
00:02:02,710 --> 00:02:11,740
class to convert all of these lines of text back into instances of employee and print them out basically

26
00:02:11,740 --> 00:02:13,750
as we're doing in the other class.

27
00:02:14,170 --> 00:02:19,600
Now for this, I'm going to go ahead and just type this out first, and then I will come back and explain

28
00:02:19,600 --> 00:02:20,220
what's going on.

29
00:02:20,230 --> 00:02:26,200
So what my my purpose here is is basically just expose you to some of the basics of what can be done

30
00:02:26,200 --> 00:02:27,970
with the Streams API.

31
00:02:28,450 --> 00:02:28,830
All right.

32
00:02:28,840 --> 00:02:35,230
So I'm my is at the bottom of this variable declaration here in hit enter a couple of times.

33
00:02:36,880 --> 00:02:41,510
And so I'm going to go right ahead and reference this variable here.

34
00:02:41,530 --> 00:02:46,540
Now one thing you're going to notice I won't be using any loops at all.

35
00:02:46,840 --> 00:02:47,270
OK?

36
00:02:47,470 --> 00:02:51,250
And that's kind of a lot of the magic of the Streams API.

37
00:02:51,550 --> 00:02:51,940
All right.

38
00:02:52,180 --> 00:02:54,310
So people text is the variable.

39
00:02:54,310 --> 00:02:55,660
So watch this.

40
00:02:56,380 --> 00:03:04,300
I can reference the people text variable and we will utilize our first new foray into the streams API

41
00:03:04,720 --> 00:03:08,740
people text dot lines.

42
00:03:09,310 --> 00:03:16,140
Now notice this method line's returns, something called a stream of strings.

43
00:03:16,150 --> 00:03:19,400
I know that's kind of a bit of a tongue twister, huh?

44
00:03:19,420 --> 00:03:21,520
A stream of strings.

45
00:03:22,570 --> 00:03:26,670
So I'm not going to do a lot of explaining right now, but we will come back.

46
00:03:26,680 --> 00:03:33,730
Basically, though, you can think of this as essentially breaking down this multi line string into

47
00:03:33,730 --> 00:03:35,140
individual lines.

48
00:03:35,380 --> 00:03:43,840
And what this stream of strings will do is to feed the individual lines of this string into what's called

49
00:03:43,840 --> 00:03:44,890
a pipeline.

50
00:03:45,370 --> 00:03:51,970
And that pipeline is what we will use to process the strings and do all kinds of cool things with them,

51
00:03:52,210 --> 00:03:53,920
essentially all in one go.

52
00:03:54,040 --> 00:03:54,430
OK.

53
00:03:54,790 --> 00:04:02,710
So we will reference the lines method here, which returns the stream of strings.

54
00:04:04,240 --> 00:04:04,690
All right.

55
00:04:05,530 --> 00:04:10,630
Next, we will simply print each string one at a time.

56
00:04:10,930 --> 00:04:12,520
Now, notice what I'm going to do here.

57
00:04:12,520 --> 00:04:17,070
I'm going to just hit enter without a semicolon or anything because I'm actually not done.

58
00:04:17,080 --> 00:04:19,450
I'm going to build what's called a pipeline.

59
00:04:20,500 --> 00:04:27,190
So I'm going to hit enter, and I don't like this formatting that the ABC does, I'm going to hold down

60
00:04:27,190 --> 00:04:28,010
on ship and tab.

61
00:04:28,030 --> 00:04:35,380
You don't have to do this, but I prefer to have this be back by one indentation, if you will.

62
00:04:35,710 --> 00:04:39,610
So not not there, but there, but it doesn't matter.

63
00:04:39,610 --> 00:04:41,380
It's just my own personal preference.

64
00:04:42,350 --> 00:04:48,680
And the next thing I will do is type, period and then for each.

65
00:04:50,750 --> 00:04:51,290
All right.

66
00:04:51,530 --> 00:04:52,640
Just like that.

67
00:04:53,480 --> 00:05:00,590
Now notice the for each method here is expecting something called a consumer.

68
00:05:00,950 --> 00:05:06,950
Now this is basically referring to a type of functional interface called a consumer.

69
00:05:07,430 --> 00:05:15,590
And that is just an interface with one method defined on it that takes input but doesn't return any

70
00:05:15,590 --> 00:05:16,160
output.

71
00:05:16,160 --> 00:05:17,400
So it consumes.

72
00:05:17,460 --> 00:05:17,930
OK.

73
00:05:18,710 --> 00:05:26,720
So I can place any method or lambda expression here that accepts some type of input that is a type of

74
00:05:26,720 --> 00:05:27,230
string.

75
00:05:27,230 --> 00:05:28,610
That's essentially what this is saying.

76
00:05:28,640 --> 00:05:33,890
A question mark superstring, meaning something that has a super class of string.

77
00:05:36,120 --> 00:05:40,600
Or is a string itself, but doesn't return anything?

78
00:05:40,640 --> 00:05:46,290
OK, now watch this I'm going to use something else that we haven't seen before.

79
00:05:46,560 --> 00:05:47,880
OK, now I could.

80
00:05:47,910 --> 00:05:55,080
I could put a lambda expression in here that satisfies this condition here, but I'm going to do something

81
00:05:55,080 --> 00:05:55,560
new.

82
00:05:56,560 --> 00:05:59,850
I'm going to type system that out.

83
00:06:01,210 --> 00:06:02,560
Colon colon.

84
00:06:04,590 --> 00:06:05,310
Print line.

85
00:06:05,560 --> 00:06:05,970
OK.

86
00:06:06,570 --> 00:06:10,920
And now I'm just going to read this without explaining too much, although I think it might be sort

87
00:06:10,920 --> 00:06:12,720
of obvious what it's going to do.

88
00:06:12,930 --> 00:06:14,280
So I'm going to run this.

89
00:06:15,300 --> 00:06:15,700
All right.

90
00:06:15,720 --> 00:06:24,570
So all that did is just print each of the lines from this string, but it's doing it one line at a time

91
00:06:24,990 --> 00:06:29,820
instead of printing out the entire string as one string, right?

92
00:06:29,850 --> 00:06:40,590
So basically, this line's method here is able to split this multi-line string into individual strings

93
00:06:40,590 --> 00:06:41,790
for each line.

94
00:06:42,060 --> 00:06:50,070
The definition of a line within this string is all of the text that comes before a new line character

95
00:06:50,070 --> 00:06:54,020
or whatever the operating systems definition for a line.

96
00:06:54,030 --> 00:06:55,270
Terminator is right.

97
00:06:55,290 --> 00:07:00,180
We've kind of touched on that a little bit before backslash and represents new line.

98
00:07:00,200 --> 00:07:06,180
That's one of the more common Terminators for the end of the line on some operating systems or in some

99
00:07:06,180 --> 00:07:06,810
software.

100
00:07:06,810 --> 00:07:12,360
It may be two characters which would be like a carriage return and a new line or something like that.

101
00:07:12,420 --> 00:07:18,720
So anyway, the lines method is smart enough to understand those differences and figure out what is

102
00:07:18,720 --> 00:07:22,500
what constitutes one line of text within a string.

103
00:07:22,860 --> 00:07:30,680
And so it will grab each of those lines individually and then feed them into what is called a stream.

104
00:07:31,410 --> 00:07:40,620
Now, because this line's method returns a type of stream and being very careful here to enunciate the

105
00:07:40,620 --> 00:07:47,910
Strings API, which is what we're playing with here, has lots of methods that know how to take the

106
00:07:47,910 --> 00:07:54,660
output from previous streams API method and do further processing.

107
00:07:54,670 --> 00:08:01,410
So what's happening here, essentially, is that this line's method is returning a stream of strings,

108
00:08:01,530 --> 00:08:05,160
which are the individual lines, and then you can think of it this way.

109
00:08:05,400 --> 00:08:15,090
Each string is being fed into the next node into the next step of this pipeline, which is the dot for

110
00:08:15,090 --> 00:08:16,050
each method.

111
00:08:16,160 --> 00:08:16,540
OK.

112
00:08:16,620 --> 00:08:20,380
And in fact, I could even break this up like this.

113
00:08:20,400 --> 00:08:24,330
Maybe that makes it look even a little more like a true pipeline.

114
00:08:24,510 --> 00:08:30,900
This is a simple pipeline with just two with just two steps, though the lines calling in the need for

115
00:08:30,900 --> 00:08:38,070
each and then look for each method, as we've already just discussed, is expecting a method or a reference

116
00:08:38,070 --> 00:08:43,800
to a method or a lambda expression that satisfies the consumer interface.

117
00:08:44,040 --> 00:08:51,510
And the consumer interface simply defines one method on it that takes some type of input and and does

118
00:08:51,510 --> 00:08:52,500
not return anything.

119
00:08:52,500 --> 00:08:58,560
And in fact, if we go look at the consumer interface real quick, it's right here under the job that

120
00:08:58,560 --> 00:09:00,950
you tilt the function package.

121
00:09:00,960 --> 00:09:02,250
Let's go take a peek at it.

122
00:09:02,700 --> 00:09:04,860
So this interface?

123
00:09:06,780 --> 00:09:13,050
Only defines one abstract method, because functional interfaces can only be find one abstract method,

124
00:09:13,050 --> 00:09:14,430
as we've learned previously.

125
00:09:15,360 --> 00:09:18,750
And the method is called accept and it uses generics.

126
00:09:18,780 --> 00:09:25,590
Now we haven't done a time about generics here, but you have learned a little bit that when we're utilizing

127
00:09:25,590 --> 00:09:29,790
a type that defines generics, we can pass them with that Typekit.

128
00:09:29,790 --> 00:09:36,660
So this T in our case would become string, which means that this consumer interface handles strings

129
00:09:36,660 --> 00:09:40,290
for our for our utilization at this moment in time.

130
00:09:40,650 --> 00:09:45,900
And so the word string replaces the T everywhere where you see this capital T here.

131
00:09:46,080 --> 00:09:54,450
So what this is saying is that for our purposes, this accepted method would accept something that is

132
00:09:54,450 --> 00:09:56,460
of type string, right?

133
00:09:56,580 --> 00:09:58,600
And it returns nothing.

134
00:09:58,620 --> 00:09:59,850
And that's all it's really saying.

135
00:09:59,860 --> 00:10:02,010
So it's not magic, it's not really doing anything.

136
00:10:02,010 --> 00:10:05,760
It's just defining a an interface and a method for us.

137
00:10:05,800 --> 00:10:06,150
OK.

138
00:10:07,560 --> 00:10:09,720
All right, so we jump back over here.

139
00:10:09,930 --> 00:10:15,720
It just so happens that this print line method follows that exact signature.

140
00:10:15,900 --> 00:10:22,050
The print line method accepts input, and I'll just show you here in parentheses, if you will recall

141
00:10:22,440 --> 00:10:25,950
we could, we could have written this out like this line?

142
00:10:28,100 --> 00:10:28,640
Hello.

143
00:10:29,940 --> 00:10:30,270
Right.

144
00:10:30,990 --> 00:10:38,400
So this is a massive print line on the out class of the system class.

145
00:10:39,870 --> 00:10:41,490
That takes an input.

146
00:10:43,150 --> 00:10:44,020
Of a string.

147
00:10:45,160 --> 00:10:47,560
But does not return any output.

148
00:10:47,650 --> 00:10:53,170
It prints the word string to the screen, but it does not return any output.

149
00:10:53,650 --> 00:11:02,290
So what's new here is the way that we're referencing this method, rather than typing out this method

150
00:11:02,290 --> 00:11:11,410
explicitly, as we have previously done and passing in some type of input here explicitly, we're allowing

151
00:11:11,410 --> 00:11:19,240
the input to be implied using this new syntax, which is called a method reference because it refers

152
00:11:19,240 --> 00:11:25,240
to an existing method and because of the rules of how method references work.

153
00:11:25,240 --> 00:11:33,790
Java is able to determine that because we're referring to this method print line that takes one input.

154
00:11:34,240 --> 00:11:44,650
It should take the individual strings one at a time from this stream of strings and pass them one at

155
00:11:44,650 --> 00:11:49,270
a time into a call to the print line method.

156
00:11:49,480 --> 00:11:58,000
And so what this for each is actually saying is that for each string in the stream that's being passed

157
00:11:58,000 --> 00:12:06,190
in, call this method and pass in each string into the into the as input into the method.

158
00:12:06,220 --> 00:12:08,910
OK, we'll go into this in more detail later.

159
00:12:08,920 --> 00:12:12,580
I'm just giving you a high level view of what's going on here.

160
00:12:12,700 --> 00:12:21,130
OK, now so you can think of this entire pipeline almost like a for loop essentially, right?

161
00:12:21,130 --> 00:12:26,090
Because this lines thing here, you can think of that as sort of outputting a collection of strings.

162
00:12:26,110 --> 00:12:30,610
Now that's not really what it's doing, but you can kind of think of it that way.

163
00:12:31,030 --> 00:12:31,480
OK?

164
00:12:31,780 --> 00:12:39,760
And then each of those strings in this imaginary collection, which in this case is is really a stream,

165
00:12:40,180 --> 00:12:45,280
then is is going into this for each into this for each method.

166
00:12:45,280 --> 00:12:50,030
And the very name of that method for each implies a loop.

167
00:12:50,050 --> 00:12:50,290
Right.

168
00:12:50,300 --> 00:12:51,130
It's a four.

169
00:12:51,340 --> 00:12:57,130
In fact, in many programming languages, there is a for each loop, there's an actual type of loop

170
00:12:57,130 --> 00:12:59,080
called for each, right.

171
00:12:59,350 --> 00:13:05,390
And so the looping behavior is kind of implied in the name of this method, right?

172
00:13:05,410 --> 00:13:13,890
So for each of the strings that are being passed into it in that stream, it's going to loop over them

173
00:13:13,900 --> 00:13:22,150
kind of sort of like and call whatever method we're referring to, whether it's a lambda or an explicit

174
00:13:22,150 --> 00:13:24,790
method or a method reference.

175
00:13:24,790 --> 00:13:27,140
And in fact, let me go ahead and just show you that real quick.

176
00:13:27,160 --> 00:13:33,010
So here we're using a method reference, but let me show you what this would look like with a lambda

177
00:13:33,010 --> 00:13:33,710
expression.

178
00:13:33,730 --> 00:13:34,120
OK.

179
00:13:34,420 --> 00:13:43,450
So I could do something like this is a method that takes an input and doesn't return any any output,

180
00:13:43,450 --> 00:13:43,720
right?

181
00:13:43,750 --> 00:13:50,260
So a lambda expression for that might look like, let's see, string, I'll have a variable and then

182
00:13:50,260 --> 00:13:52,600
an arrow operator.

183
00:13:52,600 --> 00:13:56,070
And then I would say something like system that out.

184
00:13:56,620 --> 00:14:03,420
Print line and then just reference the variable there, the s right.

185
00:14:03,430 --> 00:14:06,130
So this s here is my input.

186
00:14:06,670 --> 00:14:08,260
And here it is right here.

187
00:14:08,590 --> 00:14:13,450
Now this is actually considered a shorthand, and I'm not going to go all into this, but I'll just

188
00:14:13,450 --> 00:14:14,130
show you this real quick.

189
00:14:14,140 --> 00:14:17,350
This is actually sort of a shorthand for lambda expressions.

190
00:14:17,350 --> 00:14:21,280
The fuller syntax would actually be.

191
00:14:23,840 --> 00:14:25,400
That right.

192
00:14:25,580 --> 00:14:34,100
So here's a method that takes a string as input called s, and then it takes that input, and then it

193
00:14:34,100 --> 00:14:38,180
calls this method with that same input being passed in right?

194
00:14:38,600 --> 00:14:48,230
And just for quick little reminder, that's pretty equivalent to having a method like, let's see void.

195
00:14:51,790 --> 00:14:52,840
Print stuff.

196
00:14:54,900 --> 00:14:56,100
String as.

197
00:14:59,390 --> 00:15:02,840
System died out print line as.

198
00:15:07,270 --> 00:15:17,470
OK, so this being a method called Prince stuff that takes as input a string called S and then prints

199
00:15:17,470 --> 00:15:18,040
that out.

200
00:15:18,490 --> 00:15:23,920
All of this is equivalent to this.

201
00:15:24,460 --> 00:15:29,740
The difference being that I've removed the method name, I'm not referring to a method name.

202
00:15:29,740 --> 00:15:31,120
It's anonymous, right?

203
00:15:31,120 --> 00:15:32,770
It's like an anonymous method.

204
00:15:32,920 --> 00:15:38,980
And then as I showed you earlier, we actually don't even need to refer to the type because that can

205
00:15:38,980 --> 00:15:39,940
be inferred.

206
00:15:40,090 --> 00:15:40,630
OK?

207
00:15:40,690 --> 00:15:48,370
Java knows that the output from this is a stream of strings, and therefore any lambda expression that

208
00:15:48,370 --> 00:15:53,710
expects one input has to be a string java's smart that way, right?

209
00:15:53,830 --> 00:15:54,340
It knows.

210
00:15:54,340 --> 00:15:56,620
So we don't need the type.

211
00:15:58,540 --> 00:16:03,820
And then we also don't need the parentheses there, either.

212
00:16:05,150 --> 00:16:05,600
OK.

213
00:16:06,020 --> 00:16:11,240
But as I showed you early, initially, we don't even need any of that.

214
00:16:11,270 --> 00:16:20,540
We can simply system that our colon colon print line, we can use a method reference because now job

215
00:16:20,540 --> 00:16:23,510
is smart enough to know that the print line method takes one input.

216
00:16:23,510 --> 00:16:27,860
That input has to be the strings that are coming out of this stream, right?

217
00:16:28,310 --> 00:16:28,670
All right.

218
00:16:28,670 --> 00:16:30,260
So that's how you could do that.

219
00:16:30,270 --> 00:16:31,700
Let me clear this out.

220
00:16:33,260 --> 00:16:35,510
Now, let me show you one more thing here.

221
00:16:36,230 --> 00:16:39,470
This isn't really doing much other than just printing these out, right?

222
00:16:39,620 --> 00:16:46,070
Let's actually turn them into employees, as we were doing in the previous program.

223
00:16:46,670 --> 00:16:55,820
So we need to take each one of these strings and call the create employee method, which exists on the

224
00:16:55,820 --> 00:16:57,260
employee class, right?

225
00:16:57,500 --> 00:16:59,810
So let me show you how we can do that with streams.

226
00:17:00,050 --> 00:17:05,960
So what I'm going to do is I'm going to kind of break into this pipeline and add another step.

227
00:17:06,080 --> 00:17:11,660
So this first step lines here is breaking this string into individual lines.

228
00:17:11,660 --> 00:17:19,130
Right now, I want to take each of these individual lines and convert them one at a time into an employee.

229
00:17:19,490 --> 00:17:20,900
Watch how I can do this.

230
00:17:22,100 --> 00:17:30,140
Let me back up there so I can use the map method on the of the Streams API.

231
00:17:30,680 --> 00:17:38,540
And what the map method does is it takes one input and it returns one output and the functional interface

232
00:17:38,690 --> 00:17:41,150
that is capable of doing exactly that.

233
00:17:41,150 --> 00:17:44,480
Taking one input and returning one output is called function.

234
00:17:44,690 --> 00:17:49,190
And so we can see right here that the map method is expecting an input of function.

235
00:17:49,370 --> 00:17:56,600
So this is an interface that defines one method on it that takes one input of any type of any generic

236
00:17:56,600 --> 00:18:00,620
type and returns one output of some other type.

237
00:18:01,690 --> 00:18:08,020
It could be the same type also, but it allows for the for the return type to be something different.

238
00:18:08,050 --> 00:18:08,470
OK.

239
00:18:08,620 --> 00:18:15,640
So in our case, the input type would be string right because each line is a string and the output type,

240
00:18:15,640 --> 00:18:18,520
do you want to think what would the output type be here?

241
00:18:19,810 --> 00:18:26,320
So the output type could be I employee, because that's what the employee does not create employee method

242
00:18:26,860 --> 00:18:27,400
returns.

243
00:18:27,410 --> 00:18:29,380
So let's let's see what that could look like.

244
00:18:29,650 --> 00:18:35,440
So first, I will do this a little more explicitly and then I will show you how we can do this with

245
00:18:35,440 --> 00:18:37,360
a little less typing as well.

246
00:18:37,390 --> 00:18:41,170
OK, so we're going to take as input a string.

247
00:18:41,170 --> 00:18:45,850
So I'm going to refer to that is yes, I'm going to do this with the Lambda first, OK?

248
00:18:46,450 --> 00:18:54,250
And then we're going to be calling the employee that create employee method and then just passing the

249
00:18:54,640 --> 00:18:56,170
s just like that.

250
00:18:57,070 --> 00:19:00,890
So we know that this create employee method, which is a static method.

251
00:19:00,910 --> 00:19:05,170
That's why I can call it like this without having to create an instance of anything, right?

252
00:19:05,500 --> 00:19:11,440
The Create employee method takes a string, which is one of these lines, and it returns something of

253
00:19:11,440 --> 00:19:13,360
type I employee.

254
00:19:13,600 --> 00:19:21,670
OK, now what's going to happen in my pipeline here is that now for each of these lines, they will

255
00:19:21,670 --> 00:19:28,240
be converted in into an AI employee and then passed into the for each method here, which will then

256
00:19:28,240 --> 00:19:29,410
simply print them out.

257
00:19:29,950 --> 00:19:32,560
All right, so let's run this and see what we get.

258
00:19:32,980 --> 00:19:34,810
It's not going to be way different.

259
00:19:35,890 --> 00:19:42,340
OK, so look at that that's already looking, I think, identical to the output from our previous project.

260
00:19:42,340 --> 00:19:49,030
As far as this list is concerned right now, we're not adding things up yet, but that is the output

261
00:19:49,030 --> 00:19:55,690
that we were getting before and it's in the same order as what we've got here because we're not using

262
00:19:55,690 --> 00:19:57,220
any collections right now, right?

263
00:19:57,230 --> 00:20:02,980
We're not throwing these into an array list or a set or a map or anything like that.

264
00:20:03,220 --> 00:20:10,000
We're simply letting the line's method pass this string and break it into the individual lines in the

265
00:20:10,000 --> 00:20:12,460
order in which they are listed here, right?

266
00:20:12,790 --> 00:20:19,210
And then we're processing each one at a time, converting from string to I employee something of the

267
00:20:19,210 --> 00:20:21,760
type I employee the interface, right?

268
00:20:21,970 --> 00:20:23,080
And then just printing that.

269
00:20:23,290 --> 00:20:24,670
Now let me show you.

270
00:20:24,700 --> 00:20:29,740
Alternatively, though, because this is a method that takes one input and returns one output.

271
00:20:29,980 --> 00:20:37,390
Again, I can just simplify this to use a method reference, and I will do that by simply getting rid

272
00:20:37,390 --> 00:20:39,280
of these bits here.

273
00:20:39,700 --> 00:20:47,890
And then instead of the employee create employee, I will use employee colon colon and then I don't

274
00:20:47,890 --> 00:20:54,340
need to specify anything here because Java is smart enough to understand what I need here.

275
00:20:54,520 --> 00:20:57,490
So it knows again that the lines thing here.

276
00:20:57,490 --> 00:21:05,590
The lines method is returning a stream of strings, and so it should take each string one at a time

277
00:21:05,590 --> 00:21:08,680
and pass it in to the create employee method.

278
00:21:08,890 --> 00:21:14,830
It should then take the output of the create employee method and pass that in to the next step in the

279
00:21:14,830 --> 00:21:15,520
pipeline.

280
00:21:15,550 --> 00:21:18,580
That's how the streams API works.

281
00:21:19,030 --> 00:21:20,350
There are some exceptions to this.

282
00:21:20,360 --> 00:21:24,790
For example, the for each method here doesn't return another stream.

283
00:21:25,000 --> 00:21:31,600
In fact, if I if I hover over it, we can see here that it's return type is void.

284
00:21:31,750 --> 00:21:32,230
OK.

285
00:21:32,260 --> 00:21:38,140
That's because the for each method of the streams API is what we call a terminal operation, which is

286
00:21:38,290 --> 00:21:40,000
printed, which is listed right there.

287
00:21:40,210 --> 00:21:42,640
It's the end of the line, if you will, right?

288
00:21:42,700 --> 00:21:48,820
It's kind of it can only be used at the end of a pipeline of a streams API pipeline.

289
00:21:50,020 --> 00:21:50,290
All right.

290
00:21:50,300 --> 00:21:51,990
So I'm going to wrap it up here.

291
00:21:52,000 --> 00:21:57,730
I just wanted to give a quick overview of what the streams API kind of looks like.

292
00:21:57,880 --> 00:22:03,280
So in the subsequent lessons will be digging in deeper and learning a lot more about how all of this

293
00:22:03,280 --> 00:22:05,800
works, and there's so much more that we can do with this.

294
00:22:05,860 --> 00:22:13,510
We will effectively just be re implementing everything that we did in the main Java class, but using

295
00:22:13,510 --> 00:22:16,270
the Streams API, so I'll see you in the next one.
