WEBVTT
1
00:00:00.690 --> 00:00:06.390
All right, so now that you've learned about static methods and you know what the key word static means

2
00:00:06.390 --> 00:00:12.810
in relation to methods, I wanted to go back now and address something that I glossed over earlier,

3
00:00:12.810 --> 00:00:18.750
which was the meaning of the static key word on fields or instance variables of classes.

4
00:00:19.020 --> 00:00:25.050
Earlier, we had an example, and I think I've probably yeah, we've changed it now, but we had an

5
00:00:25.050 --> 00:00:30.420
example where we were creating a couple of static fields on the person class.

6
00:00:30.420 --> 00:00:31.830
I don't remember exactly what they were.

7
00:00:31.830 --> 00:00:33.890
I think maybe it was some other type.

8
00:00:33.900 --> 00:00:38.160
I don't think it was the type person, but let's pretend like it was right.

9
00:00:38.340 --> 00:00:41.070
So we had something like where we were creating a person.

10
00:00:45.000 --> 00:00:47.910
And we had a couple of them, some something like that, OK?

11
00:00:48.210 --> 00:00:53.820
And I didn't explain why we needed to create those static, but it had to do with the fact that we were

12
00:00:53.820 --> 00:00:58.500
referring back to a type in our static method.

13
00:00:58.530 --> 00:00:58.970
OK.

14
00:00:59.310 --> 00:01:02.550
And so maybe now you can understand a little bit better.

15
00:01:02.820 --> 00:01:11.970
What happens is if we do choose to refer to a variable class variable in a static method, then the

16
00:01:11.970 --> 00:01:19.080
variable we are referring to also has to be static because static methods can exist prior to a class

17
00:01:19.080 --> 00:01:20.550
instance being created.

18
00:01:20.730 --> 00:01:28.500
OK, so any class variables that you may be referring to within a static method also have to be static.

19
00:01:28.710 --> 00:01:32.400
So let me just show you a quick example of what I mean here.

20
00:01:32.580 --> 00:01:38.480
Let me delete this little example here and down here in the public static void main method.

21
00:01:38.490 --> 00:01:48.600
Let's say that we want to just print out something like the mathematical constant of PI.

22
00:01:48.990 --> 00:01:53.460
OK, so let's pretend like that's going to be a variable called PI.

23
00:01:53.910 --> 00:01:56.790
OK, three point one four, just like that.

24
00:01:57.240 --> 00:02:07.710
So if we were to define such a variable up here as a regular instance, variable non static.

25
00:02:08.130 --> 00:02:12.030
So we'll make this a mathematical type of double.

26
00:02:14.190 --> 00:02:15.390
We'll call it PI.

27
00:02:15.810 --> 00:02:19.590
Now there's a reason why I'm capitalizing this, which I will explain in just a moment.

28
00:02:20.070 --> 00:02:21.840
Three point one four.

29
00:02:22.050 --> 00:02:22.500
OK.

30
00:02:22.650 --> 00:02:28.110
So here we have this instance variable called PI three point one four.

31
00:02:28.470 --> 00:02:34.560
But down here, this is still red, even though I've got that variable called PI right here.

32
00:02:34.620 --> 00:02:34.980
What?

33
00:02:34.980 --> 00:02:35.820
What's the problem?

34
00:02:35.940 --> 00:02:41.880
So if we hover over this, we get a message saying non static filled pi cannot be referenced from a

35
00:02:41.880 --> 00:02:43.290
static context.

36
00:02:43.590 --> 00:02:45.390
So it's pretty much what I just said.

37
00:02:45.690 --> 00:02:47.070
This is a static method.

38
00:02:47.250 --> 00:02:51.630
It can exist prior to the existence of an object or a class instance.

39
00:02:51.990 --> 00:03:00.720
But non static member variables of a class such as all of these will only exist after an instance of

40
00:03:00.720 --> 00:03:03.480
this person class has actually been created.

41
00:03:03.510 --> 00:03:03.930
OK.

42
00:03:04.110 --> 00:03:08.640
So after the person building has been constructed, if you will?

43
00:03:08.670 --> 00:03:09.180
OK.

44
00:03:09.540 --> 00:03:12.240
However, if I make this static.

45
00:03:14.700 --> 00:03:23.370
Like so now this variable will exist without an instance of the person class or an object of type person

46
00:03:23.370 --> 00:03:24.420
being created.

47
00:03:24.660 --> 00:03:32.220
And because of that, I no longer have a red mark here because this static method can now access that

48
00:03:32.220 --> 00:03:32.770
value.

49
00:03:32.790 --> 00:03:35.100
OK, so that's the main thing now.

50
00:03:35.220 --> 00:03:39.930
You may be wondering, OK, so so what is the reason for wanting to create static variables?

51
00:03:40.320 --> 00:03:42.750
Well, there could be a number of reasons this one.

52
00:03:42.840 --> 00:03:46.290
This example that I'm showing here, though, is one of the most typical.

53
00:03:46.500 --> 00:03:52.620
This is what we call a constant, and I'll talk a little bit more about constants in in a future lesson.

54
00:03:52.860 --> 00:03:59.610
But the main idea is that in real life, we have this constant this mathematical constant pi three point

55
00:03:59.610 --> 00:04:00.330
one four.

56
00:04:00.600 --> 00:04:01.800
It will never change.

57
00:04:02.130 --> 00:04:10.770
And so I can define this and I can make it static, because no matter how many instances of the person

58
00:04:10.770 --> 00:04:14.940
class we will create, PI will never change.

59
00:04:15.630 --> 00:04:17.400
Pi should never change.

60
00:04:17.820 --> 00:04:23.670
So we really only need one instance, if you will, of this variable pi by making it static.

61
00:04:24.150 --> 00:04:31.800
I am essentially also saying not only do I want this variable to exist before, during and after the

62
00:04:31.800 --> 00:04:38.160
creation of objects of type person, but I only need one instance of this variable.

63
00:04:38.400 --> 00:04:47.610
And so this one variable PI will be shared, if you will, among all instances of person or even if

64
00:04:47.610 --> 00:04:50.380
you don't have an instance of the person class.

65
00:04:50.400 --> 00:04:50.880
OK.

66
00:04:51.180 --> 00:04:55.320
Hopefully, that will become more clear if this is still not completely clear to you.

67
00:04:55.470 --> 00:05:02.670
The main thing is if you're going to access member variables from a static method, then those variables

68
00:05:02.670 --> 00:05:03.990
have to be static too.

69
00:05:04.680 --> 00:05:12.720
And if you create one, two or five million instances of a class, such as instances of class person,

70
00:05:12.990 --> 00:05:21.240
if you make a member variable static, the all of those instances of that class will share that one

71
00:05:21.240 --> 00:05:22.530
instance of that variable.

72
00:05:22.680 --> 00:05:31.710
This means that if one instance of a class such as person were to change this value, all other instances

73
00:05:31.710 --> 00:05:34.500
of that class would see that change to value.

74
00:05:35.040 --> 00:05:37.350
OK, so that's another way of looking at it.

75
00:05:37.680 --> 00:05:40.500
They don't each get their own copy of this variable.

76
00:05:40.510 --> 00:05:44.760
They just get one copy of this variable to share amongst all of them.

77
00:05:44.910 --> 00:05:52.290
However, the non static member variables here, those each belong to their own instance of the person

78
00:05:52.290 --> 00:05:52.860
class.

79
00:05:53.160 --> 00:05:56.310
OK, so that's another probably good way of looking at it.

80
00:05:56.850 --> 00:05:57.190
All right.

81
00:05:57.210 --> 00:05:59.340
That's all I wanted to share in this lesson.

82
00:05:59.460 --> 00:06:05.760
Just to follow back on what static member variables are, by the way, you'll also learn in the future

83
00:06:05.760 --> 00:06:11.790
lesson that this is not 100 percent the right way to make a so-called constant that is a variable that

84
00:06:11.790 --> 00:06:12.960
should never change.

85
00:06:13.140 --> 00:06:15.120
There's one more key word that you would need here.

86
00:06:15.240 --> 00:06:16.530
You'll learn that in the future.

87
00:06:16.560 --> 00:06:20.970
OK, so I just wanted to point out some of those key differences that you'll learn a little bit more

88
00:06:20.970 --> 00:06:24.540
about in the future lesson where I will talk a little bit more about constants.

89
00:06:24.930 --> 00:06:25.290
All right.

90
00:06:25.320 --> 00:06:27.570
That's going to wrap this up, and I'll see you in the next one.
