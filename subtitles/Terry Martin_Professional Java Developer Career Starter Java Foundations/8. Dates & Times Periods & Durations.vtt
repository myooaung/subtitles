WEBVTT
1
00:00:00.720 --> 00:00:08.640
All right, so another super useful thing to be able to do with dates and times is to basically do math

2
00:00:08.640 --> 00:00:09.690
on them, if you will.

3
00:00:09.990 --> 00:00:13.830
And I don't mean kind of like where we did earlier, where we did like the Plus, although, I mean,

4
00:00:13.830 --> 00:00:15.030
that's super useful, too.

5
00:00:15.270 --> 00:00:22.560
I mean, taking two dates or two times or two local date times and adding or subtracting them.

6
00:00:23.190 --> 00:00:28.440
So one of the really cool things, let's just let's see here where where do we want to do this?

7
00:00:28.440 --> 00:00:30.280
Let's take these two local dates.

8
00:00:30.300 --> 00:00:33.210
First of all, and let's make them different.

9
00:00:33.330 --> 00:00:35.100
So I don't know.

10
00:00:35.100 --> 00:00:41.930
Let's make this second one, 2002 and June.

11
00:00:42.000 --> 00:00:42.620
That's fine.

12
00:00:42.630 --> 00:00:44.040
Yeah, 2002 and June.

13
00:00:44.400 --> 00:00:52.770
So let's say that we wanted to find out how much time had elapsed between date one and date two.

14
00:00:52.790 --> 00:00:53.130
Right?

15
00:00:53.610 --> 00:00:59.880
So for those types of operations, there are two other classes that have been included in the Java eight

16
00:01:00.060 --> 00:01:01.710
date time API.

17
00:01:02.160 --> 00:01:06.990
One of them is for measuring differences in terms of days, weeks, months and years.

18
00:01:07.230 --> 00:01:09.030
So kind of bigger timeframes.

19
00:01:09.390 --> 00:01:13.290
And that is the period that we already kind of took a little peek at.

20
00:01:13.710 --> 00:01:18.120
And the other class for doing similar things is duration.

21
00:01:18.420 --> 00:01:23.310
And that's for measuring periods of time, like seconds in nanoseconds things of that sort.

22
00:01:23.850 --> 00:01:24.260
All right.

23
00:01:24.270 --> 00:01:27.240
So first, let's take a look at the period.

24
00:01:27.450 --> 00:01:33.030
So if we want to find out the amount of time elapsed between the two and the one, we can start with

25
00:01:33.030 --> 00:01:38.730
a period and then we will use one of its methods, such as between.

26
00:01:40.260 --> 00:01:46.290
And now we can just give it these two dates so we can say the two comma one, for example.

27
00:01:46.650 --> 00:01:49.860
And I guess let's just go ahead and print that out and see what we get.

28
00:01:53.630 --> 00:02:02.030
So if we run that, we get P minus two y minus five, then so this doesn't just give us like a simple

29
00:02:02.030 --> 00:02:05.180
number or a floating point number or something like that.

30
00:02:05.330 --> 00:02:12.620
Instead, it actually tries to give us a fairly precise and accurate answer by returning an object of

31
00:02:12.620 --> 00:02:13.990
this type period.

32
00:02:14.000 --> 00:02:21.110
In this case, the case of the period object itself contains the years, the weeks, months, days,

33
00:02:21.110 --> 00:02:25.430
et cetera, that have transpired between any two given dates.

34
00:02:25.850 --> 00:02:30.860
Now the hyphens here indicate that the numbers are negative, and that just has to do with the order

35
00:02:30.860 --> 00:02:32.780
in which I put these values in.

36
00:02:32.930 --> 00:02:42.650
So if I flip these around to D1 and D2, because actually the first argument is meant to be the starting

37
00:02:42.650 --> 00:02:46.970
point or the earlier date, and then the second argument is meant to be the later date.

38
00:02:48.620 --> 00:02:49.850
And I'll run that again, OK?

39
00:02:49.880 --> 00:02:53.900
And so now we get the same answer, essentially, but without the minus sign.

40
00:02:53.930 --> 00:03:03.290
So two years, five months now, if I make a difference in the number of days also like I will put a

41
00:03:03.290 --> 00:03:04.040
10 there.

42
00:03:05.040 --> 00:03:06.480
So let's see what we get now.

43
00:03:07.480 --> 00:03:14.800
All right, so now we get two years, five months and nine days now we can actually extract out any

44
00:03:14.800 --> 00:03:20.310
parts of this period as well so that we could format it in a nice answer.

45
00:03:20.320 --> 00:03:28.900
So for example, if I change this print line to a print f and we use a formatted string here, we can

46
00:03:28.900 --> 00:03:39.400
say that the difference between those two dates is percent d years comma percent the months.

47
00:03:40.440 --> 00:03:44.430
Comma percent the days.

48
00:03:44.790 --> 00:03:50.190
Now what I would probably want to do if I'm going this route is I'd probably want to extract out this

49
00:03:50.190 --> 00:03:52.140
whole entire expression here.

50
00:03:52.380 --> 00:03:55.440
Otherwise, I'll have to duplicate it, you'll see what I mean and just a second.

51
00:03:55.440 --> 00:04:02.280
So I'm going to extract that out to a variable with my option Command V. Let's see, and I'll just call

52
00:04:02.280 --> 00:04:03.020
it difference.

53
00:04:03.030 --> 00:04:04.570
I should have called it diff, in fact.

54
00:04:04.590 --> 00:04:04.920
Hold on.

55
00:04:04.920 --> 00:04:08.390
I don't want to take that much diff.

56
00:04:08.910 --> 00:04:09.330
OK.

57
00:04:09.600 --> 00:04:17.340
And so now I need to extract out the years so I can reference the diff, which is the period diff die,

58
00:04:17.370 --> 00:04:20.460
get years comma death.

59
00:04:21.060 --> 00:04:22.200
See what I'm doing here.

60
00:04:22.460 --> 00:04:23.070
Default.

61
00:04:23.100 --> 00:04:26.220
Get months comma, death dot.

62
00:04:26.220 --> 00:04:27.210
Get days.

63
00:04:27.480 --> 00:04:36.720
So if I had not extracted out the the diff variable, I would have been repeating this entire expression

64
00:04:36.720 --> 00:04:38.370
and that would have caused this.

65
00:04:38.490 --> 00:04:42.160
Between method to get executed each time also.

66
00:04:42.240 --> 00:04:44.220
So that would not have been very efficient code.

67
00:04:44.490 --> 00:04:44.790
Right.

68
00:04:44.800 --> 00:04:46.440
So that's why I extracted that out.

69
00:04:46.650 --> 00:04:48.540
And so now if I run this.

70
00:04:49.790 --> 00:04:52.880
There we go, so we get two years, five months, nine days.

71
00:04:54.130 --> 00:04:59.320
So super convenient method, and we're actually probably going to play around with that a little bit

72
00:04:59.320 --> 00:05:03.820
more in a little exercise that I'm going to put together for a little bit of the fun that we're having

73
00:05:03.820 --> 00:05:05.350
here with the date time stuff.

74
00:05:05.950 --> 00:05:06.270
All right.

75
00:05:06.280 --> 00:05:14.070
So then for a time like these local times up here, we can use the duration, class duration talked

76
00:05:14.140 --> 00:05:14.620
between.

77
00:05:14.620 --> 00:05:17.690
So it's the same basic, you know, pattern here.

78
00:05:18.100 --> 00:05:26.320
So I will do t one comma L2 like so and up, and I want to print that out.

79
00:05:26.890 --> 00:05:32.360
And I always forget to put my new line character here so that it's not very readable.

80
00:05:32.380 --> 00:05:33.820
So let's run that one more time.

81
00:05:34.210 --> 00:05:34.810
Here we go.

82
00:05:35.260 --> 00:05:39.100
So we get one second one s.

83
00:05:39.730 --> 00:05:43.990
So let's make this a little more drastic now, so let's say.

84
00:05:46.430 --> 00:05:48.050
Thirteen.

85
00:05:50.050 --> 00:05:51.580
Fifty seven.

86
00:05:53.570 --> 00:05:54.650
And I don't know.

87
00:05:55.100 --> 00:05:56.060
Thirty nine.

88
00:05:56.540 --> 00:05:56.940
OK.

89
00:05:57.440 --> 00:05:58.400
Let's run that.

90
00:05:59.540 --> 00:06:06.200
So now we get three hours, 27 minutes and 39 seconds.

91
00:06:06.230 --> 00:06:09.250
OK, so that's what that that's what that is saying.

92
00:06:09.260 --> 00:06:15.890
And of course, we can extract out any particular field just as we did with the period, so we can use

93
00:06:15.890 --> 00:06:17.640
these two methods here.

94
00:06:17.660 --> 00:06:20.660
Now these work a little bit differently in some ways.

95
00:06:20.930 --> 00:06:22.210
So let's see what I mean here.

96
00:06:22.220 --> 00:06:25.770
So if we call, let's see two hours.

97
00:06:25.790 --> 00:06:28.760
This one here, let's see what that returns.

98
00:06:30.330 --> 00:06:31.680
So that returns three.

99
00:06:33.150 --> 00:06:37.950
And then there was another version of that two hours part.

100
00:06:38.460 --> 00:06:39.600
Let's see what that does.

101
00:06:41.160 --> 00:06:41.430
All right.

102
00:06:41.430 --> 00:06:43.290
So what's the difference between these two?

103
00:06:43.500 --> 00:06:50.190
Well, if we take a look at the Java doc, the two hours part method simply gives us back the actual

104
00:06:50.250 --> 00:06:56.070
number for the hours that we were receiving in the original duration object itself when we just called

105
00:06:56.070 --> 00:06:57.990
to string on the duration itself.

106
00:06:58.230 --> 00:07:00.120
And we got back that formatted thing.

107
00:07:00.450 --> 00:07:05.580
This is just returning back the hours portion of that, whereas the two hours method, if we take a

108
00:07:05.580 --> 00:07:10.890
look at its Java doc, this actually just takes the total number of seconds for the entire duration

109
00:07:10.890 --> 00:07:15.780
and divides it by 3600 being the number of seconds in an hour.

110
00:07:16.140 --> 00:07:21.570
So there are some subtleties there in the differences between these two versions of very similar methods.

111
00:07:21.780 --> 00:07:26.220
And then for each part of the duration, there's an accompanying version of these, as you may have

112
00:07:26.220 --> 00:07:27.110
seen already.

113
00:07:27.120 --> 00:07:30.600
So there's a two hours and we can look here.

114
00:07:30.600 --> 00:07:37.470
There's a two days to Milly's and then variations of those that give us back the parts as well.

115
00:07:37.650 --> 00:07:42.990
So lots of ways to slice and dice and parse out the the data for these durations.

116
00:07:42.990 --> 00:07:51.000
But as I said before, periods are four days up and then durations are meant for generally speaking,

117
00:07:51.000 --> 00:07:52.530
smaller units of time.

118
00:07:52.920 --> 00:07:59.130
Though you will see that we do have the ability to extract out days here, but I don't think they go

119
00:07:59.130 --> 00:08:00.170
any higher than that.

120
00:08:00.180 --> 00:08:00.810
No, they don't.

121
00:08:00.960 --> 00:08:02.580
So they don't go any higher than that.
