WEBVTT
1
00:00:00.570 --> 00:00:01.050
Hey, there.

2
00:00:01.320 --> 00:00:07.200
All right, so I've got another set of scenarios for you now, and these ones should be pretty easy

3
00:00:07.200 --> 00:00:08.070
to grasp.

4
00:00:08.430 --> 00:00:14.940
They're actually somewhat related to some previous capabilities that we've learned in this module.

5
00:00:15.240 --> 00:00:18.920
So I want to present you with a few scenarios again.

6
00:00:19.530 --> 00:00:24.330
Let's say the Maiya the scroll through our list of people here, our list of employees.

7
00:00:24.630 --> 00:00:34.350
Let's say that we just want to know programmatically if all of these programmers have a salary greater

8
00:00:34.350 --> 00:00:37.770
than, let's say, $3000, OK?

9
00:00:38.310 --> 00:00:41.670
And we want to figure this out using the Streams API.

10
00:00:41.790 --> 00:00:45.000
Now, let me throw a caveat or two in here.

11
00:00:45.270 --> 00:00:47.190
I think we already know how to do this.

12
00:00:47.610 --> 00:00:56.010
Just maybe like using a filter or something where we'll say, you know, iterate through the list and

13
00:00:56.010 --> 00:01:04.920
filter out everybody who is or filter filter through every employee who is earning a salary greater

14
00:01:04.920 --> 00:01:06.570
than three thousand bucks, right?

15
00:01:07.500 --> 00:01:13.430
Then we decide what to do with those employees who who get to pass through the filter, right?

16
00:01:13.440 --> 00:01:16.230
So we could just list them out.

17
00:01:16.950 --> 00:01:21.960
Later on, we'll learn some additional streams, API methods that we could use, where we could count

18
00:01:21.960 --> 00:01:23.640
them something like that.

19
00:01:23.850 --> 00:01:31.800
But if we literally just want to get a Boolean value to answer the question of whether or not all of

20
00:01:31.800 --> 00:01:38.760
the employees have a salary greater than 3000, we haven't learned how to do exactly that.

21
00:01:38.940 --> 00:01:40.100
So let's take a look.

22
00:01:40.110 --> 00:01:41.070
It's pretty easy.

23
00:01:41.700 --> 00:01:42.000
All right.

24
00:01:42.010 --> 00:01:43.530
So here's our list, right?

25
00:01:44.100 --> 00:01:51.120
And we're going to just continue to use this, this this bit here, but we can get rid of some of it.

26
00:01:52.020 --> 00:01:52.830
Let's see here.

27
00:01:52.830 --> 00:01:54.910
What do we not need, I think.

28
00:01:54.930 --> 00:02:03.780
Well, actually, I think all we really care about is, at most the employees that are coming out of

29
00:02:03.780 --> 00:02:04.850
the stream of employees.

30
00:02:04.890 --> 00:02:08.670
So I think all the rest of these lines are not needed for this.

31
00:02:10.440 --> 00:02:10.800
All right.

32
00:02:10.810 --> 00:02:19.080
So if we want to simply find out a yes or no, if all of the employees have a salary greater than three

33
00:02:19.080 --> 00:02:28.260
thousand, what we can do is make use of a method in the Streams API, which is called all match.

34
00:02:29.550 --> 00:02:33.960
So the all match method takes a predicate just like a filter.

35
00:02:33.960 --> 00:02:37.440
Would we use it pretty much exactly the same as a filter.

36
00:02:37.800 --> 00:02:39.360
OK, all match.

37
00:02:39.360 --> 00:02:48.330
And it's asking the question Do all of the objects in this stream match the predicate that we are supplying

38
00:02:48.330 --> 00:02:48.780
to it?

39
00:02:49.920 --> 00:02:57.660
So let's say that we've got an employee and we're going to just use the lambda expression to implement

40
00:02:57.660 --> 00:02:58.410
this predicate.

41
00:02:58.620 --> 00:02:58.920
Right?

42
00:03:00.450 --> 00:03:04.380
So we could say something as simple as where he died.

43
00:03:06.150 --> 00:03:11.250
Get salary is greater than 3000.

44
00:03:12.360 --> 00:03:12.750
All right.

45
00:03:12.990 --> 00:03:15.570
Now here's a couple of things to note.

46
00:03:16.470 --> 00:03:20.400
This method all match is a terminal operation.

47
00:03:20.880 --> 00:03:26.340
We've seen a few other terminal operations, such as the for each method in the Streams API, which

48
00:03:26.340 --> 00:03:34.560
means that it will be the last thing that you can do in a pipeline using the Streams API.

49
00:03:34.920 --> 00:03:41.190
And what it does is it returns a Boolean right because we're asking a Boolean question Do all of the

50
00:03:41.220 --> 00:03:48.300
items in this stream match the predicate or satisfy the predicate that we are supplying here?

51
00:03:48.420 --> 00:03:49.320
Yes or no?

52
00:03:49.620 --> 00:03:51.150
So that returns a Boolean.

53
00:03:51.420 --> 00:03:59.820
So that means that we need to probably like capture the output of this and we can do that by just,

54
00:03:59.940 --> 00:04:04.350
you know, closing this off with the semicolon, putting our cursor at the end here and then doing an

55
00:04:04.350 --> 00:04:05.040
option command.

56
00:04:06.450 --> 00:04:13.620
And now we can name this variable that we are about to create this Boolean variable

57
00:04:16.080 --> 00:04:21.150
all over three three K

58
00:04:23.850 --> 00:04:25.350
and then we can print that out.

59
00:04:28.570 --> 00:04:30.670
And so let's run it and see what we get.

60
00:04:31.720 --> 00:04:33.610
All right, so it returns a false.

61
00:04:34.570 --> 00:04:39.460
Not everybody is getting a salary over over 3000.

62
00:04:40.150 --> 00:04:43.650
Now let's lower this to $1.

63
00:04:44.110 --> 00:04:45.340
And run that again.

64
00:04:47.020 --> 00:04:48.220
Still getting a false.

65
00:04:48.370 --> 00:04:54.360
You want to take a quick stab at why, by the way, it has nothing to do with the programming, I guess

66
00:04:54.410 --> 00:04:56.680
doesn't really have anything to do with the programming.

67
00:04:58.090 --> 00:04:58.460
OK?

68
00:04:58.480 --> 00:04:59.800
Did you figure it out?

69
00:05:01.030 --> 00:05:05.740
OK, so the problem, if you want to call it a problem, is our data set.

70
00:05:06.130 --> 00:05:11.680
Remember this guy he keeps, he keeps, you know, he keeps causing this trouble.

71
00:05:11.770 --> 00:05:12.610
This this guy.

72
00:05:14.320 --> 00:05:21.700
So he results in the creation of a dummy employee and a dummy employee has no salary.

73
00:05:21.700 --> 00:05:23.050
It's a salary of zero.

74
00:05:23.080 --> 00:05:23.500
Right.

75
00:05:23.770 --> 00:05:25.330
And so that's what's going on here.

76
00:05:25.360 --> 00:05:34.330
So if we want this to work otherwise, probably what would be nice is just to filter out this guy,

77
00:05:34.450 --> 00:05:35.650
which we've done before.

78
00:05:35.650 --> 00:05:41.770
And look at that, we've already got our ready made predicate that knows how to filter out those, those

79
00:05:41.980 --> 00:05:43.270
those dummy you guys, right?

80
00:05:43.720 --> 00:05:50.740
So maybe what we do is we just slip a filter right above that.

81
00:05:53.820 --> 00:06:00.090
And we will reference our employee predicate, which we should really rename now to something more more

82
00:06:00.360 --> 00:06:07.050
appropriate, let's say dummy selector.

83
00:06:08.610 --> 00:06:09.090
OK.

84
00:06:10.110 --> 00:06:15.930
And then we want to negate this because with this approach that we have right now, it would actually

85
00:06:15.930 --> 00:06:18.150
permit only the dummy.

86
00:06:19.080 --> 00:06:21.320
And we want to get rid of the dummy, right.

87
00:06:21.330 --> 00:06:27.540
We want to negate this so we can do that with our predicate variable here by just doing a period negate,

88
00:06:27.990 --> 00:06:30.750
right, so we can flip the logic of that.

89
00:06:30.750 --> 00:06:34.770
So now we're saying filter out the dummies, right?

90
00:06:36.990 --> 00:06:38.730
OK, so let's run this again.

91
00:06:39.570 --> 00:06:40.260
There we go.

92
00:06:40.260 --> 00:06:41.640
And now we're getting a true.

93
00:06:42.240 --> 00:06:47.040
And now I think we can go back to our our previous value.

94
00:06:47.100 --> 00:06:47.940
What did we have?

95
00:06:47.940 --> 00:06:49.170
3000.

96
00:06:49.590 --> 00:06:49.910
All right.

97
00:06:49.920 --> 00:06:50.820
Let's try that.

98
00:06:52.260 --> 00:06:53.310
Now we're getting a false.

99
00:06:53.490 --> 00:06:56.430
So I happen to know this is legitimate.

100
00:06:56.730 --> 00:07:03.600
Not all of these employees are actually earning 3000 bucks.

101
00:07:04.170 --> 00:07:11.280
So I think they are all earning at least 2500, though let's try 2500.

102
00:07:13.410 --> 00:07:14.310
OK, very good.

103
00:07:14.340 --> 00:07:17.740
So yes, they are all earning over 2500 bucks.

104
00:07:17.760 --> 00:07:18.060
All right.

105
00:07:18.070 --> 00:07:22.250
So that's what the all match method does.

106
00:07:22.260 --> 00:07:28.980
It just returns a Boolean so that we can check in this case, every item that is coming through the

107
00:07:28.980 --> 00:07:32.250
stream after we've done any filtering, right?

108
00:07:32.850 --> 00:07:36.960
OK, now there's more methods and we're going to take a look at these as well.

109
00:07:36.960 --> 00:07:38.490
So that's the all match.

110
00:07:38.910 --> 00:07:42.060
Now what if we wanted to know the answer to the question?

111
00:07:42.510 --> 00:07:47.400
Do any of the employees have a salary of whatever, right?

112
00:07:47.610 --> 00:07:52.050
Maybe we'll make it some a higher number of fifty thousand right?

113
00:07:52.620 --> 00:07:55.080
Can you guess what that's going to look like?

114
00:07:56.040 --> 00:07:57.420
I think you should be able to.

115
00:07:57.750 --> 00:07:58.040
All right.

116
00:07:58.050 --> 00:08:02.940
So yeah, we can just change the all match to any match.

117
00:08:03.210 --> 00:08:09.870
And if you notice right here that returns a Boolean as well, and it also takes a predicate so pretty

118
00:08:09.870 --> 00:08:15.600
straightforward will change this number, though from 2500 to 50000.

119
00:08:15.610 --> 00:08:16.500
Let's try that.

120
00:08:16.710 --> 00:08:22.030
Honestly, I don't even remember myself what these values are, but I'm pretty sure we had some millionaires

121
00:08:22.030 --> 00:08:22.680
sitting there, right?

122
00:08:23.100 --> 00:08:27.330
So let's run this and see do any match.

123
00:08:27.840 --> 00:08:28.680
Yes, they do.

124
00:08:28.710 --> 00:08:31.110
OK, let's play a little bit here and see.

125
00:08:32.280 --> 00:08:33.750
Let's I don't know.

126
00:08:33.750 --> 00:08:40.710
Let's let's do ten million ten hundred thousand one million ten million.

127
00:08:41.520 --> 00:08:41.900
All right.

128
00:08:41.910 --> 00:08:44.730
So let's see if we've got any 10 millionaires.

129
00:08:45.510 --> 00:08:46.290
Let's run that.

130
00:08:47.310 --> 00:08:48.660
Oh, yes, we sure do.

131
00:08:49.710 --> 00:08:50.030
All right.

132
00:08:50.040 --> 00:08:52.250
So I'm not going to keep going through this.

133
00:08:52.260 --> 00:08:54.090
We already have the guessing game, right?

134
00:08:54.090 --> 00:08:58.890
And now this is turning into a a poor man's guessing game, but you get the idea.

135
00:08:59.040 --> 00:09:05.160
Now, some of you may be wondering, Yeah, I mean, this looks all well and good.

136
00:09:05.460 --> 00:09:07.980
What's the advantage like?

137
00:09:07.980 --> 00:09:08.310
Why?

138
00:09:08.310 --> 00:09:13.650
Why do why do these methods exist versus just using a filter or whatever?

139
00:09:14.400 --> 00:09:16.440
And you know, I guess it's a fair question.

140
00:09:16.770 --> 00:09:22.380
So obviously, one of the reasons might just be for convenience of the sort of the situation.

141
00:09:22.590 --> 00:09:27.270
Maybe you have a circumstance where you really just need to know yes or no, right?

142
00:09:28.320 --> 00:09:35.610
And you don't even want to have to count up the number of of objects that passed through all the filters

143
00:09:35.610 --> 00:09:39.930
and things and then convert that into a yes or no, you just want a direct yes or no.

144
00:09:40.230 --> 00:09:47.580
The other reason, though, is because some of these methods that we're looking at now provide us with

145
00:09:47.580 --> 00:09:49.530
with what is called short circuiting.

146
00:09:49.650 --> 00:09:51.900
And we have looked a little bit at this.

147
00:09:52.290 --> 00:09:58.230
Previously we learned about methods like drop while and take while do you remember those?

148
00:09:58.530 --> 00:10:07.050
Those methods will basically iterate through the stream, either until a predicate is satisfied and

149
00:10:07.050 --> 00:10:12.420
then they will stop traversing the stream at that point and either just return the rest of it, or they

150
00:10:12.420 --> 00:10:17.100
will return everything up until that point, depending on which of those methods you, you use.

151
00:10:17.370 --> 00:10:24.540
The point is that they're able to kind of like short circuit, some part of the stream, OK, and the

152
00:10:24.540 --> 00:10:30.630
benefit of that, as I stated when we were learning those methods, was that let's say you have a stream

153
00:10:30.630 --> 00:10:37.560
with potentially millions of items in it and you don't want to have to iterate through every single

154
00:10:37.560 --> 00:10:38.010
one of them.

155
00:10:38.010 --> 00:10:43.500
Or rather, you don't want your program to have to do so right because it's unnecessary if you're just

156
00:10:43.500 --> 00:10:47.280
looking for the first match or something of that sort.

157
00:10:47.370 --> 00:10:52.280
Then some of these short circuiting type methods frequently will make.

158
00:10:52.340 --> 00:10:55.880
Much more sense and be much more efficient for the computer.

159
00:10:55.910 --> 00:11:00.920
OK, so there's an any match and that's, you know, pretty straightforward as well.

160
00:11:01.190 --> 00:11:03.410
There's also a none match.

161
00:11:03.890 --> 00:11:07.390
So for that, we can let's see here.

162
00:11:07.400 --> 00:11:10.550
We'll do none.

163
00:11:11.060 --> 00:11:19.310
Now this is asking the question, do none of the items match or satisfy the predicate?

164
00:11:19.340 --> 00:11:19.790
OK.

165
00:11:20.000 --> 00:11:29.810
So for this, let's just say like there shouldn't be any matches of of employees whose salary is less

166
00:11:29.810 --> 00:11:30.570
than zero.

167
00:11:30.590 --> 00:11:30.980
Right?

168
00:11:31.010 --> 00:11:34.460
There shouldn't be any employees with a salary less than zero.

169
00:11:34.820 --> 00:11:41.000
So let's just do zero and then we'll switch that that way.

170
00:11:41.210 --> 00:11:41.510
Right?

171
00:11:42.140 --> 00:11:42.470
All right.

172
00:11:42.500 --> 00:11:43.340
Let's try that.

173
00:11:44.210 --> 00:11:44.530
All right.

174
00:11:44.540 --> 00:11:48.920
So we get we get a true so that's telling us, yes, you are correct.

175
00:11:49.160 --> 00:11:53.600
There are no employees with a salary less than zero.

176
00:11:53.960 --> 00:11:54.440
OK.

177
00:11:55.250 --> 00:12:03.290
And again, this will short circuit if while it's going through the list, it finds one employee who

178
00:12:03.290 --> 00:12:10.160
does have a salary less than zero, then it's going to just stop right there and return a false right.

179
00:12:10.850 --> 00:12:14.240
And again, that's that short circuiting functionality.

180
00:12:14.630 --> 00:12:14.930
All right.

181
00:12:14.960 --> 00:12:18.680
And a couple more methods that I want to show you.

182
00:12:19.070 --> 00:12:22.070
There's a find first and a find any.

183
00:12:23.150 --> 00:12:24.980
So the find first.

184
00:12:25.340 --> 00:12:26.780
Let's take a quick look at that.

185
00:12:27.620 --> 00:12:31.400
The way that this one works is a little bit different.

186
00:12:31.430 --> 00:12:33.040
It does not take a predicate.

187
00:12:33.050 --> 00:12:35.360
In fact, it doesn't take anything at all.

188
00:12:36.410 --> 00:12:39.500
So instead, we'll just call find first.

189
00:12:40.490 --> 00:12:46.340
Now it doesn't take any input, but it does return something and it returns something that we haven't

190
00:12:46.340 --> 00:12:47.450
played with yet.

191
00:12:48.500 --> 00:12:52.400
This method returns something called an optional.

192
00:12:52.940 --> 00:12:58.370
Now I'm going to try not to go too deep into options right this moment, but I am going to give you

193
00:12:58.370 --> 00:12:59.780
a little bit of an understanding.

194
00:12:59.780 --> 00:13:06.380
OK, so so first, let's let's go ahead and change what we're capturing here so that we can make this

195
00:13:06.380 --> 00:13:07.070
happy.

196
00:13:07.850 --> 00:13:08.170
All right.

197
00:13:08.180 --> 00:13:14.870
So it's going to return an optional and so I'll put my cursor here after the find first semicolon there

198
00:13:14.870 --> 00:13:21.620
and I'm going to let's capture this with the option Command V. And I don't know.

199
00:13:21.620 --> 00:13:25.490
Let's call this optional EMP, right?

200
00:13:25.520 --> 00:13:26.690
Optional employee.

201
00:13:27.080 --> 00:13:31.610
Now, look at what the data type for this optional employee variable is.

202
00:13:31.610 --> 00:13:36.080
It's optional and then a generic of employee.

203
00:13:36.110 --> 00:13:36.470
Right?

204
00:13:36.890 --> 00:13:39.500
So what what options are?

205
00:13:40.730 --> 00:13:52.280
They are a data type that was introduced into Java version eight, and they allow us to avoid having

206
00:13:52.400 --> 00:13:55.440
null values for variables.

207
00:13:55.470 --> 00:14:04.100
OK, and perhaps even more importantly, if used properly, they can allow us to avoid null pointer

208
00:14:04.100 --> 00:14:05.000
exceptions.

209
00:14:05.330 --> 00:14:07.490
So real quick context here.

210
00:14:08.300 --> 00:14:10.340
Let me comment that for a second.

211
00:14:10.910 --> 00:14:19.100
Remember a few lessons ago when I was talking about this predicate right here, and I was saying that

212
00:14:19.400 --> 00:14:29.930
typically when we are testing for string equality against a constant, it is usually recommended that

213
00:14:29.930 --> 00:14:37.110
you actually flip this expression around a bit and you would prefer to say something like in slash oops,

214
00:14:37.640 --> 00:14:44.390
a dot equals and then you do all of this this way.

215
00:14:44.870 --> 00:14:45.140
Right.

216
00:14:45.150 --> 00:14:47.870
And then we can get rid of all of that.

217
00:14:48.560 --> 00:14:58.520
And the reason I said that this is usually recommended is because if the value that we have here is

218
00:14:58.520 --> 00:15:05.930
capable of being null, meaning it has not been explicitly set to something right, it's just nothing

219
00:15:06.350 --> 00:15:07.700
if it's null.

220
00:15:09.020 --> 00:15:12.290
With this approach, we're safe.

221
00:15:13.010 --> 00:15:14.660
It just won't be equal, right?

222
00:15:14.660 --> 00:15:17.450
It'll just say not equal, it'll return a false.

223
00:15:17.750 --> 00:15:28.010
But with the other approach, which I will go back to with this approach, if this guy is null, then

224
00:15:28.010 --> 00:15:29.510
there is no object.

225
00:15:29.510 --> 00:15:33.200
And if there is no object in this case, the string string object.

226
00:15:33.350 --> 00:15:39.410
And if there is no string object, then there is no way to call the equals method of an object that

227
00:15:39.410 --> 00:15:40.790
does not exist, right?

228
00:15:40.810 --> 00:15:45.560
You can't call a method on an object that isn't there, right?

229
00:15:46.790 --> 00:15:51.950
So that would result in what is called a null pointer exception.

230
00:15:52.200 --> 00:15:57.330
And I've touched on exceptions a tiny bit every now and then where I say that's basically like an error.

231
00:15:57.460 --> 00:16:00.720
Your it's your program blowing up, that's really what it is.

232
00:16:00.900 --> 00:16:07.860
You really don't want that quick side note for those of you who are old enough to have used windows.

233
00:16:08.370 --> 00:16:10.560
I'm not a Windows user anymore.

234
00:16:10.560 --> 00:16:14.460
I'm not a regular Windows user anymore, so I don't even know if this is still a thing.

235
00:16:14.460 --> 00:16:18.750
But back in the 90s, and probably, I don't know, 20 years as well.

236
00:16:20.010 --> 00:16:25.690
Windows when it would crash, you would get what was called the infamous blue screen of death.

237
00:16:25.740 --> 00:16:26.100
Right?

238
00:16:26.460 --> 00:16:31.410
So the, you know, the entire operating system would just blow up and you would have to restart the

239
00:16:31.410 --> 00:16:32.010
computer.

240
00:16:33.270 --> 00:16:39.750
Well, null pointer exceptions in a Java program are kind of the equivalent of that.

241
00:16:39.930 --> 00:16:41.760
You don't want them to happen.

242
00:16:42.090 --> 00:16:49.260
If your program experiences a null pointer exception, your program is done and it will have to be restarted.

243
00:16:49.470 --> 00:16:54.180
So we don't want those to happen in our code, in our programs.

244
00:16:54.360 --> 00:17:01.530
And so it behooves us to write code that won't result in null pointer exceptions.

245
00:17:01.740 --> 00:17:07.920
And so that is one of the biggest reasons why the recommendation of taking the string constant and putting

246
00:17:07.920 --> 00:17:10.380
it in the front here exists.

247
00:17:11.220 --> 00:17:18.330
Now, having said all of that, there are other techniques that can be utilized newer techniques, newer

248
00:17:18.330 --> 00:17:24.990
in the Java world that can be utilized to help avoid null pointer exceptions.

249
00:17:25.260 --> 00:17:29.670
And one of those techniques is to use what are called optional.

250
00:17:30.510 --> 00:17:39.960
So what we can do is if we declared current well, currently, this get lastname method is a method

251
00:17:39.960 --> 00:17:45.750
that returns a string, OK, and that string could possibly be null.

252
00:17:46.020 --> 00:17:46.410
All right.

253
00:17:47.190 --> 00:17:54.510
If we did not write any code inside of this class to prevent that string from ever being null, it could

254
00:17:54.510 --> 00:17:56.400
possibly be null for some reason.

255
00:17:56.610 --> 00:17:57.060
OK.

256
00:17:57.600 --> 00:17:59.700
However, we could have.

257
00:18:00.360 --> 00:18:05.790
I was about to make a I was about to accidentally say this so we could make an optional.

258
00:18:07.140 --> 00:18:17.340
However, we could define this get lastname method and the underlying field for it as not a string,

259
00:18:17.340 --> 00:18:19.830
but as an optional string.

260
00:18:20.550 --> 00:18:27.540
And what that allows us to do is to say this string is optional.

261
00:18:27.750 --> 00:18:29.330
It might have a value.

262
00:18:29.340 --> 00:18:31.260
It might not have a value.

263
00:18:31.560 --> 00:18:33.420
We'll find out at runtime.

264
00:18:33.810 --> 00:18:38.580
But the key thing there is that it will always be optional, right?

265
00:18:38.580 --> 00:18:39.660
So the optional.

266
00:18:39.720 --> 00:18:42.170
So you can think of an optional as an actual object.

267
00:18:42.180 --> 00:18:42.960
In fact, it is.

268
00:18:42.960 --> 00:18:43.980
It is an object.

269
00:18:44.010 --> 00:18:44.440
OK.

270
00:18:45.690 --> 00:18:55.490
And fields that that support options should always at least have the optional object existing.

271
00:18:55.500 --> 00:19:04.950
OK, so think of an optional as a box and think of that box as being capable of housing whatever the

272
00:19:04.950 --> 00:19:06.620
optional generic type is.

273
00:19:06.630 --> 00:19:13.920
So if it's an optional of a string as we have here, then you can actually imagine a in a box which

274
00:19:13.920 --> 00:19:17.070
is an optional and inside of that box.

275
00:19:18.360 --> 00:19:23.550
There might be an employee and there might not be an employee, OK?

276
00:19:23.730 --> 00:19:26.550
Or if we had an optional of a string.

277
00:19:26.880 --> 00:19:33.240
Think of a box and inside of that box there might be a string and there might not be a string.

278
00:19:33.270 --> 00:19:40.070
OK, now this may sound like we're just kicking the can down the road, right?

279
00:19:40.080 --> 00:19:43.530
Because, OK, now you've got this optional of a string.

280
00:19:43.920 --> 00:19:46.830
We still need to open the box and see if there's a string.

281
00:19:46.830 --> 00:19:49.620
And if there isn't the string, isn't the program still going to blow up?

282
00:19:49.830 --> 00:19:53.640
No, not if we write our code correctly.

283
00:19:54.690 --> 00:19:59.430
So the at any rate, let's let's come back here to the fine first.

284
00:19:59.430 --> 00:20:06.300
So the fine first method tries to find the first item in the stream.

285
00:20:06.330 --> 00:20:12.900
The problem is, though there may not be any items in the stream by the time we get here, right?

286
00:20:13.020 --> 00:20:18.780
What if we had a filter, for example, that was filtering out everything, right?

287
00:20:19.410 --> 00:20:22.820
So that by the time we got here, there's nothing, there's nothing left.

288
00:20:22.830 --> 00:20:24.570
There are no other objects matching.

289
00:20:24.570 --> 00:20:26.010
I'm not saying that's what we have here.

290
00:20:26.010 --> 00:20:27.870
We know that's not our case here.

291
00:20:28.080 --> 00:20:33.510
But I'm just saying like, what if it's easy enough to do so?

292
00:20:33.930 --> 00:20:41.670
If there were no other items coming back here, then this fine first method still wants to return something.

293
00:20:41.850 --> 00:20:47.550
And mainly, that's just because, to be honest with you, by the time this fine first method was added

294
00:20:47.580 --> 00:20:52.080
to the Java Streams API, the creators of Java had already.

295
00:20:52.150 --> 00:20:59.200
Created the optional class to deal with the issue of null pointer exceptions, and I think they couldn't

296
00:20:59.200 --> 00:21:10.330
stomach doing any further API coding that would allow or contribute to further null pointer checking

297
00:21:10.330 --> 00:21:16.840
and null pointer exceptions and all of the mess that exists around that type of coding any further.

298
00:21:16.960 --> 00:21:18.460
And so they figured, you know what?

299
00:21:18.610 --> 00:21:25.240
Here's a great opportunity for us to use our own contraption and make this method just return an optional

300
00:21:25.540 --> 00:21:26.440
all the time.

301
00:21:26.770 --> 00:21:31.240
And then it's up to you to determine whether or not there's something in that optional or not.

302
00:21:31.250 --> 00:21:37.540
OK, so anyway, the fine first method is going to return an optional of an employee and then we can

303
00:21:37.540 --> 00:21:42.280
do something with that optional to determine if really, truly there was an employee.

304
00:21:42.310 --> 00:21:44.880
OK, so let's go ahead and do that.

305
00:21:44.890 --> 00:21:51.730
In fact, let's let's do this and give you a little sneak preview into optional.

306
00:21:51.730 --> 00:21:59.320
So if there is an employee coming out of here, let's grab their first name and print it.

307
00:21:59.530 --> 00:22:01.720
OK, now I'll show you how we can do that.

308
00:22:02.410 --> 00:22:07.360
So often there are actually several ways we can do it, but maybe I'll start off by showing you the

309
00:22:07.600 --> 00:22:09.850
probably one of the better ways to do it, OK?

310
00:22:10.060 --> 00:22:11.730
So optional employee.

311
00:22:11.740 --> 00:22:15.010
So there may be an employee inside this box and there might not be.

312
00:22:15.010 --> 00:22:15.820
We don't know.

313
00:22:16.270 --> 00:22:21.490
So how can we safely get the optional employees first name?

314
00:22:21.700 --> 00:22:27.700
If the optional employee actually exists, right without writing a bunch of stupid code?

315
00:22:28.180 --> 00:22:33.340
So what we can do is refer to the optional employee dot.

316
00:22:33.670 --> 00:22:46.420
And then now here's the cool thing the option class has a map method, just like the streams API has

317
00:22:46.420 --> 00:22:47.770
a map method.

318
00:22:47.950 --> 00:22:48.430
OK.

319
00:22:48.820 --> 00:22:54.460
And so we can actually use this pretty much the same way you're used to seeing it now in the Streams

320
00:22:54.460 --> 00:22:57.940
API, so I can reference employee

321
00:23:00.430 --> 00:23:03.370
get first name just like that.

322
00:23:04.090 --> 00:23:08.950
However, I'm not quite done because this is all well and good.

323
00:23:08.950 --> 00:23:14.590
If there actually is an employee in that optional, what if there isn't one, though?

324
00:23:14.800 --> 00:23:15.940
What's going to happen?

325
00:23:16.660 --> 00:23:21.610
Well, this map method, if we hover over it, let's see what it actually returns.

326
00:23:22.750 --> 00:23:26.920
The map method actually returns another optional.

327
00:23:27.100 --> 00:23:32.950
Now it feels like we're about to get into the Twilight Zone, some kind of recursive, you know, camera

328
00:23:33.520 --> 00:23:37.420
video camera, watching a TV, watching the camera, watching the TV or whatever, right?

329
00:23:37.600 --> 00:23:39.820
One of these recursive situations.

330
00:23:39.820 --> 00:23:43.090
But actually, it's not that bad.

331
00:23:43.390 --> 00:23:54.490
What we can do now is we can just put a period here and then we can say, or else now this or else is

332
00:23:54.490 --> 00:24:05.020
expecting us to supply it with a default string that we want to have returned if the employee does not

333
00:24:05.020 --> 00:24:07.040
actually exist in this case.

334
00:24:07.300 --> 00:24:11.140
And so we can say, I don't know, nobody.

335
00:24:13.180 --> 00:24:16.240
Now we might want to make this look a little prettier.

336
00:24:16.360 --> 00:24:21.430
Also, so because it's basically kind of like modeled off of the streams API, in fact.

337
00:24:21.430 --> 00:24:26.680
So we could indent a couple of lines here kind of like that, right?

338
00:24:26.680 --> 00:24:32.020
And kind of make it look like it's a little miniature, optional pipeline, if you will.

339
00:24:32.320 --> 00:24:32.680
All right.

340
00:24:32.890 --> 00:24:43.960
So what what this is actually saying is basically if there is an employee, then get the first name

341
00:24:43.960 --> 00:24:47.530
out, otherwise just returned.

342
00:24:47.800 --> 00:24:48.670
Nobody.

343
00:24:49.300 --> 00:24:49.720
All right.

344
00:24:50.080 --> 00:24:54.190
So let's run this and see what happens.

345
00:24:55.390 --> 00:24:56.240
Hey, there we go.

346
00:24:56.260 --> 00:24:57.340
So we got somebody.

347
00:24:57.340 --> 00:24:58.390
It's Fred, right?

348
00:24:58.690 --> 00:24:59.770
So now let's break it.

349
00:25:00.700 --> 00:25:07.960
Let's break it and and see how it behaves if we don't get anybody out.

350
00:25:08.110 --> 00:25:08.470
Right?

351
00:25:08.800 --> 00:25:13.330
So let's change our filter to do something impossible, I suppose.

352
00:25:13.980 --> 00:25:14.890
Uh, let's see.

353
00:25:14.890 --> 00:25:24.880
Let's filter through all employees who have a salary less than zero.

354
00:25:25.570 --> 00:25:25.970
Right?

355
00:25:26.020 --> 00:25:29.020
We know there aren't any of those employees, right?

356
00:25:29.380 --> 00:25:31.760
So now let's run this and see what we get.

357
00:25:32.800 --> 00:25:34.090
We get nobody.

358
00:25:35.050 --> 00:25:36.610
So you see what's going on here?

359
00:25:36.620 --> 00:25:41.230
Do you see how much more convenient it is to code in this way?

360
00:25:41.740 --> 00:25:48.340
So with more traditional programming, we might have had to say something like, you know, I don't

361
00:25:48.340 --> 00:25:51.970
know, I'll just I'll just pseudo.

362
00:25:52.050 --> 00:25:56.820
Coded here, so we'd have an employee, right, but we wouldn't know if there was actually anything

363
00:25:56.820 --> 00:25:57.180
in it.

364
00:25:57.390 --> 00:26:08.460
And then we have to say if and then we'd have to say something like if employee is not null, then.

365
00:26:11.560 --> 00:26:16.630
Then whatever system died out, front line

366
00:26:19.150 --> 00:26:22.330
employee died, get first name

367
00:26:25.990 --> 00:26:26.800
else.

368
00:26:32.270 --> 00:26:35.610
System got out print line.

369
00:26:37.040 --> 00:26:38.440
No body.

370
00:26:39.830 --> 00:26:41.600
Right, so something along those lines.

371
00:26:41.870 --> 00:26:48.920
Not, you know, not hard to write, but I would say that

372
00:26:51.830 --> 00:26:57.050
this approach, this approach is more concise, right?

373
00:26:57.080 --> 00:27:00.920
It's this more concise and possibly more readable as well.

374
00:27:01.070 --> 00:27:08.530
Now, maybe you're not crazy about embedding all of that inside of here and actually in real life.

375
00:27:08.540 --> 00:27:10.550
I don't know that I'd be doing that either.

376
00:27:10.730 --> 00:27:15.110
But then we always know that we could always this, grab all of that and then extract the variable out

377
00:27:15.110 --> 00:27:20.240
of that with our option Command V and then past that guy in.

378
00:27:20.240 --> 00:27:23.030
And so we know that that variable is always going to have something in it.

379
00:27:23.030 --> 00:27:27.380
It's either going to have the word nobody or it's going to have the actual first name that we're looking

380
00:27:27.380 --> 00:27:27.620
for.

381
00:27:28.220 --> 00:27:28.580
All right.

382
00:27:28.610 --> 00:27:35.840
And then finally, we can also use the Find Any, which is, from our perspective, very similar to

383
00:27:35.840 --> 00:27:37.190
the Find first.

384
00:27:38.420 --> 00:27:47.540
So that's also going to just find any object at all that satisfies our predicate and then capture that.

385
00:27:47.660 --> 00:27:51.530
So you'll be wondering what's the difference between the find any in the find first?

386
00:27:52.070 --> 00:28:00.260
Really, the difference has to do with how the streams API handles the ordering of the objects contained

387
00:28:00.260 --> 00:28:07.790
within and how it can optimize to do what it does to to to flow through those streams to execute those

388
00:28:07.790 --> 00:28:14.450
pipelines, depending on whether or not we actually care about the order or not.

389
00:28:14.570 --> 00:28:16.290
Obviously, where they find any.

390
00:28:16.310 --> 00:28:17.930
We don't care about the order.

391
00:28:18.140 --> 00:28:25.310
This may have more of an impact, by the way, particularly if you are using the Streams API to do what

392
00:28:25.310 --> 00:28:33.290
is called parallel processing, where we allow multiple processors or multiple cores within a computer

393
00:28:33.680 --> 00:28:37.710
to execute our pipeline concurrently or at the same time.

394
00:28:37.730 --> 00:28:38.090
Right.

395
00:28:38.270 --> 00:28:47.600
So in that scenario, fine, if we're using find any, it doesn't matter which one we find that satisfies

396
00:28:47.600 --> 00:28:50.840
the predicate even across multiple processes, right?

397
00:28:50.840 --> 00:28:58.730
So if we've got a list of a billion employees and we write a pipeline using the Streams API to go find

398
00:28:59.030 --> 00:29:06.620
any employee who matches our criteria, and we have 16 cores on a computer and we inform the Streams

399
00:29:06.620 --> 00:29:11.960
API to make use of all of those cores or make use of parallelism and at least write.

400
00:29:12.230 --> 00:29:20.090
Then generically speaking, you can imagine that those billion or so employees are going to kind of

401
00:29:20.120 --> 00:29:27.560
get chopped up into groupings, and each core is going to get its own group of those billion or so employees

402
00:29:27.560 --> 00:29:28.550
to process.

403
00:29:28.760 --> 00:29:31.580
And they're kind of like looking for a needle in the haystack, right?

404
00:29:31.730 --> 00:29:38.750
And whichever processor finds it first, Java will coordinate with the other processors to tell the

405
00:29:38.750 --> 00:29:42.110
other ones, Hey, we found one so you guys can stop, right?

406
00:29:42.170 --> 00:29:48.170
And it's not going to matter if it was the first one or not, if it was the first one in the original

407
00:29:48.770 --> 00:29:51.020
list of one billion employees, right?

408
00:29:52.490 --> 00:29:54.530
Because we told it to just find any.

409
00:29:54.980 --> 00:29:55.270
All right.

410
00:29:55.280 --> 00:30:02.660
So we're going to stop there with these nice, convenient methods, but we've got quite a few more methods

411
00:30:02.660 --> 00:30:06.140
that we're going to run through in these streams API coming up.

412
00:30:06.290 --> 00:30:07.820
So I'll see you in the next one.
