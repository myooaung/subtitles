WEBVTT
1
00:00:00.600 --> 00:00:01.380
Welcome back.

2
00:00:01.770 --> 00:00:09.510
So in the last lesson we learned about composition and how that can compare with inheritance.

3
00:00:09.780 --> 00:00:17.310
We also learned how we could use composition to get around one of the perceived limitations of Java,

4
00:00:17.460 --> 00:00:21.000
which is the fact that Java does not support multiple inheritance.

5
00:00:21.150 --> 00:00:28.290
And just a reminder multiple inheritance is where a class can extend from more than one other class.

6
00:00:28.590 --> 00:00:36.900
So if we turn back to the CEO class, for example, here we see that the CEO extends employee, but

7
00:00:36.900 --> 00:00:43.440
we cannot have it extend from additional classes by doing something like, you know, putting a comma

8
00:00:43.440 --> 00:00:47.450
here and saying that it also extends from pilot or something like that.

9
00:00:47.460 --> 00:00:49.110
You can't do that in Java.

10
00:00:49.650 --> 00:00:54.690
However, in this lesson, we're going to learn some other ways to work around that fact.

11
00:00:54.810 --> 00:01:00.120
So real quick, we'll just reiterate a little bit of what you learned in the last lessons.

12
00:01:00.120 --> 00:01:06.330
I set up a scenario in the last lesson where I said, OK, we want the CEO to not only be a CEO, but

13
00:01:06.330 --> 00:01:08.600
we also want him to be a pilot, right?

14
00:01:08.610 --> 00:01:12.810
Maybe he likes the fly on the weekends or something like that.

15
00:01:12.960 --> 00:01:21.300
So we created a pilot class and we just pretending like, Hey, we're modeling some aspects of a pilot,

16
00:01:21.300 --> 00:01:21.570
right?

17
00:01:21.570 --> 00:01:27.300
So we've got this pilot here, and the pilot has a couple of properties and then has various behaviors

18
00:01:27.300 --> 00:01:31.200
such as, you know, he's able to fly and things of that sort.

19
00:01:31.470 --> 00:01:31.790
All right.

20
00:01:31.800 --> 00:01:35.070
And then we extracted an interface from the pilot.

21
00:01:35.070 --> 00:01:41.250
And if you recall, all that does is it just went through and found all the methods on pilot and then

22
00:01:41.250 --> 00:01:44.970
declared them in a new interface, which we called flyer.

23
00:01:45.360 --> 00:01:46.580
So we'll jump into that.

24
00:01:46.590 --> 00:01:50.100
So here are the methods that were on the class.

25
00:01:50.220 --> 00:01:57.210
And the only reason we did this was so that we could make the CEO or any other class, for that matter,

26
00:01:57.540 --> 00:02:02.090
appear to be a pilot, technically appear to be a flyer.

27
00:02:02.340 --> 00:02:02.790
OK.

28
00:02:04.650 --> 00:02:06.360
So we put that interface there.

29
00:02:06.780 --> 00:02:17.160
And then in order to allow the CEO to have the same capabilities as a pilot, we used composition.

30
00:02:17.250 --> 00:02:21.120
And all that really meant is that we created a new instance of a pilot.

31
00:02:21.570 --> 00:02:25.230
We stored that instance in an instance variable or a field.

32
00:02:25.590 --> 00:02:30.960
Now we started in an an instance variable of type flier rather than of type pilot.

33
00:02:31.170 --> 00:02:38.850
It doesn't matter a ton, but typically we should favor storing instances in their interface type or

34
00:02:38.850 --> 00:02:41.370
in the more generic type, if you can.

35
00:02:41.420 --> 00:02:45.360
OK, because that allows for more flexibility later.

36
00:02:45.810 --> 00:02:52.590
And then we generated delegate methods on this class from the methods on flyer.

37
00:02:52.620 --> 00:02:52.960
OK.

38
00:02:52.980 --> 00:03:01.410
And what that means is the IED inspected all of the methods of the pilot class, and then it offered

39
00:03:01.440 --> 00:03:07.950
to create what I like to call pass through methods where it basically just duplicated the the signatures

40
00:03:07.950 --> 00:03:09.000
of those methods.

41
00:03:09.300 --> 00:03:16.080
And then it generated calls down to those corresponding methods on the flyer instance variable.

42
00:03:16.170 --> 00:03:16.680
OK.

43
00:03:16.740 --> 00:03:18.270
And so you can see that here.

44
00:03:18.750 --> 00:03:26.010
And that's kind of a neat little trick if you want to call it that to be able to get around the lack

45
00:03:26.010 --> 00:03:29.400
of multiple inheritance support within Java.

46
00:03:29.820 --> 00:03:36.240
So if we had other classes with other capabilities that we wanted to endow on the CEO class or some

47
00:03:36.240 --> 00:03:42.930
other classes, we could use this this capability of composition to get around the lack of multiple

48
00:03:42.930 --> 00:03:44.220
inheritance, OK?

49
00:03:44.580 --> 00:03:51.930
And so this works very well, and it is oftentimes recommended as the way to go if you need that kind

50
00:03:51.930 --> 00:03:52.860
of capability.

51
00:03:53.550 --> 00:04:02.340
So now I want to show you, though, that there is a newer technique that you could consider using to

52
00:04:02.340 --> 00:04:07.140
get around the lack of traditional support for multiple inheritance in Java.

53
00:04:07.380 --> 00:04:13.770
Though I want to caution you, you should tread very lightly if you consider using this.

54
00:04:13.770 --> 00:04:19.260
And at the end of this lesson, I will go into a little bit of detail explaining the fact that what

55
00:04:19.260 --> 00:04:25.830
I'm about to show you wasn't primarily intended for getting around multiple inheritance.

56
00:04:25.830 --> 00:04:28.050
It was actually intended for something else.

57
00:04:28.170 --> 00:04:30.810
And I will show you that at the end.

58
00:04:31.410 --> 00:04:31.820
All right.

59
00:04:31.830 --> 00:04:38.460
So let's jump in to the interface flyer here, and I will just remind you that an interface simply is

60
00:04:38.460 --> 00:04:45.270
like a lightweight class where we can describe the behaviors that we want on a type.

61
00:04:45.720 --> 00:04:51.900
And in this case, what I mean by type is a class, essentially, but we don't supply an implementation

62
00:04:51.900 --> 00:04:53.040
for those methods.

63
00:04:53.040 --> 00:04:58.950
And in fact, I'll just remind you that even if I were to delete this semicolon and put the curly braces

64
00:04:58.950 --> 00:04:59.340
here.

65
00:04:59.590 --> 00:05:01.480
Not allowed to even do this, right?

66
00:05:02.500 --> 00:05:08.560
So you're not allowed to do that because that's not what interfaces originally were for.

67
00:05:09.040 --> 00:05:15.760
However, as of Java version eight, which is quite some time ago, I think that's like 2014.

68
00:05:16.630 --> 00:05:22.150
As of Java, eight interfaces have been expanded in what they can do.

69
00:05:22.720 --> 00:05:31.510
And so now there is actually a way to supply an implementation with methods in interfaces.

70
00:05:31.840 --> 00:05:36.460
And I'm going to show you that now and show you what the repercussions of this are.

71
00:05:36.580 --> 00:05:39.610
So I cannot do this right.

72
00:05:40.090 --> 00:05:41.920
However, let me put this back.

73
00:05:45.280 --> 00:05:48.400
However, what I can do is this.

74
00:05:48.610 --> 00:05:57.940
So let's let's let's pretend like we want to endow the programmer with a new set of skills.

75
00:05:58.300 --> 00:06:03.310
Let's say that programmers are well known for enjoying cooking from time to time.

76
00:06:03.340 --> 00:06:03.780
OK.

77
00:06:04.090 --> 00:06:11.900
And so we want to endow our programmer with the ability to also cook so as before.

78
00:06:11.920 --> 00:06:13.540
Let's create a new interface.

79
00:06:13.930 --> 00:06:18.190
So I'm going to right click on the package, go to new Java class.

80
00:06:18.820 --> 00:06:22.810
I will select interface and here I will say Chef.

81
00:06:23.410 --> 00:06:27.250
OK, we'll call it chef and enter.

82
00:06:27.520 --> 00:06:29.800
All right, so we've got this new chef interface.

83
00:06:30.940 --> 00:06:37.230
Now, as before, we can start defining a number of methods on this interface.

84
00:06:37.240 --> 00:06:47.260
However, we can supply actual implementation code with these methods and let me show you how so if

85
00:06:47.260 --> 00:06:53.020
we preface our methods with a new special keyword, which is default.

86
00:06:56.010 --> 00:07:02.340
We can then supply an implementation with a method, so let's say a chef can cook.

87
00:07:02.460 --> 00:07:02.850
Right?

88
00:07:03.240 --> 00:07:05.360
So let's put a method on here.

89
00:07:05.370 --> 00:07:10.170
Let's make it void, and let's just make it a method called cook.

90
00:07:11.470 --> 00:07:17.560
And and, you know, we can even make it take an input of a string, which may be like the food that

91
00:07:17.560 --> 00:07:25.540
should be cooked, OK, and then we can supply the curly braces like any other method, and then we

92
00:07:25.540 --> 00:07:28.270
can have it do something like print out.

93
00:07:30.220 --> 00:07:32.290
I am now cooking.

94
00:07:34.970 --> 00:07:35.450
Food.

95
00:07:36.950 --> 00:07:37.400
All right.

96
00:07:39.020 --> 00:07:42.680
So this will do exactly what it looks like it should do.

97
00:07:42.920 --> 00:07:44.900
And it's perfectly allowed.

98
00:07:45.860 --> 00:07:49.610
And let's throw one more default method on here.

99
00:07:50.540 --> 00:07:54.320
Let's and let's have this one return a string just to mix it up a little bit.

100
00:07:54.560 --> 00:08:00.500
Let's have this one be a method to clean up, and it will take nothing.

101
00:08:01.190 --> 00:08:02.300
And let's see.

102
00:08:02.310 --> 00:08:05.390
So this is expecting a string, so we'll just have it return.

103
00:08:07.610 --> 00:08:10.130
I'm done cleaning up.

104
00:08:12.960 --> 00:08:16.740
And just to show you that we can do this.

105
00:08:16.920 --> 00:08:23.490
Let me also show you that we can still have our regular interface methods where we cannot specify any

106
00:08:23.490 --> 00:08:24.390
implementation.

107
00:08:24.690 --> 00:08:28.950
So let's say that a chef can also yell at people.

108
00:08:28.980 --> 00:08:29.460
Right?

109
00:08:31.110 --> 00:08:36.990
So let's declare another method that returns a string and we'll call this yell at people.

110
00:08:39.330 --> 00:08:46.380
And so this one, we just put the semicolon on and just a quick reminder, so if I tried to put a body

111
00:08:46.380 --> 00:08:48.330
here, it's not going to allow me to write.

112
00:08:48.840 --> 00:08:49.800
It's not allowed.

113
00:08:49.980 --> 00:08:53.490
And that's because I don't have the default keyword there.

114
00:08:54.810 --> 00:08:55.180
All right.

115
00:08:55.200 --> 00:09:02.310
So now if we jump over to the programmer class or any class for that matter, I can simply declare that

116
00:09:02.310 --> 00:09:08.210
this method implements, not extends, but implements chef.

117
00:09:09.690 --> 00:09:16.230
Like so now it's giving me an error right now because it's going to tell me that I need to implement

118
00:09:16.230 --> 00:09:18.870
the one unimplemented method.

119
00:09:19.110 --> 00:09:21.570
The Yell at people method, right?

120
00:09:22.590 --> 00:09:24.810
So if I hover on this, that's what we'll see.

121
00:09:24.990 --> 00:09:27.150
Yeah, I have to implement yell at people.

122
00:09:27.390 --> 00:09:30.480
Now I don't want to actually implement that, but I could you know how to do that?

123
00:09:31.140 --> 00:09:36.150
So I'm going to go back over here to the chef interface, and I'm just going to remove that method.

124
00:09:36.150 --> 00:09:44.160
And we put that there just to prove that we can mix these default methods along with traditional interface

125
00:09:44.160 --> 00:09:48.270
methods, which are generally referred to as abstract methods on the interface.

126
00:09:48.690 --> 00:09:53.160
And then if I jump back over to the programmer now that read error message has gone away.

127
00:09:54.090 --> 00:09:56.480
Now let's see something cool here.

128
00:09:56.490 --> 00:10:05.550
If we jump over to the main class, what I'm going to do is I will create an instance of my programmer

129
00:10:07.440 --> 00:10:07.770
now.

130
00:10:07.770 --> 00:10:13.470
For this instance, I'm going to store it in a variable of type programmer for a very specific reason,

131
00:10:13.470 --> 00:10:15.060
which I will point out in just a moment.

132
00:10:15.420 --> 00:10:21.210
So I'm going to create an instance of a programmer, and I'll just call it coder, the shorter slang

133
00:10:21.240 --> 00:10:26.070
term for programmer, write new programmer and it takes a string.

134
00:10:26.070 --> 00:10:31.530
And I don't care about this string right now, so I'm just going to leave that empty there.

135
00:10:31.830 --> 00:10:38.070
Now here's the part I want to show you those methods that are not directly defined on programmer but

136
00:10:38.070 --> 00:10:42.630
are defined on the chef coder dot.

137
00:10:44.420 --> 00:10:47.120
There's cleanup and there's Cook right there.

138
00:10:47.210 --> 00:10:47.690
OK.

139
00:10:48.790 --> 00:10:51.190
So I could call this cook method here.

140
00:10:53.110 --> 00:10:54.000
Hamburger.

141
00:10:56.050 --> 00:10:56.920
And there you go.

142
00:10:57.220 --> 00:11:03.280
Now I'm not going to run this because it's going to blow up if I don't pass anything in there.

143
00:11:03.430 --> 00:11:04.120
And you get it.

144
00:11:04.300 --> 00:11:14.110
But the point here is that this method is completely inherited from the interface and it is actually

145
00:11:14.110 --> 00:11:14.710
implemented.

146
00:11:14.710 --> 00:11:16.150
So this will actually work.

147
00:11:16.390 --> 00:11:27.120
We can actually implement something that's probably about 90 90 to 95 percent of multiple inheritance

148
00:11:27.130 --> 00:11:34.390
if we really, really wanted to, because going back over here to the programmer class, I could have

149
00:11:34.390 --> 00:11:41.620
other interfaces with default methods defined on them, and all their methods would just automatically

150
00:11:41.620 --> 00:11:44.110
show up here under programmer.

151
00:11:44.380 --> 00:11:44.860
OK.

152
00:11:45.160 --> 00:11:51.190
So that is a way to get a certain amount of multiple inheritance.

153
00:11:51.370 --> 00:11:56.650
Now, as with all things, there's going to be some caveats here, and there's at least one big caveat

154
00:11:56.650 --> 00:11:57.040
here.

155
00:11:57.310 --> 00:11:59.110
Let me show you what it is.

156
00:11:59.860 --> 00:12:08.590
So if we jump into the chef interface, so with true multiple inheritance, you've got a class that

157
00:12:08.590 --> 00:12:12.400
is extending another class, which is called a super class.

158
00:12:12.400 --> 00:12:19.450
And that super class not only has behavior in the form of methods that can be inherited, it also can

159
00:12:19.450 --> 00:12:24.940
have data in the form of instance variables or fields that can be inherited.

160
00:12:25.060 --> 00:12:29.110
However, with interfaces, you don't get that.

161
00:12:29.380 --> 00:12:31.120
So let me show you what I mean.

162
00:12:31.900 --> 00:12:40.780
I can define a something like a field here, let's say will make a string and we'll call it favorite

163
00:12:40.780 --> 00:12:46.760
food, and we can even initialize it to something like hamburger.

164
00:12:48.400 --> 00:12:56.830
OK, so we've got this field here on the interface, and then we could introduce a method to get that

165
00:12:56.830 --> 00:12:57.850
favorite food.

166
00:13:00.040 --> 00:13:05.830
So it will make it a default string, get favorite food.

167
00:13:08.370 --> 00:13:11.100
Return favorite food.

168
00:13:12.100 --> 00:13:15.040
All right, so so far, so good that's that's looking fine, right?

169
00:13:16.600 --> 00:13:17.920
But how about this?

170
00:13:18.910 --> 00:13:19.900
How about a sweater?

171
00:13:22.270 --> 00:13:23.980
Set favorite food.

172
00:13:28.850 --> 00:13:29.690
Now, watch this.

173
00:13:29.720 --> 00:13:30.530
Normally.

174
00:13:31.860 --> 00:13:35.050
With a regular class to set this favorite food.

175
00:13:35.070 --> 00:13:43.800
We just do this, this dot favorite food equals favorite food.

176
00:13:44.100 --> 00:13:45.180
But look at this.

177
00:13:45.900 --> 00:13:48.720
And then if we hover on this error, let's see what we get.

178
00:13:49.440 --> 00:13:53.670
Cannot assign a value to final variable favorite food.

179
00:13:53.820 --> 00:13:55.920
And therein lies the issue.

180
00:13:56.820 --> 00:14:06.540
When we put a so-called field on an interface, that field is made final automatically by Java, and

181
00:14:06.540 --> 00:14:11.190
because it's made final is the same as if we just had the final keyword right there.

182
00:14:11.460 --> 00:14:13.230
In fact, I can put that word there.

183
00:14:13.290 --> 00:14:16.860
But the ad presented in gray because it's redundant.

184
00:14:17.190 --> 00:14:22.560
And if you'll recall, final means that once that value is set, you cannot change it.

185
00:14:22.770 --> 00:14:29.250
And so it doesn't make any sense for us to have a setter method that allows us to change the value of

186
00:14:29.250 --> 00:14:32.250
that because you wouldn't be permitted to change that value.

187
00:14:32.250 --> 00:14:39.960
So I can absolutely set this field to a value as I'm doing here and when I declare an initialize it,

188
00:14:40.260 --> 00:14:45.090
and this default method can even retrieve it, but I cannot change it.

189
00:14:45.600 --> 00:14:56.190
So that's a pretty big limitation on my ability to do full on multiple inheritance because this interface

190
00:14:56.190 --> 00:15:00.360
with default methods will never be able to hold any state.

191
00:15:00.540 --> 00:15:05.640
It will never be able to remember any any data that we're setting on it.

192
00:15:05.760 --> 00:15:12.330
And that's, you know, that's that's that's a major aspect of object orientation and classes.

193
00:15:12.690 --> 00:15:20.010
Nevertheless, if you can identify some behaviors that you would like to make shareable in this fashion,

194
00:15:20.010 --> 00:15:24.150
this is certainly a technique that you could consider using.

195
00:15:24.570 --> 00:15:31.680
Now, another interesting technique that you can utilize as well is that not only can you put default

196
00:15:31.680 --> 00:15:37.230
methods on an interface here, let me let me, let me just get rid of that.

197
00:15:38.430 --> 00:15:44.700
You can also put static methods on an interface, which is potentially kind of cool.

198
00:15:45.120 --> 00:15:47.340
So we could do something like static.

199
00:15:48.330 --> 00:15:48.960
I don't know.

200
00:15:50.190 --> 00:15:55.140
And convert units.

201
00:15:55.800 --> 00:16:01.230
And you know, you get to have some utility methods that convert different cooking units or something

202
00:16:01.230 --> 00:16:05.160
like that ounces to grams or, you know, something something of that sort.

203
00:16:05.190 --> 00:16:05.490
Right?

204
00:16:05.820 --> 00:16:11.250
And that sort of utility method is almost always made as a static method.

205
00:16:11.850 --> 00:16:17.910
And so such a such a method could make a lot of sense to put on a chef interface or something like that.

206
00:16:18.060 --> 00:16:19.650
And that could be quite useful.

207
00:16:20.250 --> 00:16:20.670
All right.

208
00:16:22.670 --> 00:16:31.370
So now let me take a moment to explain the original use case for the use of default methods on interfaces.

209
00:16:31.970 --> 00:16:40.430
So the original issue that caused the developers of Java to implement this functionality in the first

210
00:16:40.430 --> 00:16:48.530
place was the fact that they came up with a lot of new functionality for a number of Java's native classes,

211
00:16:48.530 --> 00:16:50.270
which we will be learning about.

212
00:16:50.660 --> 00:16:57.320
And these were pre-existing classes, all of which implemented various interfaces.

213
00:16:57.890 --> 00:17:03.950
And so if they were going to add a lot more methods to these classes, those methods generally needed

214
00:17:03.950 --> 00:17:06.110
to be added to the interfaces.

215
00:17:06.260 --> 00:17:14.560
And here's the problem whenever you add a regular abstract method that is a regular method to an interface,

216
00:17:14.960 --> 00:17:24.140
a typical method to an interface, all classes that implement that interface are forced to implement

217
00:17:24.140 --> 00:17:25.760
those methods as well.

218
00:17:26.150 --> 00:17:32.630
And for one particular set of classes in Java, which are called collections, which we will learn about

219
00:17:32.630 --> 00:17:40.310
soon, there are many classes that are part of Java and some that are made by third parties that extend

220
00:17:40.610 --> 00:17:47.300
what those collection classes can do by implementing the standard collections interfaces.

221
00:17:47.480 --> 00:17:55.040
And so if the developers of Java had chosen to simply go in and add in all of these additional methods

222
00:17:55.040 --> 00:18:01.520
to the standard collections interfaces, for example, it would have caused a lot of trouble for all

223
00:18:01.520 --> 00:18:07.640
of the existing libraries that were implementing those collections interfaces.

224
00:18:08.000 --> 00:18:13.520
And it was decided that that would be too much turmoil overnight for too many projects.

225
00:18:14.120 --> 00:18:17.990
So what they did was to come up with the idea of default methods.

226
00:18:18.740 --> 00:18:27.020
Basically, they could add these additional methods to the interfaces, but they could provide a default

227
00:18:27.020 --> 00:18:28.790
implementation for them.

228
00:18:29.060 --> 00:18:37.130
And by having a default implementation on the interface, pre-existing classes that were already implementing

229
00:18:37.130 --> 00:18:43.400
those interfaces would not be forced to also implement the additional methods because there's already

230
00:18:43.400 --> 00:18:47.900
an implementation on the interface itself, which are the default methods.

231
00:18:48.530 --> 00:18:55.190
However, if those implementing classes chose to come up with their own implementations for those methods,

232
00:18:55.190 --> 00:18:56.120
they could do that.

233
00:18:56.750 --> 00:18:58.940
So you kind of get the best of both worlds.

234
00:18:59.570 --> 00:19:07.700
So having said this, some of the astute ones of you might even have noticed if we can now provide default

235
00:19:07.700 --> 00:19:09.530
methods on interfaces.

236
00:19:09.860 --> 00:19:15.740
What's the difference between putting a default method on an interface and putting regular methods with

237
00:19:15.740 --> 00:19:19.190
full implementations on abstract classes?

238
00:19:19.340 --> 00:19:24.920
Because abstract classes let you do pretty much the same thing and you'd be right to ask that question?

239
00:19:25.100 --> 00:19:30.290
They are extremely similar, but I've already pretty much pointed out what the differences and abstract

240
00:19:30.290 --> 00:19:31.730
class is a class.

241
00:19:31.850 --> 00:19:34.790
It's just one that can't be instantiated on its own.

242
00:19:35.270 --> 00:19:37.700
Other than that, it is a regular class.

243
00:19:38.060 --> 00:19:46.760
It can maintain state i.e. you can put instance variables or fields on abstract classes, whereas with

244
00:19:46.760 --> 00:19:53.630
interfaces not so much, the fields are automatically made final and therefore not all that useful,

245
00:19:53.630 --> 00:19:58.490
especially if you want to set some state on an interface field.

246
00:19:59.000 --> 00:20:01.970
So having said all of this, here are my thoughts.

247
00:20:02.420 --> 00:20:08.270
This is a very cool technology, but I would very much warn against going out of your way to utilize

248
00:20:08.270 --> 00:20:11.390
this technique to implement multiple inheritance.

249
00:20:11.630 --> 00:20:13.190
I'm not saying don't ever do it.

250
00:20:13.610 --> 00:20:14.960
Here's what I would suggest.

251
00:20:15.350 --> 00:20:16.060
Play with it.

252
00:20:16.070 --> 00:20:23.630
Play with it on your own personal projects and on small projects that won't have a lot of impact on

253
00:20:23.630 --> 00:20:24.710
lots of people.

254
00:20:24.890 --> 00:20:25.360
OK.

255
00:20:25.640 --> 00:20:29.870
Play with it as much as you want to on your own small personal projects.

256
00:20:30.200 --> 00:20:36.800
I'd be a lot more careful, though, about trying to utilize this functionality, especially for multiple

257
00:20:36.800 --> 00:20:44.150
inheritance on commercial projects for companies where you've got lots of developers working in that

258
00:20:44.150 --> 00:20:45.320
same code base.

259
00:20:45.710 --> 00:20:51.170
This is really intended for what we call APIs or application programming interfaces.

260
00:20:51.530 --> 00:20:58.190
When the developers of Java defined the collections classes, they created those interfaces.

261
00:20:58.190 --> 00:21:00.560
For those classes, that's really an API.

262
00:21:00.950 --> 00:21:07.760
OK, so these are teams that are making frameworks, if you will, that lots of people are meant to

263
00:21:07.760 --> 00:21:15.290
use and sometimes even meant to extend this functionality is really intended for people who are making

264
00:21:15.290 --> 00:21:20.300
such frameworks in APIs not so much intended for end user developers.

265
00:21:20.510 --> 00:21:25.070
Who are just writing in house code that they completely own on their own.

266
00:21:25.370 --> 00:21:31.460
If you own all of the code on your own, then you can design your code in such a way that either you

267
00:21:31.460 --> 00:21:36.830
won't need multiple inheritance because you can just build the functionality that you need right into

268
00:21:36.830 --> 00:21:39.200
the classes where you need them in the first place.

269
00:21:39.770 --> 00:21:44.480
Or you can always use composition, as I've already shown in the previous lesson.

270
00:21:44.630 --> 00:21:50.090
But because we are in a module where we're learning about interfaces, I thought I should go ahead and

271
00:21:50.090 --> 00:21:53.240
mention this capability and show you how it works.

272
00:21:53.570 --> 00:21:58.820
But that's about all I have to say about this topic for now, and I will see you in the next one.
