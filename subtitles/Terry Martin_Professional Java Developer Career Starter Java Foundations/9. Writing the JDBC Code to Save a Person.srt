1
00:00:00,240 --> 00:00:05,490
All right, so now we can jump into this repository and get to work.

2
00:00:05,610 --> 00:00:08,430
OK, so here we are in the save method.

3
00:00:08,430 --> 00:00:10,140
This is the part that we actually cared about.

4
00:00:10,140 --> 00:00:12,660
All the rest of this was just setting things up, right?

5
00:00:12,930 --> 00:00:15,000
So now we're in the good stuff, the save method.

6
00:00:15,030 --> 00:00:22,260
So the main thing we want to do here is we want to be able to save this person and we want to be able

7
00:00:22,260 --> 00:00:28,740
to get there automatically generated I.D. after we've saved them because the database is going to generate

8
00:00:28,740 --> 00:00:30,750
these IDs for us, if you recall.

9
00:00:30,900 --> 00:00:36,750
So we want to get our hands on that I.D. Then we want to take that I.D. and stuff it back into this

10
00:00:36,750 --> 00:00:43,830
person as we are returning the person so that the rest of our tests will now all work well, mostly

11
00:00:43,830 --> 00:00:45,990
so that the second test will work right.

12
00:00:46,770 --> 00:00:47,070
All right.

13
00:00:47,080 --> 00:00:48,360
So here's how we're going to do this.

14
00:00:48,570 --> 00:00:51,500
What I'm inclined to do is to mostly just code this up.

15
00:00:51,510 --> 00:00:57,840
I will try to explain a few things, but I'll save the big explanation for closer to the end of getting

16
00:00:57,840 --> 00:00:59,010
this all going, OK?

17
00:00:59,490 --> 00:01:06,690
So in this save method, we're going to refer to our connection and we need to first create what's called

18
00:01:06,690 --> 00:01:08,370
a prepared statement.

19
00:01:09,420 --> 00:01:15,570
And so we can get a prepared statement by calling the prepare statement method, which takes sequel

20
00:01:15,570 --> 00:01:16,710
as an input.

21
00:01:17,070 --> 00:01:19,290
So we're going to reference this method here.

22
00:01:19,680 --> 00:01:26,370
And so here we can simply pass in some sequel just like we were doing in our Squirrel sequel client.

23
00:01:26,460 --> 00:01:34,590
OK, so we can pass in some sequel that will say something like insert into the people table.

24
00:01:36,800 --> 00:01:43,940
Into the columns of let's see, first name, comma, a last name, comma, date of birth.

25
00:01:44,120 --> 00:01:48,770
Let's just go with those for now and then we need to specify our values.

26
00:01:50,540 --> 00:01:52,070
And now here's the thing.

27
00:01:52,610 --> 00:01:59,330
When we were doing this in the Squirrel sequel client, we were just specifying the values directly

28
00:01:59,330 --> 00:02:00,190
like this.

29
00:02:00,200 --> 00:02:09,680
We were saying something like, you know, whatever John Comma, Smith comma and then whatever date,

30
00:02:09,680 --> 00:02:10,070
right?

31
00:02:10,190 --> 00:02:10,910
Blah blah blah.

32
00:02:11,510 --> 00:02:12,950
So that's what we were doing there.

33
00:02:13,250 --> 00:02:16,190
Obviously, here, though, we don't want a hard code.

34
00:02:16,190 --> 00:02:19,940
These values, we need to get the values out of this person.

35
00:02:20,390 --> 00:02:23,350
Now there are a few ways that we could do this.

36
00:02:23,360 --> 00:02:31,040
Actually, one way that we could do it would be we could capture this string into its own variable.

37
00:02:31,310 --> 00:02:33,920
In fact, here I'll just go ahead and do that right now, right?

38
00:02:33,930 --> 00:02:35,870
So there's there's some sequel.

39
00:02:36,440 --> 00:02:44,120
Okay, we could capture that into its own variable and we could append values that we pull out of the

40
00:02:44,120 --> 00:02:45,170
person class.

41
00:02:45,410 --> 00:02:50,260
So, for example, we could do something like plus part.

42
00:02:51,750 --> 00:02:54,450
Person, get first name.

43
00:02:55,430 --> 00:03:02,960
Comma plus, but then we'd have to get into this nasty formatting thing, where then we'd have a comma

44
00:03:03,500 --> 00:03:10,040
space quote, plus you see what I'm saying here, so that starts to get kind of nasty.

45
00:03:10,070 --> 00:03:12,650
Remember what I said about concatenating strings?

46
00:03:12,650 --> 00:03:13,670
That's what we're doing here.

47
00:03:13,970 --> 00:03:20,060
If you're concatenating just two strings, the plus sign is probably a nice, easy way to do it.

48
00:03:20,090 --> 00:03:21,590
No, no, no worries there.

49
00:03:21,860 --> 00:03:28,940
If you're concatenating multiple strings like we'd have to do here, this starts to get nasty and I

50
00:03:28,940 --> 00:03:30,140
wouldn't want to do that.

51
00:03:30,560 --> 00:03:37,700
Another approach that we could take, which would certainly be better in my opinion, would be to use

52
00:03:37,700 --> 00:03:41,870
something like the string dot format method.

53
00:03:44,160 --> 00:03:48,920
And then we could use the little format symbols, right, so we could say something like percent as

54
00:03:49,770 --> 00:03:50,520
comma.

55
00:03:52,660 --> 00:03:55,000
Percent, yes, karma.

56
00:03:56,830 --> 00:03:57,640
Percent.

57
00:03:58,940 --> 00:04:03,670
Percent death notice, I'm not putting single ticks here, because that would be for the date of birth,

58
00:04:03,680 --> 00:04:04,070
right?

59
00:04:04,670 --> 00:04:05,270
Comma.

60
00:04:06,800 --> 00:04:09,600
And then you can pass in those values.

61
00:04:09,660 --> 00:04:14,600
I'm going to go down to the next line here because I'm running out of space person to get first, name

62
00:04:14,900 --> 00:04:21,590
first and get last name, person dot get date of birth.

63
00:04:21,710 --> 00:04:25,220
Now that's a zoned date time, and we're going to talk about that a little more in a moment here.

64
00:04:25,310 --> 00:04:26,930
But you see where I'm going with this, right?

65
00:04:26,930 --> 00:04:29,930
So that's one way that you could do this, for sure.

66
00:04:30,410 --> 00:04:30,860
OK.

67
00:04:31,130 --> 00:04:32,790
That's not how we're going to do it.

68
00:04:32,870 --> 00:04:36,920
I will state, though really quickly that if we were going to do it this way and there's a lot of Java

69
00:04:36,920 --> 00:04:42,290
code written in kind of this way where they're just kind of concatenating strings together to build

70
00:04:42,290 --> 00:04:43,970
their insert SQL statement.

71
00:04:44,840 --> 00:04:47,330
In that case, you wouldn't need a prepared statement.

72
00:04:47,330 --> 00:04:53,900
You could just use another method called Create Statement where you're just going to pass it all in

73
00:04:53,910 --> 00:04:54,770
already built.

74
00:04:54,800 --> 00:04:55,210
OK.

75
00:04:55,490 --> 00:05:00,500
One of the reasons for using the prepared statement those because it actually gives us a more elegant

76
00:05:00,500 --> 00:05:03,940
way to solve the problem of getting our values passed in here.

77
00:05:03,950 --> 00:05:04,310
OK?

78
00:05:04,580 --> 00:05:07,000
And so let me show you that approach.

79
00:05:07,010 --> 00:05:09,950
So we're not actually going to do the string that format.

80
00:05:12,310 --> 00:05:14,590
So I'm just going to get rid of all of that.

81
00:05:17,560 --> 00:05:20,170
Instead, what we can do.

82
00:05:21,350 --> 00:05:28,070
Is we can simply specify question marks just like that.

83
00:05:28,490 --> 00:05:32,290
And so now what we can do is we'll close this off.

84
00:05:32,300 --> 00:05:34,330
And yes, I know I've got this squiggly line here.

85
00:05:34,340 --> 00:05:37,340
And in fact, let's go ahead and do something about this squiggly line here.

86
00:05:37,580 --> 00:05:43,190
So this squiggly line here throws a Java sequel sequel exception as well.

87
00:05:43,670 --> 00:05:50,270
Now, in this case, we don't want to just add this exception to the method signature of our save method.

88
00:05:50,480 --> 00:05:56,900
And the reason for that is if we were to do that, that would mean that this save method would just

89
00:05:56,900 --> 00:05:59,830
be passing on the sequel exception.

90
00:05:59,840 --> 00:06:07,700
And the problem here is that real Java applications that are well-written should be written in layers.

91
00:06:08,120 --> 00:06:11,990
So depending on what type of application it is, you might have two layers.

92
00:06:11,990 --> 00:06:13,010
You might have three layers.

93
00:06:13,280 --> 00:06:18,020
Maybe, perhaps there's even like a standard for having four layers or something like that.

94
00:06:18,410 --> 00:06:24,710
Most of the typical Java applications that I've worked on over my career will typically have three layers,

95
00:06:24,710 --> 00:06:31,790
though, and the bottom layer of these typical applications will be the data access layer.

96
00:06:31,940 --> 00:06:36,290
And that's the layer in which a class like the people repository here would live.

97
00:06:36,380 --> 00:06:38,750
It would live in the data access layer.

98
00:06:39,500 --> 00:06:45,530
The layer above that will would typically be known as the business or service layer.

99
00:06:46,070 --> 00:06:55,010
And one of the purposes of these layers is to isolate and abstract away a lot of the details that only

100
00:06:55,010 --> 00:06:56,630
pertain to that layer.

101
00:06:56,810 --> 00:07:05,090
So if the people repository class is meant to live in the data access layer, then you don't typically

102
00:07:05,090 --> 00:07:13,070
want to allow concepts that are specific to the data access layer to be able to bubble up into other

103
00:07:13,070 --> 00:07:13,640
layers.

104
00:07:14,120 --> 00:07:21,260
The sequel exception is very much a data access layer type of concept.

105
00:07:21,380 --> 00:07:23,470
OK, it has to do with databases.

106
00:07:23,780 --> 00:07:31,340
In other words, we don't want the layer above our data access layer to know that we have to talk to

107
00:07:31,340 --> 00:07:33,320
a database using sequel.

108
00:07:33,560 --> 00:07:33,980
OK.

109
00:07:34,160 --> 00:07:41,030
And so if we were to allow that SQL exception to bubble up from the safe method, that would mean that

110
00:07:41,030 --> 00:07:48,320
classes that interact with this people repository saved method, they'd have to know about the sequel

111
00:07:48,320 --> 00:07:51,020
exception because they'd have to handle it or pass it on.

112
00:07:51,050 --> 00:07:51,470
OK.

113
00:07:51,740 --> 00:07:53,960
And we don't want them to have to know about that.

114
00:07:54,200 --> 00:08:02,300
So probably the better thing to do in this case would be to actually surround this code with a try catch

115
00:08:02,300 --> 00:08:02,900
block.

116
00:08:03,350 --> 00:08:11,060
So I'm going to do that, and I just did an option command T to get the surround with options here,

117
00:08:11,070 --> 00:08:13,310
and then I'm going to choose six.

118
00:08:14,690 --> 00:08:15,110
All right.

119
00:08:15,410 --> 00:08:22,970
And so now that just surrounded the connection, that prepared statement with a try catch and now probably

120
00:08:22,970 --> 00:08:28,130
most of the rest of my code, I'm going to actually write inside of the try clause here.

121
00:08:28,140 --> 00:08:30,410
So now we're calling this prepared statement.

122
00:08:30,650 --> 00:08:35,660
So this method prepared statement actually returns something called a prepared statement.

123
00:08:35,660 --> 00:08:36,950
So we need to capture that.

124
00:08:37,370 --> 00:08:37,730
All right.

125
00:08:37,740 --> 00:08:43,220
So I'm going to have my cursor here at the end of this statement, and I'm going to do an option Command

126
00:08:43,220 --> 00:08:51,140
V. And I'm going to call this resulting variable piece because I don't want to type out prepared statement.

127
00:08:51,740 --> 00:08:52,250
All right.

128
00:08:52,250 --> 00:09:00,050
So now we're capturing this, this prepared statement like so and so now with this prepared statement,

129
00:09:00,050 --> 00:09:06,110
I can bind values to these question marks here and let me show you how I do that.

130
00:09:06,110 --> 00:09:07,520
It's actually pretty straightforward.

131
00:09:07,820 --> 00:09:14,420
I can call press dot set and there are all these setter methods here, such string.

132
00:09:15,140 --> 00:09:21,290
Now this method takes two parameters and index as an integer and then a string.

133
00:09:21,440 --> 00:09:29,720
And so what it's asking me is what string should I bind to the first parameter or the second parameter

134
00:09:29,720 --> 00:09:31,790
of the third parameter, et cetera, et cetera, right?

135
00:09:32,000 --> 00:09:40,400
And so if I want to bind a first name to the first parameter here in my school statement, I will first

136
00:09:40,400 --> 00:09:45,050
refer to the number one because that's the index of that parameter.

137
00:09:45,200 --> 00:09:48,890
Now it's not zero based here, it's actually one one.

138
00:09:49,190 --> 00:09:55,820
And then the actual string that I want to bind to that parameter and I will get that string from my

139
00:09:55,820 --> 00:10:03,530
person instance, person dot, get first name just like that, and then I can proceed to the next parameter

140
00:10:03,530 --> 00:10:04,700
set string.

141
00:10:05,330 --> 00:10:10,370
Second parameter person dot get last name just like that.

142
00:10:10,670 --> 00:10:13,130
Now, the third one is not a string.

143
00:10:13,490 --> 00:10:15,200
The third one is a date of birth.

144
00:10:15,200 --> 00:10:23,930
And if you recall from the database that we modeled as a timestamp now, the database timestamp is most

145
00:10:23,930 --> 00:10:27,710
similar to a Java dot you till date class.

146
00:10:27,710 --> 00:10:34,040
And if you recall the date class, which we will usually try to avoid because it's not as precise or

147
00:10:34,040 --> 00:10:38,570
useful as the newer style, date and time classes that we learned about.

148
00:10:38,580 --> 00:10:45,200
But anyway, the Java you till date date class represents an instant in time.

149
00:10:45,470 --> 00:10:50,870
So what we can do here is we can call pass that set timestamp.

150
00:10:51,290 --> 00:10:51,770
OK.

151
00:10:52,530 --> 00:10:53,690
Set timestamp.

152
00:10:54,020 --> 00:10:55,760
This will be the third parameter.

153
00:10:56,030 --> 00:10:57,280
And now we need to pass.

154
00:10:57,290 --> 00:10:58,850
Send to this method.

155
00:10:59,120 --> 00:11:01,790
A Java that sequel timestamp.

156
00:11:02,150 --> 00:11:04,260
But we don't have a Java, that sequel timestamp.

157
00:11:04,340 --> 00:11:08,540
We have a zoned date time on our person class.

158
00:11:08,690 --> 00:11:13,670
So we need to translate this zoned date time from the person into a timestamp.

159
00:11:13,970 --> 00:11:20,600
And the way we can do that is to first reference the time the Java that SQL timestamp class timestamp.

160
00:11:21,150 --> 00:11:26,570
Now be careful here to make sure you're referring to the Java Java, that sequel and not some of these

161
00:11:26,570 --> 00:11:27,260
other things.

162
00:11:27,290 --> 00:11:27,710
OK.

163
00:11:27,920 --> 00:11:30,470
All right, so timestamp dot.

164
00:11:30,860 --> 00:11:35,570
Now notice it has a method value of that takes a local date time.

165
00:11:35,780 --> 00:11:38,610
So we're getting close to what we actually need here.

166
00:11:38,930 --> 00:11:45,770
So we're going to we're going to use that value of method and now we're going to invoke our person to

167
00:11:46,010 --> 00:11:48,470
get the date of birth method.

168
00:11:48,470 --> 00:11:52,370
But remember, now this Dobb method returns a zoned date time.

169
00:11:52,370 --> 00:11:53,540
That's how we modeled it.

170
00:11:53,810 --> 00:11:55,790
We could have modeled it differently, but we didn't.

171
00:11:56,120 --> 00:11:56,390
All right.

172
00:11:56,390 --> 00:11:58,790
So we still need to do a little conversion here.

173
00:11:59,150 --> 00:12:06,230
So now we're on the zoned date time in this class, if you'll recall, has a method on it with zone.

174
00:12:06,260 --> 00:12:07,520
Same instant.

175
00:12:07,760 --> 00:12:15,290
So if we call this, we can translate our zoned date time, which was set for GMT minus six.

176
00:12:15,500 --> 00:12:17,890
We can set that to another time zone.

177
00:12:17,900 --> 00:12:22,130
So let's back up real quick and let me remind you of something in our database.

178
00:12:22,340 --> 00:12:23,900
We used a timestamp.

179
00:12:24,200 --> 00:12:31,520
The H2 database is timestamp data type does not hold information about a time zone.

180
00:12:31,610 --> 00:12:32,090
OK.

181
00:12:32,300 --> 00:12:39,110
So if we're using a database field that doesn't know about time zones, I strongly recommend that you

182
00:12:39,110 --> 00:12:46,070
standardize on one standard time zone to hold all of your date times in that particular field.

183
00:12:46,550 --> 00:12:54,470
So if we jump over to the database real quick here and let me click on this object's tab here and click

184
00:12:54,470 --> 00:13:01,700
on the people table here and down here, people table and then content, and we can see the actual contents

185
00:13:01,940 --> 00:13:08,270
of that table listed out here without having to type in, you know, select star from people, from

186
00:13:08,270 --> 00:13:08,720
people.

187
00:13:09,230 --> 00:13:11,900
OK, so here we have our dates of birth.

188
00:13:12,440 --> 00:13:14,150
They do not have time zone in.

189
00:13:14,160 --> 00:13:21,050
Information, so what I would recommend is that in real life, if you have the ability to do so, you

190
00:13:21,050 --> 00:13:27,410
should probably choose to standardize all your date times in such a field like this to be something

191
00:13:27,410 --> 00:13:28,850
like GMT zero.

192
00:13:28,880 --> 00:13:29,270
Right?

193
00:13:29,450 --> 00:13:30,590
Just a standard.

194
00:13:30,740 --> 00:13:37,250
So no matter what times you were getting in Java, you should translate those times those date times

195
00:13:37,250 --> 00:13:44,150
into their GMT zero equivalent and only store GMT zero in your database.

196
00:13:44,160 --> 00:13:50,390
That way, you always know what actual instant in the world that event occurred in.

197
00:13:50,750 --> 00:13:56,450
Otherwise, you'd be wondering, you know, if you were translating zone eight times from all kinds

198
00:13:56,450 --> 00:14:02,690
of different time zones and you just stored them directly into here, you'd lose the time zone bit,

199
00:14:02,990 --> 00:14:08,510
but you'd have confusing date time information without knowing what time zone you were referring to.

200
00:14:08,630 --> 00:14:14,050
And so you should just standardize all of the date times in a field like this to something like GMT

201
00:14:14,060 --> 00:14:14,390
zero.

202
00:14:14,390 --> 00:14:17,120
And really, you should probably just do GMT zero.

203
00:14:17,120 --> 00:14:19,130
That's probably the safest thing to do.

204
00:14:19,790 --> 00:14:21,440
So then we need to actually do that.

205
00:14:21,650 --> 00:14:25,730
And so that's actually not that hard we will simply call with.

206
00:14:26,990 --> 00:14:28,850
Zone, same instant.

207
00:14:29,300 --> 00:14:38,910
And now we need to pass in a zone I.D. of and then we can just say plus zero like that, OK, now.

208
00:14:39,020 --> 00:14:45,800
Still not done because this with the zone same instant method is actually still going to return back

209
00:14:46,040 --> 00:14:47,630
a zoned date time.

210
00:14:47,780 --> 00:14:57,740
Now it'll just return back a zoned date time with the date and time of our date of birth in GMT zero.

211
00:14:57,980 --> 00:14:58,430
OK.

212
00:14:58,730 --> 00:15:05,660
But now that we've done that, we can now just call to local date time.

213
00:15:06,820 --> 00:15:07,180
All right.

214
00:15:07,270 --> 00:15:13,940
To translate that into a local daytime, which is what the value of method of the timestamp class wants.

215
00:15:14,290 --> 00:15:17,140
I recognize this may look a little scary.

216
00:15:17,590 --> 00:15:22,240
So I would recommend that you practice writing this code a little bit yourself.

217
00:15:22,570 --> 00:15:23,020
OK.

218
00:15:23,410 --> 00:15:24,820
It's really not that bad.

219
00:15:25,160 --> 00:15:32,710
So just know that date of birth here returns a zoned date time and whatever the time zone was that we

220
00:15:32,710 --> 00:15:34,750
specified when we created it right?

221
00:15:35,290 --> 00:15:42,340
Then we're translating from that time zone to GMT zero with the with zone same instant method here.

222
00:15:42,640 --> 00:15:49,330
And then we're translating that zoned daytime into a local date time, which we can then pass in to

223
00:15:49,360 --> 00:15:51,610
the time stamp value of method.

224
00:15:51,850 --> 00:15:58,680
OK, so now all we need to do is just execute our insert statement and to do that, we can call that

225
00:15:58,810 --> 00:15:59,650
execute.

226
00:15:59,860 --> 00:16:02,410
Now there's a few variations of this method.

227
00:16:02,980 --> 00:16:06,340
One that we can call is execute update.

228
00:16:06,340 --> 00:16:13,030
Because this execute update method will return an integer which represents the number of records that

229
00:16:13,030 --> 00:16:16,060
were modified essentially from our sequel.

230
00:16:16,120 --> 00:16:23,390
OK, so we can call that and then we can capture its output, and I will call this records.

231
00:16:24,540 --> 00:16:25,410
Affected.

232
00:16:26,570 --> 00:16:27,020
OK.

233
00:16:27,470 --> 00:16:34,010
And for right now, what I will do is just print that out, so I'll use a system format and will say.

234
00:16:35,930 --> 00:16:43,820
Records affected Kolan percent, D percent, and then I will refer to that variable.

235
00:16:44,030 --> 00:16:44,360
All right.

236
00:16:44,450 --> 00:16:49,280
And that way, we'll get a little bit of output so that we can see what's kind of going on there.

237
00:16:49,760 --> 00:16:59,480
OK, now the last thing we'll need to do is we need to get our hands on the auto generated I.D. assuming

238
00:16:59,480 --> 00:17:01,060
that this all went well, right?

239
00:17:01,070 --> 00:17:07,010
So we will have inserted this new person into the database table, but we need to find out what their

240
00:17:07,010 --> 00:17:12,530
ID is and the way that we can do that is actually to come back up here to this connection.

241
00:17:12,530 --> 00:17:18,470
That prepared statement and this method actually has a few overloaded versions, and one of those versions

242
00:17:18,470 --> 00:17:23,210
can take some extra parameters where we can tell it how we want it to behave.

243
00:17:23,510 --> 00:17:29,960
And so if I click on this here, I can actually pass in a constant here, if you'll notice.

244
00:17:30,080 --> 00:17:30,830
Let's see.

245
00:17:30,830 --> 00:17:36,980
Yeah, this third version here takes a sequel as the first parameter and then an integer for the second

246
00:17:36,980 --> 00:17:39,560
parameter of auto generated key.

247
00:17:39,590 --> 00:17:45,920
So we actually want to tell the prepared statement that our statement that we're asking it to execute

248
00:17:46,160 --> 00:17:49,520
is capable of returning a generated key.

249
00:17:49,970 --> 00:17:56,740
And so the way we will do that is by referencing a class called statement dot.

250
00:17:57,350 --> 00:18:01,880
And then this statement class has a bunch of constants defined on it.

251
00:18:02,270 --> 00:18:05,480
And the constant that we're interested in is this one right here?

252
00:18:05,480 --> 00:18:07,130
Return generated keys?

253
00:18:07,760 --> 00:18:08,390
All right.

254
00:18:09,020 --> 00:18:16,730
So now if we want to get our hands on the generated key after we've executed our prepared statement,

255
00:18:16,910 --> 00:18:19,700
I'll put my cursor down here right after we executed that.

256
00:18:20,240 --> 00:18:26,900
So what we can now do is call prepared statement or not get generated keys.

257
00:18:27,230 --> 00:18:31,850
Now notice this method returns a something called a result set.

258
00:18:31,940 --> 00:18:32,410
OK.

259
00:18:32,790 --> 00:18:36,410
And we're going to dig into what all of this means a little bit later.

260
00:18:36,410 --> 00:18:38,660
But let's just get this written real quick here.

261
00:18:39,170 --> 00:18:46,130
Get generated keys, and then let's capture that results, and I'm going to just refer to it as RC.

262
00:18:46,940 --> 00:18:47,360
All right.

263
00:18:47,630 --> 00:18:51,920
Now, I don't know if you remember from the collections module and we learned a little bit about it,

264
00:18:51,920 --> 00:18:52,490
traders.

265
00:18:52,730 --> 00:18:57,710
But when you iterate using an iterator, you must call the next method.

266
00:18:57,710 --> 00:18:59,900
And so this is no different from that.

267
00:19:00,200 --> 00:19:06,260
So the way we'll do that is by calling while RSA Dot next.

268
00:19:08,000 --> 00:19:14,990
And the reason this works this way is because the results set essentially can represent a set of rows.

269
00:19:15,050 --> 00:19:15,560
OK.

270
00:19:15,740 --> 00:19:18,310
And so we're going to essentially be able to iterate over rows.

271
00:19:18,320 --> 00:19:24,230
However, in the case of get generated keys for for our use here, where we're only inserting one record.

272
00:19:24,680 --> 00:19:30,860
There could only be at most one row returned, which would be one road that contains the auto generated

273
00:19:30,860 --> 00:19:33,860
ID for the record that we just inserted.

274
00:19:34,070 --> 00:19:34,490
OK.

275
00:19:35,030 --> 00:19:42,270
So if there is a row in this result set, we'll get to it within this while loop here.

276
00:19:42,290 --> 00:19:50,480
And so then to pull out that generated key, we'll call results set r's dot get.

277
00:19:51,940 --> 00:19:56,260
Now that generated key can be mapped to a long.

278
00:19:57,040 --> 00:19:58,570
And so we'll say get along.

279
00:19:58,720 --> 00:20:02,350
And now notice here we can specify a column index.

280
00:20:02,360 --> 00:20:06,200
So this column index here is similar to the parameter index here.

281
00:20:06,220 --> 00:20:06,640
OK.

282
00:20:07,000 --> 00:20:13,030
In this case, the results said that we would get back would be one row with one column.

283
00:20:13,660 --> 00:20:14,080
OK.

284
00:20:14,110 --> 00:20:17,380
And so we'll call this and then we'll just pass in a one.

285
00:20:17,680 --> 00:20:22,780
In other words, we're saying we want the first column back and then I'm going to capture that with

286
00:20:22,780 --> 00:20:25,750
an option Command V. And I will call it simply.

287
00:20:26,860 --> 00:20:31,450
And then all I need to do now is set that ID on the person class.

288
00:20:31,450 --> 00:20:35,230
So I'm going to call person to set I.D. to ID.

289
00:20:35,500 --> 00:20:42,400
Like so and then we already have this returned person here, so the person will get returned automatically.

290
00:20:42,940 --> 00:20:44,710
And I think that's enough.

291
00:20:44,740 --> 00:20:49,180
Now I know that there's a bunch here that you're probably not really understanding, and I'm going to

292
00:20:49,420 --> 00:20:53,680
do a deeper dive and explain more of this in the next lesson, OK?

293
00:20:53,860 --> 00:20:56,440
But let's just see if we can even get this running.

294
00:20:56,830 --> 00:20:57,130
All right.

295
00:20:57,130 --> 00:21:01,900
So now let's jump back over to our test class.

296
00:21:02,110 --> 00:21:04,090
I'm doing a command shift T..

297
00:21:04,510 --> 00:21:04,810
All right.

298
00:21:04,810 --> 00:21:07,570
So here we are back in the in the in the test class.

299
00:21:08,350 --> 00:21:13,780
And first off, I'm just going to run this one test method and I happen to know this isn't going to

300
00:21:13,780 --> 00:21:16,060
work, but let's see why it doesn't work.

301
00:21:16,240 --> 00:21:18,190
So I'm going to click on that and click Run.

302
00:21:19,340 --> 00:21:20,690
All right, so our test failed.

303
00:21:20,810 --> 00:21:25,790
So if I click on this red can save one person reference here.

304
00:21:27,390 --> 00:21:33,210
OK, so first off, I happen to already be connected to the database, so I'm getting a database may

305
00:21:33,210 --> 00:21:34,680
be already in use.

306
00:21:34,860 --> 00:21:38,460
You may or may not get that depending on whether or not you left the school.

307
00:21:38,910 --> 00:21:41,190
Squirrel client open, but I did.

308
00:21:41,400 --> 00:21:46,830
So I'm going to jump over to the SQL Squirrel client, and I'm just going to click on this little x

309
00:21:46,830 --> 00:21:53,610
here to close out of my connection because of the embedded nature of the way that we're using H2 in

310
00:21:53,610 --> 00:21:54,510
this particular case.

311
00:21:54,510 --> 00:21:56,400
In other words, we're not using it as a server.

312
00:21:56,550 --> 00:21:59,850
We're just using it as like an embedded driver.

313
00:22:00,150 --> 00:22:04,800
You can only have one connection to the database at a time with this mode.

314
00:22:04,920 --> 00:22:10,260
Now, H2 does support other modes of use, though, where you could have multiple connections, but

315
00:22:10,410 --> 00:22:12,300
we're not using those modes at this time.

316
00:22:12,570 --> 00:22:16,760
All right, so I'm going to close that and it asks me, Am I sure I want to close it?

317
00:22:16,770 --> 00:22:17,490
Yes, I am.

318
00:22:17,880 --> 00:22:20,790
And I had some unsaved changes.

319
00:22:20,790 --> 00:22:21,390
That's OK.

320
00:22:21,420 --> 00:22:22,410
I don't need to save them.

321
00:22:22,860 --> 00:22:23,400
All right.

322
00:22:24,450 --> 00:22:25,710
So there's that.

323
00:22:26,070 --> 00:22:27,540
Now I jump back over here.

324
00:22:27,750 --> 00:22:29,130
So let's run that again.

325
00:22:29,250 --> 00:22:32,310
And I think it's still going to fail, but it should feel for a different reason.

326
00:22:32,340 --> 00:22:32,800
All right.

327
00:22:32,820 --> 00:22:37,170
And so now I get this error down here, Piers.

328
00:22:37,170 --> 00:22:45,600
That said timestamp, and it looks like it's pointing at the person that get the method error cannot

329
00:22:45,600 --> 00:22:46,770
find symbol.

330
00:22:47,430 --> 00:22:50,580
And let's see here, people repository.

331
00:22:50,970 --> 00:22:51,180
Yeah.

332
00:22:51,210 --> 00:22:56,580
OK, so the get date of birth method, I never generated it, I guess.

333
00:22:56,820 --> 00:23:06,840
And so jumping over to the person class, apparently I never did actually create a field for the date

334
00:23:06,840 --> 00:23:07,640
of birth.

335
00:23:09,150 --> 00:23:13,560
And therefore, I also never generated getters and setters for the date of birth.

336
00:23:13,590 --> 00:23:14,790
OK, so that's fine.

337
00:23:15,060 --> 00:23:17,070
So here we'll just do this real quick.

338
00:23:17,520 --> 00:23:30,390
Private zoned a time be like so and then we'll go ahead and generate the getters and setters for that.

339
00:23:31,370 --> 00:23:40,260
Command and or right click on empty space for Windows users and getter setter and click, OK.

340
00:23:40,700 --> 00:23:42,180
All right, there we go for that.

341
00:23:42,200 --> 00:23:49,640
And then while we're here, I also see that we allowed the HD to generate this constructor for us while

342
00:23:49,640 --> 00:23:54,050
we were referencing various fields here, but it didn't actually flesh that out.

343
00:23:54,380 --> 00:23:55,830
So now we can flesh that out a bit.

344
00:23:55,850 --> 00:23:59,330
So this dart first name equals first name.

345
00:23:59,660 --> 00:24:03,620
This last name equals last name.

346
00:24:04,160 --> 00:24:07,190
This date of birth equals date of birth.

347
00:24:07,550 --> 00:24:13,220
OK, so now this test might get a little further.

348
00:24:13,490 --> 00:24:18,020
So I'm going to jump back over to the people repository tests here.

349
00:24:18,020 --> 00:24:21,200
People repository tests, by the way.

350
00:24:21,200 --> 00:24:22,530
I just did that with a command.

351
00:24:22,550 --> 00:24:23,660
Oh, right.

352
00:24:23,660 --> 00:24:25,810
And then I just typed pretty.

353
00:24:26,420 --> 00:24:33,860
Yes, right to jump in to here and from here, I'm going to just click on that play button again and

354
00:24:33,860 --> 00:24:35,090
let's see what we get this time.

355
00:24:36,460 --> 00:24:41,110
OK, I'm going to click on this because I don't trust that I see the green here yet.

356
00:24:41,590 --> 00:24:42,170
Click on that.

357
00:24:42,190 --> 00:24:45,280
OK, cool records affected one.

358
00:24:45,520 --> 00:24:51,070
OK, so that's looking like it may have worked to that to that extent.

359
00:24:51,430 --> 00:24:58,510
So now let's jump back over to the sequel client and see if we actually got a John Smith added into

360
00:24:58,510 --> 00:24:59,380
the database.

361
00:24:59,650 --> 00:25:00,660
All right, so here we are.

362
00:25:00,670 --> 00:25:06,130
So I'm going to just double click on this alias for people test and then choose Connect.

363
00:25:06,430 --> 00:25:08,530
And then we'll go over here to the sequel tab.

364
00:25:08,560 --> 00:25:16,210
And then I will just type in, select everything from people and then do a control return.

365
00:25:16,750 --> 00:25:18,790
Or you can click on that little thing there.

366
00:25:20,540 --> 00:25:24,440
And so now I see yep, I see my John Smith.

367
00:25:24,590 --> 00:25:29,270
I happen to have them in here a couple of times because I probably forgot to clear him out from when

368
00:25:29,270 --> 00:25:31,040
I was preparing for this lesson.

369
00:25:31,160 --> 00:25:35,240
So don't worry if you only have one John Smith while I have to.

370
00:25:35,270 --> 00:25:35,990
No big deal.

371
00:25:36,800 --> 00:25:37,190
All right.

372
00:25:37,190 --> 00:25:42,140
But it looks like we did get him in here, and that's the most important thing for right now.

373
00:25:42,530 --> 00:25:43,100
OK.

374
00:25:43,370 --> 00:25:43,700
All right.

375
00:25:43,710 --> 00:25:46,340
So let's do one last thing in this lesson.

376
00:25:46,340 --> 00:25:49,400
Let's go ahead and run both of those tests and see if they happen to work.

377
00:25:49,670 --> 00:25:55,790
Now, before we can run those tests, I need to get back out of this database, right, because I can't

378
00:25:55,790 --> 00:25:56,960
be connected in here.

379
00:25:57,230 --> 00:25:59,720
Yes, I do want to get out and no, I don't want to save.

380
00:26:00,410 --> 00:26:01,850
OK, jump back over to the.

381
00:26:02,630 --> 00:26:03,680
Now let's jump back.

382
00:26:04,010 --> 00:26:10,640
Jump up to the top here and now I can run all of the tests in this class by coming up here and clicking

383
00:26:10,640 --> 00:26:12,700
on the Green Play button for public class.

384
00:26:12,710 --> 00:26:14,870
Don't pay any mind to that little red thing there.

385
00:26:15,020 --> 00:26:17,240
I did something off camera that you didn't see.

386
00:26:17,900 --> 00:26:21,350
All right, so I'm going to run that run people tests.

387
00:26:24,000 --> 00:26:30,270
All right, so I got one that works can save one person, did work, can save two people, did not work.

388
00:26:30,270 --> 00:26:33,120
So let me click on that and see what I got here.

389
00:26:33,540 --> 00:26:36,680
So it was expecting one to not be one.

390
00:26:36,720 --> 00:26:38,640
So let's see here.

391
00:26:40,080 --> 00:26:41,550
We products save.

392
00:26:43,180 --> 00:26:47,770
Repo dad saved John and repo dad, save Bobby.

393
00:26:48,810 --> 00:26:53,940
And then we did a get I.D. is not equal to safe person to get it.

394
00:26:54,090 --> 00:26:56,910
So let's click on this, get ID here and make sure.

395
00:26:58,060 --> 00:26:58,450
Are.

396
00:27:01,970 --> 00:27:08,330
OK, so we hardcoded this ID, right, and we don't want that anymore, right?

397
00:27:09,630 --> 00:27:15,510
So now what we want to do is we want this get ID method to actually return the Real ID, which is what

398
00:27:15,510 --> 00:27:17,270
was originally here in the first place.

399
00:27:17,280 --> 00:27:21,180
So now we can just replace that with the ID.

400
00:27:21,570 --> 00:27:21,930
Right?

401
00:27:22,290 --> 00:27:26,790
And that's why our first test method was passing as far as we know, right?

402
00:27:27,210 --> 00:27:27,480
All right.

403
00:27:27,490 --> 00:27:33,750
So now if we jump back over here to the tests, now, let's run all the tests again.

404
00:27:38,970 --> 00:27:46,110
OK, we are now we've got two green check marks here, and I'm just going to click on this one.

405
00:27:46,500 --> 00:27:49,860
And yeah, all we're seeing here is records affected one.

406
00:27:50,250 --> 00:27:56,190
Now you might think that we might have seen two here instead of one because we actually ended up saving

407
00:27:56,280 --> 00:27:57,150
two people.

408
00:27:57,150 --> 00:28:03,180
But each time we call Save, that saved method is only saving one person at a time.

409
00:28:03,180 --> 00:28:06,780
And that's why we only see, at most one record being affected.

410
00:28:06,930 --> 00:28:08,820
It's one record per save.

411
00:28:08,880 --> 00:28:15,000
OK, but that looks like it actually may be working for us, and we can actually jump back over to the

412
00:28:15,000 --> 00:28:18,600
school squirrel client one more time and reconnect.

413
00:28:20,600 --> 00:28:30,590
Connect and select everything from people and control return, and now I've got plenty of John Smiths

414
00:28:30,590 --> 00:28:35,960
here because I ran those tests a number of times in trying to troubleshoot what wasn't working.

415
00:28:36,380 --> 00:28:40,460
But we've got a baby and we've got a John a couple of times here.

416
00:28:40,670 --> 00:28:43,910
So the inserts are actually working for us.

417
00:28:44,270 --> 00:28:46,460
So let's go ahead and end this lesson.

418
00:28:46,460 --> 00:28:51,710
And in the next lesson, we're going to take an even deeper dive into how all of that is working and

419
00:28:51,710 --> 00:28:55,310
why I made some of the choices that I made and all kinds of good stuff.

420
00:28:55,490 --> 00:28:57,050
So I will see you in the next one.
