1
00:00:00,450 --> 00:00:00,870
All right.

2
00:00:00,900 --> 00:00:07,410
Welcome back, we are finally on to a new chapter, and this chapter is all about a topic called control

3
00:00:07,410 --> 00:00:07,770
flow.

4
00:00:08,040 --> 00:00:13,680
So let's find out a little bit about what is control flow control flow has to do with how our programs

5
00:00:13,680 --> 00:00:18,430
execute and in what order that execution flows, if you will, to understand this.

6
00:00:18,450 --> 00:00:21,540
Let me give you a small imaginary scenario.

7
00:00:21,690 --> 00:00:24,870
So turning to some of the code that we've been working on here.

8
00:00:24,990 --> 00:00:30,300
If you can imagine whenever we start a program, especially a program like the ones that we've been

9
00:00:30,300 --> 00:00:35,250
writing so far in this course that have a public static void main method.

10
00:00:35,820 --> 00:00:41,880
What happens when we start these programs, when we tell Java to execute a class is that Java creates

11
00:00:41,940 --> 00:00:48,930
what you can imagine as being a little guy called thread, and this little guy's job is to visit methods

12
00:00:49,080 --> 00:00:56,580
and execute the lines of code within those methods and to flow, if you will, to flow through those

13
00:00:56,580 --> 00:01:01,480
lines of code in a particular order, usually from top to bottom.

14
00:01:01,500 --> 00:01:07,410
But there can be certain statements that the thread will try to execute, which will cause the thread

15
00:01:07,410 --> 00:01:11,820
to jump to other lines out of the regular flow from top to bottom.

16
00:01:12,480 --> 00:01:18,570
OK, so Thread is a little guy who executes lines of code basically, and in executing those lines of

17
00:01:18,570 --> 00:01:21,450
code, he can be directed as to where he should go next.

18
00:01:21,630 --> 00:01:21,960
OK.

19
00:01:22,020 --> 00:01:30,030
So in a program like this one, when Java creates thread and thread is told to go execute code in this

20
00:01:30,030 --> 00:01:32,360
class in this case, compound interest calc.

21
00:01:32,370 --> 00:01:38,640
The first thing thread is going to do is to look for a public static void main method matching this

22
00:01:38,640 --> 00:01:39,240
signature.

23
00:01:39,630 --> 00:01:45,210
And if he finds one and hasn't been told any other method to execute, this is the default method that

24
00:01:45,210 --> 00:01:46,300
he's going to execute.

25
00:01:46,320 --> 00:01:48,480
I mean, that is how he will enter the program.

26
00:01:48,630 --> 00:01:53,190
And then from there, he's going to start executing lines of code from top to bottom in general, right?

27
00:01:53,400 --> 00:01:59,750
So he's going to request that Java create a new decimal format object in this case.

28
00:01:59,760 --> 00:02:02,790
And then that object will be or a reference to that object will be stored in De'ath.

29
00:02:02,970 --> 00:02:05,970
Then same thing for the second decimal format, which will be stored here.

30
00:02:06,000 --> 00:02:10,740
Then thread would see that we are calling the calculate method.

31
00:02:10,740 --> 00:02:13,470
And so what would actually happen here is that thread himself.

32
00:02:13,500 --> 00:02:14,190
It's a thing, right?

33
00:02:14,190 --> 00:02:21,660
But Thread would then jump into this calculate method, which means that thread after executing Line

34
00:02:21,660 --> 00:02:23,370
27, he'd get to Line 28.

35
00:02:23,460 --> 00:02:26,820
He'd see that he has to jump to the calculate method, which happens to be up here.

36
00:02:26,820 --> 00:02:33,240
And so then thread would actually jump up to Line 13 and then start executing the lines of code in this

37
00:02:33,240 --> 00:02:33,900
method here.

38
00:02:34,020 --> 00:02:39,630
And when thread jumps up here, he would take with him each of these parameters.

39
00:02:39,640 --> 00:02:42,460
Here are arguments that we're passing in to this method, OK?

40
00:02:42,480 --> 00:02:47,700
So he takes those with him and then those get populated or passed in rather to the calculate method.

41
00:02:47,730 --> 00:02:48,060
OK.

42
00:02:48,180 --> 00:02:51,330
And then Thread would start executing each of these lines of code.

43
00:02:51,480 --> 00:02:56,790
Now, for every method that's referenced, thread actually jumps into those lines of code.

44
00:02:56,820 --> 00:02:59,310
So here we are using percent formatter dot pass.

45
00:02:59,430 --> 00:03:02,110
So Thread would actually jump into this method also.

46
00:03:02,310 --> 00:03:02,700
OK.

47
00:03:02,730 --> 00:03:07,680
And Thread would take the value of rate with him, and that would get passed into the pass method.

48
00:03:07,710 --> 00:03:10,350
OK, I'm not going to jump in there because it's not the code that we wrote.

49
00:03:10,500 --> 00:03:15,360
And then when, when, when the pass method returns, this method returns a number, right?

50
00:03:15,480 --> 00:03:21,270
So then this whole thing here would become a number of of a class called number, and then thread would

51
00:03:21,270 --> 00:03:24,650
jump into the two string method of that number object.

52
00:03:24,720 --> 00:03:25,090
OK.

53
00:03:25,110 --> 00:03:30,330
And then he would return from this to string method with a string which would then get stored or reference

54
00:03:30,330 --> 00:03:31,330
to it would get stored here.

55
00:03:31,350 --> 00:03:33,180
So that's actually how threads work, OK?

56
00:03:33,390 --> 00:03:38,700
So I'm not going to go into too much more detail on thread flow right now in this intro, but I just

57
00:03:38,700 --> 00:03:43,380
wanted to make sure that you had a little bit more understanding of what's actually happening when we

58
00:03:43,380 --> 00:03:49,050
are running these programs, because in this chapter, we're going to learn more about controlling that

59
00:03:49,050 --> 00:03:49,410
flow.

60
00:03:49,500 --> 00:03:52,800
And so I hope it helps to actually understand like, well, flow of what?

61
00:03:52,800 --> 00:03:54,330
What flow are we even talking about?

62
00:03:54,570 --> 00:03:55,770
So now you kind of know what the flow is.

63
00:03:55,860 --> 00:03:58,520
One of the thing I will mention, though, this is kind of just maybe coincidental.

64
00:03:58,530 --> 00:03:59,880
I find this kind of interesting.

65
00:04:00,180 --> 00:04:05,580
So in modern times now when you buy a computer, those of you who pay attention to these types of computer

66
00:04:05,580 --> 00:04:06,990
specs may be aware.

67
00:04:06,990 --> 00:04:13,050
One of the specs that is associated with computers these days is how many cores are in the CPU.

68
00:04:13,140 --> 00:04:20,610
You probably hear this term like I have an intel, whatever eight core processor or four core processor

69
00:04:20,610 --> 00:04:21,510
or whatever, right?

70
00:04:21,690 --> 00:04:25,500
Essentially, these cores are actually little processors themselves.

71
00:04:25,510 --> 00:04:30,480
So the thing that we think of as the processor is actually more of a housing for these cores and the

72
00:04:30,480 --> 00:04:33,840
cores themselves are actual processors, micro processors.

73
00:04:34,140 --> 00:04:39,720
And so, you know, some processors processors might have eight cores, some server processors might

74
00:04:39,720 --> 00:04:41,730
have 16, 32, 64 cores.

75
00:04:41,880 --> 00:04:43,530
Crazy numbers, of course, anyway.

76
00:04:43,920 --> 00:04:50,040
One of the characteristics of these cores, though, is that cores enable these little guys, these

77
00:04:50,040 --> 00:04:53,200
little thread guys, to execute simultaneously.

78
00:04:53,220 --> 00:04:59,430
And so in general, the more cores a computer has, the more threads that.

79
00:04:59,520 --> 00:05:02,110
Computer can run simultaneously.

80
00:05:02,130 --> 00:05:07,980
And how that plays out is that in some programs that are written to take advantage of having multiple

81
00:05:07,980 --> 00:05:09,750
threads running simultaneously.

82
00:05:09,930 --> 00:05:14,250
You can imagine that this little thread guy here is going through executing each of these lines.

83
00:05:14,250 --> 00:05:19,920
But if this program were written in such a way to take advantage of multiple threads, you could have

84
00:05:19,920 --> 00:05:26,220
multiple threads executing these lines of code individually or separately, but all at the same time.

85
00:05:26,250 --> 00:05:26,550
Right.

86
00:05:26,640 --> 00:05:31,770
So they don't necessarily know about each other, but they are all able to carry out their instructions

87
00:05:31,770 --> 00:05:33,240
in parallel with each other.

88
00:05:33,360 --> 00:05:37,620
And so there are some kinds of programs that are really good at taking advantage of that fact.

89
00:05:37,680 --> 00:05:38,010
OK.

90
00:05:38,100 --> 00:05:45,180
So I just wanted to kind of help make you aware of the relationship between the control flow, the threads

91
00:05:45,390 --> 00:05:51,960
and your cause and the processor cores or CPU cores in your computer and how they all kind of work with

92
00:05:51,960 --> 00:05:55,050
each other to get things done faster in the computer.

93
00:05:55,110 --> 00:05:59,580
So having said that, let's go ahead and jump in to learning about control flow.

94
00:05:59,610 --> 00:06:00,540
So I'll see you in the next one.
