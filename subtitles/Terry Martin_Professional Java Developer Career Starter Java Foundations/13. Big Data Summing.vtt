WEBVTT
1
00:00:00.120 --> 00:00:07.020
All right, so now you've learned that you can do more with the Dot collect method than just to collect

2
00:00:07.020 --> 00:00:11.100
items from a stream into a collection like a set or a list.

3
00:00:11.310 --> 00:00:16.800
You can also call additional methods like counting and things of that sort.

4
00:00:17.100 --> 00:00:24.420
So in this lesson, the primary thing I want to focus on for right now is the next scenario, which

5
00:00:24.420 --> 00:00:31.320
is let's add up a bunch of numbers across all of the records that are in our very massive data file.

6
00:00:31.950 --> 00:00:34.380
So let me show you what I have in mind here.

7
00:00:34.650 --> 00:00:34.970
All right.

8
00:00:34.980 --> 00:00:44.100
So turning to the spreadsheet here as I scroll through it horizontally, I think there is.

9
00:00:44.100 --> 00:00:44.820
Yes, there it is.

10
00:00:44.820 --> 00:00:47.400
There's a salary column here.

11
00:00:47.430 --> 00:00:48.600
Let me make that a little bigger.

12
00:00:48.630 --> 00:00:54.450
OK, so there's a column for salary and it looks like it has what I guess I would call integers.

13
00:00:54.870 --> 00:00:57.930
There are, at least in this one example, there are no floating points.

14
00:00:58.110 --> 00:01:00.060
I'm pretty sure there aren't any, by the way.

15
00:01:01.290 --> 00:01:08.250
And so what I'm thinking is let's have our code go through all of these salaries for all five million

16
00:01:08.250 --> 00:01:13.470
records and add them up to what will presumably be a really large number, right?

17
00:01:13.500 --> 00:01:14.370
Let's have some fun.

18
00:01:14.910 --> 00:01:20.700
This will give us an opportunity to do some, some more, slightly more real world processing, right?

19
00:01:20.700 --> 00:01:24.480
Because we've got five million records, it's a lot of data to get through.

20
00:01:25.890 --> 00:01:26.180
All right.

21
00:01:26.190 --> 00:01:30.090
So there are a few things that we're going to need to consider here.

22
00:01:30.720 --> 00:01:38.160
One other thing that I want to accomplish with this lesson is I want to shed more light on how to think

23
00:01:38.160 --> 00:01:39.180
like a programmer.

24
00:01:39.720 --> 00:01:47.040
I'm certain, unfortunately, that there will be some percentage of you who are taking this course who

25
00:01:47.040 --> 00:01:53.910
may still not really understand, how do I know to do this step and then that step and then this step

26
00:01:53.910 --> 00:01:54.900
and then that step, right?

27
00:01:55.110 --> 00:02:02.490
So as much as I can, I'm going to try to explain to you what's going on in my head that informs me

28
00:02:02.760 --> 00:02:05.350
to know that I need to do this, that or the other.

29
00:02:05.380 --> 00:02:13.890
OK, now unfortunately, at some low, low level, you will have to just be able to connect dots on

30
00:02:13.890 --> 00:02:15.180
your own when you're programming.

31
00:02:15.180 --> 00:02:20.670
But I'll try to help you to understand the process going on in my mind as much as I can.

32
00:02:20.940 --> 00:02:21.300
All right.

33
00:02:21.990 --> 00:02:29.610
So first off, going back to the ADP, I think temporarily, let's pronounce some of that data again

34
00:02:29.610 --> 00:02:32.950
and a little bit more of a raw form so that we can analyze it.

35
00:02:32.970 --> 00:02:33.420
OK.

36
00:02:33.810 --> 00:02:41.310
So I'm going to comment out these two lines, and maybe I'm going to comment that out as well.

37
00:02:41.310 --> 00:02:47.820
And maybe I'll even put this on its own line so that I can comment that out and then.

38
00:02:50.250 --> 00:02:54.150
We'll go back to let's see to limiting.

39
00:02:54.630 --> 00:03:03.830
I don't know, let's get maybe 10 records and then let's do another 40 just like we did before system

40
00:03:03.840 --> 00:03:06.570
died out print line.

41
00:03:07.090 --> 00:03:09.150
OK, let's see.

42
00:03:09.160 --> 00:03:10.280
So we're only going getting get 10.

43
00:03:10.290 --> 00:03:14.010
Yeah, so let's run this because I just want to see the raw data, right?

44
00:03:14.010 --> 00:03:15.300
Because here's the thing.

45
00:03:15.300 --> 00:03:19.890
So let me tell you my thinking right now, what I have in mind is.

46
00:03:21.090 --> 00:03:29.580
I know that there are five million rows with salary values in them, and I want the program to add these

47
00:03:29.580 --> 00:03:31.050
rows up, right?

48
00:03:31.230 --> 00:03:34.570
So my end goal is to get one number.

49
00:03:34.590 --> 00:03:35.010
OK?

50
00:03:35.130 --> 00:03:39.540
So I think it often helps in programming to think of what your problem is.

51
00:03:39.900 --> 00:03:46.050
Think of the end goal first and then sort of kind of at least mentally or on paper, if it's overly

52
00:03:46.050 --> 00:03:46.740
complicated.

53
00:03:46.980 --> 00:03:50.820
Kind of start with that in goal and then work backward from there.

54
00:03:50.880 --> 00:03:55.830
OK, so let's say that the end result should be a no.

55
00:03:56.340 --> 00:03:58.650
Some really big number.

56
00:03:58.920 --> 00:03:59.340
OK.

57
00:04:00.090 --> 00:04:03.120
That's kind of like the the end goal, right?

58
00:04:03.300 --> 00:04:11.130
So then the question becomes, how do I get that from whatever my starting thing is, right?

59
00:04:12.120 --> 00:04:14.550
So let's look at the start.

60
00:04:14.820 --> 00:04:15.090
All right.

61
00:04:15.090 --> 00:04:16.920
So I ran this program, right?

62
00:04:16.950 --> 00:04:20.970
And it spit out, what, 10, 10 records, right?

63
00:04:21.210 --> 00:04:26.400
So what we're looking at here again is the raw form format of this data.

64
00:04:26.400 --> 00:04:34.440
So just keeping in mind, these are strings that have commas separating each field, right?

65
00:04:35.280 --> 00:04:42.690
And if I scroll through here a bit somewhere in here, there's probably something that, oh, there

66
00:04:42.690 --> 00:04:42.960
it is.

67
00:04:42.960 --> 00:04:45.070
Yeah, there's a field that relates to the salary.

68
00:04:45.090 --> 00:04:49.560
Now I'm just kind of picking that up by right, by by my, by my own.

69
00:04:49.560 --> 00:04:50.220
I right.

70
00:04:50.420 --> 00:04:56.820
And so you know that, you know, we we grabbed a few records here and we pasted them.

71
00:04:56.820 --> 00:04:58.620
In fact, you know what we could do.

72
00:04:58.980 --> 00:05:01.500
We could go ahead and grab a few more.

73
00:05:02.040 --> 00:05:04.290
It certainly won't hurt to do.

74
00:05:05.740 --> 00:05:11.920
And paste a few more into this spreadsheet so that we have a little bit more data just to look at.

75
00:05:12.220 --> 00:05:20.410
Now, mind you, what's happening here is as I just pasted this data, something actually kind of interesting

76
00:05:20.410 --> 00:05:25.030
occurred and you need to be aware of this because we will have to do this programmatically.

77
00:05:25.060 --> 00:05:36.130
OK, so the data that we have here is comma delimited, which means that each field of one line is separated

78
00:05:36.130 --> 00:05:40.150
by commas delimited means separated by essentially.

79
00:05:40.180 --> 00:05:40.630
OK.

80
00:05:41.020 --> 00:05:53.200
And when I copy these lines of comedy limited data and paste them into Excel, Excel happens to be automatically

81
00:05:53.200 --> 00:05:56.650
separating out the values by comma.

82
00:05:56.860 --> 00:06:05.680
So excel, in this case, is smart enough to understand that I probably don't mean to paste one whole

83
00:06:05.680 --> 00:06:09.700
entire line into one cell.

84
00:06:10.030 --> 00:06:13.690
You know, it knows that I'm probably not trying to paste that into one cell.

85
00:06:13.690 --> 00:06:21.040
It knows that probably it should separate all of the individual fields of one line, according to the

86
00:06:21.040 --> 00:06:26.140
commas, and put them in their own in their own cells.

87
00:06:26.200 --> 00:06:26.650
OK.

88
00:06:26.800 --> 00:06:30.220
And so it's doing that for me automatically.

89
00:06:30.340 --> 00:06:30.760
All right.

90
00:06:31.960 --> 00:06:38.230
That's actually a hint as to probably something that we will need to do as programmers.

91
00:06:38.260 --> 00:06:38.620
All right.

92
00:06:38.890 --> 00:06:42.260
So anyway, looking for the salary filled again?

93
00:06:42.280 --> 00:06:42.840
Here it is.

94
00:06:42.850 --> 00:06:43.150
Right?

95
00:06:44.230 --> 00:06:46.690
OK, so we've got this salary filled here.

96
00:06:47.380 --> 00:06:50.140
So if we start with.

97
00:06:51.290 --> 00:06:57.420
Lines that look like this, how do we eventually get to one big number?

98
00:06:57.620 --> 00:07:03.740
Sorry, it's showing it in science or in engineering notation or whatever, but imagine that's one big

99
00:07:03.740 --> 00:07:04.460
number, right?

100
00:07:04.850 --> 00:07:09.830
How do we how do we go from these to this?

101
00:07:10.060 --> 00:07:10.520
OK.

102
00:07:10.880 --> 00:07:14.200
And I'm I apologize if I'm like kind of drawing this out.

103
00:07:14.210 --> 00:07:17.780
I'm just trying to make sure that I'm covering the details for those of you who need it.

104
00:07:17.780 --> 00:07:19.580
For those of you who maybe don't need this.

105
00:07:19.730 --> 00:07:24.850
Feel free to skip ahead or maybe play it back at twice speed if you're not already.

106
00:07:24.860 --> 00:07:32.170
I know I'm a slow talker, but but I want to just make sure that I'm not losing anyone unnecessarily,

107
00:07:32.180 --> 00:07:42.380
so I would think that we'd want to be able to isolate out these values here, right?

108
00:07:42.950 --> 00:07:50.600
Programmatically, excel just did it for us kind of automatically by virtue of the fact that we pasted

109
00:07:50.600 --> 00:07:53.000
all of these values into the spreadsheet.

110
00:07:53.150 --> 00:08:00.890
It has already isolated out this field and by field, I mean, this column, OK, column z or the salary

111
00:08:00.890 --> 00:08:01.430
field?

112
00:08:01.580 --> 00:08:01.990
OK.

113
00:08:02.240 --> 00:08:06.320
It has isolated all the values of this, of this field for us.

114
00:08:07.820 --> 00:08:11.360
So that's that's one cool thing right now.

115
00:08:12.200 --> 00:08:22.280
Let us keep in mind that the nature of these lines of text here is such that programmatically, all

116
00:08:22.280 --> 00:08:26.840
of this data is text or strings, right?

117
00:08:27.080 --> 00:08:35.960
And fundamentally, we cannot do math on strings, so we should know I as a programmer, I'm again,

118
00:08:35.960 --> 00:08:38.240
I'm telling you what's kind of going on in my head.

119
00:08:38.540 --> 00:08:48.020
I, as a programmer, am aware that, OK, I'm going to want to separate out these values somehow so

120
00:08:48.020 --> 00:08:53.420
that I can pinpoint just the salary field values, right?

121
00:08:53.660 --> 00:08:55.910
So I know that I'm going to have to do that somehow.

122
00:08:56.120 --> 00:09:04.850
And then another thing that I know is that when I separate out those values, they are probably going

123
00:09:04.850 --> 00:09:06.950
to initially just be text.

124
00:09:07.310 --> 00:09:13.670
And I know that I want to add up a bunch of numbers, but I can't add up text.

125
00:09:13.880 --> 00:09:18.350
So that means I'm going to have to convert some text to numbers.

126
00:09:18.380 --> 00:09:21.380
Now let me be really clear again and make sure you're with me.

127
00:09:21.500 --> 00:09:23.240
And you know what I'm even talking about?

128
00:09:23.510 --> 00:09:26.750
So let me find the salary data.

129
00:09:28.520 --> 00:09:33.110
There it is, so there's salary data there and there, and probably here.

130
00:09:33.260 --> 00:09:39.230
And I'm just eyeballing this right now, OK, so but if you weren't able to eyeball this easily and

131
00:09:39.230 --> 00:09:40.640
sometimes you won't be able to.

132
00:09:40.850 --> 00:09:47.630
Then again, it's very helpful to copy it and then and then paste it into a spreadsheet so that you

133
00:09:47.630 --> 00:09:51.930
can get everything, separate it out and see what's going on a little more clearly that way.

134
00:09:51.950 --> 00:10:00.200
OK, so let's just imagine that all of these values initially upon separating them out like we have

135
00:10:00.200 --> 00:10:04.440
here, they're still going to just be text and not actual numbers.

136
00:10:04.460 --> 00:10:04.970
OK.

137
00:10:06.390 --> 00:10:11.320
Again, Excel is being pretty smart and hiding a lot of those details from us.

138
00:10:11.330 --> 00:10:18.080
But in our code, these are going to initially be text because that's what we started off with.

139
00:10:18.110 --> 00:10:18.480
OK.

140
00:10:19.430 --> 00:10:26.870
How do I know that, by the way, just to be even more explicit and clear, I know that because that's

141
00:10:26.870 --> 00:10:30.200
what comes out of the datelines method here.

142
00:10:30.320 --> 00:10:37.910
If I hover over this, we can see that it returns a stream of strings, right?

143
00:10:38.180 --> 00:10:40.790
So you can think of that as a stream of text.

144
00:10:41.150 --> 00:10:42.500
That's what comes out of this.

145
00:10:42.510 --> 00:10:45.990
So I know that fundamentally what I'm dealing with is text.

146
00:10:46.010 --> 00:10:46.490
All right.

147
00:10:46.490 --> 00:10:50.720
So I'm going to need to do some kind of conversion.

148
00:10:50.730 --> 00:10:53.180
So all right now, I don't want to go any further.

149
00:10:53.190 --> 00:10:54.680
Let me not go any further right now.

150
00:10:54.690 --> 00:10:59.690
Let's just stop right here, and maybe we can actually write a little code, OK to kind of go through

151
00:10:59.690 --> 00:10:59.850
this.

152
00:10:59.870 --> 00:11:03.200
So the first step is I'm going to need to take.

153
00:11:04.510 --> 00:11:14.290
Each of these lines of text and break them apart by fields into fields, according to the commas.

154
00:11:14.740 --> 00:11:19.870
Now we've learned how to do that long ago in one of the previous modules.

155
00:11:20.380 --> 00:11:26.920
You might be forgiven if you have forgotten about this, but here's where another aspect of being of

156
00:11:26.920 --> 00:11:29.920
being an actual real world programmer comes up.

157
00:11:30.400 --> 00:11:36.280
You're going to have to remember, not the details of how to do each and every little thing, but you

158
00:11:36.280 --> 00:11:43.180
will have to be able to remember, generally speaking, what can be done right, like what kinds of

159
00:11:43.180 --> 00:11:45.220
operations are possible.

160
00:11:45.730 --> 00:11:54.700
I happen to remember that it is possible to take a string of text like we have here that has a recurring

161
00:11:54.700 --> 00:12:02.680
pattern, such as these commas and split that string into a bunch of smaller strings wherever those

162
00:12:02.680 --> 00:12:03.730
commas exist.

163
00:12:03.760 --> 00:12:08.890
That's something that I just happen to remember in my case, because I've been programming so long.

164
00:12:08.980 --> 00:12:12.400
I know that's a really common operation to need to be able to do.

165
00:12:13.840 --> 00:12:20.590
So you're going to have to just remember, you know, what kinds of things are possible?

166
00:12:20.620 --> 00:12:26.950
You don't necessarily have to remember what that method is called or how to do it.

167
00:12:27.130 --> 00:12:33.310
But you need to be able to remember that there is some some kind of way that you can take a string and

168
00:12:33.310 --> 00:12:33.910
split it.

169
00:12:33.940 --> 00:12:34.360
OK.

170
00:12:35.650 --> 00:12:40.090
If you can just remember that much, then you can always go to Google and Google.

171
00:12:40.750 --> 00:12:41.350
How to split.

172
00:12:41.350 --> 00:12:42.160
In fact, you know what?

173
00:12:42.190 --> 00:12:44.140
I'm going to do that in front of you right now.

174
00:12:44.140 --> 00:12:48.310
Let's pretend like I don't remember what the method is or anything like that because this is pretty

175
00:12:48.310 --> 00:12:48.980
realistic.

176
00:12:49.000 --> 00:12:53.530
And sometimes I do forget how to do even some of the techniques that I've taught in this course.

177
00:12:53.710 --> 00:12:56.680
I don't always remember every detail of how to do them all.

178
00:12:57.280 --> 00:13:02.650
OK, so here I've opened up a new web browser and I'm just going to search.

179
00:13:04.360 --> 00:13:05.650
I'm going to say Java.

180
00:13:07.300 --> 00:13:09.580
Set separate.

181
00:13:13.170 --> 00:13:13.980
String.

182
00:13:15.470 --> 00:13:16.100
By.

183
00:13:17.990 --> 00:13:18.830
Commas.

184
00:13:21.170 --> 00:13:24.330
And let's see Stack Overflow, so if you're not familiar.

185
00:13:24.350 --> 00:13:32.660
Stack Overflow is probably the most famous, the most popular programmer website resource where people

186
00:13:32.660 --> 00:13:34.400
just ask questions, How do I do this?

187
00:13:34.400 --> 00:13:35.060
How do I do that?

188
00:13:35.360 --> 00:13:37.070
Everybody goes the stack overflow.

189
00:13:37.070 --> 00:13:41.090
So if that's the first thing that comes up in your search results, you might not want to skip over

190
00:13:41.090 --> 00:13:41.240
it.

191
00:13:41.420 --> 00:13:46.700
That's probably a good place to start to find answers, and it looks like someone asked, in fact,

192
00:13:46.700 --> 00:13:49.190
how to split a comma separated string.

193
00:13:49.310 --> 00:13:53.150
So that sounding pretty pretty, you know, like like what we want.

194
00:13:53.480 --> 00:13:54.860
So if I click on that?

195
00:13:56.820 --> 00:13:57.310
Let's see.

196
00:13:57.330 --> 00:14:02.310
So someone says I have a string with an unknown length and looks something and looks something like

197
00:14:02.310 --> 00:14:05.340
this dog comma cat come a bear, blah blah blah.

198
00:14:06.420 --> 00:14:13.080
What would be the optimal way to divide this string at the commas so each word could become an element

199
00:14:13.890 --> 00:14:14.930
of an array list?

200
00:14:14.970 --> 00:14:18.030
OK, now they're getting a little ahead of themselves, in my opinion.

201
00:14:18.030 --> 00:14:24.350
But but the basic question is the same thing that I think we're wanting to be able to do, right?

202
00:14:24.360 --> 00:14:26.970
How do we split this at the commas, right?

203
00:14:27.180 --> 00:14:32.460
And so if you come down here, usually the in the answers section here, the very first one is usually

204
00:14:32.460 --> 00:14:36.600
the the most well accepted answer.

205
00:14:37.050 --> 00:14:38.760
So let's see what they say here.

206
00:14:38.790 --> 00:14:44.670
So basically, the dot split method will split the string according to, in this case, the limiter

207
00:14:44.850 --> 00:14:48.570
you are passing and will return an array of strings.

208
00:14:50.010 --> 00:14:52.030
So let's make note of that now.

209
00:14:52.050 --> 00:14:58.170
It says that it will return an array of strings, and this might be familiar to those of you who remember

210
00:14:58.350 --> 00:14:59.370
when I taught this.

211
00:14:59.370 --> 00:15:02.280
But again, we're pretending like we don't know any of this, right?

212
00:15:04.820 --> 00:15:09.920
So then the next thing you'd want to look out for is an example of where it's being utilized, and if

213
00:15:09.920 --> 00:15:11.330
you blink, you might miss it.

214
00:15:11.630 --> 00:15:14.930
So he's showing he or she is showing an example here.

215
00:15:15.140 --> 00:15:21.680
Now they've convoluted it a tiny bit by mixing in a couple of things that the person who asked the question

216
00:15:21.680 --> 00:15:22.250
wanted.

217
00:15:22.550 --> 00:15:26.060
They wanted to know how to split it and then how to get it into an array list, right?

218
00:15:26.240 --> 00:15:32.630
And so the and the person answering the question is showing that here he's showing that we have a string.

219
00:15:32.780 --> 00:15:34.510
He's showing that here, by the way, right?

220
00:15:34.520 --> 00:15:36.860
He's saying, OK, let's pretend like you've got a string.

221
00:15:37.070 --> 00:15:41.270
So if you're not real comfortable with programming, you might have missed this because you may have

222
00:15:41.270 --> 00:15:45.720
been looking for something that looked more like the original question.

223
00:15:45.740 --> 00:15:46.850
In the example?

224
00:15:46.880 --> 00:15:51.680
OK, now that I don't know that I can really help you with other than to say, well, you know that

225
00:15:51.680 --> 00:15:53.150
they're asking about a string.

226
00:15:53.360 --> 00:15:56.720
And so the person answering the question is showing a snippet of code.

227
00:15:56.870 --> 00:16:00.410
And so you want to really make sure you're paying attention to what's in that snippet of code.

228
00:16:00.590 --> 00:16:02.930
So here he's creating a variable of type string.

229
00:16:03.140 --> 00:16:05.990
Now here he's skipping over the details because he doesn't care.

230
00:16:06.020 --> 00:16:06.250
Right?

231
00:16:06.260 --> 00:16:08.330
He's saying, Let's say you have a string, right?

232
00:16:08.930 --> 00:16:14.240
And then down here he's saying now, the guy who asked the question said ultimately, they want to go

233
00:16:14.240 --> 00:16:18.980
from a string with comma separated values to a list of strings, right?

234
00:16:18.990 --> 00:16:20.540
So here's the list of strings.

235
00:16:20.930 --> 00:16:32.060
Here he is saying like, I'm going to create a list from I'm going to create a list from this erase

236
00:16:32.060 --> 00:16:33.050
class here.

237
00:16:33.260 --> 00:16:39.170
For our purposes, we can mostly skip over this part, but here's where he's referring to that string.

238
00:16:39.380 --> 00:16:44.660
And here he's calling the dot split method, and he's saying split on the commas.

239
00:16:44.930 --> 00:16:47.480
Now, hopefully this is enough to trigger.

240
00:16:47.960 --> 00:16:53.930
Oh yeah, I remember when Terry taught, you know, something about splitting text or strings, using

241
00:16:53.930 --> 00:16:58.380
the split method and passing in the character that you want to use to split on.

242
00:16:58.400 --> 00:17:03.530
So sorry, if I'm again, I'm sorry if I'm being overly long winded here, I just want to really be

243
00:17:03.530 --> 00:17:05.870
explicit for those of you who really need this help.

244
00:17:07.130 --> 00:17:16.340
So the key here is to use the split method of the string class now, now that we've learned that if

245
00:17:16.340 --> 00:17:23.270
we jump back over here, now we know what what we can do, we can call split on each of these strings

246
00:17:23.630 --> 00:17:27.760
and the split method is going to return an array of strings.

247
00:17:27.770 --> 00:17:28.580
How do I know that?

248
00:17:28.730 --> 00:17:30.950
Well, I know that because I happen to actually know it.

249
00:17:31.100 --> 00:17:33.620
But also it was mentioned down here.

250
00:17:34.220 --> 00:17:39.020
Basically, the split method will split the string, according to, in this case, the limiter you are

251
00:17:39.020 --> 00:17:42.470
passing and we'll return an array of strings.

252
00:17:42.710 --> 00:17:48.410
OK, so now that we know that, what can we do with that here?

253
00:17:49.190 --> 00:17:50.370
Well, let's see.

254
00:17:50.390 --> 00:17:58.160
So currently we're skipping and we're limiting, and we're so maybe what we can do is after we do this

255
00:17:58.160 --> 00:18:01.130
limit, maybe let's put a new line here.

256
00:18:02.360 --> 00:18:06.540
And so we're we're going to our R.

257
00:18:06.600 --> 00:18:13.670
So our streams API pipeline is going to receive each of these lines one at a time.

258
00:18:13.670 --> 00:18:14.720
Or at least you can think of it.

259
00:18:14.730 --> 00:18:15.410
Is that right?

260
00:18:15.740 --> 00:18:24.860
And so we're going to want to convert one of these whole entire lines, maybe into an array of strings

261
00:18:25.070 --> 00:18:29.600
where each element of the array contains each field.

262
00:18:29.660 --> 00:18:29.990
Right?

263
00:18:30.140 --> 00:18:38.540
And so going back over here to excel, you can really think of each row as being an array.

264
00:18:38.930 --> 00:18:39.290
OK?

265
00:18:39.380 --> 00:18:46.190
You could actually in fact, you could think of the entire dataset as a two dimensional array, but

266
00:18:46.190 --> 00:18:47.560
that's not what we're going to do here.

267
00:18:47.570 --> 00:18:50.900
We're going to stick to just simple one dimensional arrays, right?

268
00:18:50.920 --> 00:18:59.690
So each row could be thought of as one array and then each element in the array is each cell.

269
00:18:59.900 --> 00:19:00.410
OK.

270
00:19:01.250 --> 00:19:08.840
And that enables us to be able to separate out the values and then access in the individual parts of

271
00:19:08.840 --> 00:19:11.680
the array very easily using an index.

272
00:19:11.750 --> 00:19:12.140
Right?

273
00:19:13.200 --> 00:19:13.490
OK.

274
00:19:13.490 --> 00:19:15.920
So so let's try that.

275
00:19:16.160 --> 00:19:22.790
So when we want to convert from one data type to another data type using the streams API, how can we

276
00:19:22.790 --> 00:19:23.300
do that?

277
00:19:23.510 --> 00:19:24.290
Do you remember?

278
00:19:25.840 --> 00:19:33.170
OK, so to convert from one day to type to another in the streams API, we use the dot map method.

279
00:19:33.190 --> 00:19:33.520
Right?

280
00:19:33.550 --> 00:19:34.390
That's what that does.

281
00:19:34.390 --> 00:19:37.480
It maps one data type to another data type.

282
00:19:37.810 --> 00:19:44.380
So we'll we'll do a dot map and then we need to pass in a function.

283
00:19:44.590 --> 00:19:50.320
And a function is simply a an interface that defines one method on it.

284
00:19:50.470 --> 00:19:54.310
And that method takes one input and returns one output.

285
00:19:54.340 --> 00:19:54.790
OK.

286
00:19:55.090 --> 00:19:57.490
So we can implement that with a lambda.

287
00:19:58.780 --> 00:20:02.570
So what are the things that are going to be input into here where it's going to?

288
00:20:02.640 --> 00:20:06.900
Well, it's going to be strings because that's what's coming out of the dot lines method.

289
00:20:06.910 --> 00:20:10.800
It's it's spitting out a stream of strings, right?

290
00:20:11.140 --> 00:20:16.960
And the method or the lambda expression that we're going to pass in here is going to be expecting to

291
00:20:16.960 --> 00:20:19.810
receive one string at a time.

292
00:20:20.020 --> 00:20:20.410
OK.

293
00:20:20.800 --> 00:20:29.230
So a method that would that would take a string will refer to that as s and then that'll map to.

294
00:20:29.560 --> 00:20:33.940
Now we want to call the split method of the string class.

295
00:20:33.940 --> 00:20:35.620
So we know that is a string.

296
00:20:35.830 --> 00:20:38.620
And so we can call S Dot.

297
00:20:42.240 --> 00:20:42.640
S.

298
00:20:43.730 --> 00:20:45.920
S Dot split.

299
00:20:47.130 --> 00:20:47.730
There we go.

300
00:20:48.180 --> 00:20:49.200
And then we can just.

301
00:20:50.340 --> 00:20:53.680
Pass in a string of a comma, right?

302
00:20:53.700 --> 00:20:57.540
Telling it a split on commas.

303
00:20:58.770 --> 00:21:05.220
And so now what's going to come out of this is going to be a stream of string arrays.

304
00:21:05.310 --> 00:21:05.820
OK.

305
00:21:06.210 --> 00:21:09.780
So basically, you can just think string arrays.

306
00:21:09.870 --> 00:21:16.170
And again, going back over to excel, just think of each of these lines now as being an array.

307
00:21:16.200 --> 00:21:18.270
And we have many of them, right?

308
00:21:18.750 --> 00:21:21.240
So that's so that's how you can think of it, right?

309
00:21:21.240 --> 00:21:24.900
You're going to get back these separated out arrays, right?

310
00:21:26.250 --> 00:21:28.320
Each row is an array.

311
00:21:28.470 --> 00:21:28.940
OK.

312
00:21:29.130 --> 00:21:31.200
It's going to be its own array.

313
00:21:32.460 --> 00:21:33.450
All right, so we're getting.

314
00:21:35.170 --> 00:21:38.110
We're getting a stream of arrays coming out of here.

315
00:21:38.980 --> 00:21:40.690
And now what would we want to do?

316
00:21:40.990 --> 00:21:43.660
Well, again, let's take a look at the spreadsheet.

317
00:21:43.870 --> 00:21:46.960
So ultimately, we want to get at these values here.

318
00:21:47.290 --> 00:21:48.880
So how can we do that now?

319
00:21:49.060 --> 00:21:52.120
So let's imagine if we've got one array.

320
00:21:53.410 --> 00:21:59.860
With values that look like this and we're trying to get just the salary, how can we do that programmatically?

321
00:22:00.130 --> 00:22:06.310
So for that, you need to know how to access individual elements of an array, right?

322
00:22:06.850 --> 00:22:10.380
And so again, if you didn't remember how to do that, you could always google it.

323
00:22:10.390 --> 00:22:15.010
I don't think I want to go quite that far down the rabbit hole of Googling, but you could if you didn't

324
00:22:15.010 --> 00:22:20.650
remember how to access an element of an array right now.

325
00:22:20.770 --> 00:22:27.040
One thing to note when you do remember how to access the elements of an array, you're going to realize

326
00:22:27.040 --> 00:22:31.150
that to do so, you have to pass in an index number, right?

327
00:22:31.420 --> 00:22:39.430
So with arrays, each element of the array has an index number starting with zero.

328
00:22:39.640 --> 00:22:46.780
So this first element here or this first field or whatever you want to call it, would be index zero

329
00:22:46.930 --> 00:22:52.000
and then one and then two and then three and then four and so on, right?

330
00:22:52.150 --> 00:22:59.440
So we need to know beforehand what is the index of the salary column?

331
00:22:59.770 --> 00:23:03.400
And one nice, easy way to do that without having to explicitly count.

332
00:23:03.580 --> 00:23:12.010
If you do have a spreadsheet program like Excel is that you could just select a few examples of the

333
00:23:12.010 --> 00:23:13.390
numbers here that I have here.

334
00:23:13.570 --> 00:23:20.260
And then you can click on that little that little green square there and the cursor turns into a black

335
00:23:21.070 --> 00:23:30.400
plus sign or cross sign, and then you can drag that to the left and excel auto number, according to

336
00:23:30.400 --> 00:23:32.740
the pattern that we've already established there.

337
00:23:32.750 --> 00:23:35.650
So I'm just going to keep dragging this to the end.

338
00:23:39.440 --> 00:23:40.340
Like so.

339
00:23:41.500 --> 00:23:47.140
And Bam, it just auto numbered all of the rest of those cells or columns for us.

340
00:23:47.380 --> 00:23:53.890
And so now if I go back and find the salary column, I can see that the salary column is going to be

341
00:23:53.890 --> 00:23:54.430
indexed.

342
00:23:54.430 --> 00:23:55.480
Twenty five.

343
00:23:55.570 --> 00:23:57.310
OK, so I need to remember that.

344
00:23:57.700 --> 00:24:00.100
So now if I go back over here to the code.

345
00:24:04.440 --> 00:24:14.670
What I want to do now is to convert each array of strings into just one value, and that one value will

346
00:24:14.670 --> 00:24:18.210
be just the salary value for that array.

347
00:24:18.270 --> 00:24:18.500
Right.

348
00:24:18.510 --> 00:24:22.380
So I just want the one value I don't care about the whole entire array.

349
00:24:22.530 --> 00:24:26.700
Now there are actually multiple ways that I could do this, but I think maybe for now, it's best that

350
00:24:26.700 --> 00:24:33.420
I just show you the very explicit steps broken out in line by line so that it's easier to follow.

351
00:24:33.450 --> 00:24:33.830
OK.

352
00:24:34.290 --> 00:24:36.720
So I want to convert.

353
00:24:36.840 --> 00:24:37.800
That's the key word there.

354
00:24:37.800 --> 00:24:47.640
I want to convert from a string array to just one string, which is the salary value itself, right?

355
00:24:47.790 --> 00:24:52.680
So because I'm wanting to convert, I can just do another mapping, right?

356
00:24:53.160 --> 00:24:57.630
So I could just do another line and do map again.

357
00:24:57.960 --> 00:25:03.840
Now, this time I'm going to take as an input, a string array and is showing me that here now that

358
00:25:03.840 --> 00:25:07.950
I've started up and another the next step in the pipeline, right?

359
00:25:08.130 --> 00:25:13.920
So the output or so what's going to come into here is going to be a string array.

360
00:25:13.950 --> 00:25:14.370
OK.

361
00:25:14.490 --> 00:25:21.900
So I'm going to use another lambda here, and I'm going to refer to my input as air for array.

362
00:25:22.200 --> 00:25:26.310
Again, you know, we can call these things anything, but I would advise you to name them something

363
00:25:26.310 --> 00:25:27.870
that's meaningful in your head.

364
00:25:28.500 --> 00:25:28.830
All right.

365
00:25:28.830 --> 00:25:30.420
And then the Arrow operator.

366
00:25:30.420 --> 00:25:32.910
And so what I'm dealing with here is an actual array.

367
00:25:33.120 --> 00:25:40.110
So the way to access one element of an array is to refer to the array and then use a square bracket

368
00:25:40.110 --> 00:25:41.940
and then an index, right?

369
00:25:42.330 --> 00:25:52.110
So in this case, my index is twenty five and now I'm actually accessing the salary field of one array.

370
00:25:52.260 --> 00:25:59.620
Which is to say, if I go back over here, I'm accessing one value this value here or whatever value,

371
00:25:59.620 --> 00:25:59.850
right?

372
00:25:59.850 --> 00:26:01.890
Just one of them, though from.

373
00:26:02.900 --> 00:26:04.410
One row.

374
00:26:04.700 --> 00:26:09.620
OK, so again, one row in the spreadsheet is equivalent to one array.

375
00:26:10.130 --> 00:26:10.570
All right.

376
00:26:10.820 --> 00:26:16.940
One cell in one row is equivalent to one element of an array.

377
00:26:17.390 --> 00:26:22.640
And I am wanting index 25 of each array.

378
00:26:23.040 --> 00:26:25.550
OK, which will give me the salary.

379
00:26:26.210 --> 00:26:26.630
All right.

380
00:26:26.870 --> 00:26:35.000
Now, the next thing for me to note is the fact that, as I said earlier, each of these values in our

381
00:26:35.000 --> 00:26:40.070
program at this step will be taxed and we can't do math on text.

382
00:26:40.490 --> 00:26:43.670
We will need to convert these values into numbers.

383
00:26:44.030 --> 00:26:45.650
Right now.

384
00:26:45.680 --> 00:26:52.730
I'm going to just tell you just this is just my own intuition as a programmer, knowing that there are

385
00:26:52.730 --> 00:26:55.970
five million records that we are about to add.

386
00:26:56.540 --> 00:27:07.010
I think probably the best data type to use in this case might actually be a long versus an integer.

387
00:27:07.280 --> 00:27:13.940
I think it's possible that each of the individual salaries may be fine being represented as integers.

388
00:27:14.210 --> 00:27:20.600
But when we add them all up, we're going to need a data type, a numerical data type that is wide enough

389
00:27:20.870 --> 00:27:24.350
to support a really potentially large number.

390
00:27:24.530 --> 00:27:27.950
And so I'm thinking, maybe we just start with a long now.

391
00:27:27.950 --> 00:27:29.270
That's just my intuition.

392
00:27:29.270 --> 00:27:30.190
I could be wrong.

393
00:27:30.200 --> 00:27:32.750
Maybe an integer would be big enough, but I'm pretty sure it won't be.

394
00:27:33.560 --> 00:27:34.010
All right.

395
00:27:34.040 --> 00:27:36.290
So keeping that in mind?

396
00:27:38.240 --> 00:27:41.000
I want to now convert this string.

397
00:27:42.580 --> 00:27:53.590
To a number, and like I just said, probably a long, by the way, if there were if there were decimal

398
00:27:53.590 --> 00:27:58.680
points in here, then I'd want to use a double and I could use a double even now.

399
00:27:58.690 --> 00:28:01.480
But I'm thinking long might be sufficient.

400
00:28:02.860 --> 00:28:03.170
All right.

401
00:28:03.190 --> 00:28:11.500
So again, it looks like I'm doing another conversion, I'll be converting from a string to a long so

402
00:28:12.250 --> 00:28:19.480
I could come down here and do another map and maybe I will use SSL for salary.

403
00:28:21.110 --> 00:28:26.480
And so now I want to convert that string into a long.

404
00:28:26.840 --> 00:28:28.400
Now this should be easy, right?

405
00:28:28.430 --> 00:28:29.540
Do you remember how to do this?

406
00:28:30.320 --> 00:28:36.410
You can actually just use the static methods on the wrapper class of the numerical type that we're talking

407
00:28:36.410 --> 00:28:36.620
about.

408
00:28:36.630 --> 00:28:42.140
So since we're wanting to convert this into lungs, then we can use the wrapper class of lung, which

409
00:28:42.140 --> 00:28:48.740
has a bunch of convenience methods on it, a bunch of static methods on it, one of which is pass lung.

410
00:28:50.210 --> 00:28:52.010
And it takes as an input, a string.

411
00:28:52.280 --> 00:28:54.030
And that's what we have here, salary.

412
00:28:54.860 --> 00:28:58.760
And then it spits out a a primitive long.

413
00:28:59.060 --> 00:28:59.420
Right?

414
00:28:59.900 --> 00:29:01.190
So pass long.

415
00:29:03.530 --> 00:29:03.920
Fell.

416
00:29:04.760 --> 00:29:05.570
Oh, OK.

417
00:29:05.600 --> 00:29:10.910
And I forgot to close my my parentheses on the line up above.

418
00:29:11.780 --> 00:29:12.320
There we go.

419
00:29:13.310 --> 00:29:13.730
OK.

420
00:29:14.990 --> 00:29:20.360
So now we're mapping the string salaries to.

421
00:29:21.410 --> 00:29:23.240
A numerical salary.

422
00:29:23.750 --> 00:29:24.080
Right?

423
00:29:25.370 --> 00:29:30.050
And now finally, I think we might be just about ready to do some additions now.

424
00:29:30.590 --> 00:29:39.320
So at this point, let's get back to using the collect method so that I can show you how to do that.

425
00:29:39.530 --> 00:29:43.880
So I'm going to delete this for each and let's uncomment this line.

426
00:29:45.140 --> 00:29:45.590
All right.

427
00:29:46.220 --> 00:29:50.600
So now, instead of counting, we don't want to do that.

428
00:29:51.080 --> 00:29:53.630
We want to do well.

429
00:29:53.630 --> 00:29:54.370
Let's just see here.

430
00:29:54.380 --> 00:29:57.980
So I'm putting my cursor after this period and I'm going to do a controlled space.

431
00:29:58.370 --> 00:30:03.410
And I think we want to do exactly what this method right here says, summing long.

432
00:30:05.070 --> 00:30:12.660
So that looks and sounds like it should enable us to add a stream of lungs.

433
00:30:12.690 --> 00:30:20.880
Right now, it takes an input of a function, though, and this function should be something that takes

434
00:30:20.880 --> 00:30:23.760
an input and spits out a lung.

435
00:30:23.940 --> 00:30:25.230
OK, now how do I know that?

436
00:30:25.350 --> 00:30:29.400
Well, we can actually go, look at this, this interface to lung function.

437
00:30:29.400 --> 00:30:37.590
So if I do a command of two lung function, every we go, I can open this guy up and I see here that

438
00:30:37.590 --> 00:30:44.280
the one and only method that's in it takes a generic data type, which means it could be just about

439
00:30:44.280 --> 00:30:48.210
anything as an input, but spits out a long.

440
00:30:48.420 --> 00:30:49.350
And that's a hint.

441
00:30:49.590 --> 00:30:53.610
Now, as a programmer, that's got me thinking of a few other things that I'm going to explain in just

442
00:30:53.610 --> 00:30:54.300
a moment here.

443
00:30:55.650 --> 00:31:06.210
All right, so I need to pass in a method or a lambda expression that will take an input of just about

444
00:31:06.210 --> 00:31:09.810
any type, it looks like, but spit out a long.

445
00:31:10.050 --> 00:31:13.410
Now the interesting thing here is I already have lungs, right?

446
00:31:13.890 --> 00:31:18.030
So let me show you one thing that I could do here.

447
00:31:18.210 --> 00:31:18.830
I just need.

448
00:31:19.200 --> 00:31:23.190
So since I already have lungs, I don't really need to do any conversions, right?

449
00:31:23.340 --> 00:31:28.980
But I do have to pass in a method still that will spit out a lung for whatever is input.

450
00:31:29.160 --> 00:31:34.950
So one thing I could conceivably do is write a lambda that just read that takes an input and then just

451
00:31:34.950 --> 00:31:36.630
returns that same input, right?

452
00:31:36.630 --> 00:31:46.140
So I could do something like salary maps to salary that that would that would suffice right there,

453
00:31:46.290 --> 00:31:51.290
though it does seem a little weird to me because it's not bringing any value at all, right?

454
00:31:51.300 --> 00:31:53.100
It's just like a pass through method.

455
00:31:53.340 --> 00:32:01.560
Take this number and then spit back out that same number again, just so that I can satisfy the the

456
00:32:01.560 --> 00:32:04.620
the input for this summing long method here.

457
00:32:05.190 --> 00:32:10.320
Now, another thing that I could do that just came to mind, since this method is allowing me to pass

458
00:32:10.320 --> 00:32:12.570
in any data type at all.

459
00:32:12.930 --> 00:32:18.990
What I'm sort of thinking here is, well, maybe what I'm doing on this mapping here could actually

460
00:32:18.990 --> 00:32:20.850
just be done down here, right?

461
00:32:21.640 --> 00:32:29.280
And so in other words, this something long method here, in addition to adding up all of the all of

462
00:32:29.280 --> 00:32:35.460
the values, it's actually allowing us to potentially do a conversion right here, right?

463
00:32:35.910 --> 00:32:42.420
So I could conceivably just grab all of this, in fact.

464
00:32:43.430 --> 00:32:49.730
I guess what I could conceivably do is just grab this entire lambda right here and use that.

465
00:32:50.740 --> 00:32:52.630
As the input here.

466
00:32:54.340 --> 00:32:56.110
And now I don't need.

467
00:32:57.810 --> 00:32:58.860
Line 20.

468
00:33:01.040 --> 00:33:06.650
Right, yeah, and I don't have any errors, right, so it looks like it's perfectly fine with me doing

469
00:33:06.650 --> 00:33:06.980
that.

470
00:33:07.310 --> 00:33:08.360
Does that make sense?

471
00:33:08.570 --> 00:33:13.520
I just saw, you know, like we had that one method that wasn't doing anything other than just passing

472
00:33:13.520 --> 00:33:15.800
back out what it took in as input.

473
00:33:15.980 --> 00:33:17.870
So there was no point to that, right?

474
00:33:18.140 --> 00:33:22.310
Other than to just satisfy the signature of the summing long method itself.

475
00:33:22.790 --> 00:33:27.290
So we just did a minor consolidation there.

476
00:33:27.590 --> 00:33:33.560
OK, so now that we've got that, I think we can go ahead and capture the results of it.

477
00:33:33.560 --> 00:33:34.070
So.

478
00:33:34.360 --> 00:33:37.340
So let me uncomment Line 14.

479
00:33:38.650 --> 00:33:40.540
And then join these lines back up.

480
00:33:42.290 --> 00:33:48.950
Like so and so now we're capturing the output of this and one of the thing to note now the Dot collect

481
00:33:48.950 --> 00:33:52.460
method to return type is highly dynamic.

482
00:33:52.670 --> 00:33:55.340
It's based on the return type of the internal collector.

483
00:33:55.610 --> 00:34:01.670
So since this something long is ultimately working to essentially return along.

484
00:34:02.090 --> 00:34:07.910
Basically, that's essentially what you're going to get out of this collector out of this collect method

485
00:34:07.910 --> 00:34:08.900
in this case.

486
00:34:08.960 --> 00:34:09.290
Right?

487
00:34:10.280 --> 00:34:10.660
All right.

488
00:34:10.670 --> 00:34:20.690
So we're capturing that result and then I can uncomment this and let's go ahead and run it and see if

489
00:34:20.690 --> 00:34:21.640
anything blows up.

490
00:34:21.650 --> 00:34:26.800
Oh, now one thing now I'm limiting currently to 10, so I don't want to do that limiting anymore.

491
00:34:26.810 --> 00:34:27.920
Let's just this.

492
00:34:27.920 --> 00:34:33.020
Just go to town on this guy and get it all added up and see what kind of crazy number we get.

493
00:34:35.340 --> 00:34:40.050
All right, now, you won't be aware of this because I'm going to edit out long pauses and things,

494
00:34:40.050 --> 00:34:42.330
but that actually took a little while to run.

495
00:34:43.680 --> 00:34:44.040
I don't know.

496
00:34:44.040 --> 00:34:49.260
I wasn't really counting, but it was probably somewhere around 10 seconds, maybe even 15 seconds for

497
00:34:49.260 --> 00:34:51.120
that to to do its thing.

498
00:34:51.750 --> 00:34:57.720
So that's something to be aware of just in terms of, yeah, when you're doing this kind of processing

499
00:34:57.720 --> 00:35:03.690
on millions of records, it's going to take a little bit of time, but we've got a number now.

500
00:35:04.350 --> 00:35:06.510
We could format this and make it look prettier.

501
00:35:06.540 --> 00:35:07.800
Do you remember how to do that?

502
00:35:07.800 --> 00:35:11.610
And if you don't, you could Google for it, right?

503
00:35:11.610 --> 00:35:13.260
Java format?

504
00:35:13.650 --> 00:35:15.720
No money, right?

505
00:35:15.720 --> 00:35:16.920
You could do something like that.

506
00:35:17.220 --> 00:35:23.220
Now the way I'm going to do this right now so that I don't have to do too much is I'm going to format

507
00:35:23.220 --> 00:35:25.040
it using print F. Right.

508
00:35:25.180 --> 00:35:28.700
The format version of the print method here.

509
00:35:28.710 --> 00:35:30.180
So if we do a print f.

510
00:35:32.480 --> 00:35:37.700
You may recall that we can format data inside of print f itself.

511
00:35:38.600 --> 00:35:41.510
Now again, you may not remember how to do this.

512
00:35:41.720 --> 00:35:44.810
And again, that would be something that you might need to Google.

513
00:35:45.050 --> 00:35:48.650
So in this case, you might Google print format money, right?

514
00:35:48.710 --> 00:35:52.040
And that would give you almost certainly what you're looking for.

515
00:35:52.370 --> 00:36:00.030
So I'm thinking we'll have a dollar sign and let's see, then we're going to need a percent sign here.

516
00:36:00.050 --> 00:36:06.260
Now, normally when we're printing out numbers in most of our demo programs that we've been doing,

517
00:36:06.380 --> 00:36:11.240
I usually am doing a percent D, which stands for a decimal integer.

518
00:36:11.780 --> 00:36:15.500
So we can we can try that out and see if that's all right.

519
00:36:15.730 --> 00:36:18.490
So now I also want commas.

520
00:36:18.500 --> 00:36:26.390
I want comma separated groupings that we use in at least in American big numbers or maybe English.

521
00:36:26.630 --> 00:36:27.890
Maybe the English speaking world.

522
00:36:27.890 --> 00:36:28.310
I don't know.

523
00:36:28.460 --> 00:36:32.930
I know, maybe in parts of Europe, sometimes they use spaces rather than commas, right?

524
00:36:33.140 --> 00:36:33.860
At any rate.

525
00:36:35.860 --> 00:36:45.160
I can supply a formatting flag, which will tell print f that I want to group up my numbers in the way

526
00:36:45.160 --> 00:36:50.890
that is standard in my region, which is the U.S. in Europe, it would do the right thing there as well.

527
00:36:51.010 --> 00:36:53.290
So I'm going to give it a comma here.

528
00:36:53.890 --> 00:36:54.280
All right.

529
00:36:54.610 --> 00:36:59.530
And then I also just want to go ahead and maybe put some decimal places in.

530
00:36:59.530 --> 00:37:00.650
There are a couple of zeros.

531
00:37:00.670 --> 00:37:02.260
OK, now I'm just hard coding those.

532
00:37:02.260 --> 00:37:04.030
Those are not part of the format string.

533
00:37:04.270 --> 00:37:09.730
Once I put this d here, I'm done with the format, string bits and everything else is going to be interpreted

534
00:37:09.880 --> 00:37:10.660
literally.

535
00:37:11.260 --> 00:37:15.670
All right, so let's run this and see if that will show up nicer.

536
00:37:17.850 --> 00:37:22.710
All right, we've got a giant number here, and it looks like five hundred ninety nine billion nine

537
00:37:22.710 --> 00:37:27.120
hundred sixty two million four hundred seventy three thousand six hundred sixty eight.

538
00:37:27.330 --> 00:37:30.150
That's a that's a pretty substantial number.

539
00:37:30.180 --> 00:37:30.510
Right.

540
00:37:30.660 --> 00:37:35.760
So that was adding up all of the salaries of everybody in that spreadsheet.

541
00:37:36.630 --> 00:37:40.650
Now for grins, I'm actually a little bit curious about something here.

542
00:37:40.680 --> 00:37:43.200
This is kind of extra bonus in this lesson.

543
00:37:43.380 --> 00:37:50.130
I'm curious to track how long this is taking scientifically and then maybe compared this approach to

544
00:37:51.690 --> 00:37:55.770
to this to the other approach where we won't use the collect method.

545
00:37:55.860 --> 00:38:02.190
So to do that, what I have in mind is to track the time right before we start processing the file and

546
00:38:02.190 --> 00:38:07.380
then the time right when we're done and then subtract those two numbers and find out how much time has

547
00:38:07.380 --> 00:38:08.640
elapsed, essentially.

548
00:38:09.000 --> 00:38:15.960
And one way that I can think to do that offhand would be to call System Dot.

549
00:38:16.020 --> 00:38:18.030
Let me see what is it current?

550
00:38:18.060 --> 00:38:21.990
There it is, current time in Melies, so that returns a long.

551
00:38:22.680 --> 00:38:32.190
So I can capture that and I'm going to call this start time and then I can just do that again, right

552
00:38:32.190 --> 00:38:34.560
when we're done like right down here.

553
00:38:36.120 --> 00:38:37.530
So let's see.

554
00:38:37.950 --> 00:38:43.110
System current time in Melies again capture that.

555
00:38:43.470 --> 00:38:43.890
Oops.

556
00:38:45.950 --> 00:38:46.970
Capture that.

557
00:38:48.860 --> 00:38:57.530
And call it end time like that, and then maybe I'll just throw in one more system that out where I

558
00:38:57.530 --> 00:39:02.660
will print out in time minus start time.

559
00:39:02.840 --> 00:39:09.740
And this is in milliseconds, which are thousandth of a second or meaning that there are 1000 milliseconds

560
00:39:09.740 --> 00:39:10.870
and one second.

561
00:39:10.880 --> 00:39:11.230
OK.

562
00:39:12.830 --> 00:39:13.280
All right.

563
00:39:14.180 --> 00:39:18.800
So let me run that again, and let's see how long this is taking.

564
00:39:20.730 --> 00:39:21.120
All right.

565
00:39:21.540 --> 00:39:22.920
We got something printed out.

566
00:39:23.010 --> 00:39:29.100
However, it printed out badly because I forgot to put a new line character after the the two zeros

567
00:39:29.100 --> 00:39:29.250
there.

568
00:39:29.250 --> 00:39:31.750
So the part that we care about is 25.

569
00:39:31.770 --> 00:39:32.040
Wow.

570
00:39:32.040 --> 00:39:35.760
That took 25 seconds, twenty five thousand one hundred eighty one.

571
00:39:35.760 --> 00:39:37.800
So twenty five seconds, that's pretty long.

572
00:39:39.960 --> 00:39:40.160
All right.

573
00:39:40.170 --> 00:39:41.610
So let's fix a couple of things here.

574
00:39:41.640 --> 00:39:50.010
First off, let's make sure that we're putting a new line character after we print out the result so

575
00:39:50.010 --> 00:39:54.270
that the the next bit there will be on a on its own line on a new line.

576
00:39:54.330 --> 00:39:54.630
Right?

577
00:39:55.500 --> 00:39:56.220
That's one thing.

578
00:39:56.370 --> 00:39:58.100
And so that's taking twenty five seconds.

579
00:39:58.110 --> 00:40:01.800
Now, if I run this a few times, we're going to see some variations in that.

580
00:40:02.010 --> 00:40:06.660
But that's taking so long that I'm pretty sure we're not going to see like a huge difference.

581
00:40:06.900 --> 00:40:12.150
It might go down as low as perhaps twenty three twenty two seconds sometimes that it might take as long

582
00:40:12.150 --> 00:40:14.940
as twenty six, twenty seven in others, I'm guessing.

583
00:40:16.110 --> 00:40:19.530
So I don't want to run that again because I don't want to waste the time.

584
00:40:19.530 --> 00:40:22.580
But let's just see for grins now.

585
00:40:22.590 --> 00:40:26.490
If we did this in a different way, I'm going to comment out.

586
00:40:26.790 --> 00:40:28.740
Let me see, where do I want to start here?

587
00:40:29.100 --> 00:40:36.660
I'm going to comment about the dot collect there, and let's do this the other way.

588
00:40:37.500 --> 00:40:47.010
So we could map this to a long by just calling the map to long method here, which will output a long

589
00:40:47.010 --> 00:40:47.790
stream.

590
00:40:48.210 --> 00:40:48.600
OK.

591
00:40:48.780 --> 00:40:55.020
And one of the benefits of the long stream is that inside of that stream, it will hold primitive numbers

592
00:40:55.020 --> 00:40:57.360
rather than wrapper classes.

593
00:40:57.360 --> 00:41:03.840
Because I suspect one thing that might be happening to cause this to take so long is that there might

594
00:41:03.870 --> 00:41:10.860
be some boxing going on in in the in the current pipeline here.

595
00:41:10.890 --> 00:41:11.760
So let's just see.

596
00:41:11.820 --> 00:41:12.330
Let's see.

597
00:41:12.510 --> 00:41:13.380
So let's see.

598
00:41:13.380 --> 00:41:21.840
We'll do a map too long and this is going to take a two long function again so we can actually just

599
00:41:21.840 --> 00:41:23.370
copy this.

600
00:41:26.370 --> 00:41:29.100
And pass it right in like so.

601
00:41:29.370 --> 00:41:37.740
And now what we can do is because this map to long method returns a long stream, the long stream,

602
00:41:37.740 --> 00:41:45.360
which is a numerical stream, it will have a lot of common mathematical functions built right into it

603
00:41:45.540 --> 00:41:48.510
that are designed to work really efficiently, right?

604
00:41:48.840 --> 00:41:52.650
And so if I do a period here, let's see.

605
00:41:52.690 --> 00:41:53.370
There we go.

606
00:41:53.370 --> 00:41:55.170
We've got a sum right there.

607
00:41:56.920 --> 00:42:02.560
OK, so let's see how this one functions, so I'm going to run that now.

608
00:42:03.100 --> 00:42:03.550
OK.

609
00:42:03.580 --> 00:42:07.540
Wow, that still took like twenty six seconds.

610
00:42:07.570 --> 00:42:07.930
Right?

611
00:42:08.290 --> 00:42:10.360
So I don't know, speed up.

612
00:42:10.360 --> 00:42:13.360
And in fact, technically it took a little bit longer this time.

613
00:42:14.260 --> 00:42:17.890
OK, so before we wrap this up, I want to show you one more thing.

614
00:42:17.890 --> 00:42:19.060
I just want to touch on it.

615
00:42:19.060 --> 00:42:22.600
And honestly, this again is just kind of my own personal curiosity.

616
00:42:23.920 --> 00:42:33.070
I want to show you that what we could do to potentially try speeding this up a bit more is to actually

617
00:42:33.070 --> 00:42:35.950
turn it into what is called a parallel stream.

618
00:42:36.670 --> 00:42:40.420
If I put a period here and then I referred to the keyword parallel.

619
00:42:40.700 --> 00:42:46.390
Now I'm not going to explain a whole lot about this, but basically what this is going to do is it's

620
00:42:46.390 --> 00:42:56.680
going to enable our our streams pipeline to be capable of being processed by multiple cores processing

621
00:42:56.680 --> 00:42:59.110
cores of our computer in parallel.

622
00:42:59.290 --> 00:43:05.110
So basically, what it's going to attempt to do is depending on how many processor cores we have available

623
00:43:05.110 --> 00:43:12.940
to us, Java will will manage all of this for us magically, but it will determine how many parallel

624
00:43:12.940 --> 00:43:19.330
streams of processing might make sense to handle this task based on the resources on the computer.

625
00:43:19.690 --> 00:43:26.920
And then it will attempt to take our, in this case, five million rows or five million records and

626
00:43:26.920 --> 00:43:30.940
split them into groups, according to however many parallel processes.

627
00:43:31.210 --> 00:43:34.370
Java determines might make sense to do.

628
00:43:34.570 --> 00:43:42.700
So let's say that Java decides to split our five million into two groups of 2.5 million each.

629
00:43:43.060 --> 00:43:49.930
Then the idea is that now you have these two groups being processed simultaneously.

630
00:43:50.950 --> 00:43:51.310
OK.

631
00:43:51.460 --> 00:43:55.450
So I don't want to say too much more about it right now, but let's just see what happens.

632
00:43:55.450 --> 00:44:00.490
Sometimes you can get some really profound speed ups simply by doing this and sometimes not.

633
00:44:00.700 --> 00:44:05.560
With five million records taking twenty five to twenty six seconds, though, we might get something

634
00:44:05.560 --> 00:44:08.230
noticeably better with this approach.

635
00:44:08.410 --> 00:44:09.670
So let's just see here.

636
00:44:09.790 --> 00:44:13.060
So and notice, all I had to do was just put the word parallel on there.

637
00:44:13.720 --> 00:44:17.500
I can't tell you how awesome this is, but anyway, let's go ahead and run it and see.

638
00:44:18.890 --> 00:44:20.570
Oh, wow, look at that.

639
00:44:20.990 --> 00:44:25.640
We went from twenty five and twenty six seconds down to ten seconds.

640
00:44:26.150 --> 00:44:26.600
Right.

641
00:44:27.230 --> 00:44:31.970
I'm going to run that a couple more times because also one thing that you'll notice sometimes is that

642
00:44:32.750 --> 00:44:38.960
when you run the same thing a few times, the JVM has an opportunity to optimize.

643
00:44:39.170 --> 00:44:42.020
So let's just see if it will get any faster.

644
00:44:43.010 --> 00:44:46.280
OK, ten seconds again and maybe one more time.

645
00:44:47.290 --> 00:44:49.150
OK, that time 11 seconds, so.

646
00:44:49.360 --> 00:44:56.470
So, yeah, we're around 10 seconds on average, and that's a huge savings, isn't it?

647
00:44:56.500 --> 00:44:59.260
I mean, it cut it down by more than half.

648
00:44:59.560 --> 00:45:06.430
So this is a nice little example of when you're using the Streams API with massive amounts of data,

649
00:45:07.330 --> 00:45:11.530
you know, hundreds of thousands, maybe millions, depending on what the operations are that you're

650
00:45:11.530 --> 00:45:12.190
doing.

651
00:45:12.700 --> 00:45:19.690
You could really see some huge benefits by making use of parallel streams or parallel parallel processing.

652
00:45:19.930 --> 00:45:24.310
And now this isn't really meant to be a lesson on parallel processing in and of itself.

653
00:45:24.310 --> 00:45:30.280
But hey, by just putting one little keyword on here, we were able to cut the processing time by more

654
00:45:30.280 --> 00:45:30.810
than half.

655
00:45:30.820 --> 00:45:34.540
So a nice little lesson for you to to see real quick here.

656
00:45:34.750 --> 00:45:39.730
And I know this lesson was really, really long because I took extra time to go into more detail than

657
00:45:39.730 --> 00:45:46.030
I have been lately, but I just wanted to make sure that I'm not passing up too many people who are

658
00:45:46.030 --> 00:45:49.390
just not understanding like, how do I know to do these steps, right?

659
00:45:49.630 --> 00:45:55.810
So hopefully those of you who may have been having those problems got a little more clarity here.

660
00:45:56.080 --> 00:46:01.690
I may not go into that level of detail every single time going forward, but every once in a while,

661
00:46:01.690 --> 00:46:02.800
I'll try to remember to do that.

662
00:46:03.160 --> 00:46:06.760
OK, so we learned some cool things here, and I will see you in the next one.
