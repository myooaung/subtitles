WEBVTT
1
00:00:00.570 --> 00:00:01.620
All right, welcome back.

2
00:00:01.950 --> 00:00:09.240
So in this lesson, we're going to learn some cool techniques for filtering data using the Streams API,

3
00:00:09.630 --> 00:00:15.360
and we've got a couple of really great techniques that are quite easy to use for doing exactly that.

4
00:00:15.510 --> 00:00:16.650
So let's jump in here.

5
00:00:17.430 --> 00:00:23.880
So the first thing I think we want to do before we get really into it, though, is let's let's get

6
00:00:23.880 --> 00:00:26.370
rid of this reversing that we're doing here.

7
00:00:26.370 --> 00:00:31.680
I think it's just going to be a little easier to do some comparisons if we're not looking at the data

8
00:00:31.920 --> 00:00:32.610
backward.

9
00:00:32.850 --> 00:00:37.110
So we're getting rid of the reverse and let's just run this real quick.

10
00:00:38.210 --> 00:00:43.940
OK, so coming back up here to the top, we've got all of our data, we've got all of our duplicated

11
00:00:43.940 --> 00:00:46.550
Fred Flintstones mostly duplicated at least.

12
00:00:48.140 --> 00:00:48.770
OK, cool.

13
00:00:49.070 --> 00:00:56.090
So first, first little thing here we've got all these duplicate Fred Flintstones.

14
00:00:56.600 --> 00:00:58.700
Let's see about getting rid of these duplicates.

15
00:00:59.240 --> 00:01:08.640
Well, the Streams API has, as you might guess, a one line little method that we can add in here.

16
00:01:08.660 --> 00:01:14.810
Method call that we can add into our pipeline to get rid of duplicates.

17
00:01:14.990 --> 00:01:22.070
Now, of course, you've learned now that the definition of a duplicate tends to be predicated on the

18
00:01:22.070 --> 00:01:27.110
way that the objects have been coded in terms of their equals and hash code methods.

19
00:01:27.140 --> 00:01:27.500
Right.

20
00:01:28.220 --> 00:01:33.920
Especially up until now, we've learned how to get rid of duplicates easily by storing all of the objects

21
00:01:33.920 --> 00:01:41.240
in a set and effectively what ends up happening there is each object that goes into the set has a hash

22
00:01:41.240 --> 00:01:47.360
code, and then the set has the ability to check that hash code and filter out any objects whose hash

23
00:01:47.360 --> 00:01:50.960
code matches with objects that are already in there.

24
00:01:50.960 --> 00:01:57.290
And then it also calls the equals method to really make sure, and we know that the set can filter out

25
00:01:57.290 --> 00:02:02.450
duplicates according to both their hash code and equals implementations, right?

26
00:02:03.440 --> 00:02:09.800
So there are similar things that we can do here without even having to put anything into a set, necessarily.

27
00:02:10.670 --> 00:02:17.930
So what we can do is just reference this additional step in our pipeline now.

28
00:02:18.260 --> 00:02:23.870
As always, there's always the question of where should we put this right?

29
00:02:24.170 --> 00:02:30.050
So again, we know that this first bit on line thirty three is just text right strings.

30
00:02:30.290 --> 00:02:39.080
And then here on Line thirty four, we're converting the text into implementations of an employee and

31
00:02:39.080 --> 00:02:41.600
then converting those into employees.

32
00:02:41.600 --> 00:02:46.190
And then we're sorting them and then we're converting them into and then we're printing them out and

33
00:02:46.190 --> 00:02:47.240
converting them to numbers.

34
00:02:47.240 --> 00:02:56.480
So I think we could filter the duplicates out anywhere after line thirty four.

35
00:02:56.510 --> 00:03:06.140
I think all of the any of those lines anywhere after Line thirty four, but be for line thirty nine.

36
00:03:06.320 --> 00:03:09.390
I think any of these steps would be OK.

37
00:03:10.340 --> 00:03:11.240
So I don't know.

38
00:03:11.320 --> 00:03:15.770
Let's maybe I'm inclined to throw it right after thirty five.

39
00:03:15.770 --> 00:03:21.860
And the only reason I'm thinking of that is because it is after Line thirty five where we have the true

40
00:03:21.860 --> 00:03:29.210
object and it's true in their truest form, which is as an actual employee and not as the I employee.

41
00:03:29.330 --> 00:03:33.680
Now please understand, in actuality, it's the same object every time.

42
00:03:33.950 --> 00:03:39.890
It's just what mask is in front of it, you know, so the data is all there, but sometimes you can't

43
00:03:39.890 --> 00:03:40.370
see it.

44
00:03:40.370 --> 00:03:46.580
If it's being masked by certain interfaces that don't expose like the get first name, forget last name,

45
00:03:46.580 --> 00:03:48.290
it's the same objects, no matter what, though.

46
00:03:48.710 --> 00:03:49.910
But I don't know.

47
00:03:49.910 --> 00:03:58.100
Just I'm sort of inclined to to do this, this filtering, if you will, right after we get the the

48
00:03:58.100 --> 00:03:59.420
true employees out.

49
00:03:59.420 --> 00:04:07.520
So I'm going to put a blank space right here, and the method we're going to be calling is called distinct.

50
00:04:08.690 --> 00:04:10.640
OK, so distinct.

51
00:04:12.510 --> 00:04:20.250
And so what that wants to do is it wants to take all of the objects in our stream and make them distinct,

52
00:04:20.520 --> 00:04:23.100
which means don't allow any duplicates.

53
00:04:23.550 --> 00:04:31.140
Now if we hover over this, we can see the Java Dock for it and we see that basically what it's doing

54
00:04:31.140 --> 00:04:38.010
is it returns a stream consisting of the distinct elements according to the equals method.

55
00:04:38.040 --> 00:04:38.520
OK.

56
00:04:38.790 --> 00:04:45.750
So in effect, what it's going to do is compare all of the objects in the stream to each other using

57
00:04:45.750 --> 00:04:47.030
the equals method.

58
00:04:47.040 --> 00:04:52.380
And if any object is already equal to another object that's in the stream, then it's going to just

59
00:04:52.380 --> 00:04:54.310
throw that one out in effect.

60
00:04:54.370 --> 00:05:01.170
OK, now there is one difference in the behavior of this distinct method, depending on whether or not

61
00:05:01.170 --> 00:05:04.180
you're ordering the stream or not.

62
00:05:04.200 --> 00:05:11.550
Because actually, if you're ordering the stream, then it says here that the element appearing first

63
00:05:11.550 --> 00:05:13.350
in the encounter order is preserved.

64
00:05:13.500 --> 00:05:17.910
Which is this telling us like when you're wondering if you've got a bunch of duplicates which duplicate

65
00:05:17.910 --> 00:05:20.850
is going to be preserved in which ones will be thrown out, right?

66
00:05:20.940 --> 00:05:28.530
So if you're ordering everything, then the first duplicate is the one that will be kept or preserved,

67
00:05:28.530 --> 00:05:32.520
and then the subsequent duplicates will be will be thrown out.

68
00:05:32.820 --> 00:05:37.380
So let's run that and see what we get.

69
00:05:39.630 --> 00:05:40.110
All right.

70
00:05:40.620 --> 00:05:47.010
So coming back up to the top, we now see that we don't have all of those Fred Flintstone duplicates

71
00:05:47.010 --> 00:05:47.880
anymore, right?

72
00:05:48.480 --> 00:05:53.490
So we can see that it did indeed get rid of the duplicates.

73
00:05:53.610 --> 00:06:00.090
And again, those duplicates are defined in this case by, however, our equals method is implemented.

74
00:06:00.100 --> 00:06:07.800
So if the equals method, in fact, let's just jump into the equals method real quick as a reminder.

75
00:06:11.260 --> 00:06:11.830
There it is.

76
00:06:11.860 --> 00:06:19.210
Here's our equals method, so our equals method is based on last name, first name and date of birth.

77
00:06:19.240 --> 00:06:28.600
OK, so if those three fields are the same between any two or more objects, then you've got duplicates

78
00:06:28.600 --> 00:06:28.930
there.

79
00:06:29.710 --> 00:06:30.160
All right.

80
00:06:30.460 --> 00:06:31.420
Jumping back.

81
00:06:32.320 --> 00:06:38.980
So that's a nice, easy way that we can make sure that we don't have duplicates according to the equals

82
00:06:38.980 --> 00:06:39.490
method.

83
00:06:40.540 --> 00:06:43.210
OK, so now we've done this with distinct.

84
00:06:43.360 --> 00:06:45.410
I want to show you real quick, though.

85
00:06:45.910 --> 00:06:46.990
I'm going to get rid of that.

86
00:06:47.620 --> 00:06:51.340
We actually could use a set also.

87
00:06:52.790 --> 00:07:00.080
To do basically the same thing and to do that, what we will do, I'm putting another new line in the

88
00:07:00.080 --> 00:07:01.700
same place where I had the distinct.

89
00:07:02.330 --> 00:07:07.010
This time what I'm going to do is use a the collect method.

90
00:07:07.310 --> 00:07:09.110
So there's a method called collect.

91
00:07:09.110 --> 00:07:18.350
And if you imagine that the stream is this as a stream of individual employee objects kind of rolling

92
00:07:18.350 --> 00:07:19.400
down a stream?

93
00:07:19.440 --> 00:07:26.720
OK, and then imagine that the collect method is kind of like a net that someone's putting in that stream

94
00:07:26.720 --> 00:07:30.380
and collecting all of these employees, right?

95
00:07:30.560 --> 00:07:31.970
So you're collecting them all.

96
00:07:32.120 --> 00:07:38.420
You can actually tell the collector to take all of the collected items from the stream and then put

97
00:07:38.420 --> 00:07:43.910
them into something so we can tell it, for example, to put them all into a set, collect them into

98
00:07:43.910 --> 00:07:51.920
a set or collect them into a list, collect them into a more generic collection or an UN modifiable

99
00:07:51.920 --> 00:07:52.250
list.

100
00:07:52.250 --> 00:07:52.610
OK?

101
00:07:52.760 --> 00:07:55.820
So there are a lot of there are a number of little options there.

102
00:07:56.510 --> 00:08:01.310
But if we choose this collectors that to set and I'm just going to select that right?

103
00:08:02.000 --> 00:08:09.080
OK, so now these these employees are going to be collected into a set now notice.

104
00:08:09.200 --> 00:08:14.270
As soon as I've done that, I get an error down here on the next line.

105
00:08:14.450 --> 00:08:22.130
And the reason for that is because now the output that's coming out of this out of this collect method

106
00:08:22.130 --> 00:08:26.960
here is a set, not a stream.

107
00:08:27.110 --> 00:08:27.590
OK.

108
00:08:27.830 --> 00:08:34.520
So if I want to continue on with all of these daisy chained method calls, which are all working as

109
00:08:34.520 --> 00:08:40.640
a daisy chain because the output of each of them is a stream, then I need to get a stream out of the

110
00:08:40.640 --> 00:08:41.090
set.

111
00:08:41.090 --> 00:08:49.010
And remember, we learned that you can always get a stream from any implementation of a collection,

112
00:08:49.010 --> 00:08:51.680
right or from any interface of a collection.

113
00:08:52.250 --> 00:09:01.910
So currently, this call to collect is returning a set right, which is one of the interfaces derived

114
00:09:01.910 --> 00:09:03.500
from a collection.

115
00:09:03.500 --> 00:09:10.270
So I can get a stream off of that guy by just doing period stream.

116
00:09:11.090 --> 00:09:15.020
And now the error goes away because now I can continue, right?

117
00:09:15.260 --> 00:09:23.570
So again, using my analogy of a water stream with employees falling down the water stream, if you

118
00:09:23.570 --> 00:09:29.470
will, and getting collected into a net by calling stream.

119
00:09:29.840 --> 00:09:36.170
What I'm sort of doing here is I'm sort of taking all those employees that I collected in that net,

120
00:09:36.410 --> 00:09:41.240
turning the net upside down and then letting them continue down a new stream.

121
00:09:41.270 --> 00:09:41.750
OK.

122
00:09:41.870 --> 00:09:45.050
That's basically a way that you might want to think of that.

123
00:09:45.320 --> 00:09:47.960
And now the rest of that stream can continue on.

124
00:09:48.200 --> 00:09:51.800
So let's just run that and see if we see any differences.

125
00:09:52.940 --> 00:09:56.000
I don't think we're going to see much of a difference, if any.

126
00:09:58.770 --> 00:10:04.950
All right, so, yeah, Fred Flintstone, well, my yes, so it's still unique and they're still in

127
00:10:04.950 --> 00:10:05.520
order.

128
00:10:05.610 --> 00:10:10.470
And that's because we're doing the sorting after we do the filtering, right?

129
00:10:11.130 --> 00:10:12.850
That's why there's still an order here.

130
00:10:13.140 --> 00:10:17.460
But isn't that kind of cool that we can do this now?

131
00:10:17.460 --> 00:10:24.090
A lot of the times when I use the collect method here, I usually will use it at the end of my stream.

132
00:10:24.090 --> 00:10:30.180
So just real quick, temporarily, let me come and tell all of this and I'll show you what I usually

133
00:10:30.180 --> 00:10:30.780
would do.

134
00:10:32.970 --> 00:10:39.380
So normally I'd be doing something like this, and I'm going to temporarily get rid of that too.

135
00:10:41.220 --> 00:10:48.440
And then I'd just be capturing the output of the collect method with an option command V..

136
00:10:48.720 --> 00:10:49.080
Right.

137
00:10:49.230 --> 00:10:56.310
And so now I've got my whatever set of employees like.

138
00:10:56.310 --> 00:11:01.800
So right now you just have a collection, a set right there and then you can go on and do other things

139
00:11:01.800 --> 00:11:03.300
with that collection, if you like.

140
00:11:04.710 --> 00:11:06.330
You can do whatever you want with it.

141
00:11:06.630 --> 00:11:10.800
So that's how I normally would be using a collection.

142
00:11:10.800 --> 00:11:12.630
I'm not saying that's this is wrong or right.

143
00:11:12.630 --> 00:11:19.500
By the way, this is just oftentimes in in the various use cases where I'm using the Streams API if

144
00:11:19.500 --> 00:11:21.930
I am using a the collect method.

145
00:11:22.080 --> 00:11:24.720
It's kind of at the end of the stream, if you will.

146
00:11:25.780 --> 00:11:31.780
And by the way, I mean, the collect method is a terminal operation, meaning it is usually intended

147
00:11:31.780 --> 00:11:33.010
to be used at the end.

148
00:11:33.200 --> 00:11:36.610
Right, which is why I mean, let me undo these changes.

149
00:11:40.230 --> 00:11:46.400
Which is why in order to continue processing the rest of this, I had to create a new stream, right?

150
00:11:46.410 --> 00:11:51.060
I had to create another stream off of this off of this set.

151
00:11:51.180 --> 00:11:51.680
OK?

152
00:11:51.810 --> 00:11:58.290
In order to let that proceed with the sorting and the mapping to integers and all of that business,

153
00:11:58.300 --> 00:11:58.620
right?

154
00:11:59.790 --> 00:12:01.420
So that's kind of cool.

155
00:12:01.440 --> 00:12:06.390
So that's a second way that you could filter out the duplicates.

156
00:12:07.540 --> 00:12:12.340
All right, now, there's other types of filtering that we can do, though, and this is where we get

157
00:12:12.340 --> 00:12:14.740
into some really, really cool stuff.

158
00:12:16.210 --> 00:12:19.810
So let me make up a scenario here.

159
00:12:19.840 --> 00:12:21.430
Let's go look at our data.

160
00:12:22.060 --> 00:12:32.170
OK, so first off, let's say that we want to filter out this guy right here because the, you know,

161
00:12:32.170 --> 00:12:39.310
because it has the programmers and we already know that that's going to end up mapping to a a dummy

162
00:12:39.310 --> 00:12:40.630
employee anyway.

163
00:12:40.930 --> 00:12:44.290
So let's say we want to just filter that out.

164
00:12:44.500 --> 00:12:44.860
Right?

165
00:12:45.520 --> 00:12:47.560
So how could we do that?

166
00:12:49.030 --> 00:12:52.090
And see, there it is, right there in a in a.

167
00:12:52.690 --> 00:12:52.930
All right.

168
00:12:52.930 --> 00:12:55.090
So there are multiple ways that we could do this.

169
00:12:55.240 --> 00:12:56.440
Let's play with a couple.

170
00:12:57.670 --> 00:12:58.790
Let's see.

171
00:12:58.810 --> 00:13:05.620
So as usual, we may want to decide, OK, where do we want to even do any filtering of that sort?

172
00:13:06.370 --> 00:13:09.280
And truly, we could do it at just about any step, right?

173
00:13:10.420 --> 00:13:18.070
I think maybe again, the easier places to do this might be somewhere after we have converted the objects

174
00:13:18.070 --> 00:13:22.030
to regular employees and not this interface version.

175
00:13:22.180 --> 00:13:25.510
So somewhere after that, I think, might be a little bit easier, perhaps.

176
00:13:26.020 --> 00:13:28.360
So to do this type of filtering?

177
00:13:30.270 --> 00:13:33.630
The Streams API, in fact, has a method called.

178
00:13:33.810 --> 00:13:34.980
Can you guess what it's called?

179
00:13:35.160 --> 00:13:36.720
It's called filter.

180
00:13:37.680 --> 00:13:38.160
All right.

181
00:13:39.180 --> 00:13:48.450
So I'm going to put my cursor somewhere after Line thirty seven and type F and there's filter.

182
00:13:48.690 --> 00:13:53.130
So the filter method takes what is called a predicate.

183
00:13:53.730 --> 00:14:01.320
Now, a predicate is another functional interface that has one method, one abstract method defined

184
00:14:01.320 --> 00:14:06.730
on it, and that is a method that returns a true or a false.

185
00:14:06.810 --> 00:14:07.290
OK.

186
00:14:08.250 --> 00:14:14.850
And the reason it returns a true or false is because usually it's implemented by a lambda expression

187
00:14:15.060 --> 00:14:21.510
in order to decide what objects should or should not get filtered out of a stream.

188
00:14:21.660 --> 00:14:25.080
OK, so let's just use it, and then you'll see what I'm talking about.

189
00:14:25.090 --> 00:14:26.070
So filter.

190
00:14:27.820 --> 00:14:34.930
All right, so this is going to be passed one object at a time out of the stream.

191
00:14:34.990 --> 00:14:42.910
OK, so I can refer to those objects like EA and here's my arrow, and now I get to do anything I want

192
00:14:42.910 --> 00:14:49.810
with EA as long as it reads, as long as it results in a boolean being returned, a true or a false.

193
00:14:50.110 --> 00:14:50.530
OK.

194
00:14:50.950 --> 00:14:56.740
And if it returns it true, then that object will be allowed to continue down the stream.

195
00:14:56.800 --> 00:15:00.970
And if it returns a false, then that object will be taken out of the stream.

196
00:15:00.970 --> 00:15:02.890
It will be filtered out of the stream.

197
00:15:03.160 --> 00:15:03.610
OK.

198
00:15:04.090 --> 00:15:06.790
So if I want to filter out?

199
00:15:10.380 --> 00:15:16.590
The object that will be created from this line here with the programmers, there are probably a number

200
00:15:16.590 --> 00:15:23.490
of ways that I could determine how to filter out an object that's created from this line.

201
00:15:24.150 --> 00:15:30.930
One easy way that I can think of at the moment is the fact that I know that that line is going to result

202
00:15:30.930 --> 00:15:34.620
in an object with a first name of in forward slash a.

203
00:15:35.040 --> 00:15:38.790
So maybe I start off with just trying to filter based on that.

204
00:15:39.120 --> 00:15:40.970
So let's see what that might look like.

205
00:15:40.980 --> 00:15:48.000
So I'm going to do my lambda expression here, and I will have to refer to the object.

206
00:15:48.210 --> 00:15:53.730
I'm going to use the variable e for employee and then I'll do my arrow here.

207
00:15:53.910 --> 00:15:57.390
And then maybe I will say something like E Dot.

208
00:15:58.830 --> 00:15:59.470
Let's see.

209
00:15:59.550 --> 00:16:02.190
Get last name.

210
00:16:03.370 --> 00:16:07.110
Dot equals in forward.

211
00:16:07.110 --> 00:16:08.190
Slash a.

212
00:16:10.050 --> 00:16:10.800
All right now.

213
00:16:11.970 --> 00:16:19.590
This is actually the opposite of what I'm really wanting, though, because as I stated earlier, the

214
00:16:19.590 --> 00:16:26.820
way that this filter method works is that my lambda here, if my lambda returns a true, then it allows

215
00:16:26.820 --> 00:16:30.870
the object to to to continue through the stream.

216
00:16:31.170 --> 00:16:33.600
And if it returns a false, then it gets filtered out.

217
00:16:33.720 --> 00:16:36.750
So I actually want the opposite of this, right?

218
00:16:37.080 --> 00:16:39.060
So how can I do that?

219
00:16:39.330 --> 00:16:42.570
There are actually a few ways with this basic approach.

220
00:16:42.930 --> 00:16:52.200
I could just put an exclamation right there, but that might not always be the most readable thing to

221
00:16:52.200 --> 00:16:55.410
do because the exclamation mark means not.

222
00:16:56.410 --> 00:17:08.970
So what I can do is I can actually just surround this entire lambda expression inside of the knot method

223
00:17:08.970 --> 00:17:16.470
of the predicate interface so I can do an option command T and choose number one.

224
00:17:19.180 --> 00:17:20.080
Just like that.

225
00:17:21.200 --> 00:17:32.060
Now, if I go to the beginning of that, I can just reference the not method like so and now I will

226
00:17:32.060 --> 00:17:35.870
need to import that as a static method.

227
00:17:37.400 --> 00:17:38.030
There we go.

228
00:17:38.210 --> 00:17:44.750
So that's a static method on the predicate class, and now I'm negating the way that this is going to

229
00:17:44.750 --> 00:17:45.170
work.

230
00:17:45.290 --> 00:17:46.670
So let's go ahead and just run it.

231
00:17:46.670 --> 00:17:50.870
And what should happen now is we won't see this in a anymore.

232
00:17:53.090 --> 00:17:54.140
Yet it's gone.

233
00:17:57.770 --> 00:17:59.110
So that's kind of cool, right?

234
00:18:00.630 --> 00:18:03.000
So let's let's try a few more filters, though.

235
00:18:03.960 --> 00:18:08.190
How about let me select all of that and clear that out?

236
00:18:08.400 --> 00:18:12.960
What if we wanted to get rid of all of the programmers, right?

237
00:18:13.530 --> 00:18:17.130
So again, I will do a lambda here.

238
00:18:19.190 --> 00:18:23.600
And let's say that we'll we'll just say something like where E!

239
00:18:26.270 --> 00:18:29.360
Is an instance of programmer.

240
00:18:30.330 --> 00:18:35.400
OK, now this would only show us the programmers, in fact, let's just run that real quick.

241
00:18:35.670 --> 00:18:38.730
This will give us only the programmers.

242
00:18:40.500 --> 00:18:41.130
There they are.

243
00:18:41.160 --> 00:18:48.900
So those are just the programmers who are not duplicated, by the way, right now, if we want the opposite

244
00:18:48.900 --> 00:18:52.230
of that, everybody who is not a programmer.

245
00:18:52.500 --> 00:19:01.800
Then again, I can just select that whole entire lambda to an option command T to surround that.

246
00:19:05.140 --> 00:19:08.170
Go to the beginning of here and then do a not.

247
00:19:10.180 --> 00:19:14.770
Let's run that, and this will be everyone who isn't a programmer.

248
00:19:16.910 --> 00:19:17.300
All right.

249
00:19:17.360 --> 00:19:18.680
So it's a little shorter list.

250
00:19:18.830 --> 00:19:20.150
There's the nay again.

251
00:19:20.360 --> 00:19:21.690
Now what if I want both?

252
00:19:21.710 --> 00:19:25.610
What if I want to get rid of the NRA and I want everybody who's not a programmer?

253
00:19:25.610 --> 00:19:27.050
Can you think of how to do that?

254
00:19:27.170 --> 00:19:27.950
Take a moment.

255
00:19:29.460 --> 00:19:29.820
OK.

256
00:19:29.850 --> 00:19:30.420
Did you get it?

257
00:19:30.810 --> 00:19:31.650
It's pretty easy.

258
00:19:31.920 --> 00:19:34.500
All you need to do is just add another filter.

259
00:19:35.490 --> 00:19:41.880
Isn't this great how you can just keep chaining, chaining these method calls together like this, right?

260
00:19:41.890 --> 00:19:42.990
So not.

261
00:19:43.680 --> 00:19:44.250
And then.

262
00:19:54.440 --> 00:19:54.770
Right.

263
00:19:55.340 --> 00:19:56.450
So you could do that.

264
00:20:00.550 --> 00:20:06.280
Here we go, so now we're also now we've also filtered out the the the MNAs, right?

265
00:20:07.690 --> 00:20:13.430
Another way you could do that is to tack it on here, right?

266
00:20:13.450 --> 00:20:26.200
You could say something like where is instance of programmer and, uh, e dot get last name equals in

267
00:20:26.410 --> 00:20:29.020
a right so you could do something like that?

268
00:20:29.710 --> 00:20:32.290
I'm not going to run that, but you get to get the idea.

269
00:20:32.320 --> 00:20:33.670
So that's another way, though.

270
00:20:33.720 --> 00:20:35.770
Be careful with this because you don't like you.

271
00:20:35.920 --> 00:20:41.050
You don't want to put too much logic all on one line like this that starts to get a little harder to

272
00:20:41.050 --> 00:20:41.590
read.

273
00:20:41.650 --> 00:20:42.070
Right?

274
00:20:42.910 --> 00:20:45.880
Probably better to just have an additional filter.

275
00:20:46.030 --> 00:20:51.310
That way, you can just read each little predicate for itself, essentially, right?

276
00:20:51.880 --> 00:20:52.300
All right.

277
00:20:53.470 --> 00:21:00.520
Let's do maybe a slightly more advanced, a little tiny, bit more advanced filter here.

278
00:21:00.850 --> 00:21:13.910
Let's say that we only want to see the employees who have a salary greater than five thousand dollars.

279
00:21:13.930 --> 00:21:14.260
Right?

280
00:21:14.980 --> 00:21:16.570
That should be pretty easy to do.

281
00:21:17.080 --> 00:21:20.260
So let's see.

282
00:21:20.260 --> 00:21:23.170
We'll we'll get rid of this existing predicate.

283
00:21:23.530 --> 00:21:24.490
We'll say E.

284
00:21:25.510 --> 00:21:34.060
So we're e we're e that get salary greater than five thousand.

285
00:21:35.200 --> 00:21:36.340
It's as easy as that.

286
00:21:37.640 --> 00:21:38.290
There they are.

287
00:21:41.650 --> 00:21:45.100
And then you could even do something you could add another one in there.

288
00:21:45.460 --> 00:21:47.200
And where?

289
00:21:50.670 --> 00:21:58.800
The salary is less than, I don't know, ten thousand.

290
00:22:02.460 --> 00:22:03.150
Look at that.

291
00:22:03.930 --> 00:22:08.580
I mean, it just, you know, it's so easy, right to do this now.

292
00:22:09.150 --> 00:22:16.530
One of the other things that you should know about the Streams API is that it is highly optimized.

293
00:22:16.890 --> 00:22:25.290
So when we implement functionality using the Streams API, probably more often than not, logic that's

294
00:22:25.290 --> 00:22:33.660
implemented in this way is actually running faster than if you wrote out the code in the more traditional

295
00:22:33.660 --> 00:22:34.080
way.

296
00:22:34.380 --> 00:22:41.550
And the reason for that has to do with all of the opportunities for the for the for Java to optimize

297
00:22:41.760 --> 00:22:46.840
how it is actually implementing the logic underneath the hood.

298
00:22:46.860 --> 00:22:53.220
OK, so it's it gets a much better opportunity to optimize the code before it executes.

299
00:22:53.220 --> 00:22:57.630
So using the streams API has a lot of benefits.

300
00:22:57.780 --> 00:23:06.360
It tends to be, in many cases, much more readable, easier to maintain and actually runs faster.

301
00:23:06.570 --> 00:23:10.560
And I'll mention this now, and we may learn a little bit more about it later.

302
00:23:11.400 --> 00:23:19.830
But it also opens up our code for the ability to take full advantage of multiple processing cores on

303
00:23:19.830 --> 00:23:26.910
the computer so that we can actually process data in parallel streams simultaneously.

304
00:23:27.180 --> 00:23:34.380
And we don't have to be experts at multiprocessing and what it takes to do all of that.

305
00:23:35.220 --> 00:23:41.670
The Streams API makes it extremely easy for us to do without much understanding.

306
00:23:41.880 --> 00:23:49.920
So there's just a ton of power in in using the Streams API in a lot of cases, especially cases like

307
00:23:49.920 --> 00:23:54.930
this, where you've got a collection of a lot of data that you need to sift through and manipulate in

308
00:23:54.930 --> 00:24:01.500
various ways, convert into some other form or or filter out, or do a lot of combinations of those

309
00:24:01.500 --> 00:24:02.370
sorts of things.

310
00:24:02.880 --> 00:24:03.230
All right.

311
00:24:03.240 --> 00:24:08.760
So I think that's going to wrap up this lesson and I will see you in the next one.
