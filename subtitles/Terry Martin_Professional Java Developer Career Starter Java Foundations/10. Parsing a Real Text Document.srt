1
00:00:00,750 --> 00:00:08,970
All right, so now we're getting ready to put everything we've learned together into a small program

2
00:00:08,970 --> 00:00:14,040
that is getting to a little bit more of a realistic set of scenarios now.

3
00:00:14,370 --> 00:00:19,830
So for this next lesson, we're going to run through an actual scenario.

4
00:00:20,160 --> 00:00:26,310
So let's imagine that you are a programmer working at some office.

5
00:00:26,910 --> 00:00:31,350
And in fact, let's say you're a programmer working for a school district.

6
00:00:31,860 --> 00:00:39,150
And let's say that this school district has transcripts that are on paper that they've printed out,

7
00:00:39,150 --> 00:00:46,410
let's say, from decades ago before they used computerized records.

8
00:00:46,740 --> 00:00:54,630
And they want to somehow scan these transcripts, these these printed out transcripts and get the data

9
00:00:54,630 --> 00:01:03,060
that is contained in the transcripts loaded into a computer database so that it can be searched and

10
00:01:03,060 --> 00:01:05,250
manipulated further in a computer.

11
00:01:06,370 --> 00:01:14,770
OK, now one step for them to do this is that they can take these printed out transcripts and scan them

12
00:01:15,100 --> 00:01:22,870
with a computer and perform what is called OCR or optical character recognition, so that the end result

13
00:01:22,870 --> 00:01:24,460
would be text files.

14
00:01:24,490 --> 00:01:24,940
OK.

15
00:01:25,510 --> 00:01:33,130
However, just having those documents scanned with text files are to produce text files is not enough

16
00:01:33,130 --> 00:01:37,510
to get the data into a database in the way that they wanted.

17
00:01:37,750 --> 00:01:45,580
And so a programmer is going to be needed to further parse those text files and parse out all the little

18
00:01:45,790 --> 00:01:50,950
fields of it, like the first name and the last name and things of that sort.

19
00:01:50,980 --> 00:01:51,370
OK.

20
00:01:51,670 --> 00:01:53,650
And so that's what we're going to do.

21
00:01:54,070 --> 00:02:02,110
So on the website, for my course where you're currently watching this specific video, there will be

22
00:02:02,110 --> 00:02:07,810
a file for you to download and let me show you what that will look something like.

23
00:02:09,670 --> 00:02:16,610
OK, so right down here, you should have a file called transcript example that text.

24
00:02:17,140 --> 00:02:19,870
If you click on that, you can download it.

25
00:02:21,860 --> 00:02:22,310
OK.

26
00:02:23,240 --> 00:02:26,540
And once it has been downloaded, you can open it.

27
00:02:26,750 --> 00:02:27,170
OK.

28
00:02:27,380 --> 00:02:29,450
And so here's the contents of it.

29
00:02:29,450 --> 00:02:33,740
So it's not a full transcript, it's just kind of like the header part of a transcript.

30
00:02:33,950 --> 00:02:37,430
By the way, I did base this on a real transcript.

31
00:02:37,580 --> 00:02:39,880
So we've just got a simple text file here.

32
00:02:39,890 --> 00:02:48,260
So you've got several field student number colon and then a student number and then a grade and birthdate

33
00:02:48,920 --> 00:02:50,870
gender things of this sort.

34
00:02:50,900 --> 00:02:57,770
OK, so now we're not going to do this 100 percent real, but we're going to do it about 85 to 90 percent

35
00:02:57,770 --> 00:02:58,220
real.

36
00:02:58,610 --> 00:03:06,560
You haven't learned yet how to use Java to read a file and grab the text or data out of the file.

37
00:03:06,560 --> 00:03:11,210
So we're going to skip that part for right now, and we're going to do it the easier way.

38
00:03:11,330 --> 00:03:15,950
Well, for for a one off, and that is simply to copy and paste.

39
00:03:16,160 --> 00:03:17,660
So we're going to select all of that.

40
00:03:17,780 --> 00:03:23,570
You can either do on Mac Command A to select everything or control a on Windows and Linux, I believe.

41
00:03:23,810 --> 00:03:27,110
And then a control C or Command C to copy.

42
00:03:27,710 --> 00:03:30,880
And then we're going to come back over to the ADC here.

43
00:03:31,100 --> 00:03:34,550
And actually, you know, let's make a new class for this.

44
00:03:34,580 --> 00:03:38,810
So again, I'm going to right click on the SIRC or source folder here.

45
00:03:39,140 --> 00:03:40,970
New Java class.

46
00:03:41,150 --> 00:03:43,150
And let's call this something like.

47
00:03:43,520 --> 00:03:47,960
Transcript parser no spaces.

48
00:03:48,560 --> 00:03:53,270
And again, you're free to call this class whatever you like, but you probably want to name it something

49
00:03:53,270 --> 00:03:55,400
meaningful and useful in real life.

50
00:03:55,400 --> 00:03:55,880
You would.

51
00:03:56,780 --> 00:03:57,110
All right.

52
00:03:57,140 --> 00:03:58,700
Transcript parser.

53
00:03:59,120 --> 00:03:59,740
All right.

54
00:03:59,750 --> 00:04:04,760
And then I'll make a new line and we'll want a public static void.

55
00:04:04,760 --> 00:04:08,150
Main method SVM All lowercase hit return.

56
00:04:08,420 --> 00:04:09,110
And there we go.

57
00:04:09,140 --> 00:04:18,590
OK, now one thing we can do just kind of easily here is we can create a string and we can name this

58
00:04:18,590 --> 00:04:27,680
something like transcript, and I would go ahead and make a text block string or a multi line string.

59
00:04:27,860 --> 00:04:32,150
And do you remember how to do that with three quotes, right?

60
00:04:32,160 --> 00:04:36,710
And then the ADC automatically puts us pretty much where we want to be here.

61
00:04:37,070 --> 00:04:44,270
Now, I prefer to have one extra line before the closing three quotes there and put a semicolon there

62
00:04:44,270 --> 00:04:44,840
as well.

63
00:04:44,960 --> 00:04:51,040
Then I'm going to go back up to my line for here and now I can just paste right here, right?

64
00:04:51,050 --> 00:04:54,020
Because we copied that, that text file.

65
00:04:54,290 --> 00:04:59,080
OK, so this would be kind of equivalent to if we had written file IO code.

66
00:04:59,110 --> 00:05:04,970
That's what it's called the kind of code that would know how to open up a file and then load the text

67
00:05:04,970 --> 00:05:07,490
in that file into memory or something.

68
00:05:07,700 --> 00:05:12,110
We're going to kind of simulate we're going to skip that step and simulate that we already got everything

69
00:05:12,110 --> 00:05:13,730
loaded into a variable.

70
00:05:13,970 --> 00:05:14,360
OK.

71
00:05:14,540 --> 00:05:18,230
And so this approach will only work one time each.

72
00:05:18,410 --> 00:05:24,710
But if we did this with file IO, then we could have a bunch of transcript files or text files in a

73
00:05:24,710 --> 00:05:25,940
folder, let's say.

74
00:05:26,360 --> 00:05:32,570
And we could have our code open up each and every one of those files and then pass it right.

75
00:05:33,440 --> 00:05:35,810
But in our case, we're just going to pass one for now.

76
00:05:36,140 --> 00:05:36,410
All right.

77
00:05:36,410 --> 00:05:38,450
So here's our transcript.

78
00:05:38,780 --> 00:05:42,800
And what we want to do here is we want to pass out.

79
00:05:43,890 --> 00:05:50,430
All of these fields right into their own variables, or at least print them out or something like that,

80
00:05:50,430 --> 00:05:50,640
right?

81
00:05:50,660 --> 00:05:52,680
We want to see to each of these fields.

82
00:05:52,680 --> 00:05:57,720
In fact, on this date one here, we might even want to just get the individual parts right.

83
00:05:58,000 --> 00:06:06,300
The day, month and year, the gender character code, their state I.D. and then the actual waited and

84
00:06:06,300 --> 00:06:08,160
unweighted GPAs.

85
00:06:08,190 --> 00:06:08,550
Right.

86
00:06:08,940 --> 00:06:09,910
So that's the goal.

87
00:06:09,930 --> 00:06:11,790
That's what we want to do.

88
00:06:12,600 --> 00:06:13,050
All right.

89
00:06:13,080 --> 00:06:13,530
So.

90
00:06:15,100 --> 00:06:19,750
We now know just about everything we need to know to be able to pull this off.

91
00:06:20,680 --> 00:06:23,470
All right, so where to begin?

92
00:06:24,490 --> 00:06:29,140
Well, we probably want to do some setup here for using regular expressions.

93
00:06:29,380 --> 00:06:34,060
Do you remember the basic pattern for doing nontrivial regular expressions?

94
00:06:34,060 --> 00:06:37,960
We need a a pattern and we need a match, right?

95
00:06:38,380 --> 00:06:42,730
So I'm going to go ahead and and start typing Patty.

96
00:06:42,760 --> 00:06:48,700
And then the ADP gives me what I'm looking for, which is this class pattern under Java Util Rig X and

97
00:06:48,700 --> 00:06:49,910
I can just hit return.

98
00:06:49,910 --> 00:06:52,520
And by hitting return, I'm not just telling it what I want.

99
00:06:52,750 --> 00:06:56,590
I'm going to cause the ADP to import this class for me.

100
00:06:56,830 --> 00:07:00,610
So that's one reason why it's kind of let me show you something here.

101
00:07:00,610 --> 00:07:07,540
If you if you just start typing the whole thing out and you hit space and you were to just keep going

102
00:07:07,540 --> 00:07:09,880
like this, I see some programmers oops.

103
00:07:10,210 --> 00:07:14,710
I see some programmers code this way where they just kind of ignore the errors and stuff.

104
00:07:14,860 --> 00:07:19,450
Oftentimes, when I see programmers who code this way, they actually get themselves into trouble a

105
00:07:19,450 --> 00:07:24,160
little bit, it seems, because they forget to import these things later on.

106
00:07:24,160 --> 00:07:27,880
And somehow they're just like oblivious to the read errors and stuff.

107
00:07:28,060 --> 00:07:30,850
So I actually prefer not to code that way.

108
00:07:30,850 --> 00:07:36,700
I like to address the errors beforehand or even not have the errors to begin with.

109
00:07:36,700 --> 00:07:41,590
So if you just type a few letters here until you get that pattern there and then you just hit, enter

110
00:07:41,860 --> 00:07:48,010
bam, you're not going to get any errors because immediately it imports this and it finishes typing

111
00:07:48,010 --> 00:07:49,210
this out for you anyway.

112
00:07:49,660 --> 00:07:54,010
So it's actually less less work and less error prone.

113
00:07:54,280 --> 00:07:54,610
All right.

114
00:07:54,790 --> 00:08:00,850
And again, I'm just going to call this patty and then we don't do new for pattern.

115
00:08:01,000 --> 00:08:03,850
We do pattern dot compile.

116
00:08:04,450 --> 00:08:04,840
Right?

117
00:08:05,140 --> 00:08:05,530
OK.

118
00:08:05,710 --> 00:08:09,550
And it's red now because I need to give it some input here.

119
00:08:10,060 --> 00:08:12,490
So for right now, let's see.

120
00:08:12,910 --> 00:08:16,180
I'm going to just give it empty strings and we'll come back and fill that in.

121
00:08:17,370 --> 00:08:17,730
All right.

122
00:08:17,940 --> 00:08:25,140
So we'll just stop right there for four right now, and then we're going to need a matcher, so I'll

123
00:08:25,140 --> 00:08:26,160
do the same thing.

124
00:08:26,190 --> 00:08:31,500
I'll just type enough to get the aid to show me what I'm looking for class wise, which is this Java

125
00:08:31,500 --> 00:08:32,900
util rig x matcher.

126
00:08:33,210 --> 00:08:37,920
So I'll hit return on that and I'll call this an eighty equals.

127
00:08:37,920 --> 00:08:42,150
And then to get an actual instance of the matter again, we don't do new.

128
00:08:42,360 --> 00:08:44,220
We also don't do this.

129
00:08:44,640 --> 00:08:49,950
Instead, we use the pattern that we just created dot matcher.

130
00:08:50,790 --> 00:09:00,060
And then as input into this, we give it the text or the string that we want to do some matching on.

131
00:09:00,510 --> 00:09:03,810
And so that in this case would be the transcript variable.

132
00:09:04,590 --> 00:09:05,700
And then I can close that.

133
00:09:06,710 --> 00:09:17,210
Next, we need to trigger the regular expression engine to actually go do a match or find some matches

134
00:09:17,210 --> 00:09:17,900
or whatever.

135
00:09:18,140 --> 00:09:25,280
And as we did before, I would typically put that inside of a and a conditional block and if statement

136
00:09:25,280 --> 00:09:28,400
like this, if and then parentheses.

137
00:09:28,910 --> 00:09:32,330
And then you can do math that matches.

138
00:09:33,910 --> 00:09:39,820
And then close that parentheses there and then an opening curly brace, and then when you hit return,

139
00:09:39,820 --> 00:09:43,870
you'll get a closing curly brace automatically on line 18.

140
00:09:44,410 --> 00:09:44,830
OK.

141
00:09:45,160 --> 00:09:52,030
And so this is kind of like the boilerplate or one type of boilerplate for using the Java Rejects engine,

142
00:09:52,030 --> 00:09:54,430
and this should be this kind of review for you now.

143
00:09:55,060 --> 00:09:55,780
All right.

144
00:09:56,140 --> 00:10:03,790
So assuming you had any match, whatever code we put in between these curly braces is going to get executed,

145
00:10:03,790 --> 00:10:06,070
otherwise nothing is going to get executed.

146
00:10:06,580 --> 00:10:06,970
OK?

147
00:10:08,230 --> 00:10:11,680
So what is the first thing we want to be able to do here?

148
00:10:12,100 --> 00:10:17,350
I think the first thing is we want to be able to grab that right there.

149
00:10:18,580 --> 00:10:23,320
So I think what I'll do here is I'm going to extract the variable for the regular expression.

150
00:10:23,320 --> 00:10:30,850
So I just put my cursor right in between these two quotes here, and I'm going to do an option up arrow

151
00:10:30,850 --> 00:10:33,190
or control W to select all of that.

152
00:10:33,460 --> 00:10:41,560
And then I will do an option command V or control alt v and extract a variable from that.

153
00:10:41,770 --> 00:10:47,890
And I will take the default variable name here or the suggested variable name of Rig X and just hit

154
00:10:47,890 --> 00:10:48,550
return.

155
00:10:49,790 --> 00:10:56,450
OK, so now we got that, and then if I put the cursor here, so now I can start writing an actual regular

156
00:10:56,450 --> 00:11:02,700
expression that will match this whole entire multi-line text.

157
00:11:02,720 --> 00:11:09,830
And let me do some captcha groups to grab these key fields of data, right?

158
00:11:10,400 --> 00:11:10,730
All right.

159
00:11:10,730 --> 00:11:13,370
So what do we need to do here?

160
00:11:13,400 --> 00:11:14,630
Do you want to have a thought?

161
00:11:15,020 --> 00:11:20,690
First, you want to pause and think about how you might start this off and then catch back up with me

162
00:11:20,690 --> 00:11:21,170
and see.

163
00:11:23,220 --> 00:11:23,610
OK.

164
00:11:23,880 --> 00:11:30,930
So I think the first thing I would do is start with this bit here, and I would treat this as a string

165
00:11:30,930 --> 00:11:31,500
literal.

166
00:11:32,070 --> 00:11:38,550
It's a good idea here is we're looking for anchor points places where we can say you're kind of wanting

167
00:11:38,550 --> 00:11:42,210
to leapfrog from things that you do know to things that you don't know.

168
00:11:42,210 --> 00:11:44,070
So this would be something you wouldn't know.

169
00:11:44,250 --> 00:11:49,820
But this part here is not likely ever to change within the format or within the report, right?

170
00:11:49,830 --> 00:11:50,610
The transcript.

171
00:11:50,910 --> 00:11:56,970
So you know that you can tell the computer of the regex engine, look for the words student number colon

172
00:11:57,300 --> 00:12:03,210
and then maybe look for a space and then look for so many digits and remember that, right?

173
00:12:03,210 --> 00:12:05,790
So that's that's a a strategy.

174
00:12:06,150 --> 00:12:08,430
OK, so let's try something like that.

175
00:12:08,430 --> 00:12:11,660
So student number.

176
00:12:12,840 --> 00:12:15,420
Colon space.

177
00:12:15,720 --> 00:12:17,820
And then we want so many digits now.

178
00:12:17,970 --> 00:12:23,040
Honestly, I don't know if the format of this in real life is such that the this number of digits is

179
00:12:23,040 --> 00:12:26,470
always going to be the exact same on every report.

180
00:12:26,490 --> 00:12:27,110
How many do you have?

181
00:12:27,210 --> 00:12:30,120
One two three four five six seven eight nine 10.

182
00:12:30,570 --> 00:12:34,200
Let's pretend like it's always going to be 10 digits exactly, though.

183
00:12:34,470 --> 00:12:37,410
All right, so how do we represent a digit?

184
00:12:38,850 --> 00:12:44,460
Baghdadi, right, is a digit and we want 10 of them, exactly.

185
00:12:44,700 --> 00:12:48,960
So how can we do that with the curly brace?

186
00:12:49,650 --> 00:12:50,220
10.

187
00:12:51,000 --> 00:12:51,450
Right.

188
00:12:51,810 --> 00:12:52,530
Just like that.

189
00:12:52,740 --> 00:13:01,290
Now we want to capture that, though, so we can encapsulate that inside of parentheses.

190
00:13:02,040 --> 00:13:07,560
And as you know, I'm fond of using named capture groups.

191
00:13:07,800 --> 00:13:12,000
And so to create a named capture group, we can use.

192
00:13:12,030 --> 00:13:13,090
Question mark.

193
00:13:13,110 --> 00:13:15,750
And then less than and greater than symbol.

194
00:13:16,230 --> 00:13:18,450
And then put the cursor here and then give it a name.

195
00:13:18,600 --> 00:13:24,450
So this would be a student number, and I'll just abbreviate that to student numb.

196
00:13:24,540 --> 00:13:26,490
Now again, you can call it whatever you like.

197
00:13:26,730 --> 00:13:31,410
And I'm going to give myself a little room here also includes that the project pane there on the on

198
00:13:31,410 --> 00:13:31,860
the left.

199
00:13:32,130 --> 00:13:32,550
OK.

200
00:13:33,030 --> 00:13:36,150
So we've got that now.

201
00:13:36,210 --> 00:13:42,050
Let's see here if we come down here and go ahead and print this out.

202
00:13:42,060 --> 00:13:49,740
Even so, we can get that capture group from the matcher object here, right?

203
00:13:50,190 --> 00:14:04,020
So we can say Matt for matcher group Colon Quest are quote quotes and then student numbe just like that.

204
00:14:05,290 --> 00:14:05,540
All right.

205
00:14:05,560 --> 00:14:07,120
Let's run that and see what we get.

206
00:14:08,830 --> 00:14:09,270
Hmm.

207
00:14:09,730 --> 00:14:10,810
Nothing matches.

208
00:14:11,230 --> 00:14:12,610
We didn't get a match.

209
00:14:12,850 --> 00:14:14,020
Why would that be?

210
00:14:15,070 --> 00:14:17,050
Well, there's a few reasons for that.

211
00:14:17,560 --> 00:14:26,860
First off, so we created a rig that supposedly will match up to hear a lot about all the rest of this

212
00:14:26,860 --> 00:14:27,670
string, right?

213
00:14:27,700 --> 00:14:31,510
We didn't tell the Rig X engine what to do with the rest of this.

214
00:14:32,110 --> 00:14:32,530
Right?

215
00:14:33,310 --> 00:14:40,750
OK, so this is where we get into a few of those additional character classes and symbols that we learned

216
00:14:40,750 --> 00:14:41,500
recently.

217
00:14:41,890 --> 00:14:47,440
And so one of the easiest things we might try is to tell the regular expression engine.

218
00:14:47,440 --> 00:14:50,740
For now, we don't care about the rest of this stuff at all.

219
00:14:50,920 --> 00:14:52,150
We don't really care about it.

220
00:14:52,510 --> 00:15:00,880
And so we could do something like use the the the dot that we learned and tell it that the rest of this

221
00:15:00,880 --> 00:15:05,380
string will just be zero or more characters that we don't care about.

222
00:15:05,620 --> 00:15:10,240
And we could could possibly do that with Dot and then an asterisk, right?

223
00:15:10,240 --> 00:15:12,100
Because zero or more?

224
00:15:12,130 --> 00:15:12,460
Right.

225
00:15:12,730 --> 00:15:18,070
So that should gobble up all of the rest of this string.

226
00:15:19,450 --> 00:15:20,110
Presumably.

227
00:15:21,180 --> 00:15:22,590
So let's see if that works.

228
00:15:23,070 --> 00:15:24,300
So we'll run this again.

229
00:15:25,270 --> 00:15:25,660
OK.

230
00:15:25,930 --> 00:15:28,300
So, nope, that still doesn't work.

231
00:15:28,780 --> 00:15:33,880
Now I'm kind of taking you through the flow of how you might actually figure out how to get something

232
00:15:33,880 --> 00:15:34,720
like this working.

233
00:15:34,720 --> 00:15:41,680
I obviously already know what this is, but I just kind of want to show you so that if I jumped to the

234
00:15:41,680 --> 00:15:47,260
exact approach, you wouldn't appreciate why we had to do what we had to do to make this work.

235
00:15:47,440 --> 00:15:50,320
So that's why I'm kind of going piecemeal here.

236
00:15:50,560 --> 00:15:50,800
All right.

237
00:15:50,800 --> 00:15:51,970
So that still doesn't work.

238
00:15:52,660 --> 00:15:53,020
OK.

239
00:15:53,290 --> 00:16:02,530
So part of the problem here is that the Java rejects engine by default won't allow the DOT symbol here

240
00:16:02,530 --> 00:16:05,830
to match just a couple of characters.

241
00:16:06,040 --> 00:16:11,830
And those couple of characters are the new line character and the carriage return that we looked at

242
00:16:11,830 --> 00:16:14,410
a little bit ago on the ASCII table.

243
00:16:15,130 --> 00:16:20,800
So any place in this string where there may be new lines and carriage returns, such as at the ends

244
00:16:20,800 --> 00:16:28,870
here won't match this period, and therefore the entire string doesn't match with this expression.

245
00:16:29,020 --> 00:16:34,780
But we can change that by changing the mode that the regex engine is running in.

246
00:16:34,990 --> 00:16:41,440
And if you'll recall, we can change the mode of the are the options of the Rejects engine down here

247
00:16:41,440 --> 00:16:42,940
when we compile it.

248
00:16:43,150 --> 00:16:45,760
So if we add a second parameter here?

249
00:16:48,120 --> 00:16:54,770
We can pass in another parameter, which will be a toggle, if you will, of a mode with.

250
00:16:55,050 --> 00:16:58,740
And that's a constant that is under the pattern class.

251
00:16:58,860 --> 00:17:03,630
So if we type Pattern Dot now, we get to see all these capitalized things here.

252
00:17:03,640 --> 00:17:10,590
These are all constants called constants because they won't change of of additional modes, if you will,

253
00:17:10,770 --> 00:17:11,870
that we can enable.

254
00:17:12,030 --> 00:17:15,510
And the mode that we need here is called Dot all.

255
00:17:16,350 --> 00:17:23,250
So what this does is it tells the regular expression engine to allow the DOT to match not only on all

256
00:17:23,250 --> 00:17:29,040
the characters that you would normally expect it to, but also on carriage returns and new lines or

257
00:17:29,040 --> 00:17:29,850
form feeds.

258
00:17:30,210 --> 00:17:30,630
OK.

259
00:17:30,930 --> 00:17:35,490
So just makes that period match a few more things than it normally would.

260
00:17:36,610 --> 00:17:37,000
All right.

261
00:17:37,480 --> 00:17:40,270
And so let's see what we get now.

262
00:17:40,870 --> 00:17:43,570
So we've enabled the Dot Hall.

263
00:17:44,380 --> 00:17:44,800
All right.

264
00:17:45,040 --> 00:17:46,570
Still not matching.

265
00:17:47,700 --> 00:17:48,090
All right.

266
00:17:48,300 --> 00:17:55,320
So the next issue we may want to be careful of here, seeing as how we're not getting a match yet is

267
00:17:55,320 --> 00:18:03,840
in the use of these literal spaces contained within our regular expression in more complex or advanced

268
00:18:03,840 --> 00:18:04,680
rag axes.

269
00:18:04,890 --> 00:18:09,780
You probably want to be a little more explicit about what you're really expecting here, rather than

270
00:18:09,780 --> 00:18:13,470
just depending on or relying on these literals here.

271
00:18:13,680 --> 00:18:20,700
So I would actually get rid of these at this point and replace them with explicit spaces.

272
00:18:21,030 --> 00:18:26,910
Now, for now, I'm going to just hard code that I'm only expecting one space because I wouldn't expect

273
00:18:26,910 --> 00:18:31,710
that that would ever change in this part of the transcript, right?

274
00:18:31,730 --> 00:18:34,440
Because that's probably a static field there.

275
00:18:34,730 --> 00:18:37,320
Maybe the same goes for this space here.

276
00:18:38,310 --> 00:18:42,870
So I will just encode one static space for each of those.

277
00:18:43,140 --> 00:18:44,400
Let's see what we get now.

278
00:18:45,870 --> 00:18:46,740
Hey, there we go.

279
00:18:47,070 --> 00:18:48,900
And now we're getting a match.

280
00:18:49,320 --> 00:18:49,750
OK.

281
00:18:49,770 --> 00:18:56,220
So, yeah, so like I said, I kind of want to take you through the evolution of creating one of these

282
00:18:56,220 --> 00:19:01,050
regular expressions so that you can see the all the little kinds of things to look out for.

283
00:19:01,230 --> 00:19:02,730
Typical typical things.

284
00:19:02,940 --> 00:19:03,330
All right.

285
00:19:03,360 --> 00:19:07,530
So, yeah, so we're able to match that field now.

286
00:19:07,860 --> 00:19:11,970
And next thing we will want to grab is the grade.

287
00:19:12,690 --> 00:19:19,890
Now, let's also try to make our regex more readable, right from the right from the get go.

288
00:19:19,920 --> 00:19:23,570
And so we learned that we could comment right.

289
00:19:23,580 --> 00:19:28,020
We could enable comments on our regular expressions on the engine itself.

290
00:19:28,020 --> 00:19:30,840
In the way to do that is to add another flag here.

291
00:19:30,860 --> 00:19:36,620
These are called flags, flags in computer programming or just things that you can toggle on or off,

292
00:19:36,630 --> 00:19:36,990
right?

293
00:19:37,260 --> 00:19:44,040
So the way we can do this is to add in another flag and we do that by I'm going to put a space here

294
00:19:44,040 --> 00:19:49,260
and then I'm going to use what's called the pipe character, which is this tall thing.

295
00:19:49,260 --> 00:19:53,210
It's on the same key as the backslash, so that's probably looking that way for you.

296
00:19:53,220 --> 00:19:55,980
Maybe I'm not sure this is a backslash.

297
00:19:55,990 --> 00:20:02,610
So whatever key you're using to make that press that width shift and then you'll get a pipe.

298
00:20:02,850 --> 00:20:03,270
OK?

299
00:20:04,200 --> 00:20:06,770
And in this case, that pipe character really means.

300
00:20:06,780 --> 00:20:12,930
Or maybe in another lesson, I'll explain the ways operations a little bit, just so you have a slightly

301
00:20:12,930 --> 00:20:15,810
better understanding of why this works the way that it does.

302
00:20:15,810 --> 00:20:18,720
But for now, just memorize that I'm showing you to do it this way.

303
00:20:19,260 --> 00:20:19,610
All right.

304
00:20:19,620 --> 00:20:25,440
So we'll grab another one of these flags, which is the comments which we've seen before.

305
00:20:25,980 --> 00:20:26,220
All right.

306
00:20:26,220 --> 00:20:28,680
So now we're enabling comments as well.

307
00:20:28,950 --> 00:20:29,330
All right.

308
00:20:29,340 --> 00:20:32,820
And now that we've been able, we might want to go out and just run this again, make sure we didn't

309
00:20:32,820 --> 00:20:33,690
break anything.

310
00:20:34,350 --> 00:20:34,980
OK, cool.

311
00:20:34,990 --> 00:20:35,970
So that's still working.

312
00:20:35,970 --> 00:20:38,760
We're still pulling that student number out.

313
00:20:39,390 --> 00:20:45,750
OK, so now we can make our regex a little start getting it ready to be a little nicer.

314
00:20:45,750 --> 00:20:49,130
And the way that I like to do that is to make it a multi string.

315
00:20:49,140 --> 00:20:59,070
So I'm going to add two more quotes there and two more here as well, and then put this on its own line

316
00:20:59,880 --> 00:21:04,680
like so and maybe I'm going to end this little bit.

317
00:21:06,140 --> 00:21:06,560
OK.

318
00:21:07,910 --> 00:21:11,060
And I think I'll also put this on its own line, too.

319
00:21:11,600 --> 00:21:14,720
All right, so first, let's just run it again, make sure we didn't break anything.

320
00:21:15,880 --> 00:21:17,680
Cool still works very good.

321
00:21:18,830 --> 00:21:21,710
OK, so now we can comment a little bit.

322
00:21:22,160 --> 00:21:24,240
So I will put a comment here.

323
00:21:25,040 --> 00:21:28,670
Grab Student Number.

324
00:21:29,910 --> 00:21:30,420
All right.

325
00:21:30,960 --> 00:21:33,180
And now we can go for the grade.

326
00:21:33,840 --> 00:21:42,900
So now the way we ended this expression was to capture that student number and then we told it pretty

327
00:21:42,900 --> 00:21:44,580
much to ignore all.

328
00:21:44,640 --> 00:21:50,480
Well, we sort of told it to not care about all the rest of this string here.

329
00:21:50,490 --> 00:21:52,710
So that's from this point, right?

330
00:21:52,710 --> 00:21:57,030
Because we we captured that student number and then from this point on.

331
00:21:58,540 --> 00:22:04,810
All of all of this here is represented by the DOT star, right?

332
00:22:05,260 --> 00:22:07,640
The Dot means any character.

333
00:22:08,380 --> 00:22:14,170
And then the star means zero or more of them, so as many as you can grab, which ends up grabbing the

334
00:22:14,170 --> 00:22:15,160
entire thing.

335
00:22:15,340 --> 00:22:21,070
So now we don't quite want that because we want to go up to this grade here.

336
00:22:21,550 --> 00:22:26,410
So let's try one or two techniques and see which ones will work for us to get that grade.

337
00:22:26,740 --> 00:22:31,330
So what I would be inclined to do is pretty much follow this same pattern here.

338
00:22:31,340 --> 00:22:35,140
So in fact, I'm going to just duplicate that line, for starters.

339
00:22:35,350 --> 00:22:35,830
OK.

340
00:22:36,550 --> 00:22:39,570
And then we'll put the word grade here.

341
00:22:39,580 --> 00:22:44,560
I'm going to get rid of no, because we don't have that, but I'm going to keep the colon because we

342
00:22:44,560 --> 00:22:45,790
do have a colon here.

343
00:22:46,960 --> 00:22:52,060
And then we have a space, however, now here we only had one space, but here we can clearly see there

344
00:22:52,060 --> 00:22:54,190
are more than one space is there.

345
00:22:54,340 --> 00:22:56,380
So how can we do more than one space?

346
00:22:57,310 --> 00:22:59,830
We could say plus, right?

347
00:23:00,160 --> 00:23:02,890
That means one or more spaces.

348
00:23:03,100 --> 00:23:03,430
Right?

349
00:23:03,760 --> 00:23:04,160
OK.

350
00:23:04,180 --> 00:23:06,490
And then we've got our capture group here.

351
00:23:06,670 --> 00:23:12,130
Now here, we're saying we're expecting 10 digits, but here I'm going to assume this could be maybe

352
00:23:12,130 --> 00:23:13,000
one or two.

353
00:23:13,030 --> 00:23:15,480
I'm not sure what it would say if it were a nine.

354
00:23:15,490 --> 00:23:20,680
I don't know if it would have a leading zero, like zero nine like here zero nine.

355
00:23:20,680 --> 00:23:23,920
I don't know if it would be that way or if it would just show a nine.

356
00:23:24,100 --> 00:23:25,960
So two to play it safe.

357
00:23:26,320 --> 00:23:30,910
I'm just going to allow this to be one or two characters long.

358
00:23:31,030 --> 00:23:31,540
OK.

359
00:23:31,960 --> 00:23:37,060
So how do we say one or two characters or between one and two characters?

360
00:23:37,480 --> 00:23:40,150
Well, we can come here and we can do a one.

361
00:23:41,420 --> 00:23:42,830
Comma, too.

362
00:23:43,220 --> 00:23:44,030
Just like that.

363
00:23:44,270 --> 00:23:48,440
And so now this could be one character, long or two characters long.

364
00:23:49,040 --> 00:23:53,660
And then we need to change the name of this unnamed capture group, and I'm going to just use the name

365
00:23:53,660 --> 00:23:56,360
of that field there because that makes the most sense grade.

366
00:23:56,600 --> 00:24:01,910
Notice again, though, I'm using all lowercase here just as a Java convention, even though technically

367
00:24:01,910 --> 00:24:05,030
in this project's here, I'm not coding in Java now.

368
00:24:05,180 --> 00:24:11,180
I'm coding in regular expressions, but from my named CAPTCHA groups, the I'm going to stick with the

369
00:24:11,180 --> 00:24:14,360
typical Java naming conventions for the most part.

370
00:24:14,690 --> 00:24:16,790
Treat these as if they were variables.

371
00:24:17,510 --> 00:24:24,770
OK, and then at the end, we still have the Dot star to grab all the rest of it.

372
00:24:24,980 --> 00:24:26,420
So let's see if this works.

373
00:24:26,900 --> 00:24:27,800
Oh, well, hold on.

374
00:24:28,220 --> 00:24:30,080
Now we want to do something with it also.

375
00:24:30,080 --> 00:24:35,660
So I'm going to duplicate that line and change this to grade.

376
00:24:36,410 --> 00:24:38,660
And then let's run it and see if that works.

377
00:24:39,770 --> 00:24:40,940
Looks like that worked.

378
00:24:41,810 --> 00:24:45,620
So, yeah, we've got the student number and then we've got the grade there.

379
00:24:46,430 --> 00:24:50,240
This is starting to look like it's probably going to be relatively easy to do.

380
00:24:50,450 --> 00:24:51,140
Don't you think?

381
00:24:51,860 --> 00:24:52,430
All right.

382
00:24:52,850 --> 00:24:53,230
All right.

383
00:24:53,240 --> 00:24:55,110
So let's continue on, Will.

384
00:24:55,130 --> 00:24:58,490
I'm going to I think I'm going to just duplicate this again.

385
00:24:59,720 --> 00:25:05,150
And this time, I will anchor my rejects on the word birth date.

386
00:25:06,850 --> 00:25:07,720
Just like that.

387
00:25:07,930 --> 00:25:13,810
Now here, I might want each of these fields separately.

388
00:25:13,930 --> 00:25:18,070
And I can do that pretty easily with separate capture groups.

389
00:25:18,160 --> 00:25:18,580
Right?

390
00:25:19,120 --> 00:25:20,650
So let's see what we have here.

391
00:25:20,650 --> 00:25:25,840
We've got birthday, Colin and then more than one space, which we have here, more than one space.

392
00:25:26,110 --> 00:25:30,390
And then we've got a two digit number, and that is the month.

393
00:25:30,400 --> 00:25:35,200
So in the U.S. where we're, you know, we do everything differently from the rest of the world.

394
00:25:35,200 --> 00:25:41,470
For those of you who are not in the U.S., in the U.S., standard dates usually start with the month,

395
00:25:41,470 --> 00:25:43,570
then the day of the month and then the year.

396
00:25:43,690 --> 00:25:49,480
I know, like pretty much the whole rest of the world does the the day of the month and then the month

397
00:25:49,480 --> 00:25:50,080
and then the year.

398
00:25:50,080 --> 00:25:55,390
And honestly, as a programmer in a supposedly logical thinker that does make more sense.

399
00:25:55,630 --> 00:26:00,730
You're kind of going from the what is it, from the most specific to the most general or so?

400
00:26:00,880 --> 00:26:03,250
But in the U.S., that's just not how we roll.

401
00:26:04,270 --> 00:26:09,070
So I'm going to assume that this is the month here in the U.S..

402
00:26:09,280 --> 00:26:09,540
All right.

403
00:26:09,550 --> 00:26:16,390
And as such, I'm going to name this named CAPTCHA Group Month just like that.

404
00:26:16,810 --> 00:26:17,110
All right.

405
00:26:17,140 --> 00:26:24,340
However, now I want to grab the other two bits as well, and they are separated by forward slash.

406
00:26:24,410 --> 00:26:25,960
So I'm going to put a forward slash here.

407
00:26:25,960 --> 00:26:33,820
And in fact, I'm going to just grab all of that and I'm going to paste that again, and then I'm going

408
00:26:33,820 --> 00:26:37,630
to put one more forward slash and paste again, just like that.

409
00:26:38,230 --> 00:26:40,810
And now I'm just going to change these names.

410
00:26:41,110 --> 00:26:42,040
So that was a month.

411
00:26:42,040 --> 00:26:43,750
Then the next one is day.

412
00:26:43,750 --> 00:26:46,840
If you're in the U.S. and we're kind of backward sometimes.

413
00:26:47,110 --> 00:26:51,130
And then this last one will be easier now.

414
00:26:51,370 --> 00:26:59,200
The year appears to be four digits long, and I'm going to guess it's always going to be exactly four

415
00:26:59,200 --> 00:26:59,770
digits long.

416
00:26:59,770 --> 00:27:02,350
In fact, you know, we can clean up the other ones as well.

417
00:27:02,470 --> 00:27:06,040
So that's exactly four, and it looks like these other two are exactly two.

418
00:27:06,310 --> 00:27:10,050
So I don't think we need to be so flexible there.

419
00:27:10,060 --> 00:27:13,750
It doesn't look like it because we've got leading zeros in this format.

420
00:27:13,960 --> 00:27:18,700
So that's why I just went in and said it's going to be exactly two, two and four.

421
00:27:19,270 --> 00:27:19,750
OK.

422
00:27:20,230 --> 00:27:20,980
All right.

423
00:27:21,160 --> 00:27:26,650
Now one other thing too, I just realized probably it would be a little better because this isn't just

424
00:27:26,650 --> 00:27:29,320
some any old date, this is the birth date.

425
00:27:29,380 --> 00:27:29,740
Right?

426
00:27:30,010 --> 00:27:36,940
So I think I actually prefer to call this field birth and then capital and birth month.

427
00:27:39,710 --> 00:27:40,970
Earth Day.

428
00:27:43,640 --> 00:27:47,990
And birth year using camel case, though.

429
00:27:48,680 --> 00:27:49,110
All right.

430
00:27:49,130 --> 00:27:51,520
And so then down here we can print these out.

431
00:27:51,530 --> 00:27:54,110
I'm going to duplicate this line to three.

432
00:27:55,550 --> 00:27:56,540
And we'll see.

433
00:27:57,580 --> 00:27:59,530
Birth month.

434
00:28:04,410 --> 00:28:04,800
Let's.

435
00:28:09,020 --> 00:28:10,790
Earth looks day.

436
00:28:12,730 --> 00:28:14,290
And birth year.

437
00:28:14,320 --> 00:28:15,200
Let's see what we get.

438
00:28:15,220 --> 00:28:16,510
I'm going to run this now.

439
00:28:20,590 --> 00:28:21,730
Looks like we got it.

440
00:28:21,900 --> 00:28:24,370

441
11:00, is that is that correct?

442
00:28:27,950 --> 00:28:35,060
Oh, 11 was the grade and then, yep, January the 2nd, 2000 looks like we got it.

443
00:28:35,390 --> 00:28:37,940
Yeah, this is really kind of looking pretty easy.

444
00:28:37,940 --> 00:28:41,750
Oh, by the way, we forgot to update the the comments here, right?

445
00:28:42,560 --> 00:28:44,570
Grab the grade.

446
00:28:47,340 --> 00:28:54,060
Grab birth date, OK, next, we can grab the gender.

447
00:28:54,540 --> 00:29:01,890
Let me see here, I think I actually want to copy this line for that because the grade line, I think

448
00:29:01,890 --> 00:29:05,250
it's more similar to what we have for the gender.

449
00:29:05,250 --> 00:29:08,100
So I'm going to duplicate that and then I'm going to move this line down.

450
00:29:08,100 --> 00:29:09,090
And to do that?

451
00:29:09,330 --> 00:29:10,530
I'm going to just do.

452
00:29:10,710 --> 00:29:20,100
I'm holding down on option shift and down Arrow, which on Windows is alt shift down arrow.

453
00:29:20,280 --> 00:29:27,480
OK, so that's how I move that up and down with alt shift or option shift and up or down arrow like

454
00:29:27,480 --> 00:29:27,810
that?

455
00:29:27,960 --> 00:29:28,350
OK.

456
00:29:28,620 --> 00:29:28,970
All right.

457
00:29:28,980 --> 00:29:34,170
And then we'll change the name of this to gender.

458
00:29:35,410 --> 00:29:41,740
And will change this literal here to gender as well with a colon.

459
00:29:42,070 --> 00:29:44,740
And then we've got one or more spaces in this case.

460
00:29:44,950 --> 00:29:47,860
There's only one space, but that won't hurt anything.

461
00:29:48,160 --> 00:29:50,260
And then it's one.

462
00:29:51,290 --> 00:29:52,940
Character long.

463
00:29:52,970 --> 00:29:57,250
Right, it's one word character, I'm going to assume that that's how it always will be.

464
00:29:57,260 --> 00:29:59,810
It'll probably probably be an M or an F..

465
00:30:00,050 --> 00:30:03,380
Well, now I think I better be a little bit careful here.

466
00:30:03,530 --> 00:30:10,370
These days we have, you know, many organizations and such are acknowledging the existence of more

467
00:30:10,370 --> 00:30:12,500
than just two genders.

468
00:30:12,650 --> 00:30:14,660
And I don't know how they might encode those.

469
00:30:14,660 --> 00:30:20,840
I don't know if they will do them with one letter or maybe a few letters, maybe even three.

470
00:30:21,080 --> 00:30:21,710
I don't know.

471
00:30:22,040 --> 00:30:27,800
So I might want to be a little bit careful how I express this in my regular expression.

472
00:30:28,340 --> 00:30:31,550
So it's definitely not a digit, though, that's for sure.

473
00:30:31,550 --> 00:30:32,930
Someone, I'm going to tell it.

474
00:30:32,930 --> 00:30:35,030
It's going to be a word character.

475
00:30:35,180 --> 00:30:43,640
And I think to be safe, what I can do is I'm going to get rid of this part here, and I'm just going

476
00:30:43,640 --> 00:30:53,270
to tell it one or more word characters, followed by a word boundary.

477
00:30:53,420 --> 00:30:57,320
So there's a place where we can kind of use that word boundary thing.

478
00:30:57,410 --> 00:31:02,630
And the reason I'm saying this here is because I just want to be really careful that you can have some

479
00:31:02,630 --> 00:31:08,180
word characters here and now I might have been able to say followed by space.

480
00:31:08,600 --> 00:31:09,020
Right?

481
00:31:09,200 --> 00:31:11,450
That probably would have been fine.

482
00:31:11,540 --> 00:31:17,390
But what if there's a new line character right here, right at the end of this, and then it goes to

483
00:31:17,390 --> 00:31:23,050
the next line as opposed to in fact, you know, it looks like there is a new line character because

484
00:31:23,060 --> 00:31:25,790
I can't select anything more after that.

485
00:31:26,120 --> 00:31:26,480
Right?

486
00:31:26,690 --> 00:31:34,190
So I just wanted to be extra careful here by putting that word boundary character here, followed by

487
00:31:34,670 --> 00:31:36,200
whatever comes next.

488
00:31:36,560 --> 00:31:36,800
All right.

489
00:31:36,800 --> 00:31:37,660
So let's see.

490
00:31:37,670 --> 00:31:38,930
Let's see if this will work.

491
00:31:39,860 --> 00:31:41,060
So that's gender.

492
00:31:41,750 --> 00:31:47,120
So then we'll duplicate this and then we'll say gender here.

493
00:31:47,750 --> 00:31:48,050
All right.

494
00:31:48,060 --> 00:31:49,220
Let's see if that works.

495
00:31:50,090 --> 00:31:51,660
Yeah, looks like that works.

496
00:31:51,680 --> 00:31:52,700
There's our team.

497
00:31:52,970 --> 00:31:59,520
OK, so that's that's a maybe a pretty decent reject so far, and let's update this as well.

498
00:31:59,540 --> 00:32:01,250
Grab the gender.

499
00:32:01,640 --> 00:32:02,070
All right.

500
00:32:02,090 --> 00:32:08,930
And then we want the state I.D. So I'm going to go and grab the rest of these now without stopping to

501
00:32:08,930 --> 00:32:13,630
run every single thing because I think the pattern is going to be pretty much the same at this point.

502
00:32:13,670 --> 00:32:15,230
So let's see.

503
00:32:15,240 --> 00:32:27,740
We've got state and then a space and then I.D. colon and then one or more spaces and then our name here,

504
00:32:27,800 --> 00:32:33,530
which I will call state I.D. You'll see some people, by the way, do camel case for something like

505
00:32:33,530 --> 00:32:34,190
an acronym.

506
00:32:34,460 --> 00:32:39,620
You'll see them do the first letter and capitalized and then the second letter lowercase.

507
00:32:39,620 --> 00:32:42,230
Again, I used to hate that back in the day.

508
00:32:42,470 --> 00:32:47,540
These days, I've been beaten over the head, working on so many teams where that's where they tend

509
00:32:47,540 --> 00:32:48,110
to do that.

510
00:32:48,140 --> 00:32:54,980
I guess I'm mostly OK with it, but I think my personal preference is to do all caps in most cases,

511
00:32:54,980 --> 00:32:58,880
although there are a few cases where to look weird, but here it's probably fine.

512
00:32:59,300 --> 00:33:03,890
So do whatever you like there or whatever your team that you're working with tells you to do.

513
00:33:04,490 --> 00:33:04,850
All right.

514
00:33:04,850 --> 00:33:14,540
So state I.D. and this is going to be digits, and I could leave this plus here if I wasn't sure how

515
00:33:14,540 --> 00:33:18,050
many digits this will always be.

516
00:33:18,380 --> 00:33:24,050
I could just do the same thing that I did here in, you know, I guess I will just to just to mix it

517
00:33:24,050 --> 00:33:24,830
up a little bit.

518
00:33:25,130 --> 00:33:25,550
OK.

519
00:33:26,530 --> 00:33:26,980
All right.

520
00:33:27,430 --> 00:33:30,370
And I think I'll even leave the rest of this as well.

521
00:33:31,550 --> 00:33:35,230
All right, so he grabbed the state I.D..

522
00:33:35,690 --> 00:33:36,200
All right.

523
00:33:36,440 --> 00:33:40,730
And then let's grab the cumulative GPA.

524
00:33:40,940 --> 00:33:46,700
Now this is an interesting one because we've got the same text here on these two lines, but the only

525
00:33:46,700 --> 00:33:49,980
thing that differentiates is what's in these parentheses weighted.

526
00:33:50,180 --> 00:33:53,270
So that's what I think I'm going to kind of keep on.

527
00:33:53,270 --> 00:34:01,570
Here is the word weighted EIA, DHT D, and then I will put this closing parentheses here.

528
00:34:01,580 --> 00:34:07,250
Now, remember, parentheses are special characters and rejects those, so we want to escape that.

529
00:34:08,350 --> 00:34:14,040
That's an easy thing to forget, but luckily, I think the I.D. C, I think it was kind of, well,

530
00:34:14,050 --> 00:34:17,410
yeah, it was warning us here with the squiggly lines, right?

531
00:34:17,620 --> 00:34:21,130
Because it thinks that that's probably supposed to be part of a captured group.

532
00:34:21,280 --> 00:34:27,220
So we wanted to know that's just we want the literal closing parentheses there.

533
00:34:27,400 --> 00:34:30,250
So that's an easy thing to to to mess up on.

534
00:34:30,670 --> 00:34:31,090
All right.

535
00:34:31,090 --> 00:34:31,540
Well, let's see.

536
00:34:31,540 --> 00:34:37,840
And then OK, so we don't need the ID stuff here, so we get rid of all of that.

537
00:34:38,410 --> 00:34:44,410
So we're at this closing parentheses and then one or more spaces, which we have here one or more spaces,

538
00:34:44,740 --> 00:34:47,980
followed by three point eighty two.

539
00:34:48,550 --> 00:34:48,920
Hmm.

540
00:34:49,390 --> 00:34:54,040
So how do we want to represent that in rig?

541
00:34:55,060 --> 00:35:00,550
Well, first, let's name it, I'm going to name it weighted GPA.

542
00:35:01,000 --> 00:35:01,480
All right.

543
00:35:01,960 --> 00:35:04,480
So it's not just digits now, right?

544
00:35:04,480 --> 00:35:08,050
It's digits and a decimal.

545
00:35:08,740 --> 00:35:12,250
I could tell it to start off with digits.

546
00:35:13,440 --> 00:35:19,590
There's a lot of ways we could do this, we could tell it one or more digits, followed by a period,

547
00:35:19,590 --> 00:35:25,290
and again, I have to escape that period because period in regex is the is a dot right?

548
00:35:25,290 --> 00:35:28,470
And that means one character of any kind.

549
00:35:28,680 --> 00:35:29,700
And here we want.

550
00:35:29,730 --> 00:35:30,330
No, no, no, no.

551
00:35:30,360 --> 00:35:33,030
We want literally to match a period.

552
00:35:33,240 --> 00:35:37,500
So I have to escape that, that dot to tell the rejects.

553
00:35:37,500 --> 00:35:39,210
And you know, I literally mean, I what?

554
00:35:39,450 --> 00:35:41,670
I expect a period to be there.

555
00:35:41,790 --> 00:35:46,350
So maybe we could do this, but I don't know, and I don't know if someone could have a GPA that is

556
00:35:46,350 --> 00:35:49,230
less than, you know, like a point something.

557
00:35:49,230 --> 00:35:54,000
And I don't know if that would start off with a zero or if it would not start with a zero and it would

558
00:35:54,000 --> 00:35:55,710
just start with the period.

559
00:35:56,010 --> 00:35:57,350
So I don't know.

560
00:35:57,360 --> 00:35:59,340
I may not like that approach.

561
00:35:59,340 --> 00:36:04,530
It probably certainly would work here for the example that I'm seeing, but I'm also kind of projecting

562
00:36:04,530 --> 00:36:08,640
into the future of what if I had a thousand of these reports?

563
00:36:08,640 --> 00:36:12,480
What variations in data might I encounter?

564
00:36:12,780 --> 00:36:14,790
So maybe I wouldn't do it this way?

565
00:36:16,320 --> 00:36:16,980
Let's see.

566
00:36:16,980 --> 00:36:24,660
Another way that I might do it, though, is to possibly say something like expect word characters,

567
00:36:24,660 --> 00:36:31,380
maybe expect one or more word characters, followed by a boundary.

568
00:36:31,710 --> 00:36:32,760
I think that would work.

569
00:36:32,760 --> 00:36:34,740
Actually, that would work pretty well.

570
00:36:34,920 --> 00:36:41,880
Now it's a little wide in that if there were letters here that would also match, and maybe I wouldn't

571
00:36:42,090 --> 00:36:43,200
totally like that.

572
00:36:43,440 --> 00:36:49,560
An alternative that I could do that might be a little better than that would be to use a bracket expression,

573
00:36:49,560 --> 00:36:54,060
actually, so I could tell it to allow for.

574
00:36:55,470 --> 00:36:57,900
Numbers or.

575
00:36:59,810 --> 00:37:00,590
A period.

576
00:37:00,980 --> 00:37:05,450
OK, so we could do something like this and then we can tell it.

577
00:37:05,840 --> 00:37:14,780
We will allow for one or more of those, followed by a boundary.

578
00:37:15,020 --> 00:37:18,140
And so now you can't put letters in here, right?

579
00:37:18,140 --> 00:37:18,810
It's a little more.

580
00:37:19,280 --> 00:37:21,230
Well, it's a lot more constrained, actually.

581
00:37:21,470 --> 00:37:22,070
OK.

582
00:37:22,340 --> 00:37:22,850
Let's see.

583
00:37:22,850 --> 00:37:25,240
And this is the weighted GPA.

584
00:37:25,310 --> 00:37:33,860
Grab the loops, grab the weighted GPA now because I did a little bit of speculative things here.

585
00:37:33,860 --> 00:37:35,920
I think I am going to go ahead and run this now.

586
00:37:35,930 --> 00:37:41,990
I just want to make sure that this actually works because if I go too far without running it, it'll

587
00:37:41,990 --> 00:37:44,780
be harder for me to figure out, where did I go wrong?

588
00:37:44,900 --> 00:37:49,280
Was it on this bit here or was it on this bed or whatever?

589
00:37:49,550 --> 00:37:51,530
So let's go ahead and oh, well, hold on.

590
00:37:51,920 --> 00:37:54,350
We have to try printing that out also.

591
00:37:55,290 --> 00:38:02,940
So let's give us a couple more here, gender and then state I.D. and then

592
00:38:04,980 --> 00:38:08,040
weighted GPA.

593
00:38:08,220 --> 00:38:08,720
Okay.

594
00:38:09,300 --> 00:38:10,200
Let's see what we've got.

595
00:38:11,100 --> 00:38:11,810
Three point eighty two.

596
00:38:11,880 --> 00:38:12,900
It looks like that worked.

597
00:38:13,020 --> 00:38:15,300
There it is, three point eighty two.

598
00:38:15,810 --> 00:38:19,440
And the other one was the state I.D..

599
00:38:19,920 --> 00:38:22,410
Yeah, looks like that worked just fine.

600
00:38:23,220 --> 00:38:23,880
OK, cool.

601
00:38:24,330 --> 00:38:30,660
So yeah, you got to see a little bit of my thought process on how I decided what regular expression

602
00:38:30,930 --> 00:38:35,130
would maybe work best for parsing that bit out.

603
00:38:35,430 --> 00:38:39,090
Now, the nice thing at this point is now I can just duplicate this line.

604
00:38:40,650 --> 00:38:48,240
And do almost exactly the same thing for the unweighted unweighted right, because there's pretty much

605
00:38:48,240 --> 00:38:53,820
no difference here on weighted GPA grabbed the.

606
00:38:54,780 --> 00:38:56,970
In one way, weighted GPA there.

607
00:38:57,270 --> 00:39:00,120
Yeah, I think that's pretty much it.

608
00:39:00,390 --> 00:39:05,460
And then duplicate this line on, let's run it and see what we got.

609
00:39:06,450 --> 00:39:06,900
Cool.

610
00:39:07,440 --> 00:39:10,770
Looks like we're parsing everything out that we want.

611
00:39:10,980 --> 00:39:11,310
Right?

612
00:39:11,550 --> 00:39:18,600
So here here was our input, starting from the bottom three point four six three point eight two eight

613
00:39:18,600 --> 00:39:23,670
nine two blah blah blah gender is m birth date.

614
00:39:24,390 --> 00:39:30,810
We broke that out into the individual components of the year, the day of the month and then the month,

615
00:39:30,810 --> 00:39:32,340
which is right there.

616
00:39:33,270 --> 00:39:37,540
And then the grade was 11 and then the student number was this.

617
00:39:37,770 --> 00:39:44,190
So yeah, I mean, we just did a nice job here of parsing out this whole entire thing.

618
00:39:44,400 --> 00:39:50,910
We kind of put together a lot of what we've learned in this section on regular expressions, right?

619
00:39:51,150 --> 00:39:53,040
Put some comments in here as well.

620
00:39:53,220 --> 00:39:56,640
Broke it out so that it's a lot easier to read.

621
00:39:57,000 --> 00:40:01,500
Can you imagine how terrible this would look if we had this all in one massive line?

622
00:40:01,500 --> 00:40:05,760
In fact, we got the dot all in the comments and all of this good stuff.

623
00:40:05,790 --> 00:40:11,040
OK, so let's go ahead and end this lesson here, and I will see you in the next one.
