WEBVTT
1
00:00:00.060 --> 00:00:08.220
So in the last lesson, we learned how we could add fields to an enum, as well as a custom constructor

2
00:00:08.730 --> 00:00:12.090
to allow us to set data on those fields.

3
00:00:12.780 --> 00:00:20.160
And then we also devised a way of associating symbols with the various values of a suit.

4
00:00:20.460 --> 00:00:28.470
And we left off with getting ready to make it so that when we pass a card into a print line, for example,

5
00:00:28.680 --> 00:00:36.360
we were going to customize the two string method of the card class so that it would print the value

6
00:00:36.360 --> 00:00:38.710
of the card with the symbol.

7
00:00:38.730 --> 00:00:40.740
So let's go ahead and implement that now.

8
00:00:41.220 --> 00:00:41.580
All right.

9
00:00:41.590 --> 00:00:49.650
So here we are in the card class and we already have created two cards from one of the previous lessons.

10
00:00:49.920 --> 00:00:55.950
So really, what we want to do is just make it so that if we were to pass either of these instances

11
00:00:55.950 --> 00:01:03.960
into a system out that print line that it would print the value of the card as well as the suit using

12
00:01:03.960 --> 00:01:05.140
the symbol, though.

13
00:01:05.520 --> 00:01:07.260
So let's see what it does currently.

14
00:01:07.740 --> 00:01:13.530
If we just do a sell out like this and then just pass in the card one and then I'll duplicate that line

15
00:01:13.530 --> 00:01:16.080
and make another one card too.

16
00:01:16.290 --> 00:01:19.590
And then let's just run this and see what it currently does.

17
00:01:20.250 --> 00:01:28.440
OK, so currently it just prints out with the default to string implementation of all objects, which

18
00:01:28.440 --> 00:01:34.680
is to print out the fully qualified class theme and that symbol and then the location in memory.

19
00:01:34.680 --> 00:01:36.480
So that's not at all what we want.

20
00:01:36.660 --> 00:01:41.490
So the first thing we're going to want to do is to override the two string method.

21
00:01:41.490 --> 00:01:48.270
And so we can do that by just making a new method here and then going to do a control o and then I will

22
00:01:48.270 --> 00:01:50.990
choose to string all right.

23
00:01:51.000 --> 00:01:56.250
And now I can do something different for the implementation of the two string method.

24
00:01:56.460 --> 00:02:04.140
So what I think I want is to make it print out something like in the case of the jack of clubs.

25
00:02:05.160 --> 00:02:05.610
I don't know.

26
00:02:05.610 --> 00:02:12.450
Maybe it would say Jack and then the symbol for clubs.

27
00:02:13.620 --> 00:02:20.760
So I'll just say club symbol since I don't know how to type that in easily.

28
00:02:20.910 --> 00:02:22.020
So something like that.

29
00:02:22.950 --> 00:02:23.330
All right.

30
00:02:23.340 --> 00:02:26.490
So let's see, how can we do that?

31
00:02:26.610 --> 00:02:39.120
Well, let's see what would happen first off, if we were to simply return something like this dot rank

32
00:02:39.360 --> 00:02:48.450
dot to string plus this dot suit dot to string.

33
00:02:48.600 --> 00:02:49.830
Let's see what that looks like.

34
00:02:50.700 --> 00:02:54.990
So we can just rerun the main method.

35
00:02:55.800 --> 00:02:56.160
Hey.

36
00:02:57.310 --> 00:02:59.350
I think that does it right, Jack.

37
00:02:59.680 --> 00:03:05.410
And then there's a little picture of a club there and in 10 and a little picture of a diamond there.

38
00:03:05.800 --> 00:03:10.900
Now if we wanted this to look a little nicer, maybe like put a little space in there, for example,

39
00:03:11.080 --> 00:03:12.020
we could do that.

40
00:03:12.040 --> 00:03:12.520
Let's see.

41
00:03:12.550 --> 00:03:16.630
So can you think of some good ways that we could just get a little space in there?

42
00:03:18.090 --> 00:03:18.430
All right.

43
00:03:18.450 --> 00:03:21.970
Let me see, let me think what's what would be my favorite way to do this?

44
00:03:21.990 --> 00:03:28.050
Maybe we'll just I'll just use the contact method instead of the plus.

45
00:03:31.750 --> 00:03:37.270
Can cat space, you know, do one more cat?

46
00:03:41.130 --> 00:03:41.730
Like so.

47
00:03:41.910 --> 00:03:48.630
And do you recall when we were learning about text strings and things, I taught that if you're just

48
00:03:48.630 --> 00:03:59.670
going to concatenate just two strings string one and string two, it might be OK to use the plus symbol

49
00:03:59.670 --> 00:04:02.910
to do that, especially if it's not in a loop or anything like that.

50
00:04:03.240 --> 00:04:10.800
But if you're going to be concatenating more than two strings, you may want to strongly consider using

51
00:04:10.950 --> 00:04:17.610
any other technique that you have learned, such as using the con cat methodology or a string builder

52
00:04:17.640 --> 00:04:19.530
or something of something of that sort.

53
00:04:19.540 --> 00:04:24.570
So that's why, for the first little implementation of the two string that we see here, I just used

54
00:04:24.570 --> 00:04:25.380
the plus symbol.

55
00:04:25.380 --> 00:04:31.410
But now that I'm wanting to put a space in between, I'm not so inclined to use the plus symbol anymore,

56
00:04:31.410 --> 00:04:33.510
even though I could certainly could.

57
00:04:33.780 --> 00:04:35.910
All right, so let's run that one more time.

58
00:04:40.090 --> 00:04:42.610
OK, so there's a little bit of space in there now.

59
00:04:42.640 --> 00:04:48.520
All right now, let's see, there's another thing I want to show you within rooms.

60
00:04:49.000 --> 00:04:57.340
So let's say that we want the ability to create cards in another way.

61
00:04:57.340 --> 00:05:04.510
Also, let's say that we additionally would like to be able to create a card like this card card three

62
00:05:04.510 --> 00:05:15.340
equals new card, and we want the option of being able to use strings also and to be able to say something

63
00:05:15.340 --> 00:05:22.060
like Hearts Comma Queen.

64
00:05:23.800 --> 00:05:24.120
All right.

65
00:05:24.130 --> 00:05:29.680
So we want to be able to do this, but have everything still work the same, right?

66
00:05:29.890 --> 00:05:31.990
So let's see how we can do that.

67
00:05:32.680 --> 00:05:40.900
So this approach that we're trying to do here would be handled by what part of our code can you think

68
00:05:40.900 --> 00:05:41.110
of?

69
00:05:41.440 --> 00:05:46.600
Like, what would we need to add to even allow this to be accepted?

70
00:05:48.320 --> 00:05:53.100
All right, so well, we could add an additional constructor.

71
00:05:53.150 --> 00:05:59.660
So let's go to the constructor of this class, which is right here, and what we can do is simply add

72
00:05:59.660 --> 00:06:00.380
another one.

73
00:06:04.220 --> 00:06:13.670
I'll just create this by hand this time, string suit, string ring, just like that.

74
00:06:13.940 --> 00:06:15.350
Now here's the trick.

75
00:06:16.430 --> 00:06:18.800
What are we going to do with these strings?

76
00:06:18.890 --> 00:06:22.270
I'm not going to add additional fields to this class.

77
00:06:22.280 --> 00:06:26.000
I want to keep using these fields that we already have.

78
00:06:26.240 --> 00:06:34.970
So what we really want to do is to be able to translate from a string to an enum.

79
00:06:35.390 --> 00:06:41.930
And it just so happens that Ingham's have that ability built right into them, and that is done with

80
00:06:42.050 --> 00:06:46.190
another method on the enum called value of.

81
00:06:46.400 --> 00:06:49.370
So this should actually be relatively easy to do.

82
00:06:49.670 --> 00:06:57.350
Now one thing to note, though, I did specify these strings in all lowercase.

83
00:06:57.710 --> 00:07:06.170
And one key of using the value of method on enemies is that the strings should match the constants that

84
00:07:06.170 --> 00:07:07.880
are defined in the Enum.

85
00:07:08.210 --> 00:07:16.280
So not only do we need to translate from a string to an enum, we need to translate from the case of

86
00:07:16.310 --> 00:07:19.940
the string to the case of the constants.

87
00:07:20.180 --> 00:07:23.630
Can you think of how to do that in here?

88
00:07:24.730 --> 00:07:27.910
If you want to go ahead and pause and see if you can work that out.

89
00:07:29.560 --> 00:07:31.870
All right, so let's do this real quick.

90
00:07:32.170 --> 00:07:40.150
So what we should be able to do then is just as with this first constructor where we are taking the

91
00:07:40.150 --> 00:07:45.370
input and then setting it on the fields, we can almost do the same thing, except we'll have to go

92
00:07:45.370 --> 00:07:47.680
through a little bit of translation, right?

93
00:07:47.890 --> 00:07:49.720
So I'm going to do this.

94
00:07:49.720 --> 00:07:52.420
That suit equals.

95
00:07:52.780 --> 00:08:01.210
And then what we can do is suit dot the value of.

96
00:08:02.530 --> 00:08:03.160
We'll use.

97
00:08:03.430 --> 00:08:05.080
Now there's two value of methods.

98
00:08:05.080 --> 00:08:11.290
We want this one that takes a string, which is the name right value of.

99
00:08:11.500 --> 00:08:15.520
And then we will reference this incoming suit.

100
00:08:15.670 --> 00:08:22.180
And remember now when there's any chance for ambiguity or confusion of which variable we are talking

101
00:08:22.180 --> 00:08:22.510
about.

102
00:08:22.510 --> 00:08:26.530
If there are two variables in this case, there's a variable called suit here.

103
00:08:26.740 --> 00:08:29.200
And then there's a variable called suit here.

104
00:08:29.470 --> 00:08:37.570
When we have this kind of situation, that's particularly where the this key word is quite useful.

105
00:08:38.140 --> 00:08:44.590
By using the this key word here, I'm talking about the field variable suit.

106
00:08:45.220 --> 00:08:50.320
This lawsuit means this object, the whole object.

107
00:08:50.320 --> 00:08:55.120
So the suit that belongs to the entire object, which is this suit here.

108
00:08:55.150 --> 00:08:55.630
OK.

109
00:08:55.870 --> 00:09:01.030
Whereas this suit is just a local variable for the method itself.

110
00:09:01.060 --> 00:09:01.960
So anyway, OK.

111
00:09:02.380 --> 00:09:08.710
So what we can do is suit dot to uppercase.

112
00:09:10.060 --> 00:09:14.860
Just like that, and then we'll do the same for the rank.

113
00:09:15.700 --> 00:09:25.210
Rank equals rank, not value of then we'll take the local rank to upper case.

114
00:09:29.960 --> 00:09:36.380
And that should give us what we're looking for now, how will we know if we actually got it?

115
00:09:36.890 --> 00:09:46.190
Well, I think one easy thing we could do is to simply print this card three so we can just come down

116
00:09:46.190 --> 00:09:50.780
here and do one more system that out and pass in Card three.

117
00:09:51.140 --> 00:09:56.510
And let's run this and see if we get a queen of hearts for the third card.

118
00:09:58.580 --> 00:09:59.520
Hey, look at that.

119
00:09:59.540 --> 00:10:01.220
There it is, Queen of Hearts.

120
00:10:01.910 --> 00:10:03.410
So looks like that worked.

121
00:10:04.730 --> 00:10:05.060
All right.

122
00:10:05.060 --> 00:10:08.870
So that's pretty much going to wrap up what we are going to learn about enemies.

123
00:10:08.900 --> 00:10:11.540
So let me just recap briefly.

124
00:10:11.810 --> 00:10:15.680
So enemies are a special type of class.

125
00:10:15.920 --> 00:10:23.870
They are most useful when we need to be able to represent a finite set of values that are related in

126
00:10:23.870 --> 00:10:30.920
some way, like days of the week or symbols of a deck of playing cards or something of that sort.

127
00:10:31.280 --> 00:10:38.360
And because they are still a form of class, we can still implement methods on them.

128
00:10:38.480 --> 00:10:41.900
They can have constructors, they can have fields and properties.

129
00:10:42.170 --> 00:10:48.920
And what's nice is those properties, if we choose to define some on an enum can be associated with

130
00:10:48.920 --> 00:10:54.110
each constant, which is really just an instance of the class itself, right?

131
00:10:54.110 --> 00:10:58.550
So we can associate will go back and just see what that looks like again, real quick.

132
00:10:58.970 --> 00:10:59.270
All right.

133
00:10:59.270 --> 00:11:08.210
So here we are associating symbols which are of type care to the constants of this enum, and these

134
00:11:08.210 --> 00:11:14.060
constants really are just instances of this class called suit, right?

135
00:11:14.570 --> 00:11:20.870
To create an enum instead of using the class keyword, though, we use the enum keyword.

136
00:11:20.900 --> 00:11:21.380
OK.

137
00:11:22.370 --> 00:11:25.070
Let's see if we go into the renck enum.

138
00:11:25.100 --> 00:11:33.170
We also saw previously that we can use interms in if statements and in switches, just like any other

139
00:11:33.170 --> 00:11:40.850
variable type as well in rooms have a built in order index associated with them, and we can access

140
00:11:40.850 --> 00:11:46.040
that value by calling the ordinal method that all enemies inherit.

141
00:11:46.370 --> 00:11:53.110
And we can create an instance of an enum like one of the constants of an enum.

142
00:11:53.120 --> 00:12:01.580
We can go from a string to one of the constants of an enum by using the value of method, which is also

143
00:12:01.580 --> 00:12:03.470
a standard method of enemies.

144
00:12:03.680 --> 00:12:10.190
So they're quite useful and we will probably revisit them and make more use of them in future lessons.

145
00:12:10.430 --> 00:12:16.220
So with that, I'm going to wrap this up and we will move on to some more really interesting topics

146
00:12:16.430 --> 00:12:19.280
in Java's object oriented toolbox.

147
00:12:19.400 --> 00:12:20.930
So I will see you in the next one.
