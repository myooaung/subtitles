1
00:00:00,510 --> 00:00:08,520
This is an addendum lesson on how to use the newest features of the Switch statement in Java version

2
00:00:08,520 --> 00:00:13,150
17 or JDK 17 in JDK 17.

3
00:00:13,170 --> 00:00:16,770
They have added a sneak preview feature, if you will.

4
00:00:16,980 --> 00:00:21,000
And I want to show you how you can use these features and how you can turn them on as well.

5
00:00:21,870 --> 00:00:26,280
So what I have here is another little class you don't necessarily need to follow along with me, but

6
00:00:26,280 --> 00:00:28,230
you're welcome to copy what I have here.

7
00:00:28,470 --> 00:00:30,990
I just want to show you these features very quickly.

8
00:00:31,170 --> 00:00:37,800
So what I have here is a number of variables that I've created labeled VAR one through five.

9
00:00:38,430 --> 00:00:40,800
I've also created basically a class.

10
00:00:40,800 --> 00:00:42,840
This is a preview that I'm showing you here.

11
00:00:42,840 --> 00:00:45,660
You will learn how to make this, although it's pretty straightforward.

12
00:00:45,930 --> 00:00:47,790
Just know that this thing here.

13
00:00:47,830 --> 00:00:50,900
Record person is basically a class.

14
00:00:50,910 --> 00:00:55,290
It's just a very, very lightweight class, and you will learn this in a later lesson.

15
00:00:55,620 --> 00:01:00,880
So I'm defining a class that models a person with a first name, last name and an age.

16
00:01:00,910 --> 00:01:01,320
OK.

17
00:01:01,620 --> 00:01:06,070
And I'm just doing it here in line because I just wanted to keep everything concise for this lesson.

18
00:01:06,090 --> 00:01:08,550
So let me explain the scenario here.

19
00:01:08,850 --> 00:01:15,960
I've got these variables defined of different data types like here's a string, an integer, a string

20
00:01:15,960 --> 00:01:17,940
array and then a couple of people.

21
00:01:18,450 --> 00:01:25,330
And what I'd like to be able to do is to assign to this OBJ variable any one of these variables up here.

22
00:01:25,350 --> 00:01:31,440
So for example, right now in line 10, I'm assigning VAR one to OBJ, but I could assign VAR to or

23
00:01:31,440 --> 00:01:32,850
VAR five or whatever, right?

24
00:01:33,240 --> 00:01:40,290
And then I'd like to be able to basically test certain characteristics of the object being pointed to

25
00:01:40,320 --> 00:01:44,100
by by OBJ and have some outcome occur.

26
00:01:44,130 --> 00:01:52,080
So for example, if OBJ is a string, then I would like to be able to print out that string with its

27
00:01:52,080 --> 00:01:55,780
message if OBJ is an integer.

28
00:01:55,800 --> 00:01:59,400
Then I'd like to be able to say, Hey, this is a number, and here's your number.

29
00:01:59,790 --> 00:02:08,640
If OBJ is something of type person and that person's first name's length is greater than three, then

30
00:02:09,060 --> 00:02:12,930
print out, it looks like we're talking about Jake and so on and so forth.

31
00:02:12,960 --> 00:02:13,230
Right.

32
00:02:13,470 --> 00:02:21,570
So this ability to do this is called pattern matching and a number of modern languages do have some

33
00:02:21,570 --> 00:02:23,220
capability like this.

34
00:02:23,520 --> 00:02:26,490
Java might be a little late to the party in getting it.

35
00:02:26,700 --> 00:02:34,950
And so what the creators of Java have done is they've enabled an implementation and attempt at implementing

36
00:02:34,950 --> 00:02:37,470
pattern matching with switches.

37
00:02:38,070 --> 00:02:41,250
So they've made it available as a preview feature.

38
00:02:41,430 --> 00:02:46,980
And so in order to get rid of these red squiggles, we have to enable this preview feature.

39
00:02:47,010 --> 00:02:49,710
OK, so first thing, I want to show you how to do that.

40
00:02:49,830 --> 00:02:57,270
Now this is assuming you're running Java version 17 or later now by version eighteen, they may have

41
00:02:57,270 --> 00:03:02,490
gone ahead and enabled this by default, and therefore you won't need to do anything because it'll just

42
00:03:02,490 --> 00:03:02,970
be there.

43
00:03:03,120 --> 00:03:06,960
But as of right now, the current version of Java is 17.

44
00:03:07,530 --> 00:03:12,450
So to enable the pattern matching preview in version 17 of Java.

45
00:03:13,140 --> 00:03:16,260
First of all, let me open up the project pane.

46
00:03:16,830 --> 00:03:24,900
Like so and and then I will highlight the people project here, and then I can right click on it and

47
00:03:24,900 --> 00:03:26,460
go down to.

48
00:03:27,630 --> 00:03:30,720
Open module settings, or you can do a command down.

49
00:03:32,690 --> 00:03:33,140
All right.

50
00:03:33,590 --> 00:03:41,690
And then from here, you need to click on Project and assuming you have version 17, install Java Version

51
00:03:41,690 --> 00:03:43,340
17 installed, which you should.

52
00:03:43,700 --> 00:03:44,750
This should be set.

53
00:03:44,750 --> 00:03:51,560
But down here we can get a little more specific with what types of functionality we want to utilize

54
00:03:51,560 --> 00:03:53,300
in Java version 17.

55
00:03:53,540 --> 00:03:58,340
And so if you click on this dropdown box here, you'll see that there are preview features that you

56
00:03:58,340 --> 00:03:59,090
can enable.

57
00:03:59,330 --> 00:04:06,140
And so all you need to do is simply select that OK and then click Apply and then OK.

58
00:04:07,190 --> 00:04:14,030
And now those red squiggles go away because now the ID understands this syntax.

59
00:04:14,360 --> 00:04:20,480
All right, so I'm going to give myself a little room here by closing the project pane on the left.

60
00:04:20,780 --> 00:04:21,060
All right.

61
00:04:21,100 --> 00:04:23,820
And so now we can play around with these features a little bit.

62
00:04:23,840 --> 00:04:27,050
So currently I'm setting up a two bar one.

63
00:04:27,170 --> 00:04:30,350
And so that should cause this case to run.

64
00:04:30,530 --> 00:04:32,120
Let's confirm that.

65
00:04:33,510 --> 00:04:34,170
Yeah, there we go.

66
00:04:34,200 --> 00:04:35,130
So print it out.

67
00:04:35,160 --> 00:04:35,940
Hello, world.

68
00:04:36,240 --> 00:04:37,440
And we'll just run through these.

69
00:04:37,620 --> 00:04:44,610
So then if I set the bar, if I said OBJ to bar two and we'll run that.

70
00:04:45,650 --> 00:04:46,350
Yeah, there we go.

71
00:04:46,370 --> 00:04:47,840
So now we're getting a different output.

72
00:04:47,870 --> 00:04:50,600
Your number is and then it's actually showing the number.

73
00:04:50,840 --> 00:05:00,080
So the way that this is working is that not only is the case statement matching on the data type of

74
00:05:00,080 --> 00:05:09,620
the object or OBJ variable, it's also giving us a local variable that we can use to refer to whatever

75
00:05:09,620 --> 00:05:11,300
this was that was passed in.

76
00:05:11,330 --> 00:05:22,280
OK, so we're basically saying if OBJ is of type string, then let me refer to OBJ by the name message

77
00:05:22,970 --> 00:05:24,500
so that I can use it over here.

78
00:05:24,620 --> 00:05:26,780
Now you might be wondering, that's kind of weird.

79
00:05:26,780 --> 00:05:29,480
How come we're not just calling it OBJ, right?

80
00:05:29,870 --> 00:05:36,560
The reason we're not calling it OBJ is because the variable OBJ is of type object, which is a highly

81
00:05:36,560 --> 00:05:38,150
generic data type, right?

82
00:05:38,450 --> 00:05:49,370
And so if I were to refer to OBJ directly down in here, I might not be able to access fields and methods

83
00:05:49,370 --> 00:05:51,950
that are specific to whatever the real data type is.

84
00:05:51,950 --> 00:05:59,000
And here's a good example on line 14, we're saying that if OBJ is a type person, then let's start

85
00:05:59,000 --> 00:06:00,950
calling it P instead of OBJ.

86
00:06:01,640 --> 00:06:06,770
And if p dot first name dot length is greater than three.

87
00:06:06,800 --> 00:06:13,940
So this first name dot length would not be available to us if we were just referring to this as OBJ.

88
00:06:14,030 --> 00:06:20,690
And let me show you, in fact, what happens if if I were to even try that, OK, so I will rename this

89
00:06:20,690 --> 00:06:23,870
local P variable to Obi J.

90
00:06:25,110 --> 00:06:25,920
Like so.

91
00:06:26,220 --> 00:06:31,230
And first off, the aid doesn't like it because this is considered a different variable, right?

92
00:06:31,240 --> 00:06:36,390
So it says here variable, it is already defined in the scope, which is this telling us that I've already

93
00:06:36,510 --> 00:06:38,690
got an object up here, right?

94
00:06:39,090 --> 00:06:41,010
So that's one reason I can't do that.

95
00:06:41,190 --> 00:06:47,640
Now the other thing is, if I were to maybe like, get rid of this bit here, then it all starts to

96
00:06:47,640 --> 00:06:51,720
break down because now I'm no longer doing the pattern matching right.

97
00:06:51,870 --> 00:06:59,010
So the way that this pattern matching works is that I am specifying a data type in this particular case,

98
00:06:59,010 --> 00:07:02,040
at least with the pattern matching, I'm specifying a data type.

99
00:07:03,090 --> 00:07:03,980
Which is person?

100
00:07:05,340 --> 00:07:10,770
And then I can also declare a local variable name of that specific data type.

101
00:07:11,370 --> 00:07:13,470
And then I can start using it over here.

102
00:07:13,560 --> 00:07:19,350
So I can't call this OBJ because this OBJ, which is of type object, is already taken.

103
00:07:19,500 --> 00:07:22,440
So you almost can think of the local type down here.

104
00:07:22,920 --> 00:07:24,690
It's really a whole new variable.

105
00:07:24,720 --> 00:07:25,170
OK.

106
00:07:26,090 --> 00:07:29,340
All right, so I'm just going to undo that little change there.

107
00:07:29,360 --> 00:07:36,350
OK, so the other thing to notice here is that as part of my pattern matching down here on Line 14,

108
00:07:36,530 --> 00:07:46,760
not only am I able to use the Switch statement to say, basically if OBJ is of type person, then create

109
00:07:46,760 --> 00:07:51,030
a new variable that refers to its data as, and call it P.

110
00:07:51,290 --> 00:07:56,870
I am also able to add another case to this test.

111
00:07:57,090 --> 00:08:03,980
I'm able to say not only do I want to know if it's of type person, but if it is, then I also want

112
00:08:03,980 --> 00:08:09,350
to be able to test whether or not some property or some properties have some value, right?

113
00:08:09,560 --> 00:08:16,460
So in this case, I'm able to drill in deeper and say if the first name of P if the length of the first

114
00:08:16,460 --> 00:08:18,770
name of P is greater than three.

115
00:08:18,950 --> 00:08:21,470
Then finally, do all of this.

116
00:08:21,590 --> 00:08:24,740
OK, so that's some pretty advanced functionality there.

117
00:08:24,890 --> 00:08:27,380
And that's what you really get with this pattern matching.

118
00:08:27,680 --> 00:08:33,410
OK, and then one other scenario I want to show you here, I think I touched on it in the previous lesson

119
00:08:33,410 --> 00:08:39,500
or the one before that where I said that one downfall of switch statements in Java traditionally is

120
00:08:39,500 --> 00:08:41,930
that they don't handle null.

121
00:08:42,680 --> 00:08:49,730
OK, so if you have null here with the traditional switch implementation, you couldn't say something

122
00:08:49,730 --> 00:08:50,780
like case null.

123
00:08:50,780 --> 00:08:52,820
Like what if the what if the thing is null?

124
00:08:53,030 --> 00:08:57,140
Well, with this preview implementation, you can actually do that.

125
00:08:57,320 --> 00:09:01,130
And the way that we can do that is actually we can come down here and have another case.

126
00:09:01,130 --> 00:09:05,690
And by the way, this bit here, this having this word case here is actually optional.

127
00:09:05,690 --> 00:09:06,770
I didn't need that.

128
00:09:07,160 --> 00:09:13,010
But if I want to be able to say something like for all other cases, just do the default, including

129
00:09:13,010 --> 00:09:19,310
null, including null, I can do this case null, comma default.

130
00:09:19,320 --> 00:09:26,990
So now I'm able to say if it's null or just not any of these things here, then do this, then do this

131
00:09:26,990 --> 00:09:27,530
last bit.

132
00:09:27,650 --> 00:09:31,170
And by the way, I can actually put that case null on its own line as well.

133
00:09:31,190 --> 00:09:34,220
I could also just do this.

134
00:09:36,940 --> 00:09:37,750
It's no.

135
00:09:39,990 --> 00:09:43,980
And then I can get rid of that bit.

136
00:09:45,140 --> 00:09:45,530
There.

137
00:09:46,070 --> 00:09:51,530
OK, so you can do either of those, you can combine the null in the default case in one, as I did

138
00:09:51,530 --> 00:09:54,080
earlier, or you can pull it out into its own separate thing.

139
00:09:54,440 --> 00:09:54,710
All right.

140
00:09:54,710 --> 00:09:56,930
So let's just run that just to prove it real quick.

141
00:09:58,000 --> 00:09:58,510
There you go.

142
00:09:58,540 --> 00:10:02,530
So it's null and then over here, I could do a double.

143
00:10:02,890 --> 00:10:04,810
OK, so there's a double there.

144
00:10:05,380 --> 00:10:09,760
And now if I run this, we should get the default.

145
00:10:10,090 --> 00:10:10,460
Yeah.

146
00:10:10,480 --> 00:10:11,440
I have no idea.

147
00:10:11,470 --> 00:10:11,770
Right.

148
00:10:12,040 --> 00:10:12,400
All right.

149
00:10:12,400 --> 00:10:14,720
So that's all I wanted to show in this lesson.

150
00:10:14,740 --> 00:10:18,040
This is really some pretty powerful stuff that they've added.

151
00:10:18,040 --> 00:10:22,180
But again, I just want emphasize this is as a version 17.

152
00:10:22,180 --> 00:10:24,220
This is still a preview feature.

153
00:10:24,430 --> 00:10:29,860
So if you work at a company and you want to utilize this, you would have to enable this functionality

154
00:10:29,860 --> 00:10:32,770
on the JDK as a switch statement.

155
00:10:32,950 --> 00:10:37,660
If you'll notice here when I'm actually running the program or when the app is running the program,

156
00:10:37,840 --> 00:10:42,280
it's actually throwing this enable preview switch on here.

157
00:10:42,580 --> 00:10:49,660
And you or the people who administer the application servers where Java is actually installed and configured

158
00:10:49,870 --> 00:10:55,210
would have to go in and actually enable this functionality in order for you to be able to use these

159
00:10:55,210 --> 00:10:55,990
things OK.

160
00:10:56,200 --> 00:11:01,630
Or if you're using Docker, which we might touch on what Docker is a little later you'd have to remember

161
00:11:01,630 --> 00:11:04,550
to enable your JVM with this capability.

162
00:11:04,630 --> 00:11:05,050
OK.

163
00:11:05,470 --> 00:11:11,680
So you won't be able to do these things out of the box with current version in Java 17, maybe as of

164
00:11:11,680 --> 00:11:13,120
Java 18 possibly.

165
00:11:13,300 --> 00:11:13,660
All right.

166
00:11:13,690 --> 00:11:15,340
That's going to wrap up this lesson.

167
00:11:15,490 --> 00:11:16,480
See in the next one.
