1
00:00:00,570 --> 00:00:06,090
All right, so before we jump back in to looking at more of the functions that are available to us with

2
00:00:06,090 --> 00:00:10,830
both sequel and H2, I want to show you a couple other little quick tidbits here.

3
00:00:11,190 --> 00:00:16,350
One of them is the fact that we can actually move these columns around in different order.

4
00:00:16,370 --> 00:00:20,250
So if you, for example, would prefer to have the last name be first.

5
00:00:20,490 --> 00:00:28,490
That's easy enough to do by simply just reordering how they show up in the select list here.

6
00:00:28,500 --> 00:00:29,130
So I'm just.

7
00:00:30,250 --> 00:00:31,480
Swapping those out.

8
00:00:32,560 --> 00:00:33,470
OK, and there you go.

9
00:00:33,490 --> 00:00:35,110
So now you've got the last name and then.

10
00:00:35,290 --> 00:00:40,780
And in the cast there, another thing that you can do now jumping back into some of these functions.

11
00:00:42,890 --> 00:00:47,990
Here we're currently just taking the average of the salary, but let's say that we just want to count

12
00:00:47,990 --> 00:00:54,740
the number of people in each group by last name, which would effectively count the number of people

13
00:00:54,740 --> 00:00:55,910
in the family, right?

14
00:00:56,360 --> 00:01:01,910
So we could do instead of a cast we can call count.

15
00:01:01,910 --> 00:01:04,940
And this is one of the most used functions.

16
00:01:04,940 --> 00:01:08,450
And I I don't know technically, I guess this would be a more of a school function.

17
00:01:09,530 --> 00:01:14,720
This is one of the most used functions you'll ever use in in, in in school.

18
00:01:15,030 --> 00:01:22,580
So typically, the way you'll see this done most often is with the asterisks, meaning we don't even

19
00:01:22,580 --> 00:01:24,560
really care which which column.

20
00:01:24,560 --> 00:01:26,300
So go ahead and just count them all.

21
00:01:27,230 --> 00:01:30,350
So if we do this and run it, there we go.

22
00:01:30,380 --> 00:01:35,580
Now we see that the Johnson family has four members and the Smith family has one.

23
00:01:35,690 --> 00:01:36,230
OK.

24
00:01:36,770 --> 00:01:40,490
Now you can put just about anything in there.

25
00:01:40,490 --> 00:01:47,090
So I could just refer to one of the fields, such as the last name field, which we're already querying

26
00:01:47,090 --> 00:01:48,200
for anyway.

27
00:01:49,400 --> 00:01:50,750
That works just as well.

28
00:01:51,530 --> 00:01:56,540
OK, so then let me show you this now I'm going to take the grouping off now.

29
00:01:57,570 --> 00:02:01,560
And let's see here, let's just do.

30
00:02:02,130 --> 00:02:07,650
Last name, first name, date of birth.

31
00:02:08,580 --> 00:02:10,470
OK, so there are those fields.

32
00:02:11,010 --> 00:02:18,600
OK, so here I've got the H2 website up here and we can look at the various functions that are available

33
00:02:18,600 --> 00:02:21,570
to us if I just click on functions here.

34
00:02:24,490 --> 00:02:29,890
So we've got numeric functions, string functions, time and date functions, and those are about all

35
00:02:29,890 --> 00:02:32,230
that I care to kind of look at at this time.

36
00:02:32,560 --> 00:02:37,570
So a lot of these numeric functions are some of the same types of functions that you would see in Java

37
00:02:37,570 --> 00:02:39,350
under the math class.

38
00:02:39,370 --> 00:02:39,880
OK.

39
00:02:40,270 --> 00:02:41,500
And then the string functions.

40
00:02:41,500 --> 00:02:45,130
Many of these would be the functions that you'd find under the string class.

41
00:02:46,720 --> 00:02:47,710
I wouldn't be surprised.

42
00:02:47,740 --> 00:02:53,500
In fact, since H2 has written in Java, if some of these functions really just delegate down to the

43
00:02:53,500 --> 00:02:57,580
underlying Java string function itself or method themselves.

44
00:02:57,760 --> 00:03:01,180
And then again, some various time and date functions as well.

45
00:03:01,330 --> 00:03:05,080
So we'll play with a few of these, but they're pretty easy to understand.

46
00:03:05,080 --> 00:03:09,940
And if you ever have any interest in using one of these and this is specifically for H2, but other

47
00:03:09,940 --> 00:03:13,390
databases have very similar lists of functions and things.

48
00:03:14,200 --> 00:03:18,670
If there's ever one that you're not sure how to use, you can always just click on it and then see a

49
00:03:18,670 --> 00:03:23,080
little more information, like the syntax of how to use it, for example.

50
00:03:23,860 --> 00:03:27,970
All right, so let's take a look at a few of these like we've got an upper and a lower.

51
00:03:28,360 --> 00:03:32,140
So those are just like the Java versions of two upper to lower.

52
00:03:32,170 --> 00:03:39,550
So if we wanted to uppercase the last names, for example, the way we would do that is just to call

53
00:03:39,550 --> 00:03:45,250
the upper method here, and it looks quite similar to what you would do in Java.

54
00:03:45,790 --> 00:03:46,240
All right.

55
00:03:46,250 --> 00:03:49,810
So by doing that and let's run it, here we go.

56
00:03:49,840 --> 00:03:53,290
So now the last names are all uppercase, like so.

57
00:03:55,050 --> 00:04:03,470
Let's say that we wanted to have one field that we think of as just name, so it's not a last name or

58
00:04:03,490 --> 00:04:05,240
first name, it's just name, right?

59
00:04:05,880 --> 00:04:12,000
And it would be comprised, though, of the last name and the first name, maybe even separated by a

60
00:04:12,000 --> 00:04:12,510
comma.

61
00:04:12,510 --> 00:04:14,880
Perhaps so we can do that.

62
00:04:15,210 --> 00:04:26,160
The way to do that would be there is a cat method can cat and then we can refer to the last name field.

63
00:04:28,000 --> 00:04:28,570
Karma.

64
00:04:30,110 --> 00:04:35,210
And then we can throw a comma in here just like this with another comma.

65
00:04:35,630 --> 00:04:38,450
And then first name.

66
00:04:39,810 --> 00:04:46,170
Like so, so I know that's a little confusing to look at, but we've got the last name and then a comma

67
00:04:46,170 --> 00:04:48,690
and then the first name, so let's run that and see.

68
00:04:49,140 --> 00:04:49,490
All right.

69
00:04:49,500 --> 00:04:54,500
So now you've got Johnson, Harry, I probably should actually put a space after that comma.

70
00:04:54,510 --> 00:04:55,530
Let's run that again.

71
00:04:55,620 --> 00:04:56,190
There we go.

72
00:04:56,230 --> 00:04:58,110
A little more readable now.

73
00:04:58,110 --> 00:05:00,980
We might not like the output field name here.

74
00:05:00,990 --> 00:05:02,340
That's not very friendly.

75
00:05:02,520 --> 00:05:06,090
It would be nicer if it were just called something like name.

76
00:05:06,390 --> 00:05:14,520
So if we put as and then the name of a new field, which is called a column alias, then we can change

77
00:05:14,520 --> 00:05:16,380
the name of the field for the output.

78
00:05:16,500 --> 00:05:20,790
Now we're not really changing the underlying table name, fill filled name or anything like that.

79
00:05:21,330 --> 00:05:23,040
This is just for output purposes.

80
00:05:24,140 --> 00:05:24,680
There you go.

81
00:05:24,710 --> 00:05:28,340
So now you've got a name for this, and that makes a lot of sense, right?

82
00:05:28,790 --> 00:05:32,860
And we can even embed other function calls within our function call.

83
00:05:32,870 --> 00:05:41,090
So if I wanted to make the last name all uppercase, I can upper the last name inside of the contact

84
00:05:41,420 --> 00:05:46,670
call and I could come over here to the first name and maybe lower that.

85
00:05:46,940 --> 00:05:50,600
I don't know why I would want to do that, but let's see what that looks like.

86
00:05:51,050 --> 00:05:51,560
There you go.

87
00:05:51,590 --> 00:05:56,510
So now you've got all uppercase for the last name and all lowercase for the first name, right?

88
00:05:57,170 --> 00:05:59,240
So you can do all kinds of things like that.

89
00:05:59,420 --> 00:06:00,230
Let's see.

90
00:06:00,230 --> 00:06:02,160
We've got the date of birth here.

91
00:06:02,180 --> 00:06:06,230
What if we wanted to warp time for these dates of birth?

92
00:06:06,380 --> 00:06:08,060
We can actually do that as well.

93
00:06:08,300 --> 00:06:13,280
There is a date add method, and let's take a look at that date.

94
00:06:13,280 --> 00:06:13,820
Add.

95
00:06:14,510 --> 00:06:19,010
So we first have to specify what field of time we're trying to warp here.

96
00:06:19,190 --> 00:06:25,970
So in other words, like, are we trying to add weeks, days, months, years, etc., right?

97
00:06:26,210 --> 00:06:27,950
So let's do years.

98
00:06:28,310 --> 00:06:31,350
So to do that, we have to specify the keyword year.

99
00:06:32,390 --> 00:06:34,500
Then how many years we want.

100
00:06:34,520 --> 00:06:38,780
So let's just add 10 years and then the field itself.

101
00:06:38,900 --> 00:06:40,460
So date of birth.

102
00:06:41,120 --> 00:06:41,420
All right.

103
00:06:41,420 --> 00:06:43,180
And then I will close this off.

104
00:06:43,190 --> 00:06:44,670
OK, like that.

105
00:06:44,700 --> 00:06:46,490
And so let's run that and see what we get.

106
00:06:47,870 --> 00:06:52,230
All right, so whereas originally, Harry Johnson was born in 1950.

107
00:06:52,250 --> 00:06:54,950
Now it looks like he was born in 1960.

108
00:06:55,790 --> 00:07:00,060
OK, so it just added 10 years to everybody's date of birth.

109
00:07:00,410 --> 00:07:08,780
And again, if we don't like this, header the new column name here, we could change that as New Dobby.

110
00:07:10,370 --> 00:07:10,880
Here we go.

111
00:07:11,030 --> 00:07:11,930
New Dubai.

112
00:07:12,560 --> 00:07:16,460
And there's even support for regular expressions in here, believe it or not.

113
00:07:17,330 --> 00:07:19,370
So to do that, here's what I'll do.

114
00:07:19,370 --> 00:07:22,250
I'll show you on a fresh little bit here.

115
00:07:22,280 --> 00:07:27,620
You can actually execute queries that aren't even executing against any particular table.

116
00:07:27,830 --> 00:07:35,480
So, for example, if I just wanted to print out a date 1970, and this is just really a strong representation

117
00:07:35,480 --> 00:07:41,510
of the date 1970 10 31, like so I can just execute that.

118
00:07:42,050 --> 00:07:44,870
OK, so there I get that date all by itself.

119
00:07:45,830 --> 00:07:48,260
This is kind of like the equivalent of Hello World, right?

120
00:07:48,260 --> 00:07:53,810
Just printing out, doing a system out that print line and then just say here, print something as as

121
00:07:53,810 --> 00:07:55,760
output, though, so you can always do that.

122
00:07:56,240 --> 00:08:00,860
But now, having done that, let me show you that we can do a regular expression.

123
00:08:01,640 --> 00:08:03,590
So let me bring bring this back in.

124
00:08:03,800 --> 00:08:11,180
So looking at the string functions here, we've got regular expression methods like, yeah, this one

125
00:08:11,180 --> 00:08:12,170
here replace.

126
00:08:12,980 --> 00:08:15,370
So if I click on that, we can see the syntax for it.

127
00:08:15,380 --> 00:08:19,850
So the input string and then a regular expression and then what you want to replace it with.

128
00:08:19,850 --> 00:08:27,500
So what that saying is for your given input string, use the regular expression to find text that matches

129
00:08:27,500 --> 00:08:34,250
inside of the input string and for whatever text it finds that matches replace that matching text with

130
00:08:34,430 --> 00:08:36,050
this replacement text here.

131
00:08:36,560 --> 00:08:37,020
All right.

132
00:08:38,180 --> 00:08:40,970
So let's see how that would, how that might look.

133
00:08:40,970 --> 00:08:46,800
So let's say that we want to find four digits, followed by a hyphen.

134
00:08:46,820 --> 00:08:47,270
OK.

135
00:08:47,600 --> 00:08:56,150
So first off, we will invoke the Regg Exp underscore replace function here and in the first argument

136
00:08:56,150 --> 00:09:04,220
that it takes is the input tax, which is going to be that in this particular case and then a regular

137
00:09:04,220 --> 00:09:04,970
expression.

138
00:09:05,330 --> 00:09:08,960
So if I want to replace the four digits there, I can do.

139
00:09:10,860 --> 00:09:11,220
Ash.

140
00:09:12,360 --> 00:09:16,440
And then I can say something like four digits, followed by a hyphen.

141
00:09:18,870 --> 00:09:25,110
And then what I want to replace them with, so I don't know, let's say first off, we'll just replace

142
00:09:25,110 --> 00:09:27,260
them with AAA.

143
00:09:27,540 --> 00:09:30,660
Like, so let's let's try that out and see what we get.

144
00:09:32,510 --> 00:09:37,400
OK, so we got a 10 Python 31 now.

145
00:09:37,640 --> 00:09:42,110
Probably I should have put oops, put a hyphen in there.

146
00:09:42,920 --> 00:09:43,440
Here we go.

147
00:09:45,610 --> 00:09:46,000
All right.

148
00:09:46,150 --> 00:09:49,300
Or let's see what it looks like with just two A's.

149
00:09:49,750 --> 00:09:50,010
All right.

150
00:09:50,020 --> 00:09:51,490
So you get the idea, right?

151
00:09:52,150 --> 00:09:54,790
Pretty easy to do to use regular expressions.

152
00:09:55,060 --> 00:10:01,780
And again, because H2 is written in Java, most likely it's using the standard Java regular expression

153
00:10:01,780 --> 00:10:02,320
engine.

154
00:10:02,560 --> 00:10:08,980
And the reason that's noteworthy is because many languages have their own slightly different variation

155
00:10:08,980 --> 00:10:11,230
of the regular expression language.

156
00:10:11,470 --> 00:10:13,030
Some are based on Perl.

157
00:10:13,150 --> 00:10:14,860
Some have some tweaks, though.

158
00:10:15,010 --> 00:10:22,630
And so it's nice to just know that in all likelihood, the H2 implementation of rejects is actually

159
00:10:22,630 --> 00:10:25,540
using the Java implementation of rejects.

160
00:10:26,050 --> 00:10:26,310
All right.

161
00:10:26,360 --> 00:10:31,540
And so that's going to wrap up our small look into some of the functions, like I said before, though.

162
00:10:31,720 --> 00:10:37,300
You can always go into the documentation for whatever database you happen to be using, not just H2.

163
00:10:37,570 --> 00:10:42,270
And in fact, in business and professional programming, you'll almost certainly not be using H2.

164
00:10:42,280 --> 00:10:49,960
By the way, the most popular database engines in business are by far going to be either Oracle or Microsoft

165
00:10:49,960 --> 00:10:50,950
SQL Server.

166
00:10:51,310 --> 00:10:53,830
Those two are by far the most popular ones.

167
00:10:54,010 --> 00:10:56,530
Another one is DB2 from IBM.

168
00:10:57,040 --> 00:11:01,150
Now those are all commercial databases that are used at the enterprise level.

169
00:11:01,150 --> 00:11:05,500
And by the way, you'll hear the term enterprise all the time as a professional business developer in

170
00:11:05,500 --> 00:11:06,190
particular.

171
00:11:06,400 --> 00:11:10,540
And that just means large corporation wasting a lot of money, typically.

172
00:11:11,080 --> 00:11:16,900
But then there are also free or open source databases that are quite popular.

173
00:11:17,200 --> 00:11:22,930
Each two is actually an open source database, for example, though I do not know that H2 is ever used

174
00:11:22,930 --> 00:11:27,640
for mission critical enterprise level development, I seriously doubt it.

175
00:11:27,820 --> 00:11:34,060
I do use it in enterprise for writing tests, though, because it can run in-memory really, really

176
00:11:34,060 --> 00:11:40,540
quickly, but never for production deployment, where there could be potentially hundreds, thousands

177
00:11:40,540 --> 00:11:44,230
or hundreds of thousands of customers actually needing to do things.

178
00:11:44,530 --> 00:11:49,990
I don't even think the makers of this database themselves would recommend using it for that, but some

179
00:11:49,990 --> 00:11:56,650
other open source databases that could actually be used in that way and are actually used in that way

180
00:11:56,830 --> 00:11:58,120
are MySQL.

181
00:11:58,120 --> 00:12:00,520
Or some people might pronounce it as my school.

182
00:12:00,850 --> 00:12:06,510
That's M.y School or PostgreSQL, PostgreSQL.

183
00:12:07,000 --> 00:12:14,350
These are a couple really, really popular open source database engines that are very robust and heavily

184
00:12:14,350 --> 00:12:17,590
used to support massive amounts of data.

185
00:12:17,920 --> 00:12:22,000
They support sophisticated features like clustering and all kinds of things.

186
00:12:22,360 --> 00:12:28,270
All right, so in the next lesson, we'll try to wrap up our little tour of the basics of sequel.
