WEBVTT
1
00:00:01.020 --> 00:00:08.550
In this lesson, I want to take a slightly deeper dive into a few more options with filtering and predicates

2
00:00:08.550 --> 00:00:11.020
that I didn't show in the previous lesson.

3
00:00:11.520 --> 00:00:17.490
We're just I'm just going to show additional techniques that we could use when we want to do things

4
00:00:17.490 --> 00:00:20.190
like that because there's so much rich functionality there.

5
00:00:20.310 --> 00:00:25.500
And just so you don't get confused, by the way, that I start to teach this, I will.

6
00:00:25.500 --> 00:00:31.200
I'll let you know now that I will be showing these techniques as if I hadn't shown the previous techniques

7
00:00:31.200 --> 00:00:32.380
in the previous lesson.

8
00:00:32.400 --> 00:00:38.430
OK, so this will be kind of an alternative and additional set of techniques for doing these filtering.

9
00:00:39.120 --> 00:00:39.390
All right.

10
00:00:39.400 --> 00:00:47.520
So what if we wanted to filter out certain records or objects that will result from us passing out these

11
00:00:47.880 --> 00:00:49.020
employees here?

12
00:00:49.620 --> 00:00:57.870
Like, let's say, for example, we wanted to filter out this particular Fred Flintstone because the

13
00:00:57.900 --> 00:01:00.930
employee type is programmers, right?

14
00:01:01.200 --> 00:01:02.490
How could we do that?

15
00:01:02.910 --> 00:01:07.680
So we're going to run through a few different approaches to doing that kind of filtering now, and we'll

16
00:01:07.680 --> 00:01:10.500
start off with maybe one of the simpler approaches.

17
00:01:10.860 --> 00:01:11.160
All right.

18
00:01:11.160 --> 00:01:14.280
So we want to get rid of this guy with the programmers.

19
00:01:15.630 --> 00:01:19.260
So coming down here, let's take a look at how we're doing things currently.

20
00:01:19.260 --> 00:01:23.280
So we know that we start off with a stream of strings, right?

21
00:01:24.210 --> 00:01:31.980
Then those strings one at a time are being passed into this create employee method that is returning

22
00:01:31.980 --> 00:01:34.050
a stream of AI employees.

23
00:01:34.050 --> 00:01:40.200
Then we're mapping those employees to a stream of employees, right?

24
00:01:40.200 --> 00:01:41.460
And then we're collecting them.

25
00:01:41.730 --> 00:01:43.590
So we've got a number of options here.

26
00:01:43.710 --> 00:01:53.070
So first off, let's see if we can filter out that one programmers up here before we even convert anything

27
00:01:53.070 --> 00:01:54.690
into an object.

28
00:01:54.690 --> 00:01:56.550
And I think this should be pretty easy.

29
00:01:56.700 --> 00:01:59.520
But I'm going to introduce another method for you.

30
00:02:00.120 --> 00:02:01.800
So what we're wanting to do is to filter.

31
00:02:01.830 --> 00:02:06.360
So can you guess what the method that I'm about to introduce may be called?

32
00:02:07.320 --> 00:02:07.700
All right.

33
00:02:07.710 --> 00:02:18.090
So you may have guessed it's going to be called filter, and the filter method takes as an input something

34
00:02:18.090 --> 00:02:19.470
called a predicate.

35
00:02:19.710 --> 00:02:29.430
And the predicate is just an interface, a generic functional interface that takes an input of an object

36
00:02:29.670 --> 00:02:32.790
and it returns a boolean true or false.

37
00:02:33.240 --> 00:02:40.080
The reason it returns a boolean true or false is because it allows us to implement a lambda or some

38
00:02:40.080 --> 00:02:48.630
code that determines whether or not the object in question, the object that was passed into the predicate

39
00:02:48.900 --> 00:02:53.520
should be permitted to continue through the stream or be filtered out.

40
00:02:53.880 --> 00:02:59.670
If our predicate method returns are true, then the object will be permitted to continue through the

41
00:02:59.670 --> 00:03:00.180
stream.

42
00:03:00.180 --> 00:03:02.700
If it returns a false, then it will be filtered out.

43
00:03:03.060 --> 00:03:06.870
OK, so let's see here.

44
00:03:06.870 --> 00:03:14.190
So since we're wanting to get rid of this program, if we create an instance of a predicate using,

45
00:03:14.190 --> 00:03:19.530
let's say, a lambda, which would generally be the easiest way to do this, can you think of what type

46
00:03:19.530 --> 00:03:22.470
of objects will be passed in to the predicate?

47
00:03:23.460 --> 00:03:23.820
All right.

48
00:03:23.850 --> 00:03:30.930
So strings are what are going to be passed into the predicate because string is what comes out of the

49
00:03:30.930 --> 00:03:33.900
previous step in our pipeline here.

50
00:03:33.930 --> 00:03:34.350
OK.

51
00:03:34.650 --> 00:03:44.430
So if we make a lambda expression that accepts a string and then returns a true or a false, depending

52
00:03:44.430 --> 00:03:51.510
on whether or not programmer's exists here, that should probably do the trick, right?

53
00:03:51.520 --> 00:03:53.100
So let's see what that might look like.

54
00:03:53.400 --> 00:03:54.810
So let's see.

55
00:03:54.840 --> 00:04:02.510
I'll use the variable for the lambda called s four string and then I'll use the arrow indicator here.

56
00:04:02.520 --> 00:04:10.860
And so what we want to do is we want to see is programmer's z contained in the string, right?

57
00:04:10.860 --> 00:04:13.530
So I pretty much gave away how I'm going to do this right?

58
00:04:15.990 --> 00:04:21.840
So we could do something like s that contains.

59
00:04:24.060 --> 00:04:34.290
And then programmer, one, two, three, four five, do something like that now we need to be a little

60
00:04:34.290 --> 00:04:38.710
careful because this isn't actually quite what we're looking for yet.

61
00:04:38.730 --> 00:04:41.370
This is kind of the opposite of what we want.

62
00:04:42.540 --> 00:04:52.170
This would return a true if programmers exists in the current string, which is s, and if it returns

63
00:04:52.170 --> 00:04:55.320
a true, then it would be allowed to stay in the stream.

64
00:04:55.320 --> 00:05:03.810
We want the opposite behavior that we want to get rid of it if programmers is in this string, right?

65
00:05:04.620 --> 00:05:08.100
So we need to negate the result here.

66
00:05:08.250 --> 00:05:13.210
And so there are a few ways we can do this now.

67
00:05:14.190 --> 00:05:17.190
Two of the most functional ways I'm going to show you here.

68
00:05:17.580 --> 00:05:23.640
First off, what we could do is select this entire lambda expression.

69
00:05:23.760 --> 00:05:29.610
I'm going to hold down on option an up arrow to keep selecting until I've selected the whole entire

70
00:05:29.610 --> 00:05:30.510
expression there.

71
00:05:30.840 --> 00:05:38.970
And then I can do a command option or an option command T and then choose number one, which is just

72
00:05:38.970 --> 00:05:41.910
to surround the entire expression in parentheses.

73
00:05:41.910 --> 00:05:47.100
I could do this without using any fancy key bindings as well, but you know me by now.

74
00:05:47.970 --> 00:05:53.160
So I'm going to choose number one so that just put parentheses around the entire expression.

75
00:05:53.550 --> 00:06:00.540
And then if I go to the beginning of this expression, I can actually make use of a static method that

76
00:06:00.540 --> 00:06:03.990
comes with the predicate interface.

77
00:06:03.990 --> 00:06:07.200
So the predicate interface has a few static methods on it.

78
00:06:07.470 --> 00:06:11.190
And one of the static methods is called not.

79
00:06:12.270 --> 00:06:17.510
So you see here a predicate does not, and it does it.

80
00:06:17.520 --> 00:06:24.180
And all that does is it just kind of negates whatever the logic is that is returning from the lambda

81
00:06:24.180 --> 00:06:26.070
expression that we have inside of here, right?

82
00:06:26.070 --> 00:06:30.600
So it takes one predicate and then it allows us to negate that predicate.

83
00:06:30.870 --> 00:06:31.260
OK.

84
00:06:31.650 --> 00:06:36.850
So I can hit return and that gets used now.

85
00:06:36.850 --> 00:06:41.640
Now, notice it has put the the the interface named predicate in front of it.

86
00:06:41.850 --> 00:06:48.510
I actually can get rid of that if I want to, because this is a static method so I could statically

87
00:06:48.510 --> 00:06:53.790
import the method and I can do that by just selecting Predicate here and deleting that in the period.

88
00:06:54.030 --> 00:07:00.600
Now I've got now the NOT has gone red because it's not being it's not imported.

89
00:07:00.810 --> 00:07:07.890
But if I do an option, return there we go or an alt return that will import that.

90
00:07:07.890 --> 00:07:11.400
And if I go up here to the top, you'll see there it is right there.

91
00:07:11.910 --> 00:07:18.390
Line seven it got statically imported, so the static import just allows us to refer to a static method

92
00:07:19.050 --> 00:07:26.880
without having to prepend it with the class or interface that it is a member of, which means that we

93
00:07:26.880 --> 00:07:31.140
can shorten the the line right, just shortening the line a little bit.

94
00:07:31.290 --> 00:07:33.190
OK, so that's one way we can do this.

95
00:07:33.210 --> 00:07:39.120
Let's go ahead and run this and ensure that programmers isn't showing up in our list anymore.

96
00:07:42.930 --> 00:07:45.840
Now, we won't actually see programmers, right?

97
00:07:45.900 --> 00:07:53.700
Well, we would what we would have seen as a an employee with the first and last name of in a right.

98
00:07:53.850 --> 00:08:00.330
In fact, if we just comment this out real quick just to confirm that and I'll rerun it again.

99
00:08:01.650 --> 00:08:03.620
There it is in a in a right.

100
00:08:03.630 --> 00:08:05.880
So that's what we're filtering out.

101
00:08:06.120 --> 00:08:10.790
OK, so all right, let me uncomment that.

102
00:08:10.800 --> 00:08:16.350
Now, let me show you another way that we could do this, by the way someone to delete and not.

103
00:08:16.710 --> 00:08:20.640
And I'm going to get rid of the parentheses as well.

104
00:08:21.210 --> 00:08:21.460
All right.

105
00:08:21.480 --> 00:08:29.550
Now, another way we could do this is to actually select this lambda expression for this predicate and

106
00:08:29.550 --> 00:08:31.830
extract it into a variable.

107
00:08:32.220 --> 00:08:34.650
So I'm selecting the entire thing, right?

108
00:08:34.950 --> 00:08:39.690
And then I'm going to do an option command v to introduce a variable.

109
00:08:40.200 --> 00:08:51.420
Let's call this dummy employee selector because this will be a predicate that selects dummy employees.

110
00:08:51.810 --> 00:08:52.210
OK.

111
00:08:52.620 --> 00:08:54.000
So look what happened here.

112
00:08:54.750 --> 00:09:03.630
My expression is now over here, and it's being stored inside of an instance of a predicate for strings

113
00:09:03.630 --> 00:09:08.850
because string is the data type that goes in to this predicate, which is this s here, right?

114
00:09:09.240 --> 00:09:16.840
And it it it can be used to select, if you will, for dummy employees.

115
00:09:16.860 --> 00:09:25.350
OK, now watch this Though the predicate interface has other methods on it as well.

116
00:09:25.680 --> 00:09:29.460
And I can invoke one of these methods to do my bidding.

117
00:09:29.640 --> 00:09:36.810
And so again, we're we're trying to reverse the selection behavior here, right, so that we can filter

118
00:09:36.810 --> 00:09:40.680
out lines that do contain programmers.

119
00:09:41.430 --> 00:09:50.040
So now that I have this as an actual instance of a as an explicit instance of a predicate here, I can

120
00:09:50.040 --> 00:09:55.560
now put my cursor here, period, and look at this.

121
00:09:55.560 --> 00:09:58.650
I've got a few methods here, and one of them is called Negate.

122
00:10:00.510 --> 00:10:07.890
So I can negate the logic or the behavior, which is simply to say that if it was returning a true now,

123
00:10:07.890 --> 00:10:09.420
it's going to return a false.

124
00:10:09.420 --> 00:10:11.580
And if it was returning a false, it's going to return to true.

125
00:10:11.580 --> 00:10:13.500
So it's not magic at all.

126
00:10:13.510 --> 00:10:18.300
It's like the easiest, simplest thing they could have given to us, but kind of useful here, right?

127
00:10:18.450 --> 00:10:24.620
And so if we run this again in a should again disappear from this list, there we go.

128
00:10:24.630 --> 00:10:26.640
Yes, in a is indeed gone.

129
00:10:27.510 --> 00:10:28.110
All right.

130
00:10:28.890 --> 00:10:31.530
One other thing now, um, let's see.

131
00:10:31.530 --> 00:10:40.010
I could also select this variable and do what is called inclining it where I will actually revert back.

132
00:10:40.020 --> 00:10:46.770
Basically, I will revert back to not using a variable and just having this lambda expression explicitly

133
00:10:46.770 --> 00:10:47.100
here.

134
00:10:47.250 --> 00:10:53.430
However, watch what happens if I do it while I have this, don't negate here, OK, and I can do an

135
00:10:53.430 --> 00:10:55.050
option command in.

136
00:10:56.550 --> 00:11:03.540
And then the ID asks me, Do I want to find all references to this variable or just this one?

137
00:11:03.540 --> 00:11:06.330
I only have the one, so it doesn't really matter right now.

138
00:11:06.330 --> 00:11:07.680
I'm going to click Refactor.

139
00:11:08.520 --> 00:11:09.810
Now, look what it just did.

140
00:11:09.810 --> 00:11:11.970
Let me let me close that down there.

141
00:11:12.330 --> 00:11:13.680
So look what it did.

142
00:11:13.680 --> 00:11:22.530
It brought back the original expression, but then it surrounded it in parentheses and it's casting

143
00:11:22.530 --> 00:11:22.710
it.

144
00:11:22.980 --> 00:11:29.280
It's casting my expression because really, the part that's the expression is just this bit here, right?

145
00:11:29.640 --> 00:11:30.690
Just that bit there.

146
00:11:31.170 --> 00:11:37.170
But it's now casting this expression as a predicate of strings.

147
00:11:37.440 --> 00:11:44.220
And then it's surrounding all of that in parentheses so that I can call the dot in the gate.

148
00:11:44.340 --> 00:11:52.500
So this is yet another way that we can make use of these methods that are on the predicate interface

149
00:11:53.190 --> 00:12:02.010
by simply by simply casting a lambda expression to the predicate type.

150
00:12:02.040 --> 00:12:02.580
OK.

151
00:12:03.510 --> 00:12:05.190
So there's multiple ways to do this.

152
00:12:05.280 --> 00:12:09.000
And now that I've done this, I don't even need this line here anymore.

153
00:12:09.000 --> 00:12:10.410
I can just get rid of that.

154
00:12:10.680 --> 00:12:11.100
OK.

155
00:12:11.280 --> 00:12:12.810
So lots of ways.

156
00:12:12.840 --> 00:12:18.510
Now I personally, you know, this is getting to be a little noisy for my taste.

157
00:12:19.050 --> 00:12:23.560
It's kind of a lot of parentheses to to keep track of and pay attention to.

158
00:12:23.580 --> 00:12:25.680
So I'm not a huge fan of this.

159
00:12:25.890 --> 00:12:32.790
I think I would probably prefer if you want to use the negate thing here, I probably would personally

160
00:12:32.790 --> 00:12:34.690
prefer to do our last bit.

161
00:12:34.710 --> 00:12:40.540
I'm going to undo this, you know, and just just extract a method.

162
00:12:40.560 --> 00:12:41.140
I'm sorry.

163
00:12:41.220 --> 00:12:41.520
Just.

164
00:12:41.590 --> 00:12:45.640
Extract a variable out of the sky this way instead.

165
00:12:47.800 --> 00:12:49.690
But yeah, so there's some options there.

166
00:12:49.810 --> 00:12:56.680
OK, so we've just done the filtering at the string level, right, where we're just getting rid of

167
00:12:56.680 --> 00:12:57.580
the actual string.

168
00:12:57.760 --> 00:13:00.400
But of course, we could do this in other ways as well.

169
00:13:00.520 --> 00:13:06.820
What if we did it after everything was already converted into an object, right?

170
00:13:07.000 --> 00:13:12.010
So let me get rid of this filter here, and I think I'll get rid of this as well.

171
00:13:12.400 --> 00:13:18.340
So let's say we decided to filter after the objects were employees.

172
00:13:18.550 --> 00:13:23.100
OK, so I'll put my cursor there, make a new line.

173
00:13:23.350 --> 00:13:25.630
And what could we key on?

174
00:13:25.690 --> 00:13:32.830
We won't be able to key on the word programmer's z because we wouldn't have access to that anymore.

175
00:13:32.860 --> 00:13:41.860
Once these lines have been converted to employees right now, we would have in a though in a as a first

176
00:13:41.860 --> 00:13:48.460
and last name for the dummy employee that would result from this line so we could filter that way.

177
00:13:48.550 --> 00:13:49.990
So let's see what that might look like.

178
00:13:50.000 --> 00:13:51.580
So I'll do a dot filter.

179
00:13:52.930 --> 00:13:57.190
Let's see, and we're going to receive an employee as the input to the predicate.

180
00:13:57.220 --> 00:13:58.750
So that would be an easy summary.

181
00:13:59.170 --> 00:14:01.420
I'm just so I'm going to refer to that as E.

182
00:14:02.080 --> 00:14:04.670
By the way, I can call this a whole entire name.

183
00:14:04.690 --> 00:14:11.290
You know, I can use a variable name, a long variable name if I want to just being kind of lazy here

184
00:14:13.090 --> 00:14:16.630
and trying to keep my my lambda expressions kind of short.

185
00:14:18.400 --> 00:14:19.240
Employee.

186
00:14:19.420 --> 00:14:21.040
So let's see.

187
00:14:21.050 --> 00:14:33.880
Maybe we could say something like where employee dot, uh, get last name equals.

188
00:14:36.750 --> 00:14:41.100
In a right, we could say something like that.

189
00:14:41.250 --> 00:14:47.190
Now, typically in this case, I mentioned this many, many, many lessons ago.

190
00:14:47.280 --> 00:14:52.860
Typically, in this case, you may want to code this a little more defensively by actually flipping

191
00:14:52.860 --> 00:15:00.450
this around and having the constant of in at the beginning like this in a dot equals.

192
00:15:02.920 --> 00:15:03.250
Right.

193
00:15:03.550 --> 00:15:06.370
Doing this instead.

194
00:15:12.210 --> 00:15:20.910
And the reason for that is because if for some reason, this variable here were null with the other

195
00:15:20.910 --> 00:15:25.740
approach, we would get an old pointer exception if this happened to be null.

196
00:15:25.980 --> 00:15:30.070
But with this approach, you won't have to worry about that problem.

197
00:15:30.450 --> 00:15:37.590
Now, if your class, if the employee class has a constructor that won't allow employees to be created

198
00:15:37.590 --> 00:15:42.510
unless you're specifying a first and last name, or if you're just certain that there's it's impossible

199
00:15:42.780 --> 00:15:46.670
for the last name in this case to ever be null, then it doesn't matter so much.

200
00:15:46.680 --> 00:15:50.280
So just be mindful of that, though this is, you know, I've mentioned before.

201
00:15:50.280 --> 00:15:54.690
This is a common pattern, though, to flip things around and have the string constant at the beginning.

202
00:15:54.990 --> 00:16:00.030
Now you may be wondering why I didn't do that on the previous filtering, where we did the lines and

203
00:16:00.030 --> 00:16:01.110
I was looking for programmers.

204
00:16:02.190 --> 00:16:09.090
In that case, I wasn't using the equals method I was using contains, and so I didn't have a choice

205
00:16:09.090 --> 00:16:09.420
there.

206
00:16:09.450 --> 00:16:09.930
OK.

207
00:16:11.310 --> 00:16:11.690
All right.

208
00:16:11.700 --> 00:16:17.280
So here's this and now we're going to have the same issue again, though I need to negate this first,

209
00:16:17.280 --> 00:16:17.670
right?

210
00:16:18.510 --> 00:16:26.520
So I maybe will just select all of that, extract the variable out, call it blah blah blah.

211
00:16:26.610 --> 00:16:28.920
For now, I don't feel like naming this anything great.

212
00:16:28.920 --> 00:16:35.220
So I'm just going to take that default name there and then I can do a dot negate.

213
00:16:35.820 --> 00:16:36.470
Like, So.

214
00:16:36.720 --> 00:16:39.990
OK, let me under this, though, just to show you.

215
00:16:39.990 --> 00:16:49.880
I also could just put an exclamation mark in front of the in front of this, this expression here,

216
00:16:49.890 --> 00:16:50.220
right?

217
00:16:50.490 --> 00:16:57.050
This exclamation mark, as we've learned before, simply negates the the the method here so equals.

218
00:16:57.050 --> 00:16:58.590
So this is saying not equals.

219
00:16:58.830 --> 00:17:01.200
So let's run this and then confirm.

220
00:17:02.040 --> 00:17:03.270
Yeah, there we go.

221
00:17:05.010 --> 00:17:05.280
All right.

222
00:17:05.280 --> 00:17:06.480
So let's see.

223
00:17:06.480 --> 00:17:12.360
Let's put this back to, uh, using the predicate here.

224
00:17:12.720 --> 00:17:18.240
And I don't know, I'll go ahead and call this dummy employee selector again.

225
00:17:20.100 --> 00:17:30.810
OK, now what if we also wanted to filter out employees whose salaries are lower than $5000?

226
00:17:30.990 --> 00:17:36.570
OK, so we want to get rid of the the employees whose salaries are less than five thousand bucks.

227
00:17:36.960 --> 00:17:40.770
So one way we could do that is simply to add another filter here.

228
00:17:42.420 --> 00:17:51.390
And we could say something like employee where I'd get salary is less than five thousand.

229
00:17:52.560 --> 00:17:58.860
Now, if we're wanting to filter them, filter out employees who make less than five thousand, then

230
00:17:58.860 --> 00:18:00.660
of course we'd have to negate this now.

231
00:18:00.810 --> 00:18:04.140
Obviously, one thing we could do is just flip the logic there, right?

232
00:18:04.170 --> 00:18:08.190
Allow everybody who's making more than $5000.

233
00:18:08.220 --> 00:18:08.570
Right.

234
00:18:08.580 --> 00:18:09.810
So if I run this?

235
00:18:10.350 --> 00:18:10.920
All right.

236
00:18:10.930 --> 00:18:11.280
Yeah.

237
00:18:11.330 --> 00:18:15.150
So now we don't see anyone making less than five grand.

238
00:18:15.180 --> 00:18:15.540
Right?

239
00:18:15.900 --> 00:18:17.550
So that's pretty self-explanatory.

240
00:18:17.700 --> 00:18:19.500
Now let me show you another thing we could do.

241
00:18:19.650 --> 00:18:23.700
We can combine predicates together really nicely.

242
00:18:23.910 --> 00:18:33.240
So if I select this predicate here and extract that out into a variable and let's say that, I don't

243
00:18:33.240 --> 00:18:35.730
know, I'll call this over.

244
00:18:39.580 --> 00:18:43.020
Five K selector.

245
00:18:44.320 --> 00:18:51.580
OK, so we've got a dummy employee selector and an over five case selector right now, what I could

246
00:18:51.580 --> 00:19:00.130
do is combine these all in one filter so I could get rid of this secondary filter here, and I could

247
00:19:00.130 --> 00:19:07.450
combine these two predicates that we have all in one, I could say filter dummy employees, selectors

248
00:19:07.630 --> 00:19:11.170
with the negation there and.

249
00:19:14.810 --> 00:19:17.150
Over five K selector.

250
00:19:18.200 --> 00:19:19.160
Let's run that.

251
00:19:21.340 --> 00:19:30.790
So now I'm getting the behavior that I that we had before, but all in one right and I could even do

252
00:19:30.790 --> 00:19:37.660
something like select all of this and extract the variable out of that and then name it something a

253
00:19:37.660 --> 00:19:39.100
little more meaningful, like

254
00:19:41.890 --> 00:19:48.070
no dummies and over five.

255
00:19:48.760 --> 00:19:49.160
OK.

256
00:19:49.900 --> 00:19:50.260
Right.

257
00:19:50.710 --> 00:20:00.190
So you can kind of combine these predicates to make kind of more rich, richly named and rich, more

258
00:20:00.190 --> 00:20:02.710
richly implemented predicates.

259
00:20:03.610 --> 00:20:11.050
Now, in addition to the and here, there's also an order right there.

260
00:20:11.080 --> 00:20:11.950
There's an order.

261
00:20:13.510 --> 00:20:15.370
So I'll leave it to you to play with that.

262
00:20:15.370 --> 00:20:22.510
But you know that that will do the logical or instead of an end where so obviously within and it means

263
00:20:22.510 --> 00:20:30.160
that both clauses have to be true in order for the whole thing to be true with an or only one of the

264
00:20:30.160 --> 00:20:34.510
clauses must be true in order for the entire clause to be true.

265
00:20:34.570 --> 00:20:35.030
OK.

266
00:20:35.500 --> 00:20:41.530
OK, so that's going to wrap up this deeper dive into predicates and filtering, and I will see you

267
00:20:41.530 --> 00:20:42.190
in the next one.
