WEBVTT
1
00:00:00.770 --> 00:00:06.350
All right, so we've got our guessing game working a little better now, it's a little more convenient,

2
00:00:06.350 --> 00:00:12.200
giving us proper feedback and letting us make multiple guesses without having to keep restarting the

3
00:00:12.200 --> 00:00:12.950
program.

4
00:00:12.980 --> 00:00:20.170
But now let's say that we wanted to be able to exit out of the guessing loop prematurely.

5
00:00:20.180 --> 00:00:25.220
We just get tired of trying to make guesses forever, and we just want to stop somehow.

6
00:00:25.730 --> 00:00:32.450
Wouldn't it be nice if maybe instead of entering a number two, guess we could enter something like

7
00:00:32.450 --> 00:00:35.480
a queue to quit something like that?

8
00:00:35.930 --> 00:00:36.890
Well, we can do that.

9
00:00:36.890 --> 00:00:43.730
But one way to do it would be to test for some condition to determine whether or not this loop should

10
00:00:43.730 --> 00:00:44.630
keep going.

11
00:00:44.930 --> 00:00:48.910
And so currently, we don't test for any condition in the loop.

12
00:00:48.920 --> 00:00:50.630
We just hardcoded it to true.

13
00:00:50.810 --> 00:00:56.240
But we could change this similarly to whatever we would put in parentheses of an if block.

14
00:00:56.660 --> 00:01:05.120
So let's make it so that we can quit out of the loop if we enter a queue, for example.

15
00:01:05.450 --> 00:01:11.450
Now, if we want the application to behave in that way, we're going to need to make a change here.

16
00:01:11.720 --> 00:01:13.580
So notice what happens here.

17
00:01:13.970 --> 00:01:20.180
First thing we do when the program starts is we generate our random number and then we store that here

18
00:01:20.570 --> 00:01:22.130
in the random, numb field.

19
00:01:22.460 --> 00:01:24.620
Then we enter into our loop.

20
00:01:25.380 --> 00:01:33.090
And then we take in, we prompt the user for input expecting generally a number, but first we get back

21
00:01:33.090 --> 00:01:34.730
just a string, right?

22
00:01:35.310 --> 00:01:39.090
Then we convert that string into a number.

23
00:01:39.420 --> 00:01:45.840
Then we determine whether or not the entered number is matches, the guest number and so on and so forth.

24
00:01:45.930 --> 00:01:47.970
OK, so here's the issue.

25
00:01:48.420 --> 00:01:59.160
Ideally, what I think we might want to do is to take this keyboard input, but then tie whatever we

26
00:01:59.160 --> 00:02:02.960
entered here into a test inside of this wire loop.

27
00:02:02.970 --> 00:02:05.170
So that is to say something like.

28
00:02:05.370 --> 00:02:14.970
While the guest num text isn't a cue, keep looping something something like that.

29
00:02:15.450 --> 00:02:23.610
So let's see what that might look like if we were to do that while the guest num text isn't a cue.

30
00:02:24.780 --> 00:02:31.710
So first off, how can we compare this text to the letter Q, can you think of how to do that and do

31
00:02:31.710 --> 00:02:33.720
it in between these parentheses?

32
00:02:35.220 --> 00:02:38.790
OK, so one way we could do that would be to say.

33
00:02:40.260 --> 00:02:49.050
Guest num text that equals because now we're comparing text, not just numbers, right, we're comparing

34
00:02:49.050 --> 00:02:50.460
text equals.

35
00:02:51.930 --> 00:02:53.730
Hugh -- Q.

36
00:02:55.560 --> 00:02:57.540
Now we've got a few problems here.

37
00:02:58.770 --> 00:03:04.020
I'll begin with the fact that we've got this red mark here, and if we hover the text here, it says

38
00:03:04.020 --> 00:03:06.390
it cannot resolve symbol, guest name, text.

39
00:03:06.420 --> 00:03:12.390
Now the problem here is that we're referring to a variable that has not yet been defined or declared.

40
00:03:12.630 --> 00:03:18.570
It is declared on the very next line, but in order to use it on Line seven, it has to be declared

41
00:03:18.900 --> 00:03:20.910
above line seven.

42
00:03:21.150 --> 00:03:22.320
So that's one issue.

43
00:03:22.530 --> 00:03:32.790
So one way we can resolve that is to declare this variable before we get to line seven.

44
00:03:33.060 --> 00:03:37.390
So what I'm going to do here is I'm going to copy this declaration.

45
00:03:38.070 --> 00:03:46.620
I'm going to command C copy that and then I'm going to make a new line right after Line six and paste

46
00:03:46.620 --> 00:03:47.930
this here.

47
00:03:47.940 --> 00:03:48.690
Like so?

48
00:03:50.390 --> 00:03:53.930
Now I need to do something with this variable.

49
00:03:54.350 --> 00:04:00.290
So one thing I maybe could do is just set it to null for right now.

50
00:04:01.010 --> 00:04:01.460
OK.

51
00:04:02.980 --> 00:04:09.550
All right, now, I've got another problem now that I'm declaring the variable here on Line seven.

52
00:04:09.580 --> 00:04:15.280
The Java is not going to like the fact that I'm redefining it again on Line nine.

53
00:04:15.920 --> 00:04:20.350
So, you know, I'm basically trying to redefine it, essentially.

54
00:04:20.710 --> 00:04:26.320
So one easy fix for that could be simply to remove the word string here.

55
00:04:27.280 --> 00:04:33.310
And now I'm simply referring to a variable that already was declared.

56
00:04:33.490 --> 00:04:40.330
So in other words, on Line seven, I'm telling Java that I want to have a variable called string,

57
00:04:40.330 --> 00:04:42.640
and right now I'm just going to set it to null.

58
00:04:43.610 --> 00:04:53.300
Then on Line nine, I'm saying now I want you to set that string to this value, OK, so I can reassign

59
00:04:53.300 --> 00:05:00.560
another value to this variable as long as I'm not declaring it from scratch right up here, I'm declaring

60
00:05:00.560 --> 00:05:03.740
it and I'm assigning null to it down here.

61
00:05:03.740 --> 00:05:09.290
I'm just assigning another value to that variable that's perfectly OK to do.

62
00:05:10.370 --> 00:05:14.240
All right, now, there's another problem here.

63
00:05:14.630 --> 00:05:20.820
And it's a little bit of a subtle one that I did mention, but you may or may not remember it online.

64
00:05:20.840 --> 00:05:21.440
Eight.

65
00:05:22.190 --> 00:05:26.780
I'm saying while the guest num text equals Q.

66
00:05:27.990 --> 00:05:29.430
Then do this loop.

67
00:05:29.940 --> 00:05:31.230
Now there's a problem, though.

68
00:05:31.590 --> 00:05:39.840
The problem is that the first time this program runs guest none text is null and you can't call a method

69
00:05:39.990 --> 00:05:41.640
on a null object.

70
00:05:41.640 --> 00:05:48.290
Do you remember I mentioned that, but I also mentioned a way to safeguard against this kind of problem.

71
00:05:48.300 --> 00:05:49.950
Do you remember what that was?

72
00:05:50.310 --> 00:05:51.300
I'll give you a moment.

73
00:05:52.170 --> 00:05:52.590
OK?

74
00:05:52.710 --> 00:06:01.470
What I suggested was that to safeguard against the possibility of a method whose object is null, which

75
00:06:01.470 --> 00:06:07.650
would result in an exception being thrown, you can actually, in this case, we can actually just flip

76
00:06:07.650 --> 00:06:16.770
these arguments around so we can put the Q first Q dot equals.

77
00:06:18.120 --> 00:06:23.430
Just text like so and then we'll just get rid of the rest of this.

78
00:06:24.330 --> 00:06:35.340
OK, so now if the guest num text is null, it won't matter because the method that we're calling isn't

79
00:06:35.340 --> 00:06:37.290
a method of the guest num text.

80
00:06:37.470 --> 00:06:41.520
It's a it's a method of this string literal here.

81
00:06:41.550 --> 00:06:43.950
Q And that's always going to exist.

82
00:06:44.670 --> 00:06:45.090
OK.

83
00:06:45.120 --> 00:06:49.050
And so if this variable happens to be null, there's no problem.

84
00:06:49.710 --> 00:06:56.100
And it still means the same thing if the guest num text equals Q, it's just we're writing it a little

85
00:06:56.100 --> 00:06:56.970
backward now.

86
00:06:58.740 --> 00:07:02.730
OK, so let's rebuild this with a command, F9.

87
00:07:04.200 --> 00:07:08.340
And then let's rerun our program and see what we get now.

88
00:07:08.970 --> 00:07:09.310
All right.

89
00:07:09.330 --> 00:07:12.960
Now there's one more thing we need to do.

90
00:07:13.170 --> 00:07:15.900
Our logic is actually not quite right.

91
00:07:16.170 --> 00:07:22.680
We're saying if guest none text equals Q, then do all of this.

92
00:07:22.800 --> 00:07:24.710
That's not actually the logic we want.

93
00:07:24.720 --> 00:07:27.510
We actually want the opposite of this logic we want.

94
00:07:28.050 --> 00:07:34.760
If guest num text is not Q, then execute what's in this loop.

95
00:07:34.770 --> 00:07:35.970
That's what we want.

96
00:07:36.450 --> 00:07:40.050
So now we want to kind of flip this logic.

97
00:07:40.060 --> 00:07:45.870
So keep in mind that the equals method returns a Boolean that is a true or a false.

98
00:07:46.200 --> 00:07:50.130
So we want to flip the results of this Boolean.

99
00:07:50.340 --> 00:07:51.300
How can we do that?

100
00:07:52.320 --> 00:07:58.110
Well, I haven't directly shown you how to do it in this particular case, but we have seen something

101
00:07:58.110 --> 00:07:59.340
kind of like it before.

102
00:07:59.490 --> 00:08:07.300
If you'll recall, when we learned about Julian's, I did something like my flag equals true, right?

103
00:08:07.650 --> 00:08:15.060
But then I did show you that if you wanted to negate a Boolean, you could just put an exclamation mark

104
00:08:15.060 --> 00:08:15.810
in front of it.

105
00:08:15.810 --> 00:08:18.450
And then that flips the bit, so to speak, right?

106
00:08:18.450 --> 00:08:22.770
That flips the value from whatever it currently is to the opposite of that.

107
00:08:23.010 --> 00:08:32.490
And so we can do this here as well by simply putting an exclamation mark in front of the rest of this

108
00:08:32.490 --> 00:08:33.510
expression here.

109
00:08:33.720 --> 00:08:35.100
And so that will flip it.

110
00:08:35.280 --> 00:08:43.980
And the way you can read this is to say, while Q is not equal to guest num text, then do all of this

111
00:08:44.130 --> 00:08:52.830
or put another way you could say while the guest num text is not Q, that's basically what what we're

112
00:08:52.830 --> 00:08:53.400
saying here.

113
00:08:53.580 --> 00:08:58.620
Now I know that may look a little confusing, but it's actually really simple, right?

114
00:08:58.630 --> 00:09:05.670
We're simply saying as long as the guest no text isn't Q, then do all of this.

115
00:09:06.240 --> 00:09:09.420
All right, so now let's build our project.

116
00:09:10.780 --> 00:09:12.340
And then we can run it.

117
00:09:14.670 --> 00:09:16.920
All right, so now we're getting prompted.

118
00:09:17.100 --> 00:09:19.110
So let's take a few guesses here.

119
00:09:19.140 --> 00:09:20.310
I'm going to guess a four.

120
00:09:20.940 --> 00:09:21.780
I didn't get it.

121
00:09:21.810 --> 00:09:23.250
I'm going to guess a six.

122
00:09:23.520 --> 00:09:24.270
Hey, I got it.

123
00:09:24.510 --> 00:09:24.780
All right.

124
00:09:24.780 --> 00:09:26.420
So that wasn't a good one.

125
00:09:26.430 --> 00:09:27.480
Let's try another one.

126
00:09:28.840 --> 00:09:31.720
Because I want a chance to quit out of the program, right?

127
00:09:32.680 --> 00:09:33.130
All right.

128
00:09:33.160 --> 00:09:34.960
Yes, a number between one and 10.

129
00:09:35.170 --> 00:09:36.670
I'm going to guess a two.

130
00:09:37.710 --> 00:09:38.160
All right.

131
00:09:38.400 --> 00:09:44.850
There's some I'm going to guess a negative for because I know that won't be in it and a negative two

132
00:09:45.090 --> 00:09:48.320
and a negative six and a negative nine.

133
00:09:48.330 --> 00:09:53.520
OK, so let's say I get tired of doing this and I just want to stop now and I don't want to kill the

134
00:09:53.520 --> 00:09:53.940
program.

135
00:09:53.940 --> 00:09:57.750
I want to quit so night type Q and then I hit return.

136
00:09:57.750 --> 00:09:59.430
So now is the moment of truth.

137
00:09:59.460 --> 00:10:00.600
Let's see what happens.

138
00:10:03.410 --> 00:10:10.880
OK, so now what happens is we get a no format exception, and I'm looking at this what's called a stack

139
00:10:10.880 --> 00:10:11.690
trace here.

140
00:10:12.000 --> 00:10:16.040
This just tells us that something went wrong in our program.

141
00:10:16.070 --> 00:10:23.000
Now the way to read this is you generally want to start off by looking at lines of code that are in

142
00:10:23.000 --> 00:10:24.230
the code that you wrote.

143
00:10:24.470 --> 00:10:30.020
So this first line here is is the no format exception at Line 67.

144
00:10:30.020 --> 00:10:34.520
So that's not something that we wrote integer that Java, that's not something we wrote.

145
00:10:35.210 --> 00:10:38.510
None of these are something we wrote until we get down to this last line.

146
00:10:38.540 --> 00:10:39.650
Yes, it Java.

147
00:10:39.680 --> 00:10:45.020
Guess it is our class and the line that we care about is Line 10, which is right here.

148
00:10:45.350 --> 00:10:54.490
So the problem is we are trying to pass the guest no text into an integer, but we entered a queue.

149
00:10:54.500 --> 00:10:59.390
So obviously it's nonsensical to try to convert a queue into an integer.

150
00:10:59.600 --> 00:11:04.400
And so the pass and method kind of blew up on us, right?

151
00:11:04.850 --> 00:11:07.130
So now we need to handle that now.

152
00:11:07.250 --> 00:11:10.940
Before we go any further, let me just explain a couple of things.

153
00:11:11.120 --> 00:11:17.720
The road that we're about to go down is probably not a road that I would prefer to do, but I'm going

154
00:11:17.720 --> 00:11:24.380
to go down this road a little bit with you because I want to show you some ways that we can use this

155
00:11:24.380 --> 00:11:25.540
while loop.

156
00:11:25.550 --> 00:11:28.850
And this is just the natural progression that we're going down in.

157
00:11:28.850 --> 00:11:34.580
Sometimes when you're coding, you'll start to go down a particular road and it may take you a little

158
00:11:34.580 --> 00:11:38.300
bit of time before you realize maybe you don't want to be going down that road.

159
00:11:38.480 --> 00:11:41.690
But that is what real programming sometimes becomes.

160
00:11:42.020 --> 00:11:49.160
And so I'm going to try my best not to confuse you with a lot of convoluted code, but at the same time,

161
00:11:49.160 --> 00:11:54.620
I want you to have an opportunity to see what real programming sometimes can look like.

162
00:11:54.710 --> 00:11:55.160
OK.

163
00:11:55.550 --> 00:11:57.800
So we'll try to be a little bit careful here.

164
00:11:57.830 --> 00:12:04.850
So the problem is now we can't do this passent business anymore when we enter a queue.

165
00:12:05.060 --> 00:12:11.780
So we need to figure out how do we protect ourselves from the situation in which we've entered a non

166
00:12:11.990 --> 00:12:18.800
numeric value and therefore we can't execute Line 10 right without blowing up the program.

167
00:12:19.130 --> 00:12:27.200
So one thought that comes to my mind is we could test and make sure that whatever was entered here is

168
00:12:27.200 --> 00:12:33.140
actually digits and only if it's digits, we will execute the rest of this.

169
00:12:33.320 --> 00:12:35.030
Otherwise, we will skip over it.

170
00:12:35.240 --> 00:12:38.240
Now I can think of a couple of ways to do that.

171
00:12:38.420 --> 00:12:44.810
One way I can think of testing that this is a digit is to use a regular expression, which we now know

172
00:12:44.810 --> 00:12:45.950
how to do right.

173
00:12:46.670 --> 00:12:49.220
So let's see what that might look like.

174
00:12:49.310 --> 00:12:57.530
So we want to say, like if this is digits, then allow all of this to execute, right?

175
00:12:57.560 --> 00:12:58.730
That's what we want to say.

176
00:12:59.120 --> 00:13:06.280
So a couple of thoughts I have are that we could wrap all of this code that we want to allow to execute

177
00:13:06.290 --> 00:13:07.580
if you enter digits.

178
00:13:07.700 --> 00:13:11.060
We could wrap all of this in an if block, right?

179
00:13:11.390 --> 00:13:13.050
So I've selected it already.

180
00:13:13.130 --> 00:13:16.130
So if I do a command option T.

181
00:13:17.510 --> 00:13:22.740
I can say that I want to surround the selected text with an Earth block, by the way.

182
00:13:22.760 --> 00:13:26.270
You don't have to use the command option T to surround with.

183
00:13:26.360 --> 00:13:31.310
You could just, you know, type it all out by hand, but that's kind of clunky, clunky.

184
00:13:31.520 --> 00:13:38.180
And so it's just easier as a lazy person to just do a command option T and then choose if it's right.

185
00:13:38.390 --> 00:13:44.900
So bam, now that just surrounded every all of that code with an f block and put it all inside of one

186
00:13:44.900 --> 00:13:47.080
block here and now it's waiting for me to tell it.

187
00:13:47.090 --> 00:13:47.960
Well, if what?

188
00:13:48.530 --> 00:13:51.020
So maybe let's let's see what this could look like.

189
00:13:51.200 --> 00:13:58.820
Maybe we could say something like if guest num text matches remember this the matches method, and then

190
00:13:58.820 --> 00:14:00.230
we can give it a rejects.

191
00:14:01.410 --> 00:14:08.790
If it matches, let's say so, digits is to back slashes and a D.

192
00:14:09.630 --> 00:14:11.130
So that means one digit.

193
00:14:12.220 --> 00:14:15.250
Now we could have up to one one through 10, right?

194
00:14:15.640 --> 00:14:19.810
So we want to allow for up to two digits, right?

195
00:14:20.930 --> 00:14:27.620
Up to two digits, so technically to say up to two digits, we use a curly brace.

196
00:14:27.890 --> 00:14:35.300
So up to two digits that would be one or two digits, so two to say that in regex we can say one comma

197
00:14:35.300 --> 00:14:39.590
two, right, so between one and two digits.

198
00:14:39.740 --> 00:14:48.710
So this is saying if what we entered is a number between one and two digits long, then go ahead and

199
00:14:48.710 --> 00:14:50.290
execute the rest of this.

200
00:14:50.300 --> 00:14:53.900
Otherwise it's going to just not do any of that at all.

201
00:14:54.170 --> 00:14:56.690
And then the loop will just continue.

202
00:14:57.300 --> 00:15:03.780
OK, now I will admit this is a little more complex than I might like it to be.

203
00:15:03.800 --> 00:15:05.590
There may be better ways to do this.

204
00:15:05.600 --> 00:15:10.010
I don't want to spend a whole lot of time thinking about all the possibilities right at this moment,

205
00:15:10.020 --> 00:15:12.770
though, but I just want to point out a couple of things here.

206
00:15:13.130 --> 00:15:21.140
Any time you've got nested, if statements like we have here, you are increasing the complexity of

207
00:15:21.140 --> 00:15:22.040
the code.

208
00:15:22.250 --> 00:15:25.420
So those are things to be careful about and to look out for.

209
00:15:25.430 --> 00:15:32.570
You don't want to have three, four, five, six and more levels of nested if statements here and for

210
00:15:32.570 --> 00:15:38.540
that matter, even having these nested if statements inside of a while loop, all of that is starting

211
00:15:38.540 --> 00:15:40.760
to increase the complexity of the program.

212
00:15:40.970 --> 00:15:43.400
OK, so you just want to be kind of mindful of that.

213
00:15:43.550 --> 00:15:47.390
I definitely would not really like to go much more than this.

214
00:15:47.390 --> 00:15:53.240
And honestly, if I were doing this professionally, I might first want to just get the program working,

215
00:15:53.240 --> 00:15:53.690
maybe.

216
00:15:53.690 --> 00:15:59.450
But I'd probably want to circle back around and look and try to determine, is there a better way to

217
00:15:59.450 --> 00:16:02.310
do this where I could get rid of some of this nesting?

218
00:16:02.330 --> 00:16:03.650
I'm not a big fan of it.

219
00:16:03.680 --> 00:16:08.900
It makes the code more complicated than you'd like it to be to to process in your own head.

220
00:16:09.080 --> 00:16:09.320
All right.

221
00:16:09.330 --> 00:16:14.030
But anyway, let's see if this gets us over our little issue here.

222
00:16:14.180 --> 00:16:18.530
So let's rebuild the program with a command F9.

223
00:16:19.850 --> 00:16:20.320
OK.

224
00:16:20.780 --> 00:16:22.340
And then we can run it.

225
00:16:24.140 --> 00:16:24.680
All right.

226
00:16:25.160 --> 00:16:29.600
So please get the number between one and 10 inclusively.

227
00:16:30.590 --> 00:16:35.810
Now the way we did this before was that we actually entered a bunch of negative numbers.

228
00:16:36.110 --> 00:16:43.010
Let's see what happens if we enter a negative number now, especially with that regular expression negative

229
00:16:43.010 --> 00:16:43.760
five.

230
00:16:44.480 --> 00:16:52.880
OK, so now what just happened is we entered a negative five and then we didn't get either of these

231
00:16:52.880 --> 00:16:53.990
outputs here.

232
00:16:54.320 --> 00:16:57.470
That's probably not the behavior that we actually want.

233
00:16:57.680 --> 00:16:59.120
We want to allow that.

234
00:16:59.120 --> 00:17:01.970
If you entered a negative five, that would be OK.

235
00:17:02.510 --> 00:17:12.440
So I think we need to adjust our regular expression to allow for the possibility of a negative, followed

236
00:17:12.440 --> 00:17:14.060
by some digits.

237
00:17:14.150 --> 00:17:14.540
Right.

238
00:17:14.960 --> 00:17:18.620
So let's do a control C to stop our program.

239
00:17:18.950 --> 00:17:27.650
And can you think of how we can allow for an optional negative symbol to be allowed in this rig x?

240
00:17:28.550 --> 00:17:30.260
Take a moment and think about that.

241
00:17:32.040 --> 00:17:40.410
OK, so if we want to allow for a negative in here, optionally what we could say is we want to allow

242
00:17:40.410 --> 00:17:45.810
for the possibility of zero or one negative sign, right?

243
00:17:46.290 --> 00:17:49.770
So zero or one can be done this way.

244
00:17:49.770 --> 00:17:55.410
So we'll say we want to allow for a negative sign, literally.

245
00:17:55.920 --> 00:18:00.630
And then zero or one is a question mark just like that.

246
00:18:00.960 --> 00:18:10.650
So zero or one or zero or one hyphens or negative signs followed by one or two digits?

247
00:18:11.010 --> 00:18:11.420
All right.

248
00:18:11.430 --> 00:18:13.290
So let's build that.

249
00:18:14.380 --> 00:18:14.770
All right.

250
00:18:15.100 --> 00:18:17.470
And then let's try running it again.

251
00:18:19.030 --> 00:18:25.840
All right, so now I'm going to do negative for OK, that that seems like it's working now.

252
00:18:25.860 --> 00:18:28.720
It allowed that and I got a you didn't get it.

253
00:18:28.960 --> 00:18:29.320
All right.

254
00:18:29.320 --> 00:18:35.410
So I will do a negative three and obviously none of my negative guesses are going to work.

255
00:18:35.410 --> 00:18:41.020
I'm doing them on purpose so that I get a chance to test out at the looping code is working right and

256
00:18:41.020 --> 00:18:42.970
I'll do one more negative case here.

257
00:18:42.970 --> 00:18:48.730
I'm going to do a negative 10 to make sure that my X is allowing me to enter up to two digits.

258
00:18:50.840 --> 00:18:51.290
OK.

259
00:18:51.380 --> 00:18:52.040
Very good.

260
00:18:52.310 --> 00:18:58.100
And now let's test the queue for quitting out of the loop and see what happens there.

261
00:18:58.340 --> 00:18:59.400
So enter queue.

262
00:19:00.450 --> 00:19:04.070
Hey, looks like that worked that killed the program?

263
00:19:04.340 --> 00:19:04.700
Right?

264
00:19:05.090 --> 00:19:05.440
All right.

265
00:19:05.450 --> 00:19:08.330
So this is at least that part is all working correctly.

266
00:19:08.330 --> 00:19:11.090
Now I'm going to run it one more time and try to actually win.

267
00:19:13.750 --> 00:19:19.030
All right, so I'm going to guess a five, nope, I didn't get it a three.

268
00:19:19.180 --> 00:19:19.520
Nope.

269
00:19:19.540 --> 00:19:21.370
A one two.

270
00:19:23.560 --> 00:19:24.790
Oops for.

271
00:19:25.670 --> 00:19:27.170
Hey, I got it, it was for.

272
00:19:28.160 --> 00:19:28.760
Cool.

273
00:19:29.000 --> 00:19:29.660
OK.

274
00:19:30.810 --> 00:19:33.600
All right, so let's recap what we've done now.

275
00:19:34.050 --> 00:19:41.100
So we removed the hard coating on this while loop here, the hard coated true we used to have it, you

276
00:19:41.100 --> 00:19:42.960
know, we started off like that, right?

277
00:19:43.050 --> 00:19:46.010
So that was just going to make that loop just continue to go forever.

278
00:19:46.020 --> 00:19:55.080
Essentially, we replaced that with this logic that says keep looping as long as or while the guest

279
00:19:55.080 --> 00:20:00.960
numb text is not is not equal to Q.

280
00:20:00.960 --> 00:20:04.620
And I know it's, you know, you read it kind of out of order, right?

281
00:20:04.830 --> 00:20:11.430
Guess num text is not equal to Q, but that's just how you know the coating works.

282
00:20:11.640 --> 00:20:12.020
All right.

283
00:20:12.030 --> 00:20:17.430
So and then keep in mind that we flipped the order of these two bits here.

284
00:20:17.550 --> 00:20:25.410
Initially, we were doing just num text that equals Q, but that doesn't work well if you initialize

285
00:20:25.410 --> 00:20:27.540
the variable to null, right?

286
00:20:27.720 --> 00:20:30.540
Because you can't call a method on a null object.

287
00:20:30.540 --> 00:20:38.580
So to protect ourselves from the program blowing up, if you called it called a method like equals on

288
00:20:38.580 --> 00:20:41.320
a null object to protect ourselves from that.

289
00:20:41.340 --> 00:20:50.700
We flipped the parts around and we we call equals on the Q object instead, which will always exist,

290
00:20:50.700 --> 00:20:50.940
right?

291
00:20:50.940 --> 00:20:52.050
Because it's hard coded.

292
00:20:52.920 --> 00:20:59.160
Then we got to blow up when we tried to pass the Q.

293
00:20:59.160 --> 00:21:05.040
If you enter to Q, if the program was blowing up when we tried to convert the Q into a number, because

294
00:21:05.040 --> 00:21:06.840
that doesn't make any sense, right?

295
00:21:07.110 --> 00:21:14.460
And so then we had to protect ourselves from being able to execute this line in particular if we did

296
00:21:14.460 --> 00:21:15.420
enter a Q.

297
00:21:15.810 --> 00:21:24.060
And so we ended up just protecting all of this code inside of an f block to say only run all of this

298
00:21:24.060 --> 00:21:30.870
code if the text that you entered matches this regular expression.

299
00:21:30.990 --> 00:21:38.310
And now we get a really nice chance to see a somewhat realistic scenario where we might want to use

300
00:21:38.310 --> 00:21:39.030
a regex.

301
00:21:39.210 --> 00:21:45.330
In this case, we are validating that what we're entering is actually numbers, right?

302
00:21:45.480 --> 00:21:49.440
And so that's a that's a pretty decent little use of a red x there.

303
00:21:49.650 --> 00:21:49.920
OK.

304
00:21:49.950 --> 00:21:56.280
So we're going to wrap up this lesson and we will continue with this program, though, and we will

305
00:21:56.280 --> 00:22:01.440
learn a variation on the while loop and I will see you in the next one.
