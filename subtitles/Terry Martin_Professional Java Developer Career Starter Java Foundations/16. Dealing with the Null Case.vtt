WEBVTT
1
00:00:01.110 --> 00:00:06.450
All right, now in this lesson, we're going to look at a couple more techniques that we can use to

2
00:00:06.450 --> 00:00:08.340
solve some interesting problems.

3
00:00:08.820 --> 00:00:15.450
So there was one problem that I raised a couple of lessons ago in the main class here.

4
00:00:15.480 --> 00:00:19.560
Let me minimize that in this main class here in our switch.

5
00:00:19.590 --> 00:00:25.590
We needed to provide a default scenario here, and at the time I didn't feel like dealing with it.

6
00:00:25.590 --> 00:00:27.870
So I said, for now, let's just return a null.

7
00:00:28.020 --> 00:00:32.970
But I also mentioned that that could come back and bite us later if we were not careful, especially

8
00:00:32.970 --> 00:00:33.990
in real life.

9
00:00:34.290 --> 00:00:45.450
So the problem is that this switch is switching on the role field that is coming out of this text string

10
00:00:45.450 --> 00:00:45.810
here.

11
00:00:46.290 --> 00:00:51.240
So the role field would be any of these guys program or manager analysts here.

12
00:00:51.630 --> 00:01:00.000
And what would happen is if that word that was in the role field here cannot match to any of these cases

13
00:01:00.000 --> 00:01:05.070
here, then the switch would go to the default, in which case it would return a null.

14
00:01:05.460 --> 00:01:09.780
That null would get stored in the employee, which is what it starts off being anyway.

15
00:01:10.080 --> 00:01:16.020
Then we would come down here to print something from a null object, which is to say no object at all,

16
00:01:16.200 --> 00:01:19.560
and you can't call a method on a null object.

17
00:01:19.560 --> 00:01:23.250
And so we would get an error, which in Java is called an exception.

18
00:01:23.250 --> 00:01:25.230
By the way, we will learn about exceptions.

19
00:01:25.560 --> 00:01:31.170
And you'd get what's called a null pointer exception, just meaning that you tried to call a method

20
00:01:31.170 --> 00:01:33.990
on an object that points to nowhere, right?

21
00:01:34.140 --> 00:01:41.220
Because these object variables really are just pointing to a location in memory somewhere where there

22
00:01:41.220 --> 00:01:45.870
is an object, but a null variable points to nowhere, essentially.

23
00:01:46.470 --> 00:01:46.820
All right.

24
00:01:46.830 --> 00:01:50.100
And so the program would blow up and stop working at that point.

25
00:01:50.490 --> 00:01:54.180
So ideally, we'd rather solve this problem in a better way.

26
00:01:54.360 --> 00:02:01.920
I mentioned that one way we could solve it is by just creating a dummy class, so not CEO or analyst

27
00:02:01.920 --> 00:02:02.950
or manager programmer.

28
00:02:02.970 --> 00:02:09.480
Maybe it's just dummy employee or fake employee or whatever, and then implement the get salary method

29
00:02:09.480 --> 00:02:11.790
on that class to return zero.

30
00:02:12.090 --> 00:02:18.270
So that would have the effect of returning something that isn't null, which is generally not a bad

31
00:02:18.270 --> 00:02:24.630
idea, and it won't negatively impact our calculations because it returns a zero.

32
00:02:24.870 --> 00:02:25.230
Right?

33
00:02:25.470 --> 00:02:27.090
So that's one way we could do it.

34
00:02:27.600 --> 00:02:34.530
Interestingly, now that we have implemented a class hierarchy and changed the employee interface to

35
00:02:34.530 --> 00:02:43.320
an employee class, if you recall, we actually did end up implementing a get salary method that does

36
00:02:43.320 --> 00:02:44.640
actually return zero.

37
00:02:44.910 --> 00:02:54.210
And so one thing that we could do now because employee is just the class, we could simply do this new

38
00:02:54.210 --> 00:03:04.540
employee and then pass in our people match support group like so and that would work.

39
00:03:04.560 --> 00:03:11.490
And so now if we were to have one of these, in fact, here, I'll tell you what, I'll duplicate one

40
00:03:11.490 --> 00:03:19.290
line here and I'm going to put something that won't match like programmers right in here.

41
00:03:19.860 --> 00:03:26.380
So that should cause our employee to be called and let's go ahead and run it now.

42
00:03:26.380 --> 00:03:32.490
It shouldn't affect the outcome salary total, but let's run it and see.

43
00:03:33.930 --> 00:03:34.380
Very good.

44
00:03:34.390 --> 00:03:34.680
Yeah.

45
00:03:34.740 --> 00:03:36.000
Nothing blows up there.

46
00:03:36.030 --> 00:03:36.390
Right?

47
00:03:36.660 --> 00:03:42.720
Whereas if we didn't do it this way and let me, let me just put it back to what it was, and now if

48
00:03:42.720 --> 00:03:44.580
we run it, the program is going to blow up.

49
00:03:46.290 --> 00:03:46.890
There we go.

50
00:03:46.950 --> 00:03:48.630
Yeah, it blows up right away.

51
00:03:49.080 --> 00:03:54.900
OK, so well blows up after the first one, rather after the first employee is passed.

52
00:03:54.960 --> 00:03:55.380
Right?

53
00:03:55.410 --> 00:03:57.000
Yeah, because it doesn't know what to do with that.

54
00:03:57.000 --> 00:04:03.480
So that's a little example of what can go wrong if we don't think about these kinds of scenarios.

55
00:04:03.990 --> 00:04:10.740
Now, later on, we'll learn another technique that was introduced in newer versions of Java, where

56
00:04:10.740 --> 00:04:16.020
we maybe don't even rely on null values so much.

57
00:04:16.980 --> 00:04:24.660
Now, another way that we also could have handled this is to check for null before we call these two

58
00:04:24.660 --> 00:04:25.310
lines here.

59
00:04:25.530 --> 00:04:34.560
So we could do something like select these two lines here and surround them with the what is a command

60
00:04:34.560 --> 00:04:38.010
option T and surround them with an F block.

61
00:04:39.240 --> 00:04:50.270
So number one, and then we can say something like if an employee is not null, then do these things

62
00:04:50.280 --> 00:04:52.500
otherwise don't do these things.

63
00:04:52.500 --> 00:04:54.960
So here, let's just run this again and see.

64
00:04:55.650 --> 00:04:56.250
There you go.

65
00:04:56.280 --> 00:04:59.640
So now it doesn't blow up and we still get the same number as before.

66
00:04:59.790 --> 00:05:01.410
So this is another way to handle that.

67
00:05:01.410 --> 00:05:07.260
But it does involve us putting a little bit tiny, tiny, tiny, bit more complexity because we're doing

68
00:05:07.260 --> 00:05:08.370
this conditional block.

69
00:05:08.370 --> 00:05:13.680
And if you might recall, I stated that every time we put a conditional block in our code, that actually

70
00:05:13.680 --> 00:05:16.130
increases a certain type of complexity.

71
00:05:16.140 --> 00:05:23.190
It's called psychosomatic complexity, and it is one measurement or a metric that can be tracked to

72
00:05:23.190 --> 00:05:28.470
kind of give us an idea of how complex a class is overall.

73
00:05:28.710 --> 00:05:34.170
So, you know, if we can avoid having to use a conditional and still get the same basic outcomes in

74
00:05:34.170 --> 00:05:37.170
effect, we might want to look for ways to avoid that.

75
00:05:37.170 --> 00:05:40.080
But this is a small one and you see this often in code.

76
00:05:40.290 --> 00:05:42.030
This would be called a null check.

77
00:05:42.180 --> 00:05:47.430
We're just checking before we call employee, we're checking to make sure, hey, only do these things

78
00:05:47.430 --> 00:05:54.600
if if employee is not null, right, which you can basically translate to mean empty effectively.

79
00:05:54.990 --> 00:06:01.080
OK, now there's one other technique that we will learn a little bit later for dealing with nulls because

80
00:06:01.080 --> 00:06:08.460
the the new hotness which isn't that new anymore, but the new ish the newer hotness in the Java world

81
00:06:08.670 --> 00:06:14.700
is to actually not work with nulls and instead return something called an optional.

82
00:06:14.820 --> 00:06:17.850
So we'll look at that in a later lesson as well.

83
00:06:17.880 --> 00:06:24.480
OK, so so far now we've seen that we can just leave that null and then we can do a null check, or

84
00:06:24.480 --> 00:06:31.470
we could create a new subclass that's kind of like a dummy object and return the dummy object.

85
00:06:31.470 --> 00:06:33.840
I left that as an exercise for you to do, though.

86
00:06:33.850 --> 00:06:39.690
So the same way that we created analyst and CEO and manager and programmer, we could create one more

87
00:06:39.690 --> 00:06:43.170
class, call it whatever you want, dummy employee or something.

88
00:06:43.170 --> 00:06:50.070
It would still need to extend from the employee class, but you would be implementing it such that it's

89
00:06:50.100 --> 00:06:53.400
get salary method would intentionally just return to zero.

90
00:06:53.550 --> 00:06:55.020
And we don't really care about it.

91
00:06:55.230 --> 00:06:58.580
And it's up to you what you'd want to do with it to string method.

92
00:06:58.590 --> 00:07:03.390
It's kind of a throwaway placeholder just so that we're not returning nothing.

93
00:07:03.480 --> 00:07:05.910
OK, so that's that's something we could do.

94
00:07:06.090 --> 00:07:12.900
Or you saw that in this particular case, our employee class already happens to implement by default,

95
00:07:13.230 --> 00:07:15.660
a get salary method that returns zero.

96
00:07:15.660 --> 00:07:21.270
So we also could just instantiate an instance of the employee class itself.

97
00:07:21.480 --> 00:07:24.540
OK, so we've seen several ways to deal with this.

98
00:07:24.750 --> 00:07:30.870
And so in the next lesson, we are going to carry on with some additional things that we can do with

99
00:07:30.870 --> 00:07:32.280
the employee class.

100
00:07:32.430 --> 00:07:34.080
So I'll see you in the next one.
