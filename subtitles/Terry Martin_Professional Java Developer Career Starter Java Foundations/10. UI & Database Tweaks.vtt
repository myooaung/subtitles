WEBVTT
1
00:00:00.330 --> 00:00:00.750
All right.

2
00:00:00.780 --> 00:00:01.500
Welcome back.

3
00:00:01.740 --> 00:00:10.170
So in the last lesson, we implemented this form and we got it to save new people to our database and

4
00:00:10.170 --> 00:00:16.020
got the web page reloading using a redirect, though, so that we could refresh all of the information

5
00:00:16.020 --> 00:00:18.330
on the page each time we add a new person.

6
00:00:18.570 --> 00:00:24.510
As you have noticed here, I've also decided to try changing the layout here to do a side by side instead

7
00:00:24.510 --> 00:00:25.910
of the top and bottom.

8
00:00:25.920 --> 00:00:29.010
This might work out a little better for us going forward.

9
00:00:29.490 --> 00:00:36.990
So now in this lesson, I want to clean up a couple of things and I want to show you an issue with our

10
00:00:36.990 --> 00:00:39.100
form and then we will fix that issue.

11
00:00:39.120 --> 00:00:39.510
OK.

12
00:00:39.930 --> 00:00:46.860
So I think the first thing we'll do is let's go ahead and get rid of the dummy data that we're loading

13
00:00:46.860 --> 00:00:52.890
into the database and just clear that out, since we now have a way to put real data or at least more

14
00:00:52.890 --> 00:00:55.740
real data into the into the program.

15
00:00:55.740 --> 00:00:56.070
OK?

16
00:00:56.280 --> 00:01:00.870
So let's jump over to the person or people data loader.

17
00:01:00.870 --> 00:01:05.830
I can't remember what I named it data load loader person data loader.

18
00:01:05.830 --> 00:01:06.330
And that's it.

19
00:01:06.630 --> 00:01:06.980
Yeah.

20
00:01:06.990 --> 00:01:12.180
So there are a few ways that we could clear this guy out.

21
00:01:12.540 --> 00:01:21.840
I think what we may do, though, is simply comment out the at component annotation that will cause

22
00:01:21.840 --> 00:01:28.440
this class to never even be loaded by spring when the application is restarted.

23
00:01:28.470 --> 00:01:30.630
OK, so that's one way that we can do this.

24
00:01:31.560 --> 00:01:34.860
So let's restart, and let's try that out.

25
00:01:35.430 --> 00:01:39.360
Now we may need to fully restart the application.

26
00:01:39.450 --> 00:01:39.660
No.

27
00:01:39.660 --> 00:01:41.070
Well, I guess we don't need to.

28
00:01:41.100 --> 00:01:42.090
OK, so there we go.

29
00:01:42.630 --> 00:01:43.380
Got everything going?

30
00:01:43.500 --> 00:01:49.410
Now, first thing you may notice here is the fact that our table renders kind of weird now because there's

31
00:01:49.410 --> 00:01:50.430
no data there.

32
00:01:50.700 --> 00:01:51.840
I don't like that.

33
00:01:52.140 --> 00:01:57.690
I would like at least to have some indication that, hey, here's a table with no data, and we can

34
00:01:57.690 --> 00:01:58.880
do that pretty easily.

35
00:01:58.890 --> 00:02:02.700
So we'll jump back over to the people that it's HTML file here.

36
00:02:03.030 --> 00:02:11.700
And what we can do is we can render one conditional row that only shows up when we don't have any data.

37
00:02:11.850 --> 00:02:16.960
And that row can basically say something like no data, you know, something something along those lines.

38
00:02:16.980 --> 00:02:17.340
OK.

39
00:02:17.640 --> 00:02:20.880
So the way we can do that is right here.

40
00:02:21.180 --> 00:02:23.370
I'm in the table element here.

41
00:02:23.370 --> 00:02:26.370
And then there's the header, right, the heading for the table.

42
00:02:26.550 --> 00:02:27.750
And now we're in the body.

43
00:02:27.960 --> 00:02:33.240
Technically, these rows should be indented inside of that body, but I guess I won't bother with that

44
00:02:33.240 --> 00:02:33.870
right now.

45
00:02:34.200 --> 00:02:34.460
All right.

46
00:02:34.470 --> 00:02:37.740
So we'll put another table row in here.

47
00:02:38.220 --> 00:02:39.000
Like So?

48
00:02:39.600 --> 00:02:45.240
OK, so there's our table row and then we'll want to have a table data cell.

49
00:02:45.270 --> 00:02:46.920
OK, that's what the PTD is for.

50
00:02:47.310 --> 00:02:49.620
And then we'll say no data.

51
00:02:49.800 --> 00:02:53.580
OK, now let's just see what that looks like by itself first.

52
00:02:55.640 --> 00:03:01.550
All right, so that doesn't look very good, because it's just taking up one column out of all the columns

53
00:03:01.550 --> 00:03:02.330
that should be here.

54
00:03:02.540 --> 00:03:08.300
Now if we don't want to add a bunch of dummy columns to this one row and we don't need to do that,

55
00:03:08.480 --> 00:03:14.630
we can specify how many columns this table data element should span.

56
00:03:14.720 --> 00:03:15.170
OK.

57
00:03:15.290 --> 00:03:17.990
So we can tell it to kind of take up more columns.

58
00:03:18.350 --> 00:03:25.100
So the way to do that is with a call span equals and then the number of columns that we want it to to

59
00:03:25.100 --> 00:03:25.580
span.

60
00:03:25.610 --> 00:03:32.210
So in this case, we've got one two three four five six columns, so I will put six in there and let's

61
00:03:32.210 --> 00:03:33.590
see what this looks like.

62
00:03:33.860 --> 00:03:34.040
All right.

63
00:03:34.040 --> 00:03:35.330
So that's a little bit better.

64
00:03:35.330 --> 00:03:37.880
But I wouldn't mind if this were centered.

65
00:03:37.880 --> 00:03:39.750
Maybe so we can do that, too.

66
00:03:39.770 --> 00:03:41.000
We can get that centered.

67
00:03:41.010 --> 00:03:46.430
What we can do is use a class and then text, say, Oops center.

68
00:03:48.130 --> 00:03:49.180
All right, there we go.

69
00:03:49.430 --> 00:03:52.810
That's a little bit better, but I think we can improve a little bit further.

70
00:03:53.110 --> 00:03:59.260
Now this text center, by the way, that comes from the bootstrap framework, OK, that's a style that's

71
00:03:59.260 --> 00:04:00.400
coming from bootstrap.

72
00:04:00.640 --> 00:04:05.560
Now what I think we want to do now, let's see what this table would look like if we put a border around

73
00:04:05.560 --> 00:04:06.100
everything.

74
00:04:06.100 --> 00:04:11.500
Because as you can see, the table is kind of just bleeding right into the form and all of that.

75
00:04:11.510 --> 00:04:13.120
It's a little confusing looking.

76
00:04:13.300 --> 00:04:19.720
So if we jump over here to the bootstrap documentation, we can do all kinds of things and let me see

77
00:04:19.720 --> 00:04:23.200
here, I'm just going to search for border table borders.

78
00:04:23.230 --> 00:04:23.950
There we go.

79
00:04:24.030 --> 00:04:26.440
Well, that went in the wrong direction.

80
00:04:26.440 --> 00:04:27.010
There we go.

81
00:04:27.220 --> 00:04:29.020
So let's see here.

82
00:04:31.100 --> 00:04:31.730
Order.

83
00:04:31.760 --> 00:04:35.810
Yes, so we can do all kinds of things, so we'll start off with just a table bordered.

84
00:04:36.110 --> 00:04:36.580
OK.

85
00:04:36.890 --> 00:04:38.750
That's the class that we will use.

86
00:04:38.750 --> 00:04:39.680
Table bordered.

87
00:04:39.950 --> 00:04:41.500
OK, so let's try that.

88
00:04:41.500 --> 00:04:42.800
So jump back over here.

89
00:04:43.070 --> 00:04:43.360
All right.

90
00:04:43.370 --> 00:04:50.390
So yeah, we'll we'll throw that in here now that will go on the table on the table element itself in

91
00:04:50.390 --> 00:04:51.140
its class.

92
00:04:51.150 --> 00:04:57.920
So we'll put a table bordered right there and let's refresh and see what that does for us.

93
00:04:57.950 --> 00:04:58.370
OK.

94
00:04:58.490 --> 00:05:00.860
So it's it's kind of subtle kind of subtle.

95
00:05:00.860 --> 00:05:03.470
Let's see what other options we have there, by the way.

96
00:05:04.370 --> 00:05:08.840
Let's see so we can play with colors and.

97
00:05:10.030 --> 00:05:10.830
Few things there.

98
00:05:10.980 --> 00:05:16.740
Now here's one also to make the table smaller, and I wouldn't mind doing that, particularly because

99
00:05:16.920 --> 00:05:22.110
we're now displaying in this more scrunched up view table small.

100
00:05:23.600 --> 00:05:28.880
OK, yeah, so that made things just a little bit more compact, and I do kind of like the look of that.

101
00:05:30.170 --> 00:05:30.680
All right.

102
00:05:30.680 --> 00:05:34.550
So that's looking, that's looking OK, looking a little better, I guess.

103
00:05:34.820 --> 00:05:39.650
So now let me show you another potential issue that we're going to have, though.

104
00:05:39.830 --> 00:05:42.350
So let's go ahead and just put a person in here.

105
00:05:42.740 --> 00:05:44.510
So we'll do person one.

106
00:05:45.830 --> 00:05:57.260
Smith won one, 2000 and P. Smith at People dot com and 1000 bucks and hit Enter.

107
00:05:57.440 --> 00:06:00.620
OK, so there's that person now notice what's happening here.

108
00:06:00.890 --> 00:06:03.230
The no data road did not go away.

109
00:06:03.470 --> 00:06:04.340
We don't want that.

110
00:06:04.550 --> 00:06:10.940
We want it so that if there is actual real data in here, then you won't see the no data thing.

111
00:06:11.210 --> 00:06:14.030
You'll only see the no data thing if there is no data here.

112
00:06:14.150 --> 00:06:15.230
So how can we do that?

113
00:06:15.740 --> 00:06:24.220
Well, what we can do is come back over here to our our no data roadmaps.

114
00:06:24.260 --> 00:06:25.280
Where did it go?

115
00:06:27.300 --> 00:06:27.880
Here it is.

116
00:06:27.900 --> 00:06:28.760
There's are no data.

117
00:06:29.190 --> 00:06:38.100
OK, so we can use a an attribute from time leave to conditionally render this row OK.

118
00:06:38.460 --> 00:06:41.010
And what that will look like is to call in.

119
00:06:41.010 --> 00:06:44.790
If so, it's an if statement which you are familiar with.

120
00:06:44.970 --> 00:06:51.990
And then we'll use a dollar sign and two curly braces so that we can interpret some code basically that

121
00:06:51.990 --> 00:06:56.630
that lets you interpret code when you put this a dollar sign in curly braces.

122
00:06:56.640 --> 00:07:02.100
In fact, there's a few variations we already saw the star the asterisk, curly brace, and now we're

123
00:07:02.100 --> 00:07:05.700
doing another dollar sign, curly brace, kind of like what we did down here, in fact.

124
00:07:06.300 --> 00:07:07.620
Oh, and that reminds me of something else.

125
00:07:07.890 --> 00:07:14.880
I duplicated a few of these table sells and we got the double braces there, and it's not really hurting

126
00:07:14.880 --> 00:07:17.100
anything, but we didn't explicitly need them.

127
00:07:17.100 --> 00:07:21.180
For most of these fields, we really only needed it for the date of birth, right?

128
00:07:21.750 --> 00:07:22.440
In fact, you know what?

129
00:07:22.440 --> 00:07:25.080
I'm just going to go ahead and just fix that real quick.

130
00:07:25.860 --> 00:07:30.510
Oh, well, actually, we do want it for the salary also, though, so it's really just the email filled

131
00:07:30.840 --> 00:07:32.730
that we don't want that on.

132
00:07:32.910 --> 00:07:34.980
OK, so we'll restart that in a minute.

133
00:07:35.200 --> 00:07:36.870
Anyway, back up here.

134
00:07:37.140 --> 00:07:37.430
Yeah.

135
00:07:37.440 --> 00:07:42.540
So this if here now what we can do is timely, actually.

136
00:07:42.540 --> 00:07:46.980
Here, let's open up the documentation so that you'll know where I'm finding this stuff and then you'll

137
00:07:46.980 --> 00:07:50.280
be able to find it yourself because obviously I'm not showing you everything here.

138
00:07:50.280 --> 00:07:55.260
So we'll go back to the timely documentation documents.

139
00:07:55.560 --> 00:07:57.780
And let's see.

140
00:07:57.780 --> 00:07:59.480
Read online.

141
00:08:02.710 --> 00:08:09.010
And let's see, so we've got functions, we've got functions that are kind of down at the bottom, if

142
00:08:09.010 --> 00:08:10.540
I recall correctly.

143
00:08:11.520 --> 00:08:12.720
Yeah, there we go lists.

144
00:08:13.260 --> 00:08:15.390
OK, so we've got functions here.

145
00:08:15.600 --> 00:08:18.450
And one of our functions is is empty.

146
00:08:19.020 --> 00:08:20.670
So what do you think we're going to do with that?

147
00:08:21.480 --> 00:08:28.770
We're going to come over here and we're going to copy some of what that says lists that is empty.

148
00:08:29.400 --> 00:08:33.250
And then we're going to pointed at a list and we have a list.

149
00:08:33.270 --> 00:08:36.300
We have a list of people, right?

150
00:08:36.600 --> 00:08:40.470
And because that's where we're getting the people, it's this list right here.

151
00:08:40.500 --> 00:08:42.990
This variable that's in our model is people.

152
00:08:42.990 --> 00:08:47.760
So we can refer to that up here and test whether or not that collection is empty.

153
00:08:47.910 --> 00:08:52.070
And if it is empty, then we will render this row.

154
00:08:52.080 --> 00:08:54.880
And if it isn't empty, then it will not render.

155
00:08:54.900 --> 00:08:56.640
That's what we're trying to do here.

156
00:08:56.670 --> 00:09:04.980
OK, so that makes sense that we're saying if the people object, which is an adorable, if that thing

157
00:09:04.980 --> 00:09:10.050
is empty, then render this whole entire row with its children.

158
00:09:10.560 --> 00:09:11.940
Otherwise don't render it.

159
00:09:12.300 --> 00:09:15.090
OK, so let's see if that works.

160
00:09:15.210 --> 00:09:16.740
So we'll restart.

161
00:09:17.640 --> 00:09:21.690
Now I lost my data, though, so let me put that data back in now.

162
00:09:22.380 --> 00:09:25.700
Person one Smith Oops.

163
00:09:26.460 --> 00:09:27.390
Oh, one oh one.

164
00:09:27.390 --> 00:09:29.640
2000 P. Smith.

165
00:09:30.030 --> 00:09:32.610
There we go at people and 1000 less.

166
00:09:33.090 --> 00:09:33.660
There we go.

167
00:09:33.670 --> 00:09:38.370
So now we've got that person and our no data.

168
00:09:38.370 --> 00:09:39.660
Roe disappeared.

169
00:09:39.690 --> 00:09:41.640
OK, and that's that's what we wanted.

170
00:09:41.640 --> 00:09:43.440
So that's working nicely now.

171
00:09:43.740 --> 00:09:47.670
Now you may be wondering how come our data disappeared when I restarted?

172
00:09:48.060 --> 00:09:52.990
And because we are using a database, we are, but we're using an in-memory database.

173
00:09:53.010 --> 00:09:53.460
OK.

174
00:09:53.730 --> 00:10:00.060
And because we're using it in memory database, it actually loses its data every time the Java process

175
00:10:00.060 --> 00:10:00.930
restarts.

176
00:10:01.140 --> 00:10:08.070
Now we can go ahead and address that now and configure spring boot and the H2 database sitting underneath

177
00:10:08.070 --> 00:10:12.960
this application to not be an in-memory database and actually retain our data.

178
00:10:13.080 --> 00:10:13.470
OK.

179
00:10:13.710 --> 00:10:19.560
This is again, just the default behavior that you get from spring boot if you don't configure anything

180
00:10:19.560 --> 00:10:19.890
at all.

181
00:10:20.040 --> 00:10:26.250
And honestly, it just makes the process of getting something up and going quickly really nice because

182
00:10:26.250 --> 00:10:31.280
it can often be a little bit of a pain in the butt to have to go, stop and look up.

183
00:10:31.290 --> 00:10:35.730
OK, what's the URL string for a database and where do I want to put it in all that?

184
00:10:35.730 --> 00:10:39.720
You don't want to take time to think about all of that all the time, like right from the start, you

185
00:10:39.720 --> 00:10:44.670
kind of want to just get some good stuff going first and then come back later, maybe and think about

186
00:10:44.670 --> 00:10:46.440
all those boring parts, right?

187
00:10:46.680 --> 00:10:49.350
But now we're at the little boring part, but it won't be too boring.

188
00:10:49.470 --> 00:10:49.700
All right.

189
00:10:49.710 --> 00:10:50.490
So how do we do this?

190
00:10:50.640 --> 00:10:56.920
Well, we will go to the application properties file, which we can come over here.

191
00:10:56.940 --> 00:10:57.540
So there it is.

192
00:10:57.550 --> 00:10:59.400
So application that properties file.

193
00:10:59.400 --> 00:11:06.360
This is the main place where you do a lot of the configuring of your spring boot applications, OK?

194
00:11:06.420 --> 00:11:08.790
And there is an alternative also that we could use.

195
00:11:08.790 --> 00:11:13.220
There's application that properties or we could rename this file to application that Yamal.

196
00:11:13.530 --> 00:11:13.830
Why?

197
00:11:14.580 --> 00:11:20.490
And that would give us a different format, a hierarchical format, which usually I do prefer.

198
00:11:20.730 --> 00:11:25.650
But I'm going to leave it at properties for right now, because that's a little bit of a simpler format.

199
00:11:25.890 --> 00:11:30.810
OK, so I'm going to open that file up and then I'm going to close that to give us some space here.

200
00:11:30.960 --> 00:11:39.600
And now let me also jump over to the documentation for spring so that you can see what our options are

201
00:11:39.600 --> 00:11:39.960
here.

202
00:11:40.260 --> 00:11:41.400
So oops.

203
00:11:41.580 --> 00:11:42.180
So let's see.

204
00:11:42.180 --> 00:11:51.150
We'll go to the docs that spring that Io and come up here and jump to the projects and spring boot.

205
00:11:52.160 --> 00:11:56.030
Learn reference documentation.

206
00:11:56.960 --> 00:11:59.060
And let's see here.

207
00:11:59.270 --> 00:12:01.520
Application properties.

208
00:12:01.790 --> 00:12:02.010
All right.

209
00:12:02.030 --> 00:12:07.190
So here's a list of some of the properties that we can play with.

210
00:12:08.060 --> 00:12:08.330
All right.

211
00:12:08.330 --> 00:12:13.010
And then from here, I would probably just start searching and I kind of vaguely know what I'm looking

212
00:12:13.010 --> 00:12:13.310
for.

213
00:12:13.310 --> 00:12:15.860
I'm looking for a something about a.

214
00:12:16.850 --> 00:12:23.570
You are all property, and so I would probably just keep hitting enter a few times until I started to

215
00:12:23.570 --> 00:12:26.000
zero in on it, and now I'm getting close right here, spring.

216
00:12:26.000 --> 00:12:31.910
That data source JD DCP to now, that's not quite what I want, but I'm getting close.

217
00:12:32.540 --> 00:12:33.650
Let's see here.

218
00:12:33.650 --> 00:12:34.070
So.

219
00:12:35.170 --> 00:12:38.500
Now I happen to already know what I'm looking for, but I'm kind of showing you some ways that you could

220
00:12:38.500 --> 00:12:42.520
find properties without having to memorize every single property that there is.

221
00:12:42.700 --> 00:12:46.270
And I see what I want right here at spring, that data source that URL.

222
00:12:46.450 --> 00:12:47.470
So then I can come over.

223
00:12:47.480 --> 00:12:49.480
I could have copied that, but I'll just type it in.

224
00:12:49.690 --> 00:12:55.110
So I'm going to set spring that data source URL equals.

225
00:12:55.120 --> 00:13:00.220
This is how you use a properties file equals and b c.

226
00:13:00.220 --> 00:13:07.960
Now this will be the JTBC's URL or ABC URL, just like what we did in the database section where we

227
00:13:07.960 --> 00:13:11.070
had to, you know, point at a file or whatever.

228
00:13:11.080 --> 00:13:14.140
So I'm just going to make up something here similar to what we did before.

229
00:13:14.160 --> 00:13:21.210
So Jeb B C colon h to colon tilde, then that tilde means my home directory.

230
00:13:21.230 --> 00:13:26.470
That's just where I choose to put this file that we're going to refer to.

231
00:13:26.800 --> 00:13:27.880
And let's see.

232
00:13:27.880 --> 00:13:34.300
This project is called People D Dash Web, so I'm going to call the database that as well.

233
00:13:34.390 --> 00:13:39.400
OK, now you can call yours whatever you want, and you can put yours wherever you like as well.

234
00:13:39.410 --> 00:13:42.150
But that's where I'm going to put mine for now.

235
00:13:42.190 --> 00:13:49.990
And while we're at it, let me introduce you to a few more properties as well so we can make it so that

236
00:13:50.170 --> 00:13:55.330
spring data and the underlying technology that's really doing all the heavy lifting of talking to the

237
00:13:55.330 --> 00:14:02.380
database and everything which is called hibernate, we can we can tell those tools to show us the sequel

238
00:14:02.380 --> 00:14:07.000
that they are generating because these tools are generate will really hibernate is generating skill

239
00:14:07.000 --> 00:14:07.500
for us.

240
00:14:07.510 --> 00:14:09.520
And so maybe we want to see that sequel.

241
00:14:09.520 --> 00:14:14.370
Sometimes it can be helpful to help troubleshoot what's going on with the tool, although we're doing

242
00:14:14.380 --> 00:14:19.180
really simplistic things right now, but we can turn that on by default, it's not turned on.

243
00:14:19.750 --> 00:14:26.780
So to do that, we can come over here and let's see here if I can find that option for you very quickly.

244
00:14:27.400 --> 00:14:37.270
So usually it refers to show it is show sequel right there, and I'm just going to copy it that way.

245
00:14:38.630 --> 00:14:40.610
All right, so, yeah, we want to show the sequel.

246
00:14:40.940 --> 00:14:44.840
All right, so let's see how this all goes with these two options here.

247
00:14:44.870 --> 00:14:47.000
OK, so let's see.

248
00:14:47.000 --> 00:14:49.130
We'll pull up the.

249
00:14:50.800 --> 00:14:53.650
Pull that up, and let's switch back over here.

250
00:14:54.800 --> 00:14:56.540
And then reload.

251
00:15:00.770 --> 00:15:02.600
OK, so we got an issue here.

252
00:15:02.780 --> 00:15:03.920
What is the issue?

253
00:15:04.730 --> 00:15:10.280
It is telling me failed to bind properties under spring JPA show sequel to boot.

254
00:15:10.310 --> 00:15:12.290
Oh sorry, I didn't finish setting this.

255
00:15:12.290 --> 00:15:14.210
I needed to set that to true.

256
00:15:15.050 --> 00:15:15.590
There we go.

257
00:15:15.650 --> 00:15:17.570
OK, so that's one issue.

258
00:15:17.960 --> 00:15:19.250
Let's try that again.

259
00:15:20.430 --> 00:15:22.530
All right, so now it has blown up.

260
00:15:22.830 --> 00:15:25.830
And let's see what error we're getting here.

261
00:15:25.860 --> 00:15:28.710
Something about the grammar could not prepare a statement.

262
00:15:31.450 --> 00:15:36.640
And what I'm doing is I'm just kind of eyeballing quickly looking for a message that kind of jumps out

263
00:15:36.640 --> 00:15:41.590
at me, you know, so I don't have to like, sit here and look at every single line like this looks

264
00:15:41.590 --> 00:15:42.550
kind of interesting.

265
00:15:42.550 --> 00:15:45.430
I see some school here, table person not found, OK.

266
00:15:45.700 --> 00:15:47.380
So what has happened here?

267
00:15:47.470 --> 00:15:48.910
Well, first off, let me explain.

268
00:15:49.270 --> 00:15:55.870
So a school select statement was attempted to be executed against the database, and we can actually

269
00:15:55.870 --> 00:15:56.840
see that statement here.

270
00:15:56.860 --> 00:16:02.500
Now, it's not going to look pretty like ours did because this is all being generated by machine.

271
00:16:02.590 --> 00:16:02.860
Right?

272
00:16:03.130 --> 00:16:05.800
And so machines don't need everything to be very pretty.

273
00:16:06.610 --> 00:16:13.840
So anyway, here's the skill that it generated and that skill tried to execute against the person table.

274
00:16:13.840 --> 00:16:15.970
There's the reference to that table right there.

275
00:16:16.150 --> 00:16:20.630
And we're getting a jtbc SQL syntax error saying that there is no table called person.

276
00:16:20.650 --> 00:16:23.200
Now why are we getting this now, but we weren't getting it before?

277
00:16:23.620 --> 00:16:31.750
Well, the issue is this once we decided to kind of take over some of the settings of the database configuration

278
00:16:31.750 --> 00:16:36.460
from spring boot and spring data, well, then spring kind of said, Oh, OK, you're going to take

279
00:16:36.460 --> 00:16:36.910
it over.

280
00:16:37.000 --> 00:16:38.800
Well, then you take it over.

281
00:16:39.070 --> 00:16:44.470
So now we do have to specify a few of those settings that we were kind of getting some defaults for

282
00:16:44.470 --> 00:16:45.130
before.

283
00:16:45.190 --> 00:16:45.580
OK.

284
00:16:45.910 --> 00:16:51.130
So yeah, once you start to kind of do your own thing, then Spring says, Let me get out of your way

285
00:16:51.130 --> 00:16:52.450
and let you do your own thing.

286
00:16:52.570 --> 00:16:56.570
Now, don't worry, we don't have to do much, but we do have to do a couple extra lines here.

287
00:16:56.590 --> 00:16:56.890
OK.

288
00:16:57.190 --> 00:17:04.930
So in addition to specifying that we want to connect to this database at this location here.

289
00:17:05.290 --> 00:17:13.060
We do have to tell spring and JPA, which ends up being hibernate, really, that we want it to generate

290
00:17:13.060 --> 00:17:14.090
the DEEDLE for us.

291
00:17:14.110 --> 00:17:14.470
OK.

292
00:17:14.710 --> 00:17:16.150
And so we can do that, too.

293
00:17:16.390 --> 00:17:21.910
And here, let's just jump back over here and let me show you some that's going to just search for DDL.

294
00:17:23.780 --> 00:17:26.720
Let's see our search a couple of times until I there we go.

295
00:17:26.870 --> 00:17:32.360
Spring JPA Generate D-Del. and spring JP Hibernate Deedle Dash Oddo.

296
00:17:32.360 --> 00:17:36.960
So let's see what those options do, whether to initialize the schema on startup.

297
00:17:36.980 --> 00:17:38.030
Yes, we do want that.

298
00:17:38.630 --> 00:17:44.120
And Deedle mode, this is actually a shortcut for the hibernate HBM2.

299
00:17:44.150 --> 00:17:47.270
Deadlocked auto property defaults to create drop.

300
00:17:47.310 --> 00:17:54.140
So, OK, so first off, let's just let me copy that line there and paste that.

301
00:17:54.410 --> 00:17:57.360
And my options are true or false, I believe.

302
00:17:58.190 --> 00:17:58.490
Yeah.

303
00:17:58.500 --> 00:18:00.790
So the default, I guess, is false.

304
00:18:02.000 --> 00:18:03.980
So let's put that to true.

305
00:18:04.640 --> 00:18:09.940
And then the other option here was this tidal oddest, right?

306
00:18:09.950 --> 00:18:19.520
So this option refers to how Hibernate should treat the database if there are already tables in it or

307
00:18:19.520 --> 00:18:20.480
if there aren't.

308
00:18:20.510 --> 00:18:21.020
OK.

309
00:18:21.380 --> 00:18:26.570
And I'm not going to get into all of the details, but I will tell you that for our purposes for now.

310
00:18:26.690 --> 00:18:29.330
First off, let me let me just copy that.

311
00:18:30.700 --> 00:18:33.670
And put that right there, and I'm going to paste it.

312
00:18:33.880 --> 00:18:37.880
And for now, I think we will just use the option of update.

313
00:18:37.930 --> 00:18:43.840
So real quick, what this is going to do is, as I've already explained, when we tell Hibernate or

314
00:18:43.840 --> 00:18:50.740
JPA to execute the DEEDLE, and again, DDL just means the sequel commands that create structures like

315
00:18:50.740 --> 00:18:55.430
tables and primary keys and indexes and things of things like that.

316
00:18:55.450 --> 00:18:55.780
OK.

317
00:18:56.110 --> 00:19:03.670
So when we tell JPA to generate the DEEDLE for us, it does that based on whatever we have coded in

318
00:19:03.670 --> 00:19:07.810
our domain model classes, which specifically are entities.

319
00:19:07.810 --> 00:19:10.700
So those classes that we have annotated as an entity?

320
00:19:10.720 --> 00:19:11.080
OK.

321
00:19:11.200 --> 00:19:16.240
It looks at those and then it says, Oh, here's a class called person, which is an entity which has

322
00:19:16.240 --> 00:19:18.130
an ID and a first name and blah blah blah.

323
00:19:18.250 --> 00:19:21.980
And then it translates all of those things into tables and columns.

324
00:19:22.000 --> 00:19:22.360
OK?

325
00:19:22.990 --> 00:19:26.530
What if a table and column are already there in the database, though?

326
00:19:26.530 --> 00:19:27.700
How should it behave then?

327
00:19:27.910 --> 00:19:33.670
So this option tells it how it should behave if there are already tables there or not.

328
00:19:33.820 --> 00:19:39.340
And in this case, it's saying if there's already a table there, but it's different from what our Java

329
00:19:39.340 --> 00:19:43.450
code says, then update it if but otherwise, just leave it alone.

330
00:19:43.480 --> 00:19:43.840
OK.

331
00:19:43.990 --> 00:19:45.610
So that's basically what this is doing.

332
00:19:45.850 --> 00:19:46.450
All right.

333
00:19:46.510 --> 00:19:48.760
So I think that's all we need.

334
00:19:48.940 --> 00:19:51.190
So let's restart this.

335
00:19:52.210 --> 00:19:52.960
There we go.

336
00:19:52.990 --> 00:19:58.420
OK, now we lost all of our data, but we shouldn't lose data ever again unless we want to.

337
00:19:58.750 --> 00:20:01.090
So let's put another person in here person.

338
00:20:01.090 --> 00:20:13.870
One Smith one one, 2000, P one Smith at P Bull dot com and 1000 bucks.

339
00:20:14.200 --> 00:20:15.640
All right, so there's person one.

340
00:20:16.060 --> 00:20:17.920
Now let's put one more in here.

341
00:20:18.640 --> 00:20:24.760
Person to Smith to to 2002.

342
00:20:24.760 --> 00:20:31.300
And this will be to Smith at People.com for 2000.

343
00:20:31.960 --> 00:20:32.470
All right.

344
00:20:32.740 --> 00:20:37.150
So now let's restart and see what happens.

345
00:20:37.330 --> 00:20:37.600
Yep.

346
00:20:38.020 --> 00:20:38.400
Good.

347
00:20:38.410 --> 00:20:40.380
So our data remains.

348
00:20:40.420 --> 00:20:41.440
In fact, you know what?

349
00:20:41.590 --> 00:20:45.910
Let's even just stop the entire application and restarted.

350
00:20:47.540 --> 00:20:47.990
OK.

351
00:20:48.020 --> 00:20:48.860
So there it is.

352
00:20:49.070 --> 00:20:51.320
And then we'll refresh.

353
00:20:52.570 --> 00:20:53.200
There we go.

354
00:20:53.320 --> 00:21:01.690
And now, if you look down here, do you see that select person, that person zero I.D. as I.D. one

355
00:21:01.690 --> 00:21:07.270
zero person, zero that Dobby that email?

356
00:21:09.720 --> 00:21:18.570
As email firstname as first in a four blah blah blah last name, so you see that it looks kind of like

357
00:21:18.570 --> 00:21:27.000
the bizarro computer version of the queries that we were building, where we were using the column aliases

358
00:21:27.000 --> 00:21:32.160
and all of that it's using, it's pretty much the same stuff that we would have done, except it's just

359
00:21:32.160 --> 00:21:37.440
generating weird names for things because it's a computer and that's what computers tend to do right

360
00:21:37.620 --> 00:21:38.640
from person.

361
00:21:40.150 --> 00:21:42.970
And then it even aliases the person table there.

362
00:21:43.360 --> 00:21:48.460
So that's what hibernate, and that's the underlying tool that's really talking to the database is doing.

363
00:21:48.460 --> 00:21:51.340
So we can we can understand what that's doing, right?

364
00:21:51.640 --> 00:21:54.940
And so that is querying all of that data back from the database.

365
00:21:55.270 --> 00:21:58.600
Now there's more stuff that I want to do, but I don't think I'm going to be able to squeeze everything

366
00:21:58.600 --> 00:22:00.100
that I want to do into this lesson.

367
00:22:00.100 --> 00:22:03.460
So I'm going to leave some of the remaining big things for the next lesson.

368
00:22:03.610 --> 00:22:08.770
But there are a few smaller things that we might be able to address real quick here before we close

369
00:22:08.770 --> 00:22:08.980
out.

370
00:22:09.220 --> 00:22:14.920
And I've got one cosmetic thing that I'm not too crazy about, and that is, I don't like the fact that

371
00:22:14.920 --> 00:22:19.540
this table is right up at the very top edge of the entire page.

372
00:22:19.810 --> 00:22:24.220
I would like to have a bit of margin there, so let me show you how we can do that.

373
00:22:24.370 --> 00:22:33.310
So if we jump back over to bootstrap and we can search for margin spacing, margin margin and padding?

374
00:22:33.890 --> 00:22:34.140
All right.

375
00:22:34.160 --> 00:22:40.000
And so this will just kind of give us a little bit of an idea or a key really of what our options are

376
00:22:40.000 --> 00:22:40.810
for margin.

377
00:22:40.810 --> 00:22:48.220
So margin is the space that you can have around around the elements on a in an HTML page, OK?

378
00:22:48.460 --> 00:22:50.710
And again, I don't have time to get into everything.

379
00:22:50.710 --> 00:22:58.000
But if you imagine that almost every element in the in HTML, especially container type elements like

380
00:22:58.000 --> 00:23:04.150
DVDs and tables and things like that, if you imagine that all of those are really just squares and

381
00:23:04.150 --> 00:23:12.130
rectangles, and that those squares and rectangles can have some spacing on the outside of the square

382
00:23:12.370 --> 00:23:14.940
and some spacing on the inside of the square.

383
00:23:14.950 --> 00:23:20.620
OK, for you, just imagine that the outside space, the space outside of the square is called margin

384
00:23:20.620 --> 00:23:27.280
and then the space inside of the square between the square itself and whatever contents are in it.

385
00:23:27.430 --> 00:23:29.230
That space would be called padding.

386
00:23:29.260 --> 00:23:32.470
OK, so you now know a whole lot about CFS.

387
00:23:32.740 --> 00:23:38.760
So anyway, we can specify the margin for our table and let's see here.

388
00:23:38.770 --> 00:23:41.650
So the way we can do that is that they have these codes.

389
00:23:41.650 --> 00:23:50.530
So M stands for margin, P stands for padding and then we can specify top margin or bottom margin,

390
00:23:50.530 --> 00:23:51.550
things like that.

391
00:23:51.820 --> 00:23:57.130
And then a size so empty, zero or whatever.

392
00:23:57.130 --> 00:24:00.550
And so here are some examples empty zero in this one.

393
00:24:00.910 --> 00:24:01.230
Let's see.

394
00:24:01.240 --> 00:24:04.330
So the SE there would stand for the start.

395
00:24:04.450 --> 00:24:04.950
OK.

396
00:24:05.290 --> 00:24:07.270
So I want some space at the top.

397
00:24:07.270 --> 00:24:13.660
So that would be margin at the top, so empty and then a number to represent how much, how much margin

398
00:24:13.660 --> 00:24:14.440
I want there.

399
00:24:14.470 --> 00:24:16.210
OK, so let's let's try that out.

400
00:24:16.570 --> 00:24:26.650
So let's jump back over to here and let's close that down and then let's see now, where do we want

401
00:24:26.650 --> 00:24:27.580
to put this?

402
00:24:27.700 --> 00:24:29.370
I don't know that it matters a whole lot.

403
00:24:29.380 --> 00:24:32.290
I guess we can try putting it on the div itself.

404
00:24:32.500 --> 00:24:36.520
So empty dash, let's try to see what that does.

405
00:24:39.180 --> 00:24:41.070
All right, that did a very tiny bit.

406
00:24:41.250 --> 00:24:43.870
So let's do more, let's see eight.

407
00:24:43.890 --> 00:24:46.080
And I don't remember what the limit is.

408
00:24:47.170 --> 00:24:50.680
OK, so I think I hit the limit right there because it went away.

409
00:24:51.010 --> 00:24:51.670
So let's do.

410
00:24:52.810 --> 00:24:57.070
I'm sorry, I meant empty seven, empty seven.

411
00:24:58.450 --> 00:25:02.430
Oh, you know, I think I do know the limit, I think it's five, if I'm not mistaken.

412
00:25:03.840 --> 00:25:05.190
Let's try GMT five.

413
00:25:06.450 --> 00:25:07.050
There we go.

414
00:25:07.170 --> 00:25:08.940
Yeah, so that's that's a little better.

415
00:25:09.270 --> 00:25:09.630
All right.

416
00:25:10.290 --> 00:25:14.970
So you can go read up on on all of that because I don't remember exactly what those limits were on the

417
00:25:14.970 --> 00:25:15.510
number there.

418
00:25:15.510 --> 00:25:17.130
But anyway, you get the point.

419
00:25:17.550 --> 00:25:23.910
So now one thing that you may notice is that now that I've made the browser window a lot narrower than

420
00:25:23.910 --> 00:25:28.320
it was before, everything is looking a little too scrunched up.

421
00:25:28.770 --> 00:25:35.340
So with this smaller width, I would probably prefer that the contents here would take up more space

422
00:25:35.340 --> 00:25:39.720
left and right or have less margin here, you know, on the left and the right.

423
00:25:40.200 --> 00:25:42.940
But that's only like when the window is this size.

424
00:25:42.960 --> 00:25:49.620
OK, so I would like my my contents here to be a little more responsive that mean meaning to respond

425
00:25:49.650 --> 00:25:51.850
to the width that I have here.

426
00:25:52.050 --> 00:25:52.440
OK?

427
00:25:52.800 --> 00:25:55.950
And bootstrap makes that relatively easy to do.

428
00:25:56.070 --> 00:26:03.380
So currently with the column eight, that looks OK when this window is this wide, right?

429
00:26:03.390 --> 00:26:04.560
That looks OK.

430
00:26:04.830 --> 00:26:05.250
But.

431
00:26:06.490 --> 00:26:12.190
But when it's this size, that's too much margin, so we can actually modify that.

432
00:26:12.340 --> 00:26:19.690
And let me show you how so you can come over here to the bootstrap documentation and we can specify.

433
00:26:19.990 --> 00:26:26.140
We can specify the column width and things with optional breakpoint sizes, if you will.

434
00:26:26.290 --> 00:26:33.010
So we could say something like when the window is big, use eight columns, but when it's medium use

435
00:26:33.640 --> 00:26:37.030
X number of columns and when it's small, use a different number of columns.

436
00:26:37.210 --> 00:26:38.710
We can do something like that.

437
00:26:38.920 --> 00:26:42.070
So let's play around with that and see and see what happens here.

438
00:26:42.160 --> 00:26:48.730
So our options are small, medium and large, so we've got options like small, medium and large.

439
00:26:48.760 --> 00:26:50.740
OK, so let's see.

440
00:26:51.310 --> 00:26:56.230
So if we come back over here, let's try some things out, and I'm just going to experiment a little

441
00:26:56.230 --> 00:26:56.640
bit here.

442
00:26:56.650 --> 00:26:58.540
So let's say a column.

443
00:26:58.810 --> 00:27:03.160
Let's see small and 10.

444
00:27:03.250 --> 00:27:04.300
Let's see what that does.

445
00:27:07.210 --> 00:27:07.690
OK.

446
00:27:07.930 --> 00:27:09.040
Yeah, so look at that.

447
00:27:09.370 --> 00:27:09.760
Right.

448
00:27:09.970 --> 00:27:17.530
So apparently this window does satisfy the criterion for small, OK, and that's the thing, like if

449
00:27:17.770 --> 00:27:25.810
the window width is small and I don't recall how many pixels that is, but if it's small, then use

450
00:27:25.810 --> 00:27:28.840
ten columns instead of eight columns, OK?

451
00:27:29.380 --> 00:27:32.450
So in fact, let's even play around with this a little bit more.

452
00:27:33.160 --> 00:27:38.020
So if I set that to 12, I shouldn't like that if it does what I think it's going to do.

453
00:27:38.500 --> 00:27:39.030
Yeah, OK.

454
00:27:39.040 --> 00:27:44.530
So 12 takes up the whole entire width because, like I said, Bootstrap is based on the concept of of

455
00:27:44.770 --> 00:27:50.170
12 equally spaced columns to take up all the width of your page.

456
00:27:50.170 --> 00:27:50.560
OK?

457
00:27:50.860 --> 00:27:52.630
So that's what you get there now.

458
00:27:52.630 --> 00:27:53.740
Let's see what looks.

459
00:27:54.070 --> 00:27:59.740
So obviously, we don't want that, but let's also see what happens now if I pull this all the way out.

460
00:28:00.730 --> 00:28:01.090
OK?

461
00:28:01.120 --> 00:28:03.250
Look at that now that doesn't revert back.

462
00:28:03.550 --> 00:28:10.180
And so we can see that if we want this to behave differently at these different sizes, I now need to

463
00:28:10.180 --> 00:28:12.980
be a little more explicit with this first rule here.

464
00:28:13.000 --> 00:28:13.360
OK.

465
00:28:13.540 --> 00:28:17.110
So I'm going to put maybe like an M.D. for medium.

466
00:28:17.500 --> 00:28:17.920
OK.

467
00:28:18.100 --> 00:28:19.810
And let me refresh.

468
00:28:23.180 --> 00:28:27.320
OK, so now if I pull this out, look at that.

469
00:28:27.590 --> 00:28:33.600
See, I just hit the break point for Medium, so that break point is somewhere in here.

470
00:28:33.620 --> 00:28:36.980
OK, so I'm going from this is small.

471
00:28:37.460 --> 00:28:44.120
OK, so the rule for small is when when the window is, whatever the small size is, then take up all

472
00:28:44.120 --> 00:28:46.190
of the columns, all 12 columns.

473
00:28:46.310 --> 00:28:53.030
And then when we switch over into whatever the size is for medium, then only use eight of the 12 columns.

474
00:28:53.030 --> 00:28:55.070
OK, and that's what's happening there.

475
00:28:55.100 --> 00:28:55.490
OK.

476
00:28:56.420 --> 00:28:57.380
So that's kind of cool.

477
00:28:57.500 --> 00:29:00.760
So anyway, we know we don't want 12, though.

478
00:29:02.050 --> 00:29:04.120
Let's do 10, I think.

479
00:29:04.390 --> 00:29:05.650
Was that what I had before?

480
00:29:08.860 --> 00:29:09.250
OK.

481
00:29:09.340 --> 00:29:11.770
So, yeah, that looks that looks a little better.

482
00:29:11.980 --> 00:29:13.270
And then when we looked.

483
00:29:14.300 --> 00:29:16.940
And then when we break beyond that.

484
00:29:18.360 --> 00:29:22.380
Yeah, we have a wider margin.

485
00:29:22.650 --> 00:29:22.980
All right.

486
00:29:23.010 --> 00:29:25.410
And so, yeah, that that looks a little better to me.

487
00:29:26.310 --> 00:29:31.800
So you can play with that however you like, but that's a little small introduction to the responsiveness

488
00:29:31.800 --> 00:29:34.320
of the bootstrap framework also.

489
00:29:34.770 --> 00:29:35.010
All right.

490
00:29:35.010 --> 00:29:41.160
And then one more thing I think will try is let's put some titles for the for the table and for the

491
00:29:41.160 --> 00:29:45.030
form and see if that helps to kind of break up things a little bit more.

492
00:29:45.180 --> 00:29:54.690
So right above this table here, let's put a heading in H2, maybe heading and we'll call this I don't

493
00:29:54.690 --> 00:29:57.000
know, people list perhaps.

494
00:29:57.210 --> 00:30:07.020
And then right above the form, let's see what happens if we put another H2 here and person form, I

495
00:30:07.020 --> 00:30:07.440
don't know.

496
00:30:07.710 --> 00:30:09.510
And let's refresh that.

497
00:30:10.020 --> 00:30:10.460
OK.

498
00:30:10.500 --> 00:30:15.420
Yeah, that kind of helps a little bit, I think, to break break things up a bit, we might play around

499
00:30:15.420 --> 00:30:16.380
with this some more.

500
00:30:16.710 --> 00:30:18.350
Oh yeah, I see one other issue here.

501
00:30:18.360 --> 00:30:21.480
I'd like to have some margin at the bottom also.

502
00:30:21.840 --> 00:30:24.640
So let's see here.

503
00:30:24.660 --> 00:30:25.920
Margin.

504
00:30:26.340 --> 00:30:27.840
So I did a margin at the top.

505
00:30:27.840 --> 00:30:34.200
But if I want a margin at the top and the bottom, I think I can just do an m y y meaning y axis up

506
00:30:34.200 --> 00:30:36.600
and bottom are up, top and bottom.

507
00:30:36.930 --> 00:30:38.670
So let's see what that does.

508
00:30:41.840 --> 00:30:42.220
OK.

509
00:30:42.410 --> 00:30:43.260
Yeah, there we go.

510
00:30:43.280 --> 00:30:46.370
So now now I got a little more space there at the bottom.

511
00:30:47.090 --> 00:30:48.710
OK, now I could have done that separately.

512
00:30:48.710 --> 00:30:53.570
I could have done an empty Dash five and an M B Dash three or something like that.

513
00:30:53.570 --> 00:30:59.330
I could have specified separately for each of those, for each of those settings, but this is fine.

514
00:31:01.030 --> 00:31:01.780
OK, cool.

515
00:31:02.320 --> 00:31:04.240
I think that's enough for right now.

516
00:31:04.780 --> 00:31:09.700
All right, so in the next lesson, we're going to do something I think will be pretty cool.

517
00:31:09.940 --> 00:31:11.240
I don't want to even give it away.

518
00:31:11.260 --> 00:31:14.800
So just join me in the next one and you'll see see in the next one.
