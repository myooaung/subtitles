WEBVTT
1
00:00:00.810 --> 00:00:01.890
OK, welcome back.

2
00:00:02.190 --> 00:00:09.300
Now in this next lesson, we're going to continue from where we left off, but now we're really going

3
00:00:09.300 --> 00:00:11.640
to ramp it up and get it get even fancier.

4
00:00:12.030 --> 00:00:20.640
So if you'll recall from the text manipulation lessons that we did previously, one of the last things

5
00:00:20.640 --> 00:00:22.980
we did in there was passing a phone number.

6
00:00:23.160 --> 00:00:27.690
We were able to actually parse out the individual components or parts of the phone number, and we're

7
00:00:27.690 --> 00:00:29.430
going to do that again here.

8
00:00:29.640 --> 00:00:35.190
But with regular expressions now, and we're just about ready to be able to do this.

9
00:00:35.610 --> 00:00:43.800
So carrying on from where we left off, we need to learn about a couple other little classes and approaches

10
00:00:43.800 --> 00:00:50.930
before we can pass out the parts that we want from a phone number string.

11
00:00:50.940 --> 00:00:55.010
And so I'm going to introduce you to those additional classes now.

12
00:00:55.320 --> 00:01:00.810
The first class that you need to know about is called pattern pattern.

13
00:01:01.050 --> 00:01:04.920
And so I just went to a new line and I typed out pattern here.

14
00:01:04.920 --> 00:01:10.530
And the ADP is looking for any classes that come with Java.

15
00:01:10.740 --> 00:01:13.200
That might be the class that I'm referring to.

16
00:01:13.320 --> 00:01:19.260
And it happens to be this first one here under the package Java date you tilde rejects for regular expressions.

17
00:01:19.500 --> 00:01:22.930
So that's the pattern, that's the pattern that I want.

18
00:01:22.950 --> 00:01:30.600
And so if you type that in and you're getting this little sort of pop up here, you can either click

19
00:01:30.600 --> 00:01:35.880
on that or hit return to tell the ADP that that is the class that you want.

20
00:01:36.060 --> 00:01:42.420
And now what just happened is that the ADP just imported this class, if you remember about importing.

21
00:01:42.570 --> 00:01:48.120
It's basically where you're telling Java what package and you can think of the package kind of like

22
00:01:48.120 --> 00:01:50.940
a neighborhood or a zip code.

23
00:01:50.940 --> 00:01:51.480
Sort of.

24
00:01:51.900 --> 00:01:58.770
You're telling Java what package you want to get this pattern class from.

25
00:01:59.100 --> 00:02:06.120
So that you can refer to it by its short name and then you won't have to have all of this on there.

26
00:02:06.210 --> 00:02:12.050
If I did not import this, I could still use it, but then I'd have to have the whole Java you tilde

27
00:02:12.060 --> 00:02:18.480
rig dot pattern every time I wanted to refer to the pattern class, and that would get a little unwieldy.

28
00:02:18.870 --> 00:02:23.490
So we import it so that we can basically have a shorthand there.

29
00:02:23.970 --> 00:02:24.360
OK.

30
00:02:24.630 --> 00:02:33.240
So we're going to create a variable that will hold an object of type pattern, and this pattern object

31
00:02:33.240 --> 00:02:37.200
is going to represent a regular expression.

32
00:02:37.230 --> 00:02:38.670
OK, so that's what that means.

33
00:02:38.670 --> 00:02:41.520
It's a it's a regular expression really is a pattern.

34
00:02:41.730 --> 00:02:42.150
OK.

35
00:02:42.390 --> 00:02:44.550
So that's what we're calling it here as a pattern.

36
00:02:45.030 --> 00:02:48.520
And so now there's a couple of ways that you could consider.

37
00:02:48.540 --> 00:02:54.030
Well, there's a few ways you could decide to name this variable in a lot of books and things.

38
00:02:54.030 --> 00:03:00.510
And online, you'll often see people just refer to the variable that holds the pattern as patty for

39
00:03:00.510 --> 00:03:03.030
short and in a lot of the cases.

40
00:03:03.040 --> 00:03:04.740
I will even do that too.

41
00:03:04.860 --> 00:03:11.280
If for some reason you were going to write some code or a class where you're going to use multiple regular

42
00:03:11.280 --> 00:03:13.650
expressions, all in the same class.

43
00:03:13.950 --> 00:03:15.360
You won't want to do this.

44
00:03:15.450 --> 00:03:22.020
And I also wouldn't recommend calling each one like Pat one Pat to pat three, because that's not very

45
00:03:22.020 --> 00:03:22.950
meaningful either.

46
00:03:23.100 --> 00:03:27.990
In that case, you'd probably want to name the pattern for whatever it's a pattern of.

47
00:03:28.170 --> 00:03:32.010
So in this particular case, it's a pattern for phone numbers.

48
00:03:32.160 --> 00:03:36.510
So I might call it something like phone pat or something like that.

49
00:03:36.990 --> 00:03:41.790
Now, since this will be the only expression I'm going to use in this particular class at this time,

50
00:03:42.060 --> 00:03:46.410
I'm going to save myself a little bit of typing and just go with Pat for now.

51
00:03:46.830 --> 00:03:47.190
All right.

52
00:03:47.370 --> 00:03:48.210
And then equals.

53
00:03:48.330 --> 00:03:54.270
Now here you're going to see a no pun intended pattern that you haven't seen before.

54
00:03:54.450 --> 00:04:01.500
Normally, when we create a new instance of a class, we've been using the new operator and then we

55
00:04:01.500 --> 00:04:03.930
say the the class that we're talking about.

56
00:04:04.170 --> 00:04:11.580
But when it comes to creating a regular expression pattern in Java, that is actually not the approach

57
00:04:11.580 --> 00:04:12.720
that we use.

58
00:04:12.840 --> 00:04:18.540
And the reason there's a couple of reasons for this, but one is that the constructor that gets called

59
00:04:18.540 --> 00:04:23.250
when we do new for the pattern class is private or protected.

60
00:04:23.250 --> 00:04:29.550
I haven't gone and look at it, but it's not accessible by us, and that's not the way that the creators

61
00:04:29.550 --> 00:04:32.400
of that class intended for us to instantiate it.

62
00:04:32.550 --> 00:04:40.410
Instead, what we need to do is we call pattern here and there's a static method on pattern class called

63
00:04:40.410 --> 00:04:41.370
compile.

64
00:04:41.760 --> 00:04:47.730
And this is actually the method that we need to call to create a pattern.

65
00:04:47.940 --> 00:04:54.870
So we're going to call, compile and then we can pass in a regular expression string.

66
00:04:54.900 --> 00:04:55.380
OK.

67
00:04:55.860 --> 00:04:59.490
So what I'm going to do is I'm going to come up here to my rig.

68
00:05:00.770 --> 00:05:03.110
Here and I'm going to select all of this now.

69
00:05:03.200 --> 00:05:06.230
I prefer to do this in a little bit fancier way, I guess.

70
00:05:06.410 --> 00:05:12.470
I'm going to hold down on the option or alt key and then hit the up arrow and on windows, it's controlled

71
00:05:12.470 --> 00:05:14.930
W. And I'm going to do that a few times.

72
00:05:14.930 --> 00:05:19.460
And as you see, each time I do that, I'm selecting more and more and more of that string, and I'm

73
00:05:19.460 --> 00:05:23.210
going to grab it all until I get the quotation marks as well.

74
00:05:23.540 --> 00:05:25.370
OK, so now I've selected that whole string.

75
00:05:25.520 --> 00:05:30.140
Now, of course, I could have just used the mouse and or the cursor and just selected all of that as

76
00:05:30.140 --> 00:05:30.590
well.

77
00:05:30.680 --> 00:05:34.790
But if I weren't explaining this to you, this would have been the quicker, easier thing for me to

78
00:05:34.790 --> 00:05:35.120
do.

79
00:05:35.150 --> 00:05:35.870
Most likely.

80
00:05:36.260 --> 00:05:36.570
All right.

81
00:05:36.590 --> 00:05:42.380
And and now what I want to do is I'm going to extract this string out into its own variable.

82
00:05:42.380 --> 00:05:44.450
And you've seen me do this before.

83
00:05:44.630 --> 00:05:53.360
I'm going to do a on Mac option command V for variable or on Windows or what is a control alt v.

84
00:05:53.690 --> 00:05:59.900
And the ID has already proposed a name for this variable of X, and that's that's fine.

85
00:05:59.970 --> 00:06:05.000
And again, if I were writing a program where I was going to have multiple regular expressions within

86
00:06:05.000 --> 00:06:07.430
the same class, I wouldn't call this Rag X.

87
00:06:07.430 --> 00:06:12.500
I'd probably call it phone number X or, you know, something like that.

88
00:06:12.770 --> 00:06:14.330
But in this case, I'm fine.

89
00:06:14.480 --> 00:06:19.520
So I'm going to accept the proposed variable name here by hitting return.

90
00:06:19.910 --> 00:06:20.330
All right.

91
00:06:20.510 --> 00:06:26.510
And now you see what that did is it created a new line where it created an instance of a string called

92
00:06:26.510 --> 00:06:29.300
Redbacks that brought that string literal up here.

93
00:06:29.450 --> 00:06:34.850
And then it replaced the string literal that I had inside of the matches method with the variable.

94
00:06:34.880 --> 00:06:43.190
OK, so this gets assigned to Rig X and then Rig X is used here and now I can use it again down here,

95
00:06:43.190 --> 00:06:46.280
which is the whole point right there, right?

96
00:06:46.580 --> 00:06:48.120
And then I'll close that.

97
00:06:48.140 --> 00:06:48.560
OK.

98
00:06:48.860 --> 00:06:56.150
So what we're doing now, I mentioned briefly, I think that the syntax and format of a regular expression

99
00:06:56.150 --> 00:06:57.570
really is a language.

100
00:06:57.590 --> 00:06:58.400
It really is.

101
00:06:58.400 --> 00:07:00.550
It's a programming language in and of itself.

102
00:07:00.560 --> 00:07:05.550
So you're you're you're pretty much truly writing a program inside of your program.

103
00:07:05.780 --> 00:07:13.640
You're writing one program that is very specific to how to recognize patterns of text using the regex

104
00:07:14.030 --> 00:07:16.980
language, if you will, inside of Java.

105
00:07:17.420 --> 00:07:18.920
In this particular case.

106
00:07:19.100 --> 00:07:24.290
And so this is a language and as such, it actually can be compiled.

107
00:07:24.290 --> 00:07:26.450
And in fact, it needs to be compiled.

108
00:07:26.450 --> 00:07:30.320
And so that's what this that's what this this method is doing now.

109
00:07:30.410 --> 00:07:33.320
I haven't explained a whole lot about compiling code.

110
00:07:33.500 --> 00:07:35.540
So let me just briefly state this.

111
00:07:35.840 --> 00:07:43.460
So even when we're writing Java here and we run this program, the computer isn't literally reading

112
00:07:43.460 --> 00:07:49.130
each of these words and everything and running it all in real time.

113
00:07:49.430 --> 00:07:59.180
This language of Java is intended to be very easy to read by humans, but not so easy to read for a

114
00:07:59.180 --> 00:07:59.840
computer.

115
00:08:00.320 --> 00:08:08.240
And so for a computer to be able to run this program, there's an intermediate step and I'm greatly

116
00:08:08.240 --> 00:08:14.870
oversimplifying here, but there's an intermediate step in which the computer translates this Java code,

117
00:08:14.870 --> 00:08:17.570
which is roughly kind of English, right?

118
00:08:17.630 --> 00:08:22.160
It translates this into what is called byte code and the Byte Code.

119
00:08:22.160 --> 00:08:28.940
Or you may have heard sometimes of the fact that computers actually execute machine code, if you will.

120
00:08:29.150 --> 00:08:38.600
So basically, there's a system that is translating this mostly English Java code that humans can read

121
00:08:38.600 --> 00:08:45.920
into bite code, which is like a machine code and zeros and ones effectively that the computer actually

122
00:08:45.920 --> 00:08:47.240
can execute.

123
00:08:47.270 --> 00:08:47.710
OK.

124
00:08:48.830 --> 00:08:56.570
Similarly, regular expressions like this thing, which maybe isn't so human readable, actually get

125
00:08:56.570 --> 00:09:03.200
compiled as well into another form that is more efficient for the computer to be able to do something

126
00:09:03.200 --> 00:09:03.500
with.

127
00:09:03.680 --> 00:09:07.970
And so this method here is actually doing that translation.

128
00:09:08.000 --> 00:09:08.450
OK.

129
00:09:08.690 --> 00:09:15.140
And keep this in mind, because that means that compiling a regular expression and using it is considered

130
00:09:15.140 --> 00:09:19.340
to be somewhat of an expensive operation in computer terms.

131
00:09:19.610 --> 00:09:26.180
Now, it only takes probably milliseconds to do, but it's not something you'd want to do overly frequently

132
00:09:26.180 --> 00:09:27.320
if you could avoid it.

133
00:09:27.350 --> 00:09:33.080
So, for example, if we had a loop of code that was running over and over and over again and we were

134
00:09:33.080 --> 00:09:38.900
going to, I don't know, test for phone numbers, lots of phone numbers or something, we wouldn't

135
00:09:38.900 --> 00:09:45.080
want to be calling pattern decompile to use the exact same regular expression over and over and over

136
00:09:45.080 --> 00:09:45.260
again.

137
00:09:45.270 --> 00:09:47.300
That would be a very expensive thing to do.

138
00:09:47.480 --> 00:09:51.680
And it would cause our program to run considerably slower than it needed to.

139
00:09:51.980 --> 00:09:57.050
So just keep that in mind, compilation and compiling of things is kind of an expensive operation.

140
00:09:57.470 --> 00:09:57.920
All right.

141
00:09:58.010 --> 00:09:59.570
So we've got our pattern.

142
00:09:59.850 --> 00:10:05.820
Now, so basically, we've just told the computer translate this into a more efficient form that you

143
00:10:05.820 --> 00:10:08.430
can actually use the you the computer.

144
00:10:08.820 --> 00:10:09.150
All right.

145
00:10:09.180 --> 00:10:16.500
And then the other thing we need is a matter, and the matter is the actual engine that does the matching

146
00:10:16.500 --> 00:10:17.370
essentially right.

147
00:10:17.580 --> 00:10:22.260
And so we will refer to the match your class in 8K HDR.

148
00:10:22.440 --> 00:10:27.310
And again, the HD gives us some suggestions of what we may be talking about here.

149
00:10:27.510 --> 00:10:31.710
And indeed, the first one that I have on my list now, your list may be different, by the way, so

150
00:10:31.710 --> 00:10:36.250
be careful to to look out for the matter that falls under the package of Java date you.

151
00:10:36.450 --> 00:10:43.890
That Rig X regex is your is the key thing you want to look out for, and once you see that you can select

152
00:10:43.890 --> 00:10:44.100
it.

153
00:10:45.270 --> 00:10:49.200
All right, and now you'll want to name a variable for this as well.

154
00:10:49.200 --> 00:10:54.170
And commonly and a lot of tutorials and things you'll see, people often just refer to it as Mat.

155
00:10:54.690 --> 00:10:59.790
And again, if you were going to have multiples of these in one class, which I wouldn't normally recommend,

156
00:10:59.790 --> 00:11:04.200
but if you were, then you'd want to name these something a little more meaningful and specific to whatever

157
00:11:04.200 --> 00:11:06.740
kinds of patterns they are meant to be matching.

158
00:11:06.750 --> 00:11:12.270
OK, now to create the match, or we don't do match or decompile or something like that.

159
00:11:12.270 --> 00:11:17.100
Instead, we create a matter from the pattern that we just created.

160
00:11:17.100 --> 00:11:20.010
So a pattern gives birth to a match or, if you will?

161
00:11:20.190 --> 00:11:20.550
OK.

162
00:11:20.730 --> 00:11:25.710
And so the way we do that is to refer to our variable patty dot.

163
00:11:25.950 --> 00:11:29.550
And then it has a method on it called matcher.

164
00:11:30.210 --> 00:11:31.290
This guy here.

165
00:11:32.480 --> 00:11:42.200
And the input that it takes now is the text string that we want to inspect or check and see, does it

166
00:11:42.200 --> 00:11:43.460
match a pattern, right?

167
00:11:43.760 --> 00:11:48.950
So in that case, that text would be this text right here.

168
00:11:49.190 --> 00:11:55.640
And so just as we did before, we can go ahead and extract out this string.

169
00:11:55.790 --> 00:12:01.220
So you just saw me kind of select most of it just now, but I'm going to select the quotation marks

170
00:12:01.220 --> 00:12:06.890
as well, and I'm going to do that the same way I did before with option up arrow or controlled W..

171
00:12:07.460 --> 00:12:11.810
And then again, I'm going to do option command v or control alt v.

172
00:12:12.200 --> 00:12:17.150
Now here the idea is suggesting just s as the name, and I don't like that name.

173
00:12:17.150 --> 00:12:19.610
It's just not descriptive enough at all.

174
00:12:19.850 --> 00:12:27.080
And so I'm going to just call this phone number one word no space with a capital in and a lowercase

175
00:12:27.080 --> 00:12:27.980
p, right?

176
00:12:28.250 --> 00:12:35.480
And then I'm going to hit return, and now I can come down here, put my cursor here and refer to phone

177
00:12:35.480 --> 00:12:35.720
number.

178
00:12:35.720 --> 00:12:40.970
And look, I just only typed and it's suggesting the idea suggesting phone number.

179
00:12:40.970 --> 00:12:42.040
Is that the variable you want?

180
00:12:42.050 --> 00:12:42.710
Yes, it is.

181
00:12:42.920 --> 00:12:49.850
And so I will hit return to get that, and then I will close out this statement with the semicolon.

182
00:12:50.090 --> 00:12:56.420
OK, so now we've just created a matcher that can match that can basically asked the regular expression

183
00:12:56.420 --> 00:13:01.100
engine, Does this phone number match this pattern?

184
00:13:01.310 --> 00:13:01.760
OK.

185
00:13:01.940 --> 00:13:09.320
So this is kind of a more formal way of doing what we were doing earlier by calling phone number matches

186
00:13:09.320 --> 00:13:09.680
right.

187
00:13:09.860 --> 00:13:15.050
This is doing a lot of basically the same thing, except now we need a little more power than what we

188
00:13:15.050 --> 00:13:18.620
can get out of doing this kind of like one-liner thing.

189
00:13:18.620 --> 00:13:20.450
We need a few more lines of code now.

190
00:13:20.660 --> 00:13:26.060
And that's why we're we're breaking out this the the big guns, as some as some might say.

191
00:13:26.090 --> 00:13:26.510
All right.

192
00:13:26.750 --> 00:13:30.410
So now we've got a pattern and we've got to match her now.

193
00:13:30.680 --> 00:13:33.740
Make a new line here, and maybe I'll make another line here as well.

194
00:13:33.740 --> 00:13:37.940
And I'm on also close that one note to give us a little more space here.

195
00:13:38.510 --> 00:13:38.990
All right.

196
00:13:39.140 --> 00:13:41.660
Now we can actually use these things.

197
00:13:42.110 --> 00:13:48.860
OK, so you might first see people test to see if there actually is a match because what we really want

198
00:13:48.860 --> 00:13:53.840
to do is we want to where we're headed with this is we're going to extract out these parts, OK?

199
00:13:54.590 --> 00:13:56.120
You know, the these parts.

200
00:13:56.330 --> 00:14:04.130
But before we can assume that there's anything there to extract, we need to first make sure that this

201
00:14:04.130 --> 00:14:09.030
even matches, which is what we were getting when we were calling this method earlier, right?

202
00:14:09.050 --> 00:14:11.750
We need to just check to see, does this even match?

203
00:14:11.960 --> 00:14:17.150
Because if there's no match there and then we try to extract out the parts, there won't be anything

204
00:14:17.150 --> 00:14:19.520
to extract and then the whole program would blow up.

205
00:14:19.790 --> 00:14:25.010
So the typical way that you'll see people do that in this, we're going to jump ahead a little bit in

206
00:14:25.010 --> 00:14:29.060
our lessons and learn a little bit about conditionals, but not much.

207
00:14:29.270 --> 00:14:36.860
So what you'll normally see people do is use the if statement here to ask the computer, Hey, test

208
00:14:36.860 --> 00:14:39.980
for if something is true or not, OK?

209
00:14:40.130 --> 00:14:43.190
And if it is, then you can proceed and do some things right.

210
00:14:43.460 --> 00:14:47.600
So we're going to use an if statement here and then parentheses.

211
00:14:47.780 --> 00:14:50.270
This space here is optional, but I like it.

212
00:14:50.270 --> 00:14:56.150
So that's why I have that space there and we're going to ask the matter, Matt.

213
00:14:57.370 --> 00:15:01.270
That matches we're going to call the matches method here.

214
00:15:01.420 --> 00:15:08.530
So what we're doing is we're asking the match or Hey, is there a match between this phone number and

215
00:15:08.530 --> 00:15:09.520
this expression?

216
00:15:09.730 --> 00:15:11.620
It's the same thing we were doing here.

217
00:15:11.620 --> 00:15:16.690
In fact, you know, let me let me put a little space in here just to just to kind of call out the,

218
00:15:16.690 --> 00:15:19.300
you know, this is what we were doing before, right?

219
00:15:19.660 --> 00:15:26.080
So this is a slightly more formal way of doing of doing the same thing here, OK?

220
00:15:26.350 --> 00:15:30.880
But this if statement, well, let me let's finish this and then I'll come back and explain this a little

221
00:15:30.880 --> 00:15:31.450
bit more.

222
00:15:31.900 --> 00:15:32.170
All right.

223
00:15:32.170 --> 00:15:38.380
So then I'm going to put a left curly brace here and then hit return.

224
00:15:38.650 --> 00:15:45.100
And the I.D. automatically gives me a closing curly brace and then puts the cursor right in the middle.

225
00:15:45.250 --> 00:15:47.310
Much the same as when we create a class.

226
00:15:47.320 --> 00:15:50.530
OK, so we're about to put a block of code.

227
00:15:51.310 --> 00:15:56.200
And so basically what we're saying here is we're telling the computer, Hey, I want you to inquire

228
00:15:56.200 --> 00:16:03.550
as to whether or not this string matches this regular expression here.

229
00:16:04.210 --> 00:16:14.110
And if it is true that the string matches the expression, execute whatever code I put in between these

230
00:16:14.110 --> 00:16:22.510
curly braces and if there is no match, skip whatever code I put in here and just go on with the rest

231
00:16:22.510 --> 00:16:23.890
of the program, OK?

232
00:16:24.400 --> 00:16:30.010
And that way, we protect ourselves from the possibility that there was no match.

233
00:16:30.160 --> 00:16:35.050
And therefore, when we start trying to extract out these parts, the program doesn't blow up.

234
00:16:35.470 --> 00:16:35.890
OK?

235
00:16:36.040 --> 00:16:38.710
We're also triggering the expression engine.

236
00:16:38.710 --> 00:16:44.380
I'm sorry, the regular expression engine to actually go ahead and do its matching right to actually

237
00:16:44.380 --> 00:16:50.920
execute its its its own program, which is the expression itself by calling the stop matches here.

238
00:16:51.310 --> 00:16:51.730
All right.

239
00:16:52.030 --> 00:16:58.780
So assuming that there was a match, there will now be some things that we can hopefully extract out

240
00:16:58.780 --> 00:16:59.920
of this string.

241
00:17:00.430 --> 00:17:02.020
And so to get to those.

242
00:17:02.170 --> 00:17:07.420
So let's let's assume that there will be matches there and that we want to print out whatever those

243
00:17:07.420 --> 00:17:08.350
matches may be.

244
00:17:08.560 --> 00:17:09.580
OK now.

245
00:17:09.700 --> 00:17:15.640
So the way we want to actually capture this, this data, these these parts right, we're trying to

246
00:17:15.640 --> 00:17:22.450
get the area code, things like the area code, the I call it the exchange and the what is this called

247
00:17:22.450 --> 00:17:24.250
the line number, right?

248
00:17:24.550 --> 00:17:30.730
The way we do this is actually by utilizing these parentheses here.

249
00:17:31.150 --> 00:17:40.180
So when we enclose parts of our regular expression in parentheses, not only are we grouping things

250
00:17:40.180 --> 00:17:46.300
up so that we can then do things like specify how many times we want something to be matched or whatever,

251
00:17:46.300 --> 00:17:53.800
as we did here, but also these parentheses by default form what are called captcha groups.

252
00:17:54.880 --> 00:18:02.560
And what that means is that whatever part of our input string, which is this guy here that matches

253
00:18:02.560 --> 00:18:07.060
with whatever was in these parentheses that will be remembered.

254
00:18:07.330 --> 00:18:09.820
And we can reference those later.

255
00:18:09.940 --> 00:18:10.420
OK.

256
00:18:10.630 --> 00:18:14.710
So in this case, so far, we've got one captured group there.

257
00:18:15.040 --> 00:18:15.420
Let's see.

258
00:18:15.430 --> 00:18:17.620
We've got another capture group here.

259
00:18:17.950 --> 00:18:20.770
OK, so we've got two capture groups at the moment.

260
00:18:20.800 --> 00:18:21.220
OK.

261
00:18:21.700 --> 00:18:28.720
So we can actually ask the matter to give us whatever matched in those two capture groups.

262
00:18:28.930 --> 00:18:30.820
If this doesn't quite make sense.

263
00:18:30.970 --> 00:18:31.690
Stick with me.

264
00:18:31.690 --> 00:18:34.280
Here you'll I think you'll start to see where we're going with this.

265
00:18:34.300 --> 00:18:42.610
So if we want to grab whatever matched inside of these parentheses, what we can do is we can.

266
00:18:42.610 --> 00:18:43.000
We'll do it.

267
00:18:43.150 --> 00:18:51.910
So you t get a print line here and then we can call a special method on the matcher class.

268
00:18:52.060 --> 00:18:56.560
So we'll refer to our match or our M-80 object here.

269
00:18:57.190 --> 00:19:01.720
And there is a method called group that takes a number.

270
00:19:02.080 --> 00:19:06.220
Now this number will be the index of the group.

271
00:19:06.370 --> 00:19:11.760
In this particular case, we have to capture groups designated by these parentheses.

272
00:19:11.770 --> 00:19:16.750
So we've got this first set of parentheses here and whatever is in the middle of it.

273
00:19:17.230 --> 00:19:17.590
OK.

274
00:19:17.800 --> 00:19:21.670
And then we've got another set of parentheses here.

275
00:19:21.970 --> 00:19:22.450
OK.

276
00:19:22.900 --> 00:19:24.580
And whatever is in the middle of that.

277
00:19:24.760 --> 00:19:32.470
So whatever parts of this input string align with these parentheses, that's what will be in the captured

278
00:19:32.470 --> 00:19:32.800
group.

279
00:19:32.980 --> 00:19:38.770
So we have to capture groups so far because we have two sets of opening and closing parentheses.

280
00:19:39.010 --> 00:19:43.250
And therefore, we have two effective groups that we can refer to.

281
00:19:43.270 --> 00:19:47.350
We actually have three, though, and I'll show you what the what the third one, which is really the

282
00:19:47.350 --> 00:19:48.190
first one would be.

283
00:19:48.400 --> 00:19:54.790
So anyway, if we wanted to see what what was matched in this first capture group, that would be capture

284
00:19:54.790 --> 00:19:55.690
group one.

285
00:19:55.780 --> 00:20:00.880
Now I've no, I've said earlier that usually in a lot of these computer things, things will start with

286
00:20:00.880 --> 00:20:05.140
zero and there is a group zero and we'll look at what that is in just a moment.

287
00:20:05.140 --> 00:20:07.780
But this capture group here would be one.

288
00:20:08.020 --> 00:20:13.030
So if I put a one right here, we will see whatever we got out of that.

289
00:20:13.300 --> 00:20:17.620
And then I'm going to duplicate this line to grab the second capture group as well.

290
00:20:17.740 --> 00:20:22.990
And to do that, I'm just going to do a Command D or control D for Windows and Linux, and then I'm

291
00:20:22.990 --> 00:20:26.140
going to change this one to a two just like that.

292
00:20:26.470 --> 00:20:26.860
All right.

293
00:20:27.400 --> 00:20:29.740
And now let's go ahead and run this, in fact.

294
00:20:31.180 --> 00:20:32.770
Yeah, I'll let that stay there, too.

295
00:20:33.010 --> 00:20:33.220
All right.

296
00:20:33.220 --> 00:20:35.980
So let's run this now and see what we get.

297
00:20:36.010 --> 00:20:37.090
Hopefully, it doesn't blow up.

298
00:20:37.780 --> 00:20:38.980
OK, cool.

299
00:20:39.700 --> 00:20:45.190
So we got true null and three, three three, period.

300
00:20:45.550 --> 00:20:48.550
Let's see if that makes any sense to us.

301
00:20:49.390 --> 00:20:49.750
All right.

302
00:20:49.930 --> 00:20:51.560
So let's look back here.

303
00:20:51.580 --> 00:20:57.880
What was this first capture group, even for this first one was to get and I don't know why I was blanking

304
00:20:57.880 --> 00:20:58.860
on what this is called.

305
00:20:58.870 --> 00:21:03.340
I have no idea why I couldn't think of it, but that's the country code, actually, which is why in

306
00:21:03.340 --> 00:21:09.910
North America, it's always one, because that is how you call to North America from the world one.

307
00:21:10.270 --> 00:21:10.660
OK.

308
00:21:10.900 --> 00:21:12.910
So that would be the country code there.

309
00:21:13.330 --> 00:21:17.770
And in our example here, we don't have a country code.

310
00:21:18.010 --> 00:21:20.470
And so we got back a null.

311
00:21:20.650 --> 00:21:22.990
So that actually seems appropriate.

312
00:21:23.530 --> 00:21:29.740
OK, then the next CAPTCHA group we have refers to.

313
00:21:29.890 --> 00:21:32.230
Now here's the thing we.

314
00:21:33.380 --> 00:21:39.170
Well, it refers to the three digits, but if you look at our example here, well, we have two sets

315
00:21:39.170 --> 00:21:40.970
of three digit numbers, right?

316
00:21:41.270 --> 00:21:42.650
So which one?

317
00:21:43.040 --> 00:21:48.230
Now what we got back appears to be the second set of three digit numbers.

318
00:21:48.320 --> 00:21:50.390
What happened to the first set, though?

319
00:21:50.420 --> 00:21:51.680
How come we didn't get that?

320
00:21:52.010 --> 00:22:02.450
So what happened is that we decided earlier in the previous lessons to not have to duplicate this pattern

321
00:22:02.450 --> 00:22:03.350
twice.

322
00:22:03.800 --> 00:22:04.250
Right?

323
00:22:04.280 --> 00:22:12.590
And that's why we have this quantifier here where we were saying we could specify the this pattern of

324
00:22:12.590 --> 00:22:16.580
three digits between one and two times, right?

325
00:22:16.790 --> 00:22:20.510
And in this example, here we actually have it two times.

326
00:22:21.350 --> 00:22:28.700
However, when you use quantifiably, along with captcha groups and again, a CAPTCHA group is really

327
00:22:28.700 --> 00:22:30.890
just the use of these parentheses here.

328
00:22:30.950 --> 00:22:37.670
You only have access to the last thing that matched and that would be three three three.

329
00:22:37.680 --> 00:22:40.280
So it's actually throwing away the two three two.

330
00:22:40.700 --> 00:22:46.130
Now, if we want to get around that, we actually have to stop using the quantifier went.

331
00:22:46.130 --> 00:22:48.680
Where kind of sucks a little bit.

332
00:22:48.680 --> 00:22:55.160
So our regular expression is going to get a little longer again so that we can actually get to all of

333
00:22:55.160 --> 00:22:56.570
the parts, right?

334
00:22:56.810 --> 00:22:58.820
So I'm going to copy all of this.

335
00:22:59.030 --> 00:23:02.690
Be careful if you're following along not to grab the wrong bits.

336
00:23:02.900 --> 00:23:05.810
So really, in fact?

337
00:23:06.560 --> 00:23:12.500
Well, I'm just going to grab everything, including the parentheses themselves.

338
00:23:12.920 --> 00:23:20.180
All right, then I will go to the end of that parentheses and I will paste again.

339
00:23:20.330 --> 00:23:23.510
So now we have three captcha groups.

340
00:23:24.550 --> 00:23:24.910
Right.

341
00:23:25.850 --> 00:23:29.000
We've got our just highlight the parentheses here one.

342
00:23:29.150 --> 00:23:31.710
And you can see this other parentheses highlighted as well.

343
00:23:31.730 --> 00:23:33.500
One two.

344
00:23:34.900 --> 00:23:36.770
And three right there.

345
00:23:36.850 --> 00:23:37.330
OK.

346
00:23:38.960 --> 00:23:43.910
So now let's run this again and see what we what we get.

347
00:23:45.390 --> 00:23:45.840
You know what?

348
00:23:45.870 --> 00:23:49.140
While we're at it, let's go ahead and add in that country code as well.

349
00:23:49.710 --> 00:23:52.260
So we'll do a we'll do a one there.

350
00:23:53.870 --> 00:23:55.730
OK, and then we'll run this.

351
00:23:57.310 --> 00:23:57.820
All right.

352
00:23:58.030 --> 00:24:04.180
So now we get a one period and a two, three, two period, so that's looking a little better, right?

353
00:24:04.210 --> 00:24:05.790
One period to three, two period.

354
00:24:05.800 --> 00:24:09.520
Now I'm not a big fan of having these periods here, and we're going to we're going to take care of

355
00:24:09.520 --> 00:24:14.170
those a little bit later, but looks like we're kind of on the right path, right?

356
00:24:14.490 --> 00:24:16.870
And now we do have this third capture group now.

357
00:24:16.990 --> 00:24:21.370
So let's duplicate this last line and grab that third capture group again.

358
00:24:21.370 --> 00:24:27.520
So I'm going to do a command on on what my line 17 just duplicate that line.

359
00:24:27.790 --> 00:24:31.960
I just put the cursor anywhere on this line, by the way, I'm going to, in fact, let me just do that

360
00:24:31.960 --> 00:24:32.620
again for you.

361
00:24:32.920 --> 00:24:34.930
So my cursor could be anywhere on line.

362
00:24:34.930 --> 00:24:36.910
17 doesn't matter where.

363
00:24:37.030 --> 00:24:40.780
And I can just do a command or control D to duplicate that line.

364
00:24:40.930 --> 00:24:45.550
Then I'll put my cursor right here and change that to two or three, and then we'll run this again.

365
00:24:48.500 --> 00:24:50.640
OK, well, look what we have now.

366
00:24:50.660 --> 00:24:55.580
One, nine, two, three, two and then three, three three.

367
00:24:55.700 --> 00:25:00.770
So it looks like we're pretty much getting everything except that we're just getting these extra bits.

368
00:25:00.950 --> 00:25:05.330
And the reason we're getting these extra bits is because they are inside of the capture group, right?

369
00:25:05.900 --> 00:25:08.180
So yeah, that's that's why we're getting those.

370
00:25:10.050 --> 00:25:16.380
So I'll tell you what, let's go ahead and wrap up here and just give you a quick break and we'll jump

371
00:25:16.380 --> 00:25:22.440
back in and figure out how to clean up these periods and see what else we can do with these captured

372
00:25:22.440 --> 00:25:25.200
groups because there's a few other really cool things we can get into.

373
00:25:25.290 --> 00:25:26.520
So I'll see you in the next one.
