1
00:00:00,300 --> 00:00:01,380
All right, welcome back.

2
00:00:01,620 --> 00:00:06,960
In this lesson, I'm pretty excited because I think we're going to do something that represents an even

3
00:00:06,960 --> 00:00:08,910
more real world scenario.

4
00:00:09,360 --> 00:00:17,070
We're still working with lambdas and streams API, but will be actually working with an externalized

5
00:00:17,070 --> 00:00:19,980
data file along the lines of what we did.

6
00:00:20,370 --> 00:00:25,080
And I think the last lesson or the lesson before that I can't remember now where I showed you how to

7
00:00:25,080 --> 00:00:26,580
load data from a file.

8
00:00:27,420 --> 00:00:36,030
However, this file is going to be awesome because it has five million records in it, so this will

9
00:00:36,030 --> 00:00:40,860
let us play around with some slightly more realistic scenarios, right?

10
00:00:41,520 --> 00:00:47,880
And we'll be doing this by learning some even more advanced streams, API methods that are quite powerful.

11
00:00:48,090 --> 00:00:49,560
So let's jump to it.

12
00:00:49,860 --> 00:00:50,230
All right.

13
00:00:50,250 --> 00:00:55,920
So what we're going to be doing here is first, we're going to go ahead and just create another class.

14
00:00:55,920 --> 00:00:59,760
We'll still play in the same project, but let's create a new a new class.

15
00:01:00,090 --> 00:01:07,140
So for myself, I'm going to open up my little file explorer thing here, and I guess I will just create

16
00:01:07,140 --> 00:01:07,590
a new class.

17
00:01:07,860 --> 00:01:11,610
Let me let me point out real quick, by the way, in a real professional setting.

18
00:01:11,820 --> 00:01:20,220
I might already have started organizing my files and my classes into more packages.

19
00:01:20,910 --> 00:01:26,460
I'm not very inclined to do that here because so much of this is still just kind of, you know, playing

20
00:01:26,460 --> 00:01:27,030
around.

21
00:01:27,420 --> 00:01:33,330
But at least I want to point out when I'm doing things that are standard for professional programming

22
00:01:33,330 --> 00:01:36,250
versus when I'm doing things that are just for us to learn.

23
00:01:36,270 --> 00:01:40,800
OK, so right now, for the most part, this structure is just for us to learn.

24
00:01:41,040 --> 00:01:41,430
All right.

25
00:01:41,820 --> 00:01:47,010
OK, so I'm going to create another Java class.

26
00:01:48,330 --> 00:01:54,720
And I'm going to call this big data because we're about to work with five million records.

27
00:01:55,260 --> 00:01:55,690
All right.

28
00:01:55,710 --> 00:01:57,270
And return.

29
00:01:57,570 --> 00:01:59,940
OK, and now let's see here.

30
00:02:02,050 --> 00:02:04,150
Now I'm going to close that.

31
00:02:04,390 --> 00:02:11,740
And so let's go ahead and just have our standard public static void main stream hit enter.

32
00:02:11,770 --> 00:02:12,400
There we go.

33
00:02:12,430 --> 00:02:12,850
OK.

34
00:02:13,510 --> 00:02:15,180
And let's see.

35
00:02:15,190 --> 00:02:24,070
So the first thing I think we're going to want to do is just to load up a large file and maybe print

36
00:02:24,070 --> 00:02:26,330
a few records out of it.

37
00:02:26,350 --> 00:02:29,740
OK, just to make sure that we're loading it, finding it and all of that, OK.

38
00:02:30,160 --> 00:02:38,950
So to do that, we will use the files class just like so and I'm just typing files with no space, and

39
00:02:38,950 --> 00:02:44,590
then I'm going to hit return so that I can have the ID import that for me automatically, which you

40
00:02:44,600 --> 00:02:46,150
just did there on Line three.

41
00:02:46,510 --> 00:02:46,930
All right.

42
00:02:47,230 --> 00:02:51,430
And then dot lines, which we've already learned all of this before.

43
00:02:51,430 --> 00:02:55,890
And then I'm going to again use the path class and same thing here.

44
00:02:55,900 --> 00:02:56,620
No space.

45
00:02:56,770 --> 00:03:03,850
I'm going to hit return so that that can get imported as well of and now quotes.

46
00:03:03,850 --> 00:03:09,520
And now I need to paste in a path to a file on my file system of my computer.

47
00:03:09,970 --> 00:03:17,320
Now for this lesson, if you go to the files of this lesson, you will find a zip file there and it

48
00:03:17,320 --> 00:03:23,500
will be called eight r five m dot zip, apparently.

49
00:03:23,590 --> 00:03:24,010
OK.

50
00:03:24,700 --> 00:03:29,540
So what you're going to want to do is to first download that file the zip file.

51
00:03:29,560 --> 00:03:30,040
OK.

52
00:03:30,220 --> 00:03:35,200
It's a pretty big file, so depending on your internet connection, it may take a minute or whatever.

53
00:03:35,620 --> 00:03:38,440
And after you've downloaded it, you'll need to unzip it.

54
00:03:38,470 --> 00:03:40,480
Now, if you don't know how to unzip.

55
00:03:40,610 --> 00:03:47,530
Well, I think on every modern operating system, if you simply double click the file, it should unzip

56
00:03:47,530 --> 00:03:48,940
for you automatically.

57
00:03:49,660 --> 00:03:51,400
So I will do that now.

58
00:03:57,830 --> 00:04:04,250
Incidentally, if your operating system doesn't automatically unzip the file upon double clicking,

59
00:04:04,250 --> 00:04:11,540
you might try right clicking on it and then you may have an option to unzip it or extracted or decompress

60
00:04:11,540 --> 00:04:14,000
it or whatever fancy word they're going to use.

61
00:04:14,270 --> 00:04:14,710
OK.

62
00:04:15,410 --> 00:04:20,870
But but generally, I think you should be able to probably just double click it to to extract it.

63
00:04:21,140 --> 00:04:28,730
And when it unzips properly, you'll end up with the same file name, but with an extension of CSP so

64
00:04:29,120 --> 00:04:34,520
that CSP, I think I might have mentioned this once before, but that CSP stands for comma separated

65
00:04:34,520 --> 00:04:35,210
values.

66
00:04:35,540 --> 00:04:41,300
This is this is actually one of these standard formats that spreadsheet programs like Excel are able

67
00:04:41,300 --> 00:04:48,800
to export to very commonly used in business, especially among people who are not programmers but love

68
00:04:48,800 --> 00:04:53,150
to use excel to do programmer type things to play with data.

69
00:04:53,510 --> 00:05:00,140
But usually what ends up happening is they need to give that data over to developers to do more meaningful

70
00:05:00,140 --> 00:05:02,000
programming things around it.

71
00:05:02,300 --> 00:05:08,360
And so typically they will export that data in the CSV format and all it is.

72
00:05:08,360 --> 00:05:11,600
Is this a simple text file that is comma separated?

73
00:05:11,610 --> 00:05:15,320
So basically what we've already been seeing up until now?

74
00:05:15,890 --> 00:05:16,080
All right.

75
00:05:16,130 --> 00:05:22,790
Except this one has five million records that it, by the way, I would warn against just double clicking

76
00:05:22,790 --> 00:05:27,050
on this file and just opening it with any standard text editor.

77
00:05:27,050 --> 00:05:28,010
You can do it.

78
00:05:28,460 --> 00:05:34,190
Probably you'll be OK, but with five million records, it may take a little while to open up whether

79
00:05:34,190 --> 00:05:36,680
that's with with excel or whatever.

80
00:05:36,770 --> 00:05:38,120
It can be done, though, but.

81
00:05:39,200 --> 00:05:40,160
You know, I don't know.

82
00:05:40,210 --> 00:05:43,070
You might want to think twice, especially if you're on a slower computer.

83
00:05:43,430 --> 00:05:43,820
All right.

84
00:05:43,830 --> 00:05:51,350
So now on my Mac, what I'm going to do is I'm going to highlight this file and then I'm going to come

85
00:05:51,350 --> 00:05:55,760
down here to the bottom where I see its name listed here now.

86
00:05:55,790 --> 00:06:00,710
If you're on a Mac and you don't see this, you will need to turn on that setting.

87
00:06:00,710 --> 00:06:04,250
And honestly, I always end up having a fumble around to remember how to do this.

88
00:06:05,090 --> 00:06:06,680
Let's see if you.

89
00:06:11,740 --> 00:06:12,070
Yeah.

90
00:06:12,100 --> 00:06:16,210
View the View menu and then something like Show Pass Bar.

91
00:06:16,450 --> 00:06:18,940
I think that's where it is on the Mac.

92
00:06:19,630 --> 00:06:26,020
I'm sorry, Windows users, you'll have to google it if you don't know how to get the path to that file.

93
00:06:26,140 --> 00:06:30,040
You may be able to just right click on it that I feel like.

94
00:06:30,040 --> 00:06:35,710
I'm vaguely remembering that you may be able to right click on the file in windows and then there may

95
00:06:35,710 --> 00:06:40,660
be an option there to grab the path of it or copy the path or something like that.

96
00:06:40,690 --> 00:06:41,080
OK.

97
00:06:41,770 --> 00:06:42,220
All right.

98
00:06:42,850 --> 00:06:44,560
So did I get that yet?

99
00:06:44,590 --> 00:06:45,270
Hold on a minute.

100
00:06:45,280 --> 00:06:47,230
Let me make sure I actually got that myself.

101
00:06:47,230 --> 00:06:53,080
So I'm going to right click on this and choose Copy as path name on a Mac.

102
00:06:54,590 --> 00:06:55,050
All right.

103
00:06:55,070 --> 00:07:01,130
And now I can jump back over to the ad and my cursor is already in between the quotes and I'm going

104
00:07:01,130 --> 00:07:03,740
to paste the pass right there.

105
00:07:05,670 --> 00:07:11,400
And then I'm going to hit enter now, if you recall, as before, we've got this red squiggly line,

106
00:07:11,400 --> 00:07:12,510
and that's because.

107
00:07:14,310 --> 00:07:20,520
There's always the potential for problems when you're executing commands in Java that want to work with

108
00:07:20,520 --> 00:07:22,890
files, among other things.

109
00:07:23,160 --> 00:07:28,590
You could, for example, refer to a file that does not exist or have a typo or whatever.

110
00:07:28,590 --> 00:07:31,500
And what'll happen is the code.

111
00:07:31,800 --> 00:07:36,960
The program will throw what's called an exception, which is again, kind of like an error, basically

112
00:07:36,960 --> 00:07:38,020
a type of error.

113
00:07:38,910 --> 00:07:41,790
And your program will just blow up or stop working.

114
00:07:42,000 --> 00:07:49,860
So typically, you need to tell Java what to do when certain types of exceptions or errors occur and

115
00:07:50,400 --> 00:07:57,030
different different methods are capable of generating different kinds of exceptions when things don't

116
00:07:57,030 --> 00:07:58,410
work out correctly.

117
00:07:58,770 --> 00:08:06,750
So the ID is actually asking me, Hey, this line's method here throws exceptions that need to be handled.

118
00:08:07,020 --> 00:08:08,400
What do you want me to do about it?

119
00:08:08,670 --> 00:08:15,630
So again, I'm just going to kind of hover over this and then jump over here to more and then choose

120
00:08:16,200 --> 00:08:18,390
to surround with try catch.

121
00:08:19,360 --> 00:08:19,780
All right.

122
00:08:19,810 --> 00:08:24,790
And so now that just encapsulated this one line inside of a try catch block.

123
00:08:25,000 --> 00:08:31,420
And again, you can think of this try catch block as kind of like saying if there is this type of exception,

124
00:08:31,420 --> 00:08:34,390
which, by the way, is a class, we'll learn all about these shortly.

125
00:08:34,810 --> 00:08:40,420
If there is this type of exception, then do whatever I have in this code block down here.

126
00:08:40,510 --> 00:08:40,930
OK.

127
00:08:42,370 --> 00:08:46,300
All right, so now that we've got that, I can make a new line down here.

128
00:08:46,510 --> 00:08:52,210
And this line's method produces or returns a stream.

129
00:08:52,390 --> 00:08:54,400
And so now we can just work with that stream.

130
00:08:55,510 --> 00:09:02,620
So first thing I think we want to do is let's just print out maybe the first two lines.

131
00:09:03,130 --> 00:09:07,990
We probably don't want to print out the entire thing because again, it's five million records.

132
00:09:08,290 --> 00:09:08,650
Right?

133
00:09:09,280 --> 00:09:16,210
But let's just get a get our eyeballs on the general format of what's in this, what's in this file?

134
00:09:16,250 --> 00:09:16,600
OK.

135
00:09:17,230 --> 00:09:26,830
So if we wanted to print a line, we could do a dot for each right and then a system dot out.

136
00:09:27,860 --> 00:09:28,800
Print line, right?

137
00:09:28,820 --> 00:09:33,440
We could do that, however, now if I run this, that's going to attempt to print out all five million

138
00:09:33,440 --> 00:09:34,460
lines, I don't want that.

139
00:09:34,520 --> 00:09:36,080
I only want two lines.

140
00:09:36,230 --> 00:09:40,220
Now, do you remember how to do that with the Stream's API?

141
00:09:40,280 --> 00:09:41,600
Why don't you pause for a second?

142
00:09:41,600 --> 00:09:43,790
And if you remember, go ahead and type it in?

143
00:09:44,750 --> 00:09:48,470
All right, so here is how we can do that.

144
00:09:49,070 --> 00:09:51,080
I will put a new line up above here.

145
00:09:51,260 --> 00:09:51,890
I got my.

146
00:09:52,960 --> 00:09:55,340
Got my tabs off a little bit.

147
00:09:55,360 --> 00:09:55,780
OK.

148
00:09:56,110 --> 00:09:58,600
And we've got the limit.

149
00:09:59,940 --> 00:10:00,870
Method here.

150
00:10:00,930 --> 00:10:01,270
Right.

151
00:10:01,290 --> 00:10:08,910
So we can limit the number of items in the stream, and if you'll recall, this line's method returns

152
00:10:10,230 --> 00:10:18,150
a stream of strings and each string is one line in the text file in this case, right?

153
00:10:18,450 --> 00:10:23,820
So we can limit the number of strings that we actually process.

154
00:10:24,000 --> 00:10:29,310
And so if I simply put the number two in here that will limit the processing of this to two.

155
00:10:29,520 --> 00:10:30,930
Now let me also state this.

156
00:10:32,040 --> 00:10:41,460
One of the really cool things about this file that lines capability is that it is highly efficient in

157
00:10:41,670 --> 00:10:47,760
some in certain types of file input output programming or file O programming.

158
00:10:48,150 --> 00:10:54,120
One common pattern that wouldn't work very effectively here would be to open up the file.

159
00:10:54,450 --> 00:11:02,100
Read the entire contents of the file into a variable or a buffer or an array or something like that,

160
00:11:02,850 --> 00:11:04,200
and then close the file.

161
00:11:04,380 --> 00:11:09,930
The problem with that approach here is that because this file has five million records, that would

162
00:11:09,930 --> 00:11:15,570
mean that we'd have to load up all five million of those records, which is a lot of data into the memory

163
00:11:15,570 --> 00:11:18,810
of the computer while the program is running.

164
00:11:18,810 --> 00:11:24,510
And that would be very wasteful of memory if we don't absolutely need all of that data in memory all

165
00:11:24,510 --> 00:11:25,050
at once.

166
00:11:25,050 --> 00:11:28,710
And in this particular case, for right now, we absolutely don't need that.

167
00:11:28,980 --> 00:11:35,940
So one of the cool things is that this files that lines capability to return back a string is actually

168
00:11:35,940 --> 00:11:41,130
very streamlined in that it doesn't need to load the entire file into memory.

169
00:11:41,310 --> 00:11:47,880
Instead, it's literally reading one line at a time and streaming those lines through for us to process.

170
00:11:48,090 --> 00:11:52,170
And so they come in, get processed and then they go right back out of the memory again.

171
00:11:52,320 --> 00:12:00,270
And that allows us to very efficiently work with incredibly large files if we need to without impacting

172
00:12:00,270 --> 00:12:03,360
the memory of the computer significantly at all.

173
00:12:04,440 --> 00:12:11,850
So, yeah, so whether we're reading two lines or five million lines, it wouldn't need to affect the

174
00:12:11,850 --> 00:12:12,540
memory much.

175
00:12:12,570 --> 00:12:16,380
However, if we read five million lines, it would affect the time right.

176
00:12:16,740 --> 00:12:18,750
We don't want to sit there and wait for that to happen.

177
00:12:19,020 --> 00:12:19,280
All right.

178
00:12:19,290 --> 00:12:22,140
So let's go ahead and run this and see what we end up with.

179
00:12:22,830 --> 00:12:23,100
All right.

180
00:12:23,130 --> 00:12:30,510
Now, notice on my Mac before this program is even allowed to actually run fully, I'm getting presented

181
00:12:30,510 --> 00:12:38,070
with a little question asking me if I'm OK allowing Intel AJ on behalf of my program really to access

182
00:12:38,100 --> 00:12:42,810
a to access the documents folder of my computer.

183
00:12:43,410 --> 00:12:50,070
So whether you're on Mac or Windows, you may be asked a similar type of question and in general, you

184
00:12:50,070 --> 00:12:51,300
will want to allow that.

185
00:12:51,420 --> 00:12:54,780
If you don't allow it, the program won't be able to access that file.

186
00:12:55,230 --> 00:12:56,670
So I'm going to click OK.

187
00:12:57,660 --> 00:12:59,940
And there we go, the program is done.

188
00:13:00,240 --> 00:13:03,000
And so now we're seeing a couple of lines here.

189
00:13:03,180 --> 00:13:09,570
Now the next thing that I'm inclined to do is to actually copy these two lines.

190
00:13:10,590 --> 00:13:18,600
I'm going to select them and then I can right click and do a copy and I'm going to open up, excel on

191
00:13:18,600 --> 00:13:19,170
my computer.

192
00:13:19,170 --> 00:13:20,880
Now, if you don't have excel, that's OK.

193
00:13:20,940 --> 00:13:24,180
You don't need to do this, but I'll show you why I'm going to do it.

194
00:13:24,190 --> 00:13:29,070
All right, and I will bring that over here so that you can see what I'm doing.

195
00:13:30,740 --> 00:13:33,290
And I'm going to paste.

196
00:13:34,310 --> 00:13:39,830
What I just copied in this is a spreadsheet program, by the way, if you haven't used Excel, you should

197
00:13:39,830 --> 00:13:44,750
get a little familiar with Excel if you plan to become a professional Java developer because like I

198
00:13:44,750 --> 00:13:51,350
said, quite often, business people like to pass data to programmers to import into databases or to

199
00:13:51,350 --> 00:13:53,220
do programmer things with it.

200
00:13:53,510 --> 00:13:58,820
And a lot of the times you'll want to open it up in Excel to analyze the data so that you can know what

201
00:13:58,820 --> 00:14:01,760
you're doing with it, which is why we're doing this here.

202
00:14:01,790 --> 00:14:02,150
All right.

203
00:14:02,150 --> 00:14:12,140
So so all of that data got pasted in, and it looks like each field of my data is already aligned to

204
00:14:12,380 --> 00:14:15,410
the columns of this spreadsheet, which is cool.

205
00:14:15,740 --> 00:14:19,280
So let me zoom in on this a bit.

206
00:14:21,580 --> 00:14:21,910
Yeah.

207
00:14:22,150 --> 00:14:29,290
So what I'm seeing here is that this first this first row is what we would call a hetero.

208
00:14:29,950 --> 00:14:34,750
It's not meant to be actual data, it's just the names of the fields, right?

209
00:14:34,750 --> 00:14:37,600
So here's the first name filled in here someone's first name.

210
00:14:37,810 --> 00:14:43,150
Here's a middle initial field and there's there a middle there, middle, initial last name, gender,

211
00:14:43,150 --> 00:14:43,980
et cetera, et cetera.

212
00:14:43,990 --> 00:14:44,350
OK?

213
00:14:44,680 --> 00:14:46,720
So that's the nature of the first row.

214
00:14:46,930 --> 00:14:49,900
And then the second row is actual data.

215
00:14:50,020 --> 00:14:56,620
OK, so this just allows me to kind of get a quick idea of the nature of the data and what's in it,

216
00:14:56,620 --> 00:14:56,920
right?

217
00:14:57,310 --> 00:14:57,690
All right.

218
00:14:57,700 --> 00:15:05,080
So now that we've done that, let's do our first useful streams thing now with this data.

219
00:15:05,320 --> 00:15:11,110
And the first thing we're going to do is just count how many records are in this file.

220
00:15:11,440 --> 00:15:14,320
So let's jump back over to.

221
00:15:15,910 --> 00:15:16,740
Until day.

222
00:15:18,660 --> 00:15:23,100
Now, while we're doing this, I'm going to introduce you to another way of doing it, though.

223
00:15:23,550 --> 00:15:30,250
Now there are actually two or three different ways to count the number of records in this file.

224
00:15:30,270 --> 00:15:30,720
OK.

225
00:15:31,770 --> 00:15:33,360
And I'm going to show you each of them.

226
00:15:33,370 --> 00:15:40,170
So first, let's just review one of the ways can you think of a way to count the number of records that

227
00:15:40,170 --> 00:15:41,130
are in this file?

228
00:15:41,700 --> 00:15:43,260
Go ahead and take a moment to think about it.

229
00:15:44,610 --> 00:15:44,890
OK.

230
00:15:44,910 --> 00:15:45,480
Did you get it?

231
00:15:46,020 --> 00:15:52,230
All right, so here's here's one way that you can do it that you already have learned.

232
00:15:52,440 --> 00:15:57,120
I'm going to get rid of the four each and what you can do.

233
00:15:58,530 --> 00:16:06,330
Is simply use the count, the count method here right now, if we if I run this right now, though,

234
00:16:06,330 --> 00:16:07,440
do you know what you're going to get?

235
00:16:07,860 --> 00:16:13,710
You're going to get to right because we're limiting the number of records that can even be processed

236
00:16:13,830 --> 00:16:14,690
to two.

237
00:16:14,730 --> 00:16:15,090
Right.

238
00:16:15,420 --> 00:16:17,910
So we don't want any limits right now.

239
00:16:17,940 --> 00:16:20,460
We want to actually get rid of that.

240
00:16:21,000 --> 00:16:27,030
Now another thing to consider, though, is now that now that we've looked at the nature of this data,

241
00:16:27,030 --> 00:16:33,090
we know that the very first record is actually a header row and.

242
00:16:35,030 --> 00:16:38,100
We probably don't, and maybe we don't really want to count that.

243
00:16:38,120 --> 00:16:41,240
Maybe it doesn't really matter, but you may not want to count that.

244
00:16:41,390 --> 00:16:46,760
So if you wanted to skip that first row, I did show you that once.

245
00:16:47,600 --> 00:16:47,960
All right.

246
00:16:47,960 --> 00:16:52,630
So if you wanted to skip that first row, it's actually very straightforward.

247
00:16:52,640 --> 00:16:59,660
You'll actually use the skip method and you can just give it a number telling it how many rows to skip.

248
00:16:59,880 --> 00:17:04,730
And so let's say here, we only want to skip the first row because we know that that first row is the

249
00:17:04,730 --> 00:17:05,300
header row.

250
00:17:05,300 --> 00:17:07,040
It's not the real data, right?

251
00:17:07,580 --> 00:17:07,880
All right.

252
00:17:07,890 --> 00:17:15,410
So if we just do this and we know that this count method here returns a long, right, so we probably

253
00:17:15,410 --> 00:17:16,550
want to capture that.

254
00:17:16,730 --> 00:17:23,620
So I put my cursor here after the semicolon and do an option Command V. And that's fine for now.

255
00:17:23,630 --> 00:17:24,590
Just call it count.

256
00:17:25,070 --> 00:17:31,310
And then let's just do a system that out and then we'll just print out that count.

257
00:17:31,340 --> 00:17:33,320
OK, so let's run this and see what we get.

258
00:17:34,790 --> 00:17:35,690
Well, there we go.

259
00:17:36,170 --> 00:17:37,670
Five million records.

260
00:17:38,090 --> 00:17:38,450
Right.

261
00:17:38,900 --> 00:17:40,410
So I wasn't lying.

262
00:17:40,430 --> 00:17:42,200
It really is five million records long.

263
00:17:42,230 --> 00:17:49,670
OK, so that's a little bit of review on how we can count the number of records.

264
00:17:49,820 --> 00:17:54,320
But now I want to show you what we're really getting ready to learn going forward.

265
00:17:54,590 --> 00:18:00,740
And that is there's another way to do pretty much everything that we've learned in the streaming API

266
00:18:00,740 --> 00:18:04,460
and this other approach is actually incredibly powerful, OK?

267
00:18:04,880 --> 00:18:10,520
And what it involves is us actually making a call to the dot collect.

268
00:18:10,880 --> 00:18:19,070
Now we learned a little bit about this method before, when we wanted to convert the items in a stream

269
00:18:19,400 --> 00:18:21,410
into some type of collection.

270
00:18:21,650 --> 00:18:31,640
So, for example, if I wanted to collect all of the lines of this file into a list, I could use the

271
00:18:31,640 --> 00:18:37,610
Dot collect and then reference the two list method just like that.

272
00:18:37,910 --> 00:18:45,830
Now, this two list method is actually a method that lives on the collectors class, and so we're seeing

273
00:18:45,830 --> 00:18:46,930
appended like that.

274
00:18:47,540 --> 00:18:50,500
It is a static method, though, so I could remove that.

275
00:18:50,540 --> 00:18:52,520
I could get rid of the collectors here.

276
00:18:52,730 --> 00:18:58,490
In fact, I'll go ahead and do that, and then I could statically import the two list method just like

277
00:18:58,490 --> 00:19:04,940
So now I'm getting these red squiggles because if I hover over this, it's going to tell me that now

278
00:19:04,940 --> 00:19:13,100
that I'm using the to list inside of the collect, I'm collecting all of the strings into a list and

279
00:19:13,100 --> 00:19:18,440
therefore this dot collect method is returning something of type list now.

280
00:19:18,590 --> 00:19:23,630
So before I was using the dot count method and that was returning along, but now I'm using the Dot

281
00:19:23,630 --> 00:19:27,860
collect with a to list and therefore it's returning a list.

282
00:19:28,100 --> 00:19:32,980
And so what I'm doing up here is wrong now.

283
00:19:33,000 --> 00:19:34,310
That's what it's telling me, OK?

284
00:19:34,490 --> 00:19:36,020
So if I want to now?

285
00:19:36,050 --> 00:19:39,230
Well, first off, I need to put a semicolon there to close that off.

286
00:19:39,680 --> 00:19:40,030
All right.

287
00:19:40,040 --> 00:19:46,100
So if I want to fix this, then I need to come up here and just change this to pick up a list.

288
00:19:46,100 --> 00:19:54,530
Or I could delete this, and then I can just let the ID e create a capture that variable again with

289
00:19:54,530 --> 00:20:00,920
my option command the and I'm just going to call this result for now.

290
00:20:01,070 --> 00:20:04,700
And then I will come down here and call that result as well.

291
00:20:04,850 --> 00:20:09,770
Oh, now actually, obviously, I don't actually want to do this right, but this is just a little quick

292
00:20:09,770 --> 00:20:11,210
review in real life.

293
00:20:11,210 --> 00:20:15,890
If I were to actually run this, that would be wasting a ton of memory because it would actually be,

294
00:20:16,070 --> 00:20:19,910
you know, making a list with five million records.

295
00:20:19,970 --> 00:20:20,300
OK.

296
00:20:20,840 --> 00:20:21,200
All right.

297
00:20:21,320 --> 00:20:25,760
Now what I actually want to do, though, is get back to counting and here's what I want to show you.

298
00:20:25,880 --> 00:20:30,650
So this two list method is a static method that lives on the collector's class.

299
00:20:30,830 --> 00:20:34,310
The collector's class has a zillion methods on it, though.

300
00:20:34,490 --> 00:20:43,010
And if we just take a look at what other methods are on the collector's class, you will see that there

301
00:20:43,010 --> 00:20:45,740
is a method called counting.

302
00:20:47,050 --> 00:20:48,910
And if I select this.

303
00:20:50,800 --> 00:20:56,260
Then I get red squiggles again, and if I hover over this now, it's telling me, Hey, it returns along,

304
00:20:56,260 --> 00:21:00,190
so I really should have just left that long that we had before right there.

305
00:21:00,190 --> 00:21:03,700
So I'm going to just delete all of that.

306
00:21:05,820 --> 00:21:08,160
Put my cursor here and recapture.

307
00:21:09,360 --> 00:21:11,310
And I will just call this result.

308
00:21:11,940 --> 00:21:12,360
All right.

309
00:21:12,930 --> 00:21:20,700
So now if I run this, this should behave just as we had before with the discount method.

310
00:21:22,310 --> 00:21:23,090
Yeah, there we go.

311
00:21:23,120 --> 00:21:28,040
So we've got five million again, OK, now you should be wondering, well, what's the difference between

312
00:21:28,040 --> 00:21:32,810
using and I'll just show you for four sake, I'll just show you here.

313
00:21:32,900 --> 00:21:39,350
What's the difference between using this count versus collect and then referring to the collectors that

314
00:21:39,350 --> 00:21:40,550
counting, right?

315
00:21:40,580 --> 00:21:41,240
What's the difference?

316
00:21:41,420 --> 00:21:45,080
Well, in terms of, you know, the end goal, obviously there is no difference.

317
00:21:45,200 --> 00:21:48,740
But in terms of how they're implemented, there is quite a bit of difference.

318
00:21:48,950 --> 00:21:59,090
Basically, the dot collect method here is you can think of it as an entire framework for four, enabling

319
00:21:59,090 --> 00:22:08,570
us to do some really powerful query type things with the Streams API and because it's essentially an

320
00:22:08,570 --> 00:22:09,680
entire framework.

321
00:22:10,400 --> 00:22:17,720
There are all kinds of capabilities that have been implemented in a fairly generic way behind an interface,

322
00:22:17,930 --> 00:22:26,120
whereas the the count method here and many of the other terminal operations that we learned previously

323
00:22:26,600 --> 00:22:30,950
with the Streams API, you can think of those as being more purpose built.

324
00:22:31,670 --> 00:22:34,620
So in some cases, they might actually be more efficient.

325
00:22:34,640 --> 00:22:36,260
A little bit sometimes.

326
00:22:36,980 --> 00:22:42,590
That's that's entirely possible because they're a little more purpose built for what they do, whereas

327
00:22:43,280 --> 00:22:53,150
the operations that we are able to use in the collect method here, they all adhere to the collect methods

328
00:22:53,150 --> 00:22:56,420
framework for doing these kinds of operations.

329
00:22:56,570 --> 00:23:01,610
So the main thing to know is that in many cases, you don't really need to worry about it.

330
00:23:02,240 --> 00:23:06,770
But as we learn more of what we can do with collect, you'll see that there are some things that you

331
00:23:06,770 --> 00:23:13,350
can only do with the collect method that you can't do in any other way within the Streams API.

332
00:23:13,370 --> 00:23:13,700
OK.

333
00:23:13,850 --> 00:23:21,110
And so while they were implementing those things, they went ahead and implemented collect versions

334
00:23:21,350 --> 00:23:27,200
of some of the other operations that we've already learned before, like summing and counting and things

335
00:23:27,200 --> 00:23:27,950
of that sort.

336
00:23:28,040 --> 00:23:28,460
OK.

337
00:23:29,430 --> 00:23:35,370
All right, so I'm going to wrap up this lesson, and when we pick back up, we're going to really dive

338
00:23:35,370 --> 00:23:41,970
in on what we can do with five million records, OK, and how we can analyze the data in really awesome

339
00:23:41,970 --> 00:23:43,620
ways programmatically.

340
00:23:43,740 --> 00:23:44,910
So I'll see you in the next one.
