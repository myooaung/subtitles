WEBVTT
1
00:00:00.390 --> 00:00:02.670
Hey, welcome back in this lesson.

2
00:00:02.940 --> 00:00:04.480
I want to do something kind of fun.

3
00:00:04.500 --> 00:00:05.670
I think it's going to be fun.

4
00:00:05.940 --> 00:00:13.890
And that is I want to merge the large data set that we had been working with when in the streams of

5
00:00:13.900 --> 00:00:15.240
lambdas API.

6
00:00:15.390 --> 00:00:23.020
I want to revisit that data set and see if we can get that data loaded into our real database now.

7
00:00:23.040 --> 00:00:23.520
OK.

8
00:00:23.790 --> 00:00:25.300
I think this is going to be kind of fun.

9
00:00:26.040 --> 00:00:30.180
So we're going to need to do a little bit of setup, though, to make this work the way that I have

10
00:00:30.180 --> 00:00:30.930
envisioned it.

11
00:00:31.290 --> 00:00:34.080
So let's jump right over to the code and see what we can do here.

12
00:00:34.110 --> 00:00:40.800
So the first thing I'm going to do is to open up the spreadsheet with a sample of our large data set.

13
00:00:40.890 --> 00:00:44.120
OK, so here we are with a sample of our data set.

14
00:00:44.580 --> 00:00:50.850
And the first thing I wanted to do and here is to identify if there are other fields that we should

15
00:00:50.850 --> 00:00:57.270
go ahead and model in our people class before we attempt to try to load this data.

16
00:00:57.420 --> 00:01:00.030
And when I say load the data, let me let me explain here.

17
00:01:00.330 --> 00:01:05.850
I'm not planning for us to load up all of this data in terms of all the columns.

18
00:01:06.000 --> 00:01:09.000
There are a lot of columns here that I don't care about at all.

19
00:01:09.300 --> 00:01:14.460
I just want to get a small subset of the most typical ones, OK, because I don't want to sit here modeling

20
00:01:14.460 --> 00:01:16.890
out this entire table in Java.

21
00:01:16.920 --> 00:01:17.310
OK.

22
00:01:17.640 --> 00:01:25.710
But I think a few additional good candidates might be the email field and possibly their address too.

23
00:01:25.710 --> 00:01:30.540
Although I'm thinking I want to hold off on that because I think I've got a special way that I want

24
00:01:30.540 --> 00:01:33.120
us to go about doing the addresses.

25
00:01:33.540 --> 00:01:41.070
So mostly I'm thinking, let's just add in the email field for now, and we'll go with that.

26
00:01:41.130 --> 00:01:41.520
OK.

27
00:01:41.730 --> 00:01:43.620
So let's jump over to the idea.

28
00:01:43.650 --> 00:01:44.020
All right.

29
00:01:44.040 --> 00:01:46.650
And then let's jump into the person class.

30
00:01:48.350 --> 00:01:48.780
All right.

31
00:01:48.800 --> 00:01:54.830
And I think all we really need to do here probably is just add an email field, so that's going to be

32
00:01:54.830 --> 00:01:58.880
a string and we can just call it email.

33
00:01:59.780 --> 00:02:00.440
It was easy.

34
00:02:00.740 --> 00:02:04.460
Now we'll need to generate getters and setters.

35
00:02:10.480 --> 00:02:11.350
And there we go.

36
00:02:13.260 --> 00:02:17.700
And we're also going to need to consider now what do we want to do about the constructors?

37
00:02:18.330 --> 00:02:24.120
When we were working on the credit repository, we kept creating these longer and longer versions of

38
00:02:24.120 --> 00:02:25.020
the constructor.

39
00:02:25.470 --> 00:02:31.380
And I did state at that time that there might be a day of reckoning where we had one to perhaps reconcile

40
00:02:31.380 --> 00:02:34.680
these things down to one or something like that.

41
00:02:35.070 --> 00:02:40.680
And I'm thinking the answer is maybe no, the day has not come yet.

42
00:02:41.340 --> 00:02:42.960
So let me tell you one thing here.

43
00:02:43.350 --> 00:02:51.120
It's one thing to have a few constructors for that class's most common properties to be set, especially

44
00:02:51.120 --> 00:02:52.860
as I've mentioned a few times before.

45
00:02:53.010 --> 00:02:59.650
If those properties are properties that need to exist in order for the object to even make sense.

46
00:02:59.670 --> 00:02:59.970
Right.

47
00:03:00.210 --> 00:03:05.940
So if you're creating a person and you don't have a first name or last name, maybe that's not really

48
00:03:05.940 --> 00:03:06.630
a person.

49
00:03:07.050 --> 00:03:11.670
But there will come a point where the properties really are kind of optional, right?

50
00:03:11.670 --> 00:03:15.660
Like the salary that could be considered optional.

51
00:03:15.990 --> 00:03:22.350
Now, in this case, I added the salary here as a convenience so that we could create a person and set

52
00:03:22.350 --> 00:03:27.690
all of the pertinent information that we were caring about at that time, all in one go, rather than

53
00:03:27.690 --> 00:03:30.150
having to do it in separate lines of code.

54
00:03:30.630 --> 00:03:34.650
But truly, the salary is probably kind of an optional property.

55
00:03:34.650 --> 00:03:40.110
It's not as intrinsic to who a person is as their first name, last name and date of birth, right?

56
00:03:40.170 --> 00:03:46.470
So with that being said, I'm not inclined to add any more fields onto an existing constructor or make

57
00:03:46.470 --> 00:03:51.810
a fourth constructor, which is starting to get a little excessive for my taste for for what we're doing

58
00:03:51.810 --> 00:03:52.140
here.

59
00:03:52.500 --> 00:03:58.590
So we'll set that email in a different way, but we've got the email filled there now, so let's jump

60
00:03:58.590 --> 00:04:00.610
into our test class then.

61
00:04:00.630 --> 00:04:04.290
All right, because this is where I think we're going to make the magic happen.

62
00:04:04.710 --> 00:04:11.730
And so what I want to do here is just to use this test class, not necessarily to write an actual test

63
00:04:11.730 --> 00:04:18.660
in this particular case, but actually just as a place for us to write some code to open up our large

64
00:04:18.660 --> 00:04:22.250
dataset file and load it all into the database.

65
00:04:22.260 --> 00:04:22.650
OK?

66
00:04:22.890 --> 00:04:26.460
This is just a very convenient place for us to be able to do that kind of a thing.

67
00:04:26.580 --> 00:04:28.020
It's already got a connection.

68
00:04:28.020 --> 00:04:30.080
In fact, it owns the connection, right?

69
00:04:30.090 --> 00:04:33.360
And so we can make use of it very effectively right here.

70
00:04:33.750 --> 00:04:34.090
All right.

71
00:04:34.110 --> 00:04:37.620
So let's create a new test method.

72
00:04:39.000 --> 00:04:42.810
And maybe we can just call it know load data.

73
00:04:44.160 --> 00:04:51.600
All right, and so what I have envisioned here is we're going to make use of the Streams API to do what

74
00:04:51.600 --> 00:04:57.630
we've done before, which is to open up that data file and start streaming through it and create people

75
00:04:57.630 --> 00:04:58.210
out of it.

76
00:04:58.230 --> 00:05:03.300
But after we create a person, then we're going to turn around and just say it into the database, OK?

77
00:05:03.330 --> 00:05:05.850
Using our existing code, that's what I've got in mind.

78
00:05:05.880 --> 00:05:06.360
All right.

79
00:05:06.390 --> 00:05:12.120
So if you feel comfortable to do so, why don't you try getting as far as you can with this before I

80
00:05:12.120 --> 00:05:12.550
do?

81
00:05:12.570 --> 00:05:15.300
And then you can meet back up with me and see how I do it.

82
00:05:15.720 --> 00:05:16.110
All right.

83
00:05:16.110 --> 00:05:17.880
So I'm going to go ahead and do this now.

84
00:05:18.190 --> 00:05:19.530
So let's see.

85
00:05:19.530 --> 00:05:30.390
Here we do a files the lines path of and then I need a path and I also need to import the path class.

86
00:05:30.960 --> 00:05:31.260
All right.

87
00:05:31.270 --> 00:05:35.370
So I need that file so you can go back to one of the old projects.

88
00:05:35.370 --> 00:05:40.960
If the data file is still in your computer in the same place, I'm going to go look it up real quick.

89
00:05:40.980 --> 00:05:41.740
Be right back.

90
00:05:41.760 --> 00:05:46.680
OK, so I've got that path and I'm going to paste it in on from my computer.

91
00:05:46.680 --> 00:05:50.790
And just remember now my path won't be your path, almost for sure.

92
00:05:51.030 --> 00:05:56.040
Unless you happen to be on a Mac and your name is Terry and you kept all your files in the exact same

93
00:05:56.040 --> 00:05:58.570
places that I did, which is improbable.

94
00:05:58.590 --> 00:05:59.190
OK.

95
00:05:59.220 --> 00:06:05.040
And then I've got this red squiggly here because the lines method does throw an exception.

96
00:06:05.250 --> 00:06:11.280
Since I'm in a test, though, I'm not even going to bother to wrap this line in a try, catch or try

97
00:06:11.280 --> 00:06:12.750
with resources or any of that.

98
00:06:12.930 --> 00:06:18.110
I'm just going to let the exception be added to the method of this test, right?

99
00:06:18.120 --> 00:06:22.870
Because since it's a test, if there's any trouble here, I'll just let the test fail, right?

100
00:06:22.890 --> 00:06:23.250
OK.

101
00:06:23.280 --> 00:06:24.480
So there's that.

102
00:06:24.690 --> 00:06:27.420
And now we can start doing our streams stuff.

103
00:06:27.810 --> 00:06:32.520
So we will now have a stream of strings, right?

104
00:06:32.610 --> 00:06:35.370
One string per line in the text file.

105
00:06:35.580 --> 00:06:38.490
The first line will be our header row, right?

106
00:06:38.490 --> 00:06:45.080
And so we want to skip over that one so we can use the skip method here to skip over that.

107
00:06:45.090 --> 00:06:51.900
And so the next thing we'll want to do is to convert one comma separated string into an array using

108
00:06:51.900 --> 00:06:52.920
those commas, right?

109
00:06:53.250 --> 00:07:00.360
And so we can do that with a map because we're doing a conversion right and then we're going to take

110
00:07:00.360 --> 00:07:01.330
those lines.

111
00:07:01.560 --> 00:07:08.910
So I'm going to make a lambda expression of L and call the string method L Dot split.

112
00:07:09.950 --> 00:07:12.530
And I want it to split on the common.

113
00:07:14.320 --> 00:07:16.360
And I hope that's all making sense to you.

114
00:07:16.510 --> 00:07:21.280
I think we spend quite a bit of time in this world, so I'm not going to explain this any deeper.

115
00:07:21.280 --> 00:07:27.100
If this is not ringing any bells for you, though, you can jump back to the streams and lambdas videos

116
00:07:27.100 --> 00:07:31.420
and rewatch some of those to see my deeper explanation for what's going on here.

117
00:07:31.450 --> 00:07:37.450
So out of this call will be now getting a stream of string arrays.

118
00:07:38.050 --> 00:07:43.450
And so then we'll need to convert those string arrays into person objects, right?

119
00:07:43.810 --> 00:07:50.380
And so here I'm going to use a lambda expression of a variable of a four array, and now I can actually

120
00:07:50.380 --> 00:07:52.050
start creating this person, right?

121
00:07:52.060 --> 00:07:59.040
So we'll do a new person and I can make use of one of the constructors that we already have.

122
00:07:59.050 --> 00:08:01.730
But this is only going to get get us so far right now.

123
00:08:01.750 --> 00:08:07.930
I actually don't want to use either of these first two constructors, though, because these two constructors

124
00:08:08.200 --> 00:08:09.640
are taking an input of a long.

125
00:08:09.640 --> 00:08:14.560
And I don't want to specify an ID here because these are going to go into the database, the database

126
00:08:14.560 --> 00:08:16.570
is going to generate these IDs for us.

127
00:08:16.840 --> 00:08:20.270
So I think for that reason, I'm going to call this third one here.

128
00:08:20.290 --> 00:08:20.680
OK.

129
00:08:21.160 --> 00:08:26.170
So let's take a quick look at the spreadsheet and remember now what the indexes are for the first name

130
00:08:26.170 --> 00:08:26.740
and last name.

131
00:08:26.740 --> 00:08:32.920
So if you imagine each of these columns was separated by commas before and each one, each one is now

132
00:08:32.920 --> 00:08:34.360
an element in our array.

133
00:08:34.630 --> 00:08:38.110
The first column would be Element Index zero.

134
00:08:38.290 --> 00:08:39.940
Then one, then two.

135
00:08:40.060 --> 00:08:43.930
So first name will be two, and then the last name will be four.

136
00:08:43.960 --> 00:08:44.380
Right?

137
00:08:44.470 --> 00:08:47.650
OK, so so we need to specify a first name.

138
00:08:47.650 --> 00:08:49.600
So that'll be index two.

139
00:08:50.530 --> 00:08:58.570
And then the last name is Index four, and then the next thing is a zoned date time for the date of

140
00:08:58.570 --> 00:08:58.900
birth.

141
00:08:59.170 --> 00:09:05.110
Now, if we go back and look at the spreadsheet, we will recall that the date of birth and the time

142
00:09:05.110 --> 00:09:07.120
of birth are in two separate fields.

143
00:09:07.390 --> 00:09:12.340
But in our code, we've modeled the date of birth as a zoned date time.

144
00:09:12.340 --> 00:09:16.840
So it's a combination of these two things, plus actually one more thing that is in here, which is

145
00:09:16.840 --> 00:09:18.160
the time zone, right?

146
00:09:18.850 --> 00:09:23.950
So that's going to be a little extra code that we're going to have to write to combine these two fields

147
00:09:23.950 --> 00:09:24.610
together.

148
00:09:24.880 --> 00:09:32.800
And because of that, I'm actually thinking, let's go ahead and turn this into a code block instead

149
00:09:32.800 --> 00:09:34.310
of trying to do it all on one line.

150
00:09:34.340 --> 00:09:34.690
OK.

151
00:09:35.140 --> 00:09:40.900
So what I'm going to do is I'm going to select all of this and then I'm just going to press the opening

152
00:09:40.900 --> 00:09:42.010
curly brace there.

153
00:09:42.010 --> 00:09:47.110
And intelligence already understands that I'm creating a code block until it made a new line and put

154
00:09:47.110 --> 00:09:49.840
my new person code on its own line and all of that.

155
00:09:50.050 --> 00:09:50.410
All right.

156
00:09:50.620 --> 00:09:56.080
So now I have a little room to breathe and write a little bit more code in this block, right?

157
00:09:56.500 --> 00:10:01.900
So first thing I think I want to do is to create a local date using this date of birth.

158
00:10:01.960 --> 00:10:02.820
Just the date of birth.

159
00:10:02.890 --> 00:10:07.930
I'll handle the time of birth and in just a moment, but we'll focus on the date of birth first.

160
00:10:08.140 --> 00:10:10.930
So I'm going to make a local date and this is indexed.

161
00:10:10.930 --> 00:10:11.920
10, right?

162
00:10:12.160 --> 00:10:16.720
Zero one two three four five six seven, eight, nine and 10, right.

163
00:10:16.750 --> 00:10:17.800
So 10 and 11.

164
00:10:17.830 --> 00:10:18.250
OK.

165
00:10:18.520 --> 00:10:20.800
So let's make a local date.

166
00:10:20.920 --> 00:10:24.040
However, we're going to need to pass that date string, right?

167
00:10:24.460 --> 00:10:30.070
And so there is the pass method here, and we're going to need the second one here date time format

168
00:10:30.070 --> 00:10:32.260
that takes a date, time, format or right?

169
00:10:32.560 --> 00:10:34.870
So I'm going to select that second one there.

170
00:10:34.900 --> 00:10:40.870
So we first will pass in the string, which is coming from the 10th index into the array.

171
00:10:41.110 --> 00:10:50.110
And then the second parameter will be a date time formatter, so we can reference DTF of pattern the

172
00:10:50.110 --> 00:10:53.200
of pattern method and then we can specify a pattern.

173
00:10:53.200 --> 00:10:53.590
So.

174
00:10:53.770 --> 00:10:59.710
So jumping back over to the spreadsheet here, the pattern is going to be month, day and then year.

175
00:10:59.740 --> 00:11:05.870
Right now, you may recall that the month has to be specified as a capital m for month because lowercase

176
00:11:06.010 --> 00:11:11.840
means minutes because this date time format or can do patterns of both dates and time, right?

177
00:11:11.860 --> 00:11:18.820
So a month forward slash and then day forward slash and then year was four digits one two three four.

178
00:11:18.850 --> 00:11:19.240
Right.

179
00:11:19.570 --> 00:11:23.710
Also recall that we're using a single character for the month.

180
00:11:23.830 --> 00:11:28.480
If I did two of these, that would mean that the month should be with leading zeros.

181
00:11:28.510 --> 00:11:31.540
OK, so if it were the month of seven, it would be zero seven.

182
00:11:31.840 --> 00:11:34.660
But that's not how they're specified over here.

183
00:11:34.730 --> 00:11:36.730
There's no leading zeros, right?

184
00:11:37.330 --> 00:11:39.830
So we'll do one m and one D.

185
00:11:40.540 --> 00:11:41.080
All right.

186
00:11:41.410 --> 00:11:47.740
And so then that should give us the local date, and I'm going to go ahead and capture that.

187
00:11:48.250 --> 00:11:50.440
And I will call that date of birth or DOB.

188
00:11:50.650 --> 00:11:55.480
And then let's do the time so we can use the local time class.

189
00:11:55.870 --> 00:12:05.320
And it also has a pass that looks pretty much the same and so will pass in a 11:00 here and then another

190
00:12:05.320 --> 00:12:07.600
date time for matter of pattern.

191
00:12:07.840 --> 00:12:10.000
And now we'll specify the time pattern.

192
00:12:10.390 --> 00:12:12.750
And so let's go look at what that pattern is and.

193
00:12:12.840 --> 00:12:17.930
This is looking pretty straightforward, I think hour, minute, second and then a.m. or p.m..

194
00:12:18.210 --> 00:12:18.560
All right.

195
00:12:18.570 --> 00:12:25.080
So we can just create a date time format or use another of pattern, and now the pattern is going to

196
00:12:25.080 --> 00:12:26.160
be ours.

197
00:12:27.420 --> 00:12:35.280
Minutes calling seconds space and then the AM and PM and the code for that is just an A.

198
00:12:35.310 --> 00:12:40.050
And if you didn't remember that, you could always hover over this of pattern method to pull up the

199
00:12:40.080 --> 00:12:46.140
Java Dock, or you could click right in to it to get there as well and take a look at the the Java dock

200
00:12:46.140 --> 00:12:46.500
here.

201
00:12:46.500 --> 00:12:50.690
And you could then go into this pattern of letters and symbols right there.

202
00:12:50.700 --> 00:12:53.520
And now you can get to all the patterns and symbols.

203
00:12:54.000 --> 00:12:54.300
All right.

204
00:12:54.310 --> 00:12:56.400
So that's how you can remember it.

205
00:12:56.400 --> 00:12:59.280
So you don't need to memorize all of these things, is what I'm saying, right?

206
00:12:59.550 --> 00:13:00.080
All right.

207
00:13:00.090 --> 00:13:05.490
And so let's close that off and then capture that and that'll be time of birth.

208
00:13:05.820 --> 00:13:08.820
And then I suppose we could just make a local date time.

209
00:13:09.850 --> 00:13:13.050
Of a local date and a local time, right?

210
00:13:13.400 --> 00:13:21.700
The overcomer t0 be like, so then I'll capture that and I guess I'll call it date, time of birth.

211
00:13:21.940 --> 00:13:22.340
All right.

212
00:13:22.360 --> 00:13:28.870
And so now when we create our new person and I suppose while I'm at it might as well go ahead and create

213
00:13:28.870 --> 00:13:34.090
a zoned date time as well, because that's what actually goes into creating a new person, right?

214
00:13:34.660 --> 00:13:43.150
So we'll create a zone date time of a dto b, and then this can also take a zone ID.

215
00:13:43.630 --> 00:13:48.700
Now, since we don't actually know where in the world these people were born, I'm just going to set

216
00:13:48.700 --> 00:13:50.810
all of these to GMT zero.

217
00:13:50.890 --> 00:13:54.610
OK, so zone date or zone I.D. of.

218
00:13:55.710 --> 00:13:56.910
Plus zero.

219
00:13:59.050 --> 00:14:04.510
And I will capture that, and I'll just call this zee A-to-B for lack of a better name.

220
00:14:04.660 --> 00:14:06.820
Zoned date, time of birth.

221
00:14:07.480 --> 00:14:07.870
All right.

222
00:14:07.870 --> 00:14:12.940
So finally, for this last field here, I guess I don't need that anymore.

223
00:14:13.120 --> 00:14:15.560
And so now I can just pass in this.

224
00:14:16.110 --> 00:14:16.810
Toby.

225
00:14:18.810 --> 00:14:20.490
And then I will capture that.

226
00:14:21.510 --> 00:14:23.310
And just call it arson.

227
00:14:23.340 --> 00:14:23.610
All right.

228
00:14:23.700 --> 00:14:27.720
So now, though, we're not done right now, we've just got a basic person created.

229
00:14:27.990 --> 00:14:32.320
So now let's go ahead and set a few other things on this person, right?

230
00:14:32.340 --> 00:14:37.700
So person dot, so they've got a salary so we can set that salary.

231
00:14:37.710 --> 00:14:44.340
So let's go back into the data, into the spreadsheet here and find what column their salary is now.

232
00:14:44.490 --> 00:14:46.670
I don't feel like counting quite that far.

233
00:14:46.680 --> 00:14:49.230
I don't even know where that is.

234
00:14:50.400 --> 00:14:51.780
There it is, yeah, I don't know.

235
00:14:51.980 --> 00:14:55.050
Well, Z, so I guess that would be 26.

236
00:14:55.200 --> 00:14:55.530
All right.

237
00:14:55.540 --> 00:14:57.540
So let's let's try that.

238
00:14:58.470 --> 00:15:01.770
So now this is going to be a string coming out of the array, right?

239
00:15:01.770 --> 00:15:03.870
So it would be a 26.

240
00:15:04.110 --> 00:15:06.780
But we need to specify the decimal here.

241
00:15:06.780 --> 00:15:10.500
So we'll create a new big decimal.

242
00:15:10.800 --> 00:15:16.920
Now, if you'll recall, big decimal works just fine with the string being passed directly in to it,

243
00:15:16.930 --> 00:15:20.310
so we don't need to do any fancy formatting or anything like that.

244
00:15:20.940 --> 00:15:21.180
All right.

245
00:15:21.180 --> 00:15:27.960
So there's the salary and then we just created a an email field as well.

246
00:15:28.920 --> 00:15:31.620
And let's go see what that index would be.

247
00:15:31.650 --> 00:15:36.870
So the email is, let's see zero one two three four five six.

248
00:15:38.100 --> 00:15:38.610
A.

249
00:15:38.940 --> 00:15:39.750
Six.

250
00:15:39.930 --> 00:15:40.710
All right.

251
00:15:41.740 --> 00:15:48.400
So I think we're done creating this person, so now we can just return this person, and so now we will

252
00:15:48.400 --> 00:15:53.470
have a stream of people coming out of this map here.

253
00:15:54.440 --> 00:15:58.970
And so now all we need to do is save them.

254
00:15:59.270 --> 00:16:05.390
And so to save, we can just use a for each and then we can call our repo.

255
00:16:06.640 --> 00:16:09.430
Save method like so.

256
00:16:09.880 --> 00:16:14.590
And of course, I'm using a method reference here because that's all we need to use here, which, you

257
00:16:14.590 --> 00:16:20.270
know, is equivalent to doing something like p arrow repo to save pee.

258
00:16:20.380 --> 00:16:20.680
Right?

259
00:16:20.710 --> 00:16:21.910
That's equivalent to that.

260
00:16:21.910 --> 00:16:26.530
But we can save ourselves a few keystrokes, right, by just using the method reference.

261
00:16:28.330 --> 00:16:33.100
OK, so a couple other things we're going to need to do now because we've added the email row and we're

262
00:16:33.100 --> 00:16:34.600
also grabbing the salary.

263
00:16:34.690 --> 00:16:40.030
We're going to need to map those two additional properties to fields in the database, right?

264
00:16:40.300 --> 00:16:46.840
So let's jump over to the actual people repository class and find our save map for save method here.

265
00:16:46.840 --> 00:16:52.810
And here's where we are actually grabbing the first name, last name and the date of birth and setting

266
00:16:52.810 --> 00:16:54.920
them for the prepared statement.

267
00:16:54.940 --> 00:16:55.420
OK.

268
00:16:55.810 --> 00:17:01.750
So actually, first thing we'll need to do is take a look at our school for saving or inserting into

269
00:17:01.750 --> 00:17:02.710
the database, right?

270
00:17:02.710 --> 00:17:03.880
So it's right here.

271
00:17:04.090 --> 00:17:05.500
Safe person sequel.

272
00:17:05.890 --> 00:17:10.120
So insert into people first name, last name, date of birth, these three fields.

273
00:17:10.360 --> 00:17:12.430
So now we're going to want to extend that a bit.

274
00:17:12.660 --> 00:17:12.990
Right.

275
00:17:13.000 --> 00:17:20.620
And I'm actually inclined perhaps to change this string format now into a text block so that I can properly

276
00:17:20.620 --> 00:17:23.650
format all of this rather than trying to squeeze it all on one line.

277
00:17:23.920 --> 00:17:32.490
So I'm just going to put a couple more quotes here and then make a new line like so insert into people

278
00:17:32.530 --> 00:17:35.590
and then maybe I'll put on a new line here first.

279
00:17:35.850 --> 00:17:43.750
First name, last name, date of birth, comma, salary, comma, email.

280
00:17:43.960 --> 00:17:47.710
And now I know we have a salary field in the database.

281
00:17:47.980 --> 00:17:53.140
Feel like I'm saying Sally Field like the actress, if any of you know who that is, anyway, salary

282
00:17:53.140 --> 00:17:53.650
filled.

283
00:17:55.660 --> 00:18:01.150
Now I'm going to be thinking salary field for the Sally field every time I say that salary filled.

284
00:18:02.110 --> 00:18:06.610
Now we do have a salary field, but we don't have an email field, so we're going to need to add that

285
00:18:06.610 --> 00:18:09.880
email field to that database table also, OK.

286
00:18:10.360 --> 00:18:11.710
So let's not forget to do that.

287
00:18:11.830 --> 00:18:12.010
All right.

288
00:18:12.010 --> 00:18:15.310
But anyway, here are our fields and then the values.

289
00:18:15.310 --> 00:18:19.180
Let me click that and I'm going to put that on its own line as well.

290
00:18:19.390 --> 00:18:21.940
And so now we're going to have a couple extra.

291
00:18:24.350 --> 00:18:27.010
Couple of extra parameters to bind to.

292
00:18:27.250 --> 00:18:27.640
All right.

293
00:18:27.820 --> 00:18:30.130
So that's what we need for that.

294
00:18:30.550 --> 00:18:37.870
And so down here now for the map, for save, we need to actually grab those two extra properties and

295
00:18:37.870 --> 00:18:38.620
set them.

296
00:18:38.770 --> 00:18:42.550
So for the salary, that's going to be a big decimal.

297
00:18:42.550 --> 00:18:44.710
So we're going to set big decimal.

298
00:18:45.730 --> 00:18:48.160
And that'll be the fourth parameter.

299
00:18:49.000 --> 00:18:58.690
And then we're simply going to call entity get salary like so and then we're also going to set the email

300
00:18:58.690 --> 00:19:01.450
field, which we haven't created in the database yet.

301
00:19:01.780 --> 00:19:07.420
But this will just be a string and it'll be the fifth parameter.

302
00:19:08.640 --> 00:19:10.890
Entity, don't get email.

303
00:19:12.530 --> 00:19:13.220
Like so.

304
00:19:14.140 --> 00:19:14.890
All right.

305
00:19:15.340 --> 00:19:19.780
So now let's pop over to the database and add this email field.

306
00:19:20.140 --> 00:19:20.470
All right.

307
00:19:20.470 --> 00:19:24.580
So we'll go to the aliases here and I'm going to click on people test.

308
00:19:25.560 --> 00:19:28.920
To open back up the H2 database for the people test.

309
00:19:29.460 --> 00:19:30.040
All right.

310
00:19:30.060 --> 00:19:33.120
And so we want to add an email column now.

311
00:19:33.480 --> 00:19:36.300
So to do that, we'll need to alter the table.

312
00:19:36.300 --> 00:19:40.380
And I think we might have done a little bit of altering before, but here we go.

313
00:19:40.390 --> 00:19:42.480
So we'll do an altar table.

314
00:19:42.900 --> 00:19:51.810
People add column and we're going to name it email and it's going to be a VAR car.

315
00:19:51.840 --> 00:19:53.340
Two, five five.

316
00:19:53.640 --> 00:19:55.920
And I think that's sufficient right there.

317
00:19:56.430 --> 00:20:00.630
So then I'm going to do a controlled return to add that field.

318
00:20:01.500 --> 00:20:08.940
And now I can do something like a select everything from people and just see what's in there.

319
00:20:10.320 --> 00:20:10.610
OK.

320
00:20:10.650 --> 00:20:18.240
Very good, so there's our email column now right here, and we've got a salary there and date of birth

321
00:20:18.240 --> 00:20:21.540
and everything else, so I think we're pretty good there.

322
00:20:22.080 --> 00:20:22.530
All right.

323
00:20:22.540 --> 00:20:24.720
So let me remember to get out of here now.

324
00:20:27.220 --> 00:20:28.480
I'm just going to close that.

325
00:20:28.930 --> 00:20:32.260
Yes, and no, I don't want to retain anything.

326
00:20:32.890 --> 00:20:33.430
OK.

327
00:20:33.700 --> 00:20:34.030
All right.

328
00:20:34.040 --> 00:20:38.020
So now back over here in our program, so now I think we're ready now.

329
00:20:38.140 --> 00:20:42.910
I haven't forgotten about the fact that even though we've added these two new columns or fields for

330
00:20:42.910 --> 00:20:47.920
saving, we haven't actually done anything for the update or loading and all of that, right?

331
00:20:48.040 --> 00:20:50.070
So we'll we'll we'll get to those as well.

332
00:20:50.080 --> 00:20:52.240
But for right now, I just wanted to focus on the save.

333
00:20:52.460 --> 00:20:52.690
All right.

334
00:20:52.690 --> 00:20:55.510
So now let's jump back over to our test class.

335
00:20:55.630 --> 00:21:00.590
OK, so now that we've done this, I think we can go ahead and test this out and to test it.

336
00:21:00.610 --> 00:21:04.840
Let's just put a limit on the number of records that we actually process.

337
00:21:05.020 --> 00:21:05.470
OK.

338
00:21:06.190 --> 00:21:12.820
So we'll put a limit of, I don't know, let's do like 100 100 records to start off with.

339
00:21:12.850 --> 00:21:13.210
OK.

340
00:21:13.810 --> 00:21:14.110
All right.

341
00:21:14.110 --> 00:21:16.870
So let's go ahead and run this and just see what happens.

342
00:21:24.200 --> 00:21:26.990
OK, so got some kind of a failure here.

343
00:21:29.120 --> 00:21:35.300
Eight, 14, three a.m. could not be passed, let's see, did I use the wrong?

344
00:21:36.430 --> 00:21:37.480
Oh, I'm sorry.

345
00:21:37.810 --> 00:21:43.990
Somehow, I somehow I completely forgot to actually type in the the the parsing string there, didn't

346
00:21:43.990 --> 00:21:44.230
I?

347
00:21:44.560 --> 00:21:44.890
All right.

348
00:21:44.890 --> 00:21:54.130
So the string here would be hours, minutes, seconds and then a four a.m. and p.m. I could have sworn

349
00:21:54.130 --> 00:21:55.810
I did that, but somehow I lost it.

350
00:21:55.840 --> 00:21:57.250
OK, so there we go.

351
00:21:57.820 --> 00:21:58.720
Sorry about that.

352
00:21:58.750 --> 00:22:02.560
You were probably watching and realizing I never showed you what to fill in there.

353
00:22:03.160 --> 00:22:03.640
All right.

354
00:22:04.390 --> 00:22:05.680
So let's try this again.

355
00:22:05.860 --> 00:22:06.490
Run it.

356
00:22:07.210 --> 00:22:07.540
All right.

357
00:22:07.550 --> 00:22:09.050
So it still didn't work.

358
00:22:09.070 --> 00:22:10.390
Let's see.

359
00:22:10.420 --> 00:22:15.880
The character percent is neither a decimal digit, no decimal point nor e notation.

360
00:22:15.880 --> 00:22:17.150
Exponential mark.

361
00:22:17.170 --> 00:22:20.890
OK, so there's a percent sign in our data set, apparently.

362
00:22:21.190 --> 00:22:26.170
Let's go take a look over here and see if we can find where that might be coming from.

363
00:22:27.830 --> 00:22:34.430
Ah, OK, I know what the problem is, we we used Index 26, but everything starts with zero, so I

364
00:22:34.430 --> 00:22:38.720
guess it really should be Index 25, which would be the 26th column.

365
00:22:38.720 --> 00:22:39.260
My bad.

366
00:22:39.830 --> 00:22:40.310
All right.

367
00:22:40.400 --> 00:22:42.950
So we want 25 index 25.

368
00:22:44.330 --> 00:22:45.350
Rookie mistake.

369
00:22:45.380 --> 00:22:46.910
I should have known better, right?

370
00:22:47.000 --> 00:22:49.040
So we'll do a 25 there.

371
00:22:49.580 --> 00:22:49.900
All right.

372
00:22:49.910 --> 00:22:51.050
Let's run this.

373
00:22:52.510 --> 00:22:54.100
Oh, there we go.

374
00:22:55.510 --> 00:22:58.720
OK, so now we see our results here.

375
00:22:58.760 --> 00:23:05.260
Now this is just for 100 and also remember now hope that we run from within these tests does not remain

376
00:23:05.260 --> 00:23:10.240
in the database because we've set the database to stop auto committing data.

377
00:23:10.270 --> 00:23:16.450
OK, so once the test is done running, anything that we've done to the database gets wiped away automatically.

378
00:23:16.450 --> 00:23:19.040
It never it never gets made permanent.

379
00:23:19.060 --> 00:23:19.480
Right?

380
00:23:19.510 --> 00:23:24.700
But here are our 100 saves to the database before they all got wiped out.

381
00:23:24.940 --> 00:23:30.340
And one thing I can tell you now that we're not going to want if we're going to load five million of

382
00:23:30.340 --> 00:23:33.860
these into the database, we're not going to win all of this output here.

383
00:23:33.880 --> 00:23:40.660
All this text output, because believe it or not, even just printing these records to the screen when

384
00:23:40.660 --> 00:23:44.950
you're doing five million records will slow down the process considerably.

385
00:23:45.130 --> 00:23:47.070
So you don't want this at all.

386
00:23:47.080 --> 00:23:48.460
This is just too much.

387
00:23:48.640 --> 00:23:56.260
OK, so let's jump into the Creed repository class and turn that off.

388
00:24:01.490 --> 00:24:03.620
And that's going to be on the save, right?

389
00:24:03.630 --> 00:24:09.240
So if we look through here in the save method, there's one place where we're printing some stuff out,

390
00:24:09.260 --> 00:24:11.060
so I'm just going to comment that out.

391
00:24:11.720 --> 00:24:16.370
And then here's another one where we're printing some stuff out and I'm going to get rid of that, too.

392
00:24:16.550 --> 00:24:23.480
So let's jump back over to the test and let's just run it one more time and make sure that we cleared

393
00:24:23.480 --> 00:24:25.150
out all the printouts.

394
00:24:28.770 --> 00:24:29.010
Yep.

395
00:24:29.520 --> 00:24:31.050
Nice blank screen now.

396
00:24:31.080 --> 00:24:33.910
OK, so that's good, that's believe me, that's going to help a lot.

397
00:24:33.930 --> 00:24:35.880
You definitely want to make sure you do that.

398
00:24:36.270 --> 00:24:41.940
All right now, the next thing we're going to want to do and this may not be obvious to you is we're

399
00:24:41.940 --> 00:24:49.290
going to also want to modify how much ram or how much memory we are allocating to this test when we

400
00:24:49.290 --> 00:24:49.770
run it.

401
00:24:50.130 --> 00:24:58.440
So since we are loading up five million records and we're using the H2 database as an embedded library

402
00:24:58.440 --> 00:25:04.770
within our running code here, that means that quite a bit of memory is going to be needed to efficiently

403
00:25:04.770 --> 00:25:07.530
and quickly run through all five million of those records.

404
00:25:07.860 --> 00:25:10.260
So we're going to want to increase our memory.

405
00:25:10.620 --> 00:25:18.600
So the way to do that is will go up here to the run menu and then we can go down to edit configurations.

406
00:25:20.680 --> 00:25:26.470
And since we just ran that test, it's probably already going to be highlighted right here, people

407
00:25:26.470 --> 00:25:28.390
repository test that load data.

408
00:25:28.390 --> 00:25:30.040
If it isn't, go ahead and click on it.

409
00:25:30.700 --> 00:25:33.070
OK, I'm going to make a little room here.

410
00:25:33.610 --> 00:25:34.060
All right.

411
00:25:34.360 --> 00:25:40.930
So what we can do is come over here to modify options and click on this dropdown and we want to go down

412
00:25:40.930 --> 00:25:43.210
here to Java, add VM options.

413
00:25:43.210 --> 00:25:46.220
So this means add virtual machine options.

414
00:25:46.240 --> 00:25:53.020
These are going to be options for for manipulating how our Java virtual machine will work for this process

415
00:25:53.020 --> 00:25:55.630
that we are about to run someone to click on that.

416
00:25:56.200 --> 00:26:03.040
And now that opens up this extra little field down here VM options, and we can specify some standard

417
00:26:03.070 --> 00:26:06.760
options for how the Java virtual machine should run.

418
00:26:06.790 --> 00:26:13.570
So let me explain what we're about to do here by default, when we run Java programs, if we don't specify

419
00:26:13.570 --> 00:26:18.940
how much memory we want our programs to utilize, then a default amount will be allocated.

420
00:26:18.950 --> 00:26:21.910
Now that amount can change from version to version.

421
00:26:21.910 --> 00:26:28.510
And because of that, we don't really want to leave it up to chance so we can actually specify two parameters.

422
00:26:29.080 --> 00:26:34.390
We can specify a minimum amount of RAM and then a maximum amount.

423
00:26:34.780 --> 00:26:40.360
So what I would recommend here, if you've got enough RAM on your computer, I would recommend specifying

424
00:26:40.360 --> 00:26:45.430
a minimum of two gigs of RAM because we're loading up five million records.

425
00:26:45.640 --> 00:26:51.700
And if you've got more ram on your computer that you don't mind temporarily allocating to this process,

426
00:26:51.970 --> 00:26:54.190
I'd strongly consider going even higher than that.

427
00:26:54.370 --> 00:26:58.510
So in fact, in my case, I'm actually going to go for four gigs of RAM.

428
00:26:58.510 --> 00:27:02.110
So you'll have to decide for yourself how much RAM is appropriate for you.

429
00:27:02.110 --> 00:27:07.480
If you if you're running on a computer that only has four gigs of RAM and you've got a lot of programs

430
00:27:07.510 --> 00:27:12.430
open, you may only be able to safely get away with one gig allocated, maybe two.

431
00:27:12.850 --> 00:27:15.260
I don't know if you should go much more than that.

432
00:27:15.280 --> 00:27:22.660
So the way to do this, though, is to type in hyphen capital X, M, S, lowercase M and lowercase

433
00:27:22.660 --> 00:27:24.760
S and then a number.

434
00:27:24.970 --> 00:27:29.860
So since I want four gigs, I'm going to do four thousand ninety six m.

435
00:27:30.130 --> 00:27:34.430
The M is megs, but it's four thousand megs, which means four gigs.

436
00:27:34.450 --> 00:27:39.830
OK, so Xmas lets you specify the starting amount of memory.

437
00:27:39.850 --> 00:27:46.630
OK, so I'm saying start up with four gigs of RAM allocated to this process, and then I'm going to

438
00:27:46.630 --> 00:27:54.110
also specify the Max with another hyphen capital x m x OK and then another four thousand ninety six.

439
00:27:54.160 --> 00:27:59.830
So what I'm telling the system in effect is just start off with with four gigs.

440
00:27:59.980 --> 00:28:02.290
And that's how much you're going to have the whole time, right?

441
00:28:02.650 --> 00:28:08.650
If I didn't say that, I could live off the starting amount, in which case Java would start with whatever

442
00:28:08.650 --> 00:28:14.440
its default is for whatever version of Java you're running, which could be as low as maybe 256 megs,

443
00:28:14.740 --> 00:28:19.810
and then it would gradually ramp up to using the full four thousand ninety six.

444
00:28:20.110 --> 00:28:25.450
I don't even want to waste time with that ramp up because I want this process to get done quickly,

445
00:28:25.450 --> 00:28:28.590
and so I'm just going to give it the whole entire amount all at once.

446
00:28:28.600 --> 00:28:32.860
But I feel pretty comfortable that this would be fairly sufficient for what I want to do.

447
00:28:33.040 --> 00:28:37.540
Now, if you don't want to do four thousand ninety six, you could try two thousand forty eight, which

448
00:28:37.540 --> 00:28:41.250
is half of that, or 1024, which is half of that.

449
00:28:41.260 --> 00:28:42.550
Anything lower than that.

450
00:28:42.550 --> 00:28:44.600
And I don't know how long that's going to take.

451
00:28:44.620 --> 00:28:46.440
So it will probably work.

452
00:28:46.450 --> 00:28:48.160
It will just take a while.

453
00:28:48.190 --> 00:28:50.590
OK, so that's all we need to do there.

454
00:28:50.620 --> 00:28:55.600
And then I'm going to click, OK, sorry, you can't see my OK button here, but trust me, I'm definitely

455
00:28:55.600 --> 00:28:56.140
clicking it.

456
00:28:56.260 --> 00:29:02.140
OK, and then the last thing we need to do is we want this data to actually stay in the database now.

457
00:29:02.140 --> 00:29:05.680
So we don't want it to get like erased when this test is done.

458
00:29:05.890 --> 00:29:10.870
And so in order to make sure that this data that we're going to load into the database actually stays

459
00:29:10.870 --> 00:29:15.760
there even after the test is done, we will need to commit it ourselves.

460
00:29:15.910 --> 00:29:18.730
And the way we can do that is to access our connection.

461
00:29:18.940 --> 00:29:22.660
And then there is a commit method, and so we can just call that method.

462
00:29:22.810 --> 00:29:24.700
Now that method can throw an exception.

463
00:29:24.820 --> 00:29:28.510
So we will want to pass that exception off to the signature of this test.

464
00:29:28.680 --> 00:29:33.910
Someone to just do an option return and add exception to Method Signature.

465
00:29:33.920 --> 00:29:36.630
And again, only doing that because it's a test.

466
00:29:36.640 --> 00:29:42.640
We probably don't want to do that outside of a test method and we were doing 100, but now I'm going

467
00:29:42.640 --> 00:29:45.390
to go ahead and let it load up the whole entire data set.

468
00:29:45.400 --> 00:29:50.790
So I'm going to delete that limit 100 and now we are ready to run this.

469
00:29:50.950 --> 00:29:54.520
So I'm just going to come up here and click Run.

470
00:30:01.340 --> 00:30:01.860
All right.

471
00:30:01.880 --> 00:30:03.080
And it says it's done.

472
00:30:03.290 --> 00:30:08.960
So now let's verify that it's done and jump back over into squirrel and see how many records there are.

473
00:30:08.990 --> 00:30:14.240
So back into the aliases people test connect, by the way, I'm double clicking on that.

474
00:30:14.240 --> 00:30:16.680
People test alias to open that up.

475
00:30:16.700 --> 00:30:19.080
That's that's how I'm doing that if it wasn't obvious.

476
00:30:19.100 --> 00:30:24.500
OK, so I'm going to do a select count star from people.

477
00:30:26.510 --> 00:30:30.110
Look at that five million and 11 records.

478
00:30:30.530 --> 00:30:33.560
And now let's just take a look at the first 100 records.

479
00:30:33.860 --> 00:30:38.540
You know, at this point, you want to be really careful not to do something like select star from people

480
00:30:38.540 --> 00:30:43.040
because that would retrieve all five million records and you all want to do that.

481
00:30:43.920 --> 00:30:45.140
And it's a lot of records.

482
00:30:45.440 --> 00:30:45.770
All right.

483
00:30:46.040 --> 00:30:52.280
But we can retrieve like the first one, which, by the way, this will show you the H2 sequel equivalent

484
00:30:52.280 --> 00:30:56.450
of doing a stream API where we used the limit word right keyword.

485
00:30:56.900 --> 00:31:04.880
So select everything from people fetch first 100 rows only.

486
00:31:04.910 --> 00:31:10.390
OK, so this is how you can limit the number of rows coming back with H2.

487
00:31:10.460 --> 00:31:10.850
OK?

488
00:31:11.060 --> 00:31:14.000
And every database may do it a little differently.

489
00:31:14.000 --> 00:31:20.380
They may have their own special keywords like I think either Oracle or SQL Server may have like a limit

490
00:31:20.390 --> 00:31:23.540
keyword, which is the same keyword that we're using an exchange API.

491
00:31:23.540 --> 00:31:23.840
So.

492
00:31:24.200 --> 00:31:25.110
So be careful there.

493
00:31:25.130 --> 00:31:31.340
This this probably won't work exactly like this on other database engines besides H2.

494
00:31:32.060 --> 00:31:32.550
All right.

495
00:31:32.570 --> 00:31:34.550
So anyway, let's go ahead and run that.

496
00:31:35.270 --> 00:31:37.700
Hey, looks like we got some data here.

497
00:31:37.880 --> 00:31:40.970
So notice our original 11 records.

498
00:31:40.970 --> 00:31:43.400
Here are have these very low ID numbers.

499
00:31:43.670 --> 00:31:50.720
But then the new records that we've loaded up have much bigger ID numbers and recall like this ID column

500
00:31:50.720 --> 00:31:54.470
here is auto generated for us, right when we insert data.

501
00:31:54.620 --> 00:32:02.780
And I recognize some of these names, Lizbeth, and there's a date of birth and some salary data there

502
00:32:02.780 --> 00:32:04.010
and some email.

503
00:32:04.010 --> 00:32:07.970
So hey, looks like all of that worked really well for us.

504
00:32:09.440 --> 00:32:14.210
So we have finally loaded up a significant amount of data into a real database.

505
00:32:14.630 --> 00:32:18.470
So in the upcoming lessons, we're going to play around with this data a little bit.

506
00:32:18.620 --> 00:32:23.870
We'll look at doing in the database some of the similar types of use cases that we did with the Stream's

507
00:32:23.870 --> 00:32:25.730
API back in that module.

508
00:32:25.760 --> 00:32:28.590
So I think we've got some cool things to look forward to doing here.

509
00:32:28.610 --> 00:32:30.080
So I'll see you in the next one.
