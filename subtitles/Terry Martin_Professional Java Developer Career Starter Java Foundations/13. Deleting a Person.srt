1
00:00:00,330 --> 00:00:00,760
All right.

2
00:00:00,780 --> 00:00:02,370
And now let's do another one.

3
00:00:02,490 --> 00:00:08,610
This time, we're going to implement the ability to delete a record from the database table.

4
00:00:09,030 --> 00:00:09,390
All right.

5
00:00:09,420 --> 00:00:12,240
And this should be approximately just as easy as the count.

6
00:00:12,240 --> 00:00:16,770
Maybe even easier, actually, because technically with this, we don't even really have to return anything.

7
00:00:17,220 --> 00:00:17,570
All right.

8
00:00:17,580 --> 00:00:20,220
So let's see here we'll create another test.

9
00:00:21,360 --> 00:00:25,020
Public void can delete.

10
00:00:26,340 --> 00:00:26,830
All right.

11
00:00:26,850 --> 00:00:35,910
And so to delete records from a test perspective, maybe what we'll do is we'll start off by inserting

12
00:00:35,910 --> 00:00:37,890
one record into the database.

13
00:00:38,280 --> 00:00:42,930
Then we will get a count of the total records in the database.

14
00:00:43,260 --> 00:00:50,340
Then we will use our delete to delete that one record that we just added and then we'll get another

15
00:00:50,340 --> 00:00:50,940
count.

16
00:00:51,180 --> 00:00:56,700
And then we will assert that the end count is the start count minus one.

17
00:00:56,790 --> 00:00:58,740
Something something along those lines, right?

18
00:00:58,980 --> 00:00:59,330
All right.

19
00:00:59,340 --> 00:01:04,680
So then let's just copy one of these lines again.

20
00:01:06,240 --> 00:01:06,600
Oops.

21
00:01:07,830 --> 00:01:08,220
All right.

22
00:01:08,220 --> 00:01:10,470
And then we'll bring that down.

23
00:01:14,420 --> 00:01:19,640
All right, so there's our new record into the database and then let's get account, and I guess we'll

24
00:01:19,640 --> 00:01:22,190
just use the count method that we have now.

25
00:01:22,670 --> 00:01:25,670
So we'll grab that and say start count.

26
00:01:28,460 --> 00:01:35,000
And so I think we may need to capture the output of this save so that we can get an idea, maybe we'll

27
00:01:35,000 --> 00:01:41,240
implement this delete method such that it takes the idea of a record and then it finds that record by

28
00:01:41,240 --> 00:01:42,380
that idea and deletes it.

29
00:01:42,410 --> 00:01:42,740
OK.

30
00:01:42,860 --> 00:01:47,390
There are a number of ways that we could implement that, but maybe we'll go with that approach for

31
00:01:47,390 --> 00:01:47,810
now.

32
00:01:47,840 --> 00:01:48,170
All right.

33
00:01:48,170 --> 00:01:50,360
So let's capture the output from this.

34
00:01:50,360 --> 00:01:53,990
So that's going to return a person and a saved person.

35
00:01:54,590 --> 00:01:55,100
There we go.

36
00:01:56,030 --> 00:01:56,870
All right.

37
00:01:57,590 --> 00:02:01,010
And so then we will call Repo Dot Delete.

38
00:02:01,820 --> 00:02:09,080
Now, I think the way we'll do this is we will just pass in the the person, the whole entire object.

39
00:02:09,440 --> 00:02:09,840
All right.

40
00:02:09,860 --> 00:02:11,140
And so let's go.

41
00:02:11,150 --> 00:02:17,570
Let the ABC create this delete skeleton for us, and we will let that return a void.

42
00:02:17,930 --> 00:02:21,770
We don't need it to return anything, and we'll just call this person.

43
00:02:22,010 --> 00:02:22,640
All right.

44
00:02:23,240 --> 00:02:25,280
Jump back over to the test.

45
00:02:25,610 --> 00:02:25,880
All right.

46
00:02:25,880 --> 00:02:27,140
So now that's happy.

47
00:02:27,530 --> 00:02:31,670
And then finally, let's get an end count, I suppose.

48
00:02:31,790 --> 00:02:33,530
Repo count.

49
00:02:34,010 --> 00:02:39,050
And so then we will assert that the end count?

50
00:02:40,360 --> 00:02:44,260
Is equal to the start count minus one.

51
00:02:45,100 --> 00:02:45,580
All right.

52
00:02:45,880 --> 00:02:46,960
Let's run that.

53
00:02:51,080 --> 00:02:52,520
All right, there's our failure.

54
00:02:54,650 --> 00:02:57,290
Yeah, so we expect that their team, but we got 14.

55
00:02:57,320 --> 00:02:57,750
OK.

56
00:02:58,640 --> 00:03:00,920
And now let's go make it work.

57
00:03:01,430 --> 00:03:03,710
So we're implementing delete now.

58
00:03:07,750 --> 00:03:15,910
Connection prepare statement, so this will be delete from people where.

59
00:03:17,300 --> 00:03:20,060
ID equals question mark.

60
00:03:20,330 --> 00:03:26,450
And let's surround that with our try catch.

61
00:03:27,620 --> 00:03:31,700
And then let's capture the output prepared statement.

62
00:03:34,270 --> 00:03:40,000
All right, now, we do have a parameter here now, which is going to be the ID of the person that we

63
00:03:40,000 --> 00:03:41,110
just passed in.

64
00:03:41,440 --> 00:03:45,700
So we will need to bind that piece that set long.

65
00:03:46,720 --> 00:03:51,340
And the first parameter is the index parameter index, and there's only one parameter here.

66
00:03:51,340 --> 00:03:55,120
So that will be an index of one right one.

67
00:03:55,690 --> 00:03:58,660
And then the value will be the ID of that person.

68
00:03:58,660 --> 00:04:00,570
Person die, get I.D..

69
00:04:01,590 --> 00:04:07,380
Like so and then we can execute this start execute update.

70
00:04:08,400 --> 00:04:14,550
Now that will return a result that we can capture affected records.

71
00:04:14,880 --> 00:04:16,110
Record count.

72
00:04:18,560 --> 00:04:25,490
And we could just print that out somewhere that's really more like for debugging purposes.

73
00:04:25,790 --> 00:04:27,500
But I think that's it right there.

74
00:04:27,650 --> 00:04:28,110
All right.

75
00:04:28,130 --> 00:04:34,400
So let's jump back over here to the tests and let's run it.

76
00:04:35,570 --> 00:04:36,710
See what we get this time.

77
00:04:37,830 --> 00:04:38,790
Hey, there you go.

78
00:04:39,870 --> 00:04:40,830
Looks like it's passing.

79
00:04:40,920 --> 00:04:43,400
And now let's go ahead and just run all the tests.

80
00:04:48,640 --> 00:04:53,380
And look, we don't looks like we don't have any regressions, everything's still working for us.

81
00:04:57,110 --> 00:05:02,270
Now, this one was so quick and easy, I feel inclined to make it a little more complicated.

82
00:05:03,710 --> 00:05:08,660
What if we wanted to delete multiple people at the same time?

83
00:05:09,080 --> 00:05:10,790
Well, I think we can do that too.

84
00:05:12,890 --> 00:05:16,220
Now, I think we're going to do it with a with an additional method, though.

85
00:05:16,790 --> 00:05:25,130
So one way that I could see to do that might be to have a method can delete multiple.

86
00:05:26,880 --> 00:05:27,840
People, maybe.

87
00:05:28,470 --> 00:05:36,640
And so let's say that we had both of these going to copy those, both come down here.

88
00:05:37,320 --> 00:05:38,220
Paste them.

89
00:05:38,230 --> 00:05:45,720
Okay, so we'd start off by inserting two different people into the database table, and I suppose we're

90
00:05:45,720 --> 00:05:48,150
going to want to capture their outputs here.

91
00:05:48,630 --> 00:05:56,760
So I'm giving myself two persons here on both of these lines by holding down on option or alt and shift

92
00:05:56,760 --> 00:05:58,620
while clicking on both of those.

93
00:05:58,890 --> 00:06:07,350
And then I can do person p one equals and then I'll come down here and just change that to a P two like

94
00:06:07,350 --> 00:06:07,680
that.

95
00:06:08,520 --> 00:06:08,790
All right.

96
00:06:08,790 --> 00:06:10,740
So now I've captured both of those people.

97
00:06:11,370 --> 00:06:17,880
And then let's pretend like I have another version and overloaded version of the delete method, one

98
00:06:17,880 --> 00:06:22,350
that takes P one and P two like that.

99
00:06:22,830 --> 00:06:23,220
All right.

100
00:06:23,580 --> 00:06:26,500
Now I can do this in a lot of different ways, really.

101
00:06:26,520 --> 00:06:29,610
But for right now, I'm inclined to just do it this way just to have some fun.

102
00:06:30,300 --> 00:06:34,620
So watch what I'm going to do here to implement this method.

103
00:06:34,620 --> 00:06:40,710
So I'm going to put my cursor there to the right of the closing parentheses and then do an option return.

104
00:06:41,040 --> 00:06:48,570
Now the idea is offering to modify the one and only delete method that we currently have by adding a

105
00:06:48,570 --> 00:06:51,570
second parameter or a first parameter.

106
00:06:51,600 --> 00:06:52,800
I don't want either of those.

107
00:06:52,800 --> 00:06:56,370
We're going to create a new additional delete method.

108
00:06:56,400 --> 00:06:56,850
OK.

109
00:06:57,000 --> 00:07:00,450
Create Method Delete in People repository now.

110
00:07:01,140 --> 00:07:04,350
So the void return type is fine.

111
00:07:04,350 --> 00:07:10,120
However, the input parameters I don't want what I'm thinking of doing here.

112
00:07:10,140 --> 00:07:11,850
Well, I don't want all of them rather.

113
00:07:11,850 --> 00:07:17,460
So I'm going to say yes to the data type of person, but I think I'm going to say no to everything else

114
00:07:17,460 --> 00:07:17,610
here.

115
00:07:17,610 --> 00:07:19,020
So I'm just going to start deleting.

116
00:07:19,020 --> 00:07:23,880
In fact, now what I'm thinking of doing here is actually using barracks.

117
00:07:24,180 --> 00:07:29,940
Do you remember we learned about VAR args there basically in a lot of ways, just a shorthand for passing

118
00:07:29,940 --> 00:07:31,030
in an array.

119
00:07:31,500 --> 00:07:32,520
So if you just put.

120
00:07:33,840 --> 00:07:37,350
Three ellipses and then a variable name.

121
00:07:38,670 --> 00:07:42,600
Like that that's basically equivalent to having.

122
00:07:43,710 --> 00:07:52,680
An array like that, OK, except that I don't have to create an array in the code that calls this delete

123
00:07:52,680 --> 00:07:53,110
method.

124
00:07:53,130 --> 00:07:53,520
OK.

125
00:07:53,640 --> 00:07:59,220
So it's actually makes it pretty easy for me to call this method and just pass in any arbitrary number

126
00:07:59,490 --> 00:08:01,390
of people objects.

127
00:08:01,500 --> 00:08:01,890
OK.

128
00:08:02,250 --> 00:08:04,770
But that's what this is basically equivalent to.

129
00:08:05,520 --> 00:08:05,970
All right.

130
00:08:07,020 --> 00:08:14,940
And now what I can do is something like four.

131
00:08:16,730 --> 00:08:20,930
Each person and people.

132
00:08:22,810 --> 00:08:29,860
So I'm using the enhanced for loop here to iterate over each of the potential people that I have in

133
00:08:29,860 --> 00:08:32,860
this space in this bar args, which is basically an array.

134
00:08:33,520 --> 00:08:42,100
And then here I can delegate down to the other delete method, really delete person just like that.

135
00:08:42,280 --> 00:08:42,760
OK.

136
00:08:43,450 --> 00:08:46,720
So I didn't even have to write any SQL code down here.

137
00:08:46,840 --> 00:08:51,910
Now, honestly, this isn't actually the way that I was going to go about doing this when I started,

138
00:08:51,910 --> 00:08:56,740
when I thought of this idea, but I realized this was one quick way that I could do it right.

139
00:08:57,190 --> 00:09:01,990
In fact, honestly, this is so easy that I think I am still going to complicate this a little more

140
00:09:01,990 --> 00:09:05,170
for you because because I actually want to show you another skill technique.

141
00:09:05,320 --> 00:09:08,920
In fact, OK, but this is one way that you could do it for sure, right?

142
00:09:09,160 --> 00:09:13,840
So you could just iterate over these and then just delegate down to this delete method here.

143
00:09:13,960 --> 00:09:14,890
That's one way you can do it.

144
00:09:15,070 --> 00:09:21,280
However, from a database perspective, there's a more efficient way to handle this same use case.

145
00:09:21,280 --> 00:09:27,280
And by efficient, I mean, with this approach, you'd be making separate and distinct updates to the

146
00:09:27,280 --> 00:09:31,000
database for each of the people that were passed in here.

147
00:09:31,030 --> 00:09:31,450
OK?

148
00:09:31,750 --> 00:09:36,580
There's a more efficient way to delete them all with one call to the database.

149
00:09:36,730 --> 00:09:38,500
So let me show you what that would look like.
