1
00:00:00,420 --> 00:00:07,500
All right, now, let's talk about what we need to do when we want to work with numbers that are not

2
00:00:07,530 --> 00:00:09,390
whole integer numbers.

3
00:00:09,780 --> 00:00:14,250
In other words, numbers with fractional parts or decimal points.

4
00:00:15,030 --> 00:00:21,810
So Java has a couple of primitive data types for handling what are called floating point numbers.

5
00:00:21,810 --> 00:00:25,890
That is, numbers that have a floating decimal point, right?

6
00:00:26,040 --> 00:00:32,940
So one point three, seven or eight point zero five nine two things like that and the two data types

7
00:00:32,940 --> 00:00:39,000
that we have for handling these kinds of numbers are float and double.

8
00:00:39,390 --> 00:00:44,910
And they're basically the same thing, except double is twice as wide as float.

9
00:00:45,120 --> 00:00:54,960
Float shares the same number of bits as an end or integer, which is 32 bits and double is twice that

10
00:00:54,960 --> 00:00:56,430
at 64 bits.

11
00:00:56,820 --> 00:01:06,090
However, unlike byte and short and and and long, float and double stored their values pretty differently,

12
00:01:06,090 --> 00:01:10,680
and that causes a few issues that we will look at shortly.

13
00:01:10,980 --> 00:01:18,150
So let's take a look at the basic format for how float and double stored their values.

14
00:01:18,300 --> 00:01:21,720
Now again, this isn't something you absolutely have to know.

15
00:01:21,750 --> 00:01:27,840
Most Java developers wouldn't know this, and by the way, what I'm about to show you isn't really even

16
00:01:27,840 --> 00:01:30,090
all that specific to Java.

17
00:01:30,300 --> 00:01:36,930
This is actually a standard from the Tripoli Engineering Group who came up with this standard, and

18
00:01:36,930 --> 00:01:44,850
I would reckon that all modern languages use pretty much this same approach when handling floating point

19
00:01:44,850 --> 00:01:45,390
numbers.

20
00:01:45,930 --> 00:01:46,920
So let's take a look.

21
00:01:46,980 --> 00:01:52,890
We'll use only the float double is virtually the same, except just twice as long for most of the parts.

22
00:01:53,250 --> 00:01:59,280
All right, so down here I have let me see if I can get this framed up a little better.

23
00:01:59,610 --> 00:02:05,160
I've got this number three point one four one five nine two that is PI the the Greek number PI.

24
00:02:05,250 --> 00:02:05,710
OK?

25
00:02:05,730 --> 00:02:09,360
And so here I've got 32 bits.

26
00:02:09,540 --> 00:02:10,050
OK.

27
00:02:10,140 --> 00:02:20,610
So the way that the float data type stores, its value is as follows the first bit, which you may consider

28
00:02:20,610 --> 00:02:29,010
to be the last bit, the the highest bit that at location thirty two on this chart, this bit indicates

29
00:02:29,010 --> 00:02:35,610
the sign of the number so that that part is the same as the other data types that we've looked at,

30
00:02:35,610 --> 00:02:43,560
where the the highest bit or the last bit, whatever indicates the sign, if it's assigned data type.

31
00:02:43,770 --> 00:02:45,450
So you only need one bit for that.

32
00:02:45,750 --> 00:02:52,140
Then the next eight bits, though, indicate essentially where the decimal places.

33
00:02:52,410 --> 00:02:54,030
That's how you can think of it, OK?

34
00:02:54,060 --> 00:02:56,340
And that's called the exponent.

35
00:02:56,490 --> 00:03:05,400
And then the next 23 bits are called the mantis and they hold the actual value.

36
00:03:05,790 --> 00:03:14,520
However, the way they hold the value is not at all like the way the non floating point numbers store

37
00:03:14,550 --> 00:03:15,330
their values.

38
00:03:15,540 --> 00:03:20,970
And that's what we'll take a little bit of a look at, because this can come back to haunt us a little

39
00:03:20,970 --> 00:03:23,670
bit later on some of our calculations.

40
00:03:24,060 --> 00:03:24,520
All right.

41
00:03:24,540 --> 00:03:32,040
So the way that float and double handle their values is a little bit different.

42
00:03:32,370 --> 00:03:40,590
What they do is they store fractional values in binary, and the way that would look is first, let

43
00:03:40,590 --> 00:03:42,060
me give a quick reminders.

44
00:03:42,480 --> 00:03:49,680
OK, so when we store fractional values in decimal, what we do is we have just as we have the ones

45
00:03:49,680 --> 00:03:52,410
and tens and hundreds place four whole numbers.

46
00:03:52,410 --> 00:03:57,960
We have one over 10, one over 100, one over 1000.

47
00:03:58,230 --> 00:04:01,590
You know, places like that for four decimal, right?

48
00:04:02,520 --> 00:04:05,280
So binary works pretty much the same way.

49
00:04:05,730 --> 00:04:15,420
What, what, what we do there is instead of having two and four and eight, 16, et cetera, we have

50
00:04:15,660 --> 00:04:23,300
one over two one over four, one over eight, one over 16 cetera.

51
00:04:23,460 --> 00:04:23,940
OK.

52
00:04:25,310 --> 00:04:31,700
So it's actually kind of it's the same pattern as what we do with decimal numbers, except instead of

53
00:04:31,700 --> 00:04:33,680
base 10, it's now based two.

54
00:04:34,070 --> 00:04:35,600
OK, so powers of two?

55
00:04:36,260 --> 00:04:36,660
All right.

56
00:04:36,980 --> 00:04:42,950
Let's look at how we could encode a fraction or a decimal number in binary.

57
00:04:43,280 --> 00:04:43,520
All right.

58
00:04:43,520 --> 00:04:46,000
So let's first do one easy one.

59
00:04:46,010 --> 00:04:49,370
So let's say we wanted to encode point five.

60
00:04:49,490 --> 00:04:50,810
That should be easy, right?

61
00:04:51,230 --> 00:04:54,440
I think everybody knows point five is the same as one half.

62
00:04:54,620 --> 00:05:01,310
So what you would end up with is if we imagine, here's a here's a decimal point right there.

63
00:05:01,650 --> 00:05:04,850
OK, then you'd have one.

64
00:05:05,450 --> 00:05:05,900
OK.

65
00:05:06,080 --> 00:05:08,780
So that would be point one in binary, OK?

66
00:05:08,990 --> 00:05:13,100
Or, you know, I'll write it somewhere else where it can be seen a little more easily.

67
00:05:13,310 --> 00:05:19,280
Point one point one is the binary equivalent of 0.5.

68
00:05:20,060 --> 00:05:20,450
OK.

69
00:05:20,990 --> 00:05:26,990
So let's say we wanted to do 0.7 seven five.

70
00:05:27,970 --> 00:05:29,500
In binary.

71
00:05:29,800 --> 00:05:37,060
OK, well, so you'll want to find the largest fraction that fits into your final number, which is

72
00:05:37,060 --> 00:05:41,060
0.75 five, so we can start with with with one half or 0.5.

73
00:05:41,080 --> 00:05:41,410
Right.

74
00:05:41,620 --> 00:05:43,460
We know that we're going to need that.

75
00:05:43,480 --> 00:05:48,820
And then one over four is is the same as point to five, right?

76
00:05:48,830 --> 00:05:52,780
So five plus point two five, that would be point seventy five.

77
00:05:52,780 --> 00:05:54,190
So another one here.

78
00:05:55,090 --> 00:05:55,540
OK.

79
00:05:55,870 --> 00:05:59,780
So point seven five in binary is point one.

80
00:05:59,920 --> 00:06:01,930
One, just like that.

81
00:06:02,380 --> 00:06:02,650
All right.

82
00:06:02,660 --> 00:06:05,470
So now let's do something a little less trivial.

83
00:06:06,040 --> 00:06:08,110
So let's see here PI.

84
00:06:08,140 --> 00:06:08,920
The number PI.

85
00:06:08,920 --> 00:06:14,400
The Greek number PI three point one four one five nine two.

86
00:06:14,410 --> 00:06:16,240
I think it's correct.

87
00:06:16,750 --> 00:06:17,120
OK.

88
00:06:17,140 --> 00:06:18,190
Yes, that is correct.

89
00:06:18,220 --> 00:06:20,680
Three point one four one five nine two.

90
00:06:21,280 --> 00:06:21,790
All right.

91
00:06:21,790 --> 00:06:27,890
So let's forget about the three for four while here, and let's just concentrate on the decimal part.

92
00:06:27,940 --> 00:06:30,550
Point one four one five nine two.

93
00:06:31,360 --> 00:06:31,780
All right.

94
00:06:31,790 --> 00:06:34,900
So how can that be encoded in binary?

95
00:06:34,930 --> 00:06:36,640
Let's let's clear this out.

96
00:06:37,030 --> 00:06:37,480
All right.

97
00:06:37,690 --> 00:06:44,380
So we need to find the largest fraction that would fit in point one four one five nine two.

98
00:06:44,800 --> 00:06:47,920
And I can tell you now we're going to need a few more.

99
00:06:48,280 --> 00:06:49,740
We're going to need a few more bits.

100
00:06:49,750 --> 00:06:51,550
So I'm going to add a few more here.

101
00:06:52,120 --> 00:06:52,840
All right.

102
00:06:53,140 --> 00:06:56,960
So we're trying to find something that fits in point one four one five nine two.

103
00:06:56,980 --> 00:06:57,910
So let's see.

104
00:06:57,910 --> 00:06:59,140
That would be 0.5.

105
00:06:59,140 --> 00:07:01,480
That would be point to five.

106
00:07:01,570 --> 00:07:03,520
Let's try one over eight.

107
00:07:04,330 --> 00:07:07,180
So we'll just do some math right here.

108
00:07:07,270 --> 00:07:10,780
One divided by eight is point one to five.

109
00:07:10,810 --> 00:07:12,820
OK, that looks like that works.

110
00:07:12,970 --> 00:07:15,910
That fits, but it's not close enough.

111
00:07:15,910 --> 00:07:17,980
So we need to add some more here.

112
00:07:18,160 --> 00:07:23,980
OK, so we'd have a so far it looks like we'd have a zero and a zero and a one here because this fits

113
00:07:24,100 --> 00:07:24,460
right.

114
00:07:24,880 --> 00:07:27,040
In fact, here we'll just put a one right there.

115
00:07:28,400 --> 00:07:28,850
OK.

116
00:07:29,000 --> 00:07:29,870
Let's see.

117
00:07:29,900 --> 00:07:41,990
How about point one to five plus one 16th, so let's see what one divided by 16 is 0.06 to five.

118
00:07:42,050 --> 00:07:43,790
Let's add that up.

119
00:07:45,150 --> 00:07:46,590
And see what we end up with.

120
00:07:47,690 --> 00:07:50,390
Some of all of that.

121
00:07:51,600 --> 00:07:57,090
OK, so that's point one eight that is too big, so we can't have that value there.

122
00:07:57,810 --> 00:07:58,230
All right.

123
00:07:58,500 --> 00:08:02,550
Let's try one over 32.

124
00:08:04,150 --> 00:08:06,370
Point one five still too big, right?

125
00:08:06,400 --> 00:08:12,270
We're comparing this number to this number here and we can't exceed that number.

126
00:08:12,280 --> 00:08:15,340
So one over 32 is too big.

127
00:08:15,340 --> 00:08:17,020
So clear that out.

128
00:08:17,560 --> 00:08:18,220
Let's try.

129
00:08:19,370 --> 00:08:21,170
One over 64.

130
00:08:23,620 --> 00:08:28,000
What that gives us, point one four zero six, two five, that's looking pretty good.

131
00:08:28,300 --> 00:08:39,460
So looks like we we will have zero zero one zero zero one so far.

132
00:08:40,510 --> 00:08:42,640
OK, now can we get closer?

133
00:08:42,670 --> 00:08:44,590
Yes, I know we can get closer.

134
00:08:44,980 --> 00:08:50,290
So let's see what happens when we do one over one to eight.

135
00:08:50,770 --> 00:08:51,080
All right.

136
00:08:51,100 --> 00:08:58,090
Now that's too big because now we just went to point one for eight and we need to be one for one.

137
00:08:58,450 --> 00:08:59,230
All right, so.

138
00:09:00,270 --> 00:09:01,260
Can't do that.

139
00:09:02,380 --> 00:09:03,490
Put a zero there.

140
00:09:04,090 --> 00:09:05,020
Come over here.

141
00:09:05,410 --> 00:09:09,580
Let's try one over 256.

142
00:09:10,540 --> 00:09:11,710
Two big still.

143
00:09:13,120 --> 00:09:14,800
So zero here.

144
00:09:15,520 --> 00:09:16,450
Nothing here.

145
00:09:16,930 --> 00:09:19,130
How about one over five.

146
00:09:19,350 --> 00:09:19,930
12.

147
00:09:20,410 --> 00:09:21,190
Too big.

148
00:09:22,030 --> 00:09:23,290
So zero here.

149
00:09:23,830 --> 00:09:24,790
Nothing here.

150
00:09:25,090 --> 00:09:26,650
How about one?

151
00:09:26,650 --> 00:09:31,660
Over one to four point one four one six.

152
00:09:32,470 --> 00:09:35,320
OK, now this is an interesting one.

153
00:09:35,380 --> 00:09:43,360
If we want it to stop at this number this mini bit, maybe this could be considered an OK approximation.

154
00:09:43,480 --> 00:09:45,430
Point one four one six.

155
00:09:45,880 --> 00:09:47,620
So I'm going to go and put a one here.

156
00:09:48,250 --> 00:09:50,740
Let's just pretend like this is where we're going to stop.

157
00:09:50,860 --> 00:09:51,310
OK.

158
00:09:51,970 --> 00:09:54,310
So point one four one six.

159
00:09:54,310 --> 00:09:59,440
And in fact, that would feel like we just rounded up point one for one five.

160
00:09:59,440 --> 00:10:00,460
The nine, though.

161
00:10:00,460 --> 00:10:05,080
So, you know, you could imagine the nine caused us to round up to one four one six.

162
00:10:05,440 --> 00:10:07,060
And you're, I don't know, kind of good.

163
00:10:07,060 --> 00:10:07,420
Maybe.

164
00:10:07,630 --> 00:10:08,050
All right.

165
00:10:08,080 --> 00:10:16,510
So this illustrates a an important point that I want to make about representing fractions in binary.

166
00:10:16,510 --> 00:10:25,600
And that point is for fractions whose decimal equivalent is never ending like PI, or whose decimal

167
00:10:25,600 --> 00:10:34,300
equivalent is so long that it would exceed all of the bits that you were willing to allocate in your

168
00:10:34,300 --> 00:10:34,930
computer.

169
00:10:35,560 --> 00:10:44,320
The best you can ever do when trying to represent such numbers in binary is to approximate those numbers.

170
00:10:44,350 --> 00:10:44,860
OK.

171
00:10:45,220 --> 00:10:52,280
And that's usually OK for scientific and engineering programming.

172
00:10:52,300 --> 00:11:01,090
But when it comes to handling money where calculations need to be fairly precise, it won't do at all.

173
00:11:01,660 --> 00:11:09,400
So we'll talk more about how we can handle money and overcome some of the issues with handling fractional

174
00:11:09,400 --> 00:11:12,310
values with Java number types.

175
00:11:12,940 --> 00:11:22,120
But for now, let's jump back over to our chart where we're showing the layout of a float or a double

176
00:11:22,120 --> 00:11:25,240
and see how the rest of this gets put together.

177
00:11:25,510 --> 00:11:33,450
So getting back to how floats and bubbles are represented in the computer, we now have a binary bit

178
00:11:33,490 --> 00:11:40,450
pattern that is an approximation of point one four one five nine two.

179
00:11:41,170 --> 00:11:49,030
Obviously, I chose to round this up because if I had chosen to keep going, what we would have discovered

180
00:11:49,240 --> 00:11:57,480
by the nature of the number PI is that we could never get exactly to the full value of PI.

181
00:11:57,490 --> 00:12:02,110
Anything we would do was always going to be an approximation.

182
00:12:02,650 --> 00:12:10,000
So at any rate, when building a float or double number, this bit pattern that is an approximation

183
00:12:10,000 --> 00:12:20,470
of the fraction or decimal number would then be placed in this light blue area of the 32 bits allocated

184
00:12:20,470 --> 00:12:21,730
to a float.

185
00:12:22,120 --> 00:12:24,130
And then for double, it'll be more.

186
00:12:24,160 --> 00:12:25,120
It'll be a lot more.

187
00:12:25,450 --> 00:12:30,670
But this bit pattern that we had over there would be stored here.

188
00:12:31,000 --> 00:12:35,680
So with float, you are limited to these 23 bits.

189
00:12:35,710 --> 00:12:36,170
OK.

190
00:12:36,190 --> 00:12:44,050
And so honestly, there are a lot of fractional numbers that cannot adequately be represented with just

191
00:12:44,050 --> 00:12:45,400
these 23 bits.

192
00:12:45,700 --> 00:12:53,920
And therefore, the computer often ends up having to approximate and round off in order to represent

193
00:12:53,920 --> 00:12:56,950
those numbers within the 23 bits allocated.

194
00:12:57,130 --> 00:13:02,260
Now I am glossing over a few things that I'll mention very briefly, but I'm not going to go into too

195
00:13:02,260 --> 00:13:03,730
much more detail about them.

196
00:13:04,000 --> 00:13:05,620
So a couple of things I want to mention.

197
00:13:05,650 --> 00:13:14,140
So when the computer represents a number like three point one four one five nine two in float or double

198
00:13:14,470 --> 00:13:16,900
the steps that it will generally go through, ah.

199
00:13:16,930 --> 00:13:21,370
First, it will not try to store three point one four directly.

200
00:13:21,520 --> 00:13:30,250
Instead, it will try to get this number to a format that is more compatible with the way that it internally

201
00:13:30,250 --> 00:13:30,730
stores things.

202
00:13:30,730 --> 00:13:33,320
So what it'll do is it'll take this number three point one four.

203
00:13:33,700 --> 00:13:35,890
It'll determine is that bigger than two?

204
00:13:35,890 --> 00:13:38,020
Basically, in this case, it is.

205
00:13:38,020 --> 00:13:45,760
So then it will divide this number by two and it will keep dividing by two until the number is less

206
00:13:45,760 --> 00:13:46,420
than two.

207
00:13:46,540 --> 00:13:49,210
So in this case, it would only have to do it one time.

208
00:13:49,240 --> 00:13:49,690
OK.

209
00:13:49,720 --> 00:13:55,090
And it will also keep track of the number of times it has to do that division by two.

210
00:13:55,660 --> 00:14:01,120
That number of times that it had to divide by two will then be added to.

211
00:14:01,180 --> 00:14:05,810
The number 127 and that result.

212
00:14:05,830 --> 00:14:13,180
So in this case, 128, because it would only have to divide once, will be encoded here in the exponent

213
00:14:13,180 --> 00:14:13,810
area.

214
00:14:14,020 --> 00:14:14,530
OK.

215
00:14:14,620 --> 00:14:19,870
And so this division by two is equivalent to moving the decimal place.

216
00:14:20,500 --> 00:14:27,040
So once the number has been divided enough times to get it less than two, then it can be encoded,

217
00:14:27,340 --> 00:14:30,280
as we did in this exercise over here.

218
00:14:30,520 --> 00:14:30,970
OK.

219
00:14:31,360 --> 00:14:35,410
And by the way, I mean, obviously the computer is not going to go through the convoluted approach

220
00:14:35,410 --> 00:14:39,310
to determining the binary pattern for a fraction, as we did.

221
00:14:39,520 --> 00:14:46,060
I did that very explicitly so that you could really follow the the the logic of it.

222
00:14:46,150 --> 00:14:52,120
There are mathematical means of doing that, though, where you essentially just keep multiplying by

223
00:14:52,120 --> 00:14:57,650
two and then cutting off the whole integer part of the number if and when it exists.

224
00:14:57,700 --> 00:14:58,840
So I skipped over that.

225
00:14:59,410 --> 00:15:07,660
But that's the basic gist of how floating point numbers are stored in memory of the computer.

226
00:15:07,960 --> 00:15:11,690
And like I said earlier, this is actually a standard that goes beyond Java.

227
00:15:11,710 --> 00:15:20,830
So as far as I know, all computers and probably all modern languages operate in the exact same way

228
00:15:20,830 --> 00:15:24,490
or pretty much the same way when it comes to floats and doubles.

229
00:15:25,450 --> 00:15:36,100
So now let's get back into the ADC and see some examples of how these approximations can affect our

230
00:15:36,100 --> 00:15:37,150
calculations.

231
00:15:39,050 --> 00:15:39,450
All right.

232
00:15:39,470 --> 00:15:41,990
So I will create a double.

233
00:15:43,390 --> 00:15:44,650
My double.

234
00:15:45,040 --> 00:15:49,750
Equals three point one four one five nine two.

235
00:15:50,350 --> 00:15:53,020
OK, so I've just created a double.

236
00:15:54,470 --> 00:16:03,140
Now, if I create a float, my float equals three point one four one five nine two.

237
00:16:04,230 --> 00:16:06,780
Now, look at this, I'm getting an error here.

238
00:16:07,930 --> 00:16:14,440
And the error that I'm getting is required tape is float, but I provided a double.

239
00:16:14,890 --> 00:16:23,020
Now what's happening here is that Java and the ADC working with Java assumes that this number here that

240
00:16:23,020 --> 00:16:25,600
I just typed is a double by default.

241
00:16:25,810 --> 00:16:31,870
If I don't want it to assume that, I need to give it an indication that no, I mean float here, and

242
00:16:31,870 --> 00:16:36,850
the way I can do that is to put my cursor at the end of this number and put an F..

243
00:16:37,940 --> 00:16:40,070
And now the squiggly lines go away.

244
00:16:40,400 --> 00:16:48,710
So when you want to create a float number like this, you need to put an f behind it.

245
00:16:48,870 --> 00:16:52,940
Now you can do a capital or lowercase F. It doesn't matter.

246
00:16:53,090 --> 00:16:55,130
So it accepts that as well.

247
00:16:55,550 --> 00:16:55,970
OK.

248
00:16:56,630 --> 00:16:59,850
But you have to indicate an f behind your floating numbers.

249
00:16:59,870 --> 00:17:04,160
Otherwise, Java assumes that you wanted a double by default.

250
00:17:10,370 --> 00:17:18,350
Let's create a couple of numbers, will create one that is two point one five and then another number

251
00:17:18,350 --> 00:17:20,810
that is one point one zero.

252
00:17:21,140 --> 00:17:27,920
And then let's just print out the difference between those two number one minus number two.

253
00:17:28,520 --> 00:17:29,240
All right.

254
00:17:30,350 --> 00:17:33,180
So that should be one point zero five.

255
00:17:33,200 --> 00:17:33,590
Right?

256
00:17:34,130 --> 00:17:35,870
Let's run this and see what we get.

257
00:17:37,060 --> 00:17:38,230
Ooh, look at that.

258
00:17:38,650 --> 00:17:44,860
So we were supposed to get one point zero five, but we actually get one point zero four nine nine nine

259
00:17:44,860 --> 00:17:45,850
nine, et cetera.

260
00:17:45,970 --> 00:17:47,860
So why are we getting that?

261
00:17:47,890 --> 00:17:55,360
It has everything to do with the fact that these decimal values have to be approximated when being stored

262
00:17:55,360 --> 00:17:59,620
in binary with the number of bits that we have available to us.

263
00:17:59,770 --> 00:18:05,320
And in fact, let's see what happens if we change this double, which gives us more opportunity for

264
00:18:05,320 --> 00:18:06,880
more precision, by the way.

265
00:18:07,180 --> 00:18:14,050
Let's see what happens if we change this double to a float, which has less precision now here because

266
00:18:14,050 --> 00:18:15,010
we're switching to float.

267
00:18:15,250 --> 00:18:20,830
We have to specify that these literals two point one five and one point one zero are actually of type

268
00:18:20,830 --> 00:18:21,400
float.

269
00:18:21,730 --> 00:18:22,840
Otherwise, John.
