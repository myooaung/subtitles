1
00:00:00,120 --> 00:00:04,470
OK, so now I want to show you one last way to format numbers.

2
00:00:04,860 --> 00:00:06,750
I'm not trying to overwhelm you.

3
00:00:06,750 --> 00:00:12,270
It's just that there are a lot of different scenarios where one particular approach might be better

4
00:00:12,270 --> 00:00:12,960
than another.

5
00:00:13,170 --> 00:00:19,080
So far, though, out of what we have worked with and done, I would say that still, you should probably

6
00:00:19,080 --> 00:00:22,010
prefer to use just the no format.

7
00:00:22,020 --> 00:00:27,780
Does it get currency instance or get percent instance or whatever, at least for formatting?

8
00:00:27,960 --> 00:00:30,540
You know, money and percentages.

9
00:00:31,170 --> 00:00:31,440
All right.

10
00:00:31,440 --> 00:00:34,290
So let's look at one more way to do this.

11
00:00:34,980 --> 00:00:40,110
So the other thing we can do is instead of using the print line method.

12
00:00:41,330 --> 00:00:48,320
We could use the print shops print f method of system died out.

13
00:00:48,740 --> 00:00:53,600
Now this method and we have touched this a little bit before, I don't know if you remember it.

14
00:00:54,110 --> 00:00:55,940
That stands for print format.

15
00:00:56,300 --> 00:01:03,630
And so this method can take a format string sort of along the lines of this, but it's not the same.

16
00:01:03,650 --> 00:01:10,250
It's not the same format patterns at all, but kind of accomplishes similar things so it can take a

17
00:01:10,250 --> 00:01:13,940
format string plus whatever it is that you're trying to format.

18
00:01:14,030 --> 00:01:17,960
So the way that this can work, let's start with something simple here.

19
00:01:18,170 --> 00:01:24,110
So let's first just print out the raw value that we are getting back from the big decimal.

20
00:01:24,530 --> 00:01:33,050
And so we can tell it that we want to expect to format a decimal number so we can do a percent.

21
00:01:33,050 --> 00:01:37,580
That's kind of like saying, here comes a format string that we're about to tell you or a pattern that

22
00:01:37,580 --> 00:01:38,840
we're about to tell you about.

23
00:01:39,620 --> 00:01:48,280
And then we need to give it a character that tells it to expect a floating point number, a number with

24
00:01:48,290 --> 00:01:49,220
a decimal in it.

25
00:01:49,460 --> 00:01:52,400
And the symbol for that is an F..

26
00:01:52,700 --> 00:01:53,180
OK.

27
00:01:53,210 --> 00:01:59,960
And then because we're using the print f method instead of the print line method, we if we want this

28
00:01:59,960 --> 00:02:04,970
to print something and then go down to the next line, which is what the print line method automatically

29
00:02:04,970 --> 00:02:08,870
does, we have to explicitly tell the print f method to do that.

30
00:02:09,290 --> 00:02:10,850
And we do so now.

31
00:02:10,850 --> 00:02:12,530
You've seen me in the past, actually here.

32
00:02:12,530 --> 00:02:13,970
Let me first close this quote.

33
00:02:14,150 --> 00:02:15,470
So you've seen me in the past.

34
00:02:15,470 --> 00:02:19,520
Do this a backslash in for a new line character.

35
00:02:19,520 --> 00:02:23,720
So that's saying, you know, inject a new line character to go down to the new line.

36
00:02:23,810 --> 00:02:31,490
However, actually the formatting method such as print, death and its related methods actually recommend

37
00:02:31,490 --> 00:02:40,160
using percent in to do the same thing, except with the percent in its smart enough to know how to handle

38
00:02:40,160 --> 00:02:43,430
going to a new line across different platforms.

39
00:02:43,460 --> 00:02:43,830
All right.

40
00:02:43,850 --> 00:02:51,500
And then we put a comma after the closing quotation mark there, and then we pass in the object that

41
00:02:51,500 --> 00:02:57,950
we are trying to format, which in this case is the balance variable right here, the one that we're

42
00:02:57,950 --> 00:02:59,180
using here as well.

43
00:02:59,660 --> 00:03:00,010
All right.

44
00:03:00,020 --> 00:03:02,330
So now we've got that balance variable there.

45
00:03:03,310 --> 00:03:10,630
So we're saying format this variable as a floating point number and then put a new line after it.

46
00:03:11,050 --> 00:03:12,100
That's what this is saying.

47
00:03:12,130 --> 00:03:17,080
Now so far, we're not doing any special formatting of any kind, though, with commas and all of that.

48
00:03:17,320 --> 00:03:19,720
So let's just start off by seeing what this does.

49
00:03:21,580 --> 00:03:24,130
OK, so that just prints out the whole entire thing.

50
00:03:24,670 --> 00:03:25,130
All right.

51
00:03:25,420 --> 00:03:28,930
So now let's get a little fancier with it.

52
00:03:29,560 --> 00:03:36,040
So one of the first things we probably will want to do is to is to specify the level of precision or

53
00:03:36,040 --> 00:03:38,740
the number of decimal places that this goes.

54
00:03:38,890 --> 00:03:41,290
And we probably want that to just go to two, right?

55
00:03:41,320 --> 00:03:43,360
As the other examples earlier have done.

56
00:03:43,570 --> 00:03:49,720
So to do that will put our cursor right in front of the F here and after.

57
00:03:49,750 --> 00:03:56,860
So between the percent sign in the f there, and we can use some character codes basically to specify

58
00:03:56,860 --> 00:03:59,770
that level of precision that we want.

59
00:04:00,310 --> 00:04:09,660
And the way we can do this is with a period and then to to say I want to decimal places there.

60
00:04:09,730 --> 00:04:11,350
All right, so let's see what this does.

61
00:04:11,800 --> 00:04:12,370
There you go.

62
00:04:12,850 --> 00:04:19,230
So, so now we've got the two decimal places, so any number that you put after that period will we'll

63
00:04:19,300 --> 00:04:20,020
we'll do that.

64
00:04:20,650 --> 00:04:25,930
And let's also get that the prefix there of the dollar sign now to do that.

65
00:04:26,050 --> 00:04:26,780
That's easy.

66
00:04:26,800 --> 00:04:29,320
We can just put it right in front of the percent sign.

67
00:04:29,350 --> 00:04:32,350
So in other words, this dollar sign will be taken literally.

68
00:04:32,920 --> 00:04:35,620
I would not say that it's really part of the format string.

69
00:04:35,620 --> 00:04:41,110
The format string is kind of everything to the right of that percent sign there, but the dollar sign

70
00:04:41,110 --> 00:04:47,170
going in front of it just says literally print a dollar sign and then whatever this format string tells

71
00:04:47,170 --> 00:04:47,650
you to do.

72
00:04:47,680 --> 00:04:47,970
Right.

73
00:04:47,980 --> 00:04:51,150
So if we run this again, here we go.

74
00:04:51,160 --> 00:04:52,450
Now we've got the dollar sign.

75
00:04:52,780 --> 00:04:56,950
Now let's get the grouping of commas in here, though.

76
00:04:57,250 --> 00:05:04,480
Now to do that, if we go to the right of this percent sign and simply put a comma, just like that,

77
00:05:04,720 --> 00:05:05,820
that's a flag.

78
00:05:05,840 --> 00:05:07,270
And we've looked at flags before.

79
00:05:07,270 --> 00:05:11,680
They're usually, you know, just kind of like one little thing that you can kind of check on or off.

80
00:05:11,800 --> 00:05:16,600
So here we're kind of checking on the Karma flag to say, Yeah, we want grouping now.

81
00:05:16,750 --> 00:05:21,580
We're unable to specify how many digits we want grouped at a time.

82
00:05:21,880 --> 00:05:28,030
So with the format string here, it's just going to assume that we want it the way that it is done for

83
00:05:28,030 --> 00:05:28,900
North America.

84
00:05:29,200 --> 00:05:30,820
So let's run this and see.

85
00:05:31,600 --> 00:05:32,200
There we go.

86
00:05:32,740 --> 00:05:33,250
Awesome.

87
00:05:33,490 --> 00:05:37,150
So now we're back to what we had with the other approaches, right?

88
00:05:37,180 --> 00:05:39,580
This one, I would say there was less readable.

89
00:05:39,580 --> 00:05:45,100
It's more cryptic than what you get from the no format or decimal format.

90
00:05:45,130 --> 00:05:51,520
Now we can tell it how to handle negative numbers, though, and that is done with another flag.

91
00:05:51,940 --> 00:05:58,710
And all we need is to just specify one character for that flag, and it is an opening parentheses.

92
00:05:58,720 --> 00:05:59,710
So just like that.

93
00:05:59,800 --> 00:06:04,300
Now, of course, to see this work, we need to negate this value.

94
00:06:04,720 --> 00:06:08,710
So we'll do that here by calling the negate method again.

95
00:06:09,010 --> 00:06:11,860
And so now if we run this, there we go.

96
00:06:12,640 --> 00:06:20,770
So now we've got the parentheses notice now because this is a flag and not like a full a full on formatting.

97
00:06:20,950 --> 00:06:26,710
We didn't have to like wrap anything in an opening and closing parentheses.

98
00:06:26,710 --> 00:06:33,580
We only specified just an opening parentheses here because this is just a flag by including this.

99
00:06:33,700 --> 00:06:40,570
We're simply telling the formatter turn on the ability to wrap negative numbers in parentheses.

100
00:06:40,870 --> 00:06:44,890
We're not, you know, explicitly telling it where to put the parentheses.

101
00:06:45,280 --> 00:06:51,370
Kind of, as we are here, here, we're actually telling it, put an opening parentheses to the left

102
00:06:51,610 --> 00:06:55,090
of the number and put another closing parentheses to the right.

103
00:06:55,420 --> 00:06:58,590
Here we're just saying do parentheses OK?

104
00:06:58,630 --> 00:07:01,270
And so we only have to specify the one because it's a flag.

105
00:07:01,270 --> 00:07:06,130
It's just kind of like you're flipping the switch on to say, Yeah, I want parentheses used for negative

106
00:07:06,130 --> 00:07:06,670
numbers.

107
00:07:06,940 --> 00:07:07,330
All right.

108
00:07:07,570 --> 00:07:13,330
And just to make sure let's turn off the negation there, but leave the formatting there and just make

109
00:07:13,330 --> 00:07:19,510
sure that that still prints the way that we would expect for a positive value without any parentheses.

110
00:07:19,820 --> 00:07:20,740
Yeah, there we go.

111
00:07:20,860 --> 00:07:21,460
Very good.

112
00:07:22,270 --> 00:07:30,130
So I'm definitely not going to try to show an exhaustive list of every single format string that you

113
00:07:30,130 --> 00:07:32,980
could supply because there's a lot we will get into.

114
00:07:32,980 --> 00:07:37,840
More of this, though, when we learn about dates and how to handle date and time.

115
00:07:37,840 --> 00:07:43,180
In that chapter, we'll revisit the print off because there's a lot more that you can do when it comes

116
00:07:43,180 --> 00:07:44,500
to date and time as well.

117
00:07:44,620 --> 00:07:50,830
Now, if you wanted to know more about you know what your options are here, you can always put your

118
00:07:50,830 --> 00:07:56,740
cursor on the print f method and then do an F1 to bring up the Java Dock for it.

119
00:07:56,980 --> 00:08:03,610
And then in this Java Dock article right here, it says parameters format, a format string as described

120
00:08:03,610 --> 00:08:05,350
in format string syntax.

121
00:08:05,350 --> 00:08:08,140
So this is actually a link and if you click on it.

122
00:08:09,430 --> 00:08:18,340
That takes us to the Java doc article that tells us everything we could ever probably want to know about

123
00:08:18,460 --> 00:08:24,940
how to use the format strings here because it gives us a nice table with all the special characters

124
00:08:24,940 --> 00:08:26,620
that we can use here.

125
00:08:27,310 --> 00:08:30,100
OK, so you don't need to memorize all of this.

126
00:08:30,130 --> 00:08:36,670
You can just know that you can use the print f state or print f method and then look at the Java doc

127
00:08:36,670 --> 00:08:39,640
by going to f one and then reading the Java doc.

128
00:08:39,640 --> 00:08:42,510
If you ever need to know what are all the things you can do here?

129
00:08:42,520 --> 00:08:46,060
Look how long this article is, by the way, it's it's quite massive.

130
00:08:46,270 --> 00:08:47,650
There's a lot that you can do.

131
00:08:47,710 --> 00:08:50,980
So clearly, I've only scratched the surface of what you can do with this.

132
00:08:51,280 --> 00:08:55,780
Let me also point out a couple of other things, though, so I'm showing you that we can use this print

133
00:08:55,780 --> 00:08:57,550
f method now this print f method.

134
00:08:57,670 --> 00:09:02,560
There are actually two methods on this out object here that do the exact same thing, and in fact,

135
00:09:02,560 --> 00:09:03,610
one uses the other.

136
00:09:03,790 --> 00:09:08,170
So you could use this print f method or you could also do format.

137
00:09:08,920 --> 00:09:10,450
Same thing, in fact.

138
00:09:10,840 --> 00:09:14,880
The print f method uses format, and I'll prove that to you real quick.

139
00:09:14,890 --> 00:09:20,980
So if we jump into the actual code written by the creators of Java, you'll see here that the print

140
00:09:21,010 --> 00:09:25,720
f method actually just calls the format method itself.

141
00:09:25,750 --> 00:09:26,150
OK.

142
00:09:26,170 --> 00:09:28,450
So they are the same thing.

143
00:09:28,480 --> 00:09:33,340
I think the print f method is here just for familiarity because the print f method.

144
00:09:33,590 --> 00:09:40,840
And let me go back to the print f method and this general format here more or less is borrowed or heavily

145
00:09:40,840 --> 00:09:47,380
inspired from a print f function that exists in the language of C.

146
00:09:47,500 --> 00:09:53,260
C is a really old programming language that's still heavily utilized, especially for a lot of system

147
00:09:53,260 --> 00:09:54,430
programming and things.

148
00:09:54,640 --> 00:10:02,170
And so I think they just wanted to have a method with the same name as what inspired this in the first

149
00:10:02,170 --> 00:10:03,390
place print death.

150
00:10:03,400 --> 00:10:09,670
And that way, C programmers coming to Java could feel pretty comfortable and at home more or less with

151
00:10:09,670 --> 00:10:10,540
how to do things here.

152
00:10:10,690 --> 00:10:15,310
Now I want to show you one more thing you won't have to learn any more of these these format things

153
00:10:15,310 --> 00:10:16,810
here, but there's one more.

154
00:10:16,810 --> 00:10:21,130
Well, there's actually a couple more ways I probably won't show you all of them, but there's a couple

155
00:10:21,160 --> 00:10:23,680
more ways that you could do this same thing here.

156
00:10:24,010 --> 00:10:30,340
You also could create a string and capture this format with the string.

157
00:10:30,430 --> 00:10:39,370
So the string class itself has a format method on it, and it's the same format that I just showed you

158
00:10:39,370 --> 00:10:39,760
here.

159
00:10:39,790 --> 00:10:44,200
So if we were to just use this format method here, it's the same thing.

160
00:10:44,200 --> 00:10:51,040
In fact, it is so much the same thing that I could actually just grab all of that copy it.

161
00:10:52,450 --> 00:10:55,600
Go right here after the word string and haste.

162
00:10:55,780 --> 00:10:56,620
And look at that.

163
00:10:56,950 --> 00:10:59,880
Put a semicolon there and then I can just capture the output of this.

164
00:10:59,890 --> 00:11:07,210
So if I just do a an option, command the right here and I don't know what what will I call this my

165
00:11:07,210 --> 00:11:08,050
string?

166
00:11:08,200 --> 00:11:10,210
Actually, I guess I should have called it my money.

167
00:11:10,450 --> 00:11:12,040
I got a name that my money.

168
00:11:12,730 --> 00:11:13,120
All right.

169
00:11:13,420 --> 00:11:16,480
So I'm calling this static method format.

170
00:11:16,600 --> 00:11:25,090
I'm telling it, Hey, string, I want you to format this variable, which is a big decimal in this

171
00:11:25,090 --> 00:11:29,530
particular way and then pass me back the result of that.

172
00:11:29,800 --> 00:11:32,510
And I will store that in a string called my money.

173
00:11:32,740 --> 00:11:41,500
Now down here, I can maybe get rid of this and I can do a system that print line instead and then just

174
00:11:41,500 --> 00:11:42,520
pass my money.

175
00:11:42,820 --> 00:11:45,460
OK, and then I can run this.

176
00:11:46,710 --> 00:11:47,280
There you go.

177
00:11:47,610 --> 00:11:55,560
Now, why do it this way versus the other way with the system got out that format or print off or whatever?

178
00:11:55,860 --> 00:12:02,490
So let's say you wanted to append or concatenate a bunch of different formatted strings together or

179
00:12:02,490 --> 00:12:05,400
something of that sort or do a lot more stuff.

180
00:12:05,640 --> 00:12:12,480
But beyond just formatting this one value here, you know, then you might want to use something like

181
00:12:12,480 --> 00:12:18,360
the string that format store the result of that and then keep going on doing other formatting and things

182
00:12:18,360 --> 00:12:21,270
and then put them all together, perhaps when you're done right.

183
00:12:21,300 --> 00:12:28,470
So you could do something like my money that can cat write and then do some more stuff here, you know,

184
00:12:28,470 --> 00:12:32,340
concatenate another string on there or whatever it is that you're going to do.

185
00:12:32,790 --> 00:12:33,110
All right.

186
00:12:33,120 --> 00:12:38,940
So there could be a number of reasons why you might prefer to to do it this way.

187
00:12:39,180 --> 00:12:46,290
In fact, actually in most professional programming, you are more likely if you wanted to do a format

188
00:12:46,530 --> 00:12:52,380
like this, if you were locked into formatting a string in this way and as opposed to using the decimal

189
00:12:52,380 --> 00:12:58,020
format or the number format or something like that, then you almost definitely would be using the string.

190
00:12:58,020 --> 00:13:05,430
That format method in all likelihood, because in real professional applications, rarely are professional

191
00:13:05,430 --> 00:13:10,320
Java applications just printing things out to the command line like this.

192
00:13:10,530 --> 00:13:17,520
Instead, you'll be formatting some data and then showing it in a web browser or in a graphical user

193
00:13:17,520 --> 00:13:23,240
interface or something like that where you would never even be using system that out that print line,

194
00:13:23,250 --> 00:13:23,590
OK?

195
00:13:23,820 --> 00:13:28,860
We're just using system that out and print def and all of these things out of convenience, because

196
00:13:28,860 --> 00:13:34,500
I have not yet shown you how to make any other type of user interface for the applications that were

197
00:13:34,620 --> 00:13:36,750
or for the code that we're writing right now.

198
00:13:36,930 --> 00:13:37,160
All right.

199
00:13:37,170 --> 00:13:44,220
So I think that's going to just about do it for all of the ways that we can format at least money and

200
00:13:44,220 --> 00:13:47,550
basic numbers for right now, as I've shown you.

201
00:13:47,580 --> 00:13:53,220
You can always go here and do an one and then drill in to some of the methods.

202
00:13:53,220 --> 00:13:55,890
Or you can put an F1 on this format method here.

203
00:13:56,160 --> 00:14:02,370
And then you can jump over to learn more about all of the ways that you can format something in the

204
00:14:02,370 --> 00:14:03,310
Java docs.

205
00:14:03,330 --> 00:14:08,250
If you want to learn a lot more about how to do this, and there's plenty of articles online as well.

206
00:14:08,430 --> 00:14:14,250
This is really just meant to kind of give give you a gist of how to do it and to capture what is most

207
00:14:14,250 --> 00:14:20,370
likely the most common scenario that you're going to do, which is to format money, probably.

208
00:14:21,330 --> 00:14:21,730
All right.

209
00:14:21,750 --> 00:14:24,390
So I'm going to wrap it up and I'll see you in the next one.
