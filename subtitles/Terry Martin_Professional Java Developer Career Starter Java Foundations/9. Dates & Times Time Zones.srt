1
00:00:00,150 --> 00:00:04,860
Now, I know there's kind of a lot of concepts here, so let's just recap these concepts.

2
00:00:04,860 --> 00:00:09,960
So we've got local, they just represent a calendar day with no time component.

3
00:00:10,290 --> 00:00:11,850
And then we've got local time.

4
00:00:12,120 --> 00:00:16,620
So you can think of that as just, you know, our minutes, seconds, et cetera.

5
00:00:16,890 --> 00:00:24,600
But a time with no day associated with that time, then we can put those two components together to

6
00:00:24,600 --> 00:00:26,730
make a local date time.

7
00:00:27,000 --> 00:00:32,040
It's literally just something that's putting the local date and the local time together.

8
00:00:32,460 --> 00:00:38,190
And then we can measure the passage of time, either with periods, if it's a period of time on the

9
00:00:38,190 --> 00:00:46,380
order of days, weeks, months, years, etc. Or we can use a duration if it's measuring periods of

10
00:00:46,380 --> 00:00:50,420
time on the order of hours, minutes, seconds, et cetera.

11
00:00:51,210 --> 00:00:56,460
Now one thing this is leaving off, though, is what about time zones?

12
00:00:56,730 --> 00:01:02,400
And this can actually be a thorny issue to deal with as a software developer time zones.

13
00:01:02,910 --> 00:01:08,940
Let's say that we are developing a web application that is an application that runs on the web or at

14
00:01:08,940 --> 00:01:15,930
least in a browser, and the application can let you enter messages that you want to be sent to your

15
00:01:15,930 --> 00:01:19,410
friends and loved ones at a particular date and time.

16
00:01:19,800 --> 00:01:28,200
And this application is designed to work worldwide so people in Japan can go into this website and enter

17
00:01:28,440 --> 00:01:34,020
messages to be sent to their loved ones at a particular time, and people in California can do so as

18
00:01:34,020 --> 00:01:34,380
well.

19
00:01:34,770 --> 00:01:40,620
Well, when they're specifying their dates and times, what time zone do they mean?

20
00:01:41,190 --> 00:01:47,670
Do they mean for these messages to be sent to their friends and loved ones in the time zone in which

21
00:01:47,670 --> 00:01:55,020
they themselves are living in or in the time zones of where the servers are, where this application

22
00:01:55,020 --> 00:01:58,200
is storing that data, or some other time zone?

23
00:01:58,650 --> 00:02:05,280
So you kind of need to care about time zones when you're dealing, particularly with people across multiple

24
00:02:05,280 --> 00:02:05,890
zones.

25
00:02:05,910 --> 00:02:06,270
Right?

26
00:02:06,510 --> 00:02:11,670
Even within a country, the continental U.S. itself spans four time zones.

27
00:02:12,330 --> 00:02:14,100
So same situation there.

28
00:02:14,190 --> 00:02:18,120
Somebody goes in and registers something to be sent at some date and time.

29
00:02:18,450 --> 00:02:20,160
What time zone do we use?

30
00:02:21,000 --> 00:02:26,330
So I've actually been involved in a number of conversations with teammates over the years.

31
00:02:26,340 --> 00:02:32,400
It's funny how this problem never seems to be satisfyingly and authoritatively solved, at least by

32
00:02:32,400 --> 00:02:32,880
everyone.

33
00:02:32,880 --> 00:02:37,770
I mean, I feel like I have it solved more or less in my head, but I don't always have everybody on

34
00:02:37,770 --> 00:02:39,330
the team on the same page.

35
00:02:39,930 --> 00:02:47,790
So thankfully, though, this date time API does give us the ability to specify time zone along with

36
00:02:47,790 --> 00:02:49,230
our dates and our times.

37
00:02:49,680 --> 00:02:55,920
They do so by introducing yet another class, but it's really just another build up from what we've

38
00:02:55,920 --> 00:02:56,880
already learned here.

39
00:02:56,910 --> 00:03:05,550
And it is called zoned date time so we can create one very easily second date time.

40
00:03:08,400 --> 00:03:14,910
Of and we can make one in a number of ways we can specify all the constituent parts of a date and a

41
00:03:14,910 --> 00:03:21,450
time plus a time zone, essentially, or we can make one out of a pre-existing local date time and then

42
00:03:21,450 --> 00:03:23,760
just add in time zone information.

43
00:03:23,880 --> 00:03:28,710
And that might be one of the easier ways to go, but point being, there are many ways to do this.

44
00:03:29,010 --> 00:03:30,540
So let's pick this one here.

45
00:03:31,780 --> 00:03:39,340
So I will refer to local daytime one, and then I can also specify essentially a time zone in the form

46
00:03:39,340 --> 00:03:45,490
of a class that they call Zone I.D. So to use this, I can do this.

47
00:03:45,850 --> 00:03:53,410
So let's say first off that I just want to create a zone date time for my own existing time zone.

48
00:03:53,650 --> 00:03:59,830
So to do that, I can really just reference the Zone I.D. dot system default.

49
00:04:00,940 --> 00:04:09,490
And so what this will do is it will read the default time zone information of my computer in the place

50
00:04:09,490 --> 00:04:15,520
where I'm living right now, assuming that your computer's time zone information is correct for where

51
00:04:15,520 --> 00:04:17,650
you geographically are at this moment.

52
00:04:17,830 --> 00:04:24,160
So if you do a fair amount of traveling and coding at the same time, this system default may or may

53
00:04:24,160 --> 00:04:25,330
not be accurate.

54
00:04:25,510 --> 00:04:31,930
If you traveled to someplace where you maybe don't live full time because I don't know if your operating

55
00:04:31,930 --> 00:04:36,160
system on your computer is going to update if it will even realize that you're no longer in the place

56
00:04:36,160 --> 00:04:37,030
where you normally live.

57
00:04:37,060 --> 00:04:38,080
So be careful with that.

58
00:04:38,170 --> 00:04:44,050
But generally speaking, your computer that doesn't move very often will just take whatever the time

59
00:04:44,050 --> 00:04:44,740
zone is now.

60
00:04:44,890 --> 00:04:50,650
Another thing you'd have to keep in mind, though, is that most Java applications that professional

61
00:04:50,650 --> 00:04:57,970
software developer is writing eventually will be deployed onto a server and the servers that your code

62
00:04:57,970 --> 00:05:04,600
is being deployed on could possibly be almost anywhere in the world, but very possibly not in the same

63
00:05:04,600 --> 00:05:05,860
town where you live.

64
00:05:06,040 --> 00:05:12,700
Let's say that you write a bunch of Java code, and it's destined to go live on Amazon Web Services

65
00:05:12,700 --> 00:05:14,180
cloud somewhere.

66
00:05:14,320 --> 00:05:20,740
Now, in that case, you can at least pick the data centers where you may want that code to be deployed,

67
00:05:21,070 --> 00:05:22,600
but you better be careful there.

68
00:05:22,600 --> 00:05:26,350
So this system default thing is very useful for me right now.

69
00:05:26,350 --> 00:05:26,560
What?

70
00:05:26,560 --> 00:05:30,760
I'm showing you this, but you may need to think about it a bit more in real life.

71
00:05:31,450 --> 00:05:33,600
But for right now, let's just start with this.

72
00:05:33,610 --> 00:05:35,740
So zoning the system default.

73
00:05:36,040 --> 00:05:36,460
All right.

74
00:05:36,700 --> 00:05:40,030
And let's just print that out and see what we get now.

75
00:05:41,790 --> 00:05:47,880
All right, so we get two thousand one and a time of 10, 30, and let's see, what did I reference?

76
00:05:47,880 --> 00:05:56,160
I reference the local daytime one, which was here, which referenced the date one so 2001 and the reference

77
00:05:56,160 --> 00:05:58,920
to local time one, which was 10 30.

78
00:05:59,130 --> 00:06:00,750
And so we're seeing all those things here.

79
00:06:00,900 --> 00:06:07,440
But then the extra bit that it added on was this bit right here, the minus six America Chicago.

80
00:06:07,440 --> 00:06:15,570
So that is essentially just the GMT offset GMT for those who are not aware is the time standard that

81
00:06:15,570 --> 00:06:22,500
is based in Greenwich, England, I guess Greenwich London, with Greenwich London being GMT offset

82
00:06:22,500 --> 00:06:30,390
of zero and then cities to the west of that subtract because they are earlier in the day than what's

83
00:06:30,390 --> 00:06:31,470
going on in Greenwich, right?

84
00:06:31,470 --> 00:06:37,410
Anything west of Greenwich is earlier than Greenwich relative to Greenwich, right?

85
00:06:37,680 --> 00:06:45,780
And since I live in the Midwest, I am six hours earlier than Greenwich Mean Time, so I get the minus

86
00:06:45,780 --> 00:06:53,640
six here, which also corresponds to American Central Time generally, which again, for where I live.

87
00:06:53,880 --> 00:06:58,110
I don't live in Chicago, but I'm in the same time zone as Chicago.

88
00:06:58,410 --> 00:07:00,690
And so that's how that's showing up for me.

89
00:07:01,170 --> 00:07:07,200
So that's the part that got added in because I added this zone ID with my system default.

90
00:07:07,320 --> 00:07:10,200
However, I could set that to anything I want.

91
00:07:10,500 --> 00:07:13,140
So if I wanted to set that to.

92
00:07:14,640 --> 00:07:22,650
Some other place I could do and of, and then I can specify this in a number of ways, so we could do

93
00:07:22,650 --> 00:07:25,810
something like a minus five here.

94
00:07:25,830 --> 00:07:26,310
OK.

95
00:07:26,370 --> 00:07:27,810
And let me comment that out.

96
00:07:27,840 --> 00:07:29,160
OK, now let's run that.

97
00:07:30,480 --> 00:07:33,630
So now we get 10, 30 minus five, right?

98
00:07:34,050 --> 00:07:40,500
So it didn't change any of this, which makes sense because all we're doing is combining the date with

99
00:07:40,500 --> 00:07:42,960
the time and now a time zone, right?

100
00:07:42,990 --> 00:07:43,800
That's all a zone.

101
00:07:43,930 --> 00:07:49,890
Date time is as they just took the date, the time and now they just stuck a time zone component on

102
00:07:49,890 --> 00:07:50,880
there as well.

103
00:07:51,090 --> 00:07:57,750
So going back to my example of the web application, where different people can enter dates and times

104
00:07:57,930 --> 00:08:04,200
of when they want a message to be sent, how could we make use of this zone to date time information?

105
00:08:04,530 --> 00:08:10,620
Well, when those users of this system are specifying their dates and times, there's a few different

106
00:08:10,620 --> 00:08:18,120
things we could potentially do when a browser communicates its data back to a centralized server somewhere.

107
00:08:19,020 --> 00:08:26,700
The browser can send back information about its own time zone, so the developers of this web application

108
00:08:26,700 --> 00:08:34,320
could take that time zone information and added on to the specification of the date and the time, and

109
00:08:34,320 --> 00:08:37,530
then save all of that information into a database.

110
00:08:37,650 --> 00:08:40,410
And that's actually not a terrible idea to do.

111
00:08:40,980 --> 00:08:46,650
Alternatively, though, if they don't want to store all these different time zones in the database,

112
00:08:46,650 --> 00:08:51,300
or maybe if their database for some strange reason doesn't support that, then another technique they

113
00:08:51,300 --> 00:08:58,410
could consider doing is to normalize all of the dates and times into one standard time zone, which

114
00:08:58,410 --> 00:09:00,800
will typically be UTC or GMT.

115
00:09:00,810 --> 00:09:01,050
Right.

116
00:09:01,060 --> 00:09:02,250
So Greenwich mean time.

117
00:09:02,550 --> 00:09:05,220
So let's get a little idea of what that might look like.

118
00:09:05,490 --> 00:09:12,060
So let's say that a user requested a local date time, and I'm not saying that they're going to create

119
00:09:12,060 --> 00:09:17,370
that, but let's say they supply the values that I'm about to plug in to this local date, time, local

120
00:09:17,370 --> 00:09:21,060
date, time of 2021.

121
00:09:22,120 --> 00:09:25,990
Twelve, twenty five and.

122
00:09:27,170 --> 00:09:29,380
12 p.m..

123
00:09:29,960 --> 00:09:35,660
So, in other words, noon on Christmas Day of 2021.

124
00:09:36,140 --> 00:09:36,560
All right.

125
00:09:37,690 --> 00:09:41,260
And let's capture that, and we'll call it Christmas.

126
00:09:43,550 --> 00:09:45,590
That's when they want their message to be sent.

127
00:09:46,070 --> 00:09:52,100
And let's also say that this person lives in California.

128
00:09:52,410 --> 00:09:52,880
OK.

129
00:09:53,420 --> 00:10:01,280
And we need to store this information in our server because they want their message to be sent at noon

130
00:10:01,670 --> 00:10:03,530
on December 25th.

131
00:10:03,860 --> 00:10:05,120
California time.

132
00:10:05,300 --> 00:10:10,180
But in our servers, we want to store everything in UTC.

133
00:10:10,550 --> 00:10:11,030
OK.

134
00:10:11,450 --> 00:10:11,990
So.

135
00:10:13,110 --> 00:10:18,060
This is the information that gets transmitted from their Web browser to our servers.

136
00:10:18,090 --> 00:10:19,530
This this period of time.

137
00:10:19,920 --> 00:10:32,630
Plus we also receive the fact that they live in California and that their time zone is GMT minus eight.

138
00:10:32,790 --> 00:10:41,250
I think I'm pretty sure it's GMT minus say, OK, so first thing we might want to do is to create a

139
00:10:41,250 --> 00:10:43,080
zone that daytime.

140
00:10:44,480 --> 00:10:54,560
Of and then we'll use the Christmas there, plus, so an idea of minus eight.

141
00:10:57,510 --> 00:11:01,650
And I will capture that, I'll call it the Xmas.

142
00:11:02,100 --> 00:11:05,970
So I want to save this information somewhere, but I need to normalize it first.

143
00:11:06,120 --> 00:11:08,310
I need to work the time, so to speak.

144
00:11:08,520 --> 00:11:12,930
I want to find out what is this date time in GMT?

145
00:11:13,470 --> 00:11:19,890
OK, so to do that, I can actually just call a method on here with zone.

146
00:11:19,920 --> 00:11:22,990
Same instant with zone.

147
00:11:23,010 --> 00:11:23,970
Same instant.

148
00:11:23,970 --> 00:11:29,370
And so now what I can do is I can pass in another zone I.D..

149
00:11:30,480 --> 00:11:31,140
Of.

150
00:11:32,570 --> 00:11:37,460
Now for this, I can simply say plus zero.

151
00:11:39,800 --> 00:11:46,040
And I do have to pretend that zero with either a plus or minus two, it won't matter which one I use

152
00:11:46,040 --> 00:11:47,210
in this particular case.

153
00:11:47,480 --> 00:11:52,400
But if I don't have a plus or minus, then the parsing logic, which you can read about more in the

154
00:11:52,400 --> 00:11:54,830
Java doc for the above method won't work.

155
00:11:55,930 --> 00:11:56,290
All right.

156
00:11:56,680 --> 00:11:58,480
So if I do that.

157
00:11:59,690 --> 00:12:04,850
And then I can just print that out like so so let's run that.

158
00:12:05,900 --> 00:12:06,180
All right.

159
00:12:06,200 --> 00:12:13,430
And so now we see 2021 December 25th time, 20 hours.

160
00:12:13,940 --> 00:12:16,760
So we specified noon California time.

161
00:12:16,760 --> 00:12:25,820
And so this is telling us that noon California time in GMT would be 8:00 p.m., right?

162
00:12:26,030 --> 00:12:29,240
Which makes sense because we're saying that California time.

163
00:12:29,240 --> 00:12:30,710
I hope I'm right in my assumption here.

164
00:12:30,710 --> 00:12:32,510
I'm not going to go look at them too lazy for that.

165
00:12:32,510 --> 00:12:41,540
But California is eight hours earlier than Greenwich mean time or UTC, right?

166
00:12:41,660 --> 00:12:43,310
And so this makes good sense.

167
00:12:44,450 --> 00:12:52,550
So it's taking our California time and adding eight hours to it to tell us what time that would be in

168
00:12:52,550 --> 00:12:54,230
Greenwich or UTC.

169
00:12:55,190 --> 00:13:01,640
Now, interestingly, let's see what would happen if we specified a time that was late enough in the

170
00:13:01,640 --> 00:13:07,100
day in California that it would wrap around to the next day in Greenwich.

171
00:13:07,550 --> 00:13:12,890
So let's just do something like, well, actually, we can just pick eight p.m., right?

172
00:13:13,430 --> 00:13:16,220
So that would be 20 hours.

173
00:13:17,030 --> 00:13:17,360
Right?

174
00:13:18,050 --> 00:13:19,820
So let's run that and see.

175
00:13:20,300 --> 00:13:26,060
So now this should give us a date of the next day, but very early in the morning.

176
00:13:26,060 --> 00:13:29,570
So the 26th of of of December, right?

177
00:13:29,750 --> 00:13:30,560
So let's see.

178
00:13:30,560 --> 00:13:31,610
Let's run that.

179
00:13:33,070 --> 00:13:38,360
And there we go, yes, so we get December 26th at 4:00 a.m..

180
00:13:38,740 --> 00:13:45,130
And so this might be the information that we'd want to store in our database if for whatever reason,

181
00:13:45,310 --> 00:13:52,420
our database did not support the story, the storage of time zones or if by some company policy, we

182
00:13:52,420 --> 00:13:58,120
just weren't already in the habit of storing time zones, but we were instead normalizing all dates

183
00:13:58,120 --> 00:14:01,570
and times in our database for GMT or UTC.

184
00:14:02,710 --> 00:14:05,740
So this is what you'd have to do this this bit here.

185
00:14:06,520 --> 00:14:10,960
This bit here is us normalizing the date and time.

186
00:14:10,960 --> 00:14:18,070
So I can't stress how important this type of logic would be, though my personal preference in a green

187
00:14:18,070 --> 00:14:24,460
field application where I can control the database as much as I want to, my preference would really

188
00:14:24,460 --> 00:14:32,080
be to go ahead and store the date time ends and time zone information all together in the database.

189
00:14:32,650 --> 00:14:36,820
That would be my preference, but this would be the close second to that.

190
00:14:38,110 --> 00:14:38,430
All right.

191
00:14:38,440 --> 00:14:44,500
So I think you now thoroughly have an understanding of why time zones associated with dates and times

192
00:14:44,500 --> 00:14:47,590
are so important in most applications.

193
00:14:47,590 --> 00:14:53,500
In fact, you'd be surprised, though, to see how many applications written in companies and things

194
00:14:53,740 --> 00:14:55,690
don't take time zone into account.

195
00:14:55,840 --> 00:15:03,040
And countless times that have arrived at a company as a software developer and we start looking at some

196
00:15:03,040 --> 00:15:03,970
application.

197
00:15:04,450 --> 00:15:09,190
Maybe it's an application that already existed there, and we're looking through the database and you

198
00:15:09,190 --> 00:15:15,340
see these date fields there and you ask, So what time zone is this information for?

199
00:15:15,340 --> 00:15:16,690
And nobody knows.

200
00:15:16,900 --> 00:15:18,040
They just like, don't even.

201
00:15:18,340 --> 00:15:19,930
It's like not even a thought.

202
00:15:20,920 --> 00:15:29,260
And there are important events that are supposedly tied to the times that are in those databases, and

203
00:15:29,260 --> 00:15:35,500
people don't know exactly what they mean in terms of like, well, when you say 8:00 p.m. in this database,

204
00:15:35,740 --> 00:15:37,390
what time zone do you mean?

205
00:15:37,390 --> 00:15:39,310
When should this actually be occurring?

206
00:15:39,460 --> 00:15:43,240

207
8:00 p.m. Where you have to really actually think about this?
