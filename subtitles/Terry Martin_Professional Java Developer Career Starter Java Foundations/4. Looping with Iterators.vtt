WEBVTT
1
00:00:00.150 --> 00:00:01.230
All right, we're back.

2
00:00:01.410 --> 00:00:11.760
And so I owe you a little schooling on how to do another type of loop to iterate over a collection so

3
00:00:11.760 --> 00:00:14.610
that we can remove items from that collection.

4
00:00:15.210 --> 00:00:16.800
And so we're going to do that now.

5
00:00:17.010 --> 00:00:22.440
So I'm going to leave this loop here for a little bit so that we can use it kind of as a reference.

6
00:00:22.980 --> 00:00:29.760
And what we're going to end up doing here is we're going to revert back a little bit to the more traditional

7
00:00:29.760 --> 00:00:31.230
style of loop.

8
00:00:31.230 --> 00:00:38.100
So this is the enhanced for loop where we can just give it a collection and then it gives us the individual

9
00:00:38.100 --> 00:00:39.810
elements of that collection.

10
00:00:40.020 --> 00:00:48.780
And this is the preferred loop in in most scenarios if you must manually loop over items in a in a collection.

11
00:00:48.960 --> 00:00:56.220
This is the preferred way to do it unless you need to remove items from the collection while you are

12
00:00:56.220 --> 00:00:57.540
iterating over them.

13
00:00:57.750 --> 00:01:02.130
In that case, you you can't do it this way, as we have just seen.

14
00:01:02.490 --> 00:01:10.800
So for thoroughness, I'm going to show you how to do that, specifically if you need to remove items

15
00:01:10.800 --> 00:01:13.320
or elements while you're iterating over them.

16
00:01:13.350 --> 00:01:13.830
OK.

17
00:01:14.550 --> 00:01:17.850
So we will use another for loop.

18
00:01:17.880 --> 00:01:22.440
This will be closer to the more traditional for loop, though, using the semicolons.

19
00:01:23.160 --> 00:01:31.770
So for and now the variable that we're going to create in the first little area of this for statement,

20
00:01:31.770 --> 00:01:35.760
though, this is going to be a variable called an iterator.

21
00:01:35.790 --> 00:01:36.230
OK.

22
00:01:36.480 --> 00:01:42.900
And in my previous lessons example where I told you to imagine that there are two threads one thread

23
00:01:42.900 --> 00:01:49.770
is looping over the elements in the collection, while another thread was trying to steal elements out

24
00:01:49.770 --> 00:01:50.670
at the same time.

25
00:01:50.670 --> 00:01:52.410
And that's why we got that exception.

26
00:01:52.800 --> 00:02:01.710
In that example, this thread that's looping over the elements, that guy is an iterator.

27
00:02:01.770 --> 00:02:02.280
OK?

28
00:02:02.520 --> 00:02:08.040
It's a little guy who knows how to just iterate over the elements in a collection, and we're going

29
00:02:08.040 --> 00:02:11.850
to actually create an instance of that guy.

30
00:02:11.880 --> 00:02:14.880
OK, so we'll visualize him sort of like, OK.

31
00:02:15.210 --> 00:02:20.040
So the way that we do that is we can get an iterator from a collection.

32
00:02:20.040 --> 00:02:25.020
Collections have the ability to to create and iterate or for us.

33
00:02:25.200 --> 00:02:29.200
And so that's what we're going to put in this first little bit here.

34
00:02:29.220 --> 00:02:29.610
OK.

35
00:02:29.940 --> 00:02:40.100
So we want, in fact, that maybe the easy way to access this would be to refer to the employee's collection

36
00:02:40.110 --> 00:02:47.040
like so and then period and then iterator this second thing here.

37
00:02:47.130 --> 00:02:47.550
OK.

38
00:02:47.730 --> 00:02:50.970
Be careful because there's this there's a bunch of other things here.

39
00:02:51.000 --> 00:02:52.410
We don't want those right now.

40
00:02:52.530 --> 00:02:55.200
We just want iterator, plain old iterator.

41
00:02:55.470 --> 00:02:57.990
And so from here, we can do this in a couple of ways.

42
00:02:58.320 --> 00:03:05.670
We could go to the beginning of this little bit here and then create an instance of an an iterator like

43
00:03:05.670 --> 00:03:10.440
so and and we'll call it.

44
00:03:11.400 --> 00:03:15.420
That's a very common name for an iterator in this type of example.

45
00:03:15.840 --> 00:03:18.160
However, there's one thing we might want to do.

46
00:03:18.180 --> 00:03:26.850
We might want to also use generics to specify what type of objects this iterator iterates over, so

47
00:03:26.850 --> 00:03:31.350
we could actually use the diamond operator here.

48
00:03:32.190 --> 00:03:42.750
And then we can specify that this is going to iterate over instances of I employee like so.

49
00:03:42.950 --> 00:03:43.760
So we could do it.

50
00:03:43.770 --> 00:03:44.610
We could do this.

51
00:03:44.640 --> 00:03:46.170
Now we're not done with this for a loop.

52
00:03:46.170 --> 00:03:49.440
I'm just showing you this first little section of the for loop, OK?

53
00:03:49.470 --> 00:03:56.250
By the way, this is a very old this is a fairly old school way of looping over collections, and it

54
00:03:56.250 --> 00:03:58.870
is not usually recommended.

55
00:03:58.890 --> 00:04:05.790
But if you have to remove items from a collection while you're looping over the collection, this is

56
00:04:06.390 --> 00:04:07.530
the way to do that.

57
00:04:07.740 --> 00:04:15.120
And so now we can go to the end of this four loop statement here and we need a semicolon, right?

58
00:04:15.120 --> 00:04:21.030
Because that's just the first little block of what goes into the traditional for loop, right?

59
00:04:21.300 --> 00:04:27.180
The variable that you're going to use to refer back to individual elements within the loop right on

60
00:04:27.180 --> 00:04:28.170
each iteration.

61
00:04:28.500 --> 00:04:35.340
The next bit is where we tell the for loop how long it should loop, like what is the criteria for when

62
00:04:35.340 --> 00:04:38.640
it should stop and to do this with an iterator.

63
00:04:38.640 --> 00:04:41.040
What we use is the actual iterator itself.

64
00:04:41.040 --> 00:04:44.940
I.T Dot and then iterator has a method called has NEC.

65
00:04:44.940 --> 00:04:50.850
So it's a question is there a next item or is there a next element that we should iterate over?

66
00:04:51.150 --> 00:04:56.850
And so if we put that in there, that's how the Loop will know to stop because when there are no more

67
00:04:56.850 --> 00:04:59.580
elements in the collection to iterate over.

68
00:04:59.910 --> 00:05:06.090
That method will return a Boolean false and then the loop will stop, and then finally, we need one

69
00:05:06.090 --> 00:05:10.080
more semicolon, which would normally be the place where we increment.

70
00:05:10.260 --> 00:05:13.650
But in this case, we're going to just leave it out.

71
00:05:13.650 --> 00:05:19.890
And if you may recall, back when we originally learned for loops, you can actually leave any of these

72
00:05:19.890 --> 00:05:26.550
three sections of the for loop blank, depending on what you're trying to do if you leave the second

73
00:05:26.550 --> 00:05:27.090
one blank.

74
00:05:27.300 --> 00:05:32.820
That implies that you may want that loop to just run forever, or you plan to kill the loop yourself

75
00:05:32.820 --> 00:05:37.050
manually by brake using a brake statement or something like that.

76
00:05:38.330 --> 00:05:38.750
All right.

77
00:05:38.990 --> 00:05:48.230
So now if we come over here and create a body for the for loop now, the rest of this will be pretty

78
00:05:48.230 --> 00:05:50.300
similar to what we've got here.

79
00:05:50.540 --> 00:05:57.140
So except and in iterator is not an actual worker, OK?

80
00:05:57.170 --> 00:05:58.220
It's an iterator.

81
00:05:58.220 --> 00:06:03.320
It's the guy who kind of counts the workers or iterates over the workers.

82
00:06:03.350 --> 00:06:03.740
OK.

83
00:06:03.890 --> 00:06:10.250
So to actually get our hands on a worker now, we need to pull that out of the iterator himself, if

84
00:06:10.250 --> 00:06:10.670
you will.

85
00:06:11.030 --> 00:06:11.390
All right.

86
00:06:11.420 --> 00:06:15.290
And so we can access I.T. dot next.

87
00:06:18.510 --> 00:06:27.210
And the next method will actually give us the current element or object that the iterator is pointing

88
00:06:27.210 --> 00:06:28.830
at or is is on right.

89
00:06:28.860 --> 00:06:37.740
So each time this four loop loops each iteration, each time it iterates the its next method will give

90
00:06:37.740 --> 00:06:41.920
us the next element in the collection.

91
00:06:41.940 --> 00:06:42.390
OK.

92
00:06:42.660 --> 00:06:43.790
So it that next.

93
00:06:43.950 --> 00:06:52.830
If I capture that, I'm going to call this worker, which is equivalent to what we did in the loop down

94
00:06:52.830 --> 00:06:53.340
here.

95
00:06:53.820 --> 00:06:54.270
OK.

96
00:06:54.660 --> 00:06:55.710
I employee.

97
00:06:55.710 --> 00:06:57.210
And then we've got a worker.

98
00:06:59.400 --> 00:07:07.500
And now most of this will be the same, so now we can test if the worker is an instance of an employee

99
00:07:07.500 --> 00:07:08.820
and yada yada yada.

100
00:07:09.030 --> 00:07:11.250
I'll type it out, though.

101
00:07:11.250 --> 00:07:24.390
So if the worker is an instance of let's two spaces their employee, then we can go ahead and cast it

102
00:07:24.390 --> 00:07:24.780
right.

103
00:07:25.650 --> 00:07:37.630
So will do employee temp worker equals and then will cast employee from worker like so.

104
00:07:38.400 --> 00:07:41.040
OK, so now we've got an employee that we can work with.

105
00:07:41.220 --> 00:07:52.020
And then if the removal names that contains temp worker dot first name, then.

106
00:07:53.470 --> 00:08:02.830
Now, now we're ready to remove this current worker that we're iterating over from the collection and

107
00:08:02.830 --> 00:08:03.830
the way we do that.

108
00:08:03.850 --> 00:08:10.930
As I said in the previous lesson, you can't have this one thread, which is basically the iterator

109
00:08:11.140 --> 00:08:16.940
who's iterating over these items and then have another thread come in and try to steal items out.

110
00:08:16.960 --> 00:08:18.220
That's not the way to do that.

111
00:08:18.430 --> 00:08:28.090
The way to do it is to ask this iterator guy right here to remove items himself as he's looping over

112
00:08:28.090 --> 00:08:29.410
them or iterating over them.

113
00:08:29.560 --> 00:08:34.460
And so the way we do that is simply by calling a method on the iterator object.

114
00:08:34.480 --> 00:08:36.610
It does not remove.

115
00:08:38.050 --> 00:08:38.740
There you go.

116
00:08:39.160 --> 00:08:47.140
That's how you remove an item or an element from a collection while you're iterating over the collection.

117
00:08:47.320 --> 00:08:49.600
In this traditional type of loop?

118
00:08:49.780 --> 00:08:54.010
OK, now don't worry, there's better ways to do this for sure.

119
00:08:54.640 --> 00:09:00.700
But this is very traditional and you can see code that looks a lot like this in every single company

120
00:09:00.700 --> 00:09:03.070
in the world where Java code is written.

121
00:09:03.100 --> 00:09:03.440
OK.

122
00:09:03.460 --> 00:09:08.200
So that's why it's important for you to know this pattern or be familiar with it.

123
00:09:08.230 --> 00:09:08.650
OK?

124
00:09:08.830 --> 00:09:14.770
And this is actually the type of problem that you may encounter in a coding test or something like that

125
00:09:15.010 --> 00:09:17.200
where they'll, you know, maybe ask you to.

126
00:09:17.410 --> 00:09:24.700
They'll point you down a road to cause you to write a for loop like this and then imply that you should

127
00:09:24.700 --> 00:09:28.950
remove an element from the list and you can't do it in this way.

128
00:09:28.960 --> 00:09:36.340
You have to use an iterator if you're going to do any kind of old school style of looping at all.

129
00:09:36.370 --> 00:09:36.850
OK.

130
00:09:37.180 --> 00:09:38.710
So this is how you do this.

131
00:09:39.220 --> 00:09:49.060
OK, so now that we've got this code here that knows how to remove anybody who's in this list whose

132
00:09:49.060 --> 00:09:50.470
first name is in this list?

133
00:09:50.800 --> 00:09:59.830
Maybe what we'll do is we'll use this loop down here simply to continue to print out the people in the

134
00:10:00.040 --> 00:10:07.600
collection and total up their salaries, which means that we don't need any of this bit anymore.

135
00:10:07.600 --> 00:10:09.730
So I'm going to remove those lines.

136
00:10:09.760 --> 00:10:10.150
OK.

137
00:10:10.390 --> 00:10:14.530
So let me let me get rid of a few gaps here.

138
00:10:14.860 --> 00:10:15.160
All right.

139
00:10:15.190 --> 00:10:18.310
So in other words, this bit here.

140
00:10:19.230 --> 00:10:23.280
Is just focusing on removing the undesirable.

141
00:10:23.430 --> 00:10:23.910
OK.

142
00:10:24.120 --> 00:10:29.460
Well, that's what I should name this the undesirables that will five.

143
00:10:31.500 --> 00:10:31.850
All right.

144
00:10:31.860 --> 00:10:34.230
So this is removing the undesirables.

145
00:10:34.800 --> 00:10:38.970
And now here we're just printing out whoever is left right.

146
00:10:39.120 --> 00:10:41.370
So let's run this and see what we get.

147
00:10:41.400 --> 00:10:46.440
Hopefully, we should get less than eight point six million and we should notice that a few people are

148
00:10:46.440 --> 00:10:46.950
missing.

149
00:10:47.760 --> 00:10:48.810
So let's run this.

150
00:10:51.670 --> 00:10:54.640
Oh, yeah, there we go, six point eight million now.

151
00:10:55.030 --> 00:10:58.810
And let's see, who did we remove we removed Fred to.

152
00:10:59.350 --> 00:11:00.490
Let's go to the top.

153
00:11:00.490 --> 00:11:09.100
So there's there's Fred, there's our lambda object and no Fred to just skips right over to Fred three.

154
00:11:09.250 --> 00:11:10.300
So that's looking good.

155
00:11:10.300 --> 00:11:12.260
And then Barney four should be gone.

156
00:11:12.280 --> 00:11:16.210
Barney Barney to Barney three, Barney five So Barney four is missing.

157
00:11:16.510 --> 00:11:17.500
And then Fred.

158
00:11:20.040 --> 00:11:23.340
Oh, and then oh, sorry, I for some reason, I skipped over Wilma.

159
00:11:23.520 --> 00:11:27.000
Wilma five, Yet no Wilma five there.

160
00:11:27.240 --> 00:11:39.150
So we can see now that this code did indeed remove the so-called undesirables from our total list right

161
00:11:39.420 --> 00:11:40.470
now in real life.

162
00:11:40.860 --> 00:11:47.130
One thing that I haven't been showing a whole lot of here is I'd probably go ahead and just grab this

163
00:11:47.130 --> 00:11:49.600
whole entire block and extract that out into a method.

164
00:11:49.620 --> 00:11:51.540
Let me show you what that would look like real quick.

165
00:11:51.990 --> 00:11:57.620
So I would do a an option command M for method or control alt m.

166
00:11:58.080 --> 00:12:06.540
And then I'm being asked what I want to call my new method that I'm about to extract that all out into.

167
00:12:06.750 --> 00:12:07.410
And I don't know.

168
00:12:07.410 --> 00:12:15.630
I might call it something like remove unde undie undesirables.

169
00:12:17.410 --> 00:12:17.860
OK.

170
00:12:18.160 --> 00:12:19.600
And then just hit return.

171
00:12:22.760 --> 00:12:32.630
And now the ABC chose to make this method, such that it passes in the employee collection and the list

172
00:12:32.630 --> 00:12:34.790
of names to be removed, right?

173
00:12:35.150 --> 00:12:37.010
And so now where did that go?

174
00:12:37.250 --> 00:12:39.650
It just moved it down here.

175
00:12:40.870 --> 00:12:45.010
So just turned all of that little block of code into its own method.

176
00:12:45.160 --> 00:12:51.190
And the reason I would probably do this in real life is just to make my code a little more readable.

177
00:12:51.220 --> 00:12:51.700
OK.

178
00:12:53.050 --> 00:12:57.010
Remember, this is all one big, huge method, this main method.

179
00:12:57.010 --> 00:13:05.530
And in real life, I typically don't like to allow my methods to get much more than, I don't know ten

180
00:13:05.530 --> 00:13:09.430
lines long, maybe 10 15 somewhere around in there.

181
00:13:10.180 --> 00:13:15.130
There's lots of little places in here where I could really clean this up a bit.

182
00:13:16.060 --> 00:13:18.730
This this loop here would be another good one.

183
00:13:18.910 --> 00:13:29.350
I could call that something like, I don't know, tabulate or whatever, you know, calculate tabulate

184
00:13:29.350 --> 00:13:32.020
employees or something like something like that.

185
00:13:32.920 --> 00:13:37.360
Even this bit here create undesirable list, right?

186
00:13:37.780 --> 00:13:46.180
Oftentimes, wherever you've got a loop of code, that's not a bad place where you might want to extract

187
00:13:46.180 --> 00:13:47.710
code of some sort.

188
00:13:47.980 --> 00:13:55.840
This bit here, actually this bit here, I might even, I don't know, select all of this, including

189
00:13:55.840 --> 00:14:00.130
the creation of the list in the first place, right?

190
00:14:00.400 --> 00:14:08.830
And then extract the method and call it something like create employees, write or populate employees

191
00:14:08.830 --> 00:14:09.730
or something like that.

192
00:14:10.690 --> 00:14:11.920
And it would be turn.

193
00:14:13.110 --> 00:14:15.180
A list of employees.

194
00:14:15.420 --> 00:14:15.750
Right.

195
00:14:15.990 --> 00:14:22.080
So I just want to kind of trigger your thinking here to show you that in real life, you really don't

196
00:14:22.080 --> 00:14:25.050
want to just make these really long methods.

197
00:14:25.200 --> 00:14:26.540
That's kind of procedural.

198
00:14:26.570 --> 00:14:31.890
This I'm I haven't been extracting out a lot of methods here because I didn't want to be jumping back

199
00:14:31.890 --> 00:14:32.880
and forth too much.

200
00:14:32.880 --> 00:14:35.010
I was afraid that that might confuse you.

201
00:14:35.160 --> 00:14:40.710
Sometimes it's nice while I'm teaching to be able to just see all in one screen.

202
00:14:41.340 --> 00:14:47.490
This block, you know this block here and then that block there so that we can kind of compare what's

203
00:14:47.490 --> 00:14:48.000
going on.

204
00:14:48.000 --> 00:14:49.320
Especially that was nice.

205
00:14:49.530 --> 00:14:55.080
While I had this method, while I had the contents of this method, which was basically just a loop.

206
00:14:55.350 --> 00:14:57.000
And then this loop here, right?

207
00:14:57.000 --> 00:15:00.480
It was nice to see those two different styles of loop at the same time.

208
00:15:01.740 --> 00:15:09.300
But in real life, we really I very much recommend that you try to keep your methods relatively short,

209
00:15:09.870 --> 00:15:13.410
you know, 10 to 20 lines, if possible.

210
00:15:13.710 --> 00:15:16.260
That's my own arbitrary number, honestly.

211
00:15:17.160 --> 00:15:23.010
But I'll say this without even naturally trying to keep my methods short.

212
00:15:23.010 --> 00:15:27.640
My methods have a tendency to be not much more than 10 to 20 light.

213
00:15:27.660 --> 00:15:28.020
OK.

214
00:15:29.790 --> 00:15:31.710
So just keep that in mind.

215
00:15:32.460 --> 00:15:32.820
All right.

216
00:15:32.850 --> 00:15:36.030
And so that's going to wrap up this lesson.

217
00:15:36.420 --> 00:15:37.440
We did some really cool things.

218
00:15:37.560 --> 00:15:43.890
Oh, one more thing I want to mention, though I recognize that this might look pretty intimidating

219
00:15:43.920 --> 00:15:48.840
to some of you, although hopefully it's getting to be more understandable, right, as we just see

220
00:15:48.840 --> 00:15:51.000
these patterns encode them up more and more.

221
00:15:51.240 --> 00:15:58.260
So one thing I want to tell you, though, about working with Iterator is I will say that iterating

222
00:15:58.260 --> 00:16:04.570
over collections using an old school iterator like this is getting to be somewhat old fashioned.

223
00:16:04.830 --> 00:16:06.750
Number one, that's the first thing I want to mention.

224
00:16:06.900 --> 00:16:12.330
This is a little bit old fashioned if you just need to iterate over the elements in a collection.

225
00:16:12.510 --> 00:16:17.100
It is strongly recommended not to use this pattern at all.

226
00:16:17.370 --> 00:16:21.760
It is strongly recommended to use the enhanced for loop.

227
00:16:21.780 --> 00:16:24.970
That's guidance from the creators of of Java themselves.

228
00:16:24.990 --> 00:16:25.350
OK.

229
00:16:25.560 --> 00:16:28.080
This is the preferred way to do that.

230
00:16:28.080 --> 00:16:36.660
If you must do a somewhat manual looping over looping or iterating over a collection, OK?

231
00:16:37.170 --> 00:16:44.460
It's really as far as I can think, the only time you ever need an iterator, pretty much the only time

232
00:16:44.460 --> 00:16:51.480
is again for like the fifth time that I'm saying it now is only if you need to remove items from the

233
00:16:51.480 --> 00:16:54.540
collection while you are iterating over them.

234
00:16:54.720 --> 00:17:00.820
We are going to learn and even better and easier way to do all of this.

235
00:17:00.840 --> 00:17:06.060
Actually, everything we're doing here can be done much, much simpler using lambdas.

236
00:17:06.090 --> 00:17:06.480
OK.

237
00:17:07.380 --> 00:17:08.730
But I just wanted to point that out.

238
00:17:08.730 --> 00:17:13.290
So, you know, don't lose sleep if you're thinking like you need to go out of your way to, like,

239
00:17:13.950 --> 00:17:16.260
become an expert and memorize this pattern.

240
00:17:16.440 --> 00:17:21.810
Familiarize yourself with it added to the back of your toolbox in your brain somewhere.

241
00:17:22.050 --> 00:17:27.990
But you know, if you ever need to do this, just the thing that I want you to memorize is not this

242
00:17:27.990 --> 00:17:28.590
exact.

243
00:17:28.590 --> 00:17:30.420
Every line of code that I'm doing here.

244
00:17:30.430 --> 00:17:38.190
What you should memorize is if I need to remove an element from a collection while I'm iterating over

245
00:17:38.190 --> 00:17:40.240
that collection, I need to use an iterator.

246
00:17:40.260 --> 00:17:41.700
That's the thing you need to memorize.

247
00:17:41.970 --> 00:17:42.960
You can Google.

248
00:17:43.260 --> 00:17:46.920
How do you how do I do an iterator with a for loop?

249
00:17:46.980 --> 00:17:47.160
Right?

250
00:17:47.190 --> 00:17:49.770
You can Google that and find this pattern, right?

251
00:17:50.010 --> 00:17:55.980
And then the only other thing that's making this particular implementation maybe look a little more

252
00:17:56.490 --> 00:18:03.150
convoluted than you might like it to be is the fact that I also am using a conditional here to test

253
00:18:03.150 --> 00:18:07.770
whether or not the iterated element is an instance of employee.

254
00:18:08.730 --> 00:18:10.680
In many cases, you might not need to do that.

255
00:18:10.800 --> 00:18:16.380
We just had to do it here because there's at least one case where it's not an employee.

256
00:18:16.380 --> 00:18:17.550
And so we don't want to.

257
00:18:17.820 --> 00:18:20.010
We don't want to do work on that right.

258
00:18:20.250 --> 00:18:27.690
And also one more thing, we have an opportunity here to use our pattern matching.

259
00:18:27.700 --> 00:18:32.670
Do you do you remember we learned about pattern matching a little bit and I completely forgot to make

260
00:18:32.670 --> 00:18:33.990
use of it myself here.

261
00:18:34.140 --> 00:18:38.910
Do you see where we could apply that technique in this code?

262
00:18:39.390 --> 00:18:41.790
Take a moment and take a look and see if you can find it.

263
00:18:43.930 --> 00:18:51.790
OK, so we can apply pattern matching because we're using the instance of keyword right here.

264
00:18:51.940 --> 00:18:53.170
Look at what we've got here.

265
00:18:53.410 --> 00:19:01.300
We are checking to see that the worker is an instance of employee, and if it is, then we are casting

266
00:19:01.300 --> 00:19:04.780
the worker to an employee of type employee, right?

267
00:19:04.960 --> 00:19:06.430
And then we call it temp worker.

268
00:19:06.700 --> 00:19:11.830
We can we can do this quicker and easier with a pattern match, right?

269
00:19:11.950 --> 00:19:16.660
This is just me reviewing things that we've learned before, and this is nice.

270
00:19:16.690 --> 00:19:22.360
Now this will only work from Java version 14 and up, and actually even in 14 and 15.

271
00:19:22.840 --> 00:19:29.560
It will only work if you enable the preview features of those of those versions of Java.

272
00:19:30.190 --> 00:19:36.220
It's only officially standard in Java 16, but at any rate.

273
00:19:36.400 --> 00:19:42.510
So we're we're casting this worker to a new type of employee and calling it temp worker.

274
00:19:42.520 --> 00:19:48.760
And so we can actually do this easier by simply putting our cursor here where we're doing the instance

275
00:19:48.760 --> 00:19:52.660
of employee and then typing temp workers.

276
00:19:52.660 --> 00:19:55.780
So in other words, we're naming a variable right here.

277
00:19:56.050 --> 00:20:02.110
And what happens is this whole entire line here is not even needed anymore.

278
00:20:02.620 --> 00:20:05.980
That's what the pattern matching is is enabling us to do.

279
00:20:05.980 --> 00:20:09.030
And we learned this a little bit ago, OK?

280
00:20:09.160 --> 00:20:16.010
But yeah, this is a great place where we can use that and save ourselves one line of code, which I

281
00:20:16.010 --> 00:20:19.510
don't think it's a good line of code to be able to save ourselves from.

282
00:20:19.540 --> 00:20:19.990
OK.

283
00:20:21.250 --> 00:20:26.140
So just wanted to take a quick opportunity to remind you that this is a great place where we could use

284
00:20:26.140 --> 00:20:27.250
the pattern matching?

285
00:20:28.480 --> 00:20:28.810
All right.

286
00:20:28.870 --> 00:20:31.750
Now I'll wrap it up and I'll see you in the next one.
