1
00:00:00,360 --> 00:00:05,940
All right, so in the last lesson we learned about the while loop in this lesson, we're going to learn

2
00:00:05,940 --> 00:00:09,420
about its very close sibling, which is the do while loop.

3
00:00:09,720 --> 00:00:17,910
So this type of loop is almost completely identical to the wire loop, with one minor exception, whereas

4
00:00:17,910 --> 00:00:26,640
with the wire loop, it is possible that the actual body of the loop might not ever execute if the criteria

5
00:00:26,850 --> 00:00:29,160
within the loop are not met.

6
00:00:29,250 --> 00:00:29,540
Right.

7
00:00:29,550 --> 00:00:37,020
So if the expression within the wire loop does not evaluate to a Boolean true, then the body of the

8
00:00:37,020 --> 00:00:38,880
wire loop will never execute.

9
00:00:39,150 --> 00:00:47,100
However, with a do while loop this while part here where we check the criteria actually moves to the

10
00:00:47,100 --> 00:00:48,750
bottom of the loop.

11
00:00:49,260 --> 00:00:54,690
And then it is replaced by a simple do clause, which has no criteria.

12
00:00:54,930 --> 00:01:02,550
And so what that means is that the body of the loop is guaranteed to execute at least one time, and

13
00:01:02,550 --> 00:01:08,850
it is only at the bottom of the loop that a check will be made to determine whether or not that loop

14
00:01:08,880 --> 00:01:10,830
should be run again.

15
00:01:10,980 --> 00:01:19,230
OK, so let's convert this program to use a do while loop and then see if there are any noticeable changes

16
00:01:19,230 --> 00:01:20,040
to the program.

17
00:01:20,610 --> 00:01:27,030
So the way we can do that is pretty straightforward, and I think we can just cut this portion here

18
00:01:27,030 --> 00:01:34,950
and replace that with the word due and then notice that since the cursor is near this opening curly

19
00:01:34,950 --> 00:01:41,580
brace, which indicates the beginning of the body of the loop, the ID automatically highlights the

20
00:01:41,580 --> 00:01:46,530
corresponding closing curly brace so we can just put our cursor right there.

21
00:01:46,710 --> 00:01:53,340
I'm going to hit space once and then I'm going to paste what we already had the the while clause and

22
00:01:53,340 --> 00:01:58,200
then put a semicolon here because that is the syntax for a do while loop.

23
00:01:58,800 --> 00:02:02,900
And now we've just converted a wire loop into a do wire loop.

24
00:02:02,910 --> 00:02:10,080
So now the body of this loop is guaranteed to execute at least one time, no matter what.

25
00:02:10,530 --> 00:02:14,820
OK, so let's see if this program behaves any differently now.

26
00:02:15,330 --> 00:02:17,010
Let's go ahead and build.

27
00:02:20,160 --> 00:02:26,760
All right, and then let me reopen the terminal and I'm going to rerun the program.

28
00:02:27,800 --> 00:02:28,400
All right.

29
00:02:28,730 --> 00:02:31,960
So it's prompting again to enter a number.

30
00:02:32,570 --> 00:02:33,440
Enter a three.

31
00:02:34,850 --> 00:02:38,090
Five, seven, nine.

32
00:02:39,050 --> 00:02:39,650
One.

33
00:02:40,790 --> 00:02:41,260
Two.

34
00:02:42,170 --> 00:02:43,880
OK, so the random number was two.

35
00:02:43,910 --> 00:02:44,370
You got it.

36
00:02:44,390 --> 00:02:49,220
OK, so so far, I don't see any difference in the functioning of the program.

37
00:02:49,310 --> 00:02:53,750
Let's try one more time, and this time I'm going to try the negative numbers.

38
00:02:54,200 --> 00:02:55,460
Someone to run this again.

39
00:02:56,540 --> 00:02:57,830
Negative one.

40
00:03:02,060 --> 00:03:04,790
And then let's try using cue to quit.

41
00:03:05,950 --> 00:03:12,880
OK, so the program seems to behave exactly in the same way as it did before.

42
00:03:13,120 --> 00:03:17,890
And I would say that's pretty expected because, you know, we didn't make much of a change here.

43
00:03:17,920 --> 00:03:24,520
So let me just reiterate really the only distinction with the do while loop and the while loop is simply

44
00:03:24,520 --> 00:03:31,510
that what they do while loop, we are guaranteed that the body of the loop will execute at least once.

45
00:03:31,780 --> 00:03:32,800
That's basically it.

46
00:03:33,190 --> 00:03:33,550
All right.

47
00:03:33,580 --> 00:03:39,460
Now it might be nice to add a little bit more functionality to this program.

48
00:03:39,670 --> 00:03:46,720
One thing I was thinking of was was that it might be nice if the program would keep track of how many

49
00:03:46,750 --> 00:03:50,050
guesses it takes before we guess the right number.

50
00:03:50,260 --> 00:03:52,900
So I'd like to challenge you.

51
00:03:53,110 --> 00:04:01,810
Can you figure out a way that you could keep track of the number of guesses before the user guesses

52
00:04:01,810 --> 00:04:02,860
the right number?

53
00:04:03,070 --> 00:04:08,620
And then maybe when they do, finally, guess the correct number, you could print that somewhere.

54
00:04:08,800 --> 00:04:14,500
So why don't you take a moment to see if you can figure out how to do that and implement it and then

55
00:04:14,500 --> 00:04:16,690
come back and I'll show you how I do it?

56
00:04:17,770 --> 00:04:20,890
OK, so let's see what we can do here.

57
00:04:21,130 --> 00:04:30,070
So we want to track the number of times the user guesses wrong and then print that when they finally

58
00:04:30,070 --> 00:04:32,230
do, guess the right number.

59
00:04:32,410 --> 00:04:37,480
OK, so we're going to need a variable to keep track of the number of wrong guesses.

60
00:04:37,840 --> 00:04:49,390
And I am intuitively inclined to put that variable right above and before our do while loop, and I'll

61
00:04:49,390 --> 00:04:52,390
try to remember to come back and explain why I'm thinking that.

62
00:04:52,450 --> 00:04:54,250
But for now, let's just do this.

63
00:04:54,250 --> 00:04:56,690
So let's create this variable.

64
00:04:56,710 --> 00:04:59,310
It's going to keep track of the count.

65
00:04:59,320 --> 00:05:01,000
So it's going to be numerical.

66
00:05:01,000 --> 00:05:06,880
And our default numeric number type for things like counting and stuff tends to be an integer, even

67
00:05:06,880 --> 00:05:09,430
though technically we don't really need it to be an integer.

68
00:05:09,430 --> 00:05:13,480
As you learned about the number of types before, we could have used the byte, but I'm going to just

69
00:05:13,480 --> 00:05:19,870
go with into integer four right now, and I think I'm going to call this wrong guess count.

70
00:05:20,530 --> 00:05:23,980
And I guess I will initialize it to zero.

71
00:05:24,010 --> 00:05:31,960
And so now we need to decide, OK, so we've got this place to keep count of how many times we guess

72
00:05:31,960 --> 00:05:32,530
wrong.

73
00:05:32,860 --> 00:05:35,830
Now, every time we do, guess wrong, let's see.

74
00:05:35,830 --> 00:05:38,170
This is the code that gets called.

75
00:05:38,440 --> 00:05:44,050
So anything in this else block here is where we can do things when we guess incorrectly.

76
00:05:44,320 --> 00:05:49,990
So I'm thinking we can slip a line of code right in here.

77
00:05:50,290 --> 00:05:55,600
It doesn't really matter too much if it comes before or after this system out that print desk.

78
00:05:55,600 --> 00:06:00,400
But I'm kind of inclined to put it before, and I think the reason I'm inclined to put it before is

79
00:06:00,400 --> 00:06:07,120
simply that I'm kind of thinking like this outputting of stuff is kind of like the last visible thing

80
00:06:07,120 --> 00:06:08,970
that we do when you get something wrong.

81
00:06:08,980 --> 00:06:14,080
And so keeping track of a counter and stuff that's kind of like the internal housekeeping stuff.

82
00:06:14,080 --> 00:06:20,050
And so just intuitively, I'm thinking like, maybe I want to do the housekeeping things first and then

83
00:06:20,050 --> 00:06:23,260
the outputting last, if that makes any sense.

84
00:06:23,470 --> 00:06:26,860
Like, you kind of prepare things before you present things, right?

85
00:06:26,980 --> 00:06:33,040
So now all we need to do is to increment the wrong guest count variable here.

86
00:06:33,280 --> 00:06:35,360
And so do you remember how to do that?

87
00:06:35,380 --> 00:06:38,440
How can you increment a numerical variable?

88
00:06:39,250 --> 00:06:39,820
Did you get it?

89
00:06:40,480 --> 00:06:40,840
All right?

90
00:06:40,850 --> 00:06:47,410
So there are a few ways, but the probably most program free way to do it would be like this.

91
00:06:47,830 --> 00:06:48,670
Plus plus.

92
00:06:49,300 --> 00:06:49,810
That's it.

93
00:06:50,560 --> 00:06:58,030
Now, you may recall that you could optionally also do a prefixed plus plus like that.

94
00:06:58,330 --> 00:07:01,600
I would say there's probably a little less common in a case like this.

95
00:07:01,660 --> 00:07:09,520
Normally, when we do the prefix plus plus, it might be in the scope of making some kind of a call.

96
00:07:09,520 --> 00:07:15,640
And then you're embedding the incrementing other of the variable or something in that call, and you

97
00:07:15,640 --> 00:07:24,430
want this incrementing to happen before the print line actually executes, but otherwise for most other

98
00:07:24,430 --> 00:07:30,820
cases where you just want to increment a number variable on its own.

99
00:07:31,770 --> 00:07:38,400
Like this, I think it's probably more common that you'll just see the incrementing being put on the

100
00:07:38,400 --> 00:07:39,960
end rather than on the beginning.

101
00:07:40,140 --> 00:07:42,770
In this particular case, it doesn't really matter at all.

102
00:07:42,780 --> 00:07:45,840
It's not going to change the application in any way at all.

103
00:07:45,990 --> 00:07:52,530
I'm simply doing this out of habit and because I think this is the more typical way that most developers

104
00:07:52,530 --> 00:07:53,970
would probably do this.

105
00:07:54,480 --> 00:07:55,110
All right.

106
00:07:55,260 --> 00:08:03,480
So now we're incrementing the wrong guest count, and then we need to simply show it once you do guessed

107
00:08:03,480 --> 00:08:04,280
correctly, right?

108
00:08:04,290 --> 00:08:10,770
So we'll say, like when you get it correct, the random number was blah blah blah and you got it in

109
00:08:10,770 --> 00:08:13,780
x number of times or x number of tries.

110
00:08:13,800 --> 00:08:14,190
Right?

111
00:08:14,550 --> 00:08:17,490
So let's revise this message a little bit.

112
00:08:17,610 --> 00:08:28,200
The random number was whatever you got it in percent d some number of tries.

113
00:08:28,920 --> 00:08:32,690
And then we need to supply this value here.

114
00:08:33,030 --> 00:08:34,620
So let's see.

115
00:08:34,620 --> 00:08:42,700
We'll put a little reference our new what is it wrong guest count variable, just like so.

116
00:08:42,930 --> 00:08:46,050
And then what else do we need now?

117
00:08:46,230 --> 00:08:52,770
Well, so now I'm just thinking, what's the quickest, easiest way to test this out?

118
00:08:52,950 --> 00:09:01,500
I think we want to cheat a little bit and let ourselves know what the actual random number is and that

119
00:09:01,500 --> 00:09:01,890
we will.

120
00:09:01,890 --> 00:09:09,180
We will have complete control over when we are able to enter the correct guess, you know?

121
00:09:09,450 --> 00:09:10,620
So let's see.

122
00:09:10,650 --> 00:09:12,420
So we're generating the random number here.

123
00:09:12,420 --> 00:09:19,830
So maybe on the very next line, we'll just actually maybe I want to do a print death.

124
00:09:20,400 --> 00:09:21,450
Let's just print.

125
00:09:21,720 --> 00:09:25,950
Random number is percent the.

126
00:09:26,950 --> 00:09:27,370
Oops!

127
00:09:27,620 --> 00:09:28,990
Percent in.

128
00:09:31,840 --> 00:09:32,740
Random number.

129
00:09:32,950 --> 00:09:33,440
OK.

130
00:09:33,460 --> 00:09:39,310
And that way, we can see what it is and then we can decide while we're running the program when we

131
00:09:39,310 --> 00:09:41,410
want to, when basically.

132
00:09:42,310 --> 00:09:45,130
All right, and now let's go ahead and build.

133
00:09:46,510 --> 00:09:47,680
And then let's run it.

134
00:09:48,830 --> 00:09:51,620
OK, so the random number is six, oops.

135
00:09:52,010 --> 00:09:58,970
Oh, I put my percent in and slightly the wrong place, there should have put it after that period.

136
00:09:59,720 --> 00:10:00,320
Percent.

137
00:10:01,070 --> 00:10:03,170
And let me fix that real quick.

138
00:10:04,390 --> 00:10:07,840
And kill this and rerun it.

139
00:10:09,200 --> 00:10:09,680
All right.

140
00:10:09,710 --> 00:10:11,450
Random number is three, please.

141
00:10:11,480 --> 00:10:17,900
Guess the number between one and 10, so I think the first thing I want to do is just guess it right

142
00:10:17,900 --> 00:10:18,550
off the bat.

143
00:10:18,560 --> 00:10:20,660
So three enter.

144
00:10:21,380 --> 00:10:21,860
All right.

145
00:10:22,070 --> 00:10:23,340
The random number was three.

146
00:10:23,360 --> 00:10:24,410
You got it in zero.

147
00:10:24,410 --> 00:10:24,770
Try.

148
00:10:24,870 --> 00:10:25,480
So, all right.

149
00:10:25,490 --> 00:10:30,590
So because I decided to initialize this wrong guest count to zero.

150
00:10:30,680 --> 00:10:34,640
We are now seeing you got it in zero in zero of tries.

151
00:10:35,390 --> 00:10:36,280
I don't like that.

152
00:10:36,290 --> 00:10:39,370
That's not how anybody would usually convey that message.

153
00:10:39,380 --> 00:10:42,150
We would normally say, you got it in one try.

154
00:10:42,170 --> 00:10:48,800
And also, I'm not a big fan of the fact that if I had gotten it in one try, this word tries would

155
00:10:48,800 --> 00:10:49,540
be plural.

156
00:10:49,550 --> 00:10:50,930
I'm not crazy about that.

157
00:10:51,230 --> 00:10:53,240
So I want to fix both of those things.

158
00:10:53,480 --> 00:10:58,200
So first thing is, let's make it say you got it in one try.

159
00:10:58,490 --> 00:11:03,620
And I think the easiest thing to do here would be simply to initialize this to a one.

160
00:11:03,890 --> 00:11:07,070
You're always going to get it in at least one try.

161
00:11:07,100 --> 00:11:07,490
Right?

162
00:11:08,030 --> 00:11:10,010
So let's just change it to a one.

163
00:11:10,220 --> 00:11:16,610
Let's rebuild and rerun this and make sure that that works correctly.

164
00:11:17,270 --> 00:11:17,860
All right.

165
00:11:17,870 --> 00:11:19,640
So I'm going to clear.

166
00:11:21,470 --> 00:11:22,790
And let's rerun it.

167
00:11:23,000 --> 00:11:26,030
OK, so random numbers for someone to choose for.

168
00:11:26,780 --> 00:11:28,910
You got it in one of tries.

169
00:11:29,540 --> 00:11:29,960
OK.

170
00:11:30,170 --> 00:11:33,680
And I guess also, I want to fix this of you got it in.

171
00:11:34,070 --> 00:11:36,190
Yeah, I guess we don't need the word of there.

172
00:11:36,210 --> 00:11:37,090
That's kind of weird.

173
00:11:37,100 --> 00:11:38,330
I don't know why put that there.

174
00:11:38,870 --> 00:11:39,350
All right.

175
00:11:39,710 --> 00:11:41,300
We rebuild that again.

176
00:11:42,740 --> 00:11:45,110
Clear and run it again.

177
00:11:45,500 --> 00:11:45,920
All right.

178
00:11:45,980 --> 00:11:51,140
One more time here for the OK, you got it in one tries, OK, and I'm still going to come back and

179
00:11:51,140 --> 00:11:53,060
fix the trace, but we'll do that in a minute.

180
00:11:53,240 --> 00:11:54,020
All right and nice.

181
00:11:54,020 --> 00:11:55,990
The program exited out just fine.

182
00:11:56,000 --> 00:11:57,530
OK, now let's run it again.

183
00:11:57,710 --> 00:11:59,990
And this time let's take a few guesses.

184
00:11:59,990 --> 00:12:02,660
So the number is one, so we'll do two.

185
00:12:03,870 --> 00:12:05,040
Didn't get it three.

186
00:12:06,210 --> 00:12:06,870
For.

187
00:12:08,280 --> 00:12:10,440
And now we'll do the right one one.

188
00:12:11,840 --> 00:12:14,270
You got it in four tries, very good.

189
00:12:14,870 --> 00:12:15,770
One, two, three four.

190
00:12:15,920 --> 00:12:19,640
Very good, so that's counting nicely.

191
00:12:19,940 --> 00:12:27,650
Now, the only other thing I want to fix is if we only had to guess one time, then I want that word

192
00:12:27,650 --> 00:12:31,190
tries to be singular and just say one.

193
00:12:31,340 --> 00:12:33,980
Try not one tries.

194
00:12:34,010 --> 00:12:34,400
Right?

195
00:12:34,850 --> 00:12:36,150
So let's see.

196
00:12:36,170 --> 00:12:37,640
So that is here.

197
00:12:37,880 --> 00:12:49,730
So our logic would be something like if the wrong guest count is one or is equal to one, then present

198
00:12:49,730 --> 00:12:55,430
the word, try else, present the word tries.

199
00:12:56,000 --> 00:13:03,110
Right now, you know how to do this with the standard, if then else blocked.

200
00:13:03,320 --> 00:13:09,110
Now, however, there's another way to do this kind of small little one off.

201
00:13:09,410 --> 00:13:13,070
It does the same thing, but it's we can do it all in one line.

202
00:13:13,340 --> 00:13:17,690
And that is with another conditional structure called a ternary operator.

203
00:13:17,720 --> 00:13:24,590
So the ternary operator allows us to do the same thing that we can do with an if then else block, except

204
00:13:24,590 --> 00:13:25,700
just in one line.

205
00:13:26,000 --> 00:13:28,550
Let me show you what that would look like.

206
00:13:29,090 --> 00:13:32,480
So first off, I need to decide where do I want to put this?

207
00:13:33,020 --> 00:13:39,860
And I'm thinking, I can do this inside of the loop, probably right above line 15.

208
00:13:39,860 --> 00:13:47,240
And the reason I'm thinking that is because I'm going to turn this word tries into a variable now that

209
00:13:47,240 --> 00:13:55,580
I will then just add on with the print f and its value can be different each time we run through this

210
00:13:55,580 --> 00:13:56,110
loop.

211
00:13:56,120 --> 00:14:04,760
And so it is appropriate to set this new variable that we are going to introduce within the loop because

212
00:14:04,910 --> 00:14:09,860
it can change based on what's going on inside of the loop, as opposed to if we were to put it outside

213
00:14:09,860 --> 00:14:11,750
of the loop, which we could do.

214
00:14:11,980 --> 00:14:18,260
You normally want to keep your variables as close as you can to where they're going to be used, and

215
00:14:18,260 --> 00:14:20,690
that has to do with something called scope.

216
00:14:20,900 --> 00:14:26,720
I may have mentioned the idea of scope earlier, but we'll talk about it a little bit more shortly.

217
00:14:26,930 --> 00:14:32,720
So let's see what this might look like if I introduce a new line here and I'm going to create a new

218
00:14:32,720 --> 00:14:42,290
variable that will be a string because I want it to hold a word either try or tries, depending on the

219
00:14:42,290 --> 00:14:44,510
value of the wrong guest count.

220
00:14:44,540 --> 00:14:45,020
OK.

221
00:14:45,320 --> 00:14:52,340
So I'm going to declare a string called, I don't know, try text.

222
00:14:52,700 --> 00:14:56,930
It's not a great name, but try text will equal.

223
00:14:57,350 --> 00:14:57,680
All right.

224
00:14:57,680 --> 00:15:00,740
So here's how we use a ternary operator.

225
00:15:01,160 --> 00:15:03,740
The first part of it is a.

226
00:15:04,830 --> 00:15:05,730
Criteria.

227
00:15:06,030 --> 00:15:11,970
Much the same as we would do within if block, so it would be, you know, whatever you put inside of

228
00:15:11,970 --> 00:15:15,540
the criteria like these criteria here, right?

229
00:15:15,630 --> 00:15:16,500
Something like that.

230
00:15:16,500 --> 00:15:22,080
So in this case, our criteria will be if the wrong guest count equals one.

231
00:15:22,200 --> 00:15:22,560
Right?

232
00:15:22,830 --> 00:15:28,560
So we can say that except we live off the if part, and we also don't need the parentheses.

233
00:15:28,560 --> 00:15:31,230
You can use parentheses, but we don't need it, really.

234
00:15:31,470 --> 00:15:36,990
So if the wrong guest count equals one?

235
00:15:37,410 --> 00:15:41,040
Now here's where the ternary stuff comes into play.

236
00:15:41,220 --> 00:15:44,220
The next thing we do is use a question mark.

237
00:15:44,520 --> 00:15:45,000
OK.

238
00:15:45,150 --> 00:15:53,550
This sets us up to use this compressed form of an if then statement basically, if wrong, guest count

239
00:15:53,550 --> 00:15:54,540
equals one.

240
00:15:54,810 --> 00:15:59,880
And maybe you want to think of this in this question mark in this case as maybe meaning like then I

241
00:15:59,880 --> 00:16:00,180
don't know.

242
00:16:00,180 --> 00:16:06,000
Or you may want to think of it as being like, if wrong guest count equals one, however you want to,

243
00:16:06,300 --> 00:16:08,280
you know, encode that in your head, right?

244
00:16:08,290 --> 00:16:16,980
But now the next thing we put here is what to return if this criteria is true.

245
00:16:17,790 --> 00:16:18,280
OK?

246
00:16:18,330 --> 00:16:28,600
So if wrong guest count equals one, then we want to return and set try text equal to the word try.

247
00:16:28,620 --> 00:16:29,370
Singular.

248
00:16:29,610 --> 00:16:30,960
So that's a string.

249
00:16:31,470 --> 00:16:34,440
So all we're going to say is quote Try.

250
00:16:34,890 --> 00:16:43,110
OK, so if wrong guest count equals one, then return the string try, which would then get set on this

251
00:16:43,110 --> 00:16:44,130
variable here.

252
00:16:44,130 --> 00:16:46,530
And then for the else part.

253
00:16:46,830 --> 00:16:52,200
Otherwise or else return, the word tries now for that.

254
00:16:52,320 --> 00:16:59,640
We use a colon and then the alternative string that we would want to return, which is tries, and then

255
00:16:59,640 --> 00:17:02,130
we can close out that whole entire statement.

256
00:17:02,550 --> 00:17:11,010
So let's read through this if wrong guest count equals one, then return try.

257
00:17:12,200 --> 00:17:15,170
Else return tries.

258
00:17:15,800 --> 00:17:22,430
That's what this construct is saying, and this is how you use the ternary operator, so it's really

259
00:17:22,670 --> 00:17:25,730
the combination of this question mark in this colon.

260
00:17:25,940 --> 00:17:27,060
It's pretty weird.

261
00:17:27,080 --> 00:17:28,080
I will admit, right?

262
00:17:28,220 --> 00:17:36,680
It's highly compressed form of if then else now, why would I prefer to do this over just using anything

263
00:17:36,680 --> 00:17:37,100
else?

264
00:17:37,280 --> 00:17:38,910
Well, I think it should be kind of clear.

265
00:17:38,930 --> 00:17:41,420
It's very, very concise, right?

266
00:17:41,420 --> 00:17:48,380
And I don't need to do much fanciness here with an if then else if I wanted to do a lot of different

267
00:17:48,380 --> 00:17:53,540
lines of things for the two clauses for the, you know, for the kind of like the positive and the negative

268
00:17:53,540 --> 00:17:59,900
clause, like, I wanted to add some numbers and then print some things out and then make a call out

269
00:17:59,900 --> 00:18:01,700
to some other method or whatever.

270
00:18:01,700 --> 00:18:03,110
If I wanted to do a bunch of stuff.

271
00:18:03,230 --> 00:18:07,100
I would not use the ternary operator for that.

272
00:18:07,340 --> 00:18:14,630
The ternary operator is most useful when you just want to have one simple thing that's being returned

273
00:18:14,780 --> 00:18:22,760
in the positive or negative case, and you want that thing that's being returned to be assigned to something

274
00:18:22,760 --> 00:18:26,240
immediately or utilized immediately in some way.

275
00:18:26,270 --> 00:18:26,690
OK.

276
00:18:26,930 --> 00:18:33,380
That's where the ternary operator is most useful in a short, sweet little thing like this.

277
00:18:33,800 --> 00:18:40,340
Anything more than this, and you probably want to be looking at using and then construct of some sort.

278
00:18:40,730 --> 00:18:41,090
All right.

279
00:18:41,390 --> 00:18:47,090
So now that we've got this try text variable here, now we just need to plug it in.

280
00:18:47,360 --> 00:18:53,630
So instead of hard coding, the word tries like we are doing here now, let's plug that in with the

281
00:18:53,630 --> 00:18:54,260
variable.

282
00:18:54,500 --> 00:18:57,250
And so this is a going to be a string.

283
00:18:57,260 --> 00:18:58,910
So this is a string, right?

284
00:18:59,300 --> 00:19:01,910
So here we're going to replace this with a string.

285
00:19:02,180 --> 00:19:11,210
So we need to use the format code percent s, which means string and then we need to bind our new try

286
00:19:11,210 --> 00:19:15,320
text variable to our print death at the end.

287
00:19:16,520 --> 00:19:19,130
Try text, let me be a little clear here.

288
00:19:19,220 --> 00:19:23,480
I think I mentioned this before, but let's just be really clear how this all works.

289
00:19:23,780 --> 00:19:27,020
So I default with print and format.

290
00:19:27,050 --> 00:19:33,360
Each replacement code or format string code that we're using here like the percent de percent de percent

291
00:19:33,360 --> 00:19:33,830
des.

292
00:19:33,920 --> 00:19:42,980
Each of these gets matched with a corresponding variable in the order in which they come by default.

293
00:19:43,010 --> 00:19:47,540
OK, so the first format code that I have here is a percent DX.

294
00:19:48,080 --> 00:19:53,940
And so the first variable that we're passing in as an argument will get matched to that.

295
00:19:53,960 --> 00:20:00,050
Then the next one is another percent DX, and that will get matched to the next argument that we're

296
00:20:00,050 --> 00:20:00,860
passing in.

297
00:20:01,070 --> 00:20:03,700
And then finally, we've got a string of percent.

298
00:20:04,280 --> 00:20:05,480
And there's the last one.

299
00:20:05,480 --> 00:20:09,410
So that's how these are matched up with each other by default.

300
00:20:09,680 --> 00:20:17,030
Now there are ways to specify which one of these you want using an index or something like that, but

301
00:20:17,030 --> 00:20:18,380
we're not needing that here.

302
00:20:18,380 --> 00:20:18,830
So.

303
00:20:19,040 --> 00:20:25,670
And I think I feel like few people usually feel that they need to use that mechanism.

304
00:20:25,670 --> 00:20:27,350
So this is pretty straightforward.

305
00:20:27,590 --> 00:20:28,220
All right.

306
00:20:28,670 --> 00:20:31,760
So let's try this now.

307
00:20:31,760 --> 00:20:32,780
So let's build.

308
00:20:33,410 --> 00:20:36,030
OK, and then let's run it.

309
00:20:36,860 --> 00:20:37,490
I think I'm going to.

310
00:20:38,490 --> 00:20:40,770
Clear first and then let's run it.

311
00:20:41,400 --> 00:20:43,350
All right, our random number is to.

312
00:20:44,430 --> 00:20:49,350
So first, let's try the case where we get it in one, so to.

313
00:20:50,730 --> 00:20:55,290
You got it in one try that looks like very good English to me.

314
00:20:55,320 --> 00:20:56,560
You got it in one try.

315
00:20:56,580 --> 00:20:57,150
Very good.

316
00:20:57,270 --> 00:20:59,010
OK, now let's run it again.

317
00:21:00,130 --> 00:21:02,320
And now let's take a few tries to get it.

318
00:21:02,350 --> 00:21:10,420
Let's take three tries to get it, so let's do a two and a five and a six.

319
00:21:11,440 --> 00:21:13,000
And now let's get it.

320
00:21:13,330 --> 00:21:15,160
So our number was, I think, four.

321
00:21:17,720 --> 00:21:18,590
You got it in four tries.

322
00:21:18,620 --> 00:21:19,570
Oh, well, OK.

323
00:21:19,930 --> 00:21:23,300
I wasn't counting correctly, but that's that's fine.

324
00:21:23,330 --> 00:21:26,720
So yeah, we did four guesses and we got it on the fourth guess.

325
00:21:27,290 --> 00:21:27,920
Very good.

326
00:21:28,220 --> 00:21:32,480
And notice now because we did more than one guess.

327
00:21:32,660 --> 00:21:35,250
It changed the word from try to Tris.

328
00:21:35,270 --> 00:21:39,770
So now we've got grammatically correct English, which I really care about.

329
00:21:40,100 --> 00:21:40,820
Oh, OK.

330
00:21:41,000 --> 00:21:49,700
Now one last thing that I said I wanted to mention here, I told you that I kind of intuitively felt

331
00:21:49,700 --> 00:21:54,050
like this variable belonged outside of the loop.

332
00:21:54,200 --> 00:21:57,440
So let's see what happens when we put it inside of the loop.

333
00:21:57,470 --> 00:21:59,150
Let's see if there's any difference here.

334
00:21:59,480 --> 00:22:05,900
So I'm going to move it in the loop by simply doing a an option shift down arrow.

335
00:22:05,970 --> 00:22:08,720
Yeah, I think this is fine, just anywhere in the loop.

336
00:22:08,720 --> 00:22:15,680
And then I'm going to woops, and then I'm going to indent it because it's inside of the body of this

337
00:22:15,680 --> 00:22:17,150
do loop now.

338
00:22:17,450 --> 00:22:17,750
All right.

339
00:22:17,750 --> 00:22:23,960
So let's see if this is OK, so we need to recompile or rebuild.

340
00:22:24,350 --> 00:22:24,740
All right.

341
00:22:25,160 --> 00:22:26,870
And I'm going to clear.

342
00:22:27,440 --> 00:22:28,790
And let's run it again.

343
00:22:30,840 --> 00:22:39,090
All right, so I'm going to intentionally take a few guesses to get this now, so five, six one, and

344
00:22:39,090 --> 00:22:40,260
now I will get it on.

345
00:22:40,770 --> 00:22:41,670
I'll do a couple more.

346
00:22:42,850 --> 00:22:44,920
Seven and now I will get it.

347
00:22:46,220 --> 00:22:47,990
Ah, look, what happened there.

348
00:22:48,230 --> 00:22:49,910
You got it in one try.

349
00:22:50,090 --> 00:22:55,940
So even though I did like five tries here, it says I got it in one try.

350
00:22:56,060 --> 00:22:57,260
So what's going on here?

351
00:22:57,980 --> 00:23:04,160
So this gets into what I briefly mentioned a little bit ago, which is the concept of scope.

352
00:23:04,880 --> 00:23:06,720
And so what's happening here?

353
00:23:06,740 --> 00:23:08,390
Let me make a little bit of room.

354
00:23:08,780 --> 00:23:10,250
I'm going to close that now.

355
00:23:10,520 --> 00:23:10,760
All right.

356
00:23:10,760 --> 00:23:20,960
So what happened is now that this variable is being declared inside of the while loop here, this variable

357
00:23:20,960 --> 00:23:31,580
has what is called a local scope, and that scope refers to how long a variable lives, essentially.

358
00:23:31,670 --> 00:23:32,150
OK.

359
00:23:32,660 --> 00:23:41,570
And the bottom line here is that variables that are declared inside of a loop and there are other structures

360
00:23:41,570 --> 00:23:48,050
too that we'll talk about, but a variable that's declared inside of a loop body like this one only

361
00:23:48,050 --> 00:23:53,660
remembers its values while it's in one iteration of that loop.

362
00:23:54,200 --> 00:23:56,630
So let's look at what that looks like.

363
00:23:56,840 --> 00:24:03,290
So we enter this loop and then we initialize its value to one.

364
00:24:03,470 --> 00:24:05,420
Then we take a guess.

365
00:24:06,510 --> 00:24:14,100
And if we guess incorrectly, we jump down here where we increment this variable by one, so now it's

366
00:24:14,100 --> 00:24:15,030
set to two.

367
00:24:16,340 --> 00:24:18,800
And then the loop repeats.

368
00:24:19,310 --> 00:24:27,170
Now here's the thing, as soon as this loop repeats any variables that are declared within this loop,

369
00:24:27,440 --> 00:24:31,700
reset back to their initialized state.

370
00:24:31,940 --> 00:24:39,290
So in this case, even though down here we incremented this from one to two the first time through when

371
00:24:39,290 --> 00:24:44,990
we loop back up again, this line of code executes again.

372
00:24:45,290 --> 00:24:50,420
And this variable gets reset to one again.

373
00:24:51,350 --> 00:24:57,860
Not at all what we want because it prevents us from being able to keep track of how many times we're

374
00:24:57,860 --> 00:24:59,480
iterating through this loop.

375
00:25:00,260 --> 00:25:08,780
And so that's why I intuitively, if you want to call it that, understood that this variable, if I

376
00:25:08,780 --> 00:25:17,810
wanted to maintain its state and that's a programmer terminology, which means remembering if I wanted

377
00:25:17,990 --> 00:25:28,460
to maintain this, the state of this variable, I needed to declare it outside of this loop so that

378
00:25:28,460 --> 00:25:38,390
whatever number we recorded on this variable would be retained or remembered across multiple iterations

379
00:25:38,450 --> 00:25:39,500
of this loop.

380
00:25:39,650 --> 00:25:46,040
And what I mean by iteration is just each time we go through this loop, right?

381
00:25:46,160 --> 00:25:50,920
So each time you go through the loop, that's one iteration or an iteration.

382
00:25:50,930 --> 00:25:57,470
OK, so we're iterating through this loop so many times each time that we guess wrong, for example,

383
00:25:57,620 --> 00:25:59,220
and we want to keep track of that.

384
00:25:59,240 --> 00:25:59,690
OK.

385
00:25:59,900 --> 00:26:03,650
So this is a really important concept, the concept of scope.

386
00:26:03,830 --> 00:26:08,060
Now we see this concept in other places besides just loops.

387
00:26:08,270 --> 00:26:18,260
In fact, in general, any time you declare a variable within a code block and if you will recall,

388
00:26:18,260 --> 00:26:23,330
a code block generally is just any block of code inside of curly braces.

389
00:26:23,810 --> 00:26:30,440
OK, now there are other smaller scopes of code blocks that are even smaller than what's in a curly

390
00:26:30,710 --> 00:26:31,190
brace.

391
00:26:31,490 --> 00:26:40,280
But the easiest way to recognize a code block is any time you've got one or more lines of code in between

392
00:26:40,490 --> 00:26:43,400
two curly braces, OK, like I have here.

393
00:26:43,820 --> 00:26:53,330
So any variables that are declared within a code block typically only have scope within that code block,

394
00:26:53,330 --> 00:27:01,220
which means that as soon as the thread leaves, that code block the little character that I mentioned

395
00:27:01,220 --> 00:27:05,300
earlier who reads and executes each line of code.

396
00:27:05,300 --> 00:27:13,540
As soon as he leaves a code block, the variables that were declared in that code black ceased to exist.

397
00:27:13,550 --> 00:27:15,170
They disappear, OK?

398
00:27:15,350 --> 00:27:22,730
And then they only come back into existence fresh when the thread comes back into that code block.

399
00:27:22,910 --> 00:27:23,360
OK.

400
00:27:24,330 --> 00:27:26,820
So that's a really important thing to know.

401
00:27:27,000 --> 00:27:32,670
So a couple of really common places where you'll see that behavior are in loops, obviously.

402
00:27:32,940 --> 00:27:35,410
Another one is just in methods themselves.

403
00:27:35,430 --> 00:27:35,850
OK?

404
00:27:36,090 --> 00:27:42,990
Any variables that are declared within a method will lose their value after the thread leaves those

405
00:27:42,990 --> 00:27:48,900
methods, and those are called local variables because they are local to that block of code.

406
00:27:48,930 --> 00:27:49,260
All right.

407
00:27:49,260 --> 00:27:57,720
So with that being said, we now know that this line here has to be outside of the code block in order

408
00:27:57,720 --> 00:27:59,040
to be remembered.

409
00:28:01,220 --> 00:28:08,180
And then I will unindicted again now, oh, so one last thing I want to mention about this scoping of

410
00:28:08,180 --> 00:28:08,990
variables.

411
00:28:09,710 --> 00:28:16,970
Now you might be inclined to just keep all variables as global as you possibly can.

412
00:28:17,000 --> 00:28:23,540
So, for example, just declaring every single variable in your program as high up in the program as

413
00:28:23,540 --> 00:28:24,500
you possibly can.

414
00:28:24,500 --> 00:28:27,800
So in this case, that would mean putting them all around in here.

415
00:28:28,370 --> 00:28:33,560
That would be a mistake, though you don't want to do that because that can potentially be a little

416
00:28:33,560 --> 00:28:36,140
wasteful of memory and resources.

417
00:28:36,530 --> 00:28:42,050
What you want to do instead is you have to actually do a little thinking and analyze, where will I

418
00:28:42,050 --> 00:28:50,510
need access to any given variable and how long will that variable need to retain its data?

419
00:28:50,870 --> 00:28:56,480
You want to keep variables as local to where they're going to be used as possible.

420
00:28:56,570 --> 00:29:04,220
Which is why online 15, I put this particular variable right above the place where I'm going to use

421
00:29:04,220 --> 00:29:15,470
it because I only need this variable right here, and it does not need to retain its value past my use

422
00:29:15,470 --> 00:29:16,310
of it right here.

423
00:29:16,340 --> 00:29:20,690
So each time we iterate through this loop, it needs to be reset anyway.

424
00:29:21,020 --> 00:29:28,430
So why not just declare it and set it as closely to the place where I'm going to use it as possible?

425
00:29:28,850 --> 00:29:33,890
Now, I very well could have declared this variable up here, and that wouldn't have been wrong.

426
00:29:34,190 --> 00:29:43,670
Technically, it would have worked, but now I'd be retaining a value longer than it needed to exist.

427
00:29:44,030 --> 00:29:49,640
And one more thing that I will introduce you to, we won't go into any detail on it right now, but

428
00:29:49,640 --> 00:29:55,370
I will say that Java is a language that has something called garbage collection.

429
00:29:55,820 --> 00:30:04,040
And what that means is when we create objects in Java, you know that they take up space in memory.

430
00:30:04,160 --> 00:30:12,230
But when we declare a variable at various scopes, such as a local scope, when the thread leaves that

431
00:30:12,230 --> 00:30:20,420
scope, those variables are then allowed to be garbage collected within the Java language.

432
00:30:20,630 --> 00:30:28,700
And so that means that the space that those objects are taking up in memory can be reclaimed and reused.

433
00:30:29,270 --> 00:30:29,780
OK.

434
00:30:29,840 --> 00:30:39,200
So in this case of the try text variable here, as soon as the thread leaves the scope of this do while

435
00:30:39,710 --> 00:30:45,500
loop, this variable can be garbage collected by Java.

436
00:30:45,800 --> 00:30:51,350
And when I say by Java specifically, there's something called the JVM, which is the Java virtual machine,

437
00:30:51,350 --> 00:30:56,240
and that's what's actually managing all of the behind the scenes of our program.

438
00:30:56,250 --> 00:30:56,600
OK?

439
00:30:56,780 --> 00:31:01,770
So the JVM is allowed to garbage collect this variable.

440
00:31:01,790 --> 00:31:05,240
Now we don't have a whole lot of control over when that happens.

441
00:31:05,570 --> 00:31:07,050
It may happen immediately.

442
00:31:07,070 --> 00:31:07,790
It may not.

443
00:31:08,260 --> 00:31:12,950
The JVM will decide when is it best for it to collect the garbage?

444
00:31:13,220 --> 00:31:21,170
But if we were to run this program's loop and and guess incorrectly one million times really, really

445
00:31:21,170 --> 00:31:27,890
quickly, and there was no garbage collection, then you would end up with one million string objects

446
00:31:27,890 --> 00:31:33,710
in memory and they would not ever get collected for garbage, right as garbage.

447
00:31:33,830 --> 00:31:37,850
And that would be bad for the utilization of the memory in the computer.

448
00:31:38,050 --> 00:31:44,510
And so that's one of the main reasons why we want to declare variables as close to where they're going

449
00:31:44,510 --> 00:31:50,480
to be used as possible so that they get every opportunity to be garbage collected as soon as they're

450
00:31:50,480 --> 00:31:56,360
no longer needed so that we're not being wasteful with the the computer systems, memory and things

451
00:31:56,360 --> 00:31:56,990
of that sort.

452
00:31:57,140 --> 00:32:00,560
So we'll try to talk more about this in subsequent lessons.

453
00:32:00,560 --> 00:32:04,370
But I wanted to kind of introduce you to these concepts a little bit now.

454
00:32:04,880 --> 00:32:11,510
So with that, I am going to close this lesson and I will see you in the next one.
