1
00:00:00,840 --> 00:00:09,450
All right, so we left off in the last lesson with learning probably the most concise way to implement

2
00:00:09,450 --> 00:00:17,130
this default case, which was to implement an anonymous class, which is all of this bit here.

3
00:00:17,280 --> 00:00:17,670
Right?

4
00:00:18,030 --> 00:00:20,100
So just a very brief recap.

5
00:00:20,110 --> 00:00:26,490
An anonymous class is just a class definition where you don't actually even mention a name.

6
00:00:26,910 --> 00:00:34,020
You just mentioned the type for the class, either by interface or by super class.

7
00:00:34,050 --> 00:00:35,910
So here we have new employee.

8
00:00:35,940 --> 00:00:36,300
Right?

9
00:00:36,600 --> 00:00:44,370
So this would result in a new class being created with no name that extends employee in this case,

10
00:00:44,370 --> 00:00:50,190
because employee is a class and not an interface, it happens to be a class and not an interface, but

11
00:00:50,190 --> 00:00:52,110
we could have used an interface as well.

12
00:00:52,440 --> 00:00:56,880
So this would result in a new class that extends employee that doesn't have a name that implements the

13
00:00:56,880 --> 00:01:01,050
get salary method and returns a hardcoded zero.

14
00:01:01,230 --> 00:01:01,680
OK.

15
00:01:01,830 --> 00:01:07,320
And then it also creates the instance to it doesn't just create the class, it also creates one instance

16
00:01:07,560 --> 00:01:14,400
and returns that instance if this particular default case of this switch statement is called.

17
00:01:15,270 --> 00:01:15,640
All right.

18
00:01:15,660 --> 00:01:21,750
So I did mention, though, that there's yet an even more concise way to do this.

19
00:01:21,900 --> 00:01:23,670
And that's what we're going to learn now.

20
00:01:24,000 --> 00:01:33,950
So the even more concise technique is to use what's called a lambda and lambdas are somewhat newish

21
00:01:33,960 --> 00:01:36,550
to Java as of Java version eight.

22
00:01:36,570 --> 00:01:42,510
So I mean, we're on 16 now, so it's not that new, but I'd say that in many ways, in many respects,

23
00:01:42,510 --> 00:01:50,130
lambda lambdas are still somewhat new ish in Java because there are so many Java developers who still

24
00:01:50,130 --> 00:01:53,310
haven't really fully embraced using lambdas.

25
00:01:53,640 --> 00:01:59,490
And I think one of the reasons for that is because lambdas are really part of a completely different

26
00:01:59,490 --> 00:02:04,290
programming paradigm than that which Java was mostly based on.

27
00:02:04,290 --> 00:02:07,410
So Java is an object oriented language.

28
00:02:07,710 --> 00:02:16,080
Any time we want to pass data and or behavior together around in code, we traditionally have had to

29
00:02:16,080 --> 00:02:17,800
do that via object.

30
00:02:17,820 --> 00:02:21,570
So here we're creating this class with no name.

31
00:02:21,750 --> 00:02:27,840
But the end result is going to be an object that looks like an employee because it will be an object

32
00:02:27,840 --> 00:02:32,190
that extends employee and has this method get salary that returns to zero.

33
00:02:32,220 --> 00:02:34,800
OK, so the end result of this is an object.

34
00:02:34,810 --> 00:02:40,650
Each of these lines here with the new operator are going to result in the creation of an object, right?

35
00:02:41,010 --> 00:02:46,690
Even though in the end, pretty much the only thing we're going to use that object for is to call it

36
00:02:46,690 --> 00:02:49,110
get salary and get a number out of it.

37
00:02:49,140 --> 00:02:51,810
So anyway, Java is an object oriented language.

38
00:02:52,020 --> 00:02:59,880
Lambdas, on the other hand, are a concept that became probably most popularized by languages that

39
00:02:59,880 --> 00:03:04,860
typically follow a different programming paradigm, which is called functional programming.

40
00:03:05,040 --> 00:03:11,520
So in object oriented languages like Java, objects are the lingua franca, if you will, right?

41
00:03:11,520 --> 00:03:19,350
They are the main currency of the language in functional languages, though functions which you may

42
00:03:19,350 --> 00:03:24,180
know here more as methods sort of functions are the primary currency.

43
00:03:24,210 --> 00:03:24,720
OK.

44
00:03:25,440 --> 00:03:32,820
And so in functional languages, functions can exist on their own in Java.

45
00:03:33,030 --> 00:03:40,230
Generally speaking, prior to Java eight especially methods which are essentially functions that live

46
00:03:40,230 --> 00:03:43,560
inside of an object, methods could not live on their own.

47
00:03:43,590 --> 00:03:49,260
They they had little to no meaning outside of an object or a class, right?

48
00:03:49,680 --> 00:03:56,430
So in a functional language, if this get salary is really the thing that we're after and that we're

49
00:03:56,430 --> 00:03:58,830
wanting to do in a functional language.

50
00:03:58,950 --> 00:04:08,040
You might be able to just define a get salary method or reference a get salary method on its own without

51
00:04:08,040 --> 00:04:09,660
an object, without a class.

52
00:04:09,960 --> 00:04:14,760
And just say, Hey, just call this get salary because that's really the thing we care about.

53
00:04:15,030 --> 00:04:21,300
So with the inclusion of lambdas, we now have the ability to actually do this in a pretty cool way.

54
00:04:21,540 --> 00:04:25,920
And that, in turn, allows our code to get much more concise.

55
00:04:26,370 --> 00:04:33,510
So let's just remember really quickly how this default case is actually being used and in fact, how

56
00:04:33,510 --> 00:04:35,550
each of these cases are actually being used.

57
00:04:35,820 --> 00:04:42,360
So we have this method create employee that takes a string of text, and this is an example of one of

58
00:04:42,360 --> 00:04:43,890
those strings of tax write.

59
00:04:43,890 --> 00:04:45,960
It's just one of those lines of an employee.

60
00:04:46,410 --> 00:04:56,460
And then we create a matter for that text and then we test to make sure that that text matches the regular

61
00:04:56,460 --> 00:04:59,750
expression that is described by this, by this matter.

62
00:04:59,890 --> 00:05:04,450
So we're just making sure that this text is in is in this format, that's all we're saying.

63
00:05:04,570 --> 00:05:13,900
OK, so if this text is in this format, last name, first name, date of birth role and then some extra

64
00:05:13,900 --> 00:05:19,980
stuff there, if it's in that exact format, then we proceed with the rest of this code, right?

65
00:05:20,260 --> 00:05:22,390
And so we set up a switch statement.

66
00:05:22,390 --> 00:05:29,950
We extract whatever word is in the role field of this text, which would be this bit right here.

67
00:05:30,310 --> 00:05:31,420
We extract that.

68
00:05:31,540 --> 00:05:38,170
So in this particular case, if this comment that string was the input into this method call, then

69
00:05:38,170 --> 00:05:44,350
the people Matt Dart group role would result in the word analyst coming out of this switch statement

70
00:05:44,350 --> 00:05:44,860
here, OK?

71
00:05:45,010 --> 00:05:50,390
And then the Switch statement would simply say This Programmer Match Analyst is manager of a Match Analyst

72
00:05:50,410 --> 00:05:53,230
is analyst, match analyst, which the answer would be yes.

73
00:05:53,440 --> 00:05:58,870
And so then it would call this line to create a new analyst and then pass in that same string here.

74
00:05:59,020 --> 00:06:01,060
And then that would create that object.

75
00:06:01,960 --> 00:06:08,800
Now, in the event, though, that nothing matches, let's say, because the word is not any of these

76
00:06:08,800 --> 00:06:16,390
words, then it would call this default case, in which case it would now create a new object that extends

77
00:06:16,390 --> 00:06:21,280
employee that has a method called get salary that returns a zero.

78
00:06:21,520 --> 00:06:23,230
OK, so that was our behavior.

79
00:06:23,230 --> 00:06:27,340
I'm just doing a very quick reminder of what this logic was doing.

80
00:06:27,610 --> 00:06:32,410
So then if we go over here to the code, that's actually using that, here's where we're calling Create

81
00:06:32,420 --> 00:06:34,330
Employee the method we were just looking at.

82
00:06:34,450 --> 00:06:38,680
Here's where we're passing in one line at a time of this text up here.

83
00:06:38,950 --> 00:06:47,320
And then this method will return an object of type employee and then we're able to call print line on

84
00:06:47,320 --> 00:06:53,620
it, which under normal circumstances will just print the last name, first name and and the amount,

85
00:06:53,620 --> 00:06:53,950
right?

86
00:06:54,190 --> 00:06:59,620
And then we take that amount, the salary and then we add it to our total right.

87
00:07:00,040 --> 00:07:01,570
So that's what we're doing here.

88
00:07:01,660 --> 00:07:02,090
All right.

89
00:07:02,110 --> 00:07:08,980
So you might have wondered or you might start to wonder, how come this default couldn't just return

90
00:07:08,980 --> 00:07:09,910
the number zero?

91
00:07:10,270 --> 00:07:16,900
And the reason would be because if we go back over to main again, if we just directly returned zero,

92
00:07:16,930 --> 00:07:21,580
yes, we could do the total salaries, which is arguably the most important part.

93
00:07:21,580 --> 00:07:26,560
But we had this secondary bit here that was trying to print a first name in the last name as well.

94
00:07:26,560 --> 00:07:33,940
So in other words, if you want to be able to interact with more than one piece of data from that object

95
00:07:33,940 --> 00:07:40,120
or from these objects that would be here, then you're going to have to typically deal with the entire

96
00:07:40,120 --> 00:07:45,640
object and not just one piece of data that was in the object, right?

97
00:07:45,640 --> 00:07:49,780
And that was kind of the whole point of why I contrived this in this way.

98
00:07:50,590 --> 00:07:51,010
All right.

99
00:07:51,100 --> 00:07:59,140
So that means if we go back to the employee class again, we kind of sort of do need to be returning

100
00:07:59,140 --> 00:08:02,350
an object still sort of kind of right.

101
00:08:02,650 --> 00:08:12,070
But let us be clear that really, out of all of this anonymous class here, the only bits that really

102
00:08:12,070 --> 00:08:17,000
matter to us are, most importantly, returning to zero.

103
00:08:17,020 --> 00:08:23,320
And secondarily to that, just having this method here, the rest of it is just a bunch of what I call

104
00:08:23,320 --> 00:08:28,120
boilerplate code, which is just, you know, a lot of noise, really.

105
00:08:28,360 --> 00:08:34,300
This piece we shouldn't really need to say and a lot of this, you know, curly braces and all that

106
00:08:34,300 --> 00:08:35,770
stuff, that's just noise.

107
00:08:36,490 --> 00:08:42,160
So having said all of that, I will now show you how we can do this using a lambda.

108
00:08:42,610 --> 00:08:48,950
So what we really care about is a method that takes no input and returns a zero.

109
00:08:49,090 --> 00:08:49,450
Right?

110
00:08:49,570 --> 00:08:53,110
So we can express that as a lambda very easily.

111
00:08:53,320 --> 00:09:02,290
And all we have to say is this a method is a method that takes no input is expressed as opening and

112
00:09:02,290 --> 00:09:05,820
closing curly braces, and it returns a zero.

113
00:09:05,830 --> 00:09:11,710
So to see returns, a method that takes the input that returns zero, we would use an arrow.

114
00:09:13,360 --> 00:09:14,800
And then zero.

115
00:09:15,890 --> 00:09:17,030
And then semicolon.

116
00:09:17,480 --> 00:09:19,280
And that's a lambda expression.

117
00:09:19,400 --> 00:09:24,830
This is a lambda expression for a method that takes no inputs and returns a zero.

118
00:09:25,010 --> 00:09:27,590
Now you'll notice I'm getting a squiggly red line.

119
00:09:27,710 --> 00:09:34,460
If I hover my cursor, I'm getting an error saying target type of lambda conversion must be an interface.

120
00:09:34,760 --> 00:09:41,200
So what's happening here is that Java is still fundamentally an object oriented language.

121
00:09:41,210 --> 00:09:48,500
So even when we can work with lambdas, what basically ends up happening underneath the hood is that

122
00:09:48,710 --> 00:09:57,410
Java will try to take this lambda expression and it will try to inspect what is the data type that is

123
00:09:57,410 --> 00:09:59,930
expected to be returned here.

124
00:10:00,350 --> 00:10:06,140
And so it will look and see that this is a switch expression that is returning something.

125
00:10:06,410 --> 00:10:14,840
And it will see that ultimately this return from this switch expression is part of a method whose return

126
00:10:14,840 --> 00:10:16,010
type is employee.

127
00:10:16,220 --> 00:10:24,260
So Java smart enough to kind of trace up this tree, if you will, and see, OK, this switch is supposed

128
00:10:24,260 --> 00:10:30,860
to return employees and therefore this default case here should return something that looks like an

129
00:10:30,860 --> 00:10:31,640
employee.

130
00:10:32,090 --> 00:10:40,850
So then Java will look at this class at this data type employee and try to determine, is there one

131
00:10:40,850 --> 00:10:50,000
method on this data type that I can match to this signature and a signature again, is just the the

132
00:10:50,000 --> 00:10:51,170
description of the method.

133
00:10:51,200 --> 00:10:54,950
So in this case, a method that takes no inputs and returns an integer.

134
00:10:55,160 --> 00:11:03,770
OK, now in this particular case, Java is unable to make that determination with this data type.

135
00:11:04,040 --> 00:11:15,890
But if I were to use an interface here that declares one method on it that matches this signature,

136
00:11:16,100 --> 00:11:17,720
then Java would be able to do that.

137
00:11:18,050 --> 00:11:20,930
Now do we have an interface like that anywhere?

138
00:11:22,630 --> 00:11:26,090
Yeah, we do we have this interface right here, I employee.

139
00:11:26,110 --> 00:11:27,310
Let's go take a look at it.

140
00:11:27,640 --> 00:11:31,150
I employee defines exactly one method.

141
00:11:31,570 --> 00:11:38,170
It defines a method that takes no inputs and returns one integer.

142
00:11:38,530 --> 00:11:42,940
That's exactly the method signature we're looking for.

143
00:11:43,090 --> 00:11:50,170
And so if we jump back over here to employee, what we can do is if we were to change this signature

144
00:11:51,130 --> 00:11:57,700
of create employee to return, not an employee, but to return an AI employee instead.

145
00:11:59,790 --> 00:12:01,650
Like, so look at that.

146
00:12:02,220 --> 00:12:03,720
That error goes away.

147
00:12:04,730 --> 00:12:08,280
Now that does create another error, though.

148
00:12:08,640 --> 00:12:16,050
And if we come up here and click, we can see, OK, so now the next error is that this method is returning

149
00:12:16,060 --> 00:12:17,250
an employee.

150
00:12:17,490 --> 00:12:23,490
But what was expected here is an employee, not an AI employee.

151
00:12:23,850 --> 00:12:30,780
And so one easy thing we could do quickly to fix that is to switch this from employee to AI employee

152
00:12:31,470 --> 00:12:32,820
because they're compatible, right?

153
00:12:32,850 --> 00:12:33,160
All right.

154
00:12:33,180 --> 00:12:34,620
And so that error went away.

155
00:12:34,850 --> 00:12:38,100
Then we jump back over to the employee class again.

156
00:12:38,100 --> 00:12:45,210
We've got one more issue to deal with, and that is the fact that we've got another creation of of a

157
00:12:45,210 --> 00:12:47,850
class instance from the dummy employee.

158
00:12:48,000 --> 00:12:49,710
Now we could handle this in a couple of ways.

159
00:12:49,860 --> 00:12:55,680
We could just replace it with this same lambda or we could fix this dummy employee.

160
00:12:56,160 --> 00:12:57,000
Maybe I'll do both.

161
00:12:57,300 --> 00:13:02,330
So we've got this dummy employee that extends employee so we can fix this in a couple of ways.

162
00:13:02,340 --> 00:13:07,740
Also, one way is that I could go up to the definition of the employee class, which is at the very

163
00:13:07,740 --> 00:13:08,250
top here.

164
00:13:08,250 --> 00:13:15,690
And I could just say employee implements I employee, which we had done once before.

165
00:13:17,600 --> 00:13:19,280
Woops, I missed my --.

166
00:13:19,460 --> 00:13:20,000
There we go.

167
00:13:21,300 --> 00:13:23,430
And I prefer to have a space there.

168
00:13:23,640 --> 00:13:26,070
And now all the errors have gone away.

169
00:13:26,250 --> 00:13:28,020
So that's one way I could do that.

170
00:13:28,200 --> 00:13:31,410
I'm going to show you a couple of others just to remind you or.

171
00:13:33,740 --> 00:13:43,250
I could come down here and say that this dummy employee extends employee and also implements I employee.

172
00:13:45,070 --> 00:13:51,790
And then when I come up here, no problem here anymore, right, so I could do that or I could just

173
00:13:51,790 --> 00:13:56,500
replace this with another lambda expression.

174
00:14:01,410 --> 00:14:06,990
In fact, the same lambda expression right there, or I could use a different one, I could return a

175
00:14:06,990 --> 00:14:08,460
different number if I wanted to.

176
00:14:09,090 --> 00:14:09,510
OK.

177
00:14:11,600 --> 00:14:12,470
So either way.

178
00:14:12,830 --> 00:14:21,170
So what ends up happening here is that Java sees this expression, which is describing a method that

179
00:14:21,170 --> 00:14:23,390
takes no inputs and returns an integer.

180
00:14:23,510 --> 00:14:29,090
It sees that the return type as I am employee, it goes and looks at an employee and says, Does this

181
00:14:29,090 --> 00:14:31,160
interface have just one method on it?

182
00:14:31,160 --> 00:14:35,810
Because if this interface had multiple methods on it, that would be problematic, especially if it

183
00:14:35,810 --> 00:14:38,780
had multiple methods on it with the same signature.

184
00:14:39,050 --> 00:14:41,840
So different names, but the same signature.

185
00:14:42,020 --> 00:14:43,190
That would be a problem.

186
00:14:43,200 --> 00:14:49,430
So to keep it easy, Java's expecting that we're referring to an interface that only defines one method

187
00:14:49,430 --> 00:14:50,000
on it.

188
00:14:50,450 --> 00:14:55,490
And then that one method had better have the same signature as our lambda expression.

189
00:14:55,490 --> 00:14:56,960
And in this case, it does.

190
00:14:57,200 --> 00:15:03,080
And so it says, Ah, OK, so here's what I'm going to do, then I'm going to create an object.

191
00:15:03,530 --> 00:15:04,670
So Java does this.

192
00:15:04,880 --> 00:15:13,280
Java creates an object that implements the I employee interface and has a method on it called get salary

193
00:15:14,090 --> 00:15:15,290
and then it.

194
00:15:15,290 --> 00:15:19,700
For the body of that, new objects get salary method.

195
00:15:21,220 --> 00:15:24,340
It simply returns zero in this particular case.

196
00:15:24,490 --> 00:15:29,440
OK, so it takes whatever we put here on the right side of this arrow and makes that become the body

197
00:15:29,440 --> 00:15:30,250
of that method.

198
00:15:30,610 --> 00:15:36,430
What's nice for us is that we don't have to type all that boilerplate new class, blah, blah blah,

199
00:15:36,670 --> 00:15:41,770
you know, all of these things and describe and mention the name of a method and all of that.

200
00:15:41,830 --> 00:15:48,230
We can just get right down to pretty much the most minimal bit of information we need to provide.

201
00:15:48,250 --> 00:15:58,060
And then Java will kind of wrap this inside of a brand new object of whatever type it can infer, and

202
00:15:58,060 --> 00:16:00,120
it figures that out by looking at the return type.

203
00:16:00,130 --> 00:16:05,380
OK, so I know that's a lot of words to describe that, but I just wanted to make this not so magical

204
00:16:05,380 --> 00:16:08,980
for you so that in order to make sure you're actually getting it, OK?

205
00:16:09,310 --> 00:16:10,320
So look at that.

206
00:16:10,330 --> 00:16:11,980
That's pretty awesome, isn't it?

207
00:16:12,400 --> 00:16:17,380
And you know, let's go ahead and run this real quick because there is one tiny little bit that you

208
00:16:17,380 --> 00:16:19,180
might be a little less crazy about.

209
00:16:19,180 --> 00:16:21,160
But I think in this case, it's not a big deal.

210
00:16:21,160 --> 00:16:22,510
So if we run this now.

211
00:16:24,270 --> 00:16:24,690
All right.

212
00:16:24,930 --> 00:16:29,730
Yeah, well, we're still getting eight point six mil if we come up here, though, you'll notice that

213
00:16:29,730 --> 00:16:32,430
the second person or employee.

214
00:16:32,580 --> 00:16:39,720
And if you remember in our data list here, we made the second one have a role that doesn't match any

215
00:16:39,720 --> 00:16:43,440
of the other roles so that we would know that it would result in that default case.

216
00:16:43,440 --> 00:16:46,800
Getting called, I put a bunch of Z's on the end of a programmer, right?

217
00:16:47,130 --> 00:16:54,360
So for the other, more normal employee types, employees, we, you know, pronounce their last name,

218
00:16:54,360 --> 00:16:55,710
first name, et cetera, et cetera.

219
00:16:55,830 --> 00:17:03,030
But for this lambda one now that has been built from a dynamically defined object, essentially, the

220
00:17:03,030 --> 00:17:09,180
two string method on it isn't a two string method that we have written because we didn't supply one

221
00:17:09,180 --> 00:17:09,630
for it.

222
00:17:09,780 --> 00:17:14,190
And so the default behavior now is just to do a bunch of this.

223
00:17:14,520 --> 00:17:14,970
OK.

224
00:17:15,480 --> 00:17:21,450
So in this particular case, that's the best that I think Java's going to do for us because we can't

225
00:17:21,450 --> 00:17:28,700
supply with our lambda a description, a definition for both the two string method and the get salary.

226
00:17:28,710 --> 00:17:29,020
OK?

227
00:17:29,040 --> 00:17:32,460
We can only supply one method, if you will.

228
00:17:32,490 --> 00:17:32,970
OK.

229
00:17:33,030 --> 00:17:34,440
And that was our get salary.

230
00:17:34,450 --> 00:17:41,400
So Java does its best to say OK, well, objects that are created to enclose a lambda.

231
00:17:41,640 --> 00:17:47,430
If you call the two string method on them, this is what you're going to get the class name of the type.

232
00:17:47,670 --> 00:17:53,700
And then the fact that it's a lambda and maybe I don't know, maybe this is a memory location or something.

233
00:17:53,700 --> 00:17:56,590
I'm not even sure what all of that is, but that's what you get from it.

234
00:17:56,910 --> 00:17:58,770
But I think that's pretty cool.

235
00:17:58,770 --> 00:18:00,450
Let's go look at it one last time.

236
00:18:00,840 --> 00:18:02,250
Super concise.

237
00:18:03,330 --> 00:18:10,680
So we're going to learn more about lambdas and quite a few other cool constructs with newer versions

238
00:18:10,680 --> 00:18:12,590
of Java and another module.

239
00:18:12,600 --> 00:18:19,350
But I wanted to go ahead and give you a sneak preview of this concept here because it works so perfectly

240
00:18:19,560 --> 00:18:25,920
in line with all of these other techniques that I've been leading up to this with nested classes and

241
00:18:25,920 --> 00:18:28,830
inner classes and anonymous classes.

242
00:18:29,100 --> 00:18:36,060
And the most logical conclusion of all of that, in many cases, is a lambda, which we just didn't

243
00:18:36,060 --> 00:18:37,800
have access to those before Java.

244
00:18:37,800 --> 00:18:38,190
Eight.

245
00:18:38,640 --> 00:18:38,980
All right.

246
00:18:39,000 --> 00:18:42,330
So this is going to wrap this one up and I'll see you in the next one.
