WEBVTT
1
00:00:00.570 --> 00:00:01.500
Hey, welcome back.

2
00:00:02.100 --> 00:00:09.000
So I've decided to throw in a bonus topic in this course because I'm actually having a little too much

3
00:00:09.000 --> 00:00:12.930
fun teaching you how to build this crud repository stuff.

4
00:00:13.530 --> 00:00:17.850
So you are more than welcome to skip over the next lesson or two.

5
00:00:17.850 --> 00:00:23.310
I don't know how many lessons I will break this topic down into, but I think this is going to be pretty

6
00:00:23.310 --> 00:00:29.190
cool because what we're going to do here is to further improve the functionality of our credit repository

7
00:00:29.190 --> 00:00:30.120
a little bit more.

8
00:00:30.150 --> 00:00:30.540
OK.

9
00:00:31.350 --> 00:00:36.780
So I got to thinking while I was looking through here and I was really enjoying what we did, but there

10
00:00:36.780 --> 00:00:44.360
was at least one aspect of this people repository that didn't entirely completely sit well with me.

11
00:00:44.550 --> 00:00:51.120
And that was the fact that in order to convey to the credit repository the sequel statements that we

12
00:00:51.120 --> 00:00:58.050
need for the various functions, we had to pepper this class with these extra getter methods here to

13
00:00:58.050 --> 00:01:04.050
get the Save sequel and get the whatever the other sequel you get, the find by ID and the Find All

14
00:01:04.050 --> 00:01:06.120
in the Count sequel and so on and so forth.

15
00:01:06.480 --> 00:01:12.420
That did not sit well with me because I know that there are frameworks that enable us to do this kind

16
00:01:12.420 --> 00:01:14.040
of thing in a better way.

17
00:01:14.190 --> 00:01:19.440
And so what we're going to do in this topic, however many lessons I decided to break it down into.

18
00:01:19.770 --> 00:01:26.250
We're going to give our credit repository the ability to get the SQL queries without having to implement

19
00:01:26.250 --> 00:01:27.870
these abstract methods.

20
00:01:27.900 --> 00:01:28.360
OK.

21
00:01:28.680 --> 00:01:33.840
And in so doing, you're going to learn another technique that I wasn't planning to teach in this course,

22
00:01:33.990 --> 00:01:37.230
which is called the Java Reflection API.

23
00:01:37.380 --> 00:01:44.550
The Reflection API is pretty much only used by frameworks, but it just so happens that as we are creating

24
00:01:44.550 --> 00:01:50.310
this credit repository functionality, we are basically creating a poor man's framework.

25
00:01:50.610 --> 00:01:56.070
So let's go a bit further down this rabbit hole and dig into the Reflection API a little bit.

26
00:01:56.220 --> 00:01:56.640
OK.

27
00:01:57.180 --> 00:01:57.560
All right.

28
00:01:57.570 --> 00:01:59.050
So here's what I have in mind.

29
00:01:59.070 --> 00:02:00.840
Basically, let me give you the big picture.

30
00:02:01.260 --> 00:02:08.910
So instead of having to override and implement these various scatter methods here to return the sequel,

31
00:02:09.270 --> 00:02:16.530
a more modern way of doing the equivalent to this with a lot of modern frameworks would be to actually

32
00:02:16.530 --> 00:02:24.180
make use of an annotation so we could have an annotation so we could introduce and create our own annotation.

33
00:02:24.840 --> 00:02:32.070
And in that annotation, we could specify the sequel that we want, and then our credit repository could

34
00:02:32.070 --> 00:02:39.360
dynamically, at runtime, learn the skill that it needs from the annotation and thereby we would no

35
00:02:39.360 --> 00:02:41.130
longer need these methods.

36
00:02:41.310 --> 00:02:45.990
And if if most of what I just said didn't really mean much to you, that's OK.

37
00:02:45.990 --> 00:02:48.510
It will, it will by the time we finish this, OK?

38
00:02:48.810 --> 00:02:54.810
So that's what I have in mind, though, to teach you how to create your own custom annotations and

39
00:02:54.810 --> 00:03:01.740
then how to use the Reflection API to find those annotations and read information that's in them so

40
00:03:01.740 --> 00:03:04.500
that we don't need to implement these methods here.

41
00:03:04.650 --> 00:03:09.690
And if we have time, we might even make one more annotation to show you one more bonus bonus thing,

42
00:03:09.690 --> 00:03:10.320
but we'll see.

43
00:03:10.800 --> 00:03:11.160
All right.

44
00:03:11.160 --> 00:03:12.810
So how do we do this?

45
00:03:13.230 --> 00:03:16.920
So let us still just do this in somewhat of a 2D style.

46
00:03:17.220 --> 00:03:18.060
And I don't know.

47
00:03:18.060 --> 00:03:23.370
You could argue whether or not this is new functionality, but I don't think I'm going to write an explicit

48
00:03:23.370 --> 00:03:25.230
test for this functionality.

49
00:03:25.440 --> 00:03:31.320
Instead, what we'll do is as we implement an annotation and some functionality, then I think we'll

50
00:03:31.320 --> 00:03:35.970
just get rid of one of the getter methods and then rerun all of our tests.

51
00:03:35.970 --> 00:03:41.640
And that's how we will confirm that we haven't broken any of the original functionality that was there.

52
00:03:41.670 --> 00:03:42.060
OK.

53
00:03:42.660 --> 00:03:51.630
So I propose that we introduce a new custom annotation called At School.

54
00:03:52.570 --> 00:03:58.570
Like so and with this annotation, we can specify our school code.

55
00:03:58.810 --> 00:04:03.220
Now there are a couple of ways that we could do this, and I'm inclined to keep this a little bit on

56
00:04:03.220 --> 00:04:04.690
the simple side for right now.

57
00:04:04.840 --> 00:04:10.540
So one way that we maybe could have done this is to simply embed the necessary skill right inside of

58
00:04:10.540 --> 00:04:11.520
this annotation.

59
00:04:11.530 --> 00:04:14.050
OK, so it'll actually look like this.

60
00:04:14.200 --> 00:04:15.340
So what is this one here?

61
00:04:15.340 --> 00:04:20.710
This is for sale, so we want the Safe Person sequel, so that is this bit right here.

62
00:04:20.710 --> 00:04:25.960
So we would actually, for now, just embed.

63
00:04:27.060 --> 00:04:27.930
Embed that.

64
00:04:29.030 --> 00:04:29.990
Just like that.

65
00:04:31.040 --> 00:04:31.380
All right.

66
00:04:31.400 --> 00:04:38.030
So having already embedded this bit here, what we can do now is put our cursor right here on the sequel

67
00:04:38.030 --> 00:04:41.410
and then let the Aideed create this annotation for us.

68
00:04:41.420 --> 00:04:43.670
So I'm going to just do an option return.

69
00:04:44.030 --> 00:04:45.380
And there we go.

70
00:04:45.380 --> 00:04:51.470
There's the option to create the annotation called sequel, and it's asking where to to put it, what

71
00:04:51.470 --> 00:04:51.890
package.

72
00:04:51.890 --> 00:04:52.480
We want this.

73
00:04:52.490 --> 00:04:59.120
And so I actually want to put this in in its own package will create a package called annotation instead

74
00:04:59.120 --> 00:04:59.930
of repository.

75
00:04:59.940 --> 00:05:01.310
This will be annotation.

76
00:05:01.340 --> 00:05:01.790
OK.

77
00:05:02.390 --> 00:05:02.740
All right.

78
00:05:02.750 --> 00:05:03.950
And click OK.

79
00:05:04.310 --> 00:05:05.090
And there we go.

80
00:05:06.020 --> 00:05:13.460
Now, in order for this annotation to actually be useful for us for our purposes, we will need to put

81
00:05:13.460 --> 00:05:15.350
an annotation on the annotation.

82
00:05:16.130 --> 00:05:19.510
So I'm going to make a new line above this annotation, by the way.

83
00:05:19.520 --> 00:05:20.840
Let me back up and say now.

84
00:05:20.990 --> 00:05:22.970
So we're creating our own annotation now.

85
00:05:22.970 --> 00:05:26.300
So the way that that is done is basically just to create an interface.

86
00:05:26.300 --> 00:05:31.340
And that's why this is structured the way that it is public and then an at symbol interface sequence.

87
00:05:31.340 --> 00:05:32.000
So it really.

88
00:05:32.120 --> 00:05:40.970
So Java really is just using basically the interface apparatus to implement annotations itself.

89
00:05:41.000 --> 00:05:41.420
OK.

90
00:05:41.840 --> 00:05:50.090
All right, now, we will want these annotations to be visible to our application code while we're running

91
00:05:50.090 --> 00:05:50.270
it.

92
00:05:50.660 --> 00:05:58.490
And the easiest way to do that is to label this annotation with another annotation called retention.

93
00:05:59.390 --> 00:06:00.680
Like so OK.

94
00:06:00.980 --> 00:06:07.610
And then we can specify the scope that this annotation should be visible within.

95
00:06:07.730 --> 00:06:09.650
And I know that probably isn't meaning much.

96
00:06:09.650 --> 00:06:14.900
But bear with me for just a moment so we can refer to some values that are already defined.

97
00:06:15.170 --> 00:06:22.880
If we refer to the retention policy class and we want to select now, I just typed R.

98
00:06:22.880 --> 00:06:29.300
And because I'm inside of the retention annotation, the ADP understood that I was referring to R as

99
00:06:29.300 --> 00:06:30.560
in retention policy.

100
00:06:30.560 --> 00:06:32.770
And so that's how I got these options.

101
00:06:32.780 --> 00:06:36.080
The pop up and the one that we want is runtime.

102
00:06:36.290 --> 00:06:44.570
So when we start writing code using the Reflections API to dig in and find the usages of this SQL annotation,

103
00:06:44.570 --> 00:06:47.360
this is where this runtime thing will come in handy.

104
00:06:47.510 --> 00:06:52.590
Without it, our annotations wouldn't be found while we're running our application.

105
00:06:52.640 --> 00:06:54.070
OK, so all right.

106
00:06:54.080 --> 00:07:00.440
And then in order to be allowed to embed that sequel inside of our usage of the sanitation, we will

107
00:07:00.440 --> 00:07:04.700
have to define and attribute inside of this annotation.

108
00:07:05.180 --> 00:07:08.600
And let's pop back over to to how we were using this.

109
00:07:08.600 --> 00:07:09.410
So right here.

110
00:07:09.770 --> 00:07:12.740
So the way we're using this is to specify the annotation.

111
00:07:12.740 --> 00:07:19.880
And then I would like us to be able to just throw our sequel query directly in here without any attribute

112
00:07:19.880 --> 00:07:20.360
label.

113
00:07:20.420 --> 00:07:22.400
And what do I mean by an attribute label?

114
00:07:22.700 --> 00:07:25.910
Well, we can have comma separated attributes.

115
00:07:26.000 --> 00:07:29.660
They're basically key value pairs inside of an annotation.

116
00:07:29.900 --> 00:07:35.390
If that annotation supports that, and we're making the annotation so we can make it support whatever

117
00:07:35.390 --> 00:07:35.990
we want.

118
00:07:36.170 --> 00:07:42.350
But an example of what attributes would look like would be something like value equals blah blah blah.

119
00:07:42.590 --> 00:07:43.940
And then we could have a comma.

120
00:07:43.940 --> 00:07:50.480
And then you could say something like name equals Jake, and you could have lots and lots of attributes

121
00:07:50.480 --> 00:07:53.090
associated with your annotation.

122
00:07:53.090 --> 00:07:57.920
And then those attributes can be read at runtime using this Reflections API.

123
00:07:58.190 --> 00:07:58.610
OK.

124
00:07:58.970 --> 00:08:06.320
But it's also possible to specify a value for an annotation without having to explicitly name it.

125
00:08:06.740 --> 00:08:13.730
And so I could actually get rid of this value equals part here like that and then just specify this

126
00:08:13.730 --> 00:08:13.880
now.

127
00:08:13.880 --> 00:08:18.380
Currently, since we haven't finished defining how this equal annotation should behave.

128
00:08:18.530 --> 00:08:22.450
We're getting this red squiggly here, but we're going to go clear that up right now.

129
00:08:22.460 --> 00:08:31.160
So if I jump back over to the sequel annotation here and I can declare a method of type string because

130
00:08:31.160 --> 00:08:35.120
again, this this annotation is really just an interface and so on.

131
00:08:35.120 --> 00:08:37.070
Interfaces, you declare methods, right?

132
00:08:37.460 --> 00:08:45.050
So I will declare a method that is of type string, and the method name itself will simply be value.

133
00:08:45.110 --> 00:08:45.590
OK.

134
00:08:45.920 --> 00:08:53.780
So if I declare a method on my interface named value, then that attribute will become basically the

135
00:08:53.780 --> 00:08:59.900
default attribute of the annotation such that I don't have to explicitly name that attribute value.

136
00:08:59.900 --> 00:09:00.530
OK, so.

137
00:09:00.890 --> 00:09:03.410
So again, let me just jump back over here.

138
00:09:04.530 --> 00:09:10.650
OK, so notice now the red underscore the red squiggly error went away, and I don't have to explicitly

139
00:09:10.650 --> 00:09:16.680
say value, though I can, I can prepend this with the value equals and that's equivalent still OK,

140
00:09:16.680 --> 00:09:22.830
but I don't have to, because the SQL query is associated with the value, I don't have to explicitly

141
00:09:22.830 --> 00:09:23.610
label it OK.

142
00:09:24.120 --> 00:09:25.200
So that's optional.

143
00:09:27.370 --> 00:09:32.290
All right, while we're at it, let me just show you real quick, even though we won't need it.

144
00:09:32.650 --> 00:09:37.540
If you wanted to have additional attributes of this annotation, you could do that as well.

145
00:09:37.540 --> 00:09:39.490
So you could have, you know, something like.

146
00:09:39.790 --> 00:09:40.240
And.

147
00:09:41.140 --> 00:09:46.130
Age, and you could even specify a default value for this, right?

148
00:09:46.150 --> 00:09:50.920
So you can use this keyword default and then set an integer value right here.

149
00:09:51.610 --> 00:09:52.060
I don't know.

150
00:09:52.060 --> 00:09:53.540
30, for example.

151
00:09:53.560 --> 00:09:53.980
OK.

152
00:09:54.460 --> 00:09:55.830
And then you could use that over there.

153
00:09:55.870 --> 00:10:01.090
Now we don't need this here, but that's how you could keep adding, you know, additional attributes

154
00:10:01.090 --> 00:10:01.390
here.

155
00:10:01.420 --> 00:10:03.850
Name default.

156
00:10:05.510 --> 00:10:08.600
Frank, and so on and so forth.

157
00:10:08.630 --> 00:10:08.990
OK.

158
00:10:09.740 --> 00:10:12.440
All right, I'm going to get rid of those, though, because we don't need them.

159
00:10:12.590 --> 00:10:12.880
All right.

160
00:10:12.890 --> 00:10:16.010
So there's our custom annotation now.

161
00:10:16.010 --> 00:10:21.650
The next step is where we do the real work and that is in teaching our credit repository class.

162
00:10:22.010 --> 00:10:30.200
How to find this information here instead of having to call the get saved school method like it currently

163
00:10:30.200 --> 00:10:30.620
is doing.

164
00:10:30.800 --> 00:10:35.240
So let's pop over to the credit repository class now.

165
00:10:37.140 --> 00:10:41.140
All right, so here's our save template, I guess.

166
00:10:41.160 --> 00:10:44.970
And currently it is getting that sequel right here.

167
00:10:45.300 --> 00:10:52.650
So what I'm thinking to do is let's create an alternative method right now that does this same thing,

168
00:10:52.650 --> 00:10:55.350
but does it via the annotations, OK?

169
00:10:56.070 --> 00:10:59.820
So for right now, I'll just well, we'll put this code up here.

170
00:11:00.090 --> 00:11:03.840
Not because I wanted to live here, but because I kind of want to just, I don't know, keep my eye

171
00:11:03.870 --> 00:11:09.180
on this code while we're writing the code to get the sequel, OK, so that we can kind of keep the context

172
00:11:09.180 --> 00:11:09.750
in mind.

173
00:11:10.110 --> 00:11:16.770
So let's pretend like we're going to have a new method called Let's see you and this one can be private

174
00:11:16.770 --> 00:11:17.650
because it will.

175
00:11:17.670 --> 00:11:22.130
It will not need to be shared anywhere and it will return a string.

176
00:11:22.140 --> 00:11:30.690
And let's see, maybe we'll call it get save sequel by annotation?

177
00:11:30.690 --> 00:11:31.110
Maybe.

178
00:11:33.600 --> 00:11:35.040
For now, that's what we'll call it.

179
00:11:35.460 --> 00:11:40.470
So let me also now take a moment to explain to you what the Reflections API really does.

180
00:11:40.830 --> 00:11:48.120
So the Reflections API allows us to write Java code that allows us to analyze our Java code.

181
00:11:48.240 --> 00:11:48.720
OK.

182
00:11:49.200 --> 00:11:51.300
Let me let me explain what I mean by that.

183
00:11:51.450 --> 00:11:55.800
First, let me jump back over to the people repository here, OK?

184
00:11:56.010 --> 00:12:04.260
So we want to write some code in the credit repository that is capable of kind of basically seeing this

185
00:12:04.260 --> 00:12:07.320
Java code here, like actually seeing this code?

186
00:12:07.440 --> 00:12:07.950
OK?

187
00:12:08.400 --> 00:12:09.270
Sort of kind of.

188
00:12:09.870 --> 00:12:16.650
And what we wanted to do right now is to find a method called map for save.

189
00:12:17.460 --> 00:12:26.670
And then we want this code to see if there is an at SQL annotation on this method map for save.

190
00:12:26.940 --> 00:12:35.430
And if there is, grab this sequel string right here and use that SQL string.

191
00:12:35.640 --> 00:12:36.520
That's what we want.

192
00:12:36.600 --> 00:12:45.270
So the Java Reflections API allows us to analyze our own code in real time or at runtime, really?

193
00:12:45.300 --> 00:12:45.780
OK?

194
00:12:45.930 --> 00:12:47.040
So it's very meta.

195
00:12:47.040 --> 00:12:48.810
It's very meta, in fact.

196
00:12:48.990 --> 00:12:49.410
OK.

197
00:12:49.920 --> 00:12:52.020
So that's what we're wanting to do.

198
00:12:52.050 --> 00:12:52.470
OK.

199
00:12:52.800 --> 00:12:55.560
So let's jump back over here to the credit repository.

200
00:12:55.980 --> 00:13:04.350
So the way that we can do that is first, we have to reference this class, which is the repository

201
00:13:04.350 --> 00:13:08.820
class at runtime to get into the Reflections API.

202
00:13:09.060 --> 00:13:15.270
And so anytime you want to access a class of an object like this, this code will be running inside

203
00:13:15.270 --> 00:13:16.230
of an object, right?

204
00:13:16.470 --> 00:13:20.550
And so we can refer to that object using the this keyword.

205
00:13:20.580 --> 00:13:21.000
OK.

206
00:13:21.420 --> 00:13:28.200
And then if we want to get access to the class that that object comes from or as part of, then we can

207
00:13:28.200 --> 00:13:30.390
call this to get class.

208
00:13:30.800 --> 00:13:31.210
OK.

209
00:13:31.750 --> 00:13:37.410
OK, so this get class method here actually returns something called a class.

210
00:13:37.440 --> 00:13:37.830
All right.

211
00:13:38.310 --> 00:13:43.710
And here know we'll just hover over it real quick and you can see, OK, so that read the get class

212
00:13:43.710 --> 00:13:45.290
method actually returns a class.

213
00:13:45.300 --> 00:13:49.680
So this is a java representation of a class file.

214
00:13:49.710 --> 00:13:50.190
OK.

215
00:13:50.610 --> 00:13:54.730
And so you can kind of think of it as the source code that we're looking at.

216
00:13:54.780 --> 00:13:56.930
In fact, you can very much think of it as that.

217
00:13:56.940 --> 00:13:59.490
That's what it's intended to essentially model.

218
00:13:59.520 --> 00:13:59.970
OK.

219
00:14:00.210 --> 00:14:06.780
And so when you think about what comprises a class, you know that classes have a name, they can have

220
00:14:06.780 --> 00:14:09.210
fields, they can have methods.

221
00:14:09.240 --> 00:14:09.600
Right?

222
00:14:09.930 --> 00:14:17.870
So you can actually access all of those same concepts through this class class.

223
00:14:18.450 --> 00:14:19.020
Sorry.

224
00:14:19.200 --> 00:14:21.210
I hope I'm not going to confuse too many people here.

225
00:14:21.240 --> 00:14:21.550
All right.

226
00:14:21.570 --> 00:14:25.800
So let's see what methods are on the class class.

227
00:14:26.460 --> 00:14:26.820
All right.

228
00:14:27.480 --> 00:14:34.410
So we want to find a method on our class called map for save, right?

229
00:14:34.710 --> 00:14:41.460
This guy right here, because that method is going to have our new annotation, the SQL annotation on

230
00:14:41.460 --> 00:14:41.580
it.

231
00:14:41.610 --> 00:14:41.970
OK.

232
00:14:42.360 --> 00:14:46.260
And so we need to find that method on our class.

233
00:14:46.650 --> 00:14:52.560
And so there are methods on the class class for finding methods.

234
00:14:52.860 --> 00:14:55.590
There are methods on the class class for finding methods.

235
00:14:55.590 --> 00:14:56.160
I'm sorry.

236
00:14:56.190 --> 00:14:56.790
I'm sorry.

237
00:14:57.030 --> 00:14:57.360
All right.

238
00:14:57.630 --> 00:14:59.340
So there are a few, actually.

239
00:14:59.760 --> 00:15:02.440
So there's get method that takes some inputs.

240
00:15:03.030 --> 00:15:07.680
There's get methods and there's get declared methods also.

241
00:15:07.950 --> 00:15:11.820
And right now, we want to work with the get declared methods.

242
00:15:11.850 --> 00:15:18.960
OK, now I think maybe the easiest way to do this is going to be to use this version right here, get

243
00:15:18.960 --> 00:15:21.810
declared methods that doesn't take any inputs.

244
00:15:22.080 --> 00:15:27.170
OK, now that returns an array of method object.

245
00:15:27.270 --> 00:15:27.780
OK.

246
00:15:27.840 --> 00:15:36.390
So I think what we can do here, though, is to use the Streams API to iterate over those methods until

247
00:15:36.390 --> 00:15:40.200
we find one that has the name that we're looking for.

248
00:15:40.740 --> 00:15:41.130
OK.

249
00:15:41.490 --> 00:15:46.210
So this is returning an array and I want to use the Streams API.

250
00:15:46.230 --> 00:15:51.720
So can you think of how can we use the Streams API with an array so that we can basically convert an

251
00:15:51.720 --> 00:15:55.180
array of objects into a stream of objects?

252
00:15:55.200 --> 00:15:56.370
Can you think of how to do that?

253
00:15:57.870 --> 00:15:58.320
OK.

254
00:15:58.560 --> 00:16:06.360
Did you get it so we can use the arrays class and then it has a method on a called stream.

255
00:16:07.440 --> 00:16:07.860
OK.

256
00:16:08.830 --> 00:16:13.390
And so now we will have a stream of methods.

257
00:16:13.600 --> 00:16:14.050
OK.

258
00:16:15.120 --> 00:16:24.120
And so from here now, we want to find the method that has a name called Map for Save.

259
00:16:24.160 --> 00:16:25.350
OK, that's what we want.

260
00:16:25.710 --> 00:16:28.080
So I think what we can do here is use filter.

261
00:16:28.110 --> 00:16:28.470
All right.

262
00:16:28.680 --> 00:16:32.450
And then we're going to be passed in method objects.

263
00:16:32.460 --> 00:16:34.350
So I'm going to refer to that as M..

264
00:16:34.860 --> 00:16:36.660
OK, so I'm using a lambda expression here.

265
00:16:36.810 --> 00:16:43.140
So then the method class itself will have other methods on it, and there should be a method called

266
00:16:43.140 --> 00:16:44.130
get name.

267
00:16:44.220 --> 00:16:45.180
And there it is.

268
00:16:45.210 --> 00:16:50.640
OK, so now we just want to find the method whose name is map for save.

269
00:16:50.670 --> 00:16:55.680
And so maybe what I will do here is just reference that name map.

270
00:16:56.680 --> 00:16:58.390
For Save.

271
00:16:59.410 --> 00:17:03.640
Dot content equals oops equals.

272
00:17:04.650 --> 00:17:06.210
IMD get name.

273
00:17:06.240 --> 00:17:12.930
OK, so hopefully that should iterate over all the methods on the class until it finds one whose name

274
00:17:12.930 --> 00:17:14.340
is map for save.

275
00:17:14.370 --> 00:17:14.740
OK.

276
00:17:14.760 --> 00:17:16.560
And really, there should only be one.

277
00:17:17.070 --> 00:17:20.430
And so if it finds one, there should only it should only find one.

278
00:17:20.460 --> 00:17:21.540
Let me close that off.

279
00:17:21.540 --> 00:17:21.960
OK?

280
00:17:22.470 --> 00:17:22.910
All right.

281
00:17:22.920 --> 00:17:27.870
So presumably then if we get this far, we will have found that method.

282
00:17:28.230 --> 00:17:28.680
OK.

283
00:17:28.950 --> 00:17:36.210
And so now we want to take that method and determine if there is an at scale annotation on that method.

284
00:17:36.240 --> 00:17:36.690
OK.

285
00:17:36.960 --> 00:17:43.770
And in fact, we want to really just convert the method into the at SQL annotation via the Streams API.

286
00:17:43.860 --> 00:17:48.900
So any time we talk about converting in the Streams API, you know, we're really saying we want to

287
00:17:48.900 --> 00:17:50.940
use the map function, right?

288
00:17:51.360 --> 00:17:54.150
So let's do a map.

289
00:17:54.990 --> 00:17:58.470
OK, so here we're still working with a method.

290
00:17:59.740 --> 00:18:04.810
But now we want to basically query that method to determine, Hey, method, do you have an at skill

291
00:18:04.810 --> 00:18:05.860
annotation on you?

292
00:18:05.950 --> 00:18:09.010
And there's a method for doing that on the method class, OK?

293
00:18:09.250 --> 00:18:11.200
So that would be import.

294
00:18:12.370 --> 00:18:14.050
Get annotation.

295
00:18:15.690 --> 00:18:19.530
And this method get annotation, takes a class as an input.

296
00:18:19.710 --> 00:18:22.770
Now, don't get confused by the fact that it takes a class as an input.

297
00:18:22.890 --> 00:18:30.090
It's really referring to the annotation class, OK, because essentially interms interfaces, classes,

298
00:18:30.090 --> 00:18:33.280
records, they're all considered classes of a sort.

299
00:18:33.300 --> 00:18:33.660
Right?

300
00:18:33.990 --> 00:18:42.030
So we're going to call get annotation and then we're going to refer to our school class interface slash

301
00:18:42.030 --> 00:18:42.930
annotation.

302
00:18:43.140 --> 00:18:43.500
OK.

303
00:18:43.770 --> 00:18:49.860
So I'm going to just reference that just like so now I do have to put the word class on the end here

304
00:18:49.860 --> 00:18:52.170
so that Java knows what I'm talking about.

305
00:18:52.470 --> 00:18:52.870
All right.

306
00:18:52.890 --> 00:19:01.440
So basically, now we're asking the method object to find an annotation on itself of type sequel.

307
00:19:01.470 --> 00:19:01.950
OK.

308
00:19:02.190 --> 00:19:05.220
And if that exists, then that's going to be returned.

309
00:19:05.490 --> 00:19:05.880
All right.

310
00:19:06.240 --> 00:19:10.950
So now we would have a stream of SQL annotations.

311
00:19:11.160 --> 00:19:16.500
And so this annotation will, which is an interface, will have a value method on it, right?

312
00:19:16.770 --> 00:19:24.090
And so actually, I think we can just use a method reference here sequel colon colon value right there.

313
00:19:24.690 --> 00:19:31.050
So if this class, which will end up actually not just being a credible repository, but it would actually,

314
00:19:31.050 --> 00:19:35.730
in our case, be the people repository, which is a subclass of the Creed repository.

315
00:19:35.940 --> 00:19:43.580
If this class, which will be the people, the people repository has a method on it called map for save.

316
00:19:43.590 --> 00:19:51.300
And then if that method has an annotation called sequel and then if that if that annotation has a value,

317
00:19:51.720 --> 00:19:52.440
you get that.

318
00:19:52.530 --> 00:19:54.390
Get all of that, OK?

319
00:19:54.600 --> 00:19:55.860
That's what we're doing here.

320
00:19:56.160 --> 00:19:56.420
All right.

321
00:19:56.430 --> 00:19:58.260
And then we just want to return that.

322
00:19:58.710 --> 00:20:01.380
And so we can just do a fine first.

323
00:20:01.950 --> 00:20:05.880
Now the find first method returns an optional, though.

324
00:20:05.910 --> 00:20:08.490
OK, so this would be an optional of a string.

325
00:20:08.910 --> 00:20:14.130
So if for some reason none of this worked out, we then need to figure out, well, what are we going

326
00:20:14.130 --> 00:20:14.690
to do right?

327
00:20:14.700 --> 00:20:17.920
Because this option will end up being empty in that case?

328
00:20:17.940 --> 00:20:18.270
Right?

329
00:20:18.930 --> 00:20:24.150
So if that is the case, we can actually now use the or else.

330
00:20:24.720 --> 00:20:32.340
And what we can do here, I think, is simply reference the fallback of calling the Get Saved sequel

331
00:20:32.370 --> 00:20:32.760
method.

332
00:20:32.760 --> 00:20:35.340
OK, someone and just say Get Saved sequel.

333
00:20:36.810 --> 00:20:38.790
And that's actually fairly elegant.

334
00:20:38.910 --> 00:20:39.360
All right.

335
00:20:39.600 --> 00:20:44.340
And so then I'm just going to put a giant return on top of all of that.

336
00:20:44.490 --> 00:20:51.330
So in other words, we're saying, go find the sequel text that we're looking for via the annotation,

337
00:20:51.330 --> 00:20:55.500
but if it's not there, then just fall back to what we already currently are doing.

338
00:20:55.680 --> 00:20:56.070
OK.

339
00:20:56.970 --> 00:20:57.390
All right.

340
00:20:57.780 --> 00:21:05.910
So now let's change this to use our new method Get Saved sequel by annotation.

341
00:21:06.150 --> 00:21:06.510
All right.

342
00:21:07.140 --> 00:21:11.670
And let's also jump down here to this get saved sequel method.

343
00:21:12.030 --> 00:21:14.450
And now I don't want this to be abstract anymore.

344
00:21:14.460 --> 00:21:19.170
I don't want to force my subclasses to have to implement this method.

345
00:21:19.260 --> 00:21:20.610
I want it to be optional.

346
00:21:20.880 --> 00:21:28.140
So I'm going to remove this abstract keyword here, and that means I have to provide an implementation

347
00:21:28.140 --> 00:21:28.500
now.

348
00:21:28.530 --> 00:21:28.980
OK.

349
00:21:29.340 --> 00:21:38.520
So for now, I'm just going to return a really terrible implementation of empty string like that.

350
00:21:38.670 --> 00:21:39.120
OK.

351
00:21:39.480 --> 00:21:39.810
All right.

352
00:21:39.810 --> 00:21:48.030
So now let's jump back over to the people repository, and let's just comment this out and see if we

353
00:21:48.030 --> 00:21:49.320
got it on the first try.

354
00:21:49.860 --> 00:21:52.800
Honestly, I will be a little surprised that if we did.

355
00:21:53.100 --> 00:21:54.060
But let's let's see.

356
00:21:54.930 --> 00:21:55.280
All right.

357
00:21:55.290 --> 00:21:56.580
So that's commented out.

358
00:21:56.760 --> 00:21:59.190
We've got our sequel right here.

359
00:21:59.460 --> 00:22:05.970
So then let's jump over to the tests for the people repository, and let's just run all the tests and

360
00:22:05.970 --> 00:22:06.870
see what happens.

361
00:22:08.610 --> 00:22:09.000
Wow.

362
00:22:09.540 --> 00:22:11.070
It says that worked.

363
00:22:11.430 --> 00:22:17.880
Now let's let's really test that out a little more, though, let's jump back over to the people repository.

364
00:22:18.150 --> 00:22:21.660
And I want to intentionally break this in some way.

365
00:22:21.670 --> 00:22:25.140
So let's change the table name, maybe two peoples.

366
00:22:25.410 --> 00:22:27.150
This is something like that.

367
00:22:27.150 --> 00:22:27.490
OK?

368
00:22:27.930 --> 00:22:32.760
So this should break if we wrote a halfway decent test, which I hope we did.

369
00:22:33.030 --> 00:22:33.390
All right.

370
00:22:33.720 --> 00:22:37.960
So jump back over to our test run.

371
00:22:37.960 --> 00:22:39.210
Run the tests again.

372
00:22:40.510 --> 00:22:42.640
Hey, lots of stuff blew up.

373
00:22:42.670 --> 00:22:43.480
Look at that.

374
00:22:44.320 --> 00:22:45.760
Lots of stuff blew up.

375
00:22:46.690 --> 00:22:50.590
I think our code must be actually must actually be working.

376
00:22:51.220 --> 00:22:51.570
All right.

377
00:22:51.580 --> 00:22:53.710
So let's jump back over here again.

378
00:22:54.040 --> 00:22:58.660
Let's unbreak that and then let's run it one more time.

379
00:22:59.500 --> 00:23:01.840
Looking good, looking very good.

380
00:23:02.980 --> 00:23:05.920
And so now we don't even need that.

381
00:23:07.120 --> 00:23:11.950
And so now we can use this at school method everywhere, basically.

382
00:23:11.980 --> 00:23:14.290
OK, so let's see here.

383
00:23:14.290 --> 00:23:16.030
Let's go to another one.

384
00:23:16.280 --> 00:23:18.010
Here's map for update.

385
00:23:18.070 --> 00:23:21.460
OK, so let's go find our update.

386
00:23:22.890 --> 00:23:24.540
Sequel, which is right here.

387
00:23:26.040 --> 00:23:30.450
It's grab all of that, and then let's come down here.

388
00:23:31.700 --> 00:23:38.510
And let's add an APT sequel method and then paste that sequel there.

389
00:23:38.690 --> 00:23:44.900
All right now, we're going to have to jump back over here to the credit repository, though, and teach

390
00:23:44.900 --> 00:23:46.460
it how to utilize that right?

391
00:23:46.670 --> 00:23:48.230
So let's see here.

392
00:23:48.620 --> 00:23:53.870
So here's what we're doing currently to make this work right now.

393
00:23:53.880 --> 00:24:00.500
Actually, I'm thinking we can generic size this method so that this one method can be used to find

394
00:24:00.500 --> 00:24:04.370
the sequel for all of the underlying methods, essentially.

395
00:24:04.670 --> 00:24:11.420
So the way we can do that is actually we can just parameter rise this method such that this bit here

396
00:24:11.570 --> 00:24:14.480
gets passed in from the calling method, OK?

397
00:24:14.660 --> 00:24:21.860
So with this selected here, just properly select that I'll do an option command p for parameter, right?

398
00:24:22.430 --> 00:24:29.800
And we will call this method name and look at that that just passed that in there.

399
00:24:29.840 --> 00:24:34.970
And so now we don't want this thing to be called so specifically get saved sequel by annotation.

400
00:24:34.970 --> 00:24:37.790
We can just call it get sequel by annotation.

401
00:24:38.360 --> 00:24:38.690
All right.

402
00:24:38.690 --> 00:24:46.010
So I'm going to put my cursor right there and then do a shift six, and we'll just rename this to get

403
00:24:46.880 --> 00:24:49.190
sequel by annotation.

404
00:24:49.640 --> 00:24:54.020
And so now this can be used everywhere.

405
00:24:55.380 --> 00:24:59.070
Oh, now there's one other issue this fall back here.

406
00:24:59.760 --> 00:25:04.690
So ideally, we'd want to be able to pass this fall back in as well.

407
00:25:04.800 --> 00:25:05.190
Right.

408
00:25:05.580 --> 00:25:07.410
So we can do that really easily.

409
00:25:07.410 --> 00:25:13.470
We could either pass in an actual method reference, in fact, or we could just pass in the result of

410
00:25:13.470 --> 00:25:18.000
calling this actually passing in the method reference would be better.

411
00:25:18.480 --> 00:25:20.910
So let's see something real quick here.

412
00:25:20.940 --> 00:25:24.990
So currently, the or else method here is expecting a string, right?

413
00:25:25.500 --> 00:25:28.830
But we could use the or else get.

414
00:25:28.890 --> 00:25:32.940
And now this is a really good reason to use the or else get, in fact, OK.

415
00:25:33.300 --> 00:25:36.210
So the or else get takes a supplier.

416
00:25:36.240 --> 00:25:36.630
Right?

417
00:25:36.900 --> 00:25:38.310
So let's see what happens here.

418
00:25:38.310 --> 00:25:44.670
If we replace this with an or else get and then for the supplier, we will not pass in directly the

419
00:25:44.670 --> 00:25:49.650
Get Saved sequel, which wouldn't work anyway, but will pass in a method reference to the Get Saved

420
00:25:49.650 --> 00:25:54.990
sequel method and that should satisfy the supplier interface, which does which is an interface, a

421
00:25:54.990 --> 00:25:58.050
functional interface that doesn't take any input anyway.

422
00:25:58.120 --> 00:25:58.330
Right.

423
00:25:58.350 --> 00:26:00.090
And neither does the Get Saved sequel.

424
00:26:00.390 --> 00:26:06.720
So the way we should be able to do this is to reference the this object right, which would be this

425
00:26:06.720 --> 00:26:12.090
current instance of the crud repository or of the people or of the people repository.

426
00:26:12.100 --> 00:26:15.540
So this Colin Colon Get Safe sequel?

427
00:26:15.690 --> 00:26:16.350
Look at that.

428
00:26:16.500 --> 00:26:22.260
And so now in this current context right here, I would argue there's not really any benefit to doing

429
00:26:22.260 --> 00:26:22.590
this.

430
00:26:22.740 --> 00:26:27.450
However, the reason I did this is so that I can now parameter rise this also.

431
00:26:27.460 --> 00:26:28.710
So watch this.

432
00:26:29.460 --> 00:26:35.820
I will select all of that, and then I'll do an option command again to further parameter eyes like

433
00:26:35.820 --> 00:26:36.270
so.

434
00:26:36.720 --> 00:26:42.180
And I will call this parameter sequel getter.

435
00:26:43.860 --> 00:26:48.510
OK, so you saw that little intermediate dialogue there.

436
00:26:48.540 --> 00:26:53.190
So that was just warning about the fact that, you know, we're dealing with lambda expressions and

437
00:26:53.190 --> 00:26:54.900
things, it really didn't matter.

438
00:26:55.200 --> 00:27:01.920
At the end of the day, the A.D. did the right thing, which is to add in this additional parameter

439
00:27:01.920 --> 00:27:07.320
here of our backup method call if for some reason the annotation isn't there.

440
00:27:07.350 --> 00:27:07.740
OK.

441
00:27:07.950 --> 00:27:08.400
All right.

442
00:27:08.400 --> 00:27:09.660
So that all works.

443
00:27:09.870 --> 00:27:18.990
So we we could jump back over to our test people, repository tests, and let's just run everything

444
00:27:18.990 --> 00:27:19.580
again.

445
00:27:19.590 --> 00:27:21.240
Make sure that's all still working.

446
00:27:21.240 --> 00:27:22.800
We didn't break anything.

447
00:27:23.100 --> 00:27:24.180
Yep, looks good.

448
00:27:24.510 --> 00:27:25.200
All right.

449
00:27:25.980 --> 00:27:31.260
OK, so the next one we need to do is the one for Map four update, right?

450
00:27:31.530 --> 00:27:32.340
There it is.

451
00:27:32.670 --> 00:27:34.280
Get Update sequel.

452
00:27:34.290 --> 00:27:34.680
OK.

453
00:27:35.190 --> 00:27:41.340
So we will replace this call with a call to get cycle by annotation.

454
00:27:41.370 --> 00:27:44.610
And then it's going to take a method name, which is.

455
00:27:46.020 --> 00:27:48.870
Map for update.

456
00:27:50.880 --> 00:27:57.240
And then it'll also take a method reference to the Get Update sequel, right?

457
00:27:57.450 --> 00:27:58.890
So we'll do a this.

458
00:28:00.520 --> 00:28:03.160
Colin, Colin, there it is.

459
00:28:03.190 --> 00:28:04.210
Update sequel.

460
00:28:04.390 --> 00:28:05.860
And now we can get rid of this.

461
00:28:07.640 --> 00:28:08.150
All right.

462
00:28:08.510 --> 00:28:16.730
And so then let's jump back over to the people repository, and let's find the getter method for doing

463
00:28:16.730 --> 00:28:19.700
the update and Will commented it out.

464
00:28:19.880 --> 00:28:21.020
All right, so here it is.

465
00:28:21.620 --> 00:28:26.690
All right, so let's comment that out and then I can actually just open back up this dialogue I just

466
00:28:26.690 --> 00:28:30.170
did in the command for or alt four for Windows and Linux.

467
00:28:30.320 --> 00:28:34.970
And then I can just click this, since this is the last thing we ran anyway to rewrite everything.

468
00:28:34.970 --> 00:28:39.080
OK, so this one now that didn't quite work.

469
00:28:39.080 --> 00:28:41.750
What's going on here, people repository.

470
00:28:41.750 --> 00:28:43.430
What is it not happy with?

471
00:28:43.840 --> 00:28:48.590
OK, people repository is not abstract and does not override abstract method.

472
00:28:48.590 --> 00:28:51.140
Get updates Sequel in crud repository.

473
00:28:51.140 --> 00:28:52.120
Oh, right, OK.

474
00:28:52.310 --> 00:29:01.700
So we commented out this method, but I forgot in the crud repository class to change this method to

475
00:29:01.700 --> 00:29:03.180
not be abstract anymore.

476
00:29:03.230 --> 00:29:03.650
OK.

477
00:29:03.950 --> 00:29:11.420
And so because it is abstract and the super class, it has to be overridden and implemented here, and

478
00:29:11.420 --> 00:29:16.430
I'm not overwriting it or implementing it anymore because I just I just commentated it out.

479
00:29:16.640 --> 00:29:24.140
So we need to jump back over to the credit repository and then go find the declaration for this method.

480
00:29:25.520 --> 00:29:26.750
Let's see.

481
00:29:26.780 --> 00:29:28.230
Get Update sequel.

482
00:29:28.250 --> 00:29:31.580
And let's make it not abstract.

483
00:29:32.510 --> 00:29:37.970
And we will make it return an empty string for now and probably forever.

484
00:29:38.150 --> 00:29:38.780
All right.

485
00:29:39.230 --> 00:29:42.140
And then we can jump back over.

486
00:29:42.620 --> 00:29:43.790
OK, so very good.

487
00:29:43.800 --> 00:29:48.320
So now back over here to the people repository class, the errors went away.

488
00:29:48.530 --> 00:29:48.850
All right.

489
00:29:48.860 --> 00:29:53.480
And now I'm pulling back up the tests again, and let's just see if we can rerun.

490
00:29:54.500 --> 00:29:55.190
There we go.

491
00:29:55.460 --> 00:29:56.270
It's all good.

492
00:29:56.510 --> 00:29:56.810
All right.

493
00:29:56.840 --> 00:30:02.150
And since that's all good, now I'm going to delete the commented out update method.

494
00:30:02.360 --> 00:30:06.430
And let me I'm going to move this extract guy out of the way.

495
00:30:06.440 --> 00:30:11.360
I don't want it there in the way of these mapper methods.

496
00:30:11.660 --> 00:30:12.110
All right.

497
00:30:12.110 --> 00:30:18.410
So let's jump back over here to the credit repository and see what else we need to refactor.

498
00:30:18.410 --> 00:30:21.980
And now that we seem to have this guy working.

499
00:30:22.250 --> 00:30:29.120
I want this method to be kind of somewhere below also, and I don't know, I think maybe somewhere around

500
00:30:29.120 --> 00:30:29.570
in here.

501
00:30:30.560 --> 00:30:33.230
OK, so we've updated the save.

502
00:30:33.920 --> 00:30:38.690
Let's see how this fine by ID is working, so this method find by IED.

503
00:30:38.960 --> 00:30:42.740
Oh, now we may we may run into something interesting here.

504
00:30:43.400 --> 00:30:52.240
Find by IED gets its sequel from the Get Find by IEDs sequel method, which is abstract.

505
00:30:52.250 --> 00:30:57.670
But interestingly, it uses this extract entity from results set method.

506
00:30:57.710 --> 00:31:00.680
And I think we've got another method in here.

507
00:31:00.710 --> 00:31:03.740
I think the Find all also uses this.

508
00:31:03.740 --> 00:31:09.950
So that's kind of interesting because that means we've got one method in the people repository that's

509
00:31:09.950 --> 00:31:18.050
being used by two different crud operations the find by ID and the Find All and each of these operations

510
00:31:18.050 --> 00:31:21.450
needs its own separate and distinct sequel.

511
00:31:22.090 --> 00:31:24.200
So that's going to be kind of interesting.

512
00:31:24.740 --> 00:31:30.530
OK, so to solve this problem, I've got an idea, but I think we better cut it here and pick back up

513
00:31:30.530 --> 00:31:32.700
from this point in the next lesson.

514
00:31:32.720 --> 00:31:33.140
OK.

515
00:31:33.380 --> 00:31:38.390
I've got a I think I've got a pretty good idea here, so I will see you in the next lesson and I think

516
00:31:38.390 --> 00:31:40.460
we'll be able to wrap this up nicely.

517
00:31:40.820 --> 00:31:41.480
See you there.
