1
00:00:00,520 --> 00:00:01,300
Welcome back.

2
00:00:01,540 --> 00:00:09,940
So in the last lesson, we summed up the salaries using a domain model, and I stated that one of the

3
00:00:09,940 --> 00:00:17,530
reasons why we were introducing the use of a domain model the person class or record was for some future

4
00:00:17,530 --> 00:00:21,430
techniques that we would be learning, and we're about to jump into some of those now.

5
00:00:21,760 --> 00:00:25,810
So let me just tell you high level what we're going to be doing now.

6
00:00:26,440 --> 00:00:32,110
We're going to learn some more advanced techniques that we can use on the collect method.

7
00:00:32,320 --> 00:00:39,790
And one of those advanced techniques is the ability not only to sum up data of a column or field, but

8
00:00:39,790 --> 00:00:47,060
to actually be able to group data by a field or, in other words, to categorize data.

9
00:00:47,080 --> 00:00:51,640
OK, if that's not clear what I mean, I'm about to make it pretty clear here.

10
00:00:51,790 --> 00:00:57,940
So before we learn how to do these additional techniques in Java, I thought it would be helpful to

11
00:00:57,940 --> 00:01:03,370
see what the results of these techniques would look like visually using a spreadsheet.

12
00:01:04,480 --> 00:01:10,120
So the first thing I'm going to do is to prepare some additional data to be opened up with a spreadsheet.

13
00:01:10,360 --> 00:01:15,310
You don't need to follow along with me on these first few steps, though, because I'll be going in

14
00:01:15,310 --> 00:01:18,670
to the Unix command prompt and issuing some Unix commands.

15
00:01:18,670 --> 00:01:23,500
And this is not a Unix course, but I thought it might be helpful for you to get a little glimpse of

16
00:01:23,500 --> 00:01:29,680
some real world techniques that a software developer might use in their day to day job.

17
00:01:29,950 --> 00:01:34,510
Now there's lots of Java developers who won't be comfortable or even know how to do some of what I'm

18
00:01:34,510 --> 00:01:36,460
about to do, so don't worry about that.

19
00:01:36,880 --> 00:01:37,160
All right.

20
00:01:37,180 --> 00:01:45,040
So what I want to do is I want to take our five million record file and I want to make a shorter copy

21
00:01:45,040 --> 00:01:50,080
of it by shorter I mean fewer than five million records, just so that I have something that will open

22
00:01:50,080 --> 00:01:53,230
up reasonably quickly with the spreadsheet.

23
00:01:53,410 --> 00:01:57,790
Also, I'm going to use a different spreadsheet program now because it's pretty basically and I'm on

24
00:01:57,790 --> 00:01:58,270
a Mac.

25
00:01:58,930 --> 00:02:07,480
So here I am in a command prompt on my computer, and I'm in a folder that contains the data file that

26
00:02:07,480 --> 00:02:08,500
we've been working with.

27
00:02:08,500 --> 00:02:09,370
It's this one right here.

28
00:02:09,390 --> 00:02:12,720
H.R. H.R. 5:00 a.m. Dot CSB.

29
00:02:12,730 --> 00:02:13,150
OK.

30
00:02:13,420 --> 00:02:21,070
And so what I'm going to do is issue some Unix commands to make a short copy of this file, basically

31
00:02:21,070 --> 00:02:26,060
by truncating it down to maybe like, I don't know, 100 lines or something like that.

32
00:02:26,230 --> 00:02:34,360
So to do that, I can use the head command dash in and then tell it how many lines out of that original

33
00:02:34,360 --> 00:02:34,790
file.

34
00:02:34,810 --> 00:02:37,540
I want to bring over essentially or copy.

35
00:02:37,900 --> 00:02:38,800
And I don't know.

36
00:02:38,800 --> 00:02:45,580
I think maybe I'll take one hundred and one the one for the header and then the hundred for the data.

37
00:02:45,880 --> 00:02:56,050
OK, then I'll specify the file itself, CSP and then I'm going to direct the output of this command

38
00:02:56,050 --> 00:03:01,120
into a new file, which I'm going to just call people dot csb for now.

39
00:03:02,890 --> 00:03:03,190
All right.

40
00:03:03,220 --> 00:03:04,150
And it's that quick.

41
00:03:04,270 --> 00:03:08,440
So the reason I'm doing this in this way is because it's just really quick and easy to do.

42
00:03:08,650 --> 00:03:11,050
I could have done this programmatically as well.

43
00:03:11,770 --> 00:03:15,820
You've seen me actually copy some records out of the file.

44
00:03:15,820 --> 00:03:23,050
Like we wrote a little code that printed out the first 10 records or so, and then I copied those records

45
00:03:23,050 --> 00:03:28,120
out of the console of the ID, and then I pasted them into a spreadsheet, right?

46
00:03:28,210 --> 00:03:29,500
You've seen me do it that way.

47
00:03:29,710 --> 00:03:33,280
This is just another way to do that without me having to write any code.

48
00:03:33,940 --> 00:03:40,450
And in fact, this head hyphen in 101, this is pretty much equivalent.

49
00:03:40,540 --> 00:03:42,460
Let me jump over to the real quick.

50
00:03:42,670 --> 00:03:51,670
This is kind of equivalent to something like files, lines of files, dot lines, dot limit 101, right?

51
00:03:51,670 --> 00:03:58,930
If I were to do the dot limit one to one and then a A for each with a system out dot print line or something

52
00:03:58,930 --> 00:03:59,470
like that.

53
00:04:00,190 --> 00:04:01,990
This is pretty equivalent to that.

54
00:04:02,000 --> 00:04:09,010
The only additional thing that I'm doing here is I'm redirecting the output into a new file and I could

55
00:04:09,010 --> 00:04:12,550
do that in Java, too, but this is just quicker.

56
00:04:12,670 --> 00:04:12,940
All right.

57
00:04:12,950 --> 00:04:16,480
So now that I've created this new file, I can open that file up.

58
00:04:18,660 --> 00:04:25,410
And with the open command, and this will by default open up that file in the native default spreadsheet

59
00:04:25,410 --> 00:04:33,990
program for MAX, which is called numbers, it's kind of apples, cheap, cheap competitor to XL.

60
00:04:34,260 --> 00:04:34,590
All right.

61
00:04:34,600 --> 00:04:37,260
So here we are in the spreadsheet.

62
00:04:38,190 --> 00:04:39,570
And let's see here.

63
00:04:39,570 --> 00:04:42,180
Yeah, so I think that looks like around a hundred lines.

64
00:04:42,210 --> 00:04:44,220
Notice it did a few neat things for.

65
00:04:44,220 --> 00:04:51,450
I said it recognized it went ahead and took that first row, which is our header row, and it represents

66
00:04:51,450 --> 00:04:53,190
that row as a header row, right?

67
00:04:53,190 --> 00:04:57,780
So that's why it's in darker, grey and bolded and everything.

68
00:04:57,990 --> 00:04:59,880
And then we've got our data rows here.

69
00:05:00,420 --> 00:05:00,820
All right.

70
00:05:00,840 --> 00:05:04,560
So just for a quick review.

71
00:05:04,800 --> 00:05:11,760
So what our program is currently doing is it's just currently adding up all of the salaries, right?

72
00:05:11,940 --> 00:05:16,350
And so I'll just show you very quickly as a review what that looks like in a spreadsheet for those of

73
00:05:16,350 --> 00:05:20,040
you who are not super familiar with the spreadsheet program.

74
00:05:20,280 --> 00:05:25,320
So if I find the salary column, then let me also zoom in on that.

75
00:05:25,350 --> 00:05:26,120
Sorry about that.

76
00:05:26,160 --> 00:05:27,720
So you can see it more clearly.

77
00:05:27,720 --> 00:05:29,040
Where is the salary?

78
00:05:29,310 --> 00:05:29,880
There it is.

79
00:05:29,880 --> 00:05:31,320
There's the salary column, right?

80
00:05:31,590 --> 00:05:36,990
OK, so if I come down here to the bottom of this?

81
00:05:39,650 --> 00:05:45,290
Of this column, and I will right click on that and I'll add a new row below.

82
00:05:45,710 --> 00:05:46,280
Here we go.

83
00:05:46,400 --> 00:05:53,330
And now the selected data cell is this new one here and then I can come up here to insert some.

84
00:05:57,330 --> 00:06:05,490
And so that has automatically summed up our totaled up all of the data in this salary column.

85
00:06:05,730 --> 00:06:12,720
Now it's not formatted nicely, and if I want to do that, I can come over here to the format and choose

86
00:06:12,720 --> 00:06:18,420
sell and let's change the format type to currency.

87
00:06:19,110 --> 00:06:23,940
So the reason I'm showing you these things is just to show you that the things that we've been doing

88
00:06:23,940 --> 00:06:32,040
programmatically have a very strong analog in this particular case in in a spreadsheet program, OK?

89
00:06:32,160 --> 00:06:36,300
And so this is just another way of seeing what we've been doing programmatically.

90
00:06:36,300 --> 00:06:40,380
We can do those same types of things in a spreadsheet in this particular case.

91
00:06:40,830 --> 00:06:41,130
All right.

92
00:06:41,130 --> 00:06:46,650
So there now that's formatted as money, and I can even throw the comma separator in there and then

93
00:06:46,650 --> 00:06:49,830
let's get this wider so that we can actually see everything there.

94
00:06:49,860 --> 00:06:54,600
So there you go eleven million eight hundred fifty five thousand for these hundred rows.

95
00:06:56,370 --> 00:07:01,100
So if I wanted to, I could also format all of these numbers, but I'm not going to bother with that.

96
00:07:01,110 --> 00:07:02,070
You get the gist.

97
00:07:02,850 --> 00:07:05,910
OK, so that's what we've been doing programmatically now.

98
00:07:05,910 --> 00:07:07,350
We just did it in a spreadsheet.

99
00:07:07,380 --> 00:07:15,150
OK, now the next thing I want to do, though, in fact, let me I'm going to delete this row now.

100
00:07:15,150 --> 00:07:19,440
I just was showing you that kind of for kind of an analog to what we've done so far.

101
00:07:19,830 --> 00:07:20,220
All right.

102
00:07:20,460 --> 00:07:25,830
Now the next thing I want to do, though, is show you what it would look like to group up these records

103
00:07:25,830 --> 00:07:27,480
by some category.

104
00:07:27,960 --> 00:07:33,180
So let's say that we wanted to group these records by state.

105
00:07:33,600 --> 00:07:37,110
OK, so if I find the state column there, there it is.

106
00:07:37,140 --> 00:07:37,530
OK.

107
00:07:37,890 --> 00:07:44,550
So what I can do is I can come up here to the ad category button and it lets me choose a state.

108
00:07:44,550 --> 00:07:47,190
So what it's basically asking me is what?

109
00:07:48,060 --> 00:07:52,170
What field do you want to categorize these records by?

110
00:07:52,410 --> 00:07:53,460
And I'm going to tell it.

111
00:07:53,460 --> 00:07:56,160
I want to categorize these records by state.

112
00:07:57,490 --> 00:07:58,720
And now look what it did.

113
00:07:58,810 --> 00:08:04,410
Very, very quickly, almost instantaneously, it just grouped these up by the states, right?

114
00:08:04,420 --> 00:08:05,530
So here they are.

115
00:08:06,770 --> 00:08:15,080
And so we're seeing all of the people in that in this total data set from New Mexico, from Pennsylvania,

116
00:08:15,230 --> 00:08:16,430
Minnesota, et cetera.

117
00:08:16,490 --> 00:08:16,850
Right.

118
00:08:19,060 --> 00:08:25,840
Now, if I wanted to alphabetize this, have these states alphabetized, I could go over here to the

119
00:08:25,840 --> 00:08:27,910
state column.

120
00:08:30,030 --> 00:08:30,630
There it is.

121
00:08:30,930 --> 00:08:38,250
And come up here to the header, the the main header for it and select this and then choose to sort

122
00:08:38,550 --> 00:08:40,620
state groups ascending.

123
00:08:41,490 --> 00:08:45,810
All right, so now if I come over here, now we've got Alabama, Arkansas, California, so now it's

124
00:08:45,810 --> 00:08:48,990
all, it's all alphabetized, right?

125
00:08:49,470 --> 00:08:51,120
Then I can collapse these.

126
00:08:52,280 --> 00:08:52,650
Right.

127
00:08:54,620 --> 00:08:57,530
And I can expand them all as well.

128
00:08:57,830 --> 00:08:58,090
All right.

129
00:08:58,110 --> 00:08:59,960
So let me close this format bit here.

130
00:09:00,080 --> 00:09:06,470
OK, so the reason I wanted to show you this is so that you would see visually what it looks like and

131
00:09:06,470 --> 00:09:16,520
what it means to group records to group a two dimensional table of records by some category or by some

132
00:09:16,520 --> 00:09:17,390
field, right?

133
00:09:17,410 --> 00:09:21,320
So in this case, we've grouped all of these records by the state field.

134
00:09:21,560 --> 00:09:28,820
And so what you end up with is kind of like an indented kind of a deal where the first level is the

135
00:09:28,820 --> 00:09:36,290
state and then the indented bits after that are all of the records in this case that come after that

136
00:09:36,290 --> 00:09:36,830
state.

137
00:09:36,890 --> 00:09:37,280
Right.

138
00:09:37,670 --> 00:09:37,970
All right.

139
00:09:37,970 --> 00:09:44,840
So now that we've seen what this looks like, let's jump over to the Edee and do the same thing there

140
00:09:44,840 --> 00:09:46,490
or the equivalent there.

141
00:09:46,700 --> 00:09:47,060
All right.

142
00:09:49,140 --> 00:09:56,070
OK, so here we are back in the I.D. and we were dealing with the collect method, which I was telling

143
00:09:56,070 --> 00:10:03,000
you earlier, is going to be our gateway into a lot more advanced capabilities like grouping data.

144
00:10:03,270 --> 00:10:03,540
All right.

145
00:10:03,540 --> 00:10:07,770
And so currently we're just summing up all of the salaries, but we're not going to do that anymore.

146
00:10:08,190 --> 00:10:12,570
So now we want to emulate what we just did in the spreadsheet.

147
00:10:12,900 --> 00:10:19,320
And so we're going to use another function that goes inside of the collect method and that function

148
00:10:19,320 --> 00:10:20,640
is called grouping by.

149
00:10:21,000 --> 00:10:24,300
So if I just start typing here, there it is our grouping by now.

150
00:10:24,300 --> 00:10:30,990
If you don't get this auto completion, you may need to type out collectors' dot grouping by.

151
00:10:30,990 --> 00:10:35,790
You may need to do that and then you can statically import the grouping by method.

152
00:10:35,790 --> 00:10:38,070
And then that would allow you to delete the collectors.

153
00:10:38,070 --> 00:10:43,860
So if you don't get the auto completion by default, you can always just prepend with the collector's

154
00:10:44,520 --> 00:10:45,360
class name.

155
00:10:45,720 --> 00:10:48,540
All right, so let me get rid of that.

156
00:10:51,780 --> 00:10:53,550
Grouping by now.

157
00:10:54,030 --> 00:10:55,480
This is super easy to use.

158
00:10:55,500 --> 00:11:00,600
So think about what we did in the spreadsheet when we told the spreadsheet that we wanted to categorize

159
00:11:00,600 --> 00:11:01,620
our group by.

160
00:11:01,860 --> 00:11:04,680
It asked us to pick a column, right?

161
00:11:04,890 --> 00:11:06,030
Same thing here.

162
00:11:06,300 --> 00:11:14,910
And we can and and because we have now stored our pertinent bits of information, namely the state as

163
00:11:14,910 --> 00:11:23,670
a field in a domain model of person of class person, we can use a method reference to the getter method

164
00:11:23,670 --> 00:11:25,410
for the state field.

165
00:11:25,590 --> 00:11:30,790
So in other words, we can simply type person colon, colon state like so.

166
00:11:31,020 --> 00:11:35,010
Now notice as soon as I did that, I got read errors all over the place.

167
00:11:35,010 --> 00:11:40,560
And if I hover over this, it's going to say that we've got to require type of lung.

168
00:11:40,560 --> 00:11:42,090
But what was provided was a map.

169
00:11:42,090 --> 00:11:49,230
And all it's saying is that now that we're using the grouping by method, we are no longer returning

170
00:11:49,230 --> 00:11:51,750
a result of type long.

171
00:11:51,930 --> 00:12:00,510
We are now returning a result of type map of string to a list of person, which sounds kind of complicated.

172
00:12:00,510 --> 00:12:05,760
But let's just go back over to the spreadsheet and and I'll make it make sense really easily.

173
00:12:05,760 --> 00:12:14,590
So it's going to return a map now and what its mapping is the the states to the people.

174
00:12:14,620 --> 00:12:23,070
OK, so the the keys, if you remember a map is basically just a list of key value pairs, right keys

175
00:12:23,070 --> 00:12:24,510
and then values, right?

176
00:12:24,780 --> 00:12:26,070
So in this spreadsheet?

177
00:12:26,100 --> 00:12:31,470
So in terms of what we see here in this spreadsheet, the keys would be these state codes.

178
00:12:31,470 --> 00:12:33,000
Al RCA.

179
00:12:33,090 --> 00:12:33,390
OK.

180
00:12:33,420 --> 00:12:34,470
Those are the keys.

181
00:12:34,920 --> 00:12:38,280
And then the values would be all of these rows.

182
00:12:38,460 --> 00:12:38,940
OK.

183
00:12:39,390 --> 00:12:47,160
Underneath that state and these rows currently are represented in our Java code as the by the person

184
00:12:47,160 --> 00:12:47,770
class.

185
00:12:47,790 --> 00:12:48,240
OK.

186
00:12:48,540 --> 00:12:51,180
But we've got a list of them, literally.

187
00:12:51,180 --> 00:12:52,440
We've got a list of them.

188
00:12:52,740 --> 00:12:59,790
So what we're getting over here in the E is also a mapping of strings, which are our state codes.

189
00:13:00,030 --> 00:13:04,260
Mapping those state codes to a list of people.

190
00:13:04,440 --> 00:13:08,980
So I know this is a little difficult to read, especially if you're kind of new to looking at all of

191
00:13:08,980 --> 00:13:10,310
this because it looks kind of messy.

192
00:13:10,320 --> 00:13:14,580
Let me see if I can stretch that out and make it at least show up a little nicer.

193
00:13:15,710 --> 00:13:19,730
Yes, so maybe that's maybe that looks a little easier to read, at least.

194
00:13:20,110 --> 00:13:26,930
OK, but what we're seeing here is a map of string to a list of person.

195
00:13:27,320 --> 00:13:29,690
And that's exactly what we're seeing here.

196
00:13:29,990 --> 00:13:36,380
Strings text of the state to a list of people.

197
00:13:36,710 --> 00:13:37,070
Right.

198
00:13:37,370 --> 00:13:45,740
So this is visually the equivalent of what the grouping by method is currently going to return us.

199
00:13:45,830 --> 00:13:46,250
OK.

200
00:13:46,310 --> 00:13:51,980
And that's again, why I wanted to use this spreadsheet so that you could visualize and see conceptually

201
00:13:51,980 --> 00:13:56,570
what is actually happening with this grouping by because otherwise it can be a little intimidating and

202
00:13:56,570 --> 00:14:01,730
confusing, especially as we proceed to do even fancier things with the data set because we can go a

203
00:14:01,730 --> 00:14:02,810
lot further than this.

204
00:14:03,140 --> 00:14:03,430
All right.

205
00:14:03,440 --> 00:14:04,520
So back over here.

206
00:14:04,670 --> 00:14:10,640
So to get rid of the red marks, we can actually just put our cursor here and then do an option return

207
00:14:10,790 --> 00:14:11,690
and have the ID.

208
00:14:11,960 --> 00:14:13,220
Just fix it for us, right?

209
00:14:13,430 --> 00:14:19,460
So all it's going to do is just change the the data type of the result from a long that we had before

210
00:14:19,460 --> 00:14:27,770
to a map of string to list person, meaning mapping strings the states to the list of people.

211
00:14:27,980 --> 00:14:28,310
Right.

212
00:14:28,520 --> 00:14:29,600
So is that pretty?

213
00:14:30,080 --> 00:14:31,310
So does that make sense?

214
00:14:32,570 --> 00:14:32,960
All right.

215
00:14:33,140 --> 00:14:34,880
And then down here before we run it.

216
00:14:35,570 --> 00:14:42,590
This result, now that it is a map, it won't make sense to try to use the print statement with this

217
00:14:42,590 --> 00:14:44,210
format string and all of this.

218
00:14:44,480 --> 00:14:47,240
The formatter wouldn't know what to do with a map.

219
00:14:47,370 --> 00:14:51,050
OK, so we're going to just comment that out for now.

220
00:14:51,290 --> 00:14:56,600
And I will replace it with a new system out, and for now, I'm not going to get fancy.

221
00:14:56,660 --> 00:15:04,310
I'm just going to use the default two string method of the map class to allow it to be printed in whatever

222
00:15:04,310 --> 00:15:05,240
way it sees fit.

223
00:15:05,390 --> 00:15:07,880
It probably won't be pretty, but it's a start.

224
00:15:07,910 --> 00:15:08,330
OK.

225
00:15:08,540 --> 00:15:13,550
OK, so now that we've got these few changes here, let's go ahead and run this and see what it.

226
00:15:13,910 --> 00:15:15,170
And see what it outputs.

227
00:15:15,890 --> 00:15:16,290
OK.

228
00:15:16,310 --> 00:15:22,940
And I totally forgot to limit the results here because we we just printed out all five million records

229
00:15:23,540 --> 00:15:25,070
sorted out by state.

230
00:15:25,070 --> 00:15:29,270
And that's going to be a little difficult to parse out something meaningful here.

231
00:15:29,450 --> 00:15:37,490
So what I'm going to do is I'm going to throw back on the limit real quick and let's just run that again.

232
00:15:37,820 --> 00:15:38,690
Sorry about that.

233
00:15:39,590 --> 00:15:40,130
There we go.

234
00:15:40,130 --> 00:15:41,810
And that's a lot quicker and a lot shorter.

235
00:15:42,110 --> 00:15:45,130
So now what we are seeing is taxes.

236
00:15:45,140 --> 00:15:54,410
And then we're seeing a person, Imogene Hagopian and Louisiana Walker Warlick, something or other

237
00:15:54,410 --> 00:15:57,980
and Ohio Lizbeth.

238
00:15:58,880 --> 00:16:00,510
And let's see and.

239
00:16:00,530 --> 00:16:07,850
OK, so Ohio as this person, Elizabeth and another person, Foust, though, these are all people in

240
00:16:07,850 --> 00:16:10,700
Ohio, apparently, and Vonda.

241
00:16:11,540 --> 00:16:13,880
And then we've got New Jersey, right?

242
00:16:14,240 --> 00:16:16,890
So we can see a few different.

243
00:16:16,910 --> 00:16:24,710
So some states have multiple people associated with that state like here's New Jersey with destiny and

244
00:16:24,710 --> 00:16:31,610
E. The California has Damien and Jason Cita.

245
00:16:31,760 --> 00:16:39,590
I guess ASU, CTA D.C. has one person out of our current data set, at least.

246
00:16:39,630 --> 00:16:42,850
OK, so we can see that now again.

247
00:16:43,070 --> 00:16:48,200
If I hadn't shown you the spreadsheet and I had just run this program for you, some of you might have

248
00:16:48,200 --> 00:16:51,410
been fairly confused by how to make heads or tails of this.

249
00:16:51,410 --> 00:16:55,310
But what we're really seeing here now is here's Texas, right?

250
00:16:55,490 --> 00:16:57,360
And then here's someone named Imogene.

251
00:16:57,380 --> 00:17:04,340
Let's see if if Imogene happens to show up in our data set in the spreadsheet here, do we have Texas?

252
00:17:05,120 --> 00:17:07,480
Let's see, Texas.

253
00:17:07,490 --> 00:17:09,170
There's Imogene right there.

254
00:17:09,650 --> 00:17:17,750
So in this dataset, we've got one two three four five six seven eight people in Texas, and I don't

255
00:17:17,750 --> 00:17:19,160
think we had eight here.

256
00:17:19,760 --> 00:17:26,180
That's because here we constrained our dataset to just about 10 records, right?

257
00:17:26,210 --> 00:17:26,540
Really?

258
00:17:26,540 --> 00:17:27,350
Nine records.

259
00:17:28,070 --> 00:17:29,390
So we didn't get everyone.

260
00:17:30,760 --> 00:17:38,950
But yeah, so we've only got Imogene here, but that's the taxes bit, and then else Louisiana, I almost

261
00:17:38,950 --> 00:17:42,340
said L.A., Louisiana.

262
00:17:43,240 --> 00:17:45,100
There's there's Louisiana.

263
00:17:45,730 --> 00:17:48,630
So we had four people in the original data set there, right?

264
00:17:48,640 --> 00:17:53,940
So there's your L.A. And then here are the actual people over here.

265
00:17:53,950 --> 00:17:59,500
We've got Louisiana, and we're only showing the one person Walker.

266
00:18:00,250 --> 00:18:01,870
Here's Walker, right?

267
00:18:03,250 --> 00:18:10,750
And let's look at maybe one more here, Ohio, and we had a couple of people for Ohio, Liz, Beth and

268
00:18:10,750 --> 00:18:12,040
Fausto.

269
00:18:12,430 --> 00:18:14,560
Let's find Ohio.

270
00:18:16,040 --> 00:18:18,830
There's Ohio, so there's Liz F and there's foul stuff.

271
00:18:19,460 --> 00:18:19,970
All right.

272
00:18:20,270 --> 00:18:24,740
So, yeah, now the other thing that we could do.

273
00:18:25,690 --> 00:18:34,930
Is we in our spreadsheet, we did alphabetize these right, and we can do that fairly easily with our

274
00:18:34,930 --> 00:18:36,340
code as well.

275
00:18:36,550 --> 00:18:45,940
So one of the easiest ways that we could get these alphabetized by state would be to use another overloaded

276
00:18:45,940 --> 00:18:49,170
version of the grouping by function here.

277
00:18:49,180 --> 00:18:55,030
So if I put my cursor right here after the first parentheses and do a command p to show me parameters,

278
00:18:55,630 --> 00:19:03,550
I get to see different versions or overloaded versions of this method or function and what those different

279
00:19:03,880 --> 00:19:04,990
versions take.

280
00:19:05,200 --> 00:19:09,250
Currently, we're using this first version that just takes a classifier.

281
00:19:09,280 --> 00:19:09,730
OK?

282
00:19:10,330 --> 00:19:18,340
And another version that takes two arguments a classifier again and then a something and then something

283
00:19:18,340 --> 00:19:19,630
called a downstream.

284
00:19:20,410 --> 00:19:22,570
We'll get into some of these options.

285
00:19:22,570 --> 00:19:31,450
But and then there's another one here that can take a classifier, a map factory and the downstream.

286
00:19:31,690 --> 00:19:34,600
So let's see how we can do this.

287
00:19:36,540 --> 00:19:42,540
So the one that we're kind of interested in is this one that takes a so-called map factory, OK?

288
00:19:43,140 --> 00:19:48,600
And all that is is a method in the form of a lambda or a method reference or something of that sort,

289
00:19:48,600 --> 00:19:51,480
or it could be in or it could be an anonymous class.

290
00:19:52,350 --> 00:19:56,880
Even that will supply some type of map.

291
00:19:57,210 --> 00:20:02,730
And so this allows us to return a specific instance of a map, OK?

292
00:20:02,850 --> 00:20:12,070
So currently, these entries are out of order by state because it is using a hash map.

293
00:20:12,090 --> 00:20:12,510
OK.

294
00:20:12,660 --> 00:20:16,230
But we can make it use some other instance of a map.

295
00:20:16,410 --> 00:20:21,640
So if we wanted these entries, the keys really to be alphabetized.

296
00:20:21,660 --> 00:20:29,340
Can you remember what implementation of the map interface might be best for getting alphabetized entries

297
00:20:29,340 --> 00:20:29,970
by key?

298
00:20:31,900 --> 00:20:39,500
OK, so we could use a tree map, right, because tree maps alphabetized by key by default.

299
00:20:39,520 --> 00:20:39,850
Right.

300
00:20:40,180 --> 00:20:45,040
And so what we need to do here is inside of our grouping grouping by method.

301
00:20:45,490 --> 00:20:54,790
After we specify this first field here, the state, the field that we want to order by or grouped by,

302
00:20:55,150 --> 00:20:59,980
I'll put a comma here and then I can supply a map factory.

303
00:21:00,160 --> 00:21:04,750
Now that sounds fancy, but all it is, it's just another lambda or a method reference.

304
00:21:04,750 --> 00:21:10,960
And really, the simplest thing I could do here is probably just refer to tree map as a method as a

305
00:21:10,960 --> 00:21:12,580
method reference with new.

306
00:21:12,820 --> 00:21:15,020
This is another way of just saying new tree map.

307
00:21:15,040 --> 00:21:19,600
OK, but doing it in a method reference type of way like so.

308
00:21:20,410 --> 00:21:20,830
All right.

309
00:21:21,190 --> 00:21:24,340
And now I need to do one thing that we weren't doing before.

310
00:21:24,350 --> 00:21:33,760
So when we're using the version of grouping by that only takes one input, which is basically the field

311
00:21:33,760 --> 00:21:35,620
that we want to group by.

312
00:21:36,880 --> 00:21:44,800
By default, it will take all of the records that got grouped and it will throw them into a list and

313
00:21:44,800 --> 00:21:45,530
return that.

314
00:21:45,580 --> 00:21:49,420
So if this is all you want, then you don't need to specify the rest of it.

315
00:21:49,600 --> 00:21:55,240
But now that I want to use one of the alternative versions of the grouping by method where we're going

316
00:21:55,240 --> 00:22:02,170
to additionally specify a custom implementation of the map, I now have to also tell it what to do with

317
00:22:02,170 --> 00:22:02,960
the records.

318
00:22:02,980 --> 00:22:03,280
OK.

319
00:22:03,460 --> 00:22:05,830
Not much to do there, but you'll see.

320
00:22:06,070 --> 00:22:13,280
So, all right, so we're going to tell it to use a tree map instead of the default of hash map.

321
00:22:13,450 --> 00:22:19,720
And now we need to tell it what to do with our actual records and what it was doing previously was it

322
00:22:19,720 --> 00:22:23,740
was just taking those records that got grouped and it was throwing them into a list.

323
00:22:23,860 --> 00:22:27,430
We can have it, keep doing that and we can just tell it explicitly to do that.

324
00:22:27,970 --> 00:22:34,660
There's another collectors' method to list, and we've actually used this before back when we originally

325
00:22:34,660 --> 00:22:36,730
learned how to use the collect method.

326
00:22:36,970 --> 00:22:43,030
We learned that we could take the output of the dot collect and throw it into different collections,

327
00:22:43,030 --> 00:22:43,330
right?

328
00:22:43,540 --> 00:22:48,970
And probably, I think the very first collection we learned how to use in that example was a list by

329
00:22:48,970 --> 00:22:49,750
using the two lists.

330
00:22:49,900 --> 00:22:53,590
This is the same to list, so you're not even learning anything new here.

331
00:22:54,670 --> 00:22:55,090
All right.

332
00:22:55,240 --> 00:23:02,080
And so notice that we don't have any red marks or anything, we didn't need to change the data type

333
00:23:02,080 --> 00:23:08,560
for the result because we're still returning a map of strings to a list of person, right?

334
00:23:08,890 --> 00:23:13,930
But now this map, instead of being a hash map, it is now a tree map.

335
00:23:14,110 --> 00:23:14,470
All right.

336
00:23:14,620 --> 00:23:17,770
And so now if we run this again, let's see what we'll get.

337
00:23:18,810 --> 00:23:19,470
There we go.

338
00:23:19,650 --> 00:23:28,050
And so now we've got California as the starting state, and let's see as we scroll through, then we've

339
00:23:28,050 --> 00:23:35,070
got D.C. So that's looking alphabetical so far and then Louisiana and then New Jersey.

340
00:23:37,730 --> 00:23:38,750
Ohio.

341
00:23:42,690 --> 00:23:44,640
Texas, yeah.

342
00:23:44,970 --> 00:23:46,140
So there you go.

343
00:23:46,170 --> 00:23:47,940
Now that's alphabetized, right?

344
00:23:48,150 --> 00:23:54,270
So again, we've just done the equivalent of what we had done over here where I had what did I do?

345
00:23:54,270 --> 00:24:00,660
I selected the the state header and then I told it to sort by an ascending order or whatever, right?

346
00:24:01,170 --> 00:24:02,730
And so we've done the same thing here.

347
00:24:03,390 --> 00:24:03,680
All right.

348
00:24:03,690 --> 00:24:05,400
So we're going to wrap up this lesson.

349
00:24:05,400 --> 00:24:11,220
And in the next lesson, we'll continue to learn some more techniques that we can do with the collect

350
00:24:11,220 --> 00:24:12,810
method and grouping by.

351
00:24:13,290 --> 00:24:14,470
So stay tuned.

352
00:24:14,490 --> 00:24:15,420
See in the next one.
