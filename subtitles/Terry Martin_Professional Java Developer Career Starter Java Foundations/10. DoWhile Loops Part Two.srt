1
00:00:00,150 --> 00:00:05,340
All right, so next up, let's consider another scenario with this guessing game.

2
00:00:05,790 --> 00:00:12,780
What if we wanted to limit the number of guests as we allow the user to have?

3
00:00:12,810 --> 00:00:13,140
Right?

4
00:00:13,470 --> 00:00:16,640
Normally guessing games won't let you just keep guessing forever.

5
00:00:16,650 --> 00:00:17,160
They will.

6
00:00:17,160 --> 00:00:18,600
They will limit you somehow.

7
00:00:19,020 --> 00:00:26,940
So let us consider some ways in which we could prevent the user from just constantly guessing forever.

8
00:00:27,420 --> 00:00:33,660
Let's say that we only want to allow them to have four guesses, and you can change that number to whatever

9
00:00:33,660 --> 00:00:34,120
you want.

10
00:00:34,140 --> 00:00:34,920
Five guesses.

11
00:00:34,920 --> 00:00:36,030
Three guesses, whatever.

12
00:00:36,210 --> 00:00:37,210
It does not matter.

13
00:00:37,230 --> 00:00:37,640
OK?

14
00:00:38,010 --> 00:00:43,680
So let's say we wanted to limit them, though, to whatever four guesses, I would like you to pause

15
00:00:43,680 --> 00:00:50,550
the lesson and really put some thought into some ways that you might do this, or you're welcome to

16
00:00:50,550 --> 00:00:53,920
actually even try implementing it yourself first.

17
00:00:53,940 --> 00:00:54,420
OK.

18
00:00:54,870 --> 00:01:00,570
And then when you think you've got it or you give up, come back and we'll try to figure this out together.

19
00:01:01,890 --> 00:01:02,440
All right.

20
00:01:02,550 --> 00:01:05,250
So let's see how we could do that.

21
00:01:05,260 --> 00:01:09,930
So if we wanted to limit the user to only getting like four guesses.

22
00:01:10,050 --> 00:01:13,890
So we already have this wrong guest count variable here.

23
00:01:13,890 --> 00:01:17,490
So that's going to probably be pretty useful to use.

24
00:01:17,520 --> 00:01:17,880
Right?

25
00:01:18,480 --> 00:01:25,380
So what I'm kind of thinking is we already are incrementing this counter down here when yet whenever

26
00:01:25,380 --> 00:01:27,060
you get a guess wrong?

27
00:01:27,270 --> 00:01:33,210
So I can see a couple of possibilities here and I'm telling you now, I haven't worked this out as I'm

28
00:01:33,210 --> 00:01:33,810
recording this.

29
00:01:33,810 --> 00:01:35,580
I have not worked this out myself.

30
00:01:35,580 --> 00:01:41,910
So I'm going to try to keep this video honest and show you my thought process as I work through this.

31
00:01:42,200 --> 00:01:48,240
The problem with me sometimes trying to work through these things live, so to speak in the recording

32
00:01:48,240 --> 00:01:51,960
is I may start to go down one road and then decide, I don't like that.

33
00:01:52,080 --> 00:01:56,490
And since you're learning, I know that that can sometimes be kind of confusing for you.

34
00:01:56,490 --> 00:02:00,420
If you see me going one way and then I back up and then I go down another path.

35
00:02:00,540 --> 00:02:05,790
So I want to try to limit how often I do that kind of live thinking in front of you.

36
00:02:05,790 --> 00:02:12,990
But I also want you to see how the thought processes go when we are figuring out how to write code,

37
00:02:13,230 --> 00:02:14,940
because that's very real, right?

38
00:02:15,450 --> 00:02:15,770
All right.

39
00:02:15,780 --> 00:02:21,310
So so I have two thoughts kind of going through my mind in addition to using the wrong guest count.

40
00:02:21,660 --> 00:02:28,350
I'm kind of gravitating towards either doing some kind of conditional thing down here in the last block

41
00:02:28,680 --> 00:02:36,630
or potentially doing some conditional thing down here, because the criteria here in this wild clause

42
00:02:36,720 --> 00:02:41,650
already is here to determine when we should stop looping, right?

43
00:02:41,700 --> 00:02:52,200
So currently, we stop looping when the user enters a queue, but we could additionally stop looping

44
00:02:52,710 --> 00:02:59,550
if the wrong guest count exceeds four or is four or something like that right?

45
00:02:59,580 --> 00:03:02,040
We could do something along those lines.

46
00:03:02,550 --> 00:03:08,850
Now, the only other thing I'm thinking, though, is that if we simply put in here, something like

47
00:03:08,850 --> 00:03:15,580
wild queue is not equal to guest number or wrong guest count is less than four.

48
00:03:15,780 --> 00:03:17,820
That would allow the loop to continue to go.

49
00:03:18,000 --> 00:03:25,350
But when wrong guest count is four, then as the program is written currently, the program would simply

50
00:03:25,350 --> 00:03:28,500
end and that wouldn't give any feedback.

51
00:03:28,500 --> 00:03:38,310
We'd probably want something like if you have four guesses for incorrect guesses, then we want to present

52
00:03:38,310 --> 00:03:42,270
a message saying you had four tries and you didn't get it.

53
00:03:42,270 --> 00:03:45,750
And here was the heroes, the number or something, something like that.

54
00:03:46,320 --> 00:03:51,590
However, if the user simply hits cue, we don't need to show that message, right?

55
00:03:51,600 --> 00:03:52,260
So we have.

56
00:03:52,440 --> 00:03:57,750
So in other words, there's going to be some kind of conditional thing happening, even some kind of

57
00:03:57,750 --> 00:04:05,610
additional conditional text output happening, either here where we're going to say if the wrong guest

58
00:04:05,610 --> 00:04:10,290
count is four or more, then in addition to telling them they didn't get it.

59
00:04:10,470 --> 00:04:14,640
Also, let them know that, hey, we're killing the program now or something like that.

60
00:04:14,910 --> 00:04:17,160
I'm inclined to do both, actually.

61
00:04:17,310 --> 00:04:20,460
What I'm thinking is we can.

62
00:04:20,970 --> 00:04:22,110
Well, let's just see here.

63
00:04:22,440 --> 00:04:22,760
All right.

64
00:04:22,770 --> 00:04:26,310
So maybe I'm going to make a new line right here.

65
00:04:26,490 --> 00:04:39,960
And we can say if the wrong guest count is greater than or equal to four, then output.

66
00:04:40,710 --> 00:04:57,990
I'm going to use a system out that print f you've had percent the guesses percentage in correct guesses.

67
00:04:59,700 --> 00:05:13,080
The random number is percent, the ending program now and then we will bind our numbers.

68
00:05:13,170 --> 00:05:19,380
So you've had wrong guest count and the random number.

69
00:05:21,350 --> 00:05:26,450
OK, so that would show our message, if you guessed.

70
00:05:27,630 --> 00:05:29,310
More than four times.

71
00:05:30,380 --> 00:05:38,990
However, that alone doesn't end the program, so if we want to end the program, the easiest way to

72
00:05:38,990 --> 00:05:45,980
do that probably would be just to return, just like we're doing up here.

73
00:05:46,790 --> 00:05:51,590
OK, so let's build this and try it out and see what we get.

74
00:05:52,670 --> 00:05:53,300
All right.

75
00:05:54,260 --> 00:05:55,580
I'm going to clear.

76
00:05:55,760 --> 00:05:57,170
And then let's rerun.

77
00:05:58,130 --> 00:05:58,430
All right.

78
00:05:58,430 --> 00:06:00,890
So our random number is six.

79
00:06:01,130 --> 00:06:03,860
So let's just guess wrong a bunch.

80
00:06:04,070 --> 00:06:04,790
Two.

81
00:06:05,030 --> 00:06:05,870
You didn't get it.

82
00:06:06,110 --> 00:06:06,800
One.

83
00:06:07,010 --> 00:06:07,820
You didn't get it.

84
00:06:08,090 --> 00:06:08,720
Three.

85
00:06:08,960 --> 00:06:09,470
All right.

86
00:06:10,600 --> 00:06:12,070
Two, one three.

87
00:06:12,100 --> 00:06:13,120
Was that correct?

88
00:06:13,150 --> 00:06:14,410
Now let's see here.

89
00:06:14,620 --> 00:06:22,470
I feel a little off with the counting here, so we made one guess of a two one guests of a one one guess

90
00:06:22,480 --> 00:06:25,450
of a three.

91
00:06:25,840 --> 00:06:26,590
Ah, OK.

92
00:06:26,590 --> 00:06:29,410
So our counting is off here, right?

93
00:06:30,010 --> 00:06:39,550
We only made three guesses and then we got this message, and that is because we are incrementing the

94
00:06:39,550 --> 00:06:41,560
counter here.

95
00:06:41,890 --> 00:06:49,960
So what we might want to do is either increment the counter after this or change this logic to say wrong

96
00:06:49,960 --> 00:06:52,630
guest count greater than for either one.

97
00:06:53,470 --> 00:06:56,650
I don't know that there's much of a difference between either of those.

98
00:06:56,700 --> 00:06:58,870
Let's let's try just moving this.

99
00:07:01,060 --> 00:07:03,520
Here, let's rebuild.

100
00:07:04,660 --> 00:07:07,480
Let's clear and try it again.

101
00:07:08,410 --> 00:07:09,550
All right, random numbers three.

102
00:07:09,580 --> 00:07:15,040
So let's do one two four five.

103
00:07:16,210 --> 00:07:17,290
That feels better.

104
00:07:17,920 --> 00:07:23,080
You didn't get it, you've had four incorrect guesses the random number is three ending program now.

105
00:07:23,410 --> 00:07:28,600
Let me fix the little message there for the ending program now percent in.

106
00:07:28,750 --> 00:07:29,200
There we go.

107
00:07:30,670 --> 00:07:32,260
That feels about right to me.

108
00:07:32,890 --> 00:07:35,020
That looks good right now.

109
00:07:35,030 --> 00:07:40,060
It's always a good idea when you're making changes like this to do what's called regression testing,

110
00:07:40,060 --> 00:07:44,350
and that's where you just retest the functionality that was working before.

111
00:07:44,590 --> 00:07:51,040
So I've only tested this one scenario where I have four incorrect guesses, but I haven't tested what

112
00:07:51,040 --> 00:07:56,830
happens when I get it right, when I get it right after a couple of incorrect guesses, etc. So let's

113
00:07:56,830 --> 00:07:59,350
let's test those scenarios also.

114
00:07:59,770 --> 00:08:02,020
So I'm going to rerun the numbers.

115
00:08:02,020 --> 00:08:02,310
Five.

116
00:08:02,320 --> 00:08:05,440
So let's test getting it correct on the very first try.

117
00:08:05,470 --> 00:08:06,040
Five.

118
00:08:06,850 --> 00:08:08,250
Random number was five.

119
00:08:08,260 --> 00:08:09,340
You got it in one try.

120
00:08:09,340 --> 00:08:10,380
OK, that looks good.

121
00:08:10,390 --> 00:08:11,650
Let's try it again.

122
00:08:11,860 --> 00:08:14,410
Let's see what happens when we get it correct.

123
00:08:14,410 --> 00:08:17,860
After two guesses, two incorrect guesses.

124
00:08:18,130 --> 00:08:23,050
So let's do a one and a two and now eight.

125
00:08:23,980 --> 00:08:25,050
The random number was eight.

126
00:08:25,060 --> 00:08:29,080
You got it in three tries, so that's still looking good now.

127
00:08:29,110 --> 00:08:37,360
I did mention that we also could have put some additional logic down here just to show what that might

128
00:08:37,360 --> 00:08:38,160
have looked like.

129
00:08:38,170 --> 00:08:40,480
Let's let's go down that road a little bit.

130
00:08:40,810 --> 00:08:42,730
So let's see here.

131
00:08:43,120 --> 00:08:48,040
Currently, we're exiting the entire program because of this return statement here.

132
00:08:48,040 --> 00:08:56,610
But let's see what it looks like if we were to change this logic or add to it and say while guest Nintex

133
00:08:56,620 --> 00:09:05,520
is not Q or and to do or inside of a criteria like this, we use these two pipe symbols to say or so

134
00:09:05,590 --> 00:09:13,840
this allows us to test a couple of different Boolean expressions or wrong guess count.

135
00:09:15,130 --> 00:09:18,400
Is less than five, I believe.

136
00:09:18,820 --> 00:09:23,830
Sometimes you have to really think about these, these these scenarios where you're counting up to a

137
00:09:23,830 --> 00:09:26,700
number, but you do or don't want to include it, right?

138
00:09:26,830 --> 00:09:32,500
I think we want wrong guest count less than five rather than run guest count less than four.

139
00:09:32,650 --> 00:09:36,430
Especially because we moved this variable down here, but we'll see in a moment.

140
00:09:37,000 --> 00:09:37,330
All right.

141
00:09:37,330 --> 00:09:46,990
So while as as long as you aren't hitting Q and or the now, let's think about this or also do we want

142
00:09:46,990 --> 00:09:52,000
an order or do we want an end while Q is not pressed?

143
00:09:53,440 --> 00:10:01,690
So let's say they did not hit Q, but wrong gas count is five, so that would.

144
00:10:02,690 --> 00:10:06,560
So if you did not, it would be true.

145
00:10:06,640 --> 00:10:07,450
Ah, OK.

146
00:10:07,640 --> 00:10:15,830
So we have a problem in our logic here because if you did not hit Q, then this expression would evaluate

147
00:10:15,830 --> 00:10:24,620
to being true and with an or only one of these has to be true to allow the loop to continue.

148
00:10:24,620 --> 00:10:26,000
And that's not what we want.

149
00:10:26,480 --> 00:10:35,420
We want it so that this loop will not continue if you hit Q or if the wrong guest count is is greater

150
00:10:35,420 --> 00:10:37,370
than or equal to five.

151
00:10:38,120 --> 00:10:46,640
So I think what we want here is actually we want this logic to be and and now let's let's analyze this.

152
00:10:47,180 --> 00:10:58,520
So if you didn't hit Q, this will evaluate to true because this is if Q if guest number is not Q,

153
00:10:58,790 --> 00:11:02,390
which it won't be most of the time, then this would be true.

154
00:11:02,930 --> 00:11:09,740
But with this and here, that means that not only this has to be true, this one has to be true also.

155
00:11:10,070 --> 00:11:13,160
So if you didn't hit Q, that's fine.

156
00:11:13,160 --> 00:11:13,980
That'll be true.

157
00:11:14,000 --> 00:11:21,470
However, also the wrong guest count has to be less than five, and as long as it's less than five,

158
00:11:21,470 --> 00:11:22,600
then this would be true, too.

159
00:11:22,610 --> 00:11:29,120
So both of these have to be true in order for this loop to continue in the event that you didn't press.

160
00:11:29,150 --> 00:11:35,990
Q But you had four or more wrong guesses this would evaluate to false.

161
00:11:36,830 --> 00:11:38,840
So you'd have a true and a false.

162
00:11:39,230 --> 00:11:48,020
And because of this and here when you're doing a logical and what happens is that both parts have to

163
00:11:48,020 --> 00:11:51,890
be true in order for the whole thing to evaluate to true.

164
00:11:52,010 --> 00:11:53,780
Okay, so here I want to.

165
00:11:53,780 --> 00:11:57,260
I want to be really clear about that because I know this can be kind of confusing.

166
00:11:58,310 --> 00:11:58,690
OK.

167
00:11:58,940 --> 00:12:04,640
So what I have created here is basically a truth table or a logic table, if you will.

168
00:12:05,030 --> 00:12:11,480
And what you can glean from it is that there's only one scenario in which the loop can continue.

169
00:12:11,660 --> 00:12:17,990
And that's the scenario where you didn't press Q and you have fewer than four or five.

170
00:12:17,990 --> 00:12:20,360
Whatever it is, I guess this really should be a five.

171
00:12:20,360 --> 00:12:22,340
Actually, you have fewer than five.

172
00:12:22,340 --> 00:12:24,800
But then like, that's a five wrong guesses.

173
00:12:24,830 --> 00:12:28,940
OK, that's the only scenario in which the Loop will continue.

174
00:12:29,480 --> 00:12:35,930
All other scenarios result in the loop stopping, and the reason for that is because that's how a logical

175
00:12:35,930 --> 00:12:43,580
end works for a logical and to evaluate to true, both clauses have to be true.

176
00:12:43,610 --> 00:12:45,740
So here this is a true right.

177
00:12:45,920 --> 00:12:53,420
You didn't press Q and the number of guesses the wrong number of guesses is is less than whatever the

178
00:12:53,420 --> 00:12:55,190
magic number is, four or five.

179
00:12:55,190 --> 00:12:55,940
It doesn't matter.

180
00:12:56,270 --> 00:12:56,750
OK.

181
00:12:56,780 --> 00:13:01,320
That's the only way that the Loop can continue any other scenario.

182
00:13:01,490 --> 00:13:04,460
The loop will stop because of this and.

183
00:13:04,550 --> 00:13:05,030
OK.

184
00:13:05,180 --> 00:13:09,440
So saying like, you have to have this true and this true.

185
00:13:09,620 --> 00:13:14,090
In order for the whole thing to be true, that's what you get with a logical end.

186
00:13:14,520 --> 00:13:17,390
OK, now a couple of things.

187
00:13:17,630 --> 00:13:24,470
It's generally considered bad to hard code numbers like this in your code.

188
00:13:24,770 --> 00:13:30,680
These are called magic numbers, and the reason it's bad is because you can forget what those numbers

189
00:13:30,680 --> 00:13:33,440
are and they're embedded deep in your code.

190
00:13:33,710 --> 00:13:38,060
And what's the relationship between this number here and this number here?

191
00:13:38,240 --> 00:13:43,790
These numbers are related, actually, and I'm still kind of guessing exactly how I need to, which

192
00:13:43,790 --> 00:13:49,550
no, I really want to use here, but I can tell you that there's a relationship between these two.

193
00:13:49,640 --> 00:13:56,030
Ideally, my logic should be consistent enough that these numbers should actually be the same number,

194
00:13:56,030 --> 00:13:56,660
in fact.

195
00:13:56,720 --> 00:14:04,400
So what we can consider doing here, if wrong guest count is greater than or equal to five, if wrong

196
00:14:04,400 --> 00:14:07,340
guest count is greater than or equal to four.

197
00:14:07,880 --> 00:14:08,210
OK.

198
00:14:08,240 --> 00:14:12,500
Actually, I'm pretty sure this logic should say it's simply four.

199
00:14:13,220 --> 00:14:19,910
And now what I'm inclined to do is to actually extract a constant out of this number.

200
00:14:20,150 --> 00:14:30,170
So I'm going to select that number and then I can right click on it and I can refactor and I can introduce

201
00:14:30,170 --> 00:14:31,460
a constant.

202
00:14:32,570 --> 00:14:35,300
And now it's ask me, what do I want to name this constant?

203
00:14:35,300 --> 00:14:39,800
And I'm going to name it in all caps because that's how we named constants.

204
00:14:39,980 --> 00:14:44,120
Max allowed tries, right?

205
00:14:44,130 --> 00:14:47,810
So the maximum number of tries that we will allow.

206
00:14:48,290 --> 00:14:48,740
OK.

207
00:14:48,950 --> 00:14:57,560
And then I hit return, and now I'm going to take this variable, copy it and then replace this for

208
00:14:58,760 --> 00:15:01,850
with that as well, because that's duplication.

209
00:15:02,850 --> 00:15:09,900
And now I can change the number of Macs allowed tries all in one place, which is at the top of the

210
00:15:09,900 --> 00:15:11,160
program right here.

211
00:15:11,460 --> 00:15:15,180
So it put that constant right here and set it equal to four.

212
00:15:15,210 --> 00:15:15,650
OK.

213
00:15:16,020 --> 00:15:19,560
And so you really want to avoid having magic numbers.

214
00:15:19,590 --> 00:15:23,910
Now I have magic numbers in a number of places in this program, really.

215
00:15:23,940 --> 00:15:25,380
Now I probably have.

216
00:15:25,410 --> 00:15:28,140
Let's see where else do I have the magic number wrong?

217
00:15:28,140 --> 00:15:29,850
Guest count equals one.

218
00:15:30,400 --> 00:15:34,350
So technically this would be a magic number two, but I'm less worried about that one.

219
00:15:34,710 --> 00:15:39,090
This one was fairly egregious, though, so I really wanted to make sure I got that one.

220
00:15:39,900 --> 00:15:46,180
So now that we have the ability to end this loop with a couple of different ways.

221
00:15:46,380 --> 00:15:51,990
I'm curious to see if we still need this return here because this return is how we were ending the loop.

222
00:15:52,770 --> 00:15:59,970
So I'm going, I'm going to comment that out for right now, and let's just rebuild and run this again

223
00:15:59,970 --> 00:16:07,050
and see if this bit right here is sufficient to kill the program when we guess too many times incorrectly.

224
00:16:07,200 --> 00:16:08,220
Let's see what happens.

225
00:16:08,550 --> 00:16:10,440
So I will rebuild.

226
00:16:12,250 --> 00:16:20,680
All right, and then let's open our terminal and I'm going to clear whips and let's rerun it.

227
00:16:20,800 --> 00:16:21,100
All right.

228
00:16:21,100 --> 00:16:24,430
So let's guess incorrectly four times.

229
00:16:24,940 --> 00:16:26,710
So the magic number is four.

230
00:16:26,890 --> 00:16:32,920
So one to three are all right.

231
00:16:32,920 --> 00:16:38,080
So it only gave us three tries and we didn't get our message.

232
00:16:38,080 --> 00:16:42,760
And that is because of that's because of this logic here.

233
00:16:42,760 --> 00:16:47,050
So it let us keep guessing as long as we are wrong.

234
00:16:47,050 --> 00:16:50,180
Guesses were less than the magic number, which is four.

235
00:16:50,350 --> 00:16:51,220
And that was three.

236
00:16:51,490 --> 00:16:58,040
We can fix that without having to change this by simply saying less than or equal to.

237
00:16:58,690 --> 00:17:00,490
Does that make sense while less?

238
00:17:00,490 --> 00:17:06,190
While the wrong guest count is less than or equal to in this case for that would allow us to have the

239
00:17:06,190 --> 00:17:10,550
four tries which would match up with the logic that we have here.

240
00:17:10,600 --> 00:17:17,800
I believe the other way we could do this is to say while is to say wrong guest count less than max allowed

241
00:17:17,800 --> 00:17:22,920
tried plus one, but that feels a little less elegant to me.

242
00:17:22,930 --> 00:17:24,430
So let's try it this way.

243
00:17:24,640 --> 00:17:24,930
All right.

244
00:17:24,940 --> 00:17:26,110
So let's rebuild.

245
00:17:27,430 --> 00:17:30,490
OK, and I'm going to clear.

246
00:17:31,030 --> 00:17:32,320
And let's run it again.

247
00:17:32,560 --> 00:17:33,400
All right.

248
00:17:33,610 --> 00:17:40,330
Magic number is 10, so let's do one two three four.

249
00:17:40,870 --> 00:17:41,460
All right.

250
00:17:41,470 --> 00:17:42,250
Let's see here.

251
00:17:42,490 --> 00:17:44,890
You've had four incorrect guesses.

252
00:17:45,160 --> 00:17:49,780
The random number is 10 ending program now, so that worked, OK?

253
00:17:50,320 --> 00:17:54,100
So that's another way that we could kill the loop, right?

254
00:17:54,190 --> 00:18:02,260
Simply by testing whether or not we had too many wrong guesses right here using and and here.

255
00:18:02,380 --> 00:18:04,930
So that's allowing us to test for multiple things.

256
00:18:04,930 --> 00:18:10,390
Both of these have to be true in order for this loop to be allowed to run again.

257
00:18:10,870 --> 00:18:18,010
And now with this approach, we don't have to exit out of the entire program explicitly here, though

258
00:18:18,040 --> 00:18:24,190
I may somewhat prefer this approach because it's a little more clear, I think, but there are pros

259
00:18:24,190 --> 00:18:24,880
and cons.

260
00:18:24,910 --> 00:18:30,430
One of the things that I don't like that I have going on here now is all of the nesting.

261
00:18:30,460 --> 00:18:30,850
Let's see.

262
00:18:30,860 --> 00:18:37,720
So what I mean by that is basically all the levels of indentation that are going on here that starts

263
00:18:37,720 --> 00:18:42,910
to be a lot for your brain to track and process in general, right?

264
00:18:43,090 --> 00:18:50,020
I'm already in an if else block here and now I'm putting another if in there as well.

265
00:18:50,170 --> 00:18:51,850
I don't like doing that.

266
00:18:52,060 --> 00:18:59,140
If I can avoid it without making the code messy, I usually will prefer to avoid such things.

267
00:18:59,140 --> 00:19:05,350
But in order to just get something working, according to the specifications that I made up, I decided

268
00:19:05,350 --> 00:19:06,940
to just go this way, right?

269
00:19:07,150 --> 00:19:12,730
But again, I will reiterate we really want to be careful about how many levels of nesting we put.

270
00:19:12,970 --> 00:19:20,320
So I'm a little shy to go quite as far as to say you should only you should limit your levels of nesting

271
00:19:20,320 --> 00:19:25,150
to X number of, you know, levels because there are always exceptions to everything.

272
00:19:25,150 --> 00:19:26,410
Sometimes you can't avoid it.

273
00:19:26,410 --> 00:19:29,880
Sometimes it's inappropriate to try to avoid that.

274
00:19:29,890 --> 00:19:36,370
But as a general rule of thumb, I can just say that if I were doing this totally professionally, I

275
00:19:36,370 --> 00:19:41,890
would probably want to spend a little more time rethinking this whole approach and seeing if there was

276
00:19:41,890 --> 00:19:47,920
an elegant way for me to reduce the number of levels of nesting that I have going on here.

277
00:19:48,160 --> 00:19:53,560
It's a bit much for my liking, but I guess I can get rid of that.

278
00:19:54,820 --> 00:20:02,770
So actually, I can think of a way to simplify the level of nesting a little bit.

279
00:20:03,550 --> 00:20:15,460
What we could do is we probably actually could just grab this if block here, cut it and just move it

280
00:20:15,460 --> 00:20:17,800
right here.

281
00:20:18,040 --> 00:20:19,690
I think we can do that.

282
00:20:20,530 --> 00:20:28,600
And the reason why this is a little better is because now this additional if block here is no longer

283
00:20:28,600 --> 00:20:36,790
nested inside of another if block, now it's at least on its own level by itself.

284
00:20:36,940 --> 00:20:38,200
Let's see if this works.

285
00:20:38,830 --> 00:20:40,690
So let's rebuild.

286
00:20:41,950 --> 00:20:42,820
Let's clear.

287
00:20:43,540 --> 00:20:44,600
Let's run it again.

288
00:20:45,940 --> 00:20:46,960
Random number is eight.

289
00:20:47,140 --> 00:20:53,380
Let's do four incorrect guesses one two three four.

290
00:20:55,070 --> 00:20:59,990
OK, let's see, you've had five incorrect guesses.

291
00:21:00,140 --> 00:21:06,320
Now this number is wrong, but everything else is working just fine.

292
00:21:06,830 --> 00:21:11,690
And the reason that this number is wrong is because the last thing we're doing here is incrementing.

293
00:21:11,840 --> 00:21:20,150
That number again, whereas before we had this if block right above this, and so that number had not

294
00:21:20,150 --> 00:21:21,380
yet been incremented.

295
00:21:21,740 --> 00:21:26,450
But this is easy enough to fix what we can do is simply say wrong.

296
00:21:26,450 --> 00:21:27,740
Guess count.

297
00:21:28,610 --> 00:21:29,130
Let's see.

298
00:21:29,150 --> 00:21:33,830
So this is, we could say, wrong guest count minus one.

299
00:21:34,970 --> 00:21:39,890
It's a slightly hacky thing that we can do, but it gets the job done.

300
00:21:40,370 --> 00:21:46,460
So I would consider this to be a bit of an improvement over what we had before.

301
00:21:46,940 --> 00:21:53,750
It simplifies the code a little bit more, in my opinion, because you've got one less nesting of if

302
00:21:53,750 --> 00:21:56,000
statement or if block in here.

303
00:21:56,450 --> 00:21:56,770
All right.

304
00:21:56,780 --> 00:21:59,750
So I know that this may have been a little complicated.

305
00:21:59,870 --> 00:22:06,440
Like I said at the start of it, though, I wanted to intentionally show you a little bit more of how

306
00:22:06,440 --> 00:22:09,040
I might think through some of these problems.

307
00:22:09,050 --> 00:22:12,430
And you really were seeing me think through these problems in real time.

308
00:22:12,440 --> 00:22:18,140
I may end up editing a little bit, just some of the long pauses where I'm thinking I may edit out some

309
00:22:18,140 --> 00:22:22,640
of my thinking time a little bit there because you don't want to sit there watching me just think,

310
00:22:22,640 --> 00:22:24,500
Hmm, should I do it this way or that way?

311
00:22:24,560 --> 00:22:28,510
But for the most part, you're seeing this very minimally edited.

312
00:22:28,520 --> 00:22:30,210
So let's just recap.

313
00:22:30,290 --> 00:22:34,940
So one of the main reasons why I went through this line of thinking is because I wanted you to see a

314
00:22:34,940 --> 00:22:38,720
couple of alternative approaches to solving some of these problems.

315
00:22:38,750 --> 00:22:48,050
Number one, I wanted you to see that we can put more complex logic as in the criteria places here for

316
00:22:48,050 --> 00:22:49,010
the loops.

317
00:22:49,640 --> 00:22:56,090
And, you know, just to overall get a better sense for how a professional programmer actually thinks

318
00:22:56,090 --> 00:22:57,620
through these kinds of problems.

319
00:22:57,770 --> 00:22:58,700
It's not magic.

320
00:22:58,700 --> 00:23:04,220
Sometimes it's trial and error, and even I, with my decades of experience, just need to try some

321
00:23:04,220 --> 00:23:05,750
things out occasionally.

322
00:23:05,960 --> 00:23:12,500
Now, I could have done a little bit more static analysis where before I actually run the code, I sit

323
00:23:12,500 --> 00:23:16,910
there and I kind of become the computer and I think through, OK, what are these variables going to

324
00:23:16,910 --> 00:23:17,150
be?

325
00:23:17,900 --> 00:23:19,400
Sometimes that's a good thing to do.

326
00:23:19,410 --> 00:23:24,610
Sometimes it's a waste of time because it may be quicker just to run the darn program and see what happens,

327
00:23:24,620 --> 00:23:24,920
right?

328
00:23:25,220 --> 00:23:27,500
You'll have to be the judge of that.

329
00:23:28,040 --> 00:23:28,420
All right.

330
00:23:28,430 --> 00:23:32,900
So with that being said, let's in this lesson and I'll see you in the next one.
