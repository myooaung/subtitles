WEBVTT
1
00:00:00.980 --> 00:00:05.420
All right, here we are back in the project where we left off last time.

2
00:00:05.630 --> 00:00:11.690
I have modified it a little bit, though, because I want to expand on what we were trying to do in

3
00:00:11.690 --> 00:00:12.650
the last one.

4
00:00:12.680 --> 00:00:14.750
So let me show you what I've changed here.

5
00:00:15.110 --> 00:00:16.270
So a couple of things.

6
00:00:16.280 --> 00:00:22.850
First, we originally only had, I think, one two, three, four different people, and now I've expanded

7
00:00:22.850 --> 00:00:26.660
the list of people out just by putting numbers behind them and duplicating the.

8
00:00:26.660 --> 00:00:33.050
So I duplicated the first three people five times each and then put numbers behind them.

9
00:00:33.050 --> 00:00:35.450
So just so we'd have more data.

10
00:00:35.960 --> 00:00:39.830
And then the other thing I did was to add one more field.

11
00:00:39.830 --> 00:00:46.880
If you consider each of these comma separated columns basically as a field, if you will, I added another

12
00:00:46.880 --> 00:00:51.440
field, which itself is comprised of additional little bits of information.

13
00:00:51.680 --> 00:00:58.430
The reason I did this is because I want to expand the level of complexity of what we're trying to do.

14
00:00:58.790 --> 00:01:05.210
In essence, we're just trying to have an excuse to calculate how much someone gets paid right.

15
00:01:05.810 --> 00:01:10.370
And we have different roles like programmers, managers, analysts and a CEO.

16
00:01:10.610 --> 00:01:14.320
But I wanted to make it a little less straightforward.

17
00:01:14.330 --> 00:01:20.630
So in the last lesson, all we did was just take this simple list of programmer, manager, analyst

18
00:01:20.630 --> 00:01:21.260
and CEO.

19
00:01:21.260 --> 00:01:23.630
And we said, if you're a programmer, you get this much.

20
00:01:23.870 --> 00:01:25.670
If you're a manager, you get that much.

21
00:01:25.670 --> 00:01:27.050
If you're an analyst, you get this much.

22
00:01:27.230 --> 00:01:29.120
Now I want to make it even more complex.

23
00:01:29.120 --> 00:01:36.350
I want to say, if you're a programmer, maybe you start off with some base amount of pay, but then

24
00:01:36.350 --> 00:01:43.490
we also can factor in certain other characteristics that may be specific to a programmer, such as the

25
00:01:43.490 --> 00:01:47.290
lines of code that they code per day, which, by the way, is a terrible metric.

26
00:01:47.300 --> 00:01:53.900
You should never measure a programmer by the number of lines of code they code per day.

27
00:01:53.900 --> 00:01:54.950
That's just terrible.

28
00:01:55.100 --> 00:02:01.610
Some great programmers may actually write fewer lines of code, but get the job done more effectively

29
00:02:01.610 --> 00:02:03.200
and make better code.

30
00:02:03.320 --> 00:02:08.700
But for this example, I'm just using an overly simplistic metric.

31
00:02:08.870 --> 00:02:09.280
OK.

32
00:02:09.320 --> 00:02:11.840
Terrible metric, though in real life.

33
00:02:12.080 --> 00:02:12.270
All right.

34
00:02:12.380 --> 00:02:13.920
Lines of code per day.

35
00:02:13.940 --> 00:02:16.640
Years of experience and their IQ.

36
00:02:16.640 --> 00:02:17.930
Probably also.

37
00:02:17.960 --> 00:02:19.220
Maybe not a great.

38
00:02:19.940 --> 00:02:23.840
A great way to gauge how much you should pay a programmer.

39
00:02:23.840 --> 00:02:26.690
But I'm sure there's someone out there.

40
00:02:26.690 --> 00:02:32.210
There's some manager who would see these metrics and think, Oh, that's a great way to measure whether

41
00:02:32.210 --> 00:02:33.590
or not a programmer is any good.

42
00:02:34.160 --> 00:02:34.440
All right.

43
00:02:34.460 --> 00:02:40.370
And then for a manager, maybe they have an organizational size like the total number of people at every

44
00:02:40.370 --> 00:02:47.360
level below them and then also like the number of direct reports they have, analysts might have like

45
00:02:47.770 --> 00:02:50.940
a metric of how many projects they are working on.

46
00:02:50.960 --> 00:02:58.700
And then the CEO, here's another terrible metric my CEO might have their pay affected by the average

47
00:02:58.700 --> 00:03:02.260
of the stock price for the last 12 months or something, right?

48
00:03:02.270 --> 00:03:04.640
So like the running average or something like that?

49
00:03:05.120 --> 00:03:09.620
Terrible way to determine CEO compensation, by the way.

50
00:03:09.800 --> 00:03:10.730
Really, really bad.

51
00:03:11.870 --> 00:03:12.290
All right.

52
00:03:12.320 --> 00:03:13.850
In my opinion, at least.

53
00:03:14.450 --> 00:03:16.220
OK, so here's the thing.

54
00:03:16.490 --> 00:03:25.340
When we were simply trying to gauge an employee's salary based on their role and only their role, it

55
00:03:25.340 --> 00:03:31.190
was possibly sufficient just to do something as simple as what we have here, where we just say, OK,

56
00:03:31.220 --> 00:03:32.960
if you're programming, you're getting three grand.

57
00:03:33.200 --> 00:03:39.500
If you're a manager, 3500 analysts, 2500 CEO, five grand and everybody else gets zero.

58
00:03:39.530 --> 00:03:39.890
Right?

59
00:03:40.280 --> 00:03:41.330
Pretty simple.

60
00:03:41.750 --> 00:03:47.330
It gets a little more more complicated, though, if you have to say, OK, if you're a programmer,

61
00:03:47.330 --> 00:03:55.070
maybe we start with three grand, but then we also have to do some kind of a formula to factor in OK,

62
00:03:55.100 --> 00:03:57.190
lines of code per day is two thousand.

63
00:03:57.200 --> 00:03:58.930
And what do we do with that number, right?

64
00:03:58.940 --> 00:04:06.200
Like we do some type of mathematical formula or some algorithm or something of something of that sort?

65
00:04:06.230 --> 00:04:06.590
Right?

66
00:04:07.040 --> 00:04:17.000
So one question is, do you still use a switch statement to even determine the amount right?

67
00:04:17.150 --> 00:04:20.870
Is a switch statement still a good idea?

68
00:04:21.110 --> 00:04:22.490
That's one question.

69
00:04:22.730 --> 00:04:27.860
And then just in general, like, you know, how best can we make this determination, right?

70
00:04:28.100 --> 00:04:31.490
So let's look at a few approaches for a moment here.

71
00:04:32.060 --> 00:04:37.040
So I would say that using the Switch statement in this way obviously isn't going to work because we're

72
00:04:37.040 --> 00:04:40.820
not factoring in these other metrics right now.

73
00:04:40.840 --> 00:04:50.180
We could introduce the slightly more expanded form of the Switch statement like so and we'll start off

74
00:04:50.180 --> 00:04:55.460
by just returning the same value, but using the slightly expanded format.

75
00:04:55.760 --> 00:04:59.420
So we have to use the yield statement, which is.

76
00:04:59.500 --> 00:05:03.550
Very much like a return statement to return a number, right?

77
00:05:03.730 --> 00:05:05.710
OK, so we can we can do that.

78
00:05:11.260 --> 00:05:17.800
And then we could consider how to extract the information.

79
00:05:18.160 --> 00:05:22.660
So let's see if you're a programmer, we don't just want to return.

80
00:05:22.660 --> 00:05:26.260
Oops, I have a typo there three thousand, we don't want to just return 3000.

81
00:05:26.260 --> 00:05:32.110
We want to do some type of, you know, whatever formula or algorithm, right?

82
00:05:32.350 --> 00:05:35.830
So we would need to extract this information.

83
00:05:36.220 --> 00:05:44.710
So I've modified the projects here to say that all of the information in between these curly braces

84
00:05:44.710 --> 00:05:49.200
here is in a CAPTCHA group called Details.

85
00:05:49.210 --> 00:05:50.650
So we have access to that.

86
00:05:51.070 --> 00:05:57.190
So we could consider having another regular expression.

87
00:05:57.190 --> 00:06:01.630
Perhaps that allows us to parse out each of these bits.

88
00:06:01.930 --> 00:06:04.300
So let's let's see what that might look like.

89
00:06:04.300 --> 00:06:14.080
Maybe we'd have another rejects program programmer rejects, let's say, and we'll define this as something

90
00:06:14.080 --> 00:06:25.660
like word characters one or more word characters, followed by an equals sign followed by one or more

91
00:06:25.660 --> 00:06:29.200
word characters, followed by a comma.

92
00:06:30.280 --> 00:06:37.390
All right, so we need to decide how do we want to allow ourselves to extract this information?

93
00:06:37.610 --> 00:06:40.270
Now it's obviously pretty standardized.

94
00:06:40.270 --> 00:06:47.470
They'd say we're not really allowing for the possibility that for a programmer details section, there

95
00:06:47.470 --> 00:06:49.370
could be different properties here.

96
00:06:49.390 --> 00:06:53.980
It looks like we've, you know, I've kind of decided to standardize on that, by the way, I just see

97
00:06:53.980 --> 00:06:55.200
a little typo there.

98
00:06:55.210 --> 00:06:57.070
I think that's supposed to be IQ.

99
00:06:57.580 --> 00:06:57.970
All right.

100
00:06:58.090 --> 00:07:04.960
So if this is standardized and we're always going to have three fields within this detail field, three

101
00:07:04.960 --> 00:07:12.070
subfields within this detail field and they're always going to have the same field names, then we could

102
00:07:12.070 --> 00:07:16.990
just use captcha groups to extract these individual values out.

103
00:07:17.000 --> 00:07:21.550
So the way that might look is, let's see here.

104
00:07:21.550 --> 00:07:28.180
We could do something like a bunch of words and an equal sign and then a bunch of words.

105
00:07:28.180 --> 00:07:32.580
So we could just capture the words on the right hand side of the equals.

106
00:07:32.590 --> 00:07:43.000
Sign like this and use a CAPTCHA group and we can call this first one L0 Sepedi like that.

107
00:07:43.540 --> 00:07:51.880
And then maybe we can just copy all of this and then duplicate it two more times, except that there

108
00:07:51.880 --> 00:07:55.230
won't be a closing comma there.

109
00:07:55.240 --> 00:08:04.360
And then this one would be wiri, and then this one would be I.Q and then we'll put a semicolon there.

110
00:08:05.320 --> 00:08:10.150
So this might allow us to parse all of this.

111
00:08:10.150 --> 00:08:13.090
I say might, because, you know, I could always have a typo here.

112
00:08:13.090 --> 00:08:15.130
So let's let's try this out and see.

113
00:08:15.220 --> 00:08:19.150
I mean, I don't want to I don't want to learn this lesson into another regular expression lesson,

114
00:08:19.150 --> 00:08:25.600
but I also didn't want to invent a whole bunch more code, including more rejects and missed the opportunity

115
00:08:25.600 --> 00:08:30.460
to refresh your memories on rejects at least a little bit, you know?

116
00:08:30.790 --> 00:08:32.640
So let's see if we can do this here.

117
00:08:32.650 --> 00:08:33.970
Plus, we've never done this now.

118
00:08:34.000 --> 00:08:40.420
Now we're going to we're going to have multiple regular expressions and and some will be embedded in

119
00:08:40.420 --> 00:08:41.770
another really, right?

120
00:08:41.950 --> 00:08:44.560
So let's see what that even looks like.

121
00:08:44.800 --> 00:08:49.270
So what we can do is we can make another pattern.

122
00:08:51.040 --> 00:08:58.300
This one I will call Coder Pattern Code or pat equals pattern dot compile.

123
00:08:58.570 --> 00:09:02.440
And for this one, I'll pass in the Prague rejects.

124
00:09:03.550 --> 00:09:12.250
OK, now here's something we haven't seen before using a regular expression in which the input string

125
00:09:12.250 --> 00:09:17.000
for the expression for the matter is going to change many times.

126
00:09:17.020 --> 00:09:17.380
OK.

127
00:09:17.590 --> 00:09:22.110
So in this existing loop that we have here, we set up here.

128
00:09:22.120 --> 00:09:26.070
Let me make a little space here just to make a distinction.

129
00:09:26.080 --> 00:09:30.730
In fact, let me even move this pattern down with that one.

130
00:09:30.760 --> 00:09:31.150
OK.

131
00:09:31.570 --> 00:09:40.420
So here we are, creating our primary Reg X, which matches one whole line.

132
00:09:40.750 --> 00:09:41.140
OK.

133
00:09:41.170 --> 00:09:42.820
Any one of these lines?

134
00:09:43.150 --> 00:09:43.460
OK.

135
00:09:43.480 --> 00:09:45.340
That's what this reggae x does.

136
00:09:45.850 --> 00:09:52.530
In fact, maybe I'm going to rename this uh, to people reggae x.

137
00:09:52.690 --> 00:09:53.140
OK.

138
00:09:54.460 --> 00:09:54.760
All right.

139
00:09:54.760 --> 00:09:56.920
So these are the individual people.

140
00:09:57.220 --> 00:10:04.570
And then we we compile that reggae x one time outside of the loop, and then we use the matcher one

141
00:10:04.570 --> 00:10:08.230
time on the entire people string here.

142
00:10:08.260 --> 00:10:08.710
OK.

143
00:10:08.770 --> 00:10:09.250
And that's.

144
00:10:09.310 --> 00:10:17.560
Sufficient and then in this loop by calling Match Dot find we end up essentially just iterating over

145
00:10:17.590 --> 00:10:23.950
each line iterate, by the way, that means essentially when you have a list of something, you visit

146
00:10:23.950 --> 00:10:31.650
each item in the list, OK to iterate a list means to visit or step through each item in that list,

147
00:10:31.660 --> 00:10:31.960
right?

148
00:10:32.200 --> 00:10:38.380
So the match or find method in effect is iterating through each line.

149
00:10:38.620 --> 00:10:40.480
Now find itself.

150
00:10:40.480 --> 00:10:43.360
The Find method itself doesn't iterate.

151
00:10:43.390 --> 00:10:44.830
Lines of text.

152
00:10:45.100 --> 00:10:48.010
It's the fact that our people rejects our people.

153
00:10:48.010 --> 00:10:54.970
Regular expression here happens to match one full line of this string, and therefore, when we iterate

154
00:10:54.970 --> 00:10:59.110
with the find method, we end up picking up one line at a time.

155
00:10:59.170 --> 00:10:59.590
OK.

156
00:10:59.740 --> 00:11:00.030
All right.

157
00:11:00.040 --> 00:11:01.390
So that's great there.

158
00:11:01.390 --> 00:11:11.020
But now we want to have an additional rejects that can pass this little bit here, right for each line.

159
00:11:11.170 --> 00:11:13.930
So in this case, there's a there's a distinction here.

160
00:11:14.170 --> 00:11:21.910
The input string that we want to pass with our rejects is going to change for each line, whereas with

161
00:11:21.910 --> 00:11:26.380
the people rejects, this matter here doesn't change.

162
00:11:26.800 --> 00:11:33.400
It's always just parsing this entire string one whole time.

163
00:11:33.400 --> 00:11:39.970
Even though we're iterating over individual lines of the string, it's analyzing this whole entire string

164
00:11:39.970 --> 00:11:40.960
just one time.

165
00:11:41.380 --> 00:11:49.210
But with this new Rig X that we're about to use, we're going to be analyzing each of these fields of

166
00:11:49.360 --> 00:11:51.880
this whole entire little substring here.

167
00:11:51.880 --> 00:11:55.870
But this sub string is going to change for each person.

168
00:11:55.900 --> 00:11:56.440
OK?

169
00:11:56.770 --> 00:12:06.130
And so that means that we cannot define a match or like a coder, Matt.

170
00:12:11.080 --> 00:12:13.120
We can't define this here.

171
00:12:13.690 --> 00:12:21.280
Outside of the loop, because what would be the input for this, the input for this needs to be this

172
00:12:21.280 --> 00:12:22.810
stuff right here.

173
00:12:23.290 --> 00:12:23.800
OK.

174
00:12:24.190 --> 00:12:29.860
And that's going to change for each and every person in this list.

175
00:12:30.190 --> 00:12:30.670
OK.

176
00:12:32.080 --> 00:12:40.420
And so we wouldn't be able to use this here because it needs to be able to grab the contents of the

177
00:12:40.420 --> 00:12:44.080
details field for each of these programmers.

178
00:12:44.080 --> 00:12:47.980
So we actually need to move this down.

179
00:12:48.340 --> 00:12:50.200
Now we're down, do we need to move it?

180
00:12:50.380 --> 00:12:57.280
Well, currently, since this is the matter for a coder, that would mean that we would need to move

181
00:12:57.280 --> 00:13:06.880
this line down, not just inside of the loop, but actually inside of the loop and inside of the case

182
00:13:06.880 --> 00:13:09.250
for a programmer or a coder.

183
00:13:09.490 --> 00:13:14.470
So I'm going to indent this a couple of times here inside of the case.

184
00:13:14.470 --> 00:13:18.550
So basically, it's inside of the curly braces for the programmer case.

185
00:13:18.790 --> 00:13:19.240
OK.

186
00:13:19.780 --> 00:13:30.460
And now I'll put a semicolon there, but then we need to actually grab this content, this content right

187
00:13:30.460 --> 00:13:30.910
here.

188
00:13:31.720 --> 00:13:40.390
And we have access to that because our people Rig X captures it in a captured group called Details.

189
00:13:40.420 --> 00:13:40.930
OK.

190
00:13:41.350 --> 00:13:46.600
So we can use this matter.

191
00:13:46.600 --> 00:13:48.640
In fact, I have an example of it right here.

192
00:13:48.640 --> 00:13:50.770
In fact, I'll just go ahead and just copy that.

193
00:13:52.610 --> 00:13:58.580
Well, I'll type it out, Match Support Group details.

194
00:13:58.880 --> 00:14:06.980
OK, so this matter, in fact, may be, yeah, let me let me go ahead and rename this this original

195
00:14:06.980 --> 00:14:08.690
pattern and matter as well.

196
00:14:08.900 --> 00:14:10.460
Just so we have a little more context.

197
00:14:10.460 --> 00:14:15.290
So I will do a shift at six and I'll call this Oops.

198
00:14:15.680 --> 00:14:16.640
I will call this.

199
00:14:16.910 --> 00:14:17.240
Oops!

200
00:14:18.110 --> 00:14:18.890
People.

201
00:14:20.900 --> 00:14:30.500
Pattern or people, Pat and then I will rename this matter as well to people, Matt.

202
00:14:31.880 --> 00:14:35.330
And now now we have a little bit more context of what's going on here.

203
00:14:35.340 --> 00:14:40.240
So here we are using the find method of the people matcher.

204
00:14:40.400 --> 00:14:40.790
Right?

205
00:14:41.180 --> 00:14:43.250
And so we're finding the people right.

206
00:14:43.280 --> 00:14:44.420
That's how you can think of this.

207
00:14:44.660 --> 00:14:51.980
The people matchers, find finds each person in our list of people, which is just the string.

208
00:14:51.980 --> 00:14:53.300
And here's our list of people.

209
00:14:53.540 --> 00:14:58.310
In fact, here I'll even rename this to people text.

210
00:14:58.550 --> 00:15:03.140
So that way, we have a little hint that that's a string of all the people, right?

211
00:15:03.380 --> 00:15:03.680
All right.

212
00:15:03.710 --> 00:15:11.570
So people match or find finds the individual people within the people text, then we can get rid of

213
00:15:11.570 --> 00:15:12.530
this line.

214
00:15:12.680 --> 00:15:16.280
That was just kind of some troubleshooting line that I put in.

215
00:15:16.670 --> 00:15:21.890
Then we need a matter for the coder details.

216
00:15:22.160 --> 00:15:23.720
And here we are creating that.

217
00:15:23.870 --> 00:15:27.560
But we only created if we're inside of a programmer, right?

218
00:15:27.740 --> 00:15:38.210
So if we're on a line that is a programmer, then we will use a coder matcher to parse out this stuff

219
00:15:38.210 --> 00:15:38.600
here.

220
00:15:38.810 --> 00:15:39.290
OK.

221
00:15:40.240 --> 00:15:45.910
If we're on a manager, we would need to use a different matter for that.

222
00:15:46.120 --> 00:15:47.230
Does that make sense?

223
00:15:47.620 --> 00:15:48.010
All right.

224
00:15:48.100 --> 00:15:50.500
So let's see here.

225
00:15:51.100 --> 00:15:53.680
Let's just focus on a programmer for right now, though.

226
00:15:54.280 --> 00:15:58.270
So now we have a match or hopefully for the programmer details.

227
00:15:58.570 --> 00:16:03.490
And let's just let's print a couple of those details out just to make sure.

228
00:16:04.150 --> 00:16:07.930
So let's do a formatted system died out.

229
00:16:08.050 --> 00:16:08.520
So.

230
00:16:08.870 --> 00:16:09.400
So you.

231
00:16:10.000 --> 00:16:11.590
And let's say something like

232
00:16:13.930 --> 00:16:19.690
Programmer LLC, four lines of code is something.

233
00:16:20.290 --> 00:16:21.730
And what else?

234
00:16:22.210 --> 00:16:24.160
Years of experience.

235
00:16:24.940 --> 00:16:28.360
Years of experience is whatever.

236
00:16:29.440 --> 00:16:29.720
Oops.

237
00:16:30.410 --> 00:16:41.020
I'll just make everything a string for now, and IQ and IQ is whatever.

238
00:16:42.220 --> 00:16:44.590
And then we'll have a new line, I guess.

239
00:16:45.670 --> 00:16:46.020
All right.

240
00:16:46.030 --> 00:16:53.200
So then we'll bind all of the data for the way we can get those fields is to just use this coder matcher

241
00:16:53.890 --> 00:16:56.320
coder Matt Dot Group.

242
00:16:56.920 --> 00:17:00.580
And the thing was the first field is called Ello CPD..

243
00:17:01.580 --> 00:17:03.310
We have it right here, actually.

244
00:17:04.690 --> 00:17:06.190
Ello CPD.

245
00:17:10.630 --> 00:17:15.980
And then I'm just going to copy this and paste two more times.

246
00:17:16.810 --> 00:17:18.580
Oops, I missed my comma there.

247
00:17:19.810 --> 00:17:20.170
All right.

248
00:17:20.200 --> 00:17:26.980
And so now I can just change these field names y o e, and the other one is IQ IQ.

249
00:17:27.790 --> 00:17:28.210
All right.

250
00:17:28.210 --> 00:17:30.550
So let's let's analyze this.

251
00:17:30.550 --> 00:17:39.820
So this while loop is going to iterate over each line in this people text one line at a time.

252
00:17:39.940 --> 00:17:40.300
Right?

253
00:17:41.170 --> 00:17:48.760
And then this case says if the current line that we're iterating over is a programmer line, OK, which

254
00:17:48.880 --> 00:17:55.780
which is determined by using the people match or group that role or people match workgroup role, right?

255
00:17:55.990 --> 00:17:58.300
Which is this field here?

256
00:17:58.750 --> 00:18:07.690
So if that field matches the word programmer, then let's make a programmer or a coder matcher for the

257
00:18:07.690 --> 00:18:09.350
details field.

258
00:18:09.700 --> 00:18:17.770
So each of these people has a detail's field, which is this bit here that's in curly braces and that's

259
00:18:17.770 --> 00:18:21.410
defined in this people rejects right here.

260
00:18:21.430 --> 00:18:29.380
OK, so we're saying like there's a comma and some space, maybe, and then a an opening curly brace,

261
00:18:29.380 --> 00:18:35.650
which I had to escape, by the way, because curly brace and regex is usually used for indicating the

262
00:18:35.650 --> 00:18:37.300
number of matches, right?

263
00:18:37.510 --> 00:18:40.060
But in this case, I want it to be treated literally.

264
00:18:40.070 --> 00:18:47.560
So I had to use two back slashes to tell Java and the Rejects engine that I want that curly brace to

265
00:18:47.560 --> 00:18:48.880
be treated literally.

266
00:18:49.180 --> 00:18:58.510
OK, so space followed by a an opening curly brace and then zero or more characters until it gets to

267
00:18:58.510 --> 00:18:59.680
a closing curly brace.

268
00:18:59.980 --> 00:19:05.140
Now let's be careful about this greedy modifier here, so we'll find out in a moment what this is going

269
00:19:05.140 --> 00:19:05.590
to do.

270
00:19:05.590 --> 00:19:09.130
Although I pretty much already tested this and it should be good.

271
00:19:09.130 --> 00:19:12.250
But just keep in mind from that lesson about the greedy modifier.

272
00:19:12.430 --> 00:19:18.460
So if you see weird things going on there, you may need to specify that this should not be greedy.

273
00:19:18.700 --> 00:19:19.120
OK.

274
00:19:19.390 --> 00:19:19.840
All right.

275
00:19:19.840 --> 00:19:21.990
So let's see.

276
00:19:22.000 --> 00:19:25.510
Yeah, let's go ahead and run this and see what we end up with.

277
00:19:26.650 --> 00:19:33.550
No match found and it died at Line 41 in our code.

278
00:19:33.580 --> 00:19:41.320
Now remember when this is a stack trace, and typically I ignore the lines that are listed in the stack

279
00:19:41.320 --> 00:19:44.560
trace that are in code that I didn't write.

280
00:19:45.040 --> 00:19:51.370
OK, so Rig X match or get matched group index, that's not code that I wrote, so I don't want to dig

281
00:19:51.370 --> 00:19:51.880
into that.

282
00:19:51.880 --> 00:19:53.230
There's nothing wrong with that code.

283
00:19:53.380 --> 00:19:56.470
That's code that was written by the team that made Java.

284
00:19:56.650 --> 00:19:57.860
There's nothing wrong with it.

285
00:19:57.880 --> 00:20:01.240
I want to look at my code because that's probably where the problem is.

286
00:20:01.240 --> 00:20:08.860
And so the first line in this stack trace going backward that I wrote is Line Forty One, so I can click

287
00:20:08.860 --> 00:20:10.480
on that and jump straight to it.

288
00:20:10.840 --> 00:20:17.830
OK, so it does not like something here, and it's saying no match found.

289
00:20:18.430 --> 00:20:18.850
OK.

290
00:20:18.880 --> 00:20:21.940
It just occurred to me what the problem is, and it's a dumb one.

291
00:20:22.150 --> 00:20:22.780
Let's see.

292
00:20:22.810 --> 00:20:30.520
So I'm creating the matter here, and then I use the coder match and then I proceed to use it.

293
00:20:30.790 --> 00:20:36.850
However, I never told it to actually go find anything, have to have to tell it to actually find something.

294
00:20:37.270 --> 00:20:53.830
So let's see if we do something like, Oh, I don't know if code or Mat Dot find, then uh, let's embed

295
00:20:55.150 --> 00:20:58.840
these two lines like so.

296
00:20:58.960 --> 00:21:07.720
OK, so if it finds anything that matches the coder pattern, then use some of the data that it finds

297
00:21:07.720 --> 00:21:13.600
in the code or pattern, such as the code or match or that group, ELO, Sepedi, etc. And in fact,

298
00:21:13.600 --> 00:21:17.740
I think I can go ahead and probably uncomment this line out.

299
00:21:17.740 --> 00:21:19.480
And let's indent that now.

300
00:21:19.780 --> 00:21:23.290
And I'm also guessing I probably won't need this one.

301
00:21:23.560 --> 00:21:24.700
I'll just comment that out.

302
00:21:24.880 --> 00:21:29.230
All right, so let's run this, and I think it should work.

303
00:21:30.100 --> 00:21:31.090
There we go.

304
00:21:31.100 --> 00:21:32.110
There we go.

305
00:21:32.170 --> 00:21:32.890
Yeah.

306
00:21:32.950 --> 00:21:33.610
All right.

307
00:21:33.730 --> 00:21:34.180
Let's see.

308
00:21:34.180 --> 00:21:37.390
And let's not print that out.

309
00:21:37.720 --> 00:21:39.160
Let's run that once more.

310
00:21:40.300 --> 00:21:41.170
OK.

311
00:21:41.200 --> 00:21:43.890
Programmer LLC two thousand thirteen hundred Yet.

312
00:21:43.900 --> 00:21:44.440
There we are.

313
00:21:44.470 --> 00:21:51.340
So we're now extracting out the individual fields of the details of a programmer here.

314
00:21:51.490 --> 00:21:52.090
Perfect.

315
00:21:52.240 --> 00:21:52.680
All right.

316
00:21:52.690 --> 00:21:55.900
So now we don't need that either.

317
00:21:55.930 --> 00:21:56.590
All right.

318
00:21:56.600 --> 00:22:02.060
So hey, that just goes to show you even the most professional of programmers can forget things, right?

319
00:22:02.120 --> 00:22:06.790
And in my case, I totally forgot to tell the Matra to actually go find something.

320
00:22:06.790 --> 00:22:08.740
So let this be just another re.

321
00:22:08.820 --> 00:22:17.550
Reminder that our matcher won't actually match anything if we don't either call the find method or the

322
00:22:17.550 --> 00:22:23.730
matches method, we have to call at least one of those two methods to tell to actually go, go, go,

323
00:22:23.730 --> 00:22:25.440
go, actually try to find something.

324
00:22:25.470 --> 00:22:25.710
All right.

325
00:22:25.710 --> 00:22:32.670
So now now that we have access to these data, the next thing I think I want to do is I want to actually

326
00:22:32.670 --> 00:22:37.890
extract variables from each of these fields so that it'll be a little easier to do something with them.

327
00:22:37.890 --> 00:22:44.970
So I'm going to do a an option up arrow and select all of that and then a command option V and extract

328
00:22:44.970 --> 00:22:45.300
this.

329
00:22:45.300 --> 00:22:49.350
And I will call it whatever the ADC is recommending for now.

330
00:22:49.370 --> 00:22:50.120
L0 CPD..

331
00:22:50.520 --> 00:22:56.220
Sounds good to me, and then I'll do it again on this next bit here and extract that variable.

332
00:22:56.220 --> 00:22:57.690
And sure, I'll call it that.

333
00:22:57.990 --> 00:23:00.660
And one more time for the I.Q.

334
00:23:01.110 --> 00:23:03.780
And there we go and hit enter.

335
00:23:03.810 --> 00:23:07.170
OK, so now we've extracted out those variables there.

336
00:23:07.380 --> 00:23:13.110
So now we could consider whatever our algorithm is going to be.

337
00:23:13.620 --> 00:23:21.810
Now I might want to convert some of these values into a more appropriate data type currently because

338
00:23:21.810 --> 00:23:24.090
I extracted them all via regex.

339
00:23:24.390 --> 00:23:26.280
Everything's coming out as a string.

340
00:23:26.520 --> 00:23:32.160
But really, I probably might want to do some math or something like that, some kind of a formula.

341
00:23:32.370 --> 00:23:35.850
And so I'd rather that these be actual numbers, right?

342
00:23:36.240 --> 00:23:45.720
So here's where I'm extracting these guys so I could convert them into numbers kind of inline like on

343
00:23:45.720 --> 00:23:46.890
these same lines.

344
00:23:46.890 --> 00:23:50.550
And then these things here just won't be strings anymore.

345
00:23:50.640 --> 00:23:56.220
And I am kind of inclined to do it that way because I just don't want to make, you know, like six

346
00:23:56.520 --> 00:24:00.120
like three more lines or whatever where I'm converting again.

347
00:24:00.390 --> 00:24:01.890
So let's see what that might look like.

348
00:24:01.890 --> 00:24:08.130
So maybe I'm OK with these all just being integers that looks like it will suffice for now.

349
00:24:08.430 --> 00:24:18.780
So what I can do then is use the integer wrapper pass method pass int and then just wrap all of these

350
00:24:19.140 --> 00:24:20.540
in integers.

351
00:24:20.550 --> 00:24:23.640
And now I have to change this data type to an end.

352
00:24:25.800 --> 00:24:28.580
There we go, and it looks like we are good there.

353
00:24:28.590 --> 00:24:31.800
And so now I will do the same thing.

354
00:24:32.250 --> 00:24:33.930
Now let me see if I can get a little fancier.

355
00:24:33.930 --> 00:24:37.440
I'm going to put my cursor here on front in front of this one.

356
00:24:37.470 --> 00:24:42.240
Then I'm going to hold down on the option shift button and I'm going to click again in front of this

357
00:24:42.240 --> 00:24:47.100
second coder met right there and that gives me two cursors.

358
00:24:47.280 --> 00:24:55.530
And now I should be able to type all of this again on two lines simultaneously, and then I can hold

359
00:24:55.530 --> 00:25:01.350
down on the command button and go to the end of this line and then go back one and then close that off.

360
00:25:01.350 --> 00:25:07.770
Like so and then I should even be able to hit the home button to go to the beginning of the line and

361
00:25:07.770 --> 00:25:13.530
then select this and then type and and then hit Enter.

362
00:25:14.250 --> 00:25:18.930
There we go and then hit Escape to get out of this double cursor business that I've got.

363
00:25:19.110 --> 00:25:19.890
So that was nice.

364
00:25:19.900 --> 00:25:26.790
I literally will almost literally killed two birds with one stone edited two lines with for the price

365
00:25:26.790 --> 00:25:27.180
of one.

366
00:25:28.050 --> 00:25:28.950
All right.

367
00:25:29.070 --> 00:25:34.380
So now I've got actual numbers that I can work with and do some kind of math.

368
00:25:34.380 --> 00:25:38.880
And honestly, I haven't even decided what sort of formula I want to use here.

369
00:25:39.030 --> 00:25:43.740
Maybe I just keep it simple and do something like just multiply or whatever.

370
00:25:43.830 --> 00:25:45.690
Maybe I take the the original number.

371
00:25:45.690 --> 00:25:52.170
We had like that three thousand, and then I add that plus these numbers multiplied by each other.

372
00:25:52.360 --> 00:25:55.050
Let's let's keep it relatively simple for right now.

373
00:25:55.500 --> 00:25:55.910
All right.

374
00:25:55.920 --> 00:25:58.530
So then let's see here.

375
00:25:58.740 --> 00:26:03.210
In that case, let's just do something like this.

376
00:26:03.780 --> 00:26:05.370
Let's eat.

377
00:26:05.610 --> 00:26:06.750
Let's yield.

378
00:26:07.670 --> 00:26:11.570
3000 plus L0.

379
00:26:11.580 --> 00:26:13.810
CPD times wainui.

380
00:26:13.860 --> 00:26:15.600
Times IQ.

381
00:26:16.350 --> 00:26:23.550
OK, so if this was a match, then we will return the value of three thousand plus all of these multiplied

382
00:26:23.550 --> 00:26:24.780
by each other.

383
00:26:25.350 --> 00:26:31.110
Otherwise, this line is going to execute, which was the original logic that we had before.

384
00:26:31.230 --> 00:26:36.630
OK, now I'm feeling like I'm feeling a little lazy right now, but I am going to point out to you.

385
00:26:36.630 --> 00:26:44.680
Perhaps a slightly better thing to do would be to capture this value in a variable.

386
00:26:44.700 --> 00:26:47.580
You know what, now that I'm saying, it might as well go ahead and do it.

387
00:26:47.850 --> 00:26:50.480
So here this is probably the better thing to do.

388
00:26:50.490 --> 00:26:53.610
Integer salary equals zero.

389
00:26:54.030 --> 00:26:55.980
And then let's do this.

390
00:26:56.010 --> 00:26:59.970
Salary equals that else.

391
00:27:03.360 --> 00:27:09.690
Salary equals just 3000, then yield salary.

392
00:27:09.840 --> 00:27:16.950
So you see what I'm doing here rather than having two different possible yield statements.

393
00:27:17.250 --> 00:27:22.030
I prefer to just capture all the values in one variable.

394
00:27:22.380 --> 00:27:26.970
And then both circumstances, the circumstance where we do have a match and then the circumstance where

395
00:27:26.970 --> 00:27:30.270
we don't have a match are kind of more explicit here.

396
00:27:30.570 --> 00:27:37.440
And then I capture all of that in this salary variable and then I just yield or basically return that

397
00:27:37.440 --> 00:27:39.270
one variable there.

398
00:27:39.450 --> 00:27:45.750
Rather than having the possibility for two different return statements, you'll find as a professional

399
00:27:45.750 --> 00:27:53.340
developer that some development teams will use tools to analyze and check their code, and some tools

400
00:27:53.610 --> 00:28:01.890
don't like it when you have multiple possibilities for return statements within a code branch or something

401
00:28:01.890 --> 00:28:02.430
like that.

402
00:28:02.430 --> 00:28:09.990
And I am assuming that the yield statement may be analyzed similarly to the return statement.

403
00:28:10.000 --> 00:28:18.900
So I personally prefer if I'm not feeling too lazy to only have one return statement, which in this

404
00:28:18.900 --> 00:28:21.540
case would be this one yield rather than multiples.

405
00:28:21.810 --> 00:28:27.960
And that means I need to capture my individual cases or circumstances in a variable.

406
00:28:28.350 --> 00:28:35.070
And then recall, I had to declare this variable outside of the if statement because I am referencing

407
00:28:35.070 --> 00:28:41.160
it outside of the if statement at the bottom here, rather than if I had declared this salary inside

408
00:28:41.160 --> 00:28:45.840
of the statement, then it would not be available to me here outside of the if statement.

409
00:28:45.870 --> 00:28:46.320
OK.

410
00:28:46.410 --> 00:28:46.800
All right.

411
00:28:47.010 --> 00:28:55.860
So let's go ahead and stop here, and we're going to flesh out the same type of logic for the other

412
00:28:55.860 --> 00:28:59.730
roles manager, analyst and CEO in the next lesson.

413
00:28:59.730 --> 00:29:01.470
So I'll see you in the next one.
