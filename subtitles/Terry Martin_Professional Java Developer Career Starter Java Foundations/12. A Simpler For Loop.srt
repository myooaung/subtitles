1
00:00:00,780 --> 00:00:07,930
All right, now, in the last lesson, we modified our guessing game to use a for loop.

2
00:00:07,950 --> 00:00:14,460
I want to take a step back, though, and show you a little bit more of using the for loop to do some

3
00:00:14,460 --> 00:00:20,760
really, really basic things because I initially showed you the for loop within the context of an existing

4
00:00:20,760 --> 00:00:21,660
bit of code.

5
00:00:21,840 --> 00:00:28,680
There may be some of you who may still be a little bit confused as to just the basic gist of the for

6
00:00:28,680 --> 00:00:28,910
loop.

7
00:00:28,920 --> 00:00:36,180
It may be a little harder to see the basic structure and pattern of the for loop within the context

8
00:00:36,180 --> 00:00:37,260
of all that's going on here.

9
00:00:37,270 --> 00:00:39,870
In other words, there may be a little too much noise.

10
00:00:40,110 --> 00:00:46,650
So I want to just take a quick step back and go into a brand new clean slate and just show you what

11
00:00:46,650 --> 00:00:49,170
the four loop looks like on its own.

12
00:00:49,560 --> 00:00:55,980
All right, so to do this, I'm going to open up the project pane here.

13
00:00:56,370 --> 00:01:01,710
All right, so let's close this folder for the output of our compiled programs is open.

14
00:01:01,710 --> 00:01:05,410
Let's close that, and we're going to go down here to source.

15
00:01:05,440 --> 00:01:14,550
Click on that as our see right click on it new Java class, and I'm just going to call this for loop

16
00:01:15,060 --> 00:01:16,320
example.

17
00:01:17,100 --> 00:01:17,700
Enter.

18
00:01:19,120 --> 00:01:19,850
All right.

19
00:01:19,870 --> 00:01:26,830
And so now I will create a new line public static void, main as usual, and let's just make a loop

20
00:01:26,830 --> 00:01:29,020
that will count from one to 10.

21
00:01:29,110 --> 00:01:37,580
OK, so the most basic way to do that would be to start off with our for loop for space.

22
00:01:37,630 --> 00:01:41,320
Again, the spaces is optional parentheses.

23
00:01:41,440 --> 00:01:47,950
And now in this case, like the most typical way that you would do this would be to declare a counting

24
00:01:47,950 --> 00:01:51,580
loop variable, a counter variable right here.

25
00:01:51,590 --> 00:01:54,480
So it would typically be an event.

26
00:01:54,490 --> 00:01:56,470
And then you'll name a variable.

27
00:01:56,710 --> 00:02:01,150
I'll name it counter, and then you'd initialize it as well.

28
00:02:01,420 --> 00:02:05,200
Equals zero, let's say, and then a semicolon.

29
00:02:05,220 --> 00:02:11,170
And so that's the first little segment of our for statement or our for loop.

30
00:02:11,650 --> 00:02:17,590
Then we will give it the criteria for how long it should loop until what.

31
00:02:17,890 --> 00:02:27,490
So let's say in this case, while counter is less than 10, so technically now this will count ten times,

32
00:02:27,490 --> 00:02:30,410
but it will start zero up to nine.

33
00:02:30,430 --> 00:02:31,840
The 10 will not be included.

34
00:02:31,840 --> 00:02:32,200
Okay.

35
00:02:32,350 --> 00:02:37,600
This is pretty typical pattern that you'll see where your zero based and then you count up to, but

36
00:02:37,600 --> 00:02:39,880
not including whatever this number would be.

37
00:02:39,880 --> 00:02:41,200
So 10 in this case.

38
00:02:41,230 --> 00:02:41,590
All right.

39
00:02:41,620 --> 00:02:44,740
Colon and then counter plus plus.

40
00:02:44,980 --> 00:02:51,940
And usually you will see that will use the postfix version of the increment or instead of the prefix

41
00:02:51,940 --> 00:02:52,360
here.

42
00:02:52,810 --> 00:02:53,140
All right.

43
00:02:53,980 --> 00:02:54,400
All right.

44
00:02:54,430 --> 00:03:02,650
Now, if we want to just print out those numbers, we can do an so you f and then we can say something

45
00:03:02,650 --> 00:03:06,610
like counter is percent the.

46
00:03:08,070 --> 00:03:16,710
Percent in close quote, karma and then simply reference the counter variable just like so.

47
00:03:17,760 --> 00:03:18,120
All right.

48
00:03:18,780 --> 00:03:23,760
So this is one of the most basic forms of loop you could ever use.

49
00:03:24,120 --> 00:03:24,690
OK.

50
00:03:24,720 --> 00:03:27,390
And the most typical format for it as well.

51
00:03:27,570 --> 00:03:29,340
So let's go ahead and run this.

52
00:03:29,610 --> 00:03:34,890
And now that we're back in a program where we're not taking any input from console, we can go back

53
00:03:34,890 --> 00:03:36,420
to just running the regular way.

54
00:03:36,450 --> 00:03:40,030
We don't need to build it first and then run it outside of the ADC.

55
00:03:40,050 --> 00:03:41,640
We can run everything right here.

56
00:03:41,790 --> 00:03:43,720
So I'm going to go ahead and run this.

57
00:03:43,740 --> 00:03:47,670
You can click on those buttons or do the control shift f 10 or whatever.

58
00:03:48,600 --> 00:03:52,870
And there's our output counter is zero blah blah blah.

59
00:03:52,890 --> 00:03:53,520
Up to nine.

60
00:03:53,520 --> 00:03:58,740
Now I did initially say, let's make it count from one to 10, right?

61
00:03:59,070 --> 00:04:00,600
Not zero through nine.

62
00:04:00,750 --> 00:04:03,420
So there are a few ways we could do that.

63
00:04:03,600 --> 00:04:09,580
We could just add one to this counter as we're printing the values right?

64
00:04:09,600 --> 00:04:10,380
We could do that.

65
00:04:10,770 --> 00:04:11,520
Let's run that.

66
00:04:12,660 --> 00:04:13,290
There we go.

67
00:04:14,340 --> 00:04:25,500
So now we've got one through 10 like so or I'll undo that, or we could just start it from one and then

68
00:04:25,500 --> 00:04:31,860
we could tell it to count as long as it's less than 11, that would achieve the same thing, right?

69
00:04:32,010 --> 00:04:32,520
There we go.

70
00:04:32,550 --> 00:04:33,240
Same thing.

71
00:04:34,110 --> 00:04:38,700
Or we could say, while it's less than or equal to 10.

72
00:04:40,010 --> 00:04:43,070
Let's run that that also would do the exact same thing.

73
00:04:43,280 --> 00:04:43,610
All right.

74
00:04:44,180 --> 00:04:50,690
But I would say the most common approach that you'll usually see from most professional developers would

75
00:04:50,690 --> 00:04:57,830
be to start with zero and then go up to the number that you're looking for and then you'll do something

76
00:04:57,830 --> 00:04:58,070
else.

77
00:04:58,070 --> 00:05:00,350
But you know, there's pros and cons to that.

78
00:05:00,410 --> 00:05:01,790
This is a little clunky.

79
00:05:02,930 --> 00:05:07,520
Maybe that's a little clunky having to add one to this variable here.

80
00:05:08,090 --> 00:05:13,940
So it just depends on if you're going to be using that variable in other parts of the program or loop

81
00:05:13,940 --> 00:05:14,570
or whatever.

82
00:05:14,570 --> 00:05:16,610
And what do you need there, right?

83
00:05:17,090 --> 00:05:24,170
All right now, in the previous lesson, I showed that you could initialize the variable outside of

84
00:05:24,170 --> 00:05:32,330
the loop, which then increases the scope of the variable also so that now that variable can be accessed

85
00:05:32,660 --> 00:05:34,960
from outside of the loop, right?

86
00:05:34,970 --> 00:05:43,460
So if we wanted to do something more with it down here, we could do that because the variable lives

87
00:05:43,490 --> 00:05:46,250
beyond the scope of this loop.

88
00:05:46,820 --> 00:05:47,130
Right.

89
00:05:47,160 --> 00:05:49,760
So we could do that now technically.

90
00:05:49,830 --> 00:05:58,730
Each of these clauses, if you will, of the for loop is is optional, so I could get rid of that bit

91
00:05:58,730 --> 00:05:59,280
there.

92
00:05:59,360 --> 00:06:04,190
However, when I do that now, the ADP tells me that, OK, you can do that.

93
00:06:04,190 --> 00:06:06,350
But now Line nine will never be reached.

94
00:06:06,560 --> 00:06:14,300
And the reason Line nine will never be reachable now is because this effectively causes this loop to

95
00:06:14,330 --> 00:06:16,730
simply keep incrementing forever.

96
00:06:17,000 --> 00:06:19,610
Because now the for loop doesn't know when it should stop.

97
00:06:20,150 --> 00:06:20,630
OK.

98
00:06:20,900 --> 00:06:25,760
And if this loop is going to go forever, then this line will never be reached.

99
00:06:25,970 --> 00:06:31,820
The thread will just always be going in a loop, literally here, and it will never reach this line.

100
00:06:32,030 --> 00:06:38,960
So the idea can see that, and it's warning us, Hey, this doesn't look like totally legitimate code

101
00:06:39,440 --> 00:06:40,640
if that's what you want to do.

102
00:06:40,640 --> 00:06:42,800
So in this case, I would delete that.

103
00:06:42,950 --> 00:06:50,030
Now, there's almost never going to be any reason why you would want to do this in most typical Java

104
00:06:50,030 --> 00:06:50,900
programs.

105
00:06:51,140 --> 00:06:55,940
However, there's one case where you might do something a little like this, although in that case you

106
00:06:55,940 --> 00:07:00,890
probably would not use a for loop and that would be in video game programming.

107
00:07:00,890 --> 00:07:07,730
Video games, especially graphical video games, tend to have what is called a graphics loop, where

108
00:07:07,730 --> 00:07:13,490
the program just constantly is looping and repainting the screen multiple times per second.

109
00:07:14,090 --> 00:07:19,580
So if any of you are gamers out there, you and I'm not a gamer, but if any of you are gamers out there,

110
00:07:19,580 --> 00:07:25,220
you'll know that there's something about the frames per second that your game will operate at.

111
00:07:25,610 --> 00:07:32,780
And what one of the things that limits the frames per second is how long it takes to recalculate and

112
00:07:32,780 --> 00:07:36,260
then repaint the screen within one iteration.

113
00:07:36,530 --> 00:07:41,840
While all of that is happening inside of one massive loop, which is called the game loop.

114
00:07:42,410 --> 00:07:50,240
And in that particular loop, you probably don't want to have a limit to the number of iterations.

115
00:07:50,420 --> 00:07:58,340
You probably want that loop to go forever or until someone exits out of the program somehow.

116
00:07:58,850 --> 00:08:02,540
And then this bit here is also optional.

117
00:08:02,540 --> 00:08:07,650
Technically, though, now the loop is even less useful.

118
00:08:07,670 --> 00:08:15,050
So now what's going to happen is it's still going to run forever, but it's just going to print the

119
00:08:15,050 --> 00:08:16,830
number zero forever.

120
00:08:16,850 --> 00:08:19,280
In fact, I suppose we could run this.

121
00:08:19,580 --> 00:08:23,180
I don't like running infinite loops, ever, but let's just see.

122
00:08:23,900 --> 00:08:26,120
Well, Will will cancel out of it.

123
00:08:28,990 --> 00:08:34,120
OK, so we are adding one to it, but it's going to run forever, someone who controls sea to kill it.

124
00:08:34,810 --> 00:08:35,170
All right.

125
00:08:35,200 --> 00:08:39,040
Now I have to scroll down to get to the Oh, it's still running.

126
00:08:39,970 --> 00:08:40,240
All right.

127
00:08:40,240 --> 00:08:44,920
So it's it's taken over the computer so much that I can't even easily control see out of it.

128
00:08:44,920 --> 00:08:48,970
So what I can do is click this little stop button here to stop it.

129
00:08:50,390 --> 00:08:56,090
So I would advise be careful if you if you decide to run code that looks like this.

130
00:08:56,300 --> 00:08:59,360
Make sure you have access to a way to stop it.

131
00:08:59,780 --> 00:09:00,120
All right.

132
00:09:00,140 --> 00:09:02,570
And I think that's going to wrap up this little lecture.

133
00:09:02,580 --> 00:09:08,240
Like I said, I just wanted to make sure you got a chance to see a little more focus on what the for

134
00:09:08,240 --> 00:09:15,170
loop really looks like without all the noise of the guessing game code that we had all around it.

135
00:09:15,350 --> 00:09:22,190
So in the guessing game code that the main body of that loop would have been a bunch of lines of code

136
00:09:22,610 --> 00:09:25,130
kind of, you know, like here.

137
00:09:25,160 --> 00:09:25,550
Right?

138
00:09:25,640 --> 00:09:28,590
But this is the main structure of the for loop.

139
00:09:28,610 --> 00:09:33,720
I mean, except for removed, you know, these clauses here, but you get it all right.

140
00:09:33,740 --> 00:09:37,490
So with that, I will in this lesson and I'll see you in the next one.

141
00:09:39,890 --> 00:09:46,610
And there's one more for loop pattern that I want to introduce you to before we close out this topic.

142
00:09:46,700 --> 00:09:50,030
So for this one, I want to show you a scenario here.

143
00:09:50,030 --> 00:09:51,560
It has to do with arrays.

144
00:09:52,340 --> 00:10:02,120
So let's say that we have a string array called fruits, and we will initialize it with a few different

145
00:10:02,120 --> 00:10:02,750
fruits.

146
00:10:03,050 --> 00:10:07,100
Apple, orange, pear, plum.

147
00:10:07,100 --> 00:10:07,520
That's another.

148
00:10:09,490 --> 00:10:18,550
All right, now, let's say that we want to loop over these fruits and just print them out, right?

149
00:10:19,210 --> 00:10:22,060
So can you think of ways that we can do this?

150
00:10:22,540 --> 00:10:31,390
I mean, one thing we could do is we could use a for loop and we could declare a counter, set it to

151
00:10:31,390 --> 00:10:33,550
zero, initialize it to zero.

152
00:10:34,600 --> 00:10:43,360
And then we could say something like keep counting as long as the counter is less than now.

153
00:10:43,360 --> 00:10:45,040
What number do we want to put here?

154
00:10:45,580 --> 00:10:52,470
Well, we could actually just set it to count up to the number of items that are in the fruit array,

155
00:10:52,480 --> 00:10:54,130
and this is a very common pattern.

156
00:10:54,430 --> 00:10:57,910
So what we can do is to reference fruits length.

157
00:10:58,540 --> 00:10:59,040
OK.

158
00:10:59,980 --> 00:11:01,960
And then counter plus plus.

159
00:11:02,830 --> 00:11:09,070
So that's a very, very common pattern when especially if you're looping over items in an array, you'll

160
00:11:09,070 --> 00:11:11,380
just refer to the length of the array.

161
00:11:11,770 --> 00:11:17,740
And now here we could do something like current fruit is.

162
00:11:23,420 --> 00:11:26,510
Fruits counter, right?

163
00:11:27,050 --> 00:11:28,220
Let's run that and see it.

164
00:11:29,270 --> 00:11:30,260
All right, so there we go.

165
00:11:30,860 --> 00:11:32,630
Apple, orange, pear, plum.

166
00:11:32,660 --> 00:11:33,000
Right.

167
00:11:33,020 --> 00:11:37,880
So that's fairly straightforward, kind of a nice use of the the for loop.

168
00:11:38,150 --> 00:11:46,130
However, there is as of Java five, I believe it was something called the enhanced for loop.

169
00:11:46,580 --> 00:11:53,300
And basically, it just cuts down on the amount of typing that we need to do to implement this exact

170
00:11:53,300 --> 00:11:53,960
pattern.

171
00:11:54,260 --> 00:11:56,780
And so let me show you what that looks like.

172
00:11:56,820 --> 00:11:59,000
It's quite nice, I would say.

173
00:11:59,010 --> 00:12:01,710
So we don't need any of this.

174
00:12:02,450 --> 00:12:03,910
We can get rid of all of that.

175
00:12:03,920 --> 00:12:11,150
And instead, we can simply say that we're going to have a variable of type string and we can call it

176
00:12:11,150 --> 00:12:15,500
fruit, and then we use a colon and then a space.

177
00:12:15,800 --> 00:12:20,780
The space is optional and then we reference our array.

178
00:12:20,960 --> 00:12:23,180
So the variable for the array is fruit.

179
00:12:23,200 --> 00:12:26,240
So if I just type in fruits just like that.

180
00:12:26,570 --> 00:12:30,340
Now you can have a space to the left of the colon as well.

181
00:12:30,350 --> 00:12:31,580
It doesn't really matter.

182
00:12:31,880 --> 00:12:38,930
And now down here, instead of directly referencing the array, what's going to happen is that this

183
00:12:38,930 --> 00:12:47,430
enhanced for loop is going to iterate through iterate means to step through each item in the array.

184
00:12:47,450 --> 00:12:52,040
In this case, it's going to step through and it's going to take whatever the current value in that

185
00:12:52,040 --> 00:12:53,390
iteration is.

186
00:12:53,390 --> 00:12:59,990
Whatever the current string is in the as it's iterating over all of these strings in this array and

187
00:12:59,990 --> 00:13:03,680
it's going to assign them one at a time to this variable fruit.

188
00:13:04,280 --> 00:13:10,900
And so that means down here, we don't need to reference the individual values out of the array anymore.

189
00:13:10,910 --> 00:13:14,420
We can simply refer to this local variable fruit.

190
00:13:16,880 --> 00:13:18,500
So let's run this.

191
00:13:20,180 --> 00:13:20,930
So look at that.

192
00:13:20,960 --> 00:13:23,250
There's you don't see any difference in the output.

193
00:13:23,270 --> 00:13:24,860
It behaves the same, right?

194
00:13:24,860 --> 00:13:25,700
The output is.

195
00:13:25,940 --> 00:13:28,930
But look at this much nicer, isn't it?

196
00:13:28,940 --> 00:13:30,860
Is it just easier to look at?

197
00:13:31,520 --> 00:13:39,620
So as long as you don't need an index or a counter, if you just want to loop over the items that are

198
00:13:39,620 --> 00:13:45,440
in an array, you can use this enhanced for loop to do this.

199
00:13:45,830 --> 00:13:52,310
Now this is I'm considering this to be a little bit of a sneak preview because in a later module, we

200
00:13:52,310 --> 00:13:59,420
will learn about collections which are kind of like arrays on steroids, and we can use the enhanced

201
00:13:59,420 --> 00:14:04,190
loop to reference the items that are in a collection as well.

202
00:14:04,430 --> 00:14:04,880
OK.

203
00:14:05,090 --> 00:14:10,610
But since we were already on the for loop and you've already learned about arrays might as well go ahead

204
00:14:10,610 --> 00:14:16,520
and introduce you now to this specific use of the enhanced for loop.

205
00:14:17,150 --> 00:14:17,960
So that's it.
