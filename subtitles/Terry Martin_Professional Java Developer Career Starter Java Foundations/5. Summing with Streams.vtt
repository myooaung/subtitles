WEBVTT
1
00:00:00.330 --> 00:00:05.490
All right, so continuing from where we left off in the last lesson, we're going to now look at how

2
00:00:05.490 --> 00:00:12.900
to implement the ability to sum up the salaries of all of these employees again, but this time obviously

3
00:00:12.900 --> 00:00:15.060
using the Streams API.

4
00:00:15.510 --> 00:00:16.900
So first thing will do.

5
00:00:16.920 --> 00:00:22.650
Let's go ahead and select this little test code that we were playing with in the last lesson.

6
00:00:22.650 --> 00:00:23.720
We don't need this anymore.

7
00:00:23.730 --> 00:00:29.100
So I'm just selecting it and I'm going to delete it with a command delete and I'll get rid of some of

8
00:00:29.100 --> 00:00:31.140
these empty spaces as well.

9
00:00:31.980 --> 00:00:32.400
All right.

10
00:00:32.400 --> 00:00:40.080
And then we'll uncomment the original code, and let's just run that again just to make sure that that's

11
00:00:40.080 --> 00:00:40.620
good.

12
00:00:41.130 --> 00:00:41.740
OK, cool.

13
00:00:41.760 --> 00:00:43.440
So there's all of our people.

14
00:00:43.920 --> 00:00:44.270
All right.

15
00:00:44.280 --> 00:00:47.430
So we want to sum up their salaries.

16
00:00:47.430 --> 00:00:49.080
So looking at this list here.

17
00:00:49.440 --> 00:00:55.470
So we know that this is now technically a list of AI employees, right?

18
00:00:55.470 --> 00:00:57.210
The interface of employee.

19
00:00:57.390 --> 00:01:05.400
The reason we know that is because this this line thirty six right here is mapping, which you can think

20
00:01:05.400 --> 00:01:07.460
of mapping as basically converting right.

21
00:01:07.680 --> 00:01:18.120
It's it's mapping the individual text strings of each of these lines from text by calling the Create

22
00:01:18.120 --> 00:01:26.010
employee method, which is taking the text as an input and then spitting out a an instance of an AI

23
00:01:26.010 --> 00:01:26.800
employee.

24
00:01:26.820 --> 00:01:27.180
Right.

25
00:01:27.630 --> 00:01:33.660
And then each of those AI employees is going and is being fed into the for each method, which in turn

26
00:01:33.660 --> 00:01:34.950
is calling print line.

27
00:01:35.160 --> 00:01:37.650
And by the way, I mean, just quick refresher here.

28
00:01:38.520 --> 00:01:45.600
The print line, when we're passing in and object to the print line, you know that what's actually

29
00:01:45.600 --> 00:01:50.430
happening there is that that objects to string method is getting called.

30
00:01:50.670 --> 00:01:53.970
And that's why this is printing out the way that it is.

31
00:01:54.150 --> 00:02:00.510
So if we wanted to change this, we could go into the to string method of the employee class and change

32
00:02:00.510 --> 00:02:01.070
it, right?

33
00:02:01.740 --> 00:02:04.710
Just a quick refresher there on how that was actually working.

34
00:02:04.710 --> 00:02:08.340
I didn't stated explicitly in the last lesson or so.

35
00:02:08.790 --> 00:02:09.180
All right.

36
00:02:09.930 --> 00:02:18.360
So we've got these AI employees here, and we want to sum up the salaries of them.

37
00:02:18.690 --> 00:02:23.010
So how can we do that with with the with the streams API?

38
00:02:23.220 --> 00:02:25.320
Well, one thing I'm going to kind of jump ahead.

39
00:02:25.320 --> 00:02:31.350
I'm going to kind of skip ahead a minute and just let you know right now that the Streams API actually

40
00:02:31.350 --> 00:02:36.030
has a function that can sum a stream of numbers.

41
00:02:36.240 --> 00:02:42.450
So if you have numbers such as integers, for example, which is what our salaries happen to be modeled

42
00:02:42.450 --> 00:02:52.530
as, if you have a stream of integers, you can pass that stream of integers into this some function

43
00:02:52.530 --> 00:02:56.220
of the Streams API, and it will sum them all up for you.

44
00:02:56.940 --> 00:03:07.890
So what we need to do if we want to make use of that is to figure out how to go from a stream of AI

45
00:03:07.890 --> 00:03:12.810
employees, which is what we have here to a stream of integers.

46
00:03:13.710 --> 00:03:17.250
Can you think of a way to do that using the Streams API?

47
00:03:17.370 --> 00:03:19.290
Why don't you take a moment to think about it?

48
00:03:21.530 --> 00:03:22.010
OK.

49
00:03:22.170 --> 00:03:34.970
So as you know, the map function allows us to convert or transform objects of one type to another type,

50
00:03:34.970 --> 00:03:40.560
or technically it allows us to transform streams of one type two streams of another type.

51
00:03:40.580 --> 00:03:42.470
So however, you want to think about that, right?

52
00:03:42.890 --> 00:03:47.840
So currently, it's converting a stream of strings.

53
00:03:47.900 --> 00:03:50.030
Sorry, that that's so confusing.

54
00:03:50.270 --> 00:03:52.910
I'm just going to say a stream of text, right?

55
00:03:53.180 --> 00:04:02.150
It's converting a stream of text, which are these individual text lines into a stream of AI employee

56
00:04:02.180 --> 00:04:03.020
objects?

57
00:04:03.080 --> 00:04:03.470
Right?

58
00:04:03.770 --> 00:04:05.280
And then those are getting printed out.

59
00:04:05.300 --> 00:04:06.830
That's what it's currently doing.

60
00:04:07.340 --> 00:04:14.510
So we could just add another map function in the pipeline right after that.

61
00:04:15.110 --> 00:04:18.650
Just like this perhaps map.

62
00:04:21.100 --> 00:04:25.780
And what we want to do is to access the.

63
00:04:27.060 --> 00:04:34.560
Get salary method of each of those employee's right, because each of them has a get salary method on

64
00:04:34.560 --> 00:04:34.770
it.

65
00:04:34.980 --> 00:04:41.610
So if we were to just call the get salary method of each of those objects, that would return back just

66
00:04:41.610 --> 00:04:45.570
the salary right now, there's a question of how can we do that?

67
00:04:46.210 --> 00:04:55.110
So I'll be honest with you, when I was preparing this lesson for you, I myself made a mistake and

68
00:04:55.110 --> 00:05:01.020
I'm going to show you the mistake that I made because it's probably a pretty easily made mistake.

69
00:05:01.200 --> 00:05:02.790
And I want you to be aware of it.

70
00:05:02.880 --> 00:05:04.620
So this is what I initially did.

71
00:05:06.270 --> 00:05:09.230
I did employee colon colon.

72
00:05:09.240 --> 00:05:17.100
I use the method reference because technically the get salary method exists on the employee class and

73
00:05:17.100 --> 00:05:24.510
then I called get salary just like so and the Strings API was not happy with me.

74
00:05:24.510 --> 00:05:27.570
And if I hover my cursor here, you'll see.

75
00:05:28.200 --> 00:05:29.640
Let's see, what are we getting here?

76
00:05:29.880 --> 00:05:35.220
No instances of type variables exist so that I employee conforms to employee.

77
00:05:35.520 --> 00:05:35.790
All right.

78
00:05:35.790 --> 00:05:37.110
So what is that thing?

79
00:05:38.010 --> 00:05:40.920
Well, we have to think about this for a moment.

80
00:05:41.130 --> 00:05:44.370
What's coming out of line 36?

81
00:05:45.360 --> 00:05:52.230
Line 36 is returning a stream of eye employee objects.

82
00:05:52.380 --> 00:05:52.920
OK.

83
00:05:54.400 --> 00:06:04.810
Now down here, I'm telling the map function to call the get salary method of the employee class.

84
00:06:05.590 --> 00:06:12.430
So do you can you are you getting a sense for what the issue probably is here?

85
00:06:13.160 --> 00:06:22.690
The the issue has to do with the fact that the objects coming out of Line 36 are are of type I employee,

86
00:06:23.230 --> 00:06:29.440
but I'm telling this second map function to call employee get salary.

87
00:06:29.890 --> 00:06:35.890
I'm not referencing the get salary method declared on the I employee interface.

88
00:06:36.160 --> 00:06:41.170
I'm referencing the get salary method of the employee class.

89
00:06:41.800 --> 00:06:43.360
That's kind of a problem.

90
00:06:43.900 --> 00:06:44.260
All right.

91
00:06:44.740 --> 00:06:50.710
So what I can do is simply reference the get salary method of the employee class.

92
00:06:54.870 --> 00:06:57.240
And then the error goes away.

93
00:06:57.540 --> 00:07:01.890
All right, so this is returning now, a stream of integers.

94
00:07:03.340 --> 00:07:03.700
All right.

95
00:07:03.730 --> 00:07:11.470
And then I mentioned earlier that there is a sum function that can take as input a stream of numbers.

96
00:07:12.010 --> 00:07:18.960
So what I can do now is simply reference that oop.

97
00:07:19.180 --> 00:07:20.320
But hold on a minute.

98
00:07:20.680 --> 00:07:21.310
Where is it?

99
00:07:21.610 --> 00:07:25.060
It's not showing up for me, so I did this on purpose.

100
00:07:25.540 --> 00:07:32.830
The reason it's not showing up is because the sum function is only available when following a preceding

101
00:07:32.830 --> 00:07:37.510
streams API function that deals specifically with numbers.

102
00:07:37.690 --> 00:07:46.030
So this map function here is kind of a generic one size fits all map function to convert vaguely anything

103
00:07:46.030 --> 00:07:46.850
to anything.

104
00:07:46.870 --> 00:07:55.030
However, there is a more specific map function that can map supposedly anything to integers specifically.

105
00:07:55.420 --> 00:08:03.910
And so what we want to do is actually here is actually change this second map function from map to map

106
00:08:04.510 --> 00:08:05.380
to end.

107
00:08:05.590 --> 00:08:12.430
And if you see here, there's actually several of these map to end map to double map to long map multi.

108
00:08:12.670 --> 00:08:14.080
There's a lot of these things, right?

109
00:08:14.080 --> 00:08:17.320
But we'll we'll just go right now with the map to end.

110
00:08:17.560 --> 00:08:25.750
So now if we hover over the map to end, we can see the little Java Dock here and see specifically what

111
00:08:25.750 --> 00:08:26.680
does it return?

112
00:08:26.680 --> 00:08:29.380
And you'll see that it doesn't just return a stream.

113
00:08:29.680 --> 00:08:33.740
It returns an end stream, a stream of integers.

114
00:08:34.000 --> 00:08:34.450
OK.

115
00:08:34.840 --> 00:08:43.300
And because it returns an end to stream, this end stream exposes additional streams API methods that

116
00:08:43.300 --> 00:08:48.280
pertain specifically to handling numbers such as summing integers.

117
00:08:48.430 --> 00:08:53.290
And so now, if we come over here and do a control space, look at that.

118
00:08:53.290 --> 00:08:56.020
We've got access to a some method in.

119
00:08:56.020 --> 00:08:57.670
While we're here real quick, we can take a look.

120
00:08:57.670 --> 00:09:04.090
There's also a max and a few other things as well that we may come back and take a look at later.

121
00:09:04.330 --> 00:09:07.720
But for now, we want to look at this some method here.

122
00:09:07.840 --> 00:09:16.390
Now, if I hover over the same method, we'll see that this method is also a terminal operation, meaning

123
00:09:16.390 --> 00:09:18.580
it is the end of a.

124
00:09:19.060 --> 00:09:21.040
Other streams API pipeline.

125
00:09:21.130 --> 00:09:27.610
And as such, we cannot have both the same method here and the for each method.

126
00:09:27.620 --> 00:09:33.130
And by the way, I'm well aware that I am kind of interchangeably using the terms method and functions

127
00:09:33.130 --> 00:09:36.930
when referring to the pipeline methods or functions here.

128
00:09:36.940 --> 00:09:37.930
Forgive me for that.

129
00:09:39.010 --> 00:09:45.550
I tend to think of them a little bit more as functional as functions most of the time because a lot

130
00:09:45.550 --> 00:09:50.110
of the streams API stuff is really getting heavy, heavy into functional programming.

131
00:09:51.040 --> 00:09:52.930
So, you know, call it what you want.

132
00:09:52.930 --> 00:10:00.580
But so at any rate, we can't do both a thumb and a for each one of them has to go and it's going to

133
00:10:00.580 --> 00:10:01.780
be this for each year.

134
00:10:02.260 --> 00:10:03.310
So let's get rid of that.

135
00:10:03.610 --> 00:10:07.510
And now I need to terminate this sum here with a semicolon.

136
00:10:08.500 --> 00:10:08.830
All right.

137
00:10:08.890 --> 00:10:10.480
But now what can I do with this?

138
00:10:10.490 --> 00:10:16.660
So if we hover over this one more time, the some function or method here we see that it outputs an

139
00:10:16.660 --> 00:10:17.290
integer.

140
00:10:17.380 --> 00:10:24.370
So it just sums up every number that that's getting kind of accumulated in it and then spits out the

141
00:10:24.370 --> 00:10:24.790
sum.

142
00:10:25.120 --> 00:10:26.680
So we need to capture that.

143
00:10:26.920 --> 00:10:30.460
And so what I can do here is the an option command V.

144
00:10:32.230 --> 00:10:37.330
And yeah, I'll just use that, that number, that variable name, their sum.

145
00:10:38.230 --> 00:10:38.770
All right.

146
00:10:38.800 --> 00:10:47.440
And then we can print that out some and let's rerun and let's see what we've got now.

147
00:10:48.470 --> 00:10:51.560
OK, so we've got this number here.

148
00:10:51.590 --> 00:10:57.080
Now notice it's not pretty or anything right, it would still need to be formatted or something, but

149
00:10:57.080 --> 00:10:58.310
we've got that number.

150
00:10:59.180 --> 00:11:06.920
All right now, before we move on with the rest of this lesson, I want to show you one other interesting

151
00:11:06.920 --> 00:11:08.960
thing that I think you should be aware of.

152
00:11:09.350 --> 00:11:18.230
So we had to use the map to end a function here in order to unlock our ability to do something right

153
00:11:18.230 --> 00:11:19.490
to use this sum.

154
00:11:19.760 --> 00:11:20.210
OK.

155
00:11:20.600 --> 00:11:25.700
I want to show you the what would have happened if we had used the map to end function.

156
00:11:25.910 --> 00:11:33.470
But we did not use a method reference that was referring to the I employee interface, and instead we

157
00:11:33.470 --> 00:11:37.460
had referred to the get salary method of just the employee class itself.

158
00:11:37.700 --> 00:11:39.260
I want to show you what would happen there.

159
00:11:40.700 --> 00:11:45.560
OK, so it goes back into error again, but it's going to be a slightly different error now.

160
00:11:45.590 --> 00:11:49.010
So if I hover over this now we're getting a message.

161
00:11:49.160 --> 00:11:54.260
Non static method cannot be referenced from a static context.

162
00:11:54.440 --> 00:11:59.240
So I want to dig in on this a little bit and make sure that you have a general understanding of what's

163
00:11:59.240 --> 00:12:06.020
going on here because there's actually quite a bit of Java magic going on underneath the hood to enable

164
00:12:06.020 --> 00:12:11.150
all of this cool stuff to even work, and it will be helpful for you to get a certain degree of understanding

165
00:12:11.150 --> 00:12:11.360
of it.

166
00:12:11.360 --> 00:12:16.340
So non static method cannot be referenced from a static context.

167
00:12:16.640 --> 00:12:17.780
So what's going on here?

168
00:12:19.050 --> 00:12:26.910
Well, so the method reference on Line 36, which is calling Create Employee, as we know, is returning

169
00:12:27.030 --> 00:12:31.350
a stream of AI employee objects.

170
00:12:31.380 --> 00:12:31.710
Right?

171
00:12:32.700 --> 00:12:39.720
And then on line 37, as it's currently written, we are then trying to call the get salary method of

172
00:12:39.720 --> 00:12:41.520
the employee class.

173
00:12:41.760 --> 00:12:48.150
So let me start off and just tell you, generally speaking, what's happening here is because the stream

174
00:12:48.150 --> 00:12:54.150
of objects that are entering into line 37 are of type I employee.

175
00:12:54.300 --> 00:13:03.630
When Java sees that we are referencing the get salary method of a class that isn't specifically an I

176
00:13:03.660 --> 00:13:04.350
employee.

177
00:13:05.160 --> 00:13:08.520
It assumes that we are trying to call a static method.

178
00:13:08.550 --> 00:13:14.550
However, it knows well and good that the get salary method is not a static method.

179
00:13:14.790 --> 00:13:15.210
OK.

180
00:13:15.270 --> 00:13:17.550
And so we're getting this message here.

181
00:13:17.550 --> 00:13:21.300
Non static method cannot be referenced from a static context.

182
00:13:21.300 --> 00:13:29.040
So the basic rule that's happening here is Java is saying when you have an input in this case to the

183
00:13:29.040 --> 00:13:38.670
map to enter method that is of one type and you are supplying the map to end method with a method reference

184
00:13:38.670 --> 00:13:43.050
to a method that exists on a different data type.

185
00:13:43.080 --> 00:13:50.280
It will assume that the method reference on Line 37 is meant to be a static method reference, even

186
00:13:50.280 --> 00:13:53.130
though it can see clearly that that's not a static method.

187
00:13:53.340 --> 00:14:02.490
Those are just the rules of how Java figures out what you mean when you are supplying it with a method

188
00:14:02.490 --> 00:14:11.070
reference, and it has about four primary rules that it tries to follow to figure out how to map the

189
00:14:11.970 --> 00:14:19.200
data in the subsequent stream into the method reference of the next step in that pipeline.

190
00:14:19.260 --> 00:14:19.680
OK.

191
00:14:20.550 --> 00:14:23.610
And so what we're kind of hitting at here is one of these rules.

192
00:14:23.880 --> 00:14:27.210
Let me try to show you visually what I kind of mean here.

193
00:14:27.330 --> 00:14:29.400
So I'm going to do a little bit of quick drawing here.

194
00:14:29.820 --> 00:14:30.270
OK.

195
00:14:30.600 --> 00:14:34.260
So got my my tablet here.

196
00:14:34.920 --> 00:14:42.210
And basically, what you can kind of envision here is, let's say that we've got a stream of.

197
00:14:44.630 --> 00:14:50.600
Of AI employees, which I will depict as red stick figures.

198
00:14:52.070 --> 00:14:52.520
All right.

199
00:14:55.520 --> 00:14:56.870
All right, so there's our.

200
00:14:59.630 --> 00:15:07.910
Our our AI employees, and I will label them as such, I am employee.

201
00:15:08.420 --> 00:15:08.810
All right.

202
00:15:09.500 --> 00:15:10.070
Well, yeah.

203
00:15:10.370 --> 00:15:10.730
All right.

204
00:15:11.240 --> 00:15:19.310
Now they are being fed into let me change the color here they're being fed into.

205
00:15:19.730 --> 00:15:22.250
Actually, let's make that a little smaller.

206
00:15:24.010 --> 00:15:31.240
Now they're being fed into this map to end function here

207
00:15:34.330 --> 00:15:36.640
and the map to end function.

208
00:15:37.980 --> 00:15:43.230
Is referencing the employee get salary method now?

209
00:15:43.260 --> 00:15:43.900
I don't know.

210
00:15:43.920 --> 00:15:45.000
Maybe, maybe I will.

211
00:15:45.660 --> 00:15:52.110
Maybe what I'll do is I will depict the employee get salary method kind of down here in green, maybe.

212
00:15:52.740 --> 00:15:53.610
So let's see.

213
00:15:53.610 --> 00:15:54.390
We've got the.

214
00:15:56.330 --> 00:15:57.680
Employee.

215
00:16:00.060 --> 00:16:01.380
That get.

216
00:16:04.180 --> 00:16:06.430
Salary method.

217
00:16:06.760 --> 00:16:07.240
OK.

218
00:16:09.600 --> 00:16:11.430
And what this method does.

219
00:16:11.760 --> 00:16:13.530
Let me move this over a bit.

220
00:16:20.030 --> 00:16:20.420
OK.

221
00:16:22.020 --> 00:16:27.030
And what this method returns is employees.

222
00:16:30.850 --> 00:16:31.200
Right.

223
00:16:31.530 --> 00:16:33.790
So I'll draw an employee.

224
00:16:34.320 --> 00:16:38.370
So employees are green, eye employees are red.

225
00:16:38.430 --> 00:16:40.650
OK, that's the that's the bottom line there.

226
00:16:40.950 --> 00:16:41.340
All right.

227
00:16:42.030 --> 00:16:50.640
So when we try to pass this stream, oh, I'll even call it a stream here.

228
00:16:51.680 --> 00:17:00.170
A stream of employees when we try to pass that stream of employees into the map to end function.

229
00:17:01.610 --> 00:17:02.150
Map.

230
00:17:03.200 --> 00:17:04.760
To and.

231
00:17:05.940 --> 00:17:06.780
Function.

232
00:17:09.970 --> 00:17:18.760
What's going to happen is Java is going to look at the data type of the incoming stream, which is I

233
00:17:18.800 --> 00:17:19.660
employee.

234
00:17:23.440 --> 00:17:25.540
Which is I employee, right?

235
00:17:27.280 --> 00:17:29.500
And it's going to look at.

236
00:17:31.370 --> 00:17:32.060
The.

237
00:17:33.870 --> 00:17:41.460
Method that our map to ENT function is referring to, which is the employee that gets salary right,

238
00:17:41.460 --> 00:17:42.690
so can kind of.

239
00:17:45.230 --> 00:17:50.600
Kind of like, you know, that's kind of inside of the map to end function here, right?

240
00:17:51.230 --> 00:17:56.570
And it's going to see that the employed I get salary method returns, objects of type employee.

241
00:17:56.750 --> 00:18:04.010
And so it's comparing I employee up here to employee down here.

242
00:18:04.310 --> 00:18:14.120
And it's saying, Oh, these are different types and therefore this method that he wants to call here.

243
00:18:15.150 --> 00:18:18.840
Should be treated as though it's a static method, that's just the rules.

244
00:18:19.110 --> 00:18:21.900
OK, let me show you this.

245
00:18:22.170 --> 00:18:25.320
If we were referencing the I.

246
00:18:28.420 --> 00:18:32.650
Employee, don't get salary.

247
00:18:34.700 --> 00:18:35.390
Method.

248
00:18:38.950 --> 00:18:46.210
Inside of the from within the map to end, you know, from from within the map to end function here.

249
00:18:46.240 --> 00:18:53.140
So instead of having employee that gets salary, we had an employee actually, let's let's have our

250
00:18:53.140 --> 00:18:55.150
dual colons there, right?

251
00:18:55.930 --> 00:18:57.040
Same thing up here.

252
00:18:57.070 --> 00:18:58.150
Dual cones.

253
00:18:59.790 --> 00:19:00.150
All right.

254
00:19:00.330 --> 00:19:07.320
So if we had the employee get salary instead of the employee get salary method reference inside of our

255
00:19:07.320 --> 00:19:15.030
map to end function here, then what would happen is the Streams API would say, OK.

256
00:19:16.440 --> 00:19:25.200
We're calling the get salary method on the employee class and the type of objects that are coming into

257
00:19:25.200 --> 00:19:30.780
our stream are also of Type I employee.

258
00:19:31.530 --> 00:19:39.450
And therefore we should treat this get salary method call as just being an instance method reference

259
00:19:39.450 --> 00:19:42.210
as opposed to a static method reference.

260
00:19:42.240 --> 00:19:42.630
OK.

261
00:19:42.750 --> 00:19:48.330
And so what it's actually going to do in that case is it's going to call the get salary method individually

262
00:19:48.540 --> 00:19:50.710
on each of these objects, right?

263
00:19:50.760 --> 00:19:52.890
Because they are instances, OK?

264
00:19:53.850 --> 00:19:59.850
Whereas if if it's thinking that the get salary method is a static method, though, it's not going

265
00:19:59.850 --> 00:20:04.530
to call a get salary method on the individual instances.

266
00:20:04.680 --> 00:20:09.150
Instead, it's going to try to call a static get salary method.

267
00:20:09.150 --> 00:20:15.750
Do you get the difference here and there is no static get salary method and thus we get this this error.

268
00:20:15.780 --> 00:20:24.870
OK, so Java in the Streams API are really, really trying to be super, super smart to figure out when

269
00:20:24.870 --> 00:20:28.440
we pass in these method references, what should it actually do?

270
00:20:28.620 --> 00:20:29.790
We'll look more at this.

271
00:20:30.630 --> 00:20:37.980
We'll look at a few more examples of the of the method reference calls in subsequent lessons because

272
00:20:37.980 --> 00:20:40.650
there are more rules than just what I'm showing you here.

273
00:20:40.800 --> 00:20:45.270
So if you're not fully catching what I'm what I'm putting down, don't worry about it too much.

274
00:20:45.450 --> 00:20:49.710
You'll get another opportunity to to see what I'm talking about here, OK?

275
00:20:50.580 --> 00:20:54.360
But this is, but this is kind of an interesting thing that Java is doing.

276
00:20:54.360 --> 00:21:00.720
And then there are way more complex scenarios as well for how it can figure out how to map the data

277
00:21:01.290 --> 00:21:05.880
coming from one step in the in the stream to another one.

278
00:21:06.090 --> 00:21:08.520
So we'll look at more of those later.

279
00:21:08.610 --> 00:21:12.390
But I just wanted to take a moment to kind of show you at least a little bit here.

280
00:21:12.660 --> 00:21:20.010
OK, so now you've learned a little bit about why you can't reference the get salary method of the employee

281
00:21:20.010 --> 00:21:20.550
class.

282
00:21:20.730 --> 00:21:28.260
In this case, it's because these objects that are coming out of here are actually of type I employee,

283
00:21:28.620 --> 00:21:35.640
and that makes the Streams API think that it needs to call a static method on get salary because the

284
00:21:35.670 --> 00:21:37.230
employee doesn't match employee.

285
00:21:37.260 --> 00:21:37.650
OK.

286
00:21:37.920 --> 00:21:43.860
So to fix that, we just make it an employee and everything's happy now.

287
00:21:44.130 --> 00:21:52.380
OK, now the other thing I want to address is the fact that while we are getting a sum, the sum of

288
00:21:52.380 --> 00:21:59.970
all the salaries now we are no longer getting to see the printout of the individual employees.

289
00:22:00.090 --> 00:22:06.390
So let's say, for whatever reason, we like seeing that as well, and we don't want to do this kind

290
00:22:06.390 --> 00:22:11.130
of like twice, you know, one where we're printing out the people and then another where we're just

291
00:22:11.160 --> 00:22:12.300
summing up the numbers.

292
00:22:12.300 --> 00:22:16.260
We kind of want to do it all in once with with little to no duplicated code.

293
00:22:16.470 --> 00:22:17.460
How can we do that?

294
00:22:18.650 --> 00:22:23.330
Well, one way we could do it would be to just modify this a little bit.

295
00:22:23.600 --> 00:22:30.910
Now this primary approach that I can think of would involve us stepping back from using a method reference

296
00:22:30.920 --> 00:22:36.290
and going back towards just using a lambda expression, because that way we can type a little bit of

297
00:22:36.290 --> 00:22:36.650
code.

298
00:22:36.890 --> 00:22:38.520
So let me show you what I mean here.

299
00:22:38.540 --> 00:22:45.410
So do you want to take a moment to try to think of how you could change this line?

300
00:22:45.410 --> 00:22:54.140
37 here to not use a method reference and instead just use a lambda expression to do the equivalent

301
00:22:54.140 --> 00:22:59.720
of this, but also allow you to print out the individual people here.

302
00:22:59.930 --> 00:23:01.700
You want to take a moment to try to figure that out.

303
00:23:03.910 --> 00:23:04.400
All right.

304
00:23:04.420 --> 00:23:08.380
So hopefully, you tried that, if not, no worries.

305
00:23:08.770 --> 00:23:11.860
So I'm going to show you a way that I can think to do this.

306
00:23:12.520 --> 00:23:12.900
All right.

307
00:23:12.910 --> 00:23:15.100
So I'll just delete that.

308
00:23:15.280 --> 00:23:21.880
And so with the lambda expression, I'm going to refer to the individual objects that are coming out

309
00:23:21.880 --> 00:23:23.830
of this previous stream here.

310
00:23:24.100 --> 00:23:27.580
The previous step in the stream here or in the pipeline here.

311
00:23:27.910 --> 00:23:29.320
And those are my employees.

312
00:23:29.320 --> 00:23:32.890
So I'm just going to refer to them as E for employee.

313
00:23:33.370 --> 00:23:35.710
And then I'll need my arrow here.

314
00:23:36.010 --> 00:23:43.450
Now, if I was only going to just return when things like E. get salary, for example, which I can

315
00:23:43.450 --> 00:23:46.630
absolutely do, then I'm done right here.

316
00:23:46.750 --> 00:23:48.910
However, that isn't all I want to do.

317
00:23:49.180 --> 00:23:54.520
I actually want to be able to print out a reference to them as well.

318
00:23:54.730 --> 00:23:58.330
And so I want to be able to do like two statements here.

319
00:23:58.480 --> 00:24:04.480
And because I want that, I'm going to need curly braces like because I want to supply a code block

320
00:24:04.480 --> 00:24:04.690
right?

321
00:24:04.690 --> 00:24:05.560
A block of code.

322
00:24:05.560 --> 00:24:13.150
And we learned before that a block of code is usually multiple lines, two or more lines of code statements

323
00:24:13.150 --> 00:24:19.000
or expressions that are surrounded by curly braces.

324
00:24:19.000 --> 00:24:23.510
So any time you want to have a block of code, you need the curly braces.

325
00:24:23.530 --> 00:24:26.710
And so here are my curly braces here, and I'll hit enter.

326
00:24:27.940 --> 00:24:34.480
And so now what I can do is first, just print the employee.

327
00:24:40.680 --> 00:24:42.860
That print line E!

328
00:24:43.380 --> 00:24:43.690
Right?

329
00:24:44.010 --> 00:24:44.760
Just like that.

330
00:24:47.280 --> 00:24:55.440
And then the next bit I can do is simply refer to the value that I want to return from this basically

331
00:24:55.440 --> 00:24:58.230
anonymous method, this lambda expression, right?

332
00:24:58.410 --> 00:25:02.940
And so I want the salary so I can just say e get salary.

333
00:25:04.450 --> 00:25:05.050
There we go.

334
00:25:05.920 --> 00:25:13.000
So, yeah, it's pretty much just, you know, old school old fashioned the old fashioned way that we

335
00:25:13.240 --> 00:25:15.640
have already, that we already know how to code right?

336
00:25:16.900 --> 00:25:25.210
So you can always kind of revert back to kind of a mixed a mixed form of coding here, even within the

337
00:25:25.210 --> 00:25:25.870
Streams API.

338
00:25:25.900 --> 00:25:27.070
Now I would be careful.

339
00:25:27.280 --> 00:25:34.540
I wouldn't have, you know, like 20, 30, 40 lines of code inside of here to do this, though I would

340
00:25:34.540 --> 00:25:35.350
not do that.

341
00:25:36.130 --> 00:25:42.850
Now one thing I could do if, let's say, I wanted to do a lot more than just these two lines here.

342
00:25:43.690 --> 00:25:55.090
One thing I could consider doing, I suppose, would be to create another method and I'll call it public

343
00:25:55.090 --> 00:25:59.230
static, and it's going to return an integer.

344
00:25:59.530 --> 00:26:00.460
And let's see.

345
00:26:00.460 --> 00:26:09.780
This method is going to show employee and get salary.

346
00:26:11.440 --> 00:26:15.670
And it's going to take as an input and I employee.

347
00:26:19.920 --> 00:26:21.870
And now what it's going to do is.

348
00:26:23.670 --> 00:26:25.110
Everything I'm doing right here.

349
00:26:28.950 --> 00:26:36.780
Like so, so now what I could consider doing is to select all of that.

350
00:26:38.710 --> 00:26:39.770
Get rid of that.

351
00:26:40.330 --> 00:26:41.950
And now watch this.

352
00:26:42.550 --> 00:26:50.590
So what I can do now is I can actually refer to this new method that does these two steps using a method

353
00:26:50.590 --> 00:26:52.090
reference, actually.

354
00:26:52.510 --> 00:26:53.920
And watch what this looks like.

355
00:26:53.920 --> 00:26:58.930
So to refer to this as a method reference, I need to refer to the class that it lives in, which is

356
00:26:58.930 --> 00:27:00.760
this class here, the street.

357
00:27:00.760 --> 00:27:03.010
I named it stream's stuff, right?

358
00:27:03.310 --> 00:27:05.740
So if I just start typing, there's stream stuff.

359
00:27:05.740 --> 00:27:07.390
And if I look through this list, look at that.

360
00:27:07.660 --> 00:27:10.840
There's the method reference as an option right there.

361
00:27:12.850 --> 00:27:14.050
And voila!

362
00:27:14.590 --> 00:27:22.350
Now I can, you know, just do a one liner here because really, all I've done is this extract out the

363
00:27:22.360 --> 00:27:24.820
the more complex stuff that it's doing down here.

364
00:27:25.120 --> 00:27:29.470
OK, so you can make your own method references really easily.

365
00:27:31.750 --> 00:27:35.560
And in this particular case, it is a static reference.

366
00:27:35.740 --> 00:27:38.540
And the reason it's a static reference is because two things.

367
00:27:38.560 --> 00:27:41.030
First off, I have a static method here as the method.

368
00:27:41.230 --> 00:27:47.350
And then the Java System and Streams API are recognizing that the input here is of Type II employee,

369
00:27:47.470 --> 00:27:51.760
which is exactly what's coming out of the stream from Line thirty six.

370
00:27:51.760 --> 00:27:53.920
So those data types are matching.

371
00:27:54.070 --> 00:27:56.110
And so it's all nice and happy.

372
00:27:56.410 --> 00:27:57.880
So let's run this and confirm.

373
00:28:00.220 --> 00:28:01.570
Yeah, look at that.

374
00:28:02.380 --> 00:28:05.560
So we get our we get our people printed out still.

375
00:28:06.510 --> 00:28:14.670
And we get our son as well, and we still have a really nice, readable pipeline here for where we're

376
00:28:14.670 --> 00:28:16.140
using our Streams API.

377
00:28:16.320 --> 00:28:18.990
So now you've seen a few ways that we could do this.

378
00:28:19.380 --> 00:28:19.710
All right.

379
00:28:19.710 --> 00:28:25.860
So that's going to wrap up this lesson where we've just kind of re-implemented most of the functionality

380
00:28:25.860 --> 00:28:26.610
that we had before.

381
00:28:26.610 --> 00:28:34.680
Obviously, we did not bother to format this integer that could be done, but there's nothing streams

382
00:28:34.680 --> 00:28:35.970
API related to that.

383
00:28:35.970 --> 00:28:42.660
That would just be us taking this number and then using a number format or to format that number to

384
00:28:42.660 --> 00:28:43.470
our liking.

385
00:28:44.160 --> 00:28:45.990
I will leave that as an exercise to you.

386
00:28:47.190 --> 00:28:52.500
Other than that, though, will continue forward with learning other really awesome tricks that we can

387
00:28:52.500 --> 00:28:55.770
do with the Streams API in the subsequent lesson.

388
00:28:55.780 --> 00:28:57.210
So I will see you in the next one.
