WEBVTT
1
00:00:00.060 --> 00:00:06.300
Now we're going to dig a little deeper into this formatting stuff that we were working with in the last

2
00:00:06.300 --> 00:00:12.270
lesson, specifically the no format class and some of the derivatives of it.

3
00:00:12.810 --> 00:00:20.490
So if you just want to format numbers for money or percentages or things of that sort, by the way?

4
00:00:20.580 --> 00:00:26.280
Well, first off, let's just look at what else you can do kind of out of the box with no real, real

5
00:00:26.280 --> 00:00:26.670
work.

6
00:00:26.820 --> 00:00:30.300
So no doubt format has a few other methods on it.

7
00:00:30.300 --> 00:00:34.990
So you can get the persistence instance with this version that we're using here.

8
00:00:35.010 --> 00:00:42.590
It will just return you a formatter that is appropriate for your locale, meaning where you live, right?

9
00:00:42.600 --> 00:00:48.720
So in North America, particularly in the US, we format money with a dollar sign.

10
00:00:48.840 --> 00:00:53.170
And typically we use commas to group the the numbers every three digits.

11
00:00:53.370 --> 00:00:56.970
And we use a period to separate the decimal place.

12
00:00:57.130 --> 00:00:57.440
Yes.

13
00:00:57.460 --> 00:01:05.010
So the get currency instance and get percent instance will give you a formatter for whatever locale

14
00:01:05.010 --> 00:01:05.610
you're in.

15
00:01:05.640 --> 00:01:11.790
However, if you want to specify a locale, they both of those methods have another version where you

16
00:01:11.790 --> 00:01:13.080
can specify a locale.

17
00:01:13.110 --> 00:01:14.640
We looked at that a little bit ago.

18
00:01:14.790 --> 00:01:15.240
So let's see.

19
00:01:15.240 --> 00:01:20.830
You can get a percentage, you can get a currency, you can get a compact number instance.

20
00:01:20.880 --> 00:01:21.420
Let's see.

21
00:01:21.420 --> 00:01:22.480
What else do you have here?

22
00:01:22.500 --> 00:01:27.820
You can get a generic instance, an integer instance and number instance.

23
00:01:28.140 --> 00:01:31.110
OK, so these are a few things that you can get out of the box.

24
00:01:31.110 --> 00:01:37.230
But in all likelihood, the currency in percent instances are probably the most popular ones that you're

25
00:01:37.230 --> 00:01:38.400
likely to use.

26
00:01:38.430 --> 00:01:38.820
All right.

27
00:01:39.060 --> 00:01:43.380
But you can do more beyond these automatic easy to use.

28
00:01:43.410 --> 00:01:50.520
Guys, you can create your own instances as well, and then you can tell it how you want it to format

29
00:01:50.520 --> 00:01:53.640
numbers so you can have a lot of control over that.

30
00:01:53.820 --> 00:01:55.920
So now let's look at doing that.

31
00:01:56.160 --> 00:02:02.340
Let's just reproduce our own form matters that give us this same type of output.

32
00:02:02.760 --> 00:02:12.540
So to do that, we'll put a new line here, and we're going to use a subclass of the number format called

33
00:02:12.810 --> 00:02:17.310
decimal format because we're, you know, generally working with decimal numbers.

34
00:02:17.850 --> 00:02:24.600
And I will call this death and I'm going to create an instance of it using the new operator now.

35
00:02:24.630 --> 00:02:26.400
OK, so decimal format.

36
00:02:26.400 --> 00:02:36.420
Now this class has a constructor where we can specify a pattern that we want it to use to format our

37
00:02:36.600 --> 00:02:37.650
decimal numbers.

38
00:02:38.130 --> 00:02:42.390
And to do that, we simply put quotes and then we specify the pattern.

39
00:02:42.390 --> 00:02:49.320
Now the pattern has a language not nearly as complicated as regular expressions, but something kind

40
00:02:49.320 --> 00:02:50.520
of along those lines.

41
00:02:50.670 --> 00:02:51.120
OK.

42
00:02:51.270 --> 00:02:53.030
So let's start start with something simple.

43
00:02:53.040 --> 00:03:00.210
If you just want to say, show a number, you can do something like this just a no sign, and that makes

44
00:03:00.210 --> 00:03:01.050
a lot of sense, right?

45
00:03:01.260 --> 00:03:07.560
And then if we want to use this format or we can come down here to line 28 where we're using the money

46
00:03:07.560 --> 00:03:14.340
format or from up here and we can replace it with this new decimal format or that we have just like

47
00:03:14.340 --> 00:03:14.790
this.

48
00:03:15.300 --> 00:03:15.750
OK.

49
00:03:16.590 --> 00:03:16.890
All right.

50
00:03:16.900 --> 00:03:18.700
So let's see what this does.

51
00:03:18.750 --> 00:03:19.610
I'm going to run that.

52
00:03:19.980 --> 00:03:26.970
OK, so that's just showing the whole part of the number and not showing any fractional part that node.

53
00:03:26.970 --> 00:03:27.930
No decimal there.

54
00:03:28.290 --> 00:03:28.740
All right.

55
00:03:29.220 --> 00:03:29.610
OK.

56
00:03:29.640 --> 00:03:39.330
If we want to show the decimal, we can put a period and then a couple of no signs like this and let's

57
00:03:39.330 --> 00:03:40.440
see what this does.

58
00:03:41.370 --> 00:03:42.270
All right, there we go.

59
00:03:42.720 --> 00:03:46.290
So now we're seeing something here a little bit more.

60
00:03:46.320 --> 00:03:49.230
Now what if we want to put the commas in?

61
00:03:49.410 --> 00:03:50.380
That's pretty easy.

62
00:03:50.400 --> 00:03:54.060
So you need to specify where you want the commas to go.

63
00:03:54.210 --> 00:03:58.830
So what we could do is put a comma in here and then another number sign like that.

64
00:03:58.950 --> 00:04:00.240
So let's see what this will do.

65
00:04:00.660 --> 00:04:01.080
OK.

66
00:04:01.260 --> 00:04:02.910
So not quite what we wanted.

67
00:04:03.030 --> 00:04:11.010
So what's happening here is the way this is getting interpreted is that we want to show a comma at every

68
00:04:11.010 --> 00:04:12.420
one character.

69
00:04:12.420 --> 00:04:19.740
So every single character, the reason it interprets it this way is because we're showing no comma,

70
00:04:19.920 --> 00:04:20.550
no.

71
00:04:20.670 --> 00:04:26.340
So it interprets that to mean every one character, which means that every character.

72
00:04:26.370 --> 00:04:26.790
OK.

73
00:04:27.120 --> 00:04:33.720
So if we were to put two no signs to the right of the comma now, it will interpret that to mean you

74
00:04:33.720 --> 00:04:34.500
want a comma.

75
00:04:34.500 --> 00:04:35.470
Every two numbers.

76
00:04:35.520 --> 00:04:42.540
If we were to put three commas here, then it will now think you want a comma every three numbers,

77
00:04:42.540 --> 00:04:47.790
which is the way that we format when we are going to group up numbers in North America.

78
00:04:48.150 --> 00:04:51.090
So let's run this and see, yeah, that's what we want.

79
00:04:51.420 --> 00:04:55.230
Incidentally, let's see what happens if we leave off this leading.

80
00:04:55.590 --> 00:04:56.850
No sign, by the way.

81
00:04:57.870 --> 00:04:58.140
All right.

82
00:04:58.150 --> 00:04:59.560
So it's still figures it out.

83
00:04:59.580 --> 00:04:59.930
So the.

84
00:05:00.010 --> 00:05:04.990
Important part here is how many numbers, signs you have to the right of the comma.

85
00:05:05.740 --> 00:05:11.800
All right now we're missing the dollar sign so we can put that in now.

86
00:05:11.810 --> 00:05:16.870
Typically, you'll see when people are specifying these format strings that they will have the leading

87
00:05:17.110 --> 00:05:20.680
numbers sign here just so that it looks like, you know, kind of like.

88
00:05:20.920 --> 00:05:21.880
Correct, right?

89
00:05:22.300 --> 00:05:25.300
Even though technically we don't necessarily need it.

90
00:05:25.360 --> 00:05:26.440
Well, let's let's see.

91
00:05:26.440 --> 00:05:27.130
Do we need it?

92
00:05:27.310 --> 00:05:28.540
I'm not even sure if we need it.

93
00:05:30.710 --> 00:05:31.520
No, we didn't.

94
00:05:31.820 --> 00:05:33.140
But that looks kind of weird.

95
00:05:33.380 --> 00:05:38.420
And so I think typically just to keep things a little more normal looking, we just put that leading

96
00:05:38.420 --> 00:05:39.440
no sign there.

97
00:05:39.800 --> 00:05:40.040
All right.

98
00:05:40.070 --> 00:05:42.560
And so there's our dollar sign and look at that.

99
00:05:42.560 --> 00:05:49.430
We're back to having a well formatted monetary value for North America, at least now.

100
00:05:49.610 --> 00:05:56.810
If this were all that you were going to do, this would, in my opinion, be inferior to just using

101
00:05:56.810 --> 00:06:02.000
the get currency instance because the get currency instance is way smarter.

102
00:06:02.030 --> 00:06:07.400
There are a few other things that we still haven't even specified, like how to handle if this value

103
00:06:07.400 --> 00:06:08.630
is negative.

104
00:06:08.870 --> 00:06:15.800
And then obviously also this decimal format is quite limited in that it only knows how to format for

105
00:06:15.800 --> 00:06:16.700
North America.

106
00:06:17.030 --> 00:06:23.840
Whereas if we do it this way, right out of the box, you get a formatter for pretty much every place

107
00:06:23.840 --> 00:06:28.670
in the world or virtually every place in the world, and you don't even have to know those rules.

108
00:06:28.730 --> 00:06:31.970
You can just use it and it will do the right thing.

109
00:06:32.000 --> 00:06:39.280
However, let's say that we do want it to display a little differently when the value is negative.

110
00:06:39.290 --> 00:06:45.200
You may be familiar with some, I guess, accounting standards, I suppose, where negative values will

111
00:06:45.200 --> 00:06:47.150
be shown in parentheses.

112
00:06:47.390 --> 00:06:51.570
So to do that, what we can do is put a semicolon here.

113
00:06:51.590 --> 00:06:57.440
And so what this sets us up for is to say everything to the left of the semicolon is how I want you

114
00:06:57.440 --> 00:07:00.470
to display things that are values that are positive.

115
00:07:00.710 --> 00:07:04.520
And then everything to the right is how I want you to display things that are negative.

116
00:07:04.730 --> 00:07:09.890
Now, thankfully for the negative case, you don't have to restate every single thing.

117
00:07:10.100 --> 00:07:14.570
You can just say the parts that you want to be done differently when it is negative.

118
00:07:14.570 --> 00:07:19.070
And in this case, all we want differently is to put it in parentheses.

119
00:07:19.310 --> 00:07:22.040
Now you do have to repeat the dollar sign, though.

120
00:07:22.370 --> 00:07:29.750
So if we do a dollar sign and then parentheses and then just one, no sign and that's all we need,

121
00:07:29.990 --> 00:07:32.600
the rest of the formatting rules will be retained.

122
00:07:32.990 --> 00:07:34.370
So let's see what that looks like.

123
00:07:34.380 --> 00:07:34.760
Oh, well.

124
00:07:35.120 --> 00:07:37.460
Well, first, let's just make sure we didn't break anything.

125
00:07:37.460 --> 00:07:38.600
So let's just run this.

126
00:07:38.870 --> 00:07:41.000
So obviously, our balance is not negative.

127
00:07:41.000 --> 00:07:43.520
So we're we should still see the same thing which we do.

128
00:07:43.550 --> 00:07:47.000
So we didn't break anything now to make this balance negative.

129
00:07:47.150 --> 00:07:53.720
The easiest thing we can do is just call one of the many additional methods on the big decimal class.

130
00:07:54.080 --> 00:07:56.270
There's a method on here called Negate.

131
00:07:57.620 --> 00:08:00.680
And it just flips the sign of the No.

132
00:08:00.980 --> 00:08:04.220
All right, so now if we run this, OK, cool.

133
00:08:04.490 --> 00:08:10.610
So now it's a negative number and that is shown here by putting the number in parentheses.

134
00:08:10.850 --> 00:08:14.450
OK, now we could have, you know, made this do whatever we wanted.

135
00:08:14.450 --> 00:08:19.940
But this is pretty standard stuff and it retained the formatting and the fact that we want to show two

136
00:08:19.940 --> 00:08:21.500
decimal places, by the way.

137
00:08:21.590 --> 00:08:24.080
So let's say we wanted to show four decimal places.

138
00:08:24.080 --> 00:08:27.500
For some reason we can do that to split point.

139
00:08:27.740 --> 00:08:29.660
And then for no sign.

140
00:08:29.660 --> 00:08:31.400
So let's run that, OK?

141
00:08:31.430 --> 00:08:35.330
So there's that or one decimal place.

142
00:08:37.350 --> 00:08:44.110
All right, now with the one decimal place, it's not showing the decimal point at all because with

143
00:08:44.150 --> 00:08:50.790
rounding rules and everything that turned out to be zero, if we want to force it to always show two

144
00:08:51.000 --> 00:08:53.640
decimal places, even if the value is zero.

145
00:08:54.480 --> 00:08:57.060
Actually, this is a good this is a good scenario here.

146
00:08:57.540 --> 00:09:03.420
What we can do is instead of using the number sign here after the period, we can use two zeros here.

147
00:09:03.750 --> 00:09:07.800
So this means to pad that area that many digits.

148
00:09:07.810 --> 00:09:14.370
So give us padding of two decimal places, no matter whether there's a value there or not.

149
00:09:14.610 --> 00:09:21.210
So now if we run this, there you go and we get the to right the point zero two there.

150
00:09:21.360 --> 00:09:26.370
So now there will always be these two decimal places, whether we need them or not.

151
00:09:26.670 --> 00:09:29.760
Incidentally, we could do this to the left as well.

152
00:09:29.760 --> 00:09:31.230
We could pad to the left.

153
00:09:31.240 --> 00:09:33.270
Now it'll look a little weird with money.

154
00:09:33.510 --> 00:09:35.850
I'm going to turn off the negation here.

155
00:09:37.200 --> 00:09:38.880
Otherwise it'll start to look a little busy.

156
00:09:39.000 --> 00:09:40.710
So let's see here.

157
00:09:40.710 --> 00:09:50.760
We can pad this with zeros, and the way I'll do this is let's see one two three four five six seven

158
00:09:51.390 --> 00:09:57.930
and we can keep the eight nine 10 and we can keep the commas in there as well.

159
00:09:57.940 --> 00:09:59.430
So let's see what this does.

160
00:10:00.090 --> 00:10:01.440
It's going to look a little weird, but.

161
00:10:02.430 --> 00:10:08.100
All right, so there we go, so now we've got some padding in here, so what we have said is we want

162
00:10:08.310 --> 00:10:18.030
a field that is one two three four five six seven eight nine 10 digits padded to the left of the decimal

163
00:10:18.390 --> 00:10:21.870
one two three four five six seven eight nine 10 right.

164
00:10:22.110 --> 00:10:26.820
And every three digits will be grouped separated by a comma.

165
00:10:26.940 --> 00:10:30.960
So there you can see that we were able to put some padding in there, right?

166
00:10:31.440 --> 00:10:36.570
OK, and then let's put this back to something a little more normal looking, though.

167
00:10:37.860 --> 00:10:38.220
All right.

168
00:10:38.490 --> 00:10:45.900
And then let's also say that we want to reproduce this percentage formatting here.

169
00:10:45.900 --> 00:10:47.550
So let's make another formatter.

170
00:10:50.480 --> 00:10:53.240
And I'm going to call this four percent formatter.

171
00:10:56.720 --> 00:11:06.040
And our pattern here will be no sign and a percent sign, because that is the pattern we'd want a digit

172
00:11:06.050 --> 00:11:09.830
and then and that while some digits and then percent sign.

173
00:11:10.400 --> 00:11:16.280
All right now to use this or to test this out, rather, we'll just make another system that out.

174
00:11:17.780 --> 00:11:25.070
And let's just see, so we'll have to use the the new percent format or PDF format format, and then

175
00:11:25.070 --> 00:11:26.480
we just give it a value.

176
00:11:26.690 --> 00:11:30.530
So let's just give it a double of point zero eight.

177
00:11:30.920 --> 00:11:31.330
All right.

178
00:11:31.340 --> 00:11:34.170
So we want it to form at that point zero eight.

179
00:11:34.190 --> 00:11:35.510
So let's see what this does.

180
00:11:36.870 --> 00:11:37.290
There you go.

181
00:11:37.320 --> 00:11:37.980
Look at that.

182
00:11:38.370 --> 00:11:43.950
It turned it into an eight percent automatically for us, so the formatting rules know that if you're

183
00:11:43.950 --> 00:11:50.550
using this percent sign here that you want to take that value and multiply it times 100, which is to

184
00:11:50.550 --> 00:11:55.710
say to move the decimal point over to the right by two places, right?

185
00:11:55.710 --> 00:11:57.750
And so then you end up with an eight.

186
00:11:58.230 --> 00:12:01.710
And now that's interpreted as anything that's printed as an eight percent.

187
00:12:02.370 --> 00:12:03.690
So pretty straightforward.

188
00:12:03.870 --> 00:12:07.200
And then, you know, we can do all the other things that we were doing earlier.

189
00:12:07.200 --> 00:12:13.470
So if you happened to have an excessively large number there and you wanted it to be formatted, you

190
00:12:13.470 --> 00:12:15.630
could you could do that still.

191
00:12:16.470 --> 00:12:21.840
Now, in this case, that's not going to do anything because the number itself isn't big enough.

192
00:12:21.990 --> 00:12:27.090
But I suppose if we had a number that was big enough, let's see what that does.

193
00:12:27.810 --> 00:12:28.380
There you go.

194
00:12:29.070 --> 00:12:32.550
Two hundred seventy three thousand seven hundred eight percent.

195
00:12:33.270 --> 00:12:35.940
So just a few simple things that we can do.

196
00:12:35.940 --> 00:12:41.340
So you can read more about all of the additional little symbols and things.

197
00:12:41.340 --> 00:12:46.890
But my point here was mostly to introduce you to the fact that if you didn't like the formatting that

198
00:12:46.890 --> 00:12:53.700
you were getting out of the box, you can customize that formatting yourself and pretty, pretty nice

199
00:12:53.700 --> 00:12:54.360
little format.

200
00:12:54.780 --> 00:12:55.620
So let's see.

201
00:12:55.620 --> 00:13:00.670
Now in the next lesson, we're going to look at yet another way to format as well.

202
00:13:00.690 --> 00:13:02.790
So stay tuned and I'll see you in the next one.
