1
00:00:00,600 --> 00:00:03,480
All right, now, I've got another scenario for you.

2
00:00:04,890 --> 00:00:12,960
What if you wanted to do some other type of operation on your data, like the salary field or the entire

3
00:00:12,960 --> 00:00:21,250
person instances or whatever some other operation that doesn't come pre-packaged with the collectors?

4
00:00:21,300 --> 00:00:21,520
Right?

5
00:00:21,540 --> 00:00:24,060
So in other words, like here, we're doing an averaging.

6
00:00:24,270 --> 00:00:29,920
Previously, we were I didn't run this, but you know, previously we were using these something long.

7
00:00:29,940 --> 00:00:30,270
Right?

8
00:00:30,540 --> 00:00:35,730
These are all methods that exist on the collector's class, right?

9
00:00:35,970 --> 00:00:43,260
So you've got the grouping by and counting and averaging in all kinds of things that you can do here,

10
00:00:43,260 --> 00:00:43,590
right?

11
00:00:44,040 --> 00:00:50,820
But what if you wanted to do some other type of operation that out of the box you could not do with

12
00:00:50,820 --> 00:00:51,810
the collectors in?

13
00:00:51,870 --> 00:00:53,760
And I've got the perfect example here.

14
00:00:54,030 --> 00:00:55,560
Let me let me get rid of that.

15
00:00:55,740 --> 00:01:02,400
So bear in mind that we have been adding up salaries for the last several lessons, right?

16
00:01:02,820 --> 00:01:09,240
And I've mentioned this before, but I'll bring it up again in general when we are doing math on money.

17
00:01:09,750 --> 00:01:16,860
We actually don't want to be using just simple addition and subtraction capabilities that are built

18
00:01:16,860 --> 00:01:18,600
into Java, right?

19
00:01:18,600 --> 00:01:28,800
Like, you don't want to just take two numbers and just do this, generally speaking, and we learned

20
00:01:28,800 --> 00:01:31,440
way back in the numbers module.

21
00:01:31,530 --> 00:01:39,570
The reason for this is because you open yourself up to rounding errors, and those rounding errors exist

22
00:01:39,570 --> 00:01:42,900
because of the way that all computer languages.

23
00:01:42,930 --> 00:01:44,430
This is not a Java problem.

24
00:01:44,700 --> 00:01:53,880
All computer languages and all computer systems store floating point values and by floating point values.

25
00:01:53,880 --> 00:01:56,530
I'm referring to the decimal places here, right?

26
00:01:56,550 --> 00:01:58,380
Point two three point three eight.

27
00:01:58,590 --> 00:02:06,060
We learned way back in the numbers module that by default, computer languages and systems represent

28
00:02:06,060 --> 00:02:14,340
these floating point values in binary decimal format and inherent to how that format works.

29
00:02:14,790 --> 00:02:20,720
There are going to be rounding errors for all but the most straightforward values, right?

30
00:02:20,740 --> 00:02:27,720
So like a point five that you won't have any rounding errors with that, but values that don't line

31
00:02:27,720 --> 00:02:32,370
up perfectly with the binary bits for a decimal point values.

32
00:02:32,730 --> 00:02:35,250
They're going to have to be approximations, right?

33
00:02:35,640 --> 00:02:41,160
You can get closer and closer to the real value with the more bits that that can be allocated, which

34
00:02:41,160 --> 00:02:46,410
is why you know you've got double types and things of that sort.

35
00:02:46,680 --> 00:02:51,810
But it's always going to end up being an approximation for most decimal values, right?

36
00:02:52,080 --> 00:02:58,770
And ultimately, your money math calculations are almost guaranteed to be off.

37
00:02:58,800 --> 00:02:59,280
OK.

38
00:03:00,180 --> 00:03:01,520
And so you can't do that.

39
00:03:01,530 --> 00:03:03,250
You have to use big decimal.

40
00:03:03,300 --> 00:03:03,690
Right?

41
00:03:04,410 --> 00:03:05,130
We learned that.

42
00:03:05,130 --> 00:03:10,170
So the rule of thumb in general is anytime you're doing many math, use big decimal.

43
00:03:10,830 --> 00:03:16,980
The only reason that I didn't care about using big decimal up until now for what we've been doing here

44
00:03:16,980 --> 00:03:17,760
is because.

45
00:03:18,060 --> 00:03:26,970
Let me jump back over to the spreadsheet is because the data that we have here happens to be such that

46
00:03:26,970 --> 00:03:31,350
it's all nice round numbers right there, all integers essentially, right?

47
00:03:32,010 --> 00:03:36,450
And so we didn't need to worry about decimal places and things of that sort.

48
00:03:36,720 --> 00:03:45,930
Not a big deal, but if there had been decimal places in these values and we still wanted actual accurate

49
00:03:45,930 --> 00:03:50,710
answers, which I'm sure we would, we could not do what we've been doing so far.

50
00:03:50,730 --> 00:03:51,840
It would not work.

51
00:03:51,840 --> 00:03:53,610
We'd be getting bad answers.

52
00:03:54,030 --> 00:04:01,880
So I want us to pretend as though this salary column has floating point values in it.

53
00:04:01,890 --> 00:04:06,390
If I thought about this many, many, many, many lessons ago, I might have found a better data set

54
00:04:06,390 --> 00:04:09,720
where we actually had floating point values for the salaries.

55
00:04:09,840 --> 00:04:13,770
I mean, I do see that we've got these things here, but this is talking about age.

56
00:04:14,100 --> 00:04:16,310
I could use it as numbers, but that's all right.

57
00:04:16,320 --> 00:04:17,670
We'll just pretend.

58
00:04:18,180 --> 00:04:18,470
All right.

59
00:04:18,480 --> 00:04:20,880
So so that's what we're going to do in this lesson.

60
00:04:20,940 --> 00:04:25,770
We're going to pretend like these salaries here could have floating point values in them.

61
00:04:26,010 --> 00:04:33,390
And then we're going to rewrite our code a little bit to handle that situation appropriately by using

62
00:04:33,390 --> 00:04:34,230
big decimals.

63
00:04:36,120 --> 00:04:44,760
So the issue, though, is that there are no methods built in to the collector's class for doing math

64
00:04:44,760 --> 00:04:46,180
with big decimal.

65
00:04:46,210 --> 00:04:49,500
OK, so let me let me delete these guys here.

66
00:04:51,000 --> 00:04:51,360
Right.

67
00:04:52,170 --> 00:04:57,420
The collectors class simply does not give us any out of the box way to do that.

68
00:04:57,540 --> 00:05:05,520
So we'd have to come up with our own way of using the Streams API working within this framework here.

69
00:05:05,760 --> 00:05:08,490
But doing the math using big decimal.

70
00:05:08,610 --> 00:05:10,500
That's what we're going to to learn here.

71
00:05:10,530 --> 00:05:10,860
OK.

72
00:05:11,370 --> 00:05:16,590
So the first thing we're going to need to do, though, is we're going to want to model the salary as

73
00:05:16,590 --> 00:05:17,640
a big decimal.

74
00:05:18,420 --> 00:05:25,530
Now, technically, there might be some ways that we could avoid doing this because we could have opportunities

75
00:05:25,530 --> 00:05:29,640
to map the long to a big decimal later in the pipeline, so to speak.

76
00:05:29,850 --> 00:05:35,130
But I'm inclined to go ahead and just model it more accurately right from the start.

77
00:05:35,280 --> 00:05:37,030
And so that's what we're going to do first.

78
00:05:37,060 --> 00:05:37,410
OK.

79
00:05:37,800 --> 00:05:43,890
So instead of using a long for the salary, let's use a big decimal.

80
00:05:44,640 --> 00:05:48,420
And now that's going to cause some errors like we've got this one down here now.

81
00:05:48,960 --> 00:05:50,130
Let's see so long.

82
00:05:50,130 --> 00:05:51,300
That part's long.

83
00:05:51,480 --> 00:05:56,610
So what we were doing here is that we were taking what is going to be a string, right?

84
00:05:56,970 --> 00:05:59,550
And we were converting it into a long.

85
00:05:59,820 --> 00:06:05,460
Now, if you'll recall, when we learned about big decimal, you may recall that you can actually just

86
00:06:05,460 --> 00:06:08,790
create a big decimal or initialize the big decimal from a string.

87
00:06:08,790 --> 00:06:15,450
And in fact, quite often that is the most accurate way to create a big decimal is by using a string.

88
00:06:15,450 --> 00:06:21,270
Because when you use a string, you ensure that there's no possibility for rounding errors in interpreting

89
00:06:21,270 --> 00:06:24,990
that string in some intermediate number type, right?

90
00:06:25,020 --> 00:06:27,420
You just go straight from the string to the big decimal.

91
00:06:27,510 --> 00:06:29,850
You won't lose any precision or anything like that.

92
00:06:30,090 --> 00:06:37,140
So what we can do here is actually just get rid of the long that pass long and instead we can just do

93
00:06:37,140 --> 00:06:39,510
a new big decimal.

94
00:06:41,590 --> 00:06:42,280
Like so.

95
00:06:42,460 --> 00:06:42,820
All right.

96
00:06:43,210 --> 00:06:48,600
So this is actually about the best way to convert a string to a big decimal anyway.

97
00:06:49,800 --> 00:06:51,360
All right, so we've got that now.

98
00:06:52,170 --> 00:06:57,930
Then down here, we've got an error now, so now we're trying to do averaging, but this is now trying

99
00:06:57,930 --> 00:07:02,910
to do an averaging of along on a field that is not a long right.

100
00:07:02,910 --> 00:07:04,420
It is now a big decimal.

101
00:07:04,450 --> 00:07:10,020
OK, so let's go back to pretending like we wanted to sum up all of those salaries, OK?

102
00:07:10,410 --> 00:07:12,300
So what can we do here?

103
00:07:12,780 --> 00:07:14,970
Well, we've actually learned this technique.

104
00:07:15,240 --> 00:07:23,040
Many lessons that go as one of the many methods on the collector's class and the method we're going

105
00:07:23,040 --> 00:07:26,280
to make use of now is a more generic method.

106
00:07:26,490 --> 00:07:31,770
It is the reduced function right of the famous map reduce pattern, right?

107
00:07:31,890 --> 00:07:34,830
So we're going to look at the reduced function here.

108
00:07:34,830 --> 00:07:40,500
And if you recall, when we learned Reduce previously, we learned that we could actually use reduced

109
00:07:40,500 --> 00:07:45,040
to do all of these things that we're that we've been doing so far right.

110
00:07:45,210 --> 00:07:51,240
You can use reduce the find the minimum value, the maximum value, you can use it to add or subtract

111
00:07:51,240 --> 00:07:51,780
or whatever.

112
00:07:52,410 --> 00:08:00,630
It's like this generic pattern any any time you want to do any sort of accumulation calculations, right?

113
00:08:00,990 --> 00:08:05,040
And so we can use it here, and it is quite appropriate, in fact.

114
00:08:05,070 --> 00:08:08,430
So the first thing I'm going to do is just replace that with reducing.

115
00:08:09,950 --> 00:08:14,900
And before I even finished typing that out, I will just acknowledge that look at what we've got here

116
00:08:14,900 --> 00:08:20,660
now, so we've got a few different, you know, overloaded versions of the reducing function.

117
00:08:20,840 --> 00:08:24,950
We've got one version that just takes a binary operator.

118
00:08:25,040 --> 00:08:31,190
And again, that's really just the lambda or a method reference to a method that can take two values,

119
00:08:31,190 --> 00:08:31,520
right?

120
00:08:32,300 --> 00:08:37,730
And then you're going to implement, for example, a lambda expression that will take those two values

121
00:08:37,730 --> 00:08:44,020
and essentially add them, add them up, write in whatever way makes sense for those value types, though,

122
00:08:44,040 --> 00:08:45,500
to be added, right?

123
00:08:45,710 --> 00:08:47,300
So that's one way that you can do it.

124
00:08:47,870 --> 00:08:51,800
There's another version here that can take an identity.

125
00:08:51,800 --> 00:08:57,290
And if you'll recall, it's a value such that when you do whatever your operation will be, such as

126
00:08:57,290 --> 00:09:03,980
adding, If you add one value to this identity value, you'll get back that original value again.

127
00:09:04,170 --> 00:09:12,080
So if you're doing adding your identity value would be zero because x plus zero equals X write x plus

128
00:09:12,080 --> 00:09:15,500
zero equals X is an identity type of operation, right?

129
00:09:15,740 --> 00:09:22,190
If you were doing multiplication, your identity value would presumably be one right because x times

130
00:09:22,190 --> 00:09:23,660
one equals X.

131
00:09:23,900 --> 00:09:30,350
So it's whatever value for a given operation would result in that original value again.

132
00:09:30,440 --> 00:09:30,950
OK.

133
00:09:30,980 --> 00:09:38,090
And then this final overloaded version of the reducing method goes one step further.

134
00:09:39,830 --> 00:09:44,420
And this is actually the version that we are going to make use of in this particular case.

135
00:09:44,660 --> 00:09:48,260
So again, the first parameter is the identity.

136
00:09:48,290 --> 00:09:48,720
OK.

137
00:09:48,740 --> 00:09:52,730
So in our case, if we're adding up salaries, it's really going to just be zero.

138
00:09:54,080 --> 00:09:59,930
But the second parameter that it takes is a function that does a mapping.

139
00:10:00,230 --> 00:10:04,150
And what this is useful for is to say, all right.

140
00:10:04,520 --> 00:10:09,570
In this particular case, all of our records are really of type person.

141
00:10:09,590 --> 00:10:09,980
Right?

142
00:10:10,280 --> 00:10:12,370
That's what we are actually dealing with.

143
00:10:12,380 --> 00:10:15,080
Fundamentally, we're dealing with persons, right?

144
00:10:15,470 --> 00:10:20,150
Well, we don't want to add up one person with another person.

145
00:10:20,150 --> 00:10:22,280
That's that doesn't make sense, right?

146
00:10:22,580 --> 00:10:29,720
We actually want to add up one field of a person to other to two other instances of that same field

147
00:10:29,720 --> 00:10:30,590
of person, right?

148
00:10:30,830 --> 00:10:33,950
In our case, the salary field of a person.

149
00:10:34,250 --> 00:10:40,970
So we can use this function here to do that mapping right because it's going to give us by default,

150
00:10:40,970 --> 00:10:41,540
people.

151
00:10:41,750 --> 00:10:46,610
So we want to convert people into salaries, OK?

152
00:10:46,880 --> 00:10:48,800
And so that's what we would use that function for.

153
00:10:48,800 --> 00:10:50,660
You'll see what I mean in just a moment here.

154
00:10:50,780 --> 00:10:55,520
And then finally, and I'm sorry, that's kind of running off the screen here, but the final parameter

155
00:10:55,520 --> 00:11:01,160
to this third version of reducing would be our binary operator again, where it's going to give us to

156
00:11:01,370 --> 00:11:05,840
two values and then we can do whatever thing we want to do with those two values.

157
00:11:05,870 --> 00:11:08,630
Okay, so let's go ahead and try this out and see what it will look like.

158
00:11:08,660 --> 00:11:09,020
OK.

159
00:11:09,470 --> 00:11:09,790
All right.

160
00:11:09,800 --> 00:11:15,740
So the first bit is the identity, the second bit is a mapping and the third bit is going to be for

161
00:11:15,740 --> 00:11:17,920
our case, a lambda expression, OK?

162
00:11:18,200 --> 00:11:19,590
So the identity?

163
00:11:19,850 --> 00:11:21,380
Now we're going to be dealing on.

164
00:11:21,380 --> 00:11:24,420
Sorry, I forgot to actually say reducing there.

165
00:11:24,440 --> 00:11:26,270
OK, so the first bit is an identity.

166
00:11:26,420 --> 00:11:29,570
Now this is ultimately going to be dealing with big decimals.

167
00:11:29,570 --> 00:11:32,750
So we don't want to just say like zero.

168
00:11:32,780 --> 00:11:33,230
OK?

169
00:11:33,950 --> 00:11:36,290
Because that would be an integer.

170
00:11:36,290 --> 00:11:38,210
And that's not what we are dealing with here.

171
00:11:38,210 --> 00:11:39,800
We're dealing with big decimals.

172
00:11:40,070 --> 00:11:48,020
So what we can do is we can create a big decimal version of the zero right and and nicely enough.

173
00:11:48,200 --> 00:11:54,290
You may recall that the big decimal class actually has some predefined constants on it, and one of

174
00:11:54,290 --> 00:11:55,490
them is zero.

175
00:11:55,520 --> 00:11:57,650
So we've got a zero, a one and a 10, right?

176
00:11:57,920 --> 00:11:59,930
So we can actually just do that.

177
00:12:00,200 --> 00:12:06,230
OK, so there's our identity for the adding operation that we are about to do, right?

178
00:12:06,620 --> 00:12:09,470
And then the second bit is our mapping function.

179
00:12:09,650 --> 00:12:12,770
And look, we've already got a built in mapping function right here.

180
00:12:12,890 --> 00:12:14,780
Person salary, right?

181
00:12:14,790 --> 00:12:17,870
So just calling the salary method of the person class.

182
00:12:18,110 --> 00:12:18,560
OK.

183
00:12:18,740 --> 00:12:22,010
And so we don't even have to type anything there that's already done for us.

184
00:12:22,010 --> 00:12:28,640
So we're saying that we're going to be working with the salary field of each person instance that's

185
00:12:28,640 --> 00:12:31,910
going to be dropping into the pipeline here, right?

186
00:12:32,910 --> 00:12:37,530
And then finally, we need our what did they call it, binary operator, right?

187
00:12:37,680 --> 00:12:45,450
So a lambda expression that will take two values and then let us do some kind of operation on those

188
00:12:45,450 --> 00:12:46,500
two values, right?

189
00:12:46,770 --> 00:12:54,900
And so here we can assume that we're going to receive an A and a B and then we can map those to something.

190
00:12:55,020 --> 00:13:00,330
So now these this and this B are going to be instances of big decimal.

191
00:13:00,600 --> 00:13:07,920
And so if you want to add two big decimals together, you you can't just do this A-plus, be right.

192
00:13:08,520 --> 00:13:09,650
These are not integers.

193
00:13:09,660 --> 00:13:11,760
These are big decimals, right?

194
00:13:12,000 --> 00:13:18,270
To add big decimals together, you have to actually, they are actual objects and therefore they inherit

195
00:13:18,270 --> 00:13:19,150
methods, right?

196
00:13:19,180 --> 00:13:24,630
And so there is an add method of the big decimal class, right?

197
00:13:24,810 --> 00:13:30,420
And so we can do this a dot ad and then you pass in the B, OK?

198
00:13:30,780 --> 00:13:38,430
And so this result now will be carried forth if you please go back and watch the the lesson where I

199
00:13:38,430 --> 00:13:41,160
taught explicitly how reduce works.

200
00:13:41,160 --> 00:13:45,630
I don't want to go through the whole entire thing explicitly again, but I'll say very briefly here.

201
00:13:45,780 --> 00:13:50,910
The way that the reducing function generally works is for a list of values.

202
00:13:51,180 --> 00:13:59,910
It will take essentially two values in that list and B, in this case, it will execute the operation,

203
00:13:59,910 --> 00:14:07,890
which in this case is adding it will take that result and then it will go to the next value in the list

204
00:14:08,280 --> 00:14:13,530
and then it will do that operation again with the result, plus the next value in the list, right?

205
00:14:13,680 --> 00:14:16,890
So you always result in next value.

206
00:14:17,130 --> 00:14:22,170
Do that operation, take that result, go down again, result in the next value and it'll just keep

207
00:14:22,170 --> 00:14:24,660
doing that until it gets through the entire list.

208
00:14:24,690 --> 00:14:25,110
OK.

209
00:14:26,590 --> 00:14:28,330
And so that's how that would work.

210
00:14:29,080 --> 00:14:34,620
And then when all of that reducing is done, you're going to end up with one big one.

211
00:14:34,990 --> 00:14:37,360
One big, big decimal value.

212
00:14:38,140 --> 00:14:43,030
I didn't mean for that punter to come up, but you're going to end up with one big, big decimal value.

213
00:14:43,390 --> 00:14:47,950
And then this bit here, this number format, we don't even have to change anything.

214
00:14:48,430 --> 00:14:54,190
It can accept that big decimals, as we also learned back in the numbers module and it can format that

215
00:14:54,190 --> 00:14:54,880
big decimal.

216
00:14:54,880 --> 00:14:56,560
So we don't even need to change anything there.

217
00:14:56,740 --> 00:14:57,490
So look at that.

218
00:14:57,610 --> 00:15:04,150
Actually, all we needed to change was the data type here and then how we're actually initializing that

219
00:15:04,150 --> 00:15:05,800
field on new persons.

220
00:15:06,040 --> 00:15:14,150
And then just this one line right there instead of using the collectors died something long.

221
00:15:14,410 --> 00:15:17,650
We're now using collectors that reducing notice again.

222
00:15:17,650 --> 00:15:22,180
I don't need to specify the word collectors here because it's being statically imported for us.

223
00:15:22,180 --> 00:15:25,390
This reducing method is a static method.

224
00:15:25,720 --> 00:15:26,170
OK.

225
00:15:28,480 --> 00:15:33,340
But yeah, that's how this is working, so we should be able to run this and it hopefully won't blow

226
00:15:33,340 --> 00:15:34,930
up, so let's try it and see.

227
00:15:38,980 --> 00:15:45,250
Yeah, it didn't blow up, and I think we're getting what appeared to be real real values here, right?

228
00:15:45,910 --> 00:15:48,850
So again, in fact, I remember these numbers a little bit.

229
00:15:48,850 --> 00:15:53,650
The women of Arkansas were getting one point ninety three billion and the men were getting one point

230
00:15:53,680 --> 00:15:54,340
nine to seven.

231
00:15:54,340 --> 00:15:57,220
So yeah, we're still getting the same same values, right?

232
00:15:58,480 --> 00:16:04,330
So again, I just want to point out in this particular case, because of the source data that we have,

233
00:16:04,480 --> 00:16:12,190
we didn't technically have to use big decimals here, and it was actually more lightweight not to use

234
00:16:12,190 --> 00:16:19,270
big decimals and to use longs in our particular case here, because we don't have floating point or

235
00:16:19,270 --> 00:16:23,830
fractional values for the salaries in our source data and by source data.

236
00:16:23,840 --> 00:16:27,030
I mean, you know, the spreadsheet data here, right?

237
00:16:27,040 --> 00:16:27,760
We don't have that.

238
00:16:28,030 --> 00:16:36,230
But if we did have that and we were doing this kind of math on salaries, this is the way to do this.

239
00:16:36,250 --> 00:16:36,620
OK?

240
00:16:36,760 --> 00:16:42,430
You'd want to most likely use reducing and you definitely want to use big decimals.

241
00:16:42,460 --> 00:16:48,820
OK, now I also showed in the lessons where we were learning about reducing, and you can use reducing

242
00:16:48,820 --> 00:16:50,620
for more than just math, right?

243
00:16:50,800 --> 00:16:56,940
I think we did an example where we were appending and underscore something like that two strings, right?

244
00:16:56,950 --> 00:17:03,730
So any time you're accumulating things right, you're like adding on right, whether it's numerically

245
00:17:03,730 --> 00:17:08,290
or just in terms of strings or building something bigger and bigger.

246
00:17:08,530 --> 00:17:11,210
That's when you can use reducing OK.

247
00:17:12,390 --> 00:17:16,950
And actually, let me let me even say this doesn't have to be building things bigger and bigger, it

248
00:17:16,950 --> 00:17:20,640
could be taking apart, I suppose, as well, right, if you're chipping away.

249
00:17:20,730 --> 00:17:25,350
If you start with a big value and then you're working, you know, chipping away at it, you can do

250
00:17:25,350 --> 00:17:26,750
reducing for that as well, right?

251
00:17:26,880 --> 00:17:31,020
So anytime you're doing an operation in a kind of recursive way.

252
00:17:31,650 --> 00:17:32,100
All right.

253
00:17:32,580 --> 00:17:32,880
All right.

254
00:17:32,890 --> 00:17:35,610
So that was a really important one.

255
00:17:35,610 --> 00:17:41,910
I think please definitely make sure that if if if you didn't fully follow everything that I said here,

256
00:17:41,910 --> 00:17:44,670
please slow it down and watch it again.

257
00:17:45,180 --> 00:17:46,680
This is pretty important, right?

258
00:17:46,680 --> 00:17:53,610
Because you're going to encounter circumstances like this where the built in operations of the collectors

259
00:17:53,610 --> 00:17:57,570
class aren't going to directly give you what you need, right?

260
00:17:57,570 --> 00:18:04,230
And you're going to have to figure out a way to probably use reducing to indirectly come up with the

261
00:18:04,230 --> 00:18:06,240
exact operation that you're needing.

262
00:18:06,390 --> 00:18:09,300
And here's a great example of that.

263
00:18:09,810 --> 00:18:10,140
All right.

264
00:18:10,320 --> 00:18:12,180
So I will see you in the next one.
