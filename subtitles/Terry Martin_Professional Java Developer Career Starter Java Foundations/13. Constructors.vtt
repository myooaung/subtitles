WEBVTT
1
00:00:00.450 --> 00:00:00.730
Hey.

2
00:00:00.750 --> 00:00:06.130
Howdy, howdy, and welcome back in this lesson, we're going to talk about constructors.

3
00:00:06.150 --> 00:00:07.290
What are those?

4
00:00:08.190 --> 00:00:18.000
So for this conversation, we're going to continue with our person class that we created in the last

5
00:00:18.000 --> 00:00:18.570
video.

6
00:00:18.930 --> 00:00:22.970
I did a number of things in that video that I did not explain.

7
00:00:23.040 --> 00:00:27.630
And so now we're going to come back and actually try to understand a few parts of it.

8
00:00:27.940 --> 00:00:30.330
Well, I'll break this up into a few different videos, though.

9
00:00:30.810 --> 00:00:33.390
So constructors, what are constructors?

10
00:00:34.440 --> 00:00:42.390
Well, in our person class, we created this class called person and we modeled some of the properties

11
00:00:42.450 --> 00:00:45.240
of the person, the first name, last name and date of birth.

12
00:00:45.540 --> 00:00:49.290
Then we created a couple of things that look like methods here.

13
00:00:49.800 --> 00:00:53.890
We created this one on Line 10, but it doesn't really have anything in it.

14
00:00:53.910 --> 00:00:57.300
It's basically looking like an empty method, essentially.

15
00:00:57.750 --> 00:01:04.560
And then we have another one starting on from lines 13 through 17, and it does have a little bit inside

16
00:01:04.560 --> 00:01:05.010
of it.

17
00:01:05.370 --> 00:01:09.840
These two methods looking things are constructors.

18
00:01:10.110 --> 00:01:14.010
They basically are methods, but they're very, very special methods.

19
00:01:14.040 --> 00:01:16.410
They have a few interesting characteristics.

20
00:01:16.440 --> 00:01:19.050
First of all, they don't return anything.

21
00:01:19.050 --> 00:01:20.490
There's no return type.

22
00:01:20.730 --> 00:01:23.910
Real methods have a return type, always.

23
00:01:24.120 --> 00:01:30.870
And even if, well, even if a method doesn't return anything, it still has to declare a return type

24
00:01:30.870 --> 00:01:31.980
of void.

25
00:01:32.370 --> 00:01:37.590
That tells the compiler the Java system that this method won't return anything.

26
00:01:37.800 --> 00:01:42.390
But constructors are a little different, even though they basically are methods.

27
00:01:42.630 --> 00:01:47.220
They do not declare a return type and they don't return anything.

28
00:01:47.580 --> 00:01:57.570
The purpose of a constructor is essentially to allow us to initialize any properties as the object is

29
00:01:57.570 --> 00:01:58.420
getting created.

30
00:01:58.440 --> 00:02:02.730
So we'll go back to our conversation about classes and objects.

31
00:02:03.720 --> 00:02:06.690
Objects are built from classes.

32
00:02:06.720 --> 00:02:10.740
A class is a blueprint for how to build an object.

33
00:02:10.770 --> 00:02:11.250
OK.

34
00:02:11.340 --> 00:02:17.760
We can build objects by taking a class and then telling the system to build build an object from that

35
00:02:17.760 --> 00:02:18.390
class.

36
00:02:19.170 --> 00:02:26.610
We have an opportunity, or at least we can have an opportunity to initialize certain properties of

37
00:02:26.610 --> 00:02:29.040
an object as it's being created.

38
00:02:29.310 --> 00:02:31.110
Why might we want to do this?

39
00:02:32.310 --> 00:02:42.210
Well, typically when we are modeling concepts in a class such as a person, there may be properties

40
00:02:42.210 --> 00:02:51.330
of that class or of that concept such that it basically wouldn't even make sense for that, for that

41
00:02:51.360 --> 00:02:55.590
object to exist without certain properties being set on it.

42
00:02:55.830 --> 00:02:59.640
Let me give you an example or two in general.

43
00:03:00.240 --> 00:03:08.550
In the real world, there's usually no such thing as a person who doesn't have a name, right?

44
00:03:08.820 --> 00:03:15.240
For all intents and purposes, you know, maybe when the rock finger prints changed his name to a symbol

45
00:03:15.240 --> 00:03:18.240
for a short time, nobody knew what to call him anymore.

46
00:03:18.390 --> 00:03:21.900
So people started calling him the artist, formerly known as Prince.

47
00:03:22.050 --> 00:03:25.140
Even then, though, that became essentially his name, right?

48
00:03:25.350 --> 00:03:28.410
And the symbol arguably was his stage name.

49
00:03:28.470 --> 00:03:34.500
So for all intents and purposes, there's probably no such thing as a person with no name, at least

50
00:03:34.500 --> 00:03:37.500
not a person who interacts with other people.

51
00:03:38.520 --> 00:03:49.170
So in a program that is modeling a person, it may not make sense to allow a person object to be created

52
00:03:49.260 --> 00:03:51.180
without having a name.

53
00:03:51.810 --> 00:03:59.280
If that is the case, we may want to almost force that rule into our code.

54
00:03:59.610 --> 00:04:06.810
That would mean that at the time that we are creating the object or having Java create the object,

55
00:04:07.260 --> 00:04:13.680
we must supply a name for the object that is about to be created.

56
00:04:13.830 --> 00:04:14.320
OK.

57
00:04:15.510 --> 00:04:23.460
Similarly, if we were modeling cars, it may not be permissible to create an object that represents

58
00:04:23.460 --> 00:04:28.710
a car without specifying a make and a model, perhaps even a year.

59
00:04:29.010 --> 00:04:33.090
Perhaps you don't have a valid car if you don't have those things.

60
00:04:33.120 --> 00:04:42.600
OK, so constructors are what would allow us to to ensure that these properties are being set.

61
00:04:43.620 --> 00:04:47.300
So here in this program, we have two types of constructors.

62
00:04:47.310 --> 00:04:52.950
We have a a what's called a no ARG default constructor, no ARG.

63
00:04:53.040 --> 00:04:56.570
I use this term in the Hello World Program ARG.

64
00:04:56.580 --> 00:04:57.960
I said it means argument.

65
00:04:58.110 --> 00:04:59.850
What that basically means is.

66
00:05:00.150 --> 00:05:06.060
Data that we can pass to a method or, in this case, a constructor, OK?

67
00:05:06.270 --> 00:05:09.870
Data or information that we can pass in arguments.

68
00:05:10.350 --> 00:05:16.630
So we have a no ARG constructor because this constructor here doesn't take any inputs at all.

69
00:05:16.650 --> 00:05:23.280
These parentheses here with nothing in them, tells us that there are no inputs needed or even accepted.

70
00:05:24.030 --> 00:05:29.710
Then we have another constructor, though that does take three arguments a first name or last name and

71
00:05:29.710 --> 00:05:30.600
a date of birth.

72
00:05:30.900 --> 00:05:38.880
And this is saying that when you create a person, you can, if you want, pass in a first name, last

73
00:05:38.880 --> 00:05:39.930
name and date of birth.

74
00:05:41.100 --> 00:05:46.410
So we have two ways of creating a person here, we could just create a person and not pass anything

75
00:05:46.410 --> 00:05:50.760
in or we could create a person and pass in the first name, last name and date of birth.

76
00:05:51.360 --> 00:05:57.660
Technically speaking, if I were writing a proper business application and I knew that I had a business

77
00:05:57.660 --> 00:06:06.300
rule that a person cannot validly exist without a name and date of birth, I would likely make this

78
00:06:06.420 --> 00:06:12.100
no our default constructor private so that no one could even bother calling it.

79
00:06:12.120 --> 00:06:18.480
But I'm just saying, if I were doing this for real, these I might not allow this know our default

80
00:06:18.480 --> 00:06:23.280
constructor to ever be used by any code outside of this class.

81
00:06:23.640 --> 00:06:24.090
OK.

82
00:06:24.420 --> 00:06:35.280
And thereby, I force people and myself to always construct a person object using this three argument

83
00:06:35.280 --> 00:06:36.120
constructor.

84
00:06:36.690 --> 00:06:47.040
Now what I'm actually doing in this constructor is I'm allowing these three values to be passed in to

85
00:06:47.040 --> 00:06:49.350
the constructor method, if you will.

86
00:06:49.680 --> 00:06:54.210
And then I'm taking those values which are here like this value here?

87
00:06:54.210 --> 00:06:55.530
Is this value here.

88
00:06:55.830 --> 00:06:59.880
This last name corresponds to to the right hand side of this equals sign.

89
00:06:59.880 --> 00:07:03.660
And then this state of birth corresponds to the right hand side of this equal sign.

90
00:07:04.260 --> 00:07:11.490
And what I'm doing is I'm allowing the code that is constructing this person to pass in these values

91
00:07:11.490 --> 00:07:19.970
so that they can be set internally on this new object, which is here the word.

92
00:07:19.980 --> 00:07:26.670
This here refers to the new person object that is being created.

93
00:07:26.910 --> 00:07:37.680
So imagine if a new person is coming into the Java world for the first time and the the creator of this

94
00:07:37.680 --> 00:07:44.850
new person has decided that they want this new person to be called Johnny Smith.

95
00:07:45.090 --> 00:07:54.870
With December 1st, 2000 as their date of birth, the creator of Johnny Smith can pass in the first

96
00:07:54.870 --> 00:07:58.380
name and last name and date of birth that they want Johnny Smith to have.

97
00:07:58.530 --> 00:08:08.460
And then, as Johnny Smith actually becomes created, Johnny Smith will have those values set on him

98
00:08:09.120 --> 00:08:11.580
in these fields here.

99
00:08:12.270 --> 00:08:14.950
OK, so that's why we're saying this.

100
00:08:14.970 --> 00:08:20.730
That first name, which refers to this field here, will be set to whatever we passed in.

101
00:08:21.900 --> 00:08:26.190
Let me show you what that looks like in actual use.

102
00:08:27.270 --> 00:08:34.050
OK, if we go back over to our Hello World program, I'm going to create a new line here, and I'm actually

103
00:08:34.050 --> 00:08:42.480
going to create an instance of a person when I say create an instance, what I mean is to create one

104
00:08:42.480 --> 00:08:51.390
actual object of the type called person, an instance of a person class, which is an object.

105
00:08:51.720 --> 00:08:52.140
OK.

106
00:08:52.500 --> 00:08:54.870
So I will create a person.

107
00:08:57.250 --> 00:09:00.550
And I will name this person, Johnny.

108
00:09:01.720 --> 00:09:06.760
Well, I'm going to refer to this person has done there, haven't actually created the person or named

109
00:09:06.760 --> 00:09:09.160
the person yet to create the person.

110
00:09:09.160 --> 00:09:17.140
I need to use the Java keyword new, which tells the Java system, Hey, I want to create a new object,

111
00:09:17.440 --> 00:09:24.100
then I need to tell Java what type of object I want to create based on what types of classes I have.

112
00:09:24.190 --> 00:09:30.340
I have a class called person, someone to say I want to create a person, and now I use the constructors

113
00:09:30.520 --> 00:09:31.960
that exist on person.

114
00:09:32.170 --> 00:09:37.420
And in this case, I'm going to use the constructor that takes three arguments and it's going to ask

115
00:09:37.420 --> 00:09:42.300
me, OK, well, OK, looks like you want to use the constructor that takes three arguments that takes

116
00:09:42.310 --> 00:09:48.260
a first name, last name and date of birth so I can use quotes because this is a string that's text.

117
00:09:48.280 --> 00:09:54.400
Text goes inside of quotes, Johnny, then a comma.

118
00:09:54.670 --> 00:09:58.630
Each argument will be separated by commas and then a last name.

119
00:09:58.640 --> 00:09:59.830
So Smith.

120
00:10:02.200 --> 00:10:03.850
And then a local date.

121
00:10:06.590 --> 00:10:09.350
And here I'm going to give myself a little more room here.

122
00:10:10.340 --> 00:10:11.810
Local date of.

123
00:10:13.250 --> 00:10:20.930
And I am actually replacing the idea that was originally at this point in the video because I said something

124
00:10:20.930 --> 00:10:23.720
wrong about the month and how that is encoded.

125
00:10:24.290 --> 00:10:26.870
We're just encoding the month very straightforwardly.

126
00:10:26.870 --> 00:10:28.370
So the month is November.

127
00:10:29.090 --> 00:10:34.040
I may have said December earlier, but it is actually going to be November in this video and that is

128
00:10:34.040 --> 00:10:34.520
11.

129
00:10:34.520 --> 00:10:38.660
And then we'll use a day of day of the month of one.

130
00:10:41.660 --> 00:10:42.140
OK.

131
00:10:42.650 --> 00:10:52.190
And so what this line of code is actually saying is it's telling the Java system to create a new instance

132
00:10:52.190 --> 00:10:54.350
of the class person.

133
00:10:56.020 --> 00:11:02.920
And initialize this class, or I'm sorry, this object with a first name of Johnny, a last name of

134
00:11:02.920 --> 00:11:05.560
Smith and a date of birth.

135
00:11:06.190 --> 00:11:06.670
Oops.

136
00:11:06.820 --> 00:11:17.230
I have 200 there, I should say 2000 of the year, 2000 November 1st, and then store a reference to

137
00:11:17.230 --> 00:11:23.020
this object of Johnny Smith inside of a variable called Johnny.

138
00:11:23.290 --> 00:11:27.850
So that's an example of me using the three argument constructor.

139
00:11:27.970 --> 00:11:34.720
Now I have two constructors on the person class, so let me show you how the other constructor can be

140
00:11:34.720 --> 00:11:35.170
used.

141
00:11:35.980 --> 00:11:45.610
I'll create another person, Amy, and I'll tell the Java system, give me a new instance of a person,

142
00:11:45.880 --> 00:11:47.530
but loops of a person.

143
00:11:47.530 --> 00:11:51.790
But this time I'm not going to pass anything in and that's perfectly valid.

144
00:11:51.790 --> 00:11:52.300
Valid.

145
00:11:52.360 --> 00:11:54.130
I'm not getting any errors at all.

146
00:11:55.180 --> 00:12:02.170
However, this person, Amy, has no values set at all.

147
00:12:02.440 --> 00:12:04.480
It's it's like a blank slate.

148
00:12:04.900 --> 00:12:11.140
It did create a person, but as of right now, if I were to run this program at Line 10, this person

149
00:12:11.140 --> 00:12:14.530
won't have a first name or a last name or a date of birth.

150
00:12:14.830 --> 00:12:21.520
So it's almost effectively an invalid person because that's what I'm permitting to to happen here.

151
00:12:21.910 --> 00:12:30.310
Now, there could be reasons in a program why I might want to allow a person to exist and be created

152
00:12:30.310 --> 00:12:36.400
a person object or instance to exist and be created without specifying a name or date of birth.

153
00:12:36.640 --> 00:12:42.010
But in many cases, in business programming in particular, that might not be a great idea, and you

154
00:12:42.010 --> 00:12:45.070
may want to programmatically enforce that.

155
00:12:45.430 --> 00:12:52.090
Such a concept has to have a certain bare minimum amount of properties set on it.

156
00:12:52.420 --> 00:12:58.750
And I'll show you, as I said earlier, what I might do in real life is to disallow myself and others

157
00:12:58.750 --> 00:13:02.860
from even being able to create this kind of probably invalid object.

158
00:13:03.070 --> 00:13:06.250
And the way I can do that, I can jump back over into the person class.

159
00:13:06.460 --> 00:13:12.430
I'm going to jump over to that class directly from here by holding down on the command button on Mac

160
00:13:12.430 --> 00:13:18.460
and then clicking which let's see, you can do a control, be in Windows and Linux.

161
00:13:18.670 --> 00:13:19.750
Okay, so I'm back here.

162
00:13:19.870 --> 00:13:27.310
So if I make this no ARG constructor private by just putting the word private here.

163
00:13:27.550 --> 00:13:30.700
Now notice it tells me you've got one related problem.

164
00:13:30.720 --> 00:13:32.500
And if I click on this, yeah.

165
00:13:32.650 --> 00:13:37.420
So the problem that I have is that the ADC, which is very smart, that's why it's called intelligent.

166
00:13:37.630 --> 00:13:44.260
The IDC knows that I've got a line of code where I'm using that no ARG default constructor and it's

167
00:13:44.260 --> 00:13:50.920
telling me, Hey man, if you make that private, this code over here in the Hello world class online

168
00:13:50.920 --> 00:13:57.520
10 will no longer be able to create that person in this way, because that is your know our default

169
00:13:57.520 --> 00:14:00.520
constructor and he's not code in the Hello.

170
00:14:00.520 --> 00:14:07.990
World class is not allowed to call private code in the person class because it's private.

171
00:14:08.620 --> 00:14:09.100
OK.

172
00:14:09.160 --> 00:14:12.280
And so this is no longer a valid thing that I can do.

173
00:14:12.700 --> 00:14:19.390
But if I was over here making this private, that means I don't want people to be able to new up.

174
00:14:19.420 --> 00:14:21.190
That's another expression you'll hear.

175
00:14:21.190 --> 00:14:26.950
So you can hear us say, create a new object, instantiate an object, or sometimes you'll hear Java

176
00:14:26.950 --> 00:14:28.690
developers say new up.

177
00:14:28.870 --> 00:14:35.680
I don't want to permit myself or anyone else to new up a person without passing in the first name,

178
00:14:35.680 --> 00:14:36.910
last name and date of birth.

179
00:14:37.120 --> 00:14:43.360
So I'm actually protecting myself from people doing things or myself doing things that are invalid.

180
00:14:43.480 --> 00:14:43.930
OK.

181
00:14:44.200 --> 00:14:46.420
I just made this method.

182
00:14:46.810 --> 00:14:48.850
I'm going to jump back over to that method again.

183
00:14:49.030 --> 00:14:56.050
I just made this method private so that no one outside of this class, no code outside of this class

184
00:14:56.320 --> 00:14:58.600
is permitted to call this method.

185
00:14:58.900 --> 00:15:02.650
Now, I guess I've already explained why I would want to do that.

186
00:15:02.980 --> 00:15:07.240
You might be wondering, Well, why do you even have this method here at all if you're not going to

187
00:15:07.240 --> 00:15:08.590
let anyone use it?

188
00:15:08.980 --> 00:15:10.750
And that is a good question.

189
00:15:10.750 --> 00:15:16.990
So let me jump back over here to I'm going to go ahead and delete this, this in about this now invalid

190
00:15:16.990 --> 00:15:17.380
line.

191
00:15:18.280 --> 00:15:21.910
OK, and then I'm going to jump back over to the person class.

192
00:15:23.680 --> 00:15:29.890
Now I'm going to just delete that constructor entirely.

193
00:15:31.220 --> 00:15:32.390
OK, so.

194
00:15:35.020 --> 00:15:42.220
After having deleted our know our default constructor and running the program as it runs just fine,

195
00:15:42.220 --> 00:15:43.870
there are no errors here.

196
00:15:44.680 --> 00:15:50.230
Now let's try something else, though let's comment out Line nine.

197
00:15:50.350 --> 00:15:55.510
And to do that, I'm going to hold down on command and forward slash or on Windows and Linux control

198
00:15:55.510 --> 00:15:58.660
and forward slash someone to comment that out.

199
00:15:58.900 --> 00:16:03.700
And I'm going to create another person, a different person.

200
00:16:03.700 --> 00:16:05.110
I'm going to create Amy again.

201
00:16:05.750 --> 00:16:11.110
But with the no, our default constructor person, Amy, new person.

202
00:16:12.220 --> 00:16:15.820
Now I'm getting an error if you can see that there.

203
00:16:15.850 --> 00:16:16.690
Let's see.

204
00:16:16.840 --> 00:16:20.870
Basically, it's telling me there is no no ARG default constructor anymore.

205
00:16:20.920 --> 00:16:23.410
I can't do this, which makes sense, right?

206
00:16:23.440 --> 00:16:25.960
I deleted the new ARG default constructor.

207
00:16:26.590 --> 00:16:31.390
If I go back over here to this class, I'm going to do something now.

208
00:16:31.420 --> 00:16:39.070
I'm going to comment out the three ARG constructor, which we currently are not using command, forward

209
00:16:39.070 --> 00:16:41.020
slash or control forward slash.

210
00:16:41.980 --> 00:16:50.830
Then I'm going to go back, look at what just happened when I commented out the three ARG constructor

211
00:16:51.640 --> 00:16:59.250
and then I went back over to the Hello World Program Line 10 suddenly does not have any problem anymore.

212
00:16:59.260 --> 00:17:00.790
It's it's valid now.

213
00:17:01.450 --> 00:17:02.980
Now that's kind of weird, isn't it?

214
00:17:03.250 --> 00:17:08.350
What just happened by me getting rid of the three ARG constructor?

215
00:17:08.470 --> 00:17:11.630
So at the moment, I haven't written any constructors, right?

216
00:17:11.650 --> 00:17:15.690
I don't have any constructors anymore, or at least I don't have any that I've written.

217
00:17:15.700 --> 00:17:23.320
Suddenly, my no arg default constructor use online tend to create a person is valid, and I'll prove

218
00:17:23.320 --> 00:17:26.860
that I'll run this and it will not blow up.

219
00:17:27.430 --> 00:17:27.730
Yeah.

220
00:17:28.120 --> 00:17:29.080
Works just fine.

221
00:17:29.860 --> 00:17:30.940
Why is that?

222
00:17:31.480 --> 00:17:33.820
Let's go back over to the person class and see.

223
00:17:35.020 --> 00:17:45.610
OK, so I now have no no constructor written here, yet I'm using a no ARG default constructor here

224
00:17:45.610 --> 00:17:49.540
on Line 10 in the Hello world class and it's working.

225
00:17:49.540 --> 00:17:50.290
It's fine.

226
00:17:51.130 --> 00:17:51.910
Why is that?

227
00:17:52.570 --> 00:17:57.400
Well, that's an interesting characteristic of constructors in Java.

228
00:17:58.410 --> 00:18:03.840
If you create a Java class and you do not write any constructor at all.

229
00:18:05.100 --> 00:18:11.860
Java will give you a free no ARG default constructor right out of the box.

230
00:18:11.880 --> 00:18:13.080
You don't have to do anything.

231
00:18:13.110 --> 00:18:14.430
It'll give you that for free.

232
00:18:15.450 --> 00:18:15.900
OK.

233
00:18:16.380 --> 00:18:18.150
And that's what I'm using here.

234
00:18:18.550 --> 00:18:22.290
However, however, please write this down.

235
00:18:22.290 --> 00:18:31.860
Remember this as soon as you create your own constructor, that is not a no arg default constructor.

236
00:18:31.870 --> 00:18:36.240
So in other words, as soon as you create a constructor that takes any arguments at all.

237
00:18:36.810 --> 00:18:45.720
If that is the only constructor you create, Java will no longer create a free no ARG default constructor

238
00:18:45.720 --> 00:18:46.410
for you.

239
00:18:47.190 --> 00:18:49.530
So as soon as I.

240
00:18:50.490 --> 00:18:55.530
Uncomment my three argument constructor here.

241
00:18:56.530 --> 00:19:04.900
And go back to Hello, World, suddenly, this is no longer valid because Java will no longer create

242
00:19:05.110 --> 00:19:07.990
a no argh default constructor for me.

243
00:19:08.620 --> 00:19:14.290
So this default no ARG constructor that Java creates for me is a convenience.

244
00:19:14.650 --> 00:19:15.040
OK.

245
00:19:15.070 --> 00:19:20.560
It's this trying to prevent me from having to do a little too much boilerplate coding, but it only

246
00:19:20.560 --> 00:19:21.400
goes so far.

247
00:19:21.910 --> 00:19:22.330
OK.

248
00:19:22.450 --> 00:19:24.220
So please keep that in mind.

249
00:19:24.430 --> 00:19:28.330
That's an easy thing to forget about, and it will trip you up.

250
00:19:28.540 --> 00:19:36.730
There are a whole lot of what are called frameworks in Java that are very commonly used, but these

251
00:19:36.730 --> 00:19:43.420
are frameworks that assume that there is a no ARG default constructor on your classes.

252
00:19:43.660 --> 00:19:51.550
And oftentimes you will write your own constructors that are not no args that they take arguments and

253
00:19:51.550 --> 00:19:59.710
you'll forget that if you do that, you may need to manually write your own no ARG default constructor.

254
00:19:59.710 --> 00:20:07.570
So if you want to have something like this work where you can use the person class in this way and you

255
00:20:07.570 --> 00:20:14.200
can also use it in this way, if you wanted to do that, to be able to do that, you would need to go

256
00:20:14.200 --> 00:20:19.150
ahead and implement the No ARG constructor.

257
00:20:19.210 --> 00:20:22.750
And by the way, the ADC probably can do that for us.

258
00:20:23.470 --> 00:20:25.210
Yeah, create constructor.

259
00:20:25.360 --> 00:20:25.870
Look at that.

260
00:20:26.500 --> 00:20:28.870
So I hear I'm going to do that again.

261
00:20:32.450 --> 00:20:39.140
Just so you can really see what I did there, so I hovered over the little red squiggly lines there

262
00:20:39.590 --> 00:20:44.960
and it told me what it doesn't like, and then it offered, Hey, do you want the idea off or do you

263
00:20:44.960 --> 00:20:47.660
want me to to create the constructor for you?

264
00:20:47.810 --> 00:20:50.690
And I clicked on that and bam, it created that.

265
00:20:50.690 --> 00:20:52.790
No, our default constructor for me.

266
00:20:54.180 --> 00:20:56.310
OK, so I didn't even have to write it.

267
00:20:56.670 --> 00:21:00.620
I don't like all this empty space, by the way, so I'm going to get rid of some of that.

268
00:21:00.630 --> 00:21:05.970
And normally I prefer my simplest constructor in this case, the no, our default constructor.

269
00:21:06.210 --> 00:21:10.140
I usually prefer that to be up near the top.

270
00:21:11.010 --> 00:21:12.630
It's just kind of a convention.

271
00:21:13.140 --> 00:21:13.440
Yeah.

272
00:21:14.520 --> 00:21:15.000
All right.

273
00:21:15.270 --> 00:21:18.450
So, OK, I'll add one more thing.

274
00:21:18.510 --> 00:21:23.080
You're not going to need this right now, but we will likely see this a little later.

275
00:21:23.100 --> 00:21:29.700
As I mentioned a few moments ago, there can be frameworks that you may want to use, and those frameworks

276
00:21:29.700 --> 00:21:33.930
expect a no ARG default constructor to exist on your class.

277
00:21:34.260 --> 00:21:41.370
However, you as a business programmer, for example, may not want anyone to be able to utilize the

278
00:21:41.370 --> 00:21:43.320
No ARG default constructor.

279
00:21:43.890 --> 00:21:46.800
How can you reconcile these two things?

280
00:21:46.920 --> 00:21:51.690
You've got a framework that wants to know our default constructor, but you, the programmer and creator

281
00:21:51.690 --> 00:21:57.930
of this class, don't want anyone to be able to create an instance of the class without specifying some

282
00:21:57.930 --> 00:21:58.620
arguments.

283
00:21:58.860 --> 00:22:00.960
How can you have both at the same time?

284
00:22:01.140 --> 00:22:09.240
Well, the key to doing that usually is that you can go ahead and have your know our default constructor

285
00:22:09.240 --> 00:22:09.640
here.

286
00:22:10.260 --> 00:22:15.120
But in order to satisfy the framework, usually it doesn't have to be public.

287
00:22:15.870 --> 00:22:20.280
So you may be able to get away with having it be private or protected.

288
00:22:20.790 --> 00:22:26.220
I again cannot use this line of code here, so I'll just delete that.

289
00:22:26.460 --> 00:22:31.950
But if I had a framework that for some reason was expecting a no ARG default constructor to exist on

290
00:22:31.950 --> 00:22:34.780
this class, it might be happy with this.

291
00:22:34.800 --> 00:22:36.390
It might be satisfied with this.

292
00:22:36.540 --> 00:22:41.760
Either this or else, it may be protected, which is similar.

293
00:22:43.130 --> 00:22:43.520
OK.

294
00:22:43.610 --> 00:22:48.440
I think that wraps it up for constructor's, you now know a lot about constructor's.

295
00:22:48.830 --> 00:22:49.880
I'll see you in the next one.
