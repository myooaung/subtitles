WEBVTT
1
00:00:00.120 --> 00:00:06.600
So with this new technique, I'm about to show you, I need to just point out one thing the H2 database

2
00:00:06.600 --> 00:00:10.330
apparently doesn't fully support it in one form.

3
00:00:10.350 --> 00:00:17.160
So we've been doing all of our sequel so far in daily B.C. using prepared statements, which are generally

4
00:00:17.160 --> 00:00:22.950
the most highly recommended approach to doing sequel because they can be pre compiled and they can help

5
00:00:22.950 --> 00:00:24.990
us avoid SQL injection attacks.

6
00:00:25.230 --> 00:00:32.100
Unfortunately, it looks like the current versions of H2 don't support using a prepared statement for

7
00:00:32.100 --> 00:00:34.410
this next technique that I want to show you, though.

8
00:00:34.650 --> 00:00:40.920
So we'll do this next one using a standard statement and probably should be showing you that anyway.

9
00:00:41.010 --> 00:00:41.460
OK.

10
00:00:42.090 --> 00:00:47.400
So what we're going to want to do here is to create a connection like usual.

11
00:00:47.400 --> 00:00:52.080
But instead of doing a prepared statement now, we'll just create a regular statement.

12
00:00:53.550 --> 00:00:57.640
Like so and then we still have to deal with the exception that can be thrown.

13
00:00:57.660 --> 00:01:04.740
So as usual, I will put my cursor at the end of this line and do an option command T and tell it to

14
00:01:04.740 --> 00:01:07.320
surround with a try catch as usual.

15
00:01:07.710 --> 00:01:12.660
All right, then I'll move my mouse, my cursor back up here, and then we will capture the output of

16
00:01:12.660 --> 00:01:15.600
that, which will be now instead of a prepared statement.

17
00:01:15.610 --> 00:01:16.950
It'll just be a statement.

18
00:01:17.130 --> 00:01:20.270
And I will just call this s t in tea.

19
00:01:21.270 --> 00:01:21.840
All right.

20
00:01:21.990 --> 00:01:28.680
Now, the technique that I want to show you is the fact that we can actually delete multiple records

21
00:01:28.680 --> 00:01:35.760
from a table all in one go and we can do this by utilizing some skill that I didn't teach you at the

22
00:01:35.760 --> 00:01:37.290
beginning of this module.

23
00:01:37.440 --> 00:01:43.950
So let me show you that now so we can reference the statement and then we can choose to execute an update

24
00:01:44.070 --> 00:01:44.850
right here.

25
00:01:44.880 --> 00:01:49.980
So instead of defining our sequel in the prepared statement, like we've been doing up here, like on

26
00:01:49.980 --> 00:01:55.200
Line 100, right, we can do it in the Execute Update method call here.

27
00:01:55.410 --> 00:01:58.920
And by the way, I mean, we could do this with the prepared statement as well.

28
00:01:59.070 --> 00:02:04.860
The prepared statement has an execute update method as well, and we could pass in SQL right there too.

29
00:02:05.100 --> 00:02:11.040
However, it would not be as beneficial as defining our sequel when we create the prepared statement,

30
00:02:11.040 --> 00:02:16.020
because the SQL down here in the Execute update doesn't get an opportunity to be pre compiled.

31
00:02:16.620 --> 00:02:22.620
OK, so down here we'll call execute update and then we will start typing in some sequel.

32
00:02:22.620 --> 00:02:28.380
So the sequel to delete a record from the database, we did learn this part is normally just delete

33
00:02:28.620 --> 00:02:34.860
from and then the name of the table delete from people where now the way that we learned how to do this

34
00:02:34.860 --> 00:02:43.170
in scroll SQL client was to do something like delete from people where ID equals whatever right a number

35
00:02:43.200 --> 00:02:43.560
right.

36
00:02:44.190 --> 00:02:52.830
However, if you want to delete multiple records by IED instead of doing where ID equals and then binding

37
00:02:52.830 --> 00:03:00.690
a parameter or something like that, what we can do instead is use another keyword in followed by parentheses.

38
00:03:00.690 --> 00:03:08.670
And then in these parentheses, we can specify IDs like that and you can specify quite a number of IDs.

39
00:03:08.700 --> 00:03:15.480
Now, I think every database will have a different limit as to how many parameters you can specify inside

40
00:03:15.480 --> 00:03:16.650
of an end clause.

41
00:03:16.980 --> 00:03:22.620
I want to say, generally speaking, the Oracle database, for example, which is a very common database

42
00:03:22.620 --> 00:03:30.540
that you will encounter in companies I believe has a limit of 1024 parameters that we that we can pass

43
00:03:30.540 --> 00:03:39.870
in 1024 or 1023, maybe parameters that can be passed in to an in clause to give you some idea of what

44
00:03:39.870 --> 00:03:43.490
some of the limitations could be when you're using it in class.

45
00:03:43.500 --> 00:03:48.690
So you can't just pass in an infinite number of parameters here, but it's a relatively large number

46
00:03:48.750 --> 00:03:54.330
and there are actually additional techniques to get past those limitations if you need them, but they

47
00:03:54.330 --> 00:03:55.800
get much more involved.

48
00:03:56.130 --> 00:03:56.400
All right.

49
00:03:56.400 --> 00:04:02.310
So this is the format that we would need now because we're not using a prepared statement, though we

50
00:04:02.310 --> 00:04:09.960
would need to actually build this sequel with the parameters that we will be needing to pass in all

51
00:04:09.960 --> 00:04:10.710
at once.

52
00:04:10.860 --> 00:04:13.560
So in other words, we can't do something like.

53
00:04:13.770 --> 00:04:19.230
Question mark, question mark, question mark, question mark, like that and then bind those question

54
00:04:19.230 --> 00:04:25.260
marks to parameters after the fact, the way that we were doing with a prepared statement, OK?

55
00:04:25.590 --> 00:04:31.610
And so we would potentially be opening ourselves up to SQL injection with this technique.

56
00:04:31.620 --> 00:04:34.890
But I will go ahead and show it anyway so that we can make this work.

57
00:04:35.280 --> 00:04:35.550
All right.

58
00:04:35.550 --> 00:04:37.470
So this is what we need, right?

59
00:04:37.470 --> 00:04:38.970
We need this format here.

60
00:04:39.300 --> 00:04:45.840
However, now obviously, we also cannot just hard code a certain number of question marks because we

61
00:04:45.840 --> 00:04:48.390
don't know at the time that we're coding this.

62
00:04:48.690 --> 00:04:53.070
How many people could be passed into this delete method, right?

63
00:04:53.490 --> 00:04:54.510
It's dynamic.

64
00:04:54.690 --> 00:05:01.650
So what we ideally want to be able to do here is to generate this part of the sequel string dynamically

65
00:05:01.650 --> 00:05:04.950
at the time when this delete method is being called right.

66
00:05:05.310 --> 00:05:11.220
So we'll need to know how many people are being passed in and then generate that many question marks

67
00:05:11.370 --> 00:05:16.440
and then generate the actual IDs that would go into this end clause.

68
00:05:16.450 --> 00:05:17.550
That's what we need to do.

69
00:05:17.580 --> 00:05:17.880
OK.

70
00:05:18.360 --> 00:05:20.300
So what we're going to do real quick here.

71
00:05:20.340 --> 00:05:22.080
Let me just put a semicolon on that.

72
00:05:22.140 --> 00:05:27.180
We're going to jump back over into the test class and we're going to write a little experimental test

73
00:05:27.180 --> 00:05:36.000
so that I can show you and remind you of how we can go from an array of people to a comma delimited

74
00:05:36.000 --> 00:05:39.390
string of their IDs, because that's what we need.

75
00:05:39.390 --> 00:05:42.150
In fact, let me let me revise this a little bit.

76
00:05:42.160 --> 00:05:45.210
So when we're done, it should look something like.

77
00:05:47.060 --> 00:05:53.060
You know, with these numbers being random IDs of the various people that got passed, then OK, so

78
00:05:53.060 --> 00:05:56.240
that's what we want to generate with this input.

79
00:05:56.300 --> 00:05:57.500
So let's see how we can do that.

80
00:05:57.560 --> 00:06:03.590
So we're going to jump back over to the test class here, and I'm going to create temporary throwaway

81
00:06:03.620 --> 00:06:06.440
test just to experiment with.

82
00:06:06.950 --> 00:06:11.480
OK, so I will call this test experiment and I'm going to get rid of this when I'm done teaching you

83
00:06:11.480 --> 00:06:12.230
how to do this.

84
00:06:12.530 --> 00:06:12.890
All right.

85
00:06:13.400 --> 00:06:18.770
So let's just create a few throwaway people instances first.

86
00:06:18.950 --> 00:06:20.780
OK, so I'll do something like person.

87
00:06:20.790 --> 00:06:23.180
P1 equals new person.

88
00:06:23.360 --> 00:06:25.460
Now for this, we're going to need the IDs.

89
00:06:25.460 --> 00:06:26.300
That's important.

90
00:06:26.300 --> 00:06:28.430
So I'm just going to make up an ID here.

91
00:06:28.580 --> 00:06:30.700
And for the rest of this, I don't even need the rest.

92
00:06:30.710 --> 00:06:33.380
So I'm just going to pass in nulls for everything else.

93
00:06:33.920 --> 00:06:34.280
OK.

94
00:06:34.310 --> 00:06:39.230
Oh, and the ID needs to be along, so I will put an L on the end of it.

95
00:06:39.560 --> 00:06:39.950
All right.

96
00:06:40.070 --> 00:06:45.830
And then I'm going to duplicate that a few times, and then I'm going to change these numbers.

97
00:06:45.830 --> 00:06:54.220
P2, P3, PS4, PS5, like so and then I will change these IDs as well.

98
00:06:54.230 --> 00:06:56.630
Four and five like that.

99
00:06:56.840 --> 00:07:03.500
OK, now I'm going to put all of those people inside of an array.

100
00:07:03.560 --> 00:07:09.740
So one way I can do that is to maybe call a race as list.

101
00:07:10.650 --> 00:07:13.800
And then I can just reference all of these like this.

102
00:07:14.070 --> 00:07:19.080
All right, so now that's going to give me a list, not an array, but then I can turn right back around

103
00:07:19.080 --> 00:07:20.760
and call to array.

104
00:07:21.030 --> 00:07:23.000
Now I've got a couple options here.

105
00:07:23.040 --> 00:07:27.780
I can call the plain old two array here, which returns an array of type object.

106
00:07:27.780 --> 00:07:34.680
But if I want an array that is of the actual type person, then I can call this second version here

107
00:07:34.680 --> 00:07:38.160
and then I can just give it a kind of like a template of a person.

108
00:07:38.430 --> 00:07:39.270
I'll show you this.

109
00:07:39.270 --> 00:07:40.110
What's new?

110
00:07:41.110 --> 00:07:45.280
Person array and then just empty, curly braces there.

111
00:07:45.370 --> 00:07:45.790
OK.

112
00:07:45.970 --> 00:07:47.710
And now I can capture that.

113
00:07:48.220 --> 00:07:51.310
And so now I've got a people array.

114
00:07:51.430 --> 00:07:57.130
Now the reason I'm creating this people array is because if we jump back over here, that's essentially

115
00:07:57.130 --> 00:07:58.370
what we're passing in here.

116
00:07:58.390 --> 00:08:04.310
It's it's a virus, but I told you a virus is basically just a shorthand for an array.

117
00:08:04.350 --> 00:08:11.230
OK, and I want to simulate what we could do down in this code to go from this to something that looks

118
00:08:11.230 --> 00:08:11.950
like this.

119
00:08:12.070 --> 00:08:17.950
So I'm starting with a an array to represent the virus, OK?

120
00:08:19.030 --> 00:08:22.750
All right, jumping back over to the test, so there's our starting point right there.

121
00:08:23.020 --> 00:08:27.880
And just as a quick reminder here, I will just show what we're trying to get to.

122
00:08:27.890 --> 00:08:33.400
So we want something like the lead from person lair IED and.

123
00:08:34.340 --> 00:08:37.160
10, 20, 30, 40, 50.

124
00:08:37.610 --> 00:08:39.560
OK, we want something that's going to look like that.

125
00:08:39.680 --> 00:08:42.500
Now I don't really care about this part.

126
00:08:43.280 --> 00:08:47.390
It's really this part that that we're really caring about here.

127
00:08:47.420 --> 00:08:47.810
OK.

128
00:08:48.470 --> 00:08:48.880
All right.

129
00:08:48.890 --> 00:08:51.770
So now we've got an array of the people.

130
00:08:51.980 --> 00:09:03.200
And so now I think what we can do is simply use the Streams API to go from this array of people to a

131
00:09:03.260 --> 00:09:07.850
string representation of their IDs delimited by commas.

132
00:09:07.850 --> 00:09:11.900
We can use the Streams API to do this, and I'm going to just blow through this quickly, but I will

133
00:09:11.900 --> 00:09:12.890
explain as I go.

134
00:09:12.920 --> 00:09:17.390
First off, do you want to take a moment to see if you can figure this out for yourself?

135
00:09:17.390 --> 00:09:21.800
Because I have taught you all of the techniques you need to know to to pull this off?

136
00:09:22.010 --> 00:09:23.660
So why don't you have a moment if you want?

137
00:09:26.230 --> 00:09:26.680
OK.

138
00:09:26.710 --> 00:09:29.650
Did you get it all right, so if you didn't, don't worry about it.

139
00:09:30.010 --> 00:09:30.550
Here we go.

140
00:09:31.090 --> 00:09:31.390
All right.

141
00:09:31.390 --> 00:09:36.940
So first, we've got an array of people and I want to use the Streams API and you can't use the Streams

142
00:09:36.940 --> 00:09:38.500
API directly on an array.

143
00:09:38.680 --> 00:09:45.880
So I want to convert this array first into a collection, so we need to convert this array of person

144
00:09:45.880 --> 00:09:49.660
instances to a stream of persons.

145
00:09:49.750 --> 00:09:50.200
OK.

146
00:09:50.440 --> 00:09:58.870
And because it's an array, we can use the arrays that stream method and then we can pass in our array

147
00:09:58.870 --> 00:09:59.560
right there.

148
00:09:59.770 --> 00:10:07.660
And that method arrays that streams, takes an array of some type and converts it into a stream of that

149
00:10:07.660 --> 00:10:07.980
type.

150
00:10:07.990 --> 00:10:14.020
So we've got an array of person and we will now get a stream of persons, right?

151
00:10:14.320 --> 00:10:14.530
All right.

152
00:10:14.530 --> 00:10:15.940
So now we've got a stream.

153
00:10:16.180 --> 00:10:16.600
OK.

154
00:10:17.020 --> 00:10:23.720
And so we've got all these people here and now we want to go from these people to their IDs.

155
00:10:23.740 --> 00:10:28.630
OK, so we want to convert each person object into just their ID.

156
00:10:29.080 --> 00:10:35.830
So when you're doing conversions, you're using the streams, APIs, map function.

157
00:10:35.890 --> 00:10:36.220
Right?

158
00:10:36.550 --> 00:10:41.530
So we'll call map and we want to simply get the ID right.

159
00:10:41.560 --> 00:10:43.660
That's how we can convert a person to an ID.

160
00:10:44.110 --> 00:10:51.880
Now you could be explicit and do a lambda expression and then say, Peter, get I.D. like so right,

161
00:10:51.880 --> 00:10:52.900
you could do all of that.

162
00:10:53.080 --> 00:11:00.040
But we can also just use the method reference shorthand person, call and call and get I.D. That's the

163
00:11:00.040 --> 00:11:01.000
same thing, right?

164
00:11:01.270 --> 00:11:09.300
And now we've gone from a stream of person objects to a stream of longs, which are the IDs, OK?

165
00:11:09.730 --> 00:11:16.210
But ultimately, we want these IDs to be comedy limited in a string.

166
00:11:16.360 --> 00:11:16.840
OK.

167
00:11:17.050 --> 00:11:18.540
A string of text.

168
00:11:18.580 --> 00:11:18.970
Right.

169
00:11:19.540 --> 00:11:29.470
So now we need to convert this stream of long IDs into a stream of text IDs.

170
00:11:29.500 --> 00:11:29.950
OK.

171
00:11:30.160 --> 00:11:31.780
So here's another conversion.

172
00:11:32.050 --> 00:11:39.430
So again, we can do another map and to convert a long to a string.

173
00:11:40.090 --> 00:11:41.050
We can do.

174
00:11:41.290 --> 00:11:45.280
We can do string value of OK.

175
00:11:45.640 --> 00:11:47.830
And so just a quick reminder here.

176
00:11:48.010 --> 00:11:52.450
What that's doing is string value of.

177
00:11:52.720 --> 00:11:56.030
And then we're passing in a long like 20.

178
00:11:56.050 --> 00:12:02.140
And so then that's just spitting out a string representation of the of the number 20.

179
00:12:02.150 --> 00:12:04.630
OK, so that's converting a long to a string.

180
00:12:04.660 --> 00:12:04.990
OK.

181
00:12:05.320 --> 00:12:11.080
And we're just calling the value of method using a method reference instead of explicitly like this.

182
00:12:11.110 --> 00:12:11.530
OK.

183
00:12:14.110 --> 00:12:27.790
All right, so now we've gone from a stream of people to a stream of long IDs to a stream of text IDs.

184
00:12:28.030 --> 00:12:35.920
And now we just need to get all of those individual text ideas and put commas between them in one string.

185
00:12:35.950 --> 00:12:38.680
OK, so what we're going to do here is we're going to collect.

186
00:12:38.830 --> 00:12:43.930
We're going to collect all of those together and then we're going to join them by commas.

187
00:12:44.080 --> 00:12:49.000
And so we'll call the collect method of the streams API.

188
00:12:49.210 --> 00:12:54.670
And then from here we can use one of the many, many methods on the collector's class.

189
00:12:54.940 --> 00:13:01.000
And the method that I'm referring to here is joining, but I won't actually prepend it with the name

190
00:13:01.000 --> 00:13:01.600
of the class.

191
00:13:01.600 --> 00:13:08.410
I will simply because it's actually a static method, so I will simply refer to it using the joining

192
00:13:08.410 --> 00:13:08.890
method.

193
00:13:08.890 --> 00:13:11.260
Like so and you may need to import that.

194
00:13:11.260 --> 00:13:17.140
So notice I'm putting my cursor right here and then I'm going to do an option return to let the ADC

195
00:13:17.170 --> 00:13:25.870
or what is it all all, to return to let the ADC perform the static import for the collectors joining

196
00:13:25.870 --> 00:13:26.410
method.

197
00:13:26.410 --> 00:13:31.750
Or you could write out the whole collectors that joining as well if you for some strange reason don't

198
00:13:31.750 --> 00:13:34.300
want to do the static import.

199
00:13:34.540 --> 00:13:34.900
All right.

200
00:13:34.960 --> 00:13:46.930
So this method now will collect all of the text IDs and it will allow us to join them using some string

201
00:13:47.080 --> 00:13:50.710
and so I can specify what string I want and I just want a comma.

202
00:13:50.980 --> 00:13:55.780
So in other words, I'm saying collect all these numbers, which are string representations of numbers,

203
00:13:55.780 --> 00:14:00.070
though, and then join them up using commas like so.

204
00:14:00.280 --> 00:14:03.950
And now the output of this will be just a string.

205
00:14:03.970 --> 00:14:11.020
So if I put a semicolon here and then I collect the output of this, I will call this Ides i.d.s OK.

206
00:14:11.080 --> 00:14:11.950
And that's a string.

207
00:14:12.100 --> 00:14:16.540
So first off, let's just print that out, ides like sir.

208
00:14:16.660 --> 00:14:18.790
So if I run this method now?

209
00:14:22.240 --> 00:14:27.130
There we go, 10 common, 20 common 30, 40, 50, right, with all those coming, so that's really

210
00:14:27.130 --> 00:14:28.570
what we want right there.

211
00:14:28.600 --> 00:14:36.850
OK, so this is just to prove that this is a way that we could go from having an array of people to

212
00:14:36.880 --> 00:14:42.290
a comma delimited, delimited string of just their IDs.

213
00:14:42.310 --> 00:14:43.960
OK, so that's what we're doing here.

214
00:14:43.960 --> 00:14:49.480
And we basically did it in one line, essentially, because really, this is kind of like the pertinent

215
00:14:49.480 --> 00:14:50.470
bit right here.

216
00:14:50.510 --> 00:14:50.860
OK.

217
00:14:50.890 --> 00:14:56.230
In fact, I think I will go ahead and just grab this whole line.

218
00:14:57.970 --> 00:14:58.420
All right.

219
00:14:58.540 --> 00:15:03.940
And so now we'll jump back over to the delete method implementation here.

220
00:15:04.270 --> 00:15:10.900
And I think I will start off by just pasting this right here and in fact looks like it works right away

221
00:15:10.900 --> 00:15:15.010
because this variable here was already named the same thing, people.

222
00:15:15.040 --> 00:15:15.370
Right?

223
00:15:16.090 --> 00:15:16.390
All right.

224
00:15:16.390 --> 00:15:22.510
So then that should be the exact same IDs that we need now down here.

225
00:15:22.540 --> 00:15:28.630
What I will do is instead of hard coding this like I'm doing there, I'm going to get rid of the just

226
00:15:28.630 --> 00:15:29.140
those numbers.

227
00:15:29.140 --> 00:15:34.630
I'm going to leave the parentheses there and I'm going to make up what's called a named parameter.

228
00:15:34.660 --> 00:15:35.050
OK.

229
00:15:35.200 --> 00:15:42.010
So I want to be able to pass in the I.D. someone and just create a fake named parameter here by using

230
00:15:42.010 --> 00:15:43.240
a colon IDs.

231
00:15:43.420 --> 00:15:50.020
This is a format that you'll see frequently in a lot of frameworks that do support SQL named parameters.

232
00:15:50.320 --> 00:15:55.690
Now what we're doing here doesn't really support it, but I'm going to just kind of fake make a poor

233
00:15:55.690 --> 00:15:56.920
man's version of that.

234
00:15:57.280 --> 00:16:06.220
And now what I can do is at the end of this string here, I can use the replace method and I can tell

235
00:16:06.430 --> 00:16:14.780
replace to replace this colon IDs with the actual IDs string.

236
00:16:14.800 --> 00:16:15.280
OK.

237
00:16:15.310 --> 00:16:16.180
Like so.

238
00:16:16.600 --> 00:16:16.950
All right.

239
00:16:16.960 --> 00:16:22.750
So what that's going to end up doing then, is it's literally, literally going to replace this bit

240
00:16:22.750 --> 00:16:30.460
of text here with the output that comes from this IDs string right here, which we already know is going

241
00:16:30.460 --> 00:16:34.420
to be some common delimited list of IDs, right?

242
00:16:34.660 --> 00:16:40.330
And so that way, we don't need to know at this moment how many people are going to be passed in and

243
00:16:40.330 --> 00:16:45.550
what their IDs will be that will all get replaced for us automatically at runtime.

244
00:16:45.580 --> 00:16:46.030
OK.

245
00:16:46.450 --> 00:16:46.960
All right.

246
00:16:47.200 --> 00:16:52.480
And now this execute update method does return the number of rows that were affected.

247
00:16:52.480 --> 00:16:55.990
And so for debugging purposes, we could go ahead and capture that.

248
00:16:56.200 --> 00:17:01.300
And I don't know what I was calling this before something like affected record loops records.

249
00:17:01.510 --> 00:17:02.680
I was probably calling count.

250
00:17:02.710 --> 00:17:04.690
Yeah, I guess I should do that count.

251
00:17:05.050 --> 00:17:05.440
OK.

252
00:17:05.650 --> 00:17:07.630
And then I can print that out.

253
00:17:08.410 --> 00:17:10.000
Affected record count.

254
00:17:10.150 --> 00:17:10.480
All right.

255
00:17:10.480 --> 00:17:12.310
So that's just for debugging purposes.

256
00:17:12.310 --> 00:17:19.060
If I want to just confirm somehow how many records actually got deleted or updated or changed in some

257
00:17:19.060 --> 00:17:19.330
way?

258
00:17:19.510 --> 00:17:19.810
Right?

259
00:17:20.230 --> 00:17:20.620
All right.

260
00:17:20.620 --> 00:17:30.550
So now I think we are ready to jump back over to our test, and I think we can run this test now.

261
00:17:30.580 --> 00:17:32.700
OK, so let's see what we get now.

262
00:17:35.500 --> 00:17:36.700
Ooh, that looks good.

263
00:17:38.000 --> 00:17:38.510
Yeah.

264
00:17:39.320 --> 00:17:42.530
So we had there are two records that were affected.

265
00:17:42.680 --> 00:17:43.070
Right.

266
00:17:43.220 --> 00:17:48.140
I didn't explicitly label that, but I know I know that that's what that two means.

267
00:17:48.320 --> 00:17:52.160
OK, so that looks like it worked just fine.

268
00:17:52.400 --> 00:17:52.850
OK.

269
00:17:52.970 --> 00:17:54.980
So let me just reiterate something here.

270
00:17:54.980 --> 00:17:56.900
We'll jump back over to this delete method.

271
00:17:56.900 --> 00:18:04.370
So I'll just reiterate the fact that the advantage of this approach versus the four loop that we did

272
00:18:04.370 --> 00:18:11.090
initially where we were just delegating down to the original delete method is that we are now able to

273
00:18:11.090 --> 00:18:18.500
have the database delete multiple records from that table basically simultaneously.

274
00:18:18.530 --> 00:18:24.260
OK, now how it does it internally, I do not know, but from our database connection perspective,

275
00:18:24.590 --> 00:18:31.760
we are simply making one command to tell it all the IDs of the records that we want it to delete, and

276
00:18:31.760 --> 00:18:38.900
then it handles the rest for us all in one call, rather than having to make multiple round trip calls,

277
00:18:38.900 --> 00:18:45.380
which is definitely much less efficient in the long run, especially if you need to delete lots of records.

278
00:18:45.560 --> 00:18:48.770
So with that, I'm going to go ahead and in this lesson, and I'll see you in the next one.
