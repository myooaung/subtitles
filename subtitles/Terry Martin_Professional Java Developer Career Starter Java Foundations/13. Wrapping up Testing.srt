1
00:00:00,150 --> 00:00:06,180
All right, I've got another idea for a feature to implement in this guessing game that we actually

2
00:00:06,180 --> 00:00:08,610
did not implement in the original version.

3
00:00:09,360 --> 00:00:14,340
Sometimes it's nice when you're playing a guessing game where you have to guess a number to be given

4
00:00:14,340 --> 00:00:17,910
a hint as to whether or not you're too high or too low.

5
00:00:17,940 --> 00:00:18,330
Right.

6
00:00:18,450 --> 00:00:23,040
So that you can at least have some idea what direction should you be guessing in?

7
00:00:23,100 --> 00:00:27,360
So I was thinking it might be nice to implement that capability here.

8
00:00:27,750 --> 00:00:35,970
So if we turn back to the code and go back over to our tests and I'm going to minimize that window there.

9
00:00:36,210 --> 00:00:38,290
So let's start at the top here and just see.

10
00:00:38,310 --> 00:00:44,850
So, yeah, like this scenario here, test one wrong negative guess situation.

11
00:00:44,860 --> 00:00:48,030
So obviously here we're using a negative number.

12
00:00:48,420 --> 00:00:55,710
So we might have expected that if we were to implement this hint capability, maybe it would say something

13
00:00:55,710 --> 00:01:01,770
like you didn't get it and then maybe tell us that we're too low, right?

14
00:01:01,770 --> 00:01:07,320
So we know too to go up something like that test one wrong positive situation.

15
00:01:07,500 --> 00:01:13,020
So assuming in this case that, well, yeah, actually in this case, we would be too high by one.

16
00:01:13,320 --> 00:01:18,630
So then it would say you didn't get it and maybe too low or I'm sorry, too high.

17
00:01:18,780 --> 00:01:19,120
Right?

18
00:01:19,140 --> 00:01:20,120
So I don't know.

19
00:01:20,130 --> 00:01:23,920
Let's let's see what this would look like if we were to do this.

20
00:01:23,940 --> 00:01:30,060
We'll start by just revising these existing tests to force us to make the proper code changes.

21
00:01:30,060 --> 00:01:34,530
So we'll start with this one where we know we're going to be too low regardless.

22
00:01:34,890 --> 00:01:39,750
And let's just say that it's going to say you didn't get it hyphen.

23
00:01:39,750 --> 00:01:42,990
Maybe you're too low.

24
00:01:43,020 --> 00:01:44,850
Yeah, let's let's try that.

25
00:01:45,120 --> 00:01:45,630
All right.

26
00:01:45,780 --> 00:01:49,170
And see here, let's run all the tests.

27
00:01:50,470 --> 00:01:50,810
All right.

28
00:01:50,830 --> 00:01:57,550
And so now that guy is failing as as expected, and so we'll we'll jump over to him and then we'll jump

29
00:01:57,550 --> 00:02:02,260
into the actual code and do the simplest thing we can to make that work.

30
00:02:02,800 --> 00:02:04,060
You're too low.

31
00:02:05,170 --> 00:02:06,640
All right now, let's see.

32
00:02:06,650 --> 00:02:08,340
So that message is currently here.

33
00:02:08,350 --> 00:02:09,220
You didn't get it.

34
00:02:09,220 --> 00:02:11,020
So let's just do the simplest thing.

35
00:02:11,520 --> 00:02:12,100
Ethan.

36
00:02:12,340 --> 00:02:13,960
You're too low.

37
00:02:15,050 --> 00:02:20,450
And let's rerun all of the tests, and I think we can predict roughly what's going to happen here,

38
00:02:20,450 --> 00:02:21,680
but let's let's see it.

39
00:02:23,290 --> 00:02:25,450
All right, so let's see.

40
00:02:25,480 --> 00:02:33,790
All right, we fixed that previous failing test, but now our positive situation is failing.

41
00:02:34,060 --> 00:02:37,020
So what can we do to get that working again?

42
00:02:37,030 --> 00:02:42,960
So currently the positive situation is expecting to just see the text.

43
00:02:42,970 --> 00:02:44,140
You didn't get it.

44
00:02:44,320 --> 00:02:45,880
So let's see here.

45
00:02:46,480 --> 00:02:50,170
So both of those scenarios are happening inside of Line 19.

46
00:02:50,980 --> 00:02:55,360
And currently we've hardcoded the message You're too low.

47
00:02:55,360 --> 00:03:01,840
But now I guess we need to be more conditional and say and only put this year too low if you're actually

48
00:03:01,840 --> 00:03:03,760
if your guest is actually too low.

49
00:03:04,030 --> 00:03:12,010
So I mean, I guess we could just put a little embedded conditional only inside of this final clause

50
00:03:12,010 --> 00:03:14,020
here because it won't apply to these two.

51
00:03:14,230 --> 00:03:15,220
Do you understand why?

52
00:03:15,550 --> 00:03:20,320
That's because this message only comes up in this clause.

53
00:03:20,530 --> 00:03:27,640
So anything we're going to add to it needs to be code that only needs to live, probably in this clause.

54
00:03:27,850 --> 00:03:29,290
So let's see what we can do here.

55
00:03:29,680 --> 00:03:41,050
I'm going to make a new line and we'll start simple and just say something like if if guest number is

56
00:03:41,290 --> 00:03:45,400
less than the random number.

57
00:03:46,560 --> 00:03:49,350
Then now we need to decide what we want to do here.

58
00:03:49,530 --> 00:03:56,430
I'm kind of liking this idea of having these formatted strings and then just tacking them on to the

59
00:03:56,430 --> 00:03:56,880
end.

60
00:03:57,150 --> 00:04:05,820
I'm kind of liking that approach in general, so I'm thinking to replace this with a variable right

61
00:04:05,820 --> 00:04:11,060
and then use and then turn this whole thing into a formatted string and then just tack on that variable

62
00:04:11,070 --> 00:04:12,780
something along those lines.

63
00:04:12,930 --> 00:04:25,290
So let's see, how would this look if we had a string called something like two low text and we'll set

64
00:04:25,290 --> 00:04:27,300
it to null, I suppose for now.

65
00:04:27,300 --> 00:04:37,200
And then we'll say if the guest number is less than the random number, then to load text equals.

66
00:04:38,960 --> 00:04:42,040
Hyphen, you're too low.

67
00:04:42,770 --> 00:04:48,530
And then we can replace this string.

68
00:04:48,680 --> 00:04:52,190
Now, I don't really want to, I don't want to make this line too much longer than it is.

69
00:04:52,200 --> 00:04:55,510
So what I think I'm going to do is I'm going to extract this string.

70
00:04:55,520 --> 00:04:58,790
I'm going to convert this string into its own variable first.

71
00:05:00,230 --> 00:05:07,400
By selecting it and then doing a command option V and maybe I'll just call this loose text.

72
00:05:07,940 --> 00:05:15,410
All right, then I'll come over here and we'll use a string that format again so that we can tack on

73
00:05:15,410 --> 00:05:18,260
this to low tax to replace that bit there.

74
00:05:18,260 --> 00:05:21,650
So we'll do another string dot format.

75
00:05:23,040 --> 00:05:29,220
And then we'll select all of that and replace it with a percent s.

76
00:05:30,440 --> 00:05:36,260
And then we'll just plug that in with the two low text like that.

77
00:05:36,410 --> 00:05:43,370
Now I do see one issue here that I think we're going to have to address, and I think we've got the

78
00:05:43,370 --> 00:05:46,040
tests to force us to address it already.

79
00:05:46,070 --> 00:05:52,670
If I were to run this right now, I believe this test would still fail because this condition would

80
00:05:52,670 --> 00:05:55,400
not be met because this is happening.

81
00:05:55,400 --> 00:05:59,360
If you're too high and therefore too low, tax would be null.

82
00:05:59,510 --> 00:06:04,250
And we'd be trying to assign a null value here.

83
00:06:04,250 --> 00:06:08,180
And I think I don't know exactly how that would turn out, but I'm pretty sure it's not going to work.

84
00:06:08,270 --> 00:06:12,410
Actually, we can go in, just try it and see, let's let's just run this all again.

85
00:06:12,900 --> 00:06:13,940
Yeah, OK.

86
00:06:13,970 --> 00:06:21,980
So yeah, now we get you didn't get it null because we're initializing this string to a null.

87
00:06:22,370 --> 00:06:24,470
So we could fix this in one or two ways.

88
00:06:24,470 --> 00:06:28,520
We could initialize it to empty string like.

89
00:06:28,520 --> 00:06:36,680
So that's a tiny bit wasteful, though, because if this condition is true, then this little empty

90
00:06:36,680 --> 00:06:42,620
string object is going to be created for for nothing, which means that it has to be garbage collected.

91
00:06:42,680 --> 00:06:45,500
It won't cost us anything significant at all.

92
00:06:45,560 --> 00:06:52,040
But it's a little better not to do this, I think I think a better thing to do is to leave that null

93
00:06:52,040 --> 00:06:54,530
here and then just have an else block.

94
00:06:54,770 --> 00:07:02,870
So if the guest number is less than the random number, then set this text to you're too low.

95
00:07:03,260 --> 00:07:13,220
Now we could maybe do an else else and then otherwise we could just set the two low text equal to empty

96
00:07:13,220 --> 00:07:14,810
string like so.

97
00:07:14,930 --> 00:07:16,990
And I think that would get it.

98
00:07:17,000 --> 00:07:17,920
So let's see.

99
00:07:17,930 --> 00:07:19,220
Let's run this now.

100
00:07:20,250 --> 00:07:20,970
Hmm.

101
00:07:21,300 --> 00:07:22,620
Close, maybe.

102
00:07:23,770 --> 00:07:24,880
Yeah, we're very close.

103
00:07:25,030 --> 00:07:32,500
OK, so now now that looks like a perfect match, but I bet we're not quite matching due to some space

104
00:07:32,500 --> 00:07:35,530
characters or something that we are not able to see.

105
00:07:35,830 --> 00:07:41,510
So now to see what the real difference here is here, we can actually click on this, see the difference.

106
00:07:41,770 --> 00:07:43,240
So if we click on that?

107
00:07:44,440 --> 00:07:51,550
Yeah, look at that we we get a little green space here showing us that there's an extra space right

108
00:07:51,550 --> 00:07:54,460
there, which doesn't exist here.

109
00:07:54,550 --> 00:07:55,090
All right.

110
00:07:55,480 --> 00:07:58,210
So how do you think we could get rid of this?

111
00:07:58,330 --> 00:08:00,670
Can you think of a way that we could fix this?

112
00:08:02,230 --> 00:08:02,680
All right.

113
00:08:02,890 --> 00:08:07,840
I think one thing we could do that would be pretty easy.

114
00:08:08,020 --> 00:08:14,140
You may not remember this method, but we learned it in the text manipulation module.

115
00:08:14,200 --> 00:08:23,140
We can use a method that will strip all of the trailing spaces so we can actually use the let's see

116
00:08:23,140 --> 00:08:25,000
the trim method here.

117
00:08:25,270 --> 00:08:27,110
And there are actually a couple of ways we could do this.

118
00:08:27,130 --> 00:08:34,390
We can use trim, which will get rid of both leading and trailing space, or we could use one of the

119
00:08:34,390 --> 00:08:37,420
strip methods to strip either the leading or trailing.

120
00:08:37,420 --> 00:08:41,140
In this case, we'd want to strip the trailing, so either of those would be fine.

121
00:08:41,140 --> 00:08:47,470
Trim or strip trailing would probably be appropriate, I guess, since since I'm already highlighted

122
00:08:47,470 --> 00:08:50,860
on the trim, I'm going to go for the trim method here.

123
00:08:51,070 --> 00:08:53,470
So let's run this again and see.

124
00:08:53,920 --> 00:08:54,700
There we go.

125
00:08:54,880 --> 00:08:56,020
We got everything passing.

126
00:08:56,020 --> 00:08:57,820
So just a quick reminder here.

127
00:08:57,820 --> 00:09:03,850
The trim method simply removes any leading or trailing space characters.

128
00:09:03,970 --> 00:09:09,970
And that's exactly the issue that we have here is that we end up with an extra space at the end and

129
00:09:09,970 --> 00:09:11,080
we just don't want that.

130
00:09:11,440 --> 00:09:14,680
So this trim method fixes that perfectly.

131
00:09:15,250 --> 00:09:21,070
All right, now, let's go back over to our tests and now let's look at this because we're not done

132
00:09:21,070 --> 00:09:21,380
here.

133
00:09:21,400 --> 00:09:25,090
We just got this back to working again, but now we want to revise this.

134
00:09:25,270 --> 00:09:28,060
So this is a scenario where we're too high, right?

135
00:09:28,060 --> 00:09:30,160
Because we're adding one to the random numbers.

136
00:09:30,160 --> 00:09:33,190
So we're our guest is going to technically be too high.

137
00:09:33,460 --> 00:09:37,870
So in this case, we'd want it to give us some feedback and tell us you didn't get it.

138
00:09:39,160 --> 00:09:41,890
You're too high, right?

139
00:09:42,220 --> 00:09:46,000
So let's run all the tests again, and this should fail again now.

140
00:09:46,300 --> 00:09:47,140
Yep, there we go.

141
00:09:47,170 --> 00:09:47,490
All right.

142
00:09:47,500 --> 00:09:48,430
So now that's failing.

143
00:09:48,610 --> 00:09:51,730
Now let me just step back real quick before we go and fix this.

144
00:09:51,880 --> 00:09:54,910
Make sure you're all keeping up with what we just did here.

145
00:09:55,150 --> 00:09:59,830
So first, we changed the negative situation in which we were too low.

146
00:10:00,190 --> 00:10:06,070
And we said, Hey, when when we're too low I want, I expect that we'll get feedback telling us that

147
00:10:06,070 --> 00:10:06,850
we're too low.

148
00:10:06,940 --> 00:10:07,260
Right?

149
00:10:07,360 --> 00:10:08,170
So we did that.

150
00:10:08,500 --> 00:10:10,100
Then we ran all the tests.

151
00:10:10,510 --> 00:10:13,030
And then this test failed.

152
00:10:13,540 --> 00:10:19,840
Then we did the simplest thing I could think to do to make it pass, which was to simply hard code.

153
00:10:20,260 --> 00:10:24,790
This message then ran all the tests again, then this pass.

154
00:10:24,790 --> 00:10:26,470
But then this one failed.

155
00:10:26,590 --> 00:10:34,630
So then I refactored the implementation code, the system under test code, the code not in this class,

156
00:10:34,630 --> 00:10:37,750
but the actual game class guessing game class.

157
00:10:37,990 --> 00:10:45,250
I refactored it to implement this functionality in a smarter way other than just other than just hard

158
00:10:45,250 --> 00:10:46,030
coding it.

159
00:10:46,570 --> 00:10:50,140
And then we ran all the tests again and then this passed.

160
00:10:50,650 --> 00:10:52,500
But then this failed, right?

161
00:10:52,570 --> 00:10:58,270
And so then I had to fix that again, and I hadn't yet even added any of this right?

162
00:10:58,270 --> 00:11:03,220
So I was just trying to get all of the tests back to a working state.

163
00:11:03,230 --> 00:11:12,370
So my point here is I'm you really want to try to limit your changes in both the tests and the system

164
00:11:12,370 --> 00:11:14,420
under test to one change at a time.

165
00:11:14,440 --> 00:11:14,770
Right.

166
00:11:15,070 --> 00:11:18,460
So all I initially did was just make this change.

167
00:11:18,640 --> 00:11:24,430
Then I did everything I needed to do on the back end to get all of these tests working again.

168
00:11:24,700 --> 00:11:31,120
Then, and only after I got all of these tests working did I come in here and then say, OK, now let's

169
00:11:31,120 --> 00:11:34,810
make it so that we see this message about being too high, right?

170
00:11:35,350 --> 00:11:37,540
And now we're having to fix this.

171
00:11:37,690 --> 00:11:44,740
So one change at a time, you don't want to introduce multiple changes all at once because then you

172
00:11:44,740 --> 00:11:48,210
complicate what it is that you're there to fix, right?

173
00:11:48,610 --> 00:11:51,910
Or implement one change at a time, ideally.

174
00:11:52,120 --> 00:11:52,500
All right.

175
00:11:52,510 --> 00:11:59,320
So now we can jump over back into the system under test, which is the guessing game class.

176
00:11:59,860 --> 00:12:01,390
And so now let's see.

177
00:12:01,390 --> 00:12:03,490
We need it to say you didn't get it.

178
00:12:03,670 --> 00:12:06,760
You're too high if in fact you are too high.

179
00:12:07,060 --> 00:12:12,310
And I think this should be pretty easy to do now without breaking anything else.

180
00:12:12,580 --> 00:12:16,360
We'll just add on to this, if else block here.

181
00:12:16,630 --> 00:12:22,840
And I think we can just add an additional EFL's statement right on the end of here.

182
00:12:22,850 --> 00:12:25,540
So like else, if.

183
00:12:27,640 --> 00:12:34,720
Guest number is greater than the random number then.

184
00:12:35,110 --> 00:12:42,490
And then I want to join this line 25 up to line 24, and by the way, if you ever want to join two lines

185
00:12:42,760 --> 00:12:45,310
like I want to do here, get this this line.

186
00:12:46,180 --> 00:12:47,170
Get this else.

187
00:12:47,320 --> 00:12:49,330
And then the curly brace up on this line.

188
00:12:49,330 --> 00:12:54,040
24 to join it all up just for my formatting, the way that I have an else here.

189
00:12:54,040 --> 00:12:57,100
And then the curly brace, there is a keyboard shortcut to do that.

190
00:12:57,130 --> 00:13:02,350
Of course, you could just hit the delete key a few times until it all joins up.

191
00:13:02,500 --> 00:13:03,730
But I don't like doing that.

192
00:13:03,730 --> 00:13:06,490
I like doing, you know, the keyboard shortcuts, right?

193
00:13:06,700 --> 00:13:08,530
And do it all in one fell swoop.

194
00:13:08,830 --> 00:13:12,280
So to do that, it is a control shift, J.

195
00:13:12,370 --> 00:13:12,790
All right.

196
00:13:12,850 --> 00:13:14,230
Let me do that one more time for you.

197
00:13:14,230 --> 00:13:18,670
So my cursor is on the line that I want to get everything on two.

198
00:13:19,030 --> 00:13:26,140
And then on Mac, I'm doing control shift j for join all right and on Windows also control shift j.

199
00:13:26,470 --> 00:13:31,570
So that joins the bottom line up to the next line above it.

200
00:13:31,600 --> 00:13:32,230
All right.

201
00:13:32,350 --> 00:13:40,860
And now in the body here, we'll just do the opposite of this, so we'll set to low text equal to hyphen.

202
00:13:40,870 --> 00:13:46,780
You're too high now that we're using the to load text for two various scenarios.

203
00:13:46,900 --> 00:13:51,400
For two opposing scenarios, I want to rename this variable to something a little better.

204
00:13:51,520 --> 00:13:55,450
Maybe I'll call it, I don't know, too low, high text or something.

205
00:13:55,450 --> 00:13:55,810
I don't know.

206
00:13:56,020 --> 00:14:02,170
So I'll just put my cursor on any one of these instances of the variable to low text that doesn't matter

207
00:14:02,170 --> 00:14:07,780
which one I'm on, and then I can refactor that with a renaming with a shift f six.

208
00:14:08,530 --> 00:14:11,290
All right, and look out all instances of that variable.

209
00:14:11,290 --> 00:14:18,190
Get highlighted now and then I can just say to add my cursus already where I want it to be too high.

210
00:14:18,280 --> 00:14:18,670
Oops.

211
00:14:18,820 --> 00:14:22,630
Lost it there, too too high.

212
00:14:23,110 --> 00:14:26,100
Low text enter.

213
00:14:26,440 --> 00:14:33,910
And so see how that renamed all places where I'm referring to that variable now, including right here

214
00:14:33,940 --> 00:14:34,570
also.

215
00:14:34,810 --> 00:14:35,230
All right.

216
00:14:35,350 --> 00:14:40,990
So now let's rerun all of the tests, and I think we may have this working.

217
00:14:42,350 --> 00:14:42,920
Awesome.

218
00:14:43,160 --> 00:14:43,790
There we go.

219
00:14:43,820 --> 00:14:44,210
Cool.

220
00:14:44,540 --> 00:14:50,480
So all of our tests are working, and now we've got a little extra functionality that we did not have

221
00:14:50,480 --> 00:14:55,880
before, and we've got a pretty well fleshed out little game engine here.

222
00:14:56,660 --> 00:14:56,960
All right.

223
00:14:56,960 --> 00:15:05,120
So I think that's just about going to do it for this module for now in teaching you how to write automated

224
00:15:05,120 --> 00:15:09,560
unit tests for basic tests like what we're doing here, there's really not a whole lot to it.

225
00:15:09,740 --> 00:15:16,220
Now there's a lot of additional techniques that you could learn, and we may touch on a few more of

226
00:15:16,220 --> 00:15:17,960
those throughout this course.

227
00:15:18,230 --> 00:15:24,200
But obviously this was enough to get you going on a fair amount of testing.

228
00:15:24,320 --> 00:15:26,060
So let's just review this real quick.

229
00:15:26,070 --> 00:15:33,020
So we've got the before each annotation here, which allows us to run some bit of code inside of the

230
00:15:33,020 --> 00:15:35,750
method before each test method runs.

231
00:15:35,750 --> 00:15:42,620
If we need it, then we've got the at test annotation to indicate that a method is an actual test.

232
00:15:42,950 --> 00:15:50,090
We also saw earlier on the repeated test annotation that you can use.

233
00:15:50,120 --> 00:15:55,760
Alternatively, instead of the test annotation and with this one, it has parentheses so that you can

234
00:15:55,760 --> 00:15:59,900
pass in the number of times that you want that test to be repeated.

235
00:15:59,910 --> 00:16:02,150
So that can be quite helpful sometimes.

236
00:16:03,290 --> 00:16:03,560
All right.

237
00:16:03,560 --> 00:16:07,970
But after we got everything nailed down, I decided we didn't need to keep it there.

238
00:16:07,970 --> 00:16:10,580
We could have, but I didn't think it was necessary.

239
00:16:10,790 --> 00:16:16,370
And then we also learned, obviously about the assertions which which really finalized the test.

240
00:16:16,520 --> 00:16:23,540
So I've actually seen professional software developers who claimed to know how to write unit tests with

241
00:16:23,540 --> 00:16:25,790
J Unit, the framework we're using here.

242
00:16:26,240 --> 00:16:29,510
And they wrote tests and didn't have a single assertion.

243
00:16:29,510 --> 00:16:31,060
And let me just tell you real quick.

244
00:16:31,070 --> 00:16:36,800
In fact, let me just show you real quick what happens if you don't have an assertion in a J unit test?

245
00:16:36,800 --> 00:16:38,480
So we'll make a quick test here.

246
00:16:39,110 --> 00:16:42,740
Public void junk test.

247
00:16:44,280 --> 00:16:46,440
And I'm not going to put anything in there at all.

248
00:16:46,560 --> 00:16:48,570
Now let's run this and see what happens.

249
00:16:50,590 --> 00:16:52,480
And I'm only going to run just this one test.

250
00:16:53,710 --> 00:16:59,470
OK, so look at what happens there if you have no assertion by default, the test passes, I've seen

251
00:16:59,470 --> 00:17:07,720
a number of software developers who claimed to know how to write unit tests, write a test with no assertion

252
00:17:07,720 --> 00:17:08,410
whatsoever.

253
00:17:08,410 --> 00:17:12,340
And of course, they see things passing and they think, Hey, I wrote a great test.

254
00:17:12,350 --> 00:17:12,940
No, you didn't.

255
00:17:12,940 --> 00:17:15,670
You didn't write anything at all without an assertion.

256
00:17:15,670 --> 00:17:22,180
You do not have a test because you're not telling the test what it should check to determine whether

257
00:17:22,180 --> 00:17:24,520
or not it actually is working, right?

258
00:17:24,730 --> 00:17:26,830
You have nothing without an assertion.

259
00:17:27,190 --> 00:17:27,530
All right.

260
00:17:27,550 --> 00:17:36,430
So we learned about the static method assert equals, which is generally the most common type of assertion.

261
00:17:36,430 --> 00:17:42,340
But let me tell you now there are actually quite a large number of assertions that you could use, and

262
00:17:42,340 --> 00:17:45,010
I will show you a few of those before I do.

263
00:17:45,160 --> 00:17:52,840
Let's also talk about the fact that you can optionally supply a message to be shown in the event that

264
00:17:52,840 --> 00:17:54,910
your assertion doesn't work.

265
00:17:55,090 --> 00:18:02,440
And this is particularly helpful when you run into a scenario where you have one test method with multiple

266
00:18:02,470 --> 00:18:07,180
loops, with multiple assertions, with multiple assertions.

267
00:18:07,450 --> 00:18:07,860
OK.

268
00:18:08,080 --> 00:18:14,560
Where you'd be asserting various things like you might want to assert that the number three exists in

269
00:18:14,650 --> 00:18:21,910
this message, in addition to asserting that the term you got it exists, so you could do that in two

270
00:18:21,910 --> 00:18:22,660
separate states.

271
00:18:22,660 --> 00:18:24,570
In fact, let's do that real quick.

272
00:18:24,580 --> 00:18:26,990
I'll just show you what that would could look like.

273
00:18:27,010 --> 00:18:27,370
OK?

274
00:18:27,730 --> 00:18:36,220
So if we wanted to verify that no, not only the number three is here separately, but also that the

275
00:18:36,220 --> 00:18:41,680
message you got it is here separately, but all in this one test, we can do that.

276
00:18:41,890 --> 00:18:43,600
Now we can do that in a few ways.

277
00:18:43,750 --> 00:18:47,170
We could use another assertion method.

278
00:18:47,350 --> 00:18:53,260
So one way that we can learn about the additional assertion methods, by the way, and this is this

279
00:18:53,260 --> 00:18:58,870
one out of many ways you could actually go up to where this assert equals is being imported, which

280
00:18:58,870 --> 00:19:01,300
is at the very top here, right here.

281
00:19:01,630 --> 00:19:09,010
And if you put your cursor right after this period and then do a control space, we can actually pull

282
00:19:09,010 --> 00:19:17,350
up all of the other static methods that exist on this assertions class here and see what else there

283
00:19:17,350 --> 00:19:17,830
is.

284
00:19:17,950 --> 00:19:21,790
And look, it just there's so many just of the equals there.

285
00:19:21,970 --> 00:19:31,300
There's a all and assert array equals, and so many assert that assert does not throw and assert false.

286
00:19:31,510 --> 00:19:36,520
That's, you know, one worth being aware of that just asserts that you have a Boolean that's false

287
00:19:36,970 --> 00:19:40,750
or a Boolean expression or something that evaluates to false.

288
00:19:41,050 --> 00:19:42,550
And of course, there would be an assert.

289
00:19:42,550 --> 00:19:47,740
True, there's a certain lines match assert, not equal.

290
00:19:48,040 --> 00:19:50,470
OK, so that's potentially useful.

291
00:19:50,800 --> 00:19:52,350
Assert, not null.

292
00:19:52,360 --> 00:19:57,430
Assert null, assert same throws time out.

293
00:19:58,090 --> 00:19:58,930
True.

294
00:19:59,140 --> 00:19:59,530
OK.

295
00:19:59,560 --> 00:20:01,030
So there's quite a bit.

296
00:20:01,120 --> 00:20:07,390
And then there are additional third party libraries that give us even more assertions than than these.

297
00:20:07,720 --> 00:20:16,960
So there's quite a bit, but generally assert equals tends to be probably the most used and the most

298
00:20:16,960 --> 00:20:19,300
useful assertion in general.

299
00:20:19,300 --> 00:20:26,200
And it is often recommended to do your best to use this because I using an assert equals you get really

300
00:20:26,200 --> 00:20:32,470
great feedback when the assertion fails, because then you can compare as you saw us do earlier.

301
00:20:32,560 --> 00:20:36,010
You can actually compare the actual compared to the expected.

302
00:20:36,730 --> 00:20:37,020
All right.

303
00:20:37,030 --> 00:20:42,520
So let's go down here real quick, though, and we can show how to use multiple assertions here.

304
00:20:42,700 --> 00:20:47,740
So let's say we first want to just assert that the number three will exist here.

305
00:20:47,800 --> 00:20:48,190
Right?

306
00:20:48,430 --> 00:20:56,470
So one way we could do that could be to change this from an assert equals two maybe and assert true

307
00:20:56,890 --> 00:21:03,180
and then say something like message that contains you.

308
00:21:03,180 --> 00:21:07,450
Remember, we learned this method here contains three.

309
00:21:07,720 --> 00:21:11,710
So we could do that and we could even put up a little space in there if we wanted to.

310
00:21:11,740 --> 00:21:12,670
Not that it matters.

311
00:21:12,970 --> 00:21:15,520
Notice that this is true is in red.

312
00:21:15,610 --> 00:21:20,920
That's because it needs to be imported so we can either use the red light bulb there or we can put our

313
00:21:20,920 --> 00:21:26,950
cursor here on this word and then do an option return to import it like so.

314
00:21:27,220 --> 00:21:33,190
And now, because we're about to have multiple assertions here, I definitely would supply a message

315
00:21:33,190 --> 00:21:38,350
here to say something like, I don't know, maybe like should indicate.

316
00:21:39,690 --> 00:21:42,210
Three tries, you know?

317
00:21:42,240 --> 00:21:42,660
All right.

318
00:21:42,930 --> 00:21:46,680
And then let's see, you got it in three tries.

319
00:21:46,800 --> 00:21:49,740
Then we could do something similar here as well.

320
00:21:50,100 --> 00:21:51,870
Like, maybe say true.

321
00:21:56,400 --> 00:22:00,060
Message Dot contains.

322
00:22:01,230 --> 00:22:02,880
You got it.

323
00:22:04,310 --> 00:22:09,260
And then we can say for a message here should indicate that.

324
00:22:10,240 --> 00:22:13,390
We got the right number.

325
00:22:14,420 --> 00:22:17,030
And then maybe we don't need this last one, right?

326
00:22:17,420 --> 00:22:19,400
So let's just run this by itself.

327
00:22:20,580 --> 00:22:22,140
All right, so of course, that passes.

328
00:22:22,350 --> 00:22:26,700
Now let's break it on purpose here so that we can see what this world would look like.

329
00:22:27,060 --> 00:22:29,670
You don't got it.

330
00:22:29,760 --> 00:22:30,250
All right.

331
00:22:30,270 --> 00:22:31,650
And then let's run that.

332
00:22:32,520 --> 00:22:32,910
All right.

333
00:22:33,090 --> 00:22:38,580
So now we see that the expected assertion was true, but the actual was false.

334
00:22:38,820 --> 00:22:44,850
And now it's telling us that we should have gotten indication and indication of three tries.

335
00:22:45,750 --> 00:22:49,440
All right now, because this first assertion failed.

336
00:22:49,650 --> 00:22:52,420
We don't even get to see the next assertion yet.

337
00:22:52,440 --> 00:22:52,920
OK.

338
00:22:53,040 --> 00:22:59,610
And so one of the nice things about supplying this message is that it helps you to pinpoint which assertion

339
00:22:59,610 --> 00:23:02,640
actually failed when you have multiple assertions.

340
00:23:02,870 --> 00:23:03,530
You get that.

341
00:23:03,540 --> 00:23:09,660
So if we didn't have this message here, it would be less clear immediately which of these assertions

342
00:23:09,660 --> 00:23:10,500
was failing.

343
00:23:10,710 --> 00:23:21,030
So if we fix this one and then rerun, OK, now we see that the second assertion fails and we get that

344
00:23:21,030 --> 00:23:24,390
message as well should indicate that we got the right number right.

345
00:23:24,450 --> 00:23:28,050
So that's how you can pinpoint which assertion is actually failing.

346
00:23:28,290 --> 00:23:34,570
But if one assertion fails within a test method, the subsequent assertions won't even run OK.

347
00:23:34,590 --> 00:23:36,660
It'll just stop on the one that's failing.

348
00:23:36,900 --> 00:23:43,290
So I would say definitely if you have more than one assertion in a test method which you should generally

349
00:23:43,290 --> 00:23:45,030
be conservative about doing.

350
00:23:45,030 --> 00:23:50,310
But if you are inclined to do it and I do do it occasionally, there's some cases where it feels like

351
00:23:50,310 --> 00:23:51,420
the right thing to do.

352
00:23:51,630 --> 00:23:53,310
This isn't really one of them, by the way.

353
00:23:53,310 --> 00:23:55,440
I'm just showing you this as an example.

354
00:23:55,530 --> 00:23:59,880
But if you are going to have multiple assertions and a test method, definitely, definitely.

355
00:23:59,880 --> 00:24:05,370
You should include a message so that it can help you to pinpoint which of the assertions is actually

356
00:24:05,370 --> 00:24:05,850
failing.

357
00:24:06,360 --> 00:24:06,870
All right.

358
00:24:06,870 --> 00:24:15,780
So you have now learned, I think enough about test driven development to go forth and conquer and write

359
00:24:15,780 --> 00:24:21,270
at least simple implementations of code with decent little tests.

360
00:24:21,420 --> 00:24:29,010
Now there's a lot more that can be done with writing tests, and we will likely engage in a few more

361
00:24:29,010 --> 00:24:36,180
scenarios as we learn more advanced techniques not just with testing, but with writing code in general.

362
00:24:36,270 --> 00:24:40,560
There's a whole other world, in fact, of writing code that can be tested.

363
00:24:40,830 --> 00:24:42,120
But we'll get there in time.

364
00:24:42,330 --> 00:24:45,480
So I hope this will serve you very, very well.

365
00:24:45,510 --> 00:24:49,260
You will be well ahead of many people in the job market.

366
00:24:49,470 --> 00:24:52,650
If you've really put the time and effort in on this module.

367
00:24:52,950 --> 00:24:56,520
So with that, I will close this out and I will see you in the next one.
