1
00:00:00,510 --> 00:00:07,110
All right, so next up on our tour to learn about the various interfaces and classes in the Java Collections

2
00:00:07,110 --> 00:00:10,140
framework, we're going to learn about maps.

3
00:00:10,650 --> 00:00:12,030
So what are maps?

4
00:00:12,510 --> 00:00:21,510
Well, a map is an interface in the overall collections framework, and the concept that a map represents

5
00:00:21,510 --> 00:00:28,530
is basically a table like I've shown before the inner workings of a hash that it's a table that allows

6
00:00:28,530 --> 00:00:31,680
us to associate objects to each other.

7
00:00:32,190 --> 00:00:37,890
Those objects will be in the form of what we generally refer to as a key value pair.

8
00:00:38,070 --> 00:00:39,690
So one object is the key.

9
00:00:39,840 --> 00:00:45,720
The other object is the value, and you use the key to look up the value.

10
00:00:45,930 --> 00:00:47,760
OK, but they're both objects.

11
00:00:48,420 --> 00:00:51,180
So why might we want this functionality?

12
00:00:51,600 --> 00:00:57,900
Well, maps are actually very common in many, many programming circumstances.

13
00:00:58,050 --> 00:01:04,320
Pretty much any time you want to do a simple lookup of some type of data, I mean, think about dictionaries

14
00:01:04,320 --> 00:01:08,700
for for a moment, a dictionary has a key and a value.

15
00:01:08,700 --> 00:01:14,730
The key is typically the word, and then the value will be the definition of the word.

16
00:01:14,820 --> 00:01:22,050
OK, so there's one example of the functionality of a map in programming, though just about any time

17
00:01:22,050 --> 00:01:26,430
we want to associate two pieces of information with each other.

18
00:01:26,610 --> 00:01:34,650
And especially if we have a list of those types of associations, more often than not, a map will be

19
00:01:34,650 --> 00:01:35,430
called for.

20
00:01:35,640 --> 00:01:40,800
For those of you who are a little more knowledgeable about how your computer works, especially if you

21
00:01:40,800 --> 00:01:47,910
work in Windows or Linux, you may be familiar with the concept of environment variables.

22
00:01:47,910 --> 00:01:56,610
Perhaps where you can set these values are variables that may control how programs work or how the computer

23
00:01:56,610 --> 00:01:57,900
itself functions.

24
00:01:58,170 --> 00:02:04,740
Environment variables are another example of key value pairs where you will define a variable and then

25
00:02:04,740 --> 00:02:06,670
it will have some value set for it.

26
00:02:06,690 --> 00:02:12,150
So, for example, frequent one is setting a path variable or something like that.

27
00:02:12,390 --> 00:02:14,770
You'll have a key that is like a name.

28
00:02:15,540 --> 00:02:17,730
In this case, it might be called path.

29
00:02:17,940 --> 00:02:25,980
And then the value will be an actual path to some directories or folders or files or whatever.

30
00:02:26,670 --> 00:02:34,230
Now you may recall from the introduction video for this module that technically speaking, even though

31
00:02:34,230 --> 00:02:41,580
a map interface is considered to be part of the collections framework within Java, unlike list and

32
00:02:41,580 --> 00:02:47,940
set, the map interface does not extend from the collection interface.

33
00:02:48,150 --> 00:02:56,550
However, because it does still store references to collections of objects, it is part of the overall

34
00:02:56,550 --> 00:02:58,110
Java Collections framework.

35
00:02:58,140 --> 00:03:04,350
One other thing I'll note is that the map interface has three most common implementations.

36
00:03:04,590 --> 00:03:12,900
And as luck would have it, those implementations mirror very closely the implementations of the set

37
00:03:12,900 --> 00:03:15,480
interface, so they will be very familiar.

38
00:03:16,050 --> 00:03:22,650
We've got a hash map which uses a hash key just like the set does.

39
00:03:22,650 --> 00:03:30,420
And in fact, if you'll recall, set hash set actually uses a hash map underneath it as its own implementation

40
00:03:30,420 --> 00:03:30,990
anyway.

41
00:03:31,800 --> 00:03:38,910
So there's a hash map, there's a tree map, and it works as you might imagine it would.

42
00:03:39,060 --> 00:03:46,980
So where tree set is able to retain a natural ordering for items in it, a tree map does the same thing

43
00:03:46,980 --> 00:03:50,490
for its entries, and it does it on the keys.

44
00:03:51,360 --> 00:03:57,840
And then finally, there is the linked hash map, which is capable of keeping the entries of the map

45
00:03:57,840 --> 00:04:02,510
and by by the way, entry is just a key value pair the pairing of those, right?

46
00:04:02,520 --> 00:04:04,080
So one row, if you will.

47
00:04:04,140 --> 00:04:08,250
So those are the most common implementations of the map interface.

48
00:04:08,550 --> 00:04:11,760
So without further ado, let's jump in and see how to use them.
