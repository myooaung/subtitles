1
00:00:00,240 --> 00:00:06,090
All right, so let's jump in to these regular expressions, and to do this, let's create a new class.

2
00:00:06,420 --> 00:00:10,200
I'm in the people project here, but it really doesn't matter what project you're in.

3
00:00:10,680 --> 00:00:13,560
So I'm going to right click on the source folder here.

4
00:00:14,670 --> 00:00:20,040
And I'm going to go to new and Java class, and it doesn't really matter what we call this, I'm going

5
00:00:20,040 --> 00:00:23,730
to call it Rag X practice.

6
00:00:25,180 --> 00:00:32,830
And hit return, and I've got my new class, and I'm going to close this project pain there to get a

7
00:00:32,830 --> 00:00:33,850
little more space.

8
00:00:33,970 --> 00:00:38,890
So the first thing we'll do, let's just experiment with some of the simplest things that we can do

9
00:00:38,890 --> 00:00:40,480
with a regular expression.

10
00:00:41,230 --> 00:00:47,800
So we will start off by create a new line here and let's create a public static void main method so

11
00:00:47,800 --> 00:00:49,990
that we have a place to execute our code.

12
00:00:51,120 --> 00:00:53,560
SVM All lowercase return.

13
00:00:53,590 --> 00:00:53,980
OK.

14
00:00:54,460 --> 00:01:01,390
And we'll start off with the simplest type of expression, regular expression, which would just utilize

15
00:01:01,390 --> 00:01:02,530
a string literal.

16
00:01:03,010 --> 00:01:09,850
So what we want to do here is we just want to ask the regular expression engine if one word matches

17
00:01:09,850 --> 00:01:11,920
a pattern that we have predefined.

18
00:01:12,100 --> 00:01:17,210
So let's use a simple word like cat to find out whether or not this word matches our pattern.

19
00:01:17,410 --> 00:01:21,760
We'll just print that out on the screen using the system that out that print line.

20
00:01:22,090 --> 00:01:24,820
So I'll do a T return.

21
00:01:25,120 --> 00:01:32,650
And so I want to know if the word cat, the string cat in I'm going to do a period here matches.

22
00:01:32,830 --> 00:01:36,940
And if you'll notice so the matches method takes a regular expression.

23
00:01:36,940 --> 00:01:42,970
OK, and I think we saw this in the previous lessons where we did look at matches, but we didn't go

24
00:01:42,970 --> 00:01:46,900
deep into what it meant to make a regular expression within here.

25
00:01:46,910 --> 00:01:49,270
So now we'll start digging into this a little bit more.

26
00:01:49,780 --> 00:01:53,440
OK, so this first example will really just be review.

27
00:01:53,800 --> 00:02:01,300
So will choose matches, and the simplest expression that we could make is just a literal expression,

28
00:02:01,300 --> 00:02:03,270
a literal string or string literal.

29
00:02:03,280 --> 00:02:06,280
So we could just do all lowercase cat just like that.

30
00:02:06,490 --> 00:02:06,910
OK.

31
00:02:07,150 --> 00:02:11,500
And so we're really just saying, does this string match this string here?

32
00:02:11,830 --> 00:02:13,330
And so if we run that?

33
00:02:16,190 --> 00:02:17,330
We get true.

34
00:02:17,420 --> 00:02:19,820
So, yes, that does match.

35
00:02:20,150 --> 00:02:28,870
And it is case sensitive, so if we do like a Capital C and then we run that this should not match.

36
00:02:28,910 --> 00:02:36,230
Indeed, we get a false here because our expression does not indicate that we will allow for a Capital

37
00:02:36,230 --> 00:02:36,950
C there.

38
00:02:37,580 --> 00:02:39,830
And so I mean, that's really straightforward.

39
00:02:40,040 --> 00:02:46,640
Probably not the most useful thing unless you literally want to just test for the exact occurrence of

40
00:02:46,640 --> 00:02:49,160
a string, which yeah, you may want to do that sometimes.

41
00:02:49,430 --> 00:02:55,490
But that's not even getting close to scratching the surface of all the power that we have with regular

42
00:02:55,490 --> 00:02:56,210
expressions.

43
00:02:56,480 --> 00:03:00,860
So now that we've seen that, let's expand our abilities here a little bit.

44
00:03:01,160 --> 00:03:07,490
So like I just showed here, this matched as long as the C here was lowercase, because that's what

45
00:03:07,490 --> 00:03:08,840
our pattern was expecting.

46
00:03:08,840 --> 00:03:15,950
But what if we wanted to accept upper or lower case now with the previous methods that we have learned?

47
00:03:16,160 --> 00:03:23,030
I did mention that you could do something like simply lower case the whole entire word first.

48
00:03:23,090 --> 00:03:23,460
Right?

49
00:03:23,480 --> 00:03:28,370
So you could do you could do to lower case.

50
00:03:28,670 --> 00:03:29,170
Oops.

51
00:03:29,780 --> 00:03:31,550
I don't really want that version of it.

52
00:03:33,040 --> 00:03:37,180
You could do to lower case and then you could do matches, and in fact, this would work.

53
00:03:37,840 --> 00:03:38,340
It will.

54
00:03:38,340 --> 00:03:40,120
We'll just run that little bit of review.

55
00:03:40,420 --> 00:03:41,440
OK, so that's true.

56
00:03:41,470 --> 00:03:42,700
So that does work, right?

57
00:03:42,910 --> 00:03:48,520
But if you don't want to get into all of that, if you want to do it in a more native regular expression

58
00:03:48,520 --> 00:03:50,800
way, let's look at what we could do there.

59
00:03:50,950 --> 00:03:58,270
So now I'm going to introduce the concept of character classes, and these are just patterns that we

60
00:03:58,270 --> 00:04:03,190
can use to represent one or more characters within a string.

61
00:04:03,460 --> 00:04:09,820
So in our case here, we want to allow for either a lower case or an uppercase C.

62
00:04:10,150 --> 00:04:14,440
So one way that we can do that is to use a bracket expression.

63
00:04:14,650 --> 00:04:17,290
And to do that, we put some brackets here.

64
00:04:18,040 --> 00:04:21,190
So I'm going to put square bracket around that, see?

65
00:04:22,060 --> 00:04:29,530
And then within the brackets, any characters that I place inside of these brackets will indicate that

66
00:04:29,530 --> 00:04:32,920
we want to match any of those possibilities.

67
00:04:32,950 --> 00:04:35,140
So in this case, we've got a lowercase C here.

68
00:04:35,140 --> 00:04:41,470
But if I also put an uppercase see what I'm now saying to the regular expression engine, the thing

69
00:04:41,470 --> 00:04:44,410
that is actually testing, whether or not we have a match.

70
00:04:44,950 --> 00:04:55,810
I'm saying if this word starts with a lower case C or an uppercase C, followed by lowercase a T, that's

71
00:04:55,810 --> 00:04:56,440
a match.

72
00:04:56,770 --> 00:05:01,510
OK, so that's what these brackets or a bracket expression is doing by default.

73
00:05:01,570 --> 00:05:06,910
It's testing either or OK, a c, a lowercase or an uppercase.

74
00:05:07,060 --> 00:05:08,620
So now if I run this?

75
00:05:11,810 --> 00:05:17,330
OK, we get a true for that, and then if I drop this back down the sea, back down to a lowercase C

76
00:05:17,330 --> 00:05:18,580
and run it again.

77
00:05:20,600 --> 00:05:21,380
Still true.

78
00:05:21,800 --> 00:05:28,280
OK, now what if I use a letter that isn't expected in this pattern, such as a bee?

79
00:05:28,490 --> 00:05:28,890
Right?

80
00:05:29,480 --> 00:05:30,750
So let's try that.

81
00:05:30,800 --> 00:05:33,650
So we'll do BRT and we'll run that.

82
00:05:35,380 --> 00:05:37,180
OK, and I get a false here.

83
00:05:37,420 --> 00:05:45,190
So this pattern is only allowing for lower or upper Casey, followed by an A and a T lowercase A. A.

84
00:05:45,200 --> 00:05:47,260
OK, so it is case sensitive.

85
00:05:47,890 --> 00:05:55,120
All right now, if I did one to allow for the B in addition to the Lower and Upper Casey, what do you

86
00:05:55,120 --> 00:05:56,110
think I could do here?

87
00:05:56,740 --> 00:05:58,030
Give you a second to think about it.

88
00:05:59,600 --> 00:05:59,960
OK.

89
00:05:59,990 --> 00:06:06,560
You think you got it all right, so all you need to do is just add a B in here, so you can add I don't

90
00:06:06,560 --> 00:06:07,810
know what the limit is.

91
00:06:07,820 --> 00:06:13,790
I'm sure there is a limit, but for all intents and purposes, you can add as many individual characters

92
00:06:13,790 --> 00:06:20,550
and symbols in here as you need to specify your your, your matching or your regular expression here.

93
00:06:20,570 --> 00:06:26,210
OK, so I've got a lower Casey and uppercase and lowercase B, and while I'm at it, I might as well

94
00:06:26,210 --> 00:06:28,100
throw in an uppercase B as well.

95
00:06:28,370 --> 00:06:32,300
So now if we run this note, it was false.

96
00:06:32,300 --> 00:06:33,380
And now it's true.

97
00:06:34,040 --> 00:06:40,070
OK, so and then I can also come over here and make this a Capital B and run that.

98
00:06:42,240 --> 00:06:44,850
OK, so very good, so you get the point, right?

99
00:06:45,000 --> 00:06:52,080
You can play lots of characters in in here and it will accept any one of them essentially in this case.

100
00:06:52,560 --> 00:07:00,930
OK, now expanding on this, what if we wanted to allow the first letter in this string to be anything

101
00:07:00,930 --> 00:07:05,190
ranging from A to F all lowercase A to F.?

102
00:07:05,790 --> 00:07:07,710
Well, there's a way to do that as well.

103
00:07:07,920 --> 00:07:14,520
Now, obviously, you could just say A, B, C, D, E and F, right, and that certainly would work.

104
00:07:15,120 --> 00:07:23,100
But there's a nicer way, more elegant way to do this and that is using a range so we can specify a

105
00:07:23,100 --> 00:07:27,630
range of characters within the square bracket expression as well.

106
00:07:27,780 --> 00:07:34,000
And to do that, we can simply use a hyphen so a through f all lowercase.

107
00:07:34,020 --> 00:07:34,530
OK.

108
00:07:35,610 --> 00:07:42,060
So if I change this to a D and run this, that works.

109
00:07:42,300 --> 00:07:46,600
And if I do an F and run it, that works as well.

110
00:07:46,620 --> 00:07:56,160
However, if I do a G here and run this because G is outside of our range that does not match, I get

111
00:07:56,160 --> 00:07:57,300
a false right.

112
00:07:57,750 --> 00:07:59,580
So I think that's pretty clear.

113
00:07:59,700 --> 00:08:07,440
Now what if you wanted to allow for the range of all lowercase A through F or the range of uppercase

114
00:08:07,440 --> 00:08:08,370
A through F?

115
00:08:08,940 --> 00:08:12,000
So do you want to take a venture at how to do that?

116
00:08:12,720 --> 00:08:14,010
I'll give you a few moments.

117
00:08:15,510 --> 00:08:26,400
OK, so what you can do for that is you can simply put an uppercase a hyphen uppercase f with no space

118
00:08:26,400 --> 00:08:29,640
in between the lowercase F and the uppercase A..

119
00:08:29,670 --> 00:08:30,180
OK.

120
00:08:30,720 --> 00:08:43,320
So just as we were able to do something like a and a and this would mean except lowercase a or uppercase

121
00:08:43,320 --> 00:08:44,160
a right.

122
00:08:44,940 --> 00:08:47,730
You can do two or more ranges.

123
00:08:47,940 --> 00:08:56,200
And this is saying accept the range of lowercase A through F or the range of uppercase A through F.

124
00:08:56,220 --> 00:08:57,340
That's what this is saying.

125
00:08:57,360 --> 00:09:02,940
And by the way, you can have additional characters and ranges still, so you're not limited to just

126
00:09:02,940 --> 00:09:03,480
two.

127
00:09:03,810 --> 00:09:13,720
So say if I wanted to also allow for the range of lowercase W through Z and uppercase W throughs through

128
00:09:14,370 --> 00:09:17,060
through Z, you can do that as well.

129
00:09:17,070 --> 00:09:18,660
And you could you could keep going again.

130
00:09:18,660 --> 00:09:19,890
I'm not sure if there are limits.

131
00:09:20,200 --> 00:09:25,470
Well, again, I'm sure there is a limit to how far you could go with this, but I don't know what it

132
00:09:25,470 --> 00:09:25,830
is.

133
00:09:25,830 --> 00:09:31,140
And probably if you got anywhere near that limit, you probably shouldn't do it in that way.

134
00:09:31,710 --> 00:09:32,040
All right.

135
00:09:32,040 --> 00:09:34,290
So that's character ranges.

136
00:09:35,130 --> 00:09:42,570
Now, one other cool thing about the square bracket expressions is that you can invert them, so to

137
00:09:42,570 --> 00:09:42,990
speak.

138
00:09:43,200 --> 00:09:45,600
So you can kind of make it negative.

139
00:09:45,990 --> 00:09:48,780
So you could say, I'm going to delete all of that.

140
00:09:48,960 --> 00:09:55,620
I want to match anything that is not starting with a B, for example.

141
00:09:55,740 --> 00:10:04,990
And to do that, you will use what is called the carrot symbol, which is shift six on most Curti keyboards.

142
00:10:05,070 --> 00:10:06,040
And what did I say?

143
00:10:06,060 --> 00:10:08,550
We don't want to match on a on a C.

144
00:10:09,390 --> 00:10:10,800
OK, so not a C.

145
00:10:10,800 --> 00:10:11,810
I hope that's what I said.

146
00:10:11,820 --> 00:10:18,900
I don't know if I said a, b or C, but anyway, if you want to allow every character except a lower

147
00:10:18,900 --> 00:10:19,710
case C.

148
00:10:20,400 --> 00:10:24,960
So if I put a C here and I run this now.

149
00:10:26,790 --> 00:10:33,920
We get a false because I'm not wanting to allow this word to start with a lower case.

150
00:10:34,380 --> 00:10:39,750
Now if I use an uppercase C and run this now, I get a true.

151
00:10:40,080 --> 00:10:48,270
As long as this first character is not so you can kind of read this carrot symbol here as a not as long

152
00:10:48,270 --> 00:10:53,970
as the first character is not a C. It's going to be a match.

153
00:10:54,000 --> 00:10:57,900
OK, so let's try a non character even.

154
00:10:58,800 --> 00:10:59,130
Yeah.

155
00:10:59,430 --> 00:11:04,620
So even a non character like a hyphen here or let's see what we.

156
00:11:05,130 --> 00:11:06,480
An ampersand.

157
00:11:07,840 --> 00:11:13,620
OK, so anything that is any one character that isn't a C.

158
00:11:13,990 --> 00:11:23,760
OK, now if I were to put multiple characters here that aren't c like f l, for example, right?

159
00:11:24,490 --> 00:11:25,780
Let's see what happens now.

160
00:11:26,500 --> 00:11:28,120
OK, now I get a false.

161
00:11:28,540 --> 00:11:35,800
Now the reason I get a false on this, meaning it's not a match, is because what goes in between these

162
00:11:35,860 --> 00:11:44,800
square brackets in this particular expression, it's expecting one character that isn't AC, followed

163
00:11:44,800 --> 00:11:46,850
immediately by a A..

164
00:11:47,170 --> 00:11:55,570
Here I have two characters that are not AC, followed by A. So that pattern does not match the expression

165
00:11:55,570 --> 00:11:56,440
that I have here.

166
00:11:56,740 --> 00:12:00,040
It has to be a three character string.

167
00:12:00,160 --> 00:12:00,580
OK.

168
00:12:00,790 --> 00:12:04,810
And currently I have four character strings, so that's not going to match.

169
00:12:05,050 --> 00:12:05,470
OK.

170
00:12:06,160 --> 00:12:06,490
All right.

171
00:12:06,500 --> 00:12:10,630
So we can also use this negation with a range.

172
00:12:10,900 --> 00:12:14,050
OK, so we can say anything that isn't.

173
00:12:14,380 --> 00:12:20,590
Well, here let's let's be a little playful and give it an entire range of a through z.

174
00:12:20,620 --> 00:12:27,030
OK, so now you know, I'll make this a three character string again.

175
00:12:27,040 --> 00:12:30,790
OK, so l, which is in the range of a through Z.

176
00:12:30,800 --> 00:12:32,380
So let's see what we get now.

177
00:12:33,220 --> 00:12:41,200
We get false and that's expected because we don't want to allow the first character to be in the range

178
00:12:41,200 --> 00:12:42,080
of a through Z.

179
00:12:42,100 --> 00:12:49,480
So we're saying here any string whose first character is a fuzzy should not be allowed, followed by

180
00:12:49,480 --> 00:12:50,080
a A..

181
00:12:50,350 --> 00:12:53,170
OK, so that's fine lowercase eight through Z, by the way.

182
00:12:53,500 --> 00:13:01,390
Now with that being said, if I use a capital L, that is perfectly fine with this expression, OK?

183
00:13:01,570 --> 00:13:02,770
So is this making sense?

184
00:13:02,770 --> 00:13:07,090
You know, so far, I think we're, you know, we're using some relatively simple examples here.
