WEBVTT
1
00:00:00.060 --> 00:00:06.330
All right, so we've now got some data showing up in a nice formatted way in our table.

2
00:00:06.600 --> 00:00:09.630
However, if we jump back over to our controller.

3
00:00:11.550 --> 00:00:19.260
I will remind you that, though we have this data here, it's just really hard coded data right here,

4
00:00:19.260 --> 00:00:19.530
right?

5
00:00:19.800 --> 00:00:23.520
And we haven't really started implementing proper crud functionality.

6
00:00:23.670 --> 00:00:25.920
And by that, I mean, like, you know, a database.

7
00:00:26.670 --> 00:00:28.890
So now I get to show you how to do this.

8
00:00:29.490 --> 00:00:30.990
So let's see here.

9
00:00:30.990 --> 00:00:37.830
First off, let me open back up the File Explorer pain or whatever this thing is called the Project

10
00:00:37.950 --> 00:00:38.490
Pain.

11
00:00:38.500 --> 00:00:41.510
Hear me make that a little better sized.

12
00:00:41.520 --> 00:00:41.770
OK?

13
00:00:41.790 --> 00:00:42.330
There we go.

14
00:00:42.360 --> 00:00:42.750
All right.

15
00:00:43.080 --> 00:00:50.280
So if I minimize a few things here, I want to kind of show you the structure that I have kind of been

16
00:00:51.090 --> 00:00:52.180
driving towards.

17
00:00:52.410 --> 00:00:59.400
So we've got web things that relate to our presentation layer under the web package.

18
00:00:59.400 --> 00:01:03.180
Although although right now until is kind of grouping up the controller under the web.

19
00:01:03.180 --> 00:01:06.420
And you know what, I just realized we're missing the formatter.

20
00:01:07.050 --> 00:01:07.500
You know what?

21
00:01:07.500 --> 00:01:09.770
I think I put the format.

22
00:01:09.780 --> 00:01:10.380
Yeah, I did.

23
00:01:10.380 --> 00:01:12.200
I put that under controller.

24
00:01:12.330 --> 00:01:12.780
I'm sorry.

25
00:01:12.780 --> 00:01:13.590
I didn't mean to do that.

26
00:01:13.590 --> 00:01:16.710
It doesn't matter, really, but I didn't mean to do that.

27
00:01:17.010 --> 00:01:19.740
Let me change that real quick.

28
00:01:33.470 --> 00:01:37.190
OK, so we've got our presentation stuff under Webb.

29
00:01:37.580 --> 00:01:43.610
And then we've got our business logic stuff undercut this, and again, it's kind of just concatenating

30
00:01:43.610 --> 00:01:50.900
the business model because right now, model is the only package that we have under the bill's package.

31
00:01:50.900 --> 00:01:52.850
OK, so it's just putting those together.

32
00:01:53.660 --> 00:01:58.880
And now we're going to introduce the third part of our three tier architecture.

33
00:01:59.600 --> 00:02:01.210
And that is the data, right?

34
00:02:01.220 --> 00:02:06.470
So I'm going to introduce another package here and just call it data.

35
00:02:06.650 --> 00:02:12.230
Now I'm going to remind you again, in real life, I've never actually created package structures that

36
00:02:12.230 --> 00:02:18.410
were this explicitly named with web data, and because there's nothing wrong with it, but it's just

37
00:02:18.410 --> 00:02:23.600
not a typical thing that I will have ever done, nor have I seen it really done on teams.

38
00:02:23.840 --> 00:02:30.560
I'm really just doing this for you so that you can more easily see that web related code goes under

39
00:02:30.560 --> 00:02:31.640
the web package.

40
00:02:32.030 --> 00:02:38.870
Business data related or business logic related code goes under bills, and now the data related code

41
00:02:38.870 --> 00:02:39.800
will go under data.

42
00:02:39.800 --> 00:02:45.200
That's the only reason I'm doing this, just to make it a little more clear to you about those delineations

43
00:02:45.200 --> 00:02:46.790
of where the code belongs.

44
00:02:46.970 --> 00:02:52.580
And believe me, when I tell you that I've worked with developers who've been at it for a long, long

45
00:02:52.580 --> 00:02:58.250
time, 10 years, 20 years or whatever who, I'm convinced still don't have any idea about three tier

46
00:02:58.250 --> 00:03:04.700
architecture or architecture of any kind, or, for that matter, and have little to no concept of where

47
00:03:04.700 --> 00:03:07.700
code does belong and does not belong.

48
00:03:07.730 --> 00:03:08.180
OK.

49
00:03:08.330 --> 00:03:11.630
And so again, that's why I'm being fairly explicit with you.

50
00:03:11.660 --> 00:03:12.000
OK.

51
00:03:12.200 --> 00:03:14.480
By the way, this isn't a bad thing to do.

52
00:03:14.690 --> 00:03:17.470
It's just not something I've ever seen people typically do.

53
00:03:17.480 --> 00:03:20.000
I'm sure somebody somewhere in the world does this, though.

54
00:03:20.750 --> 00:03:20.990
All right.

55
00:03:20.990 --> 00:03:25.940
But I don't want to give you the impression that this is a standard to name your packages this way.

56
00:03:26.060 --> 00:03:34.400
It is a standard to keep your code in the right places, but not necessarily quite this explicitly named

57
00:03:34.400 --> 00:03:38.330
in terms of web data and business logic or something like that.

58
00:03:38.330 --> 00:03:38.660
OK?

59
00:03:38.930 --> 00:03:44.420
So what we are going to make here under data is a repository.

60
00:03:44.720 --> 00:03:45.050
All right.

61
00:03:45.290 --> 00:03:52.190
But so we've we've played with repository pattern a little bit now, but now we're going to do it using

62
00:03:52.190 --> 00:04:00.170
the spring data framework and this will be somewhat familiar and totally alien to you at the same time.

63
00:04:00.200 --> 00:04:02.180
So just watch what I'm going to do here.

64
00:04:02.390 --> 00:04:10.310
So under the data package, I'm going to make a new Java class and this will be a repository for the

65
00:04:10.310 --> 00:04:11.630
person class.

66
00:04:11.660 --> 00:04:14.690
OK, so I'm going to call it person repository.

67
00:04:14.840 --> 00:04:20.330
However, I'm about to go in a different direction from what you're used to already.

68
00:04:21.140 --> 00:04:25.220
Rather than creating a class, I'm actually going to create an interface.

69
00:04:26.970 --> 00:04:31.470
And by the way, you may have seen you may have noticed this little get message popping up, you're

70
00:04:31.470 --> 00:04:33.840
probably not getting that and don't worry about it.

71
00:04:33.840 --> 00:04:34.950
This is just for me.

72
00:04:35.250 --> 00:04:41.880
I've decided for this module that I will attempt to track all of my changes per each lesson.

73
00:04:41.880 --> 00:04:48.090
So that way, when you guys, if and when you guys want to go into GitHub and see the code that I was

74
00:04:48.090 --> 00:04:54.420
writing, you'd actually be able to follow along from each lesson, like the way the code looked at

75
00:04:54.420 --> 00:05:00.930
the end of each lesson rather than what I've been putting into GitHub up until now, which is kind of

76
00:05:00.930 --> 00:05:05.290
like the final way that it looks because I wasn't tracking each of my individual changes.

77
00:05:05.310 --> 00:05:05.580
Okay?

78
00:05:05.700 --> 00:05:08.660
So you can ignore this little message that keeps popping up.

79
00:05:08.680 --> 00:05:13.770
But whenever I create a new file, the ID is asking me, Hey, do you want me to track this new file?

80
00:05:13.770 --> 00:05:14.250
Forget.

81
00:05:14.460 --> 00:05:16.800
So yes, I'm doing that, but you can ignore that.

82
00:05:17.370 --> 00:05:25.800
OK, so I've got this new interface for a person repository, and I'm going to have it extend an interface

83
00:05:25.800 --> 00:05:30.540
that comes with spring data, which is crud repository.

84
00:05:30.540 --> 00:05:32.550
And that looks kind of familiar, doesn't it?

85
00:05:33.180 --> 00:05:38.640
Now this is a generic interface, and so I can actually pass in two generic types.

86
00:05:38.670 --> 00:05:45.540
The first will be the type of the domain model class that I want this repository to be responsible for

87
00:05:45.540 --> 00:05:48.840
or work with, and that would be our person class.

88
00:05:49.140 --> 00:05:51.980
The other type, though, which I will separate with a comma.

89
00:05:51.990 --> 00:05:54.510
I might as well go and import that person class now.

90
00:05:54.930 --> 00:06:00.940
The second type will be the data type of the ID property of the person class.

91
00:06:00.960 --> 00:06:01.320
OK.

92
00:06:01.590 --> 00:06:03.900
So that would be, in my case, long.

93
00:06:03.930 --> 00:06:04.300
OK.

94
00:06:04.650 --> 00:06:12.210
And then I need to annotate this interface so that when spring is starting up or in this case, spring

95
00:06:12.210 --> 00:06:13.680
data is starting up.

96
00:06:13.920 --> 00:06:21.210
It can scan through all of the classes that I have here, and it will find this interface and know that

97
00:06:21.210 --> 00:06:25.460
it should treat this interface as an actual data repository.

98
00:06:25.470 --> 00:06:25.890
OK?

99
00:06:26.010 --> 00:06:28.350
And then it'll do all kinds of magic for me.

100
00:06:28.350 --> 00:06:35.190
So to do that, I will use another annotation of the spring framework, which is at repository like

101
00:06:35.190 --> 00:06:37.080
So now guess what?

102
00:06:37.920 --> 00:06:42.960
That's all I have to do to make a repository with full crud capabilities.

103
00:06:43.170 --> 00:06:47.940
I really am not writing any actual code, not any real implementation code.

104
00:06:48.270 --> 00:06:52.170
I get a bunch of functionality for free just by doing this.

105
00:06:52.260 --> 00:06:58.140
And that's why I've been eluding all along that the spring data framework is kind of magic.

106
00:06:59.010 --> 00:06:59.400
All right.

107
00:06:59.850 --> 00:07:03.180
Now that's not enough to make all of this work, though.

108
00:07:03.600 --> 00:07:12.540
I need to go into the person class now and I need to make a few little alterations here.

109
00:07:12.780 --> 00:07:21.090
Now, do you remember in Section 12, we created a custom interface that allowed us to flag which property

110
00:07:21.090 --> 00:07:22.800
was our ID property?

111
00:07:23.100 --> 00:07:24.120
You remember doing that?

112
00:07:24.420 --> 00:07:31.070
Well, the spring data framework has a similar capability, and actually it has somewhat of a necessity.

113
00:07:31.080 --> 00:07:37.230
In fact, we have to flag which property is being used for our IDs in in this framework.

114
00:07:37.240 --> 00:07:43.830
So we will do it pretty much the same way that we did in Section 12 because I essentially was inspired

115
00:07:43.830 --> 00:07:45.940
by the way that spring data works.

116
00:07:45.960 --> 00:07:46.320
OK.

117
00:07:46.530 --> 00:07:54.960
So we will use an ID annotation, and I will import this annotation from the Java export persistence

118
00:07:54.960 --> 00:07:55.630
framework.

119
00:07:55.650 --> 00:07:56.040
OK.

120
00:07:57.960 --> 00:07:58.290
All right.

121
00:07:58.440 --> 00:08:06.780
Now I also, though, will add one more annotation to this ID field, and that is an annotation so that

122
00:08:06.780 --> 00:08:14.220
I can tell spring data that I want the IDs to be generated in the database.

123
00:08:14.340 --> 00:08:20.100
So another thing that we won't have to do now that we are using spring data in this way is we will not

124
00:08:20.100 --> 00:08:26.010
actually have to define and create the tables in the database spring data.

125
00:08:26.040 --> 00:08:31.560
Working in conjunction with an underlying framework which is called hibernate, which actually does

126
00:08:31.560 --> 00:08:39.240
all the real work in this case, those two frameworks will work together to actually analyze the Java

127
00:08:39.240 --> 00:08:47.580
class here and translate that Java class into D-Del. database definition language commands to create

128
00:08:47.610 --> 00:08:54.630
tables for any classes that we want to be able to utilize with the spring data framework.

129
00:08:54.660 --> 00:08:54.990
OK.

130
00:08:55.260 --> 00:09:01.980
So basically, it's going to analyze this class and see that we've got an ID field of type long, and

131
00:09:01.980 --> 00:09:07.230
it will translate that into a into an integer or something like that.

132
00:09:07.440 --> 00:09:14.670
And it'll translate the first name field into a VAR car with a default length of probably 255 or something

133
00:09:14.670 --> 00:09:15.330
like that.

134
00:09:15.540 --> 00:09:19.230
And it'll also name the columns based on these names.

135
00:09:19.270 --> 00:09:25.250
OK, now we can override all of those default behaviors, but if we don't overwrite anything, it really

136
00:09:25.260 --> 00:09:26.010
is very sensible.

137
00:09:26.290 --> 00:09:27.510
All values, OK.

138
00:09:27.940 --> 00:09:34.340
But we do want the database to generate these IDs for us, just as we did back in Section 12.

139
00:09:34.360 --> 00:09:39.250
I don't know if you remember, but when we were creating our people table, we specified that we wanted

140
00:09:39.250 --> 00:09:45.760
the ID column to be a primary key and to be forgot what the term auto auto numbered or something like

141
00:09:45.760 --> 00:09:46.060
that.

142
00:09:46.090 --> 00:09:52.090
OK, so we can do something equivalent here, but in Java code, and the way to do that is with an ad

143
00:09:52.090 --> 00:09:56.500
generated value annotation like so.

144
00:09:57.280 --> 00:09:58.750
And that's all we need there.

145
00:09:58.990 --> 00:10:05.620
And then one more thing that will need now in order to let spring data know that this class, the person

146
00:10:05.620 --> 00:10:12.790
class should be one of the classes that we'll be using with spring data and hibernate the underlying

147
00:10:13.060 --> 00:10:16.000
framework that actually does all the talking to the database.

148
00:10:16.000 --> 00:10:18.370
Really, we need to annotate this class.

149
00:10:18.380 --> 00:10:24.640
So just as we annotated our repository class with an app repository annotation, we need to annotate

150
00:10:24.880 --> 00:10:32.410
this class with an at entity annotation again coming from the Java persistence package.

151
00:10:33.310 --> 00:10:33.640
All right.

152
00:10:33.790 --> 00:10:38.170
Now, as soon as I did that, I got Red Squiggly under the class name here.

153
00:10:38.170 --> 00:10:44.260
And the reason is because it's complaining that hey entities are required to have a public or protected

154
00:10:44.260 --> 00:10:45.850
no ARG constructor.

155
00:10:46.240 --> 00:10:51.340
Now, some of you who are very astute may be thinking, OK, so it's saying that you need to have a

156
00:10:51.340 --> 00:10:52.390
no ARG constructor.

157
00:10:52.390 --> 00:10:59.860
But Terry, didn't you say that when you put this Lombok at data annotation on a class, one of the

158
00:10:59.860 --> 00:11:06.720
things that you get is a default no ARG constructor and those of you who thought that would be correct.

159
00:11:06.730 --> 00:11:12.930
Yes, I did say that when you use the data annotation, you get a No ARG default constructor from Lombok.

160
00:11:12.940 --> 00:11:13.840
It will generate it.

161
00:11:14.060 --> 00:11:21.220
However, when we decided to programmatically create a list of people, I'll show you that real quick

162
00:11:21.220 --> 00:11:23.520
in the controller right here.

163
00:11:23.890 --> 00:11:29.770
I wanted a constructor that would allow us to specify all the properties in the constructor.

164
00:11:30.040 --> 00:11:30.460
OK?

165
00:11:30.690 --> 00:11:36.940
And to get that capability, I added in the all args constructor from Lombok.

166
00:11:37.030 --> 00:11:44.750
And as soon as I did that, that overrode the No ARG default constructor functionality from Lombok.

167
00:11:44.770 --> 00:11:51.580
So now if I want both an all args constructor and a no ARG constructor, I have to explicitly say that.

168
00:11:51.850 --> 00:11:56.080
OK, so now I can put in a no args constructor annotation as well.

169
00:11:56.170 --> 00:11:57.270
And now I get both.

170
00:11:57.580 --> 00:12:02.980
No, our constructor end the all args constructor and now that little red squiggly went away.

171
00:12:03.010 --> 00:12:05.770
OK, so that's just how Lombok is working.

172
00:12:05.830 --> 00:12:06.250
OK.

173
00:12:06.460 --> 00:12:09.010
So we're all good with that.

174
00:12:09.460 --> 00:12:12.310
Now, let's jump over to that controller again.

175
00:12:12.730 --> 00:12:22.270
So now that we've got database stuff set up more or less, we don't need to be hard coding these people

176
00:12:22.450 --> 00:12:28.630
in the controller such that every time a request comes in to this controller, we end up creating all

177
00:12:28.630 --> 00:12:31.960
these people brand new and sticking them into this model.

178
00:12:32.080 --> 00:12:35.230
We don't have to be doing this now in this controller method.

179
00:12:35.470 --> 00:12:44.220
We could just put all of this data into the database once ideally and every time a request comes in,

180
00:12:44.440 --> 00:12:51.160
we could just query the database to give us all of the people and then put all of those people into

181
00:12:51.160 --> 00:12:51.670
the model.

182
00:12:51.670 --> 00:12:57.550
So the main thing that I'm saying that we'll do differently, perhaps, is we don't have to create this

183
00:12:57.550 --> 00:13:03.880
list explicitly every time we have a request come in as we're doing now, we can put all of this into

184
00:13:03.880 --> 00:13:06.040
the database and then just query the database for it.

185
00:13:06.070 --> 00:13:06.430
OK.

186
00:13:06.850 --> 00:13:11.680
However, we need a way to get this data into the database quickly and easily.

187
00:13:11.800 --> 00:13:14.050
And there are a couple of ways to do that.

188
00:13:14.260 --> 00:13:19.240
We're going to do what I think will be the easiest way first and maybe only.

189
00:13:19.240 --> 00:13:23.410
And I think the the second way I will only talk about, but I don't think I'm going to do it, OK.

190
00:13:23.650 --> 00:13:30.460
So what I'm going to do is I think I'm going to copy all of this code right here where we're creating

191
00:13:30.460 --> 00:13:31.240
this list.

192
00:13:31.600 --> 00:13:33.370
Just going to copy all of that.

193
00:13:34.800 --> 00:13:40.980
Then I'm going to open back up the project pain, and I think I'm going to create another class under

194
00:13:40.980 --> 00:13:42.460
the data package.

195
00:13:42.550 --> 00:13:50.250
OK, some of the highlight data new Java package, and I'm going to call this person data loader.

196
00:13:50.550 --> 00:13:53.670
OK, now this will be an actual class enter.

197
00:13:53.670 --> 00:13:57.810
And sure, I will add that and then let me close that pane there.

198
00:13:58.170 --> 00:13:58.560
All right.

199
00:13:58.770 --> 00:14:06.480
Now this class, I'm going to have it implement another special interface of the spring framework.

200
00:14:07.080 --> 00:14:08.880
So I'm going to say implements.

201
00:14:09.390 --> 00:14:12.270
And this will be application runner.

202
00:14:13.480 --> 00:14:13.900
All right.

203
00:14:14.410 --> 00:14:20.110
And I'm getting red squiggles because it's an interface and I need to implement a method or two of it,

204
00:14:20.110 --> 00:14:24.430
and I think it only has one method that we have to implement and that is the one right there run.

205
00:14:24.520 --> 00:14:25.000
OK.

206
00:14:25.210 --> 00:14:25.560
All right.

207
00:14:25.570 --> 00:14:28.000
So now all the red marks went away.

208
00:14:28.180 --> 00:14:30.850
Now let me tell you what an application runner is.

209
00:14:31.060 --> 00:14:38.250
A class that is implementing a spring application runner interface will be called by the spring framework.

210
00:14:38.260 --> 00:14:44.380
Whenever your application starts up now won't get called immediately as soon as the application starts

211
00:14:44.380 --> 00:14:49.930
up, but real soon after that, because spring needs to do a lot of setting up of other of a lot of

212
00:14:49.930 --> 00:14:50.420
things.

213
00:14:50.460 --> 00:14:57.130
OK, but when spring is done doing all of its set up stuff, it will then immediately call any classes

214
00:14:57.130 --> 00:15:01.510
that you register with it as an application runner.

215
00:15:02.140 --> 00:15:07.360
And that will give us an opportunity to do some, some set up type things.

216
00:15:07.390 --> 00:15:07.840
OK.

217
00:15:08.110 --> 00:15:16.060
And the setup thing that I want to do here is to load our people data into the database if that data

218
00:15:16.060 --> 00:15:17.410
isn't already there.

219
00:15:17.440 --> 00:15:17.890
OK.

220
00:15:18.280 --> 00:15:20.560
So this is going to allow us to do that.

221
00:15:21.010 --> 00:15:24.460
So the way we will do this is a couple of things.

222
00:15:24.490 --> 00:15:31.420
First off, we're going to make a field on this class and the field that we're going to put here is

223
00:15:31.420 --> 00:15:35.170
going to be a reference to our person repository.

224
00:15:35.200 --> 00:15:41.820
OK, so we're going to make a private person repository filled and we'll just call it person repository

225
00:15:41.830 --> 00:15:46.090
like, so then we will make a constructor.

226
00:15:46.110 --> 00:15:49.060
I will let the idea generate the constructor for us.

227
00:15:49.060 --> 00:15:52.390
So I do that a command in here constructor.

228
00:15:53.080 --> 00:15:58.360
And it's saying, Hey, do you want to have this constructor depend on an instance of the person repository?

229
00:15:58.360 --> 00:15:59.620
And yes, I do want that.

230
00:16:00.010 --> 00:16:01.680
And I'll tell you why in just a moment.

231
00:16:02.990 --> 00:16:05.180
All right, so there's our person repository.

232
00:16:06.480 --> 00:16:14.580
Now, the reason I want this constructor here is because when spring sees a class like this, which

233
00:16:14.580 --> 00:16:23.070
I want to register with, Spring Spring will see this constructor here and it will see that this constructor

234
00:16:23.070 --> 00:16:30.960
requires an instance of a person repository to be passed in, and spring will check its own internal

235
00:16:30.960 --> 00:16:32.730
registry of beans.

236
00:16:32.760 --> 00:16:35.580
Remember, I mentioned about beans, I think in the last lesson.

237
00:16:35.910 --> 00:16:43.260
So all of the interesting classes that spring has to manage and maintain, which are generally called

238
00:16:43.260 --> 00:16:43.740
beans.

239
00:16:43.950 --> 00:16:47.460
Spring maintains a collection of all those beans internally.

240
00:16:47.490 --> 00:16:47.910
OK.

241
00:16:48.300 --> 00:16:57.630
And so when one bean says that it requires an instance of another bean spring will say, Oh, I have

242
00:16:57.630 --> 00:17:01.590
an instance of a person repository in my registry.

243
00:17:01.830 --> 00:17:07.530
Why don't I inject an instance of the person repository into your class here?

244
00:17:07.560 --> 00:17:11.550
And so spring will actually give us an instance of this person repository?

245
00:17:11.700 --> 00:17:17.670
Remember, I also mentioned in Section 12, I think in the last lesson, in fact, that when we started

246
00:17:17.670 --> 00:17:24.600
using spring, you would see that you rarely will use the new operator to create a lot of things.

247
00:17:24.630 --> 00:17:28.620
Now, of course, we're going to use it to create the people instances, but those people instances

248
00:17:28.620 --> 00:17:31.260
are not maintained or managed by spring.

249
00:17:31.470 --> 00:17:38.910
But any classes that are managed or maintained by the spring framework, you generally won't be creating

250
00:17:38.910 --> 00:17:41.430
new instances of those in most cases.

251
00:17:41.460 --> 00:17:45.420
There's one case that I can think of where you might sometimes do it, but I don't even know that we

252
00:17:45.420 --> 00:17:47.850
will need to do that in this entire section.

253
00:17:48.150 --> 00:17:48.460
All right.

254
00:17:48.480 --> 00:17:51.750
So anyway, that's what this constructor is here for.

255
00:17:51.900 --> 00:17:58.740
It's basically the kind of tell spring, Hey, I want you to give me an instance of your person repository

256
00:17:58.740 --> 00:17:59.910
after you've made one.

257
00:17:59.970 --> 00:18:01.830
OK, that's me talking to spring.

258
00:18:02.430 --> 00:18:03.150
All right.

259
00:18:03.420 --> 00:18:09.600
So then down here in the run method, this is where you get to do whatever you want when once spring

260
00:18:09.600 --> 00:18:11.790
is done, starting up essentially.

261
00:18:11.820 --> 00:18:13.770
So what I'm going to do down here is paste.

262
00:18:14.920 --> 00:18:18.010
All of this person stuff right here.

263
00:18:18.040 --> 00:18:21.940
OK, so we've got this collection of people that we were creating.

264
00:18:22.180 --> 00:18:22.540
All right.

265
00:18:22.840 --> 00:18:29.140
And then what I'm going to do right after we've created that collection or that list, I'm going to

266
00:18:29.140 --> 00:18:31.450
reference the person repository.

267
00:18:33.380 --> 00:18:35.330
And I'm going to call a method on it.

268
00:18:36.440 --> 00:18:37.610
Save all.

269
00:18:38.360 --> 00:18:42.590
So it's got this method, save all that takes something of type enterable.

270
00:18:42.920 --> 00:18:48.650
And let's see what happens here if I reference people, look at that.

271
00:18:48.860 --> 00:18:56.720
So our people variable is a list of people and the list interface is also editable.

272
00:18:56.730 --> 00:19:02.810
And if we jump into the list interface itself, we see that it extends collection.

273
00:19:02.810 --> 00:19:06.740
And then if we jump into collection, look at that collection extends adorable, OK?

274
00:19:06.920 --> 00:19:12.170
So that just means something that can be iterated over or counted over or looped over whatever.

275
00:19:12.200 --> 00:19:14.870
OK, so lists are adorable.

276
00:19:14.900 --> 00:19:15.320
OK.

277
00:19:15.740 --> 00:19:23.540
Let me close that and that and that is why we can pass our list of people into the save all method here.

278
00:19:23.560 --> 00:19:29.150
OK, the the save all method that we didn't have to write or implement, we're just getting it for free.

279
00:19:29.450 --> 00:19:29.900
OK.

280
00:19:31.160 --> 00:19:38.210
Some of you may very well be wondering, by the way, let's see if we jump in to the person repository

281
00:19:38.210 --> 00:19:38.600
here.

282
00:19:38.900 --> 00:19:39.310
Whoops.

283
00:19:39.320 --> 00:19:40.130
I didn't mean to do that.

284
00:19:40.140 --> 00:19:41.190
I meant to go here.

285
00:19:41.210 --> 00:19:41.480
Yeah.

286
00:19:42.680 --> 00:19:46.330
How is it that this will even work since there's just an interface here?

287
00:19:46.340 --> 00:19:47.300
I'm not going to go real deep.

288
00:19:47.300 --> 00:19:48.110
I'll just say this.

289
00:19:48.590 --> 00:19:55.250
So what the spring framework will do in this case is it will dynamically create an implementation of

290
00:19:55.250 --> 00:20:02.240
this interface at runtime, meaning when the application actually starts up, the spring data framework

291
00:20:02.240 --> 00:20:06.620
will introspect what we are wanting to do with this interface.

292
00:20:06.770 --> 00:20:13.940
It will see all of the inherited methods here, and it will create implementations of all of those standard

293
00:20:13.940 --> 00:20:14.360
methods.

294
00:20:14.360 --> 00:20:22.730
So a little bit kind of like what we did in our Section 12 credit repository, except we wrote all of

295
00:20:22.730 --> 00:20:27.140
our implementation code before we were running the application.

296
00:20:27.470 --> 00:20:34.280
But it is possible in Java to dynamically write code programmatically if you really know what you're

297
00:20:34.280 --> 00:20:37.700
doing and then have that code actually, like, usable.

298
00:20:37.730 --> 00:20:38.120
OK.

299
00:20:38.240 --> 00:20:41.690
And so the spring data framework actually does that OK?

300
00:20:41.990 --> 00:20:47.600
It actually writes the code from from templates, basically from boilerplate templates that it kind

301
00:20:47.600 --> 00:20:52.100
of has, but it actually writes the implementation code for us in real time.

302
00:20:52.550 --> 00:20:52.920
OK.

303
00:20:52.940 --> 00:20:59.170
So I think that's about as deep as I want to go into that in this in this course.

304
00:21:00.450 --> 00:21:04.080
All right, so that would save all of our people right there.

305
00:21:04.320 --> 00:21:09.120
Now a couple other things that we're going to want to do, though we won't want to be passing in these

306
00:21:09.120 --> 00:21:11.970
IDs because they're going to be generated for us.

307
00:21:12.120 --> 00:21:17.880
So what I'm going to do here is I'm going to shift into the column selection mode so that I can select

308
00:21:18.540 --> 00:21:21.720
just columns right here just like that.

309
00:21:21.750 --> 00:21:24.840
Remember that, and I'm going to replace all of this with null.

310
00:21:26.350 --> 00:21:31.540
And then a hit escape, and then I will get out of column selection mode by just doing a shift command

311
00:21:31.540 --> 00:21:32.440
eight again.

312
00:21:34.180 --> 00:21:34.780
All right.

313
00:21:35.050 --> 00:21:41.560
So now all of those will be null, which will let springs, Appa and hibernate know that the database

314
00:21:41.560 --> 00:21:44.770
should be responsible for filling these in and not us.

315
00:21:44.870 --> 00:21:45.250
OK.

316
00:21:45.370 --> 00:21:46.600
That's what that will do.

317
00:21:47.050 --> 00:21:49.180
And let's see, what else do I want to do?

318
00:21:49.210 --> 00:21:49.690
Oh yeah.

319
00:21:49.870 --> 00:21:56.080
And then the other thing I would like to do is to make the saving of this data conditional.

320
00:21:56.080 --> 00:22:01.960
OK, so I don't want to do this if I have any records already in the database.

321
00:22:02.140 --> 00:22:07.360
This is just like if you are first starting up the application and you don't have any people records

322
00:22:07.360 --> 00:22:08.650
in the database at all.

323
00:22:09.040 --> 00:22:14.200
Then go ahead and initialize the database with some data that first time OK.

324
00:22:14.500 --> 00:22:17.320
So a way that we could do that.

325
00:22:17.560 --> 00:22:22.280
And actually, I mean, I guess we could go ahead and just protect all of this from even running.

326
00:22:22.300 --> 00:22:22.600
OK.

327
00:22:22.720 --> 00:22:29.260
So one way that we could do that is we can do an option command T to surround this with an f block like.

328
00:22:29.260 --> 00:22:33.910
So and then I'm thinking we can call a person repository dot.

329
00:22:34.940 --> 00:22:35.540
Count.

330
00:22:36.800 --> 00:22:43.520
And we can say something like if the count equals zero, then do all of this.

331
00:22:43.640 --> 00:22:49.850
So in other words, if there are already records in the person table, then don't do any of this right

332
00:22:49.880 --> 00:22:51.860
because we don't need the help at that point.

333
00:22:52.730 --> 00:22:53.390
All right.

334
00:22:53.630 --> 00:22:58.880
So really this this bit of code here should only run the one time, in essence.

335
00:22:59.540 --> 00:22:59.810
All right.

336
00:22:59.820 --> 00:23:02.270
So now let's jump back over to the controller.

337
00:23:04.350 --> 00:23:09.750
And we should be able to get rid of that.

338
00:23:10.350 --> 00:23:14.430
Now I know that that's read and we will take care of that in just a moment.

339
00:23:14.820 --> 00:23:18.030
But we're getting getting rid of that there now.

340
00:23:18.030 --> 00:23:23.610
I think I'm going to actually introduce you to another little bit of functionality of the spring framework

341
00:23:23.610 --> 00:23:24.060
now.

342
00:23:24.840 --> 00:23:30.460
So what we're going to do is we're going to introduce one more method here.

343
00:23:30.480 --> 00:23:35.230
Now we don't have to do this, but I just kind of want to show you a little bit more of the spring frameworks

344
00:23:35.760 --> 00:23:36.750
functionality.

345
00:23:37.800 --> 00:23:38.030
All right.

346
00:23:38.040 --> 00:23:43.140
So actually, first thing we'll do is let's rename this method slightly.

347
00:23:43.380 --> 00:23:45.420
So I'm going to do a shift of six.

348
00:23:45.630 --> 00:23:51.030
And we're going to rename this method to show people.

349
00:23:52.260 --> 00:23:52.890
Page.

350
00:23:54.120 --> 00:23:54.870
Let's do that.

351
00:23:55.110 --> 00:23:55.500
OK.

352
00:23:56.100 --> 00:23:59.220
At step one and you'll see why I'm doing that in just a moment.

353
00:23:59.520 --> 00:24:01.920
Then here we're going to make a new method.

354
00:24:02.280 --> 00:24:08.310
It's going to be public and it's going to return and adorable.

355
00:24:09.530 --> 00:24:14.870
Of person class, okay, and then I will import the person class again.

356
00:24:15.050 --> 00:24:19.370
And now this will be called get people like so.

357
00:24:20.320 --> 00:24:20.740
OK.

358
00:24:22.010 --> 00:24:32.720
And then we're going to make a private field of the people controller, class of type person control,

359
00:24:32.730 --> 00:24:42.620
I'm sorry of of type of type person repository, just like we did in our runner application runner.

360
00:24:43.700 --> 00:24:50.030
And also, just as we did in the application runner, we will go ahead and create a constructor here

361
00:24:50.570 --> 00:24:53.660
that will take that instance of the person repository.

362
00:24:53.690 --> 00:24:58.710
So in other words, I want this controller to depend on the person repository.

363
00:24:58.730 --> 00:24:59.150
OK.

364
00:24:59.580 --> 00:25:02.600
Also so that down here.

365
00:25:03.990 --> 00:25:10.140
We can do this return person repository, Dot, find all.

366
00:25:12.630 --> 00:25:18.510
And that will find all of the records that are in the person table or people table.

367
00:25:19.400 --> 00:25:19.820
All right.

368
00:25:21.520 --> 00:25:28.120
Now, one last thing we need to do here is put an annotation on here, so we're going to use an annotation.

369
00:25:28.870 --> 00:25:38.320
Yeah, model attribute and we will pass in a name of people like Sir, then down here, now we can get

370
00:25:38.320 --> 00:25:43.810
rid of this model attribute and just return the name people.

371
00:25:43.960 --> 00:25:45.550
So we're going to run this real quick.

372
00:25:45.700 --> 00:25:49.180
And then I will explain everything in a little bit more detail.

373
00:25:49.270 --> 00:25:51.610
And I think, let's see here.

374
00:25:53.970 --> 00:26:02.550
Maybe one more thing we want to do is jump back over to the data loader and I don't know, let's change

375
00:26:02.550 --> 00:26:06.340
a few names just so that we make sure that something actually changed here.

376
00:26:06.360 --> 00:26:06.750
OK?

377
00:26:07.850 --> 00:26:08.960
So let's make.

378
00:26:09.960 --> 00:26:16.350
Pete and Jennifer and Mark.

379
00:26:18.080 --> 00:26:22.960
And let's put some, some, some different countries names in here.

380
00:26:23.030 --> 00:26:23.870
This new.

381
00:26:25.190 --> 00:26:30.470
This new McGuire, that's a that's an interesting combination of name, and I don't know.

382
00:26:31.730 --> 00:26:35.660
Alice and Akira.

383
00:26:36.980 --> 00:26:41.760
That's an interesting combination to a Japanese first name and a Korean last name.

384
00:26:42.090 --> 00:26:42.540
All right.

385
00:26:42.960 --> 00:26:44.970
So I just wanted some different data here.

386
00:26:45.150 --> 00:26:52.500
OK, so let's let's restart the application and see if I broke anything.

387
00:26:59.120 --> 00:27:00.680
Hmm, interesting, OK.

388
00:27:00.860 --> 00:27:02.150
Getting nothing back.

389
00:27:02.480 --> 00:27:03.080
All right.

390
00:27:03.200 --> 00:27:04.040
Let's see why.

391
00:27:04.460 --> 00:27:07.400
So let's jump back over to the controller.

392
00:27:08.450 --> 00:27:12.470
Oh, and I already know and I know what I forgot to do.

393
00:27:13.220 --> 00:27:20.150
We're going to jump back over to the data loader and I kept thinking, Yeah, I need to do this, but

394
00:27:20.150 --> 00:27:21.830
I want to hold off on it until I'm done.

395
00:27:21.830 --> 00:27:25.100
And then by the time I was done doing everything else in here, I totally forgot about it.

396
00:27:25.100 --> 00:27:30.920
So we need one last thing in here, which is we need to put an annotation up here and we'll just put

397
00:27:30.920 --> 00:27:37.280
an at component annotations so that again, when the spring framework is is starting up and it's scanning

398
00:27:37.460 --> 00:27:42.410
through all the classes looking for interesting classes, it will see that this is one of the classes

399
00:27:42.410 --> 00:27:47.060
that it should consider to be interesting because it has this at component annotation on it.

400
00:27:47.090 --> 00:27:47.420
OK.

401
00:27:47.750 --> 00:27:51.980
So without that spring, we'll just ignore this this class, OK?

402
00:28:00.440 --> 00:28:01.520
All right, there we go.

403
00:28:01.970 --> 00:28:04.700
I think that took a second to to load up, though.

404
00:28:04.700 --> 00:28:07.100
I got a little confused with what I was seeing there, but there we go.

405
00:28:07.100 --> 00:28:08.630
We've got our data there now.

406
00:28:08.660 --> 00:28:09.050
OK.

407
00:28:09.260 --> 00:28:14.130
So yeah, we needed to just register this data loader as a component.

408
00:28:14.150 --> 00:28:14.570
OK.

409
00:28:14.750 --> 00:28:21.890
And in fact, if I restart again, we shouldn't see additional records here because this code should

410
00:28:21.890 --> 00:28:23.110
not run again.

411
00:28:24.890 --> 00:28:26.810
So let me restart that.

412
00:28:28.210 --> 00:28:28.990
OK, cool.

413
00:28:29.320 --> 00:28:34.000
So, yeah, so now our data is actually coming from the database itself.

414
00:28:34.270 --> 00:28:42.430
Now another thing you may be wondering is, Terry, we didn't see you set up any data ABC, bcu, URL

415
00:28:42.430 --> 00:28:45.880
or point to a database or any of that kind of stuff.

416
00:28:45.890 --> 00:28:49.900
How is there a database and how how can you prove that there's a database here at all?

417
00:28:50.560 --> 00:28:51.340
Great question.

418
00:28:51.340 --> 00:28:55.720
So spring boot, the whole entire framework is kind of magical, OK?

419
00:28:55.960 --> 00:29:02.860
And one of the things that the spring boot framework tries to do is that it tries to favor convention

420
00:29:02.860 --> 00:29:04.240
over configuration.

421
00:29:04.390 --> 00:29:11.320
And what that means is it tries to figure out what your intent is or what you're intending to do with

422
00:29:11.320 --> 00:29:17.450
your code without you having to explicitly configure every single thing all the time.

423
00:29:17.470 --> 00:29:17.830
OK.

424
00:29:18.430 --> 00:29:27.310
So in our case, spring boot, when it is starting up with spring, it sees that we have imported the

425
00:29:27.310 --> 00:29:30.490
H2 database library into our project.

426
00:29:30.520 --> 00:29:32.260
Let me just remind you of that.

427
00:29:32.860 --> 00:29:39.580
If we go into our build.gradle file here, we specified that one of our dependencies.

428
00:29:40.560 --> 00:29:43.450
Should be the H2 database right there.

429
00:29:43.470 --> 00:29:43.830
OK.

430
00:29:44.730 --> 00:29:48.210
And so right away, spring boot nodes are OK.

431
00:29:48.390 --> 00:29:54.780
He has imported the H2 database and this is me talking like spring boot for a minute, Spring Boot says

432
00:29:54.990 --> 00:30:02.730
I know that the H2 database is often used as a quick way to just get some code working with some kind

433
00:30:02.730 --> 00:30:03.450
of database.

434
00:30:03.990 --> 00:30:07.890
And oftentimes just the simple, in-memory database, in fact.

435
00:30:07.890 --> 00:30:17.220
OK, so Spring Boot says if I find the H2 Database Library as a dependency in the class path of this

436
00:30:17.220 --> 00:30:25.680
project, and if I don't see any explicit configuration anywhere where the developer has told me where

437
00:30:25.680 --> 00:30:33.270
to connect to and how to connect, I will assume that I should just make a very simple default database

438
00:30:33.270 --> 00:30:40.620
instance and connect to that and make that connection available to everything that I control that has

439
00:30:40.620 --> 00:30:45.510
anything at all to do with databases slightly like our repository.

440
00:30:45.870 --> 00:30:53.730
So without me having to configure anything at all, I get a connection to a default in-memory database

441
00:30:53.730 --> 00:30:54.360
right off the bat.

442
00:30:54.360 --> 00:30:55.920
No in-memory database.

443
00:30:55.920 --> 00:30:59.910
That's something that I didn't show you in the infection.

444
00:30:59.920 --> 00:31:00.450
12.

445
00:31:00.960 --> 00:31:08.520
But H2 has the ability to store its database in memory instead of in a file.

446
00:31:08.760 --> 00:31:14.790
Now, the reason we didn't play with that functionality in Section 12 was because in order to make use

447
00:31:14.790 --> 00:31:22.230
of an in-memory database, you'd have to also have code that is explicitly creating all your tables

448
00:31:22.230 --> 00:31:24.630
and the structures within the database.

449
00:31:25.050 --> 00:31:30.030
Presumably every single time the application starts up, and I didn't want us to have to write all of

450
00:31:30.030 --> 00:31:35.370
that code as well, where we're spitting out D-Del. and then and then populating all the data.

451
00:31:35.520 --> 00:31:41.220
And it also means with an in-memory database that every time your applications and stops and then restarts,

452
00:31:41.400 --> 00:31:43.590
you no longer have any data, OK?

453
00:31:44.430 --> 00:31:50.190
So it's great for quick little things like what we're doing here, but it's not as good if you're trying

454
00:31:50.190 --> 00:31:52.120
to make like a real application.

455
00:31:52.140 --> 00:31:52.500
OK?

456
00:31:53.400 --> 00:32:00.090
But by default, that's what we're using right now is just an easy, in-memory database from H2 and

457
00:32:00.090 --> 00:32:00.660
spring boot.

458
00:32:00.660 --> 00:32:01.950
Did all of that for us.

459
00:32:02.400 --> 00:32:07.890
And that's one of the tricks that spring boot can do that the regular spring framework would not do.

460
00:32:08.130 --> 00:32:12.120
The regular spring framework doesn't assume any of those kinds of things.

461
00:32:12.120 --> 00:32:14.700
You have to explicitly configure everything.

462
00:32:15.000 --> 00:32:21.510
Spring Boot says I want you to be able to be highly productive with minimal configuration, and you

463
00:32:21.510 --> 00:32:25.380
shouldn't be forced to configure anything until you actually need to.

464
00:32:25.410 --> 00:32:25.860
OK.

465
00:32:26.220 --> 00:32:26.570
All right.

466
00:32:26.580 --> 00:32:31.710
So last thing I want to do now because I promised I would do this and I was almost about to forget again,

467
00:32:31.830 --> 00:32:37.020
is to just walk through a little bit more of what's going on in this program now.

468
00:32:37.290 --> 00:32:39.990
So let me go back over to the controller mostly.

469
00:32:39.990 --> 00:32:43.050
I mean, look at what's happening in the controller here.

470
00:32:43.740 --> 00:32:44.090
All right.

471
00:32:44.100 --> 00:32:45.720
So let's see here.

472
00:32:46.110 --> 00:32:51.600
Let me explain a few things now that I don't think I explained explicitly before starting at the top

473
00:32:51.600 --> 00:32:51.860
here.

474
00:32:51.870 --> 00:32:55.890
So we're marking our people controller as the controller.

475
00:32:55.890 --> 00:33:02.000
And and now I think you may understand that this controller is similar to the at component and the app

476
00:33:02.010 --> 00:33:03.090
repository.

477
00:33:03.270 --> 00:33:10.430
It's just telling spring, Hey, here's an interesting class that I want you to register and manage.

478
00:33:10.540 --> 00:33:10.890
OK.

479
00:33:11.880 --> 00:33:16.560
So and specifically though, if it's a controller, then that means it has to do with web stuff.

480
00:33:16.590 --> 00:33:17.010
OK?

481
00:33:17.640 --> 00:33:20.580
The next annotation request mapping people.

482
00:33:20.970 --> 00:33:30.390
This is telling spring MVC that in general, any requests that come into this application from the web

483
00:33:30.690 --> 00:33:37.210
with the resource of slash people should be mapped to this class.

484
00:33:37.230 --> 00:33:42.660
This people controller so I could have other controllers that map to other resources.

485
00:33:42.700 --> 00:33:49.090
OK, so I could have a controller that maps to slash cars or slash homes or whatever.

486
00:33:49.110 --> 00:33:49.530
OK.

487
00:33:49.740 --> 00:33:58.260
And so in the browser, if I want my request to be handled by this class, which is annotated with this

488
00:33:58.260 --> 00:34:04.980
request mapping slash people, then I have to put a slash people in the URL here and order for those

489
00:34:04.980 --> 00:34:06.070
requests to come here.

490
00:34:06.090 --> 00:34:07.980
OK, so that's what this is doing.

491
00:34:08.100 --> 00:34:13.470
This is saying, Hey, I will answer any requests that are directed to slash people.

492
00:34:13.590 --> 00:34:14.010
OK.

493
00:34:14.340 --> 00:34:14.950
All right.

494
00:34:14.970 --> 00:34:15.990
Let's see.

495
00:34:16.530 --> 00:34:18.120
Then here's our interface.

496
00:34:18.420 --> 00:34:25.800
The spring framework will inject any instance of this type person repository that it knows about into

497
00:34:25.800 --> 00:34:27.270
this class automatically.

498
00:34:27.420 --> 00:34:32.370
Now you may see a lot of code on the internet that looks like this auto wired.

499
00:34:32.760 --> 00:34:36.360
OK, this is superfluous, but it will work.

500
00:34:36.570 --> 00:34:39.300
This tells Spring explicitly.

501
00:34:40.040 --> 00:34:40.540
Spring.

502
00:34:41.210 --> 00:34:48.020
Go find any instances of type person repository that you happen to be managing and inject them into

503
00:34:48.020 --> 00:34:49.130
this constructor.

504
00:34:49.370 --> 00:34:50.390
That's what this means.

505
00:34:50.570 --> 00:34:59.090
But even without this spring's default behavior these days, it's to go ahead and perform that injection

506
00:34:59.090 --> 00:34:59.780
anyway.

507
00:34:59.990 --> 00:35:05.090
If you have a constructor that has a data type that it knows about, and if that's the only constructor

508
00:35:05.090 --> 00:35:06.130
you have there, OK.

509
00:35:07.190 --> 00:35:16.040
Alternatively, I also could have done an at auto wired like this, and then I actually could have even

510
00:35:16.040 --> 00:35:21.140
gotten rid of this constructor here, and this would still work in this case.

511
00:35:21.350 --> 00:35:29.330
Spring would use some fancy trickery and force an instance of the person repository directly into this

512
00:35:29.330 --> 00:35:35.240
field because I had this auto wired annotation here and we did a little bit of this trickery ourselves

513
00:35:35.240 --> 00:35:43.430
in section 12 when we were populating the IDE fields of our person class using our own framework.

514
00:35:43.640 --> 00:35:47.750
I'm not going to you can go back and look at that if you don't know what I'm talking about.

515
00:35:47.750 --> 00:35:52.490
But that was the way that we were able to populate the ID field of an instance of a person.

516
00:35:52.640 --> 00:35:57.860
We use the reflection API and forced the values into that field.

517
00:35:58.040 --> 00:36:02.960
That's essentially what spring is doing if you use the auto wired annotation in this way.

518
00:36:03.110 --> 00:36:05.060
But again, we don't need this.

519
00:36:05.270 --> 00:36:09.140
We can just create a constructor and have spring.

520
00:36:09.140 --> 00:36:09.770
Do it this way.

521
00:36:09.860 --> 00:36:12.470
Now what's the difference between these two approaches?

522
00:36:13.400 --> 00:36:21.200
Well, functionally they're the same, but conceptually there is a difference and that that conception

523
00:36:21.200 --> 00:36:24.740
is the fact that in fact, let me let me on on.

524
00:36:25.160 --> 00:36:28.490
Let me uncomment that and I'm going to get rid of this.

525
00:36:29.590 --> 00:36:38.410
Conceptually, the difference is the fact that when we say that our people comptroller has a constructor

526
00:36:38.410 --> 00:36:45.220
that requires this instance of people of person repository, we are really saying that you shouldn't

527
00:36:45.220 --> 00:36:50.860
be allowed to even create an instance of a controller without having a person repository.

528
00:36:50.870 --> 00:36:52.660
OK, so it's a conceptual thing.

529
00:36:53.500 --> 00:36:56.220
I don't I don't want controllers to exist.

530
00:36:56.230 --> 00:37:01.690
Are I don't want the people controller to exist unless I have a valid repository.

531
00:37:01.720 --> 00:37:03.490
OK, person repository for it.

532
00:37:03.530 --> 00:37:11.320
OK, so I'm just more tightly establishing the dependency relationship between a people controller and

533
00:37:11.320 --> 00:37:12.610
the person repository.

534
00:37:12.610 --> 00:37:18.910
Whereas if I did not do it this way and I just put the auto wired up here and I told Spring that, hey,

535
00:37:18.910 --> 00:37:23.230
you're allowed to to to inject a person repository in here.

536
00:37:23.680 --> 00:37:30.070
That would mean that it is valid to create an instance of the people controller, even if something

537
00:37:30.070 --> 00:37:34.180
maybe kind of went a little bit wrong with the person repository or something like that.

538
00:37:34.420 --> 00:37:38.980
Although I think actually spring would still complain if it tried to create a person repository and

539
00:37:38.980 --> 00:37:42.100
it couldn't because like there was no valid database or something like that.

540
00:37:42.490 --> 00:37:44.980
But conceptually, this is what I mean here.

541
00:37:45.100 --> 00:37:45.460
All right.

542
00:37:46.400 --> 00:37:47.420
Now this bit here.

543
00:37:47.900 --> 00:37:53.510
Get people, so I'm going to skip over this for just a second, and I'm going to address this a little

544
00:37:53.510 --> 00:37:54.410
bit more.

545
00:37:54.530 --> 00:37:56.600
And then this will make more sense in relation.

546
00:37:56.610 --> 00:38:06.050
OK, so this get mapping here annotation relates to those core HTTP operations that I talked about earlier,

547
00:38:06.050 --> 00:38:08.300
likely get and post.

548
00:38:08.450 --> 00:38:12.080
And there are some others there's put and delete and things of that sort.

549
00:38:12.080 --> 00:38:18.050
But the main two ones that you'll see most often in many cases are especially for web applications are

550
00:38:18.050 --> 00:38:19.670
get or post OK.

551
00:38:20.910 --> 00:38:33.810
So what this is saying is if a request comes addressed for the people resource and that request is a

552
00:38:33.900 --> 00:38:36.150
get request, OK?

553
00:38:36.420 --> 00:38:43.560
Meaning using the HTTP get verb or get operation, let this method here.

554
00:38:43.680 --> 00:38:45.330
Handle that request.

555
00:38:45.780 --> 00:38:51.660
So this method would be called when we do something like local hosts 80 slash people.

556
00:38:52.410 --> 00:38:54.600
This is the method that's going to get called.

557
00:38:54.990 --> 00:38:58.770
OK, now the return type of string.

558
00:38:59.220 --> 00:39:05.490
What this is saying is it should respond by showing a view called people.

559
00:39:05.820 --> 00:39:14.280
Now the view for people is going to relate to, and you can probably guess our template over here called

560
00:39:14.280 --> 00:39:15.630
people dot html.

561
00:39:15.750 --> 00:39:22.980
So by default, whatever string we return from these handler methods, if you want to call it that because

562
00:39:22.980 --> 00:39:29.310
it handles, because it's handling the request that came in, whatever string we return from here will

563
00:39:29.310 --> 00:39:34.120
try to be matched up with a template over here in the Templates folder.

564
00:39:34.140 --> 00:39:37.860
OK, that is the default behavior of spring in DC.

565
00:39:38.280 --> 00:39:45.210
And let me also mention now spring in DC, the MVC and spring in DC actually stands for Model View Controller.

566
00:39:45.420 --> 00:39:51.750
That is a standard design pattern that again, is one of these patterns that has kind of been evolved

567
00:39:51.750 --> 00:39:57.630
over years by really smart developers who realized that whenever you're working with graphical user

568
00:39:57.630 --> 00:40:02.820
interfaces, it's often a good idea to have something called a model where you can put your data in

569
00:40:02.880 --> 00:40:08.250
and then you can pass that model onto the view, where the View can then extract data out of that model

570
00:40:08.310 --> 00:40:13.060
and then use it to present information to a user on a screen.

571
00:40:13.260 --> 00:40:18.460
And you'll have something called a controller, which controls all of that interaction, essentially.

572
00:40:18.480 --> 00:40:20.490
OK, so spring in DC.

573
00:40:20.490 --> 00:40:27.450
So we've got our controller here, we've got our model here and now here as well.

574
00:40:27.690 --> 00:40:33.870
And then we've got our view, which is this thing here which relates to this HTML file over here, this

575
00:40:33.870 --> 00:40:34.890
template file, OK?

576
00:40:35.190 --> 00:40:40.830
So by returning the string people, we are telling spring in DC, Hey, when you're done running this

577
00:40:40.830 --> 00:40:47.850
method on your way out the door, go load up this template over here and then take whatever data was

578
00:40:47.850 --> 00:40:53.070
put into the model and use that data to fill in your template.

579
00:40:53.130 --> 00:40:57.750
OK, now the last thing I want to talk about is this method here.

580
00:40:59.240 --> 00:41:06.020
When you have a method that is annotated in spring in B.C. with this ATN model attribute annotation,

581
00:41:06.980 --> 00:41:11.330
that method will actually run before this handler method here.

582
00:41:11.360 --> 00:41:11.810
OK.

583
00:41:12.110 --> 00:41:13.790
And so what's going to happen?

584
00:41:14.030 --> 00:41:15.560
Let me make some room again.

585
00:41:15.740 --> 00:41:21.890
And so what's going to happen is first, this method is going to get called by spring in B.C. before

586
00:41:21.890 --> 00:41:23.030
this method does.

587
00:41:23.280 --> 00:41:27.890
Oh, and sorry, I put a little debugging stuff in here when I was trying to understand why this wasn't

588
00:41:27.890 --> 00:41:28.270
working.

589
00:41:28.280 --> 00:41:29.720
So let me delete that now.

590
00:41:29.720 --> 00:41:30.440
I don't need that.

591
00:41:30.950 --> 00:41:31.280
OK.

592
00:41:31.580 --> 00:41:31.900
All right.

593
00:41:31.910 --> 00:41:34.370
So this will get called first.

594
00:41:34.850 --> 00:41:42.800
And in this particular case, whatever comes out of this method, which would be an adorable of people,

595
00:41:43.520 --> 00:41:49.880
whatever comes out of this method will automatically be stored in the model just like we were doing

596
00:41:49.880 --> 00:41:50.690
originally.

597
00:41:51.020 --> 00:41:56.540
It'll get stored in the model and it'll be stored in that model with this key of people.

598
00:41:56.570 --> 00:42:01.880
OK, so this is really just another way of doing what we had before when we were doing, you know,

599
00:42:01.880 --> 00:42:07.500
the model and attribute people comma.

600
00:42:07.580 --> 00:42:10.460
And then we in fact, I could even do it this way.

601
00:42:10.670 --> 00:42:11.720
I could even do that.

602
00:42:12.320 --> 00:42:15.470
So that is calling this now.

603
00:42:15.470 --> 00:42:19.970
Of course, if I were going to do this, then I should really get rid of this attribute here, because

604
00:42:19.970 --> 00:42:22.010
that would be ambiguous if I didn't.

605
00:42:22.520 --> 00:42:22.820
All right.

606
00:42:22.830 --> 00:42:28.220
But but this is equivalent to this.

607
00:42:28.440 --> 00:42:31.520
OK, now why would you want one or the other?

608
00:42:31.700 --> 00:42:36.680
Well, the real reason I introduced this to you was just to show you another way of doing this so that

609
00:42:36.680 --> 00:42:39.260
I can teach you a little bit more about spring and spring in B.C..

610
00:42:39.530 --> 00:42:45.440
However, oftentimes you'll have pages that have a lot of like reference data that needs to be filled

611
00:42:45.440 --> 00:42:49.040
in, like dropdown options on a page or things like that.

612
00:42:49.040 --> 00:42:55.910
And if those options are coming from a database, for example, then you might want to just have a model

613
00:42:55.910 --> 00:42:58.760
attribute annotated method for each of those options.

614
00:42:59.060 --> 00:43:02.810
There's a lot of ways you could do that, or even just one method that grabs all of it, although I

615
00:43:02.810 --> 00:43:05.810
think that would be a little worse to do something like that.

616
00:43:05.930 --> 00:43:12.650
So that's just another way that you could do all of this and separate those kinds of fields and dynamic

617
00:43:12.650 --> 00:43:17.630
data from the heart of whatever it is that you're wanting to do with your handler method.

618
00:43:17.660 --> 00:43:18.050
OK.

619
00:43:18.560 --> 00:43:20.060
So I'm going to delete this.

620
00:43:20.240 --> 00:43:26.900
And one more thing now, since I now have this model attribute annotated method here, I actually do

621
00:43:26.900 --> 00:43:32.300
not need this anymore because the only reason that was there was so that I could do the equivalent of

622
00:43:32.300 --> 00:43:32.570
this.

623
00:43:32.570 --> 00:43:33.290
And now I don't need that.

624
00:43:33.300 --> 00:43:34.910
So if I restart.

625
00:43:37.490 --> 00:43:37.820
Yeah.

626
00:43:37.880 --> 00:43:40.250
Everything still works, I haven't broken anything.

627
00:43:41.740 --> 00:43:47.740
And now this get mapping is really, really lean and lightweight, not doing anything because really

628
00:43:47.950 --> 00:43:50.420
all of the big stuff is happening up here now.

629
00:43:50.440 --> 00:43:50.890
OK.

630
00:43:51.430 --> 00:43:51.760
All right.

631
00:43:51.760 --> 00:43:55.990
So I think that is more than enough to explain for now.

632
00:43:56.230 --> 00:44:00.850
So we'll flesh out some more cool functionality in the next lesson.

633
00:44:00.850 --> 00:44:02.020
So I will see you there.
