1
00:00:00,360 --> 00:00:00,730
OK.

2
00:00:00,750 --> 00:00:01,600
In this lesson.

3
00:00:01,620 --> 00:00:08,490
Let's run through some of the more common methods that exist on the map interface and see how they work

4
00:00:08,490 --> 00:00:09,960
and how we can use them.

5
00:00:10,530 --> 00:00:18,240
So turning back to the A.D., we're still in the main class, and I think what I'm going to do is just

6
00:00:18,240 --> 00:00:25,650
come up here to where we are printing out the the the map itself, right?

7
00:00:25,680 --> 00:00:30,120
We're just passing an entire map into a system out that print line.

8
00:00:32,100 --> 00:00:39,390
So what we can do here is just put the cursor right after the map reference there, the variable there

9
00:00:39,390 --> 00:00:43,740
and and then a period and then we can start looking at some of the methods.

10
00:00:43,740 --> 00:00:45,360
So I'm just going to run through these methods.

11
00:00:45,630 --> 00:00:48,660
I may not explicitly show each and every one.

12
00:00:48,660 --> 00:00:52,890
And in fact, I definitely definitely will be skipping over a few for now.

13
00:00:53,100 --> 00:00:59,070
Now we will come back and look at some of the methods that I'm skipping over in later lessons or modules,

14
00:00:59,730 --> 00:01:02,970
but we're not quite ready to get into every single one of these methods here.

15
00:01:03,330 --> 00:01:03,540
All right.

16
00:01:03,540 --> 00:01:07,980
So we've already seen the get method and as you can see, you pass in a key.

17
00:01:08,670 --> 00:01:12,600
The signature here shows that it's an object, just a generic object.

18
00:01:12,600 --> 00:01:20,100
And you'll recall that object is the super, super super class of all classes, and they're just being

19
00:01:20,100 --> 00:01:21,370
very generic here.

20
00:01:21,390 --> 00:01:25,950
That's why they're using the the class object instead of being more specific.

21
00:01:26,310 --> 00:01:26,670
All right.

22
00:01:26,680 --> 00:01:33,120
And and then we've also used put that's how we actually get key value pairs into a map.

23
00:01:35,100 --> 00:01:36,990
We'll skip over compute for now.

24
00:01:36,990 --> 00:01:47,040
Values is an interesting one, so values will actually get returned back a collection of all of the

25
00:01:47,040 --> 00:01:49,710
values that we've added into the map.

26
00:01:49,720 --> 00:01:58,410
So again, keep in mind that whenever we call put, we are adding essentially a new row of a key value

27
00:01:58,410 --> 00:01:59,130
pair, right?

28
00:01:59,130 --> 00:02:02,050
So you can think of it as a two column row.

29
00:02:02,190 --> 00:02:02,640
OK.

30
00:02:02,850 --> 00:02:08,730
Every time we call put, as long as the key is unique, you'll get a new row, so you're going to have

31
00:02:08,730 --> 00:02:11,610
all these rows of two columns.

32
00:02:11,730 --> 00:02:12,090
Right?

33
00:02:13,350 --> 00:02:18,990
But if you call the values method, it will return a collection.

34
00:02:19,110 --> 00:02:25,080
You can think of it as a list or set whatever you want to think of it, as it will return a collection

35
00:02:25,320 --> 00:02:27,580
of just the values, right?

36
00:02:27,600 --> 00:02:30,480
So just that second column.

37
00:02:30,510 --> 00:02:31,020
OK.

38
00:02:31,230 --> 00:02:36,150
So let's go ahead and actually just use this real quick and we'll actually see it.

39
00:02:36,540 --> 00:02:46,920
So I'm just going to change line 60 to print out whatever is in whatever is returned from the map values

40
00:02:46,920 --> 00:02:47,880
method call.

41
00:02:47,910 --> 00:02:48,300
OK.

42
00:02:48,540 --> 00:02:56,220
So if we take a quick look down here before I run it, you'll see that currently, if we are just printing

43
00:02:56,220 --> 00:03:01,280
the map on its own, we see these key value pairs, right?

44
00:03:01,290 --> 00:03:07,470
So each of these comma separated groupings here is what's called a key value pair.

45
00:03:07,470 --> 00:03:10,710
Because we've got the key, then the equals sign and then the value.

46
00:03:10,920 --> 00:03:19,410
So if we call the map that values method, what we should see are just the values themselves without

47
00:03:19,410 --> 00:03:21,570
the keys and without the equals sign.

48
00:03:21,900 --> 00:03:29,040
Now one thing before I run this, it might be a little clearer if we actually revert some of the changes

49
00:03:29,040 --> 00:03:38,730
that we recently made, specifically the change that we made to to have the value, be the entire object,

50
00:03:38,730 --> 00:03:40,380
right, as I'm doing here.

51
00:03:40,380 --> 00:03:48,870
So I'm going to actually put this back to just mapping the integer and now change this change this guy's

52
00:03:48,870 --> 00:03:51,930
name again to what was this salary map?

53
00:03:53,010 --> 00:03:58,230
And I'll explain in a little more detail why I'm making this change in just a moment.

54
00:03:58,770 --> 00:04:08,040
So here as well, get salary and then down here, we don't want to do this anymore.

55
00:04:12,350 --> 00:04:15,020
In fact, they'll just get rid of this method.

56
00:04:16,970 --> 00:04:20,900
OK, so let's uh, let's see here, what do we have?

57
00:04:20,930 --> 00:04:26,240
OK, so now salary map values, OK, so now we're ready to run this.

58
00:04:27,800 --> 00:04:28,370
There we go.

59
00:04:28,400 --> 00:04:34,580
So now we've just got a collection of just the values, right?

60
00:04:38,550 --> 00:04:40,380
Instead of the key value pairs.

61
00:04:41,460 --> 00:04:43,170
So I think that should be pretty clear.

62
00:04:43,350 --> 00:04:49,710
The order, though, is still the same as it would have been if we were printing out the entire key

63
00:04:49,710 --> 00:04:51,360
value pairs, by the way.

64
00:04:51,390 --> 00:04:53,040
OK, we're just not seeing the keys.

65
00:04:53,700 --> 00:05:00,270
So currently we're using a linked hash map, which means that these are the values in the insert order,

66
00:05:00,270 --> 00:05:00,630
right?

67
00:05:00,930 --> 00:05:08,130
In other words, these values should line up with the order in which each of these rows are in, except

68
00:05:08,130 --> 00:05:11,280
for excluding the duplicates, though, right?

69
00:05:12,260 --> 00:05:16,370
OK, so that's what the values method does.

70
00:05:16,490 --> 00:05:24,140
And sometimes sometimes you need that functionality to just only get all of the values that are in a

71
00:05:24,140 --> 00:05:25,430
map, and so there you go.

72
00:05:25,490 --> 00:05:26,660
That's how you can do that.

73
00:05:27,600 --> 00:05:29,220
OK, so there's that.

74
00:05:29,370 --> 00:05:33,830
And and while we're talking about this, we might as well look at the other side of it as well.

75
00:05:33,840 --> 00:05:39,150
There's another there's another method to do kind of the opposite of that instead of getting the values,

76
00:05:39,150 --> 00:05:41,250
you want to get the keys right.

77
00:05:41,580 --> 00:05:45,120
So there's a method called key set.

78
00:05:45,690 --> 00:05:50,850
So this specifically will return a set of keys.

79
00:05:51,060 --> 00:05:54,990
So the values method returns a collection.

80
00:05:55,620 --> 00:06:02,880
They're intentionally being somewhat vague as to what the underlying collection implementation will

81
00:06:02,880 --> 00:06:03,270
be.

82
00:06:03,390 --> 00:06:09,990
But in this case, for the method that will return a collection of the keys, they're being very specific

83
00:06:09,990 --> 00:06:11,520
in saying this is a set.

84
00:06:11,820 --> 00:06:19,200
The reason for that is because in a map, you've got all these key value pairs, but the keys are really

85
00:06:19,200 --> 00:06:19,680
important.

86
00:06:19,680 --> 00:06:21,000
They have to be unique.

87
00:06:21,150 --> 00:06:21,570
Right?

88
00:06:21,600 --> 00:06:28,080
I already mentioned before that with these most standard implementations of the map interface, you

89
00:06:28,080 --> 00:06:30,420
cannot have duplicates any time.

90
00:06:30,420 --> 00:06:34,860
You have this idea that there's no there are no duplicates being permitted.

91
00:06:35,070 --> 00:06:36,510
You're thinking of a set.

92
00:06:36,660 --> 00:06:37,060
OK.

93
00:06:37,080 --> 00:06:43,170
And so that's why they're they're making it so that if you want just the keys out of the map, they're

94
00:06:43,170 --> 00:06:46,590
going to map those keys to a set.

95
00:06:46,750 --> 00:06:53,500
OK, because that's the that's the concept of no duplicates is implemented by a set.

96
00:06:53,550 --> 00:07:00,720
OK, so anyway, I will select that and then we'll run this again and see what we get.

97
00:07:01,980 --> 00:07:05,430
OK, so now we're getting just the first names, right?

98
00:07:05,460 --> 00:07:09,090
Fred in a Fred to Fred, three, Fred four, et cetera, et cetera.

99
00:07:09,090 --> 00:07:17,700
So this isn't this is not unlike what we would have gotten if we were simply printing the employees

100
00:07:17,700 --> 00:07:20,520
using one of our sets, right?

101
00:07:21,000 --> 00:07:22,560
It's the same thing, pretty much.

102
00:07:23,550 --> 00:07:23,970
OK.

103
00:07:24,480 --> 00:07:29,760
So again, sometimes you just want to extract all of the keys of a map.

104
00:07:30,090 --> 00:07:32,780
So we've looked at key set values get put.

105
00:07:32,820 --> 00:07:34,680
Size gives you the size.

106
00:07:34,680 --> 00:07:36,060
The number of entries.

107
00:07:36,570 --> 00:07:36,930
Right?

108
00:07:38,020 --> 00:07:43,810
OK, so yeah, the next thing we can look at is entry set that makes a lot of sense.

109
00:07:44,470 --> 00:07:51,460
So now notice here we've got this method entry said that returns also a set, but it returns a set that's

110
00:07:51,460 --> 00:07:54,790
a little bit complex in terms of its generic definition.

111
00:07:55,120 --> 00:08:01,750
It returns a set of something called an entry of string and integer.

112
00:08:01,750 --> 00:08:07,510
In this particular case, the string an integer is easy to understand that came from us.

113
00:08:07,750 --> 00:08:19,120
When we created our instance of the salary map, we declared it to be generic and to hold strings and

114
00:08:19,120 --> 00:08:19,750
integers.

115
00:08:19,750 --> 00:08:22,660
So that's where this bit is coming from.

116
00:08:22,660 --> 00:08:29,440
So if we were to go and change that, like I had changed it earlier to mapping a string to an employee,

117
00:08:29,450 --> 00:08:29,770
right?

118
00:08:31,060 --> 00:08:36,070
And so if I went back and changed that again and then we came back in and looked and looked again,

119
00:08:36,220 --> 00:08:37,920
this would no longer say integer.

120
00:08:37,930 --> 00:08:40,960
It would say employee or whatever data type.

121
00:08:40,960 --> 00:08:49,210
I set the generic to the generic to this entry thing, though I haven't spoken explicitly about it.

122
00:08:49,630 --> 00:08:58,510
So the entry, that's actually a special data type that comes with Java, and you can really think of

123
00:08:58,510 --> 00:08:58,650
it.

124
00:08:58,650 --> 00:09:00,070
It's actually quite simple.

125
00:09:00,220 --> 00:09:07,930
You can really think of it as a class with two properties a property called key and a property called

126
00:09:07,930 --> 00:09:08,570
value.

127
00:09:08,590 --> 00:09:09,860
That's really all it is.

128
00:09:09,890 --> 00:09:17,740
OK, so it's just a class that group's key value pairs together and it is called entry.

129
00:09:17,980 --> 00:09:18,430
OK.

130
00:09:18,790 --> 00:09:26,860
And so what this is saying is that these key value pair thingies can be placed inside of a collection,

131
00:09:26,860 --> 00:09:28,420
which is a set right?

132
00:09:28,510 --> 00:09:30,310
So you've got a list of them.

133
00:09:30,310 --> 00:09:35,770
Essentially, I use the word list in the English sense, not in the Java collections framework since,

134
00:09:35,770 --> 00:09:36,970
but you get what I mean, right?

135
00:09:37,300 --> 00:09:44,110
It's a a list or an ordered, a collection of these key value pairs that is an entry.

136
00:09:44,890 --> 00:09:46,870
OK, so let's try this out.

137
00:09:47,440 --> 00:09:56,170
And let me delete that and let me close this and let's see what we get here.

138
00:09:58,790 --> 00:10:05,750
OK, so that actually looks identical to simply printing the salary map all by itself, right?

139
00:10:05,900 --> 00:10:07,310
You don't see any difference there.

140
00:10:07,460 --> 00:10:09,020
And that makes sense, really.

141
00:10:09,560 --> 00:10:13,910
So why might we want to use this method entry set?

142
00:10:14,330 --> 00:10:19,100
Well, sometimes you want to iterate over the entries themselves.

143
00:10:19,280 --> 00:10:21,470
And this is one way that you could do it.

144
00:10:21,480 --> 00:10:26,600
In fact, they will show you really quickly what that code might look like.

145
00:10:26,870 --> 00:10:34,610
So you could have a for loop where you say something like entry.

146
00:10:36,920 --> 00:10:40,840
Of string comma integer.

147
00:10:43,390 --> 00:10:45,970
And I'll have to import that class.

148
00:10:47,260 --> 00:10:53,770
And now notice here, I'm get, I'm giving, I'm given two options of which entry class I want to import.

149
00:10:53,920 --> 00:10:55,780
You want the one that comes from map.

150
00:10:55,930 --> 00:10:56,200
Right?

151
00:10:56,200 --> 00:11:00,140
Because we're working with a map, this other one has nothing to do with that.

152
00:11:00,160 --> 00:11:06,940
So you want this this one for map and notice it even pins it with map dot entry because the entry is

153
00:11:06,940 --> 00:11:11,560
actually a nested interface inside of the map interface.

154
00:11:11,560 --> 00:11:14,980
So that's why it's prepend it here with map port entry.

155
00:11:16,330 --> 00:11:22,030
All right, so anyway, so yeah, you could have a map that entry here, and then I will just call this

156
00:11:22,030 --> 00:11:23,770
entry and then a colon.

157
00:11:23,770 --> 00:11:33,250
And then you could say a salary map dot entry set, and now you can iterate over the actual entries

158
00:11:33,250 --> 00:11:34,810
within the map.

159
00:11:34,870 --> 00:11:37,030
OK, so you could do something like

160
00:11:40,060 --> 00:11:42,820
here's a formatted string, and I don't know.

161
00:11:42,820 --> 00:11:47,380
I could say key equals percent s.

162
00:11:48,730 --> 00:11:57,550
Comma value equals percent as percent in karma.

163
00:11:59,270 --> 00:12:02,240
Entry does not get key.

164
00:12:03,320 --> 00:12:06,710
Comma entry, dot get value.

165
00:12:08,520 --> 00:12:08,820
Right.

166
00:12:08,850 --> 00:12:09,930
Does this make sense?

167
00:12:10,170 --> 00:12:12,720
In fact, I will go ahead and even run this.

168
00:12:13,590 --> 00:12:14,190
There we go.

169
00:12:14,490 --> 00:12:14,970
So.

170
00:12:16,240 --> 00:12:26,230
Now you have, you know, an iterative way of accessing the key value pairs one pair at a time, right?

171
00:12:26,230 --> 00:12:31,930
And then you can do whatever you want with those guys right off of these entry objects.

172
00:12:32,110 --> 00:12:32,560
OK.

173
00:12:32,890 --> 00:12:34,150
So I hope that makes sense.

174
00:12:34,330 --> 00:12:39,610
You can just think of them as rows in a spreadsheet, right with the two columns and you're you're getting

175
00:12:39,610 --> 00:12:41,110
one row at a time.

176
00:12:41,290 --> 00:12:43,210
That row is called an entry.

177
00:12:44,800 --> 00:12:45,110
All right.

178
00:12:45,130 --> 00:12:47,980
So that's how you can use the entry set.

179
00:12:49,390 --> 00:12:51,340
And work with entries, by the way.

180
00:12:52,090 --> 00:12:57,250
One of the thing I will note about the entry, by the way, it has a few other methods on it.

181
00:12:57,280 --> 00:13:00,040
Let's take a really quick look at some of those methods.

182
00:13:00,610 --> 00:13:03,540
So we worked with the get value, get key and get value.

183
00:13:03,550 --> 00:13:09,760
There's also a set value, though, so you could replace the value in an entry by calling the set value

184
00:13:09,760 --> 00:13:10,270
method.

185
00:13:10,300 --> 00:13:10,720
OK.

186
00:13:11,860 --> 00:13:16,090
And then the rest of the methods are boilerplate that aren't really worth going over.

187
00:13:17,440 --> 00:13:17,790
All right.

188
00:13:17,860 --> 00:13:23,110
But that's how we can use the entry set method of the map interface.

189
00:13:25,490 --> 00:13:27,800
OK, then we've got contains key.

190
00:13:28,160 --> 00:13:37,250
So this is so this is very similar to the contains method on the other collection classes like list

191
00:13:37,250 --> 00:13:38,120
and set.

192
00:13:38,840 --> 00:13:46,520
So if you wanted to know if there's a Wilma in the map, assuming that the map is mapping first names

193
00:13:46,520 --> 00:13:51,830
to something else, you could have the string Wilma and then call it contains key.

194
00:13:52,010 --> 00:13:58,220
And then it would be turned back a boolean true or false if the name Wilma is contained as a key in

195
00:13:58,220 --> 00:13:58,760
the map.

196
00:13:58,940 --> 00:14:00,980
Same thing for contains value, right?

197
00:14:00,980 --> 00:14:08,900
If you have a value like a number, an integer and you wanted to know, is this integer contained within

198
00:14:08,900 --> 00:14:12,380
the values column of this map?

199
00:14:12,890 --> 00:14:14,390
It would return a true or false.

200
00:14:14,960 --> 00:14:16,850
So that should be pretty straightforward.

201
00:14:18,020 --> 00:14:21,230
Get or default is a really cool method, actually.

202
00:14:21,920 --> 00:14:24,980
Let me show you actually what this one is for.

203
00:14:26,390 --> 00:14:32,240
So coming down here to our get salary method, have any of you wondered what would happen if we were

204
00:14:32,240 --> 00:14:40,700
to pass in a name that we know isn't contained in the keys of this map, right?

205
00:14:41,060 --> 00:14:42,470
What would you get back out?

206
00:14:43,660 --> 00:14:49,450
So actually, let's just try that out right now and see, OK, so we've got a test that's testing out

207
00:14:49,450 --> 00:14:50,110
this method.

208
00:14:50,110 --> 00:14:58,570
So if I jump back over to that test and I don't know, let's just create another test to try out this

209
00:14:58,570 --> 00:14:59,440
scenario

210
00:15:02,260 --> 00:15:08,020
test, let's call it test bad name to salary.

211
00:15:08,170 --> 00:15:15,040
So let's just do x x x x x, and let's run this and see what we get.

212
00:15:17,230 --> 00:15:18,190
All right.

213
00:15:18,490 --> 00:15:20,230
It fells, of course.

214
00:15:20,350 --> 00:15:23,680
And if we highlight this guy and scroll down.

215
00:15:25,460 --> 00:15:33,600
Cannot invoke integers into value because the return value is null, so it's returning a null.

216
00:15:33,680 --> 00:15:35,270
OK, that's what we're getting back.

217
00:15:35,480 --> 00:15:41,960
If you pass in a key to a map and you call it, get on that map with that key and that key is not contained

218
00:15:41,960 --> 00:15:46,850
within the keys of the map, you will get back a null by default.

219
00:15:47,130 --> 00:15:56,600
However, let's say that what the way we want the application to behave is that if you pass in an invalid

220
00:15:56,600 --> 00:16:01,640
key, let's say that we just expect to get back a negative one.

221
00:16:01,850 --> 00:16:05,440
OK, so I'm going to run this again, and it will still fail.

222
00:16:06,950 --> 00:16:08,660
OK, so that's still failing.

223
00:16:09,380 --> 00:16:13,610
And now let's jump back over to the system under test.

224
00:16:14,090 --> 00:16:20,630
And now what we can do is change this from a get to a get or default.

225
00:16:20,840 --> 00:16:26,480
And now the way that this method works is it still takes one input of the key, but it takes a second

226
00:16:26,480 --> 00:16:31,100
input, which is a default value that you want the method to return.

227
00:16:31,340 --> 00:16:33,020
If there is no match.

228
00:16:33,410 --> 00:16:39,170
So if I now put a negative one right there, I am saying.

229
00:16:40,560 --> 00:16:50,100
Try to get the value for the key that I'm passing in a first name, but if that results in a null or

230
00:16:50,100 --> 00:16:56,940
if that key does not exist, then just return this default value of negative one rather than returning

231
00:16:56,940 --> 00:17:01,740
a null, which isn't handled very nicely for the application.

232
00:17:01,770 --> 00:17:08,520
So this is this is actually quite a nice method to use, and I would actually encourage you to strongly

233
00:17:08,520 --> 00:17:14,320
consider letting this be kind of the default way that you may typically get data out of your maps.

234
00:17:14,340 --> 00:17:17,520
OK, so now if we rerun this, let's see what we get.

235
00:17:18,660 --> 00:17:19,530
There we go.

236
00:17:19,530 --> 00:17:20,580
And now it's green.

237
00:17:20,940 --> 00:17:26,010
OK, so that's a really nice one, and it saves you from having to type a bunch of code.

238
00:17:26,020 --> 00:17:27,810
Now you could have done this yourself, right?

239
00:17:27,820 --> 00:17:37,920
You could have we could have done something like, you know, if salary map does get first name.

240
00:17:40,670 --> 00:17:45,650
Is null, then return negative one.

241
00:17:47,650 --> 00:17:50,020
And then you could capture.

242
00:17:51,050 --> 00:17:56,060
You could capture all of this into a variable return.

243
00:18:01,120 --> 00:18:01,870
Value.

244
00:18:05,970 --> 00:18:13,860
Else return value, right, you could do something like that, or you could be a little fancier, perhaps

245
00:18:13,860 --> 00:18:20,730
and use a ternary, you get it right, but look at all that typing you have to do versus just using

246
00:18:20,730 --> 00:18:23,400
the get or default, which does all of that for you.

247
00:18:23,700 --> 00:18:28,170
OK, so that's a really cool method there that they've included.

248
00:18:28,590 --> 00:18:29,760
Very, very helpful.

249
00:18:30,090 --> 00:18:30,570
All right.

250
00:18:30,600 --> 00:18:31,740
Let's see what else we got.

251
00:18:35,910 --> 00:18:39,150
Is empty should be pretty self-explanatory.

252
00:18:39,300 --> 00:18:46,920
It checks to see if the if there are any entries in the map at all, and again, an entry is equivalent

253
00:18:46,920 --> 00:18:49,490
to a row of two columns, right?

254
00:18:49,500 --> 00:18:54,990
So if there are no rows of data added into the map, then the is empty method will return.

255
00:18:54,990 --> 00:18:58,140
True are put if absent.

256
00:18:58,230 --> 00:18:59,340
This is a good one.

257
00:18:59,970 --> 00:19:07,170
Now remember I was stating that generally speaking with regards to duplicates.

258
00:19:09,140 --> 00:19:19,370
When we have all of these duplicates here, what's happening is that as we're putting the first name

259
00:19:19,370 --> 00:19:27,470
and then the calculated value into the map, the map is accepting each new value for the same name of

260
00:19:27,470 --> 00:19:27,890
Fred.

261
00:19:27,920 --> 00:19:36,050
OK, so it's not allowing for duplicates, but it is allowing for overwriting each time we try to put

262
00:19:36,530 --> 00:19:39,240
a new value for an existing key.

263
00:19:39,260 --> 00:19:48,140
And that is why it is this last value that is actually persisting for the Fred key and not the first

264
00:19:48,140 --> 00:19:48,980
value, right?

265
00:19:49,340 --> 00:19:50,180
That's what it's doing.

266
00:19:50,180 --> 00:19:55,150
However, there is an alternative way to change that behavior.

267
00:19:55,310 --> 00:20:06,260
So if if you were to use the put, if absent method here and in fact, we can go ahead and just try

268
00:20:06,260 --> 00:20:08,520
this out and see what will happen.

269
00:20:08,540 --> 00:20:16,580
So currently we're using put right here, let's just run this again so we can see the the output that

270
00:20:16,580 --> 00:20:17,360
we were getting.

271
00:20:17,930 --> 00:20:22,970
OK, so we're getting Fred equal to one point two, six million or something like that, right?

272
00:20:23,570 --> 00:20:32,330
But if we change this to a put, if absent, let's see what we get now.

273
00:20:33,560 --> 00:20:34,490
I'll just rerun it.

274
00:20:35,750 --> 00:20:39,290
Hey, look at that, you don't get a one point two, six million anymore.

275
00:20:40,010 --> 00:20:41,000
Why is that?

276
00:20:41,750 --> 00:20:50,870
Well, it's because if you use the put, if absent the what's what's happening now is the first time

277
00:20:50,870 --> 00:20:58,850
the code tries to put Fred and whatever this value would be, that goes in to the map just fine the

278
00:20:58,850 --> 00:21:03,730
next time it encounters a Fred, though it will now actually ignore this.

279
00:21:03,740 --> 00:21:11,330
It won't even it won't actually update the value because it sees that we already have a Fred entry in

280
00:21:11,330 --> 00:21:11,690
here.

281
00:21:11,840 --> 00:21:16,880
And so as we try to add another Fred entry, it says, Well, I already have a Fred.

282
00:21:16,880 --> 00:21:18,110
Fred is not absent.

283
00:21:18,110 --> 00:21:23,780
Fred exists, and therefore I'm not going to update this value for Fred.

284
00:21:23,900 --> 00:21:28,370
I'm going to stick with the original value that I had, which is this one right here.

285
00:21:28,490 --> 00:21:34,850
And just to prove that we'll just change this value slightly from 2000 to maybe 2500.

286
00:21:34,880 --> 00:21:35,300
OK.

287
00:21:35,420 --> 00:21:38,030
So currently we're getting to eight 03, right?

288
00:21:38,390 --> 00:21:44,270
So if we rerun this now, with that number having changed, this should change.

289
00:21:45,340 --> 00:21:46,570
Two to three.

290
00:21:47,930 --> 00:21:54,920
Yeah, now it's three, five, oh three, OK, so now we've kind of made it behave a little bit more

291
00:21:54,920 --> 00:21:58,910
as a set as you might have thought of a set behaving right.

292
00:21:59,360 --> 00:21:59,600
Yeah.

293
00:21:59,600 --> 00:22:04,100
So it's no longer overwriting the so-called duplicates, right?

294
00:22:04,100 --> 00:22:07,550
It's sticking with the first one and then ignoring the rest.

295
00:22:07,790 --> 00:22:14,300
So that's a key thing to keep in mind also might come in handy sometime if you want that specific behavior

296
00:22:14,300 --> 00:22:15,170
for your map.

297
00:22:15,260 --> 00:22:20,240
But the default behavior is just to keep overwriting the value every time you see a duplicate or every

298
00:22:20,240 --> 00:22:21,620
time it sees a duplicate.

299
00:22:21,770 --> 00:22:27,050
All right, so put if absent, I think I'm going to put this back for now, no pun intended.

300
00:22:28,940 --> 00:22:30,590
All right, so that's put.

301
00:22:32,280 --> 00:22:33,540
What else do we have here?

302
00:22:34,440 --> 00:22:37,620
You can remove an entry from the map.

303
00:22:37,830 --> 00:22:38,820
Keep that in mind now.

304
00:22:38,820 --> 00:22:45,030
If you call remove and you pass in a key, you're removing the entire row or the entry, right?

305
00:22:45,030 --> 00:22:47,070
So you removing both the key and the value.

306
00:22:47,700 --> 00:22:48,780
And that makes sense, right?

307
00:22:48,840 --> 00:22:54,030
You can't have keys without values or values without keys, really.

308
00:22:55,110 --> 00:23:01,170
Now you can have no in either the key or for either the key or the value or both.

309
00:23:01,170 --> 00:23:04,140
So you can have that, but you can't.

310
00:23:04,560 --> 00:23:09,000
But whatever you do, you're going to have an entry for each row.

311
00:23:09,030 --> 00:23:14,200
OK, so the removed method will find whichever entry has that key.

312
00:23:14,220 --> 00:23:21,360
If there is one and then it will remove it, and then it will return the value that was associated with

313
00:23:21,360 --> 00:23:22,020
that key.

314
00:23:23,540 --> 00:23:27,500
All right, and then put all is kind of a neat method.

315
00:23:27,620 --> 00:23:33,230
I honestly have I don't know that I've used it very often, but let's say you have two maps.

316
00:23:34,920 --> 00:23:41,370
And they both map the same data types, so they both map, for example, string to integer or whatever,

317
00:23:42,180 --> 00:23:44,410
as long as they both map to the same types.

318
00:23:44,670 --> 00:23:52,530
If you wanted to essentially kind of like merge the contents of one map to another, you can use put

319
00:23:52,530 --> 00:23:52,960
all.

320
00:23:52,980 --> 00:23:58,200
OK, so basically you would call, put all and then you would pass in the other map.

321
00:23:58,410 --> 00:23:59,220
And then what?

322
00:23:59,220 --> 00:24:08,100
What would effectively happen is that your your map a would now contain everything that it had before,

323
00:24:08,100 --> 00:24:10,740
plus everything that was in the other map.

324
00:24:10,770 --> 00:24:16,500
OK, so it's just kind of like able to merge two maps together to become one big super map.

325
00:24:17,010 --> 00:24:23,250
And I think that's going to be about it for the most common methods that you're likely to encounter

326
00:24:23,250 --> 00:24:26,670
or use on the map interface for now.

327
00:24:26,940 --> 00:24:33,120
Now we will come back and revisit a number of the a few of the methods that I've skipped over here.

328
00:24:33,810 --> 00:24:39,720
When we get more in even more in depth into lambdas and things like that, because there's some additionally

329
00:24:39,720 --> 00:24:43,830
like really cool things that you can do, but we'll save that for another time.

330
00:24:44,070 --> 00:24:48,540
So with that, we're going to close out this lesson and we'll see you in the next one.
