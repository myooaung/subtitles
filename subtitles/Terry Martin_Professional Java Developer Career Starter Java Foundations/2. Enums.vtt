WEBVTT
1
00:00:00.120 --> 00:00:07.350
All right, so in this lesson, we are going to learn about enemies, which is short for enumeration.

2
00:00:07.650 --> 00:00:18.150
So an enum is a very special type of Java class that can represent a finite set of values.

3
00:00:18.390 --> 00:00:23.880
These values will usually be related to each other in some way, like they will be a set.

4
00:00:24.510 --> 00:00:30.870
Now, I'm not going to try to go into great detail in defining exactly what this means, because I think

5
00:00:30.870 --> 00:00:33.510
it's best if I just show you instead.

6
00:00:33.900 --> 00:00:38.400
So let's get into the A.D. and we're going to create a new project.

7
00:00:38.520 --> 00:00:45.060
I'm also going to introduce you to another variation on how to create projects now that we've learned

8
00:00:45.060 --> 00:00:46.920
a little bit about writing tests.

9
00:00:47.250 --> 00:00:53.490
So in the A.D., let's go up to file new project.

10
00:00:55.640 --> 00:00:59.600
And now we're going to do something a little different than we've done in the past.

11
00:00:59.990 --> 00:01:05.540
We're going to create a new project, but normally we've been selecting Java here on the left.

12
00:01:05.930 --> 00:01:09.920
This time around, we're still going to code in Java, by the way, but we're just going to build this

13
00:01:09.920 --> 00:01:11.450
project a little bit differently.

14
00:01:11.630 --> 00:01:15.740
This time we're going to make what is called a Gradle project.

15
00:01:16.010 --> 00:01:21.320
And I will explain a little bit more about Gradle in a moment, but let's get this project created real

16
00:01:21.320 --> 00:01:21.680
quick.

17
00:01:22.100 --> 00:01:30.290
So we'll select Gradle, and you should have Java as the language that is selected over here and everything

18
00:01:30.290 --> 00:01:31.850
else should be left alone.

19
00:01:32.360 --> 00:01:34.460
And then you can click next.

20
00:01:35.660 --> 00:01:41.870
And for the project name, let's call this blackjack.

21
00:01:44.370 --> 00:01:45.060
All right.

22
00:01:45.270 --> 00:01:47.430
And then you can click finish.

23
00:01:48.830 --> 00:01:51.050
And I'm going to put mine in a new window.

24
00:01:53.970 --> 00:02:00.360
Now, intelligence may take a little bit of time to get this project set up, and the way you can tell

25
00:02:00.360 --> 00:02:06.420
that intelligence is working on it is that there will be these little progress icons here that are sort

26
00:02:06.420 --> 00:02:08.700
of scrolling or whatever it is that they are doing.

27
00:02:08.700 --> 00:02:11.610
So that's kind of letting you know that intelligence is busy.

28
00:02:11.790 --> 00:02:18.660
I generally prefer to not try to do anything with the aid while that's happening because the project

29
00:02:18.660 --> 00:02:22.170
may be in an unstable state until it's done.

30
00:02:22.320 --> 00:02:24.510
However, it looks like on mine it is done now.

31
00:02:24.900 --> 00:02:30.270
And so over here you'll see a few more files than we normally would have.

32
00:02:30.900 --> 00:02:36.240
So you'll see the project name itself Black Jack and a few folders.

33
00:02:36.660 --> 00:02:42.210
You'll see a source folder, which we've seen before, and then you'll see a main and a test folder,

34
00:02:42.210 --> 00:02:44.010
though, so that's a little bit different.

35
00:02:44.190 --> 00:02:51.600
And so one of the reasons that I wanted to have you create this project in this way is because up until

36
00:02:51.600 --> 00:02:59.820
now, for the projects that we did in the test module, we were creating the main and test folders ourselves

37
00:02:59.820 --> 00:03:01.290
and then configuring them.

38
00:03:01.560 --> 00:03:05.730
But with Gradle, and there's another way to do this with MAVEN as well.

39
00:03:05.940 --> 00:03:11.070
But when we build a Gradle project, we get these built automatically.

40
00:03:11.220 --> 00:03:17.190
So for right now, that is one of the biggest reasons why I wanted to have you do this.

41
00:03:17.400 --> 00:03:24.390
So let me talk just really briefly about Gradle and a related tool called MAVEN as well.

42
00:03:24.780 --> 00:03:32.370
So as I mentioned in the test module, when we were first learning how to include J Unit as a library

43
00:03:32.370 --> 00:03:41.250
dependency for our new projects, I mentioned that intelligence is actually downloading the J Unit library

44
00:03:41.460 --> 00:03:49.320
from a well known repository on the internet, which is maintained by a project called MAVEN.

45
00:03:49.500 --> 00:03:57.150
And I also mentioned that MAVEN is a tool which does a number of things, some of which are helping

46
00:03:57.150 --> 00:04:03.720
us to manage and maintain third party library dependencies for our project.

47
00:04:03.870 --> 00:04:05.370
So we saw that firsthand.

48
00:04:05.490 --> 00:04:13.620
J Unit is a third party library, and we wanted that to become a dependency in some of our projects

49
00:04:13.620 --> 00:04:17.070
in the testing module that we just recently finished.

50
00:04:17.790 --> 00:04:26.460
So MAVEN gives us an easy way to declare what are the third party libraries that we want to depend on.

51
00:04:26.670 --> 00:04:33.030
And then it makes it easy to pull those libraries into our project and manage them.

52
00:04:33.270 --> 00:04:40.380
And not only just the names of them, but even the versions MAVEN and Gradle as well also make it easy

53
00:04:40.380 --> 00:04:47.820
for us to build our projects in a way that is independent of whatever idea we may be using.

54
00:04:47.850 --> 00:04:53.700
So while we in this course are using intelligence, there are lots and lots of Java developers who may

55
00:04:53.700 --> 00:04:58.280
be using Eclipse or NetBeans or some other ADC.

56
00:04:58.800 --> 00:05:08.130
And by using MAVEN or Gradle to manage building the project and managing its dependencies, we can be

57
00:05:08.130 --> 00:05:12.060
completely independent from whatever idea we're using.

58
00:05:12.360 --> 00:05:19.110
So these are just a few of the nice advantages of these tools now between Gradle and MAVEN.

59
00:05:19.650 --> 00:05:23.040
In general, they both do roughly the same thing.

60
00:05:23.190 --> 00:05:30.170
MAVEN is older than Gradle, and as such, it is probably the de facto standard in many ways.

61
00:05:30.180 --> 00:05:37.680
I mean, even Gradle is making use of MAVEN's standards for where to keep the library dependencies.

62
00:05:37.950 --> 00:05:45.420
The primary reason I opted to have you create this project using Gradle rather than MAVEN is honestly

63
00:05:45.630 --> 00:05:52.170
because personally, I slightly prefer Gradle over MAVEN, though I spent many, many years as a huge

64
00:05:52.170 --> 00:05:53.880
advocate for MAVEN as well.

65
00:05:54.270 --> 00:06:03.450
Both tools require a configuration file in order to specify how to build your project and what its dependencies

66
00:06:03.450 --> 00:06:04.080
should be.

67
00:06:04.080 --> 00:06:08.970
But I find that Gradle configuration files tend to be more concise.

68
00:06:09.480 --> 00:06:18.720
And furthermore, the J Unit dependency that we had to specify in the last few projects is in the same

69
00:06:18.720 --> 00:06:27.090
format that Gradle uses, whereas MAVEN uses a slightly more verbose format, though that doesn't really

70
00:06:27.090 --> 00:06:33.720
matter because the website that we learned about the dependency from MAVEN Repository can give us that

71
00:06:33.720 --> 00:06:35.910
format in any number of ways.

72
00:06:36.630 --> 00:06:39.840
All right, so that's all I want to say about MAVEN and Gradle for now.

73
00:06:39.990 --> 00:06:43.650
So let's jump in here, though, and actually do some coding.

74
00:06:44.160 --> 00:06:45.680
So here's the scenario.

75
00:06:45.690 --> 00:06:50.130
Let's imagine again that we are going to make a blackjack game.

76
00:06:50.610 --> 00:06:53.160
And as such, we need.

77
00:06:53.380 --> 00:07:02.050
Who model the game of blackjack, and to my mind, one of the most fundamental concepts in blackjack

78
00:07:02.050 --> 00:07:05.140
is the concept of a playing card, right?

79
00:07:05.140 --> 00:07:08.920
An actual card and being that I am an object oriented programmer.

80
00:07:09.160 --> 00:07:16.810
I am strongly inclined to want to model the concept of a playing card in code, right?

81
00:07:17.230 --> 00:07:18.840
So let's just do that.

82
00:07:18.850 --> 00:07:22.120
Let's go ahead and try modeling a playing card.

83
00:07:22.390 --> 00:07:27.370
And don't worry, this is all leading up to a better understanding of what is an enum.

84
00:07:27.670 --> 00:07:28.050
All right.

85
00:07:28.060 --> 00:07:32.920
So what we're going to do here is let's go to this main folder here.

86
00:07:33.250 --> 00:07:38.530
And if you expand it, I just clicked on the little greater than symbol there to expand this.

87
00:07:38.800 --> 00:07:43.150
You'll see that there are a couple additional folders that we had not seen before.

88
00:07:43.160 --> 00:07:48.280
We didn't create these in our previous projects, but MAVEN and Gradle create these.

89
00:07:48.280 --> 00:07:54.610
By the way, this directory structure you're seeing here source main java and resources, etc..

90
00:07:54.850 --> 00:08:01.330
This is a Java Project Directory standard that was really popularized by MAVEN.

91
00:08:01.370 --> 00:08:05.530
OK, so much so that even Gradle chose to adopt it as its default.

92
00:08:05.530 --> 00:08:05.890
OK?

93
00:08:06.340 --> 00:08:06.690
All right.

94
00:08:06.700 --> 00:08:11.200
So what we're going to do is to right click on this Java here.

95
00:08:11.210 --> 00:08:14.650
Make sure you're under source main and not under test the OK.

96
00:08:14.920 --> 00:08:16.540
So right click on Java.

97
00:08:17.050 --> 00:08:22.120
Go to New Java class and we will create a new class.

98
00:08:22.270 --> 00:08:27.760
But let's also created in its own package, so we'll specify the package name and the class name all

99
00:08:27.760 --> 00:08:28.270
in one.

100
00:08:28.510 --> 00:08:33.210
So I'm going to use my own companies domain name as the package name.

101
00:08:33.220 --> 00:08:38.770
You're welcome to use the same, or you could use your name, your first name or whatever you want to

102
00:08:38.770 --> 00:08:39.030
use.

103
00:08:39.040 --> 00:08:39.850
It doesn't matter.

104
00:08:40.300 --> 00:08:44.770
All right, so calmed neutrinos six dot.

105
00:08:45.040 --> 00:08:53.530
Now I'm going to use the name of the Project Blackjack and then Dot and then the name of the actual

106
00:08:53.530 --> 00:08:57.250
class that I want to create, which is I'm going to model a card.

107
00:08:57.550 --> 00:08:59.140
So card.

108
00:09:00.250 --> 00:09:00.670
All right.

109
00:09:01.300 --> 00:09:04.450
So make sure that the package name that is.

110
00:09:04.450 --> 00:09:10.840
Com Neutrino says blackjack is all lowercase, which is just the standard Java naming convention for

111
00:09:10.840 --> 00:09:17.740
packages followed by a period and then the actual name of the class itself should be capitalized.

112
00:09:18.160 --> 00:09:18.590
All right.

113
00:09:18.610 --> 00:09:20.710
And when you have that hit return?

114
00:09:21.220 --> 00:09:24.670
OK, now how do we model a playing card?

115
00:09:24.970 --> 00:09:30.970
Well, to answer that question, we need to consider what are some of the core properties of a playing

116
00:09:30.970 --> 00:09:31.360
card?

117
00:09:31.600 --> 00:09:37.810
So sometimes when I'm modeling a new concept that I'm not 100 percent certain that I know at an expert

118
00:09:37.810 --> 00:09:43.900
level, I may actually just Google for that concept and read a little bit about it in order to learn.

119
00:09:44.020 --> 00:09:48.460
Well, what are some of the properties and attributes of that concept?

120
00:09:48.730 --> 00:09:50.530
So I've actually done that here.

121
00:09:50.710 --> 00:09:56.110
I've gone out and googled for information on playing cards.

122
00:09:56.380 --> 00:09:59.350
And let me show you what I've found here.

123
00:09:59.350 --> 00:10:05.860
So I went to one of my favorite resources in the world, which is Wikipedia, and I found an article

124
00:10:05.860 --> 00:10:08.950
here on the standard 52 card deck.

125
00:10:09.430 --> 00:10:11.470
So a deck of playing cards.

126
00:10:12.040 --> 00:10:22.750
And down here, I see that a standard 52 card deck comprises 13 ranks in each of the four French suits,

127
00:10:23.050 --> 00:10:26.440
clubs, diamonds, hearts and spades.

128
00:10:26.710 --> 00:10:30.130
So here I see a graphical representation of that.

129
00:10:30.160 --> 00:10:31.210
Let me zoom in here.

130
00:10:31.480 --> 00:10:31.840
All right.

131
00:10:32.200 --> 00:10:38.950
So 13 ranks ace and then numbers two through 10 and then Jack, Queen and king.

132
00:10:39.460 --> 00:10:44.110
And then the suits are clubs, diamonds, hearts and spades.

133
00:10:44.290 --> 00:10:51.010
So right there I have a notion that a playing card has at least two two core properties.

134
00:10:51.220 --> 00:10:53.950
It has a rank and it has a suit.

135
00:10:54.400 --> 00:10:59.710
So those are two properties that I would want to model in my card class.

136
00:10:59.980 --> 00:11:06.600
So now the next question I need to ask myself is how best should I model these two concepts?

137
00:11:06.610 --> 00:11:09.100
What data type should I use?

138
00:11:09.550 --> 00:11:16.570
Now what's interesting here is if the rank consisted only of these numbers two through 10, I would

139
00:11:16.570 --> 00:11:23.860
definitely use some type of an integer numeric data type, whether that's a byte or a short or an end,

140
00:11:24.040 --> 00:11:24.700
whatever.

141
00:11:24.790 --> 00:11:26.830
I would use a numeric data type.

142
00:11:26.860 --> 00:11:33.100
However, things are complicated a bit by the fact that that's not all that can be.

143
00:11:33.370 --> 00:11:36.790
Those are not the only values you can have for a rank.

144
00:11:37.030 --> 00:11:39.170
We've also got Ace.

145
00:11:40.250 --> 00:11:52.160
Jack, Queen and king, so I have to decide, OK, what data type do I want to use to model this concept?

146
00:11:52.310 --> 00:11:55.790
And then I've got the similar question here for the suit.

147
00:11:56.210 --> 00:11:58.190
You've got all names.

148
00:11:58.400 --> 00:11:59.470
So I don't know.

149
00:11:59.480 --> 00:12:07.040
At first blush, you might think, well, maybe just using a string would allow me to represent these

150
00:12:07.040 --> 00:12:07.460
best.

151
00:12:07.610 --> 00:12:10.460
So let's start with the suit and model that.

152
00:12:11.840 --> 00:12:12.170
All right.

153
00:12:12.170 --> 00:12:18.860
So I'm going to make a new line and I'm going to create a new field here and I'm going to make it a

154
00:12:18.860 --> 00:12:21.320
string and I will call it suit.

155
00:12:22.490 --> 00:12:22.960
OK.

156
00:12:23.690 --> 00:12:23.990
All right.

157
00:12:24.020 --> 00:12:28.640
And, you know, while we're at it, let's go ahead and model the rank as well.

158
00:12:29.000 --> 00:12:36.440
So since I have to allow for both numbers and these names, I could model that as a string.

159
00:12:36.590 --> 00:12:36.920
All right.

160
00:12:36.930 --> 00:12:42.560
So yeah, let's just model the rank as a string and see see what that looks like.

161
00:12:43.250 --> 00:12:43.600
All right.

162
00:12:43.610 --> 00:12:47.390
So private string rank.

163
00:12:48.980 --> 00:12:49.370
All right.

164
00:12:49.580 --> 00:12:58.010
Now, when we're modeling, it's pretty standard in the Java world to create a constructor and getter

165
00:12:58.010 --> 00:12:59.060
and setter method.

166
00:12:59.090 --> 00:13:01.190
So let's go ahead and do that for Mac users.

167
00:13:01.200 --> 00:13:05.840
You can do command in and then choose constructor for Windows and Linux users.

168
00:13:05.840 --> 00:13:10.190
I think you may have to just right click and then choose Generate.

169
00:13:10.430 --> 00:13:10.850
OK.

170
00:13:11.870 --> 00:13:13.910
All right, so choose Constructor.

171
00:13:14.540 --> 00:13:24.050
Now I'm going to make a constructor that allows me to set or initialize my card with these two properties

172
00:13:24.050 --> 00:13:25.070
suit and rank.

173
00:13:25.250 --> 00:13:31.040
So I'm going to select both of those, and I just did that with a command on Mac and I think a control

174
00:13:31.040 --> 00:13:34.280
a on Windows and Linux and then click, OK.

175
00:13:34.760 --> 00:13:35.030
All right.

176
00:13:35.030 --> 00:13:37.400
So what that does is that generates this constructor.

177
00:13:37.410 --> 00:13:43.730
Now, if you don't remember exactly what is a constructor for, it's basically a method that allows

178
00:13:43.730 --> 00:13:50.810
you to initialize a newly created object, and we'll see this being used in just a moment.

179
00:13:50.870 --> 00:13:51.290
All right.

180
00:13:51.770 --> 00:13:54.650
And then we'll also create our getters and setters.

181
00:13:54.660 --> 00:14:00.680
So again, I'm going to do a command in, and this time I'm going to go to getter setter and choose

182
00:14:00.680 --> 00:14:01.220
that.

183
00:14:01.460 --> 00:14:07.910
And then I'm going to choose both of the properties, their suit and rank and then click, OK.

184
00:14:08.090 --> 00:14:16.310
And so that just generated four methods two for setting the suit and rank and then two for getting the

185
00:14:16.310 --> 00:14:19.070
suit and rank out of an instance.

186
00:14:19.490 --> 00:14:20.220
All right.

187
00:14:20.240 --> 00:14:25.460
And again, these are just boilerplate standard things that we typically do in Java.

188
00:14:25.670 --> 00:14:26.120
OK.

189
00:14:26.240 --> 00:14:26.570
All right.

190
00:14:26.610 --> 00:14:28.190
Going to minimize that?

191
00:14:28.610 --> 00:14:32.450
So let's just see what this might look like to play with now.

192
00:14:32.690 --> 00:14:35.750
Temporarily, we'll just do this with the public static void main.

193
00:14:36.110 --> 00:14:36.440
All right.

194
00:14:36.450 --> 00:14:42.080
So let's make a quick public static void main method SVM Return.

195
00:14:42.230 --> 00:14:46.940
And now let's see what it would look like to create an instance of one of these cards.

196
00:14:46.940 --> 00:14:48.170
So I'm going to create a card.

197
00:14:49.160 --> 00:14:50.480
I'll call it card.

198
00:14:50.480 --> 00:14:57.080
One equals new card, and right here we get to use the constructor.

199
00:14:57.080 --> 00:15:02.690
So if you had forgotten what the constructor was for, it is this thing here.

200
00:15:02.690 --> 00:15:06.740
When we're saying when we want to create a new instance of a class, right?

201
00:15:06.890 --> 00:15:10.250
You say new and then the name of the class parentheses.

202
00:15:10.280 --> 00:15:15.230
And so just like when you're calling a method, you have these parentheses and you can pass inputs,

203
00:15:15.230 --> 00:15:15.530
right?

204
00:15:15.740 --> 00:15:22.400
And since our constructor is expecting us to pass in the suit and the rank, that's what we have here

205
00:15:22.910 --> 00:15:23.150
now.

206
00:15:23.150 --> 00:15:29.660
Normally, most of the classes we've worked with didn't take any inputs for the constructor because

207
00:15:29.660 --> 00:15:33.170
they were using what is called the no ARG default constructor.

208
00:15:33.320 --> 00:15:39.500
But in this case, I've opted for now not to create a new ARG default constructor and just to get straight

209
00:15:39.500 --> 00:15:40.160
to business.

210
00:15:40.310 --> 00:15:46.040
It wouldn't make sense to be able to create one of these cards without it having a suit and a rank,

211
00:15:46.250 --> 00:15:54.020
and therefore, in most cases, it probably doesn't make any sense to be able to create a card with

212
00:15:54.020 --> 00:15:56.210
a no ARG default constructor.

213
00:15:56.270 --> 00:16:02.420
All right, so we've got Sutin rank, so for the suit, we can specify something like clubs, diamonds,

214
00:16:02.420 --> 00:16:03.650
hearts or spades.

215
00:16:03.890 --> 00:16:05.120
So let's just do that.

216
00:16:05.120 --> 00:16:07.160
Let's do clubs.

217
00:16:07.820 --> 00:16:10.700
And then for the rank?

218
00:16:10.970 --> 00:16:12.500
Let's do King.

219
00:16:14.360 --> 00:16:14.810
All right.

220
00:16:15.260 --> 00:16:16.590
So there's a card.

221
00:16:17.690 --> 00:16:21.380
Now, let's imagine that we were going to make one more card.

222
00:16:21.500 --> 00:16:34.280
Card two equals new card, and let's give this a diamond's suit and a rank of 10.

223
00:16:36.740 --> 00:16:39.710
Now, let's imagine that these two cards.

224
00:16:40.290 --> 00:16:42.270
Are in someone's hand.

225
00:16:42.330 --> 00:16:51.270
Right, like these have been dealt to a player and the game needs to add up the values of these two

226
00:16:51.270 --> 00:16:55.860
cards to determine whether or not they are below 21 or over 21.

227
00:16:55.860 --> 00:17:00.260
If you remember the rules of blackjack, the rules are that each card has a value.

228
00:17:00.270 --> 00:17:02.820
In fact, I'm sorry, let's review the rules real quick here.

229
00:17:02.820 --> 00:17:07.890
OK, so the number cards have a value, which is the same as their actual number.

230
00:17:08.550 --> 00:17:12.800
The ace card, though, has a slightly more complicated value.

231
00:17:12.810 --> 00:17:21.420
Its value can be either one or 11, depending on whichever one is more advantageous to your hand than

232
00:17:21.420 --> 00:17:23.140
the Jack, Queen and King.

233
00:17:23.160 --> 00:17:25.080
Each have a value of 10.

234
00:17:25.290 --> 00:17:25.770
OK.

235
00:17:26.130 --> 00:17:34.080
And you're trying to get as close to a total value as twenty one with all the cards in your hand as

236
00:17:34.080 --> 00:17:36.760
possible without going over 21.

237
00:17:37.080 --> 00:17:44.040
And when you're playing against a dealer, the dealer also has a hand and you're trying to get a higher

238
00:17:44.040 --> 00:17:47.100
score than the dealer without going over 21.

239
00:17:47.130 --> 00:17:47.640
OK.

240
00:17:47.700 --> 00:17:56.220
So if you already have a 10 and a nine, for example, so you've got 19 and then you get an ace, you

241
00:17:56.220 --> 00:18:02.460
will not want that ace to be valued at 11, because that would put you well over 21.

242
00:18:02.610 --> 00:18:05.190
You'd want that to be valued at one.

243
00:18:05.310 --> 00:18:05.670
Right.

244
00:18:05.670 --> 00:18:07.350
So there's a little bit of game logic there.

245
00:18:07.830 --> 00:18:08.270
All right.

246
00:18:08.280 --> 00:18:11.090
So that's a quick review on the rules of blackjack.

247
00:18:11.100 --> 00:18:19.830
So going back over to the 80s now, it might be kind of cool if we could do something like either Card

248
00:18:19.830 --> 00:18:31.080
one plus card two and then that might return an integer like total, right?

249
00:18:31.200 --> 00:18:34.200
So that might be kind of cool to be able to do something like that.

250
00:18:34.860 --> 00:18:40.870
Or maybe there could be another class which is called hand like, you know, your hand.

251
00:18:40.890 --> 00:18:48.090
So when you are dealt cards in blackjack, the cards that you have in your possession are called your

252
00:18:48.090 --> 00:18:48.690
hand.

253
00:18:48.780 --> 00:18:49.240
OK.

254
00:18:49.590 --> 00:18:57.960
So if you had a hand, I'll just show an example here, my hand.

255
00:18:58.560 --> 00:19:02.040
We're going to pretend like we have this code if we don't have this code, but we're pretending like

256
00:19:02.040 --> 00:19:02.430
we do.

257
00:19:03.060 --> 00:19:03.390
All right.

258
00:19:03.390 --> 00:19:14.280
So let's say you had a hand and then you could and then you could add card one.

259
00:19:18.710 --> 00:19:29.510
And add card, too, and then finally, you could say something like my hand died, get total and maybe

260
00:19:29.510 --> 00:19:40.430
that would return an integer like so of the total value of all of your cards in your hand.

261
00:19:40.610 --> 00:19:46.460
And it would know the business logic to determine whether or not any aces that you have in your hand

262
00:19:46.460 --> 00:19:49.730
should be valued at a one or an 11.

263
00:19:49.760 --> 00:19:54.950
OK, so that would be some really nice logic to code into the program, right?

264
00:19:55.280 --> 00:20:04.520
So here are some issues if we were to use a string to model the suit as we actually have done here.

265
00:20:04.910 --> 00:20:09.290
One issue I can see is that you could simply have typos, right?

266
00:20:09.440 --> 00:20:17.390
Like what if someone coded this and accidentally put, you know, misspelled the word club or intentionally

267
00:20:17.570 --> 00:20:22.370
avoided using any of the suit names that are actually expected right?

268
00:20:22.370 --> 00:20:27.410
And they put apples in here, which isn't one of the standard suits at all.

269
00:20:27.440 --> 00:20:28.700
What would the program do?

270
00:20:28.820 --> 00:20:31.040
Same thing goes for rank and in fact, for rank.

271
00:20:31.040 --> 00:20:32.870
It's even worse, actually, right?

272
00:20:32.900 --> 00:20:35.270
Because this is really where the value comes from.

273
00:20:35.510 --> 00:20:39.470
So what if someone said Joker?

274
00:20:39.740 --> 00:20:43.070
Joker is not one of the standard ranks, right?

275
00:20:43.610 --> 00:20:45.740
What would the program logic do?

276
00:20:46.130 --> 00:20:49.340
And so this brings us to the concept of an enum.

277
00:20:50.180 --> 00:21:00.110
So typically, when we have a situation where you can have a property that can be set to a finite set

278
00:21:00.110 --> 00:21:08.510
of values like here, we've got the suit, and the suit could be set to one of four possible values

279
00:21:08.510 --> 00:21:10.160
and only four values.

280
00:21:10.340 --> 00:21:13.100
And this set of four values will never change, right?

281
00:21:13.520 --> 00:21:17.390
The game of cards has probably been around for hundreds and hundreds of years.

282
00:21:17.510 --> 00:21:23.090
I don't know how long they've settled on these four values for a suit, but I'm guessing it's been hundreds

283
00:21:23.090 --> 00:21:23.520
of years.

284
00:21:23.540 --> 00:21:25.280
I'm guessing it's been a really long time.

285
00:21:25.520 --> 00:21:25.850
Right?

286
00:21:26.030 --> 00:21:30.500
So we can just assume these are never going to change for this game.

287
00:21:30.500 --> 00:21:32.810
If they do, then that's not the same game anymore.

288
00:21:32.900 --> 00:21:35.960
Same thing goes for the rinks, right?

289
00:21:36.140 --> 00:21:41.240
This is a finite set of values that presumably will never change.

290
00:21:41.270 --> 00:21:41.710
OK.

291
00:21:42.050 --> 00:21:52.370
So when we have a situation like this, Inhumans can be a useful way to protect us from certain types

292
00:21:52.370 --> 00:21:59.390
of mistakes and limit the range of values that we could possibly set for a property.

293
00:21:59.750 --> 00:22:08.420
So here we're using a string, but if we could use an enum somehow and tell that enum that for a suit?

294
00:22:08.630 --> 00:22:13.520
These are the only options I ever want to allow anyone to use.

295
00:22:13.850 --> 00:22:23.900
Then we would make our code what is called type safe and prevent ourselves and other programmers from

296
00:22:23.900 --> 00:22:27.920
setting that property to values that are invalid.

297
00:22:28.010 --> 00:22:29.810
OK, so let's see how to do that.

298
00:22:30.110 --> 00:22:36.170
So like I said, at the top, an enum is really a special form of a class.

299
00:22:36.770 --> 00:22:38.180
So let's see how to create one.

300
00:22:38.270 --> 00:22:38.620
All right.

301
00:22:38.630 --> 00:22:44.000
So we'll go over here and we can just put it in this same package here.

302
00:22:44.000 --> 00:22:53.630
So I'm going to right click on the com neutrino cis blackjack package and select new Java class.

303
00:22:53.630 --> 00:22:55.790
So that's the first key you actually do.

304
00:22:55.790 --> 00:23:00.020
Just get to this via the Java new Java class dialog.

305
00:23:00.290 --> 00:23:04.100
Now here we can state what we're trying to create now.

306
00:23:04.100 --> 00:23:08.030
Up until now, we've only been creating classes, right?

307
00:23:08.330 --> 00:23:10.400
But now we're going to create an enum.

308
00:23:11.390 --> 00:23:16.280
So this is a little hint right here that even in enum is basically some type of class.

309
00:23:16.970 --> 00:23:20.060
And then for the name, this is where things get kind of cool.

310
00:23:20.090 --> 00:23:26.180
We can actually name this based on the actual property concept here that we want to model.

311
00:23:26.330 --> 00:23:27.980
So let's handle the suit.

312
00:23:28.130 --> 00:23:35.300
OK, so we can create an enum called suit and just and we use the same rules of naming that we use with

313
00:23:35.300 --> 00:23:35.750
a class.

314
00:23:35.750 --> 00:23:37.460
So it should be capitalized.

315
00:23:37.490 --> 00:23:39.600
OK, and then hit return.

316
00:23:39.650 --> 00:23:39.990
All right.

317
00:23:39.990 --> 00:23:41.780
So now we've got a new enum.

318
00:23:42.080 --> 00:23:44.170
Now notice the structure of an enum.

319
00:23:44.180 --> 00:23:47.150
It can have visibility just like a class can.

320
00:23:47.450 --> 00:23:51.770
But instead of the keyword of class, we now have the keyword of Enum.

321
00:23:51.800 --> 00:23:52.280
OK.

322
00:23:52.310 --> 00:23:53.780
So that's one difference.

323
00:23:54.170 --> 00:23:58.850
And then we have the actual name of the class, and then you have the curly braces, just like you do

324
00:23:58.850 --> 00:24:00.110
with any other class.

325
00:24:00.710 --> 00:24:01.130
All right.

326
00:24:01.370 --> 00:24:03.320
Then I will make a new line now.

327
00:24:03.350 --> 00:24:07.630
This is where things get a little different in the body of the class.

328
00:24:07.640 --> 00:24:15.410
The main thing we will usually put in an enum body are what are basically thought of as constants.

329
00:24:15.530 --> 00:24:17.100
And these will be the actual.

330
00:24:17.210 --> 00:24:24.520
Values of the economy, so if we go back over here and look, the values that you can have for a suit

331
00:24:24.520 --> 00:24:27.820
are clubs, diamonds, hearts and spades.

332
00:24:28.270 --> 00:24:35.230
So we can actually create basically constants that reflect those same options here.

333
00:24:35.650 --> 00:24:43.270
Typically, these will be all capitalized because they are closely associated with constants.

334
00:24:43.450 --> 00:24:48.250
And as we've learned before, generally speaking in Java, constants are all caps.

335
00:24:48.430 --> 00:24:50.050
So let's make clubs.

336
00:24:50.350 --> 00:24:56.560
Now, the way we do this is we separate these by commas and frequently you'll see them each on their

337
00:24:56.560 --> 00:24:57.310
own line.

338
00:24:57.320 --> 00:25:04.480
So I'm going to do clubs comma and then a new line diamonds comma.

339
00:25:06.470 --> 00:25:07.880
Hearts, karma.

340
00:25:10.470 --> 00:25:16.470
And in spades and then to end this list, I will use a semicolon.

341
00:25:16.620 --> 00:25:26.700
Now, if we go back over to the card class, here we can refactor this class to use this new enum instead

342
00:25:26.700 --> 00:25:28.650
of a string for the suit.

343
00:25:28.830 --> 00:25:33.480
And I'm going to teach you, there's a nice way to refactor this quickly in the ADC.

344
00:25:33.720 --> 00:25:40.650
If you put your cursor on the data type for the property that you want to change the data type of.

345
00:25:40.680 --> 00:25:43.950
So in this case, we're on the suit, which is currently a string.

346
00:25:43.950 --> 00:25:50.220
So if you put your cursor on the word string here, you can right click on that go down to refactor

347
00:25:50.220 --> 00:25:52.620
and choose type migration.

348
00:25:52.680 --> 00:25:57.780
Or you can do a shift command F6 on Mack Type Migration.

349
00:25:58.050 --> 00:26:00.630
So in other words, we want to change the data type.

350
00:26:01.660 --> 00:26:02.200
All right.

351
00:26:02.440 --> 00:26:04.780
So we're going to change it from a string.

352
00:26:05.920 --> 00:26:11.830
Two and here can just type the name of the new data type that we just created, which is the enum suit.

353
00:26:12.010 --> 00:26:14.140
So capital S.U. i t.

354
00:26:14.500 --> 00:26:19.360
There it is, right there and then hit enter and then click refactor.

355
00:26:19.960 --> 00:26:25.870
Now, the ID may warn you that it thinks there may be some problems with this refactoring.

356
00:26:25.870 --> 00:26:26.740
Don't worry about that.

357
00:26:26.740 --> 00:26:28.000
Just click ignore.

358
00:26:30.310 --> 00:26:30.570
All right.

359
00:26:30.670 --> 00:26:38.620
So now you see that that has changed the data type from string to suit everywhere where that data type

360
00:26:38.620 --> 00:26:40.030
was being utilized.

361
00:26:40.060 --> 00:26:41.110
So this is really nice.

362
00:26:41.110 --> 00:26:45.190
Otherwise you would have had to go through and find all those spots and change it yourself.

363
00:26:45.550 --> 00:26:51.880
Now, if we come down here to the main method, you now see that there's a red squiggly line here because

364
00:26:51.970 --> 00:26:56.110
we're now trying to pass a string and that is not allowed.

365
00:26:56.350 --> 00:26:58.870
So what you can do is click on this apples.

366
00:26:58.870 --> 00:27:04.300
If you if you followed this with me and I'm going to select all of that and delete that.

367
00:27:04.480 --> 00:27:10.960
And now what I can do is to set this value is I can type suit dot.

368
00:27:11.350 --> 00:27:15.200
And now each of these constants automatically shows up.

369
00:27:15.220 --> 00:27:16.570
So you see what's going on here.

370
00:27:16.570 --> 00:27:24.820
I am now constrained in what I'm even allowed to specify for a suit, so it's not possible for me to

371
00:27:24.820 --> 00:27:29.050
put some invalid value in here for the suit.

372
00:27:29.140 --> 00:27:29.500
Right.

373
00:27:29.680 --> 00:27:33.520
I am forced to specify a valid value.

374
00:27:33.850 --> 00:27:37.960
So I've already forgotten what I had before, but I will choose clubs.

375
00:27:38.050 --> 00:27:38.500
All right.

376
00:27:38.710 --> 00:27:44.260
And then I'll do the same thing down here where I've got diamonds as a string, I'm selecting that I

377
00:27:44.260 --> 00:27:48.430
will type suit and diamonds.

378
00:27:48.970 --> 00:27:49.480
All right.

379
00:27:50.020 --> 00:27:54.460
OK, and now we'll just do the same thing for the rank as well.

380
00:27:54.610 --> 00:27:56.480
So let's create another enum.

381
00:27:56.500 --> 00:28:05.320
I'll go back over here to package right click new Java Class Enum and then for the name, I will call

382
00:28:05.320 --> 00:28:11.500
this rank Capital R return shift center to make a new line.

383
00:28:11.740 --> 00:28:14.230
And now I will specify all of the values.

384
00:28:14.260 --> 00:28:20.560
Now this one's going to be a little interesting since we've got both these string names for ranks as

385
00:28:20.560 --> 00:28:22.420
well as these numbers here, right?

386
00:28:22.450 --> 00:28:33.280
So what I probably would do in this case is to name each of these in a spelled out form so that they

387
00:28:33.280 --> 00:28:41.230
kind of match up nicely with the other name types here so that we can avoid trying to use an actual

388
00:28:41.230 --> 00:28:46.480
number as the name of those constants, which would likely be problematic.

389
00:28:46.630 --> 00:28:47.080
OK.

390
00:28:47.500 --> 00:28:49.360
So let's see what that will look like.

391
00:28:49.630 --> 00:28:57.750
So we've got Ace then two three four five six seven eight nine ten.

392
00:28:59.020 --> 00:29:02.650
And King followed by a semicolon at the end.

393
00:29:02.680 --> 00:29:03.130
All right.

394
00:29:03.310 --> 00:29:09.820
And so now I'll go back over to the card class and we'll do the same refactoring again.

395
00:29:10.030 --> 00:29:18.130
I'll put my cursor here this time that I'll use the keyboard shortcut shift command ethics, and I will

396
00:29:18.130 --> 00:29:24.580
change the data type from string to rank, return and then refactor.

397
00:29:25.090 --> 00:29:27.390
And I will ignore the issue there.

398
00:29:27.400 --> 00:29:29.470
And so that changed that data type.

399
00:29:29.470 --> 00:29:35.770
And then I can come down here and then just change these strings to actual values of the Enum.

400
00:29:35.890 --> 00:29:44.920
So for this one, I'll use a jack and for this one will replace that with a ten rank Typekit.

401
00:29:45.370 --> 00:29:45.850
10.

402
00:29:46.510 --> 00:29:47.110
There we go.

403
00:29:47.500 --> 00:29:48.880
And now no more errors.

404
00:29:49.240 --> 00:29:51.280
So let's just recap here.

405
00:29:51.460 --> 00:29:59.980
One of the main benefits of using an enum in this case is that we now have strongly typed properties

406
00:30:00.190 --> 00:30:08.920
that are even more strongly constrained to prevent us from using values that are not allowed or not

407
00:30:08.920 --> 00:30:09.700
appropriate.

408
00:30:10.150 --> 00:30:17.110
This technique is great whenever we have a finite set of values that we want to be constrained to,

409
00:30:17.290 --> 00:30:22.900
and they're unlikely to change very frequently or ever, right?

410
00:30:23.230 --> 00:30:30.070
So days of the week might be a good one month of the year might be a good one, although in those cases,

411
00:30:30.070 --> 00:30:34.810
there are other classes that Java already has that probably can represent those concepts better than

412
00:30:34.810 --> 00:30:35.950
anything we would, right?

413
00:30:36.160 --> 00:30:38.100
But these are examples, right?

414
00:30:38.110 --> 00:30:43.030
You know, so in the case of the days of the week, we're not likely to get an eighth day of the week

415
00:30:43.030 --> 00:30:44.270
anytime soon, right?

416
00:30:44.290 --> 00:30:49.060
So those would be great concepts to consider modeling as enemies.

417
00:30:49.780 --> 00:30:50.260
All right.

418
00:30:50.350 --> 00:30:52.570
So I'm going to wrap up this lesson.

419
00:30:52.570 --> 00:30:58.330
And in the next one, we will continue forward because there's a lot that you can actually do with Enum,

420
00:30:58.330 --> 00:31:00.160
so I will see you in the next one.
