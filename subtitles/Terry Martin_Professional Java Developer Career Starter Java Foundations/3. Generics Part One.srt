1
00:00:00,840 --> 00:00:05,550
All right, so next in our journey of the loose ends of Java.

2
00:00:06,240 --> 00:00:10,260
We're going to take a slightly deeper dive into generics.

3
00:00:10,470 --> 00:00:16,170
Again, this is one of the topics that we've already touched on a little bit, but I intentionally didn't

4
00:00:16,170 --> 00:00:17,400
go very deep into it.

5
00:00:18,090 --> 00:00:25,260
I still don't plan to go too deep into it, but enough to kind of let you dip your toes a bit and understand

6
00:00:25,650 --> 00:00:27,380
a little more of what's going on there.

7
00:00:27,390 --> 00:00:35,310
And this will also be a sneak preview preview preview for deeper lessons that you will learn in one

8
00:00:35,310 --> 00:00:38,640
of my upcoming courses for the spring framework.

9
00:00:39,930 --> 00:00:40,270
All right.

10
00:00:40,290 --> 00:00:46,020
So generics, first off, let's just talk again a little bit about what they really are.

11
00:00:46,290 --> 00:00:53,520
So generics, you will find them most commonly with collections, although they can be used with more

12
00:00:53,520 --> 00:00:59,340
than just collections, and we will see that in the code that we're getting ready to right in this lesson.

13
00:00:59,730 --> 00:01:05,160
Typically, though, when they're used with classes like collections, they allow us to constrain the

14
00:01:05,160 --> 00:01:11,130
types of data that can be associated with the class that we are using the generics on.

15
00:01:12,030 --> 00:01:15,390
If that was a lot of words that didn't mean much to you, don't worry about it.

16
00:01:15,390 --> 00:01:19,650
You'll see what I mean, although I can give you a quick example going back to our collection.

17
00:01:19,660 --> 00:01:26,520
So for example, if we were to create a new instance of a list, we can just create that new list and

18
00:01:26,520 --> 00:01:31,350
leave it at that and then we can store any type of object in it.

19
00:01:31,560 --> 00:01:38,490
But we can also use generics and say what types of objects we want to store in that list, right?

20
00:01:38,490 --> 00:01:42,540
So we can create a list of strings or a list of employees.

21
00:01:42,780 --> 00:01:49,980
And then after we've created that list with the generic type associated to it, if we then try to add

22
00:01:50,220 --> 00:01:58,230
objects that are not of that generic type, the I.D. and the compiler and Java and everything else will

23
00:01:58,230 --> 00:02:01,470
complain and yell and scream and tell us, No, you can't do that.

24
00:02:01,650 --> 00:02:03,150
So we've seen that before.

25
00:02:04,230 --> 00:02:12,630
So in general, generics allow us to kind of constrain what types of data we can associate with a with

26
00:02:12,630 --> 00:02:13,260
a class.

27
00:02:13,680 --> 00:02:20,580
Additionally, because they allow us to specify those data types, more specifically, they also enable

28
00:02:20,580 --> 00:02:25,470
us to avoid, in many cases, needing to cast types any more.

29
00:02:25,950 --> 00:02:32,280
Now, that might not be as obvious with the examples that we've seen so far from using collections,

30
00:02:32,580 --> 00:02:38,220
but we can use generics on methods and things that return data types as well.

31
00:02:38,400 --> 00:02:44,100
And in that case, if you use a generic for those methods that can return something, then you have

32
00:02:44,100 --> 00:02:49,530
a better shot at not needing to cast whatever the data type was that comes off of those methods.

33
00:02:49,530 --> 00:02:51,270
So we'll see a little bit of that as well.

34
00:02:51,540 --> 00:02:57,060
And then finally, they can protect us from certain types of runtime errors because if you're not using

35
00:02:57,060 --> 00:03:03,210
generics, but you've but you're working with code that is expecting to work with certain data types,

36
00:03:03,210 --> 00:03:06,750
but we don't have a really strong way of enforcing that.

37
00:03:07,200 --> 00:03:14,790
Then you're likely going to be casting data into the assumed types that you need to work with.

38
00:03:15,030 --> 00:03:21,540
And if the objects that you're casting aren't actually cast the ball into the data type that you're

39
00:03:21,540 --> 00:03:23,400
expecting, you're going to get errors.

40
00:03:23,820 --> 00:03:24,150
All right.

41
00:03:24,300 --> 00:03:29,250
So those are just a few of the characteristics and benefits of using generics.

42
00:03:29,760 --> 00:03:36,660
So in order to explore this a little bit more, we're going to create a class that is strongly influenced

43
00:03:36,660 --> 00:03:42,480
by a very popular framework that I will be teaching in one of my upcoming courses.

44
00:03:42,840 --> 00:03:49,860
This is going to be a class that will model our ability to store objects like in a data store of some

45
00:03:49,860 --> 00:03:52,680
sort like a database or something of that sort.

46
00:03:52,710 --> 00:03:53,150
OK.

47
00:03:53,400 --> 00:03:59,940
And this is an extremely common pattern that you will encounter as a professional software developer,

48
00:04:00,240 --> 00:04:02,100
especially in business domains.

49
00:04:02,490 --> 00:04:02,820
All right.

50
00:04:02,830 --> 00:04:11,970
So turning to the ADP, I am going to first create a new package to store this code in.

51
00:04:13,290 --> 00:04:20,490
So I'm going to come up here to source and do a command in for new and then I'll type for package and

52
00:04:20,490 --> 00:04:21,330
click enter.

53
00:04:21,330 --> 00:04:25,650
And I don't know, I will just call this data store.

54
00:04:26,460 --> 00:04:26,840
All right.

55
00:04:26,850 --> 00:04:34,800
And then I will create a new class in the data stored package and I will call this repository.

56
00:04:35,280 --> 00:04:39,660
And this is a common name for for what you're about to learn, by the way.

57
00:04:41,480 --> 00:04:46,130
Though normally with the upcoming framework, it's called the spring framework that I will teach in

58
00:04:46,130 --> 00:04:47,030
another course.

59
00:04:47,750 --> 00:04:49,370
You wouldn't even need to create this.

60
00:04:49,370 --> 00:04:50,120
It would, it would.

61
00:04:50,120 --> 00:04:51,040
They would give you this.

62
00:04:51,050 --> 00:04:56,660
So we're going to make our own poor man's version of a repository just so we can kind of play around

63
00:04:56,660 --> 00:05:03,290
with generics and you'll get a little taste of what this type of functionality kind of looks like.

64
00:05:03,740 --> 00:05:04,040
All right.

65
00:05:04,040 --> 00:05:06,920
And I'm going to give myself some space now and close that down.

66
00:05:07,130 --> 00:05:08,200
So here's what we're going to do.

67
00:05:08,210 --> 00:05:14,900
This repository is going to be a class that will model a repository of objects, OK, and we will be

68
00:05:14,900 --> 00:05:22,910
able to interact with this repository to save objects into it and retrieve objects out of it, essentially

69
00:05:23,090 --> 00:05:24,800
and delete objects as well.

70
00:05:25,130 --> 00:05:32,720
Now, since this is going to be a poor man's implementation of a repository, real repositories, especially

71
00:05:32,720 --> 00:05:37,280
in the spring framework, are most commonly connecting to databases.

72
00:05:37,880 --> 00:05:40,040
And if you don't know what the database is, real quick.

73
00:05:40,550 --> 00:05:49,340
A database is simply a program usually running on a server that usually is connected to via a network

74
00:05:49,340 --> 00:05:57,560
kind of like the internet, and our programs can make connections to these databases to store data in

75
00:05:57,560 --> 00:05:59,240
them and to get data out.

76
00:05:59,450 --> 00:06:05,960
So think about our previous little projects with the employees and the people like the five million

77
00:06:05,960 --> 00:06:08,030
people records that we've been working with.

78
00:06:08,360 --> 00:06:14,510
We've been iterating through those five million records by opening up a file with five million people

79
00:06:14,510 --> 00:06:15,470
records in them.

80
00:06:15,710 --> 00:06:23,540
But in real life, particularly in business contexts, it would be much more common that that data that

81
00:06:23,540 --> 00:06:30,740
we've been working with would actually be stored on a database, and we'd be writing code that would

82
00:06:30,740 --> 00:06:34,520
be connecting to that database over a network.

83
00:06:35,030 --> 00:06:38,990
And it would be querying that database to get that data out.

84
00:06:40,070 --> 00:06:45,230
And a lot of the functionality that we were learning with lambdas to parse through and sift through

85
00:06:45,230 --> 00:06:49,650
and calculate and all that stuff can actually be done on a database as well.

86
00:06:49,670 --> 00:06:52,460
And we will be learning that in an upcoming module, too.

87
00:06:52,610 --> 00:06:54,400
So that's just a little context for you.

88
00:06:54,410 --> 00:07:03,080
But anyway, the repository class would be our gateway into talking to that database would be an easy

89
00:07:03,710 --> 00:07:07,250
and easier gateway into talking to that database.

90
00:07:07,460 --> 00:07:12,530
And so it would give us a nice, easy methods to retrieve records out of it and put records into it

91
00:07:12,530 --> 00:07:13,490
and things of that sort.

92
00:07:13,790 --> 00:07:14,040
All right.

93
00:07:14,060 --> 00:07:21,800
So having said that, the first iteration of our creation of this repository class is going to simply

94
00:07:21,800 --> 00:07:27,920
start off by letting us add strings to it and then get strings out of it, essentially.

95
00:07:27,950 --> 00:07:28,370
OK.

96
00:07:28,670 --> 00:07:30,830
So let's see what that might look like.

97
00:07:31,010 --> 00:07:33,350
So we've got this class here repository.

98
00:07:33,740 --> 00:07:42,380
And let's just say that internally, it's going to store these strings inside of a list.

99
00:07:42,530 --> 00:07:44,160
Let's just keep it real simple.

100
00:07:44,180 --> 00:07:44,540
OK.

101
00:07:44,720 --> 00:07:46,310
So we'll go ahead and create a list.

102
00:07:47,930 --> 00:07:52,010
We'll have a list and we'll use a generic here.

103
00:07:52,020 --> 00:07:55,100
So we'll say it's going to be a list of strings, OK, for now.

104
00:07:56,470 --> 00:08:03,250
All right, let's import that, and let's just call this, I don't know records, and I'm going to go

105
00:08:03,250 --> 00:08:06,160
ahead and just initialize it in the declaration.

106
00:08:06,730 --> 00:08:08,440
Just do something quick and dirty here.

107
00:08:09,550 --> 00:08:10,060
Here we go.

108
00:08:10,070 --> 00:08:13,630
So there's our records holder.

109
00:08:14,080 --> 00:08:14,280
All right.

110
00:08:14,320 --> 00:08:20,650
And now we're going to have some methods that allow a user of this repository class to do things like

111
00:08:20,650 --> 00:08:23,560
getting records out and things of that sort.

112
00:08:23,590 --> 00:08:28,210
So let's let's first have a method that's just that just returns all of the records.

113
00:08:29,050 --> 00:08:35,620
And I'm going to use standard method names that are commonly seen with this pattern called the repository

114
00:08:35,620 --> 00:08:36,100
pattern.

115
00:08:36,280 --> 00:08:41,830
By the way, I think I've mentioned in a previous lesson that that there are these so-called design

116
00:08:41,830 --> 00:08:49,600
patterns and they're just common snippets of code and techniques, coding techniques that have become

117
00:08:49,600 --> 00:08:53,980
very popularized over decades because they really kind of condense down.

118
00:08:54,310 --> 00:08:59,830
Oftentimes the most efficient or well proven way of doing certain kinds of things.

119
00:09:00,550 --> 00:09:03,850
And so this is one of those patterns is called the repository pattern.

120
00:09:04,060 --> 00:09:04,360
All right.

121
00:09:04,360 --> 00:09:10,850
So we'll have a method here and it's going to return back our list of strings.

122
00:09:10,870 --> 00:09:13,070
It's really just going to be a getter method.

123
00:09:13,090 --> 00:09:17,500
In fact, I could pretty much generated except that I want it to be called something very specific.

124
00:09:18,430 --> 00:09:22,000
And let's see, it's going to be called find all OK.

125
00:09:22,210 --> 00:09:28,360
And so like I said, that method name, there is a very common method name that you will find frequently

126
00:09:28,360 --> 00:09:30,400
on the repository pattern.

127
00:09:31,000 --> 00:09:31,430
All right.

128
00:09:31,450 --> 00:09:35,380
And so this guy is just going to return our records.

129
00:09:36,100 --> 00:09:36,700
There we go.

130
00:09:37,330 --> 00:09:37,750
OK.

131
00:09:39,380 --> 00:09:47,090
And let's see, let's also have a method for storing records in our repository.

132
00:09:47,270 --> 00:09:52,280
OK, now keep in mind right now our records aren't really records per se.

133
00:09:52,340 --> 00:09:53,870
They're just strings, OK?

134
00:09:54,920 --> 00:09:56,630
We're just going to start kind of small here.

135
00:09:56,990 --> 00:10:04,550
So typically a save method in this type of pattern would be one that takes an input, and it will return

136
00:10:04,730 --> 00:10:08,540
the same object that was entered into it typically.

137
00:10:08,780 --> 00:10:09,100
All right.

138
00:10:09,110 --> 00:10:14,060
So knowing that we know that we're working with strings, so this method is going to return a string

139
00:10:14,210 --> 00:10:21,470
and it's going to be called save and it will take a string and we'll just call that record.

140
00:10:22,070 --> 00:10:32,000
And then it's going to call the record's class and add the record just like that.

141
00:10:32,450 --> 00:10:38,210
And then it can loops and then it can return that same record.

142
00:10:38,600 --> 00:10:39,050
All right.

143
00:10:40,380 --> 00:10:45,390
I know that looks a little pointless here in real life, it wouldn't it would be slightly less pointless

144
00:10:46,260 --> 00:10:52,170
because the code that would be doing the saving would also be getting an ID for that record and then

145
00:10:52,170 --> 00:10:55,500
saving that I.D. on the record and then returning the records.

146
00:10:55,500 --> 00:10:57,420
So you'd be getting something for your trouble.

147
00:10:57,430 --> 00:11:03,030
You'd be getting the new I.D. of this record that you just saved in our code.

148
00:11:03,030 --> 00:11:05,040
For right now, we're not getting that fancy.

149
00:11:06,480 --> 00:11:06,990
All right.

150
00:11:07,440 --> 00:11:14,010
And let's also have a method that allows us to look up a record by some like ID or something, okay?

151
00:11:14,340 --> 00:11:21,590
So for this one, this will also return a string and we'll call this find my I.D..

152
00:11:22,260 --> 00:11:27,930
I know some developers, by the way, they like when they are doing these acronym parts of a of a name

153
00:11:27,930 --> 00:11:30,590
like ID, they will typically do ID.

154
00:11:32,040 --> 00:11:32,940
Yeah, whatever.

155
00:11:35,620 --> 00:11:35,930
All right.

156
00:11:35,950 --> 00:11:42,310
So this method is going to take as an input, an idea of a record and then return the record that it

157
00:11:42,310 --> 00:11:42,790
found.

158
00:11:42,970 --> 00:11:48,550
So since we're talking about records, which is a list of things, remember that I've said in the past

159
00:11:48,550 --> 00:11:54,160
that when we have lists of things with that are numbered, typically we are counted.

160
00:11:54,310 --> 00:12:01,360
We will typically want to use a long for that number system because that because the long data type

161
00:12:01,360 --> 00:12:08,200
is is considered to be long enough, usually to actually be capable of numbering however many records

162
00:12:08,200 --> 00:12:11,860
you might actually have in your data store as opposed to an integer.

163
00:12:12,130 --> 00:12:19,400
All right, so we'll use a long term I.D. We'll call it, and let's see.

164
00:12:19,420 --> 00:12:27,910
So for right now, the way we will implement this is just to return records that get right.

165
00:12:27,920 --> 00:12:33,930
So we'll just use the get method of the list itself, which takes an index.

166
00:12:33,940 --> 00:12:38,720
Now notice the record stock that actually takes an integer, not a long.

167
00:12:38,740 --> 00:12:39,220
OK.

168
00:12:39,910 --> 00:12:43,080
So there is a little bit of a mismatch there, but that's all right.

169
00:12:43,090 --> 00:12:43,930
We'll work around it.

170
00:12:44,050 --> 00:12:48,850
Can you think of how to convert our long into an end, by the way?

171
00:12:52,320 --> 00:13:00,620
All right, so what we can do is we can use the rapper long class and then do a value of passenger I.D.

172
00:13:00,630 --> 00:13:07,740
And then and now we've got a rapper long or a class of type long because up here we're just using a

173
00:13:07,740 --> 00:13:08,700
primitive long.

174
00:13:09,990 --> 00:13:18,000
And then now that we've got the class of long, we can use a method on it into value so we can convert

175
00:13:18,000 --> 00:13:20,160
that into an integer really easily.

176
00:13:20,190 --> 00:13:20,580
OK.

177
00:13:20,730 --> 00:13:28,530
And so what this is basically saying is take that ID converted into an integer and now find that index

178
00:13:28,530 --> 00:13:34,320
the integer index in this collection and return whatever object you find, right?

179
00:13:34,350 --> 00:13:35,400
That's what we're doing there.

180
00:13:35,880 --> 00:13:36,220
All right.

181
00:13:36,240 --> 00:13:40,440
And I think that's enough of those methods for our repository.

182
00:13:40,620 --> 00:13:47,020
And now let's create a public static void main method so that we can play with this class a little bit.

183
00:13:47,040 --> 00:13:47,380
OK.

184
00:13:47,550 --> 00:13:51,810
So let's create an instance of it, and I will call it repo.

185
00:13:54,580 --> 00:13:55,310
All right.

186
00:13:55,390 --> 00:14:01,810
And let's see here, let's just add some records to it so we can save.

187
00:14:04,000 --> 00:14:04,660
House.

188
00:14:06,220 --> 00:14:13,450
And I just will duplicate a couple more lines there, tree and boat.

189
00:14:14,660 --> 00:14:15,110
All right.

190
00:14:15,470 --> 00:14:23,990
And then let's do a system that out, and then let's call Oops, let's call Repo Dot, find all.

191
00:14:24,380 --> 00:14:29,480
And so that should retrieve our house tree boat and let us like print them out or something, right?

192
00:14:29,780 --> 00:14:31,400
So let's run that and see.

193
00:14:31,880 --> 00:14:32,450
There we go.

194
00:14:32,480 --> 00:14:32,810
Okay.

195
00:14:32,810 --> 00:14:36,620
So there we have our collection of house, tree and boat.

196
00:14:36,830 --> 00:14:37,430
Very good.

197
00:14:39,010 --> 00:14:39,590
All right.

198
00:14:39,610 --> 00:14:41,770
So that's working just fine.

199
00:14:42,220 --> 00:14:44,260
So now here's the deal.

200
00:14:45,580 --> 00:14:53,830
What if we wanted this repository to be capable of working with virtually any data type there is right

201
00:14:53,830 --> 00:14:54,310
now?

202
00:14:54,550 --> 00:14:57,040
It can only store strings.

203
00:14:57,250 --> 00:15:04,720
But what if we had employees and person class and car and boat or whatever, right?

204
00:15:04,720 --> 00:15:07,090
Like all these different types of classes?

205
00:15:07,240 --> 00:15:14,620
But we wanted this very nice functionality of being able to save these objects to this repository,

206
00:15:14,620 --> 00:15:14,920
right?

207
00:15:15,190 --> 00:15:16,450
How could we do that?

208
00:15:17,410 --> 00:15:26,680
So I mean, one way that we could do it would be to remove the string here and maybe either just not

209
00:15:26,680 --> 00:15:28,870
have any generic type at all.

210
00:15:29,920 --> 00:15:34,840
Or similarly, just change string to object, right?

211
00:15:34,870 --> 00:15:37,000
So we could have a just be object.

212
00:15:38,050 --> 00:15:43,510
I think those two approaches would be functionally similar to each other, if not identical.

213
00:15:44,260 --> 00:15:47,080
So what would be the pros and cons to doing that?

214
00:15:47,470 --> 00:15:56,590
Well, one potential con of that approach would be that when we retrieve items using the Find My I.D.

215
00:15:56,650 --> 00:16:04,900
in particular, we would then have to cast them to whatever their actual data type was right, not the

216
00:16:04,900 --> 00:16:05,710
end of the world.

217
00:16:05,950 --> 00:16:13,600
But again, that kind of opens us up to some runtime errors if we are making assumptions as to what

218
00:16:13,600 --> 00:16:14,830
data type we stored in there.

219
00:16:14,950 --> 00:16:24,430
Just imagine if over here we're saving a string and then we saved a new person, you know, which I

220
00:16:24,430 --> 00:16:27,580
haven't created that class in this module here.

221
00:16:27,580 --> 00:16:28,840
But you know what I mean?

222
00:16:28,990 --> 00:16:29,350
Right?

223
00:16:29,470 --> 00:16:30,220
New person.

224
00:16:30,270 --> 00:16:35,140
And then we created a new employee or a new house or whatever, right?

225
00:16:35,410 --> 00:16:40,300
And then we did a find by ID and we retrieved one of those items.

226
00:16:40,420 --> 00:16:45,250
And then we wanted to call some methods that only exist on whatever the data type is, right?

227
00:16:45,490 --> 00:16:51,970
Well, you know, we'd have to be really careful that the methods that we're calling actually exist

228
00:16:51,970 --> 00:16:54,250
on whatever that object was, that we were getting out.

229
00:16:54,460 --> 00:17:00,910
And so we'd need to cast and then if we happen to be trying to cast something to type person, but it's

230
00:17:00,910 --> 00:17:03,460
actually a string, then at runtime it's going to blow up.

231
00:17:03,490 --> 00:17:06,610
So the idea would not be able to protect us from that.

232
00:17:06,610 --> 00:17:11,710
While we're writing the code, we would only find that out while we're running the application when

233
00:17:11,710 --> 00:17:12,760
it blows up on us.

234
00:17:13,000 --> 00:17:13,420
Okay.

235
00:17:13,510 --> 00:17:16,840
And it would give us probably like a class cast exception.

236
00:17:17,020 --> 00:17:18,950
And now we know what exceptions really are.

237
00:17:18,970 --> 00:17:19,290
Right.

238
00:17:19,300 --> 00:17:21,490
So that's one of those runtime exceptions.

239
00:17:22,210 --> 00:17:24,640
OK, so anyway, there's a better way.

240
00:17:24,970 --> 00:17:25,990
Obviously, right?

241
00:17:26,020 --> 00:17:27,610
That's why I'm saying all of this.

242
00:17:27,850 --> 00:17:36,460
So the better thing to do would be to just as they have generic sized the collections framework itself.

243
00:17:36,580 --> 00:17:43,150
We can make our own classes generic, too, so we can actually make this repository class generic pretty

244
00:17:43,150 --> 00:17:46,070
much exactly the way that the list is here.

245
00:17:46,090 --> 00:17:46,540
OK.

246
00:17:46,840 --> 00:17:51,350
And so we can make it to that for a given instance of the repository.

247
00:17:51,370 --> 00:17:55,480
Now this is key for a given instance of the repository.

248
00:17:55,490 --> 00:17:57,640
We can only use one data type.

249
00:17:57,760 --> 00:18:02,410
So if you want to use another data type you have to use, you have to create another instance of the

250
00:18:02,410 --> 00:18:03,130
repository.

251
00:18:03,250 --> 00:18:04,570
So let's see what that would look like.

252
00:18:04,720 --> 00:18:10,990
The way we do this is we introduce the greater than less than symbol here, right?

253
00:18:11,500 --> 00:18:12,430
Which we've seen before.

254
00:18:12,580 --> 00:18:19,390
And then we use a letter typically to refer to our generic, our generic data type.

255
00:18:19,510 --> 00:18:26,140
And the most common letter that you will find when doing this is T standing for type.

256
00:18:26,470 --> 00:18:26,890
OK.

257
00:18:27,040 --> 00:18:31,960
So by doing this, we are telling Java that this class is generic.

258
00:18:31,990 --> 00:18:36,100
OK, now just doing this doesn't really do anything for us, though.

259
00:18:36,190 --> 00:18:45,130
We must use this Ti in various key places now and so we can start using this tea to replace where we

260
00:18:45,130 --> 00:18:48,910
were kind of hard coding the string data type.

261
00:18:48,920 --> 00:18:55,360
So in other words, we're now going to say we don't want our repository class to just know how to store

262
00:18:55,360 --> 00:18:56,620
and work with strings.

263
00:18:56,830 --> 00:19:02,500
We want it to be able to store and work with whatever data type we specify later on.

264
00:19:02,590 --> 00:19:05,440
And I'll show you where we'll get to that later on in a minute here.

265
00:19:05,560 --> 00:19:07,270
So here we're doing a list of strings.

266
00:19:07,270 --> 00:19:12,790
So now instead of a list of string, let's just do a list of Ti and we can do that.

267
00:19:12,970 --> 00:19:16,180
And now that's this is kind of interesting because list itself is generic.

268
00:19:16,180 --> 00:19:22,020
So now it's kind of like we're going to levels deep into the generics, if you will, right where we're

269
00:19:22,120 --> 00:19:28,720
delaying telling the generic for list what it's data type is actually going to be when it's all said

270
00:19:28,720 --> 00:19:29,170
and done.

271
00:19:29,350 --> 00:19:30,550
But we can we can do that.

272
00:19:31,000 --> 00:19:31,300
All right.

273
00:19:31,720 --> 00:19:35,950
And I get an error here because I actually forgot up here to address this.

274
00:19:35,950 --> 00:19:38,060
So even our collection here is current.

275
00:19:38,490 --> 00:19:43,560
Hardcoded as a list of strings, we want this to be a list of T, right, because we don't know what

276
00:19:43,560 --> 00:19:44,160
it is yet.

277
00:19:44,530 --> 00:19:44,800
Right?

278
00:19:44,820 --> 00:19:45,510
So we'll do that.

279
00:19:45,510 --> 00:19:50,460
And now that error down here went away because now everything's matching up.

280
00:19:50,580 --> 00:19:58,470
I'm saying that we have a list of T and I'm saying down here to return that list of T with type list

281
00:19:58,470 --> 00:19:58,830
of T.

282
00:19:58,840 --> 00:20:00,570
So it's all matching up now.

283
00:20:00,630 --> 00:20:01,110
OK.

284
00:20:01,470 --> 00:20:07,790
And remember, over here, we don't have to explicitly say what the generic type is that is being inferred.

285
00:20:07,800 --> 00:20:10,830
This is a type inference, though we could if we wanted to.

286
00:20:11,070 --> 00:20:18,750
I could put that in there explicitly, but it is unnecessary to do so as of I think Java version eight,

287
00:20:18,990 --> 00:20:21,080
I think don't don't hold me to that.

288
00:20:21,080 --> 00:20:21,270
But.

289
00:20:22,020 --> 00:20:22,380
All right.

290
00:20:23,490 --> 00:20:25,440
And then down here, let's see.

291
00:20:25,440 --> 00:20:32,910
We're saving OK, so we're going to save now, not a string, but something of type T, and that means

292
00:20:32,910 --> 00:20:36,390
we're going to return something of type T as well.

293
00:20:36,420 --> 00:20:36,740
All right.

294
00:20:36,750 --> 00:20:37,890
And we're good there.

295
00:20:38,340 --> 00:20:41,940
And then down here, we're going to return something of type T as well.

296
00:20:42,210 --> 00:20:47,020
So look at that, that all got happy all of a sudden and now down here.

297
00:20:47,040 --> 00:20:49,230
Now notice something kind of interesting.

298
00:20:50,460 --> 00:20:54,310
I haven't made any changes down here and there are no errors.

299
00:20:54,320 --> 00:20:57,900
So let's go ahead and just run this and see what's going to happen first.

300
00:20:59,590 --> 00:21:01,810
All right, so nothing broke, right?

301
00:21:02,290 --> 00:21:05,710
That is by design, not my design.

302
00:21:05,950 --> 00:21:08,230
The design of the creators of Java.

303
00:21:08,470 --> 00:21:16,840
So this generic functionality actually was added into Java a little later in java's life.

304
00:21:17,470 --> 00:21:24,310
It came about in version five of Java and Java had been plenty used in business and everywhere else

305
00:21:24,310 --> 00:21:25,630
prior to version five.

306
00:21:25,640 --> 00:21:33,400
In fact, I do remember quite distinctly when version five came out and because Java had been so heavily

307
00:21:33,400 --> 00:21:42,400
in use prior to this whole generics functionality even being created, the creators knew that if they

308
00:21:42,400 --> 00:21:48,220
were going to add this type of powerful functionality, it needed to be implemented in such a way that

309
00:21:48,220 --> 00:21:51,790
it would not break existing code.

310
00:21:52,180 --> 00:21:52,690
OK.

311
00:21:53,020 --> 00:22:00,190
And so we're seeing a little hint of that functionality here in that, even though I have now generic

312
00:22:00,190 --> 00:22:09,700
sized this class to work with type T right down here, I'm allowed to instantiate it still without any

313
00:22:09,910 --> 00:22:12,730
generic mentioning anywhere here.

314
00:22:12,910 --> 00:22:17,530
And this code that was working previously is still working right now.

315
00:22:18,370 --> 00:22:25,000
Now, for those of you who are curious, one of the reasons why this can work is because for all of

316
00:22:25,000 --> 00:22:31,060
its interesting coolness at the end of the day, believe it or not, Java is essentially just racing

317
00:22:31,060 --> 00:22:32,050
this information.

318
00:22:32,230 --> 00:22:35,470
And in this particular case, replacing it with object.

319
00:22:36,040 --> 00:22:38,220
That's basically what what's going on there.

320
00:22:38,230 --> 00:22:41,230
So this becomes a list of object essentially for right now.

321
00:22:41,500 --> 00:22:49,810
Now, if we want this repository instance to be truly generic, however, we can go ahead and do that.

322
00:22:50,140 --> 00:22:57,430
And the way we can do that is by using the less than and greater than symbols again, so we can create

323
00:22:57,430 --> 00:23:06,490
a repository of string like so and then I can come over here and do one of these as well, right?

324
00:23:06,490 --> 00:23:12,190
And this is the same pattern that you see right up here, right when where we're creating the the list,

325
00:23:12,190 --> 00:23:12,860
in fact.

326
00:23:12,880 --> 00:23:15,850
OK, so now we're creating a repository of string.

327
00:23:16,030 --> 00:23:23,110
Obviously, this isn't bringing a whole lot of value in this particular example where we were already

328
00:23:23,110 --> 00:23:24,640
working with string, right?

329
00:23:25,540 --> 00:23:27,420
But yeah, all right.

330
00:23:27,440 --> 00:23:28,090
It's a start.

331
00:23:28,480 --> 00:23:28,870
OK.

332
00:23:28,900 --> 00:23:32,200
So now, though, here's where we get kind of cool.

333
00:23:32,500 --> 00:23:37,210
Next thing we're going to do is let's create a record.

334
00:23:38,080 --> 00:23:43,570
Class A record that models a person.

335
00:23:43,660 --> 00:23:44,110
OK.

336
00:23:45,480 --> 00:23:47,430
And I'm going to just do it in line here.

337
00:23:47,670 --> 00:23:54,330
So we're going to create a record of person and you will have a first name.

338
00:23:55,840 --> 00:24:00,700
And a last name, and that's enough for now.

339
00:24:01,160 --> 00:24:06,190
All right, so we've got this class, this record of type person.

340
00:24:06,220 --> 00:24:08,530
OK, now watch this.

341
00:24:10,250 --> 00:24:22,280
I can create another instance of a repository now, but this one will work for person instances and

342
00:24:22,280 --> 00:24:23,000
I'll call it.

343
00:24:23,450 --> 00:24:23,870
I don't know.

344
00:24:24,200 --> 00:24:29,420
P. Repo four person repo new repository.

345
00:24:29,450 --> 00:24:30,050
There we go.

346
00:24:30,620 --> 00:24:34,940
Now if I try to.

347
00:24:35,990 --> 00:24:36,920
Save.

348
00:24:38,710 --> 00:24:40,060
A string in here.

349
00:24:40,300 --> 00:24:40,990
Look at that.

350
00:24:41,260 --> 00:24:46,810
I'm getting an error now, and if I hover over this, it's basically just telling me that, hey, you're

351
00:24:46,810 --> 00:24:50,290
trying to supply a string, but I'm really expecting a person.

352
00:24:50,470 --> 00:24:56,470
And the reason it's expecting a person is because we said right here when we created this instance of

353
00:24:56,470 --> 00:25:00,790
the repo class that it only works with person.

354
00:25:00,850 --> 00:25:01,180
Right?

355
00:25:01,420 --> 00:25:05,170
And so now that's being enforced even here in this method.

356
00:25:05,260 --> 00:25:13,300
And again, if we go to the save method, we say that save method takes instances of type T, whatever

357
00:25:13,390 --> 00:25:14,200
he may be.

358
00:25:14,410 --> 00:25:17,830
And here he is of type person.

359
00:25:18,010 --> 00:25:21,670
So therefore, whatever I pass in here has to be a person.

360
00:25:21,880 --> 00:25:23,740
So if I change this now?

361
00:25:26,530 --> 00:25:29,320
To a new person.

362
00:25:30,620 --> 00:25:33,740
Jake Johnson.

363
00:25:35,660 --> 00:25:37,280
Everything's happy, right?

364
00:25:37,700 --> 00:25:46,670
And so I will go ahead and create a couple more of these people that save new person marry.

365
00:25:48,800 --> 00:25:49,670
Johnson.

366
00:25:51,640 --> 00:25:56,170
And maybe one more people don't save new person.

367
00:25:58,280 --> 00:25:59,090
Jerry?

368
00:26:01,730 --> 00:26:02,390
Johnson.

369
00:26:04,420 --> 00:26:04,870
All right.

370
00:26:06,370 --> 00:26:09,970
And so now I can.

371
00:26:11,740 --> 00:26:12,550
Recall.

372
00:26:13,960 --> 00:26:15,790
Oops, wrong, repo.

373
00:26:16,360 --> 00:26:17,360
Got to be careful there.

374
00:26:17,380 --> 00:26:18,420
Find all.

375
00:26:18,670 --> 00:26:21,460
OK, so now let's see what this does.

376
00:26:22,030 --> 00:26:22,720
All right, cool.

377
00:26:22,750 --> 00:26:27,010
So here's our first three people spitting out house three boat, which are all strings.

378
00:26:27,190 --> 00:26:33,070
And here's our second repo printing out the two string implementation of the default to string implementation

379
00:26:33,280 --> 00:26:35,860
of our person record class, right?

380
00:26:36,040 --> 00:26:39,880
And so we're now seeing Jake and Mary and Gerri, right?

381
00:26:40,780 --> 00:26:43,480
So that's working as expected.

382
00:26:43,480 --> 00:26:45,060
And isn't that kind of nice?

383
00:26:45,070 --> 00:26:45,850
It's kind of cool.

384
00:26:45,850 --> 00:26:55,060
Like we didn't really have to change the underlying class of repo other than to just make it generic.

385
00:26:56,480 --> 00:27:00,230
That's kind of one of the beautiful aspects of working with generics.

386
00:27:00,770 --> 00:27:01,110
All right.

387
00:27:01,130 --> 00:27:10,790
So now that we have the ability to pass in more complex objects like this person class, a very common

388
00:27:10,790 --> 00:27:17,030
thing that we will encounter as professional developers using frameworks that implement the repository

389
00:27:17,300 --> 00:27:27,170
pattern is that our objects that will interact with the repository typically will have an I.D. associated

390
00:27:27,170 --> 00:27:27,750
with them.

391
00:27:27,770 --> 00:27:28,220
OK.

392
00:27:29,030 --> 00:27:34,520
And that's so that you can look them up quickly by ID like we have.

393
00:27:34,880 --> 00:27:37,580
What is it here in this find by ID method, right?

394
00:27:37,940 --> 00:27:43,400
So let's add an ID property to the person class, OK?

395
00:27:43,610 --> 00:27:51,110
And as you already know, by now, IDs are traditionally going to be of data type long, typically.

396
00:27:51,770 --> 00:27:52,610
So let's do that.

397
00:27:52,610 --> 00:27:55,520
Let's make a long I.D..

398
00:27:56,270 --> 00:27:56,720
OK.

399
00:27:57,140 --> 00:27:57,860
So, OK.

400
00:27:57,860 --> 00:28:03,320
Now, having done that, I see down here, I've got three read errors, and that's because I've now

401
00:28:03,860 --> 00:28:09,140
changed the constructor of this record to require that ID.

402
00:28:09,560 --> 00:28:09,930
Right?

403
00:28:10,280 --> 00:28:14,930
So I'm going to have to come down here now and specify IDs for each of these.

404
00:28:14,930 --> 00:28:16,250
So I will just do that.

405
00:28:17,940 --> 00:28:18,840
To tell.

406
00:28:20,560 --> 00:28:23,170
3L, I remember the is because it's long.

407
00:28:24,430 --> 00:28:27,940
All right, so now those errors have gone away.

408
00:28:28,120 --> 00:28:31,270
Now what do I want to do with with that right?

409
00:28:31,780 --> 00:28:32,200
Well.

410
00:28:34,460 --> 00:28:35,450
I could.

411
00:28:36,880 --> 00:28:45,790
Do a pre-IPO dot find by IED and then I could pass in an IED like three L, for example, and let's

412
00:28:45,790 --> 00:28:46,660
capture that.

413
00:28:49,380 --> 00:28:55,470
Found person and then let's print that found person like, sir.

414
00:28:55,650 --> 00:28:57,600
OK, now here's the thing.

415
00:28:57,960 --> 00:29:01,920
Actually, in fact, you know, let's do this instead of one to three, let's do 10.

416
00:29:03,310 --> 00:29:05,650
20 and 30.

417
00:29:05,710 --> 00:29:06,160
OK.

418
00:29:06,850 --> 00:29:15,190
All right, and then and then let's actually try to retrieve throw the person with ID of 30.

419
00:29:15,220 --> 00:29:16,660
Let's run that and see what we get.

420
00:29:17,520 --> 00:29:19,090
OK, there we go.

421
00:29:19,390 --> 00:29:20,440
And look at where we got there.

422
00:29:20,440 --> 00:29:21,040
The.

423
00:29:21,310 --> 00:29:23,690
Now what should now be quite familiar?

424
00:29:23,710 --> 00:29:31,480
The index out of bounds exception because we ask for Item 30 and there's only three items in here.

425
00:29:31,480 --> 00:29:38,920
And the way that we implemented defined by ID was very simplistic in that it simply is looking for not

426
00:29:38,920 --> 00:29:44,170
an ID per se, but just the index into the collection, right?

427
00:29:44,320 --> 00:29:50,230
So if there's three items, then there should be an item with an idea of, like to write something like

428
00:29:50,230 --> 00:29:50,470
that.

429
00:29:50,770 --> 00:29:53,110
But that's that's how we implemented this.

430
00:29:53,110 --> 00:29:59,470
But that's not how this code is expecting to to work, right?

431
00:30:00,190 --> 00:30:07,510
So we need to change our implementation now to actually make use of these ideas that are associated

432
00:30:07,510 --> 00:30:09,850
with these objects here.

433
00:30:09,880 --> 00:30:10,240
OK.

434
00:30:10,510 --> 00:30:16,870
And that's actually easy enough to do and actually so that we can reuse a lot of what we've learned.

435
00:30:17,050 --> 00:30:19,480
Let's use lambdas to do this.
