WEBVTT
1
00:00:00.810 --> 00:00:05.670
All right, so we have finally reached the end of the collections module.

2
00:00:05.700 --> 00:00:12.270
We've learned some amazing functionality in this module that is really at the heart of so many Java

3
00:00:12.270 --> 00:00:13.920
applications and programs.

4
00:00:14.400 --> 00:00:22.230
I just can't emphasize enough how important it is to have these collections classes to allow us to hold

5
00:00:22.230 --> 00:00:27.930
on to literally collections of objects when we are writing our applications.

6
00:00:28.080 --> 00:00:33.870
We've already seen some glimpses of this in past modules where we were modeling the blackjack game,

7
00:00:33.870 --> 00:00:40.920
and I told you we kind of put that project on pause because I really wanted to introduce the collections

8
00:00:40.920 --> 00:00:47.040
framework where some languages might encourage you to simply use an array.

9
00:00:47.070 --> 00:00:55.470
It is most common in Java to use collections and probably most specifically lists, with the array list

10
00:00:55.470 --> 00:01:00.660
being the the most common implementation of the list interface, in fact.

11
00:01:01.320 --> 00:01:04.940
Now, some would even argue that the list is overused.

12
00:01:05.550 --> 00:01:07.310
I would not disagree with that.

13
00:01:07.320 --> 00:01:13.530
It's just so darn easy to use, and it's usually one of the very first types of collections that any

14
00:01:13.530 --> 00:01:14.940
Java developer learns.

15
00:01:15.180 --> 00:01:21.600
And so once they learn that they just go go crazy with it and don't sometimes take the time to fully

16
00:01:21.600 --> 00:01:28.740
analyze whether or not the list is is always the best interface for whatever problem they're trying

17
00:01:28.740 --> 00:01:29.400
to solve.

18
00:01:29.700 --> 00:01:36.210
Just keep in mind if you need to ensure that objects are unique and not duplicated, lists should probably

19
00:01:36.210 --> 00:01:40.890
not be your go to collection, and you probably want to be looking at a set.

20
00:01:41.130 --> 00:01:46.260
And if you were just wanting to keep the objects in that set in order, you now know that you could

21
00:01:46.260 --> 00:01:50.880
either use the tree map or a linked hash set for the actual implementations.

22
00:01:51.300 --> 00:01:58.140
Really, the list is probably best suited when you know you need to be able to access individual elements,

23
00:01:58.140 --> 00:02:02.190
perhaps randomly, rather than just iterating through them in order.

24
00:02:02.340 --> 00:02:05.820
That's one of the best places where the list comes into place.

25
00:02:06.000 --> 00:02:09.870
And then, of course, you know, you can also remap these collections.

26
00:02:10.230 --> 00:02:15.030
You can instantiate a list because most of the time you need the functionality of a list.

27
00:02:15.270 --> 00:02:22.380
But then when you want to make sure that everything is unique, you could wrap a list with a set and

28
00:02:22.380 --> 00:02:23.950
then ensure that uniqueness.

29
00:02:23.970 --> 00:02:26.100
So you've got a lot of flexibility and options.

30
00:02:26.370 --> 00:02:32.280
One last thing I will mention is that there are actually still even a few other collections that I'm

31
00:02:32.280 --> 00:02:33.510
not covering here.

32
00:02:33.870 --> 00:02:40.440
My primary reason for not covering them is because they're much less commonly used than the collections

33
00:02:40.440 --> 00:02:42.450
that I have shown in this module.

34
00:02:42.660 --> 00:02:48.600
In fact, for the most part, the remaining collections are ones that I don't even really use that often.

35
00:02:48.780 --> 00:02:50.970
Now, I'm not saying that you shouldn't learn them.

36
00:02:51.510 --> 00:02:56.190
You certainly should make yourself familiar with them, such as Dex and accused.

37
00:02:56.190 --> 00:02:59.010
That deck, by the way, is De Q U e.

38
00:02:59.190 --> 00:03:04.710
But I would consider these to be a little bit more specialty collections, and I encourage you to go

39
00:03:04.800 --> 00:03:05.640
check those out.

40
00:03:05.640 --> 00:03:09.240
And then there are a number of other classes as well that you can check out.

41
00:03:09.480 --> 00:03:17.280
But the lists, sets and maps are by far the most common collections used in Java, and they will serve

42
00:03:17.280 --> 00:03:18.180
you very well.

43
00:03:18.420 --> 00:03:26.970
And you can model pretty much any scenario using just these three interfaces and their various implementations.

44
00:03:27.750 --> 00:03:34.590
Now, in the next module, we will actually be sticking with the collections, but we'll be learning

45
00:03:34.590 --> 00:03:40.530
a lot of those methods that I skipped over, which have to do with lambdas and some of the even more

46
00:03:40.530 --> 00:03:43.230
advanced capabilities that we can do.

47
00:03:43.920 --> 00:03:48.510
I just didn't want to overwhelm you by trying to ram all of that into one module.

48
00:03:48.510 --> 00:03:50.010
It would have just been too much.

49
00:03:50.970 --> 00:03:55.200
So let's have some fun with that and I will see you in the next module.
