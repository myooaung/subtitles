1
00:00:00,330 --> 00:00:06,990
All right, so picking up where we left off, we are now going to take a look at exercise 8.4.

2
00:00:07,260 --> 00:00:11,430
So this one is pond can move too forward on first move.

3
00:00:11,820 --> 00:00:17,220
And this represents an interesting little rule of chess that perhaps many of you are familiar with.

4
00:00:17,490 --> 00:00:23,520
And that is the fact that generally speaking, at the beginning of a chess game, you can actually choose

5
00:00:23,520 --> 00:00:30,720
to move upon one step forward or two steps forward, but only at the beginning of the game if that pond

6
00:00:30,720 --> 00:00:32,040
had not moved before.

7
00:00:32,370 --> 00:00:35,250
So just quickly, here I will show you this.

8
00:00:35,250 --> 00:00:42,540
And again, I'm on Wikipedia here taking a look at their article on chess, and it nicely depicts this

9
00:00:42,540 --> 00:00:43,040
fact.

10
00:00:43,050 --> 00:00:50,700
So we've got a pond here on Square two, and these two axes actually represent the two legal or valid

11
00:00:50,700 --> 00:00:56,190
moves that this pond could make from this position at this point in time.

12
00:00:56,640 --> 00:01:02,610
So we've already covered this one here, where the pond could simply move one square forward, but there's

13
00:01:02,610 --> 00:01:06,120
also this additional square, which is two squares forward.

14
00:01:06,420 --> 00:01:09,450
All right, so let's see how I implemented this capability.

15
00:01:09,780 --> 00:01:13,950
We'll start off here in the test and let me make some room.

16
00:01:13,950 --> 00:01:15,570
So here's my test.

17
00:01:15,570 --> 00:01:22,710
Pond can move two forward on first move, so it's important to note that this is only valid on the first

18
00:01:22,710 --> 00:01:23,100
move.

19
00:01:23,100 --> 00:01:28,710
And that obviously is assuming that your pond is starting in the in the proper starting position, which

20
00:01:28,710 --> 00:01:30,900
it has to in a proper chess game.

21
00:01:31,410 --> 00:01:35,010
So I create a pond, it will be a white pond.

22
00:01:35,310 --> 00:01:42,200
I decide to place that pond at Square A2, so that would be here on this board.

23
00:01:42,210 --> 00:01:44,430
In fact, let me let me zoom in a little bit.

24
00:01:44,430 --> 00:01:47,660
So that would be a pond right here at eight two.

25
00:01:47,670 --> 00:01:56,490
And then I get the valid moves for that pond and then I create a coordinate representing Square A four,

26
00:01:57,030 --> 00:01:58,980
so that would be here a fourth.

27
00:01:58,980 --> 00:02:05,340
So we started at eight two and now I'm making a square coordinate that represents square a four.

28
00:02:06,330 --> 00:02:14,040
And then I will assert that one of the valid moves that we got back from this method call, which returns

29
00:02:14,040 --> 00:02:19,050
an array of of moves, is in fact the a four square.

30
00:02:19,110 --> 00:02:19,460
All right.

31
00:02:19,470 --> 00:02:23,610
So then let's go see how I implemented this, and it's actually pretty easy.

32
00:02:24,030 --> 00:02:24,230
All right.

33
00:02:24,240 --> 00:02:27,420
So I'm jumping into this get valid moves method here.

34
00:02:27,780 --> 00:02:34,320
Now, we already took a look at how I implemented the move one forward use case where I just used this

35
00:02:34,320 --> 00:02:37,710
offset mechanism here for the coordinates class.

36
00:02:37,950 --> 00:02:45,960
And so it became very easy for me to implement additional use cases using basically this same mechanism.

37
00:02:46,110 --> 00:02:51,060
However, there was one additional criterion that I had to consider.

38
00:02:51,390 --> 00:02:56,270
This ability to move two squares forward is only permitted on the first move.

39
00:02:56,280 --> 00:02:59,820
OK, so we need a way to write code to track.

40
00:03:00,180 --> 00:03:02,400
Has this pond moved before?

41
00:03:02,520 --> 00:03:08,430
And if it hasn't, then you're allowed to do this move, otherwise you cannot do it right.

42
00:03:08,820 --> 00:03:15,180
And so what I opted to do was to implement a field on the pond class called has moved.

43
00:03:15,570 --> 00:03:23,820
And the basic idea here is whenever we ask the pond to move, we will make sure that we set this field

44
00:03:23,820 --> 00:03:25,230
to true, OK.

45
00:03:25,380 --> 00:03:32,640
And so with that field there, I went ahead and made use of the offset capability of our coordinates

46
00:03:32,640 --> 00:03:39,810
to simply state one of your legal moves is to move forward by not one, but two squares.

47
00:03:40,140 --> 00:03:43,880
And of course, no change to the x axis right.

48
00:03:43,890 --> 00:03:45,240
So don't move left or right.

49
00:03:45,240 --> 00:03:48,920
That would be zero, but you can move forward by two squares.

50
00:03:48,960 --> 00:03:52,580
So I create that offset coordinate added to the valid moves.

51
00:03:52,590 --> 00:03:57,660
However, I only do this if the pond has never moved.

52
00:03:58,080 --> 00:04:01,710
So this field here is right up here in the pond.

53
00:04:01,890 --> 00:04:03,090
Now, notice a couple of things.

54
00:04:03,090 --> 00:04:12,240
I do not put this field in the chess piece class because this is specific behavior specific, rule specific

55
00:04:12,240 --> 00:04:16,530
data that is tied only to the Pon class, OK.

56
00:04:16,890 --> 00:04:19,830
And so this belongs only on the pond class.

57
00:04:20,070 --> 00:04:27,210
And so I initialize this field to fall, OK, because at the beginning of the game, that would be the

58
00:04:27,210 --> 00:04:27,840
case, right?

59
00:04:27,840 --> 00:04:29,190
It has not yet moved.

60
00:04:29,490 --> 00:04:32,790
And so the rest is pretty straightforward as long as it hasn't moved.

61
00:04:32,970 --> 00:04:38,460
We can add the ability to move forward by two and then we simply return the valid moves.

62
00:04:38,790 --> 00:04:46,890
And so then if we return to the unit test, that means we will end up with a valid move to a four and

63
00:04:46,890 --> 00:04:49,920
we will find that and everything else makes sense, right?

64
00:04:50,100 --> 00:04:51,690
So that's pretty straightforward.

65
00:04:52,050 --> 00:04:56,460
Now one thing I also want to show you real quick here that I was thinking about as I was reviewing my

66
00:04:56,460 --> 00:04:59,780
last video, I'm going to go back into the get valid.

67
00:04:59,900 --> 00:05:00,770
Moves method here.

68
00:05:00,950 --> 00:05:07,040
I realized one thing I could actually make this code probably a little bit clearer, just a tiny bit

69
00:05:07,040 --> 00:05:14,780
clearer if I actually just made it so that moving forward is conveyed using positive integers instead

70
00:05:14,780 --> 00:05:17,780
of negative integers, this is a little counterintuitive.

71
00:05:17,960 --> 00:05:23,990
And the reason it's this way is because when I initially implemented this move forward capability by

72
00:05:23,990 --> 00:05:31,250
one square, I had not yet implemented the solution to work for both the black and the white chess pieces.

73
00:05:31,700 --> 00:05:37,700
And so all I was thinking about initially was just what number do I need this to be in order to make

74
00:05:37,700 --> 00:05:39,860
a white piece move forward by one?

75
00:05:39,860 --> 00:05:45,680
And we already looked in the last lesson that you need to decrement the y axis value by one.

76
00:05:45,860 --> 00:05:50,620
Because white pieces are moving negatively on the y axis, right?

77
00:05:50,630 --> 00:05:56,450
Because I'm using an array where it's zero one two three four five six seven, right?

78
00:05:56,660 --> 00:06:00,770
And so I was going from like six to five or whatever it was.

79
00:06:01,190 --> 00:06:06,290
But I realized as I was reviewing the last lesson that I could actually just flip these signs and then

80
00:06:06,290 --> 00:06:08,300
flip what I'm doing inside of this method.

81
00:06:08,300 --> 00:06:09,620
So let's do that real quick.

82
00:06:09,800 --> 00:06:12,230
I'm just going to get rid of the negatives here.

83
00:06:12,230 --> 00:06:19,610
I'm going to multi select with an option, shift all of my negatives there, and then I'm just going

84
00:06:19,610 --> 00:06:21,620
to get rid of those.

85
00:06:22,340 --> 00:06:27,200
And so then I can jump in to this calculate y method here.

86
00:06:27,200 --> 00:06:30,110
And then all I need to do is just flip these two signs.

87
00:06:31,810 --> 00:06:34,680
So I'm just flipping everything around, OK?

88
00:06:35,290 --> 00:06:44,350
And so now if I go back into the test for the pine and just rerun everything, hopefully I didn't break

89
00:06:44,350 --> 00:06:44,910
anything.

90
00:06:44,920 --> 00:06:45,640
So let's see.

91
00:06:46,720 --> 00:06:47,210
Very good.

92
00:06:47,230 --> 00:06:47,960
OK, so cool.

93
00:06:48,010 --> 00:06:49,360
I didn't break anything there.

94
00:06:49,360 --> 00:06:51,650
So let's just take one more look at that.

95
00:06:51,670 --> 00:06:52,660
Just to make it clear, right?

96
00:06:52,670 --> 00:06:58,240
So now whether we're talking about black pieces or white pieces, if we want them to move forward with

97
00:06:58,240 --> 00:07:03,640
respect to whatever side of the board they're from, we can always convey that with positive numbers,

98
00:07:03,640 --> 00:07:05,560
which intuitively makes more sense.

99
00:07:05,800 --> 00:07:12,310
And so this just goes to show that sometimes when you're writing code, the first idea or the first

100
00:07:12,310 --> 00:07:15,850
thoughts that will come to your mind may be sufficient to get things going.

101
00:07:16,030 --> 00:07:20,560
But as you work with the code further, you may start to realize, Oh, you know, I could make this

102
00:07:20,560 --> 00:07:27,990
code more intuitive if I made this minor tweak, and now my brain has to do a little bit less translating,

103
00:07:28,000 --> 00:07:28,480
you know?

104
00:07:28,720 --> 00:07:34,150
And so now, yeah, moving forward, it feels more natural to say that moving forward should have something

105
00:07:34,150 --> 00:07:37,090
to do with a positive number rather than a negative number.

106
00:07:37,720 --> 00:07:39,640
So that's a nice little update there.

107
00:07:40,030 --> 00:07:40,380
All right.

108
00:07:40,390 --> 00:07:45,340
So let's jump back over to the test, and I think we're ready to move on to the next one.

109
00:07:45,370 --> 00:07:46,750
OK, so let's see.

110
00:07:46,750 --> 00:07:54,410
The next use case was get test cannot move to after 1st move passing.

111
00:07:54,430 --> 00:07:55,200
So that's the thing.

112
00:07:55,420 --> 00:08:00,560
Make this test pass cannot move to after the first move.

113
00:08:00,580 --> 00:08:06,520
So now we want to kind of test the opposite case of this eighth floor, right?

114
00:08:06,700 --> 00:08:12,940
We said that if the Pine hasn't moved before, then one of its valid moves is the ability to move too

115
00:08:12,940 --> 00:08:13,450
forward.

116
00:08:13,600 --> 00:08:15,280
What if it has moved before?

117
00:08:15,700 --> 00:08:20,020
Is one of its valid moves still that it can move forward two squares?

118
00:08:20,030 --> 00:08:21,250
It should not be right.

119
00:08:21,340 --> 00:08:24,400
And so we want to test that negative case, essentially.

120
00:08:24,430 --> 00:08:27,310
OK, so let's take a look at how I implemented that.

121
00:08:27,460 --> 00:08:27,720
All right.

122
00:08:27,730 --> 00:08:31,330
So here's the test cannot move to after 1st move.

123
00:08:31,690 --> 00:08:39,440
So the way I decided to do this was to create a pun and then set its coordinates to eight two.

124
00:08:39,570 --> 00:08:44,140
Then I immediately set its coordinates to a three.

125
00:08:44,350 --> 00:08:45,520
Now, why do I do that?

126
00:08:46,180 --> 00:08:52,600
Well, basically, I'm just trying to roughly simulate the idea that the pond started off on a two and

127
00:08:52,600 --> 00:08:57,940
then maybe the game started, and then maybe the pond was moved to a three.

128
00:08:57,940 --> 00:09:04,420
And then we ask the pond, What are your valid moves now that you're on a three and not a two anymore?

129
00:09:04,450 --> 00:09:06,880
That's really all I'm trying to do with this test.

130
00:09:07,060 --> 00:09:09,800
So let's just take a look at how I implemented that.

131
00:09:09,820 --> 00:09:15,520
And I think a good place to start here is actually to take a look at the pond set coordinates method

132
00:09:15,520 --> 00:09:16,090
itself.

133
00:09:16,390 --> 00:09:18,580
So a couple of things to note here.

134
00:09:18,790 --> 00:09:25,180
So now I'm in the set coordinates method of the pond class, but I want to show you something here that

135
00:09:25,180 --> 00:09:30,370
you may not have realized or you may have forgotten this method on the pond.

136
00:09:30,370 --> 00:09:37,480
Class set coordinates is actually an overridden method, which means that a superclass of the pond class

137
00:09:37,480 --> 00:09:39,670
actually is already defining.

138
00:09:39,670 --> 00:09:45,910
This set coordinates method, and we can jump into that method by clicking on this little icon here

139
00:09:45,910 --> 00:09:49,780
with the up arrow to kind of go up the hierarchy chain.

140
00:09:50,350 --> 00:09:56,650
So here we are on the chess piece class and there's that set coordinates method.

141
00:09:57,160 --> 00:10:03,010
And so this method is literally just setting the coordinates and the coordinates are an internal field

142
00:10:03,010 --> 00:10:04,010
of the chess piece.

143
00:10:04,030 --> 00:10:11,020
So basically, just as a quick reminder here, any fields that should be generally common to all chess

144
00:10:11,020 --> 00:10:14,180
pieces should be on the chess piece class.

145
00:10:14,200 --> 00:10:14,650
OK?

146
00:10:14,830 --> 00:10:22,090
We don't want to duplicate these fields on the pond class and the night class, et cetera, et cetera.

147
00:10:22,300 --> 00:10:27,820
These should just be consolidated on the chess piece class, since these are properties that are common

148
00:10:27,820 --> 00:10:29,170
to all chess pieces.

149
00:10:29,740 --> 00:10:35,830
Likewise, the set coordinates method should be common to all chess pieces as well.

150
00:10:36,370 --> 00:10:45,400
But if we are dealing with a pawn, we want to know when the coordinates of a pawn have changed so that

151
00:10:45,400 --> 00:10:53,200
we have an opportunity to specify that this internal pawn field has moved should now be changed from

152
00:10:53,200 --> 00:10:54,880
false to true.

153
00:10:55,180 --> 00:11:01,930
And so by overriding the set coordinates method, that gives us an opportunity to do a little extra

154
00:11:01,930 --> 00:11:08,650
behavior that is specific to a pawn, but not necessarily specific to the other chess pieces.

155
00:11:08,800 --> 00:11:09,670
Does that make sense?

156
00:11:09,760 --> 00:11:17,170
And again, this is a nice little example of making use of some of the standard object oriented capabilities

157
00:11:17,320 --> 00:11:18,340
and techniques.

158
00:11:18,640 --> 00:11:25,090
So under normal circumstances, set coordinates can just do what it normally would do for all chess

159
00:11:25,090 --> 00:11:25,630
pieces.

160
00:11:25,840 --> 00:11:31,020
But in this one case, a pawn needs to do a little bit more than what a.

161
00:11:31,210 --> 00:11:34,490
Right or wrong or king or Bishop might have to do.

162
00:11:34,720 --> 00:11:40,420
We want to be able to track whether or not that -- has ever been moved subsequently.

163
00:11:40,780 --> 00:11:46,090
The other thing I want you to notice, though, is that I don't just set this flag to true.

164
00:11:46,270 --> 00:11:47,890
I actually check something here.

165
00:11:48,130 --> 00:11:53,710
If this dot coordinates is not null, then I set this to true.

166
00:11:53,800 --> 00:11:54,910
Now, why do I do that?

167
00:11:54,940 --> 00:11:57,770
Well, let's go take a look at the coordinates.

168
00:11:57,790 --> 00:12:04,270
So as you'll see here, when we first create a chess piece that chess pieces coordinates are not being

169
00:12:04,270 --> 00:12:09,880
initialized in the declaration, nor are they being initialized in a constructor.

170
00:12:09,910 --> 00:12:14,170
OK, so by default, the coordinates will start off being null.

171
00:12:14,200 --> 00:12:22,120
So when we first place the horn at Square A2, which was the first line of code in the test, the coordinates

172
00:12:22,120 --> 00:12:22,980
will be null.

173
00:12:22,990 --> 00:12:31,720
And so if the coordinates are null, then we're not going to do any of this will simply set the coordinates

174
00:12:31,720 --> 00:12:35,620
as they would normally have been done and move on with our life.

175
00:12:35,830 --> 00:12:42,290
But the next time we set the coordinates to a three, well, now the coordinates are not null.

176
00:12:42,310 --> 00:12:45,940
And so now we can specify that this pine has moved.

177
00:12:46,180 --> 00:12:47,170
Does that make sense?

178
00:12:47,380 --> 00:12:53,320
So that's just the way that again, I'm able to track whether or not this is the first time this pine

179
00:12:53,320 --> 00:12:55,670
is being placed at a coordinate, which is A2.

180
00:12:55,690 --> 00:12:59,890
So like the initial time or has it moved subsequently?

181
00:12:59,920 --> 00:13:00,340
OK.

182
00:13:00,550 --> 00:13:05,590
Because if I did not do this check, then the has moved field would be set to true.

183
00:13:05,800 --> 00:13:13,270
And then I would not be getting this ability to move twice on the first movement when I call the get

184
00:13:13,270 --> 00:13:14,650
valid moves method right.

185
00:13:14,800 --> 00:13:19,690
So I need this here at the very beginning of the game, but not after the Pine has been moved.

186
00:13:19,690 --> 00:13:23,110
So that's just the way that I chose to code that check.

187
00:13:23,410 --> 00:13:26,620
And then everything else I think is pretty straightforward after that.

188
00:13:26,950 --> 00:13:27,220
All right.

189
00:13:27,250 --> 00:13:30,100
Let's go ahead and move on to the next one.

190
00:13:30,400 --> 00:13:30,720
All right.

191
00:13:30,730 --> 00:13:36,810
So the next one is the fact that we want to get the can move one diagonally, right?

192
00:13:36,820 --> 00:13:38,170
Test passing.

193
00:13:38,590 --> 00:13:38,880
All right.

194
00:13:38,890 --> 00:13:44,410
So what this use case is simply saying is that one of the valid moves of a pond.

195
00:13:44,770 --> 00:13:51,040
Generally speaking, under under certain circumstances, which we are not yet coding specifically,

196
00:13:51,460 --> 00:13:59,500
is that a pun could potentially move diagonally to the right or diagonally to the left.

197
00:13:59,770 --> 00:14:07,510
If it is trying to capture an enemy piece, OK, now if there is no enemy peace on one of those two

198
00:14:07,510 --> 00:14:11,140
squares, the pun actually is not permitted to move there.

199
00:14:11,260 --> 00:14:13,810
We're not going to implement that part of the rule at this time.

200
00:14:14,230 --> 00:14:19,990
But in general, one of the valid moves could be that the pond could go diagonally to the right or left

201
00:14:20,140 --> 00:14:22,360
if it was capturing a piece.

202
00:14:22,390 --> 00:14:22,720
OK.

203
00:14:23,020 --> 00:14:29,410
So I wanted to just have us write code to calculate where those two squares would be, and I stay here

204
00:14:29,410 --> 00:14:35,050
on eight six, though this is only permitted when the pond can capture a piece.

205
00:14:35,230 --> 00:14:37,270
We won't factor that in for now.

206
00:14:37,300 --> 00:14:37,780
OK.

207
00:14:37,870 --> 00:14:42,190
So first one I do is can move one diagonally, right?

208
00:14:42,370 --> 00:14:45,760
And so let's just go take a look at how I did that.

209
00:14:45,940 --> 00:14:56,530
So I implemented another offset here, where the x axis offset is plus one, meaning that the pun is

210
00:14:56,530 --> 00:15:00,910
going to move to the right and also forward by one.

211
00:15:01,120 --> 00:15:07,240
So one forward and one to the right, which would be like moving one forward and one to the right.

212
00:15:07,390 --> 00:15:07,720
Right.

213
00:15:07,720 --> 00:15:11,140
So this pun would end up here where this night is.

214
00:15:12,430 --> 00:15:14,260
And so I think that's pretty straightforward.

215
00:15:14,470 --> 00:15:19,660
And then I'm going to go ahead and jump to the next use case where I also implemented the ability to

216
00:15:19,660 --> 00:15:21,490
move diagonally to the left.

217
00:15:22,000 --> 00:15:25,690
And so that's the same as this, except with a negative one.

218
00:15:25,720 --> 00:15:34,290
OK, so that would be negative one on the x axis or x offset and then forward by one as well.

219
00:15:34,300 --> 00:15:37,490
So that would put this upon where the rook is.

220
00:15:37,510 --> 00:15:37,930
OK.

221
00:15:38,320 --> 00:15:41,290
And so that's how he can calculate these two moves now.

222
00:15:41,470 --> 00:15:48,460
Like I said, for now, we're not taking into account whether or not there actually is a piece here.

223
00:15:48,490 --> 00:15:53,740
We may go ahead and do that too, because I think that would actually be a pretty fun, little additional

224
00:15:53,740 --> 00:15:59,890
bit of logic that we could put in because presumably in order to do that, the pawn would need to know,

225
00:16:00,340 --> 00:16:04,360
Is there an enemy piece on this square or that square?

226
00:16:04,480 --> 00:16:12,040
And only if there is one, then the pawn is allowed to add that square into it's possible.

227
00:16:12,040 --> 00:16:13,150
Valid moves, right?

228
00:16:13,630 --> 00:16:17,920
So that would be kind of cool to teach the python how to determine that, I think.

229
00:16:18,130 --> 00:16:18,400
All right.

230
00:16:18,400 --> 00:16:20,230
So let's jump back to the tests.

231
00:16:20,440 --> 00:16:20,830
All right.

232
00:16:21,040 --> 00:16:27,460
So that pretty much covers all of those standard movements of upon moving forward by one square, moving

233
00:16:27,460 --> 00:16:33,760
forward by two squares and then being able to sometimes move diagonally to the right or to the left.

234
00:16:34,180 --> 00:16:39,730
Though again, we're not considering whether or not there's an enemy occupying those diagonal squares

235
00:16:39,730 --> 00:16:40,700
at this time.

236
00:16:40,750 --> 00:16:47,440
The additional tests that I have here now are just making sure that that basic functionality also should

237
00:16:47,440 --> 00:16:53,050
work well for black pieces, since the logic is a little bit opposite in terms of what it means to move

238
00:16:53,050 --> 00:16:53,920
forward, right?

239
00:16:54,220 --> 00:17:01,990
And so here I'm just testing black pieces ability to move forward by one and then black piece can move

240
00:17:01,990 --> 00:17:08,470
forward by two, and I didn't bother doing black pieces moving diagonally and all of that because in

241
00:17:08,470 --> 00:17:14,690
this case, I was very satisfied that if these two tests were passing that the diagonal moves would

242
00:17:14,690 --> 00:17:21,430
would work just fine since we didn't write explicit additional code to cover black piece movement anyway.

243
00:17:21,610 --> 00:17:26,860
Once I saw that these two tests were working, then I was comfortable that everything was working and

244
00:17:26,860 --> 00:17:30,790
like I already showed earlier, I'll just show very, very briefly again.

245
00:17:30,970 --> 00:17:36,580
The main magic of what allows these black pieces to move is this method here.

246
00:17:36,580 --> 00:17:45,400
Calculate why with direction factor where we simply basically say, if the piece is white, then multiply

247
00:17:45,400 --> 00:17:47,440
this number of times negative one.

248
00:17:47,950 --> 00:17:53,050
And if the piece is black, then multiply this number times positive one.

249
00:17:53,350 --> 00:17:57,880
That's basically all we needed to do to make black pieces and white pieces.

250
00:17:57,880 --> 00:17:58,690
Both work.

251
00:17:59,020 --> 00:18:05,530
Oh, and I have one other little update that I was thinking about as I was reviewing my past videos.

252
00:18:06,010 --> 00:18:09,570
So we've got the ability here to set this offset, right?

253
00:18:09,580 --> 00:18:16,270
And then the result of this method get offset is to return a new coordinate object.

254
00:18:16,330 --> 00:18:16,780
OK.

255
00:18:17,200 --> 00:18:24,970
So really, the coordinate objects here are meant to be immutable, meaning that after we create an

256
00:18:24,970 --> 00:18:32,020
instance of a coordinate, we cannot change the X and Y values of that coordinate object to any further.

257
00:18:32,260 --> 00:18:39,940
If we want to get another coordinate related to a particular instance, we'd have to do something like

258
00:18:39,940 --> 00:18:41,440
call this get offset method.

259
00:18:41,680 --> 00:18:47,380
And so one minor change that I was thinking about here is that typically when we are dealing with a

260
00:18:47,380 --> 00:18:54,790
class that is immutable, but it has methods on it like this one that which can give us new instances

261
00:18:54,820 --> 00:18:58,960
of that class based off of the existing instance, right?

262
00:18:58,960 --> 00:19:05,260
So this get offset method here is giving us a new instance that is based off of the existing coordinates,

263
00:19:05,260 --> 00:19:05,620
right?

264
00:19:06,100 --> 00:19:12,430
Typically, a pattern that you'll see quite often in a number of programming languages that that deal

265
00:19:12,430 --> 00:19:18,400
with immutable object instances is that a method like this might actually be called something like with

266
00:19:18,400 --> 00:19:20,890
offset rather than get offset.

267
00:19:21,220 --> 00:19:26,770
Naming this get offset might imply that we're not getting a coordinate, but we're actually getting

268
00:19:26,770 --> 00:19:27,910
some kind of offsets.

269
00:19:28,090 --> 00:19:29,620
And that's not quite what we're doing here.

270
00:19:29,620 --> 00:19:31,510
We're we're passing in the offsets.

271
00:19:31,600 --> 00:19:33,880
And then we want to get another coordinate.

272
00:19:34,120 --> 00:19:40,300
So I propose actually just changing the name of this method from get offset to with offset.

273
00:19:40,630 --> 00:19:46,420
So I'm going to just put my cursor right there and do a shift f six and then I'm just going to select

274
00:19:46,420 --> 00:19:47,710
the words Get Whoops.

275
00:19:48,680 --> 00:19:54,650
Yet and I'm just going to change that to with Offset, that's just a naming pattern that you will see

276
00:19:54,650 --> 00:19:59,330
more often when you're dealing with these immutable object types.

277
00:19:59,450 --> 00:20:00,770
And then I will hit return.

278
00:20:00,800 --> 00:20:01,210
OK.

279
00:20:01,670 --> 00:20:06,770
And in fact, I think we will see this naming pattern a little bit when you learn more about the date

280
00:20:06,770 --> 00:20:14,270
and time classes in Java, because the revised date and time classes of modern versions of Java are

281
00:20:14,270 --> 00:20:15,350
all immutable.

282
00:20:15,530 --> 00:20:23,120
And so you can get new dates and times based on existing date time objects using methods that look a

283
00:20:23,120 --> 00:20:26,760
lot like this with offset in time, offset and things of that sort.

284
00:20:26,790 --> 00:20:29,220
OK, so I just want to be a little more consistent here.

285
00:20:29,240 --> 00:20:32,900
And so I think that is all we're going to do with the pond for right now.

286
00:20:33,080 --> 00:20:37,880
And so we'll keep going through the rest of these use cases in the in the next lesson.

287
00:20:37,880 --> 00:20:38,750
So I will see you there.
