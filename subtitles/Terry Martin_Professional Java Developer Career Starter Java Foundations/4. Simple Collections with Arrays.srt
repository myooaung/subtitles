1
00:00:00,570 --> 00:00:01,050
OK.

2
00:00:01,110 --> 00:00:07,260
There's one more data type that I want to introduce you to in this lesson.

3
00:00:07,500 --> 00:00:09,340
And it's kind of a special one.

4
00:00:09,360 --> 00:00:16,320
It's kind of a meta or a hybrid data type, unlike the others that we've learned about so far, because

5
00:00:16,320 --> 00:00:24,660
this data type depends on other data types to do its job, essentially, and that is an array.

6
00:00:25,080 --> 00:00:28,500
So let me define what an array is simplistically.

7
00:00:28,500 --> 00:00:31,440
And then we'll look at some examples to make it more clear.

8
00:00:31,440 --> 00:00:38,220
But basically, an array can be thought of as a collection of other data types.

9
00:00:38,370 --> 00:00:45,570
OK, so we've learned about data types like strings and integers and Boolean and things of things like

10
00:00:45,570 --> 00:00:45,960
that.

11
00:00:45,990 --> 00:00:51,750
Well, an array is a collection of those data types.

12
00:00:51,760 --> 00:01:00,870
So for example, if you wanted to have a list of strings, you could store that list of strings in an

13
00:01:00,870 --> 00:01:01,530
array.

14
00:01:01,710 --> 00:01:02,200
OK?

15
00:01:02,550 --> 00:01:10,410
If you're familiar with spreadsheets like Excel and you're used to putting data in lists in a spreadsheet,

16
00:01:10,410 --> 00:01:17,820
you can kind of visualize data that you might put in one column or in one table of a spreadsheet similarly

17
00:01:17,820 --> 00:01:21,300
to how an array would work if that helps.

18
00:01:21,570 --> 00:01:21,840
All right.

19
00:01:21,850 --> 00:01:26,560
So we're going to look at some examples to create arrays and how they are used.

20
00:01:26,610 --> 00:01:32,040
We won't be going actively here, but I want to just give you a little fountain because you will see

21
00:01:32,040 --> 00:01:34,380
arrays in future lessons.

22
00:01:34,620 --> 00:01:37,770
And I don't want that to be the first time that you encounter them.

23
00:01:37,950 --> 00:01:41,490
Plus, we've already been ignoring them for quite some time, as you're about to find.

24
00:01:41,550 --> 00:01:43,810
So let's jump to the ADC and see what we hear.

25
00:01:45,970 --> 00:01:46,420
All right.

26
00:01:46,450 --> 00:01:53,140
So I think what I want to do is I'm going to create another class first.

27
00:01:54,490 --> 00:02:00,040
And by the way, you're welcome to follow along, but I won't be going out of my way to explain every

28
00:02:00,040 --> 00:02:05,590
single thing that I'm doing in the ADC because right now I just want to introduce you to this topic.

29
00:02:06,190 --> 00:02:06,520
All right.

30
00:02:06,520 --> 00:02:08,290
So I'm going to create a new class.

31
00:02:09,550 --> 00:02:10,040
I don't know.

32
00:02:10,060 --> 00:02:12,880
I'll just call it a ray demo.

33
00:02:14,770 --> 00:02:15,280
All right.

34
00:02:15,640 --> 00:02:21,100
And I'll make a new line, and I'm going to generate a public static void main method.

35
00:02:21,460 --> 00:02:25,390
And right here, we've already got our first array.

36
00:02:25,420 --> 00:02:29,590
I've been putting it off for the entire course thus far.

37
00:02:29,920 --> 00:02:34,870
But this bit right here, that is a reference to an array variable.

38
00:02:34,870 --> 00:02:37,090
The variable is, is this guy here?

39
00:02:37,090 --> 00:02:40,960
ARGs, we get it every single time we generate a public static void.

40
00:02:40,960 --> 00:02:45,370
Main method, but we haven't ever used this variable before.

41
00:02:45,610 --> 00:02:49,550
But what we have here is a variable called args.

42
00:02:49,570 --> 00:02:53,920
That's the name of the variable and it is an array.

43
00:02:54,250 --> 00:03:00,850
And I know that because of these two symbols here, that means it's an array and it's an array that

44
00:03:00,850 --> 00:03:04,420
holds a collection of strings.

45
00:03:04,780 --> 00:03:11,760
And that's why I was saying at the beginning that an array is a special data type because it uses or

46
00:03:11,760 --> 00:03:15,790
it depends on the other data types to be useful.

47
00:03:15,820 --> 00:03:18,820
So you cannot really have an array on its own.

48
00:03:18,970 --> 00:03:21,700
You have to have an array of some data type.

49
00:03:21,730 --> 00:03:22,180
OK.

50
00:03:22,750 --> 00:03:26,530
And let me show you visually what this kind of might look like.

51
00:03:26,720 --> 00:03:29,980
So I'm going to open up a spreadsheet here.

52
00:03:31,480 --> 00:03:31,930
OK.

53
00:03:31,960 --> 00:03:35,050
So I've got an Excel spreadsheet open.

54
00:03:35,470 --> 00:03:43,120
And what I want to show is kind of a visual representation of what an array might look like.

55
00:03:43,480 --> 00:03:47,170
So we could have an array of strings.

56
00:03:47,560 --> 00:03:52,330
And in that array of strings, we might have five different strings.

57
00:03:52,750 --> 00:03:57,190
So maybe I could have strings that represent fruits.

58
00:03:59,750 --> 00:04:00,170
OK.

59
00:04:00,320 --> 00:04:08,090
So each each string in that array might be a different fruit name.

60
00:04:08,240 --> 00:04:20,420
OK, so over here in the in the program, what this is telling us is that when the main method is called,

61
00:04:20,990 --> 00:04:28,580
it is capable of accepting an input of an array of strings.

62
00:04:29,420 --> 00:04:36,410
And we will refer to that array of strings with this name, this variable name of ARGs.

63
00:04:36,740 --> 00:04:37,250
OK.

64
00:04:37,670 --> 00:04:45,760
So you can look at this as a list of strings basically just like this here.

65
00:04:46,950 --> 00:04:49,410
OK, so what do we do with this, though?

66
00:04:49,800 --> 00:04:53,670
Well, let's let me show you a few examples of what we could do with this.

67
00:04:54,090 --> 00:05:01,080
So I'm going to print out that variable there.

68
00:05:01,590 --> 00:05:02,040
OK.

69
00:05:03,490 --> 00:05:09,100
Now, to run this in a meaningful way, I need to do it a little differently than we have been running

70
00:05:09,100 --> 00:05:09,880
things before.

71
00:05:10,120 --> 00:05:15,130
Up until now, we've just been, you know, clicking on the play button or I do a control shift or something

72
00:05:15,130 --> 00:05:16,860
like that, and I and I run it.

73
00:05:16,870 --> 00:05:19,360
In fact, you know, I'll go ahead and just do that real quick.

74
00:05:19,900 --> 00:05:27,670
Just so you can see what is showing me here is that I have this little bracket here is kind of indicating

75
00:05:27,670 --> 00:05:30,470
that I have an array of strings.

76
00:05:30,490 --> 00:05:35,930
That's that's basically what what all of this is saying with that little bracket there.

77
00:05:35,950 --> 00:05:40,990
It's an array of strings that lives that this memory location.

78
00:05:41,020 --> 00:05:43,990
OK, so that's that's basically what we're seeing.

79
00:05:43,990 --> 00:05:46,510
They're not very useful in and of itself.

80
00:05:47,260 --> 00:05:55,510
But if I run this program a little bit differently by running it from the command line, I can do something

81
00:05:55,510 --> 00:05:57,280
that you haven't seen before.

82
00:05:58,660 --> 00:06:05,590
So what I'm going to do here is I'm opening up a command line terminal prompt where I can type things

83
00:06:05,590 --> 00:06:10,990
in essentially OK, and we may learn a little more about this in the future.

84
00:06:10,990 --> 00:06:14,970
But right now, the point isn't for me to teach you about terminals and prompts and things.

85
00:06:14,980 --> 00:06:21,550
The point is just for me to show you other ways of executing this main method so that we can pass something

86
00:06:21,550 --> 00:06:22,840
some data into it.

87
00:06:23,770 --> 00:06:24,160
All right.

88
00:06:24,430 --> 00:06:32,650
So what I can do is I can run this program manually myself instead of letting the ADC run it for me.

89
00:06:32,680 --> 00:06:37,330
I can run this from the command line and to run a Java program from the command line.

90
00:06:37,330 --> 00:06:46,630
I use the Java command, which is all lowercase java, and then I need to tell Java where my class lives,

91
00:06:46,630 --> 00:06:54,070
what folder it's in, which I do by doing this Hyphen P, which stands for class path.

92
00:06:54,070 --> 00:07:00,820
So that's the path in which my class resides, the the classes this array demo.

93
00:07:01,420 --> 00:07:09,910
And I happen to know that this array demo class lives over here in this folder called out production

94
00:07:10,360 --> 00:07:12,810
business array demo.

95
00:07:12,820 --> 00:07:13,960
That's where it lives.

96
00:07:14,170 --> 00:07:24,460
So down here I can refer to that out production and I'm hitting tab to let my command prompt auto fill

97
00:07:24,460 --> 00:07:29,050
in the rest of the path for me business.

98
00:07:29,890 --> 00:07:36,010
And then once I'm in the correct folder, which is business, then I have a space and then I refer to

99
00:07:36,010 --> 00:07:38,170
the class name itself.

100
00:07:42,220 --> 00:07:53,530
OK, so now I'm telling Java to run this class, which resides in this folder, but I can tell it one

101
00:07:53,530 --> 00:07:54,310
more thing too.

102
00:07:54,310 --> 00:08:01,630
If I put another space here, I can pass in some arguments, which is what this word args stands for.

103
00:08:01,630 --> 00:08:08,560
I can pass in some inputs to this, to this main method and use that data for whatever I like.

104
00:08:08,800 --> 00:08:16,000
So I'm going to type in Apple Orange and I'm going to hit enter.

105
00:08:16,690 --> 00:08:24,370
OK, so I got basically the same output as we did when we ran it from within the ADC.

106
00:08:24,580 --> 00:08:32,020
It told me that we're printing out this args reference and that it is an array of strings that reside

107
00:08:32,020 --> 00:08:33,730
at this address.

108
00:08:34,120 --> 00:08:41,110
However, I can dig into this args variable and extract some information out of it.

109
00:08:41,800 --> 00:08:50,200
So first thing I'll do is the ARGS variable being that it is an array has a number of methods that I

110
00:08:50,200 --> 00:08:51,580
can call on it.

111
00:08:52,000 --> 00:08:57,130
And so I can use the period and I can access some of these methods.

112
00:08:57,340 --> 00:09:04,270
And the first method I'm going to access is the length, which will simply tell us how many items are

113
00:09:04,270 --> 00:09:05,230
in this array.

114
00:09:05,470 --> 00:09:12,160
So now if I want to run this again, I'm going to have to run it from the command line in order to be

115
00:09:12,160 --> 00:09:15,070
able to pass in some arguments.

116
00:09:15,370 --> 00:09:22,030
So, yeah, the reason why I'm having to run this program from the command line is so that I can pass

117
00:09:22,030 --> 00:09:28,480
in some arguments because it's not quite as straightforward to do from within the IDE, although it

118
00:09:28,480 --> 00:09:29,980
is possible to do.

119
00:09:29,980 --> 00:09:33,820
But I think it's a little more straightforward just to do it from the command line for now.

120
00:09:34,090 --> 00:09:34,450
OK.

121
00:09:34,480 --> 00:09:36,600
So I'm going to run this again.

122
00:09:36,610 --> 00:09:41,770
However, there's one more thing I'm going to have to do if I want to run this again.

123
00:09:41,770 --> 00:09:43,810
Now that I've changed this code.

124
00:09:43,900 --> 00:09:49,240
I'm going to have to tell the ADP to re compile this program.

125
00:09:49,390 --> 00:09:51,610
So that's something I've been glossing over a lot.

126
00:09:51,640 --> 00:09:57,880
Up until now, every time we've made a change to our programs and then we click this button here, the

127
00:09:57,880 --> 00:10:05,020
I.D. checks to see if we've made any code changes and if we have it, it rebuilds our program and then

128
00:10:05,020 --> 00:10:05,770
it runs it.

129
00:10:06,040 --> 00:10:13,210
However, if we make changes here, but we run the program from the command prompt, the idea doesn't

130
00:10:13,210 --> 00:10:15,700
know that it should rebuild this code.

131
00:10:15,700 --> 00:10:21,400
So we have to either hit the play button, which isn't entirely useful to us because we won't be able

132
00:10:21,400 --> 00:10:23,560
to pass in our inputs that we want.

133
00:10:23,680 --> 00:10:29,260
But it would trigger the ADC to rebuild the program and then we could run it down here.

134
00:10:29,470 --> 00:10:38,050
Or we can simply go up here to the build menu item and then tell the ad to rebuild the project with

135
00:10:38,050 --> 00:10:39,790
this build project setting here.

136
00:10:40,000 --> 00:10:41,560
And so that's what I'm going to do.

137
00:10:41,920 --> 00:10:42,340
OK.

138
00:10:42,460 --> 00:10:44,350
So now it's done rebuilding.

139
00:10:44,620 --> 00:10:52,380
And so now back down here at the command prompt, if I use the up arrow key, I can recall that command

140
00:10:52,390 --> 00:10:52,510
now.

141
00:10:52,510 --> 00:10:55,290
This works on Macs and on Windows.

142
00:10:55,300 --> 00:11:00,070
If you're using PowerShell, I think it might work on the non PowerShell.

143
00:11:00,070 --> 00:11:06,250
And even with the non PowerShell in Windows is called the CMD Command ICSI program, but I just wanted

144
00:11:06,250 --> 00:11:08,920
to not have to retype this whole entire thing again.

145
00:11:09,250 --> 00:11:16,600
All right, and then I'm going to hit return to rerun this, and now I get the number two, and that

146
00:11:16,600 --> 00:11:23,170
makes sense because I passed in two parameters or arguments Apple and Orange.

147
00:11:23,590 --> 00:11:28,090
So what happens if I pass in five?

148
00:11:30,260 --> 00:11:37,130
Grapes and pineapple and raspberry.

149
00:11:37,490 --> 00:11:37,910
All right.

150
00:11:39,530 --> 00:11:41,180
Now I get the number five.

151
00:11:41,390 --> 00:11:48,110
So the program is seeing that I'm passing in all of these arguments now.

152
00:11:48,620 --> 00:11:59,840
And each one is going into its own spot within the array and the array grows in length with each additional

153
00:11:59,840 --> 00:12:01,790
string that I put in there.

154
00:12:01,850 --> 00:12:02,240
OK.

155
00:12:02,390 --> 00:12:04,250
But I can do more than just this.

156
00:12:04,520 --> 00:12:08,780
I can also access the individual words.

157
00:12:09,730 --> 00:12:11,920
And I'll do that on another line.

158
00:12:14,230 --> 00:12:20,920
So let's say that I want to retrieve the first string in that array.

159
00:12:21,370 --> 00:12:27,100
Well, arrays are what they call zero based, which means that I need to use the number zero somehow

160
00:12:27,100 --> 00:12:31,340
as an index to access this first string in the array.

161
00:12:31,600 --> 00:12:40,000
And the way that I do that is with a square bracket and then the index of the element that I want.

162
00:12:40,240 --> 00:12:40,690
OK.

163
00:12:40,990 --> 00:12:47,150
So each of these would be an element, but it's zero based.

164
00:12:47,170 --> 00:12:53,020
So the first element is is zero, then one, then two three four ET.

165
00:12:53,830 --> 00:12:54,220
OK.

166
00:12:54,400 --> 00:12:58,700
So args zero would give me the first word that I pass in.

167
00:12:59,260 --> 00:13:01,180
And now I'm going to have to rebuild.

168
00:13:01,510 --> 00:13:05,290
So I'm going to use Command F nine to do that now.

169
00:13:05,380 --> 00:13:05,800
OK?

170
00:13:06,220 --> 00:13:13,630
And then I will rerun the program and now I get the word Apple in addition to the count.

171
00:13:14,140 --> 00:13:18,730
And so obviously, I can change this and get any value that I want.

172
00:13:19,120 --> 00:13:24,250
I can get the fourth string out of here and rerun that.

173
00:13:26,350 --> 00:13:26,800
OK.

174
00:13:27,490 --> 00:13:27,720
Yeah.

175
00:13:27,800 --> 00:13:29,200
So now I got pineapple.

176
00:13:30,190 --> 00:13:30,590
All right.

177
00:13:30,610 --> 00:13:34,420
So there are other things that I could do.

178
00:13:34,630 --> 00:13:40,060
Now let's say that I passed in numbers instead of words.

179
00:13:41,620 --> 00:13:45,310
So let's say five four three two one.

180
00:13:46,510 --> 00:13:48,490
And then I hit return.

181
00:13:48,940 --> 00:13:49,360
All right.

182
00:13:49,810 --> 00:13:52,860
It tells me that I have five arguments that I passed in.

183
00:13:52,930 --> 00:13:55,420
And the fourth one is a two.

184
00:13:55,600 --> 00:14:02,860
Now, even though I entered a bunch of numbers, those numbers are being stored as strings.

185
00:14:02,890 --> 00:14:03,310
OK.

186
00:14:03,520 --> 00:14:07,420
So what that kind of looks like is sort of like sort of like

187
00:14:10,930 --> 00:14:12,370
something kind of like this.

188
00:14:15,060 --> 00:14:15,450
OK.

189
00:14:15,720 --> 00:14:22,170
So even though I entered a bunch of numbers, they're being stored in strings and therefore everything

190
00:14:22,170 --> 00:14:24,720
that I'm reading out of here is actually a string.

191
00:14:24,750 --> 00:14:25,110
OK?

192
00:14:25,410 --> 00:14:31,740
So when we're passing arguments into a main method, the only data type we can work with for public

193
00:14:31,740 --> 00:14:35,080
static void main method is an array of strings.

194
00:14:35,100 --> 00:14:37,740
Everything is going to get translated into strings.

195
00:14:37,770 --> 00:14:38,220
OK.

196
00:14:38,340 --> 00:14:38,790
All right.

197
00:14:38,820 --> 00:14:44,910
However, we can have other types of arrays and let me show you what that would look like.

198
00:14:45,270 --> 00:14:48,360
So I'm going to delete this.

199
00:14:51,370 --> 00:14:58,270
And we can make an array ourselves, so let's say that we want to have an array of actual numbers,

200
00:14:58,270 --> 00:15:00,250
not strings, but actual numbers.

201
00:15:00,910 --> 00:15:04,480
So to do that, we can create a variable for that array.

202
00:15:04,870 --> 00:15:07,480
We're going to tell it that it's going to hold integers.

203
00:15:07,720 --> 00:15:13,720
We're going to say that it's an array, though, and we can give that array variable a name, such as

204
00:15:13,720 --> 00:15:14,440
numbers.

205
00:15:15,040 --> 00:15:25,960
And now we have the option of initializing this array right now, so we can do that by using curly braces

206
00:15:26,230 --> 00:15:31,060
and then we can pass in a comma delimited list of the data.

207
00:15:31,360 --> 00:15:39,280
So if we wanted this array of numbers to contain the numbers 10 through whatever counting by 10s or

208
00:15:39,280 --> 00:15:48,070
something, we could do something like this 10 comma, 20 comma, 30, 40, 50 and we could just keep

209
00:15:48,070 --> 00:15:48,490
going.

210
00:15:48,730 --> 00:15:52,310
And then we'll close the curly brace and then use a semicolon there.

211
00:15:52,330 --> 00:15:52,780
OK.

212
00:15:53,140 --> 00:16:01,090
And so now we have just created an array of integers, which is called nums.

213
00:16:01,720 --> 00:16:08,560
And now we can use that array similar to how we did on lines three and four.

214
00:16:08,830 --> 00:16:14,140
So we could get the length num start length just like that.

215
00:16:15,390 --> 00:16:24,360
And we could access any one of those numbers by using the square bracket and then the index, OK, so

216
00:16:24,360 --> 00:16:31,170
if we wanted the second number in that array, that would be one because it's zero based, so zero would

217
00:16:31,170 --> 00:16:32,190
be the first one.

218
00:16:32,370 --> 00:16:34,230
One would be the second one.

219
00:16:34,260 --> 00:16:36,400
This would be index zero.

220
00:16:36,420 --> 00:16:40,590
This would be index one index to Index three Index four.

221
00:16:40,800 --> 00:16:48,930
OK, now if I don't care about getting anything useful out of here and I just want to focus on the output

222
00:16:48,930 --> 00:16:53,130
from here, I mostly could go ahead and just run this from within the ADP.

223
00:16:53,130 --> 00:16:58,170
Now, however, if I were to run this from the ADP, right, this moment, the program will blow up

224
00:16:58,170 --> 00:17:03,390
and actually let me just show that real quick, and then I will explain why it's going to blow up and

225
00:17:03,390 --> 00:17:03,930
by blow up.

226
00:17:03,930 --> 00:17:06,060
I mean, have an exception or an error.

227
00:17:06,510 --> 00:17:09,000
OK, so we got an exception, which is an error.

228
00:17:09,180 --> 00:17:12,360
And you know that it's an error because of the ugly red text here.

229
00:17:12,600 --> 00:17:19,030
And the exception is index three out of bounds for length zero at Array Main Blah Blah Blah.

230
00:17:19,050 --> 00:17:26,460
Array demo dot java colon for what that's telling us, is that online for this line right here?

231
00:17:27,660 --> 00:17:32,790
We tried to access index three, this three right here.

232
00:17:34,240 --> 00:17:43,120
In an array, and that index three is out of bounds for an array of length zero, so what it's saying

233
00:17:43,120 --> 00:17:49,990
is that this time when we ran the program, this array had zero elements in it.

234
00:17:50,170 --> 00:17:56,500
And the reason it had zero elements in it is because since we did not run this program from the command

235
00:17:56,500 --> 00:17:59,980
line, we didn't pass any arguments in.

236
00:17:59,980 --> 00:18:06,190
And so if you don't pass any arguments into the program, then the array here will have a length of

237
00:18:06,190 --> 00:18:06,700
zero.

238
00:18:06,730 --> 00:18:09,040
There won't be anything in that array.

239
00:18:09,670 --> 00:18:16,450
And so then when you tell it to give me the fourth element in this array, which has zero elements in

240
00:18:16,450 --> 00:18:19,750
it, you are out of bounds, right?

241
00:18:19,750 --> 00:18:27,760
You, you are going to be you are exceeding the number of elements that exists within this array.

242
00:18:27,970 --> 00:18:29,140
That makes sense, right?

243
00:18:29,290 --> 00:18:30,880
We didn't pass anything in there.

244
00:18:31,180 --> 00:18:39,040
So if we want to run this program from within the ADC where we're not passing any arguments in, we

245
00:18:39,040 --> 00:18:40,980
could comment this one line out.

246
00:18:40,990 --> 00:18:44,020
For now, that's probably the quickest, easiest thing to do.

247
00:18:44,650 --> 00:18:49,930
Or we could get fancier with some things that I haven't taught you yet, where we could say if the length

248
00:18:49,930 --> 00:18:54,460
is zero, then don't execute this line, you know, we could do something like that.

249
00:18:54,610 --> 00:18:57,160
For now, we're just going to comment that line out.

250
00:18:58,430 --> 00:19:04,190
This line is OK, because it's just going to tell us that there's a length of zero, which is fine.

251
00:19:04,340 --> 00:19:08,390
So if we run this again now, it won't blow up.

252
00:19:10,140 --> 00:19:17,970
OK, so first thing we got is zero, which is this bit here, then we got a five, which is this bit

253
00:19:17,970 --> 00:19:20,430
here on line seven.

254
00:19:20,790 --> 00:19:27,260
And then we printed out the second number in the NUM's array, which is 20.

255
00:19:27,270 --> 00:19:30,480
So that's working as expected.

256
00:19:31,200 --> 00:19:34,050
OK, I think that's going to wrap it up for this lesson.

257
00:19:34,050 --> 00:19:35,660
We will revisit arrays.

258
00:19:35,670 --> 00:19:37,680
There's a lot that we can do with them.

259
00:19:37,680 --> 00:19:43,170
But like I said, I wanted to just give a little bit of an introduction into arrays because we're going

260
00:19:43,170 --> 00:19:47,790
to see them more in the future before we go deep into them.

261
00:19:47,790 --> 00:19:53,670
And I didn't want you to have to learn about the arrays plus the other concepts, all at the same time.

262
00:19:53,910 --> 00:19:57,360
So this is going to wrap it up for now, and I will see you in the next one.
