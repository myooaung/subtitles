1
00:00:00,870 --> 00:00:01,240
All right.

2
00:00:01,260 --> 00:00:02,000
Welcome back.

3
00:00:02,040 --> 00:00:08,970
So when we left off in the last lesson, we had introduced the new skill annotation and we replaced

4
00:00:09,180 --> 00:00:16,290
the getter methods for saving and for updating to use our new skill annotation, right?

5
00:00:16,560 --> 00:00:21,090
And so then we were about to tackle the fine by ID and the find all methods.

6
00:00:21,240 --> 00:00:30,270
When I realized that those two operations find my ID and find all are both sharing one method in the

7
00:00:30,270 --> 00:00:31,950
people repository class.

8
00:00:31,950 --> 00:00:34,860
In fact, let's jump back over there and I will show you OK.

9
00:00:35,130 --> 00:00:42,800
So both the Find All and the find by ID method are just using this method right here.

10
00:00:42,810 --> 00:00:44,790
They're both using this same method.

11
00:00:45,210 --> 00:00:52,560
So the current approach that I was thinking of where we would just throw in at school as a one to one

12
00:00:52,560 --> 00:00:58,470
like for a method that supports a given operation like or update, you would just throw a sequel annotation

13
00:00:58,470 --> 00:00:58,830
on there.

14
00:00:59,010 --> 00:01:05,880
But in this particular case, we've got one method that is actually servicing the Find All and the find

15
00:01:05,880 --> 00:01:06,390
by ID.

16
00:01:07,170 --> 00:01:09,480
And so how do we get around that?

17
00:01:10,110 --> 00:01:18,360
And what I'm sort of thinking about here is that currently, in order for our SQL annotation to even

18
00:01:18,360 --> 00:01:26,310
work from the perspective of the crud repository, we're having to hard code the name of the method

19
00:01:26,310 --> 00:01:28,830
that that SQL annotation is on, right?

20
00:01:28,840 --> 00:01:34,830
So in other words, when our KRudd repository wants to know what's the sequel for saving, we're telling

21
00:01:34,830 --> 00:01:37,410
it go find a method called map for save.

22
00:01:37,440 --> 00:01:37,830
Right?

23
00:01:37,860 --> 00:01:39,360
That's how it's doing that.

24
00:01:39,450 --> 00:01:46,260
But I just realized maybe a different way that we could do this would be maybe to not search for the

25
00:01:46,260 --> 00:01:54,360
SQL annotation by the method name, but instead, maybe we can search for the annotation by crud operation.

26
00:01:54,360 --> 00:02:02,280
So maybe we can introduce another attribute on the at school annotation that lets us specify what the

27
00:02:02,280 --> 00:02:07,920
operation is like saving, updating, finding all, et cetera, et cetera, right?

28
00:02:08,100 --> 00:02:13,120
And then you can put that annotation anywhere, in fact, actually, to be honest with you.

29
00:02:13,140 --> 00:02:18,920
You could even put that annotation right up up top on the class itself in that case.

30
00:02:18,930 --> 00:02:24,960
And as long as the annotation can be found, according to the operation that you're trying to do, everything's

31
00:02:24,960 --> 00:02:25,770
good, right?

32
00:02:25,800 --> 00:02:26,190
All right.

33
00:02:26,190 --> 00:02:28,200
So here's what I got in mind.

34
00:02:28,230 --> 00:02:30,330
That's sort of one more technique in the mix here.

35
00:02:30,870 --> 00:02:40,410
So what I'm thinking is let's jump into the SQL annotation here, and let's add one more attribute.

36
00:02:40,410 --> 00:02:46,900
And this attribute will have a type that is that is going to be, I think, from an enum.

37
00:02:46,920 --> 00:02:50,080
OK, so we're going to introduce we're going to make use of an enum here.

38
00:02:50,100 --> 00:02:55,320
Also, OK, so the enum will be called crud operation.

39
00:02:56,310 --> 00:02:57,600
OK, that'll be the type.

40
00:02:57,780 --> 00:03:02,280
And then the attribute will just be called operation type.

41
00:03:02,400 --> 00:03:03,090
Like so.

42
00:03:03,120 --> 00:03:03,430
All right.

43
00:03:03,450 --> 00:03:08,190
And so obviously, we've got red marks here because I'm referring to a data type that the ID doesn't

44
00:03:08,190 --> 00:03:09,570
know anything about yet.

45
00:03:09,930 --> 00:03:17,970
And so I'm going to do an option return here and now the idea is offering to create this, and I'm going

46
00:03:17,970 --> 00:03:18,450
to tell it.

47
00:03:18,450 --> 00:03:20,490
Yes, created as an enum.

48
00:03:21,390 --> 00:03:21,930
All right.

49
00:03:22,260 --> 00:03:23,850
Now where do I want this to go?

50
00:03:24,360 --> 00:03:29,580
I think I'm going to just put it in the model class for now, I guess.

51
00:03:30,030 --> 00:03:30,420
OK.

52
00:03:30,660 --> 00:03:31,770
So here's the enum.

53
00:03:32,010 --> 00:03:38,280
And so you may not remember how to use these names, but basically we can just declare a bunch of constants

54
00:03:38,430 --> 00:03:43,080
on the enum itself, and that's all we really need or we're not going to do anything fancy.

55
00:03:43,110 --> 00:03:43,440
OK?

56
00:03:43,710 --> 00:03:47,520
So the constants that I have in mind would be save.

57
00:03:48,870 --> 00:03:49,770
Update.

58
00:03:50,990 --> 00:03:59,240
Fined by I.D. Notice, I'm using all caps and underscores because these are because these do really

59
00:03:59,240 --> 00:04:07,250
represent constants, OK, fine by I.D. and find all.

60
00:04:08,250 --> 00:04:14,730
And delete, and if I think to some more, we'll throw some more on there later, but that's I think

61
00:04:14,730 --> 00:04:18,870
that covers all of the operations that we've actually implemented thus far.

62
00:04:19,980 --> 00:04:20,790
All right.

63
00:04:21,090 --> 00:04:22,360
So let's jump back over here.

64
00:04:22,380 --> 00:04:24,270
Cool, so that's happy now.

65
00:04:24,960 --> 00:04:25,450
All right.

66
00:04:25,470 --> 00:04:27,420
And then let's jump.

67
00:04:28,570 --> 00:04:36,400
Over here, and so now my usages of the SQL annotation are in error because we've got attributes that

68
00:04:36,400 --> 00:04:37,900
need to be specified, OK?

69
00:04:38,260 --> 00:04:38,590
All right.

70
00:04:38,590 --> 00:04:43,840
So now let's specify the that operation type.

71
00:04:44,290 --> 00:04:46,630
OK, and I should be able to do a control space.

72
00:04:46,660 --> 00:04:49,130
There we go, and I get presented with the options.

73
00:04:49,150 --> 00:04:55,120
OK, so this one is for savings so I can just select save like so and looks like that's happy now.

74
00:04:55,130 --> 00:05:02,920
Notice when I did that, the I.D. went ahead and has now specified the explicit attribute name for my

75
00:05:02,920 --> 00:05:04,570
value attribute as well.

76
00:05:04,600 --> 00:05:04,960
OK.

77
00:05:05,290 --> 00:05:08,560
So you need that if you're going to specify additional attributes.

78
00:05:08,650 --> 00:05:09,370
All right.

79
00:05:09,580 --> 00:05:12,070
And then we'll do that down here as well.

80
00:05:12,910 --> 00:05:17,410
So operation type equals and this is for updating.

81
00:05:17,410 --> 00:05:20,930
So sorry, this is running off the screen, but there it is.

82
00:05:20,950 --> 00:05:21,260
OK.

83
00:05:21,300 --> 00:05:23,080
Create operation that update.

84
00:05:23,410 --> 00:05:28,540
So first, let's just get these two operations working now with this new approach, OK?

85
00:05:28,810 --> 00:05:34,870
So I'm going to come up here to go back into the credit repository, and now I want to make a few changes.

86
00:05:35,050 --> 00:05:39,730
I think we're going to jump into this get sequel by annotation method here.

87
00:05:39,730 --> 00:05:43,810
And so now, instead of passing in a method name, we'll just pass in that operation.

88
00:05:43,840 --> 00:05:44,290
OK.

89
00:05:44,780 --> 00:05:47,890
So crud operation.

90
00:05:49,260 --> 00:05:52,170
And I will call it operation type.

91
00:05:52,290 --> 00:05:55,380
OK, so now let's look at this code.

92
00:05:55,500 --> 00:05:58,500
So we're on the repository class.

93
00:05:58,530 --> 00:05:58,850
All right.

94
00:05:58,860 --> 00:06:02,590
So we're going to find all the methods of this class.

95
00:06:02,610 --> 00:06:08,670
And then currently we're we're filtering those down to the methods that have a particular name and we

96
00:06:08,670 --> 00:06:10,380
don't want to do it that way anymore.

97
00:06:10,410 --> 00:06:10,860
Right.

98
00:06:11,160 --> 00:06:16,590
So instead of finding the methods with a particular name, now we want to find the methods with a particular

99
00:06:16,860 --> 00:06:18,180
annotation.

100
00:06:18,540 --> 00:06:26,330
So I think let's delete that line there and actually, let's see if we can do a different filtering.

101
00:06:28,670 --> 00:06:29,630
Here's our method.

102
00:06:31,030 --> 00:06:37,390
OK, so I think there's a method on the method class that lets us test for whether or not a particular

103
00:06:37,390 --> 00:06:41,320
annotation exists and I see it right here, is annotation present?

104
00:06:41,320 --> 00:06:42,460
That's perfect.

105
00:06:43,000 --> 00:06:45,760
That's I think that's exactly what we want.

106
00:06:46,480 --> 00:06:52,540
So is annotation present and then we can pass in school class like so OK.

107
00:06:52,540 --> 00:07:00,400
So now we're filtering methods according to whether or not they have the skill annotation on them.

108
00:07:00,550 --> 00:07:01,120
Perfect.

109
00:07:01,450 --> 00:07:09,220
And so then if we find those, then we want to convert the stream of methods to a stream of the SQL

110
00:07:09,220 --> 00:07:10,210
annotations.

111
00:07:10,210 --> 00:07:11,650
And that's what we're doing here.

112
00:07:11,710 --> 00:07:14,740
But now we need to go one step further.

113
00:07:14,890 --> 00:07:18,910
So now we don't just want to automatically take that annotation.

114
00:07:18,910 --> 00:07:21,970
Now we need to filter those annotations.

115
00:07:23,010 --> 00:07:29,160
So we're going to filter again, so this is an annotation, and now we're going to say if the annotations

116
00:07:29,160 --> 00:07:36,180
operation type equals whatever this operation type is that we passed in right here, operation type.

117
00:07:36,210 --> 00:07:36,660
OK.

118
00:07:37,170 --> 00:07:43,770
So if the annotation that we're currently inspecting in the stream has the matching operation type,

119
00:07:43,980 --> 00:07:51,180
then get its value and then return that otherwise execute this skill, get everything you hear.

120
00:07:51,300 --> 00:07:56,460
Oh, and by the way, in the last lesson, I forgot to explain why using the or else get with this method

121
00:07:56,460 --> 00:08:00,160
reference was better than just calling the getter method directly.

122
00:08:00,180 --> 00:08:00,510
OK.

123
00:08:00,690 --> 00:08:03,570
So the reason this is better is quick.

124
00:08:03,570 --> 00:08:09,750
Let's see here where we're using this is because here's one place where we're actually using this OK?

125
00:08:09,900 --> 00:08:16,980
So what's going to happen here is this method here, which shouldn't be needed under normal circumstances,

126
00:08:17,400 --> 00:08:22,230
is never even going to get evaluated unless it's actually needed.

127
00:08:22,260 --> 00:08:22,740
OK.

128
00:08:23,190 --> 00:08:28,980
But on the other hand, if this was not a method reference, that method would actually get called whether

129
00:08:28,980 --> 00:08:30,580
or not we needed its value.

130
00:08:30,600 --> 00:08:36,540
So by using a method reference, we're able to do what's called lazy loading essentially where you don't

131
00:08:36,540 --> 00:08:41,040
actually do the processing required to make that call unless you actually need to.

132
00:08:41,070 --> 00:08:46,770
OK, so we're just passing around a reference to the method versus calling the method.

133
00:08:46,800 --> 00:08:47,250
OK.

134
00:08:47,550 --> 00:08:50,220
So that's why that is a value now.

135
00:08:50,250 --> 00:08:53,250
OK, so now let's go ahead and clean this up.

136
00:08:53,580 --> 00:08:53,930
All right.

137
00:08:53,940 --> 00:08:58,830
So instead of that string there, this is to update, right?

138
00:08:58,830 --> 00:09:02,580
So we can pass in the crud operation.

139
00:09:03,900 --> 00:09:05,520
Dot update.

140
00:09:06,720 --> 00:09:07,560
There we go.

141
00:09:08,280 --> 00:09:09,360
Looks nice.

142
00:09:10,690 --> 00:09:14,350
And let's see, do we have we have another error right here?

143
00:09:14,380 --> 00:09:16,750
OK, and then this one is the save, right?

144
00:09:18,890 --> 00:09:22,670
So crud, Operation Save.

145
00:09:22,970 --> 00:09:23,390
All right.

146
00:09:23,510 --> 00:09:24,980
Let's run the tests.

147
00:09:25,250 --> 00:09:25,790
Look at that.

148
00:09:26,030 --> 00:09:27,200
They all still work.

149
00:09:27,320 --> 00:09:28,070
Awesome.

150
00:09:28,490 --> 00:09:36,890
OK, so now let's try tackling this slightly harder thing, which I don't think is going to be that

151
00:09:36,890 --> 00:09:37,730
hard though now.

152
00:09:38,180 --> 00:09:39,200
So fine by it.

153
00:09:39,320 --> 00:09:44,480
OK, so now we will just call our get what was it?

154
00:09:44,810 --> 00:09:53,480
Get sequel by annotation and the Pride operation is a find by IED.

155
00:09:54,140 --> 00:10:02,360
And then the fallback method will be this colon colon get fined by IED sequel.

156
00:10:02,390 --> 00:10:03,020
There we go.

157
00:10:03,080 --> 00:10:03,350
All right.

158
00:10:03,470 --> 00:10:05,320
Let's go ahead and just knocked these all out now.

159
00:10:05,330 --> 00:10:07,940
I'm pretty satisfied that this is all good.

160
00:10:08,540 --> 00:10:11,810
All right, so here's this one get find all sequel.

161
00:10:12,170 --> 00:10:15,470
So I'm going to select all of that and let's see here.

162
00:10:15,470 --> 00:10:23,210
So we're going to do a get sequel by annotation and then passing a crud operation.

163
00:10:23,210 --> 00:10:25,490
And this is find all there it is.

164
00:10:25,490 --> 00:10:26,160
Find all.

165
00:10:26,660 --> 00:10:31,040
And then our fallback will be this Colin Colon Find all sequel.

166
00:10:32,080 --> 00:10:32,920
There we go.

167
00:10:33,310 --> 00:10:34,090
All right.

168
00:10:34,300 --> 00:10:39,820
And then, oh yeah, we've got a few more calls to, oh yeah, we've got the count.

169
00:10:40,300 --> 00:10:41,950
Oh yeah, we've got a count.

170
00:10:42,100 --> 00:10:47,890
OK, well, let's jump in to let's jump into here and add in.

171
00:10:50,370 --> 00:10:53,640
Count and did I say one other thing?

172
00:10:53,730 --> 00:10:54,420
Count.

173
00:10:55,510 --> 00:11:00,310
And delete are we've got delete one and then delete many?

174
00:11:00,850 --> 00:11:01,240
Yeah.

175
00:11:01,840 --> 00:11:02,280
OK.

176
00:11:02,350 --> 00:11:03,400
So.

177
00:11:04,420 --> 00:11:10,810
Let's jump in here and and specify those, so this maybe should be delete one.

178
00:11:12,050 --> 00:11:15,440
And then we can have a delete many.

179
00:11:16,070 --> 00:11:18,150
OK, let's see how that works out.

180
00:11:18,170 --> 00:11:19,520
I think it's going to be fine.

181
00:11:19,820 --> 00:11:21,920
OK, so the count here.

182
00:11:23,590 --> 00:11:23,980
Get.

183
00:11:25,970 --> 00:11:36,680
Get schooled by annotation, quote, Operation Count this Colin Common count.

184
00:11:36,860 --> 00:11:37,690
Very good.

185
00:11:37,760 --> 00:11:38,870
And delete.

186
00:11:41,160 --> 00:11:43,770
Get sequel by annotation.

187
00:11:44,830 --> 00:11:52,180
Crud operation, and we're doing delete one, delete one comma.

188
00:11:54,190 --> 00:11:58,330
This Colin Colin, the sequel that one right there.

189
00:11:58,360 --> 00:11:58,810
OK.

190
00:11:59,260 --> 00:12:01,120
And then this one here.

191
00:12:01,360 --> 00:12:01,930
There it is.

192
00:12:02,530 --> 00:12:13,750
OK, get sequel by annotation, crud operation and this is delete many karma.

193
00:12:14,350 --> 00:12:21,730
This delete in I might want to standardize on a better naming here, but for right now, this should

194
00:12:21,730 --> 00:12:22,340
suffice.

195
00:12:22,360 --> 00:12:23,830
OK, so there's that.

196
00:12:24,430 --> 00:12:27,070
And so I think I have modified everybody now.

197
00:12:27,310 --> 00:12:34,510
So now let me find all the abstract guys, and I think I can just make them all not abstract anymore.

198
00:12:34,990 --> 00:12:42,790
So I'll just do a multi cursor here so I can do an option shift and put a cursor there and there and

199
00:12:42,790 --> 00:12:49,690
there, and then select all that and just delete all of that and then come over to the end.

200
00:12:49,700 --> 00:12:59,260
Now I'm someone I have to get out of multi-step cursor mode and then go back into it here and here and

201
00:12:59,260 --> 00:12:59,830
here again.

202
00:12:59,830 --> 00:13:04,540
I'm holding down an option and shift or alt and shift, I believe, for Windows and Linux.

203
00:13:04,850 --> 00:13:05,230
All right.

204
00:13:05,650 --> 00:13:08,890
And then I will just do.

205
00:13:11,080 --> 00:13:17,650
Return empty string semicolon and then get out of that mode.

206
00:13:18,160 --> 00:13:27,790
All right, so now that, I think, is there's one more debt find by sequel yet, let's get rid of that

207
00:13:27,790 --> 00:13:28,810
one also.

208
00:13:29,810 --> 00:13:32,330
Return empty string.

209
00:13:32,510 --> 00:13:32,840
All right.

210
00:13:33,110 --> 00:13:34,950
Yeah, so let's see.

211
00:13:35,030 --> 00:13:40,670
Let's move, let's move this one up because I kind of lost track of it just now.

212
00:13:41,270 --> 00:13:47,900
Yeah, and let's make it protected just to be consistent, and let's move this one down.

213
00:13:49,620 --> 00:13:51,550
Away from these other getters.

214
00:13:51,780 --> 00:13:52,530
There we go.

215
00:13:52,680 --> 00:13:54,750
OK, that looks pretty good.

216
00:13:54,960 --> 00:13:55,270
All right.

217
00:13:55,290 --> 00:14:00,000
And now let's jump back over to the people repository class.

218
00:14:00,300 --> 00:14:03,300
And now let's just finish throwing the sequel in.

219
00:14:04,950 --> 00:14:05,580
So let's see.

220
00:14:05,580 --> 00:14:07,630
This is fine by IED.

221
00:14:07,980 --> 00:14:11,310
OK, so for that, I can go right here.

222
00:14:11,940 --> 00:14:12,330
All right.

223
00:14:12,360 --> 00:14:21,360
And so we can create another sequel annotation here and paste in our sequel.

224
00:14:22,140 --> 00:14:26,820
Like so and then we're going to have to specify the operation type.

225
00:14:27,060 --> 00:14:29,850
And so this will be for find by idea, right?

226
00:14:30,600 --> 00:14:31,500
So.

227
00:14:33,830 --> 00:14:35,360
There's our find by ID.

228
00:14:35,960 --> 00:14:41,930
And one of the thing I'll show you this we don't even really have to be copying and pasting the sequel.

229
00:14:42,080 --> 00:14:45,170
So let me just show you the alternative way that we could be doing this.

230
00:14:45,830 --> 00:14:52,760
Another SQL statement here and now, this time, instead of pasting in the sequel, though from up above,

231
00:14:53,120 --> 00:14:55,280
I will actually just reference the constant.

232
00:14:55,290 --> 00:14:58,670
So this will be the Find All sequel.

233
00:14:59,210 --> 00:15:03,710
See, so we could actually just do that also and then the operation type.

234
00:15:04,280 --> 00:15:07,280
And so this is the find all OK.

235
00:15:07,490 --> 00:15:12,050
So I would say it's largely a matter of personal preference or team preference.

236
00:15:12,050 --> 00:15:19,260
If you're working on a team as to which of these approaches, one may prefer to a certain degree.

237
00:15:19,280 --> 00:15:27,110
I actually kind of prefer being able to see the actual sequel as close to the code that that sequel

238
00:15:27,110 --> 00:15:29,840
is being used with as possible.

239
00:15:30,260 --> 00:15:35,870
Although one nice thing that intelligent will do as you're seeing here is if you hover over that constant,

240
00:15:35,870 --> 00:15:38,450
it will show you the value of that constant.

241
00:15:38,460 --> 00:15:41,390
So actually, in that case, that's not bad at all, right?

242
00:15:41,960 --> 00:15:44,600
But as you can see now, we do have an issue.

243
00:15:44,960 --> 00:15:50,570
If I hover over, you can see that there are the little red squiggles underneath these two sequel statements.

244
00:15:50,570 --> 00:15:53,360
And if I hover on one, we get the message here.

245
00:15:53,480 --> 00:15:55,220
Duplicate annotation, right?

246
00:15:55,520 --> 00:16:01,490
So currently, our at SQL annotation cannot be used multiple times on a method.

247
00:16:01,610 --> 00:16:02,060
OK.

248
00:16:02,300 --> 00:16:03,620
But we can fix this.

249
00:16:03,890 --> 00:16:07,850
So to do so, we'll need to jump in to the annotation for sequel.

250
00:16:08,030 --> 00:16:13,970
And what we'll have to do is add another annotation on here and additional annotation to say that this

251
00:16:13,970 --> 00:16:17,390
annotation sequel can be repeated or it is repeatable.

252
00:16:17,450 --> 00:16:21,800
OK, now that won't be the only thing we have to do, but that's one of them.

253
00:16:21,800 --> 00:16:28,820
OK, so we'll put this at repeatable annotation here and now we have to provide a reference to a container

254
00:16:28,820 --> 00:16:31,490
annotation for our SQL annotation.

255
00:16:31,500 --> 00:16:36,500
So the basic idea is this If you're going here, let's let's jump back over here.

256
00:16:36,500 --> 00:16:43,100
So the basic idea is this if you want to be able to use the same annotation multiple times on a method,

257
00:16:43,100 --> 00:16:49,670
then those annotations need to be wrapped inside of a parent annotation, a container annotation.

258
00:16:49,820 --> 00:16:53,990
Now the nice thing is that we don't actually have to wrap them ourselves.

259
00:16:54,260 --> 00:17:01,220
Java will do that for us, but we still have to define a container annotation because when we use the

260
00:17:01,220 --> 00:17:08,540
reflection API to find methods that have whatever annotations we're interested in, the existing APIs

261
00:17:08,540 --> 00:17:14,690
won't let us say find all methods that have multiple at SQL annotations on them.

262
00:17:14,690 --> 00:17:15,680
It's not going to do that.

263
00:17:15,860 --> 00:17:21,740
So instead, we'd have to say find all methods that have the container annotation that we're going to

264
00:17:21,770 --> 00:17:23,090
create in the future here.

265
00:17:23,390 --> 00:17:28,040
And then once we find that, then we can dig into that and then get all the SQL annotations in this

266
00:17:28,040 --> 00:17:29,330
particular methods case.

267
00:17:29,480 --> 00:17:34,070
Now, for these other methods that only have one SQL annotation, that code is going to work the same

268
00:17:34,070 --> 00:17:34,970
as it already was.

269
00:17:35,000 --> 00:17:35,330
OK.

270
00:17:35,570 --> 00:17:39,710
So we're going to have to define one more annotation, which will serve as an as a container.

271
00:17:39,740 --> 00:17:40,160
OK.

272
00:17:40,730 --> 00:17:43,210
So let's jump back over here.

273
00:17:43,220 --> 00:17:50,060
So what we'll do is we'll go ahead and specify that annotation, even though it does not yet exist and

274
00:17:50,060 --> 00:17:51,980
we can call it just about anything.

275
00:17:52,310 --> 00:17:52,730
I don't know.

276
00:17:52,730 --> 00:17:56,360
Maybe we'll call it multi sequel.

277
00:17:56,990 --> 00:17:59,150
OK, so let's try that.

278
00:17:59,420 --> 00:18:04,640
Now, normally the ADP would give us the option to create this for us.

279
00:18:04,880 --> 00:18:10,580
But in this particular case, it's not directly giving us the option to create an annotation, though.

280
00:18:10,760 --> 00:18:16,220
I think what we could probably do is just tell it we want it to create an interface and then we can

281
00:18:16,220 --> 00:18:17,520
change it ourselves.

282
00:18:17,540 --> 00:18:18,620
So let's try that.

283
00:18:20,790 --> 00:18:32,040
So we'll just throw an at symbol right there and get rid of that clean up the imports and then let's

284
00:18:32,040 --> 00:18:34,650
specify that the retention.

285
00:18:37,870 --> 00:18:41,050
And will set the retention policy to run time.

286
00:18:41,770 --> 00:18:49,450
All right, and then we need to specify the fact that this annotation can contain our at SQL annotation

287
00:18:49,450 --> 00:18:56,140
and the way we do that is actually to just define a value method that returns an array of our SQL annotation

288
00:18:56,410 --> 00:19:05,680
so we can do a sequel array and then value method like so and look at that, the errors went away.

289
00:19:05,860 --> 00:19:11,380
So I think we've got a winner here, so we'll jump back over to our SQL annotation yet.

290
00:19:11,380 --> 00:19:13,360
And this looks happy now.

291
00:19:13,450 --> 00:19:18,970
And now let's jump over here, and the red squiggly went away over here as well.

292
00:19:19,240 --> 00:19:21,700
So that's looking pretty, OK?

293
00:19:22,150 --> 00:19:22,480
All right.

294
00:19:22,510 --> 00:19:27,400
Now we need to actually use this right because this is going to be a little bit different.

295
00:19:27,670 --> 00:19:28,030
OK.

296
00:19:28,600 --> 00:19:33,820
So let's jump back over to our credit repository now and see what we can do here.

297
00:19:33,940 --> 00:19:37,260
So we need to go down here to our get SQL by annotation method.

298
00:19:37,270 --> 00:19:40,840
So currently we're finding all the methods on our class.

299
00:19:41,290 --> 00:19:47,140
And then we're filtering for just the methods that have a sequel annotation on them.

300
00:19:47,380 --> 00:19:55,000
And then we're getting that annotation and then we are filtering for the SQL annotations that specify

301
00:19:55,000 --> 00:19:58,660
the operation type that we are interested in, right?

302
00:19:58,750 --> 00:20:02,140
Then we get that value and then we return that value, right?

303
00:20:02,320 --> 00:20:04,360
So that's what we're currently doing.

304
00:20:04,870 --> 00:20:13,870
But now, in addition to doing this, we also need to be able to search for SQL annotations that are

305
00:20:13,870 --> 00:20:18,190
embedded inside of our new multi SQL annotation.

306
00:20:18,220 --> 00:20:25,810
So what I'd like to do is to somehow do both of those searches and then combine all the sequel annotations

307
00:20:25,810 --> 00:20:32,020
that are found from either approach and then finish this stream off the way that we're doing now.

308
00:20:32,050 --> 00:20:32,500
OK.

309
00:20:32,620 --> 00:20:36,370
So I'd like to be able to combine these two things, and I think we can do that.

310
00:20:36,460 --> 00:20:42,280
So what I think we'll do is I'm going to make a new line here and I'm going to go ahead and write the

311
00:20:42,280 --> 00:20:49,280
code to try to find the SQL annotations that are embedded inside of our new multi sequel.

312
00:20:49,300 --> 00:20:53,770
And by the way, just keep in mind, let me let me jump back over here real quick.

313
00:20:54,340 --> 00:21:03,100
Just keep in mind now that although we didn't explicitly wrap these two SQL annotations inside of a

314
00:21:03,100 --> 00:21:10,720
multi SQL annotation, Java will do that for us by virtue of the fact that we have made these repeatable

315
00:21:11,020 --> 00:21:14,570
and that we have multiple ones on this method, OK?

316
00:21:14,600 --> 00:21:22,090
So when we use the Reflection API to find these on this particular method, they won't show up directly

317
00:21:22,090 --> 00:21:22,830
on this method.

318
00:21:22,840 --> 00:21:29,590
Instead, this method will appear to only have one annotation on it, which will be our multi SQL annotation.

319
00:21:29,830 --> 00:21:35,370
And then we'll have to grab that multi skill annotation and then dig into it to get these out.

320
00:21:35,380 --> 00:21:41,230
So in other words, it would look something kind of like this multi sequel.

321
00:21:50,390 --> 00:21:56,180
It would look kind of like this from the perspective of the reflection API.

322
00:21:56,210 --> 00:21:56,590
OK.

323
00:21:56,750 --> 00:22:01,480
That's what it's going to kind of look like when we're programmatically looking for these guys, OK?

324
00:22:01,640 --> 00:22:08,840
So in addition to our existing code that says go find all methods that have SQL annotation on the method.

325
00:22:08,960 --> 00:22:10,010
Like this one here?

326
00:22:10,190 --> 00:22:17,150
We also have to have code that says go find all methods that has the multi SQL annotation on it.

327
00:22:17,330 --> 00:22:24,770
And then if and when we find that, then we have to access that guy's value to get at this array of

328
00:22:24,770 --> 00:22:26,510
sequel annotations here.

329
00:22:26,660 --> 00:22:31,250
And then from that point, it'll be the same processing as what we're doing up here.

330
00:22:31,280 --> 00:22:31,670
OK.

331
00:22:32,180 --> 00:22:38,150
So that's what that's going to look like, but we don't explicitly need to wrap this code inside of

332
00:22:38,150 --> 00:22:39,830
the multi SQL annotation.

333
00:22:40,010 --> 00:22:41,420
Java will do that for us.

334
00:22:41,640 --> 00:22:41,890
All right.

335
00:22:41,900 --> 00:22:43,700
So let me put that back.

336
00:22:46,330 --> 00:22:46,690
All right.

337
00:22:47,140 --> 00:22:49,570
And jump back over to the credit repo.

338
00:22:50,560 --> 00:22:55,870
All right, so I think the way we will do this then, is inside of this gets by annotation, we're going

339
00:22:55,870 --> 00:22:58,990
to create another stream for that other scenario, right?

340
00:22:59,230 --> 00:23:01,120
And it'll pretty much look just like this.

341
00:23:01,120 --> 00:23:02,290
In fact, let's see here.

342
00:23:02,290 --> 00:23:04,210
Maybe I will start off this.

343
00:23:04,300 --> 00:23:06,670
Well, I'll start off with at least this much.

344
00:23:07,790 --> 00:23:13,490
All right, so I'm going to paste that, and so we're saying go through all the methods, filter through

345
00:23:13,490 --> 00:23:18,410
the methods that have now here we'll do multi sequel.

346
00:23:18,890 --> 00:23:24,470
OK, so find all the methods that have a multi sequel annotation on them.

347
00:23:25,550 --> 00:23:33,970
And if you find any, let's map the stream of methods to a stream of multi sequels.

348
00:23:36,580 --> 00:23:38,380
Well, annotations, OK.

349
00:23:38,650 --> 00:23:45,550
And then if there is a multi SQL annotation, we will want to convert from a stream of multi SQL annotation

350
00:23:45,550 --> 00:23:49,150
to a stream of sequel annotations.

351
00:23:49,180 --> 00:23:49,600
OK.

352
00:23:49,780 --> 00:23:51,100
So another map?

353
00:23:51,400 --> 00:23:55,690
So let's say that this is a multi sequel, I will call it that way.

354
00:23:56,350 --> 00:24:03,370
And so we're going to want to do a multi SQL annotation dot value.

355
00:24:03,400 --> 00:24:10,360
Now, let us consider that calling multi-skilled that value is going to return a stream of arrays of

356
00:24:10,360 --> 00:24:11,780
SQL annotations.

357
00:24:11,800 --> 00:24:17,800
OK, a stream of in fact, let me see if I can get it to just if I can coax it into showing us that.

358
00:24:19,030 --> 00:24:19,650
Let's see here.

359
00:24:19,660 --> 00:24:20,140
I'll just.

360
00:24:20,590 --> 00:24:21,280
Yeah, there we go.

361
00:24:21,310 --> 00:24:21,610
OK.

362
00:24:21,640 --> 00:24:23,080
This is just away right here.

363
00:24:23,080 --> 00:24:27,640
So I could get the idea to show us what the output of this Line 126 would be.

364
00:24:27,640 --> 00:24:32,770
So it's a stream of SQL arrays, SQL annotation arrays.

365
00:24:32,920 --> 00:24:34,120
That's not what we want.

366
00:24:34,130 --> 00:24:37,630
We actually want a stream of sequel like we have here.

367
00:24:37,930 --> 00:24:45,490
So again, can you think of how to coax the Streams API into giving us a stream of sequel annotations

368
00:24:45,490 --> 00:24:46,540
and not this array?

369
00:24:46,550 --> 00:24:47,740
Can you think of how to do that?

370
00:24:48,940 --> 00:24:49,540
Did you get it?

371
00:24:50,320 --> 00:24:53,180
OK, so it's it's a two part thing here.

372
00:24:53,560 --> 00:24:58,450
So what we'll have to do is we will have to use arrays again.

373
00:24:58,460 --> 00:25:02,800
This is a very indispensable class arrays that stream.

374
00:25:03,100 --> 00:25:03,550
OK.

375
00:25:04,090 --> 00:25:10,900
But that's not enough, because now look at what we get out of this if you do arrays that stream.

376
00:25:10,900 --> 00:25:19,300
So the arrays that stream method takes an array of objects in this case, an array of SQL annotations,

377
00:25:19,600 --> 00:25:24,190
and it converts to a stream of sequel annotations.

378
00:25:24,200 --> 00:25:24,600
OK?

379
00:25:25,060 --> 00:25:31,980
But the map method takes whatever its output is and puts it inside of a stream also.

380
00:25:31,990 --> 00:25:35,920
And so now we end up with a stream of a stream of sequels, right?

381
00:25:36,280 --> 00:25:38,140
We've learned about this before, right?

382
00:25:38,140 --> 00:25:39,850
This double stream thing.

383
00:25:39,880 --> 00:25:40,270
OK.

384
00:25:40,570 --> 00:25:43,120
So do you remember what to do about that?

385
00:25:43,720 --> 00:25:44,320
Did you get it?

386
00:25:44,800 --> 00:25:45,220
OK.

387
00:25:45,370 --> 00:25:51,160
So all we need to do is not use the map function, but use the flat map function.

388
00:25:51,190 --> 00:25:51,640
OK.

389
00:25:51,790 --> 00:25:57,700
So flat map is useful any time you've got a stream of streams and you want to flatten that down back

390
00:25:57,700 --> 00:25:58,960
into just one stream.

391
00:25:59,410 --> 00:25:59,870
OK.

392
00:25:59,890 --> 00:26:05,680
So we use flat map and now we have a stream of sequel just like we've got right here.

393
00:26:05,860 --> 00:26:06,280
OK?

394
00:26:06,490 --> 00:26:12,070
And so now I'm going to delete this little placeholder that I put in here just to coax the ID into showing

395
00:26:12,070 --> 00:26:14,200
us what was coming out of each of these steps.

396
00:26:14,560 --> 00:26:14,960
All right.

397
00:26:15,010 --> 00:26:21,040
So now what we can actually do is I'm going to put a semicolon here and I'm going to capture this stream

398
00:26:21,040 --> 00:26:31,540
into a variable like so and so I will call this stream multi sequel stream.

399
00:26:33,410 --> 00:26:33,790
OK.

400
00:26:34,220 --> 00:26:40,730
Like that, and then I'm going to do a similar thing down here on this stream.

401
00:26:41,090 --> 00:26:49,910
I'm going to capture this stream down to this point right here and I'm going to capture a variable out

402
00:26:49,910 --> 00:26:50,510
of that.

403
00:26:51,320 --> 00:26:54,830
And yeah, I guess I will just call this one single stream.

404
00:26:56,540 --> 00:26:57,080
There we go.

405
00:26:57,260 --> 00:27:01,250
So now we've got these two streams, and let me put a little space in here, so it's a little easier

406
00:27:01,250 --> 00:27:03,640
to see some of what's going on.

407
00:27:03,650 --> 00:27:08,060
OK, so we've got our multi cycle stream and then we've got our sequel stream here, OK?

408
00:27:08,420 --> 00:27:16,610
And now what we can do is we can reference the stream class itself, and the stream class actually has

409
00:27:16,610 --> 00:27:18,230
a method on it called concordat.

410
00:27:18,500 --> 00:27:24,510
And it takes two strings as inputs, and it just concatenate the two streams together.

411
00:27:24,590 --> 00:27:26,090
So this is kind of perfect.

412
00:27:26,660 --> 00:27:35,510
So, Kat, and so then we can just reference both of our streams Multi-Stream Comma Sequel Stream Like

413
00:27:35,510 --> 00:27:41,470
so and now the rest of this processing can take place on both streams.

414
00:27:41,480 --> 00:27:49,460
OK, so basically, we're saying go find all of the sequel streams via this multi cycle approach and

415
00:27:49,460 --> 00:27:54,480
then also go find all of the SQL streams with the original approach that we had.

416
00:27:54,500 --> 00:27:59,570
And now we've got these two streams and then concatenate those two streams together because they both

417
00:27:59,570 --> 00:28:02,870
are going to contain SQL annotations, right?

418
00:28:03,320 --> 00:28:05,760
And now go process all of the rest of that.

419
00:28:05,840 --> 00:28:09,410
And so now we may get exactly what we're looking for.

420
00:28:09,620 --> 00:28:14,810
So, yeah, I don't remember that I had actually explicitly shown that we could assign a stream to a

421
00:28:14,810 --> 00:28:15,740
variable, right?

422
00:28:15,750 --> 00:28:16,460
But you can.

423
00:28:16,460 --> 00:28:19,580
And the fact that we can concatenate streams as well.

424
00:28:19,580 --> 00:28:20,540
We might've learned it.

425
00:28:20,540 --> 00:28:21,200
I can't remember.

426
00:28:21,200 --> 00:28:21,470
But.

427
00:28:22,010 --> 00:28:22,450
All right.

428
00:28:22,460 --> 00:28:27,680
So I think we might be ready to jump back over to the tests.

429
00:28:28,670 --> 00:28:32,240
So let's jump into the people repository and let's see.

430
00:28:32,240 --> 00:28:33,980
There are no errors here.

431
00:28:34,280 --> 00:28:40,190
And I think now we should not need any of these methods.

432
00:28:40,340 --> 00:28:43,090
Let's say fine by ID, find by all.

433
00:28:43,100 --> 00:28:46,180
I think we implemented all the rest of this already.

434
00:28:46,190 --> 00:28:50,570
So I'm going to go ahead and just go out on a little bit of a leap here and just comment all of those

435
00:28:50,570 --> 00:28:50,930
out.

436
00:28:51,290 --> 00:28:51,640
Let's see.

437
00:28:51,640 --> 00:28:53,090
Yeah, there are no errors.

438
00:28:53,420 --> 00:28:53,840
OK.

439
00:28:54,110 --> 00:28:59,270
So let's jump over to the tests, and let's just try running it all.

440
00:28:59,660 --> 00:29:00,620
See what happens?

441
00:29:01,960 --> 00:29:04,490
All right, we got a few a few failures here.

442
00:29:04,510 --> 00:29:08,330
Let's see two failures to be precise, count and delete.

443
00:29:08,350 --> 00:29:09,370
So let's see here.

444
00:29:09,640 --> 00:29:13,540
OK, so something went wrong on the delete up or on the delete test.

445
00:29:13,540 --> 00:29:15,130
So let's see what this test was doing.

446
00:29:15,370 --> 00:29:18,400
We were creating a person, then we were saving the person.

447
00:29:18,400 --> 00:29:20,510
Then we get the count of people.

448
00:29:20,620 --> 00:29:25,300
Then we delete that person and then we get the count again, ending count.

449
00:29:25,630 --> 00:29:31,930
And then we assert that the end count should be should be equal to the start count minus one.

450
00:29:32,170 --> 00:29:34,810
OK, so this depends on count working.

451
00:29:34,930 --> 00:29:38,090
And I can see here that the test forget count fails.

452
00:29:38,090 --> 00:29:40,480
So let's let's focus on that one first.

453
00:29:40,900 --> 00:29:41,220
All right.

454
00:29:41,230 --> 00:29:46,960
So for this one, our error says the method is only allowed for a query.

455
00:29:48,060 --> 00:29:56,910
OK, so here in the stack, trace, the first line, remember, stack traces kind of go depending on

456
00:29:56,910 --> 00:29:57,750
how you think of them.

457
00:29:57,930 --> 00:29:59,940
Stack traces are sort of like backward.

458
00:30:00,240 --> 00:30:07,110
So we want to start at the top and then start working our way down the stack trace, usually until you

459
00:30:07,140 --> 00:30:11,010
see the first line of code that you can do something about, right?

460
00:30:11,220 --> 00:30:17,250
So like, there's nothing I can really do about the code in H2, and there's likely nothing wrong with

461
00:30:17,250 --> 00:30:18,120
that code, right?

462
00:30:18,300 --> 00:30:24,480
But this first line here that I can do something about is code that I wrote in the crud repository account

463
00:30:24,480 --> 00:30:24,930
method.

464
00:30:25,110 --> 00:30:27,870
So I might want to start by taking a look there.

465
00:30:28,350 --> 00:30:28,950
All right.

466
00:30:28,980 --> 00:30:29,900
Let's see here.

467
00:30:29,910 --> 00:30:36,480
So to execute the count method, we create a prepared statement.

468
00:30:36,780 --> 00:30:41,940
So we call SQL, get SQL by annotation code operation that count.

469
00:30:42,090 --> 00:30:46,080
And our fallback is the get count cycle.

470
00:30:46,270 --> 00:30:52,590
Now I have a feeling that maybe I forgot to implement this in the people repository.

471
00:30:52,590 --> 00:30:59,610
And so the code fell back on this call here, which is now just an empty string, which reminds me we

472
00:30:59,610 --> 00:31:00,630
may want to.

473
00:31:00,870 --> 00:31:02,070
Let me jump into that real quick.

474
00:31:02,100 --> 00:31:06,450
Instead of returning empty strings, it's probably going to be better to actually throw an exception

475
00:31:06,450 --> 00:31:11,070
here because we don't really expect this to ever happen anyway.

476
00:31:11,160 --> 00:31:14,330
And if it does, this isn't what we really want.

477
00:31:14,340 --> 00:31:19,830
What we really should want is to just throw an exception in here.

478
00:31:20,070 --> 00:31:24,630
Now someone actually decides to override any of these methods, then that would be fine, right?

479
00:31:24,810 --> 00:31:30,360
But if they don't override these methods, probably the better thing to do here would be not to return

480
00:31:30,360 --> 00:31:32,730
a string, but instead to just throw an exception.

481
00:31:32,730 --> 00:31:34,560
And in fact, just for grins.

482
00:31:34,560 --> 00:31:37,590
Let's go ahead and just do that real quick and see.

483
00:31:37,740 --> 00:31:42,210
And then actually, before I even try to fix anything, I want to run these tests again, and I'll bet

484
00:31:42,480 --> 00:31:44,630
we will get the exceptions instead.

485
00:31:44,640 --> 00:31:45,000
OK?

486
00:31:45,270 --> 00:31:50,730
So maybe four right now will do I'll do all of these simultaneously with the multi cursor.

487
00:31:50,730 --> 00:31:52,110
So option shift.

488
00:31:52,350 --> 00:31:54,030
So I'm going to put a cursor here.

489
00:31:55,790 --> 00:32:07,880
And here and here and then instead of returning something, I'm going to say, throw new runtime exception

490
00:32:08,030 --> 00:32:17,450
and I'm going to embed a message in here to say something like sequel, not defined and semicolon.

491
00:32:17,570 --> 00:32:22,040
All right, so then escape to get out of the multi person business there.

492
00:32:22,400 --> 00:32:27,320
And now let's run this again, and I'll bet we're going to get that runtime exception.

493
00:32:29,070 --> 00:32:29,550
All right.

494
00:32:29,580 --> 00:32:31,590
Coming down here to the get count.

495
00:32:32,460 --> 00:32:33,450
Yeah, there it is.

496
00:32:33,840 --> 00:32:34,350
There it is.

497
00:32:34,350 --> 00:32:39,060
Sequel not defined so that's actually a better message anyway, because now I know exactly what the

498
00:32:39,060 --> 00:32:39,990
problem is, right?

499
00:32:40,140 --> 00:32:44,970
So I just didn't define the sequel for the get count properly.

500
00:32:45,090 --> 00:32:48,840
So let's jump over to let me close that down.

501
00:32:49,020 --> 00:32:58,440
Let's jump back over to the people repository, and let's see now where should that sequel annotation

502
00:32:58,440 --> 00:33:00,990
forgetting the count actually live?

503
00:33:01,000 --> 00:33:01,720
Ideally.

504
00:33:02,750 --> 00:33:08,970
Ah, so now I see why I failed to make a sequel annotation for the get count.

505
00:33:09,090 --> 00:33:11,940
There is no map or method for that, and that's fine.

506
00:33:12,090 --> 00:33:17,220
So really, truly, these sequel annotations can can be put anywhere, you know.

507
00:33:17,970 --> 00:33:21,090
So for now, I will just put it on this method here.

508
00:33:21,090 --> 00:33:24,720
Now, there is a little bit of potentially a design flaw in that.

509
00:33:24,930 --> 00:33:30,630
I was really intending to have these annotations live on the methods that use them.

510
00:33:30,870 --> 00:33:36,420
But in this case, there is no method here that is using the sequel to get the count.

511
00:33:36,450 --> 00:33:38,340
Yet we do have to specify it.

512
00:33:38,550 --> 00:33:42,900
So for right now, I'm just going to slap it right here on this method.

513
00:33:43,050 --> 00:33:46,410
Another good place to put it, though, might have been running the class.

514
00:33:47,190 --> 00:33:52,350
OK, so we'll just we'll just throw throw that right here at sequel.

515
00:33:52,350 --> 00:33:53,550
And let's see.

516
00:33:53,550 --> 00:33:58,080
We will reference the Count Select Count sequel.

517
00:33:58,830 --> 00:34:02,370
And with an operation type of count.

518
00:34:02,580 --> 00:34:03,240
There we go.

519
00:34:03,600 --> 00:34:04,020
All right.

520
00:34:04,290 --> 00:34:08,670
And let me open back up the tests and let's run the tests again.

521
00:34:09,830 --> 00:34:10,820
Hey, look at that.

522
00:34:11,090 --> 00:34:16,820
Now just the delete is failing, and for the same reason, I'm sure let's confirm it.

523
00:34:17,060 --> 00:34:17,320
Yeah.

524
00:34:17,390 --> 00:34:18,480
Sequel not defined.

525
00:34:18,750 --> 00:34:20,840
There's no sequel defined for deleting.

526
00:34:20,990 --> 00:34:25,250
OK, so let's just add that in as well at sequel.

527
00:34:27,100 --> 00:34:27,810
The lead.

528
00:34:29,810 --> 00:34:30,170
All right.

529
00:34:30,200 --> 00:34:36,500
So the sequel now, I thought we had written separate tests for testing both the regular delete and

530
00:34:36,500 --> 00:34:42,590
then the Delete Multi or whatever, but maybe we didn't so that that might be a a short sighted on my

531
00:34:42,590 --> 00:34:42,950
part.

532
00:34:43,820 --> 00:34:44,900
We'll check that in a minute.

533
00:34:45,230 --> 00:34:45,530
All right.

534
00:34:45,560 --> 00:34:46,730
Operation type.

535
00:34:46,730 --> 00:34:51,290
So this will be delete one, right?

536
00:34:51,620 --> 00:34:51,840
All right.

537
00:34:51,860 --> 00:34:52,910
Let's run the tests.

538
00:34:53,210 --> 00:34:53,880
There we go.

539
00:34:53,900 --> 00:34:59,660
So now everything's working, and maybe I will go ahead and replace these explicit strings here with

540
00:34:59,660 --> 00:35:01,670
just the reference to the constants.

541
00:35:01,670 --> 00:35:04,830
So this is find by I.D..

542
00:35:05,240 --> 00:35:05,600
All right.

543
00:35:05,600 --> 00:35:09,800
So I can just select all of that and then reference find by ID sequel.

544
00:35:10,080 --> 00:35:11,510
Let's run the tests.

545
00:35:13,110 --> 00:35:13,950
Looks good.

546
00:35:16,070 --> 00:35:16,530
All right.

547
00:35:16,550 --> 00:35:19,250
And this one is update.

548
00:35:19,910 --> 00:35:20,540
So.

549
00:35:23,740 --> 00:35:26,200
Update sequel run the tests.

550
00:35:27,980 --> 00:35:31,340
Looking good, and this one's already using it.

551
00:35:31,520 --> 00:35:37,970
OK, yep, so the lead in skills, so apparently I don't have an explicit test for testing that, I

552
00:35:37,970 --> 00:35:40,280
guess I'm a little surprised by that.

553
00:35:40,640 --> 00:35:41,230
All right.

554
00:35:41,240 --> 00:35:45,020
So we've got everything back up and running now.

555
00:35:45,140 --> 00:35:48,380
And let's just jump back over to the credit repository.

556
00:35:48,380 --> 00:35:50,060
Just kind of want to take another look at it?

557
00:35:50,360 --> 00:35:53,810
Oh, and I got an oddball message right here.

558
00:35:53,840 --> 00:35:56,750
Let me move that down to its brethren.

559
00:35:58,050 --> 00:35:59,760
I guess it can just go right here.

560
00:36:00,090 --> 00:36:00,480
Yeah.

561
00:36:00,510 --> 00:36:03,600
So this one should be like the others.

562
00:36:04,150 --> 00:36:04,980
Copy that.

563
00:36:06,130 --> 00:36:11,770
And technically, this these runtime exceptions would be a little nicer if they would specify in their

564
00:36:11,920 --> 00:36:13,000
error messages.

565
00:36:13,210 --> 00:36:15,640
What the attempted operation was.

566
00:36:15,640 --> 00:36:20,440
So that way you'd be able to pin it down even more easily than having to look at the stack trace.

567
00:36:20,860 --> 00:36:26,860
I may choose to leave that as an exercise for you, though, or we may in a later lesson, go ahead

568
00:36:26,860 --> 00:36:29,830
and do a better job with these exceptions, anyway.

569
00:36:30,000 --> 00:36:35,470
Yeah, and we've got a couple more down here also and here, boy got a lot of them.

570
00:36:36,690 --> 00:36:43,050
All right, so now one last thing, let's jump back over to our people repository, and let's just get

571
00:36:43,050 --> 00:36:45,070
rid of what we aren't using anymore.

572
00:36:45,090 --> 00:36:47,580
Rita forgot to do that a little bit earlier.

573
00:36:47,680 --> 00:36:47,930
Right.

574
00:36:47,950 --> 00:36:50,250
So all of that can go bye bye.

575
00:36:50,940 --> 00:36:52,140
Who I love.

576
00:36:52,290 --> 00:36:56,160
I can't tell you how much I love being able to delete code.

577
00:36:56,790 --> 00:36:58,320
It's very satisfying.

578
00:36:58,710 --> 00:37:04,620
And for me, being able to refactor and delete code, especially the code that I have to look at a lot,

579
00:37:05,070 --> 00:37:09,870
that's what helps me to feel like I'm really on the right path and I'm doing a good job with my code.

580
00:37:10,020 --> 00:37:13,860
Now, some of you may be thinking, well, really all you did was you just took all that code that was

581
00:37:13,860 --> 00:37:16,920
here and you just moved it into the crud repository.

582
00:37:17,100 --> 00:37:22,230
And in fact, the credit repository in some ways is even bigger than this class was.

583
00:37:22,410 --> 00:37:29,820
However, where you'll really start to see the value now is when we go create another repository, which

584
00:37:29,820 --> 00:37:32,160
is what this has all been leading towards.

585
00:37:32,490 --> 00:37:40,860
And in fact, in preparing this module on databases and working on this people repository, I had debated

586
00:37:40,860 --> 00:37:45,690
whether or not to create another repository by mostly just copying and pasting.

587
00:37:45,690 --> 00:37:49,020
And I hate hate, hate copy paste coding.

588
00:37:49,740 --> 00:37:50,940
Sometimes you need to do it.

589
00:37:50,970 --> 00:37:53,280
Sometimes it's just a practical thing to do.

590
00:37:53,610 --> 00:38:00,690
But in a case like this, there would have been quite a lot of duplicated code, and I cannot abide

591
00:38:00,690 --> 00:38:01,070
that.

592
00:38:01,080 --> 00:38:08,460
And so now when we get ready to create another repository, it should hopefully be a joy and a pleasure

593
00:38:08,460 --> 00:38:09,090
to do.

594
00:38:09,270 --> 00:38:16,470
And we shouldn't need to do very much because our credit repository from which we will extend should

595
00:38:16,470 --> 00:38:18,630
do most of the heavy lifting for us.

596
00:38:18,780 --> 00:38:24,600
And hopefully all we will mostly need to do is just supply the sequel statements, for the most part,

597
00:38:24,810 --> 00:38:28,140
implement a few methods and supply the SQL statements.

598
00:38:28,350 --> 00:38:32,550
And so with that, let's go ahead and close out this lesson, and I will see you in the next one.
