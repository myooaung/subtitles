1
00:00:00,390 --> 00:00:07,890
All right, so in the last lesson, we learned how to incorporate the bootstrap thesis framework into

2
00:00:07,920 --> 00:00:15,240
our static page, and then we used the bootstrap framework to incorporate a fairly decent looking table.

3
00:00:15,250 --> 00:00:16,200
It's simple, right?

4
00:00:16,440 --> 00:00:23,100
But we put a table in here and then we were able to populate the table with our data from the back end.

5
00:00:23,220 --> 00:00:28,800
You're going to hear me refer to this term back end a lot and a little later in this lesson, I will

6
00:00:28,800 --> 00:00:32,790
go into a little bit more depth about what I'm specifically, what I mean by that.

7
00:00:32,910 --> 00:00:37,260
The back end, though, you've heard me kind of say already that I basically just am referring to the

8
00:00:37,260 --> 00:00:39,640
Java code that we are using.

9
00:00:39,660 --> 00:00:40,020
OK.

10
00:00:40,200 --> 00:00:42,750
But I'll give a little more nuance to it later.

11
00:00:42,990 --> 00:00:43,230
All right.

12
00:00:43,240 --> 00:00:47,400
So now in this lesson, there are a couple of other things that I want to do first right off the bat.

13
00:00:47,580 --> 00:00:55,710
The first one is let's get rid of these additional static or dummy table rows here, OK?

14
00:00:55,950 --> 00:01:01,500
Per my discussion earlier, where I said the one of the nice things about using Time-Life is that we

15
00:01:01,500 --> 00:01:08,580
can work hand in hand with a web designer or somebody who's delivering the HTML to us already looking

16
00:01:08,580 --> 00:01:12,150
beautiful, but we may have to go back and forth with them.

17
00:01:12,300 --> 00:01:17,700
So they would prefer that when we modify these files and then they try to use them again to look at

18
00:01:17,700 --> 00:01:19,470
them in whatever tool they're using.

19
00:01:19,770 --> 00:01:23,620
We haven't like broken everything for them, so we don't want them to break anything for us.

20
00:01:23,640 --> 00:01:26,940
And we also shouldn't be breaking anything for them, right?

21
00:01:27,150 --> 00:01:34,860
So how can I leave these static records are these static rows here, but I don't want to see them in

22
00:01:34,860 --> 00:01:36,660
my version of this code, right?

23
00:01:36,690 --> 00:01:37,440
How can we do that?

24
00:01:37,570 --> 00:01:45,570
Well, Time-Life has an attribute that we can use to do exactly that to just get rid of certain HTML

25
00:01:45,570 --> 00:01:49,770
elements that we'd no longer want to see when we are running in Java.

26
00:01:50,070 --> 00:01:57,900
And that attribute is called T-H Colon Remove, and we need to specify something here.

27
00:01:57,900 --> 00:01:59,880
We need to tell it well, how much to remove.

28
00:02:00,000 --> 00:02:05,520
And in this case, I wanted to remove everything contained within this element.

29
00:02:05,640 --> 00:02:08,790
By the way, let me introduce another term that I just use twice now.

30
00:02:08,790 --> 00:02:13,780
So this tag here, a another word for it would be an element.

31
00:02:13,800 --> 00:02:14,160
OK?

32
00:02:14,520 --> 00:02:20,910
And so this TR element here contains all of these child elements underneath it.

33
00:02:21,090 --> 00:02:29,550
And so when I specify to remove all I'm saying, get rid of the table row element and everything contained

34
00:02:29,550 --> 00:02:30,120
therein.

35
00:02:30,120 --> 00:02:37,170
So that will result in all of this being removed, the whole entire table row and all of the data cells

36
00:02:37,170 --> 00:02:38,310
inside of it, OK.

37
00:02:38,430 --> 00:02:42,360
So I can do that and then I need to do it again right here as well.

38
00:02:46,070 --> 00:02:48,800
Oh, all right, and so if I restart.

39
00:02:51,890 --> 00:02:52,530
There we go.

40
00:02:52,550 --> 00:02:57,290
So now those are gone for for us when we're running in Java.

41
00:02:57,410 --> 00:03:04,550
But if I were to open up this people that HTML file without a Java application server parsing it using

42
00:03:04,550 --> 00:03:09,460
Time-Life and I just opened it up statically in a web browser, it would look as it did before.

43
00:03:09,470 --> 00:03:13,880
And in fact, let's see if I can do that real quick here if I jump back over here.

44
00:03:13,910 --> 00:03:14,300
Let's see.

45
00:03:14,300 --> 00:03:16,700
I might be able to open this.

46
00:03:18,190 --> 00:03:23,440
In a static browser, yeah, now you can't see what I'm looking at here because it's running off the

47
00:03:23,440 --> 00:03:29,980
page, but I'm going to tell intelligence to open this file up.

48
00:03:30,550 --> 00:03:31,160
Yeah, there we go.

49
00:03:31,180 --> 00:03:32,150
Well, you can see that.

50
00:03:32,170 --> 00:03:38,980
OK, so that just I just told Intel the data open up this file in an external web browser on its own,

51
00:03:38,980 --> 00:03:42,340
so it's not being interpreted the time timely.

52
00:03:42,520 --> 00:03:43,220
And Java?

53
00:03:43,240 --> 00:03:43,690
OK.

54
00:03:43,810 --> 00:03:46,360
It's just being served up as a static page.

55
00:03:46,570 --> 00:03:52,960
And now you can see all of the original markup that was in that little snippet of the email that I originally

56
00:03:52,960 --> 00:03:55,450
copied from the bootstrap documentation.

57
00:03:55,480 --> 00:03:55,800
OK.

58
00:03:55,900 --> 00:04:00,400
So if the designer had given me this, this is what they're still going to see.

59
00:04:00,490 --> 00:04:07,230
Even though I've actually come in here and marked it up quite a bit with extra Java time leafy stuff,

60
00:04:07,240 --> 00:04:07,600
right?

61
00:04:07,630 --> 00:04:09,100
But they don't have to sell it right now.

62
00:04:09,100 --> 00:04:12,700
They will see the my markup changes, and they probably won't like that either.

63
00:04:12,700 --> 00:04:15,950
But at least it doesn't affect how everything displays.

64
00:04:15,970 --> 00:04:16,330
All right.

65
00:04:16,570 --> 00:04:18,910
So just wanted to show you that and make that point.

66
00:04:19,270 --> 00:04:20,530
This is quite great.

67
00:04:20,950 --> 00:04:21,370
All right.

68
00:04:21,400 --> 00:04:21,940
Let's see.

69
00:04:21,970 --> 00:04:27,070
So now the next point that I want to show you is I don't like these dates.

70
00:04:27,790 --> 00:04:30,220
I want these dates to be in a different format.

71
00:04:30,370 --> 00:04:33,970
So let's talk a little bit about how I could change this.

72
00:04:34,060 --> 00:04:36,640
There are a few options that I have here.

73
00:04:37,420 --> 00:04:43,930
So one option that I could use to change these dates would be and this would be one that you'd know

74
00:04:43,930 --> 00:04:46,850
how to do without me teaching you any new techniques at all.

75
00:04:47,230 --> 00:04:53,200
You could just go into the people class, so I will jump over there or I'm sorry, the person class,

76
00:04:53,200 --> 00:04:53,500
right?

77
00:04:53,650 --> 00:04:58,660
You could come into the person class and do you know what I'm going to say?

78
00:04:59,050 --> 00:05:06,670
You could just add in a new getter method that returns the date of birth as a formatted string, right?

79
00:05:06,700 --> 00:05:07,600
You certainly could do that.

80
00:05:07,600 --> 00:05:09,190
In fact, let's just do that real quick.

81
00:05:10,480 --> 00:05:17,920
So I'm going to make a new method and it's going to return string and we'll call it get formatted Dobby,

82
00:05:19,090 --> 00:05:24,670
and then we will return and I will make a new date time format or.

83
00:05:25,810 --> 00:05:30,910
Instance, and I will I'll do a custom thing, let's see of pattern.

84
00:05:33,020 --> 00:05:39,320
And I will specify a pattern, and so let's have a pattern of like the month spelled out, followed

85
00:05:39,320 --> 00:05:44,730
by the de comma and then the year in four digits.

86
00:05:44,750 --> 00:05:45,160
OK.

87
00:05:45,770 --> 00:05:52,100
And then we can do a format and then pass in our date of birth field just like that.

88
00:05:52,190 --> 00:05:52,580
OK.

89
00:05:52,850 --> 00:05:53,110
All right.

90
00:05:53,120 --> 00:05:56,960
So that would that would format the date of birth.

91
00:05:58,270 --> 00:06:04,420
As a string, and then we need to jump over to our template here, and then we'll need to tell it now.

92
00:06:04,660 --> 00:06:10,420
Don't get the date of birth from the Dobby field anymore, because that is an actual date time object,

93
00:06:10,420 --> 00:06:10,720
right?

94
00:06:10,900 --> 00:06:11,240
All right.

95
00:06:11,240 --> 00:06:12,520
It's a local date, rather.

96
00:06:12,880 --> 00:06:19,810
We want you now to get this from the getter method called formatted date of birth.

97
00:06:19,960 --> 00:06:23,590
OK, so let's restart and see what that does.

98
00:06:25,210 --> 00:06:26,680
Yeah, so that works right.

99
00:06:26,800 --> 00:06:29,170
So that was pretty easy to do now.

100
00:06:30,080 --> 00:06:32,600
That was easy to do, but don't do that.

101
00:06:32,900 --> 00:06:33,710
This is bad.

102
00:06:34,760 --> 00:06:40,550
And so now let me go into a long explanation, hopefully won't be too long, but let me go into an explanation

103
00:06:40,550 --> 00:06:47,630
of why this isn't great to do and to explain this, I'm going to have to bring up some pretty pictures.

104
00:06:48,110 --> 00:06:48,580
All right.

105
00:06:48,590 --> 00:06:58,730
So here I have painstakingly created this possibly overly complex looking diagram, but it will serve

106
00:06:58,730 --> 00:07:04,100
hopefully many purposes throughout our discussion of these concepts.

107
00:07:04,940 --> 00:07:07,820
So what I am showing here is a number of things.

108
00:07:08,000 --> 00:07:09,560
We've got our web browser here.

109
00:07:09,770 --> 00:07:14,330
I'm showing how the web browser sends requests to our application.

110
00:07:14,330 --> 00:07:17,840
So all of this stuff here represents our application.

111
00:07:18,080 --> 00:07:22,880
I suppose I could have put another box around all of that and said application, but that's all right.

112
00:07:22,880 --> 00:07:24,110
I can just use my words.

113
00:07:24,530 --> 00:07:24,830
All right.

114
00:07:24,830 --> 00:07:29,660
So this all represents the application and then the application responds to that request.

115
00:07:29,660 --> 00:07:35,930
Eventually with a response, which is the HTML that should be rendered on the web browser page.

116
00:07:35,930 --> 00:07:38,030
In that particular case, at least, OK.

117
00:07:38,240 --> 00:07:44,730
But what I really want to talk about right now is the idea of architecture of your application.

118
00:07:44,780 --> 00:07:49,520
OK, now very briefly mention this a few times throughout this course.

119
00:07:49,520 --> 00:07:50,630
Very, very briefly.

120
00:07:50,750 --> 00:07:53,450
But now we'll go a little deeper into this conversation, OK?

121
00:07:53,750 --> 00:08:01,520
So in application development and particularly in web application development, there are patterns that

122
00:08:01,520 --> 00:08:08,370
have evolved over time that inform us on how we might best architect our applications.

123
00:08:08,390 --> 00:08:08,760
OK?

124
00:08:09,050 --> 00:08:14,900
And one of these patterns that has become particularly well known in the web application development

125
00:08:14,900 --> 00:08:18,380
world is known as the three tier architecture.

126
00:08:18,410 --> 00:08:27,860
OK, so three tier architecture and what that basically refers to is a way of grouping up your application

127
00:08:27,860 --> 00:08:32,480
code into three layers, if you will, or tiers.

128
00:08:32,990 --> 00:08:37,310
You will generally have the presentation layer, which is this layer here.

129
00:08:37,340 --> 00:08:40,490
OK, so I'm showing these three layers kind of horizontally.

130
00:08:40,520 --> 00:08:40,790
OK.

131
00:08:40,820 --> 00:08:42,830
You could have them vertically are horizontally.

132
00:08:42,830 --> 00:08:44,170
It's all just concepts, right?

133
00:08:44,180 --> 00:08:50,740
But so I've got a presentation layer here, which for our purposes means web stuff.

134
00:08:50,750 --> 00:08:52,220
OK, do the web stuff.

135
00:08:52,250 --> 00:08:57,560
OK, then we've got a business logic or an application logic layer.

136
00:08:57,770 --> 00:09:03,260
It'll be called different things in different documentation, but the word logic will often be there.

137
00:09:03,290 --> 00:09:03,710
OK.

138
00:09:03,860 --> 00:09:09,110
So you'll have this layer here and then you'll have often a data access layer.

139
00:09:09,110 --> 00:09:14,600
So if you're going to be talking to a database code that knows how to talk to the database would be

140
00:09:14,600 --> 00:09:15,170
here.

141
00:09:15,350 --> 00:09:21,560
Or if you're getting data from some external sources, like some web service.

142
00:09:21,560 --> 00:09:26,870
If you don't know what I'm talking about, just think of servers on the internet that don't return pretty

143
00:09:26,870 --> 00:09:33,450
pictures in a web page, but instead they just return raw data that other computers can consume.

144
00:09:33,470 --> 00:09:33,830
OK.

145
00:09:34,160 --> 00:09:41,240
So maybe like the Weather Channel might have a web service that that you can grab data from to find

146
00:09:41,240 --> 00:09:48,130
out what the weather is in a given zip code or something like that, or Yahoo or what is it financed?

147
00:09:48,320 --> 00:09:55,040
Yahoo.com might expose a web service that gives you real time stock information.

148
00:09:55,160 --> 00:09:59,360
If you if you send them a ticker symbol or something like that, OK?

149
00:09:59,750 --> 00:10:04,850
So this is a depiction of the standard three tier architecture.

150
00:10:05,510 --> 00:10:14,450
Now our domain model, such as the person class, generally belongs to the business logic or service

151
00:10:14,450 --> 00:10:15,650
layer or whatever you want to call it.

152
00:10:15,650 --> 00:10:17,900
This this middle layer here, OK?

153
00:10:18,200 --> 00:10:26,000
However, as you see that I have depicted it here, it can often sort of transcend multiple layers.

154
00:10:26,330 --> 00:10:33,830
So even though I and many developers will consider that the domain classes belong to the business logic

155
00:10:33,830 --> 00:10:42,140
layer, they can make appearances in the presentation layer and or the data access layer as well.

156
00:10:42,290 --> 00:10:43,580
So here's the problem.

157
00:10:43,640 --> 00:10:50,900
If the domain model belongs to this service layer here, it could be considered somewhat inappropriate

158
00:10:50,900 --> 00:10:59,360
to make meaningful changes to your domain model purely to satisfy what you need or want in the presentation

159
00:10:59,360 --> 00:10:59,840
layer.

160
00:10:59,870 --> 00:11:00,320
OK.

161
00:11:00,620 --> 00:11:02,240
It's not the end of the world to do.

162
00:11:02,420 --> 00:11:04,490
We really just did it just now.

163
00:11:04,670 --> 00:11:09,680
But you should kind of think about such changes before you make them.

164
00:11:10,280 --> 00:11:16,130
So in our case, we wanted to make what I would argue is purely a cosmetic change.

165
00:11:16,160 --> 00:11:16,560
OK?

166
00:11:16,880 --> 00:11:20,480
It serves no functional purpose whatsoever.

167
00:11:20,480 --> 00:11:25,940
It's purely just I prefer to see dates look this way rather than some other way, OK?

168
00:11:26,060 --> 00:11:27,380
It's it's cosmetic.

169
00:11:27,410 --> 00:11:27,740
OK.

170
00:11:28,040 --> 00:11:28,970
So according.

171
00:11:29,080 --> 00:11:30,790
Medic change of this sort.

172
00:11:31,060 --> 00:11:38,260
Definitely falls within the presentation layer, OK, it's it's how we're presenting things, OK?

173
00:11:38,440 --> 00:11:38,880
It has.

174
00:11:39,340 --> 00:11:44,050
It doesn't necessarily have anything to do with actual functionality at all.

175
00:11:44,110 --> 00:11:48,580
It's just making things pretty right or making things look the way that you want them to look.

176
00:11:48,860 --> 00:11:56,080
So ideally, if changes are needed within our application to make data look a particular way and that

177
00:11:56,080 --> 00:12:02,980
data happens to be coming from our domain model, which belongs to the business logic layer, it is

178
00:12:02,980 --> 00:12:10,330
generally preferred that we make such changes somewhere up in here in the web layer and not down here

179
00:12:10,330 --> 00:12:12,140
in the business logic layer.

180
00:12:12,160 --> 00:12:13,480
If we can help it.

181
00:12:13,660 --> 00:12:17,800
So having said that, the question becomes, Well, how do you do that right?

182
00:12:17,890 --> 00:12:25,330
How do we make the date of birth field of the domain model class person which belongs here?

183
00:12:25,360 --> 00:12:32,020
How do we make that field displayed differently without making any changes to the person class itself?

184
00:12:32,680 --> 00:12:37,690
Thankfully, there are actually a number of ways to do exactly that, and now I will show you some.

185
00:12:38,140 --> 00:12:40,570
All right, so here we are back in the ADC again.

186
00:12:40,780 --> 00:12:43,300
So first thing I want to do is get rid of this.

187
00:12:43,810 --> 00:12:45,600
So don't ever do this.

188
00:12:45,610 --> 00:12:46,930
Don't don't change.

189
00:12:46,930 --> 00:12:53,950
Don't add methods and change things in your domain classes just to make things pretty if you know some

190
00:12:53,950 --> 00:12:55,240
alternative ways of doing it.

191
00:12:55,630 --> 00:12:58,510
If if, all right, so I'm going to get rid of this.

192
00:12:59,970 --> 00:13:03,630
And then I will jump back over here to the template.

193
00:13:04,830 --> 00:13:05,700
And.

194
00:13:06,820 --> 00:13:10,270
Why did I do that right there, and I will put this back as it was?

195
00:13:13,820 --> 00:13:14,870
OK, so there we are.

196
00:13:14,990 --> 00:13:20,660
So the first alternative technique that I will show you has to do with the spring framework itself,

197
00:13:21,110 --> 00:13:26,300
the spring framework knows that this can be a problem, and so they have given us great solutions for

198
00:13:26,300 --> 00:13:26,900
solving it.

199
00:13:27,230 --> 00:13:32,900
So one of these solutions is to define what the spring framework calls a formatter.

200
00:13:33,140 --> 00:13:33,590
OK.

201
00:13:33,980 --> 00:13:36,920
And we just created a date time format for ourselves.

202
00:13:36,920 --> 00:13:40,350
But now we're going to make use of a spring formatter.

203
00:13:40,400 --> 00:13:40,790
OK.

204
00:13:41,180 --> 00:13:46,430
And the way that we can do this is, well, the way that I'm going to do it, at least, is I'm going

205
00:13:46,430 --> 00:13:49,710
to first create a new package over here.

206
00:13:49,730 --> 00:13:50,720
Let's see.

207
00:13:50,720 --> 00:13:56,480
I guess I'm going to just highlight the web dot controller and do a command in and I'm going to create

208
00:13:56,480 --> 00:13:57,650
a new package.

209
00:13:58,190 --> 00:14:04,510
Now, I don't want this under controller, but I do want it under web and I'm going to call this form

210
00:14:04,520 --> 00:14:05,120
matter.

211
00:14:06,290 --> 00:14:13,310
OK, then I'm going to create a new class under here, new Java class, and I'm going to call it local

212
00:14:13,310 --> 00:14:15,680
date format or.

213
00:14:16,490 --> 00:14:25,010
And now I'm going to specify that this class is going to implement an interface called formatter.

214
00:14:25,310 --> 00:14:32,060
And I want to make sure that I'm specifying this from the org that spring framework dot format package.

215
00:14:32,090 --> 00:14:35,960
OK, so I want to use the spring framework notion of a format letter now.

216
00:14:35,960 --> 00:14:38,250
It's just an interface, so it doesn't actually do anything.

217
00:14:38,270 --> 00:14:38,600
OK?

218
00:14:38,840 --> 00:14:44,830
Notice, however, though, that it is a generic interface, meaning I can specify a data type, a set

219
00:14:44,840 --> 00:14:46,430
to be associated with this.

220
00:14:46,670 --> 00:14:49,220
Now, can you guess what that data type should be?

221
00:14:49,310 --> 00:14:49,610
OK.

222
00:14:49,640 --> 00:14:50,210
Did you get it?

223
00:14:50,840 --> 00:14:55,400
So the data type should be, or the generic data type should be local date.

224
00:14:57,260 --> 00:14:57,620
All right.

225
00:14:57,740 --> 00:15:03,140
So we're saying that we want a formatter that knows how to format a local date and what a format is

226
00:15:03,140 --> 00:15:09,290
meant to do in the spring framework is to take a type such as local date and give the spring framework

227
00:15:09,590 --> 00:15:13,310
a way of converting that type into a string.

228
00:15:13,490 --> 00:15:14,390
That's all it is for.

229
00:15:14,420 --> 00:15:14,780
OK.

230
00:15:14,840 --> 00:15:17,060
Converting some type into a string.

231
00:15:17,360 --> 00:15:22,340
Now I'm getting the red squiggles because this is an interface and I haven't implemented the interface

232
00:15:22,340 --> 00:15:27,620
methods yet, so I'm going to do an option return and choose implement methods.

233
00:15:27,830 --> 00:15:33,410
And now it's telling me I can implement these two methods here pass and print.

234
00:15:33,620 --> 00:15:34,020
All right.

235
00:15:34,040 --> 00:15:35,210
And so.

236
00:15:36,400 --> 00:15:42,910
I will go ahead and click, OK, now what these two methods are for is for going from a string to our

237
00:15:42,910 --> 00:15:45,460
local date and then from a local date to a string.

238
00:15:45,490 --> 00:15:50,950
OK, now the only one that I really care about right now is the print method, which goes from a local

239
00:15:50,950 --> 00:15:51,820
date to a string.

240
00:15:51,820 --> 00:15:53,550
So let's start there, OK?

241
00:15:53,980 --> 00:15:57,920
And for now, we'll basically just do the same thing that we already did in that.

242
00:15:57,940 --> 00:16:01,180
What is the method that we just created a bit ago, right?

243
00:16:01,180 --> 00:16:05,290
So I will create another date time formatter.

244
00:16:06,460 --> 00:16:07,090
Dot.

245
00:16:08,080 --> 00:16:09,250
Of pattern.

246
00:16:11,080 --> 00:16:15,100
And then the men d comma y y y y.

247
00:16:17,360 --> 00:16:25,940
And then format and then object like so and I got that object because that's coming from up here, that's

248
00:16:25,940 --> 00:16:28,970
going to be passed in from the spring framework itself.

249
00:16:29,190 --> 00:16:35,330
Then it will be a local date because this is a generic data type right now to go the other way.

250
00:16:35,570 --> 00:16:36,620
We can do that as well.

251
00:16:36,620 --> 00:16:39,200
And you've had plenty of practice at doing this, I think.

252
00:16:39,260 --> 00:16:39,620
Let's see.

253
00:16:39,650 --> 00:16:40,820
So there's a couple of ways we could do it.

254
00:16:40,820 --> 00:16:44,090
I could just use the date, time format or again in that way.

255
00:16:44,090 --> 00:16:55,790
Or I could also create a local date dot pass, pass that text and then pass in an instance of a date

256
00:16:55,790 --> 00:16:57,140
time formatter.

257
00:16:57,500 --> 00:17:00,680
Now, for now, I will use that same format.

258
00:17:00,680 --> 00:17:05,420
But however, you can already see that I'm about to duplicate right and we shouldn't duplicate.

259
00:17:05,430 --> 00:17:12,680
So what I really should do is grab all of that and extract that out into a field of this class so that

260
00:17:12,680 --> 00:17:15,350
I can reuse it across both of these methods, right?

261
00:17:15,560 --> 00:17:21,980
So I will do an option command f four field and it's ask me, where do I want to initialize it now?

262
00:17:21,980 --> 00:17:25,970
I don't want to initialize it in this method because then it won't be initialized when I use it up here

263
00:17:25,970 --> 00:17:26,870
in the pass method.

264
00:17:27,170 --> 00:17:33,520
So instead, I will change this to I can go ahead and just have it initialized in the field declaration

265
00:17:33,530 --> 00:17:36,290
in this particular case, because I can do it in one line.

266
00:17:36,560 --> 00:17:36,980
OK.

267
00:17:37,340 --> 00:17:39,140
And then I will hit return.

268
00:17:39,560 --> 00:17:40,040
All right.

269
00:17:40,070 --> 00:17:42,860
And so there's our date time format right there.

270
00:17:43,070 --> 00:17:49,040
And now I can just refer to that guy eight time format or like.

271
00:17:49,040 --> 00:17:49,520
So.

272
00:17:49,550 --> 00:17:49,970
OK.

273
00:17:50,300 --> 00:17:52,550
And I don't have all of that duplication.

274
00:17:52,730 --> 00:17:56,420
Now, that's not quite enough in order to actually use this.

275
00:17:56,600 --> 00:17:58,340
I will need to annotated.

276
00:18:01,530 --> 00:18:08,460
With that component, now, what that's going to do is let me explain something else here real quick.

277
00:18:09,270 --> 00:18:11,970
The spring framework is highly dynamic.

278
00:18:12,270 --> 00:18:19,800
It is able to find what are called beans, which are really just Java classes or instances of Java classes,

279
00:18:19,810 --> 00:18:20,010
OK?

280
00:18:20,030 --> 00:18:26,790
It's able to find Java classes on what is called the class path, and that is just where all of the

281
00:18:27,180 --> 00:18:29,490
Java classes live.

282
00:18:29,610 --> 00:18:37,650
When your program starts up, Java finds all the classes that make up your application and it loads

283
00:18:37,650 --> 00:18:39,860
them into memory essentially, OK.

284
00:18:40,110 --> 00:18:47,550
Now, spring has the ability to search throughout all of those classes and look for classes that have

285
00:18:47,550 --> 00:18:51,570
special annotations that are meaningful to the spring framework.

286
00:18:51,720 --> 00:18:54,810
And one of those special classes is component.

287
00:18:55,380 --> 00:19:03,690
And when it finds such classes that are marked with component or controller, or there are lots of lots

288
00:19:03,690 --> 00:19:08,710
of annotations, service will probably look at that a little later repository.

289
00:19:08,760 --> 00:19:14,880
Things of this sort when it finds those kinds of classes, it can also check to see if those classes

290
00:19:14,880 --> 00:19:18,960
implement interesting interfaces that it knows about.

291
00:19:18,960 --> 00:19:20,280
And it is the spring framework.

292
00:19:20,350 --> 00:19:20,640
OK.

293
00:19:20,940 --> 00:19:27,720
So in this case, this local data formatter is implementing a spring framework interface called formatter.

294
00:19:28,050 --> 00:19:30,220
Spring knows what to do with formats.

295
00:19:30,240 --> 00:19:36,870
It knows that whenever we are here, let me let me jump back over to the controller here whenever we

296
00:19:36,870 --> 00:19:45,420
have a controller that is putting a bunch of data inside of a model so that that data can be relayed

297
00:19:45,720 --> 00:19:50,430
back to a web page or a templating engine in this case.

298
00:19:51,000 --> 00:19:57,600
What spring will do in this case is it will see that we have registered a formatter for local dates,

299
00:19:58,080 --> 00:20:04,080
and so it will realize that these date of birth fields here are of type local date.

300
00:20:05,070 --> 00:20:13,710
And so it can actually pass these local date instances into our newly created formatter.

301
00:20:13,830 --> 00:20:19,500
And it will call the print method, and it will allow our print method to convert these into strings

302
00:20:19,500 --> 00:20:26,280
for us so that they can be displayed more nicely in, in this case, in our template.

303
00:20:26,370 --> 00:20:26,850
OK.

304
00:20:27,150 --> 00:20:33,420
Without us having to modify the person class directly, that's the whole point, right?

305
00:20:33,630 --> 00:20:39,000
So we can get these formatted arbitrarily however we like, without having to modify the underlying

306
00:20:39,000 --> 00:20:41,190
domain class, which is person.

307
00:20:41,220 --> 00:20:41,580
OK.

308
00:20:42,000 --> 00:20:47,520
So we need to jump over to the timely template here and now.

309
00:20:47,520 --> 00:20:52,320
This date of birth filled here, person that dob we need to tell time leaf.

310
00:20:52,470 --> 00:20:56,760
We no longer want to display the date of birth filled directly.

311
00:20:57,000 --> 00:21:04,770
We now want timely to ask the spring framework to convert this field for us.

312
00:21:04,800 --> 00:21:05,210
OK.

313
00:21:05,280 --> 00:21:10,500
And the way we can do that is to simply select all of this and then wrap it inside of one more set of

314
00:21:10,500 --> 00:21:11,590
curly braces.

315
00:21:11,610 --> 00:21:20,610
So having a field wrapped inside a two curly braces tells Time-Life to ask the spring framework to perform

316
00:21:20,610 --> 00:21:25,140
a conversion of some sort on that field.

317
00:21:25,200 --> 00:21:25,680
OK.

318
00:21:25,980 --> 00:21:32,280
And that's where our formatter class will get an opportunity to spring into action and do what it does

319
00:21:32,280 --> 00:21:36,750
best, which is to convert a local date into a string.

320
00:21:36,780 --> 00:21:37,170
OK.

321
00:21:37,290 --> 00:21:39,120
So if we restart now?

322
00:21:41,790 --> 00:21:47,220
Look at that, we get the same output, the same nice output that we wanted before.

323
00:21:47,400 --> 00:21:52,970
However, now this time we didn't have to go change the underlying person class.

324
00:21:52,980 --> 00:21:53,370
OK?

325
00:21:53,760 --> 00:21:54,010
All right.

326
00:21:54,030 --> 00:21:56,060
Now there's one other way that we could have done this.

327
00:21:56,070 --> 00:21:59,760
I'm going to just mention it, but we're not going to actually do it the other way.

328
00:21:59,760 --> 00:22:02,160
We could do this purely with timely itself.

329
00:22:02,160 --> 00:22:07,500
So the timely framework has all kinds of capabilities built right into it.

330
00:22:07,650 --> 00:22:08,640
And one of those.

331
00:22:08,940 --> 00:22:13,680
So if I come over here to the documentation down at the bottom in the appendix, there are all kinds

332
00:22:13,680 --> 00:22:19,440
of functions and things that we can do, and it's got functions for doing date stuff so we could do

333
00:22:19,440 --> 00:22:19,590
it.

334
00:22:19,590 --> 00:22:27,540
Dates dot format like this and we can specify format strings much the same as we are doing with our

335
00:22:27,720 --> 00:22:29,510
date time for matters, right?

336
00:22:29,520 --> 00:22:36,540
So you got that right there, you're passing in a date object and then the format that you want.

337
00:22:36,570 --> 00:22:36,960
OK.

338
00:22:37,060 --> 00:22:38,290
So we could do that too.

339
00:22:38,400 --> 00:22:40,620
Not going to bother with it, though, but I'm just showing you.

340
00:22:40,620 --> 00:22:42,610
That's yet another way that you could do this.

341
00:22:42,630 --> 00:22:42,930
OK.

342
00:22:43,050 --> 00:22:44,700
So you got lots of options there.

343
00:22:45,450 --> 00:22:45,930
All right.

344
00:22:45,930 --> 00:22:47,640
Let's jump back over.

345
00:22:48,120 --> 00:22:48,570
OK.

346
00:22:48,600 --> 00:22:53,460
So now why don't you try formatting the salaries?

347
00:22:53,490 --> 00:22:59,850
OK, now that you've seen the basics of this, can you get that salary filled to format in whatever

348
00:22:59,850 --> 00:23:00,630
way you like?

349
00:23:00,870 --> 00:23:02,400
So take a moment to do that.

350
00:23:03,640 --> 00:23:03,970
OK.

351
00:23:04,000 --> 00:23:09,040
Did you get it all right, so I will do this now as well, and we're going to get a little bonus lesson

352
00:23:09,040 --> 00:23:13,690
here, something that we that I haven't hadn't been able to show you much because it wouldn't have made

353
00:23:13,690 --> 00:23:15,950
much sense until we got to the browser here.

354
00:23:15,970 --> 00:23:19,920
OK, so we're going to do the same basic approach, basic approach.

355
00:23:19,930 --> 00:23:26,230
In fact, I will go ahead and just start off with the template here and wrap that inside of the curly

356
00:23:26,230 --> 00:23:26,910
braces.

357
00:23:26,920 --> 00:23:29,590
OK, now right now, that's not going to do anything.

358
00:23:29,590 --> 00:23:31,120
So if I refresh.

359
00:23:33,720 --> 00:23:36,120
Yeah, no real change there, right?

360
00:23:36,420 --> 00:23:38,970
Because I don't have a format or declared yet.

361
00:23:39,330 --> 00:23:39,750
All right.

362
00:23:39,960 --> 00:23:46,290
But I will go ahead and create one now, so I'm going to come up here to format our new Java class.

363
00:23:46,290 --> 00:23:53,040
In this time, I will do a big decimal format or because that was the underlying data type.

364
00:23:53,340 --> 00:23:53,640
All right.

365
00:23:53,670 --> 00:24:01,050
And this implements for matter of big decimal thermal.

366
00:24:02,300 --> 00:24:08,570
And we will import the the big decimal class and then the formatter, and then we will implement the

367
00:24:08,570 --> 00:24:12,000
methods there as well and let me make some room.

368
00:24:12,080 --> 00:24:14,090
And here's the one that I really care about.

369
00:24:14,090 --> 00:24:24,320
And so for this one, I will create a no format under Java that text no format, Typekit currency instance.

370
00:24:24,350 --> 00:24:29,870
Now, one thing that we haven't spent much time really looking at because it didn't make a whole lot

371
00:24:29,870 --> 00:24:31,760
of sense until now.

372
00:24:32,240 --> 00:24:35,310
We've done this get currency instance bit a lot.

373
00:24:35,600 --> 00:24:41,630
However, you will notice there's another version of the get currency instance, which takes a low cal.

374
00:24:41,660 --> 00:24:42,140
OK.

375
00:24:42,320 --> 00:24:45,230
And up until now, we didn't have a whole lot of need for that.

376
00:24:45,240 --> 00:24:49,760
I have mentioned it briefly, but we just didn't have a great way to really play around with this.

377
00:24:49,760 --> 00:24:51,320
But now we're about to.

378
00:24:51,530 --> 00:24:53,000
So what I'm going to have you do.

379
00:24:53,060 --> 00:24:56,990
You may not have done this, and that's fine if you didn't, but now you have a reason to.

380
00:24:57,230 --> 00:25:03,110
I'm going to actually select that version of the get currency instance because if you notice up here,

381
00:25:03,230 --> 00:25:08,750
we actually have this thing called low cal that's being passed into this method and we can actually

382
00:25:08,990 --> 00:25:13,460
pass that down into the get currency instance method here.

383
00:25:13,640 --> 00:25:17,600
And then we can proceed with the rest of what we would normally do, which is the call format.

384
00:25:17,750 --> 00:25:21,560
And then we can pass in our big decimal, which is this object instance here.

385
00:25:23,560 --> 00:25:24,820
Like so now.

386
00:25:25,890 --> 00:25:33,720
This low cal is aware of what low cal, what area of the world your browser is in.

387
00:25:33,840 --> 00:25:34,350
OK?

388
00:25:34,890 --> 00:25:40,710
In your browser is actually capable of sending that low cal information every time it makes a request

389
00:25:40,710 --> 00:25:47,220
back to the web server or application server or, in this case, our application and the spring framework.

390
00:25:47,220 --> 00:25:54,060
Spring MVC specifically knows how to grab hold of that low cal information and make that available to

391
00:25:54,060 --> 00:25:55,800
us in methods like this.

392
00:25:55,980 --> 00:26:03,750
What this means is if you are in the United States or North America and you're running this application

393
00:26:03,750 --> 00:26:10,280
on a browser and you format the salary using this code, you will get that well here.

394
00:26:10,290 --> 00:26:11,860
Let's just go ahead and run it and see.

395
00:26:11,880 --> 00:26:13,920
So let's let's annotate this.

396
00:26:14,070 --> 00:26:15,120
Remember that right?

397
00:26:15,120 --> 00:26:17,280
We have to annotate this as a component.

398
00:26:17,400 --> 00:26:18,870
OK, there we go.

399
00:26:18,960 --> 00:26:20,370
And then let's restart.

400
00:26:22,370 --> 00:26:24,440
Hey, there we go.

401
00:26:24,560 --> 00:26:29,210
And now we've got money formatted properly for North America, right?

402
00:26:29,750 --> 00:26:30,950
That's what I wanted.

403
00:26:32,030 --> 00:26:36,890
But now, if you're following along with me and you don't live in North America, but you did all of

404
00:26:36,890 --> 00:26:40,970
these steps, you're probably not seeing dollar signs, comma blah, blah blah.

405
00:26:41,150 --> 00:26:47,090
You're probably seeing this information formatted for wherever you live now.

406
00:26:47,270 --> 00:26:49,580
There could be two reasons why you'll be seeing that.

407
00:26:49,700 --> 00:26:54,890
You may be thinking, well, I already was seeing everything formatted for wherever I live, even in

408
00:26:54,890 --> 00:27:00,230
the previous lessons where we were following this, because by default, to get currency instance method,

409
00:27:00,230 --> 00:27:05,720
even if you don't pass in a locale, will make use of whatever the local system settings are on your

410
00:27:05,720 --> 00:27:06,260
computer.

411
00:27:06,290 --> 00:27:13,580
However, if you were to allow this application running on your computer to be seen by the entire internet

412
00:27:13,580 --> 00:27:22,040
right now and people who live in other regions other than you were to point their browser at your program

413
00:27:22,040 --> 00:27:27,470
running on your computer, they would not see whatever you are seeing.

414
00:27:27,770 --> 00:27:33,650
Presumably, if they live in a different enough part of the world, they would see these these values

415
00:27:33,650 --> 00:27:35,150
formatted for them.

416
00:27:35,330 --> 00:27:35,780
OK.

417
00:27:35,960 --> 00:27:40,850
Because we are now passing in the local information, which is coming from their browser.

418
00:27:41,000 --> 00:27:44,200
And in fact, I do want to show you that real quick.

419
00:27:45,710 --> 00:27:46,910
Some of them make this bigger.

420
00:27:47,240 --> 00:27:47,840
A little bit.

421
00:27:48,050 --> 00:27:53,390
And I'm going to bring up some information, I think I showed this to you are already a little bit late.

422
00:27:53,600 --> 00:28:00,230
So every time we refresh the page, if I go to the network here and I will just, yeah, refresh this

423
00:28:00,230 --> 00:28:01,200
page this way.

424
00:28:01,220 --> 00:28:01,550
OK.

425
00:28:01,790 --> 00:28:09,170
So I just triggered the web browser to make a request back to the application to get this HTML here.

426
00:28:09,200 --> 00:28:09,530
OK?

427
00:28:09,560 --> 00:28:11,450
The page information, right?

428
00:28:11,450 --> 00:28:11,900
The data.

429
00:28:12,960 --> 00:28:16,460
Here's that request down here in this line called people.

430
00:28:16,460 --> 00:28:25,400
And if I click on that, I can actually see a little bit more of what was sent in that request right

431
00:28:25,400 --> 00:28:27,320
here under request headers.

432
00:28:27,350 --> 00:28:27,800
OK.

433
00:28:28,490 --> 00:28:33,230
And let's see one of the things that should be in here.

434
00:28:33,800 --> 00:28:34,360
There it is.

435
00:28:34,370 --> 00:28:43,010
Accept language, Ian Hyphen use that, my friends, is low cal information.

436
00:28:43,280 --> 00:28:48,900
It's saying that my browser is set up for English in the United States.

437
00:28:48,920 --> 00:28:50,330
That's what that's saying.

438
00:28:51,080 --> 00:28:57,440
And so that information right there is getting passed automatically by the spring framework and matched

439
00:28:57,440 --> 00:28:59,510
up with a known locale.

440
00:28:59,660 --> 00:29:07,280
So there's a database in Java that knows that currencies for the U.S. should be formatted like this.

441
00:29:07,310 --> 00:29:07,800
OK.

442
00:29:08,210 --> 00:29:11,280
So that's how the application.

443
00:29:11,300 --> 00:29:19,730
Our application can know how it should format things like dates, numbers, whatever money, according

444
00:29:19,760 --> 00:29:22,460
to the standards of a particular part of the world.

445
00:29:22,670 --> 00:29:29,660
That information is typically conveyed within each request that the browser makes back to the application.

446
00:29:29,690 --> 00:29:33,960
OK, so just wanted to give you a little bit of insight into that.

447
00:29:33,980 --> 00:29:38,360
And so I think that's enough that we've covered for now in this lesson.

448
00:29:38,540 --> 00:29:42,800
So join me in the next lesson and we will implement some more functionality.

449
00:29:42,800 --> 00:29:47,510
And keep in mind where we're heading with all of this is we're going to implement a fully functional

450
00:29:47,510 --> 00:29:48,920
crud application.

451
00:29:49,070 --> 00:29:54,590
So right now, all we've implemented is a little bit of reading the ability to read some data, OK,

452
00:29:54,770 --> 00:29:57,980
and it's static data from the back end, in fact, OK.

453
00:29:58,340 --> 00:30:02,240
But we are going to do a lot more with this, so I'll see you in the next one.
