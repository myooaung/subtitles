1
00:00:00,150 --> 00:00:08,010
All right, so before we bring this module to a complete close, I think it's important that we actually

2
00:00:08,010 --> 00:00:15,210
take what we've done in this module and put it all back together again as a as an actual working program.

3
00:00:15,480 --> 00:00:24,330
So all we've seen so far is that we've been able to flesh out a new implementation of the guessing game

4
00:00:24,330 --> 00:00:31,020
engine, the logic behind the guessing game using a TDD approach with unit tests.

5
00:00:31,230 --> 00:00:38,220
However, we don't actually have like a workable, usable program that someone who's not a programmer

6
00:00:38,220 --> 00:00:40,890
could actually use right at the end of the day.

7
00:00:40,890 --> 00:00:43,320
That should still kind of be the real point.

8
00:00:43,470 --> 00:00:50,730
So I thought that in this one last lesson, we'd just put this all back together again so that we can

9
00:00:50,730 --> 00:00:56,220
interact with it from a user interface, which in this case will end up just being the command line

10
00:00:56,220 --> 00:00:56,760
again.

11
00:00:57,330 --> 00:01:03,870
Now, I had considered implementing the user interface in a separate class, but for right now, I still

12
00:01:03,870 --> 00:01:08,430
want to just put this in the same class, but it will be in its own separate method.

13
00:01:08,730 --> 00:01:11,850
OK, so let's let's just see what this might look like.

14
00:01:11,970 --> 00:01:18,720
So we're back in the ADC here and now I'm in the actual guessing game class itself, and I think we're

15
00:01:18,720 --> 00:01:23,730
done with the unit test, no more unit tests and we fleshed out everything that I think we needed to

16
00:01:23,730 --> 00:01:28,180
with the unit tests and now we can just use what we have created here.

17
00:01:28,380 --> 00:01:33,570
So I'm going to start off by creating a public static void main method.

18
00:01:34,170 --> 00:01:43,230
And let's see here now with this implementation, we're actually making a class that maintains state.

19
00:01:43,440 --> 00:01:47,010
And if you may recall, that just means that it can remember stuff.

20
00:01:47,250 --> 00:01:54,000
And the way that it remembers things is with these two variables here, these two fields, these fields

21
00:01:54,000 --> 00:01:57,330
are the state of the class.

22
00:01:57,330 --> 00:02:02,550
And again, state really just means like the parts that can remember something, right, that store

23
00:02:02,550 --> 00:02:03,480
information.

24
00:02:03,570 --> 00:02:04,050
OK.

25
00:02:04,080 --> 00:02:13,800
And so because this class maintains state or can store information, if we want to use it in our final

26
00:02:13,800 --> 00:02:17,940
application, we will have to create an actual instance of the guessing game.

27
00:02:18,210 --> 00:02:21,320
So I think that's the first thing we're going to do down here.

28
00:02:21,330 --> 00:02:27,360
We're going to make a variable, a local variable that will be an instance of the guessing game.

29
00:02:27,810 --> 00:02:35,520
So we'll reference it here and we can just call it game and we'll say new guessing game just like that.

30
00:02:36,780 --> 00:02:37,190
All right.

31
00:02:37,200 --> 00:02:39,510
So let's ease into this a little bit.

32
00:02:39,510 --> 00:02:45,150
I guess let's start off by just asking a user to guess the number.

33
00:02:45,330 --> 00:02:46,320
So let's see.

34
00:02:46,330 --> 00:03:01,920
We can do that by calling system dot console Red Line and say something like, uh, enter a number and

35
00:03:01,920 --> 00:03:05,760
then we can capture the output of that with a command option V.

36
00:03:05,970 --> 00:03:08,340
And I don't know this for now.

37
00:03:08,340 --> 00:03:15,230
I'm just going to call it input and then I think we need to do from this point is called Game Dot.

38
00:03:15,420 --> 00:03:23,190
Guess now we'll need to convert this input, which is the string into a number.

39
00:03:23,280 --> 00:03:28,140
Now I'm going to take a little bit of a shortcut here, and I'm going to do it all in one, all in one

40
00:03:28,140 --> 00:03:28,770
fell swoop.

41
00:03:28,770 --> 00:03:33,900
So I'm going to I know that the number that I want is needs to be an integer, so I need to convert

42
00:03:33,900 --> 00:03:35,070
the string to an integer.

43
00:03:35,070 --> 00:03:43,080
So I will use the integer wrapper class dot pass int and then I will pass in the input like.

44
00:03:43,080 --> 00:03:50,940
So and then that's going to return some output, which for now, I guess I'm just going to call output.

45
00:03:51,660 --> 00:03:57,480
Now this output could contain a number of different strings, right?

46
00:03:57,510 --> 00:04:04,680
It could say something like you got it in one try in this case and then the game should be over.

47
00:04:04,710 --> 00:04:12,450
Or it could say you didn't get it and you're either too low or too high, right?

48
00:04:13,200 --> 00:04:23,190
So maybe what we want to do now is to set up a loop, and I think that loop maybe can start with just

49
00:04:23,190 --> 00:04:25,020
taking this input here.

50
00:04:25,440 --> 00:04:31,650
So let's see what this would look like if maybe we do a do while loop because I know we want to do this

51
00:04:31,650 --> 00:04:33,870
bit at least the one time right?

52
00:04:34,200 --> 00:04:34,980
And that's what to do.

53
00:04:34,980 --> 00:04:36,090
While Loop is four.

54
00:04:36,090 --> 00:04:46,410
So we can say do and then let's indent these two lines do some stuff while and now the question is,

55
00:04:46,740 --> 00:04:49,920
how do we know when to end this loop?

56
00:04:50,520 --> 00:04:59,850
Well, maybe what we can do is just define a variable, maybe inside of the loop and that variable will.

57
00:04:59,950 --> 00:05:02,110
Help us to determine when we should stop.

58
00:05:02,230 --> 00:05:07,420
So maybe we'll say while Loop should continue.

59
00:05:07,900 --> 00:05:12,100
Now we haven't actually defined this yet, so I will define it here.

60
00:05:14,470 --> 00:05:17,200
Luke should continue.

61
00:05:18,280 --> 00:05:25,300
All right, so I'm I'm declaring that loop here, and we're going to set it using some conditional logic.

62
00:05:25,330 --> 00:05:30,850
OK, so what are the circumstances where this loop should not continue?

63
00:05:30,880 --> 00:05:40,840
One would be if the output contains the words, you got it, then you're done right?

64
00:05:41,140 --> 00:05:44,500
So let's let's just let's see what that would look like.

65
00:05:47,450 --> 00:05:52,580
If output that contains.

66
00:05:55,710 --> 00:06:02,250
You got it, then loop should continue equals false.

67
00:06:02,790 --> 00:06:05,220
All right, so that's one situation.

68
00:06:05,490 --> 00:06:06,500
Oh, and I apologize.

69
00:06:06,510 --> 00:06:08,130
Actually, I apologize.

70
00:06:08,160 --> 00:06:15,780
Actually, we do need to have this loop should continue outside of the loop in order to be in scope

71
00:06:15,780 --> 00:06:16,050
here.

72
00:06:16,050 --> 00:06:17,400
So let's move this.

73
00:06:17,910 --> 00:06:19,260
Yeah, sorry about that.

74
00:06:19,440 --> 00:06:24,630
And maybe we should initialize it to true to start off with.

75
00:06:25,470 --> 00:06:25,890
All right.

76
00:06:26,160 --> 00:06:30,120
What's another circumstance where we should set it to false?

77
00:06:30,390 --> 00:06:32,880
So if the word you got it is there?

78
00:06:32,910 --> 00:06:38,630
Maybe if the words game is over or game over, are there.

79
00:06:38,640 --> 00:06:43,360
So really, maybe we can just look for the word over that might be sufficient.

80
00:06:43,890 --> 00:06:50,190
Now we could combine all of that here, or we could do a another conditional so we could see if output

81
00:06:50,190 --> 00:06:51,930
that contains you got it.

82
00:06:53,770 --> 00:07:02,620
Or output that contains over then set this to false.

83
00:07:03,010 --> 00:07:04,450
We could do it that way.

84
00:07:04,480 --> 00:07:05,410
What else?

85
00:07:05,860 --> 00:07:06,670
Over.

86
00:07:07,060 --> 00:07:07,810
Over.

87
00:07:07,960 --> 00:07:09,520
That may pretty much be it.

88
00:07:09,520 --> 00:07:15,850
And then one other rule that we had before was you could hit cue to stop as well.

89
00:07:16,150 --> 00:07:28,390
And I suppose we could just put that right here and say something like if Q Dot equals input, then

90
00:07:29,050 --> 00:07:32,380
we could just end the program immediately.

91
00:07:32,710 --> 00:07:38,230
Now, we may have had a little bit more elegant ending in the previous one where we might have output

92
00:07:38,230 --> 00:07:39,760
it something first and then ended.

93
00:07:39,760 --> 00:07:41,110
But I don't care right now.

94
00:07:41,620 --> 00:07:41,980
All right.

95
00:07:42,010 --> 00:07:44,360
So now let's build this and see what happens.

96
00:07:44,380 --> 00:07:49,900
Now, remember, since we are using the console redlined, we won't be able to run this from here.

97
00:07:50,170 --> 00:07:55,390
We'll have to build it separately and then manually execute the program ourselves.

98
00:07:55,780 --> 00:07:59,050
So we'll do a command f nine to build.

99
00:08:00,160 --> 00:08:05,710
OK, and then option F12 to open a terminal prompt.

100
00:08:06,400 --> 00:08:07,120
All right.

101
00:08:07,330 --> 00:08:07,970
Let's see here.

102
00:08:07,990 --> 00:08:16,390
So now we want to run this guy from the command line, so we'll do Java all lowercase hyphen CP for

103
00:08:16,390 --> 00:08:23,950
Class Path, which again just lets us specify what folder our compiled code is in.

104
00:08:24,250 --> 00:08:30,550
Now we need to be a little careful this time around, though, because we're now using a fully qualified

105
00:08:30,910 --> 00:08:34,070
package name for this class, right?

106
00:08:34,090 --> 00:08:34,330
This.

107
00:08:34,330 --> 00:08:37,030
Com Neutrino Assist game bit.

108
00:08:37,270 --> 00:08:38,770
So here's how we'll do this.

109
00:08:38,770 --> 00:08:44,830
We'll do Java hyphen C.P and currently we are here in this folder.

110
00:08:45,010 --> 00:08:52,180
And so we need to tell Java that our class starts off in this out dot production guessing game.

111
00:08:52,390 --> 00:08:54,850
So we'll do that here with this class path bit.

112
00:08:55,090 --> 00:09:01,510
So we'll say out forward slash production, forward slash guessing game.

113
00:09:02,020 --> 00:09:02,400
All right.

114
00:09:02,410 --> 00:09:04,990
So that's our class path and we stop right there.

115
00:09:05,170 --> 00:09:10,120
The rest of this calm neutrinos cis game, that's the package structure, OK?

116
00:09:10,210 --> 00:09:15,040
And that becomes part of the fully qualified class name itself.

117
00:09:15,190 --> 00:09:19,010
So now the next bit here is the class name.

118
00:09:19,030 --> 00:09:19,420
OK.

119
00:09:19,600 --> 00:09:29,890
And so this is where we have to put in comm dot neutrinos, this dot game dot and then the actual short

120
00:09:29,890 --> 00:09:32,890
name for the class guessing game.

121
00:09:33,010 --> 00:09:40,150
Now how do I know that this part out production guessing game belongs in the class path and then the

122
00:09:40,150 --> 00:09:42,200
rest of the folders come neutrinos.

123
00:09:42,210 --> 00:09:46,330
This game belong as part of the actual class name.

124
00:09:46,600 --> 00:09:50,530
Well, that's defined up here with this package.

125
00:09:50,530 --> 00:09:59,050
So calm neutrinos this game that becomes the, you know, part of the fully qualified class name.

126
00:09:59,050 --> 00:10:03,150
And then we just tack on the actual class itself to the end of that.

127
00:10:03,160 --> 00:10:12,070
OK, so be careful there not to include this calm neutrino CEST game on the end of the class path itself.

128
00:10:12,100 --> 00:10:12,520
OK.

129
00:10:12,550 --> 00:10:13,900
It does not belong there.

130
00:10:14,020 --> 00:10:17,560
It belongs as part of the fully qualified class name.

131
00:10:18,100 --> 00:10:18,610
All right.

132
00:10:18,730 --> 00:10:25,420
So once we have all of that, we can now run this and there's our prompt.

133
00:10:25,420 --> 00:10:26,590
Enter a number.

134
00:10:26,950 --> 00:10:27,260
All right.

135
00:10:27,280 --> 00:10:31,650
First, let's just test out the qubit, the quitting queue to quit.

136
00:10:31,660 --> 00:10:33,010
So let's see what happens here.

137
00:10:33,040 --> 00:10:33,660
All right, cool.

138
00:10:33,670 --> 00:10:34,810
Yeah, that exited out.

139
00:10:34,840 --> 00:10:35,350
Very good.

140
00:10:35,590 --> 00:10:35,950
All right.

141
00:10:36,100 --> 00:10:39,400
Now let's run it again, and let's get the number.

142
00:10:39,400 --> 00:10:40,840
I'm going to start with a five.

143
00:10:42,090 --> 00:10:46,600
Oh oh, and we totally forgot to actually print out the output.

144
00:10:46,600 --> 00:10:47,950
Didn't, didn't, didn't I?

145
00:10:47,980 --> 00:10:49,870
I forgot to print out the output.

146
00:10:50,170 --> 00:10:51,910
So let's jump down here.

147
00:10:51,940 --> 00:10:52,520
Let's see.

148
00:10:52,540 --> 00:10:56,830
So we prompt if the prompt is a cue, then we quit.

149
00:10:57,250 --> 00:11:03,410
Otherwise, we take the output and we need to show the output right there, right?

150
00:11:03,430 --> 00:11:04,340
So let's do that.

151
00:11:04,340 --> 00:11:15,820
So let's just drop a line in here and say, system that out output, and let's just try that and see.

152
00:11:16,210 --> 00:11:16,480
All right.

153
00:11:16,480 --> 00:11:19,090
So let's quit out of the program.

154
00:11:20,020 --> 00:11:20,440
All right.

155
00:11:20,770 --> 00:11:25,330
And then we need to rebuild with a command F9.

156
00:11:28,050 --> 00:11:30,420
All right, and then let's rerun it.

157
00:11:32,400 --> 00:11:34,620
OK, I'm going to start with five again.

158
00:11:34,980 --> 00:11:35,830
You didn't get it.

159
00:11:35,850 --> 00:11:37,320
You're too low.

160
00:11:37,350 --> 00:11:38,440
OK, I'll try.

161
00:11:38,460 --> 00:11:39,150
Seven.

162
00:11:39,180 --> 00:11:40,110
Still too low.

163
00:11:40,170 --> 00:11:40,720
OK.

164
00:11:40,860 --> 00:11:41,640
Nine.

165
00:11:42,420 --> 00:11:43,020
Too high.

166
00:11:43,050 --> 00:11:43,440
All right.

167
00:11:43,440 --> 00:11:44,820
So maybe it's an eight.

168
00:11:45,690 --> 00:11:47,120
Hey, there it is.

169
00:11:47,130 --> 00:11:49,040
And we got it in four tries.

170
00:11:49,050 --> 00:11:50,640
So it looks like this is working.

171
00:11:50,640 --> 00:11:51,960
Let's let's try it one more time.

172
00:11:51,970 --> 00:11:52,620
One more game.

173
00:11:52,710 --> 00:11:53,010
All right.

174
00:11:53,020 --> 00:11:53,910
Enter a number.

175
00:11:53,910 --> 00:11:55,710
I'm going to start with five again.

176
00:11:56,040 --> 00:11:56,910
Too low.

177
00:11:56,940 --> 00:11:58,560
OK, I'll do a nine.

178
00:11:59,460 --> 00:12:00,730
Oh, interesting.

179
00:12:00,750 --> 00:12:01,560
Too low.

180
00:12:01,560 --> 00:12:02,430
Is it 10?

181
00:12:04,080 --> 00:12:05,700
Hey, got it in three tries?

182
00:12:05,700 --> 00:12:06,000
You know what?

183
00:12:06,000 --> 00:12:07,560
I kind of want to play this one more time.

184
00:12:07,560 --> 00:12:09,230
I'm kind of having a little fun here.

185
00:12:09,240 --> 00:12:10,370
Enter a number.

186
00:12:10,380 --> 00:12:11,730
I'll do a five again.

187
00:12:12,390 --> 00:12:13,240
Too low.

188
00:12:13,410 --> 00:12:14,190
Nine.

189
00:12:14,940 --> 00:12:15,310
Hey!

190
00:12:15,330 --> 00:12:16,980
Got it in two tries?

191
00:12:17,730 --> 00:12:18,150
All right.

192
00:12:18,390 --> 00:12:21,030
So yeah, this is our game.

193
00:12:21,030 --> 00:12:27,600
And I don't know, is it just me or does it seem like implementing the user interface for the rest of

194
00:12:27,600 --> 00:12:30,000
the game was a little easier this time?

195
00:12:30,010 --> 00:12:34,500
Now, that might be by virtue of the fact that, you know, we've already implemented it once and we

196
00:12:34,500 --> 00:12:36,060
kind of knew what we were doing.

197
00:12:36,210 --> 00:12:40,650
And I wasn't really teaching you much about implementing this because we've already done it before.

198
00:12:40,650 --> 00:12:49,950
Probably that does have a lot to do with it, but it is quite nice to keep the game logic separate from

199
00:12:49,950 --> 00:12:52,620
the user interface logic.

200
00:12:52,980 --> 00:13:00,390
I would say, and we also could have just taken all of this and put it in another class and done the

201
00:13:00,390 --> 00:13:03,450
exact same thing here that it would have worked just the same.

202
00:13:03,910 --> 00:13:09,150
I'm just being slightly lazy in that, you know, we don't absolutely have to do that, but we absolutely

203
00:13:09,150 --> 00:13:09,750
could have.

204
00:13:09,750 --> 00:13:15,000
We could have just put put all of this in another class, compiled the whole thing and then run, run

205
00:13:15,000 --> 00:13:16,500
everything, all all together.

206
00:13:16,980 --> 00:13:17,420
All right.

207
00:13:17,430 --> 00:13:19,830
So I will see you in the next one.
