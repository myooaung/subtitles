1
00:00:00,060 --> 00:00:09,090
All right, so in this lesson, we're going to just do a deeper dive into how I am making this test

2
00:00:09,090 --> 00:00:11,640
random number generation method work.

3
00:00:12,540 --> 00:00:14,520
What was my thinking behind it?

4
00:00:14,820 --> 00:00:21,330
I just want to make sure that everyone really follows the logic here and and how I came up with this.

5
00:00:21,600 --> 00:00:27,030
If you already understand this or you feel you do, feel free to skip right over this lesson.

6
00:00:27,030 --> 00:00:32,250
So this is really just meant to be a deeper dive for those who still are a little confused or are not

7
00:00:32,250 --> 00:00:34,890
real sure exactly what all is going on here.

8
00:00:34,890 --> 00:00:38,140
So I'm going to try to explain it in a in another way.

9
00:00:38,160 --> 00:00:38,610
OK.

10
00:00:38,640 --> 00:00:38,940
All right.

11
00:00:38,950 --> 00:00:43,360
So first off, let's just make sure we understand right from the start.

12
00:00:43,380 --> 00:00:44,730
What are we even trying to do?

13
00:00:45,000 --> 00:00:50,610
The basic idea is this, you know, for any guessing game where you're having to guess the number between,

14
00:00:50,610 --> 00:00:51,930
let's say, one in 10.

15
00:00:52,140 --> 00:00:58,670
That game isn't any good if the number that were supposed to be guessing never changes in between games,

16
00:00:58,680 --> 00:00:59,010
right?

17
00:00:59,190 --> 00:01:02,400
So if every time you play the game, the random number is three.

18
00:01:02,430 --> 00:01:08,010
Well, first off, it's not very random, and that game is not going to be much fun to play beyond one

19
00:01:08,010 --> 00:01:12,300
or two times when everybody starts to realize, oh, the number is always three.

20
00:01:12,600 --> 00:01:15,950
So we need a different number each time we play the game.

21
00:01:15,960 --> 00:01:22,710
And if we're saying that we want that random number to be between, for example, one and 10, then

22
00:01:22,710 --> 00:01:28,920
you'd want to make sure that if you played it enough times, let's say 20, 30, 40 times the game should

23
00:01:28,920 --> 00:01:36,060
be picking random numbers in that range and not just picking two, three and four, for example, right?

24
00:01:36,300 --> 00:01:43,260
If you played it 50 times, you would expect that it would have randomly chosen numbers between one

25
00:01:43,260 --> 00:01:45,900
and 10, somewhat equally.

26
00:01:45,930 --> 00:01:52,770
Now, I don't expect a random number generating algorithm that we have easy access to in a language

27
00:01:52,770 --> 00:01:55,800
like Java to be like perfectly even.

28
00:01:56,070 --> 00:01:59,700
But hopefully it's, you know, going to deliver a pretty good spread.

29
00:02:00,060 --> 00:02:09,550
So this whole method here is trying to force us to write code that will generate such such random numbers.

30
00:02:09,570 --> 00:02:10,050
OK?

31
00:02:10,290 --> 00:02:14,340
And then we can verify that those random numbers are being generated.

32
00:02:14,580 --> 00:02:21,150
So let's look real quick first at what it would look like if we had good random number generation.

33
00:02:21,330 --> 00:02:28,350
So let's say, for example, every time we run the game, it generates the following random numbers

34
00:02:28,360 --> 00:02:38,430
each time we play it, let's say we get a three and a five and a two and a seven and a nine and then

35
00:02:38,430 --> 00:02:43,020
another three, then another nine and then another two.

36
00:02:43,260 --> 00:02:46,470
OK, now these are just my own random numbers, OK?

37
00:02:46,800 --> 00:02:52,140
And that's for one two three four five six seven, eight times that we run this game, right?

38
00:02:52,410 --> 00:02:54,570
Those are the numbers that we might get.

39
00:02:55,020 --> 00:02:55,440
OK?

40
00:02:55,860 --> 00:03:03,780
How could we test whether or not we eventually hit all numbers between one and 10 inclusive?

41
00:03:04,140 --> 00:03:07,500
If we ran this game enough times, how could we do that?

42
00:03:08,070 --> 00:03:13,260
Well, my idea for tracking this and this is just, you know, my own idea, right?

43
00:03:13,440 --> 00:03:18,090
Although I'm sure lots of people have done something similar for similar reasons.

44
00:03:18,360 --> 00:03:24,810
So my thinking was, OK, well, let's imagine that we have a list of every possible number between

45
00:03:24,810 --> 00:03:38,550
one and 10, so I'll make that list now one two three four five six, seven, eight, nine and 10.

46
00:03:38,580 --> 00:03:41,970
OK, now let's see here, I'll change the color.

47
00:03:42,060 --> 00:03:47,730
So now let's just imagine that the first time we play this game, we get a three, and somehow I keep

48
00:03:47,730 --> 00:03:49,980
track of the fact that I got a three, right?

49
00:03:49,980 --> 00:03:55,140
So maybe I use something kind of like a tally mark, although I'm not going to keep multiple tallies

50
00:03:55,140 --> 00:03:56,070
for the same number.

51
00:03:56,070 --> 00:03:57,930
If I already have a tally mark on a number.

52
00:03:58,140 --> 00:04:00,270
Then then I don't need to put another one there.

53
00:04:00,450 --> 00:04:04,770
I'm just trying to track, was that number ever used or never used, right?

54
00:04:05,010 --> 00:04:11,490
So I got a three and then I got a five, and then I got it to write, I'm just following these numbers

55
00:04:11,490 --> 00:04:13,470
up here, and then I got a seven.

56
00:04:13,470 --> 00:04:17,940
So I put a tally mark there and then I got a nine, so put a tally mark there.

57
00:04:18,210 --> 00:04:20,970
Then I got a three already have a tally mark there.

58
00:04:20,970 --> 00:04:26,880
Then I got a nine, already have a tally mark there and then I got a two and I already have a tally

59
00:04:26,880 --> 00:04:27,510
mark there.

60
00:04:27,540 --> 00:04:29,280
OK, great now.

61
00:04:30,350 --> 00:04:35,660
If I add up all of my tally marks, I get one two three four five.

62
00:04:37,640 --> 00:04:47,540
Right now, let's also imagine in a perfect world, I ran this game 50 times and eventually I get a

63
00:04:47,540 --> 00:04:52,130
tally mark for every single number like so.

64
00:04:56,530 --> 00:05:01,060
And when I tally all of those up, I get 10.

65
00:05:01,660 --> 00:05:10,990
OK, now would you agree that a really good random number generator would be one in which in this case,

66
00:05:11,140 --> 00:05:18,530
if my range of possible numbers was one through 10, I got a tally mark on all 10 numbers.

67
00:05:18,550 --> 00:05:23,530
Would you agree that that's a good random number generator as opposed to a random number generator that

68
00:05:23,530 --> 00:05:26,270
just generates to every single time?

69
00:05:26,290 --> 00:05:26,630
Right?

70
00:05:26,650 --> 00:05:30,040
That's not going to be a fun game that just generates two, right?

71
00:05:30,430 --> 00:05:37,120
So the more tally marks we have across each of these numbers, I would say, the better.

72
00:05:37,120 --> 00:05:44,260
The random number generation is right, because the tally marks indicate that the random number generator

73
00:05:44,260 --> 00:05:47,800
is capable of generating each of those numbers, right?

74
00:05:48,370 --> 00:05:54,520
So the numbers in red that indicates a random number generator that is not great.

75
00:05:54,820 --> 00:05:59,710
Now, of course, I'm not factoring in, you know, how many times did we allow it to generate a number?

76
00:05:59,950 --> 00:06:07,780
But let's say that each of these rows, each of these rows, represents having run the random generator

77
00:06:07,780 --> 00:06:08,610
50 times.

78
00:06:08,620 --> 00:06:09,820
OK, let's just say that.

79
00:06:10,360 --> 00:06:16,990
So if you ran it 50 times and this first column in red or I'm sorry, this first row in red.

80
00:06:18,260 --> 00:06:23,420
Results in only getting five out of the 10 numbers, right?

81
00:06:23,780 --> 00:06:29,030
That's not a very good random number generator, considering that you only had 10 options there, right?

82
00:06:29,270 --> 00:06:35,330
A perfect random number generator would be one where you would get all 10 numbers selected for only

83
00:06:35,330 --> 00:06:38,560
having run the random generation 10 times, right?

84
00:06:38,750 --> 00:06:43,490
So in other words, each time you run it, you get a new number and it's always random.

85
00:06:43,610 --> 00:06:49,910
That would be ideal and ideal does not exist in this case, but getting five out of the 10 after running

86
00:06:49,910 --> 00:06:52,570
at 50 times is not good, right?

87
00:06:52,610 --> 00:06:54,770
RDC or 50 times?

88
00:06:55,040 --> 00:06:55,400
All right.

89
00:06:55,850 --> 00:07:02,180
Getting all 10 numbers to come up by the random number generator after having run it 50 times?

90
00:07:02,390 --> 00:07:03,140
That's good.

91
00:07:03,230 --> 00:07:04,520
That's, you know, that's pretty.

92
00:07:04,520 --> 00:07:05,840
That's that's reasonable.

93
00:07:06,080 --> 00:07:06,510
OK.

94
00:07:06,890 --> 00:07:08,120
All right now.

95
00:07:08,120 --> 00:07:10,110
So so that's what we're trying to get to.

96
00:07:10,130 --> 00:07:15,320
We're trying to keep track of how many times each of the random numbers.

97
00:07:16,590 --> 00:07:17,520
Here so.

98
00:07:18,920 --> 00:07:19,820
These.

99
00:07:21,010 --> 00:07:21,640
Are.

100
00:07:22,820 --> 00:07:24,170
The random.

101
00:07:27,240 --> 00:07:28,050
Numbers.

102
00:07:29,440 --> 00:07:29,780
Right.

103
00:07:29,980 --> 00:07:34,000
Each of these one two, three four five, two, one through 10 there in black.

104
00:07:35,200 --> 00:07:35,620
All right.

105
00:07:36,250 --> 00:07:45,130
So we need to figure out a way in code to be able to do this, this tally mark thing that I that I'm

106
00:07:45,130 --> 00:07:45,670
showing here.

107
00:07:45,670 --> 00:07:46,990
How can we do that in code?

108
00:07:47,380 --> 00:07:53,020
Well, the approach that we ended up doing in the code, in the test here, test random number generation

109
00:07:53,200 --> 00:07:55,060
was to use an array.

110
00:07:55,090 --> 00:07:55,540
OK.

111
00:07:55,720 --> 00:08:00,520
So let me just show you if we think of each of these boxes.

112
00:08:01,510 --> 00:08:04,900
As an array element.

113
00:08:06,660 --> 00:08:06,960
And.

114
00:08:08,940 --> 00:08:17,070
Well, first, let me just remind you, so Anna Ray is really just a collection of items, objects,

115
00:08:17,370 --> 00:08:19,560
primitives, numbers, whatever, OK?

116
00:08:19,680 --> 00:08:26,770
It's just a way to have a list or a collection of numbers all grouped together.

117
00:08:26,790 --> 00:08:27,270
OK.

118
00:08:27,690 --> 00:08:31,740
So I will show you an example, a visual example here.

119
00:08:33,100 --> 00:08:33,470
All right.

120
00:08:33,490 --> 00:08:37,880
So let's say we have an array of one, two, three, four five elements.

121
00:08:37,900 --> 00:08:45,610
OK, so we could have element zero, element one, element two, three and four.

122
00:08:45,640 --> 00:08:46,120
OK.

123
00:08:47,080 --> 00:08:50,050
And then we could store something in these elements.

124
00:08:50,050 --> 00:08:57,040
So if this is an array, if this whole entire thing is an array of, let's say.

125
00:08:58,320 --> 00:08:59,280
Integers.

126
00:09:00,120 --> 00:09:04,620
Then the thing that I could store in each of these elements would be integers.

127
00:09:04,650 --> 00:09:05,160
OK?

128
00:09:05,490 --> 00:09:09,360
So I could store a three in element zero.

129
00:09:09,570 --> 00:09:10,080
OK.

130
00:09:10,260 --> 00:09:14,040
And I could store a whatever a five.

131
00:09:14,250 --> 00:09:19,350
And I could store a negative seven and a two and another three.

132
00:09:19,500 --> 00:09:23,030
It doesn't matter that I can put anything in these elements, right?

133
00:09:23,430 --> 00:09:27,120
And the way that I could create this array, this is an array.

134
00:09:27,210 --> 00:09:28,560
This is an integer.

135
00:09:29,890 --> 00:09:36,880
Array right now, the way that I could create this in code is to simply say something like.

136
00:09:37,810 --> 00:09:38,380
And.

137
00:09:39,630 --> 00:09:48,150
And then this square brackets symbol and then a name for the array, like my numbers.

138
00:09:50,490 --> 00:09:51,180
Equals.

139
00:09:51,330 --> 00:09:58,660
Now I can initialize this array, or I can just create it if I just want to create it, then I can see

140
00:09:59,190 --> 00:09:59,850
new.

141
00:10:01,070 --> 00:10:01,630
And.

142
00:10:03,410 --> 00:10:08,660
And then in this case, I have five elements, so this is an array of five element array.

143
00:10:10,120 --> 00:10:18,160
OK, so I could create this array in this way, or I could initialize this array with some actual values.

144
00:10:20,120 --> 00:10:23,540
My numbs equals.

145
00:10:23,720 --> 00:10:31,940
And then I could use curly braces and then put some numbers here so I could do three, five negative

146
00:10:31,940 --> 00:10:36,770
seven, two and three like sir.

147
00:10:38,070 --> 00:10:42,990
OK, so those are two different ways that I could create an IRA.

148
00:10:43,230 --> 00:10:46,230
OK, that looks like this.

149
00:10:47,130 --> 00:10:47,550
All right.

150
00:10:48,090 --> 00:10:56,310
So I could I could use an array to kind of do this tally mark stuff that I have here, right?

151
00:10:57,180 --> 00:11:01,110
So the way I could do that is I could create the array show you what that would look like.

152
00:11:01,170 --> 00:11:03,930
Well, actually, it would pretty much look like, I guess.

153
00:11:06,070 --> 00:11:07,840
OK, so you're actually here.

154
00:11:07,870 --> 00:11:09,520
Let's just go to the actual code.

155
00:11:09,580 --> 00:11:12,550
So right here on Line 41.

156
00:11:13,000 --> 00:11:18,170
You see me creating an integer array called Random NUM Count.

157
00:11:18,190 --> 00:11:25,070
I named it R&amp;D, and I'm just saying that this is an array of 11 elements.

158
00:11:25,090 --> 00:11:25,570
OK.

159
00:11:25,900 --> 00:11:32,260
So each of these is one element of an array.

160
00:11:32,470 --> 00:11:32,950
OK.

161
00:11:33,610 --> 00:11:41,140
So, so on line forty one, I'm saying make an array of integers with 11 elements.

162
00:11:41,890 --> 00:11:42,340
All right.

163
00:11:43,330 --> 00:11:45,040
And then let's see here.

164
00:11:45,070 --> 00:11:48,310
Let me undo a few things to clean this up a bit.

165
00:11:48,760 --> 00:11:49,040
All right.

166
00:11:49,060 --> 00:11:54,970
So if our array is, is this thing here?

167
00:11:57,030 --> 00:11:58,410
This whole entire.

168
00:11:59,860 --> 00:12:00,820
But here.

169
00:12:03,850 --> 00:12:05,080
If that's an array.

170
00:12:06,290 --> 00:12:08,540
And its elements are.

171
00:12:10,230 --> 00:12:12,540
Each of these spots.

172
00:12:13,690 --> 00:12:14,260
Here.

173
00:12:17,300 --> 00:12:26,780
Then what we're able to do is we're able to store a one or a zero or nothing, which ends up becoming

174
00:12:26,780 --> 00:12:29,750
a zero in each of these elements, right?

175
00:12:29,960 --> 00:12:33,800
So if we don't put a one in there, then by default you're going to have a zero.

176
00:12:34,430 --> 00:12:37,790
And the reason for that is because this is an integer array.

177
00:12:38,360 --> 00:12:41,450
Let me say that this is an integer.

178
00:12:42,610 --> 00:12:43,330
Array.

179
00:12:44,550 --> 00:12:48,480
And the and each element defaults to a zero.

180
00:12:48,690 --> 00:12:49,160
OK.

181
00:12:49,260 --> 00:12:52,050
That's just the default of integer arrays.

182
00:12:53,370 --> 00:12:53,820
All right.

183
00:12:54,750 --> 00:13:03,990
So imagine now, as I said at the beginning, if we had a random number generator that was generating

184
00:13:04,260 --> 00:13:05,850
these numbers here.

185
00:13:07,630 --> 00:13:10,090
These ones in this order.

186
00:13:10,480 --> 00:13:13,930
And each time we got one of these numbers, we just put a tally mark, right?

187
00:13:13,930 --> 00:13:18,910
So we got a three and a five and a two, whatever, and then we added all of those up.

188
00:13:20,230 --> 00:13:23,260
You'd get some value, right, five or 10 or whatever.

189
00:13:23,680 --> 00:13:37,570
So here on Line 41, we create this array then online's 42 through 45 or so or 46 lines, 42 to 46.

190
00:13:37,750 --> 00:13:44,800
We create a for loop and we do this because we want to create the game 50 times.

191
00:13:45,070 --> 00:13:45,550
OK.

192
00:13:46,960 --> 00:13:55,330
And by creating the game 50 times, we should be getting a chance to generate 50 random numbers.

193
00:13:55,900 --> 00:14:01,660
OK, now this is just in the test, so we're not going to go look right now at how it's generating that,

194
00:14:01,660 --> 00:14:06,400
although you should know that already using the Java, you tell that random class.

195
00:14:06,820 --> 00:14:14,530
OK, so we're generating 50 random numbers, hopefully by creating the game 50 times right here on Line

196
00:14:14,530 --> 00:14:15,460
43.

197
00:14:16,150 --> 00:14:24,160
And then if we are generating a good spread of random numbers, then every time we call a game not get

198
00:14:24,160 --> 00:14:32,320
random number and store that number in this variable here, we will then access that particular element

199
00:14:32,320 --> 00:14:33,130
of the array.

200
00:14:33,160 --> 00:14:39,220
So in other words, if again, looking back here, if we if the first random number we generated was

201
00:14:39,220 --> 00:14:45,850
a three, then we will go to the third index, which technically is the fourth index because arrays

202
00:14:45,850 --> 00:14:46,960
start with a zero.

203
00:14:47,110 --> 00:14:50,380
But I don't want to be overly confusing here, so I'll just say index three.

204
00:14:50,500 --> 00:14:56,530
We go to index three of the array, which would be this guy here, right?

205
00:14:56,950 --> 00:15:00,880
And then we store tally mark in it, which is this one underneath it?

206
00:15:01,240 --> 00:15:01,720
OK.

207
00:15:02,170 --> 00:15:04,750
And then the loop starts over again.

208
00:15:04,930 --> 00:15:06,760
We create a new guessing game.

209
00:15:07,120 --> 00:15:10,090
We get a new, hopefully a new random number.

210
00:15:10,090 --> 00:15:12,860
And this time it's a five, for example.

211
00:15:12,880 --> 00:15:16,140
Now I'm just using this as an example, since these should be random numbers.

212
00:15:16,150 --> 00:15:19,900
I don't know what the numbers are at the time when I'm just talking about this, right?

213
00:15:20,260 --> 00:15:23,350
But let's pretend like the next time we run it, it's a five.

214
00:15:23,620 --> 00:15:28,660
And so now we're on this element here.

215
00:15:29,840 --> 00:15:30,310
OK.

216
00:15:30,860 --> 00:15:40,010
And so we access Element five and we store Italian mark and and so that's what we're doing online 45.

217
00:15:40,160 --> 00:15:42,530
This is how we access an element.

218
00:15:42,530 --> 00:15:51,770
We refer to the array name which we created up here, random name count and then a square bracket and

219
00:15:51,770 --> 00:15:53,530
then the index.

220
00:15:53,540 --> 00:15:55,790
OK, the index or the element.

221
00:15:56,060 --> 00:16:01,850
So in this case, it would be Element five if the random number generator had generated a five, which

222
00:16:01,850 --> 00:16:02,360
we won't.

223
00:16:02,360 --> 00:16:06,380
You know, again, we don't know what it's going to be, and it doesn't matter, really.

224
00:16:06,650 --> 00:16:07,070
OK?

225
00:16:07,400 --> 00:16:12,170
And so then we store a one in element five.

226
00:16:12,200 --> 00:16:15,710
OK, so that's what you see happening here.

227
00:16:16,250 --> 00:16:16,730
OK.

228
00:16:17,180 --> 00:16:24,210
We're storing a one in Element five and then the loop starts over again.

229
00:16:24,560 --> 00:16:29,810
We create a new guessing game with hopefully a new random number and we get that number.

230
00:16:29,960 --> 00:16:33,530
And let's say this time it's a two per hour.

231
00:16:35,610 --> 00:16:37,080
Fake random numbers here.

232
00:16:37,110 --> 00:16:38,430
Right, so it's a two.

233
00:16:38,850 --> 00:16:48,040
So then we go to Element two, which is this guy here, and we started telling Mark inside of it, Oh,

234
00:16:48,040 --> 00:16:51,060
one, we store a one in it and so you get it right.

235
00:16:51,180 --> 00:16:53,280
We we do this 50 times.

236
00:16:54,360 --> 00:17:00,870
And now every number that was ever generated should have a one in its box, right?

237
00:17:00,870 --> 00:17:02,830
And its holding tank, if you will.

238
00:17:02,850 --> 00:17:03,310
OK.

239
00:17:03,570 --> 00:17:08,100
And every number that we did not visit should have a zero in it.

240
00:17:08,700 --> 00:17:17,820
And so now down here online 48, we create a new variable and a new integer called sum.

241
00:17:18,030 --> 00:17:19,500
I guess we could have called it total.

242
00:17:19,530 --> 00:17:22,740
Maybe that would have been better, and we initialize it to zero.

243
00:17:23,490 --> 00:17:31,020
And then we create another loop, which will only count from zero to 11, while actually from zero to

244
00:17:31,020 --> 00:17:31,410
11.

245
00:17:31,410 --> 00:17:36,000
But the 11 will not be included, right, because we're using counter less than 11.

246
00:17:36,300 --> 00:17:38,430
So 11 itself won't be used.

247
00:17:39,060 --> 00:17:46,310
So it's really zero through 10, and we use this sum plus equals, which is equivalent to saying it's.

248
00:17:48,210 --> 00:17:48,610
OK.

249
00:17:48,810 --> 00:17:51,630
So these are equivalent to each other.

250
00:17:51,870 --> 00:17:55,650
This is just the shorthand which we learned in the numbers module.

251
00:17:56,220 --> 00:17:56,620
All right.

252
00:17:56,640 --> 00:18:05,940
And so this is just saying people running total of the sum of the tally marks that are in this array.

253
00:18:05,970 --> 00:18:06,360
OK.

254
00:18:06,450 --> 00:18:11,100
So what we're literally doing here is we're starting on element zero.

255
00:18:11,850 --> 00:18:19,110
OK, now I don't depict an element zero down here, so let's pretend like we got to element one, which

256
00:18:19,110 --> 00:18:21,190
is this element right here.

257
00:18:21,240 --> 00:18:21,780
OK?

258
00:18:21,810 --> 00:18:26,070
And we set some equal to zero.

259
00:18:26,250 --> 00:18:26,730
OK.

260
00:18:27,660 --> 00:18:31,890
Well, actually, and then we add this value of zero.

261
00:18:33,840 --> 00:18:35,610
To the sum, right?

262
00:18:35,760 --> 00:18:36,960
So if the sum.

263
00:18:38,590 --> 00:18:41,140
Started off being zero.

264
00:18:41,500 --> 00:18:47,140
Then we add this zero here, and we have still zero.

265
00:18:47,920 --> 00:18:51,940
Then we go on to the next element element too.

266
00:18:52,660 --> 00:18:53,830
And we have a one.

267
00:18:54,070 --> 00:18:57,040
So now we add zero plus one, which is one.

268
00:18:58,450 --> 00:19:01,360
Then we go on to Element three and we have a one.

269
00:19:01,840 --> 00:19:04,570
And so one plus one is two.

270
00:19:05,140 --> 00:19:08,640
Then we go to Element four, we have a zero, so sum equals two.

271
00:19:08,650 --> 00:19:12,070
Still, then we go to Element five, which has a one.

272
00:19:12,080 --> 00:19:14,020
So two plus one is three.

273
00:19:14,830 --> 00:19:15,160
OK.

274
00:19:15,190 --> 00:19:16,450
Then six is zero.

275
00:19:16,450 --> 00:19:20,500
So we have a still have three, then element seven has a one.

276
00:19:20,500 --> 00:19:23,050
So now we do three plus one, which is four.

277
00:19:23,440 --> 00:19:27,970
Then we go to Element eight, which has a zero, so sum is still four.

278
00:19:28,210 --> 00:19:32,890
Then we go to Element nine, which has a one two four plus one is five.

279
00:19:33,100 --> 00:19:36,100
And that's how we end up with this five here.

280
00:19:36,280 --> 00:19:37,570
That is the total sum.

281
00:19:37,750 --> 00:19:40,340
That's what this loop is doing.

282
00:19:40,360 --> 00:19:42,370
That's exactly what this loop is doing.

283
00:19:42,610 --> 00:19:49,150
It just keeps a running total of each number that's in this array.

284
00:19:49,270 --> 00:19:56,500
And we're literally just visiting every element in the array, starting with zero going to 10 because

285
00:19:56,500 --> 00:19:58,990
this is less than 11 right, which would mean 10.

286
00:19:59,000 --> 00:20:05,080
So zero through 10, we're going to just find out was there a zero or a one, basically?

287
00:20:05,090 --> 00:20:06,310
Now this isn't binary.

288
00:20:06,340 --> 00:20:07,600
These are real integers.

289
00:20:07,780 --> 00:20:13,120
We just I just didn't want to keep track of anything more than whether or not it had a zero or one in

290
00:20:13,120 --> 00:20:13,240
it.

291
00:20:13,420 --> 00:20:13,780
Right.

292
00:20:14,170 --> 00:20:18,850
And then all we have to do is this tally everything up, which is what this is doing here.

293
00:20:18,850 --> 00:20:25,270
It's tallying up all of the zeros and ones, getting a total sum, which we store here.

294
00:20:25,450 --> 00:20:34,390
Now I also mentioned that we declared this some variable outside of the loop, because when we get here,

295
00:20:34,390 --> 00:20:40,180
which is outside of the loop, we want to refer to the Sun and remember about scope variable scope.

296
00:20:40,450 --> 00:20:49,300
If I had declared this some variable inside of the loop like this, then I'm no longer able to refer

297
00:20:49,300 --> 00:20:55,270
to the some variable outside of the loop because it's outside of the scope, right?

298
00:20:55,660 --> 00:21:02,530
Any variable that you declare inside of a loop only has scope inside of that loop.

299
00:21:02,530 --> 00:21:04,330
And what do I mean by inside of the loop?

300
00:21:04,330 --> 00:21:13,150
I mean, all of the code between this curly brace for the for loop and this curly brace for the for

301
00:21:13,150 --> 00:21:13,870
loop, OK?

302
00:21:13,990 --> 00:21:21,190
So any code, any variables that are defined inside of here can only be used inside of here.

303
00:21:21,550 --> 00:21:27,550
And that's why this is now red, because I moved the declaration for this variable inside of the loop.

304
00:21:27,790 --> 00:21:29,770
OK, so I'm going to move that back.

305
00:21:31,200 --> 00:21:32,490
Outside of the loop.

306
00:21:33,090 --> 00:21:36,660
And now I can use it in the loop, just fine.

307
00:21:36,810 --> 00:21:38,700
But I can also use it outside of the loop.

308
00:21:38,730 --> 00:21:41,910
OK, so now it has a wider scope, if you will.

309
00:21:42,270 --> 00:21:42,750
All right.

310
00:21:43,110 --> 00:21:49,140
So I would say that if you're still feeling a little groggy or a little confused by any of this, you

311
00:21:49,140 --> 00:21:54,300
probably need to go back and watch the lesson on arrays.

312
00:21:55,070 --> 00:22:02,460
OK, and then also watch one of the previous lessons on the for loop or maybe on all of the loops,

313
00:22:02,460 --> 00:22:09,950
but especially the for loop, where I talk again about the scope and how the loop is actually working,

314
00:22:09,960 --> 00:22:10,470
OK?

315
00:22:10,710 --> 00:22:17,460
But hopefully this lesson or this lesson, combined with revisiting arrays and loops, will make this

316
00:22:17,460 --> 00:22:18,750
super clear for you.

317
00:22:18,900 --> 00:22:24,390
Now, one last thing I will mention if you're wondering how did I think of doing it this way?

318
00:22:24,570 --> 00:22:28,050
So that's one of the interesting things about programming.

319
00:22:28,170 --> 00:22:35,100
I've heard some people who are definitely not programmers who have the misconception that programming

320
00:22:35,310 --> 00:22:38,910
is not a creative endeavor, right?

321
00:22:39,060 --> 00:22:42,240
I think those people couldn't possibly be more wrong.

322
00:22:42,540 --> 00:22:46,670
I think it is possible to be a programmer who is not very creative.

323
00:22:46,680 --> 00:22:53,370
I definitely think that's possible and met programmers who need to be told exactly what to do.

324
00:22:53,370 --> 00:22:57,990
They can code it, but they can't think of, you know, creative solutions for problems.

325
00:22:58,080 --> 00:23:02,730
But I think many of the best programmers are actually very creative.

326
00:23:03,000 --> 00:23:11,100
And so I would say that thinking of this approach to determining whether or not our game is actually

327
00:23:11,100 --> 00:23:17,160
producing a good set of random numbers, this is just something I purely made up.

328
00:23:17,160 --> 00:23:21,900
I didn't read this in a book somewhere, not specifically for this, right?

329
00:23:22,170 --> 00:23:29,070
This is where you have to draw on the bits and pieces, the building blocks of programming and figure

330
00:23:29,070 --> 00:23:32,340
out how to apply them to solve a problem, right?

331
00:23:32,610 --> 00:23:37,890
And unfortunately, I don't know if I can directly teach you how to do that.

332
00:23:38,040 --> 00:23:44,610
All I can teach you is the building blocks and show you a number of examples of how to apply those building

333
00:23:44,610 --> 00:23:49,470
blocks and hopefully creative ways to solve real world problems, right?

334
00:23:49,770 --> 00:23:56,520
And maybe eventually you start to get, Oh, I could use one of these things, plus one of these things

335
00:23:56,520 --> 00:23:59,740
here put them together and solve this problem.

336
00:23:59,760 --> 00:24:00,120
Right?

337
00:24:00,600 --> 00:24:04,600
So unfortunately, like I said, that's one thing that I cannot directly teach you.

338
00:24:04,710 --> 00:24:07,260
I read this solution in such and such a book.

339
00:24:07,500 --> 00:24:08,190
No, I didn't.

340
00:24:08,220 --> 00:24:13,290
And in fact, I did actually have to think about this before I taught this lesson.

341
00:24:13,440 --> 00:24:19,520
I had to think about how would I go about proving that the random number generation is good, right?

342
00:24:19,530 --> 00:24:21,420
Is giving us a good spread.

343
00:24:21,450 --> 00:24:25,680
And, you know, I don't know how long it took me to think of more than five minutes.

344
00:24:25,830 --> 00:24:28,770
In fact, initially I thought of another approach.

345
00:24:29,010 --> 00:24:31,660
I don't know if I should share that approach or not.

346
00:24:31,710 --> 00:24:36,150
Maybe I'll talk about it in another lesson if I have time to come back to it.

347
00:24:36,300 --> 00:24:40,210
But there are multiple ways to solve this, and this is just one way.

348
00:24:40,210 --> 00:24:42,120
The one of the other ways that I thought of.

349
00:24:42,120 --> 00:24:46,590
I'm not going to go into great detail had nothing to do with adding things up.

350
00:24:46,980 --> 00:24:53,040
I decided on using this approach because I thought it might be probably the most elegant overall, and

351
00:24:53,040 --> 00:24:58,920
it lets us utilize a number of little techniques that you've already learned throughout this course.

352
00:24:59,250 --> 00:25:05,640
But I thought of, you know, one or two other approaches that didn't necessarily involve doing any

353
00:25:05,640 --> 00:25:08,850
summing or adding up of a total or anything like that at all.

354
00:25:08,880 --> 00:25:11,950
So there are multiple ways that we could have achieved this.

355
00:25:12,180 --> 00:25:16,290
This is just the way that I came up with for now, and I thought it was probably one of the better ways.

356
00:25:17,160 --> 00:25:18,480
All right, I'm going to go ahead.

357
00:25:18,480 --> 00:25:25,050
And this lesson, hopefully this helped you to to put it all together, and I will see you in the next

358
00:25:25,050 --> 00:25:25,350
one.
