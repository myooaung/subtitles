WEBVTT
1
00:00:00.090 --> 00:00:07.650
All right, so next up, let's address our ability to retrieve a person with their address attached.

2
00:00:07.770 --> 00:00:08.100
Right?

3
00:00:08.340 --> 00:00:14.820
So we just finished implementing the ability to save an address that is attached to a person or embedded

4
00:00:14.820 --> 00:00:16.590
in a person, however you want to think of it, right?

5
00:00:16.590 --> 00:00:17.610
We save the person.

6
00:00:17.820 --> 00:00:22.110
And the saving of the address cascades down into the database as well.

7
00:00:22.440 --> 00:00:27.620
But currently we don't have the ability to retrieve the addresses via the person.

8
00:00:27.660 --> 00:00:30.000
So let's remedy that problem now.

9
00:00:30.180 --> 00:00:30.520
All right.

10
00:00:30.540 --> 00:00:37.290
So as usual, we'll start off with a test, and I think maybe I will start off by just copying.

11
00:00:37.710 --> 00:00:44.130
This can save person with an address test because I think that would be a logical beginning for the

12
00:00:44.130 --> 00:00:45.860
ability to retrieve one, right?

13
00:00:45.900 --> 00:00:51.510
We just saved one, and now we'll get it back out and I'm going to model model it a little bit off of

14
00:00:51.510 --> 00:00:53.280
the can find person by ID.

15
00:00:53.370 --> 00:00:56.400
In fact, I think I'm going to model it a lot off of that.

16
00:00:56.400 --> 00:01:06.060
So I'm going to paste here and then we will change this name to can find a person.

17
00:01:08.550 --> 00:01:12.120
By I.D. with Address, how about that?

18
00:01:13.110 --> 00:01:19.450
OK, so here we are saving that person well, actually here and there's the person right there.

19
00:01:19.710 --> 00:01:27.810
And then if we model this after what we did on the can find person by I.D. After we save the person,

20
00:01:27.930 --> 00:01:33.360
we then turn around and do a repo, find by ID and then we use the person's ID, right?

21
00:01:33.630 --> 00:01:38.370
So let's try doing that down here.

22
00:01:38.880 --> 00:01:49.770
So we will do a repo dot, find my I.D. and then we will pass in the saved person's I.D. like so and

23
00:01:49.770 --> 00:01:52.960
that's going to return an optional though.

24
00:01:52.980 --> 00:01:55.320
And so then we will just do a get.

25
00:01:55.590 --> 00:02:00.520
And then we will capture the output of that, which is just going to be a person.

26
00:02:00.520 --> 00:02:04.260
Then I suppose I will go ahead and call this a found person again.

27
00:02:04.830 --> 00:02:09.060
And now down here, let me just create a brand new assertion.

28
00:02:09.060 --> 00:02:11.070
So our assertion here.

29
00:02:11.580 --> 00:02:14.820
Now this is all about the address more than the person.

30
00:02:14.820 --> 00:02:23.460
So I'm thinking to do something like assert that the found person does not get home address.

31
00:02:23.760 --> 00:02:26.210
Dot dot get.

32
00:02:26.280 --> 00:02:31.680
So in other words, let's unwrap the the address out of the optional.

33
00:02:31.950 --> 00:02:32.800
We'll do that here.

34
00:02:32.820 --> 00:02:35.900
OK, so now we should have an actual address.

35
00:02:35.910 --> 00:02:40.500
And then let's dig in to one of the fields on the address.

36
00:02:40.500 --> 00:02:43.920
Perhaps and maybe we'll do a comparison of something.

37
00:02:44.070 --> 00:02:45.540
So I don't feel like typing a lot.

38
00:02:45.540 --> 00:02:51.660
So maybe we'll say get the state and then we'll say is equal to.

39
00:02:51.930 --> 00:02:55.830
And if you check up here, we're setting that state to Washington.

40
00:02:55.830 --> 00:02:58.940
So let's just say it should be that way.

41
00:02:59.760 --> 00:03:00.150
OK.

42
00:03:00.210 --> 00:03:00.930
All right.

43
00:03:01.110 --> 00:03:03.560
So I think that should be ready to go.

44
00:03:03.570 --> 00:03:06.630
So let's run this and see that it should fail first.

45
00:03:08.190 --> 00:03:13.560
All right, and I will highlight just this guy, and there's no value present, which makes sense,

46
00:03:13.560 --> 00:03:13.800
right?

47
00:03:13.800 --> 00:03:18.810
Because it's an optional I will take that as a as a reasonable level of failure for now.

48
00:03:19.260 --> 00:03:19.680
All right.

49
00:03:19.680 --> 00:03:21.920
And so now let's just make it work.

50
00:03:21.930 --> 00:03:24.660
And again, I'm not going to do the cat and mouse game.

51
00:03:24.660 --> 00:03:25.980
Let's just go for it here.

52
00:03:26.370 --> 00:03:26.880
All right.

53
00:03:26.890 --> 00:03:28.920
So where to begin?

54
00:03:29.670 --> 00:03:37.260
Well, I think maybe we should start off by possibly looking at the methods in the person repository

55
00:03:37.260 --> 00:03:38.640
that are related to finding.

56
00:03:38.880 --> 00:03:45.120
So I'm going to jump over to the person repository or people repository.

57
00:03:45.480 --> 00:03:53.040
So down here we've got this extract entity from results set, and this one method is kind of being associated

58
00:03:53.040 --> 00:03:58.800
with a bunch of functionality, right, with the ability to find by ID and all these other things.

59
00:03:58.810 --> 00:04:03.060
So right now, we're just concerned with the ability to find by I.D., though.

60
00:04:04.230 --> 00:04:11.520
So the job of this method is indeed to take a results set and then extract all of the values from that

61
00:04:11.520 --> 00:04:14.940
result set in order to build up a new person.

62
00:04:14.940 --> 00:04:16.680
And then it returns that person.

63
00:04:16.920 --> 00:04:17.340
OK.

64
00:04:17.700 --> 00:04:21.420
So I think this might be an OK place to start.

65
00:04:21.810 --> 00:04:27.630
So let's take a quick look at a graphical representation of these tables, just as a reminder of what's

66
00:04:27.630 --> 00:04:28.770
even going on here.

67
00:04:29.130 --> 00:04:36.680
So here I've got a spreadsheet that represents in blue a little bit of sample data of the people table

68
00:04:36.840 --> 00:04:40.500
and then some sample data of the addresses as well.

69
00:04:41.040 --> 00:04:47.700
And so if you'll recall, we don't have all of the columns here because we don't really need them here.

70
00:04:47.710 --> 00:04:51.420
We've got the ID of the person last name, first name, date of birth.

71
00:04:51.600 --> 00:04:54.810
The main thing I want to depict here, though, is the home address.

72
00:04:54.960 --> 00:05:01.290
This is our foreign key column, if you will, that needs to be pointing to records in the addresses

73
00:05:01.290 --> 00:05:01.830
table.

74
00:05:01.860 --> 00:05:02.280
OK.

75
00:05:02.520 --> 00:05:08.400
So for example, here we've got Jerry Smith with a home address value of 300.

76
00:05:08.400 --> 00:05:14.700
That 300 should be pointing to a record in the addresses table with an idea of 300.

77
00:05:14.730 --> 00:05:20.340
OK, so that is to say that Jerry Smith lives at nine eight seven six Fountain Lane, for example,

78
00:05:20.520 --> 00:05:21.910
and so on and so forth.

79
00:05:21.930 --> 00:05:28.620
OK, so the main thing I wanted to just make sure you're clear on is the fact that the results set that

80
00:05:28.620 --> 00:05:35.790
we are currently receiving for these people will have a column in it now, which corresponds to this

81
00:05:35.790 --> 00:05:42.840
home address column, and we're going to need that value so that we can then turn around and go grab

82
00:05:43.200 --> 00:05:47.080
one of these rows for the corresponding address of that person.

83
00:05:47.100 --> 00:05:47.550
OK.

84
00:05:48.090 --> 00:05:50.310
So let's jump back over to the idea.

85
00:05:50.370 --> 00:05:50.660
All right.

86
00:05:50.670 --> 00:05:54.840
So here we are grabbing various column data, right?

87
00:05:54.990 --> 00:06:00.900
And currently we're just grabbing that data and then capturing it into local variables and then using

88
00:06:00.900 --> 00:06:03.810
those variables to create this new person here.

89
00:06:04.080 --> 00:06:11.490
So first thing I think we want to do is add the ability to grab the home, address foreign key value,

90
00:06:11.490 --> 00:06:12.120
if you will.

91
00:06:12.150 --> 00:06:14.610
OK, so let's see what that might look like.

92
00:06:14.610 --> 00:06:16.200
We can do an arrest.

93
00:06:16.450 --> 00:06:22.140
Get now that's going to be a right because it's a it's a it's a number that points back to an ID.

94
00:06:22.350 --> 00:06:30.570
So that's going to be along and we can use a column name here and the column name is going to be home

95
00:06:30.990 --> 00:06:35.140
address because that's what we renamed it to a few lessons ago.

96
00:06:36.180 --> 00:06:41.640
And then we can capture that and I will go ahead and just call it home address and notice.

97
00:06:41.640 --> 00:06:45.030
I'm using the camel case version of the name right there.

98
00:06:45.270 --> 00:06:45.720
All right.

99
00:06:45.720 --> 00:06:46.320
Very good.

100
00:06:46.620 --> 00:06:48.540
And now here's the key.

101
00:06:48.720 --> 00:06:51.270
So we need to actually go retrieve that address.

102
00:06:51.450 --> 00:06:58.770
And so just as with the saving, we saved an address by delegating down to the address repository.

103
00:06:59.130 --> 00:07:05.040
We can use the address repository to do the lookup of an address as well.

104
00:07:05.130 --> 00:07:08.140
And I think that might make a lot of sense to do here.

105
00:07:08.160 --> 00:07:11.280
So let's go ahead and see what that might look like.

106
00:07:11.670 --> 00:07:19.470
So I think we already created a field for the address repository within the people repository address

107
00:07:19.470 --> 00:07:27.780
repository right there, so we can just reference that address repository and then we can use the Find

108
00:07:27.780 --> 00:07:33.390
My ID, which we're now simply inheriting from the KRudd repository, right?

109
00:07:33.390 --> 00:07:37.220
So we can use this pass in that home address now.

110
00:07:37.230 --> 00:07:39.960
Actually, I just realized here we shouldn't call this home address.

111
00:07:39.960 --> 00:07:42.300
It's not an address, it's an idea of an address.

112
00:07:42.300 --> 00:07:45.300
So I'd like to be a little more clear on that.

113
00:07:45.510 --> 00:07:49.740
So I'm going to rename that with a shift of six and then add on ID there.

114
00:07:49.740 --> 00:07:52.840
Just to be a little more clear that we're just dealing with only a number.

115
00:07:52.860 --> 00:07:53.300
All right.

116
00:07:53.310 --> 00:07:56.940
And then that will return an optional address.

117
00:07:58.700 --> 00:08:05.740
And now I will call this a home address, because this is this should be a full object at this point,

118
00:08:05.750 --> 00:08:10.040
and now we need to associate that address with this person now.

119
00:08:10.040 --> 00:08:15.110
Currently, I don't believe we have a constructor that will allow us to do that.

120
00:08:15.120 --> 00:08:20.030
I'm just put my cursor inside of the left parentheses there and then did a command p for parameters

121
00:08:20.210 --> 00:08:21.410
to show me the parameters.

122
00:08:21.410 --> 00:08:25.910
And no, we do not have a constructor for that, nor do we really need one.

123
00:08:26.030 --> 00:08:32.540
So what I'm going to do instead is just select this entire new person and I'm going to extract the variable

124
00:08:32.540 --> 00:08:37.400
out of that with an option Command V. And I will just allow it to be called person.

125
00:08:37.640 --> 00:08:44.060
Now that I have that, I can make a new line right before the return statement here and now I can just

126
00:08:44.060 --> 00:08:49.880
call the setter method so I can call Person Dot set home address.

127
00:08:50.000 --> 00:08:56.090
Now remember, I chose to make the setter method for the home address, take an address and not an optional

128
00:08:56.090 --> 00:08:56.630
address.

129
00:08:56.660 --> 00:09:05.000
OK, now of course, since our home address here is an optional whereas this method is expecting an

130
00:09:05.000 --> 00:09:07.880
actual address, we'll want to be mindful of that.

131
00:09:08.210 --> 00:09:13.370
So what we can do here is a few things we could do home address, dot or else.

132
00:09:14.210 --> 00:09:19.130
And then really, in that case, we're just going to go ahead and just pass in a null anyway.

133
00:09:19.370 --> 00:09:24.590
Now remember that the set home address method, though, is going to see that that's a null is going

134
00:09:24.590 --> 00:09:27.900
to go ahead and just wrap this back in an optional anyway.

135
00:09:28.130 --> 00:09:35.740
We also could add an additional set home address method that takes an optional in addition to an address.

136
00:09:35.740 --> 00:09:39.230
So we'd have to set home address methods, and that's totally valid.

137
00:09:39.410 --> 00:09:40.760
That's called overloading, right?

138
00:09:40.810 --> 00:09:46.610
We'd be overloading the set home address method to have two versions of it that take two different inputs.

139
00:09:46.610 --> 00:09:47.660
We could do that, too.

140
00:09:47.990 --> 00:09:49.940
It would be fine, but this works also.

141
00:09:50.150 --> 00:09:50.840
All right.

142
00:09:51.080 --> 00:09:55.060
So now if there was an address that would get set, all right.

143
00:09:55.070 --> 00:09:57.860
Now, we've got a couple of other steps that we're going to have to do.

144
00:09:57.980 --> 00:10:04.400
One of them is the fact that this find by ID method probably needs to be revised a bit to make sure

145
00:10:04.400 --> 00:10:07.820
that it's retrieving the additional column for the home address.

146
00:10:07.970 --> 00:10:09.320
So I'm just going to click on it.

147
00:10:09.320 --> 00:10:11.600
And actually, I'm sorry, I'm looking at the enum here.

148
00:10:11.600 --> 00:10:13.120
The the query is over here.

149
00:10:13.130 --> 00:10:15.170
Fine by ID sequel someone a command.

150
00:10:15.170 --> 00:10:16.190
Click on that.

151
00:10:17.390 --> 00:10:18.820
And what do we have here?

152
00:10:18.830 --> 00:10:25.910
We've got selected first name, last name, date of birth and salary from people where ID equals whatever.

153
00:10:26.090 --> 00:10:29.860
So, yeah, we need to add in one more column now, right?

154
00:10:29.870 --> 00:10:30.800
Which is the.

155
00:10:32.130 --> 00:10:36.090
Home address, so that part is good.

156
00:10:36.120 --> 00:10:42.630
And then the other thing we're going to have to do, though, is actually teach the address repository

157
00:10:42.870 --> 00:10:44.580
how to retrieve an address, right?

158
00:10:44.580 --> 00:10:48.420
So it knows how to say that because we gave it the insert statement for that.

159
00:10:48.600 --> 00:10:51.620
But we did not implement the ability to retrieve.

160
00:10:51.630 --> 00:10:57.390
So let's jump over to the address repository and I'm just command clicking or control.

161
00:10:57.390 --> 00:11:02.460
Be on the address repository class in the last class to jump over to here.

162
00:11:03.180 --> 00:11:03.420
All right.

163
00:11:03.420 --> 00:11:09.600
So here we are in the address repository and we implemented the ability to save and there's our school

164
00:11:09.600 --> 00:11:10.470
for that.

165
00:11:10.590 --> 00:11:17.250
But to retrieve, we will need to implement SQL for that and we can we can put it anywhere.

166
00:11:17.250 --> 00:11:22.680
But maybe I will put it on this method here because this is the method that would be used to actually

167
00:11:22.680 --> 00:11:26.220
map what we are retrieving back into an object again.

168
00:11:26.610 --> 00:11:32.650
So let's see what that might look like someone to make making at school.

169
00:11:33.030 --> 00:11:35.820
And then I will refer to an operation type.

170
00:11:41.570 --> 00:11:47.990
And this will be fined by ADI, and then the value will be.

171
00:11:49.010 --> 00:11:51.650
And I'm going to use the tax block again.

172
00:11:53.410 --> 00:12:02.110
So let's try a select I.D. on a street address and address it to a city kind of state postcode county

173
00:12:02.110 --> 00:12:14.440
region and country from addresses where I.D. equals question mark.

174
00:12:14.800 --> 00:12:15.520
All right.

175
00:12:15.940 --> 00:12:22.750
And then our credit repository is going to assume that there is that that one little question mark there

176
00:12:22.750 --> 00:12:25.750
and it knows how to bind to that and execute this query for us.

177
00:12:25.750 --> 00:12:27.370
So we should be good there.

178
00:12:28.240 --> 00:12:32.320
And alternatively, I could have just said select star instead of all of these.

179
00:12:32.320 --> 00:12:38.980
But I did mention before that it's it's generally considered better practice to be explicit with the

180
00:12:38.980 --> 00:12:40.660
actual columns that we want.

181
00:12:41.920 --> 00:12:42.320
All right.

182
00:12:42.340 --> 00:12:45.010
Though in this case, it probably wouldn't have mattered too much.

183
00:12:45.580 --> 00:12:46.000
All right.

184
00:12:46.010 --> 00:12:51.430
And now down here, we need to actually pretend like we're getting back some results from our results

185
00:12:51.430 --> 00:12:55.900
set, which is here, and then we're going to map those back into an object again.

186
00:12:56.380 --> 00:13:04.920
So I will put my cursor down here and we will simply start extracting values so we'll do an IRS dot

187
00:13:05.110 --> 00:13:07.020
get long.

188
00:13:07.780 --> 00:13:13.150
And by the way, I just want to make sure you all recall that the reason I know to use an IRS don't

189
00:13:13.150 --> 00:13:20.440
get long here instead of a get string or whatever is because I'm looking on Line 19 on our select statement,

190
00:13:20.710 --> 00:13:27.610
and I see that the first column I'm selecting for is an ID is the ID column, and I know that the ID

191
00:13:27.730 --> 00:13:30.940
column maps to a long in Java.

192
00:13:31.180 --> 00:13:36.520
And likewise, I know that the next column I'm selecting for, which is street address, was modeled

193
00:13:36.520 --> 00:13:42.400
in the database as a VAR car and I know that of our car maps to a string in Java.

194
00:13:42.400 --> 00:13:49.860
So that's just a quick little reminder on how I know which methods of the results set to use are RC.

195
00:13:49.910 --> 00:13:51.850
I get long or get string or whatever.

196
00:13:51.850 --> 00:13:57.940
If I had a date column, I'd be mapping to a timestamp or whatever type of date field in Java.

197
00:13:58.060 --> 00:13:58.450
OK.

198
00:14:00.370 --> 00:14:03.790
And then we will pass in the name of that column, which is I'd.

199
00:14:05.520 --> 00:14:10.050
And then I will go ahead and capture that, and I'm going to call for now and an honest look at string

200
00:14:10.260 --> 00:14:12.660
and I'll name will be street unfair address.

201
00:14:12.900 --> 00:14:17.640
And after that, and we'll call it, Yes, us, OK, so it's not that string, and it will have a column

202
00:14:17.640 --> 00:14:20.610
called address to an to call that just just.

203
00:14:21.240 --> 00:14:24.090
And then it's like a string in a column called City.

204
00:14:24.540 --> 00:14:27.360
After that, and if fine city almost like a string.

205
00:14:28.800 --> 00:14:32.070
State capture that 48 hour is like a dream.

206
00:14:33.010 --> 00:14:35.950
A code after that was go to sign our escort during.

207
00:14:38.090 --> 00:14:38.450
County.

208
00:14:39.640 --> 00:14:41.740
Cameron County has been named after Katrina.

209
00:14:42.680 --> 00:14:43.070
Reading.

210
00:14:44.880 --> 00:14:50.820
After that region, now here, we need to think about this a bit in the database, the region will be

211
00:14:50.820 --> 00:14:56.730
taxed, but in our Java domain, we've modeled the region to be an enum right?

212
00:14:57.000 --> 00:15:03.000
And so now if we want this to work, we need to map the text back into the enum.

213
00:15:03.330 --> 00:15:06.930
Do you remember how to go from text to an enum?

214
00:15:06.930 --> 00:15:10.110
If you do, go ahead and try this out on your own?

215
00:15:11.440 --> 00:15:11.820
OK.

216
00:15:11.860 --> 00:15:15.520
So did you get it all right, so to handle that?

217
00:15:15.550 --> 00:15:19.570
What we can do is refer to the region enum here.

218
00:15:20.480 --> 00:15:31.070
And then it has a value of method value of and then we can basically just wrap this string that we're

219
00:15:31.070 --> 00:15:33.260
retrieving like this now.

220
00:15:33.260 --> 00:15:36.680
We are going to want to do one more thing, though, but I'll show you that in just a second, but let

221
00:15:36.680 --> 00:15:39.530
me go ahead and finish capturing this as region.

222
00:15:40.070 --> 00:15:41.180
OK, so there's our region.

223
00:15:41.360 --> 00:15:49.100
Now here's the one thing that I think we also want to consider, though if we jump into the region in

224
00:15:49.100 --> 00:15:53.150
a room here, we see that all of the constants are all uppercase, right?

225
00:15:53.600 --> 00:16:02.720
And so the value of method here is going to assume that the strings were passing in are all uppercase

226
00:16:02.720 --> 00:16:03.050
two.

227
00:16:03.200 --> 00:16:10.010
However, if we jump back over here to some sample data, we see here that there were some records that

228
00:16:10.010 --> 00:16:12.980
actually were not all uppercase, right?

229
00:16:13.280 --> 00:16:17.760
All of these pre-existing records here actually happened, not to be all uppercase.

230
00:16:17.780 --> 00:16:24.650
So let's make our code a little safe so that it won't matter if the names here are uppercase or not.

231
00:16:25.070 --> 00:16:31.640
So can you think of a way to write the code so that whether or not the region text in the database is

232
00:16:31.640 --> 00:16:37.490
like this with a Capital First letter and all the rest lowercase or all caps are all lowercase, it

233
00:16:37.490 --> 00:16:38.180
wouldn't matter.

234
00:16:38.300 --> 00:16:43.670
Can you think of a way to make it so that that won't matter, and this code will always work?

235
00:16:43.790 --> 00:16:45.710
If you want to take a stab at that, go ahead.

236
00:16:47.080 --> 00:16:47.450
All right.

237
00:16:47.470 --> 00:16:48.460
Did you get that one?

238
00:16:49.180 --> 00:16:50.780
OK, so this is pretty easy.

239
00:16:50.800 --> 00:16:54.670
All you have to do is when we do this, our state get string.

240
00:16:54.670 --> 00:16:57.100
This string is going to return a string, right?

241
00:16:57.340 --> 00:17:02.540
And so then we can call a method on the string like to upper.

242
00:17:02.830 --> 00:17:04.750
Remember that to uppercase.

243
00:17:05.680 --> 00:17:10.630
And that's going to make the entire string upper case, no matter how it originally was.

244
00:17:10.750 --> 00:17:18.370
And now we should be much safer to successfully be able to convert that field over as long as it's not

245
00:17:18.370 --> 00:17:18.850
null.

246
00:17:18.970 --> 00:17:20.740
Now, if it's null, we're going to have problems.

247
00:17:21.550 --> 00:17:22.240
All right.

248
00:17:22.600 --> 00:17:26.980
And then we've got one more field to grab.

249
00:17:28.010 --> 00:17:30.080
Our start capturing.

250
00:17:32.450 --> 00:17:33.260
Country.

251
00:17:34.570 --> 00:17:36.910
And now we're back to the easy stuff again.

252
00:17:37.570 --> 00:17:40.240
All right, so there's all of our fields.

253
00:17:41.790 --> 00:17:43.350
Extracted from the results.

254
00:17:43.500 --> 00:17:46.560
And now all we need to do is just go make an actual address, right?

255
00:17:46.800 --> 00:17:48.660
So new address.

256
00:17:48.690 --> 00:17:51.000
Let's see now what do we have here?

257
00:17:51.450 --> 00:17:56.460
OK, so it looks like we do have a constructor that takes every, every single field already.

258
00:17:56.460 --> 00:18:02.730
So ID street address address to city.

259
00:18:03.690 --> 00:18:06.420
State postcode.

260
00:18:07.590 --> 00:18:08.460
Country.

261
00:18:10.110 --> 00:18:11.310
Oh, county.

262
00:18:11.490 --> 00:18:12.300
County.

263
00:18:13.330 --> 00:18:13.930
Oh, I missed.

264
00:18:14.440 --> 00:18:16.450
No, I didn't miss Co. OK, there's Co..

265
00:18:16.510 --> 00:18:16.980
OK.

266
00:18:17.140 --> 00:18:18.070
Co. also.

267
00:18:18.280 --> 00:18:19.990
And finally, region.

268
00:18:21.710 --> 00:18:23.390
And then capture that.

269
00:18:26.430 --> 00:18:32.640
And then return it now, I could have just said return right here and just, you know, without the

270
00:18:32.640 --> 00:18:35.640
equal sign and just returned the new address, blah blah blah.

271
00:18:35.880 --> 00:18:37.320
Or I can capture it here.

272
00:18:37.320 --> 00:18:39.020
It doesn't matter that much.

273
00:18:41.610 --> 00:18:50.130
All right, so there we should now have hopefully the ability to retrieve an address from the database

274
00:18:50.130 --> 00:18:50.700
by ID.

275
00:18:51.420 --> 00:18:54.690
So now I think we might be able to go ahead and run this.

276
00:18:55.290 --> 00:19:01.290
So let me open up the test that we just ran and let's just run it and see what happens.

277
00:19:01.950 --> 00:19:03.090
Well, there you go.

278
00:19:03.180 --> 00:19:04.770
Looks like that's working, huh?

279
00:19:04.860 --> 00:19:10.980
Now let's be unhappy and run all of the tests because I don't know how that's going to go.

280
00:19:11.340 --> 00:19:12.960
That might not go quite as well.

281
00:19:13.950 --> 00:19:14.290
All right.

282
00:19:14.310 --> 00:19:22.470
So I'm back here in the people repository tests, and I'm going to go ahead now and run all the tests.

283
00:19:25.220 --> 00:19:25.700
Hey.

284
00:19:26.120 --> 00:19:28.370
Awesome, awesome look.

285
00:19:28.670 --> 00:19:32.450
They're all working, so apparently we did not introduce any regressions.

286
00:19:32.600 --> 00:19:38.780
That is to say we did not break any previously working functionality, which is always a nice thing

287
00:19:38.780 --> 00:19:39.770
to to have.

288
00:19:40.190 --> 00:19:40.490
All right.

289
00:19:40.520 --> 00:19:43.040
So I'm going to go ahead and close that down.

290
00:19:43.280 --> 00:19:45.410
Come back down here to our test.

291
00:19:45.980 --> 00:19:46.330
All right.

292
00:19:46.340 --> 00:19:47.210
So awesome.

293
00:19:47.540 --> 00:19:48.920
Now that wasn't too bad, was it?

294
00:19:49.640 --> 00:19:56.150
So in the next lesson, I want to stay with this use case, though, of finding a person by ID because

295
00:19:56.150 --> 00:20:02.000
I want to show you another way that this can be implemented, which may have some benefits, and also

296
00:20:02.000 --> 00:20:06.440
gives me an excuse to teach you some more cool stuff about databases that you should know about.

297
00:20:06.740 --> 00:20:08.720
So I'm going to go ahead and see you in the next one.
