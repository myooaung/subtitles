1
00:00:00,840 --> 00:00:07,920
Welcome back in this lesson, I'm going to introduce you to another streams API technique that's a little

2
00:00:07,920 --> 00:00:09,540
bit more advanced now.

3
00:00:10,230 --> 00:00:16,170
It's nothing you can't handle, though, and it can be a very useful technique to be aware of when you

4
00:00:16,170 --> 00:00:20,730
start to engage in slightly more advanced uses of the Streams API.

5
00:00:21,180 --> 00:00:27,240
So to teach this lesson, we're going to set up a scenario using our existing data set.

6
00:00:27,360 --> 00:00:37,200
So turning to the idea here, let us set up a scenario in which we want to collect all of the first

7
00:00:37,200 --> 00:00:40,560
names in our list of employees.

8
00:00:40,980 --> 00:00:41,460
OK.

9
00:00:41,970 --> 00:00:50,400
And we want to identify all of the unique letters that comprise all of the first names.

10
00:00:50,850 --> 00:00:53,200
Totally a contrived scenario.

11
00:00:53,220 --> 00:00:59,910
OK, maybe maybe you're maybe you're a programmer working for a linguist and the linguist wants to get

12
00:00:59,910 --> 00:01:07,380
like a character frequency, some kind of a character frequency, statistical gathering type of thing,

13
00:01:07,390 --> 00:01:07,700
right?

14
00:01:07,710 --> 00:01:13,200
So they want to know out of all these first names, how many A's are there and how many Zs and something

15
00:01:13,200 --> 00:01:13,680
like that.

16
00:01:13,860 --> 00:01:18,720
So for right now, we won't be counting the frequency of these characters.

17
00:01:18,720 --> 00:01:25,650
We just want to identify each unique instance of the characters and print them out.

18
00:01:25,830 --> 00:01:27,270
So let me show you what I mean.

19
00:01:27,690 --> 00:01:30,750
Let's turn to the virtual sheet of paper here.

20
00:01:31,590 --> 00:01:37,020
Let's pretend like we've got a few first names and I'm not going to write them all out.

21
00:01:37,230 --> 00:01:41,640
But let's say that we've got some first names here, like we've got Fred.

22
00:01:44,770 --> 00:01:46,750
And we've got Barney.

23
00:01:47,170 --> 00:01:49,060
We'll just go with those two.

24
00:01:50,620 --> 00:01:51,340
Barney.

25
00:01:53,180 --> 00:02:00,770
And what we want to do is to identify all of the unique characters that comprise all of the first names

26
00:02:00,770 --> 00:02:01,850
that we encounter.

27
00:02:02,240 --> 00:02:10,250
So when we do that, what we would end up with, like the end goal here would be we'd have an f because

28
00:02:10,250 --> 00:02:16,550
there's only one f we'd have an R just one R, though, even though there are multiple R's here, right?

29
00:02:17,910 --> 00:02:21,420
So we'd have just that one are there are multiple E's.

30
00:02:22,890 --> 00:02:24,930
We just want one.

31
00:02:26,650 --> 00:02:30,700
Let's see, there's a D, there's a B.

32
00:02:31,960 --> 00:02:34,390
Just one and A.

33
00:02:36,470 --> 00:02:39,620
In and a way.

34
00:02:39,650 --> 00:02:47,850
OK, so so this is what we would end up with at the end of this exercise if we only had the two names.

35
00:02:47,870 --> 00:02:52,700
OK, now we're going to iterate over all of the names, though, so we'll we'll have, you know, like

36
00:02:52,700 --> 00:02:56,390
some double you and and I and so on and so forth, right?

37
00:02:57,050 --> 00:02:59,150
But this is just to give you an example.

38
00:02:59,180 --> 00:02:59,630
OK.

39
00:03:00,560 --> 00:03:05,180
Again, I acknowledge this is totally contrived and not very useful in and of itself.

40
00:03:05,360 --> 00:03:08,270
It's just an excuse for us to learn these techniques.

41
00:03:08,840 --> 00:03:09,160
All right.

42
00:03:09,170 --> 00:03:13,760
So then the question becomes, Well, how can we accomplish this, right?

43
00:03:14,510 --> 00:03:17,330
So let's analyze what we know so far.

44
00:03:18,230 --> 00:03:28,780
We know that we can use the Stream's API to iterate over these lines and we can convert them into employees,

45
00:03:29,030 --> 00:03:33,320
and then we can map those employees to their first names, right?

46
00:03:33,530 --> 00:03:40,160
And so right there, when we map the employees to their first names, we're going to end up with a stream

47
00:03:40,820 --> 00:03:43,940
of first name strings.

48
00:03:43,970 --> 00:03:44,330
Right?

49
00:03:44,540 --> 00:03:47,930
So let me show what that might look like graphically.

50
00:03:48,290 --> 00:03:55,190
So a stream of first name strings would look like might look like this.

51
00:03:56,000 --> 00:04:01,100
I'm going to use double quotation marks to indicate a string.

52
00:04:01,130 --> 00:04:04,880
OK, so we'd have Fred.

53
00:04:08,050 --> 00:04:09,790
And we'd have.

54
00:04:12,130 --> 00:04:12,910
Barney.

55
00:04:14,040 --> 00:04:16,770
Again, I'm only going to show a couple of names here.

56
00:04:19,260 --> 00:04:27,390
And then to show that this is a stream of strings, I'm going to use the color blue and I'm just going

57
00:04:27,390 --> 00:04:28,920
to kind of outline.

58
00:04:30,300 --> 00:04:31,500
All of that.

59
00:04:32,130 --> 00:04:38,400
Like, so, OK, so the blue box represents a stream, OK, so we've got a stream of strings.

60
00:04:38,640 --> 00:04:41,340
So we in this case, we've got two strings.

61
00:04:41,940 --> 00:04:49,480
Fred is a string as indicated by the double quotes, and then Barney is a string indicated by the double

62
00:04:49,530 --> 00:04:49,870
quotes.

63
00:04:49,890 --> 00:04:51,900
OK, so that's what we would have.

64
00:04:52,440 --> 00:04:56,610
Let me grab this and make a little room.

65
00:04:57,510 --> 00:04:59,340
So I'm going to bring this down a bit.

66
00:04:59,730 --> 00:05:05,730
OK, so that's what we would have if we were to do something like map.

67
00:05:10,290 --> 00:05:11,460
Employee.

68
00:05:15,430 --> 00:05:16,540
What does it get?

69
00:05:17,910 --> 00:05:18,600
First.

70
00:05:21,390 --> 00:05:21,930
Name.

71
00:05:28,440 --> 00:05:28,770
Right.

72
00:05:29,070 --> 00:05:35,070
We'd end up with a stream of first name strings, as depicted here.

73
00:05:35,880 --> 00:05:43,260
OK, now keep in mind what we're wanting at the end of, of all of our mapping and whatever else we

74
00:05:43,260 --> 00:05:45,450
may find ourselves having to do.

75
00:05:45,840 --> 00:05:49,650
We want to end up with this.

76
00:05:51,900 --> 00:05:53,220
At the end of that, right?

77
00:05:55,770 --> 00:05:58,740
So the the question is, how can we end up with that?

78
00:05:59,160 --> 00:06:03,030
OK, so maybe kind of thinking about this backward a little bit.

79
00:06:06,960 --> 00:06:16,650
What I see down here at the bottom of our end goal here is that we essentially want a stream of.

80
00:06:17,590 --> 00:06:19,540
Character strings.

81
00:06:21,980 --> 00:06:27,490
So I'm depicting each letter as its own string.

82
00:06:30,580 --> 00:06:32,530
Right now, why do I say that?

83
00:06:32,560 --> 00:06:40,240
How do I know that we ultimately want a stream of character strings?

84
00:06:40,870 --> 00:06:45,790
Well, the way that I know that is that we want unique letters, right?

85
00:06:46,870 --> 00:06:54,820
So we're going to have to treat each letter as its own item inside of a stream.

86
00:06:55,150 --> 00:06:58,930
And if we do that, then we can do something kind of cool.

87
00:06:59,290 --> 00:07:02,500
Imagine if we have hold on a second here.

88
00:07:02,620 --> 00:07:06,490
I will even depict this guy as a stream.

89
00:07:06,880 --> 00:07:10,870
OK, imagine prior to this if we have.

90
00:07:14,500 --> 00:07:15,790
The whole entire.

91
00:07:17,670 --> 00:07:21,660
Repeated letters show you what I mean here.

92
00:07:27,740 --> 00:07:37,100
All right, so if we have all of the letters of these first names with no duplicates removed and this

93
00:07:37,100 --> 00:07:38,330
is a dream.

94
00:07:42,380 --> 00:07:42,780
Right.

95
00:07:42,800 --> 00:07:46,370
So if we had that, then what we could do.

96
00:07:47,650 --> 00:07:51,130
Pretty easily is to just call.

97
00:07:52,550 --> 00:07:56,780
Dot distinct, right?

98
00:07:58,720 --> 00:08:06,580
This blue thing is a stream, right, and so we can call the distinct method of the streams API, and

99
00:08:06,580 --> 00:08:07,840
then that would give us.

100
00:08:11,030 --> 00:08:15,070
The stream of unique character strings, right?

101
00:08:15,080 --> 00:08:17,300
So in other words, it would get rid of the duplicates.

102
00:08:17,420 --> 00:08:17,840
Right?

103
00:08:18,320 --> 00:08:22,190
So this distinct tier would find.

104
00:08:23,030 --> 00:08:27,140
Let's see, where are the duplicates it would get rid of that are right there.

105
00:08:27,470 --> 00:08:30,080
It would get rid of that E. Right there, right?

106
00:08:30,500 --> 00:08:30,930
All right.

107
00:08:30,980 --> 00:08:32,720
So kind of going backward.

108
00:08:33,860 --> 00:08:43,250
We know that we would like to have a stream of individual character strings.

109
00:08:44,000 --> 00:08:46,790
So again, the question is how how can we get that?

110
00:08:47,420 --> 00:08:59,030
Well, coming back up here to the mapping of the get first name call, I think we should recognize that

111
00:08:59,030 --> 00:09:05,370
we want to separate out the characters from each of these names, right?

112
00:09:05,380 --> 00:09:08,060
We want the characters as their own separate thing.

113
00:09:08,060 --> 00:09:10,370
So how can we do that now?

114
00:09:11,960 --> 00:09:14,550
I can think of a couple of ways, and I'll be honest with you.

115
00:09:15,290 --> 00:09:21,800
If I were not already familiar with the Streams API and the direction that we're heading down, one

116
00:09:21,800 --> 00:09:31,280
approach that I might have considered doing might have been to try doing something like, let's see

117
00:09:31,280 --> 00:09:34,460
here doing something like a map.

118
00:09:35,780 --> 00:09:36,130
During.

119
00:09:37,210 --> 00:09:38,780
Do you're right?

120
00:09:40,480 --> 00:09:41,680
Two character array.

121
00:09:42,490 --> 00:09:47,770
Now what this would do is it would return something that looks like this.

122
00:10:01,110 --> 00:10:08,340
OK, so that's what we would end up with if we were to do a map, a mapping where we called String two

123
00:10:08,370 --> 00:10:09,330
character array.

124
00:10:09,540 --> 00:10:12,000
Now I want you to notice some details here.

125
00:10:12,900 --> 00:10:15,840
Notice that I'm using.

126
00:10:17,450 --> 00:10:24,590
I'm using single quotes here instead of double quotes like I'm doing up here.

127
00:10:26,120 --> 00:10:33,350
The reason I'm doing that, if you'll recall from past lessons, double quotes depict strings.

128
00:10:34,190 --> 00:10:37,640
Single quotes depict characters.

129
00:10:37,790 --> 00:10:38,290
Okay.

130
00:10:38,510 --> 00:10:39,740
There is a difference.

131
00:10:39,980 --> 00:10:41,510
They're very closely related.

132
00:10:41,510 --> 00:10:43,030
But there is a difference, right?

133
00:10:43,070 --> 00:10:45,290
Those are two different data types, really.

134
00:10:45,650 --> 00:10:46,070
Okay.

135
00:10:47,150 --> 00:10:51,230
Also, I'm using the square brackets here.

136
00:10:52,830 --> 00:10:59,550
As you can see here, right, I'm using these square brackets, square brackets indicate an array.

137
00:10:59,850 --> 00:11:01,680
So what we're looking at here?

138
00:11:03,820 --> 00:11:10,870
So what we're looking at here are two character arrays inside of one stream.

139
00:11:10,960 --> 00:11:11,380
OK.

140
00:11:11,410 --> 00:11:13,600
To characterize inside of one stream.

141
00:11:13,780 --> 00:11:20,650
So that's what we would get if we were to call the two character array method of the string class.

142
00:11:20,680 --> 00:11:27,100
OK, now the problem with this approach is that.

143
00:11:28,320 --> 00:11:31,650
At the end of all of this pipeline that we're about to create.

144
00:11:31,980 --> 00:11:37,620
What we're trying to get to is a stream of character strings.

145
00:11:37,710 --> 00:11:42,240
OK, not a stream of characters.

146
00:11:42,690 --> 00:11:48,510
So I'm just going to put that aside for now and just let you know that the two character array approach

147
00:11:48,540 --> 00:11:50,010
isn't quite going to work now.

148
00:11:50,160 --> 00:11:56,730
We could make it work, by the way, we could write a lambda in the next step.

149
00:11:58,270 --> 00:12:06,670
We could write a lambda in the next step that has multiple lines and an a block of code in it, so it

150
00:12:06,670 --> 00:12:15,820
would be, you know, a full method essentially that would convert the character array to characters

151
00:12:15,820 --> 00:12:16,610
of strings.

152
00:12:16,630 --> 00:12:17,020
Right.

153
00:12:17,500 --> 00:12:22,380
So we convert each character into a a one character string, right?

154
00:12:22,860 --> 00:12:26,550
I we could write that, but it's unnecessary to do so.

155
00:12:26,560 --> 00:12:27,490
That's the thing, right?

156
00:12:27,490 --> 00:12:29,260
We could do this more concisely.

157
00:12:29,710 --> 00:12:30,040
All right.

158
00:12:30,040 --> 00:12:34,120
So we're not so we're not going to go with the two character array approach.

159
00:12:38,310 --> 00:12:43,620
So I'm going to maybe just kind of strike that out, so.

160
00:12:43,710 --> 00:12:53,520
So let's see what else we could do with with these strings to get them closer to being individual character

161
00:12:53,530 --> 00:12:54,040
strings.

162
00:12:54,060 --> 00:12:54,410
OK.

163
00:12:54,630 --> 00:12:56,160
And one thing we can do.

164
00:12:56,190 --> 00:13:05,670
So if we turn to our I.D. and we Google for Java Doc String Class, we can jump into the documentation

165
00:13:05,670 --> 00:13:11,790
for the string class and we can just go look at what methods exist on this class, right?

166
00:13:12,720 --> 00:13:15,330
So scrolling through here, what I'm looking for.

167
00:13:18,440 --> 00:13:28,400
Our methods that might return a breakdown of a string, hopefully as smaller strings, right, because

168
00:13:28,400 --> 00:13:29,360
that's what we're trying to do.

169
00:13:29,390 --> 00:13:36,550
We're trying to break down Fred into a separate string of four separate string of R e d, et cetera,

170
00:13:36,560 --> 00:13:36,860
right?

171
00:13:37,040 --> 00:13:44,060
So let's look through the Java doc here and see if there's any method that jumps out as looking like

172
00:13:44,060 --> 00:13:45,390
it might be capable of doing that.

173
00:13:45,410 --> 00:13:50,210
What I'm looking at specifically here is this is this left column here because those are the return

174
00:13:50,210 --> 00:13:50,530
types.

175
00:13:50,540 --> 00:13:51,290
Here's the method.

176
00:13:51,290 --> 00:13:52,490
Here's the input.

177
00:13:52,640 --> 00:13:57,360
Here's what it does, and here's the return type for that method.

178
00:13:57,680 --> 00:14:00,380
So let's see what we've got here.

179
00:14:02,460 --> 00:14:05,100
All right, so here's here's some byte arrays.

180
00:14:05,910 --> 00:14:07,740
We don't want that because that's a bite.

181
00:14:11,550 --> 00:14:13,470
Now, this is starting to look interesting here.

182
00:14:13,500 --> 00:14:15,210
String arrays, right?

183
00:14:15,520 --> 00:14:17,550
Couple of them, in fact, what what is this?

184
00:14:17,550 --> 00:14:19,890
This is oh, now we're familiar with this method.

185
00:14:19,890 --> 00:14:21,810
We learned this method a long time ago.

186
00:14:21,810 --> 00:14:23,010
I hope you still remember it.

187
00:14:23,010 --> 00:14:33,330
The split method takes a regular expression for a given string, and then it can split that that string

188
00:14:33,720 --> 00:14:36,810
into an array of strings.

189
00:14:36,960 --> 00:14:43,350
Now, just as a quick little reminder, one of the more common ways that you'll see that method used

190
00:14:43,560 --> 00:14:48,630
might be something like if we had a string that said something like.

191
00:14:52,280 --> 00:14:53,390
Johnson.

192
00:14:56,890 --> 00:14:59,410
Comma Mary.

193
00:15:02,280 --> 00:15:04,860
And then we called Split.

194
00:15:06,910 --> 00:15:13,960
And passed in a coma like so this would return.

195
00:15:17,760 --> 00:15:18,900
An array.

196
00:15:20,040 --> 00:15:20,520
With.

197
00:15:22,430 --> 00:15:23,390
Jonathan?

198
00:15:25,950 --> 00:15:28,530
And then, Mary.

199
00:15:28,770 --> 00:15:33,240
So an array with two strings in it.

200
00:15:33,270 --> 00:15:33,720
OK.

201
00:15:33,750 --> 00:15:37,320
That's what it would do if we called Split with the Comma.

202
00:15:37,980 --> 00:15:44,550
There's an interesting little thing, though, that you can do with the split method if you just pass

203
00:15:44,550 --> 00:15:47,010
in an empty quotation.

204
00:15:47,460 --> 00:15:50,760
Like, let me see, how can I pick this?

205
00:15:52,150 --> 00:15:52,870
Let me just.

206
00:15:54,060 --> 00:16:01,690
Erase those and just show quotes with no space in the middle, right?

207
00:16:01,710 --> 00:16:08,820
So just an opening and a closing quote and no space in there, then what you end up getting.

208
00:16:11,650 --> 00:16:12,940
Let's see race this.

209
00:16:18,450 --> 00:16:21,330
What you end up getting now is.

210
00:16:22,870 --> 00:16:23,130
They.

211
00:16:24,240 --> 00:16:25,300
Oh, H.

212
00:16:25,800 --> 00:16:28,560
And S., et cetera, et cetera.

213
00:16:28,680 --> 00:16:29,070
OK.

214
00:16:29,400 --> 00:16:38,340
So instead of splitting on the commas, it now just splits in between each and every character and we

215
00:16:38,340 --> 00:16:39,270
can use that.

216
00:16:39,480 --> 00:16:40,320
We can use that.

217
00:16:41,340 --> 00:16:46,350
OK, so now that we see that, we could potentially just use the split method?

218
00:16:47,940 --> 00:16:49,950
Let us consider how we could do this, though.

219
00:16:50,220 --> 00:16:57,660
So you might initially think that we could just do something like map string.

220
00:17:00,290 --> 00:17:05,450
And then call Split like so.

221
00:17:05,660 --> 00:17:12,200
However, that's not going to work because the split method needs an input.

222
00:17:12,230 --> 00:17:12,560
Right?

223
00:17:12,590 --> 00:17:14,510
It needs to know what are you splitting on?

224
00:17:14,810 --> 00:17:15,230
Like what?

225
00:17:15,320 --> 00:17:18,170
What is the character that you're looking for in order to split?

226
00:17:18,350 --> 00:17:20,270
So we can't quite do it that way.

227
00:17:20,690 --> 00:17:22,640
But what we can do?

228
00:17:24,080 --> 00:17:30,530
If we can just use a regular lambda expression instead, like the old fashioned one instead of a method

229
00:17:30,530 --> 00:17:33,410
reference, we can just use a regular lambda expression.

230
00:17:33,410 --> 00:17:39,230
So now that we know that we can do this, probably by just using the split method.

231
00:17:39,500 --> 00:17:45,020
Let's go ahead and jump into the ad and start putting this together, and we'll kind of go back and

232
00:17:45,020 --> 00:17:50,510
forth between the ABC and the and the virtual paper here.

233
00:17:50,780 --> 00:17:51,140
All right.

234
00:17:51,320 --> 00:17:57,680
So what we're going to do first, I'm scrolling down here to what we had before, and I'm inclined to

235
00:17:57,680 --> 00:17:59,960
just come and do all of that out for right now.

236
00:18:00,320 --> 00:18:00,960
We don't need it.

237
00:18:00,980 --> 00:18:05,990
We'll just kind of do something a little bit fresh, but in this same file, in the same class, OK?

238
00:18:06,140 --> 00:18:09,530
So I'm going to put my cursor here and just put a few new lines.

239
00:18:09,770 --> 00:18:14,330
So we know that we want to iterate over these employees.

240
00:18:14,330 --> 00:18:21,410
We know that we need to convert them into actual employees and then we need to convert those into first

241
00:18:21,410 --> 00:18:21,740
names.

242
00:18:21,740 --> 00:18:28,340
So why don't you try doing that on your own and just get to that point and don't cheat, don't cheat

243
00:18:28,340 --> 00:18:29,220
and look down here.

244
00:18:29,240 --> 00:18:30,830
Just see if you can do it from memory.

245
00:18:30,860 --> 00:18:31,280
OK.

246
00:18:31,490 --> 00:18:38,840
So just get to the point that you are using the Streams API and you're getting a stream of first name

247
00:18:38,840 --> 00:18:39,680
strings.

248
00:18:39,710 --> 00:18:42,050
OK, and then join back up with me.

249
00:18:43,580 --> 00:18:44,000
All right.

250
00:18:44,450 --> 00:18:45,930
So hopefully you were able to do that.

251
00:18:45,950 --> 00:18:47,120
Let me do it now.

252
00:18:47,630 --> 00:18:50,820
So let's see what's her variable called its people text.

253
00:18:50,840 --> 00:18:56,690
OK, so I'm going to reference the people text dot lines.

254
00:18:57,470 --> 00:19:00,980
And I guess again, I would like that to be on its own line.

255
00:19:01,760 --> 00:19:06,260
I'm not going to bother unnamed denting that because I don't feel like fighting with the ADC right now.

256
00:19:06,530 --> 00:19:06,800
All right.

257
00:19:06,800 --> 00:19:15,570
So there are lines, and then I'm going to map that using the employee.

258
00:19:16,400 --> 00:19:16,790
What is it?

259
00:19:16,790 --> 00:19:18,170
Create employee method?

260
00:19:18,260 --> 00:19:18,730
All right.

261
00:19:18,740 --> 00:19:25,040
So now we have AI employees, but I want those to be employees so that I can access the first name,

262
00:19:25,040 --> 00:19:25,340
right?

263
00:19:25,550 --> 00:19:27,170
So then we'll do another mapping.

264
00:19:28,310 --> 00:19:29,180
Let's see.

265
00:19:29,810 --> 00:19:37,400
And this time I have to use an old school lambda expression to just cast these to their actual data

266
00:19:37,400 --> 00:19:38,390
type of employee.

267
00:19:38,720 --> 00:19:50,210
So I will call them E and map that to employee e, just like so and now I have employees.

268
00:19:53,200 --> 00:20:00,220
And we can even see here that we go from a stream of strings to a stream of employees to a stream of

269
00:20:00,220 --> 00:20:01,060
employees, right?

270
00:20:01,060 --> 00:20:02,410
So this is all just review.

271
00:20:03,880 --> 00:20:04,300
All right.

272
00:20:04,330 --> 00:20:09,760
And now that I have employees now we can get a stream of firstname strings, right?

273
00:20:10,970 --> 00:20:12,500
So we can do another mapping.

274
00:20:13,280 --> 00:20:20,480
And so now we can just call employee Oops, first name.

275
00:20:21,260 --> 00:20:21,770
There we go.

276
00:20:22,640 --> 00:20:24,350
All right, so that should get.

277
00:20:25,040 --> 00:20:28,170
So you should be at this point now.

278
00:20:28,190 --> 00:20:28,490
Right.

279
00:20:28,490 --> 00:20:33,080
So we've got a stream of first names, right?

280
00:20:33,770 --> 00:20:42,470
And so now that now we know that our next step is we want to try using the split method of the string

281
00:20:42,470 --> 00:20:52,580
class to split all of the individual letters of each string into into arrays of strings, right?

282
00:20:52,790 --> 00:20:57,380
And again, I'll just remind you, that should look like an array.

283
00:20:58,490 --> 00:21:11,270
Of f r e d, I thought injury of B, a R and E like and then all of that would be inside of a dream.

284
00:21:12,060 --> 00:21:14,930
OK, so that's what we're trying to get to.

285
00:21:15,380 --> 00:21:24,050
And so to do that, all we should need to do is call map and we'll have to do an old school lambda expression

286
00:21:24,050 --> 00:21:24,410
here.

287
00:21:24,680 --> 00:21:27,140
I will call this first name,

288
00:21:31,100 --> 00:21:37,460
first name dot split and then I will pass in empty quotes.

289
00:21:40,360 --> 00:21:41,080
Like so.

290
00:21:43,270 --> 00:21:47,440
And so that should give us what we're seeing down here.

291
00:21:47,650 --> 00:21:50,800
The Fred and Barney arrays.

292
00:21:50,890 --> 00:21:51,250
Right.

293
00:21:52,330 --> 00:21:56,410
So if I come down here to the next line and I'm just going to get this set up.

294
00:21:56,980 --> 00:21:57,280
All right.

295
00:21:57,290 --> 00:22:05,080
So we even see here that the output of Line 41 is a stream of string arrays, right?

296
00:22:05,080 --> 00:22:09,850
Because split returns and returns a string array.

297
00:22:10,450 --> 00:22:18,790
So now the next thing we need to get closer to what we've got down here on the second to last area of

298
00:22:18,790 --> 00:22:21,520
our virtual paper, though, right?

299
00:22:21,760 --> 00:22:24,310
So we want to get rid of the arrays, right?

300
00:22:24,700 --> 00:22:29,920
We don't want to have all of the letters in their own arrays, right?

301
00:22:29,930 --> 00:22:34,990
We want to just strip off the arrays and just have the letters out in the open, right?

302
00:22:36,040 --> 00:22:37,660
So how can we do that?

303
00:22:38,050 --> 00:22:47,380
Well, there's a utility method on the arrays class that can take the contents of an array and strip

304
00:22:47,380 --> 00:22:50,500
them out of that array and put them into a stream.

305
00:22:50,770 --> 00:22:55,210
So there's a method that can do pretty much exactly what we're needing.

306
00:22:55,330 --> 00:22:59,170
Let me show you visually what that what I mean by this, though.

307
00:22:59,680 --> 00:23:06,070
OK, so first off, the method is called arrays dot stream.

308
00:23:06,730 --> 00:23:09,370
So maybe we could do something like.

309
00:23:10,730 --> 00:23:11,480
Map.

310
00:23:13,370 --> 00:23:13,700
Actually.

311
00:23:15,420 --> 00:23:16,650
Arrays that stream.

312
00:23:16,920 --> 00:23:29,010
And what that should output would be something like f r e, d, b, a R and E like, except for one

313
00:23:29,010 --> 00:23:29,550
problem.

314
00:23:31,110 --> 00:23:38,940
The arrays that stream method does take the contents of an array and put and strip them out of the array

315
00:23:38,940 --> 00:23:40,350
and put them into a stream.

316
00:23:40,550 --> 00:23:41,220
However.

317
00:23:42,990 --> 00:23:46,410
What you end up with is now this.

318
00:23:47,680 --> 00:23:48,820
There's one stream.

319
00:23:50,310 --> 00:23:55,980
There's another stream, and then because all of this is happening within the greater context of a of

320
00:23:55,980 --> 00:23:57,870
a API pipeline.

321
00:23:58,470 --> 00:24:02,160
All of that is still inside of.

322
00:24:04,510 --> 00:24:06,600
One big stream, right?

323
00:24:06,610 --> 00:24:13,300
So now what you end up with is a stream of streams of strings.

324
00:24:14,320 --> 00:24:19,990
OK, so let's go ahead and see what this is going to look like and then I'll show you how we can fix

325
00:24:19,990 --> 00:24:20,170
it.

326
00:24:20,560 --> 00:24:20,860
All right.

327
00:24:20,870 --> 00:24:22,420
So let's see.

328
00:24:22,420 --> 00:24:23,710
We've got a map here.

329
00:24:24,190 --> 00:24:26,530
And so we're simply going to call.

330
00:24:32,150 --> 00:24:32,990
Arrays.

331
00:24:35,340 --> 00:24:35,700
Don't.

332
00:24:38,800 --> 00:24:41,800
Arrays stream.

333
00:24:45,610 --> 00:24:46,030
All right.

334
00:24:46,120 --> 00:24:52,390
And now you can see right here, the output of this is a stream of streams of strings, right?

335
00:24:52,390 --> 00:24:55,340
And then just look down here at the depiction again and you can see.

336
00:24:55,360 --> 00:25:00,670
So essentially all that you have to kind of keep in mind to keep your head straight on this is that

337
00:25:01,150 --> 00:25:08,050
each of these arrays that we had previously became a stream.

338
00:25:08,410 --> 00:25:16,840
But you know that the output of every step in our pipeline is also a stream, and therefore you end

339
00:25:16,840 --> 00:25:19,460
up with a stream of streams.

340
00:25:19,510 --> 00:25:29,470
OK, now that won't do because ultimately what we're trying to get to is just one stream of character

341
00:25:29,500 --> 00:25:31,120
strings, right?

342
00:25:31,420 --> 00:25:32,860
That's what we're trying to get to.

343
00:25:33,130 --> 00:25:33,970
So now.

344
00:25:34,210 --> 00:25:40,300
And by the way, what I'm about to show you next is really like the whole crux of why we're even doing

345
00:25:40,300 --> 00:25:41,410
this lesson, OK?

346
00:25:41,890 --> 00:25:48,220
I just wanted you to have the fullest context so that you could appreciate what you're about to learn

347
00:25:48,220 --> 00:25:48,820
now, right?

348
00:25:48,970 --> 00:25:51,310
So this whole entire thing leads up to this.

349
00:25:52,300 --> 00:26:02,770
When you have a stream of streams and you don't want that, you really just want one ultimate stream

350
00:26:03,130 --> 00:26:07,990
of whatever the things were that were inside of the child stream, right?

351
00:26:08,170 --> 00:26:09,730
That's what you really want.

352
00:26:10,360 --> 00:26:14,800
All you need to do is not use the map.

353
00:26:15,870 --> 00:26:18,600
Method and instead use.

354
00:26:20,370 --> 00:26:21,420
Flat map.

355
00:26:24,790 --> 00:26:31,510
So what the flat map method does, if you didn't already get it, is it kind of flattens or it collapses

356
00:26:31,510 --> 00:26:35,710
the redundant child streams, right?

357
00:26:36,100 --> 00:26:45,070
So it gets rid of the internal blue stream here and you just end up with what we have down here, which

358
00:26:45,070 --> 00:26:52,630
is just one super stream with whatever the original contents were embedded.

359
00:26:52,630 --> 00:26:58,990
And so now we see here on Line 42, we end up now with a stream of strings, right?

360
00:26:59,770 --> 00:27:06,040
And now that we've got a stream of strings, guess what we can do at this point we can call distinct.

361
00:27:08,090 --> 00:27:14,120
And now that will get rid of the duplicate letters, right, the duplicate letters.

362
00:27:14,720 --> 00:27:16,640
And now finally, let's just print them out.

363
00:27:19,220 --> 00:27:23,840
To do that, we can do a for each and call

364
00:27:26,480 --> 00:27:27,680
system that our.

365
00:27:29,930 --> 00:27:32,930
Print line, and let's run this.

366
00:27:34,550 --> 00:27:35,450
There we go.

367
00:27:36,820 --> 00:27:41,620
And I don't believe I'm seeing any duplicates now, we could make this a little easier to see, though,

368
00:27:41,800 --> 00:27:44,110
if we don't use a print line.

369
00:27:45,700 --> 00:27:48,070
Yeah, we can just use the print method.

370
00:27:48,070 --> 00:27:51,400
It's a print line actually makes each input to it.

371
00:27:52,300 --> 00:27:55,270
Have its own line, right, because it adds a new line character.

372
00:27:55,270 --> 00:28:00,310
But if we don't use the print line, we can just use print and let's see what this does.

373
00:28:01,360 --> 00:28:05,950
There we go now, they're all printed out sideways, and it's just easier to compare everything, right?

374
00:28:06,250 --> 00:28:10,420
So yeah, I think I don't see any duplicates anywhere here, right?

375
00:28:10,420 --> 00:28:19,600
These are all of the unique letters not duplicated now notice there's a difference in Computerworld

376
00:28:19,600 --> 00:28:23,020
between a capital a and a lowercase a right.

377
00:28:23,290 --> 00:28:24,520
There is a difference there.

378
00:28:24,700 --> 00:28:33,370
Now, if we wanted to not care about those differences, can you think of a way that you could do that?

379
00:28:34,690 --> 00:28:35,100
Why don't you?

380
00:28:35,110 --> 00:28:36,040
Why don't you think about it?

381
00:28:37,460 --> 00:28:45,590
OK, so yeah, if you didn't want to differentiate between capital and lowercase versions of the same

382
00:28:45,590 --> 00:28:56,100
letter, you certainly could just do one more mapping somewhere, presumably maybe right after the dot

383
00:28:56,120 --> 00:28:57,020
flat map.

384
00:28:57,860 --> 00:29:05,180
You could do another mapping where you map all the letters to lowercase or uppercase, right?

385
00:29:05,180 --> 00:29:10,580
You just normalize them all to one case, no matter what they started off with.

386
00:29:10,670 --> 00:29:20,630
In fact, here we'll go ahead and just do that real quick dot map string to lower case.

387
00:29:20,690 --> 00:29:21,050
Right?

388
00:29:21,560 --> 00:29:22,460
Let's run that.

389
00:29:24,510 --> 00:29:25,110
There you go.

390
00:29:25,530 --> 00:29:31,770
So now everything's lower case, and because of that, we have even less duplication if you consider

391
00:29:32,370 --> 00:29:35,730
upper and lower case of the same letter to be duplicates, right?

392
00:29:36,000 --> 00:29:39,630
And you also could have done, you know, to upper case if you wanted to write, right?

393
00:29:39,630 --> 00:29:42,600
But that's even even less duplication now.

394
00:29:43,860 --> 00:29:44,220
All right.

395
00:29:45,210 --> 00:29:51,840
So one more time, I just want to state that the main goal of this lesson was to introduce the flat

396
00:29:51,840 --> 00:29:52,260
map.

397
00:29:52,650 --> 00:30:01,500
I myself had a little bit of a harder time wrapping my head around exactly what this method was doing

398
00:30:01,770 --> 00:30:05,280
for quite some time after I learned the Stream's API.

399
00:30:05,520 --> 00:30:12,360
And it wasn't until I really sat down with it and tried to depict visually what the heck is going on

400
00:30:13,140 --> 00:30:20,130
that I was able to kind of get an understanding Ah, OK, OK, we've got you any time you have a situation

401
00:30:20,130 --> 00:30:24,060
with the Stream's API where you end up with a stream of streams.

402
00:30:24,360 --> 00:30:28,230
That's probably not what you wanted in many, many cases.

403
00:30:28,350 --> 00:30:34,050
And you need to flatten that structure into one stream, right?

404
00:30:34,260 --> 00:30:37,080
And that is what the flat map does.

405
00:30:37,410 --> 00:30:42,930
We're going to encounter this flat map a few more times in the future.

406
00:30:42,930 --> 00:30:49,110
And that's one of the other reasons why I wanted to make darn sure that we covered it now rather than

407
00:30:49,110 --> 00:30:49,680
later.

408
00:30:49,740 --> 00:30:50,190
OK.

409
00:30:50,850 --> 00:30:58,350
So I hope this lesson wasn't too convoluted for you, but it's really an important thing, an important

410
00:30:58,350 --> 00:31:04,890
concept for you to understand a lot of Java developers who dabble with the Streams API but don't really

411
00:31:04,890 --> 00:31:05,610
understand it.

412
00:31:05,790 --> 00:31:10,650
They end up just kind of like guessing, like, Oh, it's not working because the ID will tell them,

413
00:31:10,650 --> 00:31:14,520
well, what you're trying to do with this pipeline of the streams API isn't going to work.

414
00:31:14,640 --> 00:31:18,600
And so then they start just kind of guessing like, Oh, what if I try a flat map?

415
00:31:18,720 --> 00:31:22,730
And then it kind of like magically works, but they don't really understand why, right?

416
00:31:22,950 --> 00:31:28,680
So hopefully now you will understand why, and that will set you way ahead of the pack.

417
00:31:29,040 --> 00:31:29,360
All right.

418
00:31:29,370 --> 00:31:33,480
So with that, I'm going to draw this to a close and I'll see you in the next one.
