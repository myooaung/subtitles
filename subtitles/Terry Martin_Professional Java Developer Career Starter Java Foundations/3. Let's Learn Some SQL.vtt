WEBVTT
1
00:00:00.980 --> 00:00:07.550
All right, so now that we are connected to our small, lightweight database, let's have some fun and

2
00:00:07.550 --> 00:00:08.570
do something with it.

3
00:00:09.440 --> 00:00:16.040
So we're going to now learn a little bit of the basics of the sequel programming language, structured

4
00:00:16.040 --> 00:00:23.570
query language and what you will start to see is that some of the basic concepts that we've been doing

5
00:00:23.570 --> 00:00:32.120
in Java like creating classes and then creating instances of those classes and using collections to

6
00:00:32.120 --> 00:00:41.090
store instances of classes and retrieve them back out and even using the Streams API to sum up all of

7
00:00:41.090 --> 00:00:46.520
the values of a property of a bunch of instances and things of that sort.

8
00:00:47.630 --> 00:00:52.970
Many of these operations and activities have parallels with sequel.

9
00:00:53.270 --> 00:00:56.510
And so we're going to see some of these parallels now.

10
00:00:57.320 --> 00:00:57.710
All right.

11
00:00:57.710 --> 00:01:03.560
So let's just jump right in and start issuing some SQL commands and see what we can do here.

12
00:01:03.800 --> 00:01:08.920
So if you click on this tab right here next to the objects, there's a tab called sequel as well.

13
00:01:09.170 --> 00:01:15.260
I'm going to click on that and in this tab we can actually start entering SQL commands.

14
00:01:17.480 --> 00:01:19.460
I'm going to make my window a little bigger here.

15
00:01:19.790 --> 00:01:21.470
All right, so the first thing we're going to do.

16
00:01:21.980 --> 00:01:26.130
Let's do the database equivalent of creating a class.

17
00:01:26.150 --> 00:01:26.610
OK.

18
00:01:27.350 --> 00:01:34.430
So I'd say the database equivalent to creating a class in Java would be to create a table.

19
00:01:35.240 --> 00:01:39.140
And so we can use some SQL commands to do this.

20
00:01:39.830 --> 00:01:47.180
So let's just create a really basic table one that has a first name column, last name column, a date

21
00:01:47.180 --> 00:01:50.210
of birth column and maybe a salary column.

22
00:01:50.240 --> 00:01:50.630
OK.

23
00:01:51.380 --> 00:01:51.660
All right.

24
00:01:51.680 --> 00:01:56.420
So to do this, we will issue some standardized SQL commands.

25
00:01:56.930 --> 00:02:03.830
For the most part, SQL is not case sensitive, but by convention, a lot of database commands will

26
00:02:03.830 --> 00:02:05.580
tend to be upper cased.

27
00:02:06.410 --> 00:02:09.980
So I will try to remember to consistently do that.

28
00:02:09.980 --> 00:02:11.900
But like I said, it doesn't really matter.

29
00:02:12.260 --> 00:02:12.530
All right.

30
00:02:12.540 --> 00:02:21.950
So the command to create a table is create a table and then we'll give the table a name so we can call

31
00:02:21.950 --> 00:02:23.810
it something like people.

32
00:02:24.200 --> 00:02:30.080
You'll typically see database table names in the in the plural form, right?

33
00:02:30.110 --> 00:02:37.400
So if we're going to have a table to store a person in it, that table's name might typically be people,

34
00:02:37.520 --> 00:02:40.460
though this is just a convention that I see frequently.

35
00:02:40.880 --> 00:02:43.070
It doesn't have to be done that way, though.

36
00:02:43.790 --> 00:02:44.210
All right.

37
00:02:45.080 --> 00:02:48.530
Next, we're going to use a parentheses, an opening parentheses.

38
00:02:49.550 --> 00:02:51.890
Oh, and there's one more field that I forgot to mention.

39
00:02:52.010 --> 00:02:53.930
Let's also have an ID field.

40
00:02:54.170 --> 00:03:01.250
It's extremely typical in databases to have an ID field for all of your records.

41
00:03:01.490 --> 00:03:02.780
It's it's common.

42
00:03:02.870 --> 00:03:04.050
Not always done.

43
00:03:04.070 --> 00:03:08.870
There are alternatives to doing this as well, but let's go ahead and just do it this way for now.

44
00:03:09.200 --> 00:03:09.500
All right.

45
00:03:09.530 --> 00:03:14.270
So the first field we're actually going to define is going to be an ID field.

46
00:03:14.780 --> 00:03:22.190
Now this field for the ID will be numeric, and we will actually allow the database to populate this

47
00:03:22.190 --> 00:03:24.000
field automatically for us.

48
00:03:24.020 --> 00:03:29.420
So in other words, the database is going to keep track of every time we insert a new person into this

49
00:03:29.420 --> 00:03:29.930
table.

50
00:03:30.110 --> 00:03:35.660
The database itself will generate a new, unique ID for each of these people.

51
00:03:35.690 --> 00:03:36.140
OK.

52
00:03:37.570 --> 00:03:42.850
And this will just give us a really easy way to identify individuals and retrieve them.

53
00:03:43.210 --> 00:03:44.650
I just using this ID.

54
00:03:46.250 --> 00:03:46.580
All right.

55
00:03:46.610 --> 00:03:54.290
So we're going to have a field, we'll call it I.D. space, and then we need to specify what it's data

56
00:03:54.290 --> 00:03:54.880
type is.

57
00:03:54.890 --> 00:04:01.700
So when we create classes as we define the fields or properties of the class, we have to define what

58
00:04:01.700 --> 00:04:03.620
the data type is free to those fields.

59
00:04:03.620 --> 00:04:09.200
So if we had an ID field in Java, we might use type long.

60
00:04:09.470 --> 00:04:15.350
If we have a first name field in Java, we might use a data type of string.

61
00:04:16.130 --> 00:04:22.370
Databases have basically the exact same concept, and that's why it's actually pretty nice to understand

62
00:04:22.400 --> 00:04:26.720
how you can go from Java class to database table definition.

63
00:04:26.990 --> 00:04:31.850
They have pretty good one to one relationships with each other.

64
00:04:33.300 --> 00:04:38.790
So there are actually a number of data types that exist in any given database now.

65
00:04:39.000 --> 00:04:45.090
Each database engine that is the application that implements the database like H2, and there are others

66
00:04:45.090 --> 00:04:46.530
that I'll mention briefly here.

67
00:04:46.980 --> 00:04:54.570
Each database engine may have slight differences in the set of data types that it supports, but there

68
00:04:54.570 --> 00:05:00.300
are some fairly general standards across most databases these days.

69
00:05:00.840 --> 00:05:07.320
When in doubt, though, you can actually look up the data types that are supported for any given database

70
00:05:07.320 --> 00:05:09.060
and in fact, will go ahead and do that real quick.

71
00:05:09.570 --> 00:05:11.400
Let me go back to the browser here.

72
00:05:13.030 --> 00:05:16.330
And I will search for H2 database.

73
00:05:18.540 --> 00:05:27.240
And I'm already on the H2 database website here, and we can come down to data types right there.

74
00:05:27.690 --> 00:05:32.910
And so this is showing a quick index of all of the standard data types that H2 supports.

75
00:05:33.390 --> 00:05:39.390
So it's got integer Boolean tiny and small and big and identity decimal double real.

76
00:05:39.480 --> 00:05:43.020
Now we're not going to analyze each and every one of these right now, but I can just tell you real

77
00:05:43.020 --> 00:05:49.620
quick that probably what we want is big and and if I click on big and it tells me here how big is big

78
00:05:49.620 --> 00:05:49.920
enough.

79
00:05:50.100 --> 00:05:51.480
And it looks like it's pretty big.

80
00:05:51.990 --> 00:05:55.860
So that is actually equivalent to a java long.

81
00:05:55.980 --> 00:06:02.640
And because H2 is written in Java itself, it's documentation actually does a good job of letting us

82
00:06:02.640 --> 00:06:08.730
know internally how these database types are represented in their own internal Java code.

83
00:06:08.940 --> 00:06:11.610
So that actually makes it pretty easy to understand, OK.

84
00:06:11.730 --> 00:06:16.290
If I want the Java equivalent of the lung, I could probably use a big ant.

85
00:06:16.650 --> 00:06:17.010
All right.

86
00:06:17.020 --> 00:06:23.820
So now, armed with that knowledge, we can come over here and say that this is going to be a big event.

87
00:06:23.970 --> 00:06:28.770
Now notice this is one of the many differences between Java and sequel in Java.

88
00:06:28.770 --> 00:06:34.230
When we're creating properties or fields, the data type would come first, followed by the name of

89
00:06:34.230 --> 00:06:34.800
the field.

90
00:06:35.070 --> 00:06:37.260
But here we give the name ID.

91
00:06:37.590 --> 00:06:41.700
First, that's the name, and then the data type is coming after that.

92
00:06:42.360 --> 00:06:43.560
All right, so big int.

93
00:06:43.860 --> 00:06:49.350
And then we want the database to populate this field for us automatically, as I mentioned earlier.

94
00:06:49.590 --> 00:06:57.360
So to make it do that, I have to specify a keyword called auto increment auto underscore increment

95
00:06:57.750 --> 00:06:58.470
like so.

96
00:06:59.340 --> 00:06:59.730
All right.

97
00:07:00.180 --> 00:07:06.210
Next up, we can now define the additional columns of this table.

98
00:07:06.210 --> 00:07:08.520
So we've got an ID column there.

99
00:07:08.940 --> 00:07:11.310
Let's have a first name column.

100
00:07:11.310 --> 00:07:17.100
So first name, move that cursor out of the way and now it's data type.

101
00:07:17.280 --> 00:07:22.500
Now we're going to make this data type something equivalent to a Java string.

102
00:07:22.500 --> 00:07:26.760
However, sequel does not have a string data type.

103
00:07:27.030 --> 00:07:32.970
Instead, what it has is something called a VAR car or a VAR char or VAR care, whatever you want to

104
00:07:33.180 --> 00:07:33.720
call it.

105
00:07:33.750 --> 00:07:39.750
Usually, I think most teams will call it a VAR car and that is written as VAR CAGR.

106
00:07:40.050 --> 00:07:48.360
And then we can use parentheses here to state how many actual characters wide we want this field to

107
00:07:48.360 --> 00:07:48.720
be.

108
00:07:49.230 --> 00:07:57.090
So because databases specialize in storing massive amounts of data, we typically will define how wide

109
00:07:57.090 --> 00:07:59.730
we want a given field to be.

110
00:08:00.300 --> 00:08:05.970
Now, with numeric types, you don't have to usually put a number there because it's implied by the

111
00:08:05.970 --> 00:08:12.900
name of the numerical type itself, like a big end is going to be so wide versus a tiny end or whatever.

112
00:08:13.650 --> 00:08:20.400
But with VAR car, which stands for variable characters or variable length of variable length of characters,

113
00:08:20.850 --> 00:08:26.550
you typically will specify how many characters wide do you want to support.

114
00:08:27.000 --> 00:08:34.740
And you'll commonly see something like 255, though if you know for certain that you need less or more,

115
00:08:34.740 --> 00:08:36.930
you can certainly change that number.

116
00:08:37.530 --> 00:08:37.920
All right.

117
00:08:38.370 --> 00:08:42.120
So first name comma, then last name.

118
00:08:42.360 --> 00:08:45.760
Also note now that I'm not using camel case here.

119
00:08:45.870 --> 00:08:46.710
I could.

120
00:08:46.920 --> 00:08:53.670
But again, the typical database convention that I've always seen is typically to define column names

121
00:08:53.670 --> 00:08:59.880
as all uppercase, though it doesn't really matter and most databases, but also to separate out the

122
00:08:59.880 --> 00:09:03.450
parts of the word with an underscore.

123
00:09:03.600 --> 00:09:10.290
So whereas in Java, we'd be using camel case saying first and then capital in for name with no spaces

124
00:09:10.290 --> 00:09:15.370
or underscores in typical database standards, you'd use an underscore again.

125
00:09:15.390 --> 00:09:18.900
Now these are just conventions on most databases.

126
00:09:19.050 --> 00:09:26.640
And if you work in a company doing database development of any sort for your Java applications, there

127
00:09:26.640 --> 00:09:31.290
may be standards that will be taught to you by whoever's in charge of.

128
00:09:31.290 --> 00:09:37.740
That might be database administrators also called DBUS or just other people on your team.

129
00:09:37.740 --> 00:09:40.170
Or it could be that nobody really cares.

130
00:09:40.440 --> 00:09:40.890
All right.

131
00:09:41.400 --> 00:09:45.780
And this will also be of type VAR car 255.

132
00:09:47.450 --> 00:09:53.310
And then let's have a date of birth filled now for date of birth, if we were doing this in Java.

133
00:09:53.330 --> 00:10:00.980
I might prefer to use at least the local date time or if I know about the time zone and care about it,

134
00:10:01.130 --> 00:10:06.560
I might use a zoned local date time right for databases.

135
00:10:06.560 --> 00:10:10.640
There are equivalent data types, so let's go look at what some of those may be.

136
00:10:11.150 --> 00:10:15.470
All right, so let's see here just going to OK, so we've got a time filled.

137
00:10:15.710 --> 00:10:24.260
I can tell you now that's equivalent to a local time in database in Java and then a time with time zone.

138
00:10:24.380 --> 00:10:26.240
So that would be a time with the time zone.

139
00:10:26.240 --> 00:10:32.100
Information added in a date would be equivalent to a local date, a time stamp.

140
00:10:32.120 --> 00:10:35.980
Now that would be equivalent to a local date time.

141
00:10:35.990 --> 00:10:40.320
That's where you've got the date and the time all together in the database.

142
00:10:40.340 --> 00:10:47.090
It's called a time stamp and then they've got a time stamp with time zone, so that would be equivalent

143
00:10:47.090 --> 00:10:48.770
to a zoned date time.

144
00:10:48.770 --> 00:10:54.500
And pardon me, I think I said earlier zoned local date time, which doesn't quite make sense, but

145
00:10:54.500 --> 00:10:56.030
a zoned date time.

146
00:10:56.570 --> 00:11:00.500
OK, so these are our date and time data types.

147
00:11:00.890 --> 00:11:05.070
So for now, I'm inclined to just use the time stamp.

148
00:11:05.120 --> 00:11:11.330
Now I know I said earlier that if at all possible, if you have total control over the database, you

149
00:11:11.330 --> 00:11:16.010
may want to prefer something like a time stamp with time zone.

150
00:11:16.130 --> 00:11:23.240
However, eventually we are going to be playing around with loading up some of the data from our massive

151
00:11:23.240 --> 00:11:27.620
five million record data set into this database.

152
00:11:27.980 --> 00:11:35.480
And we already know that that data set does not give us an easy way to know the time zone, and so time

153
00:11:35.480 --> 00:11:37.070
stamp will be sufficient here.

154
00:11:37.400 --> 00:11:39.410
All right, so we're going to use the time stamp.

155
00:11:40.930 --> 00:11:41.330
All right.

156
00:11:41.350 --> 00:11:51.400
So, Dobbies space, time stamp, and then I think I also said salary, so comma, salary, salary,

157
00:11:52.090 --> 00:11:55.150
and let's go look at the data types here.

158
00:11:55.390 --> 00:12:00.250
So for salary, I think I already know we're likely going to want to use decimal.

159
00:12:00.250 --> 00:12:08.590
And if we click on that, we will see that this data type actually is a big decimal in Java, and that

160
00:12:08.590 --> 00:12:14.080
is the data type that you typically want to use when dealing with money, right?

161
00:12:14.290 --> 00:12:20.920
Though in our example projects, up until now, working with this particular data set, we haven't been

162
00:12:20.920 --> 00:12:28.150
using Big Decimal because the salary data in our test dataset actually doesn't have any decimals in

163
00:12:28.150 --> 00:12:31.600
them, and therefore they can be treated as large integers.

164
00:12:32.020 --> 00:12:35.650
However, we can go ahead and model it a little more accurately.

165
00:12:35.800 --> 00:12:38.620
Going forward, I suppose, and use a big decimal.

166
00:12:39.160 --> 00:12:39.490
All right.

167
00:12:39.490 --> 00:12:41.830
So that would be called a decimal here.

168
00:12:42.160 --> 00:12:43.690
So decimal.

169
00:12:44.830 --> 00:12:45.490
All right.

170
00:12:45.490 --> 00:12:47.110
And now we are finished.

171
00:12:47.500 --> 00:12:47.870
OK.

172
00:12:47.890 --> 00:12:52.270
And so that concludes defining all of the columns here.

173
00:12:52.510 --> 00:13:01.090
And so now we can close off this table creation with a closing parentheses there and then a semicolon.

174
00:13:02.230 --> 00:13:05.080
So yes, you cannot get away from the semicolons here.

175
00:13:05.860 --> 00:13:06.290
All right.

176
00:13:06.310 --> 00:13:10.090
And now that we have that, we can actually execute this sequel.

177
00:13:10.540 --> 00:13:14.860
And so we can come up here to this little picture of the running man here.

178
00:13:14.890 --> 00:13:16.090
Now there are a couple of them.

179
00:13:16.090 --> 00:13:20.590
We want this one here, though, or we could also do a control enter.

180
00:13:20.980 --> 00:13:25.380
And if we click this, then squirrel is going to execute what we've written here.

181
00:13:25.390 --> 00:13:27.400
So let's go ahead and just click that.

182
00:13:28.120 --> 00:13:28.820
There we go.

183
00:13:29.290 --> 00:13:34.240
And hopefully down here at the bottom, you'll have something green query one of one rose.

184
00:13:34.370 --> 00:13:34.800
OK.

185
00:13:34.960 --> 00:13:40.810
And if you've got that little green message, then that will tell you that your sequel was executed

186
00:13:40.810 --> 00:13:41.800
successfully.

187
00:13:42.310 --> 00:13:42.850
All right.

188
00:13:43.150 --> 00:13:51.130
So now let's go ahead and enter one record into this database, which would be somewhat equivalent to.

189
00:13:51.400 --> 00:13:59.170
We've just created a Java class called person, although in database world, it's people, and now we're

190
00:13:59.170 --> 00:14:01.690
going to create an instant of.

191
00:14:02.050 --> 00:14:05.530
And now we're going to create an instance of the person class.

192
00:14:05.710 --> 00:14:12.520
In this case, we're going to create an actual person and store that person into our newly created people

193
00:14:12.520 --> 00:14:13.030
table.

194
00:14:13.330 --> 00:14:13.720
All right.

195
00:14:14.080 --> 00:14:23.230
So to do that, we're going to use another SQL command, which is insert into people, and then we're

196
00:14:23.230 --> 00:14:29.410
going to specify the names of the columns that we are going to be providing data for.

197
00:14:29.710 --> 00:14:36.250
So because this first column ID is auto incremented, we don't actually need to specify that.

198
00:14:36.250 --> 00:14:37.180
So we're not going.

199
00:14:37.300 --> 00:14:38.920
So we're actually going to leave that out.

200
00:14:39.400 --> 00:14:50.140
We will specify first name, comma, last name, comma, date of birth.

201
00:14:51.210 --> 00:14:54.300
Comma and a salary.

202
00:14:56.020 --> 00:14:58.450
Close parentheses space.

203
00:14:59.540 --> 00:15:00.530
Values.

204
00:15:01.570 --> 00:15:05.440
Parentheses and so now here's where we actually provide the actual data.

205
00:15:05.470 --> 00:15:12.130
Okay, so in this first bit here, we're saying, what columns are we going to provide values for?

206
00:15:12.130 --> 00:15:16.930
And then in this next bit here with the values bit, we're actually going to provide those values.

207
00:15:16.960 --> 00:15:17.380
OK.

208
00:15:18.770 --> 00:15:22.610
So for a first name, we can do anything here.

209
00:15:22.940 --> 00:15:24.260
Now, typically.

210
00:15:25.350 --> 00:15:31.710
In school, when we are defining strings, what we in Java world think of their strings.

211
00:15:31.830 --> 00:15:38.610
Strings are usually defined with double quotes, or you could use triple quotes if it's in the multi-line

212
00:15:38.610 --> 00:15:40.620
format in sequel.

213
00:15:40.770 --> 00:15:44.100
The standard is typically to use single quotes, though.

214
00:15:44.250 --> 00:15:50.070
OK, so be careful about that because some databases and database clients care about that distinction.

215
00:15:50.400 --> 00:15:56.730
All right, so single quote or single tick, single quote, and I'm just going to make up a name here,

216
00:15:57.000 --> 00:15:57.570
Harry.

217
00:15:58.380 --> 00:15:59.400
Close quote.

218
00:16:00.060 --> 00:16:03.840
Comma and then a last name Johnson.

219
00:16:04.960 --> 00:16:06.130
Close quote.

220
00:16:07.400 --> 00:16:09.350
Comma and then a date of birth.

221
00:16:09.380 --> 00:16:16.580
Now we're using the time stamp format here, so we actually need to know how to represent a timestamp

222
00:16:16.580 --> 00:16:20.660
in a text format that H2 database will understand.

223
00:16:20.870 --> 00:16:27.710
And so we're going to jump back over here to the database, to the documentation for age two again and

224
00:16:27.710 --> 00:16:37.490
jump over to timestamp and look for an example of how to use this or how timestamps are specified.

225
00:16:37.760 --> 00:16:39.980
Now, I'm not actually seeing an example here.

226
00:16:40.580 --> 00:16:44.240
So what we may want to do is go up a little higher.

227
00:16:44.690 --> 00:16:44.990
All right.

228
00:16:45.000 --> 00:16:50.420
So it does say, see also timestamp literal grammar.

229
00:16:50.750 --> 00:16:53.490
So I'm going to click on that and voila.

230
00:16:53.510 --> 00:16:57.220
I think we are seeing some examples here now.

231
00:16:57.230 --> 00:17:02.510
Of course, this is technically with time zone, but I think I know how to how to ignore the time zone

232
00:17:02.510 --> 00:17:03.020
bits.

233
00:17:03.350 --> 00:17:08.060
The part that I'm curious about is is just all of that there.

234
00:17:08.270 --> 00:17:18.670
So it looks like the format is four digit year hyphen and then month and day and then our minutes seconds.

235
00:17:19.900 --> 00:17:20.240
All right.

236
00:17:20.260 --> 00:17:21.280
I think we can do that.

237
00:17:21.880 --> 00:17:26.320
So let's jump back over here now and let's specify that.

238
00:17:26.440 --> 00:17:28.510
So I'm going to specify that as text.

239
00:17:28.510 --> 00:17:33.250
So I'm going to use a single tick again and I'm going to give a four digit year.

240
00:17:33.250 --> 00:17:38.680
So I'm going to say something like 1950 hyphen and then a month.

241
00:17:39.250 --> 00:17:43.960
And for the month, let's say March and for the date, I don't know.

242
00:17:43.960 --> 00:17:44.820
Fifteenth.

243
00:17:45.370 --> 00:17:47.610
Then a space and then a time.

244
00:17:47.620 --> 00:17:49.300
So I will say 10.

245
00:17:50.520 --> 00:17:54.720
Colon, forty five, colon 10.

246
00:17:55.050 --> 00:17:56.370
Close that off.

247
00:17:56.640 --> 00:17:57.150
All right.

248
00:17:57.690 --> 00:18:02.370
And then a salary, so this should just be any number.

249
00:18:02.520 --> 00:18:09.060
OK, so let's say that this person is making one hundred thousand.

250
00:18:10.130 --> 00:18:12.530
And zero sense.

251
00:18:12.890 --> 00:18:13.370
OK.

252
00:18:15.230 --> 00:18:16.790
And I'm going to close that off.

253
00:18:17.880 --> 00:18:18.540
And then.

254
00:18:19.570 --> 00:18:21.100
Semicolon at the end.

255
00:18:21.850 --> 00:18:25.750
All right, so now we're ready to execute this next sequel.

256
00:18:26.380 --> 00:18:29.730
And now we can go ahead and click on this run sequel here.

257
00:18:31.790 --> 00:18:32.360
All right.

258
00:18:32.420 --> 00:18:38.180
So down here at the bottom, the status says one row inserted.

259
00:18:38.330 --> 00:18:46.820
So I think that worked without any incident, but now we can confirm it by querying back out of the

260
00:18:46.820 --> 00:18:49.250
database to see if we got our data.

261
00:18:50.280 --> 00:18:53.150
And to do that, I will make another line here.

262
00:18:54.220 --> 00:18:59.080
And now we'll do one more query before we end this particular lesson.

263
00:18:59.440 --> 00:19:01.330
We will grab this data out.

264
00:19:01.600 --> 00:19:03.610
So to do that, we will type select.

265
00:19:05.120 --> 00:19:13.490
Asterisk from people, and we can do just that, that's like the simplest way to say basically to the

266
00:19:13.490 --> 00:19:14.000
database.

267
00:19:14.240 --> 00:19:18.680
Show me everything you've got in the people table.

268
00:19:19.220 --> 00:19:23.120
So now let's execute just this line by just doing a controlled return.

269
00:19:23.570 --> 00:19:24.140
All right.

270
00:19:24.350 --> 00:19:25.790
So look at that.

271
00:19:25.820 --> 00:19:27.050
Here's our result.

272
00:19:27.470 --> 00:19:32.900
We've got a record with an idea of one first name, Harry last name Johnson.

273
00:19:32.900 --> 00:19:41.990
Date of birth 1950 March 15th at 10:45 and 10 seconds with a salary of 100000.

274
00:19:42.350 --> 00:19:46.640
So congratulations, we've now created our first table.

275
00:19:46.940 --> 00:19:53.390
We've inserted one record into the table and we've queried that record back out of the table.

276
00:19:53.720 --> 00:19:58.130
So in the next lesson, we'll learn a little more about how some of the sequel is working, and then

277
00:19:58.130 --> 00:20:03.530
we'll will make a few more records and we'll learn a few more sequel tricks see in the next one.
