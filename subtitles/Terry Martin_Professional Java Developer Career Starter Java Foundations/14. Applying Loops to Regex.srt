1
00:00:00,060 --> 00:00:07,380
Hey, there, I wanted to take a real quick few moments to revisit one little lesson with regular expressions,

2
00:00:07,530 --> 00:00:13,740
even though we're in the module for control flow, because now, as I mentioned in one of the last lessons

3
00:00:13,740 --> 00:00:19,500
from Regular Expressions module, I would come back and show you one little thing with control flow.

4
00:00:19,510 --> 00:00:27,300
So now that you've learned about loops, we can apply a loop to what we did in one of those last lessons

5
00:00:27,300 --> 00:00:28,410
from Regex.

6
00:00:28,800 --> 00:00:32,730
So if you recall, I know it might seem like it was a million years ago.

7
00:00:32,730 --> 00:00:41,610
But if you recall we had this program where we were creating a list of people in a multi line string

8
00:00:41,610 --> 00:00:45,840
of cartoon characters from The Flintstones to be more precise.

9
00:00:46,440 --> 00:00:48,280
And then we created a Rig X.

10
00:00:48,300 --> 00:00:55,380
But up until that point, all of the regular expressions that we had created were rag axes that were

11
00:00:55,380 --> 00:00:58,350
meant to match an entire string.

12
00:00:58,770 --> 00:01:07,620
But this time we created a Rig X that only matched one pattern, one sub pattern within this string.

13
00:01:07,640 --> 00:01:10,260
So in other words, we have a repeating pattern here.

14
00:01:10,290 --> 00:01:16,020
Last name, comma, first name, comma, date, last name, comma, first name, comma, date, etc.,

15
00:01:16,020 --> 00:01:16,720
etc. right?

16
00:01:16,740 --> 00:01:18,270
And that pattern is repeating.

17
00:01:18,510 --> 00:01:26,730
So we didn't create projects with with this pattern four times, we just created the pattern one time.

18
00:01:27,090 --> 00:01:37,060
Then I showed you how you could use that pattern with the match or Dot find method to find that pattern.

19
00:01:37,110 --> 00:01:41,820
However, often it may exist within a string.

20
00:01:42,000 --> 00:01:48,720
But because we had not yet learned about loops, I didn't show you the last little bit that really makes

21
00:01:48,720 --> 00:01:50,040
this quite powerful.

22
00:01:50,250 --> 00:01:52,170
So I'm going to take off this number.

23
00:01:52,170 --> 00:01:58,230
By the way, that number, if you recall, just tells the match or find method to skip the first 35

24
00:01:58,230 --> 00:02:01,650
characters before it starts trying to find a match.

25
00:02:01,830 --> 00:02:06,960
So let's take that out and just tell it to start at the very beginning of the string.

26
00:02:07,170 --> 00:02:11,820
So now what we can do now that we know how to create loops?

27
00:02:12,390 --> 00:02:13,770
Let's do this.

28
00:02:13,770 --> 00:02:18,990
Let's select all of this, and let's surround it with a loop.

29
00:02:19,680 --> 00:02:22,240
Do you remember how to do that command option T..

30
00:02:23,250 --> 00:02:26,610
And let's surround it with a while loop.

31
00:02:26,880 --> 00:02:27,390
OK.

32
00:02:28,980 --> 00:02:29,400
All right.

33
00:02:29,550 --> 00:02:35,460
Now, instead of hard coding it to true, which would cause it to loop forever, which we don't want,

34
00:02:35,880 --> 00:02:38,790
we will grab this line match dot find.

35
00:02:39,120 --> 00:02:45,630
I'm going to just cut that and then I will delete that line and then I will paste it right over the

36
00:02:45,630 --> 00:02:46,170
truth.

37
00:02:47,400 --> 00:02:51,420
So this find method does two things.

38
00:02:51,900 --> 00:02:58,800
It tells the regular expression engine to take this rejects and go see if you can find a match for it

39
00:02:58,800 --> 00:03:06,900
anywhere in this string, which presumably would work to first find this first line of the string.

40
00:03:06,930 --> 00:03:13,530
OK, and then if it does find a match, which in this case we know it will, it returns a boolean true,

41
00:03:13,800 --> 00:03:17,730
which means that the while loop can keep looping, right?

42
00:03:17,880 --> 00:03:27,750
And so because this fine method returns a boolean true after it has found this last line, the loop

43
00:03:27,750 --> 00:03:33,510
will come back up here again and try to find another match, but it won't find one.

44
00:03:33,510 --> 00:03:41,550
And so the matched find method on the last line after the last line will return a Boolean false and

45
00:03:41,550 --> 00:03:43,020
the loop will end.

46
00:03:43,050 --> 00:03:49,650
OK, so let's jazz this up a little bit, though let's not print all of these things out separately.

47
00:03:49,650 --> 00:03:54,700
Instead, let's use a system out with the print f.

48
00:03:55,170 --> 00:03:58,200
OK, and then let's do a formatted print.

49
00:03:58,470 --> 00:04:04,770
So let's do something like, well, we won't make it too much different than it already is, but we'll

50
00:04:04,770 --> 00:04:11,880
do maybe a first name, last name and then a date of birth.

51
00:04:12,240 --> 00:04:13,110
Let's do that.

52
00:04:14,010 --> 00:04:14,860
And a new line.

53
00:04:16,020 --> 00:04:27,090
OK, so we can do matched group first name matched group.

54
00:04:29,550 --> 00:04:34,560
Last name and match group.

55
00:04:37,080 --> 00:04:39,180
Date of birth like that.

56
00:04:40,020 --> 00:04:40,470
All right.

57
00:04:41,220 --> 00:04:48,000
So if this all works properly, we should get four lines that look almost identical, except the names

58
00:04:48,000 --> 00:04:48,930
will just be flipped.

59
00:04:49,560 --> 00:04:49,840
All right.

60
00:04:49,860 --> 00:04:51,480
Let's run that and see what we get.

61
00:04:54,070 --> 00:04:55,180
Hey, there we go.

62
00:04:55,300 --> 00:04:59,080
Fred Flintstone, here we had Flintstone Fred, Rubble, Barney.

63
00:04:59,110 --> 00:05:01,870
Here we get Barney, rubble, et cetera, et cetera.

64
00:05:01,900 --> 00:05:06,760
So that's really about all I wanted to show you was just the fact that now that we know about loops,

65
00:05:06,760 --> 00:05:11,110
we can use this in the way that it was actually really intended to be used.

66
00:05:11,120 --> 00:05:18,160
So if you recall in the original regex lesson for this, I just called matched up find multiple times,

67
00:05:18,160 --> 00:05:19,900
which you can also do for sure.

68
00:05:20,140 --> 00:05:26,440
But the way that it was mostly intended to be used was inside of a loop, which is why the find method

69
00:05:26,440 --> 00:05:31,230
returns a boolean true or false if it does or does not find a match.

70
00:05:31,240 --> 00:05:36,700
So that way you'd know you'd have a nice way to stop your loop from running, which is also the reason

71
00:05:36,700 --> 00:05:39,790
why I use a while loop here instead of a fork.

72
00:05:39,910 --> 00:05:42,180
Now, of course, I could have used the for loop to write.

73
00:05:42,190 --> 00:05:46,090
In this case, I could have used a for loop because I knew I only have four lines.

74
00:05:46,090 --> 00:05:49,720
But what if I had like 1473 lines?

75
00:05:49,720 --> 00:05:54,250
I'm not going to sit there and count how many lines I have and then make a for loop for that exactly

76
00:05:54,250 --> 00:05:55,120
that number, right?

77
00:05:55,300 --> 00:06:00,940
A while loop would be perfect for that, and a while loop would be more appropriate in that case than

78
00:06:00,940 --> 00:06:02,050
they do while loop.

79
00:06:02,050 --> 00:06:07,680
Because with a do wire loop, you assume that the loop is going to occur at least one time.

80
00:06:07,690 --> 00:06:11,090
But if you don't have a match, then it shouldn't occur at all, right?

81
00:06:11,110 --> 00:06:14,200
So while loop is is probably your best bet.

82
00:06:14,620 --> 00:06:14,990
All right.

83
00:06:15,010 --> 00:06:19,390
That's all I wanted to show you in this lesson and see in the next one.
