WEBVTT
1
00:00:00.690 --> 00:00:01.210
All right.

2
00:00:01.230 --> 00:00:09.960
We're finally at the end of this module, I know this has been a monster long module, but that's because

3
00:00:09.960 --> 00:00:12.550
there's so much to cover in this topic.

4
00:00:12.570 --> 00:00:18.300
And you know, we needed to kind of dig into the weeds before we could proceed with the rest of the

5
00:00:18.300 --> 00:00:26.370
course because a lot of the other really awesome things that you can do in Java will kind of require

6
00:00:26.400 --> 00:00:30.510
somewhat of a knowledge, particularly of interfaces.

7
00:00:31.260 --> 00:00:36.410
And so I didn't want to proceed any further without introducing you to interfaces.

8
00:00:36.450 --> 00:00:44.280
So I want to just do a quick review and summary of some of the key concepts that you've learned in this

9
00:00:44.280 --> 00:00:48.490
module, starting with the concept of encapsulation.

10
00:00:48.510 --> 00:00:50.310
You've heard me mention it a number of times.

11
00:00:50.310 --> 00:00:54.480
I just want to review what that actually means, so we'll take a quick look.

12
00:00:54.810 --> 00:01:01.260
So let's see if we jump over to the employee class and we jump up here to the top.

13
00:01:01.270 --> 00:01:09.120
So what encapsulation basically is is it's our ability with object oriented programming, either to

14
00:01:09.150 --> 00:01:19.470
combine data and behavior together to encapsulate related data and behaviors for that data together

15
00:01:19.470 --> 00:01:20.850
in one unit.

16
00:01:20.850 --> 00:01:26.280
And that unit is a class or an object, two sides of the same coin really, right?

17
00:01:26.520 --> 00:01:30.990
And so here we see that we've got the class employee now.

18
00:01:30.990 --> 00:01:33.930
This is an abstract class, and I'll review what that means.

19
00:01:33.930 --> 00:01:41.880
But let's just take it as it is a class an employee and it models the concept of an employee and it

20
00:01:41.880 --> 00:01:45.180
has a last name and a first name and a date of birth.

21
00:01:45.180 --> 00:01:46.480
So that would be the data.

22
00:01:46.500 --> 00:01:46.920
OK.

23
00:01:47.100 --> 00:01:49.970
Now notice I'm skipping over these other fields.

24
00:01:49.980 --> 00:01:58.130
I'm not considering these to be data because they're not directly part of the concept of an employee,

25
00:01:58.140 --> 00:01:58.450
right?

26
00:01:58.770 --> 00:02:02.850
People matter has nothing to do with the concept of an employee.

27
00:02:03.030 --> 00:02:10.500
If you were to talk to a person who's familiar with jobs and working but not a programmer, they'd understand

28
00:02:10.500 --> 00:02:11.340
perfectly well.

29
00:02:11.340 --> 00:02:16.410
If you said, I've got a lot of employees who have last names, first names and dates of birth, they'd

30
00:02:16.410 --> 00:02:18.390
understand that they wouldn't understand.

31
00:02:18.390 --> 00:02:24.730
If you said your employees also have the people matter and rejects patterns and things of this sort.

32
00:02:24.750 --> 00:02:31.740
So these are more like utility fields that are helping us to get our work done in this class, but I

33
00:02:31.740 --> 00:02:37.140
don't consider them to actually be part of the data of this concept, OK?

34
00:02:37.170 --> 00:02:41.820
If that distinction makes sense, anyway, so we've got these fields first name, last name, date of

35
00:02:41.820 --> 00:02:43.140
birth, they are the data.

36
00:02:44.070 --> 00:02:51.330
And then we've got behavior for this class, such as the ability to provide a salary to calculate or

37
00:02:51.330 --> 00:02:54.420
figure out what what this employee's salary would be.

38
00:02:54.630 --> 00:03:00.900
And then from there to even figure out what this employee's bonus would be, which depends on knowing

39
00:03:00.900 --> 00:03:02.400
what the salary would be, OK?

40
00:03:02.610 --> 00:03:07.330
These are behaviors that we have encapsulated into the employee class.

41
00:03:07.350 --> 00:03:07.680
OK.

42
00:03:07.860 --> 00:03:14.670
Also, the ability to represent the employee in a text form with the two string method, which we overrode.

43
00:03:14.730 --> 00:03:15.210
OK.

44
00:03:15.360 --> 00:03:22.480
So we are combining the data and the behavior together in a unit where it makes sense.

45
00:03:22.500 --> 00:03:23.010
OK.

46
00:03:24.100 --> 00:03:28.450
And that unit is the employee class in this case.

47
00:03:28.900 --> 00:03:33.520
So that's encapsulation, then we also learned about inheritance.

48
00:03:34.240 --> 00:03:36.280
So I'll show you an example of that.

49
00:03:37.030 --> 00:03:37.480
Let's see.

50
00:03:37.480 --> 00:03:39.400
We'll jump to the CEO class.

51
00:03:39.400 --> 00:03:49.030
So we've got several classes that are extending the employee class, and by doing so, they are inheriting

52
00:03:49.720 --> 00:03:55.690
potentially some of the employee classes, data and behaviors.

53
00:03:55.810 --> 00:04:02.650
So one one more time, actually, if we jump back over here to employee notice that the data of employee,

54
00:04:02.650 --> 00:04:08.350
particularly the last name, first name and date of birth are protected, and we learned long ago that

55
00:04:08.350 --> 00:04:10.570
this just means it's almost private.

56
00:04:10.870 --> 00:04:16.390
It's private to everybody, except for classes that extend employee, essentially.

57
00:04:16.450 --> 00:04:16.780
Right?

58
00:04:17.170 --> 00:04:25.600
And so jumping back over to CEO, the CEO inherits the first name, last name and date of birth fields

59
00:04:25.600 --> 00:04:30.100
and any other fields that are not completely private in the employee class.

60
00:04:30.400 --> 00:04:37.510
And so it's as if it's almost as if those fields were defined directly on the CEO class, even though

61
00:04:37.510 --> 00:04:39.070
they happen not to be.

62
00:04:39.370 --> 00:04:42.070
And then the same goes for the methods as well.

63
00:04:42.100 --> 00:04:49.420
So you saw in the employee class that we had a method to calculate the bonus, right?

64
00:04:49.540 --> 00:04:50.860
And it is public.

65
00:04:51.340 --> 00:04:57.940
The CEO, analyst and programmer and manager all inherit that method for free.

66
00:04:59.050 --> 00:05:03.790
So that's another key nicety of inheritance, right?

67
00:05:03.910 --> 00:05:08.710
It basically allows us to reuse code in a fairly elegant way.

68
00:05:09.190 --> 00:05:17.380
So these subclasses of the employee, CEO, analyst, manager and programmer, they're able to reuse

69
00:05:17.620 --> 00:05:20.620
some of the code of the employee class.

70
00:05:21.040 --> 00:05:21.390
All right.

71
00:05:21.400 --> 00:05:23.890
And then we also learned about composition.

72
00:05:24.160 --> 00:05:28.810
Composition is an awesome technique that can be used in a couple of ways.

73
00:05:28.990 --> 00:05:37.540
If we want to allow a class such as RCO Class to internally make use of some other classes capabilities,

74
00:05:37.780 --> 00:05:44.230
we can create an instance of that other class and then we can just call methods on it internally to

75
00:05:44.230 --> 00:05:46.520
our own methods on the CEO class.

76
00:05:46.540 --> 00:05:53.860
That's one way that we can use composition to get more functionality or more behaviors or capabilities

77
00:05:54.130 --> 00:05:56.110
for for very little cost, right?

78
00:05:56.110 --> 00:06:03.310
Because we're just calling some other classes capabilities, we're composing the CEO class from, in

79
00:06:03.310 --> 00:06:05.260
this case, the flyer class, OK.

80
00:06:06.100 --> 00:06:13.750
But in addition to that, we learned that we can use composition as a means of getting around the fact

81
00:06:13.750 --> 00:06:19.660
that Java does not technically or directly support multiple inheritance.

82
00:06:20.200 --> 00:06:28.030
Quick reminder Multiple inheritance is where a class such as CEO would be able to extend more than just

83
00:06:28.030 --> 00:06:29.260
the employee class.

84
00:06:29.260 --> 00:06:36.760
If we were to put a comma here and then we could say something like flyer or pilot or whatever, right?

85
00:06:37.510 --> 00:06:44.650
As you've learned, Java does not allow us to inherit from multiple classes directly in this in this

86
00:06:44.650 --> 00:06:45.100
way.

87
00:06:45.640 --> 00:06:54.040
So one of the most useful ways that we can get around that supposed limitation is through composition.

88
00:06:54.280 --> 00:07:03.520
We can compose our CEO class of other classes that have behavior and or data that we want to reuse,

89
00:07:03.730 --> 00:07:09.910
as I'm doing here, creating an instance of the pilot, storing it in this flyer variable, right?

90
00:07:10.210 --> 00:07:18.280
And then I can expose methods on the CEO class that essentially delegate down to methods of the pilot

91
00:07:18.280 --> 00:07:18.820
class.

92
00:07:19.060 --> 00:07:26.440
And if you'll recall, I was even able to generate those delegate methods automatically via the ADP.

93
00:07:26.620 --> 00:07:34.420
So some of these methods, such as fly get hours flown, set hours flown is IFR, said IFR.

94
00:07:34.630 --> 00:07:41.410
These are all delegate methods that the ID generated for us, and all they really are doing is just

95
00:07:41.410 --> 00:07:48.790
delegating down to the pre-existing methods of the pilot class, which we're referencing via the variable

96
00:07:48.790 --> 00:07:49.930
called flyer here.

97
00:07:50.320 --> 00:07:50.770
OK.

98
00:07:52.390 --> 00:07:57.760
So you also learned about delegation when we learned about composition, but even without delegation,

99
00:07:57.760 --> 00:07:59.710
you can still use composition.

100
00:08:00.130 --> 00:08:07.600
If we weren't trying to make the CEO appear to also be a pilot and we just wanted the CEO to make use

101
00:08:07.600 --> 00:08:10.870
of some capabilities of the flyer, we could have done that.

102
00:08:11.350 --> 00:08:19.480
So, for example, if the pilot class had some useful method on it, that helped us to calculate a salary

103
00:08:19.480 --> 00:08:23.410
of a worker, somehow we might have called.

104
00:08:23.570 --> 00:08:26.810
That method within our get salary method.

105
00:08:26.990 --> 00:08:27.440
OK.

106
00:08:27.590 --> 00:08:32.660
Just to help us to calculate the salary, if that had made sense, which in this case it does not.

107
00:08:32.990 --> 00:08:38.510
OK, so that's another way that you can use composition that doesn't necessarily have anything to do

108
00:08:38.510 --> 00:08:39.470
with inheritance.

109
00:08:39.950 --> 00:08:40.300
All right.

110
00:08:40.310 --> 00:08:48.500
And then maybe one final concept that I have not mentioned explicitly, but we've implemented it and

111
00:08:48.500 --> 00:08:55.010
we've seen it is the concept called polymorphism, and this is definitely one of the most frequently

112
00:08:55.010 --> 00:08:59.120
mentioned concepts of object oriented programming anyway.

113
00:08:59.570 --> 00:09:07.520
So polymorphism is the concept that the caller of a class doesn't necessarily need to know specifically

114
00:09:07.520 --> 00:09:09.800
what the type of that class is.

115
00:09:10.070 --> 00:09:11.300
Let me show you what I mean.

116
00:09:12.320 --> 00:09:20.270
So if we jump over to the main class here, you will see that we are creating an instance of an employee

117
00:09:20.540 --> 00:09:25.250
using the Create employee method here and then we can take this instance.

118
00:09:25.250 --> 00:09:31.940
Let's skip over all of this, which we added more recently and focus really just on this bit down here,

119
00:09:32.690 --> 00:09:38.570
we can take that employee instance and then we can call to string and we can call, most importantly,

120
00:09:38.690 --> 00:09:39.770
get salary.

121
00:09:40.040 --> 00:09:47.600
OK, now what's cool is as a quick reminder, this get salary method behaves differently depending on

122
00:09:47.600 --> 00:09:50.120
what type of employee we're using, right?

123
00:09:50.420 --> 00:09:57.860
It returns different values if you are a programmer versus a manager versus a CEO versus an analyst,

124
00:09:57.870 --> 00:09:58.160
right?

125
00:09:58.310 --> 00:10:01.700
And we have specific types for all of those.

126
00:10:02.090 --> 00:10:07.160
But this code here doesn't even know that, right?

127
00:10:07.910 --> 00:10:12.430
From the perspective of this code, they all just look like an employee.

128
00:10:12.440 --> 00:10:15.470
In fact, specifically, they all look like this interface.

129
00:10:15.740 --> 00:10:25.820
I employee, OK, and all that this code needs to care about is that any object of type I employee has

130
00:10:25.820 --> 00:10:29.810
a method called get salary and he can call that method.

131
00:10:29.840 --> 00:10:37.370
OK, so he doesn't need to know the details of what specific subtype each of these employees is.

132
00:10:37.370 --> 00:10:38.360
He doesn't care.

133
00:10:38.780 --> 00:10:46.670
And so we're essentially able to hide the details of the type of a class this is polymorphism making

134
00:10:46.670 --> 00:10:50.210
many shapes look like one essentially OK.

135
00:10:51.270 --> 00:10:52.320
Super powerful.

136
00:10:52.410 --> 00:10:54.510
And let me be a little more explicit now.

137
00:10:54.720 --> 00:11:00.720
We took several lessons to arrive at this implementation, and so you would be forgiven if you might

138
00:11:00.720 --> 00:11:07.530
have lost track of what the core benefit of using this polymorphic approach was.

139
00:11:08.100 --> 00:11:15.090
Without using polymorphism, we would likely have used some kind of convoluted Ethel's block like this

140
00:11:15.420 --> 00:11:16.140
to test.

141
00:11:16.680 --> 00:11:20.250
If it's a programmer, then you should calculate the salary this way.

142
00:11:20.250 --> 00:11:21.570
And that's where we started.

143
00:11:21.570 --> 00:11:28.560
If you'll recall, when we first started this module, we created this code and we were explicitly calculating

144
00:11:28.560 --> 00:11:31.440
the salaries all in line here.

145
00:11:31.470 --> 00:11:31.890
Right?

146
00:11:32.070 --> 00:11:34.260
That's why I started you off that way.

147
00:11:34.440 --> 00:11:41.760
Now, as a quick reminder, if calculating a salary only required one or two lines of code, it might

148
00:11:41.760 --> 00:11:48.000
very well make sense just to keep using and if else block or or switch.

149
00:11:48.020 --> 00:11:51.930
I'm sorry, I think we actually use the switch, but same difference essentially, right?

150
00:11:52.510 --> 00:11:55.770
NFLX block or switch to calculate that.

151
00:11:55.920 --> 00:11:59.460
But imagine if calculating the salary was much more involved.

152
00:11:59.670 --> 00:12:07.080
Perhaps it could require us to go make a call to a database or to a web service or or retrieve data

153
00:12:07.080 --> 00:12:08.430
from who knows where.

154
00:12:08.610 --> 00:12:14.670
Maybe you have to retrieve lots of different data and sift through it and do all sorts of complex things

155
00:12:15.060 --> 00:12:22.140
such that if we were to try to do that inside of an if or a switch block, each of these bodies here

156
00:12:22.770 --> 00:12:30.550
might be many, many, many lines of code, maybe a whole entire page of code just for one case.

157
00:12:30.570 --> 00:12:31.010
OK.

158
00:12:31.380 --> 00:12:36.750
Thereby making one class thousands of lines long.

159
00:12:36.960 --> 00:12:39.070
And you typically want to avoid that.

160
00:12:39.090 --> 00:12:41.970
We want to keep our classes typically short and sweet.

161
00:12:42.000 --> 00:12:45.810
We also want to typically keep our methods short and sweet as well.

162
00:12:46.140 --> 00:12:50.550
And so that would have been a very poor design if we had had to do that.

163
00:12:52.230 --> 00:12:52.650
OK.

164
00:12:53.730 --> 00:13:01.500
So that's arguably one of the primary benefits of using polymorphism in this way.

165
00:13:01.710 --> 00:13:08.420
It's essentially to help prevent us from having to make a lot of convoluted, conditional checks that

166
00:13:08.430 --> 00:13:12.810
you can generally call these false blocks or switches as conditions, right?

167
00:13:12.870 --> 00:13:15.330
If it's this, then do this blah blah blah.

168
00:13:15.360 --> 00:13:21.630
And as another reminder, the reason that we created this particular EFL's block here was because I

169
00:13:21.630 --> 00:13:30.960
laid out a fictitious scenario in which we were pretending that we needed to output something different

170
00:13:31.050 --> 00:13:32.010
for each type.

171
00:13:32.160 --> 00:13:34.350
But we don't own the code anymore.

172
00:13:34.500 --> 00:13:42.570
So if you don't have access to the code in these subtypes, programmer manager, analysts, CEO, this

173
00:13:42.570 --> 00:13:44.550
might be what you would have to do.

174
00:13:44.730 --> 00:13:51.180
OK, so this is kind of showing you the world without your ability to make good use of object orientation

175
00:13:51.180 --> 00:13:52.950
and specifically polymorphism.

176
00:13:53.430 --> 00:13:53.850
All right.

177
00:13:54.030 --> 00:14:00.510
And obviously, I already eluded to the fact that we learned about interfaces and abstract classes as

178
00:14:00.510 --> 00:14:00.900
well.

179
00:14:01.110 --> 00:14:09.540
So an interface could be thought of as a gutted out class that simply states methods that need to be

180
00:14:09.540 --> 00:14:11.830
implemented somewhere else.

181
00:14:11.850 --> 00:14:12.210
Right?

182
00:14:13.320 --> 00:14:17.290
That need to be implemented by the classes that implement that interface.

183
00:14:17.310 --> 00:14:17.720
OK.

184
00:14:17.970 --> 00:14:21.360
So it's really just a way it's almost like a mask, if you will.

185
00:14:21.420 --> 00:14:28.890
It's a way to put a mask over a class so that you can make that class look like something else.

186
00:14:29.280 --> 00:14:29.590
OK.

187
00:14:29.610 --> 00:14:36.570
So again, over here, we're going to make all of the objects that come out of this create employee

188
00:14:36.570 --> 00:14:39.150
method look like I employee.

189
00:14:39.270 --> 00:14:45.570
Now, mind you, you can't just take any object and make it look like any interface.

190
00:14:45.810 --> 00:14:52.800
That object has to implement that interface in order to be able to refer to it by that interface.

191
00:14:53.010 --> 00:15:00.090
And when we do so, you now mask any methods that that object might have had that are not defined on

192
00:15:00.090 --> 00:15:01.420
the interface itself.

193
00:15:01.440 --> 00:15:04.950
OK, so the interface kind of does this masking thing.

194
00:15:05.250 --> 00:15:05.640
All right.

195
00:15:06.240 --> 00:15:06.590
OK.

196
00:15:06.600 --> 00:15:12.690
And then we also learned about abstract classes, which are sort of in between interfaces and concrete

197
00:15:12.690 --> 00:15:13.470
classes.

198
00:15:14.250 --> 00:15:18.330
So we'll take another quick look at our abstract class of employee.

199
00:15:20.030 --> 00:15:24.950
We define it as abstract by simply putting the word abstract in front of the word class.

200
00:15:25.490 --> 00:15:33.680
And what an abstract class allows us to do is to define some methods as being abstract while defining

201
00:15:33.680 --> 00:15:37.370
other methods if we want as being concrete.

202
00:15:37.940 --> 00:15:38.390
OK.

203
00:15:38.780 --> 00:15:40.220
And so we can mix and match.

204
00:15:40.310 --> 00:15:46.610
The nice thing here is that we can then use the template pattern if we want to and have our concrete

205
00:15:46.610 --> 00:15:50.960
methods, which can be inherited by subclasses.

206
00:15:51.320 --> 00:15:56.960
They can refer to the abstract methods, even though the abstract method at this point may not have

207
00:15:56.960 --> 00:15:59.640
been implemented yet by any subclass.

208
00:15:59.660 --> 00:16:01.850
So this is a really cool little pattern.

209
00:16:01.850 --> 00:16:08.090
So here we've got the get bonus method that's saying the bonus will be calculated by getting the salary

210
00:16:08.240 --> 00:16:10.940
and then multiplying that times 10 percent.

211
00:16:11.150 --> 00:16:16.370
And you see that here, even though we don't really know the details at the time of writing this code

212
00:16:16.370 --> 00:16:20.570
of how the salary will be calculated and we don't need to know that right.

213
00:16:20.570 --> 00:16:27.020
That's an implementation detail that we can delay for a later period of time, such as when we decide

214
00:16:27.020 --> 00:16:31.580
to go implement a subclass of this abstract class.

215
00:16:31.730 --> 00:16:33.500
And that's kind of the beauty, right?

216
00:16:33.520 --> 00:16:36.880
You don't have to implement all the details right now.

217
00:16:36.890 --> 00:16:39.500
Some details can be implemented later down the road.

218
00:16:39.530 --> 00:16:45.110
One other key point I want to mention here I might have mentioned it very briefly in passing, but I

219
00:16:45.110 --> 00:16:50.480
want to be a little more explicit about it is something I'm reminded of in this code here.

220
00:16:50.780 --> 00:16:58.120
As you can see, we created this employee instance and defined it to be the same type as the Interface

221
00:16:58.130 --> 00:16:59.270
I employee.

222
00:16:59.480 --> 00:17:03.900
And then we use it down here via, you know, in a polymorphic way.

223
00:17:03.920 --> 00:17:04.340
Right?

224
00:17:04.580 --> 00:17:11.930
So this just reminds me to mention an important concept in object orientation, unless you have a specific

225
00:17:11.930 --> 00:17:13.880
reason not to do so.

226
00:17:14.300 --> 00:17:23.660
You should generally store instances of your objects in the most generic data type that allows you to

227
00:17:23.660 --> 00:17:25.040
get your work done.

228
00:17:25.370 --> 00:17:26.570
What do I mean by that?

229
00:17:27.580 --> 00:17:37.090
Well, looking at this code here, if I had chosen to store this variable in a data type of programmer,

230
00:17:37.090 --> 00:17:44.800
for example, obviously in that case I'd be limiting what I could do down here to only what can be done

231
00:17:44.800 --> 00:17:46.660
on a programmer itself.

232
00:17:46.840 --> 00:17:53.320
So here where we're creating employees other data types, well, actually, this would have given me

233
00:17:53.320 --> 00:17:54.010
an error.

234
00:17:54.010 --> 00:18:01.340
For one thing, because the create employee method currently is defined to return and I employee anyway.

235
00:18:01.900 --> 00:18:09.530
But in general, I'd be limiting what methods I could call to those that are only of type programmer.

236
00:18:09.550 --> 00:18:17.620
So the main thing I want to point out here is that by using one of the most generic data types I can

237
00:18:17.770 --> 00:18:25.270
for creating an employee and storing it in this case, the interface I employee, I allow myself to

238
00:18:25.270 --> 00:18:33.790
be free to add new types of employees in the future without breaking any of this code, right?

239
00:18:34.060 --> 00:18:41.890
So as long as my new types of employees adhere to the I employee interface, that is as long as they

240
00:18:41.890 --> 00:18:50.320
implement the I employee interface, none of this code here, perhaps excluding this, you know, this

241
00:18:50.320 --> 00:18:53.320
example of a world where you don't have polymorphism.

242
00:18:53.320 --> 00:18:59.060
In fact, let me go ahead and just delete that now so as to not confuse you any further.

243
00:18:59.080 --> 00:18:59.410
Right?

244
00:19:00.430 --> 00:19:10.120
So this code would not need to change at all, even if we were to add five more types of employee in

245
00:19:10.120 --> 00:19:10.780
the future.

246
00:19:10.810 --> 00:19:11.200
Right.

247
00:19:11.590 --> 00:19:16.540
And that's again, one of the beauties of object orientation and polymorphism.

248
00:19:16.750 --> 00:19:26.680
So the key point, though, is you should prefer, whenever possible, to store your instances of objects

249
00:19:26.980 --> 00:19:29.800
in the most generic data type.

250
00:19:29.950 --> 00:19:32.560
You can get away with typically.

251
00:19:32.800 --> 00:19:33.270
OK.

252
00:19:33.400 --> 00:19:37.800
So be as generic and unspecific as you can.

253
00:19:38.080 --> 00:19:44.020
In this case, the only thing we knew we needed to call were to string and get salary.

254
00:19:44.590 --> 00:19:49.360
We have access to both of those from variables of type I employee.

255
00:19:49.540 --> 00:19:53.140
So why create anything more specific than that, right?

256
00:19:53.380 --> 00:20:00.820
And by keeping it loose and keeping it fairly generic, we keep our code very flexible and capable of

257
00:20:00.820 --> 00:20:02.890
being updated with minimal changes.

258
00:20:03.100 --> 00:20:03.460
All right.

259
00:20:03.460 --> 00:20:09.450
So this was just a quick little summary of a lot of the key concepts that we've learned.

260
00:20:09.460 --> 00:20:15.670
I would have been remiss if I had allowed you to end this module, and I didn't particularly teach you

261
00:20:15.670 --> 00:20:22.450
the term polymorphism super important if and when you ever go in for a job interview and people know

262
00:20:22.450 --> 00:20:27.220
that this is your first programming job and they know that, you know, Java, there's a fair chance

263
00:20:27.220 --> 00:20:30.400
you're going to be asked What is polymorphism right?

264
00:20:30.670 --> 00:20:32.470
So now you know what that is.

265
00:20:33.010 --> 00:20:33.550
All right.

266
00:20:34.180 --> 00:20:36.590
I hope you got a lot out of this module.

267
00:20:36.610 --> 00:20:42.430
It was an extremely important module, but hopefully it got everything that I was trying to convey to

268
00:20:42.430 --> 00:20:43.210
you in this.

269
00:20:43.510 --> 00:20:46.180
And with that, I will see you in the next one.
