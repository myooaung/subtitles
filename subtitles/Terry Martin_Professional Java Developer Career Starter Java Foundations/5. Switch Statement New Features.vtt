WEBVTT
1
00:00:00.090 --> 00:00:08.250
OK, now let's look at another scenario of something that we can do with the Switch statement as of

2
00:00:08.250 --> 00:00:10.170
Java version 14.

3
00:00:10.440 --> 00:00:16.900
Java has added another capability to the Switch statements, and we'll take a look at that now.

4
00:00:16.920 --> 00:00:21.450
So we're going to write a little bit of code, but first, let me explain what we're going to write.

5
00:00:21.720 --> 00:00:28.110
We're going to write a little bit of code that will simulate a small portion of the game of blackjack.

6
00:00:28.560 --> 00:00:34.410
And so I want to make sure that everybody understands the basic way that blackjack works.

7
00:00:34.920 --> 00:00:37.620
So in blackjack, that's a card game.

8
00:00:37.620 --> 00:00:40.100
You use most of the cards of the deck.

9
00:00:40.110 --> 00:00:41.160
I'm not actually sure.

10
00:00:41.160 --> 00:00:42.750
I don't think we use the Joker, though.

11
00:00:42.840 --> 00:00:45.060
The Joker card, I think it's thrown out.

12
00:00:45.360 --> 00:00:53.010
And the whole point of the game of blackjack is that as a player, you will receive cards one at a time

13
00:00:53.130 --> 00:01:02.220
and you're trying to get the numerical value of all of the cards that you receive to equal as close

14
00:01:02.220 --> 00:01:06.930
to 21 as possible without exceeding 21.

15
00:01:07.140 --> 00:01:12.600
If you exceed the numerical value of 21, then you lose.

16
00:01:12.630 --> 00:01:20.430
If someone else is playing with you and they get closer to 21 than you do, then you lose and they win.

17
00:01:20.640 --> 00:01:24.630
So you're trying to get as close to the numerical value of 21 as possible.

18
00:01:25.050 --> 00:01:33.300
So of all of the cards, the number cards have a value, which is equivalent to whatever number is on

19
00:01:33.300 --> 00:01:33.450
it.

20
00:01:33.460 --> 00:01:39.570
So if you have a five of hearts, then that is equal to five.

21
00:01:40.230 --> 00:01:44.760
If you have a three of diamonds, then that is equal to a three and so on.

22
00:01:45.060 --> 00:01:48.270
However, there are also what are called face cards.

23
00:01:48.540 --> 00:01:51.480
The face cards don't have numbers on them.

24
00:01:51.930 --> 00:02:00.840
So in general, the face cards such as the Jack, Queen and King all have a value of 10.

25
00:02:01.680 --> 00:02:07.140
OK, regardless of whether it's a jack, queen or king, it has a value of 10.

26
00:02:07.560 --> 00:02:10.920
However, there's one special card the ace card.

27
00:02:11.160 --> 00:02:19.740
This card can have one of two values, depending on whichever is more beneficial to your position.

28
00:02:20.310 --> 00:02:26.370
It can either be equal to one, or it can be equal to 11.

29
00:02:27.090 --> 00:02:34.980
So in general, if the other cards in your hand, that is the other cards that you already have total

30
00:02:34.980 --> 00:02:42.600
up to 10 points, let's say, and then an ace is added to your hand.

31
00:02:42.780 --> 00:02:49.650
It would be most beneficial for that ace to now be worth 11 points, which would put you exactly at

32
00:02:49.650 --> 00:02:57.510
21 points and now you're done, as opposed to letting the ace be equal to one point, in which case

33
00:02:57.510 --> 00:02:59.910
you would now only have 11 points.

34
00:03:00.120 --> 00:03:07.920
On the other hand, if you happen to have 19 points already and then you get an ace, in that case,

35
00:03:07.920 --> 00:03:15.690
your only option is for the ace to be equal to one point, which would now put you at twenty total points.

36
00:03:16.230 --> 00:03:24.120
Because if you allowed the ace to be worth 11 points, you would go well over the limit of 21 and then

37
00:03:24.120 --> 00:03:25.530
you would automatically lose.

38
00:03:25.900 --> 00:03:26.240
OK.

39
00:03:26.370 --> 00:03:31.530
Sorry for having to go into the long explanation of how blackjack works, but I just wanted to make

40
00:03:31.530 --> 00:03:38.140
sure you understand because those rules of blackjack are are the so-called business logic of the game.

41
00:03:38.460 --> 00:03:45.060
And what we're going to do is to implement a small piece of that logic using a switch.

42
00:03:45.600 --> 00:03:51.660
So what we're going to do is we're going to allow the switch to determine the value of the cards, including

43
00:03:51.660 --> 00:03:52.500
the ace.

44
00:03:52.920 --> 00:03:53.190
All right.

45
00:03:53.190 --> 00:03:55.170
So let's jump in and see how this will work.

46
00:03:56.010 --> 00:03:59.580
OK, so I've cleared out the last class that we were in.

47
00:03:59.580 --> 00:04:00.630
We'll just reuse it.

48
00:04:01.200 --> 00:04:07.790
And the whole point of this will be simply to print out the value of a card.

49
00:04:07.800 --> 00:04:13.350
So we will have a card and we will let that card be represented as a string.

50
00:04:13.920 --> 00:04:20.200
OK, so we're going to have a variable called card, and this card could have a value.

51
00:04:20.220 --> 00:04:23.850
We're going to hard code the value in the program, OK for for now.

52
00:04:23.850 --> 00:04:32.900
So it could have a value of one or three or four or king or jack or whatever.

53
00:04:32.910 --> 00:04:34.800
OK, something like that.

54
00:04:35.490 --> 00:04:45.420
And then we're also going to have another variable which will hold our current total value of our hand.

55
00:04:45.960 --> 00:04:46.410
OK.

56
00:04:46.650 --> 00:04:52.200
So this will just represent the total value of all the cards that we have right now.

57
00:04:52.260 --> 00:04:52.590
OK.

58
00:04:52.620 --> 00:04:56.670
And again, we're going to hard code this so that we can play around with different scenarios.

59
00:04:56.670 --> 00:04:59.520
So let's say if our current.

60
00:04:59.830 --> 00:05:06.910
Total value was a 10, and we received a Jack after having a 10.

61
00:05:07.150 --> 00:05:09.730
Then the total value would now be 20.

62
00:05:10.450 --> 00:05:18.880
You get it and then we're going to have a switch statement which will determine the value of this card.

63
00:05:19.980 --> 00:05:25.440
So the way we can do this is we'll set up a switch.

64
00:05:26.490 --> 00:05:29.400
So we're going to tell it, we're going to switch on card.

65
00:05:32.280 --> 00:05:33.180
Like so.

66
00:05:34.150 --> 00:05:40.570
And we need our curly braces to set up this switch block and then we're going to have our cases.

67
00:05:41.140 --> 00:05:42.790
All right, so then we'll have our case.

68
00:05:43.030 --> 00:05:48.850
And so the first case we can have could be the highest one, which is king.

69
00:05:50.580 --> 00:05:58.470
Just like so so we have the word case, then the value that we're comparing to the card in this case

70
00:05:58.980 --> 00:06:00.180
and then a colon.

71
00:06:00.930 --> 00:06:04.550
OK, so now here's where we're going to do things a little bit differently.

72
00:06:04.560 --> 00:06:07.950
We're going to use a slightly different format for the Switch statement.

73
00:06:08.130 --> 00:06:14.370
Now this is a format of the Switch statement that has only been around since Java version 14.

74
00:06:14.490 --> 00:06:17.910
So in earlier versions of Java, you cannot do this well.

75
00:06:17.910 --> 00:06:24.450
Technically, I think it was available as a preview in Java 13, but in general, this capability we're

76
00:06:24.450 --> 00:06:29.490
about to see now has only officially been enabled since Java 14.

77
00:06:29.520 --> 00:06:37.890
Now, if you'll recall, as of the time when I recorded this course, which is around May of 2021,

78
00:06:38.040 --> 00:06:41.130
Java 16 is the current version of Java.

79
00:06:41.940 --> 00:06:52.200
So what we will do is instead of having a colon and then some statement like like, so blah blah blah

80
00:06:53.130 --> 00:06:58.680
and then a break instead of all of that, we will do this.

81
00:07:01.200 --> 00:07:08.550
We will use a an arrow, a hyphen and then a greater than symbol, which together means an arrow.

82
00:07:09.090 --> 00:07:15.210
And then we will simply put a value that we want to return if the card is a king.

83
00:07:15.480 --> 00:07:19.770
So in this case, we want to return a 10 and then a semicolon like this.

84
00:07:19.980 --> 00:07:22.410
Now we're not telling it to print anything.

85
00:07:22.410 --> 00:07:29.640
We're just returning a 10, and so we need to do something with this value if it is a king in this case.

86
00:07:29.880 --> 00:07:35.640
And what we will do is we will capture that so we can treat this whole entire switch block like something

87
00:07:35.640 --> 00:07:44.970
that returns a value, which means we can capture that value so we can have an integer variable.

88
00:07:46.800 --> 00:07:53.970
You can call it current value and then we can actually assign a value just like that.

89
00:07:54.840 --> 00:07:57.390
OK, now we're getting this squiggly line here.

90
00:07:57.390 --> 00:08:03.510
If we hover over it, we can see it, says Switch expression does not cover all possible input values,

91
00:08:03.510 --> 00:08:12.510
and we're just getting this because the IDC sees that we've set this this variable card to Jack.

92
00:08:12.660 --> 00:08:17.040
And we don't we don't have a case covering the value of Jack yet.

93
00:08:17.400 --> 00:08:20.850
So as we continue to fill this out, that will go away.

94
00:08:21.360 --> 00:08:21.630
All right.

95
00:08:21.630 --> 00:08:23.760
So there's the case for a king.

96
00:08:23.970 --> 00:08:30.720
Now, the other cool thing we can do here is in the case of black tax rules, all of the face cards

97
00:08:30.720 --> 00:08:32.640
have an equal value of 10.

98
00:08:32.910 --> 00:08:40.040
So we don't have to make separate lines like this for each of those other face cards.

99
00:08:40.050 --> 00:08:48.120
Instead, what we can do is simply add them all on to this one case line here, like so we can put a

100
00:08:48.120 --> 00:08:56.760
comma and then specify a queen is also a 10 and another comma and say that a jack is also a 10.

101
00:08:57.180 --> 00:08:58.380
So we can do that.

102
00:08:59.250 --> 00:08:59.760
All right.

103
00:09:00.180 --> 00:09:10.410
So now next, let's handle the case of the number cards, OK, and the way we can do that, since there

104
00:09:10.410 --> 00:09:16.590
are many of them and each of them has its own value, which is equivalent to the number that's printed

105
00:09:16.590 --> 00:09:17.170
on the card.

106
00:09:17.190 --> 00:09:21.680
So a two is a two, a three is a three or four is a four and so on and so forth.

107
00:09:21.690 --> 00:09:27.570
I'm inclined to use the default case for all of the rest of the cards.

108
00:09:27.810 --> 00:09:34.860
Like so, so if we do a default like this and then arrow.

109
00:09:35.550 --> 00:09:42.870
Now here's the thing the cards that we're going to receive will be strings, but the current value that

110
00:09:42.870 --> 00:09:45.210
we want to get for a card is a number.

111
00:09:45.540 --> 00:09:50.610
Can you think of how we can go from having a string like like that?

112
00:09:50.610 --> 00:09:55.560
That's a string to having a value that is equivalent to that string, right?

113
00:09:55.560 --> 00:09:58.590
So we have a card that is a string of three.

114
00:09:58.920 --> 00:10:02.700
Now we want to have a current value in this variable here.

115
00:10:02.700 --> 00:10:04.020
That would be a three.

116
00:10:04.170 --> 00:10:09.120
Can you think of how we could translate a string of a three into an integer of a three?

117
00:10:09.330 --> 00:10:10.800
Take a moment and think about it.

118
00:10:12.140 --> 00:10:12.500
OK.

119
00:10:12.530 --> 00:10:21.500
Did you get it all right, so what we can do is to use the one of the numeric wrapper classes, and

120
00:10:21.500 --> 00:10:23.650
in this case, we're dealing with integers.

121
00:10:23.660 --> 00:10:28.280
So I would go integer dot pass int.

122
00:10:29.420 --> 00:10:34.100
And then we can simply pass in the card like so.

123
00:10:34.400 --> 00:10:43.070
So if our card is a three, a string of three, that string of three will be passed and converted into

124
00:10:43.070 --> 00:10:44.810
an integer of three.

125
00:10:45.020 --> 00:10:47.780
And that's what will get stored in here.

126
00:10:48.530 --> 00:10:56.580
However, if it is a king, queen or jack, it will be a 10 that will be stored in the current value.

127
00:10:56.600 --> 00:11:00.770
So you see what we're doing here with the Switch statement and how nice this is.

128
00:11:00.980 --> 00:11:07.070
It's helping to greatly reduce the amount of code we would have had to write, maybe if we were using

129
00:11:07.070 --> 00:11:09.020
and if then else structure.

130
00:11:09.320 --> 00:11:11.490
Now I've saved the best for last.

131
00:11:11.510 --> 00:11:12.900
What about aces?

132
00:11:12.920 --> 00:11:14.810
Aces are a special case, right?

133
00:11:14.810 --> 00:11:23.600
Because I said, if you have an ace, the value could be one or 11, depending on which value is most

134
00:11:23.600 --> 00:11:27.860
beneficial and depending on what your current total value was.

135
00:11:28.100 --> 00:11:35.450
So let's see if we can figure out a way to code that I'm going to put that above the default line here.

136
00:11:35.450 --> 00:11:41.420
So I'm going to make a new line and we're going to have a special case now, ace.

137
00:11:42.710 --> 00:11:43.060
All right.

138
00:11:43.070 --> 00:11:47.630
So for Ace, we're going to do something a little more involved now.

139
00:11:47.930 --> 00:11:49.460
We'll use the arrow here.

140
00:11:49.910 --> 00:11:58.370
But now, instead of just returning a one or an 11, we need a little bit of logic to help us determine

141
00:11:58.370 --> 00:12:01.760
whether we should return a one or an 11.

142
00:12:01.940 --> 00:12:05.180
And the way we can do that is by using curly braces.

143
00:12:05.480 --> 00:12:11.660
And now inside of these curly braces, we can actually type a little more code to figure something out.

144
00:12:11.990 --> 00:12:15.080
So what we basically want to do is pretty simple.

145
00:12:15.080 --> 00:12:25.490
I think we want to say something like if the current total value is less than or equal to 10, or we

146
00:12:25.490 --> 00:12:28.040
could say less than 11, that would be the same thing.

147
00:12:28.760 --> 00:12:32.900
Then let the ace value be 11.

148
00:12:33.320 --> 00:12:35.720
Otherwise, let it be one.

149
00:12:36.440 --> 00:12:42.530
Now, do you want to take a stab at trying to write that logic yourself by pausing and seeing what you

150
00:12:42.530 --> 00:12:42.920
can do?

151
00:12:43.970 --> 00:12:44.480
Go ahead.

152
00:12:45.740 --> 00:12:47.960
OK, so now I'll take a stab at it.

153
00:12:48.500 --> 00:13:01.910
So we want to say if the current total value is less than 11, or I could also say less than or equal

154
00:13:01.910 --> 00:13:04.020
to 10, that would be equivalent.

155
00:13:04.160 --> 00:13:08.660
Either way, less than 11, then.

156
00:13:09.290 --> 00:13:15.230
Now how do we get a value out of this and into here?

157
00:13:15.770 --> 00:13:20.300
If we were in a method, we would use the return statement here.

158
00:13:20.300 --> 00:13:24.690
We'd say something like return, then return 11.

159
00:13:24.920 --> 00:13:31.010
That's what we would do if we were just in a regular method all by itself, like something in here.

160
00:13:31.220 --> 00:13:33.400
However, we're not in just the regular method.

161
00:13:33.410 --> 00:13:40.550
We're inside of the case portion of a switch block and we can't just say return.

162
00:13:40.850 --> 00:13:42.550
It doesn't make any sense to do this.

163
00:13:42.560 --> 00:13:50.810
The return statement allows us to return a value from a function as the output of that function.

164
00:13:50.930 --> 00:13:58.760
But here what we want to do is we want to return a value from the case section of a switch clause.

165
00:13:59.270 --> 00:14:02.360
And so using return doesn't make sense here.

166
00:14:02.900 --> 00:14:11.240
However, again, as of Java 14, the creators of Java have given us a new way to be able to return

167
00:14:11.240 --> 00:14:14.990
a value from within this case clause.

168
00:14:15.320 --> 00:14:21.290
And it's pretty much the same thing as a return, except return means return of value from a method.

169
00:14:21.410 --> 00:14:28.310
And now we need some special word or something that lets us return a value from a case and that special

170
00:14:28.310 --> 00:14:30.410
word is yield.

171
00:14:32.030 --> 00:14:35.810
So we can say yield and 11.

172
00:14:36.020 --> 00:14:36.450
OK.

173
00:14:36.470 --> 00:14:37.490
Just like this.

174
00:14:38.360 --> 00:14:43.130
Now we need to cover the other part of this internal case.

175
00:14:43.700 --> 00:14:52.190
If the current total value is less than 11, then basically yield an 11 else or otherwise

176
00:14:54.560 --> 00:14:56.390
yield a one.

177
00:14:57.140 --> 00:14:57.530
OK.

178
00:14:57.620 --> 00:14:59.630
So let's look at this again now.

179
00:15:00.260 --> 00:15:07.760
So here's our situation we currently have a few cards in our hand whose total value is 10.

180
00:15:07.970 --> 00:15:13.340
And let's say the next card we receive is a king.

181
00:15:14.060 --> 00:15:18.500
So in that case, the switch is going to get called on the king.

182
00:15:18.590 --> 00:15:25.370
That's going to match this first case and it's going to return a 10, which will get stored in the current

183
00:15:25.370 --> 00:15:26.090
value.

184
00:15:26.360 --> 00:15:28.700
And then in a minute here, we'll we'll print that out.

185
00:15:29.030 --> 00:15:29.480
OK.

186
00:15:29.750 --> 00:15:38.090
On the other hand, if it were an ace, then the switch would switch on the word ace, which would come

187
00:15:38.090 --> 00:15:40.430
down to this case here.

188
00:15:40.970 --> 00:15:47.180
And then some additional logic would get executed to check and determine what the value of that ace

189
00:15:47.180 --> 00:15:48.020
card should be.

190
00:15:48.290 --> 00:15:54.770
So if the current total value that is the current total value of all the the all the cards that we had

191
00:15:54.770 --> 00:15:57.890
in our hand before we received an ace.

192
00:15:58.310 --> 00:16:06.920
If the current total value was 10, which is less than 11, then our ace will be worth 11, which would

193
00:16:06.920 --> 00:16:08.750
give us a total of 21.

194
00:16:09.290 --> 00:16:10.940
And you just won.

195
00:16:11.150 --> 00:16:21.500
Otherwise, if the current total value was not less than 11 like it was 19, for example, then our

196
00:16:21.530 --> 00:16:25.790
ace will be worth only one point, which would put us at 20.

197
00:16:26.210 --> 00:16:31.250
And we won't have exceeded the limit of 21 for that for the game.

198
00:16:31.640 --> 00:16:32.720
Does that make sense?

199
00:16:32.960 --> 00:16:37.400
I know this may look a little complicated and what you're going to need to do.

200
00:16:37.400 --> 00:16:42.500
I would encourage you to actually try thinking this through on your own, maybe even try writing this

201
00:16:42.500 --> 00:16:43.730
code again yourself.

202
00:16:43.940 --> 00:16:45.560
But let's go ahead and finish this up.

203
00:16:46.160 --> 00:16:52.610
OK, so we've got one little error here, this little red squiggly here, and that's just telling us

204
00:16:52.610 --> 00:16:59.360
that we need to put a semicolon to close up this switch statement now, because this Switch statement

205
00:16:59.360 --> 00:17:04.400
is now a full statement that's capable of returning a value to this variable.

206
00:17:04.730 --> 00:17:07.970
And so we need a semicolon at the end of it now.

207
00:17:08.870 --> 00:17:09.500
All right.

208
00:17:10.850 --> 00:17:18.050
And next, we can simply print the current value.

209
00:17:20.670 --> 00:17:24.510
OK, so now let's run this and try a few scenarios.

210
00:17:25.260 --> 00:17:28.830
OK, so we can print a few things out now.

211
00:17:29.010 --> 00:17:36.000
Now I think the first thing I want to print out will be the current value of the card we just drew.

212
00:17:36.240 --> 00:17:39.540
Let's do a system that out that format.

213
00:17:39.960 --> 00:17:41.660
And you know, you've never seen me do this.

214
00:17:41.670 --> 00:17:46.800
It's honestly, it's not something I usually use the you f, but I should start using it more frequently.

215
00:17:46.920 --> 00:17:47.910
So you F..

216
00:17:47.940 --> 00:17:48.180
All right.

217
00:17:48.180 --> 00:17:53.580
So then that gives us a system out that print f, which is the same as a system that out that format.

218
00:17:54.060 --> 00:17:54.460
All right.

219
00:17:54.480 --> 00:18:07.770
And so let's say in here, current card value colon and then a percent D and a percent in and then a

220
00:18:07.770 --> 00:18:14.970
comma outside of that and then print the current value and then let's also print the total.

221
00:18:15.060 --> 00:18:18.280
Now I'll just do another ASR up here.

222
00:18:19.680 --> 00:18:29.340
Total value Kohen percent the percent in quote comma space.

223
00:18:29.520 --> 00:18:31.320
And now here we'll do a little bit of math.

224
00:18:31.320 --> 00:18:38.400
I suppose we'll do a current total value plus current value.

225
00:18:39.510 --> 00:18:41.160
OK, now we could do this better.

226
00:18:41.160 --> 00:18:46.830
We could capture this and put it in a variable, and probably we should if we were going to do anything

227
00:18:46.950 --> 00:18:47.970
a little more realistic.

228
00:18:47.970 --> 00:18:49.320
But for right now, this is OK.

229
00:18:49.620 --> 00:18:50.130
All right.

230
00:18:50.190 --> 00:18:51.720
Let's run this scenario.

231
00:18:51.730 --> 00:18:57.600
So in this scenario, we start with a value of 10 and then we add an ace to it.

232
00:18:57.780 --> 00:19:06.000
So what we should get is the ace equal to 11, which would put us at 21, which would be perfect, right?

233
00:19:06.030 --> 00:19:07.620
So let's see if that's what happens.

234
00:19:08.100 --> 00:19:09.480
Hey, perfect.

235
00:19:09.810 --> 00:19:11.560
Current card value is 11.

236
00:19:11.580 --> 00:19:13.200
Total value is 21.

237
00:19:13.440 --> 00:19:19.830
All right, now, let's see what happens if we started off with a current total value of 15.

238
00:19:20.400 --> 00:19:22.010
And then we added an ace.

239
00:19:22.020 --> 00:19:26.640
So 15 is greater than 11 or greater than 10.

240
00:19:27.000 --> 00:19:33.360
And therefore, the ace should now be equal to a one so that we don't exceed 21.

241
00:19:33.600 --> 00:19:34.920
Let's see if it works.

242
00:19:36.690 --> 00:19:37.440
Perfect.

243
00:19:37.860 --> 00:19:38.140
Yup.

244
00:19:38.400 --> 00:19:42.730
Current card value is one total value is 16.

245
00:19:42.750 --> 00:19:44.070
That's working perfectly.

246
00:19:44.340 --> 00:19:51.060
OK, now let's see what happens if we have a card that is a six.

247
00:19:54.130 --> 00:19:56.890
All right, very good current card value is six.

248
00:19:57.160 --> 00:19:59.870
Total value is twenty one, right?

249
00:19:59.890 --> 00:20:00.940
15 and six.

250
00:20:01.090 --> 00:20:01.720
Perfect.

251
00:20:02.680 --> 00:20:05.020
And let's try a few of the face cards.

252
00:20:05.320 --> 00:20:16.600
So let's see what happens if we have a king and our current total value is, well, we'll leave it at

253
00:20:16.840 --> 00:20:18.700
15 for right now.

254
00:20:20.410 --> 00:20:20.890
All right.

255
00:20:21.850 --> 00:20:23.780
Current value card value is 10.

256
00:20:23.800 --> 00:20:24.970
Total value is 25.

257
00:20:24.970 --> 00:20:25.840
Now in this.

258
00:20:25.840 --> 00:20:31.360
In this case, you would have automatically lost, which in blackjack terminology, I believe they say

259
00:20:31.360 --> 00:20:32.770
you would have busted.

260
00:20:33.070 --> 00:20:37.780
Now we could put some logic in here to determine whether or not you win or you lose.

261
00:20:37.810 --> 00:20:39.830
Maybe that's something you could add in.

262
00:20:39.850 --> 00:20:42.550
You could have a little conditional logic somewhere.

263
00:20:42.640 --> 00:20:43.720
Now I wouldn't.

264
00:20:44.050 --> 00:20:49.360
It wouldn't be appropriate to put that in here in the switch clause because this is only for determining

265
00:20:49.360 --> 00:20:52.180
the value of this one card.

266
00:20:52.210 --> 00:20:54.810
That's what this whole switch block is doing.

267
00:20:54.820 --> 00:21:03.220
You'd want to have another conditional where you would then take this total, the total total right,

268
00:21:03.700 --> 00:21:11.110
and you'd determine whether or not your new total was 21 or below.

269
00:21:11.680 --> 00:21:15.430
And if it's over 21, then you will have busted.

270
00:21:16.600 --> 00:21:20.830
And you would probably want to use in a conditional block to do that.

271
00:21:21.100 --> 00:21:23.530
So that would be a good exercise for you to try out.

272
00:21:24.100 --> 00:21:33.160
OK, so now I want to just re-emphasize the fact that using the Switch statement in this way to return

273
00:21:33.190 --> 00:21:40.480
a value that we can then do something with, this is a new this is a relatively new way of using the

274
00:21:40.480 --> 00:21:44.290
Switch statement that was added to Java.

275
00:21:44.290 --> 00:21:45.160
14.

276
00:21:45.190 --> 00:21:45.700
OK.

277
00:21:46.060 --> 00:21:54.190
So prior to this, you would not be able to use a switch statement to return and assign a value to something.

278
00:21:54.220 --> 00:21:59.470
The other way that we were using the Switch statement was simply to print various things out or to call

279
00:21:59.470 --> 00:22:00.430
some other code.

280
00:22:00.440 --> 00:22:07.180
You could call other methods or you could execute various statements within the switch clause, but

281
00:22:07.180 --> 00:22:10.930
you couldn't use the switch clause to directly return a value.

282
00:22:11.020 --> 00:22:11.430
OK.

283
00:22:11.740 --> 00:22:16.060
And so that's the innovation of using Switch in this particular way.

284
00:22:16.210 --> 00:22:24.670
Well, also, they've allowed us now to combine multiple constants here that are all going to have the

285
00:22:24.670 --> 00:22:28.330
same value, which is a nice convenience as well.

286
00:22:28.750 --> 00:22:29.090
All right.

287
00:22:29.110 --> 00:22:36.040
That's going to wrap up this lesson on the additional capabilities of the Switch statement, and I will

288
00:22:36.040 --> 00:22:37.060
see you in the next one.
