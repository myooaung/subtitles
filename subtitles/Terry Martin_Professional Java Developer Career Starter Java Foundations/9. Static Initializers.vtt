WEBVTT
1
00:00:00.990 --> 00:00:06.540
All right, there's one more scenario that I want to point out regarding static methods and static fields

2
00:00:06.540 --> 00:00:07.350
or variables.

3
00:00:07.620 --> 00:00:10.410
And that is something called a static initialize.

4
00:00:10.770 --> 00:00:16.560
So now that you've learned about static fields and you know about static methods, we can put these

5
00:00:16.560 --> 00:00:21.750
two things together for one other technique that you actually don't see all that often.

6
00:00:21.750 --> 00:00:25.920
So I don't want to spend a lot of time talking about it, but I do want you to be familiar with it.

7
00:00:26.190 --> 00:00:33.090
What if you had a static field on a class and you wanted to initialize it with some fairly complex data?

8
00:00:33.630 --> 00:00:40.500
And to do so, you might need a block of code that's more involved than just the regular single line

9
00:00:40.500 --> 00:00:42.840
initialization that we've seen before.

10
00:00:43.020 --> 00:00:48.990
So if we turn back here to the person class, what I mean is here we're creating a static member called

11
00:00:48.990 --> 00:00:52.530
PI, and we're just initializing it right here in the declaration.

12
00:00:52.530 --> 00:00:57.270
So we're declaring it here that it's public static and double and its name is PI.

13
00:00:57.390 --> 00:01:00.750
And then we're initializing it to the value of three point one four.

14
00:01:00.760 --> 00:01:02.520
So this is very straightforward, right?

15
00:01:03.000 --> 00:01:10.500
But what if we wanted to initialize a static variable with data more complicated than what we could

16
00:01:10.500 --> 00:01:15.600
specify in line in the declaration in the initialize are here?

17
00:01:16.260 --> 00:01:21.450
Well, for that kind of scenario, we could consider using what's called a static initialize.

18
00:01:21.450 --> 00:01:24.420
Or so here's an example of what I mean.

19
00:01:24.840 --> 00:01:33.350
Let's say that we have a static member variable that is an array of integers.

20
00:01:33.360 --> 00:01:38.220
OK, so it would look like this called nums.

21
00:01:40.170 --> 00:01:40.590
OK.

22
00:01:41.460 --> 00:01:49.320
And we want to initialize this array with a lot of data, and maybe that data is data that we read from

23
00:01:49.320 --> 00:01:57.180
a file or or get from the internet or some some complicated way, OK, some some way of initializing

24
00:01:57.180 --> 00:02:02.340
this, which is more involved than what we could just do right here on the same line.

25
00:02:02.400 --> 00:02:02.880
OK.

26
00:02:03.330 --> 00:02:09.990
So for a situation like that, one thing that you may occasionally see in code, though it's actually

27
00:02:09.990 --> 00:02:15.480
pretty rare, is what's called a static initialize and what it is, it's basically a method with no

28
00:02:15.480 --> 00:02:15.960
name.

29
00:02:15.990 --> 00:02:16.440
OK?

30
00:02:16.830 --> 00:02:22.470
It's almost like an anonymous method, if you will, and to create one, all you do is you type the

31
00:02:22.470 --> 00:02:29.520
keyword static and then you use an opening curly brace as if you were making the body of a method.

32
00:02:30.060 --> 00:02:38.340
And now, in between these two curly braces, you can type code that relates to any static fields in

33
00:02:38.340 --> 00:02:38.950
the class.

34
00:02:38.970 --> 00:02:39.420
OK.

35
00:02:39.660 --> 00:02:44.550
So I could set this NUM's variable to something very straightforward.

36
00:02:44.550 --> 00:02:55.440
Like I could say, NUM's equals new integer array with, I don't know, five elements.

37
00:02:55.800 --> 00:02:59.490
I can do that and then I can proceed to set each element.

38
00:03:00.750 --> 00:03:03.720
Element zero will equal a three.

39
00:03:05.310 --> 00:03:11.520
And then I could come in here and set other things right as as I want.

40
00:03:11.640 --> 00:03:18.480
So you can see already I'm doing things that would be a little harder to do inline on this same line

41
00:03:18.480 --> 00:03:19.620
where I'm declaring, right.

42
00:03:19.830 --> 00:03:26.820
So it's a little bit easier for me to do them in something like a method or a static initialize or OK.

43
00:03:26.970 --> 00:03:33.990
And so what'll happen is that when Java sees this class and analyzes it when you're running your program,

44
00:03:34.170 --> 00:03:37.410
it would run this block of code as if it were a method.

45
00:03:37.410 --> 00:03:44.850
But it would do so at basically as soon as it becomes aware that you have declared this class OK, as

46
00:03:44.850 --> 00:03:47.370
it would do for these static members as well.

47
00:03:47.760 --> 00:03:48.210
OK.

48
00:03:48.390 --> 00:03:54.990
So alternatively, you could just create a static method like something like public static.

49
00:03:55.770 --> 00:04:02.740
Let's say it's going to return an array of integers in that number.

50
00:04:04.110 --> 00:04:04.560
OK?

51
00:04:04.800 --> 00:04:06.240
You can call it whatever you want.

52
00:04:06.780 --> 00:04:12.360
And so here, maybe what we would do is we'd just copy all of that, for example.

53
00:04:13.020 --> 00:04:14.190
Paste this here.

54
00:04:14.340 --> 00:04:15.090
But.

55
00:04:16.640 --> 00:04:28.430
We might go ahead and declare this locally like so and then in the end, return numbers like that.

56
00:04:28.940 --> 00:04:34.700
Then here we can now say equals in it numbs.

57
00:04:35.780 --> 00:04:43.730
OK, so here we're explicitly calling this static method, which returns an array of integers.

58
00:04:43.880 --> 00:04:47.660
And so it allows us to create and initialize this array of integers.

59
00:04:47.660 --> 00:04:55.010
Then we return the array of integers and then we just store a reference to them inside of this static

60
00:04:55.010 --> 00:04:55.430
field.

61
00:04:55.460 --> 00:04:55.790
OK.

62
00:04:55.940 --> 00:05:01.100
So these two approaches are pretty much equivalent to each other.

63
00:05:01.310 --> 00:05:04.700
I would say that this approach is probably better.

64
00:05:04.880 --> 00:05:07.400
It's a little more obvious what's going on here.

65
00:05:07.640 --> 00:05:12.220
There are a lot of programmers who probably don't even realize you can create a static initialize.

66
00:05:12.620 --> 00:05:16.730
And so for that reason, I'd probably go with this approach.

67
00:05:16.730 --> 00:05:18.170
It's just more straightforward.

68
00:05:18.350 --> 00:05:24.380
Anyone reading this code who knows basic Java would probably understand, OK, we're calling this method.

69
00:05:24.530 --> 00:05:30.500
This method is returning an array of integers, whereas if they saw this one, it's slightly less obvious

70
00:05:30.500 --> 00:05:31.430
what's going on.

71
00:05:31.610 --> 00:05:37.430
But nevertheless, I wanted you to be aware of these approaches, and that's pretty much all I wanted

72
00:05:37.430 --> 00:05:39.710
to show you with static initializes.

73
00:05:39.950 --> 00:05:40.850
See in the next one.
