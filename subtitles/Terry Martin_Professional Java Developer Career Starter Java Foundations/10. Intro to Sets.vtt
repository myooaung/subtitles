WEBVTT
1
00:00:01.020 --> 00:00:10.080
OK, so now we're going to go on to the next big topic of collections, and that is regarding the set

2
00:00:10.080 --> 00:00:10.980
interface.

3
00:00:11.730 --> 00:00:17.160
But before we dive in too deeply on the set interface, I want to do a little bit of housekeeping with

4
00:00:17.160 --> 00:00:17.370
you.

5
00:00:18.270 --> 00:00:25.770
So if you go back in to the main class, we've been putting a lot of little test code here in there

6
00:00:25.770 --> 00:00:28.500
and I think we should go ahead and clean that out a bit.

7
00:00:29.010 --> 00:00:34.200
So starting from the top here if I scroll down.

8
00:00:35.370 --> 00:00:44.910
So we've got this first little loop where we're just taking the employees and and putting them into

9
00:00:44.910 --> 00:00:46.350
this list, right?

10
00:00:47.550 --> 00:00:53.040
And then we've got a lot of little code where we were playing around with basically sorting and ordering

11
00:00:53.250 --> 00:00:55.170
the employees and things of that sort.

12
00:00:55.410 --> 00:01:00.330
And then we've got some more stuff that's commented out and then we've got another loop down here where

13
00:01:00.330 --> 00:01:04.980
we're actually adding up the salaries.

14
00:01:05.190 --> 00:01:11.970
And then a couple of lines where we were actually formatting a number for creating a number format and

15
00:01:11.970 --> 00:01:12.870
then printing out.

16
00:01:12.990 --> 00:01:19.110
So let's uncomment the creation of the number formatter and printing out the value there.

17
00:01:19.140 --> 00:01:25.500
Let's uncomment those and then this other stuff here where we were experimenting with the Java record

18
00:01:25.770 --> 00:01:29.290
and a few things like that, and I think we can get rid of those lines.

19
00:01:29.730 --> 00:01:35.430
So I'm going to select all of those into a command, delete or control way.

20
00:01:37.250 --> 00:01:44.240
And then up above, I think we can get rid of everything that isn't this loop from from below the loop.

21
00:01:45.380 --> 00:01:52.910
So all of this down to down to where the loop the next loop begins.

22
00:01:53.280 --> 00:01:54.570
Think we can get rid of all of that?

23
00:01:54.570 --> 00:02:01.130
So I'm just going to hold down on the shift key and then click on Line sixty two on my on my I.D. to

24
00:02:01.130 --> 00:02:06.650
select all of this and then delete, command, delete or control away.

25
00:02:07.220 --> 00:02:13.430
And so what we should have now is this loop that's populating the list.

26
00:02:13.880 --> 00:02:20.780
And then another loop before loop that is adding up the salaries and then we're just printing those

27
00:02:20.780 --> 00:02:21.020
out.

28
00:02:21.350 --> 00:02:25.280
And let's go ahead and just run this again and make sure nothing is broken.

29
00:02:27.490 --> 00:02:28.240
OK, cool.

30
00:02:28.450 --> 00:02:33.220
I see the familiar 8.6 million there, so I think we're I think we're good there.

31
00:02:34.700 --> 00:02:35.270
All right.

32
00:02:35.420 --> 00:02:40.400
So now that we've done that, I think we're oh, and one more thing too.

33
00:02:40.880 --> 00:02:48.500
We could also clean up these import statements or organize the imports, I think, is what the ad calls

34
00:02:48.500 --> 00:02:48.830
that.

35
00:02:49.100 --> 00:02:55.820
And to do that, we can do a control option O or a control alt o on Windows and Linux.

36
00:02:56.450 --> 00:02:58.670
So we've got a nice clean page now.

37
00:02:59.060 --> 00:02:59.450
OK.

38
00:02:59.660 --> 00:03:08.360
So the first thing I want to do in preparation to learn about the set interface is first.

39
00:03:08.690 --> 00:03:15.800
Let's open back up the the output window from running this, or we can just run it again.

40
00:03:16.700 --> 00:03:17.270
All right.

41
00:03:17.300 --> 00:03:19.660
So I'm going to make this a little wider.

42
00:03:19.670 --> 00:03:23.930
So I think we should have what like 16 items in here to.

43
00:03:24.080 --> 00:03:29.300
To be sure, though, let's come down to where we're printing out the total.

44
00:03:29.810 --> 00:03:36.020
And let's add one more line here where we will print out the size of the employees collection.

45
00:03:36.320 --> 00:03:36.620
All right.

46
00:03:36.620 --> 00:03:42.230
So let's just we can do maybe a system that our print line and then I don't want to do anything fancier.

47
00:03:42.230 --> 00:03:48.610
So I'm just going to reference employees that size and then let's run that again.

48
00:03:49.800 --> 00:03:52.410
OK, so we've got 17, according to this.

49
00:03:52.710 --> 00:03:53.300
All right, cool.

50
00:03:53.340 --> 00:03:54.050
17.

51
00:03:54.580 --> 00:04:01.590
Right now that we've got that, here's the first thing we want to do in preparation to go learn about

52
00:04:01.590 --> 00:04:04.470
the list interface, I'm thinking.

53
00:04:04.770 --> 00:04:10.650
Let's grab a programmer and I'm thinking, maybe just keep it simple and I'm going to put my cursor

54
00:04:10.650 --> 00:04:18.180
on this first line here for Fred Flintstone, just the original Fred Flintstone, and I'm going to just

55
00:04:18.180 --> 00:04:19.440
duplicate this line.

56
00:04:19.440 --> 00:04:20.970
Maybe, I don't know, five times.

57
00:04:21.060 --> 00:04:28.210
OK, so I can do that with a Command D or a control D on Windows and Linux.

58
00:04:28.230 --> 00:04:30.450
A one two three four five.

59
00:04:30.960 --> 00:04:31.350
All right.

60
00:04:31.860 --> 00:04:33.240
So I just want to duplicate.

61
00:04:34.410 --> 00:04:37.000
One of these employees several times.

62
00:04:37.440 --> 00:04:42.330
And now let's run our code again and confirm what that count will now be.

63
00:04:43.340 --> 00:04:48.160
OK, so now I have a count of twenty two, so we had 17 and now it's 22.

64
00:04:48.680 --> 00:04:49.010
Good.

65
00:04:49.190 --> 00:04:53.000
Now we're ready to play around with the list interface, OK?

66
00:04:53.480 --> 00:04:56.170
So first off, what is a set right?

67
00:04:56.180 --> 00:04:57.380
What is the set interface?

68
00:04:57.380 --> 00:04:58.170
What is a set?

69
00:04:58.190 --> 00:04:59.300
What is it modeling?

70
00:04:59.300 --> 00:05:00.470
What kind of behavior?

71
00:05:00.840 --> 00:05:04.190
Well, so let me go back real quick and say so.

72
00:05:04.190 --> 00:05:12.380
What we learned about the list is that it is an interface that models a data structure that can hold

73
00:05:12.380 --> 00:05:21.650
a number of items or objects in some type of order, and we can access or get those items back out with

74
00:05:21.650 --> 00:05:22.620
an index.

75
00:05:22.640 --> 00:05:23.060
OK.

76
00:05:23.240 --> 00:05:29.840
So lists are all about keeping items in a list and they can grow dynamically.

77
00:05:29.840 --> 00:05:32.840
So those are the main things that we learned about the list, right?

78
00:05:33.020 --> 00:05:37.400
And then we learned a couple of implementations the array list, which is backed by an array and then

79
00:05:37.400 --> 00:05:45.140
the linked list, which uses pointers essentially to to point to each node in the list.

80
00:05:46.610 --> 00:05:50.090
And they have their pros and cons depending on what you're trying to do.

81
00:05:50.420 --> 00:05:50.780
Right?

82
00:05:51.080 --> 00:05:51.380
All right.

83
00:05:51.380 --> 00:06:00.210
So now the set interface models a structure that can also hold a collection of items or objects.

84
00:06:00.230 --> 00:06:08.930
However, one of the main things about a set is that it tries to guarantee that there will be no duplicates.

85
00:06:09.260 --> 00:06:15.620
OK, so lists, as we see here, allow for some notion of duplicate.

86
00:06:15.650 --> 00:06:21.080
We just duplicated a number of employees here and we went from having 17 to 20 to right.

87
00:06:21.080 --> 00:06:22.880
So it just lets you put whatever you want.

88
00:06:23.360 --> 00:06:28.160
So a set, though, tries to weed out duplicates.

89
00:06:28.580 --> 00:06:35.720
Now the reason I say it tries to is because, as we will learn shortly here, it depends on how we wrote

90
00:06:35.720 --> 00:06:36.560
our code.

91
00:06:36.830 --> 00:06:41.810
And we spent a little time in the last few lessons learning about equals.

92
00:06:41.840 --> 00:06:45.410
And I touched very, very briefly on hash code.

93
00:06:45.410 --> 00:06:48.650
But I told you I would save hash code for another lesson, right?

94
00:06:49.070 --> 00:06:57.260
So the equals in hash code methods come in even more when we're dealing with sets and we're about to

95
00:06:57.260 --> 00:06:57.800
see that.

96
00:06:57.830 --> 00:07:05.900
So here's what we're going to do if we scroll down to where we are creating our list and the array list,

97
00:07:05.930 --> 00:07:06.290
right?

98
00:07:06.710 --> 00:07:08.540
So we've got this collection here.

99
00:07:10.060 --> 00:07:13.930
The first thing I want to do is actually change these.

100
00:07:14.260 --> 00:07:17.470
And so we're no longer going to use any type of list.

101
00:07:17.620 --> 00:07:21.010
Instead, let's use the set and just see what happens, right?

102
00:07:21.520 --> 00:07:27.880
So I'm going to select the list here and just replace it with the word set.

103
00:07:28.450 --> 00:07:30.310
And now I have to import that.

104
00:07:30.790 --> 00:07:36.370
So I'm going to just hold down on my option return and import the set.

105
00:07:37.370 --> 00:07:38.150
Interface.

106
00:07:38.330 --> 00:07:39.530
And then over here.

107
00:07:41.340 --> 00:07:44.550
I'm going to select the array list and replace this now.

108
00:07:45.510 --> 00:07:52.710
There are three primary implementations of the set interface in Java.

109
00:07:53.760 --> 00:07:59.700
We have the most commonly used one, I would say, which is the hash set.

110
00:08:00.510 --> 00:08:05.760
And then we have the tree set and we have the linked hash set.

111
00:08:06.240 --> 00:08:12.330
We're going to start off just with using the hash set because, like I said, that's possibly the most

112
00:08:12.330 --> 00:08:13.560
commonly used one.

113
00:08:14.190 --> 00:08:20.160
One of the reasons it's probably the most commonly used is because it's the fastest default type of

114
00:08:20.160 --> 00:08:22.170
set implementation there is.

115
00:08:22.980 --> 00:08:24.510
So let's start off with that.

116
00:08:25.110 --> 00:08:32.130
So hash set just like that, and then we'll need to import it.

117
00:08:33.930 --> 00:08:34.410
There we go.

118
00:08:34.590 --> 00:08:40.020
And I'm going to get rid of the capacity there.

119
00:08:41.770 --> 00:08:44.770
All right, so we'll just let it use its default behavior for now.

120
00:08:46.280 --> 00:08:51.410
And already, let's notice a couple of things, so those are the only two things we needed to change

121
00:08:51.410 --> 00:08:52.520
so far, right?

122
00:08:53.360 --> 00:08:56.180
Everything else seems to be cool, right?

123
00:08:56.480 --> 00:09:03.530
We didn't have to change any code which goes to show that all of the interfaces and collection classes

124
00:09:03.530 --> 00:09:11.210
that are related to collection have enough in common with each other that a lot of the times you don't

125
00:09:11.210 --> 00:09:16.580
need to make a lot of major code changes if you coded wisely to begin with.

126
00:09:16.820 --> 00:09:19.880
So in our case, we're still coding to an interface.

127
00:09:19.880 --> 00:09:21.230
The interface is set.

128
00:09:21.680 --> 00:09:27.080
The implementation of the interface in this case is hash set right, so we're still coding to interface.

129
00:09:28.220 --> 00:09:31.190
The add method still works the same.

130
00:09:31.430 --> 00:09:32.480
So that's nice.

131
00:09:33.570 --> 00:09:39.960
The enhanced for Loop still works the same, so now this is a hash set or a set.

132
00:09:40.260 --> 00:09:42.600
But the enhanced for loop doesn't care.

133
00:09:42.840 --> 00:09:44.560
It's able to iterate over this.

134
00:09:44.760 --> 00:09:45.600
All the same.

135
00:09:45.930 --> 00:09:48.270
So those are a few key things to note.

136
00:09:48.280 --> 00:09:54.160
Their lists and sets have a lot of basic methods that are common to each other.

137
00:09:54.810 --> 00:09:56.100
And so that's convenient.

138
00:09:56.550 --> 00:09:56.850
All right.

139
00:09:56.850 --> 00:09:58.980
So let's run this and see what we get.

140
00:10:00.990 --> 00:10:02.190
Oh, look at that.

141
00:10:02.940 --> 00:10:12.750
We're back to 17 again, so this just goes to show right off the bat that a set can automatically filter

142
00:10:12.750 --> 00:10:13.830
out duplicates.

143
00:10:13.980 --> 00:10:21.240
Again, if your code is written properly and I'm going to show you how it can be improperly written

144
00:10:21.240 --> 00:10:28.140
in just a moment, but if it's written properly, we can use a set to filter out duplicates.

145
00:10:28.470 --> 00:10:38.250
And so if we actually move this little pane up, in fact, what we will find here is that we won't see

146
00:10:38.250 --> 00:10:40.200
any of those duplicates.

147
00:10:40.680 --> 00:10:41.760
So that's kind of cool.

148
00:10:42.360 --> 00:10:46.860
Now one thing, though, that is worth noting is that although we don't see the duplicates, let's pay

149
00:10:46.860 --> 00:10:49.760
attention to the order that we're seeing here.

150
00:10:51.440 --> 00:10:59.270
So if I scroll this back up, so here we're adding the then we're adding these employees in in the order

151
00:10:59.270 --> 00:11:04.310
in which you see right, Fred Flintstone multiple times and then two, three, four and five and then

152
00:11:04.310 --> 00:11:06.710
Barney rubble and then Wilma, et cetera.

153
00:11:07.820 --> 00:11:12.800
So interestingly, here it does start off with a Fred Flintstone.

154
00:11:14.210 --> 00:11:17.150
And then it's filtering out all of the duplicates.

155
00:11:18.820 --> 00:11:27.340
But then it seems to skip over Flintstone, two and two, three and four, because then we see Flintstone

156
00:11:27.340 --> 00:11:33.130
five and then it goes to Betty rubble.

157
00:11:36.810 --> 00:11:42.630
Who in our list here is the last one, but here she's like the third, right?

158
00:11:42.870 --> 00:11:52.680
So in other words, the items are not are not coming back out of the loop in the same order in which

159
00:11:52.680 --> 00:11:53.700
we added them.

160
00:11:54.030 --> 00:12:01.640
And that is very typical of the hash set implementation of a set.

161
00:12:01.650 --> 00:12:08.280
If I go to where we're creating that, yeah, right here, that is fairly typical of the hash that implementation

162
00:12:08.400 --> 00:12:09.570
of a set.

163
00:12:09.960 --> 00:12:16.200
It does not guarantee a predictable order for the items that you're adding, so you can add them in

164
00:12:16.200 --> 00:12:17.280
whatever order you want.

165
00:12:17.280 --> 00:12:20.940
But when you get them back out, you will not likely get them out.

166
00:12:20.940 --> 00:12:24.510
In the same order in which you added them is highly unlikely.

167
00:12:25.350 --> 00:12:30.960
And the reason for that has to do with the way that the hash set is actually working.

168
00:12:31.890 --> 00:12:40.170
So hash that associates a so-called hash code with each item that is added in to it.

169
00:12:40.650 --> 00:12:50.040
This hash code, in turn, can be added to a mathematical process to derive an index, which is really

170
00:12:50.040 --> 00:12:56.370
just a number, and that index or a number become becomes a row number in a table.

171
00:12:56.700 --> 00:13:03.660
So a hash set associates each item in it with a hash code.

172
00:13:03.990 --> 00:13:12.660
A hash code is really just a number that should be fairly unique for each item that we're adding to

173
00:13:12.660 --> 00:13:19.080
the hash set, though there can be what are called collisions, where two or more items may result in

174
00:13:19.080 --> 00:13:20.430
the same hash code.

175
00:13:20.640 --> 00:13:26.520
These hash codes, in turn, can be used to generate a row number, which is effectively an index,

176
00:13:27.060 --> 00:13:33.990
and it is by these indexes that the items are that the items that have been added to the hash that are

177
00:13:33.990 --> 00:13:35.460
ultimately ordered.

178
00:13:35.880 --> 00:13:44.400
And because that happens via the hash code, that means that generally speaking, the order in which

179
00:13:44.400 --> 00:13:49.380
we add items to a hash set is not the order in which they will come back out.

180
00:13:49.530 --> 00:13:54.900
When we're iterating over it, that's because those items result in a hash code.

181
00:13:55.140 --> 00:14:02.550
That hash code results in an index, and it is only by that index that everything gets ordered generally.

182
00:14:03.240 --> 00:14:06.600
Let me show you what that looks like in a spreadsheet.

183
00:14:07.680 --> 00:14:15.720
OK, so here I have a very simplified view of a few of our employee records, and we see this table

184
00:14:15.720 --> 00:14:16.050
here.

185
00:14:16.230 --> 00:14:23.940
So underneath the hood, the hash set is actually utilizing another structure that will learn more about

186
00:14:24.330 --> 00:14:27.450
in an upcoming lesson called a hash map.

187
00:14:27.720 --> 00:14:32.460
But basically, it's a list with two columns in this particular case.

188
00:14:32.760 --> 00:14:39.360
The first column has our hash codes, which are also thought of as a key into the hash map.

189
00:14:39.570 --> 00:14:42.840
Key is just the way that you can look up something.

190
00:14:42.990 --> 00:14:49.200
So imagine like when you go to a restaurant or some type of event, a formal event where they have a

191
00:14:49.200 --> 00:14:52.470
coat and hat check, you can check in your coat.

192
00:14:52.650 --> 00:14:55.640
They will give you a little ticket or something like that.

193
00:14:55.650 --> 00:14:57.300
You can think of that ticket as a key.

194
00:14:57.570 --> 00:15:02.430
It's a it's a smaller, simpler representation of the bigger thing.

195
00:15:02.640 --> 00:15:08.520
In this case, small representation for the bigger thing being your coat in code here.

196
00:15:08.730 --> 00:15:17.340
This is a smaller representation for the potentially larger object that we are storing in the hash set

197
00:15:17.340 --> 00:15:19.050
or, in this case, in the hash map.

198
00:15:19.890 --> 00:15:20.370
All right.

199
00:15:20.820 --> 00:15:32.100
So these hash codes can be applied to a simple formula or process that converts them into an index or

200
00:15:32.100 --> 00:15:32.940
a row number.

201
00:15:33.150 --> 00:15:36.690
And so we can see these little row numbers here on the side, right?

202
00:15:39.650 --> 00:15:47.750
And because it is ultimately the ROE number that is derived from the hash code that determines the order

203
00:15:47.780 --> 00:15:54.920
of the items or objects, those items or objects may not be in the same order in which we added them.

204
00:15:54.950 --> 00:15:55.370
OK.

205
00:15:55.430 --> 00:16:00.230
Does that make sense, even though really, I probably should have depicted this table with these employees

206
00:16:00.230 --> 00:16:01.310
in a different order?

207
00:16:01.940 --> 00:16:08.240
So sort of ignore the fact that I happen to be showing them in somewhat of a proper order here in real

208
00:16:08.240 --> 00:16:09.830
life, they probably wouldn't be.

209
00:16:10.700 --> 00:16:16.220
Now you should be wondering, why do we even bother with this hash code business at all?

210
00:16:16.280 --> 00:16:16.670
Right?

211
00:16:17.270 --> 00:16:22.190
A list could just be used with just one column, which is just the objects themselves.

212
00:16:22.790 --> 00:16:30.080
So the issue here is when we want to use this type of collection to do a couple of operations.

213
00:16:30.080 --> 00:16:34.940
One of those operations is to call the containers method.

214
00:16:35.600 --> 00:16:45.620
So let's say that we have an object in hand, so to speak, which is basically Barney rubble for OK.

215
00:16:46.280 --> 00:16:54.530
And we want to ask this collection if Barney Rubble four is contained within it.

216
00:16:55.920 --> 00:17:04.440
So if we were just using a list, then what would generally have to happen is some code would have to

217
00:17:04.440 --> 00:17:12.930
iterate over each row in that list, calling the equals method to determine if the object in hand Barney

218
00:17:12.930 --> 00:17:20.400
for Barney Rubble four is equal to the current object that we are iterating over, right?

219
00:17:20.760 --> 00:17:28.050
And so that code would in this case, that code might have to iterate over each of these items before

220
00:17:28.050 --> 00:17:29.340
it finds a match.

221
00:17:29.910 --> 00:17:38.270
Now, imagine if this collection had millions of objects in it that could take a while to find a match,

222
00:17:38.280 --> 00:17:38.670
right?

223
00:17:40.020 --> 00:17:42.810
The same is also true for the remove method.

224
00:17:42.820 --> 00:17:49.110
If we wanted to remove an item from the collection based on an item that we have in hand.

225
00:17:49.350 --> 00:17:51.270
You pretty much have to do the exact same thing.

226
00:17:51.270 --> 00:17:57.510
You have to iterate over each looking for a match and only if and when we find a match, we then know

227
00:17:57.510 --> 00:18:00.330
that we can remove that item from the collection.

228
00:18:00.720 --> 00:18:04.500
So the amount of time that can take is not constant.

229
00:18:04.590 --> 00:18:04.950
Right?

230
00:18:05.190 --> 00:18:12.900
If the item you're trying to find for, contains or remove is towards the end of the list, then that

231
00:18:12.900 --> 00:18:15.990
will take longer than if it's at the beginning of the list, right?

232
00:18:15.990 --> 00:18:20.460
And you have to sit there and iterate through most of the list or the whole entire list.

233
00:18:20.970 --> 00:18:27.780
However, if we use a hash set to do this same thing, here's what would happen.

234
00:18:28.470 --> 00:18:33.480
We first determine the hash code for the item that we have in hand.

235
00:18:34.060 --> 00:18:43.410
OK, and then the hash set will take that hash code and determine an index from that hash code.

236
00:18:43.440 --> 00:18:43.920
OK.

237
00:18:44.160 --> 00:18:52.020
So in our example of Barney for rubble for the hash code might yield an index of 10.

238
00:18:52.680 --> 00:18:58.050
And so now the code doesn't need to iterate through each and every item in the collection.

239
00:18:58.800 --> 00:19:07.020
It can just jump straight to the 10th row and then simply determine if the item in hand is equal to

240
00:19:07.020 --> 00:19:08.820
the item on that 10th row.

241
00:19:08.970 --> 00:19:14.550
If so, then you've got a match and now you can say it does contain or you can remove it or whatever

242
00:19:14.550 --> 00:19:16.260
it is that that needs to happen.

243
00:19:16.590 --> 00:19:24.930
The beauty of that approach is whether you find a match on the first element or the 100 millionth element

244
00:19:24.930 --> 00:19:25.860
or whatever.

245
00:19:26.220 --> 00:19:30.390
It should take the same amount of time to find that match.

246
00:19:31.260 --> 00:19:39.600
And so the access time is constant with a hash set, and that's a huge advantage, particularly if the

247
00:19:39.600 --> 00:19:41.160
collection is very large.

248
00:19:42.120 --> 00:19:42.440
All right.

249
00:19:42.450 --> 00:19:48.900
So in the next lesson, we will dig in more on where these hash codes are coming from.

250
00:19:49.200 --> 00:19:53.070
And we'll also play around more with some code, so I'll see you in the next one.
