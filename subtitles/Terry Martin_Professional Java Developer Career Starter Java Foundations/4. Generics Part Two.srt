1
00:00:00,180 --> 00:00:06,150
Now I'm going to challenge you to pause the video and see if you can think of a way to make this all

2
00:00:06,150 --> 00:00:06,880
happy, right?

3
00:00:06,910 --> 00:00:08,940
Like how can you make this work?

4
00:00:09,510 --> 00:00:10,830
So take a moment to do that.

5
00:00:11,970 --> 00:00:12,550
All right.

6
00:00:12,570 --> 00:00:14,400
So I'm going to do it now.

7
00:00:15,000 --> 00:00:19,500
So there's a little bit of review and we're going to just kind of cram a bunch of cool things together

8
00:00:19,500 --> 00:00:19,720
here.

9
00:00:19,740 --> 00:00:22,020
OK, so we've got records.

10
00:00:22,020 --> 00:00:27,180
So first thing we're going to want to do record is a collection, and we know that the collections classes

11
00:00:27,180 --> 00:00:32,190
all implement a stream method on them so we can go to the stream there.

12
00:00:32,430 --> 00:00:34,290
And from here, I don't know.

13
00:00:34,290 --> 00:00:37,340
Maybe we want to do a filter.

14
00:00:37,350 --> 00:00:41,580
Perhaps there's several ways to skin this cat, but let's just do a filter.

15
00:00:42,510 --> 00:00:45,070
And so the filter method takes a predicate.

16
00:00:45,090 --> 00:00:47,130
We know that a predicate is an interface.

17
00:00:47,130 --> 00:00:51,570
By the way, predicate is actually a generic interface, and we see it right there.

18
00:00:51,570 --> 00:00:53,880
Predicate of something.

19
00:00:53,880 --> 00:01:01,080
That's how I read this question mark, something that has a superclass of T. So we'll learn a little

20
00:01:01,080 --> 00:01:04,110
bit more about what this is really meaning here.

21
00:01:04,110 --> 00:01:09,600
But I just wanted to point out that these functional interfaces are all not only functional, they're

22
00:01:09,600 --> 00:01:10,950
also generic, OK?

23
00:01:11,190 --> 00:01:13,530
They work with virtually any data type.

24
00:01:13,710 --> 00:01:15,420
So anyway, it takes a predicate.

25
00:01:15,420 --> 00:01:22,350
A predicate is simply an interface that exposes a method that is simply an interface for us to write

26
00:01:22,350 --> 00:01:27,900
essentially a lambda or a method reference that takes an input and then returns a Boolean or true or

27
00:01:27,900 --> 00:01:33,750
false to determine whether or not objects that pass that predicate should be allowed to flow through

28
00:01:33,750 --> 00:01:37,120
the stream filter through the stream or be blocked.

29
00:01:37,150 --> 00:01:40,920
OK, so we're going to pass in a lambda expression.

30
00:01:42,670 --> 00:01:47,800
With an arrow there, P. I'll call it P for person, and then we'll just say something like where I

31
00:01:47,800 --> 00:01:49,450
don't know that I'd.

32
00:01:51,250 --> 00:01:54,490
Oh, and look, look at this now we've got a problem here.

33
00:01:54,790 --> 00:01:56,740
Now, do you know what the problem is?

34
00:01:57,010 --> 00:02:00,070
And you probably ran into this while you tried to do this?

35
00:02:00,820 --> 00:02:01,140
All right.

36
00:02:01,150 --> 00:02:02,650
So do you know what the problem is?

37
00:02:04,120 --> 00:02:06,820
Well, what is the type of P?

38
00:02:07,630 --> 00:02:11,940
I'm calling it P because I'm assuming I'm going to use it for a person, right?

39
00:02:12,250 --> 00:02:18,350
But in actuality, in the repository class, there's no mention of a person anywhere.

40
00:02:18,370 --> 00:02:18,730
Right?

41
00:02:19,420 --> 00:02:25,240
There's no place in here that we're mentioning a person within this class, not down here in the public

42
00:02:25,240 --> 00:02:30,280
static void main, which you can almost consider to not be part of the repository class at all.

43
00:02:30,520 --> 00:02:37,330
Yes, we are referring to a person down here, but up here in our definition of a repository which effectively

44
00:02:37,330 --> 00:02:38,260
ends right here.

45
00:02:38,460 --> 00:02:41,350
There's no mention of p right of a person, rather.

46
00:02:41,650 --> 00:02:50,650
So the problem is that we're trying to access a method or a property of a class and in code that doesn't

47
00:02:50,650 --> 00:02:53,080
know that class like it doesn't know that type.

48
00:02:53,200 --> 00:03:00,220
And I did this actually on purpose so that I could set us up for another little piece of learning that

49
00:03:00,220 --> 00:03:01,240
we're going to get into.

50
00:03:01,300 --> 00:03:03,250
So how can we address this?

51
00:03:03,700 --> 00:03:07,840
So this gets into a slightly more advanced scenario here.

52
00:03:08,980 --> 00:03:10,240
What we can do.

53
00:03:10,390 --> 00:03:17,890
We don't want to necessarily hard code our repository to just work with person because that would effectively

54
00:03:17,890 --> 00:03:21,210
put us right back where we started from right instead of string.

55
00:03:21,220 --> 00:03:23,350
Now we're hardcoded to person.

56
00:03:23,590 --> 00:03:28,510
We still might want to be able to use a lot of different data types, right?

57
00:03:29,110 --> 00:03:33,040
So what we can do, though, is we can somewhat constrain.

58
00:03:33,080 --> 00:03:33,310
Right.

59
00:03:33,310 --> 00:03:36,610
So right now, it's kind of wide open with this T here.

60
00:03:36,850 --> 00:03:44,780
So maybe what we could do is we could introduce an interface that implements a Get ID method.

61
00:03:44,830 --> 00:03:45,310
OK.

62
00:03:45,640 --> 00:03:55,210
And then we could tell our generic class here, accept any class that is implementing this particular

63
00:03:55,210 --> 00:03:55,960
interface.

64
00:03:55,990 --> 00:03:56,380
OK.

65
00:03:56,530 --> 00:03:58,060
So that's what we could do.

66
00:03:58,270 --> 00:04:03,670
So to do that, I'm going to come down here to where I've already defined one class, the record.

67
00:04:04,390 --> 00:04:09,160
And you know, you notice I'm using the term record class kind of interchangeably because I just want

68
00:04:09,160 --> 00:04:12,910
to make sure that you are fully aware that a record is effectively a class still.

69
00:04:13,480 --> 00:04:15,400
It's just a very constrained class.

70
00:04:15,700 --> 00:04:16,000
All right.

71
00:04:16,000 --> 00:04:26,950
So let's introduce an interface, and let's call this idea bowl, OK, because it's going to be something

72
00:04:26,950 --> 00:04:28,930
that is capable of having an idea.

73
00:04:29,830 --> 00:04:38,640
And let's define one method on it, and this will be a method called idea.

74
00:04:38,710 --> 00:04:44,620
Now, normally we'd want to call this something like get ID, but I want this to be fully compatible

75
00:04:44,620 --> 00:04:45,730
with our record here.

76
00:04:45,730 --> 00:04:50,440
And records don't create getters with the get word in front of them.

77
00:04:50,440 --> 00:04:54,040
They just create their getters with the same name as whatever the property is.

78
00:04:54,070 --> 00:04:55,960
So here we have a property called ID.

79
00:04:56,140 --> 00:05:00,460
So the getter for this is also going to just be called ID, and I want this all to match up.

80
00:05:00,730 --> 00:05:01,050
All right.

81
00:05:01,060 --> 00:05:05,110
So down here, my getter is simply going to be defined as ID.

82
00:05:05,680 --> 00:05:06,130
OK.

83
00:05:08,480 --> 00:05:11,000
Now that's going to need a return type.

84
00:05:11,300 --> 00:05:14,510
And this is going to be kind of interesting here.

85
00:05:14,960 --> 00:05:18,080
So here's another opportunity to use a generic.

86
00:05:18,110 --> 00:05:22,790
I don't really want a hard code type long on this.

87
00:05:22,790 --> 00:05:29,150
I could, but that also kind of pigeonholed me a little more than I would like to be pigeonholed, right?

88
00:05:29,390 --> 00:05:30,710
So I don't want to do that.

89
00:05:30,800 --> 00:05:33,830
Instead, I want to use a generic data type again.

90
00:05:34,130 --> 00:05:35,750
So again, I'm just going to use T.

91
00:05:35,750 --> 00:05:38,420
And by the way, I could I could call this anything, OK?

92
00:05:39,200 --> 00:05:40,220
I could use any letter here.

93
00:05:40,220 --> 00:05:41,600
And in fact, you know, why don't I?

94
00:05:41,720 --> 00:05:46,460
I'll just use a different letter just so you can see that I can use any any letter I want.

95
00:05:46,640 --> 00:05:53,180
Now that I've put this up here, now I'm getting a red line because the compiler does not know what

96
00:05:53,180 --> 00:05:54,410
this data type is.

97
00:05:54,590 --> 00:05:59,240
So I need to tell it, Oh, that's not going to be a real data type that I'm going to create a class

98
00:05:59,240 --> 00:05:59,540
for.

99
00:05:59,540 --> 00:06:00,920
That's just a generic right.

100
00:06:01,070 --> 00:06:08,120
And so for me to tell the ad in Java that this is a generic and not a future upcoming data type, some

101
00:06:08,120 --> 00:06:11,150
class that I was going to create in the future, which it is not.

102
00:06:11,420 --> 00:06:18,080
I need to come over here and now make this interface generic, which takes us to another kind of a point,

103
00:06:18,080 --> 00:06:20,740
which is that interfaces can also be generic.

104
00:06:20,750 --> 00:06:24,440
As I was saying earlier, with all the functional interfaces we've got right?

105
00:06:24,650 --> 00:06:28,010
And so again, I can just do that.

106
00:06:28,940 --> 00:06:34,730
OK, so now we've got a generic data type for our IDs as well.

107
00:06:35,360 --> 00:06:35,720
All right.

108
00:06:35,870 --> 00:06:43,760
And so now that we've got this idea bowl thing here, I can now come up here and constrain our class

109
00:06:43,910 --> 00:06:44,780
a little bit.

110
00:06:44,810 --> 00:06:45,280
OK?

111
00:06:47,030 --> 00:06:53,360
Just to the point that we're going to say Ti needs to be something that implements the ideal interface.

112
00:06:53,390 --> 00:06:53,810
OK?

113
00:06:53,840 --> 00:07:01,160
And so to do that, I can just say extends idea all.

114
00:07:03,190 --> 00:07:08,890
Now, notice that it's stuck this repository thing in front here because this is a nested class, right?

115
00:07:09,460 --> 00:07:12,460
So it's nested inside of the repository, so just put that there.

116
00:07:13,990 --> 00:07:14,380
All right.

117
00:07:14,560 --> 00:07:19,870
So now that T is something that extends repository date idea bill, and by the way, we're not quite

118
00:07:19,870 --> 00:07:20,200
done.

119
00:07:20,320 --> 00:07:22,180
But I'll come back to that in just a moment.

120
00:07:22,450 --> 00:07:29,860
OK, now that this is something that extends Idea Bill, I can now come down here and acknowledge that

121
00:07:29,860 --> 00:07:36,220
whatever items are coming out of this record that stream, this is going to be a stream of.

122
00:07:37,240 --> 00:07:37,630
Right?

123
00:07:37,900 --> 00:07:39,100
A stream of tea.

124
00:07:39,520 --> 00:07:44,830
And I now know that these key records that are in this stream are going to be objects that implement

125
00:07:45,130 --> 00:07:46,050
Idea Bill.

126
00:07:46,150 --> 00:07:50,770
And I know that ideal bill always has a method called ID on it.

127
00:07:51,190 --> 00:07:51,470
All right.

128
00:07:51,490 --> 00:07:57,870
So if I put my cursor here into a control space, we'll look at that now.

129
00:07:57,880 --> 00:07:59,870
It knows about the ID method.

130
00:07:59,930 --> 00:08:02,140
OK, which is all I ever wanted.

131
00:08:02,530 --> 00:08:03,820
And so will delete that.

132
00:08:03,940 --> 00:08:06,250
Now notice I'm still getting a red squiggly line here.

133
00:08:06,250 --> 00:08:09,160
That's just be that's partially because I'm not done right.

134
00:08:09,970 --> 00:08:16,810
This needs to be a lambda expression that takes a p as an input, and then it's going to have to return

135
00:08:16,840 --> 00:08:24,430
a Boolean to evaluate whether or not this particular object should be allowed to flow through the filter

136
00:08:24,430 --> 00:08:24,640
here.

137
00:08:24,650 --> 00:08:25,030
OK?

138
00:08:25,210 --> 00:08:29,710
So sorry, we took a long detour just to come back into this lambda expression here.

139
00:08:29,710 --> 00:08:30,130
OK?

140
00:08:30,910 --> 00:08:31,210
All right.

141
00:08:31,210 --> 00:08:37,420
So we need to determine whether or not P will be allowed to flow through the filter, and that should

142
00:08:37,420 --> 00:08:42,790
be based on whether or not these ID matches this ID here that we're looking for.

143
00:08:42,970 --> 00:08:46,480
And so that should be easy enough to do, Peter added.

144
00:08:47,350 --> 00:08:48,640
That equals.

145
00:08:50,060 --> 00:08:50,420
I'd.

146
00:08:52,600 --> 00:08:56,530
OK, now we're getting another red squiggly line, and that's because we're still not done.

147
00:08:57,340 --> 00:09:06,580
So now what's coming out of all of this currently records that stream that filter will be a stream of

148
00:09:06,700 --> 00:09:07,600
T, right?

149
00:09:07,720 --> 00:09:08,950
If I hover over this?

150
00:09:09,140 --> 00:09:11,830
Yeah, we're getting a stream of tea.

151
00:09:11,920 --> 00:09:14,990
And what we're really needing to return, though, is just a T.

152
00:09:15,010 --> 00:09:15,340
Right.

153
00:09:15,490 --> 00:09:22,120
So now we need to take that stream of T and just get one out of it, right?

154
00:09:22,360 --> 00:09:28,810
And so one way that we can do that is with the find first method of the Streams API, so we can do that.

155
00:09:29,080 --> 00:09:34,210
However, the fine first method doesn't just return it to it returns an optional P.

156
00:09:34,240 --> 00:09:34,600
Right?

157
00:09:35,620 --> 00:09:37,150
And we learned a little bit about option.

158
00:09:37,240 --> 00:09:39,490
We're going to learn more about Options Real soon here.

159
00:09:40,360 --> 00:09:48,730
So what we can do here is actually, let's have a little fun and let's actually use this method on the

160
00:09:48,730 --> 00:09:54,040
optional class, which is or else through now that we've learned about exceptions and throwing and all

161
00:09:54,040 --> 00:09:57,730
of that, can you understand what this method will do?

162
00:09:58,270 --> 00:09:58,810
Look at that.

163
00:09:59,020 --> 00:10:01,960
All of our squiggly lines went away, and it all seems to be happy.

164
00:10:01,970 --> 00:10:03,670
So what do you think that method is doing?

165
00:10:03,700 --> 00:10:05,050
Take a second and think about it.

166
00:10:05,950 --> 00:10:06,330
All right.

167
00:10:06,340 --> 00:10:14,380
So what this method is doing or else through is it's saying if we got back a legitimate object of type

168
00:10:14,380 --> 00:10:17,800
T, go ahead and return that right.

169
00:10:17,810 --> 00:10:19,630
And so that's what's going to come out of here.

170
00:10:20,260 --> 00:10:27,130
However, if for some reason, though, you were not able to find an object of type out of all of this

171
00:10:27,130 --> 00:10:32,110
stream, then just throw an exception and the exception.

172
00:10:32,110 --> 00:10:39,580
If we hover over this, let's see here it's going to throw a no such element exception which feels fairly

173
00:10:39,580 --> 00:10:41,060
appropriate for what we are doing.

174
00:10:41,080 --> 00:10:42,730
OK, so that's what's going to happen there.

175
00:10:42,730 --> 00:10:47,620
It's going to blow up, and I'm OK with that in this particular case.

176
00:10:47,740 --> 00:10:56,260
And actually, if I recall correctly, I believe that defined by ID, methods on real repositories typically

177
00:10:56,470 --> 00:11:00,410
can blow up if you refer to an ID, that just doesn't exist.

178
00:11:00,430 --> 00:11:00,850
OK.

179
00:11:01,720 --> 00:11:02,860
So I think that's legit.

180
00:11:04,180 --> 00:11:04,990
All right.

181
00:11:06,100 --> 00:11:08,710
Now I said I was going to come back to some.

182
00:11:08,710 --> 00:11:10,930
Oh, yes, I said it was going to come back up here.

183
00:11:11,980 --> 00:11:16,420
So we're saying T extends a repository that idea bowl.

184
00:11:16,660 --> 00:11:26,140
Now our ideal bowl interface is itself generic, and that means that we could pass in a generic type

185
00:11:26,590 --> 00:11:28,030
here as well.

186
00:11:28,210 --> 00:11:31,210
But the question would be, Well, what should we pass in?

187
00:11:31,780 --> 00:11:38,740
The answer is that up here, we don't have to actually decide a specific data type.

188
00:11:38,860 --> 00:11:40,300
We can leave it generic.

189
00:11:40,720 --> 00:11:46,660
And this brings us to another little lesson that I want to point out, which is when we are creating

190
00:11:46,660 --> 00:11:50,620
generic classes are generic classes or interfaces, whatever.

191
00:11:50,620 --> 00:11:54,910
Our generic types can have more than one parameter.

192
00:11:55,330 --> 00:12:02,980
So right now, our our repository class has just one parameter, one generic parameter, which is T,

193
00:12:03,130 --> 00:12:06,820
but we can actually have multiple generic parameters.

194
00:12:06,820 --> 00:12:13,900
And in fact, some of the functional interfaces do in fact, work with two or even three parameters.

195
00:12:13,900 --> 00:12:18,190
I don't recall if there are any that take more than three, but there are definitely quite a number

196
00:12:18,190 --> 00:12:19,170
of that take two.

197
00:12:19,630 --> 00:12:26,560
Like any of the functional interfaces that are called by or binary or something like that, frequently

198
00:12:26,560 --> 00:12:29,710
they're going to take at least two parameters, right?

199
00:12:29,980 --> 00:12:39,100
So we can add another parameter to the repository class, and that parameter will be used to specify

200
00:12:39,280 --> 00:12:42,460
what the data type is for our IDs.

201
00:12:42,490 --> 00:12:42,970
OK.

202
00:12:43,270 --> 00:12:49,270
So the way we can do that is I'm going to put a comma here and then I'm going to introduce another parameter

203
00:12:49,270 --> 00:12:52,820
and I will call this V.

204
00:12:53,830 --> 00:12:56,140
Now again, I can call it whatever I want.

205
00:12:56,440 --> 00:12:56,890
OK.

206
00:12:57,040 --> 00:13:01,600
In fact, I was sort of debating the call it you because I did call this thing down here.

207
00:13:01,600 --> 00:13:06,280
You and this thing here is actually going to end up being tied to this.

208
00:13:06,490 --> 00:13:08,050
But I didn't want to be.

209
00:13:08,050 --> 00:13:11,890
I don't know if I don't know if it's going to be confusing for you to see it that way or not.

210
00:13:12,070 --> 00:13:15,640
I didn't, and I also didn't want you to think that it had to be called the same thing because it does

211
00:13:15,640 --> 00:13:15,910
not.

212
00:13:15,940 --> 00:13:18,610
So let's let's stick with the V for right now, and you'll see.

213
00:13:18,910 --> 00:13:19,210
All right.

214
00:13:19,210 --> 00:13:21,790
So we've got this v here, right?

215
00:13:23,040 --> 00:13:28,470
And so now I can come over here and I can use this.

216
00:13:28,890 --> 00:13:33,930
I know this might start to get a little confusing looking, but I will try my best to just explain what's

217
00:13:33,930 --> 00:13:34,500
going on.

218
00:13:34,770 --> 00:13:42,610
So now I can say that this idea bowl interface is going to be of type the.

219
00:13:43,050 --> 00:13:43,800
Just like that.

220
00:13:43,920 --> 00:13:49,860
And now this whatever data type we're working with here is actually what we're going to be working with

221
00:13:49,860 --> 00:13:50,340
down here.

222
00:13:50,430 --> 00:13:52,440
Now let me show you what that's really going to look like.

223
00:13:52,920 --> 00:13:55,290
Notice I now have a couple of errors, by the way.

224
00:13:55,830 --> 00:14:03,180
Now the errors that we're getting are telling us, Oh, you're trying to create a repository of person?

225
00:14:03,660 --> 00:14:12,360
But the problem is that person is not a class and string are not classes that extend from ideas.

226
00:14:12,430 --> 00:14:13,260
All right.

227
00:14:13,260 --> 00:14:21,570
So now we're further constrained what types are allowed for association with the repository?

228
00:14:21,810 --> 00:14:23,460
And so we're getting this now.

229
00:14:23,610 --> 00:14:25,590
And so now we need to make this happy.

230
00:14:25,710 --> 00:14:29,550
Now I can tell you now we're never going to make it happy for string, and that's by design.

231
00:14:29,940 --> 00:14:34,500
We're done with string, so I'm going to go ahead and just comment out all of that.

232
00:14:34,650 --> 00:14:35,020
OK.

233
00:14:35,040 --> 00:14:40,050
That's never going to work because we didn't write the string class, nor would I care for it to work

234
00:14:40,050 --> 00:14:40,560
anyway.

235
00:14:40,740 --> 00:14:42,960
But the person class we can do something about.

236
00:14:44,070 --> 00:14:51,360
So what we need to do now with the person class is simply make it implement idea bill.

237
00:14:51,630 --> 00:14:52,240
That's it.

238
00:14:52,260 --> 00:14:53,370
That's all it has to do.

239
00:14:53,760 --> 00:14:59,970
And so we can actually just come over here and say implements ideas.

240
00:15:01,590 --> 00:15:09,360
Now, since this is a generic type, we can actually go a little further and state what the generic

241
00:15:09,360 --> 00:15:10,170
type is.

242
00:15:10,350 --> 00:15:13,140
Now here will be a little less fancy.

243
00:15:13,500 --> 00:15:19,100
We've already decided that for the person class, it's IDs are of type long.

244
00:15:19,170 --> 00:15:19,590
Right?

245
00:15:19,800 --> 00:15:28,770
And so it is appropriate and correct to actually go ahead and state the actual type that we want tied

246
00:15:28,800 --> 00:15:33,120
to this interface here as being type long that way.

247
00:15:33,360 --> 00:15:39,810
This interface, when used in the context of the person class, will have an ID method that is actually

248
00:15:39,810 --> 00:15:42,090
showing up as a returning type long.

249
00:15:42,120 --> 00:15:42,600
OK.

250
00:15:43,670 --> 00:15:44,090
All right.

251
00:15:44,240 --> 00:15:48,350
So now that we've done that, let's come back down here and we still got squiggly lines, so let's hover

252
00:15:48,350 --> 00:15:51,560
over that and see wrong number of type arguments.

253
00:15:51,800 --> 00:15:55,040
We're passing in one and it's but two are required.

254
00:15:55,190 --> 00:16:03,590
And that makes sense because we now are saying that to create a repository, you need to pass in T and

255
00:16:03,590 --> 00:16:05,840
you also have to pass in the right.

256
00:16:06,170 --> 00:16:12,290
So down here, we can now say that the tea is person, right?

257
00:16:12,290 --> 00:16:15,530
That's the data type that we are generally referring to.

258
00:16:15,530 --> 00:16:21,590
But then we can also specify what type the IDs for person should be.

259
00:16:21,710 --> 00:16:23,120
And that is long.

260
00:16:24,270 --> 00:16:25,950
And now that ever goes away.

261
00:16:26,520 --> 00:16:27,330
All right.

262
00:16:27,600 --> 00:16:34,980
And now we also will get rid of this first system now that print because I got rid of the that first

263
00:16:34,980 --> 00:16:36,560
repo, OK?

264
00:16:36,900 --> 00:16:41,910
And now I think we are ready to actually run this and maybe it won't blow up.

265
00:16:42,120 --> 00:16:47,580
So we're passing in 30 and we've got our lamda up here that's looking for the IEDs and comparing them.

266
00:16:47,580 --> 00:16:50,000
So let's try it out and see we should get back.

267
00:16:50,010 --> 00:16:51,050
Jerry Johnson.

268
00:16:52,080 --> 00:16:53,610
OK, so let's run it and see.

269
00:16:54,720 --> 00:16:55,020
All right.

270
00:16:55,030 --> 00:16:55,860
So good news.

271
00:16:55,860 --> 00:16:58,350
It did not blow up and good news again.

272
00:16:58,350 --> 00:17:02,190
We got back Gary Johnson for this first person here, right?

273
00:17:02,610 --> 00:17:06,450
So that is now working as expected.

274
00:17:06,990 --> 00:17:14,940
OK, so now that we've constrained what T can be when working with a repository, this generic T is

275
00:17:14,940 --> 00:17:16,930
said to be bounded now.

276
00:17:16,950 --> 00:17:17,290
OK.

277
00:17:17,310 --> 00:17:25,500
So in other words, it's it's constrained, it's bounded in that it has to be something that implements

278
00:17:25,500 --> 00:17:29,280
essentially, although we're using the word extent here because that's what generic supports.

279
00:17:29,730 --> 00:17:32,820
But it has to be something in this case that implements the idea.

280
00:17:32,970 --> 00:17:39,370
By the way, just as we're using an interface here, I could also have bound this to a class.

281
00:17:39,390 --> 00:17:46,380
OK, so if I had a superclass that person extended from, I could have said something like T extends

282
00:17:46,380 --> 00:17:47,910
whatever the name of that superclass is.

283
00:17:47,910 --> 00:17:51,180
So whether it's a class or an interface doesn't really matter.

284
00:17:51,180 --> 00:17:53,760
Here you use, the word extends either way.

285
00:17:54,060 --> 00:17:58,260
And with that said, I want to show you one other thing related relating to this.

286
00:17:58,500 --> 00:18:01,340
Let's say that I also had another interface.

287
00:18:01,350 --> 00:18:04,860
This one would be just kind of like for show interface.

288
00:18:04,860 --> 00:18:06,690
Let's call this savable.

289
00:18:09,660 --> 00:18:13,770
All right, and I'm not even going to define any methods on it, it's just a an interface.

290
00:18:13,920 --> 00:18:20,670
And occasionally in Java, you will see interfaces that don't actually implement any methods at all.

291
00:18:20,970 --> 00:18:28,530
Those are typically called flag interfaces, and their purpose is simply to flag that this classes of

292
00:18:28,530 --> 00:18:29,550
a certain type.

293
00:18:29,740 --> 00:18:33,750
OK, so here I have a flag interface called savable.

294
00:18:33,990 --> 00:18:43,680
So if I wanted to even further, further bind or constrain my generic T here, I could say only allow

295
00:18:43,920 --> 00:18:52,670
me to create repositories that work with instances of objects that are both ideal and survivable.

296
00:18:52,830 --> 00:18:58,800
And the way I can do that is by coming up extends repository that idea able.

297
00:19:00,180 --> 00:19:03,840
And then after all of the generics there and.

298
00:19:05,760 --> 00:19:06,450
Savable.

299
00:19:08,450 --> 00:19:11,300
So I can do that now.

300
00:19:11,640 --> 00:19:15,230
Having done that notice, this is an error again.

301
00:19:15,290 --> 00:19:21,400
And the reason is because my person class currently does not implement both of those interfaces.

302
00:19:21,410 --> 00:19:23,690
It only implements the ideal interface.

303
00:19:23,900 --> 00:19:32,840
So now I need to come over here and add in another interface that this guy is said to be implementing.

304
00:19:32,930 --> 00:19:35,150
And now the red marks go away.

305
00:19:35,330 --> 00:19:41,360
So the only point of me showing you this was just to say that you can really, really, really constrain

306
00:19:41,600 --> 00:19:44,840
your generic types if you want to or need to.

307
00:19:44,870 --> 00:19:52,190
OK, now let me also step back and say I could have avoided using generics altogether and simply come

308
00:19:52,190 --> 00:19:54,620
down here to the internal collection for this.

309
00:19:54,620 --> 00:19:59,630
And instead of saying T, I could have said something like a list of.

310
00:20:00,930 --> 00:20:01,340
Idea.

311
00:20:01,560 --> 00:20:02,310
All right.

312
00:20:02,340 --> 00:20:03,300
I could have done that.

313
00:20:03,540 --> 00:20:09,750
And that would have given given me very similar functionality here, except I would have been missing

314
00:20:09,750 --> 00:20:11,130
out on a few things.

315
00:20:11,580 --> 00:20:18,570
All of my types would have had to be of type ideal bill, which means they would have been less specific

316
00:20:18,570 --> 00:20:20,640
than what they actually are, right?

317
00:20:21,240 --> 00:20:28,170
Everything would be ideal and then I would have to still cast if I wanted to get back out a person like

318
00:20:28,170 --> 00:20:28,500
here.

319
00:20:28,830 --> 00:20:29,200
Right?

320
00:20:29,220 --> 00:20:31,020
So here I'm doing a fine by ID.

321
00:20:31,410 --> 00:20:37,600
I'm getting an actual person because this method, if I go, look at it right?

322
00:20:37,620 --> 00:20:38,880
Look at this fine by ID.

323
00:20:39,340 --> 00:20:43,530
The I.D. is telling me that it returns an actual person, right?

324
00:20:43,740 --> 00:20:45,540
That's because it's generic.

325
00:20:46,020 --> 00:20:54,320
If I hadn't had not used a generic and I had simply just defined the list here to be of type ideal,

326
00:20:54,630 --> 00:21:01,070
then this method and all other methods like it would have just been returning something of type ideal.

327
00:21:01,170 --> 00:21:07,320
And then if I wanted to work with this variable here, the person, I would have had to cast it to person

328
00:21:07,440 --> 00:21:12,570
so that I could then call whatever special special methods are on that person class.

329
00:21:12,600 --> 00:21:17,160
So again, I using generics, I'm not needing to cast anything OK?

330
00:21:17,310 --> 00:21:22,830
And it's actually keeping my utilization of the repository class relatively simple.

331
00:21:22,830 --> 00:21:27,090
Even though the implementation may look a little complicated to some of you.

332
00:21:27,330 --> 00:21:33,810
Now let me also state that I don't really expect that the majority of you as junior developers, I mean,

333
00:21:33,810 --> 00:21:38,400
you're taking this course so that you can learn Java from from nowhere, right?

334
00:21:39,180 --> 00:21:45,600
I don't really expect that any of you who would take a job as a Java developer after taking this course

335
00:21:45,840 --> 00:21:49,320
are likely to be getting deep into any of this.

336
00:21:49,500 --> 00:21:55,830
And that's why this whole entire module is just doing one offs where I'm just kind of blowing through

337
00:21:55,860 --> 00:22:02,130
a lot of these, a lot of these techniques that most of you are not super likely to go real deep on.

338
00:22:02,340 --> 00:22:07,680
So rather than creating an entire module just on generics, which some courses may do and I'm not,

339
00:22:07,980 --> 00:22:10,050
I'm not saying that's a bad thing to do.

340
00:22:10,170 --> 00:22:14,640
But the whole point of this particular course is for you to be able to learn.

341
00:22:14,730 --> 00:22:20,220
What I know is most commonly going to be used by most Java developers in a company.

342
00:22:20,400 --> 00:22:24,900
And most Java developers are not having to do a whole lot of this.

343
00:22:25,110 --> 00:22:31,410
When you're creating classes that are as generic as this, using all these fancy techniques and everything,

344
00:22:31,590 --> 00:22:34,350
you're typically creating what are called APIs, right?

345
00:22:34,470 --> 00:22:38,210
Those are the programming tools that programmers use, right?

346
00:22:38,220 --> 00:22:41,130
So you're making the tools that a programmer would use.

347
00:22:41,550 --> 00:22:45,900
So most of you are not likely to be doing that real soon.

348
00:22:46,140 --> 00:22:46,500
OK?

349
00:22:46,530 --> 00:22:52,440
But again, in the interest of somewhat completeness, want to just show you how some of this stuff

350
00:22:52,440 --> 00:22:53,160
is working?

351
00:22:53,280 --> 00:22:53,610
All right.

352
00:22:53,610 --> 00:22:56,940
And so I've got one more technique that I want to show you now.

353
00:22:57,330 --> 00:23:03,090
It's still with generics, but not super related to any of this stuff here.

354
00:23:03,720 --> 00:23:12,360
Not only can we use generics on classes and interfaces, as we're doing here, we can also use them

355
00:23:12,360 --> 00:23:13,530
on methods.

356
00:23:13,530 --> 00:23:18,900
And I don't mean like these instants methods that we've got here that are just utilizing the definition

357
00:23:18,900 --> 00:23:22,020
of T as a as it exists on the class itself.

358
00:23:22,320 --> 00:23:25,020
We can use generics on static methods.

359
00:23:25,500 --> 00:23:30,750
So we're going to create a static method that honestly isn't going to really have anything to do with

360
00:23:30,750 --> 00:23:31,530
this class.

361
00:23:31,740 --> 00:23:34,920
I just don't feel like making another class and we don't need one here.

362
00:23:35,130 --> 00:23:41,340
We're going to make a static method that is going to simulate the ability to encode data.

363
00:23:41,430 --> 00:23:41,880
OK.

364
00:23:41,970 --> 00:23:44,580
So you're going to pass in some data of a type.

365
00:23:44,760 --> 00:23:49,390
And then this method will return an encrypted representation of that data.

366
00:23:49,410 --> 00:23:53,550
Now, we're not really going to make any real encryption stuff here.

367
00:23:54,060 --> 00:23:56,040
This will be like, you know, fake.

368
00:23:56,400 --> 00:24:02,280
But this will allow me to show you how you can make generic static methods, which actually can be quite

369
00:24:02,280 --> 00:24:06,300
useful at times, and this might be something that you'll maybe really use.

370
00:24:07,680 --> 00:24:07,950
All right.

371
00:24:07,950 --> 00:24:15,060
So we're going to have a method and let's just call it, I don't know, encrypt and it's going to take

372
00:24:15,060 --> 00:24:15,780
input.

373
00:24:16,170 --> 00:24:21,210
And again, I don't want to have to specify specifically what the data type will be.

374
00:24:21,630 --> 00:24:24,500
So I'm just going to say it's going to take something of time.

375
00:24:24,810 --> 00:24:31,440
Now this is going to be different from the tee up here, by the way, I could use a different letter,

376
00:24:31,440 --> 00:24:32,520
but I'm not going to.

377
00:24:32,610 --> 00:24:36,960
Instead, I'm going to say this, though, when working with static methods, which I haven't actually

378
00:24:36,960 --> 00:24:43,200
declared the static yet, I guess I will now working with static methods that use generic types there,

379
00:24:43,200 --> 00:24:49,660
generics have nothing to do with the generic types that may exist on their enclosing class.

380
00:24:49,680 --> 00:24:55,410
OK, so this tie up here is completely different and unrelated to this tie down here.

381
00:24:55,410 --> 00:24:56,470
Just know that rule.

382
00:24:56,490 --> 00:24:56,940
OK.

383
00:24:57,420 --> 00:24:59,340
All right, so T and I don't know.

384
00:24:59,350 --> 00:25:00,060
Let's just call it.

385
00:25:00,300 --> 00:25:02,040
Message, no, let's call it data.

386
00:25:03,870 --> 00:25:10,890
And then it's going to return something, and let's even make the return type generic as well.

387
00:25:11,040 --> 00:25:13,440
So let's call that the OK.

388
00:25:14,960 --> 00:25:21,590
And then it's going to have a body and we're going to do some stuff for right now, I'm just going to

389
00:25:21,590 --> 00:25:22,400
say no.

390
00:25:23,390 --> 00:25:23,740
All right.

391
00:25:23,750 --> 00:25:25,580
So we got a problem already.

392
00:25:25,850 --> 00:25:29,900
As you see here, we've got red squiggly thunder, the T and the V.

393
00:25:30,050 --> 00:25:30,920
Why is that?

394
00:25:31,640 --> 00:25:39,050
Well, for a static method like this that is meant to be generic, the ADC doesn't know what these data

395
00:25:39,050 --> 00:25:40,100
types are, right?

396
00:25:40,280 --> 00:25:46,310
And so we need to tell the IED these aren't going to be just data types of classes that we're going

397
00:25:46,310 --> 00:25:49,190
to go and create in another, you know, somewhere, right?

398
00:25:49,220 --> 00:25:51,500
Like we can create a class called T, I suppose.

399
00:25:52,190 --> 00:25:56,930
We don't want that, though we need to tell Java that this is a generic method.

400
00:25:57,170 --> 00:26:03,680
And the way we can do that is by putting our cursor in front of the first generic type there, and we're

401
00:26:03,680 --> 00:26:07,610
going to use the, you know, greater than and less than symbols again.

402
00:26:07,610 --> 00:26:11,000
And now we can say T comma v.

403
00:26:11,480 --> 00:26:13,040
And now those went away.

404
00:26:13,220 --> 00:26:19,820
So that lets us tell Java that this is a generic method.

405
00:26:19,850 --> 00:26:20,390
OK.

406
00:26:20,750 --> 00:26:27,980
By putting this here and this is a generic method with two parameters now, I could have made it a generic

407
00:26:27,980 --> 00:26:30,170
method with one parameter if I'd wanted to.

408
00:26:30,650 --> 00:26:32,870
But this one is with two generic parameters.

409
00:26:33,170 --> 00:26:40,160
And while we're at it, actually, let's also go ahead and let it let this method take to actual parameters,

410
00:26:40,160 --> 00:26:41,510
not generic parameters, right?

411
00:26:41,510 --> 00:26:49,460
So it's going to take the data and then we're also going to be able to pass in a method that's actually

412
00:26:49,460 --> 00:26:51,320
going to do the encrypting, OK?

413
00:26:51,560 --> 00:26:53,870
And you'll see why we're doing that in just a moment here.

414
00:26:54,020 --> 00:27:02,060
And so here's an opportunity that I didn't show explicitly in the lambdas module, but I will show it

415
00:27:02,060 --> 00:27:02,360
now.

416
00:27:02,360 --> 00:27:10,400
So here we are, creating a method that will utilize a lambda expression or a method reference.

417
00:27:10,430 --> 00:27:10,730
OK.

418
00:27:10,880 --> 00:27:17,660
So we want this encrypt method to be able to take some, some data of type T, and it's going to take

419
00:27:17,660 --> 00:27:23,000
that data and encrypted using an algorithm that we also can pass in.

420
00:27:23,030 --> 00:27:23,420
OK.

421
00:27:23,720 --> 00:27:27,020
And so the algorithm itself will simply be a function.

422
00:27:27,200 --> 00:27:32,640
It'll be a function that takes an input, which will be our data, and then it will spit out an output.

423
00:27:32,660 --> 00:27:33,110
OK.

424
00:27:33,260 --> 00:27:40,550
And so we can actually utilize the pre-existing functional interfaces that Java comes with to do exactly

425
00:27:40,550 --> 00:27:40,850
this.

426
00:27:40,970 --> 00:27:44,060
And in fact, if I just start typing function, there we go.

427
00:27:44,270 --> 00:27:46,700
That's the guy that I actually want to use.

428
00:27:46,880 --> 00:27:50,060
I want a function that takes an input and returns an output.

429
00:27:50,150 --> 00:27:51,620
The input will be of type T.

430
00:27:51,620 --> 00:27:54,440
The output in here is referred to as R.

431
00:27:54,470 --> 00:27:54,860
OK.

432
00:27:55,070 --> 00:27:55,580
So.

433
00:27:56,730 --> 00:28:07,610
A function, and I will say that it's going to use our T and the V there, and then I will call this,

434
00:28:07,620 --> 00:28:09,480
I don't know if you can see.

435
00:28:09,870 --> 00:28:10,380
All right.

436
00:28:10,620 --> 00:28:16,380
And now down here I can say funk dot apply.

437
00:28:16,530 --> 00:28:22,630
And the apply is how I will actually execute whatever lambda I pass in here.

438
00:28:22,650 --> 00:28:23,100
OK.

439
00:28:24,570 --> 00:28:27,990
So now you're getting to see this from the other side, right?

440
00:28:28,320 --> 00:28:33,090
So if it's not entirely clear, hopefully it will become clear in just a moment here.

441
00:28:33,480 --> 00:28:33,750
All right.

442
00:28:33,750 --> 00:28:35,280
So we're going to pass in the data.

443
00:28:36,490 --> 00:28:37,030
There we go.

444
00:28:37,600 --> 00:28:42,620
So we have now created a generic static method that is also functional.

445
00:28:42,670 --> 00:28:48,100
And by the way, this is what all of those functional methods that we were using.

446
00:28:48,220 --> 00:28:49,390
This is what they look like.

447
00:28:49,390 --> 00:28:51,730
They they do things like this, OK?

448
00:28:51,850 --> 00:28:52,960
This is how they're written.

449
00:28:53,140 --> 00:28:57,340
They are coded using these functional interfaces, and they're all generic.

450
00:28:57,520 --> 00:29:00,740
And so now we're kind of creating some of our own here.

451
00:29:00,760 --> 00:29:01,180
OK.

452
00:29:01,450 --> 00:29:01,810
All right.

453
00:29:02,020 --> 00:29:05,800
So now we can come down here somewhere, I guess I'll do it down here.

454
00:29:07,490 --> 00:29:09,950
And let's just do a system that out.

455
00:29:10,160 --> 00:29:17,360
And so now we can refer to this encrypted method like so and we can pass it in some data.

456
00:29:17,540 --> 00:29:20,300
So let's just pass in the word hello for now.

457
00:29:21,020 --> 00:29:23,510
And then it needs a function.

458
00:29:23,690 --> 00:29:26,280
And now we can just pass in a lambda expression.

459
00:29:26,300 --> 00:29:26,750
OK.

460
00:29:27,050 --> 00:29:28,990
That's going to operate on that word.

461
00:29:29,000 --> 00:29:30,290
Hello, in this case.

462
00:29:30,530 --> 00:29:33,170
So our message, I'll call it in.

463
00:29:33,830 --> 00:29:35,510
And then an arrow indicator.

464
00:29:35,810 --> 00:29:38,150
And let's encrypted now.

465
00:29:38,150 --> 00:29:39,990
We're not really going to encrypt this wolf.

466
00:29:40,010 --> 00:29:40,640
We'll fake it.

467
00:29:40,970 --> 00:29:43,580
We'll start off by doing a very easy encryption.

468
00:29:43,580 --> 00:29:49,610
We'll just uppercase the the word okay, so we can do that by saying in that to upper.

469
00:29:49,730 --> 00:29:56,630
Now notice I'm typing to upper here, but I'm not getting any auto completion.

470
00:29:57,020 --> 00:30:05,180
The reason for that is because at the moment, the I.D. doesn't actually know what this data type is.

471
00:30:05,220 --> 00:30:05,630
OK?

472
00:30:05,720 --> 00:30:11,090
It's just not quite smart enough to be able to infer that from the fact that I'm passing in a string

473
00:30:11,090 --> 00:30:17,840
here and then coming up here and looking at all of this and determining, Oh, OK, so this thing here

474
00:30:17,840 --> 00:30:22,100
is of type T, and he's going to want to return something of type B.

475
00:30:22,190 --> 00:30:25,820
And it also has no way right now of even knowing what that type V should be.

476
00:30:26,900 --> 00:30:29,480
Especially since we're not able to finish this bit here.

477
00:30:29,660 --> 00:30:31,190
So how do we get around this?

478
00:30:32,740 --> 00:30:39,640
Well, one of the easiest things to do in this case would be to simply tell it what those data types

479
00:30:39,640 --> 00:30:40,000
are.

480
00:30:40,150 --> 00:30:43,270
And we can do that right here on this encrypt call here.

481
00:30:43,990 --> 00:30:51,040
So what I can do is first, I will use the fully qualified class name of this encrypt method.

482
00:30:52,330 --> 00:30:54,550
Repository Dot Encrypt.

483
00:30:54,940 --> 00:30:55,240
All right.

484
00:30:55,270 --> 00:30:56,110
That's step one.

485
00:30:56,590 --> 00:31:03,640
Step two is I will put my cursor right after that period there, and then I can use the less than greater

486
00:31:03,640 --> 00:31:10,240
than symbol here, and I can actually specify the generic data types that this encrypt method should

487
00:31:10,240 --> 00:31:11,140
be working with.

488
00:31:11,410 --> 00:31:18,520
So in this case, string and string, because my input will be of type string and the output will also

489
00:31:18,520 --> 00:31:19,210
be of type string.

490
00:31:19,210 --> 00:31:23,110
So notice now some of the error marks went away.

491
00:31:23,320 --> 00:31:28,660
And now if I put my cursor back here on this M period and do a control space.

492
00:31:28,810 --> 00:31:29,950
Now look at that.

493
00:31:30,100 --> 00:31:38,080
I am now seeing the methods of the string class because now the I.D. slash java knows what this type

494
00:31:38,080 --> 00:31:41,920
really should be because I'm basically telling it right there.

495
00:31:41,950 --> 00:31:42,340
OK.

496
00:31:42,490 --> 00:31:45,190
And so now I can do a two uppercase whoops.

497
00:31:45,730 --> 00:31:46,300
There we go.

498
00:31:48,090 --> 00:31:48,810
Here we go.

499
00:31:49,940 --> 00:31:51,800
And now I can run this.

500
00:31:53,680 --> 00:31:55,870
And I get all uppercase, hello.

501
00:31:57,960 --> 00:32:00,870
And let's do one more of that.

502
00:32:01,350 --> 00:32:10,440
So we'll do another repository, Dot now, this time I will pass in a string and I want to get a long

503
00:32:10,920 --> 00:32:11,460
out.

504
00:32:14,860 --> 00:32:15,700
Encrypt.

505
00:32:19,590 --> 00:32:20,310
World.

506
00:32:22,950 --> 00:32:24,570
And here's my message.

507
00:32:24,900 --> 00:32:30,550
Use the arrow indicator, but this time I'm going to call Dot.

508
00:32:31,490 --> 00:32:32,270
Hash code.

509
00:32:33,690 --> 00:32:37,260
Oh, I'm sorry, and hash code method actually returns an integer.

510
00:32:38,910 --> 00:32:40,650
There we go and see see that.

511
00:32:40,830 --> 00:32:47,460
So when I had it as a long, that was an error, but I changed it to an integer and now it all matches

512
00:32:47,460 --> 00:32:48,150
up, right?

513
00:32:48,720 --> 00:32:52,380
So there's the there's the generics at work for you.

514
00:32:52,590 --> 00:32:53,130
All right.

515
00:32:53,520 --> 00:32:54,960
And so let's run that.

516
00:32:56,590 --> 00:32:57,230
There we go.

517
00:32:57,250 --> 00:33:01,930
And so now we're getting that, so we're pretending like these methods are encrypting something, but

518
00:33:01,930 --> 00:33:03,970
really we're not doing real encryption, right?

519
00:33:05,350 --> 00:33:06,490
We're just pretending like it.

520
00:33:06,850 --> 00:33:09,370
OK, so I know this was a lot.

521
00:33:09,880 --> 00:33:11,200
I know this was a whole lot.

522
00:33:11,650 --> 00:33:17,200
Don't worry if you didn't follow every single thing that I gave you here.

523
00:33:17,530 --> 00:33:25,270
If you really, really, really want to understand this better, I would advise you to go actually sit

524
00:33:25,270 --> 00:33:28,720
down with a good book and go into more depth.

525
00:33:28,870 --> 00:33:36,100
But I'm telling you now that the overwhelming majority of Java developers, especially business developers,

526
00:33:36,100 --> 00:33:42,550
which is a lot of weird Java is used the most may never really need to learn most of these techniques

527
00:33:42,550 --> 00:33:46,780
to this, to even this level of detail, to be really honest with you, OK?

528
00:33:47,110 --> 00:33:51,830
You can just consider this lesson to be for those of you who really wanted to go a little deeper, right?

529
00:33:51,850 --> 00:33:57,190
So, OK, we went a little deeper now, but these are some pretty powerful techniques, and it's nice

530
00:33:57,190 --> 00:33:59,830
to just be aware that you can do them right.

531
00:34:00,130 --> 00:34:03,040
So don't worry about memorizing how to do all of this.

532
00:34:03,370 --> 00:34:06,070
I rarely use most of these techniques myself.

533
00:34:06,220 --> 00:34:11,680
So you can always go back and rewatch this video if and when you think you have a good reason to need

534
00:34:11,680 --> 00:34:12,880
some of these techniques.

535
00:34:13,090 --> 00:34:17,440
And you can also obviously go find a book and go into more detail on it.

536
00:34:17,470 --> 00:34:17,950
OK.

537
00:34:18,430 --> 00:34:22,300
So with that being said, I am going to go ahead and wrap this up now.

538
00:34:22,450 --> 00:34:25,510
And you now know a little bit more about generics.

539
00:34:25,660 --> 00:34:27,300
I will see you in the next one.
