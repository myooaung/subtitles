WEBVTT
1
00:00:01.680 --> 00:00:08.730
OK, now it's time to learn about another construct that is extremely common and useful in programming,

2
00:00:08.730 --> 00:00:17.340
and that is loops, so loops are blocks of code that can be repeated a number of times, depending on

3
00:00:17.340 --> 00:00:20.910
some criteria, they can be repeated based on a number.

4
00:00:20.940 --> 00:00:27.330
Like you can say, I want this loop, this block of code to be repeated x number of times five number

5
00:00:27.480 --> 00:00:30.330
five times ten times one million times.

6
00:00:30.690 --> 00:00:39.240
Or you can specify that a block of code should be repeated as long as something is true or while something

7
00:00:39.240 --> 00:00:42.990
is true or until something becomes true or whatever.

8
00:00:42.990 --> 00:00:47.730
So you've got a few ways to control how many times a loop will execute.

9
00:00:48.600 --> 00:00:53.280
Now there are a couple of types of loops, and we're going to take a look at all of them.

10
00:00:53.280 --> 00:00:55.290
So let's let's jump into the code.

11
00:00:55.740 --> 00:01:00.630
Now what we're going to do here, we're going to revisit our number guessing game.

12
00:01:00.630 --> 00:01:01.800
We're going to rewrite that.

13
00:01:02.040 --> 00:01:09.870
But this time we're going to make it so that it allows us to actually enter a number that we guess on

14
00:01:09.870 --> 00:01:11.310
a command prompt.

15
00:01:11.310 --> 00:01:17.250
We can actually get prompted to enter a number and then we will enter a number to guess whatever the

16
00:01:17.460 --> 00:01:20.910
randomly chosen number was and see if we got it or not.

17
00:01:20.910 --> 00:01:27.930
And eventually we will modify the program so that it will keep asking us to enter a number until we

18
00:01:27.930 --> 00:01:30.330
finally guess the correct number.

19
00:01:30.930 --> 00:01:31.350
All right.

20
00:01:31.380 --> 00:01:36.450
So first, let's let's re implement some of our guessing game here.

21
00:01:36.900 --> 00:01:42.500
I think we're going to have a couple of variables will have a variable that represents the random number.

22
00:01:42.510 --> 00:01:47.680
So let's create an integer to hold a random number.

23
00:01:48.570 --> 00:01:54.120
And let's go ahead and generate that random number, and I'm going to use the random class.

24
00:01:54.420 --> 00:01:56.580
So new random.

25
00:01:59.920 --> 00:02:07.360
That next event, and we're and let's discuss the number between one and 10 inclusively, which means

26
00:02:07.360 --> 00:02:10.870
it could include the one and it could include the 10.

27
00:02:12.500 --> 00:02:16.410
So then we will give it an amount of 10.

28
00:02:16.430 --> 00:02:21.680
However, if you recall, now what this means is zero will be included in this.

29
00:02:21.830 --> 00:02:23.630
But 10 will not be included.

30
00:02:23.630 --> 00:02:28.850
So this will actually give us random numbers between zero and nine inclusive.

31
00:02:28.880 --> 00:02:32.030
We want numbers between one and 10.

32
00:02:32.330 --> 00:02:40.250
So what we can do since this will give us zero through nine, we can simply add one to this.

33
00:02:40.490 --> 00:02:47.240
And now we will be getting random numbers stored in the random number between one and 10.

34
00:02:47.930 --> 00:02:52.930
And if you ever forget how this works, you can always look at the Java Dock there.

35
00:02:52.940 --> 00:02:58.760
If I just hover over this, in fact, there's the Java Dock right there and it tells us right here uniformly

36
00:02:58.760 --> 00:03:06.080
distributed into values between zero inclusive and the specified value exclusive meaning not including

37
00:03:06.080 --> 00:03:07.370
the upper limit.

38
00:03:07.880 --> 00:03:08.270
OK.

39
00:03:08.300 --> 00:03:10.430
So there's our randomly generated number.

40
00:03:10.610 --> 00:03:15.990
Now we want to prompt the user to enter a guest number, right?

41
00:03:16.010 --> 00:03:17.630
Like what number do they guess?

42
00:03:18.080 --> 00:03:20.630
And I think we looked at this early on.

43
00:03:20.720 --> 00:03:24.290
Forgive me, it's been a long time myself since I think we did this.

44
00:03:24.290 --> 00:03:31.070
So we used a method called console on the system class.

45
00:03:31.250 --> 00:03:35.470
What we can do is we can call system, not console.

46
00:03:35.480 --> 00:03:43.400
And this console method returns an object that kind of represents the computer system, the keyboard

47
00:03:43.400 --> 00:03:45.890
in the monitor, if you want to think of it in this way.

48
00:03:46.280 --> 00:03:53.390
So the console method returns that object, they console object, and then that console object has a

49
00:03:53.390 --> 00:03:55.700
number of useful methods on it.

50
00:03:55.970 --> 00:04:00.890
The method that I think we will want here will be the Red Line method.

51
00:04:01.070 --> 00:04:05.120
This will allow us to read some input from the keyboard.

52
00:04:05.930 --> 00:04:06.360
OK.

53
00:04:06.530 --> 00:04:13.070
And we can also present the user with a prompt along with this message, so we can say something like,

54
00:04:13.430 --> 00:04:22.040
please guess a number between one and 10 inclusively.

55
00:04:24.470 --> 00:04:24.950
OK.

56
00:04:27.410 --> 00:04:34.880
Now, this method read line, if we hover over it, we can see that it returns a string, which will

57
00:04:34.880 --> 00:04:36.890
be whatever it is that we entered.

58
00:04:37.580 --> 00:04:43.460
So in this case where we're being prompted to enter a number, but it's going to return a string and

59
00:04:43.460 --> 00:04:49.730
obviously ultimately we're going to want to compare the number that was entered with the number that

60
00:04:49.730 --> 00:04:50.450
was guessed.

61
00:04:50.810 --> 00:04:56.690
In this case, the number that is guessed is an integer, but the number that will be entered is going

62
00:04:56.690 --> 00:04:57.980
to be a string.

63
00:04:58.340 --> 00:05:05.810
So I think it would be best if we were to convert this entered string into a number.

64
00:05:06.050 --> 00:05:07.400
Do you remember how to do that?

65
00:05:08.120 --> 00:05:09.820
So so let's keep that in mind.

66
00:05:09.830 --> 00:05:16.400
So first, let's go ahead and just capture this string into a variable so you could either put your

67
00:05:16.400 --> 00:05:21.500
cursor at the end of the line and then do a command option V to introduce a variable just like that.

68
00:05:21.800 --> 00:05:30.110
And we could call it guest name or whatever you want to call it, or number or entered name or whatever.

69
00:05:30.380 --> 00:05:37.460
Or obviously, you also could just type that in yourself, string guest numb either way.

70
00:05:37.580 --> 00:05:38.150
All right.

71
00:05:38.540 --> 00:05:45.440
So just keep in mind, this guest numb variable will contain the number that the user enters from the

72
00:05:45.440 --> 00:05:46.010
keyboard.

73
00:05:46.550 --> 00:05:47.030
All right.

74
00:05:47.360 --> 00:05:51.420
So now we've got this guest number, but it's a string.

75
00:05:51.620 --> 00:05:56.210
And we're going to want to compare this guest number in the random number, but we cannot compare an

76
00:05:56.210 --> 00:06:01.280
integer and a string, so we need to convert this guest number into an integer.

77
00:06:01.610 --> 00:06:09.650
And so what I think I would do is I like this name for the variable already guest numb, but I'm already

78
00:06:09.650 --> 00:06:10.930
using it for this string.

79
00:06:10.940 --> 00:06:16.760
So what I think I'm inclined to do here is to just put a postfix on the end of this variable to indicate

80
00:06:16.760 --> 00:06:19.070
that this is the guest number as a string.

81
00:06:19.310 --> 00:06:24.980
And then I'll introduce an integer and I will use the word guess the number for that variable instead,

82
00:06:24.980 --> 00:06:26.600
because that really will be a number.

83
00:06:26.780 --> 00:06:28.220
So let me show you what I mean here.

84
00:06:28.250 --> 00:06:38.600
Guest stars or string or or text or something like that, then I will introduce another variable and

85
00:06:38.840 --> 00:06:41.570
and I will call this one guest numb.

86
00:06:42.860 --> 00:06:50.890
Equals and now we want to convert this string representation of a number into an actual integer and

87
00:06:50.990 --> 00:06:52.010
remember how to do that.

88
00:06:52.100 --> 00:06:55.760
I told you once you learned how to do this, you'd probably encounter it a lot.

89
00:06:56.450 --> 00:06:56.780
All right.

90
00:06:56.780 --> 00:07:02.890
So we'll use integer pass int and then we'll pass in the guest.

91
00:07:02.900 --> 00:07:04.850
No text just like that.

92
00:07:05.030 --> 00:07:11.360
And now we have just converted the text number that was input into an integer.

93
00:07:11.780 --> 00:07:12.350
All right.

94
00:07:12.740 --> 00:07:21.720
Now we can compare the guest num number to the random number, and we'll use an if statement to do that.

95
00:07:21.740 --> 00:07:26.120
Well, OK, so we can do if the guest number.

96
00:07:27.340 --> 00:07:28.030
Equals.

97
00:07:28.630 --> 00:07:34.840
Be careful to make sure you use the equals operator and not the assignment operator assignment operator

98
00:07:34.840 --> 00:07:42.400
as this one equals, whereas the equals operator is two equals two equals allows us to compare whether

99
00:07:42.400 --> 00:07:49.180
or not two things are equal, whereas the assignment operator assigns a value to a variable.

100
00:07:49.480 --> 00:07:49.930
OK.

101
00:07:51.510 --> 00:07:51.840
All right.

102
00:07:52.230 --> 00:07:55.440
If guest, none equals random, numb.

103
00:07:56.190 --> 00:07:57.180
Just like that.

104
00:07:58.600 --> 00:08:05.560
Then then let's print a message out and say, you know, the random number was blah blah blah, and

105
00:08:05.560 --> 00:08:06.730
you got it right.

106
00:08:06.970 --> 00:08:11.740
So for that, we'll use a formatted system that out that format or print off.

107
00:08:12.310 --> 00:08:14.440
So we'll use an ASO Yusef.

108
00:08:14.650 --> 00:08:15.750
OK, let's see.

109
00:08:15.760 --> 00:08:21.910
So we can say the random number was percent de.

110
00:08:22.120 --> 00:08:22.690
Period.

111
00:08:23.950 --> 00:08:25.420
You got it.

112
00:08:25.780 --> 00:08:30.110
Exclamation and will probably want a new line here.

113
00:08:30.130 --> 00:08:32.140
Also, comma.

114
00:08:32.290 --> 00:08:35.820
And then we'll pass in the random numbers so that we can see it right.

115
00:08:35.830 --> 00:08:37.540
That way, we get a little bit of feedback.

116
00:08:38.000 --> 00:08:39.980
Now what if you didn't get it?

117
00:08:40.000 --> 00:08:41.860
What if these two are not equal?

118
00:08:41.890 --> 00:08:45.100
Well, we'll want to give ourselves some feedback for that as well.

119
00:08:45.100 --> 00:08:49.150
So then we can say else or otherwise right else.

120
00:08:50.230 --> 00:08:51.370
So you f.

121
00:08:53.270 --> 00:08:58.130
The random number was percent the period.

122
00:08:58.670 --> 00:09:02.030
You didn't get.

123
00:09:03.050 --> 00:09:03.620
It.

124
00:09:05.660 --> 00:09:09.140
And we'll still pass in India, the random number there.

125
00:09:09.590 --> 00:09:12.410
All right, so we haven't implemented any looping yet.

126
00:09:12.530 --> 00:09:15.650
Let's just try this out and see what happens now.

127
00:09:15.680 --> 00:09:21.980
If you may recall, from the last time we used the system that console, you may recall that if we just

128
00:09:21.980 --> 00:09:27.680
try to run this the way that we normally run our Java applications and programs, we're going to get

129
00:09:27.680 --> 00:09:28.400
a failure.

130
00:09:28.580 --> 00:09:30.440
In fact, they'll just show you that again.

131
00:09:30.770 --> 00:09:33.560
And the reason we'll get a failure is because.

132
00:09:34.250 --> 00:09:34.640
All right.

133
00:09:34.730 --> 00:09:36.500
So yeah, here's our here's our failure.

134
00:09:36.650 --> 00:09:43.400
And the reason we're getting this failure is because when we run a program that is requesting access

135
00:09:43.400 --> 00:09:52.460
to the console from directly within the IED, the IED is not capable of accessing this console.

136
00:09:52.640 --> 00:09:56.480
That's just because of the way that the IED is working with the system.

137
00:09:56.750 --> 00:10:03.470
So if we want to run a program that accesses the console, we have to run it manually ourselves from

138
00:10:03.470 --> 00:10:04.880
from the command line.

139
00:10:05.150 --> 00:10:05.570
OK.

140
00:10:05.840 --> 00:10:11.010
And so, first of all, want to open up a command prompt within the idea?

141
00:10:11.030 --> 00:10:15.890
We can do it in the IED, but we'll be taking control of actually executing Java.

142
00:10:15.920 --> 00:10:16.230
All right.

143
00:10:16.250 --> 00:10:24.170
So the way we can do that is with option F12 or Alt F12 on Windows in Linux, and that opens a command

144
00:10:24.170 --> 00:10:24.680
prompt.

145
00:10:24.980 --> 00:10:30.330
Now we are by default inside of the same folder where our code lives.

146
00:10:30.410 --> 00:10:30.920
OK.

147
00:10:31.460 --> 00:10:41.780
And now to execute this program, we can type Java All Lowercase Space Hyphen C four class path because

148
00:10:41.780 --> 00:10:49.250
we have to tell Java the the the folder where our compiled that is our built program.

149
00:10:49.250 --> 00:10:50.840
Guess it lives.

150
00:10:51.140 --> 00:10:57.980
Keep in mind that every time we run one of these programs, what's actually happening is that Java is

151
00:10:57.980 --> 00:11:07.190
translating our Java code into what is called Byte code, which is essentially machine code, if you

152
00:11:07.190 --> 00:11:09.590
will write zeros and ones ultimately.

153
00:11:09.610 --> 00:11:16.220
And so when we use the Java command to actually execute a Java program, we actually are pointing it

154
00:11:16.220 --> 00:11:22.520
at the final bytecode version of the program that Java built for us.

155
00:11:22.820 --> 00:11:24.920
And so we have to tell it where that is.

156
00:11:25.250 --> 00:11:34.220
Now that file, if I open up the project window or the project pane here, the compiled program is in

157
00:11:34.220 --> 00:11:38.600
the out folder under our project folder.

158
00:11:38.630 --> 00:11:43.430
Okay, so that we've got the project folder here and then we've got in a folder called out.

159
00:11:43.970 --> 00:11:48.650
And if you happen to be writing your code in a project that isn't called people, that's fine.

160
00:11:48.650 --> 00:11:55.070
It doesn't matter as long as you're following along and you've got this out folder in whatever project

161
00:11:55.070 --> 00:11:56.450
folder you're in, you're fine.

162
00:11:56.810 --> 00:11:57.110
All right.

163
00:11:57.110 --> 00:12:04.700
So if we expand open this out folder, we will see a little structure here like production, and then

164
00:12:04.700 --> 00:12:10.520
you'll probably see whatever the name of the project is that you're writing all of this code in and

165
00:12:10.520 --> 00:12:12.500
the name of our class is called guess it.

166
00:12:12.770 --> 00:12:18.590
And so there should be a file in this in here called Guess it.

167
00:12:18.830 --> 00:12:21.750
And that's the one we want to refer to using this path.

168
00:12:21.770 --> 00:12:24.110
So the way I will do this is copy.

169
00:12:25.090 --> 00:12:34.730
Space out, because that's the top folder here within the project folder, out forward, well, slash.

170
00:12:34.900 --> 00:12:39.940
Now on Mac and Linux, that would be a forward slash on Windows.

171
00:12:40.270 --> 00:12:49.180
It will likely be a backslash, so be careful about the forward versus backslash C.P space out forward

172
00:12:49.180 --> 00:12:53.890
slash production and I'm going to hit tab on Mac and Linux.

173
00:12:53.890 --> 00:13:00.340
This will usually work if you happen to be using PowerShell in Windows, you can probably use the tab

174
00:13:00.340 --> 00:13:00.760
as well.

175
00:13:00.760 --> 00:13:06.610
And I don't recall if that works for the default command prompt in Windows, so you may have to type

176
00:13:06.610 --> 00:13:09.630
that out explicitly and then people.

177
00:13:09.640 --> 00:13:17.050
And that puts me in the folder where all of the compiled Java files are.

178
00:13:17.350 --> 00:13:24.690
And then I can do a space and then I give it the name of the file I want to run, which in this case

179
00:13:24.690 --> 00:13:25.480
is, guess it.

180
00:13:26.420 --> 00:13:28.490
Guess it just like that.

181
00:13:29.520 --> 00:13:29.880
All right.

182
00:13:30.030 --> 00:13:33.810
So now, if I hit return, I can run the program.

183
00:13:35.370 --> 00:13:36.030
All right, cool.

184
00:13:36.050 --> 00:13:42.660
So it prompts me, please guess, a number between one and 10 inclusively, so I'm going to guess five.

185
00:13:43.290 --> 00:13:44.670
And hit return.

186
00:13:45.610 --> 00:13:47.390
All right, the random number was four.

187
00:13:47.410 --> 00:13:48.370
You didn't get it.

188
00:13:48.520 --> 00:13:53.080
Oh, and it looks like if you notice I got this weird little symbol here, and that's because I forgot

189
00:13:53.080 --> 00:13:58.390
to add a new line character at the end of the you didn't get it message.

190
00:13:58.400 --> 00:14:03.510
So right here, I'm going to put my cursor there and I'm going to give myself a new line character with

191
00:14:03.520 --> 00:14:05.560
a percent in just like that.

192
00:14:05.920 --> 00:14:12.220
Now that I've made a change to the code, I need to re compile this program explicitly.

193
00:14:12.610 --> 00:14:16.140
Normally, we don't need to do that and I've explained this before, but I'll explain it again.

194
00:14:16.150 --> 00:14:21.880
Normally we don't need to explicitly compile anything because normally we run the programs from within

195
00:14:21.880 --> 00:14:25.240
the idea completely instead of outside here manually.

196
00:14:25.420 --> 00:14:33.490
And when we run the programs within the ADP, the ADP knows to go ahead and compile or recompile the

197
00:14:33.490 --> 00:14:35.830
code if we've made any changes.

198
00:14:36.070 --> 00:14:43.210
But if we make changes to the code and then we run the program again from the command prompt here in

199
00:14:43.210 --> 00:14:48.420
a manual way, the idea will not have been triggered to re compile the code.

200
00:14:48.430 --> 00:14:51.280
And so now we have to re compile the code ourselves.

201
00:14:51.610 --> 00:14:59.320
So put your cursor anywhere in the editor window here and then you'll do a command F9 or control F9

202
00:14:59.320 --> 00:15:03.580
on Windows and Linux to recompile or build the project.

203
00:15:03.580 --> 00:15:07.840
When when we're building the project, that's what we mean is that it's being recompiled.

204
00:15:07.900 --> 00:15:13.180
Really, the only difference between building and compiling is that in this case, we are compiling

205
00:15:13.180 --> 00:15:14.320
just one file.

206
00:15:14.530 --> 00:15:23.260
But many real Java programs are comprised of multiple files, and if multiple files need to be re compiled,

207
00:15:23.260 --> 00:15:26.470
that is what is referred to as building the project.

208
00:15:26.620 --> 00:15:31.360
So it really means is going through the whole project, finding all of the individual files that need

209
00:15:31.360 --> 00:15:34.090
to be compiled and then re compiling all of them.

210
00:15:34.330 --> 00:15:34.630
All right.

211
00:15:34.630 --> 00:15:36.370
So now we've compiled this.

212
00:15:36.370 --> 00:15:42.190
So then if we put our cursor back down here in the terminal prompt for Windows users, you may be able

213
00:15:42.190 --> 00:15:49.480
to press the up arrow to recall the last command that you entered for Mac and Linux users.

214
00:15:49.480 --> 00:15:53.050
You definitely can do this for Windows users if that does not work.

215
00:15:53.260 --> 00:15:57.520
Sorry, you'll have to retype this command out explicitly.

216
00:15:58.700 --> 00:16:05.420
All right, so after you've re-entered the command, then we can rerun it again, and I'm going to guess

217
00:16:05.420 --> 00:16:07.370
another another number, I'm going to guess three.

218
00:16:08.270 --> 00:16:12.860
OK, this time it was one, and I still didn't get it, so now if I want to keep running this, I can

219
00:16:12.860 --> 00:16:18.020
click the up arrow, I can press the up arrow and hit Enter and then I can run this again.

220
00:16:18.650 --> 00:16:19.760
Now it was nine.

221
00:16:19.940 --> 00:16:22.160
I can and I can keep doing that.

222
00:16:29.360 --> 00:16:32.480
All right, but you see how much of a pain in the behind that is?

223
00:16:32.780 --> 00:16:37.670
Wouldn't it be nice if it would just keep looping until I finally get the number?

224
00:16:38.330 --> 00:16:39.860
That's what we want to do.

225
00:16:40.200 --> 00:16:40.880
So.

226
00:16:41.800 --> 00:16:47.920
To do that, first off, I'm going to close this project, Payne, to give myself a little more space.

227
00:16:49.100 --> 00:16:55.220
OK, so we pretty much just want to keep repeating this block of code that I have selected over and

228
00:16:55.220 --> 00:16:55.820
over again.

229
00:16:56.240 --> 00:17:02.060
And that brings us to the first type of loop we're going to learn about, which is called a while loop.

230
00:17:02.570 --> 00:17:10.160
And what we can do is we can tell in a while loop while something is in a certain state.

231
00:17:10.700 --> 00:17:12.170
Loop through this code.

232
00:17:12.530 --> 00:17:12.890
OK.

233
00:17:13.100 --> 00:17:14.960
So let me show you what I mean by that.

234
00:17:15.140 --> 00:17:18.380
Now there's a couple of ways that we can introduce this while loop.

235
00:17:18.530 --> 00:17:23.750
One nice way that we could do it is to literally select all of this could be careful.

236
00:17:23.750 --> 00:17:28.700
If you do it this way, though, you don't want to select this curly brace that I have on Line 14 because

237
00:17:28.700 --> 00:17:34.730
that curly brace goes with the whole entire method, and we're just wanting to loop the code inside

238
00:17:34.730 --> 00:17:36.560
of the method, the actual body here.

239
00:17:36.740 --> 00:17:45.260
But if you select all of that code, you can do an option command T, and that allows us to surround

240
00:17:45.260 --> 00:17:48.320
the selected code with some construct.

241
00:17:48.560 --> 00:17:54.260
And you've got a lot of options here if if else, while do while for try catch a lot of things.

242
00:17:54.530 --> 00:18:02.570
So what we want is to surround the selected code with a while loop and I will select that and watch

243
00:18:02.570 --> 00:18:03.350
what happens.

244
00:18:04.580 --> 00:18:09.960
OK, so it just surrounded all of that code with a while loop.

245
00:18:10.070 --> 00:18:17.090
Now notice the while loop looks kind of similar to the if statement in that there's immediately after

246
00:18:17.090 --> 00:18:20.990
the word while we have parentheses and then a boolean here.

247
00:18:21.020 --> 00:18:26.810
Now here, the I.D. has by default hardcoded a true Boolean here.

248
00:18:26.960 --> 00:18:32.570
And what this is saying is that as long as we have a true here, which in this case, it's hard coded,

249
00:18:32.570 --> 00:18:36.770
so it'll always be there unless we change the code as long as this is true.

250
00:18:36.920 --> 00:18:41.210
Keep looping through this code just like so.

251
00:18:41.330 --> 00:18:43.220
So let's see what that looks like now.

252
00:18:43.220 --> 00:18:47.720
In order to run this again, we'll have to re compile manually so that we can run it down here.

253
00:18:47.900 --> 00:18:52.730
So I'm going to do another command, F9 to build the project.

254
00:18:54.330 --> 00:18:54.750
OK.

255
00:18:55.260 --> 00:18:58.860
And then I'm going to put my cursor down here in the terminal.

256
00:18:59.040 --> 00:19:03.120
I'm going to hit the upper key and rerun this.

257
00:19:03.840 --> 00:19:04.290
All right.

258
00:19:04.320 --> 00:19:06.000
Guess a number between one and 10?

259
00:19:06.000 --> 00:19:07.080
I'm going to guess three.

260
00:19:08.810 --> 00:19:10.400
I didn't get it, it was a seven.

261
00:19:10.820 --> 00:19:15.380
And now look what it's doing, it immediately prompted me to guess the number again.

262
00:19:16.100 --> 00:19:17.390
I'm going to guess a six.

263
00:19:18.890 --> 00:19:20.090
This time it was a four.

264
00:19:20.120 --> 00:19:25.310
OK, so this is a little better now, I don't have to keep restarting the program every time I want

265
00:19:25.310 --> 00:19:26.330
to guess something.

266
00:19:26.450 --> 00:19:32.420
However, do you see there's one annoyance with the way this is working currently, and that is, each

267
00:19:32.420 --> 00:19:40.940
time I miss the number, it changes the number right, so I don't get multiple chances to guess at the

268
00:19:40.940 --> 00:19:41.960
same number.

269
00:19:42.200 --> 00:19:43.990
It's a moving target every time.

270
00:19:44.000 --> 00:19:46.880
That's not normally the way a guessing game works.

271
00:19:47.150 --> 00:19:52.880
Normally, the guessing game will pick a number and then you get a few tries to get it right.

272
00:19:53.060 --> 00:19:58.950
But in this case, everything in here is getting looped, including the generation of the random number.

273
00:19:59.240 --> 00:20:01.880
That's probably not really what we want.

274
00:20:01.910 --> 00:20:08.900
We probably want to generate a random number and then get lots of loops to try to guess what that number

275
00:20:08.900 --> 00:20:09.560
was.

276
00:20:10.100 --> 00:20:13.600
So let's exit out of this program now to exit out.

277
00:20:13.610 --> 00:20:17.930
We can use as long as you click down here in the terminal.

278
00:20:18.200 --> 00:20:22.130
You can do a control C to break out of the program.

279
00:20:22.130 --> 00:20:23.270
Break out of that loop.

280
00:20:23.390 --> 00:20:25.760
OK to cancel the program.

281
00:20:26.670 --> 00:20:33.210
All right now up here, the easiest thing we can do to make this program a little bit better is to take

282
00:20:33.210 --> 00:20:37.980
this line where we're guessing the random, where we're generating the random number and just move it

283
00:20:37.980 --> 00:20:40.800
above the loop right outside of the loop.

284
00:20:41.250 --> 00:20:48.450
So that way will generate the number once, but then we can keep looping over the parts where we guess

285
00:20:48.450 --> 00:20:49.500
the number, right?

286
00:20:49.710 --> 00:20:54.960
So to do that, I'm going to just put my cursor on line seven here and then I'm going to use option

287
00:20:54.960 --> 00:21:00.270
shift up arrow just like that to move that line up.

288
00:21:00.450 --> 00:21:05.040
And on Windows and Linux, that would be an alt shift up arrow.

289
00:21:05.220 --> 00:21:09.300
And then let me also fix the indentation with a shift tab.

290
00:21:09.480 --> 00:21:11.220
Did you notice like it was?

291
00:21:11.220 --> 00:21:16.410
This line had the same indentation as when it was inside of the while loop.

292
00:21:16.410 --> 00:21:20.670
And now that it's outside of the wire loop, we wouldn't want that to be indented anymore.

293
00:21:20.670 --> 00:21:22.920
We'd want it on the same level with the while loop.

294
00:21:23.220 --> 00:21:24.090
Does that make sense?

295
00:21:24.690 --> 00:21:32.160
And the reason for that is this indentation gives us a nice visual indication that all of this code

296
00:21:32.160 --> 00:21:40.110
here that's indented is inside of the while loop, meaning this is what's going to be repeated multiple

297
00:21:40.110 --> 00:21:40.920
times, right?

298
00:21:41.370 --> 00:21:48.390
So we would not want code that is outside of the while loop, such as Line six to be indented.

299
00:21:48.390 --> 00:21:49.710
That just looks kind of weird.

300
00:21:50.040 --> 00:21:52.350
It should be on the same level as the while loop.

301
00:21:52.830 --> 00:21:53.220
All right.

302
00:21:53.430 --> 00:21:57.090
So now let's rebuild the project again.

303
00:21:57.090 --> 00:22:05.460
Command F9 or control f nine, OK, and then put our cursor down here in the terminal and rerun our

304
00:22:05.460 --> 00:22:09.030
program again again using up arrow and return.

305
00:22:10.010 --> 00:22:13.520
All right, so now let's see, I'm going to guess five.

306
00:22:13.790 --> 00:22:15.470
No, the random number was one.

307
00:22:15.470 --> 00:22:16.490
You didn't get it.

308
00:22:16.610 --> 00:22:16.910
All right.

309
00:22:16.910 --> 00:22:18.480
So now I know what the next number is.

310
00:22:18.500 --> 00:22:19.160
It's one.

311
00:22:20.180 --> 00:22:21.080
Hey, you got it.

312
00:22:21.230 --> 00:22:22.860
Now look what's happening.

313
00:22:22.890 --> 00:22:27.650
Couple of things now that we can keep repeating this, we probably want to fix a couple of things.

314
00:22:27.920 --> 00:22:32.300
One thing that's kind of weird is when you don't get the number correct.

315
00:22:32.510 --> 00:22:36.850
Maybe we shouldn't be telling ourselves what the actual number was, right?

316
00:22:36.860 --> 00:22:38.960
Because that defeats the whole point of the guessing game.

317
00:22:39.170 --> 00:22:44.780
Now that it's easy to keep guessing until you get it, we probably don't want to be showing what the

318
00:22:44.780 --> 00:22:51.860
actual number is so we can come up here and take this bit out where we're showing what that number actually

319
00:22:51.860 --> 00:22:52.180
is.

320
00:22:52.370 --> 00:22:56.330
Let's remove that and then we don't need this either.

321
00:22:56.780 --> 00:23:02.750
Now, technically, because we're not, we're no longer showing a value, a dynamic value here.

322
00:23:02.990 --> 00:23:08.240
Technically, we don't need this to continue being a print statement and we could just use the print

323
00:23:08.240 --> 00:23:09.440
line or something like that.

324
00:23:09.440 --> 00:23:11.030
But I'm lazy and I'm on to leave it.

325
00:23:11.390 --> 00:23:11.780
All right.

326
00:23:11.840 --> 00:23:17.600
The other thing you may have noticed is that when we did get it correct, as soon as we did enter the

327
00:23:17.600 --> 00:23:22.010
correct number, it's still prompted us inside of the loop.

328
00:23:22.010 --> 00:23:26.330
So that loop kept keeps running, even when we do guess the correct number.

329
00:23:26.540 --> 00:23:28.310
We probably don't want that either.

330
00:23:28.610 --> 00:23:31.860
So that's up here when we do get the number correct.

331
00:23:31.880 --> 00:23:33.650
It prints out that we got it.

332
00:23:34.100 --> 00:23:41.150
But then what happens is the code just loops back up to the top again and we keep going through this

333
00:23:41.150 --> 00:23:41.480
loop.

334
00:23:41.600 --> 00:23:43.040
There's no way to get out of it.

335
00:23:43.070 --> 00:23:50.730
So one way that we can break out of this loop is actually to just break out of the entire method.

336
00:23:50.750 --> 00:23:54.050
In other words, to just stop the program from running.

337
00:23:54.500 --> 00:23:59.450
Now we're in this main method here, and any time you're in a method, if you want to get out of that

338
00:23:59.450 --> 00:24:02.120
method, you can use the keyword return.

339
00:24:02.150 --> 00:24:03.950
You don't even have to return anything.

340
00:24:03.960 --> 00:24:08.390
You can just use the word return and that will get you out of a method.

341
00:24:08.600 --> 00:24:13.220
So what we could do online 11 here is make a new line.

342
00:24:14.210 --> 00:24:19.580
And then just say return with a semicolon, so you haven't seen us do that before.

343
00:24:19.610 --> 00:24:25.550
Normally we're returning a value like a five or something like that, but in this case, we can simply

344
00:24:25.550 --> 00:24:27.620
just use return with nothing at all.

345
00:24:27.770 --> 00:24:34.880
And so that actually gets us out of this main method, which in turn causes the entire program to stop

346
00:24:34.880 --> 00:24:35.420
running.

347
00:24:35.690 --> 00:24:42.410
OK, so notice now we're only doing that if we guessed the correct number, if we didn't guess the correct

348
00:24:42.410 --> 00:24:47.450
number, then we're going to just keep going through this loop indefinitely because we've got the word

349
00:24:47.450 --> 00:24:49.850
true hardcoded in this loop.

350
00:24:50.150 --> 00:24:53.000
OK, so let's try that now.

351
00:24:53.210 --> 00:24:56.870
So let's rebuild with Command F nine or control f nine.

352
00:24:57.260 --> 00:25:00.110
OK, then put our cursor down here in the terminal.

353
00:25:00.200 --> 00:25:05.330
Oh, now I forgot to cancel out of the previous program that we ran out of the previous loop.

354
00:25:05.540 --> 00:25:08.360
So we'll want to cancel out of this with the control C.

355
00:25:09.640 --> 00:25:10.510
All right, there we go.

356
00:25:11.020 --> 00:25:18.340
And now we can rerun the program by using the up arrow to recall the last command and then rerun it.

357
00:25:18.610 --> 00:25:19.390
All right.

358
00:25:19.930 --> 00:25:21.520
So please enter a number.

359
00:25:21.520 --> 00:25:22.510
I'm going to enter.

360
00:25:22.510 --> 00:25:23.230
Five.

361
00:25:24.520 --> 00:25:26.650
Oh, and I got it on the first try.

362
00:25:27.330 --> 00:25:28.600
Woodson, wouldn't you know it?

363
00:25:28.780 --> 00:25:34.150
Now that's cool, though, because I got it on the first try and now you see that we the program ended.

364
00:25:34.180 --> 00:25:34.640
Right?

365
00:25:34.660 --> 00:25:35.950
So that part worked.

366
00:25:36.160 --> 00:25:41.080
So let's do this a couple more times, though, and see, by the way, on Mac and Linux.

367
00:25:41.080 --> 00:25:46.480
If you want to clear the terminal here just to make it a little neater, you can type the word clear.

368
00:25:47.020 --> 00:25:47.360
All right.

369
00:25:47.380 --> 00:25:49.480
And now I will recall.

370
00:25:49.660 --> 00:25:53.920
Now I will recall the Java statement, the Java command to run the program again.

371
00:25:54.130 --> 00:26:00.130
Now, since I typed clear, I need to hit the up arrow a couple of times to get back to that Java command

372
00:26:00.130 --> 00:26:01.390
and then I can hit return.

373
00:26:02.380 --> 00:26:02.870
All right.

374
00:26:02.890 --> 00:26:05.020
Please get the number between one and 10 again.

375
00:26:05.210 --> 00:26:06.280
I will pick five.

376
00:26:07.480 --> 00:26:07.760
All right.

377
00:26:07.780 --> 00:26:11.890
So I didn't get it, and now I don't know what the number is, so I have to keep guessing.

378
00:26:12.250 --> 00:26:13.810
Now I will guess three.

379
00:26:15.080 --> 00:26:15.950
I still didn't get it.

380
00:26:16.100 --> 00:26:17.930
Now I will guess one.

381
00:26:18.770 --> 00:26:21.050
Hey, I got it, so I got it in three tries.

382
00:26:21.350 --> 00:26:27.320
OK, so now you're beginning to see how useful these loops can be.

383
00:26:27.680 --> 00:26:35.060
So in the next lesson, we will play around with some of the things that we can do in this loop to control

384
00:26:35.060 --> 00:26:39.120
it more like what if we want to stop the loop prematurely?

385
00:26:39.140 --> 00:26:39.470
Right?

386
00:26:39.650 --> 00:26:41.240
We can allow ourselves to do that.

387
00:26:41.460 --> 00:26:44.150
So we'll do that in the next lesson, and I'll see you then.
