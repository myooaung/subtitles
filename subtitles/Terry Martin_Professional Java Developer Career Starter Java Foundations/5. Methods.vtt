WEBVTT
1
00:00:00.420 --> 00:00:06.990
Welcome back in this lesson, we're going to now look more closely at methods, and we're going to start

2
00:00:06.990 --> 00:00:12.510
kind of putting a lot of these pieces together the class, the the variables and the methods.

3
00:00:13.440 --> 00:00:13.800
All right.

4
00:00:13.800 --> 00:00:20.340
So I have cleared out what we had in the person class because that was really just there for illustrative

5
00:00:20.340 --> 00:00:21.030
purposes.

6
00:00:21.030 --> 00:00:27.360
And now we're going to look at some more things that we can do with this class as pertains to methods.

7
00:00:28.140 --> 00:00:33.270
So first off, let me give a little definition for what what is a method?

8
00:00:33.960 --> 00:00:39.730
A method is a block of code where work gets done.

9
00:00:39.750 --> 00:00:46.230
We will take a look at what I mean by a block of code, but in general, it's one or more lines of code

10
00:00:46.470 --> 00:00:48.780
that are in between curly braces.

11
00:00:49.500 --> 00:01:00.930
A method can take zero or more inputs, and it can return zero or one outputs in Java.

12
00:01:01.140 --> 00:01:05.640
It is just about the only place where work can actually get done.

13
00:01:05.880 --> 00:01:12.750
In other words, it's just about the only place where statements and commands, if you will, can actually

14
00:01:12.750 --> 00:01:13.830
be executed.

15
00:01:15.150 --> 00:01:21.150
If you are coming from any other programming experience, then you may already be familiar with the

16
00:01:21.150 --> 00:01:22.920
concept of functions.

17
00:01:23.190 --> 00:01:27.510
And if you are, then I can basically say that a method is a function.

18
00:01:27.840 --> 00:01:35.340
Really, the only difference is that because Java is an object oriented language and all code has to

19
00:01:35.340 --> 00:01:42.140
live inside of a class, a method is a function inside of a class.

20
00:01:42.150 --> 00:01:43.440
That's that's basically it.

21
00:01:43.650 --> 00:01:51.090
It's it's a function that is part of the class, whereas in non object oriented languages, especially

22
00:01:51.090 --> 00:01:52.950
ones that are not as strict as Java.

23
00:01:53.160 --> 00:02:01.380
You can have functions that exist on their own, like in a language like C or even C++, for that matter.

24
00:02:01.620 --> 00:02:05.790
But in Java, you cannot have methods live on their own.

25
00:02:05.790 --> 00:02:08.970
They have to be contained within a class.

26
00:02:09.210 --> 00:02:13.140
And when they are in a class, they are no longer called functions.

27
00:02:13.140 --> 00:02:15.060
They are now called methods.

28
00:02:15.840 --> 00:02:21.540
So let me go ahead and create a method, and then I will break it down and explain it, and we'll look

29
00:02:21.540 --> 00:02:23.880
at a few different variations of methods.

30
00:02:24.330 --> 00:02:24.570
All right.

31
00:02:24.570 --> 00:02:26.370
So here we are in the person class.

32
00:02:26.580 --> 00:02:31.800
So the first method I'm going to create is possibly one of the simplest ones you could have.

33
00:02:32.160 --> 00:02:34.950
And let's see, we'll have this method.

34
00:02:34.950 --> 00:02:35.630
We'll call this.

35
00:02:35.650 --> 00:02:38.340
Some say hello.

36
00:02:40.260 --> 00:02:44.370
And this method is simply going to say hello.

37
00:02:45.750 --> 00:02:46.110
All right.

38
00:02:46.200 --> 00:02:48.510
So this is the simplest method we could have.

39
00:02:48.660 --> 00:02:54.300
Now, before I explain it, not that it needs a whole lot of explanation, but before I explain it,

40
00:02:54.300 --> 00:02:57.360
I also want to go ahead and run this method.

41
00:02:57.450 --> 00:03:02.160
And to do that, I'm going to have to create another method and I will explain this method as well.

42
00:03:02.160 --> 00:03:08.280
But probably towards the end of this lecture and you've seen some of what I'm about to do here before.

43
00:03:09.000 --> 00:03:09.390
Oops.

44
00:03:09.660 --> 00:03:10.560
I don't want to do that.

45
00:03:10.590 --> 00:03:11.080
Let's see.

46
00:03:11.100 --> 00:03:14.520
So we'll need to create an instance of a person.

47
00:03:19.040 --> 00:03:22.130
And then we can call this method.

48
00:03:22.220 --> 00:03:22.580
Oops.

49
00:03:23.210 --> 00:03:23.570
All right.

50
00:03:23.720 --> 00:03:29.780
So I'm going to go ahead and run this program and let's see what it does and then we'll go backward

51
00:03:29.780 --> 00:03:30.830
and explain it.

52
00:03:31.280 --> 00:03:34.340
OK, so it prints the word hello.

53
00:03:34.550 --> 00:03:35.980
So let's see what we did here.

54
00:03:35.990 --> 00:03:38.920
We'll start in this public static void main method.

55
00:03:38.930 --> 00:03:44.270
So this main method here is just here so that we can actually run a program.

56
00:03:44.300 --> 00:03:44.750
OK?

57
00:03:44.930 --> 00:03:52.040
It's it's almost not even part of the class other than it needed to live in a class because those are

58
00:03:52.040 --> 00:03:53.000
the rules of Java.

59
00:03:53.000 --> 00:03:54.810
Methods have to be in a class.

60
00:03:54.830 --> 00:03:58.730
I mean, so just out of convenience, I just put it inside of this person class.

61
00:03:58.730 --> 00:04:03.740
But other than that, it kind of sort of doesn't really have anything to do with the class itself.

62
00:04:03.950 --> 00:04:07.070
It's just a method that lets me run a program.

63
00:04:07.640 --> 00:04:14.090
OK, but anyway, within this public static void main method, the first thing I had to do was to create

64
00:04:14.090 --> 00:04:17.000
an instance of the person class.

65
00:04:17.000 --> 00:04:22.920
And I'm doing that here with the new operator and the keyword new, which is that called a new operator.

66
00:04:22.940 --> 00:04:31.490
So I'm telling Java create a new instance of the person class and then store a reference to this newly

67
00:04:31.490 --> 00:04:39.290
created person object inside of this variable called P1, which is of type person.

68
00:04:39.290 --> 00:04:44.390
Which is just to say this variable P1 consort a reference to a person.

69
00:04:45.080 --> 00:04:45.560
OK.

70
00:04:46.130 --> 00:04:54.080
And now that I have an instance or a reference to a person, then I can use that person on the next

71
00:04:54.080 --> 00:04:54.440
line.

72
00:04:54.470 --> 00:04:57.020
So I refer to that person P1.

73
00:04:57.320 --> 00:05:01.930
And I want to call this method, which means I want to execute this method.

74
00:05:01.940 --> 00:05:07.010
I want Javier to run whatever commands I have inside of this method.

75
00:05:07.310 --> 00:05:16.220
The way that I tell Java to run this method is by first telling it what object the method belongs to,

76
00:05:16.220 --> 00:05:19.430
which in this case it belongs to the P1 object.

77
00:05:19.550 --> 00:05:20.900
OK, it's a person.

78
00:05:21.980 --> 00:05:28.640
And then I tell it, I want you to run the say hello method of the P1 object.

79
00:05:28.970 --> 00:05:29.420
OK.

80
00:05:30.170 --> 00:05:38.810
And so then what ends up happening is that Java jumps into whatever statements I have within the curly

81
00:05:38.810 --> 00:05:43.670
braces of this method and it starts to execute them.

82
00:05:43.910 --> 00:05:51.860
And in this case, I have one statement that says to print a line of text, which is a string here.

83
00:05:51.980 --> 00:05:56.870
Print that out on the monitor, basically or on the display.

84
00:05:57.020 --> 00:05:59.840
So I think that's pretty self-explanatory.

85
00:05:59.990 --> 00:06:00.800
Let's see.

86
00:06:00.890 --> 00:06:07.010
So let's look at some of the characteristics of a method someone to put a little space in here.

87
00:06:07.700 --> 00:06:11.240
OK, so first, I'm going to come back and explain the visibility.

88
00:06:11.240 --> 00:06:18.650
Although we have seen a little bit of visibility on classes and visibility, rules for methods are related.

89
00:06:19.070 --> 00:06:23.610
But we'll come back and do a deeper dive into that a little bit later in the discussion, OK?

90
00:06:23.630 --> 00:06:25.670
So we're going to move on to the next thing.

91
00:06:25.820 --> 00:06:33.590
So this next bit here is declaring what kind of data this method can output.

92
00:06:34.220 --> 00:06:34.700
OK.

93
00:06:35.090 --> 00:06:41.150
And in this particular case, I'm declaring that this method does not output anything.

94
00:06:41.150 --> 00:06:43.580
It does not return anything, I should say.

95
00:06:43.610 --> 00:06:44.090
OK.

96
00:06:45.170 --> 00:06:50.090
So the word void means it does not return any data.

97
00:06:50.630 --> 00:06:56.750
Now you may be scratching your head and thinking, Well, that doesn't make sense because you just ran

98
00:06:56.750 --> 00:06:57.560
this program.

99
00:06:57.560 --> 00:07:00.170
Say hello, and it did return something.

100
00:07:00.170 --> 00:07:02.930
It printed the word hello on the screen.

101
00:07:03.440 --> 00:07:04.400
Yes, it did.

102
00:07:04.430 --> 00:07:11.900
But printing the word hello on the screen is not considered output from the method.

103
00:07:11.930 --> 00:07:16.280
OK, so let me give you an analogy to kind of understand what's going on here.

104
00:07:16.460 --> 00:07:25.740
Let's imagine that you go to a drive thru of a fast food restaurant like McDonald's if you live in the

105
00:07:25.740 --> 00:07:27.020
U.S. or Canada.

106
00:07:27.290 --> 00:07:30.980
You may be familiar with many McDonald's.

107
00:07:30.980 --> 00:07:33.950
Maybe most of them these days have two windows.

108
00:07:34.640 --> 00:07:40.610
They have the first window where you order the food and you pay them, and then they have the second

109
00:07:40.610 --> 00:07:43.100
window where you where they give you the food.

110
00:07:43.160 --> 00:07:43.550
Right?

111
00:07:44.030 --> 00:07:51.350
Well, let's call the first window the input window, and let's call the second window the output window

112
00:07:51.350 --> 00:07:52.580
where they give you the food.

113
00:07:52.640 --> 00:08:02.480
OK, now let's also imagine that there is a McDonald's that has a giant electronic billboard on its

114
00:08:02.480 --> 00:08:03.020
roof.

115
00:08:03.680 --> 00:08:07.250
And this billboard is capable of displaying messages.

116
00:08:07.820 --> 00:08:16.160
And one of the things that you can pay this McDonald's to do besides cook food for you is to display

117
00:08:16.160 --> 00:08:17.540
messages on that.

118
00:08:17.650 --> 00:08:25.360
Billboard, so if you were to go to the drive thru of this McDonald's and pull up to the first window

119
00:08:25.360 --> 00:08:33.190
and you told them, I want you to display a message like Happy Birthday on your display board and you

120
00:08:33.190 --> 00:08:38.500
pay them to do that in this particular case, and that's the only thing you're paying for.

121
00:08:39.010 --> 00:08:45.070
They're not going to tell you to pull up to the second window to receive your meal because you're not

122
00:08:45.070 --> 00:08:46.540
ordering any meal.

123
00:08:46.960 --> 00:08:51.310
All you're doing is simply paying for them to print something on the screen.

124
00:08:51.340 --> 00:08:51.820
OK?

125
00:08:52.570 --> 00:08:59.890
If they're not giving you anything at the second window, you can imagine that they're not giving you

126
00:08:59.890 --> 00:09:00.840
any output.

127
00:09:00.850 --> 00:09:03.250
They're not giving you any output.

128
00:09:03.430 --> 00:09:07.990
They are displaying a message on the screen, but they're not giving anything to you.

129
00:09:08.380 --> 00:09:08.810
OK.

130
00:09:09.190 --> 00:09:14.800
So this method is working very similarly to that.

131
00:09:15.310 --> 00:09:24.070
This method is displaying something on the screen, but it is not returning anything to the caller.

132
00:09:24.310 --> 00:09:28.450
Of this method, the thing or the person who calls this method?

133
00:09:29.020 --> 00:09:29.500
OK.

134
00:09:29.890 --> 00:09:34.150
So this is very similar to my analogy with McDonald's.

135
00:09:34.960 --> 00:09:41.650
Now, one key distinction here is that this method is not returning any output.

136
00:09:42.010 --> 00:09:44.620
It also is not taking any input.

137
00:09:44.770 --> 00:09:45.250
OK.

138
00:09:45.520 --> 00:09:50.260
So anything that goes between these parentheses here would be input.

139
00:09:50.260 --> 00:09:55.390
And in just a moment, we'll make another method where we will pass in some input.

140
00:09:55.660 --> 00:09:59.490
But I wanted this to be one of the simplest examples of a method.

141
00:09:59.500 --> 00:10:05.230
And so this is intentionally a method that returns no output and takes no input.

142
00:10:05.500 --> 00:10:12.220
Now, let's focus a little more on the general format of a method, though, so a method will have,

143
00:10:12.220 --> 00:10:15.220
at a minimum, a return type.

144
00:10:15.820 --> 00:10:23.620
It can be void, or it can be any of the data types that we were looking at in the previous lesson,

145
00:10:23.620 --> 00:10:26.020
even though we didn't look at every single data type there is.

146
00:10:26.020 --> 00:10:30.610
But in the previous lesson we did look at, you know, there are data types for strings and integers

147
00:10:30.610 --> 00:10:36.130
and longs and bytes and cares and all of those things as well as whole entire classes.

148
00:10:36.400 --> 00:10:40.750
And so all of those same data types would be valid here as well.

149
00:10:40.780 --> 00:10:44.590
In addition to the word void, meaning we don't return anything.

150
00:10:44.890 --> 00:10:45.310
OK.

151
00:10:45.910 --> 00:10:50.500
And that's why we wanted to make sure we learned about data types just a little bit before we jumped

152
00:10:50.500 --> 00:10:51.070
into here.

153
00:10:52.150 --> 00:10:59.110
So let's talk about the standard naming patterns for Java methods Java methods.

154
00:10:59.620 --> 00:11:03.730
Ideally, should have a verb in them.

155
00:11:03.970 --> 00:11:04.890
They don't have to.

156
00:11:04.900 --> 00:11:10.990
There's nothing that's going to force that to be the case, but I'm strongly recommending that method

157
00:11:10.990 --> 00:11:15.460
names should have verbs because methods do actions.

158
00:11:15.670 --> 00:11:16.930
They do something.

159
00:11:16.960 --> 00:11:17.440
OK?

160
00:11:17.770 --> 00:11:18.880
They're not nouns.

161
00:11:18.880 --> 00:11:22.350
They actually do some function, right?

162
00:11:22.360 --> 00:11:23.890
They they do an action.

163
00:11:23.890 --> 00:11:28.270
So ideally they should always have a verb in them.

164
00:11:28.690 --> 00:11:30.990
So in this case, say hello.

165
00:11:31.000 --> 00:11:32.770
The word say is a verb.

166
00:11:33.010 --> 00:11:36.580
Methods start with a lowercase.

167
00:11:37.210 --> 00:11:41.320
Again, this is simply a standard convention of Java.

168
00:11:41.470 --> 00:11:43.480
It is not a hard, fast rule.

169
00:11:43.670 --> 00:11:48.940
There's nothing that will stop you from using all uppercase or starting with an uppercase, but that

170
00:11:48.940 --> 00:11:52.810
is not the standard way that Java code is written.

171
00:11:53.320 --> 00:11:56.310
And so I would recommend that you stick with these standards.

172
00:11:56.320 --> 00:12:01.960
And then the the other naming rules that we've already talked about, like you can't start with a number,

173
00:12:01.960 --> 00:12:06.430
but you can have numbers in the middle or at the end and underscores and all of that, all the rest

174
00:12:06.430 --> 00:12:08.890
of those rules are generally about the same.

175
00:12:09.370 --> 00:12:16.900
OK, then a method name must always be followed by parentheses, just as I have here.

176
00:12:17.200 --> 00:12:19.530
That's a big part of what makes it a method.

177
00:12:19.540 --> 00:12:23.620
In fact, if you don't have these, it's an error.

178
00:12:24.160 --> 00:12:24.640
OK?

179
00:12:24.790 --> 00:12:28.420
So you have to have the parentheses.

180
00:12:28.960 --> 00:12:37.120
Now, technically, the I.D is allowing me to have space between the method name and the parentheses,

181
00:12:37.330 --> 00:12:39.730
but I would strongly recommend don't do that.

182
00:12:39.730 --> 00:12:44.560
And in fact, I don't think I've ever seen any code actually do that in Java, so I would stay away

183
00:12:44.560 --> 00:12:45.070
from that.

184
00:12:45.670 --> 00:12:47.380
But technically it is permitting it.

185
00:12:47.920 --> 00:12:48.310
All right.

186
00:12:48.700 --> 00:12:53.290
And then the next significant thing would be the opening curly brace.

187
00:12:53.300 --> 00:12:58.840
So just like we have the opening curly brace for a class, we have an opening curly brace for the method

188
00:12:59.200 --> 00:13:01.580
and that just tells the Java system.

189
00:13:01.600 --> 00:13:09.250
Here comes the beginning of the body of our method, and this line here would be in the body of this

190
00:13:09.250 --> 00:13:09.730
method.

191
00:13:10.030 --> 00:13:17.200
And then when we're done with our method, we have a closing brace as well, just like a class.

192
00:13:17.540 --> 00:13:23.450
Notice, by the way, that intelligence and all modern ideas for this matter, if you put your cursor

193
00:13:23.450 --> 00:13:31.100
right at a an opening or closing curly brace, the idea will highlight that curly brace and it will

194
00:13:31.100 --> 00:13:35.360
also highlight the corresponding closing curly brace.

195
00:13:35.600 --> 00:13:41.360
And that's just a nice convenience to let you know where really is the end of this method or in the

196
00:13:41.360 --> 00:13:44.810
case of the class, where's the end of that class right down there?

197
00:13:44.840 --> 00:13:45.230
OK.

198
00:13:46.280 --> 00:13:52.550
And then the space that I have here is not technically required, but again, I like to put that space

199
00:13:52.550 --> 00:13:53.810
there for readability.

200
00:13:54.140 --> 00:13:58.250
So these are just standards that you will hopefully get used to.

201
00:13:59.510 --> 00:14:00.020
All right.

202
00:14:00.590 --> 00:14:06.290
And then inside of the method, we've got a what's called a statement, you can think of it like a sentence

203
00:14:06.290 --> 00:14:07.100
or a command.

204
00:14:07.430 --> 00:14:14.210
OK, so we're we're commanding the Java system in this case to print a line of text and we're ending

205
00:14:14.210 --> 00:14:21.080
it with a semicolon because statements and declarations must be ended with semicolons.

206
00:14:22.190 --> 00:14:22.520
All right.

207
00:14:22.530 --> 00:14:25.790
So now let's move on to another method.

208
00:14:26.540 --> 00:14:28.670
Let's make a very similar one.

209
00:14:29.420 --> 00:14:29.710
I don't know.

210
00:14:29.780 --> 00:14:30.710
We'll start with one.

211
00:14:30.710 --> 00:14:31.550
That's Floyd.

212
00:14:33.780 --> 00:14:36.090
Say something.

213
00:14:37.020 --> 00:14:39.900
But this one, this method will take an input.

214
00:14:40.320 --> 00:14:45.870
So let's have it take input of some text that we wanted to say on the screen.

215
00:14:45.900 --> 00:14:49.530
OK, so since it's text, it's going to be of type string.

216
00:14:50.730 --> 00:14:57.510
And then I need to name a variable here that I will use to refer to the text that we want to print later

217
00:14:57.510 --> 00:14:59.100
on in the body of the method.

218
00:14:59.130 --> 00:15:01.200
I'm just going to call it something.

219
00:15:02.370 --> 00:15:03.810
I could name this pretty much anything.

220
00:15:03.810 --> 00:15:08.430
I could call it text or message.

221
00:15:09.540 --> 00:15:09.900
OK.

222
00:15:10.140 --> 00:15:10.830
It doesn't really matter.

223
00:15:10.830 --> 00:15:12.060
I guess I'll leave it at message.

224
00:15:12.420 --> 00:15:12.810
All right.

225
00:15:12.980 --> 00:15:16.180
And then I need to close that parentheses space.

226
00:15:16.680 --> 00:15:19.050
And then opening and closing curly braces.

227
00:15:19.080 --> 00:15:26.130
Now, notice the I.D. I typed just the opening curly brace, but the I.D. added in the closing curly

228
00:15:26.130 --> 00:15:30.780
brace for me automatically and then put my cursor right in between those two.

229
00:15:30.960 --> 00:15:33.330
And it's basically waiting for me to hit return.

230
00:15:34.410 --> 00:15:38.460
And then it puts the cursor right, indented where I want to be.

231
00:15:38.670 --> 00:15:39.870
That's another thing as well.

232
00:15:40.020 --> 00:15:42.330
Notice the indentation here now.

233
00:15:42.330 --> 00:15:44.040
The indentation doesn't matter.

234
00:15:44.040 --> 00:15:49.360
Whitespace like all the spaces and everything, for the most part, don't really matter in Java.

235
00:15:49.380 --> 00:15:55.640
These indentations are really for humans to be able to read the code a little more clearly.

236
00:15:55.650 --> 00:15:59.820
If every line of code was at the same level of indentation.

237
00:16:00.030 --> 00:16:02.730
It would be a little harder for our eyes to parse.

238
00:16:03.030 --> 00:16:06.750
Where do methods begin and end and what's inside of them?

239
00:16:06.930 --> 00:16:14.340
And so by convention, we tend to indent inside of any block of code.

240
00:16:14.550 --> 00:16:20.040
And basically, a block of code is any code that is within curly braces.

241
00:16:20.070 --> 00:16:20.550
OK.

242
00:16:20.640 --> 00:16:27.240
So any time you've got curly braces and then you have code in between those curly braces, you typically

243
00:16:27.240 --> 00:16:31.740
will want to indent and we'll see more of that as we go.

244
00:16:32.010 --> 00:16:32.390
All right.

245
00:16:32.400 --> 00:16:34.380
So let's make this do something.

246
00:16:34.380 --> 00:16:38.010
So I'm going to do another system now that print line.

247
00:16:38.010 --> 00:16:41.430
And this time we wanted to print whatever message is past thin.

248
00:16:41.850 --> 00:16:45.960
So the message that's passed in is called message.

249
00:16:45.960 --> 00:16:48.600
That's the name of the variable that we're using here.

250
00:16:48.630 --> 00:16:49.080
OK.

251
00:16:49.290 --> 00:16:57.480
And so if I want it to print whatever was passed in here, then I will refer back to that variable name

252
00:16:57.750 --> 00:16:58.830
here as well.

253
00:16:58.950 --> 00:17:07.650
Now, notice this time because we're not printing a static string like, hello, we're printing whatever

254
00:17:07.650 --> 00:17:09.540
is passed into this method.

255
00:17:09.900 --> 00:17:12.150
I don't use quotation marks now.

256
00:17:12.360 --> 00:17:17.250
I can't use quotation marks, in fact, because we're using this as a variable.

257
00:17:17.250 --> 00:17:18.670
So we don't want to.

258
00:17:19.020 --> 00:17:23.310
We don't want it to quote the word message literally, right?

259
00:17:23.340 --> 00:17:30.810
We want it to interpret whatever message or words or text or are referenced by this variable and then

260
00:17:30.810 --> 00:17:31.680
print that.

261
00:17:31.680 --> 00:17:34.350
And let's see an example of how to use that.

262
00:17:34.890 --> 00:17:42.240
So if we come down here, we can say p one dot say something.

263
00:17:45.270 --> 00:17:48.900
My groovy message.

264
00:17:49.350 --> 00:17:59.790
Now notice down here I am putting the text that I want to pass into this method in quotation marks.

265
00:17:59.970 --> 00:18:02.070
I'm telling this method.

266
00:18:02.250 --> 00:18:07.650
I want you to say literally these words, OK.

267
00:18:08.040 --> 00:18:16.590
And what's happening here is a reference to this text is being stored in this variable called message

268
00:18:17.100 --> 00:18:21.210
so that I can refer to it within the body of my method.

269
00:18:21.510 --> 00:18:21.990
OK.

270
00:18:22.500 --> 00:18:24.150
I want to make this overly complicated.

271
00:18:24.270 --> 00:18:32.760
So basically, just say that a little more simplistically, this text gets stored in this variable so

272
00:18:32.760 --> 00:18:37.410
that I can use it, and I could call this method multiple times also.

273
00:18:39.840 --> 00:18:45.000
Here's something else to say, and then I can run this.

274
00:18:45.750 --> 00:18:47.460
OK, so we get hello.

275
00:18:47.700 --> 00:18:51.480
Then we get my groovy message and then we get here's something else to say.

276
00:18:52.230 --> 00:18:54.960
So hopefully that that makes good sense to you.

277
00:18:56.070 --> 00:18:59.310
OK, so now let's make another method.

278
00:18:59.670 --> 00:19:04.830
Let's make a method that returns some output, and I'm going to give myself a little room here.

279
00:19:04.830 --> 00:19:08.130
I'm going to close the little output window there for a moment.

280
00:19:09.430 --> 00:19:24.640
OK, so let's say that the person class has a field called middle name, and I'm going to initialize

281
00:19:24.640 --> 00:19:27.580
this for right now, just for convenience sake.

282
00:19:31.870 --> 00:19:32.260
OK.

283
00:19:34.130 --> 00:19:41.810
And then let's say that we want a method that can return the middle initial.

284
00:19:43.930 --> 00:19:48.460
So and let's say that the middle initial should be a character.

285
00:19:48.670 --> 00:19:56.290
OK, so we're saying we want a method that can return a character of the middle initial of the middle

286
00:19:56.290 --> 00:19:56.710
name.

287
00:19:56.740 --> 00:19:57.100
OK.

288
00:19:57.130 --> 00:19:58.930
Just the initials of the middle name.

289
00:19:59.230 --> 00:20:07.150
So then the next bit of this method is whatever the return type is, which in this case, I just said

290
00:20:07.150 --> 00:20:11.620
we want the middle initial and we want to model that middle initial as a character.

291
00:20:11.620 --> 00:20:20.740
So then I would say that the return type for this method is is of type, care, KTAR, and then I need

292
00:20:20.740 --> 00:20:22.750
to give a name to this method.

293
00:20:22.930 --> 00:20:30.340
And since the purpose of this method is to return a middle initial, I'm going to call this method get

294
00:20:31.090 --> 00:20:33.820
middle initial.

295
00:20:34.990 --> 00:20:41.770
OK, so notice, I said that methods really should have a verb in their name, and so my verb is get.

296
00:20:42.160 --> 00:20:49.660
OK, get middle initial that that lets the reader of this code understand pretty intuitively what this

297
00:20:49.660 --> 00:20:50.430
method does.

298
00:20:50.440 --> 00:20:54.580
It gets a middle initial as opposed to naming this method.

299
00:20:56.350 --> 00:20:57.340
Middle initial.

300
00:20:57.400 --> 00:20:58.060
Well, OK.

301
00:20:58.060 --> 00:20:59.220
What about a middle initial?

302
00:20:59.230 --> 00:21:00.180
What are we doing with it?

303
00:21:00.190 --> 00:21:01.750
Are we setting it, getting it?

304
00:21:01.750 --> 00:21:02.540
Guessing it?

305
00:21:02.560 --> 00:21:03.550
What are we doing with it?

306
00:21:03.880 --> 00:21:12.640
OK, so we'll call it get middle initial and it doesn't need to take any input because it'll just work

307
00:21:12.640 --> 00:21:17.320
off of the data that is already contained within the object.

308
00:21:18.250 --> 00:21:22.990
So in that case, I can just use two parentheses with nothing in the middle.

309
00:21:23.530 --> 00:21:29.470
And then I need an opening curly brace and then I get a closing one automatically and then I can hit

310
00:21:29.470 --> 00:21:32.530
return and I can start doing something here.

311
00:21:33.040 --> 00:21:33.380
All right.

312
00:21:33.400 --> 00:21:37.960
So purpose of this lesson isn't to teach you everything you can do with strings and characters, but

313
00:21:37.960 --> 00:21:41.110
I'm just going to show you a quick example here of how I can do this.

314
00:21:41.110 --> 00:21:48.520
So in this case, now I need to use a special keyword if I want to return some data from my method.

315
00:21:48.730 --> 00:21:55.450
Then I need to use the special keyword return and then I need to tell it what to return.

316
00:21:56.080 --> 00:22:03.280
OK, now obviously what I want to return is just the first character of the middle name string.

317
00:22:03.400 --> 00:22:10.600
OK, this middle name string here and the way I can do that is to reference the middle name first.

318
00:22:11.230 --> 00:22:14.740
So middle name is a string string is a class.

319
00:22:15.130 --> 00:22:20.470
The string class has a whole lot of methods on it for doing all kinds of convenient things.

320
00:22:20.740 --> 00:22:23.080
And so and I just happen to know that.

321
00:22:23.380 --> 00:22:30.640
So I'm going to look for some of the methods that are on this class string.

322
00:22:30.820 --> 00:22:35.350
And one of the methods that's on it is a method called care at.

323
00:22:35.590 --> 00:22:38.670
And I know that I said methods should have a verb.

324
00:22:38.680 --> 00:22:44.440
And here's an example of a method that was made by the creators of Java that has no verb care at.

325
00:22:44.950 --> 00:22:45.670
What are you going to do?

326
00:22:47.830 --> 00:22:50.290
You still should have a verb in your methods.

327
00:22:50.770 --> 00:22:53.710
Don't do as they do in this particular case.

328
00:22:54.100 --> 00:22:54.520
All right.

329
00:22:54.880 --> 00:23:01.300
Care at and what this wants me to tell it is the index within the string of the character that I want

330
00:23:01.300 --> 00:23:01.870
to grab.

331
00:23:02.200 --> 00:23:05.800
And all that means is like, Well, which character do I want to grab out of here?

332
00:23:06.040 --> 00:23:12.850
I want the first character and the first character in terms of Java programming here as an index would

333
00:23:12.850 --> 00:23:14.680
be the zero with character.

334
00:23:14.680 --> 00:23:19.900
And that's because in a lot of programming, counting and numbers and indexes and things start with

335
00:23:19.900 --> 00:23:25.090
zero zero is oftentimes the first number in a lot of programming.

336
00:23:25.300 --> 00:23:33.010
And so if I pass in a zero here as the input to this method and then close that with a semicolon, I

337
00:23:33.010 --> 00:23:42.580
am telling the care at method to give me the first the zero with or the first character of the middle

338
00:23:42.580 --> 00:23:46.810
name string, which would be this C right here.

339
00:23:47.080 --> 00:23:47.500
OK.

340
00:23:47.530 --> 00:23:55.300
Return that, and then I can call this method and see if that's working.

341
00:23:56.530 --> 00:23:57.730
So let's see.

342
00:23:57.730 --> 00:24:00.940
I can do a print line.

343
00:24:02.870 --> 00:24:09.770
And I will simply refer to this method now, here's an interesting thing that you haven't seen yet so

344
00:24:09.770 --> 00:24:19.520
far, you've seen things like print line print, a constant string, we've passed in a string variable.

345
00:24:20.150 --> 00:24:26.990
Now we will pass in down here, a method itself and in here we'll do it.

346
00:24:26.990 --> 00:24:34.670
Just like this will call p one dot get middle initial just like that.

347
00:24:35.180 --> 00:24:46.190
So you can pass in a method into another method as long as whatever comes out of that is valid.

348
00:24:46.430 --> 00:24:53.780
In other words, the print line method can take as input a few different forms of text, and as long

349
00:24:53.780 --> 00:25:00.110
as the method you're calling is capable of returning one of those forms of text that the that the print

350
00:25:00.110 --> 00:25:02.600
line method accepts, it's all good.

351
00:25:02.940 --> 00:25:09.140
OK, it's equivalent to just returning that text or whatever that input type is directly.

352
00:25:10.350 --> 00:25:10.710
All right.

353
00:25:10.950 --> 00:25:12.630
So let's run this.

354
00:25:15.950 --> 00:25:16.820
And there we go.

355
00:25:17.240 --> 00:25:19.790
We have just an uppercase C.

356
00:25:23.610 --> 00:25:31.500
All right, now, let's look at a method that takes both input and output.

357
00:25:31.620 --> 00:25:36.510
I'm going to make a method that won't really make a lot of sense for a person class, just for lack

358
00:25:36.510 --> 00:25:37.800
of imagination here.

359
00:25:38.160 --> 00:25:45.810
Let's make a method that can add two numbers together and then return the sum of those numbers, which

360
00:25:45.810 --> 00:25:49.320
will also let us take a look at methods that take more than one input.

361
00:25:49.890 --> 00:26:00.630
OK, so let's make a method that can take two integers specifically and return an integer so it returns

362
00:26:00.630 --> 00:26:01.560
an integer, right?

363
00:26:01.770 --> 00:26:04.890
So then we're going to say that the return type is Ent..

364
00:26:06.300 --> 00:26:14.460
And then this method can add two numbers, so we can just call this method add it's a verb, and now

365
00:26:14.460 --> 00:26:17.850
we need to specify the input types.

366
00:26:18.270 --> 00:26:24.180
So just like we did up here, we first had to specify what type of data we're allowing to input, followed

367
00:26:24.180 --> 00:26:27.420
by a name for the variable that we're going to use to refer to it.

368
00:26:27.660 --> 00:26:30.930
So we're going to allow this to input an integer.

369
00:26:30.930 --> 00:26:36.930
So we'll say int space and then this method is going to take two numbers.

370
00:26:37.110 --> 00:26:42.120
So I'm just going to call the variable this first variable or this first input num one.

371
00:26:42.300 --> 00:26:44.160
Now here's something you haven't seen.

372
00:26:44.340 --> 00:26:49.170
How do you allow a method to accept multiple inputs?

373
00:26:49.530 --> 00:26:52.070
Well, you already have all the building blocks you need.

374
00:26:52.080 --> 00:26:54.570
The only thing you need to know is that you need a comma.

375
00:26:55.050 --> 00:26:55.500
OK.

376
00:26:55.620 --> 00:27:02.640
So with a comma, we can specify additional inputs and then we're going to have a second number that

377
00:27:02.640 --> 00:27:03.210
we can take.

378
00:27:03.220 --> 00:27:05.010
And that's also going to be an integer.

379
00:27:05.020 --> 00:27:10.350
So we'll see again and space and another name for the variable.

380
00:27:10.560 --> 00:27:14.970
And in this case, we'll call it NUM two, and that's all we want.

381
00:27:15.270 --> 00:27:22.230
So then I will close that and then I'll do a space and then my curly braces and then hit return.

382
00:27:22.740 --> 00:27:28.530
OK, now I want to return the sum of NUM one and number two.

383
00:27:28.740 --> 00:27:33.510
So I'm going to first use the keyword return space.

384
00:27:33.750 --> 00:27:36.810
And now I can do math on variables.

385
00:27:37.110 --> 00:27:39.510
I can especially do simple math on variables.

386
00:27:39.510 --> 00:27:44.640
So this will be easy and we'll learn more about this in a another lesson on numbers and stuff, but

387
00:27:45.000 --> 00:27:46.710
we'll get a little sneak preview here.

388
00:27:47.070 --> 00:27:56.520
NUM one plus NUM two and then semicolon to close this statement.

389
00:27:56.730 --> 00:27:59.160
The space here is not necessary.

390
00:27:59.190 --> 00:28:02.880
I just have it here for readability because I think what?

391
00:28:02.880 --> 00:28:08.460
The space looks a little easier for my eyes to pass then without the space.

392
00:28:09.030 --> 00:28:09.480
All right.

393
00:28:09.780 --> 00:28:11.980
And now we can run.

394
00:28:12.300 --> 00:28:13.350
Well, we can use.

395
00:28:13.350 --> 00:28:15.480
We can call this add method.

396
00:28:15.630 --> 00:28:17.370
So let's see here.

397
00:28:17.370 --> 00:28:18.300
We'll do.

398
00:28:19.320 --> 00:28:28.560
We'll do another system that out that print line and we can call P1 dot add and add two numbers five

399
00:28:28.560 --> 00:28:31.620
comma three, just like that.

400
00:28:31.830 --> 00:28:33.360
And then let's run this.

401
00:28:34.710 --> 00:28:37.920
OK, and now we get that on the last line.

402
00:28:37.950 --> 00:28:38.490
Eight.

403
00:28:38.970 --> 00:28:40.500
So we know that that worked.

404
00:28:41.190 --> 00:28:44.430
OK, before we wrap up this lesson.

405
00:28:44.670 --> 00:28:49.860
I want to clarify one or two points earlier in this lesson.

406
00:28:49.950 --> 00:29:00.210
You may have understood that I was saying that we were passing in this get middle initial method into

407
00:29:00.210 --> 00:29:05.490
the print line method here that is not technically accurate.

408
00:29:05.610 --> 00:29:13.860
What we are actually doing is we are calling the get middle initial method and then it is returning

409
00:29:13.860 --> 00:29:21.000
a character which in this case would be the first character of this string, which is a C.

410
00:29:21.150 --> 00:29:24.240
So it's returning a character of C here.

411
00:29:24.360 --> 00:29:30.480
And then it is that character C that is being passed into the print line method.

412
00:29:30.750 --> 00:29:39.300
So in other words, making this call P1 get middle initial would be somewhat equivalent to.

413
00:29:42.070 --> 00:29:42.610
That.

414
00:29:43.620 --> 00:29:44.100
OK.

415
00:29:44.370 --> 00:29:47.640
That is effectively what's being what's what's happening there.

416
00:29:47.970 --> 00:29:49.290
That's a little bit different.

417
00:29:50.510 --> 00:29:59.690
From saying that we are actually passing this method itself into this method, that's not quite what

418
00:29:59.690 --> 00:30:04.550
we're doing, we're passing the output of this method into this method.

419
00:30:04.940 --> 00:30:05.390
OK.

420
00:30:05.750 --> 00:30:11.660
One other thing I want to point out, since you have learned about variables is another way that we

421
00:30:11.660 --> 00:30:12.260
could have done.

422
00:30:12.260 --> 00:30:17.060
This would have been to simply capture the output of this method first.

423
00:30:17.060 --> 00:30:22.070
And one way that we could do that is by introducing a variable.

424
00:30:22.070 --> 00:30:22.820
So we could.

425
00:30:23.060 --> 00:30:28.820
Yeah, I'm going to just use an I.D. keyboard shortcut here to introduce a variable.

426
00:30:31.040 --> 00:30:31.400
OK.

427
00:30:31.820 --> 00:30:39.770
So what I just did there was we're still calling P1 to get middle initial, but now we're capturing

428
00:30:39.770 --> 00:30:44.900
the output of this call, which is the letter C, a character C.

429
00:30:45.170 --> 00:30:50.600
We're capturing that C in this little variable here called middle initial.

430
00:30:50.750 --> 00:30:53.030
And again, I could call this variable anything.

431
00:30:53.030 --> 00:30:59.150
The ID is smart enough to know that if I have a method called get middle initial, that a good name

432
00:30:59.150 --> 00:31:05.000
for the variable might just be the word middle initial with the M lowercase and to remove the word,

433
00:31:05.000 --> 00:31:07.400
get the reason it knew to remove the word.

434
00:31:07.400 --> 00:31:13.670
Get, by the way, is because get and set are very common parts of method names.

435
00:31:14.000 --> 00:31:18.830
And so it understood if you've got a method that starts with the word, get whatever it is that it gets

436
00:31:18.830 --> 00:31:21.200
is probably the the rest of the method name.

437
00:31:21.200 --> 00:31:25.130
I'll just remove the word get and then put a lowercase on the first letter.

438
00:31:25.460 --> 00:31:27.230
So that's how it came up with that name.

439
00:31:27.230 --> 00:31:29.690
But I could have I could have named it anything.

440
00:31:29.840 --> 00:31:36.050
So we're capturing the first letter of the middle initial C in this variable, and then we're using

441
00:31:36.050 --> 00:31:40.730
that variable here to pass in what we want to the print line.

442
00:31:40.970 --> 00:31:47.960
OK, so this is equivalent to the only reason I didn't do this initially was because it's an extra line

443
00:31:47.960 --> 00:31:50.570
of code and a lot of programmers are a little bit lazy.

444
00:31:50.600 --> 00:31:54.920
There sometimes are good reasons why I might have wanted to capture this, though, if I wasn't sure

445
00:31:54.920 --> 00:31:59.110
what was going on or if I wasn't sure what was going to be in this variable.

446
00:31:59.630 --> 00:32:04.850
Or rather, if I wasn't sure what was coming out of this method call, I might have captured it first

447
00:32:04.850 --> 00:32:08.780
so that I could inspect it while the program was running something like that.

448
00:32:08.930 --> 00:32:10.730
OK, so this is equivalent.

449
00:32:11.120 --> 00:32:18.080
And then I could put this back the way it was by just getting rid of that variable and just have the

450
00:32:18.080 --> 00:32:22.180
method call inside of the parentheses.

451
00:32:22.190 --> 00:32:26.720
OK, but I'm not passing this method into this method.

452
00:32:26.930 --> 00:32:31.100
I'm passing the output of this method into this method.

453
00:32:31.130 --> 00:32:33.320
OK, so small clarification.

454
00:32:33.320 --> 00:32:34.430
I wanted to point out there.

455
00:32:35.510 --> 00:32:38.120
Same thing here on Line twenty eight.

456
00:32:38.780 --> 00:32:41.450
OK, so we're going to go out and wrap this lesson up.

457
00:32:41.450 --> 00:32:42.390
We've covered a lot.

458
00:32:42.410 --> 00:32:43.160
I know that.

459
00:32:43.400 --> 00:32:50.060
And in the next lesson, we will get into static methods since we didn't get a chance to get to that

460
00:32:50.060 --> 00:32:51.560
yet in this lesson.

461
00:32:51.570 --> 00:32:53.180
So I will see you in the next one.
