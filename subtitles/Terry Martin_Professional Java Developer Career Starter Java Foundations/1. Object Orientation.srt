1
00:00:00,360 --> 00:00:03,690
In this lesson, we're going to talk about what Java is all about.

2
00:00:04,650 --> 00:00:08,730
Java is called an object oriented programming language.

3
00:00:09,150 --> 00:00:16,680
Basically, what that means is that Java is a language that was designed to make object oriented programming

4
00:00:16,680 --> 00:00:17,370
easier.

5
00:00:17,730 --> 00:00:20,610
Now what is object orientation or object oriented programming?

6
00:00:20,970 --> 00:00:29,640
Basically, object orientation is a way of programming where we try to model either the real world or

7
00:00:29,670 --> 00:00:35,220
concepts within whatever problem we're trying to write software for.

8
00:00:35,280 --> 00:00:37,570
I understand that may not mean much to you.

9
00:00:37,590 --> 00:00:42,840
So let me just go ahead and show you some code, and maybe this will help to make more sense.

10
00:00:42,930 --> 00:00:49,530
So let's say that we want to write an application that allows us to enter information into a computer

11
00:00:49,530 --> 00:00:52,740
about people, basically a people database, if you will.

12
00:00:52,950 --> 00:00:56,730
So you can enter their first name, last name, maybe date of birth, maybe you have other information

13
00:00:56,730 --> 00:00:57,750
about people as well.

14
00:00:58,170 --> 00:01:04,020
So if we wanted to write that kind of application in Java in an object oriented way, it might make

15
00:01:04,020 --> 00:01:10,500
sense for us to model some of the concepts that we recognize exist within this problem domain that we

16
00:01:10,500 --> 00:01:11,790
are writing code for.

17
00:01:11,940 --> 00:01:17,040
In this case, the problem domain is how do we store and retrieve information about people?

18
00:01:17,850 --> 00:01:20,130
So here's what I would do in that case.

19
00:01:20,370 --> 00:01:25,080
Turning to the idea here, I would start off by creating what's called a class.

20
00:01:25,350 --> 00:01:29,640
Now we saw a class here in our Hello World program, and I didn't really explain much about it, but

21
00:01:29,640 --> 00:01:31,200
I'm going to create another one now.

22
00:01:31,200 --> 00:01:34,230
And like I said, maybe this will start to get a little clearer to you.

23
00:01:34,260 --> 00:01:35,220
So what I'm going to do?

24
00:01:35,370 --> 00:01:38,140
You don't need to follow along with me in this particular lesson.

25
00:01:38,160 --> 00:01:41,430
I'm just going to give you a quick example of object orientation.

26
00:01:41,850 --> 00:01:48,300
OK, so I'm going to open up the project browser here, and I'm going to create some new files.

27
00:01:48,570 --> 00:01:52,560
I guess I'm going to go ahead and do this somewhat similarly to how I would do it in real life.

28
00:01:52,560 --> 00:01:56,100
So I'm going to go a little fast, but hopefully you'll see what I'm doing here now.

29
00:01:56,130 --> 00:01:56,760
I'll explain it.

30
00:01:56,970 --> 00:02:02,220
OK, so first thing I'm going to do is to create a package, and that's just a folder where I can group

31
00:02:02,220 --> 00:02:09,270
up or organize my classes and my my code, and we'll get into why I would want to do that in a later

32
00:02:09,270 --> 00:02:09,630
lesson.

33
00:02:09,630 --> 00:02:13,230
But let's see, and I'd probably call this model.

34
00:02:13,890 --> 00:02:19,410
And then I'd create a class and I'd create a class for the concept of person because my program is all

35
00:02:19,410 --> 00:02:21,990
about me being able to enter information about people.

36
00:02:22,320 --> 00:02:23,190
So I'd create a class.

37
00:02:23,190 --> 00:02:30,300
I'd call it person and then I'd identify what properties or attributes of a person I might want to track

38
00:02:30,300 --> 00:02:31,410
with my program.

39
00:02:31,740 --> 00:02:38,730
So I'd probably want to track a person's first name and their last name.

40
00:02:40,460 --> 00:02:41,570
Their date of birth.

41
00:02:41,780 --> 00:02:48,730
Things of that sort you might want to track their gender or addresses is a very typical one, right?

42
00:02:48,800 --> 00:02:50,150
This is enough for right now.

43
00:02:50,420 --> 00:02:50,810
OK.

44
00:02:51,050 --> 00:02:54,680
And then I typically create a bunch of boilerplate code and boilerplate.

45
00:02:54,680 --> 00:03:00,620
Is this standard code that you almost always end up having in your program and it's so common that most

46
00:03:00,620 --> 00:03:02,510
ideas can generated for you.

47
00:03:02,750 --> 00:03:08,540
So I'd probably go through something like creating a constructor to let me in through all that information

48
00:03:09,050 --> 00:03:09,770
easily.

49
00:03:09,770 --> 00:03:15,800
And and then I'd also probably produce what are called getters and setters for all of these attributes,

50
00:03:15,800 --> 00:03:17,470
and I'm intentionally not explaining all of this.

51
00:03:17,480 --> 00:03:24,320
I just want you to kind of see, you know, a professional programmer doing fairly realistic ish type

52
00:03:24,500 --> 00:03:25,790
coding for a moment here.

53
00:03:25,790 --> 00:03:30,110
And then I'm going to backtrack and we'll break this down in and look at the bits and pieces of it.

54
00:03:30,410 --> 00:03:30,740
All right.

55
00:03:30,890 --> 00:03:33,800
So I have modeled a person here.

56
00:03:33,950 --> 00:03:40,130
I have said that I'm writing a program that lets me enter and retrieve information about people.

57
00:03:40,370 --> 00:03:46,310
And so I need a bit of Java code that lets me represent or model a person.

58
00:03:46,490 --> 00:03:51,710
And specifically, I want to model the idea that a person can have a first name or last name and a date

59
00:03:51,710 --> 00:03:52,160
of birth.

60
00:03:52,280 --> 00:03:55,250
OK, so that's what I'm doing here.

61
00:03:55,460 --> 00:04:02,450
I could model other concepts for other types of programs or if I had an expanded set of things that

62
00:04:02,450 --> 00:04:06,440
I might want to do with this program for attracting people or whatever, I can do that.

63
00:04:06,450 --> 00:04:07,400
So in fact, I will.

64
00:04:07,490 --> 00:04:10,250
Let's say that a person has an address, right?

65
00:04:10,280 --> 00:04:13,120
So I could model that as well.

66
00:04:13,130 --> 00:04:19,610
I could say a person has an address and I will call that an address.

67
00:04:19,640 --> 00:04:24,560
Now, this concept of an address, unlike the concepts of string and local date, string and local date

68
00:04:24,560 --> 00:04:27,020
are concepts that come with Java.

69
00:04:27,290 --> 00:04:33,740
But the concept of this address does not come with Java, so I would have to create the concept of an

70
00:04:33,740 --> 00:04:34,100
address.

71
00:04:34,100 --> 00:04:40,310
Just as Java doesn't come with the concept of a person I am creating, I'm defining what a person is

72
00:04:40,310 --> 00:04:41,420
for my purposes.

73
00:04:41,630 --> 00:04:47,090
If I want a person to have an address, I need to define what is an address for a person, and I can

74
00:04:47,090 --> 00:04:47,540
do that here.

75
00:04:47,660 --> 00:04:51,560
So right now, I'm telling Java that a person can have a first name or last name and date of birth,

76
00:04:51,740 --> 00:04:52,760
and they can have an address.

77
00:04:52,760 --> 00:04:54,740
But the idea is saying, I don't know what an address is.

78
00:04:54,740 --> 00:04:55,130
I knew it.

79
00:04:55,250 --> 00:05:00,530
I know what strings are for first name, and I know what a local data is for the date of birth, but

80
00:05:00,530 --> 00:05:03,770
I don't know what it addresses, so I'm going to teach it now what is an address?

81
00:05:03,920 --> 00:05:10,700
And I'm going to do that by letting the A.D. recognize that since I referred to a class or a concept

82
00:05:10,700 --> 00:05:14,960
that does not exist yet, it's going to give me the opportunity to create that class.

83
00:05:15,260 --> 00:05:20,210
And I can do that by using a keyboard shortcut here, and I will create the class called address.

84
00:05:20,210 --> 00:05:24,590
And yeah, I'll let it go into this model package, which is just the folder.

85
00:05:24,950 --> 00:05:30,860
OK, so now I it has created a the skeleton of a new class for me called address, and now I can define

86
00:05:31,010 --> 00:05:32,540
some attributes of an address.

87
00:05:33,110 --> 00:05:40,640
OK, so an address might have, I don't know, for lack of better terms here.

88
00:05:40,640 --> 00:05:42,800
I'm just going to say it might have an address one field.

89
00:05:43,250 --> 00:05:43,560
All right.

90
00:05:43,580 --> 00:05:48,890
And then we might have an address to field for like the apartment or whatever.

91
00:05:48,890 --> 00:05:52,400
And we might have, well, we will have a city.

92
00:05:53,030 --> 00:05:56,600
And I'm assuming we're in the U.S., U.S. or Canada.

93
00:05:57,230 --> 00:05:59,570
I'm just going to have a field called state.

94
00:05:59,780 --> 00:06:04,850
And yeah, since I'm just going to assume that all these people are in the U.S. for right now, I won't

95
00:06:04,850 --> 00:06:07,520
bother with a country, but I could put that in there as well.

96
00:06:07,940 --> 00:06:08,270
All right.

97
00:06:08,300 --> 00:06:11,420
And then I, yeah, I can do the same thing that he did before.

98
00:06:11,610 --> 00:06:17,780
I can generate a constructor for this class and I will generate getters and setters as well.

99
00:06:19,440 --> 00:06:19,830
All right.

100
00:06:20,730 --> 00:06:25,390
And then I'll go back to my person class, and now the read on address has gone away.

101
00:06:25,410 --> 00:06:29,970
And now I will want to add in the fact that I can get and sit and address again.

102
00:06:29,970 --> 00:06:32,520
I understand I haven't explained any of these things to you.

103
00:06:32,610 --> 00:06:33,090
That's OK.

104
00:06:33,090 --> 00:06:33,570
I will.

105
00:06:33,570 --> 00:06:34,020
I will.

106
00:06:34,230 --> 00:06:39,420
I just want you to get a sense for the tempo and the rhythm and and what it is that a professional developer

107
00:06:39,420 --> 00:06:39,900
might do.

108
00:06:40,230 --> 00:06:47,040
So, yeah, I'll I'll generate a I'll generate a veteran setter for my address field.

109
00:06:47,580 --> 00:06:48,420
All right, there we go.

110
00:06:49,110 --> 00:06:52,110
Typically, I wouldn't want those to be whips.

111
00:06:52,800 --> 00:06:58,830
Typically, I wouldn't want those to be in this location, though probably want those to be more towards

112
00:06:58,830 --> 00:07:01,350
the bottom of the of the file.

113
00:07:02,380 --> 00:07:03,190
And class.

114
00:07:03,760 --> 00:07:05,530
Yeah, that's that's a little better for me.

115
00:07:06,130 --> 00:07:11,170
Let's see what else might a person have that I might care about for the purposes of this application?

116
00:07:11,170 --> 00:07:11,740
I don't know.

117
00:07:12,910 --> 00:07:14,770
So a person could have a spouse.

118
00:07:15,280 --> 00:07:20,050
So here we get into a question of, OK, how do we model the spouse of a person?

119
00:07:20,290 --> 00:07:25,180
My object oriented brain automatically says, Well, a spouse is a person.

120
00:07:25,450 --> 00:07:31,720
And so my inclination would be to model a spouse as a person just like that.

121
00:07:31,960 --> 00:07:38,620
And now some of your brains may have just gone because you may have recognized that I'm getting a little

122
00:07:38,620 --> 00:07:41,680
recursive here if you're under if you know the meaning of that term, right?

123
00:07:42,010 --> 00:07:43,620
It's like inception, right?

124
00:07:43,720 --> 00:07:44,890
A dream within a dream.

125
00:07:44,920 --> 00:07:51,970
I have a person within a person and I'm I'm saying that the definition of a person contains a person.

126
00:07:52,210 --> 00:07:55,240
You can do that in an object oriented language like Java.

127
00:07:55,240 --> 00:07:59,380
And that's one of the many things that can make such a language so powerful.

128
00:07:59,410 --> 00:08:04,540
The idea that we can create new concepts, well, new concepts that are new to the language, right?

129
00:08:04,690 --> 00:08:08,920
You could almost say in a way, we're extending the language sort of the right kind of.

130
00:08:09,370 --> 00:08:15,520
So, yeah, we can we can create new concepts, and those concepts can be based on themselves to a certain

131
00:08:15,520 --> 00:08:17,680
degree, as I am doing right here.

132
00:08:17,950 --> 00:08:18,370
OK.

133
00:08:18,400 --> 00:08:25,630
So yeah, I just added a spouse to this person and the spouse is a person and I can do the same thing

134
00:08:25,630 --> 00:08:30,880
I did a minute ago, and I can create a getter and setter for the spouse.

135
00:08:31,240 --> 00:08:39,370
OK, so now that I have modeled a Oh, hold on, yeah, let's let's let's introduce maybe at least one

136
00:08:39,370 --> 00:08:40,570
more class here.

137
00:08:40,780 --> 00:08:43,360
A person can have a pet, right?

138
00:08:43,540 --> 00:08:43,890
Let's see.

139
00:08:43,900 --> 00:08:47,110
So what might be some good characteristics of a pet?

140
00:08:47,530 --> 00:08:49,840
Well, OK, let's do this.

141
00:08:53,510 --> 00:08:59,300
All right, so similarly to the address, I just referred to another concept that we haven't defined

142
00:08:59,300 --> 00:09:00,920
yet, just a pet.

143
00:09:01,070 --> 00:09:03,950
I'm going to get a little fancier here.

144
00:09:03,990 --> 00:09:09,710
You know, so let this just be like the sneak preview into what we will be learning down the road a

145
00:09:09,710 --> 00:09:10,490
little bit, OK?

146
00:09:10,510 --> 00:09:15,170
But hopefully this kind of what's your appetite for some of the power of what we can do with an object

147
00:09:15,170 --> 00:09:16,310
oriented language like Java?

148
00:09:16,400 --> 00:09:22,430
OK, so what I'm going to do here is I'm going to go ahead and tell the I.D., Yes, I want to create

149
00:09:22,610 --> 00:09:25,130
pet, and for now, I won't get overly fancy with it.

150
00:09:25,130 --> 00:09:27,080
So I'm going to go out and just create a class.

151
00:09:27,500 --> 00:09:28,670
And yeah, that's fine.

152
00:09:29,690 --> 00:09:34,100
Now what are some generic characteristics of a pet?

153
00:09:34,250 --> 00:09:36,230
They usually have a name, right?

154
00:09:36,650 --> 00:09:40,610
So I can say that, yes, a pet has a name.

155
00:09:40,820 --> 00:09:43,130
Is there anything else a pet can have a date of birth?

156
00:09:46,590 --> 00:09:48,900
Date of birth, and I don't know.

157
00:09:48,930 --> 00:09:55,530
I'm going to leave it at that for right now, for for that part, and again, I will generate a constructor

158
00:09:56,010 --> 00:10:01,800
for this and I'll generate some getters and setters as well.

159
00:10:02,810 --> 00:10:07,310
All right, now, one more kind of cool thing that we can do.

160
00:10:08,400 --> 00:10:09,600
I didn't say what kind of pet?

161
00:10:09,990 --> 00:10:10,350
Right?

162
00:10:10,800 --> 00:10:12,120
People have all kinds of pets.

163
00:10:12,600 --> 00:10:19,480
So let us say that, yes, we have this class for pet, but we want to get a little more specific with.

164
00:10:19,500 --> 00:10:20,520
Well, what kind of pet?

165
00:10:20,850 --> 00:10:26,760
So what we can do is we can create more classes and we can do something pretty cool here.

166
00:10:26,790 --> 00:10:35,640
Let's say that we want to be able to represent a dog so I can create a new class called dog.

167
00:10:35,640 --> 00:10:36,780
But I know what you're thinking.

168
00:10:36,780 --> 00:10:39,510
You're saying, Well, why did you create something called a pet?

169
00:10:39,520 --> 00:10:41,160
And now you're going to create something called a dog?

170
00:10:41,310 --> 00:10:48,360
I will show you why I did that, because I can tell Java that I want this concept of dog.

171
00:10:49,820 --> 00:10:57,650
To be a pet, in other words, I can say that a dog is a type of pet.

172
00:10:58,680 --> 00:11:02,430
By typing a line just like this public class dog extends pet.

173
00:11:02,520 --> 00:11:08,850
Now the idea and Java, in turn, is complaining because I am missing something that I need on the pet.

174
00:11:08,850 --> 00:11:12,030
If I'm going to do this and let me go back there real quick and just fix that.

175
00:11:12,070 --> 00:11:13,530
In fact, it already knows what the problem is.

176
00:11:13,680 --> 00:11:15,450
And it's the idea, not Java.

177
00:11:15,450 --> 00:11:18,810
The idea is offering to make it easy for me to fix that problem.

178
00:11:18,810 --> 00:11:19,590
Probably.

179
00:11:21,030 --> 00:11:21,730
Let's see here.

180
00:11:21,750 --> 00:11:23,580
So, yeah, let me let me fix that real quick.

181
00:11:23,850 --> 00:11:29,670
And what I need to do here is I need to generate one more constructor, one that doesn't have any inputs

182
00:11:29,670 --> 00:11:32,400
there, and I think that will make this happy.

183
00:11:33,540 --> 00:11:35,010
Let's see if I go back over here.

184
00:11:35,010 --> 00:11:36,180
Yep, yep, it's happy now.

185
00:11:36,210 --> 00:11:36,570
OK.

186
00:11:36,900 --> 00:11:38,880
Again, you'll understand all of this in time.

187
00:11:39,720 --> 00:11:43,920
So I'm saying that a dog is a type of pet.

188
00:11:44,970 --> 00:11:51,630
And what's cool is, I don't have to say that a dog has a name or date of birth because my concept of

189
00:11:51,630 --> 00:11:57,810
dog, my class dog, is going to inherit that fact from the pet itself.

190
00:11:57,900 --> 00:11:59,280
Oh, it still doesn't like something.

191
00:11:59,280 --> 00:12:00,540
What's it not liking their?

192
00:12:03,160 --> 00:12:03,620
I don't know.

193
00:12:04,360 --> 00:12:05,380
I'm not going to read about it right now.

194
00:12:05,620 --> 00:12:08,950
It might be the idea, just not being happy with me or something.

195
00:12:09,190 --> 00:12:15,670
Anyway, so yeah, dog extends pet and therefore Dog has a name and any date of birth.

196
00:12:15,820 --> 00:12:18,130
In other words, if I go back to dog.

197
00:12:19,360 --> 00:12:26,830
Dog will inherit the properties of pet because dog extends pet.

198
00:12:27,200 --> 00:12:27,610
OK.

199
00:12:27,760 --> 00:12:33,460
And so this is a powerful, powerful concept in object orientation, the concept of inheritance.

200
00:12:33,700 --> 00:12:39,610
One concept can inherit the attributes and behaviors, behaviors that we haven't talked about that yet.

201
00:12:39,790 --> 00:12:43,040
And behaviors of another concept.

202
00:12:43,090 --> 00:12:43,510
OK.

203
00:12:44,080 --> 00:12:49,910
And in Java concepts are classes and in many other, most other object oriented language as well.

204
00:12:49,930 --> 00:12:50,320
Really?

205
00:12:50,590 --> 00:12:52,720
OK, so we've got a dog now.

206
00:12:52,750 --> 00:13:00,190
Is there any attribute that might be unique to a dog that we'd want to actually capture in our definition

207
00:13:00,190 --> 00:13:01,480
of a dog in this class here?

208
00:13:01,630 --> 00:13:02,040
Let's see.

209
00:13:02,050 --> 00:13:02,650
So.

210
00:13:03,160 --> 00:13:09,340
So I can't think at the moment of any attributes that I care about in this discussion that are specific

211
00:13:09,340 --> 00:13:15,940
to a dog, but I can't think of behavior that is different between different types of pets, potentially.

212
00:13:16,090 --> 00:13:17,650
And so we can model behavior as well.

213
00:13:17,660 --> 00:13:20,330
So far, we've just been modeling attributes.

214
00:13:20,350 --> 00:13:25,270
You know, the fact that a person has a name, the fact that a dog has a name, the fact that a person

215
00:13:25,270 --> 00:13:28,120
can have an address and a date of birth, et cetera, et cetera.

216
00:13:28,360 --> 00:13:34,600
But we haven't talked about behaviors and behavior is the other big concept in object orientation.

217
00:13:34,630 --> 00:13:39,670
OK, so let's model some behaviors for a couple of pets.

218
00:13:39,880 --> 00:13:40,300
All right.

219
00:13:40,630 --> 00:13:47,410
So one behavior of a dog is the fact that it can bark, right?

220
00:13:47,890 --> 00:13:52,420
So we could create what is called a method.

221
00:13:54,380 --> 00:13:59,480
We won't return anything, and we'll have a method on here called bark, and this method will simply

222
00:13:59,690 --> 00:14:01,060
spit out on the screen.

223
00:14:01,070 --> 00:14:01,430
Ruff.

224
00:14:01,430 --> 00:14:01,790
Ruff.

225
00:14:02,570 --> 00:14:09,740
OK, so we'll do that system that out that print line and we'll say, Ruff, ruff.

226
00:14:11,740 --> 00:14:12,160
All right.

227
00:14:12,640 --> 00:14:14,470
So a dog can bark.

228
00:14:15,190 --> 00:14:18,130
So now let's go create a cat.

229
00:14:22,100 --> 00:14:22,610
Cat.

230
00:14:23,860 --> 00:14:25,690
And we're going to have it extend pet.

231
00:14:27,200 --> 00:14:33,620
And we're going to say that a cat can meow, meow.

232
00:14:35,860 --> 00:14:44,200
And when we tell a cat to meow, that will result in our program in the the words meow being printed

233
00:14:44,200 --> 00:14:44,830
on the screen.

234
00:14:44,980 --> 00:14:45,760
All right.

235
00:14:46,270 --> 00:14:48,040
OK, so I think you're getting the point.

236
00:14:48,190 --> 00:14:53,950
But now that we've modeled a person and a spouse and an address and all these things, what can we actually

237
00:14:53,950 --> 00:14:54,880
do with all of this?

238
00:14:55,120 --> 00:15:01,270
So here's what we're going to do for now, just to give you a little bit of an idea of how this maybe

239
00:15:01,270 --> 00:15:03,580
could be utilized to a certain degree.

240
00:15:03,790 --> 00:15:08,860
If we go back over to our hello world class, we're just going to use this because it's already here.

241
00:15:09,010 --> 00:15:11,680
We will now create a person or two.

242
00:15:12,040 --> 00:15:17,620
And the way we will do that is by creating what is called a variable, which is just a holding tank,

243
00:15:17,620 --> 00:15:20,600
something that can hold onto our objects.

244
00:15:20,640 --> 00:15:22,270
OK, so we can create objects.

245
00:15:22,570 --> 00:15:27,250
Objects are created from our classes, so we've just created several classes here.

246
00:15:27,490 --> 00:15:31,930
But these classes are really just a blueprint for how to make something.

247
00:15:32,140 --> 00:15:32,520
OK?

248
00:15:32,680 --> 00:15:37,690
Our person class is a blueprint for how to make a person and what a person can do.

249
00:15:37,930 --> 00:15:38,200
Right?

250
00:15:38,260 --> 00:15:43,990
The dog class is a blueprint for how a dog might behave and what it can do, what kind of information

251
00:15:43,990 --> 00:15:52,000
it can hold, etc. But we can make what are called instances of these things within our code so that

252
00:15:52,000 --> 00:15:53,200
we can actually use them.

253
00:15:53,230 --> 00:15:55,570
OK, so here's how we can do that.

254
00:15:55,840 --> 00:16:01,120
If I want to create a person, I must first tell Java that I want to hold on to something that is a

255
00:16:01,120 --> 00:16:05,410
person, and I will have to tell it that I am dealing with the class of person.

256
00:16:05,410 --> 00:16:06,820
So it had to kind of important stuff.

257
00:16:07,150 --> 00:16:08,740
You'll learn that later as well.

258
00:16:09,010 --> 00:16:12,070
So let's make a person and I don't know, let's say that I can name.

259
00:16:12,250 --> 00:16:17,770
In fact, I need to name this variable, this thing that's going to hold on to the person that I'm about

260
00:16:17,770 --> 00:16:18,460
to create.

261
00:16:18,640 --> 00:16:20,280
I can name it something now.

262
00:16:20,320 --> 00:16:22,140
I could name it generically like P. one.

263
00:16:22,360 --> 00:16:25,640
I'm not a big fan of using names like that if I don't have to.

264
00:16:25,660 --> 00:16:27,790
I usually prefer to do something a little better than that.

265
00:16:27,790 --> 00:16:28,360
But I don't know.

266
00:16:28,360 --> 00:16:30,970
For now, we'll say we're going to create a person called Tom.

267
00:16:31,510 --> 00:16:36,400
And so then I'll use this keyword new and I'm going to tell Java I want to create a new person.

268
00:16:36,670 --> 00:16:42,700
And I created this thing called a constructor, which allows me to initialize information about the

269
00:16:42,700 --> 00:16:44,170
new person that I am creating.

270
00:16:44,260 --> 00:16:46,540
You saw me generating things.

271
00:16:46,690 --> 00:16:49,450
One of the things that I generated was something called a constructor.

272
00:16:49,660 --> 00:16:51,970
You are now seeing me use that constructor.

273
00:16:52,090 --> 00:16:58,030
So I was basically just telling Java, whenever I create a person, I want to be forced essentially

274
00:16:58,210 --> 00:17:02,380
to have to specify in this case, their first name, their last name and date of birth.

275
00:17:02,650 --> 00:17:05,290
That's the only way that I can create a person.

276
00:17:05,380 --> 00:17:07,060
And so here I will do that.

277
00:17:07,210 --> 00:17:14,350
So I'm going to name them Tom Smith, and I will give him a date of birth.

278
00:17:16,680 --> 00:17:18,910
Of here, let me give myself a little more room.

279
00:17:19,230 --> 00:17:24,660
A date of birth of, I don't know, 1984.

280
00:17:24,990 --> 00:17:26,910
On June.

281
00:17:28,380 --> 00:17:31,110
15TH, just a random date.

282
00:17:31,860 --> 00:17:38,880
All right, so I have now created a person called Tom, and let's let's create another person.

283
00:17:41,220 --> 00:17:41,940
Janet.

284
00:17:43,290 --> 00:17:47,760
New person Janet Jackson.

285
00:17:47,940 --> 00:17:49,360
Oh yeah.

286
00:17:50,580 --> 00:17:54,300
Local date and maybe not the singer Janet Jackson.

287
00:17:54,630 --> 00:17:58,830
I wasn't thinking that necessarily because I don't know what her date of birth is.

288
00:17:58,840 --> 00:18:03,330
So this Janet Jackson will have been born in 1985.

289
00:18:04,830 --> 00:18:05,670
December.

290
00:18:07,270 --> 00:18:07,720
Third.

291
00:18:09,750 --> 00:18:11,070
All right, so there's Janet.

292
00:18:12,550 --> 00:18:14,620
And now I can get a little fancy.

293
00:18:15,040 --> 00:18:19,210
I want to say that Janet is Tom's spouse.

294
00:18:20,050 --> 00:18:25,240
I can do that, so I can I can say Tom, not set spouse.

295
00:18:25,390 --> 00:18:30,520
Now this set spouse is a method, and I haven't explained what methods are, but just know this is something

296
00:18:30,520 --> 00:18:32,980
that I generated when I created Tom.

297
00:18:32,980 --> 00:18:38,050
When I created a constructor which allowed me to create a Tom with the first name and last name and

298
00:18:38,050 --> 00:18:38,650
a date of birth.

299
00:18:38,860 --> 00:18:42,790
And after I created the constructor, I also created a bunch of getters and setters.

300
00:18:43,000 --> 00:18:46,570
And what that really did was it just generated things that I could call like.

301
00:18:46,570 --> 00:18:53,380
This thing here set spouse based on whatever attributes I was defining on my person class.

302
00:18:53,380 --> 00:18:55,840
So I have an attribute on the class called spouse.

303
00:18:56,170 --> 00:19:01,780
And so when I generated getters and setters, the ADP generated what's called a method.

304
00:19:01,780 --> 00:19:07,330
In fact, that generated two methods a method called set spouse and a method called get spouse.

305
00:19:07,540 --> 00:19:11,140
OK, so that generated all of this for me, so I can use that method now.

306
00:19:11,230 --> 00:19:17,260
And this method said spouse is wanting me to give it a person as an input.

307
00:19:17,380 --> 00:19:22,090
In other words, it's asking me, OK, you want to tell me who Tom's spouse is?

308
00:19:22,090 --> 00:19:23,650
So tell me who is Tom's spouse?

309
00:19:23,680 --> 00:19:26,740
That's what the ADP is asking me right now, essentially.

310
00:19:26,800 --> 00:19:31,450
So I'm going to tell it, Well, Tom, spouse, is this lady right here, Janet?

311
00:19:31,600 --> 00:19:35,890
And I tell it that by simply typing in this variable name here, Janet.

312
00:19:36,010 --> 00:19:39,940
So I created Janet Jackson, born at this time.

313
00:19:40,150 --> 00:19:45,850
And when I created her, I stored a reference to her something that I can refer to her with in this

314
00:19:45,850 --> 00:19:49,030
variable called Janet, which is a person.

315
00:19:49,210 --> 00:19:56,170
And now, when I refer back to Tom and I say I want to set Tom's spouse, I can say I want to set Tom's

316
00:19:56,170 --> 00:19:58,870
spouse to Janet, and that's what I just did right there.

317
00:19:59,280 --> 00:20:03,190
OK, then I can create Tom's pet.

318
00:20:03,610 --> 00:20:05,500
So let's create a dog.

319
00:20:07,550 --> 00:20:10,970
And I guess I'll have to tell it where to get dog from.

320
00:20:11,270 --> 00:20:13,130
And we'll name this dog, Fido.

321
00:20:14,390 --> 00:20:18,110
And so just like the person will create a new dog.

322
00:20:20,940 --> 00:20:26,430
Now, I did not create a useful constructor for dog.

323
00:20:26,850 --> 00:20:35,130
I can so I can jump over here into the dog class and I can create a constructor.

324
00:20:37,990 --> 00:20:45,730
And the idea is smart enough to know that since dog extends pet, I might want to generate a constructor

325
00:20:45,730 --> 00:20:49,300
that simply calls the constructor for PET.

326
00:20:49,420 --> 00:20:52,810
Well, one of the constructors for PET and in fact, that is exactly what I want.

327
00:20:53,350 --> 00:20:59,320
So first of all, generate this constructor that takes no inputs and then don't generate a second constructor

328
00:20:59,320 --> 00:21:01,120
that does take the inputs.

329
00:21:01,150 --> 00:21:01,720
There we go.

330
00:21:02,110 --> 00:21:02,740
All right.

331
00:21:02,830 --> 00:21:07,260
And then if I jump back over here and tell it, show me what you got.

332
00:21:07,270 --> 00:21:11,290
Yeah, now I have the option to create a dog with a name.

333
00:21:11,560 --> 00:21:14,380
And so I will say, yes, Fido is his name.

334
00:21:14,380 --> 00:21:23,920
Oh, and let's see, his date of birth can be, I don't know, two thousand.

335
00:21:25,270 --> 00:21:25,610
I don't know.

336
00:21:25,640 --> 00:21:27,100
2018.

337
00:21:29,980 --> 00:21:32,200
January the first.

338
00:21:34,720 --> 00:21:35,200
All right.

339
00:21:35,410 --> 00:21:38,560
And now I can say, Tom, not set.

340
00:21:39,370 --> 00:21:40,270
Oh, did I not?

341
00:21:40,320 --> 00:21:47,420
OK, so here I forgot to generate a veteran center for a person's pet so I can jump over into the person

342
00:21:47,440 --> 00:21:48,040
class.

343
00:21:48,340 --> 00:21:49,270
And I can do that.

344
00:21:49,510 --> 00:21:49,930
I can.

345
00:21:50,350 --> 00:21:51,820
I'll go down to the bottom here.

346
00:21:53,130 --> 00:21:57,600
And I'll say I want to generate some getters and setters for the pet.

347
00:21:57,750 --> 00:21:58,340
There we go.

348
00:22:00,450 --> 00:22:02,010
Then if I jump back over here.

349
00:22:04,130 --> 00:22:05,900
Now, now I can specify a pet.

350
00:22:06,560 --> 00:22:07,130
Fido.

351
00:22:07,520 --> 00:22:08,630
Fido is his pet.

352
00:22:09,200 --> 00:22:14,030
Now, in this particular model, for a person, a person can only have one pet.

353
00:22:14,450 --> 00:22:19,550
If I wanted to get fancier in my program, I could absolutely make it so that a person could have multiple

354
00:22:19,550 --> 00:22:22,720
pets, and we might even do that as an exercise down the road.

355
00:22:22,730 --> 00:22:27,160
But I just wanted you to just get the bigger picture of, oh, hold on a minute.

356
00:22:27,170 --> 00:22:27,530
Sorry.

357
00:22:28,070 --> 00:22:32,360
So I've I've created all this stuff, but I still haven't actually like done anything with it, right?

358
00:22:32,660 --> 00:22:41,420
So one thing that I could do with this is to simply teach Java how to let me print out a person in totality,

359
00:22:41,690 --> 00:22:41,990
right?

360
00:22:42,140 --> 00:22:47,420
So I could do something like, let's see, I could do something like this print, Tom.

361
00:22:47,930 --> 00:22:49,730
So here you haven't seen this before.

362
00:22:49,730 --> 00:22:55,460
But if I do a system that out that print line and then no quotes and I just refer to a variable of some

363
00:22:55,460 --> 00:22:59,090
type, by default, Java will do its best to try to figure out what to do with it.

364
00:22:59,090 --> 00:23:00,650
So let's see what job is going to do with this.

365
00:23:01,460 --> 00:23:03,140
I'm going to run this program.

366
00:23:05,340 --> 00:23:06,840
OK, so it printed.

367
00:23:06,870 --> 00:23:07,230
Hello, world.

368
00:23:07,260 --> 00:23:11,430
Nice to meet you, and then it printed some gobbledygook looking stuff, model that person at blah blah

369
00:23:11,430 --> 00:23:11,670
blah.

370
00:23:11,850 --> 00:23:19,350
Basically, this is just printing out the location in java's memory where the person object exists.

371
00:23:19,440 --> 00:23:21,990
And if that doesn't mean anything to you, don't worry about it for now.

372
00:23:22,200 --> 00:23:27,420
So not very useful, but we can teach Java to do something more useful.

373
00:23:27,840 --> 00:23:33,810
And so the way we can do that is to jump over here into the person class and we can add a method.

374
00:23:33,810 --> 00:23:34,980
Or actually we're not going to add a method.

375
00:23:34,980 --> 00:23:39,420
We're going to override a method that is already kind of there, but we just can't see it.

376
00:23:39,420 --> 00:23:42,930
It's a method that all Java objects have by default.

377
00:23:43,830 --> 00:23:44,490
Let's see here.

378
00:23:44,500 --> 00:23:50,220
So we're going to generate a two string method and we'll take the default for now, even though I'm

379
00:23:50,220 --> 00:23:52,410
not a huge fan of exactly how it does it.

380
00:23:52,410 --> 00:23:53,160
But that's OK.

381
00:23:53,760 --> 00:23:54,330
All right.

382
00:23:54,420 --> 00:23:58,260
So we just had the idea to generate what is called a two string method.

383
00:23:58,270 --> 00:24:02,340
This is a standard method that comes automatically with Java.

384
00:24:02,520 --> 00:24:05,640
But what we're doing is we're overwriting the standard method.

385
00:24:05,700 --> 00:24:08,340
The standard method prints out what we just saw a minute ago.

386
00:24:08,370 --> 00:24:09,960
Let me see if I can bring that back up.

387
00:24:12,920 --> 00:24:13,220
Yeah.

388
00:24:13,370 --> 00:24:19,220
So the standard implementation of the two string method will just print out the memory location of the

389
00:24:19,220 --> 00:24:20,030
object itself.

390
00:24:20,210 --> 00:24:25,790
But we can override that method and teach each other to do something different when we want to print

391
00:24:25,970 --> 00:24:26,660
an object.

392
00:24:26,660 --> 00:24:34,370
And so the A.D. just was kind enough to generate this so-so boilerplate code for us that knows how to

393
00:24:34,370 --> 00:24:39,740
just look at each of the properties of our person class and then print a little something about that

394
00:24:39,740 --> 00:24:40,310
property.

395
00:24:40,340 --> 00:24:40,700
OK.

396
00:24:41,050 --> 00:24:41,380
Yeah.

397
00:24:41,390 --> 00:24:46,340
So in fact, let's jump back over to hello world and let's run it again.

398
00:24:46,340 --> 00:24:47,690
And now let's see what it does.

399
00:24:50,070 --> 00:24:54,390
OK, so now there's something a little different, it's this person, first name, Tom, last name Smith.

400
00:24:54,390 --> 00:25:00,930
Date of birth 1984 June 15 addresses no spouse is another person.

401
00:25:00,960 --> 00:25:01,560
Look at that.

402
00:25:01,740 --> 00:25:07,950
So it's even it's even drilling in and running the two string that we just wrote for the spouse.

403
00:25:08,160 --> 00:25:11,550
And that's another one of these powerful concepts with Java.

404
00:25:11,550 --> 00:25:17,880
The fact that since we did this kind of a recursive definition of a person to say that a person has

405
00:25:17,880 --> 00:25:23,610
a spouse who is also a person, the spouse benefits from the two string method that we just overrode

406
00:25:23,610 --> 00:25:28,530
so that we don't have to teach Java explicitly how to represent or print out the spouse.

407
00:25:28,620 --> 00:25:30,970
It already knows that because the spouse is a person.

408
00:25:31,230 --> 00:25:35,100
So the spouses, Janet and here's her birth date.

409
00:25:35,100 --> 00:25:41,490
And interestingly, we didn't teach the code to say that, Hey, Janet is Tom's spouse, then probably

410
00:25:41,490 --> 00:25:42,910
Tom is Janet's spouse.

411
00:25:42,930 --> 00:25:45,450
Also, we could do that, but we won't right now.

412
00:25:45,750 --> 00:25:46,440
Maybe not ever.

413
00:25:46,620 --> 00:25:49,740
And then look here, the pet is still printing out in this weird way.

414
00:25:49,830 --> 00:25:55,440
And that makes sense because we didn't teach Java how to print out the pet in a more meaningful way.

415
00:25:55,440 --> 00:25:59,580
But we can, and we'll do that really, really quickly here as we wrap this up.

416
00:25:59,580 --> 00:26:01,710
So if we go back to the pet class.

417
00:26:03,480 --> 00:26:09,870
And let me close this, oops, let's close that we can do the same thing again, we'll come down here

418
00:26:09,870 --> 00:26:10,800
to the bottom.

419
00:26:11,040 --> 00:26:14,160
And the reason I'm putting this on the bottom, I mean, you could put these methods anywhere.

420
00:26:14,730 --> 00:26:18,420
I just like the general standard that our what are called fields.

421
00:26:18,570 --> 00:26:21,980
These are the attributes, if you will, or the properties of the class.

422
00:26:21,990 --> 00:26:29,670
They go at the top and then our constructors go next and then non boilerplate methods I would typically

423
00:26:29,670 --> 00:26:30,900
start putting next.

424
00:26:31,140 --> 00:26:36,150
And then towards the bottom, I'd have all of my generated boilerplate getters and setters and even

425
00:26:36,150 --> 00:26:39,930
my two string method, which is pretty much boilerplate and generated.

426
00:26:40,450 --> 00:26:40,810
OK.

427
00:26:42,420 --> 00:26:43,710
So we'll do the same thing here.

428
00:26:43,800 --> 00:26:49,590
I will generate a two string and yeah, I will use both of those fields and cool.

429
00:26:49,950 --> 00:26:50,460
All right.

430
00:26:50,670 --> 00:26:55,860
And then we'll pop back over to the hello world and we'll run this guy again, and let's see what we

431
00:26:55,860 --> 00:26:56,760
get this time.

432
00:26:58,590 --> 00:27:06,420
All right, so now if we jump over to Tom's pet, yeah, we get a pet whose name is Fido with a date

433
00:27:06,420 --> 00:27:07,470
of birth of whatever.

434
00:27:07,800 --> 00:27:08,610
All right, cool.

435
00:27:08,670 --> 00:27:16,470
So now in a real program, I really might very well have started off with most of the modeling that

436
00:27:16,470 --> 00:27:22,440
you just saw me do here if I needed to write a program that let me track these kinds of concepts.

437
00:27:22,680 --> 00:27:23,670
This was all pretty real.

438
00:27:24,510 --> 00:27:30,090
What you're not seeing is like more realistic examples of what I might do with this in all likelihood,

439
00:27:30,090 --> 00:27:35,310
because I think I said that the let's imagine that we wanted an application where we could create people

440
00:27:35,310 --> 00:27:37,200
and then track them and stuff like that.

441
00:27:37,440 --> 00:27:42,150
So then what you're not seeing here is I'd probably have a database which is a another program that

442
00:27:42,150 --> 00:27:46,320
I won't have to write where I can store information, and then I'd write some code that would let me

443
00:27:46,320 --> 00:27:47,580
take this information.

444
00:27:47,580 --> 00:27:53,430
These people and dogs and all of this and store them into the database for for long term storage and

445
00:27:53,430 --> 00:27:54,210
safekeeping.

446
00:27:54,360 --> 00:27:58,980
And then I could I could shut down my computer and shut down this program and come back later and and

447
00:27:58,980 --> 00:28:02,610
start up the program again and retrieve all this information about people and stuff.

448
00:28:03,570 --> 00:28:08,940
And the other thing that's probably not very realistic or useful is the fact that in this program,

449
00:28:09,240 --> 00:28:10,890
I'm I'm hard coding.

450
00:28:10,890 --> 00:28:15,340
As we say, I'm I'm explicitly creating these people.

451
00:28:15,510 --> 00:28:18,780
And every time I run this program, these are the only people who are ever going to exist.

452
00:28:18,900 --> 00:28:20,190
That's not a very useful program.

453
00:28:20,400 --> 00:28:25,110
A real program would be one where it might like prompt me as a user of the program and say, like,

454
00:28:25,860 --> 00:28:27,990
do you want to enter information about a person?

455
00:28:27,990 --> 00:28:31,740
And I'd say, Yeah, let me enter somebody with a first name of this and the last name of that.

456
00:28:31,890 --> 00:28:35,730
And then it would just store that information somewhere and then come back and ask me, Do you wanna

457
00:28:35,730 --> 00:28:36,720
enter more information?

458
00:28:36,720 --> 00:28:36,930
Right?

459
00:28:37,200 --> 00:28:39,570
And then I could say, show me a list of all the people.

460
00:28:40,200 --> 00:28:45,240
So obviously, I'm not getting into any of that because that'd be a way long video, though we will

461
00:28:45,240 --> 00:28:48,750
almost certainly get into something along those lines a little bit later.

462
00:28:49,500 --> 00:28:54,060
OK, so this this video was already plenty long, and I'm going to go and shut it here.

463
00:28:54,060 --> 00:28:56,190
But again, just to recap.

464
00:28:57,120 --> 00:29:06,030
So we've created a lot of classes, and these classes are simply modeling concepts, and the concepts

465
00:29:06,030 --> 00:29:10,320
that we're modeling can be both well in object orientation terms.

466
00:29:10,410 --> 00:29:12,900
We can model data and behavior.

467
00:29:13,260 --> 00:29:19,050
The data that we can model would be things like the first name, last name, date of birth, address,

468
00:29:19,050 --> 00:29:21,330
spouse, pet in this particular example.

469
00:29:21,630 --> 00:29:23,340
OK, those are the the data.

470
00:29:23,580 --> 00:29:31,860
The behaviors oh, could be the the dog's ability to to bark.

471
00:29:32,070 --> 00:29:34,340
OK, which you didn't see me run this, but that's OK.

472
00:29:34,350 --> 00:29:35,700
You can imagine what it's going to do.

473
00:29:36,810 --> 00:29:40,800
You know, just for grins, I'll run that real quick.

474
00:29:42,030 --> 00:29:45,870
So we created a dog here, so I can I can do this.

475
00:29:45,870 --> 00:29:48,450
I can do Fido dog bark.

476
00:29:49,440 --> 00:29:55,800
And then if we run this program before it prints out time, it's going to print out those bark.

477
00:29:58,200 --> 00:29:58,620
There we go.

478
00:29:58,650 --> 00:29:59,130
Hello, world.

479
00:29:59,160 --> 00:30:03,300
Nice to meet you, then rough, rough and then the information about Tom.

480
00:30:03,930 --> 00:30:11,280
OK, so all right, so that's an example of a little bit of behavior there, and we could get super

481
00:30:11,280 --> 00:30:17,520
fancy and super involved with how we handled all the behaviors and things in ways that will blow your

482
00:30:17,520 --> 00:30:19,020
minds when we get to it.

483
00:30:21,390 --> 00:30:23,100
OK, so back to the recap, though.

484
00:30:23,520 --> 00:30:27,630
So yeah, we modeled we modeled data.

485
00:30:28,650 --> 00:30:32,310
So you've heard me refer to these things as attributes.

486
00:30:32,940 --> 00:30:36,320
I'm saying that word in a non computer programming sense.

487
00:30:36,330 --> 00:30:41,700
I'm saying it more in a real world sense, like just attributes of objects, attributes of concepts,

488
00:30:41,710 --> 00:30:42,000
right?

489
00:30:42,150 --> 00:30:51,450
But in in Java and in object orientation, these things here, these attributes would actually be referred

490
00:30:51,450 --> 00:30:53,450
to as fields of the class.

491
00:30:53,530 --> 00:30:53,940
OK.

492
00:30:55,080 --> 00:30:56,910
They also are variables.

493
00:30:58,050 --> 00:31:03,120
And yeah, they they go by a lot of different names, depending on the context in how you're talking

494
00:31:03,120 --> 00:31:03,570
about them.

495
00:31:03,780 --> 00:31:04,140
OK.

496
00:31:05,400 --> 00:31:13,140
And then, yeah, the dog has a a has some, some fields and some attributes that it's inheriting from

497
00:31:13,350 --> 00:31:13,980
the pet.

498
00:31:14,160 --> 00:31:14,470
OK.

499
00:31:14,490 --> 00:31:16,590
Because this dog extends pet.

500
00:31:16,890 --> 00:31:20,220
And then we also have a cat that extends pet.

501
00:31:20,640 --> 00:31:21,060
OK.

502
00:31:21,330 --> 00:31:23,730
And the cat has a different behavior of Meow.

503
00:31:23,730 --> 00:31:29,490
So that's also really cool that you can have two or more classes that extend the same class.

504
00:31:29,490 --> 00:31:32,760
But then those two subclasses as we would call them dog and cat.

505
00:31:32,910 --> 00:31:39,330
Those two subclasses can have their own different behaviors, and they can also add in additional data.

506
00:31:39,340 --> 00:31:41,670
I'm not showing that here, but we'll get into that as well.

507
00:31:41,760 --> 00:31:46,410
I could add unique fields, fields that are only unique to a cat and fields that are unique to a dog

508
00:31:46,500 --> 00:31:49,080
that have nothing to do specifically with pet.

509
00:31:49,110 --> 00:31:49,440
Right?

510
00:31:49,930 --> 00:31:51,000
They're too specific.

511
00:31:51,210 --> 00:31:51,540
We could.

512
00:31:51,540 --> 00:31:52,920
We could do that as well.

513
00:31:53,280 --> 00:31:58,440
So when we say that Java is an object oriented language, this is exactly what we mean.

514
00:31:58,440 --> 00:32:05,820
We mean that java's bread and butter is that it makes it really easy to model concepts in it.

515
00:32:06,360 --> 00:32:06,730
All right.

516
00:32:06,780 --> 00:32:12,240
That's going to wrap up everything that I want to say for right now about Java object orientation and

517
00:32:12,240 --> 00:32:13,710
classes and objects.

518
00:32:13,830 --> 00:32:15,720
We covered a whole lot of concepts.

519
00:32:15,960 --> 00:32:20,280
So in the subsequent lesson, we'll do a deeper dive into a lot of these concepts, and I will make

520
00:32:20,280 --> 00:32:24,240
sure that you understand every single thing, so I will see you in the next one.
