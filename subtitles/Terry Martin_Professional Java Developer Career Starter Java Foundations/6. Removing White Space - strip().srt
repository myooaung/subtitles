1
00:00:00,450 --> 00:00:07,410
All right, next up, we're going to learn how to use the strip and trim methods, these methods exist

2
00:00:07,530 --> 00:00:14,880
to allow us to remove any white space from the beginning or the end of a string.

3
00:00:15,450 --> 00:00:20,040
There are perhaps a few reasons why you might want to do this, but one of the most common reasons would

4
00:00:20,040 --> 00:00:27,690
be a situation where you're allowing a user to enter some text like you're asking the user in a program,

5
00:00:27,690 --> 00:00:30,900
what's your first name or your password or something like that?

6
00:00:31,410 --> 00:00:39,030
And you want to ensure that regardless of whether or not the user may have intentionally or accidentally

7
00:00:39,030 --> 00:00:45,420
entered some spaces before they started typing, the real thing that they mean to type in, you just

8
00:00:45,420 --> 00:00:46,590
get rid of those spaces.

9
00:00:46,600 --> 00:00:51,600
So if you ask them for their name and their name is Jake, and they accidentally or intentionally hit

10
00:00:51,600 --> 00:00:56,940
the spacebar a couple of times, for example, before they typed the word, the letter J.

11
00:00:57,330 --> 00:01:00,480
You could just get rid of the extraneous space.

12
00:01:00,840 --> 00:01:04,250
This is good because you want your inputs.

13
00:01:04,260 --> 00:01:06,840
You want your data to be normal.

14
00:01:07,170 --> 00:01:13,680
And typically, you wouldn't be expecting spaces in something like a string holding the first name.

15
00:01:14,010 --> 00:01:20,070
That space could inadvertently affect other things that you do in the code later on, where you're checking

16
00:01:20,070 --> 00:01:23,220
for comparisons of text that they entered or things like that.

17
00:01:23,430 --> 00:01:28,620
So let's take a look at how to do this in the idea of cleared out the previous code that we had, and

18
00:01:28,620 --> 00:01:32,730
we, as usual, will go ahead and create a another variable.

19
00:01:33,270 --> 00:01:36,540
Let's call it first name since I used that example.

20
00:01:36,840 --> 00:01:43,500
Let's create a string and let's go ahead and put some some space in here and call it Jake.

21
00:01:43,500 --> 00:01:45,180
And I'll even put some trailing space.

22
00:01:45,180 --> 00:01:51,420
So the the space in the beginning of this string is called leading space, and then the space at the

23
00:01:51,420 --> 00:01:53,760
end of the string is called trailing space.

24
00:01:53,880 --> 00:01:56,760
OK, so we're going to pretend like these are accidents.

25
00:01:57,360 --> 00:01:57,750
All right.

26
00:01:58,260 --> 00:01:58,680
Oops.

27
00:01:59,250 --> 00:02:01,260
Let's do our trusty print line.

28
00:02:01,560 --> 00:02:02,850
Actually, the you know what?

29
00:02:03,090 --> 00:02:05,280
Let's use a different version of this.

30
00:02:05,280 --> 00:02:08,460
Let's do the format, which we have seen before.

31
00:02:08,670 --> 00:02:14,010
And the reason I want to do this is because, well, here will first build our format string.

32
00:02:15,350 --> 00:02:20,180
And we'll pass in the first name, so that will just print out the first name that is entered.

33
00:02:20,390 --> 00:02:24,580
However, I want to surround that by single ticks.

34
00:02:24,590 --> 00:02:28,100
So that way it's easier for us to see the spaces.

35
00:02:28,400 --> 00:02:31,040
And if you don't know what I mean, you'll see in just a moment here.

36
00:02:31,050 --> 00:02:36,710
So if we run this, OK, so now we have these single ticks, and so it makes it easy for us to see the

37
00:02:36,710 --> 00:02:38,630
spaces where they begin and end.

38
00:02:39,380 --> 00:02:44,030
If I didn't have those ticks there, you wouldn't necessarily it wouldn't be as easy to to distinguish

39
00:02:44,030 --> 00:02:44,300
that.

40
00:02:45,320 --> 00:02:46,730
OK, so we've got that.

41
00:02:46,730 --> 00:02:55,660
So now we'll use the first of our split methods here, and that is just the simple lobster strip method.

42
00:02:57,120 --> 00:03:03,600
So we'll use the first of our strip methods here, which is just this basic one here with no inputs.

43
00:03:04,140 --> 00:03:05,790
And so if we run this now.

44
00:03:07,880 --> 00:03:14,960
You can see that it has removed the leading and the trailing spaces just as we would want, and that's

45
00:03:15,050 --> 00:03:16,040
very straightforward.

46
00:03:16,310 --> 00:03:21,260
Now the there are two other variations of the strip method, and we'll take a look at those.

47
00:03:21,740 --> 00:03:24,200
So there's a strip leading.

48
00:03:25,790 --> 00:03:28,550
And oops, got too many parentheses there.

49
00:03:28,760 --> 00:03:36,230
And what this does is it just it only removes the leading space and doesn't touch the trailing space,

50
00:03:36,230 --> 00:03:39,770
so the the plain old just strip method all by itself.

51
00:03:40,160 --> 00:03:43,730
This one here removes both the leading and the trailing.

52
00:03:44,780 --> 00:03:50,180
The strip leading only removes the leading, and we'll just take a look at that real quick.

53
00:03:51,110 --> 00:03:54,200
OK, so we have no leading space, but we do have the trailing.

54
00:03:54,410 --> 00:04:00,830
And then there's the opposite of this one that removes the trailing space and just for good measure.

55
00:04:00,830 --> 00:04:04,750
We'll take a look at that one as well, and we'll run this and see.

56
00:04:04,760 --> 00:04:05,240
There you go.

57
00:04:05,270 --> 00:04:07,050
So now we have the trailing.

58
00:04:07,280 --> 00:04:10,160
We have the leading space, but we don't have the trailing space.

59
00:04:10,400 --> 00:04:12,830
So those are pretty self-explanatory.

60
00:04:13,010 --> 00:04:18,800
And there's one more strip method that is a little bit less obvious.

61
00:04:18,800 --> 00:04:24,110
And honestly, it's going to be a little difficult to to show in the air, but I will explain it.

62
00:04:24,350 --> 00:04:30,530
So there's one more strip method here, which is strip indent.

63
00:04:31,130 --> 00:04:37,520
Now this one is special, and to show you how it works, I need to make the string literal here a little

64
00:04:37,520 --> 00:04:38,090
different.

65
00:04:38,240 --> 00:04:39,860
So let me explain this real quick.

66
00:04:40,070 --> 00:04:45,290
So with newer versions of Java, I honestly don't remember what version they came out with.

67
00:04:45,290 --> 00:04:48,380
This in mind might have been 13 or 15, I can't remember.

68
00:04:48,380 --> 00:04:56,150
But in more recent versions of Java, Java now supports what are called text blocks or a multi line

69
00:04:56,150 --> 00:05:02,030
strings, which is a capability that some other languages have had for a long time.

70
00:05:02,030 --> 00:05:04,160
But Java took a very long time to get it.

71
00:05:04,580 --> 00:05:08,870
And so we can make a multi line string.

72
00:05:09,050 --> 00:05:14,240
So so far, the only strings I've been making programmatically here have been these single line strings

73
00:05:14,240 --> 00:05:16,640
where it's just one line of of text or whatever.

74
00:05:16,940 --> 00:05:18,950
But we can do loops.

75
00:05:19,370 --> 00:05:22,220
If I, I'll just delete that.

76
00:05:22,760 --> 00:05:29,060
And if I want to make a multi line string that is a string with text across multiple lines.

77
00:05:29,360 --> 00:05:35,690
Instead of using a quotation mark, I will use three quotation marks just like this one to three.

78
00:05:36,500 --> 00:05:42,620
And then the idea automatically puts me on a new line with the cursor here and then is waiting for me

79
00:05:42,620 --> 00:05:44,250
to start typing something.

80
00:05:44,570 --> 00:05:51,200
So I can go ahead and put a semicolon here if I like, and I'm going to make a new line right above

81
00:05:51,200 --> 00:05:54,770
that and I'll even kind of indent in here.

82
00:05:54,770 --> 00:05:58,580
And so I can say something like first line here.

83
00:05:59,390 --> 00:06:00,920
Second line here.

84
00:06:00,920 --> 00:06:02,060
I'm just hitting return.

85
00:06:02,510 --> 00:06:05,240
Third, the third line here.

86
00:06:05,480 --> 00:06:05,870
OK.

87
00:06:06,020 --> 00:06:09,930
So this is a multi line string or a text block.

88
00:06:09,950 --> 00:06:12,200
I think the official term is text block.

89
00:06:12,440 --> 00:06:12,820
OK.

90
00:06:13,190 --> 00:06:18,950
And the reason for this is because it's super convenient and looks easy to read when you want to have

91
00:06:19,130 --> 00:06:22,760
a more complex string holding multiple lines of text.

92
00:06:22,790 --> 00:06:25,880
You could do this without multi-line strings or text blocks.

93
00:06:25,880 --> 00:06:30,170
Let me show you real quick what that looks like, but it's kind of messy.

94
00:06:30,230 --> 00:06:37,550
You can do something like, oops, here's a well, actually, I guess I can see.

95
00:06:38,400 --> 00:06:39,030
First.

96
00:06:40,160 --> 00:06:41,270
Line here.

97
00:06:42,970 --> 00:06:44,710
Second line here.

98
00:06:45,620 --> 00:06:47,210
Third line here.

99
00:06:47,300 --> 00:06:53,540
So the idea is is being very nice and understanding that since I'm hitting enter inside of a string

100
00:06:53,900 --> 00:07:00,530
that it should close that string, give me a plus sign and then put me on the new line and give me a

101
00:07:00,530 --> 00:07:01,940
new string to start typing.

102
00:07:01,940 --> 00:07:05,120
And so the idea is making this relatively convenient for me.

103
00:07:05,390 --> 00:07:08,180
But there is a little more noise in this.

104
00:07:08,400 --> 00:07:12,710
You've got all these quotation marks and then you have to join them all together.

105
00:07:12,760 --> 00:07:15,050
OK, so this would be somewhat equivalent.

106
00:07:15,290 --> 00:07:21,560
But then the next problem is that if I want to format this like I wanted this line to be indented and

107
00:07:21,560 --> 00:07:24,110
I want that line to be indented as well.

108
00:07:24,440 --> 00:07:27,800
I don't know, you just start getting a lot of stuff in here.

109
00:07:27,980 --> 00:07:34,520
So when you want to do something like a multi-line string here in more recent versions of Java, it's

110
00:07:34,520 --> 00:07:38,900
probably nicer to just use a text block.

111
00:07:45,750 --> 00:07:46,440
Like so.

112
00:07:48,850 --> 00:07:50,140
That's just nicer to see.

113
00:07:50,500 --> 00:07:55,120
And then if you want to indent some of the lines or whatever, you can do that as well.

114
00:07:55,210 --> 00:08:00,790
So a couple of places where you might sometimes want to do this is that if you wanted to write some

115
00:08:00,790 --> 00:08:06,400
code that spits out code, write like spits out something that looks like code and doesn't have to be

116
00:08:06,400 --> 00:08:08,930
Java code, it could be like HTML.

117
00:08:09,160 --> 00:08:13,630
If you're familiar with HTML standards at all, you know, might look something like that.

118
00:08:13,960 --> 00:08:14,320
Oops.

119
00:08:15,990 --> 00:08:19,140
Here's a div look, div block.

120
00:08:21,510 --> 00:08:21,870
Right.

121
00:08:22,080 --> 00:08:26,640
And so you'd want that to be formatted and nice looking and everything and.

122
00:08:29,170 --> 00:08:29,540
Oops!

123
00:08:30,370 --> 00:08:31,630
And the spit that out.

124
00:08:31,870 --> 00:08:38,020
OK, all right, so I've explained text blocks and multi-line text only so that I could now jump into

125
00:08:38,020 --> 00:08:40,240
explaining the strip indent method.

126
00:08:40,630 --> 00:08:48,100
So the strip indent method, what it does, it allows the entire text block to go as far to the left

127
00:08:48,100 --> 00:08:53,740
as it possibly can while retaining all of the relative white spaces.

128
00:08:54,100 --> 00:08:57,870
And that might not make sense to you, but I can't.

129
00:08:57,880 --> 00:09:03,880
Unfortunately, I can't easily show it to you in the air because Intel is actually basically does this

130
00:09:03,880 --> 00:09:04,600
automatically.

131
00:09:04,600 --> 00:09:08,110
It strips out the leading spaces, especially in a text block.

132
00:09:08,110 --> 00:09:18,010
But if I had indented this HTML line here like that, let's say, and let's say, I also invented this

133
00:09:18,010 --> 00:09:19,270
one even further.

134
00:09:20,560 --> 00:09:23,110
And let's pretend like this one.

135
00:09:23,110 --> 00:09:30,610
This third line was lined up with the first line here, but I had all of this space here.

136
00:09:31,120 --> 00:09:37,630
So the strip indent method would remove all of this leading space here.

137
00:09:37,630 --> 00:09:42,820
And if this third line was lined up here as well, it would remove that leading space too.

138
00:09:43,060 --> 00:09:47,200
But it would keep this space starting from here.

139
00:09:47,710 --> 00:09:55,450
OK, so just get rid of all the extraneous spaces leading, but it would retain the relative indentation

140
00:09:55,570 --> 00:09:58,190
between all of the individual lines.

141
00:09:58,240 --> 00:09:58,630
OK.

142
00:09:58,840 --> 00:10:02,500
So just kind of takes the whole block and shifts it over.

143
00:10:02,650 --> 00:10:03,130
All right.

144
00:10:03,190 --> 00:10:07,510
Unfortunately, that I can't really show you that because the ad is already doing that.

145
00:10:07,510 --> 00:10:15,310
For me, this line here shows that no matter, regardless of the fact that there's all this space here,

146
00:10:15,580 --> 00:10:21,430
the ad is actually going to strip out all of this space.

147
00:10:22,330 --> 00:10:24,610
So I could really just put this all back.

148
00:10:25,670 --> 00:10:26,600
Just like that.

149
00:10:26,900 --> 00:10:32,240
So again, this line here is just showing that the aid is already stripping out all of that space for

150
00:10:32,240 --> 00:10:32,660
us.

151
00:10:35,370 --> 00:10:41,640
And therefore, the strip indent method here isn't really going to do anything anyway, but that's what

152
00:10:41,640 --> 00:10:42,540
that method does.

153
00:10:42,780 --> 00:10:43,080
All right.

154
00:10:43,080 --> 00:10:43,470
So.

155
00:10:44,110 --> 00:10:45,270
So that's that.

156
00:10:45,480 --> 00:10:51,550
Now let me talk about the other versions of methods for stripping tax.

157
00:10:51,600 --> 00:10:53,610
I'll put some space back in here again.

158
00:10:55,080 --> 00:11:02,400
OK, so there's another method that can do pretty much the same thing, and that is the trim method.

159
00:11:03,120 --> 00:11:03,570
OK?

160
00:11:03,810 --> 00:11:08,740
And the trim method is actually older than the strip methods, but it does the same thing.

161
00:11:08,780 --> 00:11:10,360
We'll we'll run this.

162
00:11:10,380 --> 00:11:11,910
It does pretty much the same thing.

163
00:11:11,910 --> 00:11:13,630
So we'll run this real quick and see.

164
00:11:13,710 --> 00:11:14,940
OK, so there you go.

165
00:11:14,970 --> 00:11:19,170
So we're still getting Jake without the spaces with the trim method.

166
00:11:19,320 --> 00:11:22,080
So then what's the difference between trim and split?

167
00:11:22,320 --> 00:11:28,410
Well, just as one of the other text manipulation methods that we learned a little bit ago, the difference

168
00:11:28,410 --> 00:11:32,820
here is that Java has newer, slightly more improved methods.

169
00:11:33,060 --> 00:11:39,120
Split is what you should be using from now on if you're coding in a version of Java that supports it.

170
00:11:39,390 --> 00:11:45,600
However, in older versions of Java, Split didn't exist, and you had no choice but to use the trim

171
00:11:45,600 --> 00:11:46,170
method.

172
00:11:46,470 --> 00:11:49,050
If you wanted that convenience, you could write these yourself.

173
00:11:49,290 --> 00:11:50,250
Of course, as well.

174
00:11:50,610 --> 00:11:58,020
So the difference, though, is that the trim method is less aware of all of the ways that white space

175
00:11:58,020 --> 00:12:04,560
can be encoded in different regions around the world and in different alphabets and character sets and

176
00:12:04,560 --> 00:12:05,400
things like that.

177
00:12:05,640 --> 00:12:11,370
So as I mentioned in the previous lesson, there is a notion of white space that could be different

178
00:12:11,580 --> 00:12:18,030
depending on what language and characters you're using, and the trim method is not very intelligent

179
00:12:18,030 --> 00:12:20,070
about those differences.

180
00:12:20,250 --> 00:12:27,180
Whereas the split methods are much more aware of all of the different ways in which the world's character

181
00:12:27,180 --> 00:12:29,940
in coatings may have white space.

182
00:12:30,240 --> 00:12:31,920
So that's the real difference.

183
00:12:31,920 --> 00:12:38,070
But the bottom line is, if you have the split methods available to you, you should prefer to use those

184
00:12:38,310 --> 00:12:41,430
only use trim if you have no other choice.

185
00:12:42,120 --> 00:12:48,960
OK, so now that you've learned about the split and trim methods, I think you have learned enough of

186
00:12:48,960 --> 00:12:56,400
the basics here with text manipulation and things that you may be able to write your own very basic

187
00:12:56,400 --> 00:12:58,500
split method yourself.

188
00:12:59,070 --> 00:13:05,820
Now, of course, your split method won't exist on the string class because that would require you to

189
00:13:05,820 --> 00:13:10,860
either write your own string class or extend it or something like that, and you don't necessarily have

190
00:13:10,860 --> 00:13:12,060
to get that fancy.

191
00:13:12,450 --> 00:13:21,720
But what we could do as a challenge is simply introduce a static method on the learned strings class

192
00:13:22,080 --> 00:13:27,960
that can split the leading and trailing spaces off of a string.

193
00:13:28,140 --> 00:13:32,910
And then we it will take a string as input and it will output a cleaned up string.

194
00:13:32,940 --> 00:13:33,390
OK.

195
00:13:33,480 --> 00:13:40,500
So in fact, I'll even show you the signature of the method that I have in mind here, so you could

196
00:13:40,500 --> 00:13:44,190
do something like public static.

197
00:13:45,460 --> 00:13:46,330
String.

198
00:13:47,960 --> 00:13:49,010
Split.

199
00:13:50,960 --> 00:13:51,770
String.

200
00:13:56,350 --> 00:13:57,370
Something like this.

201
00:13:59,760 --> 00:14:02,580
OK, now you fill in the blanks.

202
00:14:03,860 --> 00:14:07,910
Can you write a little bit of code that would take an input of a string?

203
00:14:09,300 --> 00:14:13,260
I'm calling the argument here text, but you can call it whatever you like.

204
00:14:13,620 --> 00:14:15,120
It takes this input.

205
00:14:15,600 --> 00:14:22,710
It strips off the leading and trailing spaces and then returns the cleaned up string as the output.

206
00:14:23,590 --> 00:14:28,180
Why don't you pause the video and take a moment and see if you can work that out and then we'll do it

207
00:14:28,180 --> 00:14:29,800
together to see if you've got it?

208
00:14:30,190 --> 00:14:31,030
I'll see you in a few.

209
00:14:33,010 --> 00:14:35,350
OK, so let's see how you did.

210
00:14:35,710 --> 00:14:39,400
I'm going to go ahead and implement this, as I might really do.

211
00:14:39,940 --> 00:14:42,130
And you know, we're just trying to do a simple version here.

212
00:14:42,130 --> 00:14:43,930
We're not trying to be overly fancy with it.

213
00:14:44,200 --> 00:14:47,880
So what you could probably do is something very simple.

214
00:14:47,890 --> 00:14:50,350
First, you'll you'll want to return something.

215
00:14:50,590 --> 00:14:52,480
So I would just take the text.

216
00:14:52,660 --> 00:14:55,450
I would just use the replace method.

217
00:14:56,800 --> 00:14:58,000
And let's see.

218
00:14:58,000 --> 00:15:00,940
I think I would just go with a string here.

219
00:15:01,210 --> 00:15:07,930
So I'm going to just put one string with one space in there just like that comma.

220
00:15:10,180 --> 00:15:15,280
And then I'm going to put an empty string as the thing it should replace that with.

221
00:15:16,280 --> 00:15:23,060
Just like this, so in other words, find all the places where there's a space character and replace

222
00:15:23,060 --> 00:15:25,790
it with nothing with an empty string.

223
00:15:25,820 --> 00:15:27,590
OK, so no space.

224
00:15:27,590 --> 00:15:28,340
No, nothing.

225
00:15:28,640 --> 00:15:29,090
All right.

226
00:15:29,600 --> 00:15:30,680
And then return that.

227
00:15:32,300 --> 00:15:40,190
So we can try this out now, the way to try this out would be to get rid of this trim method, call

228
00:15:40,190 --> 00:15:46,070
on the string itself and instead we now will call this split method here.

229
00:15:46,370 --> 00:15:51,410
We have to kind of invert the way we're calling things now because we're using our split method.

230
00:15:51,890 --> 00:15:56,440
So I wrap that inside of a parentheses and then close this.

231
00:15:56,450 --> 00:16:03,140
OK, so does that make sense where we're taking the first name variable here and we're passing it into

232
00:16:03,170 --> 00:16:04,730
our split method?

233
00:16:05,120 --> 00:16:05,540
OK.

234
00:16:05,660 --> 00:16:12,200
So by the way, yes, you can name methods the same as other method names as long as there's some difference

235
00:16:12,200 --> 00:16:12,380
there.

236
00:16:12,380 --> 00:16:18,680
And the difference here is that our split method lives on the line strings and it's static.

237
00:16:19,220 --> 00:16:26,030
And the split method you learned previously lives on the string class itself, and it's not static.

238
00:16:26,180 --> 00:16:31,940
OK, so those are considered by Java to be two completely different methods, even though they have

239
00:16:31,940 --> 00:16:32,930
the same name.

240
00:16:33,140 --> 00:16:36,380
They have completely different signatures than they live on different classes.

241
00:16:36,680 --> 00:16:39,290
All right, so let's see if this works.

242
00:16:39,830 --> 00:16:40,790
Hey, look at that.

243
00:16:40,970 --> 00:16:41,910
It does work.

244
00:16:41,960 --> 00:16:42,380
OK.

245
00:16:42,440 --> 00:16:47,330
So this shows that, you know, we could implement a very simple split method.

246
00:16:47,690 --> 00:16:49,820
Now, this split method isn't perfect.

247
00:16:49,830 --> 00:16:52,070
It's a poor man's split method.

248
00:16:52,280 --> 00:16:58,310
There are some issues with it, such as if we used any other types of whitespace besides the space bar,

249
00:16:58,310 --> 00:17:00,560
which is what we've encoded here.

250
00:17:00,830 --> 00:17:01,970
This wouldn't work.

251
00:17:02,180 --> 00:17:02,690
OK.

252
00:17:03,320 --> 00:17:09,740
So if we do use tabs or other white space from other languages or locales or something like that, then

253
00:17:09,740 --> 00:17:10,700
this would not work.

254
00:17:10,700 --> 00:17:15,860
We'd have to write a more extensive method that was smarter and look for all the different types of

255
00:17:15,860 --> 00:17:19,460
white spaces that there could possibly be and then replaced them.

256
00:17:19,730 --> 00:17:21,620
And, you know, we don't need to get that fancy.

257
00:17:21,860 --> 00:17:26,460
One other thing you may be wondering is why did we have to make this static, OK?

258
00:17:26,750 --> 00:17:34,790
So if you recall back to the lesson on static methods, I will state that our program is running inside

259
00:17:34,790 --> 00:17:42,170
of a static method main here, and we're not creating an instance of the learn string this method.

260
00:17:42,170 --> 00:17:47,540
So if you recall, I taught that methods can be static or non static.

261
00:17:47,840 --> 00:17:55,820
If a method is non static, then it can only be used inside of an instance of a class.

262
00:17:56,030 --> 00:17:59,420
But in this program, we're not creating an instance of the class.

263
00:17:59,420 --> 00:18:04,490
We're just writing code directly in the static void main method.

264
00:18:05,060 --> 00:18:12,890
So to keep the code relatively simple, because I did not want to have to create an instance of a class,

265
00:18:13,250 --> 00:18:17,600
I chose to create the new split method static as well.

266
00:18:17,990 --> 00:18:23,390
Because static methods can be called and executed without creating an instance of a class.

267
00:18:23,690 --> 00:18:28,130
And when I say creating an instance of a class, I just mean, I didn't want to have to do something

268
00:18:28,130 --> 00:18:29,600
like, oops.

269
00:18:32,500 --> 00:18:33,340
All of this.

270
00:18:35,940 --> 00:18:40,140
Just so I could then call some kind of like split method or blah blah blah.

271
00:18:40,530 --> 00:18:40,830
Right?

272
00:18:40,860 --> 00:18:42,240
I didn't want to have to do all of that.

273
00:18:43,450 --> 00:18:46,120
It could have, but not necessary.

274
00:18:47,610 --> 00:18:50,100
All right, so that's the reason why this is static.

275
00:18:50,700 --> 00:18:50,950
All right.

276
00:18:50,970 --> 00:18:54,870
So anyway, if you were able to get that awesome and if you weren't.

277
00:18:55,050 --> 00:18:55,900
No worries.

278
00:18:55,920 --> 00:19:02,130
Like I've said a million times already, we'll get plenty more opportunities to to try different challenges

279
00:19:02,130 --> 00:19:04,950
and and you can try challenges for yourself as well.

280
00:19:05,490 --> 00:19:08,940
And so with that, we're going to in this lesson and I'll see you in the next one.
