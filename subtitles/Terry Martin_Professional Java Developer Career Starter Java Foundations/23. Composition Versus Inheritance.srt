1
00:00:00,450 --> 00:00:06,150
All right, so in this lesson, I want to present you with an interesting scenario.

2
00:00:07,230 --> 00:00:16,140
Let's say that a CEO is, you know, an employee as we have him here, but let's say that a CEO can

3
00:00:16,140 --> 00:00:17,430
also be a pilot.

4
00:00:17,850 --> 00:00:18,330
OK?

5
00:00:18,570 --> 00:00:27,150
And let's say that pilots have various behaviors and and data that they can capture or that they can

6
00:00:27,150 --> 00:00:27,520
track.

7
00:00:27,540 --> 00:00:29,880
OK, so obviously, pilots can fly.

8
00:00:30,420 --> 00:00:33,720
They have a certain number of hours that they have ever flown.

9
00:00:33,720 --> 00:00:40,920
They have certain certifications or ratings to determine, you know, if they're allowed to fly in bad

10
00:00:40,920 --> 00:00:42,840
weather or whatever, right?

11
00:00:43,140 --> 00:00:45,330
So let's let's do this.

12
00:00:45,330 --> 00:00:47,340
Let's let's create another class.

13
00:00:47,340 --> 00:00:51,120
Let's make a class that models a pilot a little bit.

14
00:00:51,510 --> 00:00:51,780
All right.

15
00:00:51,780 --> 00:00:58,470
So I'm going to come over here to the I.D., and I guess I'm going to right click on the package and

16
00:00:58,470 --> 00:01:03,360
create a new Java class, and I will just call this pilot.

17
00:01:05,250 --> 00:01:05,670
All right.

18
00:01:05,880 --> 00:01:09,120
So let's model a few characteristics of a pilot.

19
00:01:09,330 --> 00:01:11,220
We don't have to go real crazy with this.

20
00:01:11,820 --> 00:01:17,070
Let's say that a pilot has a, I don't know, a number of hours that they have flown.

21
00:01:17,070 --> 00:01:24,360
So let's just say this is an integer and it's hours flown and we'll initialize it to zero, I suppose.

22
00:01:24,690 --> 00:01:29,370
And let's also say that a pilot can be rated for and I'm not a pilot.

23
00:01:29,370 --> 00:01:35,640
I don't know much about flying, but I do know that there's something called instrument flight rating.

24
00:01:35,850 --> 00:01:41,190
And I think that basically is a rating that pilots can get certified for.

25
00:01:41,190 --> 00:01:47,550
That allows them to fly in conditions where they might not be able to see very well with their eyes,

26
00:01:47,550 --> 00:01:50,460
and so they have to rely more on the instrumentation.

27
00:01:50,490 --> 00:02:01,020
OK, so let's call this a Boolean, and let's just call it IFR instrument flight rated, and we'll defaulted

28
00:02:01,020 --> 00:02:01,980
to false.

29
00:02:03,130 --> 00:02:03,580
All right.

30
00:02:04,570 --> 00:02:10,420
And then let's generate a constructor and we will use those two fields.

31
00:02:11,260 --> 00:02:14,230
And then let's create some getters and setters.

32
00:02:16,120 --> 00:02:22,540
Notice I just type genes there to narrow down to getters and setters and will create getters and setters

33
00:02:22,540 --> 00:02:24,010
for all of the fields.

34
00:02:25,510 --> 00:02:26,390
And I don't know.

35
00:02:26,410 --> 00:02:30,280
Let's also say that a pilot can fly.

36
00:02:31,270 --> 00:02:39,340
So this will be a void method and if someone were to call the fly method.

37
00:02:50,850 --> 00:03:00,150
Now I happen to live very close to a to a regional airport in my town, and there are airplanes flying

38
00:03:00,150 --> 00:03:00,900
by all the time.

39
00:03:00,900 --> 00:03:06,540
And just as I'm, you know, talking about pilots and things, one one flies right over.

40
00:03:06,870 --> 00:03:14,730
So anyway, let's say that if someone calls the fly method, we'll just print out a message and prepare

41
00:03:14,730 --> 00:03:16,350
for takeoff.

42
00:03:17,430 --> 00:03:19,890
I don't know if off is one word or two takeoff.

43
00:03:19,890 --> 00:03:20,280
I don't know.

44
00:03:22,430 --> 00:03:22,880
OK.

45
00:03:24,290 --> 00:03:27,290
All right, so that's that's enough modeling of a pilot, right?

46
00:03:27,290 --> 00:03:30,260
So let's say that a pilot can do all of these things.

47
00:03:30,320 --> 00:03:34,160
OK, now let's go back over to the CEO class.

48
00:03:35,210 --> 00:03:44,570
So how could we model a CEO so that the CEO is an employee, but the CEO is also a pilot?

49
00:03:44,930 --> 00:03:53,690
If you'll recall from a previous lesson, I stated that Java, though it is an object oriented language,

50
00:03:54,110 --> 00:03:58,910
Java does not permit what is called multiple inheritance.

51
00:03:59,240 --> 00:04:07,970
That is a concept in object orientation where a class can actually inherit from or in this case, extend

52
00:04:07,970 --> 00:04:10,490
from more than one other class.

53
00:04:10,730 --> 00:04:19,340
So here we've got CEO inheriting from the employee class, OK, by using the extends word, but I cannot

54
00:04:19,340 --> 00:04:21,650
do something like put a comma.

55
00:04:23,020 --> 00:04:30,460
Behind employee and then say, also CEO can extend pilot, I can't do that.

56
00:04:30,610 --> 00:04:36,490
And the reason, as I mentioned before, is that the creators of Java were very familiar with object

57
00:04:36,490 --> 00:04:44,470
oriented languages that do permit multiple inheritance, such as C++, and they were well aware of the

58
00:04:44,470 --> 00:04:52,630
headaches that can ensue when you allow for multiple inheritance, and they chose not to get into any

59
00:04:52,630 --> 00:04:57,130
of that at all, at least not in the ways that C++ handles it.

60
00:04:59,140 --> 00:05:00,770
So we can't do this.

61
00:05:01,600 --> 00:05:06,520
But there is a way for us to sue, to take it out.

62
00:05:06,940 --> 00:05:07,380
OK.

63
00:05:07,780 --> 00:05:17,230
And what that is is that although we cannot have CEO inherit from two or more classes, CEO or any class

64
00:05:17,230 --> 00:05:22,570
for that matter, can be composed of multiple classes.

65
00:05:22,600 --> 00:05:23,080
OK.

66
00:05:23,590 --> 00:05:29,770
So let me just show you what that looks like rather than trying to explain it.

67
00:05:29,800 --> 00:05:30,250
OK.

68
00:05:30,520 --> 00:05:32,650
So what we can do?

69
00:05:34,540 --> 00:05:39,370
So first, let me get rid of that, which will never work in Java.

70
00:05:40,000 --> 00:05:49,570
And what we can do, though, is we can actually create a new field on the CEO class of type pilot.

71
00:05:52,320 --> 00:05:56,850
And we'll call it pilot, and we can go ahead and just instantiate that in line if we like.

72
00:05:57,420 --> 00:06:02,790
OK, so we'll create a new pilot and now he's got a constructor where we can set the number of hours

73
00:06:02,790 --> 00:06:04,830
phone, let's say a thousand hours.

74
00:06:05,430 --> 00:06:09,300
And let's say yes, he is IFR.

75
00:06:09,630 --> 00:06:11,670
He is instrument flight rated.

76
00:06:12,480 --> 00:06:14,940
All right, so there's our new pilot.

77
00:06:15,150 --> 00:06:21,450
Now, this isn't really doing anything for us yet when we extend a class.

78
00:06:22,670 --> 00:06:30,800
We inherit all of that class's methods and all of its non private members as well.

79
00:06:30,920 --> 00:06:31,400
OK.

80
00:06:31,670 --> 00:06:37,190
And so we can utilize those as if they were written directly on the class.

81
00:06:38,800 --> 00:06:44,140
Just creating a new instance of a pilot as a field doesn't give us any of that.

82
00:06:44,440 --> 00:06:53,170
However, we can create what are called delegate methods on the CEO and what those would be are methods

83
00:06:53,170 --> 00:07:04,630
that mirror the public methods of the pilot class, such that CEO then has essentially has those same

84
00:07:04,630 --> 00:07:08,980
methods, and we didn't have to write all of what's in those methods.

85
00:07:09,040 --> 00:07:10,690
OK, we're just passing through.

86
00:07:10,930 --> 00:07:16,130
So let me show you a really cool way that we can do that using intelligence.

87
00:07:17,530 --> 00:07:25,330
So what we can do now that we have this field of type pilot, I'm going to move my cursor down to the

88
00:07:25,330 --> 00:07:29,890
bottom of this class and then I'm going to generate some new methods.

89
00:07:29,890 --> 00:07:33,790
So again, if your Windows Linux, you'll have to right click here.

90
00:07:34,060 --> 00:07:36,640
If your Mac, you can do a command in.

91
00:07:36,760 --> 00:07:39,100
All right, so that you can actually see what's in here.

92
00:07:39,100 --> 00:07:43,090
I'm going to scroll up a little more and see if I can get it to squeeze into the to the view of your

93
00:07:43,240 --> 00:07:44,860
your into your view.

94
00:07:45,100 --> 00:07:46,990
So I'll do a command in there.

95
00:07:46,990 --> 00:07:52,180
It is just barely making it and we've got this option here, delegate method.

96
00:07:52,180 --> 00:07:53,770
So I'm going to choose that.

97
00:07:54,010 --> 00:07:59,560
So what it's doing now is it's presenting me with the fields of this class, and it's going to allow

98
00:07:59,560 --> 00:08:08,290
me to generate methods that mirror the public methods of any of these classes.

99
00:08:08,500 --> 00:08:10,960
So I already have pilots selected here.

100
00:08:11,110 --> 00:08:13,750
So if I click, OK, watch what happens?

101
00:08:15,930 --> 00:08:21,450
It now sees the methods, the public methods of the pilot class.

102
00:08:21,720 --> 00:08:28,350
And it highlights them automatically for me because it's assuming I want to make delicate methods for

103
00:08:28,350 --> 00:08:30,930
all of these public methods on pilot.

104
00:08:31,200 --> 00:08:38,400
And so if I click, OK, look at that, it generated the delegate methods for all of those and I didn't

105
00:08:38,400 --> 00:08:39,870
have to do anything, really.

106
00:08:40,710 --> 00:08:49,380
And so I now have a method on SEO class called fly, which delegates down to the pilot classes fly method,

107
00:08:50,130 --> 00:08:54,820
get hours flown, delegates down to pilots get hours flown, et cetera, et cetera.

108
00:08:54,840 --> 00:09:01,470
It even handles the setter methods, which require a little extra step, right, because they take input.

109
00:09:01,620 --> 00:09:05,970
So now pilot that said, hours flown and it passes the input over all of that.

110
00:09:06,570 --> 00:09:18,780
And so this is a really cool technique for being able to expand the capabilities of my class, somewhat

111
00:09:18,780 --> 00:09:25,020
similarly, as I can do when I extend or inherit from another class.

112
00:09:25,170 --> 00:09:31,050
But I don't have to use up my one and only inheritance shot.

113
00:09:31,560 --> 00:09:35,550
Now I can do something even cooler than this, though.

114
00:09:35,940 --> 00:09:42,270
What if I want my CEO to look like a pilot?

115
00:09:42,540 --> 00:09:49,800
OK, and what I mean by that is when I use objects of type CEO in other classes like Maine, I don't

116
00:09:49,800 --> 00:09:54,450
have to store an instance of a CEO in a CEO variable.

117
00:09:54,660 --> 00:10:00,600
I can store it in a variable of type employee or even in a variable of type I employee, right?

118
00:10:00,600 --> 00:10:06,150
Because of the way that interfaces and inheritance work.

119
00:10:06,660 --> 00:10:10,380
What if I wanted to be able to do something similar with pilot?

120
00:10:10,390 --> 00:10:14,820
So, you know, if I wanted to store an instance here, let me just show you what I mean.

121
00:10:15,120 --> 00:10:17,010
So we come up, come over here to Maine.

122
00:10:17,910 --> 00:10:27,750
And let's say that just for sake of argument here, let's just say that we want to create a new instance

123
00:10:27,750 --> 00:10:28,980
of a CEO.

124
00:10:32,130 --> 00:10:35,250
And for right now, just use empty text, OK?

125
00:10:36,060 --> 00:10:45,630
But let's say that I want to store this CEO instance in a variable of type pilot.

126
00:10:48,900 --> 00:10:50,310
I can't do that right.

127
00:10:50,640 --> 00:10:52,120
It's not going to let me do that.

128
00:10:52,140 --> 00:10:54,420
They're just two completely unrelated types.

129
00:10:54,690 --> 00:11:01,740
Even though CEO has delegate methods that delegate down to the methods of pilot, CEO is not a pilot.

130
00:11:02,010 --> 00:11:03,870
It's just fundamentally not a pilot.

131
00:11:04,500 --> 00:11:11,010
But let me show you this cool trick if I go to the pilot class.

132
00:11:13,010 --> 00:11:16,610
And we can ignore this, that's just because of what I just did in the main here.

133
00:11:16,970 --> 00:11:26,270
If I go to the pilot class and I right click on the pilot class name and then I come down here to refactor

134
00:11:27,080 --> 00:11:28,880
extract interface.

135
00:11:29,030 --> 00:11:32,570
So what this is going to do, and I think you've seen me do this once before now.

136
00:11:33,620 --> 00:11:35,240
Well, here, let's just try it.

137
00:11:35,330 --> 00:11:36,650
Extract interface.

138
00:11:37,730 --> 00:11:38,150
All right.

139
00:11:38,480 --> 00:11:46,610
So now it's going to create a new interface based on whatever methods I choose that are already on the

140
00:11:46,610 --> 00:11:47,580
pilot class.

141
00:11:47,600 --> 00:11:51,830
OK, so I need to give this new interface a name.

142
00:11:51,830 --> 00:11:54,740
I'm not going to call it pilot because that would be confusing.

143
00:11:55,070 --> 00:11:58,850
So I'll create another name that means someone who can fly.

144
00:11:59,090 --> 00:12:02,390
So why don't I just say fly or?

145
00:12:02,540 --> 00:12:02,920
Right?

146
00:12:03,110 --> 00:12:09,950
The beauty of English sometimes just stick an air on the end of of of any verb, and suddenly that becomes

147
00:12:09,950 --> 00:12:11,120
a person who can do that.

148
00:12:11,690 --> 00:12:12,040
All right.

149
00:12:12,050 --> 00:12:14,560
So fly air is going to be my interface.

150
00:12:14,570 --> 00:12:16,250
Obviously, I could have name this anything.

151
00:12:17,740 --> 00:12:25,150
And then I'm going to select, I guess, all of the methods of flyer.

152
00:12:26,460 --> 00:12:27,540
Of Pilot.

153
00:12:29,180 --> 00:12:32,810
All right, then I'm going to select Refactor.

154
00:12:34,810 --> 00:12:41,410
And this is just asking me, do I want to replace all the places where I'm referring to a pilot as a

155
00:12:41,410 --> 00:12:44,710
as a variable type with this new interface?

156
00:12:45,010 --> 00:12:46,930
I think, yes, I do want that.

157
00:12:47,590 --> 00:12:52,390
And so now it's saying, well, here are a couple of places that I have found where you're currently

158
00:12:52,390 --> 00:12:53,620
referring to a pilot.

159
00:12:53,620 --> 00:12:56,680
Do I'm going to change these to now refer to a flyer?

160
00:12:57,670 --> 00:12:58,480
I guess so.

161
00:12:58,690 --> 00:12:59,110
Sure.

162
00:12:59,350 --> 00:12:59,830
Why not?

163
00:13:02,400 --> 00:13:02,940
All right.

164
00:13:03,540 --> 00:13:09,450
And let me read let me resize this window so that you can see what you're not seeing here.

165
00:13:09,510 --> 00:13:09,810
All right.

166
00:13:09,810 --> 00:13:16,890
So if I highlight if I select either of these instances, it's just showing me what's going to change

167
00:13:16,890 --> 00:13:17,070
there.

168
00:13:17,080 --> 00:13:21,090
So here's a place where I'm creating a CEO and trying to store it in a pilot.

169
00:13:21,450 --> 00:13:28,560
And it's going to change this word pilot to this type, pilot to to two flyer instead.

170
00:13:28,920 --> 00:13:29,280
All right.

171
00:13:29,310 --> 00:13:31,710
So I'm going to click OK to allow that.

172
00:13:35,370 --> 00:13:39,150
And then I have to also tell it to go ahead and do the refactoring.

173
00:13:39,660 --> 00:13:40,110
So.

174
00:13:41,880 --> 00:13:42,300
All right.

175
00:13:42,690 --> 00:13:53,070
So now if I go back over here to Maine now, what was a pilot variable of type pilot is now flyer a

176
00:13:53,070 --> 00:13:55,180
flyer variable of type flyer.

177
00:13:55,200 --> 00:13:57,480
OK, so you can kind of see what it did there.

178
00:13:57,570 --> 00:14:02,760
Now it's still in error because CEO has nothing to do with pilots or flyers yet.

179
00:14:02,790 --> 00:14:04,200
OK, we're getting to that.

180
00:14:04,590 --> 00:14:04,960
All right.

181
00:14:04,980 --> 00:14:07,740
So now if I jump back over to the CEO.

182
00:14:10,460 --> 00:14:12,860
Now I can do something pretty cool.

183
00:14:13,280 --> 00:14:23,990
So you'll recall again that while it is true that Java does not allow a class to inherit or extend more

184
00:14:23,990 --> 00:14:31,220
than one class, Java does allow a class to implement more than one interface.

185
00:14:31,400 --> 00:14:37,380
And we just extracted a new interface called flyer from the pilot class.

186
00:14:37,400 --> 00:14:44,870
So now if I come over here to my list of interfaces and I still have this, you know, this example

187
00:14:44,870 --> 00:14:50,660
interface, Apple that is doing nothing for us, I should probably get rid of that, but I'm going to

188
00:14:50,660 --> 00:14:52,520
add now another comma.

189
00:14:52,940 --> 00:14:59,060
And now I will say that CEO also implements the flyer interface.

190
00:15:00,230 --> 00:15:03,410
Just like that and now look at what just happened there.

191
00:15:03,680 --> 00:15:12,620
All of those delegate methods that were added from the pilot class are now being shown with this little

192
00:15:12,620 --> 00:15:18,320
icon here, and that icon just means that the I.D. recognizes these methods.

193
00:15:19,500 --> 00:15:27,000
Satisfy the contract, if you will, of the flyer interface, that is to say, hey, whenever a class

194
00:15:27,000 --> 00:15:32,370
implements an interface, that class must implement the methods of that interface.

195
00:15:32,580 --> 00:15:38,580
And the idea is recognizing, I already have methods that satisfy that contract, right?

196
00:15:38,610 --> 00:15:40,020
Those methods are right here.

197
00:15:41,430 --> 00:15:52,320
And so now the CEO not only looks like an employee, it also looks like a a flyer, which is a pilot,

198
00:15:52,410 --> 00:15:52,800
right?

199
00:15:52,950 --> 00:15:57,060
So now if I go back over here to the main method, look at that.

200
00:15:57,150 --> 00:16:05,220
That error just went away now because I'm storing this instance of a CEO in a variable of type flyer.

201
00:16:05,700 --> 00:16:14,910
By default, I'm only allowed to call methods that are defined on fliers so I could call Flyer Dot Fly.

202
00:16:16,590 --> 00:16:19,470
And now the CEO will know how to fly.

203
00:16:19,560 --> 00:16:23,970
So if I were to call this method, it would execute whatever we coded here, which I think was to print

204
00:16:23,970 --> 00:16:26,000
out, prepare for takeoff or something.

205
00:16:26,010 --> 00:16:32,730
By the way, if I want to jump in to the actual implementation of this method, like the final implementation

206
00:16:32,730 --> 00:16:33,490
of this method.

207
00:16:33,720 --> 00:16:36,570
I can put my cursor here and on Mac.

208
00:16:36,570 --> 00:16:43,200
I can do a command Option B, which is control alt b on Windows and Linux.

209
00:16:43,200 --> 00:16:48,960
And then the ADC will actually let me choose which implementation do I want to look at?

210
00:16:49,170 --> 00:16:54,930
The CEO one which really doesn't do anything but delegate down to the pilot one or the pilot one, which

211
00:16:54,930 --> 00:16:57,230
is the real implementation so I can actually see.

212
00:16:57,360 --> 00:17:00,930
Let me let me see the pilot implementation of the fly method.

213
00:17:01,260 --> 00:17:02,160
And here we are.

214
00:17:02,280 --> 00:17:03,000
So now I can see.

215
00:17:03,000 --> 00:17:07,860
Yes, indeed, the fly method prints out that message there.

216
00:17:07,890 --> 00:17:08,340
OK.

217
00:17:08,610 --> 00:17:12,630
So I will jump back over to the CEO class now.

218
00:17:13,350 --> 00:17:26,430
So let me recap what's so awesome about this if I want a class to be able to implement and pseudo inherit?

219
00:17:27,790 --> 00:17:33,760
Functionality from multiple other classes that are otherwise unrelated.

220
00:17:35,230 --> 00:17:39,250
I can still do that with this technique of composition.

221
00:17:39,460 --> 00:17:41,560
So let me be a little clearer here.

222
00:17:42,160 --> 00:17:50,950
So this technique is called composition because now my CEO class is composed from a pilot instance.

223
00:17:51,130 --> 00:17:51,670
OK?

224
00:17:52,300 --> 00:18:02,290
And I could have a thousand other classes and I could compose CEO of those other thousand classes as

225
00:18:02,290 --> 00:18:02,650
well.

226
00:18:03,160 --> 00:18:10,060
Now, the only thing that sucks a little bit for me, at least, is the fact that you do need to explicitly

227
00:18:10,060 --> 00:18:13,750
add all of these delegate methods here.

228
00:18:13,780 --> 00:18:14,230
OK.

229
00:18:14,500 --> 00:18:18,220
But the good thing is the A.D. can do that for you automatically.

230
00:18:18,240 --> 00:18:23,260
You don't have to do it on your own right, so it's no sweat off your back other than just a couple

231
00:18:23,260 --> 00:18:28,240
of key clicks or whatever to tell the aide to do your bidding for you.

232
00:18:28,270 --> 00:18:28,600
Right?

233
00:18:29,770 --> 00:18:38,050
But this gets us around the problem if you want to consider it to be a problem of the lack of multiple

234
00:18:38,050 --> 00:18:39,010
inheritance.

235
00:18:40,510 --> 00:18:50,530
Now you will actually hear a lot of Java developers say that we should actually prefer composition over

236
00:18:50,530 --> 00:18:51,490
inheritance.

237
00:18:52,120 --> 00:19:02,590
And what they typically mean by that is they consider it to be better generally to imbue your classes

238
00:19:02,590 --> 00:19:05,350
with more functionality from other classes.

239
00:19:05,560 --> 00:19:14,080
Using this technique of composition rather than just extending a class now a lot of developers just

240
00:19:14,080 --> 00:19:15,130
stop right there.

241
00:19:15,340 --> 00:19:19,180
I'm going to put a bit more nuance in it and be a little clearer.

242
00:19:19,720 --> 00:19:28,420
I'm going to say in general, if you wrote this super class and you also are writing the potential subclass

243
00:19:28,420 --> 00:19:34,600
and you want your subclass to extend your superclass and you wrote both of them, go for it.

244
00:19:35,110 --> 00:19:36,700
Generally speaking, go for it.

245
00:19:36,760 --> 00:19:39,610
OK, now I have stated, don't do that.

246
00:19:39,910 --> 00:19:45,280
Like you know, many levels deep, though don't don't go three four five six levels deep.

247
00:19:45,280 --> 00:19:49,280
That's going to that's a recipe for disaster in most cases.

248
00:19:49,300 --> 00:19:49,630
OK.

249
00:19:49,720 --> 00:19:54,400
Keep it relatively shallow to maybe three levels that most OK.

250
00:19:54,430 --> 00:19:56,770
If you feel the strong need to go deeper than that.

251
00:19:57,010 --> 00:19:58,900
Rethink your entire strategy.

252
00:19:59,110 --> 00:19:59,530
OK.

253
00:20:00,100 --> 00:20:07,120
But if you wrote everything involved in that hierarchy and you wrote it intending to have a hierarchy,

254
00:20:07,120 --> 00:20:11,980
pretty much as we have done here with the employee and then the other, the various types of employee,

255
00:20:12,130 --> 00:20:14,150
you're you're fine, you're fine, OK?

256
00:20:14,740 --> 00:20:22,990
Where this favoring of composition over inheritance really comes into play is in a different scenario

257
00:20:23,110 --> 00:20:26,830
where you did not write the class that you're considering extending.

258
00:20:26,860 --> 00:20:33,940
OK, the class might be from another developer on another team or in another department, or in another

259
00:20:33,940 --> 00:20:36,580
company or in another organization.

260
00:20:36,790 --> 00:20:46,180
And you don't necessarily know whether or not the author of that potential class intended for that class

261
00:20:46,180 --> 00:20:47,530
to be extended.

262
00:20:47,560 --> 00:20:55,280
OK, now sometimes there are frameworks that create classes that are intended to be extended.

263
00:20:55,330 --> 00:21:00,010
And generally speaking, there, you're fine because those were intended for that purpose.

264
00:21:00,460 --> 00:21:09,340
But if someone wrote an employee class and they weren't explicitly planning for you or anyone else to

265
00:21:09,340 --> 00:21:13,090
extend that class, you should tread very carefully when doing that.

266
00:21:13,240 --> 00:21:21,130
And the reason is because you may be making assumptions of how the methods in that class are operating.

267
00:21:21,370 --> 00:21:28,690
And at any time, the author of that class could decide to change those implementations.

268
00:21:28,900 --> 00:21:36,130
And you may receive those updates and suddenly your assumptions cause your code to be broken.

269
00:21:36,160 --> 00:21:38,890
OK, so it can lead to very fragile code.

270
00:21:39,130 --> 00:21:45,130
It is actually for this reason that it is often recommended, in fact, that if you yourself are the

271
00:21:45,130 --> 00:21:51,670
author of a class and you don't intend for that class to be inherited by yourself or anyone else, you

272
00:21:51,670 --> 00:21:55,690
may explicitly declare your own class to be final.

273
00:21:55,990 --> 00:22:04,300
That prevents others from extending your class OK to protect them from themselves, essentially.

274
00:22:04,690 --> 00:22:12,580
However, you can still consider endowing your class with the functionality that you're liking from

275
00:22:12,580 --> 00:22:15,670
some other class by using composition.

276
00:22:15,880 --> 00:22:21,130
It's a little bit better because you have more control over what's going on.

277
00:22:21,250 --> 00:22:24,580
You have to explicitly call in your delegate methods.

278
00:22:24,760 --> 00:22:26,980
The other classes method, right?

279
00:22:27,160 --> 00:22:32,260
And so you get a chance to override what it's doing a little more easily.

280
00:22:32,260 --> 00:22:34,520
I mean, you could do that with inherited within.

281
00:22:34,590 --> 00:22:40,050
Here it is as well, of course, but it's even more explicit when you're using these delegate methods.

282
00:22:40,080 --> 00:22:40,560
OK.

283
00:22:40,860 --> 00:22:45,990
And then obviously, it lets you also get around the fact that Java is not going to allow you to inherit

284
00:22:45,990 --> 00:22:47,610
from more than one class.

285
00:22:47,850 --> 00:22:54,540
And so sometimes you see it, you'll see Java developers say you have to pick wisely what class you

286
00:22:54,540 --> 00:22:58,710
want to spend on your one and only inheritance shot.

287
00:22:58,890 --> 00:22:59,250
Right?

288
00:22:59,490 --> 00:23:02,520
But with composition, it doesn't matter.

289
00:23:02,670 --> 00:23:07,440
Now you can compose your class of as many other classes as possible.

290
00:23:07,710 --> 00:23:08,110
All right.

291
00:23:08,130 --> 00:23:11,640
So I think this is going to wrap up this lesson.

292
00:23:11,760 --> 00:23:18,960
It's a super powerful technique, and I hear so many developers who have read maybe like one book ever,

293
00:23:19,140 --> 00:23:26,040
and they've learned a little bit more than maybe the average developer to know that we shouldn't use

294
00:23:26,040 --> 00:23:32,890
inheritance and inheritance is a powerful technique that you should not be afraid to use.

295
00:23:32,910 --> 00:23:38,550
So if someone tells you just in a blanket statement that you should not use inheritance?

296
00:23:38,760 --> 00:23:39,660
Well, you know what?

297
00:23:39,660 --> 00:23:46,050
You're missing out on a lot of what an object oriented language can can give you, so you shouldn't

298
00:23:46,050 --> 00:23:51,020
just blindly decide never to utilize inheritance.

299
00:23:51,030 --> 00:23:56,220
Instead, you should know when is it a good idea to use inheritance and when is it a bad idea, right?

300
00:23:56,370 --> 00:23:58,920
And what are the pros and cons and then weigh those?

301
00:23:59,100 --> 00:24:04,410
Most people want to be overly simplistic, and they want to go way too far in one direction and use

302
00:24:04,410 --> 00:24:11,070
inheritance everywhere where it's not necessary and go to levels deep with their hierarchy.

303
00:24:11,250 --> 00:24:13,350
And that's a terrible idea, always.

304
00:24:14,310 --> 00:24:17,040
Or they don't want to use any inheritance ever.

305
00:24:17,040 --> 00:24:22,950
And therefore they just miss out on all the beauty and awesomeness of object oriented programming and

306
00:24:22,950 --> 00:24:23,850
the power of it.

307
00:24:24,150 --> 00:24:29,640
And then I sometimes question, Well, why are you even using Java if you're not going to use a lot

308
00:24:29,640 --> 00:24:32,310
of the object oriented techniques that it allows?

309
00:24:32,340 --> 00:24:32,670
Right?

310
00:24:32,910 --> 00:24:38,640
And so there's a there's a middle of the road there where we use these techniques, but we don't abuse

311
00:24:38,640 --> 00:24:46,830
them and we can also use composition and other features as well to really bring our applications together

312
00:24:46,830 --> 00:24:49,230
in the most efficient and effective ways.

313
00:24:49,380 --> 00:24:49,790
All right.

314
00:24:49,800 --> 00:24:53,340
So that's enough for this lesson, and I will see you in the next one.
