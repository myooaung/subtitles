1
00:00:00,360 --> 00:00:00,720
OK.

2
00:00:00,750 --> 00:00:09,930
I mentioned that the math, that random method is fine for simple random number generation.

3
00:00:10,170 --> 00:00:17,010
However, if you need a little bit better randomness and by better, I mean, let's say that if you

4
00:00:17,010 --> 00:00:23,760
were to call math a random one million times, you might be able to discern certain patterns.

5
00:00:23,940 --> 00:00:30,690
Or you might notice that certain numbers are coming up a little more frequently than you would expect

6
00:00:30,690 --> 00:00:38,010
with a perfect random generator that has what is called an even distribution across all of its range.

7
00:00:38,760 --> 00:00:43,040
So there are a few additional ways to generate numbers.

8
00:00:43,050 --> 00:00:48,090
I won't go through all of them, but I will show you one other one that is at least a little bit better

9
00:00:48,090 --> 00:00:54,090
than math that random in that it is a bit more random, a little less predictable.

10
00:00:54,180 --> 00:00:58,410
So let's take a look at that, and I'm going to clear this out.

11
00:01:01,150 --> 00:01:01,520
All right.

12
00:01:01,540 --> 00:01:10,210
And so what we can do is there is a class called random on on the package called Java Dot Util.

13
00:01:10,450 --> 00:01:12,850
And we can import this class.

14
00:01:14,070 --> 00:01:25,320
And create an instance of it, new random like so and then to actually use this guy, we can let's say

15
00:01:25,320 --> 00:01:31,620
we want to print out some random numbers so we can do a system that out that print line and then reference

16
00:01:31,620 --> 00:01:33,840
the random object we just created.

17
00:01:33,840 --> 00:01:38,640
And now this object has a number of methods on it that are quite convenient.

18
00:01:38,940 --> 00:01:48,390
So we could do something like next event like so and let's say we want numbers up to 10 so we can give

19
00:01:48,390 --> 00:01:52,260
it an upper bound and just put the number 10 in here like so.

20
00:01:52,590 --> 00:01:55,890
And let's say we're going to call this a few times.

21
00:01:56,700 --> 00:01:58,950
So now if I run this?

22
00:02:01,840 --> 00:02:02,410
There we go.

23
00:02:02,440 --> 00:02:03,760
Two, five, eight seven.

24
00:02:04,030 --> 00:02:05,440
Nice and easy, right?

25
00:02:05,620 --> 00:02:13,680
So in some ways, you may you may really prefer this for a number of reasons over the math random.

26
00:02:13,880 --> 00:02:14,110
Four.

27
00:02:14,110 --> 00:02:19,540
Really, really short, quick things Though a lot of people, especially beginners, may consider math

28
00:02:19,690 --> 00:02:25,750
random to be a little easier because you don't have to create an instance of anything first, but then

29
00:02:25,750 --> 00:02:29,200
you miss out on these nice little convenient methods here.

30
00:02:29,830 --> 00:02:38,650
Now, internally, when I am creating this random object in this random instance, here it creates what

31
00:02:38,650 --> 00:02:45,400
is called a seed, and that is kind of like a starting point number to kind of initialize the whole

32
00:02:45,400 --> 00:02:48,250
process of generating random numbers.

33
00:02:48,460 --> 00:02:55,570
So if you don't supply a seed as I am not doing so here, it will do its best to just make one for you.

34
00:02:55,840 --> 00:03:01,930
However, you can supply a seed and it will take a number of type long.

35
00:03:02,290 --> 00:03:07,210
So I can just provided a number here and now I'm supplying the seed myself.

36
00:03:07,540 --> 00:03:07,990
OK.

37
00:03:08,140 --> 00:03:09,550
So sometimes you may want that.

38
00:03:09,550 --> 00:03:10,480
Sometimes you may not.

39
00:03:10,480 --> 00:03:13,450
It just depends on what you're what, what you're needing to do.

40
00:03:13,480 --> 00:03:16,000
Also, now I'm going to remove that.

41
00:03:16,780 --> 00:03:24,700
Now also, you don't have to supply the bound, but you may find this method is considerably, yes,

42
00:03:25,150 --> 00:03:30,130
considerably less useful to you if you don't supply a bound.

43
00:03:30,980 --> 00:03:31,690
So.

44
00:03:33,690 --> 00:03:36,180
Let me just show what you get by default.

45
00:03:37,020 --> 00:03:37,410
OK.

46
00:03:37,480 --> 00:03:45,120
So, yeah, so it's pretty big, pretty big range of values if you don't supply any bound at all.

47
00:03:45,540 --> 00:03:51,900
And if you'll notice there are a number of additional methods on here, so you can ask it for an integer

48
00:03:51,900 --> 00:03:54,150
or a Boolean or a double float.

49
00:03:54,240 --> 00:03:56,230
A number of things here bytes.

50
00:03:56,310 --> 00:03:56,760
OK.

51
00:03:57,060 --> 00:04:01,440
So I encourage you to just explore and see what you can do with this.

52
00:04:01,440 --> 00:04:08,820
But you may find yourself preferring to use this approach for at least relatively simple random number

53
00:04:08,820 --> 00:04:09,420
generation.

54
00:04:09,630 --> 00:04:17,250
Now, I will say that even this random generation approach isn't considered to be suitable for highly

55
00:04:17,250 --> 00:04:20,580
secure things like encryption and things of that sort.

56
00:04:20,790 --> 00:04:26,610
Actually, though, if you want to do that, there is another class you can use.

57
00:04:28,290 --> 00:04:30,090
There is a secure random.

58
00:04:36,920 --> 00:04:44,270
And it also can take a seed notice, though this seed is a byte array.

59
00:04:45,320 --> 00:04:46,740
Let's take a little look at this.

60
00:04:53,610 --> 00:04:58,520
All right, so this message, let me see if I can pull this out a bit more.

61
00:04:58,680 --> 00:04:59,400
OK, there we go.

62
00:04:59,850 --> 00:05:06,690
This class has a number of interesting methods on it, some that look somewhat similar to what we just

63
00:05:06,690 --> 00:05:08,700
saw on the regular random class.

64
00:05:08,790 --> 00:05:10,260
I think that's by design.

65
00:05:10,440 --> 00:05:17,220
So we'll just take take a look at the next event or the next into method here, and we'll pass in an

66
00:05:17,220 --> 00:05:18,600
upper bounds of 10.

67
00:05:18,870 --> 00:05:21,180
And let's call it a few times.

68
00:05:23,260 --> 00:05:30,280
OK, now if we take a look at the Java doc by selecting the method, putting the cursor on the method

69
00:05:30,280 --> 00:05:36,100
and then pressing F1 or control you, I think for Windows, it says that this returns a pseudo random,

70
00:05:36,100 --> 00:05:45,070
uniformly distributed and value between zero inclusive and the specified value exclusive, meaning it

71
00:05:45,070 --> 00:05:46,440
will not include the 10.

72
00:05:46,450 --> 00:05:53,620
So it will include zero up to, but not including the 10, so up to nine in this case, since it's four

73
00:05:53,620 --> 00:05:54,340
integers.

74
00:05:55,270 --> 00:05:55,600
All right.

75
00:05:55,630 --> 00:05:59,410
So I will leave it to you to, you know, read the Java doc here.

76
00:05:59,650 --> 00:06:10,120
But this approach is meant to generate a better, more even distribution of random numbers such that

77
00:06:10,360 --> 00:06:16,300
it could be utilized for certain secure functions that you may be implementing.

78
00:06:16,960 --> 00:06:17,320
All right.

79
00:06:17,320 --> 00:06:18,760
So that's going to cover this.

80
00:06:18,760 --> 00:06:25,060
I just wanted to follow up and show you a couple of other ways that you could generate random numbers,

81
00:06:25,060 --> 00:06:25,570
by the way.

82
00:06:25,600 --> 00:06:31,930
One other thing to point out as a difference between the math that random and then these two approaches

83
00:06:31,930 --> 00:06:40,210
are the math that random versus just the regular random class math that random is actually less efficient

84
00:06:40,210 --> 00:06:42,220
than using the random class.

85
00:06:42,400 --> 00:06:50,590
So random wins out over math that random in basically every way other than maybe just efficiency for

86
00:06:50,590 --> 00:06:51,970
you, the developer.

87
00:06:51,970 --> 00:06:57,910
You know, you have to make a couple extra lines, perhaps to use the random class or secure random.

88
00:06:58,150 --> 00:07:01,210
So just wanted to point that out, and I'll see you in the next one.
