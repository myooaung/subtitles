1
00:00:00,480 --> 00:00:04,020
And next up, we're going to learn about the split method.

2
00:00:04,260 --> 00:00:09,690
This is another method that's incredibly useful from time to time, and you'll see why in just a moment

3
00:00:09,690 --> 00:00:09,990
here.

4
00:00:10,260 --> 00:00:17,610
So basically, what the split method does is it takes a string and it can split that string into an

5
00:00:17,610 --> 00:00:18,300
array.

6
00:00:19,200 --> 00:00:26,550
We did briefly go over what an array is several lessons ago, but basically it is a list or a collection

7
00:00:26,580 --> 00:00:27,780
of items.

8
00:00:27,900 --> 00:00:31,890
Those could be strings or integers or objects or whatever.

9
00:00:31,890 --> 00:00:39,840
It doesn't really matter, but the split method will break apart a string into an array of strings.

10
00:00:40,260 --> 00:00:44,670
Now, the way that it does this is by looking for what's called a delimiter.

11
00:00:44,790 --> 00:00:51,960
And that's just a character or a sub string that typically would repeat itself within the greater string

12
00:00:51,960 --> 00:00:53,490
that we're trying to split up.

13
00:00:53,760 --> 00:01:00,900
Now let me let me take you through a very typical and realistic example of why we might want to do this

14
00:01:01,050 --> 00:01:04,230
and to talk about this, we'll go over to the computer here.

15
00:01:05,350 --> 00:01:11,850
So changing things up a little bit instead of starting off looking in the A.D., I have a spreadsheet

16
00:01:11,850 --> 00:01:20,520
open with excel, and what I have here is a bunch of fictitious people in the spreadsheet with last

17
00:01:20,520 --> 00:01:21,990
name, first name.

18
00:01:22,230 --> 00:01:27,270
Maybe that's a date of birth, a street address, a city and a state.

19
00:01:28,140 --> 00:01:35,760
So as a programmer, a scenario that you may encounter from time to time is that you may find yourself

20
00:01:35,760 --> 00:01:37,800
working with business people.

21
00:01:37,950 --> 00:01:41,490
That is, you know, people within a company who are not programmers.

22
00:01:41,880 --> 00:01:47,690
And one thing that business people seem to really love is working with Excel spreadsheets.

23
00:01:47,700 --> 00:01:53,130
They love Excel spreadsheets because Excel is so flexible, you can do a lot with it.

24
00:01:53,430 --> 00:01:59,340
And one of the things that you'll find business people really love to do is to store data that probably

25
00:01:59,340 --> 00:02:06,030
really belongs in a database, in a spreadsheet because they don't have easy access to work with databases

26
00:02:06,030 --> 00:02:07,470
themselves sometimes.

27
00:02:08,100 --> 00:02:16,050
And so you may find yourself being given Excel spreadsheets and being told here, take this data and

28
00:02:16,050 --> 00:02:18,510
do something magical with it in code.

29
00:02:18,690 --> 00:02:24,420
Maybe take this data from this spreadsheet and then write some code that puts it into a database, like

30
00:02:24,420 --> 00:02:31,920
importing it into a database or or who knows business people have no limits to what to what kinds of

31
00:02:31,920 --> 00:02:34,680
things they like to request us to do with their data.

32
00:02:34,980 --> 00:02:38,400
But as I said, they love working with Excel spreadsheets.

33
00:02:39,000 --> 00:02:45,990
And so this data that I have here could be quite typical of some type of data that a business person

34
00:02:45,990 --> 00:02:48,090
or a company might actually give you.

35
00:02:48,330 --> 00:02:53,420
And you may have a task of loading that data into a database, for example.

36
00:02:53,430 --> 00:03:01,710
And again, a database is just a program that usually runs on a server that is designed to house massive

37
00:03:01,710 --> 00:03:04,680
amounts of data like what we're seeing here.

38
00:03:04,690 --> 00:03:11,550
But instead of like whatever five records, it might be 50 million records or five billion records.

39
00:03:11,550 --> 00:03:12,000
Who knows?

40
00:03:12,480 --> 00:03:20,370
OK, so what I want to show you is kind of a little scenario of how you might possibly work with data

41
00:03:20,370 --> 00:03:20,940
like this.

42
00:03:21,060 --> 00:03:25,710
Now some aspects of what I'm going to show you are not going to be true to life, but it is certainly

43
00:03:25,710 --> 00:03:27,780
based on real life scenarios.

44
00:03:28,140 --> 00:03:28,440
All right.

45
00:03:28,440 --> 00:03:35,820
So let's say a business person gives you a spreadsheet with data like this and your task is to load

46
00:03:35,820 --> 00:03:40,140
it into some Java code so that you can do something with that data.

47
00:03:40,770 --> 00:03:41,070
All right.

48
00:03:41,080 --> 00:03:47,910
So one thing you'll probably need to do first is to save this data in a format that you can actually

49
00:03:47,910 --> 00:03:48,690
work with.

50
00:03:49,080 --> 00:03:55,890
And one of the most common formats to use for something like this, for a task like this is what's called

51
00:03:55,890 --> 00:04:00,030
a CSV file that stands for comma separated values.

52
00:04:00,420 --> 00:04:04,860
And so in Excel, you can go to file save as.

53
00:04:05,430 --> 00:04:09,900
And you can come down here to file format and choose CSP.

54
00:04:10,080 --> 00:04:10,590
OK.

55
00:04:10,770 --> 00:04:11,760
Just like that.

56
00:04:11,910 --> 00:04:13,450
And then you can save that file somewhere.

57
00:04:13,470 --> 00:04:15,480
So I'm going to just save it on my desktop.

58
00:04:18,150 --> 00:04:27,870
All right, so I've saved that file, and now I can open that file in an anthology, so on my Mac,

59
00:04:27,960 --> 00:04:30,960
I can actually just come up here.

60
00:04:31,860 --> 00:04:37,590
There's the file and I can right click on it and I'm actually going to open it up in.

61
00:04:39,980 --> 00:04:41,480
So I can go to other.

62
00:04:43,030 --> 00:04:44,840
And I can find Intel AJ.

63
00:04:47,640 --> 00:04:52,080
And I can open that up now, I actually have this open already, someone to hit cancel here.

64
00:04:53,180 --> 00:04:53,520
All right.

65
00:04:53,540 --> 00:05:02,480
And then so as you can see, what I have here is the last name with a comma than the first name with

66
00:05:02,480 --> 00:05:04,940
a comma than the date of birth comma.

67
00:05:04,940 --> 00:05:12,800
So each of the columns of the spreadsheet is separated by a comma, and that is why this is called a

68
00:05:12,800 --> 00:05:15,450
csb comma separated values.

69
00:05:15,470 --> 00:05:15,890
OK.

70
00:05:16,310 --> 00:05:24,530
So each record, if you want to think of these as records, each record has its individual values separated

71
00:05:24,530 --> 00:05:25,460
by commas.

72
00:05:26,390 --> 00:05:32,030
Each record itself is also separated by a new line character.

73
00:05:32,050 --> 00:05:35,510
In other words, when you get to the end of the line, there's a new line.

74
00:05:35,630 --> 00:05:41,750
Now, new line characters are not visual characters, but they cause a file like this to go to the next

75
00:05:41,750 --> 00:05:42,530
line, OK?

76
00:05:42,770 --> 00:05:46,790
And so that's how each row is being separated by a new line character.

77
00:05:47,330 --> 00:05:48,650
That's an important thing to know.

78
00:05:48,920 --> 00:05:49,330
All right.

79
00:05:49,340 --> 00:05:55,410
So we want to be able to load this data up and pass it basically.

80
00:05:55,430 --> 00:05:55,910
OK.

81
00:05:56,690 --> 00:06:03,650
So I'm going to select all of this and then I'm going to do a Command C or control C to copy that.

82
00:06:04,460 --> 00:06:09,920
And then we'll go over to our trusty text to learning class.

83
00:06:10,400 --> 00:06:15,410
And I already have a public static void main method here from whatever I did previously.

84
00:06:15,920 --> 00:06:16,310
All right.

85
00:06:16,580 --> 00:06:26,030
And so first thing I want to do is I want to make a variable, a string variable that will hold the

86
00:06:26,030 --> 00:06:27,800
text that we just copied.

87
00:06:28,310 --> 00:06:35,000
Now maybe you'll also recall that we learned how to make a variable, a string variable that is a text

88
00:06:35,000 --> 00:06:42,380
block and that is a string that is multiple lines of text instead of the typical one line.

89
00:06:42,590 --> 00:06:47,030
And the way we can do that is to first say what type of variable we want, which is a string.

90
00:06:47,390 --> 00:06:52,150
Then we will give it a name and I'll just call it text for now equals.

91
00:06:52,160 --> 00:06:59,120
And now here's the thing instead of just doing a double quotes, we will use three quotation marks and

92
00:06:59,120 --> 00:07:07,670
that tells Java and the idea that we want to create a text block or a multi line text string.

93
00:07:08,120 --> 00:07:12,650
And now I'm going to make it some space here, and I just to do that.

94
00:07:12,650 --> 00:07:21,680
By the way, I did a option command enter to make a new line above where I was, and I'm going to indent

95
00:07:21,680 --> 00:07:26,450
a couple of times with the tab key and then I can just paste just like that.

96
00:07:26,720 --> 00:07:32,090
So now I've just pasted all that text in and I'm going to go down to this last line and then closed

97
00:07:32,090 --> 00:07:34,730
this statement with a semicolon.

98
00:07:35,000 --> 00:07:41,600
All right, now I'm going to tell you, this isn't typically how a professional programmer would import

99
00:07:41,600 --> 00:07:42,710
this type of data.

100
00:07:42,980 --> 00:07:50,030
They would probably write some code or even use a library that someone else already wrote to just access

101
00:07:50,030 --> 00:07:53,870
the file directly rather than copying and pasting.

102
00:07:53,960 --> 00:07:57,680
But you haven't learned how to do those things yet, and I don't want to overwhelm you with a bunch

103
00:07:57,680 --> 00:07:59,480
of of of all of that stuff.

104
00:07:59,480 --> 00:08:05,120
So we're going to do a kind of the poor man's way and just copy and paste a few records directly into

105
00:08:05,120 --> 00:08:06,200
a string for now.

106
00:08:06,920 --> 00:08:07,250
All right.

107
00:08:07,260 --> 00:08:14,210
So now we've got a string with all of this data, and now we want to be able to parse it and use it

108
00:08:14,210 --> 00:08:14,810
somehow.

109
00:08:15,500 --> 00:08:15,920
All right.

110
00:08:15,920 --> 00:08:24,620
So the first thing we can do here, let's say we just want to be able to count how many records there

111
00:08:24,620 --> 00:08:24,950
are.

112
00:08:25,190 --> 00:08:25,640
OK.

113
00:08:26,000 --> 00:08:33,650
So we could reference this text field and then we could use the split method.

114
00:08:34,600 --> 00:08:42,370
Which is right here and what the split method takes as input is, it wants to know what's called a regular

115
00:08:42,370 --> 00:08:49,750
expression that conveys to the split method where it should split the text or where it should split

116
00:08:49,750 --> 00:08:50,440
the string.

117
00:08:50,680 --> 00:08:54,880
Now we're not going to learn much about regular expressions right now.

118
00:08:54,880 --> 00:08:59,590
We're going to do like the simplest regular expressions there are, which is basically just to use a

119
00:08:59,590 --> 00:09:02,320
string literal as our expression.

120
00:09:02,590 --> 00:09:09,130
But basically, what we want to do right now is we want to tell the split method to split this string

121
00:09:09,880 --> 00:09:14,770
at the end of each line where we go to a new line.

122
00:09:14,800 --> 00:09:15,250
OK.

123
00:09:15,520 --> 00:09:20,860
And so the way we can do that is to create a string literal here.

124
00:09:21,040 --> 00:09:26,740
And then we're going to use a special code that means new line character.

125
00:09:26,770 --> 00:09:29,620
And you can think of this more or less as the end of the line.

126
00:09:29,650 --> 00:09:30,130
OK.

127
00:09:30,190 --> 00:09:33,550
Not quite the same thing, but effectively it's pretty much the same thing.

128
00:09:33,790 --> 00:09:40,700
So there's a special character that means end of the line or new line, and that is again.

129
00:09:42,190 --> 00:09:44,380
That n stands for new line.

130
00:09:44,410 --> 00:09:51,880
OK, so you can't see it here, but there is a character here, which is the new line character.

131
00:09:52,000 --> 00:09:54,700
And that's what we're telling the split method to find.

132
00:09:54,700 --> 00:10:02,250
So we're saying go find a new line character and then split the string.

133
00:10:02,260 --> 00:10:08,650
Every place that you see new line characters into an array of strings.

134
00:10:09,160 --> 00:10:15,190
So what will result is this line will be inside of an array element.

135
00:10:15,670 --> 00:10:19,450
This line will be in another element and so on and so forth.

136
00:10:19,870 --> 00:10:20,260
All right.

137
00:10:20,830 --> 00:10:22,720
And I can close this now.

138
00:10:23,050 --> 00:10:30,820
The split method is going to return an array to us, so we want to capture that array in another variable.

139
00:10:31,270 --> 00:10:39,040
And I can do that easily with option command the four variable or alt command V. for Windows and Linux.

140
00:10:40,550 --> 00:10:42,470
I mean, let me do that one more time, by the way.

141
00:10:43,520 --> 00:10:47,510
So I have my cursor at the end of Line 12 here.

142
00:10:47,540 --> 00:10:47,970
OK.

143
00:10:47,990 --> 00:10:50,810
And then I'm doing option command the.

144
00:10:53,490 --> 00:10:53,910
All right.

145
00:10:54,180 --> 00:11:02,940
And now the aid is wanting me to name this new array variable, and I'm going to name it people.

146
00:11:04,720 --> 00:11:07,750
Because what's coming out of here is.

147
00:11:08,860 --> 00:11:13,630
A representation of a person of a bunch of people, actually.

148
00:11:15,840 --> 00:11:17,640
Now, of course, I could have name that anything.

149
00:11:19,390 --> 00:11:19,870
All right.

150
00:11:20,800 --> 00:11:21,700
And now.

151
00:11:22,670 --> 00:11:26,660
Now that I have an array I can call methods on that array.

152
00:11:26,900 --> 00:11:31,200
And the first thing I want to do is just determine how many people do I have.

153
00:11:31,490 --> 00:11:34,810
And so and maybe I want to print that out so I can do it.

154
00:11:35,030 --> 00:11:35,960
So you T.

155
00:11:37,560 --> 00:11:42,210
And then reference the people array that links.

156
00:11:43,490 --> 00:11:43,910
OK.

157
00:11:44,120 --> 00:11:50,210
And this will just give me a chance to see if if I'm parsing this properly, to even be able to get

158
00:11:50,210 --> 00:11:53,180
that much information, so I'm going to go ahead and run this now.

159
00:11:54,550 --> 00:11:56,140
OK, and I get five.

160
00:11:56,620 --> 00:12:01,270
And let's see one, two, three, four or five, so looks like that's probably working.

161
00:12:01,660 --> 00:12:02,590
All right, cool.

162
00:12:03,190 --> 00:12:10,060
So we just passed this big, huge string into individual rows.

163
00:12:10,570 --> 00:12:13,000
And so that's one thing we can do with Split.

164
00:12:13,180 --> 00:12:17,980
However, there's an even more typical thing that you'll usually see with Split, and that would be

165
00:12:17,980 --> 00:12:22,970
more like splitting out the individual columns of a row.

166
00:12:22,990 --> 00:12:27,010
That's like the most common thing I think you'll typically see.

167
00:12:27,490 --> 00:12:35,170
So let's do that now, so we can do that by splitting out the individual rows.

168
00:12:35,170 --> 00:12:40,060
So we have the individual rows in this people array already.

169
00:12:40,450 --> 00:12:46,150
And if we want to access any one of these rows, we can do that.

170
00:12:46,540 --> 00:12:52,570
Again, I don't know if you'll remember from the brief array lesson that we had, but if you want to

171
00:12:52,570 --> 00:13:02,740
do that, you can access one row or one element of an array with the square brackets symbol just like

172
00:13:02,740 --> 00:13:03,100
this.

173
00:13:03,370 --> 00:13:08,350
So I'm using the square brackets not to be confused by curly braces, right?

174
00:13:08,390 --> 00:13:09,430
Which is different.

175
00:13:09,700 --> 00:13:11,440
We want the square brackets.

176
00:13:12,190 --> 00:13:18,070
Interestingly, the square brackets and the curly braces are on the same keys, though, and then we

177
00:13:18,070 --> 00:13:23,320
supply an index of which row we want or which element we want.

178
00:13:23,410 --> 00:13:23,860
OK.

179
00:13:24,040 --> 00:13:29,650
So if we wanted this string here, just this first row, that would be zero.

180
00:13:29,830 --> 00:13:32,200
This would be one, two, three and four.

181
00:13:32,350 --> 00:13:33,730
So let's take the last one.

182
00:13:33,730 --> 00:13:36,300
Let's take index for George Jetson.

183
00:13:36,310 --> 00:13:38,020
OK, so that would be four.

184
00:13:38,140 --> 00:13:41,650
And that's four because array indexes are zero based.

185
00:13:41,650 --> 00:13:46,780
So the first row is zero zero one two three four is George Jetson.

186
00:13:47,050 --> 00:13:49,450
And so that's what we're referring to here.

187
00:13:50,230 --> 00:13:52,480
So first, let's just print this out.

188
00:13:52,570 --> 00:13:53,460
So I'm going to do an s.

189
00:13:53,470 --> 00:14:00,190
So you t just like this and then hit enter and then I'll just delete a little bit here and put this

190
00:14:00,190 --> 00:14:03,400
inside of the method just like that.

191
00:14:03,760 --> 00:14:09,430
Let's see what this does if I just print out that whole string just like that.

192
00:14:11,770 --> 00:14:12,580
OK, cool.

193
00:14:12,670 --> 00:14:18,250
So we get just that one line of text just as it exists here.

194
00:14:19,350 --> 00:14:19,740
Cool.

195
00:14:20,190 --> 00:14:20,850
Now.

196
00:14:22,230 --> 00:14:32,160
Let's say that we want to access the individual fields of George Jetson, so we could do that the same

197
00:14:32,160 --> 00:14:41,050
way that we split the original text or, well, pretty much the same way so we could reference people.

198
00:14:41,610 --> 00:14:45,360
Curly brace or square bracket four, OK.

199
00:14:45,900 --> 00:14:48,240
And then from here we can do.

200
00:14:49,080 --> 00:14:56,010
So this would return a string and then we can call the split method again on this string by just using

201
00:14:56,010 --> 00:14:58,380
a period split.

202
00:14:58,800 --> 00:15:01,130
And now we need to tell it, Well, what do we want to split it on?

203
00:15:01,140 --> 00:15:05,580
So what we're trying to get here is the individual fields, right?

204
00:15:06,030 --> 00:15:14,340
Each part that is separated by a comma, and because each part is separated by a comma, it is the comma

205
00:15:14,340 --> 00:15:16,920
that we want to use to split on.

206
00:15:16,950 --> 00:15:19,440
We want to split wherever there is a comma.

207
00:15:19,710 --> 00:15:28,230
And so we can do that again by using a string literal so quotes and then just put a comma there just

208
00:15:28,230 --> 00:15:28,890
like that.

209
00:15:29,070 --> 00:15:39,300
So that will return an array of strings, and each element in that array will be each column of data.

210
00:15:40,400 --> 00:15:45,350
In this one row now, again, we'll need to capture that.

211
00:15:45,860 --> 00:15:53,930
So again, with my cursor at the end of this line, 15, I'm going to do an option, command the four

212
00:15:53,930 --> 00:15:54,590
variable.

213
00:15:55,040 --> 00:16:00,440
And then I need to name this variable and I'm going to just call it George.

214
00:16:03,170 --> 00:16:08,480
OK, so I have an array variable called George.

215
00:16:08,810 --> 00:16:14,090
It is an array because they have these square braces, square brackets here.

216
00:16:14,330 --> 00:16:20,480
It is an array of strings, meaning it is an array that holds strings in each element.

217
00:16:21,020 --> 00:16:21,500
OK.

218
00:16:21,950 --> 00:16:28,160
And now let's say that I just want to print out the street address.

219
00:16:28,700 --> 00:16:29,180
OK.

220
00:16:29,630 --> 00:16:31,190
So what index is that?

221
00:16:32,660 --> 00:16:35,750
So that would be zero one.

222
00:16:36,780 --> 00:16:37,410
To.

223
00:16:38,700 --> 00:16:41,070
Three index of three.

224
00:16:41,730 --> 00:16:44,960
OK, so if I want to print that out, I can do it.

225
00:16:45,090 --> 00:16:46,050
So you T.

226
00:16:47,700 --> 00:16:54,930
Now I'm going to reference the data that is in this last array, which is here, George.

227
00:16:56,230 --> 00:17:05,080
So, George, then a square brace, and I want zero one to the the index three.

228
00:17:05,590 --> 00:17:06,080
All right.

229
00:17:06,100 --> 00:17:07,600
And so if we run this.

230
00:17:08,810 --> 00:17:12,770
And there we go, we've got 555 M.A. Street.

231
00:17:13,280 --> 00:17:22,070
So now I think you can see that you could randomly extract any field from any row in this data using

232
00:17:22,070 --> 00:17:24,320
the split method plus an array.

233
00:17:24,590 --> 00:17:28,040
And that's one of the things that makes this so powerful.

234
00:17:28,520 --> 00:17:37,340
OK, now soon we will learn how to loop through code so that we could write code that would automatically

235
00:17:37,340 --> 00:17:43,220
just loop through each row and grab columns and do whatever we wanted with them.

236
00:17:43,460 --> 00:17:48,560
So if we needed to put this data into a database, for example, we could write code that would loop

237
00:17:48,560 --> 00:17:56,690
through each row, grab each column, put each row here into a row in a database, one column at a time

238
00:17:56,690 --> 00:17:58,280
or something, something like that.

239
00:17:58,520 --> 00:18:01,880
So there's a lot of powerful things that we could do with these techniques.

240
00:18:02,480 --> 00:18:09,890
OK, one more thing I want to show real quick is that the split method has another variation on it as

241
00:18:09,890 --> 00:18:10,370
well.

242
00:18:10,550 --> 00:18:14,750
So I'm going to put my my cursor there, and I'm going to show.

243
00:18:15,020 --> 00:18:19,550
So this is the version of the split method that we're currently using, but there's a second version

244
00:18:19,700 --> 00:18:22,940
that takes a second parameter and that is a limit.

245
00:18:23,120 --> 00:18:32,300
And all that is is it just allows us to limit how many elements there can be in the array.

246
00:18:32,930 --> 00:18:37,820
I've never personally found a need to use this, but let me just show you real quick.

247
00:18:38,090 --> 00:18:44,210
So here we did a split to split this text out into the rows, and we ended up with five rows because

248
00:18:44,210 --> 00:18:51,230
we didn't limit anything, but I could have told it limit the number of elements that you search for

249
00:18:51,230 --> 00:18:52,940
or in return to three.

250
00:18:53,690 --> 00:18:54,140
OK.

251
00:18:54,380 --> 00:18:55,220
Just like that.

252
00:18:55,610 --> 00:18:57,530
Now this is going to do some weird things.

253
00:18:57,650 --> 00:18:59,150
So let's just see what it does.

254
00:18:59,420 --> 00:19:00,110
I'll run it.

255
00:19:01,350 --> 00:19:06,360
OK, so we ended up with an index out of bounds error.

256
00:19:06,720 --> 00:19:13,170
And the reason we did is because let's see, this says that it happened on Line 14, which is here.

257
00:19:13,560 --> 00:19:18,570
We tried to access the Fifth Element in this array.

258
00:19:19,170 --> 00:19:23,760
However, we limited the array to only having three elements.

259
00:19:23,760 --> 00:19:29,220
And so we exceeded the bounds of this array, which is a no, no, you can't do that.

260
00:19:29,550 --> 00:19:35,490
So one thing we could do here is to just change this array to not exceed the limit.

261
00:19:36,060 --> 00:19:37,560
And I'll do that, by the way.

262
00:19:37,590 --> 00:19:42,030
I'm going to show you another little neat kind of thing that the ADT can do if I want to change this,

263
00:19:42,030 --> 00:19:47,580
for which I have in two places, there's a couple of ways I could do that, but I'm going to put my

264
00:19:47,580 --> 00:19:53,100
cursor right there on that four and then I'm going to put my cursor on this other four while holding

265
00:19:53,100 --> 00:20:00,540
down on option or alt and shift, and I'm going to select this right at the back of this other four.

266
00:20:00,570 --> 00:20:04,680
Now what I have is two cursors at the same time.

267
00:20:04,860 --> 00:20:10,680
And the reason I wanted to cursors both on the same at the end of this four is so that I could edit

268
00:20:10,680 --> 00:20:16,710
them both at the same time so I can hit the backspace key once and delete both of them, some editing

269
00:20:16,710 --> 00:20:19,770
in multiple places in the ad at the same time here.

270
00:20:19,770 --> 00:20:21,900
And then I'm going to put a two instead.

271
00:20:22,320 --> 00:20:22,760
OK.

272
00:20:22,950 --> 00:20:25,350
And then when I'm done editing, I can hit escape.

273
00:20:27,250 --> 00:20:29,860
And now and now things go back to normal.

274
00:20:29,980 --> 00:20:32,930
So that's a nice little capability of the I.D..

275
00:20:33,400 --> 00:20:33,720
All right.

276
00:20:33,730 --> 00:20:35,330
So let's run this again.

277
00:20:35,350 --> 00:20:39,130
I suspect they're still going to be something else a little bit weird, but let's just see.

278
00:20:39,340 --> 00:20:40,510
So we'll run this again.

279
00:20:41,320 --> 00:20:41,830
OK.

280
00:20:42,430 --> 00:20:43,270
Let's see what we got here.

281
00:20:43,270 --> 00:20:49,850
So we got three for the number of rows, which is sort of correct because we limited it.

282
00:20:50,110 --> 00:20:56,020
However, the last row is actually going to be it's going to be zero hour, it's going to be one two.

283
00:20:56,020 --> 00:20:59,950
And then the third row would be actually all of this now.

284
00:21:00,190 --> 00:21:02,650
That's how the limit parameter works.

285
00:21:03,010 --> 00:21:08,170
It doesn't stop here and then just ignore these two.

286
00:21:08,500 --> 00:21:11,710
Instead, it grabs one.

287
00:21:12,930 --> 00:21:14,280
And then to.

288
00:21:15,270 --> 00:21:22,110
And then three, all the rest of it, that's what it does, not the most useful thing in this particular

289
00:21:22,110 --> 00:21:22,530
case.

290
00:21:22,740 --> 00:21:24,300
So beware of that.

291
00:21:25,650 --> 00:21:27,660
And because that's how it behaves.

292
00:21:28,050 --> 00:21:35,190
Let's see here when we told it to print index two, which is the third because it's zero based.

293
00:21:35,250 --> 00:21:35,610
Right?

294
00:21:35,700 --> 00:21:38,430
Zero one two.

295
00:21:38,580 --> 00:21:45,960
When we told it to print two, it printed Flintstone Rubble, Barney Jetson, George, all all of that.

296
00:21:46,140 --> 00:21:46,590
OK?

297
00:21:47,400 --> 00:21:58,020
And then when we split the third element of the people array by commas and then asked it to give us

298
00:21:58,020 --> 00:22:08,910
the fourth element in this array that started here because this is now the third element in people.

299
00:22:09,480 --> 00:22:21,240
And and then breaking this into commas, the fourth element in here would be one to three.

300
00:22:22,680 --> 00:22:25,740
Four, which is what we've got right there.

301
00:22:26,520 --> 00:22:29,880
All right, so that's going to cover it for the split method.

302
00:22:30,030 --> 00:22:35,250
Like I said, this is another extremely useful method that you will encounter from time to time.

303
00:22:35,460 --> 00:22:40,320
Now I will let it be said, I'm just going to reiterate one thing that I think I mentioned already earlier

304
00:22:40,470 --> 00:22:49,710
in real life, if we really wanted to take data from a spreadsheet and get it into our Java code somehow

305
00:22:49,710 --> 00:22:55,050
so that we could manipulate it or work with it, then especially if it's like a lot of rows of data,

306
00:22:55,050 --> 00:22:59,630
not just five, but it could be hundreds or thousands or we have to do it periodically.

307
00:22:59,850 --> 00:23:03,000
We almost certainly wouldn't really want to do it this way.

308
00:23:03,180 --> 00:23:09,480
Instead, we would probably use some third party library code, and that means code that was written

309
00:23:09,480 --> 00:23:13,950
by someone else that they make available for us to use for free usually.

310
00:23:14,220 --> 00:23:21,690
And we'd probably use some other person's code with methods that we can easily utilize to open up that

311
00:23:21,690 --> 00:23:27,010
CSV file and then retrieve the lines of code that way.

312
00:23:27,330 --> 00:23:33,300
But still, what you're seeing here are some of the building blocks of how we could do some at least

313
00:23:33,300 --> 00:23:34,890
simple things on our own.

314
00:23:35,130 --> 00:23:35,450
All right.

315
00:23:35,460 --> 00:23:37,980
So that's going to wrap it up and I will see you in the next one.
