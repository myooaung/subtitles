WEBVTT
1
00:00:00.300 --> 00:00:05.970
So in the last lesson, we created a unit test to set us up for that scenario where we're trying to

2
00:00:05.970 --> 00:00:11.880
enable ourselves to pass in a first name of an employee and then get back out the associated salary

3
00:00:11.880 --> 00:00:12.960
for that employee.

4
00:00:13.200 --> 00:00:18.870
And so we wrote that test, we implemented some code that would actually let us do this by iterating

5
00:00:18.870 --> 00:00:21.720
currently over the tree set, right?

6
00:00:21.720 --> 00:00:25.350
So we just loop over it and we search and say, Hey, is this the person we're looking for?

7
00:00:25.350 --> 00:00:25.890
Is this one?

8
00:00:25.890 --> 00:00:26.400
Is this one?

9
00:00:26.400 --> 00:00:26.970
Is this one?

10
00:00:27.150 --> 00:00:30.660
When we find the correct one that's down here in this get salary method, right?

11
00:00:30.660 --> 00:00:37.200
So we're looping over these people asking if any of their first names match the first name that we happen

12
00:00:37.210 --> 00:00:38.140
to be searching for.

13
00:00:38.190 --> 00:00:41.430
Then we return the salary, and that does work.

14
00:00:41.430 --> 00:00:48.390
But I was pointing out that that's not particularly an efficient thing to do in real life, especially

15
00:00:48.810 --> 00:00:52.590
if you could potentially have a really large list.

16
00:00:52.920 --> 00:00:59.340
So now we're going to learn how to do this in probably a better way in many cases by utilizing an actual

17
00:00:59.340 --> 00:00:59.760
map.

18
00:01:00.300 --> 00:01:08.760
So the way we will do this is to come back up here to where we are populating our tree set.

19
00:01:09.030 --> 00:01:15.870
So to do so, we are currently looping over the individual employees in this string, as you already

20
00:01:15.870 --> 00:01:16.350
know.

21
00:01:17.160 --> 00:01:22.380
And then we're creating an individual employee for each one of the strings, for each one of the items

22
00:01:22.380 --> 00:01:23.250
in that string.

23
00:01:23.520 --> 00:01:28.200
Here's our employee and then we're casting, if we don't remember if we were doing that for a particular

24
00:01:28.200 --> 00:01:31.830
reason, because currently we don't really need that, but whatever.

25
00:01:32.010 --> 00:01:36.720
Anyway, and then we're adding it to this collection here, which is currently a tree set.

26
00:01:36.960 --> 00:01:44.790
So what we can do now is, I think we're going to add to this rather than change or take away.

27
00:01:45.060 --> 00:01:52.050
So I think what we'll want to do is create a an actual map, an instance of an actual map.

28
00:01:52.440 --> 00:01:59.970
And in addition to adding these people to this employee collection, we can populate the map at the

29
00:01:59.970 --> 00:02:01.210
same time.

30
00:02:01.260 --> 00:02:01.770
OK.

31
00:02:02.130 --> 00:02:09.030
So to do that, all we need to do is I'm going to just come right here after where we are currently

32
00:02:09.030 --> 00:02:13.590
defining the tree set and populating that I'll make a new line.

33
00:02:14.640 --> 00:02:16.320
And let's just define a map.

34
00:02:16.530 --> 00:02:19.870
Now a map, I will remind you a map.

35
00:02:19.890 --> 00:02:26.580
The map interface maps a key object to a value object.

36
00:02:26.580 --> 00:02:32.940
So unlike collections which just hold a list of single objects, right?

37
00:02:33.660 --> 00:02:38.910
A map is a list of pairs of objects.

38
00:02:39.060 --> 00:02:39.600
OK.

39
00:02:39.870 --> 00:02:42.600
A key object and a value object.

40
00:02:42.960 --> 00:02:46.620
So when we are defining our map, we need to.

41
00:02:46.620 --> 00:02:54.780
Also, it is helpful for us to use generics to define what the types of the key, what the type of the

42
00:02:54.780 --> 00:02:57.260
key is and the type of the value.

43
00:02:57.280 --> 00:02:58.860
So you'll see that right here.

44
00:02:58.860 --> 00:03:04.230
So I'm going to say that we're going to create a variable of type map.

45
00:03:04.580 --> 00:03:09.060
I'm going to use a generic, though, and you can see the hint right here can be four key and value,

46
00:03:09.060 --> 00:03:12.330
right with the less than and greater than symbols here.

47
00:03:12.540 --> 00:03:16.890
So if I do this, then I can say what the two types are going to be.

48
00:03:17.010 --> 00:03:20.400
Now our keys are going to be first names.

49
00:03:20.400 --> 00:03:22.200
A first name is text.

50
00:03:22.260 --> 00:03:26.730
Text is best represented as a string, right?

51
00:03:27.510 --> 00:03:32.160
And so my key data type for the generic will be string.

52
00:03:32.670 --> 00:03:39.960
And then the what we're wanting to map to is when we pass in a name, a first name, we will get back

53
00:03:39.960 --> 00:03:41.220
out a salary.

54
00:03:41.550 --> 00:03:46.320
The salaries in this application are currently being modeled as integers.

55
00:03:46.740 --> 00:03:55.620
However, we have a problem and that is that in our generics, we can only specify classes and not primitives.

56
00:03:55.860 --> 00:04:03.810
However, as you should know, by now, all of the primitive numeric data types have an accompanying

57
00:04:03.810 --> 00:04:14.370
wrapper class type, and the JVM or Java system can automatically essentially wrap and unwrap, which

58
00:04:14.370 --> 00:04:16.260
is called boxing or unboxing.

59
00:04:17.070 --> 00:04:17.330
It can.

60
00:04:17.640 --> 00:04:21.750
It can automatically wrap and unwrap those data types for us at will.

61
00:04:21.960 --> 00:04:30.600
So even though our salaries are primitive integers, we can specify capital integer for the data type

62
00:04:30.600 --> 00:04:30.990
there.

63
00:04:31.020 --> 00:04:31.440
OK.

64
00:04:31.530 --> 00:04:36.390
So this is saying we want to map strings to integers.

65
00:04:36.600 --> 00:04:43.860
Now you'll notice that I'm getting a red mark here for the map because that interface needs to be imported.

66
00:04:44.040 --> 00:04:46.350
So I can do that by simply doing a.

67
00:04:47.940 --> 00:04:51.330
Option return and then choose import.

68
00:04:51.750 --> 00:04:52.290
There we go.

69
00:04:52.410 --> 00:04:52.830
OK.

70
00:04:54.390 --> 00:04:58.590
And then I need to name the variable, but I don't want to make a really long name here.

71
00:04:58.590 --> 00:05:02.610
I could name it something like name to salary map.

72
00:05:03.060 --> 00:05:07.290
I think I may just call it salary map.

73
00:05:07.800 --> 00:05:09.840
Now I will make a note here.

74
00:05:10.080 --> 00:05:14.340
I can sometimes be a bit of a stickler, and I've mentioned this once before in one of the previous

75
00:05:14.340 --> 00:05:15.990
and one of the previous lessons.

76
00:05:17.010 --> 00:05:26.490
I'm often not a fan of pudding, of naming my variables with with the name of the data type that I'm

77
00:05:26.490 --> 00:05:27.690
going to be using.

78
00:05:27.690 --> 00:05:32.190
It just depends on what I mean by that or what someone else means by that.

79
00:05:32.200 --> 00:05:40.230
So oftentimes I mentioned before, sometimes people programmers will create a an array list variable

80
00:05:40.230 --> 00:05:41.940
like employees or something.

81
00:05:42.060 --> 00:05:46.350
And instead of naming it employees, they'll call it employee list.

82
00:05:46.980 --> 00:05:55.140
I'm generally not a fan of that because I think it's more helpful to psychologically think of these

83
00:05:55.140 --> 00:05:58.230
variables in terms of what they represent.

84
00:05:58.260 --> 00:06:00.450
Now again, I said this before.

85
00:06:00.630 --> 00:06:09.390
If that concept represents a list to you in the sense of like a, you know, a sheet with a list of

86
00:06:09.390 --> 00:06:09.780
names.

87
00:06:09.810 --> 00:06:10.620
OK, fine.

88
00:06:10.860 --> 00:06:15.570
But if you're putting the word list on there because you're just thinking about the fact that you're

89
00:06:15.570 --> 00:06:20.970
going to use an array list class, that's a bad reason to put the word list on there.

90
00:06:20.970 --> 00:06:27.900
So it's kind of a semantic thing here, but I just encourage you to think more in terms of the concepts

91
00:06:27.900 --> 00:06:29.560
rather than the classes.

92
00:06:29.580 --> 00:06:30.060
OK.

93
00:06:30.360 --> 00:06:37.830
In this case, I'm going to use the word map more conceptually than rather than because of the class.

94
00:06:38.880 --> 00:06:46.770
I want to convey that this is a variable that will hold a mapping of one data type or of one set of

95
00:06:46.770 --> 00:06:47.470
data to the other.

96
00:06:47.490 --> 00:06:52.710
Now I'm being a little lazy here, and I'm not specifying what both of those types of data are.

97
00:06:52.980 --> 00:06:57.600
I could say employee salary map, right?

98
00:06:57.870 --> 00:07:00.900
And maybe I should, but I'm being a little lazy now.

99
00:07:02.280 --> 00:07:10.830
OK, so salary map for me for now equals new and now we get to choose.

100
00:07:12.310 --> 00:07:18.220
And now we get to choose an implementation of the map interface and the first implementation we're going

101
00:07:18.220 --> 00:07:22.300
to work with is the fastest one generally, which is the hash map.

102
00:07:22.330 --> 00:07:22.710
OK.

103
00:07:22.870 --> 00:07:27.310
And I'm already being presented with it, so I'm just going to select it here now.

104
00:07:27.310 --> 00:07:32.950
If you're not being presented with that, then you can just type in hash and you can just start typing

105
00:07:32.950 --> 00:07:33.610
in hash map.

106
00:07:33.610 --> 00:07:36.340
And the ADP will probably catch up with you there.

107
00:07:36.550 --> 00:07:38.260
And then I will hit return.

108
00:07:38.980 --> 00:07:39.910
And there we go.

109
00:07:42.190 --> 00:07:44.200
And closed that off in that way.

110
00:07:45.220 --> 00:07:45.640
All right.

111
00:07:45.670 --> 00:07:49.000
Next up, we need to actually populate this guy.

112
00:07:49.420 --> 00:07:54.820
Now we've got this loop down here, this while loop where we're that we're currently using to populate

113
00:07:54.820 --> 00:07:57.460
our set already.

114
00:07:57.820 --> 00:08:03.700
And so my inclination is to just piggyback off of the fact that we're already doing that here in this

115
00:08:03.700 --> 00:08:05.650
loop and add in one more bit here.

116
00:08:05.650 --> 00:08:12.400
And in fact, Line 48 is where we're adding the current employee to the employee's collection or the

117
00:08:12.400 --> 00:08:13.300
employee set.

118
00:08:13.510 --> 00:08:21.460
So what I'm inclined to do is make a new line here and add in the mapping as well for each and every

119
00:08:21.460 --> 00:08:22.150
employee.

120
00:08:22.510 --> 00:08:27.790
So what we're going to be saying here is that for this given employee, get the first name, get the

121
00:08:27.790 --> 00:08:30.570
salary, add them to this map.

122
00:08:30.580 --> 00:08:31.570
That's basically it.

123
00:08:31.870 --> 00:08:36.820
And we can do that by referencing the map salary map dot.

124
00:08:37.030 --> 00:08:42.160
Now we don't use the add method here, and in fact, there is not an ad method.

125
00:08:42.400 --> 00:08:45.340
Instead, we use a method called put.

126
00:08:45.580 --> 00:08:46.960
That's just how you do it.

127
00:08:47.530 --> 00:08:54.850
So put and then you'll see here that the the put method takes the key and the value.

128
00:08:55.210 --> 00:08:57.610
So I'll get my parentheses here.

129
00:08:57.790 --> 00:08:58.900
So for the key?

130
00:08:59.080 --> 00:09:03.400
One other thing to note where we're casting this employee to type employee.

131
00:09:03.400 --> 00:09:09.190
So we have the same access to the first name and last name, as well as the salary, just as we did

132
00:09:09.190 --> 00:09:11.500
down here in our get salary method.

133
00:09:11.540 --> 00:09:13.990
In fact, we're doing it in exactly the same way.

134
00:09:14.710 --> 00:09:15.880
All right, so put.

135
00:09:16.330 --> 00:09:20.110
So I will reference the EMP variable here.

136
00:09:20.470 --> 00:09:28.030
First name comma, EMP Dot, get salary and then close that off.

137
00:09:29.290 --> 00:09:29.630
All right.

138
00:09:29.650 --> 00:09:35.290
So just make a note of what this is equivalent to doing is just making a list as we're going through

139
00:09:35.290 --> 00:09:41.470
each employee and we're writing first name, the first name of the employee in one column and then the

140
00:09:41.470 --> 00:09:44.950
salary associated with that employee in the second column, right?

141
00:09:45.100 --> 00:09:51.010
And then because all of this is happening in a loop, then you'll go down to the next line and then

142
00:09:51.010 --> 00:09:53.500
do the same thing for a for the next employee.

143
00:09:53.540 --> 00:09:53.740
Right.

144
00:09:53.740 --> 00:10:01.390
And so you're just continuously populating this map with this mapping of first name to salary, right?

145
00:10:01.750 --> 00:10:08.230
And so when that loop is done running, all of those employees will be populated into the map with their

146
00:10:08.230 --> 00:10:09.430
first names and salaries.

147
00:10:10.630 --> 00:10:17.500
Now we have to address a problem that we already addressed earlier, and that is this is all well and

148
00:10:17.500 --> 00:10:17.860
good.

149
00:10:17.860 --> 00:10:24.100
We're populating this map, but how do we get the data out of the map, right, which is down here in

150
00:10:24.100 --> 00:10:26.110
this get salary method?

151
00:10:26.230 --> 00:10:32.110
So currently we're creating that map as a local variable in the main method, and therefore it will

152
00:10:32.110 --> 00:10:35.870
not be accessible to us here in the get salary method.

153
00:10:35.890 --> 00:10:38.980
So I think you should know how we can solve this problem now.

154
00:10:38.990 --> 00:10:41.650
Think about it for a moment and then come back to me.

155
00:10:43.850 --> 00:10:49.880
OK, so hopefully you figured that one out because we just got finished doing it in the last lesson,

156
00:10:49.880 --> 00:10:50.240
right?

157
00:10:50.540 --> 00:10:58.770
So what we can do is we can simply convert this salary map variable into a field of the class again.

158
00:10:59.090 --> 00:11:05.060
And so we will select it, go down to refactor and introduce field.

159
00:11:06.550 --> 00:11:10.330
And then I will accept the default and simply hit return.

160
00:11:11.170 --> 00:11:11.770
There we go.

161
00:11:11.800 --> 00:11:17.950
And so now all the stuff that was to the left of this has disappeared and moved up to the very top of

162
00:11:17.950 --> 00:11:23.260
the class right underneath the previous variable that we also introduced as a field.

163
00:11:23.800 --> 00:11:28.690
And so now we can go down to our get salary method here and guess what we can do now.

164
00:11:28.690 --> 00:11:30.010
This is going to be pretty fun.

165
00:11:30.310 --> 00:11:33.790
We can actually take all of this.

166
00:11:36.410 --> 00:11:41.360
And get rid of it, because we don't need to do any of that now, and in fact, I'm going to go one

167
00:11:41.360 --> 00:11:48.530
step further and get rid of this return here like that and then I will make a new line above here.

168
00:11:49.130 --> 00:11:53.240
And so now what we can do is simply, well, actually, I'll just show you.

169
00:11:54.290 --> 00:11:58.370
So the variable was called a salary map.

170
00:11:59.210 --> 00:12:00.770
Notice, I'm just typing S.M.

171
00:12:00.770 --> 00:12:07.490
And then the ADP says here, here's a variable that matches the S.M. that you're referencing, and I'll

172
00:12:07.490 --> 00:12:12.620
hit enter salary map dot now to get anything out of this map.

173
00:12:12.650 --> 00:12:17.690
I use the get method get and then I pass in a key.

174
00:12:18.170 --> 00:12:22.640
And the key is of whatever data type I care about.

175
00:12:22.970 --> 00:12:25.690
So in this case, the a string.

176
00:12:25.730 --> 00:12:27.420
OK, so it's the first name.

177
00:12:27.440 --> 00:12:28.400
OK, that's the key.

178
00:12:28.850 --> 00:12:35.360
So get so I can pass in this first name here and this is going to return.

179
00:12:35.360 --> 00:12:41.000
If it finds a match, it's going to return an integer so I can just return that.

180
00:12:41.750 --> 00:12:43.850
And now let's see if this still works.

181
00:12:43.850 --> 00:12:48.560
So if I rerun this, it should hopefully pass if this is working.

182
00:12:50.380 --> 00:12:51.610
Hey, there we go.

183
00:12:52.570 --> 00:12:52.930
Right.

184
00:12:54.000 --> 00:13:01.260
So look at how much how much code we got rid of by just adding essentially two lines of code up here,

185
00:13:01.260 --> 00:13:01.620
right?

186
00:13:01.830 --> 00:13:03.930
We create a new hash map.

187
00:13:04.260 --> 00:13:07.480
We populate the hash map here one time.

188
00:13:08.280 --> 00:13:14.800
Now we can do as many lookups as we want down here, and they will be blazingly fast.

189
00:13:14.820 --> 00:13:15.300
Now.

190
00:13:17.020 --> 00:13:21.940
Because we're using a hash map, which are really, really fast, they're doing exactly this type of

191
00:13:21.940 --> 00:13:22.450
look up.

192
00:13:22.780 --> 00:13:28.960
And so I hope this is making it clear to you how using a map can be quite helpful.

193
00:13:29.470 --> 00:13:35.950
Any time you need to do frequent lookups of data that isn't going to change very often, right, you

194
00:13:35.950 --> 00:13:38.860
can just populate all that data into the map.

195
00:13:39.070 --> 00:13:42.610
And then bam, bam, bam, just look things up very, very quickly.

196
00:13:43.210 --> 00:13:46.970
OK, so I'm going to go ahead and just show you real quick now.

197
00:13:46.990 --> 00:13:56.380
Obviously, we could swap out the implementation of this map for one of the other two most commonly

198
00:13:56.380 --> 00:13:57.340
used ones.

199
00:13:57.520 --> 00:14:05.980
So besides hash map, which again is the fastest typically, but if we were to print out this hash map

200
00:14:05.980 --> 00:14:09.510
and in fact, here, let's let's do that real quick.

201
00:14:09.520 --> 00:14:11.800
Let's print out this hash map.

202
00:14:12.280 --> 00:14:24.430
I don't know down here after the size, so I will just do this system that our print line salary map.

203
00:14:25.330 --> 00:14:26.140
Just like that.

204
00:14:26.680 --> 00:14:28.930
So let's see what that what that prints out.

205
00:14:29.380 --> 00:14:33.760
So right now, I'm going to just run the program from here.

206
00:14:33.760 --> 00:14:37.540
I'm just going to run the main method from here, so we won't be running our test.

207
00:14:37.540 --> 00:14:39.910
We'll just run the the main method now.

208
00:14:40.900 --> 00:14:41.320
OK.

209
00:14:41.560 --> 00:14:47.140
So after the size, we're printing out the salary map.

210
00:14:47.140 --> 00:14:49.330
And so that's this guy right down here.

211
00:14:49.330 --> 00:14:52.210
So there's R in a which is set to zero.

212
00:14:52.240 --> 00:14:53.920
So see how it presents these things.

213
00:14:54.220 --> 00:14:57.880
The key and then an equal sign and then the value right?

214
00:14:57.880 --> 00:14:59.760
Barney equals 6500.

215
00:14:59.770 --> 00:15:01.360
Fred five equals eight thousand.

216
00:15:01.360 --> 00:15:05.860
So notice they're not in any easily discernible order, right?

217
00:15:05.860 --> 00:15:07.690
Because it's using a hash map.

218
00:15:07.870 --> 00:15:15.490
They are really in the order of the indexing algorithm for the hashes themselves, if that's meaningful

219
00:15:15.490 --> 00:15:16.120
to you, right?

220
00:15:17.590 --> 00:15:17.890
Yeah.

221
00:15:17.890 --> 00:15:18.340
So.

222
00:15:18.520 --> 00:15:21.370
So not in any discernible order.

223
00:15:22.660 --> 00:15:26.980
And that doesn't matter for our purposes in this application right now.

224
00:15:27.070 --> 00:15:29.210
We just want something that's really, really fast.

225
00:15:29.210 --> 00:15:31.120
Then this will be super, super fast.

226
00:15:31.810 --> 00:15:38.500
However, we can change this implementation, as you know, and I mentioned in the intro video for in

227
00:15:38.500 --> 00:15:45.850
the intro lesson for the map interface that the there are three most common implementations for the

228
00:15:45.850 --> 00:15:52.630
map interface, which all correspond to the most common enter to the most common implementations of

229
00:15:52.630 --> 00:15:54.040
the set interface.

230
00:15:54.050 --> 00:16:02.230
So we're looking at hash map now and then we've also got tree map and then linked hash map.

231
00:16:02.440 --> 00:16:04.720
So let's take a quick look at the tree map.

232
00:16:04.930 --> 00:16:09.940
So all we need to do is just change this implementation from hash to tree.

233
00:16:11.360 --> 00:16:12.020
There we go.

234
00:16:12.770 --> 00:16:19.460
And we should be able to just run our test and have everything still work, so to prove that I will

235
00:16:19.460 --> 00:16:23.750
jump back over here to the test and hit the play button.

236
00:16:26.780 --> 00:16:30.280
There we go, so nothing broke that still works, OK?

237
00:16:30.800 --> 00:16:34.250
But if I jump over here, back to the main class.

238
00:16:37.140 --> 00:16:45.180
And rerun it now, now I'm not running the test, I'm running just the the main method of the main class

239
00:16:45.180 --> 00:16:52.230
again so that we can see how does the tree map represent itself when it is asked to printed up print

240
00:16:52.250 --> 00:16:53.970
itself out as a string, right?

241
00:16:54.240 --> 00:17:00.270
So now looking here, down here, we've got Barney Barney to Barney three, Barney for Barney Fife.

242
00:17:00.300 --> 00:17:01.980
So you see what's going on here, right?

243
00:17:02.250 --> 00:17:03.780
It is now.

244
00:17:04.790 --> 00:17:07.880
In alphabetical order, according to the Keys.

245
00:17:08.270 --> 00:17:12.710
OK, so the keys, the entries are alphabetized bye bye key.

246
00:17:15.300 --> 00:17:22.650
And again, that is controlled because the data type for the key is string string implements compare

247
00:17:23.520 --> 00:17:25.650
the comparable interface.

248
00:17:26.070 --> 00:17:29.550
And so they end up being in alphabetical order.

249
00:17:30.780 --> 00:17:31.980
So pretty straightforward.

250
00:17:32.250 --> 00:17:40.860
And then finally, let's look at changing this implementation to the linked hash map linked hash map.

251
00:17:43.840 --> 00:17:44.440
There we go.

252
00:17:44.860 --> 00:17:49.780
And I won't bother running the tests because, you know, it's already going to pass, but we'll see

253
00:17:49.780 --> 00:17:56.620
how a linked hash map represents itself as a strength, so I will just rerun the main method here again.

254
00:18:00.710 --> 00:18:06.200
OK, and now we've got Fred in a Fred, too, Fred three, Fred four, Barney.

255
00:18:06.320 --> 00:18:13.900
And as you may recall, this list, this ordering matches up with the order that we have here.

256
00:18:13.910 --> 00:18:18.470
So this is really in the insert order, right?

257
00:18:18.470 --> 00:18:23.180
The order in which we are inserting the data is the order that these are coming out now.

258
00:18:23.510 --> 00:18:24.050
Oh yes.

259
00:18:24.200 --> 00:18:31.380
Now one thing worth noting these multiple threads here are sort of kind of being filtered out.

260
00:18:31.400 --> 00:18:35.240
However, be careful about one thing with a map.

261
00:18:36.910 --> 00:18:44.830
If you try to add values to the map and the key is already there.

262
00:18:46.780 --> 00:18:54.790
It won't exactly ignore the new value that you're trying to set, it will simply take it will actually

263
00:18:54.790 --> 00:18:59.830
take the new value that you're trying to set and replace the previous ones.

264
00:19:00.130 --> 00:19:05.140
So what I mean by that is so here we've got all these duplicated threads.

265
00:19:05.320 --> 00:19:11.140
I'm intentionally skipping this last one, though, because his data type, because his role is not

266
00:19:11.140 --> 00:19:12.490
technically a programmer.

267
00:19:12.490 --> 00:19:14.680
And so it's a little bit of a special case.

268
00:19:14.980 --> 00:19:23.170
But all of these regular duplicated Fred's what is technically happening here is that the salary that

269
00:19:23.170 --> 00:19:30.360
is being associated with so-called Fred is not the salary from this first Fred.

270
00:19:30.370 --> 00:19:33.340
It's actually the salary from this last Fred.

271
00:19:33.400 --> 00:19:33.880
OK.

272
00:19:34.270 --> 00:19:41.800
Now, in this case, there is no distinction, really, because all of the data that that contributes

273
00:19:41.800 --> 00:19:45.250
to calculating the salary is the same anyway.

274
00:19:45.460 --> 00:19:50.920
But if these had all been different, in fact, let's let's go ahead and change a few things here.

275
00:19:52.390 --> 00:19:53.950
Let's make this.

276
00:19:56.360 --> 00:19:56.930
Eight.

277
00:19:58.780 --> 00:19:59.650
Seven.

278
00:20:00.780 --> 00:20:12.720
Six, five and four, and I'll leave the two the same, right, so if this Fred's salary is being is

279
00:20:12.720 --> 00:20:19.020
reflecting the values that are on this very first Fred, then we won't see any difference here.

280
00:20:19.020 --> 00:20:22.430
We're seeing what is this two point eight million or so, right?

281
00:20:23.010 --> 00:20:27.780
If, on the other hand, it is taking the value from this one down here?

282
00:20:29.450 --> 00:20:33.830
Or even this one down here, in fact, let's let's let's make that a nine.

283
00:20:33.950 --> 00:20:36.410
OK, then we'll see something different.

284
00:20:36.500 --> 00:20:36.860
Right?

285
00:20:36.980 --> 00:20:39.800
So let's rerun this and see what we see, what we see.

286
00:20:42.670 --> 00:20:45.880
Oh, yes, see, now that's a different value.

287
00:20:46.210 --> 00:20:53.440
Now let's determine, is this value coming from this Fred or this Fred?

288
00:20:53.620 --> 00:20:53.980
Right?

289
00:20:54.670 --> 00:20:59.020
So I'll change this nine to 10.

290
00:21:01.730 --> 00:21:02.810
Rerun this again.

291
00:21:04.100 --> 00:21:07.070
So we have one one to something rather right?

292
00:21:08.170 --> 00:21:11.080
OK, so we still have one one to blah blah blah.

293
00:21:11.350 --> 00:21:20.470
So that tells us that this salary is coming from this, this Fred right here with the eight thousand

294
00:21:20.470 --> 00:21:25.090
and just to be really, really certain, let's change this again.

295
00:21:25.180 --> 00:21:27.730
Let's let's change this now to a nine.

296
00:21:27.940 --> 00:21:32.860
And now we should see something different here, so it won't be one one two anymore.

297
00:21:32.890 --> 00:21:33.460
Let's see.

298
00:21:36.930 --> 00:21:39.480
Yeah, there we go now, it's one to six.

299
00:21:40.080 --> 00:21:40.470
OK.

300
00:21:40.710 --> 00:21:48.300
So let me just reiterate the logic that's happening here with the map when we first when the code first

301
00:21:48.810 --> 00:21:51.600
populates the map with this first Fred.

302
00:21:51.840 --> 00:21:53.310
It does what you would think it would do.

303
00:21:53.310 --> 00:21:54.960
It takes this first name of Fred.

304
00:21:55.110 --> 00:22:00.720
And then it takes whatever the salary is that will be calculated from all of this stuff, and it puts

305
00:22:01.080 --> 00:22:03.870
that pair that key value pair into the map.

306
00:22:04.230 --> 00:22:14.580
Then we move down to the next Fred and it will see that we already have an entry in the map called Fred.

307
00:22:16.390 --> 00:22:26.710
But unlike a set, it won't just ignore this and or filter it out, it will take whatever value we are

308
00:22:26.710 --> 00:22:32.380
calculating for this next Fred and simply replace what was there with this new one.

309
00:22:32.410 --> 00:22:32.860
OK.

310
00:22:33.070 --> 00:22:35.230
So doesn't ignore or filter.

311
00:22:35.380 --> 00:22:37.150
It just replaces that value.

312
00:22:37.330 --> 00:22:39.100
Fred is a Fred is a Fred, right?

313
00:22:39.340 --> 00:22:42.140
It doesn't know or care that there are duplicates.

314
00:22:42.160 --> 00:22:43.720
OK, now the map.

315
00:22:44.080 --> 00:22:46.480
This map won't allow for duplicates.

316
00:22:46.480 --> 00:22:51.310
We can't have multiple entries with the key of Fred.

317
00:22:51.340 --> 00:22:51.790
OK.

318
00:22:52.030 --> 00:22:54.840
There can only be one entry and buy entry.

319
00:22:54.850 --> 00:22:57.990
I mean, one line or one row, if you will.

320
00:22:58.000 --> 00:23:01.930
There can only be one entry in the map per key.

321
00:23:02.140 --> 00:23:02.590
OK.

322
00:23:04.720 --> 00:23:11.680
And so the values, though, will just be updated according to whatever the last value was that we tried

323
00:23:11.680 --> 00:23:13.720
to associate with that key.

324
00:23:14.080 --> 00:23:22.720
And so that's why each time this code encounters a new Fred, it will simply replace that value in the

325
00:23:22.720 --> 00:23:23.360
in the map.

326
00:23:23.380 --> 00:23:24.460
It won't be ignored.

327
00:23:24.490 --> 00:23:24.880
OK.

328
00:23:25.090 --> 00:23:33.070
And so whatever the last Fred was of of type program, or at least that's what you're going to get for

329
00:23:33.070 --> 00:23:38.170
the salary, and that's why the salary is being reflected by whatever number we have here.

330
00:23:38.350 --> 00:23:38.740
OK?

331
00:23:38.890 --> 00:23:40.960
It's actually going through all of these.

332
00:23:41.140 --> 00:23:44.950
But when it's all said and done you, you finalize on this last one.

333
00:23:44.980 --> 00:23:46.240
That's what's actually happening.

334
00:23:46.240 --> 00:23:53.740
And then if any of you are wondering how come this last Fred isn't affecting this, keep in mind, our

335
00:23:53.740 --> 00:24:01.860
code is actually taking these strings and converting them into a an instance of the employee class,

336
00:24:01.870 --> 00:24:04.780
right, and then populating the first and last name.

337
00:24:05.470 --> 00:24:13.720
And it's actually instantiating a subclass of the employee based on this field right here, right?

338
00:24:13.870 --> 00:24:18.310
Programmer So if it's a programmer, then it's creating an instance of the programmer class.

339
00:24:18.580 --> 00:24:26.230
However, if this field mentioned some value that doesn't map to any of the known subclasses that we

340
00:24:26.230 --> 00:24:29.770
have coded for, then it is creating a special case.

341
00:24:29.770 --> 00:24:34.750
If you will recall, a dummy class, I think is where we ended a dummy employee, something like that.

342
00:24:35.710 --> 00:24:39.370
And then it is setting the first and last name to in-a.

343
00:24:39.760 --> 00:24:40.480
Remember that?

344
00:24:41.350 --> 00:24:49.710
And so in a way is what's actually being populated into the map and not the name Fred.

345
00:24:49.720 --> 00:24:57.530
And that's why this value isn't being used to calculate the salary for this Fred right here.

346
00:24:57.580 --> 00:25:00.250
And instead, we have this in a being set to zero.

347
00:25:00.280 --> 00:25:07.180
OK, so quick, quick little reminder there and clarification as to why this Fred isn't impacting things.

348
00:25:08.050 --> 00:25:08.430
All right.

349
00:25:08.440 --> 00:25:11.770
So super, super powerful interface.

350
00:25:12.670 --> 00:25:15.340
Really, really useful for doing these kinds of look ups.

351
00:25:15.340 --> 00:25:21.910
And you will see maps used all over the place when programming because they're just so useful anytime

352
00:25:21.910 --> 00:25:23.170
you need to remember some.

353
00:25:23.560 --> 00:25:31.330
Hey, whenever I do this, do you know, associate this value with this associate, this object or key

354
00:25:31.330 --> 00:25:32.710
with this value, right?

355
00:25:32.950 --> 00:25:38.260
You run into those kinds of scenarios all the time, kind of like we have here where you just want to

356
00:25:38.260 --> 00:25:44.830
be able to quickly get something out and you don't want to have to iterate over a whole bunch of data

357
00:25:44.830 --> 00:25:47.950
every single time you need to do that type of look up.

358
00:25:48.220 --> 00:25:55.480
OK, so anytime you need to do a look up, a simple look up with one input resulting in one output,

359
00:25:55.720 --> 00:25:57.070
you can use a map.

360
00:25:57.940 --> 00:26:03.430
One of the thing I want to mention, though, you don't have to do simple mappings like we're doing

361
00:26:03.430 --> 00:26:07.060
here where we are mapping well, here, let's go up here.

362
00:26:08.030 --> 00:26:14.360
Where we are mapping a string to an integer, you can map just about anything to anything, really,

363
00:26:15.110 --> 00:26:23.540
you could map the first name to the entire object, so I could map a string to an employee.

364
00:26:25.730 --> 00:26:26.630
Like this?

365
00:26:30.030 --> 00:26:36.210
And then, in fact, I really could do this, in fact, let's go ahead and do this and then instead

366
00:26:36.210 --> 00:26:44.520
of just grabbing the salary here, we could actually just get rid of all of that and just put the entire

367
00:26:44.520 --> 00:26:47.890
employee in here and we can still make this work.

368
00:26:47.910 --> 00:26:56.070
In fact, so down here in our get salary method, now we're what we're getting out of here is not a

369
00:26:56.070 --> 00:27:02.790
an integer, but this get method is now going to return an employee, which is still useful because

370
00:27:02.790 --> 00:27:06.930
now from that employee, we can still call get salary.

371
00:27:07.020 --> 00:27:07.980
Does that make sense?

372
00:27:08.370 --> 00:27:17.400
So if we make our map map the first name to the end to an entire employee, that's fine.

373
00:27:17.400 --> 00:27:18.180
We can still do that now.

374
00:27:18.180 --> 00:27:22.650
Technically, we probably would want to rename this if we're going to do this, so I can rename this

375
00:27:22.650 --> 00:27:23.940
with a shift of six.

376
00:27:24.300 --> 00:27:30.780
And then maybe instead of calling it salary map, maybe I call it employee map and I'm lazy, so I'll

377
00:27:30.780 --> 00:27:32.250
just call it empty map.

378
00:27:32.670 --> 00:27:36.480
OK, so so now it maps to employees.

379
00:27:38.840 --> 00:27:41.450
And then we are no longer.

380
00:27:42.550 --> 00:27:51.700
Populating a first name and a salary now we're populating a first name and the entire employee object.

381
00:27:51.880 --> 00:27:52.360
OK.

382
00:27:53.490 --> 00:27:59.670
And then down here, though, we can still find the exact employee that we care about very, very,

383
00:27:59.670 --> 00:28:03.000
very quickly, simply by using the first name.

384
00:28:03.330 --> 00:28:03.810
OK.

385
00:28:04.500 --> 00:28:11.430
And then once we do a get this get method is now returning an entire employee.

386
00:28:11.440 --> 00:28:17.490
So you can imagine this whole entire blue highlighted thing here turns into an employee, which is why

387
00:28:17.490 --> 00:28:23.400
I can just put the dot right after it and then call methods that exist on the employee class, such

388
00:28:23.400 --> 00:28:24.420
as get salary.

389
00:28:24.540 --> 00:28:25.890
So this is just as useful.

390
00:28:25.890 --> 00:28:29.280
And in fact, in many cases, this may be even more useful.

391
00:28:30.240 --> 00:28:36.060
If I had other methods like, let's say that I wanted to have another look up method public.

392
00:28:37.440 --> 00:28:45.570
I don't know, string get last name from the first name, right?

393
00:28:46.530 --> 00:28:50.450
So here I could do IMAP.

394
00:28:50.460 --> 00:28:53.880
Don't get my first name.

395
00:28:54.510 --> 00:28:55.950
And then last name.

396
00:28:56.990 --> 00:28:57.500
See that.

397
00:28:59.270 --> 00:29:06.440
So this gives me a lot of flexibility, and I don't have to keep creating new maps for every type of

398
00:29:06.440 --> 00:29:07.880
mapping in the world, right?

399
00:29:08.870 --> 00:29:14.740
I could simply reference that same map because it returns back for a look up.

400
00:29:14.750 --> 00:29:16.490
It just returns an entire employee.

401
00:29:16.730 --> 00:29:18.670
So I get the best of all benefits.

402
00:29:18.680 --> 00:29:27.620
I get the the high speed of using a map to look up something with the flexibility by being able to decide

403
00:29:27.620 --> 00:29:34.220
by method here, by method here what it is that I want to grab out of each of those employees, right?

404
00:29:34.970 --> 00:29:38.690
So I'm a little less constrained, perhaps by doing it in this way.

405
00:29:39.350 --> 00:29:39.740
All right.

406
00:29:39.750 --> 00:29:45.500
So now I'll wrap this up and we'll take a look at a few more little things in the next lesson, and

407
00:29:45.500 --> 00:29:46.190
I'll see you there.
