WEBVTT
1
00:00:00.390 --> 00:00:00.880
All right.

2
00:00:00.900 --> 00:00:07.830
So in the last lesson we learned about nested classes, which I kept saying wrong and had to go back

3
00:00:07.830 --> 00:00:12.900
and fix in the video in this lesson, we're going to learn a little more about nested classes because

4
00:00:12.900 --> 00:00:15.570
there are actually a few different kinds.

5
00:00:15.870 --> 00:00:22.260
So technically now what we learned in the last lesson was not just a nested class, but specifically

6
00:00:22.260 --> 00:00:27.580
it was a static nested class, obviously, because it was made static.

7
00:00:27.600 --> 00:00:28.020
OK.

8
00:00:28.320 --> 00:00:28.670
All right.

9
00:00:28.680 --> 00:00:36.420
So now we're going to learn about a non static nested class, which has a another name, which is an

10
00:00:36.420 --> 00:00:37.560
inner class.

11
00:00:37.740 --> 00:00:46.530
And that may be the more common term that you may hear for the general idea of taking a class and defining

12
00:00:46.530 --> 00:00:48.510
it inside of another class.

13
00:00:48.540 --> 00:00:48.990
OK.

14
00:00:49.200 --> 00:00:54.120
But technically, the most general term for all of these structures is nested class.

15
00:00:54.570 --> 00:00:54.960
All right.

16
00:00:55.620 --> 00:01:03.420
So what are the differences between a static nested class and an inner class?

17
00:01:03.930 --> 00:01:10.470
Well, for one thing, obviously, as I mentioned a moment ago, when you take the static off now,

18
00:01:10.470 --> 00:01:12.480
that's an inner class, OK?

19
00:01:12.900 --> 00:01:20.490
Why would one choose to use a static nested class versus a non static inner class?

20
00:01:20.520 --> 00:01:27.930
Well, as I mentioned in the last lesson, if you don't need anything more than what you would get from

21
00:01:27.930 --> 00:01:29.650
a static nested class.

22
00:01:30.030 --> 00:01:38.310
And if you may need to refer to that static nested class in more than one place, then it may be advised

23
00:01:38.370 --> 00:01:40.560
to go ahead and make it static.

24
00:01:41.370 --> 00:01:51.240
But if you're nested, class needs to be able to access fields of the enclosing class, then you may

25
00:01:51.240 --> 00:01:54.060
need to consider using an inner class.

26
00:01:54.090 --> 00:02:01.590
OK, so one of the main differences between a static nested class and an inner class is the fact that

27
00:02:01.740 --> 00:02:10.100
since a static nested class is static, it is not allowed to access fields of its enclosing class.

28
00:02:10.110 --> 00:02:11.820
And I think that should make sense, right?

29
00:02:11.820 --> 00:02:18.580
Because as we've seen in the in the past, if we have a static method in.

30
00:02:21.660 --> 00:02:25.350
My method just making a quick, temporary one here.

31
00:02:25.680 --> 00:02:33.270
This static method is not able to access any of the fields on the enclosing class, right?

32
00:02:34.370 --> 00:02:42.770
So that's an error, because fields of a class only exist once you create an instance of that class,

33
00:02:43.220 --> 00:02:52.060
but static members of a class exist prior to during and after the creation of instances of that class.

34
00:02:52.070 --> 00:02:54.350
So there's kind of like a mismatch there, right?

35
00:02:54.620 --> 00:03:04.010
Static numbers exist kind of like forever, whereas instances only exist for the period of time while

36
00:03:04.010 --> 00:03:05.630
they've been created.

37
00:03:05.840 --> 00:03:13.430
And so it doesn't make sense for a static member to be able to access non static members of an enclosing

38
00:03:13.430 --> 00:03:13.940
class.

39
00:03:14.870 --> 00:03:23.090
So similarly, it doesn't make sense for a static nested class to be able to access non static members

40
00:03:23.090 --> 00:03:25.370
of its enclosing class.

41
00:03:25.610 --> 00:03:29.090
However, let me go ahead and delete this guy.

42
00:03:29.420 --> 00:03:40.520
However, non static nested classes or inner classes actually can access their enclosing classes members.

43
00:03:40.700 --> 00:03:43.670
So I'll just show a quick example of what that might look like.

44
00:03:43.880 --> 00:03:50.420
So if I were to create another Enner class now, I would have done it on this entire class here.

45
00:03:50.420 --> 00:03:54.920
But this, in her classes, is extending employee, and so it's not going to have the same effect.

46
00:03:55.130 --> 00:03:56.450
And I'll show you why in just a moment.

47
00:03:56.750 --> 00:04:05.960
So if I were to create another inner class here, my inner class and this one, I won't have extend

48
00:04:05.960 --> 00:04:08.600
anything OK, but we'll put a method on it.

49
00:04:11.760 --> 00:04:12.720
Get stuff.

50
00:04:13.910 --> 00:04:15.470
Return zero.

51
00:04:15.500 --> 00:04:15.990
OK.

52
00:04:16.310 --> 00:04:24.260
However, let's say that we also want to access the first name or the last name of the enclosing employee

53
00:04:24.260 --> 00:04:24.980
class, right?

54
00:04:25.190 --> 00:04:27.740
So if we wanted to do something like print out.

55
00:04:30.020 --> 00:04:32.120
First name, we can do that.

56
00:04:32.450 --> 00:04:39.620
And this first name isn't inherited by anything because this my inner class isn't inheriting from anywhere,

57
00:04:39.620 --> 00:04:39.950
right?

58
00:04:40.070 --> 00:04:49.160
So this my inner class would actually be accessing the first named field of the employee class which

59
00:04:49.400 --> 00:04:51.060
encloses this.

60
00:04:51.080 --> 00:04:51.560
OK.

61
00:04:52.130 --> 00:05:00.290
So that would be one reason why you might want to create an inner class if your inner class actually

62
00:05:00.290 --> 00:05:05.960
needed access to the ENCLOSING member fields or methods.

63
00:05:06.440 --> 00:05:06.890
All right.

64
00:05:07.830 --> 00:05:15.630
And just to be clear, so I chose to create the my inner class rather than show you this using the dummy

65
00:05:15.630 --> 00:05:22.680
employee because dummy employee actually already has access to those internal fields since it extends

66
00:05:22.680 --> 00:05:23.400
employee.

67
00:05:24.000 --> 00:05:32.370
OK, so I'm going to get rid of this, and there's one more type of nested class that I want to show

68
00:05:32.370 --> 00:05:36.780
you, and that is called an anonymous class.

69
00:05:37.350 --> 00:05:45.300
So here we created this new class called dummy employee, and I'm going to go ahead and make this static

70
00:05:45.300 --> 00:05:46.920
again just because.

71
00:05:47.220 --> 00:05:47.570
All right.

72
00:05:47.580 --> 00:05:51.990
So we made we made this class and we named it dummy employee.

73
00:05:52.230 --> 00:05:59.250
And then we utilized it a couple of times up here, right here and on line 47, right?

74
00:05:59.850 --> 00:06:07.440
But there's another way that we could have done this that's even narrower in scope than what we're doing

75
00:06:07.440 --> 00:06:07.860
here.

76
00:06:08.190 --> 00:06:19.020
So if I didn't care about being able to instantiate this dummy employee twice in an efficient way,

77
00:06:19.170 --> 00:06:28.470
if I only wanted to be able to instantiate this nested class one time and only ever use it once, I

78
00:06:28.470 --> 00:06:35.490
could have done something even more narrow by actually declaring and using an anonymous class.

79
00:06:35.640 --> 00:06:37.590
So let me show you what that would look like.

80
00:06:37.770 --> 00:06:44.520
So if we come down here, we'll see that our existing dummy employee class nested class extends from

81
00:06:44.520 --> 00:06:45.310
employee.

82
00:06:45.330 --> 00:06:45.660
Right?

83
00:06:46.020 --> 00:06:52.260
So what would make an anonymous class anonymous in large part is the idea that it wouldn't have a name.

84
00:06:52.530 --> 00:06:52.980
OK.

85
00:06:53.280 --> 00:06:58.110
But in all other respects, it would be quite similar to what you see here, other than the fact that

86
00:06:58.110 --> 00:06:59.100
it wouldn't have a name.

87
00:06:59.280 --> 00:07:05.220
And I suppose in this particular case, we wouldn't need to declare it as private static final any of

88
00:07:05.220 --> 00:07:08.340
this business here, because you wouldn't be able to refer to it anyway.

89
00:07:08.350 --> 00:07:14.550
So these keywords here really, actually even that one, I suppose, really would have no bearing.

90
00:07:14.580 --> 00:07:14.980
OK.

91
00:07:15.000 --> 00:07:19.080
And there's not really a way that I'm aware of to even specify them with an anonymous class.

92
00:07:19.320 --> 00:07:21.810
But you'd have the same capabilities.

93
00:07:21.900 --> 00:07:23.100
So let me show you how to do that.

94
00:07:23.460 --> 00:07:23.710
All right.

95
00:07:23.730 --> 00:07:28.470
So just keep in mind, this class has a name dummy employee and it extends employee.

96
00:07:28.500 --> 00:07:28.830
Right?

97
00:07:29.070 --> 00:07:32.070
But we now want to make an anonymous class.

98
00:07:32.220 --> 00:07:38.400
So what you do is instead of referring to a new name of a class which you're not going to use because

99
00:07:38.400 --> 00:07:44.820
this is supposed to be anonymous, instead, what you do is you simply refer to either an interface

100
00:07:45.120 --> 00:07:50.820
or to a super class that this new anonymous class will be a subclass of.

101
00:07:50.850 --> 00:07:55.260
So in our case, our nested class is a subclass of the employee.

102
00:07:55.650 --> 00:07:59.130
So here we'll just say new employee.

103
00:08:00.070 --> 00:08:08.230
And then we'll also kind of combine the declaration of this new anonymous class with a constructor of

104
00:08:08.230 --> 00:08:08.650
sorts.

105
00:08:08.680 --> 00:08:11.950
OK, so we'll do one of these guys here.

106
00:08:12.190 --> 00:08:14.890
OK, that looks like you're calling a constructor.

107
00:08:15.460 --> 00:08:18.550
Then, though, here's the here's where it gets a little interesting.

108
00:08:18.760 --> 00:08:22.550
You put your curly braces here and then an enter.

109
00:08:22.690 --> 00:08:29.050
Now, if I hover over this, we see that class anonymous class derived from employee must either be

110
00:08:29.050 --> 00:08:33.520
declared abstract or implement abstract method, get salaries.

111
00:08:33.520 --> 00:08:37.120
So now we're getting prompted that, Hey, OK, I see what you're doing here.

112
00:08:37.270 --> 00:08:41.080
You're trying to make an anonymous nested class or an anonymous class.

113
00:08:41.410 --> 00:08:48.070
But if you want to make one of the super class employee, you're still going to have to declare a get

114
00:08:48.070 --> 00:08:49.030
salary method.

115
00:08:49.180 --> 00:08:51.880
And so here I can solve that in a couple of ways.

116
00:08:51.880 --> 00:08:58.300
I could put my cursor here and do an option, enter and intelligence to implement the method and bam,

117
00:08:58.510 --> 00:08:59.350
it knows well.

118
00:08:59.350 --> 00:09:03.400
That's the only method that I have to implement get salary and so I can just select OK.

119
00:09:03.640 --> 00:09:05.620
And now that generates that for me.

120
00:09:05.890 --> 00:09:11.800
Now, if you notice down here, it's not happy that I don't have a semicolon here because this is both

121
00:09:12.010 --> 00:09:20.170
a declaration of a new class, an anonymous class, but it is also instantiating that class at the same

122
00:09:20.170 --> 00:09:20.620
time.

123
00:09:20.800 --> 00:09:24.460
And therefore, it's a statement that requires a semicolon.

124
00:09:24.670 --> 00:09:28.870
And so, you know, don't worry about remembering when when you do or don't need a semicolon.

125
00:09:29.020 --> 00:09:34.030
If you're using a modern I.D. like intel, it's going to tell you, Hey, do you need a semicolon here

126
00:09:34.030 --> 00:09:35.230
just to wrap this up?

127
00:09:35.240 --> 00:09:40.120
So just make sure you're paying attention to those little marks, although the I.D. won't let you compile

128
00:09:40.120 --> 00:09:41.140
it without it anyway.

129
00:09:41.350 --> 00:09:41.650
All right.

130
00:09:41.660 --> 00:09:48.700
So what we've now just done is we've declared a new class that doesn't have a name.

131
00:09:48.970 --> 00:09:49.480
OK?

132
00:09:49.810 --> 00:09:56.070
And we've simultaneously created one instance of this new class right here.

133
00:09:56.080 --> 00:10:02.470
So this anonymous classes both do the declaration and the instantiation all in one.

134
00:10:02.470 --> 00:10:07.600
And that's why they look a little weird here with the new operator and something that looks like a constructor.

135
00:10:07.900 --> 00:10:12.400
But then you've got the curly braces here and you're defining methods inside.

136
00:10:12.430 --> 00:10:19.840
OK, so it's kind of all wrapped up in one, and I almost pretty much could also have done this with

137
00:10:19.840 --> 00:10:24.850
the interface I employee where I would have just, well, pretty much just done this.

138
00:10:25.240 --> 00:10:32.020
However, this code in its current form isn't going to be happy, and that is the fact that whatever

139
00:10:32.020 --> 00:10:38.230
I'm returning from these cases of the switch is meant to be something that I'm also going to return

140
00:10:38.230 --> 00:10:40.570
from this create employee method.

141
00:10:40.750 --> 00:10:47.530
And right now, the definition of this create employee method is that I return an employee and let's

142
00:10:47.530 --> 00:10:48.190
see here.

143
00:10:48.400 --> 00:10:55.330
Currently, my employee class is not implementing the I employee interface at the moment because we've

144
00:10:55.330 --> 00:10:58.180
been kind of going back and forth so I could show you various things.

145
00:10:58.390 --> 00:11:05.830
So either I would need to have this class implement the employee interface again, or I would need to

146
00:11:05.830 --> 00:11:10.180
change this method to return and I employee or something along those lines.

147
00:11:10.180 --> 00:11:13.660
I'm not going to do that again because I've gone back and forth so many times with it.

148
00:11:13.750 --> 00:11:20.200
But I just wanted to show you that in general, you can create an anonymous class from either another

149
00:11:20.200 --> 00:11:26.620
class, which in that case that other class is treated as a super class to your anonymous class or from

150
00:11:26.620 --> 00:11:27.760
an interface.

151
00:11:28.090 --> 00:11:34.270
So this is the narrowest possible implementation of a nested class, OK?

152
00:11:34.420 --> 00:11:37.390
This is when you pretty much just want a one off.

153
00:11:37.630 --> 00:11:38.050
OK.

154
00:11:38.200 --> 00:11:47.200
So this may make a little less sense in my case here, because I'm actually wanting to return a fairly

155
00:11:47.200 --> 00:11:53.380
narrow type of class twice here on Line forty four and then again on Line fifty three.

156
00:11:53.380 --> 00:11:59.200
So I certainly could just make two anonymous classes here, and I certainly could do that.

157
00:11:59.200 --> 00:12:04.660
But it would be a little wasteful because remember, when you make an anonymous class, you're not just

158
00:12:04.660 --> 00:12:07.660
declaring that class, you're also creating an instance of it.

159
00:12:07.660 --> 00:12:13.390
And so then I'd be creating two instances of the same thing, essentially, which is which is a little

160
00:12:13.390 --> 00:12:16.720
bit wasteful, not a big deal, but a little bit wasteful.

161
00:12:16.720 --> 00:12:19.120
And it's not saving you any any lines at all.

162
00:12:19.120 --> 00:12:23.020
It's actually going to end up being more lines, right, because you're going to duplicate all of this

163
00:12:23.020 --> 00:12:24.460
a couple of times now.

164
00:12:24.460 --> 00:12:28.480
On the other hand, if you want to each one of them to behave a little differently, like you wanted

165
00:12:28.480 --> 00:12:33.700
this one to return a negative one or something and then the other one could return to zero or something.

166
00:12:33.910 --> 00:12:34.690
OK, then it.

167
00:12:34.840 --> 00:12:36.700
Maybe it, maybe it makes a little more sense.

168
00:12:36.700 --> 00:12:37.240
Maybe.

169
00:12:37.870 --> 00:12:44.350
So there's one other type of nested class that I'm not going to explicitly show you, but I will talk

170
00:12:44.350 --> 00:12:49.240
to it, and that is a local nested class.

171
00:12:49.450 --> 00:12:56.760
Now I'm only talking to this because in all honesty, I don't believe in my 20 plus years of Java development.

172
00:12:56.770 --> 00:12:59.590
I don't think I've ever in my entire life, ever.

173
00:12:59.680 --> 00:13:04.420
Ever, ever created or used a local nested class.

174
00:13:04.720 --> 00:13:10.960
But what that is, so if you remember we've learned about local variables, a local variable is just

175
00:13:10.960 --> 00:13:13.240
a variable within a code block.

176
00:13:13.540 --> 00:13:17.620
Typically, it's a variable defined within a method.

177
00:13:17.740 --> 00:13:24.070
But it's technically any variable inside of any code block, and the definition of a code block is any

178
00:13:24.430 --> 00:13:29.800
any block of code, any, you know, multiple lines of code in between curly braces, essentially,

179
00:13:29.800 --> 00:13:30.130
right?

180
00:13:30.520 --> 00:13:37.180
So I could create a local variable like my local bar right there, right?

181
00:13:37.180 --> 00:13:41.080
So that's local to this method here, right?

182
00:13:41.170 --> 00:13:44.170
It has no scope outside of this method.

183
00:13:44.320 --> 00:13:50.720
So when the thread leaves this method, this variable, for all intents and purposes, ceases to exist.

184
00:13:50.740 --> 00:13:58.150
OK, well, I can also define an entire nested class inside of a method.

185
00:13:58.300 --> 00:13:58.720
OK.

186
00:13:58.840 --> 00:14:05.380
So I could do something like class my local class.

187
00:14:07.100 --> 00:14:10.850
Just like this, and as you already see here, there are no errors here, right?

188
00:14:11.150 --> 00:14:16.730
It's it's it's it's going to go ahead and let me do this so I could define a method here public.

189
00:14:16.900 --> 00:14:19.310
I don't know and get numb.

190
00:14:21.120 --> 00:14:22.830
Return five.

191
00:14:23.550 --> 00:14:24.150
There you go.

192
00:14:25.230 --> 00:14:32.010
And then down here, if I wanted to, I could say something like, you know, instead of returning dummy

193
00:14:32.010 --> 00:14:37.790
employee return my new my local class.

194
00:14:37.800 --> 00:14:44.880
Now, of course, this is going to give me an error because my local class is not of type employee.

195
00:14:45.030 --> 00:14:52.050
But if I were to come over here and then say, I don't know, extends employee, then I'm going to get

196
00:14:52.050 --> 00:14:55.280
an error here because I need to implement the get salary method.

197
00:14:55.290 --> 00:15:00.690
But I could then say, you know, call this good salary instead.

198
00:15:00.690 --> 00:15:03.810
And now all of the errors go away and look at that.

199
00:15:03.810 --> 00:15:04.890
That's all happy.

200
00:15:05.070 --> 00:15:10.200
And this is still a very localized, very narrow scope to method.

201
00:15:10.350 --> 00:15:13.580
Now, I wouldn't do this.

202
00:15:13.590 --> 00:15:18.380
This just looks like a little too much noise, to be perfectly honest with you.

203
00:15:18.390 --> 00:15:19.530
Not a fan of this.

204
00:15:19.740 --> 00:15:26.640
I prefer in this case, I prefer to just do what we did down here a little bit cleaner, slightly wider

205
00:15:26.640 --> 00:15:29.880
in scope, and you do generally want to limit the scope of things.

206
00:15:29.970 --> 00:15:31.980
But this is a bit much to me.

207
00:15:32.370 --> 00:15:36.390
I'd probably even go more with an anonymous class, by the way.

208
00:15:36.660 --> 00:15:43.470
Now one thing about anonymous classes is, though I would probably prefer to use an anonymous class

209
00:15:43.470 --> 00:15:47.310
here rather than use this local class, which is just a bit much.

210
00:15:47.580 --> 00:15:52.580
I will acknowledge that to me, even anonymous classes are kind of noisy.

211
00:15:52.590 --> 00:15:54.900
I mean, just look at this, it looks kind of weird.

212
00:15:55.050 --> 00:16:02.400
You're kind of embedding this thing that's half constructor, half class definition and method, all

213
00:16:02.400 --> 00:16:08.190
embedded in line inside of this, you know, the rest of the structure, it's kind of a lot of noise.

214
00:16:08.460 --> 00:16:14.600
And if and then imagine if you were going to implement multiple methods here, that would be even noisier,

215
00:16:14.610 --> 00:16:15.000
right?

216
00:16:15.270 --> 00:16:18.330
So I'm not a huge fan of this either.

217
00:16:18.540 --> 00:16:26.010
But anonymous classes have a long history of use in Java, mostly for graphics programming, which I

218
00:16:26.010 --> 00:16:28.740
may speak a little bit more about in the future.

219
00:16:28.950 --> 00:16:33.450
So I'm a little more accustomed to them, I suppose.

220
00:16:33.660 --> 00:16:40.710
Whereas this local class is, I don't know, just a little bit more of a stretch for me now.

221
00:16:40.710 --> 00:16:48.900
In the future, we will learn about another construct that has actually supplanted even using these

222
00:16:48.900 --> 00:16:50.430
anonymous classes.

223
00:16:50.700 --> 00:16:57.660
And that's some pretty cool stuff that newer versions of Java have implemented as of several years ago.

224
00:16:57.870 --> 00:17:02.580
And that would actually be the way forward for me if I were doing this for real, but we haven't learned

225
00:17:02.580 --> 00:17:04.770
that yet, so I'm not going to show it to you just yet.

226
00:17:05.100 --> 00:17:06.840
But stay tuned for that.

227
00:17:06.990 --> 00:17:11.940
So anyway, this wraps up, I think everything that I wanted to teach about nested classes.

228
00:17:11.940 --> 00:17:14.280
So you've got a whole lot of options there.

229
00:17:14.490 --> 00:17:19.980
They are definitely an interesting feature of Java, and you can probably get yourself into a lot of

230
00:17:19.980 --> 00:17:20.310
trouble.

231
00:17:20.320 --> 00:17:25.920
So I would advise very much keep it simple, you know, and you're probably never going to be wrong

232
00:17:25.920 --> 00:17:28.440
if you just stick with standard classes.

233
00:17:28.440 --> 00:17:35.160
But in cases where you just don't want others to even be able to instantiate the thing or or whatever.

234
00:17:35.340 --> 00:17:36.350
Sure, you can.

235
00:17:36.360 --> 00:17:39.690
You can look at using nested classes as an alternative.

236
00:17:39.990 --> 00:17:40.440
OK.

237
00:17:40.530 --> 00:17:42.870
Wrapping this up, and I'll see you in the next one.
