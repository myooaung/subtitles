1
00:00:00,750 --> 00:00:04,920
All right, so in this lesson, we're going to continue learning a little bit more kind of more of the

2
00:00:04,920 --> 00:00:09,810
miscellaneous type things perhaps that we can do with lists and collections.

3
00:00:10,290 --> 00:00:18,930
So the first thing I want to run through is Here Online's forty three through 46, we are creating our

4
00:00:18,930 --> 00:00:20,220
list of undesirables.

5
00:00:20,220 --> 00:00:28,230
Let me go and just rename this because I'm enjoying calling them that undesirables, even though it's

6
00:00:28,230 --> 00:00:29,190
hard to spell.

7
00:00:29,190 --> 00:00:29,670
Sort of.

8
00:00:30,930 --> 00:00:33,720
OK, so there's our undesirables, by the way.

9
00:00:33,720 --> 00:00:38,520
You know, I just renamed that by doing a shift at six, right?

10
00:00:39,090 --> 00:00:40,080
That's how I did that.

11
00:00:41,550 --> 00:00:44,130
OK, now I want to show you that.

12
00:00:44,160 --> 00:00:51,360
So the way that we created this list of of undesirables was just to, you know, create an array list

13
00:00:51,630 --> 00:00:54,210
and store it in this variable here.

14
00:00:54,510 --> 00:00:59,160
And then we called the add method of the list.

15
00:00:59,610 --> 00:01:00,040
OK.

16
00:01:00,900 --> 00:01:06,420
But there's actually another shorthand way that you can do this when you want to just quickly specify

17
00:01:06,420 --> 00:01:12,870
a list of things to go into a brand new collection that you are creating, in this case, a brand new

18
00:01:12,870 --> 00:01:13,500
list.

19
00:01:14,280 --> 00:01:16,590
We can do it an alternative way.

20
00:01:16,650 --> 00:01:19,050
Also what we can do.

21
00:01:19,050 --> 00:01:27,630
I'm going to comment these three lines like so and then over here, instead of instantiating a new array

22
00:01:27,630 --> 00:01:35,280
list, there's a utility method that we can call on the list class list, sort of.

23
00:01:35,460 --> 00:01:38,310
So we've seen this sort of business before.

24
00:01:38,460 --> 00:01:41,970
We've done local date, sort of, for example.

25
00:01:42,120 --> 00:01:42,540
OK.

26
00:01:42,810 --> 00:01:52,260
And so what we can do here list sort of then we can actually just specify our strings right here.

27
00:01:52,690 --> 00:01:56,340
So Wilma, five, I shouldn't be typing these in.

28
00:01:56,340 --> 00:01:58,800
I should be copying and pasting, but that's all right.

29
00:01:59,100 --> 00:02:02,580
Barney, four, and Fred, two, like so.

30
00:02:03,060 --> 00:02:08,700
And what that results in is giving us a list just like we wanted before.

31
00:02:08,700 --> 00:02:11,830
But it's a little bit more convenient in some cases, right?

32
00:02:11,850 --> 00:02:17,700
We don't have to use up three lines of code to add these three guys separately.

33
00:02:17,730 --> 00:02:22,290
OK, so this is a nice little utility method that we can utilize.

34
00:02:22,560 --> 00:02:30,420
And as we learn about some of the other implementations of collections such as sets and hash maps,

35
00:02:30,660 --> 00:02:37,680
there are similar utilities for for creating instances of those types of objects as well.

36
00:02:37,710 --> 00:02:39,660
OK, so a lot of what I'm showing you.

37
00:02:39,660 --> 00:02:41,970
In fact, let me just take a moment to state this.

38
00:02:43,590 --> 00:02:50,040
Some of what I'm showing you or what I have already shown you applies to some of the other collections

39
00:02:50,040 --> 00:02:52,320
types, in particular the set.

40
00:02:52,530 --> 00:02:53,000
OK.

41
00:02:53,180 --> 00:02:56,940
What you'll learn about shortly in an upcoming lesson.

42
00:02:57,300 --> 00:03:06,150
So, for example, iterating over objects, if this collection here was not a list and it was a set,

43
00:03:06,810 --> 00:03:08,880
this pattern would be exactly the same.

44
00:03:08,910 --> 00:03:10,890
OK, what else?

45
00:03:12,210 --> 00:03:18,230
Jumping into this remove undesirables method here you can get an iterator from a list.

46
00:03:18,240 --> 00:03:20,700
You can also get an iterator from a set.

47
00:03:20,880 --> 00:03:21,360
OK.

48
00:03:21,690 --> 00:03:28,830
So many implementations of the various collections and their interfaces provide a lot of the same functionality.

49
00:03:30,580 --> 00:03:31,040
All right.

50
00:03:31,060 --> 00:03:34,940
So there's a nice shorthand way to create this list.

51
00:03:34,960 --> 00:03:39,310
Let me go ahead and delete these commented lines now.

52
00:03:39,880 --> 00:03:40,270
All right.

53
00:03:40,420 --> 00:03:51,790
Another thing I want to show you is, let's say that we wanted to grab a hold of a few of these, a

54
00:03:51,790 --> 00:03:59,530
few of the objects, a few of the employees that are now in our employees list and remove them in some

55
00:03:59,530 --> 00:03:59,960
other way.

56
00:03:59,980 --> 00:04:03,670
Maybe not while we're iterating, but just more like manually or something.

57
00:04:03,880 --> 00:04:05,670
That's pretty easy to do.

58
00:04:05,680 --> 00:04:11,560
In fact, actually, I guess many would argue that's actually easier to do than what we're doing here,

59
00:04:13,690 --> 00:04:18,490
though this is a somewhat common pattern that you will encounter from time to time.

60
00:04:19,150 --> 00:04:21,400
So let me show you, though, so let's see here.

61
00:04:21,400 --> 00:04:26,320
We've got our we've got our employees collection here.

62
00:04:26,500 --> 00:04:32,920
So let's say that we want to grab the first three.

63
00:04:33,980 --> 00:04:37,040
Employees in that collection and remove them.

64
00:04:37,400 --> 00:04:37,840
OK.

65
00:04:38,660 --> 00:04:39,680
Just the first three.

66
00:04:39,830 --> 00:04:42,120
So one way that we could do that?

67
00:04:42,140 --> 00:04:45,440
Let me put these lines together real quick here.

68
00:04:45,470 --> 00:04:45,860
OK.

69
00:04:46,130 --> 00:04:57,680
So one way that we could do that, I'll do this up here is we could reference the employees collection

70
00:04:58,310 --> 00:05:02,030
and then use the get method.

71
00:05:02,120 --> 00:05:02,600
OK.

72
00:05:02,750 --> 00:05:10,700
And the get method gives us an object that is inside of this collection based on its index.

73
00:05:10,700 --> 00:05:13,910
So starting with zero zero would be the first one.

74
00:05:13,940 --> 00:05:16,430
So this works a lot like the arrays, right?

75
00:05:17,090 --> 00:05:23,930
So if I wanted to get the first person out of this collection, I could just use get zero.

76
00:05:23,930 --> 00:05:31,220
And then if I want to capture that person, I can do an option Command V. And I'll just say first.

77
00:05:31,730 --> 00:05:36,320
So this should be Fred, the first Fred here.

78
00:05:36,350 --> 00:05:37,580
That's who that should be.

79
00:05:37,610 --> 00:05:38,060
OK.

80
00:05:38,270 --> 00:05:44,030
And then if I want to duplicate this a couple more times and and then get the second one, which is

81
00:05:44,030 --> 00:05:45,320
index one, right?

82
00:05:45,320 --> 00:05:49,760
Because we're zero based and get the third one, which is index two.

83
00:05:50,030 --> 00:05:55,910
And same thing goes here second and third.

84
00:05:56,180 --> 00:05:56,480
All right.

85
00:05:56,490 --> 00:06:01,190
So now I've got my hands on these three employees.

86
00:06:01,310 --> 00:06:07,100
And now, if I want to remove them from the collection, I can do that very easily as well.

87
00:06:07,220 --> 00:06:09,530
So I can just say employees died.

88
00:06:09,770 --> 00:06:10,670
Remove.

89
00:06:12,840 --> 00:06:16,590
And now I actually have a few options here, to be honest with you.

90
00:06:16,740 --> 00:06:22,440
What I was going to show you first, though, was this first one here where I can just say first, OK?

91
00:06:23,100 --> 00:06:27,600
And then I could reference the second and the third as well.

92
00:06:27,610 --> 00:06:28,510
You get the picture.

93
00:06:28,530 --> 00:06:31,830
Second and third.

94
00:06:32,180 --> 00:06:34,050
Third, like so OK.

95
00:06:34,050 --> 00:06:41,740
So that's one way that I can remove individuals or individual objects from a collection very straightforwardly.

96
00:06:41,760 --> 00:06:42,210
OK.

97
00:06:43,980 --> 00:06:50,160
However, you may have seen that there was another way as well that kind of combined that kind of skip

98
00:06:50,160 --> 00:06:51,120
the middle man here.

99
00:06:51,120 --> 00:06:56,250
We're using an index to first get the thing, and then I'm referring to the thing that tell it to remove

100
00:06:56,250 --> 00:06:56,580
it, right?

101
00:06:56,730 --> 00:06:59,040
So I can actually skip past all of that.

102
00:07:00,000 --> 00:07:00,420
Let's see.

103
00:07:00,420 --> 00:07:02,940
We'll just we'll we'll get rid of all of these lines.

104
00:07:03,330 --> 00:07:11,640
And what you can do instead is employees remove and then just pass in an index like so.

105
00:07:12,600 --> 00:07:15,960
So this is equivalent and more streamlined, actually.

106
00:07:16,410 --> 00:07:16,770
Right?

107
00:07:17,100 --> 00:07:20,940
Just pass in the index and then tell it, remove the first, the second and the third.
