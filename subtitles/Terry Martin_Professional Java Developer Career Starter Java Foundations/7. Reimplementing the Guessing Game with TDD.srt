1
00:00:00,750 --> 00:00:01,180
All right.

2
00:00:01,200 --> 00:00:07,590
What I would like to do with you now is to start up another project and do some more unit testing,

3
00:00:07,590 --> 00:00:09,990
but get a little bit more involved now.

4
00:00:10,010 --> 00:00:18,410
So what I'm thinking is let's use a TDD approach to rewriting our guessing game.

5
00:00:18,420 --> 00:00:24,300
In other words, let's see how the guessing game would turn out if we were to do it with a test driven

6
00:00:24,510 --> 00:00:25,170
approach.

7
00:00:25,710 --> 00:00:30,270
So let's go to the ADC and let's just create a new project.

8
00:00:31,350 --> 00:00:31,740
All right.

9
00:00:31,740 --> 00:00:35,010
See, we'll we'll keep all of the defaults here.

10
00:00:35,190 --> 00:00:42,030
Let me let me make it so that you can see this okay, next and don't click anything other than next

11
00:00:42,030 --> 00:00:42,630
again.

12
00:00:42,900 --> 00:00:46,560
And let's just call it a guessing game.

13
00:00:47,100 --> 00:00:47,500
All right.

14
00:00:47,520 --> 00:00:52,230
And then click finish and we will use a new window.

15
00:00:53,850 --> 00:00:58,470
And let me resize this to use up the whole space there.

16
00:00:58,590 --> 00:00:59,190
All right.

17
00:00:59,190 --> 00:01:05,530
And then just as we did before, the first thing we need to do is to add our J Unit library.

18
00:01:05,850 --> 00:01:13,980
So we will right click on the project name here guessing game and then go down to open module settings.

19
00:01:15,880 --> 00:01:18,280
Then go down to libraries.

20
00:01:19,330 --> 00:01:22,420
Click Plus, click from MAVEN.

21
00:01:23,050 --> 00:01:30,970
OK, now it's time for us to enter the maven coordinates for the J Unit library that we want.

22
00:01:31,210 --> 00:01:38,140
Now let's say that you have no idea what those coordinates are, as even I barely can remember myself.

23
00:01:38,150 --> 00:01:45,730
So let me show you what I typically do to learn those coordinates for libraries that I want to use.

24
00:01:46,090 --> 00:01:52,480
What I will typically do is to open up a browser and I will bring one over here.

25
00:01:52,510 --> 00:01:53,380
Like so?

26
00:01:54,970 --> 00:02:03,550
And then I will go to a popular website for exactly this problem called MAVEN Repository.

27
00:02:03,760 --> 00:02:09,970
And you can just Google MAVEN repository, and it's the first link here.

28
00:02:10,240 --> 00:02:17,590
And then up in this search window here, you could maybe just start off by typing J Unit and hit enter

29
00:02:17,590 --> 00:02:18,340
or return.

30
00:02:18,670 --> 00:02:24,390
And looks like the very first thing that comes up is G-Unit Jupyter API, which I happen to know is

31
00:02:24,460 --> 00:02:25,780
a unit version five.

32
00:02:25,990 --> 00:02:28,990
And so that's looking pretty good to me.

33
00:02:29,110 --> 00:02:35,020
Now you will see a lot of things that will come up here, but in this case, I happen to know that Unit

34
00:02:35,020 --> 00:02:38,320
Jupiter is the current version that we want.

35
00:02:38,530 --> 00:02:40,360
So I'm going to click on that.

36
00:02:40,630 --> 00:02:45,700
And now what we see are all of the various versions of J.

37
00:02:45,700 --> 00:02:51,040
Unit Jupiter that have been released well, not just released, but in various states.

38
00:02:51,340 --> 00:02:59,860
And it looks to me like 5.8 is not quite ready for prime time as it is ending with the one we talked

39
00:02:59,860 --> 00:03:00,970
about this before.

40
00:03:01,000 --> 00:03:07,660
So it looks like the most stable release version of J Unit Jupiter is five point seventy two, which

41
00:03:07,660 --> 00:03:08,800
is what we used before.

42
00:03:09,040 --> 00:03:17,500
So if you click on that, then we get this little meta information here, and this information is actually

43
00:03:17,680 --> 00:03:20,830
the maven coordinates for this library.

44
00:03:21,250 --> 00:03:21,650
All right.

45
00:03:21,670 --> 00:03:29,470
Now, I think the easiest way to use this for for our purposes right now to have intelligent download

46
00:03:29,470 --> 00:03:34,390
this library is actually to click on this last tab here, builder.

47
00:03:34,840 --> 00:03:42,430
If you click on that, we have a short, sweet, easy representation of this maven coordinate.

48
00:03:42,850 --> 00:03:48,820
And so if you just grab that, copy it without the single ticks, and if you want, you can grab the

49
00:03:48,820 --> 00:03:50,020
whole entire thing with that.

50
00:03:50,020 --> 00:03:57,310
But leave off the the single text, the little single quotes there and then copy that and then go back

51
00:03:57,310 --> 00:04:04,090
over to the A.D. and then paste it right in here and then click OK.

52
00:04:04,720 --> 00:04:05,050
All right.

53
00:04:05,080 --> 00:04:10,360
And so now we're being told that that library will be added to this module.

54
00:04:10,390 --> 00:04:17,260
The guessing game module, just as we did before with our previous lesson and then click OK and then

55
00:04:17,260 --> 00:04:22,270
click OK again, and that library will have been downloaded.

56
00:04:22,570 --> 00:04:27,610
All right, then we'll have to go back into the project settings one more time.

57
00:04:27,620 --> 00:04:33,640
So again I'm right clicking on the guessing game here and I'm going to go back to the open module settings.

58
00:04:33,640 --> 00:04:39,790
And again, you can't see it on my screen now because it's kind of my menu is longer than what my screen

59
00:04:39,790 --> 00:04:40,840
is displaying.

60
00:04:40,840 --> 00:04:42,010
But take my word for it.

61
00:04:42,190 --> 00:04:45,330
You want to click on open module settings again?

62
00:04:45,340 --> 00:04:51,580
I have the modules option selected here, just as we did before, and then I'm going to come over here

63
00:04:51,580 --> 00:04:58,840
to the source folder and I'm going to right click and then click New Folder and then create a folder

64
00:04:58,840 --> 00:05:02,980
called Man Main, All Lowercase and click OK.

65
00:05:03,310 --> 00:05:10,030
And then I'm going to right click again and new folder and another folder here called Test.

66
00:05:10,600 --> 00:05:16,120
Click OK, then I'm going to single click on Main and then I'm going to.

67
00:05:16,120 --> 00:05:21,310
And if I make this just a little taller, I might be able to get a little more visibility here.

68
00:05:21,310 --> 00:05:22,650
Possibly.

69
00:05:22,720 --> 00:05:23,560
Nope, not quite.

70
00:05:23,680 --> 00:05:24,370
Anyway, all right.

71
00:05:24,550 --> 00:05:29,560
So I will click on Main and then click on this little icon here.

72
00:05:29,560 --> 00:05:35,350
Sources All right, and then I will click on Test and then click on tests.

73
00:05:36,690 --> 00:05:37,110
All right.

74
00:05:37,350 --> 00:05:42,840
And then click OK, and if you need a refresher on why we're doing any of that, go check out the first

75
00:05:42,840 --> 00:05:44,430
lesson in this module.

76
00:05:44,550 --> 00:05:45,930
All right, then click OK.

77
00:05:47,400 --> 00:05:49,770
And now we are ready to rock and roll.

78
00:05:50,580 --> 00:05:51,080
All right.

79
00:05:51,090 --> 00:05:58,230
So what I want to do here is to re-implement our guessing game again more or less.

80
00:05:58,530 --> 00:06:06,660
But this time I want to do it in a test driven way because I obviously we want to practice writing unit

81
00:06:06,660 --> 00:06:07,890
tests, for one thing.

82
00:06:08,010 --> 00:06:14,610
But I also want you to get a little bit familiar with how it feels to write code in this style to write

83
00:06:14,610 --> 00:06:19,860
especially slightly less trivial code than what we did with the calculator.

84
00:06:19,890 --> 00:06:23,100
OK, because we will have to solve a few issues.

85
00:06:23,520 --> 00:06:30,240
So one thing I want to mention is that in our first implementation of the guessing game, we ended up

86
00:06:30,240 --> 00:06:35,250
combining a couple of aspects of that game all into one thing.

87
00:06:35,460 --> 00:06:39,960
First off, we wrote it all in one class, which we will likely do again here.

88
00:06:39,990 --> 00:06:48,660
However, in our previous implementation with just one class, we combined both the user interface and

89
00:06:48,660 --> 00:06:51,840
the game logic all in one class.

90
00:06:51,850 --> 00:06:55,080
And it's it's very tightly integrated.

91
00:06:55,090 --> 00:07:00,660
And what I mean by the user interface is that when we were running that version of the guessing game

92
00:07:00,900 --> 00:07:04,110
to interact with it, we used the command line.

93
00:07:04,320 --> 00:07:11,730
So the guessing game would start up and it would ask us to enter a number that we wanted to guess and

94
00:07:11,730 --> 00:07:14,940
then we could use the keyboard and type in that number, right?

95
00:07:15,300 --> 00:07:21,960
And then whatever we were typing in would go back into the program code and it would do its thing and

96
00:07:21,960 --> 00:07:27,930
figure out if we had a match or not, etc. So in that implementation, the user interface and the game

97
00:07:27,930 --> 00:07:31,680
logic were all mixed in really tightly with each other.

98
00:07:32,010 --> 00:07:39,090
Typically, though, in professional programming, we often want to look for opportunities to separate

99
00:07:39,180 --> 00:07:45,120
the major chunks or sections or functions of our applications.

100
00:07:45,390 --> 00:07:54,690
So it is quite common that if you can, you might separate the user interface code from the business

101
00:07:54,690 --> 00:08:01,290
logic or in this case, since it's a game, the game logic of the code, and you might even separate

102
00:08:01,290 --> 00:08:04,430
them out into two or more separate classes.

103
00:08:04,440 --> 00:08:10,020
Even this is a very common pattern, and one of the reasons you might want to do that, typically,

104
00:08:10,020 --> 00:08:16,080
especially in professional programming, is because it makes your code more flexible and gives you more

105
00:08:16,080 --> 00:08:16,740
options.

106
00:08:16,980 --> 00:08:25,140
So, for example, today we might have a guessing game that we interact with just with the command prompt

107
00:08:25,380 --> 00:08:27,690
or terminal prompt, as we did before.

108
00:08:27,900 --> 00:08:36,120
But tomorrow we might want to reuse the game logic that we already wrote, but use a graphical user

109
00:08:36,120 --> 00:08:43,680
interface, maybe as a native looking Mac application, or maybe in the form of a mobile application.

110
00:08:44,040 --> 00:08:52,170
So in those cases, if we wrote our game logic in a flexible, somewhat independent way, we would then

111
00:08:52,170 --> 00:08:58,120
have the option to slap whatever type of user interface we want on top of it.

112
00:08:58,140 --> 00:09:06,120
And so one of the nice things about writing our code in a more test driven approach is that it tends

113
00:09:06,120 --> 00:09:13,410
to result in code that is more flexible right from the start, because that is how you kind of need

114
00:09:13,410 --> 00:09:16,770
to write code in order to make it more testable anyway.

115
00:09:17,130 --> 00:09:17,510
All right.

116
00:09:17,520 --> 00:09:22,680
So having said all of that, don't worry if this doesn't mean very much to you yet you'll see what I

117
00:09:22,680 --> 00:09:24,330
mean in just a moment here.

118
00:09:24,360 --> 00:09:26,060
All right, so let's get started.

119
00:09:26,070 --> 00:09:33,390
So what I want to do is I want to imagine that we will have a class that will represent the guessing

120
00:09:33,390 --> 00:09:38,850
game engine, if you will, like the heart of the guessing game logic, right?

121
00:09:38,940 --> 00:09:43,300
So we won't worry about printing words on a screen or anything like that.

122
00:09:43,320 --> 00:09:53,370
We'll just focus more on having the rules and the core logic of the guessing game written in code somehow.

123
00:09:53,640 --> 00:10:01,440
And we will write tests which will pretend to be a user interacting with this game engine.

124
00:10:01,590 --> 00:10:03,300
All right, so let's see what this could look like.

125
00:10:03,480 --> 00:10:10,950
So I'm going to open up the source folder, and first thing we want to do is create a class under test

126
00:10:10,950 --> 00:10:13,410
since we're doing test first development.

127
00:10:13,410 --> 00:10:16,650
So I will right click new Java class.

128
00:10:17,010 --> 00:10:24,030
And just as before, I will not only name a class, but I will name that class with a package as well.

129
00:10:24,390 --> 00:10:35,040
So I will use my company domain first neutrinos since that game and then I will call it guessing game.

130
00:10:35,460 --> 00:10:35,850
Now.

131
00:10:36,260 --> 00:10:40,680
This little bit here game, I could have called that anything I could have, call it combat, neutrino,

132
00:10:40,700 --> 00:10:43,730
sister guessing game or or whatever.

133
00:10:43,850 --> 00:10:45,010
It really doesn't matter.

134
00:10:45,020 --> 00:10:49,280
You just want it to be unique like the whole entire thing just needs to be unique.

135
00:10:49,640 --> 00:10:50,030
All right.

136
00:10:50,030 --> 00:10:54,170
So I will click Oh, guessing game test.

137
00:10:54,530 --> 00:10:57,620
All right, and now I can hit return.

138
00:10:58,250 --> 00:11:01,250
All right, so we've got our test class here.

139
00:11:01,490 --> 00:11:07,070
Now I'm going to make a new line here, and the first thing I need to do now is to decide, OK, what's

140
00:11:07,070 --> 00:11:09,680
the very first thing that I even want to test?

141
00:11:09,920 --> 00:11:11,720
So let's think about this for a moment.

142
00:11:12,320 --> 00:11:16,430
So not only I want to figure out what's the first thing to test, but I want to figure out like what

143
00:11:16,430 --> 00:11:23,180
are the easiest, smallest things that we could possibly test that would be somewhat meaningful, right?

144
00:11:23,690 --> 00:11:29,930
So one thought that comes to my mind is, OK, let's imagine that we have this game engine.

145
00:11:30,080 --> 00:11:34,930
Maybe the easiest thing we could do is to guess a correct number, right?

146
00:11:34,940 --> 00:11:37,370
And then you're kind of like, done right there.

147
00:11:37,610 --> 00:11:37,970
All right.

148
00:11:38,210 --> 00:11:46,580
So maybe we could have a method where we just have a new guessing game engine and then we call, I guess,

149
00:11:46,880 --> 00:11:53,690
and then we pass in a number and then maybe that guess method can return a string or something that

150
00:11:53,690 --> 00:11:56,480
tells us if we got it right or something like that.

151
00:11:56,570 --> 00:12:01,880
So let's just see what this might look like, and we may or may not actually go down this road entirely

152
00:12:01,880 --> 00:12:02,450
right now.

153
00:12:02,540 --> 00:12:04,290
I don't know yet, and that's OK.

154
00:12:04,310 --> 00:12:06,050
We don't have to have the whole thing planned out.

155
00:12:06,050 --> 00:12:08,630
We can just try some things and see what they feel like.

156
00:12:09,050 --> 00:12:09,410
All right.

157
00:12:09,410 --> 00:12:16,100
So let's say that we have a public void method, and this time I will start off my method name with

158
00:12:16,100 --> 00:12:18,500
the word test just to mix it up a little bit.

159
00:12:18,920 --> 00:12:24,560
Test simple when situation.

160
00:12:25,490 --> 00:12:25,770
All right.

161
00:12:25,790 --> 00:12:30,500
So in other words, I want to test a simple winning situation like where you just went right off the

162
00:12:30,500 --> 00:12:30,830
bat.

163
00:12:31,070 --> 00:12:31,540
All right.

164
00:12:31,550 --> 00:12:35,630
So I'm going to imagine that I have, I don't know.

165
00:12:35,750 --> 00:12:42,920
Let's say we have a class that represents the game engine itself, and maybe it could be called guessing

166
00:12:42,920 --> 00:12:43,370
game.

167
00:12:43,610 --> 00:12:45,710
Yeah, that's as good a name as anything, right?

168
00:12:45,710 --> 00:12:48,210
Especially since we named our test guessing game test.

169
00:12:48,230 --> 00:12:50,930
So we have a class called guessing game.

170
00:12:51,200 --> 00:12:55,480
And then we're going to make an instance of this game and I'm going to just call it game so that I don't

171
00:12:55,480 --> 00:12:56,720
have to type so much.

172
00:12:56,990 --> 00:13:01,070
Game equals new guessing game.

173
00:13:01,730 --> 00:13:02,230
All right.

174
00:13:02,390 --> 00:13:08,720
So first thing is, we will want to let the ADC create the actual instance of our guessing game.

175
00:13:08,960 --> 00:13:16,760
So I'm going to do an option return and create class guessing game, and I don't want it to go into

176
00:13:16,760 --> 00:13:18,080
the test folder.

177
00:13:18,080 --> 00:13:26,960
I wanted to go into the main folder, source main, click OK and then click OK.

178
00:13:27,800 --> 00:13:30,620
All right, so there's our guessing game class.

179
00:13:31,370 --> 00:13:35,930
All right, and then I will jump back over to the test with a command shift.

180
00:13:37,160 --> 00:13:37,580
All right.

181
00:13:37,580 --> 00:13:42,140
And now the guessing game reference to the class there is no longer read.

182
00:13:42,380 --> 00:13:42,830
All right.

183
00:13:43,250 --> 00:13:50,490
So now make a new line, and I'm going to imagine that we would want to make a guess, right?

184
00:13:50,510 --> 00:13:58,430
So let's say like we called Game Dot guess and then we just guess the number three.

185
00:13:58,940 --> 00:14:07,190
And then let's also imagine that this method guess would return a string, which will be like our message,

186
00:14:07,190 --> 00:14:07,550
right?

187
00:14:07,730 --> 00:14:08,770
And I don't know what to call this.

188
00:14:08,790 --> 00:14:10,670
I'm just going to call it message.

189
00:14:11,270 --> 00:14:11,650
All right.

190
00:14:11,660 --> 00:14:17,360
So we have this method called guess as then, you know, like, make a guess and then we're going to

191
00:14:17,360 --> 00:14:18,470
get back a message.

192
00:14:18,620 --> 00:14:24,950
So let's take care of this error here before we proceed, I seldom, if ever like to proceed multiple

193
00:14:24,950 --> 00:14:26,030
lines of code.

194
00:14:26,030 --> 00:14:31,190
If I've got an error, I typically want to take care of that error before I proceed to the next line

195
00:14:31,190 --> 00:14:31,610
of code.

196
00:14:31,610 --> 00:14:38,150
Because the ADC typically isn't happy and I miss out on opportunities for the ADP to help make sure

197
00:14:38,150 --> 00:14:43,340
I'm not doing something stupid because it kind of gets hung up on, Hey, what about that error you

198
00:14:43,340 --> 00:14:45,020
had back on that other line, right?

199
00:14:45,290 --> 00:14:51,110
So I'm going to put my cursor here again and then do an option return and create method.

200
00:14:51,110 --> 00:14:51,770
Guess?

201
00:14:52,280 --> 00:14:52,580
All right.

202
00:14:52,610 --> 00:14:56,530
And so now just this before it's asking me, Hey, I'm going to create this method, guess?

203
00:14:56,720 --> 00:14:58,580
Do you want it to return a string?

204
00:14:59,180 --> 00:15:00,740
And the answer is yes, I do.

205
00:15:00,750 --> 00:15:02,400
And then for some someone, the tab.

206
00:15:02,780 --> 00:15:09,080
And then it's saying like, OK, do you want to pass in an integer into this method?

207
00:15:09,080 --> 00:15:10,760
And yes, I do want to.

208
00:15:11,060 --> 00:15:12,770
And then I will tab again.

209
00:15:12,770 --> 00:15:14,420
And then what do I want to call this?

210
00:15:14,690 --> 00:15:15,320
And I don't know.

211
00:15:15,500 --> 00:15:21,500
Maybe I'll call it guest number and then I will hit enter.

212
00:15:21,860 --> 00:15:26,210
And so now I get a default return statement here, and that just returns null.

213
00:15:26,210 --> 00:15:27,050
And I didn't type this.

214
00:15:27,050 --> 00:15:31,460
Obviously, the ID e generated that for me, and I'm going to leave it for now.

215
00:15:31,580 --> 00:15:31,820
All right.

216
00:15:31,820 --> 00:15:35,660
So then I will jump back over to the test class again.

217
00:15:35,870 --> 00:15:47,800
All right, now, I will go to a new line and now I want to assert equals parentheses.

218
00:15:48,440 --> 00:15:52,160
And again, I need to get rid of this red here.

219
00:15:52,400 --> 00:15:59,900
Now, if I do an option return, then I need to import this method because it is a static method that

220
00:15:59,900 --> 00:16:00,350
I want.

221
00:16:00,360 --> 00:16:01,610
I'm not going to create the method.

222
00:16:01,610 --> 00:16:02,930
I just want to import it.

223
00:16:03,230 --> 00:16:08,360
So I choose import and we'll just go with this first option here.

224
00:16:08,360 --> 00:16:10,370
Assertions that assert equals.

225
00:16:10,760 --> 00:16:11,750
All right, there we go.

226
00:16:12,170 --> 00:16:14,240
And now we want to specify.

227
00:16:14,240 --> 00:16:19,060
And if you don't remember this, you can do a command p to show the parameters for this method.

228
00:16:19,070 --> 00:16:23,720
So the first parameter is what you were expecting and then the second parameter is what you actually

229
00:16:23,720 --> 00:16:24,140
got.

230
00:16:24,350 --> 00:16:24,740
OK.

231
00:16:24,980 --> 00:16:33,860
So let's say that we expect a message that says something like, you got it, and then we will refer

232
00:16:33,860 --> 00:16:35,000
to the message there.

233
00:16:35,540 --> 00:16:35,990
All right.

234
00:16:36,500 --> 00:16:39,140
So there's our first test.

235
00:16:39,410 --> 00:16:46,220
Now you may be thinking there are going to be a number of issues with this test and you would be right.

236
00:16:47,000 --> 00:16:51,980
There's a lot of issues like one issue is the fact that I just put some random number in here expecting

237
00:16:51,980 --> 00:16:53,870
this to be a winning situation.

238
00:16:54,020 --> 00:16:54,410
Right?

239
00:16:54,500 --> 00:16:59,780
Another issue is the fact that our game engine doesn't yet even generate any random numbers or anything

240
00:16:59,780 --> 00:17:00,050
else.

241
00:17:00,050 --> 00:17:08,090
But please recall that one of the rules of good TDD is we try not to write any more real code.

242
00:17:08,090 --> 00:17:10,670
And I'm not talking about the test code, I'm talking about the real code.

243
00:17:10,670 --> 00:17:13,220
So that would be code in the guessing game class itself.

244
00:17:13,460 --> 00:17:20,570
We try not to write any more real code than we absolutely need until the test tells us to write that

245
00:17:20,570 --> 00:17:21,050
code.

246
00:17:21,080 --> 00:17:28,610
OK, and right now, this is about as much as I can think that this test is requiring of us.

247
00:17:28,970 --> 00:17:34,790
So let's go ahead and run this now in order to make this method runnable as a test.

248
00:17:35,090 --> 00:17:37,040
Do you recall what else we need to do?

249
00:17:37,070 --> 00:17:43,250
We will need to place an at test annotation right above this method.

250
00:17:43,460 --> 00:17:47,120
And so I will do an at test with a capital T.

251
00:17:47,450 --> 00:17:51,740
And the first option here is the one that I want and I can click on that or hit enter.

252
00:17:53,210 --> 00:17:59,030
And that caused the ID to automatically import this annotation into our code.

253
00:17:59,300 --> 00:18:02,360
And now we have something that we can actually run.

254
00:18:02,690 --> 00:18:04,310
So let's go ahead and run it.

255
00:18:04,460 --> 00:18:06,710
Now we already know that this is going to fail.

256
00:18:06,890 --> 00:18:13,880
And that's important, though ideally we want to first see our test methods fail, then we want to write

257
00:18:13,880 --> 00:18:16,010
just enough code to make them pass.

258
00:18:16,370 --> 00:18:21,680
And then we want to run them again and make them pass, and we want to just kind of go back and forth

259
00:18:21,680 --> 00:18:22,370
like that.

260
00:18:22,460 --> 00:18:27,110
That way, we make sure that we're actually making real progress and not just starting off with a test

261
00:18:27,110 --> 00:18:30,860
that already for some reason would have passed no matter what you did.

262
00:18:31,340 --> 00:18:31,610
All right.

263
00:18:31,610 --> 00:18:35,390
So I will click the run button here and I will run this test.

264
00:18:35,900 --> 00:18:36,620
All right.

265
00:18:36,650 --> 00:18:42,700
And yeah, so it failed as we knew it would, and we got a message that we were expecting the words

266
00:18:42,710 --> 00:18:45,230
You got it and we got a null back instead.

267
00:18:45,530 --> 00:18:51,230
And just a quick reminder, null means kind of like empty object or an object that hasn't been set or

268
00:18:51,230 --> 00:18:54,110
a variable that hasn't been set to an object.

269
00:18:54,500 --> 00:18:54,920
All right.

270
00:18:55,160 --> 00:18:59,060
Now what's the easiest way to get this test to pass?

271
00:19:00,170 --> 00:19:06,770
Well, I think the easiest way to get this to pass would be to jump over here to the guests method and

272
00:19:06,770 --> 00:19:08,600
simply make it return.

273
00:19:09,260 --> 00:19:10,910
You got it.

274
00:19:11,420 --> 00:19:17,900
And I understand this may seem extremely inane, but again, this is the standard approach to doing

275
00:19:17,930 --> 00:19:24,680
TDD, which keeps us honest and helps to protect us from writing extraneous, unnecessary code that

276
00:19:24,680 --> 00:19:26,320
isn't bringing any value.

277
00:19:26,330 --> 00:19:28,160
And so we just take it in baby steps.

278
00:19:28,370 --> 00:19:28,790
All right.

279
00:19:28,940 --> 00:19:33,650
So we've written that message there, and now we can just go ahead and rerun our test and let's see

280
00:19:33,650 --> 00:19:34,250
what we get.

281
00:19:34,580 --> 00:19:35,030
All right.

282
00:19:35,060 --> 00:19:36,560
So now it passes.

283
00:19:37,400 --> 00:19:37,970
Very good.

284
00:19:38,150 --> 00:19:41,600
So now let's jump back over to our test.

285
00:19:42,770 --> 00:19:43,150
All right.

286
00:19:43,160 --> 00:19:48,470
So we're going to go ahead and stop right here, and we'll pick up with this in the next lesson.

287
00:19:48,470 --> 00:19:49,450
So I will see you there.
