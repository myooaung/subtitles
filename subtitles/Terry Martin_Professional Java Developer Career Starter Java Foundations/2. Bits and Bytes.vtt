WEBVTT
1
00:00:00.580 --> 00:00:07.330
Hey, there in this lesson, we're going to learn a little bit about bits and bytes and how data is

2
00:00:07.330 --> 00:00:14.680
represented in the memory of a computer, so most people are aware that fundamentally computers store

3
00:00:14.680 --> 00:00:22.450
information in numerical form and ultimately computers can really only understand at the lowest possible

4
00:00:22.450 --> 00:00:24.790
level zeros and ones.

5
00:00:25.060 --> 00:00:34.600
So all other data that isn't just a zero or a one has to be converted somehow down to zeros and ones.

6
00:00:35.140 --> 00:00:44.410
Now, in the regular expression section, I discussed how letters of strings and text really have a

7
00:00:44.410 --> 00:00:50.260
numerical value associated to each of them via various encoding schemes.

8
00:00:50.560 --> 00:00:55.840
One of the earliest and most successful encoding schemes was ASCII.

9
00:00:56.170 --> 00:01:05.530
And in the ASCII encoding scheme, the Capital Letter A is assigned the decimal numerical value of 65.

10
00:01:06.480 --> 00:01:13.260
Now, the fact that Capital A equals 65 is really just an arbitrary assignment.

11
00:01:13.500 --> 00:01:19.200
I'm a bunch of computer nerds got together and just decided one day that Capital A. is going to be 65,

12
00:01:19.230 --> 00:01:20.010
essentially.

13
00:01:20.730 --> 00:01:25.590
However, it's not enough just to decide that a capital A..

14
00:01:25.620 --> 00:01:31.410
And all other characters, for that matter, are going to be represented by some number, like 65 or

15
00:01:31.410 --> 00:01:32.040
whatever.

16
00:01:32.550 --> 00:01:39.480
Even that number 65 still has to be translated a little bit more before it can fundamentally be stored

17
00:01:39.480 --> 00:01:40.530
in the computer.

18
00:01:40.920 --> 00:01:44.940
And the lowest level of things in the computer would be bits.

19
00:01:45.540 --> 00:01:51.060
So let's look at what bits and bytes look like and how data is actually stored in the computer.

20
00:01:51.480 --> 00:01:58.140
What I have here is a little spreadsheet where I've blown up the individual cells of the spreadsheet

21
00:01:58.140 --> 00:02:01.860
big enough that we can talk about all of these different data types.

22
00:02:02.340 --> 00:02:11.430
So you can imagine that each square in this spreadsheet represents one bit of data.

23
00:02:11.580 --> 00:02:20.400
OK, so one square or one bit is capable of holding only one of two possible values.

24
00:02:20.940 --> 00:02:25.430
It can hold a zero or it can hold a one.

25
00:02:25.440 --> 00:02:26.250
And that's it.

26
00:02:26.670 --> 00:02:29.550
Those are the only two things that you can put in a bit.

27
00:02:30.210 --> 00:02:38.820
So if you need to represent something bigger, like the number 65, then you'll have to put a bunch

28
00:02:38.820 --> 00:02:39.900
of bits together.

29
00:02:39.900 --> 00:02:47.490
And the smallest number of bits that we can put together on modern computers typically is referred to

30
00:02:47.520 --> 00:02:48.630
as a bite.

31
00:02:49.260 --> 00:02:53.130
So a byte is eight bits put together.

32
00:02:53.220 --> 00:02:53.700
OK.

33
00:02:54.150 --> 00:03:02.820
And in fact, I'll even show you that that number 65 or capital a in ASCII encoding would be represented

34
00:03:02.820 --> 00:03:04.710
like this one.

35
00:03:05.780 --> 00:03:11.660
Zero zero zero zero zero and then another one, this is 65.

36
00:03:11.810 --> 00:03:13.250
Now why is that 65?

37
00:03:13.270 --> 00:03:14.210
How does this work?

38
00:03:14.840 --> 00:03:19.470
First of all, what we're looking at here is what's called a binary encoding.

39
00:03:19.500 --> 00:03:24.800
OK, so I just took the numbers 65 and translated it into binary.

40
00:03:25.310 --> 00:03:31.910
And the way the binary works is that you have different places, just like in decimal.

41
00:03:32.420 --> 00:03:36.890
If you when you were a little kid, you should have learned that the way that we count numbers, you

42
00:03:36.890 --> 00:03:42.590
have the ones place, the tens, place, the hundreds, place thousands and so on and so forth, right?

43
00:03:42.830 --> 00:03:44.810
That's how decimal numbers work.

44
00:03:45.150 --> 00:03:50.870
When you've exhausted all of the numbers in the ones place, then you rotate to the next place, which

45
00:03:50.870 --> 00:03:52.310
would be the tens place.

46
00:03:52.550 --> 00:03:59.030
And now you can start filling in numbers there, while similarly in binary, you also have places.

47
00:03:59.030 --> 00:04:07.460
But instead of having ones in tens and hundreds and thousands, you have one two, four, eight, 16,

48
00:04:07.460 --> 00:04:09.860
32, 64 and so on and so forth.

49
00:04:09.890 --> 00:04:10.270
OK.

50
00:04:10.520 --> 00:04:14.540
These are the places, if you will, in binary.

51
00:04:14.930 --> 00:04:22.520
And so if you want to have the numbers 65, then what you have to do is you have to put a one in the

52
00:04:22.520 --> 00:04:31.490
64 place and a one in the ones place and add those together to equal 65.

53
00:04:32.000 --> 00:04:37.220
And incidentally, each of the places in binary is a power of two.

54
00:04:37.700 --> 00:04:38.210
OK.

55
00:04:38.870 --> 00:04:45.980
So that's why these numbers go one two four eight, 16, 32, 64, 128 and so on and so forth.

56
00:04:45.980 --> 00:04:47.960
They're just doubling themselves.

57
00:04:48.470 --> 00:04:52.820
OK, so let's look at a few other numbers so that you can get the hang of this a little bit.

58
00:04:53.120 --> 00:04:55.580
Not that you need to become an expert or anything, but.

59
00:04:55.880 --> 00:05:02.960
So let's say we wanted to do the number nine, so we need to find the biggest numerical place that would

60
00:05:02.960 --> 00:05:06.050
fit into the number nine from binary.

61
00:05:06.320 --> 00:05:10.460
So we've got the ones twos, fours and eights and then 16.

62
00:05:10.460 --> 00:05:14.660
So 16 would be too big four nine, eight fits into nine.

63
00:05:14.870 --> 00:05:20.620
So we can put a one right there now nine minus eight equals one.

64
00:05:20.630 --> 00:05:23.570
So that's what we have left over and we have to encode a one.

65
00:05:23.720 --> 00:05:29.120
Well, we've got two ones placed right here so we can put the one right there and then these other two

66
00:05:29.120 --> 00:05:33.620
places we didn't need, so we just put zero in there.

67
00:05:33.770 --> 00:05:36.890
So one zero zero one is a nine.

68
00:05:37.520 --> 00:05:38.060
OK.

69
00:05:38.720 --> 00:05:41.780
And also eight plus one equals nine.

70
00:05:42.750 --> 00:05:43.680
Let's do another one.

71
00:05:43.860 --> 00:05:45.570
Let's do the number seven.

72
00:05:46.290 --> 00:05:49.620
So what's the largest place that will fit into?

73
00:05:49.650 --> 00:05:50.160
Seven.

74
00:05:50.490 --> 00:05:53.130
So one would fit, two would fit, four would fit.

75
00:05:53.130 --> 00:05:56.820
Eight does not fit because it's too big, so we have to back off.

76
00:05:57.150 --> 00:05:59.070
So four fits right.

77
00:05:59.910 --> 00:06:01.140
So we put a one here.

78
00:06:02.010 --> 00:06:06.740
OK, so seven minus four leaves us with three.

79
00:06:06.750 --> 00:06:10.620
So now we need to find the biggest place that would fit into three.

80
00:06:11.130 --> 00:06:13.080
One fit to fit.

81
00:06:13.350 --> 00:06:17.640
Four we've already used and it's too big, so we have to back off to two.

82
00:06:17.820 --> 00:06:19.740
OK, so two fits.

83
00:06:19.740 --> 00:06:21.180
So we put a one here.

84
00:06:21.630 --> 00:06:25.190
So now we've got six, but we're trying to get to seven.

85
00:06:25.200 --> 00:06:26.940
So seven minus six is one.

86
00:06:27.090 --> 00:06:30.000
So now we need a one, which we have right here.

87
00:06:30.210 --> 00:06:31.950
And so we put a one here.

88
00:06:32.640 --> 00:06:36.660
Don't worry if you're not catching this well enough that you could do this on your own, you're not

89
00:06:36.660 --> 00:06:38.430
likely to need to be able to do this.

90
00:06:38.700 --> 00:06:44.640
Just sit back and relax and just watch the video if this seems a little too much or whatever.

91
00:06:44.640 --> 00:06:48.420
But I would just want to convey how does binary work, you know?

92
00:06:48.750 --> 00:06:50.790
All right, so let's do one or two more numbers.

93
00:06:50.880 --> 00:06:52.230
Let's do.

94
00:06:52.230 --> 00:06:53.580
I'm just going to pick something random.

95
00:06:53.580 --> 00:06:54.180
13.

96
00:06:54.180 --> 00:06:55.170
Let's do 13.

97
00:06:55.710 --> 00:06:56.040
All right.

98
00:06:56.040 --> 00:06:57.390
So same logic.

99
00:06:57.690 --> 00:06:59.610
What's the biggest thing that we could fit into?

100
00:06:59.610 --> 00:07:00.070
13.

101
00:07:00.090 --> 00:07:04.020
First of all, while 16 is too big, so we need an eight.

102
00:07:04.170 --> 00:07:10.140
OK, so we're going to put a one here and now 13 minus eight is five.

103
00:07:10.800 --> 00:07:14.340
So what's the biggest number we could fit into a five?

104
00:07:14.430 --> 00:07:15.630
That would be a four.

105
00:07:16.050 --> 00:07:17.700
So we're going to put a one here.

106
00:07:18.880 --> 00:07:25.600
And so now we've got eight plus four, which is 12, but 13 is the number we were going for.

107
00:07:25.750 --> 00:07:28.550
So 13 minus 12 leaves one.

108
00:07:28.570 --> 00:07:30.100
And so now we just need a one.

109
00:07:30.580 --> 00:07:36.580
So we'll put a one here, and that means we didn't use the two the twos place, so we'll put a zero

110
00:07:36.580 --> 00:07:36.970
here.

111
00:07:37.300 --> 00:07:43.570
And so now that is 13 eight plus four is 12 plus one is 13.

112
00:07:44.110 --> 00:07:47.770
Someone to clear out this first one here.

113
00:07:48.910 --> 00:07:52.600
And I don't know, let's do one more.

114
00:07:52.630 --> 00:07:55.780
Let's do thirty seven.

115
00:07:56.380 --> 00:08:02.350
OK, so thirty seven, so we've got a thirty two here and a sixty four, obviously sixty four would

116
00:08:02.350 --> 00:08:03.060
be too much.

117
00:08:03.070 --> 00:08:05.260
So thirty two is where we're going to have to start.

118
00:08:05.590 --> 00:08:08.530
So we've got a thirty two and we're trying to get to thirty seven.

119
00:08:08.710 --> 00:08:11.400
So thirty seven minus thirty two is five.

120
00:08:11.410 --> 00:08:14.800
So now we just need to fill up a five.

121
00:08:14.980 --> 00:08:20.110
So four is the next biggest thing that we could fill in to five.

122
00:08:20.110 --> 00:08:26.350
So we'll put a one there and that leaves us with just one more, which is a one.

123
00:08:27.070 --> 00:08:28.630
And so we'll put that here.

124
00:08:29.320 --> 00:08:29.720
OK.

125
00:08:29.740 --> 00:08:34.060
And so now we've got thirty six, but we're trying to get to thirty seven.

126
00:08:34.150 --> 00:08:36.610
And so thirty seven minus thirty six is one.

127
00:08:36.940 --> 00:08:38.090
So we need a one.

128
00:08:38.330 --> 00:08:41.350
We'll put that here and then the rest will be zeros.

129
00:08:43.870 --> 00:08:50.390
And there is 37 in binary, so really it's just thirty two plus four plus one.

130
00:08:50.410 --> 00:08:50.860
Okay.

131
00:08:51.460 --> 00:08:53.380
That's how we get to 37.

132
00:08:53.680 --> 00:08:53.990
All right.

133
00:08:54.010 --> 00:09:03.280
So hopefully you can kind of see how binary works and how we can convert a decimal number into a binary

134
00:09:03.280 --> 00:09:03.760
number.
