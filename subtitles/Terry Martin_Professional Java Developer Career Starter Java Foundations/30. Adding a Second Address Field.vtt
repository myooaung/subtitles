WEBVTT
1
00:00:00.450 --> 00:00:07.320
OK, in this lesson, we're going to add another address filled to our person class, which was something

2
00:00:07.320 --> 00:00:10.050
that I was already always intending to do anyway.

3
00:00:10.350 --> 00:00:12.150
So back in the i-d here.

4
00:00:12.160 --> 00:00:17.970
Let's jump over to the person class to just take a look at how we were originally modeled it.

5
00:00:18.330 --> 00:00:22.230
So I'm going to open up the person class here.

6
00:00:22.410 --> 00:00:27.870
And as you can see, we've got online 20 this home address field.

7
00:00:28.170 --> 00:00:35.220
So let's consider what if we wanted to add an additional address field like business address or school

8
00:00:35.220 --> 00:00:35.670
address?

9
00:00:35.720 --> 00:00:42.300
It doesn't really matter what it is, right, but just an additional address field associated with the

10
00:00:42.300 --> 00:00:43.320
person class.

11
00:00:43.560 --> 00:00:44.610
How could we do that?

12
00:00:44.940 --> 00:00:52.680
Why don't you take a moment to go ahead and try to add that additional field into this class for yourself?

13
00:00:52.680 --> 00:00:57.000
And then I will join back up with you and you'll see how I will do it as well.

14
00:00:58.380 --> 00:00:58.730
OK.

15
00:00:58.770 --> 00:00:59.610
Did you get that?

16
00:01:00.210 --> 00:01:00.550
All right.

17
00:01:00.570 --> 00:01:04.790
So my thought here is, let's add an additional address field.

18
00:01:04.800 --> 00:01:10.080
I'm going to probably call mine biz address or business address something like that.

19
00:01:10.290 --> 00:01:17.010
And obviously, the ultimate goal will be to enable our people repository to be capable of saving a

20
00:01:17.010 --> 00:01:21.780
person with either or both additional addresses as well.

21
00:01:21.840 --> 00:01:28.770
OK, but let's start off by just adding this additional address field to the person class, and I'm

22
00:01:28.770 --> 00:01:32.070
going to do this starting off in the tests again.

23
00:01:32.280 --> 00:01:35.790
So I'm going to jump back over to the tests.

24
00:01:35.820 --> 00:01:36.450
There we go.

25
00:01:36.990 --> 00:01:37.410
All right.

26
00:01:37.440 --> 00:01:38.640
And let's see here.

27
00:01:38.640 --> 00:01:42.630
So we've already got this test here can save person with an address.

28
00:01:43.050 --> 00:01:49.980
So what I'm thinking of doing here is I will just duplicate this test as a starting point.

29
00:01:51.420 --> 00:01:59.730
But now I will change its name subtly from can say, person with address to can save a person with bills

30
00:01:59.730 --> 00:02:01.980
address and then and then maybe appear.

31
00:02:01.980 --> 00:02:09.000
I should change this one to can save a person with home address just to make that subtle distinction.

32
00:02:09.510 --> 00:02:09.870
OK.

33
00:02:09.900 --> 00:02:15.990
And so here we're creating a person, then we're creating an address, then we're setting the address

34
00:02:15.990 --> 00:02:18.390
on that person's home address, right?

35
00:02:18.690 --> 00:02:21.390
So why don't we for the business address one?

36
00:02:21.390 --> 00:02:25.320
Why don't we just pretend like we've got another set or method here called?

37
00:02:26.520 --> 00:02:28.770
Business address, like so.

38
00:02:28.890 --> 00:02:34.890
And of course, that method does not yet exist, so we will allow the aid to create that for us.

39
00:02:35.370 --> 00:02:38.990
And I will choose to have the aid, create the property.

40
00:02:39.000 --> 00:02:43.680
That way we get the property, the better and the better methods all generated for us.

41
00:02:44.040 --> 00:02:44.460
All right.

42
00:02:44.490 --> 00:02:47.050
And yes, the data type is address.

43
00:02:47.070 --> 00:02:47.910
Let me scroll up.

44
00:02:48.210 --> 00:02:49.740
Make sure you can see that.

45
00:02:50.010 --> 00:02:53.460
And the parameter, I guess, should be called business address.

46
00:02:53.460 --> 00:02:54.240
That's fine.

47
00:02:54.390 --> 00:02:57.330
And then the property is business address.

48
00:02:57.560 --> 00:03:00.240
Yeah, that all looks pretty good, I think.

49
00:03:00.600 --> 00:03:04.290
And then let's come up here to the top and make sure that it did the right thing up here.

50
00:03:04.320 --> 00:03:04.740
All right.

51
00:03:04.740 --> 00:03:06.120
So we've got a business address now.

52
00:03:06.120 --> 00:03:12.240
Of course, we modeled the home address to actually be an optional address, and now this one isn't

53
00:03:12.240 --> 00:03:12.740
so.

54
00:03:12.810 --> 00:03:15.570
Let's go ahead and just update that right now.

55
00:03:16.470 --> 00:03:24.990
Optional address And then coming down here, we see that this center here should be modeled off of the

56
00:03:24.990 --> 00:03:25.860
set up here.

57
00:03:25.860 --> 00:03:33.030
So if we're going to accept a non optional address, then we'll need to wrap it inside of the implementation

58
00:03:33.330 --> 00:03:35.430
right of Nullarbor.

59
00:03:38.760 --> 00:03:46.110
Like so and then this message should return and optional address.

60
00:03:46.350 --> 00:03:47.520
OK, there we go.

61
00:03:47.820 --> 00:03:48.140
All right.

62
00:03:48.150 --> 00:03:50.940
And then we can jump back over to the test.

63
00:03:51.600 --> 00:03:58.200
OK, so now we're setting a business address and then down here in the assertion we will want to get

64
00:03:58.380 --> 00:04:01.620
the business address now.

65
00:04:01.890 --> 00:04:04.590
But everything else, I think should be the same.

66
00:04:04.590 --> 00:04:07.770
And in fact, I don't even think we need to change any of these values here.

67
00:04:08.160 --> 00:04:12.900
OK, so let's go ahead and run this, and it should fail.

68
00:04:13.620 --> 00:04:14.670
It had better fail.

69
00:04:15.660 --> 00:04:16.040
OK.

70
00:04:16.380 --> 00:04:22.830
And I will click on this and yes, expecting actual not to be null, but it was not OK.

71
00:04:22.890 --> 00:04:23.520
Very good.

72
00:04:24.000 --> 00:04:24.270
All right.

73
00:04:24.280 --> 00:04:29.700
So now this should be pretty straightforward in terms of implementing so much so that I want to challenge

74
00:04:29.700 --> 00:04:33.120
you to go ahead and try implementing this yourself first.

75
00:04:33.780 --> 00:04:37.500
So why don't you pause the video and see if you can get this implemented?

76
00:04:37.500 --> 00:04:42.630
It should basically just be pretty much copying some of the existing code that we've already got and

77
00:04:42.630 --> 00:04:44.460
then join back up with me once you've got it.

78
00:04:44.490 --> 00:04:45.060
Go for it.

79
00:04:47.580 --> 00:04:48.060
OK.

80
00:04:48.090 --> 00:04:53.670
Did you get it all right, so now I will do that with you and we'll see how to get this going.

81
00:04:54.570 --> 00:05:04.110
So I'm going to jump into the people repository and we want to go to our method for saving right.

82
00:05:04.140 --> 00:05:10.230
So here's where we're currently saving a person, and the very first thing we're doing is creating an

83
00:05:10.230 --> 00:05:12.330
address for the saved address.

84
00:05:12.330 --> 00:05:16.320
So that might now have to become like a home address or something of that sort.

85
00:05:16.650 --> 00:05:20.160
And then we prepare to save all the properties of a person, right?

86
00:05:20.160 --> 00:05:22.350
First name, last name, et cetera, et cetera.

87
00:05:22.560 --> 00:05:28.590
But then right here we have this conditional now where we're saying if there is a home address present,

88
00:05:28.800 --> 00:05:32.220
then use the address repository to save that person.

89
00:05:32.490 --> 00:05:38.280
And then that save method should return the saved address, which will now have an ID in it.

90
00:05:38.580 --> 00:05:46.290
And so then we can take that saved ID and associate that to the sixth parameter of our Insert sequel.

91
00:05:46.410 --> 00:05:46.860
OK.

92
00:05:47.100 --> 00:05:50.160
And let's see here just as a really quick review.

93
00:05:50.430 --> 00:05:58.860
So this idea currently is the ID of the home address that just got saved, and we are wanting to associate

94
00:05:58.860 --> 00:06:05.880
that with this parameter right here, which also corresponds to this column in the people table, right?

95
00:06:05.880 --> 00:06:07.410
The home address, right?

96
00:06:08.100 --> 00:06:14.190
So we are just taking that ID of the saved home address and then associating with the home address column

97
00:06:14.370 --> 00:06:15.750
of the people table.

98
00:06:15.960 --> 00:06:22.620
And so to save an additional address, the business address, we basically just need to do all of this

99
00:06:22.620 --> 00:06:22.950
again.

100
00:06:23.070 --> 00:06:30.990
However, we're also going to need to add an additional column to the database right to the people table

101
00:06:31.290 --> 00:06:33.790
to save the business address as well.

102
00:06:33.810 --> 00:06:34.140
OK.

103
00:06:34.380 --> 00:06:41.250
So first, let's go into Squirrel sequel and alter our schema a little bit to add this now that's a

104
00:06:41.250 --> 00:06:43.080
term I haven't used before schema.

105
00:06:43.410 --> 00:06:49.900
The word schema basically just refers to the blueprint for our data tables in a database.

106
00:06:49.920 --> 00:06:54.510
OK, so the schema is like all the table definitions and stuff.

107
00:06:54.660 --> 00:06:58.530
Just like in Java, we've got all the class definitions, if you will.

108
00:06:58.560 --> 00:07:05.550
OK, so we're going to alter our schema to add in this additional business address column.

109
00:07:05.820 --> 00:07:06.110
All right.

110
00:07:06.120 --> 00:07:08.460
So let's hop over to Squirrel.

111
00:07:08.610 --> 00:07:12.510
And by the way, there's another way that we can connect to Squirrel pretty quickly.

112
00:07:12.510 --> 00:07:19.290
If you just come up here to the Connect two and then select the people test that opens up this dialog

113
00:07:19.410 --> 00:07:21.420
right here and we can connect to it.

114
00:07:22.810 --> 00:07:31.480
All right, so we're going to want to alter the people table to add in an additional business address

115
00:07:31.480 --> 00:07:33.070
field, right or column.

116
00:07:33.120 --> 00:07:38.620
Right now, I don't know if when I challenged you just a little bit ago to try to implement all of this

117
00:07:38.620 --> 00:07:39.310
on your own.

118
00:07:39.430 --> 00:07:45.370
If you took the time to come into squirrel also, or if you just focused on the Java code, if you only

119
00:07:45.370 --> 00:07:49.570
focused on the Java code, do you want to go ahead and try doing this on your own as well?

120
00:07:50.080 --> 00:07:56.230
You can pause the video you can Google for H2 database go down to the commands, and if you don't remember

121
00:07:56.260 --> 00:08:03.100
all of the exact commands that you need to type in to add an additional column to an existing table.

122
00:08:03.190 --> 00:08:05.830
So if you like to go ahead and try that now?

123
00:08:07.290 --> 00:08:07.710
All right.

124
00:08:07.920 --> 00:08:08.490
Did you get it?

125
00:08:09.450 --> 00:08:11.070
OK, I'm going to do it now.

126
00:08:11.430 --> 00:08:15.240
All right, so let's do a altar table.

127
00:08:15.750 --> 00:08:24.150
People add column and we called our previous address field home underscore address.

128
00:08:24.450 --> 00:08:25.710
Let's call this one.

129
00:08:25.900 --> 00:08:34.320
This underscore address now, probably I really should be calling this biz address I.D. because that's

130
00:08:34.320 --> 00:08:36.750
what it really is in the database.

131
00:08:36.990 --> 00:08:42.030
But because I didn't do that on the home address, maybe I'm not going to do that here, either.

132
00:08:42.240 --> 00:08:49.440
Now, maybe if I were ever to modify the home address column here to be home address ID, then at that

133
00:08:49.440 --> 00:08:51.270
time I might change this one as well.

134
00:08:51.450 --> 00:08:54.370
But I'd like them to at least both be consistent.

135
00:08:54.390 --> 00:08:58.890
So for now, I'm just going to go with this address and it's actually going to be an ID, which is a

136
00:08:58.890 --> 00:08:59.610
foreign key.

137
00:08:59.610 --> 00:09:02.270
Pointing back to the addresses table.

138
00:09:02.280 --> 00:09:05.880
Remember that a foreign key because that's about to come up right here.

139
00:09:05.880 --> 00:09:12.120
So we're going to do a biz address and then the data type, which is big integer or big event.

140
00:09:12.330 --> 00:09:18.870
And now, because this is a foreign key field, I don't know if you remember we actually modified the

141
00:09:18.870 --> 00:09:26.730
home address column of the people table at one point to specify that it has a foreign key constraint,

142
00:09:26.730 --> 00:09:31.950
pointing back to the ID column of the addresses table.

143
00:09:32.520 --> 00:09:38.820
Now we did that by just modifying the existing field, but here we're creating a field or a column all

144
00:09:38.820 --> 00:09:39.520
in one go.

145
00:09:39.540 --> 00:09:44.670
And so this time around, we're going to specify that there should be a foreign key constraint on this

146
00:09:44.670 --> 00:09:47.040
column as we're creating the column.

147
00:09:47.130 --> 00:09:51.370
And the way to do that is by adding a little bit more onto the end of this line.

148
00:09:51.390 --> 00:09:57.000
So we will add in references and then the name of the table that this column is going to reference,

149
00:09:57.000 --> 00:10:04.620
which is the addresses table and then parentheses and then the name of the column or columns that this

150
00:10:04.620 --> 00:10:08.460
field is pointing to, which in this case is the ID column.

151
00:10:08.640 --> 00:10:11.760
Now let me just remind you why we're saying it in this way.

152
00:10:12.210 --> 00:10:19.530
Basically, we're just saying, if you imagine that this is now the additional business address column,

153
00:10:19.530 --> 00:10:27.150
all we're saying is that any values that we place in this column have to be legitimate values that are

154
00:10:27.150 --> 00:10:30.000
in the ID column of the addresses table.

155
00:10:30.180 --> 00:10:35.850
So in other words, we can't have like the number one thousand if there is no one thousand over here

156
00:10:35.850 --> 00:10:38.790
because that's not an existing record in the addresses table.

157
00:10:38.940 --> 00:10:45.150
Now we are allowed to have null just to indicate that there is no home address where there is no business

158
00:10:45.150 --> 00:10:47.700
address that is a valid value here.

159
00:10:47.880 --> 00:10:54.060
But if you put anything other than null, it has to be a number that is an actual ID in this column

160
00:10:54.060 --> 00:10:54.340
here.

161
00:10:54.360 --> 00:10:54.720
OK.

162
00:10:55.500 --> 00:10:57.660
And so that's what we're really saying here.

163
00:10:57.870 --> 00:11:03.010
This field will reference IDs from the addresses table.

164
00:11:03.030 --> 00:11:04.380
That's exactly what we're saying.

165
00:11:04.440 --> 00:11:04.800
OK.

166
00:11:05.160 --> 00:11:05.560
All right.

167
00:11:05.580 --> 00:11:09.900
And so once we've got that, I'm going to go ahead and execute this.

168
00:11:11.030 --> 00:11:16.250
Now, if you look down here, you'll see that that's going to take a little while to run because it

169
00:11:16.250 --> 00:11:22.850
has to go and essentially update all five million and 11 or whatever it is records that are currently

170
00:11:22.850 --> 00:11:23.750
in the database.

171
00:11:23.870 --> 00:11:25.670
But this is a one time hit.

172
00:11:29.510 --> 00:11:35.180
All right, so that took nearly a minute to to do that, but it looks like it's all set now.

173
00:11:35.180 --> 00:11:40.250
So now we've got our proper business address column and in fact, we can confirm that in a couple of

174
00:11:40.250 --> 00:11:40.760
ways.

175
00:11:40.940 --> 00:11:47.480
We can jump over here to the Objects tab and then I'm double clicking on people test and then public

176
00:11:47.480 --> 00:11:53.650
and then table and people and then clicking on columns.

177
00:11:53.660 --> 00:11:56.180
And now we should have an additional column here.

178
00:11:56.180 --> 00:12:00.290
And yes, we do have got home address and then we've got this address.

179
00:12:00.650 --> 00:12:00.920
All right.

180
00:12:00.920 --> 00:12:02.810
So that looks pretty good.

181
00:12:03.050 --> 00:12:03.290
All right.

182
00:12:03.290 --> 00:12:10.010
So now we can jump back over to the ABC, and now we're going to want to update our insert statement

183
00:12:10.040 --> 00:12:10.850
yet again.

184
00:12:11.090 --> 00:12:18.770
So just as we added this home address, we can now add in an additional biz address column now.

185
00:12:18.920 --> 00:12:25.310
And that means we also need to add in another question mark here as another and as an additional bind

186
00:12:25.310 --> 00:12:26.210
parameter.

187
00:12:26.660 --> 00:12:31.100
And then we can go down to our map for save method down here.

188
00:12:31.310 --> 00:12:33.020
Now this will be kind of interesting.

189
00:12:33.020 --> 00:12:39.800
So currently, here's everything we're doing to be able to save a home address, right?

190
00:12:39.920 --> 00:12:42.620
So really, we just want to do all of this again.

191
00:12:42.830 --> 00:12:45.440
But now for the newly added bills address.

192
00:12:45.650 --> 00:12:50.240
So one thing I'm thinking to do here, because pretty much we would just copy everything that I have

193
00:12:50.240 --> 00:12:52.310
selected here and then paste it again, right?

194
00:12:52.550 --> 00:12:58.430
However, I've as I've tried to state a number of times throughout this course, most of the times when

195
00:12:58.430 --> 00:13:04.640
you are inclined to copy and paste code like that, that's a strong indication that you instead should

196
00:13:04.640 --> 00:13:08.060
extract a method and then just reuse that method.

197
00:13:08.090 --> 00:13:08.450
OK.

198
00:13:08.630 --> 00:13:10.880
So let's see if we can figure out a way to do that.

199
00:13:11.390 --> 00:13:15.740
So first thing I'm going to do since I already have this selected is I'm going to do an option command

200
00:13:15.740 --> 00:13:21.160
M to extract the method, and now I need to think of a good name for this.

201
00:13:21.170 --> 00:13:23.300
So what is this code really doing?

202
00:13:23.810 --> 00:13:31.190
It's taking an entity and a prepared statement, and it's determining if there is a home address.

203
00:13:31.400 --> 00:13:39.350
It's saving that home address to the database, getting an ID for that address and then associating

204
00:13:39.350 --> 00:13:46.310
that address to a bind parameter, which in this case is the sixth bind parameter, right?

205
00:13:46.550 --> 00:13:53.240
So maybe a good name for this would be associate address with.

206
00:13:54.870 --> 00:13:58.500
Person, I don't know if that's a great name, but it's better than nothing.

207
00:13:59.010 --> 00:14:00.420
So let's start with that.

208
00:14:00.510 --> 00:14:00.770
All right.

209
00:14:00.780 --> 00:14:03.930
So this method will associate address with person.

210
00:14:04.290 --> 00:14:04.690
All right.

211
00:14:04.710 --> 00:14:12.870
And now the next thing I think we want to figure out here is currently this method is hard coded essentially

212
00:14:12.870 --> 00:14:15.450
to only work with the home address.

213
00:14:15.450 --> 00:14:19.680
And now we're going to need it to work with either the home address or the business address.

214
00:14:20.100 --> 00:14:25.770
So what would be kind of nice, I think, is maybe if we could parameter ize this like turn this bit

215
00:14:25.770 --> 00:14:32.430
here into a parameter that we could pass in to specify which address are we trying to work with?

216
00:14:33.120 --> 00:14:34.500
So let's see if we can actually do that.

217
00:14:34.500 --> 00:14:36.240
I've already selected it right here.

218
00:14:36.540 --> 00:14:44.610
So let's see what happens if I simply do an option command p for parameter eyes and I want to replace

219
00:14:44.610 --> 00:14:50.940
that in two places, which is here and then down here, which is a little bit obscured behind this little

220
00:14:50.940 --> 00:14:53.970
pop up here, but I'm going to select both of those spots.

221
00:14:54.270 --> 00:14:54.720
All right.

222
00:14:54.900 --> 00:15:01.110
And now I'm just going to call this address since I plan to reuse this for both home and business.

223
00:15:01.560 --> 00:15:02.030
All right.

224
00:15:02.040 --> 00:15:03.880
So that added our address field now.

225
00:15:03.900 --> 00:15:10.800
Notice it also took away the Entity Field, which I think is OK, and apparently the ID deemed that

226
00:15:10.800 --> 00:15:12.800
that was an OK thing to do as well.

227
00:15:12.810 --> 00:15:18.000
And then it added in the entity that get home, address up here now and then, I think we're going to

228
00:15:18.000 --> 00:15:23.700
need to introduce one more parameter as well, and that would be for this index here.

229
00:15:23.850 --> 00:15:25.500
So currently, that's six.

230
00:15:25.500 --> 00:15:28.610
But for our business address, it's going to be a seven.

231
00:15:28.620 --> 00:15:31.410
So I think the six needs to become a parameter as well.

232
00:15:31.590 --> 00:15:37.530
So I've selected the six and then again, I'm going to do an option command p and I want to replace

233
00:15:37.530 --> 00:15:41.010
both occurrences of the six within this method here.

234
00:15:41.010 --> 00:15:44.220
So I'm going to select replace all two occurrences.

235
00:15:44.700 --> 00:15:49.200
And now this, I think, is OK to just be called parameter index.

236
00:15:49.470 --> 00:15:51.450
So I'm going to leave it as is and hit enter.

237
00:15:51.480 --> 00:15:52.020
All right.

238
00:15:52.470 --> 00:15:58.200
And so now I think I'm ready to reuse this by simply duplicating line forty eight.

239
00:15:58.200 --> 00:16:05.070
So I'm just going to do a Command D to duplicate that or control D on Windows and Linux and now change

240
00:16:05.070 --> 00:16:07.950
this bit here from get home address to get.

241
00:16:10.300 --> 00:16:14.890
Business address and then change this parameter to seven.

242
00:16:15.070 --> 00:16:20.920
So you see how much more concise this is where I'm not having to duplicate this little chunk of code

243
00:16:20.950 --> 00:16:26.170
twice, which would not be a good thing to do at all, because then you'd have more maintenance to do.

244
00:16:26.170 --> 00:16:31.210
If if I decided later on that I wanted to change how this implementation works, I'd have to change

245
00:16:31.210 --> 00:16:33.370
it in every place where I duplicated that code.

246
00:16:33.550 --> 00:16:36.910
And what if we added a third address, which I'm not likely to do?

247
00:16:37.090 --> 00:16:39.550
But what if we did add a third address or whatever?

248
00:16:39.670 --> 00:16:45.550
Well, now I can just duplicate this one line of code, which is a lot less code duplication, right

249
00:16:45.550 --> 00:16:46.780
than doing it down here.

250
00:16:46.870 --> 00:16:48.610
So again, just keep that in mind.

251
00:16:48.610 --> 00:16:53.800
Any time you feel compelled to copy and paste code and you've seen me copy and paste some code, I copied

252
00:16:53.800 --> 00:17:01.750
some code from the address repo into the people repo here a few lessons ago because I didn't really

253
00:17:01.750 --> 00:17:07.630
want to get into how they exposed the code that we copied from the address repo in such a way that it

254
00:17:07.630 --> 00:17:10.150
could be accessible from the people repo.

255
00:17:10.390 --> 00:17:15.190
But in real life, if I were spending more time to do all of this stuff, I would have spent more time

256
00:17:15.190 --> 00:17:18.490
to figure out how to reuse that same code without copying and pasting.

257
00:17:18.640 --> 00:17:22.360
But here it's super easy because we're all in the same class anyway.

258
00:17:23.170 --> 00:17:30.610
So that might be enough for us to be able to at least save the additional business address if it exists.

259
00:17:31.060 --> 00:17:36.250
Let's pop back over to the test now because I don't exactly remember what our assertion was.

260
00:17:36.340 --> 00:17:44.170
So we were asserting that the saved persons business addresses I.D. would not be zero.

261
00:17:44.410 --> 00:17:47.050
So let's get out of the scroll SQL database.

262
00:17:47.350 --> 00:17:48.670
Let's close this.

263
00:17:49.570 --> 00:17:50.140
All right.

264
00:17:50.290 --> 00:17:53.440
And now let's run this and see if we've done enough yet.

265
00:17:54.350 --> 00:17:54.610
Huh.

266
00:17:54.930 --> 00:17:55.800
Looks like we have.

267
00:17:55.830 --> 00:17:59.100
OK, so now let's go ahead and just run all the tests.

268
00:18:00.690 --> 00:18:01.710
Oh, OK.

269
00:18:02.100 --> 00:18:04.230
So almost everything is broken now.

270
00:18:04.260 --> 00:18:08.520
Let's see why I can a person with home address even that's broken now.

271
00:18:08.910 --> 00:18:10.620
OK, so let's see here.

272
00:18:10.650 --> 00:18:13.320
Clicking on the can save person with home address.

273
00:18:13.620 --> 00:18:16.050
We've got an error here now.

274
00:18:16.080 --> 00:18:17.700
An old pointer exception.

275
00:18:18.330 --> 00:18:24.150
OK, so we ran into this before when we implemented the ability to save a home address.

276
00:18:24.420 --> 00:18:26.730
And do you remember what that issue was?

277
00:18:27.450 --> 00:18:32.490
It says here cannot invoke optional that is present because the address is null.

278
00:18:32.640 --> 00:18:39.120
Do you remember what what was causing that we needed to jump over to the person class?

279
00:18:40.620 --> 00:18:47.760
Up at the top here, and we had to initialize the home address to be empty because if we don't initialize

280
00:18:47.760 --> 00:18:49.410
it, it's just null, right?

281
00:18:49.650 --> 00:18:53.040
Same thing goes right here for the business address as well.

282
00:18:53.250 --> 00:18:57.360
So if we simply do this again, optional died empty.

283
00:18:57.810 --> 00:18:59.660
Now I want to make sure you really got this.

284
00:18:59.670 --> 00:19:00.660
I tried to explain it.

285
00:19:00.660 --> 00:19:07.110
But just in case I'll repeat when we first create an instance of a person, if we didn't have this equals

286
00:19:07.110 --> 00:19:13.170
optional, that empty, then at the moment that this person is first created, this business address

287
00:19:13.170 --> 00:19:15.000
field here would be null, right?

288
00:19:15.020 --> 00:19:15.980
That makes sense, right?

289
00:19:15.990 --> 00:19:18.320
Because you haven't said anything on it yet.

290
00:19:18.330 --> 00:19:25.530
And if we haven't ever set any value on this business address, but we're trying to call what was the

291
00:19:25.530 --> 00:19:31.590
method here, we're we're trying to call get business address dot is present.

292
00:19:31.800 --> 00:19:33.660
That's really what's causing this.

293
00:19:33.900 --> 00:19:40.260
Get business address that is present well is present is a method on the optional class and there is

294
00:19:40.260 --> 00:19:45.690
no optional class yet because this business address, which is an optional supposed to be an optional,

295
00:19:45.810 --> 00:19:47.010
would be null.

296
00:19:47.040 --> 00:19:47.370
Right.

297
00:19:47.490 --> 00:19:51.870
And so you are trying to call a method on an object that is null.

298
00:19:51.930 --> 00:19:56.580
In other words, the object does not exist, and so you're getting a null pointer exception.

299
00:19:56.690 --> 00:19:57.020
Right.

300
00:19:57.030 --> 00:19:58.230
That's what we're getting here.

301
00:19:58.500 --> 00:20:05.880
And so the easy way to remedy that is simply to initialize the field directly on its declaration to

302
00:20:05.880 --> 00:20:06.810
just be empty.

303
00:20:07.140 --> 00:20:14.250
Now that will get wiped away as soon as we call the setter method set business address, then this object

304
00:20:14.250 --> 00:20:20.010
here with this empty optional would just get garbage collected and replaced with whatever presumably

305
00:20:20.010 --> 00:20:24.870
real object or real optional object we set on that field.

306
00:20:25.050 --> 00:20:29.880
But if you never said anything, you do need it to at least be an empty optional.

307
00:20:29.880 --> 00:20:31.230
And so that's why we're doing this.

308
00:20:31.920 --> 00:20:32.400
All right.

309
00:20:32.400 --> 00:20:39.420
So let's jump back over to our tests and let's run all the tests again and see if that's enough to satisfy

310
00:20:39.420 --> 00:20:39.630
this.

311
00:20:39.630 --> 00:20:41.310
I can just click up here to rerun.

312
00:20:42.690 --> 00:20:43.140
OK.

313
00:20:43.230 --> 00:20:47.940
And it looks like that fix those issues, so we just needed to initialize that new field.

314
00:20:48.420 --> 00:20:49.140
Very good.

315
00:20:49.170 --> 00:20:49.610
All right.

316
00:20:49.620 --> 00:20:52.200
So we've got that much implemented.

317
00:20:52.740 --> 00:20:58.500
So now let's come down here to this test can find person by ID with address.

318
00:20:58.710 --> 00:21:04.710
So first off, let's modify this now to say with home address.

319
00:21:04.860 --> 00:21:07.140
And now let's duplicate this.

320
00:21:09.070 --> 00:21:15.520
The pace there and now we'll say, can find person by ID with this.

321
00:21:17.750 --> 00:21:18.530
Address.

322
00:21:18.710 --> 00:21:19.130
Right.

323
00:21:19.580 --> 00:21:24.710
Because we've only implemented the ability to save a business address, we have not confirmed we haven't

324
00:21:24.710 --> 00:21:27.620
even implemented the ability to retrieve one though, right?

325
00:21:28.280 --> 00:21:29.740
So same thing here.

326
00:21:29.750 --> 00:21:33.950
We're creating a person, we're creating an address, resetting the address on the home.

327
00:21:33.950 --> 00:21:35.810
So now let's set it on the.

328
00:21:38.110 --> 00:21:39.880
Business address field.

329
00:21:41.410 --> 00:21:44.230
OK, then we're saving John.

330
00:21:44.740 --> 00:21:51.700
Then we're retrieving John by I.D. and then we are trying to get the home address and now we want to

331
00:21:51.700 --> 00:21:53.920
get the business address.

332
00:21:56.600 --> 00:22:01.580
Get start equal Washington, so everything else, I think we can leave the same.

333
00:22:01.760 --> 00:22:04.250
So let's run that and see that it should fail.

334
00:22:08.450 --> 00:22:09.320
OK, very good.

335
00:22:09.350 --> 00:22:12.560
So, yes, that is failing, there's no value present, very good.

336
00:22:12.950 --> 00:22:14.480
And now let's go implement it.

337
00:22:14.960 --> 00:22:18.740
So let's jump back over to our people repo class.

338
00:22:19.220 --> 00:22:21.140
And here we are now.

339
00:22:21.140 --> 00:22:21.350
See?

340
00:22:21.370 --> 00:22:22.970
So that was where we were mapping.

341
00:22:23.150 --> 00:22:29.540
So now let's go down to where we are extracting an entity from the results set because this is where

342
00:22:29.540 --> 00:22:36.410
we have the opportunity to extract the address from the database and then build a new address instance

343
00:22:36.410 --> 00:22:43.190
and then stuff that address instance back into our newly reconstituted person object, which we are

344
00:22:43.190 --> 00:22:44.510
then returning down here.

345
00:22:44.540 --> 00:22:44.810
Right?

346
00:22:44.960 --> 00:22:50.930
So here at the very end, we're setting a home address back on that person and then returning it.

347
00:22:51.110 --> 00:22:55.940
So now we just need to do the same thing again for the business address, right?

348
00:22:56.330 --> 00:22:56.940
So let's see.

349
00:22:56.960 --> 00:22:59.600
So the address here is coming from this method.

350
00:22:59.600 --> 00:23:04.640
Call right here, extract address where we're passing and a result said, and here's what we're doing

351
00:23:04.640 --> 00:23:06.080
with it now currently.

352
00:23:06.290 --> 00:23:13.040
Now, you know, now keep in mind, I've taught you now two ways that you could retrieve this type of

353
00:23:13.040 --> 00:23:15.590
associated address of a person.

354
00:23:15.800 --> 00:23:23.240
The first approach that we use, let's just call the address repository passing in the foreign key ID

355
00:23:23.720 --> 00:23:30.140
of the address and then asking the address repository to retrieve and address with that ID.

356
00:23:30.620 --> 00:23:36.320
It was giving that back to us and then we could just take that address, stuff it on to the person and

357
00:23:36.320 --> 00:23:37.400
then return the person.

358
00:23:37.550 --> 00:23:39.570
And that was a very easy approach.

359
00:23:39.590 --> 00:23:46.910
However, just as a quick review, I did state that while that approach works decently for small numbers

360
00:23:46.910 --> 00:23:52.040
of people that you want to retrieve from the database, if you're meaning to retrieve a lot of records

361
00:23:52.040 --> 00:23:57.770
from the database or a lot of people from the database, that's a fairly inefficient way to get their

362
00:23:57.770 --> 00:24:03.470
associated addresses because you have to make twice as many database calls to get both the person and

363
00:24:03.470 --> 00:24:04.160
the address.

364
00:24:04.400 --> 00:24:09.950
And so imagine if we were using that approach now where we have a person that we're selecting from the

365
00:24:09.950 --> 00:24:10.490
database.

366
00:24:10.550 --> 00:24:15.230
And then we also have to retrieve their home address with a second SQL query call.

367
00:24:15.380 --> 00:24:18.890
And then we also want to get their business address with a third call, right?

368
00:24:19.100 --> 00:24:24.590
That's three calls for every one person that we want to get back from the database if we were using

369
00:24:24.590 --> 00:24:25.280
that approach.

370
00:24:25.550 --> 00:24:32.540
So now I want to show you a modification that we can make to our find by I.D. query to not only join

371
00:24:32.540 --> 00:24:38.750
to get the home address, we can add an additional join to get the business address, too.

372
00:24:39.380 --> 00:24:42.960
So let's go up to the Find My ID sequel here.

373
00:24:42.980 --> 00:24:48.860
And currently we're saying select the people fields from the people table.

374
00:24:48.860 --> 00:24:54.050
And also we're selecting the home address fields from the addresses table.

375
00:24:54.050 --> 00:24:55.190
That's what we're doing online.

376
00:24:55.190 --> 00:25:01.730
24 from people as and then we're doing a left outer join to addresses as a.

377
00:25:01.760 --> 00:25:08.030
And then we're joining between the home address of the people and the ID field of the addresses and

378
00:25:08.030 --> 00:25:11.030
then selecting for just the one person that we actually care about.

379
00:25:11.660 --> 00:25:17.780
So what we can actually do now is modify this to simply do an additional left outer join.

380
00:25:17.780 --> 00:25:18.620
So you can do that.

381
00:25:18.620 --> 00:25:22.820
You can actually keep adding on more joints to get more data.

382
00:25:23.000 --> 00:25:24.380
And this is pretty straightforward.

383
00:25:24.380 --> 00:25:27.350
So I'm not really even teaching anything new.

384
00:25:27.440 --> 00:25:30.260
We're just expanding on what you've already learned here.

385
00:25:30.290 --> 00:25:30.660
OK.

386
00:25:31.100 --> 00:25:34.220
However, we are going to run into one small thing.

387
00:25:35.060 --> 00:25:41.900
So remember on Line 24, where we had to add this column alias by doing this edit ID as a underscore

388
00:25:41.900 --> 00:25:42.650
ID, right?

389
00:25:42.830 --> 00:25:48.560
We had to add that because otherwise we couldn't differentiate between the ID four addresses and the

390
00:25:48.560 --> 00:25:50.780
IDs for people, right?

391
00:25:50.990 --> 00:25:52.940
Both column names were the same.

392
00:25:53.270 --> 00:26:00.200
Well, if we add an additional left outer, join back to addresses again to grab not just the home addresses,

393
00:26:00.200 --> 00:26:02.780
but now to add in the business addresses.

394
00:26:03.020 --> 00:26:07.130
All of these address columns are going to conflict with each other.

395
00:26:07.220 --> 00:26:13.710
And so at that point, we will have to supply column aliases for all of these fields now.

396
00:26:13.730 --> 00:26:16.400
OK, so that is one particular difference.

397
00:26:16.410 --> 00:26:18.890
So let's go ahead and try that and see what it'll look like.

398
00:26:18.920 --> 00:26:25.430
So I think what we'll do first is let's modify the table alias that we're using for this left outer

399
00:26:25.430 --> 00:26:25.760
join.

400
00:26:25.760 --> 00:26:30.740
And now let's not only just call it a let's actually call it home.

401
00:26:30.830 --> 00:26:31.340
OK.

402
00:26:31.370 --> 00:26:33.060
As in home addresses.

403
00:26:33.080 --> 00:26:33.380
OK.

404
00:26:33.410 --> 00:26:38.990
So we're going to call this home now, which means I need to modify this a right here to be home that

405
00:26:38.990 --> 00:26:39.350
ID.

406
00:26:40.100 --> 00:26:44.390
And then all of these a period's here need to become home.

407
00:26:44.720 --> 00:26:49.970
So the way I will do that is with the search and replace in the ID, I'm going to do a command.

408
00:26:50.000 --> 00:26:58.520
Air or control are on Windows and Linux, and I can say search for a period and replace that with home

409
00:26:58.730 --> 00:26:59.300
period.

410
00:26:59.540 --> 00:27:01.830
Like so and then I can just replace all of these.

411
00:27:01.850 --> 00:27:07.190
Now I'm sometimes a little nervous to do a replace all because I never know all the places that I wasn't

412
00:27:07.190 --> 00:27:07.850
expecting that.

413
00:27:07.990 --> 00:27:11.590
I'm going to do this one at a time by just clicking the replace button here.

414
00:27:11.770 --> 00:27:13.330
And it shows me where it's going to start.

415
00:27:13.480 --> 00:27:15.850
And so I'm good with that getting replaced with HomeKit.

416
00:27:15.880 --> 00:27:18.130
So replace, replace, replace, replacing place.

417
00:27:18.810 --> 00:27:20.770
That's a good one, too.

418
00:27:20.790 --> 00:27:21.970
It looks like that.

419
00:27:23.670 --> 00:27:25.890
And then I can come up here and close this.

420
00:27:26.310 --> 00:27:27.180
All right, that was good.

421
00:27:27.330 --> 00:27:35.100
Now I also need to replace this one alias here, so I'm going to change this alias now to home underscore

422
00:27:35.100 --> 00:27:40.830
ID, and I'm going to have to remember now to go back down to my code where I'm referring to a underscore

423
00:27:40.830 --> 00:27:41.790
idea and change it there.

424
00:27:41.790 --> 00:27:42.690
And in fact, you know what?

425
00:27:42.810 --> 00:27:44.850
I should probably go ahead and just do that right now.

426
00:27:44.850 --> 00:27:51.450
So I'm going to do a command f or control f and search for a underscore ID, which is right here, and

427
00:27:51.450 --> 00:27:53.910
I'm just going to go ahead and replace that right now.

428
00:27:53.910 --> 00:27:59.220
So I just hit escape to close out my finder, my little finding dialog there.

429
00:27:59.220 --> 00:28:04.840
And now I will replace this alias with home, underscore I.D..

430
00:28:04.950 --> 00:28:05.400
OK.

431
00:28:05.760 --> 00:28:08.160
And you know, let me just make sure that's the only.

432
00:28:08.580 --> 00:28:13.350
Yeah, that's the only place where this a underscore ID exists in the rest of this file.

433
00:28:13.380 --> 00:28:14.220
Looks like it is.

434
00:28:14.310 --> 00:28:19.950
OK, so now I can come back up here to the query, and now what I'm going to do is go ahead and add

435
00:28:19.950 --> 00:28:23.730
in column aliases for all the rest of these columns now.

436
00:28:24.120 --> 00:28:24.450
All right.

437
00:28:24.480 --> 00:28:31.230
So as for street address and here as important to as for city?

438
00:28:32.380 --> 00:28:37.300
As as work state, as homeowners, as homeowners, we're county.

439
00:28:38.170 --> 00:28:39.520
At home before even.

440
00:28:40.450 --> 00:28:47.560
As a country, and now I need to add a comma here, because even though I'm at the end of these column

441
00:28:47.560 --> 00:28:53.560
definitions, I'm about to add another set of column definitions now to retrieve the same columns again

442
00:28:53.560 --> 00:28:55.360
for the business addresses.

443
00:28:55.360 --> 00:28:59.980
So I'm going to put a comma here and then I'm actually going to just copy this whole entire line by

444
00:28:59.980 --> 00:29:03.310
just doing a command deed, a duplicate, the line just like.

445
00:29:03.310 --> 00:29:09.220
So now on the second line here, I can go back to the beginning and now what I can do is just search

446
00:29:09.220 --> 00:29:13.360
for the word home just on this one line and replace it with bills.

447
00:29:14.080 --> 00:29:21.310
So I will do another command ah, or control ah, and I will search for the word home and I will replace

448
00:29:21.310 --> 00:29:22.660
it with bids.

449
00:29:22.750 --> 00:29:27.370
And now again, though, I will do this manually because I only want to do it on just this one line.

450
00:29:27.500 --> 00:29:29.410
This is this is.

451
00:29:31.050 --> 00:29:32.310
So be really careful.

452
00:29:35.570 --> 00:29:42.140
OK, so just make sure you're very, very careful to only do this to only make these changes on that

453
00:29:42.140 --> 00:29:47.120
one line, and then I'm going to even double check my work here to try to make sure that I didn't miss

454
00:29:47.120 --> 00:29:49.260
anything or that I didn't go too far.

455
00:29:49.280 --> 00:29:50.540
OK, so that looks good.

456
00:29:50.870 --> 00:29:57.860
And so now I'm going to come down here on Line 27 and duplicate this line left outer join addresses

457
00:29:57.860 --> 00:30:03.620
as biz on P Dot on P Dot.

458
00:30:04.900 --> 00:30:07.480
This address equals.

459
00:30:08.630 --> 00:30:10.580
Bids that I'd.

460
00:30:11.600 --> 00:30:11.930
Right.

461
00:30:11.990 --> 00:30:13.220
So does that make sense?

462
00:30:13.490 --> 00:30:20.450
I'm just telling the database that while you're joining people to address is for home addresses.

463
00:30:20.450 --> 00:30:24.770
Also join again to that same table for the business address.

464
00:30:24.830 --> 00:30:25.940
So it's the same pattern.

465
00:30:26.300 --> 00:30:26.720
OK.

466
00:30:27.680 --> 00:30:28.080
All right.

467
00:30:28.100 --> 00:30:35.090
So now that we've got all of that, let's come back down here to where we are extracting the entity

468
00:30:35.090 --> 00:30:36.440
from the results set.

469
00:30:36.470 --> 00:30:38.060
And let's look at this again now.

470
00:30:38.060 --> 00:30:44.810
So the real magic here of of dealing with an address is right here where we are extracting address from

471
00:30:44.810 --> 00:30:45.590
results set.

472
00:30:45.980 --> 00:30:52.310
So currently we have hardcoded the column names of the fields that we're trying to get right, just

473
00:30:52.310 --> 00:30:53.120
like this.

474
00:30:53.390 --> 00:30:56.030
So these column names will no longer work for us.

475
00:30:56.480 --> 00:30:56.750
All right.

476
00:30:56.750 --> 00:31:01.030
So we've got a couple of things to consider here with this arrest.

477
00:31:01.250 --> 00:31:04.130
Get string approach these column names.

478
00:31:04.140 --> 00:31:05.780
Let let me go back to the database.

479
00:31:06.260 --> 00:31:07.760
Let me go back to the spreadsheet.

480
00:31:08.240 --> 00:31:11.760
So those column names are what we see down here, right?

481
00:31:11.780 --> 00:31:18.440
But now in our SQL query, we've just created aliases for all of these fields now twice, in fact,

482
00:31:18.440 --> 00:31:22.370
right aliases that prepend each of these names with home.

483
00:31:22.580 --> 00:31:29.420
And then again, aliases for each of these columns that prepend with the prefix of biz, right?

484
00:31:30.230 --> 00:31:36.650
So we're going to need to use those aliases now in order to protect ourselves from having any conflicts

485
00:31:36.650 --> 00:31:41.990
here so that we can be sure that we're getting the right data for the business addresses versus the

486
00:31:41.990 --> 00:31:43.010
home addresses.

487
00:31:43.550 --> 00:31:51.500
So over here, using the rest, I get string method will not work anymore unless we do that modification

488
00:31:51.500 --> 00:31:53.300
to our connection string.

489
00:31:53.660 --> 00:32:01.160
Let me show you, let me remind you of that unless we modify our connection strings to add in that little

490
00:32:01.160 --> 00:32:02.870
bit that we did before.

491
00:32:03.050 --> 00:32:07.390
Alias underscore column underscore name equals true, right?

492
00:32:07.400 --> 00:32:16.400
So we could do that, or we could just modify all of these calls to no longer use R's that get string

493
00:32:16.400 --> 00:32:20.840
and instead to use our get value by alias method instead.

494
00:32:21.680 --> 00:32:27.260
I'm kind of inclined to go ahead and just use the get value by alias method instead, because I feel

495
00:32:27.260 --> 00:32:34.370
that this approach doesn't rely on some specific parameter that exists in the H2 database, so it should

496
00:32:34.370 --> 00:32:37.010
be more portable across different databases.

497
00:32:37.430 --> 00:32:44.690
So then to do that, I think what I'll do is to do a search and replace for rest, get string inside

498
00:32:44.690 --> 00:32:49.670
of this method and then replace that with a call to get value by Alias as a starting point.

499
00:32:49.850 --> 00:32:55.280
So again, I'm going to do a Command R, and the ID already knew that since I selected RC, I get a

500
00:32:55.280 --> 00:32:55.700
string.

501
00:32:55.700 --> 00:32:57.500
That's what it's searching for appear.

502
00:32:57.710 --> 00:33:02.150
And then for the replacement techs I just tabbed, by the way, to get down here.

503
00:33:02.480 --> 00:33:11.030
We will call get value by alias and then I will replace all of these.

504
00:33:11.720 --> 00:33:15.650
And again, I'm going to just do this one at a time so that I can pay attention to what I'm doing.

505
00:33:16.680 --> 00:33:24.120
Now, these are all going to be in error initially because this isn't enough to make this all work.

506
00:33:26.940 --> 00:33:32.520
OK, so that's good now you'll hit Escape to make this search dialogue go away.

507
00:33:32.670 --> 00:33:34.620
Now come back up to the top here.

508
00:33:35.250 --> 00:33:37.320
And now we need to add some more things.

509
00:33:37.590 --> 00:33:42.260
So I think now what I will do is add multiple cursors to each of these lines.

510
00:33:42.270 --> 00:33:46.050
They will click here on Line 96 at the end of my quote.

511
00:33:46.470 --> 00:33:51.480
And then I will click again at the end of this quote by holding down option and shift or alt and shift

512
00:33:51.480 --> 00:33:59.360
for Windows and Linux to get another cursor and one there and one there, there, there.

513
00:34:00.480 --> 00:34:10.360
There and there, and now I can put a comma, R.S. comma string dot class.

514
00:34:10.800 --> 00:34:15.270
Like so and I'm just basically following exactly what I have up here, except instead of long, I'm

515
00:34:15.270 --> 00:34:21.480
doing string and now I can get out of this multi-person mode by hitting escape one time and one more

516
00:34:21.480 --> 00:34:22.230
time, I guess.

517
00:34:22.890 --> 00:34:23.400
OK.

518
00:34:24.000 --> 00:34:28.020
All right now, we're still not done because this still won't work, right?

519
00:34:28.230 --> 00:34:34.620
We've got these column aliases now which are specified as either home underscore street address or biz

520
00:34:34.620 --> 00:34:35.970
underscore street address.

521
00:34:36.180 --> 00:34:39.900
And we're trying to reuse this method for either of those cases, right?

522
00:34:40.230 --> 00:34:47.100
So what I propose that we would do here is to introduce an additional parameter to this extract address

523
00:34:47.100 --> 00:34:52.830
method where we can specify the prefix that we want added in front of each of these column names.

524
00:34:52.860 --> 00:34:53.250
OK.

525
00:34:53.430 --> 00:34:55.350
So let me show you what that could look like.

526
00:34:55.350 --> 00:34:55.890
Kind of.

527
00:34:56.370 --> 00:35:01.740
So I'm putting my cursor right here at the front of this, and I'm going to just hardcoded for a moment

528
00:35:01.740 --> 00:35:03.480
here to say something like.

529
00:35:05.660 --> 00:35:08.200
Home plus.

530
00:35:09.200 --> 00:35:09.590
OK.

531
00:35:09.950 --> 00:35:10.790
Just like that.

532
00:35:11.150 --> 00:35:17.750
And now I will come over here to the home and I will select that and then I'm going to parameter ize

533
00:35:17.750 --> 00:35:19.820
it with an option command p.

534
00:35:21.060 --> 00:35:27.690
Just like so and then I'm going to call this maybe alias prefix enter.

535
00:35:28.050 --> 00:35:34.200
And now look what happened up here in our call to this extract address method, it just added in this

536
00:35:34.200 --> 00:35:35.340
parameter of home.

537
00:35:36.000 --> 00:35:44.760
And now what I can do is another multi cursor right here and option shift or alt shift here and here.

538
00:35:45.090 --> 00:35:48.910
And I'm just going to add that same prefix to all of these.

539
00:35:48.930 --> 00:35:55.050
Now here, be careful in this one because the get value by alias method is kind of inside of here.

540
00:35:55.050 --> 00:35:56.250
It's not at the beginning, right?

541
00:35:56.760 --> 00:35:58.950
And here as well.

542
00:35:59.130 --> 00:36:08.070
And so now I will just make all of these lines look like this one alias prefix plus and then escape.

543
00:36:08.280 --> 00:36:08.790
All right.

544
00:36:09.420 --> 00:36:15.480
And so obviously, what that's going to do now is that's going to pass in the word home and then the

545
00:36:15.480 --> 00:36:17.310
word home will be prefixed.

546
00:36:19.150 --> 00:36:23.890
To street address, and I'm sorry, I just realized I just forgot one thing, actually, I need home

547
00:36:24.370 --> 00:36:25.720
underscore, right?

548
00:36:26.320 --> 00:36:27.880
Does everybody follow what I'm doing here?

549
00:36:27.880 --> 00:36:30.130
Let me make sure you're really following this.

550
00:36:30.400 --> 00:36:34.660
So we are going to retrieve each of these columns, right?

551
00:36:34.660 --> 00:36:38.450
And we just alias these columns if I go back up here, right?

552
00:36:38.470 --> 00:36:43.420
We said, we've got these columns that we want to have these column aliases for, and their names are

553
00:36:43.420 --> 00:36:50.380
home, underscore ID, home underscore street address, home underscore address to right.

554
00:36:50.500 --> 00:36:57.160
And so we need to use these aliases now, these column aliases to refer to those columns properly now.

555
00:36:57.460 --> 00:37:03.970
And so this is allowing us to just say this very concisely, just home underscore.

556
00:37:03.970 --> 00:37:09.610
And then that's going to be pretended to all of these column names automatically for us so that we can

557
00:37:09.620 --> 00:37:16.060
reuse this method to retrieve or extract either home addresses or business addresses.

558
00:37:16.090 --> 00:37:16.480
OK.

559
00:37:16.630 --> 00:37:19.300
So that's going to allow us to do both of those now.

560
00:37:19.720 --> 00:37:24.310
And so now I'm going to also change the name of this variable to be more specific.

561
00:37:24.310 --> 00:37:26.230
So I'm going to do a shift of six.

562
00:37:27.480 --> 00:37:33.720
And call this home address like so because that's what that's for.

563
00:37:33.960 --> 00:37:42.960
And now I should be able to just duplicate this line and then change this field's name to biz address

564
00:37:42.960 --> 00:37:49.650
like so and then change this prefix here to biz underscore like so.

565
00:37:49.770 --> 00:37:57.990
And then finally, I can come down here and call person that said business address to biz address.

566
00:37:59.070 --> 00:37:59.850
Like so.

567
00:38:01.610 --> 00:38:06.380
And one more thing this bit right here is hard coded, so we don't want that, do we?

568
00:38:06.740 --> 00:38:14.090
So I'm going to delete the the home underscore part there and then I'm going to use our alias prefix

569
00:38:14.450 --> 00:38:16.340
plus right there as well.

570
00:38:16.610 --> 00:38:22.370
So that will still result in the exact same tax as home underscore ID when we're retrieving the home

571
00:38:22.370 --> 00:38:23.330
addresses, right?

572
00:38:24.050 --> 00:38:28.100
But if we're retrieving that this address is, then it'll be bills underscore ID, obviously.

573
00:38:28.220 --> 00:38:32.720
So I might be forgetting something, I'm not sure, but that's why we have the tests.

574
00:38:32.960 --> 00:38:37.540
So let's go ahead and just run the tests and see where we are with this might this might have been everything.

575
00:38:37.550 --> 00:38:42.980
So I'm going to open up the tests there, and I'm just going to run this one again.

576
00:38:44.220 --> 00:38:44.590
Hey.

577
00:38:44.610 --> 00:38:50.100
And that came back really, really quickly, so I think we must have implemented that now I'm going

578
00:38:50.100 --> 00:38:54.060
to double click on this to jump back into the entire test class.

579
00:38:55.380 --> 00:39:00.540
And let's just run all the tests now and see if we're still in good shape.

580
00:39:02.790 --> 00:39:04.650
Hey, looking really, really good.

581
00:39:05.070 --> 00:39:09.060
And so that is how you can add an additional column.

582
00:39:09.180 --> 00:39:15.090
Now I recognize that that might have felt like a lot of steps and maybe it kind of was.

583
00:39:15.090 --> 00:39:21.060
But what we just did was we not only added the ability to add an additional address column.

584
00:39:21.120 --> 00:39:23.790
We also made that capability more generic.

585
00:39:23.790 --> 00:39:29.730
So if we kind of just review what we did here, starting at the top, so now we're really just doing

586
00:39:29.730 --> 00:39:33.570
the same join that we were already doing before for the home addresses, right?

587
00:39:33.570 --> 00:39:35.640
I literally duplicated that line.

588
00:39:35.910 --> 00:39:36.360
OK.

589
00:39:36.690 --> 00:39:38.610
But now I just changed the alias.

590
00:39:38.760 --> 00:39:39.870
It was a.

591
00:39:40.020 --> 00:39:42.600
And now I'm calling it home to be more specific.

592
00:39:42.870 --> 00:39:43.800
And then we added.

593
00:39:44.160 --> 00:39:48.660
And then for the second join, we're calling that one business address is show biz, right?

594
00:39:49.110 --> 00:39:50.310
And then same thing up here.

595
00:39:50.460 --> 00:39:55.800
Now we had to go ahead and add column aliases for every single column here to make sure that there was

596
00:39:55.800 --> 00:40:04.200
no ambiguity between home address records of the addresses, table versus business address records of

597
00:40:04.200 --> 00:40:05.730
the addresses table.

598
00:40:05.970 --> 00:40:06.450
OK.

599
00:40:06.870 --> 00:40:12.900
And visually, I don't know if you want to think of it in quite this way, but if this helps you at

600
00:40:12.900 --> 00:40:15.930
all, maybe one way that you could think of this.

601
00:40:18.000 --> 00:40:23.670
Maybe one way you could think of this is as if we just duplicated the address table again.

602
00:40:24.610 --> 00:40:28.780
Like so now we're not actually duplicating the table, though, that's not what we're really doing,

603
00:40:28.780 --> 00:40:29.080
right?

604
00:40:29.470 --> 00:40:35.320
But maybe conceptually, if this if this helps you to think of it in this way when we are doing this

605
00:40:35.710 --> 00:40:37.180
double joining right?

606
00:40:38.140 --> 00:40:45.640
You maybe can visualize it as though we've got the addresses table twice now and then we'd be duplicating

607
00:40:45.640 --> 00:40:48.700
all of the address fields that we see down here.

608
00:40:48.820 --> 00:40:52.900
I'm not going to actually do it here, but that's kind of what you know, if you imagine that these

609
00:40:52.900 --> 00:40:56.080
fields here are dropping down to this red section here.

610
00:40:56.110 --> 00:41:00.690
OK, so that's kind of what we're doing with this additional join.

611
00:41:00.700 --> 00:41:07.270
OK, so you can just keep joining the same table or different tables as we've already learned with the

612
00:41:07.270 --> 00:41:13.330
previous techniques to make a result set, that looks like one really massively wide table.

613
00:41:13.390 --> 00:41:13.840
OK.

614
00:41:14.020 --> 00:41:20.200
OK, so that's enough for this approach, and we're going to look at a few more tricks to doing joins

615
00:41:20.200 --> 00:41:21.640
in the upcoming lessons.

616
00:41:21.640 --> 00:41:27.190
And then I think we'll pretty much be done with the JTBC SQL database stuff for the time being.

617
00:41:27.220 --> 00:41:27.550
OK.

618
00:41:27.760 --> 00:41:29.770
So I will see you in the next one.
