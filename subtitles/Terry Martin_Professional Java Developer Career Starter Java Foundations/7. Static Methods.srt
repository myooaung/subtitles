1
00:00:00,540 --> 00:00:08,460
OK, so one of the last things that I want to cover is an explanation for this word static here.

2
00:00:09,030 --> 00:00:09,450
OK?

3
00:00:09,600 --> 00:00:11,320
I've been putting it off long enough.

4
00:00:11,340 --> 00:00:12,900
Let's let's jump into it.

5
00:00:13,770 --> 00:00:23,130
So I have stated numerous times now that the only place where work can get done is inside of a method

6
00:00:23,550 --> 00:00:32,520
such as these methods here and methods must be contained inside of a class as they are.

7
00:00:32,850 --> 00:00:33,270
OK.

8
00:00:33,510 --> 00:00:36,420
So I think that should be pretty well understood by now.

9
00:00:36,450 --> 00:00:43,080
However, there's one more thing you need to know, though, and that is that by default, these basic

10
00:00:43,080 --> 00:00:52,990
methods here won't actually exist until we have created an instance of the class or of a class.

11
00:00:53,010 --> 00:00:53,550
OK.

12
00:00:53,940 --> 00:01:01,050
So please recall that a class is really just a blueprint for how to build an object.

13
00:01:01,200 --> 00:01:07,320
And by the way, when I say object or instance of a class, an object is an instance of a class.

14
00:01:07,320 --> 00:01:08,340
They are the same thing.

15
00:01:08,340 --> 00:01:10,510
So I can use these terms interchangeably.

16
00:01:10,530 --> 00:01:15,850
You'll hear instance, you'll hear class instance, you'll hear object.

17
00:01:15,900 --> 00:01:16,380
OK.

18
00:01:16,410 --> 00:01:18,810
They're all interchangeable concepts.

19
00:01:19,350 --> 00:01:24,390
So a class is simply a blueprint for an instance or an object.

20
00:01:24,840 --> 00:01:33,090
And because of that, you don't actually have anything that can do work until you create an actual class

21
00:01:33,390 --> 00:01:35,400
under most circumstances.

22
00:01:35,430 --> 00:01:35,820
OK.

23
00:01:35,850 --> 00:01:37,470
That's the default behavior.

24
00:01:37,980 --> 00:01:44,970
And so we must first create an instance of a class before we have methods that we can call, which is

25
00:01:44,970 --> 00:01:53,040
why down here on Line 22 inside of this main method, the very first thing you see me do is to create

26
00:01:53,040 --> 00:01:55,340
an instance of the person class.

27
00:01:55,350 --> 00:01:56,430
That's what I'm doing here.

28
00:01:56,820 --> 00:02:05,160
Create a new instance of person and then store a reference to that person in this variable called P1.

29
00:02:05,730 --> 00:02:14,610
It is only after I have created the instance of the person that I can then call these basic methods

30
00:02:14,910 --> 00:02:16,410
say hello, say something.

31
00:02:17,160 --> 00:02:26,430
So one way of thinking about this is that we're taking the blueprint for a building and then we're constructing

32
00:02:26,430 --> 00:02:27,210
the building.

33
00:02:27,480 --> 00:02:27,990
OK?

34
00:02:28,230 --> 00:02:34,920
And the methods of this class are like rooms of the building.

35
00:02:35,220 --> 00:02:35,700
OK.

36
00:02:36,090 --> 00:02:42,060
So you don't have any rooms of the building until you have constructed the building.

37
00:02:42,510 --> 00:02:48,120
And now we can get work done in those rooms or in these methods.

38
00:02:48,300 --> 00:02:48,720
OK.

39
00:02:48,750 --> 00:02:51,390
Does that does that help make sense now?

40
00:02:51,870 --> 00:03:01,920
Unfortunately, there is one caveat to this there is one way to make these methods or the rooms of the

41
00:03:01,920 --> 00:03:05,170
building without constructing the building first.

42
00:03:05,220 --> 00:03:05,730
OK?

43
00:03:06,020 --> 00:03:09,060
To stick with this analogy a little bit further.

44
00:03:09,570 --> 00:03:13,560
And that is to make what is called a static method.

45
00:03:13,980 --> 00:03:14,460
OK.

46
00:03:15,180 --> 00:03:22,650
If you make a static method or if you make a method static by putting these static keyword in front

47
00:03:22,650 --> 00:03:23,130
of it.

48
00:03:25,100 --> 00:03:34,850
You are essentially instructing Java to create that method to build that method or build that room to

49
00:03:34,850 --> 00:03:41,050
use our metaphor, even without having built an instance of the class.

50
00:03:41,180 --> 00:03:41,690
OK.

51
00:03:43,100 --> 00:03:47,150
And indeed, that is what we're doing here for this main method.

52
00:03:47,540 --> 00:03:55,550
Now, in the case of the main method, by making it static, that allows Java to be able to call this

53
00:03:55,550 --> 00:04:00,080
method before the class has even been created.

54
00:04:00,230 --> 00:04:08,120
So if we consider the order in which things are happening in this program, you know, we are telling

55
00:04:08,330 --> 00:04:11,510
Java to run this class.

56
00:04:13,090 --> 00:04:20,110
And so what Java does is it will first look through the methods of this class to see.

57
00:04:21,340 --> 00:04:27,910
Is there a main method which is both public and static and void, actually?

58
00:04:28,090 --> 00:04:28,440
OK.

59
00:04:28,480 --> 00:04:32,960
Is there a method that matches what's called this this signature?

60
00:04:32,980 --> 00:04:33,280
OK.

61
00:04:33,310 --> 00:04:41,480
The signature of the method is simply all of the keywords and the inputs of that method.

62
00:04:41,500 --> 00:04:51,310
So if there is a method that is public static void and called main and takes these inputs, then Java

63
00:04:51,310 --> 00:04:58,030
will call that method automatically if you don't specify any other method for it to call.

64
00:04:58,330 --> 00:05:06,790
And for Java to be able to run that method without first creating an instance of the class, the method

65
00:05:06,790 --> 00:05:08,020
has to be static.

66
00:05:08,560 --> 00:05:15,250
And so in effect, what happens is that this main method becomes the entry point or the starting point

67
00:05:15,580 --> 00:05:18,460
for our program automatically.

68
00:05:19,060 --> 00:05:19,540
OK.

69
00:05:19,690 --> 00:05:27,730
Another way to say this is that in Java, the default starting point of a class has to be a method that

70
00:05:27,730 --> 00:05:30,400
is public and static.

71
00:05:31,450 --> 00:05:39,940
So one of the reasons for making a method static is so that you can use it as the entry point or starting

72
00:05:39,940 --> 00:05:41,200
point of a program.

73
00:05:41,200 --> 00:05:45,520
That's one key reason to make a method static.

74
00:05:45,970 --> 00:05:55,810
Another case where you'll see static methods used in Java is what I like to call a utility class, and

75
00:05:55,810 --> 00:06:04,090
that is a class that just has a lot of useful methods in it that help us to get things done, but don't

76
00:06:04,090 --> 00:06:09,910
necessarily reflect behaviors of some modeled concept.

77
00:06:10,240 --> 00:06:17,560
So although I think Java is a fantastic language, in my opinion, this is one of the places where some

78
00:06:17,560 --> 00:06:23,200
of the decisions made in the creation of Java maybe don't quite fit perfectly.

79
00:06:23,380 --> 00:06:29,920
And what I mean by that is Java is finely tuned for modeling concepts in code.

80
00:06:30,190 --> 00:06:37,330
But sometimes you don't need or want to model a concept in code, but yet you still need to write code

81
00:06:37,330 --> 00:06:38,620
that gets work done.

82
00:06:38,950 --> 00:06:46,780
So sometimes you'll find yourself creating a class that doesn't really represent any real world or business

83
00:06:46,780 --> 00:06:47,560
concept.

84
00:06:47,560 --> 00:06:55,570
And perhaps it's just a place to group useful capabilities or useful methods together.

85
00:06:55,810 --> 00:06:59,140
And that's what I often will refer to as a utility class.

86
00:06:59,440 --> 00:07:05,890
And oftentimes, these kinds of utility classes will have methods on them that are static because you

87
00:07:05,890 --> 00:07:08,920
don't need to create an instance of that class.

88
00:07:09,160 --> 00:07:12,260
It wouldn't necessarily even make sense to do so.

89
00:07:12,430 --> 00:07:19,060
You just want a nice place to put some very convenient methods that you might use throughout your program

90
00:07:19,060 --> 00:07:21,280
or across multiple programs.

91
00:07:21,520 --> 00:07:25,990
And so that's another place where you may see static methods being used.

92
00:07:26,380 --> 00:07:31,960
There are a few other cases that you can encounter from time to time, and we may encounter a few of

93
00:07:31,960 --> 00:07:35,910
those as we proceed with this course, but mainly here.

94
00:07:35,920 --> 00:07:43,660
I just wanted to make sure that we explained why this main method is static while the other methods

95
00:07:43,660 --> 00:07:44,890
are not static.

96
00:07:45,130 --> 00:07:48,640
And I think that's going to wrap up this lesson.

97
00:07:48,940 --> 00:07:56,620
So I would encourage you at this point to maybe try writing a little bit of code yourself.

98
00:07:56,620 --> 00:08:02,680
Now you can try writing a similar class, as we have done here.

99
00:08:02,770 --> 00:08:09,910
Try to do as much as you can from memory before you have to go and look back on this lesson.

100
00:08:09,910 --> 00:08:15,280
For some reminders of how to do things, though, so that you can start to build up a little bit of

101
00:08:15,280 --> 00:08:21,880
your muscle memory, if you will, on how to create a basic class and how to create a basic method,

102
00:08:22,180 --> 00:08:28,220
and also how to create a public static void main method so that you can run that class.

103
00:08:28,240 --> 00:08:28,620
OK.

104
00:08:28,900 --> 00:08:35,350
So some ideas of some things that you could do to practice this would be similar to what I've done here.

105
00:08:35,590 --> 00:08:40,650
Maybe make a method or two that just print something out on the screen.

106
00:08:40,660 --> 00:08:46,720
Maybe make a method that takes input some other ideas or that you could continue forward with what I

107
00:08:46,720 --> 00:08:47,200
did here.

108
00:08:47,200 --> 00:08:53,050
With this add method, you could create a few more methods maybe create a subtract method.

109
00:08:53,200 --> 00:08:57,700
I think you have all of the foundation that you need to be able to do those kinds of things now.

110
00:08:58,600 --> 00:09:02,470
And with that being said, I will see you in the next lesson.
