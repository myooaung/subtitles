1
00:00:00,150 --> 00:00:07,110
All right, so for this next lesson, we're going to get into the last of the most popular implementations

2
00:00:07,110 --> 00:00:09,960
of the set, and that is the TV set.

3
00:00:10,350 --> 00:00:17,850
So the TV set is kind of interesting because what it can do is in addition to filtering out the duplicates,

4
00:00:17,850 --> 00:00:21,270
like all implementations of a set, are capable of doing.

5
00:00:21,540 --> 00:00:25,470
It will also order the items naturally.

6
00:00:27,090 --> 00:00:29,850
So think essentially alphabetical order.

7
00:00:29,880 --> 00:00:35,790
However, that order actually can be controlled by you, and we'll take a look at how to do that momentarily.

8
00:00:36,180 --> 00:00:41,500
So first thing we're going to do, though, is just revise our code to use the tree set.

9
00:00:41,520 --> 00:00:47,070
So I'm coming over here to where we've currently got the linked hash that and I will replace that with

10
00:00:48,150 --> 00:00:48,810
tree.

11
00:00:50,670 --> 00:00:51,310
There we go.

12
00:00:51,330 --> 00:00:53,130
And it's as easy as that.

13
00:00:53,670 --> 00:01:01,530
Now please keep in mind that every time we've changed now the implementation of the set, we again are

14
00:01:01,530 --> 00:01:06,060
not having to change anything on the left side here, right, because we're coding to the interface,

15
00:01:06,060 --> 00:01:06,790
so to speak.

16
00:01:06,810 --> 00:01:07,170
Right?

17
00:01:08,760 --> 00:01:09,180
OK.

18
00:01:09,210 --> 00:01:18,270
So taking a making a quick note of the fact that with the linked hash set, all of our elements when

19
00:01:18,270 --> 00:01:22,590
we iterate over them are in the same order as the original list because that's the order in which we

20
00:01:22,590 --> 00:01:24,270
are inserting the items, right?

21
00:01:24,270 --> 00:01:32,550
So the linked hash that retains the insert order, the hash that has the kind of a random order.

22
00:01:32,880 --> 00:01:33,260
Right?

23
00:01:33,360 --> 00:01:36,900
Sort of kind of random to us, at least.

24
00:01:37,870 --> 00:01:42,440
So let's see now what happens with the tree set.

25
00:01:42,460 --> 00:01:44,860
So I'm going to go ahead and run this.

26
00:01:46,330 --> 00:01:54,490
All right, so looks like we're getting only 11 items back after the filtering then because we're only

27
00:01:54,490 --> 00:02:02,170
getting 11 items back, it looks like our total payout has now lowered to seven million versus the eight

28
00:02:02,170 --> 00:02:05,880
point six million that we have been generally seeing.

29
00:02:05,890 --> 00:02:14,230
So obviously there's a question here why are so many more items being filtered out than we were expecting

30
00:02:14,890 --> 00:02:17,290
in order to answer this question?

31
00:02:17,560 --> 00:02:24,790
We need to step back a moment and consider a little bit more about how the tree set actually works.

32
00:02:25,570 --> 00:02:36,400
So the tree set has the ability not only to filter items, but to keep those items in a so-called natural

33
00:02:36,400 --> 00:02:37,090
ordering.

34
00:02:37,540 --> 00:02:40,900
Now that ordering is actually something that we can control.

35
00:02:41,290 --> 00:02:45,160
And would you like to venture a guess as to how we can control that?

36
00:02:46,060 --> 00:02:54,490
So the tree said, actually can make use of objects that are in it that implement the comparable interface.

37
00:02:54,490 --> 00:03:01,030
If you remember that interface, the comparable interface has a method on it, which is compare to.

38
00:03:01,300 --> 00:03:10,210
So if our employee class implements the comparable interface and therefore has a compare to method on

39
00:03:10,210 --> 00:03:17,860
it, we can implement that compared to method to cause the tree set to order our items.

40
00:03:18,130 --> 00:03:19,660
However, we see fit.

41
00:03:20,740 --> 00:03:27,070
So let's take a look at the employee class and remember what we were doing with it with regards to ordering.

42
00:03:27,580 --> 00:03:30,760
So I'm going to jump into the employee class.

43
00:03:31,030 --> 00:03:35,020
OK, so the first thing to recall is that it's on the face of it.

44
00:03:35,020 --> 00:03:38,170
It's only implementing the AI employee interface.

45
00:03:38,500 --> 00:03:44,620
But if we drill into the employee interface and this is really just review, in fact, we can kind of

46
00:03:44,620 --> 00:03:48,160
see what the AI employee interface is doing right here as I'm hovering.

47
00:03:49,970 --> 00:03:56,360
So we can see that it actually extends the comparable interface.

48
00:03:56,660 --> 00:04:02,810
And so that is equivalent to us saying that the employee implements I employee.

49
00:04:04,220 --> 00:04:06,560
Comma comparable.

50
00:04:06,800 --> 00:04:09,260
OK, that's that's somewhat equivalent to that.

51
00:04:11,180 --> 00:04:20,480
So if we go down to the bottom of the employee class, we should find the compare to method that we

52
00:04:20,480 --> 00:04:27,980
are forced to implement because of because of the comparable interface that we are inheriting essentially.

53
00:04:28,430 --> 00:04:31,700
So if we go down here towards the bottom.

54
00:04:33,230 --> 00:04:34,130
There it is.

55
00:04:34,400 --> 00:04:36,470
Compare to remember this.

56
00:04:37,610 --> 00:04:44,600
All right, so our compared to method currently is comparing last names.

57
00:04:45,410 --> 00:04:54,680
And therein lies the key to understanding why we're only getting back 11 items instead of, I think

58
00:04:54,680 --> 00:04:55,040
what was it?

59
00:04:55,040 --> 00:04:55,910
17.

60
00:04:56,330 --> 00:05:01,280
So before I explain it fully, do you want to take a moment to try to think of, you know, figure out

61
00:05:01,430 --> 00:05:05,360
if you understand what's going on here so you can pause the video and think about it for a minute.

62
00:05:06,560 --> 00:05:15,470
OK, so if we jump back over to the main class and go look at our unfiltered data, let me move this

63
00:05:15,470 --> 00:05:16,160
down a bit.

64
00:05:16,790 --> 00:05:19,790
Let's get to a little deeper understanding of what's happening here.

65
00:05:19,790 --> 00:05:31,100
So the So the tree set is both filtering and sorting our employees, according to the implementation

66
00:05:31,100 --> 00:05:33,050
of the Compare two method.

67
00:05:33,530 --> 00:05:40,700
And we just looked at the compare to method and saw that it is only comparing last names.

68
00:05:41,300 --> 00:05:48,710
So we have three possibilities when comparing these employees using the Compare two method.

69
00:05:49,790 --> 00:05:58,580
Either one employee compared to the other is going to come before it or after it, or they could be

70
00:05:58,580 --> 00:05:59,900
considered equal.

71
00:06:00,680 --> 00:06:08,270
So let us consider now what would cause two employees to appear to be equal with respect to the compare

72
00:06:08,270 --> 00:06:09,020
to method?

73
00:06:10,870 --> 00:06:16,510
Well, it would be the last name, because that's the only property that's being used in that compared

74
00:06:16,510 --> 00:06:17,020
to method.

75
00:06:17,380 --> 00:06:27,550
So if the compare to Method is only looking at the last name, then what do you think is going to happen

76
00:06:27,550 --> 00:06:32,020
with multiple records that all share the same last name?

77
00:06:33,770 --> 00:06:36,350
They're all going to look equal to each other.

78
00:06:36,890 --> 00:06:45,260
So this means that while we're using the tree set with this particular implementation of Compare two,

79
00:06:45,290 --> 00:06:53,300
which is only looking at the last name, the definition of a duplicate would be any employee that has

80
00:06:53,300 --> 00:06:57,140
a last name that's already found in the tree set.

81
00:06:57,470 --> 00:06:57,920
OK.

82
00:06:58,190 --> 00:06:59,450
Of which there are many.

83
00:06:59,600 --> 00:06:59,930
Right?

84
00:07:00,110 --> 00:07:06,890
So if we're looking here at the last name of Flintstone, for example, presumably after this first

85
00:07:06,890 --> 00:07:15,830
Fred Flintstone is added successfully to the tree, set all other employees with the last name of Flintstone,

86
00:07:15,980 --> 00:07:17,930
regardless of what the first name is.

87
00:07:18,320 --> 00:07:23,960
If they have the last name of Flintstone, presumably they will be filtered out because the compare

88
00:07:23,960 --> 00:07:27,290
to method is only looking at the last name.

89
00:07:28,400 --> 00:07:34,910
So all of these should be filtered out, but additionally.

90
00:07:36,080 --> 00:07:41,780
Wilma should also be filtered out because she also has the same last name, at least this first Wilma.

91
00:07:43,470 --> 00:07:52,320
Additionally, let's see who else here, we've got Barney Rubble with no no behind him, and we've got

92
00:07:52,320 --> 00:07:56,430
Betty rubble, so Betty presumably would also be filtered out.

93
00:07:57,330 --> 00:08:04,320
And so if we go back here to our output, like I said, we shouldn't see a Betty rubble and we should

94
00:08:04,320 --> 00:08:08,040
not see a Wilma Flintstone either.

95
00:08:08,640 --> 00:08:11,200
Fred, Fred, Fred, Barney, Barney, Barney.

96
00:08:11,200 --> 00:08:14,910
Yes, so unfortunately the ladies are being filtered out.

97
00:08:16,380 --> 00:08:17,700
That's what's happening here.

98
00:08:18,660 --> 00:08:24,150
Now, one quick thing, I also want to note, just for your own edification, this isn't something I

99
00:08:24,150 --> 00:08:28,710
think you really desperately need to know, but it might be helpful to just be aware.

100
00:08:30,000 --> 00:08:39,570
So the tree set is called a tree set because internally it uses what is called a tree structure.

101
00:08:39,840 --> 00:08:44,190
More specifically, it uses a self-balancing binary tree.

102
00:08:44,490 --> 00:08:47,040
Don't worry, you don't really need to remember that.

103
00:08:47,040 --> 00:08:48,870
In fact, that can be even more specific.

104
00:08:48,880 --> 00:08:56,790
It uses a particular type of self-balancing binary tree, which is called a red black tree, and that

105
00:08:56,790 --> 00:08:59,370
tree structure allows items.

106
00:08:59,370 --> 00:09:09,210
In this case, our objects of of type employee to be arranged in a tree like structure such that individual

107
00:09:09,210 --> 00:09:16,890
items in that structure can be found relatively quickly without having to necessarily iterate through

108
00:09:16,920 --> 00:09:19,860
each and every individual item.

109
00:09:20,070 --> 00:09:23,160
Let me show you real quick what that kind of looks like.

110
00:09:23,640 --> 00:09:27,600
We'll go to the Wikipedia article for a Red Black Tree.

111
00:09:28,080 --> 00:09:34,290
OK, so here we've got the Wikipedia article for the Red Black Tree up, and we're not going to read

112
00:09:34,290 --> 00:09:40,440
any of this, but I will jump over to some pretty pictures so that you can get a get a sense for what's

113
00:09:40,440 --> 00:09:41,100
happening here.

114
00:09:41,400 --> 00:09:46,980
So if you think of each of these circles, which are usually considered to be nodes, if you think of

115
00:09:46,980 --> 00:09:51,210
these as the objects or items in our tree set, right?

116
00:09:51,210 --> 00:09:55,260
So in our case, these would be employees, actual individual employees.

117
00:09:55,710 --> 00:10:05,310
And if you think of these numbers as the last names of the employees, OK, then what happens is when

118
00:10:05,340 --> 00:10:11,970
the when we add the first employee to the structure that would be represented at the top of this tree

119
00:10:11,970 --> 00:10:15,360
structure here, that's the first node that we are adding.

120
00:10:15,570 --> 00:10:21,300
And then as we add subsequent nodes, the compare to method gets called.

121
00:10:21,630 --> 00:10:24,870
So let's say we add the first employee to the tree.

122
00:10:25,080 --> 00:10:27,480
Who would be Fred Flintstone, OK?

123
00:10:28,500 --> 00:10:37,380
And then we go to add a second employee to the to the tree, who is one of the duplicated Fred Flintstone.

124
00:10:37,380 --> 00:10:39,330
So same first name, same last name.

125
00:10:39,720 --> 00:10:47,190
Well, what's going to happen is the compare to method is going to be called to compare the first Fred

126
00:10:47,190 --> 00:10:49,500
Flintstone to the second Fred Flintstone.

127
00:10:49,770 --> 00:10:56,550
And since our compare to method in this particular case, is only looking at the last name and the last

128
00:10:56,550 --> 00:11:01,350
names match, thereby returning a zero from the compare to method.

129
00:11:01,350 --> 00:11:05,820
Remember, compare to returns an integer negative one, zero or positive one.

130
00:11:06,030 --> 00:11:08,220
If they are equal, it returns a zero.

131
00:11:09,210 --> 00:11:17,520
So when the compare to method returns a zero that indicates to the tree set that this new.

132
00:11:18,500 --> 00:11:24,080
Object that we're trying to add to the tree already exists in the tree, and therefore it will not be

133
00:11:24,080 --> 00:11:27,860
added, the second one will not be added, it'll just be sort of filtered out.

134
00:11:28,610 --> 00:11:29,060
OK.

135
00:11:30,310 --> 00:11:38,620
However, if we try to add a node for which the compare to results in a negative one, meaning one comes

136
00:11:38,620 --> 00:11:48,220
before the other, then that new node will be added either to the left or to the right of the existing

137
00:11:48,220 --> 00:11:48,510
node.

138
00:11:48,520 --> 00:11:48,710
OK?

139
00:11:48,730 --> 00:11:56,140
And that's why it's called a binary node, because newly added nodes can only go to one of two positions,

140
00:11:56,350 --> 00:11:58,480
either to the left or to the right.

141
00:11:58,630 --> 00:12:04,300
And basically, it's just if a new node that we're trying to add would come before the existing node,

142
00:12:04,450 --> 00:12:10,420
then generally speaking, it goes to the left if it would come after in some sorting order that it would

143
00:12:10,420 --> 00:12:11,150
go to the right.

144
00:12:11,170 --> 00:12:17,440
And again, we control that order right and the determination of it because we can right the compare

145
00:12:17,440 --> 00:12:21,520
to method ourself or we can write the implementation of it ourselves.

146
00:12:22,780 --> 00:12:30,070
So that's why here we are depicting that the number eight goes to the left of 13 because it's less than

147
00:12:30,070 --> 00:12:30,610
13.

148
00:12:30,730 --> 00:12:38,680
If you want to think of these as names, if this is Flintstone, this name over here could be Apple,

149
00:12:38,860 --> 00:12:39,260
right?

150
00:12:39,280 --> 00:12:45,640
So Apple would come before Flintstone alphabetically, and therefore Apple would go to the left here.

151
00:12:45,940 --> 00:12:54,790
And then on the other side here, if this name were Roberts, well, that comes alphabetically after

152
00:12:54,790 --> 00:12:57,340
Flintstone, and so that would go to the right.

153
00:12:57,650 --> 00:13:06,130
OK, now the whole benefit of using this tree structure to order things is that, like I said earlier,

154
00:13:06,520 --> 00:13:12,460
we are then able to find a given node within this structure more quickly than having to iterate through

155
00:13:12,520 --> 00:13:14,260
each and every single node.

156
00:13:14,680 --> 00:13:23,230
So if you wanted to find a 22, for example, if we passed in the number 22 and we wanted to find where

157
00:13:23,230 --> 00:13:30,430
is 22 within this tree structure, well, we get to the 13 because that's the first node here and we

158
00:13:30,430 --> 00:13:37,090
would quickly determine Will 22 is greater than 13, so therefore twenty two must be off to the right

159
00:13:37,090 --> 00:13:37,690
somewhere.

160
00:13:37,930 --> 00:13:45,460
Then we come down to 17 and then we ask again with the compare to where it's 22 in relation to 17.

161
00:13:45,670 --> 00:13:51,220
And so we would determine that, well, it must be to the right because twenty two is greater than 17.

162
00:13:51,430 --> 00:13:57,640
Then we get down to this node for twenty five and we determined that twenty two is less than twenty

163
00:13:57,640 --> 00:14:02,170
five and therefore twenty two must live to the left of twenty five.

164
00:14:02,410 --> 00:14:03,910
And bam, now we're here.

165
00:14:04,960 --> 00:14:13,360
So we did have to traverse three nodes to get to twenty two, but we didn't have to traverse potentially

166
00:14:13,360 --> 00:14:15,970
all of the nodes to get to the twenty two.

167
00:14:16,330 --> 00:14:23,920
OK, so the binary tree structure does permit us to cut down significant potentially significantly on

168
00:14:23,920 --> 00:14:30,340
the total number of nodes that we have to traverse in order to find the the node that we're actually

169
00:14:30,340 --> 00:14:31,180
looking for.

170
00:14:31,180 --> 00:14:34,900
And that is one of the primary benefits of the tree structure.

171
00:14:34,900 --> 00:14:39,550
And then the other benefit, obviously, is the fact that the nodes can stay in some type of ordering.

172
00:14:40,630 --> 00:14:50,050
So returning back to the A.D. now that we know this, if we want to get more than 11 nodes out of this

173
00:14:50,050 --> 00:14:53,650
thing and get back up to like the eight point six million value.

174
00:14:53,830 --> 00:14:57,700
Can you think of a way that we could do that with minimal changes to the code?

175
00:15:00,200 --> 00:15:03,270
OK, so hopefully you may have thought of a way to do that.

176
00:15:03,290 --> 00:15:07,160
I'm going to show you one way that I can think of of doing this.

177
00:15:07,430 --> 00:15:15,710
So we kind of know now that the employee diet compared to method is kind of at the heart of influencing

178
00:15:15,710 --> 00:15:18,350
how this tree set works.

179
00:15:18,740 --> 00:15:25,820
So I think we need to jump back over to the employee class and go back down to our compare two method.

180
00:15:26,510 --> 00:15:32,450
And one thing that I can think to do that would be fairly minimal is simply change the implementation

181
00:15:32,450 --> 00:15:38,270
of the compare to method to not use the last name, but instead use the first names because they are

182
00:15:38,270 --> 00:15:39,530
actually more unique.

183
00:15:40,550 --> 00:15:48,020
So I'm going to hold down on the option shift keys while I double click the last name here and this

184
00:15:48,020 --> 00:15:49,340
last name here, right?

185
00:15:49,340 --> 00:15:52,040
So that way I can select both of them at the same time.

186
00:15:55,310 --> 00:16:00,140
And then I will hit escape to get out of that double entry mode.

187
00:16:01,070 --> 00:16:06,380
And now, if I just come over here and just click the play button to rerun the program.

188
00:16:07,280 --> 00:16:08,540
Let's see what we get now.

189
00:16:09,810 --> 00:16:10,920
Hey, there we go.

190
00:16:10,950 --> 00:16:12,300
17 items.

191
00:16:12,540 --> 00:16:18,180
And we're back to the eight point six million again, so that did the trick right there.

192
00:16:18,360 --> 00:16:25,230
And just in case you're a little foggy on exactly why that's happening, let's just go look again at

193
00:16:25,230 --> 00:16:27,330
the main class.

194
00:16:29,400 --> 00:16:33,540
And we'll come back up here to our main data and make this a little bit smaller.

195
00:16:34,170 --> 00:16:39,330
So just consider so all of these duplicates are still being filtered out, but now they're being filtered

196
00:16:39,330 --> 00:16:41,430
by the first name, which is also Fred.

197
00:16:41,460 --> 00:16:41,760
Right.

198
00:16:41,770 --> 00:16:45,390
So all of these are being filtered.

199
00:16:45,690 --> 00:16:50,340
But let's see what isn't getting filtered that was before.

200
00:16:51,840 --> 00:16:53,460
So we've got Fred Flintstone.

201
00:16:54,490 --> 00:17:01,150
But now we're also getting Wilma Flintstone because we're no longer looking at her last name, we're

202
00:17:01,150 --> 00:17:03,580
looking at just the first name now.

203
00:17:03,970 --> 00:17:13,660
And so since the employees that we weren't really meaning to filter out have a number differentiating

204
00:17:13,660 --> 00:17:15,730
them in their first name, right?

205
00:17:17,110 --> 00:17:18,820
Those remain right.

206
00:17:18,820 --> 00:17:20,680
They're not getting filter out filtered out.

207
00:17:20,690 --> 00:17:24,100
It's just the ones with the duplicated last names that are getting filtered.

208
00:17:24,340 --> 00:17:25,930
And so Wilma persists.

209
00:17:25,930 --> 00:17:32,920
And then for the rubble family, not only do we have all the variations of Barney rubble, we also still

210
00:17:32,920 --> 00:17:36,880
are getting Betty rubble because there's only one Betty, right?

211
00:17:37,850 --> 00:17:41,600
And so that's enabling our tree set to filter out.

212
00:17:43,510 --> 00:17:54,430
These duplicates by first name, but not Fred and Wilma and Barney and and and Betty.

213
00:17:54,520 --> 00:17:54,850
Right?

214
00:17:55,450 --> 00:17:57,430
So yeah, that's that's working well.

215
00:17:58,120 --> 00:18:06,010
Now there's one more little thing I would like to share with you about the tree set now with the default

216
00:18:06,220 --> 00:18:10,780
no, our constructor version of the tree set that we are using here.

217
00:18:11,290 --> 00:18:18,820
It expects that the objects that we're adding to it are all of type comparable, meaning they all implement

218
00:18:19,180 --> 00:18:25,330
either directly or indirectly, in our case, the comparable interface so that it can call the compare

219
00:18:25,330 --> 00:18:31,090
two method to determine do I put these new notes to the left or to the right of existing node right

220
00:18:31,090 --> 00:18:33,130
and build that tree structure?

221
00:18:33,580 --> 00:18:42,520
However, there is an alternative constructor that we could also use, especially when and if our objects

222
00:18:42,520 --> 00:18:47,380
that we're wanting to store in it don't happen to implement the comparable interface.

223
00:18:47,680 --> 00:18:56,440
So there is another overloaded version of the constructor that can take that can take a comparator.

224
00:18:56,620 --> 00:19:04,300
So we learned in previous lessons about the comparable interface, but also a comparator.

225
00:19:04,330 --> 00:19:04,780
Right.

226
00:19:05,620 --> 00:19:07,210
And so this is quite nice.

227
00:19:07,960 --> 00:19:16,960
Like I said, if our objects don't happen to implement comparable or if we just want to be able to sort

228
00:19:16,960 --> 00:19:20,200
them according to some other approach.

229
00:19:20,320 --> 00:19:28,030
And in fact, what we could do that would maybe be kind of interesting if we go back over to the employee

230
00:19:28,030 --> 00:19:34,090
class one more time and basically undo this change here.

231
00:19:34,900 --> 00:19:37,570
So I'm going to put this back to last name.

232
00:19:39,780 --> 00:19:40,650
Last name.

233
00:19:42,510 --> 00:19:48,780
And just to prove that I broke it again, I will rerun and we should go back to having only 11 items.

234
00:19:50,500 --> 00:19:52,540
Here we go, OK, we're back to 11 items.

235
00:19:52,750 --> 00:19:56,470
All right, now, I will jump back over to the main class.

236
00:19:57,820 --> 00:20:05,860
So since the tree set has this overloaded constructor constructor that is capable of taking an actual

237
00:20:05,860 --> 00:20:13,300
instance of a comparator and because the comparator interface is functional, which means that it only

238
00:20:13,300 --> 00:20:22,810
defines one method on it, we could actually supply a lambda expression right here to implement our

239
00:20:22,810 --> 00:20:26,170
own comparator in a fairly constrained way.

240
00:20:28,030 --> 00:20:34,090
Now I'm going to get this started, but I'm not going to finish it because we're going to run into one

241
00:20:34,090 --> 00:20:38,620
thing that I'm not all that inclined to get into, but I want to show you the gist of this real quick

242
00:20:38,620 --> 00:20:38,860
here.

243
00:20:39,160 --> 00:20:44,500
So the compare method of the comparator interface takes two inputs.

244
00:20:44,710 --> 00:20:48,100
It's the two items now that are being compared against each other.

245
00:20:48,310 --> 00:20:55,330
And so to make a lambda expression that would represent that, we would be able to have something that

246
00:20:55,330 --> 00:20:56,590
says something like this.

247
00:20:56,830 --> 00:21:03,130
If I decide to call those two objects e one and E two and putting them in parentheses, and then we'd

248
00:21:03,130 --> 00:21:05,650
have our arrow operator here.

249
00:21:05,890 --> 00:21:10,000
And then we could start saying some things, right like e one dot.

250
00:21:10,120 --> 00:21:17,410
And here's though, where we're going to run into a little bit of trouble because currently our set

251
00:21:17,410 --> 00:21:19,840
is a set of AI employee.

252
00:21:19,840 --> 00:21:26,620
And as you may recall, I employee does not directly define last names and first names and things like

253
00:21:26,620 --> 00:21:27,370
that, right?

254
00:21:27,370 --> 00:21:29,860
And that's what we actually want to use to compare.

255
00:21:30,010 --> 00:21:36,580
It only defines salary, so we would need to cast this, and I don't feel like getting into all of that.

256
00:21:36,820 --> 00:21:38,400
But you can see where I'm going here.

257
00:21:38,410 --> 00:21:44,140
Basically, what we would be saying is something to the effect of E one dot.

258
00:21:47,650 --> 00:21:54,730
First name, Scott, compared to E to Dot first name.

259
00:21:55,770 --> 00:22:01,380
That's basically that's the basic gist of what we'd be doing here, and this would let us do the same

260
00:22:01,380 --> 00:22:05,820
thing and again, and just remind you, the only reason I'm not following through with this is because

261
00:22:05,820 --> 00:22:09,870
we're actually dealing with an employee which does not happen to define first name.

262
00:22:09,870 --> 00:22:11,580
I would have to cast these, OK?

263
00:22:11,730 --> 00:22:13,290
But this is the basic gist.

264
00:22:13,470 --> 00:22:18,990
And so that's quite convenient in most cases where we're using the proper interface.

265
00:22:18,990 --> 00:22:26,580
At least this would be quite convenient to be able to do to arbitrarily order our objects in this set,

266
00:22:26,580 --> 00:22:30,510
according to whatever individual simple property we might want to.

267
00:22:31,290 --> 00:22:38,310
One thing I guess I could do for sure and this would be worthwhile, I suppose, is to use the is to

268
00:22:38,310 --> 00:22:39,570
order them by salary.

269
00:22:40,650 --> 00:22:42,420
So we certainly can do this.

270
00:22:46,180 --> 00:22:52,480
Now, the get salary method is returning a simple integer, though, and so simple in integers are not

271
00:22:52,480 --> 00:22:56,020
objects, and therefore they don't have a compare to method on them.

272
00:22:56,050 --> 00:23:00,280
However, if you may recall, we did learn a way to get past that.

273
00:23:00,520 --> 00:23:09,490
We can just use the wrapper integer class, and it has a compare method on it, so we can kind of flip

274
00:23:09,490 --> 00:23:11,020
it inside out, if you will.

275
00:23:11,620 --> 00:23:20,470
E one dot get salary, comma e two loops dot good salary so we can do this.

276
00:23:21,670 --> 00:23:27,910
And to prove that now we can run this again now, the output that we're going to get is going to be

277
00:23:27,910 --> 00:23:32,110
somewhat unpredictable to me because now we're not comparing by last name or first name.

278
00:23:32,110 --> 00:23:34,420
We're now comparing by salary, but let's see what we get.

279
00:23:35,050 --> 00:23:36,280
It'll be something different.

280
00:23:38,010 --> 00:23:40,080
All right, now, we're getting 16 back.

281
00:23:40,230 --> 00:23:43,110
OK, interesting, we are still getting eight point six, though.

282
00:23:46,800 --> 00:23:51,570
And now they are all ordered by salary, starting with zero.

283
00:23:53,750 --> 00:23:58,770
Two point five six, two point two point five, six, two point five 08 and so on and so forth.

284
00:23:59,310 --> 00:24:01,110
OK, so that's kind of cool, right?

285
00:24:01,500 --> 00:24:07,800
So this is actually quite powerful if and when you actually need this type of functionality to be able

286
00:24:07,800 --> 00:24:14,700
to sort and order the items in your list, but also to filter out duplicates according to whatever arbitrary

287
00:24:14,700 --> 00:24:17,220
definition of duplicate you come up with.

288
00:24:17,670 --> 00:24:25,620
And even if you didn't bake that definition into a comparable interface on the objects that you're adding,

289
00:24:25,770 --> 00:24:30,740
you can always just supply a comparator directly to the tree set.

290
00:24:30,750 --> 00:24:32,010
So that's quite powerful.

291
00:24:32,610 --> 00:24:33,750
And so this is pretty cool.

292
00:24:33,760 --> 00:24:40,890
We've now learned how to implement three different types of the most popular implementations of the

293
00:24:40,890 --> 00:24:42,150
set interface.

294
00:24:42,810 --> 00:24:48,750
The hash set, which again is the fastest one but gives unpredictable ordering.

295
00:24:50,090 --> 00:24:59,300
The linked hash set, which is almost as fast as the hash set, are not quite as fast but almost as

296
00:24:59,300 --> 00:25:00,530
fast as the hash set.

297
00:25:00,710 --> 00:25:07,520
But has the added benefit if you need it of retaining the insertion order of your objects?

298
00:25:07,760 --> 00:25:12,170
And now we also have learned of the tree set, which also can filter.

299
00:25:12,170 --> 00:25:19,100
But it does so according to an ordering that you can define either with your objects, implementing

300
00:25:19,100 --> 00:25:26,210
the comparable interface or by supplying a comparator or a lambda that implements the compare method

301
00:25:26,210 --> 00:25:27,200
of the comparator.

302
00:25:27,620 --> 00:25:34,880
All right, so you've got quite a bit of flexibility here for filtering items out with sets now.

303
00:25:35,330 --> 00:25:39,770
And so with that, I think we're going to wrap this one up and I'll see you in the next one.
