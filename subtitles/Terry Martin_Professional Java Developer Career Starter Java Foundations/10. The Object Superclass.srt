1
00:00:00,810 --> 00:00:01,240
Hey, there.

2
00:00:01,560 --> 00:00:08,700
This will be a quick lesson to go into a little bit more detail on some of the fundamentals of class

3
00:00:08,700 --> 00:00:10,620
hierarchy in Java.

4
00:00:11,730 --> 00:00:18,510
To get into this conversation, we're going to jump back over to the original Hello World project.

5
00:00:19,380 --> 00:00:22,190
And I'm going to go over to the person class.

6
00:00:22,620 --> 00:00:28,530
And if you recall when we were working on this person class, you may not remember this.

7
00:00:28,540 --> 00:00:35,280
I know it might feel like it was a million years ago, but you may recall that on the person class,

8
00:00:35,640 --> 00:00:46,080
we implemented a method called two string, which taught Java how to print essentially a representation

9
00:00:46,080 --> 00:00:50,370
of the data that is contained inside of a person object.

10
00:00:50,920 --> 00:00:54,720
OK, and we had the idea to generate this method for us.

11
00:00:55,170 --> 00:00:55,770
It's OK.

12
00:00:55,800 --> 00:01:00,750
If you don't fully remember this, you can go back and watch that part of that video.

13
00:01:00,840 --> 00:01:02,700
But don't worry, we're going to again.

14
00:01:02,700 --> 00:01:07,300
As with many things, I want to repeat a number of concepts a number of times.

15
00:01:07,350 --> 00:01:14,190
So anyway, one of the things that I sort of glossed over was the fact that in order to implement this

16
00:01:14,190 --> 00:01:19,540
method, we were technically overriding and I didn't explain a whole lot about what that meant.

17
00:01:19,560 --> 00:01:22,530
But I want to touch on it a little bit more here.

18
00:01:22,890 --> 00:01:29,610
So in that lesson, we actually implemented a class hierarchy.

19
00:01:29,880 --> 00:01:38,850
We had a class called pet, and then we created a couple more classes that extended the pet class.

20
00:01:38,850 --> 00:01:41,280
So we had cat and dog.

21
00:01:41,310 --> 00:01:43,430
In fact, they'll just open them up real quick.

22
00:01:43,440 --> 00:01:49,260
So cat extends pet, which is to say that cat is a type of pet.

23
00:01:49,540 --> 00:01:55,770
And in just a quick reminder, the reason we'd want to do that is because the pet class might have some

24
00:01:55,770 --> 00:02:04,140
useful properties, some fields and some and or some behaviors, some methods that are very useful to

25
00:02:04,140 --> 00:02:05,550
us, but not enough.

26
00:02:05,790 --> 00:02:12,450
And we may want to further extend the capabilities of what a pet object can do.

27
00:02:12,660 --> 00:02:21,990
And so we could create a cat class and then add some additional behaviors and or fields or data that

28
00:02:21,990 --> 00:02:25,980
might be more specific to a cat that pet doesn't have.

29
00:02:26,070 --> 00:02:31,110
But we still want cat to have all of the capabilities that the pet had.

30
00:02:31,140 --> 00:02:37,560
Also, right, so extends allows us to do this, and this is a class hierarchy.

31
00:02:37,590 --> 00:02:38,010
OK?

32
00:02:38,160 --> 00:02:43,770
And this is getting into a lot of the essence of what it is to program in an object oriented way.

33
00:02:44,520 --> 00:02:45,900
Same thing here for dog.

34
00:02:47,140 --> 00:02:54,700
OK, so we had a method called Bark Person Class does not explicitly extend anything.

35
00:02:55,270 --> 00:02:59,710
So I want to explain what it means to override a method, though.

36
00:03:00,640 --> 00:03:09,210
So basically overriding a method is when you have a class that extends another class.

37
00:03:09,210 --> 00:03:10,570
So I'll go back over to cat.

38
00:03:11,140 --> 00:03:13,450
So in other words, cat extends pet.

39
00:03:13,690 --> 00:03:19,390
And if we go take a look at the pet class, pet has a few methods on it.

40
00:03:19,390 --> 00:03:26,890
It's got these illustrative methods protected method and package protected method here.

41
00:03:26,890 --> 00:03:31,600
And then it's got to get name and set name, get date of birth, et cetera, et cetera.

42
00:03:31,810 --> 00:03:32,170
Right.

43
00:03:32,410 --> 00:03:33,480
In fact, here we go.

44
00:03:33,490 --> 00:03:36,790
It even has a two string method it overrode.

45
00:03:37,180 --> 00:03:46,090
So by default, our cat class would inherit the two string method of the pet class.

46
00:03:46,840 --> 00:03:54,550
And therefore, any time we wanted to print a cat, we would get this output.

47
00:03:54,560 --> 00:03:55,570
And in fact, you know what?

48
00:03:55,570 --> 00:03:57,700
Let's let's just do that real quick.

49
00:03:58,360 --> 00:03:58,990
Tell you what.

50
00:03:59,290 --> 00:04:05,380
For now, I'm just going to introduce a public static void main method right here.

51
00:04:06,310 --> 00:04:17,380
And we will create an instance of a cat cat one equals new cat, and then we will print cat one system

52
00:04:17,380 --> 00:04:19,240
that out that print line cat one.

53
00:04:19,600 --> 00:04:26,260
So this will cause the two string method of the pet class to be called.

54
00:04:26,620 --> 00:04:30,850
It will spit out a string and then that string will be printed on the screen here.

55
00:04:31,020 --> 00:04:32,380
We'll take another look at that.

56
00:04:32,380 --> 00:04:34,120
So we're in the pet class.

57
00:04:35,600 --> 00:04:37,250
This is the two string method.

58
00:04:37,520 --> 00:04:39,260
It returns a string.

59
00:04:39,440 --> 00:04:41,480
And here's the string, it returns.

60
00:04:41,690 --> 00:04:46,950
So it's a string that's going to say Pat and then a curly brace and then name and date of birth.

61
00:04:46,970 --> 00:04:47,340
OK.

62
00:04:47,850 --> 00:04:57,500
So because that two string method is public, whenever we pass an object into a method that is expecting

63
00:04:57,500 --> 00:05:04,640
a string, Java will automatically call the two string method of that object.

64
00:05:05,180 --> 00:05:07,400
OK, so let's run this real quick.

65
00:05:10,510 --> 00:05:16,700
And by the way, notice I just put a public static void main method on some random class cat.

66
00:05:16,840 --> 00:05:22,750
You can put a public static void main method on any class and run run code from within it.

67
00:05:23,200 --> 00:05:23,590
All right.

68
00:05:23,620 --> 00:05:27,670
So here's our output pet, blah blah blah, right?

69
00:05:28,240 --> 00:05:28,650
All right.

70
00:05:28,660 --> 00:05:31,120
So that did what we expected it to do.

71
00:05:31,390 --> 00:05:32,440
Now here's the thing.

72
00:05:33,100 --> 00:05:42,820
What if we don't want the word pet to be printed out when we pass a cat into a print line statement?

73
00:05:43,030 --> 00:05:45,940
What if we want something that's more specific to a cat?

74
00:05:46,600 --> 00:05:55,960
Well, we can override the two string method, and in the one way we can do that is to simply put our

75
00:05:55,960 --> 00:06:03,340
cursor on an empty line inside of the class and then use on Mac Control Zero.

76
00:06:03,520 --> 00:06:06,850
And we can look for the method we want to override.

77
00:06:06,880 --> 00:06:16,750
So what this is showing me is all of the methods and constructors that are on the pet class that I want

78
00:06:16,750 --> 00:06:17,950
to override.

79
00:06:18,220 --> 00:06:23,260
So I want to override the two string method so I can select that and click, OK.

80
00:06:23,920 --> 00:06:25,720
And now I get this.

81
00:06:25,720 --> 00:06:31,450
What's called annotation will learn about annotations later, but I get this special annotation, and

82
00:06:31,450 --> 00:06:40,090
it's just like a clue which just tells us this method exists in a super class of the class we're currently

83
00:06:40,090 --> 00:06:42,580
in, and the superclass of Cat would be pet.

84
00:06:42,880 --> 00:06:47,560
So it's telling us there's already a two string method in pet and you're about to replace it.

85
00:06:48,340 --> 00:06:56,080
And by default, if we do nothing, this method is simply going to turn around and call the pet that

86
00:06:56,080 --> 00:06:56,920
two string method.

87
00:06:56,920 --> 00:07:05,120
Remember, this super word here means the class or the class hierarchy above wherever we currently are.

88
00:07:05,140 --> 00:07:06,550
So we're currently in cat.

89
00:07:07,420 --> 00:07:10,810
So the class above cat would be pet.

90
00:07:11,350 --> 00:07:15,670
So this is basically saying call pet that to string.

91
00:07:16,180 --> 00:07:18,970
OK, but we have to use the word super here.

92
00:07:19,120 --> 00:07:27,340
If we were to have the word pet, that would not be valid because that would imply that two string is

93
00:07:27,340 --> 00:07:30,430
a static method, which it is not.

94
00:07:30,670 --> 00:07:40,480
And so the only way we can access the two string method of pet from within cat is to use the super keyword.

95
00:07:40,750 --> 00:07:41,140
All right.

96
00:07:41,320 --> 00:07:44,110
So if we just do this well here, we'll run this again.

97
00:07:44,680 --> 00:07:44,980
All right.

98
00:07:45,080 --> 00:07:48,760
We get the same thing, and that makes sense because we haven't actually changed anything.

99
00:07:48,760 --> 00:07:49,070
We're.

100
00:07:49,120 --> 00:07:53,800
Yes, we are overwriting this, but then we're turning right around and then just still calling the

101
00:07:53,800 --> 00:07:55,090
pet dot to string.

102
00:07:55,330 --> 00:08:00,910
What we really want to do is to completely change this and get rid of that.

103
00:08:01,270 --> 00:08:02,170
And we can do that.

104
00:08:02,170 --> 00:08:03,100
Just like this.

105
00:08:03,250 --> 00:08:07,990
And all we need to do is make our own string with whatever we want.

106
00:08:08,170 --> 00:08:11,380
So let's say that we want this to say.

107
00:08:12,410 --> 00:08:16,520
Cat hyphen name, Tony.

108
00:08:17,060 --> 00:08:17,690
And that's it.

109
00:08:17,750 --> 00:08:22,580
Now this isn't very useful because we're actually hard coding what's called hard coding the name here.

110
00:08:22,820 --> 00:08:27,950
And what I mean by that is no matter what we name this cat, the name Tony is always going to print

111
00:08:27,950 --> 00:08:30,780
out because we didn't turn this into a variable here.

112
00:08:30,800 --> 00:08:34,760
We've hardcoded it, but let's just see what happens here if we run this now.

113
00:08:36,070 --> 00:08:40,540
OK, so look at that now we get different output cat name Tony.

114
00:08:40,930 --> 00:08:48,170
So we have literally overridden the two string method that we are inheriting from PET.

115
00:08:48,190 --> 00:08:52,950
We've told Java forget about the two string method in the pet class.

116
00:08:52,960 --> 00:08:55,420
I want to implement my own two string method.

117
00:08:55,600 --> 00:08:56,800
And here it is.

118
00:08:57,070 --> 00:08:59,000
And so that's what we've just done here.

119
00:08:59,570 --> 00:09:00,010
Now.

120
00:09:01,630 --> 00:09:05,410
That's not the main thing I wanted to convey in this lesson.

121
00:09:05,650 --> 00:09:10,870
What I really want to convey is this If we go over here to pet, I mean, come down here.

122
00:09:11,290 --> 00:09:13,600
So Pet has its own two string method.

123
00:09:14,040 --> 00:09:15,520
Let me let me close this window.

124
00:09:15,850 --> 00:09:16,090
All right.

125
00:09:16,100 --> 00:09:18,220
So Pet has its own two string method.

126
00:09:18,580 --> 00:09:26,890
And notice it also is being overridden, which means that this method to string on the pet class is

127
00:09:27,400 --> 00:09:30,790
coming from a parent class.

128
00:09:31,300 --> 00:09:35,110
OK, and and in the pet class, we're overriding it right?

129
00:09:35,290 --> 00:09:42,640
So just like Cat was overriding pets to string, Method Pet is overriding some other classes to string

130
00:09:42,640 --> 00:09:43,030
method.

131
00:09:43,330 --> 00:09:44,530
However.

132
00:09:45,840 --> 00:09:51,480
If we go up here, look at that pet isn't extending anything, in other words.

133
00:09:52,450 --> 00:09:58,750
There is no parent class of pet, at least not explicitly, there isn't.

134
00:09:59,170 --> 00:10:05,620
So how is it that we're overriding a two string method?

135
00:10:06,670 --> 00:10:10,810
What class are we overriding for this method?

136
00:10:11,950 --> 00:10:13,720
Because there's nothing shown here.

137
00:10:14,900 --> 00:10:16,730
And that is what I want to talk about.

138
00:10:17,780 --> 00:10:23,210
OK, so short answer for every single class in Java.

139
00:10:23,420 --> 00:10:33,440
If that class is not already extending a class explicitly, there is a default parent class that it

140
00:10:33,440 --> 00:10:34,280
will extend.

141
00:10:34,520 --> 00:10:35,600
Let me say that again.

142
00:10:36,410 --> 00:10:37,490
Basically, I'm saying.

143
00:10:38,430 --> 00:10:47,580
All classes extend from one standard parent class if they're not already explicitly extending something.

144
00:10:48,030 --> 00:10:57,060
So in the case here, PET is not explicitly extending anything but it, but it is implicitly extending

145
00:10:57,060 --> 00:11:01,560
something, and the thing that it is extending is a class called object.

146
00:11:02,100 --> 00:11:02,580
So.

147
00:11:03,550 --> 00:11:04,460
What you see here.

148
00:11:04,480 --> 00:11:06,310
Public class pet.

149
00:11:07,310 --> 00:11:09,770
Is equivalent to.

150
00:11:12,650 --> 00:11:19,700
To that, and I have not changed the behavior of this class at all because this is implied.

151
00:11:20,280 --> 00:11:25,400
OK, I've made it explicit now, but this is what was already there.

152
00:11:25,490 --> 00:11:26,900
We just weren't seeing it.

153
00:11:27,350 --> 00:11:38,000
So there is a class above all other classes called object and every other class in all of Java extends

154
00:11:38,030 --> 00:11:40,670
object, either directly or indirectly.

155
00:11:40,670 --> 00:11:43,940
It might be its great, great, great, great, great, great, great, great, great parent.

156
00:11:44,450 --> 00:11:53,450
But one way or another, every class extends from the original class of object, and this object class

157
00:11:53,450 --> 00:11:57,020
actually has a few methods on it.

158
00:11:57,290 --> 00:12:02,030
And one of those methods is the two string method here.

159
00:12:02,660 --> 00:12:09,980
Now we can see what other methods are on object pretty easily, at least on object, for us to extend

160
00:12:10,280 --> 00:12:15,200
by simply going to some white space and then doing another control.

161
00:12:15,200 --> 00:12:17,810
Oh, control, oh, by the way, stands for override.

162
00:12:18,500 --> 00:12:25,460
So we can tell the ABC we want to override one or more methods that are inherited.

163
00:12:26,660 --> 00:12:33,230
And so by doing control of this comes up, and it shows me what other methods are available for me to

164
00:12:33,230 --> 00:12:33,860
override.

165
00:12:34,040 --> 00:12:38,120
There's something called hash code, which returns an end integer.

166
00:12:38,510 --> 00:12:43,420
There's a method called equals that takes an object and returns what's called a boolean.

167
00:12:43,430 --> 00:12:49,700
I don't recall if I explain Boolean, but that basically just means a true or false yes or no on or

168
00:12:49,700 --> 00:12:50,060
off.

169
00:12:51,030 --> 00:12:52,740
There's a method called Clone.

170
00:12:53,670 --> 00:13:00,210
And then there's a method here that is being phased out called finalize, so we don't really want to

171
00:13:00,210 --> 00:13:01,260
be looking at that.

172
00:13:01,380 --> 00:13:03,930
It's going to be phased out or it is being phased out.

173
00:13:04,230 --> 00:13:04,680
OK.

174
00:13:04,710 --> 00:13:08,140
And then the other method that isn't showing up here is the two string method.

175
00:13:08,160 --> 00:13:12,360
The reason it's not showing up is because the ATP knows we're already overriding that.

176
00:13:12,510 --> 00:13:15,990
So it's not showing it here, but that would be another method.

177
00:13:16,260 --> 00:13:25,680
OK, so in conclusion, this explains how a method like print line is able to accept any object, no

178
00:13:25,680 --> 00:13:27,540
matter what type it is.

179
00:13:27,690 --> 00:13:30,990
Cat dog, space ship, whatever.

180
00:13:31,020 --> 00:13:37,530
Even though the print line method wasn't explicitly written to know about any of these specific methods

181
00:13:37,530 --> 00:13:46,140
that you might write in the future, it still knows how to print a string representation of any of those

182
00:13:46,140 --> 00:13:46,830
objects.

183
00:13:47,010 --> 00:13:56,010
And that's because no matter what their class type is, they all extend from a common ancestor of type.

184
00:13:56,160 --> 00:14:00,780
Object and object has a two string method on it.

185
00:14:00,990 --> 00:14:08,160
And so the print line method simply knows that it can always count on that two string method existing.

186
00:14:08,340 --> 00:14:13,710
There is no object in Java that doesn't have a two string method.

187
00:14:15,260 --> 00:14:20,960
Now you can override that method, if you like, but if you don't, they're still going to be a default

188
00:14:20,960 --> 00:14:22,880
implementation of that method.

189
00:14:23,150 --> 00:14:28,670
And of course, as I stated before, not only is there a two string method, but there are several other

190
00:14:28,670 --> 00:14:29,240
methods.

191
00:14:29,870 --> 00:14:36,380
And as we saw, some of those other methods on the object class were methods like equals and hash code.

192
00:14:36,770 --> 00:14:44,330
So this has just been a quick introduction to the fact that all classes in Java ultimately extend either

193
00:14:44,330 --> 00:14:53,240
directly or indirectly from the original parent class of object, and therefore they inherit a few methods

194
00:14:53,240 --> 00:14:54,590
from that class.

195
00:14:54,800 --> 00:15:00,950
We will explore the implications of this further in subsequent lessons, and I will see you in the next

196
00:15:00,950 --> 00:15:01,190
one.
