1
00:00:00,450 --> 00:00:06,670
All right, so in the last lesson, we were able to save and address as part of a person, so we saved

2
00:00:06,670 --> 00:00:12,960
the person who had an address and the saving of the address got cascaded with the saving of the person,

3
00:00:12,960 --> 00:00:14,010
which was pretty cool.

4
00:00:14,460 --> 00:00:20,850
But now it's time to rain on our parade a little bit because we're now going to run all of the tests

5
00:00:20,850 --> 00:00:23,160
and let's see what happens when we do that.

6
00:00:24,330 --> 00:00:24,650
All right.

7
00:00:24,660 --> 00:00:32,580
So here we are back in the people repository tests and I'm coming up here to the very top and and we're

8
00:00:32,580 --> 00:00:35,040
just going to run all of these tests.

9
00:00:36,630 --> 00:00:37,350
Let's see.

10
00:00:38,820 --> 00:00:39,510
Ouch.

11
00:00:40,380 --> 00:00:47,260
Let's see here, seven failed and two passed, so not great.

12
00:00:48,270 --> 00:00:54,060
So let's click on any one of these failed tests and see if we can figure out what what happened here

13
00:00:54,390 --> 00:01:00,090
cannot invoke the address that street address because entity is null.

14
00:01:00,480 --> 00:01:05,630
And that is happening in the address repository in the map for safe method.

15
00:01:05,640 --> 00:01:07,830
So the address repository?

16
00:01:08,490 --> 00:01:10,770
OK, so and OK.

17
00:01:10,770 --> 00:01:17,640
So this method got called and it was passed an entity of an address.

18
00:01:17,940 --> 00:01:25,220
And then the various properties of this entity were trying to be bound to the prepared statement and

19
00:01:25,220 --> 00:01:27,690
they couldn't be bound because this entity was null.

20
00:01:27,720 --> 00:01:30,510
That's what this is saying, because entity is null.

21
00:01:30,540 --> 00:01:30,900
Right?

22
00:01:31,740 --> 00:01:34,950
Let's see what method was calling that.

23
00:01:35,130 --> 00:01:41,760
So the code repository that save, which is just our kind of generic method there in the in the parent

24
00:01:41,760 --> 00:01:42,070
class.

25
00:01:42,070 --> 00:01:44,110
So I don't think that's going to tell us much.

26
00:01:44,550 --> 00:01:49,350
But look here now the people repository map for save.

27
00:01:49,380 --> 00:01:50,940
Now let's see that one.

28
00:01:51,250 --> 00:02:00,120
Ah, OK, so this is the new code that we added to first save an address before we go and try to save

29
00:02:00,120 --> 00:02:01,500
an actual person.

30
00:02:01,890 --> 00:02:08,640
And so, yeah, of course, in most in all of these other tests, there is no address, even existing,

31
00:02:08,640 --> 00:02:08,860
right?

32
00:02:08,880 --> 00:02:16,350
We never created an address and associated it with the person and therefore the call to get home address

33
00:02:16,560 --> 00:02:18,270
would result in a null.

34
00:02:18,270 --> 00:02:20,510
And then we get the error that we're getting here, right?

35
00:02:20,520 --> 00:02:21,990
Because you can't do this.

36
00:02:22,620 --> 00:02:25,390
So the question is, what do we want to do about this?

37
00:02:25,410 --> 00:02:25,740
Right?

38
00:02:26,070 --> 00:02:34,890
So one thing that we could do is just check if the get home address returns a null and if it is null,

39
00:02:35,220 --> 00:02:38,340
then don't do any of this at all.

40
00:02:38,670 --> 00:02:39,030
Right?

41
00:02:39,270 --> 00:02:46,500
And then if we don't do any of that, then we'd have to also come down here and I guess maybe not do

42
00:02:46,500 --> 00:02:47,380
any of that either.

43
00:02:47,400 --> 00:02:48,990
Something along those lines, right?

44
00:02:49,680 --> 00:02:52,950
So let's see what that would look like if we were to do it that way.

45
00:02:53,370 --> 00:02:53,700
All right.

46
00:02:53,700 --> 00:02:59,520
So I think what we can do then is do an option command T or control alt T.

47
00:02:59,850 --> 00:03:06,570
And we can surround this block of this line with an if statement, which is number one in our surround

48
00:03:06,570 --> 00:03:07,890
with options here.

49
00:03:09,060 --> 00:03:14,730
So we can do that and then we can say maybe if entity.

50
00:03:16,160 --> 00:03:17,550
That was it.

51
00:03:17,590 --> 00:03:26,210
Get out, get home address is not equal to null, then it can proceed to do all of that.

52
00:03:26,630 --> 00:03:27,950
And let me make some room here.

53
00:03:27,980 --> 00:03:34,490
So that should prevent any attempt at saving a home address if there is no home address.

54
00:03:34,520 --> 00:03:34,970
Right.

55
00:03:35,000 --> 00:03:41,960
But then we're also going to have to address this line down here where we're trying to extract the I.D.

56
00:03:42,440 --> 00:03:45,770
from the home address to associated with the person.

57
00:03:46,370 --> 00:03:53,780
Now, one thing that we could possibly do here would be to just consolidate all of this conditional

58
00:03:53,780 --> 00:03:56,060
stuff about the home address altogether.

59
00:03:56,060 --> 00:04:01,520
And what I mean by that is even though I have all of these parameter bindings in order one, two, three,

60
00:04:01,520 --> 00:04:10,820
four, five and six, we could conceivably just move this line up like so that's one thing we could

61
00:04:10,820 --> 00:04:19,640
do, or we could even grab all of this and move all of this down, which might be a little better because

62
00:04:19,640 --> 00:04:26,480
if we do have an address, then the saving only has to happen before we try to associate the address

63
00:04:26,480 --> 00:04:34,100
as a ID with the person, as we're doing here on Line forty two now, the rest of this is fine, as

64
00:04:34,100 --> 00:04:34,520
is.

65
00:04:35,120 --> 00:04:38,840
So this approach should work, actually.

66
00:04:39,110 --> 00:04:41,120
Let's go ahead and try it out and see.

67
00:04:41,210 --> 00:04:48,050
So let me open back up our tests here, and I'm just going to rerun everything and let's see what happens

68
00:04:48,050 --> 00:04:48,380
now.

69
00:04:53,740 --> 00:04:55,380
OK, well, all right.

70
00:04:55,700 --> 00:04:59,170
OK, well, we got one more than we had before.

71
00:04:59,200 --> 00:05:01,690
OK, so not much better.

72
00:05:02,110 --> 00:05:03,700
Let's click on this one.

73
00:05:03,710 --> 00:05:06,130
And so now what is our issue?

74
00:05:06,610 --> 00:05:09,190
Parameter number six is Ah.

75
00:05:09,220 --> 00:05:11,400
OK, so now we've got an issue.

76
00:05:11,410 --> 00:05:12,990
So I was actually a little bit wrong.

77
00:05:13,000 --> 00:05:22,030
I had forgotten that this sixth parameter is lining up with the six hardcoded parameters that our insert

78
00:05:22,030 --> 00:05:23,770
statement is expecting.

79
00:05:24,040 --> 00:05:27,580
So we cannot just conditionally set this value.

80
00:05:27,580 --> 00:05:31,870
It has to be set to something with the way we're doing things right now.

81
00:05:32,110 --> 00:05:39,700
So one thing we could do in that case is maybe provide an else and then call an alternative set method

82
00:05:39,700 --> 00:05:39,940
here.

83
00:05:39,970 --> 00:05:44,410
Now I think we're going to have to be a little careful here because let me show you this if we just

84
00:05:44,410 --> 00:05:47,080
try to do that set long.

85
00:05:47,590 --> 00:05:50,580
Obviously, the question is will set it to what right?

86
00:05:50,590 --> 00:05:52,030
What can we set this to?

87
00:05:52,240 --> 00:05:56,710
We don't have an ID of a saved address at this point, right?

88
00:05:57,220 --> 00:06:03,730
And under some circumstances, we might have just made up an address like, for example, a negative

89
00:06:03,730 --> 00:06:04,180
one.

90
00:06:05,710 --> 00:06:12,340
A lot of the times you'll see programmers use negative one or some value like that to indicate that

91
00:06:12,340 --> 00:06:16,720
I don't have a legitimate value, so I'm just going to put a negative value in here.

92
00:06:17,230 --> 00:06:19,240
You'll see programmers do that from time to time.

93
00:06:19,240 --> 00:06:25,150
And while I think that should work fine from the code's perspective, the database isn't going to like

94
00:06:25,150 --> 00:06:30,700
that because if you recall, we created a foreign key constraint on the people table.

95
00:06:30,850 --> 00:06:37,660
And what that foreign key constraint tells the database is that if you do supply an ID here, so we

96
00:06:37,660 --> 00:06:42,760
don't have to supply an ID in the database for this column on the people table.

97
00:06:42,940 --> 00:06:51,100
But if we do that, it had better be a legitimate ID of a legitimate address in the addresses table.

98
00:06:51,310 --> 00:06:55,090
That's what the foreign key constraint is constraining us to.

99
00:06:55,390 --> 00:07:00,880
And so negative one would not be a valid address in the address table.

100
00:07:00,890 --> 00:07:06,340
It will never be a valid address unless we were to go in there and manually put one in because we just

101
00:07:06,340 --> 00:07:07,630
wanted to make this work.

102
00:07:08,050 --> 00:07:10,810
So that's not going to work as is.

103
00:07:10,840 --> 00:07:17,740
So what I'm wondering about, though, is maybe instead of calling set long here, perhaps we could

104
00:07:17,740 --> 00:07:22,690
call set object, which is more generic.

105
00:07:23,170 --> 00:07:30,430
And then instead of trying to set this value as an integer, perhaps we could get away with just setting

106
00:07:30,430 --> 00:07:35,560
it to null, which is what it already is in the database anyway, when we don't actually have a foreign

107
00:07:35,560 --> 00:07:37,660
key pointing to an actual object.

108
00:07:37,900 --> 00:07:42,220
So in other words, we would essentially just let it continue being null, which is what it would default

109
00:07:42,220 --> 00:07:43,360
to being anyway.

110
00:07:43,630 --> 00:07:46,180
So let's try that and see if this will help.

111
00:07:50,410 --> 00:07:50,570
OK.

112
00:07:51,040 --> 00:07:55,750
OK, so that looks much, much better, and, you know, I just realized something, by the way, while

113
00:07:55,750 --> 00:07:57,190
all of these tests were running.

114
00:07:57,400 --> 00:08:04,270
We have a we have a can find all test here, and it literally calls Repot find all.

115
00:08:04,270 --> 00:08:09,430
And as you know, we now have loaded in all five million records into the database.

116
00:08:09,430 --> 00:08:16,000
So this test looks like it got ignored, and I'm guessing it probably got ignored because it was running

117
00:08:16,000 --> 00:08:16,720
too long.

118
00:08:17,050 --> 00:08:21,850
So that's something else that we're going to want to reconsider here now that we've got five million

119
00:08:21,850 --> 00:08:23,670
records in the database.

120
00:08:23,680 --> 00:08:31,420
And in fact, I think what we may want to go ahead and do for right now is just to disable this test

121
00:08:31,660 --> 00:08:36,760
until we may choose to come back at a later date and see what we want to do with this.

122
00:08:37,540 --> 00:08:40,060
And very likely we may not do anything with it.

123
00:08:40,060 --> 00:08:41,380
I mean, you get what it's doing.

124
00:08:41,380 --> 00:08:46,000
We know how it does work, but yeah, maybe we don't want to be calling that anymore with five million

125
00:08:46,000 --> 00:08:46,510
records.

126
00:08:47,170 --> 00:08:47,440
All right.

127
00:08:47,440 --> 00:08:50,580
But other than that, everything is working now, right?

128
00:08:50,590 --> 00:08:58,240
So let's jump back over here now to our system under test, which is the people repository class.

129
00:08:58,510 --> 00:08:58,780
All right.

130
00:08:58,780 --> 00:09:02,320
So we were able to make that work now.

131
00:09:02,350 --> 00:09:04,630
However, now I want to raise a question for you.

132
00:09:05,080 --> 00:09:07,360
You know, we learned about optional, right?

133
00:09:07,750 --> 00:09:17,260
And I mentioned that options exist in large part because doing these kinds of null checks is often not

134
00:09:17,260 --> 00:09:18,340
considered cool.

135
00:09:18,960 --> 00:09:21,480
It's not what the cool kids do anymore.

136
00:09:21,490 --> 00:09:23,440
So now I think I want to challenge you.

137
00:09:23,680 --> 00:09:31,720
Can you think of a way to revise our project a little bit so that we don't have to do these explicit

138
00:09:31,720 --> 00:09:32,800
null checks?

139
00:09:33,010 --> 00:09:36,190
Maybe by using optional do you want to take up that challenge?

140
00:09:36,220 --> 00:09:40,180
If so, then go ahead and parse the lesson and see what you can do.

141
00:09:40,540 --> 00:09:46,060
You know, it's nice to try to combine a lot of our techniques that we've learned throughout this course

142
00:09:46,330 --> 00:09:48,010
to see how we can write real code.

143
00:09:48,010 --> 00:09:50,920
And by the way, I mean, this is getting into some real code in many ways.

144
00:09:50,950 --> 00:09:56,350
Now I will say this, I don't think there are too many teams in the world today that are writing this

145
00:09:56,350 --> 00:09:59,130
much low level JTBC code anymore.

146
00:09:59,140 --> 00:10:04,630
I'm sure there are a few for sure, but there are honestly frameworks that do what we're doing here

147
00:10:04,630 --> 00:10:07,960
in a much more sophisticated way than what we're doing here.

148
00:10:08,020 --> 00:10:12,790
And let me just remind you the reason that we're writing this little poor man's framework and doing

149
00:10:12,790 --> 00:10:19,510
all of this JBC stuff is so that in later courses where you will encounter these very popular frameworks

150
00:10:19,510 --> 00:10:25,090
for working with the database more efficiently and even more easily than this, you'll have a better

151
00:10:25,090 --> 00:10:27,280
understanding of what those frameworks are doing.

152
00:10:27,310 --> 00:10:27,730
OK.

153
00:10:27,790 --> 00:10:28,150
All right.

154
00:10:28,180 --> 00:10:32,770
So anyway, with that being said, if you want to take up this challenge, go ahead and parse the lesson

155
00:10:32,770 --> 00:10:38,200
and try changing this over to use optional so that you can get away from having to do this type of explicit

156
00:10:38,200 --> 00:10:42,160
null check and then join back with me and see how I will do it.

157
00:10:43,480 --> 00:10:43,970
All right.

158
00:10:43,990 --> 00:10:47,270
So hopefully, you tried that and hopefully you even got it.

159
00:10:47,290 --> 00:10:48,880
So now let me try.

160
00:10:49,090 --> 00:10:49,420
All right.

161
00:10:49,430 --> 00:10:54,970
So the first thing I would do is I would go in and change list.

162
00:10:54,970 --> 00:10:56,230
See, where am I going here?

163
00:10:56,470 --> 00:11:07,030
I would go into the person class, which is here, and I would change our address field to no longer

164
00:11:07,030 --> 00:11:10,820
be an address field, but instead to be an optional address.

165
00:11:10,840 --> 00:11:12,220
That's the first thing I would do.

166
00:11:12,640 --> 00:11:12,900
All right.

167
00:11:12,910 --> 00:11:19,540
So if we come down to this field and you right click on the type of address here, you right click on

168
00:11:19,540 --> 00:11:22,090
that and then come down here to refactor.

169
00:11:22,300 --> 00:11:27,100
You can actually migrate or change that data type right here.

170
00:11:27,100 --> 00:11:28,750
Or you could do a shift command F6.

171
00:11:28,750 --> 00:11:31,660
So there's a keyboard shortcut that even I hadn't memorized.

172
00:11:32,050 --> 00:11:32,380
All right.

173
00:11:32,390 --> 00:11:35,530
So I'm going to select type migration.

174
00:11:36,340 --> 00:11:44,920
And what this is going to allow me to do is to change this data type from address to an optional other

175
00:11:44,980 --> 00:11:45,640
address.

176
00:11:45,820 --> 00:11:49,540
So migrate type of filled home address, address two.

177
00:11:49,720 --> 00:11:53,670
So the way I'm going to do this, I think, is just to type right over this.

178
00:11:53,720 --> 00:11:55,690
I'm going to type optional.

179
00:11:56,830 --> 00:12:02,470
Address like, sir and I'm going to go ahead and import that.

180
00:12:03,710 --> 00:12:09,530
Just like I would in the regular Ed, OK, and then I'm going to click Refactor and now it's asking

181
00:12:09,530 --> 00:12:14,430
me, where do I want this to this change to occur, by the way, and I am telling it in all places.

182
00:12:14,450 --> 00:12:17,240
OK, so I'm going to go ahead and click Refactor here.

183
00:12:18,610 --> 00:12:24,040
So, OK, so now I'm getting an error where it's just telling me the various places within the project

184
00:12:24,040 --> 00:12:29,830
where it where it no longer will make sense to deal with an optional where it had been expecting an

185
00:12:29,830 --> 00:12:30,370
address.

186
00:12:30,580 --> 00:12:31,330
That's OK.

187
00:12:31,660 --> 00:12:35,860
I want it to break so that I can see where I need to go, so I'm going to come down here to the button

188
00:12:35,860 --> 00:12:38,050
that you can't see that says ignore.

189
00:12:38,170 --> 00:12:41,680
I'm going to tell it simply to ignore these errors for right now.

190
00:12:41,860 --> 00:12:43,930
I will address them one at a time.

191
00:12:44,110 --> 00:12:45,490
OK, so I'm going to click Ignore.

192
00:12:46,120 --> 00:12:51,880
OK, so now I've got my optional address and I can scroll down here towards the bottom and just double

193
00:12:51,880 --> 00:12:58,690
check that yes, indeed, I am now returning an optional address and I am taking an optional address

194
00:12:58,690 --> 00:12:58,850
now.

195
00:12:58,870 --> 00:13:01,210
I actually don't think I want that.

196
00:13:01,570 --> 00:13:08,050
I think I actually want to take on this set home address, just the regular address, and then I will

197
00:13:08,050 --> 00:13:09,510
deal with it internally.

198
00:13:09,520 --> 00:13:15,400
OK, and now now you get to see one of those places where having the getter and setter, especially

199
00:13:15,400 --> 00:13:22,810
here, the center can actually bring some value in that I can have the setter accept the regular address

200
00:13:23,530 --> 00:13:28,840
and then inside of its implementation, we will convert that to an optional just as a convenience,

201
00:13:28,840 --> 00:13:29,380
if you will.

202
00:13:31,110 --> 00:13:39,630
So we will let that be a regular address, and then here we can do an optional of Nullarbor because

203
00:13:39,630 --> 00:13:42,420
I don't know what people would actually be passing in here.

204
00:13:42,430 --> 00:13:44,600
They might pass in a legit address.

205
00:13:44,610 --> 00:13:48,150
Somebody might call this code at some point and pass in a null.

206
00:13:48,300 --> 00:13:51,330
And I don't want the whole entire program to blow up because of that.

207
00:13:51,510 --> 00:13:57,630
So I'm going to let this method be kind of Nullarbor like so.

208
00:13:58,580 --> 00:13:58,970
All right.

209
00:13:59,330 --> 00:14:02,750
And so that makes that a little more convenient to use.

210
00:14:03,290 --> 00:14:03,550
All right.

211
00:14:03,640 --> 00:14:08,150
And so now I've got an error here because the ad got a little overzealous.

212
00:14:08,360 --> 00:14:09,830
And so now I need to fix that.

213
00:14:09,830 --> 00:14:16,580
So I'm just going to get rid of that and make this back into just a regular address here.

214
00:14:16,640 --> 00:14:17,030
All right.

215
00:14:17,030 --> 00:14:21,320
And then we've got an area down here because now when we call saved the person that get home address

216
00:14:21,320 --> 00:14:23,720
this is returning an optional of an address.

217
00:14:23,720 --> 00:14:27,590
And so there is no date that ID on an optional.

218
00:14:27,860 --> 00:14:33,020
And so if I want the Real ID, I will have to dig in one level deeper and I am going to go ahead and

219
00:14:33,020 --> 00:14:33,830
just call get.

220
00:14:34,010 --> 00:14:38,000
Because again, I'm in a test and I control all of the parameters here.

221
00:14:38,000 --> 00:14:42,110
And so I know that within this test, there should always be an address.

222
00:14:42,230 --> 00:14:48,170
And if there isn't one, then this should break and blow up badly because my assumptions of of everything

223
00:14:48,170 --> 00:14:50,210
would be completely wrong in that case.

224
00:14:50,330 --> 00:14:53,480
So I'm good with calling get here so that it can get at that ID.

225
00:14:53,780 --> 00:14:59,240
All right now to go find all of the other places that are having problems, I can actually rebuild the

226
00:14:59,240 --> 00:14:59,800
projects.

227
00:14:59,820 --> 00:15:01,800
I'm going to do a command F9.

228
00:15:02,690 --> 00:15:03,040
All right.

229
00:15:03,050 --> 00:15:06,770
And that went ahead and opened up an error right here.

230
00:15:07,310 --> 00:15:07,790
Let's see now.

231
00:15:07,790 --> 00:15:08,490
Where is this?

232
00:15:08,510 --> 00:15:11,180
This is in the people repository.

233
00:15:11,210 --> 00:15:12,980
OK, so we're right here in this code.

234
00:15:13,460 --> 00:15:13,730
All right.

235
00:15:13,730 --> 00:15:16,400
So now we're trying to save the address.

236
00:15:16,400 --> 00:15:21,710
And of course, we're calling in to T Get Home address, which is now returning an optional of an address

237
00:15:21,710 --> 00:15:23,190
instead of a regular address now.

238
00:15:23,210 --> 00:15:28,760
OK, so maybe one easy thing we could do here would be to first change what we're checking for because

239
00:15:28,760 --> 00:15:30,980
we're no longer going to be checking for Noel, right?

240
00:15:31,310 --> 00:15:35,570
Instead, we can check something like.

241
00:15:37,300 --> 00:15:46,810
Is present right, if home address is present, then we can come down here and now we can safely call

242
00:15:46,840 --> 00:15:51,430
get right because we're doing this check for is present first.

243
00:15:51,610 --> 00:15:54,050
We can then come down here and just call again.

244
00:15:54,160 --> 00:15:59,360
This is a pattern where it's safe to call just again because you did this check first, right?

245
00:15:59,380 --> 00:16:04,570
And this may actually be about the most straightforward thing that we can do in this particular case.

246
00:16:04,720 --> 00:16:10,870
Now, I would have preferred honestly to have done one of the more fancy optional things like a stream

247
00:16:10,870 --> 00:16:13,690
or a map, or if present or something like that.

248
00:16:13,810 --> 00:16:19,600
However, we would have run into a problem, which is that when we tried to call pass, that set long

249
00:16:19,840 --> 00:16:27,190
set, long throws an exception and it's a checked exception and checked exceptions don't play nicely

250
00:16:27,190 --> 00:16:33,160
within streams or optional stream stream like API calls and all of that.

251
00:16:33,340 --> 00:16:41,050
So we would have had to then wrap this stuff here, or at least or at least this call here within another

252
00:16:41,050 --> 00:16:47,590
try catch, which is already within its own try catch, which starts to look kind of ugly because really,

253
00:16:47,590 --> 00:16:53,500
truly, this entire map for save is kind of happening within its own try catch, which we don't see

254
00:16:53,500 --> 00:16:53,830
here.

255
00:16:53,920 --> 00:16:59,770
It's inside of the method that calls Map for Save, which lives up in the superclass right up in the

256
00:16:59,770 --> 00:17:01,930
crud repository class itself.

257
00:17:02,260 --> 00:17:06,190
So that would have been a few too many embedded try catches for my taste.

258
00:17:06,700 --> 00:17:08,470
And this is OK.

259
00:17:08,770 --> 00:17:11,320
It's not my favorite, but this is OK.

260
00:17:11,380 --> 00:17:15,590
All right, so I'm going to do another build here just to make sure I got everything.

261
00:17:15,610 --> 00:17:18,880
So another command f nine or control f nine.

262
00:17:19,090 --> 00:17:19,320
All right.

263
00:17:19,330 --> 00:17:20,980
So that all looks good there.

264
00:17:21,010 --> 00:17:28,480
So now let me open back up the tests and run them all again and see if everything is still happy.

265
00:17:28,510 --> 00:17:31,090
Even with that, switch over to using optional.

266
00:17:31,720 --> 00:17:34,030
And no, it's not happy at all.

267
00:17:34,330 --> 00:17:36,160
All right, so let's see what we've got now.

268
00:17:36,220 --> 00:17:37,600
Can't invoke optional.

269
00:17:37,600 --> 00:17:44,260
That is present because the return value of person that get home address is null.

270
00:17:44,560 --> 00:17:45,640
Ah, oh yes.

271
00:17:46,050 --> 00:17:46,530
Yes, yes.

272
00:17:46,810 --> 00:17:53,800
OK, so now the problem is that although we have changed the home address field of the person class

273
00:17:53,800 --> 00:18:01,660
to be of type optional, optional itself is an object and therefore it still has to exist even if it

274
00:18:01,660 --> 00:18:02,740
doesn't have anything in it.

275
00:18:02,770 --> 00:18:04,000
Let me show you what I mean here.

276
00:18:04,780 --> 00:18:07,180
So we'll jump back over here to the person class.

277
00:18:07,450 --> 00:18:09,070
OK, so home address.

278
00:18:09,100 --> 00:18:09,460
OK.

279
00:18:09,610 --> 00:18:16,660
So if we were to just create a person right now and do nothing else, this field would be null.

280
00:18:17,110 --> 00:18:18,570
It wouldn't be optional.

281
00:18:18,580 --> 00:18:23,440
It would just be null because we didn't set anything on it at all.

282
00:18:23,470 --> 00:18:23,830
Right.

283
00:18:24,490 --> 00:18:26,290
And that's what this is complaining about.

284
00:18:26,290 --> 00:18:32,440
Person I get home address is still null right now, and it's going to be null for all of the methods

285
00:18:32,440 --> 00:18:37,030
for all of the tests where we don't explicitly try to create an address.

286
00:18:37,300 --> 00:18:45,790
So one thing that we can do really easily to resolve this issue is really just to initialize this field

287
00:18:45,940 --> 00:18:50,680
to an empty optional so we can do optional dot empty.

288
00:18:51,280 --> 00:18:55,380
And so that gives us literally an empty optional of an address.

289
00:18:55,480 --> 00:18:55,900
OK.

290
00:18:55,990 --> 00:18:57,650
There won't be an actual address in there.

291
00:18:57,670 --> 00:18:59,410
It just won't be null anymore.

292
00:18:59,410 --> 00:19:00,520
It'll be empty now.

293
00:19:00,550 --> 00:19:00,970
OK.

294
00:19:01,330 --> 00:19:03,760
So let's run all of these tests again.

295
00:19:06,520 --> 00:19:07,360
There we go.

296
00:19:07,390 --> 00:19:13,210
And so now everything is passing and we're using optional instead of null.

297
00:19:13,750 --> 00:19:19,600
And so one more time, let's jump back over into the people repository and take another look at this

298
00:19:19,600 --> 00:19:20,900
code one more time.

299
00:19:20,920 --> 00:19:25,390
OK, so we're now checking first if we've got an address present.

300
00:19:25,690 --> 00:19:27,700
Then go ahead and save it.

301
00:19:27,970 --> 00:19:32,080
Get that I.D. and now use that I.D. over here.

302
00:19:32,110 --> 00:19:39,340
Otherwise, just set the sixth parameter, which which corresponds to the home address column in the

303
00:19:39,340 --> 00:19:43,840
people table just set that foreign key to null, as that makes sense.

304
00:19:44,500 --> 00:19:44,850
All right.

305
00:19:44,860 --> 00:19:49,960
So that's going to wrap up this lesson and we will do some more things with this address field because

306
00:19:49,960 --> 00:19:53,050
we're eventually going to have to also retrieve addresses.

307
00:19:53,320 --> 00:19:57,730
So we've got more to look forward to and some really neat techniques that I want to show you when it

308
00:19:57,730 --> 00:19:59,200
comes to retrieving as well.

309
00:19:59,470 --> 00:20:00,700
So I'll see you in the next one.
