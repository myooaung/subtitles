WEBVTT
1
00:00:00.600 --> 00:00:01.020
All right.

2
00:00:01.140 --> 00:00:06.030
So in this next lesson, we're going to learn how to upper or lower case.

3
00:00:06.210 --> 00:00:13.140
Text some of the reasons you might want to do this would be to normalize text that is entered by an

4
00:00:13.140 --> 00:00:14.610
end user, for example.

5
00:00:14.610 --> 00:00:22.260
So let's say that you have a program where the user is asked to enter the two letter code of the state

6
00:00:22.260 --> 00:00:23.430
in which they live.

7
00:00:23.670 --> 00:00:27.990
And you just want to make absolutely certain that before you take whatever they enter it in, you store

8
00:00:27.990 --> 00:00:32.070
it into the database that it's all consistent in terms of upper and lower case.

9
00:00:32.280 --> 00:00:34.740
Some people might enter it all lowercase.

10
00:00:34.750 --> 00:00:35.940
Some people might enter it.

11
00:00:36.090 --> 00:00:40.560
Mixed case and let's say that in the database, you want it to all be uppercase.

12
00:00:40.560 --> 00:00:46.770
So regardless of how they enter it, you may want to just force the text to be all uppercase so that

13
00:00:46.770 --> 00:00:47.760
it's consistent.

14
00:00:48.150 --> 00:00:50.670
Or there could be cases where you.

15
00:00:50.700 --> 00:00:51.510
No pun intended.

16
00:00:51.720 --> 00:00:57.540
There could be cases where you are comparing text and you want to make sure that it matches.

17
00:00:57.780 --> 00:01:03.990
So, for example, they may enter some text and you want to compare that with some text that you're

18
00:01:03.990 --> 00:01:05.460
expecting from the code.

19
00:01:05.850 --> 00:01:12.240
In that case, oftentimes text won't match if the case of what they entered is not matching the case

20
00:01:12.240 --> 00:01:13.860
of what you were expecting.

21
00:01:14.100 --> 00:01:21.060
So you can force the enter text to be whatever case, you know, all lowercase or all uppercase doesn't

22
00:01:21.060 --> 00:01:24.540
matter so that you can compare it and make sure everything's going to be equal.

23
00:01:25.020 --> 00:01:26.750
So those are a couple of little examples.

24
00:01:26.790 --> 00:01:31.290
So without further ado, let's jump back into the code here.

25
00:01:31.320 --> 00:01:32.970
Same class as before.

26
00:01:33.240 --> 00:01:36.600
We're just going to use this class as our scratch pad, basically.

27
00:01:37.500 --> 00:01:37.900
All right.

28
00:01:37.920 --> 00:01:42.630
And so I think what we'll do is we'll just clear out the code that we had before.

29
00:01:44.530 --> 00:01:44.950
All right.

30
00:01:45.070 --> 00:01:47.260
So we've got a bit of a blank slate now.

31
00:01:49.670 --> 00:01:50.030
OK.

32
00:01:50.060 --> 00:01:51.770
And just as before.

33
00:01:51.800 --> 00:01:53.720
Let's just create a string.

34
00:01:54.140 --> 00:01:56.240
So I'm going to create a string variable.

35
00:01:56.630 --> 00:01:59.860
My text equals and I don't know.

36
00:01:59.870 --> 00:02:02.170
Let's set it to ABCD 50.

37
00:02:03.050 --> 00:02:04.400
Or you can set it to whatever you like.

38
00:02:04.400 --> 00:02:04.980
It doesn't.

39
00:02:04.980 --> 00:02:05.750
It doesn't matter.

40
00:02:05.930 --> 00:02:09.950
By the way, you may notice these little the little green squiggly lines here.

41
00:02:10.280 --> 00:02:17.060
The idea intelligence can tell us when something is misspelled, and that's basically what it's doing

42
00:02:17.060 --> 00:02:17.400
here.

43
00:02:17.420 --> 00:02:18.860
It doesn't know that word.

44
00:02:19.100 --> 00:02:25.910
So if I hover my cursor over it, it's offering to let me replace it with a guess for what that word

45
00:02:25.910 --> 00:02:26.360
might be.

46
00:02:26.390 --> 00:02:30.440
Obviously, in this case, I want to just ignore that because I meant for it to be ABC.

47
00:02:30.440 --> 00:02:31.010
The Left.

48
00:02:31.730 --> 00:02:32.270
All right.

49
00:02:33.050 --> 00:02:36.500
So and then let's let's output this text.

50
00:02:36.500 --> 00:02:44.840
So we'll do our trusty ASO macro to generate a system out that print line and then we'll pass in the

51
00:02:44.840 --> 00:02:45.620
variable notice.

52
00:02:45.620 --> 00:02:47.660
Again, I'm only typing the first two letters.

53
00:02:47.660 --> 00:02:51.560
In fact, I really could have just type just the name, and that would have done it too.

54
00:02:52.070 --> 00:02:52.520
All right.

55
00:02:52.790 --> 00:02:56.480
OK, so obviously that's just going to print ABCD all lowercase.

56
00:02:56.780 --> 00:03:00.590
So the first method we'll learn about, and there's not that many.

57
00:03:00.770 --> 00:03:07.070
If we just put a period here, we have a method called two uppercase.

58
00:03:07.310 --> 00:03:09.260
Now there's a few variations of it.

59
00:03:09.280 --> 00:03:14.660
In fact, I'm going to narrow this down a little bit by just typing u p p OK, because i only want to

60
00:03:14.660 --> 00:03:18.600
see all of the forms of the two uppercase method now.

61
00:03:18.770 --> 00:03:22.220
So there's this one here that's showing up with low cal dot root.

62
00:03:22.430 --> 00:03:26.780
There's another one that takes an input of a low cal, and then there's one that takes no input.

63
00:03:26.990 --> 00:03:31.580
Let's start with the one that takes no input, because that's the one pretty much everyone's going to

64
00:03:31.580 --> 00:03:38.420
be using, especially if you live in an English speaking country or you work your coding in an English

65
00:03:38.420 --> 00:03:40.400
speaking country for English speakers.

66
00:03:41.720 --> 00:03:42.110
All right.

67
00:03:42.110 --> 00:03:46.280
So I'm selecting that and then we can run this.

68
00:03:48.120 --> 00:03:52.340
And we get ABC, TFG, all upper cased.

69
00:03:53.190 --> 00:03:53.710
All right.

70
00:03:53.790 --> 00:03:56.760
So that's pretty, pretty self-explanatory, I think.

71
00:03:57.150 --> 00:03:59.020
And then we can do the opposite of that.

72
00:03:59.050 --> 00:04:00.570
I'll make another string.

73
00:04:02.170 --> 00:04:03.850
My text, too.

74
00:04:04.330 --> 00:04:06.070
And this time, I'll do the opposite.

75
00:04:06.550 --> 00:04:10.000
So ABC, tft all uppercase.

76
00:04:11.860 --> 00:04:18.370
Then we'll do another system out print line, and we'll do my text to this time notice I just typed

77
00:04:18.370 --> 00:04:24.910
in M&amp;A to to narrow down which variable I wanted to enter here and then I'm going to hit return.

78
00:04:25.240 --> 00:04:27.820
And then that expands out to my text to.

79
00:04:28.870 --> 00:04:31.720
All right, now, this time I will do.

80
00:04:34.380 --> 00:04:40.740
So I did a period and then an ELO W to narrow down all of the methods that have L o w and then then

81
00:04:40.740 --> 00:04:44.730
now I see the three very variations of the two lowercase method.

82
00:04:44.880 --> 00:04:47.850
And again, I'm going to pick the one that takes no inputs.

83
00:04:48.060 --> 00:04:49.230
This last one here.

84
00:04:50.180 --> 00:04:51.830
And we'll run that.

85
00:04:53.300 --> 00:04:55.010
And now we should get two outputs.

86
00:04:59.280 --> 00:04:59.670
All right.

87
00:04:59.970 --> 00:05:02.430
Very good, so the first output is our capital.

88
00:05:02.760 --> 00:05:05.790
And that's because we did the two uppercase here.

89
00:05:06.030 --> 00:05:13.020
And then the second output is all lowercase because we took the uppercase things and then made it lowercase.

90
00:05:13.020 --> 00:05:15.180
So that's pretty, pretty straightforward.

91
00:05:16.100 --> 00:05:21.320
Now, the only other thing I want to mention here is those other variations and what they are for.

92
00:05:21.650 --> 00:05:27.770
And so let's see here if I put my cursor right after that period there and then I do a control space

93
00:05:27.770 --> 00:05:33.080
on Mac or a can of control space on Windows and Linux as well.

94
00:05:33.500 --> 00:05:40.160
And then I can either kind of move my cursor in here so that to the 0W, so then I can see these other

95
00:05:40.160 --> 00:05:40.730
variations.

96
00:05:40.730 --> 00:05:41.350
So real quick.

97
00:05:41.360 --> 00:05:46.910
I'll just mention basically these other two variants of the two lowercase method.

98
00:05:47.360 --> 00:05:54.230
Those are for dealing with text in other locales of the world.

99
00:05:54.500 --> 00:06:01.130
So obviously, the text that I'm showing here is Latin text, but there are places in the world, of

100
00:06:01.130 --> 00:06:08.930
course, where Latin text isn't used, or especially this standard western Latin alphabet isn't used.

101
00:06:09.230 --> 00:06:14.690
There are cases where even in countries where Latin text is used, where but where they use various

102
00:06:14.690 --> 00:06:22.400
diacritics and accents and things like Germany and France and stuff Scandinavia, they have upper and

103
00:06:22.400 --> 00:06:23.610
lower case as well.

104
00:06:23.630 --> 00:06:28.460
But there's a difference between, for example, hold on a minute here.

105
00:06:29.590 --> 00:06:31.540
There's a difference between.

106
00:06:33.350 --> 00:06:38.690
This lowercase o and this uppercase O and.

107
00:06:39.860 --> 00:06:40.840
That oh.

108
00:06:42.170 --> 00:06:42.440
Oops!

109
00:06:43.760 --> 00:06:45.920
And that oh, right.

110
00:06:46.040 --> 00:06:48.070
These are four different oaths.

111
00:06:49.510 --> 00:06:58.090
And particularly, there's a difference between this capital, O and that capital O without going into

112
00:06:58.090 --> 00:07:00.190
too much detail, right this moment.

113
00:07:00.220 --> 00:07:10.450
I will just state that in computing, every single letter or character that can be displayed has a code

114
00:07:10.480 --> 00:07:11.890
associated with it.

115
00:07:12.040 --> 00:07:19.510
And there are actually several different in coatings or standards for assigning a code to a character.

116
00:07:19.630 --> 00:07:23.950
I'm not going to use the word letter anymore because there are some writing systems that don't technically

117
00:07:23.950 --> 00:07:26.620
use letters, but they do use characters.

118
00:07:26.950 --> 00:07:35.380
So every character that a computer can represent has a code depending on which code scheme you're using.

119
00:07:35.650 --> 00:07:44.410
One of the most popular character code schemes is called Unicode, and Java has full support for Unicode.

120
00:07:44.710 --> 00:07:52.060
And in the Unicode Standard, there is a notion of lowercase and uppercase for languages that have that

121
00:07:52.060 --> 00:07:52.560
notion.

122
00:07:52.570 --> 00:07:56.020
There are a lot of languages that don't even have a notion of lower and upper case.

123
00:07:56.020 --> 00:08:04.900
But for languages that do have that notion, the characters for a lowercase o like this one here versus

124
00:08:04.900 --> 00:08:05.680
an uppercase.

125
00:08:05.680 --> 00:08:12.430
So like this one here, those are two different characters, but also the code for this uppercase Oh,

126
00:08:12.760 --> 00:08:16.480
and this one with the two, I guess those would be diacritics.

127
00:08:16.630 --> 00:08:21.580
I don't know if that's an umlaut or whatever, but those would have two different codes as well because

128
00:08:21.580 --> 00:08:24.310
there are two different characters and they display differently.

129
00:08:24.550 --> 00:08:33.730
And so depending on what characters we're talking about when we ask Java to upper or lower case those

130
00:08:33.730 --> 00:08:43.180
characters, it has to know that, OK, if we're uppercase seeing this, oh, that should become this

131
00:08:43.180 --> 00:08:46.990
one here rather than this oh, becoming.

132
00:08:48.060 --> 00:08:49.470
This one here, right?

133
00:08:49.710 --> 00:08:51.330
Those are not the same thing.

134
00:08:51.750 --> 00:09:03.870
And so what we're able to do is we're able to tell Java or rather we're able to tell these methods what

135
00:09:03.870 --> 00:09:09.840
locale meaning basically what part of the world are we dealing with so that it can make sure that it

136
00:09:09.840 --> 00:09:15.240
is upper and lower casing, according to the rules of that part of the world, essentially.

137
00:09:15.330 --> 00:09:21.030
Now I'm saying world, but really, this gets into regions and dialects and things that honestly are

138
00:09:21.120 --> 00:09:23.310
well beyond the scope of this course.

139
00:09:23.310 --> 00:09:30.540
And I can also tell you that though as a professional developer who has some language experience, the

140
00:09:30.540 --> 00:09:35.220
vast majority of people won't usually need to get into these kinds of distinctions.

141
00:09:35.220 --> 00:09:42.030
So I will leave it for the viewer to have extra homework if you really want to dig in more on how to

142
00:09:42.030 --> 00:09:43.740
utilize these locales.

143
00:09:43.740 --> 00:09:50.700
But for the vast majority, you'll probably be just fine using just the versions of these methods that

144
00:09:50.700 --> 00:09:57.540
don't take any inputs, and that's going to cover it for upper and lower case, and we'll move on to

145
00:09:57.540 --> 00:09:58.530
the next topic.
