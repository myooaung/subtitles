1
00:00:00,480 --> 00:00:01,410
Hey, welcome back.

2
00:00:01,740 --> 00:00:08,250
So we've implemented a fair amount of database functionality so far in our people repository class.

3
00:00:08,850 --> 00:00:16,070
But what if we wanted to implement additional repositories for other types of concepts besides people,

4
00:00:16,080 --> 00:00:16,440
right?

5
00:00:16,830 --> 00:00:24,090
We'd essentially end up having to replicate a fair amount of the code that we have here in the people

6
00:00:24,090 --> 00:00:25,530
repository class.

7
00:00:26,190 --> 00:00:35,190
So I was thinking it sure would be nice if we could reuse a lot of the boilerplate style code that exists

8
00:00:35,190 --> 00:00:44,790
in this repository class to implement additional repositories more easily and also to cut down on some

9
00:00:44,790 --> 00:00:51,810
of the visual noise that I see here in this class, especially with the use of the try catch blocks

10
00:00:51,810 --> 00:00:55,440
here, which we have in every single crud method here.

11
00:00:55,980 --> 00:01:04,980
So in this lesson, I want us to do a little experiment to see if it's possible for us to reduce that

12
00:01:05,160 --> 00:01:12,270
boilerplate code and end up with something that we can reuse so that we can make additional repositories

13
00:01:12,270 --> 00:01:14,400
a bit more easily than this.

14
00:01:14,610 --> 00:01:15,930
So here's what I have in mind.

15
00:01:16,110 --> 00:01:23,970
Let's start by just trying to re implement the save method in some kind of more reusable fashion.

16
00:01:24,300 --> 00:01:31,800
And the way I'm envisioning this is that it would end up being another class that our repositories could

17
00:01:31,800 --> 00:01:34,680
extend and that class would kind of temple.

18
00:01:34,680 --> 00:01:39,270
It ties most of the boilerplate style code that we have here.

19
00:01:39,390 --> 00:01:46,260
And then classes like this people repository would simply extend this super class that takes care of

20
00:01:46,260 --> 00:01:47,250
all that boilerplate.

21
00:01:47,280 --> 00:01:47,670
OK.

22
00:01:48,270 --> 00:01:53,310
So this would give us an opportunity also to revisit some of the other things that we've learned about

23
00:01:53,310 --> 00:01:55,140
object orientation as well.

24
00:01:55,170 --> 00:01:58,170
OK, so let's jump in here and see what we can do.

25
00:01:58,560 --> 00:01:58,860
All right.

26
00:01:58,870 --> 00:02:02,090
So let's focus on this save method first.

27
00:02:02,100 --> 00:02:07,710
And what I kind of have in mind, first and foremost, is maybe just let's just copy this whole entire

28
00:02:07,710 --> 00:02:11,130
method and then let's go create a new class.

29
00:02:11,520 --> 00:02:18,540
And really, I think we can kind of do this in almost a 2D style where we'll just pretend like the class

30
00:02:18,540 --> 00:02:21,270
exists and then let the ADP create it for us.

31
00:02:21,300 --> 00:02:24,330
OK, so let's pretend like this, people.

32
00:02:24,570 --> 00:02:31,470
Well, I guess we're not going to pretend let's have this people repository class extend a new class.

33
00:02:31,470 --> 00:02:32,370
And I don't know.

34
00:02:32,370 --> 00:02:36,110
I think I'm going to call it crud repository.

35
00:02:36,120 --> 00:02:39,720
We might have already made one of these once, but in a different way.

36
00:02:39,730 --> 00:02:40,890
Maybe so.

37
00:02:40,900 --> 00:02:45,120
OK, so we've got a create repository, or at least we will have one.

38
00:02:45,750 --> 00:02:49,230
And let's just let the ADP create that for us.

39
00:02:49,440 --> 00:02:53,780
And yeah, I think all of those settings are fine.

40
00:02:53,790 --> 00:02:55,260
So I'm just going to click, OK.

41
00:02:55,440 --> 00:02:55,710
All right.

42
00:02:55,720 --> 00:02:57,900
So here's our Creed repository.

43
00:02:58,200 --> 00:02:58,560
OK.

44
00:02:59,340 --> 00:03:05,460
So I'm going to make a couple of new lines here, and then I'm just going to paste that save method

45
00:03:05,790 --> 00:03:08,970
verbatim right here, just as a starting point.

46
00:03:09,030 --> 00:03:09,450
OK.

47
00:03:09,930 --> 00:03:10,280
All right.

48
00:03:10,290 --> 00:03:20,190
So now I want to see what parts of this method are the parts that would be unique to a class that might

49
00:03:20,190 --> 00:03:21,180
extend this?

50
00:03:21,300 --> 00:03:24,260
And what parts would be kind of boilerplate, right?

51
00:03:24,270 --> 00:03:30,120
You know, like the stuff that would be the same any time you had to create a repository class?

52
00:03:30,240 --> 00:03:30,570
Right?

53
00:03:31,380 --> 00:03:36,540
So the first thing I'm taking note of is the fact that obviously, since I copied and pasted this in

54
00:03:36,540 --> 00:03:41,460
here, we've got it hardcoded for a specific data type, which is person.

55
00:03:41,820 --> 00:03:44,010
So we learned about generics, right?

56
00:03:44,250 --> 00:03:52,230
So we could look at making this repository class generic so that we don't have to explicitly refer to

57
00:03:52,230 --> 00:03:54,090
a particular data type, right?

58
00:03:54,390 --> 00:03:58,170
So let's just see what that might look like.

59
00:03:58,590 --> 00:04:03,420
So we can simply say that this takes something of type T, right?

60
00:04:04,080 --> 00:04:08,660
And then we can replace the word person with T everywhere.

61
00:04:13,930 --> 00:04:19,470
All right, so where else do we refer to capital person?

62
00:04:19,480 --> 00:04:20,470
I think that's it.

63
00:04:20,620 --> 00:04:24,850
Actually, those are the only two places that I see at the moment.

64
00:04:25,480 --> 00:04:27,910
OK, so let's go back.

65
00:04:28,980 --> 00:04:35,160
And now let's pass in a tight right, so it's going to be a person, right?

66
00:04:35,400 --> 00:04:36,420
Just like that.

67
00:04:36,870 --> 00:04:37,360
OK.

68
00:04:37,470 --> 00:04:42,240
And then let's jump back in here again and I will clean up my imports now.

69
00:04:42,870 --> 00:04:47,940
OK, so next, I'm kind of analyzing what's going on in here.

70
00:04:48,000 --> 00:04:55,950
OK, so the first bit is this first line here, and that actually fills mostly like boilerplate to me,

71
00:04:55,980 --> 00:05:01,800
with the exception of the fact that we've got this sequel constant that that we're using here.

72
00:05:02,520 --> 00:05:06,600
So next, let's see what other red marks can we get rid of.

73
00:05:06,900 --> 00:05:09,140
So we've got this connection here.

74
00:05:09,160 --> 00:05:10,280
That's an easy one.

75
00:05:10,290 --> 00:05:16,920
I think we can go ahead and just redefine a connection, I think.

76
00:05:17,490 --> 00:05:18,590
In fact, let's see here.

77
00:05:18,600 --> 00:05:20,370
Let's make that protected.

78
00:05:21,700 --> 00:05:29,500
Connection connect, what's connection like, so and we will import that.

79
00:05:32,700 --> 00:05:39,480
All right now, to get that connection into here, we're probably going to just need a constructor just

80
00:05:39,480 --> 00:05:44,130
like we did before, so I'm just going to do a command in and generate that constructor.

81
00:05:44,940 --> 00:05:45,360
All right.

82
00:05:45,870 --> 00:05:48,480
So there's a little bit of red gone now.

83
00:05:48,480 --> 00:05:52,140
The next bit of red that we've got here is this sequel.

84
00:05:52,260 --> 00:05:57,810
Now this is currently a constant that we define in the subclass, but maybe we want to try to figure

85
00:05:57,810 --> 00:06:01,530
out a way to get this sequel string into here.

86
00:06:01,770 --> 00:06:07,740
And honestly, if we could just get our hands on this sequel right here, the rest of this line could

87
00:06:07,740 --> 00:06:08,970
really be reused.

88
00:06:09,240 --> 00:06:14,220
So I want to show you a trick that we can use to get around this kind of issue.

89
00:06:14,370 --> 00:06:22,230
What we can do is actually just replace this with a call to a method, and I'll show you what I mean

90
00:06:22,230 --> 00:06:22,590
here.

91
00:06:22,800 --> 00:06:27,540
Let's see what this would look like if we did something like get save.

92
00:06:28,510 --> 00:06:29,230
Sequel.

93
00:06:30,130 --> 00:06:30,580
OK.

94
00:06:30,850 --> 00:06:36,220
And then I'll put my cursor right there and let the idea generate this method for us.

95
00:06:37,770 --> 00:06:38,550
Like so.

96
00:06:40,410 --> 00:06:42,150
Now, here's the thing.

97
00:06:42,390 --> 00:06:49,500
What I'm thinking is our subclass, which is now the person repository class, I would like to have

98
00:06:49,500 --> 00:06:56,970
our subclass be kind of like forced to implement this method so that it will return whatever sequel

99
00:06:56,970 --> 00:06:59,460
we want this to, you know, return.

100
00:06:59,760 --> 00:07:01,650
But I want it to be forced to do it.

101
00:07:01,920 --> 00:07:08,910
Can you remember a way that we can define a method like this one on a super class and then force its

102
00:07:08,910 --> 00:07:14,580
subclasses to have to implement this method or any other method that we want?

103
00:07:14,790 --> 00:07:16,230
Can you think of a way to do that?

104
00:07:16,230 --> 00:07:17,070
We've learned this.

105
00:07:18,000 --> 00:07:23,760
OK, so a way that we could do that would be to make this method abstract.

106
00:07:24,150 --> 00:07:32,790
So when you have an abstract method defined on a class, it means that subclasses of that class must

107
00:07:32,790 --> 00:07:38,820
implement that method and that you're not going to implement it on the defining class, in fact, OK.

108
00:07:39,150 --> 00:07:40,220
So we could do that.

109
00:07:40,230 --> 00:07:46,950
However, if we want this method to be abstract, then the entire class actually has to be abstract.

110
00:07:47,430 --> 00:07:48,990
So let's see what that would look like.

111
00:07:49,200 --> 00:07:56,170
So I'm just going to replace the public here with abstract, with the abstract keyword.

112
00:07:56,550 --> 00:08:01,620
And then if we come down here and replace private with abstract.

113
00:08:01,800 --> 00:08:06,810
And then we when it's abstract, you don't need curly braces because you can't implement anything.

114
00:08:06,810 --> 00:08:10,650
So I'm just going to select all of that and do this, OK?

115
00:08:10,680 --> 00:08:21,090
And so now we will be able to let this save method get its hands on the sequel that is needed by calling

116
00:08:21,090 --> 00:08:24,770
the get saved school method of a subclass.

117
00:08:24,780 --> 00:08:25,110
OK?

118
00:08:25,200 --> 00:08:31,230
And so now let's jump back over to the people repository and see what that might look like.

119
00:08:32,590 --> 00:08:34,510
Are person people repository.

120
00:08:35,290 --> 00:08:39,400
All right, so now we've got some errors, and that's because of a couple of things, we're going to

121
00:08:39,400 --> 00:08:41,950
need to implement that abstract method now.

122
00:08:42,250 --> 00:08:51,370
So let me put my cursor here and do a control o for override so that I can override this get saved sequel

123
00:08:51,370 --> 00:08:52,600
method right there.

124
00:08:53,170 --> 00:08:53,560
All right.

125
00:08:53,710 --> 00:08:59,470
And so now what I'm going to do is simply return this constant right here.

126
00:09:01,710 --> 00:09:06,750
OK, so return that, and so the red error that was up here went away.

127
00:09:06,930 --> 00:09:11,880
Now we've got a red area here, and if I hover over that, that's complaining about the fact that because

128
00:09:11,880 --> 00:09:18,780
now this people repository is extending the credit repository, I need to have this constructor call

129
00:09:18,960 --> 00:09:21,120
the superclass constructor.

130
00:09:21,150 --> 00:09:24,660
OK, so I'm going to go ahead and do that so we can call super.

131
00:09:26,010 --> 00:09:27,900
And then pass in our connection.

132
00:09:28,200 --> 00:09:31,740
And now this line here is not needed.

133
00:09:32,070 --> 00:09:40,530
And in fact, this connection here is not needed because this people repository is now inheriting a

134
00:09:40,530 --> 00:09:42,990
connection from here, right?

135
00:09:42,990 --> 00:09:44,460
That protected connection.

136
00:09:44,520 --> 00:09:44,970
OK.

137
00:09:46,210 --> 00:09:47,520
So it's got one, in fact.

138
00:09:48,520 --> 00:09:52,660
Maybe I'll go and just get rid of that and I will get rid of that too.

139
00:09:53,140 --> 00:09:53,520
All right.

140
00:09:53,530 --> 00:10:01,690
So let's jump back over here now these lines here where we are binding the fields from our person to

141
00:10:01,690 --> 00:10:05,200
the prepared statement so that it can be executed.

142
00:10:05,410 --> 00:10:11,260
These parts, I think, would definitely need to be different from one implementation to another.

143
00:10:11,560 --> 00:10:11,920
Right.

144
00:10:12,130 --> 00:10:17,590
And so I'm thinking at at the very least, these lines here also can be template ties.

145
00:10:17,830 --> 00:10:20,540
OK, so here's what I think we can do.

146
00:10:20,560 --> 00:10:26,490
Let's we've we've got these lines selected already and I'm thinking, let's extract the method out.

147
00:10:26,600 --> 00:10:33,130
I'm going to do an option, command em or control alt them for Windows and Linux, and that'll extract

148
00:10:33,130 --> 00:10:33,700
out a method.

149
00:10:33,700 --> 00:10:35,740
And now I need to name this method something.

150
00:10:35,740 --> 00:10:40,660
And maybe let's try naming it something like map for save.

151
00:10:42,180 --> 00:10:43,560
Let's see how that a look.

152
00:10:44,160 --> 00:10:44,460
OK.

153
00:10:44,490 --> 00:10:45,330
Map for safe.

154
00:10:45,480 --> 00:10:50,410
And so the I.D. decided to make the inputs for this new method.

155
00:10:50,700 --> 00:10:56,880
The person and then the prepared statement, and that seems possibly reasonable to me.

156
00:10:57,030 --> 00:11:03,240
Now let's make the name of this variable a little more generic, though, since this will be reusable,

157
00:11:03,240 --> 00:11:06,430
it's not going to just be hard coded for for saving people anymore.

158
00:11:06,450 --> 00:11:09,660
Okay, so I'm putting my cursor there and I'm going to do a shift of six.

159
00:11:09,990 --> 00:11:12,290
And let's just call it entity.

160
00:11:12,300 --> 00:11:14,160
And I mentioned this before.

161
00:11:14,350 --> 00:11:19,970
Anytime you have a class that is designed to work with a database to be saved and retrieved from it

162
00:11:19,980 --> 00:11:26,160
to and from a database, the generic term for that type of class or at least for those types of objects

163
00:11:26,160 --> 00:11:28,000
of that class, is entity.

164
00:11:28,020 --> 00:11:28,440
OK.

165
00:11:28,620 --> 00:11:30,540
So that word entity actually has meaning.

166
00:11:30,660 --> 00:11:33,330
It just means an object that works with databases.

167
00:11:33,330 --> 00:11:35,340
Essentially, someone hit enter.

168
00:11:35,580 --> 00:11:37,410
OK, so now we've renamed that.

169
00:11:37,980 --> 00:11:43,260
And so now I think we will just make this abstract also.

170
00:11:43,290 --> 00:11:52,080
So again, I will replace the word private with abstract, and then I will leave in the throws circle

171
00:11:52,080 --> 00:11:52,530
exception.

172
00:11:52,530 --> 00:11:57,630
But I will get rid of everything else and replace all that.

173
00:11:57,630 --> 00:11:57,920
Oops.

174
00:11:57,990 --> 00:11:58,920
Got too much.

175
00:11:59,010 --> 00:11:59,520
I think.

176
00:12:02,200 --> 00:12:06,790
But I will replace everything else with a semicolon just like that.

177
00:12:09,980 --> 00:12:15,110
So there's that and then the rest of this, I think, is boilerplate.

178
00:12:15,500 --> 00:12:21,620
You'll execute it, you'll get back the rose affected, you can get the generated keys.

179
00:12:22,040 --> 00:12:29,390
Now the next thing that we do that's in error, though, is that we get that idea and then we set it

180
00:12:29,390 --> 00:12:34,430
back on the person, which is soon to be just renamed, I guess, entity.

181
00:12:34,430 --> 00:12:36,890
In fact, let's go ahead and rename that up here as well.

182
00:12:37,100 --> 00:12:43,340
I'm going to put my cursor on the word person and then do another shift f six and rename that entity.

183
00:12:43,520 --> 00:12:48,260
And I think it's just asking me, Do I want to do that everywhere?

184
00:12:48,500 --> 00:12:49,010
Let's click.

185
00:12:49,010 --> 00:12:50,360
OK, here we go.

186
00:12:50,420 --> 00:12:50,840
OK.

187
00:12:51,170 --> 00:12:51,470
All right.

188
00:12:51,470 --> 00:12:56,120
So the only other thing we need to do now is to fix this bit here, said it.

189
00:12:56,240 --> 00:13:00,800
And the reason that's red is because we've generic sized this entity now.

190
00:13:01,070 --> 00:13:08,450
And therefore, the Aideed has no idea if there is a set ID method on a class of type T.

191
00:13:08,480 --> 00:13:08,840
Right?

192
00:13:09,590 --> 00:13:16,730
So one way that we could fix that and we've done a little version of this, I don't remember when maybe

193
00:13:16,730 --> 00:13:25,310
back in their collections, maybe when we created our poor man's repository the first time we briefly

194
00:13:25,310 --> 00:13:27,440
introduced an interface.

195
00:13:27,830 --> 00:13:34,670
And I think we called it something like Idea Bill, and I'm kind of thinking we could do something along

196
00:13:34,670 --> 00:13:43,340
those lines again so that basically any entity needs to be able to have and have a getter and a setter

197
00:13:43,460 --> 00:13:44,510
for its IDE.

198
00:13:45,320 --> 00:13:48,040
So let's let's see what that might look like.

199
00:13:48,050 --> 00:13:49,900
If you're not following me, that's OK.

200
00:13:49,910 --> 00:13:51,410
I think you will in just a moment here.

201
00:13:51,410 --> 00:13:55,520
So let's go to the person class person.

202
00:13:55,790 --> 00:13:57,920
OK, here's the person class.

203
00:13:58,430 --> 00:14:07,010
So let's see what would happen if we made the person class implement and entity interface instead of

204
00:14:07,010 --> 00:14:07,510
idea.

205
00:14:07,520 --> 00:14:12,260
Well, let's let's let's see what it looks like if we introduce an interface called entity.

206
00:14:13,220 --> 00:14:14,180
Let's see what this will be.

207
00:14:14,330 --> 00:14:18,110
So implements entity.

208
00:14:21,530 --> 00:14:21,890
All right.

209
00:14:21,920 --> 00:14:31,130
So it's red, and now if we do an option return, let's create an interface, or let's let the ABC create

210
00:14:31,130 --> 00:14:33,290
this interface called entity.

211
00:14:34,430 --> 00:14:38,330
And we will allow it to be in the model package for now.

212
00:14:40,690 --> 00:14:41,110
OK.

213
00:14:41,410 --> 00:14:42,370
So there's that.

214
00:14:42,520 --> 00:14:44,440
Now if we jump back over here.

215
00:14:45,870 --> 00:14:50,430
Let's go find the getter and setter methods here.

216
00:14:50,640 --> 00:14:58,140
And what I'm thinking is maybe we can have the I.D. do a little refactoring for us.

217
00:14:58,290 --> 00:14:58,950
Yeah, here we go.

218
00:14:58,950 --> 00:15:00,050
Pull members up.

219
00:15:00,060 --> 00:15:01,480
So I just came in here, too.

220
00:15:01,500 --> 00:15:03,090
So here, let me do that again.

221
00:15:03,330 --> 00:15:06,870
So with my cursor on the Get ID method here, I probably could be anywhere.

222
00:15:06,870 --> 00:15:16,050
Actually, I'm going to right click on empty space, go down to refactor and then I'm going to go to

223
00:15:16,050 --> 00:15:17,790
this pull members up.

224
00:15:18,330 --> 00:15:23,350
Now, when you click on that, so we may have done this before, I don't recall, but the idea of pull

225
00:15:23,460 --> 00:15:32,010
pulling numbers up just means that if a class has a super class or in this case, an interface, you

226
00:15:32,010 --> 00:15:37,950
may want to take some of the methods or fields of that class, which are the members of the class,

227
00:15:38,250 --> 00:15:46,530
and pull them up into either the super class or, in this case, the interface in the case of the super.

228
00:15:47,070 --> 00:15:53,190
The idea is basically going to just cut those members that you select and again, members are fields

229
00:15:53,400 --> 00:15:55,140
and or methods.

230
00:15:55,500 --> 00:16:01,320
It's going to cut them out of the subclass and then paste them back up into the super class.

231
00:16:01,320 --> 00:16:06,870
And sometimes it will change the visibility as needed to be at least protected or something like that.

232
00:16:07,470 --> 00:16:14,640
In the case of an interface that you're pulling things up into, it will basically just copy the signature

233
00:16:14,640 --> 00:16:18,670
of methods and then paste them into the interface.

234
00:16:18,700 --> 00:16:20,550
OK, so let's let's try this out.

235
00:16:20,560 --> 00:16:26,190
So we're going to grab the Get ID and the Set ID methods here, and that's all I want.

236
00:16:26,520 --> 00:16:31,290
And then let me make that a little more visible, OK, and then I'm going to click refactor.

237
00:16:32,010 --> 00:16:32,370
All right.

238
00:16:32,370 --> 00:16:39,120
So let's see what just happened now because you don't really see any change here, and I wouldn't expect

239
00:16:39,120 --> 00:16:42,030
to other than the fact that these are now labeled override.

240
00:16:42,480 --> 00:16:42,840
OK.

241
00:16:43,200 --> 00:16:46,620
So let's jump over here into the entity interface.

242
00:16:46,620 --> 00:16:47,190
And there we go.

243
00:16:47,200 --> 00:16:52,230
So now we see that there's a Get ID and a Set ID defined on the interface.

244
00:16:52,260 --> 00:16:52,620
OK.

245
00:16:53,280 --> 00:16:55,970
So in and of itself, that didn't really do anything yet.

246
00:16:56,010 --> 00:17:03,460
But now let's jump over into this crud repository, and now we can do something kind of cool.

247
00:17:03,480 --> 00:17:12,810
I think we can redefine this generic key to not just be any random class in the world, but instead

248
00:17:12,810 --> 00:17:20,820
we can define it as being a class that extends the entity interface.

249
00:17:20,850 --> 00:17:21,360
OK.

250
00:17:21,480 --> 00:17:28,280
So I'm going to select the entity interface that I just created under neutrino, right?

251
00:17:28,290 --> 00:17:30,360
This one, not these other things.

252
00:17:30,600 --> 00:17:30,930
Right?

253
00:17:30,930 --> 00:17:32,010
And then hit enter.

254
00:17:32,160 --> 00:17:33,840
And now look what just happened.

255
00:17:33,990 --> 00:17:36,960
Like, instantly this set ID thing here.

256
00:17:37,030 --> 00:17:45,510
The red marks there went away because now the system at least knows that entity is something that extends

257
00:17:45,510 --> 00:17:51,900
or really implements the entity interface, and therefore it has a set ID method on it.

258
00:17:52,050 --> 00:17:56,340
OK, so now we've just satisfied that error that was that was previously there.

259
00:17:56,790 --> 00:17:57,120
All right.

260
00:17:57,130 --> 00:18:06,750
So now let's jump back over to our person repository and see what we need to do for that map for save

261
00:18:06,750 --> 00:18:07,230
method.

262
00:18:07,260 --> 00:18:07,640
OK.

263
00:18:08,160 --> 00:18:09,450
So we'll jump back over.

264
00:18:09,450 --> 00:18:10,640
By the way, I'm doing a command.

265
00:18:10,650 --> 00:18:18,270
Oh, and then I'm going to type in person repository.

266
00:18:18,360 --> 00:18:18,750
Oops!

267
00:18:19,170 --> 00:18:21,450
And then person repository.

268
00:18:21,780 --> 00:18:22,320
There we go.

269
00:18:23,040 --> 00:18:23,730
OK.

270
00:18:23,760 --> 00:18:29,970
So now I've got red squiggles here because I need to implement that additional method now.

271
00:18:30,300 --> 00:18:34,890
So I'm going to put my cursor, I guess, right under this Get Saved sequel there.

272
00:18:35,580 --> 00:18:36,930
Make a couple of lines.

273
00:18:37,170 --> 00:18:41,190
Do a control o choose map for Save.

274
00:18:41,880 --> 00:18:43,080
Click OK.

275
00:18:43,830 --> 00:18:53,280
And now what I think I should be able to do, hopefully, is just grab these lines here.

276
00:18:53,310 --> 00:18:59,430
Just those three copy them and then paste them right there.

277
00:19:00,630 --> 00:19:09,090
And now I think maybe, just maybe, possibly we don't need this save method anymore.

278
00:19:09,180 --> 00:19:11,910
So I'm going to comment it out for right now.

279
00:19:12,600 --> 00:19:13,050
OK.

280
00:19:13,530 --> 00:19:20,160
So wouldn't that be awesome if this is all it takes now to implement a save method, just to have a

281
00:19:20,160 --> 00:19:24,990
method that generates the sequel and then a method that does the mapping essentially?

282
00:19:25,440 --> 00:19:26,880
So we don't have to wonder.

283
00:19:27,060 --> 00:19:32,490
We've got a whole suite of tests that we can actually go rerun right now and see if this will actually

284
00:19:32,490 --> 00:19:33,030
work.

285
00:19:33,420 --> 00:19:36,600
I don't see any errors here whatsoever.

286
00:19:36,720 --> 00:19:40,170
Let me just jump back over to the crud repository real quick.

287
00:19:40,170 --> 00:19:43,440
And yeah, I don't see any errors here either.

288
00:19:43,740 --> 00:19:44,820
So.

289
00:19:45,740 --> 00:19:53,630
I think we are ready to go, try running our tests and see if we have inherited a working save method

290
00:19:53,630 --> 00:19:54,020
now.

291
00:19:55,270 --> 00:20:02,110
So jumping back over to the people repository tests, and I'm just going to rerun all the tests and

292
00:20:02,110 --> 00:20:03,400
see what happens.

293
00:20:05,750 --> 00:20:07,700
Oh, wow, look at that.

294
00:20:08,510 --> 00:20:10,310
Everything is still working.

295
00:20:10,550 --> 00:20:12,710
I think that's pretty cool, right?

296
00:20:13,800 --> 00:20:17,010
OK, so let's jump back over to the repo now.

297
00:20:17,310 --> 00:20:19,680
So that's pretty nice, I think.

298
00:20:19,980 --> 00:20:20,340
Right.

299
00:20:20,580 --> 00:20:23,880
This is all we need now in order to save a person.

300
00:20:24,180 --> 00:20:32,580
And this gets us a step closer to having a reusable, generic, literally generic crud repository class

301
00:20:33,060 --> 00:20:38,040
that will allow us to more quickly create additional repositories, hopefully.

302
00:20:38,190 --> 00:20:44,850
OK, so now that that all seems to be working, I'm going to get rid of all of that.

303
00:20:46,070 --> 00:20:46,910
There we go.

304
00:20:47,930 --> 00:20:54,710
And that, my friends, is one way that we can do some nice refactoring to cut down on boilerplate code.

305
00:20:55,460 --> 00:21:02,660
So in the next lesson, let's just go hit another one of these methods and do the same operations again

306
00:21:02,660 --> 00:21:07,910
and see if we can eventually get this entire class condensed down really nicely.

307
00:21:07,910 --> 00:21:12,620
And then we can go create another repository for another type of entity entirely.

308
00:21:12,830 --> 00:21:14,180
See you in the next one.
