1
00:00:00,090 --> 00:00:06,030
All right, so in this lesson, I want to switch gears a little bit and give you a bit of a mental model

2
00:00:06,030 --> 00:00:10,770
to help you understand how the Streams API is working.

3
00:00:10,920 --> 00:00:16,950
So we'll do a little bit of analysis on just this little bit of of a program here that we've got.

4
00:00:16,980 --> 00:00:17,400
OK.

5
00:00:17,730 --> 00:00:21,930
And we're going to I'm going to just, you know, kind of draw some doodles here.

6
00:00:22,260 --> 00:00:31,230
So we've got the people text variable here, which has all of these lines of, you know, all of these

7
00:00:31,230 --> 00:00:33,030
text lines here, right?

8
00:00:33,180 --> 00:00:37,320
So I'm going to depict those like this.

9
00:00:37,950 --> 00:00:41,760
Let's see here just a bunch of lines, right?

10
00:00:42,630 --> 00:00:49,470
So these are kind of like your whatever Flintstone, Fred.

11
00:00:51,420 --> 00:00:55,740
And then some date or whatever and then other stuff.

12
00:00:55,770 --> 00:00:58,200
OK, so we've got all of these lines here.

13
00:00:59,930 --> 00:01:00,410
All right.

14
00:01:01,040 --> 00:01:07,130
So the first thing that's happening here is that the people text the variable, which is which is a

15
00:01:07,130 --> 00:01:07,700
string.

16
00:01:08,000 --> 00:01:10,550
We're calling the lines method on it.

17
00:01:11,120 --> 00:01:12,800
So I'm going to depict that here.

18
00:01:12,800 --> 00:01:20,240
So let's kind of imagine that that that people, people text variable is kind of feeding itself into

19
00:01:20,450 --> 00:01:23,270
the lines method, if you will.

20
00:01:24,590 --> 00:01:26,870
So here's our lines method.

21
00:01:28,840 --> 00:01:33,160
And what we can kind of imagine.

22
00:01:35,010 --> 00:01:37,830
Is kind of coming out of this line's method.

23
00:01:38,070 --> 00:01:44,250
Now this is this is not to be taken literally OK, but this this is just a mental model that I'm kind

24
00:01:44,250 --> 00:01:46,830
of giving you for how you maybe can think about it.

25
00:01:46,830 --> 00:01:52,530
OK, so it's not necessarily exactly what's really happening inside the computer.

26
00:01:52,530 --> 00:01:54,120
It's just a way of thinking about it.

27
00:01:54,120 --> 00:01:54,450
OK?

28
00:01:54,780 --> 00:02:03,720
So this line's method here, you could kind of imagine that it is spitting out one line at a time from

29
00:02:03,960 --> 00:02:05,970
our text.

30
00:02:06,000 --> 00:02:07,770
Are people text variable here?

31
00:02:08,070 --> 00:02:13,890
And so what that might look like is one line of text write a string.

32
00:02:14,190 --> 00:02:24,300
So let's say it spits out Flintstone, Fred and a date.

33
00:02:25,260 --> 00:02:28,590
And then other stuff, right of the other fields.

34
00:02:29,730 --> 00:02:34,470
Close quote So this quotation marks just are there to imply that this is a string, right?

35
00:02:34,470 --> 00:02:35,730
It's a string of text.

36
00:02:35,760 --> 00:02:36,240
OK.

37
00:02:37,570 --> 00:02:41,950
So that's what's coming out of the lines method one at a time.

38
00:02:41,980 --> 00:02:42,370
OK.

39
00:02:42,400 --> 00:02:43,390
That's how you can think of it.

40
00:02:43,400 --> 00:02:45,370
It's actually it's not that at all.

41
00:02:45,370 --> 00:02:47,680
It's a stream of strings, right?

42
00:02:47,710 --> 00:02:48,910
We saw that earlier.

43
00:02:49,090 --> 00:02:51,370
But this is kind of how you can sort of think about it.

44
00:02:52,480 --> 00:02:52,880
All right.

45
00:02:52,900 --> 00:03:01,300
And then that that text is feeding into the map function.

46
00:03:03,450 --> 00:03:05,040
A map function.

47
00:03:05,200 --> 00:03:10,440
OK, now that map function is calling employee create employee.

48
00:03:10,740 --> 00:03:16,620
So I'm going to skip the employee bit and just and just kind of render the create employee bit.

49
00:03:16,620 --> 00:03:19,050
So let's see what that might kind of look like.

50
00:03:19,060 --> 00:03:26,280
So here's our create employee method.

51
00:03:26,910 --> 00:03:35,730
And now that's going to take as an input the text, the string that just came out of here.

52
00:03:35,970 --> 00:03:36,520
OK.

53
00:03:37,380 --> 00:03:38,010
So.

54
00:03:39,660 --> 00:03:44,310
You can imagine that's going to look like this, Flintstone.

55
00:03:46,040 --> 00:03:46,850
Fred.

56
00:03:48,690 --> 00:03:51,270
One, one, one or whatever.

57
00:03:51,780 --> 00:03:53,730
And then a bunch of text, right?

58
00:03:55,880 --> 00:04:00,560
OK, and then I'll draw that inside of a nice, pretty box.

59
00:04:02,920 --> 00:04:07,630
OK, now coming out of that map method.

60
00:04:09,330 --> 00:04:19,530
Will then be an actual object of type I employee, because the create employee method returns objects

61
00:04:19,530 --> 00:04:22,680
of type I employee, you can see it right there, create employee.

62
00:04:22,800 --> 00:04:27,100
The output of that is something of type I employee, which is an interface.

63
00:04:27,130 --> 00:04:37,380
OK, so the way I will depict that is by writing the name of this interface, I employee.

64
00:04:39,670 --> 00:04:45,250
And then I'm going to draw a picture of a person that's just how I'm doing it.

65
00:04:46,450 --> 00:04:51,300
This isn't like some standard documentation technique or anything.

66
00:04:51,310 --> 00:04:59,530
This is just me making up something to convey to you some concepts here, and I'll label this employee

67
00:04:59,530 --> 00:05:00,700
as Fred.

68
00:05:02,850 --> 00:05:03,870
Flintstone.

69
00:05:05,790 --> 00:05:14,250
And then I will enclose this person in a box and hold on a second here, I forgot to.

70
00:05:19,190 --> 00:05:23,240
Forget something kind of important, so let me move that down a bit.

71
00:05:25,290 --> 00:05:27,570
And forgot the era there.

72
00:05:27,750 --> 00:05:28,950
OK, so.

73
00:05:30,160 --> 00:05:33,070
The map function takes as an input.

74
00:05:36,080 --> 00:05:38,480
That's that one string at a time.

75
00:05:39,230 --> 00:05:43,160
Well, you can kind of imagine that it's taking one string at a time again.

76
00:05:43,340 --> 00:05:47,660
In reality, it's taking as input a stream.

77
00:05:47,690 --> 00:05:49,410
That's what it's actually taking.

78
00:05:49,430 --> 00:05:49,880
OK.

79
00:05:50,930 --> 00:06:00,260
But you can imagine for this case that essentially one line of text at a time is coming into this map

80
00:06:00,260 --> 00:06:00,860
function.

81
00:06:01,070 --> 00:06:07,040
The map function is then passing that text into the Create employee method.

82
00:06:07,730 --> 00:06:14,720
The Create employee method is in turn returning an object of Type I employee.

83
00:06:16,380 --> 00:06:16,830
Which is.

84
00:06:17,960 --> 00:06:20,990
Which is this guy here, right?

85
00:06:22,550 --> 00:06:31,520
And now we're ready to move on to the next step in our pipeline, which is the four each, so draw another

86
00:06:31,520 --> 00:06:34,580
arrow here and we'll scroll up a little or can't scroll anymore.

87
00:06:34,580 --> 00:06:35,390
OK, that's all right.

88
00:06:36,770 --> 00:06:42,380
So now we're at the four each for each.

89
00:06:44,220 --> 00:06:49,920
And the for each method is calling the print line system that out print line, and I will only depict

90
00:06:49,920 --> 00:06:51,330
the print line there.

91
00:06:51,660 --> 00:06:56,190
So again, I'll just do something like this print line.

92
00:06:57,440 --> 00:07:03,560
Now, as the input into that, actually, I want to draw this a little bigger as the input into the

93
00:07:03,560 --> 00:07:04,670
print line method.

94
00:07:05,150 --> 00:07:11,030
What you can kind of envision is that we're not passing in text because we're not we're passing in that

95
00:07:11,030 --> 00:07:19,460
entire I employee object, which I will depict here as this whole entire person inside of my parentheses,

96
00:07:19,460 --> 00:07:19,640
right?

97
00:07:19,640 --> 00:07:23,090
So these are the parentheses of the print line function or method, right?

98
00:07:24,860 --> 00:07:30,680
And then I will encapsulate the four each in its own box.

99
00:07:30,920 --> 00:07:39,110
Now the for each function here in our pipeline is a terminal operation, which means that it's kind

100
00:07:39,110 --> 00:07:39,980
of the end of the line.

101
00:07:39,980 --> 00:07:41,360
It's the end of the pipeline.

102
00:07:41,360 --> 00:07:45,380
So it will not have any output for itself.

103
00:07:45,470 --> 00:07:51,410
However, since we are calling, since it is calling the print line method, what we can do is kind

104
00:07:51,410 --> 00:07:54,260
of envision off to the side here.

105
00:07:55,070 --> 00:07:58,790
I'm going to draw an old style TV and I am not.

106
00:07:59,710 --> 00:08:06,520
And artist, as you may have already realized, many of you may be too young to even recognize that

107
00:08:06,520 --> 00:08:13,030
this little picture represents a TV at all because TV's don't have antenna anymore, but whatever.

108
00:08:13,420 --> 00:08:18,730
And and so what's going to basically happen here is.

109
00:08:20,740 --> 00:08:29,080
We can kind of imagine that this this print line call is going to result in one line of text being drawn

110
00:08:29,080 --> 00:08:33,610
here, and I don't know, I'll make this super small for a minute and then we'll just do our.

111
00:08:35,470 --> 00:08:37,270
Flintstone.

112
00:08:40,220 --> 00:08:41,120
Fred.

113
00:08:42,580 --> 00:08:44,290
One one one.

114
00:08:45,130 --> 00:08:46,270
Blah blah blah.

115
00:08:46,420 --> 00:08:46,870
Right.

116
00:08:47,230 --> 00:08:53,890
In fact, I guess I could put that in in quotes, so you get the picture right.

117
00:08:54,520 --> 00:08:58,360
And then here's more lines that will eventually be rendered.

118
00:08:58,720 --> 00:08:59,050
All right.

119
00:08:59,050 --> 00:09:04,600
So that's one iteration of this pipeline.

120
00:09:05,440 --> 00:09:14,350
Now what's going to kind of happen here is you can imagine that each of these lines appear.

121
00:09:18,570 --> 00:09:23,610
Let's label them one, two, three, four five like that.

122
00:09:24,330 --> 00:09:29,580
So basically, each of these lines in the in the.

123
00:09:30,710 --> 00:09:36,390
In the people text, the variable is kind of going to run through this pipeline one at a time.

124
00:09:36,410 --> 00:09:42,650
You can again, that's not exactly really how it works, but that's functionally how you can imagine

125
00:09:42,650 --> 00:09:43,740
it's working OK.

126
00:09:43,760 --> 00:09:46,620
I think that will help you to wrap your head around this.

127
00:09:46,640 --> 00:09:52,010
OK, so what you effectively have here is a loop without actually making a loop.

128
00:09:52,400 --> 00:09:54,710
That's that's kind of what you basically have.

129
00:09:54,770 --> 00:09:55,220
OK.

130
00:09:55,700 --> 00:10:04,580
And so you can even imagine that, you know, this kind of non loop is going to come back up to the

131
00:10:04,580 --> 00:10:09,350
second item in the list and then that's going to run through the pipeline.

132
00:10:09,560 --> 00:10:14,960
And then and then we're going to go for a third iteration, right?

133
00:10:15,260 --> 00:10:17,240
And then a fourth iteration.

134
00:10:18,310 --> 00:10:26,140
And a fifth iteration and so on and so forth until the until the until we've run out of all the lines

135
00:10:26,140 --> 00:10:29,410
to process in our stream.

136
00:10:29,710 --> 00:10:37,720
OK, so maybe that'll that'll help to give you a little bit more firm understanding of, generally speaking,

137
00:10:37,960 --> 00:10:44,740
how these how the streams API is kind of sort of working or at least how you can imagine that it might

138
00:10:44,740 --> 00:10:50,830
be working so that you can kind of apply your reasoning to what you see here in code.

139
00:10:51,190 --> 00:10:58,180
So I'm going to wrap up this lesson and in the next one will dig in more on some more cool tricks that

140
00:10:58,180 --> 00:11:05,860
we can do with the Streams API and continue to implement some of the functionality that we had over

141
00:11:05,860 --> 00:11:07,360
in the other class.

142
00:11:07,540 --> 00:11:08,950
So I'll see you in the next one.
