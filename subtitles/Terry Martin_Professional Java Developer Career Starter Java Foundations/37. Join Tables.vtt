WEBVTT
1
00:00:00.510 --> 00:00:07.410
OK, I've got I think, one more table join type of relationship that I want to show you or technique

2
00:00:07.770 --> 00:00:11.520
before we wrap up this whole entire database module.

3
00:00:12.180 --> 00:00:17.670
I want to revisit how we were recording the relationship between parents and children.

4
00:00:18.090 --> 00:00:23.010
So here I've got our depiction that I've been using to kind of show how we're doing these things.

5
00:00:23.010 --> 00:00:27.270
And just as a quick reminder, here we've got a table for the people.

6
00:00:27.270 --> 00:00:34.320
And when we wanted to record who the children were for a parent, the way we did that was by adding

7
00:00:34.320 --> 00:00:43.230
an additional column on to this table called Parent I.D. And so any record that has a parent ID filled

8
00:00:43.230 --> 00:00:48.900
in that implies that that record is a child of that particular parent, right?

9
00:00:48.920 --> 00:00:55.500
So in this case, and Jackson is a child of the record with ID 10, which would be Terry Smith.

10
00:00:55.500 --> 00:01:01.080
So that is to say that Alan Jackson is Jerry Smith's daughter, presumably or child.

11
00:01:01.410 --> 00:01:09.060
Again, we've got Larry Kim, who is also the child of Jerry Smith, because we added this column here

12
00:01:09.060 --> 00:01:11.250
parent ID OK, pointing to 10.

13
00:01:11.610 --> 00:01:15.780
This column, by the way, can be called a join column.

14
00:01:16.140 --> 00:01:20.130
It's the column that specifies how to join these records together.

15
00:01:20.160 --> 00:01:26.190
OK, so that's a joined column, however, and I think I might have mentioned this briefly before.

16
00:01:26.520 --> 00:01:30.180
It is possible to record these relationships.

17
00:01:30.180 --> 00:01:32.940
And by the way, it doesn't just have to be parent child relationships.

18
00:01:33.120 --> 00:01:37.560
It can be the relationship between people and addresses or anything.

19
00:01:37.560 --> 00:01:43.770
So one to one relationships, one to many relationships, whatever kind of relationships you want to

20
00:01:43.770 --> 00:01:44.250
record.

21
00:01:44.700 --> 00:01:51.300
We can record these relationships without having to modify the tables that hold these records.

22
00:01:51.510 --> 00:01:57.960
So here we modified the people table by adding a join column onto this table, the parent ID column

23
00:01:57.960 --> 00:01:58.200
here.

24
00:01:58.380 --> 00:02:03.240
But we could have done this without modifying or without adding this parent ID column at all.

25
00:02:03.600 --> 00:02:10.290
So another way that you can record these these relationships between records and tables and entities

26
00:02:10.530 --> 00:02:16.410
is actually by adding a whole additional table called a join table.

27
00:02:16.740 --> 00:02:21.270
So the join table can let us do the same kind of thing that we're doing here.

28
00:02:21.480 --> 00:02:28.560
However, one major benefit of a join table is that you no longer have to modify the original tables

29
00:02:28.560 --> 00:02:30.250
that were already in the database.

30
00:02:30.270 --> 00:02:30.660
OK.

31
00:02:31.110 --> 00:02:33.000
So let me show you what that would look like.

32
00:02:33.480 --> 00:02:39.960
So here I've got the people table, but then I've added this join table here, and it's pretty straightforward.

33
00:02:40.290 --> 00:02:49.590
So if I wanted to say that Jerry Smith is the parent of Frank Jones and Ann Jackson, I can use this

34
00:02:49.590 --> 00:02:54.940
join table and say that I've got a parent who points to ID of 10.

35
00:02:54.960 --> 00:02:57.690
That would be Jerry Smith because his ideas 10.

36
00:02:58.440 --> 00:03:03.780
And he has a child who has an idea of 20, which would be Frank Jones.

37
00:03:04.050 --> 00:03:09.810
And he also has another child with ID of 30 who is and Jackson.

38
00:03:09.810 --> 00:03:11.850
So that's pretty straightforward, right?

39
00:03:12.270 --> 00:03:13.680
So, pretty simple.

40
00:03:13.950 --> 00:03:20.310
And then we can still use our joint techniques with sequel to join these tables together, and we can

41
00:03:20.310 --> 00:03:25.980
actually join from the people table as a parent to the parent child table.

42
00:03:26.130 --> 00:03:33.630
And then from the parent child table back to the people table as a child to get ultimately the parent

43
00:03:33.630 --> 00:03:38.520
child relationships that we already were doing with this parent ID column here.

44
00:03:38.670 --> 00:03:43.770
So in other words, you could do all of that parent child stuff or one to ones or whatever relationships

45
00:03:43.950 --> 00:03:45.720
without the join column.

46
00:03:45.930 --> 00:03:47.790
So let's try this out.

47
00:03:47.880 --> 00:03:51.900
Now, we're not going to write any code for this as we're trying to wrap this all up, but I just want

48
00:03:51.900 --> 00:03:55.050
to show you how we can do this using the Squirrel sequel client.

49
00:03:55.500 --> 00:03:55.830
All right.

50
00:03:55.830 --> 00:04:01.830
So here we are back in the Squirrel sequel client, and I'm just going to reconnect to the database.

51
00:04:02.760 --> 00:04:03.180
OK?

52
00:04:03.270 --> 00:04:08.640
And so what we're going to do now is we're going to go ahead and just create that parent child table.

53
00:04:08.940 --> 00:04:16.470
So to do so, I will issue some doodle recalled doodle stands for database definition language.

54
00:04:16.470 --> 00:04:22.260
So those are the commands that we can use not to query for data, but to create structures or objects

55
00:04:22.470 --> 00:04:27.480
in the database, such as tables and indexes and columns and things like that.

56
00:04:27.840 --> 00:04:30.120
All right, so we will create a new table.

57
00:04:31.300 --> 00:04:37.360
And it is fairly common to name join tables from the tables that they are referencing.

58
00:04:37.510 --> 00:04:41.710
So in this case, we're referencing the people table and we're only going to reference the people table,

59
00:04:41.710 --> 00:04:44.890
but we're going to reference it in two different context.

60
00:04:45.400 --> 00:04:49.300
Reference it once on this column as parents.

61
00:04:49.540 --> 00:04:52.420
And then again on this column as children.

62
00:04:52.660 --> 00:04:56.710
And so I'm choosing the name this join table parent child.

63
00:04:56.710 --> 00:05:03.130
So technically, it's the name isn't referencing the actual name of the table, it's referencing the

64
00:05:03.130 --> 00:05:05.410
use of the table in this particular case.

65
00:05:05.710 --> 00:05:06.010
All right.

66
00:05:06.020 --> 00:05:12.970
So I'm going to name this table parent underscored child, and then I'm going to state that it's going

67
00:05:12.970 --> 00:05:21.070
to have one column called Parent ID, which will be of type big end because it's going to be referencing

68
00:05:21.070 --> 00:05:25.480
primary key IDs of records in the people table.

69
00:05:25.810 --> 00:05:26.590
So big end.

70
00:05:26.770 --> 00:05:30.610
And then I need to specify that this will be a foreign key column.

71
00:05:31.240 --> 00:05:37.840
So recall that when we have these columns that are pointing back to records in other tables or in there

72
00:05:37.870 --> 00:05:45.760
or in their own table, we can constrain those references by declaring the column as a foreign key column.

73
00:05:46.270 --> 00:05:56.200
And so the way to do that is to say references, the people table and its ID column like so and then

74
00:05:56.200 --> 00:06:02.500
we're going to have another column, which is this Child ID column, and it's data definition will really

75
00:06:02.500 --> 00:06:04.470
look exactly the same as the parent child.

76
00:06:04.480 --> 00:06:10.150
So both columns are simply referring back to primary key columns in the people table.

77
00:06:10.300 --> 00:06:13.810
So I will essentially just put a comma here and then do the same thing.

78
00:06:13.810 --> 00:06:21.190
Except now instead of parent ID, this will be child ID of type big end, which also references the

79
00:06:21.190 --> 00:06:23.560
People Table Column ID.

80
00:06:24.580 --> 00:06:30.460
And then I will close all of that off with a closing parentheses and then execute this.

81
00:06:31.120 --> 00:06:32.260
All right, there we go.

82
00:06:32.710 --> 00:06:35.530
And now I want to insert some records in here.

83
00:06:35.530 --> 00:06:42.010
So let me first just query the database, query the people table to remember what some of the records

84
00:06:42.010 --> 00:06:43.240
are that we have in here.

85
00:06:43.360 --> 00:06:47.350
So, yeah, we've got Harry Johnson and Jack and Mary and Sabrina.

86
00:06:47.360 --> 00:06:52.660
So I'm just going to declare that Harry Johnson is the parent of Jack and Mary.

87
00:06:52.780 --> 00:06:53.110
All right.

88
00:06:53.120 --> 00:07:02.500
So to do that, what I will do is I will insert into my new join table parent child.

89
00:07:02.980 --> 00:07:09.100
Now I'm going to skip specifying the names of the columns that I want to insert data into because this

90
00:07:09.100 --> 00:07:16.450
parent child join table only has two columns anyway, so I can jump straight to just declaring the values

91
00:07:16.450 --> 00:07:21.220
part of this now and say that I want to insert for a parent ID.

92
00:07:21.820 --> 00:07:29.920
The parent ID of one, which is Harry Johnson and then his child, one of his children is Jack, which

93
00:07:29.920 --> 00:07:33.460
is the ID of two, and then execute that.

94
00:07:33.610 --> 00:07:34.060
OK.

95
00:07:34.390 --> 00:07:41.140
And then I'm just going to reuse this and say that he has another child pointing to three ID, three,

96
00:07:41.140 --> 00:07:42.100
which is Mary.

97
00:07:42.100 --> 00:07:43.990
And then I'm going to execute that.

98
00:07:44.680 --> 00:07:45.150
All right.

99
00:07:45.160 --> 00:07:53.350
And now I will just query from select everything from the parent child table and just confirm that I've

100
00:07:53.350 --> 00:07:54.250
got those records.

101
00:07:54.250 --> 00:07:55.030
And yes, I do.

102
00:07:55.250 --> 00:08:00.280
So Harry Johnson has this kid and Harry Johnson has this other kid as well.

103
00:08:00.700 --> 00:08:01.040
All right.

104
00:08:01.060 --> 00:08:08.260
And now that I've done that, let's put this to use and perform a join to get all of the children of

105
00:08:08.260 --> 00:08:09.130
Harry Johnson.

106
00:08:09.550 --> 00:08:15.190
So this should be pretty familiar now because it'll pretty much be the same format as the other left

107
00:08:15.190 --> 00:08:20.410
outer join queries that we've done previously so I can select now.

108
00:08:20.410 --> 00:08:22.930
I'm not going to select every single column.

109
00:08:22.930 --> 00:08:27.130
I'm just going to stick with just the first and last names for now because I don't want to type a bunch

110
00:08:27.130 --> 00:08:38.830
here, so I'm going to select parent dot first name as parent underscore first underscore name, comma

111
00:08:39.130 --> 00:08:53.290
parent dot last name as parent underscore last underscore name comma, child dot first name as child

112
00:08:53.290 --> 00:09:05.830
underscore first name comma child dot last underscore name as child underscore last name from people

113
00:09:06.160 --> 00:09:08.050
as parent.

114
00:09:08.620 --> 00:09:13.780
Now the next part is going to be a little bit different now because now, instead of just doing a left

115
00:09:13.780 --> 00:09:16.060
outer, join back to the people table.

116
00:09:16.300 --> 00:09:21.670
I'm now going to perform a left outer join first to the join table.

117
00:09:22.060 --> 00:09:25.360
So that will look like this left outer.

118
00:09:25.540 --> 00:09:28.420
Join parent child.

119
00:09:28.660 --> 00:09:29.530
That's the name of our.

120
00:09:29.690 --> 00:09:36.780
Join Table Parent Child, as now I'm just going to call this PC because again, I don't want to type

121
00:09:36.780 --> 00:09:46.920
a whole lot here as PC on parent dot IED equal to PC Dot parent underscore ID.

122
00:09:47.040 --> 00:09:49.050
So let's look at what what I'm saying here.

123
00:09:49.170 --> 00:09:51.960
Left outer join to the parent child table.

124
00:09:52.410 --> 00:09:58.110
So we're going to do a left outer join from people table to the parent child table, and we're going

125
00:09:58.110 --> 00:10:03.900
to call it PC, or we're going to reference the parent child join table as PC, and we're going to join

126
00:10:03.900 --> 00:10:06.960
on the parent dot IED.

127
00:10:07.140 --> 00:10:13.370
Remember, now parent is just an alias for people right now, so wherever the parent IED?

128
00:10:14.100 --> 00:10:21.960
This column here is equal to PC, parent ID and PC is our parent child join table.

129
00:10:21.960 --> 00:10:23.010
So that's this table.

130
00:10:23.010 --> 00:10:32.400
So all we're saying now is join on the People Tables ID column equal equaling the parent child's parent

131
00:10:32.400 --> 00:10:33.450
ID column.

132
00:10:33.480 --> 00:10:35.820
OK, so join on those columns.

133
00:10:36.330 --> 00:10:44.230
Then we need to do another left outer join from the parent child child ID column.

134
00:10:44.430 --> 00:10:48.240
Back to the people table ID column again.

135
00:10:48.360 --> 00:10:57.670
OK, so to do that, we'll do left outer join people table as child now.

136
00:10:57.720 --> 00:11:04.140
OK, so we're going from people to parent child and then from parent child, back to people.

137
00:11:04.150 --> 00:11:09.840
But the first time we go from people to parent child, that's describing the relationship between parents.

138
00:11:10.020 --> 00:11:11.250
And this drawing table.

139
00:11:11.430 --> 00:11:16.650
And now this next time that we're going from the parent child back to the people table, now we're describing

140
00:11:16.650 --> 00:11:20.670
the relationship between the join table and the children.

141
00:11:20.700 --> 00:11:21.210
OK.

142
00:11:21.480 --> 00:11:25.710
So from parents to join and then from join to children, that's what we're doing.

143
00:11:25.740 --> 00:11:34.050
OK, so now we're describing from joined to children to left outer join people as a child on child.

144
00:11:34.050 --> 00:11:39.710
That IED equal to PC dot child underscore IED.

145
00:11:39.930 --> 00:11:42.390
And honestly, I don't think it really matters too much.

146
00:11:42.390 --> 00:11:48.720
If you say Child ID first or if you say PC, that child I.D. the important thing here is that they need

147
00:11:48.720 --> 00:11:49.710
to be equal, right?

148
00:11:49.710 --> 00:11:51.240
There needs to be that relationship.

149
00:11:51.240 --> 00:11:52.920
That's that's really all that matters.

150
00:11:53.250 --> 00:11:53.670
OK.

151
00:11:53.700 --> 00:11:55.560
And that should be it right there.

152
00:11:55.680 --> 00:12:01.260
So if we go ahead and execute this now, I'm not constraining it to say which parent to look for because

153
00:12:01.260 --> 00:12:07.140
it's not really going to matter right now will be limited to the first 100 records in the people table

154
00:12:07.140 --> 00:12:07.830
anyway.

155
00:12:08.160 --> 00:12:09.210
And so that's fine.

156
00:12:09.210 --> 00:12:11.400
But let's go ahead and just run this and see what we get.

157
00:12:13.550 --> 00:12:19.910
OK, so notice now we've got Harry Johnson repeated twice, right?

158
00:12:19.940 --> 00:12:21.060
Harry Johnson.

159
00:12:21.080 --> 00:12:22.100
Harry Johnson.

160
00:12:22.100 --> 00:12:24.500
But we've got his two kids now.

161
00:12:24.890 --> 00:12:27.350
Jack Johnson and Mary Johnson.

162
00:12:27.350 --> 00:12:33.290
So again, what we're seeing here is a result set that is more from the perspective of the children.

163
00:12:33.590 --> 00:12:37.910
However, we're getting all these novels because we're doing a left outer join everywhere.

164
00:12:38.000 --> 00:12:43.790
Which is just to say, if there are parents who don't have children, then just depict the child columns

165
00:12:43.790 --> 00:12:44.730
as novels.

166
00:12:44.760 --> 00:12:45.020
Right.

167
00:12:45.020 --> 00:12:48.650
So we're seeing everybody now, but that's pretty much it.

168
00:12:48.800 --> 00:12:56.660
So if we had chosen to add in more columns, we could have used a query like this in place of the way

169
00:12:56.720 --> 00:13:00.120
that we did parent child relationships in our code.

170
00:13:00.140 --> 00:13:00.500
Right.

171
00:13:00.740 --> 00:13:03.290
But the output is essentially the same.

172
00:13:03.680 --> 00:13:08.900
And like I said, this is actually pretty flexible because let's imagine that you're working with a

173
00:13:08.900 --> 00:13:12.470
data base that has already been created by someone other than you.

174
00:13:12.890 --> 00:13:19.220
But now you get new business requirements that tell you that you have to implement some relationship

175
00:13:19.220 --> 00:13:23.450
between records, either in the same table or between multiple tables.

176
00:13:23.450 --> 00:13:29.600
But you're not allowed to modify the existing tables so you can add new tables, but you're not allowed

177
00:13:29.600 --> 00:13:31.490
to modify existing tables.

178
00:13:31.670 --> 00:13:36.890
In that case, you would pretty much have to use a join table like we're using here.

179
00:13:37.370 --> 00:13:40.400
So join tables are really actually quite flexible.

180
00:13:40.550 --> 00:13:43.460
And that's really all I wanted to show you in this lesson.

181
00:13:43.470 --> 00:13:48.290
Just making sure that you're aware that there's another way to establish these relationships between

182
00:13:48.290 --> 00:13:51.650
records by simply introducing a join table.

183
00:13:52.010 --> 00:13:52.400
All right.

184
00:13:52.430 --> 00:13:56.000
So with that, I'm going to close out this lesson and I will see you in the next one.
