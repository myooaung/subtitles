WEBVTT
1
00:00:00.420 --> 00:00:06.240
All right, so next up on our agenda, I want to introduce another piece of functionality that is somewhat

2
00:00:06.240 --> 00:00:10.860
common in a lot of typical web applications, especially within corporations.

3
00:00:11.070 --> 00:00:14.610
And that is the ability to upload a file.

4
00:00:15.180 --> 00:00:24.000
So what we're going to do, first of all, is modify our application to allow us to upload a photo for

5
00:00:24.240 --> 00:00:25.260
our users.

6
00:00:25.300 --> 00:00:30.690
OK, now I'm not saying it's super common to upload photos specifically, especially for corporate web

7
00:00:30.690 --> 00:00:37.050
applications, but this will be a fair excuse for us to at least implement the ability to upload any

8
00:00:37.050 --> 00:00:38.110
kind of file at all.

9
00:00:38.340 --> 00:00:43.680
But we'll be working with photos since we're working with a people database anyway, we might as well

10
00:00:43.680 --> 00:00:46.140
be able to upload a photo of of a person.

11
00:00:46.380 --> 00:00:48.470
All right, so let's get started.

12
00:00:48.480 --> 00:00:54.510
So I think the the way we'd want this to work is that we've already got this form here where we can

13
00:00:54.510 --> 00:00:55.530
create a person.

14
00:00:56.160 --> 00:01:02.040
And what I'm envisioning is simply adding an additional field to the form where we can select the file

15
00:01:02.040 --> 00:01:04.440
from our file system to upload.

16
00:01:04.650 --> 00:01:08.010
And then when we save the person, all of the regular data.

17
00:01:08.010 --> 00:01:13.980
Plus that file will be sent to the back end, which is our Java code, and then we can do something

18
00:01:13.980 --> 00:01:14.820
with it there.

19
00:01:15.090 --> 00:01:15.400
All right.

20
00:01:15.420 --> 00:01:20.970
So before we get into what we're exactly going to do with those files, let's first just acknowledge

21
00:01:20.970 --> 00:01:27.960
that probably we'll have to modify our person class to support an additional field.

22
00:01:27.990 --> 00:01:28.410
OK.

23
00:01:28.650 --> 00:01:30.930
So let's jump into the person class.

24
00:01:32.310 --> 00:01:33.720
And see what we've got here.

25
00:01:33.820 --> 00:01:35.220
Let me make a little room.

26
00:01:35.460 --> 00:01:37.530
OK, so here's our person class.

27
00:01:37.530 --> 00:01:42.300
So yeah, I think this can be as easy as simply adding another field.

28
00:01:42.330 --> 00:01:46.950
Now you might be wondering what should the data type for this field be?

29
00:01:47.790 --> 00:01:54.330
And there are multiple ways that we could do this, but the way that we're going to do it for now and

30
00:01:54.330 --> 00:02:00.990
probably forever is that our personal domain model class is simply going to hold a reference to the

31
00:02:00.990 --> 00:02:01.800
file name.

32
00:02:01.800 --> 00:02:06.180
OK, so we won't actually put the file in instances of a person.

33
00:02:06.180 --> 00:02:11.940
We could do that, but I will explain a little bit later why I'm not super crazy about doing that.

34
00:02:11.970 --> 00:02:15.120
OK, so that makes it even easier, though.

35
00:02:15.120 --> 00:02:20.930
So we'll just have a string and we can say something like photo file name.

36
00:02:20.940 --> 00:02:21.390
Maybe.

37
00:02:22.670 --> 00:02:27.950
And I'm not going to bother with any validation rules for this, since this will be coming from a file

38
00:02:27.950 --> 00:02:29.900
that you would pick from within the browser.

39
00:02:30.110 --> 00:02:35.780
Now I'm not saying you shouldn't have validation in real life, but for our little toy application here,

40
00:02:35.990 --> 00:02:40.250
I'm not to worry about worried about it, and you now know how to put that kind of validation on there

41
00:02:40.250 --> 00:02:42.230
yourself if you really feel that you need to.

42
00:02:42.560 --> 00:02:42.920
All right.

43
00:02:42.950 --> 00:02:45.740
So that's what we need there.

44
00:02:46.070 --> 00:02:49.490
And then let's jump back in to our template.

45
00:02:50.030 --> 00:02:54.110
And so now we can add the field down here.

46
00:02:54.320 --> 00:02:54.740
OK?

47
00:02:54.980 --> 00:02:59.780
And I suppose we can just add it right underneath the salary field.

48
00:02:59.990 --> 00:03:08.990
Now we can jump over into bootstrap and see if Bootstrap offers any nicer looking file, upload widgets

49
00:03:08.990 --> 00:03:10.010
or something like that.

50
00:03:10.310 --> 00:03:16.130
And maybe I will just come up here to the search box and type in upload.

51
00:03:16.340 --> 00:03:16.700
Nope.

52
00:03:17.390 --> 00:03:18.320
How about file?

53
00:03:18.440 --> 00:03:19.010
There we go.

54
00:03:19.250 --> 00:03:20.780
File input right there.

55
00:03:20.780 --> 00:03:21.590
Form control.

56
00:03:21.620 --> 00:03:22.820
File input.

57
00:03:23.630 --> 00:03:24.230
Perfect.

58
00:03:24.890 --> 00:03:33.740
OK, so these are the somewhat visually customized file input widgets that they are providing.

59
00:03:34.040 --> 00:03:35.060
They've got a really large one.

60
00:03:35.060 --> 00:03:38.960
I guess I will just go with this default one notice, though, that they've got both the default and

61
00:03:38.960 --> 00:03:41.600
then a multiple files input example.

62
00:03:41.600 --> 00:03:46.820
So if you want it to be allowed to upload multiple files in one go, I guess you could use that one.

63
00:03:47.150 --> 00:03:49.700
I don't think we're going to need that right now, if ever.

64
00:03:50.030 --> 00:03:56.300
But this first one looks like a good candidate to me, and that should correspond to everything in this

65
00:03:56.300 --> 00:03:57.260
div here.

66
00:03:57.650 --> 00:04:00.710
So I am going to just copy that.

67
00:04:03.320 --> 00:04:09.890
All right, and then I will come over here and I will simply paste it right underneath the salary field

68
00:04:09.980 --> 00:04:11.690
that we already have.

69
00:04:11.840 --> 00:04:12.290
OK?

70
00:04:12.890 --> 00:04:16.970
And then jump back over here to the to the page.

71
00:04:17.750 --> 00:04:19.390
And let's see here.

72
00:04:19.400 --> 00:04:25.040
Let's go ahead and just reload and just see how that looks.

73
00:04:25.280 --> 00:04:27.140
First, before we go any further.

74
00:04:27.380 --> 00:04:27.950
Oh yeah.

75
00:04:27.960 --> 00:04:31.700
And now I've got a lot of things broken here because I forgot about this constructor thing.

76
00:04:31.700 --> 00:04:32.720
I added a new field.

77
00:04:32.930 --> 00:04:36.010
And so over here in the where where are we now?

78
00:04:36.020 --> 00:04:38.090
This is the person data loader class.

79
00:04:38.470 --> 00:04:41.660
Now all of this code here is broken.

80
00:04:41.780 --> 00:04:45.850
Now, interestingly, I mean, we're not even using this data loader anymore.

81
00:04:46.460 --> 00:04:47.800
So.

82
00:04:47.930 --> 00:04:48.510
Hmm.

83
00:04:48.680 --> 00:04:56.570
I'm kind of thinking of not trying to fix this and just comment that all out just to be kind of lazy

84
00:04:56.570 --> 00:04:57.470
and quick about it.

85
00:04:57.620 --> 00:05:04.220
But obviously, if we wanted to, we could fix this by simply passing in, perhaps a null for another

86
00:05:04.310 --> 00:05:10.340
for the for that new parameter, we could likely do something like that, but I don't want to even bother

87
00:05:10.340 --> 00:05:10.790
with that.

88
00:05:11.090 --> 00:05:12.890
So I'm just going to reload.

89
00:05:14.160 --> 00:05:14.730
OK.

90
00:05:15.030 --> 00:05:22.280
And so the browser has updated and there's our new field now, and we need to kind of customize it somewhat,

91
00:05:22.290 --> 00:05:26.970
but that's looking like we're on the right page, so no pun intended.

92
00:05:27.420 --> 00:05:27.770
All right.

93
00:05:27.780 --> 00:05:32.790
So go back over to the template and now we can customize this field a bit.

94
00:05:33.120 --> 00:05:34.620
Let me make some more room here.

95
00:05:34.620 --> 00:05:36.780
So let's see here.

96
00:05:36.870 --> 00:05:45.120
So let's rename this the field label to photo file.

97
00:05:45.120 --> 00:05:45.540
Maybe.

98
00:05:46.290 --> 00:05:46.700
All right.

99
00:05:46.710 --> 00:05:51.390
And let's see that ID there is.

100
00:05:52.350 --> 00:05:53.370
Let's change this.

101
00:05:53.850 --> 00:06:02.010
Let's change the ID here and here in the four to what did I name it in the class photo file name, I

102
00:06:02.010 --> 00:06:02.460
think.

103
00:06:04.370 --> 00:06:11.970
And let me copy that, because then I'm going to have a T.H a timely idea as well.

104
00:06:12.630 --> 00:06:22.400
T-H field equals star and then photo file name like so all right, and let me refresh again.

105
00:06:22.550 --> 00:06:23.090
OK.

106
00:06:23.390 --> 00:06:27.180
And so if I come down here right now and just select, All right, there we go.

107
00:06:27.200 --> 00:06:34.100
So I've made a new folder where I've downloaded a bunch of free images of people, and so I'm in my

108
00:06:34.100 --> 00:06:37.130
people folder here, and this is all looking just fine.

109
00:06:37.790 --> 00:06:40.320
So that much works, at least now.

110
00:06:40.610 --> 00:06:47.390
Let's go ahead and actually select a person, in fact, and I will even fill this out, and I'll even

111
00:06:47.390 --> 00:06:49.370
use the the model's name there.

112
00:06:49.370 --> 00:06:51.050
I guess death then.

113
00:06:52.550 --> 00:06:55.340
Stefan, check, I guess.

114
00:06:56.210 --> 00:07:10.550
And I will make up a date one one, 1980, and as STF at photos dot com with a salary of 50000.

115
00:07:10.770 --> 00:07:13.580
OK, and let's go ahead and save this person.

116
00:07:14.090 --> 00:07:17.000
OK, so we got the person created.

117
00:07:17.330 --> 00:07:26.060
Now we may have virtually no idea if the photo file name actually got sent over because we have no feedback

118
00:07:26.060 --> 00:07:26.810
over here.

119
00:07:27.110 --> 00:07:28.220
Now we could.

120
00:07:28.730 --> 00:07:34.010
Yeah, we can temporarily add that field to the table also so that we can see if we've got that data.

121
00:07:34.370 --> 00:07:40.970
So let's see, where would I guess I'm going to add it right after the salary for now, at least.

122
00:07:41.450 --> 00:07:43.340
So let's go to the header.

123
00:07:44.440 --> 00:07:47.530
Of our table, and I will just duplicate that.

124
00:07:47.800 --> 00:07:53.050
The salary header column and then add another one for photo.

125
00:07:54.400 --> 00:08:02.470
And then down here where we have the salary data cell, I will duplicate again, and now we will refer

126
00:08:02.500 --> 00:08:05.110
to photo dot, our person dot.

127
00:08:05.410 --> 00:08:05.800
What was it?

128
00:08:05.830 --> 00:08:08.260
Photo file name.

129
00:08:09.250 --> 00:08:12.340
Like so and we don't need the double.

130
00:08:13.710 --> 00:08:18.300
Curly braces for that one because we're not formatting it or anything.

131
00:08:18.570 --> 00:08:21.900
And let's see if this works like this.

132
00:08:23.060 --> 00:08:23.510
Yeah.

133
00:08:23.540 --> 00:08:32.760
OK, so this is what the browser sent to the back end, just this string of the actual file name itself.

134
00:08:32.780 --> 00:08:40.940
OK, so that's part of what we need, but obviously what we really want is the actual file, which you

135
00:08:40.940 --> 00:08:44.460
can think of it as a series of bytes.

136
00:08:44.480 --> 00:08:44.960
OK.

137
00:08:45.350 --> 00:08:46.790
It's binary data.

138
00:08:46.820 --> 00:08:47.390
OK.

139
00:08:47.660 --> 00:08:52.040
It's not text, but it's actually binary data that we are really wanting.

140
00:08:52.340 --> 00:09:00.290
And so right now, our application is not technically configured to send the actual binary data that

141
00:09:00.290 --> 00:09:02.420
comprises the photo.

142
00:09:02.450 --> 00:09:08.480
All its currently sending is just this string of the file name itself.

143
00:09:08.510 --> 00:09:08.840
OK.

144
00:09:09.080 --> 00:09:13.220
So we need to figure out how can we get our hands on the actual bytes, right?

145
00:09:13.220 --> 00:09:16.460
The actual binary data that comprises that photo?

146
00:09:16.940 --> 00:09:19.280
So we'll actually need a few things to make that work.

147
00:09:19.700 --> 00:09:25.370
First off, if we come down here to our form, the person form here, we're going to have to change

148
00:09:25.370 --> 00:09:29.720
a one little thing about how this form is configured to work.

149
00:09:30.320 --> 00:09:37.760
So if we go to the form element itself right here, there's an additional argument that we can specify

150
00:09:37.760 --> 00:09:43.430
on the form to tell it how we want it to transmit data.

151
00:09:43.610 --> 00:09:51.170
So you will recall that whenever the web page is submitting a request back to the back end and we have

152
00:09:51.170 --> 00:09:58.940
form data, that data is being encoded essentially as just a text string of key value pairs, right?

153
00:09:59.150 --> 00:10:04.790
So we'd have the first name field equals and then the value that sent it and then an ampersand.

154
00:10:05.000 --> 00:10:10.910
And then the last thing field, according to its ID, which is last name and then an equals and then

155
00:10:10.910 --> 00:10:16.430
whatever value we put in there and then another ampersand to separate out each of the fields, and all

156
00:10:16.430 --> 00:10:20.120
of that will be concatenated into one text string.

157
00:10:20.150 --> 00:10:20.540
OK.

158
00:10:20.900 --> 00:10:26.180
So currently that's still happening, even for this photo file filled here.

159
00:10:26.390 --> 00:10:33.140
We've just got another field in that text string with the photo file name ID equals and then whatever

160
00:10:33.140 --> 00:10:34.380
the name of the file is.

161
00:10:34.410 --> 00:10:34.760
OK.

162
00:10:34.940 --> 00:10:37.850
And all of that's being concatenated and sent over.

163
00:10:37.970 --> 00:10:45.170
And then spring is parsing out that string and then populating each of the fields of our person object

164
00:10:45.170 --> 00:10:48.050
with the values that came back from these key value pairs.

165
00:10:48.050 --> 00:10:51.260
So it's really, really simplistic, very, very straightforward, OK?

166
00:10:51.650 --> 00:11:01.160
And the request itself, just as a quick reminder, is really just a text file that has a bunch of headers.

167
00:11:01.280 --> 00:11:05.570
One of those headers was like the accept language that we've looked at a few times here, which is where

168
00:11:05.570 --> 00:11:09.320
we're getting the local information and then a bunch of other headers that we're not really paying a

169
00:11:09.320 --> 00:11:11.210
lot of attention to for the most part.

170
00:11:11.480 --> 00:11:16.670
The very first part of that header, though, will say like the HTTP method type, which is usually

171
00:11:16.670 --> 00:11:17.090
a get.

172
00:11:17.090 --> 00:11:23.080
Although when we're submitting the form, it's a post because we configured our form to do a post where

173
00:11:23.080 --> 00:11:24.890
we lost that right there, right?

174
00:11:25.040 --> 00:11:30.410
So it'll say post and then the name of the resource, which in our case is people, right?

175
00:11:30.710 --> 00:11:38.120
And all of those headers and then one blank line and then on the next line will be the so-called payload

176
00:11:38.120 --> 00:11:43.970
or the body of the request, which in our case currently just contains those key value pairs.

177
00:11:43.970 --> 00:11:45.260
All concatenate it together.

178
00:11:45.290 --> 00:11:45.590
OK.

179
00:11:45.710 --> 00:11:47.270
So that's what we're normally getting.

180
00:11:47.690 --> 00:11:55.490
However, if we want to send binary data like a file upload with all of its data, we need to use a

181
00:11:55.490 --> 00:11:57.650
different format to send that data.

182
00:11:57.800 --> 00:12:01.950
And specifically, what we want to use in that case is call a multipart format.

183
00:12:01.970 --> 00:12:02.390
OK.

184
00:12:02.840 --> 00:12:11.880
And the way we can get that to happen is with a simple additional attribute on the form element here.

185
00:12:11.900 --> 00:12:18.110
So what we can do here is I can simply do a control space and I can come down here to this attribute

186
00:12:18.110 --> 00:12:23.420
EMC type and then I can choose an explicit encoding type.

187
00:12:23.450 --> 00:12:26.690
So right now, the default encode type is actually this one here.

188
00:12:26.690 --> 00:12:30.650
Application X w WW form u URL encoded, OK.

189
00:12:31.040 --> 00:12:35.750
So when we're seeing those key value pairs with the ampersand and all of that, that's just what we

190
00:12:35.750 --> 00:12:37.250
call a URL encoding.

191
00:12:37.370 --> 00:12:42.530
It's the same as what we could have actually put right up here in the URL itself.

192
00:12:42.650 --> 00:12:48.260
There's really no difference, except that instead of it being on the URL, it's in the body of the

193
00:12:48.260 --> 00:12:48.860
request.

194
00:12:48.890 --> 00:12:49.250
OK.

195
00:12:49.490 --> 00:12:51.380
So that's what we're getting by default.

196
00:12:51.500 --> 00:12:57.920
But if we want to be able to transmit binary data in that request, along with all the rest of it,

197
00:12:57.920 --> 00:13:00.530
we need to use this multi-part form data.

198
00:13:00.650 --> 00:13:08.090
And basically, what that's going to do is it's going to still be sort of a text file that gets sent

199
00:13:08.090 --> 00:13:08.750
across.

200
00:13:08.750 --> 00:13:16.190
But instead of one line in our case of key value pairs all on one line, each key and value will now

201
00:13:16.190 --> 00:13:18.140
be separated out on their own lines.

202
00:13:18.410 --> 00:13:21.980
And then there will be a little extra stuff to basically indicate the.

203
00:13:22.150 --> 00:13:25.180
Boundary between each key value pair.

204
00:13:25.210 --> 00:13:25.630
OK.

205
00:13:25.870 --> 00:13:32.560
And the reason for that is because then it allows for an unspecified amount of additional data for a

206
00:13:32.590 --> 00:13:38.410
value which in this case would be all of the binary bytes of the image that we're uploading.

207
00:13:38.440 --> 00:13:38.740
OK.

208
00:13:38.890 --> 00:13:40.600
Because you don't know how long that's going to be.

209
00:13:40.990 --> 00:13:43.000
So it may need plenty of space.

210
00:13:43.030 --> 00:13:50.230
OK, so the multi-part encoding scheme allows for that, and you can just send a lot of different data.

211
00:13:50.260 --> 00:13:54.740
You can even send multiple files all in one request with this approach.

212
00:13:54.760 --> 00:13:55.090
OK.

213
00:13:55.240 --> 00:14:04.660
So anyway, we're going to select multipart form data like so and so that will enable us to upload not

214
00:14:04.660 --> 00:14:08.950
only the file name, but the actual file data itself.

215
00:14:09.040 --> 00:14:11.230
However, it's not quite that simple.

216
00:14:11.230 --> 00:14:12.550
That's just one step.

217
00:14:12.580 --> 00:14:16.930
But then we will also need to jump over to the controller.

218
00:14:18.860 --> 00:14:24.420
And set the controller up to actually be able to receive this data.

219
00:14:24.440 --> 00:14:33.020
OK, so currently our post mapping is calling the save person method, and spring is automatically validating

220
00:14:33.020 --> 00:14:35.630
the key value pair data from the farm.

221
00:14:35.780 --> 00:14:43.160
And then if it's all valid and then binding whatever it can into an instance of a person and then any

222
00:14:43.160 --> 00:14:45.170
existing errors will go into the errors, right?

223
00:14:45.200 --> 00:14:49.280
So here's a question what is spring going to do with this binary data?

224
00:14:49.310 --> 00:14:53.720
OK, first off, let's talk about what binary data could even look like in Java.

225
00:14:53.750 --> 00:14:59.540
OK, so we know that the file name itself can be represented as a string because it's just text, right?

226
00:14:59.660 --> 00:15:01.010
But binary data.

227
00:15:01.640 --> 00:15:04.790
You can really think of it as an array of bytes.

228
00:15:04.790 --> 00:15:12.200
And in fact, in Java, oftentimes binary data is represented as an array of bytes.

229
00:15:12.230 --> 00:15:12.640
OK.

230
00:15:12.860 --> 00:15:19.250
Because virtually any computer data can be decomposed down to a bunch of bytes, essentially.

231
00:15:19.250 --> 00:15:19.580
All right.

232
00:15:19.760 --> 00:15:26.360
And so that's just a very generic way that you can represent just about anything in Java or in any other

233
00:15:26.360 --> 00:15:28.010
computer language, for that matter.

234
00:15:28.100 --> 00:15:28.490
OK.

235
00:15:28.970 --> 00:15:31.190
So where could these bytes go?

236
00:15:31.280 --> 00:15:38.000
We currently are not modeling any place to hold on to an array of bytes.

237
00:15:38.150 --> 00:15:45.470
OK, so we need some kind of a model that can receive this array of bytes so that we can then do something

238
00:15:45.470 --> 00:15:45.950
with it.

239
00:15:46.610 --> 00:15:51.770
So the way we can do that, and I'm not saying this is the only way, but this is a pretty easy way.

240
00:15:51.770 --> 00:15:59.150
I think to do this is that we can actually just add in another field here and we can tell spring to

241
00:15:59.150 --> 00:16:07.190
explicitly look for the photo file name parameter that's coming in and on the request and map its binary

242
00:16:07.220 --> 00:16:09.920
data to a specific parameter.

243
00:16:10.250 --> 00:16:11.060
And our method?

244
00:16:11.090 --> 00:16:11.480
OK.

245
00:16:11.720 --> 00:16:21.020
So we can do that by adding an at request program annotation like so and then we can introduce another

246
00:16:21.200 --> 00:16:22.040
parameter here.

247
00:16:22.340 --> 00:16:32.840
Now, spring actually has a special parameter that is intended to represent files that are being uploaded.

248
00:16:32.930 --> 00:16:40.610
And if you use this specific spring data type, then it's pretty easy to work with files once you receive

249
00:16:40.610 --> 00:16:40.850
them.

250
00:16:40.970 --> 00:16:43.520
And so that's what we're actually going to use here.

251
00:16:43.820 --> 00:16:48.200
Now, I've never tried this, but I think we could also use a byte array if we wanted to.

252
00:16:48.230 --> 00:16:52.790
I think so, but we're not going to bother with that in case any of you were wondering and you are free

253
00:16:52.790 --> 00:16:53.600
to try that out.

254
00:16:53.600 --> 00:16:56.540
But let's just cut to the chase in the interest of time, OK?

255
00:16:56.750 --> 00:17:02.810
So we're going to use a special spring data type, which is called multi-part file, and then we will

256
00:17:02.810 --> 00:17:04.250
name this parameter.

257
00:17:04.280 --> 00:17:06.020
Photo file name.

258
00:17:06.200 --> 00:17:11.780
So we'll have it match what the parameter is called from the incoming request itself.

259
00:17:11.900 --> 00:17:12.290
All right.

260
00:17:12.530 --> 00:17:13.670
Photo file name.

261
00:17:14.120 --> 00:17:23.630
So if we just do that, that should enable spring to pass out the binary data of that incoming file

262
00:17:23.630 --> 00:17:27.470
and place it inside of that photo file name variable.

263
00:17:27.500 --> 00:17:27.900
OK.

264
00:17:28.160 --> 00:17:34.970
And next thing we can do for right now, just to kind of verify that we're even on the right track.

265
00:17:35.270 --> 00:17:40.550
Let's go ahead and just output that that variable.

266
00:17:40.760 --> 00:17:46.700
Now this data tie multipart file actually is an object, obviously, and it has methods on it.

267
00:17:46.700 --> 00:17:49.940
And so we can actually look at some of the methods.

268
00:17:49.940 --> 00:17:52.550
So they're the bytes right there, by the way, those are the bytes.

269
00:17:52.550 --> 00:17:54.350
And look at that, you've got an array of bytes.

270
00:17:54.350 --> 00:18:01.430
So that just proves the fact that fundamentally any binary data that we're receiving really can be boiled

271
00:18:01.430 --> 00:18:03.260
down into just an array of bytes.

272
00:18:03.650 --> 00:18:09.410
But we can also do something like get the name of the file or the original file name of the file.

273
00:18:09.560 --> 00:18:15.350
So let's grab the original file name, OK, and we'll just print that out.

274
00:18:15.950 --> 00:18:22.190
By the way, I really need to hurry up and introduce you guys to a proper way of of kind of debugging

275
00:18:22.190 --> 00:18:22.670
your code.

276
00:18:22.670 --> 00:18:27.980
With these outputs and stuff, it's actually kind of bad to embed system that out, that print lines,

277
00:18:27.980 --> 00:18:33.590
there's a much better way called logging, and I will introduce just a tiny bit of it right now because

278
00:18:33.590 --> 00:18:37.330
this is so bad and I really shouldn't have let it go this this long.

279
00:18:37.340 --> 00:18:38.100
So here's what we'll do.

280
00:18:38.120 --> 00:18:39.230
Real quick, real, real quick.

281
00:18:39.410 --> 00:18:44.030
Go to the very top of the class there, and we're going to do a flat log for J2.

282
00:18:44.090 --> 00:18:50.030
So this is a Lombok Lombok annotation, and it enables really easy logging.

283
00:18:50.150 --> 00:18:53.790
I don't know that I'm even going to bother to explain a whole lot of how it's working.

284
00:18:53.790 --> 00:18:56.870
Other Yeah, but but it's good stuff.

285
00:18:57.110 --> 00:19:03.140
And then what we will do is let's just search for system that out that print line.

286
00:19:03.320 --> 00:19:08.480
So I'm going to select that system that out, that print line, just that bit there and then do a command

287
00:19:08.480 --> 00:19:12.740
are to do a search and replace and tab down once.

288
00:19:12.740 --> 00:19:17.760
And then I will replace that with what is at Log Dot Info I.

289
00:19:17.840 --> 00:19:21.830
Guess for now, anything is better than what I'm currently doing there.

290
00:19:22.130 --> 00:19:27.470
All right, so I just replaced all the places in this class where I had assistant got out that print

291
00:19:27.470 --> 00:19:27.740
line.

292
00:19:27.740 --> 00:19:30.170
Those have all been replaced with long dyed info.

293
00:19:30.200 --> 00:19:30.620
OK.

294
00:19:31.490 --> 00:19:31.850
All right.

295
00:19:31.970 --> 00:19:39.620
So that will still result in that information information being printed out to the console, essentially.

296
00:19:39.830 --> 00:19:46.310
But the logging thing here can be turned on and off because typically in a real production application

297
00:19:46.310 --> 00:19:51.170
like that's live and being used by a bunch of people, you might not want just every single thing in

298
00:19:51.170 --> 00:19:54.770
the universe that you ever were trying to print out to always print out.

299
00:19:54.920 --> 00:19:59.930
Some of that is kind of like just for testing purposes, which is pretty much what we're doing right

300
00:19:59.930 --> 00:20:00.320
here.

301
00:20:00.530 --> 00:20:02.720
But I just kind of want to show you this because I feel bad.

302
00:20:02.870 --> 00:20:08.120
Some of you might stop watching the rest of my videos and just like, go off and say, like, Oh, I

303
00:20:08.120 --> 00:20:08.990
know how to do everything now.

304
00:20:08.990 --> 00:20:12.560
And like, you're just constantly using system flat out that print line, and that would be bad.

305
00:20:12.590 --> 00:20:12.920
OK.

306
00:20:13.010 --> 00:20:14.810
So enough about that for right now.

307
00:20:15.050 --> 00:20:15.380
All right.

308
00:20:15.590 --> 00:20:16.740
Try to get back to that.

309
00:20:16.760 --> 00:20:20.810
And if I don't, you'll catch it in my next actual spring course, right?

310
00:20:20.830 --> 00:20:21.210
Right?

311
00:20:21.260 --> 00:20:23.790
You'll you'll you'll see me again in the spring course, I hope.

312
00:20:23.810 --> 00:20:24.140
Right?

313
00:20:24.230 --> 00:20:24.830
OK, good.

314
00:20:25.310 --> 00:20:25.580
All right.

315
00:20:25.610 --> 00:20:27.540
OK, so one other thing too.

316
00:20:27.560 --> 00:20:30.320
Let's see if we can get the size of the file.

317
00:20:30.440 --> 00:20:33.530
I think I think we'll have access to that.

318
00:20:33.880 --> 00:20:34.540
Yeah, there it is.

319
00:20:34.550 --> 00:20:35.750
Get size.

320
00:20:35.780 --> 00:20:37.580
Yeah, let's get that also.

321
00:20:38.180 --> 00:20:43.190
And you know what, I should probably kind of like state what these things are now.

322
00:20:43.540 --> 00:20:50.390
File I guess this file name is find file name space, and I'm just going to concatenate with a plus

323
00:20:50.390 --> 00:20:57.920
here because I'm doing really simple stuff for now and file size plus.

324
00:20:58.190 --> 00:20:58.970
All right, cool.

325
00:20:59.270 --> 00:21:04.580
That way when when we see this information printed out, we can actually kind of understand what it

326
00:21:04.580 --> 00:21:04.880
is.

327
00:21:05.240 --> 00:21:05.680
All right.

328
00:21:05.690 --> 00:21:07.460
So let's reload.

329
00:21:08.360 --> 00:21:08.900
OK.

330
00:21:09.320 --> 00:21:10.610
I think we are reloaded.

331
00:21:11.150 --> 00:21:13.280
And let's add another person.

332
00:21:13.280 --> 00:21:19.520
So I'm going to start down here with the file uploader again because I got the name of the person from

333
00:21:19.520 --> 00:21:19.630
here.

334
00:21:19.640 --> 00:21:24.470
It's hard for me to come up with these names, so I'm just going to pick that second person now.

335
00:21:24.620 --> 00:21:26.310
And that is Albert Deira.

336
00:21:26.330 --> 00:21:27.780
OK, so here we go.

337
00:21:27.800 --> 00:21:38.920
Albert D.E.A. and I will do two to 1990 and Ada at photos.

338
00:21:39.050 --> 00:21:39.350
Oops!

339
00:21:39.350 --> 00:21:42.800
Photos, dot com and 45000.

340
00:21:43.040 --> 00:21:45.380
All right, and I'm going to hit enter.

341
00:21:45.380 --> 00:21:46.640
Ooh, look at that!

342
00:21:46.910 --> 00:21:50.440
OK, now got an issue here and I see right away.

343
00:21:50.450 --> 00:21:52.700
I just happened to see this bit right there.

344
00:21:52.700 --> 00:21:55.100
Maximum upload size exceeded.

345
00:21:55.280 --> 00:21:56.540
All right, and this is good.

346
00:21:56.900 --> 00:22:04.100
So what's happening here is the file of file that I just tried to upload is exceeding the default upload

347
00:22:04.100 --> 00:22:09.650
file size that is currently configured for my spring web application.

348
00:22:09.680 --> 00:22:14.240
And apparently, the maximum permitted size is currently whatever this number is.

349
00:22:14.240 --> 00:22:14.660
How many?

350
00:22:14.960 --> 00:22:17.300
Let's see one two three one one Meg.

351
00:22:17.360 --> 00:22:24.140
It looks like one Meg one million one million forty eight thousand five hundred seventy six bytes,

352
00:22:24.140 --> 00:22:25.160
so that's one Meg.

353
00:22:25.640 --> 00:22:26.810
That is the max.

354
00:22:27.050 --> 00:22:28.730
So what can we do about that?

355
00:22:28.820 --> 00:22:29.510
It's easy.

356
00:22:29.690 --> 00:22:31.460
So we can actually just override that.

357
00:22:31.460 --> 00:22:38.270
And to do so, we need to do is jump into the application that properties file right here.

358
00:22:38.540 --> 00:22:45.230
And there will be another property that allows us to control the max, upload file size of whatever

359
00:22:45.230 --> 00:22:45.800
they're calling it.

360
00:22:45.980 --> 00:22:50.960
And again, let me just remind you, you don't have to memorize these things, necessarily at least

361
00:22:50.960 --> 00:22:52.340
not like in detail.

362
00:22:52.460 --> 00:22:58.500
You can just jump into the spring boot data properties documentation here, OK?

363
00:22:58.520 --> 00:23:04.580
And probably the easiest way to find this particular parameter that we're looking for is to search for

364
00:23:04.580 --> 00:23:05.750
the word multi-part.

365
00:23:05.900 --> 00:23:06.320
OK.

366
00:23:06.680 --> 00:23:11.000
So you know that you had to use the multipart file file type.

367
00:23:11.180 --> 00:23:15.260
So if you come over here and just search for a multi part.

368
00:23:16.280 --> 00:23:16.900
There we go.

369
00:23:16.910 --> 00:23:19.040
We're in the neighborhood here and let's see.

370
00:23:19.040 --> 00:23:26.630
We've got multipart file size threshold max file size that looks like a winner, winner, chicken dinner

371
00:23:26.840 --> 00:23:27.590
right there.

372
00:23:28.070 --> 00:23:30.590
So I would copy that.

373
00:23:30.800 --> 00:23:31.710
Come over here.

374
00:23:31.730 --> 00:23:34.940
Paste that in and then set that to something else.

375
00:23:35.420 --> 00:23:41.330
Now, when you take my spring course and I go into way more detail on spring and everything, you will

376
00:23:41.330 --> 00:23:43.610
learn what I'm about to tell you right now.

377
00:23:43.670 --> 00:23:48.830
So I guess you're about to learn it now if you just don't want to have a max file size at all, which

378
00:23:48.830 --> 00:23:50.450
is what I'm going to do for right now.

379
00:23:50.750 --> 00:23:53.120
You can just set this value to negative one.

380
00:23:53.360 --> 00:23:55.070
That just tells it Don't care.

381
00:23:55.100 --> 00:24:00.000
Just blow up my computer with some idiot who tried to upload a one terabyte file.

382
00:24:00.020 --> 00:24:00.650
I don't care.

383
00:24:00.950 --> 00:24:02.600
Obviously, you should care about that.

384
00:24:02.610 --> 00:24:06.820
But for right now, I'm just going to do the easy thing and set this to negative one.

385
00:24:06.830 --> 00:24:10.610
But you could explicitly set this to whatever value you want.

386
00:24:10.760 --> 00:24:14.120
So currently, just keep in mind, the default was one Meg.

387
00:24:14.150 --> 00:24:14.990
Write One Meg.

388
00:24:15.290 --> 00:24:15.770
All right.

389
00:24:15.980 --> 00:24:17.750
And then I will.

390
00:24:17.810 --> 00:24:23.090
Jump back over to the Web application window here, and then I will reload.

391
00:24:26.910 --> 00:24:33.390
All right, so let's try adding another person, so again, I will come down here and I will select,

392
00:24:33.810 --> 00:24:36.480
I'm going to start by selecting a person so that I can get a name.

393
00:24:37.260 --> 00:24:38.790
So we'll do the second person.

394
00:24:38.970 --> 00:24:40.200
Albert Deira.

395
00:24:40.500 --> 00:24:40.850
All right.

396
00:24:40.860 --> 00:24:52.920
So Albert, D.E.A. and I will just do a date of, I don't know, 1990 and a DEA at photos dot com.

397
00:24:52.920 --> 00:24:56.970
That's fine and a salary of 35000.

398
00:24:57.690 --> 00:24:58.080
OK.

399
00:24:58.500 --> 00:25:01.380
And let's let's add Albert.

400
00:25:01.740 --> 00:25:02.120
All right.

401
00:25:02.130 --> 00:25:02.860
So let's see here.

402
00:25:02.880 --> 00:25:11.880
So notice now Albert isn't showing up in here, and we've got all of that data still here, except for

403
00:25:11.880 --> 00:25:12.900
that file name.

404
00:25:14.390 --> 00:25:15.590
We've got all of that.

405
00:25:16.490 --> 00:25:18.110
So what is going on?

406
00:25:19.040 --> 00:25:22.760
So I think we have to assume that there are errors here.

407
00:25:22.880 --> 00:25:23.360
OK.

408
00:25:23.390 --> 00:25:25.070
I think that's what we should assume.

409
00:25:25.550 --> 00:25:27.770
But how can we confirm that?

410
00:25:27.980 --> 00:25:35.060
Well, I think the easiest thing we can probably do is just log out the value of this errors here.

411
00:25:35.060 --> 00:25:36.530
So let's do that.

412
00:25:37.160 --> 00:25:41.570
Now I'm going to keep things simple for now and just keep using this info method, but just know that

413
00:25:41.570 --> 00:25:45.500
there are actually a lot of methods that we could use to log information out.

414
00:25:45.740 --> 00:25:47.930
But then we'd need to configure things to.

415
00:25:48.200 --> 00:25:53.990
We'd need to also do some configurations to say like which, which values from which of these methods

416
00:25:53.990 --> 00:25:55.760
do we want to actually be able to see?

417
00:25:55.760 --> 00:25:57.020
And I don't get into all of that.

418
00:25:57.230 --> 00:25:59.900
So we're just going to keep it simple and use info for now.

419
00:26:00.170 --> 00:26:07.490
And and yeah, we'll just do the errors, although I probably should at least label that errors, errors

420
00:26:08.720 --> 00:26:09.200
plus.

421
00:26:09.500 --> 00:26:09.890
OK.

422
00:26:10.100 --> 00:26:11.030
Something like that.

423
00:26:11.510 --> 00:26:11.890
All right.

424
00:26:11.900 --> 00:26:14.510
So now if we try this again, well, let me reload.

425
00:26:14.900 --> 00:26:15.740
Let's reload.

426
00:26:17.970 --> 00:26:19.340
Okay.

427
00:26:20.010 --> 00:26:21.270
Let's see if that already.

428
00:26:21.300 --> 00:26:25.090
Oh, yeah, and we got it already because the request was was just kind of replayed.

429
00:26:25.170 --> 00:26:25.590
OK.

430
00:26:26.100 --> 00:26:26.360
Yeah.

431
00:26:26.430 --> 00:26:28.350
OK, so here's our errors.

432
00:26:28.350 --> 00:26:30.120
I forgot to put a space there.

433
00:26:31.290 --> 00:26:32.490
Let's see.

434
00:26:33.120 --> 00:26:35.890
So one error and it looks like it.

435
00:26:35.910 --> 00:26:36.540
Yeah, there it is.

436
00:26:36.540 --> 00:26:43.050
A K filled error in object person on field photo file name rejected value.

437
00:26:44.370 --> 00:26:44.820
Let's see.

438
00:26:44.820 --> 00:26:46.220
There's a whole lot of stuff here.

439
00:26:46.230 --> 00:26:47.940
Let me go all the way to the end of it.

440
00:26:47.940 --> 00:26:49.590
That might actually be easier.

441
00:26:49.830 --> 00:26:54.990
No matching editors or conversion strategy found for the photo file name string.

442
00:26:55.290 --> 00:26:55.860
OK, yeah.

443
00:26:55.880 --> 00:26:57.900
So I think I can already understand what's happening here.

444
00:26:57.900 --> 00:27:04.080
So it's referring to this multi-part data that came in from the request, and it looks like what it

445
00:27:04.080 --> 00:27:13.050
tried to do is to it tried to take the multipart data from the request and bind that to the photo file

446
00:27:13.050 --> 00:27:15.890
name field of our person class.

447
00:27:15.890 --> 00:27:17.660
So let me just remind you what we're saying here.

448
00:27:17.670 --> 00:27:26.640
So here's the person class and string and spring will try to take all of the key value pairs that are

449
00:27:26.880 --> 00:27:31.920
existing on the incoming request and match them up as best as it can.

450
00:27:32.250 --> 00:27:41.400
So one of those key value pairs is labeled photo file name, and our person class now has a field called

451
00:27:41.400 --> 00:27:44.130
photo file name of type string.

452
00:27:45.610 --> 00:27:46.030
All right.

453
00:27:46.510 --> 00:27:53.200
In addition to the fact that we also have a field here, a parameter here called photo file name as

454
00:27:53.200 --> 00:27:54.880
well of type multipart.

455
00:27:55.150 --> 00:28:03.610
So what's happening is that spring is having no trouble extracting the multi-part file name data from

456
00:28:03.610 --> 00:28:05.770
the request and binding it to this parameter.

457
00:28:05.860 --> 00:28:10.720
That's just fine because the data itself is of type, multi-part file name, so to speak.

458
00:28:10.840 --> 00:28:13.240
And so that matches up really perfectly here.

459
00:28:13.270 --> 00:28:19.960
However, it also thinks that it needs to bind that same data to this field here.

460
00:28:20.650 --> 00:28:27.250
However, this is a string, and it doesn't know now how to take that binary data that it's in the request

461
00:28:27.490 --> 00:28:28.990
and turn it into a string.

462
00:28:28.990 --> 00:28:30.700
It just doesn't know what to do with it.

463
00:28:30.730 --> 00:28:31.180
OK?

464
00:28:31.840 --> 00:28:37.650
What do you think we could do to solve this problem where spring wants to bind request parameter data?

465
00:28:37.660 --> 00:28:41.860
It's technically, I guess, not really a parameter anymore, because now it's like this multi-part

466
00:28:41.860 --> 00:28:42.130
data.

467
00:28:42.130 --> 00:28:51.580
But anyway, it's trying to bind this data of one type in the request to a field of a of another type

468
00:28:51.580 --> 00:28:52.330
type string.

469
00:28:52.750 --> 00:28:56.290
Can you think of what we can do to solve this problem?

470
00:28:57.440 --> 00:28:57.750
OK.

471
00:28:57.770 --> 00:28:58.790
Did you come up with it?

472
00:28:58.880 --> 00:29:05.660
You've already learned how to solve this kind of problem before so you could use a formatter.

473
00:29:06.410 --> 00:29:12.620
Remember when we created a format for displaying the salaries and even for the dates of birth, although

474
00:29:12.620 --> 00:29:19.600
now we're not using that format or here in the table because we're doing a timely thing, but the formatter

475
00:29:19.610 --> 00:29:20.840
class still exists.

476
00:29:20.900 --> 00:29:26.060
Let me open up the project pane here, and you can see here we've got these two format or you've got

477
00:29:26.060 --> 00:29:29.600
a big decimal format and a low cal date format.

478
00:29:29.810 --> 00:29:30.260
OK.

479
00:29:30.740 --> 00:29:38.120
So these classes are registered with spring by putting this component annotation on it, and then they

480
00:29:38.120 --> 00:29:44.990
implement the formatter interface, which is generic so that we can specify what the data type is that

481
00:29:44.990 --> 00:29:46.340
we are talking about.

482
00:29:46.340 --> 00:29:55.190
Converting now format or specifically are designed to convert from some data type to a string and from

483
00:29:55.190 --> 00:29:56.910
a string to a data type.

484
00:29:56.930 --> 00:30:00.050
OK, so we can use a format or perfectly for this.

485
00:30:00.230 --> 00:30:05.330
Now, I don't remember if I mentioned it, but spring has a very similar way of doing conversions that

486
00:30:05.330 --> 00:30:11.060
don't necessarily involve going from a thing to a string and a string to a thing.

487
00:30:11.180 --> 00:30:16.280
If you just want to go from one thing to another thing, for example, you can you can do something

488
00:30:16.280 --> 00:30:21.980
almost identical to this, except instead of implementing format or you would implement converter and

489
00:30:21.980 --> 00:30:27.140
then instead of passing in one generic parameter, you'd pass in two generic parameters, which would

490
00:30:27.140 --> 00:30:29.060
be the two data types, OK.

491
00:30:29.210 --> 00:30:34.340
But if you're just doing something to string and then string to something, then you can just use a

492
00:30:34.340 --> 00:30:36.260
format or and that is all we're doing here.

493
00:30:36.260 --> 00:30:39.870
So all we need to do is create another formatter here.

494
00:30:40.880 --> 00:30:47.720
So I'm going to highlight the format or package there, and then I'm going to do a new Java class and

495
00:30:47.960 --> 00:30:54.770
we will call this multi part file format or because that's what it's going to work with.

496
00:30:56.060 --> 00:30:56.350
All right.

497
00:30:56.360 --> 00:31:01.940
And yes, I will add that to my get stuff, which you won't have, probably.

498
00:31:02.240 --> 00:31:10.160
And then I will say this implements formatter and then the generic type will be multi-part file.

499
00:31:10.460 --> 00:31:10.760
All right.

500
00:31:10.770 --> 00:31:16.670
And then we will let the oh, by the way, be careful here because the the the formatter itself is called

501
00:31:16.670 --> 00:31:17.960
multi-part file format.

502
00:31:18.080 --> 00:31:23.480
So be careful and don't accidentally set your generic type two multi-part file format.

503
00:31:23.570 --> 00:31:23.780
OK.

504
00:31:23.810 --> 00:31:24.440
Don't do that.

505
00:31:24.740 --> 00:31:25.070
All right.

506
00:31:25.100 --> 00:31:26.900
So you want multipart file?

507
00:31:27.200 --> 00:31:30.650
And then we will let the ADC generate our methods here.

508
00:31:30.650 --> 00:31:37.970
And so down here, if we are receiving a multipart file from the request and we need to somehow turn

509
00:31:37.970 --> 00:31:44.780
that into a string representation that can be stored in the person instance, then all we need to do

510
00:31:44.780 --> 00:31:47.390
is call object dot get.

511
00:31:47.600 --> 00:31:50.750
And then we can do something like original file name, right?

512
00:31:50.840 --> 00:31:59.660
Like, so now honestly, I'm not even sure that the reverse case would ever be necessary, so I think

513
00:31:59.660 --> 00:32:01.520
I'm going to leave that null for now.

514
00:32:01.550 --> 00:32:01.970
OK.

515
00:32:02.150 --> 00:32:08.810
And then the last thing we need to do is to annotate this as a component so that spring will know about

516
00:32:08.810 --> 00:32:08.930
it.

517
00:32:09.380 --> 00:32:09.720
All right.

518
00:32:09.740 --> 00:32:12.890
And then let's refresh or reload.

519
00:32:13.280 --> 00:32:19.040
Hey, and look at that as soon as we did that, the request that the browser already really had kind

520
00:32:19.040 --> 00:32:23.780
of cued up, if you want to think of it in this way, went ahead and refreshed the browser, which caused

521
00:32:23.780 --> 00:32:25.850
that that request to be recent.

522
00:32:26.090 --> 00:32:29.120
And now Spring was able to figure out what to do.

523
00:32:29.570 --> 00:32:29.840
Yeah.

524
00:32:29.930 --> 00:32:35.270
And so there's our new person now, so we are now getting.

525
00:32:35.300 --> 00:32:36.830
Let me jump back over to the controller.

526
00:32:36.830 --> 00:32:45.020
So we now are receiving the actual binary data of the file, but we're not doing anything with it other

527
00:32:45.020 --> 00:32:46.840
than just saying, Yep, I got it.

528
00:32:46.850 --> 00:32:49.640
And here's the file name, and here's the size.

529
00:32:49.640 --> 00:32:51.800
But we're not actually like doing anything with it.

530
00:32:52.010 --> 00:32:58.160
So I think we're we need to stop here on this lesson and in the next lesson, we will actually figure

531
00:32:58.160 --> 00:33:00.820
out, OK, now what can we really do with this file?

532
00:33:00.830 --> 00:33:06.290
Because I think what we want to do is we want to take that file the photo file and store it somewhere,

533
00:33:06.290 --> 00:33:06.620
right?

534
00:33:06.650 --> 00:33:08.900
That's what we probably need to be doing.

535
00:33:08.930 --> 00:33:09.290
OK.

536
00:33:09.440 --> 00:33:11.810
So let's do that in the next lesson.
