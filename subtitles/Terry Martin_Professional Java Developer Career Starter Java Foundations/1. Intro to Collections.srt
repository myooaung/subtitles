1
00:00:00,270 --> 00:00:03,720
Congratulations for making it this far through the course.

2
00:00:04,140 --> 00:00:07,680
This is the module where you're going to learn about collections.

3
00:00:07,920 --> 00:00:09,570
So what are collections?

4
00:00:09,750 --> 00:00:14,280
I'm just going to give you a brief intro before we dive into the lessons and code.

5
00:00:14,970 --> 00:00:22,620
So in general, collections are structures that Java provides that allow us to store objects.

6
00:00:23,610 --> 00:00:29,610
One of the easiest ways for me to explain this based on what you've already seen in this course so far

7
00:00:29,610 --> 00:00:30,780
is arrays.

8
00:00:31,170 --> 00:00:35,670
We learned about arrays earlier in the course, and we've used them here and there.

9
00:00:35,850 --> 00:00:44,370
We can create an array to hold instances of of things like primitives so we could have an array of integers.

10
00:00:44,610 --> 00:00:51,900
But we can also use arrays to hold on to instances of objects as well, like person class, for example,

11
00:00:52,230 --> 00:00:53,460
when we create an array.

12
00:00:53,490 --> 00:01:00,060
We have to initialize it with either the number of elements that we're going to put in to the array

13
00:01:00,360 --> 00:01:04,140
or the actual elements at the time of initialization.

14
00:01:04,740 --> 00:01:08,350
In this respect, collections are very similar to arrays.

15
00:01:08,370 --> 00:01:15,900
Generally speaking, they both are structures that allow us to hold on to data of some sort with arrays.

16
00:01:15,900 --> 00:01:19,850
The data can be primitives or objects with collections.

17
00:01:19,860 --> 00:01:26,520
They can only be objects, though there are some basic workarounds for certain primitives, particularly

18
00:01:26,520 --> 00:01:29,400
numbers, because we have the wrapper classes.

19
00:01:29,760 --> 00:01:35,130
So then you should be wondering, OK, well, if both arrays and collections allow us to hold on to

20
00:01:35,130 --> 00:01:37,680
objects, why do we need collections?

21
00:01:37,950 --> 00:01:44,820
And one of the biggest differences between arrays and collections is the fact that arrays cannot be

22
00:01:44,820 --> 00:01:46,350
allocated dynamically.

23
00:01:46,470 --> 00:01:52,230
That is to say, when we create an array, we have to initialize it either with the actual objects that

24
00:01:52,230 --> 00:01:57,540
we're going to put into it or with the size that that array is going to be.

25
00:01:57,900 --> 00:02:04,080
And once we've initialized that array, you can't change its size, but collections are dynamic.

26
00:02:04,260 --> 00:02:11,880
We can create a collection at one point and add objects to it at any point after its creation, typically.

27
00:02:12,120 --> 00:02:16,380
So this means that collections tend to be very flexible for us to use.

28
00:02:16,710 --> 00:02:24,990
And in addition to being able to dynamically allocate and add objects to collections, collections tend

29
00:02:24,990 --> 00:02:29,250
to have a wide array of super useful methods on them.

30
00:02:29,250 --> 00:02:31,400
Whereas arrays do not have methods.

31
00:02:31,410 --> 00:02:35,190
They have a property or two that we commonly will use like to get the length.

32
00:02:35,490 --> 00:02:41,070
But there are no methods directly on arrays, but collections have numerous methods for doing a lot

33
00:02:41,070 --> 00:02:45,690
of things, like adding and removing objects to and from the collection.

34
00:02:46,320 --> 00:02:52,710
Additionally, there are a lot of powerful techniques we can use with collections to do all sorts of

35
00:02:52,710 --> 00:02:54,930
things that we're going to see coming up.

36
00:02:55,320 --> 00:03:02,040
One last thing I want to mention about collections I waited until now to introduce them to you because

37
00:03:02,040 --> 00:03:08,550
I wanted you to know about loops, because collections are frequently used extensively with loops.

38
00:03:08,760 --> 00:03:17,010
And I also wanted you to learn about interfaces because the entire Collections API of Java is heavily

39
00:03:17,010 --> 00:03:21,180
predicated on the use and knowledge of interfaces.

40
00:03:21,420 --> 00:03:25,710
And so I didn't want you learning to use these things without really understanding.

41
00:03:25,920 --> 00:03:26,290
OK?

42
00:03:26,310 --> 00:03:29,340
Why do we instantiate it this way, what we stored in this other way?

43
00:03:29,550 --> 00:03:35,610
Let me take one step back and explain a tiny bit more about the Java Collections framework in general.

44
00:03:36,090 --> 00:03:44,220
So the Java Collections framework consists of a hierarchy of interfaces and then a set of classes that

45
00:03:44,220 --> 00:03:46,170
implement those interfaces.

46
00:03:46,680 --> 00:03:51,840
At the top of that interface hierarchy is the main interface called collection.

47
00:03:52,140 --> 00:03:59,760
And then there are several other interfaces that actually extend from collection, such as list, set

48
00:04:00,180 --> 00:04:04,390
queue and deck off to the side.

49
00:04:04,440 --> 00:04:08,430
There's another top level interface called Map.

50
00:04:08,880 --> 00:04:16,950
So Map doesn't actually extend from collection, but it is still part of the Java Collections framework

51
00:04:17,070 --> 00:04:23,670
and definitely is a collection in the English sense of the word, if not the interface, sense of the

52
00:04:23,670 --> 00:04:29,490
word from the second level interfaces such as set and list.

53
00:04:29,940 --> 00:04:37,290
There are concrete implementing classes that is, classes that implement those interfaces will be starting

54
00:04:37,290 --> 00:04:44,550
off learning what is probably the most commonly used pair of collections, interface and implementation,

55
00:04:44,550 --> 00:04:46,140
which is called the list.

56
00:04:46,620 --> 00:04:51,230
So without further ado, let's jump in and start learning about collections.
