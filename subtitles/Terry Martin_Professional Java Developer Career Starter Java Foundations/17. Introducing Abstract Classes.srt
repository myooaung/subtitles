1
00:00:00,360 --> 00:00:04,680
All right, so now I want to present you with another scenario.

2
00:00:04,830 --> 00:00:15,090
So here is the output of our current code iterates over each of the employees and presents how much

3
00:00:15,090 --> 00:00:18,330
their salary is going to be right now.

4
00:00:18,330 --> 00:00:26,640
What if we also wanted to calculate a bonus from the salary of the way the bonuses work at this particular

5
00:00:26,640 --> 00:00:32,640
company is that they are just a simple, flat percentage, let's say, of the salary itself.

6
00:00:32,670 --> 00:00:33,070
OK.

7
00:00:33,720 --> 00:00:35,340
So how could we do that?

8
00:00:35,970 --> 00:00:45,270
So one way we could consider doing it, I suppose, would be to go to each of the subclasses where we

9
00:00:45,270 --> 00:00:47,670
currently have a get salary method right?

10
00:00:47,670 --> 00:00:50,510
And we could do something like public.

11
00:00:51,300 --> 00:00:52,020
Now this.

12
00:00:52,050 --> 00:00:54,320
Let's see if we make this a percentage, I don't know.

13
00:00:54,330 --> 00:00:55,800
It's probably going to end up being a double.

14
00:00:56,160 --> 00:01:02,550
So we could do something like get bonus and then return the bonus.

15
00:01:02,550 --> 00:01:04,380
And maybe it's based on the salary.

16
00:01:04,380 --> 00:01:06,570
So salary time's on it.

17
00:01:06,870 --> 00:01:10,050
So like, you know, plus 10 percent or something like that.

18
00:01:10,140 --> 00:01:16,530
OK, now if this is the formula that we would use companywide, right?

19
00:01:16,560 --> 00:01:23,820
So no matter whether you were a programmer, manager, CEO or analyst, your bonus is always just going

20
00:01:23,820 --> 00:01:27,660
to be a flat 10 percent on top of your salary.

21
00:01:27,690 --> 00:01:38,340
Let's say something like that, then that would mean that this code right here would simply be duplicated

22
00:01:38,340 --> 00:01:40,980
across each of those subtypes.

23
00:01:41,010 --> 00:01:41,340
Right?

24
00:01:42,060 --> 00:01:47,400
Does that sound like a good idea now that you've learned a few things that we could do that it would

25
00:01:47,400 --> 00:01:47,850
work?

26
00:01:48,150 --> 00:01:50,340
Does that seem like something we should do, though?

27
00:01:51,090 --> 00:01:58,560
Probably not, because that would just be blatant duplication of code with with no real benefit there.

28
00:01:59,100 --> 00:02:02,160
So what's an alternative that we might be able to do?

29
00:02:03,030 --> 00:02:03,450
I can.

30
00:02:03,450 --> 00:02:05,940
I think I can hear you thinking and talking.

31
00:02:06,000 --> 00:02:06,380
Yes.

32
00:02:06,380 --> 00:02:13,110
So if you just said, well, we could just implement the get bonus method on the superclass.

33
00:02:13,260 --> 00:02:15,390
You would probably be on to something.

34
00:02:15,390 --> 00:02:16,650
So let's see what that would look like.

35
00:02:16,650 --> 00:02:19,890
So we could go into the employee class here.

36
00:02:20,490 --> 00:02:25,710
And we already have this kind of placeholder get salary method, in fact.

37
00:02:25,710 --> 00:02:31,650
And so we could just maybe throw a get bonus method right here.

38
00:02:31,980 --> 00:02:39,420
And now all of the subclasses will inherit this get bonus method right off the bat.

39
00:02:39,780 --> 00:02:41,760
And they can all benefit from it.

40
00:02:41,760 --> 00:02:46,110
And we don't duplicate this method 15000 times or in this case, four times, right?

41
00:02:46,230 --> 00:02:47,970
We just put it in one nice place.

42
00:02:48,120 --> 00:02:50,280
So pretty straightforward, right?

43
00:02:50,520 --> 00:02:50,980
OK.

44
00:02:51,060 --> 00:02:55,980
Now there's one more thing I want to lay out, though in this scenario.

45
00:02:56,700 --> 00:03:04,500
So right now, we are actually implementing the get salary method, right?

46
00:03:04,950 --> 00:03:06,470
So let's do a couple of things now.

47
00:03:06,480 --> 00:03:13,740
Currently, our employee superclass is still implementing the employee interface, and I just left that

48
00:03:13,740 --> 00:03:16,320
there just for illustrative purposes.

49
00:03:16,590 --> 00:03:22,890
I'm going to go ahead and actually remove this Snellville, because we actually never really needed

50
00:03:22,890 --> 00:03:23,070
it.

51
00:03:23,850 --> 00:03:30,110
And as soon as I do that, my employee class gets an error and the error is a small one.

52
00:03:30,120 --> 00:03:36,660
It's just saying that, hey, since you removed that interface, this get salary method was being marked

53
00:03:36,660 --> 00:03:41,160
with this annotation called override, and you're no longer actually overwriting anything.

54
00:03:41,160 --> 00:03:42,600
So let me explain that real quick.

55
00:03:43,080 --> 00:03:50,970
When we implement an interface on a class, we are forced to make sure that we have an implementation

56
00:03:50,970 --> 00:03:53,160
of the methods on that interface.

57
00:03:53,400 --> 00:04:00,180
So the I employee interface defines a get salary method with this signature here.

58
00:04:00,600 --> 00:04:09,510
And so any class that implements that interface must implement the get salary method.

59
00:04:09,840 --> 00:04:17,100
And when we implement that method, we can flag that we are implementing it with an at override annotation.

60
00:04:17,190 --> 00:04:19,470
In this case, we didn't put this annotation here.

61
00:04:19,470 --> 00:04:26,940
The ADP generated that for us whenever it was that we put the interface there or pulled this up from

62
00:04:26,940 --> 00:04:28,970
the previous class, OK?

63
00:04:29,100 --> 00:04:32,340
It put an override here, but now we're not overwriting anything.

64
00:04:32,670 --> 00:04:38,580
There is no interface or super class from this class perspective where we're, you know, getting this

65
00:04:38,580 --> 00:04:39,300
get salaries.

66
00:04:39,300 --> 00:04:40,890
So now this is an error.

67
00:04:41,040 --> 00:04:42,950
And it just needs to be removed.

68
00:04:42,960 --> 00:04:45,390
And now no more errors on the class.

69
00:04:45,540 --> 00:04:46,860
So that's what that was.

70
00:04:47,400 --> 00:04:47,800
All right.

71
00:04:47,820 --> 00:04:54,900
Now here's the next scenario that I want to lay out, though, because we have this get salary method

72
00:04:54,900 --> 00:04:59,580
defined on the superclass employee technically.

73
00:05:00,430 --> 00:05:06,130
In these subclasses here, we don't even have to have a get salary method anymore.

74
00:05:06,340 --> 00:05:15,200
So if I were to just comment this out like so that doesn't break anything.

75
00:05:15,220 --> 00:05:18,430
Well, yeah, that doesn't cause any errors.

76
00:05:18,670 --> 00:05:22,840
However, now our calculations will be wrong.

77
00:05:22,930 --> 00:05:30,700
So there's nothing forcing us to implement a specific version of the get salary method that could be

78
00:05:30,700 --> 00:05:31,180
good.

79
00:05:31,180 --> 00:05:32,100
That could be bad.

80
00:05:32,110 --> 00:05:34,000
It depends on what you're needing.

81
00:05:34,780 --> 00:05:45,220
It could be that someone who wants to create another type of employee might not realize that in order

82
00:05:45,220 --> 00:05:52,840
for that employee to get their salary calculated properly, they needed to implement the get salary

83
00:05:52,840 --> 00:05:53,910
method themselves.

84
00:05:53,920 --> 00:05:59,650
They might not realize that with this current approach because there's nothing forcing us to do it,

85
00:05:59,830 --> 00:06:01,570
at least with the interface.

86
00:06:01,720 --> 00:06:08,080
Back before we had the superclass here, the interface would have forced us to implement the get salary

87
00:06:08,080 --> 00:06:08,440
method.

88
00:06:08,450 --> 00:06:14,050
But in this case, even though this programmer is implementing the employee, there's nothing complaining

89
00:06:14,050 --> 00:06:15,790
about the fact that there's no get salary.

90
00:06:15,790 --> 00:06:21,550
And the reason it's not complaining is because we do how they get salary method on the superclass.

91
00:06:21,550 --> 00:06:29,170
And so the interface is happy as long as somebody is implementing the get salary method in the class

92
00:06:29,170 --> 00:06:30,700
hierarchy structure.

93
00:06:30,940 --> 00:06:33,250
The interface really Java.

94
00:06:33,250 --> 00:06:35,230
The JDK is happy.

95
00:06:35,260 --> 00:06:35,740
OK.

96
00:06:36,070 --> 00:06:38,740
But in reality, this isn't good, right?

97
00:06:39,010 --> 00:06:44,980
We know that this would actually doesn't break our compilation of the code, but it does break the desired

98
00:06:45,190 --> 00:06:45,880
outcome.

99
00:06:46,030 --> 00:06:46,430
Right?

100
00:06:46,450 --> 00:06:51,490
Because we're no longer conveying how to handle salaries specifically for a programmer.

101
00:06:51,700 --> 00:06:53,170
So what can we do about this?

102
00:06:53,830 --> 00:06:54,250
All right.

103
00:06:54,250 --> 00:07:00,190
So well, there is something we can kind of do about this along the lines of what we've already started

104
00:07:00,190 --> 00:07:01,060
doing here.

105
00:07:01,480 --> 00:07:04,720
If we go back to the employee class.

106
00:07:06,370 --> 00:07:17,230
Let us first question what if we didn't want to supply this basically default implementation of get

107
00:07:17,230 --> 00:07:19,380
salary, which is kind of a placeholder?

108
00:07:19,390 --> 00:07:20,920
What if we didn't want to do this?

109
00:07:21,160 --> 00:07:31,000
What if we wanted to ensure that subclasses of employee do definitely implement their own implementation

110
00:07:31,000 --> 00:07:33,070
of the get salary method?

111
00:07:33,250 --> 00:07:35,830
How can we ensure that they will do that?

112
00:07:35,950 --> 00:07:39,310
That way, we make sure that no one forgets to implement it, right?

113
00:07:40,060 --> 00:07:41,740
Well, there's a way to do this.

114
00:07:42,220 --> 00:07:50,620
So so far, we've learned about interfaces and we've learned a little bit here about super classes in

115
00:07:50,620 --> 00:07:58,000
general and how it's nice to use a super class to pull up any potentially duplicated code into one central

116
00:07:58,000 --> 00:08:00,880
place among a class hierarchy.

117
00:08:00,910 --> 00:08:01,300
Right.

118
00:08:01,780 --> 00:08:06,700
Well, now we're going to learn about another type of class, which is called an abstract class.

119
00:08:06,730 --> 00:08:07,180
OK.

120
00:08:07,840 --> 00:08:12,460
So first, I'll show you how to make one, and then we'll talk a little more about what its uses are.

121
00:08:12,520 --> 00:08:21,140
So to make an abstract class, all we do is just put the word abstract in front of the keyword class.

122
00:08:21,160 --> 00:08:25,000
OK, and now we've made an abstract class.

123
00:08:25,450 --> 00:08:30,110
Now on its own, that's not going to change very much.

124
00:08:30,640 --> 00:08:38,140
Other than one thing that I'll show you real quick now that we've declared that the employee is an abstract

125
00:08:38,140 --> 00:08:38,890
class.

126
00:08:40,030 --> 00:08:45,730
Remember when I showed you this trick that if we wanted to get around this null issue, one way that

127
00:08:45,730 --> 00:08:51,850
we could do so is by just instantiating the employee class directly like this.

128
00:08:57,520 --> 00:08:59,050
Well, now we can't do that.

129
00:08:59,770 --> 00:09:06,370
And the reason is because I've just declared the employee class to be abstract, which means it's not

130
00:09:06,370 --> 00:09:15,250
a class that is meant for you to create instances of it is meant only to serve as a super class for

131
00:09:15,280 --> 00:09:21,640
other classes, but it is not meant to create a standalone object instances on its own.

132
00:09:21,670 --> 00:09:22,150
OK.

133
00:09:22,270 --> 00:09:28,030
And so now I'm in error if I tried to create this, and in fact, the message tells me employee is abstract

134
00:09:28,030 --> 00:09:29,230
cannot be instantiated.

135
00:09:29,230 --> 00:09:29,950
So there you go.

136
00:09:30,310 --> 00:09:34,630
All right, so you can't instantiate an abstract class.

137
00:09:34,750 --> 00:09:35,080
All right.

138
00:09:35,080 --> 00:09:36,940
So you may be wondering, OK, then what's it?

139
00:09:36,940 --> 00:09:38,140
What's it any good for?

140
00:09:38,380 --> 00:09:40,540
So let me undo this real quick.

141
00:09:41,200 --> 00:09:41,500
All right.

142
00:09:41,500 --> 00:09:42,640
Put that back to null.

143
00:09:42,850 --> 00:09:45,100
Go back to the employee class here.

144
00:09:45,940 --> 00:09:55,780
So what it's good for is if I have a method that I want to make use of in my super class, for example,

145
00:09:56,110 --> 00:10:00,640
but I don't want to implement it in my super class.

146
00:10:00,640 --> 00:10:07,720
I want to make sure that subclasses actually provide an implementation for that method.

147
00:10:08,440 --> 00:10:12,580
I first must declare that the class is abstract.

148
00:10:12,580 --> 00:10:14,650
That's step one, as I've done.

149
00:10:14,860 --> 00:10:22,810
And then step two, I can declare a method to be abstract as well.

150
00:10:23,350 --> 00:10:29,830
Now, when I do this, the method cannot have an implementation here.

151
00:10:30,160 --> 00:10:32,710
So now I need to get rid of all of this.

152
00:10:34,780 --> 00:10:39,970
So it actually looks pretty much like a method defined on an interface.

153
00:10:39,970 --> 00:10:41,320
It's it basically is.

154
00:10:41,320 --> 00:10:50,230
In fact, it's pretty much that it's this is kind of a hybrid, if you will, of a regular super class

155
00:10:50,230 --> 00:10:53,110
and an interface kind of all together.

156
00:10:53,290 --> 00:10:59,620
So what this is basically saying is I have this class here that can do real work with real methods.

157
00:10:59,620 --> 00:11:05,710
But here's one method that I don't want to provide provide a concrete implementation for.

158
00:11:05,860 --> 00:11:14,590
I want to flag this method such that subclasses of the employee class must implement this method in

159
00:11:14,590 --> 00:11:17,500
order for the class hierarchy to be valid.

160
00:11:17,530 --> 00:11:18,040
OK.

161
00:11:18,940 --> 00:11:23,110
So if I go down to one of these subclasses like programmer?

162
00:11:24,840 --> 00:11:30,510
I'm in error now, see this red mark here, and if I hover over this, it's going to tell me the programmer

163
00:11:30,510 --> 00:11:37,020
must either be declared abstract or implement abstract method, get salary.

164
00:11:37,170 --> 00:11:40,830
So it's complaining that I don't have a get salary method here.

165
00:11:40,830 --> 00:11:46,260
So I either have to make this class abstract, which would mean that I'm going to kind of pass the buck

166
00:11:46,260 --> 00:11:52,590
down to yet another level of class hierarchy, which, by the way, be careful with that you don't want

167
00:11:52,590 --> 00:11:58,110
like, you know, three, four or five levels of hierarchy when you're doing object orientation, that's

168
00:11:58,110 --> 00:11:59,070
really, really bad.

169
00:11:59,250 --> 00:12:00,490
Keep it pretty shallow.

170
00:12:00,510 --> 00:12:00,960
OK.

171
00:12:01,320 --> 00:12:04,530
One two levels is is usually good.

172
00:12:04,530 --> 00:12:09,390
If you're getting two, three and four, you probably want to step back and ask yourself, Am I going

173
00:12:09,390 --> 00:12:10,260
crazy with this?

174
00:12:10,320 --> 00:12:11,310
And you probably are.

175
00:12:11,880 --> 00:12:12,250
All right.

176
00:12:12,270 --> 00:12:23,610
So now if I uncomment this, that error went away, right?

177
00:12:24,060 --> 00:12:33,420
And so now I am forced to implement the get salary method on all subclasses of the employee.

178
00:12:33,660 --> 00:12:38,160
And therefore, I can't accidentally forget to implement this.

179
00:12:38,170 --> 00:12:45,810
So if some a new programmer comes along and decides they want to define yet another type of employee,

180
00:12:46,020 --> 00:12:47,010
they can do so.

181
00:12:47,190 --> 00:12:52,950
But as soon as they do, they're going to get an error message telling them, Hey, you need to make

182
00:12:52,950 --> 00:12:56,790
sure that you implement the get salary method.

183
00:12:57,300 --> 00:13:05,790
So armed with this knowledge, let me show you what I was actually wanting us to do with this additional

184
00:13:05,790 --> 00:13:07,140
little feature here.

185
00:13:07,140 --> 00:13:14,010
So we go back to the employee superclass now, where we now have declared the get salary method to be

186
00:13:14,010 --> 00:13:17,190
abstract, and therefore it is not implemented here.

187
00:13:17,340 --> 00:13:19,800
It must be implemented in the subclasses.

188
00:13:20,580 --> 00:13:28,830
So what's cool is we can still refer to this method in other places as if it's already implemented right

189
00:13:29,130 --> 00:13:34,170
because we can trust that you're not going to, you know, have subclasses of this and this method is

190
00:13:34,170 --> 00:13:35,430
not going to be implemented.

191
00:13:35,700 --> 00:13:39,180
So one one one, the kind of neat things we can do is down here.

192
00:13:39,180 --> 00:13:40,830
Look at this two string method.

193
00:13:41,100 --> 00:13:46,860
We are referring to the get salary method, which is sort of referring to this, even though it's not

194
00:13:46,860 --> 00:13:48,740
actually technically implemented yet.

195
00:13:48,750 --> 00:13:50,950
So we're sort of like projecting into the future.

196
00:13:50,950 --> 00:13:57,420
We're saying I don't know how the get salary method is going to be implemented, but I do know that

197
00:13:57,420 --> 00:13:58,810
it's supposed to return an end.

198
00:13:58,830 --> 00:14:04,530
So I'm going to just trust that there will be an implementation of this method and therefore let me

199
00:14:04,530 --> 00:14:08,520
continue to call it from within my two string method.

200
00:14:08,670 --> 00:14:15,930
And so what'll happen now is that as was already happening before actually is that the get salary method

201
00:14:15,930 --> 00:14:20,210
will actually execute from the subclasses.

202
00:14:20,220 --> 00:14:23,040
Right now, we can do one more thing here.

203
00:14:23,430 --> 00:14:31,620
Let's say that we want to go ahead and present the bonus also so we can add that in now percent.

204
00:14:31,620 --> 00:14:32,250
Yes.

205
00:14:32,520 --> 00:14:34,020
Let me make some room here.

206
00:14:35,220 --> 00:14:43,710
So we'll just add another another argument on the end of here money format format and then we'll just

207
00:14:43,710 --> 00:14:46,950
call get bonus like so.

208
00:14:47,250 --> 00:14:58,290
And so what's cool is the get bonus method also depends on this future to be implemented on subclasses

209
00:14:58,290 --> 00:15:01,710
that this class doesn't even necessarily know anything about.

210
00:15:01,710 --> 00:15:03,030
But it's saying, hey.

211
00:15:03,480 --> 00:15:07,260
However, it is that subclasses will implement the get salary method.

212
00:15:07,260 --> 00:15:13,800
Whatever that is, take that number and multiply it times one point one zero to get the bonus right.

213
00:15:14,910 --> 00:15:16,170
So this is really cool.

214
00:15:16,170 --> 00:15:18,830
And actually, there's a name for doing this.

215
00:15:18,840 --> 00:15:21,690
It's called the template method pattern.

216
00:15:21,900 --> 00:15:29,550
What we have done here is we've created a template for a method which will be actually implemented in

217
00:15:29,550 --> 00:15:30,630
the subclasses.

218
00:15:30,810 --> 00:15:32,380
But this is the template for it.

219
00:15:32,400 --> 00:15:37,620
And because it's a template, it's like a cut out kind of like the rest of this class can still kind

220
00:15:37,620 --> 00:15:42,240
of pretend like it's implemented and make calls to it code wise, right?

221
00:15:42,270 --> 00:15:44,280
But actually, it'll be implemented later.

222
00:15:44,610 --> 00:15:44,960
All right.

223
00:15:44,970 --> 00:15:47,340
So super useful pattern.

224
00:15:47,340 --> 00:15:54,550
By the way, there are a lot of patterns like this one that are more formally called design patterns.

225
00:15:54,570 --> 00:15:55,050
OK.

226
00:15:55,200 --> 00:16:03,300
So a lot of smart programmers over the decades have kind of discovered and then formalized common programming

227
00:16:03,300 --> 00:16:06,870
patterns that they have encountered themselves or seen.

228
00:16:06,870 --> 00:16:14,700
Others do that they find to be highly advantageous to writing good code, and they have decided to name

229
00:16:14,820 --> 00:16:16,260
some of those patterns.

230
00:16:16,410 --> 00:16:18,270
And so this is one of those patterns.

231
00:16:18,270 --> 00:16:21,360
It's called the template method pattern.

232
00:16:21,480 --> 00:16:21,990
OK.

233
00:16:22,080 --> 00:16:22,520
All right.

234
00:16:22,530 --> 00:16:23,640
So we've added.

235
00:16:23,720 --> 00:16:31,760
This so let's jump back over to the main class now, and let's just run this again.

236
00:16:32,360 --> 00:16:35,060
And now we should see the bonuses coming out as well.

237
00:16:37,490 --> 00:16:43,700
Hey, there we go, and yeah, I'm going to assume that the math is is good.

238
00:16:44,410 --> 00:16:45,290
Pretty sure it is.

239
00:16:46,370 --> 00:16:47,930
So yeah, there we go.

240
00:16:48,050 --> 00:16:53,450
And we only have to go to one place to make this change, which was just the the superclass of the employee.

241
00:16:53,750 --> 00:16:56,870
So that's a really cool pattern to to use.

242
00:16:57,140 --> 00:17:03,970
So let's recap real quick the difference between using the abstract class and the interface and just

243
00:17:03,980 --> 00:17:06,230
a regular concrete superclass.

244
00:17:06,260 --> 00:17:06,590
Right?

245
00:17:06,950 --> 00:17:08,420
So we'll start with the interface.

246
00:17:08,600 --> 00:17:16,640
So if you've got a bunch of classes like analysts, CEO, manager and programmer, then they all implement

247
00:17:16,640 --> 00:17:23,840
one or more methods that take input or spit out output of the same type.

248
00:17:24,020 --> 00:17:28,190
But internally, they do something different, which is the case here.

249
00:17:28,220 --> 00:17:28,640
Right?

250
00:17:28,970 --> 00:17:35,540
Our get salary methods are all doing something a little bit different internally, a little bit different

251
00:17:35,540 --> 00:17:40,160
there, but they all return a salary right of some sort.

252
00:17:40,460 --> 00:17:51,320
And if those classes don't have anything else in common, such as behavior, implementation or data

253
00:17:51,530 --> 00:17:59,780
in common, then an interface might be a good way to kind of tie them all together so that you can treat

254
00:17:59,780 --> 00:18:03,680
them all as the same thing from the perspective of client code.

255
00:18:03,680 --> 00:18:09,710
And when I say client code, I mean, in this case, the main class of this main class is making use

256
00:18:09,710 --> 00:18:12,980
of what these classes here can do, right?

257
00:18:13,190 --> 00:18:18,800
So the main class could be said to be a client of these other classes.

258
00:18:18,810 --> 00:18:22,430
It uses what these other classes can provide, right?

259
00:18:22,430 --> 00:18:28,100
Which in this case is they can provide a string and they can provide a salary.

260
00:18:28,130 --> 00:18:28,610
OK.

261
00:18:29,090 --> 00:18:35,990
So when you have that kind of situation where they don't share data and they don't share implementation

262
00:18:35,990 --> 00:18:44,420
either, but they do share some general characteristic like, Hey, we all know how to provide a salary.

263
00:18:44,870 --> 00:18:51,290
You can tie them all together and treat them all the same from from a third party perspective in the

264
00:18:51,290 --> 00:18:53,630
main class or would be the third party perspective.

265
00:18:53,810 --> 00:18:57,110
And you can do that by tying them all together with an interface.

266
00:18:57,320 --> 00:19:04,550
And then just referring to all of them via that interface, which which originally was our employee

267
00:19:04,550 --> 00:19:04,940
class.

268
00:19:04,940 --> 00:19:07,630
And then later on, we evolved it to be I employee.

269
00:19:07,640 --> 00:19:08,300
But you get it.

270
00:19:08,330 --> 00:19:08,660
OK.

271
00:19:08,780 --> 00:19:11,780
So that's a good use for an interface now.

272
00:19:11,780 --> 00:19:19,430
On the other hand, if you have two or more classes that actually share some of the same data, or at

273
00:19:19,430 --> 00:19:27,140
least they can share some of the same data and or they can also share some of the same implementation,

274
00:19:27,140 --> 00:19:28,580
some of the same code.

275
00:19:28,610 --> 00:19:28,970
Right.

276
00:19:29,330 --> 00:19:35,750
That might be a good candidate for a super class or a class hierarchy.

277
00:19:35,780 --> 00:19:36,260
OK.

278
00:19:36,380 --> 00:19:39,470
So just to revisit here the employee class.

279
00:19:39,740 --> 00:19:44,960
So some of the same implementation that's being shared here is like the constructor here.

280
00:19:45,170 --> 00:19:50,900
In fact, the data end and some of the same data and implementation are being shared here.

281
00:19:51,080 --> 00:19:57,320
All of our classes, all of our subclasses have shared these fields, the last name, first name, date

282
00:19:57,320 --> 00:19:57,650
of birth.

283
00:19:58,010 --> 00:20:03,330
They happen to also share quite a number of these other fields the date, format or number, formatter

284
00:20:03,350 --> 00:20:04,570
and things of that sort.

285
00:20:04,580 --> 00:20:09,680
I wouldn't really call these data, though in a generic, object oriented sense.

286
00:20:09,680 --> 00:20:15,770
These are more like really deep internal implementation features, if you will, but definitely the

287
00:20:15,770 --> 00:20:17,180
first name, last name and date of birth.

288
00:20:17,330 --> 00:20:23,300
Our shared data between all of these four classes not shared in the sense that they're sharing data,

289
00:20:23,300 --> 00:20:28,340
but shared in the sense that all of those subclasses have these same properties, right?

290
00:20:28,640 --> 00:20:32,810
And so why duplicate the definition of those properties across four classes?

291
00:20:32,810 --> 00:20:36,020
We can just consolidate them all into one class.

292
00:20:36,290 --> 00:20:42,740
And then the way that we get those properties populated or initialized can all be done in one place

293
00:20:42,740 --> 00:20:45,890
as well, which we're doing right here in the constructor.

294
00:20:46,190 --> 00:20:53,420
And then now we also happen to have this get bonus method, which is also the same implementation across

295
00:20:53,510 --> 00:20:55,040
all four classes.

296
00:20:55,070 --> 00:20:55,490
OK.

297
00:20:55,880 --> 00:21:03,710
So that's a good case for creating a class hierarchy with a super class, for example, as we initially

298
00:21:03,710 --> 00:21:06,260
had done and then an abstract class.

299
00:21:06,680 --> 00:21:14,030
OK, so with an abstract class very, very similar to just a regular superclass, except two things

300
00:21:14,930 --> 00:21:23,570
we don't want to permit anyone to ever be able to instantiate the abstract class itself, maybe because

301
00:21:23,570 --> 00:21:28,790
by itself, it's just not very meaningful could be a number of reasons why we might not want to allow

302
00:21:28,790 --> 00:21:29,450
them to do that.

303
00:21:29,450 --> 00:21:35,840
Or we may not care too much one way or the other about that, but maybe we want to make sure that we

304
00:21:35,840 --> 00:21:36,950
force subgroup.

305
00:21:36,980 --> 00:21:40,220
Classes to implement certain methods.

306
00:21:40,250 --> 00:21:45,650
OK, like I get salary method here, we want to make sure that there's no possibility that people who

307
00:21:45,650 --> 00:21:48,290
write subclasses could forget to implement that.

308
00:21:48,470 --> 00:21:54,980
And so we can declare that method abstract, but we can't do that unless the whole entire class is also

309
00:21:54,980 --> 00:21:55,880
abstract.

310
00:21:55,910 --> 00:21:56,420
OK.

311
00:21:56,870 --> 00:22:02,330
And then that opens up the possibility of using the template pattern, the template method pattern and

312
00:22:02,330 --> 00:22:03,590
cool things like that.

313
00:22:04,010 --> 00:22:04,370
All right.

314
00:22:04,380 --> 00:22:12,620
So I'm going to wrap up this lesson on the abstract class, and we will take a look at yet another cool

315
00:22:12,620 --> 00:22:14,740
thing that we can do in the next lesson.

316
00:22:14,750 --> 00:22:15,580
I will see you there.
