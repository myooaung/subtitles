WEBVTT
1
00:00:00.180 --> 00:00:02.850
So in this next lesson, and this is going to be a good one.

2
00:00:03.090 --> 00:00:08.430
Let's implement the ability for our people to be associated with their children.

3
00:00:08.460 --> 00:00:08.910
OK.

4
00:00:09.060 --> 00:00:15.990
So in other words, you could have a person instance and we can specify children of that person and

5
00:00:15.990 --> 00:00:21.750
we can save the person and save all of the kids and eventually will be loading up the person with all

6
00:00:21.750 --> 00:00:22.740
their kids, too.

7
00:00:22.920 --> 00:00:28.020
So this is going to be really, really powerful because at least in my own professional experience,

8
00:00:28.020 --> 00:00:34.530
I feel like this use case is actually the most common type of use case that I have experienced when

9
00:00:34.530 --> 00:00:35.910
working with databases.

10
00:00:36.120 --> 00:00:43.650
And this is called a one to many relationship because you'll have one parent or one person who can have

11
00:00:43.860 --> 00:00:47.160
many children associated with him or her.

12
00:00:47.190 --> 00:00:47.550
Right.

13
00:00:47.730 --> 00:00:49.770
So it's a one to many relationship.

14
00:00:49.980 --> 00:00:56.460
So the other use cases that we've implemented so far, where we are associating an address with a field

15
00:00:56.460 --> 00:01:03.000
of a person have generally been more like one to one relationships, even though kind of sort of one

16
00:01:03.000 --> 00:01:06.450
person can have, in this case, two addresses.

17
00:01:06.660 --> 00:01:12.390
But because we're not saving those addresses as a collection of addresses and they are just individual

18
00:01:12.390 --> 00:01:16.290
addresses, the relationship feels more like a one to one mapping.

19
00:01:16.440 --> 00:01:21.390
But now we're going to do a one to many mapping one parent to multiple children.

20
00:01:21.390 --> 00:01:22.740
So let's see how to do this.

21
00:01:23.070 --> 00:01:28.530
So first thing, let's go ahead and just start in our tests again, and I think we can duplicate either

22
00:01:28.530 --> 00:01:31.770
of these tests now because they are pretty much the same thing.

23
00:01:31.950 --> 00:01:32.250
All right.

24
00:01:32.260 --> 00:01:36.600
So I think we'll do something a little bit similar to what we're doing down here.

25
00:01:37.170 --> 00:01:41.970
But instead of copying, I think I'm going to just create a brand new one because the address parts

26
00:01:41.970 --> 00:01:43.830
aren't pertinent for us now.

27
00:01:45.060 --> 00:01:50.160
Public void can save a person with children.

28
00:01:51.890 --> 00:01:52.560
Perhaps.

29
00:01:52.640 --> 00:01:57.890
All right, and so we'll start off with a person, and I will just duplicate this one here and bring

30
00:01:58.130 --> 00:01:59.630
him down, John.

31
00:02:00.440 --> 00:02:03.590
And then I want to start adding some children.

32
00:02:03.800 --> 00:02:09.620
Now I want to show you a common pattern that we can use in Java when we are making these one to many

33
00:02:09.620 --> 00:02:12.050
associations in Java code.

34
00:02:12.530 --> 00:02:18.050
And so what we're going to do now, we want to create some children for John and then associate in Java

35
00:02:18.050 --> 00:02:20.450
code first, the children with John.

36
00:02:20.870 --> 00:02:25.790
And we could do it kind of the way we're doing it with the address where we just create a bunch of addresses

37
00:02:25.790 --> 00:02:27.800
or in this case, we create a bunch of people.

38
00:02:27.950 --> 00:02:30.110
And by the way, I mean, obviously, children are people, right?

39
00:02:30.110 --> 00:02:31.250
I'm sorry, I didn't mention this.

40
00:02:31.490 --> 00:02:35.810
We're going to model the child as a person because children are people.

41
00:02:35.810 --> 00:02:37.590
Write their first names, last names.

42
00:02:37.610 --> 00:02:39.540
They live in a place, et cetera, et cetera.

43
00:02:39.560 --> 00:02:40.670
So they are a person.

44
00:02:40.880 --> 00:02:45.410
So we will reuse the person class to do this one to many mapping.

45
00:02:45.440 --> 00:02:45.890
OK.

46
00:02:46.160 --> 00:02:51.770
Just as you probably previously just modeled a spouse as a person as well.

47
00:02:52.250 --> 00:02:52.550
All right.

48
00:02:52.580 --> 00:02:59.780
So we could create a bunch of individual people to represent the children and then somehow set those

49
00:02:59.780 --> 00:03:03.560
children on the person the way that we're setting this address here.

50
00:03:03.890 --> 00:03:09.830
But a very common pattern that you will see oftentimes when this when you have to do these one too many

51
00:03:09.830 --> 00:03:13.530
associations is to do something like this John Dot.

52
00:03:13.550 --> 00:03:21.500
Add child and then we can just pass in a new instance of a person in this case, because that would

53
00:03:21.500 --> 00:03:22.770
be our child, right?

54
00:03:22.790 --> 00:03:28.160
So then I can do something like a first name of Johnny.

55
00:03:28.340 --> 00:03:35.600
Maybe instead of John with the last name of the see what was John's last name Smith and then a date

56
00:03:35.600 --> 00:03:36.260
of birth.

57
00:03:36.410 --> 00:03:38.940
So date time of.

58
00:03:38.990 --> 00:03:40.190
And these are kids.

59
00:03:40.280 --> 00:03:43.790
So I will give them birth dates that are much more recent than 1980.

60
00:03:44.150 --> 00:03:50.900
So I don't know will do to 2010 come January 1st.

61
00:03:51.320 --> 00:03:53.060
One 1:00 a.m..

62
00:03:53.210 --> 00:03:54.290
Zero minutes.

63
00:03:54.380 --> 00:03:55.580
Zero seconds.

64
00:03:55.640 --> 00:03:57.230
Zero nanoseconds.

65
00:03:57.680 --> 00:04:03.050
And a zone I.D. of negative six.

66
00:04:03.890 --> 00:04:04.280
All right.

67
00:04:04.490 --> 00:04:04.850
OK.

68
00:04:04.970 --> 00:04:10.310
And now let's address this red mark here, because that method does not exist, right?

69
00:04:10.370 --> 00:04:18.620
So I'm going to put my cursor there and do an option return and let's go ahead and create this add child

70
00:04:18.620 --> 00:04:19.190
method.

71
00:04:19.490 --> 00:04:25.310
And for now, we'll just let the add child method return void, which is to say it won't return anything

72
00:04:25.310 --> 00:04:25.700
at all.

73
00:04:26.090 --> 00:04:27.110
And this is good.

74
00:04:27.110 --> 00:04:29.000
It will take a person as an input.

75
00:04:29.210 --> 00:04:31.820
We'll call this variable child, though.

76
00:04:32.120 --> 00:04:33.530
Now here's the trick.

77
00:04:34.190 --> 00:04:40.400
If we want a person to be able to have children, how would you go about modeling that?

78
00:04:40.460 --> 00:04:43.610
You want to take a moment to think about it and then come back to me?

79
00:04:45.270 --> 00:04:45.610
OK.

80
00:04:45.630 --> 00:04:53.250
Did you think that something, so if you thought of using a collection, perhaps to model a collection

81
00:04:53.250 --> 00:04:53.820
of children?

82
00:04:54.000 --> 00:04:55.680
That's how I would do it as well.

83
00:04:55.890 --> 00:05:01.020
Now, in addition to modeling the children of a person as a collection, you'd also have to decide now

84
00:05:01.020 --> 00:05:04.080
what collection class would you want to use here?

85
00:05:04.410 --> 00:05:10.470
I would say that for use case like this, the two most common types of collections that you'll see used

86
00:05:10.470 --> 00:05:13.560
will be either a list or a set.

87
00:05:14.370 --> 00:05:20.280
Now, in this case, I would say the most common collection that I personally will use in a case like

88
00:05:20.280 --> 00:05:23.130
this is actually a set rather than a list.

89
00:05:23.730 --> 00:05:29.220
And the reason is because usually when we're dealing with a situation like this, we want to ensure

90
00:05:29.220 --> 00:05:36.270
that we have unique instances of the people and a set will naturally enforce uniqueness as long as we've

91
00:05:36.270 --> 00:05:41.390
implemented hash code and equals methods on our person class properly.

92
00:05:41.430 --> 00:05:48.030
So I am inclined to use a set, at least for now, so I can come up here to the top of the class and

93
00:05:48.030 --> 00:05:56.880
I'm just going to go ahead and introduce a set right now, private set of person.

94
00:05:58.190 --> 00:06:05.960
I will import the set, then I will call this field children, and I will go ahead and initialize it

95
00:06:05.960 --> 00:06:12.980
right away so that way it can never be null equals new hash set like sir.

96
00:06:13.400 --> 00:06:13.850
OK.

97
00:06:14.180 --> 00:06:24.470
And so now down here I can simply say children that add child like so now there's an additional pattern

98
00:06:24.470 --> 00:06:29.320
that you may see implemented in Java code, and that is something like this.

99
00:06:29.330 --> 00:06:36.230
You might also see code that would often do child that set parent this.

100
00:06:37.100 --> 00:06:43.130
So what we're doing here is we're setting a bidirectional relationship where we're adding the child

101
00:06:43.400 --> 00:06:45.500
to the collection of children on the parent.

102
00:06:45.710 --> 00:06:51.110
But we're also allowing the child to be able to point back to his or her parent.

103
00:06:51.140 --> 00:06:51.470
Right?

104
00:06:51.770 --> 00:06:54.410
By adding a property called set parent.

105
00:06:54.740 --> 00:07:00.290
So obviously, we're getting a red mark here because there is not currently a method called set parent,

106
00:07:00.290 --> 00:07:02.630
but we can go ahead and let the ADT create this.

107
00:07:02.900 --> 00:07:09.020
So I'm going to put my cursor on the set parent method here and then do an option return now.

108
00:07:09.020 --> 00:07:16.400
Because this method is called set something, the ID recognizes that we might be referring to a standard

109
00:07:16.400 --> 00:07:18.680
getter or setter method for a property.

110
00:07:18.830 --> 00:07:24.320
And so we're getting the option here to just create a method or create an entire property called parent.

111
00:07:24.530 --> 00:07:29.060
I'm actually going to go ahead and let it create the entire property, so I'm choosing the second one

112
00:07:29.060 --> 00:07:29.330
here.

113
00:07:29.360 --> 00:07:29.780
All right.

114
00:07:30.080 --> 00:07:34.460
And so now it's giving me all the options here, and I'm good with the data type.

115
00:07:34.460 --> 00:07:35.660
I'm good with that name.

116
00:07:35.670 --> 00:07:38.000
I'm good with this field called parent.

117
00:07:38.000 --> 00:07:39.050
I'm good with all of that.

118
00:07:39.200 --> 00:07:45.620
And so if we if it's in, so if we come up here to the top, we now have a field called parent as well.

119
00:07:45.920 --> 00:07:52.040
Now this is really very similar to what we did with addresses, and because it's so similar, I'm inclined

120
00:07:52.040 --> 00:07:56.180
to go ahead and model this as actually an optional of a parent.

121
00:07:56.390 --> 00:08:01.370
Just as we did four addresses someone to come here and actually just wrap that.

122
00:08:03.140 --> 00:08:08.270
And an optional like, so and that means I want to go ahead and also initialize it.

123
00:08:09.550 --> 00:08:15.220
Just like we did for the addresses and now I'm going to have errors down here that I need to fix just

124
00:08:15.220 --> 00:08:19.430
as we did before, so I can't just have a parent anymore.

125
00:08:19.450 --> 00:08:23.890
I now need to do an optional of Nullarbor.

126
00:08:25.540 --> 00:08:26.500
Of the parent.

127
00:08:27.430 --> 00:08:33.400
And then this get parent will now return an option, an optional.

128
00:08:34.740 --> 00:08:40.740
Person, just like so, OK, so pretty much the exact same pattern as addresses, that's the main thing

129
00:08:40.740 --> 00:08:42.480
to to be mindful of here.

130
00:08:42.870 --> 00:08:43.170
All right.

131
00:08:43.180 --> 00:08:45.600
So now let's jump back over to the test.

132
00:08:46.440 --> 00:08:53.820
And now I read Mark just went away and now I can just duplicate this line 83, maybe two or three times.

133
00:08:54.060 --> 00:08:59.550
However, many children, you want this guy to have so duplicated a couple more times and then change

134
00:08:59.550 --> 00:09:02.550
the names here to, I don't know, Sarah.

135
00:09:03.420 --> 00:09:06.180
And and maybe Jenny.

136
00:09:07.670 --> 00:09:17.390
And then let's see, we'll make these kids be born every two years, so 2012 and then 2014 and let's

137
00:09:17.390 --> 00:09:19.310
say every two months as well.

138
00:09:19.670 --> 00:09:23.990
So three and five and the rest of these fields we can leave alone.

139
00:09:24.680 --> 00:09:25.030
All right.

140
00:09:25.040 --> 00:09:27.820
So Johnny, oh, and let's change his name now.

141
00:09:27.830 --> 00:09:29.060
We don't need him to be called Johnny.

142
00:09:29.630 --> 00:09:33.170
So now John Smith has three kids, Johnny.

143
00:09:33.170 --> 00:09:37.590
I guess that's John Jr., Johnny Smith, Sarah Smith and Jenny Smith.

144
00:09:37.610 --> 00:09:38.000
OK.

145
00:09:38.030 --> 00:09:38.420
All right.

146
00:09:38.450 --> 00:09:42.020
And so now we will want to go ahead and just save.

147
00:09:43.670 --> 00:09:51.260
As we have done before, and we'll go ahead and capture him as well, saved person and now what can

148
00:09:51.260 --> 00:09:57.350
we assert, though, because we will not yet have implemented the ability to retrieve a person with

149
00:09:57.350 --> 00:09:58.370
their children, right?

150
00:09:58.550 --> 00:10:02.930
So I think just as up here, we're saving the person with an address.

151
00:10:02.930 --> 00:10:09.200
And then we asserted that the addresses ID is greater than zero or not null or whatever.

152
00:10:09.380 --> 00:10:13.160
I think we can do something along those lines down here as well.

153
00:10:13.580 --> 00:10:14.330
So let's see.

154
00:10:14.330 --> 00:10:15.550
Let's see how we can do this.

155
00:10:15.560 --> 00:10:19.910
Maybe we can do something like assert that.

156
00:10:21.860 --> 00:10:29.570
Saved person, not get children are now look here, we don't have they get children yet, do we?

157
00:10:29.600 --> 00:10:32.090
So let's let's go implement that.

158
00:10:32.270 --> 00:10:36.490
So I just put my cursor there and we will implement this method, get children.

159
00:10:36.500 --> 00:10:42.500
And this method should return a set of person because that's how restoring the children, right?

160
00:10:43.280 --> 00:10:48.230
And then we'll just return the internal set return children, just like sir.

161
00:10:48.530 --> 00:10:54.020
So we've got an add child method here and now we've got to get children method.

162
00:10:54.140 --> 00:10:56.450
So right now, we're not very symmetrical, right?

163
00:10:56.480 --> 00:10:59.780
Normally we'd have a get children and then we'd have a set children.

164
00:10:59.780 --> 00:11:05.720
But right now, having a set children method doesn't really make a lot of sense for our needs.

165
00:11:05.900 --> 00:11:11.810
It makes more sense to be able to just add individual children, and it's more convenient, in my opinion.

166
00:11:12.050 --> 00:11:17.570
Now, we certainly could add a set children method at a later date or whenever you want to, but I don't

167
00:11:17.570 --> 00:11:23.210
need that right now, so I'm not going to add it, and I want you to understand that let's try never

168
00:11:23.210 --> 00:11:28.880
to get so stuck in the standard patterns that we just do them mindlessly.

169
00:11:29.180 --> 00:11:30.320
If you don't need a set.

170
00:11:30.350 --> 00:11:32.420
Children method, then don't create it.

171
00:11:32.740 --> 00:11:36.500
OK, and right now, I don't need that, but I do need to get children method.

172
00:11:36.620 --> 00:11:36.920
All right.

173
00:11:37.250 --> 00:11:39.770
So jumping back over here to now, we've got get children.

174
00:11:40.040 --> 00:11:43.190
Now this is going to return a set though, right?

175
00:11:43.520 --> 00:11:51.440
So I think what I want to do is just kind of like assert that each child now has an ID that isn't zero

176
00:11:51.560 --> 00:11:52.940
set on them, right?

177
00:11:53.300 --> 00:11:58.430
And as I'm thinking about this, I'm actually thinking, maybe I don't want to start off with this assertion

178
00:11:58.700 --> 00:11:59.660
right here.

179
00:11:59.930 --> 00:12:06.290
Maybe instead, what I actually want to do is invert how I'm going to do this assertion.

180
00:12:06.290 --> 00:12:07.670
So let me show you what I mean here.

181
00:12:08.030 --> 00:12:12.620
So maybe we reference the saved person died, get children.

182
00:12:13.010 --> 00:12:20.660
And then we use the Stream's API to iterate over each of the children and then assert whether or not

183
00:12:20.660 --> 00:12:23.120
their ID is greater than zero or something like that.

184
00:12:23.420 --> 00:12:25.160
So let's see what that might look like.

185
00:12:25.160 --> 00:12:27.530
So we get the children and then we can get a stream.

186
00:12:27.530 --> 00:12:34.130
And now inside of this stream of children, maybe we can map the children to just their IDs.

187
00:12:34.370 --> 00:12:36.380
So let's see what that might look like.

188
00:12:37.070 --> 00:12:39.740
So map to person.

189
00:12:40.910 --> 00:12:41.410
Get it.

190
00:12:41.860 --> 00:12:46.060
So there's the ad and then maybe we can do a.

191
00:12:47.030 --> 00:12:58.370
For each and say something like for each, I'd assert that I.D. is greater than zero.

192
00:12:58.400 --> 00:12:59.600
Maybe we can just do that.

193
00:13:00.110 --> 00:13:00.500
All right.

194
00:13:00.830 --> 00:13:04.910
So that way we can check every single one of them and make sure they all got saved.

195
00:13:05.060 --> 00:13:09.410
So we're looping over all the children, getting their IDs and then asserting that all of their IDs

196
00:13:09.410 --> 00:13:10.490
are greater than zero.

197
00:13:10.520 --> 00:13:11.000
All right.

198
00:13:11.210 --> 00:13:12.950
So let's run that and see it fail.

199
00:13:15.200 --> 00:13:15.650
OK.

200
00:13:15.680 --> 00:13:20.660
Expecting actual not to be null, so currently all their IDs are null, which they should be.

201
00:13:20.900 --> 00:13:21.290
All right.

202
00:13:21.290 --> 00:13:23.930
And so now let's go make this work.

203
00:13:24.230 --> 00:13:26.150
Now this is going to be kind of interesting.

204
00:13:26.480 --> 00:13:28.910
So let's look first at the spreadsheet.

205
00:13:29.450 --> 00:13:29.750
All right.

206
00:13:29.750 --> 00:13:33.990
So we're going to have this people table here, right?

207
00:13:34.010 --> 00:13:41.810
And so how can we associate a bunch of children with their parents, but using the same table because

208
00:13:41.810 --> 00:13:42.890
they're all people, right?

209
00:13:42.980 --> 00:13:50.770
So what I have in mind is just as we have added the home address and we added the business address,

210
00:13:51.170 --> 00:13:56.870
we could add a foreign key that points back on to the same table again.

211
00:13:56.900 --> 00:13:59.660
But this foreign key would be a parent ID.

212
00:14:00.020 --> 00:14:06.740
OK, so let's say, for example, that Larry Kim is the child of Jerry Smith.

213
00:14:07.010 --> 00:14:14.450
OK, how could we record the fact that Larry Kan is the child of Jerry Smith inside of this same table?

214
00:14:14.840 --> 00:14:20.360
Well, I think all we need to do is just add another column, so let me add a column.

215
00:14:22.490 --> 00:14:28.650
And this column could be called something like parent I.D..

216
00:14:30.680 --> 00:14:38.090
And so, Larry, Kim's parents, Jerry, so then that would mean that we need to put a ten year meaning

217
00:14:38.090 --> 00:14:44.240
the parents of Larry Kim is the person record with ID of 10, which is right there, right?

218
00:14:44.600 --> 00:14:48.380
So this would point back up to here, and that's the parent.

219
00:14:48.560 --> 00:14:54.350
And now Jerry Smith could have multiple children, and those would just be additional people with a

220
00:14:54.350 --> 00:14:55.520
parent ID of 10.

221
00:14:55.670 --> 00:15:01.220
So if we wanted an Jackson to be one of Jerry Smith's children, all you'd have to do is just add a

222
00:15:01.220 --> 00:15:02.660
10 right there as well.

223
00:15:02.870 --> 00:15:08.540
And so now we know that Jerry Smith has two kids in this data, right in this data set.

224
00:15:08.780 --> 00:15:13.460
And and Larry, so we just need to add this parent ID.

225
00:15:13.790 --> 00:15:19.550
Now, this is just one way that we could model in the database a parent child relationship or a one.

226
00:15:19.550 --> 00:15:24.620
To many, a parent child is another way of also kind of describing a one to many relationship.

227
00:15:25.220 --> 00:15:30.890
Another way that we could do it is actually by using what's called a join table where we'd have a separate

228
00:15:30.890 --> 00:15:35.480
table and a nice thing about using a join table, which we might look at in a future lesson.

229
00:15:35.480 --> 00:15:41.540
But not right now is that with a join table, we don't have to add in this parent ID here.

230
00:15:41.810 --> 00:15:44.630
We could just leave everything the way that it was.

231
00:15:44.810 --> 00:15:49.310
The parent ID bit here would actually just live in the join table itself.

232
00:15:49.430 --> 00:15:55.070
And then we join to the join table in order to express the relationships between the parents and the

233
00:15:55.070 --> 00:15:55.580
children.

234
00:15:55.910 --> 00:15:57.740
But we'll save that for another lesson.

235
00:15:58.130 --> 00:15:58.520
All right.

236
00:15:58.580 --> 00:16:05.420
So but this approach looks somewhat similar to what we've already done with home addresses and business

237
00:16:05.420 --> 00:16:05.920
addresses.

238
00:16:05.930 --> 00:16:09.500
And so that's why I'm starting off by just showing you this with this approach.

239
00:16:09.920 --> 00:16:15.680
So that means that we need to go to the database and add a parent ID column with a foreign key that

240
00:16:15.680 --> 00:16:20.540
references back to the ID column of the same table.

241
00:16:20.840 --> 00:16:25.820
And so we're getting into this kind of recursive kind of thing, both in the Java code and now in the

242
00:16:25.820 --> 00:16:29.930
database as well, where we're going to be joining the people table to itself.

243
00:16:30.290 --> 00:16:31.640
And I think that's pretty cool.

244
00:16:31.760 --> 00:16:36.560
But hopefully, if you already implemented the spouse use case, then you already have done pretty much

245
00:16:36.560 --> 00:16:37.490
the same thing here.

246
00:16:37.760 --> 00:16:38.090
All right.

247
00:16:38.090 --> 00:16:44.330
So let's pop over to squirrel and connect to our people test database.

248
00:16:44.540 --> 00:16:45.010
All right.

249
00:16:45.020 --> 00:16:49.700
And so let's go ahead and just add in another column now.

250
00:16:50.000 --> 00:16:52.820
So we're going to do an altered table.

251
00:16:53.450 --> 00:17:01.100
People add column parent I.D. and this will be a big ant.

252
00:17:02.090 --> 00:17:08.240
And then we're going to say that it references people I.D. just like that.

253
00:17:08.690 --> 00:17:10.820
And let's go ahead and execute that.

254
00:17:11.540 --> 00:17:15.980
And this is going to take a minute and probably literally it might take about one minute.

255
00:17:19.430 --> 00:17:19.870
All right.

256
00:17:19.910 --> 00:17:24.830
So we've got that new column added now, so let's jump back over to the ad..

257
00:17:25.300 --> 00:17:25.730
All right.

258
00:17:25.940 --> 00:17:30.260
And now we can jump into the people repository class.

259
00:17:30.500 --> 00:17:34.190
So here's the sequel where we are currently inserting people right?

260
00:17:34.400 --> 00:17:38.360
And so currently we just insert these standard fields that we've already got.

261
00:17:38.540 --> 00:17:40.490
So now we're going to need to add another one.

262
00:17:42.090 --> 00:17:51.450
Which is the parent I.D. And that means we need to add another parameter here as well.

263
00:17:51.960 --> 00:17:55.710
And then we're going to need to come down here to where we map for saving.

264
00:17:55.740 --> 00:18:01.200
OK, so we're going to receive this entity here and a prepared statement.

265
00:18:01.440 --> 00:18:10.950
And so currently we go ahead and associate a saved home address and business address with parameters

266
00:18:11.010 --> 00:18:16.380
six and seven on this prepared statement in order to save all of that.

267
00:18:16.620 --> 00:18:20.760
So now we need to consider, though, how do we do this for the children?

268
00:18:20.790 --> 00:18:21.220
Right?

269
00:18:21.240 --> 00:18:26.910
So if we're just saving a regular old parent, then the parent I.D. will be null, OK, because it is

270
00:18:26.910 --> 00:18:31.590
a parent and we don't have any parental information about the parent's parent, right?

271
00:18:31.710 --> 00:18:34.650
So we would just be putting a needle in for that.

272
00:18:35.010 --> 00:18:42.420
But if we're saving children, then we will need to have the parent I.D. first before we can save the

273
00:18:42.420 --> 00:18:45.360
child so that we can put that ID in here, right?

274
00:18:45.570 --> 00:18:51.600
So unlike the addresses where we were saving the addresses first and then getting the idea of the address

275
00:18:51.600 --> 00:18:58.620
and then sticking that into the appropriate column for the person when we're saving children, it's

276
00:18:58.620 --> 00:19:01.350
the other way around with the way that we're modeling things here.

277
00:19:01.560 --> 00:19:08.130
We first will need to save the parent so that we can get the parents I.D. and then we will stick that

278
00:19:08.130 --> 00:19:11.990
ID in the parent ID column of the children records.

279
00:19:12.000 --> 00:19:14.550
OK, so it's just because of the way we're modeling it.

280
00:19:14.550 --> 00:19:16.590
We're just going to do it a little backward.

281
00:19:16.590 --> 00:19:22.050
Their opposite of how we did the addresses and the reason for that, again, is just because of the

282
00:19:22.050 --> 00:19:24.960
fact that we're not doing a one to one mapping.

283
00:19:25.050 --> 00:19:27.030
We're now doing a one to many mapping.

284
00:19:27.030 --> 00:19:34.950
And so there's not a really efficient way to put all the IDs of the children on the parent record.

285
00:19:35.070 --> 00:19:39.390
It makes more sense to associate the one parent record with all of the children.

286
00:19:39.780 --> 00:19:40.130
All right.

287
00:19:40.140 --> 00:19:46.980
So that's going to be kind of interesting now because this is the method that our credit repository

288
00:19:46.980 --> 00:19:49.170
calls to save a person.

289
00:19:49.650 --> 00:19:57.060
However, this method does not give us the ability to retrieve that person's ID after they've been saved.

290
00:19:57.420 --> 00:19:59.070
So let me show you why that is.

291
00:19:59.220 --> 00:20:08.370
Let's jump up into the crud repository itself, and let's go to the method that's calling Map for Save.

292
00:20:08.430 --> 00:20:16.940
So if I just right click on the map for Save Method here, I can find usages or do a alter option F7

293
00:20:16.950 --> 00:20:21.090
and that's being called by the save method so I can minimize that.

294
00:20:21.120 --> 00:20:21.390
All right.

295
00:20:21.390 --> 00:20:26.580
So here we are in the save method and this is what's actually calling map for save.

296
00:20:26.640 --> 00:20:27.120
OK.

297
00:20:27.570 --> 00:20:32.220
And so we execute the map for save with a prepared statement that execute update.

298
00:20:32.700 --> 00:20:38.580
Then we turn around and prepare to get the generated keys, which is the ID, the saved ID, the generated

299
00:20:38.580 --> 00:20:40.950
ID of the person that we just saved.

300
00:20:41.220 --> 00:20:49.500
So we call Typekit generated keys that returns back on new results set and then we extract the ID out

301
00:20:49.500 --> 00:20:51.990
of that, which is right there.

302
00:20:52.380 --> 00:20:59.910
And then we associate that I.D. back on to the Java object, which in this case would be the person,

303
00:20:59.910 --> 00:21:00.140
right?

304
00:21:00.150 --> 00:21:06.240
So we're getting the ID from the database and then resetting that I.D. on to the person, which is what

305
00:21:06.240 --> 00:21:08.160
this would be in this particular case.

306
00:21:08.400 --> 00:21:16.470
So if we want it to now use that ID to save the children, we'd have to do it somewhere after here.

307
00:21:16.740 --> 00:21:24.180
But right now, our KRudd repository framework doesn't give us an easy way to get our hands on that

308
00:21:24.180 --> 00:21:26.760
parent ID or that person's I.D..

309
00:21:27.120 --> 00:21:34.890
So what I'm kind of thinking of doing here is to introduce another method that we can override on the

310
00:21:34.890 --> 00:21:41.040
crud repository that gives us that opportunity to say like, OK, after I save a thing, if I want to

311
00:21:41.040 --> 00:21:46.890
do some more stuff with that saved thing, give me an opportunity to get a callback, essentially to

312
00:21:46.890 --> 00:21:47.880
do that right?

313
00:21:48.270 --> 00:21:49.470
So here's what I mean.

314
00:21:49.470 --> 00:21:51.570
Maybe we can do something like this.

315
00:21:52.320 --> 00:21:56.400
Maybe we can have a method, and I don't want to spend a lot of time thinking about this right now,

316
00:21:56.400 --> 00:22:05.670
but maybe something like post save and then maybe this method can pass in our newly saved entity and

317
00:22:05.670 --> 00:22:10.770
maybe even the idea, even though technically the ID should be on the entity.

318
00:22:10.770 --> 00:22:14.610
But maybe just to make it really, really explicit we can just pass it in.

319
00:22:14.640 --> 00:22:15.120
OK.

320
00:22:15.540 --> 00:22:19.920
So let's let the I.D. create this method for us to create that method.

321
00:22:20.070 --> 00:22:27.300
And I suppose it can be void and it's data type can be T and entity can be a good name.

322
00:22:27.300 --> 00:22:32.220
And for now, we can let the data type of the ID continue to be long.

323
00:22:32.370 --> 00:22:36.090
Although I don't recall now, did we use a capital long?

324
00:22:36.390 --> 00:22:37.320
Currently, we're not.

325
00:22:37.350 --> 00:22:37.890
That's fine.

326
00:22:37.890 --> 00:22:40.170
OK, so for now, we'll use a lowercase long.

327
00:22:40.770 --> 00:22:41.070
All right.

328
00:22:41.330 --> 00:22:46.100
Now, we don't want this to be private because we want to be able to override this method.

329
00:22:46.160 --> 00:22:52.580
OK in our people repository, so I'm going to make it protected like so.

330
00:22:52.910 --> 00:22:58.730
And in fact, I think I even want to move it down to our other protected methods that can be overridden.

331
00:22:58.730 --> 00:23:00.590
If you remember what those were.

332
00:23:00.800 --> 00:23:02.930
They're kind of down here towards the bottom.

333
00:23:04.820 --> 00:23:05.990
I know it's been a while.

334
00:23:06.260 --> 00:23:07.220
Yep, down here.

335
00:23:07.400 --> 00:23:11.210
So I kind of want to follow a lot of this pattern, basically.

336
00:23:12.800 --> 00:23:14.370
So let's see here.

337
00:23:14.450 --> 00:23:22.490
Yeah, maybe right here now I will not have this method by default doing anything at all and including

338
00:23:22.490 --> 00:23:27.320
I won't have it throwing any runtime exceptions because this method is going to get called every single

339
00:23:27.320 --> 00:23:27.680
time.

340
00:23:27.830 --> 00:23:33.020
So we're going to let it default behavior be to just do nothing at all, which is what it's doing right

341
00:23:33.020 --> 00:23:33.330
now.

342
00:23:33.800 --> 00:23:40.390
And I'm going to clean this up a little bit by just joining these lines here just to save a little space.

343
00:23:40.400 --> 00:23:43.230
OK, so there we've got a post save method.

344
00:23:43.250 --> 00:23:43.640
OK.

345
00:23:44.240 --> 00:23:55.040
And so now if we jump back over to the people repository method here now we have a way to do something

346
00:23:55.040 --> 00:23:58.460
with a person after he has been saved, right?

347
00:23:58.610 --> 00:24:05.420
So all we need to do now is just override the post save method right here.

348
00:24:05.870 --> 00:24:10.880
And I don't even need to call this super method because currently the save method isn't doing anything

349
00:24:10.880 --> 00:24:12.620
anyway, so I'm just going to delete that.

350
00:24:13.010 --> 00:24:20.150
So now we've got an entity which is a person with an actual idea already set on him at this moment.

351
00:24:20.390 --> 00:24:23.420
So now we can go ahead and save the children.

352
00:24:23.870 --> 00:24:31.850
And I think the easiest way to do that would be to simply say something like Entity Dot, get children,

353
00:24:31.850 --> 00:24:40.700
dot stream, perhaps and then maybe do a for each and then maybe a this save.

354
00:24:40.910 --> 00:24:43.940
So literally just iterate over all the kids and save them.

355
00:24:44.480 --> 00:24:46.520
That's probably about the easiest way to do this.

356
00:24:46.700 --> 00:24:52.370
It may not be the most efficient if this person had like thousands of children, by the way, but it

357
00:24:52.370 --> 00:24:56.510
lets us reuse a lot of our code as it already exists currently.

358
00:24:56.750 --> 00:25:01.460
Now, let's go back up here again and see what else we're going to need to do, though, because that's

359
00:25:01.460 --> 00:25:01.910
not enough.

360
00:25:01.910 --> 00:25:06.050
So we added this parent ID here, and that is now an eighth parameter, I think.

361
00:25:06.050 --> 00:25:08.840
One two three four five six seven eight.

362
00:25:08.840 --> 00:25:10.880
Yeah, and that's now an eighth parameter.

363
00:25:11.090 --> 00:25:16.190
So let's come down here and we see that currently we're only saving seven parameters, right?

364
00:25:16.460 --> 00:25:23.090
So now we need to be able to be smart about saving this eighth parameter because if we're saving a parent,

365
00:25:23.240 --> 00:25:25.010
then that's going to just be null.

366
00:25:25.370 --> 00:25:29.780
It only needs to be set to an actual value if it's a legitimate child, right?

367
00:25:30.200 --> 00:25:40.970
So maybe we can do something like this if entity does get parent is present because we remember we modeled

368
00:25:40.970 --> 00:25:42.500
the parent as an optional.

369
00:25:43.220 --> 00:25:50.690
So if that's present, then that set long and then we need to pass in the index.

370
00:25:50.900 --> 00:25:59.150
The column index, which is the parameter index, which is eight and then entity get parent.

371
00:26:00.820 --> 00:26:05.710
Now, this is an optional, so we need to now unwrap it out of the optional with a call to get.

372
00:26:05.830 --> 00:26:10.990
Which again, is safe to do because right here we're checking to make sure that there actually is a

373
00:26:10.990 --> 00:26:14.080
value inside of the optional before we call it, get right.

374
00:26:14.290 --> 00:26:15.100
So get.

375
00:26:15.790 --> 00:26:17.260
And then we can call it get ID.

376
00:26:17.530 --> 00:26:23.800
Like, so now technically, we might not like this duplication here where we're doing entity that get

377
00:26:23.800 --> 00:26:24.940
parent twice.

378
00:26:25.450 --> 00:26:32.350
We could select all of that and extract out a variable and replace both of those occurrences and just

379
00:26:32.350 --> 00:26:35.260
call it parent just like so we can do that.

380
00:26:35.290 --> 00:26:35.670
All right.

381
00:26:35.680 --> 00:26:42.670
So if there is a parent, get that parent's ID and then bind that to this eighth parameter here.

382
00:26:43.570 --> 00:26:49.120
Otherwise or else, let's do a that set object.

383
00:26:50.990 --> 00:26:53.630
Eighth parameter and just set it to null.

384
00:26:54.350 --> 00:27:00.020
Now again, you understand by now I hope why I'm using the set object here instead of set long, even

385
00:27:00.020 --> 00:27:02.030
though it's for the same parameter, right?

386
00:27:02.390 --> 00:27:06.110
It's just that you cannot set null on a primitive long.

387
00:27:06.110 --> 00:27:09.800
And that's what this method set long is expecting a primitive long.

388
00:27:10.160 --> 00:27:10.610
OK.

389
00:27:11.120 --> 00:27:17.150
So in that case, I need to use the set object method because that will allow me to set that value to

390
00:27:17.150 --> 00:27:18.530
an actual null.

391
00:27:18.650 --> 00:27:22.760
That's the only reason that I'm using said object instead of set long again.

392
00:27:23.150 --> 00:27:29.900
And I wouldn't mind just making this a little more concise by extracting that all out into its own method

393
00:27:30.230 --> 00:27:33.140
similarly to how we did with the addresses.

394
00:27:33.620 --> 00:27:37.900
So I've selected all of that and I'm going to do an optional command M..

395
00:27:38.270 --> 00:27:48.890
And then I will say something like associate child with person like so and that just helps to keep this

396
00:27:48.890 --> 00:27:52.070
method a little more easy to see, right?

397
00:27:52.100 --> 00:27:54.650
We don't have to get into all of these details here.

398
00:27:55.160 --> 00:27:55.510
All right.

399
00:27:55.520 --> 00:27:57.970
So let's just see if this is enough.

400
00:27:57.980 --> 00:28:03.920
I running our test and again, this is where it's so nice to do things in a TDD approach because you

401
00:28:03.920 --> 00:28:06.440
get a little too deep in the weeds of all your programming.

402
00:28:06.440 --> 00:28:10.250
And then it's kind of hard to see, like, did I do enough yet or are there more steps?

403
00:28:10.490 --> 00:28:15.560
Well, by having that test already written, the test will fail if we didn't do enough and it'll probably

404
00:28:15.560 --> 00:28:17.910
tell us right where we have gone wrong, right?

405
00:28:17.940 --> 00:28:20.870
So we don't have to we don't have to keep it all in our heads, right?

406
00:28:20.870 --> 00:28:23.480
We can just run the tests and the tests will tell us if we're done.

407
00:28:23.840 --> 00:28:28.220
So I'm going to open up the last test that we ran, which was the new one that we wrote.

408
00:28:28.610 --> 00:28:30.350
And then I'm just going to run this again.

409
00:28:31.800 --> 00:28:34.410
A and looks like we've got a winner.

410
00:28:34.980 --> 00:28:35.400
Cool.

411
00:28:35.910 --> 00:28:38.610
So apparently that did what we needed it to do.

412
00:28:39.270 --> 00:28:39.520
All right.

413
00:28:39.540 --> 00:28:44.010
So in the next lesson, we'll do the other side now and we'll retrieve the people.

414
00:28:44.130 --> 00:28:48.900
And I think there's going to be some neat concepts that we can visit when we have to retrieve these

415
00:28:48.900 --> 00:28:49.410
children.

416
00:28:49.680 --> 00:28:51.120
So I'm kind of looking forward to that.

417
00:28:51.300 --> 00:28:52.770
So I'll see you in the next one.
