WEBVTT
1
00:00:00.720 --> 00:00:07.500
All right, next up, we're going to learn about the Care Act or CHA Act, as probably most developers

2
00:00:07.500 --> 00:00:12.330
would pronounce, but I don't know why they would say that because this is short for character.

3
00:00:12.600 --> 00:00:14.040
So I call it Care Act.

4
00:00:14.640 --> 00:00:16.130
So we're going to learn about that method.

5
00:00:16.140 --> 00:00:23.910
So back to the A.D. and again, we'll strip out what will strip out what was already there, and I'm

6
00:00:23.910 --> 00:00:26.370
going to get rid of that method there.

7
00:00:28.540 --> 00:00:29.290
All right.

8
00:00:29.800 --> 00:00:36.730
And as usual, we will create a string by text equals and or no apples.

9
00:00:39.230 --> 00:00:45.320
All right, and again, we'll do a system that out that print line, and we'll pass in the my text.

10
00:00:46.590 --> 00:00:54.780
OK, now the carrot is pretty simple, it's just a method that just gives us back the character that

11
00:00:54.780 --> 00:00:56.450
we're pointing to with an index.

12
00:00:56.460 --> 00:01:04.530
So if I call the carrot method here and I pass in the number three, for example, that should give

13
00:01:04.530 --> 00:01:09.180
me the fourth character in the my text string.

14
00:01:09.330 --> 00:01:12.720
The fourth character would be one to three for the L.

15
00:01:13.050 --> 00:01:14.790
So let's see if that's correct.

16
00:01:15.180 --> 00:01:18.990
So if we run this, yep, there we go.

17
00:01:19.350 --> 00:01:21.090
Lowercase l right there.

18
00:01:21.570 --> 00:01:21.990
OK.

19
00:01:22.170 --> 00:01:29.190
Keep in mind that the input for the carrot method is the index of the character that you want, starting

20
00:01:29.190 --> 00:01:33.480
with zero right zero and it is zero based.

21
00:01:33.480 --> 00:01:40.080
And that's why three here gives us the fourth character because the first character is zero, so this

22
00:01:40.080 --> 00:01:46.100
would be zero one two three right there.

23
00:01:46.110 --> 00:01:46.620
I suppose.

24
00:01:46.620 --> 00:01:53.220
One thing I should mention is that you can get some really nasty errors with methods that take indexes

25
00:01:53.220 --> 00:01:59.430
like this if you provide them with an index that is out of the range of the string.

26
00:01:59.670 --> 00:02:05.730
So in other words, this string is one to one two three four or five six characters long.

27
00:02:06.060 --> 00:02:12.310
So if I were to supply a number that is beyond the range of this string, let's see what happens.

28
00:02:12.310 --> 00:02:16.200
So if I give it a nine right, I tell it to give me the ninth character.

29
00:02:16.350 --> 00:02:17.640
Let's see what happens here.

30
00:02:18.330 --> 00:02:22.920
Yeah, so the program blew up, and the way I know that the program blew up is because we have all this

31
00:02:22.920 --> 00:02:25.240
nasty red text here.

32
00:02:25.260 --> 00:02:25.710
OK.

33
00:02:25.740 --> 00:02:30.530
So what happened was the Java through what's called an exception.

34
00:02:30.540 --> 00:02:31.550
That's an error.

35
00:02:31.560 --> 00:02:35.220
An exception is an error, if you will, in layman's terms.

36
00:02:35.520 --> 00:02:38.700
And it's saying the string index out of bounds exception.

37
00:02:38.700 --> 00:02:45.240
That's the type of exception or the type of error that Java generated because we were asking it to give

38
00:02:45.240 --> 00:02:49.080
us a character that was outside of the range of the width of this.

39
00:02:49.080 --> 00:02:54.060
So be super careful with methods that take indexes and things of that sort.

40
00:02:54.210 --> 00:03:00.780
It's very easy to accidentally write code that exceeds those ranges or limits.

41
00:03:01.290 --> 00:03:06.600
Just know that there are definitely ways that we can sometimes protect ourselves from from things like

42
00:03:06.600 --> 00:03:06.870
this.

43
00:03:06.900 --> 00:03:11.310
So, for example, you already learned here, I'm going to just show you this real quick.

44
00:03:12.510 --> 00:03:16.010
You already learned that you can zero.

45
00:03:16.170 --> 00:03:18.270
I'll make a variable here length.

46
00:03:18.780 --> 00:03:24.270
You can capture the length of a string like this.

47
00:03:24.450 --> 00:03:24.960
OK.

48
00:03:25.950 --> 00:03:29.870
And then we haven't learned how to do this yet, but we could write a little bit of logic.

49
00:03:29.880 --> 00:03:32.070
In fact, I'll give you a quick sneak preview here.

50
00:03:32.310 --> 00:03:41.460
We could say something like if the length is greater than whatever magic number we want to use, which

51
00:03:41.460 --> 00:03:43.800
in this case the magic number is nine.

52
00:03:46.640 --> 00:03:47.900
Then we would allow.

53
00:03:50.300 --> 00:03:53.870
Then we would allow this code to execute.

54
00:03:54.830 --> 00:03:57.650
Otherwise, that code would not execute.

55
00:03:57.920 --> 00:03:58.370
OK.

56
00:03:58.460 --> 00:04:01.070
And in fact, let's see here if we run this now.

57
00:04:03.530 --> 00:04:03.920
OK.

58
00:04:04.220 --> 00:04:10.490
It does nothing, but it doesn't blow up anymore because the length is not greater than nine, and therefore

59
00:04:10.730 --> 00:04:13.340
this line of code right here isn't running at all.

60
00:04:13.520 --> 00:04:19.400
So we can do things like this to protect ourselves from out of range exceptions and things of that sort.

61
00:04:20.030 --> 00:04:20.270
All right.

62
00:04:20.390 --> 00:04:24.350
That's a little sneak preview of something we're going to learn in the future anyway.

63
00:04:24.890 --> 00:04:27.710
So we used this care at earlier.

64
00:04:27.710 --> 00:04:36.110
If you'll recall, we did something like middle name equals Christopher, right?

65
00:04:36.120 --> 00:04:42.770
And then we wanted to grab just the first character out of that, because many times when you ask for

66
00:04:42.770 --> 00:04:48.740
a first name, middle name and last name, many times you'll just print only the middle initial and

67
00:04:48.740 --> 00:04:50.900
you don't need the whole entire name, right?

68
00:04:51.140 --> 00:04:57.350
And so if we wanted to have a method that could take a full middle name but just return the middle initial?

69
00:04:57.650 --> 00:05:05.660
Well, then what you would have that method do is to simply return the zero with character just like

70
00:05:05.660 --> 00:05:06.500
that, right?

71
00:05:07.280 --> 00:05:09.170
I'm going to get rid of it.

72
00:05:13.350 --> 00:05:17.130
And that is indeed what we did in that method, if you recall.

73
00:05:17.340 --> 00:05:17.720
OK.

74
00:05:17.850 --> 00:05:22.500
So that might be one reason you'd want to do that, and I'm sure we can think of others as well, but

75
00:05:22.500 --> 00:05:24.900
that's going to conclude this quick little lesson.

76
00:05:24.990 --> 00:05:25.830
See, in the next one.
