1
00:00:00,600 --> 00:00:07,500
All right, and so now wrapping up our little tour of sequel, let's learn a few other techniques that

2
00:00:07,500 --> 00:00:09,060
are quite useful to know.

3
00:00:09,240 --> 00:00:12,270
So so far, we've learned how to create a table.

4
00:00:12,510 --> 00:00:15,630
We've learned how to create records in that table.

5
00:00:16,020 --> 00:00:19,230
We've learned how to read records from that table.

6
00:00:19,380 --> 00:00:24,150
OK, so now we're going to learn how to update records and delete records.

7
00:00:24,960 --> 00:00:33,690
So let's say that we've got Susan here and we want to change Susan's name to Sabrina, for example.

8
00:00:34,140 --> 00:00:34,530
All right.

9
00:00:34,860 --> 00:00:39,060
So what we can do then is use the update command.

10
00:00:39,810 --> 00:00:43,680
Update the people table and set.

11
00:00:44,960 --> 00:00:46,670
The first name.

12
00:00:48,060 --> 00:00:53,820
Equal to Sabrina looks, Sabrina.

13
00:00:55,790 --> 00:01:00,350
Where first name equals?

14
00:01:02,110 --> 00:01:10,150
Susan, so what we're saying here is basically in the people table, go find any records, would that

15
00:01:10,150 --> 00:01:12,310
have a first name of Susan?

16
00:01:12,310 --> 00:01:18,100
And for that record, or those records set the first name filled to Sabrina?

17
00:01:18,340 --> 00:01:21,160
So in effect, we're saying change Susan to Sabrina.

18
00:01:21,190 --> 00:01:23,410
OK, so if we run this?

19
00:01:24,820 --> 00:01:27,400
And then we re query the database.

20
00:01:31,050 --> 00:01:36,660
And run that we now see that we have a Sabrina and there is no more Susan.

21
00:01:36,900 --> 00:01:44,520
So we've just updated that one field and obviously we can use this basic update to update any particular

22
00:01:44,520 --> 00:01:46,650
field of the database.

23
00:01:46,830 --> 00:01:51,220
We can also update multiple records of the database.

24
00:01:51,240 --> 00:01:53,340
Let me show you that real quick as well.

25
00:01:53,640 --> 00:02:00,750
So let's say the Johnson family decides they want to change the spelling of their name so we can do

26
00:02:00,750 --> 00:02:09,020
an update people set last name equal to, I don't know, Joanne.

27
00:02:09,300 --> 00:02:19,070
So in how about that, where last name currently equals Joe H insulin?

28
00:02:19,350 --> 00:02:24,630
OK, so let's run that and then let's query the database.

29
00:02:25,230 --> 00:02:31,680
And so now we we see that we've changed all of the Johnson's in the database like so.

30
00:02:31,920 --> 00:02:34,530
And then you could get fancier with this where clause.

31
00:02:34,560 --> 00:02:39,060
Like, let's say that there were lots of Johnson's, but we didn't want to affect all Johnson's.

32
00:02:39,060 --> 00:02:44,430
Maybe we only wanted to affect all Johnsons who were born between a certain period of time or something

33
00:02:44,430 --> 00:02:44,880
like that.

34
00:02:45,030 --> 00:02:46,890
We could we could do all of that as well.

35
00:02:46,890 --> 00:02:49,860
And then let's also learn how to delete records.

36
00:02:50,220 --> 00:02:53,910
So to delete a record, we actually just use the.

37
00:02:55,000 --> 00:03:04,840
The delete command, so delete from people where and then we just have to tell it what we want to delete.

38
00:03:04,840 --> 00:03:10,540
So if we wanted to delete this oddball over here, Jake, because he's not one of the Johnsons, why

39
00:03:10,540 --> 00:03:13,750
would we want non Johnsen's in this table, right?

40
00:03:15,310 --> 00:03:21,910
So we could get rid of him by any characteristic that distinguishes him apart from the rest of the Johnsons?

41
00:03:21,910 --> 00:03:27,280
So perhaps last name so we can say where last name equals?

42
00:03:28,710 --> 00:03:29,640
Smith.

43
00:03:30,980 --> 00:03:32,270
And let's run that.

44
00:03:33,850 --> 00:03:37,420
And then if we come up here and then query the database again.

45
00:03:37,780 --> 00:03:38,420
There we go.

46
00:03:38,440 --> 00:03:39,640
Smith is gone.

47
00:03:40,120 --> 00:03:40,870
He's toast.

48
00:03:41,560 --> 00:03:49,600
Now, obviously, you want to be super careful using the Delete Command in sequel, especially if you're

49
00:03:49,600 --> 00:03:52,000
operating on corporate data.

50
00:03:52,120 --> 00:03:57,730
Now, typically in any corporation or company that knows what it's doing, they're not even going to

51
00:03:57,730 --> 00:04:05,650
let the developers directly have access to the production database servers so that you could just be

52
00:04:05,710 --> 00:04:09,820
willy nilly executing commands of this sort against the database.

53
00:04:09,940 --> 00:04:10,990
They're not going to allow that.

54
00:04:11,320 --> 00:04:17,920
Typically, what they'll do instead is they'll have you write out a script of a sequel script, which

55
00:04:17,920 --> 00:04:21,520
would be basically everything that we're seeing here, you know, something like that.

56
00:04:21,760 --> 00:04:27,610
It would be in the form of a script where and then they would have you test that script out against

57
00:04:27,610 --> 00:04:36,760
test data on a clone database or a test database, something that isn't in their final production place

58
00:04:36,760 --> 00:04:38,650
where real business is getting done.

59
00:04:38,950 --> 00:04:40,120
They won't let you do it there.

60
00:04:40,240 --> 00:04:45,730
You do it on a lower level database as a test first and confirm that it all worked.

61
00:04:45,970 --> 00:04:51,070
There may be divas who have to look over your script and approve it in the DBS might be the ones who

62
00:04:51,070 --> 00:04:53,020
are actually going to run the script, OK?

63
00:04:53,200 --> 00:05:00,460
And then only after they've confirmed that everything is, you know, safe to do, then maybe your script

64
00:05:00,460 --> 00:05:01,930
gets to run in production.

65
00:05:02,200 --> 00:05:04,630
That's what a lot of big corporations will do.

66
00:05:04,870 --> 00:05:11,320
Now, a lot of more lean and agile companies might not have quite that level of of checks and balances

67
00:05:11,320 --> 00:05:12,130
to go through.

68
00:05:12,520 --> 00:05:19,690
But in one way or another, you'd better be testing out your commands on some test data or some other

69
00:05:19,690 --> 00:05:23,530
environment before you decide to roll that out onto production data.

70
00:05:23,560 --> 00:05:24,670
That's the main idea.

71
00:05:24,730 --> 00:05:30,640
OK, so we can also change the structure of a table itself.

72
00:05:30,970 --> 00:05:39,220
So let's say, for example, that we decided we wanted to add another column to the people table here

73
00:05:39,760 --> 00:05:40,750
so we can do that.

74
00:05:41,020 --> 00:05:42,790
There is an altered command.

75
00:05:44,090 --> 00:05:47,060
Altar table people.

76
00:05:47,210 --> 00:05:52,610
And let's say we just want to add a column so we can add a column.

77
00:05:52,850 --> 00:05:54,180
And I don't know.

78
00:05:54,290 --> 00:05:55,310
Looking over here?

79
00:05:55,310 --> 00:05:56,040
Oh, yeah, yeah.

80
00:05:56,060 --> 00:05:59,960
Looking at our our at our original test data, we've got an email field.

81
00:05:59,960 --> 00:06:00,770
That's a good one.

82
00:06:01,070 --> 00:06:02,480
Let's add an email filled.

83
00:06:02,900 --> 00:06:07,220
OK, so we'll add a field called email as a car.

84
00:06:08,090 --> 00:06:09,170
255.

85
00:06:10,370 --> 00:06:11,450
Just like that.

86
00:06:11,780 --> 00:06:12,230
All right.

87
00:06:12,260 --> 00:06:18,410
And so I've just executed that, and so if I go up here back and execute this, select everything from

88
00:06:18,410 --> 00:06:18,950
people.

89
00:06:19,880 --> 00:06:20,510
There we go.

90
00:06:20,660 --> 00:06:24,080
We now have a null email filled now.

91
00:06:24,080 --> 00:06:29,900
It's no obviously right, because we've already been creating data in here and now we've added this

92
00:06:29,900 --> 00:06:30,380
new column.

93
00:06:30,380 --> 00:06:32,580
So where would that data come from for this column?

94
00:06:32,600 --> 00:06:33,560
It won't be there, right?

95
00:06:33,950 --> 00:06:40,630
So if we wanted to perhaps update all of these columns for the existing people, we could do that now,

96
00:06:40,640 --> 00:06:40,910
right?

97
00:06:40,910 --> 00:06:42,290
We could do an update.

98
00:06:43,100 --> 00:06:51,170
People set email equal to nothing and nowhere dot com, for example.

99
00:06:51,590 --> 00:06:57,200
And if I don't specify a where clause, that's going to put that in all of those columns, which is

100
00:06:57,200 --> 00:07:01,340
maybe what I want in this particular case, maybe to initialize it with something.

101
00:07:02,090 --> 00:07:02,390
All right.

102
00:07:02,390 --> 00:07:03,770
So I will run that.

103
00:07:04,750 --> 00:07:08,740
And then come back up here again and re execute the query.

104
00:07:09,780 --> 00:07:15,000
And now we've got nothing at nowhere in all four of these records.

105
00:07:15,630 --> 00:07:20,460
And then I could also get rid of a column just as easily.

106
00:07:20,970 --> 00:07:31,650
So if I don't like that particular column there, I can execute altar table people, drop column email

107
00:07:31,920 --> 00:07:32,790
just like that.

108
00:07:33,870 --> 00:07:38,880
Bam, that column is gone and then requiring the database.

109
00:07:39,240 --> 00:07:39,870
There you go.

110
00:07:40,260 --> 00:07:42,040
It's gone again.

111
00:07:42,280 --> 00:07:47,460
Anytime you're deleting or dropping things, you probably want to be super extra, extra careful.

112
00:07:47,580 --> 00:07:54,250
In fact, a pattern that you'll see quite frequently in business instead of deleting records.

113
00:07:54,510 --> 00:08:02,670
A lot of the times what companies will do is they will add a column that just shows that a record is

114
00:08:02,670 --> 00:08:07,230
supposed to act as though it was deleted, like a delete flag or something like that.

115
00:08:07,440 --> 00:08:08,960
So let me show you what that could look like.

116
00:08:08,970 --> 00:08:15,360
In fact, we could alter this table altered table people and column.

117
00:08:16,760 --> 00:08:24,440
Delete flag, and because this is a flag, we probably should endeavour to make it like a Boolean,

118
00:08:24,440 --> 00:08:31,790
so let's jump into the H2 database here and look at our data types and see if there is a good data type

119
00:08:31,790 --> 00:08:34,580
that represents a flag or a Boolean right.

120
00:08:34,610 --> 00:08:39,950
Oh, and look at that, we've got an actual Boolean field right there and it takes values of true or

121
00:08:39,950 --> 00:08:40,400
false.

122
00:08:40,640 --> 00:08:41,720
That makes sense, right?

123
00:08:42,140 --> 00:08:46,340
So let's make this delete flag a Boolean.

124
00:08:48,380 --> 00:08:52,820
Now, be careful here with these data types like this Boolean here, I can tell you for sure.

125
00:08:53,210 --> 00:08:58,040
Not all databases are going to have a data type called Boolean.

126
00:08:58,580 --> 00:09:02,420
Some may have something called like bit or bit flag or something like that.

127
00:09:03,050 --> 00:09:04,820
Some may not have anything at all.

128
00:09:05,030 --> 00:09:11,870
A lot of the times in older databases and probably even modern ones that are used even now, a lot of

129
00:09:11,870 --> 00:09:17,450
organizations would just use a single character data type like one character.

130
00:09:17,450 --> 00:09:19,880
So it's not a string like of our cards, just one character.

131
00:09:19,880 --> 00:09:25,580
And then they would store a y or an in in that field to use it as a flag.

132
00:09:25,610 --> 00:09:33,740
Because many databases didn't always support a true Boolean or their DBUS or their data or their programmers

133
00:09:33,740 --> 00:09:38,420
who were issuing SQL didn't know what that data type was or that it even existed.

134
00:09:38,750 --> 00:09:42,770
But anyway, so yeah, we've got a Boolean here, so let's use that.

135
00:09:42,920 --> 00:09:44,060
Let's execute this.

136
00:09:44,660 --> 00:09:45,110
All right.

137
00:09:45,120 --> 00:09:47,930
Let's query the database back and see if we added it.

138
00:09:47,930 --> 00:09:48,800
Yet we did.

139
00:09:49,280 --> 00:09:56,270
And so then we can default to all of these fields to being false, meaning they're not to be deleted

140
00:09:56,270 --> 00:09:57,410
for the records, right?

141
00:09:57,420 --> 00:10:04,790
So update people set the elite flag equal to.

142
00:10:06,330 --> 00:10:07,000
False.

143
00:10:08,940 --> 00:10:09,420
All right.

144
00:10:10,320 --> 00:10:11,310
Let's go query.

145
00:10:13,120 --> 00:10:13,760
There we go.

146
00:10:13,780 --> 00:10:16,000
And so now all of those are set to false.

147
00:10:16,930 --> 00:10:19,570
And so let me see, do I still have?

148
00:10:19,960 --> 00:10:25,210
Let's put Jake back in here now so that we can delete him the more humane way.

149
00:10:25,570 --> 00:10:25,870
All right.

150
00:10:25,880 --> 00:10:30,880
So I'm going to add Jake back in, but I won't specify his deletion status.

151
00:10:31,990 --> 00:10:32,310
All right.

152
00:10:32,320 --> 00:10:35,740
So I've just re executed the addition of Jake.

153
00:10:35,920 --> 00:10:37,420
Let's query the database.

154
00:10:38,140 --> 00:10:38,670
There we go.

155
00:10:38,680 --> 00:10:39,820
So there's Jake.

156
00:10:40,690 --> 00:10:47,770
And now if I want to delete him in a more humane way without actually removing the record right, then

157
00:10:47,800 --> 00:10:58,000
I can simply update Jake to have a true in the delete flag field there so we can just do a update.

158
00:10:59,450 --> 00:11:06,260
People set to lead flag to True, where?

159
00:11:07,350 --> 00:11:10,020
Last name equals.

160
00:11:11,330 --> 00:11:12,110
Smith.

161
00:11:13,540 --> 00:11:14,200
There we go.

162
00:11:14,710 --> 00:11:17,080
And then let's re query the database.

163
00:11:17,860 --> 00:11:20,980
And so now Jake is virtually deleted.

164
00:11:21,250 --> 00:11:22,870
Now how would we make use of this?

165
00:11:23,050 --> 00:11:29,890
Well, basically any time we wanted to do any kind of processing on records in this table, we would

166
00:11:29,890 --> 00:11:37,130
always be sure to add in a filter, if you will, to say, you know, basically only accept people whose

167
00:11:37,150 --> 00:11:40,270
delete flag is not true or something like that.

168
00:11:40,510 --> 00:11:43,190
So that would, in effect, just leave.

169
00:11:43,210 --> 00:11:49,540
Jake Smith out of everything and then other common columns that you'll see in a business context would

170
00:11:49,540 --> 00:11:52,210
be additional date fields to show.

171
00:11:52,210 --> 00:11:57,970
Like when was the last time we updated one of these records or changed or deleted or things like that

172
00:11:57,970 --> 00:12:01,030
for audit, auditing purposes and things of that sort?

173
00:12:01,420 --> 00:12:08,200
So I think that's going to cover most of what we need to know for now to work with a basic database.

174
00:12:08,380 --> 00:12:12,910
So in the next lessons, we're going to jump back into the Java code now.

175
00:12:14,050 --> 00:12:16,160
And this is going to be a lot of fun, I think.

176
00:12:16,450 --> 00:12:25,210
And we're going to learn how to write Java code that can connect to a database and let us manipulate

177
00:12:25,210 --> 00:12:30,600
and and access data via Java code, which is really powerful.

178
00:12:30,610 --> 00:12:38,620
And that's probably where the vast majority of Java applications really earn their pay is in accessing

179
00:12:38,620 --> 00:12:43,540
large amounts of data that most businesses happened to happen to have.

180
00:12:44,050 --> 00:12:45,640
So see in the next one.
