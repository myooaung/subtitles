1
00:00:00,780 --> 00:00:01,260
All right.

2
00:00:01,470 --> 00:00:04,710
I got another data type for you to learn about.

3
00:00:04,890 --> 00:00:10,470
So the creators of Java have been super busy people over the last few years.

4
00:00:11,010 --> 00:00:17,940
They're really trying to keep Java relevant in a world full of programming language competition, and

5
00:00:17,940 --> 00:00:24,030
a lot of the languages that are competing with Java are doing it by being more lightweight, letting

6
00:00:24,030 --> 00:00:26,250
you do more with fewer lines of code.

7
00:00:26,280 --> 00:00:32,370
So I think that has really inspired Java's creators to rise to the occasion and try to keep things relevant.

8
00:00:32,610 --> 00:00:40,620
So with that being said, the newest data type added to Java as of Java version 14 is called record.

9
00:00:40,800 --> 00:00:44,940
And basically, it's a shorthand version of a class.

10
00:00:45,210 --> 00:00:51,930
So let's create a quick class, and I will point out the things that the record type are helping us

11
00:00:51,930 --> 00:00:52,260
with.

12
00:00:52,950 --> 00:00:54,480
All right, so let's see here.

13
00:00:54,480 --> 00:00:57,210
I'm just going to create any random class will quick.

14
00:00:57,210 --> 00:01:03,780
I'll come in here to new Java class and I'm going to create a class and let's call it weirdo.

15
00:01:04,800 --> 00:01:05,130
All right.

16
00:01:05,140 --> 00:01:06,510
So we want to make a weirdo.

17
00:01:07,170 --> 00:01:10,610
And as basically, this will be a person, right?

18
00:01:10,620 --> 00:01:19,590
So I'm going to just say, like, you know, here's a private string last name and a private string

19
00:01:19,800 --> 00:01:27,510
first name and a private local date, which is a date of birth.

20
00:01:27,600 --> 00:01:28,020
OK.

21
00:01:29,130 --> 00:01:36,180
So we've we've done this many times before, and I've mentioned that often, not always, but quite

22
00:01:36,180 --> 00:01:36,780
often.

23
00:01:36,870 --> 00:01:43,380
Most Java developers will, almost without thinking, just automatically generate a constructor and

24
00:01:43,380 --> 00:01:44,490
getters and setters.

25
00:01:44,490 --> 00:01:49,800
And so they'll they'll come in here and they'll say, Give me a constructor, and there's a good chance

26
00:01:49,800 --> 00:01:55,650
they'll generate two constructors, at least one which takes no arguments at all.

27
00:01:55,680 --> 00:02:02,580
So, you know, our default constructor and then they'll they might make another one that uses some

28
00:02:02,580 --> 00:02:06,340
or all of the fields that they've added to the class.

29
00:02:06,360 --> 00:02:08,250
OK, so something like that.

30
00:02:08,550 --> 00:02:11,070
And then they'll generate the getters and setters.

31
00:02:11,070 --> 00:02:17,850
And again, that'll usually be comprised of all of the fields that they've added to the class like this.

32
00:02:18,030 --> 00:02:24,060
One other thing that they will often do, and I will be teaching this when we get to collections, but

33
00:02:24,060 --> 00:02:25,410
I'll give you a sneak preview now.

34
00:02:25,740 --> 00:02:30,420
They'll often also generate what are called equals and hash code methods.

35
00:02:30,630 --> 00:02:34,860
My option for that is falling off the end of the screen, but trust me, it's there.

36
00:02:34,860 --> 00:02:41,340
It's called equals in hash code, and so they'll often generate an implementation for these two methods.

37
00:02:41,880 --> 00:02:45,780
And I'll just take the defaults here for now.

38
00:02:46,560 --> 00:02:46,980
All right.

39
00:02:47,100 --> 00:02:50,280
And they might even generated two string method, which we've done before.

40
00:02:50,280 --> 00:02:51,330
I won't bother with that.

41
00:02:51,570 --> 00:02:51,810
All right.

42
00:02:51,820 --> 00:03:01,980
So what we have here is a lot of the standard things that a good number of classes written by professional

43
00:03:01,980 --> 00:03:07,420
Java developers will often have a hash code method and equals method.

44
00:03:07,560 --> 00:03:12,720
You'll learn why those are good things to have when we get to collections, getters and setters for

45
00:03:12,720 --> 00:03:13,500
the fields.

46
00:03:14,070 --> 00:03:16,470
At least one constructor, maybe a couple.

47
00:03:16,620 --> 00:03:18,240
OK, very, very typical.

48
00:03:18,570 --> 00:03:23,400
And like I said, developers will often generate all this stuff without even thinking about it.

49
00:03:23,940 --> 00:03:25,650
So here's a problem.

50
00:03:26,790 --> 00:03:35,190
If you're a programmer who's been using one of the competing, possibly newer, more streamlined languages

51
00:03:35,910 --> 00:03:43,740
for a while, and then you come to Java, perhaps because you took a job at a company where Java is

52
00:03:43,740 --> 00:03:51,450
the language used primarily, and you learn that this is what a majority of Java developers do just

53
00:03:51,480 --> 00:03:52,530
automatically.

54
00:03:52,770 --> 00:03:58,440
And you start looking through all of this and you're like, Why there's so much code here?

55
00:03:58,440 --> 00:04:01,380
And this is all just boilerplate code, right?

56
00:04:01,380 --> 00:04:03,570
Which means, you know, the code that can be generated.

57
00:04:03,570 --> 00:04:09,450
So it's not considered to be code that's really adding much value to anything.

58
00:04:09,460 --> 00:04:11,970
It's just like the the starting point.

59
00:04:12,480 --> 00:04:21,440
So consider we haven't even added our own like actual true behaviors to model what a weirdo can do,

60
00:04:21,450 --> 00:04:21,810
right?

61
00:04:22,020 --> 00:04:23,820
This is just the starting point.

62
00:04:24,300 --> 00:04:33,090
So a good number of developers, especially those who have experience with languages other than Java,

63
00:04:33,270 --> 00:04:38,760
will look at this and just say, I don't want anything at all to do with Java if this is what I have

64
00:04:38,760 --> 00:04:40,310
to do every time I, you know.

65
00:04:40,470 --> 00:04:47,010
Now, granted, this didn't take any time for me to generate because, you know, the idea generated

66
00:04:47,010 --> 00:04:48,060
it all for me.

67
00:04:48,060 --> 00:04:50,990
But it is a lot to look at, right?

68
00:04:51,000 --> 00:04:53,310
And you haven't even really done much yet.

69
00:04:54,510 --> 00:04:59,820
And at this point, all this class can do is just create objects that are just.

70
00:04:59,950 --> 00:05:04,840
Glorified data holders, so keep in mind, and this is a really key point.

71
00:05:05,620 --> 00:05:15,040
The true value of object orientation is the combining of data with behavior together to give you to

72
00:05:15,040 --> 00:05:19,810
allow you to model the real world or business concepts or whatever.

73
00:05:20,980 --> 00:05:27,580
When we just use an object oriented language like Java to to just model data, which is all I'm doing

74
00:05:27,580 --> 00:05:32,560
here so far, we're really missing out on a lot of the value.

75
00:05:32,680 --> 00:05:37,870
Now, granted, sometimes there are programs that we need to right where there just aren't that many

76
00:05:37,870 --> 00:05:41,050
opportunities to get into some really awesome modeling.

77
00:05:41,050 --> 00:05:44,050
And all we really needed were just some glorified data holders.

78
00:05:44,200 --> 00:05:46,120
And there you go, right?

79
00:05:46,150 --> 00:05:48,040
So maybe this is fine for that.

80
00:05:48,220 --> 00:05:49,930
So that's just something to keep in mind.

81
00:05:49,960 --> 00:05:58,720
However, the architects of Java have over the years become increasingly aware that there is this negative

82
00:05:58,720 --> 00:06:01,330
sentiment with regards to Java.

83
00:06:01,570 --> 00:06:04,900
And so they've come up with a solution of sorts.

84
00:06:05,260 --> 00:06:07,390
And basically, it's a new data type.

85
00:06:07,600 --> 00:06:13,990
Now this data type is really just a facade on top of a class.

86
00:06:14,200 --> 00:06:21,100
So let's recreate this weirdo class, but using the new data type of record.

87
00:06:21,220 --> 00:06:23,170
So I'm going to delete this.

88
00:06:26,520 --> 00:06:32,880
Then I'm going to come back over here again to the package, right click on it new Java class.

89
00:06:33,270 --> 00:06:37,860
But this time I'm going to choose record and I will name it weirdo again.

90
00:06:38,220 --> 00:06:38,670
OK.

91
00:06:39,840 --> 00:06:40,440
Return.

92
00:06:41,160 --> 00:06:41,610
All right.

93
00:06:42,360 --> 00:06:44,280
So now notice what the differences are.

94
00:06:44,310 --> 00:06:45,150
There's a couple.

95
00:06:45,510 --> 00:06:48,000
First off, we have public, but not class.

96
00:06:48,030 --> 00:06:49,800
Instead, it's public and then record.

97
00:06:50,520 --> 00:07:00,660
And then instead of stating the name of the class and then curly braces, instead, we just start off

98
00:07:00,660 --> 00:07:06,220
with the name of the class and then parentheses as if we were defining a constructor.

99
00:07:06,390 --> 00:07:11,850
And in fact, basically that is what we're about to do here is to just define a constructor.

100
00:07:12,090 --> 00:07:18,360
So the equivalent of what we just did with a class would look like.

101
00:07:18,360 --> 00:07:29,490
This will have a string, last name, comma, string, first name, comma, local date dob.

102
00:07:30,480 --> 00:07:31,230
And we're done.

103
00:07:32,210 --> 00:07:40,640
This is equivalent to all of what you just saw on the previous class based version of the weirdo.

104
00:07:41,060 --> 00:07:50,030
And what I mean to say here is that by just typing that little bit there, Java will essentially generate

105
00:07:50,330 --> 00:08:00,500
for us the getters and setters and implementation of the hash code and equals methods and a basic body

106
00:08:00,500 --> 00:08:02,390
of this constructor here.

107
00:08:02,840 --> 00:08:04,220
Now let me prove that to you.

108
00:08:04,220 --> 00:08:12,440
So I will come over here to the main class, and I'm going to instantiate an instance of our new weirdo.

109
00:08:13,100 --> 00:08:17,570
So weirdo Larry equals new.

110
00:08:17,900 --> 00:08:21,500
So you instantiate it just like you would any class.

111
00:08:21,680 --> 00:08:26,600
And now I have this constructor where I can specify a last name, first name and a date of birth.

112
00:08:26,990 --> 00:08:33,650
So I'll say David LeRae with a birth date of Oops.

113
00:08:35,790 --> 00:08:36,540
Of.

114
00:08:37,510 --> 00:08:41,680
Whatever, I don't know, nineteen, fifty one one.

115
00:08:44,220 --> 00:08:44,970
There we go.

116
00:08:46,670 --> 00:08:56,180
So that just created an instance of the record from from the perspective of this class man that is using

117
00:08:56,180 --> 00:08:57,200
the weirdo class.

118
00:08:57,470 --> 00:08:59,180
There is no real difference.

119
00:08:59,630 --> 00:09:03,470
The biggest difference for us is that we didn't have to type a bunch of stuff now.

120
00:09:03,560 --> 00:09:06,970
Let's see so I can access the fields now.

121
00:09:06,980 --> 00:09:09,440
There are a couple of very minor differences here.

122
00:09:09,650 --> 00:09:18,110
If I access any of the fields now, when we create fields on a class and use our ID e to generate getters

123
00:09:18,110 --> 00:09:23,450
and setters for us, like, let's say we add a field called first name and then we generate getters

124
00:09:23,450 --> 00:09:24,380
and setters for them.

125
00:09:24,650 --> 00:09:32,030
The getter and setter methods will by default be named something like Get last name, set last name.

126
00:09:32,180 --> 00:09:32,600
OK.

127
00:09:32,990 --> 00:09:37,670
However, when we use records, actually, excuse me, I did slightly misspeak.

128
00:09:37,850 --> 00:09:40,370
There won't be any setter methods.

129
00:09:40,760 --> 00:09:43,850
I'll explain that in just a moment, but there are getter methods.

130
00:09:44,180 --> 00:09:48,050
But the getter methods won't be prefixed with the word get.

131
00:09:48,500 --> 00:09:52,730
Instead, they just match the actual name of the field.

132
00:09:52,740 --> 00:09:58,880
So if I want to get the first name, I can say Larry Dot first name, but with parentheses on the end.

133
00:09:59,000 --> 00:10:00,290
And that would retrieve that.

134
00:10:00,290 --> 00:10:03,680
So I can I can.

135
00:10:05,000 --> 00:10:06,200
I can print that out.

136
00:10:08,100 --> 00:10:12,510
Like this, Larry, that first name, Larry, that last name, etc..

137
00:10:13,110 --> 00:10:20,640
Now the reason that there won't be certain methods for a record is because records are final.

138
00:10:21,030 --> 00:10:21,370
OK?

139
00:10:21,390 --> 00:10:22,590
They are made final.

140
00:10:22,710 --> 00:10:24,630
And not only the record is final.

141
00:10:24,630 --> 00:10:30,300
Like the CLAT, the class essentially is final, which means it cannot be extended.

142
00:10:30,510 --> 00:10:39,900
But also the fields within the record are final, which means that once they've been set by the constructor,

143
00:10:40,020 --> 00:10:41,370
they can't be changed.

144
00:10:41,370 --> 00:10:48,390
And since they can't be changed after creation of the object, there's no point in generating set or

145
00:10:48,390 --> 00:10:49,800
methods for those fields.

146
00:10:49,800 --> 00:10:56,520
Setter methods imply that you can change those fields after the object has already been created, and

147
00:10:56,520 --> 00:10:58,260
you can't do that with records.

148
00:10:58,410 --> 00:11:02,280
And the reason for that has to do with a concept called mutability.

149
00:11:02,490 --> 00:11:09,570
Basically, more often than not, it's a great idea to keep as much of your data immutable as possible.

150
00:11:09,570 --> 00:11:15,930
That means unchangeable, so you want to make it so that you can create it one time and then it can't

151
00:11:15,930 --> 00:11:22,920
accidentally be changed, because that's one of the ways that lots of bugs pop pop up into code is,

152
00:11:22,920 --> 00:11:28,830
you know, someone creates an object and then some other code changes data within that object.

153
00:11:28,950 --> 00:11:33,930
And now you've got bugs because the data that they changed it to isn't valid in some way.

154
00:11:34,320 --> 00:11:42,690
That's one of the reasons why immutability is often a sought after property of code, and so records

155
00:11:42,690 --> 00:11:44,400
just build that right in.

156
00:11:44,580 --> 00:11:50,850
If you need to change something about the Larry object of type weirdo.

157
00:11:51,030 --> 00:11:57,570
You just create another weirdo, perhaps one that's based off of a preexisting weirdo, but it will

158
00:11:57,570 --> 00:11:58,700
be a new weirdo.

159
00:11:58,710 --> 00:12:03,990
So, for example, if you wanted to make a better weirdo, we'll make one right now.

160
00:12:03,990 --> 00:12:10,080
Weirdo Better weirdo equals new weirdo.

161
00:12:12,800 --> 00:12:18,710
And you could do something like Larry Dot, our dot last.

162
00:12:20,240 --> 00:12:27,020
Last name, plus Z.Z, Karma.

163
00:12:27,350 --> 00:12:28,610
You see where I'm going with this.

164
00:12:28,850 --> 00:12:35,600
You know, if I wanted to make changes to this Larry object, I can't technically do that.

165
00:12:35,600 --> 00:12:44,290
But what I can do is just to create another weirdo object based off of the Larry object in some way.

166
00:12:44,300 --> 00:12:47,870
If I wanted to do that, or I could just, you know, make a whole new object, whatever.

167
00:12:48,380 --> 00:12:50,570
And so that's how immutability works.

168
00:12:50,780 --> 00:12:55,070
Sometimes it can be a pain, but it often protects us from ourselves.

169
00:12:55,460 --> 00:12:55,750
All right.

170
00:12:55,760 --> 00:12:58,370
So there's a few rules about records.

171
00:12:58,910 --> 00:13:01,440
Records cannot extend any class.

172
00:13:01,790 --> 00:13:02,140
OK.

173
00:13:02,180 --> 00:13:02,930
They're final.

174
00:13:03,380 --> 00:13:06,710
However, they can implement an interface.

175
00:13:06,740 --> 00:13:08,330
Let me show you what that would look like.

176
00:13:08,660 --> 00:13:11,870
Let me delete that will jump back over here into the weirdo.

177
00:13:12,950 --> 00:13:14,660
I started to say weirdo class.

178
00:13:14,660 --> 00:13:15,880
Weirdo record.

179
00:13:15,920 --> 00:13:16,280
Right?

180
00:13:16,490 --> 00:13:22,670
So if I want this guy to implement an interface, it's it's pretty much the same as with a class just

181
00:13:22,670 --> 00:13:24,950
at the end of this constructor looking thing.

182
00:13:24,950 --> 00:13:30,800
Here, I can still use implements and then I can make it implement one of my interfaces, such as the

183
00:13:30,800 --> 00:13:31,880
Apple interface.

184
00:13:32,270 --> 00:13:37,760
I chose that one because then I won't be forced to actually implement any any methods here because there

185
00:13:37,760 --> 00:13:40,220
are no methods to find on the Apple interface.

186
00:13:40,400 --> 00:13:41,930
But yeah, you can do that.

187
00:13:42,290 --> 00:13:48,440
And let's see if you want to create alternative constructors, you can do that as well.

188
00:13:48,560 --> 00:13:52,460
And that looks pretty much the same as with Class Constructor.

189
00:13:52,470 --> 00:13:54,290
So, you know, you can set it.

190
00:13:54,770 --> 00:13:56,690
Presumably, it'll be public problem.

191
00:13:56,690 --> 00:13:58,640
Probably weirdo.

192
00:13:58,850 --> 00:14:01,250
And then you can put other inputs in there.

193
00:14:01,250 --> 00:14:06,470
So let's say that I want another constructor where I don't have to specify the date of birth, right?

194
00:14:06,680 --> 00:14:09,140
So I can do something like this.

195
00:14:14,450 --> 00:14:21,020
And so then what I can do is just delegate essentially up to the original constructor for the class,

196
00:14:21,020 --> 00:14:23,060
which is this this guy here?

197
00:14:23,480 --> 00:14:28,220
I can call that from this new constructor and it will look exactly like this.

198
00:14:28,310 --> 00:14:33,770
This and then I can pass in these values.

199
00:14:35,150 --> 00:14:39,110
Last name, first name now.

200
00:14:40,340 --> 00:14:49,640
Though this new constructor that I'm defining does not require does not take a date of birth, if I

201
00:14:49,640 --> 00:14:56,870
want to delegate up to the original constructor, I will still need to pass something.

202
00:14:56,900 --> 00:15:00,590
OK, so I could pass a null.

203
00:15:02,800 --> 00:15:04,300
Or some?

204
00:15:05,740 --> 00:15:06,790
Date of birth.

205
00:15:07,750 --> 00:15:12,940
That represents, you know, that we don't really know what their date of birth is or that it's unspecified

206
00:15:12,940 --> 00:15:14,350
or something of that sort.

207
00:15:14,410 --> 00:15:14,860
OK.

208
00:15:16,840 --> 00:15:19,300
One one one, for example.

209
00:15:19,300 --> 00:15:20,020
I don't know if that's.

210
00:15:20,530 --> 00:15:22,090
I don't know what would happen with that, actually.

211
00:15:22,090 --> 00:15:23,860
I guess that would be the year one.

212
00:15:24,340 --> 00:15:28,990
So something along those lines, but that's how you can create your own constructors.

213
00:15:29,140 --> 00:15:32,860
And then if you can create your own constructors, you also can create your own methods.

214
00:15:32,860 --> 00:15:40,460
Still, so you can create a method of extreme say hello return.

215
00:15:42,550 --> 00:15:43,630
Hello, world.

216
00:15:45,000 --> 00:15:45,570
There we go.

217
00:15:46,050 --> 00:15:53,850
And then if I jump back over to the main class, I can use my new constructor.

218
00:15:54,750 --> 00:15:56,250
I'll create another weirdo.

219
00:15:57,950 --> 00:16:02,420
Jake equals new weirdo.

220
00:16:02,450 --> 00:16:07,390
And so what snake, Jake?

221
00:16:08,870 --> 00:16:09,410
There we go.

222
00:16:09,920 --> 00:16:12,110
And then I can call Jake.

223
00:16:13,130 --> 00:16:14,630
Say hello.

224
00:16:15,680 --> 00:16:15,980
All right.

225
00:16:16,460 --> 00:16:23,480
So, yeah, these are pretty nice, pretty convenient kind of shorthand versions of classes so that

226
00:16:23,480 --> 00:16:29,750
you can dispense with most of the boilerplate that we normally put into classes.

227
00:16:29,750 --> 00:16:33,830
But like I said, they can't extend any other classes.

228
00:16:34,070 --> 00:16:42,050
So if you become a professional Java developer and especially a business developer, what you may encounter

229
00:16:42,260 --> 00:16:49,910
is that a lot of Java business development involves creating lots of shallow classes that model very

230
00:16:49,910 --> 00:16:52,430
simple concepts like a person or something.

231
00:16:52,880 --> 00:17:01,550
And it's rare that anyone on teams where this type of Java development takes place is trying to architect

232
00:17:01,880 --> 00:17:04,550
really well thought out class hierarchies.

233
00:17:04,550 --> 00:17:09,380
You know where this extends from that and implements this and all of these things, all this fanciness

234
00:17:09,920 --> 00:17:13,730
that may not be super common in a lot of Java shops.

235
00:17:14,090 --> 00:17:22,160
And so using a record to do really basic data carrying like go, just go out to the database, go grab

236
00:17:22,160 --> 00:17:27,890
a bunch of information, plop it into some data holder, which in this case would just be this simple

237
00:17:27,890 --> 00:17:34,720
Java class or record and then send it on its way to be utilized in some other way.

238
00:17:34,730 --> 00:17:41,270
Maybe it will be presented to a screen or to a web page or something like that.

239
00:17:41,720 --> 00:17:46,910
So that's probably one of the real intended use cases for records.

240
00:17:47,120 --> 00:17:51,890
So anyway, let me finish just telling you a few of the other properties of records.

241
00:17:52,370 --> 00:17:59,210
You can't declare any other instance, fields or instance variables on the record other than those fields

242
00:17:59,210 --> 00:18:02,330
that you are defining in the constructor itself.

243
00:18:02,600 --> 00:18:04,790
Now notice I said instance variables.

244
00:18:05,010 --> 00:18:15,800
You can define static fields on on on a record and note also that since record classes themselves are

245
00:18:15,830 --> 00:18:18,710
final and therefore they cannot be extended.

246
00:18:19,070 --> 00:18:24,200
Then also, they cannot be abstract because the only thing you can really do with an abstract class

247
00:18:24,200 --> 00:18:25,220
is to extend it.

248
00:18:25,820 --> 00:18:31,580
So no abstraction for records, they can be nested inside of other classes.

249
00:18:31,580 --> 00:18:38,110
So I could have defined weirdo or any other class as a basically a nested class somewhere else.

250
00:18:38,120 --> 00:18:39,680
Let me let's see here.

251
00:18:39,690 --> 00:18:41,840
Let me show you what that might have looked like.

252
00:18:42,830 --> 00:18:46,160
Let's say we decide to add another employee type.

253
00:18:46,160 --> 00:18:51,080
Well, except that we can't really, because that would imply that it would extend from employee and

254
00:18:51,080 --> 00:18:52,280
records can't extend.

255
00:18:52,610 --> 00:18:59,900
But let me show you anyway what it would look like to create and a record as a nested class, essentially

256
00:19:00,350 --> 00:19:05,870
so we can just create just as we did before instead of public class.

257
00:19:05,870 --> 00:19:07,520
It will be a public record.

258
00:19:07,910 --> 00:19:11,330
And let's call it, I don't know, jumper.

259
00:19:12,290 --> 00:19:16,940
And because I don't feel like thinking I'll use, you know, first name.

260
00:19:18,680 --> 00:19:19,670
Last name.

261
00:19:22,780 --> 00:19:23,320
There you go.

262
00:19:23,740 --> 00:19:26,440
So there's our new jumper record.

263
00:19:27,340 --> 00:19:32,110
All right, so I think that's going to pretty much complete what I wanted to cover on records.

264
00:19:32,270 --> 00:19:38,140
They're basically just streamlined versions of classes with a few restrictions added on them, such

265
00:19:38,140 --> 00:19:43,240
as the fact that they can't extend anything and they themselves can't be extended either, but they

266
00:19:43,240 --> 00:19:45,160
can implement interfaces.

267
00:19:45,310 --> 00:19:48,430
And now that we know that interfaces can have default methods.

268
00:19:49,630 --> 00:19:52,720
You know, you got some you got some options there, for sure.

269
00:19:53,560 --> 00:19:59,620
There's something in my soul that makes me want to caution you about running out and just like making

270
00:19:59,620 --> 00:20:02,380
all models records by default.

271
00:20:03,100 --> 00:20:04,200
But you know what I mean?

272
00:20:04,210 --> 00:20:06,010
You're young, you're new to Java.

273
00:20:06,220 --> 00:20:06,880
Have that it?

274
00:20:07,120 --> 00:20:12,700
If you get a job working somewhere and you start trying to do this, keep in mind, this only works

275
00:20:12,700 --> 00:20:14,940
in some of the most recent versions of Java.

276
00:20:14,950 --> 00:20:19,570
I think it was a preview, in fact, in Java version 14 14, if I'm not mistaken.

277
00:20:19,810 --> 00:20:21,970
So it hasn't been out all that long.

278
00:20:22,360 --> 00:20:29,110
So there may not be a lot of teams in the US as of 2021 who even know about records for all I know.

279
00:20:29,410 --> 00:20:31,220
But yeah, have fun.

280
00:20:31,240 --> 00:20:32,410
Go knock yourselves out.

281
00:20:33,280 --> 00:20:34,780
All right, I'll see you in the next one.
