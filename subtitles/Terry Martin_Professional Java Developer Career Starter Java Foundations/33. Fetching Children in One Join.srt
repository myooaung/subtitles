1
00:00:00,450 --> 00:00:07,020
All right, so in the last lesson, we added the ability to create children for a person and set those

2
00:00:07,020 --> 00:00:12,720
children on the person and then save that person and then confirm that when we save the person, their

3
00:00:12,720 --> 00:00:14,730
children are getting saved with them.

4
00:00:15,090 --> 00:00:21,330
And we wrote this test to confirm that something along those lines was apparently actually happening

5
00:00:21,330 --> 00:00:27,360
here because we could confirm that the IDs of the children were something other than zero as opposed

6
00:00:27,360 --> 00:00:27,960
to null.

7
00:00:28,260 --> 00:00:29,580
So that looks like it worked.

8
00:00:29,850 --> 00:00:35,670
So in this lesson, we're now going to do the other side of this and enable the children to be retrieved

9
00:00:35,670 --> 00:00:38,670
with the person when we find a person by ID.

10
00:00:39,330 --> 00:00:42,930
Now, before we do that, I don't remember if we did this in the last lesson or not.

11
00:00:42,930 --> 00:00:46,500
So I want to just run all the tests just to make sure we're good.

12
00:00:46,500 --> 00:00:49,530
There seems like we did do this, but let's just make sure.

13
00:00:51,090 --> 00:00:51,390
OK.

14
00:00:51,420 --> 00:00:51,930
Very good.

15
00:00:52,500 --> 00:00:53,550
So that's good.

16
00:00:53,670 --> 00:00:59,470
OK, so then let's jump back down here to the can save person with children.

17
00:00:59,490 --> 00:01:04,200
And now let's do a can find person with children.

18
00:01:04,230 --> 00:01:04,570
Right?

19
00:01:04,590 --> 00:01:09,820
So in fact, we've got a few can find person by ID with this address.

20
00:01:09,840 --> 00:01:12,390
So yeah, let's just add another one down here.

21
00:01:13,530 --> 00:01:14,130
Test.

22
00:01:14,430 --> 00:01:21,300
Public void can find person by I.D. with children.

23
00:01:23,790 --> 00:01:24,390
All right.

24
00:01:24,540 --> 00:01:29,580
So I guess we'll just start off with much of what we did for the save right here.

25
00:01:30,390 --> 00:01:37,740
So all of that I will copy and come down here and let me just restate in case any of you are wondering,

26
00:01:37,740 --> 00:01:43,620
because I keep harping on this whole idea that if you're copying data and pasting it, then maybe you

27
00:01:43,620 --> 00:01:50,430
should be extracting a method that tends to be particularly true with our implementation code or the

28
00:01:50,430 --> 00:01:52,410
code that is the system under test.

29
00:01:52,950 --> 00:01:57,570
In my mind, it's a little more nuanced when we're in the test code itself.

30
00:01:58,110 --> 00:02:04,170
Now, I certainly could re-use this block of code, which I just copied from up above.

31
00:02:04,440 --> 00:02:10,620
But in my own opinion, I think that might actually obscure the clarity of what I'm trying to accomplish

32
00:02:10,620 --> 00:02:11,670
with this test.

33
00:02:11,880 --> 00:02:15,090
But it is certainly a possibility for consideration.

34
00:02:15,420 --> 00:02:21,930
If I was possibly going to have a lot of tests that used this same setup or very, very similar setup

35
00:02:21,940 --> 00:02:27,540
such that I could parameter ize a method and reuse it, I might give stronger consideration to doing

36
00:02:27,540 --> 00:02:27,810
that.

37
00:02:28,200 --> 00:02:30,860
But so far, I'm just copying that code one time.

38
00:02:30,870 --> 00:02:36,420
And I think by being able to explicitly see that I'm creating the person and the children and then saving

39
00:02:36,420 --> 00:02:39,990
them, and now I'm getting ready to load that back up or whatever.

40
00:02:40,170 --> 00:02:44,640
I think that actually makes this test a little more clear to see the intent here.

41
00:02:45,390 --> 00:02:45,700
All right.

42
00:02:45,720 --> 00:02:51,900
So anyway, so we will presumably have successfully saved this person with their children.

43
00:02:52,380 --> 00:03:03,660
And so then we can retrieve this person repo, find my I.D. and we will reference the saved person's

44
00:03:03,690 --> 00:03:12,660
ID like so and then we will call get and then we will save a reference to that and call it found person.

45
00:03:12,660 --> 00:03:18,570
As we're doing up here just to stick with the basic format here and now, a few things that we could

46
00:03:18,570 --> 00:03:23,820
consider doing in order to assert that these children actually got loaded properly.

47
00:03:24,270 --> 00:03:31,710
The easiest thing probably that we could do is just assert that the bound person has three children,

48
00:03:31,740 --> 00:03:32,100
right?

49
00:03:32,190 --> 00:03:34,280
So that would be really easy to do.

50
00:03:34,320 --> 00:03:40,770
A little bit better than that might be to verify that there are three children and that their names

51
00:03:40,770 --> 00:03:42,470
are Johnny, Sarah and Jenny.

52
00:03:42,480 --> 00:03:47,580
Because then we'd really know not only that we got those objects, but that we got some of the data

53
00:03:47,610 --> 00:03:49,950
associated with the objects as well.

54
00:03:50,550 --> 00:03:52,920
So let's let's see what our options are here.

55
00:03:53,130 --> 00:03:59,190
So let's do an assert that found person dot get children.

56
00:03:59,550 --> 00:04:05,850
So if we wanted to confirm that there are children with the names of Johnny, Sierra and Jenny.

57
00:04:06,510 --> 00:04:13,650
One way that I can think of doing that would be to actually use the Streams API and map all of the children.

58
00:04:13,650 --> 00:04:18,840
Assuming that we got the children out, we could map those children to just their first names and then

59
00:04:18,840 --> 00:04:21,630
collect those first names into a collection.

60
00:04:21,870 --> 00:04:26,970
And then there should be a certain methods that would allow us to assert that that collection of first

61
00:04:26,970 --> 00:04:32,160
names contains a Johnny, a Sarah and a Jenny, something along those lines.

62
00:04:32,160 --> 00:04:35,130
So that's what I'm that's what I'm kind of thinking and trying out here.

63
00:04:35,310 --> 00:04:36,790
Let's see what that might look like.

64
00:04:36,810 --> 00:04:39,780
So get children stream.

65
00:04:41,200 --> 00:04:41,890
Map.

66
00:04:43,240 --> 00:04:51,520
And let's do a person get first name and we will collect them into a collection I could collect into

67
00:04:51,520 --> 00:05:00,760
a set or a list, and we will collect these into a set like so and we don't need this class here.

68
00:05:00,760 --> 00:05:04,990
I can just do a static import and save a little bit of room like so.

69
00:05:05,830 --> 00:05:06,400
All right.

70
00:05:06,880 --> 00:05:12,070
So now this assertion is dealing with a collection of presumably three names.

71
00:05:12,250 --> 00:05:19,960
So now we can use one of the assertion methods here contains and it takes in this case, bar args of

72
00:05:19,960 --> 00:05:20,560
strings.

73
00:05:20,560 --> 00:05:25,810
And so here let me let's move this down to another line so that we're not so scrunched up here.

74
00:05:25,990 --> 00:05:30,070
So now all I have to do is just say contains Johnny.

75
00:05:32,740 --> 00:05:33,460
Sarah?

76
00:05:35,400 --> 00:05:36,270
Or Jenny?

77
00:05:36,630 --> 00:05:37,290
Like so.

78
00:05:37,950 --> 00:05:43,230
And if I scroll up a bit and hover over this contains method here, let's just see a little bit more

79
00:05:43,230 --> 00:05:49,050
about how this really works so that it verifies that the actual group contains the given values in any

80
00:05:49,050 --> 00:05:49,500
order.

81
00:05:49,500 --> 00:05:52,110
So that's kind of important to know.

82
00:05:52,200 --> 00:05:58,080
So we don't necessarily have to care how the database is going to retrieve this data or what order it's

83
00:05:58,080 --> 00:05:58,950
going to be in.

84
00:05:59,190 --> 00:05:59,520
Right.

85
00:06:00,330 --> 00:06:02,940
So that was one thing that I was just wanting to make sure of.

86
00:06:03,360 --> 00:06:06,810
OK, so now let's run this and see that it will fail.

87
00:06:08,630 --> 00:06:14,840
OK, so we're expecting a harsh set to contain Johnny, Sarah and Jenny, but we could not find any

88
00:06:14,840 --> 00:06:17,360
of those elements of Johnny, Sarah or Jenny.

89
00:06:17,420 --> 00:06:18,530
None of them are there.

90
00:06:18,710 --> 00:06:21,860
So I think this looks like we're pretty good here with the test.

91
00:06:22,340 --> 00:06:22,700
All right.

92
00:06:22,730 --> 00:06:24,560
So now let's just go make this work.

93
00:06:24,830 --> 00:06:26,750
Now this is going to be a lot of fun, I think.

94
00:06:27,000 --> 00:06:29,990
So maybe we'll start in the spreadsheet.

95
00:06:30,380 --> 00:06:33,860
OK, so you already know how this part is working.

96
00:06:34,040 --> 00:06:35,510
We're going to have these children.

97
00:06:35,690 --> 00:06:40,760
And the only difference between a child and a parent is the fact that the children will have a parent

98
00:06:40,760 --> 00:06:40,970
ID.

99
00:06:41,480 --> 00:06:45,860
And by the way, I mean, technically a parent could also be a child.

100
00:06:45,860 --> 00:06:48,260
But maybe we're not going to go quite that far with things.

101
00:06:48,260 --> 00:06:51,200
Okay, because that'll just make stuff even more complicated, OK?

102
00:06:51,770 --> 00:06:59,450
So I think you should already have the skills to know how you could retrieve a person and then make

103
00:06:59,450 --> 00:07:03,290
a separate database call to retrieve their children, right?

104
00:07:03,530 --> 00:07:06,040
You could create a separate school expression.

105
00:07:06,050 --> 00:07:10,220
In fact, here let's let's go to the I.D. and see what I'm talking about.

106
00:07:10,520 --> 00:07:18,650
So let's go into the people repository, and this is the code that gets called today when we are retrieving

107
00:07:18,770 --> 00:07:20,990
a person from the database, right?

108
00:07:21,010 --> 00:07:22,010
So right here.

109
00:07:22,520 --> 00:07:27,080
So if we want to, I'm not going to really do this all the way, all the way through.

110
00:07:27,080 --> 00:07:36,530
But if we wanted to, we could create a private method here that might return a set of people like this.

111
00:07:37,340 --> 00:07:43,880
And maybe it would be like find children by parent.

112
00:07:44,420 --> 00:07:45,620
And it would take.

113
00:07:46,660 --> 00:07:48,910
A parent as an input.

114
00:07:49,360 --> 00:07:49,690
Right?

115
00:07:50,230 --> 00:07:56,740
And then we could actually just do all of the JTBC code right here now, we'd have to write this code

116
00:07:56,740 --> 00:08:03,460
out explicitly because our credit repository doesn't have any scaffolding in place already to let us

117
00:08:03,490 --> 00:08:08,170
go search for children by the parent ID or something like that, right?

118
00:08:08,190 --> 00:08:12,640
That's just a little outside of the templating that we've put in place so far.

119
00:08:13,150 --> 00:08:18,550
But you know, we go get a connection like we've done before and prepare a statement.

120
00:08:18,550 --> 00:08:22,800
And then we could say something like select everything, notice.

121
00:08:22,810 --> 00:08:25,330
I'm using a lowercase here because I don't really care right now.

122
00:08:25,520 --> 00:08:28,990
And by the way, the lowercase uppercase thing I've mentioned this before, it doesn't really matter.

123
00:08:29,110 --> 00:08:37,480
I just tend to write my SQL in uppercase as a convention, select everything from people, then left

124
00:08:37,780 --> 00:08:44,080
outer, join to people as blah blah blah.

125
00:08:44,110 --> 00:08:44,390
Right.

126
00:08:44,410 --> 00:08:48,160
So we we do all of that and so we could execute all of that.

127
00:08:48,160 --> 00:08:53,410
Write all the code here and have the result of that be the children of that parent.

128
00:08:53,560 --> 00:09:00,280
We use a bind parameter to specify that we want all of the records who have a parent ID that matches

129
00:09:00,280 --> 00:09:03,730
the ID of whatever that parent was that we passed into the method.

130
00:09:03,740 --> 00:09:05,980
So here's the parent here this parent will have an ID.

131
00:09:06,370 --> 00:09:10,960
We get that ID and bind it to the parameter for the parent ID.

132
00:09:11,590 --> 00:09:16,870
And that's how the database would just pull back only the children of that parent, right?

133
00:09:17,620 --> 00:09:23,300
Then we'd reconstitute the results sets into people and then return the people.

134
00:09:23,320 --> 00:09:23,650
OK.

135
00:09:23,950 --> 00:09:26,950
So that's a way that we could do that.

136
00:09:27,280 --> 00:09:34,840
However, as you've seen now a number of times previously, we've been trying to avoid situations where

137
00:09:34,840 --> 00:09:39,670
we're making multiple calls back to the database to get this kind of data.

138
00:09:39,880 --> 00:09:45,820
It's almost always better if we can get as much data as we need from the database in one call.

139
00:09:46,450 --> 00:09:50,410
So now I want to show you how we can actually do that because this is a special case.

140
00:09:50,620 --> 00:09:56,830
Up until now, we've been just getting a person and like one address or we got two addresses all in

141
00:09:56,830 --> 00:09:57,550
one row.

142
00:09:58,030 --> 00:10:04,090
But now we want to get potentially multiple additional rows of people all in one go.

143
00:10:04,390 --> 00:10:07,450
And that's a little bit different from what we've done before.

144
00:10:07,780 --> 00:10:08,140
OK.

145
00:10:08,170 --> 00:10:11,680
So let me delete this because that was just, for example, purposes.

146
00:10:12,040 --> 00:10:22,510
And the first thing I want to do is jump back over to the tests and go back up to our say test right

147
00:10:22,510 --> 00:10:24,610
here can save person with children.

148
00:10:25,090 --> 00:10:31,990
And I actually want this test data to be committed to the database just just for once so that we have

149
00:10:31,990 --> 00:10:37,390
some data that we can play with in the real database so that I can show you what this is actually going

150
00:10:37,390 --> 00:10:38,680
to look like for the sequel.

151
00:10:38,980 --> 00:10:40,720
So I'm going to add that signature there.

152
00:10:41,110 --> 00:10:41,470
OK.

153
00:10:41,950 --> 00:10:48,490
And so I'm going to go ahead and run just this one test so that we can actually commit one parent with

154
00:10:48,490 --> 00:10:49,930
three children.

155
00:10:50,650 --> 00:10:52,750
So I'm going to run that, OK?

156
00:10:52,780 --> 00:10:53,350
We're done.

157
00:10:53,950 --> 00:10:54,250
All right.

158
00:10:54,280 --> 00:10:56,710
Now I'm going to head over to the Squirrel sequel client.

159
00:10:57,070 --> 00:10:57,390
All right.

160
00:10:57,400 --> 00:11:00,490
And let's connect to the people database.

161
00:11:00,490 --> 00:11:01,210
Connect.

162
00:11:01,840 --> 00:11:02,500
All right.

163
00:11:02,890 --> 00:11:05,500
So first off, let's just find all of those children.

164
00:11:05,800 --> 00:11:14,650
And I think a way that we can do this is to select everything from people where parent underscore ID

165
00:11:15,070 --> 00:11:18,550
is not null, and I haven't shown that one before.

166
00:11:18,550 --> 00:11:20,560
But that's how you can say not null.

167
00:11:20,740 --> 00:11:24,100
You can't do like an exclamation equals like we do in Java.

168
00:11:24,280 --> 00:11:26,410
In SQL, it's is not null.

169
00:11:26,620 --> 00:11:28,270
All right, so let's run that and see what we get.

170
00:11:29,300 --> 00:11:29,660
All right.

171
00:11:29,720 --> 00:11:32,600
Now notice that took a little while to run.

172
00:11:32,990 --> 00:11:34,330
All right, so very good.

173
00:11:34,340 --> 00:11:38,540
There are our three children of John Smith, right?

174
00:11:38,570 --> 00:11:42,960
And if we come over here, we see John Smith's parents ID is right there.

175
00:11:42,980 --> 00:11:46,970
Two seven six nine two two nine zero So they all share the same parent.

176
00:11:47,330 --> 00:11:54,020
So the question is, is there any way that we could write a query that would retrieve John Smith, the

177
00:11:54,020 --> 00:11:58,380
parent and all of the children together, right?

178
00:11:58,490 --> 00:11:59,970
All in one query.

179
00:11:59,990 --> 00:12:03,230
And even if we could do that, what would that even look like?

180
00:12:03,380 --> 00:12:06,550
Would it be some kind of hierarchical thing or whatever?

181
00:12:06,560 --> 00:12:06,810
Right?

182
00:12:06,830 --> 00:12:07,760
That's the question.

183
00:12:08,360 --> 00:12:10,880
So obviously the answer is yes, we can do that.

184
00:12:11,120 --> 00:12:15,630
And you can probably already guess that it's going to involve using joins.

185
00:12:15,650 --> 00:12:15,980
Right?

186
00:12:16,520 --> 00:12:19,220
So without further ado, let me just show you how to do this.

187
00:12:19,670 --> 00:12:21,440
So what we can do is.

188
00:12:22,440 --> 00:12:25,290
We can first set ourselves up to select the parent.

189
00:12:25,740 --> 00:12:32,610
So I'm going to do a select here, and I'm going to pretend like I already have a table alias for the

190
00:12:32,610 --> 00:12:34,350
parent part of this query.

191
00:12:34,500 --> 00:12:39,160
So I'm going to do something like select parent ID.

192
00:12:39,360 --> 00:12:42,450
Now, I don't know if I'm going to retrieve every single field here.

193
00:12:42,480 --> 00:12:45,150
I don't know if I feel like doing that much typing, but let's see here.

194
00:12:45,390 --> 00:12:47,820
So select parents on ID, a parent ID card.

195
00:12:47,880 --> 00:12:56,730
A parent got first name, parent, last name, parent, DOB, parent, salary, parent, female, and

196
00:12:56,730 --> 00:12:59,220
I think that's enough for the parent fields.

197
00:12:59,640 --> 00:13:07,440
Now I'm going to want to use some column aliases here, though, so I'm going to say as an undergrad.

198
00:13:08,660 --> 00:13:16,190
As Karen underscored her first name as parents underscore her last name, as parents, as parents before

199
00:13:16,190 --> 00:13:16,580
salary.

200
00:13:17,530 --> 00:13:19,690
As underscore, any and all right.

201
00:13:19,720 --> 00:13:26,560
Oh, and maybe I'm going to put all of that on its own line like, so all right, so now we'll do a

202
00:13:26,920 --> 00:13:30,580
from people as parent.

203
00:13:30,590 --> 00:13:37,450
So I want to name the alias of this table as parent, right, where parent got ID equals, and then

204
00:13:37,450 --> 00:13:41,050
I will come down here and copy this parent ID.

205
00:13:42,790 --> 00:13:44,380
And paste that right there.

206
00:13:44,650 --> 00:13:45,910
Now, obviously, we're not done.

207
00:13:45,940 --> 00:13:47,200
I'm just getting started.

208
00:13:47,710 --> 00:13:51,280
OK, so now we need to join something, right?

209
00:13:52,090 --> 00:13:59,050
So we'll do our standard, join left outer, join people.

210
00:13:59,260 --> 00:14:11,530
As now here I'm going to call this child on parent dot I.D. equal to child dot parent underscore ID.

211
00:14:11,980 --> 00:14:13,450
Now, I hope that makes sense, right?

212
00:14:13,840 --> 00:14:23,200
We want to join these things wherever the parent dot IED field is equal to the child that parent ID,

213
00:14:23,440 --> 00:14:23,830
right?

214
00:14:24,280 --> 00:14:25,390
This guy right here.

215
00:14:25,780 --> 00:14:28,900
That's how we're that's where we're establishing the relationship.

216
00:14:28,930 --> 00:14:29,410
OK.

217
00:14:29,860 --> 00:14:30,190
All right.

218
00:14:30,610 --> 00:14:37,780
However, we will also now need to specify the additional columns that we want to retrieve.

219
00:14:38,350 --> 00:14:42,460
So I'm going to put a comma here and then drop down a row.

220
00:14:42,700 --> 00:14:50,050
And now I can say child I.D. As as as for I.D., I'm a child, my first name as child or first name

221
00:14:50,110 --> 00:14:52,330
on a child, not last name as child.

222
00:14:52,420 --> 00:14:54,480
Four Last name, color, child.

223
00:14:54,820 --> 00:15:03,160
They learn as a child that salary as a child under four salary on a child that you know, as one or

224
00:15:03,160 --> 00:15:03,580
email.

225
00:15:03,580 --> 00:15:08,740
And I'm really afraid that I may have missed something here, but I guess I'll find out when I try to

226
00:15:08,740 --> 00:15:12,110
run this overseas self-sustainable lesson until listening to the total retail.

227
00:15:12,120 --> 00:15:12,170
Totally.

228
00:15:12,570 --> 00:15:13,440
You know they'll be OK.

229
00:15:13,510 --> 00:15:14,260
Maybe I got it.

230
00:15:14,260 --> 00:15:14,800
All right.

231
00:15:15,760 --> 00:15:18,610
OK, so let's run this and see what we end up with.

232
00:15:19,390 --> 00:15:24,950
OK, now first thing to note is we just got back three rows.

233
00:15:24,970 --> 00:15:29,410
I don't know if that's what you were expecting or not, but we got back three rows, so that's notable,

234
00:15:29,410 --> 00:15:30,010
I think.

235
00:15:30,520 --> 00:15:31,960
Oh, and you know what?

236
00:15:31,960 --> 00:15:36,130
I totally forgot one thing I forgot to give us.

237
00:15:36,130 --> 00:15:39,600
The options that we can see are aliases easily right here.

238
00:15:39,610 --> 00:15:40,180
So you know what?

239
00:15:40,480 --> 00:15:41,860
Hold on just a second here.

240
00:15:42,160 --> 00:15:46,150
Let me just copy all of that that we just did.

241
00:15:46,180 --> 00:15:47,650
I'm just going to copy it.

242
00:15:49,560 --> 00:15:52,710
And then I'm going to actually close our connection for a minute.

243
00:15:54,440 --> 00:16:00,140
And then I'm going to jump over here into the alias, right click on the Alias, go to modify, and

244
00:16:00,140 --> 00:16:06,440
let's turn on that little alias option so that we can see the alias names for the column names when

245
00:16:06,440 --> 00:16:07,640
we execute these queries.

246
00:16:07,850 --> 00:16:13,160
So alias column name equals true.

247
00:16:13,460 --> 00:16:13,880
OK.

248
00:16:14,450 --> 00:16:16,820
And we will connect.

249
00:16:17,480 --> 00:16:17,820
All right.

250
00:16:17,840 --> 00:16:23,090
And then I will just paste that query right back in here, and let's run this again.

251
00:16:24,260 --> 00:16:25,070
There we go.

252
00:16:25,160 --> 00:16:31,580
OK, so now let's see what we've got, so we've got a parent I.D. There's the parent I.D. parent, first

253
00:16:31,580 --> 00:16:34,550
name John Smith, same date.

254
00:16:34,560 --> 00:16:39,230
So these columns here for these three rows are all identical, right?

255
00:16:39,230 --> 00:16:42,630
They're all referring to the parent, John Smith.

256
00:16:42,690 --> 00:16:43,040
OK.

257
00:16:43,160 --> 00:16:45,360
They're just duplicated three times.

258
00:16:45,410 --> 00:16:45,860
All right.

259
00:16:45,860 --> 00:16:50,510
So if we keep going, but now look over here, we've got the child columns here.

260
00:16:50,720 --> 00:16:52,820
So Jenny, Sarah and John.

261
00:16:52,980 --> 00:16:53,240
Right.

262
00:16:53,240 --> 00:16:54,830
So these are all different.

263
00:16:55,100 --> 00:16:59,150
So what we're really looking at here is the children.

264
00:16:59,420 --> 00:17:04,100
We're looking at the relationships between the children and the parent from the children's perspective.

265
00:17:04,160 --> 00:17:09,860
And this is an important concept to make note of, which is when you have a parent child relationship

266
00:17:09,860 --> 00:17:17,690
or a one to many relationship modeled in the database and you join the parents and the children together,

267
00:17:17,690 --> 00:17:22,940
as we've done here, the result that you will get back is really just the children, right?

268
00:17:23,120 --> 00:17:29,240
Whatever the more numerous thing is, which in this case would be the children in a one to many relationship,

269
00:17:29,480 --> 00:17:34,730
you're going to get back the data from the perspective of the children and then the parents or the one

270
00:17:34,730 --> 00:17:40,400
of the one to many relationships will simply be duplicated for all of their children.

271
00:17:40,490 --> 00:17:43,610
OK, so that's an important thing to make note of.

272
00:17:44,240 --> 00:17:51,500
This means that it is possible for us to query the database to say, Give me back John Smith with all

273
00:17:51,500 --> 00:17:52,340
of his children.

274
00:17:52,820 --> 00:17:59,450
What the database will actually do if we use this query is that the database will really just return

275
00:17:59,450 --> 00:18:01,040
back all of his children.

276
00:18:01,160 --> 00:18:03,050
With John Smith duplicated.

277
00:18:03,140 --> 00:18:08,750
However, many times he has kids, so that's about the most efficient way that we can retrieve all the

278
00:18:08,750 --> 00:18:15,170
data in this one to many relationship, at least going down one generation now if we wanted to go multiple

279
00:18:15,170 --> 00:18:16,370
generations down.

280
00:18:17,000 --> 00:18:18,640
I don't know that I would do it this way.

281
00:18:18,650 --> 00:18:24,020
We're probably going to have to go back to just fetching the various generations of children separately.

282
00:18:24,080 --> 00:18:27,250
But this is an extremely common pattern to use.

283
00:18:27,260 --> 00:18:32,630
OK, so we're implementing the ability to fetch a one to many relationship in one query.

284
00:18:32,660 --> 00:18:33,040
All right.

285
00:18:33,050 --> 00:18:40,280
So now that we see how we can do this and you see that the pattern looks pretty much the same as all

286
00:18:40,280 --> 00:18:46,040
of the other left outer join factors that we've done previously, we can make good use of this.

287
00:18:46,400 --> 00:18:53,180
Now we can additionally add in the parents address fields as well, and that'll pretty much look the

288
00:18:53,180 --> 00:18:54,830
same as what we've already been doing.

289
00:18:54,830 --> 00:18:56,780
And in fact, I guess I'll go ahead and just do it.

290
00:18:56,990 --> 00:19:02,390
I'm going to jump over to the eddy just to copy over the a little bit of the sequel so I can do a little

291
00:19:02,390 --> 00:19:03,320
less typing.

292
00:19:03,440 --> 00:19:04,970
All right, so let's see.

293
00:19:04,970 --> 00:19:07,280
We'll jump over to the people repo.

294
00:19:07,280 --> 00:19:12,450
Jump to the top here and we can grab these two lines.

295
00:19:12,620 --> 00:19:13,880
I'm just going to copy that.

296
00:19:14,090 --> 00:19:21,920
Jump back over here, put a comma right there after the child line and then paste and then fix my formatting

297
00:19:21,920 --> 00:19:22,610
a little bit.

298
00:19:23,810 --> 00:19:28,490
So those are the columns for the home address and business address.

299
00:19:28,940 --> 00:19:39,320
And now I can just come down here and add back in the left outer, join left outer join address as home

300
00:19:40,100 --> 00:19:54,410
on parent that home address equal to home that ID and then another one left outer join address as this

301
00:19:54,410 --> 00:20:01,760
on parent dot this address equal to discard ID.

302
00:20:02,030 --> 00:20:04,730
All right, so let's run that again and see what we get.

303
00:20:05,120 --> 00:20:05,440
OK.

304
00:20:05,480 --> 00:20:06,650
Didn't like something here?

305
00:20:06,650 --> 00:20:09,140
What did I miss this table address?

306
00:20:09,140 --> 00:20:09,980
Oh, sorry.

307
00:20:10,010 --> 00:20:13,640
Addresses addresses.

308
00:20:14,180 --> 00:20:14,720
Here we go.

309
00:20:15,340 --> 00:20:16,160
Let's try that again.

310
00:20:16,260 --> 00:20:17,540
Oh, still not happy.

311
00:20:17,810 --> 00:20:23,750
Oh, and my problem here is this dangling comma right at the end that took me a little bit of time to

312
00:20:23,750 --> 00:20:24,410
actually see.

313
00:20:24,410 --> 00:20:28,970
I should have noticed that though, because I was the because I was actually getting a red error there

314
00:20:28,970 --> 00:20:29,480
on the from.

315
00:20:29,480 --> 00:20:32,430
Let me put that coming back in and you see right there the red error.

316
00:20:32,690 --> 00:20:36,980
So that's let that be a lesson to you to always pay attention to red marks and things.

317
00:20:36,980 --> 00:20:39,050
That's usually the tool trying to help you there.

318
00:20:39,290 --> 00:20:43,520
Let me get rid of that dangling comma and come here and try this again.

319
00:20:44,270 --> 00:20:45,140
There we are.

320
00:20:45,590 --> 00:20:50,030
OK, so now I'm going to have an incredibly wide result set here.

321
00:20:50,060 --> 00:20:57,800
So we've got our parent fields and then our child fields and then our home address fields, which are

322
00:20:57,800 --> 00:21:00,980
all null and our business address fields.

323
00:21:01,280 --> 00:21:03,200
So there's everything right there.

324
00:21:03,230 --> 00:21:03,560
All right.

325
00:21:03,590 --> 00:21:10,220
So this hopefully now gives you a really good picture of how we can make much more efficient queries

326
00:21:10,220 --> 00:21:11,900
to pull back all of this data.

327
00:21:12,410 --> 00:21:14,180
So I'm going to go ahead and stop here.

328
00:21:14,180 --> 00:21:19,670
And in the next lesson, we'll put this new knowledge to good use and implement the ability to retrieve

329
00:21:19,670 --> 00:21:23,570
all of the children with the addresses and everything all in one.

330
00:21:23,890 --> 00:21:24,070
He.
