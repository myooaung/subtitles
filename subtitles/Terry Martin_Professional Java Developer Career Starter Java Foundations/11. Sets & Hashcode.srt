1
00:00:00,750 --> 00:00:07,260
All right, so now that we've learned a little bit about the basics of what a set and a harsh threat

2
00:00:07,260 --> 00:00:15,360
are and how harsh that is using a harsh code to make it quick to access items within it.

3
00:00:15,750 --> 00:00:20,880
Now let's find out a little bit more about where these hash codes are actually coming from.

4
00:00:21,300 --> 00:00:29,370
So if we turn back to the A.D. here and I'm back in the main class, I'm going to jump in to the employee

5
00:00:29,370 --> 00:00:29,760
class.

6
00:00:29,760 --> 00:00:37,770
So if you want to find a line that refers to the employee class, you can hold down on command and click,

7
00:00:37,770 --> 00:00:44,730
or you can put your cursor there and do a command B to jump right to it or control B for Windows and

8
00:00:44,730 --> 00:00:45,300
Linux.

9
00:00:45,840 --> 00:00:46,110
All right.

10
00:00:46,110 --> 00:00:50,190
So now we're in the base class of employee.

11
00:00:50,880 --> 00:01:00,090
And if you'll recall, we generated a few methods on this class towards the bottom of the class.

12
00:01:00,090 --> 00:01:03,330
So I'm going to scroll down pretty much to the bottom here.

13
00:01:03,750 --> 00:01:10,290
And one of the methods we generated quite some time ago was the equals method.

14
00:01:10,710 --> 00:01:16,920
And if you may recall, though, when we generated this equals method, the I.D. also generated one

15
00:01:16,920 --> 00:01:20,760
other method for us at that time, which is the hash code method.

16
00:01:20,910 --> 00:01:26,670
In fact, I don't even know that it's possible to generate one without the other within the idea if

17
00:01:26,670 --> 00:01:28,050
you allowing the idea to do it.

18
00:01:28,500 --> 00:01:30,150
I think it's just one menu item here.

19
00:01:30,300 --> 00:01:36,630
And just a reminder the way that we even did that was we just went to an empty line somewhere within

20
00:01:36,630 --> 00:01:42,120
the class, then did a command in or for Windows Linux users.

21
00:01:42,120 --> 00:01:45,810
You would need to just right click and go to generate.

22
00:01:46,290 --> 00:01:47,310
OK, so we did.

23
00:01:47,310 --> 00:01:48,030
We did that.

24
00:01:48,270 --> 00:01:52,740
And then one of your options here is equals and hash code.

25
00:01:53,130 --> 00:01:59,550
So the ADC doesn't even give you the option of generating one without the other, and that is actually

26
00:01:59,550 --> 00:02:00,750
a very good thing.

27
00:02:01,530 --> 00:02:03,330
One strong piece of advice?

28
00:02:03,330 --> 00:02:09,300
Well, my first piece of advice is whenever you're creating a class, it's always a great idea in general

29
00:02:09,480 --> 00:02:15,420
to go ahead and generate an equals and hash code and even a two string method as well.

30
00:02:15,720 --> 00:02:23,880
This is this is advice that actually comes straight from one of the godfathers of all things Java programming.

31
00:02:24,060 --> 00:02:30,210
Joshua Block in his book Effective Java, which I have mentioned previously.

32
00:02:30,840 --> 00:02:37,770
And one of the other suggestions that he makes in the book is make sure that if you're if you're going

33
00:02:37,770 --> 00:02:43,050
to have an equals method, go ahead and create a hash code method.

34
00:02:43,410 --> 00:02:47,040
At the same time, make sure that they play well with each other.

35
00:02:47,190 --> 00:02:53,250
And so that's one of the reasons why we're seeing the equals and hash code as one option in the generate

36
00:02:53,250 --> 00:02:54,390
menu item here.

37
00:02:55,200 --> 00:02:56,010
All right, so.

38
00:02:56,610 --> 00:03:00,360
So, yeah, let me clear out these empty spaces here.

39
00:03:00,780 --> 00:03:04,380
So here's our generated hash code method.

40
00:03:04,800 --> 00:03:13,560
Now, honestly, it's not all that necessary to understand in low level how this hash method is working,

41
00:03:13,890 --> 00:03:18,120
but we will go ahead and just jump into it just so you can get a gist of it, OK?

42
00:03:18,480 --> 00:03:26,910
First off, though, one thing to note is when we used the ideas generate hash code and equals method

43
00:03:27,330 --> 00:03:36,690
option, it asked us to specify what what properties of the class we wanted to include in the equals

44
00:03:36,690 --> 00:03:37,980
and hash code method.

45
00:03:38,010 --> 00:03:38,370
OK.

46
00:03:38,670 --> 00:03:46,650
And so what that's basically saying is what underlying properties of this class do you want me to use

47
00:03:46,740 --> 00:03:49,950
to generate a hash code in this case?

48
00:03:50,550 --> 00:03:58,860
That's really important to note because what we're trying to do with this hash code is to effectively

49
00:03:58,860 --> 00:04:07,290
create a number in this case, an integer that will hopefully be very, very unique for any combination

50
00:04:07,290 --> 00:04:11,130
of properties on an instance of this class.

51
00:04:11,280 --> 00:04:12,870
Let me say that in another way.

52
00:04:13,980 --> 00:04:22,110
In this particular case, we're modeling an employee and the employee class has a number of properties

53
00:04:22,110 --> 00:04:22,500
on it.

54
00:04:22,500 --> 00:04:26,520
But chief among them are the last name, first name and date of birth.

55
00:04:26,550 --> 00:04:34,170
Right now, we could have other other properties that are meaningful to what an employee model is.

56
00:04:34,470 --> 00:04:40,560
But in this case, these are the ones that that are most important to us for our purposes.

57
00:04:41,670 --> 00:04:49,410
So in the real world, what would it take to hopefully ensure that any given employee is truly unique

58
00:04:49,410 --> 00:04:53,340
and differentiated from other employees of a company?

59
00:04:54,180 --> 00:04:59,790
Well, generally speaking, you're not likely to have a high level of collisions.

60
00:05:01,190 --> 00:05:07,700
If you take into account an employee's last name, first name and their date of birth, right, there

61
00:05:07,700 --> 00:05:10,910
shouldn't be a lot of collisions, might not be any at all.

62
00:05:11,660 --> 00:05:20,930
And so these become great properties on this particular class to use for for generating a hash code.

63
00:05:21,350 --> 00:05:29,180
So ideally, what we want our hash code method to do is that for the combination of properties that

64
00:05:29,180 --> 00:05:39,350
we care about, that we think that we think will ensure a level of uniqueness for various instances

65
00:05:39,350 --> 00:05:46,370
of our class that the hash code method would return a unique number.

66
00:05:46,580 --> 00:05:47,030
OK.

67
00:05:47,240 --> 00:05:54,050
So if we had Jerry Jackson born on January 1st, 2000?

68
00:05:55,040 --> 00:06:03,330
That should return a number different from Jerry Jackson, born January 2nd, 2000, right?

69
00:06:03,350 --> 00:06:10,910
Just that one little change should result in a significant enough difference in the hash code coming

70
00:06:10,910 --> 00:06:11,210
out.

71
00:06:11,690 --> 00:06:17,630
And you would hope that there would be very little possibility for collisions.

72
00:06:17,810 --> 00:06:27,440
That is to say very little possibility that two different employee instances with different last name,

73
00:06:27,440 --> 00:06:33,470
first name and date of birth would result in the same hash code or integer being generated.

74
00:06:33,680 --> 00:06:39,650
You would hope that your hash code implementation would be strong enough or good enough that that should

75
00:06:39,650 --> 00:06:42,230
be highly unlikely to occur.

76
00:06:44,420 --> 00:06:52,070
Conversely, though, if you did have two instances of an employee that do happen to have the same last

77
00:06:52,070 --> 00:07:00,230
name, first name and date of birth, then definitely the hash code for those two instances should match

78
00:07:00,230 --> 00:07:02,330
it very well, should match.

79
00:07:02,360 --> 00:07:04,400
Otherwise, we've got we've got problems.

80
00:07:05,810 --> 00:07:13,050
So going back to our spreadsheet example here, here are some example hash codes.

81
00:07:13,070 --> 00:07:19,340
Now I happen to be showing these hash codes as hexadecimal numbers just to keep them a little compressed

82
00:07:20,270 --> 00:07:21,170
to fit here.

83
00:07:21,530 --> 00:07:29,270
But the important thing to note is that they should each be unique as long as the last name, first

84
00:07:29,270 --> 00:07:31,670
name and date of birth are unique.

85
00:07:32,030 --> 00:07:32,480
OK.

86
00:07:33,200 --> 00:07:40,130
And then as you learned in the previous lesson, that hash code can then be converted into an integer.

87
00:07:40,310 --> 00:07:49,100
And again, the process or algorithm that is converting these hash codes to indexes in and of itself

88
00:07:49,100 --> 00:07:50,360
isn't that important.

89
00:07:51,080 --> 00:07:57,650
The important thing, though, is to know that there is some process or technique that is trying to

90
00:07:57,890 --> 00:08:07,460
convert these guys into indexes, and hopefully that process also results in a unique number, though

91
00:08:07,460 --> 00:08:09,740
that can be a little challenging to do.

92
00:08:10,880 --> 00:08:18,530
OK, so turning back to the ADC now, let's jump in to how this hash code method is actually being implemented

93
00:08:18,530 --> 00:08:21,260
by the AIDS auto generated code.

94
00:08:21,590 --> 00:08:30,320
So you'll notice that we're using the this utility class called objects that comes with Java and the

95
00:08:30,320 --> 00:08:33,140
fact that it has a method on it called hash.

96
00:08:33,380 --> 00:08:43,910
And this method takes as input a VAR, ARG or variable number of arguments, which are references to

97
00:08:43,910 --> 00:08:51,140
the to whatever properties of the class we want to use for defining uniqueness essentially, right?

98
00:08:51,170 --> 00:08:53,780
So in this case, last name, first name and date of birth.

99
00:08:54,170 --> 00:09:02,960
So if we jump into this hash method, we will see that it in turn, is just using another utility method,

100
00:09:02,960 --> 00:09:08,540
which is erase that hash code, which takes again a VAR args.

101
00:09:08,540 --> 00:09:17,660
And just as a reminder, VAR args is really just a special form of an array, essentially.

102
00:09:17,690 --> 00:09:18,150
OK.

103
00:09:19,880 --> 00:09:29,450
So here we are defining a VAR ARG named values of type object, and the way we do that is by just mentioning

104
00:09:29,450 --> 00:09:31,430
the word object.

105
00:09:31,670 --> 00:09:39,020
This is pretty much equivalent to just defining an array called values of type object.

106
00:09:39,440 --> 00:09:40,610
Almost the same thing.

107
00:09:42,110 --> 00:09:47,960
Just a little more convenient to call a method with this approach, rather than forcing callers of the

108
00:09:47,960 --> 00:09:50,330
method to pass in an actual array.

109
00:09:51,350 --> 00:09:51,750
All right.

110
00:09:52,970 --> 00:09:57,260
So if we jump into the hash code method, we'll see what this guy's doing.

111
00:09:58,370 --> 00:10:01,700
And here what we basically have is some boilerplate code.

112
00:10:01,700 --> 00:10:10,640
And if I'm not mistaken, this code is, I think, almost verbatim taken from Joshua Block's book Effective

113
00:10:10,640 --> 00:10:11,150
Java.

114
00:10:11,180 --> 00:10:11,630
OK.

115
00:10:11,840 --> 00:10:20,150
So if you want to know more of the thinking behind this code here and how it is trying its best to generate

116
00:10:20,450 --> 00:10:29,060
a unique hash code integer, you can pick up that book and just read the section on hash code and equals

117
00:10:29,300 --> 00:10:29,900
handling.

118
00:10:30,530 --> 00:10:35,930
But the basic thing that it's doing after doing some really quick checks to make sure, hey, is it

119
00:10:35,930 --> 00:10:43,640
null or whatever is, it's just iterating over the elements in our VAR ARG, which is really just an

120
00:10:43,640 --> 00:10:43,880
array.

121
00:10:43,880 --> 00:10:48,380
And in fact, here you can even see that it is modeled as an array right here.

122
00:10:49,610 --> 00:10:58,790
So it's it's iterating over the elements of that array, and for each one, if the element isn't null,

123
00:10:59,120 --> 00:11:02,720
then it calls that elements own hash code method.

124
00:11:03,680 --> 00:11:10,550
And then adds that to a running total, which is stored in this result and then multiply that times

125
00:11:10,550 --> 00:11:15,020
thirty one and it just keeps doing that for each element.

126
00:11:15,020 --> 00:11:15,800
So it would.

127
00:11:16,160 --> 00:11:19,700
So in our case, we're passing in the last name, first name and date of birth.

128
00:11:19,970 --> 00:11:24,380
So this for loop would first hit the last name.

129
00:11:24,380 --> 00:11:28,640
Presumably, it would call the hash code method on the first name.

130
00:11:28,880 --> 00:11:30,440
First name is of type string.

131
00:11:30,440 --> 00:11:35,360
So what's really going to happen is that the hash code and method of the string class is going to get

132
00:11:35,360 --> 00:11:35,960
called.

133
00:11:36,890 --> 00:11:42,080
That will take into account all of the letters in whatever that last name is.

134
00:11:42,500 --> 00:11:46,430
And then those will get added to the result.

135
00:11:46,440 --> 00:11:52,070
So if it's the first time we're doing this, then that will be added to one because this is being initialized.

136
00:11:52,070 --> 00:11:52,820
That one?

137
00:11:53,210 --> 00:11:53,620
OK?

138
00:11:53,900 --> 00:11:59,870
And then whatever that resulting number is, that would be multiplied times 31 stored in back into the

139
00:11:59,870 --> 00:12:01,760
result variable again.

140
00:12:01,940 --> 00:12:05,930
Then we would go to the first name, get the hash code for the first name.

141
00:12:06,110 --> 00:12:08,900
Add that to our running total of the result.

142
00:12:08,900 --> 00:12:11,130
Multiply it by thirty one and just keep going.

143
00:12:11,270 --> 00:12:15,680
And the last thing that would have to be done here would take the date of birth, which would also have

144
00:12:15,680 --> 00:12:19,910
a hash code and just do the same thing again and then return.

145
00:12:19,910 --> 00:12:26,360
That result, which will be presumably a fairly large number because we just kept multiplying some number

146
00:12:26,360 --> 00:12:26,780
of times.

147
00:12:26,780 --> 00:12:27,980
Thirty one, right?

148
00:12:28,460 --> 00:12:32,630
And so that is the implementation that they are giving us for the hash code.

149
00:12:32,780 --> 00:12:39,260
Now there could be other implementations of the hash code method that one might want to use for some

150
00:12:39,260 --> 00:12:39,830
reason.

151
00:12:41,060 --> 00:12:48,650
But I would say, well, I will say this in my entire career, I've never felt the need to implement

152
00:12:48,650 --> 00:12:50,750
my own hash code method from scratch.

153
00:12:51,080 --> 00:12:59,780
I've always just depended either on the idea to generate one for me, or I got a well respected implementation

154
00:12:59,780 --> 00:13:05,300
of a hash code method from something like a book like Joshua Block's effect of Java.

155
00:13:05,480 --> 00:13:11,330
So in other words, there are some fairly smart people who have already figured out fairly effective

156
00:13:11,330 --> 00:13:20,210
ways of generating a hash code where they can try to ensure to the best of their abilities that that

157
00:13:20,210 --> 00:13:26,330
hash code will be unique for the given set of inputs, and therefore you will minimize the number of

158
00:13:26,330 --> 00:13:27,950
collisions that might occur.

159
00:13:28,400 --> 00:13:28,730
All right.

160
00:13:28,760 --> 00:13:32,300
So jumping back now to the employee class?

161
00:13:32,930 --> 00:13:40,400
Let us consider what might happen if we were to comment out the hash code method.

162
00:13:42,720 --> 00:13:43,080
All right.

163
00:13:43,320 --> 00:13:49,260
So before we analyze that, let's just run the the program again and see what happens here, so I'm

164
00:13:49,260 --> 00:13:53,880
going to jump back over to the main class and just going to run it.

165
00:13:56,610 --> 00:13:57,150
OK.

166
00:13:57,510 --> 00:14:02,220
And so what we find is we're back up to a count of 22.

167
00:14:02,610 --> 00:14:12,510
So even though we're using the hash set to store our employees, it's behaving as the code behaved when

168
00:14:12,510 --> 00:14:21,510
we were just using a list reminding you that please be reminded that we did duplicate the first programmer.

169
00:14:21,660 --> 00:14:23,550
Five additional times.

170
00:14:23,910 --> 00:14:24,240
Right.

171
00:14:25,500 --> 00:14:32,070
And so this is now behaving as though we weren't using a hash set at all, even though we are now.

172
00:14:32,070 --> 00:14:33,510
Let's consider what's happening here.

173
00:14:33,540 --> 00:14:42,390
Some of you might assume that because we got rid of the hash code method on the employee class, that

174
00:14:42,750 --> 00:14:49,350
there may not be any hash code being generated for any of our employees.

175
00:14:49,350 --> 00:14:51,270
But that is actually not the case.

176
00:14:51,540 --> 00:14:54,900
We are still generating a hash code for our employees.

177
00:14:55,050 --> 00:15:01,050
However, we're now using the default implementation of the hash code method.

178
00:15:02,010 --> 00:15:08,670
And so as I've mentioned a number of times throughout this course, all classes derive ultimately from

179
00:15:08,670 --> 00:15:10,630
the object class.

180
00:15:11,040 --> 00:15:19,500
And the object class gives us default implementations of two string equals and hash code, to name a

181
00:15:19,500 --> 00:15:19,920
few.

182
00:15:20,490 --> 00:15:28,980
Now, the default implementation of the hash code method actually generates its hash code in modern

183
00:15:28,980 --> 00:15:34,980
versions of Java in a particular way that is pretty much beyond the scope of this course.

184
00:15:35,340 --> 00:15:40,950
The main point that I will make, though, with the current implementation of hash code, is that it

185
00:15:40,950 --> 00:15:51,660
attempts to ensure as much as it can that the hash code method should ideally return a unique value

186
00:15:51,870 --> 00:15:53,280
for each object.

187
00:15:53,490 --> 00:16:01,080
Now, in the earliest versions of Java, the default hash code method did something very similar as

188
00:16:01,080 --> 00:16:03,120
the default to string method.

189
00:16:03,270 --> 00:16:10,230
If you recall, we have learned that the default implementation of two string even now is to essentially

190
00:16:10,230 --> 00:16:14,790
just show a memory location for the object in question.

191
00:16:15,540 --> 00:16:21,150
The default hash code implementation in earlier versions of Java did something very similar to that

192
00:16:21,150 --> 00:16:26,820
by utilizing the uniqueness or the supposed uniqueness of memory locations.

193
00:16:27,840 --> 00:16:34,770
Now, there were some issues with that implementation because the hash code method is supposed to return

194
00:16:34,770 --> 00:16:39,240
the same hash code for a given object with a given set of properties.

195
00:16:39,450 --> 00:16:47,580
And in fact, what can happen in Java is that if an object gets garbage collected or reallocated or

196
00:16:47,580 --> 00:16:52,470
shuffled around, its memory address could actually change.

197
00:16:52,740 --> 00:16:56,690
And technically, the hash code method isn't supposed to change, right?

198
00:16:57,090 --> 00:17:03,780
I suspect that's one of the reasons why that particular method of implementing implementing the hash

199
00:17:03,780 --> 00:17:05,520
code method actually changed.

200
00:17:06,450 --> 00:17:12,450
And I think inversion maybe seven or eight or so, they changed the implementation.

201
00:17:13,140 --> 00:17:18,330
It is my understanding that they changed it to use something more like a random, randomly generated

202
00:17:18,330 --> 00:17:20,310
number or something along those lines.

203
00:17:22,020 --> 00:17:27,030
And these days, they're doing something even more complex, from my perspective, dealing with threads

204
00:17:27,030 --> 00:17:27,600
and things.

205
00:17:28,500 --> 00:17:36,900
So the bottom line, though, is that the default implementation is still trying to give a unique value

206
00:17:36,900 --> 00:17:39,120
back from the hash code method.

207
00:17:39,390 --> 00:17:47,460
And perhaps a simplistic way of thinking about this is to simply assume that the default hash code method

208
00:17:47,640 --> 00:17:51,150
is essentially generating a random number.

209
00:17:51,270 --> 00:17:51,750
OK.

210
00:17:53,930 --> 00:18:00,170
So if we were to assume that that's what it's doing, that it's simply generating a random number,

211
00:18:00,410 --> 00:18:06,470
then I think that can help us to understand why we're getting a 22 back.

212
00:18:06,620 --> 00:18:12,290
So if you know that the default hash code method isn't looking at any properties, because why would

213
00:18:12,290 --> 00:18:12,430
it?

214
00:18:12,440 --> 00:18:16,310
It wouldn't know what properties are meaningful and which ones should be ignored.

215
00:18:16,670 --> 00:18:26,300
So if we just consider what would happen if the default hash code method instead simply returned a randomly

216
00:18:26,300 --> 00:18:32,450
generated number of sufficient length to minimize the number of collisions that could occur?

217
00:18:33,290 --> 00:18:39,560
Well, then it's going to generate a unique number for each and every one of these records, even the

218
00:18:39,560 --> 00:18:40,260
duplicates.

219
00:18:40,280 --> 00:18:40,640
Right.

220
00:18:40,970 --> 00:18:48,680
And if each and every one of them are unique, then none of them will get filtered out, and therefore

221
00:18:48,680 --> 00:18:51,140
you will end up with a count of 22.

222
00:18:51,260 --> 00:18:51,710
Right.

223
00:18:52,100 --> 00:18:55,010
So that's what you get with the default implementation.

224
00:18:55,190 --> 00:19:02,570
It's arguably not all that useful, especially, you know, here where we actually want to filter out.

225
00:19:02,750 --> 00:19:10,550
And that goes all the way back to what I was saying in the previous lesson that a set and specifically

226
00:19:10,550 --> 00:19:19,340
a hash set is only as good at filtering duplicates out as your code allows it to be right.

227
00:19:19,790 --> 00:19:27,080
So when I remove a meaningful hash code implementation from our employee class, the hash set is no

228
00:19:27,080 --> 00:19:31,070
longer able to meaningfully filter out duplicates.

229
00:19:31,700 --> 00:19:35,450
So if you think about that, there's a problem here.

230
00:19:35,960 --> 00:19:46,010
If we look at our data here, what we would want our hash code method to do considering that we've duplicated

231
00:19:46,010 --> 00:19:48,710
the first line five more times.

232
00:19:48,980 --> 00:19:57,200
We would expect with a good implementation of hash code that we would get the same hash code value for

233
00:19:57,230 --> 00:20:01,760
each of these first few items in this list.

234
00:20:03,530 --> 00:20:12,260
And if we did get the same value for each of them, then the hash set would know to filter out the duplicates

235
00:20:12,260 --> 00:20:18,920
because it would see, Oh, we already have this object here, and this is where the hash code method

236
00:20:18,920 --> 00:20:22,690
and the equals method need to work well together.

237
00:20:22,700 --> 00:20:28,820
Which again, is why the A.D., by default, is just making it so that when you generate the equals,

238
00:20:28,820 --> 00:20:30,560
you're generating the hash code they need to.

239
00:20:30,650 --> 00:20:32,360
They need to play well with each other.

240
00:20:32,600 --> 00:20:39,080
They need to ideally be using the same concepts of uniqueness or, in our case, the same properties.

241
00:20:39,110 --> 00:20:47,210
In fact, here's the reason why if each of these duplicates results in having the same hash code with

242
00:20:47,210 --> 00:20:55,640
a good hash code implementation, then once one of them is stored in the hash set, then when the hash

243
00:20:55,640 --> 00:21:00,740
set encounters one of these duplicates, it will take that duplicates hash code.

244
00:21:01,190 --> 00:21:06,200
It will determine if that hash code already exists in its hash table.

245
00:21:06,290 --> 00:21:06,710
Right.

246
00:21:07,010 --> 00:21:13,940
As we discussed in the previous lesson, and when it finds that there is a match, it's not done yet.

247
00:21:14,240 --> 00:21:23,240
It will then call the equals method to compare the duplicate object to the object that's already in

248
00:21:23,240 --> 00:21:24,890
the hash table.

249
00:21:25,990 --> 00:21:34,180
And if they are equal, then it is at that point that the harsh set knows it does not need to store

250
00:21:34,180 --> 00:21:37,420
this duplicate, it can just ignore the duplicate.

251
00:21:37,750 --> 00:21:46,360
So that should help to explain why it's so important for the hash code and equals methods to be implemented

252
00:21:47,020 --> 00:21:48,430
essentially in tandem.

253
00:21:48,580 --> 00:21:52,540
And for those two methods to be using the same philosophy, right?

254
00:21:53,230 --> 00:21:59,470
If you're equals, method cares about first name, last name and date of birth, then your hash code

255
00:21:59,470 --> 00:22:00,280
method had better.

256
00:22:00,280 --> 00:22:07,330
Also, be caring about those three fields specifically so that the concept that makes these objects

257
00:22:07,330 --> 00:22:12,580
unique is consistent right across the hash code and the equals methods.

258
00:22:13,540 --> 00:22:13,910
All right.

259
00:22:13,930 --> 00:22:22,840
So in the next lesson, we're going to take a look at another implementation of the set interface because

260
00:22:22,840 --> 00:22:29,740
as I mentioned in the previous lesson, there are actually three popular implementations of the set

261
00:22:29,740 --> 00:22:36,560
interface that come with Java, and we're currently only looking at one of them, which is the fastest.

262
00:22:36,580 --> 00:22:38,140
By the way, Hash said.

263
00:22:38,320 --> 00:22:41,980
But there are two others the tree set and the linked hash set.

264
00:22:42,190 --> 00:22:44,080
So we'll be taking a look at those as well.

265
00:22:44,230 --> 00:22:45,640
I'll see you in the next one.
