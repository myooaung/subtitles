WEBVTT
1
00:00:00.790 --> 00:00:01.180
OK.

2
00:00:01.210 --> 00:00:07.360
And we're back, and now we're going to learn about the ends with method, this method simply tells

3
00:00:07.360 --> 00:00:12.160
us if a string ends with some other smaller string.

4
00:00:12.290 --> 00:00:12.580
OK?

5
00:00:12.760 --> 00:00:20.920
One place where you might want to use this for an example, could be if you allow users to enter a file

6
00:00:20.920 --> 00:00:26.950
name for some reason, and you want to make sure that any file name that they enter the text of the

7
00:00:26.950 --> 00:00:34.880
file name that they enter ends with some specific extension like that tea or something like that, or

8
00:00:34.880 --> 00:00:37.690
Dot Excel s anything of that sort.

9
00:00:37.780 --> 00:00:41.680
Now, I'm not saying that that's the only use case for this method.

10
00:00:41.680 --> 00:00:45.280
That's just one somewhat typical sounding example.

11
00:00:45.320 --> 00:00:48.610
OK, but there may be many others that you might want to do.

12
00:00:48.790 --> 00:00:55.150
Basically, anytime you want to check and maybe enforce that users are naming things or entering text

13
00:00:55.150 --> 00:00:56.140
in a particular way.

14
00:00:56.680 --> 00:00:57.070
All right.

15
00:00:57.100 --> 00:00:59.380
So let's see what that might look like.

16
00:00:59.770 --> 00:01:01.450
We will come over here.

17
00:01:01.660 --> 00:01:02.050
Oops.

18
00:01:04.000 --> 00:01:04.840
Clear that out.

19
00:01:06.200 --> 00:01:08.660
And, as always, will create a.

20
00:01:10.240 --> 00:01:10.580
Yeah.

21
00:01:10.630 --> 00:01:12.310
Well, let's do this file.

22
00:01:13.000 --> 00:01:13.660
File name.

23
00:01:15.560 --> 00:01:22.430
So let's pretend like we have a variable where we've allowed the user to enter some text for a file

24
00:01:22.430 --> 00:01:26.960
name now, in this case, we're not actually allowing them to enter any text, we're just going to set

25
00:01:26.960 --> 00:01:27.980
the text ourselves.

26
00:01:27.980 --> 00:01:32.150
We're going to hardcoded the text and pretend like it came from user input.

27
00:01:32.540 --> 00:01:37.760
So let's say we've got some my filed text t.

28
00:01:39.200 --> 00:01:49.070
OK, then we'll do a System.out.println line, and we'll call the file name that ends with method,

29
00:01:49.070 --> 00:01:52.100
and so we will ask the ends with method.

30
00:01:52.490 --> 00:01:57.380
Does this string end with text?

31
00:01:57.890 --> 00:01:58.310
OK.

32
00:01:59.290 --> 00:02:00.100
Just like that.

33
00:02:00.340 --> 00:02:01.960
And so then if we run this.

34
00:02:03.200 --> 00:02:05.480
And we get back a true.

35
00:02:05.780 --> 00:02:10.250
So again, this is a method that returns a boolean true or false.

36
00:02:10.460 --> 00:02:16.460
And then it's being conveyed, it's being shown on the screen as text, but it's not really text internally

37
00:02:16.580 --> 00:02:17.810
that's being returned.

38
00:02:17.990 --> 00:02:21.620
That's just how it's being shown to us so that we as humans can read it.

39
00:02:22.610 --> 00:02:23.030
All right.

40
00:02:23.030 --> 00:02:24.680
So that returned a true.

41
00:02:24.840 --> 00:02:31.400
So what if we said if we ask it a different question, like does that string end with D.O.C.?

42
00:02:34.580 --> 00:02:40.010
OK, and now we get a false because of course, it's not ending with D.O.C., it's ending with text.

43
00:02:40.790 --> 00:02:43.330
Let's try one other little scenario here.

44
00:02:43.340 --> 00:02:48.470
Let's add the period on there as well and see if that has any any impact.

45
00:02:49.630 --> 00:02:50.830
OK, still true.

46
00:02:51.610 --> 00:02:57.700
So, yeah, this this method is quite simple, it just it just starts from the back of the string and

47
00:02:57.700 --> 00:03:02.470
then it compares character by character up to whatever you had there.

48
00:03:02.470 --> 00:03:06.400
So it's just starting in the back of the string and then comparing up so it ignores whatever's in the

49
00:03:06.400 --> 00:03:09.400
front of the string in order to do its comparison.

50
00:03:10.360 --> 00:03:15.970
And while we're at it, let's go ahead and take a look at its sibling method, which is the starts with

51
00:03:15.970 --> 00:03:16.630
method.

52
00:03:16.660 --> 00:03:20.590
OK, so we'll do a starts with.

53
00:03:23.230 --> 00:03:30.190
And for this scenario, let's say that we have a bunch of files that we want to make sure that we want

54
00:03:30.190 --> 00:03:36.670
to make sure start with some pattern like file zero zero one.

55
00:03:38.410 --> 00:03:40.540
Dot t t.

56
00:03:41.540 --> 00:03:47.510
So in this case, we may want to just make sure that maybe there's a bunch of files in a in a folder

57
00:03:47.840 --> 00:03:54.500
that should all start with the pattern file and then a number and then that text.

58
00:03:54.920 --> 00:04:02.240
So we might want to just make sure that they all have the word file at the beginning.

59
00:04:02.420 --> 00:04:02.930
OK.

60
00:04:04.320 --> 00:04:05.910
So if we run this.

61
00:04:08.520 --> 00:04:09.810
OK, so we get a true.

62
00:04:10.020 --> 00:04:13.770
So what if we have one that doesn't start that way?

63
00:04:13.890 --> 00:04:17.400
What if it starts with a z, blah blah blah, whatever?

64
00:04:19.020 --> 00:04:20.130
Now, let's run that.

65
00:04:21.620 --> 00:04:24.410
OK, so now we get a false as we expected.

66
00:04:24.650 --> 00:04:33.020
So even though the the the string file is contained within this string, this string does not start

67
00:04:33.080 --> 00:04:38.240
with the word file and therefore the starts with method is returning false.

68
00:04:38.240 --> 00:04:40.670
So it's only checking from the very beginning.

69
00:04:40.670 --> 00:04:43.220
It has to be there at the very beginning for it to be true.

70
00:04:43.460 --> 00:04:45.830
Let's do one other quick little thing also.

71
00:04:46.130 --> 00:04:47.960
What about spaces?

72
00:04:48.320 --> 00:04:50.060
Let's see if spaces matter.

73
00:04:51.400 --> 00:04:59.470
Yes, space does matter, and so even though the first visible character is F, the start of the string

74
00:04:59.470 --> 00:05:03.010
is not f, the start of the string is empty space.

75
00:05:03.310 --> 00:05:09.250
Now, as a quick little challenge and review, can you figure out a way without adding any more lines

76
00:05:09.250 --> 00:05:16.150
of code here where you could leave that space right there, but make this still turn out to be true?

77
00:05:16.420 --> 00:05:21.880
So you're not going to add any more lines of code, but you can add something as a hint to maybe the

78
00:05:21.880 --> 00:05:26.740
end of this string here, or maybe even to the end of that string there.

79
00:05:27.280 --> 00:05:27.560
All right.

80
00:05:27.580 --> 00:05:29.200
So why don't you pause the video?

81
00:05:29.320 --> 00:05:33.160
See if you can figure that one out and then come back in a in a few moments?

82
00:05:33.880 --> 00:05:35.500
OK, so how did you do?

83
00:05:35.860 --> 00:05:39.640
So there are a couple of ways, at least, that you could do this.

84
00:05:39.850 --> 00:05:48.310
One way is that you could put a period here and you can call our trusty strip method.

85
00:05:49.480 --> 00:05:52.300
OK, so now if we run this.

86
00:05:54.610 --> 00:05:55.510
We get true.

87
00:05:56.050 --> 00:06:05.410
And that's because this string is first being stripped of any leading or trailing spaces.

88
00:06:06.010 --> 00:06:10.090
And then that result is being stored in this variable.

89
00:06:10.420 --> 00:06:16.690
And then the question is being asked as to whether or not this variable starts with the word file,

90
00:06:16.690 --> 00:06:19.390
which by this point in time, it does now.

91
00:06:19.510 --> 00:06:22.900
Another way that we could do this, which is pretty much the same thing.

92
00:06:23.350 --> 00:06:26.530
We could also do the strip right here.

93
00:06:28.080 --> 00:06:28.860
Strip.

94
00:06:30.700 --> 00:06:35.890
So here, retaining methods together, and I haven't shown much of that, or I might not have shown

95
00:06:35.890 --> 00:06:39.670
any of it, but yes, you can change these methods together in this case.

96
00:06:39.970 --> 00:06:45.580
Now the reason I can do this is because the strip method, if I if I hover my cursor over this method,

97
00:06:45.820 --> 00:06:51.280
I can see what's called the Java doc that is the documentation of how to use this method.

98
00:06:51.430 --> 00:06:55.270
And I can see here that this method strip returns a string.

99
00:06:55.420 --> 00:07:00.560
It returns the string, the resulting string after we have stripped out the space, OK?

100
00:07:00.880 --> 00:07:08.560
And so it is with this new re re resulting string that we are then calling the starts with method.

101
00:07:08.590 --> 00:07:08.980
OK.

102
00:07:09.130 --> 00:07:15.730
So we're going from this string to well, so we're going from this string to.

103
00:07:16.820 --> 00:07:22.610
A new string that doesn't have any spaces, and then it is that string that we're not seeing that string

104
00:07:22.610 --> 00:07:27.650
here explicitly, but it is implied by the fact that the strip method returns of string and then it

105
00:07:27.650 --> 00:07:28.850
is this new string.

106
00:07:29.240 --> 00:07:36.200
Who we are calling starts with on another way that we could see this to make it a little more obvious,

107
00:07:36.200 --> 00:07:38.690
perhaps, would be to extract the variable out.

108
00:07:38.900 --> 00:07:45.830
So having a file named at strip method all selected here, I can do command option or command Alt V

109
00:07:45.830 --> 00:07:46.940
for variable.

110
00:07:47.360 --> 00:07:51.650
And maybe I'll call this stripped string.

111
00:07:52.430 --> 00:07:52.880
OK.

112
00:07:53.120 --> 00:07:59.660
And so now you can see we're taking the stripped string and then we're asking, does it start with the

113
00:07:59.660 --> 00:08:00.710
word file?

114
00:08:00.740 --> 00:08:05.960
OK, but now I've introduced another line of code, which, you know, I was challenging you not to

115
00:08:05.960 --> 00:08:09.170
have to do that, but in real life, this is perfectly good.

116
00:08:09.220 --> 00:08:13.130
In fact, it might even be better because it's a little more clear what we're seeing here.

117
00:08:13.430 --> 00:08:13.790
OK.

118
00:08:14.000 --> 00:08:14.270
All right.

119
00:08:14.280 --> 00:08:21.740
So that's going to do it for this quick little lesson on ends with and starts with pretty useful methods

120
00:08:21.740 --> 00:08:23.630
from time to time and I'll see in the next one.
