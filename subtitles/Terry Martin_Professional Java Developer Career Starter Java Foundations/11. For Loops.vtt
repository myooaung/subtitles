WEBVTT
1
00:00:00.540 --> 00:00:06.990
All right, now, in the last lesson, we continued learning more about do while loops or loops in general,

2
00:00:07.320 --> 00:00:16.050
and we modified our program to limit the number of guesses that we could make when guessing our random

3
00:00:16.050 --> 00:00:16.530
number.

4
00:00:16.770 --> 00:00:23.910
I think we limited it to like four guesses, and we stopped the loop from occurring in a couple of ways.

5
00:00:24.540 --> 00:00:33.330
First, we stopped the loop by just having a nested conditional down in here where we checked how many

6
00:00:33.330 --> 00:00:34.710
wrong guesses we'd had.

7
00:00:34.710 --> 00:00:42.060
And then if we exceeded that number, we just exited out of the main method, which in turn exited out

8
00:00:42.060 --> 00:00:43.260
of the entire program.

9
00:00:43.740 --> 00:00:52.340
Then we modified it to add that check to the while clause here by adding this bit right here.

10
00:00:52.350 --> 00:00:55.050
And so we did that just to see a couple of different ways.

11
00:00:55.260 --> 00:00:59.370
Now we're going to see another way that we could potentially do this, though.

12
00:00:59.730 --> 00:01:09.600
So probably, I would say the most common or maybe the most popular type of loop is the for loop.

13
00:01:09.720 --> 00:01:17.430
And so what a for loop does is it loops over a block of code just as the while and do while loops do.

14
00:01:17.580 --> 00:01:22.830
However, by default, the for loop will only loop a certain number of times.

15
00:01:23.010 --> 00:01:28.200
So that's kind of built in to the loop itself, like you can actually explicitly tell it.

16
00:01:28.410 --> 00:01:32.130
I want you to loop two times or 20 times or whatever.

17
00:01:32.640 --> 00:01:42.090
So let's see if we could use a for loop to re-implement this program and prevent us from guessing more

18
00:01:42.090 --> 00:01:43.080
than four times.

19
00:01:43.350 --> 00:01:43.640
All right.

20
00:01:43.650 --> 00:01:51.480
So first, let me close this area here to make a little room, and let's get a good look at the main

21
00:01:51.480 --> 00:01:56.490
body of our loop, which is this area right here, right?

22
00:01:56.520 --> 00:01:59.880
All of this is the main body of our loop.

23
00:02:00.270 --> 00:02:12.060
So I think what we want to do in general is to replace our do while loop with the for loop instead.

24
00:02:12.840 --> 00:02:18.600
And there are a few ways that we could try to retrofit this program to do this.

25
00:02:18.870 --> 00:02:28.320
But what I'm kind of thinking of doing is to comment about the do part of the loop here on Line 13 and

26
00:02:28.320 --> 00:02:30.090
the whale part.

27
00:02:30.360 --> 00:02:34.590
First off, and that leaves us with just the body.

28
00:02:34.830 --> 00:02:44.010
And then I'm thinking to surround this with a for loop by doing a command option T and then choosing

29
00:02:44.010 --> 00:02:47.910
number five here for surround with four like so.

30
00:02:48.750 --> 00:02:54.330
And now the ID is waiting for us to tell it what to go inside of here.

31
00:02:54.340 --> 00:02:59.400
So if you remember the syntax for the while loop, which we sort of have right here while and then you

32
00:02:59.400 --> 00:03:01.800
get parentheses and then you give it some criteria.

33
00:03:02.040 --> 00:03:08.640
So here in the for loop, it's asking us for something kind of like the criteria, although the criteria

34
00:03:08.640 --> 00:03:09.910
here are a little bit different.

35
00:03:09.930 --> 00:03:14.670
So like I said earlier, the for loop loops a certain number of times.

36
00:03:14.910 --> 00:03:21.510
And so we need to tell the for loop basically how many times we want it to loop.

37
00:03:21.750 --> 00:03:25.860
Now the way we do this, we don't we don't just put a number in here like that.

38
00:03:25.860 --> 00:03:32.250
That would be kind of interesting, though, if we could do that instead, we need to use a local variable

39
00:03:32.250 --> 00:03:36.780
for the for loop that will hold on to the count.

40
00:03:37.560 --> 00:03:40.800
And then it will increment that count as well.

41
00:03:41.070 --> 00:03:43.080
And so here's how we can do this.

42
00:03:43.290 --> 00:03:48.450
Now we already have a variable right here, the wrong guess count, right?

43
00:03:48.900 --> 00:03:56.460
So I'm kind of thinking, maybe we can just reuse this variable here.

44
00:03:56.670 --> 00:04:05.340
OK, now the typical way that you will see the counting variable used in a for loop is to actually declare

45
00:04:05.340 --> 00:04:08.760
and initialize that variable within the loop itself.

46
00:04:09.150 --> 00:04:10.650
So let's see what that would look like.

47
00:04:10.680 --> 00:04:17.220
So what I'm going to do is I'm going to grab this variable here because this is already accomplishing

48
00:04:17.220 --> 00:04:19.080
that basic job.

49
00:04:19.380 --> 00:04:27.900
So I will grab this line here and I'm going to actually cut it with a Command X or a Control X, and

50
00:04:27.900 --> 00:04:30.990
then I'm going to paste it right there.

51
00:04:31.230 --> 00:04:31.710
All right.

52
00:04:31.740 --> 00:04:39.270
Now, the next thing we need to do in the for loop is to tell it when it should stop.

53
00:04:39.990 --> 00:04:46.440
And the way we do that is actually with a criteria, something along the lines of these criteria that

54
00:04:46.440 --> 00:04:49.830
we have down here, but it will be based on the wrong guest count.

55
00:04:49.840 --> 00:04:55.230
So basically, we're saying, OK, start off with wrong guest count equal to whatever in this case one.

56
00:04:55.530 --> 00:04:59.640
And then we're going to say basically while or as long as the.

57
00:04:59.800 --> 00:05:07.870
On gas count, while the wrong gas count is less than or equal to, and then I think we're going to

58
00:05:07.870 --> 00:05:12.520
use our max allowed tried constant there.

59
00:05:12.820 --> 00:05:14.680
So Max allowed tried.

60
00:05:15.460 --> 00:05:21.010
So while the wrong gas count is less than or equal to the max allowed tried, then the last thing we

61
00:05:21.010 --> 00:05:21.490
have to do.

62
00:05:21.490 --> 00:05:23.110
So there's kind of three parts to this.

63
00:05:23.110 --> 00:05:30.160
The last part that we have to put inside of this for loop is to just tell it to increment the wrong

64
00:05:30.160 --> 00:05:34.540
gas count by some amount and typically you would incremented by one.

65
00:05:34.870 --> 00:05:39.730
So we will simply reference the wrong gas count plus plus.

66
00:05:40.630 --> 00:05:40.970
All right.

67
00:05:40.990 --> 00:05:48.190
So what this for loop is saying is start off with the wrong gas count variable equal to one.

68
00:05:48.460 --> 00:05:57.190
Then as long as the wrong gas count is less than or equal to the max allowed tried loop through this

69
00:05:57.190 --> 00:06:01.930
body and increment this variable by one.

70
00:06:02.260 --> 00:06:04.120
That's what this four loop is saying.

71
00:06:04.120 --> 00:06:07.180
So this is the standard syntax for a for loop.

72
00:06:07.600 --> 00:06:12.970
You declare an initialized the variable in the first bit, followed by semicolon.

73
00:06:13.840 --> 00:06:21.160
Then you define your looping criteria, like the criteria that determine whether or not it should keep

74
00:06:21.160 --> 00:06:23.110
looping would go here.

75
00:06:23.800 --> 00:06:28.300
So loop as long as the wrong gas count is less than or equal to the max allowed tried.

76
00:06:28.600 --> 00:06:32.170
And then you will tell it how you want to increment.

77
00:06:32.350 --> 00:06:37.480
And the reason you have to state this here is because you could decide to increment by two or three

78
00:06:37.480 --> 00:06:38.920
or whatever it doesn't matter.

79
00:06:38.920 --> 00:06:44.800
And then the rest of the body of the loop goes inside of the four loop, just like any other loop.

80
00:06:45.130 --> 00:06:45.610
OK.

81
00:06:45.730 --> 00:06:46.210
All right.

82
00:06:46.240 --> 00:06:51.880
Now I'm going to delete some of this, some of these comments because I want to clean up the code a

83
00:06:51.880 --> 00:06:56.440
little bit and I'm going to get rid of this unused do here.

84
00:06:56.620 --> 00:07:00.700
Now I see an error already right down here.

85
00:07:01.000 --> 00:07:07.150
The ID is telling us that it cannot resolve the symbol wrong guest count, meaning it doesn't see that

86
00:07:07.150 --> 00:07:09.340
this variable is declared.

87
00:07:10.000 --> 00:07:17.440
The reason for that is because we are using the typical approach to setting up a for loop where we would

88
00:07:17.440 --> 00:07:22.320
declare the counter variable inside of the four loop itself.

89
00:07:22.330 --> 00:07:27.970
But by doing so, this variable now only has scope within the loop.

90
00:07:28.510 --> 00:07:36.040
And here we are using this variable outside of the loop, so we need to consider how do we want to do

91
00:07:36.040 --> 00:07:36.460
this?

92
00:07:37.030 --> 00:07:44.740
Now the reason we even put this here was so that we would know when we should show this message once

93
00:07:44.740 --> 00:07:46.450
the loop is done right.

94
00:07:46.750 --> 00:07:52.510
So if we want to leave this this way, then we cannot declare this variable here.

95
00:07:52.660 --> 00:07:56.620
We can set its value here, but we can't declare it here.

96
00:07:56.620 --> 00:08:03.280
And the declaration is simply the fact that we are saying, Hey, Java, give me a variable of type

97
00:08:03.280 --> 00:08:07.210
entry that is called this OK, that's the declaration.

98
00:08:07.690 --> 00:08:17.170
So we're going to need to have at least the declaration occur outside of the for loop if we want to

99
00:08:17.170 --> 00:08:22.090
keep referring to this variable here outside of the four loop, OK?

100
00:08:22.450 --> 00:08:25.480
So this gets back to the concept of scope again.

101
00:08:26.230 --> 00:08:34.120
OK, now we could just do this and then we need to remove this integer because keeping this variable

102
00:08:34.120 --> 00:08:36.550
data type here is the declaration.

103
00:08:36.550 --> 00:08:40.240
So now what's happening is we're declaring it twice and we can't do that.

104
00:08:40.450 --> 00:08:47.710
So two to only declare at one time which would be up here, we need to remove the data type here just

105
00:08:47.710 --> 00:08:48.280
like that.

106
00:08:48.460 --> 00:08:53.770
So now we're declaring the variable here and then we are setting it here.

107
00:08:53.890 --> 00:09:01.120
Now, technically what's happening, though, is this declaration here is actually equivalent to doing

108
00:09:01.120 --> 00:09:01.620
this.

109
00:09:01.630 --> 00:09:11.230
If you don't explicitly set the value of an integer when you declare it, its value will be zero anyway.

110
00:09:11.440 --> 00:09:13.960
That is the default value of an integer.

111
00:09:14.170 --> 00:09:17.330
And I think most numerical types, for that matter.

112
00:09:17.350 --> 00:09:19.000
So this is kind of implied.

113
00:09:19.570 --> 00:09:25.480
In fact, if I hover over the zero, you can even see there's a message variable wrong guess count initialize

114
00:09:25.480 --> 00:09:27.550
or zero is redundant.

115
00:09:27.820 --> 00:09:33.010
It's telling me that because it's just saying you don't need to tell us that you want to set it to zero,

116
00:09:33.010 --> 00:09:35.260
that's going to be the default anyway.

117
00:09:35.380 --> 00:09:38.980
Now, if you want to set it to something else, though, then you do have to do that.

118
00:09:39.160 --> 00:09:49.000
Now I could also set it here, and I could even get rid of this first of three clauses, if you will,

119
00:09:49.180 --> 00:09:51.610
for the for loop like so.

120
00:09:51.760 --> 00:09:52.090
Right?

121
00:09:52.300 --> 00:09:53.890
So I just emptied that out.

122
00:09:54.010 --> 00:09:55.630
So this is all equivalent.

123
00:09:55.750 --> 00:09:59.550
Now you won't see this, this syntax super.

124
00:09:59.640 --> 00:10:01.570
Are super often with the for loop.

125
00:10:01.620 --> 00:10:08.240
It's a little less common to see, but it's equivalent because I'm declaring and initializing the very

126
00:10:08.250 --> 00:10:09.780
the loop variable here.

127
00:10:10.200 --> 00:10:14.700
And then I don't have to mention it as the first clause of the for loop, right?

128
00:10:14.700 --> 00:10:16.350
It's all kind of the same thing.

129
00:10:16.740 --> 00:10:17.190
All right.

130
00:10:17.400 --> 00:10:18.560
But I can only do this.

131
00:10:18.570 --> 00:10:27.120
I can only leave that out because I decided to maintain the state of my loop variable outside of the

132
00:10:27.120 --> 00:10:28.470
four loop itself.

133
00:10:28.500 --> 00:10:28.930
OK.

134
00:10:29.010 --> 00:10:34.410
That's the only reason I'm allowed to leave it out here, and I will let you know that I pretty much

135
00:10:34.410 --> 00:10:38.160
never use this particular syntax for for for a loop.

136
00:10:38.160 --> 00:10:42.330
Not because I think there's anything wrong with it, but just, I don't know, is just out of habit

137
00:10:42.330 --> 00:10:42.930
or whatever.

138
00:10:43.230 --> 00:10:45.030
This isn't the typical way that I would do this.

139
00:10:45.450 --> 00:10:52.890
Typically, most of the times when I am using a for loop, I'm OK to actually declare and initialize

140
00:10:52.890 --> 00:10:54.570
it within the four loop itself.

141
00:10:54.750 --> 00:11:01.020
Usually, I don't need access to that variable from outside of the loop itself just so happens in this

142
00:11:01.020 --> 00:11:03.750
particular case, I do for now out of laziness.

143
00:11:03.760 --> 00:11:05.580
I'm going to leave this as it is.

144
00:11:05.970 --> 00:11:07.180
Let's see.

145
00:11:07.200 --> 00:11:08.130
OK.

146
00:11:08.550 --> 00:11:12.120
So let's go ahead and just try this out and see what happens.

147
00:11:12.120 --> 00:11:16.860
I could go through some static analysis and try to think through it, but I don't know that there's

148
00:11:16.860 --> 00:11:17.640
much point to that.

149
00:11:17.670 --> 00:11:21.900
Let's have some fun and just run this and see if it breaks, see if it behaves correctly.

150
00:11:22.410 --> 00:11:23.880
All right, so let's build.

151
00:11:25.020 --> 00:11:25.500
All right.

152
00:11:25.920 --> 00:11:29.040
And then we'll open back up the terminal.

153
00:11:29.050 --> 00:11:31.320
Let's clear and then let's run it.

154
00:11:33.250 --> 00:11:38.560
All right, so let's see, random number is eight, and just a quick reminder, we're only showing this

155
00:11:38.560 --> 00:11:44.200
random number, the actual number that is randomly being picked for debugging purposes so that we can

156
00:11:44.200 --> 00:11:48.070
control when we want to win or not and how many times we loop.

157
00:11:48.610 --> 00:11:54.750
OK, so let's first try out the case where we guess wrong every time.

158
00:11:54.760 --> 00:11:55.080
Right?

159
00:11:55.090 --> 00:11:57.940
And make sure that the loop ends.

160
00:11:58.450 --> 00:12:00.000
So let's not guess.

161
00:12:00.010 --> 00:12:00.460
Eight.

162
00:12:00.640 --> 00:12:01.870
Let's do one.

163
00:12:03.070 --> 00:12:04.150
You didn't get it.

164
00:12:04.390 --> 00:12:04.900
OK.

165
00:12:04.910 --> 00:12:05.470
Two.

166
00:12:06.750 --> 00:12:07.550
Whoo!

167
00:12:07.590 --> 00:12:09.030
OK, let's see here.

168
00:12:09.360 --> 00:12:10.180
You didn't get it.

169
00:12:10.200 --> 00:12:12.510
You've had four incorrect guesses.

170
00:12:12.510 --> 00:12:17.500
The random number is eight interesting, so we only guessed twice, but at that we guessed four times

171
00:12:17.500 --> 00:12:19.050
then I think I know why that is.

172
00:12:19.350 --> 00:12:25.170
Do you want to take a quick stab at figuring out why we only got two guests two times what the program

173
00:12:25.170 --> 00:12:25.530
thinks?

174
00:12:25.530 --> 00:12:27.480
We had four incorrect guesses.

175
00:12:27.720 --> 00:12:28.350
Take a moment.

176
00:12:28.350 --> 00:12:29.250
Pause the video.

177
00:12:29.250 --> 00:12:31.680
See if you can figure that out and then join back.

178
00:12:32.550 --> 00:12:33.000
OK?

179
00:12:33.120 --> 00:12:40.860
I'm pretty sure the reason for that is because the For Loop is now responsible for incrementing the

180
00:12:40.860 --> 00:12:49.920
wrong guest count here, but I forgot to remove this incrementing right here on Line 23, so we don't

181
00:12:49.920 --> 00:12:51.420
want both of these now.

182
00:12:51.600 --> 00:13:00.210
So I'm going to just delete that line with a command, delete or control way on Windows, Linux and

183
00:13:00.210 --> 00:13:03.930
let's rebuild and try it again and see if that is all we needed to do there.

184
00:13:03.990 --> 00:13:04.750
All right.

185
00:13:05.340 --> 00:13:08.280
And I'm going to clear and rerun.

186
00:13:09.130 --> 00:13:09.480
All right.

187
00:13:09.480 --> 00:13:11.910
Random number is nine, so let's try that again.

188
00:13:11.910 --> 00:13:14.850
We'll we'll guess all wrong numbers here.

189
00:13:15.240 --> 00:13:15.810
One.

190
00:13:16.560 --> 00:13:16.920
Nope.

191
00:13:17.040 --> 00:13:17.640
Two.

192
00:13:17.970 --> 00:13:18.330
Nope.

193
00:13:18.450 --> 00:13:19.100
Three.

194
00:13:20.070 --> 00:13:20.460
Nope.

195
00:13:20.670 --> 00:13:21.360
Four.

196
00:13:21.970 --> 00:13:24.450
OK, let's see here.

197
00:13:24.660 --> 00:13:25.450
You didn't get it.

198
00:13:25.470 --> 00:13:27.540
You've had four incorrect guesses.

199
00:13:27.540 --> 00:13:29.640
The random number is nine ending program.

200
00:13:29.640 --> 00:13:30.810
Now that looks.

201
00:13:30.960 --> 00:13:32.670
That looks right, right?

202
00:13:32.790 --> 00:13:33.690
That looked good.

203
00:13:34.170 --> 00:13:37.230
So, yeah, the four loop looks like it did its job.

204
00:13:37.440 --> 00:13:40.890
It was told to only allow us to loop four times.

205
00:13:41.280 --> 00:13:46.470
And afterwards, the thread automatically exited out of the loop.

206
00:13:46.740 --> 00:13:53.640
And then because we had a count greater than or equal to four, I think we set that to, yeah, greater

207
00:13:53.640 --> 00:13:54.840
than or equal to four.

208
00:13:54.870 --> 00:13:59.370
It printed out that little message saying, Hey, you've had all these tries and you're terrible.

209
00:13:59.940 --> 00:14:02.610
So I think that worked the way we wanted it to.

210
00:14:02.790 --> 00:14:06.960
Let's let's check that the other functionality still works as well.

211
00:14:06.960 --> 00:14:08.610
We will regression test.

212
00:14:09.120 --> 00:14:09.510
All right.

213
00:14:09.690 --> 00:14:11.670
So we'll rerun this now.

214
00:14:11.850 --> 00:14:15.100
And this time, let's get the correct number right off the bat.

215
00:14:15.120 --> 00:14:15.630
Three.

216
00:14:16.530 --> 00:14:17.900
The random number was three.

217
00:14:17.910 --> 00:14:23.010
You got it in one try and we exited out because of this return here.

218
00:14:23.970 --> 00:14:24.240
All right.

219
00:14:24.240 --> 00:14:25.110
So that worked.

220
00:14:25.110 --> 00:14:30.480
And then let's try the intermediate scenario where we get a couple of guesses wrong, but then we get

221
00:14:30.480 --> 00:14:32.940
it before we get to four wrong guesses.

222
00:14:33.390 --> 00:14:34.710
So we'll run this again.

223
00:14:34.920 --> 00:14:38.850
And let's guess wrong one time, two times.

224
00:14:38.850 --> 00:14:43.080
And now let's get it correct on the last time the random number was four.

225
00:14:43.110 --> 00:14:45.720
You got it in three tries looking good.

226
00:14:46.260 --> 00:14:46.620
All right.

227
00:14:46.800 --> 00:14:54.540
So now there's another thing that I want to show you with loops so far when we want to end the loop

228
00:14:54.540 --> 00:15:03.060
prematurely, such as when you guessed correctly like we have here right in this bit here.

229
00:15:03.180 --> 00:15:05.700
This is what happens when you guessed correctly.

230
00:15:06.150 --> 00:15:15.540
If that happens, then we are using the return keyword and that is actually telling the thread to return

231
00:15:15.540 --> 00:15:18.360
from whatever method it's presently in.

232
00:15:18.570 --> 00:15:24.390
And that method would be, in this case, the main method, which is the only method in the program.

233
00:15:24.390 --> 00:15:31.440
So to return from the main method is to actually just stop the program right, because as soon as you

234
00:15:31.440 --> 00:15:35.440
exit out of the main method, you have exited out of the entire program.

235
00:15:35.460 --> 00:15:40.830
In this particular case, now there could be other cases where you're in a program that has multiple

236
00:15:40.830 --> 00:15:45.750
methods and you're just returning out of one of many methods and you're not necessarily killing the

237
00:15:45.750 --> 00:15:46.380
whole program.

238
00:15:46.390 --> 00:15:52.920
But in this particular case, since the main method is the main entry point into the program, when

239
00:15:52.920 --> 00:15:56.490
we exit out of the main method, we have exited the entire program.

240
00:15:56.520 --> 00:15:56.880
OK.

241
00:15:57.420 --> 00:15:57.840
All right.

242
00:15:57.840 --> 00:16:04.350
So we're exiting out of there by telling the thread to return from the current method that it's in.

243
00:16:04.560 --> 00:16:11.070
However, we could instead just exit out of the loop itself.

244
00:16:11.280 --> 00:16:17.400
Now, in this particular program, since there's not much else outside of the loop other than this bit

245
00:16:17.400 --> 00:16:26.310
of code here, effectively the program will still end, but that might be a more elegant way to get

246
00:16:26.310 --> 00:16:28.380
out of this bit here.

247
00:16:28.470 --> 00:16:28.920
OK.

248
00:16:29.190 --> 00:16:37.320
So if we want to simply exit out of a loop prematurely, so in this case, it's a for loop that is designated

249
00:16:37.320 --> 00:16:40.290
to go up to four times four iterations.

250
00:16:40.440 --> 00:16:47.400
If we want to exit out of this loop earlier than that, such as here without necessarily directly just

251
00:16:47.400 --> 00:16:53.490
killing the program instead of using a return, there's another keyword we could use, and we've actually

252
00:16:53.490 --> 00:16:57.180
seen it before we could use break.

253
00:16:57.300 --> 00:17:06.090
So when you are in a loop and you use break, such as Here, Break tells the thread to break out.

254
00:17:06.210 --> 00:17:08.190
Of the loop that you're in.

255
00:17:08.430 --> 00:17:15.090
OK, now the other place where we saw a break was in, that was when we were using the Switch operator,

256
00:17:15.270 --> 00:17:15.650
right?

257
00:17:15.660 --> 00:17:22.920
And each of the cases of the Switch operator required a break to get out of it.

258
00:17:22.930 --> 00:17:29.820
Otherwise, the thread would fall through to all of the other cases and execute each of them below wherever

259
00:17:29.940 --> 00:17:31.830
the case was that you had matched on.

260
00:17:32.100 --> 00:17:40.410
And that wasn't a very desirable outcome, but the break keyword also is used to break us out of a loop.

261
00:17:41.010 --> 00:17:47.280
So let's try this out and just verify that the program still works just as well as it did before.

262
00:17:47.290 --> 00:17:52.680
So what should happen now is when we guess the correct number, the thread will come here.

263
00:17:52.920 --> 00:17:54.230
It will do all of this.

264
00:17:54.240 --> 00:17:56.430
It will show us the random number was blah blah blah.

265
00:17:56.550 --> 00:18:03.870
You got it in so many tries and then we will break out of this loop, which will put us right outside

266
00:18:03.870 --> 00:18:04.260
of the loop.

267
00:18:04.270 --> 00:18:11.040
So if I put my cursor at the curly brace of the four loop, which is right here on Line 13, then that

268
00:18:11.040 --> 00:18:16.980
highlights the ending brace or the end of the body for the for loop, which is on line 25.

269
00:18:17.340 --> 00:18:21.270
And so what'll happen is the thread will see break.

270
00:18:21.540 --> 00:18:25.530
It will break right to the outside of the for loop.

271
00:18:25.830 --> 00:18:32.400
It will then come here and in this particular case, because we will have gotten the gas correct.

272
00:18:32.430 --> 00:18:35.850
We won't have hit the wrong guest count.

273
00:18:35.870 --> 00:18:40.500
And so the thread will skip right over this block here.

274
00:18:40.830 --> 00:18:44.820
And then the next thing that will happen is that the program will still just end.

275
00:18:45.120 --> 00:18:45.570
OK.

276
00:18:45.810 --> 00:18:52.920
So in other words, we shouldn't see any difference in the behavior as a user of this program.

277
00:18:53.700 --> 00:18:54.050
All right.

278
00:18:54.060 --> 00:18:59.370
So let's build command f nine or control f nine.

279
00:18:59.880 --> 00:19:00.380
All right.

280
00:19:00.390 --> 00:19:01.980
And I'm going to clear.

281
00:19:02.990 --> 00:19:04.070
And then let's run it.

282
00:19:04.700 --> 00:19:05.190
All right.

283
00:19:05.210 --> 00:19:07.910
Random number is eight, so let's just jump straight to it.

284
00:19:07.940 --> 00:19:10.980
Eight, The random number was eight.

285
00:19:11.000 --> 00:19:14.930
You got it in one try and we have broken out of the program, by the way.

286
00:19:15.200 --> 00:19:19.670
If it's not entirely clear to you, the reason I know that we've broken out of the program is because

287
00:19:19.670 --> 00:19:23.090
now I'm seeing a prompt for my command line.

288
00:19:23.180 --> 00:19:27.560
If you're on windows, your prompt will look a little different, but that's how I know that the program

289
00:19:27.560 --> 00:19:28.130
has ended.

290
00:19:28.430 --> 00:19:36.650
I guess if we wanted to, though, we could put a little system that out and just say program ended

291
00:19:37.340 --> 00:19:38.210
something like that.

292
00:19:38.420 --> 00:19:38.710
All right.

293
00:19:38.720 --> 00:19:43.520
So looks like using the break actually works just just fine for us.

294
00:19:43.670 --> 00:19:50.630
So again, that break is now breaking us out of the loop, regardless of what the criteria say.

295
00:19:50.930 --> 00:19:55.550
That's a way to just kind of short circuit and say, Hey, I need to hurry up and get out of this loop

296
00:19:55.550 --> 00:19:56.000
right now.

297
00:19:56.030 --> 00:20:00.950
I don't want it to iterate any more times so you can just use a break to break out of it.

298
00:20:01.490 --> 00:20:07.900
And so, by the way, the break statement works with all loops, not just the for loop.

299
00:20:07.910 --> 00:20:14.000
OK, so we can use that with the for loop, with the while loop with the do, while loop any loop that

300
00:20:14.000 --> 00:20:15.230
we're learning so far.

301
00:20:15.440 --> 00:20:19.070
Break will work and you can always use that to break out of that loop.

302
00:20:19.760 --> 00:20:27.290
Now there's another special keyword that we can use in loops, which is sort of related to the break,

303
00:20:27.290 --> 00:20:28.340
but a little bit different.

304
00:20:28.490 --> 00:20:32.210
And that is continue, and I'm going to put that down here.

305
00:20:32.930 --> 00:20:33.860
Continue.

306
00:20:34.730 --> 00:20:44.360
Now what continue does, is it short circuits, any remaining code that might get executed within a

307
00:20:44.360 --> 00:20:50.780
loop and causes the thread to just go back to the top of the loop and iterate again?

308
00:20:51.200 --> 00:20:51.530
All right.

309
00:20:51.540 --> 00:20:56.990
So why would we ever want to have this continue here?

310
00:20:57.080 --> 00:21:05.300
While one typical place where you might use a continue within a loop might be inside of another conditional?

311
00:21:05.510 --> 00:21:11.570
Now I don't have a great reason to do this here, so I'm just going to talk to this and maybe show you

312
00:21:11.570 --> 00:21:14.360
some examples, but we won't use this as as real.

313
00:21:14.390 --> 00:21:21.080
OK, so let's say we had another conditional something like if some criteria and right now, I'm just

314
00:21:21.080 --> 00:21:25.670
going to hard code that to true and I'll come back in and we'll talk a little bit more about this.

315
00:21:25.670 --> 00:21:31.640
But if some criteria, then do this and continue.

316
00:21:32.240 --> 00:21:36.770
But then outside of this, if block, we might say alternatively.

317
00:21:39.430 --> 00:21:45.190
You really, really didn't get it.

318
00:21:46.600 --> 00:21:50.560
You're quite terrible at guessing.

319
00:21:51.550 --> 00:21:57.920
Now let's pretend like we had some criteria in here like, actually, you know what?

320
00:21:58.060 --> 00:22:00.160
Here we'll put something stupid in here.

321
00:22:02.020 --> 00:22:06.460
Local date dot now not.

322
00:22:07.450 --> 00:22:13.270
Get day of week, get day of week.

323
00:22:14.570 --> 00:22:17.360
Equals Monday.

324
00:22:18.620 --> 00:22:19.100
All right.

325
00:22:20.150 --> 00:22:22.430
Now this is just kind of nonsensical.

326
00:22:22.460 --> 00:22:26.720
OK, so what I'm saying here is, if you guessed wrong.

327
00:22:28.250 --> 00:22:30.830
And the day of the week is Monday.

328
00:22:31.310 --> 00:22:38.810
I'm going to go easy on you and just say you didn't get it, but if it's not Monday, you're not going

329
00:22:38.810 --> 00:22:40.940
to get this nice message here.

330
00:22:41.630 --> 00:22:47.180
You're going to get this message saying, no, you're really terrible at guessing, right?

331
00:22:47.420 --> 00:22:52.940
And I could have have that happen multiple times or have a bunch of stuff here, right?

332
00:22:53.270 --> 00:23:00.910
So what's happening here is this continue is letting me short circuit the loop.

333
00:23:00.920 --> 00:23:03.140
I don't want to stop the loop.

334
00:23:03.830 --> 00:23:11.330
I just want to print this slightly nicer negative message and then get back over to the loop again and

335
00:23:11.330 --> 00:23:14.240
then and then go to the next iteration of the Loop.

336
00:23:14.780 --> 00:23:15.240
OK.

337
00:23:15.350 --> 00:23:24.350
But if it's not Monday any day other than Monday in this, you know, just random criteria that I've

338
00:23:24.350 --> 00:23:29.210
put here, if it's not Monday, you're going to get a harsher message.

339
00:23:29.750 --> 00:23:31.610
And then the loop will continue.

340
00:23:32.300 --> 00:23:35.600
Now, of course, I could have also just done this without a continue.

341
00:23:35.600 --> 00:23:44.450
I could have removed that and put an else here like so I could have done that also.

342
00:23:44.630 --> 00:23:46.640
That's functionally equivalent.

343
00:23:46.760 --> 00:23:48.920
I'm just looking for a good reason to show you.

344
00:23:49.220 --> 00:23:54.470
You know, one way that you might have used the continue without having to think of like a really great

345
00:23:54.470 --> 00:23:55.490
scenario here.

346
00:23:55.610 --> 00:24:04.550
Hopefully, you understand, though, OK, so this this continue here is short circuiting all of this

347
00:24:05.360 --> 00:24:07.640
without killing the loop, right?

348
00:24:07.790 --> 00:24:13.550
It's ending this particular iteration of the loop, but it's not exiting us out of the loop.

349
00:24:13.550 --> 00:24:17.870
The way that break would do break actually breaks us out of the loop.

350
00:24:17.990 --> 00:24:22.100
We're never going to iterate through that loop again in this program, at least.

351
00:24:22.130 --> 00:24:22.580
OK.

352
00:24:22.730 --> 00:24:29.810
Whereas Continue is going to just jump back up to the top of the loop and then run through it again.

353
00:24:29.840 --> 00:24:30.230
All right.

354
00:24:30.260 --> 00:24:31.340
Does that make sense?

355
00:24:31.490 --> 00:24:31.880
All right.

356
00:24:31.890 --> 00:24:33.650
So let me clean this up.

357
00:24:34.880 --> 00:24:41.660
Now we will revisit the for loop more in the future, especially when we learn about collections which

358
00:24:41.660 --> 00:24:48.740
are kind of like lists of things because for loops are extremely commonly used when you need to do what's

359
00:24:48.740 --> 00:24:51.080
called iterating over things.

360
00:24:51.260 --> 00:24:54.740
Those could be objects or primitives or something like that.

361
00:24:54.860 --> 00:25:00.890
Any time you have a list of things like if you recall in one of the previous programs, when we wrote

362
00:25:00.890 --> 00:25:09.830
code that modeled a person, if you imagine that we had created 100 people and we wanted to iterate

363
00:25:09.830 --> 00:25:14.840
over each of those 100 people and print their full names on the screen.

364
00:25:14.870 --> 00:25:15.230
Right?

365
00:25:15.440 --> 00:25:22.280
So if we were holding on to those 100 people in something called a collection, we could then iterate

366
00:25:22.280 --> 00:25:27.080
over that collection and print their names so we will learn how to do that.

367
00:25:27.290 --> 00:25:33.530
And the most common way to do that in most programming languages traditionally has been using a for

368
00:25:33.530 --> 00:25:39.560
loop for loops exist in probably just about every programming language there is.

369
00:25:40.070 --> 00:25:46.460
They've been around a long, long time and in many, many languages, the syntax is pretty much exactly

370
00:25:46.460 --> 00:25:47.120
like this.

371
00:25:47.330 --> 00:25:54.740
And in fact, in at least see the languages of C C++ think Perl, though it's been a long time since

372
00:25:54.740 --> 00:25:58.010
I coded in Perl, probably c sharp swift.

373
00:25:58.490 --> 00:26:05.390
The for loop looks either exactly like this or extremely similar, so it's a very common type of loop

374
00:26:05.510 --> 00:26:07.690
for that matter, while loops are as well.

375
00:26:07.700 --> 00:26:12.710
But but the for loop is probably the most common type of loop there is.

376
00:26:13.160 --> 00:26:17.300
All right, so I'm going to wrap up this lesson and I will see you in the next one.
