WEBVTT
1
00:00:00.330 --> 00:00:06.570
Right now, jumping back over to our time test class, I want to show you just a couple more techniques

2
00:00:06.570 --> 00:00:11.460
that I think are kind of cool and to show you this, we'll just play with one of our variables that

3
00:00:11.460 --> 00:00:12.480
we've already created.

4
00:00:12.720 --> 00:00:17.820
Let's use our first local date, which we labeled as D1.

5
00:00:18.300 --> 00:00:24.900
All right, so down here, I'm going to reference D1 Dot and then we're going to use the with method.

6
00:00:25.080 --> 00:00:30.410
OK, just this first one here with and that takes something called a temporal adjuster.

7
00:00:30.780 --> 00:00:33.360
This sounds like a Doctor Who episode, doesn't it?

8
00:00:33.360 --> 00:00:39.270
A temporal adjuster, but it is something that can make adjustments to time, I suppose.

9
00:00:39.600 --> 00:00:44.520
And so basically, there are a lot of ways that we can play with this.

10
00:00:44.520 --> 00:00:50.580
But one of the key things that I want to show you first is that there are a bunch of so-called temporal

11
00:00:50.580 --> 00:00:58.440
adjusters that come already made with the Java, and they allow us to do various types of adjustments,

12
00:00:58.440 --> 00:01:06.510
with time basically warping time in ways that humans might say in English, like, you know, for example,

13
00:01:06.780 --> 00:01:08.460
the Friday after next.

14
00:01:08.490 --> 00:01:14.010
You know, if you're on a certain date now and you're talking about the Friday after next or the next

15
00:01:14.010 --> 00:01:16.560
Friday or next Thursday or things like that.

16
00:01:16.560 --> 00:01:24.690
So this date time API comes with a number of adjusters that represent concepts along those lines.

17
00:01:24.720 --> 00:01:25.710
Let me show you what I mean.

18
00:01:26.040 --> 00:01:35.040
So to access them, you will reference the temporal adjusters class and notice the SE here because there's

19
00:01:35.040 --> 00:01:37.050
also a temporal adjuster.

20
00:01:37.080 --> 00:01:37.560
OK.

21
00:01:37.590 --> 00:01:39.660
We don't want that for what I'm about to show you.

22
00:01:39.690 --> 00:01:40.940
We want it with the SE.

23
00:01:40.950 --> 00:01:48.300
OK, so temporal adjusters dot and then you'll see that there are a bunch of pretende methods that spit

24
00:01:48.300 --> 00:01:51.570
out instances of a temporal adjuster.

25
00:01:51.600 --> 00:01:52.050
OK.

26
00:01:52.410 --> 00:01:59.700
This reminds me a little bit of all of the static helper methods that exist on the collectors class.

27
00:01:59.820 --> 00:02:03.630
So looking at these, we've got a next.

28
00:02:03.840 --> 00:02:10.170
So basically, what this means is from the date that we're specifying here the D1, whatever that date

29
00:02:10.170 --> 00:02:17.610
is, create another date that starts at that same point in time D1 and then generate a new date, which

30
00:02:17.610 --> 00:02:21.500
would represent the next and then whatever day of the week in this particular case.

31
00:02:21.510 --> 00:02:28.630
So let's say you wanted to figure out the next Tuesday from that date on day one.

32
00:02:28.650 --> 00:02:33.000
OK, so you can choose next and then it takes something called a day of week.

33
00:02:33.840 --> 00:02:37.960
And this is just an enum and enumeration with the days of the week.

34
00:02:37.980 --> 00:02:38.350
OK.

35
00:02:38.370 --> 00:02:42.630
So if we wanted what is it, Tuesday, next Tuesday, we could just select that.

36
00:02:44.500 --> 00:02:52.600
And so what that's going to return is a new local date, which will represent the following Tuesday

37
00:02:52.600 --> 00:02:55.960
after whatever this date is right here D1.

38
00:02:55.990 --> 00:03:01.630
OK, so what was it we make that that was 2001, January 1st.

39
00:03:02.140 --> 00:03:04.540
So if we print this out?

40
00:03:05.880 --> 00:03:07.320
Let's see what day that is.

41
00:03:08.160 --> 00:03:10.080
So that would be the fourth.

42
00:03:10.200 --> 00:03:10.710
OK.

43
00:03:11.310 --> 00:03:11.640
All right.

44
00:03:11.640 --> 00:03:14.400
So let's look at some other things that we can do with that.

45
00:03:14.670 --> 00:03:16.200
So that's next.

46
00:03:17.770 --> 00:03:25.180
We've got a last day of month, so whatever month this D1 was in, if you wanted to find out what day

47
00:03:25.510 --> 00:03:31.090
would be the last day in that month, you could choose this and that would return a new local date.

48
00:03:31.090 --> 00:03:34.990
Rather, the the with method would return a new local date.

49
00:03:35.350 --> 00:03:40.060
First day of the year, obviously it's going to be the first, but if you wanted to know what day of

50
00:03:40.060 --> 00:03:43.480
the week it was here, we can do that first day of the year.

51
00:03:44.120 --> 00:03:44.480
Oops.

52
00:03:48.130 --> 00:03:53.610
First day of the year, now in this particular case, the first day of that year is going to be the

53
00:03:53.620 --> 00:03:58.540
one because we already set it to January 1st, so maybe let's not do that, let's do the last day of

54
00:03:58.540 --> 00:03:58.960
the year.

55
00:04:00.610 --> 00:04:01.960
Last day of the year.

56
00:04:02.470 --> 00:04:02.920
All right.

57
00:04:03.160 --> 00:04:06.310
And then we can find out we can get the day of the week.

58
00:04:09.380 --> 00:04:15.410
So the last day of the year, 2000 was apparently a Sunday.

59
00:04:16.880 --> 00:04:17.540
So you get it.

60
00:04:18.200 --> 00:04:24.080
There's so many of these adjusters that come out of the box, we won't go through all of these, but

61
00:04:24.080 --> 00:04:25.190
I'll just show a few more.

62
00:04:25.970 --> 00:04:26.770
Let's see.

63
00:04:28.040 --> 00:04:29.300
First day of the month.

64
00:04:30.230 --> 00:04:35.240
Last day of the month, you can get a previous just like you can get a next.

65
00:04:35.660 --> 00:04:42.470
So a number of really useful methods here and you can create your own as well, although I think that's

66
00:04:42.470 --> 00:04:46.640
going to be beyond the scope of what I want to get into in this course at this time.

67
00:04:47.570 --> 00:04:51.020
So let me just mention one thing about these with methods.

68
00:04:51.200 --> 00:04:55.820
So let me delete that, and I'm going to make another reference to one with.

69
00:04:56.120 --> 00:05:02.300
So we've also got these other versions of with like with day of month, month, year, day of year.

70
00:05:02.900 --> 00:05:04.100
So here's the deal.

71
00:05:04.400 --> 00:05:12.980
All of these new daytime classes local date, local time, local date, time zone, date time, et cetera,

72
00:05:12.980 --> 00:05:13.430
et cetera.

73
00:05:14.000 --> 00:05:21.020
When you create instances of these classes, those instances are all designed to be immutable.

74
00:05:21.350 --> 00:05:26.480
Immutable is a term that you'll hear from time to time in software development, and it just means that

75
00:05:26.480 --> 00:05:31.640
you can't change the properties of that object after it has been created.

76
00:05:31.790 --> 00:05:38.870
This is considered to be a very desirable trait of objects frequently in programming, especially when

77
00:05:38.870 --> 00:05:41.420
you deal with functional programming styles.

78
00:05:41.630 --> 00:05:43.400
And the reason is basically this.

79
00:05:43.670 --> 00:05:51.590
Imagine that one bit of code in an application generates some objects and passes those objects into

80
00:05:51.590 --> 00:05:53.030
another part of code.

81
00:05:53.270 --> 00:05:58.100
And let's even imagine that these two parts of code in this application were written by two different

82
00:05:58.100 --> 00:05:58.730
teams.

83
00:05:59.630 --> 00:06:08.120
Team A who is sending their objects into Team B's code may likely have an expectation that their objects

84
00:06:08.120 --> 00:06:16.610
aren't going to be modified by Team B's code, and that's an important expectation to have because even

85
00:06:16.640 --> 00:06:25.070
the team is sending their object into Team B's code team and may want to or need to continue utilizing

86
00:06:25.070 --> 00:06:28.820
that same object later on in their own code.

87
00:06:29.000 --> 00:06:37.700
And if Team B's code has modified or altered that object in unexpected ways, that could cause bugs

88
00:06:37.970 --> 00:06:40.760
in the code, especially in teams code.

89
00:06:41.090 --> 00:06:48.980
And so it's generally considered to be a much safer practice to pass immutable objects to code, especially

90
00:06:48.980 --> 00:06:56.030
code that you may not have written, especially then, so that you can ensure that there won't be any

91
00:06:56.120 --> 00:06:58.940
unintended consequences or side effects.

92
00:06:59.450 --> 00:07:08.030
So the date time API just embraces the immutable pattern throughout, but that comes with some consequences.

93
00:07:08.360 --> 00:07:14.660
That means that when we create an instance of a local data or time or any of these other classes, and

94
00:07:14.660 --> 00:07:21.140
we want to change some property of one of those objects, we can't just make a change.

95
00:07:21.290 --> 00:07:29.600
Instead, what we can do is we can basically clone an object and change things in the clone as it's

96
00:07:29.600 --> 00:07:30.380
being cloned.

97
00:07:30.620 --> 00:07:31.580
That's what we can do.

98
00:07:31.760 --> 00:07:35.360
And that's what these with methods generally allow us to do.

99
00:07:35.510 --> 00:07:42.590
They allow us to start from a starting point like the one here and then we can say, OK, given that

100
00:07:42.590 --> 00:07:49.820
we've got this object, I want to change the the month or the year or the day of year or something along

101
00:07:49.820 --> 00:07:51.020
those lines, right?

102
00:07:51.140 --> 00:07:52.910
But leave the other fields alone.

103
00:07:53.120 --> 00:07:54.980
So that's kind of like your starting point.

104
00:07:55.130 --> 00:08:00.380
So this is a way that we can change an object without actually changing that very same object.

105
00:08:00.650 --> 00:08:05.510
So currently, this one represents January 1st of the year, 2000.

106
00:08:06.200 --> 00:08:11.690
So if we wanted to change the month to march, that's easy enough to do.

107
00:08:12.690 --> 00:08:16.340
We can just do this, and actually let's just print that out.

108
00:08:19.340 --> 00:08:20.300
All right, so there you go.

109
00:08:20.330 --> 00:08:24.980
So now you got the year 2000, March 1st, right?

110
00:08:25.970 --> 00:08:28.850
And you could keep daisy chaining these if you wanted to.

111
00:08:28.860 --> 00:08:35.570
So I could call with again and change the day of the month and let's make it the 15th.

112
00:08:36.050 --> 00:08:42.680
So now what's going to actually happen here is we've got this D-1 object that represents January 1st,

113
00:08:42.680 --> 00:08:45.950
2000, and then we're calling with month of three.

114
00:08:45.950 --> 00:08:53.030
And so that's going to create another object now based on January 1st, 2000, except it won't be January

115
00:08:53.030 --> 00:08:53.390
anymore.

116
00:08:53.400 --> 00:09:02.450
Now it'll be March 1st, 2000, and then we're making yet a third object now that's based off of the

117
00:09:02.450 --> 00:09:07.220
March 1st, 2000, but now it'll be March 15, 2000.

118
00:09:07.250 --> 00:09:09.550
Okay, so that's what's happening there.

119
00:09:09.590 --> 00:09:12.710
We're not changing the original objects.

120
00:09:12.710 --> 00:09:14.360
We're actually creating new objects.

121
00:09:14.360 --> 00:09:17.330
Each time we're calling the with method, they're.

122
00:09:18.550 --> 00:09:20.260
And we'll just run that real quick.

123
00:09:21.130 --> 00:09:22.210
All right, so there you go.

124
00:09:22.220 --> 00:09:24.970
So now 20, March 15.

125
00:09:25.210 --> 00:09:31.540
So let me just briefly recap the most important things that I wanted to show and convey in this lesson,

126
00:09:31.630 --> 00:09:36.010
which by the time you watch it, I probably will have broken it up because I know it's like excessively

127
00:09:36.010 --> 00:09:36.370
long.

128
00:09:36.850 --> 00:09:43.750
So obviously, we wanted to just see some of the core techniques for how to create dates and times and

129
00:09:43.750 --> 00:09:45.030
date times, right?

130
00:09:45.040 --> 00:09:46.090
And put them together.

131
00:09:46.090 --> 00:09:47.080
So we've seen that.

132
00:09:47.410 --> 00:09:53.740
I also wanted to make sure that you understand the concept of time zones and how important they are,

133
00:09:53.740 --> 00:10:00.040
particularly when you're saving date and time information to a database or a data store or something

134
00:10:00.040 --> 00:10:00.640
like that.

135
00:10:00.820 --> 00:10:06.940
You really have to care about what those times mean in relation to location, right?

136
00:10:07.450 --> 00:10:15.070
If you want some event to occur at a particular date and time, that should be with respect to a location,

137
00:10:15.070 --> 00:10:15.460
right?

138
00:10:15.550 --> 00:10:22.090
Because what is 12:00 p.m. in New York City is not 12 p.m. at the same time in London, for example.

139
00:10:22.480 --> 00:10:26.560
So we saw how we can add time zone information to a date time.

140
00:10:27.010 --> 00:10:35.140
And we also saw how we can determine what that same time would be at that same moment in time, in another

141
00:10:35.140 --> 00:10:37.940
locale or in another time zone.

142
00:10:37.990 --> 00:10:38.230
Right.

143
00:10:38.230 --> 00:10:40.300
And that's extremely important as well.

144
00:10:40.420 --> 00:10:45.430
And we're looking at it right there on Line thirty three by using the with zone same instance and then

145
00:10:45.430 --> 00:10:50.290
we can specify what the what the other time zone would be.

146
00:10:50.860 --> 00:10:58.840
Additionally, we also saw how we can pass dates and times that are represented as strings of text to

147
00:10:58.840 --> 00:11:07.000
become actual date time objects using the date, time, format or class, and we can reverse that operation

148
00:11:07.000 --> 00:11:12.910
as well and return a text representation of a local date or a local time.

149
00:11:13.420 --> 00:11:17.860
And I should mention that that's an extremely important technique to use.

150
00:11:18.100 --> 00:11:26.770
Some of you might wonder why wouldn't we have simply retained the text form of the date or the time

151
00:11:27.010 --> 00:11:29.770
in our person class, for example?

152
00:11:30.070 --> 00:11:37.000
And in my experience and observation, a lot of naive developers may actually do that.

153
00:11:37.180 --> 00:11:45.070
But one unfortunate issue with that is that when you leave dates and times represented as text, you

154
00:11:45.070 --> 00:11:49.960
lose the intelligence of being able to make calculations based on dates.

155
00:11:50.290 --> 00:11:56.290
So for example, where we were calculating the age, we were able to simply let the date time API methods

156
00:11:56.500 --> 00:11:58.690
determine that for us very easily.

157
00:11:59.270 --> 00:12:03.160
You'd have to do a lot more work if you wanted to write that same code yourself.

158
00:12:03.160 --> 00:12:04.150
And why do that?

159
00:12:04.150 --> 00:12:06.730
Because, you know, Java is already doing it for us.

160
00:12:07.420 --> 00:12:16.270
Similarly, if we wanted to sort and order people by some date time field, that's trivial to do because

161
00:12:16.270 --> 00:12:19.630
the date time classes already implement comparator.

162
00:12:19.780 --> 00:12:27.280
And so we could easily have them sorted by any of those date time fields for us and applying filters

163
00:12:27.280 --> 00:12:33.070
and all kinds of other things where we want to have more contextual awareness of the fact that these

164
00:12:33.070 --> 00:12:34.960
are date time fields that we're working with.

165
00:12:35.170 --> 00:12:40.680
Whereas if we had used just a simple string or text, you wouldn't have any of that context awareness.

166
00:12:40.690 --> 00:12:44.800
So I'm going to go ahead and now wrap up this conversation on dates and times.

167
00:12:44.950 --> 00:12:49.690
And I think we've now covered all of the typical use cases that I've ever encountered as a software

168
00:12:49.690 --> 00:12:52.510
developer when I have to work with dates and times.

169
00:12:52.690 --> 00:12:56.620
So I think you're ready to go forward and conquer with this information.

170
00:12:56.860 --> 00:12:58.810
And with that, I'll see you in the next one.
