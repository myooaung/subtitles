1
00:00:00,300 --> 00:00:01,230
All right, welcome back.

2
00:00:01,500 --> 00:00:10,200
So in the last lesson, we got our basic application up and running and we created a simple HTML page

3
00:00:10,380 --> 00:00:16,440
and we were able to serve up that page to our web browser to display the words Hello world.

4
00:00:16,740 --> 00:00:21,330
So now we're going to take a deeper dive into how this is basically working.

5
00:00:21,660 --> 00:00:26,550
I'm going to try not to go too deeply, though, because a lot of that depth isn't probably going to

6
00:00:26,550 --> 00:00:29,910
be necessary for you to be able to just build something useful.

7
00:00:30,210 --> 00:00:35,580
But I want you to have some amount of mental model about how this is all working.

8
00:00:35,610 --> 00:00:43,440
OK, so let's start with just looking at how the browser actually got the words Hello world on the on

9
00:00:43,440 --> 00:00:43,930
the screen.

10
00:00:43,950 --> 00:00:51,630
OK, so we typed in the words local host Colin ADHD, and then we hit enter and then we got these words

11
00:00:51,630 --> 00:00:51,900
here.

12
00:00:51,910 --> 00:00:54,630
So what actually happened when we did this?

13
00:00:54,780 --> 00:01:01,830
So first off, let's talk about this term local host and understand what that even means.

14
00:01:02,250 --> 00:01:10,890
You're probably used to being able to type in something like CNN, BCom or www.youtube.com or YouTube.com,

15
00:01:10,890 --> 00:01:18,600
or whatever those names that you normally will type into a browser conceptually refer to a computer

16
00:01:18,600 --> 00:01:26,370
or a server on the internet somewhere every time your browser tries to retrieve data from some place

17
00:01:26,370 --> 00:01:28,080
to show you a page or whatever.

18
00:01:28,410 --> 00:01:35,070
In effect, your browser is really just requesting data from a computer somewhere on the on the internet,

19
00:01:35,490 --> 00:01:38,280
and that computer will have a name, essentially.

20
00:01:38,400 --> 00:01:43,740
OK, now there can be a lot more complexity to it than that, but basically every computer on the internet

21
00:01:44,010 --> 00:01:44,910
has a name.

22
00:01:45,000 --> 00:01:51,180
Actually, every computer in the internet has a numerical address, but those addresses typically can

23
00:01:51,180 --> 00:01:53,940
be translated into names for the most part.

24
00:01:54,840 --> 00:02:03,960
Now, a lot of computers have one default name that can be used to refer to themselves, and that name

25
00:02:03,960 --> 00:02:05,250
is local host.

26
00:02:05,430 --> 00:02:09,780
They also have a numerical address that can additionally be used.

27
00:02:10,020 --> 00:02:12,360
And I'll even show you what that looks like.

28
00:02:12,540 --> 00:02:19,320
You can usually type in 127.0.0.1 88 and if I do this?

29
00:02:19,620 --> 00:02:21,180
Yeah, so that works as well.

30
00:02:21,510 --> 00:02:28,980
So that is kind of like an alias numerical address for the computer that I'm running on right now to

31
00:02:28,980 --> 00:02:32,070
refer to itself 127 zero zero one.

32
00:02:32,310 --> 00:02:38,250
Now, pretty much every computer can refer to itself with this address one two seven zero zero one which,

33
00:02:38,250 --> 00:02:40,380
by the way, is called a loopback address.

34
00:02:40,380 --> 00:02:47,970
If you really wanted to know, because it's only useful for programs that are trying to connect to the

35
00:02:47,970 --> 00:02:50,010
computer that they themselves are running on.

36
00:02:50,040 --> 00:02:50,400
OK.

37
00:02:50,580 --> 00:02:57,240
So if you have a program running on your computer like a web browser and you have a web server running

38
00:02:57,240 --> 00:03:03,030
on the same computer and you want your browser to be able to access data from the web server, you could

39
00:03:03,030 --> 00:03:09,990
refer to the web server at the address 127 zero zero one, and that will let the browser refer back

40
00:03:09,990 --> 00:03:10,650
to itself.

41
00:03:10,680 --> 00:03:15,990
OK, but another computer would not be able to access data on your computer with the address.

42
00:03:15,990 --> 00:03:24,480
127 zero zero one one two seven zero zero one only refers to the current computer that that addresses

43
00:03:25,470 --> 00:03:27,480
is being requested from.

44
00:03:27,720 --> 00:03:28,050
OK.

45
00:03:28,290 --> 00:03:34,590
In terms of Java, you can think of one two seven zero zero one as being the this operator.

46
00:03:34,620 --> 00:03:36,720
You can think of it as the keyword.

47
00:03:36,720 --> 00:03:37,920
This OK?

48
00:03:38,070 --> 00:03:43,830
It refers to the computer that your code is running on, essentially.

49
00:03:44,310 --> 00:03:44,680
OK.

50
00:03:45,180 --> 00:03:46,980
Sorry, if that's a little confusing, but.

51
00:03:47,190 --> 00:03:47,490
All right.

52
00:03:47,500 --> 00:03:54,750
So anyway, and then the one two seven zero zero one address has an alias, if you will, which is local

53
00:03:54,750 --> 00:03:55,210
host.

54
00:03:55,230 --> 00:03:55,710
OK.

55
00:03:56,040 --> 00:04:02,370
So those two terms are synonymous with each other local host or 127 zero zero one?

56
00:04:02,430 --> 00:04:08,060
OK, now the next part that we had to do, though, was we had to type in a colon 1880.

57
00:04:08,430 --> 00:04:09,510
So what is that?

58
00:04:09,900 --> 00:04:15,240
So let me give you a little simple, very simple depiction to help you understand what that is.

59
00:04:15,570 --> 00:04:19,170
OK, so here we have a very simple depiction of a house.

60
00:04:19,440 --> 00:04:23,560
I want you to imagine that your computer is this house.

61
00:04:24,090 --> 00:04:24,510
OK?

62
00:04:24,840 --> 00:04:34,500
And this house has windows and doors and a generic English term that we could use to refer to the doors

63
00:04:34,500 --> 00:04:37,290
and the windows of a house is port.

64
00:04:37,590 --> 00:04:38,010
OK.

65
00:04:38,100 --> 00:04:42,630
So a house has ports which are really just holes in walls.

66
00:04:42,960 --> 00:04:45,630
You know, a door is a hole in a wall.

67
00:04:45,840 --> 00:04:48,250
Windows are holes in walls.

68
00:04:48,270 --> 00:04:50,580
OK, so those are ports.

69
00:04:50,820 --> 00:04:56,210
More generically speaking, OK, so a house can have ports.

70
00:04:57,270 --> 00:04:59,610
Likewise, a computer can also.

71
00:04:59,740 --> 00:05:00,700
Have ports.

72
00:05:01,300 --> 00:05:10,120
So let us imagine that this house or computer has these ports and that these ports can be labeled with

73
00:05:10,120 --> 00:05:10,840
numbers.

74
00:05:11,140 --> 00:05:17,110
So as you see here, I have labeled some of these ports or windows and doors with numbers like 1990

75
00:05:17,110 --> 00:05:18,610
or 80 or 88.

76
00:05:18,760 --> 00:05:19,150
OK.

77
00:05:19,420 --> 00:05:25,450
These numbers can be arbitrary, by the way, so I could have numbered this window one thousand twenty

78
00:05:25,450 --> 00:05:29,290
four or ten or whatever I wanted to.

79
00:05:29,440 --> 00:05:33,190
Pretty much, though, there is an upper limit that I do not recall at the moment.

80
00:05:33,820 --> 00:05:42,460
The purpose of these ports is so that any data that tries to come into this house can specify which

81
00:05:42,460 --> 00:05:44,350
port it wants to come to.

82
00:05:44,650 --> 00:05:52,180
So let us imagine that the person who is sitting at this window at Port 80 provides a service of saying

83
00:05:52,180 --> 00:05:57,370
Hello world to anyone who will come up to this window and greet him.

84
00:05:57,370 --> 00:05:58,870
OK, he that's what he does.

85
00:05:58,870 --> 00:06:01,030
He says, Hello, world in English, OK?

86
00:06:01,420 --> 00:06:08,920
And maybe, maybe this person over here provides a service of saying Hello world in Japanese.

87
00:06:09,010 --> 00:06:09,490
OK.

88
00:06:09,640 --> 00:06:10,510
That's what he does.

89
00:06:10,600 --> 00:06:16,540
And then this person in the middle provides the same service, but in whatever some other language,

90
00:06:16,540 --> 00:06:18,910
OK, so that's what these people do.

91
00:06:19,360 --> 00:06:27,250
So they sit here and they wait for a request to come to them, and that request will come to them because

92
00:06:27,250 --> 00:06:30,700
the request will state which port it's for.

93
00:06:31,000 --> 00:06:39,100
So back over here, when we typed in local host Colin, 88, what we were doing was we were specifying

94
00:06:39,400 --> 00:06:43,240
a port on the local computer 80 80.

95
00:06:43,660 --> 00:06:50,080
And what will happen is there should be a program running that is listening on that port.

96
00:06:50,350 --> 00:06:57,490
So we can think of this guy here as the program that we started up, and he is configured to listen

97
00:06:57,490 --> 00:06:59,780
specifically to port 80 80.

98
00:06:59,800 --> 00:07:00,220
OK.

99
00:07:00,340 --> 00:07:05,560
So we could have other programs that are listening on other ports simultaneously.

100
00:07:05,590 --> 00:07:06,040
OK.

101
00:07:06,280 --> 00:07:11,470
So we could you could think of this as having three programs that are all listening on each of these

102
00:07:11,470 --> 00:07:13,480
ports simultaneously.

103
00:07:14,080 --> 00:07:14,500
OK.

104
00:07:14,770 --> 00:07:17,260
So we're simply stating what port we want.

105
00:07:17,680 --> 00:07:23,410
Now, some of you may be thinking, Huh, that's kind of weird, because when I go to CNN dot com or

106
00:07:23,410 --> 00:07:28,840
youtube.com, I don't have to specify colon, ADHD or any other port.

107
00:07:28,990 --> 00:07:30,130
It just works.

108
00:07:30,160 --> 00:07:30,970
Why is that?

109
00:07:31,090 --> 00:07:31,910
And you are right.

110
00:07:31,930 --> 00:07:32,800
That is correct.

111
00:07:33,040 --> 00:07:40,930
The reason that just works is because web browsers have all agreed that if you do not explicitly specify

112
00:07:40,960 --> 00:07:47,890
a port, there will be a default port assumed and that default port is Port 80.

113
00:07:48,040 --> 00:07:49,510
OK, Port 80.

114
00:07:49,930 --> 00:07:56,560
So if you don't say in a browser what port you're trying to request, data from, the browser will just

115
00:07:56,560 --> 00:08:05,080
tack on Port 80 and send your request to that port at whatever server or computer you are addressing.

116
00:08:05,200 --> 00:08:05,680
OK.

117
00:08:06,400 --> 00:08:09,700
But you can specify explicitly other ports.

118
00:08:09,910 --> 00:08:15,220
Now, if there isn't a program listening on that port, then you'll get back.

119
00:08:15,220 --> 00:08:16,120
Nothing right?

120
00:08:16,300 --> 00:08:17,440
It'll just be an error.

121
00:08:17,590 --> 00:08:21,880
So just because you can think of a port doesn't mean you'll get any data for that port.

122
00:08:21,890 --> 00:08:27,490
There has to be a program listening just as there has to be a person sitting at that window, so to

123
00:08:27,490 --> 00:08:27,910
speak.

124
00:08:28,330 --> 00:08:34,270
So whatever you type in, here is a UI, URL and that stands for uniform resource locator.

125
00:08:34,300 --> 00:08:34,720
OK.

126
00:08:35,020 --> 00:08:41,110
So is this a standard way to specify what data you're trying to retrieve from within your browser?

127
00:08:41,140 --> 00:08:41,560
OK.

128
00:08:41,830 --> 00:08:49,540
So when we type in a URL in the browser and we hit return, the browser generates what you can think

129
00:08:49,540 --> 00:08:51,760
of essentially as a text document.

130
00:08:52,150 --> 00:08:59,950
Usually, it'll be a very short text document, and that document essentially boils down to requesting

131
00:08:59,950 --> 00:09:04,720
that another document be sent back to the browser to display.

132
00:09:04,750 --> 00:09:05,200
OK.

133
00:09:05,650 --> 00:09:11,650
So in our case here, we made a request to retrieve a document, and this is what we got back this hello

134
00:09:11,650 --> 00:09:12,010
world.

135
00:09:12,430 --> 00:09:18,560
I want to show you a little more of what's in this request and then the response from the from the server.

136
00:09:18,580 --> 00:09:18,940
OK.

137
00:09:19,150 --> 00:09:22,100
So there are a couple of ways that we can actually look at this.

138
00:09:22,120 --> 00:09:26,560
First off, now I'm currently in safari, but in a minute here I'm going to switch over to Chrome.

139
00:09:27,370 --> 00:09:32,030
But if I use Safari, I can open up some developer tools with a command option.

140
00:09:32,050 --> 00:09:37,750
I and obviously Safari, I think, only exists on Mac, but no worries.

141
00:09:37,750 --> 00:09:42,040
I mean, if you're on Windows and you're using Chrome or Firefox or something like that, I will show

142
00:09:42,040 --> 00:09:46,210
you in just a moment and equivalent, well, I'll show you the equivalent on on Chrome.

143
00:09:46,330 --> 00:09:47,950
I don't know what it is on Firefox, though.

144
00:09:47,950 --> 00:09:48,850
It might be similar.

145
00:09:49,450 --> 00:09:57,670
OK, so I'm going to go over to the Network tab here, and I'm going to refresh this page.

146
00:09:58,450 --> 00:09:58,870
So.

147
00:09:59,380 --> 00:10:04,600
And then I'm going to highlight this little bit here, so this bit here where I'm covering local host,

148
00:10:04,810 --> 00:10:10,900
that represents the request that I just fired off when I hit return.

149
00:10:11,080 --> 00:10:12,280
So I'm going to click on it.

150
00:10:12,490 --> 00:10:16,810
And now you can see over here, I've got some some data showing up here.

151
00:10:17,020 --> 00:10:25,720
What this is basically showing is what information was sent in the request and a little bit of the information

152
00:10:25,720 --> 00:10:27,790
that was sent back in the response.

153
00:10:27,800 --> 00:10:31,520
OK, so let's focus first on this request bit here.

154
00:10:31,540 --> 00:10:43,030
OK, so it says get http Colin 1.1 and then some accept and a bunch a few little things here.

155
00:10:43,030 --> 00:10:49,120
OK, now for for the most part, for right now, most of this is pretty much unimportant to us.

156
00:10:49,330 --> 00:10:54,000
The main thing I think I would draw your attention to for right now is this first bit right here.

157
00:10:54,010 --> 00:10:54,580
Get.

158
00:10:55,600 --> 00:11:02,320
So that is one of several verbs that browsers are allowed to convey when they are making a request to

159
00:11:02,320 --> 00:11:02,960
a server.

160
00:11:02,980 --> 00:11:03,340
OK.

161
00:11:03,460 --> 00:11:10,840
And by the way, this verb is part of a computer language called HTP, which is why when we type out

162
00:11:10,840 --> 00:11:15,950
the more formal URL, it's usually http colon, slash slash blah blah blah.

163
00:11:15,980 --> 00:11:17,710
WW w dot, whatever, right?

164
00:11:17,950 --> 00:11:24,330
So the language of the web is a language called HTTP, which stands for hypertext transfer protocol.

165
00:11:24,340 --> 00:11:27,430
Again, that's not super important that you memorize or know all of that.

166
00:11:27,430 --> 00:11:28,630
It doesn't really matter.

167
00:11:28,990 --> 00:11:37,060
But within this language, there are a number of standardized operations that we are able to carry out.

168
00:11:37,150 --> 00:11:37,540
OK.

169
00:11:37,840 --> 00:11:43,540
So if you think back to Chapter 12, where we were doing the database work and I introduced you to the

170
00:11:43,540 --> 00:11:50,320
basic concept of a crud application, and I said that crud stands for create, read, update and delete.

171
00:11:50,650 --> 00:11:57,460
These are very common operations that you can do in computing in general, where you're creating records

172
00:11:57,670 --> 00:12:02,230
and you're updating records, you can delete records, you can retrieve records, things of that sort.

173
00:12:02,440 --> 00:12:09,490
Well, actually, it turns out that in hypertext transfer protocol, there are very similar crud like

174
00:12:09,520 --> 00:12:14,860
operations that are defined within the hypertext transfer protocol.

175
00:12:15,100 --> 00:12:15,490
OK.

176
00:12:15,700 --> 00:12:20,740
And one of those operations is called Get and it is a verb.

177
00:12:20,770 --> 00:12:21,220
OK.

178
00:12:21,520 --> 00:12:27,700
So when our browser specifies the get operation, it's talking to a server and it's essentially saying,

179
00:12:27,700 --> 00:12:29,980
I want to retrieve some data.

180
00:12:30,100 --> 00:12:36,390
OK, now you could say I want to send you some data, and that might be with a verb called post.

181
00:12:36,400 --> 00:12:36,880
OK?

182
00:12:37,240 --> 00:12:42,370
Like when you fill out a form like it s your first name, last name and things of that sort.

183
00:12:42,370 --> 00:12:44,650
And then you hit, submit or save or whatever.

184
00:12:44,740 --> 00:12:52,510
In that case, your browser is sending a bunch of data that you entered and it will use not a get,

185
00:12:52,510 --> 00:12:56,590
but it will use usually a post, although it could do it in a few different ways.

186
00:12:56,830 --> 00:13:00,110
But the most standard thing, I suppose, would be a post.

187
00:13:00,130 --> 00:13:00,610
OK.

188
00:13:00,940 --> 00:13:06,760
And then there are other verbs as well, but get and post are by far the most common operations that

189
00:13:06,760 --> 00:13:09,010
you will see in http.

190
00:13:09,160 --> 00:13:09,400
All right.

191
00:13:09,400 --> 00:13:10,870
So we're saying, get now.

192
00:13:10,990 --> 00:13:11,830
Get what?

193
00:13:12,640 --> 00:13:17,890
Well, here we're not really specifying too much other than just that forward slash or I don't know

194
00:13:17,890 --> 00:13:25,030
if you can see that I'll try to zoom in, but we're just saying get the very first whatever there is

195
00:13:25,030 --> 00:13:26,390
available to get.

196
00:13:26,470 --> 00:13:26,920
OK.

197
00:13:27,070 --> 00:13:31,510
So how did that forward slash end up becoming this data here for Hello World?

198
00:13:31,630 --> 00:13:36,070
So let's jump back over to our application here, and I'll just tell you very briefly.

199
00:13:37,000 --> 00:13:44,170
So our application, you can really think of it as two applications in one because we built this with

200
00:13:44,170 --> 00:13:49,900
the start that spring that i o application builder thingy, it kind of gave us two applications.

201
00:13:49,900 --> 00:13:55,480
The first application that it gave us, which we won't directly be interacting with is what you can

202
00:13:55,480 --> 00:14:02,350
generally think of as a web server program called Tomcat by default, although we can change that.

203
00:14:02,740 --> 00:14:11,410
So Tomcat is a Java centric web server, and Java centric web servers are usually referred to more as

204
00:14:11,590 --> 00:14:16,210
application containers because they are meant to contain an application.

205
00:14:16,210 --> 00:14:16,720
So they are.

206
00:14:16,750 --> 00:14:21,520
They themselves are an application which is meant to contain your application, OK?

207
00:14:21,880 --> 00:14:31,210
So this program that we've created here contains sorry to keep using that word, but it contains this

208
00:14:31,210 --> 00:14:34,810
program called Tomcat embedded within it.

209
00:14:35,410 --> 00:14:43,060
And the embedded version of Tomcat that we have here knows how to open up a port on your computer.

210
00:14:43,210 --> 00:14:50,350
And by default, it opens up Port ADHD and it will sit there and listen for incoming requests.

211
00:14:50,560 --> 00:14:59,210
And if an incoming request happens to be a get request and doesn't specify a particular.

212
00:14:59,380 --> 00:15:06,970
Aim of a resource which you can think of as a file, if it doesn't specify a specific resource or file,

213
00:15:07,270 --> 00:15:16,360
then by default, Tomcat and most web servers in the world by default will look for a file called index

214
00:15:16,370 --> 00:15:17,620
that HTML.

215
00:15:17,980 --> 00:15:24,880
And if there is such a file, they will usually send that file back to the server.

216
00:15:25,000 --> 00:15:32,890
So that's why we created this file and named it indexed it HTML because I wanted that to work by default,

217
00:15:32,890 --> 00:15:33,580
if you will.

218
00:15:33,640 --> 00:15:39,310
OK, so that you wouldn't have to specify now if we had named this file something else.

219
00:15:39,310 --> 00:15:40,970
In fact, I will do that real quick.

220
00:15:41,320 --> 00:15:44,940
I will call it junk that html OK.

221
00:15:45,190 --> 00:15:49,240
And then I will restart my service here.

222
00:15:50,430 --> 00:16:00,720
OK, so now if I re request this now, I get an error, OK, because I'm still not specifying a specific

223
00:16:00,720 --> 00:16:02,670
file or resource that I want.

224
00:16:03,390 --> 00:16:10,680
And so Tomcat will look for an index that HTML file, but there isn't one, and so it has nothing that

225
00:16:10,680 --> 00:16:11,520
it can return back.

226
00:16:11,640 --> 00:16:18,080
However, now if I explicitly ask for junk junk, that HTML.

227
00:16:19,020 --> 00:16:19,740
I get that.

228
00:16:20,040 --> 00:16:21,300
OK, so.

229
00:16:21,780 --> 00:16:27,570
So that gives you a little more insight into what's going on with the web server and Tomcat and all

230
00:16:27,570 --> 00:16:27,900
of that.

231
00:16:28,200 --> 00:16:35,160
And so Tomcat is working hand in hand with additional code that is provided by the spring framework.

232
00:16:35,490 --> 00:16:42,240
And then the spring framework, in turn, is waiting for me to write even more additional code to do

233
00:16:42,240 --> 00:16:43,500
what I want it to do.

234
00:16:43,530 --> 00:16:43,890
OK?

235
00:16:43,990 --> 00:16:48,690
Which we haven't done that yet, but this is just basic functionality that we're getting right out of

236
00:16:48,690 --> 00:16:49,140
the box.

237
00:16:49,350 --> 00:16:49,560
All right.

238
00:16:49,590 --> 00:16:55,740
Let's also talk a little bit about the language that is used to specify what should be displayed in

239
00:16:55,740 --> 00:16:56,550
a web browser.

240
00:16:56,640 --> 00:17:02,220
Now, I'm not going to be really explicitly teaching this language the language, by the way, as HTML,

241
00:17:02,220 --> 00:17:04,620
which is hypertext markup language.

242
00:17:04,830 --> 00:17:10,020
Hopefully a lot of you have heard of the animal and have some some gist of what it is.

243
00:17:10,020 --> 00:17:16,320
At least you may not know the language explicitly, but you know, yeah, web sites and stuff are written

244
00:17:16,320 --> 00:17:18,330
using this language called HTML.

245
00:17:18,600 --> 00:17:24,390
So we'll take just a very quick peek at a little bit more of what this HTML language is all about.

246
00:17:25,440 --> 00:17:31,410
So it is what we refer to as a markup language, and it consists of lots of things like this which are

247
00:17:31,410 --> 00:17:32,710
referred to as tags.

248
00:17:32,840 --> 00:17:39,870
It has a lot of has a good number of tags that you can use to control how a particular web page might

249
00:17:39,870 --> 00:17:40,260
look.

250
00:17:40,470 --> 00:17:44,430
So in this case, I did the bare minimum here, but I could have done a little more.

251
00:17:44,520 --> 00:17:48,320
So I'll just show you a couple of little things real quick and we'll learn more and more as we go.

252
00:17:48,330 --> 00:17:49,800
But just to give you a little idea.

253
00:17:49,800 --> 00:17:54,900
So I just told it to display the word hello world in the body of the page.

254
00:17:54,900 --> 00:17:57,810
OK, so that would be just this main area of the page.

255
00:17:58,350 --> 00:18:02,340
There's also like this header this head section of the page.

256
00:18:02,460 --> 00:18:05,160
And this is more like what we call metadata.

257
00:18:05,520 --> 00:18:10,170
OK, so we can we can specify some various types of metadata and things of this sort.

258
00:18:10,180 --> 00:18:12,440
But let's let's do a little changes.

259
00:18:12,480 --> 00:18:17,100
I'm going to select this hello world and I'm going to do an option command T to surround.

260
00:18:17,100 --> 00:18:23,550
So remember now in our Java code, I could select a block of code or a few lines of code and do an option

261
00:18:23,550 --> 00:18:24,290
command T.

262
00:18:24,390 --> 00:18:30,060
And I could surround that block of code with things like if statements and try catch blocks and things

263
00:18:30,060 --> 00:18:30,720
of that sort.

264
00:18:30,900 --> 00:18:38,130
Well, when I'm editing HTML in intelligent, I can still use the option command T and I can still use

265
00:18:38,130 --> 00:18:41,250
it to surround selections of HTML.

266
00:18:41,370 --> 00:18:47,190
But now, of course, it's not going to give me, you know, Java centric options like Surround with

267
00:18:47,190 --> 00:18:48,510
an F or a try catch.

268
00:18:48,510 --> 00:18:52,140
Instead, it gives me options that make sense for HTML language.

269
00:18:52,230 --> 00:18:52,500
OK.

270
00:18:52,770 --> 00:18:58,980
And so I can choose to, for example, surround that text with with a tag.

271
00:18:59,220 --> 00:19:00,810
And that's exactly what I'm going to do.

272
00:19:00,810 --> 00:19:02,010
So I'm going to choose this.

273
00:19:02,100 --> 00:19:06,570
And now I get a little cursor waiting right there so that I can create a tag.

274
00:19:06,750 --> 00:19:07,440
And I don't know.

275
00:19:07,440 --> 00:19:14,610
Let's do like a header tag, so I'm going to do an h to header tag and then hit return notice that I

276
00:19:14,610 --> 00:19:20,190
got an what's called an opening h two tag here and then a closing H2H to tag here.

277
00:19:20,370 --> 00:19:26,250
And it's closing because it has a forward slash there, which means that that's the that's the end of

278
00:19:26,250 --> 00:19:28,140
this tag over here, OK?

279
00:19:28,680 --> 00:19:35,700
And then I'm going to restart the server, which is generally pretty quick because I don't really have

280
00:19:35,700 --> 00:19:38,160
much going on here, then I will refresh.

281
00:19:38,940 --> 00:19:40,980
And now that's bigger and bolder.

282
00:19:41,010 --> 00:19:47,430
OK, so now we're seeing this hello world being displayed with a secondary level header tag.

283
00:19:47,580 --> 00:19:53,280
If you've used Microsoft Word or or Apple pages or something like that and you're typing up a document,

284
00:19:53,430 --> 00:19:56,280
you know you can choose different heading fonts and things.

285
00:19:56,460 --> 00:19:57,690
That's what you're doing here.

286
00:19:57,720 --> 00:19:58,110
OK.

287
00:19:59,280 --> 00:20:03,960
So that's how you could, you know, do something like decorate some text differently.

288
00:20:03,960 --> 00:20:05,900
And like I said, there are many, many tags.

289
00:20:05,910 --> 00:20:10,260
I'm not going to get into all of them right now, but just wanted to show you really briefly here that,

290
00:20:10,800 --> 00:20:11,060
OK.

291
00:20:11,070 --> 00:20:17,220
So earlier I was saying that we're making a request and now you see that we're doing this, get requests.

292
00:20:17,220 --> 00:20:22,740
But now we're specifying a an actual file, whereas before we just had the forward slash and nothing,

293
00:20:22,740 --> 00:20:22,980
right?

294
00:20:23,100 --> 00:20:27,040
So now you can see that we're requesting get forward slash junk, that HTML.

295
00:20:27,150 --> 00:20:27,450
OK.

296
00:20:27,570 --> 00:20:29,820
And we're going to ignore the rest of this for right now.

297
00:20:30,120 --> 00:20:32,100
And then we get back a response.

298
00:20:32,430 --> 00:20:38,250
So this response will contain all of this HTML.

299
00:20:38,460 --> 00:20:39,330
It's just text.

300
00:20:39,330 --> 00:20:41,490
We're really just sending off text documents.

301
00:20:41,490 --> 00:20:46,470
We're sending off a request that is a text document and then we're getting back a response, which is

302
00:20:46,470 --> 00:20:48,450
also a text document.

303
00:20:48,780 --> 00:20:49,860
Now that document?

304
00:20:50,190 --> 00:20:53,190
Will be pre pended with what are called headers.

305
00:20:53,340 --> 00:20:57,900
So all these blue things here, these are just headers, which is kind of like metadata that just kind

306
00:20:57,900 --> 00:21:03,900
of describes, Hey, what language is this going to be in and how long is it and things of that sort?

307
00:21:04,170 --> 00:21:11,930
And then we will receive the actual body not of the HMO, but the body of the response itself, OK,

308
00:21:12,000 --> 00:21:14,430
which will contain all of the HTML.

309
00:21:15,120 --> 00:21:21,890
It's really a fairly simplistic protocol or language, if you will, deep when you really boil it down,

310
00:21:21,900 --> 00:21:22,140
OK?

311
00:21:22,350 --> 00:21:28,320
So notice now we've got languages within languages, though, so our browser is speaking a language

312
00:21:28,320 --> 00:21:36,270
called Hypertext Transfer Protocol, or FTP between itself and a server, and it's receiving back a

313
00:21:36,270 --> 00:21:36,990
response.

314
00:21:36,990 --> 00:21:41,970
And inside of that response is a document written in another language of HTML.

315
00:21:42,240 --> 00:21:47,310
And then the browser has to interpret that HTML to display something on the screen.

316
00:21:47,730 --> 00:21:48,110
OK.

317
00:21:48,630 --> 00:21:52,170
So I think that's enough explanation for what's going on here.

318
00:21:52,650 --> 00:21:58,350
OK, so now in the next lesson, we will proceed to write some actual Java code that we will then use

319
00:21:58,350 --> 00:22:01,770
to render something more dynamic on the screen.

320
00:22:01,860 --> 00:22:02,220
OK.

321
00:22:02,250 --> 00:22:03,810
So I will see you in the next one.
