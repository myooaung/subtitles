1
00:00:00,690 --> 00:00:07,530
All right, so in this lesson, we're going to learn about another set of numeric classes.

2
00:00:07,680 --> 00:00:09,900
This will be an easy one and shouldn't be long at all.

3
00:00:10,020 --> 00:00:17,650
So Java has another set of numeric classes that are cousins of the primitive data types.

4
00:00:17,670 --> 00:00:26,790
Basic numerical data types in Java, such as Int and Long and Float, Double, etc. And those data types

5
00:00:26,790 --> 00:00:31,430
are called primitives because they are not based on classes.

6
00:00:31,440 --> 00:00:33,570
OK, they're not classes or objects.

7
00:00:33,840 --> 00:00:42,060
They are just low level numbers that work very efficiently at the microprocessor level.

8
00:00:42,090 --> 00:00:42,510
OK.

9
00:00:42,630 --> 00:00:48,390
So when you want to do math with any of those primitive data types, you're going to get the fastest

10
00:00:48,510 --> 00:00:56,610
possible processing power and calculating power that you can on your computer because they are passed

11
00:00:56,760 --> 00:01:00,360
natively, if you will, down to the processor, essentially.

12
00:01:01,020 --> 00:01:08,430
However, as we've already learned for the floating point types float and double, you can lose some

13
00:01:08,430 --> 00:01:11,850
accuracy or some precision when using those data types.

14
00:01:12,060 --> 00:01:18,270
So what you what you lack in precision you make up for in speed, maybe, or vice versa?

15
00:01:19,140 --> 00:01:26,550
Sometimes, though, when programming in an object oriented way, you may need to have methods that

16
00:01:26,550 --> 00:01:31,410
are capable of passing nothing but objects back and forth.

17
00:01:31,800 --> 00:01:38,580
And if you want to deal with the primitive number types such as float and double in particular, sometimes

18
00:01:38,580 --> 00:01:44,940
you will encounter issues where you're wanting to have the signature of a method that is, you know,

19
00:01:44,940 --> 00:01:54,270
the definition of the method itself capable of taking as input or as as output instances of objects.

20
00:01:54,570 --> 00:01:59,630
But when dealing with with primitives, primitives are not instances of objects.

21
00:01:59,640 --> 00:02:01,800
So now you have a bit of a mismatch.

22
00:02:01,980 --> 00:02:09,810
So what I'm going to introduce you to in this lecture is the concept of what are called wrapper classes.

23
00:02:10,050 --> 00:02:17,400
These are classes that wrap the primitive numeric types so that we can get around some of these issues.

24
00:02:17,550 --> 00:02:20,460
So first off, let me show you what I mean in code.

25
00:02:20,760 --> 00:02:25,110
So let's say that we have a method.

26
00:02:27,910 --> 00:02:31,900
That for right now, I'll just declare that this method is going to be void.

27
00:02:32,350 --> 00:02:36,260
And let's call it store data, OK?

28
00:02:37,180 --> 00:02:43,090
And what this method is supposed to do, I will I will comment here as a Java doc.

29
00:02:43,450 --> 00:02:43,930
OK?

30
00:02:44,150 --> 00:02:46,290
A documentation for our Java class.

31
00:02:46,380 --> 00:02:47,140
Let me let me.

32
00:02:47,980 --> 00:02:49,780
Let's make a little room here.

33
00:02:50,020 --> 00:02:50,350
All right.

34
00:02:50,980 --> 00:02:51,910
Take thin.

35
00:02:53,250 --> 00:02:57,300
Any type of data and stores it.

36
00:02:58,710 --> 00:03:01,200
Somewhere generically.

37
00:03:01,740 --> 00:03:02,130
OK.

38
00:03:03,590 --> 00:03:09,770
So I'm not saying this is a great idea for a method, but let's just say we wanted a generic method

39
00:03:09,770 --> 00:03:13,760
that could take in any type of data and just store it somehow.

40
00:03:14,150 --> 00:03:18,080
OK, so that data could be strings or numbers or whatever.

41
00:03:18,530 --> 00:03:24,920
Well, if we wanted to make a method this generic, what would the input type be?

42
00:03:25,280 --> 00:03:31,400
Because I just said, like, we want it to be able to take strings or numbers or whatever, right?

43
00:03:31,420 --> 00:03:35,720
We don't even want to have to think about what the data type would be, just whatever it is, we're

44
00:03:35,720 --> 00:03:38,210
going to figure out a way to store it somehow.

45
00:03:38,450 --> 00:03:43,580
So the first thing you'd have to do is decide, well, what is the data type going to be for the input

46
00:03:43,850 --> 00:03:45,140
of this method?

47
00:03:45,410 --> 00:03:55,940
If you will recall, in Java, all classes of Java eventually extend from one primary super class called

48
00:03:56,060 --> 00:03:56,870
object.

49
00:03:57,560 --> 00:04:05,150
And one of the beautiful things about object oriented programming is that you can always refer to a

50
00:04:05,150 --> 00:04:09,290
class by that classes super class.

51
00:04:09,320 --> 00:04:09,770
OK.

52
00:04:10,370 --> 00:04:21,650
So for example, if we go back to one of our previous lessons where we had created a person and a pet

53
00:04:21,650 --> 00:04:31,790
and a cat and a dog, if you recall in our modeling of the cat and dog, we said that cat extends pet,

54
00:04:31,790 --> 00:04:34,430
meaning that a cat is a type of pet.

55
00:04:34,730 --> 00:04:43,580
And we also said that dog extends pet because we have this hierarchical relationship.

56
00:04:43,940 --> 00:04:48,920
We were able to say that a person can have a pet.

57
00:04:49,100 --> 00:04:51,510
And the data type for that was just pet.

58
00:04:51,530 --> 00:04:57,770
We didn't have to say a person can have a dog and then another member variable saying a person can have

59
00:04:57,770 --> 00:04:58,130
a cat.

60
00:04:58,160 --> 00:04:59,210
We don't have to do that.

61
00:04:59,240 --> 00:05:05,840
We can store either a cat or a dog in this generic data type called pet.

62
00:05:06,080 --> 00:05:11,580
Because both cat and dog extend pet, they are both a type of pet.

63
00:05:11,600 --> 00:05:12,680
In other words?

64
00:05:12,710 --> 00:05:13,190
OK.

65
00:05:13,280 --> 00:05:13,760
All right.

66
00:05:14,060 --> 00:05:15,980
So here's my point.

67
00:05:16,250 --> 00:05:24,410
If we want to be able to have a method that can accept any data type at all, we could define this method

68
00:05:24,410 --> 00:05:36,350
as simply accepting something of type object because object is the parent type for all classes throughout

69
00:05:36,350 --> 00:05:36,950
Java.

70
00:05:37,040 --> 00:05:44,360
There is no such thing as a class that does not eventually inherit either directly or indirectly from

71
00:05:44,360 --> 00:05:45,830
the object class.

72
00:05:46,010 --> 00:05:49,850
And so we can use this generic class type always.

73
00:05:50,000 --> 00:05:53,660
Now, this is not usually a real great idea to do.

74
00:05:53,660 --> 00:05:59,660
You usually want to be a bit more specific about what kinds of data you can accept so that you can have

75
00:05:59,660 --> 00:06:00,440
more meaning.

76
00:06:00,680 --> 00:06:06,050
But in this particular case, where the whole point of the method is to be able to accept literally

77
00:06:06,050 --> 00:06:10,340
anything at all, this may be the best that you can do, however.

78
00:06:10,700 --> 00:06:14,060
Now let's look at a potential issue with this.

79
00:06:14,300 --> 00:06:19,760
And so here we might, you know, do something with the object.

80
00:06:20,270 --> 00:06:28,250
So now let's say that we Oh, let's make this static so that we can keep this a little simpler.

81
00:06:28,280 --> 00:06:35,540
OK, so now let's say that we have an integer called number one equals seven.

82
00:06:36,870 --> 00:06:46,410
And let's say that we want to be able to pass no one into this method store data.

83
00:06:46,920 --> 00:06:49,230
So let's see what that would look like store data.

84
00:06:50,040 --> 00:06:50,940
Number one.

85
00:06:51,150 --> 00:06:53,070
Now this is kind of interesting.

86
00:06:53,070 --> 00:06:59,370
I don't know if you're noticing this, but on first blush, this really shouldn't be happy.

87
00:06:59,400 --> 00:07:07,310
Notice I'm not getting any errors here, but I maybe should be, because ENT is not a class.

88
00:07:07,320 --> 00:07:12,540
It is a primitive data type and object is a class.

89
00:07:13,200 --> 00:07:21,240
You, generally speaking, cannot pass a primitive data type into a method that is expecting a class.

90
00:07:21,760 --> 00:07:24,270
However, I'm not getting any errors here.

91
00:07:24,420 --> 00:07:25,230
Why not?

92
00:07:25,830 --> 00:07:32,550
This is where we get into a trick that the creators of Java added to later versions of Java.

93
00:07:32,550 --> 00:07:35,420
When Java first came out, this would not have worked.

94
00:07:35,430 --> 00:07:37,000
We would have gotten an error.

95
00:07:37,020 --> 00:07:44,730
But I think as of Java version five, if I recall correctly, the creators of Java did some some trickery

96
00:07:44,760 --> 00:07:47,610
with the language to allow this to happen.

97
00:07:47,910 --> 00:07:56,010
And what they did was they introduced another set of numeric data types, which are classes, and these

98
00:07:56,010 --> 00:08:01,050
are commonly referred to as wrapper classes or numeric wrapper classes.

99
00:08:01,500 --> 00:08:11,000
And so basically, for many of the most common numerical primitive types, such as Int Float Long Double,

100
00:08:11,010 --> 00:08:16,500
there are classes that represent the same concepts.

101
00:08:17,070 --> 00:08:23,820
And so in this case, what's happening is, even though it appears that we are trying to pass a primitive

102
00:08:23,820 --> 00:08:34,470
integer into a method that accepts an object, Java is actually converting our primitive integer into

103
00:08:34,500 --> 00:08:37,770
a wrapper class of type integer.

104
00:08:37,980 --> 00:08:40,890
And what that kind of really looks like is this.

105
00:08:43,570 --> 00:08:50,980
There's a class called integer spelled out with a capital I, because it's a class, and let's call

106
00:08:50,980 --> 00:08:53,200
this number one.

107
00:08:54,450 --> 00:08:54,960
Be.

108
00:08:56,720 --> 00:09:00,950
And then that gets initialized, and there are a number of ways to initialize this.

109
00:09:01,160 --> 00:09:09,230
But for right now, what we'll do is we will call a static method on the integer class of value of.

110
00:09:09,860 --> 00:09:13,820
And then we can pass in our primitive integer.

111
00:09:14,270 --> 00:09:21,770
Now what This method value of returns is a wrapper class of integer.

112
00:09:21,980 --> 00:09:26,870
So we have just converted a primitive integer into a wrapper of integer.

113
00:09:27,110 --> 00:09:32,540
This is not entirely unlike how we can use big decimal.

114
00:09:32,810 --> 00:09:39,440
Instead of using a float or a double, very similar float and double our primitives big decimal as a

115
00:09:39,440 --> 00:09:40,130
class.

116
00:09:40,310 --> 00:09:47,660
So here, instead of using the primitive integer, we can now convert to a wrapper class of integer,

117
00:09:47,720 --> 00:09:51,140
and Java is actually doing this automatically for us.

118
00:09:51,410 --> 00:09:57,980
In the case where we're trying to pass a primitive integer into a method that takes an object, java's

119
00:09:57,980 --> 00:09:58,910
doing this for us.

120
00:09:59,240 --> 00:10:06,380
And when Java does this type of wrapping for us, it is called boxing or auto boxing.

121
00:10:06,830 --> 00:10:08,090
I'll spell that out.

122
00:10:09,240 --> 00:10:15,960
Auto boxing, because it's putting our number in a box, if you will, or a rapper.

123
00:10:16,290 --> 00:10:25,080
So auto boxing and now this integer of seven is being represented as an object, which can now be passed

124
00:10:25,080 --> 00:10:28,920
in to a method that expects an object.

125
00:10:29,670 --> 00:10:38,100
In addition to the class of integer, there are a number of other numeric wrapper types, such as double.

126
00:10:43,930 --> 00:10:47,690
And we can initialize it in much the same way.

127
00:10:48,010 --> 00:10:50,000
We can use the value of.

128
00:10:50,200 --> 00:10:52,300
And then we can pass in a double.

129
00:10:55,290 --> 00:10:56,040
Like so.

130
00:10:57,710 --> 00:10:59,090
There's a float.

131
00:11:03,440 --> 00:11:06,140
And again, we can use the value of method.

132
00:11:07,770 --> 00:11:15,420
Here, though, I need to put an f behind this number because we call without the F Java assumes that

133
00:11:15,420 --> 00:11:17,550
your number is a double.

134
00:11:18,000 --> 00:11:18,270
Right.

135
00:11:18,300 --> 00:11:23,880
So now I have an error, so I have to actually put that f there if I want to make sure that it interprets

136
00:11:23,880 --> 00:11:25,530
that number as a float.

137
00:11:27,860 --> 00:11:29,150
There is a bite.

138
00:11:33,700 --> 00:11:34,420
Same deal.

139
00:11:34,570 --> 00:11:35,980
I can use value of.

140
00:11:36,220 --> 00:11:41,620
However, with this value of there are a few different versions, there's one that takes a bite.

141
00:11:42,430 --> 00:11:44,680
And then there is one that takes a string.

142
00:11:44,710 --> 00:11:50,830
The easiest thing to do in this particular case would be to actually supply it with a string, because

143
00:11:50,830 --> 00:11:57,250
if we were to just type a number that will be interpreted as a double and not a bite.

144
00:11:57,580 --> 00:12:03,990
So the quickest, easiest thing to do here would would be to simply wrap this as a string and then specify

145
00:12:03,990 --> 00:12:04,060
it.

146
00:12:04,210 --> 00:12:11,650
So again, that's quite similar to what we would do when initializing a big decimal or a big integer.

147
00:12:11,860 --> 00:12:16,610
And incidentally, we can do the same for these other data types as well.

148
00:12:16,810 --> 00:12:21,970
We can wrap them as strings and pass them in that way, too.

149
00:12:22,450 --> 00:12:31,360
And so now each of these boxed numeric data types can be passed into any method that is expecting an

150
00:12:31,360 --> 00:12:33,340
object rather than a primitive.

151
00:12:33,580 --> 00:12:40,570
And so this allows us to get around that issue of how to pass numbers that would otherwise have been

152
00:12:40,570 --> 00:12:44,020
primitives into methods that are expecting objects.

153
00:12:44,470 --> 00:12:52,420
Additionally, there are a number of useful methods on each of these classes, which are quite similar

154
00:12:52,420 --> 00:12:59,860
to the methods that we've already seen in the math class and on the big decimal and big integer classes.

155
00:13:00,160 --> 00:13:07,210
So I will not go through those exhaustively, but we'll just take a quick peek at some of those methods.

156
00:13:07,210 --> 00:13:09,310
I'm not even going to really call them, though.

157
00:13:09,580 --> 00:13:10,300
So let's see.

158
00:13:10,300 --> 00:13:16,960
What do we have method wise on the boxed integer class so we can get a bite value?

159
00:13:16,960 --> 00:13:21,280
And we saw a version of that on Big Decimal, I believe, or on big integer.

160
00:13:21,520 --> 00:13:29,140
We can compare numbers we can convert to other types, which is sometimes quite useful so you can convert.

161
00:13:29,500 --> 00:13:35,740
For example, this integer value to a double float or a float, or a long that's sometimes quite useful

162
00:13:35,740 --> 00:13:42,640
or a short or a string, you can always convert any object to a string.

163
00:13:42,730 --> 00:13:43,660
Let's see.

164
00:13:43,660 --> 00:13:48,730
For my double, you'll have pretty much the same methods here as well.

165
00:13:49,000 --> 00:13:57,490
You can convert it to a byte or a double a float, and you can ask if it's infinite or is it not a number?

166
00:13:57,490 --> 00:13:58,930
That's what NAND means.

167
00:13:58,930 --> 00:14:00,430
That means not a number.

168
00:14:00,610 --> 00:14:07,840
So if the value stored inside of that object cannot be represented as a number, then this method,

169
00:14:07,840 --> 00:14:09,310
if you called it, would return.

170
00:14:09,310 --> 00:14:09,820
True?

171
00:14:10,480 --> 00:14:10,870
OK.

172
00:14:11,170 --> 00:14:18,310
There's one more really important topic that I want to show you and talk about when it comes to numbers

173
00:14:18,310 --> 00:14:23,650
and converting them to different types as a professional programmer.

174
00:14:23,680 --> 00:14:33,430
One thing that you are likely to find yourself having to do from time to time is taking input from users

175
00:14:33,460 --> 00:14:35,860
via some type of user interface.

176
00:14:36,070 --> 00:14:43,660
What I mean by a user interface, by the way, is a screen where users of your program actually interact

177
00:14:43,660 --> 00:14:44,860
with the program.

178
00:14:44,870 --> 00:14:52,840
So for example, if you wrote a program that asked users to enter information, it might be in a web

179
00:14:52,840 --> 00:14:53,530
browser.

180
00:14:53,560 --> 00:14:58,150
In that case, a form in a web browser would be your user interface.

181
00:14:58,360 --> 00:15:04,450
If it's a desktop application, there would be a window with a form or something like that, and that

182
00:15:04,450 --> 00:15:06,100
would be your user interface.

183
00:15:06,310 --> 00:15:13,180
Or if it's a mobile app like a Java Android app and there's a form on the screen of the Android app

184
00:15:13,180 --> 00:15:15,010
that would be your user interface.

185
00:15:15,010 --> 00:15:19,310
So the user interface is literally the thing that the user interfaces with, right?

186
00:15:19,330 --> 00:15:21,970
How do they work with your program?

187
00:15:22,330 --> 00:15:30,370
So when you are asking users to enter information into your user interface, which is also called a

188
00:15:30,370 --> 00:15:37,840
UI for short, typically all of the information that they enter, regardless of what that information

189
00:15:37,840 --> 00:15:45,190
represents, it will come to you, the programmer, initially in the form of text, usually.

190
00:15:45,610 --> 00:15:55,120
OK, so even if you asked the user to enter their age as a number, what you would initially receive

191
00:15:55,120 --> 00:16:00,610
in your code will typically be a string and not a number.

192
00:16:00,850 --> 00:16:07,900
So then if you wanted to proceed to do some math with that information or something like that, you'd

193
00:16:07,900 --> 00:16:13,390
have to convert that text representation of a number into an actual number.

194
00:16:13,510 --> 00:16:19,090
So I want to just make sure that you are aware of some of the ways that you can do this.

195
00:16:19,090 --> 00:16:26,830
And having just learned about the wrapper classes, those classes are among the easiest ways to do such

196
00:16:26,830 --> 00:16:27,520
conversions.

197
00:16:27,530 --> 00:16:30,100
So let's see what that would look like a little bit.

198
00:16:30,130 --> 00:16:30,550
OK.

199
00:16:30,580 --> 00:16:32,950
So the easiest thing we could do.

200
00:16:33,290 --> 00:16:39,620
Would be something like, let's say, if you did ask the user to enter their age and then you wanted

201
00:16:39,620 --> 00:16:47,570
to store that in a variable of type and right, so I will make an integer and I will call it age.

202
00:16:47,870 --> 00:16:56,930
Now let's pretend like that information was passed into our program as an input argument that would

203
00:16:56,930 --> 00:16:58,670
be like with one of these here.

204
00:16:59,180 --> 00:16:59,590
OK.

205
00:16:59,810 --> 00:17:08,540
So the way that we could make sure that that number, it's converted from a string, which is what these

206
00:17:08,540 --> 00:17:16,450
args are to a number one way you can do that is to simply use the integer wrapper class.

207
00:17:16,880 --> 00:17:21,950
And all of these wrapper classes have a method on them called pass.

208
00:17:22,520 --> 00:17:26,000
Well, they have variations of of a method called pass.

209
00:17:26,060 --> 00:17:31,830
So the integer has a method called pass int and it takes as an input a string.

210
00:17:32,150 --> 00:17:41,390
And so what you can do is, let's say that the user entered a string of thirty seven like so well,

211
00:17:41,390 --> 00:17:47,420
all that happens here is that this string representation of thirty seven gets translated into an actual

212
00:17:47,420 --> 00:17:48,140
integer.

213
00:17:48,440 --> 00:17:52,760
And and then we get the the integer stored in the age here.

214
00:17:53,180 --> 00:17:55,070
Let me show you a couple other things here.

215
00:17:55,400 --> 00:17:56,120
Amount.

216
00:17:56,690 --> 00:18:01,700
So let's say that was going to be a floating point number, a double, right?

217
00:18:01,730 --> 00:18:05,630
So here we can call Double Dot Pass double.

218
00:18:05,750 --> 00:18:10,460
And then you could have something like 345 and 12 cents.

219
00:18:10,880 --> 00:18:14,180
Oh, and I'm sorry, and I forgot to make that an actual double.

220
00:18:15,240 --> 00:18:15,520
Oops!

221
00:18:16,730 --> 00:18:17,180
Here we go.

222
00:18:18,200 --> 00:18:18,800
Float.

223
00:18:19,040 --> 00:18:25,250
Float would be the same pass float, right, so there's a there's a pass method for float.

224
00:18:26,590 --> 00:18:31,180
About bite, there's a past method for four bite.

225
00:18:32,700 --> 00:18:35,640
There's even a past method for Boolean.

226
00:18:37,460 --> 00:18:43,070
The way this one works, is it it it's looking for the word true or false?

227
00:18:43,970 --> 00:18:46,100
In fact, here will live and we'll use it.

228
00:18:46,460 --> 00:18:46,940
So.

229
00:18:49,000 --> 00:18:49,630
Like so.

230
00:18:50,530 --> 00:18:52,720
And then we could print that out.

231
00:18:58,370 --> 00:19:00,890
Here you go, and you can set it to true.

232
00:19:04,490 --> 00:19:04,850
OK.

233
00:19:05,060 --> 00:19:11,510
So let me also show you a quick example of how this could actually be used.

234
00:19:13,050 --> 00:19:17,110
So we'll just print, let's do a little bit of math.

235
00:19:17,130 --> 00:19:24,890
Let's ask for the age of a person and then we will print out that age plus 15.

236
00:19:25,110 --> 00:19:25,560
OK.

237
00:19:26,070 --> 00:19:29,400
In fact, here let's be even a little cooler than that.

238
00:19:29,910 --> 00:19:34,560
Let's let's use a print format and say you will be.

239
00:19:36,310 --> 00:19:42,790
Percent, the age in 15 years.

240
00:19:45,790 --> 00:19:46,630
New line.

241
00:19:48,160 --> 00:19:50,170
OK, so see what we're doing here.

242
00:19:50,200 --> 00:19:53,330
I'm going to take that age, add 15 to it.

243
00:19:53,350 --> 00:20:01,630
I'm treating all of that as a variable that will be bound to this symbol here percent d.

244
00:20:01,630 --> 00:20:05,650
So it will say you will be whatever age you will be age in 15 years.

245
00:20:05,950 --> 00:20:16,390
Now appear instead of hard coding and age, we will want to instead retrieve a number that will be passed

246
00:20:16,390 --> 00:20:22,840
in when the program is executing and it will be passed into this array of args.

247
00:20:23,080 --> 00:20:27,490
So in a later chapter or module, we will learn more about arrays.

248
00:20:27,490 --> 00:20:31,200
But basically, you can think of this as a list of strings.

249
00:20:31,210 --> 00:20:40,310
And so whatever arguments we pass in to this program, they will be contained in this list of strings.

250
00:20:40,330 --> 00:20:40,750
OK.

251
00:20:41,140 --> 00:20:46,150
I know that's probably not meaning very much to you right now, but let me just show you what it will

252
00:20:46,150 --> 00:20:46,720
look like.

253
00:20:46,990 --> 00:20:48,340
So we will want to get.

254
00:20:49,000 --> 00:20:55,360
I only planned to pass in one argument for now, and so it will be the very first argument in this array

255
00:20:55,360 --> 00:20:56,170
of strings.

256
00:20:56,410 --> 00:21:05,110
And the way that I can access that is by referring to this variable args and then using a square bracket

257
00:21:05,830 --> 00:21:13,000
and then specifying a number of the index that I want to grab out of this array.

258
00:21:13,010 --> 00:21:16,600
So I want the first argument which would be index zero.

259
00:21:17,110 --> 00:21:17,590
OK.

260
00:21:18,660 --> 00:21:27,320
So assuming that I pass in a no as an argument to this program, that number will be here in this args.

261
00:21:27,390 --> 00:21:27,840
Zero.

262
00:21:27,870 --> 00:21:30,210
However, it will be a string.

263
00:21:30,510 --> 00:21:34,650
And in order to store this number in an integer, I need to convert it.

264
00:21:34,650 --> 00:21:36,330
And so that's what we're doing here.

265
00:21:36,360 --> 00:21:38,820
OK, so this will be args zero.

266
00:21:39,570 --> 00:21:45,420
Now there are a few ways that this could be run, but maybe the easiest way right now would be to go

267
00:21:45,420 --> 00:21:48,840
up here to the run menu and select run.

268
00:21:50,860 --> 00:21:55,200
And then we're in the numbers, tough class, so this is ask me, what class do I want to run?

269
00:21:55,210 --> 00:21:56,530
I want to run the numbers stuff.

270
00:21:56,620 --> 00:22:04,210
Now, if you click directly on this word, no stuff, you won't get an opportunity to specify the arguments

271
00:22:04,210 --> 00:22:05,890
that you may want to pass in.

272
00:22:06,040 --> 00:22:09,910
So if you want to be able to specify the arguments, you have to click on this arrow here.

273
00:22:10,980 --> 00:22:13,530
And then you have to skip down to edit.

274
00:22:13,770 --> 00:22:14,250
OK.

275
00:22:14,280 --> 00:22:19,920
So this will allow us to specify some more options in this case, the arguments that we want to pass

276
00:22:19,920 --> 00:22:25,170
so you can click on Edit and right here there's an area called program arguments.

277
00:22:25,170 --> 00:22:28,920
This is where we can pass in more arguments to the program.

278
00:22:29,130 --> 00:22:33,720
So here I can type in a number, even though it's going to show up as a string.

279
00:22:33,720 --> 00:22:37,800
Essentially, I'm I'm going to type in 30, OK?

280
00:22:38,130 --> 00:22:41,970
And now I can simply click run.

281
00:22:44,590 --> 00:22:47,230
And look what we get, you will be 45.

282
00:22:48,510 --> 00:22:50,310
Age in 15 years.

283
00:22:52,700 --> 00:22:59,810
OK, I guess I should have said you will be 45, maybe years of age in 15 years.

284
00:23:00,650 --> 00:23:06,770
Now if I run this again, I won't have to re specify the argument because it's already configured,

285
00:23:06,920 --> 00:23:12,410
so I can just click this run button here, or I could have clicked it up there as well.

286
00:23:12,440 --> 00:23:13,730
Any of those would have worked.

287
00:23:15,420 --> 00:23:16,150
All right, there we go.

288
00:23:16,170 --> 00:23:19,320
You will be 45 years of age in 15 years.

289
00:23:19,560 --> 00:23:26,940
So just to recap, I've passed in an argument that argument is a string, though.

290
00:23:27,210 --> 00:23:35,070
And so I need to use the integer pass and in order to convert that string into a number.

291
00:23:35,850 --> 00:23:41,910
And then once it's a number, I can do math on it, so I couldn't do that math directly on the string.

292
00:23:42,090 --> 00:23:44,550
And that's the whole reason why I did this.

293
00:23:44,820 --> 00:23:52,320
So just keep in mind that you are likely to encounter a number of situations where you will take some

294
00:23:52,320 --> 00:23:54,300
kind of input, typically numbers.

295
00:23:54,600 --> 00:24:00,510
But those numbers will be stored in strings and you will need to pass those strings into numbers.

296
00:24:00,750 --> 00:24:03,510
And this is one of the most convenient ways to do that.

297
00:24:03,630 --> 00:24:05,680
Now, this isn't the only way to do it, though.

298
00:24:05,700 --> 00:24:06,150
There are.

299
00:24:06,330 --> 00:24:10,710
There are a few other ways, but this is probably the most straightforward and the most common.

300
00:24:10,950 --> 00:24:14,340
OK, so make sure you really remember this.

301
00:24:14,850 --> 00:24:17,490
I'm telling you this tends to be needed.

302
00:24:17,490 --> 00:24:18,630
Pretty fair amount.

303
00:24:19,320 --> 00:24:19,650
All right.

304
00:24:19,650 --> 00:24:21,870
So I think that's going to wrap this up.

305
00:24:22,140 --> 00:24:30,900
Like I said, basically these these wrapper types are particularly useful when you need to pass a primitive

306
00:24:30,930 --> 00:24:35,340
to method that is expecting objects or vice versa.

307
00:24:35,640 --> 00:24:39,480
So with that, we'll close this lesson out and I'll see you in the next one.
