WEBVTT
1
00:00:00.690 --> 00:00:07.080
OK, so next up, we're going to talk about string concatenation, string concatenation is just a fancy

2
00:00:07.080 --> 00:00:13.950
way of saying putting text together string concatenation is an extremely common thing to have to do

3
00:00:13.950 --> 00:00:15.930
in programming all of the time.

4
00:00:16.230 --> 00:00:22.380
For example, any time you accept input from a user and then you want to spit out a message where you

5
00:00:22.380 --> 00:00:27.810
incorporate whatever it is that they typed in, you're probably going to be doing some type of formatting

6
00:00:27.810 --> 00:00:33.780
or string concatenation to combine your formatted text with the text that they entered.

7
00:00:33.810 --> 00:00:35.670
There are many other examples as well.

8
00:00:35.820 --> 00:00:39.660
So we'll take a quick look at how to do this in multiple ways in Java.

9
00:00:40.080 --> 00:00:45.570
All right, so turning back to the A.D., let's see if we can keep working in our learned strings class

10
00:00:45.570 --> 00:00:45.870
here.

11
00:00:46.260 --> 00:00:52.230
I think maybe we'll go ahead and just clear out what we had before, though, so I just selected that

12
00:00:52.230 --> 00:00:53.460
and then I'll just hit delete.

13
00:00:54.480 --> 00:00:54.960
All right.

14
00:00:54.990 --> 00:01:01.290
So let's first look at probably the simplest ways to concatenate text.

15
00:01:01.470 --> 00:01:08.190
We'll do this by creating a couple of strings as variables, so I'll create one string and I'll just

16
00:01:08.190 --> 00:01:14.010
call it text one because I again don't feel like thinking of fancy names for things right now.

17
00:01:14.490 --> 00:01:19.530
And we'll say this is my text one.

18
00:01:20.890 --> 00:01:24.940
And then we'll make another string and call it text two.

19
00:01:25.750 --> 00:01:29.590
And same thing, this is my text to.

20
00:01:30.640 --> 00:01:31.180
All right.

21
00:01:31.450 --> 00:01:37.150
So let's say we want to combine these two strings together and print them out so we can use our trusty

22
00:01:37.260 --> 00:01:43.360
Associati macro hit enter to expand that out to system that out that print line.

23
00:01:44.200 --> 00:01:48.070
And the first thing we can do is really just do this.

24
00:01:48.070 --> 00:01:56.980
We can type the two variable names, text one and then I like to put a space here, but a plus sign

25
00:01:57.280 --> 00:01:58.260
another space.

26
00:01:58.360 --> 00:01:59.800
The spaces are optional.

27
00:02:00.400 --> 00:02:05.650
Text two And if you'll recall from previous conversations I've stated in the past, I'd just like to

28
00:02:05.650 --> 00:02:10.720
have a little space between things like these plus signs just for readability.

29
00:02:11.170 --> 00:02:13.720
I think it looks a little busy without that space.

30
00:02:13.900 --> 00:02:17.190
All right, so let's go ahead and run this and see what we get.

31
00:02:20.930 --> 00:02:25.580
All right, there we go, so this is my next one with no space there, this is my text too.

32
00:02:25.910 --> 00:02:31.340
That's probably not what you would really want because you'd probably want to have a little space there.

33
00:02:31.580 --> 00:02:36.560
Obviously, the simplest way to put some space there would be to just put the space right there.

34
00:02:36.590 --> 00:02:42.680
Hard code the space into the second string, or you can put it on the first string.

35
00:02:42.680 --> 00:02:43.730
It doesn't really matter.

36
00:02:43.940 --> 00:02:48.530
So obviously, if we run this again, there will now be a space there.

37
00:02:49.100 --> 00:02:49.460
OK.

38
00:02:49.610 --> 00:02:52.550
So that's the simplest thing that you could probably do.

39
00:02:52.580 --> 00:02:54.560
However, there's a couple issues with this.

40
00:02:54.830 --> 00:03:01.490
If we had accepted this text to, for example, as input from the user, they may or may not have put

41
00:03:01.490 --> 00:03:02.420
a space there.

42
00:03:02.420 --> 00:03:05.450
And so that could be a little bit of an issue, right?

43
00:03:05.690 --> 00:03:09.590
How do we have a little more control over whether or not that space is needed?

44
00:03:09.890 --> 00:03:11.840
Well, actually, before we get to that.

45
00:03:11.930 --> 00:03:13.880
So let me show you a couple of other things we could do.

46
00:03:13.880 --> 00:03:15.380
I'm going to take that space out.

47
00:03:15.650 --> 00:03:22.910
We could combine some more strings and we could even combine these two variable strings with a literal

48
00:03:22.910 --> 00:03:25.910
so we could put a space in like this.

49
00:03:26.780 --> 00:03:31.550
OK, so text plus the space, plus the text.

50
00:03:31.550 --> 00:03:32.420
Let's run that.

51
00:03:34.560 --> 00:03:35.730
Yeah, and that's a little better.

52
00:03:35.940 --> 00:03:38.850
This is my next one, this is my text too, right?

53
00:03:38.940 --> 00:03:43.440
And so you can see here that you can actually just string together lots.

54
00:03:43.530 --> 00:03:44.370
No pun intended.

55
00:03:44.550 --> 00:03:46.830
Lots of strings with the plus sign.

56
00:03:46.830 --> 00:03:47.850
Just like this.

57
00:03:48.000 --> 00:03:50.220
OK, so you could just you could keep going.

58
00:03:52.730 --> 00:03:55.940
You can even put other things in there as well.

59
00:03:56.780 --> 00:03:58.010
All right, so there we go.

60
00:03:58.550 --> 00:04:01.490
Lots of space and everything's getting concatenated.

61
00:04:01.490 --> 00:04:02.210
Just fine.

62
00:04:02.630 --> 00:04:02.960
All right.

63
00:04:02.990 --> 00:04:06.820
So yeah, this this works fine and you'll see a lot of code.

64
00:04:06.830 --> 00:04:10.730
Just use the plus sign for small, simple concatenation.

65
00:04:10.850 --> 00:04:19.040
There are some perceived downsides, though, to using the plus sign to concatenate strings, depending

66
00:04:19.040 --> 00:04:20.240
on what you need to do.

67
00:04:21.560 --> 00:04:21.890
All right.

68
00:04:21.890 --> 00:04:27.620
So that's like I said, probably the simplest way to concatenate strings.

69
00:04:27.830 --> 00:04:34.460
Some things to be aware of, though, for just concatenating, let's say maybe two strings together

70
00:04:34.700 --> 00:04:39.380
and you're not doing anything fancy where you're going to have to keep doing it over and over and over

71
00:04:39.380 --> 00:04:41.030
again, like in a loop or something.

72
00:04:41.240 --> 00:04:48.860
This is this is OK if you know that you're going to need to concatenate a lot of strings together into

73
00:04:48.890 --> 00:04:51.260
like one massive string, for example.

74
00:04:51.470 --> 00:04:56.990
And it's maybe like going to either be more than two or three or you're going to have to keep doing

75
00:04:56.990 --> 00:05:00.950
it in some kind of a loop so that you can keep building something bigger and bigger.

76
00:05:01.130 --> 00:05:04.160
Do not use this approach of the plus sign.

77
00:05:04.160 --> 00:05:11.450
And the reason for that is because the plus sign approach to concatenating strings results.

78
00:05:11.630 --> 00:05:18.800
Well, if you're going to be doing it a lot, it results in a whole lot of string objects being created

79
00:05:18.800 --> 00:05:22.310
in memory every time it has to concatenate those strings together.

80
00:05:22.550 --> 00:05:27.900
And so that becomes very inefficient use of memory in the computer.

81
00:05:28.160 --> 00:05:33.560
And even though computers these days have a ton of memory with them, you'd be surprised you can still

82
00:05:33.560 --> 00:05:40.460
exhaust the allocated memory that the Java system itself is permitted to use by default on a computer.

83
00:05:40.880 --> 00:05:46.940
So this is fine for small, you know, couple of strings and you're not inside of any kind of a looping

84
00:05:46.940 --> 00:05:47.960
type of code.

85
00:05:48.200 --> 00:05:52.820
But if you're getting into loops and you're going to be doing it a lot, don't use this approach.

86
00:05:53.360 --> 00:05:53.690
All right.

87
00:05:53.690 --> 00:05:54.950
So that's one way.

88
00:05:55.370 --> 00:06:02.330
So I'm going to put the cursor here and make a new line and we'll make a couple more strings and we'll

89
00:06:02.330 --> 00:06:04.520
try concatenating in another way.

90
00:06:04.880 --> 00:06:10.700
So another way to do this, especially with this kind of simple case, might be.

91
00:06:10.880 --> 00:06:15.740
OK, so I'm going to do another print line here, and I'm going to reference text one.

92
00:06:15.740 --> 00:06:22.890
But this time I'm going to use a method that exists on the string class itself, since string is a class

93
00:06:22.890 --> 00:06:24.080
that has a lot of methods.

94
00:06:24.470 --> 00:06:30.350
So one of the methods on the string class is called Cone Cat Short for concatenate.

95
00:06:30.590 --> 00:06:36.230
And so we can call this method and it takes as input a second string.

96
00:06:36.230 --> 00:06:38.090
So it's a method of a string.

97
00:06:38.090 --> 00:06:45.710
So you have this text, this is my text one and you're saying, take this text and concatenate it with

98
00:06:46.370 --> 00:06:47.510
some more text.

99
00:06:47.720 --> 00:06:49.700
So in this case, text one dot concatenate.

100
00:06:49.700 --> 00:06:54.080
And then I will reference text to here just like that.

101
00:06:54.590 --> 00:06:59.720
And so that's just going to combine the text of text to with the text of text one.

102
00:07:00.260 --> 00:07:05.170
And so if we run this, in fact, let me let me just I'll just comment this out.

103
00:07:05.180 --> 00:07:09.890
I'm just leaving this one here, see that you can see the differences in these approaches.

104
00:07:11.280 --> 00:07:12.900
But I don't want that to run right now.

105
00:07:14.060 --> 00:07:15.140
Some renting this.

106
00:07:17.070 --> 00:07:22.140
OK, so we are getting the same output that we originally got with the first approach where there's

107
00:07:22.140 --> 00:07:23.160
no space here.

108
00:07:23.880 --> 00:07:29.190
And so obviously you end up with this situation again, where you need to decide, how do you want to

109
00:07:29.220 --> 00:07:31.500
get a little bit of space in here?

110
00:07:32.820 --> 00:07:37.110
If you are in that situation, you may not want to use this approach.

111
00:07:37.140 --> 00:07:41.110
There are some ways to do it, but they start to look a little hairy.

112
00:07:41.130 --> 00:07:44.400
So, for example, see, we could do.

113
00:07:46.810 --> 00:07:53.950
That but now you're basically just mixing this concatenation approach with the plus sign concatenation

114
00:07:53.950 --> 00:07:54.460
approach.

115
00:07:54.670 --> 00:07:55.840
It's a little bit weird.

116
00:07:56.050 --> 00:07:57.040
You could.

117
00:07:59.580 --> 00:08:00.720
You could do.

118
00:08:02.950 --> 00:08:08.290
You could daisy chain like this, which is kind of really bad.

119
00:08:08.560 --> 00:08:12.910
The reason this is kind of really bad is because now you've got all this nesting going on.

120
00:08:12.910 --> 00:08:17.290
Look at all these parentheses here that just starts to look difficult to read.

121
00:08:17.320 --> 00:08:21.040
It's kind of confusing looking as to what are what are we even doing here?

122
00:08:21.430 --> 00:08:26.280
I'll run it just to just to prove that this does work.

123
00:08:26.350 --> 00:08:27.520
But don't do this.

124
00:08:27.520 --> 00:08:29.110
This is bad code.

125
00:08:31.320 --> 00:08:31.590
All right.

126
00:08:31.620 --> 00:08:37.680
So, yeah, it works, you get the space, but it's difficult to read any anyone, including yourself

127
00:08:37.680 --> 00:08:42.690
who comes back and looks at this code might have to look at it for for a little for a few seconds longer

128
00:08:42.690 --> 00:08:48.120
to make sure they really get what's going on here, especially if this weren't a space.

129
00:08:48.120 --> 00:08:53.730
If this were not a space, if this was something else, you know, not space, you might have to really

130
00:08:53.730 --> 00:08:56.750
take some time to figure out what, what, what's going on here.

131
00:08:56.760 --> 00:08:58.230
So I don't recommend doing this.

132
00:08:58.500 --> 00:09:07.230
So if you're going to use the cat method, probably keep it short and sweet and simple just two strings

133
00:09:07.500 --> 00:09:11.040
getting concatenated together and don't try to be super fancy with it.

134
00:09:11.370 --> 00:09:15.450
Obviously, you can concatenate.

135
00:09:17.020 --> 00:09:18.010
A variable.

136
00:09:23.540 --> 00:09:28.710
Obviously, you can concatenate a variable with a string literal, as I'm doing here.

137
00:09:28.820 --> 00:09:30.350
Or you could flip this around.

138
00:09:31.860 --> 00:09:32.850
You could have.

139
00:09:34.770 --> 00:09:37.140
My string literal.

140
00:09:37.860 --> 00:09:39.580
OK, now watch this.

141
00:09:39.600 --> 00:09:44.460
Even though this is a literal, it is still a string and because it's a string, it still has methods

142
00:09:44.460 --> 00:09:44.760
on it.

143
00:09:44.760 --> 00:09:50.220
So this is going to look a little weird because I don't have the parentheses around the creation of

144
00:09:50.220 --> 00:09:51.640
this string object.

145
00:09:51.660 --> 00:09:56.820
However, I can hit period right there and I can still get all of the string methods.

146
00:09:57.030 --> 00:10:01.200
So here let me let me just finish this thought before I proceed.

147
00:10:02.280 --> 00:10:04.860
We'll concatenate that with text one.

148
00:10:05.160 --> 00:10:05.520
OK.

149
00:10:05.820 --> 00:10:13.080
So the way to look at this is that everything in these quotation marks becomes a string object.

150
00:10:13.080 --> 00:10:15.230
Literally, it does become a string object.

151
00:10:15.240 --> 00:10:20.970
And then once you've got that object, you can put period and then access all of the methods of the

152
00:10:20.970 --> 00:10:21.780
string class.

153
00:10:22.860 --> 00:10:27.270
OK, so I know that might look a little bit weird, but you can totally do that.

154
00:10:27.630 --> 00:10:32.190
And you could even come over here and then throw another literal and right here.

155
00:10:33.590 --> 00:10:36.530
Second string literal.

156
00:10:36.620 --> 00:10:37.460
So you can even.

157
00:10:39.330 --> 00:10:44.310
And I needed to close that, that that parentheses for the print line method there.

158
00:10:44.460 --> 00:10:45.740
So that's another thing too.

159
00:10:45.750 --> 00:10:51.870
I don't know if you saw that, but I didn't have my closing parentheses there for the print line method

160
00:10:52.050 --> 00:10:54.390
since every method needs parentheses, right?

161
00:10:54.390 --> 00:10:57.240
So this print line method had an opening parentheses.

162
00:10:57.570 --> 00:10:59.190
Then I created this cat method.

163
00:10:59.190 --> 00:11:04.290
It had a parentheses, but I needed a closing parentheses for the print line method.

164
00:11:06.200 --> 00:11:12.650
And now that little I don't know if you saw that, but this little red error there right there went

165
00:11:12.650 --> 00:11:13.220
away.

166
00:11:15.620 --> 00:11:23.390
All right, so the method is another way that you can do this, and in some ways it is potentially a

167
00:11:23.390 --> 00:11:26.420
little bit better than using the plus sign.

168
00:11:26.600 --> 00:11:31.340
But like I said, if you're only going to combine like a couple of strings, maybe three and you're

169
00:11:31.340 --> 00:11:33.890
not going to be in any loop, the plus signs, OK?

170
00:11:34.190 --> 00:11:38.510
You know, you don't have to wrack your brain forever trying to figure out what is the ultimate most

171
00:11:38.510 --> 00:11:41.180
efficient way to do this, but just be mindful.

172
00:11:41.630 --> 00:11:42.160
All right.

173
00:11:42.170 --> 00:11:44.270
So that's another way that you could do this.

174
00:11:44.300 --> 00:11:44.800
Let's see.

175
00:11:44.810 --> 00:11:48.470
Now we can get into a slightly fancier approach.

176
00:11:49.540 --> 00:11:58.150
OK, so I'll make make another line again, so as I said earlier, if you're going to be combining lots

177
00:11:58.300 --> 00:12:04.120
of strings together three, four or five, one hundred five hundred thousands, whatever, it's going

178
00:12:04.120 --> 00:12:05.800
to be more than two or three.

179
00:12:06.250 --> 00:12:10.840
There are better approaches than using the plus sign or this kind cat.

180
00:12:11.200 --> 00:12:16.570
One of the approaches you could use would be to use a class called string builder.

181
00:12:16.930 --> 00:12:24.160
So there is a class called string builder, which allows you to build long strings that don't have to

182
00:12:24.160 --> 00:12:30.460
be long, of course, but it's it's designed to allow you to to basically combine a lot of strings together.

183
00:12:30.850 --> 00:12:35.080
And the way that we can use that is there's a couple of ways here.

184
00:12:35.320 --> 00:12:39.880
First thing I'm going to do, I'm going to create a a variable, a string variable.

185
00:12:40.030 --> 00:12:42.300
Let's see final string.

186
00:12:42.310 --> 00:12:46.060
So this will hold on to whatever the final thing is.

187
00:12:46.510 --> 00:12:46.870
OK.

188
00:12:46.900 --> 00:12:48.370
And we'll start simple here.

189
00:12:48.580 --> 00:12:52.090
So we'll say final string equals new string.

190
00:12:53.280 --> 00:12:54.060
Filter.

191
00:12:55.260 --> 00:12:55.920
Dot.

192
00:12:57.530 --> 00:12:58.400
Append.

193
00:13:00.020 --> 00:13:02.030
And will append.

194
00:13:04.270 --> 00:13:05.470
That attend.

195
00:13:06.690 --> 00:13:07.740
Thanks to.

196
00:13:12.350 --> 00:13:12.700
OK.

197
00:13:13.490 --> 00:13:13.860
All right.

198
00:13:13.880 --> 00:13:19.040
And so now that we will have captured the output of this, we can just print that out.

199
00:13:19.490 --> 00:13:24.590
So we'll do another duty and then we'll print out the final string notice again.

200
00:13:24.590 --> 00:13:27.410
I did not type out the whole world word final string.

201
00:13:27.410 --> 00:13:29.840
I just typed like an f and and I and then I hit return.

202
00:13:30.680 --> 00:13:31.160
All right.

203
00:13:32.120 --> 00:13:33.110
We'll run this.

204
00:13:36.470 --> 00:13:40.940
OK, so here we have our output, this is my text one, this is my text too.

205
00:13:40.970 --> 00:13:47.390
So what what's happening here is first, we are creating an instance of this thing called string builder.

206
00:13:48.020 --> 00:13:56.060
So think of the string builder as a temporary holding tank where you can start to combine all your strings

207
00:13:56.060 --> 00:13:59.000
together, like a like a scratch pad, if you will.

208
00:13:59.030 --> 00:14:05.720
OK, so we're creating this scratch pad thing and then this string builder has a nice method on it called

209
00:14:05.720 --> 00:14:06.530
append.

210
00:14:07.160 --> 00:14:14.420
And you can just keep calling this method over and over and over again to append more and more text

211
00:14:14.750 --> 00:14:20.000
into this scratch pad, and the string builder will make sure that they all go together.

212
00:14:20.510 --> 00:14:20.990
OK.

213
00:14:21.170 --> 00:14:24.430
And so you can call this as many times as you like.

214
00:14:24.440 --> 00:14:30.080
We're doing that append here and this append method if you want to get a little more technical.

215
00:14:31.040 --> 00:14:38.360
This append method returns the same string builder that we were already using, and that's why you can

216
00:14:38.360 --> 00:14:40.280
keep calling Append on it.

217
00:14:40.430 --> 00:14:43.550
I don't know if that's fully making sense to you, but don't worry about it.

218
00:14:43.850 --> 00:14:48.110
Just know that this is the pattern for for for using this.

219
00:14:48.500 --> 00:14:48.920
OK.

220
00:14:49.190 --> 00:14:52.970
So, yeah, so you can call this a pin method as many times as you like.

221
00:14:53.270 --> 00:14:59.390
And when you're done appending the text, the only thing you need to do at the very end is to call two

222
00:14:59.420 --> 00:15:06.950
string, and that is an overwritten version of Object Dot to string that we have already learned about

223
00:15:06.950 --> 00:15:07.580
before.

224
00:15:07.730 --> 00:15:12.440
And this just tells the string builder, Hey, take everything that you've been tacking together and

225
00:15:12.440 --> 00:15:15.440
go ahead and spit it all out so that we can use it.

226
00:15:15.650 --> 00:15:17.540
So now this is easy to forget.

227
00:15:17.540 --> 00:15:24.170
But the A.D. likely won't let you forget it because if you don't have the two string method on the end

228
00:15:24.170 --> 00:15:24.770
here.

229
00:15:26.600 --> 00:15:34.520
This is an error, because the thing that comes out of the append method is a string builder and a string

230
00:15:34.520 --> 00:15:36.870
builder cannot be assigned to a string.

231
00:15:36.890 --> 00:15:42.860
In other words, we can't take a string builder and store a reference to a string builder inside of

232
00:15:42.860 --> 00:15:44.570
a variable for a string.

233
00:15:45.080 --> 00:15:47.420
Those are not the same data types.

234
00:15:47.690 --> 00:15:49.370
And that's why we're getting this error here.

235
00:15:49.370 --> 00:15:52.910
So that would be a hint that, oh, I forgot to call two string, right?

236
00:15:52.930 --> 00:15:57.610
So you have to go to the end of this and say to string, right?

237
00:15:57.740 --> 00:16:03.440
Because the two string method returns a string, and that's what this variable type is.

238
00:16:03.440 --> 00:16:03.950
String.

239
00:16:04.190 --> 00:16:04.640
OK.

240
00:16:05.270 --> 00:16:09.320
And then we can print the string out just like so.

241
00:16:09.830 --> 00:16:10.250
OK.

242
00:16:10.280 --> 00:16:16.820
So one thing you might like to do sometimes if you're going to use the append method is you may want

243
00:16:16.820 --> 00:16:20.150
to format the code a little bit to be a little more readable.

244
00:16:20.450 --> 00:16:22.640
It doesn't all have to be on the same line.

245
00:16:22.670 --> 00:16:30.980
I've mentioned earlier that although I like to format my code and have strategically placed spaces,

246
00:16:31.250 --> 00:16:35.930
the Java programming language for the most part, doesn't care about space.

247
00:16:36.170 --> 00:16:44.270
And so you can do something like this where you can put each of the append method calls on its own line

248
00:16:44.270 --> 00:16:47.990
just to make things a little easier to see what's happening here.

249
00:16:48.200 --> 00:16:53.850
So now, for example, you may still want to have that space in between text one and text two.

250
00:16:53.870 --> 00:17:01.550
So what you could do is put another line here and then do another append and then do a string literal

251
00:17:01.550 --> 00:17:02.600
just like that.

252
00:17:02.870 --> 00:17:03.350
OK.

253
00:17:03.500 --> 00:17:10.010
Just be aware that the period needs to always be there, because that's how you're kind of telling Java

254
00:17:10.010 --> 00:17:11.270
that you're about to call.

255
00:17:11.300 --> 00:17:14.540
That's one of the ways that you're telling Java that you're about to call another method.

256
00:17:14.870 --> 00:17:16.820
But the white space doesn't really matter.

257
00:17:17.810 --> 00:17:23.420
And I think that makes it a little easier to read, especially if you're going to be appending several

258
00:17:23.420 --> 00:17:29.210
strings together and mixing and matching literals and variables and things like I'm doing here.

259
00:17:31.030 --> 00:17:38.680
This would also be a more appropriate way to append really long strings where you might be inside of

260
00:17:38.680 --> 00:17:44.860
a loop or something like that because this is going to be much more efficient with the use of memory.

261
00:17:46.220 --> 00:17:50.290
Now, you might wonder, well, why wouldn't I just always use the string builder?

262
00:17:50.330 --> 00:17:51.590
And you absolutely can.

263
00:17:51.620 --> 00:17:53.840
It's it's it's a pretty good way to do it.

264
00:17:54.020 --> 00:17:59.090
Like I said earlier, though, in my own personal experience, like if I'm just appending literally

265
00:17:59.090 --> 00:18:06.050
like two strings, I probably am going to be a little lazy to even want to bother creating this new

266
00:18:06.050 --> 00:18:10.670
string builder and then calling the Dot to string method at the end.

267
00:18:11.060 --> 00:18:17.090
That's a little more set up than I probably would want to do, just to concatenate two strings.

268
00:18:17.360 --> 00:18:24.800
And so in that case, I'm probably either going to just use the plus sign or I'm going to use the contact

269
00:18:25.130 --> 00:18:25.760
method.

270
00:18:25.970 --> 00:18:30.920
It's really when I want to get just a little fancier or I know I'm going to be concatenating a little

271
00:18:30.920 --> 00:18:34.610
bit more than that, that I may decide to go with the string builder.

272
00:18:35.030 --> 00:18:40.790
OK, but yeah, the string builder is a fine choice in pretty much every case if you don't mind typing

273
00:18:40.790 --> 00:18:42.710
the little bit extra code there.

274
00:18:43.220 --> 00:18:46.070
OK, a couple of minor notes about the use of the string builder.

275
00:18:46.070 --> 00:18:52.940
By the way, the string builder constructor can take an input, by the way, I'm not using it here.

276
00:18:52.940 --> 00:18:58.220
I'm using the no ARG default constructor, but there's another constructor on the string builder that

277
00:18:58.220 --> 00:19:04.160
can take an input where you can tell it how large the final string should be.

278
00:19:04.520 --> 00:19:12.050
If you happen to know that, and what it will do with that information is it'll use it to allocate just

279
00:19:12.050 --> 00:19:18.830
the right amount of memory in the computer for the final string, like the final, fully concatenated

280
00:19:18.830 --> 00:19:19.100
thing.

281
00:19:19.280 --> 00:19:24.830
So the way you could do that, one way you could do that if you, if you really cared, is something

282
00:19:24.830 --> 00:19:26.150
like this you could do.

283
00:19:26.270 --> 00:19:30.110
Now we haven't learned this yet, but might as well learn a little bit about it right now.

284
00:19:30.920 --> 00:19:34.220
If you want to find out what's the final length of this going to be.

285
00:19:34.550 --> 00:19:39.680
You could take the length of text one, plus the length of text to plus one, right, because you have

286
00:19:39.680 --> 00:19:40.610
one space here.

287
00:19:40.940 --> 00:19:47.930
And so you can actually do that programmatically by calling text one dot length.

288
00:19:48.740 --> 00:19:56.870
So there's a method on string class which returns the an integer, which is the length or the size of

289
00:19:56.870 --> 00:19:57.440
the string.

290
00:19:57.590 --> 00:20:00.080
OK, so you could do this text one length.

291
00:20:01.050 --> 00:20:12.210
Plus, text to that length plus one in this particular case, if you knew that you're only ever going

292
00:20:12.210 --> 00:20:16.810
to append these three things here, that space plus those two, right?

293
00:20:17.130 --> 00:20:23.670
And now you've just made the string builder even more efficient than it, it would have been if you

294
00:20:23.670 --> 00:20:26.280
hadn't provided this if you don't provide that.

295
00:20:26.550 --> 00:20:33.150
It's still pretty good, but it will have to kind of allocate enough space.

296
00:20:33.150 --> 00:20:36.360
It'll take a good guess at how much it should take initially.

297
00:20:36.360 --> 00:20:38.850
And then if that's not enough, it'll reallocate more.

298
00:20:39.000 --> 00:20:42.570
And so that'll run a little slower if it ends up having to reallocate more.

299
00:20:42.690 --> 00:20:47.100
And if it doesn't have to reallocate more, in all likelihood, it will have taken more space than it

300
00:20:47.100 --> 00:20:48.960
in in memory than it needed.

301
00:20:49.110 --> 00:20:56.340
But by by specifying this, if you know it beforehand, or if you can know it beforehand it, it doesn't

302
00:20:56.340 --> 00:20:58.500
have to be too little or too much.

303
00:20:58.500 --> 00:21:00.150
It'll be exactly what it needs.

304
00:21:00.480 --> 00:21:02.950
So that's maybe something worth knowing.

305
00:21:02.970 --> 00:21:11.490
And then one last thing you may encounter older code, or maybe even unfortunately, not older code

306
00:21:11.670 --> 00:21:17.160
that concatenate with something that looks very similar to the string builder and that is called string

307
00:21:17.160 --> 00:21:17.790
buffer.

308
00:21:17.970 --> 00:21:19.770
Let me show you what that would look like.

309
00:21:21.040 --> 00:21:22.390
So I'll make another string.

310
00:21:22.810 --> 00:21:23.380
Other.

311
00:21:25.190 --> 00:21:31.190
Final string, and I'm going to make a string buffer.

312
00:21:35.680 --> 00:21:39.340
And I'm going to do the exact same thing as before.

313
00:21:39.820 --> 00:21:43.120
Text one died append.

314
00:21:44.570 --> 00:21:46.220
Text to.

315
00:21:48.710 --> 00:21:49.640
To string.

316
00:21:51.310 --> 00:21:53.530
And I'll make this a little more readable.

317
00:21:57.940 --> 00:22:00.430
And I'll go ahead and put the space in there as well.

318
00:22:03.020 --> 00:22:03.380
OK.

319
00:22:05.110 --> 00:22:13.090
This does the exact same thing as the string builder, in fact, I will even print this out.

320
00:22:13.990 --> 00:22:14.290
All right.

321
00:22:14.440 --> 00:22:18.010
And I won't comment that out, so I'll run both of these now.

322
00:22:19.850 --> 00:22:26.870
OK, so identical outputs, so you should be wondering, OK, this is weird, why are there two classes

323
00:22:26.870 --> 00:22:29.480
that do apparently the exact same thing?

324
00:22:30.440 --> 00:22:32.870
The answer to that question is really just that.

325
00:22:32.990 --> 00:22:40.370
The string buffer class is older, and obviously it does do the exact same thing as the string builder.

326
00:22:40.610 --> 00:22:48.440
It has a few little issues with it that have to do with running lines of code simultaneously or threads

327
00:22:48.680 --> 00:22:50.750
simultaneously in a computer.

328
00:22:50.900 --> 00:22:56.000
You know how you hear about your microprocessor having cores, multiple cores.

329
00:22:56.270 --> 00:23:00.140
Each of those cores is essentially a little microprocessor in and of itself.

330
00:23:00.410 --> 00:23:07.220
By having all of those additional cores in your computer, your computer is able to run more code simultaneously

331
00:23:07.400 --> 00:23:08.990
in what are called threads.

332
00:23:09.260 --> 00:23:15.020
So the string buffer class is what we refer to in the business as being thread safe.

333
00:23:15.290 --> 00:23:22.100
That just means that multiple threads are able to interact with an instance of the string buffer safely.

334
00:23:22.670 --> 00:23:30.050
However, this thread safety comes at the cost of performance because the extra precautions it has to

335
00:23:30.050 --> 00:23:34.490
take to protect its data from one thread to another makes it slower.

336
00:23:35.030 --> 00:23:41.390
And in the vast majority of cases, developers don't actually require that level of thread safety for

337
00:23:41.390 --> 00:23:42.920
classes like string buffer.

338
00:23:43.310 --> 00:23:51.230
So Sun Microsystems, the original creators of Java, eventually realized that it might be better to

339
00:23:51.230 --> 00:23:57.560
create another version of the string buffer that was not thread safe, since the vast majority of developers

340
00:23:57.560 --> 00:24:00.710
don't require thread safety for such a class anyway.

341
00:24:01.130 --> 00:24:03.410
And that became the string builder.

342
00:24:03.770 --> 00:24:11.330
And so today it is generally recommended that you use the string builder in most cases, unless you

343
00:24:11.330 --> 00:24:16.130
explicitly know that you require the thread safety of the string buffer.

344
00:24:16.520 --> 00:24:23.120
We won't be going into much about thread safety in this course because it's a beginning course, but

345
00:24:23.120 --> 00:24:29.630
in later courses that I will be offering, especially where we will get more in-depth into web development.

346
00:24:29.780 --> 00:24:35.810
We will be learning a lot more about thread safety so that you can determine when you may actually need

347
00:24:35.810 --> 00:24:37.310
to care about these things.

348
00:24:38.600 --> 00:24:45.260
OK, so there are a couple other ways that you could concatenate strings together.

349
00:24:46.160 --> 00:24:52.020
You could also simply format some strings, and we've seen a little sample of that before.

350
00:24:52.040 --> 00:24:56.630
So if we did system dot our dot format.

351
00:24:57.950 --> 00:25:03.740
We could do something like percent as space, percent as.

352
00:25:05.090 --> 00:25:05.860
Karma.

353
00:25:07.660 --> 00:25:10.450
Text one comma text to.

354
00:25:11.940 --> 00:25:22.980
OK, so what this is going to do is it's going to format this string literal here, and it's going to

355
00:25:22.980 --> 00:25:29.580
replace the percent S's with whatever is in each of the corresponding variables.

356
00:25:29.940 --> 00:25:35.430
And it's going to take everything that isn't eight percent something and print that literally.

357
00:25:35.700 --> 00:25:43.710
And so since I have a little space in between the percent S's, that literal space would remain there

358
00:25:43.710 --> 00:25:47.880
while the percent S's would get replaced with the text one in text two.

359
00:25:48.210 --> 00:25:55.610
So actually, some of you may prefer this approach in some ways because it is highly efficient looking,

360
00:25:55.620 --> 00:25:55.930
right?

361
00:25:55.950 --> 00:26:03.240
I mean, it's pretty short line of code versus all of this and all of this.

362
00:26:03.360 --> 00:26:11.580
However, this is actually more equivalent to what we did up here, where we just combined a static

363
00:26:11.760 --> 00:26:15.930
two strings and, you know, put a little space in there or whatever.

364
00:26:17.540 --> 00:26:24.650
So obviously, this would not be useful if you didn't know beforehand how many strings you needed to

365
00:26:24.650 --> 00:26:25.460
concatenate.

366
00:26:25.640 --> 00:26:29.210
This is only useful if you knew exactly how many strings your concatenating.

367
00:26:30.020 --> 00:26:36.230
But then again, in order to use string builder in its most optimal way, you probably need to know

368
00:26:36.230 --> 00:26:41.180
how many strings you're going to concatenate anyway so that you can allocate the exact capacity for

369
00:26:41.180 --> 00:26:44.390
the memory if you want to be like the most optimum.

370
00:26:45.230 --> 00:26:45.610
All right.

371
00:26:45.680 --> 00:26:50.900
And then there's another way to do this where this approach is actually going to print to the screen,

372
00:26:50.900 --> 00:26:56.060
but you might want to just capture the output of this into a string and then do something with that

373
00:26:56.060 --> 00:26:56.570
later.

374
00:26:56.810 --> 00:26:58.400
So you could do that as well.

375
00:26:59.560 --> 00:27:06.670
You could say string that one more final string because I'm running out of names for strings here,

376
00:27:06.940 --> 00:27:07.750
string variables.

377
00:27:08.110 --> 00:27:15.520
And then there's a method on the string class called format and this format method of string works just

378
00:27:15.520 --> 00:27:18.580
like the format here on the string system that out.

379
00:27:18.760 --> 00:27:22.930
So again, we can pass into it a string literal.

380
00:27:25.110 --> 00:27:29.730
Just like that comma, text, one comma text two.

381
00:27:30.480 --> 00:27:38.730
And now if I do an essay, you t four system out that print line and then I print this variable here.

382
00:27:40.360 --> 00:27:45.850
Oh, and one thing we have to keep in mind now, if we're going to do this because we've got this system

383
00:27:45.850 --> 00:27:55.060
that out that format here, if we want a new line between this line printed out and in this line here,

384
00:27:55.060 --> 00:28:03.400
we will need to put a backslash in and that just tells the format method to make a new line.

385
00:28:03.410 --> 00:28:06.270
I hit return after you print out this line.

386
00:28:06.280 --> 00:28:11.740
Otherwise, what comes out on this line and what comes out on this line will be together on the same

387
00:28:11.740 --> 00:28:12.100
line.

388
00:28:12.370 --> 00:28:14.440
OK, so if we've run this now?

389
00:28:15.750 --> 00:28:16.390
There we go.

390
00:28:16.410 --> 00:28:20.140
So we get a whole lot of duplication in multiple ways.

391
00:28:20.160 --> 00:28:20.490
Right.

392
00:28:20.490 --> 00:28:23.010
So we've got this line here.

393
00:28:23.490 --> 00:28:28.140
Now the print line method does automatically make a new line at the end of it.

394
00:28:28.350 --> 00:28:34.560
But the format method does not make a new line, and that's why we had to put this backslash in here.

395
00:28:34.770 --> 00:28:35.220
OK.

396
00:28:35.610 --> 00:28:40.350
So this last line corresponds to line 25.

397
00:28:40.770 --> 00:28:44.970
The second to last line corresponds to line 23.

398
00:28:45.300 --> 00:28:49.350
And then this is the second line here.

399
00:28:50.740 --> 00:28:53.200
And then the first line.

400
00:28:54.460 --> 00:28:54.940
Here.

401
00:28:57.980 --> 00:29:05.960
OK, so now you've had a chance to see more multiple ways of combining text strings together, and you've

402
00:29:05.960 --> 00:29:07.370
got some good options here.

403
00:29:07.700 --> 00:29:12.410
So now in the next lesson, we'll dig into even more things that you can do with text.

404
00:29:12.410 --> 00:29:13.310
There's so much.

405
00:29:13.610 --> 00:29:14.660
I'll see you in the next one.
