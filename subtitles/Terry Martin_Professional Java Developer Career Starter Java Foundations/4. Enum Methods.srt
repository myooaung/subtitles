1
00:00:00,150 --> 00:00:07,830
All right, so in the last lesson, we learned that enemies inherit a built in method called ordinal,

2
00:00:08,040 --> 00:00:14,040
which conveys the order in which the in-room constants exist or are defined.

3
00:00:14,400 --> 00:00:21,960
And although you need to be very careful when using this, it can be at times a really useful feature

4
00:00:21,960 --> 00:00:29,490
of an enum, as we see here in that we're able to use it to derive a value from the various constants.

5
00:00:29,730 --> 00:00:37,170
And then we also ended up using the newer version of the Java switch in its expression form so that

6
00:00:37,170 --> 00:00:45,720
we could convert the values of Jack, Queen and King to a 10 and all other values using the default

7
00:00:45,750 --> 00:00:52,080
here to the natural ordinal value of the Enum plus one.

8
00:00:53,070 --> 00:00:57,150
So now I want to show you something else that's kind of neat within MS.

9
00:00:57,270 --> 00:01:02,380
So I've mentioned now a number of times that enemies really are just a special form of class.

10
00:01:02,700 --> 00:01:07,590
But the key thing for you to keep in mind here is that they are a type of class.

11
00:01:07,590 --> 00:01:14,640
And so many of the things that we've learned that we can do with a class can be done with an enum as

12
00:01:14,640 --> 00:01:14,970
well.

13
00:01:15,180 --> 00:01:19,050
So to prove that point, I want to show you something kind of neat.

14
00:01:19,530 --> 00:01:21,690
So here's something I kind of want to show you.

15
00:01:21,690 --> 00:01:22,920
Here's a line of thinking.

16
00:01:23,460 --> 00:01:29,010
We've got this get value method here that is currently living on the card class, right?

17
00:01:29,460 --> 00:01:32,220
But what does it actually do?

18
00:01:32,730 --> 00:01:42,000
It accesses the information about the rank of that card, and then it basically just translates that

19
00:01:42,000 --> 00:01:43,710
rank into a value.

20
00:01:44,010 --> 00:01:52,620
Now, one concept with object orientation is that you want your methods or your behavior in object oriented

21
00:01:52,620 --> 00:01:53,640
terminology.

22
00:01:53,760 --> 00:02:02,520
You want your methods or behavior to live as closely as possible to the data that they work with typically.

23
00:02:02,560 --> 00:02:05,160
OK, so what does that actually mean?

24
00:02:05,550 --> 00:02:12,360
In this particular case, the data that this method get value needs is a rank, right?

25
00:02:12,510 --> 00:02:16,890
And with that rank, that's basically the input into this method.

26
00:02:16,890 --> 00:02:23,970
Even though we're not technically passing an input in, but it's getting this rank from outside of the

27
00:02:23,970 --> 00:02:25,260
method itself, right?

28
00:02:25,380 --> 00:02:30,180
It's pulling that in from the surrounding object or class, right?

29
00:02:30,330 --> 00:02:34,290
And then it's translating that rank into a value.

30
00:02:34,320 --> 00:02:40,770
So here are the actual rank constants, if you will, and it's converting that either into a 10 or into

31
00:02:40,770 --> 00:02:44,970
whatever value the the number card has, right the face value of the card.

32
00:02:45,060 --> 00:02:47,040
So there's something about this.

33
00:02:47,220 --> 00:02:50,670
Now we're doing this on the card class itself.

34
00:02:50,670 --> 00:02:57,630
But can you think of anywhere else more fundamental of where this rank data actually comes from?

35
00:02:58,530 --> 00:03:04,800
So this rank data actually is coming from the rank class itself, right?

36
00:03:04,800 --> 00:03:07,080
The rank enum sorry itself.

37
00:03:07,410 --> 00:03:15,660
And because enemies are classes, one of the tricks that they can do which they have in common with

38
00:03:15,660 --> 00:03:20,250
regular classes is that an enum can have methods.

39
00:03:20,970 --> 00:03:23,850
So do you kind of see where I'm going with this?

40
00:03:24,270 --> 00:03:30,510
If one of the object oriented best practices or principles is that you want your behavior, which has

41
00:03:30,510 --> 00:03:34,390
methods to be as close as possible to their data?

42
00:03:34,410 --> 00:03:34,680
Right.

43
00:03:34,680 --> 00:03:36,510
The data that they work with?

44
00:03:36,570 --> 00:03:42,090
Well, then what would happen if we could basically take this method here?

45
00:03:43,860 --> 00:03:48,840
And put it on the rank enum itself.

46
00:03:49,110 --> 00:03:50,640
Let's see what that might look like.

47
00:03:51,150 --> 00:03:58,320
So I'm literally just going over here to the rank class, and I'm going to put a couple of spaces here

48
00:03:58,890 --> 00:04:01,620
and then I'm going to start off by just pasting.

49
00:04:03,030 --> 00:04:03,340
All right.

50
00:04:03,360 --> 00:04:08,670
Now when I do that, I do get a couple of little red marks here because it doesn't quite know what I'm

51
00:04:08,670 --> 00:04:10,650
talking about in a couple of cases.

52
00:04:10,920 --> 00:04:20,850
Online 19, I'm getting a red mark for the word rank because there is no property on this enum called

53
00:04:20,850 --> 00:04:22,050
rank right.

54
00:04:22,410 --> 00:04:30,870
However, when I'm working with a method of an enum, the instance of this enum, which would really

55
00:04:30,870 --> 00:04:36,630
be any of these values here in this case innately would hold the rank.

56
00:04:36,660 --> 00:04:37,950
I'll try to show you what I mean.

57
00:04:38,160 --> 00:04:43,620
So if we want this to work, we can start off by simply removing the word rank.

58
00:04:43,620 --> 00:04:52,230
Because let me put it this way, when this code is executing inside of an enum, the rank is the entire

59
00:04:52,230 --> 00:04:53,710
object itself, right?

60
00:04:53,790 --> 00:04:56,170
I mean, this is the rank class.

61
00:04:56,170 --> 00:05:01,680
So each of these constants here is an actual instance of a rank.

62
00:05:02,070 --> 00:05:11,880
And if we could call a get value method on an instance of an enum, that would mean that that instance

63
00:05:11,880 --> 00:05:17,610
itself is a rank, which means we would not have to say this does not rank.

64
00:05:18,390 --> 00:05:21,690
We could simply say this.

65
00:05:22,260 --> 00:05:24,150
OK, now the keyword.

66
00:05:24,150 --> 00:05:31,770
This means the instance of the object that we are dealing with at this moment.

67
00:05:31,950 --> 00:05:32,400
OK.

68
00:05:32,520 --> 00:05:38,400
And I can I can already hear some of you are listening to what I'm saying, and it's not meaning anything.

69
00:05:38,400 --> 00:05:40,750
So I promise you, I'm going to drill in on this.

70
00:05:40,770 --> 00:05:41,100
OK.

71
00:05:41,250 --> 00:05:46,620
So let me let me finish fixing the errors here, and then we'll write a little bit of code to use this,

72
00:05:46,620 --> 00:05:48,420
and then I'll try to make it more clear.

73
00:05:48,780 --> 00:05:49,170
All right.

74
00:05:49,440 --> 00:05:49,680
All right.

75
00:05:49,680 --> 00:05:52,740
So we can switch on this instance.

76
00:05:52,750 --> 00:05:58,140
So in this case, this would mean whichever one of these constants.

77
00:05:59,110 --> 00:06:03,800
We are working with in some other code, in another class, OK?

78
00:06:04,820 --> 00:06:10,320
Or each of these things would be an instance of the Enum.

79
00:06:10,350 --> 00:06:10,790
OK.

80
00:06:12,240 --> 00:06:18,390
Now we need to fix this little bit here as well, and to do that, since this code would be running

81
00:06:18,390 --> 00:06:22,230
inside of an actual instance of an enum.

82
00:06:23,070 --> 00:06:30,500
And we know that instances of the Enum have or inherit a method called ordinal ordinal.

83
00:06:30,960 --> 00:06:33,790
Then we don't need this or rank.

84
00:06:33,810 --> 00:06:35,430
We can just get rid of these

85
00:06:38,310 --> 00:06:48,290
and just use the the ordinal method, which is essentially inherited by the instance of the enum itself.

86
00:06:48,300 --> 00:06:48,660
OK?

87
00:06:50,520 --> 00:06:52,440
So that's why we don't have any error now.

88
00:06:52,950 --> 00:06:53,190
All right.

89
00:06:53,190 --> 00:06:55,020
So let's see what this can look like.

90
00:06:55,030 --> 00:07:01,320
So to do that, we're going to create a test for the rank enum itself, and I'm going to do that by

91
00:07:01,320 --> 00:07:02,870
doing a command shift T.

92
00:07:04,020 --> 00:07:10,950
And then I will choose create new test and I will accept all of the defaults and click, OK.

93
00:07:12,760 --> 00:07:13,210
All right.

94
00:07:13,810 --> 00:07:20,170
And now I'll do a command in four Windows Linux, you'll have to right click, I think, right click,

95
00:07:20,170 --> 00:07:23,890
you know, just somewhere inside of the class on an empty space somewhere.

96
00:07:24,460 --> 00:07:28,570
Mac users can do command in and then choose test method.

97
00:07:29,170 --> 00:07:29,600
All right.

98
00:07:29,800 --> 00:07:31,180
So we've got a test method here.

99
00:07:31,330 --> 00:07:33,090
So let's just play around a little bit.

100
00:07:33,100 --> 00:07:35,710
Let's just see what happens if I don't know.

101
00:07:36,130 --> 00:07:39,610
For right now, I'm going to just name this something kind of slightly throwaway.

102
00:07:39,640 --> 00:07:42,580
Get value of king.

103
00:07:44,230 --> 00:07:51,430
OK, so what I will do here is I will assert equals I'm going to assert that the value of a king is

104
00:07:51,430 --> 00:07:52,180
a 10.

105
00:07:53,020 --> 00:08:03,070
And then the way I will actually get this is I will refer to the rank enum king dot get value just like

106
00:08:03,070 --> 00:08:03,400
that.

107
00:08:03,580 --> 00:08:04,000
OK.

108
00:08:04,950 --> 00:08:15,150
Now that I've copied the get value method onto the rank class, every instance of the rank inherits

109
00:08:15,150 --> 00:08:22,380
this, so let me show you in some measure code, what another way of looking at at this, OK?

110
00:08:22,560 --> 00:08:26,870
To help you to understand what that this keyword was doing, OK?

111
00:08:27,450 --> 00:08:39,810
This instance here ranking you might think of it a lot, like saying something like this rank king equals

112
00:08:39,810 --> 00:08:41,280
new rank.

113
00:08:43,820 --> 00:08:48,170
King, you might think of.

114
00:08:49,620 --> 00:08:56,260
This as being kind of equivalent to this.

115
00:08:56,280 --> 00:08:56,820
OK.

116
00:08:57,630 --> 00:08:59,460
That's one way you could think of it.

117
00:08:59,640 --> 00:09:05,670
And so you could imagine that there are all of these instances of inhumane.

118
00:09:06,480 --> 00:09:10,080
I'll make one more, by the way, let me show you another little neat trick here.

119
00:09:10,140 --> 00:09:12,770
I'm full a little neat tricks with the aid, OK?

120
00:09:13,050 --> 00:09:15,090
I like short shortcuts for the aid.

121
00:09:15,210 --> 00:09:17,020
And sometimes I forget about them myself.

122
00:09:17,040 --> 00:09:19,770
I just was changing this queen here and here.

123
00:09:19,770 --> 00:09:23,850
And then I remembered, Oh, wait a minute, there's a slightly better or more efficient way for me

124
00:09:23,850 --> 00:09:30,300
to do that, so I can double click on this king here and then I can hold down on option shift and double

125
00:09:30,300 --> 00:09:31,500
click on this king here.

126
00:09:31,500 --> 00:09:37,350
And now I've selected both kings at the same time, and I can change them both at the same time.

127
00:09:37,470 --> 00:09:44,280
So watch this J A C K So I'm typing in two places at once so that I can change that.

128
00:09:44,370 --> 00:09:48,750
And now to get rid of these double cursors, I can just hit escape buttons.

129
00:09:49,200 --> 00:09:49,650
All right.

130
00:09:49,920 --> 00:09:57,600
So anyway, these things here, these instances, these would be.

131
00:10:00,110 --> 00:10:02,000
These guys here, OK?

132
00:10:02,300 --> 00:10:03,200
That's what these are.

133
00:10:03,320 --> 00:10:11,480
So when we're defining these constants here, what we're basically doing is creating a shorthand for

134
00:10:11,570 --> 00:10:14,510
something kind of equivalent to this.

135
00:10:14,810 --> 00:10:19,610
OK, if that helps you a little bit to understand a little bit better, what's going on, OK?

136
00:10:19,820 --> 00:10:27,140
It's just like some weird compiler magic, some compiler voodoo that the creators of Java have implemented

137
00:10:27,140 --> 00:10:29,150
in order to allow us to have enemies.

138
00:10:29,150 --> 00:10:33,470
By the way, let me say enemies have not existed in Java from the beginning.

139
00:10:33,470 --> 00:10:37,910
I think they came about in version Java five, if I'm not mistaken.

140
00:10:38,060 --> 00:10:43,460
And they were kind of a big deal because there are other languages that already had this notion of an

141
00:10:43,460 --> 00:10:47,120
enum and prior to having proper enemies.

142
00:10:47,390 --> 00:10:54,230
If Java developers wanted to have something like this with, you know, type safe, tightly constrained

143
00:10:54,740 --> 00:11:02,870
objects that we could use in places like where we're using it here, we had to create classes and then

144
00:11:02,870 --> 00:11:08,780
go through a bunch of nonsense, and it still wasn't quite as good as what you get with an actual proper

145
00:11:08,780 --> 00:11:09,920
enum type.

146
00:11:09,950 --> 00:11:10,370
OK.

147
00:11:10,610 --> 00:11:13,280
So just a little little history on iTunes there.

148
00:11:13,520 --> 00:11:13,830
All right.

149
00:11:13,850 --> 00:11:20,510
So anyway, hopefully by now you understand this approach to creating an instance of an object.

150
00:11:20,660 --> 00:11:26,720
Now, don't be alarmed by the fact that here I've chosen to name the instances in all caps.

151
00:11:26,870 --> 00:11:34,440
That's just in keeping with the convention of Enemies, which are sort of modeled off of constants anyway.

152
00:11:34,460 --> 00:11:40,340
But other than that, the, you know, you could maybe think of them as just regular instances of some

153
00:11:40,550 --> 00:11:46,220
class and also ignore the fact that I chose to pretend like there's some kind of a constant that takes

154
00:11:46,220 --> 00:11:46,730
a string.

155
00:11:46,880 --> 00:11:51,830
This is just me sort of giving you a mental picture, a mental model to work with.

156
00:11:51,890 --> 00:11:55,250
This isn't literally how informs exactly work, though.

157
00:11:55,250 --> 00:11:57,770
It's not too far off, to be honest with you.

158
00:11:57,950 --> 00:12:04,310
It actually isn't too far off because internally enemies have an internal property called name.

159
00:12:04,550 --> 00:12:13,670
And this this constant that we are defining here, these constants here actually end up being treated

160
00:12:13,670 --> 00:12:20,780
as strings that get stored inside of an internal property of an instance which is called name.

161
00:12:20,900 --> 00:12:27,020
So you really can pretty much think of venoms as being something along this, these lines here.

162
00:12:27,110 --> 00:12:27,470
All right.

163
00:12:27,920 --> 00:12:31,850
So you can think of it as these instances of an object, right?

164
00:12:32,270 --> 00:12:35,990
Now let's look at how this get value method works.

165
00:12:35,990 --> 00:12:39,290
And in fact, you know what I'm going to I'm going to copy this.

166
00:12:40,690 --> 00:12:44,500
I'm going to copy this as a little gentle reminder.

167
00:12:45,430 --> 00:12:52,360
And we're going to jump in to this get value method here, and I'm going to just paste paste that there.

168
00:12:52,360 --> 00:12:55,040
So you have a little reference point, OK?

169
00:12:55,360 --> 00:13:00,260
So let me explain the this keyword and how it's being used here.

170
00:13:00,280 --> 00:13:00,760
OK.

171
00:13:01,060 --> 00:13:05,170
So when we call get value, in fact, hold on a second here.

172
00:13:05,170 --> 00:13:13,120
Let me even let's even bring let's even bring this line over as well so we can look at that to.

173
00:13:17,960 --> 00:13:19,580
I'll just bring it in as a comment.

174
00:13:19,850 --> 00:13:20,240
All right.

175
00:13:21,530 --> 00:13:23,810
There we brought everybody to the party now.

176
00:13:24,020 --> 00:13:24,430
OK.

177
00:13:24,500 --> 00:13:33,200
So when we call get value like we're doing here from somewhere other than in this class, especially

178
00:13:33,320 --> 00:13:34,670
the thread comes in here.

179
00:13:34,910 --> 00:13:36,620
So what is it actually in, though?

180
00:13:36,860 --> 00:13:39,650
Well, it's inside of an instance.

181
00:13:39,950 --> 00:13:41,660
It's inside of an instance.

182
00:13:42,410 --> 00:13:44,840
Like it could be this instance right here, right?

183
00:13:44,990 --> 00:13:47,090
So you're inside of an actual object?

184
00:13:47,120 --> 00:13:47,480
Right?

185
00:13:47,720 --> 00:13:54,140
And now you're just calling the get value method of that particular object right?

186
00:13:54,890 --> 00:14:03,170
And so when the thread gets down here, do switch this the word this refers to.

187
00:14:04,300 --> 00:14:07,960
This instance, whatever instance you happen to be in.

188
00:14:08,170 --> 00:14:16,660
So in this particular case, if we were calling ranking get value, then that would mean we are in the

189
00:14:16,660 --> 00:14:23,590
get value method of this instance of the king object.

190
00:14:23,620 --> 00:14:23,990
OK.

191
00:14:24,010 --> 00:14:26,110
Or of the King Enum, if you will.

192
00:14:26,440 --> 00:14:26,920
OK.

193
00:14:27,190 --> 00:14:35,080
And this instance of the king object will have certain properties that it has inherited or that have

194
00:14:35,080 --> 00:14:36,340
been set on it.

195
00:14:36,460 --> 00:14:36,880
OK.

196
00:14:37,060 --> 00:14:45,700
So one of the properties that is set on the king is its ordinal value, right, which we get out of

197
00:14:45,700 --> 00:14:48,130
it from the ordinal method.

198
00:14:48,130 --> 00:14:51,000
Now that's set by magic as far as I'm concerned, right?

199
00:14:51,010 --> 00:14:58,900
Like, we don't set that somehow when the compiler is building is compiling and building these instances,

200
00:14:59,170 --> 00:15:05,980
it's keeping track, I suppose, of the order in which these constants are defined and then it's somehow

201
00:15:05,980 --> 00:15:08,920
setting those on these instances.

202
00:15:09,490 --> 00:15:10,750
Well, actually, I should back up.

203
00:15:10,870 --> 00:15:13,780
I don't know if that's happening at compile time or at runtime or whatever.

204
00:15:13,830 --> 00:15:15,550
And right now, I don't really care.

205
00:15:15,760 --> 00:15:22,270
But somehow that that ordinal value is being associated with each of these instances at some point.

206
00:15:22,300 --> 00:15:22,610
OK.

207
00:15:22,900 --> 00:15:28,220
And that will be stored on each of the individual instances, though.

208
00:15:28,300 --> 00:15:28,810
OK.

209
00:15:29,200 --> 00:15:38,350
Now, when we call, switch and pass this in a certain level of Java, magic is happening for the Switch

210
00:15:38,350 --> 00:15:47,710
statement to basically summarize what each and the essence of an instance of an enum is OK.

211
00:15:47,800 --> 00:15:55,910
So for all I know, it might just be using the actual string name of the of the enum itself.

212
00:15:55,930 --> 00:15:59,500
OK, that that might be what it's doing, or it might be a little fancier than that.

213
00:15:59,710 --> 00:16:05,050
But this this here refers to this entire instance of an enum.

214
00:16:05,350 --> 00:16:05,940
Let's see.

215
00:16:05,950 --> 00:16:07,260
And then OK.

216
00:16:07,270 --> 00:16:14,980
So then when we get down here to calling ordinal, this is working because again, each instance of

217
00:16:14,980 --> 00:16:19,360
the enum inherits the ordinal method.

218
00:16:19,510 --> 00:16:19,960
OK.

219
00:16:19,990 --> 00:16:27,280
So as far as this code is concerned, this is just a class and an instance of that class.

220
00:16:27,430 --> 00:16:27,850
OK.

221
00:16:28,120 --> 00:16:29,980
I've probably over explained it by now.

222
00:16:29,980 --> 00:16:31,750
I hope I have at least OK.

223
00:16:32,080 --> 00:16:34,300
So hopefully that's making sense to you.

224
00:16:35,080 --> 00:16:38,080
And obviously, you know, you've seen the word this before.

225
00:16:38,170 --> 00:16:45,280
Now, I haven't spent a ton of time on it, but it always will refer to the current instance of the

226
00:16:45,280 --> 00:16:48,610
object that the word this is inside of a OK.

227
00:16:48,630 --> 00:16:56,040
So in this case, if we were calling King Typekit value, then this would refer to the king instance.

228
00:16:56,050 --> 00:17:03,280
OK, if we were calling ranked queen get value, then the word this would be referring to that object,

229
00:17:03,280 --> 00:17:04,610
the queen object.

230
00:17:04,630 --> 00:17:04,990
OK.

231
00:17:05,380 --> 00:17:05,710
All right.

232
00:17:05,800 --> 00:17:06,760
Let's see here.

233
00:17:06,760 --> 00:17:07,420
So.

234
00:17:07,420 --> 00:17:11,470
Oh, now let's jump back over to that test because I never actually ran it, did I?

235
00:17:11,500 --> 00:17:13,000
All right, so let's run this guy.

236
00:17:14,130 --> 00:17:14,470
All right.

237
00:17:14,490 --> 00:17:18,420
And so that passes as we should have expected that it would.

238
00:17:18,720 --> 00:17:26,220
So now that we have implemented the get value method directly on the Enum, let's see what the implications

239
00:17:26,220 --> 00:17:28,650
may be for our card class.

240
00:17:29,010 --> 00:17:35,250
So if we jump back over to the card class now, this means that maybe we could do some things so I can

241
00:17:35,250 --> 00:17:36,900
see a couple of options here.

242
00:17:37,230 --> 00:17:46,500
One is that we could consider simplifying the get value method on the card class and do something like

243
00:17:46,500 --> 00:17:50,950
this return this rank.

244
00:17:51,010 --> 00:17:52,620
Does it get value?

245
00:17:53,340 --> 00:18:01,010
So basically here we're just delegating the get value call down to the lower level, get value, call

246
00:18:01,020 --> 00:18:04,270
OK, and to prove that this should still work.

247
00:18:04,290 --> 00:18:12,540
Now, if we jump over to the test for the card itself, we should be able to run all of these tests

248
00:18:12,540 --> 00:18:14,850
and they should all still pass.

249
00:18:15,120 --> 00:18:15,900
So let's see.

250
00:18:16,320 --> 00:18:18,710
Yeah, they all still still work, right?

251
00:18:19,170 --> 00:18:24,960
So just to reiterate the point here, I have two points that I want to reiterate.

252
00:18:25,260 --> 00:18:32,250
One is that enemies are essentially just special classes, and because they are special classes, they

253
00:18:32,250 --> 00:18:37,110
do share a few of the same capabilities as a class.

254
00:18:37,680 --> 00:18:41,820
Chief among them is that you can put methods on them.

255
00:18:42,270 --> 00:18:42,710
OK.

256
00:18:43,140 --> 00:18:51,540
And then the other idea that I want to reiterate is the idea that you'll usually want to keep your methods

257
00:18:51,810 --> 00:18:55,680
as close to the data that they work with as possible.

258
00:18:55,710 --> 00:19:03,210
OK, so here in this case, we started off with a method living on the card class, but you can now

259
00:19:03,210 --> 00:19:11,790
see that the data that the get value method in the card class needed was really not data that's directly

260
00:19:11,790 --> 00:19:12,890
on the card class.

261
00:19:12,900 --> 00:19:17,850
It's actually data that's a little lower one level lower in the rank class.

262
00:19:18,060 --> 00:19:25,020
So that's why we were able to just basically take this whole method and push it down one level, if

263
00:19:25,020 --> 00:19:32,920
you will, to the rank class and with very minimal changes, that method still works, OK?

264
00:19:32,940 --> 00:19:37,020
And now it's arguably a tiny bit more efficient as well.

265
00:19:37,110 --> 00:19:37,590
OK.

266
00:19:37,620 --> 00:19:45,240
So I've seen developers who would put almost every single method that they needed in an entire program,

267
00:19:45,240 --> 00:19:53,460
all in like one class, even though the data that those various methods were working with may have been

268
00:19:53,460 --> 00:19:55,980
in various lower level classes.

269
00:19:56,160 --> 00:19:58,320
And that's a really bad idea.

270
00:19:58,560 --> 00:20:04,710
It violates certain principles of object orientation, such as encapsulation, where you really want

271
00:20:04,710 --> 00:20:12,810
to hide your data within the classes where that data pertains the most and not let that data leak out

272
00:20:12,960 --> 00:20:14,870
until it's actually needed.

273
00:20:14,880 --> 00:20:22,980
And even then, you only want to allow outside access to just the narrowest amount of data necessary.

274
00:20:23,100 --> 00:20:23,460
OK.

275
00:20:23,550 --> 00:20:31,320
Which is why you see so much Java code with classes and properties where the properties are defaulted

276
00:20:31,320 --> 00:20:32,580
to being private.

277
00:20:32,670 --> 00:20:33,120
OK.

278
00:20:33,240 --> 00:20:37,800
So that way we just make sure hey, if you need access to this, use the getters and setters.

279
00:20:37,800 --> 00:20:43,320
So that way we have an opportunity to kind of police who's accessing it and what that data actually

280
00:20:43,500 --> 00:20:44,700
comes out looking like.

281
00:20:45,120 --> 00:20:45,530
All right.

282
00:20:45,540 --> 00:20:50,490
So that's going to be it for this little lesson, and we're going to stick with Interms for a little

283
00:20:50,490 --> 00:20:54,060
bit longer, though there's a few more things that are cool that you should learn about.

284
00:20:54,180 --> 00:20:55,500
So I'll see you in the next one.
