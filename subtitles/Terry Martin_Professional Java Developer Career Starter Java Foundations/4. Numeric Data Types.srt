1
00:00:00,270 --> 00:00:08,060
Now, all data in the computer ultimately gets stored in binary like so OK.

2
00:00:08,430 --> 00:00:14,880
And that means that all data that we work with in the computer needs space in the computer.

3
00:00:15,420 --> 00:00:20,640
And that's where we get into the idea of RAM for your computer.

4
00:00:20,970 --> 00:00:26,220
So when you buy a computer, one of the specifications that you probably will pay attention to is how

5
00:00:26,220 --> 00:00:30,450
much ram or how much memory does the computer have not to be confused with storage?

6
00:00:30,720 --> 00:00:32,550
So the RAM in a computer?

7
00:00:32,580 --> 00:00:40,380
Modern computers as of 2021 probably will tend to come with maybe four gigs of RAM, eight gigs of RAM,

8
00:00:40,650 --> 00:00:41,880
16GB of RAM.

9
00:00:41,880 --> 00:00:47,610
Those three are probably the most common configuration for the average computer these days.

10
00:00:48,060 --> 00:00:50,100
But what does that actually mean?

11
00:00:50,370 --> 00:00:53,040
Four gigs, eight gigs, 16 gigs of RAM.

12
00:00:53,430 --> 00:00:59,850
Well, to understand that we need to kind of look at what some of the Greek prefixes that are used when

13
00:00:59,850 --> 00:01:01,350
referring to memory.

14
00:01:01,680 --> 00:01:07,080
So right here, we're looking at one byte, which is eight bits.

15
00:01:07,290 --> 00:01:07,770
OK.

16
00:01:08,370 --> 00:01:17,550
But if we had a thousand bytes, you could call that one kilobyte because kilo means 1000.

17
00:01:17,790 --> 00:01:18,160
Right?

18
00:01:18,240 --> 00:01:26,610
However, in computing, typically when we are referring to the amount of storage and bytes of a computer

19
00:01:26,610 --> 00:01:35,430
and we use these these Greek prefixes like kilo and mega and giga and terabyte and things like that,

20
00:01:35,880 --> 00:01:45,570
we don't typically mean just a simple number like 1000 memory and computers tends to be based on powers

21
00:01:45,570 --> 00:01:46,320
of two.

22
00:01:46,800 --> 00:01:50,880
And so the number one thousand is not a power of two.

23
00:01:51,030 --> 00:01:58,470
The closest number to 1000 that would be a power of two is 1024.

24
00:01:58,830 --> 00:02:07,530
And so if we were to say that a computer has one kilobyte of RAM, we would likely mean that it has

25
00:02:07,530 --> 00:02:11,910
1024 bytes, not 1000 bytes.

26
00:02:11,940 --> 00:02:12,390
OK.

27
00:02:12,720 --> 00:02:18,930
So sometimes you may see these odd numbers thirty two thousand seven hundred sixty eight or sixty five

28
00:02:18,930 --> 00:02:21,150
thousand five hundred thirty five or something like that.

29
00:02:21,360 --> 00:02:28,470
The reason you see these kind of weird numbers instead of like nice even hole numbers, is because memory

30
00:02:28,470 --> 00:02:31,740
in computers tends to be measured in powers of two.

31
00:02:31,830 --> 00:02:39,270
Now in the computer, every time we allocate memory for something like every time we use the new operator

32
00:02:39,270 --> 00:02:45,270
and we say new string or something like that, what we're actually doing is we're asking the computer

33
00:02:45,270 --> 00:02:52,950
to find some space in the computer, like, think about these these squares here, find some unused

34
00:02:53,100 --> 00:02:59,070
space in the computer in which to create and store this new thing that we're creating.

35
00:02:59,100 --> 00:02:59,520
OK.

36
00:02:59,760 --> 00:03:07,950
So any time we store like an integer or a long or a string or whatever, some new area in memory that

37
00:03:07,950 --> 00:03:14,760
wasn't already in use gets allocated and assigned for the use of that new data.

38
00:03:15,240 --> 00:03:18,230
So let's see a little bit of what that might look like.

39
00:03:18,240 --> 00:03:25,860
In fact, if we go over to the ADP and I'm going, I'm going to create a new file and you're welcome

40
00:03:25,860 --> 00:03:28,190
to follow along, but I don't think you need to for this.

41
00:03:28,200 --> 00:03:32,040
I'm just going to show a couple of brief examples of some things.

42
00:03:32,850 --> 00:03:34,170
No stuff.

43
00:03:34,770 --> 00:03:35,160
All right.

44
00:03:36,610 --> 00:03:45,190
So I'll create my typical PSP in here, and I'm going to create a variable, let's say first, I'm going

45
00:03:45,190 --> 00:03:51,250
to create a a byte and I'll just call it my byte.

46
00:03:52,780 --> 00:03:58,990
Equals 13, and then I will print that byte.

47
00:04:01,590 --> 00:04:03,390
And I'll even go ahead and run this.

48
00:04:05,120 --> 00:04:13,730
OK, now when the Java program gets to line three and runs this line, it's going to ask the computer

49
00:04:13,730 --> 00:04:22,070
to give it one byte, one unused byte of memory in the computer so that it can store the number 13,

50
00:04:22,070 --> 00:04:24,170
which I happen to have right here at 13.

51
00:04:24,200 --> 00:04:24,650
OK.

52
00:04:25,310 --> 00:04:30,050
And this byte in the computer will have an address.

53
00:04:31,130 --> 00:04:37,670
Now that address, if I go back over here again, that address might look like look something like.

54
00:04:39,280 --> 00:04:39,700
At.

55
00:04:40,830 --> 00:04:41,890
Two F.

56
00:04:42,240 --> 00:04:43,060
Three.

57
00:04:43,200 --> 00:04:45,210
I'm just going to put some random.

58
00:04:46,870 --> 00:04:47,710
Numbers here.

59
00:04:47,810 --> 00:04:53,140
OK, that might be the address of.

60
00:04:54,510 --> 00:05:00,480
This bite right here, these eight bits that represent this one bite.

61
00:05:00,720 --> 00:05:04,590
This number 13 in memory of the computer.

62
00:05:04,650 --> 00:05:05,160
OK.

63
00:05:05,670 --> 00:05:14,280
And let's say the computer has eight gigs of RAM, so that would mean roughly eight billion bytes of

64
00:05:14,280 --> 00:05:14,730
RAM.

65
00:05:14,820 --> 00:05:17,670
But again, it won't be an even number of eight billion.

66
00:05:17,670 --> 00:05:20,970
It'll be whatever number is closest to eight billion.

67
00:05:20,970 --> 00:05:22,380
That is a power of two.

68
00:05:22,440 --> 00:05:24,990
Whatever that number is, it would be a big number.

69
00:05:25,260 --> 00:05:25,680
OK.

70
00:05:25,830 --> 00:05:30,330
So that's how many bytes of storage the computer might have.

71
00:05:30,450 --> 00:05:36,210
And so one of those bytes is going to be assigned the number 13.

72
00:05:37,800 --> 00:05:41,310
And and that's how the computer is actually going going to work.

73
00:05:41,400 --> 00:05:46,500
And then when we tell system that out, that print line to print this might what's going to happen is

74
00:05:46,500 --> 00:05:50,790
that the computer is going to retrieve whatever value was stored at this location.

75
00:05:51,060 --> 00:05:53,970
And and then it's going to print that onto the screen.

76
00:05:54,210 --> 00:06:00,510
OK, so some of the other data types that we have access to, while the smallest data type that we can

77
00:06:00,510 --> 00:06:02,550
use is actually called a Boolean.

78
00:06:02,790 --> 00:06:04,650
So I'm going to create a Boolean real quick.

79
00:06:07,890 --> 00:06:10,180
We don't know my flag.

80
00:06:13,990 --> 00:06:14,380
All right.

81
00:06:14,740 --> 00:06:18,910
So I just created a Boolean variable called my flag, and I set it to true.

82
00:06:19,570 --> 00:06:26,980
So what's going to happen here is that again, Java is going to request storage space for this Boolean,

83
00:06:27,400 --> 00:06:34,990
and a Boolean is just an on or or an off essentially or a true or a false, so it only requires one

84
00:06:34,990 --> 00:06:35,530
bit.

85
00:06:35,800 --> 00:06:44,530
OK, now I'll be honest with you, I don't actually know if the operating system and Java working together

86
00:06:44,770 --> 00:06:52,330
are going to actually just use an entire byte because that is the smallest thing that can actually be

87
00:06:52,330 --> 00:06:53,140
addressed.

88
00:06:53,590 --> 00:07:00,970
Or if Java has some tricky way that for every eight bits that we allocate, it stores them all in one

89
00:07:00,970 --> 00:07:02,540
byte that it keeps track of.

90
00:07:02,560 --> 00:07:04,810
I'm not sure what it's going to do there.

91
00:07:04,900 --> 00:07:09,400
And frankly, it doesn't really matter too much unless you're going to write a program where you're

92
00:07:09,400 --> 00:07:14,050
going to be storing trillions of individual bits.

93
00:07:14,170 --> 00:07:20,300
If every time you allocate a bit, it actually just ends up being a byte, that would be pretty wasteful.

94
00:07:20,350 --> 00:07:23,290
I mean, you would be what you would want to be aware of that.

95
00:07:23,680 --> 00:07:23,980
OK.

96
00:07:24,010 --> 00:07:28,030
So anyway, a bit would just be one little thing here.

97
00:07:28,210 --> 00:07:31,510
It could either be a one or a zero.

98
00:07:31,630 --> 00:07:32,110
OK.

99
00:07:32,320 --> 00:07:35,380
And if it's zero by default, then that means it's false.

100
00:07:35,680 --> 00:07:37,900
And if it's one, then it's true.

101
00:07:38,260 --> 00:07:45,340
So that's how the computer would represent these couple of data types Boolean and Byte.

102
00:07:46,150 --> 00:07:46,450
All right.

103
00:07:46,450 --> 00:07:53,320
So now let's also talk about what are the largest numbers that you could store in some of these data

104
00:07:53,320 --> 00:07:53,800
types.

105
00:07:54,250 --> 00:07:59,560
So obviously with a Boolean, you can only store a zero or a one.

106
00:07:59,710 --> 00:08:00,040
Right.

107
00:08:00,050 --> 00:08:04,720
So the largest number you could store in there if you want to talk about it in terms of numbers would

108
00:08:04,720 --> 00:08:05,500
be a one.

109
00:08:05,800 --> 00:08:06,170
OK?

110
00:08:06,340 --> 00:08:12,580
The largest number that you can store in a byte by default would be well.

111
00:08:12,610 --> 00:08:21,490
There's a range from negative 128 to positive 127, and that might not be super intuitive.

112
00:08:21,940 --> 00:08:30,310
So by default, most of the basic numerical types in Java are what are called signed numbers, meaning

113
00:08:30,550 --> 00:08:32,710
they can be negative or positive.

114
00:08:32,740 --> 00:08:33,250
OK.

115
00:08:33,820 --> 00:08:36,160
However, there's something interesting here.

116
00:08:36,550 --> 00:08:43,630
If you didn't need to store negative numbers with something like a byte, which would be called unsigned,

117
00:08:44,200 --> 00:08:48,730
then you could store a number in a byte up to 255.

118
00:08:48,730 --> 00:08:51,070
So zero through 255.

119
00:08:51,130 --> 00:08:51,610
OK.

120
00:08:51,760 --> 00:08:59,350
Because if you added up, if you put a one in all of these bits of a byte and added all of that up 128

121
00:08:59,350 --> 00:09:04,780
plus 64 plus 32 plus 16, eight, four, two and one, you would get 255.

122
00:09:04,990 --> 00:09:05,440
OK.

123
00:09:05,770 --> 00:09:14,590
However, the reason the range by default in Java is negative 128 to 127 is because now I'm going to

124
00:09:14,620 --> 00:09:15,040
I'm going to.

125
00:09:15,280 --> 00:09:17,720
I'm going to simplify this for you a little bit.

126
00:09:17,740 --> 00:09:19,900
This is just a way that you can understand.

127
00:09:19,900 --> 00:09:28,390
This OK is because in order to indicate to the computer system whether or not a number is negative or

128
00:09:28,390 --> 00:09:38,350
not, the computer system will tend to store a zero or a one in the largest bit for whatever the data

129
00:09:38,350 --> 00:09:38,810
type is.

130
00:09:38,830 --> 00:09:45,880
So if we're talking about a byte, then it may store a one here to indicate that this is a negative

131
00:09:45,880 --> 00:09:46,330
number.

132
00:09:46,360 --> 00:09:53,080
OK, so if we wanted negative one, we might do something like this or rather the computer might do

133
00:09:53,080 --> 00:09:53,890
something like.

134
00:09:57,080 --> 00:10:07,190
This OK, so now this number might not be interpreted as 129, but rather negative one.

135
00:10:08,090 --> 00:10:15,740
And because we're now using up the largest bit in this data type of bite, which is also called the

136
00:10:15,740 --> 00:10:22,490
most significant bit, or maybe the biggest one here because we're using that one up, we've decreased

137
00:10:22,490 --> 00:10:25,130
our range, our total range in half.

138
00:10:25,160 --> 00:10:25,580
OK.

139
00:10:25,790 --> 00:10:32,030
So whereas the largest number that you could have represented in a in an unsigned byte would have been

140
00:10:32,030 --> 00:10:35,270
255 in a sound bite.

141
00:10:35,600 --> 00:10:45,470
It's going to end up being 127, which would be 64 plus 32 plus 16, et cetera, et cetera.

142
00:10:45,710 --> 00:10:46,160
OK.

143
00:10:46,760 --> 00:10:48,020
127.

144
00:10:48,320 --> 00:10:55,820
So that's kind of an important concept to be aware of because it is the combination of the amount of

145
00:10:55,820 --> 00:11:02,870
space that we take up in the computer versus the largest range of numbers that we need to represent.

146
00:11:03,080 --> 00:11:07,070
That helps us to decide what data type we should use.

147
00:11:07,310 --> 00:11:12,020
You may have wondered earlier, Well, why don't we just use the largest data type for everything?

148
00:11:12,140 --> 00:11:17,690
And the reason would be, well, because we'd waste a lot of memory if we were to do that.

149
00:11:17,750 --> 00:11:23,930
And so typically we want to use the smallest data type we can get away with for whatever it is that

150
00:11:23,930 --> 00:11:25,880
we're needing to do in the computer.

151
00:11:25,940 --> 00:11:26,260
All right.

152
00:11:26,270 --> 00:11:28,700
So let's look at some more data types now.

153
00:11:28,730 --> 00:11:31,910
So we've looked at billions and bytes.

154
00:11:31,910 --> 00:11:40,290
The next largest data type is a short OK, and a short route is 16 bits.

155
00:11:40,310 --> 00:11:50,480
OK, so one through 16 or two bytes, OK, and a short number can represent the range of 30 negative

156
00:11:50,480 --> 00:11:55,850
thirty two thousand seven hundred sixty eight to positive thirty two thousand seven hundred sixty seven.

157
00:11:56,180 --> 00:11:56,600
All right.

158
00:11:57,320 --> 00:12:05,450
Also, the data type of care which we have looked at before, is represented with two bytes.

159
00:12:05,660 --> 00:12:12,950
Now that might come as a surprise to some, because if you live in a European or American country,

160
00:12:13,370 --> 00:12:18,560
you probably are used to having an alphabet that has somewhere roughly around 26 letters.

161
00:12:18,560 --> 00:12:23,630
Although I don't know how it works in countries where they use the extra little symbols and things,

162
00:12:23,660 --> 00:12:24,860
but it's not.

163
00:12:24,860 --> 00:12:31,160
It's not likely to be thirty two thousand characters to represent all of the variants of Latin letters

164
00:12:31,400 --> 00:12:35,330
probably should not require anywhere near thirty two thousand numbers.

165
00:12:35,600 --> 00:12:43,190
So why did Java decide to represent characters with two bytes?

166
00:12:43,820 --> 00:12:52,070
Well, the reason for this is because Java wanted to be a programming language that is easily compatible

167
00:12:52,070 --> 00:12:54,950
with all languages on Earth.

168
00:12:55,250 --> 00:13:03,410
And although Latin alphabets don't require anywhere near 32000 characters, there are many other writing

169
00:13:03,410 --> 00:13:06,350
systems and characters in the world.

170
00:13:06,710 --> 00:13:11,630
And to represent all of them, you do need a really big range.

171
00:13:11,990 --> 00:13:21,290
Now, I will say that if you are storing data in a variable of type short, it will have a range of

172
00:13:21,290 --> 00:13:24,590
negative thirty two thousand two positive thirty two thousand roughly.

173
00:13:24,950 --> 00:13:32,480
However, if you use a data type of care, which also is two bytes, you will no longer need the negative

174
00:13:32,480 --> 00:13:37,910
numbers because the whole point of what you're trying to store in a care is not directly numbers, it

175
00:13:37,910 --> 00:13:39,590
is actual characters.

176
00:13:39,920 --> 00:13:48,620
So I'll just show what these look like in Java so we could create a short of my big short thing.

177
00:13:48,620 --> 00:13:54,110
Anybody's ever watched the movie, the Big Short Great Movie, and we'll store a number of, I don't

178
00:13:54,110 --> 00:13:59,680
know, 45 and then I'll create a care my care.

179
00:14:00,380 --> 00:14:05,150
Now for this, I'm actually going to put an actual international character in here.

180
00:14:05,360 --> 00:14:13,280
And if you may recall from previous lessons to allocate one character, you can use a single tick or

181
00:14:13,280 --> 00:14:18,230
a single quote like I have here, and then you can put something in there so I could put a letter like

182
00:14:18,230 --> 00:14:18,830
G.

183
00:14:18,870 --> 00:14:23,510
OK, but I'm going to put something a little more interesting so that you can see firsthand that Java

184
00:14:23,510 --> 00:14:27,650
really does support internationalized characters and strings.

185
00:14:27,800 --> 00:14:33,260
So I'm going to switch to a different writing system, and I will use Korean now.

186
00:14:33,260 --> 00:14:38,180
I'm only going to put one character in here and I will put, I don't know, gung.

187
00:14:39,720 --> 00:14:40,110
All right.

188
00:14:41,290 --> 00:14:49,450
So that's one Korean character, which incidentally, is somewhat equivalent to to this, as in Gangnam

189
00:14:49,450 --> 00:14:49,990
Style.

190
00:14:50,290 --> 00:14:50,770
OK.

191
00:14:52,060 --> 00:14:57,400
So you may also be wondering now this isn't a Korean class, but but this is kind of an interesting

192
00:14:57,400 --> 00:14:58,180
side note.

193
00:14:58,660 --> 00:15:07,540
So you'll recall that I have said that the capital letter A is commonly encoded as a 65 in ASCII.

194
00:15:07,840 --> 00:15:15,730
However, Java's default encoding scheme isn't technically ASCII, it's actually called Unicode.

195
00:15:16,240 --> 00:15:22,960
But what the creators of Unicode did for Latin letters was they started off with ASCII.

196
00:15:23,200 --> 00:15:29,980
And so all of the characters that are known to ASCII actually have the same values in Unicode as well.

197
00:15:30,310 --> 00:15:36,160
So let's say like the letter A, for example, my A.

198
00:15:38,570 --> 00:15:39,430
A capital A..

199
00:15:39,470 --> 00:15:44,630
OK, so this would be in memory a 65.

200
00:15:44,780 --> 00:15:45,210
OK.

201
00:15:45,530 --> 00:15:54,170
However, for encoding Korean Korean works quite a bit differently than Latin letters work.

202
00:15:54,590 --> 00:16:02,150
The creators of Unicode decided to encode Korean characters as syllables.

203
00:16:02,660 --> 00:16:03,130
OK.

204
00:16:03,710 --> 00:16:10,670
And so rather than encoding individual letters of the Korean alphabet, they actually encode entire

205
00:16:10,670 --> 00:16:12,830
syllables of the Korean language.

206
00:16:12,830 --> 00:16:17,530
And the reason for that is because of the way that Korean is printed and written.

207
00:16:17,540 --> 00:16:24,600
This whole entire thing here is equivalent in English to all of these letters Ganji.

208
00:16:24,680 --> 00:16:32,140
But whereas in Latin languages, we would write out each letter one at a time, in this way in Korean,

209
00:16:32,150 --> 00:16:38,990
they're kind of clustered together into a into a little square, if you will, and it just made more

210
00:16:38,990 --> 00:16:47,060
sense to them to encode each and every individual syllable of the Korean language as its own separate

211
00:16:47,060 --> 00:16:47,780
character.

212
00:16:48,050 --> 00:16:56,840
So if you can imagine how many characters would you need in order to represent every syllable in a language,

213
00:16:56,840 --> 00:17:03,190
especially a language like Korean, you need a lot of characters, thousands of characters, in fact,

214
00:17:03,200 --> 00:17:03,730
OK?

215
00:17:04,040 --> 00:17:10,640
And so that's where we start to get into this fact that if you're encoding characters, you're going

216
00:17:10,640 --> 00:17:20,660
to need at least two bytes in order to do it, because Korean alone requires thousands of bytes to encode

217
00:17:20,660 --> 00:17:24,920
each and every single syllable that can exist in that language.
