1
00:00:00,150 --> 00:00:06,840
And there's one more for loop pattern that I want to introduce you to before we close out this topic.

2
00:00:06,960 --> 00:00:10,290
So for this one, I want to show you a scenario here.

3
00:00:10,290 --> 00:00:11,820
It has to do with arrays.

4
00:00:12,600 --> 00:00:22,380
So let's say that we have a string array called fruits, and we will initialize it with a few different

5
00:00:22,380 --> 00:00:22,980
fruits.

6
00:00:23,310 --> 00:00:27,360
Apple, orange, pear, plum.

7
00:00:27,360 --> 00:00:27,780
That's enough.

8
00:00:29,760 --> 00:00:30,180
All right.

9
00:00:30,750 --> 00:00:38,820
Now let's say that we want to loop over these fruits and just print them out, right?

10
00:00:39,480 --> 00:00:42,330
So can you think of ways that we can do this?

11
00:00:42,780 --> 00:00:51,630
I mean, one thing we could do is we could use a for loop and we could declare a counter, set it to

12
00:00:51,630 --> 00:00:53,820
zero, initialize it to zero.

13
00:00:54,870 --> 00:01:03,630
And then we could say something like keep counting as long as the counter is less than now.

14
00:01:03,630 --> 00:01:05,280
What number do we want to put here?

15
00:01:05,850 --> 00:01:12,720
Well, we could actually just set it to count up to the number of items that are in the fruit array,

16
00:01:12,730 --> 00:01:14,400
and this is a very common pattern.

17
00:01:14,670 --> 00:01:18,150
So what we can do is to reference fruits length.

18
00:01:18,810 --> 00:01:19,320
OK.

19
00:01:20,220 --> 00:01:22,230
And then counter plus plus.

20
00:01:23,100 --> 00:01:29,340
So that's a very, very common pattern when especially if you're looping over items in an array, you'll

21
00:01:29,340 --> 00:01:31,620
just refer to the length of the array.

22
00:01:32,040 --> 00:01:38,010
And now here we could do something like current fruit is.

23
00:01:43,650 --> 00:01:46,770
Fruits counter, right?

24
00:01:47,310 --> 00:01:48,480
Let's run that and see it.

25
00:01:49,530 --> 00:01:50,520
All right, so there we go.

26
00:01:51,120 --> 00:01:52,890
Apple, orange, pear, plum.

27
00:01:52,920 --> 00:01:53,250
Right.

28
00:01:53,270 --> 00:01:58,140
So that's fairly straightforward, kind of a nice use of the the for loop.

29
00:01:58,380 --> 00:02:06,390
However, there is as of Java five, I believe it was something called the enhanced for loop.

30
00:02:06,840 --> 00:02:13,560
And basically, it just cuts down on the amount of typing that we need to do to implement this exact

31
00:02:13,560 --> 00:02:14,190
pattern.

32
00:02:14,520 --> 00:02:17,040
And so let me show you what that looks like.

33
00:02:17,040 --> 00:02:19,240
It's quite nice, I would say.

34
00:02:19,260 --> 00:02:21,960
So we don't need any of this.

35
00:02:22,710 --> 00:02:24,170
We can get rid of all of that.

36
00:02:24,180 --> 00:02:31,410
And instead, we can simply say that we're going to have a variable of type string and we can call it

37
00:02:31,410 --> 00:02:35,760
fruit, and then we use a colon and then a space.

38
00:02:36,060 --> 00:02:41,040
The space is optional and then we reference our array.

39
00:02:41,190 --> 00:02:43,390
So the variable for the array is fruit.

40
00:02:43,410 --> 00:02:46,500
So if I just type in fruits just like that.

41
00:02:46,830 --> 00:02:50,600
Now you can have a space to the left of the colon as well.

42
00:02:50,610 --> 00:02:51,840
It doesn't really matter.

43
00:02:52,140 --> 00:02:59,190
And now down here, instead of directly referencing the array, what's going to happen is that this

44
00:02:59,190 --> 00:03:07,680
enhanced for loop is going to iterate through iterate means to step through each item in the array.

45
00:03:07,710 --> 00:03:12,300
In this case, it's going to step through and it's going to take whatever the current value in that

46
00:03:12,300 --> 00:03:13,650
iteration is.

47
00:03:13,650 --> 00:03:20,250
Whatever the current string is in the as it's iterating over all of these strings in this array and

48
00:03:20,250 --> 00:03:23,940
it's going to assign them one at a time to this variable fruit.

49
00:03:24,540 --> 00:03:31,140
And so that means down here, we don't need to reference the individual values out of the array anymore.

50
00:03:31,140 --> 00:03:34,680
We can simply refer to this local variable fruit.

51
00:03:37,140 --> 00:03:38,760
So let's run this.

52
00:03:40,430 --> 00:03:41,180
So look at that.

53
00:03:41,210 --> 00:03:43,500
There's you don't see any difference in the output.

54
00:03:43,520 --> 00:03:45,110
It behaves the same, right?

55
00:03:45,110 --> 00:03:45,950
The output is.

56
00:03:46,190 --> 00:03:49,180
But look at this much nicer, isn't it?

57
00:03:49,190 --> 00:03:51,110
Is it just easier to look at?

58
00:03:51,770 --> 00:03:59,870
So as long as you don't need an index or a counter, if you just want to loop over the items that are

59
00:03:59,870 --> 00:04:05,690
in an array, you can use this enhanced for loop to do this.

60
00:04:06,080 --> 00:04:12,560
Now this is I'm considering this to be a little bit of a sneak preview because in a later module, we

61
00:04:12,560 --> 00:04:19,670
will learn about collections which are kind of like arrays on steroids, and we can use the enhanced

62
00:04:19,670 --> 00:04:24,440
loop to reference the items that are in a collection as well.

63
00:04:24,710 --> 00:04:25,120
OK.

64
00:04:25,340 --> 00:04:30,860
But since we were already on the for loop and you've already learned about arrays might as well go ahead

65
00:04:30,860 --> 00:04:36,770
and introduce you now to this specific use of the enhanced for loop.

66
00:04:37,400 --> 00:04:38,240
So that's it.
