WEBVTT
1
00:00:00.690 --> 00:00:03.960
All right, so now let's have a little bit of fun.

2
00:00:04.170 --> 00:00:11.490
I want to revisit one of our previous applications a bit because now that we know a little more about

3
00:00:11.730 --> 00:00:14.820
time, I want to revise some things.

4
00:00:15.060 --> 00:00:18.630
Let's go back to our big data application.

5
00:00:18.630 --> 00:00:20.220
Someone to jump over there real quick.

6
00:00:20.910 --> 00:00:21.180
All right.

7
00:00:21.190 --> 00:00:26.430
So here's our good old faithful big data application here.

8
00:00:26.760 --> 00:00:31.200
And what I have in mind is to add some more functionality to it.

9
00:00:32.460 --> 00:00:38.990
So let's start off by reminding ourselves of what this data actually looked like in the spreadsheet,

10
00:00:39.330 --> 00:00:43.380
and I'll run through the steps that I took before to do this.

11
00:00:43.380 --> 00:00:46.890
So I'm going to open up a terminal program.

12
00:00:47.940 --> 00:00:48.240
All right.

13
00:00:48.240 --> 00:00:53.700
And here I am in the folder that contains the five million CSV record file here.

14
00:00:53.730 --> 00:00:59.970
I'll do a listing here real quick, and I'm going to go ahead and just regenerate a smaller version

15
00:00:59.970 --> 00:01:03.510
of that file so that I can open it up in a spreadsheet real quick.

16
00:01:03.510 --> 00:01:08.100
And the way I did that before was with the Unix head command.

17
00:01:08.430 --> 00:01:13.380
And then I specified how many records I wanted, and I don't know how many I took before, maybe 100

18
00:01:13.380 --> 00:01:13.770
and one.

19
00:01:13.770 --> 00:01:14.850
Probably I don't know.

20
00:01:14.930 --> 00:01:17.520
It doesn't matter and will do.

21
00:01:17.520 --> 00:01:22.510
And then I have to specify the file that I want to open here, which is a CSP.

22
00:01:22.920 --> 00:01:31.920
And then I'm going to pipe the output of this just the first 101 records into a file called People that

23
00:01:31.920 --> 00:01:32.820
CSP.

24
00:01:33.360 --> 00:01:33.690
All right.

25
00:01:33.720 --> 00:01:39.420
And so I've just created that file, and now I can open that file people CSP.

26
00:01:39.630 --> 00:01:40.050
All right.

27
00:01:40.060 --> 00:01:45.120
So here we are with that file open again and I'll zoom in a bit.

28
00:01:45.570 --> 00:01:52.170
So if we take a look at this data, we will see that there are some date fields in here that we didn't

29
00:01:52.170 --> 00:01:54.500
do anything with at the time, right?

30
00:01:54.510 --> 00:01:58.080
So we've got a date of birth and a time of birth.

31
00:01:59.040 --> 00:02:00.750
What else do we have here?

32
00:02:02.410 --> 00:02:04.150
Date of joining.

33
00:02:05.890 --> 00:02:13.780
So we've got a few date and time related fields here, so let's focus on maybe the date of birth and

34
00:02:13.780 --> 00:02:14.680
time of birth.

35
00:02:15.280 --> 00:02:19.420
So a couple of interesting things we could do here.

36
00:02:20.620 --> 00:02:22.690
Jumping back over to the code for a minute.

37
00:02:24.160 --> 00:02:31.840
So currently, we are modeling a person class record really to represent a few of the fields.

38
00:02:33.000 --> 00:02:37.920
From this spreadsheet, but not most of them, right, we left a lot out.

39
00:02:38.640 --> 00:02:41.610
So there's a couple of things that I think we could do here.

40
00:02:41.990 --> 00:02:43.650
A couple of decisions, I guess.

41
00:02:44.910 --> 00:02:52.170
I would like to model the date of birth and time of birth in our person class here, and I can think

42
00:02:52.170 --> 00:02:59.250
of two ways that we might consider doing this, though we could have one field that is simply date of

43
00:02:59.250 --> 00:03:03.450
birth and that would use a a local date time.

44
00:03:03.450 --> 00:03:05.610
And why would it be a local date time, by the way?

45
00:03:05.940 --> 00:03:13.620
Well, I think I'd probably make it a local date time, very likely because I wouldn't have an easy

46
00:03:13.620 --> 00:03:21.060
programmatic way that I can think of right at this moment to determine what time zone these people are

47
00:03:21.060 --> 00:03:21.480
in.

48
00:03:21.690 --> 00:03:29.100
Even though I do have access to their city, I don't have right now at this very moment an easy programmatic

49
00:03:29.100 --> 00:03:38.310
way that I could translate the city and state into a time zone without having to write a bunch more

50
00:03:38.310 --> 00:03:43.740
code that goes in hit some web service someplace in the internet to to get that information, though

51
00:03:43.890 --> 00:03:46.920
that might be a cool exercise for us to do at some point.

52
00:03:47.190 --> 00:03:51.420
But well beyond the scope of what I what I'm inclined to get into right now.

53
00:03:51.840 --> 00:03:57.870
So without knowing the time zone of where these people live, I'm just kind of passing through it to

54
00:03:57.870 --> 00:03:59.320
make sure that I'm not lying to you.

55
00:03:59.320 --> 00:04:04.680
I don't I don't see an easy way to do that with the data that I have right here right now without that

56
00:04:04.680 --> 00:04:05.370
ability.

57
00:04:06.510 --> 00:04:12.120
I think all I can do right now is just model a local date and time.

58
00:04:12.150 --> 00:04:12.420
Right?

59
00:04:12.660 --> 00:04:23.280
So one option would be to pass out these additional two fields here into one field on the person class,

60
00:04:23.280 --> 00:04:27.030
which is a unified date time field, right?

61
00:04:27.630 --> 00:04:31.110
The other approach would be to just let them be separated out.

62
00:04:32.130 --> 00:04:32.730
We could do.

63
00:04:32.850 --> 00:04:34.440
We can probably do, either.

64
00:04:35.250 --> 00:04:35.730
Maybe.

65
00:04:35.850 --> 00:04:42.660
First off, let's just start with two separated out a date and a time because that's what we have in

66
00:04:42.660 --> 00:04:44.310
the spreadsheet and then will.

67
00:04:44.610 --> 00:04:49.920
And then we'll decide if it's worthwhile to combine the two in one fell swoop.

68
00:04:50.430 --> 00:04:54.030
So to do that, let's start off by just adding those two fields.

69
00:04:54.450 --> 00:05:00.410
So I'm just going to add them to the end here, so we will use a local date.

70
00:05:03.660 --> 00:05:16.260
And I don't know, we'll call it birth date and then a local time, and we'll call that birth time and

71
00:05:16.260 --> 00:05:23.250
then we get errors immediately down here in our constructor of in our construction of a person because

72
00:05:23.250 --> 00:05:25.830
we have to specify those two additional fields now.

73
00:05:26.130 --> 00:05:33.330
Now, if you may recall, the way that this was working was that we are splitting each row of this spreadsheet,

74
00:05:34.290 --> 00:05:38.970
which is a string initially into an array of fields.

75
00:05:38.970 --> 00:05:45.690
And so we will need to know the index of the date of birth field in the time of birth field.

76
00:05:46.020 --> 00:05:48.120
And I don't know what those indexes are.

77
00:05:48.330 --> 00:05:54.720
So what I'm inclined to do is come down here to the bottom of this spreadsheet, right click and add

78
00:05:54.720 --> 00:06:03.270
a new row below and come over here to the beginning and then start typing a couple of indexes here zero,

79
00:06:03.270 --> 00:06:04.440
one and two.

80
00:06:04.800 --> 00:06:11.070
And then if I select a couple of these and then grab that little that little dot there, I can have

81
00:06:11.070 --> 00:06:12.000
the spreadsheet.

82
00:06:12.690 --> 00:06:14.640
Count those columns for me.

83
00:06:15.730 --> 00:06:16.180
All right.

84
00:06:16.630 --> 00:06:22.960
And so now if I find if I find those fields.

85
00:06:26.660 --> 00:06:27.320
There they are.

86
00:06:27.350 --> 00:06:28.400
I think those are they.

87
00:06:28.850 --> 00:06:33.380
So the date, birth date is 10 and the birth time is 11.

88
00:06:33.560 --> 00:06:35.810
Let me come up here and just make sure I'm looking at the right thing.

89
00:06:35.810 --> 00:06:37.880
Yeah, 10 and 11.

90
00:06:38.180 --> 00:06:38.570
All right.

91
00:06:38.580 --> 00:06:44.340
So now jumping back over here, so I will put my cursor.

92
00:06:44.360 --> 00:06:45.310
Let's see.

93
00:06:45.320 --> 00:06:46.770
I want to be on the inside.

94
00:06:46.790 --> 00:06:47.210
There we go.

95
00:06:47.210 --> 00:06:47.780
So there's.

96
00:06:48.000 --> 00:06:48.920
Notice what I'm doing here.

97
00:06:48.920 --> 00:06:54.650
I'm trying to find out where can I start typing more stuff and be in the right place?

98
00:06:54.650 --> 00:07:00.680
So I wanted to find where is the matching closing parentheses for this person constructor?

99
00:07:00.680 --> 00:07:02.930
And it is this parentheses right here.

100
00:07:02.930 --> 00:07:06.230
So I want to put my cursor right to the left of that.

101
00:07:06.770 --> 00:07:07.880
And then a comma.

102
00:07:08.540 --> 00:07:15.770
And now I want to grab this birth date field.

103
00:07:15.770 --> 00:07:17.800
So it's from the array.

104
00:07:17.810 --> 00:07:19.520
It's going to be a 10.

105
00:07:19.670 --> 00:07:21.560
Now that's going to be a string, right?

106
00:07:21.770 --> 00:07:25.670
And that's not quite right because we're modeling this as a local date.

107
00:07:25.670 --> 00:07:28.820
And so now you get to learn a new method here.

108
00:07:29.270 --> 00:07:34.220
So the question is, how do we create a local date from an existing string, right?

109
00:07:35.510 --> 00:07:42.530
Well, there's a method for that, of course, and it lives on a local date class and it is called pass.

110
00:07:43.160 --> 00:07:44.840
And we've seen parsing before.

111
00:07:45.050 --> 00:07:52.040
The numeric wrapper classes have a pass method that takes a string and then passes it into whatever

112
00:07:52.040 --> 00:07:54.470
the numerical value and in fact, we're even using it.

113
00:07:55.940 --> 00:07:58.940
And in fact, I thought we were even using it somewhere.

114
00:07:58.940 --> 00:08:01.730
I know at any rate we've seen it before, right?

115
00:08:02.270 --> 00:08:04.610
So we're going to do the same kind of thing here.

116
00:08:04.910 --> 00:08:09.680
Now there are two versions of the pass method for the local date.

117
00:08:09.890 --> 00:08:16.250
There is one that just takes text, and then there's another one that takes two inputs text, comma

118
00:08:16.250 --> 00:08:18.500
and then something called a date time format.

119
00:08:19.280 --> 00:08:20.030
Here's the deal.

120
00:08:20.420 --> 00:08:27.350
This simpler pass method will pass text as long as that text is in a very specific format, and I'll

121
00:08:27.350 --> 00:08:29.750
show you what that format is in just a second here.

122
00:08:29.750 --> 00:08:30.170
So.

123
00:08:30.170 --> 00:08:34.160
So if I go to the local data class real quick and pull that up.

124
00:08:34.280 --> 00:08:40.580
The reason I'm doing it this way, by the way, is because things are running off my screen recorder.

125
00:08:40.580 --> 00:08:43.580
So you won't get to see it unless I pull it up like full screen.

126
00:08:43.580 --> 00:08:45.230
So I'll just do it this way.

127
00:08:45.890 --> 00:08:46.190
All right.

128
00:08:46.190 --> 00:08:52.370
So here's the local local date and we will go to the pass method.

129
00:08:53.150 --> 00:08:54.350
The first one?

130
00:08:55.650 --> 00:09:01.740
And we'll take a look at its Java dock here, so the Java Dock says this will obtain a local day from

131
00:09:01.740 --> 00:09:08.670
a string that's in the format of four digit year, followed by hyphen two digit month hyphen and then

132
00:09:08.700 --> 00:09:10.020
two digit day.

133
00:09:10.350 --> 00:09:17.130
So if we jump back over to our spreadsheet, we will see that our dates are not in that format and therefore

134
00:09:17.130 --> 00:09:18.570
we can't use that.

135
00:09:19.140 --> 00:09:21.030
Point blank, we just we can't use that.

136
00:09:21.150 --> 00:09:24.630
So we're going to need to use the date format or.

137
00:09:26.070 --> 00:09:28.140
So the way we can do that.

138
00:09:28.170 --> 00:09:32.280
Let me jump back over here to our code, so we're going to have to use the version of pass that takes

139
00:09:32.280 --> 00:09:33.180
two inputs.

140
00:09:33.930 --> 00:09:41.730
So the first input will be our string, which is eight 10, followed by a comma and then a date time

141
00:09:41.730 --> 00:09:42.510
formatter.

142
00:09:42.750 --> 00:09:48.200
Now we can create a date time format or, like everything else, with a time formatter.

143
00:09:48.990 --> 00:09:50.190
Got a little too much there?

144
00:09:50.220 --> 00:09:52.440
Sort of pattern.

145
00:09:52.770 --> 00:09:58.620
Now there are a bunch of predefined daytime patterns that we could have considered, but I happen to

146
00:09:58.620 --> 00:10:00.870
know that none of them are going to work for us.

147
00:10:01.110 --> 00:10:07.020
Again, you can actually go look for yourself at the Java Dock for a date for the date time formatter.

148
00:10:07.230 --> 00:10:13.020
And you can take a look at what each of these predefined format patterns do.

149
00:10:13.200 --> 00:10:18.030
But I can tell you now that none of them will work for the dates that we have in the spreadsheet.

150
00:10:18.330 --> 00:10:20.190
And so we will have to create our own.

151
00:10:20.400 --> 00:10:25.800
And so the way that we can do that is to use this of pattern method here, which just takes a string

152
00:10:26.070 --> 00:10:31.410
and then it uses some format characters just kind of like the print statement.

153
00:10:31.410 --> 00:10:35.820
And again, to learn these format characters, you could also go look at the Java Dock.

154
00:10:35.940 --> 00:10:37.740
But I happen to know them already.

155
00:10:38.010 --> 00:10:40.530
So let's look at our spreadsheet here.

156
00:10:40.530 --> 00:10:44.430
So we've got a month, then day, then year.

157
00:10:44.970 --> 00:10:51.330
For those of you who do not live in North America, just know that America tends to format our dates

158
00:10:51.780 --> 00:10:55.260
in a way that you, the rest of the world would consider to be wrong.

159
00:10:55.530 --> 00:10:59.670
And I maybe can't argue with the rest of the world.

160
00:11:00.000 --> 00:11:06.240
It's not the most logical ordering to go in from big to small to bigger again, right?

161
00:11:06.470 --> 00:11:11.070
I might have made more sense to go from small to big to bigger, biggest or something like that, but

162
00:11:11.070 --> 00:11:11.850
we don't do that.

163
00:11:12.300 --> 00:11:15.270
So anyway, month, day and then year?

164
00:11:15.690 --> 00:11:16.120
All right.

165
00:11:16.140 --> 00:11:22.320
So jumping back over here to to specify the month, we will use capital M..

166
00:11:22.530 --> 00:11:30.420
Now, notice that these dates subtly are allowing the numbers to be single digits.

167
00:11:30.450 --> 00:11:30.930
OK.

168
00:11:31.020 --> 00:11:32.020
And that matters.

169
00:11:32.020 --> 00:11:39.510
So to allow for single or double digit month, I will use one m, followed by a forward slash because

170
00:11:39.510 --> 00:11:41.520
that's the separator that we're using here.

171
00:11:41.700 --> 00:11:50.670
And then a single or double digit day, and that will be a d forward slash and then a four digit year.

172
00:11:50.850 --> 00:11:56.930
And so that'll be specified with lowercase y y y y like.

173
00:11:56.940 --> 00:12:06.810
So now if our months or days were consistently two digits wide, then I'd want to do this.

174
00:12:07.200 --> 00:12:07.670
OK, okay.

175
00:12:07.680 --> 00:12:09.990
So specify to MS and two DS.

176
00:12:10.830 --> 00:12:18.570
But if I were to do that here, that would blow up because it would expect that we would have a a pre

177
00:12:18.570 --> 00:12:23.040
pended zero on month like seven, right?

178
00:12:23.190 --> 00:12:24.890
Or days like five.

179
00:12:24.900 --> 00:12:28.110
So it would be zero seven zero five.

180
00:12:28.350 --> 00:12:35.160
But since we are not pretending, we don't want these doubled up letters like this, so just a single

181
00:12:35.160 --> 00:12:38.160
m in a single D, but for wise.

182
00:12:38.760 --> 00:12:39.090
All right.

183
00:12:39.120 --> 00:12:48.870
And so that gives us the passing of our day, and then I'm going to put a comma here and then we will

184
00:12:49.380 --> 00:12:50.920
grab the time.

185
00:12:50.940 --> 00:12:54.900
So that's going to work very similarly now, local time.

186
00:12:56.320 --> 00:12:58.360
Dot Pass.

187
00:12:59.410 --> 00:13:04.210
And so let's look at our times here, so our minute second.

188
00:13:05.530 --> 00:13:10.480
And then AM or PM, there might be a standard form matter for that.

189
00:13:10.810 --> 00:13:16.270
So first off, will specify a whoops a 11.

190
00:13:17.230 --> 00:13:17.920
Calmer.

191
00:13:19.680 --> 00:13:23.130
And now we're going to need another date time for matter.

192
00:13:30.180 --> 00:13:36.900
But now let's go take a quick peek at the time, format or class and see if there is a pre can format

193
00:13:36.900 --> 00:13:38.470
or already defined for us.

194
00:13:38.490 --> 00:13:40.080
I'll pull up the Java doc here.

195
00:13:45.360 --> 00:13:50.160
So what I'm doing now is looking for a time, so this is getting close, except it's not including the

196
00:13:50.160 --> 00:13:51.330
AMPM.

197
00:13:52.080 --> 00:13:55.800
Let's see if we've got one that has the and PM on it.

198
00:13:56.790 --> 00:14:00.090
Who and nope, I'm not seeing one of those.

199
00:14:00.510 --> 00:14:04.620
So it looks like we're going to have to specify that on our own also.

200
00:14:05.640 --> 00:14:06.100
All right.

201
00:14:06.120 --> 00:14:07.560
And so that's fine.

202
00:14:07.830 --> 00:14:08.880
So I'll close this.

203
00:14:10.080 --> 00:14:14.910
So date, time, formatter, thought of pattern.

204
00:14:16.340 --> 00:14:25.010
And so we've got the hour, so that's going to be H.H. Colon.

205
00:14:27.060 --> 00:14:29.320
Minute and now that's a lowercase him.

206
00:14:29.370 --> 00:14:32.250
And by the way, so minute is lowercase.

207
00:14:32.700 --> 00:14:38.550
That's why the month is uppercase m OK, because it's the same date time format or same pattern.

208
00:14:38.790 --> 00:14:39.750
Stuff here.

209
00:14:39.930 --> 00:14:44.010
So they had to differentiate between month versus minute.

210
00:14:44.610 --> 00:14:44.850
All right.

211
00:14:44.880 --> 00:14:49.890
And notice I'm using doubles now because these are all doubles, right?

212
00:14:49.900 --> 00:14:52.050
So these these are presented by zero.

213
00:14:52.080 --> 00:14:52.440
Here.

214
00:14:53.710 --> 00:14:57.640
All right, so our minute second.

215
00:14:58.910 --> 00:15:02.390
And then a space and then the AMPM.

216
00:15:02.570 --> 00:15:05.070
And I believe that is specified by an A..

217
00:15:05.090 --> 00:15:11.180
If I'm not mistaken, but let me just go double check the Java Dock to make sure.

218
00:15:15.130 --> 00:15:19.840
So what I'm doing now is I'm scrolling quickly down to the formatting section here, and this teaches

219
00:15:19.840 --> 00:15:23.230
us how to format what each of the letters actually means.

220
00:15:23.680 --> 00:15:25.960
So I'm going to look for the am pm.

221
00:15:25.990 --> 00:15:26.440
There it is.

222
00:15:27.160 --> 00:15:27.440
Yeah.

223
00:15:27.460 --> 00:15:30.100
So it's a lowercase a ampm of day.

224
00:15:30.280 --> 00:15:30.700
OK.

225
00:15:31.390 --> 00:15:31.780
All right.

226
00:15:31.930 --> 00:15:38.860
Now I have an error here, and I think it's because I didn't close off the yeah, I did not close off

227
00:15:38.860 --> 00:15:40.510
this pass method here.

228
00:15:40.510 --> 00:15:41.370
So let me put A..

229
00:15:41.740 --> 00:15:42.280
There we go.

230
00:15:42.700 --> 00:15:47.020
Just needed another parentheses there and looks like we're good.

231
00:15:48.760 --> 00:15:53.920
Now, I recognize that this might start, this might be looking really difficult to see, so what I'm

232
00:15:53.920 --> 00:15:58.990
going to do is I'm actually going to pull these this local date stuff down onto a new line.

233
00:15:59.290 --> 00:16:03.880
So I'm just putting my cursor right here on local data, and I will hit return once there and I will

234
00:16:03.880 --> 00:16:08.020
do it again here so that you can get a clean, a cleaner look at what I'm doing.

235
00:16:08.020 --> 00:16:10.940
It doesn't affect the the program at all, right?

236
00:16:10.960 --> 00:16:14.470
To have these spaces here, but it does certainly make it easier to read.

237
00:16:15.070 --> 00:16:15.400
All right.

238
00:16:15.400 --> 00:16:23.770
So in theory, we should now be capable of parsing our date and time information.

239
00:16:23.920 --> 00:16:31.990
And now having done that, let's add a method to our person class that will actually calculate their

240
00:16:32.020 --> 00:16:32.680
age.

241
00:16:33.280 --> 00:16:37.810
So to do that now, I will no longer have the empty, curly braces here.

242
00:16:37.810 --> 00:16:43.180
So we will hit enter and we'll just add a new method here.

243
00:16:43.210 --> 00:16:49.330
So I'm thinking, let's start simple first and just add a method that will just return there approximate

244
00:16:49.330 --> 00:16:50.770
age in years.

245
00:16:50.950 --> 00:16:56.140
I say approximate because we will drop off the months and days and all of that, and we'll just grab

246
00:16:56.140 --> 00:16:56.720
the years.

247
00:16:56.740 --> 00:16:57.090
OK.

248
00:16:57.700 --> 00:17:06.220
So let's have a method that will return, I guess, along and we'll call it get age.

249
00:17:07.420 --> 00:17:13.810
And so this method now can simply do the calculation because it will have the birth date, right?

250
00:17:13.990 --> 00:17:19.450
And I guess for now, we'll we won't even need the time, OK, so we'll just deal with the date itself.

251
00:17:20.740 --> 00:17:33.520
So to do that, we can simply use a period, right, not between local date now comma.

252
00:17:35.200 --> 00:17:43.630
Birth date, and then we can grab the years with a get years and then we need to return that.

253
00:17:45.130 --> 00:17:45.730
There we go.

254
00:17:45.910 --> 00:17:46.630
All right.

255
00:17:48.160 --> 00:17:50.560
And now that we've got that.

256
00:17:51.280 --> 00:17:55.780
Tell you what, let's stop capturing this map information here.

257
00:17:55.790 --> 00:17:57.910
And in fact, let me just clean this up a little bit.

258
00:17:57.910 --> 00:18:01.360
So I'm going, I'm selecting this map thing that we were returning.

259
00:18:01.360 --> 00:18:05.770
Plus these two plus these two lines up above that were commented out anyway.

260
00:18:05.890 --> 00:18:07.390
And it's going to delete all of that.

261
00:18:08.870 --> 00:18:09.680
For a moment.

262
00:18:11.280 --> 00:18:14.070
Looks like Anita, uncomment that now.

263
00:18:14.130 --> 00:18:14.610
OK.

264
00:18:15.180 --> 00:18:18.720
And let's see down here.

265
00:18:18.900 --> 00:18:20.490
How about no collecting?

266
00:18:22.420 --> 00:18:23.230
And.

267
00:18:26.460 --> 00:18:32.400
And so down here, we'll do a for each instead, and let me I'll just delete that for you.

268
00:18:32.560 --> 00:18:34.770
We'll make a new cleaner for each.

269
00:18:35.220 --> 00:18:35.600
All right.

270
00:18:35.610 --> 00:18:37.380
So for each.

271
00:18:37.800 --> 00:18:44.910
Let's do a system that out that print f.

272
00:18:47.440 --> 00:18:49.750
And we'll say their last name.

273
00:18:50.930 --> 00:19:00.320
Comma, first name, comma, birth, date, hyphen, age in in years.

274
00:19:00.470 --> 00:19:00.880
Right.

275
00:19:02.410 --> 00:19:04.810
And so we'll put all of that together.

276
00:19:06.570 --> 00:19:11.250
Oh, and I forgot to put this all in a lambda expression, actually, so let me put my cursor back over

277
00:19:11.250 --> 00:19:11.460
here.

278
00:19:11.470 --> 00:19:15.750
So each of the things that's coming out of this now is a person, right?

279
00:19:16.530 --> 00:19:16.940
All right.

280
00:19:16.950 --> 00:19:19.890
So then so I got the p and then the arrow here.

281
00:19:19.900 --> 00:19:24.450
So over here, we'll do that last name.

282
00:19:26.060 --> 00:19:28.470
Comma p dot first.

283
00:19:28.470 --> 00:19:28.850
Oops.

284
00:19:28.860 --> 00:19:33.210
First name comma p dot.

285
00:19:35.730 --> 00:19:36.840
Birth date.

286
00:19:39.080 --> 00:19:46.370
Comma peaked, and now we can call this age this jet age method that we just added.

287
00:19:46.400 --> 00:19:52.250
OK, so notice this we haven't done a whole lot of this kind of thing here where we're creating essentially

288
00:19:52.250 --> 00:19:53.930
a synthetic property, right?

289
00:19:54.560 --> 00:20:01.010
It's a property that we're a calculated property where we're calculating a property with its own getter

290
00:20:01.010 --> 00:20:04.850
method from other properties, though on the class.

291
00:20:04.850 --> 00:20:09.620
And this again, is kind of like some of the power of just, you know, object orientation and things.

292
00:20:09.980 --> 00:20:10.300
All right.

293
00:20:10.310 --> 00:20:15.260
So there's the age that should get printed out now.

294
00:20:16.450 --> 00:20:19.690
And let me comment out this line, 39 down here.

295
00:20:20.530 --> 00:20:24.040
And so I think we're ready to run this the sea we're skipping over the first.

296
00:20:24.100 --> 00:20:25.120
Oh well, hold on a minute.

297
00:20:25.120 --> 00:20:28.180
We want to limit this because we don't want to do this for everything.

298
00:20:28.180 --> 00:20:30.940
So yeah, let's limit this to maybe 200.

299
00:20:30.960 --> 00:20:34.960
In fact, maybe even limit it to 20 to start off with.

300
00:20:35.990 --> 00:20:39.130
Oh, and I know I need to change the path here.

301
00:20:39.160 --> 00:20:43.450
I'm on a different computer from when we started this and my path a little bit different now.

302
00:20:43.900 --> 00:20:50.110
Oh, and as I often do forget, we need a new line character there, otherwise that's not going to be

303
00:20:50.110 --> 00:20:51.310
very easy to see.

304
00:20:51.760 --> 00:20:53.080
All right, let's try that again.

305
00:20:56.220 --> 00:20:57.180
Here we go.

306
00:20:57.570 --> 00:20:59.700
So let's see what this is looking like.

307
00:21:01.510 --> 00:21:04.650
Ruben Pastore 1993 27.

308
00:21:04.980 --> 00:21:08.490
But I got the dates backward and I often make that mistake.

309
00:21:08.700 --> 00:21:11.130
So let's see here.

310
00:21:12.030 --> 00:21:16.920
Yeah, yeah, because we want to start with the earlier date, for the first, for the first parameter

311
00:21:16.920 --> 00:21:19.020
and then the later date for the second parameter.

312
00:21:19.320 --> 00:21:20.370
So that's easy enough.

313
00:21:20.640 --> 00:21:21.720
Let's just grab that.

314
00:21:21.720 --> 00:21:29.160
I will do I will cut that with a Command X and I will select this and then I can drag it right over.

315
00:21:29.760 --> 00:21:30.630
There we go.

316
00:21:30.930 --> 00:21:33.360
And then I can paste that there.

317
00:21:33.540 --> 00:21:35.280
And now let's run that again.

318
00:21:38.890 --> 00:21:41.440
And yeah, there we go.

319
00:21:43.450 --> 00:21:52.720
Eddie Copus is 59 and Carlton Fredrick is 28 and Lamar Chesney is 58 and so on and so forth.

320
00:21:52.990 --> 00:21:54.610
All right, so very cool.

321
00:21:54.880 --> 00:22:02.110
Now that we've got that, we can do all kinds of additional streams stuff with this data, right?

322
00:22:02.230 --> 00:22:08.290
So let's say for grins that we wanted to find all of the people who are older than 60.

323
00:22:08.350 --> 00:22:09.850
Can you think of how to do that?

324
00:22:10.960 --> 00:22:11.500
All right.

325
00:22:11.650 --> 00:22:20.890
So now if I wanted to do that, let's see here so we could come down here and just filter.

326
00:22:22.520 --> 00:22:30.440
P where p dot get age is greater than I forgot what I said, they're 60.

327
00:22:30.560 --> 00:22:32.090
Did I say greater than 60?

328
00:22:32.120 --> 00:22:33.320
Let's pretend like I said that.

329
00:22:33.650 --> 00:22:33.960
All right.

330
00:22:33.980 --> 00:22:35.330
And so let's run that.

331
00:22:38.950 --> 00:22:44.260
All right, so in in the current data set, apparently we don't have any people who are older than 60.

332
00:22:44.500 --> 00:22:47.660
But notice I was limiting this to just 20 people.

333
00:22:47.680 --> 00:22:48.040
Right?

334
00:22:48.850 --> 00:22:54.190
So now if I open that up to maybe 2000 people, let's let's see what we get.

335
00:22:57.790 --> 00:23:00.040
There we go now, we got got a few people.

336
00:23:00.460 --> 00:23:07.870
They all happen to be sixty one, so I guess we don't have any people older than sixty one in this in

337
00:23:07.870 --> 00:23:09.370
this set of two thousand.

338
00:23:09.820 --> 00:23:10.180
All right.

339
00:23:10.360 --> 00:23:11.320
Well, at any rate.

340
00:23:11.590 --> 00:23:16.690
Let's see if we've got any people younger than 25.

341
00:23:17.380 --> 00:23:19.180
Less than twenty five.

342
00:23:19.340 --> 00:23:24.400
And rather than printing them out now, let's just do a count of them.

343
00:23:25.000 --> 00:23:25.360
All right.

344
00:23:25.390 --> 00:23:28.180
And so to do this, we can simply do a count.

345
00:23:30.590 --> 00:23:30.920
Right.

346
00:23:31.700 --> 00:23:33.110
We can simply do a count.

347
00:23:33.380 --> 00:23:35.970
But now we'll have to capture that count.

348
00:23:36.050 --> 00:23:36.620
Of course.

349
00:23:36.630 --> 00:23:43.340
So I will just with my cursor right here at the semicolon, I can do an option Command V. And we'll

350
00:23:43.520 --> 00:23:44.150
grab that.

351
00:23:44.180 --> 00:23:48.770
So here's the variable that it just created for us, and then we'll come down here and.

352
00:23:50.970 --> 00:23:56.220
And we'll just print that out count and let's run it.

353
00:23:56.790 --> 00:24:03.390
All right, well, so there's three hundred and sixty one thousand people under the age of 25.

354
00:24:04.020 --> 00:24:13.740
Let's bring that down to twenty three hundred three thousand people under the age of 23.

355
00:24:13.980 --> 00:24:15.330
How about 22?

356
00:24:16.350 --> 00:24:16.860
None.

357
00:24:17.610 --> 00:24:18.600
Interesting.

358
00:24:18.990 --> 00:24:19.260
All right.

359
00:24:19.270 --> 00:24:24.360
So that's more than enough fun with the dates, and we kind of did a little refresher of some of the

360
00:24:24.360 --> 00:24:26.010
stream's stuff as well.

361
00:24:26.670 --> 00:24:31.590
But that just goes to show that when we open up the world of date parsing and things, then that also

362
00:24:31.590 --> 00:24:36.330
opens up the possibility for a whole lot more things that we can do in terms of querying all of that

363
00:24:36.330 --> 00:24:36.840
data.

364
00:24:36.870 --> 00:24:37.230
Right?

365
00:24:37.590 --> 00:24:37.800
All right.

366
00:24:37.800 --> 00:24:41.160
I've got a few more techniques that I want to share with you real quick here.

367
00:24:41.580 --> 00:24:49.800
So we created this date time format earlier so that we could pass these strings that were representing

368
00:24:49.800 --> 00:24:57.090
dates and times using formats that weren't already known to the Java date, time format or right.

369
00:24:57.090 --> 00:25:03.090
So we were able to specify any arbitrary pattern for dates and times.

370
00:25:03.510 --> 00:25:11.130
Now what if we also wanted to be able to take an internal date time object like a local date or a local

371
00:25:11.130 --> 00:25:15.690
time and print that back out in any arbitrary format?

372
00:25:15.870 --> 00:25:17.240
Well, we can do that as well.

373
00:25:17.250 --> 00:25:23.670
And the cool thing is we can use the same date time format that we've already created to do so.

374
00:25:24.000 --> 00:25:26.670
So I want to show you real quick how we can do that.

375
00:25:26.850 --> 00:25:32.730
And I think maybe the way we'll do it is, we'll just add another method here called something like,

376
00:25:33.390 --> 00:25:41.340
let's see, this will return a string and it'll we'll call it something like get VAB as text.

377
00:25:44.150 --> 00:25:56.030
And so this can return our birth date, but formatted, however, we want it to be as text and possibly

378
00:25:56.030 --> 00:25:59.780
what we might want to do there is just reuse the formatter that we have down here.

379
00:26:00.050 --> 00:26:05.090
So if we wanted to do that, then we should not create another one of these because that would be code

380
00:26:05.090 --> 00:26:05.900
duplication.

381
00:26:05.900 --> 00:26:07.100
And that's a bad idea.

382
00:26:07.340 --> 00:26:14.060
A better thing to do, I think, would be to convert this date time form matter into a field of our

383
00:26:14.060 --> 00:26:16.940
class and then we can reuse it all over the place.

384
00:26:17.150 --> 00:26:22.070
So I've already selected it here, and if I do an option, command f four field.

385
00:26:24.560 --> 00:26:25.160
There we go.

386
00:26:26.210 --> 00:26:33.140
I can then name it something, so I will call it date for matter and hit enter.

387
00:26:33.830 --> 00:26:41.990
And so that just brought that up here as a private static final field of the big data class.

388
00:26:42.350 --> 00:26:46.640
And while we're at it, we might as well do that with the time format as well.

389
00:26:48.740 --> 00:26:53.990
And actually, I guess I'll just select it this way, because that way, I don't have to keep track

390
00:26:53.990 --> 00:26:56.030
of where the parentheses end.

391
00:26:56.390 --> 00:26:56.700
All right.

392
00:26:56.730 --> 00:27:03.800
And so again, Option Command F. And I will call this one time format or sorry, the the words that

393
00:27:03.800 --> 00:27:07.550
I'm typing there were obscured there by a little shortcut visualization there.

394
00:27:07.550 --> 00:27:09.910
But there we go and enter.

395
00:27:09.920 --> 00:27:10.340
OK.

396
00:27:10.640 --> 00:27:16.760
And so then I can come down here to my get date of birth as text method and I can reference the date

397
00:27:16.760 --> 00:27:20.660
formatter dot format.

398
00:27:20.870 --> 00:27:27.110
So it's got this format method, which returns a string it takes as an input, a temporal access.

399
00:27:27.110 --> 00:27:33.530
Or now I haven't been talking about the various interfaces and super classes that these date and time

400
00:27:33.530 --> 00:27:35.780
classes are actually using.

401
00:27:36.080 --> 00:27:42.200
But just know that a temporal access are just essentially means a date or a time.

402
00:27:43.490 --> 00:27:50.660
So I can call the format method and then I can pass in the birthday that we already have as an internal

403
00:27:50.660 --> 00:27:55.070
field of the person class, so birthdate.

404
00:27:56.630 --> 00:27:57.260
There we go.

405
00:27:58.860 --> 00:28:04.200
And if I wanted to, I could go ahead and do the same for the time, but I'll leave that as an exercise

406
00:28:04.200 --> 00:28:04.650
for you.

407
00:28:05.220 --> 00:28:11.490
So then if we want to see these dates, that's a trivial thing to do now, right?

408
00:28:11.760 --> 00:28:13.200
So let's see here.

409
00:28:13.230 --> 00:28:15.870
Currently, we're counting the people.

410
00:28:16.050 --> 00:28:17.130
So let's do this.

411
00:28:17.130 --> 00:28:24.090
Let's limit let's limit the number of people that we're going to have in our stream to something more

412
00:28:24.090 --> 00:28:24.870
reasonable.

413
00:28:25.050 --> 00:28:26.910
For now, I'll just go for 20.

414
00:28:27.240 --> 00:28:34.410
And let's comment out our count, and let's go back to our for each, which is getting us pretty close

415
00:28:34.410 --> 00:28:36.270
to where we actually want to be anyway.

416
00:28:36.570 --> 00:28:42.630
And I'll need to pull this files that line's method off of this line where we're capturing the count

417
00:28:42.630 --> 00:28:46.120
because we're no we're no longer going to be capturing accounts.

418
00:28:46.140 --> 00:28:48.160
I'm just going to comment that out for now.

419
00:28:49.290 --> 00:28:50.870
And let's see.

420
00:28:50.880 --> 00:28:57.120
So we're we were printing last name, first name, birth, date and age.

421
00:28:57.120 --> 00:28:57.410
Yes.

422
00:28:57.420 --> 00:29:02.370
So what we can do here is simply change this this bit right here instead of birth date.

423
00:29:02.400 --> 00:29:03.960
Let's just do the.

424
00:29:07.290 --> 00:29:08.730
Dobbs text.

425
00:29:09.300 --> 00:29:09.900
There we go.

426
00:29:11.770 --> 00:29:12.670
Nice and easy.

427
00:29:13.640 --> 00:29:18.530
And then we also need to comment about this display of the count there.

428
00:29:18.830 --> 00:29:19.520
All right.

429
00:29:19.940 --> 00:29:20.630
Oh yeah.

430
00:29:21.020 --> 00:29:25.420
And I think we don't have any people less than 22 years old, right?

431
00:29:25.430 --> 00:29:29.240
So let's change this number to maybe 30 people under 30.

432
00:29:33.670 --> 00:29:34.360
There they are.

433
00:29:34.960 --> 00:29:41.050
And so now we've got their dates of birth showing up the same way that they are on the spreadsheet.

434
00:29:41.320 --> 00:29:43.510
But we could obviously change that.

435
00:29:43.690 --> 00:29:47.440
We could make those show up in whatever format we wanted to.

436
00:29:47.590 --> 00:29:50.530
And so that's the main point that I wanted to make there.

437
00:29:51.310 --> 00:29:51.770
All right.

438
00:29:51.790 --> 00:29:54.340
Let me pull this down and make a little bit of room.

439
00:29:55.120 --> 00:29:58.870
And while we're at it, let me also show you one more technique.

440
00:29:59.020 --> 00:30:03.670
Now, I'm not going to go all the way here because I'm using a record here and because I'm using a record,

441
00:30:04.150 --> 00:30:07.270
Java is creating the constructor for us.

442
00:30:07.660 --> 00:30:15.940
But I want to show you just what it could look like if we wanted to combine the birth date and the birth

443
00:30:15.940 --> 00:30:16.270
time.

444
00:30:16.270 --> 00:30:18.820
It should be pretty obvious at this point.

445
00:30:19.150 --> 00:30:20.320
But let's just do that.

446
00:30:20.320 --> 00:30:22.630
So we will have another method here.

447
00:30:22.900 --> 00:30:23.480
I don't know.

448
00:30:23.500 --> 00:30:29.320
We'll call this one get complete VAB.

449
00:30:31.520 --> 00:30:34.730
And this will return a local date time.

450
00:30:38.740 --> 00:30:43.840
And so we will return will create a local date time of.

451
00:30:44.560 --> 00:30:49.540
And then we'll simply pass in the birth date and the birth time.

452
00:30:49.900 --> 00:30:57.940
And it's as easy as that to get a complete date and time combined together as we already saw on the

453
00:30:57.940 --> 00:30:59.200
other class anyway.

454
00:31:00.070 --> 00:31:05.260
So if we weren't using a record here and we were just using a regular class, there's a good chance

455
00:31:05.260 --> 00:31:11.770
that what I might have done in that case was to take this bit of code here and put it in the constructor

456
00:31:11.770 --> 00:31:15.520
itself, so the constructor would have been passed in the local.

457
00:31:15.910 --> 00:31:20.830
So the constructor might have been passed a local date and a local time.

458
00:31:21.220 --> 00:31:26.920
And then in the implementation of that constructor, I might have taken those two bits and saved the

459
00:31:26.920 --> 00:31:32.680
date and the time as one field internally on the class using this local day time, right?

460
00:31:32.710 --> 00:31:35.760
Why bother having two fields when you can just do it with one?

461
00:31:35.770 --> 00:31:38.380
So that's an option that you could consider doing as well.

462
00:31:38.410 --> 00:31:42.250
And so I think that's all I want to show you back in this class.
