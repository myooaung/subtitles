WEBVTT
1
00:00:00.090 --> 00:00:06.840
All right, so now that we've set up our environment for this new calculator project, we can get started

2
00:00:06.960 --> 00:00:09.240
actually writing our first unit test.

3
00:00:09.870 --> 00:00:15.300
So first thing we'll need to do is to create a new class for testing.

4
00:00:15.870 --> 00:00:22.650
Automated unit tests are just code somewhat like any other code that we would write, except their purpose

5
00:00:22.650 --> 00:00:24.630
is simply to automate tests.

6
00:00:25.170 --> 00:00:29.970
So we will create a new class similarly, as we have done in the past.

7
00:00:30.120 --> 00:00:34.680
However, now we will create test classes in the test folder here.

8
00:00:35.070 --> 00:00:43.530
So right click on the test folder, go to new and select Java class, just as we've done many times

9
00:00:43.530 --> 00:00:44.070
before.

10
00:00:44.940 --> 00:00:49.380
However, this time we're going to do two things at the same time.

11
00:00:49.620 --> 00:00:55.470
Not only are we going to create a class, but we're also going to create a proper package for this class

12
00:00:55.470 --> 00:00:59.520
to live in, and we're going to do that all in one in one step.

13
00:00:59.940 --> 00:01:03.090
So first, we're going to type in the name of the package.

14
00:01:03.330 --> 00:01:11.910
Now, a common convention in professional Java programming is to name our packages based, at least

15
00:01:11.910 --> 00:01:17.430
in part on the name of the company or organization that we're working for.

16
00:01:17.760 --> 00:01:24.330
So in my case, I'm going to use my own company, Neutrino, as the starting point for this package

17
00:01:24.330 --> 00:01:24.660
name.

18
00:01:24.930 --> 00:01:29.190
We typically will use the domain name of the company backward.

19
00:01:29.400 --> 00:01:36.690
So in my case, it would be com all lowercase com that neutrino cis like that.

20
00:01:36.930 --> 00:01:44.670
Now, in addition to the domain name of the organization you're working for, you'll also typically

21
00:01:44.670 --> 00:01:49.290
have a name for the product that you're making.

22
00:01:49.500 --> 00:01:52.920
In this case, I will just refer to it as calculator.

23
00:01:53.400 --> 00:01:59.130
So I'm going to put a period and then call you later, like so.

24
00:01:59.340 --> 00:02:06.120
And then finally, one more period and then the name of the actual class that we're creating, this

25
00:02:06.120 --> 00:02:09.780
is going to be a class for testing our calculator app.

26
00:02:10.020 --> 00:02:15.390
So I'm just going to name this with a Capital C now because this is going to be the name of the actual

27
00:02:15.390 --> 00:02:19.930
class and not just the package capital C for calculator.

28
00:02:21.210 --> 00:02:26.250
And then because it's a test, the class will actually be called calculator test.

29
00:02:26.850 --> 00:02:33.630
Like so now you're welcome to use this same package name, or you could name this package name anything

30
00:02:33.630 --> 00:02:34.080
you like.

31
00:02:34.320 --> 00:02:36.390
The package name doesn't really matter.

32
00:02:36.420 --> 00:02:39.330
It's just a way to organize our code.

33
00:02:39.450 --> 00:02:44.370
So if you don't have a company or you don't want to reflect the company, you can use your first name.

34
00:02:44.370 --> 00:02:46.260
It really doesn't matter what you put here.

35
00:02:46.290 --> 00:02:46.600
OK?

36
00:02:46.620 --> 00:02:49.230
You could put Bob Dot calculator test.

37
00:02:49.530 --> 00:02:49.860
All right.

38
00:02:49.890 --> 00:02:53.400
And then once you're done doing all of that, you can hit return.

39
00:02:54.600 --> 00:03:02.550
And so now what has happened is the idea has created a new class called calculator test, and it created

40
00:03:02.550 --> 00:03:08.190
the package inferred from the fully qualified class name that we just gave it.

41
00:03:08.320 --> 00:03:10.950
Compact neutrino start calculator.

42
00:03:11.160 --> 00:03:14.970
And you can see that reflected over here in the project pane as well.

43
00:03:15.030 --> 00:03:15.410
All right.

44
00:03:15.420 --> 00:03:18.570
So now we can get started writing our first test.

45
00:03:18.840 --> 00:03:24.060
So writing unit tests is really just a matter of writing methods.

46
00:03:24.390 --> 00:03:31.710
Individual tests and individual test scenarios are coded inside of actual methods.

47
00:03:31.740 --> 00:03:40.710
OK, so the idea is to think of a scenario, a small, simple scenario to test and then write a method

48
00:03:40.710 --> 00:03:43.500
to actually test that scenario.

49
00:03:43.770 --> 00:03:45.660
So let's do our first one here.

50
00:03:45.660 --> 00:03:51.360
So what I'm going to do is I'm going to create a new line here and I'm going to give myself one line

51
00:03:51.360 --> 00:03:54.960
of extra space and I'm going to create a method now.

52
00:03:55.080 --> 00:04:03.240
J Unit test methods have to follow a general signature style, and that is that they have to be public

53
00:04:03.990 --> 00:04:05.580
and they have to be void.

54
00:04:06.360 --> 00:04:13.170
And then you can name the test methods, whatever you like now about maybe around 10 years ago or so.

55
00:04:13.410 --> 00:04:21.420
Older versions of J Unit actually required that all test methods start with the word test all lowercase.

56
00:04:21.660 --> 00:04:27.630
But that requirement has been dropped for a long time now because there's now an alternative and more

57
00:04:27.630 --> 00:04:33.120
flexible way to let the framework know which methods are meant to be unit tests.

58
00:04:33.420 --> 00:04:35.880
And so we can name these things anything.

59
00:04:36.060 --> 00:04:39.150
So now at this point, we need to kind of think for a moment.

60
00:04:39.270 --> 00:04:41.760
What is it that we actually want to test?

61
00:04:42.510 --> 00:04:49.410
So we're going to make a program that simulates a calculator, and so we need to ask ourselves, Well,

62
00:04:49.410 --> 00:04:53.370
what are some of the simplest things that a calculator can do?

63
00:04:53.820 --> 00:04:59.850
Obviously, a calculator can typically do basic math operations, such as addition subtraction multiple.

64
00:04:59.910 --> 00:05:06.380
Location and division among those for operations, I would venture to say that addition is the simplest.

65
00:05:06.920 --> 00:05:13.820
Now the next thing we need to consider is what is a very simple scenario that we could test within the

66
00:05:13.820 --> 00:05:15.170
realm of addition.

67
00:05:15.620 --> 00:05:23.030
And to my mind, the easiest thing we could probably test would be to first just test what happens when

68
00:05:23.030 --> 00:05:25.640
you add zero plus zero.

69
00:05:26.210 --> 00:05:32.690
So when you're writing unit tests, you want to usually start off with these very simple, most obvious

70
00:05:32.690 --> 00:05:33.680
scenarios.

71
00:05:33.680 --> 00:05:41.540
First and do a few of those and then maybe find some more difficult ones and eventually even find what

72
00:05:41.540 --> 00:05:44.870
are called edge cases, which we will speak about shortly.

73
00:05:45.290 --> 00:05:45.590
All right.

74
00:05:45.590 --> 00:05:52.160
So let's assume that our first unit test is going to be one in which we test the scenario of adding

75
00:05:52.160 --> 00:05:53.480
zero plus zero.

76
00:05:53.780 --> 00:06:00.260
So in that case, I would create a test method and name it something along those lines to indicate what

77
00:06:00.260 --> 00:06:01.370
the scenario is.

78
00:06:01.610 --> 00:06:13.100
So maybe I might say something like can add zero plus zero, OK, something along those lines pretty

79
00:06:13.100 --> 00:06:15.650
descriptive without being overly long.

80
00:06:16.130 --> 00:06:16.510
All right.

81
00:06:16.520 --> 00:06:18.980
So there's my my my test method.

82
00:06:19.370 --> 00:06:22.040
Now, how am I actually going to test anything?

83
00:06:22.070 --> 00:06:26.970
The only class we've actually created so far is the test class itself.

84
00:06:26.990 --> 00:06:28.370
What are we going to test, though?

85
00:06:28.910 --> 00:06:32.420
So this takes us to the next concept that I want to share.

86
00:06:32.420 --> 00:06:38.510
And we're not just going to learn how to use unit to write automated unit tests.

87
00:06:38.600 --> 00:06:46.250
We're actually going to learn a technique called test driven development or TDD in test driven development.

88
00:06:46.490 --> 00:06:47.850
We don't just write tests.

89
00:06:47.870 --> 00:06:54.770
We actually let the tests drive what actual code we write for the actual program.

90
00:06:54.800 --> 00:06:59.570
So what I mean by that is we actually write some of the test code first.

91
00:06:59.960 --> 00:07:06.100
And having done that, we then determine what actual program code needs to exist.

92
00:07:06.110 --> 00:07:10.670
OK, so we're making a distinction between test code and program code.

93
00:07:10.880 --> 00:07:16.490
And that's also the reason why we have a test folder and then a main folder.

94
00:07:16.670 --> 00:07:24.290
So our program code, the actual real code that does the real work in this case, simulating a calculator,

95
00:07:24.470 --> 00:07:31.130
that code would go in this main folder, but the code that we use to test that code goes in the test

96
00:07:31.130 --> 00:07:32.150
folder, OK?

97
00:07:32.660 --> 00:07:40.430
So what we're basically going to do is we're going to envision how we would like to be able to interact

98
00:07:40.430 --> 00:07:43.610
with our main calculator code.

99
00:07:43.940 --> 00:07:51.470
And then after we have written a little bit of test code based on that vision, we will then create

100
00:07:51.470 --> 00:07:54.020
the real code or we'll do it as we go.

101
00:07:54.410 --> 00:07:57.770
So if that's not clear, don't worry, we're going to see it right now.

102
00:07:57.890 --> 00:08:04.400
So this also will give us an opportunity, by the way, to actually practice modeling concepts in an

103
00:08:04.400 --> 00:08:05.520
object oriented way.

104
00:08:05.540 --> 00:08:08.480
So in this case, we're going to model a calculator.

105
00:08:08.510 --> 00:08:08.840
Right?

106
00:08:09.200 --> 00:08:14.240
So if we're going to model a calculator, what do you think would be a good class to create?

107
00:08:14.240 --> 00:08:16.640
And what might you want to call that class?

108
00:08:17.360 --> 00:08:22.070
I'm thinking we probably want a class that's called calculator, right?

109
00:08:22.460 --> 00:08:29.300
So I'm going to pretend like we have a class called calculator and that that class calculator has methods

110
00:08:29.300 --> 00:08:38.840
on it for doing major math operations such as add, subtract, etc. And so I'm going to refer to a class

111
00:08:38.840 --> 00:08:42.470
called calculator, even though it doesn't exist yet.

112
00:08:42.860 --> 00:08:46.640
And you can do this and you'll just have errors until you actually go and create it.

113
00:08:46.910 --> 00:08:52.700
So I'm going to write code as if I were creating an instance of this calculator.

114
00:08:52.940 --> 00:08:57.830
So I'm going to create an instance of it, and I'm going to refer to it as just calc because I don't

115
00:08:57.830 --> 00:09:00.140
feel like typing out the whole entire word.

116
00:09:00.380 --> 00:09:02.480
And then I'm going to instantiate it.

117
00:09:02.750 --> 00:09:07.280
New calculator like so.

118
00:09:07.700 --> 00:09:11.270
So I'm going to imagine that that's a class that I have.

119
00:09:11.600 --> 00:09:17.590
Now I've done this and we can see that the calculator class that I'm referring to is in red.

120
00:09:17.600 --> 00:09:23.450
And the reason for that is because it does not yet exist now to make it exist.

121
00:09:23.660 --> 00:09:29.270
All I need to do is put my cursor somewhere on this word, either either one, it doesn't matter which

122
00:09:29.270 --> 00:09:29.600
one.

123
00:09:29.990 --> 00:09:32.200
So I'll put my calculator somewhere near that word.

124
00:09:32.210 --> 00:09:35.930
And now I get this little red light bulb here.

125
00:09:35.930 --> 00:09:42.230
And if I click on it, I have options to create the calculator class and then create a few other things

126
00:09:42.230 --> 00:09:42.770
as well.

127
00:09:42.890 --> 00:09:48.980
Now, alternatively, having my cursor on the word calculator somewhere, I can also just hit on the

128
00:09:48.980 --> 00:09:56.420
keyboard option return or alt return or alt enter on Windows and Linux.

129
00:09:56.420 --> 00:09:59.420
And I get that same context menu here as well.

130
00:09:59.810 --> 00:10:03.530
And here I'm going to select create class calculator.

131
00:10:04.190 --> 00:10:04.610
All right.

132
00:10:04.790 --> 00:10:10.160
Now the ad asks me, where do I want to create this new class?

133
00:10:10.370 --> 00:10:16.130
It assumes that I want to create it in the same package as the test, and that's a good assumption that

134
00:10:16.130 --> 00:10:17.630
is a standard thing to do.

135
00:10:17.870 --> 00:10:26.420
So the package of your test for a particular class will typically be in the same package as the thing

136
00:10:26.420 --> 00:10:27.800
you're actually testing.

137
00:10:28.070 --> 00:10:30.630
So I'm going to leave that as it is.

138
00:10:30.650 --> 00:10:31.790
I like that option.

139
00:10:32.030 --> 00:10:37.220
However, where it's his target destination directory currently, it says source tests.

140
00:10:37.580 --> 00:10:39.650
Com Neutrino source calculator.

141
00:10:40.070 --> 00:10:45.350
I don't want the actual calculator class to be in the test folder.

142
00:10:45.650 --> 00:10:48.260
I want it to be in the main folder.

143
00:10:48.680 --> 00:10:53.570
So I'm going to actually change that by clicking on these three dots here.

144
00:10:55.260 --> 00:10:58.700
And now I can simply select Source Main.

145
00:10:58.900 --> 00:11:04.290
Com Neutrinos this calculator, so I'm going to choose that top option there instead.

146
00:11:04.560 --> 00:11:08.280
And then click, OK, all right, and now click OK again.

147
00:11:09.330 --> 00:11:16.320
And so now the ABC has created a new class calculator in the same package.

148
00:11:16.530 --> 00:11:22.050
But under the main folder, and I can prove that by just expanding this main folder.

149
00:11:22.050 --> 00:11:29.910
By the way, if you're ever looking at a class in the I.D. and you want to jump directly to that file

150
00:11:29.910 --> 00:11:36.510
in the project pane, one way you can do that without having to expand out and look for it over here

151
00:11:36.510 --> 00:11:40.020
is to simply click on this little target icon here.

152
00:11:40.140 --> 00:11:41.880
Select Opened File.

153
00:11:42.120 --> 00:11:49.590
So while you're in that particular file on the right hand side, if you click this that causes the project

154
00:11:49.590 --> 00:11:56.220
pain to zero in or zoom in or target that file in the Project Tree here.

155
00:11:56.430 --> 00:11:58.440
So nice little tidbit there.

156
00:11:58.620 --> 00:12:05.460
And as we can see, the calculator class is indeed underneath the same package com neutrino system calculator.

157
00:12:05.820 --> 00:12:06.060
All right.

158
00:12:06.060 --> 00:12:11.850
So we've got our test and then we've got the what's called system under test, which just means this

159
00:12:11.850 --> 00:12:18.330
is the thing that this test is testing, OK, the system under test or sue Ti.

160
00:12:18.570 --> 00:12:18.990
All right.

161
00:12:19.230 --> 00:12:23.100
So now we can jump back over to our test class.

162
00:12:23.250 --> 00:12:26.550
And I also want to show you there are a couple of ways to do that.

163
00:12:26.760 --> 00:12:32.610
Obviously, you could just click on the calculator test to bring you back over here, which by the way,

164
00:12:32.610 --> 00:12:38.280
now you'll notice that the calculator class is no longer read because now it exists.

165
00:12:38.490 --> 00:12:46.290
But another way that you can jump over to the test class from the system under test is to select command

166
00:12:46.290 --> 00:12:49.890
shift T or control shift for Windows and Linux.

167
00:12:50.100 --> 00:12:57.330
What that does is it causes the ADP to navigate to the test class from the system under test or the

168
00:12:57.540 --> 00:12:59.010
class that you're testing.

169
00:12:59.400 --> 00:12:59.890
All right.

170
00:13:00.000 --> 00:13:04.320
So now we've got our calculator instance created.

171
00:13:04.620 --> 00:13:12.240
Now we need to imagine how we would want to use it to calculate the addition of zero and zero.

172
00:13:12.750 --> 00:13:20.970
So on a new line, I'm going to write code as if there was a method on this class that could let me

173
00:13:20.970 --> 00:13:22.590
add zero plus zero.

174
00:13:22.950 --> 00:13:31.920
So I would imagine that I would want to do something like Calc Dot, add maybe and then parentheses,

175
00:13:31.920 --> 00:13:36.120
and then I'm just going to pass it a zero comma, zero like.

176
00:13:36.120 --> 00:13:44.160
So and then I'm also going to imagine that if I had this method called add that it would return an integer

177
00:13:44.400 --> 00:13:46.980
with the sum of these two numbers.

178
00:13:47.550 --> 00:13:54.360
So I'm going to put my cursor at the front of this method and I'm going to create an ENT variable and

179
00:13:54.360 --> 00:13:56.280
I'm going to name it some.

180
00:13:56.580 --> 00:14:01.440
Now you can call it whatever you like, but some makes the most sense in English, right?

181
00:14:01.770 --> 00:14:05.460
And I'm going to pretend like I could capture that sum.

182
00:14:05.850 --> 00:14:13.290
Now, as you'll notice, the word add is in red, because again, the ADP knows that there isn't an

183
00:14:13.290 --> 00:14:18.030
actual method called add on the calculator class yet.

184
00:14:18.540 --> 00:14:18.900
Right?

185
00:14:19.410 --> 00:14:26.850
And so now, just as we had done before, we can either click on this little red light bulb here, or

186
00:14:26.880 --> 00:14:33.920
we can put our cursor on the word add and then use option return or alt enter.

187
00:14:34.530 --> 00:14:43.260
And we can choose create method, add in calculator and the ADP will offer to get this method started

188
00:14:43.260 --> 00:14:49.620
for us someone to select that now, and it jumps us back into the calculator class.

189
00:14:49.860 --> 00:14:52.290
Now, don't hit enter yet.

190
00:14:52.800 --> 00:14:58.320
I've seen a lot of developers for some reason they just immediately hit enter when they let the ADP

191
00:14:58.320 --> 00:14:59.700
generate code like this.

192
00:14:59.880 --> 00:15:06.480
Don't do that because the idea actually waiting to ask us a few questions to confirm.

193
00:15:06.510 --> 00:15:08.370
Is this actually what we want?

194
00:15:08.640 --> 00:15:15.990
So the first question it's asking is, OK, I can infer from the way that you wrote that add method

195
00:15:15.990 --> 00:15:18.060
in the test that you want.

196
00:15:18.060 --> 00:15:21.690
This add method to return an integer.

197
00:15:21.900 --> 00:15:23.010
Is that correct?

198
00:15:23.220 --> 00:15:26.620
So that's why this is kind of highlighted in blue and everything.

199
00:15:26.640 --> 00:15:34.950
If we do want it to return and we can hit tab, otherwise we could choose a different data type here.

200
00:15:35.130 --> 00:15:41.430
So I'm going to hit tab to tab over to the next question, so to speak, because I'm OK with that.

201
00:15:41.640 --> 00:15:49.260
Now it's asking me, is the first parameter that you want to be able to pass into this method of type

202
00:15:49.260 --> 00:15:49.650
entry?

203
00:15:49.830 --> 00:15:50.780
And yes, it is.

204
00:15:50.790 --> 00:15:52.800
So I'm going to tab again now.

205
00:15:52.800 --> 00:15:54.360
It's asking me, what do I want?

206
00:15:54.460 --> 00:15:56.140
Call that first parameter.

207
00:15:56.290 --> 00:16:04.810
I do not like the name or label I, so I'm going to name it number one, and then I'm on to tap again.

208
00:16:05.350 --> 00:16:06.630
And yes, I do.

209
00:16:06.640 --> 00:16:09.700
I do want the second parameter to be an ENT as well.

210
00:16:09.880 --> 00:16:15.400
And then I'm going to tap once more and it's asking for the name of the second parameter, and I'm going

211
00:16:15.400 --> 00:16:17.170
to name this number two.

212
00:16:17.290 --> 00:16:22.630
Now these names don't matter just you, but you probably want to give it a somewhat meaningful name.

213
00:16:22.750 --> 00:16:23.170
All right.

214
00:16:23.350 --> 00:16:27.370
Now I'm done, and now I can hit return.

215
00:16:27.550 --> 00:16:36.160
And so the last thing the ADC does now is it generates just enough boilerplate code so that this method

216
00:16:36.160 --> 00:16:38.230
won't be in error.

217
00:16:38.500 --> 00:16:43.030
OK, so it just generated some default basic code for us.

218
00:16:43.240 --> 00:16:51.130
Now, one of the principles in test driven development is we don't write any more code than our test

219
00:16:51.130 --> 00:16:52.390
demands of us.

220
00:16:52.750 --> 00:17:00.100
So even though I can clearly see that what we have in this code right now isn't going to satisfy every

221
00:17:00.100 --> 00:17:03.280
test scenario that we could throw at this method.

222
00:17:03.460 --> 00:17:10.300
I'm going to leave it alone for now until we write a test that forces me to write more code here.

223
00:17:10.390 --> 00:17:15.670
OK, so for right now, I'm going to leave this and then I'm going to jump back over to the test class.

224
00:17:16.990 --> 00:17:22.840
And now suddenly, the add method is no longer read because now we've created that method.

225
00:17:23.380 --> 00:17:29.290
And now finally, we'll need one more line of code, and this is one of the most important lines of

226
00:17:29.290 --> 00:17:29.650
code.

227
00:17:29.860 --> 00:17:37.900
So when we write a test, the basic idea of of testing is that we set up some scenario.

228
00:17:38.080 --> 00:17:44.530
OK, so in this case, we're setting up a scenario of having a calculator and entering two zeros and

229
00:17:44.530 --> 00:17:47.500
asking it to add those two numbers together.

230
00:17:47.830 --> 00:17:52.030
But the final thing we must do is we need to make an assertion.

231
00:17:52.210 --> 00:18:01.330
We need to assert that if I had a calculator and I told that calculator object to add zero and zero,

232
00:18:01.540 --> 00:18:07.000
I assert that the sum of those two numbers would be, in this case, zero.

233
00:18:07.180 --> 00:18:08.410
That's my assertion.

234
00:18:09.280 --> 00:18:11.770
This is how we actually test something.

235
00:18:12.010 --> 00:18:20.800
So now we need to tell the unit test that we're writing to assert that zero plus zero equals zero.

236
00:18:21.130 --> 00:18:28.180
And the way we do that is by using a static method that comes with the J Unit framework.

237
00:18:28.270 --> 00:18:34.270
So so far, we haven't actually done anything that's specific to a unit, but we're about two now.

238
00:18:34.300 --> 00:18:46.060
So if we reference a method called assert equals and then use parentheses because it is a method and

239
00:18:46.060 --> 00:18:51.260
then we move our cursor onto this word, assert equals.

240
00:18:51.280 --> 00:18:57.570
Now again, we can do an option return and we have a few options.

241
00:18:57.580 --> 00:19:01.420
Now we get the option to create a method called assert equals.

242
00:19:01.600 --> 00:19:05.230
But this time, we don't want to create that method because the method already exists.

243
00:19:05.230 --> 00:19:06.910
We just need to import it.

244
00:19:07.630 --> 00:19:11.320
So we have a second option here import static method.

245
00:19:11.590 --> 00:19:13.330
And if you click on that.

246
00:19:14.890 --> 00:19:23.140
Now, the I.D. says I have found a static method called Assert Equals, which lives on a class called

247
00:19:23.140 --> 00:19:24.040
assertions.

248
00:19:24.310 --> 00:19:34.180
And by the way, this assertions class comes to us via the J Unit library that we imported at the beginning

249
00:19:34.180 --> 00:19:35.200
of this module.

250
00:19:35.530 --> 00:19:37.720
OK, so that's where that's coming from.

251
00:19:38.140 --> 00:19:44.710
And so we're going to tell the I.D. to go ahead and import this method for us.

252
00:19:44.890 --> 00:19:49.000
Now, we haven't explicitly seen importing methods before.

253
00:19:49.000 --> 00:19:54.520
We've imported classes, but this is the first time we're importing a method and specifically we're

254
00:19:54.520 --> 00:19:59.980
importing a static method, which is the only type of method that you can actually import.

255
00:20:00.340 --> 00:20:02.080
So let's go ahead and select that.

256
00:20:03.160 --> 00:20:05.580
And now notice what happens on Line three.

257
00:20:05.590 --> 00:20:12.340
We have this new line here import static, then a big, long, fully qualified class name, followed

258
00:20:12.340 --> 00:20:16.330
by the name of a specific method on this class.

259
00:20:16.900 --> 00:20:25.000
So what we're doing here is we're simply telling the ADP I want to be able to refer to a static method

260
00:20:25.180 --> 00:20:31.240
on this class without having to refer to the method using the entire class name.

261
00:20:31.270 --> 00:20:38.830
So in other words, we could have typed assertions dot assert equals blah blah blah.

262
00:20:38.860 --> 00:20:44.980
We could have done this, in which case I would have had to import the assertions class.

263
00:20:45.250 --> 00:20:50.290
And then every time I wanted to use this assert equals method static method.

264
00:20:50.560 --> 00:20:54.130
I would have had to type out assertions that assert equals.

265
00:20:54.340 --> 00:21:00.080
That's the typical way that you would often refer to any static method.

266
00:21:00.130 --> 00:21:09.340
However, Java does allow us to import a static method so that we can drop the class name part of it.

267
00:21:09.520 --> 00:21:12.250
So it's really just another convenient shorthand.

268
00:21:12.670 --> 00:21:13.090
All right.

269
00:21:13.420 --> 00:21:20.950
So now if I put my cursor here inside of the parentheses and I do a command piece so that I can see

270
00:21:20.950 --> 00:21:28.570
what are the parameters that I can enter into this method, I see that there are a few different sets

271
00:21:28.570 --> 00:21:30.490
of parameters that I can choose from.

272
00:21:30.760 --> 00:21:36.820
And the first choice here is I can pass in a number in this case, a short.

273
00:21:37.330 --> 00:21:39.250
And let's see if we scroll through here.

274
00:21:39.250 --> 00:21:46.360
We can see that there are many versions of this method that take various data types, such as short,

275
00:21:46.570 --> 00:21:48.790
byte, long and cetera.

276
00:21:49.060 --> 00:21:52.300
But the basic thing is you can pass in two numbers.

277
00:21:52.630 --> 00:21:56.680
The first number is a number that you're expecting to see.

278
00:21:56.770 --> 00:22:01.240
And then the second parameter is the actual number that you received.

279
00:22:01.270 --> 00:22:01.720
OK.

280
00:22:01.990 --> 00:22:10.900
So knowing that if I click here to dismiss that little pop up, what I'm expecting here in this case

281
00:22:10.900 --> 00:22:14.260
is that zero plus zero equals zero.

282
00:22:15.010 --> 00:22:17.860
And then if I put a comma here now what?

283
00:22:18.070 --> 00:22:23.110
What actually is being received is whatever value is in this sum here.

284
00:22:23.320 --> 00:22:28.450
So for the second parameter, I'm going to simply type some.

285
00:22:29.510 --> 00:22:34.330
Like so and then I can close that out with a semicolon.

286
00:22:34.350 --> 00:22:41.720
OK, so we're saying that we expect zero will be the sum of this calculation.

287
00:22:41.840 --> 00:22:44.120
That's what we're saying or looked added.

288
00:22:44.180 --> 00:22:54.350
Or if you want to look at it in another way, we're saying that I expect that the sum equals zero.

289
00:22:54.680 --> 00:23:01.280
OK, so how, however you want to look at it now, there is one more optional parameter that we can

290
00:23:01.280 --> 00:23:03.890
pass into this method.

291
00:23:04.190 --> 00:23:12.110
If you put your cursor on here and do a command p again, you will see that you can also supply.

292
00:23:12.350 --> 00:23:18.830
I know this might not be very easy to look at, so currently we're using this version of the method

293
00:23:18.980 --> 00:23:22.520
one that accepts accepts two integers.

294
00:23:22.790 --> 00:23:23.230
OK.

295
00:23:23.480 --> 00:23:33.710
But there's another version of this that accepts two integers, plus a third parameter, which is a

296
00:23:33.710 --> 00:23:34.490
message.

297
00:23:34.970 --> 00:23:44.750
Now this is to be used if you want to be able to provide a custom message in the event that this assertion

298
00:23:45.350 --> 00:23:48.110
turns out to be false or not true.

299
00:23:48.410 --> 00:23:58.610
So, for example, if I put a comma here, then I can say something like I was expecting sum of zero

300
00:23:58.610 --> 00:24:01.940
or I could type it, or I could use the number, something like that.

301
00:24:02.120 --> 00:24:02.500
OK.

302
00:24:03.080 --> 00:24:11.300
This comes in handy, particularly in cases where you might have multiple assertions in one test method

303
00:24:11.510 --> 00:24:16.940
and you want to pinpoint which of the multiple assertions in this one method was the failure.

304
00:24:17.390 --> 00:24:19.820
You would then see this method.

305
00:24:20.030 --> 00:24:23.090
So maybe we'll look at what that looks like shortly.

306
00:24:23.780 --> 00:24:24.180
OK.

307
00:24:24.200 --> 00:24:25.310
But this is optional.

308
00:24:25.340 --> 00:24:31.250
You don't have to have this, especially in a case where you only have one assertion in the test method

309
00:24:31.250 --> 00:24:31.790
itself.

310
00:24:32.600 --> 00:24:33.200
All right.

311
00:24:33.590 --> 00:24:41.720
Now, one last thing that we require in order to be able to actually run this test, we need to flag

312
00:24:41.720 --> 00:24:44.270
this method as being a unit test.

313
00:24:44.510 --> 00:24:50.210
If you recall, at the beginning of this, I stated that quite a number of years ago, earlier versions

314
00:24:50.210 --> 00:24:57.590
of J Unit actually required that your test methods started with the word test like this?

315
00:24:57.830 --> 00:24:58.280
OK.

316
00:24:58.310 --> 00:25:00.410
That is no longer a requirement, though.

317
00:25:00.650 --> 00:25:07.670
And the reason it isn't is because we can now indicate which methods should be tested by using a little

318
00:25:07.670 --> 00:25:10.460
snippet of code, which is called an annotation.

319
00:25:10.700 --> 00:25:12.350
Let me show you what that looks like.

320
00:25:12.530 --> 00:25:22.070
So if you put your cursor right above this test method and then type at and then capital test for test

321
00:25:22.340 --> 00:25:25.160
like, so you should have this dropdown here.

322
00:25:25.310 --> 00:25:33.080
And then if the word test by itself, as I have here, is the first selected option, you can hit return

323
00:25:33.090 --> 00:25:34.610
or or click that.

324
00:25:34.850 --> 00:25:42.650
And now what that just did is that just imported this annotation right here on Line three, import blah

325
00:25:42.650 --> 00:25:44.240
blah blah dot test.

326
00:25:44.600 --> 00:25:53.300
So an annotation is a little snippet of code basically, which serves as almost like metadata or a hint

327
00:25:53.510 --> 00:25:55.910
for, in this case, a method.

328
00:25:56.090 --> 00:25:59.450
Now there are annotations that can be used in a number of ways.

329
00:25:59.660 --> 00:26:05.000
They can be used to annotate a method or a field or even a parameter.

330
00:26:05.210 --> 00:26:13.850
So the way that the sanitation will be used is that when we start to run this test or this test class

331
00:26:14.450 --> 00:26:24.500
J Unit, the Framework Jane Unit will start up and it will actually scan this code looking for all methods

332
00:26:24.500 --> 00:26:28.480
that are annotated as a test, such as on Line nine.

333
00:26:28.490 --> 00:26:36.170
And then that's how J Unit will know which methods it should call in order to run our tests.

334
00:26:36.530 --> 00:26:43.910
So if we don't have the test annotation on this method, then the method won't be run as a test.

335
00:26:44.090 --> 00:26:49.670
And incidentally, these annotations don't necessarily have to be above the method.

336
00:26:49.760 --> 00:26:56.630
We could put it to the side, although I don't personally usually like that format.

337
00:26:56.870 --> 00:27:03.200
But as long as it's on or above the test method, that's what counts.

338
00:27:03.680 --> 00:27:03.950
All right.

339
00:27:03.950 --> 00:27:07.100
So I'm going to put that back the way that I prefer it to be.

340
00:27:07.310 --> 00:27:13.280
And I would say this is probably the more common way you'll usually see annotations for methods.

341
00:27:13.460 --> 00:27:14.060
All right.

342
00:27:14.330 --> 00:27:20.300
And as soon as we put that annotation there, these little icons, these little play buttons showed

343
00:27:20.300 --> 00:27:25.760
up because that that let the aid know that, OK, you're writing a test, right?

344
00:27:26.780 --> 00:27:27.140
All right.

345
00:27:27.140 --> 00:27:28.130
So now.

346
00:27:28.310 --> 00:27:29.240
We can run this.

347
00:27:29.990 --> 00:27:38.990
Now we have the option, just as with regular code to run an individual method or run all of the tests

348
00:27:38.990 --> 00:27:43.580
on a class, in this case we only have one, so it doesn't really matter.

349
00:27:43.790 --> 00:27:46.310
I'm going to go ahead and just click on this one here.

350
00:27:48.170 --> 00:27:48.620
OK.

351
00:27:49.010 --> 00:27:55.670
And so what happened was this little pane opened up at the bottom, and it gives us a little report.

352
00:27:56.030 --> 00:27:59.880
And the report says, Hey, here are the results of running the tests.

353
00:27:59.900 --> 00:28:02.450
They took 161 milliseconds to run.

354
00:28:02.480 --> 00:28:11.240
I ran tests on a class called calculator test and I ran one test method can add zero plus zero and it's

355
00:28:11.240 --> 00:28:15.380
green with this green checkmark, which means that that test passed.

356
00:28:15.770 --> 00:28:22.250
And so congratulations, you have now successfully written and run your first unit test.

357
00:28:22.850 --> 00:28:23.230
All right.

358
00:28:23.240 --> 00:28:30.200
So in the next lesson, we will write a few more tests and we'll talk a little bit more about TDD test

359
00:28:30.200 --> 00:28:33.290
driven development and how we can test more scenarios.

360
00:28:33.320 --> 00:28:34.520
So I will see you there.
