1
00:00:00,540 --> 00:00:04,530
OK, so now let's move on to exercise 20.

2
00:00:05,220 --> 00:00:13,740
So this one says, per the cannot move c one night to invalid square, implement the ability to prevent

3
00:00:13,740 --> 00:00:20,220
the night from being moved to invalid squares, such as from C one to D four.

4
00:00:20,280 --> 00:00:21,660
Now let's just see what that would look like.

5
00:00:21,660 --> 00:00:26,740
So from C one to D four, which would be up here?

6
00:00:26,760 --> 00:00:31,800
Now remember this little dot here is for this depiction of this white knight here.

7
00:00:32,040 --> 00:00:34,590
But we're pretending like we've got a night down here.

8
00:00:34,590 --> 00:00:41,400
So to D four would be invalid because that would not be in the pattern of one, one and two, right?

9
00:00:41,400 --> 00:00:47,760
That would be one one one or one two three and then over, which is not the correct pattern.

10
00:00:48,000 --> 00:00:53,220
So therefore it would not be a valid square to move to from C one.

11
00:00:53,910 --> 00:00:59,360
So what we're going to do then in this exercise is we're going to first write a test to first place

12
00:00:59,370 --> 00:01:05,130
a night at C one, then request the board to move it to D four and then see what happens essentially.

13
00:01:05,310 --> 00:01:07,320
OK, so here's the test.

14
00:01:07,710 --> 00:01:14,910
And so here I am, creating a board, creating a night, asking the board to add the night to see one,

15
00:01:15,270 --> 00:01:22,050
then asserting that the night is starting off at C one, which should be true, then requesting that

16
00:01:22,050 --> 00:01:28,920
the board move the night to D for then asserting that D4 should be null.

17
00:01:28,960 --> 00:01:33,900
OK, so in other words, I'm asserting that even though I asked the board to move the night to D for

18
00:01:34,050 --> 00:01:36,000
the board should essentially ignore me.

19
00:01:36,510 --> 00:01:40,200
And so when I check to say, Hey board, what's that d for?

20
00:01:40,410 --> 00:01:42,930
The answer should be nothing which is null.

21
00:01:43,410 --> 00:01:49,230
And then if I assert that the P Z C one is a night, then that should be true.

22
00:01:49,240 --> 00:01:54,720
So all I'm doing here is just asserting that if I asked the board to move my night to an invalid square,

23
00:01:54,720 --> 00:01:56,550
nothing's going to change that.

24
00:01:56,550 --> 00:01:57,930
It will simply ignore me.

25
00:01:58,230 --> 00:01:58,530
All right.

26
00:01:58,530 --> 00:02:02,640
So let's look a little bit more now at how that should be working.

27
00:02:03,270 --> 00:02:03,600
All right.

28
00:02:03,600 --> 00:02:05,160
So here's the move here.

29
00:02:05,160 --> 00:02:11,220
We're grabbing the origin and the destination coordinates, and then we're checking if that's a friendly

30
00:02:11,220 --> 00:02:12,270
square, which it's not.

31
00:02:12,720 --> 00:02:15,670
We're checking if it's an enemy square, which it also is not.

32
00:02:15,690 --> 00:02:21,690
And so finally, we come down here to the perform actual move again just as before.

33
00:02:21,840 --> 00:02:28,980
But now this condition here is actually going to do its job a little bit more because now we're going

34
00:02:28,980 --> 00:02:38,550
to check is the destination square, which is D4 contained essentially within the array of valid moves.

35
00:02:38,910 --> 00:02:46,170
This method here is going to do that check, and it's going to determine that no, this destination

36
00:02:46,170 --> 00:02:52,170
of D4 is not contained within all of the calculated valid moves for our night.

37
00:02:52,470 --> 00:02:59,790
Considering where it currently is located, and therefore none of this here is going to be executed,

38
00:03:00,090 --> 00:03:02,880
our thread is just going to evaluate this.

39
00:03:03,240 --> 00:03:09,840
It's going to evaluate to false and then the thread will jump right over all of that and exit this method

40
00:03:09,840 --> 00:03:11,730
without having done anything at all.

41
00:03:12,670 --> 00:03:13,090
OK.

42
00:03:13,300 --> 00:03:16,570
And so that is why this code is here.

43
00:03:16,750 --> 00:03:22,420
Now let me also make one other point clear again, and I may mention this a few more times sorry, you

44
00:03:22,420 --> 00:03:28,960
are seeing my code written to satisfy all 22 as of the time of this recording.

45
00:03:28,960 --> 00:03:32,230
All 22 exercises under exercise.

46
00:03:32,260 --> 00:03:32,620
Eight.

47
00:03:32,830 --> 00:03:35,620
All 22 sub exercises under exercise.

48
00:03:35,630 --> 00:03:36,010
Eight.

49
00:03:36,130 --> 00:03:42,220
Let me put it that way, so I don't want you to have the impression that I wrote all of this code and

50
00:03:42,220 --> 00:03:44,440
and then I went and wrote all of those tests.

51
00:03:44,830 --> 00:03:48,160
I wrote this code right here in this way.

52
00:03:48,430 --> 00:03:54,640
Only once I encountered the exercise that required me to implement this kind of a check.

53
00:03:54,670 --> 00:03:55,120
OK.

54
00:03:55,240 --> 00:04:01,210
So I wrote this code 90 percent adherent to TDD principles.

55
00:04:01,300 --> 00:04:03,100
At least 90 percent, in fact.

56
00:04:03,280 --> 00:04:03,610
OK.

57
00:04:04,000 --> 00:04:04,270
All right.

58
00:04:04,280 --> 00:04:07,420
So jumping back over to the test, so that's how that is working.

59
00:04:07,570 --> 00:04:14,470
And now we can jump to the next one, which is per the cannot move c one night to friendly occupied

60
00:04:14,470 --> 00:04:15,030
square.

61
00:04:15,190 --> 00:04:20,530
Implement the ability to prevent the knight from being moved to a square that is already occupied by

62
00:04:20,530 --> 00:04:22,630
another chess piece of the same color.

63
00:04:22,750 --> 00:04:23,620
A friendly.

64
00:04:23,650 --> 00:04:24,070
OK.

65
00:04:24,370 --> 00:04:26,530
So again, we'll start on C one.

66
00:04:26,680 --> 00:04:34,540
But now we will also simulate the idea that there is a pawn at D3 and we are requesting to move the

67
00:04:34,540 --> 00:04:35,950
knight to D3.

68
00:04:35,980 --> 00:04:36,370
OK?

69
00:04:36,490 --> 00:04:38,650
Upon of the same color as the Knight.

70
00:04:39,220 --> 00:04:42,340
So turning back to the test, let's see how I set that one up.

71
00:04:42,700 --> 00:04:50,800
I create a chess board, then I create a pawn who is white, and I add that pawn to the board at D3.

72
00:04:51,280 --> 00:04:56,230
Then I create a knight who is also white and add him to the board at See One.

73
00:04:56,830 --> 00:05:01,060
Then I assert that I have the Knight at sea one.

74
00:05:01,810 --> 00:05:06,310
Then I request the board to move the knight to the three.

75
00:05:06,730 --> 00:05:14,050
Then I assert that at D3, I have a pawn still not a knight, but a pawn.

76
00:05:14,290 --> 00:05:18,970
And I also assert that at C one, I still have the knight.

77
00:05:19,390 --> 00:05:25,480
So in other words, I'm asserting that even though I requested the board to move my knight to D3, in

78
00:05:25,480 --> 00:05:28,360
actuality, nobody moved anywhere at all.

79
00:05:28,720 --> 00:05:30,950
That's what this test is testing.

80
00:05:30,970 --> 00:05:31,300
All right.

81
00:05:31,330 --> 00:05:35,470
And so now let's go see how I implemented that in a little bit more detail.

82
00:05:35,560 --> 00:05:42,700
So again, I grabbed the origin of the Knight, which would be c one and I grabbed the destination,

83
00:05:42,700 --> 00:05:43,800
which is D3.

84
00:05:43,810 --> 00:05:51,610
And then I check if destination is occupied by a friendly and I pass in the the the piece and the destination,

85
00:05:51,970 --> 00:05:54,580
then just don't don't do anything, just return.

86
00:05:54,580 --> 00:05:59,410
Which means to exit this this move method without having done anything, OK?

87
00:05:59,620 --> 00:06:04,480
So really, the magic here is contained all in this one method.

88
00:06:04,490 --> 00:06:07,360
So let's jump into that method and see what it's really doing.

89
00:06:07,570 --> 00:06:09,010
So it's not a big method at all.

90
00:06:09,550 --> 00:06:10,540
So let's see, though.

91
00:06:10,630 --> 00:06:13,030
So I pass in the piece and then the destination.

92
00:06:13,040 --> 00:06:22,030
So what I'm doing is first I ask the chess boards internal two-dimensional array to give me the piece

93
00:06:22,030 --> 00:06:24,670
at our destination coordinates here.

94
00:06:24,680 --> 00:06:28,360
OK, so I just say destination, I get X and get Y.

95
00:06:29,080 --> 00:06:31,090
And so I get the piece here.

96
00:06:31,600 --> 00:06:38,050
So then I'm really just applying a little bit of logic here and I'm using and and here, OK?

97
00:06:38,080 --> 00:06:41,920
So two ampersand together is a logical end.

98
00:06:42,220 --> 00:06:42,610
All right.

99
00:06:42,850 --> 00:06:51,010
So what this is saying is that if the destination piece is not null, meaning it, it's occupied already,

100
00:06:51,160 --> 00:06:51,490
right?

101
00:06:51,500 --> 00:06:59,740
D3 in this case is occupied already, and its color is the same as the color of the piece that we're

102
00:06:59,740 --> 00:07:02,290
trying to move, which in this case is the night.

103
00:07:02,620 --> 00:07:03,750
So that's what I'm saying here.

104
00:07:03,790 --> 00:07:10,720
If the destination piece that we got out of here, which might not be null in this case, has the color

105
00:07:10,720 --> 00:07:17,770
that is the same as the night or the piece that we're trying to move, then return true.

106
00:07:17,950 --> 00:07:20,380
Now you don't see me explicitly saying true.

107
00:07:20,590 --> 00:07:21,910
That's because I don't need to.

108
00:07:22,150 --> 00:07:27,510
This whole entire expression will evaluate to a true if it's true, right?

109
00:07:27,670 --> 00:07:32,920
So if we have a destination piece that isn't null and if the colors match, then that's all going to

110
00:07:32,920 --> 00:07:33,480
be true.

111
00:07:33,490 --> 00:07:34,570
So return a true.

112
00:07:34,810 --> 00:07:39,400
Otherwise, we turn a false if either of these two clauses are not true.

113
00:07:39,430 --> 00:07:45,250
OK, so this is kind of a neat way of being able to say if without actually having to say if at all.

114
00:07:45,460 --> 00:07:52,630
OK, I may not have ever explicitly said this to you, but obviously, right, if you use an ampersand

115
00:07:52,630 --> 00:07:58,420
test like this, is this true and is this true, then you know what you will get out of?

116
00:07:58,420 --> 00:07:59,710
There is a Boolean.

117
00:08:00,070 --> 00:08:08,950
One other nice thing to note about this construct here on Line Fifty Seven is that if the destination

118
00:08:09,190 --> 00:08:11,890
coordinates on the board are empty.

119
00:08:12,120 --> 00:08:18,510
As was the case for our earlier tests, then this destination piece here would be null.

120
00:08:18,780 --> 00:08:25,320
And so when the thread comes down here and evaluates this bit right here, destination piece would be

121
00:08:25,320 --> 00:08:25,740
null.

122
00:08:26,160 --> 00:08:31,080
And in that case, the thread will not even evaluate the rest of this.

123
00:08:31,110 --> 00:08:37,440
It doesn't need to, because with a logical and operation, if the first expression that the thread

124
00:08:37,440 --> 00:08:41,790
evaluates is false, then the thread can stop right there, right?

125
00:08:41,790 --> 00:08:46,680
Because it knows well, if this is zero, then there's no point in evaluating this because the end is

126
00:08:46,680 --> 00:08:47,640
going to be false.

127
00:08:48,000 --> 00:08:50,790
And so that's actually kind of a nice thing to keep in mind.

128
00:08:50,790 --> 00:08:58,200
Sometimes if the thing that you wanted to do on this side of the and operation was expensive, like

129
00:08:58,200 --> 00:09:05,430
a very expensive calculation or call to somewhere, you don't want that evaluation to take place if

130
00:09:05,430 --> 00:09:07,680
this one here is false on the left.

131
00:09:07,950 --> 00:09:12,540
So just make sure that you put your cheaper evaluation, perhaps on the left.

132
00:09:12,750 --> 00:09:14,550
That's kind of, I guess, part of the point.

133
00:09:14,580 --> 00:09:14,970
All right.

134
00:09:15,180 --> 00:09:17,370
So jumping back over here then?

135
00:09:17,640 --> 00:09:23,730
So now we see that if the destination is occupied by friendly, which in this case it is, then don't

136
00:09:23,730 --> 00:09:26,820
do anything, just return, which is what we're going to get there.

137
00:09:27,060 --> 00:09:29,550
And so that's how this test works.

138
00:09:29,850 --> 00:09:30,220
All right.

139
00:09:30,240 --> 00:09:34,050
And then let's go look at this last one then can move.

140
00:09:34,050 --> 00:09:37,260
See one night to enemy occupied square.

141
00:09:37,530 --> 00:09:44,160
So this is saying that you can move to an enemy occupied square.

142
00:09:44,190 --> 00:09:44,460
All right.

143
00:09:44,460 --> 00:09:51,450
So up here we were saying you cannot move to a friendly occupied square, but you can move to an enemy

144
00:09:51,450 --> 00:09:52,710
occupied square.

145
00:09:52,920 --> 00:09:56,260
That's how you capture your enemies pieces, right?

146
00:09:56,280 --> 00:09:58,530
That's so you've got to be allowed to do that.

147
00:09:58,800 --> 00:10:00,990
So let's see how this test works.

148
00:10:01,320 --> 00:10:07,440
So again, we create a chessboard, and upon this time, I'm creating a black pawn, though placing

149
00:10:07,440 --> 00:10:08,250
it at D3.

150
00:10:08,250 --> 00:10:13,590
So just like we did up here, except now the pawn is black, creating a night, a white knight on c

151
00:10:13,590 --> 00:10:20,190
one asserting that we're starting off with that night at sea one then requesting the board move our

152
00:10:20,190 --> 00:10:23,850
knight to the three, and then we can assert a couple of things.

153
00:10:24,120 --> 00:10:28,890
Now here I wanted to assert something a little more indirect.

154
00:10:29,220 --> 00:10:38,640
So what I wanted to do here was to assert that if we move our knight onto an enemy square, that we

155
00:10:38,640 --> 00:10:47,490
are going to capture the enemy that was on that square and that we would collect those enemy captured

156
00:10:47,490 --> 00:10:51,870
pieces somewhere, or at least the board would capture them for us.

157
00:10:51,900 --> 00:10:52,300
OK.

158
00:10:52,650 --> 00:10:59,340
And so if you can imagine that every time you move a piece onto an enemy square and capture that enemy

159
00:10:59,340 --> 00:11:06,240
piece, that those enemy pieces are being collected into a holding tank, a jail cell or something like

160
00:11:06,240 --> 00:11:06,600
that.

161
00:11:06,900 --> 00:11:14,670
So what I wanted was to be able to ask the board, give me all of the captured pieces for white, OK,

162
00:11:15,060 --> 00:11:17,730
because my my knight is white in this case.

163
00:11:17,730 --> 00:11:19,650
So give me all the captured pieces here.

164
00:11:19,800 --> 00:11:28,690
And then I wanted to be able to assert that one of the pieces that got captured for white is the pawn

165
00:11:28,710 --> 00:11:31,100
that started off at D3.

166
00:11:31,110 --> 00:11:34,410
And so that's what I'm doing here now to do that checking.

167
00:11:34,560 --> 00:11:39,120
I wrote this method, which again, is really just the same method that we've been using all along to

168
00:11:39,120 --> 00:11:40,440
kind of iterate over things.

169
00:11:40,620 --> 00:11:45,930
Now, this time, I ended up writing a one off version only because I kind of wanted to see what the

170
00:11:45,930 --> 00:11:50,100
difference in feel would be for how I named this method.

171
00:11:50,280 --> 00:11:55,290
What I really should have done, though, was to keep working on this and consolidate this method with

172
00:11:55,290 --> 00:11:59,550
the other method that does pretty much the exact same thing, which is currently on the chess piece.

173
00:11:59,850 --> 00:12:00,750
Superclass.

174
00:12:00,960 --> 00:12:02,790
And maybe I'll do that with you.

175
00:12:02,790 --> 00:12:06,180
I don't know yet, but but that's what I should have done, because it's the same method, really.

176
00:12:06,210 --> 00:12:06,570
All right.

177
00:12:06,570 --> 00:12:09,680
So this method again, is this iterating over looking for a match?

178
00:12:09,690 --> 00:12:11,760
Also, I did the matching differently.

179
00:12:11,760 --> 00:12:19,080
This time I use the equals operator here, which tests that two objects are the exact same object in

180
00:12:19,080 --> 00:12:22,960
memory, and not that two objects share the same properties.

181
00:12:23,010 --> 00:12:23,400
OK.

182
00:12:23,520 --> 00:12:28,770
And the reason I did that is because at least for this test, I literally knew that the pond that I

183
00:12:28,770 --> 00:12:34,140
created here should be the same pond that I'm getting out of here, though that would have been true

184
00:12:34,140 --> 00:12:37,680
pretty much for the other places where I did this kind of looping as well.

185
00:12:37,830 --> 00:12:39,960
But again, I was just trying some different things here.

186
00:12:39,990 --> 00:12:41,640
So that's basically what it comes down to.

187
00:12:41,790 --> 00:12:47,610
So don't read too deeply into Oh wow, he used equals operator here, but he used the dot equals method

188
00:12:47,610 --> 00:12:48,420
in the other place.

189
00:12:48,630 --> 00:12:53,820
So honestly, I likely will go ahead and consolidate these looping methods somewhere.

190
00:12:53,850 --> 00:12:54,200
OK.

191
00:12:54,270 --> 00:12:56,310
This is me just kind of experimenting a little bit.

192
00:12:56,520 --> 00:12:56,810
All right.

193
00:12:56,820 --> 00:13:00,150
So let's see how this is working then.

194
00:13:00,150 --> 00:13:01,650
So we'll jump into the move.

195
00:13:01,740 --> 00:13:02,010
All right.

196
00:13:02,020 --> 00:13:07,800
So grabbing the origin and destination, if we're moving to an occupied friendly, which we're not.

197
00:13:07,920 --> 00:13:11,730
So we'll skip over that if we're moving to an occupied enemy.

198
00:13:11,980 --> 00:13:14,050
Where, though, which we are then?

199
00:13:14,380 --> 00:13:16,480
Here's what we are going to do.

200
00:13:16,690 --> 00:13:24,610
We retrieve the piece at the destination coordinates and I just wrote a little small utility method

201
00:13:24,610 --> 00:13:25,560
to go do that.

202
00:13:25,570 --> 00:13:30,440
So get the peace at the destination coordinates and we'll look at that method.

203
00:13:30,520 --> 00:13:34,270
So that method is right here where we're passing in chess coordinates.

204
00:13:34,450 --> 00:13:37,000
We build a coordinate object out of that.

205
00:13:37,180 --> 00:13:43,660
Then we look inside the internal two dimensional array and we retrieve that piece and return it.

206
00:13:43,750 --> 00:13:44,150
OK.

207
00:13:44,200 --> 00:13:49,060
So we're getting that piece there, which in this case would be the black pawn at D3.

208
00:13:49,510 --> 00:13:53,710
Then we want to basically take that black pawn off the board.

209
00:13:53,770 --> 00:13:54,280
OK.

210
00:13:54,490 --> 00:14:00,010
And the way that I choose to do that is by setting the Black Pond's coordinates to null.

211
00:14:00,040 --> 00:14:00,520
OK.

212
00:14:00,580 --> 00:14:04,090
So that's part of how I take the black pawn off the board.

213
00:14:04,240 --> 00:14:12,340
Now, at this point, I have not removed the black pawn from these coordinates on the internal two dimensional

214
00:14:12,340 --> 00:14:13,180
array, though.

215
00:14:13,330 --> 00:14:17,690
OK, I've just set the Black Pine's internal coordinates to null.

216
00:14:17,710 --> 00:14:18,100
All right.

217
00:14:18,700 --> 00:14:23,530
Then I check what color the piece that we're requesting to move, which in this case is the night I

218
00:14:23,530 --> 00:14:24,370
check that color.

219
00:14:24,670 --> 00:14:31,450
If the piece that we're moving is white, then I have another utility kind of a method here to say add

220
00:14:31,450 --> 00:14:39,370
two captured pieces where I pass in the captured piece, which is the black on, and I also pass in

221
00:14:39,370 --> 00:14:43,120
an array that represents the captured pieces, which is which.

222
00:14:43,120 --> 00:14:45,040
This is the white captured pieces.

223
00:14:45,040 --> 00:14:45,400
OK?

224
00:14:45,580 --> 00:14:48,150
So let me show you this array that's up here.

225
00:14:48,160 --> 00:14:54,970
So I created a couple other arrays, white captured pieces and black captured pieces, and I initialize

226
00:14:54,970 --> 00:14:57,280
this array to zero lengths.

227
00:14:57,370 --> 00:14:57,820
OK.

228
00:14:57,850 --> 00:15:00,310
Just to begin with, and I passed that in.

229
00:15:00,310 --> 00:15:07,360
But somewhat strangely, now when I use this method here, add two captured pieces to add this piece

230
00:15:07,360 --> 00:15:09,670
into either of these arrays.

231
00:15:09,940 --> 00:15:13,030
I actually return a new array.

232
00:15:13,060 --> 00:15:13,400
OK.

233
00:15:13,420 --> 00:15:15,370
And so you're seeing me recapture this.

234
00:15:15,520 --> 00:15:21,260
Now, the reason I chose to do it this way is because of the way that arrays work in Java.

235
00:15:21,280 --> 00:15:23,920
So let's jump in here and we'll see what I'm doing here.

236
00:15:24,070 --> 00:15:24,340
All right.

237
00:15:24,340 --> 00:15:26,200
So here's my add to captured arrays.

238
00:15:26,440 --> 00:15:34,220
So first, I use a utility method of Java on the arrays class to copy an array.

239
00:15:34,240 --> 00:15:34,600
OK.

240
00:15:34,780 --> 00:15:39,680
So I make a copy of the array that I just passed in.

241
00:15:39,700 --> 00:15:40,120
OK.

242
00:15:40,300 --> 00:15:46,210
But I make a copy of this array and add one additional element length to the array.

243
00:15:46,240 --> 00:15:46,600
OK.

244
00:15:46,780 --> 00:15:53,770
So in this case, the array started off zero lengths, meaning it's empty and I make a copy of it,

245
00:15:54,070 --> 00:15:56,320
but I add one to it.

246
00:15:56,830 --> 00:16:01,510
So now this temporary captures array here has a length of one.

247
00:16:01,600 --> 00:16:03,610
Now it's still empty, so to speak, right?

248
00:16:03,610 --> 00:16:08,350
I haven't placed any objects in it, but it has one holding tank now.

249
00:16:08,380 --> 00:16:08,830
OK.

250
00:16:09,250 --> 00:16:17,020
Then I take my captured piece and I set my captured piece in the one holding tank on this new temporary

251
00:16:17,020 --> 00:16:18,250
captures array.

252
00:16:18,670 --> 00:16:22,510
Then I return this temporary captures array.

253
00:16:22,660 --> 00:16:23,140
OK.

254
00:16:23,350 --> 00:16:25,180
Because it's a new array now.

255
00:16:25,540 --> 00:16:33,100
And so if I go back to where I'm using this now, I'm setting this new one element array back on the

256
00:16:33,100 --> 00:16:35,300
field of white captured pieces.

257
00:16:35,320 --> 00:16:35,650
OK.

258
00:16:35,980 --> 00:16:39,170
So I just want to make sure that this is somewhat clear for you.

259
00:16:39,190 --> 00:16:41,510
So let me just state that one more time.

260
00:16:41,530 --> 00:16:48,790
Our chess board starts off with an empty array for both white captured pieces and black captured pieces.

261
00:16:49,540 --> 00:16:55,940
And then, when we call, add two captured pieces, we make a copy of that empty array.

262
00:16:55,960 --> 00:17:02,470
But in our copy of that array, we set the length of the new copy to one instead of zero.

263
00:17:02,500 --> 00:17:02,980
OK.

264
00:17:03,010 --> 00:17:09,750
Then we store our captured piece in the one and only holding tank of this newly created array.

265
00:17:09,760 --> 00:17:16,250
And then we return that newly created array from this ad to captured pieces method.

266
00:17:16,270 --> 00:17:24,070
And then we set that newly created array back into the white captured pieces field of our board.

267
00:17:24,100 --> 00:17:24,580
OK.

268
00:17:25,030 --> 00:17:29,810
And so the next time we capture a white piece, we'd go through all of this again.

269
00:17:29,830 --> 00:17:34,420
OK, but the next time we capture a white piece, if we were to jump back into this had two captured

270
00:17:34,420 --> 00:17:40,060
pieces method again, we'd now start off with an array of size one.

271
00:17:40,090 --> 00:17:44,730
But then we'd make a copy of that array, and the copy would now have a length of two.

272
00:17:44,740 --> 00:17:52,900
And then we would store the newly captured piece in the second holding tank or the second element of

273
00:17:52,900 --> 00:17:55,000
this newly created array.

274
00:17:55,000 --> 00:18:01,360
And then we would return the newly created array, which would now have two captured enemy pieces in

275
00:18:01,360 --> 00:18:01,630
it.

276
00:18:02,080 --> 00:18:08,020
And every time we call the add to captured pieces method, we're going to make a copy of the array that

277
00:18:08,020 --> 00:18:11,110
is one element bigger than the original array was.

278
00:18:11,410 --> 00:18:11,740
We will.

279
00:18:11,840 --> 00:18:18,280
Then copy our captured piece in to that last element of this newly copied array.

280
00:18:18,550 --> 00:18:25,090
Then we will return the newly copied array and then that newly copied array will become the new array

281
00:18:25,090 --> 00:18:26,680
for the entire board.

282
00:18:26,720 --> 00:18:28,510
OK, so I hope I made that clear.

283
00:18:28,750 --> 00:18:34,270
Now the reason I have to do that is because arrays cannot dynamically make themselves bigger.

284
00:18:34,300 --> 00:18:41,110
All we can do with an array, if we want more space in an array, is to make a new array that is bigger

285
00:18:41,110 --> 00:18:42,430
than the previous one.

286
00:18:42,700 --> 00:18:50,380
Then copy all of the contents from the original array into the new array and then copy all of the contents

287
00:18:50,530 --> 00:18:53,590
from the original array into the new array.

288
00:18:53,860 --> 00:18:55,360
That's just how you have to do it.

289
00:18:55,390 --> 00:18:55,740
OK.

290
00:18:56,080 --> 00:19:02,650
But the arrays class makes it relatively easy to do that with this copy of method.

291
00:19:02,800 --> 00:19:07,350
I encourage you, by the way, to take a look at all the methods that exist on the arrays class.

292
00:19:07,360 --> 00:19:11,770
It has a lot of interesting methods on it, most of which I probably have never used.

293
00:19:12,850 --> 00:19:16,930
And then we can do the same kind of thing for black captured pieces as well.

294
00:19:17,110 --> 00:19:24,610
And then finally, the night is allowed to move just like it normally would have, even if the destination

295
00:19:24,760 --> 00:19:26,350
square had been empty.

296
00:19:26,380 --> 00:19:26,960
All right.

297
00:19:26,980 --> 00:19:30,520
And so that is how that use case is working.

298
00:19:30,760 --> 00:19:37,510
Now, while we're here and since I did bring up the fact that this element exists, method here is doing

299
00:19:37,510 --> 00:19:43,900
the same thing as the method that I had placed on the chess piece tests class.

300
00:19:44,110 --> 00:19:47,080
Let's just take a quick peek at the chess piece.

301
00:19:47,710 --> 00:19:49,080
Test class here.

302
00:19:49,090 --> 00:19:52,210
Remember this method right here, this guy?

303
00:19:52,240 --> 00:19:54,070
So let's see chess coordinates.

304
00:19:55,340 --> 00:20:02,200
Now, the reason why I have this method here is because it needs to iterate over all of the chess pieces

305
00:20:02,200 --> 00:20:05,440
that may exist within a given array.

306
00:20:05,470 --> 00:20:14,170
OK, now notice it's actually the same pattern as what I'm doing in the chess piece test class, but

307
00:20:14,170 --> 00:20:15,850
working with different pieces.

308
00:20:16,120 --> 00:20:23,500
This method here is technically looking for a chess piece, whereas in the chess piece test method,

309
00:20:23,980 --> 00:20:27,070
we're iterating over coordinates.

310
00:20:27,400 --> 00:20:33,790
But truth of the matter is these two methods are effectively doing pretty much the same thing.

311
00:20:34,540 --> 00:20:34,780
All right.

312
00:20:34,810 --> 00:20:40,840
So I may, in an upcoming lesson, go ahead and consolidate what we're doing here with what we're doing

313
00:20:40,840 --> 00:20:43,510
in the chess piece test here.

314
00:20:43,510 --> 00:20:45,530
But I'm not going to do it in this lesson here.

315
00:20:45,550 --> 00:20:46,990
I'll save that for future lesson.

316
00:20:46,990 --> 00:20:49,270
OK, so I'll see you in the next one.
