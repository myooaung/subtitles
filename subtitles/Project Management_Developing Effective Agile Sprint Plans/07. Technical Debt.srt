1
00:00:00,812 --> 00:00:02,349
What is technical debt?

2
00:00:02,349 --> 00:00:08,102
It is the total amount of less than perfect design and coding in your solution.

3
00:00:08,102 --> 00:00:10,906
We all start out by writing the best code we can,

4
00:00:10,906 --> 00:00:14,057
but based on skills, requirements, and other situations,

5
00:00:14,057 --> 00:00:16,286
our code will not be perfect.

6
00:00:16,286 --> 00:00:18,879
Now let's see how it ends up in our solutions.

7
00:00:18,879 --> 00:00:21,122
Now let's talk about where technical debt comes from.

8
00:00:21,122 --> 00:00:21,686
Many times,

9
00:00:21,686 --> 00:00:24,097
you need to make some last minute enhancements to

10
00:00:24,097 --> 00:00:26,219
get something changed right away.

11
00:00:26,219 --> 00:00:27,821
So you solve the immediate problem,

12
00:00:27,821 --> 00:00:30,855
but in a sense potentially created a longer-term

13
00:00:30,855 --> 00:00:33,773
problem with less than perfect code.

14
00:00:33,773 --> 00:00:37,046
Quick and dirty bug fixes to get something changed right away,

15
00:00:37,046 --> 00:00:41,199
and again, potentially leaving behind some technical debt.

16
00:00:41,199 --> 00:00:43,584
Development practices that have not proved their worth,

17
00:00:43,584 --> 00:00:47,125
like an API that continues to degrade in performance or where

18
00:00:47,125 --> 00:00:51,103
an initial design worked great and over time it just doesn't

19
00:00:51,103 --> 00:00:53,283
hold up to the newer requirements.

20
00:00:53,283 --> 00:00:54,010
Left unchecked,

21
00:00:54,010 --> 00:00:59,369
technical debt can grow and grow to ultimately overwhelm your solution.

22
00:00:59,369 --> 00:01:02,363
Technical debt can propagate bugs over time.

23
00:01:02,363 --> 00:01:05,021
When you have some not so good code,

24
00:01:05,021 --> 00:01:08,569
sometimes it is hard to write good elegant code around it,

25
00:01:08,569 --> 00:01:11,507
so it just makes matters worse over time.

26
00:01:11,507 --> 00:01:13,674
Technical debt is not avoidable.

27
00:01:13,674 --> 00:01:14,504
It will happen.

28
00:01:14,504 --> 00:01:18,981
It is just part of the life of an application development project.

29
00:01:18,981 --> 00:01:22,490
So don't feel bad it you have it, but you need to keep an eye on it,

30
00:01:22,490 --> 00:01:24,141
and let's see how.

31
00:01:24,141 --> 00:01:26,464
Now let's see how we could reduce technical debt.

32
00:01:26,464 --> 00:01:29,312
Technical debt cannot be totally eliminated.

33
00:01:29,312 --> 00:01:33,045
That is certainly a nice goal, but focus on reducing it.

34
00:01:33,045 --> 00:01:37,646
So continuous code maintenance and refactoring in each sprint will

35
00:01:37,646 --> 00:01:40,139
get you a long way in reducing technical debt.

36
00:01:40,139 --> 00:01:44,648
So add technical debt to your backlog with estimates and how these

37
00:01:44,648 --> 00:01:47,882
backlog items will provide value to the customer.

38
00:01:47,882 --> 00:01:50,587
Value is not just delivering a feature,

39
00:01:50,587 --> 00:01:53,353
but delivering the feature with a desired user experience

40
00:01:53,353 --> 00:01:56,492
and with acceptable performance over time.

41
00:01:56,492 --> 00:02:01,958
More typical is to use slack time to reduce debt and fit it in when you can.

42
00:02:01,958 --> 00:02:06,299
Maybe in a daily standup someone says they finished their assigned stories,

43
00:02:06,299 --> 00:02:10,129
and the team may recommend to the developer to whittle away at

44
00:02:10,129 --> 00:02:13,105
known technical debt with their extra time.

45
00:02:13,105 --> 00:02:15,819
Don't let technical debt build up until it's too late where you

46
00:02:15,819 --> 00:02:18,329
have a mountain of bugs caused by the debt,

47
00:02:18,329 --> 00:02:22,395
which may become blockers to implementing new features effectively.

48
00:02:22,395 --> 00:02:25,907
This can cause your user story points to increase dramatically.

49
00:02:25,907 --> 00:02:27,061
In my opinion,

50
00:02:27,061 --> 00:02:30,643
iteration or sprint slack is the best way to reduce

51
00:02:30,643 --> 00:02:33,665
technical debt since the product owner may not relate to

52
00:02:33,665 --> 00:02:35,858
technical debt as a backlog item.

53
00:02:35,858 --> 00:02:37,825
Some of my customers, that is product owners,

54
00:02:37,825 --> 00:02:41,030
have understood technical debt, and some haven't.

55
00:02:41,030 --> 00:02:51,000
If they understand it, place some debt as a backlog item and slack time as well. If they don't understand technical debt, fit it into your slack time.

