WEBVTT
1
00:00:00.795 --> 00:00:03.039
Let's see how we can best use spikes.

2
00:00:03.039 --> 00:00:04.352
So what's a spike?

3
00:00:04.352 --> 00:00:07.877
It's a controlled experiment to provide information and

4
00:00:07.877 --> 00:00:11.964
hopefully to clarify any technical issues by setting aside the

5
00:00:11.964 --> 00:00:13.930
complexities of the production code.

6
00:00:13.930 --> 00:00:15.687
You would develop small,

7
00:00:15.687 --> 00:00:18.906
isolated experiments when you need to prove a method or approach,

8
00:00:18.906 --> 00:00:21.632
or just to seek additional information.

9
00:00:21.632 --> 00:00:22.993
How to spike.

10
00:00:22.993 --> 00:00:28.256
If possible, try and segregate the code so it doesn't affect your main code base.

11
00:00:28.256 --> 00:00:33.792
We call this a sandbox, basically a place to experiment and throw away later,

12
00:00:33.792 --> 00:00:37.622
but there is nothing wrong with dropping it right into your running code base.

13
00:00:37.622 --> 00:00:40.759
But just make a branch in your source control tool for the

14
00:00:40.759 --> 00:00:43.987
spike to keep it separate and isolated.

15
00:00:43.987 --> 00:00:46.142
Don't write it like it's for production.

16
00:00:46.142 --> 00:00:48.903
Remember, what you want is to prove a point,

17
00:00:48.903 --> 00:00:51.353
a technique, or gather more information,

18
00:00:51.353 --> 00:00:54.582
so quick and dirty would be fine with me.

19
00:00:54.582 --> 00:00:56.986
Let's see how spikes affect sprints.

20
00:00:56.986 --> 00:00:58.004
Maybe not at all.

21
00:00:58.004 --> 00:01:01.856
If it is very small and you knocked it out in 15 to 20 minutes,

22
00:01:01.856 --> 00:01:02.879
well, then great.

23
00:01:02.879 --> 00:01:07.797
By adding slack to sprint planning though, we can accommodate spikes.

24
00:01:07.797 --> 00:01:12.788
So if you know of a few research items for the next sprint, add some slack.

25
00:01:12.788 --> 00:01:13.766
Ad hoc spikes.

26
00:01:13.766 --> 00:01:16.918
Sometimes there's a last minute need for a spike.

27
00:01:16.918 --> 00:01:19.734
If it is tiny, then, well, just do it.

28
00:01:19.734 --> 00:01:23.588
Maybe check with your tech lead or discuss in the next standup to get a

29
00:01:23.588 --> 00:01:26.619
general opinion or guidance on what to do for ad hoc spikes.

30
00:01:26.619 --> 00:01:29.355
Avoid making your spike production code.

31
00:01:29.355 --> 00:01:34.172
Please rewrite the spike code following your best practices if you're going to

32
00:01:34.172 --> 00:01:36.762
implement the results of what you learned in your spike.

33
00:01:36.762 --> 00:01:40.570
Remember, you might have developed a spike in a real quick and dirty way.

34
00:01:40.570 --> 00:01:42.476
You may not have the right error handling,

35
00:01:42.476 --> 00:01:50.000
and you may have not followed your best practices, so please avoid making your spike's production code.

