WEBVTT
1
00:00:01.063 --> 00:00:04.515
We want to get from user stories to code,

2
00:00:04.515 --> 00:00:08.191
and we do that by writing quality tasks.

3
00:00:08.191 --> 00:00:10.461
Coding User Stories with Tasks.

4
00:00:10.461 --> 00:00:12.751
At the higher level, we have epics and chunky features,

5
00:00:12.751 --> 00:00:16.119
and we break the epics down into user stories.

6
00:00:16.119 --> 00:00:19.414
Both are written in business and user- oriented terms.

7
00:00:19.414 --> 00:00:24.368
Developers will now take the user story and break it down into tasks,

8
00:00:24.368 --> 00:00:27.274
in particular, technical tasks.

9
00:00:27.274 --> 00:00:31.500
The technical tasks are written in the vernacular of the developer,

10
00:00:31.500 --> 00:00:34.022
tester, database designer, or others.

11
00:00:34.022 --> 00:00:35.338
Now let's see an example.

12
00:00:35.338 --> 00:00:40.273
Here is an example of how tasks relate to user stories in an epic.

13
00:00:40.273 --> 00:00:43.847
Here we have two user stories, story 1 and story 2.

14
00:00:43.847 --> 00:00:47.142
Now they are both under epic 1.

15
00:00:47.142 --> 00:00:49.961
These have been developed as we have learned by the team based on

16
00:00:49.961 --> 00:00:53.106
the product owner's requirements and backlog.

17
00:00:53.106 --> 00:00:55.379
The tasks though are not developed with the product

18
00:00:55.379 --> 00:00:59.825
owner or any of the user community, but only the technical team,

19
00:00:59.825 --> 00:01:02.721
such as developers, database designers, and testers.

20
00:01:02.721 --> 00:01:06.469
So, as an example, we have epic 1, manage enrollment.

21
00:01:06.469 --> 00:01:12.322
User story 2 is students can search for, find, select, and enroll in classes.

22
00:01:12.322 --> 00:01:15.246
A team member or members have itemized three tasks.

23
00:01:15.246 --> 00:01:17.183
The first, task 3.

24
00:01:17.183 --> 00:01:20.613
Create an Angular-based search page to find classes by school,

25
00:01:20.613 --> 00:01:25.302
department, and free text, and use the course.search API.

26
00:01:25.302 --> 00:01:28.518
Clearly the language is technical, and the product owner,

27
00:01:28.518 --> 00:01:31.288
quite frankly, and with no guilt, doesn't care.

28
00:01:31.288 --> 00:01:32.648
Next is task 4.

29
00:01:32.648 --> 00:01:36.239
Allow students to select classes in an HTML grid and place

30
00:01:36.239 --> 00:01:39.175
into a shopping cart using the plugin.

31
00:01:39.175 --> 00:01:43.379
Task 5: Allow students to pay for classes by credit card and PayPal

32
00:01:43.379 --> 00:01:46.649
via the third- party bank widget web service.

33
00:01:46.649 --> 00:01:49.739
Tasks are written in technical terminology since they will only

34
00:01:49.739 --> 00:01:52.254
be used and consumed by the technical team.

35
00:01:52.254 --> 00:01:55.051
But just as user stories follow the INVEST template,

36
00:01:55.051 --> 00:02:00.000
how you write tasks should follow a template as well. Let's check that out.

