1
00:00:01,318 --> 00:00:04,569
Now let's move deeper into user stories and epics and what

2
00:00:04,569 --> 00:00:08,216
characteristics make a good quality user story.

3
00:00:08,216 --> 00:00:10,701
An important point: The better the user story,

4
00:00:10,701 --> 00:00:13,222
the better the sprint planning, and therefore,

5
00:00:13,222 --> 00:00:16,882
the better the overall success of the Agile project.

6
00:00:16,882 --> 00:00:19,374
Product backlog and user stories.

7
00:00:19,374 --> 00:00:20,254
As mentioned earlier,

8
00:00:20,254 --> 00:00:24,225
the nature and quality of the backlog may be inadequate initially and may

9
00:00:24,225 --> 00:00:27,259
take a little work before the project is off and running.

10
00:00:27,259 --> 00:00:31,483
We want to transform the initial unstructured backlog received from our

11
00:00:31,483 --> 00:00:35,525
product owner and rewrite it or transform it into user stories.

12
00:00:35,525 --> 00:00:39,236
Also, we don't want to be too detailed and list developer tests either.

13
00:00:39,236 --> 00:00:42,363
So we want to take the initial backlog, which may be fuzzy,

14
00:00:42,363 --> 00:00:46,408
unclear, and have a variety of content and authoring styles,

15
00:00:46,408 --> 00:00:49,112
and transform it into user stories.

16
00:00:49,112 --> 00:00:53,400
Typically, we call each requirement or feature a user story.

17
00:00:53,400 --> 00:00:55,711
We want our user stories to be succinct,

18
00:00:55,711 --> 00:00:59,959
clear, and with a single writing style, maybe multiple authors,

19
00:00:59,959 --> 00:01:01,863
but a single writing style.

20
00:01:01,863 --> 00:01:05,805
Hence, we want to write the user stories in a common way.

21
00:01:05,805 --> 00:01:07,989
More on that later in this module.

22
00:01:07,989 --> 00:01:09,651
Now let's define a user story.

23
00:01:09,651 --> 00:01:12,655
Here's the basic definition of the user story.

24
00:01:12,655 --> 00:01:15,554
A user story is a high-level definition of a requirement.

25
00:01:15,554 --> 00:01:20,246
User stories contain just enough information so that the developers can

26
00:01:20,246 --> 00:01:23,918
produce a reasonable estimate of the effort to implement it.

27
00:01:23,918 --> 00:01:26,863
Another way to phrase it is that the user story is generally

28
00:01:26,863 --> 00:01:30,055
understandable by the development team and therefore can,

29
00:01:30,055 --> 00:01:32,081
in fact, make a reasonable estimate.

30
00:01:32,081 --> 00:01:36,415
Now, as the backlog meeting proceeds with everyone discussing user stories,

31
00:01:36,415 --> 00:01:38,729
be sure to observe the level of understanding,

32
00:01:38,729 --> 00:01:42,945
the level of confidence, and the quality of the discussions.

33
00:01:42,945 --> 00:01:45,558
This will help you assess the degree of knowledge being

34
00:01:45,558 --> 00:01:48,670
transferred from the product owner to the team.

35
00:01:48,670 --> 00:01:49,552
This is important.

36
00:01:49,552 --> 00:01:53,411
Now let's look at some good traits of a user story.

37
00:01:53,411 --> 00:01:56,033
Let's discuss what attributes make a good user story.

38
00:01:56,033 --> 00:01:59,497
These are known as INVESTs since each of the words I

39
00:01:59,497 --> 00:02:01,843
will discuss spell out the word INVEST.

40
00:02:01,843 --> 00:02:02,428
Independent.

41
00:02:02,428 --> 00:02:06,320
Independence means that a story can be coded,

42
00:02:06,320 --> 00:02:09,231
tested, and even delivered all on its own.

43
00:02:09,231 --> 00:02:12,596
That is, it's not waiting for another story to be completed.

44
00:02:12,596 --> 00:02:15,132
And what also makes independence important is that

45
00:02:15,132 --> 00:02:18,032
it can be independently valued.

46
00:02:18,032 --> 00:02:18,408
Negotiable.

47
00:02:18,408 --> 00:02:22,047
A user story is a placeholder for requirements to be discussed

48
00:02:22,047 --> 00:02:24,352
and potentially accepted for development.

49
00:02:24,352 --> 00:02:26,495
In the traditional Waterfall approach,

50
00:02:26,495 --> 00:02:29,210
requirements were basically contracted to implement.

51
00:02:29,210 --> 00:02:30,219
End of story.

52
00:02:30,219 --> 00:02:33,277
So a process of negotiation is conducted between the

53
00:02:33,277 --> 00:02:35,247
product owners and the development team,

54
00:02:35,247 --> 00:02:36,645
and very important here,

55
00:02:36,645 --> 00:02:39,947
each respects and jointly collaborates to arrive at

56
00:02:39,947 --> 00:02:41,670
the best approach and solution,

57
00:02:41,670 --> 00:02:45,282
aware of each other's potential limitations and strengths.

58
00:02:45,282 --> 00:02:45,741
Valuable.

59
00:02:45,741 --> 00:02:50,040
The full team's most important goal is to deliver the most

60
00:02:50,040 --> 00:02:53,116
value given their available resources and time.

61
00:02:53,116 --> 00:02:53,336
Therefore,

62
00:02:53,336 --> 00:02:57,296
I will suggest to you that this is the most important of the INVEST traits.

63
00:02:57,296 --> 00:03:01,410
Remember, the backlog is prioritized by value and value alone,

64
00:03:01,410 --> 00:03:04,893
hence the importance of these traits.

65
00:03:04,893 --> 00:03:05,591
Estimable.

66
00:03:05,591 --> 00:03:09,223
A good and well written and discussed user story is estimable.

67
00:03:09,223 --> 00:03:13,550
Backlog items can be any size really, but let's face it,

68
00:03:13,550 --> 00:03:18,351
more decomposed user stories are much more likely to be estimated with accuracy.

69
00:03:18,351 --> 00:03:21,468
In the event you are facing a challenge of coming up with an estimate,

70
00:03:21,468 --> 00:03:24,783
that it is quite likely you need to decompose or break down

71
00:03:24,783 --> 00:03:27,378
the user story into smaller user stories.

72
00:03:27,378 --> 00:03:28,192
Next, small.

73
00:03:28,192 --> 00:03:31,039
So what do we mean by small?

74
00:03:31,039 --> 00:03:33,850
That is something you can finish in one iteration.

75
00:03:33,850 --> 00:03:36,587
Most iterations that I observe are two to three weeks.

76
00:03:36,587 --> 00:03:41,421
That gives you an order of magnitude from an elapse time perspective.

77
00:03:41,421 --> 00:03:46,246
Smaller stories and process of your sprint are more likely to come out faster.

78
00:03:46,246 --> 00:03:46,602
Testable.

79
00:03:46,602 --> 00:03:49,568
In the Agile world, all code is tested code.

80
00:03:49,568 --> 00:03:53,499
But if you think that the user story cannot be tested in the sprint iteration,

81
00:03:53,499 --> 00:03:57,564
then it is quite likely that the story is not well written,

82
00:03:57,564 --> 00:04:01,494
maybe linked to other user stories, or just too complex.

83
00:04:01,494 --> 00:04:05,080
Vague and fuzzy words in user stories will usually get better

84
00:04:05,080 --> 00:04:07,770
revealed when discussing if something is testable,

85
00:04:07,770 --> 00:04:09,210
so look for that.

86
00:04:09,210 --> 00:04:14,140
Use the INVEST convention as a checklist against every user story you write,

87
00:04:14,140 --> 00:04:17,377
and it will greatly improve your team's ability to write them.

88
00:04:17,377 --> 00:04:20,620
Better stories result in better outcomes,

89
00:04:20,620 --> 00:04:23,515
yielding value to the business earlier.

90
00:04:23,515 --> 00:04:27,880
Here's an important point: Writing the code for a well-understood objective is

91
00:04:27,880 --> 00:04:31,353
not necessarily the hardest part of software development.

92
00:04:31,353 --> 00:04:37,311
Instead, what is hard is understanding what the real objective for the code is.

93
00:04:37,311 --> 00:04:41,319
Therefore, teams who spend a meaningful amount of time reviewing,

94
00:04:41,319 --> 00:04:49,000
refining, and understanding user stories will be the most successful in the end. Okay, now let's check out some examples.

