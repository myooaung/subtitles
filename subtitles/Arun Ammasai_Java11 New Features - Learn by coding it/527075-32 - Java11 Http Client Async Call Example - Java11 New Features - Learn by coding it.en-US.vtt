WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.070 --> 00:00:04.020
Hello everyone, Welcome back.

00:00:04.020 --> 00:00:07.290
So in the last example we tried harder,

00:00:07.290 --> 00:00:09.435
actually declined can be used in Java 11,

00:00:09.435 --> 00:00:14.220
but now I'm going to do the same thing with the help of Java 11.

00:00:14.220 --> 00:00:15.840
But last time you tried synchronous called,

00:00:15.840 --> 00:00:19.245
now we're gonna do with ASMM goodness call same outcome,

00:00:19.245 --> 00:00:21.795
but how are we going to call as the asynchronous call?

00:00:21.795 --> 00:00:23.730
So I'm going to create a 11 method.

00:00:23.730 --> 00:00:26.880
And the previous method is for synchronous call and

00:00:26.880 --> 00:00:29.910
this method is for as synchronous call a sink.

00:00:29.910 --> 00:00:37.630
All right, so the first thing first,

00:00:37.630 --> 00:00:41.540
we need the request so you don't have to write it again.

00:00:41.540 --> 00:00:42.920
So we have that a equals three, right?

00:00:42.920 --> 00:00:44.855
Http client.

00:00:44.855 --> 00:00:48.560
So let's for now and I'm gonna do,

00:00:48.560 --> 00:00:50.795
I'm gonna create the request in straight away.

00:00:50.795 --> 00:00:52.880
So what I'm gonna do, let's try something different.

00:00:52.880 --> 00:00:56.345
Always. Http request.

00:00:56.345 --> 00:00:59.400
So, and I have a question.

00:00:59.560 --> 00:01:02.780
So we all know what we're going to use.

00:01:02.780 --> 00:01:05.135
Http request dot new Builder,

00:01:05.135 --> 00:01:07.985
which will create a new instance of the request.

00:01:07.985 --> 00:01:10.820
And then I'm going to provide some time out here.

00:01:10.820 --> 00:01:14.120
So we all know that timeout of seconds.

00:01:14.120 --> 00:01:16.550
You can grow it in a specific amount of time.

00:01:16.550 --> 00:01:19.940
So you need to wait for at least ten seconds and then it is getting timed out.

00:01:19.940 --> 00:01:23.855
And then we have to provide the URI.

00:01:23.855 --> 00:01:29.060
Okay, so what I'm gonna do is I'm going to use URI dot create.

00:01:29.060 --> 00:01:32.300
So this will accept your APA.

00:01:32.300 --> 00:01:34.310
So what I'm gonna do, it can,

00:01:34.310 --> 00:01:36.710
I can simply copy this and paste it here.

00:01:36.710 --> 00:01:38.450
You might ask for what you are doing,

00:01:38.450 --> 00:01:42.450
something different here and why you're doing something differently, or it's up to you.

00:01:43.330 --> 00:01:47.790
And then I'm going to use the get method.

00:01:47.830 --> 00:01:51.890
So, and then, so the API call as

00:01:51.890 --> 00:01:56.105
when this API call is going to be initialed essa AND gate method.

00:01:56.105 --> 00:01:58.130
Okay, so in individually skull we have

00:01:58.130 --> 00:02:00.585
a good post update identity is going to be in good Two.

00:02:00.585 --> 00:02:04.565
One. So now I have a question please.

00:02:04.565 --> 00:02:08.225
Okay, so now I need a body handlers.

00:02:08.225 --> 00:02:10.535
So I'll tell you why we need a body handlers,

00:02:10.535 --> 00:02:13.610
right when you call the claim that

00:02:13.610 --> 00:02:16.775
sentiment that we need to have the request and the body handlers, correct?

00:02:16.775 --> 00:02:19.130
So I'm going to create the body handler here.

00:02:19.130 --> 00:02:21.230
So where the body handles available,

00:02:21.230 --> 00:02:26.045
It's available under the response dot body handlers.

00:02:26.045 --> 00:02:30.455
And here I'm gonna receive body handles as a string.

00:02:30.455 --> 00:02:32.705
Okay, Let's call it a string here.

00:02:32.705 --> 00:02:37.940
And then 40 and less.

00:02:37.940 --> 00:02:38.960
Gotcha.

00:02:38.960 --> 00:02:43.954
Okay, so now what we're gonna do using the HTTP response.

00:02:43.954 --> 00:02:48.410
So what kind of respond to with expert thing I want to export as a string.

00:02:48.410 --> 00:02:51.660
So I'm going to use the ofstream and thought.

00:02:52.090 --> 00:02:54.590
This is the same thing which we tried here.

00:02:54.590 --> 00:02:56.600
Take a look at this upstream at that,

00:02:56.600 --> 00:02:58.909
the request and response.

00:02:58.909 --> 00:03:01.850
I'm doing the same thing, but I'm doing it in a different way.

00:03:01.850 --> 00:03:07.950
What they'll hear parameters.

00:03:08.650 --> 00:03:10.760
We're just saying, okay,

00:03:10.760 --> 00:03:12.905
it's body handle, unknown body, hind legs.

00:03:12.905 --> 00:03:13.460
Okay.

00:03:13.460 --> 00:03:16.580
So now I have the request and response. I'm in the body handle that.

00:03:16.580 --> 00:03:19.910
So this is a place where we call where we

00:03:19.910 --> 00:03:24.125
pass in our request and the body handles, correct?

00:03:24.125 --> 00:03:25.340
I'm using the St mother,

00:03:25.340 --> 00:03:27.500
which is I think goodness, I'm in a synchronous call,

00:03:27.500 --> 00:03:30.935
but now I want to make it as a synchronous call, right?

00:03:30.935 --> 00:03:33.515
So which must have been to call,

00:03:33.515 --> 00:03:38.255
we have to call send a sync metadata, right?

00:03:38.255 --> 00:03:39.680
Send now, so what I'm going to do,

00:03:39.680 --> 00:03:41.015
let's create a client.

00:03:41.015 --> 00:03:45.170
Because the client is the one who's going to initiate the connection,

00:03:45.170 --> 00:03:46.640
established a connection, right?

00:03:46.640 --> 00:03:48.830
So client is equal.

00:03:48.830 --> 00:03:51.470
So I should have declined.

00:03:51.470 --> 00:03:54.485
And you need to use the new, sorry,

00:03:54.485 --> 00:04:01.070
mu, actually declined dot new hydrophobic lines.

00:04:01.070 --> 00:04:03.575
So this will initiate the column.

00:04:03.575 --> 00:04:05.315
And now what do we need to do?

00:04:05.315 --> 00:04:07.820
I'm going to use the Client dot.

00:04:07.820 --> 00:04:10.670
I need to call the scent asic Murdock.

00:04:10.670 --> 00:04:11.465
Okay?

00:04:11.465 --> 00:04:18.185
Sent doesn't matter which takes a hashtable request and a body handler.

00:04:18.185 --> 00:04:22.370
And the response is nothing but the response is a different kind of feature.

00:04:22.370 --> 00:04:26.675
It's compatible features and redact sub B HTTP response.

00:04:26.675 --> 00:04:28.400
Okay, so now what I'm gonna do,

00:04:28.400 --> 00:04:30.575
I'm gonna simply call the, I think matter.

00:04:30.575 --> 00:04:32.750
The first input is going to be request,

00:04:32.750 --> 00:04:37.535
and the second input is going to be our body handles that thought.

00:04:37.535 --> 00:04:38.930
So now we need to know.

00:04:38.930 --> 00:04:42.530
So when I call the normal as in condensed matter,

00:04:42.530 --> 00:04:46.940
it is just simply returning the HTTP response, correct here.

00:04:46.940 --> 00:04:49.670
But I'm calling us and asking,

00:04:49.670 --> 00:04:52.250
so what kind of response? I'll get it.

00:04:52.250 --> 00:04:54.050
Okay, so to check that,

00:04:54.050 --> 00:04:57.500
go to sink in that you will see it will

00:04:57.500 --> 00:05:02.420
return compatible future with the HTTP response, right?

00:05:02.420 --> 00:05:05.360
So let's come back to a quote.

00:05:05.360 --> 00:05:11.465
So the outcome is going to be so completely accomplishable future.

00:05:11.465 --> 00:05:16.670
So completable future, which contains yeah,

00:05:16.670 --> 00:05:22.055
UDP response, HTTP response.

00:05:22.055 --> 00:05:25.500
And the response is going to be a string here.

00:05:27.160 --> 00:05:29.670
Guide.

00:05:31.440 --> 00:05:35.630
So now, so what is the error here?

00:05:39.900 --> 00:05:44.110
So provide the reference here.

00:05:44.110 --> 00:05:48.040
Okay, So this is our response.

00:05:48.040 --> 00:05:48.460
Okay?

00:05:48.460 --> 00:05:50.935
Does not have to respond is completable future,

00:05:50.935 --> 00:05:54.625
which condenser actually produced sponsors a date Android.

00:05:54.625 --> 00:05:57.010
Okay, so how we can refer the data from

00:05:57.010 --> 00:06:01.090
the completable feature we need to use, then apply.

00:06:01.090 --> 00:06:04.015
And then we can use it then accept my thought.

00:06:04.015 --> 00:06:07.630
So I'm going to use the feature chart.

00:06:07.630 --> 00:06:09.370
Then.

00:06:09.370 --> 00:06:14.570
Apply. If the future is okay,

00:06:14.570 --> 00:06:16.970
it's not OK, subnets apply actually.

00:06:16.970 --> 00:06:23.090
So then apply. So then our play method will accept function as a input.

00:06:23.090 --> 00:06:25.220
Okay, So what is the function here?

00:06:25.220 --> 00:06:27.530
So function means it's a function,

00:06:27.530 --> 00:06:30.230
it's a functional interface which accepts one kind of inputted

00:06:30.230 --> 00:06:33.065
at another kind of response, correct?

00:06:33.065 --> 00:06:36.665
So the input is going to be for this particular function,

00:06:36.665 --> 00:06:41.255
it is going to be hashing every response from the response I need to retrieve the body.

00:06:41.255 --> 00:06:45.335
Okay, So this is the class and I'm going to call the body method.

00:06:45.335 --> 00:06:46.055
Okay?

00:06:46.055 --> 00:06:52.700
And then, so once that is done, then accept,

00:06:52.700 --> 00:06:57.185
it can accept accepted,

00:06:57.185 --> 00:07:01.250
then that's sort method which will accept the consumer as an input simply,

00:07:01.250 --> 00:07:02.750
I'm going to print the data.

00:07:02.750 --> 00:07:03.560
That's all.

00:07:03.560 --> 00:07:13.580
So system, I'm going to use the constructor reference system dot out, dot print LN.

00:07:13.580 --> 00:07:19.235
And I'm going to join the data H and everything.

00:07:19.235 --> 00:07:20.345
Sure.

00:07:20.345 --> 00:07:22.295
Okay. So that's all.

00:07:22.295 --> 00:07:24.965
So now we have the synchronous call method,

00:07:24.965 --> 00:07:27.455
which asked that request and which he asked the response.

00:07:27.455 --> 00:07:29.870
Only thing is different here we are calling this and asking

00:07:29.870 --> 00:07:34.775
Mother instead of Saint method because Saint belongs to synchronous called syntaxin,

00:07:34.775 --> 00:07:37.430
belongs to a asynchronous call.

00:07:37.430 --> 00:07:38.480
Right?

00:07:38.480 --> 00:07:40.490
So let me call this Madonna.

00:07:40.490 --> 00:07:41.990
I'll show you the outcome.

00:07:41.990 --> 00:07:44.990
So this is going to be asking call.

00:07:44.990 --> 00:07:46.775
It's all up to you,

00:07:46.775 --> 00:07:48.190
how we are grading, question,

00:07:48.190 --> 00:07:51.455
how you're creating that at times you can simply directly provide

00:07:51.455 --> 00:07:55.115
the entire thing inside here,

00:07:55.115 --> 00:07:56.420
but it doesn't looks good.

00:07:56.420 --> 00:08:00.425
That is why I created a separate variable here.

00:08:00.425 --> 00:08:02.420
So I'm going to run it.

00:08:02.420 --> 00:08:04.505
So let's see what is the outcome.

00:08:04.505 --> 00:08:06.950
And it's going to be the same outcome.

00:08:06.950 --> 00:08:09.440
C, arguments.

00:08:09.440 --> 00:08:14.160
And the API details the response.

00:08:15.670 --> 00:08:17.330
Right?

00:08:17.330 --> 00:08:21.800
Okay, so, so this is a simple example how we

00:08:21.800 --> 00:08:26.285
can use the Java 11 features to call the asynchronous call,

00:08:26.285 --> 00:08:27.980
and I think goodness called.

00:08:27.980 --> 00:08:29.360
Okay, so this is a very basic one.

00:08:29.360 --> 00:08:30.920
Okay, so the next example,

00:08:30.920 --> 00:08:34.295
I'm going to work with the same hash to DP,

00:08:34.295 --> 00:08:37.115
but I'm going to create a some proper example.

00:08:37.115 --> 00:08:39.020
I have seen some example in one of them,

00:08:39.020 --> 00:08:41.270
one of my, one of my friends blog.

00:08:41.270 --> 00:08:45.800
So I'm going to show you the example and which will be interesting one,

00:08:45.800 --> 00:08:47.330
Let's see each other in the next video.

00:08:47.330 --> 00:08:48.900
Thank you.
