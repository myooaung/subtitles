WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.205
Hello everyone. As part of general event,

00:00:02.205 --> 00:00:07.095
the next feature we're going to talk about what is Java flight recorder, okay?

00:00:07.095 --> 00:00:10.050
First, let's understand what is a flight recorder.

00:00:10.050 --> 00:00:12.525
Basically, each and every airplane,

00:00:12.525 --> 00:00:14.820
they contain something called a black box.

00:00:14.820 --> 00:00:16.980
Okay. So what is the purpose of a black box?

00:00:16.980 --> 00:00:20.730
So which is basically monitor H and everything,

00:00:20.730 --> 00:00:23.115
what is happening inside the flight,

00:00:23.115 --> 00:00:26.025
the flight timing and barrier traveling right now.

00:00:26.025 --> 00:00:29.280
And what is the speed we are traveling right now?

00:00:29.280 --> 00:00:31.710
And the location details,

00:00:31.710 --> 00:00:33.045
everything will be recorded,

00:00:33.045 --> 00:00:34.850
which means if something goes wrong,

00:00:34.850 --> 00:00:37.460
if the flight is missed or flight ish crashed,

00:00:37.460 --> 00:00:40.250
if you find out the black box,

00:00:40.250 --> 00:00:43.640
we will know what happened and what caused that issue.

00:00:43.640 --> 00:00:47.420
The similar way Java flight recorder, the similar purpose.

00:00:47.420 --> 00:00:53.090
Okay, so this particular GFR is for diagnose here running Java application,

00:00:53.090 --> 00:00:56.135
for example, you are running an application, right?

00:00:56.135 --> 00:00:58.100
So if something goes wrong,

00:00:58.100 --> 00:00:59.435
some memory outage issue,

00:00:59.435 --> 00:01:04.220
awesome heap memory issue are some IndexOutOfBoundsException.

00:01:04.220 --> 00:01:09.245
So we normally know when the issue has been trolled are exogenous when Christ,

00:01:09.245 --> 00:01:15.995
but there are other ways to monitor our diagnose Java running applications.

00:01:15.995 --> 00:01:16.535
Okay?

00:01:16.535 --> 00:01:20.404
You can simply say profiling your running application.

00:01:20.404 --> 00:01:24.530
So you can do everything using the Java flight recorder, for example,

00:01:24.530 --> 00:01:27.320
you are running an application and it is running for

00:01:27.320 --> 00:01:30.980
more than two or three hours and suddenly it got stopped.

00:01:30.980 --> 00:01:33.410
So at the moment it guards stopped,

00:01:33.410 --> 00:01:34.805
we don't know what happened.

00:01:34.805 --> 00:01:37.295
So if you go to the Java flight recorder,

00:01:37.295 --> 00:01:41.105
you can simply see what happened that particular time,

00:01:41.105 --> 00:01:42.830
time duration and what went wrong.

00:01:42.830 --> 00:01:43.640
Is there any issue?

00:01:43.640 --> 00:01:46.490
Is there any exception? Is there any outer bound, a memory exception?

00:01:46.490 --> 00:01:47.870
You can track everything.

00:01:47.870 --> 00:01:48.860
I'll show you.

00:01:48.860 --> 00:01:51.140
I have a sample program and I'll end the code

00:01:51.140 --> 00:01:54.390
and that will open the Java flight recorder.

00:01:56.380 --> 00:01:59.990
The next is basically it's gathering

00:01:59.990 --> 00:02:02.840
information about the running environment because it is mine drainage.

00:02:02.840 --> 00:02:04.610
So if it is monitoring, what does it mean?

00:02:04.610 --> 00:02:07.325
So it contains all the information.

00:02:07.325 --> 00:02:11.750
So if you save everything and all the information will

00:02:11.750 --> 00:02:16.280
be written our rights in a file called dot j f,

00:02:16.280 --> 00:02:18.350
which is nothing but Java flight recorder.

00:02:18.350 --> 00:02:19.970
Okay, So you're running an application,

00:02:19.970 --> 00:02:24.935
so you don't know which environment are which version of Java I ran that particular code.

00:02:24.935 --> 00:02:29.060
So but Java flight recorder contents each and every piece of information.

00:02:29.060 --> 00:02:31.295
Okay, So now I have is our flight recorder.

00:02:31.295 --> 00:02:36.620
So how can I open and explore what are the things that are available inside?

00:02:36.620 --> 00:02:40.440
So the one which are going to use is a Java miss and control.

00:02:40.570 --> 00:02:43.655
Okay, So Jarrod Mission Control is

00:02:43.655 --> 00:02:50.730
another console where you can open a GFR file to see what is inside.

00:02:51.460 --> 00:02:56.870
But if you want to use this unit to enable this particular feature,

00:02:56.870 --> 00:02:59.735
because these are all commercial future.

00:02:59.735 --> 00:03:05.570
So Java 10, this particular feature is commercial future.

00:03:05.570 --> 00:03:08.225
So it was, it was pied is part of JDK,

00:03:08.225 --> 00:03:11.720
but then after Java 10, it is more to open.

00:03:11.720 --> 00:03:13.490
Your enrichment is a free to use.

00:03:13.490 --> 00:03:18.230
Okay, So if you are running the mission old JRE unit

00:03:18.230 --> 00:03:22.790
to unlock the commercial future so you can use the flight recorder.

00:03:22.790 --> 00:03:25.250
So if you are on unlocking the commercial features,

00:03:25.250 --> 00:03:28.350
you wouldn't be able to use their flight recorder.

00:03:29.890 --> 00:03:32.915
Okay. So what contains a flight recorder?

00:03:32.915 --> 00:03:34.505
Okay. Now I have a GFR file.

00:03:34.505 --> 00:03:38.345
So I just want to know what is inside my GFR.

00:03:38.345 --> 00:03:43.250
Okay, so Let's take an example.

00:03:43.250 --> 00:03:46.504
So this is my console.

00:03:46.504 --> 00:03:49.430
So I ran some application and I got some

00:03:49.430 --> 00:03:53.525
out-of-memory exception or out-of-memory error or heap error.

00:03:53.525 --> 00:03:58.685
Okay, so, but this application has been recorded, true GFR.

00:03:58.685 --> 00:04:02.645
So which means you can track this information in DJ FOR.

00:04:02.645 --> 00:04:04.580
So what do you need to do?

00:04:04.580 --> 00:04:06.650
You can use the Java mission control.

00:04:06.650 --> 00:04:08.885
This is how the dashboard looks like.

00:04:08.885 --> 00:04:11.735
You can open the GFR file and you can see,

00:04:11.735 --> 00:04:16.535
so what are the memory and what is the threads or any exception?

00:04:16.535 --> 00:04:20.510
You can find out the garbage collections or you can take the environment variables,

00:04:20.510 --> 00:04:23.700
our system properties, everything you can track.

00:04:24.460 --> 00:04:25.925
Right?

00:04:25.925 --> 00:04:28.370
So what I'm gonna do in the next video,

00:04:28.370 --> 00:04:31.145
I got some sample code from the internet.

00:04:31.145 --> 00:04:35.990
So I'm going to use it to manipulate some out-of-memory error.

00:04:35.990 --> 00:04:40.250
So I'm going to show you what will happen and how you can save the message AIFF file,

00:04:40.250 --> 00:04:44.915
and then how we can open using the RL Mission Control.

00:04:44.915 --> 00:04:47.250
Thank you.
