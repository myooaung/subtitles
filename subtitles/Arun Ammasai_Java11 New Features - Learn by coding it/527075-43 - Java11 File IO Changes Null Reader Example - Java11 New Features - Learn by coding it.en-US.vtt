WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.530
Hello everyone.

00:00:01.530 --> 00:00:03.105
Welcome back.

00:00:03.105 --> 00:00:07.740
So let's try a different example.

00:00:07.740 --> 00:00:09.210
So what I need to do,

00:00:09.210 --> 00:00:12.630
I have to, or I want to create a different kind of reader.

00:00:12.630 --> 00:00:17.100
So let's see how we can create a different kind of readers.

00:00:17.100 --> 00:00:19.965
So we are going to use null stream for example.

00:00:19.965 --> 00:00:21.270
So what I'm gonna do,

00:00:21.270 --> 00:00:28.755
I'm gonna create the numerator or two had private static void.

00:00:28.755 --> 00:00:31.140
So we are going to explore the null stream rate.

00:00:31.140 --> 00:00:32.820
So null stream reader example,

00:00:32.820 --> 00:00:35.070
ordinal three-minute does my middle name.

00:00:35.070 --> 00:00:39.750
So I'm going to show you the different ways of creating their readers.

00:00:39.750 --> 00:00:44.225
So reader R1 is equal to.

00:00:44.225 --> 00:00:46.760
So let's input the reader first,

00:00:46.760 --> 00:00:50.040
which is available in the IO package.

00:00:50.530 --> 00:00:53.960
Okay, here, new.

00:00:53.960 --> 00:00:56.075
Let's use StringBuilder.

00:00:56.075 --> 00:01:01.084
So I'm going to provide welcome to Java

00:01:01.084 --> 00:01:07.175
11 and reader or two.

00:01:07.175 --> 00:01:10.220
I'm going to keep it as a null for now because I want to show

00:01:10.220 --> 00:01:14.540
you what happens if you pass a stream as a null, right?

00:01:14.540 --> 00:01:17.030
So I'm going to grade your reader.

00:01:17.030 --> 00:01:19.880
One more reader, R3, the second one.

00:01:19.880 --> 00:01:21.125
It's not the exact scenario.

00:01:21.125 --> 00:01:22.730
I'm just trying to manipulate something.

00:01:22.730 --> 00:01:26.390
Okay. But in the real time scenario that I won't be coming like that.

00:01:26.390 --> 00:01:28.205
So a3 is equal to,

00:01:28.205 --> 00:01:30.995
and so we use string rate.

00:01:30.995 --> 00:01:33.815
So let's do something else. Let's try category.

00:01:33.815 --> 00:01:36.830
So new car array radar.

00:01:36.830 --> 00:01:40.745
So here I'm going to use new care.

00:01:40.745 --> 00:01:44.070
So here we are going to use some data.

00:01:44.560 --> 00:01:52.370
So C, B, and a carrot.

00:01:52.370 --> 00:01:55.580
So now basically I have a three little dots here.

00:01:55.580 --> 00:01:57.800
So i how to print all the data.

00:01:57.800 --> 00:01:59.600
So I don't want to write anything here.

00:01:59.600 --> 00:02:01.910
So what I'm gonna do is I'm going to write a new method.

00:02:01.910 --> 00:02:05.990
So that method which will takes a list of a reader and it will print the data.

00:02:05.990 --> 00:02:09.320
Okay? So it is going to be static,

00:02:09.320 --> 00:02:12.050
void, print or display data.

00:02:12.050 --> 00:02:15.455
Display data. Got it.

00:02:15.455 --> 00:02:22.320
So this method is going to accept your list of Redis rate.

00:02:22.320 --> 00:02:26.095
This job's reader and a lie.

00:02:26.095 --> 00:02:28.945
Okay, So now it is going to be a list of eight.

00:02:28.945 --> 00:02:32.380
So I'm going to use a stream to open the data is a collection rate.

00:02:32.380 --> 00:02:34.390
So I'm going to open the stream the first place,

00:02:34.390 --> 00:02:35.905
and then I'm going to use a map,

00:02:35.905 --> 00:02:38.334
map which will accept a function.

00:02:38.334 --> 00:02:40.750
In interface, the input function is nothing but it is

00:02:40.750 --> 00:02:43.420
a functional interface which like third one kind of data,

00:02:43.420 --> 00:02:45.730
and it will return a different kind of data,

00:02:45.730 --> 00:02:48.670
are summing one candidate or another kind of a data.

00:02:48.670 --> 00:02:50.620
So here I have buffer reader,

00:02:50.620 --> 00:02:52.705
so I want to create a instance of it.

00:02:52.705 --> 00:02:56.065
And then I had to use one more time.

00:02:56.065 --> 00:02:58.795
The reason I want to retrieve the data from it,

00:02:58.795 --> 00:03:01.300
I have the instance now I need to retrieve that data from

00:03:01.300 --> 00:03:04.785
the instance using them by that called lines.

00:03:04.785 --> 00:03:07.520
That's all know, we have to print the data,

00:03:07.520 --> 00:03:09.215
so let's print the data as well.

00:03:09.215 --> 00:03:13.775
So let's use forEach method in stream.

00:03:13.775 --> 00:03:16.310
And I'm going to use the forEach method here,

00:03:16.310 --> 00:03:23.480
stream dot forEach and just print the data system dot out.

00:03:23.480 --> 00:03:26.610
And we can use the method reference here.

00:03:27.430 --> 00:03:30.800
Sorry, can tell him.

00:03:30.800 --> 00:03:32.720
Okay, so now we have a method which will

00:03:32.720 --> 00:03:36.350
takes list off here as the input and it will print the data.

00:03:36.350 --> 00:03:38.180
So here, just the first map,

00:03:38.180 --> 00:03:40.624
which is to be done in the BufferedReader.

00:03:40.624 --> 00:03:41.885
And from the buffer,

00:03:41.885 --> 00:03:44.465
it is a stream of stream which comes as a stream.

00:03:44.465 --> 00:03:47.585
And then I'm printing the stream here, stream dot forEach.

00:03:47.585 --> 00:03:51.170
Or else you can create one more map here and you

00:03:51.170 --> 00:03:54.425
can convert this stream of string into a string,

00:03:54.425 --> 00:03:56.795
and then you can proceed the for-each.

00:03:56.795 --> 00:03:58.595
So now what do I need to do?

00:03:58.595 --> 00:04:00.395
I had to call that displacement that,

00:04:00.395 --> 00:04:02.015
and I had to send us a list.

00:04:02.015 --> 00:04:04.889
So I'm going to use arrays,

00:04:05.770 --> 00:04:08.345
arrays dot as list.

00:04:08.345 --> 00:04:12.830
And I had to use R1, R2, and R3.

00:04:12.830 --> 00:04:15.590
Okay, so let's run the data,

00:04:15.590 --> 00:04:19.265
but before we need to call them at that first place.

00:04:19.265 --> 00:04:21.575
So null stream need a method.

00:04:21.575 --> 00:04:23.120
So I'm going to run it right now.

00:04:23.120 --> 00:04:26.990
We'll see eventually it will end up with a NullPointerException.

00:04:26.990 --> 00:04:29.465
And we all know Why is that?

00:04:29.465 --> 00:04:32.945
Because the reader to which contents null value.

00:04:32.945 --> 00:04:35.900
Okay, So how it can be read to rectifier in Java 11.

00:04:35.900 --> 00:04:38.150
So in trouble for using null the moment,

00:04:38.150 --> 00:04:39.800
do you know that might be possibly d,

00:04:39.800 --> 00:04:41.660
That'll be nulled stream here.

00:04:41.660 --> 00:04:44.630
You can simply use for Reader dot non-leader,

00:04:44.630 --> 00:04:51.020
which will accept your null data so it won't end up with an issue.

00:04:51.020 --> 00:04:53.285
The thing is, when you're using null the reader,

00:04:53.285 --> 00:04:54.800
the compiler knows that, okay,

00:04:54.800 --> 00:04:59.555
it is going to even nowadays so it can simply skip the data are ignored the data.

00:04:59.555 --> 00:05:03.530
So because it, it will not show you the NullPointerException,

00:05:03.530 --> 00:05:06.110
the data may be rendered in a later point.

00:05:06.110 --> 00:05:08.885
So let me run the same code again.

00:05:08.885 --> 00:05:11.210
So now we had the proper things.

00:05:11.210 --> 00:05:14.585
So we'll come to Java, which is coming from the R1 and ABC,

00:05:14.585 --> 00:05:15.875
which is coming from the all three.

00:05:15.875 --> 00:05:19.595
That is no ought to hear because A2 will be ignored since it is an analogy there.

00:05:19.595 --> 00:05:23.270
So this is the new metadata.

00:05:23.270 --> 00:05:26.540
Okay, So we tried readers, right?

00:05:26.540 --> 00:05:28.025
So the similar way,

00:05:28.025 --> 00:05:31.760
we need to try the right stream ESL read.

00:05:31.760 --> 00:05:33.380
So null writer.

00:05:33.380 --> 00:05:34.820
So let's try the null,

00:05:34.820 --> 00:05:35.990
right, and the next example.

00:05:35.990 --> 00:05:37.560
Thank you.
