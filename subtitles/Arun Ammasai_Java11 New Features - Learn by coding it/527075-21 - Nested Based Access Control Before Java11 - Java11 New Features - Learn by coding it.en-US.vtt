WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.340
Hello everyone, Welcome back.

00:00:02.340 --> 00:00:05.670
So we discussed how the bridge method will be created.

00:00:05.670 --> 00:00:07.830
And it is, it doesn't matter which

00:00:07.830 --> 00:00:10.620
will help us to communicate between these two classes, right?

00:00:10.620 --> 00:00:12.630
Which means the inner class and the next class.

00:00:12.630 --> 00:00:19.335
Okay, So let's create the same example and we'll see why that method is available or not.

00:00:19.335 --> 00:00:22.980
Okay, so I'm going to open or editor here.

00:00:22.980 --> 00:00:24.480
So I'm going to create a class called,

00:00:24.480 --> 00:00:26.895
let me credit at className called test.

00:00:26.895 --> 00:00:28.875
So let me save them in the first place.

00:00:28.875 --> 00:00:30.970
I'm going to save ESA.

00:00:31.750 --> 00:00:35.810
So what I can say that my user,

00:00:35.810 --> 00:00:37.940
that I have a folder called taste.

00:00:37.940 --> 00:00:44.180
So here I'm going to save the class acid test dot Java. Got it.

00:00:44.180 --> 00:00:45.635
So now what I'm gonna do as,

00:00:45.635 --> 00:00:50.405
as I said, as we see in the previous slide, right?

00:00:50.405 --> 00:00:53.810
So I have proliferate and

00:00:53.810 --> 00:01:01.190
static int x is equal to 5.

00:01:01.190 --> 00:01:01.835
Okay?

00:01:01.835 --> 00:01:03.230
So now I have a class.

00:01:03.230 --> 00:01:05.600
Instead my class, I have a static variable,

00:01:05.600 --> 00:01:08.970
and now I'm going to create one more class here.

00:01:10.330 --> 00:01:17.870
Static class, nested class.

00:01:17.870 --> 00:01:22.250
So this is going to be another class credit.

00:01:22.250 --> 00:01:23.975
So here what I'm gonna do,

00:01:23.975 --> 00:01:30.050
I'm going to access the data, right?

00:01:30.050 --> 00:01:33.110
So let me do that. So that way I can do that.

00:01:33.110 --> 00:01:35.315
So first of all, let me create a method here.

00:01:35.315 --> 00:01:41.810
So public, static wide or do some.

00:01:41.810 --> 00:01:46.745
So this lemma to name, I'm not gonna do anything here just simply trying to access the x.

00:01:46.745 --> 00:01:48.240
That's all.

00:01:48.790 --> 00:01:54.765
System dot out, dot B or a AND LN print Allen.

00:01:54.765 --> 00:02:01.045
And here I'm just accessing that test.txt, test dot x.

00:02:01.045 --> 00:02:02.395
That's all.

00:02:02.395 --> 00:02:04.570
You don't need the class time,

00:02:04.570 --> 00:02:05.590
It's wherever the same rate.

00:02:05.590 --> 00:02:07.465
So you can directly use the x here.

00:02:07.465 --> 00:02:08.185
Okay?

00:02:08.185 --> 00:02:10.135
So now when I compile the code,

00:02:10.135 --> 00:02:13.225
it has to be credit to class, feels correct.

00:02:13.225 --> 00:02:15.430
Normally, live it to only one class,

00:02:15.430 --> 00:02:17.425
but since we have a inner class,

00:02:17.425 --> 00:02:18.925
it will create it to class.

00:02:18.925 --> 00:02:19.540
Okay?

00:02:19.540 --> 00:02:22.045
So let's open the terminal.

00:02:22.045 --> 00:02:24.025
So maximize it.

00:02:24.025 --> 00:02:25.975
I'm going to the test folder.

00:02:25.975 --> 00:02:28.180
So let me remove all the existing glass,

00:02:28.180 --> 00:02:30.400
fails to show you the proper data.

00:02:30.400 --> 00:02:32.740
Okay, so ls c.

00:02:32.740 --> 00:02:34.630
Now we have our different examples.

00:02:34.630 --> 00:02:37.330
So we're going to explore test stat Java here.

00:02:37.330 --> 00:02:39.775
But one more thing we need to keep it in mind.

00:02:39.775 --> 00:02:45.070
So first, we are trying to compile using the before Java 11 version,

00:02:45.070 --> 00:02:47.440
which means Let's try with the Java ten.

00:02:47.440 --> 00:02:52.180
So in Java 10 only you should be able to see the bridge matter.

00:02:52.180 --> 00:02:52.750
Okay?

00:02:52.750 --> 00:02:58.644
So, so we have the bridge matter in the library and Java Virtual Machine,

00:02:58.644 --> 00:03:00.835
java human JDK 10.

00:03:00.835 --> 00:03:03.670
And here you have a content and home,

00:03:03.670 --> 00:03:05.080
and here we have our bin.

00:03:05.080 --> 00:03:09.100
And here you have a Java C. And I'm going to call compile

00:03:09.100 --> 00:03:14.605
the test Java using Java compiler, not the Java 11.

00:03:14.605 --> 00:03:16.315
Okay, the compilation is done.

00:03:16.315 --> 00:03:17.560
Now what I'm gonna do,

00:03:17.560 --> 00:03:19.470
I'm gonna progress L dot LTI.

00:03:19.470 --> 00:03:24.050
Now you should be able to see there are two classes created here, right?

00:03:24.050 --> 00:03:27.900
So that test class,

00:03:29.050 --> 00:03:32.930
we're supposed to see two-class,

00:03:32.930 --> 00:03:35.270
whereas here what I can see only one.

00:03:35.270 --> 00:03:38.340
So I think what is wrong here?

00:03:38.500 --> 00:03:45.380
I think it is trying to compile the previous discharge Java which I deleted already.

00:03:45.380 --> 00:03:50.390
But what I'm gonna do use let me save it again one more time and hear.

00:03:50.390 --> 00:03:53.630
Oh, I have to provide the coordinate.

00:03:53.630 --> 00:03:58.205
It could have been thrown in some compelled and mirror.

00:03:58.205 --> 00:04:02.250
Okay, so let's go back and do the compilation again.

00:04:02.770 --> 00:04:07.730
So I'm going to use Java and Java.

00:04:07.730 --> 00:04:09.410
Okay, it's combinations.

00:04:09.410 --> 00:04:12.155
Jan, I'm going to do the children.

00:04:12.155 --> 00:04:12.920
Okay, cool.

00:04:12.920 --> 00:04:16.895
Now see that Excel file called test that class.

00:04:16.895 --> 00:04:21.905
There is one more file called test dollar nested class that Java.

00:04:21.905 --> 00:04:23.075
So both of them,

00:04:23.075 --> 00:04:25.355
both of the classes available in a single file,

00:04:25.355 --> 00:04:27.200
which means this is a single file.

00:04:27.200 --> 00:04:28.700
But when we compile it,

00:04:28.700 --> 00:04:32.900
test is created a new class and nested class credit as a new class file.

00:04:32.900 --> 00:04:34.895
Okay, so now we need to understand,

00:04:34.895 --> 00:04:37.040
so how these two are communicator,

00:04:37.040 --> 00:04:39.290
guaranteed this girder a new or different classes, right?

00:04:39.290 --> 00:04:41.795
So that is a way it has to be communicate to each other.

00:04:41.795 --> 00:04:44.480
Okay. That is where that static mother comes into.

00:04:44.480 --> 00:04:46.235
I'm in the bridge. Mother comes into place.

00:04:46.235 --> 00:04:49.550
If you want to see, just try Java API, iPhone,

00:04:49.550 --> 00:04:51.620
and you have to provide a class name,

00:04:51.620 --> 00:04:54.810
test dot class here.

00:04:55.210 --> 00:04:59.630
Okay, Can you see the static int method here?

00:04:59.630 --> 00:05:02.000
Axis dollars there is 0.

00:05:02.000 --> 00:05:08.330
So this is a method is acting as a bridge between the nest class and the inner class,

00:05:08.330 --> 00:05:11.539
or you can simply sit in his class and Dennis members.

00:05:11.539 --> 00:05:12.515
Right?

00:05:12.515 --> 00:05:14.330
So in the next video,

00:05:14.330 --> 00:05:15.395
what we're going to discuss,

00:05:15.395 --> 00:05:17.750
we are going to do the same thing and we are going to

00:05:17.750 --> 00:05:20.360
compel the same code against the Java 11 competitor.

00:05:20.360 --> 00:05:23.300
And we'll see what is the difference between add 10,

00:05:23.300 --> 00:05:26.730
11 and the before 11. Thank you.
