WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.205
Hey everyone, welcome back.

00:00:02.205 --> 00:00:06.120
So we've written an example and we save it in our test folder.

00:00:06.120 --> 00:00:10.770
So now we need to compile them using Java compiler, right?

00:00:10.770 --> 00:00:14.909
Because we want to see why we are getting an exception,

00:00:14.909 --> 00:00:17.610
got to be in it or what is the exception right when you're trying to

00:00:17.610 --> 00:00:20.790
access the do some math.

00:00:20.790 --> 00:00:26.295
So let's go back to your console, I mean terminal.

00:00:26.295 --> 00:00:30.420
And then I'm going to compare them using Java library.

00:00:30.420 --> 00:00:37.320
The first place, JDK 10 and content WHO.

00:00:37.320 --> 00:00:42.265
And here I'm using bin and Java C space.

00:00:42.265 --> 00:00:49.110
And nonmetal name is reflective access dot Java.

00:00:49.960 --> 00:00:52.265
Okay, there is some error.

00:00:52.265 --> 00:00:53.840
Cannot find symbol.

00:00:53.840 --> 00:00:55.130
Okay, Got it.

00:00:55.130 --> 00:00:57.680
So we created our reflection class that,

00:00:57.680 --> 00:01:01.680
but we need to import the class.

00:01:02.440 --> 00:01:12.950
So I add the input Sullivan directly import the java dot lang dot reflect.

00:01:12.950 --> 00:01:15.800
I'm going to grow its time so I can access all of them.

00:01:15.800 --> 00:01:19.505
So save it again, go back to your terminal and compile them again.

00:01:19.505 --> 00:01:22.400
See now the compilation is done.

00:01:22.400 --> 00:01:24.960
So now let's try to run it.

00:01:26.500 --> 00:01:33.785
So using Java Executor, see what happened.

00:01:33.785 --> 00:01:36.860
The class reflected access nested class cannot

00:01:36.860 --> 00:01:40.310
acts as a member of arithmetic class with a modifier private static.

00:01:40.310 --> 00:01:43.925
So it's not able to access because reflective,

00:01:43.925 --> 00:01:48.830
it should have independent axis to each and every member of the classes.

00:01:48.830 --> 00:01:50.390
But that is an issue.

00:01:50.390 --> 00:01:53.735
But this issue has been fixed in Java 11.

00:01:53.735 --> 00:01:57.035
So now what I'm gonna do is I'm going to try the,

00:01:57.035 --> 00:02:01.220
i'm, I'm gonna try compile the same code using Java 11.

00:02:01.220 --> 00:02:07.850
Okay, So Java C space reflective access that Java.

00:02:07.850 --> 00:02:10.505
So this is Java 11 compiler now,

00:02:10.505 --> 00:02:14.510
so I'm going to run them reflective access.

00:02:14.510 --> 00:02:17.810
See, it was not working earlier.

00:02:17.810 --> 00:02:18.665
Okay.

00:02:18.665 --> 00:02:21.710
But it is now working fine.

00:02:21.710 --> 00:02:25.159
So this is the impact in the eye reflection.

00:02:25.159 --> 00:02:26.450
I mean that reflection,

00:02:26.450 --> 00:02:28.250
so go back to the example.

00:02:28.250 --> 00:02:32.600
So in a bowl scenario, I'm able to access the x because it is part of efficient class.

00:02:32.600 --> 00:02:34.160
So I don't have any issues here.

00:02:34.160 --> 00:02:38.825
But do some method is a part of another class which is available in the inner class.

00:02:38.825 --> 00:02:42.680
So since it is a inner class,

00:02:42.680 --> 00:02:45.875
we are not able to access them through that reflection.

00:02:45.875 --> 00:02:49.070
Right? So if you want to see that one more time,

00:02:49.070 --> 00:02:54.875
agonists cannot act as a member of reflective axis with the modifier in a private static.

00:02:54.875 --> 00:02:57.665
That's the thing. Okay, so now we've got a 50.

00:02:57.665 --> 00:03:01.745
The reason when I run a first-time using Django 10,

00:03:01.745 --> 00:03:04.025
eight directly printed the 50.

00:03:04.025 --> 00:03:07.460
But the second time I'm trying to render do some method,

00:03:07.460 --> 00:03:08.840
it is accessing the method,

00:03:08.840 --> 00:03:12.725
but when I'm trying to access the set into my third, it is trying to say,

00:03:12.725 --> 00:03:15.920
what would be the x value from 50 to 20,

00:03:15.920 --> 00:03:17.570
and it is getting error.

00:03:17.570 --> 00:03:20.780
The reason it is a private static and it is not allowed

00:03:20.780 --> 00:03:25.205
in Java 10 to access any private members using the inner classes.

00:03:25.205 --> 00:03:28.175
But in Java, we can do that.

00:03:28.175 --> 00:03:31.130
Okay, So there are a few more examples

00:03:31.130 --> 00:03:34.070
or there are few other things which we need to know we'll talk about in the next video.

00:03:34.070 --> 00:03:35.550
Thank you.
