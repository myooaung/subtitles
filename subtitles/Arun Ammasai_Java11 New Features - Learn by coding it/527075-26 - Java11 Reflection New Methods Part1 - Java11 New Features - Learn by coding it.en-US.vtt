WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.550
Hello everyone. Welcome back.

00:00:02.550 --> 00:00:04.485
In the last video, we discussed a boat.

00:00:04.485 --> 00:00:08.250
What is the impact on their reflection level, right?

00:00:08.250 --> 00:00:09.720
And not only that,

00:00:09.720 --> 00:00:13.170
there are some new method has been introduced to find out

00:00:13.170 --> 00:00:17.775
the nest and the host are some other letter three method has been introduced.

00:00:17.775 --> 00:00:21.100
Let's talk about what are the three methods.

00:00:21.910 --> 00:00:23.945
So these are the numerator.

00:00:23.945 --> 00:00:27.020
No, first one is get nist host to

00:00:27.020 --> 00:00:30.965
define the who is the host for a given particular class.

00:00:30.965 --> 00:00:33.020
Okay, So to find the host,

00:00:33.020 --> 00:00:35.525
you can use the good Nate host metadata.

00:00:35.525 --> 00:00:38.720
And the second one, nest members, right?

00:00:38.720 --> 00:00:41.120
For example, if you have a nest that particular Dennis

00:00:41.120 --> 00:00:44.405
contains multiple inner classes, right?

00:00:44.405 --> 00:00:51.185
So you wanted to do all the nist members from a particular host or a nest, right?

00:00:51.185 --> 00:00:52.505
So to do that,

00:00:52.505 --> 00:00:55.310
you need to have the get nist members.

00:00:55.310 --> 00:00:56.600
Don't help.

00:00:56.600 --> 00:00:59.210
And then, okay, So I want to do some validation.

00:00:59.210 --> 00:01:06.935
I want to check whether this particular class belongs to this nest to validate that.

00:01:06.935 --> 00:01:10.805
So you can use is nist mid of my thought.

00:01:10.805 --> 00:01:12.500
Okay, So using these three methods,

00:01:12.500 --> 00:01:14.584
I'm going to give you a simple example.

00:01:14.584 --> 00:01:17.420
So how we can make use of them, right?

00:01:17.420 --> 00:01:20.300
So let's go back to our intelligence ID and I'm going to

00:01:20.300 --> 00:01:24.210
create an example there and explored the example.

00:01:25.060 --> 00:01:29.540
Okay, let's come back to Intel J, K.

00:01:29.540 --> 00:01:33.095
So first thing, I'm going to create a new package here.

00:01:33.095 --> 00:01:35.810
You know, that cage.

00:01:35.810 --> 00:01:46.650
So what we can call it, It's going to be or Nest. Nest then host.

00:01:49.830 --> 00:01:53.620
So here I'm going to create a new class here,

00:01:53.620 --> 00:01:56.035
create a new Java class,

00:01:56.035 --> 00:02:00.009
and I'm going to call them as Java 11 reflection methods.

00:02:00.009 --> 00:02:05.860
Java 11 reflection mintues,

00:02:05.860 --> 00:02:07.810
I think the package name,

00:02:07.810 --> 00:02:10.900
I think I can make it a set of flushing changes.

00:02:10.900 --> 00:02:15.460
So what I can do is refactor and I'm going to rename it.

00:02:15.460 --> 00:02:24.130
So reflection and discouragement dots, which makes sense, right?

00:02:24.130 --> 00:02:28.580
Okay, so let me go to the presentation mode.

00:02:30.060 --> 00:02:33.625
Okay guys, so basically what do I need?

00:02:33.625 --> 00:02:37.540
So I'm trying to create a class that contains multiple nest inside.

00:02:37.540 --> 00:02:39.160
I mean, less classes,

00:02:39.160 --> 00:02:41.770
or you can simply call them as inner classes.

00:02:41.770 --> 00:02:44.245
So let me create an example.

00:02:44.245 --> 00:02:47.770
So first thing, I'm going to create a first-class here,

00:02:47.770 --> 00:02:53.755
public lands, Nestor, class a.

00:02:53.755 --> 00:02:56.690
And I'm going to copy the same thing.

00:02:56.880 --> 00:02:59.005
Okay. It's, it's an empty glass.

00:02:59.005 --> 00:03:00.370
And I'm going to go to one more class here,

00:03:00.370 --> 00:03:02.425
which is called as a nice Class B.

00:03:02.425 --> 00:03:07.284
And again, I don't have anything else inside and I'm going to create a main method.

00:03:07.284 --> 00:03:14.450
So, so in the main method we're going to find out Is a nest are,

00:03:14.450 --> 00:03:15.740
what are the nest members are?

00:03:15.740 --> 00:03:17.945
What are the different methods?

00:03:17.945 --> 00:03:22.610
The first thing, what I'm trying to do is I'm trying to find the nests.

00:03:22.610 --> 00:03:24.590
So how we can do that?

00:03:24.590 --> 00:03:26.570
So let's write a simple method.

00:03:26.570 --> 00:03:28.340
So what we are trying to do,

00:03:28.340 --> 00:03:30.395
I will pass a single class fail.

00:03:30.395 --> 00:03:32.180
So what we're trying to do,

00:03:32.180 --> 00:03:36.590
so when you add a class name in to find out what are the nist are,

00:03:36.590 --> 00:03:39.170
what are the NUS members and other details.

00:03:39.170 --> 00:03:39.710
Okay?

00:03:39.710 --> 00:03:42.590
So instead of that, instead of grading in the same method,

00:03:42.590 --> 00:03:44.330
I'm going to create a separate matter here.

00:03:44.330 --> 00:03:51.260
So RY rate static wide and I'm going to name them.

00:03:51.260 --> 00:03:54.199
So find nests.

00:03:54.199 --> 00:04:00.560
So the input is going to be classes, right?

00:04:00.560 --> 00:04:01.805
So I'm gonna class,

00:04:01.805 --> 00:04:04.070
we don't know what is the class name I'm going to pass,

00:04:04.070 --> 00:04:05.675
I'm going to pass a generic here.

00:04:05.675 --> 00:04:07.850
So here it is going to be className.

00:04:07.850 --> 00:04:14.375
Got it. Okay, so now let's implement the logic.

00:04:14.375 --> 00:04:16.700
Okay, So first of all, let me get the symbolism of the class,

00:04:16.700 --> 00:04:19.535
whatever the class name they're passing to the method,

00:04:19.535 --> 00:04:21.335
I'm going to print the name of it.

00:04:21.335 --> 00:04:25.055
So what I'm gonna do, so simply throw it out.

00:04:25.055 --> 00:04:28.145
So I'm going to print the class name here.

00:04:28.145 --> 00:04:29.960
It's again, another big example,

00:04:29.960 --> 00:04:31.805
but it's okay, it's worth it.

00:04:31.805 --> 00:04:37.140
So that lastname dot get simple him, right?

00:04:38.890 --> 00:04:44.090
And it can tell us,

00:04:44.090 --> 00:04:45.680
well, the first thing that I'm trying to do,

00:04:45.680 --> 00:04:47.165
so let me try something here.

00:04:47.165 --> 00:04:48.905
So what I'm trying to do now,

00:04:48.905 --> 00:04:51.590
so I'm trying to find out, sorry.

00:04:51.590 --> 00:04:55.669
I'm trying to find out the nest numbers,

00:04:55.669 --> 00:05:01.925
which means members or below.

00:05:01.925 --> 00:05:03.665
So what I'm gonna do,

00:05:03.665 --> 00:05:09.080
so I'm going to use class name dot,

00:05:09.080 --> 00:05:14.809
and the numerator is you're gonna use guest nested members.

00:05:14.809 --> 00:05:17.675
So this is a method which we are going to use, right?

00:05:17.675 --> 00:05:22.340
So just take a load when you're using good ness members,

00:05:22.340 --> 00:05:25.669
it will return the array of classes,

00:05:25.669 --> 00:05:27.260
which means multiple classes.

00:05:27.260 --> 00:05:32.165
So you will receive the response back as an array, right?

00:05:32.165 --> 00:05:34.340
So I'm going to use them.

00:05:34.340 --> 00:05:41.360
And here I'm going to collect them as an array class. Okay?

00:05:41.360 --> 00:05:47.480
So remember us, right?

00:05:47.480 --> 00:05:50.435
So let's keep it in this way.

00:05:50.435 --> 00:05:54.320
Let's start explore more on the next video.

00:05:54.320 --> 00:05:55.980
Thank you.
