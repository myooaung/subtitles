WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.580
Hello everyone. Welcome back.

00:00:02.580 --> 00:00:04.545
So in this video we're going to talk about

00:00:04.545 --> 00:00:08.595
the next feature which is called as ministered based access control.

00:00:08.595 --> 00:00:14.730
Basically, it has to Jan everything with the classes and the inner classes.

00:00:14.730 --> 00:00:20.070
So the nest is that allowing nested classes to be part of the same class.

00:00:20.070 --> 00:00:21.780
For example, you have a class.

00:00:21.780 --> 00:00:25.710
So in our class, you have one more class which is inside your class.

00:00:25.710 --> 00:00:27.495
We normally call the messy net class,

00:00:27.495 --> 00:00:30.330
that is called us nesting, right?

00:00:30.330 --> 00:00:34.530
The next one. So now take an example.

00:00:34.530 --> 00:00:36.690
As I mentioned, there was a class inside the class,

00:00:36.690 --> 00:00:37.905
I have one more class.

00:00:37.905 --> 00:00:40.490
So how it will compile?

00:00:40.490 --> 00:00:42.770
Normally when you compile a single Java file,

00:00:42.770 --> 00:00:44.375
you will get a single class file.

00:00:44.375 --> 00:00:49.280
But the moment when you're compiling a class which contains the inlet class,

00:00:49.280 --> 00:00:51.500
which will create a two-class fails.

00:00:51.500 --> 00:00:53.720
So basically how it is happening, right?

00:00:53.720 --> 00:00:55.505
So the first class,

00:00:55.505 --> 00:00:57.650
which means the parent class,

00:00:57.650 --> 00:00:59.900
or you can simply say in the next class.

00:00:59.900 --> 00:01:02.540
So that will create a class,

00:01:02.540 --> 00:01:04.400
for example, a dot class.

00:01:04.400 --> 00:01:06.875
And instead of a, I have B class.

00:01:06.875 --> 00:01:09.905
So there'll be one more class created beat at class.

00:01:09.905 --> 00:01:13.400
So even though it is a single file contains one class,

00:01:13.400 --> 00:01:15.320
it will create two-class fail.

00:01:15.320 --> 00:01:16.910
So what basically is happening?

00:01:16.910 --> 00:01:23.345
It will consider each and every class has a set E separate Class Files, right?

00:01:23.345 --> 00:01:25.400
So now we don't understand, Okay,

00:01:25.400 --> 00:01:27.200
so now I have a single file contents to

00:01:27.200 --> 00:01:29.315
class how they're going to communicate to each other,

00:01:29.315 --> 00:01:32.270
since they're creating two class files.

00:01:32.270 --> 00:01:38.480
Okay, So and that will be something called the abridgment that will be created.

00:01:38.480 --> 00:01:39.950
So through the bridge,

00:01:39.950 --> 00:01:42.950
those two classes will be communicated to each other.

00:01:42.950 --> 00:01:44.645
We'll talk about in details.

00:01:44.645 --> 00:01:47.015
Okay, So let me show you a simple example, okay?

00:01:47.015 --> 00:01:48.665
And more important thing.

00:01:48.665 --> 00:01:50.600
This is a bytecode level change.

00:01:50.600 --> 00:01:52.280
So as a developer,

00:01:52.280 --> 00:01:54.620
do you need to do any changes from your coding perspective?

00:01:54.620 --> 00:01:57.230
You don't have to do any changes in your coding perspective.

00:01:57.230 --> 00:02:00.830
It is pretty much about D compiler change.

00:02:00.830 --> 00:02:02.990
So let me give you an, a simple example.

00:02:02.990 --> 00:02:04.805
So I have a class called test,

00:02:04.805 --> 00:02:09.605
and inside of the class I have a static variable or the class level.

00:02:09.605 --> 00:02:14.990
And I have one more class called as a nested class and which has a do some matter.

00:02:14.990 --> 00:02:17.420
So even though if it is a private,

00:02:17.420 --> 00:02:18.860
so when you have a netlist,

00:02:18.860 --> 00:02:23.120
they have the independent axis to the members of the next class.

00:02:23.120 --> 00:02:26.405
So now when I compile this particular class, you know what will happen.

00:02:26.405 --> 00:02:29.300
I'll have two classes will be credited.

00:02:29.300 --> 00:02:30.950
The first one is test stat class,

00:02:30.950 --> 00:02:32.315
which is a nice class.

00:02:32.315 --> 00:02:37.670
And the second one it will create is Dolan nested class in that class,

00:02:37.670 --> 00:02:41.510
which means it will create one more class fill for the inner class.

00:02:41.510 --> 00:02:43.190
Okay, so now I have a two class,

00:02:43.190 --> 00:02:44.720
but what we're trying to do,

00:02:44.720 --> 00:02:48.170
I'm trying to access the x which is available in the test.

00:02:48.170 --> 00:02:50.495
I'm trying to access it and say that in this class.

00:02:50.495 --> 00:02:53.945
So both are considering as a different class how it is going to communicate.

00:02:53.945 --> 00:02:57.110
So how the x is accessible in the lane number six.

00:02:57.110 --> 00:03:00.485
Okay, so which method is helping us to understand

00:03:00.485 --> 00:03:06.545
or allowing access to read the data from the next class.

00:03:06.545 --> 00:03:10.370
That's what we're going to talk about in the next slide.

00:03:10.370 --> 00:03:12.290
So first of all,

00:03:12.290 --> 00:03:17.630
let me tell you how it looks like before Java seven, right?

00:03:17.630 --> 00:03:22.250
So to access the field test dot x from the nested class,

00:03:22.250 --> 00:03:25.385
let do some method that will be access.

00:03:25.385 --> 00:03:32.855
Method that I'll be bridge method will be created called as access to the code, right?

00:03:32.855 --> 00:03:35.720
So through that particular method,

00:03:35.720 --> 00:03:38.945
those two classes, it be communicated to each other.

00:03:38.945 --> 00:03:41.130
It's random a breach.

00:03:42.640 --> 00:03:47.270
So the reason behind the both of them compilers separate files and they

00:03:47.270 --> 00:03:51.245
need the package private access to communicate to each other, right?

00:03:51.245 --> 00:03:53.120
Private members who are on the private members,

00:03:53.120 --> 00:03:55.835
the instance and the static methods, right?

00:03:55.835 --> 00:04:00.995
So how it really looks like in the documentation perspective And when you're,

00:04:00.995 --> 00:04:05.015
when you're trying to do Java API rate, it will show you.

00:04:05.015 --> 00:04:10.715
It will, it will dismantle your class and it will show you what are the details inside.

00:04:10.715 --> 00:04:12.305
Okay, So how to do that?

00:04:12.305 --> 00:04:15.935
So for another example, as an end-user,

00:04:15.935 --> 00:04:20.420
I should know there are to consider as the same class,

00:04:20.420 --> 00:04:21.485
okay, I don't care about,

00:04:21.485 --> 00:04:23.330
I'm end-user and you are a developer.

00:04:23.330 --> 00:04:25.115
So if all I need as a class felt,

00:04:25.115 --> 00:04:27.470
I don't care what kind of logic you're provided.

00:04:27.470 --> 00:04:29.600
Your class might conduct multiple in classes,

00:04:29.600 --> 00:04:30.935
but it doesn't matter for me.

00:04:30.935 --> 00:04:33.455
So for me it's just a single class.

00:04:33.455 --> 00:04:37.370
So I'll, I need an access to different,

00:04:37.370 --> 00:04:42.899
different methods, but how it is communicating through the bridge methods.

00:04:43.570 --> 00:04:47.255
So the way how we can do that, you can use Java.

00:04:47.255 --> 00:04:51.560
It's actually Java P and K. So Java class,

00:04:51.560 --> 00:04:53.150
so when you're providing this command,

00:04:53.150 --> 00:04:54.860
it will dismantle lever class.

00:04:54.860 --> 00:04:57.320
It will, it will show you the members.

00:04:57.320 --> 00:04:59.915
Okay, So what are the deepest part of our classes?

00:04:59.915 --> 00:05:03.170
Have you seen some tickled static index as 000?

00:05:03.170 --> 00:05:06.500
So that is a bridge method is created which will

00:05:06.500 --> 00:05:09.980
help us to communicate to the test and the nested class.

00:05:09.980 --> 00:05:11.585
Okay, in the next video,

00:05:11.585 --> 00:05:13.190
I'm going to create it the same example.

00:05:13.190 --> 00:05:14.375
I'm going to show you this.

00:05:14.375 --> 00:05:16.080
Thank you.
