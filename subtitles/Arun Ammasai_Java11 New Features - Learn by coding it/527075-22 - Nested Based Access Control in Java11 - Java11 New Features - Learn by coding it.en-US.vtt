WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.785
Hello everyone, Welcome back.

00:00:01.785 --> 00:00:03.795
So in the last video we discuss about the,

00:00:03.795 --> 00:00:05.250
the bridge month or so.

00:00:05.250 --> 00:00:09.435
And I showed you that test dot class.

00:00:09.435 --> 00:00:13.830
And how would it looks like when we dismantle the class and what is the bridge matter?

00:00:13.830 --> 00:00:16.380
So we tried this before, right?

00:00:16.380 --> 00:00:19.740
I mean, compiling the class as against Java 10,

00:00:19.740 --> 00:00:23.925
and we opened the tester class fill and we export it, right?

00:00:23.925 --> 00:00:26.400
So the similar way, we have one more class, right?

00:00:26.400 --> 00:00:30.030
Like tested dot nested class, that class.

00:00:30.030 --> 00:00:33.015
So let's see what this looks like.

00:00:33.015 --> 00:00:37.050
See here you have the Met,

00:00:37.050 --> 00:00:42.395
that's static method and here axis 0, 0, 0.

00:00:42.395 --> 00:00:50.480
So this is the method is going to be a bridge between those two classes, right?

00:00:50.480 --> 00:00:54.890
So let me show you what is the difference between a 10 and 11.

00:00:54.890 --> 00:00:58.400
So now I'm going to tell you how good it looks like in general 11.

00:00:58.400 --> 00:01:01.290
So let's go back to the PPD.

00:01:02.470 --> 00:01:06.740
Let's say how does look like in Java 11, okay,

00:01:06.740 --> 00:01:10.730
So to access the private members within or the nested class

00:01:10.730 --> 00:01:14.960
via NUS members are the Nester host and the nest to our service members,

00:01:14.960 --> 00:01:17.495
our inner classes next to us is a base class.

00:01:17.495 --> 00:01:22.654
I mean to say, the class contains all the newest members.

00:01:22.654 --> 00:01:25.415
And Nussbaum, what are,

00:01:25.415 --> 00:01:26.960
what is nist, remember?

00:01:26.960 --> 00:01:31.080
Right, that corresponds to the nested classes.

00:01:31.840 --> 00:01:35.780
And the host.

00:01:35.780 --> 00:01:38.795
Who's the host, The corresponding to the enclosing outer class.

00:01:38.795 --> 00:01:42.890
They are called essa ness, ness teammates.

00:01:42.890 --> 00:01:45.245
We're going to talk about detail,

00:01:45.245 --> 00:01:48.395
detailed manner which each and every part of it.

00:01:48.395 --> 00:01:52.385
So, so now the inner and outer class are linked by their nest maize,

00:01:52.385 --> 00:01:55.310
but not the syntactical package private bridge that.

00:01:55.310 --> 00:01:57.275
So what I'm trying to say here.

00:01:57.275 --> 00:01:59.345
So since Java 11,

00:01:59.345 --> 00:02:01.700
we don't need the bridge metadata,

00:02:01.700 --> 00:02:04.340
which means that bridge method called as a synthetic method.

00:02:04.340 --> 00:02:06.830
Okay, that is not necessary anymore.

00:02:06.830 --> 00:02:10.804
So we have a method called nice domains.

00:02:10.804 --> 00:02:11.855
So what isn't it?

00:02:11.855 --> 00:02:14.270
What do you call as a lower-class friends?

00:02:14.270 --> 00:02:15.800
You can call them as the classmates, right?

00:02:15.800 --> 00:02:18.155
Or even team people will call them teammates.

00:02:18.155 --> 00:02:21.290
The similar way I haven't nist and nist contents some other different classes.

00:02:21.290 --> 00:02:23.794
Those, those are all called as an estimates.

00:02:23.794 --> 00:02:28.775
So here is this screen which I'm showing here,

00:02:28.775 --> 00:02:33.260
which will show you when you compile the code using Java 11,

00:02:33.260 --> 00:02:35.765
you wouldn't be able to see the static method.

00:02:35.765 --> 00:02:40.355
You can see something called nist members test dollar nested class.

00:02:40.355 --> 00:02:42.185
Just take a look at this particular place.

00:02:42.185 --> 00:02:42.815
Okay?

00:02:42.815 --> 00:02:47.135
So the similar way if you try to access the next class,

00:02:47.135 --> 00:02:49.790
I mean the test dollar on a static class,

00:02:49.790 --> 00:02:52.565
it will show you the nest to host.

00:02:52.565 --> 00:02:58.730
Can you see that? So I'm going to show you the same thing in the example as well.

00:02:58.730 --> 00:03:00.485
Okay, so let's talk about what is nist,

00:03:00.485 --> 00:03:03.710
nist horse in the next video.

00:03:03.710 --> 00:03:06.810
But before I'm want to show you the example.

00:03:08.680 --> 00:03:14.060
So we compile the same code using Java 11 or I mean ten, right?

00:03:14.060 --> 00:03:18.425
So now let me see what the default was in Java, iPhone, iPhone version.

00:03:18.425 --> 00:03:20.270
So it is 11 O,

00:03:20.270 --> 00:03:26.975
so I can directly use the Java C and I'm going to call test.html, sorry, test.js.

00:03:26.975 --> 00:03:32.000
So what happened now, I compile the same test dot Java file using Java 11 compiler.

00:03:32.000 --> 00:03:34.115
Okay, let me see what is available inside.

00:03:34.115 --> 00:03:35.795
Again, I have a two class,

00:03:35.795 --> 00:03:39.125
test dot class and test nested class dot class.

00:03:39.125 --> 00:03:44.690
Now let's explore each and every class will see what is the new things comes into play.

00:03:44.690 --> 00:03:46.535
Which means instead of the bridge,

00:03:46.535 --> 00:03:48.995
and we have the nested host niche members, right?

00:03:48.995 --> 00:03:49.985
You'll see that.

00:03:49.985 --> 00:03:54.500
So Java, iPhone V,

00:03:54.500 --> 00:03:57.530
and I'm going to call test Don't class.

00:03:57.530 --> 00:04:00.890
So here you won't be able to see the static method

00:04:00.890 --> 00:04:04.190
which that dollar 000 able to find it here.

00:04:04.190 --> 00:04:07.400
The reason that it has been replaced by the nist members.

00:04:07.400 --> 00:04:10.700
See here something called nist members,

00:04:10.700 --> 00:04:14.050
okay, So that test dollar national class.

00:04:14.050 --> 00:04:15.890
So for this particular class,

00:04:15.890 --> 00:04:19.160
and this class is a nested member or it's an inner class.

00:04:19.160 --> 00:04:22.340
So through this nest member they can tell them,

00:04:22.340 --> 00:04:25.880
okay, so I have access to that particular nest.

00:04:25.880 --> 00:04:31.220
So what will happen if I tried to do the same default then nist class itself like

00:04:31.220 --> 00:04:38.645
Java PIF and we test, sorry, test dollar.

00:04:38.645 --> 00:04:41.640
So nested class dot class.

00:04:41.830 --> 00:04:44.780
So when you're trying to use a nice class,

00:04:44.780 --> 00:04:46.535
it shows the nist numbers.

00:04:46.535 --> 00:04:51.065
And when you're doing the same thing for the other,

00:04:51.065 --> 00:04:55.640
it will give you the nest Ho if supposed to give you the nest house.

00:04:55.640 --> 00:04:57.590
Let's see, where is the Nest also here?

00:04:57.590 --> 00:05:02.270
So when you're trying to dismantle the both classes,

00:05:02.270 --> 00:05:04.850
you should be able to see the taste,

00:05:04.850 --> 00:05:06.815
I mean the nist members here.

00:05:06.815 --> 00:05:11.300
Okay, So you, you will be able to find this thing in the both classes,

00:05:11.300 --> 00:05:13.490
which means that is a common entity which

00:05:13.490 --> 00:05:15.950
is acts like a bridge instead of the bridge method,

00:05:15.950 --> 00:05:19.685
it is going to be nice members from Java 11.

00:05:19.685 --> 00:05:21.005
So in the next video,

00:05:21.005 --> 00:05:23.540
I'm gonna show you create a multiple class that animal to you.

00:05:23.540 --> 00:05:25.730
What is the next host and what is

00:05:25.730 --> 00:05:30.090
a nist members will discuss in detail in the next video.
