WEBVTT
ï»¿1
00:00:05.250 --> 00:00:06.460
Welcome back everyone.

2
00:00:06.480 --> 00:00:11.580
In this lecture we're going to begin working for a Q and A bot with Python 4 Part 1.

3
00:00:11.580 --> 00:00:15.930
We're going to load the data explore the data format and create a vocabulary.

4
00:00:15.960 --> 00:00:17.070
Let's get started.

5
00:00:17.070 --> 00:00:19.170
I'm going to open up a new notebook.

6
00:00:19.170 --> 00:00:19.480
All right.

7
00:00:19.530 --> 00:00:26.850
My new notebook I'm going to begin by importing pickle because we have a specialized file format for

8
00:00:26.850 --> 00:00:31.500
the data which is going to be a pickle file essentially a compressed way of saving our data.

9
00:00:31.710 --> 00:00:33.900
And then later on we may be using some pie.

10
00:00:33.900 --> 00:00:35.320
So go ahead and at the top.

11
00:00:35.340 --> 00:00:41.250
Important umpires NDP and we have a training set and a test set for the training set.

12
00:00:41.250 --> 00:00:43.920
We've already saved that under the deep learning folder for you.

13
00:00:43.920 --> 00:00:49.130
You just need to say with open and then go ahead and say train underscore.

14
00:00:49.130 --> 00:00:50.490
Cue a thought text.

15
00:00:50.520 --> 00:00:53.930
Again that should already be located for you under the deep learning folder.

16
00:00:54.180 --> 00:01:01.440
And then we want to not just read it but read it as a binary file and then as f or really any variable

17
00:01:01.440 --> 00:01:07.830
you want and then we'll say our training data is equal to and we're going to use that pixel functionality

18
00:01:07.830 --> 00:01:10.000
to load in that file.

19
00:01:10.020 --> 00:01:14.150
That's why we needed to read it as not just ah but read binary.

20
00:01:14.340 --> 00:01:18.840
So we're gonna do that for the training data and then just go ahead and copy and paste this and do the

21
00:01:18.840 --> 00:01:21.180
same for our test data.

22
00:01:21.180 --> 00:01:27.930
So say test and then we'll label this variable test data so run those two cells.

23
00:01:27.930 --> 00:01:34.200
And now if you actually check out the type of this data for example the type of the test data you'll

24
00:01:34.200 --> 00:01:37.890
notice that it's a list and it's gonna be the same thing for the training data.

25
00:01:37.920 --> 00:01:42.030
Essentially the training data and testing data are the same we already did the train test split for

26
00:01:42.030 --> 00:01:42.800
you.

27
00:01:42.840 --> 00:01:46.780
So let's go ahead and check out the length of the data.

28
00:01:47.020 --> 00:01:55.390
We have ten thousand points for training data and then we have 1000 points for test data.

29
00:01:55.390 --> 00:02:00.850
So have more or less kind of a 10 to 1 ratio for testing data versus training data.

30
00:02:01.090 --> 00:02:08.540
And if we take a look at the training data you'll notice it's essentially a list of tuples.

31
00:02:08.540 --> 00:02:10.450
So let's go ahead and grab one of these tuples.

32
00:02:10.490 --> 00:02:14.060
We'll just grab the very first one off that training data.

33
00:02:14.060 --> 00:02:16.070
And here we can see the three main components.

34
00:02:16.130 --> 00:02:21.980
We can see the story the question and then the answer or the solution.

35
00:02:21.980 --> 00:02:24.070
So the story here is Mary moves to the bathroom.

36
00:02:24.120 --> 00:02:25.770
Sandra journey to the bedroom.

37
00:02:25.880 --> 00:02:28.280
The question was Is Sandra in the hallway.

38
00:02:28.280 --> 00:02:33.870
And the correct answer is no so if you want to actually form at this she can read these a little nicer

39
00:02:33.880 --> 00:02:36.150
we can use some joint functionality.

40
00:02:36.280 --> 00:02:44.090
So for example I can say trained data remember this is kind of a tuple with a list as well to listen

41
00:02:44.090 --> 00:02:45.850
side of it plus a string.

42
00:02:45.850 --> 00:02:48.210
So I can index off of this.

43
00:02:48.280 --> 00:02:49.910
So here we have the story itself.

44
00:02:49.960 --> 00:02:52.180
So let's go ahead and join that

45
00:02:55.130 --> 00:02:59.170
and essentially takes every item in the list and then joins it with a space in between.

46
00:02:59.170 --> 00:03:00.920
So it actually prints out the story.

47
00:03:00.970 --> 00:03:05.410
So here we see Mary move to the bathroom stand the journey to the bedroom and we can do the same thing

48
00:03:05.770 --> 00:03:09.020
for the question itself just to make it a little easier to read.

49
00:03:09.070 --> 00:03:14.920
QUESTION Was the sander in the hallway and then finally the correct answer for that first one is no.

50
00:03:16.120 --> 00:03:22.860
So last item is no so what we want to do to begin with is set up a vocabulary of all the words inside

51
00:03:22.850 --> 00:03:27.790
our data set and to do this we need to make sure that we take not just the training data but also the

52
00:03:27.790 --> 00:03:29.160
test data into account.

53
00:03:29.290 --> 00:03:33.940
That way we make sure that when we're actually testing our algorithm we don't get confused by maybe

54
00:03:33.940 --> 00:03:37.380
new names that didn't show up in the train data show up in the test data.

55
00:03:37.420 --> 00:03:43.310
So let's create a vocabulary and to do this I'm going to create a new variable called all data and I

56
00:03:43.320 --> 00:03:50.630
was going to set this equal to my test data concatenated with my train data.

57
00:03:50.630 --> 00:03:52.920
Remember test data and train data themselves.

58
00:03:52.940 --> 00:03:57.590
They're just huge lists of tuples where each tuple is three of these.

59
00:03:57.650 --> 00:04:01.870
So what I want to do is just get a giant list with a bunch tuples in it.

60
00:04:01.880 --> 00:04:07.470
So now if I check out my length of all my data it's now eleven thousand.

61
00:04:07.700 --> 00:04:14.660
So what I want to do is essentially use a set in Python to add words to my set.

62
00:04:14.870 --> 00:04:19.000
And that way I can get a sense of all the unique words.

63
00:04:19.040 --> 00:04:23.690
Remember a set in Python is an unordered collection of unique elements.

64
00:04:24.320 --> 00:04:33.070
So essentially what I'm going to do here is I will say for the story the question and the answer in

65
00:04:33.550 --> 00:04:40.240
all data because remember each item here is essentially organized as a tuple of three items.

66
00:04:40.240 --> 00:04:43.510
The question the story and then the answer.

67
00:04:43.510 --> 00:04:50.000
So for the story the question and the answer and all my data I'm going to say the following I'll say

68
00:04:50.060 --> 00:05:03.220
vocab is equal to vocab that union and then I'm going to convert that story into a set.

69
00:05:03.220 --> 00:05:05.680
So let's first see this on an example story.

70
00:05:05.680 --> 00:05:07.660
So remember we have a story right here.

71
00:05:07.660 --> 00:05:11.500
So train data 0 0.

72
00:05:11.630 --> 00:05:13.040
This would be the story.

73
00:05:13.040 --> 00:05:18.630
So if I were to call set on this it would return back.

74
00:05:18.710 --> 00:05:27.920
This set right here so what I'm going to be doing is right before this for loop I'll say vocab is equal

75
00:05:27.920 --> 00:05:34.860
to an empty set and then I'm going to create a set of the story and then set vocab equal to vocab.

76
00:05:34.880 --> 00:05:40.880
The union of the set of the story and in case you're not too familiar with what a union and sets is

77
00:05:41.120 --> 00:05:46.440
there is a link in the notebook that explains it but it's essentially it's going to find all the distinct

78
00:05:46.500 --> 00:05:51.600
elements between the two sets between our current vocabulary and this new story coming in.

79
00:05:51.780 --> 00:05:53.190
So you can check out the link in the notebook.

80
00:05:53.190 --> 00:05:54.230
It looks something like this.

81
00:05:54.570 --> 00:05:55.650
Essentially the union.

82
00:05:55.710 --> 00:05:58.470
So here's the union between three sets A B and C..

83
00:05:58.710 --> 00:06:03.960
It's just going to be where they have all distinct elements in present in all the sets.

84
00:06:04.140 --> 00:06:09.930
Essentially just the simple way of continually adding any unique words and keeping to account the previous

85
00:06:09.930 --> 00:06:11.210
words we had.

86
00:06:11.210 --> 00:06:12.750
So we can say vocab is equal to vocab.

87
00:06:12.750 --> 00:06:21.510
That union that set story and then we'll do the same thing with the same vocab and we'll union with

88
00:06:21.510 --> 00:06:22.760
the set of the question.

89
00:06:24.380 --> 00:06:33.000
Then we're going to add in the two possible answers which are yes or no so say vocab at a no and vocab

90
00:06:34.410 --> 00:06:35.400
and yes.

91
00:06:35.430 --> 00:06:40.720
And now if I check out my vocab here I have a set of all the possible vocab words.

92
00:06:40.800 --> 00:06:45.150
And later on we're gonna be lower casing all of these so proper names will be lowercase.

93
00:06:45.150 --> 00:06:48.290
But in general you can see that there actually aren't that many words.

94
00:06:48.420 --> 00:06:53.280
So later on when we're constructing our own stories and on questions we're going to be limited in what

95
00:06:53.280 --> 00:06:54.900
names and what words we can use.

96
00:06:54.900 --> 00:06:56.570
So keep that in mind.

97
00:06:56.640 --> 00:07:03.060
Now one more thing we have to do for the vocab is need to add one to it for capturing the length because

98
00:07:03.060 --> 00:07:08.080
later on we're going to use carris pad sequences and zero is a placeholder for that.

99
00:07:08.130 --> 00:07:14.910
So I'm going to create one more variable here called the vocab length and set that equal to the length

100
00:07:15.000 --> 00:07:20.430
of this vocab set and then I'm going to add one to it because later on when we use Kerry's pad sequences

101
00:07:20.760 --> 00:07:28.960
we have a little placeholder so we have right now our entire vocabulary and we also know the length

102
00:07:28.960 --> 00:07:30.010
of the vocab plus one.

103
00:07:30.100 --> 00:07:35.900
So essentially thirty seven unique words plus that one place holder that we're going to use later on.

104
00:07:35.900 --> 00:07:43.930
So now what I need to do is figure out how long is the longest story and how long is the longest question.

105
00:07:44.050 --> 00:07:48.140
So the way we can do that is actually not so bad.

106
00:07:48.140 --> 00:07:53.000
What I can say is check the length of data zero.

107
00:07:53.120 --> 00:08:04.980
So this is gonna be calculating the longest story so say check the length the data 0 4 data in all data.

108
00:08:05.060 --> 00:08:08.150
Recall that all data as you go through it.

109
00:08:08.240 --> 00:08:10.520
So for example the very first item here.

110
00:08:10.700 --> 00:08:11.630
Again it's a tuple.

111
00:08:11.630 --> 00:08:13.290
So I'm saying data 0.

112
00:08:13.310 --> 00:08:16.840
So that would be adding in another zero off of this.

113
00:08:16.850 --> 00:08:18.790
So that's going to grab the story right here.

114
00:08:18.800 --> 00:08:22.490
So data 0 4 data and all data.

115
00:08:22.490 --> 00:08:24.170
So for every tuple.

116
00:08:24.170 --> 00:08:29.690
Go ahead and grab that story and then check the length of it and what I'm going to do is simply useless

117
00:08:29.690 --> 00:08:36.890
comprehension to make a list of this and this will then be the links of all the stories so all story

118
00:08:38.450 --> 00:08:44.600
lengths to be equal to that so if I check that out there's a length of all my stories.

119
00:08:44.610 --> 00:08:48.540
Essentially how many words or piece of punctuation that include and what I really want to know is the

120
00:08:48.540 --> 00:08:50.850
maximum length of the story.

121
00:08:51.280 --> 00:08:56.100
And we're gonna need that later on for again padding our sequences so the longer story is a hundred

122
00:08:56.100 --> 00:08:56.790
fifty six.

123
00:08:56.790 --> 00:09:06.190
So let's go ahead and make a variable called Max underscore story underscore Elin is equal to 1 56 and

124
00:09:06.190 --> 00:09:10.180
then we're going to follow the exact same logic for calculating the maximum question length.

125
00:09:10.840 --> 00:09:17.650
So simply say Max question length is equal to the max and then we're going to do our list comprehension

126
00:09:17.650 --> 00:09:23.830
here check the length of data but in this case we'll index that one since that's the index for the story

127
00:09:24.300 --> 00:09:26.890
and they'll say for data and all data.

128
00:09:26.890 --> 00:09:30.390
Be careful with the amount of parentheses and square braces we're using here.

129
00:09:30.430 --> 00:09:31.840
You ever get a typo error.

130
00:09:31.840 --> 00:09:34.790
Go ahead and run a provided notebook directly.

131
00:09:35.140 --> 00:09:40.810
So if we check out our max question length you should get back that six words is the max question.

132
00:09:40.810 --> 00:09:41.350
OK.

133
00:09:41.560 --> 00:09:43.480
So just a quick review of what we did here.

134
00:09:43.660 --> 00:09:45.110
We explored the data a little bit.

135
00:09:45.190 --> 00:09:47.250
Open it up using pixel functionality.

136
00:09:47.350 --> 00:09:53.890
Saw that it was a list where every item in the list is a tuple with three parts the story the question

137
00:09:54.310 --> 00:09:56.740
and then the correct answer a yes or no.

138
00:09:56.740 --> 00:10:01.140
And then we built out a vocabulary using a set and then checking the unions.

139
00:10:01.150 --> 00:10:06.100
We just kept adding more words to the set until we had all the unique words presented throughout the

140
00:10:06.100 --> 00:10:07.640
questions and the stories.

141
00:10:07.810 --> 00:10:13.530
And then we added no one yes because we know those are the only two possible answers and then we were

142
00:10:13.530 --> 00:10:16.910
able to calculate the longest story as well as the longest question.

143
00:10:16.950 --> 00:10:21.690
And we're going to be using that for Kerry's pad sequences once we vector the data which is coming up

144
00:10:21.690 --> 00:10:27.260
next to the next lecture will explore using Kerry's pre processing for padding sequences and the token

145
00:10:27.260 --> 00:10:28.120
Nisar.

146
00:10:28.380 --> 00:10:28.980
I'll see you there.

