1
00:00:05,370 --> 00:00:09,440
Welcome everyone to this lecture on regular expressions.

2
00:00:09,590 --> 00:00:14,240
Let's imagine that you needed to search a string for a term such as the string phone.

3
00:00:14,600 --> 00:00:17,860
Well you can easily use the in operator keyword to do this.

4
00:00:17,900 --> 00:00:24,530
You could just say is the string phone in this larger string such as is the phone here and it will return

5
00:00:24,530 --> 00:00:24,800
back.

6
00:00:24,800 --> 00:00:27,160
True with Python.

7
00:00:27,180 --> 00:00:33,540
Now imagine you had to find a telephone number such as 4 0 8 dash 555 Dash 1 2 3 4.

8
00:00:33,550 --> 00:00:39,000
Again you could use the same sort of information you would say the string you were looking for in and

9
00:00:39,000 --> 00:00:42,580
then the larger string you wanted to search and that would return back true as well.

10
00:00:43,580 --> 00:00:44,710
But here's the problem.

11
00:00:44,960 --> 00:00:48,830
What if you actually don't know the exact phone number you're looking for you just know the general

12
00:00:48,830 --> 00:00:55,340
format of a phone number or if you want to find every phone number in a specific document or every e-mail

13
00:00:55,340 --> 00:01:01,000
address and a specific document you know that certain types of objects always hold the same format like

14
00:01:01,010 --> 00:01:05,780
dates e-mail addresses addresses or phone numbers.

15
00:01:05,780 --> 00:01:10,880
What we need is a regular expression in order to actually search for the pattern of what we're looking

16
00:01:10,880 --> 00:01:19,460
for instead of any specific sequence regular expressions allow for pattern searching in a text document.

17
00:01:19,460 --> 00:01:23,880
Now the syntax for regular expressions can be really intimidating at first.

18
00:01:23,900 --> 00:01:28,510
So here is the actual code for the regular expression of searching for a phone number.

19
00:01:28,640 --> 00:01:32,940
And if you take a look at that it's kind of unreadable if you don't know regular expressions.

20
00:01:32,960 --> 00:01:37,490
Hopefully after this lecture you'll be able to build an understanding of what that actually means.

21
00:01:38,120 --> 00:01:43,480
So the key thing to keep in mind is that every character type has a corresponding pattern code.

22
00:01:43,640 --> 00:01:49,230
For example digits have the placeholder pattern code of backslash D.

23
00:01:49,550 --> 00:01:55,510
The use of backslash allows Python to understand that this is a special code and not the letter D.

24
00:01:55,520 --> 00:01:59,990
You can then combine this with other special character codes in order to find any sort of pattern you

25
00:01:59,990 --> 00:02:01,280
can think of.

26
00:02:01,280 --> 00:02:08,060
So if we take a look back at this example also is actually saying is fine three digits then a dash then

27
00:02:08,060 --> 00:02:11,900
another set of three digits then another dash and so forth.

28
00:02:12,080 --> 00:02:14,600
Which is the format of a phone number.

29
00:02:14,600 --> 00:02:15,050
OK.

30
00:02:15,290 --> 00:02:19,910
So let's learn how to create our own regular expressions for finding patterns and text by hopping over

31
00:02:19,910 --> 00:02:21,060
to Jupiter notebook.

32
00:02:21,290 --> 00:02:27,060
Let's begin by understanding how to use the actual regular expression library that's built into Python.

33
00:02:27,140 --> 00:02:38,040
First I'm going to make some text so we can search such as the phone number of the agent is 4 0 8 5

34
00:02:38,130 --> 00:02:44,770
5 5 5 1 2 3 4 and I'll say call soon.

35
00:02:45,020 --> 00:02:49,150
And then there's a period immediately after that phone number.

36
00:02:49,340 --> 00:02:55,990
So what it could do is say hey is phone in text and that returns true.

37
00:02:56,060 --> 00:03:00,440
I can check the strings inside of another string and if I happen to know the actual phone number I'm

38
00:03:00,440 --> 00:03:03,680
looking for I could as he previously mentioned just run.

39
00:03:03,680 --> 00:03:05,310
Is this number in here.

40
00:03:05,390 --> 00:03:09,020
What I still don't know how to do for regular expressions is search for.

41
00:03:09,050 --> 00:03:13,420
Is there any phone number with this particular format inside of this text.

42
00:03:13,790 --> 00:03:18,200
So let me show you the format for actually running a regular expression and then we'll go over some

43
00:03:18,240 --> 00:03:20,270
Codder common pattern designs.

44
00:03:22,160 --> 00:03:23,960
So we're going to say import our e.

45
00:03:24,390 --> 00:03:26,780
And that's the regular expression library that's built in the python.

46
00:03:26,780 --> 00:03:28,870
No need to download anything for that one.

47
00:03:29,480 --> 00:03:36,880
And then the pattern we're going to be looking for we'll just say it's the string phone and then we

48
00:03:36,880 --> 00:03:44,720
use the expression library as you say our search and then you pass and your pattern and the text you

49
00:03:44,720 --> 00:03:49,610
want to search and then you get back this match object.

50
00:03:49,760 --> 00:03:53,570
And there's lots of different methods and attributes that the match object has.

51
00:03:53,570 --> 00:04:03,390
So for example if I call my match and set that equal to a regular expression search of a particular

52
00:04:03,390 --> 00:04:14,330
pattern in my text I can then ask for information off match such as the spin and it goes from 4 tonight.

53
00:04:14,550 --> 00:04:18,450
So what that actually means is starting an index for of this string.

54
00:04:18,450 --> 00:04:24,330
So 0 1 2 3 4 we can say that's the key for this pattern.

55
00:04:24,330 --> 00:04:25,120
That's the phone.

56
00:04:25,200 --> 00:04:27,330
And then it goes up to index 9.

57
00:04:27,390 --> 00:04:30,470
So we can see here it actually located the span of that actual pattern.

58
00:04:30,870 --> 00:04:33,090
And then we can ask for particular things.

59
00:04:33,090 --> 00:04:39,120
And if you hit that tab you'll see quite a lot of attributes but so the more common ones are asking

60
00:04:39,120 --> 00:04:44,240
for the start of the match or the end of the match.

61
00:04:44,240 --> 00:04:48,740
Now you'll notice is if the pattern occurs more than one time.

62
00:04:48,740 --> 00:04:52,720
So if we say My phone is a new phone.

63
00:04:53,150 --> 00:04:54,490
So I read the fine text there.

64
00:04:54,500 --> 00:05:05,560
Let's go ahead and make another match and say our research for the pattern phone inside of this text

65
00:05:07,360 --> 00:05:09,280
if you ask for Spanne.

66
00:05:09,490 --> 00:05:14,440
Unfortunately if you just say our esearch it's only going to find the first instance which happens starting

67
00:05:14,440 --> 00:05:15,440
at index three.

68
00:05:15,520 --> 00:05:17,540
It's not going to tell you that there's two of them.

69
00:05:17,740 --> 00:05:23,310
Instead if you want to find all the matches instead of just the first instance the correct code is r

70
00:05:23,320 --> 00:05:25,120
e find.

71
00:05:25,460 --> 00:05:26,390
Aw.

72
00:05:26,920 --> 00:05:29,890
And again it can pass and order pattern are looking for.

73
00:05:29,890 --> 00:05:33,280
So again the pattern here is just the string phone.

74
00:05:33,280 --> 00:05:39,640
And then we search the updated text and we can say all matches is equal to this.

75
00:05:39,910 --> 00:05:45,040
And if you check out all matches it's going to return back the strings.

76
00:05:45,040 --> 00:05:50,530
But what you could do is check the length of this list and I'll tell you it has two matches.

77
00:05:51,540 --> 00:05:57,570
Now if you actually want to find match objects and set it has a list of the matches which is a very

78
00:05:57,570 --> 00:06:02,640
useful I can say is r e find

79
00:06:06,300 --> 00:06:10,760
and then say whatever pattern you're looking for in our case it's fun.

80
00:06:10,910 --> 00:06:13,960
Whatever you want to search and then you can actually iterate for that.

81
00:06:14,180 --> 00:06:22,810
So you could say for match an R E find her go ahead and prints the span of that particular match.

82
00:06:23,030 --> 00:06:27,830
So this is essentially returning an iteration of all those match objects which were the specialized

83
00:06:27,860 --> 00:06:34,250
objects that we saw appear which had various attributes such as spanne start and end so commonly you're

84
00:06:34,250 --> 00:06:40,030
going to see us use our find all if we expect it to be more than one match in the actual documents.

85
00:06:40,040 --> 00:06:45,050
But our esearch is going to return back the very first match which is good in case you want to know

86
00:06:45,170 --> 00:06:46,730
if it actually exists.

87
00:06:46,760 --> 00:06:49,950
In that case you only care about one instance.

88
00:06:49,960 --> 00:06:51,870
Now let's go over some patterns.

89
00:06:51,910 --> 00:06:56,710
We learned how to search for a basic string but we actually want to search for generalized patterns

90
00:06:56,980 --> 00:07:02,080
not just specific strains because we may not know what specific string or sequence of letters we're

91
00:07:02,080 --> 00:07:03,100
looking for.

92
00:07:03,100 --> 00:07:08,260
Instead we just know a general pattern such as the general pattern of an e-mail address or a phone number.

93
00:07:08,470 --> 00:07:14,290
And before we continue I'd highly recommend the check out underneath the python text basics folder.

94
00:07:14,330 --> 00:07:19,390
If you open up the regular expressions notebook there's tables in here that go over a lot of what we're

95
00:07:19,390 --> 00:07:24,250
discussing because usually people don't memorize the patterns unless these regular expressions all the

96
00:07:24,250 --> 00:07:25,010
time.

97
00:07:25,060 --> 00:07:31,900
If you scroll down we've provided easy to use tables that reference the specialized character the description

98
00:07:32,360 --> 00:07:36,060
and example pattern code and an example match.

99
00:07:36,130 --> 00:07:41,770
And if you keep going down you'll see more for quantifiers which is essentially different amounts and

100
00:07:41,770 --> 00:07:45,370
then another one for groups as well as a couple of examples here.

101
00:07:45,550 --> 00:07:45,900
OK.

102
00:07:47,070 --> 00:07:52,270
So the first we're going to talk about and whole hold the little bit on this part of the notebook is

103
00:07:52,330 --> 00:07:53,470
underneath patterns.

104
00:07:53,560 --> 00:07:56,830
We're now going to look for identifiers for characters and patterns.

105
00:07:56,830 --> 00:08:01,630
So there's various characters and notice that there's a backslash on all of these basically telling

106
00:08:01,630 --> 00:08:04,140
Python Hey I don't mean the actual letter D.

107
00:08:04,150 --> 00:08:09,120
I mean this specialized character D which D is for a digit.

108
00:08:09,700 --> 00:08:14,750
And so you can see here an example pattern code could be f i l e underscore.

109
00:08:14,830 --> 00:08:20,020
So I'm looking for file underscore and then I just say backslash D-Backs lushly which essentially means

110
00:08:20,380 --> 00:08:21,490
any two digits.

111
00:08:21,490 --> 00:08:29,590
So an example match here could be file underscore 25 or file underscore 43 or so on basically any string

112
00:08:29,590 --> 00:08:32,440
that starts a file underscore and then two numbers.

113
00:08:32,440 --> 00:08:35,140
Hopefully you can see this already extremely useful.

114
00:08:35,140 --> 00:08:39,900
We also have alphanumerics which is any alphabet letter or any numeric.

115
00:08:39,910 --> 00:08:45,360
So in case you're looking for any series of letters and numbers you can use an alphanumeric.

116
00:08:45,400 --> 00:08:48,420
There's also whitespace there's a non digit.

117
00:08:48,490 --> 00:08:52,690
So Cap capital D stands for a nod that is essentially a letter.

118
00:08:52,690 --> 00:08:58,090
There's also non-alphanumeric which is kind of just punctuation and then there's also not whitespace

119
00:08:58,360 --> 00:09:00,010
anything that's not whitespace.

120
00:09:00,010 --> 00:09:04,120
So these are general characters and possible identifiers that you're going to be using.

121
00:09:04,120 --> 00:09:09,800
So let's go over a few examples of actually running these in order to search for a generalized pattern.

122
00:09:11,010 --> 00:09:15,930
So if we come back a peer to another book so far we've only been searching for strings that we know

123
00:09:15,930 --> 00:09:17,800
such as searching for a pattern.

124
00:09:17,820 --> 00:09:25,560
But now let's go ahead and generalize this to search for something using these qualifiers so we right

125
00:09:25,560 --> 00:09:28,700
now if we say or text let's make sure we're using the right one.

126
00:09:28,800 --> 00:09:33,180
We have my telephone number is 7 7 7 dash 5 5 5 that's 1 2 3 4.

127
00:09:33,240 --> 00:09:37,080
So I know I'm looking for a phone number but I don't know what phone number of looking for.

128
00:09:37,080 --> 00:09:43,350
So I need to say I'm looking for three digits a dash in other set of three digits in other dash and

129
00:09:43,350 --> 00:09:45,120
then a set of four digits.

130
00:09:45,120 --> 00:09:52,000
So the way I can do that is by defining my pattern they set that equal to and in order for Python to

131
00:09:52,000 --> 00:09:55,450
understand that's a specific pattern regular expression string.

132
00:09:55,450 --> 00:10:03,240
You start off with our outside of these quotes and then you pass the pattern you're looking for.

133
00:10:03,280 --> 00:10:11,770
So have backslash the three times then a dash backslash Diegan and other three times then another dash

134
00:10:12,910 --> 00:10:16,020
and then backslash D again four times.

135
00:10:16,030 --> 00:10:22,030
So now we have a generalized pattern that looks for three digits or dash another set of three digits

136
00:10:22,180 --> 00:10:24,750
a dash and then four digits.

137
00:10:24,940 --> 00:10:38,040
So I can say now phone number is equal to our search and then search for the pattern inside of that

138
00:10:38,040 --> 00:10:47,550
text and what this does is it returns back my actual matching object and it tells me where in the actual

139
00:10:47,550 --> 00:10:50,850
document it found it as well as the actual match it found.

140
00:10:51,000 --> 00:10:58,130
And if you actually just want this information the actual match itself you can say group and it will

141
00:10:58,140 --> 00:11:00,870
group together everything that it found to be matching.

142
00:11:00,870 --> 00:11:03,360
So in this case it's this phone number here.

143
00:11:03,360 --> 00:11:09,210
Keep in mind if I were to change my text so I don't say text is equal to is going to copy and paste

144
00:11:09,210 --> 00:11:09,710
this.

145
00:11:09,900 --> 00:11:13,800
Let's go ahead and change this to be another set of numbers like a.

146
00:11:14,500 --> 00:11:17,160
This expression is just looking for a generalized pattern.

147
00:11:17,250 --> 00:11:19,500
So it's actually still able to find it.

148
00:11:19,770 --> 00:11:21,510
Again I'm just using our search.

149
00:11:21,570 --> 00:11:26,000
And if you wanted to find multiple phone numbers here you could say find all.

150
00:11:26,160 --> 00:11:30,870
And it would be able to return back all the matches if you want to iterate through those matches.

151
00:11:30,870 --> 00:11:33,340
You can use our thought find it.

152
00:11:33,690 --> 00:11:40,320
The main idea is that utilizing these sort of tables you can then create any sort of pattern you can

153
00:11:40,320 --> 00:11:45,360
think of digits alphanumerics whitespace non digits.

154
00:11:45,470 --> 00:11:49,750
Now because it's really common to see a bunch of alphanumerics in a row or a bunch of digits in a row

155
00:11:50,120 --> 00:11:53,430
it's kind of annoying to have to type backslash the a bunch of times.

156
00:11:53,600 --> 00:11:57,550
So the next set of patterns we're going to learn about are quantifiers.

157
00:11:57,800 --> 00:12:00,080
So we know special character designations.

158
00:12:00,200 --> 00:12:04,030
We can now use them lot of qualifiers to define how many we should expect.

159
00:12:04,040 --> 00:12:10,760
So here we have a character plus means occurs one or more times having these curly braces of a number

160
00:12:10,820 --> 00:12:13,340
means occurs exactly three times.

161
00:12:13,340 --> 00:12:16,810
So you put in your special character code and then curly braces.

162
00:12:16,850 --> 00:12:18,550
How many times you want it to occur.

163
00:12:18,740 --> 00:12:23,720
So this says any non digit capital-T that occurs exactly three times.

164
00:12:23,720 --> 00:12:28,370
So something like ABC and then we can say occurs two to four times.

165
00:12:28,370 --> 00:12:33,130
So you can give actual ranges by saying a number for the low range comma and the number for the higher

166
00:12:33,130 --> 00:12:39,890
range you can say a number comma and then no other number for something X or more times like three or

167
00:12:39,890 --> 00:12:40,740
more times.

168
00:12:41,590 --> 00:12:46,150
And Asterix is not too common to use because it says occurs 0 or more times.

169
00:12:46,160 --> 00:12:50,680
So essentially means it's occurring either 0 times or more than 0.

170
00:12:50,690 --> 00:12:53,760
So that's maybe a little too flexible for a lot of use cases.

171
00:12:53,970 --> 00:12:56,840
And then a question mark is once or more.

172
00:12:56,930 --> 00:13:02,320
OK so let's go ahead and convert that telephone number here using those quantifiers.

173
00:13:02,510 --> 00:13:08,530
So I'm looking for a group of three digits a dash three digits a dash and then four digits.

174
00:13:08,600 --> 00:13:14,060
So good use case for this one as far as quantifiers is probably this pattern here a set of curly braces.

175
00:13:14,060 --> 00:13:21,330
And I know I'm looking for three three and four so I'm going to redefine this to be the following.

176
00:13:22,380 --> 00:13:28,560
I can basically efficiently write this pattern saying R and you can use double quotes or single quotes

177
00:13:29,520 --> 00:13:32,630
then say backslash D and instead of writing it three times.

178
00:13:32,730 --> 00:13:39,180
I'm just going to use my quantifier which is curly braces three to say I'm looking for three digits

179
00:13:39,510 --> 00:13:46,730
a dash in other set of three digits in the dash and then a set of four digits.

180
00:13:47,310 --> 00:13:55,470
And if we take a look again for this I can say are esearch for the pattern in the text and it was able

181
00:13:55,470 --> 00:13:58,120
to find the updated match.

182
00:13:58,220 --> 00:14:02,090
So it's usually more efficient to write something like this than to write something like this.

183
00:14:02,150 --> 00:14:06,830
But if you were to jump straight into this refrig expressions you can see that regular expressions can

184
00:14:06,860 --> 00:14:09,060
easily become very difficult to read.

185
00:14:09,290 --> 00:14:11,550
But keep in mind you can always just break it down.

186
00:14:11,630 --> 00:14:16,400
The tables that we provide and you can always use that group in case you actually want to find the actual

187
00:14:16,400 --> 00:14:18,350
object or pattern that matched.

188
00:14:18,650 --> 00:14:26,060
So I can say again my match here and you have the specialized match objects with a bunch of different

189
00:14:26,060 --> 00:14:30,980
attributes and parameters here that you can explore a really useful one is just grouping it together

190
00:14:31,220 --> 00:14:33,050
to find the actual match.

191
00:14:33,050 --> 00:14:33,530
All right.

192
00:14:33,620 --> 00:14:37,520
So that's the basics of identifiers and quantifiers.

193
00:14:37,520 --> 00:14:41,650
Again I highly recommend you check out the tables that we provide for patterns.

194
00:14:41,690 --> 00:14:47,630
You can essentially build any pattern you want using identifiers looking for specific types of characters

195
00:14:47,630 --> 00:14:54,020
like digits alphanumerics or white space or their reverse opposites non digits not alphanumerics and

196
00:14:54,020 --> 00:14:55,360
nonwhite space.

197
00:14:55,370 --> 00:15:00,620
And you can combine those with quantifiers knowing exactly how many you want to expect or some sort

198
00:15:00,620 --> 00:15:02,060
of range that you expect.

199
00:15:02,150 --> 00:15:07,850
Coming up next we're to continue our discussion by talking about groups talking about additional syntax

200
00:15:07,850 --> 00:15:12,980
such as or operators wildcard characters and then starts with and ends with.

201
00:15:13,130 --> 00:15:17,120
We'll see at the next lecture where we talk about these other various regular expression topics.

