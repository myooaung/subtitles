1
00:00:03,800 --> 00:00:09,680
Welcome back to this lecture on vocabulary and matching with Spacey so far we've seen how a body of

2
00:00:09,690 --> 00:00:16,230
text is divided into tokens and how individual tokens are parsed and tagged with parts of speech dependencies

3
00:00:16,350 --> 00:00:18,140
and limitation.

4
00:00:18,210 --> 00:00:23,190
In this lecture we're going to identify and label specific phrases that match patterns we can define

5
00:00:23,190 --> 00:00:24,910
ourselves.

6
00:00:25,000 --> 00:00:29,050
We can think of this as a powerful version of regular expression where we actually take parts of speech

7
00:00:29,050 --> 00:00:31,580
and to account for our pattern search.

8
00:00:31,600 --> 00:00:36,640
Let's explore this concept with Spacey by jumping over to Jupiter notebook or a hearing him in a new

9
00:00:36,640 --> 00:00:39,960
notebook quite important Spacey and loaded the English library as well.

10
00:00:40,210 --> 00:00:45,460
So I want to point out quickly is we have a couple of tables inside the vocabulary and matching notebook

11
00:00:45,520 --> 00:00:47,500
that are going to be really useful free to reference.

12
00:00:47,710 --> 00:00:55,270
If you come back to an LP Python basics and open up vocabulary and matching here and scroll down there's

13
00:00:55,270 --> 00:01:00,400
a couple of tables such as this from right here for additional parameters and quantifiers.

14
00:01:00,420 --> 00:01:03,770
And scroll down here there's other tokened attributes that we're going to talk about.

15
00:01:03,880 --> 00:01:04,890
So we have these tables here.

16
00:01:04,900 --> 00:01:09,160
I encourage you to reference them and we'll jump a little bit back and forth between these two notebooks

17
00:01:09,460 --> 00:01:11,270
to reference some of the code here.

18
00:01:11,310 --> 00:01:13,000
Let's go ahead and get started.

19
00:01:13,000 --> 00:01:15,590
First off we're going to talk about rule based matching.

20
00:01:15,790 --> 00:01:21,850
Spacey offers a rule matching tool called matcher and that allows you to build a library of token patterns

21
00:01:22,210 --> 00:01:28,270
then match those patterns against a doc object to return a list of found matches a very similar idea

22
00:01:28,270 --> 00:01:30,550
to regular expressions that we saw earlier.

23
00:01:30,670 --> 00:01:34,630
They can think of this is kind of a more powerful version of that and you can actually match from any

24
00:01:34,630 --> 00:01:40,540
part of the token including text and annotations and you can add multiple patterns to the same matcher.

25
00:01:40,540 --> 00:01:52,380
Let's show you how to import the natural library will say from speccy dot matcher import matcher and

26
00:01:52,380 --> 00:01:59,430
then we're going to create a mature object by saying matcher and then we pass in the current vocab of

27
00:01:59,430 --> 00:02:01,360
this an LP object.

28
00:02:01,500 --> 00:02:05,220
So we say matter is equal to matter passing in an LP that vocab.

29
00:02:05,220 --> 00:02:10,380
So here matter is an object that pairs the current vocab object and we can add or remove specific names

30
00:02:10,440 --> 00:02:12,600
matchers to match her as needed.

31
00:02:12,600 --> 00:02:15,690
So we're going to take this matter object and then add or remove to it.

32
00:02:16,020 --> 00:02:19,020
So it's time to find patterns.

33
00:02:19,080 --> 00:02:22,530
So we need to create patterns that we actually want to match on.

34
00:02:22,710 --> 00:02:25,980
And the way this works in fact will create several patterns.

35
00:02:25,980 --> 00:02:27,770
So say pattern one for the first one.

36
00:02:27,930 --> 00:02:33,120
The way this works so spacey is you have a list and you're going to provide essentially a series of

37
00:02:33,210 --> 00:02:35,860
dictionaries into this list.

38
00:02:35,880 --> 00:02:40,950
So the first one we're going to say the key is lower.

39
00:02:41,190 --> 00:02:45,360
And then the value is solar power.

40
00:02:45,360 --> 00:02:51,150
So we're going to read 8 documents or a string in and we're going to try to find solar power and solar

41
00:02:51,150 --> 00:02:54,450
power can appear in the following ways.

42
00:02:54,720 --> 00:03:02,870
We wanted to test it if it appears as one word if it appears with a dash in the middle or if it just

43
00:03:02,870 --> 00:03:05,180
appears as two words.

44
00:03:05,180 --> 00:03:06,560
So solar power.

45
00:03:06,560 --> 00:03:09,230
Single word solar power or a dash or solar power.

46
00:03:09,230 --> 00:03:12,900
Two words we're basically going to try to protect all three of these patterns.

47
00:03:13,100 --> 00:03:17,900
So for the first pattern here we're just detecting if you transform that tokens to all lowercase.

48
00:03:18,020 --> 00:03:19,730
Does it match to solar power.

49
00:03:21,160 --> 00:03:25,600
The second pattern that we're looking for is the one with some sort of punctuation like a dash in the

50
00:03:25,600 --> 00:03:26,290
middle.

51
00:03:26,680 --> 00:03:35,410
So the way that one's going to work is the following will say lower for the term solar comma.

52
00:03:35,540 --> 00:03:43,370
The next dictionary inside of this list is going to be if a key is underscore punk.

53
00:03:43,590 --> 00:03:45,370
And let's make sure that's all capitalized.

54
00:03:45,390 --> 00:03:49,800
So that sense for is punctuation colon will pass in the boolean true.

55
00:03:50,010 --> 00:03:56,220
That's basically asking is this token lowercase Soler then is there punctuation and then we're going

56
00:03:56,220 --> 00:04:02,160
to pass in one more dictionary with lower as a key and then we're going to ask is the lowercase equal

57
00:04:02,160 --> 00:04:03,080
to power.

58
00:04:03,300 --> 00:04:08,190
So this is actually going to find various different types of punctuations in between solar and power

59
00:04:08,250 --> 00:04:11,850
not just the hyphen.

60
00:04:11,930 --> 00:04:13,370
So now pattern three.

61
00:04:13,580 --> 00:04:18,330
Let's go ahead and just say lower.

62
00:04:18,570 --> 00:04:19,650
Should we spell that right.

63
00:04:20,510 --> 00:04:31,070
Is lower equal to solar and then is the token immediately following this when it's lowercase is that

64
00:04:31,190 --> 00:04:33,460
the string power.

65
00:04:33,770 --> 00:04:39,140
So here we're not able to the text for various use cases and I'm going to kind of match them up here

66
00:04:39,560 --> 00:04:46,980
so it's able to tacts the one word pattern that's pattern one pattern to is able to the texts Soler

67
00:04:47,040 --> 00:04:52,980
than some punctuation and then lowercase power and then pattern 3 is able to text the word solar space

68
00:04:53,100 --> 00:04:54,250
and then power.

69
00:04:54,270 --> 00:04:58,770
So we have these three patterns that we want to match on and you can check out again the tables on this

70
00:04:58,770 --> 00:05:04,410
vocab and matching as well as it links the documentation in order to figure out what you want to provide

71
00:05:04,420 --> 00:05:05,850
in as keys.

72
00:05:06,000 --> 00:05:11,580
So you can scroll down here and we have various parameters and if you keep scrolling down you can see

73
00:05:11,580 --> 00:05:16,620
the attributes so we have lower which is in our case the lower case form of the token text because so

74
00:05:16,620 --> 00:05:19,260
much on things like the length is alpha.

75
00:05:19,310 --> 00:05:20,460
Is it punctuation.

76
00:05:20,550 --> 00:05:22,980
Is it like a L or like an e-mail.

77
00:05:23,130 --> 00:05:24,540
Things are parts of speech.

78
00:05:24,570 --> 00:05:26,900
Delimitation the shape and so on.

79
00:05:26,910 --> 00:05:30,870
So it's actually lots of the attributes can provide into this dictionary but the really common ones

80
00:05:30,960 --> 00:05:36,120
specifically are lower and you can also do verbatim if you want to keep capitalisation in play.

81
00:05:36,240 --> 00:05:41,640
Maybe looking for a difference between Tesla if a capital-T as a company versus Tesla a lowercase t

82
00:05:41,940 --> 00:05:44,660
as the actual Tesla car.

83
00:05:44,880 --> 00:05:46,350
Anyways we have these three patterns.

84
00:05:46,380 --> 00:05:48,760
Now it's time to add them to our matcher.

85
00:05:48,810 --> 00:05:56,340
So the way this works is we simply say matter and then we're going to add N and you first name the actual

86
00:05:56,340 --> 00:05:56,960
matcher.

87
00:05:56,970 --> 00:06:03,300
So we're going to name this matcher or solar power matcher and then as a third parameter or a second

88
00:06:03,300 --> 00:06:05,320
parameter we passen none.

89
00:06:05,490 --> 00:06:10,530
So let's say callbacks parameter and you can shift tab here to actually see different parameters.

90
00:06:10,530 --> 00:06:13,160
So you can expand on this and check out the parameters.

91
00:06:13,260 --> 00:06:14,380
But we're going to do it here.

92
00:06:14,440 --> 00:06:18,820
Exit Out of that is set callbacks equal to none.

93
00:06:18,830 --> 00:06:21,060
So we'll talk about more about callbacks later on.

94
00:06:21,170 --> 00:06:23,800
And then we just pass in the patterns who want to match on.

95
00:06:23,810 --> 00:06:29,290
So just keep passing them patterns so pattern one pattern to pattern three.

96
00:06:29,540 --> 00:06:34,940
So now these three particular patterns have been added to this matching object and they're under the

97
00:06:34,940 --> 00:06:36,920
name solar power.

98
00:06:36,920 --> 00:06:40,850
And you can definitely provide this name whatever you want but it should be relevant to whatever you're

99
00:06:40,850 --> 00:06:43,790
trying to match on.

100
00:06:43,800 --> 00:06:49,320
So now that we have this solar power matcher Let's go ahead and create a document and see if we're able

101
00:06:49,320 --> 00:06:52,190
to match on these various phrases.

102
00:06:52,220 --> 00:06:54,680
So as Ina goes on to say the following.

103
00:06:54,740 --> 00:07:08,180
Say the solar power industry continues to grow as solar power increases and then also say solar power

104
00:07:08,840 --> 00:07:10,540
is amazing.

105
00:07:10,590 --> 00:07:13,710
So notice here we have solar power and I has three different versions of it.

106
00:07:13,730 --> 00:07:17,870
I have solar power as two separate words right after each other solar power as one word.

107
00:07:17,870 --> 00:07:20,240
And then solar power has a hyphenated word.

108
00:07:20,270 --> 00:07:24,150
We're going to run this and then to actually find the matches.

109
00:07:24,180 --> 00:07:29,620
You simply take the matter and then pass in that dock or document object.

110
00:07:29,820 --> 00:07:33,800
And we're going to set a variable called found matches equal to this matcher object.

111
00:07:33,810 --> 00:07:40,410
What it returns and what's nice here is I can simply print out my found that matches and it's going

112
00:07:40,410 --> 00:07:43,850
to return back to apples with three pieces of information.

113
00:07:43,890 --> 00:07:46,700
The first piece of information is the match ID.

114
00:07:46,740 --> 00:07:54,210
Essentially the string ID for the particular match and then it indicates the start and the stop and

115
00:07:54,210 --> 00:07:57,210
notice here the start and the stop is really on the tokens.

116
00:07:57,210 --> 00:08:03,450
So we have the first token the index 0 is the and then the second token the next one is Soler.

117
00:08:03,450 --> 00:08:09,030
So for example solar power here is the first match and it's going from one up tube not including three.

118
00:08:09,030 --> 00:08:12,910
So it's basically these two words index one and the next two.

119
00:08:13,170 --> 00:08:18,000
And if you check out the actual vocabulary and matching notebook and scroll down past's example aren't

120
00:08:18,000 --> 00:08:20,960
creating patterns and applying it to the dock object.

121
00:08:20,970 --> 00:08:25,110
We have this nice little for loop here that will actually print out the string representation if you

122
00:08:25,110 --> 00:08:25,550
want.

123
00:08:25,590 --> 00:08:28,500
So let me copy this and kind of explain what's going on.

124
00:08:28,500 --> 00:08:35,760
So I'm going to copy that and paste it here and what this does is it looks up the actual match your

125
00:08:35,760 --> 00:08:42,570
ID prints out the match matcher name the start the end and then print out the actual text.

126
00:08:42,630 --> 00:08:47,450
So kind of a nice little way of printing out everything but essentially it's the same information here

127
00:08:47,760 --> 00:08:49,800
plus the name of the matter object.

128
00:08:49,800 --> 00:08:56,430
Solar power which we defined up here when we added the matter and then the actual text that's matching.

129
00:08:56,430 --> 00:09:00,210
So just a little functionality here in case you find the need to use it.

130
00:09:00,630 --> 00:09:05,760
Now you can make token rules optional by passing and O.P. Asterix argument.

131
00:09:05,880 --> 00:09:08,980
So that lets us streamline our patterns list so mishu.

132
00:09:09,020 --> 00:09:16,940
What I mean by that I'm going to create a new set of patterns we will say pattern one and effect before

133
00:09:16,940 --> 00:09:20,790
we do this let's actually show you how to remove a particular pattern.

134
00:09:20,810 --> 00:09:26,000
Let's say you no longer were interested in this solar power matcher and you were interested in any of

135
00:09:26,000 --> 00:09:30,400
these old patterns anymore you wanted a full update instead of adding to the matcher.

136
00:09:30,410 --> 00:09:37,610
You can actually remove from the matcher so you can simply say take that matcher and remove whatever

137
00:09:37,610 --> 00:09:38,770
he happened to call the matcher.

138
00:09:38,780 --> 00:09:41,500
In our case we called it solar power.

139
00:09:41,690 --> 00:09:44,020
So I'm going to remove that.

140
00:09:44,390 --> 00:09:50,000
So now that we've removed this old set of patterns for the matter let's go ahead and create a new set

141
00:09:50,000 --> 00:09:54,380
of patterns we will say pattern one is equal to.

142
00:09:54,500 --> 00:09:56,960
And we're going to something really similar to what we had before.

143
00:09:57,050 --> 00:09:59,030
Lower as the key.

144
00:09:59,030 --> 00:10:05,840
And then solar power as the value and then for pattern to what we're going to do is a little different

145
00:10:05,950 --> 00:10:10,160
will say lower is solar.

146
00:10:10,430 --> 00:10:20,140
For the first term and then we're going to look for is underscore the NCT for his punctuation set that

147
00:10:20,170 --> 00:10:25,870
the true and true as a boolean and also inside his dictionary.

148
00:10:25,960 --> 00:10:32,880
We're going to set O.P. colon and then set that as an asterix for the string.

149
00:10:32,890 --> 00:10:38,550
And what that's going to allow us to do is allow this pattern to match zero or more times.

150
00:10:38,590 --> 00:10:43,510
And if you check out again the vocabulary and matching We have a little table of additional parameters.

151
00:10:43,540 --> 00:10:46,290
So you can negate the pattern make the pattern optional.

152
00:10:46,300 --> 00:10:51,460
So that's a question mark required pattern to match one or more times allow the pattern to match zero

153
00:10:51,460 --> 00:10:52,510
or more times.

154
00:10:52,540 --> 00:10:57,960
So that can help us if we have like double hyphens instead of just a single piece of punctuation.

155
00:10:58,180 --> 00:11:03,700
So we're going to say as little operator there that we can allow the pattern to match zero or more times.

156
00:11:03,820 --> 00:11:10,580
And then we're going to add and finally lower on power.

157
00:11:10,580 --> 00:11:11,380
So you run that.

158
00:11:11,480 --> 00:11:17,390
And let's go ahead now add in that we're going to call it solar power as we did before.

159
00:11:17,390 --> 00:11:23,630
Make sure you remove the old solar power set and we won't have any callbacks for this particular instance

160
00:11:23,810 --> 00:11:30,000
and we'll pasand these new updated patterns pattern one and pattern to again just to clarify here.

161
00:11:30,020 --> 00:11:34,850
Pattern one is going to be able to find solar power put together as all lowercase.

162
00:11:35,000 --> 00:11:42,110
So you can grab solar power like this or solar power with S&amp;P capitalized pattern too is going to grab

163
00:11:42,110 --> 00:11:45,570
solar and then any amount of punctuation.

164
00:11:45,590 --> 00:11:51,500
That's what the Asterix is doing with the O.P. so it can be double dashes or can be one underscore or

165
00:11:51,500 --> 00:11:56,630
one plus or whatever it happens to be punctuation and then power.

166
00:11:56,630 --> 00:11:58,520
So that's really powerful.

167
00:11:58,520 --> 00:12:05,450
So add that in as our new solar power matching and let's create a new documents we'll say Doc two is

168
00:12:05,450 --> 00:12:21,870
equal to an LP and we're going to say something like solar powered power is solar power Yeah or really

169
00:12:21,880 --> 00:12:22,510
whatever you want.

170
00:12:22,510 --> 00:12:27,580
The key thing here is I want to show you that it's going to be able to actually grab these two hyphens

171
00:12:27,640 --> 00:12:29,800
because we added in this optional parameter

172
00:12:32,840 --> 00:12:40,080
so from matcher we're going to say actually we're going to say found underscore match's is equal to

173
00:12:40,140 --> 00:12:41,040
matter.

174
00:12:41,070 --> 00:12:49,110
We're going to pasan dock to run that and then you can print out your found matches and if found two

175
00:12:49,110 --> 00:12:54,260
matches found the first one at solar power or solar or dash dash power and this one put together at

176
00:12:54,270 --> 00:12:55,150
solar power.

177
00:12:55,350 --> 00:13:00,870
So now these two pattern lines actually replace what we had here as the original three because going

178
00:13:00,870 --> 00:13:05,660
to be able to detect both pattern to pattern through here because of this.

179
00:13:05,730 --> 00:13:09,810
If we scroll down here this optional parameter because the Asterix is actually for come back to this

180
00:13:09,810 --> 00:13:10,370
table.

181
00:13:10,520 --> 00:13:13,770
It's allowing the pattern to occur zero or more times.

182
00:13:15,150 --> 00:13:15,840
OK.

183
00:13:16,020 --> 00:13:20,540
Now we've learned how to actually create our own patterns and match on them using Spacey.

184
00:13:20,610 --> 00:13:25,230
And the main things to cover from this lecture that are important is to understand the space to that

185
00:13:25,230 --> 00:13:26,640
matter in this matter.

186
00:13:26,810 --> 00:13:29,430
You pass in your vocab into the matter.

187
00:13:29,460 --> 00:13:34,950
You create patterns which are list of dictionaries based off key words in the terms you're looking for.

188
00:13:34,950 --> 00:13:39,870
And you can check out the actual tables we provide for you inside of our notebook if you scroll down

189
00:13:40,290 --> 00:13:45,720
you'll see some tables for the options key as well as tables for all the attributes you can search on

190
00:13:45,960 --> 00:13:47,300
and what they should match to.

191
00:13:47,370 --> 00:13:51,900
And if you scroll all the way down we actually have a link to documentation that goes over the official

192
00:13:51,930 --> 00:13:54,140
sections for rule based matching.

193
00:13:54,150 --> 00:13:58,770
So if you check that out you can scroll down here and there's tons of different examples as well as

194
00:13:58,890 --> 00:14:02,390
similar tables to what we provide for you in the notebook.

195
00:14:02,400 --> 00:14:02,940
OK.

196
00:14:03,090 --> 00:14:05,100
Came back to her notebook when you have those patterns.

197
00:14:05,190 --> 00:14:09,600
Add them to the match or given a name that you provide and they just pass in whatever doc objects you

198
00:14:09,600 --> 00:14:12,920
have into this matter and it reports back to found matches.

199
00:14:12,990 --> 00:14:16,420
And we also showed you how you can actually grab the raw text for the match itself.

200
00:14:16,440 --> 00:14:23,010
Coming up next we're going to talk about trying to match on limitation and also trying to match phrases

201
00:14:23,070 --> 00:14:25,200
and viewing those matches themselves.

202
00:14:25,200 --> 00:14:26,960
We'll be right back with part two.

