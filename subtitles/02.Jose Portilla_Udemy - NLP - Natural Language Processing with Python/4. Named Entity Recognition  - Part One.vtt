WEBVTT
ï»¿1
00:00:05.360 --> 00:00:08.280
Welcome back to this lecture unnamed entity recognition.

2
00:00:09.450 --> 00:00:16.590
Named entity recognition or any are for short seeks to locate and classify named entity mentions in

3
00:00:16.710 --> 00:00:23.520
unstructured text into pre-defined categories such as the person names organizations locations medical

4
00:00:23.520 --> 00:00:28.090
codes time expression's quantities percentages monetary values etc..

5
00:00:28.140 --> 00:00:34.200
So lots of different different types of Reyk entities that can be recognized here and space is going

6
00:00:34.200 --> 00:00:36.030
to do this automatically for us.

7
00:00:36.880 --> 00:00:43.030
So for example our goal would be to read in a raw text such as Jim bought 300 shares of Acme core in

8
00:00:43.030 --> 00:00:46.860
2006 and then add additional any attacks.

9
00:00:47.020 --> 00:00:54.040
So understand that Jim is a person or Acme core is an organization or that 2006 2006s time and for more

10
00:00:54.040 --> 00:00:57.350
complex data and see recognition we can add even more tags like understanding.

11
00:00:57.360 --> 00:00:59.980
Three hundred is a amount of something or.

12
00:01:00.220 --> 00:01:03.190
Refers to stock shares.

13
00:01:03.310 --> 00:01:06.090
So we're going explore names and see recognition of space.

14
00:01:06.220 --> 00:01:10.190
It does name recognition really really well even on its own.

15
00:01:10.330 --> 00:01:13.570
But we're also going to learn how to add our own custom entities.

16
00:01:13.690 --> 00:01:18.190
If you're working for a custom text data set there may be some entities that are pretty unique to your

17
00:01:18.190 --> 00:01:18.910
data set.

18
00:01:18.940 --> 00:01:21.630
You may want to add in as your own entity.

19
00:01:21.670 --> 00:01:24.750
Let's go ahead and jump to Jupiter notebook and get started.

20
00:01:24.850 --> 00:01:25.300
OK.

21
00:01:25.420 --> 00:01:32.040
In a brand new documents or a notebook I've imported Spacey and imported space's load in core web apps.

22
00:01:32.440 --> 00:01:37.160
Next we're going to do just write a function to display basic entity information.

23
00:01:37.480 --> 00:01:40.320
We're going to write a function called show eant.

24
00:01:40.340 --> 00:01:47.570
Yes it's going to accept a document and we'll say if Doc Yes.

25
00:01:47.610 --> 00:01:57.430
Meaning if it actually has named entities will say for every entity in Doc and yes we're going to print

26
00:01:57.520 --> 00:02:10.250
out the entity text plus a space and a dash and then we'll say print out the entities label label underscore

27
00:02:11.240 --> 00:02:15.060
and then we'll also put in the explanation.

28
00:02:15.110 --> 00:02:24.700
So we're saying add in the string Spacey explain and we'll have to explain that label for us.

29
00:02:24.750 --> 00:02:28.480
OK so else if that doesn't actually occur.

30
00:02:28.480 --> 00:02:31.860
So say coming back to this original if statement.

31
00:02:31.930 --> 00:02:34.790
Let me zoom out just a little bit here so you can see the whole thing.

32
00:02:34.810 --> 00:02:39.670
So we're saying OK if there's actually entities will print out the text that's the label an explanation

33
00:02:39.670 --> 00:02:41.340
of the s else.

34
00:02:41.410 --> 00:02:47.090
If there are no entities we're just going to print out no entities found.

35
00:02:47.110 --> 00:02:49.670
OK so there is a show entity function.

36
00:02:49.690 --> 00:02:55.570
Now we're going to say is our document is equal to and let's specifically do something that has the

37
00:02:55.570 --> 00:02:57.730
entities something like.

38
00:02:58.030 --> 00:03:01.040
Make sure that you said that string will say something like.

39
00:03:01.060 --> 00:03:05.790
Hi how are you.

40
00:03:05.950 --> 00:03:09.290
Then we'll pass and show ense on that document.

41
00:03:09.370 --> 00:03:11.020
And we say no entity is found.

42
00:03:11.290 --> 00:03:16.030
So now let's add in a document that we know should have entities.

43
00:03:16.290 --> 00:03:27.520
So we will say in LP passing the unicode string I will say May I go to Washington DC.

44
00:03:31.110 --> 00:03:34.920
Next May to see the.

45
00:03:35.060 --> 00:03:37.110
I will say Washington Monument

46
00:03:39.770 --> 00:03:45.300
questionmark and Naledge show the entities on that document.

47
00:03:45.470 --> 00:03:51.560
And notice here it picked up three entities it picked up Washington DC as some sort of location like

48
00:03:51.560 --> 00:03:58.790
a country a city or a state it picked up next May so those not just made but next May as a date and

49
00:03:58.790 --> 00:04:05.630
also the Washington Monument as some sort of company agency or institution otherwise tagged with o r

50
00:04:05.630 --> 00:04:06.590
g.

51
00:04:06.620 --> 00:04:12.050
So there's various entity annotations and if you take a look at parts of speech tagging you come over

52
00:04:12.050 --> 00:04:13.860
to named entity recognition.

53
00:04:13.880 --> 00:04:15.590
We provide a table of these.

54
00:04:15.620 --> 00:04:21.620
Just scroll down and you'll see the various entity annotations and the tokens fans come with their own

55
00:04:21.620 --> 00:04:25.240
set of annotations so you can see the edited text.

56
00:04:25.280 --> 00:04:28.070
The entity types hash value the entity types.

57
00:04:28.070 --> 00:04:29.930
String description.

58
00:04:29.970 --> 00:04:35.850
You can also grab the start and stop index positions as well as the start and stop in addition for the

59
00:04:35.850 --> 00:04:37.300
actual character.

60
00:04:37.350 --> 00:04:40.910
So notice one is the token span's and one is the actual entity text.

61
00:04:41.250 --> 00:04:47.220
Ok so I want to come back to our original documents here and if you wanted to you could do something

62
00:04:47.220 --> 00:04:49.860
like put another documents.

63
00:04:49.900 --> 00:04:51.660
Let's just see how it can perform.

64
00:04:51.760 --> 00:04:54.370
A couple of other entities will say something like.

65
00:04:54.370 --> 00:05:08.970
Can I please have $500 of Microsoft stock will say show ense on that documents and here it says $500.

66
00:05:08.990 --> 00:05:12.500
No it's smart enough to understand that this number and dollars go together.

67
00:05:12.520 --> 00:05:14.000
It's some sort of monetary value.

68
00:05:14.160 --> 00:05:18.080
And then Microsoft is some sort of again company agency or institution.

69
00:05:18.130 --> 00:05:22.020
There are quite a wide variety of named entity recognition tags.

70
00:05:22.120 --> 00:05:29.040
And again in this notebook we provide a table of them for you so there's persons buildings airports

71
00:05:29.040 --> 00:05:33.900
highways companies countries objects vehicles foods things like products.

72
00:05:34.080 --> 00:05:39.810
There's events laws work of arts languages percentages money quantities et cetera.

73
00:05:40.050 --> 00:05:46.100
So we have descriptions and examples for you so you can check out that table super useful as a reference.

74
00:05:46.110 --> 00:05:50.820
Now let's imagine that we want to add a named entity to a span.

75
00:05:50.820 --> 00:05:56.100
Now normally we would have Spacey build a library of named entities by training it on several samples

76
00:05:56.100 --> 00:05:56.690
of text.

77
00:05:56.730 --> 00:06:02.220
But in this case we only want to add one value sort of come back appear to our own notebook and we're

78
00:06:02.220 --> 00:06:03.630
going to create a new document.

79
00:06:05.940 --> 00:06:20.160
And this document is just going to be just to build a UK factory for 6 million people million right.

80
00:06:20.550 --> 00:06:24.400
And let's go ahead and run show entities on that particular document.

81
00:06:24.780 --> 00:06:31.420
So right now it's understanding that UK is some sort of country city or state and that 6 million dollars

82
00:06:31.470 --> 00:06:32.760
refers to money.

83
00:06:33.010 --> 00:06:38.750
But what's interesting is right now Spacey as a named entity isn't recognizing Tesla.

84
00:06:39.000 --> 00:06:44.060
We saw Tesla before in a previous example and it was able to realize that Tesla was a proper noun but

85
00:06:44.070 --> 00:06:47.870
it actually doesn't know that here referring to Tesla as a company.

86
00:06:48.000 --> 00:06:54.390
So it would be nice if we could tell Spacey Hey Tesla should be an orc it company agency or institution

87
00:06:54.840 --> 00:06:59.430
that's going to be super useful for your own custom text data sets where you have to find things maybe

88
00:06:59.430 --> 00:07:02.070
like a specific product name.

89
00:07:02.220 --> 00:07:14.740
So we'll come back up here and we'll say from speccy tokens import spam and then we'll say org is equal

90
00:07:14.740 --> 00:07:24.140
to Doc dot vocab strings and then grab the unicode string for cup.

91
00:07:24.260 --> 00:07:26.800
RG The Sea Organization entity label.

92
00:07:26.990 --> 00:07:29.080
So right now or right here.

93
00:07:29.150 --> 00:07:33.340
This is actually the hash value of the orch entity label.

94
00:07:33.440 --> 00:07:42.510
Next I want to create a span for the new entity so I will say my new entity is equal to a span pass

95
00:07:42.720 --> 00:07:43.890
in that document.

96
00:07:44.000 --> 00:07:46.480
And I know where the new entity is.

97
00:07:46.670 --> 00:07:50.030
It's the very first word here first token.

98
00:07:50.030 --> 00:07:59.620
So we're going to say go from 0 up to and including one and then give that the label for.

99
00:07:59.710 --> 00:08:02.160
Which is again this hash value.

100
00:08:02.230 --> 00:08:08.980
Now your index solutions may change depending on where actual tokin happens to be.

101
00:08:10.740 --> 00:08:14.620
And I want to add the entity to the existing document object.

102
00:08:14.760 --> 00:08:19.890
I'll say DMCE E.A. us is equal to list.

103
00:08:20.130 --> 00:08:24.780
Doc E.A. and then I'm going to add on a new item.

104
00:08:25.960 --> 00:08:27.890
Which is my new entity.

105
00:08:27.890 --> 00:08:31.590
And technically you could also use a pen here.

106
00:08:31.620 --> 00:08:37.650
So keep in mind in this code above here these four documents doc is the name of the document object

107
00:08:38.190 --> 00:08:41.510
0 is the star index position of the span.

108
00:08:41.610 --> 00:08:45.030
One is a stop in the exposition of the span Xclusive.

109
00:08:45.030 --> 00:08:51.000
So essentially from 0 to 1 you're describing 0 and then label is the label assigned to our entity.

110
00:08:51.000 --> 00:09:01.360
So now if I show Aunty's on that documents it now recognizes that Tesla should be a company agency or

111
00:09:01.390 --> 00:09:02.710
institution.

112
00:09:02.710 --> 00:09:03.070
All right.

113
00:09:03.100 --> 00:09:06.760
So that's it for part 1 of this lecture in this part one.

114
00:09:06.760 --> 00:09:12.270
We went over how to actually show entities by calling in ts for a list of entities.

115
00:09:12.370 --> 00:09:16.070
And we also show you the various attributes and call off an entity tag.

116
00:09:16.270 --> 00:09:22.300
So remember the attributes and call are the text the label the hash value label and then label underscore

117
00:09:22.390 --> 00:09:27.640
which is the string description and the start and end of the token and the actual characters.

118
00:09:27.910 --> 00:09:31.990
And again here all the any are tags that you can access.

119
00:09:31.990 --> 00:09:37.720
And if you want an explanation of them all you need to do is print out Spacey that explain that particular

120
00:09:37.780 --> 00:09:39.150
entity label.

121
00:09:39.190 --> 00:09:45.430
Coming up next we're going to talk about is adding named entities not just to a span but if you scroll

122
00:09:45.430 --> 00:09:47.320
down here we're going to talk about in part two.

123
00:09:47.380 --> 00:09:49.860
Adding the entities to all matching spans.

124
00:09:49.990 --> 00:09:54.520
So if we wanted to attack all occurrences of something like Tesla so we can continue right where we

125
00:09:54.520 --> 00:09:57.010
left off on part two in the next lecture.

126
00:09:57.010 --> 00:09:57.780
I'll see it there.

