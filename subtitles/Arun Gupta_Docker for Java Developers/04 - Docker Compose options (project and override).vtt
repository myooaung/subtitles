WEBVTT
1
00:00:00.060 --> 00:00:02.010
- [Instructor] Let's take a look at some of the common

2
00:00:02.010 --> 00:00:05.030
docker compose options that people would like to use,

3
00:00:05.030 --> 00:00:08.020
or, as a developer, that would be very helpful to you.

4
00:00:08.020 --> 00:00:11.020
The first thing we want to look at is -p option.

5
00:00:11.020 --> 00:00:13.050
Now what that means is by default,

6
00:00:13.050 --> 00:00:16.080
when you start an application in a directory,

7
00:00:16.080 --> 00:00:19.040
it uses that directory as a context.

8
00:00:19.040 --> 00:00:23.000
And when it creates a service, it uses that directory name

9
00:00:23.000 --> 00:00:25.070
as part of the generated service name.

10
00:00:25.070 --> 00:00:27.080
Using -p, you can create

11
00:00:27.080 --> 00:00:30.060
multiple isolated environments on a host.

12
00:00:30.060 --> 00:00:33.010
So if you want to start the project again and again,

13
00:00:33.010 --> 00:00:36.070
you can specify -p and a different context,

14
00:00:36.070 --> 00:00:38.040
and those services are essentially

15
00:00:38.040 --> 00:00:40.020
created in that name space.

16
00:00:40.020 --> 00:00:42.030
That'll make it really easy for you.

17
00:00:42.030 --> 00:00:44.070
We'll take a look at a sample in a few minutes.

18
00:00:44.070 --> 00:00:47.040
Another option that is available in docker compose

19
00:00:47.040 --> 00:00:49.020
is for override.

20
00:00:49.020 --> 00:00:50.080
Now, as we looked earlier,

21
00:00:50.080 --> 00:00:53.040
there is a docker-compose.yml file.

22
00:00:53.040 --> 00:00:57.070
And that YAML file has a definition of all the services.

23
00:00:57.070 --> 00:00:59.040
But, if you want, you can have

24
00:00:59.040 --> 00:01:03.080
a docker-compose.override.yml file.

25
00:01:03.080 --> 00:01:07.020
And in that file, you can give a definition

26
00:01:07.020 --> 00:01:08.080
that will override the ones that is defined

27
00:01:08.080 --> 00:01:10.080
in docker-compose.yml.

28
00:01:10.080 --> 00:01:13.040
And once again, we'll take a look at the sample here.

29
00:01:13.040 --> 00:01:16.080
The services defined in docker-compose.override.yml

30
00:01:16.080 --> 00:01:19.050
either replaces or extends the value,

31
00:01:19.050 --> 00:01:21.010
and we'll take a look at that.

32
00:01:21.010 --> 00:01:23.010
Single-value options like image

33
00:01:23.010 --> 00:01:24.090
that could only have a single value

34
00:01:24.090 --> 00:01:27.010
will replace the old value.

35
00:01:27.010 --> 00:01:30.080
Multiple value options like ports are either concatenated,

36
00:01:30.080 --> 00:01:34.000
or newer values will take precedence over the values

37
00:01:34.000 --> 00:01:37.000
that are specified in docker-compose.yml.

38
00:01:37.000 --> 00:01:40.040
So let's take a look at what can we do with this here.

39
00:01:40.040 --> 00:01:43.090
In my terminal, I'm into the chapter3 director, helloweb.

40
00:01:43.090 --> 00:01:45.070
That's what we created earlier.

41
00:01:45.070 --> 00:01:49.070
Now, by default, if I were to start this application,

42
00:01:49.070 --> 00:01:53.000
I will just say docker-compose up -d.

43
00:01:53.000 --> 00:01:55.020
Now, if we were to do that, before that,

44
00:01:55.020 --> 00:01:58.020
let's take a look at our docker-compose.yml.

45
00:01:58.020 --> 00:02:01.060
All it does is just looks at this deployments directors,

46
00:02:01.060 --> 00:02:04.050
mounts it to the WildFly deployment directory,

47
00:02:04.050 --> 00:02:08.030
and starts WildFly on port 8080 on the host,

48
00:02:08.030 --> 00:02:10.070
mapping it to 8080 in the container.

49
00:02:10.070 --> 00:02:15.030
Now, if I do docker-compose

50
00:02:15.030 --> 00:02:17.050
up -d here.

51
00:02:17.050 --> 00:02:19.010
Let's try it again.

52
00:02:19.010 --> 00:02:21.020
The directory name is helloweb,

53
00:02:21.020 --> 00:02:24.080
so the service name is helloweb_web,

54
00:02:24.080 --> 00:02:26.090
web being the service name here,

55
00:02:26.090 --> 00:02:29.090
and 1 being the single instance of the service,

56
00:02:29.090 --> 00:02:31.010
which is okay.

57
00:02:31.010 --> 00:02:34.050
Now, I can bring the service down very easily,

58
00:02:34.050 --> 00:02:36.030
docker-compose down.

59
00:02:36.030 --> 00:02:39.040
And once again, stops the container, removes the container,

60
00:02:39.040 --> 00:02:41.080
and then removes the network as well.

61
00:02:41.080 --> 00:02:44.060
Let's take a look at my -p option now.

62
00:02:44.060 --> 00:02:49.070
So here, I can say docker-compose up -p.

63
00:02:49.070 --> 00:02:52.000
Actually, this is a docker compose option,

64
00:02:52.000 --> 00:02:53.040
not up option

65
00:02:53.040 --> 00:02:57.000
that'll say -p my app

66
00:02:57.000 --> 00:02:58.050
up -d.

67
00:02:58.050 --> 00:02:59.060
Okay.

68
00:02:59.060 --> 00:03:02.010
Now you'll see the network that is created is

69
00:03:02.010 --> 00:03:04.040
myapp_default,

70
00:03:04.040 --> 00:03:07.080
and the service that is created is myapp_web_1.

71
00:03:07.080 --> 00:03:10.070
So, let's take a look at if I want to see the services.

72
00:03:10.070 --> 00:03:14.000
Docker-compose, and I will say ps

73
00:03:14.000 --> 00:03:16.020
to show me the list of services.

74
00:03:16.020 --> 00:03:18.030
Wow, it does not show any services.

75
00:03:18.030 --> 00:03:19.070
Well, why so?

76
00:03:19.070 --> 00:03:24.020
Because remember, the default context is the directory name,

77
00:03:24.020 --> 00:03:25.090
so we're still trying to find those services,

78
00:03:25.090 --> 00:03:28.090
network, et cetera, in that context.

79
00:03:28.090 --> 00:03:31.030
If you want to taka a look at the services,

80
00:03:31.030 --> 00:03:34.050
then you need to specify the context as well.

81
00:03:34.050 --> 00:03:37.020
Now, it shows me the services correctly.

82
00:03:37.020 --> 00:03:40.060
And similarly, if you want to shutdown the service,

83
00:03:40.060 --> 00:03:43.060
you go to specify the context using -p,

84
00:03:43.060 --> 00:03:46.030
and it shuts down the services very easily for you.

85
00:03:46.030 --> 00:03:47.010
Okay.

86
00:03:47.010 --> 00:03:48.080
So, that's sort of the first example

87
00:03:48.080 --> 00:03:51.020
of how you can use -p option.

88
00:03:51.020 --> 00:03:53.040
More real life example would be is

89
00:03:53.040 --> 00:03:56.040
let's say you have a Git Repository,

90
00:03:56.040 --> 00:03:57.090
you got multiple branches,

91
00:03:57.090 --> 00:04:01.060
you can fire up test environment using -p,

92
00:04:01.060 --> 00:04:03.020
and take the branch name here.

93
00:04:03.020 --> 00:04:05.060
So for each feature branch in your Git,

94
00:04:05.060 --> 00:04:08.040
you can easily set up a docker compose application,

95
00:04:08.040 --> 00:04:11.060
run it, test it, and shut down the application.

96
00:04:11.060 --> 00:04:12.090
And in between, you may run the test,

97
00:04:12.090 --> 00:04:14.030
or whatever you want to do.

98
00:04:14.030 --> 00:04:16.070
That's the typically use case for it.

99
00:04:16.070 --> 00:04:20.030
Let's take a look at how will we use override next.

100
00:04:20.030 --> 00:04:23.060
So, I'm going to refer back to the exercise files.

101
00:04:23.060 --> 00:04:26.010
Here's a file that I'm going to use.

102
00:04:26.010 --> 00:04:29.070
So let me copy this file first.

103
00:04:29.070 --> 00:04:32.020
In this directory, once again,

104
00:04:32.020 --> 00:04:34.020
I'm in the helloweb directory.

105
00:04:34.020 --> 00:04:40.070
I'm going to create docker-compose.override.yml,

106
00:04:40.070 --> 00:04:43.080
and I'm going to paste the content here.

107
00:04:43.080 --> 00:04:45.020
So, what are we doing here?

108
00:04:45.020 --> 00:04:48.020
Well, first thing is a web service.

109
00:04:48.020 --> 00:04:49.080
So we are using the exact same name

110
00:04:49.080 --> 00:04:52.030
as it was used in the original service.

111
00:04:52.030 --> 00:04:54.080
So that means we are overriding a service.

112
00:04:54.080 --> 00:04:57.000
The second thing is we are mapping.

113
00:04:57.000 --> 00:04:59.030
Instead of port 8080,

114
00:04:59.030 --> 00:05:01.070
we are mapping port 80 on the host here.

115
00:05:01.070 --> 00:05:03.080
And because container has port 80,

116
00:05:03.080 --> 00:05:06.020
in this case, it'll replace the port

117
00:05:06.020 --> 00:05:08.030
that is from the parent service.

118
00:05:08.030 --> 00:05:12.030
So, let's save the file here.

119
00:05:12.030 --> 00:05:13.040
Take a look at the listing.

120
00:05:13.040 --> 00:05:15.060
I got docker-compose-yml

121
00:05:15.060 --> 00:05:19.040
and docker-compose.override.yml.

122
00:05:19.040 --> 00:05:23.020
Now I can say docker-compose up -d.

123
00:05:23.020 --> 00:05:27.000
Before we do that, if you remember, in the previous case,

124
00:05:27.000 --> 00:05:29.070
our port 8080 on the host was mapped

125
00:05:29.070 --> 00:05:32.030
to port 8080 on the container.

126
00:05:32.030 --> 00:05:36.000
Now, if I do docker-compose up -d with the override file,

127
00:05:36.000 --> 00:05:38.030
let's take a look what happens.

128
00:05:38.030 --> 00:05:41.020
My services are created correctly.

129
00:05:41.020 --> 00:05:45.010
And if I say docker-compose ps,

130
00:05:45.010 --> 00:05:47.070
now port 80 on the host

131
00:05:47.070 --> 00:05:49.090
is mapped to port 80 on the container.

132
00:05:49.090 --> 00:05:52.010
I also have an option to change the image,

133
00:05:52.010 --> 00:05:53.070
whatever I want to do with this.

134
00:05:53.070 --> 00:05:55.090
Now this is again a very classical use case

135
00:05:55.090 --> 00:05:59.030
where in docker-compose.override.yml,

136
00:05:59.030 --> 00:06:01.070
I may want to have a different image

137
00:06:01.070 --> 00:06:03.070
depending upon the circumstances.

138
00:06:03.070 --> 00:06:06.030
I may want to run a test image,

139
00:06:06.030 --> 00:06:08.030
or I may want to run a production image,

140
00:06:08.030 --> 00:06:11.040
or I may want to run an image specifically configured

141
00:06:11.040 --> 00:06:13.000
for extra logging.

142
00:06:13.000 --> 00:06:14.000
So there are lots of ways

143
00:06:14.000 --> 00:06:18.000
by which you could use docker-compose.override.yml.

144
00:06:18.000 --> 00:06:19.050
So let's take a look now that the service

145
00:06:19.050 --> 00:06:21.020
is running on port 80,

146
00:06:21.020 --> 00:06:25.040
what impact does that have on our application essentially.

147
00:06:25.040 --> 00:06:28.040
So if you remember, we had a deployments directory.

148
00:06:28.040 --> 00:06:31.050
Okay, so let's take a look at the deployments directory.

149
00:06:31.050 --> 00:06:35.020
In that directory, we already have webapp.war file.

150
00:06:35.020 --> 00:06:37.090
And webapp.war.deployed

151
00:06:37.090 --> 00:06:39.040
is a WildFly convention

152
00:06:39.040 --> 00:06:41.090
saying that the application is deployed as well.

153
00:06:41.090 --> 00:06:45.010
Let's verify that.

154
00:06:45.010 --> 00:06:48.030
I can say logs -f.

155
00:06:48.030 --> 00:06:50.060
And in my WildFly logs,

156
00:06:50.060 --> 00:06:52.070
it does say that the webapp.war file

157
00:06:52.070 --> 00:06:55.010
was successfully deployed.

158
00:06:55.010 --> 00:06:56.070
If I stop it here,

159
00:06:56.070 --> 00:07:00.000
now I can access my application,

160
00:07:00.000 --> 00:07:01.000
localhost.

161
00:07:01.000 --> 00:07:03.030
And instead of saying 8080,

162
00:07:03.030 --> 00:07:06.070
because now I'm accessing port 80 on the host,

163
00:07:06.070 --> 00:07:09.010
I don't need to specify the port number.

164
00:07:09.010 --> 00:07:12.070
So now I can directly say webapp,

165
00:07:12.070 --> 00:07:14.010
resources,

166
00:07:14.010 --> 00:07:15.050
persons.

167
00:07:15.050 --> 00:07:16.040
And there you go,

168
00:07:16.040 --> 00:07:18.070
my application is not accessible on port 80,

169
00:07:18.070 --> 00:07:20.020
so that is pretty cool.

170
00:07:20.020 --> 00:07:21.070
If you're using Docker Toolbox,

171
00:07:21.070 --> 00:07:24.030
then, once again, local host will not work for you.

172
00:07:24.030 --> 00:07:27.040
Make sure you're using the Docker Machine IP address

173
00:07:27.040 --> 00:07:30.000
to access this URL.

174
00:07:30.000 --> 00:07:31.090
Let's clean up our application.

175
00:07:31.090 --> 00:07:34.040
So we are going to

176
00:07:34.040 --> 00:07:37.000
docker-compose down,

177
00:07:37.000 --> 00:07:38.030
shut down our application.

178
00:07:38.030 --> 00:07:40.040
So it stops the container, removes the containers,

179
00:07:40.040 --> 00:07:42.050
and remove the network as well.

180
00:07:42.050 --> 00:07:45.040
So in this section, we saw how we can create

181
00:07:45.040 --> 00:07:49.000
multiple projects from a single docker compose application.

182
00:07:49.000 --> 00:07:50.040
That is particularly useful

183
00:07:50.040 --> 00:07:52.070
let's say if you have a Git project,

184
00:07:52.070 --> 00:07:56.020
And for each branch, you may want to run the test,

185
00:07:56.020 --> 00:07:59.060
so you can use -p branch name right there,

186
00:07:59.060 --> 00:08:01.050
and then spin up multiple projects

187
00:08:01.050 --> 00:08:03.030
without conflicting with each other.

188
00:08:03.030 --> 00:08:06.060
And remember, each project has its own network as well,

189
00:08:06.060 --> 00:08:08.080
so it's a network isolation part of it too.

190
00:08:08.080 --> 00:08:09.060
And then last but not the least,

191
00:08:09.060 --> 00:08:14.030
we looked at how docker-compose.override.yml works,

192
00:08:14.030 --> 00:08:16.040
which allows you to override

193
00:08:16.040 --> 00:08:18.070
the definitions or extend the definition

194
00:08:18.070 --> 00:08:22.000
that are defined in the usual docker-compose.yml file.

