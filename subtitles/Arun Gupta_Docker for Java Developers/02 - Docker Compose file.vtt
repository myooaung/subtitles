WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] Let's take a look at our very first

2
00:00:02.000 --> 00:00:03.080
docker compose file,

3
00:00:03.080 --> 00:00:06.080
and see what does it take to star the services

4
00:00:06.080 --> 00:00:08.040
in that compose file,

5
00:00:08.040 --> 00:00:11.040
and also understand the syntax and the semantics of it.

6
00:00:11.040 --> 00:00:14.020
Now, you know the location for where all the

7
00:00:14.020 --> 00:00:16.010
exercise files are available.

8
00:00:16.010 --> 00:00:20.060
I'm using sample docker compose file from there.

9
00:00:20.060 --> 00:00:22.060
I will copy it here,

10
00:00:22.060 --> 00:00:24.040
and then I will go to my terminal,

11
00:00:24.040 --> 00:00:26.080
and then I will use this file over there.

12
00:00:26.080 --> 00:00:29.020
Now, I'm in my terminal here.

13
00:00:29.020 --> 00:00:31.060
This is my chapter three directory.

14
00:00:31.060 --> 00:00:33.090
I'm going to make helloweb.

15
00:00:33.090 --> 00:00:37.030
Let's get to helloweb first.

16
00:00:37.030 --> 00:00:39.060
And the directory is clean.

17
00:00:39.060 --> 00:00:43.020
I'm going to make docker-compose.yml,

18
00:00:43.020 --> 00:00:46.010
and I will paste the content here.

19
00:00:46.010 --> 00:00:49.010
Let's take a look at it before we do anything over here.

20
00:00:49.010 --> 00:00:52.000
This docker compose file is using version three.

21
00:00:52.000 --> 00:00:55.010
Version three is the latest version of the compose file.

22
00:00:55.010 --> 00:00:57.030
Now, when you're doing this at a later point of time,

23
00:00:57.030 --> 00:00:58.090
the version may be different,

24
00:00:58.090 --> 00:01:00.060
so I would recommend checking that,

25
00:01:00.060 --> 00:01:02.050
but this would work today.

26
00:01:02.050 --> 00:01:04.030
Then I have a services tag,

27
00:01:04.030 --> 00:01:08.030
and services tag, we are saying what services exist.

28
00:01:08.030 --> 00:01:10.060
Each service is given a name,

29
00:01:10.060 --> 00:01:12.050
in our case as well,

30
00:01:12.050 --> 00:01:14.090
a service has to have an image.

31
00:01:14.090 --> 00:01:18.000
In our case, it's jboss/wildfly.

32
00:01:18.000 --> 00:01:20.050
And since I'm running the WildFly Container,

33
00:01:20.050 --> 00:01:22.040
I would like to do some volume mapping,

34
00:01:22.040 --> 00:01:25.050
so I can define multiple volume mapping here.

35
00:01:25.050 --> 00:01:27.020
And in this case, I'm saying

36
00:01:27.020 --> 00:01:31.040
take a deployment directory in my home directory,

37
00:01:31.040 --> 00:01:36.070
and map it to opt/jboss/wildfly/standalone/deployments.

38
00:01:36.070 --> 00:01:38.000
Why would I do that?

39
00:01:38.000 --> 00:01:40.070
The advantage is if I do this directory mapping,

40
00:01:40.070 --> 00:01:42.060
I can drop any war file

41
00:01:42.060 --> 00:01:45.060
into the ~/deployments directory,

42
00:01:45.060 --> 00:01:49.010
and that war file will automatically get deployed.

43
00:01:49.010 --> 00:01:50.070
And last but not the least,

44
00:01:50.070 --> 00:01:52.080
I have my port mapping done here.

45
00:01:52.080 --> 00:01:54.070
Just to recall the syntax,

46
00:01:54.070 --> 00:01:57.030
this is port 8080 on the host,

47
00:01:57.030 --> 00:02:00.020
and this is port 8080 on the container.

48
00:02:00.020 --> 00:02:02.070
Let's save this docker compose file.

49
00:02:02.070 --> 00:02:03.060
One more thing I want to show you

50
00:02:03.060 --> 00:02:06.010
before I fire up the services here.

51
00:02:06.010 --> 00:02:07.050
I'm in my home directory,

52
00:02:07.050 --> 00:02:10.040
and if I look for deployments,

53
00:02:10.040 --> 00:02:12.040
no such file or directory exist.

54
00:02:12.040 --> 00:02:14.080
Just to verify, this is my home directory.

55
00:02:14.080 --> 00:02:16.050
So now, I'm going to go back,

56
00:02:16.050 --> 00:02:18.060
and I'm going to start my services.

57
00:02:18.060 --> 00:02:19.080
How do I start my services?

58
00:02:19.080 --> 00:02:22.020
Well, I say

59
00:02:22.020 --> 00:02:25.010
docker-compose up -d.

60
00:02:25.010 --> 00:02:26.010
And what it means is

61
00:02:26.010 --> 00:02:27.070
bring up all the services

62
00:02:27.070 --> 00:02:29.080
and run them in a detach mode.

63
00:02:29.080 --> 00:02:31.010
It creates a network for me,

64
00:02:31.010 --> 00:02:34.000
for all the services in the compose file.

65
00:02:34.000 --> 00:02:36.090
It downloads any images for me that needs to be done,

66
00:02:36.090 --> 00:02:39.050
just very similar to what docker CLI does.

67
00:02:39.050 --> 00:02:41.050
But instead of trying to remember

68
00:02:41.050 --> 00:02:43.040
the crypted docker CLI command,

69
00:02:43.040 --> 00:02:45.000
now I have put all the commands

70
00:02:45.000 --> 00:02:47.020
in the docker compose file itself.

71
00:02:47.020 --> 00:02:49.050
One single file, one singe command,

72
00:02:49.050 --> 00:02:51.030
and everything comes out for me,

73
00:02:51.030 --> 00:02:52.010
and there you go.

74
00:02:52.010 --> 00:02:55.040
So my app is now up.

75
00:02:55.040 --> 00:02:58.000
I can say docker-compose ps.

76
00:02:58.000 --> 00:03:02.020
It says the service name here, says the command,

77
00:03:02.020 --> 00:03:03.040
state is up,

78
00:03:03.040 --> 00:03:07.080
and then it shows that all network interfaces on local host,

79
00:03:07.080 --> 00:03:11.050
well, all network interfaces on port 8080 on this machine

80
00:03:11.050 --> 00:03:15.080
are mapped to or forwarded to port 8080 in the container.

81
00:03:15.080 --> 00:03:19.040
We can also take a look at the logs of the service,

82
00:03:19.040 --> 00:03:21.050
and I can just specify -f

83
00:03:21.050 --> 00:03:24.000
to say go follow the logs.

84
00:03:24.000 --> 00:03:27.050
And our WildFly is happily started up here.

85
00:03:27.050 --> 00:03:30.080
Now let's go back in my different terminal here.

86
00:03:30.080 --> 00:03:34.010
And what I can do is I can

87
00:03:34.010 --> 00:03:37.090
copy the files form my repo

88
00:03:37.090 --> 00:03:39.000
chapter2,

89
00:03:39.000 --> 00:03:41.080
and if you recall, we had a war file.

90
00:03:41.080 --> 00:03:44.000
I'm going to take that war file,

91
00:03:44.000 --> 00:03:46.040
and I'm going to copy it to the deployments directory.

92
00:03:46.040 --> 00:03:48.040
Oh, by the way, just remember,

93
00:03:48.040 --> 00:03:49.090
this deployments directory is now

94
00:03:49.090 --> 00:03:51.070
automatically created for us

95
00:03:51.070 --> 00:03:52.090
because we did the volume mapping

96
00:03:52.090 --> 00:03:54.060
in our docker compose file.

97
00:03:54.060 --> 00:03:55.070
So that's kind of cool,

98
00:03:55.070 --> 00:03:57.050
and a convenient feature.

99
00:03:57.050 --> 00:04:00.030
Now, I drop the war file in here.

100
00:04:00.030 --> 00:04:03.030
Let's go to my other terminal here.

101
00:04:03.030 --> 00:04:05.060
In a few seconds, well, actually, you just realized that,

102
00:04:05.060 --> 00:04:07.040
"Oh war file is there."

103
00:04:07.040 --> 00:04:10.080
Now you may wonder what is this red statement here.

104
00:04:10.080 --> 00:04:13.070
Sometimes I've seen WildFly is not able to find

105
00:04:13.070 --> 00:04:17.020
the mount point, which is the directory where it exist,

106
00:04:17.020 --> 00:04:19.040
but the deployment goes through successful.

107
00:04:19.040 --> 00:04:21.050
So if you go to the end of this log,

108
00:04:21.050 --> 00:04:25.030
it says war file was deployed successfully.

109
00:04:25.030 --> 00:04:27.040
Now I can go back to my other terminal,

110
00:04:27.040 --> 00:04:30.040
and I can say curl.

111
00:04:30.040 --> 00:04:33.080
Localhost is where I'm going to refer to.

112
00:04:33.080 --> 00:04:35.080
My port is 8080.

113
00:04:35.080 --> 00:04:37.040
Remember, that was forward to the

114
00:04:37.040 --> 00:04:39.050
container port 8080 as well.

115
00:04:39.050 --> 00:04:42.070
My webapp context is webapp

116
00:04:42.070 --> 00:04:43.090
as a resource,

117
00:04:43.090 --> 00:04:45.070
so I'm going to specify resources,

118
00:04:45.070 --> 00:04:48.010
and I'm going to say persons.

119
00:04:48.010 --> 00:04:49.010
And there you go.

120
00:04:49.010 --> 00:04:51.040
So it just shows me an XML result

121
00:04:51.040 --> 00:04:53.000
that has come out of the services,

122
00:04:53.000 --> 00:04:54.090
very easy, very clean.

123
00:04:54.090 --> 00:04:57.000
Now, I've seen my service coming up.

124
00:04:57.000 --> 00:04:59.070
I've been able to access the service with a single command,

125
00:04:59.070 --> 00:05:02.060
what does it take the bring the service down.

126
00:05:02.060 --> 00:05:06.020
I'm going to kill the logs here

127
00:05:06.020 --> 00:05:07.050
to bring the service down.

128
00:05:07.050 --> 00:05:08.090
It's very intuitive.

129
00:05:08.090 --> 00:05:09.090
Well, think about this.

130
00:05:09.090 --> 00:05:12.080
To bring the service up, you're saying docker-compose up.

131
00:05:12.080 --> 00:05:15.090
What do you think would be for bringing the service down?

132
00:05:15.090 --> 00:05:18.030
Docker-compose down.

133
00:05:18.030 --> 00:05:19.080
And the moment we say that,

134
00:05:19.080 --> 00:05:21.090
it not only stops the containers,

135
00:05:21.090 --> 00:05:23.040
removes the containers,

136
00:05:23.040 --> 00:05:26.080
and it also removes the network that was created

137
00:05:26.080 --> 00:05:28.070
so that the services within the network

138
00:05:28.070 --> 00:05:30.010
or within the docker compose file

139
00:05:30.010 --> 00:05:31.070
can communicate with each other.

140
00:05:31.070 --> 00:05:34.090
Now in this case, if I look at my docker compose file,

141
00:05:34.090 --> 00:05:37.020
I just have a single service,

142
00:05:37.020 --> 00:05:39.080
which is, well, I could've had multiple service,

143
00:05:39.080 --> 00:05:42.000
and we'll look at that in a subsequent section.

