WEBVTT
1
00:00:00.040 --> 00:00:02.050
- [Instructor] We have seen how easy it is

2
00:00:02.050 --> 00:00:04.040
to get started with Docker Compose.

3
00:00:04.040 --> 00:00:07.070
Use a simple docker-compose.yml file

4
00:00:07.070 --> 00:00:09.090
and create our application using that.

5
00:00:09.090 --> 00:00:12.060
But in that application we had only one service.

6
00:00:12.060 --> 00:00:14.050
Let's take a look at how can we create

7
00:00:14.050 --> 00:00:17.020
a multi-container application in this case.

8
00:00:17.020 --> 00:00:19.050
And for our use case, what we're going to do is

9
00:00:19.050 --> 00:00:21.050
we're going to use WildFly,

10
00:00:21.050 --> 00:00:23.050
which we used in a previous application

11
00:00:23.050 --> 00:00:25.070
as the main application.

12
00:00:25.070 --> 00:00:28.040
In that WildFly, we have an application to deploy.

13
00:00:28.040 --> 00:00:32.040
That deployed application will be talking to Couchbase,

14
00:00:32.040 --> 00:00:34.070
which is a new SQL document database.

15
00:00:34.070 --> 00:00:36.080
And it'll be storing that data into Couchspace,

16
00:00:36.080 --> 00:00:40.030
reading the data from Couchspace, using N1QL.

17
00:00:40.030 --> 00:00:42.030
N1QL is a Couchbase programming language,

18
00:00:42.030 --> 00:00:45.050
which allows you to run SQL queries on JSON.

19
00:00:45.050 --> 00:00:47.090
So that's a typical business logic we're going to do.

20
00:00:47.090 --> 00:00:52.090
So we're going to do CRUD on Couchbase document using N1QL

21
00:00:52.090 --> 00:00:54.070
from WildFly to Couchbase.

22
00:00:54.070 --> 00:00:57.020
And then because WildFly is our front end,

23
00:00:57.020 --> 00:01:01.030
we're going to expose a REST API that can then be invoked

24
00:01:01.030 --> 00:01:02.070
using cURL.

25
00:01:02.070 --> 00:01:04.020
I know we're using cURL as an example,

26
00:01:04.020 --> 00:01:06.090
but it could very well be any application

27
00:01:06.090 --> 00:01:09.080
that can consume a REST API.

28
00:01:09.080 --> 00:01:12.080
So let's take a look at our Docker Compose file.

29
00:01:12.080 --> 00:01:14.020
Start up the application,

30
00:01:14.020 --> 00:01:17.050
and see how we can manage it.

31
00:01:17.050 --> 00:01:19.070
I'm using the exercise files.

32
00:01:19.070 --> 00:01:22.030
And in this case, I'm looking at section 3.3.

33
00:01:22.030 --> 00:01:23.090
That is my Docker Compose file.

34
00:01:23.090 --> 00:01:25.020
I'm going to copy it here.

35
00:01:25.020 --> 00:01:26.080
I'm back in my terminal.

36
00:01:26.080 --> 00:01:30.010
This is chapter three directory.

37
00:01:30.010 --> 00:01:33.010
And I'm going to make a travel directory here.

38
00:01:33.010 --> 00:01:34.080
And the reason I'm choosing the name travel

39
00:01:34.080 --> 00:01:38.010
is because the database in Couchbase that we're operating

40
00:01:38.010 --> 00:01:40.020
is a travel sample database.

41
00:01:40.020 --> 00:01:43.070
So I'm going into travel directory.

42
00:01:43.070 --> 00:01:49.010
And in here, I'll create a docker-compose.yml file.

43
00:01:49.010 --> 00:01:52.080
I'm going to paste the docker-compose.yml file here.

44
00:01:52.080 --> 00:01:57.060
So let's save the file and take a look at it again.

45
00:01:57.060 --> 00:02:00.070
Now, once again, we're using version three.

46
00:02:00.070 --> 00:02:02.080
We talked about that in the previous section.

47
00:02:02.080 --> 00:02:05.030
This is my top level services element.

48
00:02:05.030 --> 00:02:09.090
In services, there are two services, web and db.

49
00:02:09.090 --> 00:02:12.090
In the web service, essentially, I have a image.

50
00:02:12.090 --> 00:02:17.090
This is a custom image, this arungupta/couchbase-javaee

51
00:02:17.090 --> 00:02:19.080
and I'm giving it a travel tag.

52
00:02:19.080 --> 00:02:24.090
In this image, I'm using a JBoss/WildFLy image

53
00:02:24.090 --> 00:02:28.030
and then packaging a Java EE application.

54
00:02:28.030 --> 00:02:30.020
And that Java EE application

55
00:02:30.020 --> 00:02:34.040
is relying upon a COUCHBASE_URI environment variable.

56
00:02:34.040 --> 00:02:37.050
And in this case, it points to db.

57
00:02:37.050 --> 00:02:40.070
And when I say db, this is a name of the service

58
00:02:40.070 --> 00:02:42.050
which is shown right here.

59
00:02:42.050 --> 00:02:46.080
So the idea is that web service relies upon the db service.

60
00:02:46.080 --> 00:02:49.040
And we don't need to hard code any name.

61
00:02:49.040 --> 00:02:52.050
We're just using the logical name of the service over here.

62
00:02:52.050 --> 00:02:54.080
Well, today, the service might be running

63
00:02:54.080 --> 00:02:57.080
on one particular host, which we'll talk about

64
00:02:57.080 --> 00:02:59.000
in a later section.

65
00:02:59.000 --> 00:03:00.050
Tomorrow it might be running on a different host.

66
00:03:00.050 --> 00:03:02.040
But from your perspective,

67
00:03:02.040 --> 00:03:05.060
you are talking to the service using logical link.

68
00:03:05.060 --> 00:03:07.040
So that's kind of the good part about it.

69
00:03:07.040 --> 00:03:08.080
Now the WildFly service,

70
00:03:08.080 --> 00:03:11.060
or my Couchbase-javaee travel service

71
00:03:11.060 --> 00:03:13.050
exposes standard ports.

72
00:03:13.050 --> 00:03:17.000
It also has a depends-on attribute here.

73
00:03:17.000 --> 00:03:20.030
Now all it says is start the db service

74
00:03:20.030 --> 00:03:21.080
before the web service.

75
00:03:21.080 --> 00:03:24.020
The important part to understand here is

76
00:03:24.020 --> 00:03:26.080
this is only a container level dependency.

77
00:03:26.080 --> 00:03:29.050
What that means is it will only start

78
00:03:29.050 --> 00:03:31.020
the db container before the web container.

79
00:03:31.020 --> 00:03:34.080
What happens in the db container,

80
00:03:34.080 --> 00:03:36.020
and what happens in the web container,

81
00:03:36.020 --> 00:03:38.020
that is up to the application.

82
00:03:38.020 --> 00:03:40.010
And in a second we'll take a look at it

83
00:03:40.010 --> 00:03:42.090
that how the applications need to make sure

84
00:03:42.090 --> 00:03:44.070
that the application is up.

85
00:03:44.070 --> 00:03:48.050
So, for example, the Java EE application in WildFly

86
00:03:48.050 --> 00:03:51.030
needs to make sure that Couchbase server is up

87
00:03:51.030 --> 00:03:53.010
before they can start communicating.

88
00:03:53.010 --> 00:03:56.010
So you need to understand container level up

89
00:03:56.010 --> 00:03:57.080
and application level up.

90
00:03:57.080 --> 00:04:00.050
Application level up is your responsibility.

91
00:04:00.050 --> 00:04:02.080
And now when I'm looking at the db service,

92
00:04:02.080 --> 00:04:05.080
it's, again, using a custom Couchbase image,

93
00:04:05.080 --> 00:04:08.050
arungupta/couchbase :travel,

94
00:04:08.050 --> 00:04:12.000
and this is basically using Couchbase as a base image,

95
00:04:12.000 --> 00:04:15.070
it's using Couchbase REST API to pre-configure the database

96
00:04:15.070 --> 00:04:19.000
and also load the travel sample bucket in there.

97
00:04:19.000 --> 00:04:22.020
And we'll take a look at how these images were created.

98
00:04:22.020 --> 00:04:25.030
And, here, I'm exposing the standard Couchbase ports,

99
00:04:25.030 --> 00:04:28.010
which are the administrative ports, the query ports,

100
00:04:28.010 --> 00:04:30.070
and the memcached ports, which are required

101
00:04:30.070 --> 00:04:34.000
for the application to communicate and connect with it.

102
00:04:34.000 --> 00:04:37.010
So let's take a look at the application first.

103
00:04:37.010 --> 00:04:38.070
Then we will run the application

104
00:04:38.070 --> 00:04:40.040
and see where it goes from there.

105
00:04:40.040 --> 00:04:42.040
I'm in the browser now.

106
00:04:42.040 --> 00:04:43.050
And, here,

107
00:04:43.050 --> 00:04:47.030
you're seeing arun-gupta/couchbase-javaee application.

108
00:04:47.030 --> 00:04:50.040
Now this is the Java EE application that is deployed

109
00:04:50.040 --> 00:04:54.060
in WildFly, and based upon which my Docker image is created.

110
00:04:54.060 --> 00:04:56.040
If I look at the source code for it,

111
00:04:56.040 --> 00:05:00.030
database.java is where my database is initialized.

112
00:05:00.030 --> 00:05:02.060
This is a PostConstruct.

113
00:05:02.060 --> 00:05:04.030
So if you are familiar with Java EE,

114
00:05:04.030 --> 00:05:08.000
this happens right after the constructor has been called

115
00:05:08.000 --> 00:05:10.040
for the application, but the application is ready

116
00:05:10.040 --> 00:05:13.030
for being consumed by the container.

117
00:05:13.030 --> 00:05:16.070
All I'm doing is in that initialization phase,

118
00:05:16.070 --> 00:05:21.020
I'm checking if my travel sample bucket has been created,

119
00:05:21.020 --> 00:05:24.010
and it has a certain number of documents.

120
00:05:24.010 --> 00:05:26.030
So I'm doing a while loop here

121
00:05:26.030 --> 00:05:28.020
and checking every three seconds.

122
00:05:28.020 --> 00:05:31.010
And we'll see this output when we verify the logs.

123
00:05:31.010 --> 00:05:34.090
And then later on, I'm doing some counter-initializations,

124
00:05:34.090 --> 00:05:37.000
because if we want to add a document

125
00:05:37.000 --> 00:05:38.040
to the Couchbase sample bucket,

126
00:05:38.040 --> 00:05:40.020
I should have that capability.

127
00:05:40.020 --> 00:05:43.000
So that all initialization logic,

128
00:05:43.000 --> 00:05:45.060
everything has to be done in the application.

129
00:05:45.060 --> 00:05:47.060
That's not a container responsibility.

130
00:05:47.060 --> 00:05:50.040
Let's take a look at how our Docker images

131
00:05:50.040 --> 00:05:52.000
are created a bit.

132
00:05:52.000 --> 00:05:55.040
I'm in my repo here, arun-gupta/docker-images.

133
00:05:55.040 --> 00:05:57.010
If I look at Couchbase here,

134
00:05:57.010 --> 00:06:00.010
this is how the Docker image is created.

135
00:06:00.010 --> 00:06:01.080
Essentially, it is my Docker file.

136
00:06:01.080 --> 00:06:04.080
And all it says is use the Couchbase latest,

137
00:06:04.080 --> 00:06:07.000
copy the configure node in there.

138
00:06:07.000 --> 00:06:08.080
And use that as my command.

139
00:06:08.080 --> 00:06:11.090
If I look at what configure node does,

140
00:06:11.090 --> 00:06:14.010
as we were saying earlier,

141
00:06:14.010 --> 00:06:17.020
we're just using the Couchbase REST API

142
00:06:17.020 --> 00:06:18.090
to configure the Couchbase server.

143
00:06:18.090 --> 00:06:21.000
And then there is some other business logic

144
00:06:21.000 --> 00:06:22.050
that we'll take a look at later.

145
00:06:22.050 --> 00:06:25.020
But from your perspective, you're getting a Couchbase server

146
00:06:25.020 --> 00:06:26.030
which is pre-configured,

147
00:06:26.030 --> 00:06:29.010
and it has the sample bucket already loaded for you.

148
00:06:29.010 --> 00:06:31.030
Now, in this case, line 21 is commented,

149
00:06:31.030 --> 00:06:34.020
but the travel tags basically makes sure

150
00:06:34.020 --> 00:06:35.070
this line was un-commented.

151
00:06:35.070 --> 00:06:37.030
That's how that image was generated.

152
00:06:37.030 --> 00:06:41.010
So let's go back to our docker-compose file.

153
00:06:41.010 --> 00:06:43.080
And take a look at how can we fire it up.

154
00:06:43.080 --> 00:06:45.080
Now, one more thing we need to see

155
00:06:45.080 --> 00:06:47.030
before we actually do that, though.

156
00:06:47.030 --> 00:06:51.030
This is back in my Couchbase Java EE project.

157
00:06:51.030 --> 00:06:52.070
Here, I'm trying to read

158
00:06:52.070 --> 00:06:55.050
the Couchbase URI environment variable.

159
00:06:55.050 --> 00:06:58.030
This is the same exact environment variable

160
00:06:58.030 --> 00:07:01.020
that was specified in my Docker Compose file.

161
00:07:01.020 --> 00:07:03.070
So your point of contact, or handoff,

162
00:07:03.070 --> 00:07:05.070
is that Couchbase URI environment variable,

163
00:07:05.070 --> 00:07:07.070
which is pointing to the logical service,

164
00:07:07.070 --> 00:07:10.060
which then gets resolved to the internal IP address.

165
00:07:10.060 --> 00:07:13.010
But how it gets resolved, where it gets resolved,

166
00:07:13.010 --> 00:07:15.060
should be completely transparent to you.

167
00:07:15.060 --> 00:07:18.010
So let's go back, fire up our service

168
00:07:18.010 --> 00:07:19.050
and see what happens there.

169
00:07:19.050 --> 00:07:21.050
Now I'm back in my terminal

170
00:07:21.050 --> 00:07:26.020
and let's see how I'm going to start this application.

171
00:07:26.020 --> 00:07:28.060
Again, the command is very simple, docker-compose,

172
00:07:28.060 --> 00:07:31.010
bring up all the services, as part of that

173
00:07:31.010 --> 00:07:34.060
it'll download the services and run them in a detach mode.

174
00:07:34.060 --> 00:07:37.020
So it's creating my default network.

175
00:07:37.020 --> 00:07:39.030
And the reason the default network is created is

176
00:07:39.030 --> 00:07:42.030
this allows the services to talk to each other

177
00:07:42.030 --> 00:07:44.030
within that network itself.

178
00:07:44.030 --> 00:07:46.060
So it's set up for network isolation that you get.

179
00:07:46.060 --> 00:07:48.060
And now it's downloading the images,

180
00:07:48.060 --> 00:07:51.070
and then it's going to run the containers within the service.

181
00:07:51.070 --> 00:07:54.030
This will take a few seconds.

182
00:07:54.030 --> 00:07:57.030
All right, now the images have been downloaded

183
00:07:57.030 --> 00:07:59.000
and the containers have been started,

184
00:07:59.000 --> 00:08:01.010
or rather the container within the services

185
00:08:01.010 --> 00:08:02.000
have been started.

186
00:08:02.000 --> 00:08:04.040
And, as we said, our db service

187
00:08:04.040 --> 00:08:06.040
has started before the web service.

188
00:08:06.040 --> 00:08:07.030
So that's kind of cool.

189
00:08:07.030 --> 00:08:11.010
Let's take a look at the logs.

190
00:08:11.010 --> 00:08:13.010
So you can see these are the logs

191
00:08:13.010 --> 00:08:15.080
that are generated by my Couchbase server.

192
00:08:15.080 --> 00:08:18.020
So if we pause here for a second,

193
00:08:18.020 --> 00:08:21.000
this is all the output that is generated

194
00:08:21.000 --> 00:08:24.030
by the Couchbase server where the REST API is involved.

195
00:08:24.030 --> 00:08:28.000
It configures my Couchbase server using those REST APIs.

196
00:08:28.000 --> 00:08:29.090
If we scroll down here gently,

197
00:08:29.090 --> 00:08:32.080
now here, it's waiting for three seconds

198
00:08:32.080 --> 00:08:35.030
before which it attempts to check,

199
00:08:35.030 --> 00:08:36.090
oh, was the bucket created?

200
00:08:36.090 --> 00:08:39.030
Is the number of documents uploaded?

201
00:08:39.030 --> 00:08:41.060
So here you can see that the number of documents

202
00:08:41.060 --> 00:08:44.030
that have been uploaded is already shown over here.

203
00:08:44.030 --> 00:08:47.030
And now it's making sure that the indexes are created.

204
00:08:47.030 --> 00:08:49.020
And once the indexes are created,

205
00:08:49.020 --> 00:08:52.090
then basically our application is ready to communicate.

206
00:08:52.090 --> 00:08:56.000
And, at this point, in my WildFly you're seeing

207
00:08:56.000 --> 00:08:58.010
that the airlines.war file

208
00:08:58.010 --> 00:09:00.050
was actually successfully deployed.

209
00:09:00.050 --> 00:09:01.060
So that's kind of cool.

210
00:09:01.060 --> 00:09:04.070
Now let's take a look at how can I access this application

211
00:09:04.070 --> 00:09:05.070
from my perspective.

212
00:09:05.070 --> 00:09:07.040
So let's kill the logs here.

213
00:09:07.040 --> 00:09:12.060
I'm going to say curl http://localhost,

214
00:09:12.060 --> 00:09:14.070
because that's where our Docker for Mac is running,

215
00:09:14.070 --> 00:09:18.040
port 8080, that is my port forwarded for WildFly,

216
00:09:18.040 --> 00:09:21.000
airlines is my application context.

217
00:09:21.000 --> 00:09:24.000
This is a REST endpoint, and I'm going to say

218
00:09:24.000 --> 00:09:25.060
show me all the airlines.

219
00:09:25.060 --> 00:09:27.030
I want to emphasize another point

220
00:09:27.030 --> 00:09:29.020
that we have talked about a couple of times

221
00:09:29.020 --> 00:09:30.060
earlier in this course.

222
00:09:30.060 --> 00:09:32.060
If you're using Docker Toolbox

223
00:09:32.060 --> 00:09:35.030
as opposed to Docker for Mac or Docker for Windows,

224
00:09:35.030 --> 00:09:39.050
accessing the URL using localhost will not work for you.

225
00:09:39.050 --> 00:09:43.010
So make sure you get the IP address of your Docker machine,

226
00:09:43.010 --> 00:09:46.070
that can be easily found using docker-machine IP

227
00:09:46.070 --> 00:09:48.010
and the name of the machine,

228
00:09:48.010 --> 00:09:49.090
and that'll give you IP address.

229
00:09:49.090 --> 00:09:53.010
And instead of localhost, use that IP address,

230
00:09:53.010 --> 00:09:55.030
and then the URL will work for you.

231
00:09:55.030 --> 00:09:57.040
And the results come back to me

232
00:09:57.040 --> 00:09:59.030
as a bunch of JSON document.

233
00:09:59.030 --> 00:10:01.000
Now this is not very friendly.

234
00:10:01.000 --> 00:10:04.010
So what we can do is take this URL,

235
00:10:04.010 --> 00:10:08.060
copy it, go to the browser, and view this JSON document

236
00:10:08.060 --> 00:10:09.090
in the browser as well.

237
00:10:09.090 --> 00:10:12.050
We're back in the browser, pull up a new tab here.

238
00:10:12.050 --> 00:10:14.070
And here it shows up.

239
00:10:14.070 --> 00:10:16.060
Now if the browser had a JSON extension,

240
00:10:16.060 --> 00:10:18.060
it would have shown up nicely here anyway.

241
00:10:18.060 --> 00:10:21.060
So now that you have seen how the app looks,

242
00:10:21.060 --> 00:10:23.080
let's go ahead and shut down our application.

243
00:10:23.080 --> 00:10:25.090
So for that, we will go to our terminal

244
00:10:25.090 --> 00:10:28.080
in order to close the app or shut down the app.

245
00:10:28.080 --> 00:10:33.040
We will just give the command, docker-compose down.

246
00:10:33.040 --> 00:10:35.040
And this will bring my services down.

247
00:10:35.040 --> 00:10:38.040
And in this case it's dropping the web service

248
00:10:38.040 --> 00:10:39.060
then the database service,

249
00:10:39.060 --> 00:10:42.030
and eventually it'll delete the network as well.

250
00:10:42.030 --> 00:10:46.010
All right, so the containers are stopped, removed,

251
00:10:46.010 --> 00:10:47.070
and the network is removed as well.

252
00:10:47.070 --> 00:10:51.010
So in this section we saw how we can easily create

253
00:10:51.010 --> 00:10:52.090
multi-container applications.

254
00:10:52.090 --> 00:10:56.040
Well, in our case, we used just a database container

255
00:10:56.040 --> 00:10:58.080
and an application server talking to each other.

256
00:10:58.080 --> 00:11:00.010
But these two containers

257
00:11:00.010 --> 00:11:01.050
were able to collaborate with each other.

258
00:11:01.050 --> 00:11:04.000
So by no means it is restricted

259
00:11:04.000 --> 00:11:05.090
to just two containers, though.

260
00:11:05.090 --> 00:11:08.070
You can have multiple containers defined

261
00:11:08.070 --> 00:11:10.030
in your Docker Compose application.

262
00:11:10.030 --> 00:11:11.090
And then they can work with each other

263
00:11:11.090 --> 00:11:14.020
so that your application is resilient.

264
00:11:14.020 --> 00:11:15.080
And what that means is

265
00:11:15.080 --> 00:11:17.090
if your database host is moved from

266
00:11:17.090 --> 00:11:19.050
one host to another host,

267
00:11:19.050 --> 00:11:21.030
and assigned a different IP address,

268
00:11:21.030 --> 00:11:22.090
but you're still referring to it

269
00:11:22.090 --> 00:11:24.080
from the logical service name.

270
00:11:24.080 --> 00:11:26.040
That's the important aspect of it.

271
00:11:26.040 --> 00:11:29.080
So, once again, you can use docker-compose.yml

272
00:11:29.080 --> 00:11:33.000
to define multi-container applications very easily.

273
00:11:33.000 --> 00:11:35.090
With one single command you can start the services.

274
00:11:35.090 --> 00:11:39.000
And one single command you can bring down the services.

