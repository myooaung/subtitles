WEBVTT
1
00:00:00.030 --> 00:00:01.060
- [Instructor] Let's look at some more

2
00:00:01.060 --> 00:00:05.010
Docker Compose options that'll be useful for you.

3
00:00:05.010 --> 00:00:08.020
The first Docker Compose option that we're going to look at is

4
00:00:08.020 --> 00:00:12.060
how can we use multiple files using -f?

5
00:00:12.060 --> 00:00:15.030
If you say docker compose up -d,

6
00:00:15.030 --> 00:00:19.050
by default, it uses docker-compose.yml as a file name.

7
00:00:19.050 --> 00:00:22.010
If there is docker-compose.override.yml,

8
00:00:22.010 --> 00:00:24.070
then it uses that as well.

9
00:00:24.070 --> 00:00:28.020
Using -f allows you to use multiple files

10
00:00:28.020 --> 00:00:30.020
and we'll see why that is useful.

11
00:00:30.020 --> 00:00:32.030
Then the second option that we're going to look at is

12
00:00:32.030 --> 00:00:34.050
how can you extend the services.

13
00:00:34.050 --> 00:00:37.050
We looked at docker-compose.override.yml

14
00:00:37.050 --> 00:00:39.090
which allows you to extend or

15
00:00:39.090 --> 00:00:43.030
override the services defined in docker-compose.yml,

16
00:00:43.030 --> 00:00:45.090
but there is an extends clause that can be used

17
00:00:45.090 --> 00:00:49.020
to explicitly extend the service from a different

18
00:00:49.020 --> 00:00:51.000
configuration file, so to say.

19
00:00:51.000 --> 00:00:53.020
Let's take a look at these.

20
00:00:53.020 --> 00:00:56.090
What you want to do is you want to use multiple files and

21
00:00:56.090 --> 00:01:01.040
look at how image and ports in those files behave.

22
00:01:01.040 --> 00:01:04.070
This is the docker-compose.yml that we are familiar with.

23
00:01:04.070 --> 00:01:07.030
We used this file in an earlier section.

24
00:01:07.030 --> 00:01:10.010
This file has two services;

25
00:01:10.010 --> 00:01:10.090
web

26
00:01:10.090 --> 00:01:11.080
and db,

27
00:01:11.080 --> 00:01:15.060
and it's using arungupta/couchbase-javaee

28
00:01:15.060 --> 00:01:17.010
travel tag.

29
00:01:17.010 --> 00:01:21.040
Then for the db, it's using arungupta/couchase:travel tag.

30
00:01:21.040 --> 00:01:23.050
These are two services that are started.

31
00:01:23.050 --> 00:01:27.020
The web service runs on port 8080 on host,

32
00:01:27.020 --> 00:01:29.040
redirected to 8080 on the container,

33
00:01:29.040 --> 00:01:33.050
and similarly there is 9990 to 9990 on the container.

34
00:01:33.050 --> 00:01:36.000
For the db, we have 8091,

35
00:01:36.000 --> 00:01:37.020
8092,

36
00:01:37.020 --> 00:01:38.040
and 93,

37
00:01:38.040 --> 00:01:39.090
and 11 to 10

38
00:01:39.090 --> 00:01:42.090
redirected to corresponding ports on the container.

39
00:01:42.090 --> 00:01:44.080
That's sort of the definition here.

40
00:01:44.080 --> 00:01:48.070
Let's take a look at how can we change this a little bit?

41
00:01:48.070 --> 00:01:50.070
Let's say I have

42
00:01:50.070 --> 00:01:52.080
docker-compose.db.yml

43
00:01:52.080 --> 00:01:54.000
here.

44
00:01:54.000 --> 00:01:56.050
In this case, I have a

45
00:01:56.050 --> 00:01:58.090
service web and a service db.

46
00:01:58.090 --> 00:02:01.020
What that means is these two services

47
00:02:01.020 --> 00:02:03.020
are going to override the services

48
00:02:03.020 --> 00:02:05.090
that are defined in the parent service.

49
00:02:05.090 --> 00:02:07.060
While override is a strong word,

50
00:02:07.060 --> 00:02:10.020
but essentially ether extend the service

51
00:02:10.020 --> 00:02:13.060
or override certain aspects of the service.

52
00:02:13.060 --> 00:02:15.060
The first thing we look at is ports.

53
00:02:15.060 --> 00:02:19.020
In this case, the port 8080 on the container is

54
00:02:19.020 --> 00:02:21.090
being redirected from port 80 on the host.

55
00:02:21.090 --> 00:02:24.060
In the previous case, we had 8080 on the host,

56
00:02:24.060 --> 00:02:26.040
going to 8080 on the container.

57
00:02:26.040 --> 00:02:29.040
This allows us to run or access our application

58
00:02:29.040 --> 00:02:31.000
on port 80 instead.

59
00:02:31.000 --> 00:02:35.000
The second part is in db, I'm using the image

60
00:02:35.000 --> 00:02:37.000
called as couchbase:prod.

61
00:02:37.000 --> 00:02:39.060
This may be a fully big of mine

62
00:02:39.060 --> 00:02:41.080
which is ready for going into production

63
00:02:41.080 --> 00:02:44.080
and I can use that image as opposed to

64
00:02:44.080 --> 00:02:46.030
using some test image which is in

65
00:02:46.030 --> 00:02:48.090
arungupta/couchbase domain.

66
00:02:48.090 --> 00:02:51.030
If I use this compose.db

67
00:02:51.030 --> 00:02:54.060
or docker-compose.db.yml file

68
00:02:54.060 --> 00:02:56.080
in addition to docker-compose.yml,

69
00:02:56.080 --> 00:02:59.000
let's see how can I do that.

70
00:02:59.000 --> 00:03:01.050
These are the two big changes.

71
00:03:01.050 --> 00:03:04.040
If I do docker-compose -f,

72
00:03:04.040 --> 00:03:07.020
first of all I need to specify what is my primary file.

73
00:03:07.020 --> 00:03:09.050
In this case, docker-compose.yml

74
00:03:09.050 --> 00:03:13.030
and then I'm saying -f docker-compose.db.yml.

75
00:03:13.030 --> 00:03:16.090
So I'm specifying my compose.yml as the basic file,

76
00:03:16.090 --> 00:03:19.030
and then docker-compose.db.yml.

77
00:03:19.030 --> 00:03:21.040
The order here really matters because

78
00:03:21.040 --> 00:03:23.050
the file that is specified second

79
00:03:23.050 --> 00:03:25.050
is overriding or extending the file

80
00:03:25.050 --> 00:03:27.060
that is specified first.

81
00:03:27.060 --> 00:03:30.050
You can essentially have multiple files specified

82
00:03:30.050 --> 00:03:32.020
and the same rules will apply.

83
00:03:32.020 --> 00:03:34.060
You can run your service like this.

84
00:03:34.060 --> 00:03:37.060
You can see your services exactly using the same command

85
00:03:37.060 --> 00:03:41.000
but instead of using up -d, you will say ps.

86
00:03:41.000 --> 00:03:42.080
Similarly, you will shut down your services

87
00:03:42.080 --> 00:03:44.020
using the same command.

88
00:03:44.020 --> 00:03:46.080
Basically using the same -f switches

89
00:03:46.080 --> 00:03:48.030
and then just say down.

90
00:03:48.030 --> 00:03:50.050
That's kind of cool part about it.

91
00:03:50.050 --> 00:03:53.000
Let's see how we can use multiple files

92
00:03:53.000 --> 00:03:55.040
in the extends clause.

93
00:03:55.040 --> 00:03:58.040
Let's assume we have a configuration.yml

94
00:03:58.040 --> 00:04:02.020
in the same directory where my docker-compose.yml file is.

95
00:04:02.020 --> 00:04:04.060
In configuration.yml for example,

96
00:04:04.060 --> 00:04:07.040
I have environment variables defined.

97
00:04:07.040 --> 00:04:10.040
Let's say my AWS_ACCESS_KEY and SECRET_KEY.

98
00:04:10.040 --> 00:04:12.000
Those are defined over there.

99
00:04:12.000 --> 00:04:14.050
Those typically you want to define once.

100
00:04:14.050 --> 00:04:16.080
You really want to follow the whole principle of DRY.

101
00:04:16.080 --> 00:04:18.090
You don't want to repeat those configuration information

102
00:04:18.090 --> 00:04:22.060
multiple times in docker-compose.yml,

103
00:04:22.060 --> 00:04:25.070
then what you're doing is you're using in the web service

104
00:04:25.070 --> 00:04:27.050
the extends clause.

105
00:04:27.050 --> 00:04:30.050
In the extends clause, you say file.

106
00:04:30.050 --> 00:04:33.000
You're saying configuration.yml

107
00:04:33.000 --> 00:04:35.040
essentially pointing to configuration.yml

108
00:04:35.040 --> 00:04:37.000
in the same directory.

109
00:04:37.000 --> 00:04:40.020
And you're saying, point to the service config

110
00:04:40.020 --> 00:04:42.050
in configuration.yml.

111
00:04:42.050 --> 00:04:44.060
It is pretty granular in that sense

112
00:04:44.060 --> 00:04:46.070
that you can point to a file

113
00:04:46.070 --> 00:04:49.070
and then you can point to a service within the file.

114
00:04:49.070 --> 00:04:52.050
The path of the file configuration.yml

115
00:04:52.050 --> 00:04:56.070
is resolved relative to docker-compose.yml essentially.

116
00:04:56.070 --> 00:04:59.000
Then, you keep going on with your image,

117
00:04:59.000 --> 00:05:02.040
with your volumes, with your ports, all of those.

118
00:05:02.040 --> 00:05:03.090
When you fire up your service,

119
00:05:03.090 --> 00:05:06.070
you can say docker-compose up -d

120
00:05:06.070 --> 00:05:08.070
but in addition, if you want to see

121
00:05:08.070 --> 00:05:10.040
where our files are being loaded,

122
00:05:10.040 --> 00:05:13.020
you can actually use a --verbose switch

123
00:05:13.020 --> 00:05:16.020
and it will show you what options are being used,

124
00:05:16.020 --> 00:05:18.010
what files are being used,

125
00:05:18.010 --> 00:05:20.000
in which order they have been used,

126
00:05:20.000 --> 00:05:23.020
and what the definition it looks like.

127
00:05:23.020 --> 00:05:26.030
We looked at several Docker Compose options.

128
00:05:26.030 --> 00:05:28.040
Let's see how those options are used

129
00:05:28.040 --> 00:05:30.080
to fulfill some common use cases.

130
00:05:30.080 --> 00:05:34.040
The first use case is how you can easily do a dev setup.

131
00:05:34.040 --> 00:05:36.060
Imagine a new developer joining your team

132
00:05:36.060 --> 00:05:40.040
and you can't ask them to say install a JDK,

133
00:05:40.040 --> 00:05:43.060
install a WildFly server, install these libraries,

134
00:05:43.060 --> 00:05:46.050
do this Maven pull, do this checkout.

135
00:05:46.050 --> 00:05:49.010
Instead of doing all of that setup, you can say,

136
00:05:49.010 --> 00:05:51.030
here is my docker-compose.yml,

137
00:05:51.030 --> 00:05:53.080
bring up, and your container's alive,

138
00:05:53.080 --> 00:05:55.080
and your application is fully functional.

139
00:05:55.080 --> 00:06:00.000
No downloading, installing, all of that.

140
00:06:00.000 --> 00:06:02.010
One of the options in Docker Compose is

141
00:06:02.010 --> 00:06:06.030
you can point it either to a host or to a cluster of host.

142
00:06:06.030 --> 00:06:08.040
That can be very easily manipulated

143
00:06:08.040 --> 00:06:10.090
using these environment variables.

144
00:06:10.090 --> 00:06:12.070
These environment variables are useful

145
00:06:12.070 --> 00:06:16.050
only when you're talking using say Docker Machine.

146
00:06:16.050 --> 00:06:18.030
There are better ways when we are deploying

147
00:06:18.030 --> 00:06:21.090
Docker Compose applications to a swarm mode cluster

148
00:06:21.090 --> 00:06:23.080
and we'll take a look at that.

149
00:06:23.080 --> 00:06:25.090
Docker Compose is fully integrated

150
00:06:25.090 --> 00:06:28.000
whether you want to deploy it to a single host

151
00:06:28.000 --> 00:06:29.080
which is what we have been doing so far

152
00:06:29.080 --> 00:06:31.050
or multiple host

153
00:06:31.050 --> 00:06:34.000
because it is fully integrated with swarm mode.

154
00:06:34.000 --> 00:06:35.090
We'll see that pretty soon.

155
00:06:35.090 --> 00:06:37.090
We already looked at how we can create

156
00:06:37.090 --> 00:06:41.060
multiple isolated environments using -p option.

157
00:06:41.060 --> 00:06:44.010
You can do a fully automated test setup.

158
00:06:44.010 --> 00:06:46.010
You can just say docker-compose up,

159
00:06:46.010 --> 00:06:47.060
your application comes up,

160
00:06:47.060 --> 00:06:49.030
then you can say mvn test

161
00:06:49.030 --> 00:06:51.030
and then you can bring the setup down.

162
00:06:51.030 --> 00:06:52.060
That's pretty clean.

163
00:06:52.060 --> 00:06:53.080
You don't even have to have Maven

164
00:06:53.080 --> 00:06:55.020
installed in your local file

165
00:06:55.020 --> 00:06:58.020
because Maven by itself is an image.

166
00:06:58.020 --> 00:07:02.050
So you can use that Maven image and then run the test.

167
00:07:02.050 --> 00:07:03.090
Last but not the least,

168
00:07:03.090 --> 00:07:07.060
you could have minimized impedance mismatch between your

169
00:07:07.060 --> 00:07:09.080
development and production environment.

170
00:07:09.080 --> 00:07:11.040
In this case, for example,

171
00:07:11.040 --> 00:07:14.000
you may bring up your development environment using

172
00:07:14.000 --> 00:07:16.010
just docker-compose.yml

173
00:07:16.010 --> 00:07:19.090
and in addition, you might have a production.yml

174
00:07:19.090 --> 00:07:22.060
which would have production-specific settings

175
00:07:22.060 --> 00:07:26.000
and depending upon how you are using -f options,

176
00:07:26.000 --> 00:07:28.060
you can either run a development option

177
00:07:28.060 --> 00:07:30.050
or a production environment.

178
00:07:30.050 --> 00:07:32.090
That is completely up to you.

179
00:07:32.090 --> 00:07:36.040
In this section, we saw some more Docker Compose options

180
00:07:36.040 --> 00:07:39.000
and how those options can be used

181
00:07:39.000 --> 00:07:41.000
to have some common use cases.

