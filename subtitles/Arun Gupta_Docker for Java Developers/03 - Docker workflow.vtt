WEBVTT
1
00:00:00.040 --> 00:00:02.070
- Alright, now we have understood the basic concepts

2
00:00:02.070 --> 00:00:05.040
of Docker, but what would your day-to-day

3
00:00:05.040 --> 00:00:07.050
Docker workflow look like?

4
00:00:07.050 --> 00:00:09.030
What tools would you interact with?

5
00:00:09.030 --> 00:00:11.000
How would you create this image?

6
00:00:11.000 --> 00:00:12.060
How would you run this container?

7
00:00:12.060 --> 00:00:14.060
What configurations need to be done?

8
00:00:14.060 --> 00:00:16.020
Let's take a look at that.

9
00:00:16.020 --> 00:00:18.050
So, in one slide, if I were to explain this,

10
00:00:18.050 --> 00:00:20.030
these are some of the key components

11
00:00:20.030 --> 00:00:22.060
that you would interact on a regular basis.

12
00:00:22.060 --> 00:00:24.090
Let's try to understand this image first of all.

13
00:00:24.090 --> 00:00:26.090
Well, it's got three big blue boxes.

14
00:00:26.090 --> 00:00:29.010
On the left what you see is Docker "Client",

15
00:00:29.010 --> 00:00:31.000
also called Docker "CLI".

16
00:00:31.000 --> 00:00:33.090
In the middle what you see is a Docker "Host"

17
00:00:33.090 --> 00:00:36.030
or a Docker "Engine", those terminologies are

18
00:00:36.030 --> 00:00:38.050
typically interchangeable, and in the far right

19
00:00:38.050 --> 00:00:40.060
is what you call a "Registry".

20
00:00:40.060 --> 00:00:44.060
Now, lets go back to our build, ship and run concept here.

21
00:00:44.060 --> 00:00:48.010
Okay, so the "build" part as we said is an image.

22
00:00:48.010 --> 00:00:50.000
"ship" is a registry, and a registry

23
00:00:50.000 --> 00:00:51.050
is sitting on the right.

24
00:00:51.050 --> 00:00:52.090
And "run" is a container.

25
00:00:52.090 --> 00:00:56.010
So, as you can see, the images and the containers

26
00:00:56.010 --> 00:00:58.030
are sitting on the Docker host over here.

27
00:00:58.030 --> 00:01:00.080
Okay, let's try to understand how our overall workflow

28
00:01:00.080 --> 00:01:02.010
is going to look now.

29
00:01:02.010 --> 00:01:03.080
So, first of all Docker client.

30
00:01:03.080 --> 00:01:07.020
We'll talk a out how Docker client can be installed,

31
00:01:07.020 --> 00:01:09.080
but lets say you have the Docker client on your machine,

32
00:01:09.080 --> 00:01:13.000
then the Docker client is configured to talk to

33
00:01:13.000 --> 00:01:14.040
a Docker host.

34
00:01:14.040 --> 00:01:15.070
It could be a single docker host,

35
00:01:15.070 --> 00:01:17.030
or it could be a cluster of Docker hosts.

36
00:01:17.030 --> 00:01:18.080
In later chapters we'll talk about

37
00:01:18.080 --> 00:01:20.090
how we set up a cluster of Docker hosts,

38
00:01:20.090 --> 00:01:22.060
but the important part to understand is

39
00:01:22.060 --> 00:01:25.010
client is a "dumb client".

40
00:01:25.010 --> 00:01:26.050
It's a stateless client.

41
00:01:26.050 --> 00:01:28.060
There is no state on the client at all.

42
00:01:28.060 --> 00:01:31.030
The client says "I want to run a container",

43
00:01:31.030 --> 00:01:33.030
which is a Docker run command.

44
00:01:33.030 --> 00:01:36.000
Now, the client is configured to talk to Docker_Host

45
00:01:36.000 --> 00:01:38.020
it gives the command to Docker_Host,

46
00:01:38.020 --> 00:01:40.070
on Docker_Host there is a Docker daemon running,

47
00:01:40.070 --> 00:01:42.060
which is listening for that command.

48
00:01:42.060 --> 00:01:44.050
The client gives the command "docker run",

49
00:01:44.050 --> 00:01:46.060
but if you have to look under the hood,

50
00:01:46.060 --> 00:01:48.080
it is basically a REST API call,

51
00:01:48.080 --> 00:01:50.010
which goes as a REST API

52
00:01:50.010 --> 00:01:53.020
and Docker daemon is listening on a specific port

53
00:01:53.020 --> 00:01:54.030
for that REST request.

54
00:01:54.030 --> 00:01:56.010
It understands that request.

55
00:01:56.010 --> 00:01:58.030
So, the client said "docker run", okay?

56
00:01:58.030 --> 00:02:01.030
Docker says, "In order to run a container

57
00:02:01.030 --> 00:02:03.000
I need to have the image".

58
00:02:03.000 --> 00:02:05.070
By default Docker daemon, or Docker_Host

59
00:02:05.070 --> 00:02:08.000
is configured to talk to a registry,

60
00:02:08.000 --> 00:02:11.090
which is Docker hub, which is hub.docker.com.

61
00:02:11.090 --> 00:02:13.070
So it queries the registry,

62
00:02:13.070 --> 00:02:15.040
says, "Hey do you have this image?

63
00:02:15.040 --> 00:02:17.040
Because I need to run this container".

64
00:02:17.040 --> 00:02:20.010
Lets say you want to run a simple Nginx container

65
00:02:20.010 --> 00:02:21.090
or a simple Couchbase container,

66
00:02:21.090 --> 00:02:23.050
or an Ubuntu container.

67
00:02:23.050 --> 00:02:25.030
So it queries the registry.

68
00:02:25.030 --> 00:02:27.050
Registry has, well first of all,

69
00:02:27.050 --> 00:02:31.050
registry is where anybody can publish a Docker image.

70
00:02:31.050 --> 00:02:34.000
So typically if it's an N ginx container

71
00:02:34.000 --> 00:02:35.090
it is published by the entity behind it.

72
00:02:35.090 --> 00:02:38.000
For example for Couchbase,

73
00:02:38.000 --> 00:02:39.070
Couchbase has an image on Docker hub.

74
00:02:39.070 --> 00:02:41.070
So anybody and everybody can push an image

75
00:02:41.070 --> 00:02:43.050
on the public Docker hub.

76
00:02:43.050 --> 00:02:45.040
So now, Docker_Host is saying,

77
00:02:45.040 --> 00:02:47.000
"I want to download an image".

78
00:02:47.000 --> 00:02:50.020
It downloads the image on the Docker_Host.

79
00:02:50.020 --> 00:02:52.070
Remember we said Client is stateless?

80
00:02:52.070 --> 00:02:55.070
The state is maintained on Docker_Host.

81
00:02:55.070 --> 00:02:58.060
You can download as many images on Docker_Host

82
00:02:58.060 --> 00:02:59.090
via the client.

83
00:02:59.090 --> 00:03:01.010
The client gives a command,

84
00:03:01.010 --> 00:03:03.010
the image is stored on the Docker host.

85
00:03:03.010 --> 00:03:04.050
Now, once you have the host

86
00:03:04.050 --> 00:03:06.030
and you want to run the container.

87
00:03:06.030 --> 00:03:07.090
Sure, the image is downloaded once,

88
00:03:07.090 --> 00:03:11.020
but you can run as many instances of the container.

89
00:03:11.020 --> 00:03:12.090
So lets think about the flow once again.

90
00:03:12.090 --> 00:03:14.010
The client makes a request,

91
00:03:14.010 --> 00:03:17.080
docker run, a container, goes to Docker_Host.

92
00:03:17.080 --> 00:03:19.090
Docker_Host says, "I don't have the image.

93
00:03:19.090 --> 00:03:22.000
If I have the image I will run the container.

94
00:03:22.000 --> 00:03:24.090
If I don't have the image I will download the image

95
00:03:24.090 --> 00:03:27.050
from the Docker hub, and once the image is downloaded

96
00:03:27.050 --> 00:03:28.070
I will run the container.

97
00:03:28.070 --> 00:03:31.030
All this happens behind the scenes.

98
00:03:31.030 --> 00:03:33.060
You don't need to worry about it, but sometimes

99
00:03:33.060 --> 00:03:35.070
understand if we look under the hood

100
00:03:35.070 --> 00:03:37.090
on what's happening and what's going on.

101
00:03:37.090 --> 00:03:39.040
Now there are lots of varieties and flavors

102
00:03:39.040 --> 00:03:40.070
that we can do to this.

103
00:03:40.070 --> 00:03:43.050
As we said, the first flavor is "I don't want to have

104
00:03:43.050 --> 00:03:44.070
a single Docker host,

105
00:03:44.070 --> 00:03:46.070
because that's a single point of failure for me".

106
00:03:46.070 --> 00:03:48.060
So I can have a cluster of Docker hosts,

107
00:03:48.060 --> 00:03:50.070
and later in this course we will look at

108
00:03:50.070 --> 00:03:53.010
"How can we have a cluster of Docker hosts?"

109
00:03:53.010 --> 00:03:55.040
Now, the second flavor is where you can say,

110
00:03:55.040 --> 00:03:58.000
"I don't want to have, I'm not creating images

111
00:03:58.000 --> 00:04:00.090
that should not be available on the public Docker hub.

112
00:04:00.090 --> 00:04:02.090
I want to have an internal registry".

113
00:04:02.090 --> 00:04:04.090
So, Docker gives you this commercial product

114
00:04:04.090 --> 00:04:06.090
called "Docker Trusted Registry"

115
00:04:06.090 --> 00:04:08.030
or there is an open source project

116
00:04:08.030 --> 00:04:09.090
that you can deploy internally,

117
00:04:09.090 --> 00:04:11.090
and similarly there are registries by other companies

118
00:04:11.090 --> 00:04:15.080
like JFrog, which you can deploy inside your firewall.

119
00:04:15.080 --> 00:04:18.070
So, that's another variation that's possible.

120
00:04:18.070 --> 00:04:20.060
In your typical day-to-day workflow

121
00:04:20.060 --> 00:04:21.080
that is your typical model,

122
00:04:21.080 --> 00:04:23.040
where the client makes a request to the host,

123
00:04:23.040 --> 00:04:25.070
which downloads an image from the registry,

124
00:04:25.070 --> 00:04:27.000
and runs the container.

