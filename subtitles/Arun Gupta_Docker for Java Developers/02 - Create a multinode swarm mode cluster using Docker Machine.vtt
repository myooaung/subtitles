WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Instructor] Single-node Docker swarm mode cluster

2
00:00:02.080 --> 00:00:05.080
still has the problem of single point of failure.

3
00:00:05.080 --> 00:00:08.060
Even if we deploy a multi-container application on it,

4
00:00:08.060 --> 00:00:11.060
it's still going to fail if the node goes down.

5
00:00:11.060 --> 00:00:13.020
Let's take a look at how can I create

6
00:00:13.020 --> 00:00:17.020
a multi-node swarm mode cluster using Docker Machine.

7
00:00:17.020 --> 00:00:18.090
If you remember, we talked about Docker Machine

8
00:00:18.090 --> 00:00:20.030
in the very first chapter

9
00:00:20.030 --> 00:00:22.030
where it was a way by which we can create

10
00:00:22.030 --> 00:00:25.060
multiple Docker Engines on my host itself.

11
00:00:25.060 --> 00:00:29.020
We saw how easy it is to initialize swarm mode.

12
00:00:29.020 --> 00:00:31.020
So we say docker swarm init

13
00:00:31.020 --> 00:00:33.080
and in case I want to specify a listen address

14
00:00:33.080 --> 00:00:36.000
that this is where I'm going to be listening for request

15
00:00:36.000 --> 00:00:38.090
for other managers or workers to join me.

16
00:00:38.090 --> 00:00:41.000
I can specify an IP address.

17
00:00:41.000 --> 00:00:42.030
Typically your machine

18
00:00:42.030 --> 00:00:44.070
would be running multiple network interfaces.

19
00:00:44.070 --> 00:00:47.030
You could specify the IP address on which

20
00:00:47.030 --> 00:00:50.000
you want to accept those requests.

21
00:00:50.000 --> 00:00:52.030
When you are creating a worker,

22
00:00:52.030 --> 00:00:54.000
let's say you have a new Docker Machine,

23
00:00:54.000 --> 00:00:57.090
you can make that worker machine join the manager

24
00:00:57.090 --> 00:01:00.060
and from the manager, you have to obtain

25
00:01:00.060 --> 00:01:03.030
either a worker token or a manager token

26
00:01:03.030 --> 00:01:05.070
depending upon what you obtain and what you get.

27
00:01:05.070 --> 00:01:07.020
That's the token that you use

28
00:01:07.020 --> 00:01:09.090
to make that worker machine, shown in orange,

29
00:01:09.090 --> 00:01:12.040
join the manager, shown in yellow.

30
00:01:12.040 --> 00:01:15.070
Similarly, you can have multiple workers join the cluster.

31
00:01:15.070 --> 00:01:17.060
So in this case for example I have

32
00:01:17.060 --> 00:01:20.000
one manager right in the middle, which is yellow,

33
00:01:20.000 --> 00:01:22.020
and five workers other than the yellow

34
00:01:22.020 --> 00:01:24.050
on the far extremes.

35
00:01:24.050 --> 00:01:28.040
I can also have a secondary manager join the cluster.

36
00:01:28.040 --> 00:01:31.030
So there is a primary and a secondary.

37
00:01:31.030 --> 00:01:34.030
If the request goes to secondary,

38
00:01:34.030 --> 00:01:36.070
it is automatically proxied to the primary

39
00:01:36.070 --> 00:01:39.020
and primary is the one that is actually serving

40
00:01:39.020 --> 00:01:41.060
the request itself.

41
00:01:41.060 --> 00:01:43.090
Let's take a look at how can we create this cluster

42
00:01:43.090 --> 00:01:46.070
very easily on our machine.

43
00:01:46.070 --> 00:01:49.030
In my terminal, I have this script,

44
00:01:49.030 --> 00:01:51.090
called as swarm-machines.

45
00:01:51.090 --> 00:01:53.040
Before we look at the script,

46
00:01:53.040 --> 00:01:55.090
we are into the chapter4 directory.

47
00:01:55.090 --> 00:01:58.050
Now, let's look at the script here.

48
00:01:58.050 --> 00:02:04.000
Here, I'm saying three managers and three workers.

49
00:02:04.000 --> 00:02:06.060
Then I'm running a for loop.

50
00:02:06.060 --> 00:02:07.090
I'm saying

51
00:02:07.090 --> 00:02:10.020
docker-machine create

52
00:02:10.020 --> 00:02:13.000
using virtualbox manager

53
00:02:13.000 --> 00:02:15.000
one, two, and three.

54
00:02:15.000 --> 00:02:17.000
So I'll have three managers here.

55
00:02:17.000 --> 00:02:21.000
Similarly, I will have three worker machines.

56
00:02:21.000 --> 00:02:23.000
Essentially if I say

57
00:02:23.000 --> 00:02:25.010
docker-machine ls,

58
00:02:25.010 --> 00:02:28.050
it'll show me that the six machines have been created.

59
00:02:28.050 --> 00:02:31.040
The different Docker Machines used in this video

60
00:02:31.040 --> 00:02:32.090
have been precreated.

61
00:02:32.090 --> 00:02:36.030
You can use the swarm-machines shell script

62
00:02:36.030 --> 00:02:37.070
and precreate the video

63
00:02:37.070 --> 00:02:40.030
and that is not shown in this video.

64
00:02:40.030 --> 00:02:42.080
Just to see a full view of the output,

65
00:02:42.080 --> 00:02:44.030
let's zoom out a little bit

66
00:02:44.030 --> 00:02:46.070
so you can see manager1, 2, 3,

67
00:02:46.070 --> 00:02:48.020
worker1, 2, 3.

68
00:02:48.020 --> 00:02:49.030
All of them are running

69
00:02:49.030 --> 00:02:51.090
and each of them is assigned an IP address,

70
00:02:51.090 --> 00:02:55.050
and they're all running Docker version 1.13.1.

71
00:02:55.050 --> 00:02:57.040
The output may be a little bit different

72
00:02:57.040 --> 00:02:59.050
if you're running it a later point of time

73
00:02:59.050 --> 00:03:01.080
and a different version of Docker is available

74
00:03:01.080 --> 00:03:03.060
at that point of time.

75
00:03:03.060 --> 00:03:05.090
Let's zoom back in.

76
00:03:05.090 --> 00:03:08.020
In the same directory,

77
00:03:08.020 --> 00:03:11.050
there is a readme.adoc as well.

78
00:03:11.050 --> 00:03:13.050
I'm going to copy the instructions from there

79
00:03:13.050 --> 00:03:17.030
to create a cluster of these six Docker Machines.

80
00:03:17.030 --> 00:03:22.010
The first thing I'm going to do is let me copy this command

81
00:03:22.010 --> 00:03:25.000
and I will go to my terminal

82
00:03:25.000 --> 00:03:27.090
and paste this command here.

83
00:03:27.090 --> 00:03:29.040
Let's see what we're doing here.

84
00:03:29.040 --> 00:03:33.070
We're saying docker-machine ssh to manager1

85
00:03:33.070 --> 00:03:35.030
and I'm not really SSHing,

86
00:03:35.030 --> 00:03:37.010
but I'm just giving a command to it

87
00:03:37.010 --> 00:03:40.090
and in the command I'm saying, docker swarm init.

88
00:03:40.090 --> 00:03:43.000
I'm initializing a swarm mode cluster.

89
00:03:43.000 --> 00:03:45.090
I'm saying the IP address where I'm going to listen is

90
00:03:45.090 --> 00:03:48.050
the Docker Machine IP of manager1

91
00:03:48.050 --> 00:03:51.030
because this is the manager host or the manager node

92
00:03:51.030 --> 00:03:53.020
where I want to listen.

93
00:03:53.020 --> 00:03:55.020
Then I also advertise the address

94
00:03:55.020 --> 00:03:58.020
that this is where I'm going to be receiving the request.

95
00:03:58.020 --> 00:04:00.020
If we press enter here,

96
00:04:00.020 --> 00:04:03.020
it's going to start manager node

97
00:04:03.020 --> 00:04:05.080
on the manager1 Docker Machine.

98
00:04:05.080 --> 00:04:08.030
It gave me similar output over here.

99
00:04:08.030 --> 00:04:10.050
Let's go back to our script.

100
00:04:10.050 --> 00:04:13.020
If we take a look at all the

101
00:04:13.020 --> 00:04:15.060
nodes in the cluster,

102
00:04:15.060 --> 00:04:18.040
we can do it this way.

103
00:04:18.040 --> 00:04:21.000
I can say ssh to manager1

104
00:04:21.000 --> 00:04:24.000
and show me all the nodes in the cluster.

105
00:04:24.000 --> 00:04:26.070
It says, okay, this is the manager ID.

106
00:04:26.070 --> 00:04:28.080
This is the host name, status is ready,

107
00:04:28.080 --> 00:04:30.030
availability is active,

108
00:04:30.030 --> 00:04:32.000
and the manager status is leader.

109
00:04:32.000 --> 00:04:33.050
That's cool.

110
00:04:33.050 --> 00:04:36.090
Let's add some workers and managers to it.

111
00:04:36.090 --> 00:04:38.030
I'm going to copy this command here

112
00:04:38.030 --> 00:04:41.000
to get me the manager token.

113
00:04:41.000 --> 00:04:44.090
Back in my terminal, if I give this command,

114
00:04:44.090 --> 00:04:48.000
here is my manager token that I need to use.

115
00:04:48.000 --> 00:04:50.040
All I'm saying is docker swarm

116
00:04:50.040 --> 00:04:51.060
join-token,

117
00:04:51.060 --> 00:04:52.090
give me the manager ID.

118
00:04:52.090 --> 00:04:54.060
I'm just saying give it to me quietly,

119
00:04:54.060 --> 00:04:57.030
that is only the manager token and know their output.

120
00:04:57.030 --> 00:05:02.030
I can do the same command for worker as well.

121
00:05:02.030 --> 00:05:05.040
I get the worker token ID.

122
00:05:05.040 --> 00:05:10.010
Let's go back to our script, I'm going to copy this command.

123
00:05:10.010 --> 00:05:13.080
Back in my terminal, paste this command here.

124
00:05:13.080 --> 00:05:17.060
Now, I'm giving this command to manager2

125
00:05:17.060 --> 00:05:19.080
and I'm saying docker swarm join.

126
00:05:19.080 --> 00:05:22.070
This is not an init because I'm not joining a cluster.

127
00:05:22.070 --> 00:05:25.030
I'm saying the value of the token comes from

128
00:05:25.030 --> 00:05:27.060
docker-machine ssh manager1

129
00:05:27.060 --> 00:05:30.000
docker swarm join-token manager2,

130
00:05:30.000 --> 00:05:32.020
which is the same command that we gave earlier.

131
00:05:32.020 --> 00:05:35.020
Now, the listen address and advertiser address

132
00:05:35.020 --> 00:05:37.060
are of course of going to be of manager2.

133
00:05:37.060 --> 00:05:41.040
However, I need to also give the host IP

134
00:05:41.040 --> 00:05:45.010
of the node where Docker manager is listening.

135
00:05:45.010 --> 00:05:47.000
In which case, this is manager1.

136
00:05:47.000 --> 00:05:49.030
So if I give this command here,

137
00:05:49.030 --> 00:05:53.090
now essentially, this node joined the swarm as a manager.

138
00:05:53.090 --> 00:05:56.030
How do we verify that?

139
00:05:56.030 --> 00:05:59.020
Let's give our docker node ls command again,

140
00:05:59.020 --> 00:06:03.010
and now you can say manager1 is the leader,

141
00:06:03.010 --> 00:06:07.070
manager2 is active and is reachable.

142
00:06:07.070 --> 00:06:10.060
We can give the same command for manager3 as well,

143
00:06:10.060 --> 00:06:15.060
and let's copy the script for that.

144
00:06:15.060 --> 00:06:17.040
Paste the command here.

145
00:06:17.040 --> 00:06:20.090
Once again, now I'm giving the command to manager3.

146
00:06:20.090 --> 00:06:24.010
The manager token still needs to be obtained from manager1.

147
00:06:24.010 --> 00:06:25.090
I could have given it to manager2

148
00:06:25.090 --> 00:06:27.040
and it would have proxied to manager1,

149
00:06:27.040 --> 00:06:29.040
but just keep the command consistent.

150
00:06:29.040 --> 00:06:31.030
The listen and the advertise address

151
00:06:31.030 --> 00:06:33.070
are still IP manager3

152
00:06:33.070 --> 00:06:35.020
in both cases

153
00:06:35.020 --> 00:06:38.030
and the original request has to be made to manager1

154
00:06:38.030 --> 00:06:41.040
because that's my original leader.

155
00:06:41.040 --> 00:06:44.050
This node joined this swarm as a manager as well.

156
00:06:44.050 --> 00:06:46.030
Let's verify it.

157
00:06:46.030 --> 00:06:49.000
You can see there are three managers in the cluster.

158
00:06:49.000 --> 00:06:51.080
One is the leader and the other two are reachable.

159
00:06:51.080 --> 00:06:54.030
Let's add the rest of the worker nodes

160
00:06:54.030 --> 00:06:55.080
to this cluster as well.

161
00:06:55.080 --> 00:07:01.060
Let's go to our script and copy the commands.

162
00:07:01.060 --> 00:07:03.080
Let's paste the command here.

163
00:07:03.080 --> 00:07:04.060
What is different here?

164
00:07:04.060 --> 00:07:08.050
First of all, I'm saying docker-machine ssh worker1.

165
00:07:08.050 --> 00:07:10.040
Then I'm saying docker swarm join

166
00:07:10.040 --> 00:07:13.090
and the token that I'm passing is

167
00:07:13.090 --> 00:07:16.090
the join token worker now, not the manager.

168
00:07:16.090 --> 00:07:17.070
The worker needs to have

169
00:07:17.070 --> 00:07:19.060
a listen and an advertise address as well

170
00:07:19.060 --> 00:07:22.050
in case it gets promoted to worker at a given point of time

171
00:07:22.050 --> 00:07:26.000
and the request is still made to manager1.

172
00:07:26.000 --> 00:07:28.030
Run this command, and now you see the output

173
00:07:28.030 --> 00:07:32.040
that this node joined a swarm as a worker.

174
00:07:32.040 --> 00:07:35.070
We can also edit the commands here.

175
00:07:35.070 --> 00:07:38.080
We can say this is worker2.

176
00:07:38.080 --> 00:07:40.070
This is worker2.

177
00:07:40.070 --> 00:07:44.040
We still have to receive the tokens from manager1

178
00:07:44.040 --> 00:07:47.050
and this is worker2.

179
00:07:47.050 --> 00:07:50.040
This node joined a swarm as a worker as well.

180
00:07:50.040 --> 00:07:54.090
Let's do that for worker3 as well,

181
00:07:54.090 --> 00:07:58.020
worker3,

182
00:07:58.020 --> 00:08:00.050
worker3,

183
00:08:00.050 --> 00:08:03.040
and then we want to give this command to worker3,

184
00:08:03.040 --> 00:08:07.020
so worker3.

185
00:08:07.020 --> 00:08:09.050
This node joined a swarm as a worker.

186
00:08:09.050 --> 00:08:14.020
Let's take a look at the list of our nodes indeed.

187
00:08:14.020 --> 00:08:16.050
We can see manager1 is a leader,

188
00:08:16.050 --> 00:08:18.070
manager2 is reachable,

189
00:08:18.070 --> 00:08:21.030
manager3 is reachable,

190
00:08:21.030 --> 00:08:24.070
worker3, 2, and 1 are part of the cluster

191
00:08:24.070 --> 00:08:26.080
and that is a good start for us.

192
00:08:26.080 --> 00:08:29.010
With Docker Machine, we have been able to

193
00:08:29.010 --> 00:08:32.030
easily create a Docker swarm cluster here.

194
00:08:32.030 --> 00:08:33.050
What other things we can do here?

195
00:08:33.050 --> 00:08:36.070
Well, we can take a look at the Docker info this time.

196
00:08:36.070 --> 00:08:44.000
Let's copy the command for that.

197
00:08:44.000 --> 00:08:45.090
We can just say docker info.

198
00:08:45.090 --> 00:08:47.090
And now if I look at the output,

199
00:08:47.090 --> 00:08:50.070
let's go to the top here,

200
00:08:50.070 --> 00:08:54.030
I'm SSHing to manager1 and giving the command docker info.

201
00:08:54.030 --> 00:08:55.090
There are no containers running on it.

202
00:08:55.090 --> 00:08:57.020
No images are available

203
00:08:57.020 --> 00:09:00.070
because this is a brand new cluster that we just created.

204
00:09:00.070 --> 00:09:03.070
Swarm is active.

205
00:09:03.070 --> 00:09:05.030
The manager is true.

206
00:09:05.030 --> 00:09:07.000
Total limit of managers are three.

207
00:09:07.000 --> 00:09:09.000
Total limit of nodes are six.

208
00:09:09.000 --> 00:09:11.030
That means the rest of the three are workers.

209
00:09:11.030 --> 00:09:14.060
We saw the information as we saw on our Docker format

210
00:09:14.060 --> 00:09:16.050
and now this is a multi-node cluster

211
00:09:16.050 --> 00:09:19.000
created using Docker Machine.

