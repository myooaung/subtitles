WEBVTT
1
00:00:01.000 --> 00:00:03.010
- [Instructor] In any distributed architecture,

2
00:00:03.010 --> 00:00:04.070
it's fundamentally important

3
00:00:04.070 --> 00:00:07.030
to avoid a single point of failure.

4
00:00:07.030 --> 00:00:09.040
Swarm mode is a new mode

5
00:00:09.040 --> 00:00:12.060
that is introduced in Docker 1.12

6
00:00:12.060 --> 00:00:15.030
and exactly allows you to do that.

7
00:00:15.030 --> 00:00:17.030
So, let's see what it is.

8
00:00:17.030 --> 00:00:19.020
Well, Swarm Mode, as we said,

9
00:00:19.020 --> 00:00:21.080
it was a new feature introduced in 1.12.

10
00:00:21.080 --> 00:00:23.050
Prior to 1.12,

11
00:00:23.050 --> 00:00:26.030
there is a legacy swarm that already exists,

12
00:00:26.030 --> 00:00:28.030
but this is sort of the recommended mode going forward.

13
00:00:28.030 --> 00:00:31.090
Swarm Mode is natively managing

14
00:00:31.090 --> 00:00:34.040
a cluster of Docker engines together

15
00:00:34.040 --> 00:00:37.010
and a bunch of engines sitting around together

16
00:00:37.010 --> 00:00:39.040
is called a swarm.

17
00:00:39.040 --> 00:00:41.050
Once the Swarm Mode is created,

18
00:00:41.050 --> 00:00:43.070
whether it's a single host or a multiple host,

19
00:00:43.070 --> 00:00:45.080
you can use your Docker CLI,

20
00:00:45.080 --> 00:00:48.020
which is exactly what we've been doing so far,

21
00:00:48.020 --> 00:00:50.040
to deploy either to a single host

22
00:00:50.040 --> 00:00:52.050
or to a swarm of hosts.

23
00:00:52.050 --> 00:00:54.010
You can deploy your apps,

24
00:00:54.010 --> 00:00:55.070
manage your Swarm Mode cluster

25
00:00:55.070 --> 00:00:57.070
using the Docker CLI.

26
00:00:57.070 --> 00:00:59.040
An important part is Swarm Mode

27
00:00:59.040 --> 00:01:01.050
is integrated into Docker engine,

28
00:01:01.050 --> 00:01:03.070
but it's an optional feature.

29
00:01:03.070 --> 00:01:06.040
And optional means it needs to be explicitly enabled,

30
00:01:06.040 --> 00:01:08.050
as we'll see in a second.

31
00:01:08.050 --> 00:01:10.030
And once again as we said earlier,

32
00:01:10.030 --> 00:01:13.030
Swarm mode allows you to have no single point of failure.

33
00:01:13.030 --> 00:01:15.070
Your truly multi-container applications

34
00:01:15.070 --> 00:01:17.060
can now be deployed

35
00:01:17.060 --> 00:01:20.040
in a multi-host environment as well.

36
00:01:20.040 --> 00:01:22.060
It has a declarative state model.

37
00:01:22.060 --> 00:01:24.080
So just like in Docker Compose

38
00:01:24.080 --> 00:01:26.070
you can define what your services look like.

39
00:01:26.070 --> 00:01:29.040
Those models can then be now defined

40
00:01:29.040 --> 00:01:32.080
and deployed in Swarm Mode as well.

41
00:01:32.080 --> 00:01:35.000
The Swarm Mode cluster is self-organizing, self healing.

42
00:01:35.000 --> 00:01:37.000
What that means is,

43
00:01:37.000 --> 00:01:39.020
you get a declarative state of a service,

44
00:01:39.020 --> 00:01:41.020
we want three replicas,

45
00:01:41.020 --> 00:01:44.010
and it will make sure those three replicas exist.

46
00:01:44.010 --> 00:01:47.020
If a container on a node dies,

47
00:01:47.020 --> 00:01:49.000
then the container is rescheduled

48
00:01:49.000 --> 00:01:50.080
on a different node.

49
00:01:50.080 --> 00:01:52.050
There is service discovery,

50
00:01:52.050 --> 00:01:55.010
which allows a database to be discovered

51
00:01:55.010 --> 00:01:57.010
by an application server.

52
00:01:57.010 --> 00:01:59.000
There is load balancing,

53
00:01:59.000 --> 00:02:01.000
where a number of database instances

54
00:02:01.000 --> 00:02:02.060
can be very easy to load balance,

55
00:02:02.060 --> 00:02:04.030
and there is of course scaling up and down

56
00:02:04.030 --> 00:02:06.010
of a service as well.

57
00:02:06.010 --> 00:02:07.070
And last but not the least,

58
00:02:07.070 --> 00:02:08.080
we'll also take a look

59
00:02:08.080 --> 00:02:10.080
at some of the rolling update functionality

60
00:02:10.080 --> 00:02:12.080
and how version 1 of a service

61
00:02:12.080 --> 00:02:14.070
deployed in a multiple host,

62
00:02:14.070 --> 00:02:18.010
can be easily upgraded to version 2 of a service.

63
00:02:18.010 --> 00:02:20.070
Let's try to understand a little bit of internals,

64
00:02:20.070 --> 00:02:22.020
not that you need to know,

65
00:02:22.020 --> 00:02:24.050
but this is useful to understand.

66
00:02:24.050 --> 00:02:26.010
So, on the top,

67
00:02:26.010 --> 00:02:27.090
what you see in the yellow boxes is Swarm Manager.

68
00:02:27.090 --> 00:02:29.090
It is highly recommended

69
00:02:29.090 --> 00:02:33.040
that you have an odd number of Swarm Managers.

70
00:02:33.040 --> 00:02:34.090
And then on the bottom,

71
00:02:34.090 --> 00:02:37.040
what you see is Workers.

72
00:02:37.040 --> 00:02:39.000
Well, why is it recommended

73
00:02:39.000 --> 00:02:40.090
to have an odd number of Managers?

74
00:02:40.090 --> 00:02:42.040
First of all,

75
00:02:42.040 --> 00:02:45.050
Docker Swarm uses a Raft consensus group.

76
00:02:45.050 --> 00:02:47.020
The reason why Docker Swarm mode

77
00:02:47.020 --> 00:02:49.010
is using a consensus algorithm

78
00:02:49.010 --> 00:02:51.090
is to make sure that all the Manager Nodes

79
00:02:51.090 --> 00:02:54.070
that are in charge of managing and scheduling tasks

80
00:02:54.070 --> 00:02:56.010
in the cluster

81
00:02:56.010 --> 00:02:58.020
are storing the same consistent state.

82
00:02:58.020 --> 00:03:00.040
There is no limit on the number of Manager nodes.

83
00:03:00.040 --> 00:03:05.070
This isn't about how many Manager nodes to implement,

84
00:03:05.070 --> 00:03:08.050
it's a trade off between performance and fall tolerance.

85
00:03:08.050 --> 00:03:10.070
Adding Manager nodes to a swarm

86
00:03:10.070 --> 00:03:12.070
makes a swarm more fall tolerant,

87
00:03:12.070 --> 00:03:14.090
however, additional manager nodes

88
00:03:14.090 --> 00:03:16.090
reduce write performance

89
00:03:16.090 --> 00:03:19.030
because more nodes must acknowledge proposals

90
00:03:19.030 --> 00:03:21.070
to update the swarm state.

91
00:03:21.070 --> 00:03:25.010
This means more network-run traffic.

92
00:03:25.010 --> 00:03:26.040
On the bottom,

93
00:03:26.040 --> 00:03:28.020
you see the Worker nodes.

94
00:03:28.020 --> 00:03:29.080
The Worker nodes talk to each other

95
00:03:29.080 --> 00:03:31.080
using Gossip Network.

96
00:03:31.080 --> 00:03:34.030
These are internals of how Swarm Managers

97
00:03:34.030 --> 00:03:36.010
really work with each other,

98
00:03:36.010 --> 00:03:37.090
and Swarm Workers work with each other.

99
00:03:37.090 --> 00:03:39.070
It's just good to know.

100
00:03:39.070 --> 00:03:41.080
The Manager node and the Worker node,

101
00:03:41.080 --> 00:03:43.060
they communicate with each other,

102
00:03:43.060 --> 00:03:45.020
but the key part for you

103
00:03:45.020 --> 00:03:47.040
is to understand how your Managers

104
00:03:47.040 --> 00:03:49.090
are ultimately secure by default.

105
00:03:49.090 --> 00:03:51.090
When starting your first Manager,

106
00:03:51.090 --> 00:03:55.090
Docker engine will generate a new certificate authority,

107
00:03:55.090 --> 00:03:58.040
and a set of initial certificates for you.

108
00:03:58.040 --> 00:04:00.000
After this initial step,

109
00:04:00.000 --> 00:04:02.000
every node joining the server

110
00:04:02.000 --> 00:04:04.060
will automatically be issued a new certificate

111
00:04:04.060 --> 00:04:06.070
with a randomly generate ID

112
00:04:06.070 --> 00:04:08.050
and the current role in the swarm,

113
00:04:08.050 --> 00:04:10.050
whether it is a Manager or a Worker.

114
00:04:10.050 --> 00:04:12.030
These certificates will be used

115
00:04:12.030 --> 00:04:14.060
as their cryptographically secure node identity

116
00:04:14.060 --> 00:04:17.000
for the lifetime of their participation

117
00:04:17.000 --> 00:04:19.000
in the swarm,

118
00:04:19.000 --> 00:04:21.000
and will be used by the Managers

119
00:04:21.000 --> 00:04:23.050
to ensure secure dissemination of tasks

120
00:04:23.050 --> 00:04:25.080
and other updates.

121
00:04:25.080 --> 00:04:28.020
Now one of the biggest barriers typically

122
00:04:28.020 --> 00:04:30.010
of adoption of TLS,

123
00:04:30.010 --> 00:04:31.080
has been the difficulty of creating,

124
00:04:31.080 --> 00:04:33.080
configuring, and maintaining

125
00:04:33.080 --> 00:04:36.070
the necessary PKI, or Public Key Infrastructure.

126
00:04:36.070 --> 00:04:38.030
With Docker 1.12,

127
00:04:38.030 --> 00:04:40.030
everything not only gets set up

128
00:04:40.030 --> 00:04:42.050
and configured with safe defaults for you,

129
00:04:42.050 --> 00:04:43.090
but also automated

130
00:04:43.090 --> 00:04:46.020
one of the most painful parts of dealing

131
00:04:46.020 --> 00:04:48.010
with TLS certificates,

132
00:04:48.010 --> 00:04:50.080
which is certificate rotation.

133
00:04:50.080 --> 00:04:52.070
Under the hood, essentially,

134
00:04:52.070 --> 00:04:55.010
every node participating in the swarm

135
00:04:55.010 --> 00:04:57.050
is constantly refreshing its certificates,

136
00:04:57.050 --> 00:04:59.070
ensuring that potentially leaked

137
00:04:59.070 --> 00:05:03.080
or compromised certificates are no longer valid.

138
00:05:03.080 --> 00:05:05.040
The frequency with which certificates are rotated

139
00:05:05.040 --> 00:05:07.050
can be configured by the user

140
00:05:07.050 --> 00:05:10.030
and set as low as every 30 minutes.

141
00:05:10.030 --> 00:05:12.090
Now that gives me much more confidence

142
00:05:12.090 --> 00:05:14.080
in terms of the deployment

143
00:05:14.080 --> 00:05:16.090
and making sure it's secure.

144
00:05:16.090 --> 00:05:18.090
If you would like to use your own certificate authority,

145
00:05:18.090 --> 00:05:20.080
there is also support

146
00:05:20.080 --> 00:05:23.050
for an external CA, or a certificate authority node,

147
00:05:23.050 --> 00:05:25.060
where the Managers in the swarm

148
00:05:25.060 --> 00:05:27.070
simply relay the certificate signing request

149
00:05:27.070 --> 00:05:29.020
of the nodes

150
00:05:29.020 --> 00:05:30.080
attempting to join the cluster

151
00:05:30.080 --> 00:05:32.070
to a remote URL.

152
00:05:32.070 --> 00:05:35.040
So we looked at sort of the basics, fundamentals

153
00:05:35.040 --> 00:05:37.040
of Docker Swarm Mode now,

154
00:05:37.040 --> 00:05:39.060
let's take a look at what can we do

155
00:05:39.060 --> 00:05:42.030
with our Docker for Mac essentially to begin with.

156
00:05:42.030 --> 00:05:44.040
Here, I'm in my Terminal.

157
00:05:44.040 --> 00:05:48.000
So the command to initialize Docker Swarm

158
00:05:48.000 --> 00:05:50.020
as you would expect, is docker swarm.

159
00:05:50.020 --> 00:05:54.070
And our magic help word is --help.

160
00:05:54.070 --> 00:05:57.030
So if I say docker swarm --help,

161
00:05:57.030 --> 00:06:00.000
it shows me all the commands that are available to me.

162
00:06:00.000 --> 00:06:02.000
The main command that we want to look at

163
00:06:02.000 --> 00:06:03.090
is docker swarm init.

164
00:06:03.090 --> 00:06:06.070
So I'm going to say docker swarm init,

165
00:06:06.070 --> 00:06:09.050
and that initializes the swarm mode

166
00:06:09.050 --> 00:06:11.070
for this single host for me.

167
00:06:11.070 --> 00:06:14.050
Initializing Swarm Mode on a Windows machine

168
00:06:14.050 --> 00:06:16.050
is slightly different.

169
00:06:16.050 --> 00:06:18.070
Well, we can use the same command,

170
00:06:18.070 --> 00:06:21.060
docker swarm init, which is what we have typed

171
00:06:21.060 --> 00:06:23.020
in the console here,

172
00:06:23.020 --> 00:06:24.080
but in addition,

173
00:06:24.080 --> 00:06:26.060
we also need to use a switch,

174
00:06:26.060 --> 00:06:29.020
called as advertise address.

175
00:06:29.020 --> 00:06:30.050
And what does it do?

176
00:06:30.050 --> 00:06:32.030
Well, this flag specifies the address

177
00:06:32.030 --> 00:06:33.090
that will be advertised

178
00:06:33.090 --> 00:06:35.090
to the other members of the swarm

179
00:06:35.090 --> 00:06:38.030
for API access and overlay networking.

180
00:06:38.030 --> 00:06:40.000
If you don't specify it,

181
00:06:40.000 --> 00:06:42.020
then the Docker will check if the system

182
00:06:42.020 --> 00:06:44.040
is a single IP address and use that IP address

183
00:06:44.040 --> 00:06:46.030
with the listening port.

184
00:06:46.030 --> 00:06:47.080
There is a default listening port

185
00:06:47.080 --> 00:06:49.020
that it listens to.

186
00:06:49.020 --> 00:06:50.040
But in our case,

187
00:06:50.040 --> 00:06:51.070
because there are multiple ports now,

188
00:06:51.070 --> 00:06:53.050
or multiple hosts,

189
00:06:53.050 --> 00:06:55.070
so we need to specify the exact host IP address.

190
00:06:55.070 --> 00:07:00.090
In our case, it's 192.168.99.100,

191
00:07:00.090 --> 00:07:03.010
and once we specify that as IP address,

192
00:07:03.010 --> 00:07:04.080
this is where the other members

193
00:07:04.080 --> 00:07:08.060
of the swarm node will listen to for requests,

194
00:07:08.060 --> 00:07:11.040
and now you can see my Swarm Mode

195
00:07:11.040 --> 00:07:13.080
is easily initialized on a Windows machine.

196
00:07:13.080 --> 00:07:15.030
The beauty is,

197
00:07:15.030 --> 00:07:18.020
whether you're running in a multi-host environment

198
00:07:18.020 --> 00:07:19.090
or a single-host environment,

199
00:07:19.090 --> 00:07:21.020
Docker Swarm

200
00:07:21.020 --> 00:07:23.000
will behave exactly the same.

201
00:07:23.000 --> 00:07:25.040
In a sense, once you deploy the service init,

202
00:07:25.040 --> 00:07:27.000
how service scaling works,

203
00:07:27.000 --> 00:07:29.060
how service discovery works,

204
00:07:29.060 --> 00:07:31.090
how service load-balancing works,

205
00:07:31.090 --> 00:07:34.040
you can test all of that in a single node,

206
00:07:34.040 --> 00:07:36.090
and then easily scale it to multi-host.

207
00:07:36.090 --> 00:07:38.040
Now here of course,

208
00:07:38.040 --> 00:07:40.010
it creates a single node.

209
00:07:40.010 --> 00:07:42.080
By default, this first node of the cluster

210
00:07:42.080 --> 00:07:44.020
is always a Manager.

211
00:07:44.020 --> 00:07:46.030
Now Manager is for an administrative purpose,

212
00:07:46.030 --> 00:07:48.090
but containers can run on it as well.

213
00:07:48.090 --> 00:07:50.040
So, once this is created,

214
00:07:50.040 --> 00:07:52.030
then we can say okay,

215
00:07:52.030 --> 00:07:55.020
show me more details about the cluster.

216
00:07:55.020 --> 00:07:58.000
So I would say docker info.

217
00:07:58.000 --> 00:08:00.040
Once I do docker info here,

218
00:08:00.040 --> 00:08:02.020
let's go to the top here,

219
00:08:02.020 --> 00:08:03.080
and see what it will show me.

220
00:08:03.080 --> 00:08:06.000
It says 5 containers are running,

221
00:08:06.000 --> 00:08:07.040
of total 5 containers,

222
00:08:07.040 --> 00:08:09.020
1 is running from our previous run, 4 stopped,

223
00:08:09.020 --> 00:08:12.090
7 images, all that is good.

224
00:08:12.090 --> 00:08:15.060
We have seen this similar information earlier.

225
00:08:15.060 --> 00:08:18.020
Let's scroll down a little bit.

226
00:08:18.020 --> 00:08:19.070
Here is a key word for us,

227
00:08:19.070 --> 00:08:21.070
now we're seeing Swarm is active.

228
00:08:21.070 --> 00:08:24.030
So this is a Swarm node,

229
00:08:24.030 --> 00:08:27.050
and here it also says Is Manager is true.

230
00:08:27.050 --> 00:08:29.090
What that means is that this is a Manager node.

231
00:08:29.090 --> 00:08:32.000
The total number of Managers is 1.

232
00:08:32.000 --> 00:08:34.030
Total number of nodes is 1.

233
00:08:34.030 --> 00:08:36.030
So you kind of start getting more details

234
00:08:36.030 --> 00:08:38.040
about the swarm cluster itself.

235
00:08:38.040 --> 00:08:40.050
You can scroll down here.

236
00:08:40.050 --> 00:08:42.090
It gives you the Manager address,

237
00:08:42.090 --> 00:08:44.090
which is the default address that is assigned over here.

238
00:08:44.090 --> 00:08:47.020
And you can scroll down

239
00:08:47.020 --> 00:08:49.020
to see some more details

240
00:08:49.020 --> 00:08:51.030
about the Docker Swarm Mode.

241
00:08:51.030 --> 00:08:53.070
Now this is the default mode

242
00:08:53.070 --> 00:08:55.080
where a single Manager is running.

243
00:08:55.080 --> 00:08:57.090
If you want to leave this,

244
00:08:57.090 --> 00:08:59.090
then you can say docker swarm leave.

245
00:08:59.090 --> 00:09:03.040
By default, it will not let you leave

246
00:09:03.040 --> 00:09:05.050
if you are the only node in the cluster,

247
00:09:05.050 --> 00:09:07.030
because you are the manager.

248
00:09:07.030 --> 00:09:09.040
However, we can again brute force it,

249
00:09:09.040 --> 00:09:11.090
and then we can leave the cluster.

250
00:09:11.090 --> 00:09:13.070
In this section,

251
00:09:13.070 --> 00:09:16.000
you got introduced to what a Swarm Mode cluster is,

252
00:09:16.000 --> 00:09:18.010
and using Docker for Mac,

253
00:09:18.010 --> 00:09:22.020
how can you create a single-node Swarm Mode cluster,

254
00:09:22.020 --> 00:09:23.000
and how you can leave it.

