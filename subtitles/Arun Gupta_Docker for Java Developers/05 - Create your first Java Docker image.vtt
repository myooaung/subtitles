WEBVTT
1
00:00:00.060 --> 00:00:02.080
- [Narrator] So we built our very first Docker image,

2
00:00:02.080 --> 00:00:06.050
but that was all using simple Ubuntu and hello world,

3
00:00:06.050 --> 00:00:09.020
and this is a course for Docker for Java developers.

4
00:00:09.020 --> 00:00:10.090
Now let's take a look how can we build

5
00:00:10.090 --> 00:00:14.010
our very first Java image using Docker.

6
00:00:14.010 --> 00:00:17.090
For that we will go to Terminal and create our Docker file,

7
00:00:17.090 --> 00:00:20.010
build images, and run some containers.

8
00:00:20.010 --> 00:00:21.020
Let's do that.

9
00:00:21.020 --> 00:00:24.040
So here I am in my Terminal, and if you see,

10
00:00:24.040 --> 00:00:26.020
I am in my chapter two directory.

11
00:00:26.020 --> 00:00:28.010
As we talked about earlier, we are going to create

12
00:00:28.010 --> 00:00:30.020
a new directory, because that is going to set

13
00:00:30.020 --> 00:00:31.090
the build context for us.

14
00:00:31.090 --> 00:00:35.050
So let's take a look at this listing of this directory.

15
00:00:35.050 --> 00:00:37.050
The directory listing in your console

16
00:00:37.050 --> 00:00:39.040
may look slightly different.

17
00:00:39.040 --> 00:00:41.040
In my listing there are a couple of additional files,

18
00:00:41.040 --> 00:00:43.010
but that's not to be worried about.

19
00:00:43.010 --> 00:00:45.050
All the key files that are required for you

20
00:00:45.050 --> 00:00:47.020
to run the course are already available

21
00:00:47.020 --> 00:00:49.060
in your directory listing as well.

22
00:00:49.060 --> 00:00:54.010
I already have hello world here, so I will go to hello world

23
00:00:54.010 --> 00:00:56.060
directory, and let's take a look at the listing over here.

24
00:00:56.060 --> 00:00:58.030
The directory is completely empty.

25
00:00:58.030 --> 00:01:01.060
So in this directory, now I'm going to make a Docker file,

26
00:01:01.060 --> 00:01:04.040
and then we will create our image with that.

27
00:01:04.040 --> 00:01:06.010
As we discussed earlier, we need a base image

28
00:01:06.010 --> 00:01:10.000
for creating our Docker image.

29
00:01:10.000 --> 00:01:13.030
Now in this case, we're going to use an open JDK image.

30
00:01:13.030 --> 00:01:15.090
Well, how do we know the name of open JDK?

31
00:01:15.090 --> 00:01:18.090
For that we will go to hub.docker.com.

32
00:01:18.090 --> 00:01:20.040
So let's take a look at that.

33
00:01:20.040 --> 00:01:23.030
Now here I am on hub.docker.com.

34
00:01:23.030 --> 00:01:25.060
This is as we discussed the Docker Registry.

35
00:01:25.060 --> 00:01:29.030
It's a publicly available, accessible, free Docker Registry.

36
00:01:29.030 --> 00:01:33.080
If I search on open JDK here, here is my Docker image

37
00:01:33.080 --> 00:01:36.040
for open JDK, and I click on it.

38
00:01:36.040 --> 00:01:39.080
It shows me complete details about what different tags

39
00:01:39.080 --> 00:01:43.010
are available, how can I use it, how can I start

40
00:01:43.010 --> 00:01:46.050
a simple Java instance, other details.

41
00:01:46.050 --> 00:01:48.090
If you want a specific version of open JDK,

42
00:01:48.090 --> 00:01:50.080
you can look at different tags,

43
00:01:50.080 --> 00:01:53.000
and here it shows all the tags.

44
00:01:53.000 --> 00:01:56.010
A later section will talk about tags and other aspects

45
00:01:56.010 --> 00:01:58.000
of this, but for now, we're just going to use

46
00:01:58.000 --> 00:02:00.050
the open JDK as a base image.

47
00:02:00.050 --> 00:02:04.040
So let's go back to our Terminal and build our image.

48
00:02:04.040 --> 00:02:07.000
In my Terminal, I'm going to make a Docker file.

49
00:02:07.000 --> 00:02:11.060
I'm going to just say Docker file, and if you remember,

50
00:02:11.060 --> 00:02:15.010
our very first instruction for Docker file was from.

51
00:02:15.010 --> 00:02:16.090
I'm going to say from.

52
00:02:16.090 --> 00:02:19.000
I'm going to say open JDK here.

53
00:02:19.000 --> 00:02:21.040
I don't care about at this point what version,

54
00:02:21.040 --> 00:02:24.020
what tag, et cetera, that I'm going to use,

55
00:02:24.020 --> 00:02:27.000
and I'm just going to have one simple command,

56
00:02:27.000 --> 00:02:30.080
and all that we'll do is Java version, and that's it.

57
00:02:30.080 --> 00:02:33.070
Very simple, very clean first Java Docker file.

58
00:02:33.070 --> 00:02:36.080
So let's save this here,

59
00:02:36.080 --> 00:02:41.010
and now we're going to build our Docker image.

60
00:02:41.010 --> 00:02:45.080
Going to say Docker image build and we're going to give it a name

61
00:02:45.080 --> 00:02:51.000
or a tag, hello Java, and then I'm going to say dot.

62
00:02:51.000 --> 00:02:53.080
The moment I say dot that is my build context, okay?

63
00:02:53.080 --> 00:02:56.060
So now let's build this image.

64
00:02:56.060 --> 00:02:59.020
Now, open JDK image does not exist,

65
00:02:59.020 --> 00:03:01.070
so it downloads that image from Docker Hub,

66
00:03:01.070 --> 00:03:04.080
and then it's going to build my own Docker image with that.

67
00:03:04.080 --> 00:03:07.070
It takes a few seconds to download the image,

68
00:03:07.070 --> 00:03:10.050
but once the image is downloaded, our image is created.

69
00:03:10.050 --> 00:03:12.030
So let's take a look at it.

70
00:03:12.030 --> 00:03:15.080
I'm going to say Docker image ls and you can see,

71
00:03:15.080 --> 00:03:19.010
here is the open JDK image that is downloaded for us,

72
00:03:19.010 --> 00:03:20.090
and here is our hello Java image

73
00:03:20.090 --> 00:03:23.050
that was created about nine seconds ago.

74
00:03:23.050 --> 00:03:25.080
Don't worry too much about tag and image ID.

75
00:03:25.080 --> 00:03:27.080
We will talk about that in a later section.

76
00:03:27.080 --> 00:03:32.030
But for now, what we want to do is just run our container.

77
00:03:32.030 --> 00:03:37.020
So I'm going to say Docker container run hello Java,

78
00:03:37.020 --> 00:03:39.020
and there we go.

79
00:03:39.020 --> 00:03:42.010
It just shows me the simple JDK version that is being used,

80
00:03:42.010 --> 00:03:45.090
and in this case is 1.8.0 update 121.

81
00:03:45.090 --> 00:03:49.020
So that is our very first Java Docker image.

82
00:03:49.020 --> 00:03:52.010
The exact list of images may look slightly different

83
00:03:52.010 --> 00:03:54.010
in your console, in case you have tried to build

84
00:03:54.010 --> 00:03:57.090
any additional images, and use different names.

85
00:03:57.090 --> 00:04:02.070
You can see here that open JDK image is 641 megabytes.

86
00:04:02.070 --> 00:04:05.050
Now if you have to build a lot of images like that,

87
00:04:05.050 --> 00:04:08.020
that might take a lot of space.

88
00:04:08.020 --> 00:04:09.040
Well, space is not that big a concern,

89
00:04:09.040 --> 00:04:12.080
but imagine this image to be transported across network,

90
00:04:12.080 --> 00:04:15.060
across different hosts, there's a lot of network bandwidth

91
00:04:15.060 --> 00:04:17.040
cost that you could associate with it.

92
00:04:17.040 --> 00:04:19.090
So let's go back to our hub.docker.com,

93
00:04:19.090 --> 00:04:22.050
and take a look at some other tags,

94
00:04:22.050 --> 00:04:25.020
and what size of images we're going to get with that.

95
00:04:25.020 --> 00:04:29.000
This will allow us to shrink our overall image size.

96
00:04:29.000 --> 00:04:30.060
Okay, so let's go to the browser,

97
00:04:30.060 --> 00:04:34.020
take a look at the open JDK hub.docker.com page.

98
00:04:34.020 --> 00:04:37.080
I'm back here on my open JDK tags page here.

99
00:04:37.080 --> 00:04:39.090
If I scroll down here,

100
00:04:39.090 --> 00:04:43.020
you can see there is a JDK Alpine page.

101
00:04:43.020 --> 00:04:46.040
Now Alpine is a variety of Linux and the JDK image is

102
00:04:46.040 --> 00:04:50.060
based into that and you can see this image is 52 megabytes.

103
00:04:50.060 --> 00:04:55.020
So from 641 to 52 megabytes is pretty incredible.

104
00:04:55.020 --> 00:04:58.000
That's quite a reduction is size for your image,

105
00:04:58.000 --> 00:05:01.010
and thus an improvement in your network utilization as well.

106
00:05:01.010 --> 00:05:03.020
So let's go back to our Docker image,

107
00:05:03.020 --> 00:05:07.020
and recreate this image using this JDK Alpine tag.

108
00:05:07.020 --> 00:05:09.030
I'm back in my terminal here.

109
00:05:09.030 --> 00:05:11.080
I'm going to open up my Docker file,

110
00:05:11.080 --> 00:05:14.060
and all I need to do is add a new tag.

111
00:05:14.060 --> 00:05:17.030
Well, by default, it was using the latest tag.

112
00:05:17.030 --> 00:05:19.050
If you don't specify anything, that is the default.

113
00:05:19.050 --> 00:05:22.010
But just by specifying JDK Alpine tag,

114
00:05:22.010 --> 00:05:23.080
now it's going to use that particular

115
00:05:23.080 --> 00:05:26.070
version of the open JDK image.

116
00:05:26.070 --> 00:05:30.040
So save it, and I'm going to build my image again.

117
00:05:30.040 --> 00:05:33.070
Now, once again, if I don't give a tag when

118
00:05:33.070 --> 00:05:36.020
I'm building an image, it uses the latest tag.

119
00:05:36.020 --> 00:05:38.080
But I can optionally give it a tag,

120
00:05:38.080 --> 00:05:40.010
in this case, either two,

121
00:05:40.010 --> 00:05:41.080
or I could have said Alpine as well.

122
00:05:41.080 --> 00:05:44.050
But just as a convenience, I will give it a number two.

123
00:05:44.050 --> 00:05:47.060
So let's build our image now, and it's downloading

124
00:05:47.060 --> 00:05:51.090
my open JDK Alpine version of the image.

125
00:05:51.090 --> 00:05:54.090
And now if we look at the image listing,

126
00:05:54.090 --> 00:05:56.050
where is my JDK Alpine?

127
00:05:56.050 --> 00:05:57.090
Well there is a discrepancy here,

128
00:05:57.090 --> 00:06:00.030
because it says 145 megabytes,

129
00:06:00.030 --> 00:06:03.000
because the one stored on hub.docker.com is compressed.

130
00:06:03.000 --> 00:06:05.060
So just keep that in mind essentially.

131
00:06:05.060 --> 00:06:07.060
So it may not be that big a difference,

132
00:06:07.060 --> 00:06:09.040
or that big a reduction in size,

133
00:06:09.040 --> 00:06:11.050
so this is something you need to be aware of.

134
00:06:11.050 --> 00:06:14.050
The image needs to be downloaded here and uncompressed,

135
00:06:14.050 --> 00:06:17.010
but the key part is if I look at my hello Java two

136
00:06:17.010 --> 00:06:21.050
image here, that is 145 megabytes, as opposed to 641.

137
00:06:21.050 --> 00:06:23.000
That's literally one fourth the size

138
00:06:23.000 --> 00:06:25.000
of what we could have done.

139
00:06:25.000 --> 00:06:28.070
And same way if I were to run this container here,

140
00:06:28.070 --> 00:06:33.020
I will just say hello Java:2, and it's going to run it.

141
00:06:33.020 --> 00:06:34.070
But of course, it's the JDK Alpine,

142
00:06:34.070 --> 00:06:37.050
so it's a different version, different release cycle,

143
00:06:37.050 --> 00:06:39.050
but you get an idea of how easy it is

144
00:06:39.050 --> 00:06:42.030
to build you first Java image.

145
00:06:42.030 --> 00:06:43.080
Now in this case, all we are doing

146
00:06:43.080 --> 00:06:45.070
is just printing Java version.

147
00:06:45.070 --> 00:06:47.090
In a future section we'll take a look at how can we package

148
00:06:47.090 --> 00:06:52.000
our Java files, or JAR files, and run those JAR files.

