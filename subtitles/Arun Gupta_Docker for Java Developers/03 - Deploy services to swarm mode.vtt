WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] Now that we have created

2
00:00:01.060 --> 00:00:04.000
a multi-node Swarm Mode cluster,

3
00:00:04.000 --> 00:00:07.000
let's deploy some services to this cluster.

4
00:00:07.000 --> 00:00:09.040
Well, what does it mean to deploy a service

5
00:00:09.040 --> 00:00:11.060
to a multi-node Swarm Mode cluster?

6
00:00:11.060 --> 00:00:13.000
There are two kinds of services.

7
00:00:13.000 --> 00:00:14.090
One is a Replicated Service,

8
00:00:14.090 --> 00:00:17.020
and another one is a Global Service.

9
00:00:17.020 --> 00:00:19.090
Let's talk about Replicated Service first.

10
00:00:19.090 --> 00:00:21.010
So, essentially, if you look at

11
00:00:21.010 --> 00:00:22.070
the command on the bottom of the screen,

12
00:00:22.070 --> 00:00:25.070
it says, "docker service create."

13
00:00:25.070 --> 00:00:29.080
I'm creating a service, I want to create three replicas of it,

14
00:00:29.080 --> 00:00:33.030
and I'm saying give it a name "--name web,"

15
00:00:33.030 --> 00:00:36.040
and I want to take jboss/wildfly.

16
00:00:36.040 --> 00:00:38.050
So that's my command to create a service

17
00:00:38.050 --> 00:00:41.020
and three replicas of the wildfly container.

18
00:00:41.020 --> 00:00:43.040
I'm using jboss/wildfly, but this could have been

19
00:00:43.040 --> 00:00:46.010
any custom application that I care about.

20
00:00:46.010 --> 00:00:47.070
And, once I give this command,

21
00:00:47.070 --> 00:00:52.030
the Docker Swarm Mode manager looks at this request

22
00:00:52.030 --> 00:00:53.090
and then distributes the containers

23
00:00:53.090 --> 00:00:57.000
across the different workers or managers.

24
00:00:57.000 --> 00:01:00.040
Remember, the manager, by itself, is a worker as well.

25
00:01:00.040 --> 00:01:03.090
So you can configure the manger to be only a manager,

26
00:01:03.090 --> 00:01:05.070
but, by default, the containers

27
00:01:05.070 --> 00:01:08.020
can be deployed on a manager also.

28
00:01:08.020 --> 00:01:11.040
Now, Swarm Mode has a load balancer.

29
00:01:11.040 --> 00:01:14.020
Load balancing containers has been hard up until now

30
00:01:14.020 --> 00:01:16.040
because you have to update the configuration of the

31
00:01:16.040 --> 00:01:20.010
load balancers as containers are started or stopped.

32
00:01:20.010 --> 00:01:23.020
They could be started and stopping on different nodes.

33
00:01:23.020 --> 00:01:24.090
This is typically done by overriding the

34
00:01:24.090 --> 00:01:28.020
configuration file of the load balancer and bouncing it,

35
00:01:28.020 --> 00:01:30.050
or, by updating the configuration and the

36
00:01:30.050 --> 00:01:33.040
distributed key values tool like Etcd.

37
00:01:33.040 --> 00:01:34.080
That is tricky.

38
00:01:34.080 --> 00:01:38.070
Docker now has built-in load balancing in the engine itself

39
00:01:38.070 --> 00:01:43.020
using, very important, a container-aware routing mesh.

40
00:01:43.020 --> 00:01:45.010
Let's understand what that means.

41
00:01:45.010 --> 00:01:47.070
This mesh network can transparently read out

42
00:01:47.070 --> 00:01:50.070
traffic from any host to a container.

43
00:01:50.070 --> 00:01:54.010
For example, publishing a service on port 8080

44
00:01:54.010 --> 00:01:57.070
will reserve a swarm-wide ingress port

45
00:01:57.070 --> 00:02:00.090
so that each node will listen to port 8080.

46
00:02:00.090 --> 00:02:03.090
Each node will then read out traffic to the container

47
00:02:03.090 --> 00:02:06.060
using DNS-based service discovery.

48
00:02:06.060 --> 00:02:08.020
This is actually very compatible with

49
00:02:08.020 --> 00:02:10.070
the existing infrastructure as well.

50
00:02:10.070 --> 00:02:13.040
External load balancer no longer need to know

51
00:02:13.040 --> 00:02:15.030
where the containers are running,

52
00:02:15.030 --> 00:02:18.000
they can just point towards any node,

53
00:02:18.000 --> 00:02:21.020
and the routing mesh will automatically redirect traffic.

54
00:02:21.020 --> 00:02:24.020
As a developer, this makes your life really easy.

55
00:02:24.020 --> 00:02:26.050
Now, even though it introduces an extra hop,

56
00:02:26.050 --> 00:02:31.060
it is still very efficient, since it uses IPVS.

57
00:02:31.060 --> 00:02:32.070
Let's take a look.

58
00:02:32.070 --> 00:02:34.020
I created my service

59
00:02:34.020 --> 00:02:35.040
with three replicas,

60
00:02:35.040 --> 00:02:39.000
and that is spread over three different nodes.

61
00:02:39.000 --> 00:02:40.070
I set up my load balancer,

62
00:02:40.070 --> 00:02:42.060
and the load balancer has all

63
00:02:42.060 --> 00:02:45.050
five nodes in the cluster configured.

64
00:02:45.050 --> 00:02:47.020
If a request goes to a node

65
00:02:47.020 --> 00:02:49.040
where the container is not running,

66
00:02:49.040 --> 00:02:52.000
then it is automatically rerouted to

67
00:02:52.000 --> 00:02:54.010
a node where the container is running.

68
00:02:54.010 --> 00:02:56.030
And, remember, we're using IPVS over there.

69
00:02:56.030 --> 00:02:58.060
That makes the entire process very efficient.

70
00:02:58.060 --> 00:02:59.090
It's just a single hop,

71
00:02:59.090 --> 00:03:02.040
and it automatically identifies that.

72
00:03:02.040 --> 00:03:04.090
Let's take a look at how this is in action.

73
00:03:04.090 --> 00:03:06.030
I'm here in my terminal,

74
00:03:06.030 --> 00:03:08.050
and, in my terminal, let's take a look at the

75
00:03:08.050 --> 00:03:13.070
Docker Machine Swarm Mode Cluster that we created earlier.

76
00:03:13.070 --> 00:03:16.060
I'm going to show you docker-machine ls

77
00:03:16.060 --> 00:03:20.000
and we can see that all my machines are still running.

78
00:03:20.000 --> 00:03:21.090
So what I'm going to do is

79
00:03:21.090 --> 00:03:26.000
I'm going to ssh into manager1.

80
00:03:26.000 --> 00:03:28.000
Our request needs to go to a manager,

81
00:03:28.000 --> 00:03:29.050
ideally to the primary manager,

82
00:03:29.050 --> 00:03:31.020
but it can go to a secondary manager,

83
00:03:31.020 --> 00:03:34.010
which will then reroute the request to the primary.

84
00:03:34.010 --> 00:03:37.090
So, to keep our use case simple, we'll just go to manager1.

85
00:03:37.090 --> 00:03:40.030
Now, in here, I can say

86
00:03:40.030 --> 00:03:42.030
docker service.

87
00:03:42.030 --> 00:03:44.060
I'm going to "create" a service.

88
00:03:44.060 --> 00:03:47.000
I'm going to give it a name "web."

89
00:03:47.000 --> 00:03:50.000
I'm going have three replicas to it,

90
00:03:50.000 --> 00:03:53.090
and I'm going to resolve the service to run on port 8080.

91
00:03:53.090 --> 00:03:56.080
This will automatically reserve a swarm-wide ingress port

92
00:03:56.080 --> 00:03:59.050
across all the nodes in the cluster.

93
00:03:59.050 --> 00:04:04.030
And then I can say jboss/wildfly.

94
00:04:04.030 --> 00:04:07.010
Now, I can run this command.

95
00:04:07.010 --> 00:04:08.080
Now, if I look at

96
00:04:08.080 --> 00:04:10.050
docker service ls,

97
00:04:10.050 --> 00:04:12.020
essentially, what the previous command did is

98
00:04:12.020 --> 00:04:14.000
it just created a service.

99
00:04:14.000 --> 00:04:15.090
Docker Manager is going to figure out

100
00:04:15.090 --> 00:04:18.030
where these containers need to run,

101
00:04:18.030 --> 00:04:20.060
on which host these containers need to run.

102
00:04:20.060 --> 00:04:23.050
Then, it's going to download the jboss/wildfly

103
00:04:23.050 --> 00:04:25.070
image on those nodes,

104
00:04:25.070 --> 00:04:27.010
it'll run the container,

105
00:04:27.010 --> 00:04:29.030
it'll reserve the swarm-wide ingress port,

106
00:04:29.030 --> 00:04:32.060
and then it'll say the service is ready for serving.

107
00:04:32.060 --> 00:04:36.010
But, at this point, if I look at docker service ls

108
00:04:36.010 --> 00:04:38.030
and that was really fast actually.

109
00:04:38.030 --> 00:04:41.030
I was hoping to show you how it shows

110
00:04:41.030 --> 00:04:43.050
zero replicas out of three replicas.

111
00:04:43.050 --> 00:04:45.020
I shouldn't have waited that long.

112
00:04:45.020 --> 00:04:47.040
It's a pretty fast internet connection.

113
00:04:47.040 --> 00:04:50.030
So, here, you're seeing the service is created,

114
00:04:50.030 --> 00:04:53.010
name is web, mode is replicated,

115
00:04:53.010 --> 00:04:58.030
three replicas out of three, all are running.

116
00:04:58.030 --> 00:05:00.000
Let's look at some more details.

117
00:05:00.000 --> 00:05:01.000
I can say

118
00:05:01.000 --> 00:05:03.020
docker service inspect,

119
00:05:03.020 --> 00:05:04.090
and the service name is web,

120
00:05:04.090 --> 00:05:08.010
so I can get more details about the service itself.

121
00:05:08.010 --> 00:05:09.080
If we go up here,

122
00:05:09.080 --> 00:05:11.060
you can see the service ID,

123
00:05:11.060 --> 00:05:14.080
you can see when was it created, when was it updated,

124
00:05:14.080 --> 00:05:17.060
you can get more specification for the service.

125
00:05:17.060 --> 00:05:21.010
That is the image name, a particular MD5 checksum.

126
00:05:21.010 --> 00:05:23.090
You can see the number of replicas.

127
00:05:23.090 --> 00:05:27.010
You can see there's an ingress port here.

128
00:05:27.010 --> 00:05:29.080
And other details.

129
00:05:29.080 --> 00:05:31.050
Let's take a look at more details.

130
00:05:31.050 --> 00:05:34.010
Remember, we are running three replicas of the service.

131
00:05:34.010 --> 00:05:36.050
Now, service, the way it runs the replicas,

132
00:05:36.050 --> 00:05:39.050
each replica is associated with a task,

133
00:05:39.050 --> 00:05:41.090
and a task is essentially a container.

134
00:05:41.090 --> 00:05:44.070
So I want to look at the different tasks of the service.

135
00:05:44.070 --> 00:05:45.060
So I'm going to say

136
00:05:45.060 --> 00:05:48.040
docker service ps web

137
00:05:48.040 --> 00:05:51.070
And, in this case, says name is web.1,

138
00:05:51.070 --> 00:05:52.090
web.2,

139
00:05:52.090 --> 00:05:54.030
web.3,

140
00:05:54.030 --> 00:05:57.030
and they're running, in this case, on manager3,

141
00:05:57.030 --> 00:05:59.040
worker1, and worker2.

142
00:05:59.040 --> 00:06:03.050
So a single command created three replicas of your service

143
00:06:03.050 --> 00:06:06.010
spread across multiple nodes.

144
00:06:06.010 --> 00:06:10.070
So, we're using one container, but across multiple hosts.

145
00:06:10.070 --> 00:06:13.060
In a future section, we'll take a look at how we can run

146
00:06:13.060 --> 00:06:17.000
a multi-container application on a multi-node cluster.

