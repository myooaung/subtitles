WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] And now we're going to run

2
00:00:01.050 --> 00:00:03.020
our cAdvisor container.

3
00:00:03.020 --> 00:00:08.000
So we'll refer to our exercise notes.

4
00:00:08.000 --> 00:00:11.010
Let's run our cAdvisor.

5
00:00:11.010 --> 00:00:13.060
So here docker run in a detached mode.

6
00:00:13.060 --> 00:00:15.010
Name is cAdvisor.

7
00:00:15.010 --> 00:00:17.010
Is accessible on port 8080.

8
00:00:17.010 --> 00:00:18.050
There are some volume mapping,

9
00:00:18.050 --> 00:00:21.090
and then finally, as a cAdvisor container by itself.

10
00:00:21.090 --> 00:00:23.030
So let's run it.

11
00:00:23.030 --> 00:00:24.070
Of course, it will not find the image,

12
00:00:24.070 --> 00:00:27.000
so it's going to download the image for us

13
00:00:27.000 --> 00:00:30.090
as another short image, so the image comes out very well.

14
00:00:30.090 --> 00:00:32.090
Let's look at the container listing.

15
00:00:32.090 --> 00:00:34.090
Cadvisor is running well for us,

16
00:00:34.090 --> 00:00:36.090
and our dashboard as we expected,

17
00:00:36.090 --> 00:00:39.030
should be at localhost column 8080,

18
00:00:39.030 --> 00:00:41.070
so let's take a look at that.

19
00:00:41.070 --> 00:00:43.090
This is probably cached from a previous run.

20
00:00:43.090 --> 00:00:46.070
Let's refresh it, and here it comes.

21
00:00:46.070 --> 00:00:49.090
So now it's showing me the cAdvisor dashboard.

22
00:00:49.090 --> 00:00:53.030
So all my Docker Containers are going to be shown over here.

23
00:00:53.030 --> 00:00:56.090
It shows me the status for CPU, and memory,

24
00:00:56.090 --> 00:00:59.020
how much reservation is done for memory,

25
00:00:59.020 --> 00:01:01.050
how many CPU shares are available.

26
00:01:01.050 --> 00:01:04.040
It shows that this is an eight core machine.

27
00:01:04.040 --> 00:01:10.030
You can look at the existing usage for CPU processes,

28
00:01:10.030 --> 00:01:13.070
the core usage, the usage breakdown,

29
00:01:13.070 --> 00:01:16.030
similarly the same thing for memory,

30
00:01:16.030 --> 00:01:20.010
same thing for network, and finally, for file system.

31
00:01:20.010 --> 00:01:23.050
Now let's start up a container and see what that gets us.

32
00:01:23.050 --> 00:01:26.090
So let's go to the top here, look at /docker,

33
00:01:26.090 --> 00:01:28.070
and see that there is only one subcontainer

34
00:01:28.070 --> 00:01:30.040
running over there, and that's likely

35
00:01:30.040 --> 00:01:32.000
our cAdvisor container.

36
00:01:32.000 --> 00:01:34.060
So now let's run a Couchbase container,

37
00:01:34.060 --> 00:01:43.070
and see how this thing changes.

38
00:01:43.070 --> 00:01:45.060
And in this case we don't need any port forwarding

39
00:01:45.060 --> 00:01:47.030
because we are not accessing it,

40
00:01:47.030 --> 00:01:50.020
but if we were to access it, then we will

41
00:01:50.020 --> 00:01:54.010
define the port forwarding like this,

42
00:01:54.010 --> 00:01:56.010
and we have seen this multiple number of times,

43
00:01:56.010 --> 00:01:58.030
and as a matter of fact, let's do the port forwarding here.

44
00:01:58.030 --> 00:02:01.050
We can make some changes, and then see some live results

45
00:02:01.050 --> 00:02:03.040
in the cAdvisor dashboard.

46
00:02:03.040 --> 00:02:06.050
So once again, docker container run in a detach mode,

47
00:02:06.050 --> 00:02:10.050
db, port forwarded, arungupta/couchbase.

48
00:02:10.050 --> 00:02:13.080
Let's look at the logs,

49
00:02:13.080 --> 00:02:16.020
and let's follow the logs this time.

50
00:02:16.020 --> 00:02:17.060
Well, while the logs are being refreshed,

51
00:02:17.060 --> 00:02:20.060
let's look at our cAdvisor dashboard.

52
00:02:20.060 --> 00:02:22.020
It's showing only one container here.

53
00:02:22.020 --> 00:02:25.090
Now if I refresh it, it's showing me two containers here,

54
00:02:25.090 --> 00:02:28.000
and if I go back to my terminal,

55
00:02:28.000 --> 00:02:30.030
the container is up and running,

56
00:02:30.030 --> 00:02:35.030
and if I say docker container ls,

57
00:02:35.030 --> 00:02:37.060
my Couchbase container has the container id

58
00:02:37.060 --> 00:02:42.000
starting with 6e1, so this is 6e1,

59
00:02:42.000 --> 00:02:43.030
so this gives me more details

60
00:02:43.030 --> 00:02:45.050
about the Couchbase container itself.

61
00:02:45.050 --> 00:02:49.020
So now I'm getting specific detail about what's happening

62
00:02:49.020 --> 00:02:51.030
in the Couchbase container realm.

63
00:02:51.030 --> 00:02:55.080
So the usage, the CPU usage, usage per core,

64
00:02:55.080 --> 00:02:59.010
usage breakdown, same thing for memory,

65
00:02:59.010 --> 00:03:01.000
network, and file system.

66
00:03:01.000 --> 00:03:03.090
Now I can open up another tab here.

67
00:03:03.090 --> 00:03:09.060
I can log into Couchbase Container,

68
00:03:09.060 --> 00:03:13.010
sign in here, go to the data buckets,

69
00:03:13.010 --> 00:03:16.030
create a new data bucket if I want to.

70
00:03:16.030 --> 00:03:18.070
Couchbase is a no SQL database,

71
00:03:18.070 --> 00:03:21.010
but we can easily create a primary index on it.

72
00:03:21.010 --> 00:03:23.030
So I'm going to go to the query tab here,

73
00:03:23.030 --> 00:03:28.080
and I'm going to say create primary index on docker,

74
00:03:28.080 --> 00:03:31.090
so that's going to create a simple primary index,

75
00:03:31.090 --> 00:03:34.000
and that's my primary index here,

76
00:03:34.000 --> 00:03:37.090
and now Couchbase also supports a SQL like query language.

77
00:03:37.090 --> 00:03:43.010
So I can just say select * from docker bucket.

78
00:03:43.010 --> 00:03:44.090
Well, of course there is no document in there,

79
00:03:44.090 --> 00:03:48.020
so it returns zero, result count zero, result size zero,

80
00:03:48.020 --> 00:03:50.020
but all this functionality is good.

81
00:03:50.020 --> 00:03:52.090
That's what you would be doing in a typical real world,

82
00:03:52.090 --> 00:03:55.040
but how does it relate to cAdvisor?

83
00:03:55.040 --> 00:03:58.000
Now if I go ahead and you can see,

84
00:03:58.000 --> 00:04:00.030
this is all refreshed for me automatically,

85
00:04:00.030 --> 00:04:03.020
and you can see how the CPU usage,

86
00:04:03.020 --> 00:04:06.060
the memory usage is differing based upon

87
00:04:06.060 --> 00:04:08.040
how exactly it's being utilized.

88
00:04:08.040 --> 00:04:11.000
So this is good to know that as you are working

89
00:04:11.000 --> 00:04:13.040
in your application, the cAdvisor

90
00:04:13.040 --> 00:04:15.030
continuously refreshes the data.

91
00:04:15.030 --> 00:04:16.070
Now, one of the important parts that you want

92
00:04:16.070 --> 00:04:21.040
to understand is cAdvisor only stores data for 60 seconds.

93
00:04:21.040 --> 00:04:23.050
After that it's gone, so you really need

94
00:04:23.050 --> 00:04:26.060
to start backing it up with InfluxDB for example,

95
00:04:26.060 --> 00:04:28.020
which is a time series database.

96
00:04:28.020 --> 00:04:31.030
You can start saving the data from cAdvisor to InfluxDB

97
00:04:31.030 --> 00:04:32.080
if you are not full time series

98
00:04:32.080 --> 00:04:35.070
or how the container has been performing.

99
00:04:35.070 --> 00:04:37.030
So in this section, you looked at

100
00:04:37.030 --> 00:04:42.020
how we can use Prometheus, which is inbuilt into docker 113,

101
00:04:42.020 --> 00:04:46.010
and how you can use cAdvisor for container monitoring.

102
00:04:46.010 --> 00:04:47.080
Now before we wrap up, let's make sure

103
00:04:47.080 --> 00:04:50.090
we go back to our terminal, and clean up the containers

104
00:04:50.090 --> 00:04:51.070
that we're running.

105
00:04:51.070 --> 00:04:57.040
So docker container ls, docker container rm - f,

106
00:04:57.040 --> 00:05:00.030
docker container ls - aq.

107
00:05:00.030 --> 00:05:03.080
All and quietly remove the containers,

108
00:05:03.080 --> 00:05:06.030
and once again list the containers.

109
00:05:06.030 --> 00:05:07.000
None is running.

