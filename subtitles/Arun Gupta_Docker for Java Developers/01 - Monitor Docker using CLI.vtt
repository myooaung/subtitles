WEBVTT
1
00:00:00.060 --> 00:00:01.090
- [Instructor] The next couple of sections

2
00:00:01.090 --> 00:00:04.020
I'm going to talk about how can you monitor

3
00:00:04.020 --> 00:00:05.060
your Docker containers?

4
00:00:05.060 --> 00:00:07.070
That is going to be a very important part of

5
00:00:07.070 --> 00:00:09.080
when you're building your applications.

6
00:00:09.080 --> 00:00:13.050
You want to identify what amount of CPU,

7
00:00:13.050 --> 00:00:17.030
network, disc space, file system, et cetera are being

8
00:00:17.030 --> 00:00:19.090
utilized by these containers.

9
00:00:19.090 --> 00:00:21.040
This section is going to talk about

10
00:00:21.040 --> 00:00:24.000
monitoring Docker using Docker CLI.

11
00:00:24.000 --> 00:00:26.050
We're going to use three different mechanisms.

12
00:00:26.050 --> 00:00:29.070
The first one is, Docker containers stats CLI,

13
00:00:29.070 --> 00:00:32.030
then we will use Docker remote API.

14
00:00:32.030 --> 00:00:35.020
If you remember, the client talks to the server

15
00:00:35.020 --> 00:00:36.080
using rest API.

16
00:00:36.080 --> 00:00:39.030
So there are certain aspects of rest API

17
00:00:39.030 --> 00:00:41.080
on the remote API that can be used here.

18
00:00:41.080 --> 00:00:43.040
And then last but not the least,

19
00:00:43.040 --> 00:00:46.000
we'll take a look at the system events API.

20
00:00:46.000 --> 00:00:49.030
Alright, let's get hands on with this.

21
00:00:49.030 --> 00:00:53.010
It doesn't matter where this command is being excuted.

22
00:00:53.010 --> 00:00:55.030
You can just execute it from your current working directory

23
00:00:55.030 --> 00:00:56.080
as well.

24
00:00:56.080 --> 00:00:58.090
Just for clarity, I got two tabs here.

25
00:00:58.090 --> 00:01:01.080
I want to close this tab for now.

26
00:01:01.080 --> 00:01:03.080
And let's clear up the console now.

27
00:01:03.080 --> 00:01:06.000
So, let's take a look at what containers are running

28
00:01:06.000 --> 00:01:07.030
at this point.

29
00:01:07.030 --> 00:01:08.010
What I want to do is,

30
00:01:08.010 --> 00:01:09.050
I want to kill all the containers that are

31
00:01:09.050 --> 00:01:11.020
running at this point in time.

32
00:01:11.020 --> 00:01:12.060
I'm going to say Docker container.

33
00:01:12.060 --> 00:01:16.020
Kill all the containers and what are the process ID's

34
00:01:16.020 --> 00:01:17.080
that I want to list here?

35
00:01:17.080 --> 00:01:20.050
All of them and quietly.

36
00:01:20.050 --> 00:01:21.070
Okay?

37
00:01:21.070 --> 00:01:22.070
No containers are running.

38
00:01:22.070 --> 00:01:23.060
That's good.

39
00:01:23.060 --> 00:01:27.000
So, what we're going to use is Docker container

40
00:01:27.000 --> 00:01:30.000
stats API.

41
00:01:30.000 --> 00:01:31.050
It has certain options over here

42
00:01:31.050 --> 00:01:33.090
and that's what we're going to be using, okay?

43
00:01:33.090 --> 00:01:36.070
So let's start up Docker container

44
00:01:36.070 --> 00:01:39.010
and see what we can use to measure it.

45
00:01:39.010 --> 00:01:41.050
So what we're going to do is we're going to say

46
00:01:41.050 --> 00:01:45.020
Docker container run -d

47
00:01:45.020 --> 00:01:47.040
and we don't need to do any put forwarding here.

48
00:01:47.040 --> 00:01:49.040
So all we're going to do is just run

49
00:01:49.040 --> 00:01:53.000
arungupta/couchbase container here.

50
00:01:53.000 --> 00:01:53.090
Okay?

51
00:01:53.090 --> 00:01:54.080
Once we start up the container,

52
00:01:54.080 --> 00:01:57.050
then we can use the Docker container stats API

53
00:01:57.050 --> 00:01:58.040
on this container.

54
00:01:58.040 --> 00:01:59.060
And just for convenience,

55
00:01:59.060 --> 00:02:04.060
we will give it a name as well.

56
00:02:04.060 --> 00:02:05.040
See the listing?

57
00:02:05.040 --> 00:02:11.000
The container is up and running.

58
00:02:11.000 --> 00:02:12.010
Let's make sure that the container

59
00:02:12.010 --> 00:02:13.020
is up for us.

60
00:02:13.020 --> 00:02:15.010
That way we can start reporting some metrics for us.

61
00:02:15.010 --> 00:02:16.090
Okay?

62
00:02:16.090 --> 00:02:19.010
Alright, our container is up now.

63
00:02:19.010 --> 00:02:20.090
So now, what I'm going to do is I'm going to say

64
00:02:20.090 --> 00:02:23.020
Docker container stats and I'm going to give it

65
00:02:23.020 --> 00:02:25.060
a container name.

66
00:02:25.060 --> 00:02:27.040
Right away it clears up my screen.

67
00:02:27.040 --> 00:02:29.080
And it's showing me the container name

68
00:02:29.080 --> 00:02:34.060
which is DB in our case percent CPU utilization right here.

69
00:02:34.060 --> 00:02:37.060
Memory usage and the total limit here.

70
00:02:37.060 --> 00:02:39.080
Memory percent utilization,

71
00:02:39.080 --> 00:02:44.010
network I/O and block I/O which is the disc I/0.

72
00:02:44.010 --> 00:02:46.080
So this information is refreshed for us.

73
00:02:46.080 --> 00:02:48.060
It's constantly streamed to us

74
00:02:48.060 --> 00:02:50.080
using containers long time metrics.

75
00:02:50.080 --> 00:02:51.060
Okay?

76
00:02:51.060 --> 00:02:54.030
Now, we want to format this output a bit

77
00:02:54.030 --> 00:02:57.030
so what we can do is, we can say,

78
00:02:57.030 --> 00:03:01.060
- -format and we can give it a format string here.

79
00:03:01.060 --> 00:03:02.070
In terms of the format,

80
00:03:02.070 --> 00:03:07.040
all I want is just a container and I want to display it

81
00:03:07.040 --> 00:03:09.090
in my way and all I want to do

82
00:03:09.090 --> 00:03:12.090
is display CPU percent utilization.

83
00:03:12.090 --> 00:03:15.000
Okay?

84
00:03:15.000 --> 00:03:16.060
It's still began stream it, but it's giving me

85
00:03:16.060 --> 00:03:19.090
only the container name and CPU percent utilization.

86
00:03:19.090 --> 00:03:21.050
So that's kind of cool.

87
00:03:21.050 --> 00:03:22.030
Let's see.

88
00:03:22.030 --> 00:03:24.000
What else we can do with this here?

89
00:03:24.000 --> 00:03:26.000
Now, I want to display this information

90
00:03:26.000 --> 00:03:27.050
in a tabular format.

91
00:03:27.050 --> 00:03:28.060
So I'm going to say,

92
00:03:28.060 --> 00:03:33.080
table and instead of giving me the container

93
00:03:33.080 --> 00:03:35.040
give me the name.

94
00:03:35.040 --> 00:03:38.010
I want to display the name here nicely.

95
00:03:38.010 --> 00:03:40.080
And what I want to do is instead of saying

96
00:03:40.080 --> 00:03:43.070
colon, I want to have a tab here.

97
00:03:43.070 --> 00:03:44.060
Okay?

98
00:03:44.060 --> 00:03:47.040
I still want to display the CPU percent utilization

99
00:03:47.040 --> 00:03:49.030
and I'm going to add another tab here

100
00:03:49.030 --> 00:03:55.010
and now I also want to display memory usage.

101
00:03:55.010 --> 00:03:57.000
Okay?

102
00:03:57.000 --> 00:04:00.070
So now, I'm getting a nice tabular format.

103
00:04:00.070 --> 00:04:02.000
I'm getting a header,

104
00:04:02.000 --> 00:04:04.050
container name, CPU utilization,

105
00:04:04.050 --> 00:04:06.010
and memory utilization.

106
00:04:06.010 --> 00:04:07.000
Okay?

107
00:04:07.000 --> 00:04:08.020
That's kind of cool.

108
00:04:08.020 --> 00:04:10.040
Let's take a look at another option here.

109
00:04:10.040 --> 00:04:14.010
I can also say just give me one particular instance

110
00:04:14.010 --> 00:04:16.090
off the stats at this moment.

111
00:04:16.090 --> 00:04:19.090
No streaming, it just flashes the current data.

112
00:04:19.090 --> 00:04:22.060
So, you can look at the Docker stats API,

113
00:04:22.060 --> 00:04:25.050
build your own fancy dashboard on top of it

114
00:04:25.050 --> 00:04:27.020
and the way you want to use it.

115
00:04:27.020 --> 00:04:29.020
Now we also have a remote API

116
00:04:29.020 --> 00:04:31.090
that gives far more details about it.

117
00:04:31.090 --> 00:04:32.090
And how do we do that?

118
00:04:32.090 --> 00:04:34.040
We can use curl.

119
00:04:34.040 --> 00:04:36.050
We can use unix socket for this,

120
00:04:36.050 --> 00:04:39.040
for connection.

121
00:04:39.040 --> 00:04:42.050
So I'm going to use Docker sock file here

122
00:04:42.050 --> 00:04:46.070
and of course, my host is running on local host.

123
00:04:46.070 --> 00:04:48.090
And then my containers.

124
00:04:48.090 --> 00:04:50.030
That's my API.

125
00:04:50.030 --> 00:04:53.020
My container name is DB and stats

126
00:04:53.020 --> 00:04:56.000
is the API that his being honored.

127
00:04:56.000 --> 00:04:57.050
If I do this here,

128
00:04:57.050 --> 00:04:59.080
it populates my screen rather quickly.

129
00:04:59.080 --> 00:05:02.050
Every second it's refreshing the data.

130
00:05:02.050 --> 00:05:04.070
So let's pause here for a second.

131
00:05:04.070 --> 00:05:07.070
And let's look at one of the values here, okay?

132
00:05:07.070 --> 00:05:10.000
If I take this here

133
00:05:10.000 --> 00:05:14.010
this is output from one of the entries

134
00:05:14.010 --> 00:05:16.040
which is being refreshed every second.

135
00:05:16.040 --> 00:05:17.080
So you can see there's a lot of information

136
00:05:17.080 --> 00:05:20.030
available as part of this Docker remote API

137
00:05:20.030 --> 00:05:22.060
and that's something again, that you may leverage,

138
00:05:22.060 --> 00:05:25.070
build fancy dashboards using that.

139
00:05:25.070 --> 00:05:27.080
So let's cancel that.

140
00:05:27.080 --> 00:05:30.050
The command for accessing Docker remote API

141
00:05:30.050 --> 00:05:32.070
is a bit different on a Windows machine.

142
00:05:32.070 --> 00:05:35.050
Now here, I'm on a Windows 7 worker machine.

143
00:05:35.050 --> 00:05:37.070
Let's see how the command looks different.

144
00:05:37.070 --> 00:05:39.060
Well first of all,

145
00:05:39.060 --> 00:05:41.010
let's take a look at the containers

146
00:05:41.010 --> 00:05:42.040
that are running here.

147
00:05:42.040 --> 00:05:44.050
If I do Docker container LS,

148
00:05:44.050 --> 00:05:46.040
it shows me there is only one container

149
00:05:46.040 --> 00:05:49.000
that is running and that is a couch-based container.

150
00:05:49.000 --> 00:05:50.030
Now let's take a look at the command that we're

151
00:05:50.030 --> 00:05:51.070
going to use here.

152
00:05:51.070 --> 00:05:55.060
We still going to use curl but instead of using

153
00:05:55.060 --> 00:05:58.000
the unix socket we're going to use the commands

154
00:05:58.000 --> 00:05:59.040
which will allow us to pause

155
00:05:59.040 --> 00:06:02.040
the cert, the certificate authority cert

156
00:06:02.040 --> 00:06:03.040
and the key.

157
00:06:03.040 --> 00:06:08.000
And those are paused using --cert option,

158
00:06:08.000 --> 00:06:10.060
- -ca cert option,

159
00:06:10.060 --> 00:06:13.030
and --key option.

160
00:06:13.030 --> 00:06:15.080
And their values are coming from the Docker machine

161
00:06:15.080 --> 00:06:17.090
that we're going to create rather that we have

162
00:06:17.090 --> 00:06:20.010
created on the Windows machine.

163
00:06:20.010 --> 00:06:21.090
The value for these keys

164
00:06:21.090 --> 00:06:23.040
as you can see is coming from

165
00:06:23.040 --> 00:06:25.010
users arungupta.

166
00:06:25.010 --> 00:06:27.080
That's my user profile directory .docker.

167
00:06:27.080 --> 00:06:30.020
That's where all the certificates are stored.

168
00:06:30.020 --> 00:06:32.030
Then within .docker we look at machine,

169
00:06:32.030 --> 00:06:34.040
machines, and the machine name.

170
00:06:34.040 --> 00:06:36.070
By default, the machine name is default

171
00:06:36.070 --> 00:06:38.000
and then I'm giving it

172
00:06:38.000 --> 00:06:39.070
the actual file which is cert.pm

173
00:06:39.070 --> 00:06:45.060
ca.pm and key.pm.

174
00:06:45.060 --> 00:06:46.090
Those are my three files

175
00:06:46.090 --> 00:06:48.090
and then I'm saying https

176
00:06:48.090 --> 00:06:49.090
because I'm making a connection

177
00:06:49.090 --> 00:06:51.080
over https now.

178
00:06:51.080 --> 00:06:54.060
This is the IP address off the docker mach.

179
00:06:54.060 --> 00:06:57.010
I need to explicitly specify the port,

180
00:06:57.010 --> 00:06:59.080
2376 and then container (mumbles)

181
00:06:59.080 --> 00:07:02.010
is a standard Docker remote API.

182
00:07:02.010 --> 00:07:05.000
So now, if I hit Enter here

183
00:07:05.000 --> 00:07:07.010
it's going to start showing me a similar output

184
00:07:07.010 --> 00:07:09.080
that was shown to us on a Docker Mac.

185
00:07:09.080 --> 00:07:12.070
Let's look at another API.

186
00:07:12.070 --> 00:07:15.000
Docker system, events API.

187
00:07:15.000 --> 00:07:15.080
Okay?

188
00:07:15.080 --> 00:07:17.090
Now when I say Docker system events

189
00:07:17.090 --> 00:07:19.030
nothing happens to big events.

190
00:07:19.030 --> 00:07:20.050
But essentially what it's doing is

191
00:07:20.050 --> 00:07:22.090
it's spitting out the events

192
00:07:22.090 --> 00:07:24.080
that are generated by the system.

193
00:07:24.080 --> 00:07:27.010
So let's create some space here

194
00:07:27.010 --> 00:07:28.000
and I'm going to open up

195
00:07:28.000 --> 00:07:30.090
a new tab here and in this new tab

196
00:07:30.090 --> 00:07:36.070
let's set up our PS1 first of all.

197
00:07:36.070 --> 00:07:37.080
Okay, I'm going to say

198
00:07:37.080 --> 00:07:41.060
Docker run-d.

199
00:07:41.060 --> 00:07:42.080
I don't care about the name

200
00:07:42.080 --> 00:07:44.060
or anything else at this point of time.

201
00:07:44.060 --> 00:07:47.060
I just want to run a while fly instance here, okay?

202
00:07:47.060 --> 00:07:49.030
So let's go back to this tab here

203
00:07:49.030 --> 00:07:50.020
for a second.

204
00:07:50.020 --> 00:07:52.030
No events have been generated

205
00:07:52.030 --> 00:07:53.040
and now I'm going to say

206
00:07:53.040 --> 00:07:55.050
Docker run -d, cheapest while fly

207
00:07:55.050 --> 00:07:58.010
and if I go back here,

208
00:07:58.010 --> 00:08:00.060
You can see the events that are being generated.

209
00:08:00.060 --> 00:08:03.010
It says Container create,

210
00:08:03.010 --> 00:08:06.030
network connect and container stark.

211
00:08:06.030 --> 00:08:08.000
So those are the events that you can start

212
00:08:08.000 --> 00:08:08.090
monitoring.

213
00:08:08.090 --> 00:08:10.090
Let's create some space here.

214
00:08:10.090 --> 00:08:11.070
Let's take a look at

215
00:08:11.070 --> 00:08:14.020
the listing here in this tab

216
00:08:14.020 --> 00:08:18.050
and I can say, Docker container rm.

217
00:08:18.050 --> 00:08:20.070
I'm going to take the while fly container

218
00:08:20.070 --> 00:08:22.070
and paste the container ready

219
00:08:22.070 --> 00:08:24.030
and remove it.

220
00:08:24.030 --> 00:08:28.030
And once again, I can see container kill,

221
00:08:28.030 --> 00:08:30.080
container die, network disconnect

222
00:08:30.080 --> 00:08:32.010
and container destroy.

223
00:08:32.010 --> 00:08:33.050
So you can start looking at

224
00:08:33.050 --> 00:08:34.060
not just the containers

225
00:08:34.060 --> 00:08:35.060
but the health of the system

226
00:08:35.060 --> 00:08:37.020
comprehensively as well.

227
00:08:37.020 --> 00:08:39.010
So these are some handy utilities

228
00:08:39.010 --> 00:08:40.080
for you that are available to you

229
00:08:40.080 --> 00:08:43.000
as part of the Docker CLI itself.

