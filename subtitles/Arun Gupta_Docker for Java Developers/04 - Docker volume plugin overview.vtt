WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] We looked at some

2
00:00:01.030 --> 00:00:05.030
of the strategies for system containers: how volumes

3
00:00:05.030 --> 00:00:09.050
are created, how and where the volumes are stored.

4
00:00:09.050 --> 00:00:13.060
In this section we'll take a look at Docker Volume Plugin.

5
00:00:13.060 --> 00:00:15.020
What is Docker Volume Plugin?

6
00:00:15.020 --> 00:00:18.060
Docker Volume Plugin aligns well with batteries included

7
00:00:18.060 --> 00:00:21.030
but replaceable principle of Docker.

8
00:00:21.030 --> 00:00:24.020
There's a default driver that supports local,

9
00:00:24.020 --> 00:00:27.040
host-based volumes that is already included with Docker,

10
00:00:27.040 --> 00:00:29.020
and we saw examples of that.

11
00:00:29.020 --> 00:00:32.050
The default behavior can be extended or replaced

12
00:00:32.050 --> 00:00:34.080
to support new storage back ends

13
00:00:34.080 --> 00:00:36.070
when additional are installed.

14
00:00:36.070 --> 00:00:39.090
Typical your plugin would allow to use block storage devices

15
00:00:39.090 --> 00:00:43.010
like Amazon EBS or the distributed five-system storage

16
00:00:43.010 --> 00:00:45.000
like CEPH and Blester FS.

17
00:00:45.000 --> 00:00:48.000
These plugins ship with their own c-line tools as well

18
00:00:48.000 --> 00:00:51.020
to manage the life cycle of storage volumes.

19
00:00:51.020 --> 00:00:52.040
So how does it work?

20
00:00:52.040 --> 00:00:54.080
Well, there is a Docker Client and there is a Docker Host.

21
00:00:54.080 --> 00:00:58.040
And then there is a default local volume plugin

22
00:00:58.040 --> 00:00:59.030
that is available.

23
00:00:59.030 --> 00:01:01.040
That's exactly what it's being used for

24
00:01:01.040 --> 00:01:05.000
per container sandbox whether implicit or explicit.

25
00:01:05.000 --> 00:01:08.000
You can install the plug in which comes typically

26
00:01:08.000 --> 00:01:10.040
with the plugin Daemon and a plugin client.

27
00:01:10.040 --> 00:01:12.020
The plugin client will allow you to manage

28
00:01:12.020 --> 00:01:15.010
the lifecycle of the volume if you want to do it externally,

29
00:01:15.010 --> 00:01:17.040
but otherwise, that functionality can maybe be exposed

30
00:01:17.040 --> 00:01:20.000
using plugin Daemon itself, but essentially,

31
00:01:20.000 --> 00:01:22.030
the plugin Daemon will give you access to

32
00:01:22.030 --> 00:01:24.060
multiple storage back ends.

33
00:01:24.060 --> 00:01:26.060
So, what we going to use here?

34
00:01:26.060 --> 00:01:31.000
We're going to use a Docker Volume Plugin for Portworx.

35
00:01:31.000 --> 00:01:31.080
What is Portworx?

36
00:01:31.080 --> 00:01:35.040
Portworx is easy-to deploy container data services.

37
00:01:35.040 --> 00:01:39.030
Anytime you are looking to deploy containers that has data,

38
00:01:39.030 --> 00:01:41.030
that's when you're going to think about Portworx.

39
00:01:41.030 --> 00:01:43.010
It gives you persistence, replication,

40
00:01:43.010 --> 00:01:47.050
snapshots, encryption, and many more functionalities.

41
00:01:47.050 --> 00:01:49.060
You may wonder why Portworx?

42
00:01:49.060 --> 00:01:53.010
Well, Portworx gives you container granular volumes.

43
00:01:53.010 --> 00:01:55.080
It can take multiple EBS volumes per host

44
00:01:55.080 --> 00:02:00.000
and aggregate the capacity and derive container granular

45
00:02:00.000 --> 00:02:02.040
virtual soft volumes per container.

46
00:02:02.040 --> 00:02:05.030
Portworx will encrypt the data at block level

47
00:02:05.030 --> 00:02:09.020
across multiple compute instances across availability zones.

48
00:02:09.020 --> 00:02:11.050
As the application controllers restart ports

49
00:02:11.050 --> 00:02:14.010
on different nodes, the data will still be available

50
00:02:14.010 --> 00:02:15.000
on these nodes.

51
00:02:15.000 --> 00:02:20.020
Portworx also implements container granular snapshots.

52
00:02:20.020 --> 00:02:24.000
Class of service tiering on top

53
00:02:24.000 --> 00:02:27.020
of the available physical volumes.

54
00:02:27.020 --> 00:02:30.000
And last but not least, Portworx itself

55
00:02:30.000 --> 00:02:34.030
is deployed as a container granular storage

56
00:02:34.030 --> 00:02:36.040
with any property, such as size,

57
00:02:36.040 --> 00:02:39.070
class of service, encryption key, et cetera.

58
00:02:39.070 --> 00:02:40.080
So how does it work?

59
00:02:40.080 --> 00:02:44.070
You would Docker Host, which is that standard model

60
00:02:44.070 --> 00:02:46.070
Portworx is available in two flavors.

61
00:02:46.070 --> 00:02:49.000
There's a PX-Dev, which is open-source to

62
00:02:49.000 --> 00:02:51.010
win a proversion, and there's PX-Enterprise.

63
00:02:51.010 --> 00:02:53.030
We're going to be using the PX-Dev container

64
00:02:53.030 --> 00:02:55.010
that comes with the Portworx client,

65
00:02:55.010 --> 00:02:57.090
and essentially we're going to be storing our volume

66
00:02:57.090 --> 00:02:59.070
on Amazon EBS.

67
00:02:59.070 --> 00:03:03.000
With that, let's take a look at what can we do with it?

