WEBVTT
1
00:00:00.000 --> 00:00:02.010
- [Instructor] We have seen how to deploy

2
00:00:02.010 --> 00:00:05.060
a multi-contained application across multiple hosts.

3
00:00:05.060 --> 00:00:07.080
That's your typical production scenario

4
00:00:07.080 --> 00:00:10.000
or even development scenario for that sake.

5
00:00:10.000 --> 00:00:12.010
Seldom cases you may want to have

6
00:00:12.010 --> 00:00:14.050
to manage the nodes by yourself.

7
00:00:14.050 --> 00:00:16.080
Let's take a look at that.

8
00:00:16.080 --> 00:00:21.090
Here I have my six-node cluster running.

9
00:00:21.090 --> 00:00:25.090
I may want to upgrade a node say change an operating system,

10
00:00:25.090 --> 00:00:30.070
add more memory, add more CPU, attach an SSD,

11
00:00:30.070 --> 00:00:33.040
or for some sake, I want to get the node out.

12
00:00:33.040 --> 00:00:37.090
What you do in that case is you say docker node command,

13
00:00:37.090 --> 00:00:41.010
and then you say update and change the availability

14
00:00:41.010 --> 00:00:43.080
to drain and you give it a node name.

15
00:00:43.080 --> 00:00:45.020
Well, how do you find out the node name?

16
00:00:45.020 --> 00:00:48.000
Well, you do docker node LS, and that shows you

17
00:00:48.000 --> 00:00:50.060
all the nodes that are available to you.

18
00:00:50.060 --> 00:00:54.010
Now if you do do that, then essentially it's equal

19
00:00:54.010 --> 00:00:56.010
to saying your container is

20
00:00:56.010 --> 00:00:58.000
no longer available on that node.

21
00:00:58.000 --> 00:00:59.090
Then, Swarm kicks in

22
00:00:59.090 --> 00:01:03.000
it says desired and actual are not matching,

23
00:01:03.000 --> 00:01:06.010
so it's going to reschedule the container on a different node.

24
00:01:06.010 --> 00:01:07.080
That's kind of cool.

25
00:01:07.080 --> 00:01:09.060
In certain cases, you may not want

26
00:01:09.060 --> 00:01:11.070
to have the container reschedule.

27
00:01:11.070 --> 00:01:14.000
You may want to take the container

28
00:01:14.000 --> 00:01:16.010
or the node, rather, offline so that you have

29
00:01:16.010 --> 00:01:18.040
the ability to debug the container

30
00:01:18.040 --> 00:01:20.050
while it's running in production.

31
00:01:20.050 --> 00:01:22.000
In which case you say, I'm going to

32
00:01:22.000 --> 00:01:25.030
change the availability to pause.

33
00:01:25.030 --> 00:01:26.080
What that means is the container

34
00:01:26.080 --> 00:01:28.050
will continue to be running.

35
00:01:28.050 --> 00:01:31.020
It will not be rescheduled on a different node.

36
00:01:31.020 --> 00:01:33.010
You can debug the container as if

37
00:01:33.010 --> 00:01:34.080
it's still running in production.

38
00:01:34.080 --> 00:01:37.050
Of course, no more containers will be sent

39
00:01:37.050 --> 00:01:39.060
to this particular node.

40
00:01:39.060 --> 00:01:41.040
Once you are done with debugging,

41
00:01:41.040 --> 00:01:44.030
you can bring the node back to availability.

42
00:01:44.030 --> 00:01:48.050
Then everything is hunky dory as it was earlier.

43
00:01:48.050 --> 00:01:50.040
Another concept that you want to understand is labels

44
00:01:50.040 --> 00:01:54.090
Depending upon how your nodes are configured,

45
00:01:54.090 --> 00:01:56.020
if you have a homogenous cluster,

46
00:01:56.020 --> 00:01:58.060
then you don't have an issue because then each node

47
00:01:58.060 --> 00:02:01.050
in the cluster has the same amount of capacity,

48
00:02:01.050 --> 00:02:04.050
same amount of memory, same amount of CPU.

49
00:02:04.050 --> 00:02:06.080
Typically you would create a heterogeneous cluster

50
00:02:06.080 --> 00:02:08.040
just to make sure you are using

51
00:02:08.040 --> 00:02:10.040
your associates efficiently.

52
00:02:10.040 --> 00:02:13.080
In that case, you may want to assign labels.

53
00:02:13.080 --> 00:02:16.050
For example, let's say that two nodes on the right

54
00:02:16.050 --> 00:02:20.030
have SSD attached to it, and the three nodes on the left,

55
00:02:20.030 --> 00:02:22.020
the worker nodes, that don't.

56
00:02:22.020 --> 00:02:26.020
What you can do is you can use Docker OPTS property.

57
00:02:26.020 --> 00:02:28.000
Set labels to the node.

58
00:02:28.000 --> 00:02:34.020
In this case what I'm saying is --label=wildfly.storage=ssd.

59
00:02:34.020 --> 00:02:37.000
Once I assign the label, how can I use it?

60
00:02:37.000 --> 00:02:39.050
Well, when I deploy my service I can say

61
00:02:39.050 --> 00:02:43.050
docker service create three replicas name is web.

62
00:02:43.050 --> 00:02:45.010
I can specify a constraint.

63
00:02:45.010 --> 00:02:47.040
Only deploy this service on the nodes

64
00:02:47.040 --> 00:02:49.020
that need the constraint.

65
00:02:49.020 --> 00:02:51.090
The label and the constraint have to match.

66
00:02:51.090 --> 00:02:54.060
In this case, even though there are three nodes

67
00:02:54.060 --> 00:02:56.070
on the left, but the constraints on the label

68
00:02:56.070 --> 00:02:58.010
are only matching on the right side,

69
00:02:58.010 --> 00:03:01.000
so that's where the container will be deployed.

70
00:03:01.000 --> 00:03:03.090
If you scale, even the scale would honor that

71
00:03:03.090 --> 00:03:06.050
because original service definition says

72
00:03:06.050 --> 00:03:08.080
make sure the label and the constraints are matching.

73
00:03:08.080 --> 00:03:10.080
What that means is now if I can deploy

74
00:03:10.080 --> 00:03:14.050
my database container, say the couch based container,

75
00:03:14.050 --> 00:03:16.080
those would be deployed on the nodes

76
00:03:16.080 --> 00:03:19.000
that do not have any labels on them.

77
00:03:19.000 --> 00:03:21.010
Remember, the labels and the constraints,

78
00:03:21.010 --> 00:03:23.040
they both have to match in order for a service

79
00:03:23.040 --> 00:03:25.030
to be deployed on that node.

80
00:03:25.030 --> 00:03:28.020
This gives you some control over how and where

81
00:03:28.020 --> 00:03:30.070
you want your service to be deployed

82
00:03:30.070 --> 00:03:34.020
and how you can efficiently utilize your resources.

83
00:03:34.020 --> 00:03:36.090
Another concept that you want to understand is,

84
00:03:36.090 --> 00:03:38.060
so far all the examples that we have seen

85
00:03:38.060 --> 00:03:40.060
is of replicated service.

86
00:03:40.060 --> 00:03:43.030
What that means is I can create a service

87
00:03:43.030 --> 00:03:45.090
and I can replicate it as many times,

88
00:03:45.090 --> 00:03:49.050
but in certain cases, you may want to run a global service.

89
00:03:49.050 --> 00:03:52.050
Prometheus, for example, is a logging service.

90
00:03:52.050 --> 00:03:55.000
You want to run a single instance of that

91
00:03:55.000 --> 00:03:58.060
on each of the nodes of the cluster.

92
00:03:58.060 --> 00:04:01.060
Then, you can say docker service create

93
00:04:01.060 --> 00:04:04.010
just specify the mode as global.

94
00:04:04.010 --> 00:04:06.010
By default the mode is replicated.

95
00:04:06.010 --> 00:04:08.090
Give it a service name, and the image name,

96
00:04:08.090 --> 00:04:09.090
and there you go.

97
00:04:09.090 --> 00:04:13.010
A new service is created with a single instance

98
00:04:13.010 --> 00:04:15.080
of the container on each of the nodes.

99
00:04:15.080 --> 00:04:17.080
Now if a new node is added to the cluster,

100
00:04:17.080 --> 00:04:19.050
that service is automatically created

101
00:04:19.050 --> 00:04:21.000
with a single instance over there.

