WEBVTT
1
00:00:00.060 --> 00:00:02.080
- [Instructor] Maven is a common way how you build

2
00:00:02.080 --> 00:00:05.020
and package and deploy your Java application.

3
00:00:05.020 --> 00:00:07.000
The other common way, typically, is Gradle.

4
00:00:07.000 --> 00:00:09.030
So this section, we'll take a look at how,

5
00:00:09.030 --> 00:00:11.060
if you are packaging your application using Gradle

6
00:00:11.060 --> 00:00:15.020
and what kind of Gradle and Docker plugins are available.

7
00:00:15.020 --> 00:00:17.040
First, we will look at our application.

8
00:00:17.040 --> 00:00:20.040
Fortunately, in our case we will use

9
00:00:20.040 --> 00:00:23.020
the same application as we use for Maven.

10
00:00:23.020 --> 00:00:26.020
So you go to arun-gubta/docker-java-sample.

11
00:00:26.020 --> 00:00:28.070
This is the GitHub repo that you're going to be looking at.

12
00:00:28.070 --> 00:00:31.070
In my case, I have this application open in NetBeans.

13
00:00:31.070 --> 00:00:34.090
So let's take a look at it in NetBeans as well.

14
00:00:34.090 --> 00:00:36.090
Here we are in NetBeans,

15
00:00:36.090 --> 00:00:39.070
and if I were to look at my project,

16
00:00:39.070 --> 00:00:43.010
it's still the same Hello World! application.

17
00:00:43.010 --> 00:00:44.070
Now, if I look at the files tab here

18
00:00:44.070 --> 00:00:47.040
and I can look at my build.gradle here,

19
00:00:47.040 --> 00:00:49.010
you can see that there's my build script

20
00:00:49.010 --> 00:00:51.070
and I'm specifying the repositories.

21
00:00:51.070 --> 00:00:54.060
I need to specify the dependencies in terms of classpath.

22
00:00:54.060 --> 00:00:57.030
Again, just like Maven, for Gradle as well

23
00:00:57.030 --> 00:00:59.000
there are several plugins available.

24
00:00:59.000 --> 00:01:02.030
This one is my favorite because this is the easiest to use.

25
00:01:02.030 --> 00:01:05.030
It allows you to package your application

26
00:01:05.030 --> 00:01:07.020
using Docker remote API

27
00:01:07.020 --> 00:01:10.060
but it has also certain defaults that are available

28
00:01:10.060 --> 00:01:13.090
that allows you to simply package an application

29
00:01:13.090 --> 00:01:17.000
for Java, and that's the part that I love about it.

30
00:01:17.000 --> 00:01:18.080
So, as a matter of fact, you will see

31
00:01:18.080 --> 00:01:21.010
what the plugin that we're applying here is,

32
00:01:21.010 --> 00:01:23.040
docker-java-application plugin.

33
00:01:23.040 --> 00:01:26.000
Well, of course you've got to import the right packages,

34
00:01:26.000 --> 00:01:28.010
you give your group and version.

35
00:01:28.010 --> 00:01:29.020
This is my main class name.

36
00:01:29.020 --> 00:01:32.010
This is pretty standard data stuff here.

37
00:01:32.010 --> 00:01:35.010
And here in the Docker fragment I can define

38
00:01:35.010 --> 00:01:37.000
how my Java application looks.

39
00:01:37.000 --> 00:01:39.020
There are default targets that are available to you,

40
00:01:39.020 --> 00:01:41.070
so in this case, I'm saying, Java application.

41
00:01:41.070 --> 00:01:44.010
There are default values that I'm overriding.

42
00:01:44.010 --> 00:01:46.080
So for example, I'm saying my base image

43
00:01:46.080 --> 00:01:49.010
is going to be openjdk:latest.

44
00:01:49.010 --> 00:01:51.010
I'm defining a tag for my image,

45
00:01:51.010 --> 00:01:53.020
and in this case, it's going to be hellojava.

46
00:01:53.020 --> 00:01:56.090
Last but not the least, I can define some custom tasks.

47
00:01:56.090 --> 00:02:00.000
So, create a container and start a container.

48
00:02:00.000 --> 00:02:02.010
In this case, startContainer actually

49
00:02:02.010 --> 00:02:04.030
depends upon createContainer.

50
00:02:04.030 --> 00:02:08.040
The createContainer will depend on BuildImage itself.

51
00:02:08.040 --> 00:02:10.010
Essentially, you have, again,

52
00:02:10.010 --> 00:02:11.090
a flow being created over here.

53
00:02:11.090 --> 00:02:14.090
Let's take a look at how a typical Grader developer

54
00:02:14.090 --> 00:02:18.080
will use this plugin, and what the output would look like.

55
00:02:18.080 --> 00:02:21.020
So let's go to a terminal for that.

56
00:02:21.020 --> 00:02:22.050
Now here, I'm in my terminal

57
00:02:22.050 --> 00:02:25.000
and let's look at the directory.

58
00:02:25.000 --> 00:02:26.060
This is docker Java sample.

59
00:02:26.060 --> 00:02:27.090
We are familiar with this.

60
00:02:27.090 --> 00:02:31.000
A typical Gradle flow would look like,

61
00:02:31.000 --> 00:02:35.010
I will just say gradlew, and I will say build and run.

62
00:02:35.010 --> 00:02:37.050
This is going to build my application

63
00:02:37.050 --> 00:02:39.030
and it's going to run my application.

64
00:02:39.030 --> 00:02:41.060
In this case, it's just taking the simple Java application

65
00:02:41.060 --> 00:02:43.060
and it's saying "Hello World!"

66
00:02:43.060 --> 00:02:45.020
Which is exactly what we expected.

67
00:02:45.020 --> 00:02:46.030
So that's not bad.

68
00:02:46.030 --> 00:02:48.070
Now, we looked at Builder Gradle,

69
00:02:48.070 --> 00:02:50.090
and we looked at the Docker Gradle plugin as well.

70
00:02:50.090 --> 00:02:53.070
Let's see how my flow changes for that.

71
00:02:53.070 --> 00:02:55.030
This is a little bit different.

72
00:02:55.030 --> 00:02:58.060
In that sense, there is no profile, in this case here,

73
00:02:58.060 --> 00:03:00.030
so what I'm going to do is,

74
00:03:00.030 --> 00:03:02.070
I'm going to use the same gradlew command

75
00:03:02.070 --> 00:03:06.050
and I'm going to say dockerBuildImage.

76
00:03:06.050 --> 00:03:08.050
Now, this is a default target

77
00:03:08.050 --> 00:03:11.010
that is available to you that you can use,

78
00:03:11.010 --> 00:03:13.060
just because you're using the Docker Gradle plugin

79
00:03:13.060 --> 00:03:16.040
or Docker Gradle Java plugin, particularly.

80
00:03:16.040 --> 00:03:19.020
So these are some default targets that are available to you.

81
00:03:19.020 --> 00:03:21.020
If I say, build this image,

82
00:03:21.020 --> 00:03:23.040
it builds the image for me,

83
00:03:23.040 --> 00:03:26.070
and you can see there is a from target here.

84
00:03:26.070 --> 00:03:28.050
There is adding the target here.

85
00:03:28.050 --> 00:03:30.020
It automatically takes the artifact that is generated

86
00:03:30.020 --> 00:03:32.020
and included in there,

87
00:03:32.020 --> 00:03:34.040
and it also adds an entry point for me.

88
00:03:34.040 --> 00:03:35.080
It also exposes a port.

89
00:03:35.080 --> 00:03:38.010
All of these values can be overridden,

90
00:03:38.010 --> 00:03:40.050
but most of the time the defaults would work for you.

91
00:03:40.050 --> 00:03:43.010
If we look at the list of images

92
00:03:43.010 --> 00:03:45.020
that are available to us now,

93
00:03:45.020 --> 00:03:47.080
this hellojava latest essentially, this was generated

94
00:03:47.080 --> 00:03:51.020
about 23 seconds ago, is our latest image.

95
00:03:51.020 --> 00:03:54.030
That's good, now we can generate an image.

96
00:03:54.030 --> 00:03:56.000
Now, I want to run the image.

97
00:03:56.000 --> 00:03:59.020
What I will do is, I will go to gradlew,

98
00:03:59.020 --> 00:04:03.030
and if you remember, all I will say is startContainer.

99
00:04:03.030 --> 00:04:06.030
So I'm going to start the container here.

100
00:04:06.030 --> 00:04:08.090
Well, in this case, startContainer depends

101
00:04:08.090 --> 00:04:11.070
upon dockerBuildImage or createContainer,

102
00:04:11.070 --> 00:04:13.090
and then all those commands are executed.

103
00:04:13.090 --> 00:04:16.020
Now the startContainer here is a little bit different.

104
00:04:16.020 --> 00:04:18.030
It starts the container in the background,

105
00:04:18.030 --> 00:04:20.000
so you'll be surprised.

106
00:04:20.000 --> 00:04:21.060
I don't see the "Hello World!" output.

107
00:04:21.060 --> 00:04:23.000
Well, there is a way by which

108
00:04:23.000 --> 00:04:24.070
we can see the "Hello World!" output.

109
00:04:24.070 --> 00:04:28.000
Let's take a look at docker container ls.

110
00:04:28.000 --> 00:04:30.000
Now, the containers are running, because remember

111
00:04:30.000 --> 00:04:32.050
our container was just printing "Hello World!"

112
00:04:32.050 --> 00:04:36.020
So the container has executed and exited as well.

113
00:04:36.020 --> 00:04:38.000
So let's take a look at the complete list

114
00:04:38.000 --> 00:04:39.060
of containers in that case.

115
00:04:39.060 --> 00:04:42.090
It says this container was exited about 32 seconds ago,

116
00:04:42.090 --> 00:04:45.000
and this is our container ID,

117
00:04:45.000 --> 00:04:47.050
and it's got a nice name, gracious_knuth.

118
00:04:47.050 --> 00:04:49.080
Let's pick up this container ID.

119
00:04:49.080 --> 00:04:54.030
And we can say docker container logs

120
00:04:54.030 --> 00:04:56.000
and show me the logs.

121
00:04:56.000 --> 00:04:56.080
Hello World!

122
00:04:56.080 --> 00:05:00.030
This is exactly where your output is setting.

123
00:05:00.030 --> 00:05:02.020
Once again, if you're using a Builder Gradle

124
00:05:02.020 --> 00:05:04.010
to build your Java application,

125
00:05:04.010 --> 00:05:06.050
you have full support that is available.

126
00:05:06.050 --> 00:05:08.080
Let's take a look at some other extensions

127
00:05:08.080 --> 00:05:11.090
that are available as part of the Docker Gradle plugin.

128
00:05:11.090 --> 00:05:15.080
In the browser, bmuschko, Gradle Docker plugin

129
00:05:15.080 --> 00:05:18.050
is where all of your content is living.

130
00:05:18.050 --> 00:05:20.070
You can read all the documentation here.

131
00:05:20.070 --> 00:05:22.060
It talks about the usages.

132
00:05:22.060 --> 00:05:25.060
It talks about how you can use with a Docker remote API,

133
00:05:25.060 --> 00:05:27.090
which gives you a lot more flexibility.

134
00:05:27.090 --> 00:05:29.090
Or, you can just use a Java version of it,

135
00:05:29.090 --> 00:05:31.050
which is an (mumbling) version,

136
00:05:31.050 --> 00:05:33.000
but that works very well.

137
00:05:33.000 --> 00:05:35.020
You can look at the custom tasks that are available.

138
00:05:35.020 --> 00:05:37.000
Docker info, Docker version.

139
00:05:37.000 --> 00:05:39.030
You can look at what kind of images are available

140
00:05:39.030 --> 00:05:41.040
or the plugins, what they provide,

141
00:05:41.040 --> 00:05:43.060
and the Docker build image is the one that we used.

142
00:05:43.060 --> 00:05:46.010
You can look at listing the image, pushing an image.

143
00:05:46.010 --> 00:05:49.020
Just very similar to the Docker Maven plugin,

144
00:05:49.020 --> 00:05:50.090
you have a Docker Gradle plugin

145
00:05:50.090 --> 00:05:53.040
which offers similar functionality to you.

146
00:05:53.040 --> 00:05:54.090
You can keep going down here.

147
00:05:54.090 --> 00:05:57.020
It talks about, what can you do with the container?

148
00:05:57.020 --> 00:05:59.070
Start, stop, wait, kill, inspect,

149
00:05:59.070 --> 00:06:01.050
all different kinds of things that you can do

150
00:06:01.050 --> 00:06:03.030
with the container here.

151
00:06:03.030 --> 00:06:04.080
And if you keep going down here,

152
00:06:04.080 --> 00:06:06.080
it talks a little bit more about the usage examples,

153
00:06:06.080 --> 00:06:08.070
how you can build an image.

154
00:06:08.070 --> 00:06:11.010
There is a reactive version of the plugin available as well

155
00:06:11.010 --> 00:06:13.060
if you want to get a little bit more fancy.

156
00:06:13.060 --> 00:06:15.020
And last but not the least,

157
00:06:15.020 --> 00:06:16.080
this is the plugin that we actually used

158
00:06:16.080 --> 00:06:18.080
and these were the extension properties

159
00:06:18.080 --> 00:06:20.060
that we were overriding, essentially.

160
00:06:20.060 --> 00:06:22.050
What base image you want to use,

161
00:06:22.050 --> 00:06:24.050
and remember we saw, by default,

162
00:06:24.050 --> 00:06:26.050
there was a maintainer tab that was added?

163
00:06:26.050 --> 00:06:29.030
It uses a value of user.home system property.

164
00:06:29.030 --> 00:06:31.030
We can start overriding these values

165
00:06:31.030 --> 00:06:33.060
by defining these extension properties

166
00:06:33.060 --> 00:06:36.060
in our Docker fragment of the Builder Gradle.

167
00:06:36.060 --> 00:06:40.010
And that is a sample that is shown here in the example.

168
00:06:40.010 --> 00:06:42.030
Just like Docker Maven plugin,

169
00:06:42.030 --> 00:06:44.060
Docker Gradle plugin is equally powerful

170
00:06:44.060 --> 00:06:46.050
and it gives you reasonable defaults

171
00:06:46.050 --> 00:06:49.070
to easily help you build your Docker image

172
00:06:49.070 --> 00:06:52.000
and run your container using Gradle.

