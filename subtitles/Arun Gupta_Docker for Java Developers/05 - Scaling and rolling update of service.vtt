WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] Let's take a look

2
00:00:01.050 --> 00:00:03.020
how we can scale a service.

3
00:00:03.020 --> 00:00:05.060
That means, if there are three replicas

4
00:00:05.060 --> 00:00:07.070
of a service running, scale it to six,

5
00:00:07.070 --> 00:00:10.090
up or down from three to one, or three to six,

6
00:00:10.090 --> 00:00:13.040
and then rolling update of a service.

7
00:00:13.040 --> 00:00:16.000
What that means is, if you have a particular version

8
00:00:16.000 --> 00:00:18.030
of a service running, and then you want

9
00:00:18.030 --> 00:00:21.050
to upgrade all the containers, or all the replicas

10
00:00:21.050 --> 00:00:23.090
of the service to a newer version.

11
00:00:23.090 --> 00:00:26.020
Now scaling is pretty straightforward.

12
00:00:26.020 --> 00:00:28.060
Now it's a declarative state anyway,

13
00:00:28.060 --> 00:00:31.080
so all you say is docker service scale,

14
00:00:31.080 --> 00:00:34.080
so it's a subcommand of service command,

15
00:00:34.080 --> 00:00:36.050
and then you give the service name,

16
00:00:36.050 --> 00:00:38.070
and then you say how many instances you want.

17
00:00:38.070 --> 00:00:42.050
If you say six, it just runs six containers for you.

18
00:00:42.050 --> 00:00:44.080
In this case, it's running all six containers

19
00:00:44.080 --> 00:00:47.050
on worker nodes, but as discussed earlier,

20
00:00:47.050 --> 00:00:50.070
it could have been very well the manager node, as well.

21
00:00:50.070 --> 00:00:53.030
So scaling is pretty simple, and we'll take a look

22
00:00:53.030 --> 00:00:55.020
at that in a second.

23
00:00:55.020 --> 00:00:56.050
Rolling update.

24
00:00:56.050 --> 00:01:00.030
Now in this case, I have six replicas

25
00:01:00.030 --> 00:01:04.020
of a particular application running on my worker nodes.

26
00:01:04.020 --> 00:01:07.080
I want to upgrade those versions from version one

27
00:01:07.080 --> 00:01:09.030
to version two.

28
00:01:09.030 --> 00:01:10.080
Let's say version one is already running,

29
00:01:10.080 --> 00:01:12.070
and I want to upgrade to version two.

30
00:01:12.070 --> 00:01:16.070
Now the command for that would be, docker service,

31
00:01:16.070 --> 00:01:18.080
the subcommand would be, update.

32
00:01:18.080 --> 00:01:22.060
Then I'll give it the name, web, which is my service name,

33
00:01:22.060 --> 00:01:25.070
and then the easiest way is, I can give it the new image

34
00:01:25.070 --> 00:01:30.010
using --image option, and then I give the image name,

35
00:01:30.010 --> 00:01:32.060
which in this case is wildfly:2,

36
00:01:32.060 --> 00:01:34.090
or it could have been wildfly-app:2,

37
00:01:34.090 --> 00:01:36.050
whatever your image name is.

38
00:01:36.050 --> 00:01:39.070
Then comes --update-parallelism.

39
00:01:39.070 --> 00:01:42.080
I'm saying update two images at a point in time,

40
00:01:42.080 --> 00:01:45.040
and then after two images are updated,

41
00:01:45.040 --> 00:01:47.090
and wait for for 10 seconds.

42
00:01:47.090 --> 00:01:49.060
This 10 second could be critical for you

43
00:01:49.060 --> 00:01:51.080
in case you want the cluster to settle down

44
00:01:51.080 --> 00:01:54.040
or some event to happen to update somebody.

45
00:01:54.040 --> 00:01:57.050
Essentially, two containers are updated,

46
00:01:57.050 --> 00:01:59.010
wait for 10 seconds,

47
00:01:59.010 --> 00:02:00.070
and the next two containers are updated,

48
00:02:00.070 --> 00:02:02.080
wait for 10 seconds, and then finally,

49
00:02:02.080 --> 00:02:06.080
the last two containers are updated and there you go.

50
00:02:06.080 --> 00:02:09.070
So you've upgraded your service from version one

51
00:02:09.070 --> 00:02:10.080
to version two.

52
00:02:10.080 --> 00:02:13.010
Let's see this in action now.

53
00:02:13.010 --> 00:02:15.040
This is a run from our previous section,

54
00:02:15.040 --> 00:02:17.030
so let's see what we can do here.

55
00:02:17.030 --> 00:02:18.090
Let's first clear the screen.

56
00:02:18.090 --> 00:02:21.050
Let's take a look at the list of services

57
00:02:21.050 --> 00:02:22.060
that are running here.

58
00:02:22.060 --> 00:02:24.090
So for that, I am going to say,

59
00:02:24.090 --> 00:02:27.070
docker-machine ssh manager1,

60
00:02:27.070 --> 00:02:29.090
manager1 is the primary manager,

61
00:02:29.090 --> 00:02:31.050
so we are guiding the command to that.

62
00:02:31.050 --> 00:02:35.030
And then we are saying, docker service ls.

63
00:02:35.030 --> 00:02:38.010
So this shows that I have three out

64
00:02:38.010 --> 00:02:40.030
of three replicas, all running.

65
00:02:40.030 --> 00:02:42.010
I can get more details about it.

66
00:02:42.010 --> 00:02:44.090
I can say, ps web.

67
00:02:44.090 --> 00:02:47.010
And then it shows me

68
00:02:47.010 --> 00:02:49.030
that there are two shut down containers

69
00:02:49.030 --> 00:02:51.090
and three containers that are running.

70
00:02:51.090 --> 00:02:54.040
Now this is a little convoluted output for me,

71
00:02:54.040 --> 00:02:58.020
so what I can do is, I can also set up a filter here.

72
00:02:58.020 --> 00:03:05.010
I can say filter, and I can say desired-state=running.

73
00:03:05.010 --> 00:03:10.010
And I may have to escape the code here.

74
00:03:10.010 --> 00:03:11.000
And there you go.

75
00:03:11.000 --> 00:03:12.070
So now I'm seeing only the containers

76
00:03:12.070 --> 00:03:16.010
that are running, and it's a lot easier for me to read.

77
00:03:16.010 --> 00:03:18.040
Let's see how we scale this service.

78
00:03:18.040 --> 00:03:22.080
Just for convenience, we are going to pass asset

79
00:03:22.080 --> 00:03:24.090
into manager1 itself.

80
00:03:24.090 --> 00:03:26.000
So here we are.

81
00:03:26.000 --> 00:03:30.060
And now, I can give the same command here very easily,

82
00:03:30.060 --> 00:03:36.000
saying, docker service ps, apply the filter,

83
00:03:36.000 --> 00:03:41.070
and I'm going to say desired-state=running for web.

84
00:03:41.070 --> 00:03:43.030
And I get the exact same out.

85
00:03:43.030 --> 00:03:44.080
Okay.

86
00:03:44.080 --> 00:03:50.020
Scaling, as we said, is scale web=6.

87
00:03:50.020 --> 00:03:51.050
It just gives me the command right away,

88
00:03:51.050 --> 00:03:53.040
that web scaled to six.

89
00:03:53.040 --> 00:03:55.080
Let's take a look at the services.

90
00:03:55.080 --> 00:03:59.020
And as you can see from the output, on manager2,

91
00:03:59.020 --> 00:04:00.070
it's preparing.

92
00:04:00.070 --> 00:04:02.040
And the reason it's preparing is

93
00:04:02.040 --> 00:04:05.090
because on manager2 the image has never been downloaded.

94
00:04:05.090 --> 00:04:08.060
On the nodes where the image has been downloaded,

95
00:04:08.060 --> 00:04:10.050
the container is already up and running,

96
00:04:10.050 --> 00:04:11.080
so that's pretty cool.

97
00:04:11.080 --> 00:04:16.070
Now if I go back and I say just show me the list

98
00:04:16.070 --> 00:04:20.070
of services, now it says six of six are running.

99
00:04:20.070 --> 00:04:21.090
So that is pretty cool.

100
00:04:21.090 --> 00:04:24.050
Now literally, by a single command,

101
00:04:24.050 --> 00:04:26.080
we can easily fire up the service,

102
00:04:26.080 --> 00:04:27.090
scale the service,

103
00:04:27.090 --> 00:04:29.090
and we could have scaled it down, as well.

104
00:04:29.090 --> 00:04:35.010
Just for convenience, let's remove this service, as well.

105
00:04:35.010 --> 00:04:38.050
And now if I say list the services,

106
00:04:38.050 --> 00:04:40.080
the service is completely gone.

107
00:04:40.080 --> 00:04:42.060
So that shows you how easy it is

108
00:04:42.060 --> 00:04:46.090
to manage the service life cycle from the CLI itself.

109
00:04:46.090 --> 00:04:48.070
The next command that I want to show you is,

110
00:04:48.070 --> 00:04:51.020
as we discussed was, a rolling update of a service.

111
00:04:51.020 --> 00:04:55.020
So I need to create six replicas, for example,

112
00:04:55.020 --> 00:04:57.050
for a particular application.

113
00:04:57.050 --> 00:04:59.050
And the way I'm going to do that is I'm going to say,

114
00:04:59.050 --> 00:05:01.060
docker, service, create,

115
00:05:01.060 --> 00:05:03.090
I'm going to give it the name webapp,

116
00:05:03.090 --> 00:05:07.030
and I'm going to say create six replicas,

117
00:05:07.030 --> 00:05:11.020
and I will say expose it on port 8080:8080,

118
00:05:11.020 --> 00:05:14.070
this is a Swarm wide ingress port for me.

119
00:05:14.070 --> 00:05:17.000
And I'm going to use an application that I've created,

120
00:05:17.000 --> 00:05:22.010
wildfly-app, and I'm going to use version one.

121
00:05:22.010 --> 00:05:25.040
So this is going to create six replicas,

122
00:05:25.040 --> 00:05:27.060
and I have a cluster running, so it's going to be spread

123
00:05:27.060 --> 00:05:30.040
across multiple nodes of the cluster.

124
00:05:30.040 --> 00:05:34.010
And at this point, if I say, docker service ls,

125
00:05:34.010 --> 00:05:37.010
it's saying, okay, none of the replicas are running.

126
00:05:37.010 --> 00:05:39.000
We can get more details about it.

127
00:05:39.000 --> 00:05:42.030
We can say ps webapp.

128
00:05:42.030 --> 00:05:46.080
And, as you can see here, it's showing, preparing.

129
00:05:46.080 --> 00:05:47.090
What that means is

130
00:05:47.090 --> 00:05:50.030
that image is apparently getting downloaded,

131
00:05:50.030 --> 00:05:52.010
and once the image is downloaded,

132
00:05:52.010 --> 00:05:55.010
it will start up the application.

133
00:05:55.010 --> 00:05:59.050
You can also see that we are using wildfly-app:1.

134
00:05:59.050 --> 00:06:02.080
This is version one consistently all across all the nodes.

135
00:06:02.080 --> 00:06:06.030
Let's check the status of our service again,

136
00:06:06.030 --> 00:06:09.020
and now, indeed, all six are running.

137
00:06:09.020 --> 00:06:12.040
Now, let's see if we were to access this application,

138
00:06:12.040 --> 00:06:14.000
how this would look.

139
00:06:14.000 --> 00:06:16.060
I am in the browser window here,

140
00:06:16.060 --> 00:06:19.050
and what I'm going to do is, I'm going to use my master,

141
00:06:19.050 --> 00:06:28.030
which his 192.68.99.100, and the ingress port was 8080,

142
00:06:28.030 --> 00:06:32.090
and here is my app, and here is my index.asp.

143
00:06:32.090 --> 00:06:35.060
Now let me warn you, I'm not a graphics designer,

144
00:06:35.060 --> 00:06:39.000
I am a backend person, so my UIs could be ugly,

145
00:06:39.000 --> 00:06:40.090
but they convey the point.

146
00:06:40.090 --> 00:06:42.010
Ta-da.

147
00:06:42.010 --> 00:06:43.050
I see a bright green page.

148
00:06:43.050 --> 00:06:45.030
I want to see big indicators.

149
00:06:45.030 --> 00:06:47.030
What it says is, it's a simple web application,

150
00:06:47.030 --> 00:06:48.090
version one.

151
00:06:48.090 --> 00:06:51.030
Okay, let's switch back to our terminal.

152
00:06:51.030 --> 00:06:53.060
And now, what we're going to do is,

153
00:06:53.060 --> 00:06:55.070
now we going to rolling update it.

154
00:06:55.070 --> 00:07:00.030
So we can say, docker, service, update, webapp.

155
00:07:00.030 --> 00:07:02.010
That's the one that we want to update

156
00:07:02.010 --> 00:07:05.040
and I am going to change it to a new image,

157
00:07:05.040 --> 00:07:09.000
which is going to be my wildfly-app:2,

158
00:07:09.000 --> 00:07:13.030
and I'm going to say update two at a time,

159
00:07:13.030 --> 00:07:17.060
parallelism, and I'm going to say that value is two,

160
00:07:17.060 --> 00:07:23.000
and then, I'm going to say, within each update,

161
00:07:23.000 --> 00:07:24.090
wait for 10 seconds, okay?

162
00:07:24.090 --> 00:07:26.070
So let's read this command again,

163
00:07:26.070 --> 00:07:29.080
docker, service, update, this particular service,

164
00:07:29.080 --> 00:07:33.030
image, new image is wildfly-app:2,

165
00:07:33.030 --> 00:07:36.080
update, parallelism, that means update two at a time,

166
00:07:36.080 --> 00:07:40.030
or two containers at a time, and between each update,

167
00:07:40.030 --> 00:07:41.050
wait for 10 seconds.

168
00:07:41.050 --> 00:07:44.020
So let me fire this command here,

169
00:07:44.020 --> 00:07:46.050
and let's look at the service here.

170
00:07:46.050 --> 00:07:49.070
So it brings two down, and brings two up.

171
00:07:49.070 --> 00:07:52.070
Let's take a look at this here.

172
00:07:52.070 --> 00:07:54.050
If I see the output here, you can see,

173
00:07:54.050 --> 00:07:58.050
there are one, two, three, four, five six are running

174
00:07:58.050 --> 00:08:00.070
with version one.

175
00:08:00.070 --> 00:08:02.080
And two with version two.

176
00:08:02.080 --> 00:08:05.010
Well, let's use our filter.

177
00:08:05.010 --> 00:08:08.060
We want to see only the running ones, okay?

178
00:08:08.060 --> 00:08:10.070
So if I see a running one,

179
00:08:10.070 --> 00:08:13.030
after 10 seconds, two containers at a given point of time,

180
00:08:13.030 --> 00:08:14.090
they've all been upgraded, okay?

181
00:08:14.090 --> 00:08:16.070
And you can see the difference here.

182
00:08:16.070 --> 00:08:19.020
So these were after 12 and 13 seconds,

183
00:08:19.020 --> 00:08:22.060
they waited for 10 seconds, then after these were done,

184
00:08:22.060 --> 00:08:25.070
but these were the last ones to be done, essentially.

185
00:08:25.070 --> 00:08:29.010
So now, if I go back to my application here,

186
00:08:29.010 --> 00:08:32.050
and I refresh the page, once again, warning,

187
00:08:32.050 --> 00:08:34.050
I'm not a graphics person here,

188
00:08:34.050 --> 00:08:35.090
Ta-da.

189
00:08:35.090 --> 00:08:38.030
It changed from green to red.

190
00:08:38.030 --> 00:08:40.090
But that's sort of how your rolling update work.

191
00:08:40.090 --> 00:08:42.090
Now you saw that live in action.

192
00:08:42.090 --> 00:08:45.070
So just to summarize, in these section,

193
00:08:45.070 --> 00:08:48.090
we saw how easy it is to scale your service

194
00:08:48.090 --> 00:08:51.000
and do a rolling update of a service.

