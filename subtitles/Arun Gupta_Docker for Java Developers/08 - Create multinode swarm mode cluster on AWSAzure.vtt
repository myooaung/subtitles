WEBVTT
1
00:00:00.060 --> 00:00:02.060
- [Narrator] So far we have seen how we can create

2
00:00:02.060 --> 00:00:06.010
multi container application on a single host,

3
00:00:06.010 --> 00:00:07.070
using Docker for Mac.

4
00:00:07.070 --> 00:00:11.000
Then we looked at how we can create a multi container

5
00:00:11.000 --> 00:00:13.020
application and deploy it on a multi node

6
00:00:13.020 --> 00:00:15.050
cluster using Docker Machine.

7
00:00:15.050 --> 00:00:18.020
That's good for development but when you go into production

8
00:00:18.020 --> 00:00:20.010
then you need something enterprise scale,

9
00:00:20.010 --> 00:00:24.070
either Amazon Web Services, or AWS, or Microsoft Azure.

10
00:00:24.070 --> 00:00:26.090
Docker provides simplified integration

11
00:00:26.090 --> 00:00:29.040
with both of those cloud platforms.

12
00:00:29.040 --> 00:00:32.030
In this section we'll cover exactly that.

13
00:00:32.030 --> 00:00:34.020
On Amazon Web Services essentially what

14
00:00:34.020 --> 00:00:36.060
you've got is a CloudFormation template.

15
00:00:36.060 --> 00:00:39.070
CloudFormation is an Amazon term which basically is

16
00:00:39.070 --> 00:00:43.000
a recipe which says what all resources needs to be created

17
00:00:43.000 --> 00:00:46.050
on Amazon Web Services platform and then it creates

18
00:00:46.050 --> 00:00:49.090
those resources and dependencies and et cetera,

19
00:00:49.090 --> 00:00:51.060
all with a single click.

20
00:00:51.060 --> 00:00:55.070
In the case of Docker, it creates all the nodes for you,

21
00:00:55.070 --> 00:00:57.060
that are configured in auto scaling group.

22
00:00:57.060 --> 00:00:59.070
What that means is if a node goes down,

23
00:00:59.070 --> 00:01:01.070
it is automatically brought up,

24
00:01:01.070 --> 00:01:04.070
because it's part of the ASG, or auto scaling group.

25
00:01:04.070 --> 00:01:07.060
If you expose a service publicly and that is integrated

26
00:01:07.060 --> 00:01:10.000
with ELB or elastic load balancer,

27
00:01:10.000 --> 00:01:11.080
and of course there is integration with EBS

28
00:01:11.080 --> 00:01:13.070
for your per system volumes.

29
00:01:13.070 --> 00:01:16.040
A similar integration is done for Azure as well.

30
00:01:16.040 --> 00:01:19.000
It is integrated with VM scale sets for auto scaling,

31
00:01:19.000 --> 00:01:22.030
Azure Load Balancer, and Azure Storage.

32
00:01:22.030 --> 00:01:25.060
All right let's get hands on with this.

33
00:01:25.060 --> 00:01:30.080
The best place to start with this is docker.com/getdocker.

34
00:01:30.080 --> 00:01:33.070
Once we go there, we are familiar with this link.

35
00:01:33.070 --> 00:01:36.010
We looked at it when we were downloading Docker for Mac,

36
00:01:36.010 --> 00:01:39.010
or Windows, and looked at Linux install instructions.

37
00:01:39.010 --> 00:01:43.090
Just scroll down, and here it gives you the ability to have

38
00:01:43.090 --> 00:01:48.050
Docker for AWS CloudFormation, similarly, Docker for Azure,

39
00:01:48.050 --> 00:01:50.070
and there are some details about Windows Server as well.

40
00:01:50.070 --> 00:01:52.030
Before we launch the stack,

41
00:01:52.030 --> 00:01:55.010
let's take a look at learn more here.

42
00:01:55.010 --> 00:01:58.040
It gives me more details about what Docker for AWS is.

43
00:01:58.040 --> 00:02:01.050
If I click on learn more here it takes me to the channel

44
00:02:01.050 --> 00:02:05.080
here that says there is a stable channel and a beta channel.

45
00:02:05.080 --> 00:02:08.090
Just like Docker for Mac has a stable and a beta channel,

46
00:02:08.090 --> 00:02:11.080
you can deploy the version that matters to you.

47
00:02:11.080 --> 00:02:15.000
You can deploy this Docker for AWS stack using

48
00:02:15.000 --> 00:02:18.050
an existing VPC, so you already have a VPC created,

49
00:02:18.050 --> 00:02:21.000
or you can create a new VPC as well.

50
00:02:21.000 --> 00:02:23.040
For this section it's important that you have your

51
00:02:23.040 --> 00:02:27.030
Amazon Web Services account with specific permissions,

52
00:02:27.030 --> 00:02:29.040
and the permissions are listed over here.

53
00:02:29.040 --> 00:02:31.090
So you will need all of these permissions as part of your

54
00:02:31.090 --> 00:02:36.000
AWS account in order to follow along in this section.

55
00:02:36.000 --> 00:02:40.030
So now, we can go back and launch our template.

56
00:02:40.030 --> 00:02:43.020
I can just click on launch stack here.

57
00:02:43.020 --> 00:02:46.080
It takes me to my Amazon EC2 account,

58
00:02:46.080 --> 00:02:48.060
and this is my standard CloudFormation

59
00:02:48.060 --> 00:02:50.090
template that fires up.

60
00:02:50.090 --> 00:02:53.080
The link to the template URL is shown over here.

61
00:02:53.080 --> 00:02:55.060
That's the main thing to understand.

62
00:02:55.060 --> 00:02:57.060
Click on next.

63
00:02:57.060 --> 00:02:58.070
I'm going to create a new stack.

64
00:02:58.070 --> 00:03:01.030
So I've got to give it a name.

65
00:03:01.030 --> 00:03:03.070
We can only have odd number of managers.

66
00:03:03.070 --> 00:03:05.030
We have discussed this earlier.

67
00:03:05.030 --> 00:03:07.000
I just want to have a single manager.

68
00:03:07.000 --> 00:03:10.090
Change that number, and I want to have four worker nodes.

69
00:03:10.090 --> 00:03:13.000
So change that number as well.

70
00:03:13.000 --> 00:03:15.090
I need to use a SSH key.

71
00:03:15.090 --> 00:03:17.000
I'm going to use a key that we

72
00:03:17.000 --> 00:03:19.080
created earlier for this session.

73
00:03:19.080 --> 00:03:23.010
I can configure the container logs to be

74
00:03:23.010 --> 00:03:25.020
redirected to CloudWatch, which is a default.

75
00:03:25.020 --> 00:03:28.050
Now in this case, our container logs will not be accessible

76
00:03:28.050 --> 00:03:31.030
on the console, but this is a reasonable assumption when

77
00:03:31.030 --> 00:03:33.060
you're going on Amazon Web Services that you want to

78
00:03:33.060 --> 00:03:36.020
have you logs be monitored by CloudWatch.

79
00:03:36.020 --> 00:03:37.010
That's okay.

80
00:03:37.010 --> 00:03:40.020
I need to change my manager instance type.

81
00:03:40.020 --> 00:03:42.040
I will just choose m3 Medium,

82
00:03:42.040 --> 00:03:44.090
and m3 Medium is a standard Amazon EC2 type,

83
00:03:44.090 --> 00:03:48.040
but you need to do the sizing of your manager,

84
00:03:48.040 --> 00:03:50.040
how many concurrent requests it might get,

85
00:03:50.040 --> 00:03:52.030
in terms of scheduling your containers,

86
00:03:52.030 --> 00:03:54.060
and how many nodes that you have.

87
00:03:54.060 --> 00:03:59.090
Similarly I will set up a size for my worker.

88
00:03:59.090 --> 00:04:02.080
I'm just choosing m3.Extra Large here,

89
00:04:02.080 --> 00:04:06.030
and again, the sizing is specific to your application.

90
00:04:06.030 --> 00:04:07.070
What kind of containers are you running,

91
00:04:07.070 --> 00:04:09.010
how much memory they need,

92
00:04:09.010 --> 00:04:12.060
how much CPU they need, and so on and so forth.

93
00:04:12.060 --> 00:04:14.060
Click on next here.

94
00:04:14.060 --> 00:04:15.080
Take the defaults here.

95
00:04:15.080 --> 00:04:17.040
Click on next here.

96
00:04:17.040 --> 00:04:20.080
Let's do a quick review.

97
00:04:20.080 --> 00:04:22.070
We are creating a Docker stack.

98
00:04:22.070 --> 00:04:24.060
My template URL is right here.

99
00:04:24.060 --> 00:04:29.000
One manager, four workers, there's my key.

100
00:04:29.000 --> 00:04:30.080
Here is my manager instance type.

101
00:04:30.080 --> 00:04:33.030
Here is my worker instance type,

102
00:04:33.030 --> 00:04:36.040
and I click that this CloudFormation template

103
00:04:36.040 --> 00:04:39.010
is allowed to create IAM resources.

104
00:04:39.010 --> 00:04:42.020
And then we click on create, and there we go.

105
00:04:42.020 --> 00:04:45.060
This shows up my CloudFormation main screen,

106
00:04:45.060 --> 00:04:48.030
and if I click on refresh here,

107
00:04:48.030 --> 00:04:51.030
it shows that the Docker CloudFormation template

108
00:04:51.030 --> 00:04:53.010
is in progress.

109
00:04:53.010 --> 00:04:55.070
So let's click on this stack here.

110
00:04:55.070 --> 00:04:58.030
We can select it here, or, we can click here.

111
00:04:58.030 --> 00:05:02.090
If I click here let's go to the bottom.

112
00:05:02.090 --> 00:05:06.040
This started at about 15 12.

113
00:05:06.040 --> 00:05:09.000
It says CloudFormation stack is going to be created.

114
00:05:09.000 --> 00:05:13.000
It's creating the queue, the role, the log group, the VPCs,

115
00:05:13.000 --> 00:05:15.060
all the components that need to be created

116
00:05:15.060 --> 00:05:18.050
as part of the CloudFormation template.

117
00:05:18.050 --> 00:05:21.080
This process can take easily 10 to 15 minutes,

118
00:05:21.080 --> 00:05:24.040
depending upon how many instances you are creating,

119
00:05:24.040 --> 00:05:26.070
what types of instances are you creating.

120
00:05:26.070 --> 00:05:29.050
So you need to be a little bit patient about this.

121
00:05:29.050 --> 00:05:33.030
Okay, we got a lot more events to be displayed here.

122
00:05:33.030 --> 00:05:34.060
If we click on this,

123
00:05:34.060 --> 00:05:37.040
you can see it's creating Dynamo DB tables.

124
00:05:37.040 --> 00:05:40.030
Those are probably used for some synchronization aspects.

125
00:05:40.030 --> 00:05:42.050
I'm using some ELBs here.

126
00:05:42.050 --> 00:05:45.050
Security groups are created for me.

127
00:05:45.050 --> 00:05:47.080
VPC gateways are attached.

128
00:05:47.080 --> 00:05:49.070
Subnets are created.

129
00:05:49.070 --> 00:05:53.040
So the entire progress of the CloudFormation template

130
00:05:53.040 --> 00:05:56.020
you can literally track right here.

131
00:05:56.020 --> 00:05:58.030
We got more events here now.

132
00:05:58.030 --> 00:06:01.080
So the IAM policies are created successfully.

133
00:06:01.080 --> 00:06:04.010
And we got more events to display, again.

134
00:06:04.010 --> 00:06:06.000
And we can see that my auto scaling

135
00:06:06.000 --> 00:06:08.020
groups are now getting created.

136
00:06:08.020 --> 00:06:09.090
Now this is one place where I've seen it takes a little bit

137
00:06:09.090 --> 00:06:13.030
longer to create these auto scaling groups.

138
00:06:13.030 --> 00:06:18.000
Jumping ahead, let's see what more events are now available.

139
00:06:18.000 --> 00:06:19.030
It's still in the process of creating

140
00:06:19.030 --> 00:06:20.060
our auto scaling group.

141
00:06:20.060 --> 00:06:22.020
If sometimes you do get impatient, you know,

142
00:06:22.020 --> 00:06:23.010
what's going on?

143
00:06:23.010 --> 00:06:26.050
Then you can always go back here to the stacks,

144
00:06:26.050 --> 00:06:27.070
and voila.

145
00:06:27.070 --> 00:06:29.060
This is completed.

146
00:06:29.060 --> 00:06:33.020
So let's look back at our event here.

147
00:06:33.020 --> 00:06:35.090
Feels like the console have a refresh for us.

148
00:06:35.090 --> 00:06:40.060
So the entire CloudFormation stack has been created for us.

149
00:06:40.060 --> 00:06:41.080
So that's good to know.

150
00:06:41.080 --> 00:06:46.070
Now I can go to services, look at EC2 here.

151
00:06:46.070 --> 00:06:49.010
It shows me five instances are running.

152
00:06:49.010 --> 00:06:51.010
Let's sort by the name here.

153
00:06:51.010 --> 00:06:53.000
So Docker Manager is the name,

154
00:06:53.000 --> 00:06:56.020
and there are four other nodes that are worker.

155
00:06:56.020 --> 00:06:57.070
This is m3 Medium.

156
00:06:57.070 --> 00:06:59.030
These are all m3 Extra Large.

157
00:06:59.030 --> 00:07:01.050
Shows me the regions that they're running in.

158
00:07:01.050 --> 00:07:03.090
Let's select Docker Manager here.

159
00:07:03.090 --> 00:07:09.000
Okay, I'm going to take the IP address for the manager here,

160
00:07:09.000 --> 00:07:12.030
and let's go to our terminal window.

161
00:07:12.030 --> 00:07:13.080
There's a clear terminal window here,

162
00:07:13.080 --> 00:07:19.090
and what we'll do is we will log in to this EC2 instance.

163
00:07:19.090 --> 00:07:22.060
We need to give our key name here.

164
00:07:22.060 --> 00:07:25.030
Now the EC2 instances that are created as part of Docker

165
00:07:25.030 --> 00:07:28.040
for AWS CloudFormation has a default user name of Docker,

166
00:07:28.040 --> 00:07:32.060
and I'm going to give it the IP address here.

167
00:07:32.060 --> 00:07:35.010
But we have never connected with this instance,

168
00:07:35.010 --> 00:07:37.030
so it rightly asks us this information.

169
00:07:37.030 --> 00:07:39.010
Yes, we want to connect with it.

170
00:07:39.010 --> 00:07:41.060
And this is confirmed by saying welcome to Docker,

171
00:07:41.060 --> 00:07:43.090
that you have connected to the right host, essentially.

172
00:07:43.090 --> 00:07:47.010
Okay, so let's take a look at what can we do here.

173
00:07:47.010 --> 00:07:50.070
If I do Docker Info, let's go to the top.

174
00:07:50.070 --> 00:07:54.000
It says there are a total of five containers, five images,

175
00:07:54.000 --> 00:07:56.010
four are running, one are stopped, okay?

176
00:07:56.010 --> 00:07:59.000
And it shows me the Docker Server version number.

177
00:07:59.000 --> 00:08:00.060
It says swarm is active because this

178
00:08:00.060 --> 00:08:02.070
is created as a swarm mode cluster.

179
00:08:02.070 --> 00:08:06.040
It says is manager is true, because this node is

180
00:08:06.040 --> 00:08:12.030
the manager, total of one manager, total of five nodes.

181
00:08:12.030 --> 00:08:14.080
Lot more information over here.

182
00:08:14.080 --> 00:08:17.040
You can see the operating system is Alpine Linux,

183
00:08:17.040 --> 00:08:18.070
and last but not the least,

184
00:08:18.070 --> 00:08:21.090
you can see is the experimental mode is true.

185
00:08:21.090 --> 00:08:25.030
Let's see more information.

186
00:08:25.030 --> 00:08:27.020
Docker version, it gives me the client version,

187
00:08:27.020 --> 00:08:29.010
and the server version.

188
00:08:29.010 --> 00:08:32.080
Now I can take a look at Docker Node LS.

189
00:08:32.080 --> 00:08:36.050
That command tells me what all nodes are available to me.

190
00:08:36.050 --> 00:08:40.000
So if I zoom out a bit, you can see there is one manager,

191
00:08:40.000 --> 00:08:42.050
and four worker nodes that are available,

192
00:08:42.050 --> 00:08:45.010
and the status is indicated right here in the last column.

193
00:08:45.010 --> 00:08:46.060
So that's kind of cool.

194
00:08:46.060 --> 00:08:48.040
Let's go back to our normal level.

195
00:08:48.040 --> 00:08:50.050
Let's get out of this manager.

196
00:08:50.050 --> 00:08:52.060
Now, you're building your applications

197
00:08:52.060 --> 00:08:55.010
on your local desktop.

198
00:08:55.010 --> 00:08:56.020
How do you deploy applications?

199
00:08:56.020 --> 00:08:58.010
Do you FTP to the manager, or how do you do that?

200
00:08:58.010 --> 00:09:01.080
So for that what we'll do is we will create a SSH tunnel.

201
00:09:01.080 --> 00:09:07.070
So I am going to go here, and I will use the same key,

202
00:09:07.070 --> 00:09:11.080
and I will create a SSH tunnel here,

203
00:09:11.080 --> 00:09:16.080
and we will provide a host and a port and we will map it

204
00:09:16.080 --> 00:09:25.000
to var run docker.sock, and we will say docker,

205
00:09:25.000 --> 00:09:27.070
and we will leave the IP address here, okay?

206
00:09:27.070 --> 00:09:30.020
And we're going to run it in the background.

207
00:09:30.020 --> 00:09:32.070
All right, so this has already started for us.

208
00:09:32.070 --> 00:09:34.010
Now we have a tunnel created.

209
00:09:34.010 --> 00:09:35.070
How do I access this tunnel now?

210
00:09:35.070 --> 00:09:42.050
So I say docker-h local host: 2374,

211
00:09:42.050 --> 00:09:46.080
and I'm going to say info, and I get the exact same information

212
00:09:46.080 --> 00:09:48.060
right here on my local desktop.

213
00:09:48.060 --> 00:09:53.010
So I can deploy my applications as I'm building here.

214
00:09:53.010 --> 00:09:55.040
So for example I can take my Docker Compose file

215
00:09:55.040 --> 00:09:57.060
that is on my local desktop, and use that

216
00:09:57.060 --> 00:10:01.060
to deploy to a remote server very easily.

217
00:10:01.060 --> 00:10:03.090
Now, before we summarize, let's take a look at how do we

218
00:10:03.090 --> 00:10:06.030
clean up this set up now, because this is utilizing

219
00:10:06.030 --> 00:10:08.070
your previous EC2 resources.

220
00:10:08.070 --> 00:10:11.050
So let's go to the EC2 console.

221
00:10:11.050 --> 00:10:12.080
I'm going to go here.

222
00:10:12.080 --> 00:10:16.060
I'm going to look for CloudFormation.

223
00:10:16.060 --> 00:10:19.080
So go to the CloudFormation part here.

224
00:10:19.080 --> 00:10:24.050
Take a look at this here, and I'm going to click on actions,

225
00:10:24.050 --> 00:10:26.090
and I will say delete stack.

226
00:10:26.090 --> 00:10:29.060
The beauty of CloudFormation is as easy it is

227
00:10:29.060 --> 00:10:32.010
to create the stack with one single click

228
00:10:32.010 --> 00:10:35.070
you can delete all the resources that are available to you,

229
00:10:35.070 --> 00:10:37.070
or that were created by the CloudFormation stack.

230
00:10:37.070 --> 00:10:39.090
So make sure you do this in order to make sure

231
00:10:39.090 --> 00:10:42.050
that the resources are efficiently utilized,

232
00:10:42.050 --> 00:10:44.070
or not utilized when they're not required.

233
00:10:44.070 --> 00:10:48.090
So, in this section, what you saw is how you can easily

234
00:10:48.090 --> 00:10:54.000
create a swarm mode cluster using Docker for AWS,

235
00:10:54.000 --> 00:10:56.060
and as we discussed earlier, there are similar steps

236
00:10:56.060 --> 00:11:00.000
available for Docker for Azure as well.

