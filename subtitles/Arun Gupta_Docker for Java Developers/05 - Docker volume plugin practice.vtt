WEBVTT
1
00:00:00.060 --> 00:00:03.030
- [Instructor] Now, I'm referring to my exercise notes here.

2
00:00:03.030 --> 00:00:06.020
Setting up portworx require a bit of a setup.

3
00:00:06.020 --> 00:00:07.080
I'm not going to show through the setup,

4
00:00:07.080 --> 00:00:09.050
but I'm going to talk through the setup here,

5
00:00:09.050 --> 00:00:10.080
and then we will show the real

6
00:00:10.080 --> 00:00:13.010
docker volume plug in part of it.

7
00:00:13.010 --> 00:00:15.050
The first step was to really set up a EC2 Instance.

8
00:00:15.050 --> 00:00:17.060
Port locks runs only on Linux,

9
00:00:17.060 --> 00:00:20.040
so I set up a Ubunts 14.04,

10
00:00:20.040 --> 00:00:22.050
set up 8091 as an inbound rule,

11
00:00:22.050 --> 00:00:24.080
so that I can access couchbase over there

12
00:00:24.080 --> 00:00:26.090
and install Docker.

13
00:00:26.090 --> 00:00:28.090
Then I create a EBS volume

14
00:00:28.090 --> 00:00:32.010
and I also attach it to the EC2 Instance.

15
00:00:32.010 --> 00:00:34.020
I created the XCD cluster.

16
00:00:34.020 --> 00:00:36.040
That cluster is what stores my mapping

17
00:00:36.040 --> 00:00:39.070
between containers and volumes.

18
00:00:39.070 --> 00:00:41.060
Then I started the PX dev containers.

19
00:00:41.060 --> 00:00:42.050
They're a bunch of volumes

20
00:00:42.050 --> 00:00:43.070
that have been mapped.

21
00:00:43.070 --> 00:00:45.070
It simplifies me to run the cluster

22
00:00:45.070 --> 00:00:48.020
and access the portworx client

23
00:00:48.020 --> 00:00:50.010
to see the status.

24
00:00:50.010 --> 00:00:53.020
Alright, now let's log into this EC2 Instance

25
00:00:53.020 --> 00:00:55.080
and see what we can do with it.

26
00:00:55.080 --> 00:00:57.010
I'm in my EC2 console.

27
00:00:57.010 --> 00:00:59.060
This is the image that was started.

28
00:00:59.060 --> 00:01:01.060
Let's take the IP address here

29
00:01:01.060 --> 00:01:04.060
and stop the output from the previous run here

30
00:01:04.060 --> 00:01:07.020
and I'm going to log in

31
00:01:07.020 --> 00:01:13.000
to the Instance that was created.

32
00:01:13.000 --> 00:01:14.090
Alright, I'm logged into the Instance.

33
00:01:14.090 --> 00:01:17.030
Let's clear up the screen here for a second.

34
00:01:17.030 --> 00:01:20.010
So now I can look at

35
00:01:20.010 --> 00:01:22.060
Docker container LS

36
00:01:22.060 --> 00:01:25.020
and it shows me that my SCD container is running

37
00:01:25.020 --> 00:01:27.050
and PX-dev container is running.

38
00:01:27.050 --> 00:01:34.000
I can also do sudo /opt/pwx/bin/pxctl

39
00:01:34.000 --> 00:01:36.070
which is the command line for portworx client

40
00:01:36.070 --> 00:01:39.010
and I can say, show me the status.

41
00:01:39.010 --> 00:01:41.070
It says PX is operational.

42
00:01:41.070 --> 00:01:44.030
It also shows me that there's a 10 gigabyte

43
00:01:44.030 --> 00:01:46.040
of storage full that is available.

44
00:01:46.040 --> 00:01:48.080
It shows the region in which it's available

45
00:01:48.080 --> 00:01:51.030
an finally, it shows the total capacity is 10.

46
00:01:51.030 --> 00:01:53.060
I could have had multiple pools over there.

47
00:01:53.060 --> 00:01:56.010
It shows the total used capacity as well.

48
00:01:56.010 --> 00:01:56.090
Okay?

49
00:01:56.090 --> 00:01:58.050
So with that what I'm going to do

50
00:01:58.050 --> 00:02:00.040
is now, I'm going to create

51
00:02:00.040 --> 00:02:02.040
a Docker volume.

52
00:02:02.040 --> 00:02:04.050
So Docker volume.

53
00:02:04.050 --> 00:02:06.040
Let's see what volumes exist right now.

54
00:02:06.040 --> 00:02:07.040
Well, there are only a couple

55
00:02:07.040 --> 00:02:08.060
and the driver is local.

56
00:02:08.060 --> 00:02:11.020
So let's create our Docker volume using

57
00:02:11.020 --> 00:02:12.000
portworx.

58
00:02:12.000 --> 00:02:14.050
So I'm going to create a Docker volume,

59
00:02:14.050 --> 00:02:16.040
call it the driver as pxd.

60
00:02:16.040 --> 00:02:18.040
This is possible because my px-dev container

61
00:02:18.040 --> 00:02:19.050
is running.

62
00:02:19.050 --> 00:02:20.080
Then I'm going to give it some options.

63
00:02:20.080 --> 00:02:23.030
I'm going to say size equals 10G.

64
00:02:23.030 --> 00:02:25.020
I could have taken a smaller size as well

65
00:02:25.020 --> 00:02:26.060
but I'm just going to consume that entire

66
00:02:26.060 --> 00:02:30.010
EBS drive that was created for me.

67
00:02:30.010 --> 00:02:33.010
I'm going to specify the file system here

68
00:02:33.010 --> 00:02:37.000
and I'm going to give the volume a name.

69
00:02:37.000 --> 00:02:39.020
Let's look at our volume listing again.

70
00:02:39.020 --> 00:02:41.050
And now, I have a CB wall

71
00:02:41.050 --> 00:02:43.030
and the driver is PXT.

72
00:02:43.030 --> 00:02:44.050
So that's kind of cool.

73
00:02:44.050 --> 00:02:46.080
Now, I'm going to fire up my Docker container

74
00:02:46.080 --> 00:02:49.020
and use this volume.

75
00:02:49.020 --> 00:02:52.050
So I'm going to say, Docker container run

76
00:02:52.050 --> 00:02:54.020
in a detached mode.

77
00:02:54.020 --> 00:02:56.030
Call it DB and I'm going to expose

78
00:02:56.030 --> 00:02:58.060
the port, 80-91 so that I can access

79
00:02:58.060 --> 00:03:00.070
the couchbase web console.

80
00:03:00.070 --> 00:03:04.010
And I'm going to say, arungupta/couchbase.

81
00:03:04.010 --> 00:03:05.080
Well what's missing in this case is,

82
00:03:05.080 --> 00:03:07.010
the volume.

83
00:03:07.010 --> 00:03:09.050
Because that's the thing that we're trying to show here.

84
00:03:09.050 --> 00:03:12.030
CB wall is my volume name

85
00:03:12.030 --> 00:03:13.090
and this is going to map into the container

86
00:03:13.090 --> 00:03:17.090
to (mumbles) couchbase war.

87
00:03:17.090 --> 00:03:18.080
Okay?

88
00:03:18.080 --> 00:03:21.000
Let's run this container.

89
00:03:21.000 --> 00:03:22.040
And this is a brand new EC2 Instance

90
00:03:22.040 --> 00:03:23.090
of course it's going to download the image

91
00:03:23.090 --> 00:03:26.030
and then it's going to run the container for me.

92
00:03:26.030 --> 00:03:29.000
Alright, the container is up and running.

93
00:03:29.000 --> 00:03:32.080
So if we can say Docker container inspect

94
00:03:32.080 --> 00:03:34.080
and I can say DB,

95
00:03:34.080 --> 00:03:37.030
it shows me a lot more details here

96
00:03:37.030 --> 00:03:40.000
but the ones that we care about

97
00:03:40.000 --> 00:03:42.010
are right about here.

98
00:03:42.010 --> 00:03:43.020
It's the (mumbles).

99
00:03:43.020 --> 00:03:46.040
It says CB Wall is the volume name.

100
00:03:46.040 --> 00:03:48.070
The source is specified over here

101
00:03:48.070 --> 00:03:50.010
and this is the destination.

102
00:03:50.010 --> 00:03:51.000
Okay?

103
00:03:51.000 --> 00:03:53.010
So it shows that the volumes are mapped correctly.

104
00:03:53.010 --> 00:03:54.030
So what I'm going to do is now

105
00:03:54.030 --> 00:03:58.090
go to my browser and use the IP address

106
00:03:58.090 --> 00:04:00.030
of the EC2 Instance

107
00:04:00.030 --> 00:04:02.090
and log into my couchbased web console.

108
00:04:02.090 --> 00:04:05.010
Copy the IP address here.

109
00:04:05.010 --> 00:04:06.080
We can clean up the step

110
00:04:06.080 --> 00:04:08.070
and open up a new tab here.

111
00:04:08.070 --> 00:04:12.070
Go here and I'm going to say, 8091 here.

112
00:04:12.070 --> 00:04:16.010
My log in is the same for all the images.

113
00:04:16.010 --> 00:04:18.020
Administrator, with capital A

114
00:04:18.020 --> 00:04:20.030
and the password is Password.

115
00:04:20.030 --> 00:04:22.030
Go in here.

116
00:04:22.030 --> 00:04:24.050
I'm going into data buckets.

117
00:04:24.050 --> 00:04:27.010
Create a new data bucket here.

118
00:04:27.010 --> 00:04:29.010
Call it Docker.

119
00:04:29.010 --> 00:04:30.090
The bucket is created for me now.

120
00:04:30.090 --> 00:04:32.010
And at this point,

121
00:04:32.010 --> 00:04:35.040
I can actually go back into my EC2 Instance.

122
00:04:35.040 --> 00:04:40.000
And I can say, Docker container RM-FDB.

123
00:04:40.000 --> 00:04:41.090
Because the container could crash potentially.

124
00:04:41.090 --> 00:04:44.020
So I'm going to scratch the container right here.

125
00:04:44.020 --> 00:04:45.020
Okay?`

126
00:04:45.020 --> 00:04:47.040
Let's restart the container

127
00:04:47.040 --> 00:04:50.040
with the same volume mapping.

128
00:04:50.040 --> 00:04:52.040
The container has started but let's take a look

129
00:04:52.040 --> 00:04:53.040
at the logs.

130
00:04:53.040 --> 00:04:57.010
Docker container logs -f db.

131
00:04:57.010 --> 00:04:58.080
After waiting for a few seconds,

132
00:04:58.080 --> 00:05:01.000
the rest API has invoked.

133
00:05:01.000 --> 00:05:02.080
If I go back to my browser,

134
00:05:02.080 --> 00:05:05.040
I can refresh the page here

135
00:05:05.040 --> 00:05:09.090
and it shows me the log in page automatically actually.

136
00:05:09.090 --> 00:05:12.010
Once I log in,

137
00:05:12.010 --> 00:05:14.040
I look at my data buckets,

138
00:05:14.040 --> 00:05:15.030
Bingo.

139
00:05:15.030 --> 00:05:18.010
So my Docker bucket still exists over there.

140
00:05:18.010 --> 00:05:19.040
So that is pretty cool.

141
00:05:19.040 --> 00:05:21.030
So in the section we saw

142
00:05:21.030 --> 00:05:24.000
how we can use Docker volume plug-in.

143
00:05:24.000 --> 00:05:26.040
Particularly use portworx plug-in

144
00:05:26.040 --> 00:05:30.040
to store our data on an Amazon EBS volume.

145
00:05:30.040 --> 00:05:31.020
Okay?

146
00:05:31.020 --> 00:05:33.040
Now, because you're running on Amazon

147
00:05:33.040 --> 00:05:35.070
you want to make sure you clean up your resources

148
00:05:35.070 --> 00:05:37.090
so in order to do the clean up

149
00:05:37.090 --> 00:05:40.070
I'm going to pick up my instruments here

150
00:05:40.070 --> 00:05:45.040
and select the Instance and terminate the Instance here.

151
00:05:45.040 --> 00:05:48.080
So terminate the Instance.

152
00:05:48.080 --> 00:05:50.040
So the instance here is shutting down

153
00:05:50.040 --> 00:05:54.030
and now, I can go look at my volumes

154
00:05:54.030 --> 00:05:57.000
and my volume, we could have detached it

155
00:05:57.000 --> 00:05:59.030
earlier or we could detach it now,

156
00:05:59.030 --> 00:06:01.030
but once the volume is detached,

157
00:06:01.030 --> 00:06:05.090
I can go ahead and delete the volume here.

158
00:06:05.090 --> 00:06:08.010
So remember in terms of clean up, you need to

159
00:06:08.010 --> 00:06:10.040
terminate your EC2 Instance.

160
00:06:10.040 --> 00:06:12.020
You need to detach the volume

161
00:06:12.020 --> 00:06:14.030
and you need to remove the volume.

162
00:06:14.030 --> 00:06:16.000
So make sure you clean up the resources as well.

