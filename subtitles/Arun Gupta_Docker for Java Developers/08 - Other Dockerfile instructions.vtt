WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] We have looked at several instructions

2
00:00:02.000 --> 00:00:05.090
from Dockerfile that can be used to package your image.

3
00:00:05.090 --> 00:00:08.050
We looked at CMD, we looked at RUN,

4
00:00:08.050 --> 00:00:12.010
Add, Copy, From, and a few others.

5
00:00:12.010 --> 00:00:13.090
Let's look at some other instructions

6
00:00:13.090 --> 00:00:15.080
that are equally important as well.

7
00:00:15.080 --> 00:00:19.000
So in this one, we'll look at RUN, CMD and ENTRYPOINT.

8
00:00:19.000 --> 00:00:20.080
And often these are confused with each other,

9
00:00:20.080 --> 00:00:23.010
so it's important to put them together.

10
00:00:23.010 --> 00:00:26.020
RUN is typically used for installing software package,

11
00:00:26.020 --> 00:00:29.010
or running a script from your container file system.

12
00:00:29.010 --> 00:00:33.030
So typically you'd say apt-get update or apt-get install

13
00:00:33.030 --> 00:00:35.050
and then you will update your operating system.

14
00:00:35.050 --> 00:00:38.020
Because the base operating system that you might be using

15
00:00:38.020 --> 00:00:40.050
that image might have been pushed a few days ago,

16
00:00:40.050 --> 00:00:42.050
or a few weeks ago, and then you'll always want

17
00:00:42.050 --> 00:00:44.010
to update it to the latest one.

18
00:00:44.010 --> 00:00:45.060
Another example is in this case,

19
00:00:45.060 --> 00:00:48.010
you might want to run add-user script,

20
00:00:48.010 --> 00:00:51.040
which is from WildFly and create administrative user.

21
00:00:51.040 --> 00:00:54.040
So these kind of commands, which you want to execute only once

22
00:00:54.040 --> 00:00:57.010
are run using the RUN instruction.

23
00:00:57.010 --> 00:00:58.070
CMD, as we talked about

24
00:00:58.070 --> 00:01:01.020
is the default for executing a container.

25
00:01:01.020 --> 00:01:03.000
And, this is the default command.

26
00:01:03.000 --> 00:01:06.050
We talked about how an image can have multiple CMD but only

27
00:01:06.050 --> 00:01:10.050
the last CMD command is the one that is into effect.

28
00:01:10.050 --> 00:01:13.020
Now, CMD can be overridden from CLI,

29
00:01:13.020 --> 00:01:16.020
so let's say I'm building my own WildFly image,

30
00:01:16.020 --> 00:01:19.040
and in that WildFly image, I also want to expose

31
00:01:19.040 --> 00:01:22.070
the administrative port on all network interfaces.

32
00:01:22.070 --> 00:01:25.050
So then I can use this CMD command

33
00:01:25.050 --> 00:01:28.070
and the primary addition being the last two arguments,

34
00:01:28.070 --> 00:01:33.040
what I'm saying, Management port at 0.0.0.0.

35
00:01:33.040 --> 00:01:38.010
So, I can do that way, or I can say Docker run myWildFly,

36
00:01:38.010 --> 00:01:39.060
which is my custom WildFly image,

37
00:01:39.060 --> 00:01:42.090
and them I can override the CMD by specifying bash.

38
00:01:42.090 --> 00:01:45.090
We saw an example of that earlier as well.

39
00:01:45.090 --> 00:01:48.080
And last but not the least, each Docker container,

40
00:01:48.080 --> 00:01:51.020
when it starts, it uses an ENTRYPOINT.

41
00:01:51.020 --> 00:01:53.020
The default ENTRYPOINT is,

42
00:01:53.020 --> 00:01:56.030
/bin/sh, it runs out of Shell basically.

43
00:01:56.030 --> 00:01:59.070
You can override that, using the ENTRYPOINT instruction

44
00:01:59.070 --> 00:02:01.060
and I'll, say, give it a particular script,

45
00:02:01.060 --> 00:02:03.000
and it'll run that script,

46
00:02:03.000 --> 00:02:05.010
and in that script you can do whatever you want to do.

47
00:02:05.010 --> 00:02:07.050
And if you want to override this from the CLI,

48
00:02:07.050 --> 00:02:10.010
then you have a --entrypoint option

49
00:02:10.010 --> 00:02:12.000
which allows you to override as well.

50
00:02:12.000 --> 00:02:13.060
Let's take a look at some other instructions.

51
00:02:13.060 --> 00:02:15.040
Let's say you are building an application

52
00:02:15.040 --> 00:02:18.040
and in that application, you are publishing arrest API

53
00:02:18.040 --> 00:02:20.070
on a certain port, or on a network port.

54
00:02:20.070 --> 00:02:22.080
Then, you need to expose that port.

55
00:02:22.080 --> 00:02:25.020
So for example, in our WildFly image,

56
00:02:25.020 --> 00:02:28.020
let's say we want to expose an administrative port as well,

57
00:02:28.020 --> 00:02:31.050
then we'll have to add, EXPOSE 9990.

58
00:02:31.050 --> 00:02:35.000
Expose only exposes the port from the container.

59
00:02:35.000 --> 00:02:37.020
But, the important part is to understand,

60
00:02:37.020 --> 00:02:38.070
when you are running the container,

61
00:02:38.070 --> 00:02:41.020
at that point of time you still need to say,

62
00:02:41.020 --> 00:02:45.070
Docker run either -P or -p

63
00:02:45.070 --> 00:02:47.050
to publish the host port.

64
00:02:47.050 --> 00:02:50.060
So, those two are two different exercises essentially.

65
00:02:50.060 --> 00:02:53.080
You can create a mount point for a specific directory.

66
00:02:53.080 --> 00:02:56.080
In a later chapter, we will talk about stateful containers,

67
00:02:56.080 --> 00:02:59.010
and there we will talk about how to run a database.

68
00:02:59.010 --> 00:03:00.090
So, this is particularly important,

69
00:03:00.090 --> 00:03:02.090
because you want to run your container

70
00:03:02.090 --> 00:03:06.000
as a stateless container and keep the state out.

71
00:03:06.000 --> 00:03:08.050
So you want to create a appropriate mount point

72
00:03:08.050 --> 00:03:10.070
which can then be mapped to a different volume.

73
00:03:10.070 --> 00:03:13.070
We will see an example of how to run Couchbase container

74
00:03:13.070 --> 00:03:15.060
and within, how the volume is mounted

75
00:03:15.060 --> 00:03:17.040
at a particular directory location.

76
00:03:17.040 --> 00:03:19.050
And now, when you're running the container,

77
00:03:19.050 --> 00:03:21.030
at that point of time, you can say,

78
00:03:21.030 --> 00:03:23.090
here is a -v volume mapping.

79
00:03:23.090 --> 00:03:27.050
So the first one is on the host, which is still ~/data

80
00:03:27.050 --> 00:03:30.000
and then the second part, which is opt/couchbase/var,

81
00:03:30.000 --> 00:03:31.090
is in the container.

82
00:03:31.090 --> 00:03:33.070
Now, when you are building the image,

83
00:03:33.070 --> 00:03:35.080
you can build the image as a certain user.

84
00:03:35.080 --> 00:03:38.060
This is typically used for setting the UID

85
00:03:38.060 --> 00:03:40.000
when you want to run the image.

86
00:03:40.000 --> 00:03:41.050
And last, but not the least,

87
00:03:41.050 --> 00:03:43.000
one of the instructions that I want to talk,

88
00:03:43.000 --> 00:03:45.040
which was recently added in Dockerfile,

89
00:03:45.040 --> 00:03:48.030
was in Docker 1.12, is healthcheck.

90
00:03:48.030 --> 00:03:50.050
Now, important part to understand is,

91
00:03:50.050 --> 00:03:51.060
this is a very great addition,

92
00:03:51.060 --> 00:03:54.020
because a container reporting status

93
00:03:54.020 --> 00:03:57.000
as up for one hour may return errors.

94
00:03:57.000 --> 00:04:00.040
Because a container may be up, but the application within

95
00:04:00.040 --> 00:04:03.060
may not really be functioning as you were expecting it to.

96
00:04:03.060 --> 00:04:05.050
So, there is really no way for you

97
00:04:05.050 --> 00:04:08.040
to correlate the two up until this instruction.

98
00:04:08.040 --> 00:04:10.070
Now, you add this healthcheck instruction,

99
00:04:10.070 --> 00:04:12.090
and in this case what it's saying is,

100
00:04:12.090 --> 00:04:15.050
perform the healthcheck every five seconds,

101
00:04:15.050 --> 00:04:17.030
which is --interval,

102
00:04:17.030 --> 00:04:19.060
then you are saying the timeout is three seconds.

103
00:04:19.060 --> 00:04:22.040
That, if in three seconds it does not return a result,

104
00:04:22.040 --> 00:04:26.000
mark the container as unhealthy and then you are saying,

105
00:04:26.000 --> 00:04:27.070
what is the command that I need to run?

106
00:04:27.070 --> 00:04:29.040
And in this case, what I'm saying is,

107
00:04:29.040 --> 00:04:32.020
just ping localhost:8091

108
00:04:32.020 --> 00:04:34.060
which is the administrative port of Couchbase

109
00:04:34.060 --> 00:04:37.010
and Couchbase also has a rest API.

110
00:04:37.010 --> 00:04:40.080
So, I'm saying, /pools, ping that rest API

111
00:04:40.080 --> 00:04:43.010
and make sure that the database pools are available,

112
00:04:43.010 --> 00:04:47.050
and if it fails, then you exit with status 1.

113
00:04:47.050 --> 00:04:49.020
So, essentially what will happen is,

114
00:04:49.020 --> 00:04:51.090
every five seconds the Docker container,

115
00:04:51.090 --> 00:04:55.070
or the Docker engine will make a ping to the container.

116
00:04:55.070 --> 00:04:58.010
If the pool exists, then it's good.

117
00:04:58.010 --> 00:04:59.090
If the pool doesn't exist, or if for some reason,

118
00:04:59.090 --> 00:05:02.060
the pool is not accessible within three seconds,

119
00:05:02.060 --> 00:05:04.060
it'll mark the container as unhealthy.

120
00:05:04.060 --> 00:05:06.090
And, if it's unhealthy, then the Docker scheduler

121
00:05:06.090 --> 00:05:09.070
might kick in and reschedule the container somewhere else.

122
00:05:09.070 --> 00:05:12.010
So, this truly allows you to kind of tap into

123
00:05:12.010 --> 00:05:14.070
the application inside the container's health

124
00:05:14.070 --> 00:05:16.060
as opposed to just the container itself.

125
00:05:16.060 --> 00:05:19.040
These are some of the instructions that you'll find useful

126
00:05:19.040 --> 00:05:21.010
in addition to the more common ones

127
00:05:21.010 --> 00:05:23.000
that were explained earlier.

