WEBVTT
1
00:00:00.060 --> 00:00:02.040
- [Voiceover] Your friends are talking about Docker.

2
00:00:02.040 --> 00:00:04.030
Your colleagues are talking about Docker.

3
00:00:04.030 --> 00:00:05.080
You're reading articles about Docker.

4
00:00:05.080 --> 00:00:07.000
You're hearing presentations.

5
00:00:07.000 --> 00:00:08.000
Youtubes.

6
00:00:08.000 --> 00:00:10.050
Heck, even your neighbor is talking about Docker.

7
00:00:10.050 --> 00:00:12.000
But you don't get the concept.

8
00:00:12.000 --> 00:00:13.060
You want to get started with Docker,

9
00:00:13.060 --> 00:00:15.010
and how does it impact your life

10
00:00:15.010 --> 00:00:17.010
as an application developer.

11
00:00:17.010 --> 00:00:19.010
This course is exactly meant for you.

12
00:00:19.010 --> 00:00:21.020
This course will explain what is Docker,

13
00:00:21.020 --> 00:00:22.090
and how do you get started with it.

14
00:00:22.090 --> 00:00:24.020
Let's take a look.

15
00:00:24.020 --> 00:00:25.030
Well what is Docker, first of all?

16
00:00:25.030 --> 00:00:27.030
Well, Docker is an open-source project

17
00:00:27.030 --> 00:00:29.030
that started about three years ago.

18
00:00:29.030 --> 00:00:30.070
It used to be called Dark Cloud,

19
00:00:30.070 --> 00:00:32.070
and the main idea behind that project

20
00:00:32.070 --> 00:00:36.090
was really to build containers for software applications.

21
00:00:36.090 --> 00:00:39.080
Over a period of time, the company Dark Cloud

22
00:00:39.080 --> 00:00:42.000
was changed to the name Docker

23
00:00:42.000 --> 00:00:44.000
and now is an open-source project,

24
00:00:44.000 --> 00:00:46.030
and a company literally on GitHub.

25
00:00:46.030 --> 00:00:48.080
So it's http://www.github.com/docker.

26
00:00:48.080 --> 00:00:51.060
It's where you will find everything around the company

27
00:00:51.060 --> 00:00:53.050
and the project itself.

28
00:00:53.050 --> 00:00:55.020
Just look at the number of watches,

29
00:00:55.020 --> 00:00:56.030
number of stars,

30
00:00:56.030 --> 00:00:58.010
number of forks on the GitHub repo.

31
00:00:58.010 --> 00:01:01.010
This is a recent snapshot I literally took this morning.

32
00:01:01.010 --> 00:01:02.080
Look at the number of issues,

33
00:01:02.080 --> 00:01:04.060
the pull requests that are pending.

34
00:01:04.060 --> 00:01:06.090
Hundreds have been closed as well.

35
00:01:06.090 --> 00:01:08.060
It's an extremely popular project.

36
00:01:08.060 --> 00:01:10.060
What is Docker really used for though?

37
00:01:10.060 --> 00:01:12.090
Well, think of it as an application deployment,

38
00:01:12.090 --> 00:01:15.040
or application delivery technology.

39
00:01:15.040 --> 00:01:19.000
It is used to build, deploy, and run containers

40
00:01:19.000 --> 00:01:20.090
for software applications.

41
00:01:20.090 --> 00:01:22.040
What are containers good for?

42
00:01:22.040 --> 00:01:25.020
Well, go back to the analogy many, many years ago

43
00:01:25.020 --> 00:01:28.030
when a wholesaler will produce goods

44
00:01:28.030 --> 00:01:30.090
and he has to send it to the actual retailer.

45
00:01:30.090 --> 00:01:33.020
Well, the wholesaler will produce goods.

46
00:01:33.020 --> 00:01:35.060
He will pack it in whatever form he can.

47
00:01:35.060 --> 00:01:38.050
It will go on a cart, go to the shipping container,

48
00:01:38.050 --> 00:01:40.040
or go to the shipyard basically,

49
00:01:40.040 --> 00:01:41.070
and from there the person

50
00:01:41.070 --> 00:01:43.060
who is responsible for taking the ship

51
00:01:43.060 --> 00:01:46.030
will collect hundreds of such containers

52
00:01:46.030 --> 00:01:48.050
from everybody in different shapes and forms,

53
00:01:48.050 --> 00:01:50.060
then he will figure out how the stacking needs to happen,

54
00:01:50.060 --> 00:01:52.070
then he will go across the sea,

55
00:01:52.070 --> 00:01:54.010
then he will unboard it.

56
00:01:54.010 --> 00:01:56.010
And then again, it goes in different carts,

57
00:01:56.010 --> 00:01:57.090
or trucks, or trains, and so on.

58
00:01:57.090 --> 00:01:59.070
That's a nightmare for the shipment guy,

59
00:01:59.070 --> 00:02:02.050
because he has to accommodate for different formats.

60
00:02:02.050 --> 00:02:05.050
Take the same analogy for software application.

61
00:02:05.050 --> 00:02:07.020
Well, before that, what they did is,

62
00:02:07.020 --> 00:02:08.020
they essentially said,

63
00:02:08.020 --> 00:02:10.020
"You know what? You can bring whatever goods

64
00:02:10.020 --> 00:02:11.060
you want to bring to me,

65
00:02:11.060 --> 00:02:13.080
but I am only going to take these goods

66
00:02:13.080 --> 00:02:16.040
in a certain container format.

67
00:02:16.040 --> 00:02:18.080
I'm only going to take in container boxes.

68
00:02:18.080 --> 00:02:21.040
I don't care what you bring in the container,

69
00:02:21.040 --> 00:02:23.040
but this is the container that I'm going to take."

70
00:02:23.040 --> 00:02:25.010
That makes it a lot easier,

71
00:02:25.010 --> 00:02:28.090
not just to ship the goods from the wholesaler to the ship,

72
00:02:28.090 --> 00:02:30.020
shipping in the ship,

73
00:02:30.020 --> 00:02:32.080
and then from the ship to the retailer.

74
00:02:32.080 --> 00:02:34.060
Take that analogy for software.

75
00:02:34.060 --> 00:02:37.000
Now, we want to build software, essentially.

76
00:02:37.000 --> 00:02:39.010
What Docker gives you is a standard way

77
00:02:39.010 --> 00:02:41.040
to package your software,

78
00:02:41.040 --> 00:02:42.090
deploy the software,

79
00:02:42.090 --> 00:02:44.080
and run the software.

80
00:02:44.080 --> 00:02:46.050
What goes in the container,

81
00:02:46.050 --> 00:02:47.090
which is called as a container,

82
00:02:47.090 --> 00:02:51.030
it is completely your application developers responsibility,

83
00:02:51.030 --> 00:02:54.050
but Docker just gives you that standard format

84
00:02:54.050 --> 00:02:56.060
by which you can easily do this.

85
00:02:56.060 --> 00:02:59.020
So, what is Docker Mission at a very high level?

86
00:02:59.020 --> 00:03:01.040
Well, essentially it wants you to be able

87
00:03:01.040 --> 00:03:05.030
to build, ship, and run distributed applications.

88
00:03:05.030 --> 00:03:06.010
Think about this.

89
00:03:06.010 --> 00:03:07.080
Now, when you are building an application

90
00:03:07.080 --> 00:03:10.020
you have multiple components to the application.

91
00:03:10.020 --> 00:03:11.050
You have a web server.

92
00:03:11.050 --> 00:03:13.020
You have an application server.

93
00:03:13.020 --> 00:03:15.000
You have a database server.

94
00:03:15.000 --> 00:03:16.070
You have a caching layer.

95
00:03:16.070 --> 00:03:17.090
You have a messaging server.

96
00:03:17.090 --> 00:03:19.020
Multiple components.

97
00:03:19.020 --> 00:03:21.060
And, typically, you want to run these applications

98
00:03:21.060 --> 00:03:23.010
in a distributed way.

99
00:03:23.010 --> 00:03:24.080
Why would you run in a distributed?

100
00:03:24.080 --> 00:03:26.070
Because you want to avoid a single point of failure.

101
00:03:26.070 --> 00:03:28.010
And for a web server,

102
00:03:28.010 --> 00:03:29.010
or a database server,

103
00:03:29.010 --> 00:03:30.050
or an application server,

104
00:03:30.050 --> 00:03:32.020
you will run multiple instances of those.

105
00:03:32.020 --> 00:03:34.090
And you want to run multiple instances again,

106
00:03:34.090 --> 00:03:36.070
to avoid a single point of failure.

107
00:03:36.070 --> 00:03:38.070
Also, to be able to meet the scalability needs

108
00:03:38.070 --> 00:03:40.040
of your application.

109
00:03:40.040 --> 00:03:41.070
So that in case more

110
00:03:41.070 --> 00:03:43.090
database concurrent accesses are required

111
00:03:43.090 --> 00:03:45.080
you can do the horizontal sharding

112
00:03:45.080 --> 00:03:47.090
as some of the databases allow.

113
00:03:47.090 --> 00:03:50.000
And then these distributed applications

114
00:03:50.000 --> 00:03:51.030
should be completely transparent

115
00:03:51.030 --> 00:03:54.030
whether they are running on your laptop,

116
00:03:54.030 --> 00:03:56.020
or on Cloud,

117
00:03:56.020 --> 00:03:58.010
or a on-premise data center.

118
00:03:58.010 --> 00:03:59.020
So if you think about Docker,

119
00:03:59.020 --> 00:04:00.070
the mission is to build, ship, and run

120
00:04:00.070 --> 00:04:03.070
distributed applications across anywhere.

121
00:04:03.070 --> 00:04:05.070
Whether it's your local laptop,

122
00:04:05.070 --> 00:04:06.050
whether it's your Cloud,

123
00:04:06.050 --> 00:04:07.070
or on-premise.

124
00:04:07.070 --> 00:04:09.050
Let's take a look at how do they really want

125
00:04:09.050 --> 00:04:11.040
to accomplish this mission.

126
00:04:11.040 --> 00:04:13.020
So at a very high level once again,

127
00:04:13.020 --> 00:04:14.070
in terms of build,

128
00:04:14.070 --> 00:04:18.050
what Docker defines is a standard Docker image.

129
00:04:18.050 --> 00:04:19.070
When you build your application,

130
00:04:19.070 --> 00:04:21.010
essentially what you're saying is,

131
00:04:21.010 --> 00:04:23.070
"Here is what my application component going to look like,

132
00:04:23.070 --> 00:04:25.020
and here is what the configuration

133
00:04:25.020 --> 00:04:26.070
of the application look like,

134
00:04:26.070 --> 00:04:28.060
and I'm going to package this together,

135
00:04:28.060 --> 00:04:30.080
and I'm going to call that as Docker Image."

136
00:04:30.080 --> 00:04:32.070
Now once you have built a Docker image,

137
00:04:32.070 --> 00:04:34.060
you want to share it with somebody else,

138
00:04:34.060 --> 00:04:36.020
or you want to run it in production,

139
00:04:36.020 --> 00:04:38.030
or you want to give it to somebody else

140
00:04:38.030 --> 00:04:40.080
who can then exactly try the same image.

141
00:04:40.080 --> 00:04:43.020
For that, the shipment concept comes in.

142
00:04:43.020 --> 00:04:46.000
Now, by default, that is Docker Hub,

143
00:04:46.000 --> 00:04:48.050
or on https://www.hub.docker.com,

144
00:04:48.050 --> 00:04:49.060
So once you have built the image,

145
00:04:49.060 --> 00:04:52.020
you can share the image using Docker Hub,

146
00:04:52.020 --> 00:04:53.050
and once you are at Docker Hub,

147
00:04:53.050 --> 00:04:55.040
you can look at what the image looks like,

148
00:04:55.040 --> 00:04:58.020
and then you can download the image from Docker Hub.

149
00:04:58.020 --> 00:05:00.020
By default, as I said, there's a Docker Hub,

150
00:05:00.020 --> 00:05:01.030
but there are lots of other options

151
00:05:01.030 --> 00:05:04.030
by which you can run a private registry,

152
00:05:04.030 --> 00:05:06.050
inside firewall, outside firewall,

153
00:05:06.050 --> 00:05:08.070
depending upon the access and stuff like that,

154
00:05:08.070 --> 00:05:10.030
that can be easily done.

155
00:05:10.030 --> 00:05:13.030
And finally, once you have shared the application,

156
00:05:13.030 --> 00:05:16.010
then you want to be able to run the application.

157
00:05:16.010 --> 00:05:20.030
So think of Docker Image as the build-time component

158
00:05:20.030 --> 00:05:22.060
and when you want to run the image,

159
00:05:22.060 --> 00:05:24.050
that's called as a Docker Container.

160
00:05:24.050 --> 00:05:26.090
So, you might have built an application,

161
00:05:26.090 --> 00:05:29.040
which you'll say, for example, using WildFly.

162
00:05:29.040 --> 00:05:30.020
I know WildFly's...

163
00:05:30.020 --> 00:05:32.030
That has, open source application server.

164
00:05:32.030 --> 00:05:34.020
So you have, say WildFly in there

165
00:05:34.020 --> 00:05:36.080
and in the WildFly you have (mumbles) application.

166
00:05:36.080 --> 00:05:38.040
You will have a single image,

167
00:05:38.040 --> 00:05:40.020
but if you want to run a container out of it

168
00:05:40.020 --> 00:05:42.060
you may want to be able to run multiple instances

169
00:05:42.060 --> 00:05:44.010
of that application.

170
00:05:44.010 --> 00:05:46.010
So you will ship the application once,

171
00:05:46.010 --> 00:05:48.050
but once you are running the application,

172
00:05:48.050 --> 00:05:51.020
you may run multiple containers of it.

173
00:05:51.020 --> 00:05:53.040
So, at a very high level, once again,

174
00:05:53.040 --> 00:05:54.070
if I were to summarize,

175
00:05:54.070 --> 00:05:57.050
Docker is an application delivery technology.

176
00:05:57.050 --> 00:05:59.040
It gives you the ability

177
00:05:59.040 --> 00:06:02.000
to build an application using Docker image,

178
00:06:02.000 --> 00:06:04.030
ship an application using Docker Hub,

179
00:06:04.030 --> 00:06:06.070
or registry is another term for shipping,

180
00:06:06.070 --> 00:06:09.030
and then finally, be able to run the application

181
00:06:09.030 --> 00:06:13.020
as a Docker container, potentially on multiple hosts

182
00:06:13.020 --> 00:06:15.010
so that there is no single point of failure

183
00:06:15.010 --> 00:06:18.000
and even multiple instances of a container

184
00:06:18.000 --> 00:06:20.040
just to avoid a single point of failure as well.

185
00:06:20.040 --> 00:06:23.010
So think of it as a very high level way

186
00:06:23.010 --> 00:06:24.090
of how to understand Docker.

187
00:06:24.090 --> 00:06:27.000
What's so good about it? How do we get started with it?

188
00:06:27.000 --> 00:06:28.050
What are other details?

189
00:06:28.050 --> 00:06:30.000
Let's look at the next chapter for that.

