WEBVTT
1
00:00:00.010 --> 00:00:00.090
- [Narrator] Alright,

2
00:00:00.090 --> 00:00:03.000
so you understood the basic concepts of Docker,

3
00:00:03.000 --> 00:00:04.060
but I'm a Java developer.

4
00:00:04.060 --> 00:00:05.090
How does it matter to me?

5
00:00:05.090 --> 00:00:08.010
And, what can I do with this?

6
00:00:08.010 --> 00:00:10.070
Well, as a Java developer, you are familiar

7
00:00:10.070 --> 00:00:14.060
with the concept of WORA, or Write Once, Run Anywhere.

8
00:00:14.060 --> 00:00:15.070
How does that work?

9
00:00:15.070 --> 00:00:18.030
Well, I mean, you have a Java source file.

10
00:00:18.030 --> 00:00:19.040
You take the Java source file.

11
00:00:19.040 --> 00:00:21.060
You give it to the Java compiler.

12
00:00:21.060 --> 00:00:25.020
The Java compiler then takes it, generates a .class file.

13
00:00:25.020 --> 00:00:26.060
Then, you have different tools

14
00:00:26.060 --> 00:00:28.080
like Maven, Gradle, so on, so forth.

15
00:00:28.080 --> 00:00:31.010
You take those class files and you pack them

16
00:00:31.010 --> 00:00:34.030
into a JAR or a WAR or an EAR file.

17
00:00:34.030 --> 00:00:35.020
Okay, cool.

18
00:00:35.020 --> 00:00:37.060
So, you've taken the Java source file, compiled into class,

19
00:00:37.060 --> 00:00:39.090
and then packaged it into a JAR, WAR, or EAR.

20
00:00:39.090 --> 00:00:42.020
Now, on a variety of operating systems,

21
00:00:42.020 --> 00:00:44.050
whether it's Mac or Windows or Ubuntu

22
00:00:44.050 --> 00:00:46.070
or any flavor of Linux for that sake,

23
00:00:46.070 --> 00:00:50.020
there is a JVM, or Java Virtual Machine that is running.

24
00:00:50.020 --> 00:00:54.040
That JVM now understands the format of this class file,

25
00:00:54.040 --> 00:00:55.080
which is a Java bytecode.

26
00:00:55.080 --> 00:00:57.070
And, that's what gives you the power of

27
00:00:57.070 --> 00:01:01.050
Write your source code once, and the JVM will understand

28
00:01:01.050 --> 00:01:04.090
the underlying bytecode and it will run out of the box.

29
00:01:04.090 --> 00:01:09.000
Now, Docker is very similar, but not exactly same.

30
00:01:09.000 --> 00:01:10.090
And, I'll highlight the differences in a second,

31
00:01:10.090 --> 00:01:14.020
but let's understand what the similarity is first.

32
00:01:14.020 --> 00:01:16.050
As we talked about, Docker has this capability

33
00:01:16.050 --> 00:01:18.000
of creating an image.

34
00:01:18.000 --> 00:01:21.070
Images where all of your application configuration data

35
00:01:21.070 --> 00:01:23.030
is put together.

36
00:01:23.030 --> 00:01:25.070
Now, you have created that image once

37
00:01:25.070 --> 00:01:27.060
on a variety of operating systems.

38
00:01:27.060 --> 00:01:30.070
Once again, OS X, Windows, a variety of Linux.

39
00:01:30.070 --> 00:01:33.030
You have this thing called as running as Docker engine,

40
00:01:33.030 --> 00:01:34.070
or a Docker host.

41
00:01:34.070 --> 00:01:38.060
Now, the Docker engine understands the image format.

42
00:01:38.060 --> 00:01:40.020
You have given me the image format.

43
00:01:40.020 --> 00:01:43.050
Just like your JVM understands the class format,

44
00:01:43.050 --> 00:01:45.040
the Docker understands the image format.

45
00:01:45.040 --> 00:01:48.080
It takes that image format and runs the container for you.

46
00:01:48.080 --> 00:01:52.080
Now, Docker is essentially a native Linux technology.

47
00:01:52.080 --> 00:01:56.090
It's built on concepts like cgroups, namespaces, et cetera.

48
00:01:56.090 --> 00:02:01.040
Those inherently exist in Linux, so on OS X and Windows,

49
00:02:01.040 --> 00:02:03.070
you do have to run sort of a virtual machine

50
00:02:03.070 --> 00:02:06.010
which we'll talk about a little bit later in the chapter.

51
00:02:06.010 --> 00:02:09.000
But, the point is, once you have the image ready,

52
00:02:09.000 --> 00:02:12.020
you can easily run it on a variety of operating systems.

53
00:02:12.020 --> 00:02:15.080
We'll talk a little bit later on how we create an image.

54
00:02:15.080 --> 00:02:20.020
So, as I said, PODA which is Package Once, Deploy Anywhere,

55
00:02:20.020 --> 00:02:23.050
is very similar to WORA, but it's not exactly similar

56
00:02:23.050 --> 00:02:27.000
because based upon what is the base operating system

57
00:02:27.000 --> 00:02:28.070
that you're using for an image,

58
00:02:28.070 --> 00:02:31.000
it could run only on that operating system.

59
00:02:31.000 --> 00:02:33.010
And, we'll talk about this differentiation

60
00:02:33.010 --> 00:02:34.020
and will understand this better

61
00:02:34.020 --> 00:02:35.040
when we go later in the chapter

62
00:02:35.040 --> 00:02:37.030
of creating an image essentially.

63
00:02:37.030 --> 00:02:41.030
So, just the way you do WORA in Java,

64
00:02:41.030 --> 00:02:45.030
the same concept is of PODA in Doc.

65
00:02:45.030 --> 00:02:46.070
Well, out of the important difference

66
00:02:46.070 --> 00:02:48.040
that people need to understand is

67
00:02:48.040 --> 00:02:52.030
how is Docker really difference from virtual machines?

68
00:02:52.030 --> 00:02:55.040
A lot of people call Docker as a virtualization technology.

69
00:02:55.040 --> 00:02:57.030
I would like to be a myth-buster for that.

70
00:02:57.030 --> 00:03:00.000
It's not a virtualization technology.

71
00:03:00.000 --> 00:03:03.000
Docker is an application delivery technology.

72
00:03:03.000 --> 00:03:05.060
Well, let's try to understand what that means.

73
00:03:05.060 --> 00:03:08.040
On the left, what you see is a very classical

74
00:03:08.040 --> 00:03:09.050
virtual machine environment.

75
00:03:09.050 --> 00:03:10.090
So, you have your infrastructure

76
00:03:10.090 --> 00:03:14.030
on-premise, cloud, laptop, whatever it is.

77
00:03:14.030 --> 00:03:16.060
You have a host operating system running,

78
00:03:16.060 --> 00:03:19.020
which is whatever your base operating system is.

79
00:03:19.020 --> 00:03:22.000
On a host operating system, you would run a hypervisor.

80
00:03:22.000 --> 00:03:23.080
Let's say, a type two hypervisor

81
00:03:23.080 --> 00:03:26.010
like Virtual Box or anything.

82
00:03:26.010 --> 00:03:29.000
Let's say my host operating system is Windows

83
00:03:29.000 --> 00:03:31.040
or Mac or Linux, and on top of that,

84
00:03:31.040 --> 00:03:34.020
I went on a different operating system.

85
00:03:34.020 --> 00:03:37.040
For example, let's say my host operating system is OS X and,

86
00:03:37.040 --> 00:03:40.010
on top of that, I want to run a Windows operating system.

87
00:03:40.010 --> 00:03:43.050
So for that, I would need to run a type two hypervisor

88
00:03:43.050 --> 00:03:45.020
and then, using Virtual Box,

89
00:03:45.020 --> 00:03:49.030
I can create a Windows VM on a Mac OS X.

90
00:03:49.030 --> 00:03:52.010
Now, if I want to build an application around an application

91
00:03:52.010 --> 00:03:55.030
within Windows, then I would have to packet my application

92
00:03:55.030 --> 00:03:57.080
as a full-blown operating system sitting over there.

93
00:03:57.080 --> 00:04:01.080
It's literally delegating for networking and hard drives.

94
00:04:01.080 --> 00:04:03.040
Very basic needs are being filled

95
00:04:03.040 --> 00:04:05.070
by the underlying host operating system.

96
00:04:05.070 --> 00:04:07.080
So, on a given infrastructure,

97
00:04:07.080 --> 00:04:10.060
if you have multiple virtual machines running,

98
00:04:10.060 --> 00:04:12.090
there's a limit because each operating system

99
00:04:12.090 --> 00:04:15.000
has its own memory requirements,

100
00:04:15.000 --> 00:04:16.070
CPU requirements, et cetera.

101
00:04:16.070 --> 00:04:19.030
So, you are stalled by the capacity

102
00:04:19.030 --> 00:04:21.010
of the underlying operating system.

103
00:04:21.010 --> 00:04:22.090
The density is very low.

104
00:04:22.090 --> 00:04:24.060
Look on the right-hand side now,

105
00:04:24.060 --> 00:04:27.090
which is, you have same underlying infrastructure.

106
00:04:27.090 --> 00:04:29.080
This is not a host operating system.

107
00:04:29.080 --> 00:04:31.060
It's just a simple operating system

108
00:04:31.060 --> 00:04:34.050
on which your Docker engine is running.

109
00:04:34.050 --> 00:04:38.020
Now, the Docker engine has a whole bunch of images.

110
00:04:38.020 --> 00:04:41.070
In that image, instead of a full-blown operating system,

111
00:04:41.070 --> 00:04:43.070
you have a minimal operating system.

112
00:04:43.070 --> 00:04:45.080
What does it mean by minimal operating system?

113
00:04:45.080 --> 00:04:47.010
As we discussed earlier,

114
00:04:47.010 --> 00:04:49.090
Docker relies upon basic Linux capabilities

115
00:04:49.090 --> 00:04:52.060
like cgroups and namespaces.

116
00:04:52.060 --> 00:04:56.030
So, instead of having one gigabyte

117
00:04:56.030 --> 00:05:00.030
Ubuntu guest operating system on a typical virtual machine,

118
00:05:00.030 --> 00:05:06.010
I can use 120 megabytes Ubuntu base operating system

119
00:05:06.010 --> 00:05:09.040
on the Docker side and then packet my application in there.

120
00:05:09.040 --> 00:05:12.010
Everything else is provided by Docker engine.

121
00:05:12.010 --> 00:05:13.000
What that gives you?

122
00:05:13.000 --> 00:05:16.040
Well, first of all, that gives you a much smaller image,

123
00:05:16.040 --> 00:05:20.000
but because of the smaller image and lesser requirements,

124
00:05:20.000 --> 00:05:22.040
you can have much more densely packed.

125
00:05:22.040 --> 00:05:25.000
You can have agility of the application.

126
00:05:25.000 --> 00:05:26.010
You can have the scalability

127
00:05:26.010 --> 00:05:28.080
of the application achieved much more easily.

128
00:05:28.080 --> 00:05:30.080
So, essentially, Docker

129
00:05:30.080 --> 00:05:32.050
which is an application delivered technology,

130
00:05:32.050 --> 00:05:35.090
is very different from a virtual machine technology.

131
00:05:35.090 --> 00:05:37.090
So, I think understanding the concept

132
00:05:37.090 --> 00:05:41.020
that how PODA matches with WORA,

133
00:05:41.020 --> 00:05:44.050
and how Docker is different from virtual machines,

134
00:05:44.050 --> 00:05:45.080
is fundamentally important.

135
00:05:45.080 --> 00:05:48.090
Once you understand that, then we can go forward

136
00:05:48.090 --> 00:05:51.000
and look a little bit more concepts of Docker.

