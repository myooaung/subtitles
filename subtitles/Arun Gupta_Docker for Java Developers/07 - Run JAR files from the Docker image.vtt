WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] We have built the docker image,

2
00:00:01.070 --> 00:00:03.050
we have also created a docker image

3
00:00:03.050 --> 00:00:07.060
where I could deploy a war file to a Wildfly container.

4
00:00:07.060 --> 00:00:09.090
But I've not built a real docker image

5
00:00:09.090 --> 00:00:13.060
where I'm adding my own JAR to the docker image,

6
00:00:13.060 --> 00:00:16.030
where I'm building my own functionality as part of that.

7
00:00:16.030 --> 00:00:19.000
This section will show you exactly that,

8
00:00:19.000 --> 00:00:20.050
so let's take a look.

9
00:00:20.050 --> 00:00:23.080
I'm here in my terminal, I'm in the directory chapter2,

10
00:00:23.080 --> 00:00:26.040
and what I'm going to do is I'm going to

11
00:00:26.040 --> 00:00:29.060
create a docker file here and in that docker file

12
00:00:29.060 --> 00:00:32.010
I'm going to add my JAR file.

13
00:00:32.010 --> 00:00:34.050
And if I see the listing of this directory,

14
00:00:34.050 --> 00:00:37.080
I have this directory here myapp.

15
00:00:37.080 --> 00:00:39.050
This is a simple Maven app.

16
00:00:39.050 --> 00:00:41.010
Let's take a look at this Maven app.

17
00:00:41.010 --> 00:00:42.090
Now I'm in NetBeans,

18
00:00:42.090 --> 00:00:45.080
and myapp is open over here.

19
00:00:45.080 --> 00:00:47.030
Simple Maven application.

20
00:00:47.030 --> 00:00:49.060
If I look at the source packages here,

21
00:00:49.060 --> 00:00:53.000
it's just got a simple app class

22
00:00:53.000 --> 00:00:55.000
and all it says is hello world.

23
00:00:55.000 --> 00:00:57.020
Let's take a look at the pom.xml.

24
00:00:57.020 --> 00:01:01.000
In pom.xml, I just have a simple junit dependency

25
00:01:01.000 --> 00:01:02.080
that is primarily for testing.

26
00:01:02.080 --> 00:01:05.020
I have a Maven JAR plugin, and all it does is

27
00:01:05.020 --> 00:01:08.080
builds a JAR file and sets the app file

28
00:01:08.080 --> 00:01:11.030
as a manifest main class file.

29
00:01:11.030 --> 00:01:13.070
The big advantage of that is when you run the JAR file

30
00:01:13.070 --> 00:01:15.070
you can run it as-is and the app file

31
00:01:15.070 --> 00:01:18.060
will be automatically involved, so that's pretty cool.

32
00:01:18.060 --> 00:01:20.040
So now let's go back to terminal,

33
00:01:20.040 --> 00:01:23.050
and let's take a look on how we can use this JAR file

34
00:01:23.050 --> 00:01:26.090
and package it into our docker image.

35
00:01:26.090 --> 00:01:29.000
So I'm back in my chapter2 file.

36
00:01:29.000 --> 00:01:32.020
I'm going to open up a docker file here,

37
00:01:32.020 --> 00:01:34.070
and in this docker file,

38
00:01:34.070 --> 00:01:37.070
I'm going to use my base image as openjdk

39
00:01:37.070 --> 00:01:41.040
and as you've noticed we can use jdk-alpine

40
00:01:41.040 --> 00:01:43.050
to keep our image size small.

41
00:01:43.050 --> 00:01:44.080
That's cool.

42
00:01:44.080 --> 00:01:48.080
And then I can also say copy, because in Maven,

43
00:01:48.080 --> 00:01:52.000
when we build our project, our JAR file is generated

44
00:01:52.000 --> 00:01:54.010
into the target directory.

45
00:01:54.010 --> 00:01:56.060
So all I'm going to do is myapp,

46
00:01:56.060 --> 00:01:59.030
go to the target directory here,

47
00:01:59.030 --> 00:02:02.020
and my generated JAR file name is going to be

48
00:02:02.020 --> 00:02:07.000
myapp-1.0-SNAPSHOT.jar.

49
00:02:07.000 --> 00:02:08.090
We will verify this name when we actually

50
00:02:08.090 --> 00:02:11.030
generate our JAR file, and I'm going to copy this

51
00:02:11.030 --> 00:02:13.040
into the container file system,

52
00:02:13.040 --> 00:02:15.090
into the deployments directory.

53
00:02:15.090 --> 00:02:19.050
And my entry point or my command for this docker image

54
00:02:19.050 --> 00:02:24.080
is going to be CMD java-jar, and I'm going to refer to

55
00:02:24.080 --> 00:02:29.060
that same JAR file.

56
00:02:29.060 --> 00:02:32.090
And that's going to be my docker image, okay?

57
00:02:32.090 --> 00:02:35.030
But before I can build this docker image,

58
00:02:35.030 --> 00:02:38.090
I need to make sure that myapp-1.0-SNAPSHOT.jar

59
00:02:38.090 --> 00:02:40.030
actually exists.

60
00:02:40.030 --> 00:02:42.050
So let's get out of this docker file here,

61
00:02:42.050 --> 00:02:48.050
and I'm going to say Maven, I'm going to refer to myapp/pom.xml,

62
00:02:48.050 --> 00:02:51.010
and I'm going to say clean package.

63
00:02:51.010 --> 00:02:54.020
As we expected, in myapp target directory,

64
00:02:54.020 --> 00:02:58.070
myapp-1.0-SNAPSHOT.jar is generated for us now.

65
00:02:58.070 --> 00:03:00.050
And since it's generated for us,

66
00:03:00.050 --> 00:03:02.060
now I can build my docker image.

67
00:03:02.060 --> 00:03:06.010
So what I can say is docker build,

68
00:03:06.010 --> 00:03:09.070
and I'm going to say -t hellojava,

69
00:03:09.070 --> 00:03:12.040
I'm going to give it a tag of three in this case.

70
00:03:12.040 --> 00:03:16.090
And then I'm going to provide a build context here.

71
00:03:16.090 --> 00:03:19.070
So this builds my image rather quickly, okay?

72
00:03:19.070 --> 00:03:22.070
Let's take a look at image listing.

73
00:03:22.070 --> 00:03:26.060
So I have hellojava latest, which was built earlier.

74
00:03:26.060 --> 00:03:28.070
Then hellojava two, which was built earlier,

75
00:03:28.070 --> 00:03:30.040
and now hellojava three,

76
00:03:30.040 --> 00:03:32.070
which was built just about six seconds ago.

77
00:03:32.070 --> 00:03:34.000
So that is pretty cool.

78
00:03:34.000 --> 00:03:35.040
If I were to run this container,

79
00:03:35.040 --> 00:03:40.020
I'll say docker container run hellojava:3,

80
00:03:40.020 --> 00:03:42.030
and it just prints hello world.

81
00:03:42.030 --> 00:03:43.090
Very clean, very simple.

82
00:03:43.090 --> 00:03:47.090
Okay, now let's see how I'm going to change the business logic.

83
00:03:47.090 --> 00:03:49.000
Well, in my case the business logic is

84
00:03:49.000 --> 00:03:51.090
changing simple hello world to howdy world,

85
00:03:51.090 --> 00:03:54.000
and see how we can repackage the application,

86
00:03:54.000 --> 00:03:57.010
rebuild the docker image, and run the container.

87
00:03:57.010 --> 00:03:58.030
Let's take a look.

88
00:03:58.030 --> 00:04:00.030
I'm back in my NetBeans here,

89
00:04:00.030 --> 00:04:02.090
look at my application here.

90
00:04:02.090 --> 00:04:07.000
I'm going to just change hello to howdy.

91
00:04:07.000 --> 00:04:10.020
Save the file here, let's go back to terminal,

92
00:04:10.020 --> 00:04:12.050
and build our JAR file again.

93
00:04:12.050 --> 00:04:15.010
I'm going to take my Maven command again,

94
00:04:15.010 --> 00:04:17.050
going to clean and package it.

95
00:04:17.050 --> 00:04:20.040
Once again my JAR file is generated

96
00:04:20.040 --> 00:04:23.080
into this SNAPSHOT.jar file.

97
00:04:23.080 --> 00:04:26.080
I am going to package the image again,

98
00:04:26.080 --> 00:04:29.080
and instead of labeling as three,

99
00:04:29.080 --> 00:04:32.070
I'm going to tag it as four this time.

100
00:04:32.070 --> 00:04:36.080
Let's build our image, and if we take a look

101
00:04:36.080 --> 00:04:39.010
at the image listing again,

102
00:04:39.010 --> 00:04:41.000
I got hellojava four as well,

103
00:04:41.000 --> 00:04:43.000
which was built about three seconds ago.

104
00:04:43.000 --> 00:04:45.070
And I can run this container again,

105
00:04:45.070 --> 00:04:49.000
giving it the tag four, and as expected,

106
00:04:49.000 --> 00:04:51.010
it prints howdy world.

107
00:04:51.010 --> 00:04:54.050
And just to double check, I can run tag three,

108
00:04:54.050 --> 00:04:57.020
and that'll still print hello world.

109
00:04:57.020 --> 00:04:59.090
Now, what we did in this particular section,

110
00:04:59.090 --> 00:05:02.000
we manually changed the code,

111
00:05:02.000 --> 00:05:03.040
we manually built the image,

112
00:05:03.040 --> 00:05:05.020
we manually run the container.

113
00:05:05.020 --> 00:05:08.040
Now typically when you're building a CI/CD pipeline,

114
00:05:08.040 --> 00:05:10.050
all of these processes would be automated,

115
00:05:10.050 --> 00:05:13.030
where any change you make to the code

116
00:05:13.030 --> 00:05:15.060
will be pushed to the repo, and that'll automatically

117
00:05:15.060 --> 00:05:19.000
build the image and likely replace the container.

118
00:05:19.000 --> 00:05:21.040
In between you would have your functional testing,

119
00:05:21.040 --> 00:05:23.080
performance testing, regression testing,

120
00:05:23.080 --> 00:05:25.070
all sorts of aspects being tested,

121
00:05:25.070 --> 00:05:28.000
and then you can build your pipeline accordingly.

122
00:05:28.000 --> 00:05:30.000
So in this section you learned how do you

123
00:05:30.000 --> 00:05:33.000
package your JAR files into a docker image,

124
00:05:33.000 --> 00:05:35.000
and run them as a container.

