WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] So far, we have seen how we can deploy

2
00:00:02.040 --> 00:00:06.010
a multicontainer application on a single host.

3
00:00:06.010 --> 00:00:08.090
We have also deployed a single container application

4
00:00:08.090 --> 00:00:10.080
on multinode.

5
00:00:10.080 --> 00:00:12.040
Let's take a look at how can we deploy

6
00:00:12.040 --> 00:00:16.000
a multicontainer application on a multihost cluster.

7
00:00:16.000 --> 00:00:18.000
That is a typical reality of life.

8
00:00:18.000 --> 00:00:20.030
That is how you will build your applications.

9
00:00:20.030 --> 00:00:23.020
That is how your applications will go into production.

10
00:00:23.020 --> 00:00:24.090
Let's take a look.

11
00:00:24.090 --> 00:00:26.040
I'm back in my terminal here.

12
00:00:26.040 --> 00:00:29.050
Let's take a look at the services that are running.

13
00:00:29.050 --> 00:00:31.070
There is one service running from the previous section,

14
00:00:31.070 --> 00:00:35.090
so let's remove that service.

15
00:00:35.090 --> 00:00:39.030
It's very convenient.

16
00:00:39.030 --> 00:00:40.090
No services are running now.

17
00:00:40.090 --> 00:00:42.040
Let's clear up our screen,

18
00:00:42.040 --> 00:00:45.020
and refer to the instructions file.

19
00:00:45.020 --> 00:00:52.010
I'm going to copy this compose file here.

20
00:00:52.010 --> 00:00:55.080
And remember, I am actually already logged into manager1,

21
00:00:55.080 --> 00:00:59.000
so if I do a pwd, it says home/docker,

22
00:00:59.000 --> 00:01:02.040
and the manager1 shows that I am running in manager1.

23
00:01:02.040 --> 00:01:07.010
So I'm going to create a docker-compose.yml here,

24
00:01:07.010 --> 00:01:10.080
and I'm going to paste it here.

25
00:01:10.080 --> 00:01:12.020
Okay, now this is a compose file

26
00:01:12.020 --> 00:01:13.080
that we are already familiar with.

27
00:01:13.080 --> 00:01:15.070
We talked about this in a previous section,

28
00:01:15.070 --> 00:01:17.070
so you should be comfortable with it,

29
00:01:17.070 --> 00:01:19.030
but just a quick summary,

30
00:01:19.030 --> 00:01:23.050
we are using arungupta/couchbase-javaee image here,

31
00:01:23.050 --> 00:01:27.020
which is basically a javaee application deployed in Wildfly

32
00:01:27.020 --> 00:01:31.040
which then uses COUCHBASE_URI as an environment variable

33
00:01:31.040 --> 00:01:34.020
that uses db as a value.

34
00:01:34.020 --> 00:01:37.020
This db points to this db service,

35
00:01:37.020 --> 00:01:39.000
which is a couchbase service,

36
00:01:39.000 --> 00:01:40.070
which then exposes all different ports

37
00:01:40.070 --> 00:01:44.090
that are needed in order to access the couchbase database.

38
00:01:44.090 --> 00:01:48.010
So let's save the file here.

39
00:01:48.010 --> 00:01:50.060
Important point that I want to highlight again.

40
00:01:50.060 --> 00:01:53.060
It's important that you log in to manager1

41
00:01:53.060 --> 00:01:55.040
and then save the compose file.

42
00:01:55.040 --> 00:01:59.080
Otherwise, there is no way for you to pass the compose file

43
00:01:59.080 --> 00:02:02.060
to the docker command, which is going to be run

44
00:02:02.060 --> 00:02:04.040
on docker manager.

45
00:02:04.040 --> 00:02:08.000
So log into manager1, then save your compose file.

46
00:02:08.000 --> 00:02:10.080
Now, one of the new commands that was introduced

47
00:02:10.080 --> 00:02:14.030
in docker 113 is docker stack.

48
00:02:14.030 --> 00:02:16.020
If we take a look at the help,

49
00:02:16.020 --> 00:02:19.080
it says it allows you to deploy a stack,

50
00:02:19.080 --> 00:02:22.060
list the stack, list the tasks in the stack,

51
00:02:22.060 --> 00:02:25.060
remove a stack, and list the services in the stack.

52
00:02:25.060 --> 00:02:27.040
That's the command that we're going to use

53
00:02:27.040 --> 00:02:29.090
to deploy a multicontainer application

54
00:02:29.090 --> 00:02:31.020
to multiple hosts.

55
00:02:31.020 --> 00:02:35.010
I'm going to say docker stack deploy,

56
00:02:35.010 --> 00:02:37.050
and if I look for help again here,

57
00:02:37.050 --> 00:02:39.090
it shows me the options that are available.

58
00:02:39.090 --> 00:02:41.080
I'm going to use a compose file,

59
00:02:41.080 --> 00:02:45.050
so we will use a compose file here,

60
00:02:45.050 --> 00:02:49.010
and now we're going to refer to docker-compose.yml

61
00:02:49.010 --> 00:02:52.090
and we're going to create a stack here.

62
00:02:52.090 --> 00:02:55.090
Remember, this docker-compose file is available

63
00:02:55.090 --> 00:02:58.030
on my manager1, that's why it's important

64
00:02:58.030 --> 00:03:02.000
to create this file on manager1 as opposed to a local host.

65
00:03:02.000 --> 00:03:04.070
So let's create this stack here,

66
00:03:04.070 --> 00:03:07.060
it's going to create my network and my services

67
00:03:07.060 --> 00:03:09.020
as part of that.

68
00:03:09.020 --> 00:03:12.010
So now if I say docker stack ls,

69
00:03:12.010 --> 00:03:15.040
it's going to show me that the stack has been created

70
00:03:15.040 --> 00:03:17.040
and has got two service.

71
00:03:17.040 --> 00:03:21.010
So take a look at services then, docker service ls.

72
00:03:21.010 --> 00:03:24.000
And it shows my services are there.

73
00:03:24.000 --> 00:03:26.030
And it also shows the status of the service.

74
00:03:26.030 --> 00:03:29.020
So the first service is webapp_web,

75
00:03:29.020 --> 00:03:31.060
which is basically my Wildfly application.

76
00:03:31.060 --> 00:03:33.060
The second service is webapp_db,

77
00:03:33.060 --> 00:03:35.030
which is my couchbase container.

78
00:03:35.030 --> 00:03:38.000
The couchbase image has not been downloaded so far,

79
00:03:38.000 --> 00:03:39.050
so what's happening right now is

80
00:03:39.050 --> 00:03:41.020
the image is getting downloaded

81
00:03:41.020 --> 00:03:43.060
and the container will then get started.

82
00:03:43.060 --> 00:03:46.010
So let's take a look at the status again.

83
00:03:46.010 --> 00:03:48.010
That is indeed the case.

84
00:03:48.010 --> 00:03:50.030
So now the couchbase container is started,

85
00:03:50.030 --> 00:03:54.020
and so is my javaee Wildfly application as well.

86
00:03:54.020 --> 00:03:57.090
Now I would like to look at the logs of the service.

87
00:03:57.090 --> 00:04:02.010
However, if I do docker info here,

88
00:04:02.010 --> 00:04:05.010
and if we look at experimental, it says false,

89
00:04:05.010 --> 00:04:07.060
because we are running a GA version of docker.

90
00:04:07.060 --> 00:04:09.090
If I was running an experimental version

91
00:04:09.090 --> 00:04:12.020
and if this would have said true,

92
00:04:12.020 --> 00:04:14.030
then there was a convenience command which

93
00:04:14.030 --> 00:04:16.080
would have allowed me to show the logs off the bat.

94
00:04:16.080 --> 00:04:19.080
I prefer to stay with the GA builds for courses,

95
00:04:19.080 --> 00:04:22.070
so docker services logs service name

96
00:04:22.070 --> 00:04:24.080
will essentially not work here.

97
00:04:24.080 --> 00:04:25.080
But we have a workaround for that,

98
00:04:25.080 --> 00:04:27.030
so we'll take a look at that.

99
00:04:27.030 --> 00:04:33.040
So once again, these are my services that are running.

100
00:04:33.040 --> 00:04:39.010
Now I can say docker service ps, I can say webapp:web,

101
00:04:39.010 --> 00:04:43.030
and it says okay, your service is running,

102
00:04:43.030 --> 00:04:45.050
and is running on worker3.

103
00:04:45.050 --> 00:04:48.040
So if I want to see the logs for this service,

104
00:04:48.040 --> 00:04:50.050
I need to get out of manager1,

105
00:04:50.050 --> 00:04:55.000
and I need to log into worker3,

106
00:04:55.000 --> 00:05:00.090
and then I need to say show me what containers are running.

107
00:05:00.090 --> 00:05:03.030
And it shows me the containers are running here.

108
00:05:03.030 --> 00:05:05.000
This is my container ID here,

109
00:05:05.000 --> 00:05:11.060
and I can say docker container ls, rather logs,

110
00:05:11.060 --> 00:05:13.030
and it shows me the logs here.

111
00:05:13.030 --> 00:05:14.070
It rightly shows that

112
00:05:14.070 --> 00:05:17.020
the airlines.war file has been deployed.

113
00:05:17.020 --> 00:05:18.090
And if we scroll up a little bit,

114
00:05:18.090 --> 00:05:20.090
you'll see the sleeping for three seconds

115
00:05:20.090 --> 00:05:23.030
where it's waiting for the indexes to be created,

116
00:05:23.030 --> 00:05:26.000
where it's waiting for the bucket to be loaded,

117
00:05:26.000 --> 00:05:28.010
where it's waiting for the query service to be up,

118
00:05:28.010 --> 00:05:29.080
that's the resiliency part of the application

119
00:05:29.080 --> 00:05:32.010
that we talked about earlier.

120
00:05:32.010 --> 00:05:34.010
So now let's get out of worker3 essentially,

121
00:05:34.010 --> 00:05:38.050
and if I log in back to, say, manager1,

122
00:05:38.050 --> 00:05:42.000
and I say docker stack ls,

123
00:05:42.000 --> 00:05:44.030
this is sort of my top level application.

124
00:05:44.030 --> 00:05:46.060
Now this was deployed to manager1,

125
00:05:46.060 --> 00:05:50.030
so essentially I should be able to access this application

126
00:05:50.030 --> 00:05:53.000
using my manager1 as well, okay?

127
00:05:53.000 --> 00:05:56.070
So get out of it and on my command line itself

128
00:05:56.070 --> 00:06:01.040
I can say curl, but before we do curl,

129
00:06:01.040 --> 00:06:04.050
so this is my docker-machine ls.

130
00:06:04.050 --> 00:06:08.050
Here is my manager1 running, here is the IP address for it.

131
00:06:08.050 --> 00:06:12.060
So what I can do is I can say curl http,

132
00:06:12.060 --> 00:06:17.050
and then in here itself I can say docker-machine ip,

133
00:06:17.050 --> 00:06:21.050
manager1, and then when our service was started,

134
00:06:21.050 --> 00:06:24.040
we observed an ingress whiteboard 8080,

135
00:06:24.040 --> 00:06:27.020
so we're going to do that, and then we're going to say airlines,

136
00:06:27.020 --> 00:06:31.080
it's a rest endpoint, and we'll say airline like this.

137
00:06:31.080 --> 00:06:34.040
And there you go, we got the exact same output

138
00:06:34.040 --> 00:06:36.050
that we got on a single host.

139
00:06:36.050 --> 00:06:38.010
So this is exactly how we deployed

140
00:06:38.010 --> 00:06:43.000
a multicontainer application on multiple host very easily.

141
00:06:43.000 --> 00:06:45.090
Now, if you were running experimental release,

142
00:06:45.090 --> 00:06:48.050
accessing the logs of the service would've been much easier,

143
00:06:48.050 --> 00:06:51.090
but you can see that there is always a workaround for that.

144
00:06:51.090 --> 00:06:54.040
Now that we have accessed the application,

145
00:06:54.040 --> 00:06:57.060
we can remove the stack as well.

146
00:06:57.060 --> 00:07:00.060
So this is running on the local host here,

147
00:07:00.060 --> 00:07:04.070
so we need to log in to our manager for that.

148
00:07:04.070 --> 00:07:09.060
So docker-machine ssh manager1,

149
00:07:09.060 --> 00:07:11.030
we are in the manager now,

150
00:07:11.030 --> 00:07:14.050
and then we're going to say docker stack ls,

151
00:07:14.050 --> 00:07:17.070
it shows two services are running as part of the stack.

152
00:07:17.070 --> 00:07:22.040
I can say docker stack rm webapp, and there you go.

153
00:07:22.040 --> 00:07:25.020
Both my services and my network has been removed.

154
00:07:25.020 --> 00:07:28.060
So in this section we saw how we can create

155
00:07:28.060 --> 00:07:31.080
a multicontainer service, we can deploy it

156
00:07:31.080 --> 00:07:33.040
on multiple hosts.

157
00:07:33.040 --> 00:07:35.060
Now if we were running an experimental version

158
00:07:35.060 --> 00:07:38.020
of docker engine then it was much easier

159
00:07:38.020 --> 00:07:40.050
for us to access the logs of the service,

160
00:07:40.050 --> 00:07:42.050
but even then we can do that,

161
00:07:42.050 --> 00:07:44.080
but we still have a workaround for it.

162
00:07:44.080 --> 00:07:47.030
So a typical real-life application would be

163
00:07:47.030 --> 00:07:49.080
running your application in a multicontainer mode

164
00:07:49.080 --> 00:07:52.070
and would be deployed across multiple hosts.

165
00:07:52.070 --> 00:07:55.000
So this section would be very useful for you.

