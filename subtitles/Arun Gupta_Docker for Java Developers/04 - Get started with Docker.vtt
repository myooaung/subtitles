WEBVTT
1
00:00:00.010 --> 00:00:01.030
- [Instructor] All right.

2
00:00:01.030 --> 00:00:04.050
All talk and no code makes Johnny a dull boy.

3
00:00:04.050 --> 00:00:05.030
Let's take a look at it.

4
00:00:05.030 --> 00:00:06.070
Let's get started with Docker now.

5
00:00:06.070 --> 00:00:10.070
Now you are on a Linux or a Mac or a Windows

6
00:00:10.070 --> 00:00:11.090
and you want to get started.

7
00:00:11.090 --> 00:00:14.020
So let's take a look at it, first of all, on Linux.

8
00:00:14.020 --> 00:00:15.040
As we mentioned earlier,

9
00:00:15.040 --> 00:00:18.010
Docker is a native Linux technology.

10
00:00:18.010 --> 00:00:20.070
So it's supported on several Linux distributions,

11
00:00:20.070 --> 00:00:22.080
on pretty much all the common ones.

12
00:00:22.080 --> 00:00:24.030
There is a quick and easy install

13
00:00:24.030 --> 00:00:25.090
that can be very easily done.

14
00:00:25.090 --> 00:00:28.000
So let's say you get a brand new Ubuntu Box

15
00:00:28.000 --> 00:00:31.000
or a Centos Box or you spin up a new VM on AWS

16
00:00:31.000 --> 00:00:32.050
and you want to install it.

17
00:00:32.050 --> 00:00:35.000
Just give this single command and on get.docker.com,

18
00:00:35.000 --> 00:00:37.020
you correlate and you run the script.

19
00:00:37.020 --> 00:00:39.080
It'll download the the latest Docker version for you.

20
00:00:39.080 --> 00:00:41.060
It'll install the Docker engine.

21
00:00:41.060 --> 00:00:44.050
It'll have the CLI, all the tools ready for you to roll.

22
00:00:44.050 --> 00:00:45.080
That's very easy.

23
00:00:45.080 --> 00:00:48.080
Now, I would also recommend go to get.docker.com,

24
00:00:48.080 --> 00:00:51.000
which is a URL that you can visit in your browser;

25
00:00:51.000 --> 00:00:53.090
and in the browser there are other URLs it'll show you

26
00:00:53.090 --> 00:00:56.010
if you want to install a test version

27
00:00:56.010 --> 00:00:57.060
or an experimental version,

28
00:00:57.060 --> 00:00:59.060
which we'll talk about in a second, okay?

29
00:00:59.060 --> 00:01:01.030
So now this is quick and easy install,

30
00:01:01.030 --> 00:01:03.020
but that's typically not what people do

31
00:01:03.020 --> 00:01:04.060
when they go into production.

32
00:01:04.060 --> 00:01:07.040
So there are certain OS-specific instructions

33
00:01:07.040 --> 00:01:09.020
because you want to add the repository.

34
00:01:09.020 --> 00:01:10.040
You want to make sure you download

35
00:01:10.040 --> 00:01:12.040
from the right repository and stuff like that.

36
00:01:12.040 --> 00:01:14.040
So all those detailed instructions are available

37
00:01:14.040 --> 00:01:16.080
on the URL that's shown on the screen at this point in time.

38
00:01:16.080 --> 00:01:19.000
So I would recommend, depending upon what's your use case,

39
00:01:19.000 --> 00:01:23.030
pick quick and easy install or OS-specific instructions.

40
00:01:23.030 --> 00:01:25.020
All right, now, Linux is easy;

41
00:01:25.020 --> 00:01:28.070
now, how do we get started with Docker for Mac and Windows.

42
00:01:28.070 --> 00:01:31.050
Docker for Mac and Windows is a native application

43
00:01:31.050 --> 00:01:33.010
and a user interface.

44
00:01:33.010 --> 00:01:35.010
What that means is you go to a URL,

45
00:01:35.010 --> 00:01:37.070
you download the Docker for Mac or Windows;

46
00:01:37.070 --> 00:01:41.010
that provides a very native, seamlessly integrated

47
00:01:41.010 --> 00:01:43.070
experience on that particular operating system.

48
00:01:43.070 --> 00:01:45.050
It's a very Mac-like experience,

49
00:01:45.050 --> 00:01:47.000
very Windows-like experience;

50
00:01:47.000 --> 00:01:49.050
and we'll see that a little bit later in this chapter.

51
00:01:49.050 --> 00:01:52.080
The UI or the tool is automatically updated,

52
00:01:52.080 --> 00:01:55.000
so let's say you have a particular version of Docker

53
00:01:55.000 --> 00:01:57.070
and a new version is released in the back end, you know,

54
00:01:57.070 --> 00:02:00.040
by Docker, then the tool will automatically update.

55
00:02:00.040 --> 00:02:01.070
So you don't have to worry about it.

56
00:02:01.070 --> 00:02:03.050
You can configure it to be auto update,

57
00:02:03.050 --> 00:02:05.060
or you can manually update it.

58
00:02:05.060 --> 00:02:07.040
The good thing about Docker for Mac and Windows is

59
00:02:07.040 --> 00:02:10.040
there are no additional software required like VirtualBox.

60
00:02:10.040 --> 00:02:12.030
We will look at Docker toolbox,

61
00:02:12.030 --> 00:02:14.030
which will require an additional software.

62
00:02:14.030 --> 00:02:16.040
That's how everybody is starting these days.

63
00:02:16.040 --> 00:02:18.080
They just download Docker for Mac or Windows,

64
00:02:18.080 --> 00:02:20.080
and they get started with that.

65
00:02:20.080 --> 00:02:21.080
And how does it work?

66
00:02:21.080 --> 00:02:24.030
Well, because Docker is a native Linux technology.

67
00:02:24.030 --> 00:02:28.010
Well, on Mac, particularly starting Yosemite,

68
00:02:28.010 --> 00:02:30.030
and they have hypervisor.framework.

69
00:02:30.030 --> 00:02:33.070
So on OS X essentially, it creates a xhyve VM;

70
00:02:33.070 --> 00:02:36.000
and on Windows, it uses Hyper-V VM.

71
00:02:36.000 --> 00:02:38.050
Those are both hypervisor frameworks

72
00:02:38.050 --> 00:02:40.030
built into the operating system,

73
00:02:40.030 --> 00:02:43.030
and that's why you don't need any additional software

74
00:02:43.030 --> 00:02:45.010
for installation of Docker.

75
00:02:45.010 --> 00:02:46.060
How do we get started?

76
00:02:46.060 --> 00:02:48.080
You go to docker.com/getdocker,

77
00:02:48.080 --> 00:02:51.010
and there are links which say, okay,

78
00:02:51.010 --> 00:02:54.000
download the docker and then get started with it, okay?

79
00:02:54.000 --> 00:02:57.020
Now the requirements for Docker for Mac and Windows

80
00:02:57.020 --> 00:02:58.050
that are could be considered a little bit strict.

81
00:02:58.050 --> 00:03:02.020
Well, for Mac is 10.10+ or Yosemite onwards;

82
00:03:02.020 --> 00:03:04.090
and for Windows, you need Windows 10 64-bit.

83
00:03:04.090 --> 00:03:07.060
So we understand that this could be limitations

84
00:03:07.060 --> 00:03:10.080
for certain laptops that are in the corporate IT

85
00:03:10.080 --> 00:03:13.080
and that have not yet upgraded to these operating systems,

86
00:03:13.080 --> 00:03:16.030
so then there are varieties and options for that.

87
00:03:16.030 --> 00:03:18.050
Docker comes in two editions:

88
00:03:18.050 --> 00:03:21.060
Docker Community Edition and the Docker Enterprise Edition.

89
00:03:21.060 --> 00:03:24.040
Docker Community Edition is ideal for developers

90
00:03:24.040 --> 00:03:26.050
and small teams that are looking to get started

91
00:03:26.050 --> 00:03:30.000
with Docker and experimenting with container-based apps.

92
00:03:30.000 --> 00:03:32.020
It's a free and open-source version of Docker,

93
00:03:32.020 --> 00:03:34.040
as it's more popularly known;

94
00:03:34.040 --> 00:03:37.020
and it meant for teams that are do-it-yourself

95
00:03:37.020 --> 00:03:39.020
for developer and ops.

96
00:03:39.020 --> 00:03:41.060
Docker Enterprise Edition on the other side

97
00:03:41.060 --> 00:03:44.030
is designed for enterprise development and IT teams

98
00:03:44.030 --> 00:03:47.080
who build, ship, and run business critical applications

99
00:03:47.080 --> 00:03:49.020
and productions are scaled.

100
00:03:49.020 --> 00:03:51.000
It gives you certified infrastructure,

101
00:03:51.000 --> 00:03:53.020
plug-ins, and containers;

102
00:03:53.020 --> 00:03:55.040
and there is commercial support available

103
00:03:55.040 --> 00:03:57.040
for enterprises running critical applications

104
00:03:57.040 --> 00:03:59.000
in production for you.

105
00:03:59.000 --> 00:04:01.050
Let's take a look at Docker Community Edition,

106
00:04:01.050 --> 00:04:05.000
since that's the one that we going to be using for this course.

107
00:04:05.000 --> 00:04:07.050
Well, the Docker Community Edition is available

108
00:04:07.050 --> 00:04:10.000
for Mac, Windows, and Linux;

109
00:04:10.000 --> 00:04:12.090
the three primary platforms that we would care about.

110
00:04:12.090 --> 00:04:16.020
It gives you a native desktop experience.

111
00:04:16.020 --> 00:04:18.080
That means you can run it on your local desktop

112
00:04:18.080 --> 00:04:22.000
or in the cloud, where there is AWS or Azure.

113
00:04:22.000 --> 00:04:24.050
It provides all those experiences very seamlessly.

114
00:04:24.050 --> 00:04:26.090
In terms of the release cycle,

115
00:04:26.090 --> 00:04:29.010
there is a monthly Edge release cycle

116
00:04:29.010 --> 00:04:32.050
and a quarterly Stable release cycle.

117
00:04:32.050 --> 00:04:35.040
So every month, there is a bleeding edge built

118
00:04:35.040 --> 00:04:36.090
that is pushed out by Docker.

119
00:04:36.090 --> 00:04:39.040
So if you're using Docker for Mac, for example,

120
00:04:39.040 --> 00:04:41.010
then you will have the Docker for Mac

121
00:04:41.010 --> 00:04:43.060
native application installed on your machine;

122
00:04:43.060 --> 00:04:46.030
and every month Docker will push that bill to you.

123
00:04:46.030 --> 00:04:48.080
Same thing for Windows and Linux as well.

124
00:04:48.080 --> 00:04:50.050
Or if you want a Stable bill,

125
00:04:50.050 --> 00:04:52.060
where you don't want to be in the bleeding edge,

126
00:04:52.060 --> 00:04:54.070
then you can install the Stable download;

127
00:04:54.070 --> 00:04:56.050
and Docker will push you updates

128
00:04:56.050 --> 00:04:59.000
typically about every quarter.

129
00:04:59.000 --> 00:05:01.030
Docker Enterprise Edition, on the other side,

130
00:05:01.030 --> 00:05:03.050
is doing releases every quarter;

131
00:05:03.050 --> 00:05:06.030
and each release is supported for a year.

132
00:05:06.030 --> 00:05:10.010
Now the actual release cycle, the support lifecycle,

133
00:05:10.010 --> 00:05:13.000
that may change; so I would recommend going back

134
00:05:13.000 --> 00:05:16.040
to Docker.com for the latest updates on that.

135
00:05:16.040 --> 00:05:17.060
Just to give a better idea,

136
00:05:17.060 --> 00:05:20.080
in a given calendar year, say January through December,

137
00:05:20.080 --> 00:05:24.050
you know, you will have a CE Edge release every month.

138
00:05:24.050 --> 00:05:26.060
Every third release in the year,

139
00:05:26.060 --> 00:05:29.020
starting from March 2017 essentially,

140
00:05:29.020 --> 00:05:31.050
will be Docker CE Stable;

141
00:05:31.050 --> 00:05:35.010
and then there will be a corresponding Docker EE as well.

142
00:05:35.010 --> 00:05:37.090
Now the CE Stable will be supported for about four months;

143
00:05:37.090 --> 00:05:40.010
and then, in the meanwhile, the next CE Stable

144
00:05:40.010 --> 00:05:42.010
to release would be available to you as well.

145
00:05:42.010 --> 00:05:44.010
Docker EE, as I said earlier,

146
00:05:44.010 --> 00:05:47.080
is currently supported for year.

147
00:05:47.080 --> 00:05:50.020
Now, I'm on Docker.com website.

148
00:05:50.020 --> 00:05:52.060
As you can see, right on the main page itself,

149
00:05:52.060 --> 00:05:55.050
it says download Docker Community Edition

150
00:05:55.050 --> 00:05:57.000
or the Enterprise Edition.

151
00:05:57.000 --> 00:06:01.060
Let's click on the get Docker Community Edition link here.

152
00:06:01.060 --> 00:06:04.070
As you can see, it gives more details

153
00:06:04.070 --> 00:06:07.030
about what Community Edition features are.

154
00:06:07.030 --> 00:06:10.090
If you scroll further, it gives you

155
00:06:10.090 --> 00:06:14.090
how you can easily run Docker on your desktop.

156
00:06:14.090 --> 00:06:17.080
If you consider a typical desktop to be Mac and Windows,

157
00:06:17.080 --> 00:06:22.000
then there is Docker CE for Mac and Docker CE for Windows.

158
00:06:22.000 --> 00:06:25.070
You can download either of these bills, Mac or Windows,

159
00:06:25.070 --> 00:06:27.030
from your Docker store.

160
00:06:27.030 --> 00:06:29.060
Well, you need to have a credentials in Docker store,

161
00:06:29.060 --> 00:06:32.030
and those can be easily created.

162
00:06:32.030 --> 00:06:34.020
If you want to run on Linux servers,

163
00:06:34.020 --> 00:06:37.050
then four major flavors of Linux are supported over here.

164
00:06:37.050 --> 00:06:39.030
So you can see Docker CE for Centos,

165
00:06:39.030 --> 00:06:41.050
Debian, Fedora, and Ubuntu.

166
00:06:41.050 --> 00:06:44.000
Now the list may get updated by the time

167
00:06:44.000 --> 00:06:46.010
this course is released; so, again,

168
00:06:46.010 --> 00:06:47.080
I would recommend go to Docker.com

169
00:06:47.080 --> 00:06:50.050
to see the updated list and the experience.

170
00:06:50.050 --> 00:06:53.050
And finally, on the cloud, Amazon web services

171
00:06:53.050 --> 00:06:56.010
and Microsoft Azure are the two platforms

172
00:06:56.010 --> 00:06:59.020
where there are Docker CE bills available.

173
00:06:59.020 --> 00:07:00.090
In a later section, we'll talk about

174
00:07:00.090 --> 00:07:05.000
how can we get started with Docker CE for AWS.

175
00:07:05.000 --> 00:07:08.050
Now, if we go back, we can look at

176
00:07:08.050 --> 00:07:11.030
Get Docker Enterprise Edition;

177
00:07:11.030 --> 00:07:13.070
and, again, it gives you more details

178
00:07:13.070 --> 00:07:15.070
about what are the features that are coming

179
00:07:15.070 --> 00:07:19.040
as part of Docker Enterprise Edition.

180
00:07:19.040 --> 00:07:24.040
In order to get started, you click on view pricing.

181
00:07:24.040 --> 00:07:26.000
You can either get started for free,

182
00:07:26.000 --> 00:07:28.000
there's a 30-day evaluation version;

183
00:07:28.000 --> 00:07:30.040
or you can buy online in Docker store.

184
00:07:30.040 --> 00:07:32.060
For this video course, we will only use

185
00:07:32.060 --> 00:07:34.020
the Docker Community Edition;

186
00:07:34.020 --> 00:07:38.070
and that version is available for free on the Docker store.

187
00:07:38.070 --> 00:07:41.010
Now, as I said, Docker for Mac and Windows

188
00:07:41.010 --> 00:07:43.010
have little clear requirements;

189
00:07:43.010 --> 00:07:45.040
and if you are somehow not able to meet those requirements,

190
00:07:45.040 --> 00:07:47.000
then you can download Docker toolbox.

191
00:07:47.000 --> 00:07:47.090
What is Docker toolbox?

192
00:07:47.090 --> 00:07:50.090
Docker toolbox is a loosely composed

193
00:07:50.090 --> 00:07:53.020
set of tools put together.

194
00:07:53.020 --> 00:07:56.080
Essentially it has Docker engine; it has Docker machine.

195
00:07:56.080 --> 00:07:59.090
Well, Docker machine is a CLI that is included

196
00:07:59.090 --> 00:08:03.090
as part of Docker toolbox that creates a VirtualBox VM

197
00:08:03.090 --> 00:08:06.090
for you or that allows you to simulate

198
00:08:06.090 --> 00:08:10.050
Docker engine environment on your Mac or your Windows.

199
00:08:10.050 --> 00:08:12.040
It could use VirtualBox as a virtualization provider,

200
00:08:12.040 --> 00:08:16.000
and there are other virtualization providers

201
00:08:16.000 --> 00:08:18.050
that are available as well, which we'll talk in a second.

202
00:08:18.050 --> 00:08:20.000
It also has Docker Compose,

203
00:08:20.000 --> 00:08:21.090
which we'll cover in a later chapter,

204
00:08:21.090 --> 00:08:23.090
but allows you to essentially run

205
00:08:23.090 --> 00:08:26.010
multi container applications very easily.

206
00:08:26.010 --> 00:08:28.070
Docker Kitematic is a simple UI

207
00:08:28.070 --> 00:08:31.010
that allows you to manage your VMs

208
00:08:31.010 --> 00:08:34.010
and VirtualBox is included for the simplicity of it,

209
00:08:34.010 --> 00:08:36.050
so that you have one seamless experience over there.

210
00:08:36.050 --> 00:08:38.040
And then there is a Quickstart Terminal

211
00:08:38.040 --> 00:08:39.090
that is already available for you,

212
00:08:39.090 --> 00:08:43.000
which is pre-configured to talk to that Docker machine.

213
00:08:43.000 --> 00:08:44.090
Now we talked about Docker machine.

214
00:08:44.090 --> 00:08:46.090
Let's take a look at how do we create this Docker Machine.

215
00:08:46.090 --> 00:08:48.090
Well, the command line is included for you,

216
00:08:48.090 --> 00:08:50.090
which is docker-machine;

217
00:08:50.090 --> 00:08:53.000
and you say docker-machine create,

218
00:08:53.000 --> 00:08:55.060
and then you need to specify a driver.

219
00:08:55.060 --> 00:08:58.050
So you can say the driver is VirtualBox, for example.

220
00:08:58.050 --> 00:09:00.010
In this case, the Docker Machine

221
00:09:00.010 --> 00:09:03.010
will create a VirtualBox VM for you.

222
00:09:03.010 --> 00:09:06.000
It'll install all the Docker components as part of it,

223
00:09:06.000 --> 00:09:08.020
and the machine name is specified

224
00:09:08.020 --> 00:09:10.030
at that last part of the CLI.

225
00:09:10.030 --> 00:09:12.050
In this case, it's myhost.

226
00:09:12.050 --> 00:09:14.010
Then, you can configure your Docker client

227
00:09:14.010 --> 00:09:16.020
to talk to this host.

228
00:09:16.020 --> 00:09:17.070
You can create and pull images.

229
00:09:17.070 --> 00:09:19.060
Now in this case what's happening is

230
00:09:19.060 --> 00:09:23.040
your client and your Docker host or the Docker engine

231
00:09:23.040 --> 00:09:26.000
are sitting on the same machine,

232
00:09:26.000 --> 00:09:28.010
which is pretty good actually for local development.

233
00:09:28.010 --> 00:09:31.030
You can start, stop, restart containers;

234
00:09:31.030 --> 00:09:33.070
and it gives you an ability to test everything

235
00:09:33.070 --> 00:09:35.050
on your local laptop without thinking about

236
00:09:35.050 --> 00:09:36.090
cloud or any other environment.

237
00:09:36.090 --> 00:09:39.000
You can also upgrade Docker because

238
00:09:39.000 --> 00:09:40.040
let's say you create a Docker machine

239
00:09:40.040 --> 00:09:43.020
using a certain version and now Docker has released

240
00:09:43.020 --> 00:09:45.030
a new version that is the capability

241
00:09:45.030 --> 00:09:47.020
by which the Docker machine can be upgraded

242
00:09:47.020 --> 00:09:50.000
or the docker daemon version can be upgraded as well.

243
00:09:50.000 --> 00:09:52.010
One of the things that I love

244
00:09:52.010 --> 00:09:54.080
about Docker machine is how not only

245
00:09:54.080 --> 00:09:57.030
it allows you to create Docker engine

246
00:09:57.030 --> 00:10:00.020
using VirtualBox provider, but look at

247
00:10:00.020 --> 00:10:02.030
the variety of providers that it gives you.

248
00:10:02.030 --> 00:10:05.080
So you can use Docker machine, for example, to say,

249
00:10:05.080 --> 00:10:09.070
okay, create a Docker machine using AWS provider

250
00:10:09.070 --> 00:10:13.060
or EC2 provider or a GCE provider or an Azure provider.

251
00:10:13.060 --> 00:10:16.020
So, essentially you can create Docker machine

252
00:10:16.020 --> 00:10:19.060
using VirtualBox on your local box; that is cool.

253
00:10:19.060 --> 00:10:21.060
And now you're ready to test on a cloud.

254
00:10:21.060 --> 00:10:23.020
You just change the provider,

255
00:10:23.020 --> 00:10:25.060
and now it's going to get provisioned on EC2

256
00:10:25.060 --> 00:10:27.030
or Google Cloud or Rackspace.

257
00:10:27.030 --> 00:10:29.040
So that capability and that functionality

258
00:10:29.040 --> 00:10:30.080
is very, very handy.

259
00:10:30.080 --> 00:10:32.080
So, let's take a look at it on how

260
00:10:32.080 --> 00:10:35.040
we can easily get started with Docker machine.

261
00:10:35.040 --> 00:10:36.070
Now I'm going to switch to terminal,

262
00:10:36.070 --> 00:10:39.020
and I'm going to show you how to create a Docker machine.

263
00:10:39.020 --> 00:10:41.070
All right, so now we are in terminal.

264
00:10:41.070 --> 00:10:47.010
If we take a look at it, we say docker-machine --version.

265
00:10:47.010 --> 00:10:50.030
It shows what Docker machine version we got here, okay?

266
00:10:50.030 --> 00:10:54.050
So now I am going to say docker-machine create,

267
00:10:54.050 --> 00:10:58.070
and I'm going to give it a driver, -d, call it VirtualBox;

268
00:10:58.070 --> 00:11:00.040
and I'm going to call it as myhost,

269
00:11:00.040 --> 00:11:02.010
as we were showing in the slides.

270
00:11:02.010 --> 00:11:04.030
So I give this command, and I press an enter.

271
00:11:04.030 --> 00:11:06.020
Now here, as you can see,

272
00:11:06.020 --> 00:11:10.050
it's downloading github.com/boot2docker version.

273
00:11:10.050 --> 00:11:12.030
Once the VM is downloaded--

274
00:11:12.030 --> 00:11:14.090
well, boot2docker.iso essentially is the ISO,

275
00:11:14.090 --> 00:11:17.090
which is a tiny Linux VM that is actually used

276
00:11:17.090 --> 00:11:20.040
to create the VirtualBox VM.

277
00:11:20.040 --> 00:11:22.050
So ISO is the basic image.

278
00:11:22.050 --> 00:11:25.030
It uses VirtualBox and ISO combination

279
00:11:25.030 --> 00:11:27.000
to create the VM for you.

280
00:11:27.000 --> 00:11:30.020
Now this will take some time to create and provide an IP,

281
00:11:30.020 --> 00:11:32.060
so we'll just move forward.

282
00:11:32.060 --> 00:11:35.010
All right, now our Docker machine is created.

283
00:11:35.010 --> 00:11:38.000
You can see the commands are prepended by myhost,

284
00:11:38.000 --> 00:11:40.090
and now the operating system is identified, you know,

285
00:11:40.090 --> 00:11:44.000
it uses boot2docker to provision the machine;

286
00:11:44.000 --> 00:11:45.080
and now everything is running.

287
00:11:45.080 --> 00:11:47.050
Now, let me show you something here.

288
00:11:47.050 --> 00:11:51.070
So, if I do env and I do grep on Docker here, okay;

289
00:11:51.070 --> 00:11:54.010
well, let's clear up the screen for a second

290
00:11:54.010 --> 00:11:56.040
so that we can see the commands clearly.

291
00:11:56.040 --> 00:11:59.000
So now when I do env and I do grep on Docker;

292
00:11:59.000 --> 00:12:00.090
there is nothing over there, okay?

293
00:12:00.090 --> 00:12:04.090
But how do I configure my client to talk to Docker host?

294
00:12:04.090 --> 00:12:11.060
So what I do is I say docker-machine env myhost, okay?

295
00:12:11.060 --> 00:12:13.060
There are a bunch of commands that are available over here.

296
00:12:13.060 --> 00:12:14.080
We're not going to go into the details;

297
00:12:14.080 --> 00:12:17.030
but I can say myhost,

298
00:12:17.030 --> 00:12:19.060
and it shows me a lot of commands over here.

299
00:12:19.060 --> 00:12:22.080
But, essentially, my Docker CLI is looking

300
00:12:22.080 --> 00:12:25.080
at all of these different environment variables

301
00:12:25.080 --> 00:12:29.010
to configure on where the Docker host is living.

302
00:12:29.010 --> 00:12:30.030
So what I'm going to do here is

303
00:12:30.030 --> 00:12:33.050
I am going to literally copy this command here,

304
00:12:33.050 --> 00:12:36.030
and I'm going to paste it here.

305
00:12:36.030 --> 00:12:39.020
All it's saying is, okay, take those environment variables

306
00:12:39.020 --> 00:12:41.070
and set it as part of my environment.

307
00:12:41.070 --> 00:12:45.070
And I eval it, and now when I do a env and grep on Docker,

308
00:12:45.070 --> 00:12:47.060
those variables are set for me.

309
00:12:47.060 --> 00:12:51.080
So now when I say Docker image ls,

310
00:12:51.080 --> 00:12:53.090
and we'll talk about these commands in the next chapter;

311
00:12:53.090 --> 00:12:55.060
but, basically, this command shows

312
00:12:55.060 --> 00:12:58.000
how can you show the listing of all the images

313
00:12:58.000 --> 00:13:01.010
on the Docker host, which in our case is Docker machine.

314
00:13:01.010 --> 00:13:03.090
Boom, it shows no images exist;

315
00:13:03.090 --> 00:13:06.060
and that is true because we haven't created any images.

316
00:13:06.060 --> 00:13:08.040
We haven't downloaded any images so far,

317
00:13:08.040 --> 00:13:10.070
but at least it shows how can you configure

318
00:13:10.070 --> 00:13:14.080
your Docker CLI to talk to the Docker machine very easily.

319
00:13:14.080 --> 00:13:17.040
And, by the way, one thing that we forgot to mention

320
00:13:17.040 --> 00:13:19.040
is the Docker CLI in our case, of course,

321
00:13:19.040 --> 00:13:22.030
is available as part of Docker for Mac.

322
00:13:22.030 --> 00:13:24.020
So we download it from Docker for Mac.

323
00:13:24.020 --> 00:13:26.030
That's how our Docker CLI is available to us.

324
00:13:26.030 --> 00:13:27.020
All right?

325
00:13:27.020 --> 00:13:29.000
So hopefully you understood the basic concepts.

326
00:13:29.000 --> 00:13:30.070
In this case, we are using a Mac;

327
00:13:30.070 --> 00:13:32.050
but the same concepts would apply

328
00:13:32.050 --> 00:13:35.080
on a Linux or a Windows as well very easily.

329
00:13:35.080 --> 00:13:37.050
Well, of course, they would be different

330
00:13:37.050 --> 00:13:40.000
in terms of how would you set the eval

331
00:13:40.000 --> 00:13:42.080
because in this case eval is a Unix command.

332
00:13:42.080 --> 00:13:45.000
So you will have a similar command in the Windows, as well;

333
00:13:45.000 --> 00:13:47.020
and typically you would not need a Docker machine

334
00:13:47.020 --> 00:13:50.030
on a Linux Box because you have native AppGate

335
00:13:50.030 --> 00:13:52.000
and yum installed tools over there.

336
00:13:52.000 --> 00:13:54.090
But just to kind of provide a more holistic experience;

337
00:13:54.090 --> 00:13:57.090
once your CLI and your host is ready,

338
00:13:57.090 --> 00:14:00.000
the Docker command would work independent

339
00:14:00.000 --> 00:14:01.000
across different hosts.

