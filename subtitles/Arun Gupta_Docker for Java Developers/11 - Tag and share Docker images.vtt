WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] In the different docker images

2
00:00:01.070 --> 00:00:04.010
that we have built so far, we have seen,

3
00:00:04.010 --> 00:00:07.070
let's say we use Ubuntu or OpenJDK as a base image.

4
00:00:07.070 --> 00:00:10.070
We don't use a tag, there's a default latest tag,

5
00:00:10.070 --> 00:00:14.010
but if we need to we can specify an additional tag as well.

6
00:00:14.010 --> 00:00:17.050
So let's try to understand how can I create my own tags?

7
00:00:17.050 --> 00:00:19.040
How can I share these images?

8
00:00:19.040 --> 00:00:22.060
And what does it mean to have a real latest tag?

9
00:00:22.060 --> 00:00:25.040
Is it real or is it really latest?

10
00:00:25.040 --> 00:00:27.010
Let's try to understand that.

11
00:00:27.010 --> 00:00:29.080
Here I am on hub.docker.com

12
00:00:29.080 --> 00:00:33.040
let's take a look at OpenJDK page.

13
00:00:33.040 --> 00:00:35.010
This is my OpenJDK repo,

14
00:00:35.010 --> 00:00:36.090
and if I look at the tags here,

15
00:00:36.090 --> 00:00:38.010
it's got plenty of tags.

16
00:00:38.010 --> 00:00:40.080
These are some Windows specific versions,

17
00:00:40.080 --> 00:00:43.070
then I got a JRE, JDK, for nine,

18
00:00:43.070 --> 00:00:46.040
eight, then alpine versions

19
00:00:46.040 --> 00:00:49.000
that we use only in old samples,

20
00:00:49.000 --> 00:00:51.050
so there are plenty of tags here.

21
00:00:51.050 --> 00:00:54.070
I can look at Ubuntu as well.

22
00:00:54.070 --> 00:00:56.060
Look at the Ubuntu repo,

23
00:00:56.060 --> 00:01:00.060
and again, there are plenty of tags for Ubuntu as well,

24
00:01:00.060 --> 00:01:04.060
depending upon zesty release, or trusty release,

25
00:01:04.060 --> 00:01:06.090
or you are looking at a previous release,

26
00:01:06.090 --> 00:01:07.090
lots of tags.

27
00:01:07.090 --> 00:01:10.080
So you can really go very specific in terms of

28
00:01:10.080 --> 00:01:12.010
what do you want to do,

29
00:01:12.010 --> 00:01:15.000
in terms of what your base image that you want to use

30
00:01:15.000 --> 00:01:17.000
as part of your application, okay?

31
00:01:17.000 --> 00:01:19.080
So, let's build our image and take a look

32
00:01:19.080 --> 00:01:21.060
at how does this tagging work,

33
00:01:21.060 --> 00:01:25.020
and how can we make it effective and usable for us?

34
00:01:25.020 --> 00:01:26.050
I'm in my terminal here,

35
00:01:26.050 --> 00:01:31.020
and I am going into helloworld directory,

36
00:01:31.020 --> 00:01:33.010
and here, there's a single Dockerfile

37
00:01:33.010 --> 00:01:35.040
from a previous run of the chapter.

38
00:01:35.040 --> 00:01:38.000
And if I look at this Dockerfile,

39
00:01:38.000 --> 00:01:39.080
it's got OpenJDK, JDK-Alpine,

40
00:01:39.080 --> 00:01:41.080
and I'm seeing CMD java -version.

41
00:01:41.080 --> 00:01:44.050
That's not the docker file that we're going to use over here,

42
00:01:44.050 --> 00:01:46.050
so I'm going to open up this Dockerfile,

43
00:01:46.050 --> 00:01:48.050
and I'm going to edit it.

44
00:01:48.050 --> 00:01:51.040
I'm just going to use Ubuntu,

45
00:01:51.040 --> 00:01:54.020
and I'm going to specify the latest tag here.

46
00:01:54.020 --> 00:01:57.070
And, in order to simplify our Dockerimage,

47
00:01:57.070 --> 00:02:02.060
all I'm going to say is echo "This is v1",

48
00:02:02.060 --> 00:02:03.070
that's it.

49
00:02:03.070 --> 00:02:06.010
So we're just going to use the latest Ubuntu image,

50
00:02:06.010 --> 00:02:09.020
and we're going to just print this statement "This is v1".

51
00:02:09.020 --> 00:02:10.070
Save it here.

52
00:02:10.070 --> 00:02:13.050
Now, we have a few containers running around over here.

53
00:02:13.050 --> 00:02:16.030
So that the output is cleaner and easier to understand,

54
00:02:16.030 --> 00:02:17.090
I'm going to remove all the images,

55
00:02:17.090 --> 00:02:19.050
and remove all the containers.

56
00:02:19.050 --> 00:02:20.070
And this way you will also learn

57
00:02:20.070 --> 00:02:23.080
how easy it is to remove them in one shot.

58
00:02:23.080 --> 00:02:27.080
So, I'm going to say docker image ls,

59
00:02:27.080 --> 00:02:30.090
and if I say all quiet,

60
00:02:30.090 --> 00:02:33.010
it's going to print all the images, okay?

61
00:02:33.010 --> 00:02:36.050
And I'm going to use that as an input

62
00:02:36.050 --> 00:02:41.000
to docker image rm brute force remove it,

63
00:02:41.000 --> 00:02:44.040
and use all the values as arguments.

64
00:02:44.040 --> 00:02:47.030
So, all my images are now removed,

65
00:02:47.030 --> 00:02:49.050
and if I look at docker image ls,

66
00:02:49.050 --> 00:02:50.090
there are no images.

67
00:02:50.090 --> 00:02:56.030
Similarly, I can say docker container ls all quiet,

68
00:02:56.030 --> 00:02:58.020
and there are a few containers that are running.

69
00:02:58.020 --> 00:03:01.020
Use that that the input too.

70
00:03:01.020 --> 00:03:05.020
Docker container rm -f

71
00:03:05.020 --> 00:03:07.080
and all the containers have gone as well.

72
00:03:07.080 --> 00:03:10.050
So now, if I say docker container ls,

73
00:03:10.050 --> 00:03:12.030
none of the containers are existing.

74
00:03:12.030 --> 00:03:14.010
So that brings a good background

75
00:03:14.010 --> 00:03:15.070
in terms of what we're going to do next,

76
00:03:15.070 --> 00:03:17.090
so let's build our image.

77
00:03:17.090 --> 00:03:23.040
Docker image build dash, we're not giving dash t here,

78
00:03:23.040 --> 00:03:26.070
or a tag to the image but let's see what happens here.

79
00:03:26.070 --> 00:03:29.020
So, this is going to download the latest

80
00:03:29.020 --> 00:03:33.040
Ubuntu image for us and build our base image.

81
00:03:33.040 --> 00:03:35.050
So our image is built,

82
00:03:35.050 --> 00:03:38.010
let's take a look at image listing here.

83
00:03:38.010 --> 00:03:40.060
So I just got Ubuntu latest,

84
00:03:40.060 --> 00:03:44.000
and, oh, repository is none and tag is none.

85
00:03:44.000 --> 00:03:45.080
Well, that happens because we did not

86
00:03:45.080 --> 00:03:47.070
specify a tag for the image,

87
00:03:47.070 --> 00:03:50.010
and that's out of the default behavior essentially.

88
00:03:50.010 --> 00:03:52.050
Now, if I want to run this container,

89
00:03:52.050 --> 00:03:55.010
I would have to say docker container run,

90
00:03:55.010 --> 00:03:57.060
and because I don't have a name or a tag,

91
00:03:57.060 --> 00:04:00.010
I need to copy this image id,

92
00:04:00.010 --> 00:04:03.040
and paste it here and then I can run the container.

93
00:04:03.040 --> 00:04:06.040
That'll say "This is v1" so that's okay.

94
00:04:06.040 --> 00:04:10.010
Now let's say I build the image again,

95
00:04:10.010 --> 00:04:14.040
and this time, I say hello world, okay?

96
00:04:14.040 --> 00:04:16.040
I'm just giving it a tag.

97
00:04:16.040 --> 00:04:18.050
Alright, so let's do this.

98
00:04:18.050 --> 00:04:19.090
It built the image rather fast,

99
00:04:19.090 --> 00:04:21.050
because the image has already been created.

100
00:04:21.050 --> 00:04:23.060
Ubuntu image has been downloaded,

101
00:04:23.060 --> 00:04:26.040
let's take a look at the image listing.

102
00:04:26.040 --> 00:04:29.040
As you see here, this shows none none,

103
00:04:29.040 --> 00:04:33.010
but now, that none none is replaced by helloworld latest,

104
00:04:33.010 --> 00:04:36.010
because we have explicitly given it a name, okay?

105
00:04:36.010 --> 00:04:38.060
So, now, if I want to run the container,

106
00:04:38.060 --> 00:04:42.050
I can say docker container run helloworld,

107
00:04:42.050 --> 00:04:44.060
by default, it's the latest tag,

108
00:04:44.060 --> 00:04:45.090
so it shows me this output.

109
00:04:45.090 --> 00:04:49.030
Or, as I said, default is latest,

110
00:04:49.030 --> 00:04:50.080
this will show the same output.

111
00:04:50.080 --> 00:04:51.090
So that's kind of cool.

112
00:04:51.090 --> 00:04:53.070
Now, what I'm going to do is,

113
00:04:53.070 --> 00:04:57.070
I am going to remove the image with the latest tag.

114
00:04:57.070 --> 00:05:04.000
I'm going to say docker image rm helloworld:latest.

115
00:05:04.000 --> 00:05:05.030
Well, it's running the container,

116
00:05:05.030 --> 00:05:08.000
so let's terminate our container first.

117
00:05:08.000 --> 00:05:10.060
Container ls -a.

118
00:05:10.060 --> 00:05:12.040
There are lots of containers running here,

119
00:05:12.040 --> 00:05:14.020
and if you recall, we can remove

120
00:05:14.020 --> 00:05:17.020
all the containers with one command here.

121
00:05:17.020 --> 00:05:20.020
So I can say docker container rm

122
00:05:20.020 --> 00:05:23.090
and show me the list of all the containers quietly,

123
00:05:23.090 --> 00:05:25.000
and all the containers are gone,

124
00:05:25.000 --> 00:05:28.080
and now I can remove the image, okay?

125
00:05:28.080 --> 00:05:29.080
So that's good.

126
00:05:29.080 --> 00:05:32.040
So, now I'm going to build the image again,

127
00:05:32.040 --> 00:05:35.040
and I'm going to give it the tag :1,

128
00:05:35.040 --> 00:05:37.040
because this is version one.

129
00:05:37.040 --> 00:05:39.050
Alright, so the image is built.

130
00:05:39.050 --> 00:05:42.020
Now if I look at docker image ls,

131
00:05:42.020 --> 00:05:45.010
I only have helloworld 1,

132
00:05:45.010 --> 00:05:48.000
so if I want to run I need to run the image accordingly.

133
00:05:48.000 --> 00:05:53.030
So I can say docker container run helloworld:1.

134
00:05:53.030 --> 00:05:55.040
That shows a good output, but let's see,

135
00:05:55.040 --> 00:05:56.050
what happens if I do

136
00:05:56.050 --> 00:05:58.040
docker container run hello world?

137
00:05:58.040 --> 00:06:00.040
Well, the default is the latest tag,

138
00:06:00.040 --> 00:06:02.050
see what's going to happen now.

139
00:06:02.050 --> 00:06:03.070
Rightly so.

140
00:06:03.070 --> 00:06:05.030
The latest tag does not exist,

141
00:06:05.030 --> 00:06:07.040
so latest is not really latest, you know,

142
00:06:07.040 --> 00:06:10.000
you got to explicitly tag it latest.

143
00:06:10.000 --> 00:06:13.070
But let's see if I can brute force it.

144
00:06:13.070 --> 00:06:15.080
Nope, brute force doesn't work in this case,

145
00:06:15.080 --> 00:06:17.080
so the latest tag does not exist.

146
00:06:17.080 --> 00:06:19.050
Well, what I can do though is,

147
00:06:19.050 --> 00:06:23.020
I can say docker image tag,

148
00:06:23.020 --> 00:06:26.020
I can take helloworld:1,

149
00:06:26.020 --> 00:06:30.060
and I can tag it to helloworld:latest,

150
00:06:30.060 --> 00:06:34.060
and now, if I look at docker image ls,

151
00:06:34.060 --> 00:06:36.090
I got helloworld with tag 1,

152
00:06:36.090 --> 00:06:38.060
helloworld with tag latest.

153
00:06:38.060 --> 00:06:42.020
And now, if I try to run helloworld:latest,

154
00:06:42.020 --> 00:06:43.020
that'll work well.

155
00:06:43.020 --> 00:06:44.030
So that is pretty cool.

156
00:06:44.030 --> 00:06:46.020
Well, it's cool but the key part

157
00:06:46.020 --> 00:06:47.070
really you want to understand is

158
00:06:47.070 --> 00:06:49.020
latest is not really latest,

159
00:06:49.020 --> 00:06:53.000
it's latest only when you tag it to be latest.

160
00:06:53.000 --> 00:06:56.090
Let's prove that further by opening up our docker file here,

161
00:06:56.090 --> 00:06:58.080
and what I'm going to do is,

162
00:06:58.080 --> 00:07:00.030
I'm going to change the docker file,

163
00:07:00.030 --> 00:07:02.060
and I'm going to call it "This is v2".

164
00:07:02.060 --> 00:07:05.070
Only the command is being changed here, okay?

165
00:07:05.070 --> 00:07:09.000
So, now, I'm going to build my image again,

166
00:07:09.000 --> 00:07:14.010
and I'm going to call this as version two here, okay?

167
00:07:14.010 --> 00:07:15.040
So the image is built,

168
00:07:15.040 --> 00:07:21.060
and I'm going to run docker container run helloworld.

169
00:07:21.060 --> 00:07:24.070
Oh, this still shows "This is v1".

170
00:07:24.070 --> 00:07:26.040
But I just built "This is v2".

171
00:07:26.040 --> 00:07:29.000
So that is a conflict that you need to understand.

172
00:07:29.000 --> 00:07:32.000
So, go back to the point that I was stating earlier,

173
00:07:32.000 --> 00:07:36.000
I need to explicitly tag helloworld two

174
00:07:36.000 --> 00:07:37.090
to be helloworld:latest.

175
00:07:37.090 --> 00:07:40.060
Let's take a look at the image listing for a second.

176
00:07:40.060 --> 00:07:42.080
Well, two exist, one exist,

177
00:07:42.080 --> 00:07:46.020
but latest is pointing to helloworld:1.

178
00:07:46.020 --> 00:07:49.030
So let's tag the image,

179
00:07:49.030 --> 00:07:50.060
so what I'm going to do is,

180
00:07:50.060 --> 00:07:52.070
I'm going to take helloworld:2,

181
00:07:52.070 --> 00:07:54.090
and tag it to be helloworld:latest.

182
00:07:54.090 --> 00:07:57.050
And now, when I run helloworld,

183
00:07:57.050 --> 00:07:59.020
it rightly prints v2.

184
00:07:59.020 --> 00:08:00.050
So this is an important aspect that

185
00:08:00.050 --> 00:08:02.060
you need to understand that latest

186
00:08:02.060 --> 00:08:03.090
is not really latest,

187
00:08:03.090 --> 00:08:06.030
it is whatever is tagged to be latest,

188
00:08:06.030 --> 00:08:08.040
and whatever version is tagged to be the latest.

189
00:08:08.040 --> 00:08:11.030
So it's typically a misnomer that you want to understand.

190
00:08:11.030 --> 00:08:15.010
Now, let's try to push this image to docker hub,

191
00:08:15.010 --> 00:08:16.090
when it's at docker hub, anybody and everybody can push it,

192
00:08:16.090 --> 00:08:18.060
let's see if that's really true.

193
00:08:18.060 --> 00:08:23.090
So I'm going to take image push, helloworld:latest.

194
00:08:23.090 --> 00:08:26.080
It says "requested access to the resource is denied".

195
00:08:26.080 --> 00:08:28.030
Well, the reason it is denied is

196
00:08:28.030 --> 00:08:31.060
because you cannot push an image to dockerhub,

197
00:08:31.060 --> 00:08:34.000
unless it belongs to your namespace.

198
00:08:34.000 --> 00:08:36.070
In my case, my namespace has to be arungupta.

199
00:08:36.070 --> 00:08:41.030
So, now, I need to tag that image appropriately.

200
00:08:41.030 --> 00:08:44.030
So, I'm going to take the tag here,

201
00:08:44.030 --> 00:08:47.090
and instead of saying helloworld.latest, or :latest,

202
00:08:47.090 --> 00:08:51.060
I'm going to say arungupta/helloworld:latest.

203
00:08:51.060 --> 00:08:53.050
Now this is done,

204
00:08:53.050 --> 00:08:58.020
so I just need to login,

205
00:08:58.020 --> 00:08:59.050
and I'm logged in now,

206
00:08:59.050 --> 00:09:07.080
and now, when I say docker push arungupta/helloworld:latest,

207
00:09:07.080 --> 00:09:10.080
this image will be successfully pushed to the docker hub.

208
00:09:10.080 --> 00:09:12.070
So that is pretty cool.

209
00:09:12.070 --> 00:09:15.000
Now, while this is happening in the background,

210
00:09:15.000 --> 00:09:16.040
we pushed it to docker hub.

211
00:09:16.040 --> 00:09:19.000
How do we push it to a local registry in that case?

212
00:09:19.000 --> 00:09:21.030
Well, let's try to run a local registry

213
00:09:21.030 --> 00:09:23.070
and see what happens over there, okay?

214
00:09:23.070 --> 00:09:25.080
Now, in order to run a local registry,

215
00:09:25.080 --> 00:09:26.070
what I could do is,

216
00:09:26.070 --> 00:09:28.090
I can run that as a docker image as well.

217
00:09:28.090 --> 00:09:30.070
So I'm going to say docker run,

218
00:09:30.070 --> 00:09:32.060
run it in a detached mode,

219
00:09:32.060 --> 00:09:35.010
do the port forwarding appropriately.

220
00:09:35.010 --> 00:09:36.070
I'm going to restart the registry

221
00:09:36.070 --> 00:09:39.060
so that it can automatically restart,

222
00:09:39.060 --> 00:09:43.030
and the value of that parameter is always.

223
00:09:43.030 --> 00:09:46.000
I'm going to give it a name, registry,

224
00:09:46.000 --> 00:09:49.070
and now, I'm going to give it a docker image name,

225
00:09:49.070 --> 00:09:52.020
this is registry, and give it a tag.

226
00:09:52.020 --> 00:09:55.050
So this is going to start a private registry

227
00:09:55.050 --> 00:09:57.070
on my local machine here.

228
00:09:57.070 --> 00:09:59.090
And, there's a typo in the command,

229
00:09:59.090 --> 00:10:02.090
we can always fix that here, and that's done it.

230
00:10:02.090 --> 00:10:05.090
But, of course, registry 2.6.0 doesn't exist,

231
00:10:05.090 --> 00:10:07.030
so it's going to download the image,

232
00:10:07.030 --> 00:10:09.030
and is going to run the image for me.

233
00:10:09.030 --> 00:10:14.000
Now, in order to push the image to my local registry here,

234
00:10:14.000 --> 00:10:15.080
I need to tag it appropriately.

235
00:10:15.080 --> 00:10:17.070
So I'm going to say docker tag,

236
00:10:17.070 --> 00:10:23.020
rather image tag, helloworld:latest

237
00:10:23.020 --> 00:10:28.060
and my registry is running on localhost:5000,

238
00:10:28.060 --> 00:10:34.050
so I'm going to say take it to arungupta/helloworld:latest.

239
00:10:34.050 --> 00:10:35.090
So I need to tag it.

240
00:10:35.090 --> 00:10:37.070
The format really here is

241
00:10:37.070 --> 00:10:40.080
registry, the image name, and the tag name.

242
00:10:40.080 --> 00:10:43.060
So those are the three parts that you need to understand.

243
00:10:43.060 --> 00:10:47.070
So I just tagged it, if I look at the image listing now,

244
00:10:47.070 --> 00:10:50.070
you can see this is my complete image name,

245
00:10:50.070 --> 00:10:53.090
and now, this can be easily pushed to the local registry.

246
00:10:53.090 --> 00:10:56.080
So I'm going to say docker image push

247
00:10:56.080 --> 00:11:05.090
localhost:5000/arungupta/helloworld:latest.

248
00:11:05.090 --> 00:11:09.010
And this image is now pushed to my local registry.

249
00:11:09.010 --> 00:11:13.020
So, in this section, we saw what does tagging mean,

250
00:11:13.020 --> 00:11:15.070
that the latest is not really latest,

251
00:11:15.070 --> 00:11:18.070
and how these images can be pushed to docker hub

252
00:11:18.070 --> 00:11:20.000
or to your local registry.

