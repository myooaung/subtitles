WEBVTT
1
00:00:00.060 --> 00:00:02.000
- [Instructor] So far we have build simple

2
00:00:02.000 --> 00:00:04.030
docker images, run containers.

3
00:00:04.030 --> 00:00:06.040
Now, in a typical docker image,

4
00:00:06.040 --> 00:00:08.000
we want to copy our artifacts,

5
00:00:08.000 --> 00:00:11.020
be it a JAR file, or a WAR file, or something else,

6
00:00:11.020 --> 00:00:12.070
you want to copy it in there.

7
00:00:12.070 --> 00:00:14.040
And when we run that docker image,

8
00:00:14.040 --> 00:00:16.070
essentially we would like the container

9
00:00:16.070 --> 00:00:18.060
to do something with the JAR file,

10
00:00:18.060 --> 00:00:20.050
either run the JAR file,

11
00:00:20.050 --> 00:00:22.060
or invoke a particular class in the JAR file,

12
00:00:22.060 --> 00:00:24.000
or something like that, okay.

13
00:00:24.000 --> 00:00:26.000
So, next what we're going to look at is

14
00:00:26.000 --> 00:00:28.050
how is it that we can copy the files

15
00:00:28.050 --> 00:00:30.050
to a docker image.

16
00:00:30.050 --> 00:00:34.010
Now, in the Dockerfile, if you recall, we talked about

17
00:00:34.010 --> 00:00:36.010
there are multiple instruction that would go.

18
00:00:36.010 --> 00:00:39.040
Now, two of such instructions are copy and add,

19
00:00:39.040 --> 00:00:40.060
and it's often confused.

20
00:00:40.060 --> 00:00:42.010
Which one should I used?

21
00:00:42.010 --> 00:00:43.020
So let's take a look.

22
00:00:43.020 --> 00:00:47.080
Now, COPY instruction, it copy new files or directories

23
00:00:47.080 --> 00:00:51.040
from your local machine to the container file system.

24
00:00:51.040 --> 00:00:53.070
So let's say you are using a Maven project.

25
00:00:53.070 --> 00:00:56.020
From the Maven project, you created an application,

26
00:00:56.020 --> 00:00:57.070
and from that application,

27
00:00:57.070 --> 00:01:00.020
there is a target directory, there is JAR file,

28
00:01:00.020 --> 00:01:02.030
and you want to copy it to the container,

29
00:01:02.030 --> 00:01:04.030
you would use a copy instruction.

30
00:01:04.030 --> 00:01:06.020
Well, add instruction.

31
00:01:06.020 --> 00:01:09.010
ADD instruction has everything that copy instruction has,

32
00:01:09.010 --> 00:01:11.070
but in addition, it also allows

33
00:01:11.070 --> 00:01:14.060
tar file auto-extraction in the image.

34
00:01:14.060 --> 00:01:16.000
Let's say you have a tar file

35
00:01:16.000 --> 00:01:18.010
that you want to get copied to the image

36
00:01:18.010 --> 00:01:19.050
and then auto-extract,

37
00:01:19.050 --> 00:01:20.090
that's when you would use this.

38
00:01:20.090 --> 00:01:25.050
So for example, in this case you can say ADD app.tar.gz,

39
00:01:25.050 --> 00:01:27.020
which is on your location machine

40
00:01:27.020 --> 00:01:29.070
to opt/var/myapp directory

41
00:01:29.070 --> 00:01:31.030
which is in the container file system,

42
00:01:31.030 --> 00:01:35.050
so the contents of app.tar.gz will be auto-extracted

43
00:01:35.050 --> 00:01:37.000
in that directory.

44
00:01:37.000 --> 00:01:41.050
With add, you can also download a file from a remote URL.

45
00:01:41.050 --> 00:01:43.040
Now, that's not typically recommended,

46
00:01:43.040 --> 00:01:45.050
because, typically, when you download a file,

47
00:01:45.050 --> 00:01:47.090
you want to auto-extract it or do something with it.

48
00:01:47.090 --> 00:01:52.070
So the recommendation is, generally, use curl or wget,

49
00:01:52.070 --> 00:01:54.020
based upon your operating system

50
00:01:54.020 --> 00:01:56.030
or the utilities that you have available.

51
00:01:56.030 --> 00:02:00.090
You use one of those tools to download the tar file,

52
00:02:00.090 --> 00:02:03.080
and then extract the contents if you need to,

53
00:02:03.080 --> 00:02:05.040
and then get rid of the tar file,

54
00:02:05.040 --> 00:02:09.030
because, otherwise, it could cause unnecessary bloat

55
00:02:09.030 --> 00:02:11.040
in your overall image size.

56
00:02:11.040 --> 00:02:13.070
So that's the important aspect to understand.

57
00:02:13.070 --> 00:02:14.080
What we're going to do is

58
00:02:14.080 --> 00:02:17.000
we're going to take a look at the copy instruction,

59
00:02:17.000 --> 00:02:20.050
and show how that can be used to copy a WAR file

60
00:02:20.050 --> 00:02:23.070
into our image, and then run that image.

61
00:02:23.070 --> 00:02:25.070
So let's go to our terminal.

62
00:02:25.070 --> 00:02:27.020
Just like any docker image,

63
00:02:27.020 --> 00:02:31.000
I'll make a new directory here by the name helloweb.

64
00:02:31.000 --> 00:02:33.010
Okay, now I'm in the helloweb directory.

65
00:02:33.010 --> 00:02:35.000
I'm going to go into helloweb,

66
00:02:35.000 --> 00:02:38.050
and in my chapter2, which is my exercise files,

67
00:02:38.050 --> 00:02:43.080
I'm going to copy the webapp.war file in this directory.

68
00:02:43.080 --> 00:02:45.050
And remember, I am in helloweb.

69
00:02:45.050 --> 00:02:48.070
So now, I'm going to create a Dockerfile here.

70
00:02:48.070 --> 00:02:51.040
In this Dockerfile the WAR file that we have

71
00:02:51.040 --> 00:02:52.080
is a Java EE application,

72
00:02:52.080 --> 00:02:55.070
so we would like to deploy this into the WildFly container.

73
00:02:55.070 --> 00:03:00.010
So I can just directly say FROM jboss/wildfly.

74
00:03:00.010 --> 00:03:01.000
Okay.

75
00:03:01.000 --> 00:03:03.070
And in order to copy the WAR file,

76
00:03:03.070 --> 00:03:05.080
from my local file system,

77
00:03:05.080 --> 00:03:08.080
because webapp.war file is in my current directory,

78
00:03:08.080 --> 00:03:10.090
and this result from the build context

79
00:03:10.090 --> 00:03:12.090
that we talked about earlier,

80
00:03:12.090 --> 00:03:15.010
I'm going to copy it into my container file system,

81
00:03:15.010 --> 00:03:16.000
which is

82
00:03:16.000 --> 00:03:25.040
opt/jboss/wildfly/standalone/deployments/webapp.war.

83
00:03:25.040 --> 00:03:26.020
That's it.

84
00:03:26.020 --> 00:03:28.050
Now you may wonder, there is no CMD command.

85
00:03:28.050 --> 00:03:29.030
How does this work?

86
00:03:29.030 --> 00:03:33.040
Well, in jboss/wildfly image, there is a CMD command,

87
00:03:33.040 --> 00:03:36.010
which by default fires up WildFly.

88
00:03:36.010 --> 00:03:36.090
Let's take a look at that.

89
00:03:36.090 --> 00:03:39.000
So let's go to a browser for a second.

90
00:03:39.000 --> 00:03:43.030
So I'm going to go to hub.docker.com

91
00:03:43.030 --> 00:03:48.090
and I will search for jboss/wildfly here.

92
00:03:48.090 --> 00:03:50.090
Here is my image.

93
00:03:50.090 --> 00:03:54.070
And if I look at the corresponding Dockerfile here,

94
00:03:54.070 --> 00:03:57.000
if you go all the way to the bottom,

95
00:03:57.000 --> 00:03:59.080
here it says it's starting WildFly

96
00:03:59.080 --> 00:04:02.040
and binding to all network interfaces.

97
00:04:02.040 --> 00:04:05.090
Now, we talked about how image hierarchy is used.

98
00:04:05.090 --> 00:04:08.030
The other part that you also need to understand is

99
00:04:08.030 --> 00:04:10.090
in multiple Dockerfiles that have been used

100
00:04:10.090 --> 00:04:12.040
to create your image,

101
00:04:12.040 --> 00:04:14.080
only one CMD command is effective.

102
00:04:14.080 --> 00:04:18.030
So if you write a CMD in your Dockerfile,

103
00:04:18.030 --> 00:04:21.050
then the CMD in the parent Dockerfile would be overridden.

104
00:04:21.050 --> 00:04:24.050
In your Dockerfile, we could have multiple CMD,

105
00:04:24.050 --> 00:04:26.070
only the last CMD would be effective.

106
00:04:26.070 --> 00:04:29.070
But in our case, we only care about the default behavior

107
00:04:29.070 --> 00:04:32.020
of WildFly starting up, so we are okay.

108
00:04:32.020 --> 00:04:34.020
We don't need to override the CMD command.

109
00:04:34.020 --> 00:04:36.000
We just used the copy instruction,

110
00:04:36.000 --> 00:04:38.080
copy the WAR file into the WildFly standard directory,

111
00:04:38.080 --> 00:04:40.070
and then WildFly will do the right thing,

112
00:04:40.070 --> 00:04:42.040
so this is the default behavior.

113
00:04:42.040 --> 00:04:44.000
So let's go back to our terminal,

114
00:04:44.000 --> 00:04:45.060
and build our image.

115
00:04:45.060 --> 00:04:47.020
So, back in the terminal here.

116
00:04:47.020 --> 00:04:49.010
Let's save the image here.

117
00:04:49.010 --> 00:04:52.000
We only have Dockerfile and webapp.war.

118
00:04:52.000 --> 00:04:57.030
We're going to say docker image build -t helloweb,

119
00:04:57.030 --> 00:04:58.060
and I'm going to go with the build context

120
00:04:58.060 --> 00:05:01.000
as the current directory.

121
00:05:01.000 --> 00:05:03.030
Because my JBoss WildFly image is already there,

122
00:05:03.030 --> 00:05:05.060
so that layer is already available for me.

123
00:05:05.060 --> 00:05:08.030
I just have to copy the WAR file, and that's it.

124
00:05:08.030 --> 00:05:11.030
Now, let's take a look at image listing here.

125
00:05:11.030 --> 00:05:13.040
It is my helloweb,

126
00:05:13.040 --> 00:05:17.000
and this is slightly bigger than the standard WildFly image,

127
00:05:17.000 --> 00:05:19.080
but what I can also do is I can say

128
00:05:19.080 --> 00:05:23.030
docker image history helloweb.

129
00:05:23.030 --> 00:05:25.010
It's showing you lots of details

130
00:05:25.010 --> 00:05:27.030
about the WildFly image here,

131
00:05:27.030 --> 00:05:30.040
but this is the copy command that we gave,

132
00:05:30.040 --> 00:05:32.020
which is showing as the last image

133
00:05:32.020 --> 00:05:33.060
in the helloweb directory.

134
00:05:33.060 --> 00:05:36.030
Now, in order to run this container,

135
00:05:36.030 --> 00:05:38.010
docker container run,

136
00:05:38.010 --> 00:05:41.080
and you guess it right, we're just going to say helloweb,

137
00:05:41.080 --> 00:05:44.050
ad we need to expose ports here.

138
00:05:44.050 --> 00:05:47.030
So, host port, container port,

139
00:05:47.030 --> 00:05:49.020
and run it in detach mode.

140
00:05:49.020 --> 00:05:50.050
It's just a simple command,

141
00:05:50.050 --> 00:05:53.060
and we can fire up our container here now.

142
00:05:53.060 --> 00:05:55.070
Certain times you may get an error

143
00:05:55.070 --> 00:05:58.020
that the port is already allocated.

144
00:05:58.020 --> 00:06:00.010
Now, that error occurs typically

145
00:06:00.010 --> 00:06:02.050
if you have a container that is already running,

146
00:06:02.050 --> 00:06:04.010
and using that port.

147
00:06:04.010 --> 00:06:06.000
Well, that can be easily fixed.

148
00:06:06.000 --> 00:06:08.000
So, what you need to do is

149
00:06:08.000 --> 00:06:11.020
remove the container that is using the port 8080.

150
00:06:11.020 --> 00:06:13.050
You can look at the listing of the containers

151
00:06:13.050 --> 00:06:16.030
by using docker container ls command,

152
00:06:16.030 --> 00:06:19.040
and then use the docker container rm command

153
00:06:19.040 --> 00:06:21.060
to remove that specific container.

154
00:06:21.060 --> 00:06:24.010
Or for convenience, remove all the containers

155
00:06:24.010 --> 00:06:25.080
just to have a clean environment.

156
00:06:25.080 --> 00:06:29.040
And once again, that can be done using docker container rm,

157
00:06:29.040 --> 00:06:33.060
and listing all the container IDs, space separated.

158
00:06:33.060 --> 00:06:36.020
Now, if we look at the list of containers,

159
00:06:36.020 --> 00:06:37.090
so docker container ls,

160
00:06:37.090 --> 00:06:39.070
that is the only container running here.

161
00:06:39.070 --> 00:06:41.030
Well, if you don't give it a name,

162
00:06:41.030 --> 00:06:43.010
then it gives you a nice fancy name.

163
00:06:43.010 --> 00:06:45.080
In this case, it's romantic_poincare.

164
00:06:45.080 --> 00:06:50.010
So the key part is now I can access my application

165
00:06:50.010 --> 00:06:53.030
on application name was webapp,

166
00:06:53.030 --> 00:06:56.040
rest resources and persons.

167
00:06:56.040 --> 00:06:57.040
Tada!

168
00:06:57.040 --> 00:07:00.040
So, we ran this container earlier

169
00:07:00.040 --> 00:07:02.020
by simply copying the WAR file,

170
00:07:02.020 --> 00:07:03.090
but we build the image

171
00:07:03.090 --> 00:07:06.020
and we run the container ourselves as well.

172
00:07:06.020 --> 00:07:08.060
So, you're getting familiar with the entire

173
00:07:08.060 --> 00:07:10.090
workflow of docker,

174
00:07:10.090 --> 00:07:12.070
building image, running containers,

175
00:07:12.070 --> 00:07:15.000
and hopefully getting more and more familiar with it.

