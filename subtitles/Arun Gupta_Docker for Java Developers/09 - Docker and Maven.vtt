WEBVTT
1
00:00:00.060 --> 00:00:03.000
- [Instructor] We saw how easy it was to package

2
00:00:03.000 --> 00:00:05.050
a Java application in a Docker image

3
00:00:05.050 --> 00:00:08.000
and run it as a Docker container.

4
00:00:08.000 --> 00:00:11.040
But that still required a lot of hard coding,

5
00:00:11.040 --> 00:00:14.030
or building or authoring a Docker file,

6
00:00:14.030 --> 00:00:16.010
and then running the command.

7
00:00:16.010 --> 00:00:19.030
Now typically, when you are packaging a Java application,

8
00:00:19.030 --> 00:00:21.020
or when you're building a Java application,

9
00:00:21.020 --> 00:00:23.020
you use tools like Maven.

10
00:00:23.020 --> 00:00:25.020
And then you say, Maven clean package,

11
00:00:25.020 --> 00:00:27.020
and it just packages it for you.

12
00:00:27.020 --> 00:00:29.020
So, what are my options?

13
00:00:29.020 --> 00:00:31.040
Now this section will show you how can you

14
00:00:31.040 --> 00:00:33.090
easily use a Docker Maven plug-in

15
00:00:33.090 --> 00:00:38.000
to embed that as part of your usual development cycle.

16
00:00:38.000 --> 00:00:40.060
So for that, we're going to look at the Java repo,

17
00:00:40.060 --> 00:00:42.080
and then we will take a look at the project,

18
00:00:42.080 --> 00:00:45.040
and then we will show you the commands.

19
00:00:45.040 --> 00:00:46.060
First thing, let's take a look

20
00:00:46.060 --> 00:00:48.080
at this simple Docker Java sample.

21
00:00:48.080 --> 00:00:52.080
Now you can check out from this GitHub repo over here,

22
00:00:52.080 --> 00:00:55.000
click on clone or download,

23
00:00:55.000 --> 00:00:57.030
and you can clone this repo very easily.

24
00:00:57.030 --> 00:00:58.090
I've already cloned this repo,

25
00:00:58.090 --> 00:01:01.090
and let's take a look at this repo in NetBeans.

26
00:01:01.090 --> 00:01:03.070
Now here we are in NetBeans.

27
00:01:03.070 --> 00:01:06.050
If I look at my source packages,

28
00:01:06.050 --> 00:01:09.020
one simple app, just Hello World,

29
00:01:09.020 --> 00:01:10.080
that's all we need.

30
00:01:10.080 --> 00:01:14.040
Now let's look at the corresponding project file here, okay.

31
00:01:14.040 --> 00:01:16.020
Now in this project file, of course,

32
00:01:16.020 --> 00:01:17.060
I have a single dependency,

33
00:01:17.060 --> 00:01:20.040
now if I have desk packages, then I would need this.

34
00:01:20.040 --> 00:01:22.020
I have my Maven compiler plug-in.

35
00:01:22.020 --> 00:01:25.070
I'm setting the version to Java 1.8.

36
00:01:25.070 --> 00:01:28.040
I have my exact Maven plug-in that allows me

37
00:01:28.040 --> 00:01:30.070
to execute the java application

38
00:01:30.070 --> 00:01:33.000
by specifying a main class.

39
00:01:33.000 --> 00:01:35.000
And I have my Maven jar plug-in as well,

40
00:01:35.000 --> 00:01:37.070
which allows me to build the application.

41
00:01:37.070 --> 00:01:39.030
So let's take a look at, first,

42
00:01:39.030 --> 00:01:43.030
what my usual standard flow with Maven would look like.

43
00:01:43.030 --> 00:01:44.090
Let's go to the terminal for a second.

44
00:01:44.090 --> 00:01:47.080
And let's take a look at it.

45
00:01:47.080 --> 00:01:52.030
Now, in terminal, I'm into docker-java-sample directory.

46
00:01:52.030 --> 00:01:55.070
I'm going to say, mvn clean package,

47
00:01:55.070 --> 00:02:00.010
and I'm going to say exec:java, okay?

48
00:02:00.010 --> 00:02:03.010
If I do this, this is going to package my java application,

49
00:02:03.010 --> 00:02:04.090
it's going to run the java application,

50
00:02:04.090 --> 00:02:07.010
and it just prints the command Hello World.

51
00:02:07.010 --> 00:02:09.000
That's really standard usual stuff

52
00:02:09.000 --> 00:02:10.020
that you're aware of.

53
00:02:10.020 --> 00:02:11.070
So nothing new over there.

54
00:02:11.070 --> 00:02:13.040
Now let's go back to NetBeans

55
00:02:13.040 --> 00:02:16.080
and see how we're going to Dockerize it.

56
00:02:16.080 --> 00:02:18.080
Now if I look at my NetBeans here,

57
00:02:18.080 --> 00:02:21.030
I've added a new Docker profile here.

58
00:02:21.030 --> 00:02:22.090
This is a Maven profile,

59
00:02:22.090 --> 00:02:25.000
so you can add whatever you want to add here,

60
00:02:25.000 --> 00:02:27.070
but let's blow up my window for a second.

61
00:02:27.070 --> 00:02:30.060
Now in here, I'm using docker-maven-plugin.

62
00:02:30.060 --> 00:02:32.080
That is coming from the groupID io.fabric8,

63
00:02:32.080 --> 00:02:34.080
this is done by the fabric8 team.

64
00:02:34.080 --> 00:02:35.080
Very actively maintained,

65
00:02:35.080 --> 00:02:37.080
and this is always the preferred choice

66
00:02:37.080 --> 00:02:39.030
for the Docker Maven plug-in.

67
00:02:39.030 --> 00:02:40.040
Now you can take a look at it,

68
00:02:40.040 --> 00:02:42.090
there are a variety of Docker Maven plug-ins available,

69
00:02:42.090 --> 00:02:45.040
but this is the one I've seen very actively maintained,

70
00:02:45.040 --> 00:02:47.020
and the community is very healthy around it,

71
00:02:47.020 --> 00:02:48.040
so this is my choice.

72
00:02:48.040 --> 00:02:51.050
You're welcome to look at other options.

73
00:02:51.050 --> 00:02:53.040
Now in here, for the plug-in,

74
00:02:53.040 --> 00:02:55.010
I need to specify the configuration,

75
00:02:55.010 --> 00:02:56.060
then I'm saying what are the images

76
00:02:56.060 --> 00:02:58.000
that I need to build here.

77
00:02:58.000 --> 00:03:00.000
I'm giving image a name.

78
00:03:00.000 --> 00:03:02.010
If I want, I can give it a tag here,

79
00:03:02.010 --> 00:03:04.050
but then we are talking about how we want

80
00:03:04.050 --> 00:03:06.000
to build the image here.

81
00:03:06.000 --> 00:03:09.060
So, in this case, I'm using openjdk:latest image.

82
00:03:09.060 --> 00:03:12.090
And I'm saying, all right, package my artifact.

83
00:03:12.090 --> 00:03:15.000
Now that's a very useful command here

84
00:03:15.000 --> 00:03:16.070
because all it's saying is,

85
00:03:16.070 --> 00:03:18.050
whatever artifact you are building,

86
00:03:18.050 --> 00:03:21.000
just package it into my directory.

87
00:03:21.000 --> 00:03:24.020
And the way the fabric8 Maven plug-in works,

88
00:03:24.020 --> 00:03:27.050
it just packages all of that into a Maven directory

89
00:03:27.050 --> 00:03:29.020
into your container file system.

90
00:03:29.020 --> 00:03:31.090
So essentially, your command, in that sense,

91
00:03:31.090 --> 00:03:37.080
can say java -jar maven, and the artifact name here.

92
00:03:37.080 --> 00:03:39.080
Finally, we are saying run,

93
00:03:39.080 --> 00:03:41.080
and wait for this particular output,

94
00:03:41.080 --> 00:03:43.080
which is Hello World over here, okay?

95
00:03:43.080 --> 00:03:46.060
So that's kind of cool, it builds the image, it runs it.

96
00:03:46.060 --> 00:03:49.080
Now how does it tie to my usual Maven commands?

97
00:03:49.080 --> 00:03:53.000
What I'm saying is, every time I say, package,

98
00:03:53.000 --> 00:03:55.010
then it's going to build the image.

99
00:03:55.010 --> 00:03:59.070
Every time I say install, it's going to run the container

100
00:03:59.070 --> 00:04:01.040
and print the logs for me.

101
00:04:01.040 --> 00:04:03.050
So let's take a look at the basic commands first,

102
00:04:03.050 --> 00:04:04.080
and then I will show you a little bit more

103
00:04:04.080 --> 00:04:06.050
extended set of commands.

104
00:04:06.050 --> 00:04:08.040
Let's go to the terminal now.

105
00:04:08.040 --> 00:04:11.030
I don't need to say exec java here.

106
00:04:11.030 --> 00:04:12.080
I don't need to say clean.

107
00:04:12.080 --> 00:04:18.090
All I need to say is mvn package -Pdocker.

108
00:04:18.090 --> 00:04:21.030
So I'm specifying the Docker profile here now,

109
00:04:21.030 --> 00:04:23.080
and when I hit enter here,

110
00:04:23.080 --> 00:04:25.060
you can see the command that is coming out.

111
00:04:25.060 --> 00:04:27.060
It's building my hello java image.

112
00:04:27.060 --> 00:04:32.080
Now I can go here, I can say, Docker image ls.

113
00:04:32.080 --> 00:04:34.070
Here is my hellojava image,

114
00:04:34.070 --> 00:04:36.070
and it was built about eight seconds ago.

115
00:04:36.070 --> 00:04:39.010
That's pretty cool.

116
00:04:39.010 --> 00:04:41.020
Now, if we went with the other command that we had,

117
00:04:41.020 --> 00:04:43.030
or the (mumbles) mapping,

118
00:04:43.030 --> 00:04:45.060
now you can say mvn install,

119
00:04:45.060 --> 00:04:48.010
I can give -Pdocker,

120
00:04:48.010 --> 00:04:50.020
and now by Maven standards,

121
00:04:50.020 --> 00:04:51.070
it's going to build the image first,

122
00:04:51.070 --> 00:04:53.040
and then it's going to run the container.

123
00:04:53.040 --> 00:04:57.040
So as we said, it built the image, and it ran the container,

124
00:04:57.040 --> 00:04:59.010
and it showed me the output here.

125
00:04:59.010 --> 00:05:00.060
Really cool.

126
00:05:00.060 --> 00:05:03.040
So let's break the container output here,

127
00:05:03.040 --> 00:05:06.050
and now go to browser for a second.

128
00:05:06.050 --> 00:05:08.000
I'm in my browser here,

129
00:05:08.000 --> 00:05:10.040
and I want to refer you back to the

130
00:05:10.040 --> 00:05:12.080
Docker Maven plug-in documentation page.

131
00:05:12.080 --> 00:05:13.090
This is the easiest source.

132
00:05:13.090 --> 00:05:16.010
I always prefer the GitHub sources,

133
00:05:16.010 --> 00:05:18.080
and you can see there are a variety of commands,

134
00:05:18.080 --> 00:05:21.010
or other goals that are available

135
00:05:21.010 --> 00:05:23.040
that you can tie to different Maven phases.

136
00:05:23.040 --> 00:05:26.060
Essentially, you have commands to

137
00:05:26.060 --> 00:05:28.000
create and start containers,

138
00:05:28.000 --> 00:05:29.010
stop and destroy containers,

139
00:05:29.010 --> 00:05:32.050
build images, push images to registry,

140
00:05:32.050 --> 00:05:34.070
remove images from local Docker host,

141
00:05:34.070 --> 00:05:37.020
create a volume, remove a created volume.

142
00:05:37.020 --> 00:05:39.090
So essentially, in your pom xml,

143
00:05:39.090 --> 00:05:43.060
you can tie all of these goals to different phases

144
00:05:43.060 --> 00:05:46.080
and create a very comprehensive workflow

145
00:05:46.080 --> 00:05:49.080
as part of your normal Maven cycle itself.

146
00:05:49.080 --> 00:05:52.050
Now in my case, I of course put them into a profile,

147
00:05:52.050 --> 00:05:54.050
and if you don't want to put it in a profile,

148
00:05:54.050 --> 00:05:56.040
you can just tie it directly

149
00:05:56.040 --> 00:05:58.000
without being part of a profile,

150
00:05:58.000 --> 00:05:59.060
and then you say Maven package,

151
00:05:59.060 --> 00:06:01.070
and it'll package the Docker image for you.

152
00:06:01.070 --> 00:06:05.000
So I hope you find this Docker Maven integration useful.

153
00:06:05.000 --> 00:06:07.000
And can apply it to your workplace as well.

