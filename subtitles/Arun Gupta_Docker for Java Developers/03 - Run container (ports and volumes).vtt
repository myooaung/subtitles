WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Instructor] We have run a basic container

2
00:00:02.010 --> 00:00:04.000
and we've figured out how can we run it

3
00:00:04.000 --> 00:00:05.040
in an interactive way,

4
00:00:05.040 --> 00:00:07.040
how can we run it in a detached way,

5
00:00:07.040 --> 00:00:09.060
how can we stop it, remove it.

6
00:00:09.060 --> 00:00:11.020
But so far, running the container

7
00:00:11.020 --> 00:00:12.050
has been no good to us,

8
00:00:12.050 --> 00:00:14.080
because we have not been able to access it yet.

9
00:00:14.080 --> 00:00:17.090
Well for that, you need to be able to expose ports.

10
00:00:17.090 --> 00:00:19.060
And attach volumes to it

11
00:00:19.060 --> 00:00:21.080
so that it can deploy .war files to it.

12
00:00:21.080 --> 00:00:23.030
So let's take a look at that next.

13
00:00:23.030 --> 00:00:25.010
Now, I'm in my terminal here,

14
00:00:25.010 --> 00:00:29.000
and I'm going to try to start the WildFly container once again.

15
00:00:29.000 --> 00:00:32.050
So, we're going to say, docker container.

16
00:00:32.050 --> 00:00:35.040
I'm going to run it in a detached mode.

17
00:00:35.040 --> 00:00:37.070
And I'll give it a name web.

18
00:00:37.070 --> 00:00:40.080
And now, I want to publish the ports.

19
00:00:40.080 --> 00:00:42.000
I say -P.

20
00:00:42.000 --> 00:00:43.020
"What do you mean by publish the ports?"

21
00:00:43.020 --> 00:00:46.070
Well, WildFly we know by default runs on 8080.

22
00:00:46.070 --> 00:00:48.040
So in the WildFly image,

23
00:00:48.040 --> 00:00:50.090
there's an instruction called expose.

24
00:00:50.090 --> 00:00:51.070
We'll take a look at that

25
00:00:51.070 --> 00:00:53.060
when we go into building images.

26
00:00:53.060 --> 00:00:55.050
But essentially, WildFly is saying

27
00:00:55.050 --> 00:00:58.080
I'm available at port 8080 if you want to talk to me.

28
00:00:58.080 --> 00:01:02.010
By saying -P you pick a random port

29
00:01:02.010 --> 00:01:04.020
in a certain range and expose me,

30
00:01:04.020 --> 00:01:07.070
basically make myself available.

31
00:01:07.070 --> 00:01:10.000
And then, we type the image name

32
00:01:10.000 --> 00:01:12.030
and let's run the container here.

33
00:01:12.030 --> 00:01:15.000
Okay, so since the image is already downloaded

34
00:01:15.000 --> 00:01:17.010
the container starts up rather rapidly.

35
00:01:17.010 --> 00:01:21.010
So now I can say docker container ls.

36
00:01:21.010 --> 00:01:23.010
And there you go, the container has started.

37
00:01:23.010 --> 00:01:24.090
Everything else in this output

38
00:01:24.090 --> 00:01:27.010
looks pretty similar that we saw earlier.

39
00:01:27.010 --> 00:01:30.010
The key part that you want to focus on is right here.

40
00:01:30.010 --> 00:01:33.080
And it says, take all the network interfaces on the host,

41
00:01:33.080 --> 00:01:36.070
which is indicated by 0.0.0,

42
00:01:36.070 --> 00:01:40.050
port 32768 over there and redirect it

43
00:01:40.050 --> 00:01:42.070
to port 8080 in the container.

44
00:01:42.070 --> 00:01:44.000
So what that means is

45
00:01:44.000 --> 00:01:45.060
now if I go to my browser

46
00:01:45.060 --> 00:01:49.060
and I try to access localhost:32768,

47
00:01:49.060 --> 00:01:51.050
it will be accessible to me, OK?

48
00:01:51.050 --> 00:01:52.040
Let's take a look.

49
00:01:52.040 --> 00:01:54.030
So, let's go to Chrome for that.

50
00:01:54.030 --> 00:01:58.010
So now we are in Chrome, and we're going to say

51
00:01:58.010 --> 00:02:02.030
localhost:32768.

52
00:02:02.030 --> 00:02:04.020
And there you go.

53
00:02:04.020 --> 00:02:05.080
If you're using Docker machine,

54
00:02:05.080 --> 00:02:08.070
then the localhost access may not work for you.

55
00:02:08.070 --> 00:02:10.010
This was mentioned earlier in

56
00:02:10.010 --> 00:02:12.090
the Docker toolbox install video as well.

57
00:02:12.090 --> 00:02:14.060
You need to make sure that you're using

58
00:02:14.060 --> 00:02:17.020
the IP address of the Docker machine.

59
00:02:17.020 --> 00:02:18.030
That can be easily found

60
00:02:18.030 --> 00:02:20.030
using the Docker machine CLI.

61
00:02:20.030 --> 00:02:22.090
So you can say Docker machine space IP

62
00:02:22.090 --> 00:02:24.030
and give the machine name,

63
00:02:24.030 --> 00:02:26.020
and it's going to give you that IP address.

64
00:02:26.020 --> 00:02:29.080
Now instead of saying localhost colon port number,

65
00:02:29.080 --> 00:02:32.030
you'll give that IP address, port,

66
00:02:32.030 --> 00:02:36.000
then your container will be accessible.

67
00:02:36.000 --> 00:02:38.000
So, just by adding that -P,

68
00:02:38.000 --> 00:02:40.000
it picked up a default port for us,

69
00:02:40.000 --> 00:02:42.050
and our WildFly is now accessible.

70
00:02:42.050 --> 00:02:44.030
Now, think about the power of this.

71
00:02:44.030 --> 00:02:46.040
There was no need to download WildFly,

72
00:02:46.040 --> 00:02:48.040
there was no need to download JDK,

73
00:02:48.040 --> 00:02:50.060
there was no need to configure any of that,

74
00:02:50.060 --> 00:02:52.080
we just ran that simple Docker container

75
00:02:52.080 --> 00:02:55.070
and boom, you got your WildFly up and running

76
00:02:55.070 --> 00:02:58.040
with that just one simple Docker run command.

77
00:02:58.040 --> 00:03:00.040
Let's see what other things we can do.

78
00:03:00.040 --> 00:03:02.010
Now I'm back in my terminal.

79
00:03:02.010 --> 00:03:03.040
I want to see the logs for it.

80
00:03:03.040 --> 00:03:04.040
The container is running.

81
00:03:04.040 --> 00:03:09.000
So, I'm going to say docker container logs.

82
00:03:09.000 --> 00:03:11.000
That's again a subcommand of container.

83
00:03:11.000 --> 00:03:13.010
And I give it a container name.

84
00:03:13.010 --> 00:03:15.080
And it shows me all the WildFly logs,

85
00:03:15.080 --> 00:03:17.070
if any applications are deployed,

86
00:03:17.070 --> 00:03:19.050
if anything goes wrong here,

87
00:03:19.050 --> 00:03:21.090
all of that information is going to be available

88
00:03:21.090 --> 00:03:24.010
in the logs for me.

89
00:03:24.010 --> 00:03:27.080
Now let's try to stop the container here again.

90
00:03:27.080 --> 00:03:30.060
So we stop the container,

91
00:03:30.060 --> 00:03:32.080
and once again, as we did earlier,

92
00:03:32.080 --> 00:03:34.000
let's remove the container.

93
00:03:34.000 --> 00:03:35.050
So the container is now gone.

94
00:03:35.050 --> 00:03:38.040
Now, instead of choosing a default port,

95
00:03:38.040 --> 00:03:40.070
let me assign it a specific port.

96
00:03:40.070 --> 00:03:42.030
So, what I'm going to do is

97
00:03:42.030 --> 00:03:44.060
I'm going to run the same command.

98
00:03:44.060 --> 00:03:46.020
Instead of capital P,

99
00:03:46.020 --> 00:03:48.030
which says take all exposed ports

100
00:03:48.030 --> 00:03:50.080
and publish them in a predefined range,

101
00:03:50.080 --> 00:03:52.070
I'm going to use a lowercase p.

102
00:03:52.070 --> 00:03:56.060
And I will say take port 8080 on the host

103
00:03:56.060 --> 00:04:00.020
and map it to port 8080 on the container.

104
00:04:00.020 --> 00:04:02.020
Not a lot of change, but a difference

105
00:04:02.020 --> 00:04:04.040
that is a lot more palatable to the user.

106
00:04:04.040 --> 00:04:06.000
So now, once again,

107
00:04:06.000 --> 00:04:08.070
let's take a look at container logs.

108
00:04:08.070 --> 00:04:10.020
The logs are available to me.

109
00:04:10.020 --> 00:04:11.060
Nothing changes in the log.

110
00:04:11.060 --> 00:04:13.080
But what changes for us is really

111
00:04:13.080 --> 00:04:16.040
the port number on which WildFly is accessible.

112
00:04:16.040 --> 00:04:19.020
So let's go to a browser and take a look at that.

113
00:04:19.020 --> 00:04:20.090
So, all I need to do is

114
00:04:20.090 --> 00:04:24.050
go here and change the port to 8080.

115
00:04:24.050 --> 00:04:27.090
And WildFly is now easily available to me on port 8080.

116
00:04:27.090 --> 00:04:28.090
So that's pretty cool.

117
00:04:28.090 --> 00:04:29.090
I can change the port,

118
00:04:29.090 --> 00:04:31.050
I can define the port,

119
00:04:31.050 --> 00:04:33.040
I can access the log and all that stuff.

120
00:04:33.040 --> 00:04:34.030
Now let's take a look at

121
00:04:34.030 --> 00:04:37.060
how can I deploy a .war file to this application.

122
00:04:37.060 --> 00:04:39.050
Let's go back to our terminal for that.

123
00:04:39.050 --> 00:04:43.020
So, this time I'm going to brute force remove the container.

124
00:04:43.020 --> 00:04:48.030
So, I'm going to say docker container rm -f web.

125
00:04:48.030 --> 00:04:50.020
So, there goes my container, OK?

126
00:04:50.020 --> 00:04:52.090
Now, if I look at this directory,

127
00:04:52.090 --> 00:04:54.060
and how to use the exercise files,

128
00:04:54.060 --> 00:04:57.000
which were shown in the beginning of the lesson itself,

129
00:04:57.000 --> 00:04:58.060
you will have seen how to download

130
00:04:58.060 --> 00:05:01.000
the Github repository and the exercise files.

131
00:05:01.000 --> 00:05:04.050
So now I'm into the chapter 2 of the exercise files here.

132
00:05:04.050 --> 00:05:07.000
And if I look at the directory content here,

133
00:05:07.000 --> 00:05:09.010
I have a .war file here, OK?

134
00:05:09.010 --> 00:05:11.060
This .war file is a simple Java EE application

135
00:05:11.060 --> 00:05:12.080
which basically says,

136
00:05:12.080 --> 00:05:15.040
okay, a Java EE application is now deployed

137
00:05:15.040 --> 00:05:18.050
in WildFly and it has a simple rest endpoint.

138
00:05:18.050 --> 00:05:20.050
Let me show you how can I deploy

139
00:05:20.050 --> 00:05:22.090
this .war file to the WildFly container.

140
00:05:22.090 --> 00:05:25.050
Before we do that, let's take a look at it.

141
00:05:25.050 --> 00:05:27.060
We have no containers running.

142
00:05:27.060 --> 00:05:29.040
The list of containers that you see

143
00:05:29.040 --> 00:05:31.070
in your console might be slightly different,

144
00:05:31.070 --> 00:05:33.050
and that is because the containers

145
00:05:33.050 --> 00:05:36.020
might have been deleted between the exercises.

146
00:05:36.020 --> 00:05:38.050
Well, if you want to clean up the containers

147
00:05:38.050 --> 00:05:41.010
in your environment, those can be easily done

148
00:05:41.010 --> 00:05:44.040
by using the command docker container -rm

149
00:05:44.040 --> 00:05:47.000
and individually listing all

150
00:05:47.000 --> 00:05:50.010
the container IDs or their names.

151
00:05:50.010 --> 00:05:52.090
To be double sure, let's check all the containers.

152
00:05:52.090 --> 00:05:54.060
So there are indeed no containers running.

153
00:05:54.060 --> 00:05:55.070
So what we're going to do is,

154
00:05:55.070 --> 00:05:58.050
we're going to use one of our previous commands here.

155
00:05:58.050 --> 00:06:01.030
Everything else stays pretty much the same.

156
00:06:01.030 --> 00:06:04.040
All I'm going to do is, I'm going to add a volume mapping.

157
00:06:04.040 --> 00:06:05.050
What that means is,

158
00:06:05.050 --> 00:06:08.070
I can take a directory on my local machine,

159
00:06:08.070 --> 00:06:10.070
and my laptop in this case,

160
00:06:10.070 --> 00:06:14.040
and mount it as a point in my container.

161
00:06:14.040 --> 00:06:15.070
And let's see how we're going to use that

162
00:06:15.070 --> 00:06:17.080
effectively to deploy the .war file.

163
00:06:17.080 --> 00:06:19.050
So I'm going to say -v, which is

164
00:06:19.050 --> 00:06:22.020
how I'm going to do the volume mapping.

165
00:06:22.020 --> 00:06:24.030
I'm going to take my current directory,

166
00:06:24.030 --> 00:06:27.010
pick up webapp.war from there,

167
00:06:27.010 --> 00:06:30.040
and mount it to the WildFly container

168
00:06:30.040 --> 00:06:32.020
has a particular directory in which

169
00:06:32.020 --> 00:06:33.090
the .war files need to be deployed.

170
00:06:33.090 --> 00:06:36.040
So I'm going to specify that directory location here.

171
00:06:36.040 --> 00:06:38.010
In the WildFly container's case,

172
00:06:38.010 --> 00:06:45.080
it's /opt/jboss/wildfly/standalone/deployments/

173
00:06:45.080 --> 00:06:48.040
and I'm going to give it the filename as well.

174
00:06:48.040 --> 00:06:49.070
So, that's it.

175
00:06:49.070 --> 00:06:51.040
So if we read the command here again,

176
00:06:51.040 --> 00:06:54.000
docker container run, running in a detached mode,

177
00:06:54.000 --> 00:06:57.010
giving it the name web, exposing on port 8080,

178
00:06:57.010 --> 00:06:58.070
doing the volume mapping,

179
00:06:58.070 --> 00:07:01.020
taking the webapp.war file, deploying it to

180
00:07:01.020 --> 00:07:05.010
/opt/jboss/wildfly/standalone/deployments/ .war file,

181
00:07:05.010 --> 00:07:07.030
and then the container name.

182
00:07:07.030 --> 00:07:09.080
Let's run it, and let's see

183
00:07:09.080 --> 00:07:12.060
if we can see the logs of the container.

184
00:07:12.060 --> 00:07:14.080
So, I say docker container logs web.

185
00:07:14.080 --> 00:07:16.080
Now, we can also tail the logs,

186
00:07:16.080 --> 00:07:20.040
so I can say -f and it'll show me all the logs here.

187
00:07:20.040 --> 00:07:23.070
Now the beauty is you can see that your webapp.war file

188
00:07:23.070 --> 00:07:25.090
is successfully deployed over here.

189
00:07:25.090 --> 00:07:27.050
That's are the key thing that you're looking for.

190
00:07:27.050 --> 00:07:29.010
Essentially everything else is

191
00:07:29.010 --> 00:07:31.070
pretty standard for WildFly container log.

192
00:07:31.070 --> 00:07:35.020
Now, once I've done that, I can say curl,

193
00:07:35.020 --> 00:07:38.080
I can say http colon localhost 8080.

194
00:07:38.080 --> 00:07:41.030
Now, this is a Java EE application,

195
00:07:41.030 --> 00:07:44.080
so I'm going to say webapp, it has a rest endpoint,

196
00:07:44.080 --> 00:07:47.030
so resources, and then the resource name,

197
00:07:47.030 --> 00:07:49.030
which in my case is persons.

198
00:07:49.030 --> 00:07:52.010
The moment I do that, I get an XML results.

199
00:07:52.010 --> 00:07:53.090
Or, for convenience,

200
00:07:53.090 --> 00:07:57.070
I can take this URL and show it in the browser as well.

201
00:07:57.070 --> 00:07:59.020
So let's take a look at that.

202
00:07:59.020 --> 00:08:03.040
Copy the URL, and drop it into the browser here.

203
00:08:03.040 --> 00:08:05.040
And here we go, I have the complete set

204
00:08:05.040 --> 00:08:06.090
of results available to me.

205
00:08:06.090 --> 00:08:09.030
So basically, in this section you saw

206
00:08:09.030 --> 00:08:12.030
how can we run WildFly on default ports,

207
00:08:12.030 --> 00:08:15.020
on specific ports, and use volume mapping

208
00:08:15.020 --> 00:08:19.000
effectively to deploy my .war file in WildFly.

