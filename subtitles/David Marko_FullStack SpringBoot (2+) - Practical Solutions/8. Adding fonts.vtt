WEBVTT
1
00:00:07.790 --> 00:00:17.300
In this lecture, we are taking some security features into our create PDF method, the library we use

2
00:00:17.300 --> 00:00:18.380
for PDF.

3
00:00:19.620 --> 00:00:28.740
Convergence supports a way of securing PDF like signing providing a password protection.

4
00:00:29.280 --> 00:00:39.570
And should we just enhance our way how we handle PDF or creating a PDF and we try to add something to

5
00:00:39.570 --> 00:00:41.010
make it more secure.

6
00:00:41.880 --> 00:00:54.960
So for implementation, we add a few more things that will allow us to make the pdf secure.

7
00:00:54.960 --> 00:01:01.680
Let's introduce new create PDF variable called security.

8
00:01:02.040 --> 00:01:11.870
We have to specify it of course, so we can just say a true here when we call creating a PDF and to

9
00:01:12.090 --> 00:01:20.280
that enabled we we use something called a stamper.

10
00:01:20.370 --> 00:01:34.230
So stamper is the way we can specify many different PDF options, so we create an instance of a PDF

11
00:01:34.230 --> 00:01:34.740
Stamper.

12
00:01:34.740 --> 00:01:40.710
Here we use kind of reader of that pdf.

13
00:01:40.770 --> 00:01:54.120
We create a bi array for keeping output and when enabled we can we call a stamper set encryption and

14
00:01:54.120 --> 00:01:56.010
we can see several options here.

15
00:01:56.010 --> 00:02:01.800
We can see we can provide your user password only password.

16
00:02:01.800 --> 00:02:13.710
We can set a few PDF options like allowing printing or not allowing modifying content, copy pasting

17
00:02:13.710 --> 00:02:15.960
and things like that.

18
00:02:17.180 --> 00:02:21.770
And we can even set encryption encryption level.

19
00:02:22.490 --> 00:02:27.260
If there is no need for it, we need to specify more options.

20
00:02:27.260 --> 00:02:31.370
We can do it using a pipe operator

21
00:02:34.130 --> 00:02:43.610
and to when this stamper is being used, we can just restart our application.

22
00:02:44.180 --> 00:02:49.130
We can see something is not good on the console.

23
00:02:49.130 --> 00:02:56.540
So let's just check it and maybe restart the entire application.

24
00:02:57.740 --> 00:03:06.740
So now let's reload application in the browser, download the PDF file and we have the PDF file here,

25
00:03:06.740 --> 00:03:08.450
so let's check it.

26
00:03:09.050 --> 00:03:13.820
We opened the PDF file created and PDF Viewer.

27
00:03:13.850 --> 00:03:19.730
We switched to permissions and settings just to review permissions.

28
00:03:19.840 --> 00:03:23.630
We can't modify or copy this document.

29
00:03:23.630 --> 00:03:26.090
We can see a detail.

30
00:03:26.090 --> 00:03:28.940
So the only thing enabled is printing.

31
00:03:28.940 --> 00:03:31.610
The other stuff is actually disabled.

32
00:03:32.810 --> 00:03:38.030
So this is exactly as we defined using a pdf stamper.

33
00:03:38.880 --> 00:03:39.110
Okay.

34
00:03:39.960 --> 00:03:43.620
So we have we have set that

35
00:03:46.050 --> 00:03:47.130
permissions.

36
00:03:49.170 --> 00:03:55.080
In the code and those permissions are being respected by the PDF viewer.

37
00:03:55.710 --> 00:04:00.510
We have many options here that can be combined.

38
00:04:01.710 --> 00:04:09.750
Besides that, we can even set password required for opening the PDF.

39
00:04:10.770 --> 00:04:15.690
The password is a standard way for protecting opening pdf.

40
00:04:15.690 --> 00:04:16.220
We.

41
00:04:16.770 --> 00:04:26.940
If we are sending PDFs to someone else, we can specify a password for protecting displaying content.

42
00:04:28.320 --> 00:04:35.220
To do so, we just need to specify a password as byte by bytes array.

43
00:04:36.150 --> 00:04:37.440
It's very easy.

44
00:04:37.590 --> 00:04:50.280
So if if we specify a password this way it's created in PDF file and the PDF viewer is asking for a

45
00:04:51.480 --> 00:04:55.980
password before the PDF is being displayed.
