WEBVTT
1
00:00:07.040 --> 00:00:07.320
Okay.

2
00:00:08.080 --> 00:00:19.480
So in this lecture let's re-use the simple message listener implementation and wrap debt class into

3
00:00:19.480 --> 00:00:26.830
real SMTP server as we are going to use in our application.

4
00:00:27.040 --> 00:00:30.160
So for that purposes, we create.

5
00:00:32.560 --> 00:00:39.520
New class, let's name it SMTP service service.

6
00:00:40.870 --> 00:00:43.600
So let's type and name it.

7
00:00:44.020 --> 00:00:44.560
Yeah.

8
00:00:44.560 --> 00:00:51.400
So we have that service and understanding of springboard.

9
00:00:51.400 --> 00:00:55.150
So we added at service annotation.

10
00:00:55.630 --> 00:00:58.720
We need to add SMTP server.

11
00:00:58.750 --> 00:01:07.840
You can see it's an object or class part of dependency we use for running SMTP server in our application.

12
00:01:07.840 --> 00:01:10.870
So let's choose the correct one.

13
00:01:11.110 --> 00:01:21.010
We have this SMTP server object and then we need to start that SMTP server when our application actually

14
00:01:21.010 --> 00:01:21.820
starts.

15
00:01:21.820 --> 00:01:29.320
So we create a start method and we use a post construct annotation.

16
00:01:29.320 --> 00:01:36.790
So that method is being started when all dependencies are handled by spring boot.

17
00:01:36.790 --> 00:01:42.340
And that object, I mean a SMTP server service is created.

18
00:01:42.340 --> 00:01:47.860
So that post construct method is going to run.

19
00:01:50.080 --> 00:01:54.670
Now we use the simple message listener implementation.

20
00:01:54.670 --> 00:01:57.970
We just created a formal lesson.

21
00:01:59.320 --> 00:02:11.380
And to we creating you instance here and we use that instance in in creating a SMTP server object as

22
00:02:11.380 --> 00:02:11.920
such.

23
00:02:11.920 --> 00:02:16.210
So we use that variable we just created above.

24
00:02:16.240 --> 00:02:28.060
We create a new SMTP server as a parameter, we create a new SMTP message listener adapter.

25
00:02:28.300 --> 00:02:36.820
It's just kind of a helper class and we need to provide a parameter parameter for constructor.

26
00:02:37.030 --> 00:02:45.490
So we use this simple message listener we just created and we then set a few.

27
00:02:46.660 --> 00:02:50.650
Options that are available for SMTP server.

28
00:02:50.650 --> 00:02:54.730
So we have a bunch of things we can set.

29
00:02:54.760 --> 00:02:58.030
We we choose some kind of a minimum.

30
00:02:58.030 --> 00:03:01.750
So we set hostname as a local host, we set.

31
00:03:04.690 --> 00:03:06.820
We set a port number.

32
00:03:07.140 --> 00:03:13.060
It's just to be sure it's not clashing with anything else running on our system.

33
00:03:13.240 --> 00:03:19.000
And we we can set a time out for communication.

34
00:03:19.000 --> 00:03:24.610
So we set the value at some level just to be safe.

35
00:03:24.610 --> 00:03:31.630
And then when those options are set, we we call a start method.

36
00:03:31.630 --> 00:03:36.250
So this SMTP start actually starts SMTP server.

37
00:03:36.250 --> 00:03:45.310
So inside of our application, the SMTP server is being served as configured on previous lines.

38
00:03:45.310 --> 00:03:53.140
So it's running a local host on Port 10,025 with some connection timeouts.

39
00:03:53.140 --> 00:04:00.580
So we have more options here if you are a more familiar a familiar with SMTP service.

40
00:04:00.580 --> 00:04:04.270
So it's something you probably understand.

41
00:04:04.270 --> 00:04:08.140
So you can change a few more things if needed.

42
00:04:09.040 --> 00:04:18.820
This is some kind of a minimum we are going to use here and we can also add some logging information

43
00:04:18.820 --> 00:04:25.870
so we can observe things are running smoothly when we start our application.

44
00:04:25.870 --> 00:04:36.010
So let's add logging saying that SMTP service running it should be running because we call a start method

45
00:04:36.280 --> 00:04:43.690
on SMTP server object so to service running on for domain and port.

46
00:04:43.690 --> 00:04:50.770
So let's set things as we just set up earlier.

47
00:04:50.770 --> 00:04:54.760
So it should be running a local host and the port.

48
00:04:56.480 --> 00:04:58.700
And this is the just the first part.

49
00:04:58.700 --> 00:05:08.060
So when application starts, we need to start SMTP server and of course we must handle somehow stopping

50
00:05:08.060 --> 00:05:17.420
the server so we can create a stop method and we can simply call the SMTP server.

51
00:05:21.090 --> 00:05:21.840
Stop method.

52
00:05:21.840 --> 00:05:24.750
But we can just create a condition.

53
00:05:24.990 --> 00:05:31.110
We can just check a SMTP service running and if it is running, we can stop the server.

54
00:05:31.110 --> 00:05:39.450
So we just want to avoid any null pointer or anything and then we use annotation destroy.

55
00:05:39.450 --> 00:05:45.090
So this method is being called when entire application is being stopped.

56
00:05:45.510 --> 00:05:53.010
So it's its use, incorrect order of the logic of anti application.

57
00:05:53.010 --> 00:06:04.290
So at using a post construct we start when application is stopping, we we just stop SMTP so now we

58
00:06:04.290 --> 00:06:05.760
can run.

59
00:06:06.870 --> 00:06:07.920
Our application.

60
00:06:07.920 --> 00:06:18.450
So we have some kind of a minimum SMTP server defined in our application and we should see at least

61
00:06:18.450 --> 00:06:20.250
that everything is starting correctly.

62
00:06:20.250 --> 00:06:26.040
So we have no failure, we have no null pointer or anything else.

63
00:06:26.040 --> 00:06:29.940
So application should start smoothly.

64
00:06:31.290 --> 00:06:40.170
And of course, we should see somewhere in the console that our application is running so we can check

65
00:06:40.570 --> 00:06:43.800
the information and the console.

66
00:06:43.800 --> 00:06:46.560
We can see the message we are printing.

67
00:06:46.620 --> 00:06:52.050
SMTP server is running for domain or local host so message is here.

68
00:06:52.050 --> 00:06:57.480
We have a few more messages coming directly from SMTP server we just started.

69
00:06:57.480 --> 00:07:05.070
So we have information that SMTP started as such and we can see we have a few more informations coming

70
00:07:06.030 --> 00:07:07.830
directly from SMTP server.

71
00:07:07.830 --> 00:07:10.050
So we have a full, full overview.

72
00:07:10.050 --> 00:07:14.100
It says even it's starting so we can see it's starting.

73
00:07:14.340 --> 00:07:23.520
Then we can see the lock message coming from our implementation and then we can see service started.

74
00:07:23.520 --> 00:07:32.550
So we can see or we have a full picture of starting the server and kind of the minimum for running SMTP

75
00:07:32.550 --> 00:07:34.740
directly in our application.

76
00:07:34.740 --> 00:07:38.460
And SMTP is really running on the port we specified.

77
00:07:38.460 --> 00:07:47.850
So it started running and then later in other lectures we implement email message processing.

78
00:07:47.850 --> 00:07:53.880
We take a look how to connect to that SMTP sending emails.
