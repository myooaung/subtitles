WEBVTT
1
00:00:07.420 --> 00:00:17.280
At this point, we have attachment controller, we have end point defining new or page for adding a

2
00:00:17.290 --> 00:00:24.100
new file upload here and now we are supposed to create an endpoint for processing that file upload.

3
00:00:24.100 --> 00:00:27.580
So in the browser we are able to select the file.

4
00:00:27.610 --> 00:00:36.220
Right now we are able to submit that, but we have to create an endpoint for processing that file being

5
00:00:36.220 --> 00:00:36.820
submitted.

6
00:00:36.820 --> 00:00:45.490
So let's create a new endpoint method we have, let's name it a handle file upload.

7
00:00:45.490 --> 00:00:58.990
We provide one parameter here of type of file, multipart file, name it, file one and finish a basic

8
00:00:59.260 --> 00:01:01.780
method infrastructure.

9
00:01:01.780 --> 00:01:03.520
So we have to return a string.

10
00:01:04.060 --> 00:01:12.850
Let's return empty string for now and to we provide a post mapping annotation here we have a get mapping

11
00:01:12.850 --> 00:01:22.330
for getting empty form for selecting file upload and we have a post mapping for posting information

12
00:01:22.330 --> 00:01:26.410
or processing information posted back to our backend.

13
00:01:26.440 --> 00:01:33.430
We have a multiple file here parameter and we we specify it as a request param.

14
00:01:33.430 --> 00:01:35.290
We have a name file one.

15
00:01:35.290 --> 00:01:38.560
This is how we name it in HTML.

16
00:01:40.090 --> 00:01:47.950
So if we look at to HTML, we can see that ID or name is file one.

17
00:01:49.760 --> 00:01:59.690
So we we use the naming, the same naming and that handle method, and we can use our attachment, service

18
00:01:59.690 --> 00:02:03.170
and store in grid as a method here.

19
00:02:03.170 --> 00:02:13.550
And we can see we have a storing grid of s just for multipart file so we can use it directly in our

20
00:02:13.550 --> 00:02:17.840
controller and save the file in grid divested way.

21
00:02:17.840 --> 00:02:26.690
So it looks like very easy we can as a return value for from our end point we define kind of redirection.

22
00:02:26.690 --> 00:02:35.810
So we after successful posting data we redirect user back to new file upload page.

23
00:02:36.140 --> 00:02:41.840
So we use this redirect at a as we have defined in request mapping.

24
00:02:43.770 --> 00:02:49.260
So this is almost all we need in controller.

25
00:02:51.210 --> 00:02:59.280
It would be quite useful to return back something to the user about that file upload like information

26
00:02:59.280 --> 00:03:01.440
that upload was successful.

27
00:03:03.390 --> 00:03:09.900
So for that purpose we use redirect attributes, attribute object.

28
00:03:09.930 --> 00:03:14.100
It's it's supposed to be provided by a springboard itself.

29
00:03:14.100 --> 00:03:18.020
And this is kind of a map like structure.

30
00:03:18.030 --> 00:03:25.880
We, we add a flash attribute here with the name, a message and we provide information file.

31
00:03:25.950 --> 00:03:29.700
The file upload was successful.

32
00:03:29.700 --> 00:03:41.940
So we have this file uploaded and we get original file name from the multipart file object here and

33
00:03:41.940 --> 00:03:44.250
we have to present that information to the user.

34
00:03:44.250 --> 00:03:53.730
So this, this message is or this tax is under the message key in the flash attributes.

35
00:03:53.730 --> 00:04:03.750
And we have to add that information into HTML if available so we can create that a def at the beginning

36
00:04:03.750 --> 00:04:04.620
of the form.

37
00:04:04.620 --> 00:04:15.300
We have some chime leave related attributes like a condition if a message exist or message variable

38
00:04:15.300 --> 00:04:19.320
exist in the context provided to time leave.

39
00:04:19.320 --> 00:04:24.960
So if this exists, just show up that on the screen.

40
00:04:24.960 --> 00:04:35.490
So we have that another time leave specific attribute here showing up the message and enter def is using

41
00:04:35.910 --> 00:04:44.850
alert class coming from the bootstrap so that there is supposed to be some design on the screen coming

42
00:04:44.850 --> 00:04:47.190
from the bootstrap CSS.

43
00:04:48.420 --> 00:04:51.330
So let's take a look into the database.

44
00:04:51.330 --> 00:04:53.370
We have a full stack, spring boot.

45
00:04:53.790 --> 00:04:56.490
We can see there is no collection yet.

46
00:04:56.490 --> 00:05:02.070
So MongoDB database is actually completely empty right now.

47
00:05:02.550 --> 00:05:04.680
We can start the application.

48
00:05:06.500 --> 00:05:10.850
So our application should connect to MongoDB.

49
00:05:11.060 --> 00:05:15.500
We can refresh the page, we can select the file here on the screen.

50
00:05:15.500 --> 00:05:25.430
So select the one of files we have and we do a submit here and we can see the message file uploaded

51
00:05:25.430 --> 00:05:29.900
with the name of the file we just uploaded.

52
00:05:29.900 --> 00:05:33.770
So at least from that point of view, everything.

53
00:05:35.600 --> 00:05:39.170
Work as expected or as defined in the code.

54
00:05:39.170 --> 00:05:47.810
And we can take a look into MongoDB into collect collection store and we can see we have a kind of a

55
00:05:47.810 --> 00:05:55.460
file system collection if asked, files in chunks and we can show up as the files and we can see we

56
00:05:55.460 --> 00:05:59.330
have the file object with some attributes we've provided.

57
00:05:59.330 --> 00:06:06.830
We have the ID and we have a file name, file size and upload date available.

58
00:06:07.190 --> 00:06:10.970
And we have even the metadata structure here.

59
00:06:10.970 --> 00:06:15.170
And so we have those information about the file type.

60
00:06:15.350 --> 00:06:23.810
For example, this is an image PNG G and yeah, we can see if things are working correctly so we can

61
00:06:23.810 --> 00:06:28.640
see the file being saved into MongoDB collection.

62
00:06:30.140 --> 00:06:35.630
Here and it's very easy to review from MongoDB point of view.

63
00:06:36.140 --> 00:06:36.460
Yeah.

64
00:06:36.470 --> 00:06:39.080
So let's restart application.

65
00:06:41.060 --> 00:06:43.840
With the border enabled.

66
00:06:43.850 --> 00:06:47.450
So we are using Intel DJ I.D. here.

67
00:06:47.450 --> 00:06:49.760
So we start an application with the Badger.

68
00:06:49.780 --> 00:06:58.060
Let's put some breakpoints here in application so we can track how information is coming into our control.

69
00:06:58.200 --> 00:07:00.320
It will be quite useful, I think.

70
00:07:00.320 --> 00:07:12.890
So let's select another image and submit and let's check the voucher which is activated in our ID.

71
00:07:12.920 --> 00:07:21.560
We can see the line, just the first line in controller and we can see we have that multipart file object

72
00:07:21.560 --> 00:07:24.770
filled with the data coming from the browser.

73
00:07:25.040 --> 00:07:31.910
So we have a bunch of useful informations here and we can use that for.

74
00:07:32.880 --> 00:07:38.370
And we use that object for storing in graves our attachment service.

75
00:07:38.370 --> 00:07:40.640
So it's very easy to handle in control though.

76
00:07:40.650 --> 00:07:47.160
We have just sort of two or three lines, which is a storing file, putting flash information back to

77
00:07:47.160 --> 00:07:50.700
the browser and returning redirect to the user.

78
00:07:50.700 --> 00:07:55.620
So very easy to understand and very easy to write down such kind of code.
