WEBVTT
1
00:00:08.650 --> 00:00:17.170
In this very minimal application, we find a way how to upload and download files through the browser

2
00:00:17.170 --> 00:00:25.370
and store the files or download the files in or from grid if as we have as part of MongoDB.

3
00:00:25.390 --> 00:00:33.760
So we have to set up some MongoDB connection settings in application properties so you can adjust that

4
00:00:33.760 --> 00:00:37.000
based on your current local situation.

5
00:00:37.480 --> 00:00:43.330
And to start with the solution, we create some backend infrastructure code.

6
00:00:43.330 --> 00:00:47.020
We create some helper packages for Grid of S.

7
00:00:48.420 --> 00:00:56.580
And we start with kind of service methods for our solution.

8
00:00:56.580 --> 00:00:59.910
So let's complete a package set up.

9
00:00:59.910 --> 00:01:07.470
We have a grid of apps, we have a service, we have a Web packages, and we started with a new, fresh,

10
00:01:07.470 --> 00:01:08.940
new Java class.

11
00:01:09.150 --> 00:01:16.260
We will provide some infrastructure backing code for working with attachments.

12
00:01:16.260 --> 00:01:18.750
So let's name it attachment service.

13
00:01:19.860 --> 00:01:25.350
And this class is supposed to be service and in the meaning of spring boot.

14
00:01:25.350 --> 00:01:30.540
So we are adding at service annotation here.

15
00:01:30.690 --> 00:01:32.400
So Spring Boot.

16
00:01:34.010 --> 00:01:44.810
We'll manage creating our service during the application start and to here in this attachment service,

17
00:01:44.810 --> 00:01:57.650
we create all the code we need for managing, upload, uploads and storing and in later lectures, downloading

18
00:01:57.740 --> 00:02:00.200
file attachments from grid of S.

19
00:02:00.740 --> 00:02:13.460
So here in attachment service we create a few helper methods that help us to handle the file upload

20
00:02:13.460 --> 00:02:14.000
file.

21
00:02:14.060 --> 00:02:18.050
We use this multipart file data structure.

22
00:02:19.410 --> 00:02:22.060
Let's fix the name a bit.

23
00:02:23.200 --> 00:02:32.350
We create a few a bit lower level because multiple file, it's a structure we use from the controller

24
00:02:32.830 --> 00:02:33.730
perspective.

25
00:02:33.730 --> 00:02:41.260
But working with of assets, we use a more general data structure like input streams.

26
00:02:41.260 --> 00:02:45.610
So we need to do some kind of conversion.

27
00:02:46.540 --> 00:02:53.870
So we have this store in grid of as a method, we provide a multiple file coming from controller but

28
00:02:54.420 --> 00:02:58.820
to store files directly grid of.

29
00:02:58.840 --> 00:03:07.750
As we are working in with input streams, we created a new method to with with input stream as in a

30
00:03:07.750 --> 00:03:17.500
method signature and we just use it from the main multipart file stored in grid of method.

31
00:03:17.500 --> 00:03:21.250
So we can take this file parameter.

32
00:03:21.250 --> 00:03:33.790
We can get some information from that structure and provide those information to our lower, lower level

33
00:03:33.790 --> 00:03:34.540
method.

34
00:03:35.440 --> 00:03:46.030
So we have this store in grid of S, we use a file input stream and we can go even lower so we can create

35
00:03:46.030 --> 00:03:53.470
a one more method for storing input streams, file name and size.

36
00:03:53.470 --> 00:04:02.350
And we can provide also some kind of metadata, as we mentioned, grid of supports metadata so we can

37
00:04:02.350 --> 00:04:15.670
use map a like object for storing other stuff together with the file in grid of S and we will build

38
00:04:15.670 --> 00:04:19.390
on that in for the lessons.

39
00:04:19.990 --> 00:04:24.250
So let's just create the infrastructure code here for our.

40
00:04:25.630 --> 00:04:27.160
To start working with.

41
00:04:27.160 --> 00:04:33.880
With Avaaz itself, we need a kind of support from Sprint data for MongoDB.

42
00:04:33.890 --> 00:04:43.810
So we use here a manage being called grid RFS operations and we get out of our that in our attachment

43
00:04:43.810 --> 00:04:44.560
service.

44
00:04:44.740 --> 00:04:53.230
So this object is created and provided by Springboard for MongoDB itself and to creative as operations

45
00:04:53.230 --> 00:04:57.460
actually contains almost everything we need to work.

46
00:04:57.460 --> 00:05:05.500
We have great Avaz from our application perspective, so we have available all major operations like

47
00:05:05.620 --> 00:05:15.220
storing files in grid of retrieving finding based on some file attributes and so on.

48
00:05:15.220 --> 00:05:26.260
So to enhance implementation in store in grid of S method, we use that grid as operations and we can

49
00:05:26.260 --> 00:05:31.030
see we have a several storage methods here based on a method signature.

50
00:05:31.030 --> 00:05:38.800
So we use the one working with input stream file name and we provide metadata.

51
00:05:40.570 --> 00:05:47.080
Metadata actually requires a special MongoDB data structure, so we just create a name for the variable

52
00:05:47.080 --> 00:05:57.820
and we create that variable just right now so we can create a DB object, name it metadata and we create

53
00:05:57.820 --> 00:05:58.870
a new instance.

54
00:05:58.870 --> 00:06:10.000
We populate it object, object right away just to clear our code so everything will compile correctly

55
00:06:10.000 --> 00:06:11.140
after that.

56
00:06:11.500 --> 00:06:15.460
So we have meta data here.

57
00:06:17.540 --> 00:06:25.850
Our Grid of operations store methods actually returning a pointer to the object we just created or saved

58
00:06:26.600 --> 00:06:27.530
in the database.

59
00:06:27.530 --> 00:06:35.810
So we create a variable object ID we are getting not object itself, but we are getting a data structure

60
00:06:35.810 --> 00:06:46.970
representing an ID of that file stored in grid of S and because the method signature says we are we

61
00:06:46.970 --> 00:06:53.450
are returning grid fs file, we have to get that file from the storage.

62
00:06:53.450 --> 00:06:56.330
So we use grid of S operations.

63
00:06:56.330 --> 00:07:05.990
Once again, we use a find one method and we need to provide a kind of query describing condition for

64
00:07:05.990 --> 00:07:11.030
getting information from grid of asset or from MongoDB directly.

65
00:07:12.400 --> 00:07:16.630
So we have almost complete, complete criteria defined here.

66
00:07:16.630 --> 00:07:29.230
We defined a query using criteria object saying where ID is equal to object ID data structure returned

67
00:07:29.560 --> 00:07:33.070
from grid of operations dot store.

68
00:07:34.270 --> 00:07:40.750
So that way we actually find a grid of file object in the database.

69
00:07:40.750 --> 00:07:46.630
We can use that method in for the implementation.

70
00:07:46.630 --> 00:07:57.040
We, we just clean up the code here so everything compiles correctly and we have a basic attachment

71
00:07:57.040 --> 00:07:57.790
service.

72
00:08:00.210 --> 00:08:06.120
Glass here for operations we need we use this store in grade of S method.

73
00:08:06.120 --> 00:08:13.290
Mainly we provide into stream with the pointer to actual data.

74
00:08:13.290 --> 00:08:25.590
We use a file name along and we transfer that into integrated s using those great of operations helper

75
00:08:26.340 --> 00:08:27.120
class.

76
00:08:28.620 --> 00:08:37.170
When we created that grade of S in storing in grade of S, we we said we are providing a metadata.

77
00:08:37.260 --> 00:08:43.440
The this metadata is kind of a map like object but specific to MongoDB.

78
00:08:43.440 --> 00:08:54.210
So we use this DB object, we can put some information inside and those information will be stored together

79
00:08:54.210 --> 00:08:57.480
with the grade of S file.

80
00:08:57.480 --> 00:09:04.560
So whenever we retrieve the file from grade of S, we also get all those metadata.

81
00:09:04.560 --> 00:09:14.850
We can use those metadata for creating queries so we can retrieve data from grade of us based on metadata,

82
00:09:14.850 --> 00:09:17.070
for example, which is quite useful.

83
00:09:18.180 --> 00:09:27.510
And of course comparing storing file into the file system, we can really enhance our data storage with

84
00:09:27.630 --> 00:09:29.820
many useful information.

85
00:09:30.120 --> 00:09:33.450
So let's use that.

86
00:09:34.240 --> 00:09:45.220
We have the very basic metadata object and with a name, size and file tab information.

87
00:09:45.220 --> 00:09:55.060
And if we are providing my matter object, it's a map coming to our method and if this my meta object

88
00:09:55.090 --> 00:10:05.200
exists so it's not equal to now we put all data inside our metadata, we are just pushing into store

89
00:10:05.200 --> 00:10:12.190
method when saving the input stream, we have the file, so we have that store method calling.

90
00:10:12.190 --> 00:10:16.420
Here we have a file stream, file name and metadata.

91
00:10:16.420 --> 00:10:19.750
So we have actually everything we need here.

92
00:10:19.750 --> 00:10:28.480
We are getting back object ID data structure which contains the ID representation of the object and

93
00:10:28.480 --> 00:10:37.690
we are creating a query and finding one just one object from grid of SW or MongoDB based on that object

94
00:10:37.690 --> 00:10:38.380
ID.

95
00:10:39.900 --> 00:10:42.120
So it looks like almost complete.

96
00:10:42.120 --> 00:10:47.220
Here we have a backhand side of attachment service.

97
00:10:48.150 --> 00:10:52.290
Which implements basic operations we need.

98
00:10:53.040 --> 00:10:59.460
This is not quite a long code, actually, so it's easy to read and very easy to understand what we

99
00:10:59.460 --> 00:11:00.780
are actually doing.

100
00:11:01.230 --> 00:11:05.100
And I think it's very easy to to store something in grid.

101
00:11:05.370 --> 00:11:11.540
So it doesn't it doesn't work with a file system like structure.

102
00:11:11.550 --> 00:11:19.500
We don't have to look at the the folder limitations, for example, in file system and so on.

103
00:11:19.770 --> 00:11:32.130
So we can store a file directly and the MongoDB or crevasses actually handle all the logic needed for

104
00:11:32.220 --> 00:11:40.500
storing many, maybe a million files, millions of files in database to work with that.

105
00:11:40.980 --> 00:11:45.840
From the browser point of view, we have to create a kind of an end point.

106
00:11:46.140 --> 00:11:48.870
So we create attachment controller.

107
00:11:49.470 --> 00:11:53.760
Let's keep the naming with attachment at the beginning.

108
00:11:53.760 --> 00:11:56.190
So we have that attachment controller.

109
00:11:56.190 --> 00:12:05.280
We, we use that at controller annotation to specify we use that controller and this is not a rest controller.

110
00:12:05.280 --> 00:12:10.920
So we create a UI using a time leave template engine.

111
00:12:12.480 --> 00:12:14.310
We assign it to request mapping.

112
00:12:14.310 --> 00:12:23.850
So this end point is available at slash a and to we ought to wired our attachment service.

113
00:12:23.850 --> 00:12:28.110
This is the handler for operations we just created.

114
00:12:28.110 --> 00:12:37.350
So let's now create the specific end point for creating a new attachment and creating new attachment

115
00:12:37.350 --> 00:12:44.130
to actually means displaying the page in the browser with file upload control.

116
00:12:45.090 --> 00:12:49.830
So this still covers the backend part of the operation.

117
00:12:50.460 --> 00:12:58.860
We add complete front end part in next lecture, but for our purpose we just create a new attachment.

118
00:12:59.220 --> 00:13:04.800
We also have to specify this is a get kind of a mapping.

119
00:13:04.800 --> 00:13:14.100
So get mapping annotation is used here and in this method we just reference.

120
00:13:15.620 --> 00:13:17.150
Templates name here.

121
00:13:17.150 --> 00:13:19.780
So we return actually a string.

122
00:13:19.790 --> 00:13:24.140
We have a path path and a template name here.

123
00:13:24.140 --> 00:13:30.830
So we have a folder slash and new dot HTML file.

124
00:13:30.830 --> 00:13:33.440
So we have to create that file.

125
00:13:33.440 --> 00:13:44.000
So in resources and templates is the place where time leave or springboard is searching for all the

126
00:13:44.000 --> 00:13:45.170
templates here.

127
00:13:46.890 --> 00:13:51.660
We are creating a new HTML file named new dot html.

128
00:13:52.820 --> 00:13:55.940
So we have the basic HTML here.

129
00:13:58.340 --> 00:14:10.820
This HTML is being processed by a spring boot time leaf engine so we can use a tax or any helper and

130
00:14:10.820 --> 00:14:18.800
logic information coming from a time leaf and time leaf will actually process that when serving that

131
00:14:18.800 --> 00:14:20.390
page to the browser.

132
00:14:20.600 --> 00:14:25.220
So let's create some basic HTML in the file.

133
00:14:25.220 --> 00:14:30.920
So we have some Heather saying this is new file attachment here.

134
00:14:32.290 --> 00:14:35.140
And here we need to put some HTML block here.

135
00:14:35.140 --> 00:14:38.920
Defining a forum for submitting a data.

136
00:14:38.950 --> 00:14:44.230
By we, we mean file attachments or file upload.

137
00:14:44.230 --> 00:14:50.930
So we have that forum tack here saying this method post we are posting data to.

138
00:14:51.220 --> 00:14:55.390
We are supposed to post the post data to our server.

139
00:14:55.510 --> 00:15:02.470
We have some kind of label and we have an input tack define saying this is a type of file.

140
00:15:02.470 --> 00:15:11.140
So it's saying to browser we are trying to send a file or attach and send file to browser and we have

141
00:15:11.140 --> 00:15:12.130
the submit button.

142
00:15:12.130 --> 00:15:13.870
We have some classes here.

143
00:15:13.870 --> 00:15:25.750
Those classes are coming from bootstrap CSS so we can actually enhance our class pointing to bootstrap

144
00:15:25.750 --> 00:15:26.830
UI.

145
00:15:26.830 --> 00:15:35.530
So we are just publishing here our UI and embedding reference to bootstrap a host it on CDM.

146
00:15:38.460 --> 00:15:44.640
So let's look at how this HTML is being handled.

147
00:15:44.680 --> 00:15:54.150
We have we have that we have that endpoint definition referencing our new HTML file.

148
00:15:55.710 --> 00:16:06.300
We just created so we can run the application and just take a look at if everything starts from just

149
00:16:06.300 --> 00:16:10.200
fine, application should start with any error.

150
00:16:10.200 --> 00:16:15.900
So we should then check in the browser if that endpoint is available.

151
00:16:15.900 --> 00:16:26.850
Just a little reminder, this endpoint is running at slash a URL, so it's defined in attachment controller

152
00:16:26.850 --> 00:16:31.500
and this is definition for the entire controller.

153
00:16:31.500 --> 00:16:35.310
Our new attachment doesn't define anything specific.

154
00:16:35.310 --> 00:16:42.450
So here in the browser, we can see the new file attachment page as defined in HTML.

155
00:16:42.750 --> 00:16:45.090
Just a little fix needed tweeze.

156
00:16:45.270 --> 00:16:55.650
We reference a new HTML template from a folder, so we have to add that folder into resources templates

157
00:16:55.650 --> 00:16:58.200
to fit our configuration here.
