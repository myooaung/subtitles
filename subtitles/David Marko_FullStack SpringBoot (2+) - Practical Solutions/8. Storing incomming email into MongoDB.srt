1
00:00:07,600 --> 00:00:18,220
In this last chapter on processing income incoming emails topic we are going to show up how to take

2
00:00:18,430 --> 00:00:26,080
email that we are just processed and how to save that email into the database so we can provide some

3
00:00:26,080 --> 00:00:28,930
kind of persistency for our purposes.

4
00:00:28,930 --> 00:00:32,080
We get we are going to use a MongoDB.

5
00:00:32,110 --> 00:00:40,240
We we can use some configuration options coming into application properties.

6
00:00:40,240 --> 00:00:44,350
We defined a host port and database name.

7
00:00:45,160 --> 00:00:53,920
We can just check that in MAVEN configuration, we have that MongoDB dependency all included already.

8
00:00:53,920 --> 00:00:59,410
So this is actually everything we need in springboard application to use MongoDB.

9
00:00:59,530 --> 00:01:09,250
So we use that springboard start starter data MongoDB and using the configuration and application properties,

10
00:01:09,250 --> 00:01:10,780
we just provide it.

11
00:01:11,230 --> 00:01:23,110
It's basically the minimum configuration we need Springwood to be able to talk to, to MongoDB or to

12
00:01:23,140 --> 00:01:24,250
database

13
00:01:26,590 --> 00:01:28,210
in our application.

14
00:01:28,210 --> 00:01:32,320
So that's all from the configuration side.

15
00:01:32,590 --> 00:01:42,880
I think everything is in place dependencies there already so we can start with some details of implementation.

16
00:01:42,880 --> 00:01:50,070
We need just a few things to be able to save that information into the database.

17
00:01:50,080 --> 00:01:54,010
First one is something called entity.

18
00:01:54,010 --> 00:02:02,980
It's actually the email data structure that we just fill up with the information coming from from a

19
00:02:02,980 --> 00:02:04,240
mail client.

20
00:02:04,240 --> 00:02:08,830
So we create a new package called Modal.

21
00:02:10,390 --> 00:02:13,090
And we can create a new class.

22
00:02:13,210 --> 00:02:17,920
We can name it an email just to follow the logic.

23
00:02:18,670 --> 00:02:23,110
We add some annotations here.

24
00:02:23,110 --> 00:02:29,320
We add annotation document saying This is saying that this is a MongoDB document.

25
00:02:30,220 --> 00:02:41,350
We add at data annotation, it's a Lombok support, so we can just create a properties without defining

26
00:02:41,440 --> 00:02:43,450
getters, setters and so on.

27
00:02:43,520 --> 00:02:49,510
So we are just adding a few properties that we are going to save into database.

28
00:02:49,510 --> 00:02:55,870
We have a from subject and body and that's enough for our example.

29
00:02:56,200 --> 00:03:02,680
And also of course because we are storing information into database, we need some identifier.

30
00:03:02,680 --> 00:03:14,590
So we create this ID as a string and use that at ID annotation, which is also spring data related annotation

31
00:03:14,590 --> 00:03:17,590
and default implementation.

32
00:03:17,590 --> 00:03:27,760
Actually assign ID when our model or entity is being saved into the database.

33
00:03:27,760 --> 00:03:35,560
So we have a modal and we also need something called repo or repository.

34
00:03:35,560 --> 00:03:44,530
So we create a email related repo name ID, email repository we extend.

35
00:03:45,740 --> 00:03:48,020
Uh, some pre-existing

36
00:03:51,680 --> 00:03:54,130
implementations or interfaces.

37
00:03:54,140 --> 00:03:58,270
We have a great repository.

38
00:03:58,280 --> 00:04:05,150
We say we are working with email and ID is type of string.

39
00:04:05,510 --> 00:04:10,270
So in that way this is just something very minimum.

40
00:04:10,280 --> 00:04:12,020
We don't need anything else.

41
00:04:12,170 --> 00:04:20,630
If we don't need any specific method to be called, we just need to save something so that's enough.

42
00:04:21,500 --> 00:04:27,950
And now we just need to add that repo into simple message listener implementation.

43
00:04:27,950 --> 00:04:32,330
So we add repo property here.

44
00:04:32,960 --> 00:04:44,420
We create a constructor that will use this object as parameters so we can just assign it to when a simple

45
00:04:44,420 --> 00:04:46,610
message listener is being created.

46
00:04:46,700 --> 00:04:56,780
So we have that in the place and we just simply fix that problem here in parent class.

47
00:04:56,780 --> 00:05:03,440
So we have that managed service, simple sort of service.

48
00:05:03,440 --> 00:05:15,260
We add this repo as well, we market as auto wire, so it's been injected by spring boot when our service

49
00:05:15,260 --> 00:05:16,460
is being constructed.

50
00:05:16,460 --> 00:05:25,850
And we add this to that, we are adding that parameter to simple message listener implementation.

51
00:05:25,850 --> 00:05:32,150
So constructor is used and at that point we have this repo in the code.

52
00:05:33,090 --> 00:05:41,090
And we can use it in delivery method right after this received email is created.

53
00:05:41,100 --> 00:05:43,280
So we created our emails.

54
00:05:43,350 --> 00:05:51,240
Data structure is the one being saved into MongoDB, so we create a new email instance.

55
00:05:51,750 --> 00:06:04,560
We set a few properties we created, so we set a subject coming from email subject we can set from information

56
00:06:05,790 --> 00:06:11,310
and we can also set body information.

57
00:06:12,920 --> 00:06:22,670
Coming from the data structure, setting a body means extracting correct value from a list of messages

58
00:06:22,670 --> 00:06:27,920
so we can take a look at that email object.

59
00:06:28,220 --> 00:06:31,190
Just fixing a typo email.

60
00:06:31,190 --> 00:06:32,240
We have a.

61
00:06:33,340 --> 00:06:35,260
My list of messages.

62
00:06:35,980 --> 00:06:39,670
It's actually a list of email message data structures.

63
00:06:39,670 --> 00:06:43,000
So we can just pick one from the list.

64
00:06:43,120 --> 00:06:52,420
We can just pick a first one, and then we have to read content.

65
00:06:52,420 --> 00:07:00,670
So we, we, we get canned content which is just returning a string body representation and then we

66
00:07:00,670 --> 00:07:03,640
have a repo we can call just save.

67
00:07:03,670 --> 00:07:12,220
We have the variable of that email we just created so we can see we created an email set the few options

68
00:07:12,220 --> 00:07:17,940
here subject from a body and we call a repo method.

69
00:07:17,950 --> 00:07:25,690
Save the save method is default one coming from the default implementation.

70
00:07:25,690 --> 00:07:32,110
We just we just enhanced by creating our own repo for emails.

71
00:07:33,370 --> 00:07:42,760
We can start that application in the back mode the same way as we did in previous lectures.

72
00:07:42,760 --> 00:07:52,090
So we can send an email to our application and we can go through the breakpoints and see how things

73
00:07:52,090 --> 00:07:52,360
are.

74
00:07:52,690 --> 00:08:02,680
Do work like we are through reviewing where the MongoDB is running on our system.

75
00:08:02,680 --> 00:08:04,780
So we have a hostname and port.

76
00:08:05,530 --> 00:08:15,460
We are using a robo client for getting information from MongoDB.

77
00:08:15,820 --> 00:08:19,060
So this is how applications started.

78
00:08:19,060 --> 00:08:20,920
It's connected to MongoDB.

79
00:08:20,950 --> 00:08:32,580
Running locally in MongoDB installation is out of the scope of this lecture, but just so part of prerequisites

80
00:08:32,590 --> 00:08:34,090
we need to use.

81
00:08:34,090 --> 00:08:35,470
So we use

82
00:08:38,060 --> 00:08:47,890
Thunderbird client for sending an email so we can see we can type, recipient, subject and body whatever

83
00:08:47,890 --> 00:08:51,100
we want and we send that message.

84
00:08:51,100 --> 00:08:59,590
And now for us the voucher is activated so we can see we are at the point of the saving information

85
00:08:59,590 --> 00:09:01,540
into the database.

86
00:09:01,540 --> 00:09:05,650
We can see the ID is now because it's not saved yet.

87
00:09:05,650 --> 00:09:13,780
We set or populated all the fields required to be saved and we can then continue.

88
00:09:15,040 --> 00:09:22,120
We can see the item or repo method save is being called so we can just review a database, we can see

89
00:09:22,120 --> 00:09:30,220
collection email and we can see also one item available in that collection and we can see the values

90
00:09:30,220 --> 00:09:32,740
being set and saved correctly.

91
00:09:32,740 --> 00:09:39,820
We can see from and subject and body information coming from our Thunderbird client.

92
00:09:41,860 --> 00:09:47,130
So we can see a full featured solution from the beginning to the end too.

93
00:09:47,140 --> 00:09:53,050
We started with a simple, simple message implementation.

94
00:09:53,050 --> 00:09:58,330
We we were building upon that creating a SMTP server.

95
00:09:58,330 --> 00:10:07,390
We added several options needed for running SMTP server locally.

96
00:10:08,840 --> 00:10:13,010
We check that our implementation is actually working fine.

97
00:10:15,530 --> 00:10:25,280
We and at the end we we saved incoming email into database using MongoDB using a mode.

98
00:10:25,310 --> 00:10:30,950
MongoDB is just straightforward, no need for data migrations.

99
00:10:31,820 --> 00:10:35,390
We just save information as it is.

100
00:10:35,390 --> 00:10:39,320
So it's very easy to to be used.

101
00:10:39,320 --> 00:10:50,240
And if there are any attachments in emails, we can use a grid fs of MongoDB storing files right into

102
00:10:50,240 --> 00:10:55,880
the database, which is quite fine and fully supported by MongoDB.

103
00:10:58,930 --> 00:11:02,740
To use a MongoDB is also very easy.

104
00:11:02,740 --> 00:11:07,180
We just implemented modal or entity email.

105
00:11:07,180 --> 00:11:14,830
We created a repo for saving or working with those entities.

106
00:11:15,310 --> 00:11:17,260
The implementation is very easy.

107
00:11:17,260 --> 00:11:26,980
We just create an interface and spring data is creating this email repo for us as a managed being so

108
00:11:26,980 --> 00:11:28,720
it can be auto wired.

109
00:11:28,720 --> 00:11:35,950
So we are auto wiring that repo directly into a SMTP server.

110
00:11:35,950 --> 00:11:47,080
We just send it down to simple message listener and uh, this simple message listener has been enhanced.

111
00:11:47,990 --> 00:11:56,360
And to when email is being processed, we just create our email data structure.

112
00:11:57,050 --> 00:12:02,630
This is the data structure related to email collection in MongoDB.

113
00:12:02,660 --> 00:12:05,390
We set several fields.

114
00:12:05,390 --> 00:12:12,100
We just created subject matter from and body and we save it using the repo.

115
00:12:12,110 --> 00:12:20,810
And if everything is in place, MongoDB is running and the port and hosting configurations are fine.

116
00:12:21,800 --> 00:12:34,550
We can see that the email is actually being stored into database and this is a step we just added to.

117
00:12:34,550 --> 00:12:37,160
We have actually a full feature solution here.

118
00:12:37,490 --> 00:12:37,820
Yeah.

119
00:12:37,820 --> 00:12:45,290
So you can if you need to read emails or process emails directly in application, you can just

120
00:12:48,470 --> 00:12:54,500
use that implementation and add that into even a legacy application.

121
00:12:55,130 --> 00:13:03,830
As I mentioned at the beginning, the solution is running in production since spring boot version 1.5.

122
00:13:03,830 --> 00:13:06,830
So the compatibility is quite good.

123
00:13:07,430 --> 00:13:18,110
And from the beginning to the end we can see email message is accepted, delivered or processed and

124
00:13:18,110 --> 00:13:21,590
saved into into database.
