WEBVTT
1
00:00:07.560 --> 00:00:09.420
To start implementation.

2
00:00:09.420 --> 00:00:20.340
We create some helper packages just to help us organize our code so we create a kind of route package

3
00:00:20.340 --> 00:00:28.080
for our new implementation and then create two packages, one for keeping services, and the second

4
00:00:28.080 --> 00:00:34.200
one for keeping a controller for endpoint definition.

5
00:00:34.200 --> 00:00:38.790
So we as a first step, we create a service class.

6
00:00:38.790 --> 00:00:44.100
So let's name it axle generator service.

7
00:00:44.430 --> 00:00:52.170
This is actually the core implementation we are going to enhanced in this and other lectures.

8
00:00:52.350 --> 00:00:55.590
So we add at service annotation.

9
00:00:55.590 --> 00:01:05.220
So this class will be managed by a spring boot for us and can be injected in other classes like controllers.

10
00:01:06.000 --> 00:01:07.230
Now we create.

11
00:01:07.800 --> 00:01:17.900
The main method actually is the one that will create and return Excel file using it.

12
00:01:18.090 --> 00:01:23.070
Using the naming of the library we use.

13
00:01:23.070 --> 00:01:24.900
It's something called the workbook.

14
00:01:24.900 --> 00:01:30.510
Workbook is actually structure describing the entire Excel file.

15
00:01:31.670 --> 00:01:42.080
So as an implementation, we create a workbook object and then we add a few implementation details just

16
00:01:42.080 --> 00:01:50.210
to create a very simple output, just to see that things are working correctly and producing correct

17
00:01:50.210 --> 00:01:51.590
Excel file

18
00:01:54.140 --> 00:01:55.160
for the end point.

19
00:01:55.160 --> 00:01:59.570
So we have that workbook variable we can.

20
00:02:01.370 --> 00:02:04.010
We can act as sheets.

21
00:02:04.070 --> 00:02:09.450
Sheets are just steps we know from the Excel UI.

22
00:02:09.470 --> 00:02:14.600
So we create we use this workbook object we call the create sheet.

23
00:02:15.140 --> 00:02:17.600
We can name it somehow.

24
00:02:18.620 --> 00:02:19.070
So we.

25
00:02:19.580 --> 00:02:23.180
We can define the name that appear on the sheets.

26
00:02:23.390 --> 00:02:24.080
Tap.

27
00:02:25.400 --> 00:02:31.340
And then using the sheet, we can create a particular row and a cell.

28
00:02:31.970 --> 00:02:39.660
So something is will be visible on the screen when when the entire Excel file is created.

29
00:02:39.680 --> 00:02:41.260
So let's create a row.

30
00:02:41.270 --> 00:02:45.110
We create the first row with the index zero.

31
00:02:45.830 --> 00:02:50.900
Let's create a variable for for that row just to understand the sheet.

32
00:02:51.050 --> 00:02:52.280
Just create this.

33
00:02:52.400 --> 00:02:54.680
It's really an empty sheet.

34
00:02:54.680 --> 00:03:02.960
And if some row need to be used to, we just have to create one.

35
00:03:02.960 --> 00:03:09.740
So we create a row object and then we can use the row to create actual cell.

36
00:03:11.150 --> 00:03:15.380
We use the index that represents a column.

37
00:03:15.380 --> 00:03:19.190
So it's a first column in the first row.

38
00:03:19.190 --> 00:03:22.450
And then we we can specify a cell value.

39
00:03:22.460 --> 00:03:27.080
We can see a few cell value method signatures.

40
00:03:27.080 --> 00:03:36.200
We can use a string number or data variables or content here.

41
00:03:37.110 --> 00:03:44.370
And then as we have this simple workbook, we can just returned from this method.

42
00:03:44.850 --> 00:03:52.410
So just to review, we created a service class with a method creating workbook.

43
00:03:52.410 --> 00:03:56.730
Workbook represents our Excel file.

44
00:03:56.760 --> 00:04:07.110
We create rows, sheets or rows or row and sell, and we set the sell value to be returned as a part

45
00:04:07.110 --> 00:04:08.580
of this Excel file.
