WEBVTT
1
00:00:07.780 --> 00:00:12.300
In this chapter, we are going to implement a simple message listener

2
00:00:14.770 --> 00:00:18.940
that we created a few lectures ago.

3
00:00:19.180 --> 00:00:29.590
We have a SMTP server service which relies on SMTP or on a simple message listener implementation.

4
00:00:29.590 --> 00:00:37.870
So we have a accept and deliver method as we described, and now we are going to create or implement

5
00:00:38.830 --> 00:00:47.560
deliver method that will actually process incoming email, create a message structure, email message

6
00:00:47.560 --> 00:00:50.470
structure and do some kind of processing.

7
00:00:50.620 --> 00:00:55.780
Just to recall, we have two dependencies.

8
00:00:55.780 --> 00:01:00.940
We have a short mail and this is the one we are supposed to use here.

9
00:01:01.420 --> 00:01:03.100
Junk mail provides

10
00:01:06.460 --> 00:01:13.630
information about the email message so we can create an email message from record mail, from the data

11
00:01:13.630 --> 00:01:19.360
provided by that simple message listener implementation.

12
00:01:19.360 --> 00:01:24.940
So let's create some property properties variable.

13
00:01:24.940 --> 00:01:27.340
So we just use it.

14
00:01:28.390 --> 00:01:37.900
We have a special option just to cover or ignore all errors that can come from the SMTP communication.

15
00:01:37.900 --> 00:01:48.100
This is just a safe option for us, so we can set that to true for our developers implementation and

16
00:01:48.100 --> 00:01:55.990
then we create a session variable which is coming from a mail Java subsystem.

17
00:01:55.990 --> 00:02:06.460
So this is a session class that we are going to create and we create that class using properties or

18
00:02:06.460 --> 00:02:10.480
those options create a few lines above.

19
00:02:10.570 --> 00:02:19.390
Then we create a message object or we create a variable for that object.

20
00:02:20.440 --> 00:02:24.250
We can see the implementation right away.

21
00:02:24.940 --> 00:02:31.000
So we create a new mime message we use.

22
00:02:32.700 --> 00:02:35.340
Existing variables we have.

23
00:02:35.370 --> 00:02:43.320
We use the session we just created and we use data which are actually which is actually input stream

24
00:02:43.320 --> 00:02:45.870
coming to our delivery method.

25
00:02:45.870 --> 00:02:48.180
So we have those two things.

26
00:02:48.180 --> 00:02:56.970
We have a session with a few options included and we have an actual data as a input stream.

27
00:02:56.970 --> 00:03:02.870
So we have a mind message and then we create a receive received email.

28
00:03:02.880 --> 00:03:11.040
This is a class coming from a hotmail and this is actually something that really describes the full

29
00:03:11.040 --> 00:03:14.940
email containing all purpose properties as we know.

30
00:03:15.150 --> 00:03:25.680
So we have now at the deadline we have an email variable containing received email data structure.

31
00:03:26.650 --> 00:03:33.340
At that point, we can look information in the console so we can see if the.

32
00:03:34.250 --> 00:03:44.030
Email coming into delivery method contains some mandatory fields like a subject, so we create a luck

33
00:03:44.030 --> 00:03:53.000
info with proper information so we can check the console, whether it contains information that are

34
00:03:53.000 --> 00:03:55.730
coming through this delivery method.

35
00:03:55.730 --> 00:04:02.330
So we are writing down an email subject as a part of this logging information.

36
00:04:04.370 --> 00:04:09.170
We can just sum up what we have done right now.

37
00:04:09.170 --> 00:04:12.560
We created a property files with some settings.

38
00:04:12.560 --> 00:04:21.470
We wrap that using a session object, we create a mime message and then we create a received email.

39
00:04:21.470 --> 00:04:26.090
This is the data structure coming from the mail.

40
00:04:27.500 --> 00:04:31.760
So we have the email data structure is everything else, right?

41
00:04:31.760 --> 00:04:37.940
So we can just show up all the methods or properties in the email structure.

42
00:04:37.940 --> 00:04:40.220
This is quite familiar.

43
00:04:40.220 --> 00:04:43.940
We have a subject, we have information about a draft.

44
00:04:44.240 --> 00:04:53.240
If this was read already or not, we can see we have attachments available from information CC see and

45
00:04:53.240 --> 00:05:01.640
reply to and actually all the properties that are common to to email in general.

46
00:05:01.850 --> 00:05:11.870
So this is something we can use later on and now everything looks good so we can try to start application

47
00:05:11.870 --> 00:05:14.780
and to see if everything is working for us.

48
00:05:14.990 --> 00:05:26.480
I mean, if nothing is failing, we see that there are no error information on the console, so everything

49
00:05:26.480 --> 00:05:31.250
is running smoothly and we can test our implementation.
