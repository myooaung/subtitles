1
00:00:08,020 --> 00:00:14,680
Welcome at the another episode of our Spring Boot Full Stack course.

2
00:00:15,490 --> 00:00:22,860
In this section we take a look at a way how to receive email in our application.

3
00:00:22,870 --> 00:00:26,320
We are not talking about sending email here.

4
00:00:26,320 --> 00:00:32,680
We are talking about receiving email from the outer world into our system.

5
00:00:32,680 --> 00:00:40,750
We are working on in Java specifically using a springboard web framework or entire environment.

6
00:00:42,700 --> 00:00:50,140
In the real systems, we usually interact with email system in some way.

7
00:00:50,230 --> 00:01:01,540
We usually send emails from our application outside, but we usually also need a way how to be able

8
00:01:01,540 --> 00:01:11,320
to receive emails from the outer world and to be able to process those interact with the outside world

9
00:01:11,320 --> 00:01:11,850
world.

10
00:01:12,070 --> 00:01:16,300
That way we have a several options commonly used here.

11
00:01:16,510 --> 00:01:25,930
The first one is using existing email system, using existing mailbox and communicating using standard

12
00:01:25,930 --> 00:01:29,230
protocols like IMAP or pop free.

13
00:01:29,980 --> 00:01:38,590
On the Java client side, we have several IMAP or POP3 client libraries we can use here.

14
00:01:38,680 --> 00:01:49,210
We can fetch such emails on scheduled basis using an inbuilt spring scheduler.

15
00:01:49,210 --> 00:01:59,260
For example, processing emails or fetching emails dead way usually means there is a small, smaller

16
00:01:59,260 --> 00:02:01,930
or longer delay in processing emails.

17
00:02:02,110 --> 00:02:12,370
Everything is completely on the on the ground and we have to set up some interaction with the user being

18
00:02:12,370 --> 00:02:17,770
able to see email that just sent to our into our system.

19
00:02:18,240 --> 00:02:23,800
Another common option is using a webhook like communication.

20
00:02:23,800 --> 00:02:32,980
This kind of communication is more a push based approach to fetching emails using IMAP Free, which

21
00:02:32,980 --> 00:02:36,100
is kind of pool based communication.

22
00:02:37,660 --> 00:02:46,780
There are several email systems that are able to take incoming email and post that email.

23
00:02:46,780 --> 00:02:56,350
Using a web hooks means a special URL or endpoint we are creating in our application and post all.

24
00:02:58,360 --> 00:03:01,840
Email related information like a subject, body

25
00:03:04,090 --> 00:03:15,790
images, attachments into end point in our application, and then we can do further processing as required

26
00:03:15,790 --> 00:03:17,530
by application itself.

27
00:03:17,920 --> 00:03:29,740
The web hooks available availability is not a wide and it's usually not used in real system at all.

28
00:03:31,970 --> 00:03:37,880
In the third option, and not probably the least one, but this is the one we are supposed to focus

29
00:03:37,880 --> 00:03:48,500
on in discourse is using or creating or running a small and by that snap server directly inside application

30
00:03:50,150 --> 00:03:59,660
means when our application starts up running web server inside of or if we are running our application

31
00:03:59,660 --> 00:04:10,340
as or package inside, for example, Apache Tomcat that the embedded S&amp;P server is starting as a part

32
00:04:10,340 --> 00:04:15,860
of our application and listening for incoming requests.

33
00:04:15,980 --> 00:04:21,860
And that way we are able to process or communicate with email.

34
00:04:24,010 --> 00:04:32,050
Clients or alter email systems receive email immediately processed or even.

35
00:04:34,070 --> 00:04:43,910
To not possess such email, depend on some kind of rules and present such process email immediately

36
00:04:43,910 --> 00:04:44,720
to the user.

37
00:04:44,720 --> 00:04:46,880
So it's a very efficient way.

38
00:04:47,300 --> 00:04:48,470
Also dead way.

39
00:04:48,470 --> 00:04:58,880
We are a bit independent on the on the altar email system, but we don't require email system on for

40
00:04:58,880 --> 00:05:05,400
example, on the customer side, no interaction with the email system and dead way.

41
00:05:05,420 --> 00:05:14,660
We are completely standalone and our application can do exactly what is supposed to do in in that manner.
