WEBVTT
1
00:00:07.880 --> 00:00:08.160
Okay.

2
00:00:08.430 --> 00:00:14.870
So just to review what we have done so far, we created a SMTP server service.

3
00:00:15.170 --> 00:00:22.790
We started we started the SMTP server running on local holes port 10,025.

4
00:00:22.940 --> 00:00:31.160
We created a simple message listener implementation and we actually implemented deliver method that

5
00:00:31.160 --> 00:00:36.230
is processing email greeting, received email, data structure.

6
00:00:36.530 --> 00:00:45.380
We tried to run that in debug mode and try to send an email so we can debug the actual code and see

7
00:00:45.380 --> 00:00:47.210
how the processing looks like.

8
00:00:47.210 --> 00:00:57.440
So we created a few breakpoints in the code so we can start the application and debug mode.

9
00:00:57.680 --> 00:01:01.190
So application is start starting.

10
00:01:01.670 --> 00:01:09.890
If we look closely, we could see those lock messages coming to the screen so we can see everything

11
00:01:09.890 --> 00:01:10.940
is running.

12
00:01:12.470 --> 00:01:22.880
And to test our SMTP surveys working properly, we use Mozilla Thunderbird client, so we do some configuration.

13
00:01:22.880 --> 00:01:24.200
So we have a Thunderbird.

14
00:01:24.200 --> 00:01:27.500
You can use actually whatever version you would like.

15
00:01:28.130 --> 00:01:37.580
And what we do, we change settings for a SMTP, outgoing SMTP server.

16
00:01:37.790 --> 00:01:48.470
So we we switch to outgoing SMTP server configuration, we try to edit and we change server name local

17
00:01:48.470 --> 00:01:51.950
host and we change the port to the one we use.

18
00:01:52.850 --> 00:01:54.620
We use in configuration.

19
00:01:54.650 --> 00:01:58.610
No for the for the configuration is needed.

20
00:01:58.610 --> 00:02:06.710
So just server name and port as configuration configuration by our application.

21
00:02:07.190 --> 00:02:10.640
And now we can simply create a mail message.

22
00:02:10.640 --> 00:02:16.550
So as a recipient we can just type whatever we want.

23
00:02:16.790 --> 00:02:20.720
We don't do any filtering in accept method.

24
00:02:20.720 --> 00:02:34.700
In our simple message implementation, we add subject and body and we are ready to go so we can send

25
00:02:35.120 --> 00:02:36.380
send message.

26
00:02:37.500 --> 00:02:41.490
And wireless and wireless, sending the message.

27
00:02:42.360 --> 00:02:48.000
We can see the debugger is running and is activated for us so we can see.

28
00:02:48.810 --> 00:02:53.400
A SMTP server is actually accepting the email.

29
00:02:53.400 --> 00:02:55.550
So we are returning a true.

30
00:02:55.560 --> 00:03:00.210
So we are accepting all emails coming to our end point.

31
00:03:00.510 --> 00:03:03.660
We can see from and recipient information.

32
00:03:03.660 --> 00:03:07.260
So this is information coming from our email.

33
00:03:08.130 --> 00:03:13.710
So this is actually something we can base the accepted logic on.

34
00:03:14.070 --> 00:03:20.340
And then when we continue, we can see delivery method is being called.

35
00:03:20.340 --> 00:03:29.910
So we have also the information from recipient and we have actual data of that email as an input stream,

36
00:03:29.910 --> 00:03:32.550
a data structure or object.

37
00:03:32.550 --> 00:03:36.390
So we can continue down on the another line.

38
00:03:36.390 --> 00:03:41.730
So we can continue with the badger and we can see we have a mime message.

39
00:03:41.730 --> 00:03:46.020
We are actually staying at that received email.

40
00:03:46.020 --> 00:03:53.490
So in the next step, received email object is being created so we can check that out.

41
00:03:53.490 --> 00:04:02.970
We can scroll down a bit in the budget window and then we can see there is an email data structure with

42
00:04:02.970 --> 00:04:08.010
all information about email originator.

43
00:04:08.610 --> 00:04:15.870
There are all the fields we are supposed to work with, like a subject body attachments if included,

44
00:04:15.870 --> 00:04:23.940
and everything is available for us so we can actually see that the email coming into delivery method

45
00:04:23.940 --> 00:04:30.930
in the form of data input stream is translated into received email correctly.

46
00:04:30.930 --> 00:04:37.710
So it's the email we just sent using a mozilla thunderbird and.

47
00:04:38.680 --> 00:04:45.370
That email is translated correctly so we can see switching back to Mozilla Thunderbird, that email

48
00:04:45.370 --> 00:04:51.640
is still being in a sending processor state.

49
00:04:52.630 --> 00:05:02.740
So this is something that is still here and we can just continue with the voucher and finally receive

50
00:05:02.740 --> 00:05:03.910
a full email.

51
00:05:04.660 --> 00:05:12.100
And that's actually all we can see that testing our implementation using Mozilla Thunderbird is quite

52
00:05:12.100 --> 00:05:13.230
straightforward.

53
00:05:13.240 --> 00:05:24.460
We created a SMTP server service which is starting our SMTP server and our simple message implementation

54
00:05:24.460 --> 00:05:29.830
is responsible for processing incoming email in proper way.
