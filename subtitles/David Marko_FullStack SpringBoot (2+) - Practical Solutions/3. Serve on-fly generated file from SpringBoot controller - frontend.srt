1
00:00:07,050 --> 00:00:14,580
To continue with the weather implementation, we create a new endpoint that will actually serve our

2
00:00:14,580 --> 00:00:17,010
dynamically generated Excel file.

3
00:00:17,010 --> 00:00:18,750
So we create a new class.

4
00:00:18,750 --> 00:00:21,180
Let's name it an Excel controller.

5
00:00:23,370 --> 00:00:34,620
We asked a few annotations here from the Springboard Add controller and we also assign a path or address

6
00:00:34,620 --> 00:00:47,910
we use in URL and now we re use our Excel generator service its manage being so we can alter wire this

7
00:00:48,510 --> 00:00:50,970
class into our controller.

8
00:00:53,050 --> 00:01:03,430
And until now we can create a real endpoint that that will serve Excel file we are creating with our

9
00:01:03,430 --> 00:01:04,180
service.

10
00:01:04,450 --> 00:01:07,170
So we create an endpoint.

11
00:01:07,210 --> 00:01:12,460
The signature will reply with a response entity.

12
00:01:14,570 --> 00:01:18,350
And too, we can just get the war book.

13
00:01:18,350 --> 00:01:22,430
As we said in previous lectures, the word book is actually the Excel file.

14
00:01:22,430 --> 00:01:30,830
So we create a workbook variable we call the Excel, generate the service with the method we just created

15
00:01:30,830 --> 00:01:39,890
in previous lecture, and we can take that workbook and just reply or send it back to browser so we

16
00:01:39,890 --> 00:01:42,750
can use this response entity object to.

17
00:01:42,750 --> 00:01:46,750
We choose this OC as a.

18
00:01:48,500 --> 00:01:56,810
As a status quo status quo representation, we specify a content type as our application octet stream.

19
00:01:56,930 --> 00:02:06,920
We set header defining that we are providing a kind of attachment or a file as a response.

20
00:02:06,920 --> 00:02:09,710
So we specify a content disposition.

21
00:02:10,700 --> 00:02:18,560
You can see we are using the HTTP headers helper class with predefined different header names and we

22
00:02:18,560 --> 00:02:25,910
can specify the value as inline and we have to specify a file name being sent back to the browser.

23
00:02:25,910 --> 00:02:28,640
So let's just call it an excel.

24
00:02:29,510 --> 00:02:35,030
And now we have to define actual the content of the response.

25
00:02:35,030 --> 00:02:44,960
So we defined a call method body and we sent the information from the workbook book who we just created.

26
00:02:44,960 --> 00:02:55,160
So we have the workbook created as the first line of that end point representation.

27
00:02:55,460 --> 00:03:01,460
And we use we just return and say Let's.

28
00:03:02,260 --> 00:03:05,260
Create a body from the workbook book information.

29
00:03:05,260 --> 00:03:11,320
We just specify more the return values streaming response body.

30
00:03:11,320 --> 00:03:14,070
So everything is green now.

31
00:03:14,440 --> 00:03:17,310
No issues, no errors.

32
00:03:17,320 --> 00:03:19,840
We just have to add also a map.

33
00:03:19,930 --> 00:03:21,250
Get mapping information.

34
00:03:21,250 --> 00:03:28,540
So this Excel method now is understood by Springwood as an endpoint definition.

35
00:03:30,440 --> 00:03:38,210
So let's just try to start the application and see if everything is running correctly without any issues

36
00:03:38,210 --> 00:03:41,810
and application starts as we supposed to.

37
00:03:42,780 --> 00:03:49,830
As we could see, we created a request mapping for the controller with slash e u r l.

38
00:03:49,830 --> 00:03:56,730
So this is something we use in the browser just to access our method, our endpoint.

39
00:03:57,030 --> 00:04:04,650
So let's use this localhost to switch to use flash e endpoint and we can see there is a Excel file,

40
00:04:04,650 --> 00:04:14,310
provide it and we can open the file in the library office and now we can see the sheet one at the bottom

41
00:04:14,310 --> 00:04:22,740
and we have the first cell on the first line and first column with the name for a cell volume, exactly

42
00:04:22,740 --> 00:04:24,390
as we defined in our code.

43
00:04:24,390 --> 00:04:30,030
So we have that endpoint, we have the helper service created.

44
00:04:30,030 --> 00:04:39,150
You can see we have a just a not too much code and we are able to create a fully featured Excel file

45
00:04:39,630 --> 00:04:42,030
and that is very easy to serve.

46
00:04:42,030 --> 00:04:52,320
And the only dependency we use this dependency on the Apache po po i library and implementation is quite

47
00:04:52,320 --> 00:05:00,840
straightforward and can be updated and enhanced as we are going to do so in next lectures.
