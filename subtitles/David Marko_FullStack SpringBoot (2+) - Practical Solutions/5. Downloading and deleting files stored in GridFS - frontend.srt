1
00:00:07,330 --> 00:00:10,060
So we have the back end party operations in place.

2
00:00:10,060 --> 00:00:16,660
We just created a very useful method for listing files, finding one file by ID.

3
00:00:17,080 --> 00:00:28,660
So listing files we used that method for providing items attribute for our HTML and we put that information

4
00:00:28,660 --> 00:00:29,980
in HTML itself.

5
00:00:29,980 --> 00:00:39,880
So we create a section area and for a listing of the all files uploaded in grid of S.

6
00:00:39,880 --> 00:00:43,150
So we have that kind of HTML.

7
00:00:43,660 --> 00:00:44,710
It's a bigger one.

8
00:00:44,860 --> 00:00:48,280
We have a header here, uploaded files list.

9
00:00:48,280 --> 00:00:54,610
We have a table for providing a list of files.

10
00:00:54,610 --> 00:01:02,170
We have a header like a file name ID and we implement a download link and link for deleting a file.

11
00:01:03,670 --> 00:01:09,010
And then we have table structure for listing all items.

12
00:01:09,010 --> 00:01:14,230
So we are referencing items from the modal attribute.

13
00:01:14,230 --> 00:01:25,750
So we have time syntax here for, for going through the list of items here and each item is put into

14
00:01:25,750 --> 00:01:31,930
the item variable so we can reference the variable in inside HTML.

15
00:01:31,930 --> 00:01:38,410
So we have that file name, we have an object ID here listed on the screen.

16
00:01:40,790 --> 00:01:48,320
And we provide a link for downloading and for deleting file from grade of s.

17
00:01:48,710 --> 00:01:59,570
So we for both matters for download and delete, we provide an ID and in time leave so we can find out

18
00:01:59,570 --> 00:02:02,990
the file in the back end and do actual work.

19
00:02:02,990 --> 00:02:13,580
So we have some files in grade of as you can refresh that, we can see we have two files we just uploaded

20
00:02:13,580 --> 00:02:18,170
in previous lectures, so we should see those files on the screen actually.

21
00:02:18,170 --> 00:02:25,880
So let's start in application and see if everything is correct and in place.

22
00:02:27,980 --> 00:02:33,830
Uh, so on the screen with the new file upload, we should see at the bottom the section we have the

23
00:02:33,830 --> 00:02:38,000
list of grade of s or file uploads available.

24
00:02:38,000 --> 00:02:40,670
So let's see it on the in the browser.

25
00:02:40,670 --> 00:02:48,590
So we have that first part we already created for submitting a file and we can see the second part.

26
00:02:48,740 --> 00:02:56,870
This is uploaded files list and we can see just two files we created in previous lectures and we can

27
00:02:56,870 --> 00:03:07,100
see the links available for us and we need to implement in our back end code mainly in controller.

28
00:03:07,340 --> 00:03:09,020
So it doesn't work yet.

29
00:03:09,020 --> 00:03:15,950
So we can see the error message, the link doesn't exist, we actually don't have any points for those

30
00:03:15,950 --> 00:03:16,550
links.

31
00:03:16,550 --> 00:03:21,470
So let's create those end points in controller.

32
00:03:21,710 --> 00:03:30,530
So we are switching back into our Java code and to create an endpoint for.

33
00:03:31,760 --> 00:03:39,320
Downloading the we created a new method here for downloading a particular file.

34
00:03:39,830 --> 00:03:47,660
So again, we defined a method which is actually public because we need to call that from the browser.

35
00:03:48,800 --> 00:03:56,480
We can specify a return time as void for now, and we can see how that evolves in the implementation.

36
00:03:56,480 --> 00:04:05,660
So let's name it download file here and of course through through the link we provide ID of that file.

37
00:04:05,660 --> 00:04:08,630
So we have to specify ID here.

38
00:04:10,920 --> 00:04:18,750
An implementation and idea is kind of a request param with the same name.

39
00:04:19,500 --> 00:04:27,420
And of course we have to annotated in point that it actually become an endpoint with the get mapping.

40
00:04:27,600 --> 00:04:31,620
And we specify you are done download.

41
00:04:31,620 --> 00:04:42,330
So we created a mapping with a slash download and this is the same as we have in that endpoint definition.

42
00:04:42,330 --> 00:04:48,540
So we have a download URL for that endpoint and we provide the ID here.

43
00:04:53,410 --> 00:05:02,380
So in the download Mountain File method, we need to find the file and to create a response like object.

44
00:05:02,620 --> 00:05:07,090
So we use the following kind of definition.

45
00:05:10,270 --> 00:05:13,210
We have to fix some changes here.

46
00:05:13,210 --> 00:05:15,310
We we have attachment service.

47
00:05:15,310 --> 00:05:20,410
Just let's fix a small typo here and.

48
00:05:22,520 --> 00:05:32,480
We have the full implementation here which actually returns file download object properly defined as

49
00:05:32,480 --> 00:05:34,180
needed for springboard.

50
00:05:34,190 --> 00:05:36,470
So we have attachment service.

51
00:05:36,470 --> 00:05:42,830
We are filing one grid as file item based on ID.

52
00:05:42,830 --> 00:05:45,050
This is the method we just created.

53
00:05:45,050 --> 00:05:53,810
We are checking if this object is not null and if that object is available, we create a set of headers

54
00:05:53,810 --> 00:05:58,370
required for file download the important one.

55
00:05:58,370 --> 00:06:06,890
One is that content disposition and we say this is kind of attachment and we define the file name here

56
00:06:06,920 --> 00:06:09,530
coming from grade of S.

57
00:06:09,530 --> 00:06:18,380
So we have that as of file item here object and we can get a file name from it.

58
00:06:19,920 --> 00:06:24,500
So we had Heather's object and we used it.

59
00:06:24,510 --> 00:06:30,270
Heather object for creating a response entity.

60
00:06:30,510 --> 00:06:35,900
And we can see response entities using grid as template.

61
00:06:35,910 --> 00:06:39,240
We don't we haven't used that object yet.

62
00:06:39,400 --> 00:06:48,300
And so manage being provided by springboard data so we can just inject or or to wire that object in

63
00:06:48,300 --> 00:06:50,160
our controller.

64
00:06:50,190 --> 00:06:56,040
So we have that grid template available for us.

65
00:06:56,040 --> 00:07:05,700
And that object provide a useful, useful method for returning a resource like object for item we found

66
00:07:05,700 --> 00:07:09,150
in grid of S database.

67
00:07:09,480 --> 00:07:18,150
So we have that response entity created and of course we have to fix response type for our download

68
00:07:18,150 --> 00:07:19,050
file method.

69
00:07:19,110 --> 00:07:23,360
Just to reflect to what we are actually replying with.

70
00:07:23,370 --> 00:07:34,710
So we have this response and the object created with all the headers defining define defining file size

71
00:07:34,710 --> 00:07:41,760
and content type and providing a body as a resource coming from grid of s.

72
00:07:43,160 --> 00:07:45,410
And this is actually the right way.

73
00:07:45,410 --> 00:07:47,990
How to provide a file download to the browser.

74
00:07:47,990 --> 00:07:56,330
So we use spring springboard structures here and I think everything is in place.

75
00:07:56,330 --> 00:08:02,570
If we don't find an item in the database, we provide a not found information back in the browser.

76
00:08:02,570 --> 00:08:12,620
This is also the correct way how to how to do it and but if the file is available so we can simply serve

77
00:08:12,620 --> 00:08:14,120
it to the browser.

78
00:08:14,980 --> 00:08:23,020
And that's that's actually all we so we have the download and put and create it we have that okay and

79
00:08:23,020 --> 00:08:30,580
not found defined for both situation and we have the link in timely template.

80
00:08:30,580 --> 00:08:33,010
So we have the link to the download.

81
00:08:33,010 --> 00:08:44,170
So let's restart our application and refresh the application in the browser and we can see we have download

82
00:08:44,170 --> 00:08:56,140
buttons here and we can click and of course the file is available here and we can see the file is downloaded

83
00:08:56,140 --> 00:09:01,210
correctly and we can see the file in the in the image browser here.

84
00:09:01,210 --> 00:09:01,450
Yeah.

85
00:09:01,480 --> 00:09:09,640
So things seems to be working just fine and our download button is active on the screen.

86
00:09:11,090 --> 00:09:19,400
Now just to complete a picture, we have that delete button on the screen as well, so it's still not

87
00:09:19,400 --> 00:09:23,270
available and need to be implemented.

88
00:09:24,230 --> 00:09:31,400
So we can just follow this the same way as we have down for file download.

89
00:09:31,430 --> 00:09:37,970
Of course the operation is a bit different, so we need to create a delete.

90
00:09:40,760 --> 00:09:42,110
End point definitions.

91
00:09:42,110 --> 00:09:45,080
So let's name it the lead again.

92
00:09:45,080 --> 00:09:50,900
We are supposed to provide an idea of that grade of object.

93
00:09:50,900 --> 00:09:56,480
So we define request, parameter and notation again.

94
00:09:58,930 --> 00:10:00,310
And.

95
00:10:02,640 --> 00:10:05,820
We defined that endpoint using a gap mapping.

96
00:10:05,940 --> 00:10:12,510
This is not the best way how to do it, actually, but let's keep it for simplicity.

97
00:10:12,520 --> 00:10:23,310
So we name it, delete that endpoint and we return redirect to our slash a screen.

98
00:10:24,660 --> 00:10:32,780
So the actual logic is click on the delete, we delete the file and we present the screen again.

99
00:10:33,600 --> 00:10:43,050
The list should be updated and delete file should not be listed among other files on the screen, and

100
00:10:43,050 --> 00:10:46,290
we can provide some information for the user.

101
00:10:46,290 --> 00:10:51,900
So we have those redirect attributes structure we use already.

102
00:10:51,990 --> 00:10:53,460
So we.

103
00:10:54,720 --> 00:10:57,170
I can't add information back to the user.

104
00:10:57,180 --> 00:11:00,710
So we have attachment service, delete, delete, file.

105
00:11:00,720 --> 00:11:02,310
This is the method we created.

106
00:11:02,310 --> 00:11:10,350
We provide ID here and will we delete the file using grid of s operations?

107
00:11:11,430 --> 00:11:20,550
Operations has that delete method to be defined criteria here and we call it from the controller itself.

108
00:11:21,390 --> 00:11:30,120
And then when operation is successful, we add that information into a flash or redirect attributes.

109
00:11:30,120 --> 00:11:40,050
So let's add a flash attribute with the name message we already have handler for the message objects

110
00:11:40,050 --> 00:11:40,830
on the screen.

111
00:11:40,830 --> 00:11:50,040
So we just re-use it and we say file delete it from the database or from grid of ASP, which is actually

112
00:11:50,040 --> 00:11:52,080
Mongo database.

113
00:11:54,390 --> 00:11:56,190
So we have that on the screen.

114
00:11:56,190 --> 00:11:59,570
So we have that section.

115
00:11:59,580 --> 00:12:07,260
If a message is available, it shows up on the screen so it can create a complete picture for us.

116
00:12:08,540 --> 00:12:15,740
We have filed delete defined here and it's very easy operation just two or three lines of the code and

117
00:12:15,740 --> 00:12:23,720
we have data link saying delete with ID we just re-use and at end point.

118
00:12:24,110 --> 00:12:31,550
So we delete file or we add a flash attribute and we redirect back to the screen.

119
00:12:32,030 --> 00:12:38,900
We have the list of items, so let's restart the application and see if everything is in place and working

120
00:12:38,900 --> 00:12:40,340
for us correctly.

121
00:12:41,750 --> 00:12:43,070
So we have that.

122
00:12:43,070 --> 00:12:45,530
Let's click on delete.

123
00:12:45,530 --> 00:12:47,960
So we have a to actually to.

124
00:12:49,550 --> 00:12:58,370
Items in the grid have as we can see those items on the screen, we have a delete button so we can delete

125
00:12:58,940 --> 00:13:01,730
the first file and file has been deleted.

126
00:13:01,730 --> 00:13:08,060
So we have that information in the message section and the file is now missing in the list.

127
00:13:08,060 --> 00:13:15,080
So we have only one file in the list right now and we can check that in MongoDB.

128
00:13:15,110 --> 00:13:22,790
We can refresh the collection with F FS files and we can see only one file here available.

129
00:13:22,790 --> 00:13:29,300
So the file has been deleted from the database itself and it's reflected in the browser.

130
00:13:29,300 --> 00:13:34,910
So list contains one file now, so we can upload the file again.

131
00:13:34,910 --> 00:13:37,970
We can see the entire application is working.

132
00:13:37,970 --> 00:13:44,870
We can download that file, we can delete that file and everything is in.

133
00:13:46,680 --> 00:13:47,220
Please.

134
00:13:48,240 --> 00:13:51,490
So the entire code is quite straightforward.

135
00:13:51,510 --> 00:13:55,050
We just maintain attachment controller here.

136
00:13:55,050 --> 00:14:00,870
We have a bunch of end points created, but it just follows the logic we use.

137
00:14:00,870 --> 00:14:04,620
We are listing the files on the screen, we are processing for uploads.

138
00:14:04,620 --> 00:14:10,230
We are providing a download or delete operations from the browser.

139
00:14:10,920 --> 00:14:19,080
So we created endpoints for each operation and we created the implementation using attachment service.

140
00:14:19,230 --> 00:14:25,920
So we just following a logic we are doing, we are listing files, uploading files, we are downloading

141
00:14:25,920 --> 00:14:28,110
or deleting files.

142
00:14:28,110 --> 00:14:37,560
It's like a basic craft base operations for maintaining a full logic and we still have one HTML and

143
00:14:37,560 --> 00:14:39,960
we keep all the things together.

144
00:14:39,960 --> 00:14:48,240
And in the browser, it's just a very simple layout showing up all the files and operations we we define.
