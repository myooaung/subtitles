WEBVTT
1
00:00:07.500 --> 00:00:08.880
To generate PDFs.

2
00:00:08.880 --> 00:00:19.630
In our application, we started with a few basic implementation of utility classes and services.

3
00:00:19.650 --> 00:00:30.240
In our application, we actually need tools for translating HTML to PDF and we use the libraries we

4
00:00:30.240 --> 00:00:35.370
included as dependency to our application.

5
00:00:35.400 --> 00:00:44.010
You noticed we use a few few more libraries and we are going to use them in implementation.

6
00:00:44.010 --> 00:00:49.010
So we create some helper packages just to organize our code.

7
00:00:49.020 --> 00:00:58.380
So we have a PDF and service and we create a web for controller part of implementation.

8
00:00:58.380 --> 00:01:04.230
And now we started to have implementing some helper functions.

9
00:01:04.230 --> 00:01:08.690
So let's create first class here.

10
00:01:08.700 --> 00:01:13.350
We name it as HTML two pdf.

11
00:01:15.670 --> 00:01:16.990
Service.

12
00:01:18.800 --> 00:01:24.710
It actually will not be a service as such.

13
00:01:24.710 --> 00:01:26.690
In the understanding of springboard.

14
00:01:26.690 --> 00:01:36.740
We use a static classes here just to to help us to translate one structure to another.

15
00:01:37.160 --> 00:01:46.670
So the first thing we we need to create or we would like to create is to function for creating a PDF

16
00:01:47.900 --> 00:01:53.690
itself to serve PDFs to browser.

17
00:01:53.690 --> 00:01:57.920
We need something related to output streams.

18
00:01:57.920 --> 00:02:05.360
So for our implementation, the return value is supposed to be a binary output stream.

19
00:02:05.690 --> 00:02:12.140
We create a method, create PDF checks and as a parameter we use HTML.

20
00:02:12.140 --> 00:02:23.840
The HTML will come from the chime leave later on, but here for our purposes we have that create PDF

21
00:02:24.410 --> 00:02:27.260
with HTML with a string parameter.

22
00:02:27.260 --> 00:02:37.640
We mark it as a static so we can call it directly without creating HTML to pdf service instance and

23
00:02:37.640 --> 00:02:43.490
then let's out some implementation we use.

24
00:02:46.250 --> 00:02:48.410
Object called I text render.

25
00:02:48.410 --> 00:02:55.580
It's coming in or coming from each HTML render package.

26
00:02:56.360 --> 00:03:07.550
We create a new instance and we use its internal functionality for rendering HTML into kind of a wide

27
00:03:07.550 --> 00:03:08.270
array.

28
00:03:08.900 --> 00:03:15.020
We, we are going to use for streaming things into the browser.

29
00:03:15.020 --> 00:03:22.850
So we first think we need to set content for, for this render.

30
00:03:23.540 --> 00:03:28.190
By content I mean HTML, this is just a blueprint for

31
00:03:31.670 --> 00:03:34.340
for generating a PDF.

32
00:03:34.880 --> 00:03:44.930
So there is some prior knowledge needing needed for HTML and formatting and CSN, so on.

33
00:03:44.930 --> 00:03:47.480
But it's quite a general knowledge.

34
00:03:47.660 --> 00:03:56.720
So we set HTML as a document content who we call something like render layout.

35
00:03:57.350 --> 00:04:02.360
This is doing some internal stuff for basic document formatting.

36
00:04:02.750 --> 00:04:05.690
We create a binary output stream.

37
00:04:05.690 --> 00:04:13.400
This is just an output we are going to use for creating a PDF.

38
00:04:13.640 --> 00:04:21.200
So we call a render create PDF and we provide a bi binary output stream.

39
00:04:21.560 --> 00:04:31.760
So this create pdf method will just send the data to that output stream for for the processing on our

40
00:04:31.760 --> 00:04:42.650
side, there is some exception catching requirements, so we can just apply that to try and catch clauses

41
00:04:42.650 --> 00:04:44.960
as is suggesting.

42
00:04:45.320 --> 00:04:54.140
And then we return this binary output stream as the output from our method.

43
00:04:54.140 --> 00:04:56.570
This is just a very basic implementation.

44
00:04:56.570 --> 00:05:00.410
We will enhance that implementation in future.

45
00:05:00.410 --> 00:05:04.730
But for our basic purposes, this is just it.

46
00:05:05.540 --> 00:05:10.790
It takes HTML and translate HTML into into PDF.

47
00:05:10.910 --> 00:05:17.150
There is a huge support for HTML and CSS formatting from that engine.

48
00:05:17.150 --> 00:05:20.450
So we simply use.

49
00:05:22.080 --> 00:05:31.740
Basic stuff we use for HTML pages as such, and those things will be applied in translated into PDF

50
00:05:31.920 --> 00:05:33.360
data structure.

51
00:05:33.540 --> 00:05:39.610
So we are going to use that method from other places.

52
00:05:39.630 --> 00:05:44.280
We need HTML of course created somehow.

53
00:05:45.540 --> 00:05:50.040
So let's create another class and name it.

54
00:05:50.760 --> 00:05:53.720
PDF generator.

55
00:05:53.730 --> 00:05:54.720
So this.

56
00:05:57.660 --> 00:06:02.280
This is real managed class managed by Springboard.

57
00:06:02.280 --> 00:06:06.900
So we are adding that add service annotation here.

58
00:06:08.900 --> 00:06:16.520
And Dan, in that service, we are going to use a timely template engine.

59
00:06:17.810 --> 00:06:24.440
This is repped by spring template engine object.

60
00:06:24.770 --> 00:06:27.780
So we use a spring template engine object.

61
00:06:27.800 --> 00:06:31.100
Here it's been created by springboard itself.

62
00:06:31.100 --> 00:06:45.020
So we are just auto wiring that into our PDF generator service and now we are creating methods responsible

63
00:06:45.020 --> 00:06:50.120
for rendering HTML for PDF.

64
00:06:52.050 --> 00:06:57.930
For that purpose, we create a helper method.

65
00:06:58.710 --> 00:07:00.770
We provide a title.

66
00:07:00.810 --> 00:07:07.170
This is just a dynamic information we are going to render into our PDF.

67
00:07:07.530 --> 00:07:19.620
And this method is basically responsible for creating HTML from a kind of dynamic context or dynamic

68
00:07:19.620 --> 00:07:24.000
information we are providing to template engine.

69
00:07:24.000 --> 00:07:29.250
So the output would be HTML created by that method.

70
00:07:29.340 --> 00:07:35.930
So to create or to use a spring template engine, we need we need actually two things.

71
00:07:36.020 --> 00:07:43.980
We need HTML file and we need something called contacts.

72
00:07:44.010 --> 00:07:48.810
It's just like a map, it's like a structure.

73
00:07:49.560 --> 00:07:57.430
And it will set a variables here that will be used or rendered inside the template.

74
00:07:57.450 --> 00:08:06.570
This is why we use a spring template engine and it's timely implementation in our case because we don't

75
00:08:06.570 --> 00:08:15.960
need all the static HTML we need to HTML, which is rather dynamic and can render information we are

76
00:08:15.960 --> 00:08:17.870
going to provide to that.

77
00:08:17.880 --> 00:08:25.860
So we we are setting some variables into the context and then we call a process and that process method

78
00:08:25.890 --> 00:08:30.850
is taking a few parameters.

79
00:08:30.870 --> 00:08:37.860
First one is a path to HTML template we are going to use.

80
00:08:37.860 --> 00:08:41.360
And the second parameter is just a context.

81
00:08:41.370 --> 00:08:44.550
This is that map like structure.

82
00:08:44.670 --> 00:08:53.610
So that method is just rendering HTML, applying variables included in context and producing a real

83
00:08:53.910 --> 00:09:03.900
HTML containing all replacements based on the context information and based of course on this template

84
00:09:03.900 --> 00:09:06.480
definition templates

85
00:09:08.520 --> 00:09:12.450
Dwolla and Resources Templates Folder.

86
00:09:12.450 --> 00:09:20.310
We create a PDF Subfolder and HTML five template called Confirmation HTML.

87
00:09:20.790 --> 00:09:23.100
So we have a very basic.

88
00:09:24.900 --> 00:09:26.130
Staff here.

89
00:09:26.160 --> 00:09:37.980
We can just add a few more HTML texts and to a few more timely related texts.

90
00:09:38.340 --> 00:09:43.590
So if you are not familiar with timely, just try to find the documentation.

91
00:09:43.590 --> 00:09:48.170
There is a plenty of full time leaf available internet.

92
00:09:48.180 --> 00:09:54.210
We are going to use a few just a few texts related to Chime Leaf.

93
00:09:54.210 --> 00:10:05.010
And this first one is related to replacing attack content by the variable provided by the context.

94
00:10:05.010 --> 00:10:14.100
So we are we provided a title as a context variable and we are saying replace this age for attack content

95
00:10:14.100 --> 00:10:16.380
with that title value.

96
00:10:16.380 --> 00:10:26.190
So we are going to do so for another variable containing dates date timestamp.

97
00:10:26.190 --> 00:10:32.790
So we have a title and today information coming from our code through the context.

98
00:10:33.030 --> 00:10:42.150
You know that the context variable is such is visible through the context keys.

99
00:10:42.150 --> 00:10:47.640
So we can rely or we can reference the keys in the template.

100
00:10:48.180 --> 00:10:53.580
Now we actually need to create a PDF file itself.

101
00:10:53.580 --> 00:10:59.070
We created that create pdf itax help method.

102
00:10:59.100 --> 00:11:07.290
We provide HTML into that method and to we have actually the method for creating HTML.

103
00:11:07.290 --> 00:11:12.330
So we just have to put those things together.

104
00:11:12.450 --> 00:11:22.260
So here in the PDF Generator Service, we create another method also a public that we're using in controller.

105
00:11:23.730 --> 00:11:24.570
We.

106
00:11:26.040 --> 00:11:36.050
The full signature for that method contains a binary output stream as the output value, and we add

107
00:11:36.060 --> 00:11:39.360
title as an input parameter for that method.

108
00:11:39.480 --> 00:11:42.600
And now we just re-use what we just created.

109
00:11:42.600 --> 00:11:47.100
So we have a HTML two PDF Service Create PDF Index.

110
00:11:48.120 --> 00:11:57.060
This is a method that translates HTML into byte array and we use this render HTML for PDF with title

111
00:11:57.060 --> 00:11:57.780
as a parameter.

112
00:11:57.780 --> 00:12:02.070
So we just actually put together those things.

113
00:12:02.070 --> 00:12:11.220
We, we create a HTML and from the HTML, we create a PDF as a byte era output stream.

114
00:12:12.060 --> 00:12:18.120
So this is basically almost all the background stuff we need in our implementation.

115
00:12:18.750 --> 00:12:20.340
We just follow the logic.

116
00:12:20.670 --> 00:12:23.430
HTML translated into PDF.

117
00:12:23.640 --> 00:12:34.800
HTML can can contain HTML tags and CSS formatting as we will see in other lectures.

118
00:12:34.800 --> 00:12:38.250
And that's all for now as we need.
