1
00:00:07,650 --> 00:00:07,850
Okay.

2
00:00:08,040 --> 00:00:16,500
So now to connect the dots, we are going to create controller part so we can actually call something

3
00:00:16,500 --> 00:00:17,640
from the browser.

4
00:00:18,240 --> 00:00:22,140
In the controller, we are going to use things we just created.

5
00:00:22,140 --> 00:00:32,010
I mean this PDF Generator service and it's create PDF method.

6
00:00:32,250 --> 00:00:36,990
So let's create a new class name at PDF Controller.

7
00:00:38,280 --> 00:00:41,580
We are adding a few annotations.

8
00:00:41,580 --> 00:00:48,720
Here we are at controller so we are defining this is really controller and we are adding request to

9
00:00:48,720 --> 00:00:55,530
mapping with the path that we are going to use in a browser to to call that controller.

10
00:00:55,530 --> 00:00:57,330
So we have a slash p.

11
00:00:59,230 --> 00:01:02,710
We are going to add this idea of generator service.

12
00:01:02,710 --> 00:01:13,960
We use that at all to our annotation so we can use it and and endpoints implementations.

13
00:01:15,610 --> 00:01:20,260
And now to add endpoint implementation, we create a new method.

14
00:01:21,280 --> 00:01:29,980
We have some mandatory things for providing dynamic output from the controller.

15
00:01:30,370 --> 00:01:40,480
So we use this response entity class and we provide some details of the type of the response.

16
00:01:40,480 --> 00:01:44,290
So let's choose the correct implementation.

17
00:01:44,290 --> 00:01:55,330
This is the resource that we are going to return to the browser and this resource contains everything

18
00:01:55,330 --> 00:02:02,740
for that dynamic file we are creating using a PDF Generator service.

19
00:02:03,250 --> 00:02:08,920
This create PDF is actually the the end point definition.

20
00:02:08,920 --> 00:02:20,050
So we use that at getting at get mapping annotation and we use a title as a request param.

21
00:02:20,050 --> 00:02:30,340
So let's add annotation and define that this is not required and we can define some default value when

22
00:02:30,340 --> 00:02:34,570
for situation when this param is missing.

23
00:02:34,690 --> 00:02:39,280
So let's add the default title text into the PDF.

24
00:02:39,670 --> 00:02:44,650
So we have that method signature and we need to create the pdf.

25
00:02:45,040 --> 00:02:53,830
We use this pdf generator service create PDF method, we call it create PDF method with the title information.

26
00:02:54,850 --> 00:03:01,390
So now we are creating a PDF variable as byte array output stream.

27
00:03:03,680 --> 00:03:13,760
So at that point or a deadline, we have a PDF object created containing the actual PDF file, and now

28
00:03:13,760 --> 00:03:21,830
we have to return that byte array output stream in some way to the browser, so browser can recognize

29
00:03:21,830 --> 00:03:23,960
that as a file download.

30
00:03:23,960 --> 00:03:35,000
So we use that response entity object who we call OC defining a status information.

31
00:03:36,060 --> 00:03:48,330
For the browser we defined, we define a few headers saying that this is attachment or kind of in-line

32
00:03:48,960 --> 00:03:50,010
content.

33
00:03:50,160 --> 00:04:00,150
So we, we, we are using even a file name defining how the, how the file should look like in the browser.

34
00:04:00,540 --> 00:04:10,170
So we have this HTTP headers helper class helper class with content disposition variable here.

35
00:04:10,620 --> 00:04:19,080
So we have that header information and now we, we are just sending a body and the body for the body.

36
00:04:19,320 --> 00:04:30,210
We are wrapping this byte resource and we take the PDF and we convert that PDF byte array output stream

37
00:04:30,210 --> 00:04:32,640
actually to bind array itself.

38
00:04:32,820 --> 00:04:36,990
So everything is green, there are no errors in the code.

39
00:04:39,090 --> 00:04:43,830
We can also define content type.

40
00:04:44,460 --> 00:04:50,340
So you can see we have a few more things to be added.

41
00:04:50,760 --> 00:04:56,550
So we define this as kind of media type and we specify

42
00:04:59,100 --> 00:05:10,200
type related to file download just to listing options available, we can see a bunch of media types

43
00:05:10,200 --> 00:05:11,700
for different purposes.

44
00:05:12,630 --> 00:05:26,010
In our case, we need to something related to file download, so we just provide information called

45
00:05:26,010 --> 00:05:30,780
application octet stream.

46
00:05:31,590 --> 00:05:40,920
This is just saying we are providing a file back to the browser so browser can behave properly in that

47
00:05:40,920 --> 00:05:41,730
case.

48
00:05:42,870 --> 00:05:52,920
So to sum up, we have that, okay, saying everything is fine as a status back to the browser, we

49
00:05:52,920 --> 00:05:58,560
are defining a content type saying file is coming.

50
00:05:58,560 --> 00:06:03,390
We set some header and that's actually all.

51
00:06:03,420 --> 00:06:10,020
So we can start the application and see if everything runs without any error.

52
00:06:10,560 --> 00:06:15,750
So let's see if application starts correctly.

53
00:06:16,530 --> 00:06:24,960
We can't see any errors in the ID, so hopefully completion will be fine.

54
00:06:24,960 --> 00:06:34,650
So let's just open the browser and call the end point and we use the slash p, you are L and we have

55
00:06:34,650 --> 00:06:36,150
some bug here.

56
00:06:36,150 --> 00:06:48,810
And yeah, it's this HTML tag we used in HTML is not closed and this is something related to time leave.

57
00:06:48,840 --> 00:06:52,290
Time level requires all attacks being closed.

58
00:06:52,290 --> 00:07:00,780
So we use this metal tag so we have to use slash and just to close the TAC, just to reload into browser

59
00:07:00,780 --> 00:07:02,820
and we can see something is running.

60
00:07:02,820 --> 00:07:09,510
So PDF was created and download it and we try to open that.

61
00:07:09,510 --> 00:07:19,350
And yes, we can see a very simple PDF with the with the default title and the time timestamp inside.

62
00:07:20,560 --> 00:07:23,740
So code is running correctly.

63
00:07:24,700 --> 00:07:35,470
A PDF file is created on fly based on input information and to HTML we created, which is quite simple

64
00:07:35,470 --> 00:07:48,040
at that point translates input value and input values like a title and timestamp into proper texts.

65
00:07:48,550 --> 00:07:57,280
And all this stuff is being translated from the HTML to PDF.

66
00:07:57,550 --> 00:08:08,530
Using a library we are using as a dependency and you can see in the browser we have that nice pdf created

67
00:08:08,530 --> 00:08:10,720
and served dynamically.

68
00:08:10,720 --> 00:08:15,520
So it's not a static PDF, it's it's a dynamically created.

69
00:08:15,520 --> 00:08:21,870
And we can define even a title using request query string parameter.

70
00:08:21,880 --> 00:08:33,790
So let's add that option to to the URL and we can see the PDF created contains a custom our custom title.

71
00:08:33,790 --> 00:08:36,100
We provide it in a URL.

72
00:08:36,100 --> 00:08:38,110
So it's really working.

73
00:08:38,110 --> 00:08:43,630
It's quite dynamic and very easy to use and we can just work on that.
