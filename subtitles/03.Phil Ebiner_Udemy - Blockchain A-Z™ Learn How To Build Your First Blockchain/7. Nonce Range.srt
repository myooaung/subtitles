1
00:00:05,110 --> 00:00:07,310
Hello and welcome back to the course nonblocking.

2
00:00:07,450 --> 00:00:10,270
And today we're talking about the Non's range.

3
00:00:10,360 --> 00:00:12,610
So what do we know about the notes so far.

4
00:00:12,790 --> 00:00:18,520
Well we know that it's a field in the block which allows minors to purchase space in the cryptographic

5
00:00:18,640 --> 00:00:20,020
puzzle challenge.

6
00:00:20,020 --> 00:00:20,560
And how is that.

7
00:00:20,560 --> 00:00:27,840
Well minors cannot change any of these fields except for the nonce and therefore they have to variate

8
00:00:27,850 --> 00:00:35,800
the non-SS in order for all of this to change and for the hash to change and varing and ons they vary

9
00:00:35,800 --> 00:00:43,570
the hash and they hope to get a hash closer and target as soon as that happens then they win the puzzle

10
00:00:43,930 --> 00:00:48,850
and they can add this block to the chain and they get the reward.

11
00:00:49,390 --> 00:00:51,810
And so that's what we know about the not so far.

12
00:00:51,820 --> 00:00:53,500
But here's some additional information.

13
00:00:53,620 --> 00:00:56,410
The nonce is not infinite.

14
00:00:56,530 --> 00:01:00,090
We cannot keep incrementing the odds forever.

15
00:01:00,210 --> 00:01:07,720
The non-SS is a city to be at number meaning that there's only 32 bits of memory allocated in every

16
00:01:07,720 --> 00:01:09,890
single block for the knots.

17
00:01:10,480 --> 00:01:15,880
And to illustrate that that means that non-SS is an integer which has a range.

18
00:01:15,940 --> 00:01:21,550
It can only be anywhere between 0 and approximately 4 billion.

19
00:01:21,700 --> 00:01:24,840
So the node has a limit has a cap of four billion.

20
00:01:25,360 --> 00:01:27,180
And that's that's very important.

21
00:01:27,370 --> 00:01:34,150
And for those Oh's that are marked for those of you or techies out there who are programmers is a 32

22
00:01:34,150 --> 00:01:37,950
bit unsigned integer meaning it doesn't have a sign at the start.

23
00:01:38,110 --> 00:01:42,920
And it can therefore it's all usually say two numbers are up to two billion.

24
00:01:43,060 --> 00:01:46,420
But here it's up to 4 billion because it doesn't sign anyway.

25
00:01:46,440 --> 00:01:50,380
So the conclusion here is that the nodes has a cap.

26
00:01:50,440 --> 00:01:56,170
It can only go up to 4 billion and you might be thinking Well Carol that's very interesting.

27
00:01:56,500 --> 00:01:57,040
Good.

28
00:01:57,100 --> 00:01:58,550
Good trivia fact.

29
00:01:58,570 --> 00:02:00,690
But why is that important for us.

30
00:02:00,910 --> 00:02:02,250
Well let's have a look.

31
00:02:02,470 --> 00:02:06,520
Let's do some estimations and we were done the first part.

32
00:02:06,520 --> 00:02:09,430
We've done the difficult estimations but practice makes perfect.

33
00:02:09,430 --> 00:02:10,660
So let's do them again.

34
00:02:11,080 --> 00:02:18,190
Total possible 64 digit hexadecimal numbers that exist in the world is 16 to about 64.

35
00:02:18,370 --> 00:02:25,780
Approximately 10 to the power of seven then total valid hashes with 18 Anything that are assuming the

36
00:02:25,780 --> 00:02:31,500
current difficulty of 8 leading is 16 to the policies for my safety and approximate two times tenth

37
00:02:31,510 --> 00:02:32,390
of our acreage.

38
00:02:32,890 --> 00:02:38,700
And that means as we discussed previously probability that a randomly picked hash is valid.

39
00:02:38,710 --> 00:02:45,800
Or you know is will solve the cryptographic puzzle is the second number.

40
00:02:46,120 --> 00:02:54,320
The Kuroda valid hushes divided by the total number of possible hashes and gives us two constants of

41
00:02:54,330 --> 00:02:56,170
power of minus 22.

42
00:02:56,300 --> 00:02:58,390
That's very very small percentage.

43
00:02:58,390 --> 00:03:01,480
This is the likelihood of you solving a cryptographic puzzle.

44
00:03:01,570 --> 00:03:07,960
If you pick a random just pick a random hash or that's the same as saying if you pick a random.

45
00:03:08,230 --> 00:03:13,140
OK so we're going to underline this number because we all need it in the next concussion.

46
00:03:13,180 --> 00:03:14,660
Now for the nonce.

47
00:03:14,680 --> 00:03:14,890
Right.

48
00:03:14,890 --> 00:03:20,090
So now we know additional information about the nuance that's getting here the nuances of 32 bit number

49
00:03:20,090 --> 00:03:23,710
of the max nodes nonces two to about three to approximately four billion.

50
00:03:23,710 --> 00:03:25,090
So let's run that to 4 billion.

51
00:03:26,020 --> 00:03:28,000
And we'll underline that in green.

52
00:03:28,000 --> 00:03:30,730
And so this is the important part.

53
00:03:30,910 --> 00:03:40,000
So the question we're trying to answer is is the nons enough to brute force with 100 percent certainty.

54
00:03:40,030 --> 00:03:47,800
Our hash of the puzzle so assuming no collisions meaning that all of these are going to generate unique

55
00:03:48,160 --> 00:03:51,360
nonces unique high hashes.

56
00:03:51,430 --> 00:03:55,960
This means that there will be for 10 cents a bar of nine different hashes from the if you go through

57
00:03:55,960 --> 00:04:02,200
the whole long range you try every single number and that among those four billion you will end up trying

58
00:04:02,200 --> 00:04:04,230
four times ten to the power of nine.

59
00:04:04,240 --> 00:04:05,900
So four billion different hashes.

60
00:04:06,220 --> 00:04:10,610
And so the probability that one of them will be valid.

61
00:04:10,630 --> 00:04:18,760
That's just one of them will be valid is if we take this and we multiply it.

62
00:04:18,800 --> 00:04:24,320
So that's our all the hashes that we try now we multiplied by the percentage likelihood of one of them

63
00:04:24,320 --> 00:04:25,340
becoming valid.

64
00:04:25,850 --> 00:04:31,740
And they would go multiply by that and we get 8 10 percent above minus 13.

65
00:04:32,000 --> 00:04:35,570
Approximately 10 to the power of minus 12 if we're on the top 10.

66
00:04:35,990 --> 00:04:42,730
And that gives us 0.00 0 0 0 0 0 0 0 1 percent chance.

67
00:04:42,740 --> 00:04:45,210
So it is tiny still.

68
00:04:45,200 --> 00:04:53,000
So basically even if we go through a whole range of the Unknowns from 0 to 4 billion and something we

69
00:04:53,000 --> 00:04:59,270
go through a whole range of the nodes we will still this is still the likelihood that we will find a

70
00:04:59,360 --> 00:05:01,460
solution to a cryptographic puzzle.

71
00:05:01,880 --> 00:05:09,650
So the conclusion here is that one non-stranger is not enough that even if you go through the whole

72
00:05:09,650 --> 00:05:17,360
knowns you are very still unlikely to find the golden ones a golden gods and.

73
00:05:17,520 --> 00:05:24,310
And so this puts everything we've been discussing before under the magnifying glass and puts so much

74
00:05:24,310 --> 00:05:25,740
doubt.

75
00:05:25,860 --> 00:05:27,980
Instill some alleged talent in us right now right.

76
00:05:27,990 --> 00:05:32,680
Like can you feel it that before we were pretty confident that you know like we just going through the

77
00:05:32,680 --> 00:05:40,420
nuance and then and then we we will find a hash solution to the puzzle so let's go here.

78
00:05:40,420 --> 00:05:44,550
So we are going like OK so we're just going to try the non-SS of it you'll find that hash.

79
00:05:44,620 --> 00:05:51,890
But now all of a sudden we got you know one first first element of news that we got is while the nonces

80
00:05:51,940 --> 00:05:53,470
only limited up to four billion.

81
00:05:53,500 --> 00:05:56,780
So there's not much you can go really far only up to 4 billion.

82
00:05:56,980 --> 00:06:03,340
And the second Going to the information that we derive now is that the nuance is actually not enough

83
00:06:03,340 --> 00:06:04,980
so that 4 billion is not enough.

84
00:06:05,200 --> 00:06:12,720
So does that put the whole cryptographic puzzle under question is this Is there even a solution if if

85
00:06:12,730 --> 00:06:19,190
the probability is the probability is this small that we will get a solution.

86
00:06:19,190 --> 00:06:21,250
Then what's the point of trying to solve it.

87
00:06:21,260 --> 00:06:23,820
What was going to happen when we get to that 4 billion.

88
00:06:24,020 --> 00:06:28,540
And and you know like what's the what's what's a new world look like.

89
00:06:28,820 --> 00:06:39,920
Well let's say let's say this first thing that's a modest miner does about 100 million hashes per second

90
00:06:40,590 --> 00:06:47,270
and that's like not the fastest not the slowest type of mining rig that you can get 100 quite modest

91
00:06:47,270 --> 00:06:49,560
100 million hashes per second.

92
00:06:49,630 --> 00:06:51,050
It has 100 million.

93
00:06:51,050 --> 00:06:53,810
Hundred million different hashes.

94
00:06:54,050 --> 00:06:56,130
And that means 4 billion.

95
00:06:56,410 --> 00:07:04,730
Our 4 billion is that four billion iterations of the non-SS that you're going to have will be done in

96
00:07:04,930 --> 00:07:07,180
if you do Eifel billion by a hundred million.

97
00:07:07,190 --> 00:07:11,550
It'll be done in 40 seconds so.

98
00:07:11,920 --> 00:07:13,590
So what does that mean.

99
00:07:13,600 --> 00:07:19,990
That means like in 40 seconds we will be done if we have this minor ribeyes minor in 40 seconds will

100
00:07:19,990 --> 00:07:23,500
be done with the whole long range and then once and that's the ends right.

101
00:07:23,530 --> 00:07:24,960
Nothing we can do anything from.

102
00:07:25,090 --> 00:07:26,630
Well not exactly.

103
00:07:26,630 --> 00:07:30,830
And here everything is thought through Here's where we introduce a new field again.

104
00:07:31,120 --> 00:07:36,920
In reality there is an extra field which we haven't talked about yet and it is the time stamp.

105
00:07:37,120 --> 00:07:38,070
It is the time stamp.

106
00:07:38,080 --> 00:07:45,070
All of you know when this blog is being mind and the time stamp updates every single second.

107
00:07:45,070 --> 00:07:48,960
So here I want to show you a Web site so if we go here.

108
00:07:49,080 --> 00:07:53,030
Time to I-Slash Unix time now with Kevil you.

109
00:07:53,140 --> 00:07:55,600
This is the current Unix time.

110
00:07:55,660 --> 00:07:58,380
And what's the Unix time is.

111
00:07:58,420 --> 00:08:04,120
Is the number of seconds that have passed since first of January 1970.

112
00:08:04,330 --> 00:08:06,430
So this is how many seconds it was since then.

113
00:08:06,730 --> 00:08:12,940
And so this is a time is often used in computers and programming and so on because it's so convenient

114
00:08:12,940 --> 00:08:14,970
it's pretty much universal.

115
00:08:15,040 --> 00:08:21,130
And so if we go back here that's the Unix time stamp and it gets updated every single second.

116
00:08:21,370 --> 00:08:26,620
So what that does for us is it creates a loophole.

117
00:08:26,650 --> 00:08:34,120
It creates a solution to our problem meaning that every single time every single second this this information

118
00:08:34,120 --> 00:08:37,650
and this block will be updated because the time stamp will increase by one second.

119
00:08:37,830 --> 00:08:42,760
And as I remember from the avalanche effect the hash even if we don't change is on all and CVN which

120
00:08:42,760 --> 00:08:43,770
won't change anything.

121
00:08:43,810 --> 00:08:48,120
The hash if we rehash that will be absolutely different.

122
00:08:48,310 --> 00:08:56,410
So we know that and therefore what that means if we illustrated is that if we draw a non-trained here

123
00:08:56,890 --> 00:09:00,120
from 0 to 4 billion and then we put a timer.

124
00:09:00,190 --> 00:09:01,510
So we only have 1 second.

125
00:09:01,510 --> 00:09:06,430
So basically we have one second to go through this non-stranger before the time or upgrade of that.

126
00:09:06,580 --> 00:09:10,870
So what happens is we go through non-stranger bam one second past we only go that far.

127
00:09:10,870 --> 00:09:13,060
So we tried all those nonces none of them match.

128
00:09:13,060 --> 00:09:13,890
We didn't get a hash.

129
00:09:13,890 --> 00:09:15,040
Most likely.

130
00:09:15,040 --> 00:09:18,400
And what happens next is time updates.

131
00:09:18,400 --> 00:09:22,420
So one new and you second and that means all of these nonces are valid.

132
00:09:22,420 --> 00:09:24,190
Again this is the important part.

133
00:09:24,220 --> 00:09:29,560
All of these nuances are again valid we can try them again because the information inside has changed

134
00:09:29,560 --> 00:09:34,490
even though it's changed by probably like one bit in here in the timestamp.

135
00:09:34,720 --> 00:09:36,760
It still has change so what this time.

136
00:09:36,810 --> 00:09:37,240
Tiny thing.

137
00:09:37,250 --> 00:09:41,400
So every single lawn's now can go into this block again and we can try it again.

138
00:09:41,400 --> 00:09:42,730
So there we go.

139
00:09:42,790 --> 00:09:43,690
We go again.

140
00:09:43,720 --> 00:09:45,920
Boom another second pass.

141
00:09:46,120 --> 00:09:47,860
Who hasn't been passed.

142
00:09:47,980 --> 00:09:54,010
And you can see that this you know this miner is going in you know doing different range of ranges every

143
00:09:54,010 --> 00:09:54,400
time.

144
00:09:54,400 --> 00:09:57,100
I just did that for illustration is you be a prick.

145
00:09:57,100 --> 00:10:02,370
Approximately the same range you know unless it's like overheating or like or too cold or whatever.

146
00:10:02,440 --> 00:10:09,130
But the point is here that you can see that every single time we go through a certain number of nonces

147
00:10:09,150 --> 00:10:10,530
and then the Times time gifts.

148
00:10:10,750 --> 00:10:16,630
So what I wanted to point out it's not a bad thing that we never get to these and nonces it doesn't

149
00:10:16,630 --> 00:10:17,530
matter at all.

150
00:10:17,530 --> 00:10:24,040
It's actually a good thing that we have an opportunity to reuse the nuances that we were used otherwise

151
00:10:24,040 --> 00:10:26,590
if this wasn't updating if there was no timestamp.

152
00:10:26,740 --> 00:10:31,990
We just get to the 4 billion we wouldn't find on ASH and then we'd have nothing to do but because the

153
00:10:31,990 --> 00:10:37,140
timestamp is updating every second and it takes this miner 40 seconds to do the 4 billion.

154
00:10:37,150 --> 00:10:41,590
Well this is actually generous so this should be like 140 of from here to here.

155
00:10:41,590 --> 00:10:46,840
This purple thing should be up to get up to 148 like tiny but for illustration purposes so here maybe

156
00:10:46,850 --> 00:10:48,620
this is a more efficient manner.

157
00:10:48,790 --> 00:10:56,200
And so basically what that's showing is that again the time stamp is updating where we're going through

158
00:10:56,200 --> 00:10:58,110
as much as we can of the non-SS timestep update.

159
00:10:58,120 --> 00:11:00,460
OK cool we can start again and start again and start again.

160
00:11:00,500 --> 00:11:06,760
So that gives us and effectively infinite number of combinations of times and plus.

161
00:11:06,840 --> 00:11:09,560
So we can go through and get the hash.

162
00:11:09,580 --> 00:11:09,980
All right.

163
00:11:10,000 --> 00:11:12,760
So that's that's really cool.

164
00:11:12,880 --> 00:11:20,620
That solves the problem for one miner for one miner that's doing 100 mega hundreds mega hashes per second

165
00:11:20,920 --> 00:11:22,710
hundred million hushes per second.

166
00:11:23,290 --> 00:11:28,290
OK but how about the mining pool right.

167
00:11:28,300 --> 00:11:29,320
What about the money pool.

168
00:11:29,320 --> 00:11:30,730
So let's have a look.

169
00:11:30,730 --> 00:11:32,770
Will that solve the problem for a mining pool.

170
00:11:32,960 --> 00:11:40,610
If we go here data and go to charts and we go to high Schritt

171
00:11:43,400 --> 00:11:46,790
OK I hope you sit.

172
00:11:46,800 --> 00:11:48,550
Sit tight on your chair.

173
00:11:48,610 --> 00:11:52,330
Don't let this knock you over your shoulder off your feet.

174
00:11:52,330 --> 00:11:56,520
So the current hash rate looks like it's 25 right.

175
00:11:56,530 --> 00:11:58,660
Twenty five million.

176
00:11:58,660 --> 00:12:00,080
Twenty five million.

177
00:12:00,100 --> 00:12:02,090
Looks like it's $25 million.

178
00:12:02,100 --> 00:12:03,510
Twenty five million.

179
00:12:04,060 --> 00:12:11,380
No this is the current hash of the whole network and the current hash of the whole network is shown

180
00:12:11,380 --> 00:12:16,380
here in Terre hashes second trillions of hashes per second.

181
00:12:16,480 --> 00:12:25,500
So the current hash rate of the network is that's that's were eventually going to say we invented you

182
00:12:25,620 --> 00:12:26,430
that.

183
00:12:26,710 --> 00:12:34,430
But at current rate of the network is 22 million trillion hashes per second.

184
00:12:34,710 --> 00:12:41,560
I'm going to say that again just because it's such record number 22 million trillion hashes per second

185
00:12:41,710 --> 00:12:46,100
that's how much rate the rate is now by the way you can check it out for all time.

186
00:12:46,360 --> 00:12:49,140
You'll see how it's changed throughout history.

187
00:12:49,480 --> 00:12:53,830
Like 22 million trillion the hashes per second.

188
00:12:53,830 --> 00:12:54,570
They will.

189
00:12:54,570 --> 00:12:57,080
Like of course they're not all working together.

190
00:12:57,080 --> 00:12:59,130
There are a lot of them competing against each other.

191
00:12:59,200 --> 00:13:09,520
But even if we go to go hear back to charts and we find the hash redistribution we know that BTC dot

192
00:13:09,520 --> 00:13:16,720
com is 27 percent of that 22 million trillion hash rate per second.

193
00:13:16,720 --> 00:13:17,300
Right.

194
00:13:17,320 --> 00:13:18,730
So basically.

195
00:13:19,150 --> 00:13:25,560
So even if we take this one via BTC or slush pool 10 percent right 10 percent of 22 million trillion

196
00:13:25,570 --> 00:13:32,100
hash it hashes are second is 2 million trillion hushes per percent.

197
00:13:32,350 --> 00:13:43,540
So basically that slush pool will smash through we'll smash through that non-SS range in no time.

198
00:13:43,570 --> 00:13:48,360
Like in in 0.00 zero or something seconds they'll smash their super quickly.

199
00:13:48,580 --> 00:13:55,960
And so what we discussed here if I go back this this solution that it takes us 40 seconds to go through

200
00:13:55,960 --> 00:13:56,680
a nuance.

201
00:13:56,980 --> 00:13:58,870
And we only have one second Intel updates.

202
00:13:58,900 --> 00:14:02,450
It works for one miner but it's not a solution for a mining pool.

203
00:14:02,470 --> 00:14:09,060
The money will be gone through the nons even before the second bureau even before like this clock has

204
00:14:09,210 --> 00:14:12,670
has barely started will be really gone through a lot.

205
00:14:12,970 --> 00:14:17,140
And so that begs the question What is the solution for a mining pool.

206
00:14:17,140 --> 00:14:23,710
How does a mining pool approaches this problem because if the money pool goes to the nonce in from 0

207
00:14:23,710 --> 00:14:31,300
to 4 billion like like that clicking my finger and trying to go my finger goes like super fast forebear

208
00:14:31,330 --> 00:14:36,760
and then they have to wait until this updates you know until the second is over until they can do it

209
00:14:36,760 --> 00:14:37,510
again.

210
00:14:37,630 --> 00:14:40,660
Then there is so much wasted capacity.

211
00:14:40,660 --> 00:14:43,850
They just like sitting idly doing nothing.

212
00:14:44,080 --> 00:14:47,410
And that is not acceptable.

213
00:14:47,410 --> 00:14:49,120
That's not how the system should work.

214
00:14:49,120 --> 00:14:51,320
It shouldn't have that constraint.

215
00:14:51,340 --> 00:14:54,180
So that's the question for now.

216
00:14:54,490 --> 00:14:58,260
And that's the question we're going to answer in the next tutorial.

217
00:14:58,300 --> 00:14:59,270
I hope you enjoy this one.

218
00:14:59,270 --> 00:15:04,380
That is pretty interesting stuff like we are slowly building up on the Hill knowledge so non-SS tons.

219
00:15:04,380 --> 00:15:06,050
Up next we're going to have some more.

220
00:15:06,070 --> 00:15:13,200
Hope you're enjoying this quest into the world of a blog chain and bitcoin mining and yet our next attorney

221
00:15:13,210 --> 00:15:13,870
is going to be fun.

222
00:15:13,870 --> 00:15:18,950
We're going to learn how mining pools are how hard potentially this problem is solved.

223
00:15:19,070 --> 00:15:23,010
That even mining pools can participate and without you know all the answers.

224
00:15:23,020 --> 00:15:25,760
How this constraint is actually lost error constraint.

225
00:15:25,770 --> 00:15:31,630
There's something else that we haven't discussed yet that helps avoid this constraint.

226
00:15:31,630 --> 00:15:36,230
All right so on that note thank you so much for being here today and I look forward to seeing you next

227
00:15:36,230 --> 00:15:36,570
time.

228
00:15:36,670 --> 00:15:38,290
Until then enjoy bludgeons.
