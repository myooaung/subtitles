WEBVTT
1
1

00:00:00.000  -->  00:00:01.680
Hey guys, welcome back to the class.
2

2

00:00:01.680  -->  00:00:04.880
We're going to tackle another advanced concept in programming,
3

3

00:00:04.880  -->  00:00:09.610
called object oriented programming, or as I call it, OOP.
4

4

00:00:09.610  -->  00:00:14.790
Now, this is one of the concepts that we're 
not here to even try to understand in true detail,
5

5

00:00:14.790  -->  00:00:18.310
we're just going to try to understand what it means
6

6

00:00:18.310  -->  00:00:21.490
and what it matters in the world of software.
7

7

00:00:21.490  -->  00:00:23.960
Now, one thing you have to understand is that when you program,
8

8

00:00:23.960  -->  00:00:29.700
there is what's called a paradigm, and a paradigm, 
if you know the actual term or the word,
9

9

00:00:29.700  -->  00:00:31.430
it just means how you look at something.
10

10

00:00:31.430  -->  00:00:35.910
If you remember from section one, we talked 
about why operating systems were made.
11

11

00:00:35.910  -->  00:00:41.620
Originally, it wasn't even that "Hey, I want to be able to play Minesweeper,"
12

12

00:00:41.620  -->  00:00:47.080
it was "Wow, machine code is way too complicated, a human is just
13

13

00:00:47.080  -->  00:00:49.950
having a really hard time reading this and writing it,
14

14

00:00:49.950  -->  00:00:54.720
let's make an assembly language that can essentially translate it,
15

15

00:00:54.720  -->  00:00:57.230
but it's easier for a human to operate."
16

16

00:00:57.230  -->  00:00:59.840
And that's the basic kind of thinking behind OOP.
17

17

00:00:59.840  -->  00:01:03.950
So the standard way of developing something is called procedural,
18

18

00:01:03.950  -->  00:01:07.770
so it's a procedural paradigm, and really all that means is that
19

19

00:01:07.770  -->  00:01:12.180
you write an application, that application is just a set of instructions.
20

20

00:01:12.180  -->  00:01:16.470
You tell the browser, or the operating system, "Do this, then do this,
21

21

00:01:16.470  -->  00:01:19.850
then do this, then do this, then call this, then output this."
22

22

00:01:19.850  -->  00:01:22.050
That's procedural, it's very literal.
23

23

00:01:22.050  -->  00:01:25.500
One of the many problems with procedural is that by giving strict instructions
24

24

00:01:25.500  -->  00:01:27.330
one after the other, after the other, after the other,
25

25

00:01:27.330  -->  00:01:31.160
what happens when your application has to scale?
26

26

00:01:31.160  -->  00:01:36.480
If you don't remember, scale just means grow in size almost exponentially.
27

27

00:01:36.480  -->  00:01:40.670
If I went from 10 users to 1000, that's scaling.
28

28

00:01:40.670  -->  00:01:45.810
1000 users will have a different set of problems for your application than 10.
29

29

00:01:45.810  -->  00:01:51.080
So to tackle this problem, they came out with Object Oriented Programming,
30

30

00:01:51.080  -->  00:01:55.180
which gives you a new paradigm, where instead of thinking of programming
31

31

00:01:55.180  -->  00:02:00.430
like just flat out instructions, you think of it more like real objects.
32

32

00:02:00.430  -->  00:02:04.290
So the way you think about this is very similar to how we explained functions.
33

33

00:02:04.290  -->  00:02:07.600
Remember that? Remember, a function was, you take a bunch of instructions,
34

34

00:02:07.600  -->  00:02:11.070
and then create a function out of them, then you don't have to rewrite the instructions,
35

35

00:02:11.070  -->  00:02:15.720
you just have to rewrite the function whenever you need to use that set of instructions.
36

36

00:02:15.720  -->  00:02:19.740
Well, OOP is just an extension of that even.
37

37

00:02:19.740  -->  00:02:26.180
It's a collection of functions and data that can be grouped into what's called an "object."
38

38

00:02:26.180  -->  00:02:31.120
Then, when you are programming and you need 
to access some of the information in that object,
39

39

00:02:31.120  -->  00:02:36.000
what you do is what's called "instantiation," you instantiate the object.
40

40

00:02:36.000  -->  00:02:39.120
Really all that means is "Hey, now the document I'm writing now
41

41

00:02:39.120  -->  00:02:43.930
has access to a large chunk of code that is stored somewhere else."
42

42

00:02:43.930  -->  00:02:47.270
Now, if you know what's wrong with that last sentence I said,
43

43

00:02:47.270  -->  00:02:52.240
I'm kind of confused why you're taking this course, but good for you.
44

44

00:02:52.240  -->  00:02:56.580
I said something incorrectly, which was that you instantiate an object.
45

45

00:02:56.580  -->  00:03:01.080
Actually, you don't instantiate an object, you instantiate a class,
46

46

00:03:01.080  -->  00:03:05.080
which is another concept you kind of have to understand for OOP.
47

47

00:03:05.080  -->  00:03:07.650
So the first reason why we have OOP is that you can
48

48

00:03:07.650  -->  00:03:11.060
save time by grouping bunches of data and functions together.
49

49

00:03:11.060  -->  00:03:19.410
The second reason is that you can then apply 
attributes broadly across several objects or one object.
50

50

00:03:19.410  -->  00:03:23.030
So let's say we made a class, and that class dictated that
51

51

00:03:23.030  -->  00:03:26.280
everything in this object was going to output in a certain way,
52

52

00:03:26.280  -->  00:03:29.450
or it was always going to be in a certain format,
53

53

00:03:29.450  -->  00:03:32.620
that's essentially what we would use a class for.
54

54

00:03:32.620  -->  00:03:37.580
The only coherent example I can really think of for you guys, for OOP, is
55

55

00:03:37.580  -->  00:03:39.090
let's say we have an ecommerce store.
56

56

00:03:39.090  -->  00:03:42.090
In an ecommerce store, we have lots and lots of products.
57

57

00:03:42.090  -->  00:03:47.450
Well, to save us time, we would probably 
create a class that describes all of the products,
58

58

00:03:47.450  -->  00:03:50.500
all products have a price, all products have an image, ok,
59

59

00:03:50.500  -->  00:03:56.570
well, we'd set those rules in the class, and 
then we'd create an object for each product.
60

60

00:03:56.570  -->  00:04:01.450
Let's say we're programming the checkout page, 
or the next page, or even the suggestions page.
61

61

00:04:01.450  -->  00:04:06.620
Then, if we need to show that specific product, and we call the specific object in,
62

62

00:04:06.620  -->  00:04:10.850
we don't have to do anything to that object, it's prepackaged, ready to go,
63

63

00:04:10.850  -->  00:04:14.360
and it already has those attributes from the class attributed to it.
64

64

00:04:14.360  -->  00:04:16.160
You obviously have seen this in social networks,
65

65

00:04:16.160  -->  00:04:18.720
they'll create an object and that represents a person.
66

66

00:04:18.720  -->  00:04:23.880
So every time you call an object, it will represent you
67

67

00:04:23.880  -->  00:04:26.900
and bring all of the things associated with someone's profile,
68

68

00:04:26.900  -->  00:04:30.820
like an image, like a name, like a phone number, and like
69

69

00:04:30.820  -->  00:04:33.840
tons and tons of photos of your sister's new baby.
70

70

00:04:33.840  -->  00:04:39.680
All you need to know past that is that OOP is more scalable than procedural,
71

71

00:04:39.680  -->  00:04:43.990
and that for the most part, for the longest time, people thought that
72

72

00:04:43.990  -->  00:04:50.170
OOP was just superior to procedural, but procedural is making a comeback.
73

73

00:04:50.170  -->  00:04:52.760
If that was all gibberish to you, it was all gibberish to me
74

74

00:04:52.760  -->  00:04:54.360
...OOPS.
75

75

00:04:54.360  -->  00:04:56.770
All right, so that's a fancy-fancy term you might hear,
76

76

00:04:56.770  -->  00:04:59.230
and if you're programming in things like PHP,
77

77

00:04:59.230  -->  00:05:01.840
you're going to run into it pretty much immediately.
78

78

00:05:01.840  -->  00:05:08.710
So just think of it like that - it's a way that saves 
you time by basically making mega-functions
79

79

00:05:08.710  -->  00:05:14.180
and that you can call them in later to save you time programming.
80

80

00:05:14.180  -->  00:05:16.200
Yatta, yatta, yatta, yatta, yatta.
