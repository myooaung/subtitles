1
1

00:00:00,000  -->  00:00:01,720
Hey guys, welcome back to the course.
2

2

00:00:01,720  -->  00:00:06,510
Ok, so the next concept we need to take a peek at is the concept of "printing".
3

3

00:00:06,510  -->  00:00:08,570
Now, I know what you're thinking, roughly.
4

4

00:00:08,570  -->  00:00:12,670
No, it's not a system for queuing up a printer, and in fact
5

5

00:00:12,670  -->  00:00:16,880
I really don't know why they decided to call it "printing" at all.
6

6

00:00:16,880  -->  00:00:20,790
If you know, you can post in the Q&A, because I honestly don't know,
7

7

00:00:20,790  -->  00:00:24,250
I'm sure there is some very strange story as to why that is.
8

8

00:00:24,250  -->  00:00:28,460
Ok, so the basic idea of printing is that it's a common command
9

9

00:00:28,460  -->  00:00:31,680
you can put into your code and what it's going to do for you is that
10

10

00:00:31,680  -->  00:00:34,530
it's going to take all of the work you have done so far and
11

11

00:00:34,530  -->  00:00:38,480
output that onto a screen whenever you run the code.
12

12

00:00:38,480  -->  00:00:41,040
This is actually something that tripped me up quite a bit
13

13

00:00:41,040  -->  00:00:42,900
when I originally learned this stuff too.
14

14

00:00:42,900  -->  00:00:49,440
What do you mean put it on a screen? It's already on the screen for me.
15

15

00:00:49,440  -->  00:00:54,990
To get over that hump, you just have to 
remember programs are just text documents.
16

16

00:00:54,990  -->  00:00:58,800
They don't actually do anything until a browser opens them,
17

17

00:00:58,800  -->  00:01:03,570
at which point the browser knows how to 
read the instructions and responds accordingly.
18

18

00:01:03,570  -->  00:01:07,040
So if I gave that burrito recipe to the browser,
19

19

00:01:07,040  -->  00:01:11,500
it would just go "Hm, interesting, these are some values
20

20

00:01:11,500  -->  00:01:13,970
and you did this calculation. Great. Good to know."
21

21

00:01:13,970  -->  00:01:17,880
And, looking at this calculation, then what would it do?
22

22

00:01:17,880  -->  00:01:20,550
It would just know that these are the values,
23

23

00:01:20,550  -->  00:01:23,690
but then it wouldn't do anything past that point.
24

24

00:01:23,690  -->  00:01:27,090
So how would you tell the world that you know how to
25

25

00:01:27,090  -->  00:01:29,450
calculate the price of burrito, chips, and guac?
26

26

00:01:29,450  -->  00:01:33,200
If I wanted the browser to display on the screen
27

27

00:01:33,200  -->  00:01:38,220
so the customer knew what the actual price was during the calculation,
28

28

00:01:38,220  -->  00:01:40,210
let's say we're at the cart stage,
29

29

00:01:40,210  -->  00:01:43,430
and they need to know how much dough they're about to lose,
30

30

00:01:43,430  -->  00:01:46,280
well, I'd actually have to "print" this screen,
31

31

00:01:46,280  -->  00:01:49,870
and that process, that function tells the browser,
32

32

00:01:49,870  -->  00:01:55,280
"Hey, everything I just did, or what I'm specifically telling you to do,
33

33

00:01:55,280  -->  00:01:58,750
take that and print it onto the browser, so that person can see it."
34

34

00:01:58,750  -->  00:02:00,460
Remember how we talked about back-end languages, how they do
35

35

00:02:00,460  -->  00:02:04,530
a lot of the unsung work behind the scenes?
36

36

00:02:04,530  -->  00:02:08,560
Well, the vast majority of what happens behind your browser,
37

37

00:02:08,560  -->  00:02:10,880
in the back-end, you just don't see.
38

38

00:02:10,880  -->  00:02:13,100
It's going to make a lot of calculations, it's going to store information,
39

39

00:02:13,100  -->  00:02:15,360
it's going to save it, it's going to move it around,
40

40

00:02:15,360  -->  00:02:16,680
you never see that stuff happening.
41

41

00:02:16,680  -->  00:02:21,280
It's only when it prints that it shows up 
on the screen and you see something change.
42

42

00:02:21,280  -->  00:02:25,780
I save something and I need to see an update message pop up,
43

43

00:02:25,780  -->  00:02:30,250
it's not until somewhere in the code it 
says "Print this message" that I actually see it.
44

44

00:02:30,250  -->  00:02:34,090
So, in this situation, in Python, what you would do is,
45

45

00:02:34,090  -->  00:02:36,790
it's actually just called "print," and specifically with Python,
46

46

00:02:36,790  -->  00:02:38,500
you have to put parentheses after "print,"
47

47

00:02:38,500  -->  00:02:40,930
so I would just say "print equals the total."
48

48

00:02:40,930  -->  00:02:43,510
So that is actually it. Now the browser knows
49

49

00:02:43,510  -->  00:02:46,040
how to get the burrito price onto the screen.
50

50

00:02:46,040  -->  00:02:51,570
If I wanted to do the same thing, but let's say, 
in a different language, say, Ruby,
51

51

00:02:51,570  -->  00:02:58,250
well, how would I do that? I would 
actually just have to drop the parentheses.
52

52

00:02:58,250  -->  00:03:03,600
And it's going to flip out because it's expecting 
Python, but that is how you do it in Ruby.
53

53

00:03:03,600  -->  00:03:07,990
So how do you think I would have to do this in PHP to the exact same function?
54

54

00:03:07,990  -->  00:03:11,950
You can probably guess from the last lecture, because why?
55

55

00:03:11,950  -->  00:03:14,480
Because variables have to have a dollar sign in front of them.
56

56

00:03:14,480  -->  00:03:19,540
That's it. That is how you'd print in PHP, 
without it is how you do it in Ruby,
57

57

00:03:19,540  -->  00:03:21,100
and with parentheses is how you do it in Python.
58

58

00:03:21,100  -->  00:03:22,070
The more you know.
59

59

00:03:22,070  -->  00:03:26,240
Ok, so printing is basically just how 
you ferry things from the browser's memory
60

60

00:03:26,240  -->  00:03:30,610
to the browser's output, which is basically what the user actually sees.
61

61

00:03:30,610  -->  00:03:33,820
This is a concept in back-end languages, as you'll notice,
62

62

00:03:33,820  -->  00:03:38,360
in here, I didn't tell it to print this, and it showed up.
63

63

00:03:38,360  -->  00:03:41,790
That's because when your browser sees an HTML file,
64

64

00:03:41,790  -->  00:03:45,700
everything it's going to do it's going to display on the front.
65

65

00:03:45,700  -->  00:03:50,200
If it needs to make a calculation, and then display the result of that calculation,
66

66

00:03:50,200  -->  00:03:53,680
it's going to have to use a back-end language, which, again, is behind the scenes.
67

67

00:03:53,680  -->  00:03:56,000
So, if I wanted to ferry that information from the back-end,
68

68

00:03:56,000  -->  00:03:59,310
the Python file, to the HTML, I would need to print it.
69

69

00:03:59,310  -->  00:04:00,770
Ok, hopefully that makes enough sense.
70

70

00:04:00,770  -->  00:04:04,180
So now, when you hear the word "printing," really that just means show it,
71

71

00:04:04,180  -->  00:04:09,550
put the code on the screen, because naturally, 
code just does not automatically output itself,
72

72

00:04:09,550  -->  00:04:11,120
you have to tell it to output.
73

73

00:04:11,120  -->  00:04:13,690
On to the next concept we're going to cover, it's called commenting.
74

74

00:04:13,690  -->  00:04:14,940
All right, see you then!
