WEBVTT
ï»¿1
00:00:00.530 --> 00:00:04.095
Friends here or concept is both O3,

2
00:00:04.095 --> 00:00:08.160
any document set up on Windows Server to work with AWS services.

3
00:00:08.160 --> 00:00:09.810
So from our previous videos,

4
00:00:09.810 --> 00:00:14.370
we already installed required Python version and Buto three on our local server.

5
00:00:14.370 --> 00:00:16.710
But you won't be able to use it, right?

6
00:00:16.710 --> 00:00:20.730
No, because it doesn't know which enables a cone it should connect to,

7
00:00:20.730 --> 00:00:24.060
to say, suppose if you want to manage any AWS,

8
00:00:24.060 --> 00:00:27.090
RVs through you way more than you are logging into

9
00:00:27.090 --> 00:00:29.610
your interface management console using browser by

10
00:00:29.610 --> 00:00:32.705
providing your AWS account credentials.

11
00:00:32.705 --> 00:00:36.500
Then, how about programmatic access when we want to

12
00:00:36.500 --> 00:00:40.760
manage integrated services using our popular Python scripting language.

13
00:00:40.760 --> 00:00:45.530
C, I want to manage my AW services using Python Bhutto, three skips.

14
00:00:45.530 --> 00:00:50.645
Then how you are Python Bhutto that descriptive is connected to a database or cone.

15
00:00:50.645 --> 00:00:55.310
So to connect with your Butler AWS account using Python Bhutto three scapes,

16
00:00:55.310 --> 00:00:57.035
you need to configure

17
00:00:57.035 --> 00:01:01.535
programmatic access keys of your Butler AWS account on your local server.

18
00:01:01.535 --> 00:01:07.475
So here programmatic access keys are nothing but access key ID and secret access keys.

19
00:01:07.475 --> 00:01:11.315
So these two keys you can get from your AWS management console.

20
00:01:11.315 --> 00:01:12.905
We will see that.

21
00:01:12.905 --> 00:01:16.190
And you can use either route or any IAM user

22
00:01:16.190 --> 00:01:21.875
programmatic access keys to work with your AWS services using Python boat 2-3 skips,

23
00:01:21.875 --> 00:01:26.780
but using root programmatic access keys is not a good practice.

24
00:01:26.780 --> 00:01:28.865
That's why we will create some I am users.

25
00:01:28.865 --> 00:01:31.070
And we'll use those IM uses

26
00:01:31.070 --> 00:01:35.510
programmatic access keys to manage with the word AWS services.

27
00:01:35.510 --> 00:01:38.225
Let's get programmatic access keys.

28
00:01:38.225 --> 00:01:42.845
Let me open my AWS management console.

29
00:01:42.845 --> 00:01:45.210
Let me logging into it.

30
00:01:47.110 --> 00:01:50.600
First, let me show you how to get

31
00:01:50.600 --> 00:01:55.185
programmatic access keys for your root user. I'm in root account.

32
00:01:55.185 --> 00:01:58.765
Just click on your name.

33
00:01:58.765 --> 00:02:02.780
Then go to my security credentials.

34
00:02:03.780 --> 00:02:06.100
And if you have three year somewhere,

35
00:02:06.100 --> 00:02:08.215
you are having access keys,

36
00:02:08.215 --> 00:02:10.420
access key ID and secret access key.

37
00:02:10.420 --> 00:02:14.575
Just click on that and create new access key.

38
00:02:14.575 --> 00:02:19.090
Show access key, or download your phi c. Once if you close,

39
00:02:19.090 --> 00:02:21.355
you can able to see only access key ID.

40
00:02:21.355 --> 00:02:22.930
You cannot see you secret access key.

41
00:02:22.930 --> 00:02:24.955
That's right, better download your file.

42
00:02:24.955 --> 00:02:27.190
But here, as of now just directly,

43
00:02:27.190 --> 00:02:30.325
I'm copying these two keys.

44
00:02:30.325 --> 00:02:38.120
First I will copy. So this is for my root root account.

45
00:02:38.920 --> 00:02:43.835
Then let me get some IAM user credentials,

46
00:02:43.835 --> 00:02:49.940
programmatic access keys. C.

47
00:02:49.940 --> 00:02:51.350
Once if you close that,

48
00:02:51.350 --> 00:02:53.930
you're able to see only access KID.

49
00:02:53.930 --> 00:02:58.114
Right? Fine. Now, let me go to users.

50
00:02:58.114 --> 00:03:02.375
So if you want to go to users anywhere you are in IAM console only,

51
00:03:02.375 --> 00:03:05.930
you can simply go to users and hear how

52
00:03:05.930 --> 00:03:09.485
use you to dollar per user if you want to create any other IAM user,

53
00:03:09.485 --> 00:03:10.775
just to go to Add User,

54
00:03:10.775 --> 00:03:16.100
suppose I want to create one separate IAM user to work with S3 services.

55
00:03:16.100 --> 00:03:19.640
So S3 dollar per. Then see here.

56
00:03:19.640 --> 00:03:20.750
Access type.

57
00:03:20.750 --> 00:03:24.710
So I want to do only programmatic access keys for these IMUs.

58
00:03:24.710 --> 00:03:29.195
Or if you want to provide AWS management console, you can click here.

59
00:03:29.195 --> 00:03:30.350
That's it.

60
00:03:30.350 --> 00:03:33.890
Now simply I'm using programmatic access key for this user.

61
00:03:33.890 --> 00:03:37.730
Next, permissions Attach existing policies that Italy.

62
00:03:37.730 --> 00:03:46.470
So I want to do is three full permissions cleared the user.

63
00:03:47.650 --> 00:03:54.035
See, while creating your user that Italy it is generating your access keys.

64
00:03:54.035 --> 00:03:57.320
So if you want to use them, you can use it otherwise simply closing.

65
00:03:57.320 --> 00:04:02.705
Now, I want to get these two I am users programmatic access keys.

66
00:04:02.705 --> 00:04:05.405
First, let me select easy to double up.

67
00:04:05.405 --> 00:04:10.535
So for easy $2 per click on that and go to security credentials.

68
00:04:10.535 --> 00:04:17.045
And here, create access key C that it is creating.

69
00:04:17.045 --> 00:04:19.470
So simply copy.

70
00:04:21.910 --> 00:04:29.420
So for EC2 dollar per this is access key.

71
00:04:29.420 --> 00:04:36.800
Let me get secret access key.

72
00:04:36.800 --> 00:04:38.120
The same way.

73
00:04:38.120 --> 00:04:39.650
We have one more I am using, right?

74
00:04:39.650 --> 00:04:43.189
You can get any number of I am users based on your requirements.

75
00:04:43.189 --> 00:04:49.430
S3 developer go do security credentials and create access keys.

76
00:04:49.430 --> 00:04:55.160
So it's better to download your key files.

77
00:04:55.160 --> 00:04:57.420
I mean, your keys.

78
00:04:57.760 --> 00:05:09.390
Now this is for S3 dollar per Let me get secret access key also.

79
00:05:09.970 --> 00:05:11.645
That's it.

80
00:05:11.645 --> 00:05:13.055
Then close it.

81
00:05:13.055 --> 00:05:18.575
So now if you want to work with any of your service,

82
00:05:18.575 --> 00:05:20.930
go with the root access keys.

83
00:05:20.930 --> 00:05:24.365
Because root is having access on each and every service.

84
00:05:24.365 --> 00:05:32.345
But for easy to develop or I'm having only access on EC2 services for S3, only on S3.

85
00:05:32.345 --> 00:05:33.980
Anyway, this is root account.

86
00:05:33.980 --> 00:05:35.795
These two are the IAM users.

87
00:05:35.795 --> 00:05:37.040
Now in your hierarchy,

88
00:05:37.040 --> 00:05:43.115
how programmatic access keys for you or root account and some two IMUs are on these keys.

89
00:05:43.115 --> 00:05:45.860
You have to configure on your local server.

90
00:05:45.860 --> 00:05:47.990
Then how to configure them.

91
00:05:47.990 --> 00:05:52.640
So you to configure your programmatic access keys on your local server.

92
00:05:52.640 --> 00:05:56.345
You need to use AWS see like commands.

93
00:05:56.345 --> 00:05:58.820
In order to use AWS CLI commands,

94
00:05:58.820 --> 00:06:01.205
you have to install AWS CLI.

95
00:06:01.205 --> 00:06:03.305
To install your AWS CLI,

96
00:06:03.305 --> 00:06:07.820
simply use pip install AWS ELA If you are using Python to,

97
00:06:07.820 --> 00:06:09.245
if you're using Python three,

98
00:06:09.245 --> 00:06:11.930
simply use p53 install AWS CLI.

99
00:06:11.930 --> 00:06:14.810
So let me open my command line.

100
00:06:14.810 --> 00:06:22.800
So here I'm installing AWS CLI.

101
00:06:23.590 --> 00:06:28.385
So once if you install your AWS CLI using your ETL UCLA,

102
00:06:28.385 --> 00:06:31.520
you can configure your programmatic access keys on

103
00:06:31.520 --> 00:06:35.075
your local server so that those programmatic access keys,

104
00:06:35.075 --> 00:06:41.070
we can use them in our Python moto three scapes to work with your editor services.

105
00:06:45.460 --> 00:06:47.435
Anyway it will install.

106
00:06:47.435 --> 00:06:50.030
Meanwhile, let me go with next step.

107
00:06:50.030 --> 00:06:55.730
So now you can configure your route or I am user access key and credentials.

108
00:06:55.730 --> 00:06:59.750
Access keys on credentials using AWS configure hyphen,

109
00:06:59.750 --> 00:07:02.240
hyphen profile, some profile name.

110
00:07:02.240 --> 00:07:03.695
So this profile name,

111
00:07:03.695 --> 00:07:08.675
you can directly do your IAM username or any required name.

112
00:07:08.675 --> 00:07:13.190
It need not to be the same name of your IAM user or yahoo.com.

113
00:07:13.190 --> 00:07:17.405
You can take any name here while configuring your credentials.

114
00:07:17.405 --> 00:07:19.430
But it's bad to take

115
00:07:19.430 --> 00:07:24.800
same IAM user while configuring so that we won't get any confuse anywhere.

116
00:07:24.800 --> 00:07:27.995
See, if you are having different IAM users,

117
00:07:27.995 --> 00:07:32.195
then it's better to use AWS configure hyphen hyphen profile.

118
00:07:32.195 --> 00:07:34.670
So without providing hyphen hyphen profile also,

119
00:07:34.670 --> 00:07:37.340
we can configure out credentials first,

120
00:07:37.340 --> 00:07:41.780
let me show you how to configure credentials without providing

121
00:07:41.780 --> 00:07:46.865
hyphen hyphen profile option C that it has been installed.

122
00:07:46.865 --> 00:07:53.300
See If I run simply AWS configure this,

123
00:07:53.300 --> 00:07:59.585
observe that it is asking a database access key ID C.

124
00:07:59.585 --> 00:08:01.640
In my hand, I held three or cones.

125
00:08:01.640 --> 00:08:07.265
I mean one account root accountant to IAM user, programmatic access keys.

126
00:08:07.265 --> 00:08:16.590
Suppose if I provide access key for root and secret access key for rupa cone.

127
00:08:20.500 --> 00:08:23.825
And it is also asking default region name.

128
00:08:23.825 --> 00:08:28.370
So I am providing US East one as my default region name.

129
00:08:28.370 --> 00:08:31.880
So in case while writing your Python Bhutto that escapes if you don't provide

130
00:08:31.880 --> 00:08:36.920
any region name by default you are moto three will consider region as this one.

131
00:08:36.920 --> 00:08:40.475
And default output format I am giving Jason.

132
00:08:40.475 --> 00:08:45.995
That's a C. Once if you run AWS configure,

133
00:08:45.995 --> 00:08:50.555
you are configuring your programmatic access keys on your host.

134
00:08:50.555 --> 00:08:55.520
Now, once if you do these on our user home,

135
00:08:55.520 --> 00:08:58.400
there is a directory called.

136
00:08:58.400 --> 00:09:03.060
The directory will be created called dot AWS.

137
00:09:03.070 --> 00:09:05.390
Now see that, sorry,

138
00:09:05.390 --> 00:09:07.280
it is windows, right?

139
00:09:07.280 --> 00:09:11.225
There are two files, Config and credentials.

140
00:09:11.225 --> 00:09:19.130
Now what I will do is see that config in the coffee,

141
00:09:19.130 --> 00:09:24.500
it is starting with the name called default region as US East one,

142
00:09:24.500 --> 00:09:25.940
an output as JSON.

143
00:09:25.940 --> 00:09:31.340
And let me show you even credentials also. See that.

144
00:09:31.340 --> 00:09:36.395
Suppose if I want to configure to IAM user credentials,

145
00:09:36.395 --> 00:09:38.750
then if you go with simply a database configured,

146
00:09:38.750 --> 00:09:45.510
then that is not a good practice because it is override your credentials for I am users.

147
00:09:46.750 --> 00:09:50.915
You first let me remove the existing configuration files.

148
00:09:50.915 --> 00:09:55.985
So simply go to your particular user.

149
00:09:55.985 --> 00:10:00.060
And dot AWS, just I am removing them.

150
00:10:00.100 --> 00:10:04.620
Yeah, I'm VR in this. Just come out.

151
00:10:05.800 --> 00:10:08.570
Yeah, it has been deleted.

152
00:10:08.570 --> 00:10:12.095
See that? Now there is no dot AWS directly.

153
00:10:12.095 --> 00:10:18.290
Now I am configuring programmatic access keys for root and 2m users.

154
00:10:18.290 --> 00:10:24.110
So whenever if you're configuring multiple users programmatic access keys,

155
00:10:24.110 --> 00:10:25.640
this is the best practice.

156
00:10:25.640 --> 00:10:29.150
Aws configure hyphen, hyphen profile.

157
00:10:29.150 --> 00:10:32.435
See first a profile I am taking as root.

158
00:10:32.435 --> 00:10:36.170
You can take root name itself or you can take some x wagered,

159
00:10:36.170 --> 00:10:38.000
No Barolo, just to avoid confusion,

160
00:10:38.000 --> 00:10:39.995
we are taking same names, that's it.

161
00:10:39.995 --> 00:10:50.040
And for route, we have access key and secret access key.

162
00:10:51.310 --> 00:10:56.585
Default Asian name. You can provide any region name even if you don't provide no problem.

163
00:10:56.585 --> 00:10:59.000
And default output format is JSON.

164
00:10:59.000 --> 00:11:01.325
If you provide decide is good, that's it.

165
00:11:01.325 --> 00:11:05.240
No, let me configure for easy $2 per IMUs and

166
00:11:05.240 --> 00:11:11.250
also simply I can take even easy to nola PR.

167
00:11:13.120 --> 00:11:15.950
Now 40 were easy to dollar per we're

168
00:11:15.950 --> 00:11:25.100
having programmatic access key and secret access key.

169
00:11:25.100 --> 00:11:29.940
Then I'm taking US East one as the default region.

170
00:11:29.940 --> 00:11:31.555
That's it.

171
00:11:31.555 --> 00:11:39.220
Now let me take a $3 per No,

172
00:11:39.220 --> 00:11:42.890
let me get access key ID.

173
00:11:49.140 --> 00:11:52.310
And secret x's key.

174
00:11:54.780 --> 00:11:57.340
Again, borrowed any default region name,

175
00:11:57.340 --> 00:11:59.125
that is URL, that's it.

176
00:11:59.125 --> 00:12:01.015
Now once it is done,

177
00:12:01.015 --> 00:12:04.885
just to see that under user who see on windows,

178
00:12:04.885 --> 00:12:09.620
you can see user whom by typing simply Echo Park.

179
00:12:11.650 --> 00:12:14.270
So already we are on that path only.

180
00:12:14.270 --> 00:12:16.625
See that somewhere dot AWS directory is there.

181
00:12:16.625 --> 00:12:19.410
So let me navigate into that.

182
00:12:19.480 --> 00:12:24.155
So here we have two files called config and credentials,

183
00:12:24.155 --> 00:12:26.525
right? Let me open it.

184
00:12:26.525 --> 00:12:29.915
See now, previously there is no profile.

185
00:12:29.915 --> 00:12:34.265
I mean, whenever if you ran AWS configured simply without any profile,

186
00:12:34.265 --> 00:12:36.425
simply it was created with the default.

187
00:12:36.425 --> 00:12:38.300
But now we have clarity.

188
00:12:38.300 --> 00:12:40.474
These two information.

189
00:12:40.474 --> 00:12:44.570
Default values for these root profile and these

190
00:12:44.570 --> 00:12:48.995
241 EC2 dollar per user as $3 per user, the assembly.

191
00:12:48.995 --> 00:12:54.350
You can see credentials as we'll see that the root, these are the keys.

192
00:12:54.350 --> 00:12:58.160
See $2 per, These are the keys as $3 per, These are the keys.

193
00:12:58.160 --> 00:12:58.865
That's it.

194
00:12:58.865 --> 00:13:02.600
So why implementing our Python Botha escapes simply.

195
00:13:02.600 --> 00:13:06.980
We will select any one of the profile name so that you are B23 scripts.

196
00:13:06.980 --> 00:13:11.105
We work by using that Butler aim access.

197
00:13:11.105 --> 00:13:12.170
That's it.

198
00:13:12.170 --> 00:13:17.450
So the here's the simple way to configure your credentials on your local server.

199
00:13:17.450 --> 00:13:18.620
So simply boat O3,

200
00:13:18.620 --> 00:13:21.095
any armen setup one Windows Server.

201
00:13:21.095 --> 00:13:25.070
Now we will see in later videos how to implement

202
00:13:25.070 --> 00:13:30.030
Python Bluetooth rescales by using these profiles. Okay, thank you.

