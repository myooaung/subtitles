WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.825
Friends here we are discussing about Bhutto three Mehta concept.

2
00:00:03.825 --> 00:00:06.840
C, we have different types of concepts in Bordeaux three.

3
00:00:06.840 --> 00:00:10.365
And here we are working with moto three meta object.

4
00:00:10.365 --> 00:00:13.485
C. This Bhutto three meta object is useful

5
00:00:13.485 --> 00:00:16.870
to enter into client object from your resource upset.

6
00:00:16.870 --> 00:00:21.095
Why we need to enter into client object from our resource object.

7
00:00:21.095 --> 00:00:24.680
See already we know that we have each and

8
00:00:24.680 --> 00:00:29.105
every required operation in client object for your particular integral service.

9
00:00:29.105 --> 00:00:32.630
But that guarantee is not there in resource object.

10
00:00:32.630 --> 00:00:35.930
Just assumed that you started your code with resource object.

11
00:00:35.930 --> 00:00:37.670
And in your resource object,

12
00:00:37.670 --> 00:00:40.250
you are unable to find your required operation.

13
00:00:40.250 --> 00:00:43.565
Then you need to start again with the client object.

14
00:00:43.565 --> 00:00:45.680
From your resource object itself,

15
00:00:45.680 --> 00:00:49.610
you can enter into your client object using this metal object.

16
00:00:49.610 --> 00:00:52.160
Let me explain this example with

17
00:00:52.160 --> 00:00:56.195
a simple skeptic or list available regions for ec2 service.

18
00:00:56.195 --> 00:01:01.240
First, let me open my sublime text editor.

19
00:01:01.240 --> 00:01:06.415
So I have already taken a skip name called list all regions for EC2 dot p y.

20
00:01:06.415 --> 00:01:07.915
Let me input Bhutto three,

21
00:01:07.915 --> 00:01:13.855
and let me create my AWS management console using custom session.

22
00:01:13.855 --> 00:01:20.230
So moto three dot Session.get session.

23
00:01:20.230 --> 00:01:24.110
So I am taking here profile name as root.

24
00:01:24.720 --> 00:01:31.269
And let me create my AWS EC2 Console so easily to console,

25
00:01:31.269 --> 00:01:35.830
I'm going to create using the resource equals

26
00:01:35.830 --> 00:01:42.290
to simply your AWS management console dot resource.

27
00:01:42.510 --> 00:01:48.415
Then just take your service name as in-situ.

28
00:01:48.415 --> 00:01:49.855
That's it.

29
00:01:49.855 --> 00:01:55.615
Now, my requirement is I need to list all the regions for your EC2.

30
00:01:55.615 --> 00:01:59.620
Then let me walk anywhere documentation.

31
00:01:59.620 --> 00:02:01.330
So here available services,

32
00:02:01.330 --> 00:02:05.390
easy to and let me open a resource.

33
00:02:06.180 --> 00:02:08.950
And for your resource,

34
00:02:08.950 --> 00:02:11.630
whatever the object we created.

35
00:02:12.300 --> 00:02:14.635
What happened?

36
00:02:14.635 --> 00:02:16.730
Yeah.

37
00:02:19.260 --> 00:02:23.050
See 41, resource object.

38
00:02:23.050 --> 00:02:24.450
Easy to read.

39
00:02:24.450 --> 00:02:26.945
We have three set of operations.

40
00:02:26.945 --> 00:02:31.685
And if you want to get some collections, existing information,

41
00:02:31.685 --> 00:02:33.800
you have to go with collections third set operations,

42
00:02:33.800 --> 00:02:38.345
but if you observe here there is no option regarding regions.

43
00:02:38.345 --> 00:02:44.765
That's why you cannot get your requirement using your resource object.

44
00:02:44.765 --> 00:02:46.850
Then what is the alternate way?

45
00:02:46.850 --> 00:02:49.460
Is there any possibility with the client?

46
00:02:49.460 --> 00:02:54.395
First see that, open your client object and look into that.

47
00:02:54.395 --> 00:02:58.025
Is there any option related with the regions?

48
00:02:58.025 --> 00:03:01.295
See that somewhere you Hall.

49
00:03:01.295 --> 00:03:04.775
Describe regions open that.

50
00:03:04.775 --> 00:03:06.710
So using this describe regions,

51
00:03:06.710 --> 00:03:10.595
you can get all your available regions for EC2 instance.

52
00:03:10.595 --> 00:03:15.920
But now what we are saying is using the source,

53
00:03:15.920 --> 00:03:17.435
it is not possible,

54
00:03:17.435 --> 00:03:19.370
but Client is possible,

55
00:03:19.370 --> 00:03:21.350
but already we created resource object.

56
00:03:21.350 --> 00:03:25.355
Then how we can enter into client object using resource, very simple.

57
00:03:25.355 --> 00:03:29.285
See that what I'm doing is bringing EC2 Console.

58
00:03:29.285 --> 00:03:32.400
Let me do some Da Er operation on this.

59
00:03:33.610 --> 00:03:40.190
So you will get an operation called metta somewhere just under that.

60
00:03:40.190 --> 00:03:41.765
Mehta.

61
00:03:41.765 --> 00:03:43.625
Using this meta observed,

62
00:03:43.625 --> 00:03:50.120
you can enter into you are client object, very simple.

63
00:03:50.970 --> 00:03:53.755
Dot tau.

64
00:03:53.755 --> 00:03:56.650
Then what is the next step you want to perform?

65
00:03:56.650 --> 00:04:01.345
Again, see the list of operations on this. See the output.

66
00:04:01.345 --> 00:04:03.955
You how an operation called client,

67
00:04:03.955 --> 00:04:07.915
that means from resource you are creating client object.

68
00:04:07.915 --> 00:04:09.670
Now see the available operations.

69
00:04:09.670 --> 00:04:14.515
So somewhere you how your required operation called described regions.

70
00:04:14.515 --> 00:04:17.725
Now, don't worry about arguments.

71
00:04:17.725 --> 00:04:25.300
Now see that what I'm doing is dot u or operation called describe regions.

72
00:04:25.300 --> 00:04:28.635
So basically we created resource object.

73
00:04:28.635 --> 00:04:31.505
And in this resource object we are unable to find

74
00:04:31.505 --> 00:04:34.865
a required operation that is related to regions.

75
00:04:34.865 --> 00:04:37.790
That's why we are entering into client with the help of metta.

76
00:04:37.790 --> 00:04:41.930
Let's say no, let me run it and see the output.

77
00:04:41.930 --> 00:04:45.755
You are getting your output regions.

78
00:04:45.755 --> 00:04:48.515
So regions as the dictionary, let me take,

79
00:04:48.515 --> 00:04:52.340
I mean output is a dictionary in the regions is the key.

80
00:04:52.340 --> 00:04:54.390
Now see the output.

81
00:04:55.150 --> 00:04:57.575
And this entire thing is a list.

82
00:04:57.575 --> 00:04:59.480
Let me take for loop.

83
00:04:59.480 --> 00:05:05.405
For each item in.

84
00:05:05.405 --> 00:05:10.170
Let me print me what each item first observed the output.

85
00:05:11.160 --> 00:05:15.100
See that you are getting endpoint and then region name.

86
00:05:15.100 --> 00:05:16.930
What I need from each output.

87
00:05:16.930 --> 00:05:19.015
From each item I need only region name.

88
00:05:19.015 --> 00:05:20.875
You just take your key,

89
00:05:20.875 --> 00:05:22.990
you can take with square brackets.

90
00:05:22.990 --> 00:05:26.320
So then you were key or dot, get your key.

91
00:05:26.320 --> 00:05:28.480
Both ways are fine.

92
00:05:28.480 --> 00:05:34.045
That's a, So these are the regions for our ec2 service.

93
00:05:34.045 --> 00:05:39.220
So here my concept is how we can enter into client object using resource.

94
00:05:39.220 --> 00:05:40.495
Nothing is there simply,

95
00:05:40.495 --> 00:05:42.535
you are resources dot-dot-dot client,

96
00:05:42.535 --> 00:05:43.690
then whatever the operations are,

97
00:05:43.690 --> 00:05:46.390
they're unable to play and just use them in case if you are

98
00:05:46.390 --> 00:05:49.840
not able to find that operation and knew what resource, that's it.

99
00:05:49.840 --> 00:05:52.160
Ok. Thank you.

