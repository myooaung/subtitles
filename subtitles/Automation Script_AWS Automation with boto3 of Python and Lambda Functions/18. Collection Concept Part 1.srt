1
00:00:00,000 --> 00:00:05,220
Friends here we are discussing about moto three collections concept of resource opposite.

2
00:00:05,220 --> 00:00:08,880
See collections concept is slightly different in your client object.

3
00:00:08,880 --> 00:00:13,170
We will discuss about it in later videos and go to

4
00:00:13,170 --> 00:00:18,390
three collections are useful to collect group of resources information.

5
00:00:18,390 --> 00:00:24,885
And here I'm explaining about this concept by taking an example called EC2 service.

6
00:00:24,885 --> 00:00:30,645
But you can apply the same concept for any of your AWS service.

7
00:00:30,645 --> 00:00:35,490
Now, let me open my sublime text editor.

8
00:00:35,490 --> 00:00:40,350
Suppose I want to explain this concept with EC2 service.

9
00:00:40,350 --> 00:00:43,705
So let me create EC2 Console.

10
00:00:43,705 --> 00:00:49,060
So for that first time creating AWS management console equals to moto three

11
00:00:49,060 --> 00:00:55,330
dot Session.get session profile name.

12
00:00:55,330 --> 00:00:57,280
You can take any profile.

13
00:00:57,280 --> 00:01:00,940
Then let me create EC2 Console using

14
00:01:00,940 --> 00:01:05,575
a resource object because we are working with collections concept of resource.

15
00:01:05,575 --> 00:01:08,935
Then AWS management console dot resource,

16
00:01:08,935 --> 00:01:14,140
then provide your service name equals to EC2

17
00:01:14,140 --> 00:01:20,740
than region name, US East one.

18
00:01:20,740 --> 00:01:22,105
Suppose.

19
00:01:22,105 --> 00:01:27,755
Now let me open our AWS management console once.

20
00:01:27,755 --> 00:01:30,200
C, this is easy to console,

21
00:01:30,200 --> 00:01:36,380
then what our group of resources see in your AWS EC2 Console,

22
00:01:36,380 --> 00:01:40,130
you can work with instances or instance types

23
00:01:40,130 --> 00:01:45,710
or let me go with images or volumes or snapshots or security groups,

24
00:01:45,710 --> 00:01:48,575
all these things or group of resources.

25
00:01:48,575 --> 00:01:52,940
Now collectively, to collect all these group of resources,

26
00:01:52,940 --> 00:01:54,920
you have to use collections concept.

27
00:01:54,920 --> 00:01:59,315
Now let me open your boat O3, official documentation.

28
00:01:59,315 --> 00:02:04,700
And let me navigate into You are easy to surveys.

29
00:02:04,700 --> 00:02:07,320
So available services.

30
00:02:08,380 --> 00:02:15,815
Go to EC2 and select your service resource open that.

31
00:02:15,815 --> 00:02:20,675
We know that in our resource object,

32
00:02:20,675 --> 00:02:22,535
we have three set of operations.

33
00:02:22,535 --> 00:02:24,320
Set one set to unset,

34
00:02:24,320 --> 00:02:26,869
three set three are related to collections.

35
00:02:26,869 --> 00:02:31,280
And see here, what are the group of services you

36
00:02:31,280 --> 00:02:36,080
can collect by using resource collections on your EC2 Console.

37
00:02:36,080 --> 00:02:40,579
See, you can get or you can collect all these group of resources.

38
00:02:40,579 --> 00:02:43,580
Suppose if you want to work with images or instances or

39
00:02:43,580 --> 00:02:47,060
volumes are subnet snapshot, just click on that.

40
00:02:47,060 --> 00:02:49,775
Suppose I want to collect instances.

41
00:02:49,775 --> 00:02:52,190
Then click on that instances.

42
00:02:52,190 --> 00:02:58,250
Now, first let me create your instances collection object c.

43
00:02:58,250 --> 00:03:03,170
Simply medically, I'm printing from your EC2 Console resource object.

44
00:03:03,170 --> 00:03:06,980
I'm creating instances collection object.

45
00:03:06,980 --> 00:03:09,425
Now, just run it and see the output.

46
00:03:09,425 --> 00:03:10,955
This is an object.

47
00:03:10,955 --> 00:03:14,220
See the list of operations on this.

48
00:03:16,720 --> 00:03:19,640
So that you are getting some output.

49
00:03:19,640 --> 00:03:24,755
So in that you have these many sub methods on the world.

50
00:03:24,755 --> 00:03:27,305
Collection of disease collection object.

51
00:03:27,305 --> 00:03:30,875
On this object you can apply all these sub methods.

52
00:03:30,875 --> 00:03:37,085
And as of now just try to concentrate on all filter and limit.

53
00:03:37,085 --> 00:03:41,315
We'll discuss about remaining options in our next session, next video.

54
00:03:41,315 --> 00:03:42,125
Fine.

55
00:03:42,125 --> 00:03:44,850
Now let me make a note on this.

56
00:03:47,890 --> 00:03:55,415
So on instances collection object,

57
00:03:55,415 --> 00:04:00,215
we are discussing a boat all limit then filter.

58
00:04:00,215 --> 00:04:03,080
So first let me go with all and limit.

59
00:04:03,080 --> 00:04:07,440
Simply you have to do operation called Not all.

60
00:04:10,560 --> 00:04:12,535
Not all.

61
00:04:12,535 --> 00:04:15,280
Even this operations you can find in your console.

62
00:04:15,280 --> 00:04:16,945
I mean, in your document itself,

63
00:04:16,945 --> 00:04:18,715
see instances of objects.

64
00:04:18,715 --> 00:04:23,424
It is having all create tags, right? Filter.

65
00:04:23,424 --> 00:04:25,135
So all options are available here also,

66
00:04:25,135 --> 00:04:27,970
but you can easily get from your command line itself.

67
00:04:27,970 --> 00:04:31,630
Now let me save it and run it sees output.

68
00:04:31,630 --> 00:04:33,190
Again, you are getting an object,

69
00:04:33,190 --> 00:04:35,080
but this is an iterator.

70
00:04:35,080 --> 00:04:38,170
So simply all means you're going to collect

71
00:04:38,170 --> 00:04:45,175
all your EC2 instances from your particular region of your in-situ.

72
00:04:45,175 --> 00:04:53,540
Now, for each in, simply print each.

73
00:04:53,540 --> 00:04:59,750
Anyway, this dot all is going to collect all your EC2 instances.

74
00:04:59,750 --> 00:05:02,630
That's why you're going to get three instances because on

75
00:05:02,630 --> 00:05:06,770
my AWS EC2 Console under your US East one,

76
00:05:06,770 --> 00:05:10,410
I have three instances. That's why it is collecting.

77
00:05:10,630 --> 00:05:12,155
That's fine.

78
00:05:12,155 --> 00:05:14,720
So you're never, if you want to collect all your EC2 instances,

79
00:05:14,720 --> 00:05:16,355
you are using option sub,

80
00:05:16,355 --> 00:05:18,080
sub method called all.

81
00:05:18,080 --> 00:05:19,475
But I want to limit,

82
00:05:19,475 --> 00:05:21,770
I want to get only assume that you are having

83
00:05:21,770 --> 00:05:24,905
some a 100 EC2 instances in particular region.

84
00:05:24,905 --> 00:05:26,090
I want to get top ten,

85
00:05:26,090 --> 00:05:28,370
I mean order, order.

86
00:05:28,370 --> 00:05:30,170
So first ten I want to get,

87
00:05:30,170 --> 00:05:33,395
then you can use simply limit.

88
00:05:33,395 --> 00:05:36,755
Limit. I want to get ten.

89
00:05:36,755 --> 00:05:37,910
Of course I have only three.

90
00:05:37,910 --> 00:05:39,215
That's just I have taken too,

91
00:05:39,215 --> 00:05:41,850
limited too. And now see the output.

92
00:05:42,100 --> 00:05:46,865
Anyway, this option is not useful very much in your real time.

93
00:05:46,865 --> 00:05:48,965
No problem, but you have an option.

94
00:05:48,965 --> 00:05:50,285
That's fine.

95
00:05:50,285 --> 00:05:56,420
Now the important operation submitted on our collection object is always filter.

96
00:05:56,420 --> 00:05:59,400
First, let me apply a filter and see the output.

97
00:05:59,920 --> 00:06:03,530
You are getting all your EC2 instances.

98
00:06:03,530 --> 00:06:06,365
It's like exactly equals to all.

99
00:06:06,365 --> 00:06:11,000
But using this filter submit on your collection object you how lot of

100
00:06:11,000 --> 00:06:17,220
advantages let me show you by opening you are documentation.

101
00:06:17,350 --> 00:06:19,895
See that this is a filter.

102
00:06:19,895 --> 00:06:23,090
So now funder is taking some arguments.

103
00:06:23,090 --> 00:06:26,960
So as of now I am not touching about the remaining arguments.

104
00:06:26,960 --> 00:06:29,300
I'm touching with only filters.

105
00:06:29,300 --> 00:06:35,510
And be clear, these filters is an argument for your dot filter method.

106
00:06:35,510 --> 00:06:37,250
And this filters is a list,

107
00:06:37,250 --> 00:06:41,820
and this list consist of weekly or a dictionary.

108
00:06:42,130 --> 00:06:46,025
And you can write here any number of dictionary CR,

109
00:06:46,025 --> 00:06:48,335
each dictionary is like one filter.

110
00:06:48,335 --> 00:06:50,690
So just for your understanding purpose,

111
00:06:50,690 --> 00:06:53,640
I am making a simple syntax.

112
00:06:54,010 --> 00:06:55,820
So.

113
00:06:55,820 --> 00:06:58,820
Field tests equals to list.

114
00:06:58,820 --> 00:07:01,925
And in this list you can apply any number of feeders.

115
00:07:01,925 --> 00:07:04,205
Now let me create my first filter.

116
00:07:04,205 --> 00:07:07,670
So fritter one, you can take any variable name here.

117
00:07:07,670 --> 00:07:09,500
I am taking simply f one.

118
00:07:09,500 --> 00:07:12,725
So what is the purpose to create filters first,

119
00:07:12,725 --> 00:07:15,889
see in my console,

120
00:07:15,889 --> 00:07:21,230
EC2 Console, or how three instances out of which two instance or stop,

121
00:07:21,230 --> 00:07:25,490
then I want to display only running instances.

122
00:07:25,490 --> 00:07:27,785
I wanted display only running.

123
00:07:27,785 --> 00:07:30,500
I want to collect the information about running instances.

124
00:07:30,500 --> 00:07:33,725
I don't want to collect the information about stopping stances,

125
00:07:33,725 --> 00:07:36,500
then you need to flatter you are instances for that.

126
00:07:36,500 --> 00:07:38,060
You have to use this filter.

127
00:07:38,060 --> 00:07:41,390
For that you have to use u sub resource submitted

128
00:07:41,390 --> 00:07:44,795
called filter for that you have to apply argument called filters.

129
00:07:44,795 --> 00:07:46,220
And that filter is a list.

130
00:07:46,220 --> 00:07:48,890
In this filter, you can apply any number of filters.

131
00:07:48,890 --> 00:07:51,560
First, let me create one filter, F1.

132
00:07:51,560 --> 00:07:54,545
And what are the filters you are going to apply in the list,

133
00:07:54,545 --> 00:07:57,845
that is L, that is the dictionary.

134
00:07:57,845 --> 00:07:59,075
See that?

135
00:07:59,075 --> 00:08:03,560
This is a dictionary. And this dictionary consists

136
00:08:03,560 --> 00:08:08,194
of standard key called name and key called values.

137
00:08:08,194 --> 00:08:09,440
And name is a string.

138
00:08:09,440 --> 00:08:11,510
You can provide your required name here.

139
00:08:11,510 --> 00:08:14,240
And the values based on this name,

140
00:08:14,240 --> 00:08:16,220
you have to provide a value here.

141
00:08:16,220 --> 00:08:19,835
Now, I am taking this entire thing as a filter one.

142
00:08:19,835 --> 00:08:22,085
So one is a dictionary.

143
00:08:22,085 --> 00:08:27,035
So in that he has standard key called name and how to provide the name here.

144
00:08:27,035 --> 00:08:30,425
We'll provide it comma values.

145
00:08:30,425 --> 00:08:33,395
Neither standard keys in your filters.

146
00:08:33,395 --> 00:08:36,410
Then values or list of values.

147
00:08:36,410 --> 00:08:37,760
Again, don't get confused.

148
00:08:37,760 --> 00:08:41,150
Just follow this syntax here so that it will be easy to apply

149
00:08:41,150 --> 00:08:45,185
filters for your collections filter method.

150
00:08:45,185 --> 00:08:50,600
Now, my requirement is I want to list the running instances.

151
00:08:50,600 --> 00:08:52,580
Then what is the name I can provide here?

152
00:08:52,580 --> 00:08:56,940
And what is the value I can provide here? Just go down.

153
00:08:57,250 --> 00:08:58,970
C, sum.

154
00:08:58,970 --> 00:09:01,760
These all are name values.

155
00:09:01,760 --> 00:09:03,770
Whatever the name is there, right?

156
00:09:03,770 --> 00:09:05,360
You have to provide some string here.

157
00:09:05,360 --> 00:09:09,515
So you can select any one of this string from here, already there. How?

158
00:09:09,515 --> 00:09:14,225
So as of now what we need instead to state name.

159
00:09:14,225 --> 00:09:15,935
So just such somewhere, yeah,

160
00:09:15,935 --> 00:09:17,915
here we have instance state name.

161
00:09:17,915 --> 00:09:22,625
Let me take it, copy and paste it here.

162
00:09:22,625 --> 00:09:24,935
Then values.

163
00:09:24,935 --> 00:09:28,700
So what are the instances State named,

164
00:09:28,700 --> 00:09:30,020
you need a running,

165
00:09:30,020 --> 00:09:35,390
instances are pending or running and pending are running and terminated.

166
00:09:35,390 --> 00:09:38,435
So all values are there directly here itself.

167
00:09:38,435 --> 00:09:42,060
Now, I'm taking a run mean.

168
00:09:43,990 --> 00:09:48,170
Now let me take my value as running.

169
00:09:48,170 --> 00:09:53,630
Not only one value, you can provide any number of values inside of your values list.

170
00:09:53,630 --> 00:09:58,235
As of now first, let me apply the same phone and see the output.

171
00:09:58,235 --> 00:09:59,990
How many instances you are getting.

172
00:09:59,990 --> 00:10:03,320
You are going to get only one instance that is six f,

173
00:10:03,320 --> 00:10:06,455
c, six f is currently running.

174
00:10:06,455 --> 00:10:11,510
Now assume that anywhere EC2 Console you how running instances to operating centers,

175
00:10:11,510 --> 00:10:12,860
some pending state instances,

176
00:10:12,860 --> 00:10:16,550
some terminated, but I want to display running and stopped.

177
00:10:16,550 --> 00:10:18,230
Then c here it is, L,

178
00:10:18,230 --> 00:10:23,165
We have one more value stock would copy it.

179
00:10:23,165 --> 00:10:24,635
And your wireless itself,

180
00:10:24,635 --> 00:10:27,290
you can apply running values,

181
00:10:27,290 --> 00:10:30,185
sorry, earning comma, stop.

182
00:10:30,185 --> 00:10:32,510
That's no, let me save it.

183
00:10:32,510 --> 00:10:35,180
And now you're going to get three instances.

184
00:10:35,180 --> 00:10:40,265
That's now my requirement is this is one filter.

185
00:10:40,265 --> 00:10:49,050
I want to get the instances which are running and which are p2 dot micro instance type.

186
00:10:49,060 --> 00:10:54,485
Then you have to take one more filter and take name as instance pipe,

187
00:10:54,485 --> 00:10:56,630
and apply your required value there.

188
00:10:56,630 --> 00:10:59,570
So let me take one more filter here.

189
00:10:59,570 --> 00:11:02,975
Likewise, you can create any number of filters.

190
00:11:02,975 --> 00:11:05,945
So anyway, while creating your filter, first of all,

191
00:11:05,945 --> 00:11:10,805
just follow this syntax name you have to provide here, comma values.

192
00:11:10,805 --> 00:11:12,620
Values is a list.

193
00:11:12,620 --> 00:11:14,585
Take This is the syntax.

194
00:11:14,585 --> 00:11:16,775
Now name, what is your name?

195
00:11:16,775 --> 00:11:20,660
So my requirement is I need to filter the running and

196
00:11:20,660 --> 00:11:25,100
stopper instances which are under T2 dot micro instance type.

197
00:11:25,100 --> 00:11:28,220
So to get you are running and stopped.

198
00:11:28,220 --> 00:11:32,570
This is the filter. And to filter you are p2 dot micro.

199
00:11:32,570 --> 00:11:35,480
You had to take name as instance pipe.

200
00:11:35,480 --> 00:11:39,830
And here you have to provide T2 dot micro.

201
00:11:39,830 --> 00:11:41,900
Please don't get confused somewhere.

202
00:11:41,900 --> 00:11:43,460
I'm taking double quotations somewhere.

203
00:11:43,460 --> 00:11:44,540
I'm taking a single condition.

204
00:11:44,540 --> 00:11:49,360
You can take any. Today's No problem. Now save it.

205
00:11:49,360 --> 00:11:51,625
F2, apply here.

206
00:11:51,625 --> 00:11:54,130
Comma F2, you're fun comma F2.

207
00:11:54,130 --> 00:11:57,415
Now you are filtering based on your F1 and F2 filters.

208
00:11:57,415 --> 00:11:59,845
So what is a fun to get running and stopped?

209
00:11:59,845 --> 00:12:04,075
What is F2 to get T2 dot Micro now intersection part you are going to get.

210
00:12:04,075 --> 00:12:08,320
Now see the output, right?

211
00:12:08,320 --> 00:12:10,210
So this is the very,

212
00:12:10,210 --> 00:12:14,875
very important concept to collect your group of resources.

213
00:12:14,875 --> 00:12:17,560
So filters or filter method is very,

214
00:12:17,560 --> 00:12:20,410
very important on your collection object.

215
00:12:20,410 --> 00:12:26,410
K will discuss about your remaining operations on collections in the next session.

216
00:12:26,410 --> 00:12:28,610
Okay, thank you.

