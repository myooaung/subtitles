WEBVTT
ï»¿1
00:00:02.750 --> 00:00:04.455
Hyphens.

2
00:00:04.455 --> 00:00:08.700
In this video, we are going to discuss about the concepts of b2,

3
00:00:08.700 --> 00:00:12.060
a3 to work with AWS S3 service.

4
00:00:12.060 --> 00:00:15.390
See, not only for your AWS S3 service,

5
00:00:15.390 --> 00:00:19.950
if you want to work with any of your AWS service using B23,

6
00:00:19.950 --> 00:00:24.455
you ought to know the concepts of your B23. Right?

7
00:00:24.455 --> 00:00:26.434
Let me go with one-by-one.

8
00:00:26.434 --> 00:00:30.635
See, after importing B23 in your Python script,

9
00:00:30.635 --> 00:00:34.985
the very first step you have to do is you need to create a session.

10
00:00:34.985 --> 00:00:37.310
An intuition you have two types.

11
00:00:37.310 --> 00:00:40.640
One is custom session and one more is default session.

12
00:00:40.640 --> 00:00:43.370
First, let me go with the default session.

13
00:00:43.370 --> 00:00:46.970
So you will take default session whenever if you are

14
00:00:46.970 --> 00:00:51.335
running your Python moto three scraped based on IAM role.

15
00:00:51.335 --> 00:00:55.070
So we can assign some IAM role to EC2 instance.

16
00:00:55.070 --> 00:00:58.880
Or you can assign IAM role do or lambda support.

17
00:00:58.880 --> 00:01:03.005
Just assume that you are assigned IAM role to your EC2 instance.

18
00:01:03.005 --> 00:01:08.259
That means whatever the code you're running on your EC2 instance

19
00:01:08.259 --> 00:01:13.510
is based on IAM role are the time you have to take default session.

20
00:01:13.510 --> 00:01:14.920
The same way.

21
00:01:14.920 --> 00:01:17.080
Anyway, most of the cases whenever,

22
00:01:17.080 --> 00:01:20.995
if we are running some code through lambda, right?

23
00:01:20.995 --> 00:01:23.065
So we will assign some role to lambda,

24
00:01:23.065 --> 00:01:25.495
then we will execute our code, right?

25
00:01:25.495 --> 00:01:27.490
So whenever if you assign role,

26
00:01:27.490 --> 00:01:30.685
IAM role do lambda at that time, right?

27
00:01:30.685 --> 00:01:32.830
You have to take default decision.

28
00:01:32.830 --> 00:01:35.425
I mean you have to create default session.

29
00:01:35.425 --> 00:01:38.545
Then, what about customization?

30
00:01:38.545 --> 00:01:44.365
So you just assume that you're going to execute your code from local host.

31
00:01:44.365 --> 00:01:49.495
And you did not assigned any IAM role to your EC2 instance.

32
00:01:49.495 --> 00:01:53.800
And you configured the credentials of

33
00:01:53.800 --> 00:01:58.255
some IAM user on your local host with some profile names.

34
00:01:58.255 --> 00:02:00.085
So with some profile names means,

35
00:02:00.085 --> 00:02:02.860
you know, you have AWS configure command.

36
00:02:02.860 --> 00:02:10.240
So suppose if you run your analysts configure command like AWS configured space hyphen,

37
00:02:10.240 --> 00:02:12.145
hyphen profile, then some Profile Name.

38
00:02:12.145 --> 00:02:17.140
That means if you allow some multiple IAM uses credentials in your hand,

39
00:02:17.140 --> 00:02:20.740
right, to identify different IAM users.

40
00:02:20.740 --> 00:02:25.060
You are storing the credential soft different IAM users on your local host.

41
00:02:25.060 --> 00:02:29.180
By running, let me show you that command ones.

42
00:02:34.050 --> 00:02:39.400
Aws, configure, hyphen, hyphen,

43
00:02:39.400 --> 00:02:41.530
profile, some profile name.

44
00:02:41.530 --> 00:02:43.690
Let me say suppose there when Iran meant.

45
00:02:43.690 --> 00:02:46.900
Then after entering this ID will ask some credentials than

46
00:02:46.900 --> 00:02:50.110
what our the IAM user you have in your hand for that.

47
00:02:50.110 --> 00:02:53.605
What are the credentials you, how those credentials you have to pass here.

48
00:02:53.605 --> 00:02:55.870
So now to identify that credentials,

49
00:02:55.870 --> 00:02:57.250
you're taking simply this name,

50
00:02:57.250 --> 00:02:58.930
but you can take any name here.

51
00:02:58.930 --> 00:03:01.300
The only thing to identify

52
00:03:01.300 --> 00:03:05.815
your particular IAM user credentials you are giving some profile name.

53
00:03:05.815 --> 00:03:08.410
The same way you can also run AWS,

54
00:03:08.410 --> 00:03:13.180
configure, hyphen, hyphen profile, some product, right?

55
00:03:13.180 --> 00:03:16.755
Aws configure hyphen, hyphen profile.

56
00:03:16.755 --> 00:03:19.175
Let's say some tests and environment,

57
00:03:19.175 --> 00:03:25.790
not just on your local host to identify your credentials for particular IAM user,

58
00:03:25.790 --> 00:03:28.010
you're providing some Profile Name.

59
00:03:28.010 --> 00:03:30.050
And while running your Python b2,

60
00:03:30.050 --> 00:03:34.910
a3 script with what I am user access, you are going to run.

61
00:03:34.910 --> 00:03:39.230
At that time, you had to create a custom shun, right?

62
00:03:39.230 --> 00:03:42.065
So already we have seen while working with your EC2 instance.

63
00:03:42.065 --> 00:03:44.735
Now anyway, while going forward, again,

64
00:03:44.735 --> 00:03:46.145
while working with your S3,

65
00:03:46.145 --> 00:03:50.285
we will create customizations and as well as your default sessions.

66
00:03:50.285 --> 00:03:51.845
That is the very first step.

67
00:03:51.845 --> 00:03:59.405
Then second one is you have to create the world S3 console, right?

68
00:03:59.405 --> 00:04:02.750
Using either resource or client object.

69
00:04:02.750 --> 00:04:08.300
C, you are having this resource object only for some of the services.

70
00:04:08.300 --> 00:04:12.870
Already we shown that in our course, right?

71
00:04:13.300 --> 00:04:18.170
The resource is not available for each and every AWS service.

72
00:04:18.170 --> 00:04:20.975
It is only for some of the services.

73
00:04:20.975 --> 00:04:22.055
Right?

74
00:04:22.055 --> 00:04:26.720
So S3 anyway, S3 is having resource as well as client object.

75
00:04:26.720 --> 00:04:30.365
And if a client is there by default for each and every AWS service.

76
00:04:30.365 --> 00:04:31.595
Right?

77
00:04:31.595 --> 00:04:34.250
Now before going to implement the work core,

78
00:04:34.250 --> 00:04:37.640
you need to decide whether you want to go with a resource object

79
00:04:37.640 --> 00:04:41.135
or you wanted to go with client object. Right?

80
00:04:41.135 --> 00:04:42.845
There is the second step.

81
00:04:42.845 --> 00:04:47.870
Now Mehta, see these metta is nothing but just assumed that you started

82
00:04:47.870 --> 00:04:52.805
your Python moto three scream for your particular service using resource.

83
00:04:52.805 --> 00:04:58.835
And you found that some particular operation is not available with you or resource.

84
00:04:58.835 --> 00:05:00.170
Right?

85
00:05:00.170 --> 00:05:01.910
At the time you don't need to create client

86
00:05:01.910 --> 00:05:04.655
because inclined you how each and every operation,

87
00:05:04.655 --> 00:05:07.580
you started your code with resource.

88
00:05:07.580 --> 00:05:12.755
And you identified that some of the operations or whatever the operations you need,

89
00:05:12.755 --> 00:05:15.155
they are not available with your resource.

90
00:05:15.155 --> 00:05:17.585
Are the time in order to create a client object.

91
00:05:17.585 --> 00:05:19.805
You can, from resource,

92
00:05:19.805 --> 00:05:23.405
you can enter into client with the help of metta object.

93
00:05:23.405 --> 00:05:30.050
That means you can access the client operations in resource using metal object.

94
00:05:30.050 --> 00:05:32.645
Ok, suppose if you are getting confusion,

95
00:05:32.645 --> 00:05:34.745
just forget about resource on metta.

96
00:05:34.745 --> 00:05:35.945
You can always try to

97
00:05:35.945 --> 00:05:40.280
economics implementable code with client because with planed Everything is possible.

98
00:05:40.280 --> 00:05:42.290
But you need it right?

99
00:05:42.290 --> 00:05:44.780
Some number of lines here compared to resource.

100
00:05:44.780 --> 00:05:47.060
Resource will take less number of lines.

101
00:05:47.060 --> 00:05:49.745
I mean, while implementing your core.

102
00:05:49.745 --> 00:05:50.645
Right?

103
00:05:50.645 --> 00:05:52.280
These are the very important things.

104
00:05:52.280 --> 00:05:54.935
Whenever if you are going to write your Python boat with risk,

105
00:05:54.935 --> 00:05:59.300
then after that, collections, like filters.

106
00:05:59.300 --> 00:06:01.670
Anyway, the how in collections freed us.

107
00:06:01.670 --> 00:06:03.680
But basically collections are like filters.

108
00:06:03.680 --> 00:06:07.220
That means you are trying to access,

109
00:06:07.220 --> 00:06:09.620
suppose all the buckets which are there in

110
00:06:09.620 --> 00:06:13.385
your particular universe account. Yes, directly.

111
00:06:13.385 --> 00:06:19.280
You can get your all you can get your all buckets of your database.

112
00:06:19.280 --> 00:06:24.800
But sometimes I want to get only particular based on some condition.

113
00:06:24.800 --> 00:06:28.640
I need to feed her. I don't want to get all budgets.

114
00:06:28.640 --> 00:06:33.485
I want to get only some of them based on some prefix or some delimiter.

115
00:06:33.485 --> 00:06:38.085
So at the time you need to include collections in your code.

116
00:06:38.085 --> 00:06:40.105
Then wait us.

117
00:06:40.105 --> 00:06:43.660
Just assume that you are writing some Python skip through which

118
00:06:43.660 --> 00:06:47.020
you are going to create some S3 bucket off to creation of that.

119
00:06:47.020 --> 00:06:53.020
In the next line, you are writing some code to upload some bucket to your saw sorry sum,

120
00:06:53.020 --> 00:06:56.305
but some object to your S3 bucket.

121
00:06:56.305 --> 00:06:59.320
Right? Just assume that you

122
00:06:59.320 --> 00:07:02.980
executed one line through which you are creating your S3 bucket,

123
00:07:02.980 --> 00:07:04.450
enumerating the next line,

124
00:07:04.450 --> 00:07:08.095
you have a code to upload some object to or S3.

125
00:07:08.095 --> 00:07:09.325
Right?

126
00:07:09.325 --> 00:07:10.945
But while uploading,

127
00:07:10.945 --> 00:07:14.140
your S3 bucket should be there because just now only you are creating,

128
00:07:14.140 --> 00:07:16.315
just argued that it is going to take some time.

129
00:07:16.315 --> 00:07:19.785
But before completion of creation of your S3,

130
00:07:19.785 --> 00:07:23.180
you're trying to upload some object to your S3.

131
00:07:23.180 --> 00:07:26.600
Suppose while uploading your object to S3,

132
00:07:26.600 --> 00:07:30.214
just assumed that your S3 is not it created completely,

133
00:07:30.214 --> 00:07:32.060
then you will get an exception.

134
00:07:32.060 --> 00:07:36.005
That's why only during these type of situations,

135
00:07:36.005 --> 00:07:37.880
if you're trying to create something after that,

136
00:07:37.880 --> 00:07:39.365
you are trying to use that.

137
00:07:39.365 --> 00:07:41.720
So I'm trying to create S3 bucket.

138
00:07:41.720 --> 00:07:45.740
After that, I am trying to use the S3 bucket to upload some object into that.

139
00:07:45.740 --> 00:07:50.090
So whenever, if these type of cases immediately, right?

140
00:07:50.090 --> 00:07:51.830
So between these two lines,

141
00:07:51.830 --> 00:07:53.180
you have to include your waiter.

142
00:07:53.180 --> 00:07:54.890
What is the purpose of waiter means?

143
00:07:54.890 --> 00:08:00.890
The waiter will wait up to until what time of the previously you executed.

144
00:08:00.890 --> 00:08:02.690
I mean, the core which is there here no,

145
00:08:02.690 --> 00:08:04.580
that is for creation of bucket.

146
00:08:04.580 --> 00:08:08.870
So until that's creationist completed.

147
00:08:08.870 --> 00:08:11.810
That wait, wait, wait.

148
00:08:11.810 --> 00:08:19.265
So simply waiter will wait for to reach your required state based on your operation.

149
00:08:19.265 --> 00:08:22.700
So after completion of your waiter line, right, anyway,

150
00:08:22.700 --> 00:08:28.280
wait and we'll wait for some time until the S3 bucket is created, then you can upload it.

151
00:08:28.280 --> 00:08:30.080
So that is the use of waiters, very,

152
00:08:30.080 --> 00:08:32.150
very important waiters concepts.

153
00:08:32.150 --> 00:08:34.625
Then you how fascinated.

154
00:08:34.625 --> 00:08:43.775
See whenever if you're wiring your AWS service resides, right?

155
00:08:43.775 --> 00:08:48.380
By default, the normal AWS moto three APA call

156
00:08:48.380 --> 00:08:52.804
will fetch maximum either 50 or a 100 results,

157
00:08:52.804 --> 00:08:54.860
except days 34, S3,

158
00:08:54.860 --> 00:09:00.155
you will get maximum 1000 results per APA call.

159
00:09:00.155 --> 00:09:02.570
Just assume that one S3 bucket,

160
00:09:02.570 --> 00:09:05.584
I'm having 2 thousand objects.

161
00:09:05.584 --> 00:09:07.685
So if you go and write,

162
00:09:07.685 --> 00:09:12.110
stride forward a code using your client or resource object,

163
00:09:12.110 --> 00:09:15.110
that object cannot fetch all you are

164
00:09:15.110 --> 00:09:21.090
2 thousand objects with a single API call with your normal B23 script.

165
00:09:22.080 --> 00:09:24.040
Okay?

166
00:09:24.040 --> 00:09:27.010
Only client-based, not for resource, only client,

167
00:09:27.010 --> 00:09:33.580
client object cannot get all 2 thousand objects using single APA call.

168
00:09:33.580 --> 00:09:37.240
Then at that time, before making your APA calls.

169
00:09:37.240 --> 00:09:41.485
So you want to create some pages through border three only.

170
00:09:41.485 --> 00:09:45.850
So what it will do means whatever the results based on that reserves,

171
00:09:45.850 --> 00:09:47.905
it will create number of pages.

172
00:09:47.905 --> 00:09:50.845
Suppose you have 2 thousand objects in your S3.

173
00:09:50.845 --> 00:09:54.115
Now both we will create two pages automatically.

174
00:09:54.115 --> 00:09:57.025
Then first bucket, first page,

175
00:09:57.025 --> 00:09:58.705
you'll get 1000 results.

176
00:09:58.705 --> 00:10:02.515
And second page you will get one more 1000 results so that you are getting

177
00:10:02.515 --> 00:10:06.335
all 2 thousand objects using you are B23 script.

178
00:10:06.335 --> 00:10:09.125
So at the time you have to use resonators.

179
00:10:09.125 --> 00:10:13.745
Not only here guys, even while we're displaying our IAM users information, right?

180
00:10:13.745 --> 00:10:17.490
We use this past senators sam concept.

181
00:10:18.040 --> 00:10:21.860
Right? So that is the use of resonators.

182
00:10:21.860 --> 00:10:24.890
So there's these or the total concepts of your boat

183
00:10:24.890 --> 00:10:28.385
moto three to work with any AWS service.

184
00:10:28.385 --> 00:10:30.635
So anyway, right now we are going to work with history.

185
00:10:30.635 --> 00:10:34.820
That's why just I'm reminding you about this concepts.

186
00:10:34.820 --> 00:10:36.770
Okay? Okay.

187
00:10:36.770 --> 00:10:39.870
I saw thank you for watching this video.

