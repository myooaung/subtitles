WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.790
Friends here we're extending our boater

2
00:00:02.790 --> 00:00:06.090
three collections concept of resource upset to start,

3
00:00:06.090 --> 00:00:10.020
stop, and terminate your required instances at a single shorten.

4
00:00:10.020 --> 00:00:12.660
Now let me open my subline text and let me

5
00:00:12.660 --> 00:00:15.870
copy some of the steps from our previous script.

6
00:00:15.870 --> 00:00:22.980
So now here I'm displaying the available submitted on our collections object c.

7
00:00:22.980 --> 00:00:26.865
These are the available submitters on your collection upset.

8
00:00:26.865 --> 00:00:29.730
And among all these already we discussed about some of them.

9
00:00:29.730 --> 00:00:32.865
They are like all limit and filter.

10
00:00:32.865 --> 00:00:39.740
And here let me remedies all filter limit anyway,

11
00:00:39.740 --> 00:00:41.870
iterate is just a iterator object.

12
00:00:41.870 --> 00:00:43.670
It will create an iterator object.

13
00:00:43.670 --> 00:00:46.800
It is exactly Post.all operation.

14
00:00:47.110 --> 00:00:54.620
Now, my requirement is I want to start all my instances at a time.

15
00:00:54.620 --> 00:00:58.620
Then let me show you how we can do it.

16
00:00:59.170 --> 00:01:01.490
No, let me comment this line.

17
00:01:01.490 --> 00:01:04.160
Just I'm writing some print statement.

18
00:01:04.160 --> 00:01:08.039
Starting all instances.

19
00:01:09.040 --> 00:01:11.705
Then very simple.

20
00:01:11.705 --> 00:01:16.730
Just take your EC2 collections object, instances collections object.

21
00:01:16.730 --> 00:01:18.590
Then on that just passed.

22
00:01:18.590 --> 00:01:22.310
And a submitted called I submitted called start.

23
00:01:22.310 --> 00:01:22.940
That's it.

24
00:01:22.940 --> 00:01:24.200
So once it is done,

25
00:01:24.200 --> 00:01:30.800
then you are all instances or append running.

26
00:01:30.800 --> 00:01:32.210
Now let me save it.

27
00:01:32.210 --> 00:01:34.655
Before that, let me open my database console,

28
00:01:34.655 --> 00:01:37.340
see that all my incentives or in stop and state.

29
00:01:37.340 --> 00:01:40.220
Now let me run your script and see the output.

30
00:01:40.220 --> 00:01:42.365
Starting all instances.

31
00:01:42.365 --> 00:01:44.255
Now you are all instance startup and running,

32
00:01:44.255 --> 00:01:47.015
but verify it. For on your console.

33
00:01:47.015 --> 00:01:50.960
It is. They are in still in pending status.

34
00:01:50.960 --> 00:01:54.605
So after giving start action,

35
00:01:54.605 --> 00:01:58.835
if we wait some time until you were instances reach it or running status.

36
00:01:58.835 --> 00:02:02.900
Once it is reached, then you can print your required information.

37
00:02:02.900 --> 00:02:04.190
You are all instances are up and running.

38
00:02:04.190 --> 00:02:08.150
That means here you have to add a waiter C. In our previous views,

39
00:02:08.150 --> 00:02:09.800
we added weight AS,

40
00:02:09.800 --> 00:02:11.420
I mean, we discussed about waders.

41
00:02:11.420 --> 00:02:15.030
Let me open waiters script.

42
00:02:16.120 --> 00:02:20.210
And it is better to use always client waiters.

43
00:02:20.210 --> 00:02:23.600
So that's why I'm going to create a client object.

44
00:02:23.600 --> 00:02:24.395
First.

45
00:02:24.395 --> 00:02:27.860
You can create your client object.

46
00:02:27.860 --> 00:02:32.255
So now here itself I am creating my client object.

47
00:02:32.255 --> 00:02:35.760
Then I'm creating waiter.

48
00:02:41.880 --> 00:02:45.025
So after starting your instance,

49
00:02:45.025 --> 00:02:47.590
or you can create anywhere you are waiter.

50
00:02:47.590 --> 00:02:51.220
So meanwhile, let me stop my instances of course you can also apply

51
00:02:51.220 --> 00:02:55.105
your waiters for to get your instance data stuff.

52
00:02:55.105 --> 00:03:00.280
But I'm here, I'm working with just to get running status.

53
00:03:00.280 --> 00:03:01.900
So instance running.

54
00:03:01.900 --> 00:03:04.165
Now let me copy you're on more step.

55
00:03:04.165 --> 00:03:06.835
Waiter dot Wait, wait.

56
00:03:06.835 --> 00:03:09.115
You were Instance ID.

57
00:03:09.115 --> 00:03:13.150
So here you have to provide all your instance IDs,

58
00:03:13.150 --> 00:03:15.430
then you have to collect them one by one.

59
00:03:15.430 --> 00:03:24.880
So this is the option. After giving start.

60
00:03:24.880 --> 00:03:29.065
Here you have to provide all your available instance IDs.

61
00:03:29.065 --> 00:03:34.075
Then only this waiter will wait to get all your instances happened, Ernie status.

62
00:03:34.075 --> 00:03:37.990
So now what we have to do 0s before applying your waiters concert.

63
00:03:37.990 --> 00:03:41.470
First, you have to collect your all EC2 instances ID.

64
00:03:41.470 --> 00:03:43.670
Let me collect them.

65
00:03:43.920 --> 00:03:47.110
For each instance in

66
00:03:47.110 --> 00:03:53.185
EC2 Console resource object dot collection object, instances dot all.

67
00:03:53.185 --> 00:03:56.005
Then let me print it for each instance dot

68
00:03:56.005 --> 00:04:00.310
ID so that you are going to get all your EC2 instances object,

69
00:04:00.310 --> 00:04:04.435
sorry, AWS console, client object.

70
00:04:04.435 --> 00:04:06.980
What is the problem?

71
00:04:07.660 --> 00:04:11.700
Okay, AWS management console.

72
00:04:15.910 --> 00:04:18.590
Now you're getting all your instance ID.

73
00:04:18.590 --> 00:04:20.300
Let me create a list.

74
00:04:20.300 --> 00:04:29.525
So required or all instance instances ID equals to m taking a list and one by one,

75
00:04:29.525 --> 00:04:30.965
I'm appending to this list.

76
00:04:30.965 --> 00:04:34.054
So simply, instead of printing,

77
00:04:34.054 --> 00:04:37.339
what I'm doing is dot append,

78
00:04:37.339 --> 00:04:41.250
I'm creating a list which consists of all instance IDs.

79
00:04:43.690 --> 00:04:51.445
Now let me copy this variable and just provide it here. This is a list, right?

80
00:04:51.445 --> 00:04:54.895
Already our variable is also least left by directly and providing that variable.

81
00:04:54.895 --> 00:04:56.740
Now just a comment,

82
00:04:56.740 --> 00:05:03.700
un-comment this. Now, be clear.

83
00:05:03.700 --> 00:05:06.700
Now all our instance starting stopper status.

84
00:05:06.700 --> 00:05:11.755
So we are giving start action to start all our instances.

85
00:05:11.755 --> 00:05:14.890
Now, before going to start all you were

86
00:05:14.890 --> 00:05:18.805
instances you are collecting all your incense IDs because to create a waiter,

87
00:05:18.805 --> 00:05:21.475
now I created a waiter from client object.

88
00:05:21.475 --> 00:05:23.020
And for that waiter,

89
00:05:23.020 --> 00:05:24.970
I have given a list of instances ID.

90
00:05:24.970 --> 00:05:28.040
That's, you know, let me save it and run it.

91
00:05:29.160 --> 00:05:31.635
So starting all instances,

92
00:05:31.635 --> 00:05:33.350
go here and refresh you.

93
00:05:33.350 --> 00:05:34.940
Now they are in pending status.

94
00:05:34.940 --> 00:05:37.850
Once they are entering into running status,

95
00:05:37.850 --> 00:05:43.745
then you are skipped exit because your waiter will come out from your waiting station.

96
00:05:43.745 --> 00:05:49.050
So wait, just wait for that and see the output.

97
00:06:02.980 --> 00:06:05.510
You are, all instances are up and running.

98
00:06:05.510 --> 00:06:06.185
Now.

99
00:06:06.185 --> 00:06:09.395
You see that all interests are up and running.

100
00:06:09.395 --> 00:06:12.034
Now, I have a small requirement.

101
00:06:12.034 --> 00:06:18.665
My requirement is I want to start or stop or terminate only some required instances.

102
00:06:18.665 --> 00:06:20.000
So before going to do that,

103
00:06:20.000 --> 00:06:21.560
let me use some tags here.

104
00:06:21.560 --> 00:06:25.080
Suppose this is non-profits are worth.

105
00:06:25.930 --> 00:06:30.350
And this is, let say products or work.

106
00:06:30.350 --> 00:06:34.680
And this is also in non-profit server.

107
00:06:36.370 --> 00:06:43.190
Just assume that now my requirement is I want to start or stop only non-poor servers.

108
00:06:43.190 --> 00:06:45.350
I will do one thing first, I will stop them anyway.

109
00:06:45.350 --> 00:06:47.940
You can also work with even

110
00:06:47.940 --> 00:06:49.915
I'll stop option on a stock option,

111
00:06:49.915 --> 00:06:51.550
you can implement any type of script, right?

112
00:06:51.550 --> 00:06:53.920
But just I'm proceeding because already we have same steps,

113
00:06:53.920 --> 00:06:56.540
required steps with start.

114
00:06:58.320 --> 00:07:02.560
Now my requirement is I want to start only non-personal Vs.

115
00:07:02.560 --> 00:07:05.695
Suppose if I go within this way, simply EC2,

116
00:07:05.695 --> 00:07:09.415
Console resource object dot instances collection object dot star.

117
00:07:09.415 --> 00:07:12.800
It will try to start all the integers which are there here.

118
00:07:12.960 --> 00:07:19.555
And let me verify Is there any option to start only required instances with this?

119
00:07:19.555 --> 00:07:22.510
Let me open your documentation and see

120
00:07:22.510 --> 00:07:28.255
that you don't have any option here to provide your required EC2 instances,

121
00:07:28.255 --> 00:07:30.730
then how we can do it.

122
00:07:30.730 --> 00:07:33.760
So for that, if you go with the client,

123
00:07:33.760 --> 00:07:35.740
if you go with the client inclined,

124
00:07:35.740 --> 00:07:38.350
you can provide the required incentives,

125
00:07:38.350 --> 00:07:43.150
IDs to start or stop or turn Medieval instances just to go down somewhere,

126
00:07:43.150 --> 00:07:44.665
you will find your required option.

127
00:07:44.665 --> 00:07:47.560
So as I've no, I need suppose start instances,

128
00:07:47.560 --> 00:07:49.720
just click on that and open it.

129
00:07:49.720 --> 00:07:54.100
And see that here we have an option called where it

130
00:07:54.100 --> 00:08:03.890
is that we reopen

131
00:08:06.150 --> 00:08:08.410
can start instances here.

132
00:08:08.410 --> 00:08:11.350
You can probably instance IDs as a list.

133
00:08:11.350 --> 00:08:14.705
Now, here I want to provide,

134
00:08:14.705 --> 00:08:16.460
suppose if I take this client,

135
00:08:16.460 --> 00:08:19.790
start starting stances I had to poverty incense cities.

136
00:08:19.790 --> 00:08:24.290
Now here I have to provide the instances ids related with the non-personal.

137
00:08:24.290 --> 00:08:27.935
Worse, then how to collect your nonprofit service first.

138
00:08:27.935 --> 00:08:31.595
Now, let me implement a script for that.

139
00:08:31.595 --> 00:08:34.740
So let me come in this previous court.

140
00:08:34.900 --> 00:08:38.840
So guys, now my requirement is I want to start

141
00:08:38.840 --> 00:08:42.560
only nonpartisan was so before going to start you on nonprofits or worse,

142
00:08:42.560 --> 00:08:45.755
tried to collect your non-profit servers instance IDs.

143
00:08:45.755 --> 00:08:51.500
So what I'm doing is non-profits or we're servers,

144
00:08:51.500 --> 00:08:55.265
ID equals two and taking Mt,

145
00:08:55.265 --> 00:08:57.200
then I'm going to create a filter.

146
00:08:57.200 --> 00:08:58.955
So you know, we have, we already filter.

147
00:08:58.955 --> 00:09:01.370
Let me copy it where it is.

148
00:09:01.370 --> 00:09:03.210
Filter.

149
00:09:04.750 --> 00:09:10.070
Now here you need to create a filter with a small change.

150
00:09:10.070 --> 00:09:13.205
Now, this tag name,

151
00:09:13.205 --> 00:09:16.910
so tag colon name for remaining dirty hunger,

152
00:09:16.910 --> 00:09:18.980
poverty on him whenever he felt working on tags,

153
00:09:18.980 --> 00:09:20.585
you have to take tag colon name,

154
00:09:20.585 --> 00:09:22.175
and then what is your value?

155
00:09:22.175 --> 00:09:24.395
So I want to walk with non-profit rate.

156
00:09:24.395 --> 00:09:26.900
So non-protein, these non underscore part,

157
00:09:26.900 --> 00:09:30.210
let me write non underscore product.

158
00:09:31.210 --> 00:09:39.065
Now let me try to use your collection object on the word in-situ

159
00:09:39.065 --> 00:09:42.815
resource object C for each instance in

160
00:09:42.815 --> 00:09:48.470
your institute resource console dot instancing dot filter.

161
00:09:48.470 --> 00:09:51.890
Then apply your filter scores to your phone.

162
00:09:51.890 --> 00:09:52.865
That's it.

163
00:09:52.865 --> 00:09:54.605
But let me try to print them.

164
00:09:54.605 --> 00:09:58.110
Each instance dot id first after the output.

165
00:09:58.420 --> 00:10:09.905
What happened? Okay?

166
00:10:09.905 --> 00:10:13.790
Instances. Fine.

167
00:10:13.790 --> 00:10:15.920
Now you are getting two instances.

168
00:10:15.920 --> 00:10:18.305
There are 6F and C4. See that?

169
00:10:18.305 --> 00:10:19.730
67

170
00:10:19.730 --> 00:10:21.875
Non port C4 is also non-product.

171
00:10:21.875 --> 00:10:23.840
I mean, now we are able to get

172
00:10:23.840 --> 00:10:27.305
your required non-profits animals by using fried or concept.

173
00:10:27.305 --> 00:10:29.930
Now let me add this,

174
00:10:29.930 --> 00:10:33.605
append it to a list of servers IDs,

175
00:10:33.605 --> 00:10:39.710
dot append. That's it.

176
00:10:39.710 --> 00:10:42.665
Now here, I'm trying to collect

177
00:10:42.665 --> 00:10:47.555
my non-profit servers using collection concept of your resource object.

178
00:10:47.555 --> 00:10:52.505
But same thing you can also get by using your client also.

179
00:10:52.505 --> 00:10:55.070
But there, there is no collections concept,

180
00:10:55.070 --> 00:11:00.290
but you can apply fetus directly for your work method which is there on your client.

181
00:11:00.290 --> 00:11:03.350
Let me show you that. So non ports are worse IDs.

182
00:11:03.350 --> 00:11:06.650
So let me differentiate output.

183
00:11:06.650 --> 00:11:09.305
So you can go to any, anyone of that.

184
00:11:09.305 --> 00:11:11.990
Now what I am saying is whatever the output you are getting

185
00:11:11.990 --> 00:11:14.735
that output you can also get from your client object.

186
00:11:14.735 --> 00:11:16.685
So already how client object, right?

187
00:11:16.685 --> 00:11:18.995
C, Let me do that.

188
00:11:18.995 --> 00:11:28.325
One thing. Describe instances option is there with your client.

189
00:11:28.325 --> 00:11:37.040
If you remember that in the reservations,

190
00:11:37.040 --> 00:11:38.780
if you take in reservations,

191
00:11:38.780 --> 00:11:48.100
you are going to get not take that as

192
00:11:48.100 --> 00:11:57.715
a list and take one by one for each item in.

193
00:11:57.715 --> 00:11:59.380
But here you need to do a number of steps.

194
00:11:59.380 --> 00:12:00.565
Don't say nothing is that.

195
00:12:00.565 --> 00:12:04.370
So if I print each item post-order output what you are getting.

196
00:12:05.340 --> 00:12:10.900
Each item is also a dictionary in that if you take instances,

197
00:12:10.900 --> 00:12:13.240
that is your required information,

198
00:12:13.240 --> 00:12:16.570
that's why what I am doing is simply and that incentives,

199
00:12:16.570 --> 00:12:19.220
they'll just see that.

200
00:12:20.910 --> 00:12:24.895
Now this is a list. Again, how to take one more for loop.

201
00:12:24.895 --> 00:12:26.830
But if you go with your resource,

202
00:12:26.830 --> 00:12:30.010
you don't need to go with two times a for loop.

203
00:12:30.010 --> 00:12:33.624
So for each instance in newer, each item,

204
00:12:33.624 --> 00:12:40.555
let me print it for each instance dot somewhere you will get your instance ID.

205
00:12:40.555 --> 00:12:41.830
Image id.

206
00:12:41.830 --> 00:12:44.510
Yeah, here you how Instance ID?

207
00:12:53.640 --> 00:12:55.345
That's it.

208
00:12:55.345 --> 00:12:58.640
Now let me save it and run it.

209
00:13:02.310 --> 00:13:05.710
See the output you are getting three instances,

210
00:13:05.710 --> 00:13:07.545
but I need only,

211
00:13:07.545 --> 00:13:11.165
I need only non-profit instances,

212
00:13:11.165 --> 00:13:12.830
then you can apply this filter here.

213
00:13:12.830 --> 00:13:15.140
Same concept, whatever he has syntax here,

214
00:13:15.140 --> 00:13:21.240
full disk that filters you can apply here as an argument that's nothing is there.

215
00:13:21.850 --> 00:13:30.035
See that? Now? Let me come in here.

216
00:13:30.035 --> 00:13:31.880
If you want to go with your resource object,

217
00:13:31.880 --> 00:13:35.610
you can go or else even it can go with the one.

218
00:13:36.850 --> 00:13:40.020
You weren't client object.

219
00:13:40.330 --> 00:13:47.490
Let me take but the thing is.

220
00:13:48.820 --> 00:13:50.990
If you want to start,

221
00:13:50.990 --> 00:13:54.350
your particular instance is required in concert,

222
00:13:54.350 --> 00:13:55.820
then there is no option. You are resource.

223
00:13:55.820 --> 00:13:57.875
That's why we are working with the client.

224
00:13:57.875 --> 00:14:00.140
So in case if you are getting confusion,

225
00:14:00.140 --> 00:14:03.570
always tried to work with the client only, no problem.

226
00:14:13.030 --> 00:14:19.550
Okay, now let me print you are non-profit instance IDs.

227
00:14:19.550 --> 00:14:21.185
Observe the output.

228
00:14:21.185 --> 00:14:23.330
What happened if one is not defined?

229
00:14:23.330 --> 00:14:26.340
Yeah, I think we commentary, right?

230
00:14:34.560 --> 00:14:38.995
And now we are getting our required non-point instance cities.

231
00:14:38.995 --> 00:14:40.870
Now in your client itself.

232
00:14:40.870 --> 00:14:44.350
Yeah, one more thing I wanted to show you and your client to describe

233
00:14:44.350 --> 00:14:48.955
instances there you can apply describe tags,

234
00:14:48.955 --> 00:14:51.520
each and every option differently is there with your plane.

235
00:14:51.520 --> 00:14:53.800
If you are getting confusion with resource on client,

236
00:14:53.800 --> 00:14:56.830
always try to work with client only see that anywhere.

237
00:14:56.830 --> 00:15:00.370
Describe instances we have fetus that filters we apply now.

238
00:15:00.370 --> 00:15:07.480
That fine. Now client.read starting stances than intensive IDs as a list.

239
00:15:07.480 --> 00:15:10.180
Now what I will do is I will copy this.

240
00:15:10.180 --> 00:15:11.995
Come here.

241
00:15:11.995 --> 00:15:21.610
Now, let me try to take your EC2 client dot start instances.

242
00:15:21.610 --> 00:15:24.350
And here you can provide your instances IDs already.

243
00:15:24.350 --> 00:15:26.155
How are you or incidence rate is as a list.

244
00:15:26.155 --> 00:15:27.610
So you have to provide as a list.

245
00:15:27.610 --> 00:15:31.615
That list is there already with this variable that just provide that.

246
00:15:31.615 --> 00:15:36.865
That's a, anyway, you need waiters right already how beta's with respect to client.

247
00:15:36.865 --> 00:15:40.630
So always try to use waiters with respect to client only.

248
00:15:40.630 --> 00:15:43.280
That is the best practice.

249
00:15:45.030 --> 00:15:54.170
Waiters then beta dot weight instances IDs.

250
00:15:57.640 --> 00:16:01.985
So instance IDs are non-profits or we're id.

251
00:16:01.985 --> 00:16:04.910
So here just I am writing for our understanding purpose,

252
00:16:04.910 --> 00:16:08.520
print starting

253
00:16:09.010 --> 00:16:15.575
instances with IDs off.

254
00:16:15.575 --> 00:16:19.265
So whatever the non-protein since IDs are there now after these,

255
00:16:19.265 --> 00:16:21.450
just try to write print.

256
00:16:22.960 --> 00:16:29.700
You were in non-profit instances or running.

257
00:16:30.250 --> 00:16:33.245
Now, see your console ones.

258
00:16:33.245 --> 00:16:35.270
Now all infants are in stopper status,

259
00:16:35.270 --> 00:16:37.985
but we are trying to start non-point instances only.

260
00:16:37.985 --> 00:16:40.200
No, let me run this.

261
00:16:40.720 --> 00:16:42.845
It is taking some time.

262
00:16:42.845 --> 00:16:44.465
You have to wait for that.

263
00:16:44.465 --> 00:16:46.235
And friends One more thing.

264
00:16:46.235 --> 00:16:50.885
See sometimes you are waiter may not

265
00:16:50.885 --> 00:16:57.995
work to reach your insight as to running status because claimed waiter wait,

266
00:16:57.995 --> 00:16:59.780
wait maximum ten minutes in case you,

267
00:16:59.780 --> 00:17:01.730
for instances taking more than ten meters,

268
00:17:01.730 --> 00:17:05.060
then definitely it will get it will throw an exception.

269
00:17:05.060 --> 00:17:06.440
So how to handle exceptions?

270
00:17:06.440 --> 00:17:08.435
We'll discuss. As of now,

271
00:17:08.435 --> 00:17:09.950
we are fine with ten minutes.

272
00:17:09.950 --> 00:17:12.185
That's why I'm using this ten minutes of time.

273
00:17:12.185 --> 00:17:14.885
Now go to your console and refresh it.

274
00:17:14.885 --> 00:17:18.650
See that now only non-personal sought running, that's it.

275
00:17:18.650 --> 00:17:21.965
That's why your script has been exited.

276
00:17:21.965 --> 00:17:23.915
So in this way,

277
00:17:23.915 --> 00:17:30.545
you can apply your remaining options on anywhere collections.

278
00:17:30.545 --> 00:17:33.125
So these are the submitters on your collections, right?

279
00:17:33.125 --> 00:17:36.860
So if you want to monitor unmonitored and don't worry about pay sizes

280
00:17:36.860 --> 00:17:40.955
and pages will discuss these two concepts in our paginated concert.

281
00:17:40.955 --> 00:17:43.655
So if you're under create tags, we can create tags.

282
00:17:43.655 --> 00:17:44.705
That's it.

283
00:17:44.705 --> 00:17:49.775
So create tax is there with your resource as well as claimed it can go anyone of that.

284
00:17:49.775 --> 00:17:52.430
Anyway, while implementing over different types of scripts,

285
00:17:52.430 --> 00:17:54.620
we will see different options so that you will be good

286
00:17:54.620 --> 00:17:58.069
with all these submitters of your collections.

287
00:17:58.069 --> 00:18:00.450
Okay, thank you.

