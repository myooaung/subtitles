1
00:00:00,000 --> 00:00:03,420
Friends here we are implementing simple Python, Bhutto,

2
00:00:03,420 --> 00:00:06,645
three squared, four EC2 instance Discord is great.

3
00:00:06,645 --> 00:00:09,480
I mean, after running or Python bottled three scraped,

4
00:00:09,480 --> 00:00:14,160
I want to get a CSV file which consists of your EC2 instances information.

5
00:00:14,160 --> 00:00:19,935
Let me open my pre-defined template format for my inventory script.

6
00:00:19,935 --> 00:00:23,040
C that suppose after running Python script,

7
00:00:23,040 --> 00:00:25,140
it has to fill this data.

8
00:00:25,140 --> 00:00:27,330
So I need to get some serial number.

9
00:00:27,330 --> 00:00:29,010
How many instances you are having.

10
00:00:29,010 --> 00:00:31,245
Then Instance ID, instance type.

11
00:00:31,245 --> 00:00:33,390
What is our teacher for that? What is the lunchtime?

12
00:00:33,390 --> 00:00:34,485
I mean, when it was launched,

13
00:00:34,485 --> 00:00:36,460
then what is a private API for that?

14
00:00:36,460 --> 00:00:38,990
Likewise, you can take any number of parameters.

15
00:00:38,990 --> 00:00:41,570
Just for example, I have taken few of them.

16
00:00:41,570 --> 00:00:44,450
Now, I want to implement this Python Buddha.

17
00:00:44,450 --> 00:00:46,055
The risk of using resource,

18
00:00:46,055 --> 00:00:48,005
you just try with the client.

19
00:00:48,005 --> 00:00:49,010
Now.

20
00:00:49,010 --> 00:00:51,230
So let me take my steps.

21
00:00:51,230 --> 00:00:52,700
So already how some steps here?

22
00:00:52,700 --> 00:00:55,070
So I want to implement a discovery script.

23
00:00:55,070 --> 00:00:56,435
I mean Finally I want,

24
00:00:56,435 --> 00:00:58,580
I want to export my data into csv file.

25
00:00:58,580 --> 00:01:00,485
That's why I'm putting CSV.

26
00:01:00,485 --> 00:01:04,340
Now from your resource object,

27
00:01:04,340 --> 00:01:07,025
you know how to display your all instances.

28
00:01:07,025 --> 00:01:14,240
See for each instance in your EC2 Console resource object dot instances, not all.

29
00:01:14,240 --> 00:01:19,620
Then simply printing over each first appear at the output.

30
00:01:20,590 --> 00:01:23,705
See that I have this many number of instances.

31
00:01:23,705 --> 00:01:25,985
Let me open my, yeah, one more thing.

32
00:01:25,985 --> 00:01:28,440
I will take some county here.

33
00:01:31,450 --> 00:01:38,510
So after displaying just I want to increase my count. Now, draw the output.

34
00:01:38,510 --> 00:01:41,555
So suppose six instances are there,

35
00:01:41,555 --> 00:01:44,765
but some of them already, already terminated instances.

36
00:01:44,765 --> 00:01:48,200
Let me show you that only two instance are up and running.

37
00:01:48,200 --> 00:01:49,250
Fine.

38
00:01:49,250 --> 00:01:51,830
Now, our requirement is we need to

39
00:01:51,830 --> 00:01:55,560
get some information of each and every instance like this.

40
00:01:55,570 --> 00:02:01,340
Now, if you observe each and everything is one instance object.

41
00:02:01,340 --> 00:02:06,810
Now if you open your official documentation, let me open that.

42
00:02:12,670 --> 00:02:17,525
Go to your particular service,

43
00:02:17,525 --> 00:02:20,420
ec2 service and the selective work.

44
00:02:20,420 --> 00:02:23,225
Yeah. Ec2 service.

45
00:02:23,225 --> 00:02:27,095
See after displaying your each, every,

46
00:02:27,095 --> 00:02:28,670
each and every instance from

47
00:02:28,670 --> 00:02:32,210
this collection of all instances you are getting some object.

48
00:02:32,210 --> 00:02:34,445
This is like one instance object.

49
00:02:34,445 --> 00:02:36,440
Now, on your instance of that,

50
00:02:36,440 --> 00:02:38,030
what are the available operations?

51
00:02:38,030 --> 00:02:40,880
You can see with the help of D-I-R of each operation.

52
00:02:40,880 --> 00:02:43,025
Or else, if you observe here,

53
00:02:43,025 --> 00:02:45,320
there is a instance operation.

54
00:02:45,320 --> 00:02:47,000
This is nothing but your instance object.

55
00:02:47,000 --> 00:02:50,750
Now on this object you have this many number of operations.

56
00:02:50,750 --> 00:02:55,265
You can go here and you can search your required operation on each and every instance.

57
00:02:55,265 --> 00:02:57,230
Now as off, now whatever I want,

58
00:02:57,230 --> 00:02:59,375
I already have a output for that.

59
00:02:59,375 --> 00:03:08,840
So let me take this Nazi,

60
00:03:08,840 --> 00:03:12,120
nor let me save it and run it and observe the output.

61
00:03:12,610 --> 00:03:16,250
Forget some of the incentives or I mean,

62
00:03:16,250 --> 00:03:17,735
10 million instances gone.

63
00:03:17,735 --> 00:03:21,905
Yeah, now we have one time metered instances until running instances, but no problem.

64
00:03:21,905 --> 00:03:23,540
Now for tabulated in Kansas,

65
00:03:23,540 --> 00:03:26,315
you don't have any IP, that's why you're getting None.

66
00:03:26,315 --> 00:03:30,590
See that instance object then

67
00:03:30,590 --> 00:03:35,390
your ID type architecture when it was a launch and what is the IBM does.

68
00:03:35,390 --> 00:03:37,850
Likewise, you can take any number of parameters

69
00:03:37,850 --> 00:03:40,445
which you need for your distorted purpose.

70
00:03:40,445 --> 00:03:44,030
Now I want to export this data into csv file then.

71
00:03:44,030 --> 00:03:46,595
So let me show you.

72
00:03:46,595 --> 00:03:53,580
I want to create this inventory with this name.

73
00:03:53,770 --> 00:03:59,105
Then. I want to create a CSE writer object.

74
00:03:59,105 --> 00:04:00,695
Whether it'll, I'm giving steps.

75
00:04:00,695 --> 00:04:03,695
These are from your Python, basic Python scripting.

76
00:04:03,695 --> 00:04:09,420
Now I need, these are the parameters in my CSV file.

77
00:04:09,550 --> 00:04:14,160
Now I want to export the data into csv.

78
00:04:19,660 --> 00:04:25,650
Then finally I need to close my opened object.

79
00:04:30,580 --> 00:04:34,530
That's now let me save it and run it.

80
00:04:35,860 --> 00:04:41,000
Now let me go to my location where I see that this is the inventory info.

81
00:04:41,000 --> 00:04:42,830
Let me open it and see the output.

82
00:04:42,830 --> 00:04:46,580
So automatically you created CSV file report,

83
00:04:46,580 --> 00:04:49,190
which consists of your required parameters,

84
00:04:49,190 --> 00:04:53,540
not only CSV file, you can create XL seats if you have some XLR DSL,

85
00:04:53,540 --> 00:04:55,430
WT modules on your host,

86
00:04:55,430 --> 00:04:57,215
I mean with your Python.

87
00:04:57,215 --> 00:05:00,245
So as often I don't have them because they are not the default models, right?

88
00:05:00,245 --> 00:05:02,480
So I used simply CSV module,

89
00:05:02,480 --> 00:05:07,265
but it is a better way to use CSV module to create your report.

90
00:05:07,265 --> 00:05:12,845
So you just try with client absurd to get all these informations.

91
00:05:12,845 --> 00:05:15,965
So suppose if I want to get volume ID,

92
00:05:15,965 --> 00:05:18,740
let you open your documentation.

93
00:05:18,740 --> 00:05:23,945
For instance. You don't have any option to get volume ID.

94
00:05:23,945 --> 00:05:26,210
That's why he just go with the client.

95
00:05:26,210 --> 00:05:28,295
Object to get your volume mighty.

96
00:05:28,295 --> 00:05:31,325
See, my requirement is here I need to add one more parameter.

97
00:05:31,325 --> 00:05:35,840
Suppose volume ID I need what is the volume attach you for this.

98
00:05:35,840 --> 00:05:38,855
But as of now using resource object,

99
00:05:38,855 --> 00:05:42,965
you are not able to get the volume IID from these options.

100
00:05:42,965 --> 00:05:46,805
There is no option to get volume IT from your resource instance object.

101
00:05:46,805 --> 00:05:49,850
That's why he just tried to walk with client.

102
00:05:49,850 --> 00:05:53,300
Not sweet inclined you how Definitely you allow each and every option.

103
00:05:53,300 --> 00:05:55,295
That's okay.

104
00:05:55,295 --> 00:05:56,790
Thank you.

