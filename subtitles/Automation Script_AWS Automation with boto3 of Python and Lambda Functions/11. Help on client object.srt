1
00:00:00,000 --> 00:00:05,370
Friends here our concept is how to implement Python Bhutto three escapes using

2
00:00:05,370 --> 00:00:08,460
client object C. We know that we can implement

3
00:00:08,460 --> 00:00:12,420
python both risk using either client or resource object.

4
00:00:12,420 --> 00:00:16,950
And client object is available for each and every service of your AWS.

5
00:00:16,950 --> 00:00:20,070
So here we are going to show you help

6
00:00:20,070 --> 00:00:23,460
to use client object in your Python moto three skips.

7
00:00:23,460 --> 00:00:25,035
Let me open my diagonal.

8
00:00:25,035 --> 00:00:27,345
So here I am working from Windows Terminal,

9
00:00:27,345 --> 00:00:30,465
but same steps you can also follow on your Linux terminal.

10
00:00:30,465 --> 00:00:32,350
Let me open this script.

11
00:00:32,350 --> 00:00:35,165
First. Let me import Bhutto three.

12
00:00:35,165 --> 00:00:40,715
Now, see if you want to enter into any of your AWS service.

13
00:00:40,715 --> 00:00:45,710
You have to enter into that service from AWS management console.

14
00:00:45,710 --> 00:00:49,475
So first I'm going to create AWS management console.

15
00:00:49,475 --> 00:00:51,830
Of course, you can also go with the default session,

16
00:00:51,830 --> 00:00:54,035
but I'm going to create customer attrition.

17
00:00:54,035 --> 00:00:58,130
So AWS management console session or object equals

18
00:00:58,130 --> 00:01:02,720
to simply Bhutto 3.Now session, session.

19
00:01:02,720 --> 00:01:06,845
Now in your hand you how you were AWS management console.

20
00:01:06,845 --> 00:01:10,805
So I created this epidermis management console with my root credentials.

21
00:01:10,805 --> 00:01:14,900
Of course, you can also go with your Butler IAM credential.

22
00:01:14,900 --> 00:01:18,215
But I want to work with the different services using this Python script.

23
00:01:18,215 --> 00:01:20,450
That's why I'm using Profile Name as root.

24
00:01:20,450 --> 00:01:23,239
I mean, I'm working with the root credentials.

25
00:01:23,239 --> 00:01:26,480
Now you how your AWS management console in your hand.

26
00:01:26,480 --> 00:01:33,665
Suppose I want to walk with IAM EC2 and S3.

27
00:01:33,665 --> 00:01:38,555
Then I how to create your IAM EC2 and S3 consoles in your script.

28
00:01:38,555 --> 00:01:41,195
So let me create my IAM console.

29
00:01:41,195 --> 00:01:42,995
And here we are working with the client.

30
00:01:42,995 --> 00:01:47,540
That's why I'm going to create I am console using client equals two.

31
00:01:47,540 --> 00:01:54,755
So I am console using client object equals to simply from your AWS management console,

32
00:01:54,755 --> 00:01:59,345
use client method, the opposite service name.

33
00:01:59,345 --> 00:02:01,160
So I wanted to work with IAM,

34
00:02:01,160 --> 00:02:02,870
then provide us some region name.

35
00:02:02,870 --> 00:02:04,850
If in case if you don't provide any region name,

36
00:02:04,850 --> 00:02:10,640
it will consider from your config file default region name it will select.

37
00:02:10,640 --> 00:02:15,200
Now, I want to work with EC2 and S3 also.

38
00:02:15,200 --> 00:02:18,275
So you have to create your AC3 EC2,

39
00:02:18,275 --> 00:02:23,225
and then yes, three console objects using client.

40
00:02:23,225 --> 00:02:30,210
So just to modify the names in C2.

41
00:02:30,670 --> 00:02:33,440
So instead of IAM,

42
00:02:33,440 --> 00:02:35,825
so this is now easy to console object.

43
00:02:35,825 --> 00:02:37,640
This is S3 console object.

44
00:02:37,640 --> 00:02:39,200
Now in our hand,

45
00:02:39,200 --> 00:02:41,135
how I am console object,

46
00:02:41,135 --> 00:02:44,090
EC2, Console object, then S3, console opposite.

47
00:02:44,090 --> 00:02:46,235
Then what is your requirement?

48
00:02:46,235 --> 00:02:50,825
Suppose I want to display all my IAM users,

49
00:02:50,825 --> 00:02:54,755
all EC2 instances, and then all buckets.

50
00:02:54,755 --> 00:02:57,590
Then how you can implement your logic from here.

51
00:02:57,590 --> 00:02:59,930
As of now you are on,

52
00:02:59,930 --> 00:03:04,970
I am console absurd or on EC2 Console object or S3 console object.

53
00:03:04,970 --> 00:03:11,750
Let me take list all IAM users using client object.

54
00:03:11,750 --> 00:03:12,890
That's it.

55
00:03:12,890 --> 00:03:17,465
I don't know what is the next step of how to do then how you can implement.

56
00:03:17,465 --> 00:03:19,939
I am on IAM console,

57
00:03:19,939 --> 00:03:23,270
but how I can list using your Python scripts.

58
00:03:23,270 --> 00:03:26,250
So first open a web browser.

59
00:03:26,380 --> 00:03:30,815
I bought O3 documentation.

60
00:03:30,815 --> 00:03:36,530
Then open your first a link moto three related documentation.

61
00:03:36,530 --> 00:03:39,740
Then goto here, available services.

62
00:03:39,740 --> 00:03:44,000
Then what is your required every service I am,

63
00:03:44,000 --> 00:03:47,490
then go to down somewhere you will find I am.

64
00:03:49,600 --> 00:03:51,350
I am.

65
00:03:51,350 --> 00:03:55,865
So using client object we how to implement then select the client.

66
00:03:55,865 --> 00:03:59,615
Right-click open new link client object.

67
00:03:59,615 --> 00:04:02,015
So we already created this client object.

68
00:04:02,015 --> 00:04:05,735
This is like your IAM console using claimed,

69
00:04:05,735 --> 00:04:07,730
we already created these steps.

70
00:04:07,730 --> 00:04:10,685
So those are the steps inputting Bhutto three,

71
00:04:10,685 --> 00:04:12,320
creating AWS management console,

72
00:04:12,320 --> 00:04:14,720
then I am console client.

73
00:04:14,720 --> 00:04:18,110
Now this is equals to client here

74
00:04:18,110 --> 00:04:22,520
because official documentation is with respect to default session.

75
00:04:22,520 --> 00:04:23,945
That's why I don't get confused.

76
00:04:23,945 --> 00:04:26,645
These two steps already we've done in terms of three steps.

77
00:04:26,645 --> 00:04:28,655
First step, second step, three step.

78
00:04:28,655 --> 00:04:31,670
Now we have this asic client for IAM.

79
00:04:31,670 --> 00:04:35,600
Then if you see immediately in the next line,

80
00:04:35,600 --> 00:04:39,200
there are these are available methods.

81
00:04:39,200 --> 00:04:41,614
Then what is your requirement?

82
00:04:41,614 --> 00:04:44,060
I want to list all my aim users.

83
00:04:44,060 --> 00:04:46,850
First of all, just to go with each and every option,

84
00:04:46,850 --> 00:04:49,505
just read them somewhere,

85
00:04:49,505 --> 00:04:51,485
you will find your required option here.

86
00:04:51,485 --> 00:04:56,075
Definitely, there is no doubt in that definitely you were option will be available here.

87
00:04:56,075 --> 00:05:00,680
So our option as of no list IAM users, right?

88
00:05:00,680 --> 00:05:02,525
See that somewhere listed group,

89
00:05:02,525 --> 00:05:06,274
groups and list roles and L2 users.

90
00:05:06,274 --> 00:05:13,040
Just click on that list users and it lists users is taking some arguments as of no,

91
00:05:13,040 --> 00:05:14,330
don't worry about arguments.

92
00:05:14,330 --> 00:05:17,270
We will discuss about it right now.

93
00:05:17,270 --> 00:05:19,010
See simply, you are,

94
00:05:19,010 --> 00:05:22,685
I am console client object dot L2 users,

95
00:05:22,685 --> 00:05:24,755
and it is taking some arguments.

96
00:05:24,755 --> 00:05:26,465
Don't worry about arguments.

97
00:05:26,465 --> 00:05:28,850
Let me show you the output for that.

98
00:05:28,850 --> 00:05:30,935
So directly I am printing.

99
00:05:30,935 --> 00:05:33,545
You can take, yeah,

100
00:05:33,545 --> 00:05:36,725
let me show you that first IAM console,

101
00:05:36,725 --> 00:05:39,185
client dot, what is the operation?

102
00:05:39,185 --> 00:05:44,465
Simply L2 users, that's a list to users. That's it.

103
00:05:44,465 --> 00:05:46,820
Now this will do some output directly.

104
00:05:46,820 --> 00:05:49,985
You can print it out, or you can store that output into a variable.

105
00:05:49,985 --> 00:05:52,985
So I am taking that as a response.

106
00:05:52,985 --> 00:05:56,585
So you know, documents you how response you can take any variable.

107
00:05:56,585 --> 00:05:58,325
There is no restriction for this.

108
00:05:58,325 --> 00:06:01,445
Then let me printed that response.

109
00:06:01,445 --> 00:06:04,310
So directly you can print or you can store,

110
00:06:04,310 --> 00:06:07,445
you are outputting via variable called response and you can print that.

111
00:06:07,445 --> 00:06:09,710
So let me save this.

112
00:06:09,710 --> 00:06:15,740
Python held on client object dot p way and see the output.

113
00:06:15,740 --> 00:06:20,720
You are getting some output that is in terms of dictionary, right?

114
00:06:20,720 --> 00:06:24,170
Not only for the IAM service,

115
00:06:24,170 --> 00:06:25,670
for each and every service,

116
00:06:25,670 --> 00:06:28,460
only the first-level operation is not operation.

117
00:06:28,460 --> 00:06:33,800
I mean, let me show you that from your IAM console client object,

118
00:06:33,800 --> 00:06:35,930
you are doing some dot operation only.

119
00:06:35,930 --> 00:06:40,370
This is upset on this object you are having first-level operation, has dot operation.

120
00:06:40,370 --> 00:06:45,065
After that, definitely you will get your output as a in terms of Dictionary.

121
00:06:45,065 --> 00:06:49,040
What we are getting here, victory.

122
00:06:49,040 --> 00:06:52,745
Even you don't need to print and to see these response

123
00:06:52,745 --> 00:06:56,210
in official document itself will have a output also.

124
00:06:56,210 --> 00:06:58,100
So to list a user support,

125
00:06:58,100 --> 00:06:59,270
this is the syntax.

126
00:06:59,270 --> 00:07:05,165
If you go down, you're also having response, response syntax.

127
00:07:05,165 --> 00:07:08,480
You're going to get your response in this way.

128
00:07:08,480 --> 00:07:13,385
See that? So in this output you are having,

129
00:07:13,385 --> 00:07:14,450
this is a dictionary, right?

130
00:07:14,450 --> 00:07:19,970
Mixture remains key and its value key value representation.

131
00:07:19,970 --> 00:07:22,370
Key-value paper presentation, right?

132
00:07:22,370 --> 00:07:24,110
So I don't want,

133
00:07:24,110 --> 00:07:25,625
suppose these undesired self, No,

134
00:07:25,625 --> 00:07:27,530
I need only uses information.

135
00:07:27,530 --> 00:07:32,780
Then just take your output instead of getting response

136
00:07:32,780 --> 00:07:39,740
directly just in terms of use key as users and see the output.

137
00:07:39,740 --> 00:07:42,560
Now from this entire output, from this entire dictionary,

138
00:07:42,560 --> 00:07:45,635
I want these users value.

139
00:07:45,635 --> 00:07:51,030
That's why I'm taking this as my key so that I will get this as my value right.

140
00:07:51,970 --> 00:08:00,635
Now, see that, see the output users.

141
00:08:00,635 --> 00:08:05,675
Now this user sees it does list, list.

142
00:08:05,675 --> 00:08:08,135
In this list, if you observe, again,

143
00:08:08,135 --> 00:08:11,300
the first value is one dictionary up to this,

144
00:08:11,300 --> 00:08:13,775
this is one big, sorry, second one is second dictionary.

145
00:08:13,775 --> 00:08:16,680
Anyway, you how in this list two values.

146
00:08:16,900 --> 00:08:20,300
Now from each value I need only username.

147
00:08:20,300 --> 00:08:22,610
So from list, I wanted to separate,

148
00:08:22,610 --> 00:08:24,050
foster these first two value,

149
00:08:24,050 --> 00:08:27,170
then second value, then you have to use loops for loop.

150
00:08:27,170 --> 00:08:29,855
Now let me take for low.

151
00:08:29,855 --> 00:08:33,230
So instead of printing that Italy, this response,

152
00:08:33,230 --> 00:08:36,650
what I'm doing is from that response I'm taking for loop.

153
00:08:36,650 --> 00:08:40,460
For each item.

154
00:08:40,460 --> 00:08:43,850
In response, you can take any variable, right?

155
00:08:43,850 --> 00:08:46,985
I mean here each item you nothing but any variable.

156
00:08:46,985 --> 00:08:51,515
Then simply print it, we're each item.

157
00:08:51,515 --> 00:08:52,190
That's it.

158
00:08:52,190 --> 00:08:56,765
Let me save it and run it and see the output.

159
00:08:56,765 --> 00:09:03,170
Here. I forgot to close with one square brace,

160
00:09:03,170 --> 00:09:04,680
bracket,

161
00:09:10,690 --> 00:09:15,050
o, extra parenthesis.

162
00:09:15,050 --> 00:09:21,150
That fine. Now see the output.

163
00:09:21,190 --> 00:09:24,860
You are getting each item separately.

164
00:09:24,860 --> 00:09:26,660
Now each item is a dictionary.

165
00:09:26,660 --> 00:09:29,870
Whatever the, each item you are printing, that is a dictionary.

166
00:09:29,870 --> 00:09:31,650
See that?

167
00:09:35,380 --> 00:09:37,655
This each item you are printing,

168
00:09:37,655 --> 00:09:38,870
this each item is a dictionary,

169
00:09:38,870 --> 00:09:40,640
but from these each item,

170
00:09:40,640 --> 00:09:42,635
I need only username.

171
00:09:42,635 --> 00:09:44,585
Then use one more key.

172
00:09:44,585 --> 00:09:49,940
See that instead of directly printing you are each item then print.

173
00:09:49,940 --> 00:09:52,970
Here with respect to C0, that is the dictionary,

174
00:09:52,970 --> 00:09:56,630
each item is a dictionary, then I need only user name from the dictionary.

175
00:09:56,630 --> 00:10:02,090
That's a, that's where

176
00:10:02,090 --> 00:10:07,970
you're getting your all am users which are there in your AWS account. That's it.

177
00:10:07,970 --> 00:10:12,035
This is the simple help to use for your IAM.

178
00:10:12,035 --> 00:10:13,925
Just to list a users.

179
00:10:13,925 --> 00:10:15,935
We have lot of operations, okay,

180
00:10:15,935 --> 00:10:19,955
we'll go with our different different operations while going forward.

181
00:10:19,955 --> 00:10:21,665
That's fine.

182
00:10:21,665 --> 00:10:24,350
Now, let me open.

183
00:10:24,350 --> 00:10:27,830
So you guys saw instead of opening my script from terminal,

184
00:10:27,830 --> 00:10:29,885
what I will do is I am using one of the,

185
00:10:29,885 --> 00:10:32,780
ideally of your Python called Sublime Text.

186
00:10:32,780 --> 00:10:35,840
You can go with any your favorite tau.

187
00:10:35,840 --> 00:10:38,855
Ideally, I'm going with Sublime Text.

188
00:10:38,855 --> 00:10:41,915
You can go with the atom or by chomp.

189
00:10:41,915 --> 00:10:45,450
Spider can go with anyone.

190
00:10:47,470 --> 00:10:51,225
So our script is held pawn.

191
00:10:51,225 --> 00:10:52,750
This one.

192
00:10:52,750 --> 00:10:55,460
Now let me comment this.

193
00:11:00,060 --> 00:11:06,260
Now next step we suppose I want to display all my EC2 instances IDs,

194
00:11:06,510 --> 00:11:13,210
list all EC2 instances IDs.

195
00:11:13,210 --> 00:11:18,310
Then already you have in your hand you are EC2 Console using client object.

196
00:11:18,310 --> 00:11:20,095
You how your EC2 client,

197
00:11:20,095 --> 00:11:23,440
but how we can list all EC2 instances.

198
00:11:23,440 --> 00:11:27,910
Again, open your official documentation, moto three documentation.

199
00:11:27,910 --> 00:11:29,740
Go to available services,

200
00:11:29,740 --> 00:11:34,790
then go to your required service called EC2.

201
00:11:34,980 --> 00:11:39,615
Under EC2, don't look with the remaining operations, okay.

202
00:11:39,615 --> 00:11:43,550
As of now we are working at client only just click on plain.

203
00:11:45,240 --> 00:11:50,170
Now import border three client equals to bow to the nullcline for EC2,

204
00:11:50,170 --> 00:11:54,385
we already done these two steps in terms of three input moto three,

205
00:11:54,385 --> 00:11:58,720
your AWS management console session from the delta-V created EC2 Console.

206
00:11:58,720 --> 00:12:03,685
Now, this client is exactly equals to our EC2 Console plank.

207
00:12:03,685 --> 00:12:05,035
That's fine.

208
00:12:05,035 --> 00:12:06,925
Now, see that below.

209
00:12:06,925 --> 00:12:11,380
These are the available methods for your client object of EC2.

210
00:12:11,380 --> 00:12:15,010
First, go with just to read them all options.

211
00:12:15,010 --> 00:12:19,555
But as of now, directly I'm going with I need instances, right?

212
00:12:19,555 --> 00:12:22,015
Describe instances option will be here somewhere.

213
00:12:22,015 --> 00:12:23,805
But if you go with each and every option so that he

214
00:12:23,805 --> 00:12:25,915
can understand what is the purpose of each and every one.

215
00:12:25,915 --> 00:12:28,640
You had to go with at least once.

216
00:12:30,420 --> 00:12:35,455
Now, I mean describe instances,

217
00:12:35,455 --> 00:12:39,850
describe images, but we want to work with the describe instances.

218
00:12:39,850 --> 00:12:46,600
Describe instances method is there C in your client operations,

219
00:12:46,600 --> 00:12:48,520
the first lowest dot operation.

220
00:12:48,520 --> 00:12:53,275
Of course, this method is also taking some arguments,

221
00:12:53,275 --> 00:12:56,650
but as of now, I don't want to explain about them.

222
00:12:56,650 --> 00:13:00,635
I want to go with without any arguments, fine.

223
00:13:00,635 --> 00:13:04,955
Now, directly you can print the word reason it,

224
00:13:04,955 --> 00:13:11,075
EC2, Console, client object dot describe instances.

225
00:13:11,075 --> 00:13:16,550
Or you can store this into a variable called any variable you can take.

226
00:13:16,550 --> 00:13:19,625
But here suppose I am taking response equals two.

227
00:13:19,625 --> 00:13:21,650
Then just let me bring to

228
00:13:21,650 --> 00:13:31,730
them and see the output.

229
00:13:31,730 --> 00:13:35,300
So I'm running this Python script from my terminal C,

230
00:13:35,300 --> 00:13:39,395
the output, you're getting information.

231
00:13:39,395 --> 00:13:42,845
But if you observed that ending with curly brace,

232
00:13:42,845 --> 00:13:47,030
starting with curly brace means this either dictionary.

233
00:13:47,030 --> 00:13:50,495
So only first-level operation is dot operation.

234
00:13:50,495 --> 00:13:55,100
After that, immediately you are going to get you a response in terms of dictionaries.

235
00:13:55,100 --> 00:13:57,680
That is, in the client.

236
00:13:57,680 --> 00:13:59,885
I mean, if you use client operations,

237
00:13:59,885 --> 00:14:05,285
you are going to get dictionary as the output by performing one dot operation.

238
00:14:05,285 --> 00:14:06,215
Fine.

239
00:14:06,215 --> 00:14:08,405
But in this output what we need,

240
00:14:08,405 --> 00:14:10,085
we need our instance IDs,

241
00:14:10,085 --> 00:14:12,420
but where they are.

242
00:14:13,060 --> 00:14:17,360
Right, see that incase if you are getting confusion

243
00:14:17,360 --> 00:14:22,250
here from by seeing this output C in the official documentation itself.

244
00:14:22,250 --> 00:14:24,365
This response is there.

245
00:14:24,365 --> 00:14:27,560
I mean, this output is also there somewhere just to go down somewhere,

246
00:14:27,560 --> 00:14:31,280
they are giving in detail about your response, your output.

247
00:14:31,280 --> 00:14:36,605
So you have a dictionary, reservations, groups, instances.

248
00:14:36,605 --> 00:14:41,285
Now, these instances, or they're under this reservations.

249
00:14:41,285 --> 00:14:44,660
So that's why what I'm doing is I'm taking first

250
00:14:44,660 --> 00:14:49,565
the key so that I'm going to get all this is the list.

251
00:14:49,565 --> 00:14:52,970
One more thing. First, let me take reservations.

252
00:14:52,970 --> 00:14:56,195
So in this output I am taking reservations.

253
00:14:56,195 --> 00:15:02,420
So response reservations, No,

254
00:15:02,420 --> 00:15:05,070
let me rerun your Python script.

255
00:15:06,400 --> 00:15:10,400
C, the output. You are getting a list.

256
00:15:10,400 --> 00:15:12,080
In that list, again,

257
00:15:12,080 --> 00:15:15,155
you have a dictionary, different types.

258
00:15:15,155 --> 00:15:19,580
I mean, number of dysarthric tells you how because on my us-east1-d. uh,

259
00:15:19,580 --> 00:15:23,555
how three instances, that's why you're going to get three dictionaries.

260
00:15:23,555 --> 00:15:27,875
First, let me take list.

261
00:15:27,875 --> 00:15:31,680
So that is a list, right? That's why I'm taking for loop.

262
00:15:32,200 --> 00:15:37,970
This manual observationally is required for your client.

263
00:15:37,970 --> 00:15:44,975
For each item in let me print the work each item.

264
00:15:44,975 --> 00:15:47,210
Just for our understanding purpose,

265
00:15:47,210 --> 00:15:50,104
I am printing dots,

266
00:15:50,104 --> 00:16:00,740
hyphens so that you are going to get only 13.

267
00:16:00,740 --> 00:16:02,480
Where is it?

268
00:16:02,480 --> 00:16:05,540
Yeah, from here. If you observe,

269
00:16:05,540 --> 00:16:07,070
this is for first,

270
00:16:07,070 --> 00:16:12,560
second, and then third, right? Find.

271
00:16:12,560 --> 00:16:15,200
Now in this output, what I need.

272
00:16:15,200 --> 00:16:19,025
I need from each item, I need instances.

273
00:16:19,025 --> 00:16:21,770
Let me print from each item.

274
00:16:21,770 --> 00:16:24,095
Only instances.

275
00:16:24,095 --> 00:16:26,790
Be clear on this.

276
00:16:29,650 --> 00:16:34,290
Now let me rerun and see the output.

277
00:16:35,680 --> 00:16:39,124
You are getting again. Three outputs.

278
00:16:39,124 --> 00:16:40,220
Fine.

279
00:16:40,220 --> 00:16:44,750
But after printing your each item instances,

280
00:16:44,750 --> 00:16:46,130
that is also your dictionary seed,

281
00:16:46,130 --> 00:16:47,330
sorry, that is a list.

282
00:16:47,330 --> 00:16:51,140
You see that there is a list for each item.

283
00:16:51,140 --> 00:16:54,845
Instances output you are getting as a list.

284
00:16:54,845 --> 00:16:57,680
Now in this list,

285
00:16:57,680 --> 00:17:00,720
right, there is a dictionary again.

286
00:17:00,970 --> 00:17:04,520
Now let me do one thing that is a list.

287
00:17:04,520 --> 00:17:09,120
That's why I just, I'm taking for loop on this.

288
00:17:09,190 --> 00:17:16,745
For each instance, I'm taking suppose in.

289
00:17:16,745 --> 00:17:22,620
Let me print each instance and see the output.

290
00:17:25,660 --> 00:17:28,085
You are getting some output,

291
00:17:28,085 --> 00:17:29,840
right there, getting some output.

292
00:17:29,840 --> 00:17:31,550
But what I need from this output,

293
00:17:31,550 --> 00:17:33,420
you're going to get output as a dictionary.

294
00:17:33,420 --> 00:17:36,910
But I need image ids are not immediately instance ID.

295
00:17:36,910 --> 00:17:43,735
Then what I'm doing is simply I'm taking here instance ID as the key.

296
00:17:43,735 --> 00:17:52,825
Now see the output. You are getting.

297
00:17:52,825 --> 00:17:55,990
You are incense IDs, three instance Hardy's.

298
00:17:55,990 --> 00:17:59,920
Let me show you. On my console,

299
00:17:59,920 --> 00:18:02,390
I have three instances.

300
00:18:03,720 --> 00:18:06,550
So this is the way how to use

301
00:18:06,550 --> 00:18:12,760
your client observed to work with your required operation using client.

302
00:18:12,760 --> 00:18:15,800
I mean, for your service.

303
00:18:16,840 --> 00:18:20,360
Two running instances, one-stop for instance,

304
00:18:20,360 --> 00:18:23,390
just after the instance ID. Double 6F.

305
00:18:23,390 --> 00:18:28,355
Yes, double 67. Then 3-5 year four.

306
00:18:28,355 --> 00:18:30,245
3-5 year four.

307
00:18:30,245 --> 00:18:33,950
That's right. That's right.

308
00:18:33,950 --> 00:18:36,890
So guys, now you just try with S3.

309
00:18:36,890 --> 00:18:40,055
Create some buckets in your account and try to

310
00:18:40,055 --> 00:18:42,980
print your bucket names using client object.

311
00:18:42,980 --> 00:18:44,030
But it's simple.

312
00:18:44,030 --> 00:18:49,520
Again, just to go with your documentation somewhere,

313
00:18:49,520 --> 00:18:55,320
you will find your S3 available services in S3 Just to go with client.

314
00:18:56,410 --> 00:18:58,865
Yeah, here somewhere.

315
00:18:58,865 --> 00:19:01,865
S3 Just to go with client, open that client.

316
00:19:01,865 --> 00:19:04,160
So these two steps already we done.

317
00:19:04,160 --> 00:19:06,275
So import border three,

318
00:19:06,275 --> 00:19:09,860
create database management console session object than S3 console.

319
00:19:09,860 --> 00:19:16,130
So this S3 console CLI is exactly equals to client object in your page.

320
00:19:16,130 --> 00:19:19,145
Then go With all your options.

321
00:19:19,145 --> 00:19:23,285
Somewhere. You will find option called list of buckets.

322
00:19:23,285 --> 00:19:27,725
Just use that and get it your output and manipulate based on

323
00:19:27,725 --> 00:19:32,825
dictionary keys and values so that you will get all you were buckets using client object.

324
00:19:32,825 --> 00:19:33,905
Let's say.

325
00:19:33,905 --> 00:19:36,210
Okay, thank you.

