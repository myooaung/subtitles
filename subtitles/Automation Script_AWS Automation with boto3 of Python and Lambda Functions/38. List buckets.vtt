WEBVTT
ï»¿1
00:00:04.760 --> 00:00:07.275
Hi friends. In this video,

2
00:00:07.275 --> 00:00:11.565
we are going to see how to list all your buckets using

3
00:00:11.565 --> 00:00:16.350
Python moto three script C. In our previous video,

4
00:00:16.350 --> 00:00:23.640
we have seen concepts of moto three to work with S3 or for any service.

5
00:00:23.640 --> 00:00:25.410
So there's, as of now,

6
00:00:25.410 --> 00:00:27.720
you are trying to do this task.

7
00:00:27.720 --> 00:00:31.720
I mean, you're executing these tasks from your local host.

8
00:00:31.720 --> 00:00:36.440
So whenever if you're executing your code from your local host, right,

9
00:00:36.440 --> 00:00:38.750
you need to create a session,

10
00:00:38.750 --> 00:00:41.390
and that session is customization, right?

11
00:00:41.390 --> 00:00:43.835
And we will first see how to import boat O3,

12
00:00:43.835 --> 00:00:46.100
then create a session.

13
00:00:46.100 --> 00:00:47.540
This is like customization,

14
00:00:47.540 --> 00:00:53.750
even it can take any name like custom Shun, No Barolo, right?

15
00:00:53.750 --> 00:00:58.745
So already we have seen our syntaxes for custom session in our previous videos, right?

16
00:00:58.745 --> 00:01:00.770
Moto three, dot session,

17
00:01:00.770 --> 00:01:05.360
then dot session, then you have to provide profile name.

18
00:01:05.360 --> 00:01:08.765
So where is this Profile Name is nothing but while configuring

19
00:01:08.765 --> 00:01:13.370
your particular IAM access keys on your local host,

20
00:01:13.370 --> 00:01:16.805
you have given some name to identify those credentials.

21
00:01:16.805 --> 00:01:19.550
Because without those credentials only you are able

22
00:01:19.550 --> 00:01:23.075
to communicate with your AWS upon using your boatload riskier.

23
00:01:23.075 --> 00:01:24.005
Right?

24
00:01:24.005 --> 00:01:28.250
So we are following, suppose one of the IAM user called devil route.

25
00:01:28.250 --> 00:01:29.615
Fine.

26
00:01:29.615 --> 00:01:34.310
Then after that, write the concepts of your moto three to

27
00:01:34.310 --> 00:01:39.215
work with any services first year to create a session than, than you how?

28
00:01:39.215 --> 00:01:42.890
Then you have to create a S3 console that you can

29
00:01:42.890 --> 00:01:47.060
create using either a resource or client.

30
00:01:47.060 --> 00:01:48.665
Because for S3 you how resource,

31
00:01:48.665 --> 00:01:52.080
that's why you can use either resource or client.

32
00:01:52.090 --> 00:01:55.700
Right? Now, let me go and create first a resource.

33
00:01:55.700 --> 00:01:58.385
I mean, first I will implement the code with the resource object,

34
00:01:58.385 --> 00:02:01.700
and then we will also see how to implement these core width client object.

35
00:02:01.700 --> 00:02:06.410
Let me create is three object or nothing but S3 console using

36
00:02:06.410 --> 00:02:11.765
resource observed is nothing but your custom session dot a resource,

37
00:02:11.765 --> 00:02:18.140
then your service name is three.

38
00:02:18.140 --> 00:02:20.345
And you have to provide some region, right?

39
00:02:20.345 --> 00:02:21.950
So region name equals to,

40
00:02:21.950 --> 00:02:23.510
if you don't provide any decision named,

41
00:02:23.510 --> 00:02:26.750
we'll take the default region which you have configured while running.

42
00:02:26.750 --> 00:02:30.320
You will enlist configure command, right?

43
00:02:30.320 --> 00:02:33.380
So whether you are services based on region or not,

44
00:02:33.380 --> 00:02:34.925
that the secondary First thing,

45
00:02:34.925 --> 00:02:37.130
you need to provide some region name,

46
00:02:37.130 --> 00:02:39.590
at least some default Asian ME auto, take it.

47
00:02:39.590 --> 00:02:42.080
Fine. Then.

48
00:02:42.080 --> 00:02:44.765
Now in your hand you how resource object.

49
00:02:44.765 --> 00:02:49.010
From resource object, how to list all your buckets, right?

50
00:02:49.010 --> 00:02:55.260
Then, just to go and open your moto three documentation.

51
00:02:57.400 --> 00:03:00.575
Right? In this just

52
00:03:00.575 --> 00:03:02.840
Open your document first,

53
00:03:02.840 --> 00:03:05.225
then select your available services,

54
00:03:05.225 --> 00:03:07.640
then go with the S3.

55
00:03:07.640 --> 00:03:09.950
In S3, right?

56
00:03:09.950 --> 00:03:13.955
V, How a resource as well as client object C,

57
00:03:13.955 --> 00:03:16.070
we how client, this one, and we have resource.

58
00:03:16.070 --> 00:03:18.710
As of now we are implementing our core with resource.

59
00:03:18.710 --> 00:03:23.780
Then let me open that resource procedure in one new page.

60
00:03:23.780 --> 00:03:25.385
Right?

61
00:03:25.385 --> 00:03:27.695
Now in resource, right,

62
00:03:27.695 --> 00:03:30.320
you just to go through all these options first so that you will get

63
00:03:30.320 --> 00:03:33.680
some idea of what are the options you have if you go through that,

64
00:03:33.680 --> 00:03:36.200
like Delhi or somewhere buckets.

65
00:03:36.200 --> 00:03:37.385
Right?

66
00:03:37.385 --> 00:03:41.465
That's why what you have to do is let me open even this index also buckets.

67
00:03:41.465 --> 00:03:44.780
So simply S3 buckets, dot-dot-dot all.

68
00:03:44.780 --> 00:03:45.875
What is this S three,

69
00:03:45.875 --> 00:03:50.135
this is nothing but your S3 resource object.

70
00:03:50.135 --> 00:03:54.470
So for, let me first do one thing.

71
00:03:54.470 --> 00:03:59.960
Print your S3 resource dot buckets dot all.

72
00:03:59.960 --> 00:04:03.830
Nowadays, resource is nothing but like a high level object.

73
00:04:03.830 --> 00:04:06.785
That means each and every operation like object,

74
00:04:06.785 --> 00:04:08.240
I mean dot operation.

75
00:04:08.240 --> 00:04:12.035
Only the final stage output you will get a dictionary format,

76
00:04:12.035 --> 00:04:13.730
but are some direct output.

77
00:04:13.730 --> 00:04:18.425
Otherwise always you will get a each and every step output is like a object.

78
00:04:18.425 --> 00:04:20.255
First, let me run this.

79
00:04:20.255 --> 00:04:27.500
So let's see what would, what you are going to get. What happened?

80
00:04:27.500 --> 00:04:37.940
Okay, spell mystic, BU CK ETS right.

81
00:04:37.940 --> 00:04:41.195
Now, see the output, what you are going to get now.

82
00:04:41.195 --> 00:04:44.570
You're getting something that is like your object.

83
00:04:44.570 --> 00:04:47.915
So you are trying to fetch all buckets,

84
00:04:47.915 --> 00:04:50.150
but you are getting only one object information.

85
00:04:50.150 --> 00:04:55.430
That means inside of that you hope you are all available buckets information.

86
00:04:55.430 --> 00:04:57.695
That's why whenever you feel oh,

87
00:04:57.695 --> 00:04:59.900
multiple objects inside of that,

88
00:04:59.900 --> 00:05:02.915
what you have to do you undertake for loop two, subreddit one-by-one.

89
00:05:02.915 --> 00:05:12.815
So each bucket info in this information then tried to print your bucket.

90
00:05:12.815 --> 00:05:15.005
So before running the score,

91
00:05:15.005 --> 00:05:18.995
let me open my AWS or cone c that I have only two buckets.

92
00:05:18.995 --> 00:05:21.170
Now if I run this code c,

93
00:05:21.170 --> 00:05:23.640
you output what you are going to get.

94
00:05:25.570 --> 00:05:29.045
You are getting two buckets objects.

95
00:05:29.045 --> 00:05:31.460
They're not stride forward your bucket information,

96
00:05:31.460 --> 00:05:32.690
I'm in bucket name.

97
00:05:32.690 --> 00:05:35.750
Your bucket information not only with your name, right,

98
00:05:35.750 --> 00:05:39.980
when it was created by what is the size of different ways you how in this bucket,

99
00:05:39.980 --> 00:05:42.065
but you need as of now only the name.

100
00:05:42.065 --> 00:05:45.935
That's why you are each bucket in Fort dot name.

101
00:05:45.935 --> 00:05:53.750
Now see the output. That's it.

102
00:05:53.750 --> 00:05:56.150
Right? That's fine.

103
00:05:56.150 --> 00:06:03.739
So this is the way how you can implement your code using resource object of your S3.

104
00:06:03.739 --> 00:06:07.310
But now I want to implement the same output.

105
00:06:07.310 --> 00:06:08.990
I need to get the same output yz,

106
00:06:08.990 --> 00:06:11.465
even using client object as well.

107
00:06:11.465 --> 00:06:14.690
Let me implement Now the code with client.

108
00:06:14.690 --> 00:06:20.900
So S3 using Klein is nothing but your custom Session.get client.

109
00:06:20.900 --> 00:06:25.670
Then service name a goes to S three.

110
00:06:25.670 --> 00:06:29.240
Then a region name equals to,

111
00:06:29.240 --> 00:06:32.030
let us say, suppose US East One.

112
00:06:32.030 --> 00:06:34.175
Anyway, we know that, right?

113
00:06:34.175 --> 00:06:37.370
S3 is not going to win on any vision name but your boat of their needs,

114
00:06:37.370 --> 00:06:40.160
at least one reason and that's why we are providing here.

115
00:06:40.160 --> 00:06:41.345
Right.

116
00:06:41.345 --> 00:06:46.610
Fine. Now, you how document for your client does.

117
00:06:46.610 --> 00:06:49.400
Well, let me click on that and open that.

118
00:06:49.400 --> 00:06:54.320
Now once if you open your client object for your S3 first again,

119
00:06:54.320 --> 00:06:56.255
go through all your operations.

120
00:06:56.255 --> 00:06:58.580
So guys here, the document in that,

121
00:06:58.580 --> 00:07:01.220
whatever you are, that is a default session, right?

122
00:07:01.220 --> 00:07:02.765
There is not the case in our real time.

123
00:07:02.765 --> 00:07:05.630
Most of the cases, this is not the case only this is the case

124
00:07:05.630 --> 00:07:08.705
whenever if you are running your code from lambda, right?

125
00:07:08.705 --> 00:07:11.390
Moto three is nothing but our session here,

126
00:07:11.390 --> 00:07:16.775
they're using default position marked create first customization from consumption,

127
00:07:16.775 --> 00:07:18.665
we have to create your required service.

128
00:07:18.665 --> 00:07:21.335
So they are grading. Suppose this is like S3 client,

129
00:07:21.335 --> 00:07:24.920
but they're creating directly from default session, right?

130
00:07:24.920 --> 00:07:26.839
We have our own customization.

131
00:07:26.839 --> 00:07:30.890
That's why our customer attrition dot your client.

132
00:07:30.890 --> 00:07:33.755
This is the way how we are implementing. That's fine.

133
00:07:33.755 --> 00:07:37.640
Now, under S3 client you have different operations just to go through the,

134
00:07:37.640 --> 00:07:40.310
all the operations top to down so that we

135
00:07:40.310 --> 00:07:43.370
can see some very or required operation list buckets.

136
00:07:43.370 --> 00:07:46.160
Just click on that and see the output.

137
00:07:46.160 --> 00:07:53.105
Right? So you simply your S3 client object dot list objects.

138
00:07:53.105 --> 00:08:01.430
So less than let me directly printed that result as three client object dot.

139
00:08:01.430 --> 00:08:03.350
Let me do one dot.

140
00:08:03.350 --> 00:08:07.530
That's a trick. We save this and run the output and see the output.

141
00:08:09.280 --> 00:08:13.490
See you are getting some dictionary output by default, right?

142
00:08:13.490 --> 00:08:16.295
Whenever if you apply some operation using your client,

143
00:08:16.295 --> 00:08:18.455
the very first state output is,

144
00:08:18.455 --> 00:08:20.150
is always a dictionary.

145
00:08:20.150 --> 00:08:23.135
Inside that based on your requirement, you are,

146
00:08:23.135 --> 00:08:26.240
you may have a list of values or some,

147
00:08:26.240 --> 00:08:28.280
again in dictionary, right?

148
00:08:28.280 --> 00:08:29.510
Now if you observe here u,

149
00:08:29.510 --> 00:08:32.165
how response metadata, right?

150
00:08:32.165 --> 00:08:34.820
And then you, How buckets information,

151
00:08:34.820 --> 00:08:36.650
what you need, you need buckets only.

152
00:08:36.650 --> 00:08:39.845
So the way how you are going to get your output is already there in terms of,

153
00:08:39.845 --> 00:08:43.025
for example, see, this is the way you are going to get.

154
00:08:43.025 --> 00:08:45.470
You need buckets, right?

155
00:08:45.470 --> 00:08:46.910
So from this entire output,

156
00:08:46.910 --> 00:08:48.800
I don't want to get all the output.

157
00:08:48.800 --> 00:08:51.230
I need to get only bucket information.

158
00:08:51.230 --> 00:08:56.010
That's why you get your buckets key. Now see the output.

159
00:08:56.500 --> 00:08:59.060
So buckets, maybe multiple buckets,

160
00:08:59.060 --> 00:09:02.180
that's where you're getting a list. See that?

161
00:09:02.180 --> 00:09:05.330
Now I need to separate one-by-one bucket,

162
00:09:05.330 --> 00:09:08.840
then you have only one option whenever you have multiple things from that.

163
00:09:08.840 --> 00:09:10.610
Whenever if you want to take one by one,

164
00:09:10.610 --> 00:09:17.045
just to go and use for loop for each bucket info.

165
00:09:17.045 --> 00:09:21.050
In this, let me print one-by-one separately,

166
00:09:21.050 --> 00:09:23.270
print your each bucket info,

167
00:09:23.270 --> 00:09:25.490
save it and run it and see the output,

168
00:09:25.490 --> 00:09:27.570
what you are going to get.

169
00:09:28.390 --> 00:09:29.855
That's it.

170
00:09:29.855 --> 00:09:31.055
They're getting again a dictionary.

171
00:09:31.055 --> 00:09:32.960
Now this directory one dictionaries for

172
00:09:32.960 --> 00:09:35.690
one bucket and secondly studies for second bucket.

173
00:09:35.690 --> 00:09:39.170
But what you need, you want to display only the name then here,

174
00:09:39.170 --> 00:09:44.550
dot get name, C, output.

175
00:09:45.390 --> 00:09:48.414
Now you are getting only the names.

176
00:09:48.414 --> 00:09:53.560
So there is now you achieved the list of buckets using resource as well as client.

177
00:09:53.560 --> 00:09:57.445
Let me enable both the things I'm in resource as well as client.

178
00:09:57.445 --> 00:09:58.989
So for this operation,

179
00:09:58.989 --> 00:10:00.640
there is a possibility to get your

180
00:10:00.640 --> 00:10:05.410
required to implement the required code using resource as well as client.

181
00:10:05.410 --> 00:10:07.825
So here I'm writing print

182
00:10:07.825 --> 00:10:17.780
using resource object.

183
00:10:18.030 --> 00:10:26.485
Now, this is using client object.

184
00:10:26.485 --> 00:10:29.240
Let me save it and run it.

185
00:10:33.600 --> 00:10:38.260
See you are getting your output using resource,

186
00:10:38.260 --> 00:10:41.604
same information, using client, same information.

187
00:10:41.604 --> 00:10:42.745
Right?

188
00:10:42.745 --> 00:10:50.545
So these are the simple code just to get all the work buckets from your AWS account.

189
00:10:50.545 --> 00:10:53.080
But if there is a small drawback guys,

190
00:10:53.080 --> 00:10:58.090
if your using client and there is no guarantee that you are going to get all buckets.

191
00:10:58.090 --> 00:11:01.045
Only problem is with client, not with the resource.

192
00:11:01.045 --> 00:11:05.980
What is that means? Whenever if you are doing a APA column and this is like a query,

193
00:11:05.980 --> 00:11:08.140
no, query, query, nothing but you are,

194
00:11:08.140 --> 00:11:10.315
you are getting all the bucket names.

195
00:11:10.315 --> 00:11:11.920
You are being some query related with

196
00:11:11.920 --> 00:11:15.075
your AWS account through goto three using client object.

197
00:11:15.075 --> 00:11:19.415
So whenever if you are implementing your code with client upset,

198
00:11:19.415 --> 00:11:24.650
particular to S3, Just observe consonant and own and only on S3.

199
00:11:24.650 --> 00:11:31.190
Whenever if you're acquiring your AWS account information delivered with the

200
00:11:31.190 --> 00:11:37.760
S3 using plaint opposite client object will able to fetch only 1000 results.

201
00:11:37.760 --> 00:11:41.030
That means 1000 bucket names anymore, we have only two.

202
00:11:41.030 --> 00:11:42.395
That way we don't have any problem here.

203
00:11:42.395 --> 00:11:45.050
If you have more than 1000 bucket,

204
00:11:45.050 --> 00:11:50.870
then definitely your client is not going to list all the work bucket names.

205
00:11:50.870 --> 00:11:53.720
But there is a problem with client.

206
00:11:53.720 --> 00:11:57.560
So whenever if you are implementing your code with client,

207
00:11:57.560 --> 00:12:02.420
we already discussed in our previous video, paginated.

208
00:12:02.420 --> 00:12:05.420
So when you have to use pollinators,

209
00:12:05.420 --> 00:12:10.820
by default tried to make a habit to implement your core with resonators whenever if

210
00:12:10.820 --> 00:12:13.310
you're querying with your AWS account because you don't know

211
00:12:13.310 --> 00:12:16.310
how many buckets or how many objects are there with your order,

212
00:12:16.310 --> 00:12:19.130
you are URLS account you may household suppose less than 1000,

213
00:12:19.130 --> 00:12:21.215
not more than 1000, you don't know suppose.

214
00:12:21.215 --> 00:12:23.630
But through code, if you want to get perfectly

215
00:12:23.630 --> 00:12:27.635
all buckets information or object, all objects information.

216
00:12:27.635 --> 00:12:29.675
This is like a query, guys make a note,

217
00:12:29.675 --> 00:12:30.950
this is a query when somebody,

218
00:12:30.950 --> 00:12:32.600
if you are doing a query,

219
00:12:32.600 --> 00:12:35.915
fetching result is nothing but like query at that time,

220
00:12:35.915 --> 00:12:38.375
only inclined you have to use fascinate us.

221
00:12:38.375 --> 00:12:41.015
So how do you use pass non-natives?

222
00:12:41.015 --> 00:12:47.300
Right, while querying the information about your AWS particular S3 service, right?

223
00:12:47.300 --> 00:12:49.610
All those things we will see in next video.

224
00:12:49.610 --> 00:12:50.960
Okay.

225
00:12:50.960 --> 00:12:54.840
Okay. Thank you for watching this video.

