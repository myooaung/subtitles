1
00:00:00,440 --> 00:00:06,225
Prints here we are going to write one lambda function for our simple requirement.

2
00:00:06,225 --> 00:00:08,850
Our requirement is automatically assigned

3
00:00:08,850 --> 00:00:12,360
secondary IP of mustard to slavery when mustard Downs,

4
00:00:12,360 --> 00:00:16,305
I mean simply this is like a failover solution.

5
00:00:16,305 --> 00:00:22,290
C agenda, it guides you how to EC2 instances in your AWS network, right?

6
00:00:22,290 --> 00:00:27,665
And assume that these two EC2 instance as same application is running.

7
00:00:27,665 --> 00:00:29,870
And this EC2 instance,

8
00:00:29,870 --> 00:00:33,365
I'm assuming has a master and this I'm assuming as a slew.

9
00:00:33,365 --> 00:00:36,785
And there is a one secondary IP for your master,

10
00:00:36,785 --> 00:00:39,185
for your internal routing purpose.

11
00:00:39,185 --> 00:00:41,180
And there is one external user.

12
00:00:41,180 --> 00:00:47,480
And you know, user is able to access your application from your master server as of now.

13
00:00:47,480 --> 00:00:50,930
But anyway, external user don't know that I'm in your client don't know that

14
00:00:50,930 --> 00:00:54,575
from which application from each salary obligation is running, right?

15
00:00:54,575 --> 00:00:59,840
So this secondary IP information ICANN figure somewhere in route, right?

16
00:00:59,840 --> 00:01:00,725
Fine.

17
00:01:00,725 --> 00:01:04,400
Let's assume that after some time you are master,

18
00:01:04,400 --> 00:01:07,880
somebody's going to down or maybe in any state out of them running status,

19
00:01:07,880 --> 00:01:12,380
then that server is fail to run your application.

20
00:01:12,380 --> 00:01:15,275
Then external user, right,

21
00:01:15,275 --> 00:01:17,405
is not able to access your application.

22
00:01:17,405 --> 00:01:25,115
But I don't want to get this situation for your client or user, external user.

23
00:01:25,115 --> 00:01:26,345
Right?

24
00:01:26,345 --> 00:01:29,120
Then I'm the dumb. What do I need to monitor this?

25
00:01:29,120 --> 00:01:33,200
And manually, I need to route your requests to

26
00:01:33,200 --> 00:01:38,060
your slaves are worked by simply removing secondary IP or

27
00:01:38,060 --> 00:01:42,380
an assigning your secondary IP from your master and assigning to your slew

28
00:01:42,380 --> 00:01:48,049
so that your end user will able to access your obligation without any disagreements.

29
00:01:48,049 --> 00:01:52,040
What is my intention is in case if your application is running on

30
00:01:52,040 --> 00:01:55,490
one server and assume that secondary server is like a backup server.

31
00:01:55,490 --> 00:01:58,145
If something goes wrong with your muscles are worth,

32
00:01:58,145 --> 00:02:02,660
then automatically I need to route your request to your secondary server.

33
00:02:02,660 --> 00:02:05,660
So this is easily possible by assigning

34
00:02:05,660 --> 00:02:10,055
simply 0 second RIP to E1 slaves or work from your master.

35
00:02:10,055 --> 00:02:11,870
So to do this process,

36
00:02:11,870 --> 00:02:13,310
what we are doing, we are removing,

37
00:02:13,310 --> 00:02:18,740
we are assigning secondary API from your Master and we're assigning that to your sleep.

38
00:02:18,740 --> 00:02:24,215
Right? So this thing has to done automatically.

39
00:02:24,215 --> 00:02:30,755
So this thing we can implement with your lambda function, right?

40
00:02:30,755 --> 00:02:31,160
Fine.

41
00:02:31,160 --> 00:02:34,260
Let me open my AWS console first.

42
00:02:34,600 --> 00:02:37,640
So guess as off node there are two servers are running.

43
00:02:37,640 --> 00:02:42,440
Let me take this as a master and let me take this as

44
00:02:42,440 --> 00:02:47,570
a slew of primary and secondary server.

45
00:02:47,570 --> 00:02:49,655
Now what I'm doing here as of now,

46
00:02:49,655 --> 00:02:52,940
just I'm going to assign one secondary IP,

47
00:02:52,940 --> 00:02:56,645
secondary private IP for my master server.

48
00:02:56,645 --> 00:03:07,800
Let me assign something like 170 to 8063.

49
00:03:10,960 --> 00:03:14,000
So we assign it, right.

50
00:03:14,000 --> 00:03:15,425
Fine.

51
00:03:15,425 --> 00:03:20,360
Now close it. Just check it here.

52
00:03:20,360 --> 00:03:23,310
If you refresh this.

53
00:03:23,890 --> 00:03:27,275
Now secondary server, right?

54
00:03:27,275 --> 00:03:35,970
Let me for your primary server is configured with your secondary private IP address.

55
00:03:37,810 --> 00:03:41,010
Let me check cross ticket.

56
00:03:45,220 --> 00:03:47,900
Yeah, 63, right, fine.

57
00:03:47,900 --> 00:03:49,760
Now that's what we are assigning here.

58
00:03:49,760 --> 00:03:54,140
So what is our requirement is increased by any chance,

59
00:03:54,140 --> 00:03:55,850
if your muscle goes down automatically,

60
00:03:55,850 --> 00:03:58,385
this IP has to go and assigned to your slow.

61
00:03:58,385 --> 00:04:02,915
So this thing I want to do automatically, right?

62
00:04:02,915 --> 00:04:07,805
So first I am going to write a code in your endeavors lambda.

63
00:04:07,805 --> 00:04:10,700
Then I will explain that how it is going to work

64
00:04:10,700 --> 00:04:13,790
whenever if you're easy to instance status is changing.

65
00:04:13,790 --> 00:04:17,520
Nothing is there. Let me open my lambda first.

66
00:04:19,750 --> 00:04:22,970
So I'm going to create a lambda function here,

67
00:04:22,970 --> 00:04:26,450
creating a lambda function from scratch.

68
00:04:26,450 --> 00:04:31,895
So our requirement is auto,

69
00:04:31,895 --> 00:04:36,185
assign secondary IP to slave.

70
00:04:36,185 --> 00:04:45,425
When Master goes down, something like that.

71
00:04:45,425 --> 00:04:46,580
Okay, fine.

72
00:04:46,580 --> 00:04:48,470
So we are going to write Python code.

73
00:04:48,470 --> 00:04:51,065
I'm selecting Python three dot seven, asthma interpret depth.

74
00:04:51,065 --> 00:04:52,775
Then you know that gaze.

75
00:04:52,775 --> 00:04:54,530
To run your Lambda code,

76
00:04:54,530 --> 00:04:58,310
you need some execution rule or credentials.

77
00:04:58,310 --> 00:05:00,710
So now I'm going to use execution mode,

78
00:05:00,710 --> 00:05:05,130
which is your real time scenario, right?

79
00:05:06,450 --> 00:05:08,665
D in real time,

80
00:05:08,665 --> 00:05:13,915
most of the cases we will run out lambda functions through execution rule, right?

81
00:05:13,915 --> 00:05:17,470
Let me use an existing rule.

82
00:05:17,470 --> 00:05:20,065
See guys from our previous videos, right?

83
00:05:20,065 --> 00:05:24,955
We have somewhere our execution role as mailer to lambda.

84
00:05:24,955 --> 00:05:31,495
So the same rule I'm assigning now to your lambda to execute your core.

85
00:05:31,495 --> 00:05:37,120
Fine. Now by default the no execution by means three seconds.

86
00:05:37,120 --> 00:05:38,995
I want to change it to some,

87
00:05:38,995 --> 00:05:43,660
let's come down and change it to suppose some five minutes.

88
00:05:43,660 --> 00:05:46,180
No problem. Yeah, tenure can,

89
00:05:46,180 --> 00:05:49,435
if you want to write remaining parameters so you can write it.

90
00:05:49,435 --> 00:05:51,715
Now this is your domain Lambda code.

91
00:05:51,715 --> 00:05:53,575
You need to write your code here.

92
00:05:53,575 --> 00:05:54,730
That's fine.

93
00:05:54,730 --> 00:05:58,360
So as of now, you are going to implement Bordeaux three core.

94
00:05:58,360 --> 00:06:00,220
So that means you need to input Bordeaux three.

95
00:06:00,220 --> 00:06:01,375
Don't worry about that.

96
00:06:01,375 --> 00:06:05,170
By default, Bordeaux trees there with your lambda, just try to import that.

97
00:06:05,170 --> 00:06:06,655
Nowadays.

98
00:06:06,655 --> 00:06:09,430
Let me import your, let me write your code one-by-one.

99
00:06:09,430 --> 00:06:13,250
Let me take muster ID first.

100
00:06:14,070 --> 00:06:21,685
Then I will also write slave ID. Let me get them.

101
00:06:21,685 --> 00:06:23,530
You are Muslim slave IDs from u,

102
00:06:23,530 --> 00:06:32,060
r. So this is muster ID.

103
00:06:33,810 --> 00:06:37,690
So same way, let me get my slave ideas.

104
00:06:37,690 --> 00:06:42,820
Well, so why I need this means because we own,

105
00:06:42,820 --> 00:06:46,790
we want to work with these two instances only. That's why I'm taking them.

106
00:06:46,830 --> 00:06:48,685
Fine.

107
00:06:48,685 --> 00:06:52,030
And then one more thing. What is your secondary IP?

108
00:06:52,030 --> 00:06:53,815
Secondary IP, right?

109
00:06:53,815 --> 00:06:55,255
Let me take that as well.

110
00:06:55,255 --> 00:06:58,070
So this is your secondary IP.

111
00:06:58,650 --> 00:07:01,615
I will take one variable, coral,

112
00:07:01,615 --> 00:07:05,600
secondary IP, wherein I have written here. Yeah.

113
00:07:09,570 --> 00:07:12,865
So let me write that code here first.

114
00:07:12,865 --> 00:07:16,095
So now you're in your hand you how your required variables.

115
00:07:16,095 --> 00:07:17,540
All right, fine.

116
00:07:17,540 --> 00:07:21,530
So there is whenever if you want to work with your AWS services using goto

117
00:07:21,530 --> 00:07:25,625
three you can work in two is using resource as well as client.

118
00:07:25,625 --> 00:07:26,330
Right now.

119
00:07:26,330 --> 00:07:28,790
First, I'm going to take a resource object first.

120
00:07:28,790 --> 00:07:35,900
So to take you a resource of that nothing is that simply, that's it.

121
00:07:35,900 --> 00:07:39,800
Then they suppose if you run this lambda core,

122
00:07:39,800 --> 00:07:43,550
what it has to do, it has to check for your master status.

123
00:07:43,550 --> 00:07:45,395
If it is running, it should not do anything.

124
00:07:45,395 --> 00:07:46,625
If it is not running,

125
00:07:46,625 --> 00:07:48,680
then you need to do some modifications.

126
00:07:48,680 --> 00:07:50,990
So before going to get the information about

127
00:07:50,990 --> 00:07:54,905
your master or your secondary server or your slaves or were.

128
00:07:54,905 --> 00:07:57,680
First of all, you need to get the object of

129
00:07:57,680 --> 00:08:00,545
your EC2 because you are not going to work with multiple,

130
00:08:00,545 --> 00:08:02,570
you're going to work with only one EC2 instance,

131
00:08:02,570 --> 00:08:04,670
one is master and one more is slew.

132
00:08:04,670 --> 00:08:07,009
Now you have to create your objects.

133
00:08:07,009 --> 00:08:10,340
Let me create my primary EC2 instance or you were

134
00:08:10,340 --> 00:08:14,135
muster EC2 instance objects simply from your resource object,

135
00:08:14,135 --> 00:08:17,870
there is an operation called instance for that if you provide your incense ID,

136
00:08:17,870 --> 00:08:20,375
now it is going to create a object.

137
00:08:20,375 --> 00:08:22,490
Now in this audio and averting,

138
00:08:22,490 --> 00:08:26,255
avoid your muster instance information.

139
00:08:26,255 --> 00:08:28,880
Now what do I need to check the status?

140
00:08:28,880 --> 00:08:34,550
So what I am doing is if this status is running,

141
00:08:34,550 --> 00:08:35,825
then I don't want do anything.

142
00:08:35,825 --> 00:08:36,725
Sprint.

143
00:08:36,725 --> 00:08:39,980
Master is up and running.

144
00:08:39,980 --> 00:08:44,280
No need of any modifications.

145
00:08:46,510 --> 00:08:48,289
Else.

146
00:08:48,289 --> 00:08:49,715
If muscle is not running,

147
00:08:49,715 --> 00:08:56,000
then only we need to assign your secondary IP from master to slim.

148
00:08:56,000 --> 00:08:57,200
Now see that.

149
00:08:57,200 --> 00:09:02,810
And now I'm going to create secondaries server object as well, PSI created.

150
00:09:02,810 --> 00:09:10,115
Then let me get my primary server and secondary server network interface information.

151
00:09:10,115 --> 00:09:14,330
Why we need means we are working with your private IP address, right?

152
00:09:14,330 --> 00:09:17,150
So before going to work with your private IP address, first of all,

153
00:09:17,150 --> 00:09:22,099
you should know what is your network and profess information for it was EC2 instance.

154
00:09:22,099 --> 00:09:24,800
Then from the earth, let me yeah, symbol,

155
00:09:24,800 --> 00:09:28,710
let me create 40 watts secondary server also.

156
00:09:29,080 --> 00:09:31,940
Guys, to understand this,

157
00:09:31,940 --> 00:09:34,250
you just run DAR operation on

158
00:09:34,250 --> 00:09:38,015
your primary EC2 instance object and then secondary EC2 instance object.

159
00:09:38,015 --> 00:09:43,160
You will see somewhere operation called network instance information.

160
00:09:43,160 --> 00:09:46,535
Da or operational, you know, help, help, right?

161
00:09:46,535 --> 00:09:47,810
Fine.

162
00:09:47,810 --> 00:09:50,255
So already we have done that in our previous videos.

163
00:09:50,255 --> 00:09:51,410
That's why I am directly writing.

164
00:09:51,410 --> 00:09:57,605
Then let me get for a master and slave network interface ID.

165
00:09:57,605 --> 00:10:03,680
So this is for your secondary server arm slaves are aware interface ID.

166
00:10:03,680 --> 00:10:06,380
Now you have both the things in your hand.

167
00:10:06,380 --> 00:10:08,930
So already we have secondary IP as well.

168
00:10:08,930 --> 00:10:13,100
Now guys, if, for instance,

169
00:10:13,100 --> 00:10:15,560
I mean mastery is running, you don't need to do anything.

170
00:10:15,560 --> 00:10:16,625
If it is not running,

171
00:10:16,625 --> 00:10:22,250
then we are finding your primary server and secondary server network interface ID because

172
00:10:22,250 --> 00:10:28,160
to assign you a secondary IPR on Arsenio secondary IP for your Butler EC2 instance,

173
00:10:28,160 --> 00:10:30,770
first of all, you should know network interface ID.

174
00:10:30,770 --> 00:10:33,380
With Delft network interface ID, you can do that.

175
00:10:33,380 --> 00:10:35,750
Otherwise you can't do it. That's why I got first in

176
00:10:35,750 --> 00:10:38,285
network interface ID for both the servers.

177
00:10:38,285 --> 00:10:41,195
Why we are getting for bodhisattvas means.

178
00:10:41,195 --> 00:10:44,420
From mastered a way to assign your secondary IP,

179
00:10:44,420 --> 00:10:48,680
then that IP we assign it to slip, right?

180
00:10:48,680 --> 00:10:49,430
Fine.

181
00:10:49,430 --> 00:10:51,875
So guys, to assign an unassigned,

182
00:10:51,875 --> 00:10:55,130
there are no direct operations with your resource object.

183
00:10:55,130 --> 00:10:58,580
That's why I'm going to create a client object.

184
00:10:58,580 --> 00:11:02,615
Yes, in the same folder you can use client as well as resource.

185
00:11:02,615 --> 00:11:05,460
Now what I'm being simply,

186
00:11:05,650 --> 00:11:15,095
I'm going to assign an assigned primary server, secondary IP.

187
00:11:15,095 --> 00:11:19,730
Then offer this by this very simple chord, okay?

188
00:11:19,730 --> 00:11:24,895
Now I'm going to assign it to 4y secondary server.

189
00:11:24,895 --> 00:11:28,180
See how I'm assigning based on network interface ID,

190
00:11:28,180 --> 00:11:30,220
even anyone official documentation directly.

191
00:11:30,220 --> 00:11:33,760
You can see this detail information, right?

192
00:11:33,760 --> 00:11:37,030
Fine. We know how to see official documentation as well, right?

193
00:11:37,030 --> 00:11:37,705
Fine.

194
00:11:37,705 --> 00:11:43,880
Now finally, just to return none. Now check.

195
00:11:44,370 --> 00:11:47,740
See for time being just for testing purpose manually,

196
00:11:47,740 --> 00:11:51,790
I'm running this code but you should not done manually automatically, it has to trigger.

197
00:11:51,790 --> 00:11:53,185
So we need to configure that.

198
00:11:53,185 --> 00:11:54,640
I will show you that before that,

199
00:11:54,640 --> 00:11:56,875
let me test it by running.

200
00:11:56,875 --> 00:11:59,750
So I'm creating a test event.

201
00:12:00,600 --> 00:12:05,770
You can provide an interest even as of now and see the output.

202
00:12:05,770 --> 00:12:10,940
Still it is running or yeah.

203
00:12:11,370 --> 00:12:14,740
Now we need to run, right? Yeah. District.

204
00:12:14,740 --> 00:12:20,170
Yes. Up there the output mastery is up and running. Known enough.

205
00:12:20,170 --> 00:12:21,625
Any modifications?

206
00:12:21,625 --> 00:12:25,520
See what I'm doing is I'm going to stop this.

207
00:12:25,650 --> 00:12:28,090
Whenever you stop this.

208
00:12:28,090 --> 00:12:31,255
I mean, generally in real time in case if

209
00:12:31,255 --> 00:12:34,810
something goes wrong with your master and then if it goes down,

210
00:12:34,810 --> 00:12:36,175
then automatically it has to run.

211
00:12:36,175 --> 00:12:39,460
But has no adult as of now we did not that setup manually.

212
00:12:39,460 --> 00:12:41,830
I'm stopping and I'm going to run you work.

213
00:12:41,830 --> 00:12:43,510
Before running your lambda CT,

214
00:12:43,510 --> 00:12:44,680
just check it with the master.

215
00:12:44,680 --> 00:12:46,540
You have a secondary IPS off node.

216
00:12:46,540 --> 00:12:49,275
Now if I run your lambda core,

217
00:12:49,275 --> 00:12:54,545
right, now, just come back with your console and refresh shade.

218
00:12:54,545 --> 00:12:57,530
Now there is no secondary IP with your muster.

219
00:12:57,530 --> 00:13:00,920
It has been moved to your slave weakened check it now by selecting

220
00:13:00,920 --> 00:13:07,145
your slew the object, right?

221
00:13:07,145 --> 00:13:07,865
Fine.

222
00:13:07,865 --> 00:13:10,400
So what I am doing is this thing has to done

223
00:13:10,400 --> 00:13:15,635
automatically whenever if you are EC2 instance master EC2 instance goes down.

224
00:13:15,635 --> 00:13:17,630
So I'm going to do that setup.

225
00:13:17,630 --> 00:13:19,040
Before going to do that setup,

226
00:13:19,040 --> 00:13:21,900
let me reset my settings.

227
00:13:23,320 --> 00:13:29,430
Now I'm going to assign with your master, your secondary IP.

228
00:13:33,520 --> 00:13:40,505
Where is your master? Bed? Right?

229
00:13:40,505 --> 00:13:41,975
1 second.

230
00:13:41,975 --> 00:13:45,980
Let me crosscheck it. Yeah, fine.

231
00:13:45,980 --> 00:13:48,210
This is my master.

232
00:13:51,880 --> 00:13:55,205
Let me assign secondary IP.

233
00:13:55,205 --> 00:13:57,440
And this IP I will update somewhere in

234
00:13:57,440 --> 00:13:59,945
your router and load-balanced or somewhere if you want.

235
00:13:59,945 --> 00:14:00,575
Okay?

236
00:14:00,575 --> 00:14:05,000
So this is not completely real-time requirement from NPN,

237
00:14:05,000 --> 00:14:08,195
but this is the part of your real-time requirement, right?

238
00:14:08,195 --> 00:14:11,550
And let me run you are instance state as well.

239
00:14:13,210 --> 00:14:16,550
Just to wait for some time, it will run.

240
00:14:16,550 --> 00:14:18,110
That's fine.

241
00:14:18,110 --> 00:14:20,790
Just human some time.

242
00:14:27,490 --> 00:14:30,005
Yeah, now it is up and running.

243
00:14:30,005 --> 00:14:34,370
C, actually our requirement is in case if your muscle goes down automatically,

244
00:14:34,370 --> 00:14:36,050
we need to figure out lambda cor.

245
00:14:36,050 --> 00:14:40,429
Well, we can do it simply by creating your CloudWatch Events.

246
00:14:40,429 --> 00:14:44,330
Event is nothing but a data it is going to generate because of some action.

247
00:14:44,330 --> 00:14:47,180
Now whenever if we use u to instance state is changing,

248
00:14:47,180 --> 00:14:51,695
your master EC2 instance rate is changing at that time automatically with genetic data,

249
00:14:51,695 --> 00:14:56,645
that data I want to use to trigger your lambda core.

250
00:14:56,645 --> 00:14:59,990
Nothing is there. Just select your endless CloudWatch,

251
00:14:59,990 --> 00:15:02,180
then go to events,

252
00:15:02,180 --> 00:15:06,545
then gets started, then event pattern,

253
00:15:06,545 --> 00:15:09,020
nothing but if you generate any event,

254
00:15:09,020 --> 00:15:12,215
any data, that data is going to trigger the word quote.

255
00:15:12,215 --> 00:15:15,170
So as of now you are going to work with easy to data, right?

256
00:15:15,170 --> 00:15:18,695
If EC2 instance is going to genetic data,

257
00:15:18,695 --> 00:15:21,455
that data we're going to use to trigger your lambda.

258
00:15:21,455 --> 00:15:23,195
But what is your requirement?

259
00:15:23,195 --> 00:15:25,295
At what time you want to generate the event

260
00:15:25,295 --> 00:15:27,905
whenever EC2 instance steady state is changing,

261
00:15:27,905 --> 00:15:30,260
any state, any medieval Cody,

262
00:15:30,260 --> 00:15:31,370
how taken care whenever,

263
00:15:31,370 --> 00:15:32,870
if your instance that is not running,

264
00:15:32,870 --> 00:15:36,650
then only you are running all instances on only one particular instance,

265
00:15:36,650 --> 00:15:38,240
only master we need to concentrate.

266
00:15:38,240 --> 00:15:43,470
That's why now so let me select master, instance ID.

267
00:15:43,570 --> 00:15:45,845
Copy here.

268
00:15:45,845 --> 00:15:47,270
That's it.

269
00:15:47,270 --> 00:15:49,475
Man art, add target.

270
00:15:49,475 --> 00:15:51,800
So what is the use of add target means?

271
00:15:51,800 --> 00:15:54,560
Suppose if you are easy to instantiate a changing,

272
00:15:54,560 --> 00:15:56,765
this automatically will trigger that.

273
00:15:56,765 --> 00:15:58,820
I mean, it is automatically generating a data.

274
00:15:58,820 --> 00:16:02,405
That data has to trigger something that is nothing but your target.

275
00:16:02,405 --> 00:16:04,745
So I'm selecting our target as.

276
00:16:04,745 --> 00:16:08,070
So what is our lambda code here?

277
00:16:08,260 --> 00:16:11,030
Auto assign, Right?

278
00:16:11,030 --> 00:16:14,760
Let me select our TO assign.

279
00:16:17,160 --> 00:16:21,880
I mean, you know how some Muslim to slave.

280
00:16:21,880 --> 00:16:23,830
Is this one? Yeah.

281
00:16:23,830 --> 00:16:28,750
To slave when Master goes down, yes, fine.

282
00:16:28,750 --> 00:16:31,240
That's now configured data.

283
00:16:31,240 --> 00:16:34,100
Just provide some name.

284
00:16:34,350 --> 00:16:39,020
Ottawa sign I'm giving, right.

285
00:16:39,270 --> 00:16:44,230
Changing secondary IP to write,

286
00:16:44,230 --> 00:16:48,295
chaining, secondary private IP to slip.

287
00:16:48,295 --> 00:16:49,450
That said, if you want write anything,

288
00:16:49,450 --> 00:16:52,615
you can write it enabled, right?

289
00:16:52,615 --> 00:16:53,740
If you want to enable later,

290
00:16:53,740 --> 00:16:55,120
you can disable this as I've known,

291
00:16:55,120 --> 00:16:59,305
but I want to enable creativity. That's done.

292
00:16:59,305 --> 00:17:02,725
Now these first observe that now your setup is there.

293
00:17:02,725 --> 00:17:06,160
Whenever if your mastery is goes down are the time you are also

294
00:17:06,160 --> 00:17:10,089
having a setup to assign your secondary IP to your slave.

295
00:17:10,089 --> 00:17:13,285
As of now, everything is fine, right?

296
00:17:13,285 --> 00:17:18,190
And your secondary IP is also there with the one master just absorbing blow.

297
00:17:18,190 --> 00:17:21,700
Now just I'm doing something called I'm going to change

298
00:17:21,700 --> 00:17:25,000
the your EC2 mustard status to stop.

299
00:17:25,000 --> 00:17:29,740
Whenever if you do this automatically because of your lambda, you are secondary.

300
00:17:29,740 --> 00:17:32,545
Ib will go now signed to see,

301
00:17:32,545 --> 00:17:34,375
now it has this disappear here.

302
00:17:34,375 --> 00:17:36,745
Now there is no secondary before your master.

303
00:17:36,745 --> 00:17:39,015
But if you select your slay,

304
00:17:39,015 --> 00:17:43,850
you see that it has been assigned to you as slave.

305
00:17:43,850 --> 00:17:49,760
Now what you are doing if master goes down at that time,

306
00:17:49,760 --> 00:17:51,530
muscles generating some data,

307
00:17:51,530 --> 00:17:56,045
that data we are simply using to trigger your database lambda function core.

308
00:17:56,045 --> 00:18:00,590
In that code, what we, how we are assigning secondary IP of

309
00:18:00,590 --> 00:18:06,680
your master to slow when muster status is not running.

310
00:18:06,680 --> 00:18:08,255
That's it.

311
00:18:08,255 --> 00:18:14,540
So simply we done that court case in case if you want to use this code in your real time,

312
00:18:14,540 --> 00:18:17,285
what you ought to do is three values you need to remember.

313
00:18:17,285 --> 00:18:19,175
I mean, you need to change three values.

314
00:18:19,175 --> 00:18:22,745
One thing is you are master instance ID,

315
00:18:22,745 --> 00:18:25,190
slave instance ID, and then secondary IP.

316
00:18:25,190 --> 00:18:29,795
What is the secondary we are using to run your master or your sleep?

317
00:18:29,795 --> 00:18:32,045
That's it. The men unquote is sin.

318
00:18:32,045 --> 00:18:35,090
And one more thing, as AV node directly,

319
00:18:35,090 --> 00:18:40,820
I have written your instance ID and your secondary IB inside of your code.

320
00:18:40,820 --> 00:18:43,550
Instead of that, you can also pass you master ID,

321
00:18:43,550 --> 00:18:47,690
slave ID secondary I plaza environment variables so that you can use this code

322
00:18:47,690 --> 00:18:52,640
for anyone just by simply passing your environment details here.

323
00:18:52,640 --> 00:18:53,855
Right?

324
00:18:53,855 --> 00:18:57,125
So as of now I'm doing this one later in next video, right?

325
00:18:57,125 --> 00:18:58,535
We will use that concept,

326
00:18:58,535 --> 00:19:02,280
how to use environment variables for your lambda function.

327
00:19:02,530 --> 00:19:04,325
Right?

328
00:19:04,325 --> 00:19:07,680
Okay, yes. Thank you for watching this video.

