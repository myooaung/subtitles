1
00:00:00,000 --> 00:00:05,295
We are going to discuss about your AWS lambda or lambda function.

2
00:00:05,295 --> 00:00:09,675
Anyway, that is simply introduction to your AWS Lambda.

3
00:00:09,675 --> 00:00:12,255
Okay, let me start that.

4
00:00:12,255 --> 00:00:15,885
So AWS Lambda or AWS Lambda function.

5
00:00:15,885 --> 00:00:18,270
So guys from official documentation,

6
00:00:18,270 --> 00:00:21,120
the meaningful or edit this lambda is this one.

7
00:00:21,120 --> 00:00:23,145
So as I've no, I don't want to go with that.

8
00:00:23,145 --> 00:00:25,680
If you want, you can go through that, right?

9
00:00:25,680 --> 00:00:27,930
So before coming to your database lambda,

10
00:00:27,930 --> 00:00:31,395
i want to say something from my local server.

11
00:00:31,395 --> 00:00:39,925
Let's say just assume that.

12
00:00:39,925 --> 00:00:42,650
So this is my Windows Server.

13
00:00:42,650 --> 00:00:45,110
So in case if you are using your local server has

14
00:00:45,110 --> 00:00:47,945
some my ways or some Linux, whatever it may be.

15
00:00:47,945 --> 00:00:50,150
So this is my Windows Server.

16
00:00:50,150 --> 00:00:52,520
This is my simple, my local server.

17
00:00:52,520 --> 00:00:57,275
So here I installed one of the application called PyCharm.

18
00:00:57,275 --> 00:00:59,885
Just assume that this is my pie chart.

19
00:00:59,885 --> 00:01:04,295
Of course, you know, what is the pie chart when she's like a one editor, right?

20
00:01:04,295 --> 00:01:08,300
So to write and execute your code.

21
00:01:08,300 --> 00:01:09,875
Ok.

22
00:01:09,875 --> 00:01:15,515
So now just assume that you were AWS Lambda is

23
00:01:15,515 --> 00:01:23,220
also one of the editor and which is used to write your code and execute your code.

24
00:01:23,220 --> 00:01:25,000
And along with that,

25
00:01:25,000 --> 00:01:27,145
it is having some extra features.

26
00:01:27,145 --> 00:01:28,525
That's it.

27
00:01:28,525 --> 00:01:34,540
Now you can simply remember a diverse lambda is nothing but it is one type of editor.

28
00:01:34,540 --> 00:01:36,565
So you know, what is the use of editor?

29
00:01:36,565 --> 00:01:38,890
We will write some code or some texts. What old?

30
00:01:38,890 --> 00:01:44,845
Maybe you can write something through your editor and you can save your file, right?

31
00:01:44,845 --> 00:01:50,695
So you can write your code and also you can execute your code through your NLS lambda.

32
00:01:50,695 --> 00:01:54,670
Along with that, you are having some extra features.

33
00:01:54,670 --> 00:01:59,110
So now we will see what are you an extra features right?

34
00:01:59,110 --> 00:02:02,185
Now. First thing, it is simply, you know,

35
00:02:02,185 --> 00:02:05,455
like an editor with some extra features.

36
00:02:05,455 --> 00:02:11,980
That's it. So it's supposed it supports to run different languages like Python,

37
00:02:11,980 --> 00:02:15,715
go lang, java, NodeJs, she shop something.

38
00:02:15,715 --> 00:02:17,050
Right?

39
00:02:17,050 --> 00:02:23,515
So now you have to understand that Ada was lambda is not only supporting for Python,

40
00:02:23,515 --> 00:02:26,470
it is supporting for different languages to write and

41
00:02:26,470 --> 00:02:30,295
execute through your AWS Lambda function or L of this lambda.

42
00:02:30,295 --> 00:02:31,720
Right?

43
00:02:31,720 --> 00:02:36,490
So C Our, let say suppose we have taken previously pi chump and

44
00:02:36,490 --> 00:02:41,995
I install pi jam on my local server called the windows. The same way.

45
00:02:41,995 --> 00:02:46,060
Lambda is also one of the editor, basically.

46
00:02:46,060 --> 00:02:48,865
So it should run somewhere, right?

47
00:02:48,865 --> 00:02:50,920
So where it is running.

48
00:02:50,920 --> 00:02:54,130
So usually you're not going to install anywhere.

49
00:02:54,130 --> 00:02:56,995
It is one of the service from your AWS.

50
00:02:56,995 --> 00:02:59,875
So directly you are picking that and you're using that.

51
00:02:59,875 --> 00:03:02,640
So somewhere it is running on one,

52
00:03:02,640 --> 00:03:04,600
on top of one operating system.

53
00:03:04,600 --> 00:03:07,165
That operating system is Amazon Linux.

54
00:03:07,165 --> 00:03:10,160
Amazon Linux server.

55
00:03:10,500 --> 00:03:15,880
So now you are not maintaining the Amazon Linux server to run

56
00:03:15,880 --> 00:03:20,830
your AWS Lambda application that

57
00:03:20,830 --> 00:03:26,440
phi we are calling AWS Lambda is a serverless computing platform.

58
00:03:26,440 --> 00:03:29,770
Sorrow or less basically does have its needs server,

59
00:03:29,770 --> 00:03:31,470
but you are not maintaining that server.

60
00:03:31,470 --> 00:03:35,730
It is a serverless, that's it, right?

61
00:03:37,630 --> 00:03:42,560
Anyway, you are using your AIDL is lambda two, right?

62
00:03:42,560 --> 00:03:44,585
Your core and to execute your code.

63
00:03:44,585 --> 00:03:50,015
And you know that now that AdaBoost lambda is running on top of Amazon Linux server.

64
00:03:50,015 --> 00:03:53,570
So from that Lennox or were in case if you want to store

65
00:03:53,570 --> 00:03:57,470
some temporary values or files while running your edibles lambda,

66
00:03:57,470 --> 00:04:03,110
then you can directly include if path called root term inside of you or lambda function.

67
00:04:03,110 --> 00:04:04,490
I mean, when writing your code,

68
00:04:04,490 --> 00:04:07,550
you can store some files temporally under root term directly.

69
00:04:07,550 --> 00:04:08,945
You can access that path.

70
00:04:08,945 --> 00:04:11,160
You have access for that.

71
00:04:11,620 --> 00:04:14,510
Okay, That's fine.

72
00:04:14,510 --> 00:04:16,985
So now you have to understand that simply.

73
00:04:16,985 --> 00:04:21,005
There is one Amazon server, Amazon Linux server.

74
00:04:21,005 --> 00:04:22,940
It is maintained by your Amazon.

75
00:04:22,940 --> 00:04:25,625
You are not maintaining this. On the top of that.

76
00:04:25,625 --> 00:04:30,485
They installed one application called lambda a1 plus lambda.

77
00:04:30,485 --> 00:04:31,325
Right?

78
00:04:31,325 --> 00:04:33,560
Now you are using that Ada was lambda survey

79
00:04:33,560 --> 00:04:37,230
simply to write your code and to execute your code.

80
00:04:37,870 --> 00:04:39,395
Right?

81
00:04:39,395 --> 00:04:43,010
So I told that this is like one of your editor like VA,

82
00:04:43,010 --> 00:04:44,765
MR. PyCharm Sublime, right?

83
00:04:44,765 --> 00:04:48,334
But along with that it is also having some extra features.

84
00:04:48,334 --> 00:04:52,160
So to know that let me go with this thing and

85
00:04:52,160 --> 00:04:59,425
requirements for analysts lambda function, right?

86
00:04:59,425 --> 00:05:03,805
So the first thing, enemies lambda function has a few requirements.

87
00:05:03,805 --> 00:05:09,220
That is, the first requirement you need to satisfy is to provide a handler.

88
00:05:09,220 --> 00:05:13,075
What is this handler? In case if you no good with,

89
00:05:13,075 --> 00:05:15,010
I mean, any one of the language right,

90
00:05:15,010 --> 00:05:18,114
while writing your core, sometimes you'll include handless.

91
00:05:18,114 --> 00:05:21,835
Now, this handler is nothing but one of the function.

92
00:05:21,835 --> 00:05:24,040
While writing your inverse lambda core,

93
00:05:24,040 --> 00:05:26,170
I mean the code which you are going to write inside of

94
00:05:26,170 --> 00:05:29,965
your analysts lambda function, right?

95
00:05:29,965 --> 00:05:32,635
These handler is the entry point for the lambda.

96
00:05:32,635 --> 00:05:36,775
That means whatever the code you are going to write know innuendos lambda function,

97
00:05:36,775 --> 00:05:42,860
basically AWS Lambda, start the execution from this Lambda handler function.

98
00:05:42,860 --> 00:05:46,820
I will show that from where it is going to start, right?

99
00:05:46,820 --> 00:05:51,350
And this AdaBoost lambda function accepts JSON formatted input.

100
00:05:51,350 --> 00:05:57,230
And we do this same JSON format as output.

101
00:05:57,230 --> 00:06:01,220
But of course you can also written some string typeof output.

102
00:06:01,220 --> 00:06:03,860
Right? That's fine.

103
00:06:03,860 --> 00:06:07,670
Then second requirement is that you

104
00:06:07,670 --> 00:06:11,630
will need to specify the runtime environment for the lambda.

105
00:06:11,630 --> 00:06:13,325
Nothing is that.

106
00:06:13,325 --> 00:06:15,050
Suppose I want to write

107
00:06:15,050 --> 00:06:20,105
some analysts automation code using Python and just write your Python code.

108
00:06:20,105 --> 00:06:22,340
You don't worry about the weather,

109
00:06:22,340 --> 00:06:25,550
the Python software installed or not already these that you can see

110
00:06:25,550 --> 00:06:29,870
that anywhere lambda service, right?

111
00:06:29,870 --> 00:06:32,780
Then third one is, the final requirement,

112
00:06:32,780 --> 00:06:36,965
is a trigger. What is a trigger?

113
00:06:36,965 --> 00:06:41,555
C, you are going to write some code inside of your AWS Lambda function.

114
00:06:41,555 --> 00:06:45,020
And in case if you want to run it manually, yes,

115
00:06:45,020 --> 00:06:50,615
you can trigger manually or you can run by as I mean, simply, you can run.

116
00:06:50,615 --> 00:06:53,510
But, but things are nothing but taken.

117
00:06:53,510 --> 00:06:55,820
Assume that as a trigger,

118
00:06:55,820 --> 00:06:58,890
you are running your code. That's a

119
00:06:58,930 --> 00:07:00,455
Right?

120
00:07:00,455 --> 00:07:05,180
Or you can configure your AWS Lambda function such

121
00:07:05,180 --> 00:07:11,750
that it will execute automatically when something happens.

122
00:07:11,750 --> 00:07:16,130
Suppose you are going to upload some data into your S3,

123
00:07:16,130 --> 00:07:18,080
some object into your S3.

124
00:07:18,080 --> 00:07:19,820
So one event is occurring.

125
00:07:19,820 --> 00:07:21,305
Based on that event,

126
00:07:21,305 --> 00:07:23,900
you can configure your AD plus lambda functions

127
00:07:23,900 --> 00:07:26,960
such that they are lambda will automatically execute,

128
00:07:26,960 --> 00:07:32,220
will automatically trigger whenever something uploaded into your S3.

129
00:07:32,770 --> 00:07:34,235
Right?

130
00:07:34,235 --> 00:07:35,600
See guys, you have a,

131
00:07:35,600 --> 00:07:37,220
suppose let me take PyCharm,

132
00:07:37,220 --> 00:07:38,465
you have a pie chart editor.

133
00:07:38,465 --> 00:07:40,490
So to run your code, what you are doing manually,

134
00:07:40,490 --> 00:07:41,915
you are running same way.

135
00:07:41,915 --> 00:07:44,345
Manually, you can trigger your code,

136
00:07:44,345 --> 00:07:47,900
or you can do some settings such

137
00:07:47,900 --> 00:07:52,940
that automatically your Lambda code will execute when something happens.

138
00:07:52,940 --> 00:07:55,610
So you had to write that when something

139
00:07:55,610 --> 00:07:58,745
happens requirement you have to write for your end of this lambda.

140
00:07:58,745 --> 00:08:00,230
So while going forward,

141
00:08:00,230 --> 00:08:02,240
you can see how you can trigger

142
00:08:02,240 --> 00:08:06,780
your idlis lambda function automatically based on your requirement.

143
00:08:07,600 --> 00:08:10,715
Right? Fine.

144
00:08:10,715 --> 00:08:14,360
Now we are saying that we are going to write

145
00:08:14,360 --> 00:08:18,320
some automation code in your Oedipus Lambda function.

146
00:08:18,320 --> 00:08:21,365
And we are going to execute that with your end of this lambda.

147
00:08:21,365 --> 00:08:22,760
That's okay.

148
00:08:22,760 --> 00:08:25,340
But we know that whenever,

149
00:08:25,340 --> 00:08:31,295
if we want to execute some code against your AWS or cone,

150
00:08:31,295 --> 00:08:37,685
we have to provide either credentials or IAM rule.

151
00:08:37,685 --> 00:08:39,365
Right?

152
00:08:39,365 --> 00:08:41,945
So for your inverse lambda,

153
00:08:41,945 --> 00:08:44,135
you are going to write your code.

154
00:08:44,135 --> 00:08:47,570
You're going to implement your Python Bhutto three scripts, suppose.

155
00:08:47,570 --> 00:08:50,615
So while implementing your Python Bhutto three script,

156
00:08:50,615 --> 00:08:55,280
you have to provide your credentials for your editors lambda function.

157
00:08:55,280 --> 00:09:01,490
Or you can create an IAM role

158
00:09:01,490 --> 00:09:08,150
and attach that role to your edit was lambda function such that it will run your core.

159
00:09:08,150 --> 00:09:13,850
Okay, so guys, now assume that I am going to write some Python script. How about 2-3?

160
00:09:13,850 --> 00:09:17,390
Skip on my local server while writing our Python goto, the risk of two,

161
00:09:17,390 --> 00:09:20,765
we are going to provide credentials in the form of access keys,

162
00:09:20,765 --> 00:09:25,955
or we will configure access keys on local server with some logical profile names.

163
00:09:25,955 --> 00:09:29,345
And we are giving that profile name while implementing our code.

164
00:09:29,345 --> 00:09:31,610
We have seen this procedure till this moment.

165
00:09:31,610 --> 00:09:35,390
And of course we have seen by creating one of

166
00:09:35,390 --> 00:09:39,320
the IAM role and we attach it that I am bold to one of the EC2 instance.

167
00:09:39,320 --> 00:09:41,615
From there, we ran our code.

168
00:09:41,615 --> 00:09:43,700
We have seen this also right.

169
00:09:43,700 --> 00:09:50,000
Now, the same procedure you can do from your AWS Lambda function also while running,

170
00:09:50,000 --> 00:09:52,805
you are edible is Bhutto three scripts.

171
00:09:52,805 --> 00:09:54,005
Right?

172
00:09:54,005 --> 00:10:03,020
Suppose, let me open my AWS or cone, right?

173
00:10:03,020 --> 00:10:05,255
Just to go and such here in services,

174
00:10:05,255 --> 00:10:07,445
you can see under compute,

175
00:10:07,445 --> 00:10:08,870
you have a lambda function.

176
00:10:08,870 --> 00:10:11,480
I mean, lambdas are we just click on that.

177
00:10:11,480 --> 00:10:13,610
So as of now,

178
00:10:13,610 --> 00:10:14,960
I'm not sure where omega,

179
00:10:14,960 --> 00:10:17,915
i don't have any lambda functions in my account.

180
00:10:17,915 --> 00:10:20,060
Now just to create a function,

181
00:10:20,060 --> 00:10:21,920
creating a function is nothing but you are going to

182
00:10:21,920 --> 00:10:24,770
create your NLS lambda function or code.

183
00:10:24,770 --> 00:10:27,390
Right? Just click on that.

184
00:10:27,660 --> 00:10:30,775
So here if you select this one,

185
00:10:30,775 --> 00:10:34,435
very first option, you are going to write each and every step.

186
00:10:34,435 --> 00:10:36,520
You can select this, you know,

187
00:10:36,520 --> 00:10:38,935
it's like already predefined formats,

188
00:10:38,935 --> 00:10:42,595
quotes, or then you can edit and you can use that for your requirement.

189
00:10:42,595 --> 00:10:45,895
And now also you can browse our wireless app repository.

190
00:10:45,895 --> 00:10:50,440
So for time being, I am going to work with the very first option from scratch.

191
00:10:50,440 --> 00:10:56,110
I want to implement my code C while writing our code even on our local server,

192
00:10:56,110 --> 00:10:59,920
what we are doing, we are giving first some Python script name, right?

193
00:10:59,920 --> 00:11:05,830
Let's say demo Python lambda function.

194
00:11:05,830 --> 00:11:10,410
He had just assumed that you are code name is demo Python lambda function.

195
00:11:10,410 --> 00:11:14,780
So you're going to write lambda in terms of Python program, right?

196
00:11:14,780 --> 00:11:16,580
But you have to set up your runtime.

197
00:11:16,580 --> 00:11:21,710
So see already these type of languages are already supported by

198
00:11:21,710 --> 00:11:24,080
your AWS Lambda directly how to choose

199
00:11:24,080 --> 00:11:26,750
your required language while implementing your core.

200
00:11:26,750 --> 00:11:31,235
I'm going to implement my code in terms of Python and data in Python,

201
00:11:31,235 --> 00:11:33,365
you can select any one of the wash. And here,

202
00:11:33,365 --> 00:11:35,855
so I'm going to select for timing to dot seven.

203
00:11:35,855 --> 00:11:40,310
Now just create a function, right?

204
00:11:40,310 --> 00:11:43,160
First observed the guide will take some time to create

205
00:11:43,160 --> 00:11:47,010
your function once it is done, right?

206
00:11:48,100 --> 00:11:51,600
Just give me a second.

207
00:11:51,700 --> 00:11:55,055
Still. It has been created.

208
00:11:55,055 --> 00:11:58,370
Now observe that don't go with any options as of now.

209
00:11:58,370 --> 00:12:01,175
We will go with step-by-step, just come down.

210
00:12:01,175 --> 00:12:02,930
See, now this is,

211
00:12:02,930 --> 00:12:05,120
there is a some editor here already.

212
00:12:05,120 --> 00:12:08,165
Some initial function is there,

213
00:12:08,165 --> 00:12:10,640
or handler is there, right?

214
00:12:10,640 --> 00:12:13,295
So you can go, you can edit your code here.

215
00:12:13,295 --> 00:12:15,305
If you observe a year handler,

216
00:12:15,305 --> 00:12:17,780
lambda function dot Lambda handler.

217
00:12:17,780 --> 00:12:20,930
So this Lambda handler is there somewhere here.

218
00:12:20,930 --> 00:12:23,540
So whenever if you run your code in

219
00:12:23,540 --> 00:12:26,690
your lambda automatically the execution starts from here.

220
00:12:26,690 --> 00:12:31,460
I mean the function execution start function will start from this function.

221
00:12:31,460 --> 00:12:36,395
If you observe they are giving default output or written value as in terms of JSON.

222
00:12:36,395 --> 00:12:40,250
So as of now, I'm not going to use that, just delete them.

223
00:12:40,250 --> 00:12:41,720
Of course I am as of now,

224
00:12:41,720 --> 00:12:44,315
I don't want this JSON as well, right?

225
00:12:44,315 --> 00:12:47,030
Let me write simply one Python, Bhutto,

226
00:12:47,030 --> 00:12:51,710
three scraped to list out all your EC2 instances which are under one region.

227
00:12:51,710 --> 00:12:53,585
So you know you need both O3,

228
00:12:53,585 --> 00:12:57,080
you don't worry about your voter three already bought O3 is there with

229
00:12:57,080 --> 00:13:01,100
your lambda function directly import that boat A3, right?

230
00:13:01,100 --> 00:13:06,560
So guys, suppose while writing our aid of place moto three scripts on our local server,

231
00:13:06,560 --> 00:13:07,580
what we are doing first,

232
00:13:07,580 --> 00:13:09,800
we are creating a session, right?

233
00:13:09,800 --> 00:13:11,030
Let me create that session.

234
00:13:11,030 --> 00:13:20,660
Session dot, sorry, moto three dots session dot, session guys here.

235
00:13:20,660 --> 00:13:24,755
You know, for while creating your customization,

236
00:13:24,755 --> 00:13:27,110
you can provide your credentials

237
00:13:27,110 --> 00:13:31,190
or you can also provide your profile names on your local server.

238
00:13:31,190 --> 00:13:33,320
But yeah, you don't have any option to provide

239
00:13:33,320 --> 00:13:36,080
your profile names instead of that directly.

240
00:13:36,080 --> 00:13:37,400
How to provide your credentials?

241
00:13:37,400 --> 00:13:41,930
Of course, providing credentials directly inside of your script is not a good practice.

242
00:13:41,930 --> 00:13:44,195
But just for our understanding purpose,

243
00:13:44,195 --> 00:13:49,760
I'm going to provide AWS access key ID equals two.

244
00:13:49,760 --> 00:13:51,500
I will get it from my account.

245
00:13:51,500 --> 00:13:56,300
Then AWS secret.

246
00:13:56,300 --> 00:13:58,760
Access key is you have to grow it directly.

247
00:13:58,760 --> 00:14:01,025
You are keys here, right?

248
00:14:01,025 --> 00:14:10,820
Let me open my credentials Pysch let me click on this, my security credentials.

249
00:14:10,820 --> 00:14:17,195
Just go to that and tried to collect your access keys.

250
00:14:17,195 --> 00:14:21,000
Now I am going to create new access case.

251
00:14:21,190 --> 00:14:25,860
Right? So this is my access key ID.

252
00:14:26,050 --> 00:14:34,530
Just provide directly here and take your secret access key.

253
00:14:38,080 --> 00:14:42,125
That's right.

254
00:14:42,125 --> 00:14:51,630
Now, what I'm doing is I'm going to create my EC2 Console using resource method.

255
00:14:51,850 --> 00:14:54,169
For your ec2.

256
00:14:54,169 --> 00:14:59,765
If we want to write surveys underscore name equals two, is retune them.

257
00:14:59,765 --> 00:15:01,535
Regina's coordinate.

258
00:15:01,535 --> 00:15:04,610
Sega is how we are writing the code on your local server.

259
00:15:04,610 --> 00:15:07,190
The semi are going to write a only thing is you

260
00:15:07,190 --> 00:15:10,800
are going to start your code from dysfunction. That's a.

261
00:15:10,960 --> 00:15:13,760
Then here, let me write,

262
00:15:13,760 --> 00:15:16,505
giving US East One.

263
00:15:16,505 --> 00:15:20,270
Of course you can also write your code and you're gonna exclude from here,

264
00:15:20,270 --> 00:15:24,230
but the thing is only Lambda handler will handle the Logs.

265
00:15:24,230 --> 00:15:27,170
That's why you have to write the core under your Lambda handler.

266
00:15:27,170 --> 00:15:34,170
Now see, I'm trying to list out my instances from this easy to console.

267
00:15:34,420 --> 00:15:37,595
Instances dot all.

268
00:15:37,595 --> 00:15:41,930
Let me print each instance and its id.

269
00:15:41,930 --> 00:15:43,100
Right?

270
00:15:43,100 --> 00:15:50,150
Just save it. Okay, nowadays,

271
00:15:50,150 --> 00:15:53,105
if you want to run this manually, right?

272
00:15:53,105 --> 00:15:56,540
I mean, you can run by your cells the score.

273
00:15:56,540 --> 00:15:58,325
You have to test it.

274
00:15:58,325 --> 00:16:00,275
So once if you enter test,

275
00:16:00,275 --> 00:16:03,710
it is asking configured testing event.

276
00:16:03,710 --> 00:16:06,140
So even as of now,

277
00:16:06,140 --> 00:16:08,570
just assume that it is a one JSON which is having

278
00:16:08,570 --> 00:16:12,080
key-value pair representation to run your code.

279
00:16:12,080 --> 00:16:14,390
N equal, which is there in your LLS lambda E,

280
00:16:14,390 --> 00:16:17,510
hard to provide at least DMI went, right,

281
00:16:17,510 --> 00:16:21,530
let me take some sample event. That's it.

282
00:16:21,530 --> 00:16:23,615
Sorry.

283
00:16:23,615 --> 00:16:26,870
I have to say too, that just come down and you

284
00:16:26,870 --> 00:16:30,170
create whether there is a use or not, that's a secondary.

285
00:16:30,170 --> 00:16:32,030
First of all, it's needs one event.

286
00:16:32,030 --> 00:16:32,855
That's it.

287
00:16:32,855 --> 00:16:36,270
So we created that. Now let me test it.

288
00:16:36,940 --> 00:16:38,720
Right.

289
00:16:38,720 --> 00:16:45,965
See, it is showing something called invalidate a syntax error in model lambda a function.

290
00:16:45,965 --> 00:16:49,020
Let me check it. What is the syntax error?

291
00:16:59,920 --> 00:17:03,710
Ok, for each instance IA,

292
00:17:03,710 --> 00:17:05,075
we misread in here.

293
00:17:05,075 --> 00:17:06,320
In for loop.

294
00:17:06,320 --> 00:17:07,880
Now save it.

295
00:17:07,880 --> 00:17:10,290
And tenth street.

296
00:17:10,570 --> 00:17:14,300
Of course, you can also see your logo and a bill of this here,

297
00:17:14,300 --> 00:17:20,840
I'll see here 3D saying that task time route after three seconds.

298
00:17:20,840 --> 00:17:23,885
So by default, if you create any lambda function,

299
00:17:23,885 --> 00:17:28,580
the execution time which is assigned for your lambda function is three seconds.

300
00:17:28,580 --> 00:17:31,670
But within three seconds you are not able to execute your core.

301
00:17:31,670 --> 00:17:35,390
Then you can change your time just by coming down here.

302
00:17:35,390 --> 00:17:37,220
Now I am going to use suppose three minutes,

303
00:17:37,220 --> 00:17:38,825
three seconds for my core.

304
00:17:38,825 --> 00:17:40,530
Save it.

305
00:17:40,870 --> 00:17:44,280
Right. Now, test it.

306
00:17:44,920 --> 00:17:47,360
Pays. You are having a lot of options yet.

307
00:17:47,360 --> 00:17:50,555
I'll go with step-by-step. Now see the output.

308
00:17:50,555 --> 00:17:53,579
You are able to get your instance IDs,

309
00:17:54,040 --> 00:18:00,360
but able to get your instance IDs, right?

310
00:18:00,550 --> 00:18:02,735
That's fine.

311
00:18:02,735 --> 00:18:05,790
Now what I'm doing is

312
00:18:06,070 --> 00:18:11,210
I will as I've no don't bother a bowtie well-written. We'll see that later.

313
00:18:11,210 --> 00:18:12,455
Nuts. Okay.

314
00:18:12,455 --> 00:18:13,805
Now if you come down,

315
00:18:13,805 --> 00:18:16,895
you're having different types of options and environment variables.

316
00:18:16,895 --> 00:18:20,150
You know, on your operating system you are having some a neutron into variables.

317
00:18:20,150 --> 00:18:22,910
So if you want to use your annual unmanned variables inside of

318
00:18:22,910 --> 00:18:24,830
your Python moto three are simply

319
00:18:24,830 --> 00:18:27,920
a Python script you're going to use waste module from there,

320
00:18:27,920 --> 00:18:30,800
you're going to use res.end neuron in your Python scripts.

321
00:18:30,800 --> 00:18:33,065
The same way you can provide some variables here.

322
00:18:33,065 --> 00:18:36,410
Let say suppose interrupt providing my,

323
00:18:36,410 --> 00:18:40,595
because see, suppose if I want to work with the access keys, my access keys,

324
00:18:40,595 --> 00:18:44,480
maybe sometimes if I create new access keys they will change or that I'm,

325
00:18:44,480 --> 00:18:48,500
I don't want to enter into my Python script and I don't want to change it here.

326
00:18:48,500 --> 00:18:54,800
Instead of that, you can pass externally AWS access key,

327
00:18:54,800 --> 00:18:58,205
that value we can provide here something, whatever the value.

328
00:18:58,205 --> 00:19:07,055
Then secret access key

329
00:19:07,055 --> 00:19:09,080
began provide something here.

330
00:19:09,080 --> 00:19:13,925
And you can access these values using your way is.na neuron meant method.

331
00:19:13,925 --> 00:19:14,720
Ok?

332
00:19:14,720 --> 00:19:17,240
So for timing, I'm not going to use it well going

333
00:19:17,240 --> 00:19:19,775
forward where it is required there, I will use that.

334
00:19:19,775 --> 00:19:21,260
If you want to provide some tags,

335
00:19:21,260 --> 00:19:22,310
you can provide tax 40.

336
00:19:22,310 --> 00:19:24,905
Well, edible is lambda, right?

337
00:19:24,905 --> 00:19:27,320
So if you want, write some description again, byte.

338
00:19:27,320 --> 00:19:30,215
See here, use an existing role, is there,

339
00:19:30,215 --> 00:19:33,950
say as of now how you're running your Python both rescued by providing

340
00:19:33,950 --> 00:19:37,535
your credentials of your account, right?

341
00:19:37,535 --> 00:19:40,775
So you are providing your credentials for your account.

342
00:19:40,775 --> 00:19:42,155
Instead of that, you know,

343
00:19:42,155 --> 00:19:46,535
we can also run our Python Bhutto that escaped using IAM roles.

344
00:19:46,535 --> 00:19:48,890
So if I don't want to provide credentials,

345
00:19:48,890 --> 00:19:51,690
now let me direct my credentials.

346
00:19:52,630 --> 00:20:00,815
I want to run my Python boatload risk based on IAM role.

347
00:20:00,815 --> 00:20:02,840
Now I am not giving any credentials here,

348
00:20:02,840 --> 00:20:09,500
but I want to run my Python Bordeaux Transcript by assigning some role.

349
00:20:09,500 --> 00:20:15,950
As of now, just assign some simple rule that is not having any permissions to work with.

350
00:20:15,950 --> 00:20:20,030
We are edible soko demo that is you don't worry about that.

351
00:20:20,030 --> 00:20:23,420
Okay. That's okay.

352
00:20:23,420 --> 00:20:27,005
You can also assign you are VPC in case if you want.

353
00:20:27,005 --> 00:20:27,920
Okay.

354
00:20:27,920 --> 00:20:29,930
That's fine. As of now.

355
00:20:29,930 --> 00:20:32,480
No, let me go with your AWS account.

356
00:20:32,480 --> 00:20:33,260
Okay.

357
00:20:33,260 --> 00:20:38,840
Now let me delete my recently created case c. I'm going with rules.

358
00:20:38,840 --> 00:20:41,360
Let me create my role first.

359
00:20:41,360 --> 00:20:43,295
So I'm going to create a role.

360
00:20:43,295 --> 00:20:50,225
The purpose of my role is I want to execute code from my analyst lambda.

361
00:20:50,225 --> 00:20:52,970
So I need to create a role for my AWS Lambda function.

362
00:20:52,970 --> 00:20:57,920
Just simply click on Create role and select. Lambda rule.

363
00:20:57,920 --> 00:21:02,855
Allows lambda functions to call NLS services on your behalf.

364
00:21:02,855 --> 00:21:06,005
So if you create some roll here, right?

365
00:21:06,005 --> 00:21:07,580
If you create some roll here,

366
00:21:07,580 --> 00:21:09,080
and if you assign these royalty or

367
00:21:09,080 --> 00:21:11,540
lambda function now you are adding plus lambda function.

368
00:21:11,540 --> 00:21:15,680
We'll get the access to work with your LLS services on your behalf.

369
00:21:15,680 --> 00:21:19,380
I'll just next to permissions.

370
00:21:19,900 --> 00:21:25,715
So what are the access you want to provide for your NLS lambda using this role,

371
00:21:25,715 --> 00:21:31,370
I want to use simply suppose only to walk with EC2 instances, right?

372
00:21:31,370 --> 00:21:35,360
Ec2, full access only for EC2.

373
00:21:35,360 --> 00:21:40,220
Next, tags review, right,

374
00:21:40,220 --> 00:21:42,860
role_name I'm taking for

375
00:21:42,860 --> 00:21:49,190
my lambda EC2 to work with the sort of just I am taking some name.

376
00:21:49,190 --> 00:21:50,270
If you want to add some description,

377
00:21:50,270 --> 00:21:53,190
you can ride here, create a road.

378
00:21:54,400 --> 00:21:57,845
Right now your role has been created.

379
00:21:57,845 --> 00:22:01,310
That is, for my lambda,

380
00:22:01,310 --> 00:22:04,115
easy to just go to your Lambda function,

381
00:22:04,115 --> 00:22:10,070
come down and see here you are having use an existing role and tried

382
00:22:10,070 --> 00:22:17,030
to such hear role,

383
00:22:17,030 --> 00:22:18,875
role. Where is our role?

384
00:22:18,875 --> 00:22:21,990
Let me refresh it

385
00:22:30,190 --> 00:22:33,480
and now go down.

386
00:22:33,730 --> 00:22:36,125
So this is our previous score.

387
00:22:36,125 --> 00:22:36,860
Okay.

388
00:22:36,860 --> 00:22:38,645
So if you want, I will,

389
00:22:38,645 --> 00:22:42,140
I don't want to, because you are credentials or you can take it no problem.

390
00:22:42,140 --> 00:22:44,855
By delta, right? Yeah, see here,

391
00:22:44,855 --> 00:22:46,685
use an existing role.

392
00:22:46,685 --> 00:22:49,055
Now, click on here and select here.

393
00:22:49,055 --> 00:22:50,450
So now you are always appearing.

394
00:22:50,450 --> 00:22:53,615
You're just select this role and save it.

395
00:22:53,615 --> 00:22:57,830
Okay, now come here in case if you are using your role,

396
00:22:57,830 --> 00:23:00,480
you should not use these two lines.

397
00:23:02,140 --> 00:23:05,930
Okay, directly create your EC2 Console.

398
00:23:05,930 --> 00:23:09,815
So guys, we have seen in our course known here.

399
00:23:09,815 --> 00:23:11,195
I mean not here.

400
00:23:11,195 --> 00:23:15,215
Yeah, I am rose to executing Python Bordeaux three scripts.

401
00:23:15,215 --> 00:23:16,700
So in case if you assign,

402
00:23:16,700 --> 00:23:18,860
you are a IAM role for EC2 instance,

403
00:23:18,860 --> 00:23:20,570
how could we have seen now,

404
00:23:20,570 --> 00:23:26,645
same way if I assign my role to your EDL is lambda functions are already assigned here.

405
00:23:26,645 --> 00:23:27,455
Role.

406
00:23:27,455 --> 00:23:32,960
Then how can I create my UC to console directly how to create using default session.

407
00:23:32,960 --> 00:23:36,140
So that session we will get the credentials using your role.

408
00:23:36,140 --> 00:23:37,430
You don't bother about that.

409
00:23:37,430 --> 00:23:43,235
Simply moto three dot resource.

410
00:23:43,235 --> 00:23:45,680
You were EC2.

411
00:23:45,680 --> 00:23:49,730
Under US East one region.

412
00:23:49,730 --> 00:23:51,590
Save it.

413
00:23:51,590 --> 00:23:55,560
Now I am going to run the code just up there, the output.

414
00:23:56,890 --> 00:23:59,460
I am running.

415
00:24:01,360 --> 00:24:05,375
C, the output execution details.

416
00:24:05,375 --> 00:24:07,700
You got your instance cities.

417
00:24:07,700 --> 00:24:08,615
Okay?

418
00:24:08,615 --> 00:24:10,940
No, let me do one more thing.

419
00:24:10,940 --> 00:24:16,430
So as of no, you're Rollies having access to work with your EC2 instances.

420
00:24:16,430 --> 00:24:19,519
But my requirement is let me create.

421
00:24:19,519 --> 00:24:22,830
I'm going to come into this code.

422
00:24:23,350 --> 00:24:26,640
Let me comment this.

423
00:24:29,650 --> 00:24:35,640
Now I'm going to create S3 console using your resource object.

424
00:24:36,010 --> 00:24:40,265
That is here we how to use default is to shun,

425
00:24:40,265 --> 00:24:43,205
you don't need to create a session ECOSOC border, they don't sessions something.

426
00:24:43,205 --> 00:24:46,940
Whenever if you assign role for your editor is lambda function or some

427
00:24:46,940 --> 00:24:48,995
S3 or some you're EC2 instance

428
00:24:48,995 --> 00:24:51,470
there in case if you're writing moto three scraped directly,

429
00:24:51,470 --> 00:24:52,955
you have to take a session.

430
00:24:52,955 --> 00:24:57,980
Defaults Russian default section is nothing but directly creating your required console.

431
00:24:57,980 --> 00:25:03,035
Creation of your session will take care about by your boater three from the rule.

432
00:25:03,035 --> 00:25:07,055
Now I want to work with this three, right?

433
00:25:07,055 --> 00:25:10,115
So I want to walk under this region.

434
00:25:10,115 --> 00:25:12,020
Now let me do one thing.

435
00:25:12,020 --> 00:25:19,170
I want to list out all my buckets which are there in your S3 under US East one.

436
00:25:19,930 --> 00:25:24,875
See if you observe clearly, right.

437
00:25:24,875 --> 00:25:28,085
You are Rollies having access to work with the Institute.

438
00:25:28,085 --> 00:25:32,225
But now I'm creating lists out your buckets.

439
00:25:32,225 --> 00:25:34,715
Now let me run this and see the output what you are having,

440
00:25:34,715 --> 00:25:36,995
you are getting some exceptions.

441
00:25:36,995 --> 00:25:39,815
Let me show that C.

442
00:25:39,815 --> 00:25:43,670
Just go down and see the complete client error.

443
00:25:43,670 --> 00:25:47,930
An error occurred while I'm calling the list bucket operation access denied because

444
00:25:47,930 --> 00:25:52,985
your role is not having to access your S3 buckets.

445
00:25:52,985 --> 00:25:57,365
Let me go and attach some new policy for your role.

446
00:25:57,365 --> 00:26:01,685
This is the roll. This role we assigned for our intellect lambda function.

447
00:26:01,685 --> 00:26:05,960
Now what I'm doing is I'm going to do one more policy as of no,

448
00:26:05,960 --> 00:26:08,420
your policy is Amazon EC2 full access.

449
00:26:08,420 --> 00:26:12,230
Now I am going to attach one more policy for my this.

450
00:26:12,230 --> 00:26:15,544
So let me take S3 policy.

451
00:26:15,544 --> 00:26:19,010
I'm assigning now for my role to policies.

452
00:26:19,010 --> 00:26:24,210
One is to work with EC2 and one more is to work with S3, right?

453
00:26:26,200 --> 00:26:31,685
Let me open your C and C. How many policies or lead to policies, lauren?

454
00:26:31,685 --> 00:26:35,000
Now, let me retest it.

455
00:26:35,000 --> 00:26:40,160
See now you are able to get your buckets because we have changed the role policies.

456
00:26:40,160 --> 00:26:42,920
So I attached policies.

457
00:26:42,920 --> 00:26:46,040
One is to work with EC2 and one more is to work with this three.

458
00:26:46,040 --> 00:26:46,715
Okay?

459
00:26:46,715 --> 00:26:50,180
So guys, simply you have to remember that while going forward,

460
00:26:50,180 --> 00:26:52,100
not only here, even in your real time,

461
00:26:52,100 --> 00:26:55,655
you're not going to work with your credentials using, I mean,

462
00:26:55,655 --> 00:26:57,890
from your kiddos lambda function always you'll

463
00:26:57,890 --> 00:27:00,380
assign some role for your EDL is lambda function.

464
00:27:00,380 --> 00:27:02,075
And from the role,

465
00:27:02,075 --> 00:27:03,875
you're going to create your default session.

466
00:27:03,875 --> 00:27:07,550
From the default session we are going to implement your Python boat O3 script.

467
00:27:07,550 --> 00:27:09,545
So make sure, you know,

468
00:27:09,545 --> 00:27:12,620
whenever if you're trying to write your code on your Oedipus lambda,

469
00:27:12,620 --> 00:27:14,539
you How to Create directly.

470
00:27:14,539 --> 00:27:16,205
You are default session.

471
00:27:16,205 --> 00:27:20,430
From that you have to create your required console in this way.

472
00:27:20,470 --> 00:27:22,715
Okay?

473
00:27:22,715 --> 00:27:26,730
Okay guys, thank you for watching this video.

