1
00:00:00,000 --> 00:00:07,020
Friends here we are implementing Python Botox to delete unused and untagged EBS volumes.

2
00:00:07,020 --> 00:00:08,850
Let me open my sublime text.

3
00:00:08,850 --> 00:00:15,510
And here we are implementing this script using a resource as well as client objects.

4
00:00:15,510 --> 00:00:17,775
So first let me import Bhutto three,

5
00:00:17,775 --> 00:00:19,755
and let me create my console.

6
00:00:19,755 --> 00:00:23,190
I mean AWS management console object equals two,

7
00:00:23,190 --> 00:00:24,900
moto three dot, dot,

8
00:00:24,900 --> 00:00:28,340
dot session then just provide you a profile name.

9
00:00:28,340 --> 00:00:32,915
So here I am taking EC2 dollar per IAM profile name,

10
00:00:32,915 --> 00:00:35,915
then see if you want to work with the volumes.

11
00:00:35,915 --> 00:00:38,525
Volumes are there under your EC2 Console.

12
00:00:38,525 --> 00:00:40,730
That's why let me create EC2 Console.

13
00:00:40,730 --> 00:00:44,690
So I'm creating EC2 Console for resource object first,

14
00:00:44,690 --> 00:00:46,790
then AWS management console,

15
00:00:46,790 --> 00:00:51,305
then resource, then service name.

16
00:00:51,305 --> 00:00:56,765
So we want to work with EC2 service because volumes or present in insitu console,

17
00:00:56,765 --> 00:00:59,105
then select your required region.

18
00:00:59,105 --> 00:01:03,875
So I want to work under the region name called US East one.

19
00:01:03,875 --> 00:01:09,700
So whatever the region you just take that. Now.

20
00:01:09,700 --> 00:01:16,000
So before going to delete your unused untagged EBS volumes First,

21
00:01:16,000 --> 00:01:18,790
let me collect all EBS volumes.

22
00:01:18,790 --> 00:01:21,070
So to collect your all EBS volumes,

23
00:01:21,070 --> 00:01:23,455
you had to use collection object.

24
00:01:23,455 --> 00:01:29,455
Let me open the word photo documentation and let me enter into available services,

25
00:01:29,455 --> 00:01:31,940
then select your EC2.

26
00:01:33,540 --> 00:01:36,355
And here we are implementing using resource.

27
00:01:36,355 --> 00:01:39,860
Then let me open resource documentation.

28
00:01:40,050 --> 00:01:43,405
And here go to last.

29
00:01:43,405 --> 00:01:46,510
Because third set in thoughts that we have collections.

30
00:01:46,510 --> 00:01:55,130
See that volumes is they're open that and there is a method called all or filter, right?

31
00:01:55,130 --> 00:01:59,180
Or limit or pays size, whatever it may be.

32
00:01:59,180 --> 00:02:02,360
Now, let me take all first.

33
00:02:02,360 --> 00:02:05,045
Simply, I'm taking for

34
00:02:05,045 --> 00:02:14,720
each volume in your EC2 Console a resource object dot volumes,

35
00:02:14,720 --> 00:02:17,630
collection object dot all I want to see all.

36
00:02:17,630 --> 00:02:20,060
Then print you are each volume.

37
00:02:20,060 --> 00:02:21,605
And on this object,

38
00:02:21,605 --> 00:02:24,155
Johann number of operations.

39
00:02:24,155 --> 00:02:26,810
So if you want to see you can do here DAR off,

40
00:02:26,810 --> 00:02:30,530
you are each volume or in your documentation itself,

41
00:02:30,530 --> 00:02:33,140
you can see that C under EC2,

42
00:02:33,140 --> 00:02:35,375
if you go down somewhere, you how volume.

43
00:02:35,375 --> 00:02:39,905
So this is the object which is creating for each and every volume object.

44
00:02:39,905 --> 00:02:43,025
Now on that, see that there is ID.

45
00:02:43,025 --> 00:02:45,320
These all are the operations.

46
00:02:45,320 --> 00:02:47,585
Again here also three sets.

47
00:02:47,585 --> 00:02:51,095
So I want to print ID and what is the state?

48
00:02:51,095 --> 00:02:52,250
Then?

49
00:02:52,250 --> 00:02:55,355
Let me print your each volume id comma,

50
00:02:55,355 --> 00:02:58,400
each volume dot state.

51
00:02:58,400 --> 00:03:02,000
And after the output c,

52
00:03:02,000 --> 00:03:04,220
we are getting four volumes.

53
00:03:04,220 --> 00:03:05,810
And out of four volumes,

54
00:03:05,810 --> 00:03:09,695
three volumes are available and one volume is in use.

55
00:03:09,695 --> 00:03:12,965
That means these three are unused volumes.

56
00:03:12,965 --> 00:03:14,225
Fine.

57
00:03:14,225 --> 00:03:17,990
Now let me open my Database Management Console and go to volumes.

58
00:03:17,990 --> 00:03:20,135
See that how many volumes are there?

59
00:03:20,135 --> 00:03:23,780
Yes, four volumes are there out of which one is in use

60
00:03:23,780 --> 00:03:27,409
remaining all are available unused volumes.

61
00:03:27,409 --> 00:03:28,325
Now.

62
00:03:28,325 --> 00:03:32,180
As of now because of all you are going to get all the volumes.

63
00:03:32,180 --> 00:03:34,220
But I need to get only available volumes.

64
00:03:34,220 --> 00:03:40,260
I don't want to get in use volumes only unused volumes I need to get then apply filter.

65
00:03:40,260 --> 00:03:44,590
Dot filter method apply here filters.

66
00:03:44,590 --> 00:03:46,210
So filter c goes to list.

67
00:03:46,210 --> 00:03:52,480
Let me take some filter for EBS unused.

68
00:03:52,480 --> 00:03:55,090
I'm taking that as a filter name.

69
00:03:55,090 --> 00:03:57,760
Then how to create this filter c,

70
00:03:57,760 --> 00:04:01,825
We know that for each filter you have a standard syntax, that is a dictionary.

71
00:04:01,825 --> 00:04:05,380
In the dictionary, how two keys name, clue, right?

72
00:04:05,380 --> 00:04:07,375
What, what is the name here?

73
00:04:07,375 --> 00:04:09,250
Then values.

74
00:04:09,250 --> 00:04:10,960
And these values is a list.

75
00:04:10,960 --> 00:04:12,970
So first, if you follow this syntax,

76
00:04:12,970 --> 00:04:15,820
then it is very easy to create your fetus.

77
00:04:15,820 --> 00:04:19,225
Now go to your documentation.

78
00:04:19,225 --> 00:04:21,325
Here, filters are there.

79
00:04:21,325 --> 00:04:23,310
So filters, you can apply filters.

80
00:04:23,310 --> 00:04:26,390
Then what is the name you can provide here as of now,

81
00:04:26,390 --> 00:04:28,895
what is your requirement based on state?

82
00:04:28,895 --> 00:04:31,940
You need that then such here somewhere.

83
00:04:31,940 --> 00:04:33,845
See that status.

84
00:04:33,845 --> 00:04:36,725
Status is the name for your filter.

85
00:04:36,725 --> 00:04:40,039
If the status is available,

86
00:04:40,039 --> 00:04:43,280
then I want to display that c just right here.

87
00:04:43,280 --> 00:04:47,315
Status, then year values just take available.

88
00:04:47,315 --> 00:04:53,735
I want to get only unused volumes means available volumes.

89
00:04:53,735 --> 00:04:56,255
Now save it and run it and see that.

90
00:04:56,255 --> 00:04:59,180
Now you're going to get only available volumes.

91
00:04:59,180 --> 00:05:00,425
That's fine.

92
00:05:00,425 --> 00:05:02,570
But along with available volumes,

93
00:05:02,570 --> 00:05:06,725
so I need to get my untagged volumes.

94
00:05:06,725 --> 00:05:10,410
See, suppose if you search here, if you observe here.

95
00:05:11,500 --> 00:05:14,900
Let me such all the volumes.

96
00:05:14,900 --> 00:05:17,075
C4, second volume.

97
00:05:17,075 --> 00:05:20,825
Here we have a tag called do not delete it.

98
00:05:20,825 --> 00:05:23,495
That means even though it is available unused,

99
00:05:23,495 --> 00:05:26,495
I don't want to delete it because all it tanks are there.

100
00:05:26,495 --> 00:05:27,710
Now.

101
00:05:27,710 --> 00:05:34,355
You need to identify the volumes which are available and which are untagged.

102
00:05:34,355 --> 00:05:37,700
So now as of now you are getting all are available volumes,

103
00:05:37,700 --> 00:05:40,100
but one of the volume is having tags,

104
00:05:40,100 --> 00:05:44,180
but you need to separate that in a ticket only untagged volumes,

105
00:05:44,180 --> 00:05:48,150
then how you can write or we can modify your logic.

106
00:05:48,150 --> 00:05:53,350
And there is no filter to get

107
00:05:53,350 --> 00:05:59,365
volumes or any EC2 instances are snapshots which are not having tags.

108
00:05:59,365 --> 00:06:02,200
If you have a tag that you can identify by using filters, if you don't,

109
00:06:02,200 --> 00:06:05,335
how tasks, then there is no filter to identify that.

110
00:06:05,335 --> 00:06:10,105
Then what I will do is see that along with the word.

111
00:06:10,105 --> 00:06:12,880
There is one more option on each and every volume.

112
00:06:12,880 --> 00:06:15,850
Come here and see that tags.

113
00:06:15,850 --> 00:06:18,910
So I'm running, I'm dot packs I'm using.

114
00:06:18,910 --> 00:06:20,870
Now see the output.

115
00:06:21,960 --> 00:06:24,205
C for foster volume.

116
00:06:24,205 --> 00:06:27,565
There are no tags for second volume, there are some tags.

117
00:06:27,565 --> 00:06:29,215
Third volume there are no tags.

118
00:06:29,215 --> 00:06:37,015
Now what I will do is here I will take some if condition if each volume bags.

119
00:06:37,015 --> 00:06:43,690
If, if if each volume tags means if tags are there,

120
00:06:43,690 --> 00:06:45,190
then this will become true.

121
00:06:45,190 --> 00:06:48,025
If there are no tags, this will become failed.

122
00:06:48,025 --> 00:06:51,250
So not each volume tags.

123
00:06:51,250 --> 00:06:52,630
If there are no tags,

124
00:06:52,630 --> 00:06:54,775
then I want to display them.

125
00:06:54,775 --> 00:06:58,675
Now see the output. Now you are able to get

126
00:06:58,675 --> 00:07:02,665
the volumes I available volumes and which are not having any tags.

127
00:07:02,665 --> 00:07:06,160
So untagged unused volumes, you are able to get it.

128
00:07:06,160 --> 00:07:08,890
Now our next step is you need to delete that.

129
00:07:08,890 --> 00:07:11,420
So how we can delete it.

130
00:07:12,270 --> 00:07:15,220
See that anywhere individually,

131
00:07:15,220 --> 00:07:16,645
on each and every volume,

132
00:07:16,645 --> 00:07:20,230
you have an option called Where is it?

133
00:07:20,230 --> 00:07:21,955
Delete?

134
00:07:21,955 --> 00:07:24,985
See that operation?

135
00:07:24,985 --> 00:07:28,315
Simply volume dot delete.

136
00:07:28,315 --> 00:07:33,895
That's it. Now, let me do one thing.

137
00:07:33,895 --> 00:07:36,175
Print.

138
00:07:36,175 --> 00:07:44,380
Deleting unused and untagged volumes.

139
00:07:44,380 --> 00:07:45,980
That's it.

140
00:07:48,690 --> 00:07:51,640
Not to delete it. What is the syntax?

141
00:07:51,640 --> 00:07:55,820
Simply, you are each volume object dot delete.

142
00:07:56,610 --> 00:07:59,800
If you want to capture the response, you can capture it.

143
00:07:59,800 --> 00:08:01,795
But I'm not capturing as of now.

144
00:08:01,795 --> 00:08:04,990
That's it. So once it is done, your loop,

145
00:08:04,990 --> 00:08:08,425
then finally I can say deleted,

146
00:08:08,425 --> 00:08:17,620
all unused untagged volumes.

147
00:08:17,620 --> 00:08:22,970
That's a no, let me save it and run it and see the output.

148
00:08:24,090 --> 00:08:26,410
Now go to your console.

149
00:08:26,410 --> 00:08:29,665
And after that previously how 1234 volumes

150
00:08:29,665 --> 00:08:33,055
and out of which one is in use and one is having tag.

151
00:08:33,055 --> 00:08:35,800
So remaining two are not having tags on therein.

152
00:08:35,800 --> 00:08:37,435
Available state means unused,

153
00:08:37,435 --> 00:08:39,705
so those two has to delete.

154
00:08:39,705 --> 00:08:42,830
See there has been deleted.

155
00:08:42,830 --> 00:08:47,600
So these are simple way to delete your unused untagged volumes.

156
00:08:47,600 --> 00:08:50,060
And we implemented this using resource.

157
00:08:50,060 --> 00:08:56,465
You can also implement this by using the word client object as well.

158
00:08:56,465 --> 00:09:01,080
Now let me create your client object.

159
00:09:06,310 --> 00:09:09,500
So now I created analyst management console.

160
00:09:09,500 --> 00:09:12,930
Now I'm creating client object.

161
00:09:17,350 --> 00:09:18,935
Then.

162
00:09:18,935 --> 00:09:24,680
First of all, let me try to display all you are volumes which are there in your console.

163
00:09:24,680 --> 00:09:26,105
I mean, anywhere.

164
00:09:26,105 --> 00:09:29,640
So before that, let me create two volumes.

165
00:09:50,170 --> 00:09:54,440
And volumes are there available?

166
00:09:54,440 --> 00:09:57,510
Unused volumes.

167
00:09:57,850 --> 00:09:59,480
Fine.

168
00:09:59,480 --> 00:10:03,870
Now I want to implement same logic using client object.

169
00:10:03,870 --> 00:10:10,090
Now how we can display all 0s were available volumes using client first.

170
00:10:10,090 --> 00:10:12,310
Let me open your documentation.

171
00:10:12,310 --> 00:10:14,380
See everything is there in the document.

172
00:10:14,380 --> 00:10:21,500
The only thing you had to such it open inclined plane to documentation.

173
00:10:21,540 --> 00:10:25,720
Now, if you go with these all options somewhere,

174
00:10:25,720 --> 00:10:27,475
you will you are volumes.

175
00:10:27,475 --> 00:10:29,920
So describe volumes, is there somewhere?

176
00:10:29,920 --> 00:10:32,300
Let me find it.

177
00:10:32,640 --> 00:10:36,140
Describe volumes.

178
00:10:38,700 --> 00:10:40,285
See that?

179
00:10:40,285 --> 00:10:42,235
Described volumes.

180
00:10:42,235 --> 00:10:44,950
So first let me take only describe volumes.

181
00:10:44,950 --> 00:10:46,800
Then after that we will apply our feta.

182
00:10:46,800 --> 00:10:55,595
So simply print your EC2 Console client object dot or describe volumes.

183
00:10:55,595 --> 00:10:59,270
And for this, you're also having your response.

184
00:10:59,270 --> 00:11:01,040
What is the output you are going to get?

185
00:11:01,040 --> 00:11:03,035
Go down and see that.

186
00:11:03,035 --> 00:11:07,530
So under volumes, so I'm going to take that key.

187
00:11:09,760 --> 00:11:14,015
Now let me try to print the result as of now.

188
00:11:14,015 --> 00:11:19,640
Yes, you are getting your volumes and that is a list C that there is a list.

189
00:11:19,640 --> 00:11:24,300
Now, I will take for loop on this.

190
00:11:24,820 --> 00:11:29,595
For each item in.

191
00:11:29,595 --> 00:11:36,535
Now let me print each item and see the output first.

192
00:11:36,535 --> 00:11:38,860
So this is each item.

193
00:11:38,860 --> 00:11:40,645
So in this each eye down,

194
00:11:40,645 --> 00:11:43,855
very easy word ID.

195
00:11:43,855 --> 00:11:45,880
Where is your volume ID?

196
00:11:45,880 --> 00:11:47,275
So this is the volume ID.

197
00:11:47,275 --> 00:11:55,315
That means if we take a key called volume ID, you're going to get.

198
00:11:55,315 --> 00:11:58,820
So along with that, suppose I need bags also.

199
00:11:59,760 --> 00:12:03,790
Now see that tags,

200
00:12:03,790 --> 00:12:07,480
there is a tags option here for this instance.

201
00:12:07,480 --> 00:12:16,230
Now here there is no tag for this tags are there you are getting tax option.

202
00:12:16,540 --> 00:12:19,490
Now here, there is no tags.

203
00:12:19,490 --> 00:12:21,215
Then how you can identify,

204
00:12:21,215 --> 00:12:24,290
see that let me take these tags here.

205
00:12:24,290 --> 00:12:27,420
So each item,

206
00:12:31,810 --> 00:12:39,050
let me run a consider output key error,

207
00:12:39,050 --> 00:12:41,760
bags key's not there in that.

208
00:12:41,980 --> 00:12:50,015
Then I'm doing one thing. See there.

209
00:12:50,015 --> 00:12:56,890
If not bags, you are each item,

210
00:12:56,890 --> 00:12:59,360
then I want to print them.

211
00:13:00,060 --> 00:13:04,850
Then what is the meaning for that you're trying to print?

212
00:13:07,230 --> 00:13:09,415
So there isn't.

213
00:13:09,415 --> 00:13:13,400
For three volumes, you are not having tags.

214
00:13:13,590 --> 00:13:15,760
Right now.

215
00:13:15,760 --> 00:13:19,525
See 12343 volumes.

216
00:13:19,525 --> 00:13:21,385
You are not having tags.

217
00:13:21,385 --> 00:13:22,705
See that?

218
00:13:22,705 --> 00:13:26,965
This one, and this one,

219
00:13:26,965 --> 00:13:29,215
you don't have tags.

220
00:13:29,215 --> 00:13:31,735
And this one you don't have tags.

221
00:13:31,735 --> 00:13:33,730
But for last one your tags,

222
00:13:33,730 --> 00:13:36,580
but we need to delete only unused,

223
00:13:36,580 --> 00:13:37,875
But this isn't news right?

224
00:13:37,875 --> 00:13:40,350
Then how you can identify this?

225
00:13:40,660 --> 00:13:43,490
Let me print simply,

226
00:13:43,490 --> 00:13:45,455
you are each item once again.

227
00:13:45,455 --> 00:13:50,010
And let me break it just I want to see for first.

228
00:13:50,380 --> 00:13:55,625
And in this, if you have just some weight state is there, then what is the state?

229
00:13:55,625 --> 00:14:00,485
If steady available, then I want to delete that.

230
00:14:00,485 --> 00:14:07,950
That's why IF NOT bags in E tie down from your each item.

231
00:14:09,130 --> 00:14:15,270
If state is equals to. Let me copy.

232
00:14:17,710 --> 00:14:21,740
If steadies equals two available.

233
00:14:21,740 --> 00:14:24,690
Then remove this.

234
00:14:25,510 --> 00:14:29,130
Now see the output what you are going to get.

235
00:14:38,380 --> 00:14:44,610
123. So this is having tags, right?

236
00:14:45,040 --> 00:14:49,880
B7. What is the ID for this?

237
00:14:49,880 --> 00:14:53,915
Why we are getting for this B7.

238
00:14:53,915 --> 00:14:57,150
Let me print it once again.

239
00:15:04,860 --> 00:15:10,060
Sorry, I have taken spelling mistake TAG. Yes.

240
00:15:10,060 --> 00:15:11,800
It's my back.

241
00:15:11,800 --> 00:15:14,780
Now let me remove this.

242
00:15:15,840 --> 00:15:18,760
Now see that you are getting only two volumes,

243
00:15:18,760 --> 00:15:26,890
E to L and B to see that be tune no tags and it isn't available.

244
00:15:26,890 --> 00:15:29,530
E2e, no tags and it is available.

245
00:15:29,530 --> 00:15:31,210
Now we need to delete these two.

246
00:15:31,210 --> 00:15:34,345
Now in our hand we how your volume IDs,

247
00:15:34,345 --> 00:15:36,910
but how we can delete it using client object.

248
00:15:36,910 --> 00:15:41,650
Just go to your client page and see somebody how delete volumes.

249
00:15:41,650 --> 00:15:43,270
Just to go through all options,

250
00:15:43,270 --> 00:15:45,675
one so that you will get it you are required options somewhere.

251
00:15:45,675 --> 00:15:49,040
Delete volume. So here we can delete one-by-one volume,

252
00:15:49,040 --> 00:15:50,525
volume mighty how to provide.

253
00:15:50,525 --> 00:15:52,715
So client.read, delete volume,

254
00:15:52,715 --> 00:15:55,445
then volume ID equals to your volume ID.

255
00:15:55,445 --> 00:15:57,770
So after getting your volume,

256
00:15:57,770 --> 00:16:05,040
so I'm printing, deleting.

257
00:16:11,140 --> 00:16:14,060
That's it. Oh, let me delete it.

258
00:16:14,060 --> 00:16:21,089
Simply easy to console client object dot delete your volume.

259
00:16:22,120 --> 00:16:24,545
Then what is the volume ID?

260
00:16:24,545 --> 00:16:27,630
So from this you are getting your volume writing.

261
00:16:27,820 --> 00:16:30,050
That's it.

262
00:16:30,050 --> 00:16:32,360
Now after completion of this,

263
00:16:32,360 --> 00:16:35,240
you can print deleted,

264
00:16:35,240 --> 00:16:41,975
all unused and an volumes that say,

265
00:16:41,975 --> 00:16:45,290
no, let me save it and run it over the output.

266
00:16:45,290 --> 00:16:47,765
So deleting, deleting these two,

267
00:16:47,765 --> 00:16:50,660
go to here and then refresh it.

268
00:16:50,660 --> 00:16:55,475
Now, see that two volumes has been deleted.

269
00:16:55,475 --> 00:17:00,140
So as there is a simple way to implement your Python Bhutto transcripts using

270
00:17:00,140 --> 00:17:06,540
a resource as well as client to delete your unused untagged volumes. Okay. Thank you.

