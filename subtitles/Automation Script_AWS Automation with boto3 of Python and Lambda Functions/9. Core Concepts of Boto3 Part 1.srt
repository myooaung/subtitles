1
00:00:00,230 --> 00:00:04,545
Friends here we are discussing about moto three concepts.

2
00:00:04,545 --> 00:00:07,890
The core concepts of Bhutto three or like session,

3
00:00:07,890 --> 00:00:12,390
resource, client, meta, collections, waiters, and paginated.

4
00:00:12,390 --> 00:00:16,560
So if you want to work perfectly with your bot 2-3 to work with

5
00:00:16,560 --> 00:00:20,775
your elements RV says you have to know all these concepts for time being.

6
00:00:20,775 --> 00:00:23,910
We are working with the session and resource and declined.

7
00:00:23,910 --> 00:00:28,825
Let me go with the first concept of your Bhutto three, that is session.

8
00:00:28,825 --> 00:00:34,085
So simply, it is an AWS management console in our TMS.

9
00:00:34,085 --> 00:00:35,960
So in our previous video,

10
00:00:35,960 --> 00:00:41,030
we will discuss these concepts to work with particular AWS service.

11
00:00:41,030 --> 00:00:43,055
First, you had to get aid and his management console.

12
00:00:43,055 --> 00:00:45,185
Then you ought to enter into your, I am concerned.

13
00:00:45,185 --> 00:00:47,840
Now to create your adolescent management console,

14
00:00:47,840 --> 00:00:49,910
we are following this syntax.

15
00:00:49,910 --> 00:00:52,730
So this is nothing but a session.

16
00:00:52,730 --> 00:00:56,645
We got your AWS management console session using router cone.

17
00:00:56,645 --> 00:01:00,665
It can also create your database management console with particular IAM account.

18
00:01:00,665 --> 00:01:02,510
That is nothing but a session.

19
00:01:02,510 --> 00:01:05,000
You can take this variable name as session

20
00:01:05,000 --> 00:01:08,735
or your database management console itself. No problem.

21
00:01:08,735 --> 00:01:10,160
C.

22
00:01:10,160 --> 00:01:13,145
And you are creating the session,

23
00:01:13,145 --> 00:01:15,770
your analysts management console by providing

24
00:01:15,770 --> 00:01:19,205
some profile name which is configured on your host.

25
00:01:19,205 --> 00:01:21,890
So while configuring profile names on our host,

26
00:01:21,890 --> 00:01:25,145
we are passing credentials programmatic access keys.

27
00:01:25,145 --> 00:01:31,280
That means you are session stores configuration information.

28
00:01:31,280 --> 00:01:33,020
And using this session,

29
00:01:33,020 --> 00:01:37,760
we can create either resource or client objects or services.

30
00:01:37,760 --> 00:01:43,265
And moto three creates a default session for us when needed.

31
00:01:43,265 --> 00:01:45,950
As of now, I am not touching about default session.

32
00:01:45,950 --> 00:01:47,660
We'll discuss it later.

33
00:01:47,660 --> 00:01:51,660
See, let me do one thing.

34
00:01:56,340 --> 00:02:00,055
Suppose I want to create a session.

35
00:02:00,055 --> 00:02:02,485
I want to create a Dulles management console

36
00:02:02,485 --> 00:02:06,610
using root profile name or using some easy to develop her.

37
00:02:06,610 --> 00:02:10,330
See, we created, we configure different profile names right?

38
00:02:10,330 --> 00:02:16,405
Now, let me create AWS management console for root account.

39
00:02:16,405 --> 00:02:21,055
Yes, simply Bhutto 3.What session North session.

40
00:02:21,055 --> 00:02:23,410
Then there's simply providing a profile name.

41
00:02:23,410 --> 00:02:26,170
Suppose I am providing group profile.

42
00:02:26,170 --> 00:02:31,615
You can also create your AWS management console using your Butler IAM profiles.

43
00:02:31,615 --> 00:02:34,945
Suppose Bhutto three dot session,

44
00:02:34,945 --> 00:02:40,330
session profile name equals two.

45
00:02:40,330 --> 00:02:43,190
Suppose we have easy to dollar per asthma.

46
00:02:47,700 --> 00:02:51,220
So likewise, you can create any number of sessions in

47
00:02:51,220 --> 00:02:55,300
your one Python Bhutto transcript that is based on requirement.

48
00:02:55,300 --> 00:02:57,085
We can create a number of sessions.

49
00:02:57,085 --> 00:02:59,605
Okay, for timing, I'm commenting this.

50
00:02:59,605 --> 00:03:02,140
We have only root session route.

51
00:03:02,140 --> 00:03:05,155
With root, we created AWS management console.

52
00:03:05,155 --> 00:03:06,475
That's it.

53
00:03:06,475 --> 00:03:10,730
Then the next concept is the resource and declined.

54
00:03:10,860 --> 00:03:12,280
C.

55
00:03:12,280 --> 00:03:15,760
These two either resource our client objects,

56
00:03:15,760 --> 00:03:19,755
or useful to create particular AWS service console.

57
00:03:19,755 --> 00:03:25,235
Like I am console are easy to console are SNS console or DynamoDB console or RDS console.

58
00:03:25,235 --> 00:03:27,650
Whatever the console you want to create,

59
00:03:27,650 --> 00:03:30,785
you have to use either resource or client.

60
00:03:30,785 --> 00:03:32,675
From US session object,

61
00:03:32,675 --> 00:03:38,420
session I was getting nothing but you are AWS management console object from this.

62
00:03:38,420 --> 00:03:42,365
Suppose I want to create, I am console.

63
00:03:42,365 --> 00:03:48,185
And you can create this IAM console by using either resource or client.

64
00:03:48,185 --> 00:03:51,530
Now to differentiate that I'm taking I-I am console using

65
00:03:51,530 --> 00:03:58,535
a resource object equals to your AWS management console session using root,

66
00:03:58,535 --> 00:04:04,325
not resource, you can provide your resource name here.

67
00:04:04,325 --> 00:04:09,590
You can also write some option here called service underscore name equals two.

68
00:04:09,590 --> 00:04:12,440
I am, even if you skip that, no problem.

69
00:04:12,440 --> 00:04:15,935
And you can also provide here region name.

70
00:04:15,935 --> 00:04:19,235
In case if you don't provide any region aim here,

71
00:04:19,235 --> 00:04:25,190
it will select the default region which is there in the config file under dot AWS.

72
00:04:25,190 --> 00:04:26,720
Say for this particular profile,

73
00:04:26,720 --> 00:04:29,180
whatever the default region is there in your conflict,

74
00:04:29,180 --> 00:04:32,195
both profile config file that

75
00:04:32,195 --> 00:04:36,230
default agent it will select if you want to work with some other region name,

76
00:04:36,230 --> 00:04:38,000
you can provide your region name.

77
00:04:38,000 --> 00:04:42,470
Suppose I want to work with us east to and therefore I am,

78
00:04:42,470 --> 00:04:43,700
you don't have any I mean,

79
00:04:43,700 --> 00:04:45,710
there is no need to take any region him here, right.

80
00:04:45,710 --> 00:04:47,345
You can go with the default region name.

81
00:04:47,345 --> 00:04:49,880
But for any other services,

82
00:04:49,880 --> 00:04:51,455
right, you have to sell at region name.

83
00:04:51,455 --> 00:04:53,040
That's it.

84
00:04:53,140 --> 00:04:56,285
And same IAM console,

85
00:04:56,285 --> 00:04:59,495
you can also create using client object.

86
00:04:59,495 --> 00:05:00,935
So same syntax.

87
00:05:00,935 --> 00:05:03,590
The only thing is instead of a resource,

88
00:05:03,590 --> 00:05:06,755
you have to select the hard to type client.

89
00:05:06,755 --> 00:05:08,160
That's it.

90
00:05:09,190 --> 00:05:15,500
So you are having two types of options to create your particular AWS man,

91
00:05:15,500 --> 00:05:18,170
you particular AWS service console.

92
00:05:18,170 --> 00:05:20,945
Then which one is better?

93
00:05:20,945 --> 00:05:22,790
So before going into that,

94
00:05:22,790 --> 00:05:24,960
let me show you one thing.

95
00:05:27,660 --> 00:05:30,475
Let me enter into my Python terminal.

96
00:05:30,475 --> 00:05:33,310
I'm creating, I'm inputting Bhutto three.

97
00:05:33,310 --> 00:05:38,410
And I am creating my session AWS management console session with the root.

98
00:05:38,410 --> 00:05:43,255
And first let me show you what are the available options on this.

99
00:05:43,255 --> 00:05:51,265
You know, in Python we how BAR OR method to list out operations available on an object.

100
00:05:51,265 --> 00:05:53,650
C first thing in this,

101
00:05:53,650 --> 00:05:55,210
you have different types of options.

102
00:05:55,210 --> 00:05:57,580
As of now I want to show you only something,

103
00:05:57,580 --> 00:05:59,395
some options, few options.

104
00:05:59,395 --> 00:06:00,610
So u one is client.

105
00:06:00,610 --> 00:06:06,220
So from this, you can create a client object or you can create resource object.

106
00:06:06,220 --> 00:06:09,220
But now here my requirement is different.

107
00:06:09,220 --> 00:06:11,410
Let me take this operation.

108
00:06:11,410 --> 00:06:15,519
So I am printing AWS management console

109
00:06:15,519 --> 00:06:19,885
or session with root dot, get available resources.

110
00:06:19,885 --> 00:06:21,310
C, the output.

111
00:06:21,310 --> 00:06:26,335
So resource object operation is available only for these services.

112
00:06:26,335 --> 00:06:30,160
But do you know any AWS you are having a lot of services for remaining services,

113
00:06:30,160 --> 00:06:32,660
you don't have resource option.

114
00:06:33,690 --> 00:06:38,634
Now, by default for all services of AWS,

115
00:06:38,634 --> 00:06:43,990
client is available, but resources are available only for these services.

116
00:06:43,990 --> 00:06:46,675
Right now you have a confusion,

117
00:06:46,675 --> 00:06:48,385
at least for these services,

118
00:06:48,385 --> 00:06:49,825
which option we have to use,

119
00:06:49,825 --> 00:06:51,490
either resource or client.

120
00:06:51,490 --> 00:06:53,605
It can go with anyone of that.

121
00:06:53,605 --> 00:06:55,825
But there is a small difference.

122
00:06:55,825 --> 00:07:01,105
That is, the foster point is resources high-level object.

123
00:07:01,105 --> 00:07:04,765
And it is available for some of these available services.

124
00:07:04,765 --> 00:07:11,410
These are the some of the AWS services and climb these low-level service access.

125
00:07:11,410 --> 00:07:13,420
What is this difference?

126
00:07:13,420 --> 00:07:14,905
Very simple.

127
00:07:14,905 --> 00:07:18,985
Inclined, the output is in terms of a dictionary.

128
00:07:18,985 --> 00:07:20,680
In each and every stage.

129
00:07:20,680 --> 00:07:22,390
If it is dictionary,

130
00:07:22,390 --> 00:07:27,640
you have to do more work while implementing your Python Bhutto press kits.

131
00:07:27,640 --> 00:07:30,490
But in resource it is an object.

132
00:07:30,490 --> 00:07:38,240
You can do some dot operations using resource operation for your particular AWS service.

133
00:07:38,240 --> 00:07:43,430
And in resource, there is no guarantee that each and

134
00:07:43,430 --> 00:07:48,125
every operation of your particular service is available.

135
00:07:48,125 --> 00:07:50,840
But in client, each and every operation,

136
00:07:50,840 --> 00:07:53,495
whatever it is there on your AWS console.

137
00:07:53,495 --> 00:07:55,670
Say suppose if you go with I am console,

138
00:07:55,670 --> 00:07:57,725
you are having here lot of operations.

139
00:07:57,725 --> 00:08:01,775
All these operations are definitely available with your client.

140
00:08:01,775 --> 00:08:05,765
But in resource, that guarantee is not there.

141
00:08:05,765 --> 00:08:07,835
If it is not there,

142
00:08:07,835 --> 00:08:10,625
we can enter into client from resource with the help of

143
00:08:10,625 --> 00:08:13,850
meta concept of your boat to three,

144
00:08:13,850 --> 00:08:16,040
we have metal concept right here.

145
00:08:16,040 --> 00:08:19,610
Using that metta, you can enter into client from resource.

146
00:08:19,610 --> 00:08:22,520
But as of now, don't get confused. Forget about that.

147
00:08:22,520 --> 00:08:25,775
Right now, let me show you with an example.

148
00:08:25,775 --> 00:08:30,560
How much work is there with your client and how much work is there with resource?

149
00:08:30,560 --> 00:08:34,505
Let me implement simple script.

150
00:08:34,505 --> 00:08:39,290
So now we owe you or AWS management console session.

151
00:08:39,290 --> 00:08:42,845
And the how I am concerned with respect to resource object.

152
00:08:42,845 --> 00:08:46,130
Anyhow, I am console with respect to client object.

153
00:08:46,130 --> 00:08:48,350
First time implementing a.

154
00:08:48,350 --> 00:08:55,670
I'm listing I am users with resource object.

155
00:08:55,670 --> 00:09:00,335
So for resource already how an object I am client connect,

156
00:09:00,335 --> 00:09:03,110
I am consoled with respect to resource.

157
00:09:03,110 --> 00:09:08,090
See that for each user in

158
00:09:08,090 --> 00:09:14,975
your IAM console resource dot users dot all.

159
00:09:14,975 --> 00:09:20,030
Then simply print each user.name.

160
00:09:20,030 --> 00:09:21,230
That's it.

161
00:09:21,230 --> 00:09:23,910
Let me copy it.

162
00:09:24,490 --> 00:09:31,140
Open my simple difference.

163
00:09:31,270 --> 00:09:36,665
With a resource and client dot PY two list1.

164
00:09:36,665 --> 00:09:38,225
Paul, I am users.

165
00:09:38,225 --> 00:09:39,830
Let me save it first.

166
00:09:39,830 --> 00:09:42,630
And I'm running this for C, the output.

167
00:09:44,950 --> 00:09:48,170
So you are getting, you are to IAM users

168
00:09:48,170 --> 00:09:51,695
now to get the same output through client object.

169
00:09:51,695 --> 00:09:53,480
How we can implement.

170
00:09:53,480 --> 00:09:56,960
So for that first I'm entering into my Python terminal.

171
00:09:56,960 --> 00:10:00,560
So there I am importing Bhutto 3 first.

172
00:10:00,560 --> 00:10:05,970
Then I am creating your AWS management console session.

173
00:10:06,520 --> 00:10:12,750
Then I'm creating IAM console using client object.

174
00:10:13,000 --> 00:10:15,650
Now see the output step-by-step.

175
00:10:15,650 --> 00:10:22,250
So first if I try to print I am console client object C,

176
00:10:22,250 --> 00:10:25,685
the output. You are getting.

177
00:10:25,685 --> 00:10:29,210
Object, or sorry.

178
00:10:29,210 --> 00:10:34,950
Now in this object you how to perform an operation called L2 users.

179
00:10:35,470 --> 00:10:39,275
See that, don't worry about the all these operations, okay,

180
00:10:39,275 --> 00:10:44,570
we have a session to get help on each and every step on Bhutto three,

181
00:10:44,570 --> 00:10:47,210
we'll discuss that in the next video.

182
00:10:47,210 --> 00:10:50,550
See, this is a dictionary.

183
00:10:50,670 --> 00:10:54,085
In this dictionary, user sees them.

184
00:10:54,085 --> 00:10:55,855
Now let me do one more thing.

185
00:10:55,855 --> 00:10:59,305
Let me take a user's key.

186
00:10:59,305 --> 00:11:00,475
Now see the output.

187
00:11:00,475 --> 00:11:03,640
You are getting a list, right?

188
00:11:03,640 --> 00:11:13,195
If you're getting a list means you can take for loop for each in IAM console up to this.

189
00:11:13,195 --> 00:11:17,720
And printed output, see the reserve, print each.

190
00:11:19,410 --> 00:11:22,855
You are getting part the username, user id.

191
00:11:22,855 --> 00:11:26,590
Of course you are getting inform indifferent informations for your each IAM user.

192
00:11:26,590 --> 00:11:28,270
But I need only username,

193
00:11:28,270 --> 00:11:34,535
but means you have to take dictionary again,

194
00:11:34,535 --> 00:11:40,955
dot user name, Laozi, the output C.

195
00:11:40,955 --> 00:11:46,625
Now, what we are doing there is the first step we are doing.

196
00:11:46,625 --> 00:11:49,830
Let me implement the code here.

197
00:11:51,880 --> 00:11:58,970
Listing IAM users with client object plaint operation.

198
00:11:58,970 --> 00:12:00,230
Okay?

199
00:12:00,230 --> 00:12:03,245
So all users that it taken right here,

200
00:12:03,245 --> 00:12:06,875
for each in, in this,

201
00:12:06,875 --> 00:12:11,000
you are taking users, right?

202
00:12:11,000 --> 00:12:15,690
Then, see that you are printing.

203
00:12:20,040 --> 00:12:26,680
So it is simply username dot c. You are taking i am console resource dot us.org dot

204
00:12:26,680 --> 00:12:33,610
operations because this resource is like an object operations.

205
00:12:33,610 --> 00:12:36,820
But here you are doing first of all, dot list users,

206
00:12:36,820 --> 00:12:40,090
that is one level object operation then offer that you are

207
00:12:40,090 --> 00:12:43,870
taking some key because this output is a dictionary.

208
00:12:43,870 --> 00:12:46,015
And again, this is not a final output.

209
00:12:46,015 --> 00:12:48,145
So that's why again, you are taking you each,

210
00:12:48,145 --> 00:12:50,635
then you are selecting username.

211
00:12:50,635 --> 00:12:51,355
That's it.

212
00:12:51,355 --> 00:12:52,480
But he had simple operation,

213
00:12:52,480 --> 00:12:54,355
dot, dot, dot, right?

214
00:12:54,355 --> 00:12:56,530
So this is the only difference.

215
00:12:56,530 --> 00:13:00,550
Now let me go to your Python script.

216
00:13:00,550 --> 00:13:08,620
Let me open just

217
00:13:08,620 --> 00:13:12,400
for our differentiation purpose I'm taking.

218
00:13:12,400 --> 00:13:16,700
And then that's it.

219
00:13:17,100 --> 00:13:22,760
Now let me run this output.

220
00:13:24,090 --> 00:13:26,650
You are getting same output.

221
00:13:26,650 --> 00:13:28,225
But the thing is,

222
00:13:28,225 --> 00:13:33,805
you are using onetime client on one time and resource.

223
00:13:33,805 --> 00:13:34,405
That's it.

224
00:13:34,405 --> 00:13:36,505
So while implementing these code,

225
00:13:36,505 --> 00:13:41,005
you have a Help also will discuss that help in the next video.

226
00:13:41,005 --> 00:13:43,070
Okay, thank you.

