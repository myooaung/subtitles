WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.280
Friends here, our concept t's boater.

2
00:00:02.280 --> 00:00:06.645
Three waiters see already we know that we have different types of concepts in Buto three.

3
00:00:06.645 --> 00:00:09.285
They are like session, resource, client,

4
00:00:09.285 --> 00:00:12.360
meta, collections, waiters, and resonators.

5
00:00:12.360 --> 00:00:15.055
So already we've done with attrition resource and declined.

6
00:00:15.055 --> 00:00:17.075
And here we are working with waiters.

7
00:00:17.075 --> 00:00:19.385
So first of all, what is a waiter?

8
00:00:19.385 --> 00:00:22.970
Simply, it is a way to block until

9
00:00:22.970 --> 00:00:27.455
a certain state has been reached for your any required AWS service.

10
00:00:27.455 --> 00:00:31.145
So before going to explain about this way, does conserve,

11
00:00:31.145 --> 00:00:36.170
let me implement a simple Python moto three skip just to start or stop EC2 instance.

12
00:00:36.170 --> 00:00:38.810
So for that just I'm importing Bhutto three.

13
00:00:38.810 --> 00:00:41.780
So only I have taken a Python script name as introduction to wait,

14
00:00:41.780 --> 00:00:46.385
m dot p. Now let me create my database console.

15
00:00:46.385 --> 00:00:48.995
So simply moto three dot

16
00:00:48.995 --> 00:00:53.555
Session.get session than just provide you are required profile name.

17
00:00:53.555 --> 00:00:57.900
So I'm taking EC2 dollar per IAM user profile.

18
00:00:57.900 --> 00:01:02.905
Then let me create console of your required EC2 instance,

19
00:01:02.905 --> 00:01:04.945
i mean, for your EC2 Console.

20
00:01:04.945 --> 00:01:10.165
So we can create EC2 Console using either resource or plane.

21
00:01:10.165 --> 00:01:12.470
Let me create both of them.

22
00:01:12.840 --> 00:01:19.225
So using resource, simply how to provide your service name equals two is C2.

23
00:01:19.225 --> 00:01:22.825
Then a region name equal to,

24
00:01:22.825 --> 00:01:27.040
suppose US East One. That's it.

25
00:01:27.040 --> 00:01:33.710
Then let me create EC2 Console using client.

26
00:01:34.080 --> 00:01:37.870
Simply in place off resource, just write client.

27
00:01:37.870 --> 00:01:41.180
Now we have both console,

28
00:01:41.180 --> 00:01:44.465
I mean, using client as well as resource for your EC2.

29
00:01:44.465 --> 00:01:49.535
That's fine. Now, I want to walk with one particularly EC2 instance.

30
00:01:49.535 --> 00:01:52.775
Then anywhere resource method,

31
00:01:52.775 --> 00:01:58.940
you have a option called instance operation on your EC2 Console resource object.

32
00:01:58.940 --> 00:02:02.795
So I'm creating suppose might instance object.

33
00:02:02.795 --> 00:02:09.390
You can take any variable I'm creating EC2 Console using resource dot instance.

34
00:02:10.900 --> 00:02:13.655
Then you have to provide here ID.

35
00:02:13.655 --> 00:02:17.670
So let me get my ID from my AWS console.

36
00:02:19.510 --> 00:02:22.190
So whatever the instance you want,

37
00:02:22.190 --> 00:02:25.230
that instance ID, How to provide here.

38
00:02:28.810 --> 00:02:31.850
That's a fine.

39
00:02:31.850 --> 00:02:36.560
Now, my requirement is as if nobody's in stablished it, I want to run it.

40
00:02:36.560 --> 00:02:41.075
So simply I'm running print Mike instance object.

41
00:02:41.075 --> 00:02:43.550
You wanted to print it.

42
00:02:43.550 --> 00:02:46.235
Let me write the print.

43
00:02:46.235 --> 00:02:55.170
Starting given instance.

44
00:02:55.420 --> 00:02:59.570
Then simply you are Instance Object dot-dot-dot operation.

45
00:02:59.570 --> 00:03:02.370
So after that I am writing simply.

46
00:03:04.620 --> 00:03:11.660
Now our instance is up and running.

47
00:03:12.720 --> 00:03:14.155
That's it.

48
00:03:14.155 --> 00:03:15.970
No, let me save it and run it.

49
00:03:15.970 --> 00:03:19.840
So before running C that your instances inch topless state.

50
00:03:19.840 --> 00:03:23.380
Now I'm running this Python script, c,

51
00:03:23.380 --> 00:03:27.295
the output, you got your output now you're instance is up and running.

52
00:03:27.295 --> 00:03:30.805
But observe here, it is still pending.

53
00:03:30.805 --> 00:03:34.645
So actually what we are doing in your Python's copies after running these,

54
00:03:34.645 --> 00:03:36.415
after giving the action call,

55
00:03:36.415 --> 00:03:39.340
start on your EC2 instance immediately or printing this.

56
00:03:39.340 --> 00:03:41.260
So between these two lines,

57
00:03:41.260 --> 00:03:43.960
I need to write some logic such that your skipped has to

58
00:03:43.960 --> 00:03:47.805
wait until your instances reach it to Running status.

59
00:03:47.805 --> 00:03:50.150
Then how we can do that.

60
00:03:50.150 --> 00:03:52.835
Then how we can do that.

61
00:03:52.835 --> 00:03:57.199
So you can implement your own logic manually.

62
00:03:57.199 --> 00:04:01.955
Or you can also use predefined waiter concept,

63
00:04:01.955 --> 00:04:03.860
which is there in your Bhutto three.

64
00:04:03.860 --> 00:04:08.720
And this waiter concepts are there for your resource as well as client.

65
00:04:08.720 --> 00:04:12.470
So before going to use predefined waiters concept first,

66
00:04:12.470 --> 00:04:15.890
let me implement our own logic just to weight our Python Bhutto three,

67
00:04:15.890 --> 00:04:18.710
skip to reach your instance, rate us as running.

68
00:04:18.710 --> 00:04:21.500
So before running our shelves script basket,

69
00:04:21.500 --> 00:04:24.080
let me stop it once.

70
00:04:24.080 --> 00:04:25.580
First, let me do one thing.

71
00:04:25.580 --> 00:04:30.260
See, we created this EC2 instance object for your particular EC2 instance.

72
00:04:30.260 --> 00:04:31.670
This created upset.

73
00:04:31.670 --> 00:04:36.844
We can also get the current status of your EC2 instance.

74
00:04:36.844 --> 00:04:42.230
Let me show you that simply print you are instance object dot state.

75
00:04:42.230 --> 00:04:46.625
And see the output. You are getting.

76
00:04:46.625 --> 00:04:48.605
Output as code is 80, that is success.

77
00:04:48.605 --> 00:04:51.050
Then name, that is your current status of

78
00:04:51.050 --> 00:04:54.875
your EC2 instance while creating this EC2 instance object.

79
00:04:54.875 --> 00:04:57.665
Now I want to get only the status,

80
00:04:57.665 --> 00:04:59.795
then take key as name,

81
00:04:59.795 --> 00:05:02.225
then see the output.

82
00:05:02.225 --> 00:05:07.595
Now what I will do is after starting your EC2 instance,

83
00:05:07.595 --> 00:05:09.680
I will create one while loop.

84
00:05:09.680 --> 00:05:13.140
So that while loop is infinity Y loop.

85
00:05:13.710 --> 00:05:17.935
Then here I will create,

86
00:05:17.935 --> 00:05:19.975
again, you are EC2 instance object.

87
00:05:19.975 --> 00:05:24.055
Because if I go with this EC2 instance object after,

88
00:05:24.055 --> 00:05:26.590
immediately running a start action,

89
00:05:26.590 --> 00:05:29.665
you are EC2 instance let us go to goes to pending status.

90
00:05:29.665 --> 00:05:32.650
And status is they're continuously.

91
00:05:32.650 --> 00:05:36.790
But whenever if you want to check the new status of your EC2,

92
00:05:36.790 --> 00:05:41.755
you had to create always new EC2 instance object.

93
00:05:41.755 --> 00:05:46.090
That's why inside of this while loop I'm creating again my instance object

94
00:05:46.090 --> 00:05:51.610
as EC2 Console dot instance.

95
00:05:51.610 --> 00:05:52.990
So whatever the ID you,

96
00:05:52.990 --> 00:05:55.850
how here, let me copy and paste it.

97
00:05:57.150 --> 00:06:06.355
And then what I will do is first let me print the current status of your EC2 0s.

98
00:06:06.355 --> 00:06:10.045
So simply I'm printing my instance dot state.

99
00:06:10.045 --> 00:06:12.940
Then he has name.

100
00:06:12.940 --> 00:06:16.465
Then offer that. I'm taking if condition.

101
00:06:16.465 --> 00:06:19.645
If you are easy to instance object state,

102
00:06:19.645 --> 00:06:21.085
if it is equals to running,

103
00:06:21.085 --> 00:06:23.155
then I will stop this while loop.

104
00:06:23.155 --> 00:06:26.470
If it is equals to running,

105
00:06:26.470 --> 00:06:31.090
then I will stop my while loop.

106
00:06:31.090 --> 00:06:35.740
If it is not, then I have to wait for five seconds,

107
00:06:35.740 --> 00:06:38.655
then I am taking some time dot sleep.

108
00:06:38.655 --> 00:06:40.715
Then phi seconds.

109
00:06:40.715 --> 00:06:41.975
That is your wish.

110
00:06:41.975 --> 00:06:45.080
How much time you want to wait for to go for next check.

111
00:06:45.080 --> 00:06:46.865
So I'm taking simplify seconds.

112
00:06:46.865 --> 00:06:53.060
Then print before our time, I will end here.

113
00:06:53.060 --> 00:07:03.270
Print waiting for running status.

114
00:07:03.880 --> 00:07:06.680
Waiting to get running status.

115
00:07:06.680 --> 00:07:09.090
You can add any statement here.

116
00:07:11.440 --> 00:07:14.090
Then I'm waiting for five seconds.

117
00:07:14.090 --> 00:07:16.910
Again, your while loop will repeat so that you are going to create

118
00:07:16.910 --> 00:07:20.600
a new instance object and you are getting new instance status.

119
00:07:20.600 --> 00:07:22.100
And if it is equals to running,

120
00:07:22.100 --> 00:07:24.035
then you are stopping your while loop.

121
00:07:24.035 --> 00:07:32.330
That's a Now, let me save it.

122
00:07:32.330 --> 00:07:34.295
Yeah, I'm using primordial rate.

123
00:07:34.295 --> 00:07:39.860
Let me import module.

124
00:07:39.860 --> 00:07:43.010
Now see the current status of your EC2 instances.

125
00:07:43.010 --> 00:07:46.910
Stop. Now let me run your script and see the output.

126
00:07:46.910 --> 00:07:49.520
So I am running, observe the output.

127
00:07:49.520 --> 00:07:51.830
What is the current status pending?

128
00:07:51.830 --> 00:07:55.550
That's why it is waiting to get running status because of while loop,

129
00:07:55.550 --> 00:08:00.515
I think is that we implemented the logic between, I mean,

130
00:08:00.515 --> 00:08:08.370
year just two, wait until to get your EC2 instance status as running.

131
00:08:08.380 --> 00:08:13.205
C. Now you're waiting to get your it's still in pending.

132
00:08:13.205 --> 00:08:16.955
Let me refresh it here and see the output. Now it is running right.

133
00:08:16.955 --> 00:08:21.920
Now, see your script has been exited and saying that it is saying,

134
00:08:21.920 --> 00:08:23.465
well exiting, it is saying,

135
00:08:23.465 --> 00:08:26.000
now you're instance is up and running C.

136
00:08:26.000 --> 00:08:28.295
Now simply this line,

137
00:08:28.295 --> 00:08:31.010
this block of code is called a beta.

138
00:08:31.010 --> 00:08:36.755
We included our one lousy to wait until you are required.

139
00:08:36.755 --> 00:08:39.830
State has been reached 41, easy to instance.

140
00:08:39.830 --> 00:08:45.320
But you don't need to write this manual logic by you already.

141
00:08:45.320 --> 00:08:47.630
These type of logic is there with your boat or

142
00:08:47.630 --> 00:08:50.120
you just use it instead of writing this many number of lanes,

143
00:08:50.120 --> 00:08:51.680
you can directly use that.

144
00:08:51.680 --> 00:08:53.165
Then how we can use it?

145
00:08:53.165 --> 00:08:56.240
Let me show you that as of now we are working with resource, right?

146
00:08:56.240 --> 00:08:59.190
So I will comment this logic

147
00:09:08.740 --> 00:09:10.805
now.

148
00:09:10.805 --> 00:09:13.205
So between these two lines, we have to write it.

149
00:09:13.205 --> 00:09:16.950
So before that, let me stop my EC2 instance once again.

150
00:09:18.280 --> 00:09:22.955
Now let me print the available options which are there.

151
00:09:22.955 --> 00:09:26.745
For your created EC2 instance object.

152
00:09:26.745 --> 00:09:29.570
From that you can see.

153
00:09:33.150 --> 00:09:35.785
Now observe the output First.

154
00:09:35.785 --> 00:09:39.265
Go to all options somewhere you how Wait,

155
00:09:39.265 --> 00:09:43.765
wait, wait until running, wait until running.

156
00:09:43.765 --> 00:09:44.230
C.

157
00:09:44.230 --> 00:09:47.035
Now, simply copy this option.

158
00:09:47.035 --> 00:09:50.240
Wait until running where it is.

159
00:09:51.240 --> 00:09:53.695
Yeah, wait until running.

160
00:09:53.695 --> 00:09:57.925
Copy died. After giving Stuart action.

161
00:09:57.925 --> 00:10:00.970
After giving start action.

162
00:10:00.970 --> 00:10:04.840
Simply write my instance object dot,

163
00:10:04.840 --> 00:10:06.940
wait until running, that's it.

164
00:10:06.940 --> 00:10:09.730
Now you don't need to write this many number of lines.

165
00:10:09.730 --> 00:10:13.120
With single line. Now we are creating our beta.

166
00:10:13.120 --> 00:10:16.210
That rate is already there with your bot 2-3.

167
00:10:16.210 --> 00:10:17.920
For your resource object.

168
00:10:17.920 --> 00:10:21.370
This is the syntax. You how to create your EC2 instance object.

169
00:10:21.370 --> 00:10:22.960
Then you had to pass your action.

170
00:10:22.960 --> 00:10:25.600
Then wait until running.

171
00:10:25.600 --> 00:10:29.770
Now, first, your EC2 instances in stopper state.

172
00:10:29.770 --> 00:10:32.470
Now I'm going to run our Python Bhutto three escaped and

173
00:10:32.470 --> 00:10:35.665
observe the output C. Now it is waiting.

174
00:10:35.665 --> 00:10:39.520
Your Python both risk EPs waiting because of this line, tenth line.

175
00:10:39.520 --> 00:10:42.025
So once you were instances up and running,

176
00:10:42.025 --> 00:10:46.900
then automatically your Python will go to next line, that is 11th line.

177
00:10:46.900 --> 00:10:48.730
So to get more clarity,

178
00:10:48.730 --> 00:10:53.120
just absorbed here. It is in pending.

179
00:10:53.290 --> 00:10:57.530
See your skipped, exited saying that now you're instance is

180
00:10:57.530 --> 00:11:01.130
up and running just to go to your console and verify whether it is really running.

181
00:11:01.130 --> 00:11:03.200
Yes, it is up and running.

182
00:11:03.200 --> 00:11:06.814
So simply because of this method,

183
00:11:06.814 --> 00:11:08.495
you were stripped, he's waiting.

184
00:11:08.495 --> 00:11:11.150
But previously, instead of using this line,

185
00:11:11.150 --> 00:11:14.285
we implemented our own logic to wait with,

186
00:11:14.285 --> 00:11:15.995
with these many lines,

187
00:11:15.995 --> 00:11:18.740
but known enough that there is a default waiter concept.

188
00:11:18.740 --> 00:11:22.940
So using that wait or you can wait to reach your required state,

189
00:11:22.940 --> 00:11:25.265
then how this method is working?

190
00:11:25.265 --> 00:11:26.780
Nothing is there very simple.

191
00:11:26.780 --> 00:11:32.105
Inside of this method, there is a loop and that loop will iterate for 40 times.

192
00:11:32.105 --> 00:11:36.860
And each iteration will be done after every five seconds.

193
00:11:36.860 --> 00:11:38.675
Means finally it will done,

194
00:11:38.675 --> 00:11:41.900
it will done 40 checks after every five seconds.

195
00:11:41.900 --> 00:11:47.060
That means you are waiter will wait for 200 seconds in your resource method,

196
00:11:47.060 --> 00:11:48.485
in your resource object.

197
00:11:48.485 --> 00:11:55.955
In case if you were instances not reach to your required stayed within the 200 seconds,

198
00:11:55.955 --> 00:11:58.700
then it will throw an exception.

199
00:11:58.700 --> 00:12:03.270
So remember that resource waiter will wait for,

200
00:12:03.430 --> 00:12:06.155
we use resource weight and as of now,

201
00:12:06.155 --> 00:12:11.810
so resource waiter waits for 200 seconds.

202
00:12:11.810 --> 00:12:15.725
So actually there will be 40 checks.

203
00:12:15.725 --> 00:12:19.925
Third, every five seconds.

204
00:12:19.925 --> 00:12:22.820
So in case if you are instances not reach into

205
00:12:22.820 --> 00:12:26.180
your required state within the 40 checks are written at 200 seconds,

206
00:12:26.180 --> 00:12:29.360
then you are moto three will throw an exception.

207
00:12:29.360 --> 00:12:31.910
So this is using your resource object,

208
00:12:31.910 --> 00:12:36.590
then how we can implement waiter concept or waiters concept using client.

209
00:12:36.590 --> 00:12:39.090
So let me comment this.

210
00:12:39.460 --> 00:12:43.940
So before using weightage for your client,

211
00:12:43.940 --> 00:12:46.460
once again, I will stop my EC2 instance.

212
00:12:46.460 --> 00:12:49.970
Of course, you can use waiters for even stop or start or

213
00:12:49.970 --> 00:12:54.260
terminate or reboot for all the things you can use waiters.

214
00:12:54.260 --> 00:12:59.490
Now, let me open your official documentation of Bhutto three.

215
00:13:02.260 --> 00:13:08.614
And go to your available services and go to EC2.

216
00:13:08.614 --> 00:13:12.530
And they're in your EC2 Console.

217
00:13:12.530 --> 00:13:14.435
I mean easy to you how waiters.

218
00:13:14.435 --> 00:13:17.030
So this waiter sees based on client only.

219
00:13:17.030 --> 00:13:20.640
If you click on that. Let me open waiters.

220
00:13:20.650 --> 00:13:23.870
Yes, Abdullah concept here.

221
00:13:23.870 --> 00:13:26.000
Waiters. So the available waiters,

222
00:13:26.000 --> 00:13:27.875
or for your EC2 instance,

223
00:13:27.875 --> 00:13:29.765
These are the available waiters.

224
00:13:29.765 --> 00:13:31.640
So as of now what we need,

225
00:13:31.640 --> 00:13:36.335
we need a waiter to get instance status is running so I can select this one.

226
00:13:36.335 --> 00:13:39.000
Just click on that and open it.

227
00:13:40.660 --> 00:13:44.945
See there. They are creating a waiter by using plane

228
00:13:44.945 --> 00:13:50.015
while creating their weight or their giving option called instance running.

229
00:13:50.015 --> 00:13:52.910
In case if you want to create a waiter

230
00:13:52.910 --> 00:13:55.730
for instances toppled status and you had to take in stanzas,

231
00:13:55.730 --> 00:13:58.985
stop in stance status, okay?

232
00:13:58.985 --> 00:14:00.245
Insensate stop.

233
00:14:00.245 --> 00:14:02.585
Status means health checks two-by-two.

234
00:14:02.585 --> 00:14:04.940
So suppose I want to wait,

235
00:14:04.940 --> 00:14:06.050
I want to create a waiter.

236
00:14:06.050 --> 00:14:08.990
I want to use a waiter for stoplight status, then.

237
00:14:08.990 --> 00:14:10.910
Incense, stop.

238
00:14:10.910 --> 00:14:15.830
So as of now we need in stance running waiter.

239
00:14:15.830 --> 00:14:17.240
So you have to create a waiter.

240
00:14:17.240 --> 00:14:18.815
You can take any variable here.

241
00:14:18.815 --> 00:14:20.180
So this is a syntax, right?

242
00:14:20.180 --> 00:14:22.805
Let me copy it and go to your script.

243
00:14:22.805 --> 00:14:25.610
Create a waiter so you can take any variable waiter

244
00:14:25.610 --> 00:14:28.880
equals to u are easy to console client.

245
00:14:28.880 --> 00:14:34.070
So here client demeans our EC2 Console using client object.

246
00:14:34.070 --> 00:14:38.700
Blank dot, get waiter.

247
00:14:39.280 --> 00:14:41.165
That's it.

248
00:14:41.165 --> 00:14:46.040
Then after that, you have to attach waiter dot

249
00:14:46.040 --> 00:14:50.765
wait for your created a weight up here, two-step beta.

250
00:14:50.765 --> 00:14:52.730
So what is your instance ID z?

251
00:14:52.730 --> 00:14:54.410
We have different types of arguments here.

252
00:14:54.410 --> 00:14:57.810
As of now I am working with only Instance ID.

253
00:14:58.630 --> 00:15:02.550
So here you have to provide an instance ID.

254
00:15:06.940 --> 00:15:11.870
That's a C. As of now we use only waiters convert.

255
00:15:11.870 --> 00:15:15.245
Now an iterator logic to start your EC2 instance as well.

256
00:15:15.245 --> 00:15:22.685
So using client, how we can start our EC2 instance c in our previous video,

257
00:15:22.685 --> 00:15:24.140
I attach it a script.

258
00:15:24.140 --> 00:15:26.430
So let me open that.

259
00:15:31.030 --> 00:15:35.495
Simply EC2 Console client is start instances.

260
00:15:35.495 --> 00:15:37.740
So that is the logic.

261
00:15:39.220 --> 00:15:40.985
That's it.

262
00:15:40.985 --> 00:15:42.980
Now let me print it here.

263
00:15:42.980 --> 00:15:49.745
Now you are EC2 instance is up and running.

264
00:15:49.745 --> 00:15:52.110
That's it.

265
00:15:53.620 --> 00:15:56.990
Now here let me write one more link.

266
00:15:56.990 --> 00:16:01.145
Starting EC2 instance.

267
00:16:01.145 --> 00:16:02.270
That's it.

268
00:16:02.270 --> 00:16:04.115
Now let me save it and run it.

269
00:16:04.115 --> 00:16:08.735
So before running, verify your current status of your EC2 instances it is stopper status,

270
00:16:08.735 --> 00:16:14.390
nor let me run it and observe the outward instance ID is not defined. Where is it?

271
00:16:14.390 --> 00:16:20.090
Yeah, instance ID.

272
00:16:20.090 --> 00:16:24.840
So let me take directly this instance ID here itself.

273
00:16:27.880 --> 00:16:31.820
Now what we are doing, we are creating a list management console

274
00:16:31.820 --> 00:16:35.615
then AWS EC2 Console using client object.

275
00:16:35.615 --> 00:16:39.274
Then you are EC2 Console client object, dot-dot-dot instances.

276
00:16:39.274 --> 00:16:41.450
And I am providing insurance IDs as unleashed,

277
00:16:41.450 --> 00:16:43.310
but as of now I have only one instance.

278
00:16:43.310 --> 00:16:46.205
That's why I have given only one instance ID in the list.

279
00:16:46.205 --> 00:16:48.995
Then because of this you are instances will try to start,

280
00:16:48.995 --> 00:16:53.915
but I want to weight our script until you are instances reachable running sentence.

281
00:16:53.915 --> 00:16:57.260
That's why I'm creating a waiter by using client object that

282
00:16:57.260 --> 00:17:01.040
without the waiter you created for that waiter just I'm giving way dot-dot.

283
00:17:01.040 --> 00:17:04.850
Wait, just inside of that I am giving instance ID's, that's it.

284
00:17:04.850 --> 00:17:07.655
Now let me run it and at the output.

285
00:17:07.655 --> 00:17:10.805
See now, refresh your console.

286
00:17:10.805 --> 00:17:13.460
Now it is in pending status and your script is waiting.

287
00:17:13.460 --> 00:17:16.940
So once if you are instances reach up to running status,

288
00:17:16.940 --> 00:17:20.135
then you are waiter will come out from your waiter.

289
00:17:20.135 --> 00:17:23.220
Just wait and see the output.

290
00:17:23.770 --> 00:17:26.600
Sin. Not only for our EC2 instance,

291
00:17:26.600 --> 00:17:33.860
you can use this waiters concept for S3 or volumes or while creating your snapshots,

292
00:17:33.860 --> 00:17:37.415
right, for anything wherever you needed, required state.

293
00:17:37.415 --> 00:17:39.545
There you can use waiters concept.

294
00:17:39.545 --> 00:17:42.605
And one more thing. Yeah, first, let me show you this.

295
00:17:42.605 --> 00:17:44.015
Refresh it.

296
00:17:44.015 --> 00:17:46.745
Now it instance is up and running.

297
00:17:46.745 --> 00:17:51.290
And one important point is in this logic,

298
00:17:51.290 --> 00:17:55.280
we created our EC2 instance object using your resource object.

299
00:17:55.280 --> 00:17:58.925
And there we used our waiters from resource itself.

300
00:17:58.925 --> 00:18:02.240
And here we are starting our EC2 instance using

301
00:18:02.240 --> 00:18:06.440
client object and we use waiter for client itself.

302
00:18:06.440 --> 00:18:13.910
And one more thing is you can start your EC2 instance using resource object and you can,

303
00:18:13.910 --> 00:18:17.375
you can attach a waiter from client.

304
00:18:17.375 --> 00:18:21.590
Let me show you that. So before going to show you that one more important point,

305
00:18:21.590 --> 00:18:27.710
e. C here, it Resource waiter waits for 200 seconds,

306
00:18:27.710 --> 00:18:31.025
that 246 after every five seconds.

307
00:18:31.025 --> 00:18:35.015
But in your client here also 40 checks are there.

308
00:18:35.015 --> 00:18:40.010
But you are 40 checks or after every 15 seconds.

309
00:18:40.010 --> 00:18:42.560
So that's why in your real time,

310
00:18:42.560 --> 00:18:46.955
most of the cases we'll use blind waiters because this is the good one.

311
00:18:46.955 --> 00:18:51.170
Say in realtime, it may take more time compared to 200 seconds.

312
00:18:51.170 --> 00:18:52.685
200 seconds is very less right?

313
00:18:52.685 --> 00:18:56.510
So it will take, maybe sometimes you are instance may take more time.

314
00:18:56.510 --> 00:19:01.670
That's why always it's better to take betas from client object.

315
00:19:01.670 --> 00:19:03.080
That's a simple.

316
00:19:03.080 --> 00:19:08.240
And see now what I'm doing is so before doing,

317
00:19:08.240 --> 00:19:09.950
let me stop my EC2 instance.

318
00:19:09.950 --> 00:19:11.520
Once again.

319
00:19:13.510 --> 00:19:20.555
See I'm creating our EC2 instance opposite using resource.

320
00:19:20.555 --> 00:19:25.324
And I'm trying to start that using resource object itself.

321
00:19:25.324 --> 00:19:29.330
But I can attach waiter from cline.

322
00:19:29.330 --> 00:19:36.065
Yes, you can club them. Be clear.

323
00:19:36.065 --> 00:19:39.575
I can start my EC2 instance using resource,

324
00:19:39.575 --> 00:19:44.389
but furthered instance, I can attach waiter from my client.

325
00:19:44.389 --> 00:19:45.515
That's it.

326
00:19:45.515 --> 00:19:49.580
So why I'm using from client means because if I go with resource,

327
00:19:49.580 --> 00:19:51.005
a client resource waiter,

328
00:19:51.005 --> 00:19:53.060
There is a chance to wait only 200 seconds,

329
00:19:53.060 --> 00:19:57.155
but here, 40 checks out every five seconds,

330
00:19:57.155 --> 00:19:59.540
means almost 600 seconds, ten minutes.

331
00:19:59.540 --> 00:20:01.055
So I can wait here ten minutes.

332
00:20:01.055 --> 00:20:05.330
That's why I'm using waiter from client for my resource object.

333
00:20:05.330 --> 00:20:07.415
That's it. No, let me save it.

334
00:20:07.415 --> 00:20:10.190
So before starting, just to verify it is stopper status.

335
00:20:10.190 --> 00:20:13.380
Now I'm running our Python Bhutto, their escape.

336
00:20:20.380 --> 00:20:24.605
Cities waiting right? Pending.

337
00:20:24.605 --> 00:20:25.655
Just wait.

338
00:20:25.655 --> 00:20:28.475
Once it is done, then I will show you only what console,

339
00:20:28.475 --> 00:20:30.770
whether you are instances running or not.

340
00:20:30.770 --> 00:20:33.960
Just wait and observe the output.

341
00:20:37.270 --> 00:20:40.460
So guys, even by implementing your Python,

342
00:20:40.460 --> 00:20:42.485
both risk is for your realtime.

343
00:20:42.485 --> 00:20:46.340
You can take your actions either from resource or client,

344
00:20:46.340 --> 00:20:48.680
but please use waiters always from client only.

345
00:20:48.680 --> 00:20:49.760
That is the best practice.

346
00:20:49.760 --> 00:20:53.030
Well, going forward I will use waiters only from client.

347
00:20:53.030 --> 00:20:55.940
Build output. Now your EC2 instance is up and running.

348
00:20:55.940 --> 00:20:57.050
Refresh it.

349
00:20:57.050 --> 00:21:06.020
Yes. So created from resource and used waiters for your resource object from client.

350
00:21:06.020 --> 00:21:07.505
Let's say.

351
00:21:07.505 --> 00:21:10.770
Okay, thank you for watching this video.

