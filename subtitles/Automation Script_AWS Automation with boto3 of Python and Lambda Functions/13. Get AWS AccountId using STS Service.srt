1
00:00:00,000 --> 00:00:06,525
Prince, here we're implementing a simple Python Bhutto three slave to get AWS account ID.

2
00:00:06,525 --> 00:00:11,040
So this concept is useful whenever if you are working with multiple AWS account.

3
00:00:11,040 --> 00:00:16,440
So you are analysts or quantity can be get by using SDS service.

4
00:00:16,440 --> 00:00:18,225
Let me open my sublime text.

5
00:00:18,225 --> 00:00:22,425
So I have taken a simple Python script name has get AWS or controlling dot p y.

6
00:00:22,425 --> 00:00:24,570
Let me import Buddha 3 first.

7
00:00:24,570 --> 00:00:28,425
Then after that, first let me create your epidermis management console.

8
00:00:28,425 --> 00:00:31,830
So simply AWS management console.

9
00:00:31,830 --> 00:00:35,295
So I'm going to create a realist management console with root access.

10
00:00:35,295 --> 00:00:37,290
So equals two.

11
00:00:37,290 --> 00:00:41,450
Bhutto three, got Shizhen session,

12
00:00:41,450 --> 00:00:43,280
then just providing your profile name,

13
00:00:43,280 --> 00:00:46,175
whatever you configure on your host.

14
00:00:46,175 --> 00:00:52,820
Then let me create your STS object, your STS console.

15
00:00:52,820 --> 00:00:55,160
So how we can create.

16
00:00:55,160 --> 00:00:59,150
We know that for some of the services we have a resource as well as

17
00:00:59,150 --> 00:01:03,770
client let me such in our official documentation for sts.

18
00:01:03,770 --> 00:01:06,870
So B23 documentation.

19
00:01:08,350 --> 00:01:17,164
So available services go here, STS, SDS.

20
00:01:17,164 --> 00:01:21,195
If you observe here for sts you have only client option, you don't how resource.

21
00:01:21,195 --> 00:01:23,590
Then let me click on that and open it.

22
00:01:23,590 --> 00:01:26,005
And here they are creating default session.

23
00:01:26,005 --> 00:01:28,030
Of course we created our customization.

24
00:01:28,030 --> 00:01:31,930
So from that we need to create our SDS concerns.

25
00:01:31,930 --> 00:01:35,785
So simply SDS console using client equals to

26
00:01:35,785 --> 00:01:43,255
your AWS management console dot client than service name equals to SDS.

27
00:01:43,255 --> 00:01:48,730
Then if you want to provide region name, that's it.

28
00:01:48,730 --> 00:01:52,300
Now in your hand you how STS console using client opposite.

29
00:01:52,300 --> 00:01:56,905
Then how we can get AWS account ID c.

30
00:01:56,905 --> 00:01:59,995
We know that in our client object,

31
00:01:59,995 --> 00:02:02,850
we how all operations as one set.

32
00:02:02,850 --> 00:02:05,090
Just to go and start somewhere.

33
00:02:05,090 --> 00:02:08,555
So here as of now directly I'm going with your required option.

34
00:02:08,555 --> 00:02:12,920
So that is get color identity.

35
00:02:12,920 --> 00:02:15,935
If you open this option in this option output,

36
00:02:15,935 --> 00:02:18,290
you will get your account ID.

37
00:02:18,290 --> 00:02:20,735
This is user ID, and this is a container.

38
00:02:20,735 --> 00:02:22,220
If you are working with some IAM user,

39
00:02:22,220 --> 00:02:26,165
you will get you IAM user ID. Let me show you this.

40
00:02:26,165 --> 00:02:29,750
Get color identity. So simply,

41
00:02:29,750 --> 00:02:33,905
directly, Let me take response equals two.

42
00:02:33,905 --> 00:02:40,010
You are STS client object dot your operation get color identity.

43
00:02:40,010 --> 00:02:43,380
Then let me print your response on C, the output.

44
00:02:44,020 --> 00:02:49,810
What happened? Moto three. What I did.

45
00:02:49,810 --> 00:02:56,545
Yeah, sorry, I see that you're getting some output.

46
00:02:56,545 --> 00:02:58,660
It is in terms of dictionary.

47
00:02:58,660 --> 00:03:01,765
In this dictionary, if you observe some very HUB, our cone,

48
00:03:01,765 --> 00:03:05,125
this account is nothing but your account ID and user ID.

49
00:03:05,125 --> 00:03:06,460
This is user ID.

50
00:03:06,460 --> 00:03:08,830
If you observe here both user id and account ID both

51
00:03:08,830 --> 00:03:11,665
are same because this is root account.

52
00:03:11,665 --> 00:03:16,450
We created our, our AWS management console using the root. Let me do one thing.

53
00:03:16,450 --> 00:03:18,650
I'm going to come in this.

54
00:03:23,520 --> 00:03:28,710
So now let me create your AWS management console with particular IAM user.

55
00:03:28,710 --> 00:03:30,020
Instead of this root,

56
00:03:30,020 --> 00:03:34,970
I'm creating my enemies management console using a let say,

57
00:03:34,970 --> 00:03:36,590
easy to IAM user,

58
00:03:36,590 --> 00:03:42,470
easy to download per user equals to simply Bhutto 3.What Session.get.

59
00:03:42,470 --> 00:03:45,245
Such an then just provide your profile name.

60
00:03:45,245 --> 00:03:50,375
So I have one of the profile called EC2 developer.

61
00:03:50,375 --> 00:03:57,860
Then from this just a creative or SDS console.

62
00:03:57,860 --> 00:04:00,140
So here instead of root,

63
00:04:00,140 --> 00:04:06,485
let me take, so from this AWS management console.

64
00:04:06,485 --> 00:04:14,610
Now let me take these two lines. Now see the output.

65
00:04:14,950 --> 00:04:18,425
So now user id is different, account is different.

66
00:04:18,425 --> 00:04:21,260
So our counties, your root account ID.

67
00:04:21,260 --> 00:04:22,580
Now in the same script,

68
00:04:22,580 --> 00:04:26,210
we know that we can create any number of AWS management console by

69
00:04:26,210 --> 00:04:30,350
using different am users profiles or with no,

70
00:04:30,350 --> 00:04:33,335
let me run and see the output.

71
00:04:33,335 --> 00:04:35,345
First output.

72
00:04:35,345 --> 00:04:39,559
This output is using the word root account credentials,

73
00:04:39,559 --> 00:04:43,190
and this account is using Institute dollar per IAM user.

74
00:04:43,190 --> 00:04:46,865
C in the both the cases are same, account ID is same.

75
00:04:46,865 --> 00:04:51,230
The only thing is you are running the first output using root credentials.

76
00:04:51,230 --> 00:04:52,925
So that's why user IDs route.

77
00:04:52,925 --> 00:04:55,610
But second output is from easy to dollar per.

78
00:04:55,610 --> 00:04:57,470
So for that, your user ID,

79
00:04:57,470 --> 00:05:00,110
not only you already are also having Jaron, right?

80
00:05:00,110 --> 00:05:01,295
See that?

81
00:05:01,295 --> 00:05:04,115
And you are username here.

82
00:05:04,115 --> 00:05:08,645
And even if you have the rehear route, that's it.

83
00:05:08,645 --> 00:05:10,745
So now from you can go with

84
00:05:10,745 --> 00:05:14,765
either root account credentials or with its particular IAM user.

85
00:05:14,765 --> 00:05:18,515
And by using this operation on your console,

86
00:05:18,515 --> 00:05:21,260
you are going to get your account ID.

87
00:05:21,260 --> 00:05:23,465
So directly I can take here,

88
00:05:23,465 --> 00:05:26,855
these are cone, either hear or see.

89
00:05:26,855 --> 00:05:32,195
In your dictionary you can use to get your output.

90
00:05:32,195 --> 00:05:37,415
Square brackets you were key. That is one way.

91
00:05:37,415 --> 00:05:41,840
Or instead of square brackets,

92
00:05:41,840 --> 00:05:44,570
you are also having one more option operation on your dictionary

93
00:05:44,570 --> 00:05:47,660
that is not good, then you are key.

94
00:05:47,660 --> 00:05:49,850
So you now see the output.

95
00:05:49,850 --> 00:05:50,960
Let's say.

96
00:05:50,960 --> 00:05:53,045
So by using this simple logic,

97
00:05:53,045 --> 00:05:56,120
you can able to get your AWS account ID.

98
00:05:56,120 --> 00:06:01,050
Let's say. Okay, thank you for watching this video.

