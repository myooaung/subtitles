WEBVTT
ï»¿1
00:00:01.280 --> 00:00:03.105
Hi friends.

2
00:00:03.105 --> 00:00:04.740
In our previous sections, right?

3
00:00:04.740 --> 00:00:12.405
We have seen how to automate snapshots of EBS volumes using AWS Lambda and CloudWatch.

4
00:00:12.405 --> 00:00:16.080
And that concept is only for one region.

5
00:00:16.080 --> 00:00:16.890
No.

6
00:00:16.890 --> 00:00:22.725
If I want to take snapshots of EBS volumes for all regions with one single script.

7
00:00:22.725 --> 00:00:24.855
How you can proceed.

8
00:00:24.855 --> 00:00:26.220
Right?

9
00:00:26.220 --> 00:00:29.280
So simply here we are going to discuss automate

10
00:00:29.280 --> 00:00:33.175
snapshots of EBS volumes for all transients.

11
00:00:33.175 --> 00:00:37.055
Alright, see, to implement this,

12
00:00:37.055 --> 00:00:40.985
right, let me implement of cone on localhost first.

13
00:00:40.985 --> 00:00:45.150
Then we copy and paste this code on your lambda.

14
00:00:45.550 --> 00:00:48.440
Ok, I'm sorry, year guys.

15
00:00:48.440 --> 00:00:50.794
So my intention is actually,

16
00:00:50.794 --> 00:00:54.755
if you observe already we have a chord and this chord, right?

17
00:00:54.755 --> 00:00:56.375
In our previous section,

18
00:00:56.375 --> 00:01:02.600
we implemented this core to take snapshot of your EBS volumes through your lambda.

19
00:01:02.600 --> 00:01:05.555
And we can also run your code from your local host.

20
00:01:05.555 --> 00:01:07.715
And whatever the code you are having,

21
00:01:07.715 --> 00:01:09.485
that is for only one region.

22
00:01:09.485 --> 00:01:12.140
Now my intention is I want to repeat this,

23
00:01:12.140 --> 00:01:15.095
I want to repeat this core for all regions, that's it.

24
00:01:15.095 --> 00:01:18.320
So before going to repeat this code for all regions,

25
00:01:18.320 --> 00:01:22.520
tried to collect all regions with your moto three skip,

26
00:01:22.520 --> 00:01:27.155
then, just repeat this logic for all regions, right?

27
00:01:27.155 --> 00:01:31.505
See, what I'm doing is first I'm going to collect all my regions.

28
00:01:31.505 --> 00:01:35.000
So here's, as of now, I am implementing my code from localhost.

29
00:01:35.000 --> 00:01:38.190
That's why I'm going to create a session first.

30
00:01:38.410 --> 00:01:41.795
Remember that in order to create any session,

31
00:01:41.795 --> 00:01:43.925
if you're running your core from lambda.

32
00:01:43.925 --> 00:01:46.595
But as of now, I am running from my local host.

33
00:01:46.595 --> 00:01:48.620
So simply oceanic coast to Buto,

34
00:01:48.620 --> 00:01:54.470
three dot dot your session.

35
00:01:54.470 --> 00:02:01.445
Then you have to provide your for filename equals to underscore RO.

36
00:02:01.445 --> 00:02:06.110
Alright, so from first session onwards we are using this as a profile.

37
00:02:06.110 --> 00:02:06.530
Lynn.

38
00:02:06.530 --> 00:02:09.245
If you want to change any profile, you can change it.

39
00:02:09.245 --> 00:02:11.720
The only thing you just to configure your enemies,

40
00:02:11.720 --> 00:02:14.690
configure hyphen, hyphen profile your Profile Name,

41
00:02:14.690 --> 00:02:17.285
and then pass the credentials, right?

42
00:02:17.285 --> 00:02:18.155
Fine.

43
00:02:18.155 --> 00:02:23.270
Now let me create my EC2 client object.

44
00:02:23.270 --> 00:02:25.340
You can go with the client as well as a resource.

45
00:02:25.340 --> 00:02:29.060
So our previous code is width, yeah, client, right?

46
00:02:29.060 --> 00:02:32.810
And one more thing. I have given

47
00:02:32.810 --> 00:02:36.560
the same code in terms of I forgot to explain these guys first,

48
00:02:36.560 --> 00:02:38.790
let me go through this.

49
00:02:40.390 --> 00:02:44.930
Whatever the code you implemented to take snapshot in

50
00:02:44.930 --> 00:02:49.040
this previous video is using your client object.

51
00:02:49.040 --> 00:02:49.655
Right?

52
00:02:49.655 --> 00:02:54.050
Now, I already given a core to take

53
00:02:54.050 --> 00:02:59.225
snapshot of your EBS volumes in terms of resource object, right?

54
00:02:59.225 --> 00:03:01.800
Let me open that core.

55
00:03:04.810 --> 00:03:08.460
I think this is the one.

56
00:03:21.970 --> 00:03:25.850
See here, right here,

57
00:03:25.850 --> 00:03:29.945
I have created my resource object. Same concept.

58
00:03:29.945 --> 00:03:33.545
What you have to do is this is from localhost device.

59
00:03:33.545 --> 00:03:36.590
If you want to run the score from your lambda,

60
00:03:36.590 --> 00:03:41.824
you have to copy and paste this entire court under your Lambda handler.

61
00:03:41.824 --> 00:03:45.590
And because the execution part will start from here that whatever the code you,

62
00:03:45.590 --> 00:03:47.930
how here, write that code,

63
00:03:47.930 --> 00:03:50.870
you just copy and paste it in your under Lambda handler

64
00:03:50.870 --> 00:03:54.155
so that your code is now in terms of your resource object.

65
00:03:54.155 --> 00:03:55.040
Okay?

66
00:03:55.040 --> 00:03:59.000
Okay, anyway, you can go and proceed with either client or resource.

67
00:03:59.000 --> 00:04:00.800
There I explained with resource as well,

68
00:04:00.800 --> 00:04:01.940
just how given a query,

69
00:04:01.940 --> 00:04:04.205
just go through that. That's fine.

70
00:04:04.205 --> 00:04:09.740
Whatever it may be, you have a code to implement your snapshot using client object here.

71
00:04:09.740 --> 00:04:14.825
Right now our intention is I want to repeat that code for multiple regions.

72
00:04:14.825 --> 00:04:17.660
That means automatically, my code has to take

73
00:04:17.660 --> 00:04:21.020
a snapshot of your EBS volumes for all regions.

74
00:04:21.020 --> 00:04:28.850
That's why first, I'm trying to collect my all regions for my EBS volumes, right.

75
00:04:28.850 --> 00:04:30.680
Let me create my EC2 client.

76
00:04:30.680 --> 00:04:33.169
That is nothing but from your session.

77
00:04:33.169 --> 00:04:34.610
Client.

78
00:04:34.610 --> 00:04:37.070
Then service name.

79
00:04:37.070 --> 00:04:39.815
It goes to EC2.

80
00:04:39.815 --> 00:04:43.385
Then let me take some region name.

81
00:04:43.385 --> 00:04:45.795
Us is to one.

82
00:04:45.795 --> 00:04:49.465
So as already, we house somewhere core to

83
00:04:49.465 --> 00:04:53.170
display or to get all your regions of your EC2, right?

84
00:04:53.170 --> 00:04:55.540
So directly I am going to write that code because

85
00:04:55.540 --> 00:04:58.855
already we explained that in our previous videos.

86
00:04:58.855 --> 00:05:02.995
For each region in your EC2,

87
00:05:02.995 --> 00:05:08.965
client dot describe regents.

88
00:05:08.965 --> 00:05:12.925
When, if you remember, we have a key called regions.

89
00:05:12.925 --> 00:05:21.820
Then let me print first your region, region name.

90
00:05:21.820 --> 00:05:24.310
Let me save this and grander c,

91
00:05:24.310 --> 00:05:26.690
the output, what you are going to get.

92
00:05:27.930 --> 00:05:31.465
Now you're able to get all your regions,

93
00:05:31.465 --> 00:05:33.955
right automatically or identifying the regions which are

94
00:05:33.955 --> 00:05:37.900
available in your AWS for your ec2 service right?

95
00:05:37.900 --> 00:05:41.035
Now let me take one list.

96
00:05:41.035 --> 00:05:45.370
All regions equals to knowing

97
00:05:45.370 --> 00:05:49.975
shop printing just I want to store all regions in this variable.

98
00:05:49.975 --> 00:05:51.370
That's it.

99
00:05:51.370 --> 00:05:55.375
Now in your hand you how all regions, right?

100
00:05:55.375 --> 00:05:58.720
Now you need to execute whatever the code you

101
00:05:58.720 --> 00:06:02.395
how to take snapshot that for each and every region, right?

102
00:06:02.395 --> 00:06:05.095
See, this is for one region, right?

103
00:06:05.095 --> 00:06:06.985
Let me copy this.

104
00:06:06.985 --> 00:06:09.895
If you're importing pre-print model.

105
00:06:09.895 --> 00:06:14.600
Yeah. Let me take this part.

106
00:06:17.910 --> 00:06:21.745
First. I will write the code on your local host.

107
00:06:21.745 --> 00:06:27.680
Right? Anyway, we just absorbed this core.

108
00:06:29.370 --> 00:06:32.600
And this give me a second.

109
00:06:43.170 --> 00:06:46.180
So this is the core, right?

110
00:06:46.180 --> 00:06:48.685
To take snapshot of for one region.

111
00:06:48.685 --> 00:06:50.830
Now if you have done, you are creating in

112
00:06:50.830 --> 00:06:55.160
this one client that is with respect to your region name.

113
00:06:55.420 --> 00:07:06.410
Right? Now that's what you have to do is let me write this like a for each region.

114
00:07:06.410 --> 00:07:09.140
In all regions.

115
00:07:09.140 --> 00:07:11.780
So now print just observed

116
00:07:11.780 --> 00:07:20.420
that working on whatever region you,

117
00:07:20.420 --> 00:07:21.810
how

118
00:07:29.140 --> 00:07:30.665
sorry,

119
00:07:30.665 --> 00:07:38.780
h region.

120
00:07:38.780 --> 00:07:42.690
Let me save this and run this and see the outward first.

121
00:07:45.130 --> 00:07:48.680
See working on, working on there means you are

122
00:07:48.680 --> 00:07:51.680
able to take one-by-one region from your account.

123
00:07:51.680 --> 00:07:52.445
Right?

124
00:07:52.445 --> 00:07:57.035
Now, create again a client object for each and every region separately.

125
00:07:57.035 --> 00:08:05.885
That's why a, what you have to do is equals to now the region name is this one.

126
00:08:05.885 --> 00:08:10.880
So now automatically you are able to create your client object for each and every region.

127
00:08:10.880 --> 00:08:14.630
Now you are going to repeat this logic for

128
00:08:14.630 --> 00:08:18.575
this many number of times because for each region you have to create your client object.

129
00:08:18.575 --> 00:08:21.500
Alright, then, so this is your core.

130
00:08:21.500 --> 00:08:25.310
Now you how in your hand this easy to client object for a particular region.

131
00:08:25.310 --> 00:08:31.595
Just to repeat this once, right?

132
00:08:31.595 --> 00:08:34.580
And then it is going to take one more region.

133
00:08:34.580 --> 00:08:37.655
Then just repeat this logic for once again, right?

134
00:08:37.655 --> 00:08:41.360
So integrating that coherent sell what I'm doing is,

135
00:08:41.360 --> 00:08:44.550
yeah, you can write it right

136
00:08:57.760 --> 00:09:00.960
here. Let me copy this

137
00:09:17.140 --> 00:09:25.440
from here. The trick.

138
00:09:38.950 --> 00:09:40.385
Right.

139
00:09:40.385 --> 00:09:43.250
Now if you save this and run this,

140
00:09:43.250 --> 00:09:48.410
right, you are going to

141
00:09:48.410 --> 00:09:54.545
get one by one region and they are going to take snapshot for you are one-by-one regime.

142
00:09:54.545 --> 00:09:57.560
That's it, right?

143
00:09:57.560 --> 00:10:01.370
The only thing is you are repeating this logic for all regions.

144
00:10:01.370 --> 00:10:04.280
So your concept is you need to understand.

145
00:10:04.280 --> 00:10:07.475
First you have to collect all your regions that

146
00:10:07.475 --> 00:10:10.445
automatically you are collecting from your boat O3 itself.

147
00:10:10.445 --> 00:10:14.330
Then once you have all your regions in your hand, again,

148
00:10:14.330 --> 00:10:17.390
you how to create your plane for each and every region,

149
00:10:17.390 --> 00:10:20.300
right, automatically you are creating your client.

150
00:10:20.300 --> 00:10:25.190
Then for a particular region and for that region you are repeating your logic.

151
00:10:25.190 --> 00:10:28.025
Let me save this and run this.

152
00:10:28.025 --> 00:10:30.140
So before that, let me open anyway,

153
00:10:30.140 --> 00:10:34.084
I don't have any volumes in other regions.

154
00:10:34.084 --> 00:10:35.550
Right.

155
00:10:36.520 --> 00:10:40.505
So as of know-how to volumes Simon snapshots here,

156
00:10:40.505 --> 00:10:44.820
if I run our code has to take two more because I have only

157
00:10:54.700 --> 00:10:56.750
given secondaries here.

158
00:10:56.750 --> 00:11:00.095
Actually I'm using Python three, right?

159
00:11:00.095 --> 00:11:07.680
So python three needs parenthesis for you, our print statement.

160
00:11:11.400 --> 00:11:16.190
So what do we help bring and just provide

161
00:11:28.590 --> 00:11:37.480
this and see working on this,

162
00:11:37.480 --> 00:11:39.490
there are no snapshot list of volumes, right?

163
00:11:39.490 --> 00:11:43.045
Is our MD snapshot already sought empty?

164
00:11:43.045 --> 00:11:44.900
Right?

165
00:11:57.340 --> 00:12:04.445
So we can include one modal logic here actually that is if list off volume IDs or empty.

166
00:12:04.445 --> 00:12:07.170
Let me stop this code.

167
00:12:34.300 --> 00:12:40.145
That last case, suppose where you're getting a list of volume mighty CIA, This one.

168
00:12:40.145 --> 00:12:45.065
Right? So if list off volume IDs or empty,

169
00:12:45.065 --> 00:12:48.050
then monitor take snapshots slips right here I am writing

170
00:12:48.050 --> 00:12:54.240
if list of IDs or Boolean off this list of IDs.

171
00:12:56.770 --> 00:13:00.755
If it is equals to false.

172
00:13:00.755 --> 00:13:04.280
And simply I am writing continues so that it won't

173
00:13:04.280 --> 00:13:08.780
take your snapshot because he fully stuff volume IDs are not present then non-intuitive.

174
00:13:08.780 --> 00:13:10.430
Continue your Lehman in logic.

175
00:13:10.430 --> 00:13:13.190
That's why I'm including the snow.

176
00:13:13.190 --> 00:13:15.155
Let me rerun this.

177
00:13:15.155 --> 00:13:18.329
I'll see the output. You will get the difference.

178
00:13:18.430 --> 00:13:20.975
Working on us saying,

179
00:13:20.975 --> 00:13:23.300
no, it is not taking any snapshot because anyway,

180
00:13:23.300 --> 00:13:26.990
you don't have any volume or is that going to take now only in

181
00:13:26.990 --> 00:13:31.980
US East One we have out there to take some time just after the output.

182
00:13:32.020 --> 00:13:35.450
Yes, nobody's taking a snapshot on this.

183
00:13:35.450 --> 00:13:40.310
Right now it will take some time because we included some waiters also, right?

184
00:13:40.310 --> 00:13:48.965
So here's the code just to take a snapshot for all regions at a time.

185
00:13:48.965 --> 00:13:53.270
Now the only thing if you want to schedule your job three or lambda, right?

186
00:13:53.270 --> 00:13:54.590
And using Cloud watch,

187
00:13:54.590 --> 00:13:57.660
let me copy this code and

188
00:14:06.540 --> 00:14:10.370
I need to provide some spaces here.

189
00:14:22.290 --> 00:14:29.545
Take this code and go and lambda, right?

190
00:14:29.545 --> 00:14:32.960
So instead of this code,

191
00:14:41.790 --> 00:14:48.110
let me delete this part up to this.

192
00:14:48.110 --> 00:14:49.085
Right?

193
00:14:49.085 --> 00:14:53.630
Now, copy this and paste it.

194
00:14:53.630 --> 00:14:56.420
We already provide spaces known enough.

195
00:14:56.420 --> 00:14:58.925
Input mode or three already we input or somewhere.

196
00:14:58.925 --> 00:15:01.265
And don't create session here, Reno,

197
00:15:01.265 --> 00:15:03.995
whenever if you are working from lambda, right?

198
00:15:03.995 --> 00:15:08.210
Don't take any session that it'll be hard to take from before IT session that

199
00:15:08.210 --> 00:15:12.620
is nothing but Bhutto three dot plane because you are assigning IAM roles.

200
00:15:12.620 --> 00:15:14.300
That's it.

201
00:15:14.300 --> 00:15:16.950
Save it.

202
00:15:18.850 --> 00:15:20.810
Right?

203
00:15:20.810 --> 00:15:23.880
So whereas here you have a one challenge that

204
00:15:23.880 --> 00:15:27.950
see how many volumes IDs you are going to take here.

205
00:15:27.950 --> 00:15:30.965
Right? So based on that,

206
00:15:30.965 --> 00:15:33.935
you need to change your time, right?

207
00:15:33.935 --> 00:15:35.750
So once if you test your environment,

208
00:15:35.750 --> 00:15:39.800
then you can expect your time and you can change your time here.

209
00:15:39.800 --> 00:15:41.420
Okay.

210
00:15:41.420 --> 00:15:43.565
Now let me come here.

211
00:15:43.565 --> 00:15:44.675
Is it done?

212
00:15:44.675 --> 00:15:48.365
Yeah, it's done for all regions, right?

213
00:15:48.365 --> 00:15:50.240
See if the volumes are empty,

214
00:15:50.240 --> 00:15:52.070
then it is not going to take a snapshot.

215
00:15:52.070 --> 00:15:56.615
See here. Here we have some volumes.

216
00:15:56.615 --> 00:15:59.915
That way it is going to take, right?

217
00:15:59.915 --> 00:16:02.540
It was snapshots, but here it is not going to take in

218
00:16:02.540 --> 00:16:06.080
the below is not going to take any structural because volumes are empty.

219
00:16:06.080 --> 00:16:10.580
So finally, this code is working for all regions, okay, stride forward.

220
00:16:10.580 --> 00:16:12.680
You can take these core and you can use it in your yard.

221
00:16:12.680 --> 00:16:16.700
And the only challenge in your real time A's see based

222
00:16:16.700 --> 00:16:20.810
on how many volumes eddies you are expecting through this lambda core, right?

223
00:16:20.810 --> 00:16:22.700
Based on that, you need to provide

224
00:16:22.700 --> 00:16:28.500
some execution time Anita unit to take some extra execution time here.

225
00:16:30.730 --> 00:16:34.655
So as of now I have taken right, simply ten.

226
00:16:34.655 --> 00:16:38.870
But maybe you need to take some extra time.

227
00:16:38.870 --> 00:16:40.085
Right?

228
00:16:40.085 --> 00:16:43.560
Okay. Thank you for watching this video.

