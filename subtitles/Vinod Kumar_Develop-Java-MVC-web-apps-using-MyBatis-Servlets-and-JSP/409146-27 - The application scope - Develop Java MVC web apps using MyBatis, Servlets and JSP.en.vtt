WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.080
in this lecture,

00:00:01.080 --> 00:00:05.050
let's have a look at another scope called as application scope.

00:00:05.050 --> 00:00:07.790
This is the same example as the previous one.

00:00:07.790 --> 00:00:10.130
We're continuing with the same example.

00:00:10.130 --> 00:00:13.000
So here we have one browser window that is open,

00:00:13.000 --> 00:00:17.010
currently showing that these are the names that are available on.

00:00:17.010 --> 00:00:21.180
I have another incognito window where I have three more names here.

00:00:21.180 --> 00:00:23.660
So any name that I had over here,

00:00:23.660 --> 00:00:24.270
for example,

00:00:24.270 --> 00:00:27.680
if I type Jindo and they took on add name,

00:00:27.680 --> 00:00:33.080
you can see that view names shows that jindo over here but not here.

00:00:33.080 --> 00:00:36.930
And that's because these two brother windows are acting as to different clients.

00:00:36.930 --> 00:00:40.580
They have their respective session objects on DNA,

00:00:40.580 --> 00:00:42.050
not a shared the scope.

00:00:42.050 --> 00:00:48.250
Sometimes you may have a situation where the data has to be stored in a scope that is

00:00:48.250 --> 00:00:48.860
accessible.

00:00:48.860 --> 00:00:54.200
Toe all the claims so that any claimed manipulating the data in that particular scope

00:00:54.200 --> 00:00:56.350
reflects on the other plane also,

00:00:56.350 --> 00:00:58.460
so this is called application scope,

00:00:58.460 --> 00:01:04.050
and the application scope is represented by an object off an interface called sublet

00:01:04.050 --> 00:01:06.060
context by default.

00:01:06.060 --> 00:01:11.310
When your Web container like Tomcats starts for every application that it mounts,

00:01:11.310 --> 00:01:15.070
it will have one solid context object readily created,

00:01:15.070 --> 00:01:16.850
which means at this finding time,

00:01:16.850 --> 00:01:19.370
we already have a separate context.

00:01:19.370 --> 00:01:20.050
Object.

00:01:20.050 --> 00:01:23.560
We just have to get a French to that and start using the same.

00:01:23.560 --> 00:01:25.600
So let's go back to our application here.

00:01:25.600 --> 00:01:31.090
So we have the ADN image demon submitting the name goes toe add name solid on that.

00:01:31.090 --> 00:01:36.390
This is where we are obtaining the session object and then storing the data over here.

00:01:36.390 --> 00:01:39.550
Apart from storing the names in the fashion scope,

00:01:39.550 --> 00:01:42.980
let's also store the same thing in the application scope.

00:01:42.980 --> 00:01:44.430
Like I said earlier,

00:01:44.430 --> 00:01:48.810
application scope is represented by an object off subject context.

00:01:48.810 --> 00:01:49.880
Let's get the same thing,

00:01:49.880 --> 00:01:51.680
so I'm gonna go right here.

00:01:51.680 --> 00:01:54.170
Let's declare a variable called us.

00:01:54.170 --> 00:01:56.010
Context equals two.

00:01:56.010 --> 00:02:00.070
We need to call a function that is coming from It's TDB.

00:02:00.070 --> 00:02:00.700
Sarette,

00:02:00.700 --> 00:02:04.290
which in turn receives the same thing from it's a super class guy,

00:02:04.290 --> 00:02:05.710
generate solid.

00:02:05.710 --> 00:02:09.630
So we already have a function called get solid context.

00:02:09.630 --> 00:02:14.850
You can see that it's coming from generate solid over here so we don't have to default toe

00:02:14.850 --> 00:02:17.210
by using any variable like request.

00:02:17.210 --> 00:02:19.220
It's already available to us.

00:02:19.220 --> 00:02:20.460
Why our inheritance?

00:02:20.460 --> 00:02:23.720
So I have to create this variable called Context Command.

00:02:23.720 --> 00:02:24.630
One are controlled.

00:02:24.630 --> 00:02:25.450
One will do that.

00:02:25.450 --> 00:02:26.870
Create a local variable.

00:02:26.870 --> 00:02:28.710
We got this Once again,

00:02:28.710 --> 00:02:29.930
we are going toe.

00:02:29.930 --> 00:02:33.550
Get a released from that particular scope.

00:02:33.550 --> 00:02:37.050
But if you are visiting this summer for the first time again,

00:02:37.050 --> 00:02:38.190
that's going to be no.

00:02:38.190 --> 00:02:40.040
So it's pretty much the same thing.

00:02:40.040 --> 00:02:45.180
I can actually copy this part and then assign that variable here.

00:02:45.180 --> 00:02:49.980
Let's call it us Context Names equals toe instead of session.

00:02:49.980 --> 00:02:52.060
It's called Context or get attribute.

00:02:52.060 --> 00:02:54.650
Notice the functions like get attribute,

00:02:54.650 --> 00:02:54.910
set,

00:02:54.910 --> 00:02:55.510
attribute,

00:02:55.510 --> 00:02:56.510
get attribute.

00:02:56.510 --> 00:02:56.840
Names,

00:02:56.840 --> 00:02:57.190
remove,

00:02:57.190 --> 00:02:57.690
attribute.

00:02:57.690 --> 00:02:59.460
All those things remain the same thing.

00:02:59.460 --> 00:03:02.290
So I have to create a variable off list to type.

00:03:02.290 --> 00:03:04.180
So I'm gonna press command one again.

00:03:04.180 --> 00:03:06.630
Create that local variable Once again,

00:03:06.630 --> 00:03:07.800
this would be no,

00:03:07.800 --> 00:03:09.170
probably like this.

00:03:09.170 --> 00:03:11.630
I can store the same thing over this.

00:03:11.630 --> 00:03:16.310
I'm going to say if context names equals toe none,

00:03:16.310 --> 00:03:18.640
that means you're visiting it for the first time.

00:03:18.640 --> 00:03:23.160
I'm gonna assign context names equals toe new release,

00:03:23.160 --> 00:03:25.630
just like the previous one off string type,

00:03:25.630 --> 00:03:29.300
and then store the same thing in the application scopes.

00:03:29.300 --> 00:03:32.050
I'm gonna say you're context dot said attribute,

00:03:32.050 --> 00:03:36.580
Let's give the name as name list because that's what I was looking for first.

00:03:36.580 --> 00:03:41.600
So because it was not that I'm gonna store that over here on the value I want to start is

00:03:41.600 --> 00:03:44.990
the context names just like what we did with respect,

00:03:44.990 --> 00:03:49.560
position and just like how I added the friend named toe names.

00:03:49.560 --> 00:03:51.560
We're gonna add that over here.

00:03:51.560 --> 00:03:51.890
So what?

00:03:51.890 --> 00:03:56.720
They are context names dot ad and then with a friending.

00:03:56.720 --> 00:03:58.100
So if you're carefully observed,

00:03:58.100 --> 00:03:59.990
this is exactly what we have done here.

00:03:59.990 --> 00:04:03.020
But the object here is the application scope.

00:04:03.020 --> 00:04:05.830
A bit off changed toe the view name starlet.

00:04:05.830 --> 00:04:06.570
Also,

00:04:06.570 --> 00:04:07.370
in addition,

00:04:07.370 --> 00:04:10.450
toe displaying the nameless from decision,

00:04:10.450 --> 00:04:14.750
let's also display all the names that are present in the application scope.

00:04:14.750 --> 00:04:15.500
Once again,

00:04:15.500 --> 00:04:20.490
I'm going to say here context equals toe get select context.

00:04:20.490 --> 00:04:23.010
The context is supposed to be created off type,

00:04:23.010 --> 00:04:24.150
solid context,

00:04:24.150 --> 00:04:29.770
and I can see here from the context I have to get the name list and say context,

00:04:29.770 --> 00:04:36.650
don't get attribute called name list will assign this toe a list off string.

00:04:36.650 --> 00:04:39.200
We call it US context names,

00:04:39.200 --> 00:04:45.840
just like the previous example we have so forcefully cast it and then I'll check your if

00:04:45.840 --> 00:04:48.570
context names not equals toe.

00:04:48.570 --> 00:04:49.060
No,

00:04:49.060 --> 00:04:51.530
let's loop over and print the same thing.

00:04:51.530 --> 00:04:53.980
So this time I want to give him a sage all dirt print.

00:04:53.980 --> 00:05:02.880
Ellen probably hit three friend names added by all users slash 83 and now I want to give

00:05:02.880 --> 00:05:04.770
out dot parental and you yell,

00:05:04.770 --> 00:05:12.310
Let's loop over string name in context names outdoor print.

00:05:12.310 --> 00:05:12.740
Ellen.

00:05:12.740 --> 00:05:21.170
This time your life plus name plus slash Alive not is the name here is not a problem

00:05:21.170 --> 00:05:24.370
because it's a scoped variable within the for loop.

00:05:24.370 --> 00:05:26.440
It doesn't conflict with this variable.

00:05:26.440 --> 00:05:30.530
So I'm gonna come back and say how dark brindle and slash uu.

00:05:30.530 --> 00:05:34.980
So in addition to their names entered by a particular user,

00:05:34.980 --> 00:05:37.920
we are also going to see the names entered by all users.

00:05:37.920 --> 00:05:39.460
Let's go back to the browser.

00:05:39.460 --> 00:05:44.940
Let's close all instance off Crume so that we don't have any session data here,

00:05:44.940 --> 00:05:46.160
So I'm gonna close chrome.

00:05:46.160 --> 00:05:51.890
I'm gonna open a new instance off Crume on another instance off safari.

00:05:51.890 --> 00:05:57.550
So two different roses here that's arranged that one next to each other.

00:05:57.550 --> 00:06:00.240
I'm gonna visit your the Ural,

00:06:00.240 --> 00:06:01.830
which is nothing but local host.

00:06:01.830 --> 00:06:09.690
Age A is zero slash subtler demo slash add name dot html That's the Ural that we had to

00:06:09.690 --> 00:06:10.060
visit.

00:06:10.060 --> 00:06:12.750
I'm going to visit the same thing over here also.

00:06:12.750 --> 00:06:18.620
So we have two different browsers to different climbs that are a couple of names over here

00:06:18.620 --> 00:06:19.610
somewhere are here,

00:06:19.610 --> 00:06:20.170
say,

00:06:20.170 --> 00:06:21.870
when I pressed Enter,

00:06:21.870 --> 00:06:23.150
That's out here.

00:06:23.150 --> 00:06:25.060
Ramesh enter.

00:06:25.060 --> 00:06:26.630
That's a parish.

00:06:26.630 --> 00:06:30.910
Enter So three different name like take your it says here these are your friends and friend

00:06:30.910 --> 00:06:32.410
names added by all users.

00:06:32.410 --> 00:06:33.670
That includes myself as well.

00:06:33.670 --> 00:06:39.890
I'm gonna go here and then type in a name here that James first enter John Doe on pressed

00:06:39.890 --> 00:06:43.080
Enter one more that a jindo enter.

00:06:43.080 --> 00:06:44.940
If I click on view names over here,

00:06:44.940 --> 00:06:48.400
you can see that not only I see the name says no,

00:06:48.400 --> 00:06:49.050
I entered,

00:06:49.050 --> 00:06:52.180
but I also see the names entered by the other user.

00:06:52.180 --> 00:06:53.770
The same thing happens over here.

00:06:53.770 --> 00:06:54.600
When I click on this,

00:06:54.600 --> 00:07:00.450
you can see this grew further because it is representing names entered by all users and the

00:07:00.450 --> 00:07:03.890
data is stored in a location that is accessible toe all the claims.

00:07:03.890 --> 00:07:04.530
However,

00:07:04.530 --> 00:07:08.060
this particular data is kept in scopes,

00:07:08.060 --> 00:07:11.880
which are accessible only to the respective plans.

00:07:11.880 --> 00:07:13.220
So to summarize,

00:07:13.220 --> 00:07:17.210
there is a request scope that is the scope of the smallest lifetime.

00:07:17.210 --> 00:07:18.900
So you visit a Sollett.

00:07:18.900 --> 00:07:23.640
The sunlight can store data in the request pope and then goto another sublet that can

00:07:23.640 --> 00:07:24.470
access the data.

00:07:24.470 --> 00:07:27.550
But when the solid gives the response back to the user,

00:07:27.550 --> 00:07:29.740
the data stored in the request is destroyed.

00:07:29.740 --> 00:07:31.310
Along with the request object.

00:07:31.310 --> 00:07:31.840
However,

00:07:31.840 --> 00:07:36.560
session object is little different because the station object is maintained on the subway

00:07:36.560 --> 00:07:41.450
state for certain duration on the planks can visit any sub alert on all the subjects.

00:07:41.450 --> 00:07:43.360
Have access to that particular session objects.

00:07:43.360 --> 00:07:45.330
So one user one session.

00:07:45.330 --> 00:07:49.860
But as the application scope is something different because there is only a single

00:07:49.860 --> 00:07:50.800
application scope,

00:07:50.800 --> 00:07:55.600
object and all the users have access to the same application scope.

00:07:55.600 --> 00:07:59.540
So most of the time application scope is used for retrieving.

00:07:59.540 --> 00:08:01.330
Some read only kind of data,

00:08:01.330 --> 00:08:05.470
so which is stored in one place and everybody can have access to session.

00:08:05.470 --> 00:08:11.650
On the other hand is used for maintaining the user interaction data within a climbed

00:08:11.650 --> 00:08:12.260
session

