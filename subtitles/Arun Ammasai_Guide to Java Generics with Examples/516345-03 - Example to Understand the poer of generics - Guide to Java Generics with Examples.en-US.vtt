WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.965
Hello everyone. Welcome back.

00:00:01.965 --> 00:00:03.450
As I mentioned earlier.

00:00:03.450 --> 00:00:06.900
So I'm going to show you a simple method which will

00:00:06.900 --> 00:00:10.935
take some input and it returns the list of the same type.

00:00:10.935 --> 00:00:13.530
And then once we've done that,

00:00:13.530 --> 00:00:15.585
we are trying to motivate the same method,

00:00:15.585 --> 00:00:19.455
how it's gonna work for multiple types of data, right?

00:00:19.455 --> 00:00:20.820
So now what I'm gonna do,

00:00:20.820 --> 00:00:22.485
I'm gonna create a dot here.

00:00:22.485 --> 00:00:24.405
Okay, so it's going to be static method

00:00:24.405 --> 00:00:27.690
and it's going to be written list of string for now.

00:00:27.690 --> 00:00:32.085
So let's assume it's going to lay down a list of a string.

00:00:32.085 --> 00:00:38.380
And then the metonym is going to be our list method.

00:00:39.370 --> 00:00:48.900
And which you'll add two inputs like string S1 domain spring is two.

00:00:50.590 --> 00:00:53.045
So the first thing which I'm gonna do,

00:00:53.045 --> 00:00:57.720
I'm gonna create a list of string here.

00:00:57.760 --> 00:01:06.930
Then it's going to be List is equal to new ArrayList. Got it.

00:01:09.670 --> 00:01:15.665
And then I'm going to add the inputs which we received to the list.

00:01:15.665 --> 00:01:21.840
So list dot add and S1,

00:01:22.030 --> 00:01:29.555
int list dot add, H2.

00:01:29.555 --> 00:01:38.570
And finally, I'm going to return the list. This is pretty simple.

00:01:38.570 --> 00:01:40.250
You might see that it's nothing complicated here.

00:01:40.250 --> 00:01:41.540
Yes, there is no complication.

00:01:41.540 --> 00:01:43.175
Here is a very simple method.

00:01:43.175 --> 00:01:46.130
Let me call this my talk. I want to print the data.

00:01:46.130 --> 00:01:47.480
So I'm just providing,

00:01:47.480 --> 00:01:50.465
I'm just calling a method inside the US is not order print element.

00:01:50.465 --> 00:01:55.040
So here I'm going to simply call the list that I'm passing two inputs.

00:01:55.040 --> 00:02:04.230
For example, let's pass some fruits names apple and orange.

00:02:05.680 --> 00:02:10.265
So basically the ultimate goal of this entire method,

00:02:10.265 --> 00:02:16.145
it will take some input and it will return the same type of the data as a list,

00:02:16.145 --> 00:02:18.320
but now it will only accept a string.

00:02:18.320 --> 00:02:21.150
Okay, so let me run this.

00:02:24.340 --> 00:02:26.840
So it's compiling.

00:02:26.840 --> 00:02:32.690
Yes, now we've got the outcome as a list because he just comes in the square brackets.

00:02:32.690 --> 00:02:34.835
Which Minister list, okay, Now,

00:02:34.835 --> 00:02:41.585
so what if I want to call the same method with different type,

00:02:41.585 --> 00:02:47.045
which means I don't want to use the list type.

00:02:47.045 --> 00:02:49.730
I mean to say that not to string.

00:02:49.730 --> 00:02:52.220
I want to pass in two years.

00:02:52.220 --> 00:02:53.765
So how this mother is going to walk.

00:02:53.765 --> 00:02:58.535
So what I'm gonna do, I'm gonna copy the same line and I'm going to call it again.

00:02:58.535 --> 00:03:02.750
And here I'm just trying to modify the inputs type as a different one,

00:03:02.750 --> 00:03:06.155
like a 100, come up to a 100.

00:03:06.155 --> 00:03:09.005
But it will end up with a compilation issue

00:03:09.005 --> 00:03:11.825
because the method which will answer only the string,

00:03:11.825 --> 00:03:15.425
it will not accept the integers.

00:03:15.425 --> 00:03:18.275
So this is where the January comes into play.

00:03:18.275 --> 00:03:19.655
Take an example.

00:03:19.655 --> 00:03:23.540
So I want a method which will take some inputs and

00:03:23.540 --> 00:03:28.115
it will return the same data analyst offer data, right?

00:03:28.115 --> 00:03:29.960
And how are we going to achieve it?

00:03:29.960 --> 00:03:32.555
So in order to create a list,

00:03:32.555 --> 00:03:35.150
the same functionality, you have it read to another method.

00:03:35.150 --> 00:03:36.650
And if you want it in double,

00:03:36.650 --> 00:03:40.550
you how to create one more method if it is a different type or different DB2,

00:03:40.550 --> 00:03:42.965
You have to go for one more month that,

00:03:42.965 --> 00:03:44.870
so when you have a 10 different types,

00:03:44.870 --> 00:03:46.220
you have to read ten different method.

00:03:46.220 --> 00:03:49.460
That is not the actual smart way of coding.

00:03:49.460 --> 00:03:52.985
So we need to find a way how it can be optimized.

00:03:52.985 --> 00:03:56.375
This simpler way, that is where the generics comes to into place.

00:03:56.375 --> 00:04:02.285
So I'm going to write a method which will take any kind of data or any type of data,

00:04:02.285 --> 00:04:07.100
and then it will return as a same type of list with content type.

00:04:07.100 --> 00:04:09.965
So that is where we're going to write the generic method.

00:04:09.965 --> 00:04:13.205
So now I'm going to create one more method here,

00:04:13.205 --> 00:04:15.170
which is pretty much similar to this one.

00:04:15.170 --> 00:04:16.430
So for now what I'm gonna do,

00:04:16.430 --> 00:04:20.300
I'm gonna copy this same method because I'm just modifying few things here.

00:04:20.300 --> 00:04:29.525
So, and this is going to be a generic method, generic method n.

00:04:29.525 --> 00:04:31.745
Now what I'm gonna do is,

00:04:31.745 --> 00:04:34.310
and this method is going to be generic method.

00:04:34.310 --> 00:04:38.840
So don't worry about how to create a generic method of how degrading generic less far.

00:04:38.840 --> 00:04:41.750
Now, just see what I'm trying to do here and

00:04:41.750 --> 00:04:44.840
then I'll give you even more simpler examples.

00:04:44.840 --> 00:04:47.000
What is a generic mentor and what is a generic class?

00:04:47.000 --> 00:04:49.610
Sarnoff, let's go with the flow.

00:04:49.610 --> 00:04:53.435
So here I'm going to mention this is a generic method.

00:04:53.435 --> 00:04:55.355
So what you need to provide,

00:04:55.355 --> 00:04:57.860
so you need to tell the compiler it is a generic method.

00:04:57.860 --> 00:04:59.315
How we can do that,

00:04:59.315 --> 00:05:04.565
simply providing that diamond operator with the type.

00:05:04.565 --> 00:05:07.355
So in between the diamond operator,

00:05:07.355 --> 00:05:09.200
you can prove it anything you can provide.

00:05:09.200 --> 00:05:11.240
A T can grow at anything.

00:05:11.240 --> 00:05:13.370
So normally it's a type data.

00:05:13.370 --> 00:05:17.540
So I'm going to provide the instance of t or the letter of t,

00:05:17.540 --> 00:05:22.550
which means which belongs to which a prefer as a type.

00:05:22.550 --> 00:05:25.460
Right? Okay, so then,

00:05:25.460 --> 00:05:28.460
so this, now this is going to be generic method.

00:05:28.460 --> 00:05:31.520
Yes, because I mentioned this is gendering method.

00:05:31.520 --> 00:05:38.945
This is a type it's going to take as the input in this particular method right now.

00:05:38.945 --> 00:05:42.455
So I want to return us a list of string that is where we have a problem.

00:05:42.455 --> 00:05:44.705
I don't want to written as a list of string.

00:05:44.705 --> 00:05:45.980
So the input data,

00:05:45.980 --> 00:05:48.620
it might be different for each and every call.

00:05:48.620 --> 00:05:50.390
So I don't know what is the type,

00:05:50.390 --> 00:05:53.810
so I'm just simply passing the generic type here,

00:05:53.810 --> 00:05:57.050
which means I don't know what is the type here, right?

00:05:57.050 --> 00:05:59.120
And then again, there is no string here,

00:05:59.120 --> 00:06:02.120
I'm going to pass just simply the T,

00:06:02.120 --> 00:06:06.050
which means that type first parameter, the second parameter.

00:06:06.050 --> 00:06:09.260
And then, and it's not going to be a list of string

00:06:09.260 --> 00:06:12.650
because it's going to be list of T. Right?

00:06:12.650 --> 00:06:15.595
And then everything fixed.

00:06:15.595 --> 00:06:17.410
Now the compilation is your result.

00:06:17.410 --> 00:06:23.455
What I'm gonna do is I'm going to use the same method to call these two.

00:06:23.455 --> 00:06:24.865
I mean, execute these two.

00:06:24.865 --> 00:06:27.655
So I'm going to modify the list mother into a generic method.

00:06:27.655 --> 00:06:29.830
Still, there is no compilation issue.

00:06:29.830 --> 00:06:33.550
And now I'm going to modify the second on disease or the trickiest part.

00:06:33.550 --> 00:06:35.860
Initially it was not working,

00:06:35.860 --> 00:06:38.185
but now it is working how it is possible.

00:06:38.185 --> 00:06:39.860
Let me run it.

00:06:42.930 --> 00:06:44.365
See.

00:06:44.365 --> 00:06:46.750
Now the generic method which will return,

00:06:46.750 --> 00:06:49.750
which will take any kind of data as the input.

00:06:49.750 --> 00:06:53.694
And it will return the same type as a list of outputs.

00:06:53.694 --> 00:06:55.045
So I can pass string,

00:06:55.045 --> 00:06:56.670
I can pass integers,

00:06:56.670 --> 00:06:59.465
or we can try something else as well.

00:06:59.465 --> 00:07:03.000
Like so let's give some thing,

00:07:04.240 --> 00:07:07.950
some other different kind of character.

00:07:08.140 --> 00:07:09.740
Right?

00:07:09.740 --> 00:07:20.225
So a and b.

00:07:20.225 --> 00:07:23.735
And now I'm going to understand method since there is no l,

00:07:23.735 --> 00:07:27.080
here is a string and here is an integer handy, Here's a character,

00:07:27.080 --> 00:07:30.200
but still the method is not throwing any edits are

00:07:30.200 --> 00:07:33.710
the method call is not doing any errors because it's a generic method.

00:07:33.710 --> 00:07:36.990
So let me run it one more time. You will see.

00:07:40.300 --> 00:07:44.810
So now you can see all the informations here, right?

00:07:44.810 --> 00:07:48.410
Okay, so now you might think so what if I have some custom DTO,

00:07:48.410 --> 00:07:52.430
for example, a student or something like that, what will happen?

00:07:52.430 --> 00:07:53.720
You can try that, right?

00:07:53.720 --> 00:07:55.955
So what I'm trying to do here,

00:07:55.955 --> 00:07:58.985
I'm just creating one more video here.

00:07:58.985 --> 00:08:03.785
Simply do or so class student.

00:08:03.785 --> 00:08:06.200
And there's nothing inside the student,

00:08:06.200 --> 00:08:08.210
I'm just creating that.

00:08:08.210 --> 00:08:10.700
So n here.

00:08:10.700 --> 00:08:18.410
Let's call the same month or so generic method.

00:08:18.410 --> 00:08:26.375
The first input is going to be New Student,

00:08:26.375 --> 00:08:32.490
and the second one again is going to be another new student.

00:08:32.890 --> 00:08:35.855
So basically what I'm trying to do here,

00:08:35.855 --> 00:08:38.269
I'm trying to pass it to store that information,

00:08:38.269 --> 00:08:43.190
but still the method accepts the inputs because it's just another type of a data.

00:08:43.190 --> 00:08:47.270
It's not only for the rapid IPE day datas because we have a

00:08:47.270 --> 00:08:51.710
primitive for the primitive way has a rapper also write for the collections.

00:08:51.710 --> 00:08:54.530
So similarly, we not only the wrapper collections,

00:08:54.530 --> 00:08:58.085
we can use the customized did you asked well,

00:08:58.085 --> 00:09:00.620
it will still accept the method.

00:09:00.620 --> 00:09:03.320
So this is the importance of a generic.

00:09:03.320 --> 00:09:05.780
Okay, so now we have seen

00:09:05.780 --> 00:09:11.855
a simple implementation of a generic method and what is the advantage of using it?

00:09:11.855 --> 00:09:16.355
And this is a time now we're actually jumping into learn everything step-by-step.

00:09:16.355 --> 00:09:19.850
We're going to learn what is a generic method and how to create them,

00:09:19.850 --> 00:09:21.275
and what is the syntax for that?

00:09:21.275 --> 00:09:24.500
And what is a January class and how to create demand?

00:09:24.500 --> 00:09:28.100
What is the purpose of it? Let's learn h and everything's team-based do.

00:09:28.100 --> 00:09:29.970
Let's jump in.
