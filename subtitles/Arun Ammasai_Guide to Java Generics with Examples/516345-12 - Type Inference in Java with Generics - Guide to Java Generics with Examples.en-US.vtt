WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.265
Hello everyone, Welcome back.

00:00:02.265 --> 00:00:05.790
Before we are moving into a generic method and how we can create

00:00:05.790 --> 00:00:09.300
a generic matter and all the one thing which we need to know,

00:00:09.300 --> 00:00:11.400
which is nothing but a type inference.

00:00:11.400 --> 00:00:13.290
So what is the type inference?

00:00:13.290 --> 00:00:17.220
First of all, the type inference came into the picture in Java 7 version.

00:00:17.220 --> 00:00:19.380
Okay, So what do you mean by type inference?

00:00:19.380 --> 00:00:24.105
Basically, compiler will determine the type of parameter using the lamb,

00:00:24.105 --> 00:00:26.040
I mean the diamond operator.

00:00:26.040 --> 00:00:27.870
Okay, So how is it possible?

00:00:27.870 --> 00:00:29.190
What does it exactly mean?

00:00:29.190 --> 00:00:31.275
Take a look at the line number 3 before Java 7.

00:00:31.275 --> 00:00:33.915
Normally how we use to create a list.

00:00:33.915 --> 00:00:36.150
For example, it is going to be a list of strings.

00:00:36.150 --> 00:00:40.020
So let stuff string is equal to airline is equal to new ArrayList of an a.

00:00:40.020 --> 00:00:43.940
Again, I have to provide the diamond operator and I

00:00:43.940 --> 00:00:48.425
need to mention what kind of a type I want to pass it here, which means it's a string.

00:00:48.425 --> 00:00:52.130
And after Java it has been changed.

00:00:52.130 --> 00:00:56.030
The list of string LI is equal to new ArrayList

00:00:56.030 --> 00:01:00.095
and I'm going to just only provide the diamond operator.

00:01:00.095 --> 00:01:03.200
I'm not providing what is the exact type in and because

00:01:03.200 --> 00:01:07.340
compiler itself identify what is the type is going to be based on.

00:01:07.340 --> 00:01:10.880
The declaration is just nothing but a list of string.

00:01:10.880 --> 00:01:16.310
And then the same rule is applicable for generics as well.

00:01:16.310 --> 00:01:17.840
So let's not talk about gender is here.

00:01:17.840 --> 00:01:22.370
Let me go back to the intelligent ID and I'll show you a small example and then

00:01:22.370 --> 00:01:29.030
we'll move on to how it can be done for genetics as well.

00:01:29.790 --> 00:01:33.895
Let me tell you how it can be done before Java 7.

00:01:33.895 --> 00:01:38.380
So for now, so it's going to read before Java 7.

00:01:38.380 --> 00:01:41.810
So normally the way how we create a list,

00:01:42.060 --> 00:01:46.045
willing to provide list of string, again, probably anything.

00:01:46.045 --> 00:01:51.220
So I line is equal to new ArrayList.

00:01:51.220 --> 00:01:54.680
And here I have to provide the type.

00:01:54.720 --> 00:02:01.150
This is how we use to create your list of a string, right?

00:02:01.150 --> 00:02:05.480
But how it changed in Java 7,

00:02:09.160 --> 00:02:13.340
I'm going to provide, try the same thing pretty much.

00:02:13.340 --> 00:02:16.655
So I'm going to create a list of string here.

00:02:16.655 --> 00:02:27.050
And one list here is a difference.

00:02:27.050 --> 00:02:31.415
So here, this is a declaration part and this is the implementation part.

00:02:31.415 --> 00:02:34.895
Normally we used to say interface is a good implementation, correct?

00:02:34.895 --> 00:02:36.725
Or upset is about implementation, right?

00:02:36.725 --> 00:02:42.215
So here, list is an interface and analysis don't implements the list, correct.

00:02:42.215 --> 00:02:44.930
So here, if you blow wide list of string,

00:02:44.930 --> 00:02:49.670
obviously the implementation is going to be string only, correct.

00:02:49.670 --> 00:02:53.960
So that is the reason it was not mentioned in the Java side.

00:02:53.960 --> 00:02:55.460
I mean, after Java 7.

00:02:55.460 --> 00:03:00.170
Before Java 7, if I wanted to create a list of string when declaration itself,

00:03:00.170 --> 00:03:01.355
I had to probably start string.

00:03:01.355 --> 00:03:04.880
And at the same time in the implementation also I have to provide it is

00:03:04.880 --> 00:03:09.170
going to be ArrayList implementation for string type.

00:03:09.170 --> 00:03:11.795
And in the Amazon that is not required.

00:03:11.795 --> 00:03:14.615
For example, just take this example.

00:03:14.615 --> 00:03:16.295
Int x is equal to 10.

00:03:16.295 --> 00:03:18.860
So the moment you declared int,

00:03:18.860 --> 00:03:21.185
which means after the equal,

00:03:21.185 --> 00:03:23.060
it, sure it is going to be India.

00:03:23.060 --> 00:03:25.415
You don't have to again, saying something like,

00:03:25.415 --> 00:03:27.455
Oh, this is going to be a integer.

00:03:27.455 --> 00:03:29.060
This is not required.

00:03:29.060 --> 00:03:31.460
So that is the same thing is applied here.

00:03:31.460 --> 00:03:33.875
So the declaration part,

00:03:33.875 --> 00:03:35.435
it takes a list of string.

00:03:35.435 --> 00:03:40.040
So obviously the implementation part is going to take the same type of the data.

00:03:40.040 --> 00:03:41.945
Got it, Okay?

00:03:41.945 --> 00:03:45.335
So how it is applicable for generics.

00:03:45.335 --> 00:03:51.350
So let me create a simple generic C and for example, class shape.

00:03:51.350 --> 00:03:56.390
And this is not a generic class because if it is a generic,

00:03:56.390 --> 00:04:00.750
I had to provide the diamond operator with some type.

00:04:01.030 --> 00:04:03.350
So since I don't know the type,

00:04:03.350 --> 00:04:05.675
I'm just simply plug in t, which means type.

00:04:05.675 --> 00:04:12.305
And here I'm going to procreate private dainty.

00:04:12.305 --> 00:04:18.860
And let's simply grade some getters and setters, right?

00:04:18.860 --> 00:04:27.545
So okay, so now I have a class shape.

00:04:27.545 --> 00:04:31.745
So what do you mean by how it is going to work for type inference?

00:04:31.745 --> 00:04:34.700
So here, let me give you some explanation.

00:04:34.700 --> 00:04:38.270
So the shape, so what is the shape of sorry.

00:04:38.270 --> 00:04:40.025
So what is a shape here?

00:04:40.025 --> 00:04:42.870
Shape is, is a generic class.

00:04:43.300 --> 00:04:50.795
And, and this is the diamond operator,

00:04:50.795 --> 00:04:58.355
which denotes the type inference.

00:04:58.355 --> 00:05:01.265
Okay, So how it can be done, let's see here.

00:05:01.265 --> 00:05:08.795
So shape, I'm going to create objects for ship. Shape.

00:05:08.795 --> 00:05:12.935
Shape is equal to new shape.

00:05:12.935 --> 00:05:16.175
Okay. And this is not a generic, correct?

00:05:16.175 --> 00:05:17.570
Because it's generic.

00:05:17.570 --> 00:05:19.880
I had to provide some type after the class name.

00:05:19.880 --> 00:05:23.220
So the type is going to be a string here.

00:05:25.180 --> 00:05:28.160
So the moment it's a string here,

00:05:28.160 --> 00:05:30.140
here, you don't have to grow.

00:05:30.140 --> 00:05:34.325
I did is going to be a string. Correct?

00:05:34.325 --> 00:05:40.145
Maybe this is more than enough because this diamond operator

00:05:40.145 --> 00:05:46.190
will understand what is that type is going to come here based on the declaration part.

00:05:46.190 --> 00:05:52.175
And this is the degradation part and this is the implementation fat in Technically. Okay.

00:05:52.175 --> 00:06:00.570
So for example, it may add are some matter here, like public void.

00:06:03.250 --> 00:06:12.150
So normally this dot is equal to three, right?

00:06:14.800 --> 00:06:17.705
So here I shape offspring shape,

00:06:17.705 --> 00:06:20.795
and this diamond eval takes a string and if you want,

00:06:20.795 --> 00:06:22.070
you can pass some data here.

00:06:22.070 --> 00:06:29.135
And for example, yellow edge will not work here.

00:06:29.135 --> 00:06:35.000
Because why? We have to create a constructor in the shape.

00:06:35.000 --> 00:06:38.070
Okay, so let me try that as well.

00:06:43.840 --> 00:06:45.770
See, that's all.

00:06:45.770 --> 00:06:49.220
So here, shape ofstream and I'm creating ohms it here.

00:06:49.220 --> 00:06:51.485
New shape of what is the type is going to be.

00:06:51.485 --> 00:06:55.730
You don't have to mention anything here because it is taking from here.

00:06:55.730 --> 00:07:00.080
So for example, passes I'm integer also you can do the same thing.

00:07:00.080 --> 00:07:03.440
Okay, so here is a list of string and urine how to proceed?

00:07:03.440 --> 00:07:05.150
What is the ArrayList implementation again,

00:07:05.150 --> 00:07:07.160
because the declaration is a string,

00:07:07.160 --> 00:07:10.850
so obviously the implementation is going to be the string. Okay?

00:07:10.850 --> 00:07:12.290
This is a simple concept.

00:07:12.290 --> 00:07:14.180
Basically, if you want to,

00:07:14.180 --> 00:07:16.145
if you want me to live in a nice straight away.

00:07:16.145 --> 00:07:18.560
So whatever you declared the right-hand side,

00:07:18.560 --> 00:07:20.060
it would be applicable in the left-hand side.

00:07:20.060 --> 00:07:22.295
That's all. If you want to give it in a simple way.

00:07:22.295 --> 00:07:26.520
Okay, so let's talk about the generic method in the next example.
