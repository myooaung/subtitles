WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.755
Hello everyone, Welcome back.

00:00:01.755 --> 00:00:08.310
So we discussed about how the eraser works for a normal generic class.

00:00:08.310 --> 00:00:11.294
So because the previous example,

00:00:11.294 --> 00:00:15.135
it's a generic class which has only the diamond operator asset type.

00:00:15.135 --> 00:00:17.355
It does not have any bounds.

00:00:17.355 --> 00:00:20.730
Okay, so now let's create another example to create

00:00:20.730 --> 00:00:24.705
a generic class with some bounds. We'll see what happening.

00:00:24.705 --> 00:00:26.715
I guess so first thing first,

00:00:26.715 --> 00:00:28.860
I'm going to create a main method here.

00:00:28.860 --> 00:00:30.900
And then I need to create a one more class.

00:00:30.900 --> 00:00:34.029
So let me create a class cal, calculate,

00:00:35.080 --> 00:00:38.600
Calculate, and I'm sure it is not

00:00:38.600 --> 00:00:41.480
a generic class until unless I place a diamond operator.

00:00:41.480 --> 00:00:43.910
And here the CI,

00:00:43.910 --> 00:00:47.735
and it is going to be bounded with some class.

00:00:47.735 --> 00:00:51.770
So the type, whatever is passing to this calculate a class,

00:00:51.770 --> 00:00:54.815
it is going to be a part of a number.

00:00:54.815 --> 00:00:56.045
Right?

00:00:56.045 --> 00:00:58.580
And then let's do the same thing,

00:00:58.580 --> 00:01:00.860
whatever we tried that before.

00:01:00.860 --> 00:01:03.875
Example, I'm going to do the same thing here.

00:01:03.875 --> 00:01:10.220
And let's do we need to have so we don't need getters and setters.

00:01:10.220 --> 00:01:11.990
So I'm going to override

00:01:11.990 --> 00:01:15.980
the toString method so I can print the data and see what is the data in it.

00:01:15.980 --> 00:01:18.635
Okay, so let me run it in a normal way.

00:01:18.635 --> 00:01:21.360
So let's create a object.

00:01:22.330 --> 00:01:25.280
Calculate. Since m is a generic class,

00:01:25.280 --> 00:01:28.685
I need to provide at type,

00:01:28.685 --> 00:01:32.015
any type of information which comes under a number,

00:01:32.015 --> 00:01:33.560
which means I can use integer,

00:01:33.560 --> 00:01:38.360
I can use double. Right? End.

00:01:38.360 --> 00:01:42.065
Galaxy is a new

00:01:42.065 --> 00:01:47.510
calculate my dad here and here you need to provide the data, for example, 100.

00:01:47.510 --> 00:01:50.885
Since it's a double, I'm going to use it towards 0 here.

00:01:50.885 --> 00:01:53.045
C, which is straightforward, right?

00:01:53.045 --> 00:01:55.980
So I'm going to print the data as well.

00:01:56.380 --> 00:02:02.330
Okay, let me run it and then we'll talk about how the ratio will apply here.

00:02:02.330 --> 00:02:04.760
So now I can see the data.

00:02:04.760 --> 00:02:06.875
Okay, let's go back.

00:02:06.875 --> 00:02:09.454
So at the time of compilation,

00:02:09.454 --> 00:02:14.479
how this particular class has been modified by the compiler.

00:02:14.479 --> 00:02:16.835
Okay, So since there is no bounds,

00:02:16.835 --> 00:02:19.580
we are using an object in the previous example,

00:02:19.580 --> 00:02:21.650
but here we have a bound.

00:02:21.650 --> 00:02:26.810
So which means that type will be replaced by the monad type.

00:02:26.810 --> 00:02:29.375
So let me, let me try to modify here.

00:02:29.375 --> 00:02:31.235
So wherever you can see the boundary type,

00:02:31.235 --> 00:02:34.115
I'm going to modify the bond.

00:02:34.115 --> 00:02:36.125
So what is the bone here? It's a number.

00:02:36.125 --> 00:02:39.140
Just copy that and place it here.

00:02:39.140 --> 00:02:41.480
And wherever you can see T, you can trend it.

00:02:41.480 --> 00:02:43.355
Say there is no error,

00:02:43.355 --> 00:02:45.695
it is still works, right?

00:02:45.695 --> 00:02:48.720
And let's demo this

00:02:50.080 --> 00:03:00.380
and see the same method will work.

00:03:00.380 --> 00:03:02.825
So let me run it now.

00:03:02.825 --> 00:03:07.320
I can still see the same outcome here.

00:03:07.420 --> 00:03:10.310
Right? So let me pass something else,

00:03:10.310 --> 00:03:14.705
like just an integer, right?

00:03:14.705 --> 00:03:16.280
So for Darrieus, I tried double-dot.

00:03:16.280 --> 00:03:17.915
Let's try some integer here.

00:03:17.915 --> 00:03:23.920
Still it will work. See the data is 15 here.

00:03:23.920 --> 00:03:26.320
Okay, just keep one thing in your mind.

00:03:26.320 --> 00:03:32.440
So the type erasure will convert your class into a normal class based on the type.

00:03:32.440 --> 00:03:36.715
So if you were January class has a normal type without a bound,

00:03:36.715 --> 00:03:39.370
it will be override it with an object.

00:03:39.370 --> 00:03:41.440
But if you have some bound,

00:03:41.440 --> 00:03:43.795
it will override with a bounded class.

00:03:43.795 --> 00:03:46.570
So since we have a bounded type as a number here,

00:03:46.570 --> 00:03:48.535
so the comparable be replaced.

00:03:48.535 --> 00:03:54.400
So this is how our class looks like after the Tiber ratio applied by the compiler.

00:03:54.400 --> 00:03:58.010
So let me put back to the old way.

00:04:04.650 --> 00:04:09.920
Okay, So modal, I'm going to fill private string here.

00:04:16.500 --> 00:04:19.090
If we have a proper understanding,

00:04:19.090 --> 00:04:21.790
we know y is the error here. Just take a pass on.

00:04:21.790 --> 00:04:26.740
Tell Me Why is that? Because the caliphate is a generic class.

00:04:26.740 --> 00:04:28.570
Yes, it is accepting a type,

00:04:28.570 --> 00:04:30.490
but there is a restriction over there.

00:04:30.490 --> 00:04:32.215
It extends a number.

00:04:32.215 --> 00:04:38.785
So whatever type you are passing that must be a subclass of a number.

00:04:38.785 --> 00:04:42.670
So it can accept integer shot and double long as well,

00:04:42.670 --> 00:04:46.770
but it will not accept either datas like a string or normal detours.

00:04:46.770 --> 00:04:49.860
So let me try something like this long.

00:04:50.350 --> 00:04:55.830
And I'm going to prove or something like that before.

00:04:57.280 --> 00:05:02.420
So, okay, so ways that our L here,

00:05:02.420 --> 00:05:07.535
so to indicate it's a long data so I can run it now.

00:05:07.535 --> 00:05:11.225
It work as a charm, right?

00:05:11.225 --> 00:05:17.855
So we know about how the typefaces work for the normal generic class,

00:05:17.855 --> 00:05:22.040
and we know how it will work for the January class with bounded type.

00:05:22.040 --> 00:05:28.530
Let's see in the next example with some different way of type erasure.
