WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.050
Hello everyone, Welcome back.

00:00:02.050 --> 00:00:06.040
So before we are moving onto generics and how to create them,

00:00:06.040 --> 00:00:10.780
we need to understand what is raised and what is collection and why we moved

00:00:10.780 --> 00:00:16.450
from arrays to collection and then why we moved to January.

00:00:16.450 --> 00:00:18.595
So now to understand that,

00:00:18.595 --> 00:00:23.185
we just need to find out what is there in arrays and what is not there and collection,

00:00:23.185 --> 00:00:26.680
and what is the difference between arrays and collection V to the difference.

00:00:26.680 --> 00:00:31.240
And I can show you the difference with a real-time example or a simple example.

00:00:31.240 --> 00:00:35.020
So you can easily understand why we moved to a race from collection and what is

00:00:35.020 --> 00:00:40.120
the advantage of having a race and what are the disadvantage of having a collection?

00:00:40.120 --> 00:00:41.455
Right?

00:00:41.455 --> 00:00:42.790
So let's move on.

00:00:42.790 --> 00:00:45.040
Let's try to understand.

00:00:45.040 --> 00:00:49.390
Okay, so first it everything starts with an array.

00:00:49.390 --> 00:00:51.954
And then we move into collections.

00:00:51.954 --> 00:00:55.420
Because when Java was introduced that we have only arrays.

00:00:55.420 --> 00:00:58.374
And after later point we moved to collections.

00:00:58.374 --> 00:01:01.585
And after collection, the generics came into picture,

00:01:01.585 --> 00:01:03.445
which means after Java 5,

00:01:03.445 --> 00:01:06.895
in Java 5 or LA, we got generics.

00:01:06.895 --> 00:01:09.460
Let's now talk about genetics here.

00:01:09.460 --> 00:01:13.180
Let's talk about the difference between the arrays and the collection.

00:01:13.180 --> 00:01:16.285
Okay, So when it comes to an array,

00:01:16.285 --> 00:01:18.145
array is a fixed size.

00:01:18.145 --> 00:01:19.720
So once it is created,

00:01:19.720 --> 00:01:21.205
you cannot modify the size.

00:01:21.205 --> 00:01:23.980
We all know how to create a syntax,

00:01:23.980 --> 00:01:25.290
how to create an array.

00:01:25.290 --> 00:01:26.870
We know, we know that some texts, right?

00:01:26.870 --> 00:01:32.645
So int array and is equal to new int array and you do provide the size of it.

00:01:32.645 --> 00:01:36.845
So once we provided the size of the array cannot be extranet more than that.

00:01:36.845 --> 00:01:39.470
But the other way around collections,

00:01:39.470 --> 00:01:43.820
it will give us the freedom to increase

00:01:43.820 --> 00:01:45.410
the collection size based on

00:01:45.410 --> 00:01:49.145
the data which is required and based on the data we are processing.

00:01:49.145 --> 00:01:53.270
So when it comes to a size RAA strategy,

00:01:53.270 --> 00:01:55.100
and collection is a dynamic.

00:01:55.100 --> 00:01:56.690
You don't have to specifically mentioned

00:01:56.690 --> 00:01:59.000
how much data I'm gonna process in this particular collection.

00:01:59.000 --> 00:02:01.430
And the next point when it comes to memory,

00:02:01.430 --> 00:02:02.825
array is not recommended.

00:02:02.825 --> 00:02:05.435
The recommended one is collection.

00:02:05.435 --> 00:02:08.015
And then arrays much faster.

00:02:08.015 --> 00:02:11.885
So when our a is much faster than white of indigo for collection.

00:02:11.885 --> 00:02:14.330
So which means there is something is

00:02:14.330 --> 00:02:17.600
not there and arrays and some things available in collection.

00:02:17.600 --> 00:02:20.660
And I'll tell you the reason why our S is much faster.

00:02:20.660 --> 00:02:22.940
I'm not going to tell right now because I'm going to create

00:02:22.940 --> 00:02:26.360
an example and I'll tell you why it is much faster.

00:02:26.360 --> 00:02:28.835
And the, another important thing,

00:02:28.835 --> 00:02:33.170
I raise ten hold both objects and primitive.

00:02:33.170 --> 00:02:34.790
But when it comes to collection,

00:02:34.790 --> 00:02:38.105
it can only hold the object types.

00:02:38.105 --> 00:02:41.300
It will not handle the primitives Because when

00:02:41.300 --> 00:02:44.134
you create a collection it has to be the wrapper class objects.

00:02:44.134 --> 00:02:47.780
It will not takes int Turnbull or something like that.

00:02:47.780 --> 00:02:52.670
All right, so enough is enough.

00:02:52.670 --> 00:02:56.330
Let's create a simple example and I'm going to show you what is

00:02:56.330 --> 00:02:57.560
that an array's and what is

00:02:57.560 --> 00:03:00.545
their collection and what is the difference between these two?

00:03:00.545 --> 00:03:05.460
We're going to see in a real then an example. Let's jump into it.
