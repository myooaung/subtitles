WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] We learned about the basics concepts

2
00:00:02.000 --> 00:00:04.050
of Docker Image, how an image can be built,

3
00:00:04.050 --> 00:00:06.000
what is a build context.

4
00:00:06.000 --> 00:00:08.020
Now, let's apply those concepts

5
00:00:08.020 --> 00:00:12.020
and actually build a Docker image for our Java application.

6
00:00:12.020 --> 00:00:14.000
As explained earlier, we're going to use

7
00:00:14.000 --> 00:00:17.060
Dockerfile to build our application.

8
00:00:17.060 --> 00:00:21.090
Here, this is a Dockerfile, part of our maven repo.

9
00:00:21.090 --> 00:00:24.070
This is the second file that we are explaining here now.

10
00:00:24.070 --> 00:00:28.050
As you can see, this is a multi stage Dockerfile.

11
00:00:28.050 --> 00:00:30.030
Here is my first from statement,

12
00:00:30.030 --> 00:00:33.000
and here is my second from statement.

13
00:00:33.000 --> 00:00:37.070
The first from statement is using maven as a base image.

14
00:00:37.070 --> 00:00:39.090
And I'm specifying a tag that means

15
00:00:39.090 --> 00:00:44.020
I want maven version three point five and jdk eight.

16
00:00:44.020 --> 00:00:47.000
You can look at Docker Hub and see where these images

17
00:00:47.000 --> 00:00:49.060
are available and what other tags are available

18
00:00:49.060 --> 00:00:52.060
if you need a different version of maven.

19
00:00:52.060 --> 00:00:56.010
I'm giving this stage a name, call it Build.

20
00:00:56.010 --> 00:01:00.010
The first step here is taking a repository.tar.gz

21
00:01:00.010 --> 00:01:02.080
which will generate in a second and copying it

22
00:01:02.080 --> 00:01:06.010
to a specific directory in the maven image itself.

23
00:01:06.010 --> 00:01:09.090
This directory is existing in the maven base image.

24
00:01:09.090 --> 00:01:12.010
Then we take our application code and copy it

25
00:01:12.010 --> 00:01:15.090
to the base image as well in the user source app directory.

26
00:01:15.090 --> 00:01:18.060
We set that as a work directory and then give

27
00:01:18.060 --> 00:01:21.020
the command call as maven, where we are referring

28
00:01:21.020 --> 00:01:26.010
to the settings for maven and package the application.

29
00:01:26.010 --> 00:01:29.010
Now this really leverages the maven repository

30
00:01:29.010 --> 00:01:31.090
that we will generate locally and repurpose

31
00:01:31.090 --> 00:01:34.080
that for creating your application package.

32
00:01:34.080 --> 00:01:37.070
At this point, yes, we are using Dockerfile,

33
00:01:37.070 --> 00:01:39.080
but it's using basic maven commands

34
00:01:39.080 --> 00:01:41.090
to package your Java application.

35
00:01:41.090 --> 00:01:46.020
Now comes stage two, because of the second from statement.

36
00:01:46.020 --> 00:01:49.050
In this case, we are using openjdk as the base image

37
00:01:49.050 --> 00:01:51.080
and we're using 8-jre as the tag.

38
00:01:51.080 --> 00:01:55.020
We don't need the entire JDK or maven or class files,

39
00:01:55.020 --> 00:01:57.090
none of that for our production image.

40
00:01:57.090 --> 00:02:01.020
So we take open openjdk-8-jre as a base image,

41
00:02:01.020 --> 00:02:03.050
we expose a port from the application.

42
00:02:03.050 --> 00:02:05.090
8080 is where our application is running.

43
00:02:05.090 --> 00:02:07.090
5005 is our debug port.

44
00:02:07.090 --> 00:02:10.010
And we'll look at that a little bit later.

45
00:02:10.010 --> 00:02:13.040
Then the first command is, from the build stage,

46
00:02:13.040 --> 00:02:15.040
I'm just copying the cargo directory

47
00:02:15.040 --> 00:02:18.090
into a specific directory here, and that OPT target

48
00:02:18.090 --> 00:02:21.050
directory is now set up as a work directory.

49
00:02:21.050 --> 00:02:23.040
Now remember everything that is generated

50
00:02:23.040 --> 00:02:27.020
in my first stage is left behind and only the relevant

51
00:02:27.020 --> 00:02:29.040
artifacts are copied from first stage,

52
00:02:29.040 --> 00:02:32.050
my development stage, to my production stage.

53
00:02:32.050 --> 00:02:35.010
I set up certain Java options here, this will be used

54
00:02:35.010 --> 00:02:37.040
when we are debugging our application later.

55
00:02:37.040 --> 00:02:42.010
And finally I fire up my application using Java -jar

56
00:02:42.010 --> 00:02:45.050
and greeting.war because this greeting.war exists

57
00:02:45.050 --> 00:02:48.000
in OPT target directory.

58
00:02:48.000 --> 00:02:51.080
Now let's go to our terminal and create our local repo

59
00:02:51.080 --> 00:02:55.090
and run the Dockerfile to build the image.

60
00:02:55.090 --> 00:02:59.010
First of all, we'll go to our Get Hub repo

61
00:02:59.010 --> 00:03:01.010
and copy the command that we need to run

62
00:03:01.010 --> 00:03:04.030
to generate a local version of the repo.

63
00:03:04.030 --> 00:03:07.040
So I'm going to copy this command here.

64
00:03:07.040 --> 00:03:11.030
And go to my terminal, and paste this command.

65
00:03:11.030 --> 00:03:13.040
This command is going to download

66
00:03:13.040 --> 00:03:16.000
the maven repository, all the dependencies,

67
00:03:16.000 --> 00:03:19.000
and package them locally into one file.

68
00:03:19.000 --> 00:03:20.060
Depending upon the speed of your connection,

69
00:03:20.060 --> 00:03:24.070
this could take a while, so we're going to speed that up.

70
00:03:24.070 --> 00:03:29.040
So now in my app directory, I have a repository folder.

71
00:03:29.040 --> 00:03:32.000
This is my entire maven repository that needs

72
00:03:32.000 --> 00:03:35.060
to be packaged into the base image itself.

73
00:03:35.060 --> 00:03:38.090
Let's go back to our browser and copy another command.

74
00:03:38.090 --> 00:03:43.010
I'm going to tar this repository so that it can

75
00:03:43.010 --> 00:03:47.000
be easily copied into my maven base image.

76
00:03:47.000 --> 00:03:49.090
So let's give this command, and that's going

77
00:03:49.090 --> 00:03:53.070
to create a repository.tar.gz for me.

78
00:03:53.070 --> 00:03:56.040
If you recall from the Dockerfile, this is the file

79
00:03:56.040 --> 00:03:59.070
that is actually being copied into my maven base image.

80
00:03:59.070 --> 00:04:02.050
The next thing is to really run the Dockerfile

81
00:04:02.050 --> 00:04:04.050
and create my Docker image now.

82
00:04:04.050 --> 00:04:12.000
So let's go back to our browser and copy the command again.

83
00:04:12.000 --> 00:04:14.060
The command here is Docker image build,

84
00:04:14.060 --> 00:04:17.030
I'm building the Docker image, using -t,

85
00:04:17.030 --> 00:04:19.010
I'm giving it a specific tag,

86
00:04:19.010 --> 00:04:23.020
and .t being my app directory is my build context.

87
00:04:23.020 --> 00:04:26.040
So let's give this command.

88
00:04:26.040 --> 00:04:30.000
Now because the maven repository is already packaged

89
00:04:30.000 --> 00:04:34.060
into your Dockerfile, it'll take a lot less time to build

90
00:04:34.060 --> 00:04:38.030
the image, but it still needs to download all the base

91
00:04:38.030 --> 00:04:42.040
images, such as maven, openjdk, and so on and so forth.

92
00:04:42.040 --> 00:04:44.070
And this could again take a while based upon

93
00:04:44.070 --> 00:04:49.000
your internet connectivity, so we'll just speed it up.

94
00:04:49.000 --> 00:04:51.000
And our image has been generated now.

95
00:04:51.000 --> 00:04:53.010
Let's take a look at the list of Docker images

96
00:04:53.010 --> 00:04:58.010
that exist on our local machine now.

97
00:04:58.010 --> 00:05:00.070
Of course, we have arungupta/greeting,

98
00:05:00.070 --> 00:05:02.090
which was generated about 10 seconds ago.

99
00:05:02.090 --> 00:05:05.040
In addition, we also have openjdk and maven

100
00:05:05.040 --> 00:05:07.090
as the base images that were downloaded,

101
00:05:07.090 --> 00:05:10.050
and that is a non-image, essentially,

102
00:05:10.050 --> 00:05:11.060
that is an intermittent image

103
00:05:11.060 --> 00:05:13.090
that was created by Docker itself.

104
00:05:13.090 --> 00:05:17.060
But the key part is we generated our arungupta/greeting

105
00:05:17.060 --> 00:05:20.040
image, ten seconds ago, the total size

106
00:05:20.040 --> 00:05:22.020
is about 500 megabytes.

107
00:05:22.020 --> 00:05:25.070
But all the build and the production images are done

108
00:05:25.070 --> 00:05:29.070
using a single Dockerfile, using a multi stage Dockerfile,

109
00:05:29.070 --> 00:05:30.080
so you don't have to download

110
00:05:30.080 --> 00:05:33.000
any additional tools on your local machine.

