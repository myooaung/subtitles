WEBVTT
1
00:00:00.050 --> 00:00:02.070
- Creating a Docker image and running a container

2
00:00:02.070 --> 00:00:05.020
is an important part of the Kubernetes Workflow

3
00:00:05.020 --> 00:00:06.080
for Java Developers.

4
00:00:06.080 --> 00:00:09.060
In this section, we'll learn how a Java application

5
00:00:09.060 --> 00:00:13.030
can be packaged as a Docker image and run as a container.

6
00:00:13.030 --> 00:00:15.010
Let's start with learning how the basic

7
00:00:15.010 --> 00:00:17.090
Docker Workflow works.

8
00:00:17.090 --> 00:00:20.080
There are three components in wall in the Docker Workflow.

9
00:00:20.080 --> 00:00:24.090
A client host, a server host, and a registry.

10
00:00:24.090 --> 00:00:26.060
Let's start with registry.

11
00:00:26.060 --> 00:00:28.080
Registry is a stateless highly scalable

12
00:00:28.080 --> 00:00:31.000
server side application that stores

13
00:00:31.000 --> 00:00:33.040
and lets you distribute Docker images.

14
00:00:33.040 --> 00:00:35.030
This is typically hosted on the internet,

15
00:00:35.030 --> 00:00:39.000
such as Docker Hub or Amazon Elastic Container Registry.

16
00:00:39.000 --> 00:00:41.080
It could be hosted inside the firewall as well.

17
00:00:41.080 --> 00:00:45.060
Such as using JFrog's Artifactory or other similar products.

18
00:00:45.060 --> 00:00:47.060
This is where all your Docker images,

19
00:00:47.060 --> 00:00:51.000
including application images are published.

20
00:00:51.000 --> 00:00:54.010
Docker client host is from where the commands to download

21
00:00:54.010 --> 00:00:56.050
an image or run a container are issued.

22
00:00:56.050 --> 00:00:59.000
This could be your Dell machine during development

23
00:00:59.000 --> 00:01:01.070
or CI/CD pipeline that is giving the commands

24
00:01:01.070 --> 00:01:03.040
to run the containers.

25
00:01:03.040 --> 00:01:06.040
The command is typically issued using Docker CLI

26
00:01:06.040 --> 00:01:09.050
which is also installed on the client host.

27
00:01:09.050 --> 00:01:11.090
Finally, there is server host where the images

28
00:01:11.090 --> 00:01:15.010
are downloaded for your use and containers are run.

29
00:01:15.010 --> 00:01:16.050
There are multiple server hosts

30
00:01:16.050 --> 00:01:19.000
to make the application highly available.

31
00:01:19.000 --> 00:01:21.060
Each server host has Docker Engine installed

32
00:01:21.060 --> 00:01:23.060
that is listening for commands.

33
00:01:23.060 --> 00:01:26.060
Let's look at how the flow looks like.

34
00:01:26.060 --> 00:01:29.000
App Developer creates a Docker image

35
00:01:29.000 --> 00:01:33.060
and publishes it on the registry, my app in our case.

36
00:01:33.060 --> 00:01:36.010
The developers gives the command from the client host

37
00:01:36.010 --> 00:01:40.050
like, Docker container run, using Docker CLI.

38
00:01:40.050 --> 00:01:43.040
CLI than translates this command to arrest request

39
00:01:43.040 --> 00:01:47.030
and sends it to the Docker Engine on the server host.

40
00:01:47.030 --> 00:01:49.040
Docker Engine checks if the image

41
00:01:49.040 --> 00:01:52.050
is already available on the server host.

42
00:01:52.050 --> 00:01:54.030
If the image already exists,

43
00:01:54.030 --> 00:01:56.080
then it runs the container.

44
00:01:56.080 --> 00:01:58.090
If the image does not exist,

45
00:01:58.090 --> 00:02:01.020
then it downloads the image from the pre-configured

46
00:02:01.020 --> 00:02:03.070
registry and runs the container.

47
00:02:03.070 --> 00:02:07.070
The image is stored on the server for later reuse.

48
00:02:07.070 --> 00:02:10.050
If multiple instances of the container for the same image

49
00:02:10.050 --> 00:02:14.000
needs to run, then the image is only downloaded once,

50
00:02:14.000 --> 00:02:17.080
unless a newer version is specified.

51
00:02:17.080 --> 00:02:20.080
I also have a course on Docker for Java Developers

52
00:02:20.080 --> 00:02:22.050
that provides much more details

53
00:02:22.050 --> 00:02:25.000
about how you can get started with Docker.

54
00:02:25.000 --> 00:02:26.070
But the knowledge provided in this course

55
00:02:26.070 --> 00:02:29.000
is enough for you to get going.

