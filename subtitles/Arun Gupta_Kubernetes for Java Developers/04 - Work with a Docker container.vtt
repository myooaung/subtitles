WEBVTT
1
00:00:00.000 --> 00:00:02.020
- [Instructor] Now that the image has been built,

2
00:00:02.020 --> 00:00:05.060
we're going to launch a container using that image.

3
00:00:05.060 --> 00:00:08.010
Let's copy the command here,

4
00:00:08.010 --> 00:00:10.000
and we'll go to our terminal, and

5
00:00:10.000 --> 00:00:12.000
paste this command over there.

6
00:00:12.000 --> 00:00:15.000
Docker container run is the command that

7
00:00:15.000 --> 00:00:17.080
tells Docker engine to run the container.

8
00:00:17.080 --> 00:00:22.040
Dash p is an option that maps a container port

9
00:00:22.040 --> 00:00:24.090
to a specific port on the host,

10
00:00:24.090 --> 00:00:28.050
and arungupta slash greeting is of course, our image name.

11
00:00:28.050 --> 00:00:31.040
So, lets run this command.

12
00:00:31.040 --> 00:00:34.060
And now, our Java application that we built earlier,

13
00:00:34.060 --> 00:00:38.050
that we ran earlier using Maven is showing a similar log,

14
00:00:38.050 --> 00:00:42.000
but run as a Docker image.

15
00:00:42.000 --> 00:00:45.020
I can go to my other terminal here,

16
00:00:45.020 --> 00:00:52.050
and I can give the command to access the application again,

17
00:00:52.050 --> 00:00:55.010
and I get the same response back.

18
00:00:55.010 --> 00:00:56.060
Now, the cool thing here is we're

19
00:00:56.060 --> 00:00:58.050
getting the exact same output,

20
00:00:58.050 --> 00:01:00.040
but this time from the Docker container,

21
00:01:00.040 --> 00:01:02.010
that we just launched, built out

22
00:01:02.010 --> 00:01:05.020
of the image from our Java application.

23
00:01:05.020 --> 00:01:07.080
Let's take a look at what containers

24
00:01:07.080 --> 00:01:10.000
are running on our machine.

25
00:01:10.000 --> 00:01:12.040
And I can make the window bigger here

26
00:01:12.040 --> 00:01:14.010
to give you a better output.

27
00:01:14.010 --> 00:01:15.060
So, now you can see there

28
00:01:15.060 --> 00:01:19.000
is arungupta slash greeting image is being used.

29
00:01:19.000 --> 00:01:20.070
Here's my container id.

30
00:01:20.070 --> 00:01:23.050
Here's the command that was used to run the container,

31
00:01:23.050 --> 00:01:26.000
and it was started about a minute ago.

32
00:01:26.000 --> 00:01:28.090
And then, you can also see in terms of the ports,

33
00:01:28.090 --> 00:01:31.040
I have port 5005, which is not being

34
00:01:31.040 --> 00:01:33.020
exposed at this point of time.

35
00:01:33.020 --> 00:01:36.060
I'm only exposing port 8080 on the container

36
00:01:36.060 --> 00:01:39.020
to 8080 on the host, and that's how we

37
00:01:39.020 --> 00:01:41.090
were able to access the application, okay.

38
00:01:41.090 --> 00:01:45.090
So, we're going to copy this container id,

39
00:01:45.090 --> 00:01:52.010
and we can stop the container using this id.

40
00:01:52.010 --> 00:01:53.080
And it can see the container has been

41
00:01:53.080 --> 00:01:56.020
stopped in my other window here.

42
00:01:56.020 --> 00:01:58.050
Now, if I take a look at the list of containers,

43
00:01:58.050 --> 00:02:00.060
the container is not running anymore.

44
00:02:00.060 --> 00:02:04.000
I can also say Docker container ls dash a.

45
00:02:04.000 --> 00:02:06.020
It says container is not running.

46
00:02:06.020 --> 00:02:09.030
It's a dead container, but we need to remove it.

47
00:02:09.030 --> 00:02:14.080
So, the next step is Docker container rm,

48
00:02:14.080 --> 00:02:18.030
same container id, and remove the container.

49
00:02:18.030 --> 00:02:21.060
And now, when I say Docker container ls all,

50
00:02:21.060 --> 00:02:24.050
the container no longer exists as well.

51
00:02:24.050 --> 00:02:26.060
Let's take a look at a different variation

52
00:02:26.060 --> 00:02:29.090
of this command now.

53
00:02:29.090 --> 00:02:31.090
We're going to use the exact same command,

54
00:02:31.090 --> 00:02:34.040
but this time, we're going to run the container

55
00:02:34.040 --> 00:02:37.080
in a detached mode using dash d switch

56
00:02:37.080 --> 00:02:41.000
or in the background mode.

57
00:02:41.000 --> 00:02:44.020
Now, we can see the console returned back to us

58
00:02:44.020 --> 00:02:46.080
and it gave us a long container id.

59
00:02:46.080 --> 00:02:50.010
We can copy this container id here,

60
00:02:50.010 --> 00:02:54.070
and we can say Docker container logs,

61
00:02:54.070 --> 00:02:58.060
and give the command here to see the exact same logs,

62
00:02:58.060 --> 00:03:02.020
which were displayed earlier to us in the console.

63
00:03:02.020 --> 00:03:06.000
Let's access our application again here.

64
00:03:06.000 --> 00:03:12.060
I'm going to copy this command that we used earlier.

65
00:03:12.060 --> 00:03:14.050
Access the application, and

66
00:03:14.050 --> 00:03:16.040
get the exact same response back.

67
00:03:16.040 --> 00:03:19.070
Once again, the container is running now in a detached mode,

68
00:03:19.070 --> 00:03:22.000
but we're getting the exact same response back

69
00:03:22.000 --> 00:03:26.010
from our Java application running as a container over there.

70
00:03:26.010 --> 00:03:30.050
Now, in this case, we can terminate the container.

71
00:03:30.050 --> 00:03:36.000
Let's take a look at our container listing again.

72
00:03:36.000 --> 00:03:37.050
That is my container id.

73
00:03:37.050 --> 00:03:40.000
The one that we used earlier was a longer container id.

74
00:03:40.000 --> 00:03:42.000
There's a shorter container id as well.

75
00:03:42.000 --> 00:03:44.040
Let's copy it, and now,

76
00:03:44.040 --> 00:03:47.030
I can easily terminate the container,

77
00:03:47.030 --> 00:03:50.020
and remove the container in one command.

78
00:03:50.020 --> 00:03:56.010
Docker container rm dash f, and give the container id.

79
00:03:56.010 --> 00:03:57.090
And in one command, I have stopped

80
00:03:57.090 --> 00:04:04.000
and removed the container.

