WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Now that our Kubernetes cluster

2
00:00:02.020 --> 00:00:04.000
is running in the AWS Cloud,

3
00:00:04.000 --> 00:00:06.030
we need to look at how can we migrate our application

4
00:00:06.030 --> 00:00:08.040
that was running in the Kubernetes cluster

5
00:00:08.040 --> 00:00:11.040
on this desktop to the Kubernetes cluster

6
00:00:11.040 --> 00:00:12.060
running in the Cloud?

7
00:00:12.060 --> 00:00:14.050
That's called migrating your application

8
00:00:14.050 --> 00:00:16.060
from one cluster to another cluster.

9
00:00:16.060 --> 00:00:18.050
That's a technical flow that you will go through,

10
00:00:18.050 --> 00:00:19.090
where you are building your application

11
00:00:19.090 --> 00:00:22.070
on your local desktop and when ready to go to production,

12
00:00:22.070 --> 00:00:24.080
then you may migrate to the Cloud.

13
00:00:24.080 --> 00:00:32.000
So, first of all, let's look at kubectl config get-contexts.

14
00:00:32.000 --> 00:00:34.070
The context is indeed set correctly

15
00:00:34.070 --> 00:00:37.000
to the cluster running in the Cloud.

16
00:00:37.000 --> 00:00:39.070
Now, we deploy that application as a Helm chart

17
00:00:39.070 --> 00:00:41.050
and so we need to deploy Helm

18
00:00:41.050 --> 00:00:43.050
in this particular cluster, as well.

19
00:00:43.050 --> 00:00:45.060
Now, Helm server-side component Tiller

20
00:00:45.060 --> 00:00:48.060
requires special permission on the Kubernetes cluster.

21
00:00:48.060 --> 00:00:50.070
We need to build a service account for Tiller

22
00:00:50.070 --> 00:00:53.020
to use and enable permissions for it

23
00:00:53.020 --> 00:00:55.080
and then we can install Helm in EKS.

24
00:00:55.080 --> 00:00:58.080
So let's look at the commands on how we can do that.

25
00:00:58.080 --> 00:01:03.010
Here are the commands by which we can install Helm in EKS.

26
00:01:03.010 --> 00:01:08.050
I'm going to copy this command and paste it in my terminal.

27
00:01:08.050 --> 00:01:11.040
First of all, it creates a service account.

28
00:01:11.040 --> 00:01:14.030
Then it gives the right rbac permissions

29
00:01:14.030 --> 00:01:16.030
and then it initializes Helm,

30
00:01:16.030 --> 00:01:18.080
using that particular service account.

31
00:01:18.080 --> 00:01:19.060
So here you go.

32
00:01:19.060 --> 00:01:21.010
Now our Helm is up and running

33
00:01:21.010 --> 00:01:23.080
in our Kubernetes cluster running in the Cloud.

34
00:01:23.080 --> 00:01:26.000
And how do we verify that, once again?

35
00:01:26.000 --> 00:01:28.050
We can say kubectl, get pods

36
00:01:28.050 --> 00:01:31.090
and look in the kube-system namespace.

37
00:01:31.090 --> 00:01:34.020
There it shows Tiller is up and running.

38
00:01:34.020 --> 00:01:36.050
So now we are ready to deploy our application

39
00:01:36.050 --> 00:01:38.050
into the Kubernetes cluster.

40
00:01:38.050 --> 00:01:42.090
So once again, go to manifests/charts directory

41
00:01:42.090 --> 00:01:49.040
and we can just say Helm install name myapp

42
00:01:49.040 --> 00:01:53.070
and of course, our rue directory for the chart, my app

43
00:01:53.070 --> 00:01:56.080
and press Enter.

44
00:01:56.080 --> 00:01:59.030
This time, the exact same application

45
00:01:59.030 --> 00:02:02.040
that was deployed on our local desktop cluster

46
00:02:02.040 --> 00:02:05.050
is now getting deployed to the Kubernetes cluster

47
00:02:05.050 --> 00:02:06.080
running in the Cloud.

48
00:02:06.080 --> 00:02:08.070
So essentially, in terms of migration,

49
00:02:08.070 --> 00:02:10.020
what you're looking at is,

50
00:02:10.020 --> 00:02:12.020
literally just change your context

51
00:02:12.020 --> 00:02:15.060
from one cluster which is running on your desktop

52
00:02:15.060 --> 00:02:17.090
to another cluster which is running in the Cloud

53
00:02:17.090 --> 00:02:20.000
and then redeploy the application.

54
00:02:20.000 --> 00:02:22.060
The fact that your manifests are exactly the same,

55
00:02:22.060 --> 00:02:24.060
the docker images are exactly the same

56
00:02:24.060 --> 00:02:27.020
so there is very low impudence mismatch

57
00:02:27.020 --> 00:02:29.070
in terms of your dev and deployed environment.

58
00:02:29.070 --> 00:02:32.010
Oftentimes I've seen developers building

59
00:02:32.010 --> 00:02:34.010
their development cluster even in the Cloud

60
00:02:34.010 --> 00:02:35.060
and that's certainly an option.

61
00:02:35.060 --> 00:02:38.070
So you can use EKS ctl to create multiple clusters,

62
00:02:38.070 --> 00:02:40.060
but the mechanism is still the same.

63
00:02:40.060 --> 00:02:42.030
You set up a context,

64
00:02:42.030 --> 00:02:44.020
you do your development cluster,

65
00:02:44.020 --> 00:02:45.080
and when you're ready, change the context

66
00:02:45.080 --> 00:02:47.000
through the prod cluster

67
00:02:47.000 --> 00:02:49.040
and then migrate your application.

68
00:02:49.040 --> 00:02:52.060
Let's look at our service here

69
00:02:52.060 --> 00:02:53.080
and while we are at it,

70
00:02:53.080 --> 00:02:57.040
let's look at service deployment and pods.

71
00:02:57.040 --> 00:03:00.030
Now, here is our service up and running,

72
00:03:00.030 --> 00:03:03.030
deployment looking good, and so is pod.

73
00:03:03.030 --> 00:03:05.070
Because in this case, service is deployed

74
00:03:05.070 --> 00:03:08.010
in the Kubernetes cluster running in the AWS Cloud

75
00:03:08.010 --> 00:03:10.010
and the type column LoadBalancer,

76
00:03:10.010 --> 00:03:12.040
our ELB or an Elastic Load Balancer

77
00:03:12.040 --> 00:03:14.020
is automatically a provision for you,

78
00:03:14.020 --> 00:03:15.090
thereby exposing the service,

79
00:03:15.090 --> 00:03:18.080
and of course, the ports are listed over here

80
00:03:18.080 --> 00:03:22.070
so 8080 is a port where this service is going to be accessible

81
00:03:22.070 --> 00:03:25.080
and 5005 is our DBAC port.

82
00:03:25.080 --> 00:03:27.060
Now, it takes about two to three minutes

83
00:03:27.060 --> 00:03:30.080
for the ELB to be provisioned and ready to be used

84
00:03:30.080 --> 00:03:32.020
so we'll speed up the process

85
00:03:32.020 --> 00:03:36.040
and then we will see how we can access the service.

86
00:03:36.040 --> 00:03:38.030
After waiting for a couple of minutes,

87
00:03:38.030 --> 00:03:41.000
we expect that the ELB will be up in provision.

88
00:03:41.000 --> 00:03:43.020
So let's go ahead and access the service.

89
00:03:43.020 --> 00:03:48.040
For that, we're going to copy the command from the browser.

90
00:03:48.040 --> 00:03:51.010
Here's the command that we're going to copy

91
00:03:51.010 --> 00:03:52.080
and if you recall, this is the same command

92
00:03:52.080 --> 00:03:54.020
that we have used earlier

93
00:03:54.020 --> 00:03:56.090
and it really allows us to access the service

94
00:03:56.090 --> 00:03:58.080
independent of the Cloud environment

95
00:03:58.080 --> 00:04:00.080
or the desktop environment.

96
00:04:00.080 --> 00:04:04.040
Copy and paste the command here.

97
00:04:04.040 --> 00:04:06.020
Once again, it's saying curl

98
00:04:06.020 --> 00:04:08.090
http://$kubectl get svc/greeting

99
00:04:08.090 --> 00:04:10.080
and give me the host name for the Ingress

100
00:04:10.080 --> 00:04:12.050
using the jsonpath.

101
00:04:12.050 --> 00:04:16.010
Here is the port and here is our context.

102
00:04:16.010 --> 00:04:20.000
Walla, this is our service now running,

103
00:04:20.000 --> 00:04:23.060
packaged as a Docker container running inside a pod

104
00:04:23.060 --> 00:04:27.000
in a Kubernetes cluster running in the AWS Cloud

105
00:04:27.000 --> 00:04:30.000
and we are accessing it from our console.

