WEBVTT
1
00:00:00.050 --> 00:00:03.050
- [Narrator] We saw Java applications deployed as pods

2
00:00:03.050 --> 00:00:06.000
in our Kubernetes application.

3
00:00:06.000 --> 00:00:07.070
When we were invoking that application

4
00:00:07.070 --> 00:00:10.040
the traffic was about 50% split

5
00:00:10.040 --> 00:00:12.030
between each of those applications.

6
00:00:12.030 --> 00:00:14.040
But one of the power of Istio is

7
00:00:14.040 --> 00:00:16.040
that the rules configuration and traffic routing

8
00:00:16.040 --> 00:00:19.010
let's you control the flow of traffic

9
00:00:19.010 --> 00:00:21.040
and the API calls between services.

10
00:00:21.040 --> 00:00:23.000
It can exactly define

11
00:00:23.000 --> 00:00:25.090
how much traffic should go to one service.

12
00:00:25.090 --> 00:00:27.030
This is particularly relevant

13
00:00:27.030 --> 00:00:30.020
if you're doing Canary testing or A/B testing.

14
00:00:30.020 --> 00:00:33.040
Let's see how we can accomplish something like that.

15
00:00:33.040 --> 00:00:35.080
So we are in this directory here.

16
00:00:35.080 --> 00:00:37.070
Go to manifests.

17
00:00:37.070 --> 00:00:39.020
Standalone.

18
00:00:39.020 --> 00:00:41.050
Open up greeting.

19
00:00:41.050 --> 00:00:43.060
Istio.yaml.

20
00:00:43.060 --> 00:00:46.070
And we go very much to the bottom here.

21
00:00:46.070 --> 00:00:51.070
On line 46 we have 50 weight assigned to greeting hello

22
00:00:51.070 --> 00:00:56.080
and on line 52 we have 50 weight assigned to greeting howdy.

23
00:00:56.080 --> 00:00:58.070
Let's change that weight.

24
00:00:58.070 --> 00:01:03.060
Where we make this 90 and make this 10.

25
00:01:03.060 --> 00:01:07.020
So now, when we invoke the service, 90% of the traffic,

26
00:01:07.020 --> 00:01:09.090
about 90% of the traffic, should go to greeting hello,

27
00:01:09.090 --> 00:01:14.010
and about 10% of the traffic should go to greeting howdy.

28
00:01:14.010 --> 00:01:18.020
Let's save it and get out of it.

29
00:01:18.020 --> 00:01:24.000
Apply those changes now.

30
00:01:24.000 --> 00:01:26.050
As you can see, our virtual service definition has been

31
00:01:26.050 --> 00:01:29.070
updated. So now, the next step for us is to

32
00:01:29.070 --> 00:01:32.050
go head and invoke the service again.

33
00:01:32.050 --> 00:01:35.030
We're going to use the same command that we did earlier

34
00:01:35.030 --> 00:01:39.060
and just to get a better sample instead of 10 times,

35
00:01:39.060 --> 00:01:43.080
we'll invoke this 50 times.

36
00:01:43.080 --> 00:01:51.050
We change the number to 50 here and hit enter.

37
00:01:51.050 --> 00:01:55.010
As you can see, most of the responses have been hello,

38
00:01:55.010 --> 00:01:56.030
one howdy.

39
00:01:56.030 --> 00:02:00.060
Now again this is expected over a large sample.

40
00:02:00.060 --> 00:02:02.050
So if you're saying the we worked 50 times,

41
00:02:02.050 --> 00:02:04.080
about 5 times should have been howdy.

42
00:02:04.080 --> 00:02:07.090
But again, this is a small sample so let's try to run this

43
00:02:07.090 --> 00:02:15.030
command once again.

44
00:02:15.030 --> 00:02:20.040
And if you go here now, one, two,

45
00:02:20.040 --> 00:02:22.050
three,

46
00:02:22.050 --> 00:02:24.050
four,

47
00:02:24.050 --> 00:02:26.040
five,

48
00:02:26.040 --> 00:02:27.090
six, seven.

49
00:02:27.090 --> 00:02:38.000
So about 10%. Let's try to run this once again.

50
00:02:38.000 --> 00:02:41.050
One, two, three,

51
00:02:41.050 --> 00:02:44.090
four,

52
00:02:44.090 --> 00:02:45.080
five.

53
00:02:45.080 --> 00:02:46.070
And this is exactly 10%.

54
00:02:46.070 --> 00:02:49.010
So the idea being that all a large sample

55
00:02:49.010 --> 00:02:51.090
if you do multiple times, about 10% of the traffic

56
00:02:51.090 --> 00:02:54.090
will go to one service and about 90% of the traffic

57
00:02:54.090 --> 00:02:56.050
will go to another service.

58
00:02:56.050 --> 00:02:59.060
Now, you can start setting up health checks.

59
00:02:59.060 --> 00:03:01.070
You can start setting up monitoring alarms

60
00:03:01.070 --> 00:03:04.090
and see as you're doing Canary and A/B testing of your

61
00:03:04.090 --> 00:03:07.040
Java applications, in the Kubernetes cluster

62
00:03:07.040 --> 00:03:10.080
how you can automatically apply a new

63
00:03:10.080 --> 00:03:13.090
virtual service definition based upon those health checks

64
00:03:13.090 --> 00:03:17.000
and that's what makes Istio that much more interesting.

