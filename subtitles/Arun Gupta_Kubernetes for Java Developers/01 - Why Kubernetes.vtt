WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Narrator] So you have decided to learn about Kubernetes,

2
00:00:03.010 --> 00:00:04.060
but what is Kubernetes?

3
00:00:04.060 --> 00:00:06.030
Why is it even required?

4
00:00:06.030 --> 00:00:08.030
In order to learn that, we need to learn

5
00:00:08.030 --> 00:00:10.090
a little bit of background on containers

6
00:00:10.090 --> 00:00:12.060
to help us set the context.

7
00:00:12.060 --> 00:00:14.080
Let's start with that first, and then we'll explain

8
00:00:14.080 --> 00:00:18.030
why and what of Kubernetes.

9
00:00:18.030 --> 00:00:21.060
A container is a light weight, stand alone, executable

10
00:00:21.060 --> 00:00:24.040
package of software that includes everything

11
00:00:24.040 --> 00:00:26.020
needed to run an application.

12
00:00:26.020 --> 00:00:31.020
Code, run-time, system tools, libraries, and settings,

13
00:00:31.020 --> 00:00:33.040
an application and all its dependencies are

14
00:00:33.040 --> 00:00:35.060
packaged together so that it can run reliably

15
00:00:35.060 --> 00:00:38.070
across multiple computing environments.

16
00:00:38.070 --> 00:00:41.070
This helps reduce impedance mismatch between development,

17
00:00:41.070 --> 00:00:46.000
testing, staging, and production environment.

18
00:00:46.000 --> 00:00:48.090
An application typically consists of multiple containers

19
00:00:48.090 --> 00:00:51.030
such as one for the application code,

20
00:00:51.030 --> 00:00:54.000
another for web-cell work, another for messaging,

21
00:00:54.000 --> 00:00:57.000
for caching and so on.

22
00:00:57.000 --> 00:00:59.020
An application with multiple containers is

23
00:00:59.020 --> 00:01:02.060
a relatively easy to manage on a single machine.

24
00:01:02.060 --> 00:01:04.080
But clearly, when only a single instance

25
00:01:04.080 --> 00:01:06.090
of each container is running.

26
00:01:06.090 --> 00:01:08.040
This is good during development phase

27
00:01:08.040 --> 00:01:11.000
of the application, but in production

28
00:01:11.000 --> 00:01:13.090
you want to run this application using multiple containers

29
00:01:13.090 --> 00:01:16.020
over multiple machines.

30
00:01:16.020 --> 00:01:18.090
This avoids a single point of failure.

31
00:01:18.090 --> 00:01:20.060
This makes your application highly available

32
00:01:20.060 --> 00:01:24.000
in case a single container or a single machine goes down.

33
00:01:24.000 --> 00:01:27.040
In order to manage these multiple containers

34
00:01:27.040 --> 00:01:30.070
on multiple machines, you need a container orchestrator.

35
00:01:30.070 --> 00:01:33.060
First, you need a system that can manage

36
00:01:33.060 --> 00:01:36.000
this cluster of machines.

37
00:01:36.000 --> 00:01:38.040
That can perform health checks on the machine,

38
00:01:38.040 --> 00:01:41.030
bounce them if they go down, allow the cluster size

39
00:01:41.030 --> 00:01:46.080
to grow up and down, this is your cluster manager.

40
00:01:46.080 --> 00:01:48.090
Now that you have a large number of machines in the cluster,

41
00:01:48.090 --> 00:01:51.050
you also need a scheduler that will schedule

42
00:01:51.050 --> 00:01:54.010
the containers on the right machines.

43
00:01:54.010 --> 00:01:56.040
This will insure that containers can be scheduled

44
00:01:56.040 --> 00:01:58.010
on the right machine to meet the requirements

45
00:01:58.010 --> 00:02:01.060
listed by the container, such as CPU and memory.

46
00:02:01.060 --> 00:02:03.080
This will insure that any containers

47
00:02:03.080 --> 00:02:07.010
that may go down can be brought up again.

48
00:02:07.010 --> 00:02:09.000
This is your scheduler.

49
00:02:09.000 --> 00:02:11.050
There are many other purposes of container orchestrator,

50
00:02:11.050 --> 00:02:15.020
but these two are the primary ones.

51
00:02:15.020 --> 00:02:17.060
There are several container orchestrators available.

52
00:02:17.060 --> 00:02:21.010
To start with, there is Docker Enterprises Edition

53
00:02:21.010 --> 00:02:23.040
from Docker, Inc., the company behind making

54
00:02:23.040 --> 00:02:26.060
the container technology accessible to everybody.

55
00:02:26.060 --> 00:02:30.060
Mesosphere DC/OS that is built on top of Apache Mesos,

56
00:02:30.060 --> 00:02:35.020
and provides an integrated platform for data and containers.

57
00:02:35.020 --> 00:02:38.050
Amazon Elastic Container Service or ECS, that is

58
00:02:38.050 --> 00:02:40.040
a managed service on the AWS Cloud,

59
00:02:40.040 --> 00:02:43.050
and allows to run and scale containerized applications

60
00:02:43.050 --> 00:02:48.070
on AWS without any inflation.

61
00:02:48.070 --> 00:02:50.080
Kubernetes is such an open- source container orchestrator

62
00:02:50.080 --> 00:02:54.050
that automates deployment, scaling, and management

63
00:02:54.050 --> 00:02:56.050
of containerized applications.

64
00:02:56.050 --> 00:03:01.050
This is also commonly called as k8s, or kates in short,

65
00:03:01.050 --> 00:03:03.050
where the number eight indicates the number of letters

66
00:03:03.050 --> 00:03:07.010
between K and S.

67
00:03:07.010 --> 00:03:09.030
So what is Kubernetes?

68
00:03:09.030 --> 00:03:11.090
Kubernetes is an open-source container orchestrator.

69
00:03:11.090 --> 00:03:16.010
Because it's open-source, it can run on desktop,

70
00:03:16.010 --> 00:03:18.050
on-prem, and in the cloud.

71
00:03:18.050 --> 00:03:20.040
This allows you to migrate your work load

72
00:03:20.040 --> 00:03:24.050
across this different environments very easily.

73
00:03:24.050 --> 00:03:26.050
Kubernetes is a CNCF project.

74
00:03:26.050 --> 00:03:29.050
CNCF is Cloud Native Computing Foundation

75
00:03:29.050 --> 00:03:31.060
and is a vendor neutral body that defines

76
00:03:31.060 --> 00:03:34.000
how Cloud Native applications can be built.

77
00:03:34.000 --> 00:03:36.060
Kubernetes is one of the projects there,

78
00:03:36.060 --> 00:03:38.000
and there are many other projects,

79
00:03:38.000 --> 00:03:41.000
such as Prometheus, Envoy, and Containerd.

