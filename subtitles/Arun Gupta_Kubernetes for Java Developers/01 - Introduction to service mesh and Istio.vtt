WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] This section will introduce,

2
00:00:01.080 --> 00:00:05.080
what is a service mesh and particularly more about Istio.

3
00:00:05.080 --> 00:00:08.010
Service mesh is a dedicated infrastructure layer

4
00:00:08.010 --> 00:00:10.080
for handling service-to-service communication.

5
00:00:10.080 --> 00:00:12.090
It is responsible for the reliable delivery

6
00:00:12.090 --> 00:00:14.080
of requests through complex topology

7
00:00:14.080 --> 00:00:17.040
of services that comprise a modern

8
00:00:17.040 --> 00:00:19.020
cloud-native application.

9
00:00:19.020 --> 00:00:21.060
This is particularly relevant in today's world

10
00:00:21.060 --> 00:00:22.080
where developers are leaning

11
00:00:22.080 --> 00:00:25.060
towards microservices-oriented architecture.

12
00:00:25.060 --> 00:00:27.040
In the context of Kubernetes,

13
00:00:27.040 --> 00:00:29.090
a service provides a simple OSI layer

14
00:00:29.090 --> 00:00:32.080
for DNS-based load balancing for the pods

15
00:00:32.080 --> 00:00:34.040
belonging to the service.

16
00:00:34.040 --> 00:00:37.020
Service mesh addresses OSI layer seven

17
00:00:37.020 --> 00:00:39.050
load balancing needs and a lot more.

18
00:00:39.050 --> 00:00:41.050
Let's look at them next.

19
00:00:41.050 --> 00:00:43.040
Service mesh ensures that communication

20
00:00:43.040 --> 00:00:46.030
between a Service A and a Service B can be done

21
00:00:46.030 --> 00:00:48.030
safely and securely.

22
00:00:48.030 --> 00:00:49.050
This could include defending

23
00:00:49.050 --> 00:00:51.030
against man-in-the-middle attack,

24
00:00:51.030 --> 00:00:54.010
using encryption, and mutual TLS.

25
00:00:54.010 --> 00:00:56.070
This also includes auditing capabilities

26
00:00:56.070 --> 00:01:00.040
to check who did what at what time.

27
00:01:00.040 --> 00:01:02.030
Reliability ensures there are provisions

28
00:01:02.030 --> 00:01:04.030
for health checks, time outs,

29
00:01:04.030 --> 00:01:08.050
deadlines, circuit breakers, and retries.

30
00:01:08.050 --> 00:01:09.060
Service mesh provides visibility

31
00:01:09.060 --> 00:01:11.060
into your microservices application.

32
00:01:11.060 --> 00:01:13.040
It ensures there are top-line metrics

33
00:01:13.040 --> 00:01:16.060
like request volume, success rates, and latencies.

34
00:01:16.060 --> 00:01:18.000
This also includes monitoring

35
00:01:18.000 --> 00:01:21.050
and distributed tracing across different services.

36
00:01:21.050 --> 00:01:23.080
Configurability allows to do traffic shaping

37
00:01:23.080 --> 00:01:25.050
between different services.

38
00:01:25.050 --> 00:01:27.080
This enables capabilities like load balancing,

39
00:01:27.080 --> 00:01:29.080
canary and A/B testing, shadowing,

40
00:01:29.080 --> 00:01:31.020
and fault injection.

41
00:01:31.020 --> 00:01:33.090
You can also do adaptive and zone aware routing

42
00:01:33.090 --> 00:01:36.040
between services using this.

43
00:01:36.040 --> 00:01:37.080
Trying to solve these problems

44
00:01:37.080 --> 00:01:39.010
with an application or framework

45
00:01:39.010 --> 00:01:41.080
of your choice not only makes the application complex,

46
00:01:41.080 --> 00:01:43.090
but also difficult to maintain.

47
00:01:43.090 --> 00:01:45.030
This becomes further complicated

48
00:01:45.030 --> 00:01:48.070
if your application consists of multiple microservices,

49
00:01:48.070 --> 00:01:51.070
potentially each written in a different language.

50
00:01:51.070 --> 00:01:53.070
The combinatorial explosion of libraries

51
00:01:53.070 --> 00:01:55.080
for different languages and platforms

52
00:01:55.080 --> 00:01:57.030
makes it extremely difficult

53
00:01:57.030 --> 00:01:59.080
to maintain such a solution.

54
00:01:59.080 --> 00:02:00.090
A common design pattern is

55
00:02:00.090 --> 00:02:04.050
where all logic for how the microservices need to connect,

56
00:02:04.050 --> 00:02:07.010
including safety, reliability,

57
00:02:07.010 --> 00:02:08.070
observability, and configuration

58
00:02:08.070 --> 00:02:10.090
is configured in a sidecar proxy.

59
00:02:10.090 --> 00:02:12.070
This work very well in Kubernetes,

60
00:02:12.070 --> 00:02:15.070
as a proxy is installed as a sidecar container,

61
00:02:15.070 --> 00:02:17.050
right next to the application container,

62
00:02:17.050 --> 00:02:18.080
in the same pod.

63
00:02:18.080 --> 00:02:22.010
Some of the advantages of this approach are,

64
00:02:22.010 --> 00:02:23.080
this out-of-process architecture

65
00:02:23.080 --> 00:02:25.040
decouples application code

66
00:02:25.040 --> 00:02:27.080
from communication management code.

67
00:02:27.080 --> 00:02:30.010
No change is required to the application code

68
00:02:30.010 --> 00:02:33.020
to add the capabilities offered by the sidecar.

69
00:02:33.020 --> 00:02:35.040
It also decouples application install

70
00:02:35.040 --> 00:02:37.070
from application upgrades.

71
00:02:37.070 --> 00:02:40.010
And finally, it minimize inconsistencies

72
00:02:40.010 --> 00:02:42.050
across different microservices.

73
00:02:42.050 --> 00:02:44.040
All external communication now happens

74
00:02:44.040 --> 00:02:45.070
through the sidecar.

75
00:02:45.070 --> 00:02:47.070
And because of being in the same pod,

76
00:02:47.070 --> 00:02:50.000
application container and proxy

77
00:02:50.000 --> 00:02:52.020
can talk to each other easily.

78
00:02:52.020 --> 00:02:53.090
Service mesh can then extract a wealth

79
00:02:53.090 --> 00:02:56.000
of signals about traffic behavior

80
00:02:56.000 --> 00:02:59.080
and use that to enforce policy decisions, such as security.

81
00:02:59.080 --> 00:03:02.020
It can also send them to monitoring systems

82
00:03:02.020 --> 00:03:04.020
to provide information about monitoring

83
00:03:04.020 --> 00:03:07.030
and observability of the application.

84
00:03:07.030 --> 00:03:08.050
A microservices-based application

85
00:03:08.050 --> 00:03:10.020
has different microservices,

86
00:03:10.020 --> 00:03:12.010
each with multiple replicas.

87
00:03:12.010 --> 00:03:14.010
Each replica is a pod.

88
00:03:14.010 --> 00:03:16.000
For a service mesh-enabled application,

89
00:03:16.000 --> 00:03:18.030
each pod has a sidecar container.

90
00:03:18.030 --> 00:03:22.010
This fleet of proxies is the service mesh data plane.

91
00:03:22.010 --> 00:03:24.040
How do we tell every proxy what to do?

92
00:03:24.040 --> 00:03:26.040
How we ensure the safety, reliability,

93
00:03:26.040 --> 00:03:29.000
and configuration can be done for each proxy?

94
00:03:29.000 --> 00:03:31.060
How do we get observability across these proxies?

95
00:03:31.060 --> 00:03:33.090
We need a control plane.

96
00:03:33.090 --> 00:03:35.060
A control plane to manage the service mesh

97
00:03:35.060 --> 00:03:37.010
data plane is required.

98
00:03:37.010 --> 00:03:38.080
This control plane handles tasks

99
00:03:38.080 --> 00:03:41.000
such as creating new instances

100
00:03:41.000 --> 00:03:43.010
and injecting the proxy as sidecar,

101
00:03:43.010 --> 00:03:45.020
management and monitoring,

102
00:03:45.020 --> 00:03:47.090
observability, security between different services,

103
00:03:47.090 --> 00:03:50.080
and implementing application-wide policies.

104
00:03:50.080 --> 00:03:52.030
Istio provides a control plane

105
00:03:52.030 --> 00:03:54.010
for this service mesh data plane.

106
00:03:54.010 --> 00:03:57.080
You can find everything about Istio at Istio.io.

107
00:03:57.080 --> 00:04:00.000
To go with the nautical puns around Kubernetes,

108
00:04:00.000 --> 00:04:03.000
Istio is Greek for sail.

109
00:04:03.000 --> 00:04:05.010
It uses an extended version of envoy

110
00:04:05.010 --> 00:04:06.090
as a sidecar proxy.

111
00:04:06.090 --> 00:04:09.000
Envoy, originally built by Lyft,

112
00:04:09.000 --> 00:04:11.030
now a CNCF graduated project,

113
00:04:11.030 --> 00:04:15.050
is a high performance C++ distributed proxy.

114
00:04:15.050 --> 00:04:18.050
Envoy is known to run on tens of thousands of nodes

115
00:04:18.050 --> 00:04:20.020
and process over 10 million requests

116
00:04:20.020 --> 00:04:21.090
per seconds in the mesh.

117
00:04:21.090 --> 00:04:25.000
Istio leverages Envoy's many built-in features.

118
00:04:25.000 --> 00:04:27.050
For example, dynamic service discovery,

119
00:04:27.050 --> 00:04:30.070
load balancing, TLS termination, circuit breaker,

120
00:04:30.070 --> 00:04:32.090
and fault injection.

121
00:04:32.090 --> 00:04:35.050
Formal definition of Istio from Istio.io is

122
00:04:35.050 --> 00:04:37.070
that Istio allows to connect,

123
00:04:37.070 --> 00:04:40.040
secure, control, and observe services.

124
00:04:40.040 --> 00:04:42.080
This is analogous to the needs of the service mesh

125
00:04:42.080 --> 00:04:44.040
that we explained earlier.

126
00:04:44.040 --> 00:04:45.090
Let's look at some core features of Istio

127
00:04:45.090 --> 00:04:48.050
to wrap up this section.

128
00:04:48.050 --> 00:04:51.010
Istio provides the following core features.

129
00:04:51.010 --> 00:04:53.050
Istio rules configuration and traffic routing

130
00:04:53.050 --> 00:04:55.010
lets you control the flow of traffic

131
00:04:55.010 --> 00:04:57.090
and API calls between services.

132
00:04:57.090 --> 00:05:00.020
Istio simplifies configuration of service-level properties

133
00:05:00.020 --> 00:05:02.090
like circuit breakers, time outs, and retries,

134
00:05:02.090 --> 00:05:05.020
and makes it a breeze to set up important tasks

135
00:05:05.020 --> 00:05:08.040
like A/B testing, canary rollouts, and staged rollouts

136
00:05:08.040 --> 00:05:10.060
with percentage-based traffic splits,

137
00:05:10.060 --> 00:05:12.090
with better visibility into your traffic

138
00:05:12.090 --> 00:05:15.030
and out-of-box failure recovery features,

139
00:05:15.030 --> 00:05:18.020
you can catch issues before they can cause problems.

140
00:05:18.020 --> 00:05:22.030
Making calls more reliable and your network more robust.

141
00:05:22.030 --> 00:05:23.090
Istio's security capabilities

142
00:05:23.090 --> 00:05:25.080
free developers to focus on security

143
00:05:25.080 --> 00:05:27.050
at the application level.

144
00:05:27.050 --> 00:05:30.030
Istio provides an underlying secure communication channel,

145
00:05:30.030 --> 00:05:32.080
and manages authentication, authorization,

146
00:05:32.080 --> 00:05:36.000
and encryption of service communication at scale.

147
00:05:36.000 --> 00:05:39.040
With Istio, service communications are secured by default,

148
00:05:39.040 --> 00:05:41.040
letting you enforce policies consistently

149
00:05:41.040 --> 00:05:44.030
across these diverse protocols and run times

150
00:05:44.030 --> 00:05:48.010
all with little or no application changes.

151
00:05:48.010 --> 00:05:50.030
Istio's robust tracing, monitoring, and logging

152
00:05:50.030 --> 00:05:53.030
gives you deep insights into your service mesh deployment,

153
00:05:53.030 --> 00:05:56.020
gain a real understanding of how service performance

154
00:05:56.020 --> 00:05:59.050
impacts things downstream and upstream,

155
00:05:59.050 --> 00:06:01.030
with Istio's monitoring feature,

156
00:06:01.030 --> 00:06:03.020
while its custom dashboards provide visibility

157
00:06:03.020 --> 00:06:05.070
into the performance of all of your services,

158
00:06:05.070 --> 00:06:07.000
and let you see how the performance

159
00:06:07.000 --> 00:06:10.060
is affecting your other processes.

160
00:06:10.060 --> 00:06:12.000
Istio is platform independent,

161
00:06:12.000 --> 00:06:14.030
and designed to run in a variety of environments,

162
00:06:14.030 --> 00:06:17.030
including those spanning cloud, on-prem,

163
00:06:17.030 --> 00:06:21.050
Kubernetes, services with distributed console, and more.

164
00:06:21.050 --> 00:06:24.030
The policy enforcement component of Istio can be extended

165
00:06:24.030 --> 00:06:26.060
and customized to integrate with existing solutions

166
00:06:26.060 --> 00:06:30.000
for access control lists, logging, monitoring,

167
00:06:30.000 --> 00:06:32.000
quotas, auditing, and more.

