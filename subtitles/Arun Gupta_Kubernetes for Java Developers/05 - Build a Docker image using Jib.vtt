WEBVTT
1
00:00:00.050 --> 00:00:02.080
- Dockerfile is a common way to package your

2
00:00:02.080 --> 00:00:05.030
Java applications as a Docker image.

3
00:00:05.030 --> 00:00:08.000
But, as a Java developer, you're building applications

4
00:00:08.000 --> 00:00:10.090
using Maven, Gradle and similar tools.

5
00:00:10.090 --> 00:00:12.090
How does this building of Docker Image

6
00:00:12.090 --> 00:00:14.080
fits into your workflow?

7
00:00:14.080 --> 00:00:17.070
Jib is a tool that supports that.

8
00:00:17.070 --> 00:00:19.070
This section will explain how to build

9
00:00:19.070 --> 00:00:22.060
your Docker Image using Jib.

10
00:00:22.060 --> 00:00:26.010
Jib builds optimized Docker and OCI images

11
00:00:26.010 --> 00:00:28.000
for your Java applications.

12
00:00:28.000 --> 00:00:32.030
It is commonly therefore too, as a compiler for containers.

13
00:00:32.030 --> 00:00:34.090
Jib allows you to deploy changes fast.

14
00:00:34.090 --> 00:00:37.070
It separates your applications into multiple layers,

15
00:00:37.070 --> 00:00:40.050
spreading dependencies from classes.

16
00:00:40.050 --> 00:00:42.060
Now you don't have to wait for Docker to

17
00:00:42.060 --> 00:00:45.020
rebuild your entire Java application.

18
00:00:45.020 --> 00:00:48.040
Just deploy the layers that changed.

19
00:00:48.040 --> 00:00:52.000
A Docker daemon is not needed to build the image.

20
00:00:52.000 --> 00:00:54.080
An image is built directly to the registry.

21
00:00:54.080 --> 00:00:59.000
Optionally, it can also be built to a Docker daemon.

22
00:00:59.000 --> 00:01:01.030
Writing a Dockerfile to create Docker image

23
00:01:01.030 --> 00:01:03.010
for your Java application means

24
00:01:03.010 --> 00:01:05.070
you need to learn two different sets of tools,

25
00:01:05.070 --> 00:01:07.090
one for Java, one for Docker.

26
00:01:07.090 --> 00:01:11.040
You also need to learn best practices around Dockerfile

27
00:01:11.040 --> 00:01:13.040
and need to insure they're consistently

28
00:01:13.040 --> 00:01:15.030
followed across the team.

29
00:01:15.030 --> 00:01:18.020
With Jib, there is no need to write a Dockerfile.

30
00:01:18.020 --> 00:01:20.090
It uses an open-ended base image

31
00:01:20.090 --> 00:01:23.020
that can also be run in debug mode.

32
00:01:23.020 --> 00:01:24.070
You certainly have the option

33
00:01:24.070 --> 00:01:27.040
to choose a different base image.

34
00:01:27.040 --> 00:01:28.070
And, the most important part is

35
00:01:28.070 --> 00:01:31.070
it's available as plugins for Maven and Gradle

36
00:01:31.070 --> 00:01:32.090
and as the Java library.

37
00:01:32.090 --> 00:01:35.070
You can also push to any registry of your choice.

38
00:01:35.070 --> 00:01:38.000
This allows you to seamlessly integrate this

39
00:01:38.000 --> 00:01:40.000
as part of your build process.

40
00:01:40.000 --> 00:01:44.060
No need to write Dockerfile or Docker Build and Push.

41
00:01:44.060 --> 00:01:46.020
Jib is an open-source tool

42
00:01:46.020 --> 00:01:48.050
and you can get all the details about the tool

43
00:01:48.050 --> 00:01:51.070
at GitHub repo.

44
00:01:51.070 --> 00:01:53.020
Now, let's go to IntelliJ,

45
00:01:53.020 --> 00:01:55.060
take a look at our param.xml

46
00:01:55.060 --> 00:01:57.010
and see how we're going to integrate this

47
00:01:57.010 --> 00:02:00.040
as part of our developer workflow.

48
00:02:00.040 --> 00:02:03.080
This is our app.

49
00:02:03.080 --> 00:02:05.090
Let's look at param.xml

50
00:02:05.090 --> 00:02:10.050
and here we are in the Maven param.xml

51
00:02:10.050 --> 00:02:13.020
and we are looking at the Maven profile.

52
00:02:13.020 --> 00:02:15.070
This profile is called just jib.

53
00:02:15.070 --> 00:02:19.080
Here is the groupID, artifactID, and the jib plugin version.

54
00:02:19.080 --> 00:02:22.020
Make sure you use the latest plugin version

55
00:02:22.020 --> 00:02:25.020
because it always has more features into it.

56
00:02:25.020 --> 00:02:27.020
Now, in terms of our image,

57
00:02:27.020 --> 00:02:30.090
we're using openjdk:8-j re as a base image.

58
00:02:30.090 --> 00:02:34.010
As we said, the base image can be overwritten.

59
00:02:34.010 --> 00:02:37.050
Here is the image that we are going to create.

60
00:02:37.050 --> 00:02:38.090
Here are my container options.

61
00:02:38.090 --> 00:02:40.020
Here are my runtime options,

62
00:02:40.020 --> 00:02:42.050
the ports that I am exposing.

63
00:02:42.050 --> 00:02:44.080
Here is an additional option that I'm specifying,

64
00:02:44.080 --> 00:02:47.070
which make sure that the timestamp on my docker image

65
00:02:47.070 --> 00:02:49.050
is always colored.

66
00:02:49.050 --> 00:02:53.070
Now, I'm binding the docker build code to the package phase

67
00:02:53.070 --> 00:02:56.050
of the jib profile.

68
00:02:56.050 --> 00:02:57.040
What that means is,

69
00:02:57.040 --> 00:02:59.030
when I give a Maven package command,

70
00:02:59.030 --> 00:03:01.070
it will also involve the docker build goal

71
00:03:01.070 --> 00:03:03.070
of the jib plugin.

72
00:03:03.070 --> 00:03:05.080
Let's see this in action.

73
00:03:05.080 --> 00:03:08.060
I'm in the app directory here

74
00:03:08.060 --> 00:03:11.080
and I can give the command Maven package

75
00:03:11.080 --> 00:03:14.010
and just the jib profile.

76
00:03:14.010 --> 00:03:15.090
And once I give this command,

77
00:03:15.090 --> 00:03:18.010
Now, if you're giving this command for the very first time,

78
00:03:18.010 --> 00:03:20.030
it will of course download all of the dependencies

79
00:03:20.030 --> 00:03:21.090
and everything for you,

80
00:03:21.090 --> 00:03:24.030
but we have already run the command on this machine,

81
00:03:24.030 --> 00:03:27.000
so the dependencies are predownloaded.

82
00:03:27.000 --> 00:03:28.000
So, the cool thing here is,

83
00:03:28.000 --> 00:03:31.030
you can see it's actually building to the Docker daemon.

84
00:03:31.030 --> 00:03:33.000
But in between, it also tries to

85
00:03:33.000 --> 00:03:35.040
retrieve the registry credentials.

86
00:03:35.040 --> 00:03:37.050
For something important is how do you configure the

87
00:03:37.050 --> 00:03:40.060
registry for your Jib profile?

88
00:03:40.060 --> 00:03:42.090
Here is the link on the jib GitHub repo,

89
00:03:42.090 --> 00:03:45.050
which talks about how do you use Maven settings.

90
00:03:45.050 --> 00:03:49.090
So any of Maven settings, you can set up these values.

91
00:03:49.090 --> 00:03:54.070
The registry name, in this case is registry.hub.docker.com

92
00:03:54.070 --> 00:03:56.020
then of course you give your user name

93
00:03:56.020 --> 00:03:58.010
and your registry password.

94
00:03:58.010 --> 00:04:01.060
And that's how it authenticates with the registry.

95
00:04:01.060 --> 00:04:02.090
Once you have done that,

96
00:04:02.090 --> 00:04:04.040
then you can just give the command,

97
00:04:04.040 --> 00:04:06.070
and in this case, it does build the Docker image

98
00:04:06.070 --> 00:04:08.060
to our local Docker daemon.

99
00:04:08.060 --> 00:04:11.090
So, let's look at what our image looks like now.

100
00:04:11.090 --> 00:04:14.000
So, if I say docker image ls

101
00:04:14.000 --> 00:04:18.020
this arungupta/greeting image was built

102
00:04:18.020 --> 00:04:19.090
just about a minute ago.

103
00:04:19.090 --> 00:04:27.020
Let's look at the history of this image.

104
00:04:27.020 --> 00:04:28.040
The cool thing about Jib is,

105
00:04:28.040 --> 00:04:29.090
as we discussed earlier,

106
00:04:29.090 --> 00:04:33.090
it actually splits your classes, resources, and dependencies

107
00:04:33.090 --> 00:04:36.080
into each individual Docker layer.

108
00:04:36.080 --> 00:04:39.010
This truly leveraging the Docker layering mechanism

109
00:04:39.010 --> 00:04:43.010
in an image and allowing you to integrate more rapidly.

110
00:04:43.010 --> 00:04:45.020
This way Docker does not have to build

111
00:04:45.020 --> 00:04:46.080
an entire application.

112
00:04:46.080 --> 00:04:49.060
If your resources and dependencies have not changed,

113
00:04:49.060 --> 00:04:51.030
which is typically the case,

114
00:04:51.030 --> 00:04:53.060
then only your classes layer is rebuilt

115
00:04:53.060 --> 00:04:55.090
and can be easily pushed to the registry.

116
00:04:55.090 --> 00:04:58.070
This is particularly relevant in a microservices world

117
00:04:58.070 --> 00:05:01.020
because you want that agility for your application and

118
00:05:01.020 --> 00:05:05.050
to be able to deploy your application more rapidly as well.

119
00:05:05.050 --> 00:05:08.070
Now, you can of course build without the Docker daemon

120
00:05:08.070 --> 00:05:10.040
and directly to a registry.

121
00:05:10.040 --> 00:05:15.030
So, what we can do is, we can just say Maven jib:build

122
00:05:15.030 --> 00:05:19.020
and we can still use the same profile and now in this case,

123
00:05:19.020 --> 00:05:21.030
it's going to build the exact same image

124
00:05:21.030 --> 00:05:24.070
but it's going to push it directly to the Docker registry.

125
00:05:24.070 --> 00:05:27.020
We just retrieved the registry credentials

126
00:05:27.020 --> 00:05:31.000
and built and pushed the image as arungupta/greeting.

