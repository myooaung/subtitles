WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Narrator] Now that you understand the basic

2
00:00:02.000 --> 00:00:04.080
Docker workflow, lets learn the basic concepts

3
00:00:04.080 --> 00:00:07.010
around Docker image and container.

4
00:00:07.010 --> 00:00:09.060
We'll learn how a Docker image can be created

5
00:00:09.060 --> 00:00:12.040
and a container can be run.

6
00:00:12.040 --> 00:00:15.090
Let's start by looking at how we can create a Docker image.

7
00:00:15.090 --> 00:00:19.010
Docker image can be built from a text-based file,

8
00:00:19.010 --> 00:00:21.010
usually called a Dockerfile.

9
00:00:21.010 --> 00:00:23.050
Dockerfile is a text document that contains

10
00:00:23.050 --> 00:00:25.070
all the commands a user could call on the

11
00:00:25.070 --> 00:00:29.020
command line to assemble the image.

12
00:00:29.020 --> 00:00:31.050
Docker runs instructions in a Docker file

13
00:00:31.050 --> 00:00:33.030
in the specified order.

14
00:00:33.030 --> 00:00:36.060
A Dockerfile must start with a FROM instruction.

15
00:00:36.060 --> 00:00:39.060
The FROM instruction specifies a base image

16
00:00:39.060 --> 00:00:41.020
from which you are building.

17
00:00:41.020 --> 00:00:43.030
The base imagine could be an operating system

18
00:00:43.030 --> 00:00:46.090
or another general purpose image built by somebody

19
00:00:46.090 --> 00:00:49.000
and already has some of the tools that

20
00:00:49.000 --> 00:00:50.080
you need for the application.

21
00:00:50.080 --> 00:00:53.040
For example, OpenJDK is an image

22
00:00:53.040 --> 00:00:56.020
that we'll use in our course.

23
00:00:56.020 --> 00:00:58.070
Dockerfile syntax allows multiple instructions.

24
00:00:58.070 --> 00:01:00.070
ADD is one such instruction that copies

25
00:01:00.070 --> 00:01:04.030
new files, directories, or remote file URLs

26
00:01:04.030 --> 00:01:07.040
from a source, and adds them to file system

27
00:01:07.040 --> 00:01:10.060
of the image at the destination path.

28
00:01:10.060 --> 00:01:12.050
Another important instruction is CMD,

29
00:01:12.050 --> 00:01:15.040
that provides defaults for executing container.

30
00:01:15.040 --> 00:01:17.080
If there are multiple CMD instructions then

31
00:01:17.080 --> 00:01:20.020
only the last CMD will take effect.

32
00:01:20.020 --> 00:01:22.000
This is where typically you start

33
00:01:22.000 --> 00:01:24.020
or deploy your application.

34
00:01:24.020 --> 00:01:26.010
Complete set of Dockerfile instructions

35
00:01:26.010 --> 00:01:30.010
are available on docs.docker.com

36
00:01:30.010 --> 00:01:32.030
Here is a sample Dockerfile that uses

37
00:01:32.030 --> 00:01:34.070
Debian operating system as indicated

38
00:01:34.070 --> 00:01:37.040
by the FROM statement, as a base image,

39
00:01:37.040 --> 00:01:40.050
and echo's "hello world" when the container is run.

40
00:01:40.050 --> 00:01:44.060
And as you can see this is done in the CMD command.

41
00:01:44.060 --> 00:01:46.040
Another image relevant to this course

42
00:01:46.040 --> 00:01:49.040
is using OpenJDK as the base image this time

43
00:01:49.040 --> 00:01:51.050
and turns the version of Java.

44
00:01:51.050 --> 00:01:53.080
As a developer, you can start with an operating

45
00:01:53.080 --> 00:01:58.000
system base image, and add your specific version of the JDK.

46
00:01:58.000 --> 00:02:00.060
But if an image with the JDK version that you need

47
00:02:00.060 --> 00:02:04.020
already exists, then you're more likely to use that.

48
00:02:04.020 --> 00:02:08.050
Docker enables multi-stage builds using Dockerfile.

49
00:02:08.050 --> 00:02:12.010
This is enabled by having multiple FROM statements.

50
00:02:12.010 --> 00:02:15.010
Each FROM statement can use a different base

51
00:02:15.010 --> 00:02:18.010
and each of them begins a new stage of the build.

52
00:02:18.010 --> 00:02:20.060
You can selectively copy artifacts from one stage

53
00:02:20.060 --> 00:02:23.010
to another, leaving behind everything

54
00:02:23.010 --> 00:02:25.030
you don't want in the final image.

55
00:02:25.030 --> 00:02:27.070
This allows build and run of the application

56
00:02:27.070 --> 00:02:30.080
from the same Dockerfile, and yet have a lean

57
00:02:30.080 --> 00:02:33.010
Docker image for production.

58
00:02:33.010 --> 00:02:36.010
For example, first stage of a Dockerfile can be used

59
00:02:36.010 --> 00:02:38.050
for development and would typically contain

60
00:02:38.050 --> 00:02:41.010
everything needed to build your application.

61
00:02:41.010 --> 00:02:43.040
The last stage could be a slimmed down version

62
00:02:43.040 --> 00:02:46.070
to use only for production, which only contains

63
00:02:46.070 --> 00:02:50.010
your application and exactly what was needed to run it.

64
00:02:50.010 --> 00:02:52.040
Specifically in the case of Java, as shown

65
00:02:52.040 --> 00:02:55.030
in the Dockerfile, you can use a batch of maven

66
00:02:55.030 --> 00:02:57.080
as the base image for development stage,

67
00:02:57.080 --> 00:03:00.030
and OpenJDK for the production stage.

68
00:03:00.030 --> 00:03:03.080
We'll see a live sample of this later in the course.

69
00:03:03.080 --> 00:03:06.020
As a Java developer you often wonder about

70
00:03:06.020 --> 00:03:09.040
which Java base image should I be using?

71
00:03:09.040 --> 00:03:11.060
OpenJDK Docker image is created

72
00:03:11.060 --> 00:03:13.040
and maintained by the community.

73
00:03:13.040 --> 00:03:15.040
It is a very popular download and supports

74
00:03:15.040 --> 00:03:17.050
a wide variety of tags.

75
00:03:17.050 --> 00:03:20.000
If you're looking for a no-cost, long term support

76
00:03:20.000 --> 00:03:22.060
downstream distribution of OpenJDK

77
00:03:22.060 --> 00:03:25.080
then Amazon Corretto is one of your choice.

78
00:03:25.080 --> 00:03:28.050
An official Docker image for Amazon Corretto

79
00:03:28.050 --> 00:03:32.060
is also available at hub.docker.com

80
00:03:32.060 --> 00:03:36.090
So you can easily replace OpenJDK with Amazon Corretto

81
00:03:36.090 --> 00:03:38.060
as shown in this slide.

82
00:03:38.060 --> 00:03:41.030
Amazon Corretto is meant to be a drop-in replacement

83
00:03:41.030 --> 00:03:44.080
for OpenJDK compatible JDKs.

84
00:03:44.080 --> 00:03:47.060
You can of course use Amazon Corretto on desktop,

85
00:03:47.060 --> 00:03:52.030
on Prime and on the Cloud, as a standalone download.

86
00:03:52.030 --> 00:03:54.080
It is important to understand what is build context

87
00:03:54.080 --> 00:03:56.090
when building a Docker image.

88
00:03:56.090 --> 00:04:00.060
Docker image is built using Docker image build command.

89
00:04:00.060 --> 00:04:03.000
This command takes a path or a URL.

90
00:04:03.000 --> 00:04:05.070
By default Dockerfile exists at the root

91
00:04:05.070 --> 00:04:07.090
of this path or URL.

92
00:04:07.090 --> 00:04:10.060
An instruction in the Dockerfile such as ADD

93
00:04:10.060 --> 00:04:13.000
will resolve files in the local file system

94
00:04:13.000 --> 00:04:15.040
using this build context.

95
00:04:15.040 --> 00:04:18.000
The build context is sent to the Docker engine

96
00:04:18.000 --> 00:04:20.080
so it is recommended to create a new directory,

97
00:04:20.080 --> 00:04:23.080
copy the Dockerfile and other necessary artifacts

98
00:04:23.080 --> 00:04:27.080
in that directory, and then issue the build command.

99
00:04:27.080 --> 00:04:30.080
Alternatively you can also use .dockerignore,

100
00:04:30.080 --> 00:04:33.060
very much like .gitignore to exclude files

101
00:04:33.060 --> 00:04:36.090
and directories from the build context.

102
00:04:36.090 --> 00:04:41.020
Each image is uniquely identified with a name and a tag.

103
00:04:41.020 --> 00:04:43.070
When building an image you need to assign a name

104
00:04:43.070 --> 00:04:45.090
to the image and optionally tag it.

105
00:04:45.090 --> 00:04:49.040
If no tag is provided then the latest tag is used.

106
00:04:49.040 --> 00:04:51.070
Here is a sample command that shows how to build

107
00:04:51.070 --> 00:04:54.030
an image and give it a name and a tag.

108
00:04:54.030 --> 00:04:58.010
Docker image build is the command, -t is an option

109
00:04:58.010 --> 00:05:01.000
that allows to specify name and tag in the format

110
00:05:01.000 --> 00:05:04.070
name:tag, and dot in this case, which is current

111
00:05:04.070 --> 00:05:07.070
directory, provides the build context.

112
00:05:07.070 --> 00:05:09.090
Running an image launches a container.

113
00:05:09.090 --> 00:05:12.090
Docker container run command is used to run the container,

114
00:05:12.090 --> 00:05:15.010
you just need to specify the image name.

115
00:05:15.010 --> 00:05:17.090
As explained in the Docker workflow, the CLI will

116
00:05:17.090 --> 00:05:19.070
give this command to the Docker engine,

117
00:05:19.070 --> 00:05:22.010
which will check if the image is already available

118
00:05:22.010 --> 00:05:23.030
on server host.

119
00:05:23.030 --> 00:05:26.080
Download it if needed and then run the container.

120
00:05:26.080 --> 00:05:29.040
By default the container runs in foreground.

121
00:05:29.040 --> 00:05:31.080
- d option allows to run the container

122
00:05:31.080 --> 00:05:34.090
in detach or background mode.

123
00:05:34.090 --> 00:05:39.030
Multiple options to the command can be combined such as -it.

124
00:05:39.030 --> 00:05:42.090
Here -i keep STDIN open

125
00:05:42.090 --> 00:05:47.000
and -t allocates a pseudo-tty.

126
00:05:47.000 --> 00:05:49.070
By default no ports of the containers are published

127
00:05:49.070 --> 00:05:52.090
to the outside world, however a port can be explicitly

128
00:05:52.090 --> 00:05:56.010
made available using port forwarding.

129
00:05:56.010 --> 00:05:58.040
This is done using the -p option

130
00:05:58.040 --> 00:06:00.070
during the Docker container run command.

131
00:06:00.070 --> 00:06:02.090
This allows to map a container port

132
00:06:02.090 --> 00:06:05.060
to a specific port on the host.

133
00:06:05.060 --> 00:06:09.000
Multiple ports can be published using -p.

