WEBVTT
1
00:00:02.000 --> 00:00:03.090
where you don't need to be worried about

2
00:00:03.090 --> 00:00:06.030
the deployment pipeline infrastructure,

3
00:00:06.030 --> 00:00:09.050
then you need to think about a manage deployment pipeline.

4
00:00:09.050 --> 00:00:13.060
This is exactly where AWS code pipeline helps.

5
00:00:13.060 --> 00:00:15.090
AWS code pipeline is a fully managed,

6
00:00:15.090 --> 00:00:18.060
continuous delivery service that helps you automate

7
00:00:18.060 --> 00:00:21.030
your release pipelines for fast and reliable

8
00:00:21.030 --> 00:00:26.050
application and infrastructure updates.

9
00:00:26.050 --> 00:00:28.080
and deploy phases of your release process

10
00:00:28.080 --> 00:00:30.080
every time there is a code change based

11
00:00:30.080 --> 00:00:32.080
on the release model you define.

12
00:00:32.080 --> 00:00:35.040
This enables you to rapidly and reliably

13
00:00:35.040 --> 00:00:37.090
deliver features and updates.

14
00:00:37.090 --> 00:00:40.060
code pipeline allows you to integrate third party

15
00:00:40.060 --> 00:00:43.000
developer tools like github or Jenkins

16
00:00:43.000 --> 00:00:46.030
into any stage of your release process with one click.

17
00:00:46.030 --> 00:00:48.090
You can use third party tools for source control,

18
00:00:48.090 --> 00:00:51.060
build, test or deployment.

19
00:00:51.060 --> 00:00:53.060
AWS code pipeline allows you to define

20
00:00:53.060 --> 00:00:56.050
your pipeline structure through a declarative JSON

21
00:00:56.050 --> 00:00:59.060
document as we will see in our course.

22
00:00:59.060 --> 00:01:02.010
Which allows you to specify your release workflow,

23
00:01:02.010 --> 00:01:04.020
any stages, and actions.

24
00:01:04.020 --> 00:01:07.010
These documents enable you to update existing pipelines,

25
00:01:07.010 --> 00:01:09.030
as well as provide starting templates

26
00:01:09.030 --> 00:01:10.060
for creating new pipelines.

27
00:01:10.060 --> 00:01:13.000
Let's look at the code next.

28
00:01:13.000 --> 00:01:16.020
Let's look at what our context is set at first.

29
00:01:16.020 --> 00:01:20.070
Cube ctl config, get contexts.

30
00:01:20.070 --> 00:01:22.020
It's set to docker for desktop,

31
00:01:22.020 --> 00:01:23.080
but in this case because we are deploying

32
00:01:23.080 --> 00:01:26.010
to a Kubernetes cluster and Amazon EKS,

33
00:01:26.010 --> 00:01:35.000
we will switch our context to the EKS cluster.

34
00:01:35.000 --> 00:01:37.080
Copy the context name.

35
00:01:37.080 --> 00:01:41.000
And paste it here, okay.

36
00:01:41.000 --> 00:01:44.040
Now as we talked about code pipeline can be created

37
00:01:44.040 --> 00:01:48.090
using JSON document, so this is the root of our repo,

38
00:01:48.090 --> 00:01:52.010
and if you look at it there's a build spec dot yaml

39
00:01:52.010 --> 00:01:55.040
right in the root of the repo itself.

40
00:01:55.040 --> 00:01:58.010
Now in this we are talking about version first of all,

41
00:01:58.010 --> 00:02:01.010
this is version 0.2, it provide different phases,

42
00:02:01.010 --> 00:02:05.060
so install, prebuild, build, post build,

43
00:02:05.060 --> 00:02:08.020
and there are multiple commands associated with it.

44
00:02:08.020 --> 00:02:10.010
So for example in the install case,

45
00:02:10.010 --> 00:02:12.040
I'm installing the iam authenticator,

46
00:02:12.040 --> 00:02:14.030
kubectl CLI, setting the path,

47
00:02:14.030 --> 00:02:16.020
installing the right packages.

48
00:02:16.020 --> 00:02:19.060
In prebuild, I'm making sure that my manifests

49
00:02:19.060 --> 00:02:22.080
are appropriately prepared with the right image name.

50
00:02:22.080 --> 00:02:25.010
Then in the build phase, of course,

51
00:02:25.010 --> 00:02:26.020
I am building the docker image,

52
00:02:26.020 --> 00:02:28.050
and then finally in the post build stage,

53
00:02:28.050 --> 00:02:31.080
is where I'm actually deploying to Kubernetes

54
00:02:31.080 --> 00:02:34.080
using my downloaded kubectl CLI, okay.

55
00:02:34.080 --> 00:02:40.020
So let's go ahead and create our code pipeline.

56
00:02:40.020 --> 00:02:43.010
Now in order to create the code pipeline,

57
00:02:43.010 --> 00:02:46.010
we will be using a module from EKS workshop.

58
00:02:46.010 --> 00:02:49.010
EKS workshop is a workshop build by Amazon

59
00:02:49.010 --> 00:02:51.070
which allows you to get started with Amazon EKS,

60
00:02:51.070 --> 00:02:54.000
and provides best practices around deploying

61
00:02:54.000 --> 00:02:56.090
your Kubernetes cluster in the cloud.

62
00:02:56.090 --> 00:03:00.050
So we're going to look at the module here.

63
00:03:00.050 --> 00:03:02.060
This is the module that we'll be looking at,

64
00:03:02.060 --> 00:03:04.030
this module provides extensive details

65
00:03:04.030 --> 00:03:07.010
as you can see the workshop itself has plenty of details

66
00:03:07.010 --> 00:03:09.080
about running your Kubernetes cluster in the cloud,

67
00:03:09.080 --> 00:03:12.010
but let's click here to go to the next part

68
00:03:12.010 --> 00:03:13.060
of the module.

69
00:03:13.060 --> 00:03:16.050
When you create a Amazon EKS cluster,

70
00:03:16.050 --> 00:03:19.040
the IAM user entity user, or role,

71
00:03:19.040 --> 00:03:21.020
that creates the cluster is automatically

72
00:03:21.020 --> 00:03:22.050
granted system core and master permission

73
00:03:22.050 --> 00:03:24.080
in the cluster's RBAC configuration.

74
00:03:24.080 --> 00:03:28.010
Now in order to grant additional AWS users or roles,

75
00:03:28.010 --> 00:03:30.020
the ability to interact with your cluster,

76
00:03:30.020 --> 00:03:33.020
you must edit the AWS auth config map.

77
00:03:33.020 --> 00:03:35.050
So let's create the IAM role first,

78
00:03:35.050 --> 00:03:37.080
and then we'll edit the auth map.

79
00:03:37.080 --> 00:03:40.060
So let's go down here, click on this button,

80
00:03:40.060 --> 00:03:42.070
this will copy the command for you.

81
00:03:42.070 --> 00:03:44.080
Now in our case we don't need CD environment,

82
00:03:44.080 --> 00:03:46.040
this is specific to the workshop,

83
00:03:46.040 --> 00:03:49.080
so we will just copy this command.

84
00:03:49.080 --> 00:03:54.060
Copy it here, and in the terminal, paste the command.

85
00:03:54.060 --> 00:03:56.090
And all the commands are executed for us,

86
00:03:56.090 --> 00:04:00.020
it generates a Kubernetes role.

87
00:04:00.020 --> 00:04:02.090
Back in my browser.

88
00:04:02.090 --> 00:04:05.030
Now, let's copy the command for modifying

89
00:04:05.030 --> 00:04:08.010
my AWS auth config map, and this command

90
00:04:08.010 --> 00:04:10.050
can be copied as it is.

91
00:04:10.050 --> 00:04:12.000
Now, the important part here is,

92
00:04:12.000 --> 00:04:14.040
we are patching the auth map

93
00:04:14.040 --> 00:04:16.020
for a particular Kubernetes cluster,

94
00:04:16.020 --> 00:04:18.010
so it's important that your kubectl config

95
00:04:18.010 --> 00:04:20.030
is set correctly.

96
00:04:20.030 --> 00:04:25.030
So paste it here, and this is looking good.

97
00:04:25.030 --> 00:04:34.040
Now, the next step here, the workspace

98
00:04:34.040 --> 00:04:37.020
and in this case we'll be using our own repo,

99
00:04:37.020 --> 00:04:39.040
the simple gridding application that we have been building.

100
00:04:39.040 --> 00:04:42.010
So let's skip this part of the module.

101
00:04:42.010 --> 00:04:44.070
Now we need to generate a github access token,

102
00:04:44.070 --> 00:04:46.030
this will allow code pipeline

103
00:04:46.030 --> 00:04:48.040
to receive call backs from github.

104
00:04:48.040 --> 00:04:52.050
So click on this page here.

105
00:04:52.050 --> 00:04:55.000
You go to personal access token.

106
00:04:55.000 --> 00:04:58.030
And we are going to call this as,

107
00:04:58.030 --> 00:05:03.060
Kubernetes course, give it full access for the repos.

108
00:05:03.060 --> 00:05:05.040
Scroll down.

109
00:05:05.040 --> 00:05:07.050
Click generate token.

110
00:05:07.050 --> 00:05:10.040
Now this shows our generated github token,

111
00:05:10.040 --> 00:05:12.020
it's blurred out for a reason,

112
00:05:12.020 --> 00:05:14.040
but let's copy it here.

113
00:05:14.040 --> 00:05:18.090
And then we can move to the next step.

114
00:05:18.090 --> 00:05:21.020
Click here.

115
00:05:21.020 --> 00:05:24.060
And now we are ready to launch a cloud formation template.

116
00:05:24.060 --> 00:05:26.070
This will generate our code pipeline,

117
00:05:26.070 --> 00:05:28.020
this will generate our code build,

118
00:05:28.020 --> 00:05:30.040
and all the services that are required for it.

119
00:05:30.040 --> 00:05:33.070
So let's click on it here.

120
00:05:33.070 --> 00:05:35.040
Make sure this is in the right region,

121
00:05:35.040 --> 00:05:37.080
US west two, this is exactly where our

122
00:05:37.080 --> 00:05:40.050
Kubernetes cluster has been created as well.

123
00:05:40.050 --> 00:05:42.090
Keep this stack name as it is.

124
00:05:42.090 --> 00:05:44.080
We need a github token,

125
00:05:44.080 --> 00:05:47.050
actually we need a github user first.

126
00:05:47.050 --> 00:05:50.070
Call that as my github user.

127
00:05:50.070 --> 00:05:52.050
And the github token we already copied

128
00:05:52.050 --> 00:05:54.010
from the previous screen.

129
00:05:54.010 --> 00:05:58.030
Paste it here, our github repo is,

130
00:05:58.030 --> 00:06:03.090
lil Kubernetes for Java.

131
00:06:03.090 --> 00:06:06.080
Branch is okay, everything else looks good.

132
00:06:06.080 --> 00:06:08.060
And our EKS cluster of course,

133
00:06:08.060 --> 00:06:12.070
is Kubernetes course.

134
00:06:12.070 --> 00:06:14.060
Click on accept here, because it's going

135
00:06:14.060 --> 00:06:17.000
to create IAM resources.

136
00:06:17.000 --> 00:06:19.050
Because it's going to create AWS resources

137
00:06:19.050 --> 00:06:24.010
using that IAM role, and click on create stack.

138
00:06:24.010 --> 00:06:26.040
And now it's going to show you the progress

139
00:06:26.040 --> 00:06:28.040
as the different resources are being created.

140
00:06:28.040 --> 00:06:30.050
You can click on refresh button here

141
00:06:30.050 --> 00:06:34.010
to see the progress status.

142
00:06:34.010 --> 00:06:34.090
After waiting for about a minute or so,

143
00:06:34.090 --> 00:06:36.060
you can see that the create is complete

144
00:06:36.060 --> 00:06:39.060
for the EKSWS code pipeline.

145
00:06:39.060 --> 00:06:43.070
So now what we can do is we can go to the code pipeline

146
00:06:43.070 --> 00:06:48.040
service from our services panel here.

147
00:06:48.040 --> 00:06:50.080
And we can see there is a code pipeline

148
00:06:50.080 --> 00:06:52.030
that is automatically created for us,

149
00:06:52.030 --> 00:06:53.040
and it says just now.

150
00:06:53.040 --> 00:06:56.050
So click on the code pipeline, and it shows

151
00:06:56.050 --> 00:06:59.020
you a graphical display of different stages,

152
00:06:59.020 --> 00:07:01.030
source, and build.

153
00:07:01.030 --> 00:07:03.000
Source just succeeded, that means

154
00:07:03.000 --> 00:07:05.010
it was able to check out the entire source.

155
00:07:05.010 --> 00:07:06.050
And for the build, we can track

156
00:07:06.050 --> 00:07:09.020
the progress here by clicking on details.

157
00:07:09.020 --> 00:07:11.090
It shows complete progress here,

158
00:07:11.090 --> 00:07:16.010
and if I go down I can say build logs for me.

159
00:07:16.010 --> 00:07:19.060
The most important part here to understand is,

160
00:07:19.060 --> 00:07:21.040
all of this build infrastructure is highly scalable

161
00:07:21.040 --> 00:07:23.020
and running for you in the cloud,

162
00:07:23.020 --> 00:07:24.080
where you can continue to focus

163
00:07:24.080 --> 00:07:27.090
on what your application needs to do.

164
00:07:27.090 --> 00:07:29.050
The whole process could take a few minutes,

165
00:07:29.050 --> 00:07:31.020
but if you wait for some time,

166
00:07:31.020 --> 00:07:32.040
then eventually you will see

167
00:07:32.040 --> 00:07:34.060
that the upload artifacts is success

168
00:07:34.060 --> 00:07:36.080
and is true, what that means is,

169
00:07:36.080 --> 00:07:38.070
eventually we will be able to apply

170
00:07:38.070 --> 00:07:41.030
kubectl apply manifest stand alone

171
00:07:41.030 --> 00:07:42.080
gridding pipeline dot yaml.

172
00:07:42.080 --> 00:07:45.020
This is sort of where our single manifest

173
00:07:45.020 --> 00:07:47.000
with two resources, one deployment,

174
00:07:47.000 --> 00:07:48.080
one service are defined.

175
00:07:48.080 --> 00:07:51.000
And that's the manifest that is using

176
00:07:51.000 --> 00:07:52.060
to deploy the artifacts for the Kubernetes cluster.

177
00:07:52.060 --> 00:07:55.030
So now if I go to the Kubernetes cluster,

178
00:07:55.030 --> 00:08:05.070
and look at what services and deployments are existing.

179
00:08:05.070 --> 00:08:08.090
And as expected, our service, our deployment,

180
00:08:08.090 --> 00:08:13.040
and our pod are existing, and the pod is one of one,

181
00:08:13.040 --> 00:08:15.000
so that's really good.

182
00:08:15.000 --> 00:08:16.060
Now it also has an external IP,

183
00:08:16.060 --> 00:08:19.090
external load balancer because a service type

184
00:08:19.090 --> 00:08:22.010
was load balancer so essentially AWS created

185
00:08:22.010 --> 00:08:25.010
an ELB or an elastic load balancer for you,

186
00:08:25.010 --> 00:08:28.040
and exposed the service on that.

187
00:08:28.040 --> 00:08:29.040
And the port is of course 8080.

188
00:08:29.040 --> 00:08:36.050
So let's try to access this service now.

189
00:08:36.050 --> 00:08:38.070
Let's copy this command here,

190
00:08:38.070 --> 00:08:41.050
and we're going to paste it here.

191
00:08:41.050 --> 00:08:43.020
Now sometimes it could take two to three minutes

192
00:08:43.020 --> 00:08:44.060
for an ELB to be provisioned,

193
00:08:44.060 --> 00:08:47.080
so let's try it and see what it gives us.

194
00:08:47.080 --> 00:08:50.070
Oh, that's exactly the output that we expected.

195
00:08:50.070 --> 00:08:54.005
So now we just saw our Java application,

196
00:08:54.005 --> 00:08:54.050
packaged as a docker container,

197
00:08:54.050 --> 00:08:56.002
packaged as a docker container,

198
00:08:56.002 --> 00:08:56.020
deployed as a Kubernetes deployment,

199
00:08:56.020 --> 00:08:59.001
deployed as a Kubernetes deployment,

200
00:08:59.001 --> 00:08:59.010
accessed using the Kubernetes service,

201
00:08:59.010 --> 00:09:01.006
accessed using the Kubernetes service,

202
00:09:01.006 --> 00:09:01.060
deployed using code pipeline, fully managed in the cloud.

203
00:09:01.060 --> 00:09:06.000
deployed using code pipeline, fully managed in the cloud.

