WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] We learn about the basic building blocks

2
00:00:02.020 --> 00:00:04.060
of Kubernetes resources for pods.

3
00:00:04.060 --> 00:00:08.020
Let's look at some other Kubernetes resources next.

4
00:00:08.020 --> 00:00:11.070
Our deployment object provides declarative updates for pods.

5
00:00:11.070 --> 00:00:14.090
You describe a desired state and a deployment object

6
00:00:14.090 --> 00:00:17.080
and Kubernetes cluster changes the actual state

7
00:00:17.080 --> 00:00:20.060
to the desired state at a controlled rate.

8
00:00:20.060 --> 00:00:23.010
Multiple replicas of a pod can be created

9
00:00:23.010 --> 00:00:26.000
by specifying the number of replicas.

10
00:00:26.000 --> 00:00:29.020
A new version of the pod can be rolled out to all replicas

11
00:00:29.020 --> 00:00:32.080
or it can roll back to a previously deployed version.

12
00:00:32.080 --> 00:00:35.060
That is how a sample Kubernetes deployment manifest

13
00:00:35.060 --> 00:00:36.060
might look like.

14
00:00:36.060 --> 00:00:38.040
Let's walk through this.

15
00:00:38.040 --> 00:00:41.050
You can see the apiVersion is different here.

16
00:00:41.050 --> 00:00:45.030
The Kubernetes object to be created here is a deployment.

17
00:00:45.030 --> 00:00:47.030
Usual metadata section.

18
00:00:47.030 --> 00:00:49.090
In spec, replicas is a new entry

19
00:00:49.090 --> 00:00:52.060
and defines a number of desired pods.

20
00:00:52.060 --> 00:00:57.030
Selector defines a label selector for pods.

21
00:00:57.030 --> 00:00:59.090
MatchLabel in that defines the exact set

22
00:00:59.090 --> 00:01:01.050
of labels that are matched.

23
00:01:01.050 --> 00:01:03.050
Any pods matching these labels

24
00:01:03.050 --> 00:01:05.090
will be included in the deployment.

25
00:01:05.090 --> 00:01:10.000
In our case, it's looking for app column greeting labels.

26
00:01:10.000 --> 00:01:13.020
Template describes the pods that'll be created.

27
00:01:13.020 --> 00:01:14.070
Most of the other entries are similar

28
00:01:14.070 --> 00:01:16.010
to pod specification.

29
00:01:16.010 --> 00:01:18.070
Ports is a new informational entry here

30
00:01:18.070 --> 00:01:23.020
that provides a list of ports to expose from the container.

31
00:01:23.020 --> 00:01:25.010
Kubernetes pods are ephemeral

32
00:01:25.010 --> 00:01:27.020
and so an IP address assigned to them

33
00:01:27.020 --> 00:01:31.000
cannot be relied upon for the applications to communicate.

34
00:01:31.000 --> 00:01:34.010
Kubernetes service provides a logical collection of pods

35
00:01:34.010 --> 00:01:36.020
and provides a well-defined API

36
00:01:36.020 --> 00:01:39.020
that allows different applications to communicate.

37
00:01:39.020 --> 00:01:42.090
It also provides a simple L4 DNS-based load balancing

38
00:01:42.090 --> 00:01:45.080
for the pods belonging to the service.

39
00:01:45.080 --> 00:01:48.030
The pods are loosely coupled using labels.

40
00:01:48.030 --> 00:01:51.080
A service defines a label that must exist on a pod

41
00:01:51.080 --> 00:01:54.090
in order to be included as part of the service.

42
00:01:54.090 --> 00:01:57.030
On the other hand, deployment will create pods

43
00:01:57.030 --> 00:01:59.010
using those labels.

44
00:01:59.010 --> 00:02:00.090
The pods belonging to a service

45
00:02:00.090 --> 00:02:03.050
can be dynamically scaled up and down,

46
00:02:03.050 --> 00:02:05.020
but the service name continues to provide

47
00:02:05.020 --> 00:02:09.030
a stable endpoint for other services to refer.

48
00:02:09.030 --> 00:02:12.080
A Kubernetes service can be exposed outside the cluster.

49
00:02:12.080 --> 00:02:14.050
This can be done using a Cloud provider

50
00:02:14.050 --> 00:02:19.030
specific load balancer or a specific IP address.

51
00:02:19.030 --> 00:02:22.010
That is how a sample Kubernetes service manifest

52
00:02:22.010 --> 00:02:23.010
might look like.

53
00:02:23.010 --> 00:02:25.000
Let's walk through this.

54
00:02:25.000 --> 00:02:27.030
Usual apiVersion.

55
00:02:27.030 --> 00:02:30.040
Kind indicates this is a service object.

56
00:02:30.040 --> 00:02:33.080
Selector defines the labels that must match on the pods

57
00:02:33.080 --> 00:02:36.010
to be included in the service.

58
00:02:36.010 --> 00:02:37.050
Any traffic to the service

59
00:02:37.050 --> 00:02:41.010
is then routed to the included pods.

60
00:02:41.010 --> 00:02:44.070
The exact set of labels are specified as key value.

61
00:02:44.070 --> 00:02:49.000
Ports provide port information for the service.

62
00:02:49.000 --> 00:02:52.080
Port is the port that will be exposed by the service

63
00:02:52.080 --> 00:02:56.000
and targetPort is a number or a name of the port

64
00:02:56.000 --> 00:03:00.040
to access on the pods targeted by the service.

65
00:03:00.040 --> 00:03:03.000
A number is mentioned in this case.

66
00:03:03.000 --> 00:03:06.020
Let's look at some other useful Kubernetes resources.

67
00:03:06.020 --> 00:03:09.000
A DaemonSet ensures that all or some nodes

68
00:03:09.000 --> 00:03:11.060
in the cluster run a copy of a pod.

69
00:03:11.060 --> 00:03:13.040
As nodes are added to the cluster,

70
00:03:13.040 --> 00:03:14.090
pods are added to them.

71
00:03:14.090 --> 00:03:16.090
As nodes are removed from the cluster,

72
00:03:16.090 --> 00:03:18.090
those pods are garbage collected.

73
00:03:18.090 --> 00:03:23.030
Deleting a DaemonSet will clean up the pods it created.

74
00:03:23.030 --> 00:03:25.030
A job creates one or more pods

75
00:03:25.030 --> 00:03:26.090
and ensures that a specified number

76
00:03:26.090 --> 00:03:29.000
of them successfully terminate.

77
00:03:29.000 --> 00:03:31.020
As pods successfully complete,

78
00:03:31.020 --> 00:03:34.000
the job tracks the successful completions.

79
00:03:34.000 --> 00:03:36.000
When a specified number of successful completions

80
00:03:36.000 --> 00:03:38.080
is reached, the job itself is complete.

81
00:03:38.080 --> 00:03:42.070
Deleting a job will clean up the pods it created.

82
00:03:42.070 --> 00:03:45.070
A CronJob creates jobs on a time-based schedule.

83
00:03:45.070 --> 00:03:50.030
One CronJob object is like one line of a crontab file.

84
00:03:50.030 --> 00:03:53.050
It runs a job periodically on a given schedule,

85
00:03:53.050 --> 00:03:55.090
written in Cron format.

86
00:03:55.090 --> 00:03:58.060
StatefulSets is a workloads API object used

87
00:03:58.060 --> 00:04:00.060
to manage stateful applications.

88
00:04:00.060 --> 00:04:02.060
It provides guarantees about the ordering

89
00:04:02.060 --> 00:04:04.050
and uniqueness of those pods.

90
00:04:04.050 --> 00:04:05.090
For example, this is useful

91
00:04:05.090 --> 00:04:08.060
for running database workloads in containers.

92
00:04:08.060 --> 00:04:10.040
There are many other resources in Kubernetes

93
00:04:10.040 --> 00:04:13.000
that can be seen on Kubernetes.io.

