WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Instructor] We learned about the purpose of orchestration

2
00:00:02.070 --> 00:00:05.030
and how Kubernetes is one of the open-source solutions

3
00:00:05.030 --> 00:00:06.060
that fits there.

4
00:00:06.060 --> 00:00:09.050
Let's learn more about it in a bit more detail.

5
00:00:09.050 --> 00:00:12.040
First of all, Kubernetes is an ancient Greek word

6
00:00:12.040 --> 00:00:15.090
for helmsman, the person who steers the ship.

7
00:00:15.090 --> 00:00:17.030
As we explained earlier,

8
00:00:17.030 --> 00:00:18.010
Kubernetes is

9
00:00:18.010 --> 00:00:20.080
an open-source container orchestration project.

10
00:00:20.080 --> 00:00:24.020
Typically, our applications consist of multiple containers

11
00:00:24.020 --> 00:00:26.040
and runs on a cluster of machines.

12
00:00:26.040 --> 00:00:29.000
Kubernetes helps with managing the cluster of machines

13
00:00:29.000 --> 00:00:31.050
and scheduling containers on these machines.

14
00:00:31.050 --> 00:00:35.040
These are the two primary requirements amongst many others.

15
00:00:35.040 --> 00:00:38.020
Because it's open-source, it can run on your desktop,

16
00:00:38.020 --> 00:00:41.030
in the cloud, or on-prem.

17
00:00:41.030 --> 00:00:43.070
Kubernetes is a CNCF project.

18
00:00:43.070 --> 00:00:46.090
CNCF is a Cloud Native Computing Foundation

19
00:00:46.090 --> 00:00:48.080
is a vendor-neutral body that defines

20
00:00:48.080 --> 00:00:51.090
how cloud native applications can be built.

21
00:00:51.090 --> 00:00:54.000
Kubernetes is one of the projects there

22
00:00:54.000 --> 00:00:55.030
and there are many other projects

23
00:00:55.030 --> 00:00:59.010
such as Prometheus, Envoy, and containerd.

24
00:00:59.010 --> 00:01:01.060
The project is one of the most active open-source

25
00:01:01.060 --> 00:01:04.050
projects by the number of stars, forks, comments,

26
00:01:04.050 --> 00:01:05.090
and contributors.

27
00:01:05.090 --> 00:01:06.090
It is of course available

28
00:01:06.090 --> 00:01:11.060
at github.com/kubernetes/kubernetes

29
00:01:11.060 --> 00:01:15.000
You work with Kubernetes, you use Kubernetes API objects

30
00:01:15.000 --> 00:01:17.080
to describe your cluster's desired state.

31
00:01:17.080 --> 00:01:20.090
What applications or other workloads you want to run,

32
00:01:20.090 --> 00:01:24.030
what container images they use, the number of replicas,

33
00:01:24.030 --> 00:01:27.030
what network and Discord sources you want to make available

34
00:01:27.030 --> 00:01:28.080
and more.

35
00:01:28.080 --> 00:01:31.020
You set your desired state by creating objects

36
00:01:31.020 --> 00:01:33.010
using the Kubernetes API,

37
00:01:33.010 --> 00:01:35.090
typically via the command line interface, kubectl,

38
00:01:35.090 --> 00:01:37.080
or kube control.

39
00:01:37.080 --> 00:01:42.030
These API objects are also called as Kubernetes resources,

40
00:01:42.030 --> 00:01:44.090
typically a resource manifest file providing complete

41
00:01:44.090 --> 00:01:48.060
description of the object will be passed to the CLI.

42
00:01:48.060 --> 00:01:51.010
The CLI will then read the manifest and issue the

43
00:01:51.010 --> 00:01:54.080
command to the cluster to create or update these resources.

44
00:01:54.080 --> 00:01:58.050
You can also use the Kubernetes API directly to interact

45
00:01:58.050 --> 00:02:02.090
with the cluster, and set or modify the desired state.

46
00:02:02.090 --> 00:02:05.070
Once you have set your desired state, Kubernetes works

47
00:02:05.070 --> 00:02:09.030
to make the cluster's current state match the desired state.

48
00:02:09.030 --> 00:02:10.040
To do so,

49
00:02:10.040 --> 00:02:13.050
Kubernetes performs a variety of tasks automatically

50
00:02:13.050 --> 00:02:16.070
such as starting or restarting containers,

51
00:02:16.070 --> 00:02:19.060
scaling the number of replicas of a given application,

52
00:02:19.060 --> 00:02:20.070
and more.

53
00:02:20.070 --> 00:02:23.020
We'll discuss how Kubernetes achieves this later

54
00:02:23.020 --> 00:02:25.010
in the course.

55
00:02:25.010 --> 00:02:27.080
Kubernetes provides basic monitoring, logging, and

56
00:02:27.080 --> 00:02:29.070
health checking for your containers.

57
00:02:29.070 --> 00:02:31.070
So if any of the containers are not meeting

58
00:02:31.070 --> 00:02:33.000
the health requirements,

59
00:02:33.000 --> 00:02:35.060
then they are automatically abolished.

60
00:02:35.060 --> 00:02:38.060
Kubernetes also provides a rich ecosystem of tools,

61
00:02:38.060 --> 00:02:40.000
and that's what makes Kubernetes

62
00:02:40.000 --> 00:02:43.010
that much more a compelling option.

63
00:02:43.010 --> 00:02:45.020
Let's look at some of the Kubernetes resources

64
00:02:45.020 --> 00:02:47.050
that we're going to learn about in this course.

65
00:02:47.050 --> 00:02:50.090
A Pod is the basic building block of Kubernetes.

66
00:02:50.090 --> 00:02:53.060
The smallest and simplest unit in the Kubernetes

67
00:02:53.060 --> 00:02:57.050
object model that you create or deploy.

68
00:02:57.050 --> 00:03:00.020
A Pod might consist of either a single container

69
00:03:00.020 --> 00:03:02.010
or a small number of containers

70
00:03:02.010 --> 00:03:05.080
that are tightly coupled and that share resources.

71
00:03:05.080 --> 00:03:07.090
Containers in the Pod can communicate to each other

72
00:03:07.090 --> 00:03:11.060
using localhost and share the file system as well.

73
00:03:11.060 --> 00:03:14.090
These containers form a single cohesive unit of service,

74
00:03:14.090 --> 00:03:17.080
for example, a web server serving files

75
00:03:17.080 --> 00:03:22.030
with a separate side-car container refreshing the cache.

76
00:03:22.030 --> 00:03:24.090
The one-container-per-pod model is the most common

77
00:03:24.090 --> 00:03:26.040
Kubernetes use-case.

78
00:03:26.040 --> 00:03:28.080
In this case, you can think of a Pod as a wrapper

79
00:03:28.080 --> 00:03:32.060
around a single container and Kubernetes manages the Pod

80
00:03:32.060 --> 00:03:35.030
rather than the containers directly.

81
00:03:35.030 --> 00:03:37.060
Here is how a sample Kubernetes Pod manifest

82
00:03:37.060 --> 00:03:39.000
might look like.

83
00:03:39.000 --> 00:03:40.060
Let's walk through this.

84
00:03:40.060 --> 00:03:44.010
All Kubernetes resources must have apiVersion and

85
00:03:44.010 --> 00:03:45.080
kind fields.

86
00:03:45.080 --> 00:03:48.090
apiVersion is a strength that identifies the version

87
00:03:48.090 --> 00:03:51.020
of the schema the object should have.

88
00:03:51.020 --> 00:03:53.040
V1 in our case.

89
00:03:53.040 --> 00:03:56.080
Kind is a string that identifies the schema this object

90
00:03:56.080 --> 00:03:57.080
should have.

91
00:03:57.080 --> 00:03:59.070
Or, the Kubernetes object type.

92
00:03:59.070 --> 00:04:02.040
Pod, in our case.

93
00:04:02.040 --> 00:04:06.030
Metadata is a required field for all Kubernetes objects.

94
00:04:06.030 --> 00:04:09.060
The only mandatory field in that is name.

95
00:04:09.060 --> 00:04:12.010
This field allows a Pod to be uniquely identified

96
00:04:12.010 --> 00:04:13.030
amongst others.

97
00:04:13.030 --> 00:04:17.020
You can also specify name-space and view-ID.

98
00:04:17.020 --> 00:04:20.030
Labels is a map of string keys and values

99
00:04:20.030 --> 00:04:24.000
that can be used to organize and categorize objects.

100
00:04:24.000 --> 00:04:27.030
In our case, app colon greeting is a label attached

101
00:04:27.030 --> 00:04:29.010
to this Pod.

102
00:04:29.010 --> 00:04:31.020
Spec stands for specification

103
00:04:31.020 --> 00:04:34.070
and defines the desired state of an object.

104
00:04:34.070 --> 00:04:37.030
Containers define the list of containers belonging

105
00:04:37.030 --> 00:04:38.040
to the Pod.

106
00:04:38.040 --> 00:04:42.000
This is a static list and cannot be updated at run-time.

107
00:04:42.000 --> 00:04:44.030
We will use two fields in our case.

108
00:04:44.030 --> 00:04:48.010
Name gives the unique name to a container in the Pod.

109
00:04:48.010 --> 00:04:50.060
Image is the name of the docker image.

110
00:04:50.060 --> 00:04:52.060
This is the image of our Java application

111
00:04:52.060 --> 00:04:54.000
that was built earlier.

