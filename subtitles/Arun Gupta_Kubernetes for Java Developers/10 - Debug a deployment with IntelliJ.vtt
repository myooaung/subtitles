WEBVTT
1
00:00:00.000 --> 00:00:02.020
- As a Java developer, you're always dealing

2
00:00:02.020 --> 00:00:05.040
with tools like NetBeans, IntelliJ, and Eclipse,

3
00:00:05.040 --> 00:00:08.050
and you're used to debugging your application

4
00:00:08.050 --> 00:00:09.090
in those IDE's.

5
00:00:09.090 --> 00:00:11.050
Now, how do I bring those skillsets

6
00:00:11.050 --> 00:00:13.040
when I'm building my application

7
00:00:13.040 --> 00:00:15.040
in Kubernetes, and deploying in them?

8
00:00:15.040 --> 00:00:17.010
This section will explain

9
00:00:17.010 --> 00:00:19.010
how you can debug a kubernetes pod,

10
00:00:19.010 --> 00:00:21.010
if a cluster is running on your local machine.

11
00:00:21.010 --> 00:00:24.080
So, first thing first, deploy our Helm chart.

12
00:00:24.080 --> 00:00:28.090
So, let's go to our manifest charts directory,

13
00:00:28.090 --> 00:00:33.000
and now, I'm going to install my helm chart.

14
00:00:33.000 --> 00:00:38.030
Helm, install, name, myapp, myapp.

15
00:00:38.030 --> 00:00:40.060
And this deploys my application.

16
00:00:40.060 --> 00:00:46.050
Let's confirm it.

17
00:00:46.050 --> 00:00:50.020
We, of corse, have to say get before this.

18
00:00:50.020 --> 00:00:52.040
And so we can see all the resources

19
00:00:52.040 --> 00:00:54.000
have been successfully deployed.

20
00:00:54.000 --> 00:00:55.070
So, we are in good shape over there.

21
00:00:55.070 --> 00:00:56.090
Now let's go to IntelliJ,

22
00:00:56.090 --> 00:00:58.030
for example, in this case,

23
00:00:58.030 --> 00:01:02.020
and set up a break point over there.

24
00:01:02.020 --> 00:01:04.000
Here's my mavin project

25
00:01:04.000 --> 00:01:05.090
that is in IntelliJ here, essentially.

26
00:01:05.090 --> 00:01:07.030
And here is my greeting controller.

27
00:01:07.030 --> 00:01:09.000
These are my main business logic.

28
00:01:09.000 --> 00:01:10.060
Remember this is a very

29
00:01:10.060 --> 00:01:12.010
intentionally simple application.

30
00:01:12.010 --> 00:01:13.090
So now, what I'm going to do is

31
00:01:13.090 --> 00:01:16.030
I'm just going to set up a break point over here.

32
00:01:16.030 --> 00:01:18.040
That's the first thing I need to do.

33
00:01:18.040 --> 00:01:19.090
The second thing I need to do is

34
00:01:19.090 --> 00:01:21.070
I need to set up IntelliJ

35
00:01:21.070 --> 00:01:24.070
so that it can connect to a remote JVM.

36
00:01:24.070 --> 00:01:29.060
So, I go to run, debug,

37
00:01:29.060 --> 00:01:34.020
edit the configuration here,

38
00:01:34.020 --> 00:01:37.020
add a new remote config here,

39
00:01:37.020 --> 00:01:42.020
and we are going to call it as Kubernetes,

40
00:01:42.020 --> 00:01:44.060
and take everything else as default.

41
00:01:44.060 --> 00:01:46.090
It says local host 5005.

42
00:01:46.090 --> 00:01:49.050
That's what is going to connect to our JVM.

43
00:01:49.050 --> 00:01:51.080
And it expects that this is the command

44
00:01:51.080 --> 00:01:54.040
that's going to be in your Docker image essentially.

45
00:01:54.040 --> 00:01:56.010
Now if you remember from our Docker file

46
00:01:56.010 --> 00:01:57.020
on how we build this image,

47
00:01:57.020 --> 00:01:58.090
this is exactly the command that we took

48
00:01:58.090 --> 00:02:01.060
and inserted into our Docker file

49
00:02:01.060 --> 00:02:04.010
as underscore java underscore options.

50
00:02:04.010 --> 00:02:05.030
So that's sort of the way

51
00:02:05.030 --> 00:02:06.020
by which you are connecting

52
00:02:06.020 --> 00:02:07.060
your JVM and your Docker file

53
00:02:07.060 --> 00:02:09.070
and making sure the options go past through.

54
00:02:09.070 --> 00:02:12.070
And then, in the service

55
00:02:12.070 --> 00:02:15.030
and in the deployment, we were exposing those ports

56
00:02:15.030 --> 00:02:17.050
so that now they are accessible

57
00:02:17.050 --> 00:02:19.000
to the outside world as well.

58
00:02:19.000 --> 00:02:20.090
So let's hit on debug here.

59
00:02:20.090 --> 00:02:24.050
And IntelliJ is now connected to the target PM

60
00:02:24.050 --> 00:02:25.080
and is waiting for somebody

61
00:02:25.080 --> 00:02:28.030
to initiate a request on that, okay.

62
00:02:28.030 --> 00:02:32.050
So, in our terminal we're going to access our service,

63
00:02:32.050 --> 00:02:36.020
and we're going to say curl http

64
00:02:36.020 --> 00:02:39.030
local host colon 8080 hello

65
00:02:39.030 --> 00:02:41.010
This invokes the service.

66
00:02:41.010 --> 00:02:42.060
As soon as we invoke the service,

67
00:02:42.060 --> 00:02:46.070
we can see our shift automatically focus to IntelliJ.

68
00:02:46.070 --> 00:02:48.070
This is because IntelliJ now received the request

69
00:02:48.070 --> 00:02:51.080
that, hey, someone is talking to me on the remote JVM,

70
00:02:51.080 --> 00:02:55.030
and it shows the complete pack for you

71
00:02:55.030 --> 00:02:58.030
on how the java core hierarchy looks like.

72
00:02:58.030 --> 00:03:00.040
Now in our case, we of corse,

73
00:03:00.040 --> 00:03:02.010
don't have any variables defined,

74
00:03:02.010 --> 00:03:04.080
but if there were, then it'd show you all the class fields.

75
00:03:04.080 --> 00:03:06.080
You could essentially use your

76
00:03:06.080 --> 00:03:09.070
standard java debugging tools to talk through this,

77
00:03:09.070 --> 00:03:11.090
to walk through this, to trace through this,

78
00:03:11.090 --> 00:03:14.040
see all the values and then

79
00:03:14.040 --> 00:03:16.080
debug your coverness application very easily.

80
00:03:16.080 --> 00:03:19.070
Now at this point in time, I can just say

81
00:03:19.070 --> 00:03:21.060
go ahead, run the application.

82
00:03:21.060 --> 00:03:24.010
So, of corse, the application execution finished,

83
00:03:24.010 --> 00:03:25.090
but let's go back to our terminal

84
00:03:25.090 --> 00:03:28.030
and see what output is over there.

85
00:03:28.030 --> 00:03:31.050
As expected, output is certainly hello.

86
00:03:31.050 --> 00:03:36.010
So, once again, now we saw how we can debug our java

87
00:03:36.010 --> 00:03:38.020
application running as a Kubernetes pod

88
00:03:38.020 --> 00:03:42.000
deployed in a local Kubernetes cluster.

