WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] Deploying your application to Kubernetes

2
00:00:02.060 --> 00:00:05.020
should feel like deploying one single application

3
00:00:05.020 --> 00:00:08.000
as opposed to deploying multiple manifest files,

4
00:00:08.000 --> 00:00:09.040
one at a time.

5
00:00:09.040 --> 00:00:12.000
This section will explain what are Helm charts

6
00:00:12.000 --> 00:00:15.050
and how they can be used to deploy Kubernetes applications.

7
00:00:15.050 --> 00:00:18.010
Kubernetes Helm offers a simple way to package

8
00:00:18.010 --> 00:00:19.080
everything into one application

9
00:00:19.080 --> 00:00:23.030
and allow us to manage multiple releases of it.

10
00:00:23.030 --> 00:00:25.050
Helm packages multiple Kubernetes resources

11
00:00:25.050 --> 00:00:29.020
into a single logical deployment unit called charts.

12
00:00:29.020 --> 00:00:32.040
A Helm chart is simply a collection of YAML template files

13
00:00:32.040 --> 00:00:35.030
organized into a specific directory structure.

14
00:00:35.030 --> 00:00:39.020
Charts are somewhat analogous to DEB and RPM files.

15
00:00:39.020 --> 00:00:42.050
However, since they are text-based, charts are versionable

16
00:00:42.050 --> 00:00:46.020
and simple to maintain with familiar SCM tools.

17
00:00:46.020 --> 00:00:49.020
A single chart might be used to deploy something like

18
00:00:49.020 --> 00:00:51.090
See Our Greeting Card, or something more complex

19
00:00:51.090 --> 00:00:53.070
like a full web application

20
00:00:53.070 --> 00:00:56.060
consisting of multiple microservices.

21
00:00:56.060 --> 00:00:59.070
Installation of a Helm chart in the Kubernetes cluster

22
00:00:59.070 --> 00:01:01.010
is called a release.

23
00:01:01.010 --> 00:01:03.020
A single chart may be installed many times

24
00:01:03.020 --> 00:01:06.070
into the same cluster, and create many different releases,

25
00:01:06.070 --> 00:01:09.000
each with different configuration.

26
00:01:09.000 --> 00:01:10.060
For example, you can install

27
00:01:10.060 --> 00:01:12.020
three versions of an application

28
00:01:12.020 --> 00:01:14.040
by running Helm install three times,

29
00:01:14.040 --> 00:01:16.070
with a different release name.

30
00:01:16.070 --> 00:01:18.090
Helm is a tool that streamlines installing

31
00:01:18.090 --> 00:01:21.020
and managing of Kubernetes applications.

32
00:01:21.020 --> 00:01:26.020
Think of it like apt, yum or homebrew for Kubernetes.

33
00:01:26.020 --> 00:01:29.010
Let's learn some more Helm terminology.

34
00:01:29.010 --> 00:01:32.050
Helm charts may be stored on dedicated HTTP servers

35
00:01:32.050 --> 00:01:37.000
called chart repositories, or just repos.

36
00:01:37.000 --> 00:01:39.030
A repo is a simple HTTP server

37
00:01:39.030 --> 00:01:41.040
that can serve an indexed .yaml file

38
00:01:41.040 --> 00:01:43.090
that describes a batch of charts

39
00:01:43.090 --> 00:01:45.040
and provides information

40
00:01:45.040 --> 00:01:48.080
on where each chart can be downloaded from.

41
00:01:48.080 --> 00:01:52.050
A Helm client can point to zero of more chart repositories.

42
00:01:52.050 --> 00:01:54.070
By default Helm clients

43
00:01:54.070 --> 00:01:59.000
point to the stable official Kubernetes chart repository.

44
00:01:59.000 --> 00:02:01.070
Templates are Kubernetes configuration files in a chart

45
00:02:01.070 --> 00:02:03.030
that are templatized.

46
00:02:03.030 --> 00:02:04.050
Each configuration file

47
00:02:04.050 --> 00:02:07.010
goes through a template rendering engine in Helm

48
00:02:07.010 --> 00:02:10.010
to generate a corresponding Kubernetes manifest file.

49
00:02:10.010 --> 00:02:11.020
These files are then used

50
00:02:11.020 --> 00:02:14.090
to create Kubernetes resources in the cluster.

51
00:02:14.090 --> 00:02:17.090
Let's look at how a sample chart might look like.

52
00:02:17.090 --> 00:02:19.010
This is a directory structure

53
00:02:19.010 --> 00:02:21.090
of a Helm chart for our greeting application.

54
00:02:21.090 --> 00:02:24.040
Let's look at some of the files.

55
00:02:24.040 --> 00:02:26.090
The first one to look at is Chart.yaml.

56
00:02:26.090 --> 00:02:28.010
This is a YAML file

57
00:02:28.010 --> 00:02:30.080
and contains information about the chart.

58
00:02:30.080 --> 00:02:34.000
Let's look at individual fields in this file.

59
00:02:34.000 --> 00:02:36.010
apiVersion is a required field

60
00:02:36.010 --> 00:02:38.050
and defines the chart API version.

61
00:02:38.050 --> 00:02:41.020
For now its value is fixed at v1.

62
00:02:41.020 --> 00:02:44.070
Future versions of Helm may update this value.

63
00:02:44.070 --> 00:02:46.080
appVersion is an optional field

64
00:02:46.080 --> 00:02:49.090
and defines a version of the app that this contains.

65
00:02:49.090 --> 00:02:51.050
description is an optional

66
00:02:51.050 --> 00:02:54.020
single sentence description of this project.

67
00:02:54.020 --> 00:02:58.000
name is a required field and defines name of the chart.

68
00:02:58.000 --> 00:03:00.060
version is version number of the chart.

69
00:03:00.060 --> 00:03:03.070
It must follow the Semantic Versioning 2.0.0 standard.

70
00:03:03.070 --> 00:03:06.080
These version numbers are used as release markers.

71
00:03:06.080 --> 00:03:09.010
Packages in repositories are identified

72
00:03:09.010 --> 00:03:12.020
by name, plus version, for example,

73
00:03:12.020 --> 00:03:19.000
this chart will be identified as greeting-0.1.0.tgz.

74
00:03:19.000 --> 00:03:23.010
Let's look at values.yaml file next.

75
00:03:23.010 --> 00:03:25.060
values.yaml is one of the ways by which

76
00:03:25.060 --> 00:03:28.080
predefined values for templates can be specified.

77
00:03:28.080 --> 00:03:31.030
These are specified using nested yaml syntax

78
00:03:31.030 --> 00:03:33.010
and accessible in the template files

79
00:03:33.010 --> 00:03:35.000
using values object.

80
00:03:35.000 --> 00:03:38.080
We will see how this object is being used in the next slide.

81
00:03:38.080 --> 00:03:40.080
Let's take a look at one of the template files,

82
00:03:40.080 --> 00:03:43.090
deployment file for greeting in this case.

83
00:03:43.090 --> 00:03:45.090
If you notice, this file is very much like

84
00:03:45.090 --> 00:03:47.060
a Kubernetes configuration file

85
00:03:47.060 --> 00:03:50.030
but allows template language to be specified.

86
00:03:50.030 --> 00:03:53.000
Values object is used to refer to the values

87
00:03:53.000 --> 00:03:55.040
specified in values.yaml.

88
00:03:55.040 --> 00:03:57.030
This allows us to specify common values

89
00:03:57.030 --> 00:04:01.000
such as port numbers and replica counts to be specified

90
00:04:01.000 --> 00:04:03.070
at a central location, and then used inside

91
00:04:03.070 --> 00:04:06.070
Kubernetes configuration file, using templates.

92
00:04:06.070 --> 00:04:10.050
This promotes don't repeat yourself, or DRY design pattern,

93
00:04:10.050 --> 00:04:12.030
reduces deployment complexity,

94
00:04:12.030 --> 00:04:16.020
and also improves developer productivity.

95
00:04:16.020 --> 00:04:19.010
Finally, let's take a look at Helm 2 architecture

96
00:04:19.010 --> 00:04:21.080
and learn how a chart is converted into a release.

97
00:04:21.080 --> 00:04:24.050
This architecture has already evolved for Helm 3,

98
00:04:24.050 --> 00:04:27.090
so please refer to the latest documentation for that.

99
00:04:27.090 --> 00:04:31.090
Our starting point, either way, is a Kubernetes cluster.

100
00:04:31.090 --> 00:04:34.050
Helm has two parts, client which is also called

101
00:04:34.050 --> 00:04:38.010
as a Helm client, and Server which is also called as tiller.

102
00:04:38.010 --> 00:04:41.030
Tiller run inside of your Kubernetes cluster

103
00:04:41.030 --> 00:04:43.070
and manages releases of your charts,

104
00:04:43.070 --> 00:04:45.080
also the installations of your chart.

105
00:04:45.080 --> 00:04:48.010
Helm runs on your laptop, CI/CD,

106
00:04:48.010 --> 00:04:50.070
or wherever you want it to run.

107
00:04:50.070 --> 00:04:52.050
Charts can be stored on disk,

108
00:04:52.050 --> 00:04:55.040
or, fresh from remote chart repositories

109
00:04:55.040 --> 00:04:58.050
like Debian or Red Hat packages.

110
00:04:58.050 --> 00:04:59.090
The Helm client and server

111
00:04:59.090 --> 00:05:01.090
are written in the Go programming language

112
00:05:01.090 --> 00:05:05.090
and use the gRPC protocol suite to interact with each other.

113
00:05:05.090 --> 00:05:09.090
Currently that library uses RESTPlus JSON.

114
00:05:09.090 --> 00:05:12.000
Tiller server stores configuration information

115
00:05:12.000 --> 00:05:16.010
about charts using ConfigMap in Kubernetes.

116
00:05:16.010 --> 00:05:19.060
The client sends the interpolated configs to tiller.

117
00:05:19.060 --> 00:05:21.030
It uses the configuration data

118
00:05:21.030 --> 00:05:23.080
and communicates with Kubernetes API server

119
00:05:23.080 --> 00:05:26.050
to create a new release of the chart.

120
00:05:26.050 --> 00:05:28.040
This explains how charts are deployed

121
00:05:28.040 --> 00:05:31.040
as releases in a Kubernetes cluster.

122
00:05:31.040 --> 00:05:34.080
At high level, Helm client manages charts

123
00:05:34.080 --> 00:05:38.000
and Helm server manages releases.

