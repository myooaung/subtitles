WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] Now that you understand why

2
00:00:01.090 --> 00:00:04.010
Kubernetes is required, what does it take

3
00:00:04.010 --> 00:00:06.040
for a Java developer to package and deploy

4
00:00:06.040 --> 00:00:08.070
their applications in Kubernetes.

5
00:00:08.070 --> 00:00:11.040
Let's take a look at what Kubernetes workflow

6
00:00:11.040 --> 00:00:13.090
for Java developers look like.

7
00:00:13.090 --> 00:00:16.040
You build and package your Java application

8
00:00:16.040 --> 00:00:19.090
using the usual tools, such as Maven or Gradle.

9
00:00:19.090 --> 00:00:22.020
This will typically be a fad jar that has

10
00:00:22.020 --> 00:00:24.020
all the dependencies included.

11
00:00:24.020 --> 00:00:26.060
In case of a war file, you need to think about

12
00:00:26.060 --> 00:00:29.010
how to get all the dependencies such as Tomcat

13
00:00:29.010 --> 00:00:31.080
or whatever your application server is.

14
00:00:31.080 --> 00:00:34.070
Kubernetes deploy and manage containers,

15
00:00:34.070 --> 00:00:36.020
so first thing you need to do is

16
00:00:36.020 --> 00:00:39.020
create a Docker image out of your application.

17
00:00:39.020 --> 00:00:41.010
This Docker image will need to be published

18
00:00:41.010 --> 00:00:43.060
on a Docker repository such that it can

19
00:00:43.060 --> 00:00:46.030
be downloaded to the Kubernetes cluster.

20
00:00:46.030 --> 00:00:50.020
This could be Docker Hub, Amazon Elastic Container Registry

21
00:00:50.020 --> 00:00:53.060
or any other registry that you have access to.

22
00:00:53.060 --> 00:00:56.060
Most common way of deploying to Kubernetes

23
00:00:56.060 --> 00:00:59.000
is to use an application manifest.

24
00:00:59.000 --> 00:01:01.020
We will cover details about what does this

25
00:01:01.020 --> 00:01:03.070
application manifest look like later.

26
00:01:03.070 --> 00:01:05.070
An application will create one or more

27
00:01:05.070 --> 00:01:08.060
Kubernetes resources, and so it is also called

28
00:01:08.060 --> 00:01:10.080
as Resource Manifest.

29
00:01:10.080 --> 00:01:13.090
This manifest uses Kubernetes API to create

30
00:01:13.090 --> 00:01:15.040
Kubernetes resources.

31
00:01:15.040 --> 00:01:17.030
Multiple types of Kubernetes resources

32
00:01:17.030 --> 00:01:20.080
can be created, and we'll discuss them in detail later.

33
00:01:20.080 --> 00:01:23.030
This manifest will define the API version,

34
00:01:23.030 --> 00:01:25.080
type of the resource, refer to the Docker Image

35
00:01:25.080 --> 00:01:28.060
if needed, the number of instances of the container,

36
00:01:28.060 --> 00:01:32.070
metadata about the resource, and other information.

37
00:01:32.070 --> 00:01:34.070
Now, you need a Kubernetes Cluster

38
00:01:34.070 --> 00:01:36.080
where these resources can be created.

39
00:01:36.080 --> 00:01:38.060
We'll discuss different options to create

40
00:01:38.060 --> 00:01:41.010
Kubernetes Cluster later, but you need access

41
00:01:41.010 --> 00:01:43.020
to a Kubernetes Cluster where the resources

42
00:01:43.020 --> 00:01:44.060
can be created.

43
00:01:44.060 --> 00:01:46.020
Either you can create this yourself

44
00:01:46.020 --> 00:01:49.010
on your development machine, in your data center,

45
00:01:49.010 --> 00:01:50.020
or in the cloud.

46
00:01:50.020 --> 00:01:51.090
Depending upon your team, there may

47
00:01:51.090 --> 00:01:54.000
be a separate ops team that can create

48
00:01:54.000 --> 00:01:55.080
the cluster, and give you credentials

49
00:01:55.080 --> 00:01:57.070
to access that cluster.

50
00:01:57.070 --> 00:02:01.010
Last step is to deploy these Kubernetes Resources

51
00:02:01.010 --> 00:02:02.090
in the cluster.

52
00:02:02.090 --> 00:02:05.030
There are multiple ways to deploy these resources

53
00:02:05.030 --> 00:02:07.080
from CLI to deployment pipelines, and will be

54
00:02:07.080 --> 00:02:10.030
covered in detail in this course.

55
00:02:10.030 --> 00:02:12.030
But in general, this is the workflow for

56
00:02:12.030 --> 00:02:13.050
Java Developers.

57
00:02:13.050 --> 00:02:15.070
You packet Java application,

58
00:02:15.070 --> 00:02:18.010
create and publish Docker image,

59
00:02:18.010 --> 00:02:20.070
create Kubernetes Manifest,

60
00:02:20.070 --> 00:02:22.090
have access to a Kubernetes Cluster,

61
00:02:22.090 --> 00:02:26.060
and deploy the manifest to create the resources.

62
00:02:26.060 --> 00:02:28.070
Most of these tasks can be automated

63
00:02:28.070 --> 00:02:30.060
as part of your bill cycle,

64
00:02:30.060 --> 00:02:33.040
so even though the number of steps may seem large,

65
00:02:33.040 --> 00:02:35.040
the workflow is pretty straight forward.

66
00:02:35.040 --> 00:02:38.040
Typically, Kubernetes Cluster will be created once,

67
00:02:38.040 --> 00:02:39.070
and rest of the steps will be done

68
00:02:39.070 --> 00:02:43.000
multiple times during development-deployment cycle.

