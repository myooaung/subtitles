WEBVTT
1
00:00:00.000 --> 00:00:01.030
- [Instructor] There are multiple ways

2
00:00:01.030 --> 00:00:03.040
to run Kubernetes in the Cloud.

3
00:00:03.040 --> 00:00:05.090
CNCF service shows that over 15% of

4
00:00:05.090 --> 00:00:08.040
Kubernetes runs in the AWS cloud.

5
00:00:08.040 --> 00:00:09.080
This section will introduce Amazon

6
00:00:09.080 --> 00:00:12.040
Elastic Container Service for Kubernetes,

7
00:00:12.040 --> 00:00:16.090
or EKS or, Amazon's Managed Kubernetes Service.

8
00:00:16.090 --> 00:00:19.020
Amazon Elastic Container Service for Kubernetes,

9
00:00:19.020 --> 00:00:23.030
Amazon EKS, makes it easy to deploy, manage, and scale

10
00:00:23.030 --> 00:00:27.010
containerized applications using Kubernetes on AWS.

11
00:00:27.010 --> 00:00:30.080
Amazon EKS runs the Kubernetes management infrastructure

12
00:00:30.080 --> 00:00:33.030
across multiple AWS availability zones,

13
00:00:33.030 --> 00:00:35.060
automatically detects and replaces

14
00:00:35.060 --> 00:00:37.060
unhealthy control plane nodes

15
00:00:37.060 --> 00:00:39.080
and provides on-demand upgrades and patching.

16
00:00:39.080 --> 00:00:43.020
You simply provision worker nodes, and connect them

17
00:00:43.020 --> 00:00:46.060
to the provided Amazon EKS endpoint.

18
00:00:46.060 --> 00:00:48.070
Secure and encrypted communication channels

19
00:00:48.070 --> 00:00:50.090
are automatically set up between your worker nodes

20
00:00:50.090 --> 00:00:52.090
and the managed control plane, making your

21
00:00:52.090 --> 00:00:57.010
infrastructure running on Amazon EKS secure by default.

22
00:00:57.010 --> 00:01:00.000
Amazon EKS is certified Kubernetes conformant,

23
00:01:00.000 --> 00:01:02.000
so you can use existing tooling and

24
00:01:02.000 --> 00:01:05.020
plugins from partners and the Kubernetes community.

25
00:01:05.020 --> 00:01:06.040
Applications running on any

26
00:01:06.040 --> 00:01:09.030
standard Kubernetes environment are fully compatible,

27
00:01:09.030 --> 00:01:13.020
and can be easily migrated to Amazon EKS.

28
00:01:13.020 --> 00:01:15.070
AWS actively works with the Kubernetes community,

29
00:01:15.070 --> 00:01:17.070
including making contributions to the communities

30
00:01:17.070 --> 00:01:20.090
core base that help Amazon EKS users

31
00:01:20.090 --> 00:01:25.050
take advantage of AWS services and features.

32
00:01:25.050 --> 00:01:27.030
Let's take a look at the user experience

33
00:01:27.030 --> 00:01:29.040
to create an EKS cluster.

34
00:01:29.040 --> 00:01:31.090
First, you need to provision an EKS cluster.

35
00:01:31.090 --> 00:01:35.050
This can be done using AWS Console, AWS CLI,

36
00:01:35.050 --> 00:01:37.050
Cloud Formation, or Terraform Templates,

37
00:01:37.050 --> 00:01:39.050
or other third-party tools.

38
00:01:39.050 --> 00:01:40.080
This creates a highly available

39
00:01:40.080 --> 00:01:42.060
and secure Kubernetes control plane

40
00:01:42.060 --> 00:01:45.000
straight across multiple availability zones.

41
00:01:45.000 --> 00:01:48.000
You don't need to think about your master configuration.

42
00:01:48.000 --> 00:01:51.000
This also includes things that give you sweats in the night.

43
00:01:51.000 --> 00:01:54.030
It's easily being monitored, encrypted, and backed up.

44
00:01:54.030 --> 00:01:56.080
Is your security configuration is right for your masters,

45
00:01:56.080 --> 00:01:59.040
it will deploy this in a way that is

46
00:01:59.040 --> 00:02:02.020
in accordance with best practices on AWS.

47
00:02:02.020 --> 00:02:04.090
The control plane runs in Amazon's account.

48
00:02:04.090 --> 00:02:07.040
Second, you need to deploy the worker node

49
00:02:07.040 --> 00:02:09.010
for your EKS cluster.

50
00:02:09.010 --> 00:02:11.010
This creates a Kubernetes data plane

51
00:02:11.010 --> 00:02:13.020
and where the application is deployed.

52
00:02:13.020 --> 00:02:16.030
Data plane runs in the users AWS account.

53
00:02:16.030 --> 00:02:18.060
This means that you control the instance type,

54
00:02:18.060 --> 00:02:20.060
the configuration, the army used,

55
00:02:20.060 --> 00:02:23.010
the network configuration in your EPC,

56
00:02:23.010 --> 00:02:25.010
security groups, access control lists,

57
00:02:25.010 --> 00:02:26.050
and everything else.

58
00:02:26.050 --> 00:02:29.050
You can use Spot instances or Reserved instances.

59
00:02:29.050 --> 00:02:31.090
They are your instances.

60
00:02:31.090 --> 00:02:33.090
Finally, you need to connect

61
00:02:33.090 --> 00:02:35.090
the data plane and the control plane.

62
00:02:35.090 --> 00:02:38.030
This creates the completed EKS cluster.

63
00:02:38.030 --> 00:02:41.020
This entire workflow of creating control plane,

64
00:02:41.020 --> 00:02:42.070
creating data plane, and connecting

65
00:02:42.070 --> 00:02:44.060
the two together is offered as a

66
00:02:44.060 --> 00:02:47.010
seamless experience by a third party tool.

67
00:02:47.010 --> 00:02:48.090
One such tool available in the open source

68
00:02:48.090 --> 00:02:50.050
is EKSctl.

69
00:02:50.050 --> 00:02:52.070
This tool is created by Weaveworks,

70
00:02:52.070 --> 00:02:55.020
and will be used later in this course.

71
00:02:55.020 --> 00:02:57.050
Now, you can deploy your applications

72
00:02:57.050 --> 00:02:59.080
to this Kubernetes cluster.

73
00:02:59.080 --> 00:03:02.010
In AWS, identity an access management

74
00:03:02.010 --> 00:03:05.060
defines how AWS resources can be accessed securely.

75
00:03:05.060 --> 00:03:08.030
Because Amazon is hosting Kubernetes as a service,

76
00:03:08.030 --> 00:03:10.020
there's a need to provide authentication

77
00:03:10.020 --> 00:03:12.060
on the API endpoint with IAM.

78
00:03:12.060 --> 00:03:15.030
Let's dig into this, how this works.

79
00:03:15.030 --> 00:03:17.070
AWS IAM authenticator is an open source project

80
00:03:17.070 --> 00:03:21.000
in SIG AWS in the Kubernetes community,

81
00:03:21.000 --> 00:03:23.020
and helps with passing AWS identity.

82
00:03:23.020 --> 00:03:25.010
So, when a Kubectl call is made,

83
00:03:25.010 --> 00:03:27.070
let's say get pods, IAM identity

84
00:03:27.070 --> 00:03:30.020
is passed along with Kubernetes call.

85
00:03:30.020 --> 00:03:32.040
On the back end, Kubernetes verifies

86
00:03:32.040 --> 00:03:36.000
the IAM identity with AWS auth service.

87
00:03:36.000 --> 00:03:38.030
This is purely authentication.

88
00:03:38.030 --> 00:03:39.070
The authentication response is then

89
00:03:39.070 --> 00:03:41.070
sent back to Kubernetes, and Kubernetes

90
00:03:41.070 --> 00:03:43.090
and checks it's internal R back mapping

91
00:03:43.090 --> 00:03:45.060
for the authorization.

92
00:03:45.060 --> 00:03:48.000
This generates if my original get pods call

93
00:03:48.000 --> 00:03:50.050
was allowed or denied.

94
00:03:50.050 --> 00:03:54.010
Finally, Kubernetes approves or denies a request.

95
00:03:54.010 --> 00:03:55.090
Let's talk a little bit more about

96
00:03:55.090 --> 00:03:58.030
some other Highlights of Amazon EKS.

97
00:03:58.030 --> 00:04:01.010
Amazon EKS makes it easy to update

98
00:04:01.010 --> 00:04:03.050
running clusters to the latest Kubernetes version

99
00:04:03.050 --> 00:04:06.040
without needing to manage the update process.

100
00:04:06.040 --> 00:04:08.070
Kubernetes version updates are done in place,

101
00:04:08.070 --> 00:04:10.080
removing the need to create new clusters,

102
00:04:10.080 --> 00:04:14.010
or migrate applications to a new cluster.

103
00:04:14.010 --> 00:04:16.010
EKS give you flexibility and control

104
00:04:16.010 --> 00:04:18.020
over what instances you can run.

105
00:04:18.020 --> 00:04:20.050
Because of this flexibility, for example,

106
00:04:20.050 --> 00:04:22.000
it's super easy to get started

107
00:04:22.000 --> 00:04:24.030
with machine learning work loads on EKS.

108
00:04:24.030 --> 00:04:27.040
To support this, we have a dedicated GPU army

109
00:04:27.040 --> 00:04:30.000
that makes it easy to run Kuda framework workloads

110
00:04:30.000 --> 00:04:32.020
on P2 and P3 instances.

111
00:04:32.020 --> 00:04:34.030
This is in the AWS marketplace,

112
00:04:34.030 --> 00:04:35.080
you can subscribe, and you can

113
00:04:35.080 --> 00:04:37.050
check these nodes into your cluster,

114
00:04:37.050 --> 00:04:40.030
and go build your next Skynet on EKS.

115
00:04:40.030 --> 00:04:42.060
EKS also gives you flexibility

116
00:04:42.060 --> 00:04:44.060
over the Operating System you can bring.

117
00:04:44.060 --> 00:04:46.070
If you want a pre-made army, we have

118
00:04:46.070 --> 00:04:49.090
the EKS optimized army based on Amazon Linux 2,

119
00:04:49.090 --> 00:04:52.050
and Canonical builds an EKS army, as well.

120
00:04:52.050 --> 00:04:53.090
We also provide Packer scripts

121
00:04:53.090 --> 00:04:55.090
on how these armies are created.

122
00:04:55.090 --> 00:04:57.090
This allows you to create custom armies

123
00:04:57.090 --> 00:05:00.010
matching your corporate requirement.

124
00:05:00.010 --> 00:05:02.080
Amazon EKS is available in a large number of

125
00:05:02.080 --> 00:05:06.020
AWS regions today, and this list is constantly growing.

126
00:05:06.020 --> 00:05:08.020
Regional Product Services table

127
00:05:08.020 --> 00:05:10.010
provide an accurate and up to date list

128
00:05:10.010 --> 00:05:13.000
of regions where EKS cluster can be created.

