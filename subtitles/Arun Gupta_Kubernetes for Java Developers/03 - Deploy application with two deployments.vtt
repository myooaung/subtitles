WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] So far, we have deployed a Helm chart

2
00:00:02.060 --> 00:00:06.000
to our Kubernetes cluster, which has one Java application

3
00:00:06.000 --> 00:00:08.050
and that Java application returns a response,

4
00:00:08.050 --> 00:00:10.060
a simple response, hello.

5
00:00:10.060 --> 00:00:13.020
Now, we want to deploy an application

6
00:00:13.020 --> 00:00:17.070
to our Kubernetes cluster which has two Java applications.

7
00:00:17.070 --> 00:00:19.080
One of them returns a response of hello

8
00:00:19.080 --> 00:00:22.060
and the other one returns a response of howdy.

9
00:00:22.060 --> 00:00:25.010
And then we're going to have some fun with Istio,

10
00:00:25.010 --> 00:00:27.010
using those two applications.

11
00:00:27.010 --> 00:00:28.090
Now, remember, we talked about

12
00:00:28.090 --> 00:00:31.020
Istio works using a sidecar.

13
00:00:31.020 --> 00:00:34.030
Particularly, in this case, it is Uwise Sidecar Proxy.

14
00:00:34.030 --> 00:00:36.060
So how do we tell Kubernetes cluster

15
00:00:36.060 --> 00:00:38.040
to make sure for every deployment

16
00:00:38.040 --> 00:00:40.010
inject a sidecar proxy?

17
00:00:40.010 --> 00:00:41.090
Well, there are a couple of ways to do that.

18
00:00:41.090 --> 00:00:44.010
The first one is by which we can say,

19
00:00:44.010 --> 00:00:46.080
for any object that is injected

20
00:00:46.080 --> 00:00:49.050
into the default namespace, give it a label,

21
00:00:49.050 --> 00:00:52.000
call it Istio-injection=enabled

22
00:00:52.000 --> 00:00:53.070
and once you give that label,

23
00:00:53.070 --> 00:00:55.050
essentially, Istio will make sure

24
00:00:55.050 --> 00:00:57.050
that this sidecar which is injected

25
00:00:57.050 --> 00:00:59.010
into each deployment.

26
00:00:59.010 --> 00:01:00.070
Let's try that first.

27
00:01:00.070 --> 00:01:02.030
Copy.

28
00:01:02.030 --> 00:01:04.030
I'm into the workspace directory.

29
00:01:04.030 --> 00:01:05.060
Paste.

30
00:01:05.060 --> 00:01:08.020
And now, my default namespace is labeled

31
00:01:08.020 --> 00:01:10.070
with Istio-injection=enabled.

32
00:01:10.070 --> 00:01:12.030
Now, we understand, in certain cases,

33
00:01:12.030 --> 00:01:14.040
you may not have the ability to add

34
00:01:14.040 --> 00:01:16.030
any random label to the namespace.

35
00:01:16.030 --> 00:01:18.000
It may be a different namespace.

36
00:01:18.000 --> 00:01:22.050
In which case, you can use Istioctl in the CLI.

37
00:01:22.050 --> 00:01:25.080
That is in Istio download main directory

38
00:01:25.080 --> 00:01:29.020
and then you can use Istioctl kube-inject command

39
00:01:29.020 --> 00:01:30.040
to point to your manifest,

40
00:01:30.040 --> 00:01:32.040
which will generate a new manifest,

41
00:01:32.040 --> 00:01:34.050
which will have a sidecar already mentioned

42
00:01:34.050 --> 00:01:36.040
into your part spec.

43
00:01:36.040 --> 00:01:38.000
Then you can take that new manifest

44
00:01:38.000 --> 00:01:40.070
and kubectl apply it so that now

45
00:01:40.070 --> 00:01:43.080
when your manifest is deployed to the Kubernetes cluster,

46
00:01:43.080 --> 00:01:46.040
it has not only your application container

47
00:01:46.040 --> 00:01:48.040
or any other container that you've specified,

48
00:01:48.040 --> 00:01:51.070
but in addition, it also has that sidecar container.

49
00:01:51.070 --> 00:01:54.080
But we're using the default namespace injection here

50
00:01:54.080 --> 00:01:58.050
so let's go ahead and deploy our application.

51
00:01:58.050 --> 00:02:00.090
Manifest/charts.

52
00:02:00.090 --> 00:02:03.010
Let's see what applications are deployed

53
00:02:03.010 --> 00:02:06.020
using Help right now.

54
00:02:06.020 --> 00:02:09.000
Istio, of course, we installed that, and myapp.

55
00:02:09.000 --> 00:02:12.020
Let's delete the myapp application first.

56
00:02:12.020 --> 00:02:16.040
Helm delete myapp and purge it.

57
00:02:16.040 --> 00:02:17.080
So that deletes my application.

58
00:02:17.080 --> 00:02:24.030
Now, I'm going to go to myapp-hello-howdy, okay?

59
00:02:24.030 --> 00:02:26.010
And if I go to the templates directory,

60
00:02:26.010 --> 00:02:28.000
because this is a Helms chart,

61
00:02:28.000 --> 00:02:29.030
if you look at the listing here,

62
00:02:29.030 --> 00:02:31.000
there is a greeting deployment hello

63
00:02:31.000 --> 00:02:33.010
and a greeting deployment howdy.

64
00:02:33.010 --> 00:02:35.010
Now, these are two separate files

65
00:02:35.010 --> 00:02:36.090
with two separate deployments.

66
00:02:36.090 --> 00:02:38.060
One of them points to a Docker image,

67
00:02:38.060 --> 00:02:40.030
which has a Spring Boot application

68
00:02:40.030 --> 00:02:42.000
that returns a response hello.

69
00:02:42.000 --> 00:02:44.060
And the other one points to a Spring Boot application

70
00:02:44.060 --> 00:02:47.040
that returns a response howdy.

71
00:02:47.040 --> 00:02:48.090
Let's look at these two files.

72
00:02:48.090 --> 00:02:56.000
So greeting-deployment-hello and greeting-deployment-howdy.

73
00:02:56.000 --> 00:02:59.060
The first one is greeting-hello,

74
00:02:59.060 --> 00:03:02.010
the part specs has labels app: greeting

75
00:03:02.010 --> 00:03:04.030
and greeting and this is the value defined

76
00:03:04.030 --> 00:03:07.020
in the values.yaml of the Helm chart

77
00:03:07.020 --> 00:03:11.010
and then the usual stuff over here.

78
00:03:11.010 --> 00:03:13.010
If I look at greeting-deployment-howdy,

79
00:03:13.010 --> 00:03:16.080
the name is greeting-howdy, same replicas,

80
00:03:16.080 --> 00:03:19.040
app: greeting and the howdy tag,

81
00:03:19.040 --> 00:03:21.000
and of course the image here, of course,

82
00:03:21.000 --> 00:03:24.040
is using the howdy tag, as well.

83
00:03:24.040 --> 00:03:28.020
So, let's go ahead and install this Helm chart.

84
00:03:28.020 --> 00:03:30.090
Make sure we are in the right directory.

85
00:03:30.090 --> 00:03:36.010
Then we say Helm install, name myapp,

86
00:03:36.010 --> 00:03:41.000
and in this case, we need to say myapp-hello-howdy.

87
00:03:41.000 --> 00:03:43.080
The service is going to get deployed here.

88
00:03:43.080 --> 00:03:45.020
One of the things I want to point out here

89
00:03:45.020 --> 00:03:49.010
is service also has the type as ClusterIP.

90
00:03:49.010 --> 00:03:50.080
We don't want the service in this case

91
00:03:50.080 --> 00:03:53.070
to be published as an external load balancer.

92
00:03:53.070 --> 00:03:55.030
As we will see in the next chapter,

93
00:03:55.030 --> 00:03:57.090
we will create a Istio Indress Gateway,

94
00:03:57.090 --> 00:03:59.010
because that's essentially what

95
00:03:59.010 --> 00:04:02.060
will help us guide the traffic splitting.

96
00:04:02.060 --> 00:04:06.060
So let's look at kubectl get deployments.

97
00:04:06.060 --> 00:04:11.010
We got two deployments and they're both looking good.

98
00:04:11.010 --> 00:04:13.030
Get pods.

99
00:04:13.030 --> 00:04:15.050
There are two pods.

100
00:04:15.050 --> 00:04:18.000
Two of two, one application container.

101
00:04:18.000 --> 00:04:19.060
Second is the sidecar container.

102
00:04:19.060 --> 00:04:22.010
Was looking good.

103
00:04:22.010 --> 00:04:24.020
Now, let's look at the two containers

104
00:04:24.020 --> 00:04:26.090
that are in the pod and that I can get

105
00:04:26.090 --> 00:04:30.050
by kubectl get pods.

106
00:04:30.050 --> 00:04:32.040
I can say show me all the pods

107
00:04:32.040 --> 00:04:36.050
that have the label greeting=hello

108
00:04:36.050 --> 00:04:40.000
and now I'm going to use a jsonpath here

109
00:04:40.000 --> 00:04:43.050
so call it jsonpath here and in this json path,

110
00:04:43.050 --> 00:04:45.040
what I'm going to specify is,

111
00:04:45.040 --> 00:04:50.000
show me all the items that are in there.

112
00:04:50.000 --> 00:04:54.030
In the items, give me their parts spec.

113
00:04:54.030 --> 00:04:57.070
Then pick up all the containers over there

114
00:04:57.070 --> 00:05:02.090
and then give me their name and this is my command

115
00:05:02.090 --> 00:05:06.020
and when I place Enter, I get greeting

116
00:05:06.020 --> 00:05:08.090
and Istio-proxy as my two containers

117
00:05:08.090 --> 00:05:10.040
for running for greeting=hello.

118
00:05:10.040 --> 00:05:13.000
Now, I can repeat the same command

119
00:05:13.000 --> 00:05:19.020
and this time, we can do the same for howdy,

120
00:05:19.020 --> 00:05:22.020
and what we'll get is again, creating an Istio-proxy

121
00:05:22.020 --> 00:05:23.070
because essentially, the containers

122
00:05:23.070 --> 00:05:27.000
within the deployment are still called as greeting.

123
00:05:27.000 --> 00:05:28.020
So now what we have done is,

124
00:05:28.020 --> 00:05:31.010
we have deployed the same Java application

125
00:05:31.010 --> 00:05:32.050
but now it has two deployments.

126
00:05:32.050 --> 00:05:35.000
One returning hello, one returning howdy.

