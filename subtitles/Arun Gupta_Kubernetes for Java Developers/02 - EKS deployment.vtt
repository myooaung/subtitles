WEBVTT
1
00:00:00.050 --> 00:00:01.060
- [Instructor] As discussed earlier,

2
00:00:01.060 --> 00:00:03.050
there are multiple ways to get started

3
00:00:03.050 --> 00:00:06.040
by creating an Amazon EKS cluster.

4
00:00:06.040 --> 00:00:08.050
We are on the Amazon EKS website.

5
00:00:08.050 --> 00:00:11.060
You can certainly click on Start using Amazon EKS,

6
00:00:11.060 --> 00:00:13.030
and there's a lovely Getting Started guide

7
00:00:13.030 --> 00:00:16.070
that you can follow along to create an EKS cluster.

8
00:00:16.070 --> 00:00:20.030
Eksctl, as we discussed earlier, is a third

9
00:00:20.030 --> 00:00:22.080
party tool created in the open-source by Amazon's

10
00:00:22.080 --> 00:00:25.080
partner, Weaveworks, and this tool can be used

11
00:00:25.080 --> 00:00:27.070
to create a EKS cluster.

12
00:00:27.070 --> 00:00:29.070
It provides a seamless experience where

13
00:00:29.070 --> 00:00:32.030
the control plain, the data plain and the connection

14
00:00:32.030 --> 00:00:33.070
of the data plain to the control plain

15
00:00:33.070 --> 00:00:36.000
is all done using a single command.

16
00:00:36.000 --> 00:00:39.000
In order to get started, let's first install

17
00:00:39.000 --> 00:00:49.000
the eksctl CLI.

18
00:00:49.000 --> 00:00:52.020
This command will install the eksctl CLI.

19
00:00:52.020 --> 00:00:58.020
As you can see, it downloaded eksctl 0.1.17.

20
00:00:58.020 --> 00:00:59.070
Make sure you're using the latest version of the

21
00:00:59.070 --> 00:01:01.030
eksctl CLI.

22
00:01:01.030 --> 00:01:05.020
It also downloaded the aws-iam-authenticator.

23
00:01:05.020 --> 00:01:06.030
The workflow for this we explained

24
00:01:06.030 --> 00:01:08.040
in the previous section.

25
00:01:08.040 --> 00:01:11.000
Our next step is to take a look at what our

26
00:01:11.000 --> 00:01:14.000
eksctl version looks like.

27
00:01:14.000 --> 00:01:18.010
The version is indeed 0.1.17 and then now

28
00:01:18.010 --> 00:01:20.050
we're ready to create our cluster.

29
00:01:20.050 --> 00:01:25.030
We're going to say eksctl, create cluster.

30
00:01:25.030 --> 00:01:27.030
We want to give the cluster a name.

31
00:01:27.030 --> 00:01:30.090
In our case, we'll call it as k8s-course

32
00:01:30.090 --> 00:01:34.000
and we want the number of nodes to be four.

33
00:01:34.000 --> 00:01:36.000
By default, it creates a cluster in

34
00:01:36.000 --> 00:01:39.000
us-west-2 region for aws, and you can

35
00:01:39.000 --> 00:01:41.080
certainly specify a region using dash dash region

36
00:01:41.080 --> 00:01:44.040
switch over here, or you can say dash dash help

37
00:01:44.040 --> 00:01:46.070
to see the complete list of options

38
00:01:46.070 --> 00:01:49.010
that the eksctl provides.

39
00:01:49.010 --> 00:01:52.060
This also uses underline aws CLI on your machine,

40
00:01:52.060 --> 00:01:55.050
that is pre-configured for your access keys.

41
00:01:55.050 --> 00:01:58.050
Let's go ahead and press Enter here.

42
00:01:58.050 --> 00:02:00.050
All right, after waiting for a few minutes,

43
00:02:00.050 --> 00:02:02.090
it creates the control plain, creates the data plain,

44
00:02:02.090 --> 00:02:05.060
connects the data plain to the control plain

45
00:02:05.060 --> 00:02:09.000
and our overall Kubernetes cluster is up and running.

46
00:02:09.000 --> 00:02:13.010
As in previous cases, first thing we're going to do is

47
00:02:13.010 --> 00:02:18.080
take a look at what configurations are available.

48
00:02:18.080 --> 00:02:21.000
Now in this case, of course docker-for-desktop

49
00:02:21.000 --> 00:02:23.050
and minikube are from previous sections,

50
00:02:23.050 --> 00:02:25.020
and we can see there's a new context

51
00:02:25.020 --> 00:02:27.090
that is available to us, which is our cluster

52
00:02:27.090 --> 00:02:31.060
that we just created, and also the current context.

53
00:02:31.060 --> 00:02:34.030
What means is any kubectl commands that I give now

54
00:02:34.030 --> 00:02:39.040
are going to be directed to this particular cluster.

55
00:02:39.040 --> 00:02:43.010
Let's get the number of nodes in this cluster.

56
00:02:43.010 --> 00:02:45.080
And because we said four nodes, it's rightly

57
00:02:45.080 --> 00:02:48.050
showing us four nodes in the cluster.

58
00:02:48.050 --> 00:02:50.000
They've been up for about a minute,

59
00:02:50.000 --> 00:02:54.030
status is all ready, and they all have version 1.11.5.

60
00:02:54.030 --> 00:02:55.070
That's the version that is supported by

61
00:02:55.070 --> 00:02:57.080
Amazon EKS today.

62
00:02:57.080 --> 00:03:02.000
We can also say kubectl version, and just print

63
00:03:02.000 --> 00:03:04.000
the short version.

64
00:03:04.000 --> 00:03:08.030
Now it shows the kbuctl CLI is one 10 three,

65
00:03:08.030 --> 00:03:12.040
and server version is one 11 five.

66
00:03:12.040 --> 00:03:14.060
Let's also see how the cluster looks like

67
00:03:14.060 --> 00:03:16.030
in our AWS Console.

68
00:03:16.030 --> 00:03:21.070
Here I am in AWS Console, I can look for EKS service,

69
00:03:21.070 --> 00:03:24.090
click on this here.

70
00:03:24.090 --> 00:03:27.080
Now myeks is a cluster that I created earlier

71
00:03:27.080 --> 00:03:30.030
where Kubernetes course is a cluster that

72
00:03:30.030 --> 00:03:32.000
I created just now.

73
00:03:32.000 --> 00:03:34.060
This screen shows you more details about the cluster.

74
00:03:34.060 --> 00:03:38.000
Once again, Kubernetes version, API server endpoint,

75
00:03:38.000 --> 00:03:40.080
Cluster ARM, Certificate authority, Role ARN,

76
00:03:40.080 --> 00:03:42.030
these are all the values that you need

77
00:03:42.030 --> 00:03:44.000
to access your cluster.

