WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] As an application developer,

2
00:00:01.080 --> 00:00:04.080
typically you'd be working with Kubernetes APIs,

3
00:00:04.080 --> 00:00:08.070
but learning how a Kubernetes cluster works is useful too.

4
00:00:08.070 --> 00:00:10.080
This section will explain the core concepts

5
00:00:10.080 --> 00:00:13.000
of a Kubernetes cluster.

6
00:00:13.000 --> 00:00:14.070
This is a slide from a previous section

7
00:00:14.070 --> 00:00:16.050
where we explained the general concept

8
00:00:16.050 --> 00:00:18.020
of container orchestrator.

9
00:00:18.020 --> 00:00:21.030
This can be further simplified as shown.

10
00:00:21.030 --> 00:00:23.050
The components on the top are collectively

11
00:00:23.050 --> 00:00:26.040
called as control plane. And the components on the bottom

12
00:00:26.040 --> 00:00:29.010
togeather can be called data plane. At this level,

13
00:00:29.010 --> 00:00:33.030
a simplistic view is where data plane runs your containers

14
00:00:33.030 --> 00:00:36.060
and applications, and is controlled by the control plane.

15
00:00:36.060 --> 00:00:39.030
You rarely interact with the data plane directly.

16
00:00:39.030 --> 00:00:43.030
Let's take a look at a more Kubernetes-centric view of this.

17
00:00:43.030 --> 00:00:45.070
Lets look at the control plane first.

18
00:00:45.070 --> 00:00:48.060
The control plane consists of a master node. The Kubernetes

19
00:00:48.060 --> 00:00:51.000
master is responsible for maintaining the desired

20
00:00:51.000 --> 00:00:54.000
state of your cluster. The master itself, refers to a

21
00:00:54.000 --> 00:00:56.060
collection of processes, managing the cluster state,

22
00:00:56.060 --> 00:00:58.090
which we will discuss in a second.

23
00:00:58.090 --> 00:01:00.060
Typically these processes are all run

24
00:01:00.060 --> 00:01:02.040
on a single node in the cluster.

25
00:01:02.040 --> 00:01:05.040
And this node is also referred to as the master.

26
00:01:05.040 --> 00:01:07.060
It is recommended to replicate the master,

27
00:01:07.060 --> 00:01:10.080
for availability and redundancy.

28
00:01:10.080 --> 00:01:12.060
In addition to the Kubernetes masters,

29
00:01:12.060 --> 00:01:14.060
you also need to run etcd.

30
00:01:14.060 --> 00:01:17.050
The core, or systems layer for Kubernetes.

31
00:01:17.050 --> 00:01:20.050
Etcd is a distributed key values tool.

32
00:01:20.050 --> 00:01:23.030
This is where the critical data cluster is stored.

33
00:01:23.030 --> 00:01:25.020
You can optionally co-locate the masters

34
00:01:25.020 --> 00:01:26.080
and etcd in the same instances,

35
00:01:26.080 --> 00:01:29.010
so you only need to run three instances,

36
00:01:29.010 --> 00:01:32.020
instead of six, to support the control plane.

37
00:01:32.020 --> 00:01:34.040
This makes trade offs in the operational burden

38
00:01:34.040 --> 00:01:37.040
when upgrading your cluster. Though, you have to make sure

39
00:01:37.040 --> 00:01:39.060
you don't loose (uninteligable)

40
00:01:39.060 --> 00:01:41.090
on etcd or have to reboot instances.

41
00:01:41.090 --> 00:01:44.060
This is one of the many complexities you will encounter

42
00:01:44.060 --> 00:01:47.030
when setting up your own Kubernetes infrastructure.

43
00:01:47.030 --> 00:01:50.090
We'll talk about how this can be simplified later.

44
00:01:50.090 --> 00:01:53.070
Let's look at Kubernetes master in more detail.

45
00:01:53.070 --> 00:01:57.020
It consists of an API server with services REST operations,

46
00:01:57.020 --> 00:02:00.000
and provides the front-end to the clusters shared state

47
00:02:00.000 --> 00:02:02.090
through which all other components interact.

48
00:02:02.090 --> 00:02:05.060
Controller manager is a demon that embeds the core

49
00:02:05.060 --> 00:02:08.070
control loop shipped with Kubernetes. It watches the

50
00:02:08.070 --> 00:02:11.050
shared state of the cluster through the API server,

51
00:02:11.050 --> 00:02:13.060
and makes changes attempting to move

52
00:02:13.060 --> 00:02:16.060
the current state towards the desired state.

53
00:02:16.060 --> 00:02:19.050
Some examples of controllers that ship with Kubernetes today

54
00:02:19.050 --> 00:02:22.000
are the replication controller, endpoints controller

55
00:02:22.000 --> 00:02:24.060
and namespace controller.

56
00:02:24.060 --> 00:02:27.070
Scheduler is a policy rich and apology aware function

57
00:02:27.070 --> 00:02:30.060
that schedules containers by taking into individual,

58
00:02:30.060 --> 00:02:33.010
and collective resource requirements.

59
00:02:33.010 --> 00:02:34.060
Quality of services requirements,

60
00:02:34.060 --> 00:02:37.010
hardware, software, policy constraints,

61
00:02:37.010 --> 00:02:42.010
affinity and anti-affinity specifications and so on.

62
00:02:42.010 --> 00:02:44.060
The cloud controller manager is a demon that embeds

63
00:02:44.060 --> 00:02:47.090
the cloud specific control loops, shipped with Kubernetes.

64
00:02:47.090 --> 00:02:51.010
This allows Kubernetes core to evolve independently

65
00:02:51.010 --> 00:02:53.060
of the vendor specific code. For example,

66
00:02:53.060 --> 00:02:56.070
there is an AWS cloud controller manager.

67
00:02:56.070 --> 00:02:58.080
Add-ons extend the functionality of Kubernetes

68
00:02:58.080 --> 00:03:01.030
and run on top of Kubernetes.

69
00:03:01.030 --> 00:03:04.060
One such useful add-on is DNS, that provides name

70
00:03:04.060 --> 00:03:08.060
resolution for objects deployed in Kubernetes.

71
00:03:08.060 --> 00:03:11.040
Let's look at Kubernetes worker in more detail.

72
00:03:11.040 --> 00:03:13.060
Each worker node runs two processes.

73
00:03:13.060 --> 00:03:18.020
Kubelet is the primary node agent that runs on each node.

74
00:03:18.020 --> 00:03:20.040
Kubelet communications with Kubernetes master

75
00:03:20.040 --> 00:03:22.090
to create parts, and ensures that the containers

76
00:03:22.090 --> 00:03:27.000
in these parts are running and healthy.

77
00:03:27.000 --> 00:03:29.040
Kube-proxy is a network proxy on each node.

78
00:03:29.040 --> 00:03:32.090
It provides Kubernetes networking services on each node.

79
00:03:32.090 --> 00:03:35.040
The Kubernetes master controls each node.

80
00:03:35.040 --> 00:03:38.080
You will rarely interact with nodes directly.

81
00:03:38.080 --> 00:03:41.010
Let's take a look at how control plane and data plane

82
00:03:41.010 --> 00:03:43.080
work together to deploy your applications.

83
00:03:43.080 --> 00:03:45.070
A Kubernetes resource manifest is

84
00:03:45.070 --> 00:03:48.090
used to define a Kubernetes resource.

85
00:03:48.090 --> 00:03:51.080
Kubectl CLI or Kubecontrol CLI, as you may call it,

86
00:03:51.080 --> 00:03:54.070
is configured to talk to a Kubernetes cluser,

87
00:03:54.070 --> 00:03:57.020
which means, to the control plane.

88
00:03:57.020 --> 00:03:59.040
A Kubeclt create command is given using

89
00:03:59.040 --> 00:04:02.030
this resource manifest. The control plane then used

90
00:04:02.030 --> 00:04:05.030
the internal components as explained earlier,

91
00:04:05.030 --> 00:04:08.020
to create the resources on the data plane.

92
00:04:08.020 --> 00:04:11.040
A typical flow for a java developer in this case is

93
00:04:11.040 --> 00:04:14.060
to repackage the darker image with the application logic,

94
00:04:14.060 --> 00:04:17.030
update the Kubernetes resource manifest

95
00:04:17.030 --> 00:04:20.040
and redeploy the resource and keep going on with it.

96
00:04:20.040 --> 00:04:22.080
Multiple Kubernetes resources can be easily deployed

97
00:04:22.080 --> 00:04:25.000
to a Kubernetes cluster, and we will discuss those

98
00:04:25.000 --> 00:04:27.000
options later in this course.

