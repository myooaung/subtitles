WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] Quite often when your services

2
00:00:01.090 --> 00:00:04.000
are deployed in the communities cluster,

3
00:00:04.000 --> 00:00:06.030
you need some visibility into them.

4
00:00:06.030 --> 00:00:08.030
There are plenty of tools available,

5
00:00:08.030 --> 00:00:11.020
such as Prometheus, Grafana, and many others

6
00:00:11.020 --> 00:00:14.040
that provide you visibility into how your micro services

7
00:00:14.040 --> 00:00:16.080
are running, how are they connected.

8
00:00:16.080 --> 00:00:20.050
Kiali is a new tool that has been introduced recently

9
00:00:20.050 --> 00:00:21.080
as part of Istio.

10
00:00:21.080 --> 00:00:24.020
Well, first of all, going with our sailing team

11
00:00:24.020 --> 00:00:27.040
around Kubernetes, Kiali is yet another Greek word

12
00:00:27.040 --> 00:00:30.070
meaning monocular or spyglass.

13
00:00:30.070 --> 00:00:33.000
Kiali project provides answers for the questions,

14
00:00:33.000 --> 00:00:36.020
what microservices are part of my Istio service mesh

15
00:00:36.020 --> 00:00:37.080
and how are they connected?

16
00:00:37.080 --> 00:00:39.030
You can get answers such as,

17
00:00:39.030 --> 00:00:42.020
gain insight into how your mesh is functioning,

18
00:00:42.020 --> 00:00:44.070
have a checkup with your mesh's health.

19
00:00:44.070 --> 00:00:46.090
You can choose what kind of craft to display.

20
00:00:46.090 --> 00:00:48.000
You can zoom in to see

21
00:00:48.000 --> 00:00:50.040
what is happening with a single component,

22
00:00:50.040 --> 00:00:52.050
you can visualize your traffic flow,

23
00:00:52.050 --> 00:00:54.080
browse your service mesh by applications,

24
00:00:54.080 --> 00:00:58.030
workloads and services and much more.

25
00:00:58.030 --> 00:01:01.090
Now by default Kiali is disabled when Istio 1.0.5

26
00:01:01.090 --> 00:01:04.070
is installed and so it needs to be enabled.

27
00:01:04.070 --> 00:01:07.050
So let's get started with that.

28
00:01:07.050 --> 00:01:11.000
We are in the Istio directory, this is how we install Istio.

29
00:01:11.000 --> 00:01:14.030
So let's go ahead and enable Kiali for us.

30
00:01:14.030 --> 00:01:18.010
So I will say helm template

31
00:01:18.010 --> 00:01:25.020
and I'm going to set the value of kiali.enable to true.

32
00:01:25.020 --> 00:01:26.080
And where am I setting this value?

33
00:01:26.080 --> 00:01:32.040
I am setting this value in install kubernetes helm istio.

34
00:01:32.040 --> 00:01:35.050
And of course we need to provide the name of the app

35
00:01:35.050 --> 00:01:40.040
which is istio in our case and the namespace

36
00:01:40.040 --> 00:01:43.090
which is istio-system.

37
00:01:43.090 --> 00:01:46.080
And then we're going to get the new template

38
00:01:46.080 --> 00:01:53.000
generated for us in home/istio.yaml.

39
00:01:53.000 --> 00:01:54.060
So this generates a new template for us

40
00:01:54.060 --> 00:01:56.080
with only Kiali being enabled.

41
00:01:56.080 --> 00:02:01.060
And now we can conveniently apply this template.

42
00:02:01.060 --> 00:02:08.000
This will configure our Istio with only Kiali being enabled.

43
00:02:08.000 --> 00:02:09.080
You see a lot of warning messages here,

44
00:02:09.080 --> 00:02:10.090
so don't be confused by them,

45
00:02:10.090 --> 00:02:12.020
those are only warning messages.

46
00:02:12.020 --> 00:02:14.020
Because it's trying to give you a warning

47
00:02:14.020 --> 00:02:16.050
on what kubectl command should be used

48
00:02:16.050 --> 00:02:18.030
by kubectl apply is the right command

49
00:02:18.030 --> 00:02:19.090
that we have done over here.

50
00:02:19.090 --> 00:02:22.050
Now let's look at whether our Kiali pod

51
00:02:22.050 --> 00:02:24.050
has been successfully started.

52
00:02:24.050 --> 00:02:27.030
So we'll say kubectl get pods.

53
00:02:27.030 --> 00:02:30.080
We want to see the pods in the istio-system.

54
00:02:30.080 --> 00:02:32.050
And we only want to see the pods

55
00:02:32.050 --> 00:02:36.020
that have the label app kiali.

56
00:02:36.020 --> 00:02:38.020
And there you go, so our Kiali pod

57
00:02:38.020 --> 00:02:40.090
is now successfully up and running.

58
00:02:40.090 --> 00:02:41.090
So the next thing we need to do

59
00:02:41.090 --> 00:02:44.070
is now open our Kiali dashboard.

60
00:02:44.070 --> 00:02:50.060
So for that we will say kubectl -n istio-system

61
00:02:50.060 --> 00:02:53.020
because that's our namespace.

62
00:02:53.020 --> 00:02:56.040
Then we will do a port forward in this case

63
00:02:56.040 --> 00:02:58.030
and then we do a port forward,

64
00:02:58.030 --> 00:03:01.090
then we need to get our Kiali pod.

65
00:03:01.090 --> 00:03:04.030
So we will say kubectl once again

66
00:03:04.030 --> 00:03:07.060
in the istio-system namespace.

67
00:03:07.060 --> 00:03:11.070
Continue the command and I'm saying get pod.

68
00:03:11.070 --> 00:03:16.040
And I'm saying give me the label kiali.

69
00:03:16.040 --> 00:03:21.070
Continue the command and I'm saying that is my jsonpath

70
00:03:21.070 --> 00:03:27.050
and my jsonpath really looks like give me all the items.

71
00:03:27.050 --> 00:03:33.040
Actually the first one, get the metadata, get the name,

72
00:03:33.040 --> 00:03:36.030
close the json path, close the command

73
00:03:36.030 --> 00:03:40.030
and then close the command once again and here I'm saying,

74
00:03:40.030 --> 00:03:44.050
give me 20001 port on the host

75
00:03:44.050 --> 00:03:47.000
where 20001 is on the container as well.

76
00:03:47.000 --> 00:03:50.030
So let's go ahead and run this here.

77
00:03:50.030 --> 00:03:52.070
So now what we have done is we have done the port forwarding

78
00:03:52.070 --> 00:03:55.070
of the Kiali port here, okay.

79
00:03:55.070 --> 00:04:01.000
Let's open up a browser tab and look at our Kiali dashboard.

80
00:04:01.000 --> 00:04:05.010
And we said it is forwarded on port 20001.

81
00:04:05.010 --> 00:04:07.000
So let's get that.

82
00:04:07.000 --> 00:04:12.000
The default username and password is admin.

83
00:04:12.000 --> 00:04:17.010
So username admin, password admin and login.

84
00:04:17.010 --> 00:04:19.050
And this is your default Kiali dashboard view,

85
00:04:19.050 --> 00:04:21.050
it shows you the application here.

86
00:04:21.050 --> 00:04:24.040
So there's one application, this is the istio-system itself

87
00:04:24.040 --> 00:04:26.030
this is in default namespace.

88
00:04:26.030 --> 00:04:28.080
So let's click on this application here.

89
00:04:28.080 --> 00:04:30.040
You get more details about the application,

90
00:04:30.040 --> 00:04:32.060
well of course we deployed only one application

91
00:04:32.060 --> 00:04:34.010
and that's what it shows here.

92
00:04:34.010 --> 00:04:37.060
So let's click on greeting, it shows it's got two workloads.

93
00:04:37.060 --> 00:04:40.040
Greeting-hello and greeting-howdy and this is my service

94
00:04:40.040 --> 00:04:41.050
it's looking healthy right now.

95
00:04:41.050 --> 00:04:43.080
If you just hover over it and kind of gives you

96
00:04:43.080 --> 00:04:47.000
a basic health metrics based upon Envoy.

97
00:04:47.000 --> 00:04:50.000
I can dig further into it, I can say greeting hello

98
00:04:50.000 --> 00:04:51.050
and then it starts giving me more details

99
00:04:51.050 --> 00:04:54.040
about the particular deployment itself.

100
00:04:54.040 --> 00:04:59.010
And then it shows me the services it is connected to.

101
00:04:59.010 --> 00:05:03.050
I can go to applications here again, get the same view.

102
00:05:03.050 --> 00:05:05.030
I can go to graph here.

103
00:05:05.030 --> 00:05:08.030
Now it's showing me the versioned app.

104
00:05:08.030 --> 00:05:09.070
That means the current version of the app

105
00:05:09.070 --> 00:05:11.080
that is being deployed.

106
00:05:11.080 --> 00:05:15.090
I can change this to workload and now I am seeing

107
00:05:15.090 --> 00:05:18.030
greeting-hello and greeting-howdy.

108
00:05:18.030 --> 00:05:20.020
So those are my two workloads essentially

109
00:05:20.020 --> 00:05:22.000
that are being displayed over here.

110
00:05:22.000 --> 00:05:24.040
So we going to go back to our terminal,

111
00:05:24.040 --> 00:05:27.050
invoke the command to access the application again

112
00:05:27.050 --> 00:05:30.020
and see how this changes.

113
00:05:30.020 --> 00:05:33.080
So let's go ahead and open a new tab of terminal here.

114
00:05:33.080 --> 00:05:36.010
I'll go back to to browser for a second.

115
00:05:36.010 --> 00:05:40.070
We will copy the command to invoke the application again

116
00:05:40.070 --> 00:05:43.050
and because we are on a new terminal,

117
00:05:43.050 --> 00:05:48.000
we need to export the ingress host and port once again.

118
00:05:48.000 --> 00:05:51.000
So let's export them.

119
00:05:51.000 --> 00:05:55.020
So that sets the value for my ingress host and port.

120
00:05:55.020 --> 00:05:59.060
Back in the browser let's say we want to invoke it 10 times,

121
00:05:59.060 --> 00:06:06.040
so copy it and paste it here and let it go.

122
00:06:06.040 --> 00:06:10.020
We get the response back, this is still about 90 10 split.

123
00:06:10.020 --> 00:06:14.020
Now if I go back to my browser, look at the Kiali console,

124
00:06:14.020 --> 00:06:17.050
I can change this to every five seconds

125
00:06:17.050 --> 00:06:19.090
and say refresh it now.

126
00:06:19.090 --> 00:06:22.080
And right away you see that istio-ingress

127
00:06:22.080 --> 00:06:25.040
is now invoking greeting-hello and greeting-howdy.

128
00:06:25.040 --> 00:06:27.090
And greeting-hello particularly is all green

129
00:06:27.090 --> 00:06:29.070
because that's the service it invoked.

130
00:06:29.070 --> 00:06:33.000
And here you can see the HTTP traffic chart as well.

131
00:06:33.000 --> 00:06:37.040
Now I can go back here, invoke the service

132
00:06:37.040 --> 00:06:40.080
and this time let's say we want to invoke it 50 times.

133
00:06:40.080 --> 00:06:48.090
So that at least sometimes howdy is invoked as well.

134
00:06:48.090 --> 00:06:52.010
Okay we saw howdy invoked a few times.

135
00:06:52.010 --> 00:06:55.000
And you can see automatically the graph refreshed.

136
00:06:55.000 --> 00:06:57.050
So you can get a good feeling of, you know,

137
00:06:57.050 --> 00:06:59.000
how your overall service is looking,

138
00:06:59.000 --> 00:07:02.080
how healthy it is and what values does it carry.

139
00:07:02.080 --> 00:07:05.090
Now there are a lot more things here that you can explore.

140
00:07:05.090 --> 00:07:07.090
So if you have multiple applications deployed,

141
00:07:07.090 --> 00:07:09.040
they will of course be displayed over here.

142
00:07:09.040 --> 00:07:11.020
You can filter them by namespace,

143
00:07:11.020 --> 00:07:14.010
you can get all kind of graphs here as we saw.

144
00:07:14.010 --> 00:07:17.030
So, by app, by service, by versioned app.

145
00:07:17.030 --> 00:07:20.000
You can of course get more details about the service itself,

146
00:07:20.000 --> 00:07:22.040
say if I click on say greeting service here,

147
00:07:22.040 --> 00:07:24.060
it gives me more details about the service.

148
00:07:24.060 --> 00:07:27.000
It shows me the associated Istio resources

149
00:07:27.000 --> 00:07:28.010
that were created.

150
00:07:28.010 --> 00:07:29.060
So what are my source workloads?

151
00:07:29.060 --> 00:07:32.020
Well it's ingress gateway and then what is

152
00:07:32.020 --> 00:07:35.040
my associated virtual service or my destination rules?

153
00:07:35.040 --> 00:07:38.000
So I can start getting a lot more details

154
00:07:38.000 --> 00:07:40.060
from the Kiali console itself.

155
00:07:40.060 --> 00:07:42.040
So I would recommend give it a shot,

156
00:07:42.040 --> 00:07:44.020
now this a new release, this is the first time

157
00:07:44.020 --> 00:07:47.040
it has been integrated into Istio 1.0.5.

158
00:07:47.040 --> 00:07:49.030
The way the integration may look like

159
00:07:49.030 --> 00:07:52.020
in Istio 1.1 may be different but definitely

160
00:07:52.020 --> 00:07:55.000
worth keeping an eye on.

161
00:07:55.000 --> 00:07:58.010
Now let's make sure we also clean our port forwarding.

162
00:07:58.010 --> 00:08:00.090
So we're going to hit ctrl + z here and that way,

163
00:08:00.090 --> 00:08:04.020
the port is not occupied and our connection is clean.

164
00:08:04.020 --> 00:08:06.010
To do a final cleanup of Istio,

165
00:08:06.010 --> 00:08:08.050
let's remove the Istio greeting resources.

166
00:08:08.050 --> 00:08:13.060
That can be done by kubectl delete -f

167
00:08:13.060 --> 00:08:16.080
and we need to go into our workspace directory.

168
00:08:16.080 --> 00:08:21.090
Manifests, standalone, greeting, istio.yaml.

169
00:08:21.090 --> 00:08:23.060
This is going to delete our gateway,

170
00:08:23.060 --> 00:08:26.000
destination rule and virtual service.

171
00:08:26.000 --> 00:08:29.040
And finally we can also delete Istio altogether

172
00:08:29.040 --> 00:08:31.040
from the cluster itself.

173
00:08:31.040 --> 00:08:35.060
Helm delete istio and purge.

174
00:08:35.060 --> 00:08:37.080
It says release istio is deleted.

175
00:08:37.080 --> 00:08:40.030
Oftentimes we have seen certain CRDs

176
00:08:40.030 --> 00:08:43.000
that are created by Istio are leftover.

177
00:08:43.000 --> 00:08:45.060
And so we may have to delete them explicitly.

178
00:08:45.060 --> 00:08:49.000
So in which case you go cubectl delete

179
00:08:49.000 --> 00:08:52.010
- f install kubernetes

180
00:08:52.010 --> 00:08:57.000
helm istio templates crds

181
00:08:57.000 --> 00:09:02.060
and they are in the istio-system namespace.

182
00:09:02.060 --> 00:09:06.010
And that leads to a clean deletion of istio

183
00:09:06.010 --> 00:09:07.070
from your EKS cluster.

184
00:09:07.070 --> 00:09:10.000
Of course we can delete our app as well.

185
00:09:10.000 --> 00:09:14.080
So if we look at helm ls, our app exists.

186
00:09:14.080 --> 00:09:23.020
Okay, so let's go ahead helm delete myapp and purge.

187
00:09:23.020 --> 00:09:25.000
That deletes our app as well.

