WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Narrator] After the cluster is created,

2
00:00:02.010 --> 00:00:04.070
our first thing is to deploy our application.

3
00:00:04.070 --> 00:00:06.050
This is the same Java application

4
00:00:06.050 --> 00:00:07.080
created using Spring Boot

5
00:00:07.080 --> 00:00:10.000
and packaged as a Docker container.

6
00:00:10.000 --> 00:00:11.000
Now if you recall,

7
00:00:11.000 --> 00:00:14.030
our image name was Arun Gupta/Greeting.

8
00:00:14.030 --> 00:00:15.090
And if you also recall,

9
00:00:15.090 --> 00:00:18.050
when we deploy a Docker image as a container

10
00:00:18.050 --> 00:00:19.040
in the Kubernetes cluster,

11
00:00:19.040 --> 00:00:21.090
it is deployed using a resource manifest.

12
00:00:21.090 --> 00:00:23.030
So, let's take a look

13
00:00:23.030 --> 00:00:25.070
at what our resource manifest looks like.

14
00:00:25.070 --> 00:00:29.050
Now, I'm in the Workspace directory.

15
00:00:29.050 --> 00:00:33.070
So let's go to manifests, standalone directory.

16
00:00:33.070 --> 00:00:35.030
And the first thing we're going to look at

17
00:00:35.030 --> 00:00:38.060
is our greeting deployment manifest.

18
00:00:38.060 --> 00:00:41.080
There is usually apiVersion, kind, metadata,

19
00:00:41.080 --> 00:00:45.020
we're creating a single replica of the pod over here.

20
00:00:45.020 --> 00:00:46.060
This is my pod template.

21
00:00:46.060 --> 00:00:49.010
In that I'm assigning app colon greeting

22
00:00:49.010 --> 00:00:50.080
as a label to each pod.

23
00:00:50.080 --> 00:00:53.010
It's important we understand this label because

24
00:00:53.010 --> 00:00:55.010
when I'm creating my service later on,

25
00:00:55.010 --> 00:00:57.000
it's going to rely on these particular labels

26
00:00:57.000 --> 00:00:58.050
being on the pod.

27
00:00:58.050 --> 00:00:59.090
Then I go to pod Spec,

28
00:00:59.090 --> 00:01:02.010
in that I'm creating a single container,

29
00:01:02.010 --> 00:01:03.050
this is my image name,

30
00:01:03.050 --> 00:01:07.010
and here are the ports that I'm exposing.

31
00:01:07.010 --> 00:01:11.040
Let's look at my greeting service manifest now.

32
00:01:11.040 --> 00:01:12.060
Again, very simple here,

33
00:01:12.060 --> 00:01:14.090
apiVersion, kind, metadata,

34
00:01:14.090 --> 00:01:17.060
and the selector is the key port here.

35
00:01:17.060 --> 00:01:20.070
It's saying any pod that has the labels app colon greeting

36
00:01:20.070 --> 00:01:22.070
are going to be included in the service,

37
00:01:22.070 --> 00:01:24.040
and those are the labels that we attach

38
00:01:24.040 --> 00:01:26.080
to in our deployment.

39
00:01:26.080 --> 00:01:28.080
Of course, I'm exposing the ports here,

40
00:01:28.080 --> 00:01:30.040
the target port is 8080,

41
00:01:30.040 --> 00:01:32.080
and the port on which the service is going to be exposed

42
00:01:32.080 --> 00:01:34.000
is 8080.

43
00:01:34.000 --> 00:01:37.010
And I'm also saying type as LoadBalancer.

44
00:01:37.010 --> 00:01:37.090
What that means is

45
00:01:37.090 --> 00:01:40.090
if the service is published in a cloud environment,

46
00:01:40.090 --> 00:01:43.040
then the cloud specific LoadBalancer

47
00:01:43.040 --> 00:01:45.010
would be used to expose the service.

48
00:01:45.010 --> 00:01:46.000
We'll see the behavior

49
00:01:46.000 --> 00:01:50.020
when we deploy this in Docker Desktop.

50
00:01:50.020 --> 00:01:52.080
So let's go ahead and create our deployment first.

51
00:01:52.080 --> 00:01:56.010
So.

52
00:01:56.010 --> 00:01:58.060
The command to create a deployment is Kubectl,

53
00:01:58.060 --> 00:02:00.000
which is our CLI,

54
00:02:00.000 --> 00:02:03.030
create -f pointing to the resource manifest file

55
00:02:03.030 --> 00:02:05.070
and then the resource manifest file.

56
00:02:05.070 --> 00:02:09.090
So this creates my deployment greeting.

57
00:02:09.090 --> 00:02:12.060
I can look at the status for the deployment.

58
00:02:12.060 --> 00:02:15.000
Kubectl get deployment.

59
00:02:15.000 --> 00:02:16.060
Here's my deployment name,

60
00:02:16.060 --> 00:02:17.050
how much desired,

61
00:02:17.050 --> 00:02:18.030
how much current,

62
00:02:18.030 --> 00:02:19.020
how much up-to-date,

63
00:02:19.020 --> 00:02:20.040
how much available.

64
00:02:20.040 --> 00:02:22.030
All these concepts are applicable

65
00:02:22.030 --> 00:02:24.010
when you're doing rolling deployments

66
00:02:24.010 --> 00:02:26.010
later on as well.

67
00:02:26.010 --> 00:02:29.070
Let's look at our pods.

68
00:02:29.070 --> 00:02:33.010
It says a single pod is up and running

69
00:02:33.010 --> 00:02:34.080
and the status is running.

70
00:02:34.080 --> 00:02:39.010
Let's look at the logs.

71
00:02:39.010 --> 00:02:41.030
I'm going to copy the pod name here,

72
00:02:41.030 --> 00:02:43.020
paste it here,

73
00:02:43.020 --> 00:02:45.070
and here is the log from the spring boot application

74
00:02:45.070 --> 00:02:46.070
that we created,

75
00:02:46.070 --> 00:02:48.080
and that's shown as part of the log.

76
00:02:48.080 --> 00:02:50.090
Now, deployment is created,

77
00:02:50.090 --> 00:02:53.010
we checked on the pod, we checked on the logs,

78
00:02:53.010 --> 00:02:58.010
next thing is to create the service.

79
00:02:58.010 --> 00:03:00.030
Greeting-service.yaml.

80
00:03:00.030 --> 00:03:02.050
Same command,

81
00:03:02.050 --> 00:03:08.030
and now let's look at our service status

82
00:03:08.030 --> 00:03:10.060
and as we said earlier,

83
00:03:10.060 --> 00:03:13.070
greeting service is now created.

84
00:03:13.070 --> 00:03:16.030
By assigning a local host as an external IP address

85
00:03:16.030 --> 00:03:18.020
when running on a desktop environment,

86
00:03:18.020 --> 00:03:20.080
it makes easy to access our service.

87
00:03:20.080 --> 00:03:24.040
So, what are we going to do to access our service?

88
00:03:24.040 --> 00:03:26.020
Curl,

89
00:03:26.020 --> 00:03:27.070
http localhost

90
00:03:27.070 --> 00:03:31.000
because this is the external IP assigned to our service.

91
00:03:31.000 --> 00:03:32.080
Port is 8080

92
00:03:32.080 --> 00:03:37.020
and our context is hello.

93
00:03:37.020 --> 00:03:38.000
Viola,

94
00:03:38.000 --> 00:03:40.020
we got a response hello back from our service.

95
00:03:40.020 --> 00:03:43.010
Now, the big difference here is this is the exact same

96
00:03:43.010 --> 00:03:45.070
Java application packaged as a Docker container

97
00:03:45.070 --> 00:03:48.000
deployed as a Kubernetes deployment,

98
00:03:48.000 --> 00:03:50.050
accessed using the Kubernetes service.

99
00:03:50.050 --> 00:03:51.030
So as you can see,

100
00:03:51.030 --> 00:03:53.070
we are making progress through our

101
00:03:53.070 --> 00:03:55.070
workflow that we talked about earlier.

102
00:03:55.070 --> 00:03:58.030
So let's go ahead and delete the resources

103
00:03:58.030 --> 00:04:00.020
because we will look at different options

104
00:04:00.020 --> 00:04:03.040
in the subsequent sections.

105
00:04:03.040 --> 00:04:05.030
So, kubectl

106
00:04:05.030 --> 00:04:10.090
delete -f, let's the delete the service first,

107
00:04:10.090 --> 00:04:15.050
and then similarly we can delete the deployment as well.

108
00:04:15.050 --> 00:04:19.080
And now if I look at service,

109
00:04:19.080 --> 00:04:22.050
of course there is no service,

110
00:04:22.050 --> 00:04:24.020
if I look at deployments,

111
00:04:24.020 --> 00:04:26.050
there are no deployments,

112
00:04:26.050 --> 00:04:27.080
and if I look at pods,

113
00:04:27.080 --> 00:04:29.000
of course there are no pods.

