WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] Going through the entire process

2
00:00:01.080 --> 00:00:05.010
of building your application, creating a Docker image,

3
00:00:05.010 --> 00:00:07.000
updating Kubernetes manifests,

4
00:00:07.000 --> 00:00:09.010
re-applying those manifests to Kubernetes cluster

5
00:00:09.010 --> 00:00:11.070
could be daunting when you want to focus mostly

6
00:00:11.070 --> 00:00:13.040
on building your application.

7
00:00:13.040 --> 00:00:16.010
This is exactly where deployment pipelines help.

8
00:00:16.010 --> 00:00:19.030
This chapter will show two types of deployment pipelines.

9
00:00:19.030 --> 00:00:22.030
One, that you can run during your local dev setup,

10
00:00:22.030 --> 00:00:26.010
and another that can run reliably in the Cloud.

11
00:00:26.010 --> 00:00:29.060
The first option that we will consider is Skaffold.

12
00:00:29.060 --> 00:00:31.070
Skaffold is an opensource come online tool

13
00:00:31.070 --> 00:00:33.090
that facilitates continuous development

14
00:00:33.090 --> 00:00:35.080
for Kubernetes applications.

15
00:00:35.080 --> 00:00:37.070
Skaffold provides an opinionated,

16
00:00:37.070 --> 00:00:40.090
minimal pipeline to keep things simple.

17
00:00:40.090 --> 00:00:43.060
You can iterate on your application source code locally,

18
00:00:43.060 --> 00:00:47.020
then deploy to a local or remote Kubernetes clusters.

19
00:00:47.020 --> 00:00:49.050
Skaffold detects changes in your source code

20
00:00:49.050 --> 00:00:51.090
and handles the pipeline to build, push,

21
00:00:51.090 --> 00:00:54.060
and deploy your application automatically

22
00:00:54.060 --> 00:00:56.040
with policy-based image tagging

23
00:00:56.040 --> 00:01:00.010
and highly optimized, fast, local workflows.

24
00:01:00.010 --> 00:01:01.070
It also provides building blocks

25
00:01:01.070 --> 00:01:05.020
and describes customizations for a CI/CD pipeline.

26
00:01:05.020 --> 00:01:07.090
Use Skaffold run command end to end

27
00:01:07.090 --> 00:01:09.050
or just part of Skaffold stages

28
00:01:09.050 --> 00:01:13.030
from build to deploymet in your CI/CD system.

29
00:01:13.030 --> 00:01:14.080
Skaffold does not require maintaining

30
00:01:14.080 --> 00:01:17.030
a cluster site component so there is no overhead

31
00:01:17.030 --> 00:01:20.010
or maintenance burden to your cluster.

32
00:01:20.010 --> 00:01:22.090
A pluggable architecture is central to Skaffold's design,

33
00:01:22.090 --> 00:01:25.070
allowing you to use a tool you prefer in each stage.

34
00:01:25.070 --> 00:01:28.030
For example, Dockerfile and Jib

35
00:01:28.030 --> 00:01:30.020
can be used for building the image,

36
00:01:30.020 --> 00:01:32.080
deployment can be done using Kubectl and Helm,

37
00:01:32.080 --> 00:01:34.010
and Docker images may be kept

38
00:01:34.010 --> 00:01:36.080
on the local Daemon or pushed to our registry.

39
00:01:36.080 --> 00:01:39.070
This could be useful for dev and prior scenario.

40
00:01:39.070 --> 00:01:42.040
On a local machine, you can configure Skaffold

41
00:01:42.040 --> 00:01:44.090
to build artifacts with local Docker Daemon

42
00:01:44.090 --> 00:01:48.040
and deploy them to Docker desktop using Kubectl.

43
00:01:48.040 --> 00:01:49.090
When the design is finalized,

44
00:01:49.090 --> 00:01:52.030
you can switch to the production profile

45
00:01:52.030 --> 00:01:56.020
and deploy with Helm to an Amazon EKS cluster.

46
00:01:56.020 --> 00:01:59.090
All details about Skaffold are available on this website.

47
00:01:59.090 --> 00:02:02.060
Let's take a look at the core now.

48
00:02:02.060 --> 00:02:05.010
First thing, we will take a look at kube configs

49
00:02:05.010 --> 00:02:09.020
that are available for us.

50
00:02:09.020 --> 00:02:10.040
At this point, it is pointing

51
00:02:10.040 --> 00:02:13.040
to the Amazon EKS cluster that we have created,

52
00:02:13.040 --> 00:02:15.090
but as we are building and deploying our application

53
00:02:15.090 --> 00:02:17.040
with Skaffold, we want to point it

54
00:02:17.040 --> 00:02:19.090
to a local Kubernetes cluster.

55
00:02:19.090 --> 00:02:23.010
As in this course, we have been using Docker for desktop,

56
00:02:23.010 --> 00:02:31.060
so we will point it back to that.

57
00:02:31.060 --> 00:02:35.090
Copy the context name and paste it here,

58
00:02:35.090 --> 00:02:38.070
verify it that is indeed switch correctly

59
00:02:38.070 --> 00:02:40.090
to Docker for desktop.

60
00:02:40.090 --> 00:02:46.080
Now let's see what applications are running here.

61
00:02:46.080 --> 00:02:48.040
Now, this is one of the applications

62
00:02:48.040 --> 00:02:51.040
that we have deployed into our Kubernetes cluster

63
00:02:51.040 --> 00:02:54.010
and this was indeed deployed as an Helm application.

64
00:02:54.010 --> 00:02:56.030
So if you see Helm LS, it'll tell you actually

65
00:02:56.030 --> 00:02:58.020
that the application was deployed as Helm.

66
00:02:58.020 --> 00:03:03.040
So let's go ahead and delete this application for now

67
00:03:03.040 --> 00:03:06.020
because when we are building with Skaffold,

68
00:03:06.020 --> 00:03:09.040
we essentially want Skaffold to build the image,

69
00:03:09.040 --> 00:03:11.020
prepare the Kubernetes manifest for us,

70
00:03:11.020 --> 00:03:14.060
and use that to deploy to Kubernetes cluster.

71
00:03:14.060 --> 00:03:15.070
So let's go ahead.

72
00:03:15.070 --> 00:03:17.030
The application is now clean.

73
00:03:17.030 --> 00:03:22.090
The first thing we need to do now here is install Skaffold.

74
00:03:22.090 --> 00:03:24.090
Well, on this machine, I have already installed Skaffold.

75
00:03:24.090 --> 00:03:26.070
So your output may look a bit different

76
00:03:26.070 --> 00:03:28.040
if you're installing from scratch,

77
00:03:28.040 --> 00:03:32.050
but essentially, you will have Skaffold in your CLI

78
00:03:32.050 --> 00:03:36.010
and you can check the version

79
00:03:36.010 --> 00:03:39.090
or without dash dash, version,

80
00:03:39.090 --> 00:03:42.020
so it says version 0.20.0,

81
00:03:42.020 --> 00:03:44.020
but if you gave an incorrect command,

82
00:03:44.020 --> 00:03:45.070
as a matter of fact, it shows you

83
00:03:45.070 --> 00:03:47.010
the complete list of commands

84
00:03:47.010 --> 00:03:48.030
that are available to you.

85
00:03:48.030 --> 00:03:51.020
So it's always handy to see what's available to us.

86
00:03:51.020 --> 00:03:55.000
Now, app is our directory where

87
00:03:55.000 --> 00:03:57.060
all the application code is set in.

88
00:03:57.060 --> 00:04:01.090
If you look at, say Skaffold.yaml here.

89
00:04:01.090 --> 00:04:04.040
Now, this is our Kubernetes configuration file

90
00:04:04.040 --> 00:04:07.040
and it says, I'm going to generate an image

91
00:04:07.040 --> 00:04:09.020
by the name arungupta/greeting.

92
00:04:09.020 --> 00:04:11.070
That's the image name that we have been using all along

93
00:04:11.070 --> 00:04:13.090
and when I'm deploying to Kubernetes,

94
00:04:13.090 --> 00:04:15.090
then I'm going to use this particular manifest,

95
00:04:15.090 --> 00:04:18.050
which is greeting.yaml.

96
00:04:18.050 --> 00:04:20.060
Now, this greeting.yaml, if you remember,

97
00:04:20.060 --> 00:04:23.030
is a manifest that we used earlier,

98
00:04:23.030 --> 00:04:27.020
single manifest with tool resources defined over there

99
00:04:27.020 --> 00:04:30.030
and so that's lying around in our repo,

100
00:04:30.030 --> 00:04:34.040
so I'm going to copy it from standalone/greeting.yaml

101
00:04:34.040 --> 00:04:36.090
and copy it to our current directory.

102
00:04:36.090 --> 00:04:40.000
Let's open up greeting.yaml here.

103
00:04:40.000 --> 00:04:42.050
Now, this of course has a deployment

104
00:04:42.050 --> 00:04:49.030
and if I scroll forward, then I have service.

105
00:04:49.030 --> 00:04:52.080
Now, one other thing to notice on line 18 is

106
00:04:52.080 --> 00:04:54.040
we have ImagePullPolicy.

107
00:04:54.040 --> 00:04:55.070
It says always.

108
00:04:55.070 --> 00:04:58.000
Well, when I'm building with Skaffold,

109
00:04:58.000 --> 00:04:59.070
I don't really want to push the image

110
00:04:59.070 --> 00:05:01.080
and pull the image because that really adds up

111
00:05:01.080 --> 00:05:04.060
to my overall development cycle.

112
00:05:04.060 --> 00:05:06.090
So in this case, I would rely upon

113
00:05:06.090 --> 00:05:08.090
the default image pull policy.

114
00:05:08.090 --> 00:05:11.050
So delete that from here, save it,

115
00:05:11.050 --> 00:05:12.090
and get out of it.

116
00:05:12.090 --> 00:05:14.050
So now, at this point of time,

117
00:05:14.050 --> 00:05:17.010
I think we are ready to start seeing the effect

118
00:05:17.010 --> 00:05:19.020
of Skaffold, essentially.

119
00:05:19.020 --> 00:05:20.010
So what I'm going to do is,

120
00:05:20.010 --> 00:05:23.000
I'm going to bring a browser, split the screen,

121
00:05:23.000 --> 00:05:24.060
and then bring the browser here.

122
00:05:24.060 --> 00:05:26.060
Now, as you can see, our screen is split,

123
00:05:26.060 --> 00:05:28.020
and on the left side we have terminal

124
00:05:28.020 --> 00:05:30.050
and on the right side we have the browser.

125
00:05:30.050 --> 00:05:33.010
So, let's go ahead, in the browser,

126
00:05:33.010 --> 00:05:39.010
we can say localhost:8080/hello.

127
00:05:39.010 --> 00:05:42.060
Well, this is where we expect our application to go live.

128
00:05:42.060 --> 00:05:44.030
It's not live yet because nothing

129
00:05:44.030 --> 00:05:45.080
has been deployed by Skaffold.

130
00:05:45.080 --> 00:05:48.090
So let's go ahead, in our app directory,

131
00:05:48.090 --> 00:05:53.030
let's run the command skaffold dev.

132
00:05:53.030 --> 00:05:57.030
This took the Docker file, built the Docker image,

133
00:05:57.030 --> 00:06:01.000
used the Kubernetes manifest, deploy that using Kubectl

134
00:06:01.000 --> 00:06:03.030
to the cluster that is configured,

135
00:06:03.030 --> 00:06:06.010
and then deployed all the required artifacts for us.

136
00:06:06.010 --> 00:06:10.040
Now if I go in the browser here, refresh the page,

137
00:06:10.040 --> 00:06:13.060
as you can see in the log, the app just got completed.

138
00:06:13.060 --> 00:06:17.010
So now if I refresh it, walla, we see Hello.

139
00:06:17.010 --> 00:06:18.050
That is indeed the kind of response

140
00:06:18.050 --> 00:06:20.000
that we wanted to see here.

141
00:06:20.000 --> 00:06:22.050
So now, think about your entire development cycle.

142
00:06:22.050 --> 00:06:26.000
You can easily have IntelliJ or NetBeans,

143
00:06:26.000 --> 00:06:29.000
whatever your favorite IDE up and running.

144
00:06:29.000 --> 00:06:30.030
You keep making changes.

145
00:06:30.030 --> 00:06:33.040
As soon as you save it, Skaffold is now listening

146
00:06:33.040 --> 00:06:36.090
for those changes and then it right away builds the image

147
00:06:36.090 --> 00:06:39.020
and deploy that using the manifest

148
00:06:39.020 --> 00:06:41.030
to your Kubernetes cluster.

149
00:06:41.030 --> 00:06:43.070
So enjoy your time debugging your applications

150
00:06:43.070 --> 00:06:46.020
and building your applications using Skaffold.

151
00:06:46.020 --> 00:06:48.040
Let's make sure we clean up Skaffold.

152
00:06:48.040 --> 00:06:52.040
So go to the terminal, Control C,

153
00:06:52.040 --> 00:06:55.010
and this will not only stop Skaffold,

154
00:06:55.010 --> 00:06:58.060
but it'll also remove the deployment

155
00:06:58.060 --> 00:07:00.060
and the service that was deployed

156
00:07:00.060 --> 00:07:03.000
by Skaffold to Kubernetes cluster.

