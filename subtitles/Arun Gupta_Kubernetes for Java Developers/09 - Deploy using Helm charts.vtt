WEBVTT
1
00:00:00.010 --> 00:00:02.070
- [Instructor] We've deployed multiple Kubernetes resources

2
00:00:02.070 --> 00:00:04.060
using multiple manifest files.

3
00:00:04.060 --> 00:00:06.080
We've also deployed multiple Kubernetes resources

4
00:00:06.080 --> 00:00:09.010
using a single manifest file.

5
00:00:09.010 --> 00:00:12.050
Let's see how we can deploy multiple Kubernetes resources

6
00:00:12.050 --> 00:00:14.050
using a single Helm chart.

7
00:00:14.050 --> 00:00:15.070
The first command for that is

8
00:00:15.070 --> 00:00:22.020
to install the Kubernetes Helm CLI.

9
00:00:22.020 --> 00:00:24.060
This command will download the latest Helm CLI

10
00:00:24.060 --> 00:00:26.040
and install it on your machine.

11
00:00:26.040 --> 00:00:29.020
If you already have a prior version of Helm CLI,

12
00:00:29.020 --> 00:00:32.040
then you can of course use GRU upgrade Kubernetes Helm

13
00:00:32.040 --> 00:00:36.080
and that will upgrade to the latest version of Helm CLI.

14
00:00:36.080 --> 00:00:39.080
Let's see what version of Helm it is.

15
00:00:39.080 --> 00:00:44.090
As you see, it says 2.12.1 and that's for the client.

16
00:00:44.090 --> 00:00:47.060
On the server side, it says could not find tiller

17
00:00:47.060 --> 00:00:50.040
because so far we have not initialized our cluster

18
00:00:50.040 --> 00:00:52.070
or the Kubernetes cluster with Helm.

19
00:00:52.070 --> 00:00:54.090
Let's make sure our context is set correctly

20
00:00:54.090 --> 00:00:59.080
so kubectl config get-contexts.

21
00:00:59.080 --> 00:01:01.060
As we have been using in this course,

22
00:01:01.060 --> 00:01:04.030
docker-for-desktop is the right context for us

23
00:01:04.030 --> 00:01:05.070
so now, at this point of time,

24
00:01:05.070 --> 00:01:09.020
I can just say helm init

25
00:01:09.020 --> 00:01:12.020
and this will initialize my Kubernetes cluster with Tiller.

26
00:01:12.020 --> 00:01:13.070
So, essentially, it'll install Tiller

27
00:01:13.070 --> 00:01:16.030
as a component in my Kubernetes cluster.

28
00:01:16.030 --> 00:01:18.020
Now how do we verify that?

29
00:01:18.020 --> 00:01:22.010
I can say, kubectl get pods and it installs Tiller

30
00:01:22.010 --> 00:01:24.020
in the kube-system name space.

31
00:01:24.020 --> 00:01:28.090
So I can specify the kube-system name space here

32
00:01:28.090 --> 00:01:31.040
and here we can see, Tiller is running,

33
00:01:31.040 --> 00:01:33.000
one out of one and in a running state.

34
00:01:33.000 --> 00:01:34.030
So that's good for us.

35
00:01:34.030 --> 00:01:36.030
Now, we need to deploy our Helm chart

36
00:01:36.030 --> 00:01:39.080
as an application to the Kubernetes cluster.

37
00:01:39.080 --> 00:01:43.010
We'll go to manifests charts directory.

38
00:01:43.010 --> 00:01:46.020
Our charts are all existing in this location.

39
00:01:46.020 --> 00:01:48.040
So for now, we're going to look at myapp.

40
00:01:48.040 --> 00:01:51.000
This is a directory where our Helm chart exists.

41
00:01:51.000 --> 00:01:52.030
This is a chart that we explain

42
00:01:52.030 --> 00:01:53.060
in the previous section, as well,

43
00:01:53.060 --> 00:01:55.050
so we're not going to go through the explanation,

44
00:01:55.050 --> 00:01:58.090
but we'll go ahead and now deploy our application.

45
00:01:58.090 --> 00:02:02.090
So helm install is the command that we're going to use.

46
00:02:02.090 --> 00:02:04.090
Give this application a name

47
00:02:04.090 --> 00:02:07.010
and then we will give the top level directory,

48
00:02:07.010 --> 00:02:10.060
where my Helm chart is installed.

49
00:02:10.060 --> 00:02:14.060
We give this command and it creates all my resources.

50
00:02:14.060 --> 00:02:17.050
So deployment, pod, and service

51
00:02:17.050 --> 00:02:20.010
and everything that we wanted to create over here.

52
00:02:20.010 --> 00:02:21.070
Now, with a single command,

53
00:02:21.070 --> 00:02:24.030
we have deployed all the resources.

54
00:02:24.030 --> 00:02:26.060
Let's see how we can see all of those resources

55
00:02:26.060 --> 00:02:28.020
using a single command as well.

56
00:02:28.020 --> 00:02:34.080
So we say, kubectl get service, deployment, and pod.

57
00:02:34.080 --> 00:02:38.010
And it shows that our greeting service is created.

58
00:02:38.010 --> 00:02:40.080
So is deployment and so is pod.

59
00:02:40.080 --> 00:02:41.090
Now let me show you a command

60
00:02:41.090 --> 00:02:45.090
on how we can access the service very easily.

61
00:02:45.090 --> 00:02:52.050
We have been using curl http://localhost:8080/hello.

62
00:02:52.050 --> 00:02:56.020
This is our usual way to access the application

63
00:02:56.020 --> 00:02:58.040
and as expected, we get the response Hello.

64
00:02:58.040 --> 00:03:00.060
Now, this time, our same Java application

65
00:03:00.060 --> 00:03:03.020
packages a docker container deployed as a Helm chart

66
00:03:03.020 --> 00:03:04.090
in the Kubernetes cluster.

67
00:03:04.090 --> 00:03:06.030
Let me show you another command

68
00:03:06.030 --> 00:03:08.040
by which you can easily access this.

69
00:03:08.040 --> 00:03:10.040
So for that, we're going to go to browser

70
00:03:10.040 --> 00:03:14.030
and copy a command.

71
00:03:14.030 --> 00:03:17.050
Here's the command that we're going to copy

72
00:03:17.050 --> 00:03:19.080
and we will paste it here.

73
00:03:19.080 --> 00:03:22.000
Now, what we're doing here is,

74
00:03:22.000 --> 00:03:24.070
we're saying curl http and then,

75
00:03:24.070 --> 00:03:27.080
in the dollar here, we're saying kubectl,

76
00:03:27.080 --> 00:03:31.020
get me the service greeting, use the jsonpath

77
00:03:31.020 --> 00:03:33.070
and in the jsonpath, essentially get me

78
00:03:33.070 --> 00:03:37.000
status load balancer ingress and the host name,

79
00:03:37.000 --> 00:03:38.090
which is going to be local host for us

80
00:03:38.090 --> 00:03:42.050
and then I say colon 8080 slash hello

81
00:03:42.050 --> 00:03:44.080
and this returns the exact same response to us.

82
00:03:44.080 --> 00:03:46.060
Now the advantage of this particular command is

83
00:03:46.060 --> 00:03:49.030
this would work across your different environment,

84
00:03:49.030 --> 00:03:51.090
whether it's your Cloud, whether it's your desktop,

85
00:03:51.090 --> 00:03:53.000
whether it's your home frame,

86
00:03:53.000 --> 00:03:54.010
and this is the universal command

87
00:03:54.010 --> 00:03:56.000
that will work all across.

88
00:03:56.000 --> 00:03:58.040
So, finally, let's go ahead and see

89
00:03:58.040 --> 00:04:00.070
how we can delete our application.

90
00:04:00.070 --> 00:04:03.010
So, in order to delete all the resources,

91
00:04:03.010 --> 00:04:07.000
we got to say purge and give the application name,

92
00:04:07.000 --> 00:04:09.010
and with one single command, once again,

93
00:04:09.010 --> 00:04:11.050
my entire application is now deleted.

94
00:04:11.050 --> 00:04:13.080
Now, if I tried to look through

95
00:04:13.080 --> 00:04:15.060
all the resources once again,

96
00:04:15.060 --> 00:04:18.000
of course, none of them exist anymore.

