WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Arun] In order for Istio to be able to do its work,

2
00:00:03.010 --> 00:00:05.060
we need to create certain Istio resources.

3
00:00:05.060 --> 00:00:08.010
Let's first understand what Istio resources we need

4
00:00:08.010 --> 00:00:11.090
in our case, and then we will create them next.

5
00:00:11.090 --> 00:00:14.010
DestinationRule is a resource that allows

6
00:00:14.010 --> 00:00:17.000
to specify one or more named sets

7
00:00:17.000 --> 00:00:19.080
that represent individual versions of a service.

8
00:00:19.080 --> 00:00:21.090
Each version is uniquely identified

9
00:00:21.090 --> 00:00:24.080
using the labels attached to the pod.

10
00:00:24.080 --> 00:00:26.090
It also defines policies that apply

11
00:00:26.090 --> 00:00:29.020
to traffic intended for a service

12
00:00:29.020 --> 00:00:31.000
after routing has occurred.

13
00:00:31.000 --> 00:00:32.080
These rules specify configuration

14
00:00:32.080 --> 00:00:34.090
for load balancing, connection pool size

15
00:00:34.090 --> 00:00:37.060
from the sidecar, and outlier reduction settings

16
00:00:37.060 --> 00:00:40.090
to detect and evict unhealthy hosts

17
00:00:40.090 --> 00:00:42.080
from the load balancing pool.

18
00:00:42.080 --> 00:00:45.010
Traffic policies can be applied to all sets

19
00:00:45.010 --> 00:00:47.090
or overridden at subset level.

20
00:00:47.090 --> 00:00:50.070
A VirtualService defines a set of traffic routing rules

21
00:00:50.070 --> 00:00:53.010
to apply when a host is addressed.

22
00:00:53.010 --> 00:00:55.080
For example, what weight should we assign

23
00:00:55.080 --> 00:00:58.090
to multiple services defined in this VirtualService?

24
00:00:58.090 --> 00:01:00.090
How many times a HTTP request

25
00:01:00.090 --> 00:01:03.000
should be retried if the request fails?

26
00:01:03.000 --> 00:01:05.030
Another rule could be, what HTTP force

27
00:01:05.030 --> 00:01:07.010
can be injected when forwarding requests

28
00:01:07.010 --> 00:01:09.070
to the destination service?

29
00:01:09.070 --> 00:01:12.080
Actual rules are defined for different protocols.

30
00:01:12.080 --> 00:01:17.040
At this time, HTTP, TCP, and TLS are supported protocols.

31
00:01:17.040 --> 00:01:19.050
The traffic is matched by the protocol,

32
00:01:19.050 --> 00:01:22.030
then it's sent to a named destination service,

33
00:01:22.030 --> 00:01:24.050
or subset or version of it,

34
00:01:24.050 --> 00:01:28.010
that must have been defined by our destination rule.

35
00:01:28.010 --> 00:01:29.090
Gateway describes a load balancer

36
00:01:29.090 --> 00:01:31.040
operating at the edge of the mesh,

37
00:01:31.040 --> 00:01:35.030
receiving incoming or outgoing HTTP/TCP connections.

38
00:01:35.030 --> 00:01:37.010
A gateway allows Istio features,

39
00:01:37.010 --> 00:01:38.090
such as monitoring and routing rules,

40
00:01:38.090 --> 00:01:42.010
to be applied to traffic entering the cluster.

41
00:01:42.010 --> 00:01:44.090
Its specification describes a set of ports

42
00:01:44.090 --> 00:01:47.070
that should be exposed, the type of protocol to use,

43
00:01:47.070 --> 00:01:50.090
configuration for the load balancer, etc.

44
00:01:50.090 --> 00:01:53.020
A VirtualService can then be bound to a gateway

45
00:01:53.020 --> 00:01:54.090
to control the forwarding of traffic

46
00:01:54.090 --> 00:01:57.080
arriving at a particular host or gateway port.

47
00:01:57.080 --> 00:02:00.000
Let's look at some code now.

48
00:02:00.000 --> 00:02:02.060
Now that we understand what these resources are,

49
00:02:02.060 --> 00:02:04.050
let's look at how these resources look like,

50
00:02:04.050 --> 00:02:07.090
particularly for our application.

51
00:02:07.090 --> 00:02:10.090
Let's go to manifest, standalone directory.

52
00:02:10.090 --> 00:02:15.010
I'm going to open up greeting-istio.yml.

53
00:02:15.010 --> 00:02:18.020
All the resources that we need for our application

54
00:02:18.020 --> 00:02:20.090
are defined in this particular one file.

55
00:02:20.090 --> 00:02:23.060
First is, of course, the gateway resource.

56
00:02:23.060 --> 00:02:26.010
It's using the default Istio ingress gateway

57
00:02:26.010 --> 00:02:30.080
and accepts all hosts.

58
00:02:30.080 --> 00:02:33.050
The DestinationRule is a second resource.

59
00:02:33.050 --> 00:02:37.090
It has two subsets named greeting-hello and greeting-howdy,

60
00:02:37.090 --> 00:02:39.060
and the way they're identified are really

61
00:02:39.060 --> 00:02:46.010
by using greeting: hello and greeting: howdy labels.

62
00:02:46.010 --> 00:02:48.060
And, last, we have our VirtualService,

63
00:02:48.060 --> 00:02:51.060
which accepts greeting as a gateway.

64
00:02:51.060 --> 00:02:54.000
It requires greeting.com to be the host,

65
00:02:54.000 --> 00:02:56.050
so, essentially, when somebody's making a request,

66
00:02:56.050 --> 00:02:58.060
either it should be coming from greeting.com

67
00:02:58.060 --> 00:03:01.010
or we should have a host header in the request,

68
00:03:01.010 --> 00:03:04.000
and we'll see this when we actually make the request.

69
00:03:04.000 --> 00:03:07.030
And, here, finally, we have HTTP-based routing,

70
00:03:07.030 --> 00:03:09.040
which is pointing to two destinations.

71
00:03:09.040 --> 00:03:12.030
One of them is a greeting-hello subset;

72
00:03:12.030 --> 00:03:14.030
the other one is a greeting-howdy subset,

73
00:03:14.030 --> 00:03:18.000
and the traffic between them is split 50/50.

74
00:03:18.000 --> 00:03:22.020
So, let's go ahead and create these resources.

75
00:03:22.020 --> 00:03:27.010
(keyboard clicking)

76
00:03:27.010 --> 00:03:29.000
In one command, because all the resources

77
00:03:29.000 --> 00:03:30.030
are together in the same manifest,

78
00:03:30.030 --> 00:03:32.030
we are able to create all the resources.

79
00:03:32.030 --> 00:03:40.050
So, now, let's look at kubectl, get virtualservice,

80
00:03:40.050 --> 00:03:43.040
destinationrule, and gateway.

81
00:03:43.040 --> 00:03:46.050
All our Istio resources have now been created.

82
00:03:46.050 --> 00:03:48.060
Now, remember, our service did not have

83
00:03:48.060 --> 00:03:51.020
a type of load balancer, and so the service

84
00:03:51.020 --> 00:03:54.010
has to be only accessed using the ingress gateway,

85
00:03:54.010 --> 00:03:56.060
because that's exactly where Istio traffic's spreading

86
00:03:56.060 --> 00:03:59.030
and all the Istio rules can be applied.

87
00:03:59.030 --> 00:04:02.070
So, for that, we need the host and the port

88
00:04:02.070 --> 00:04:05.010
where Istio ingress gateway is running.

89
00:04:05.010 --> 00:04:06.080
For that, I'm going to go to the browser,

90
00:04:06.080 --> 00:04:10.080
copy a command to set up my host and port.

91
00:04:10.080 --> 00:04:15.010
Here's the command.

92
00:04:15.010 --> 00:04:19.030
Copy it and paste it here.

93
00:04:19.030 --> 00:04:23.010
It's looking for service istio-ingressgateway

94
00:04:23.010 --> 00:04:25.050
in the istio-system namespace

95
00:04:25.050 --> 00:04:26.090
and getting the load balancer

96
00:04:26.090 --> 00:04:30.010
ingress host name and HTTP2 port.

97
00:04:30.010 --> 00:04:32.020
Now, we just need to access the service

98
00:04:32.020 --> 00:04:34.090
and see how our responses look like.

99
00:04:34.090 --> 00:04:39.040
Let's copy this command.

100
00:04:39.040 --> 00:04:41.060
Let's see what this command is doing.

101
00:04:41.060 --> 00:04:44.060
Well, first of all, we are doing this in a for loop,

102
00:04:44.060 --> 00:04:47.020
so we are invoking it 10 times.

103
00:04:47.020 --> 00:04:49.050
Then we are curling. What are we curling?

104
00:04:49.050 --> 00:04:52.050
We are curling HTTP, ingress host

105
00:04:52.050 --> 00:04:54.070
and port that we just set up.

106
00:04:54.070 --> 00:04:58.030
Hello is, of course, our context of the Java application.

107
00:04:58.030 --> 00:05:02.020
And, we also sending the HTTP host header,

108
00:05:02.020 --> 00:05:05.010
which is required for the ingress gateway

109
00:05:05.010 --> 00:05:07.050
to do the traffic splitting.

110
00:05:07.050 --> 00:05:10.070
K? Let's go ahead and invoke it.

111
00:05:10.070 --> 00:05:16.020
And, rightly, you see three hellos, four howdys,

112
00:05:16.020 --> 00:05:18.040
one hello, two howdys.

113
00:05:18.040 --> 00:05:20.080
Now, you may say, hey, this is four hellos

114
00:05:20.080 --> 00:05:24.000
and six howdys, and our VirtualService said

115
00:05:24.000 --> 00:05:26.020
that the split has to be 50/50.

116
00:05:26.020 --> 00:05:28.080
Now, again, that 50/50 is an approximation.

117
00:05:28.080 --> 00:05:31.040
So, if you do over a large set,

118
00:05:31.040 --> 00:05:34.000
then this would turn out to be 50/50.

