WEBVTT

00:02.110 --> 00:04.680
In the last lecture we had a look at the project structure.

00:04.790 --> 00:11.180
It's equally important if not more important to all understand how our application get started.

00:11.210 --> 00:18.050
How ironic to takes our application and kind of wraps itself around it to make it compilable to a native

00:18.050 --> 00:19.900
application for Cordova.

00:20.300 --> 00:25.670
I already showed you this index this html files last section and as an a normal angular web app we do

00:25.670 --> 00:31.190
find there's an absolute actor in there which kind of is not a normal aged humoral element which instead

00:31.190 --> 00:37.460
seems to be the selector of one of our components which extend probably picked up by some code in the

00:37.460 --> 00:43.360
main Dutchesse file which is our main bundle which bootstraps our angular application as you know it

00:43.370 --> 00:45.580
from a web angler application.

00:45.620 --> 00:50.960
And remember in this in-between step where we see than the browser We just have such a web application

00:50.960 --> 00:52.520
it is no need of app.

00:52.580 --> 00:58.990
So this index HDMI file therefore is pretty much the same as you might know it in a normal web application.

00:59.000 --> 01:04.970
It also includes some reports like code about or Che's which is required for some native device functionality

01:04.970 --> 01:07.440
and we will come to this later in the course again.

01:07.550 --> 01:13.640
But in the end our EPC get started here as a normal web app that we will see a difference if we have

01:13.640 --> 01:15.020
a look at the app folder.

01:15.020 --> 01:20.000
Here we get the files we would expect remaindered to use file which is D where which holds the code

01:20.180 --> 01:25.670
which gets executed first when this panel here is executed and here we have the normal code we know

01:25.670 --> 01:31.520
from a normal angle a web app where we bootstrap a module and the module we bootstrap is the app module

01:31.520 --> 01:32.270
here.

01:32.700 --> 01:39.000
Now the interesting thing about this app module is it looks slightly different than our normal app Marchal

01:39.020 --> 01:41.210
in a normal angular web app.

01:41.330 --> 01:42.500
We do have declarations.

01:42.500 --> 01:43.290
We know that.

01:43.370 --> 01:45.120
But then it starts here with imports.

01:45.140 --> 01:52.550
We import this ionic module when there we execute some for loop method and we pass my app which if we

01:52.550 --> 01:59.360
have a look at it the imports basically is our app component in the bootstrap part here in the bootstrap

01:59.390 --> 02:00.040
array.

02:00.140 --> 02:05.470
Were also not bootstrapping our app component as we would do in a normal web app.

02:05.600 --> 02:11.850
Instead we're bootstrapping ionic app which if we have a look at the top we import from ionic angular.

02:12.170 --> 02:15.930
And then we also have a strange entry component array.

02:16.070 --> 02:19.270
And the providers we're providing something but that's just an aero handle.

02:19.350 --> 02:23.930
Ionic to gives us so bootstrap entry can bullets and imports.

02:23.930 --> 02:28.960
This is not how we used to see it in a normal annual webapps So what is happening here.

02:29.150 --> 02:34.550
Let's start with the ionic module the import here ionic module basically is a module provided by ionic

02:34.610 --> 02:37.820
it which includes a lot of functionalities we will need.

02:37.820 --> 02:44.030
For example it also already includes the forms module A.H. to Depay modules or if you're working with

02:44.030 --> 02:50.480
forms or edge to do an angle or two you don't have to add forms module or re-act the forms module here.

02:50.570 --> 02:53.490
It's already included in the ionic module.

02:53.540 --> 02:55.150
It also does something else.

02:55.250 --> 02:58.820
It has the forat method and we pass our app component here.

02:58.910 --> 03:03.170
If we have a look at this app component besides the code in the constructor to which I come back in

03:03.170 --> 03:03.860
a second.

03:03.950 --> 03:07.180
It looks pretty much like a normal app component.

03:07.250 --> 03:12.650
So we passed this as an argument to for root and what this will do is basically it will configure ionic

03:12.650 --> 03:18.440
to to wrap itself around our app component around our app and thus need it because we need some extra

03:18.440 --> 03:20.060
features I wanted to provide.

03:20.180 --> 03:25.510
For example those modules it automatically gives us but also some other features.

03:25.520 --> 03:31.930
It kind of needs to set up for it to work correctly on a native device for example to all initialize

03:31.970 --> 03:32.720
Cordova.

03:32.810 --> 03:36.810
Make sure that we have access to those native about native device features and so on.

03:36.980 --> 03:41.710
So that's all happening behind the scenes and that is why we can't bootstrap our own app but why we

03:41.720 --> 03:47.840
instead would the ionic app which Nyan will then take into account the configuration done by ionic module

03:47.900 --> 03:54.920
which again keep this in mind wraps itself or kind of uses our app component so we're bootstrapping

03:55.100 --> 04:00.980
our app component plus plus we could say daemonic app simply rhapsode suffer on our air but gives us

04:00.980 --> 04:04.000
some extra functionality and that was all which is happening here.

04:04.010 --> 04:08.840
But it's important to understand and three components is something you might have never seen in the

04:08.840 --> 04:11.430
energy module though what does this do.

04:11.750 --> 04:18.050
Entry component's is rarely used in a normal engine a webapp because entry components allows you to

04:18.260 --> 04:23.210
force angular to create some factories for your components.

04:23.210 --> 04:29.330
That means to be prepared to give you instances of those components in declarations you register your

04:29.330 --> 04:34.910
components to make angular aware of them and then in a normal angular webapp How are you using your

04:34.910 --> 04:43.010
components either by placing a selector in your template or by using the annular router.

04:43.390 --> 04:51.290
It turns out in ionic too you don't use either of the two for your pages and pages is something I come

04:51.290 --> 04:56.590
back to what papers are basically the things you see on your different web pages in your app.

04:56.720 --> 05:00.920
You can still use normal English components and embed them through their selectors.

05:01.010 --> 05:06.890
And indeed if you look at this page here you do see that we already use component's ones provided by

05:06.900 --> 05:07.490
I on it too.

05:07.520 --> 05:12.830
But in the end these are all two components you could have written so you can still use those selectors.

05:12.860 --> 05:17.800
And in this case you wouldn't have to define those components which you use Roosa Electress an app module

05:18.080 --> 05:23.960
but you will learn in the next lectures that ironic to also has a different idea of navigating through

05:23.960 --> 05:24.430
your app.

05:24.440 --> 05:26.420
It doesn't use the Anglo router.

05:26.420 --> 05:32.730
Instead it will have a different concept of loading different screens in your app and each screen.

05:32.810 --> 05:38.960
And again it will come back to this simply has to be registered here to force Engler to be able to give

05:38.960 --> 05:45.410
you an instance of this because normally and ular is able to see in your code if you're about to use

05:45.410 --> 05:49.660
a component you even have a selector or you're referring to it in a router.

05:49.880 --> 05:55.490
Well if you don't do either of the two it has no chance of knowing that you're about to use it and therefore

05:55.490 --> 05:58.370
you have to inform it here in A.E. components.

05:58.370 --> 06:03.290
Again if this is a tiny bit unclear I will come back to this in the next lectures when we talk about

06:03.470 --> 06:06.970
how navigation and I want it to actually works.

06:07.310 --> 06:13.150
So if that were true the app module the key takeaway is you need to register as some components here

06:13.160 --> 06:18.290
an entry component and again it will come back to this and you bootstrapped Leonnig app instead of your

06:18.290 --> 06:19.330
own app component.

06:19.370 --> 06:24.110
But this Indian wraps itself around Europe component plus some extra features.

06:24.380 --> 06:29.390
So if that let's have a look at the app component again this isn't the end loaded for ironic too.

06:29.510 --> 06:34.420
And what we see here is that it looks pretty much like a normal app component though.

06:34.580 --> 06:39.980
One important thing to recognize is that we have some extra code here in the constructor and there's

06:40.100 --> 06:43.290
some code which kind of should be easy to understand.

06:43.310 --> 06:49.310
It basically is a callback added by a ionic which allows us to run some code after we know that the

06:49.310 --> 06:54.410
platform the platform is iOS or Android has been initialized successfully.

06:54.530 --> 06:59.900
Of course when your app starts up it still isn't loaded completely on the device.

06:59.900 --> 07:05.210
This is where you typically see this splash screen so does loading screen and then a platform ready

07:05.210 --> 07:07.120
which is executed right at the beginning.

07:07.190 --> 07:08.650
We kind of can listen to.

07:08.660 --> 07:13.240
When has this ever fully been loaded on that device and then execute some code for example.

07:13.250 --> 07:16.670
Hide the splash screen which is done here automatically.

07:16.670 --> 07:18.260
We really need to work with this.

07:18.260 --> 07:23.360
But if you have some code you want to make sure you only execute after the app is really running on

07:23.360 --> 07:27.600
the device and has been fully loaded this would be a great place to place it in.

07:27.800 --> 07:33.820
But again the default mode here most of the time does the trick with this we had to look at all those

07:33.820 --> 07:39.520
files which are needed for starting our app last week or what I have a look at is the app HVM I'll file

07:39.550 --> 07:41.420
our template of the app component.

07:41.530 --> 07:43.970
And this again might look strange.

07:43.990 --> 07:48.700
It is related to how navigation works and ironic though and that's something we'll have a look at in

07:48.700 --> 07:52.510
the next lectures so that this becomes clearer in the end.

07:52.510 --> 07:58.600
The startup process is like you know it from a normal in Europe most important thing to take away is

07:58.870 --> 08:01.530
ironic wraps itself around your app component.

08:01.540 --> 08:06.820
So with that let's have a closer look at those pages and see how they differ to normal components and

08:06.820 --> 08:08.420
then how navigation works.

08:08.560 --> 08:11.500
And that should also then clear up what entry components does
