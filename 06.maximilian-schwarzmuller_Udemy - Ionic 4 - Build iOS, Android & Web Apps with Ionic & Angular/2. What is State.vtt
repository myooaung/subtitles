WEBVTT

00:02.170 --> 00:06.190
What is state when they say state.

00:06.190 --> 00:08.170
I basically mean data.

00:08.170 --> 00:15.280
I mean data that we use in our application in different ways and all the different kind of data.

00:15.280 --> 00:20.070
I like to think of state as one of three things.

00:20.140 --> 00:25.370
First there is something which I like to call user interface state UI state.

00:25.480 --> 00:30.910
Then there also is temporary or local state and persistent state.

00:30.910 --> 00:33.310
Now these are really just terms I came up with.

00:33.310 --> 00:39.160
It's not a hard definition or anything like that but these are the three categories of data or a state

00:39.160 --> 00:41.650
we're working with in our application.

00:41.650 --> 00:44.120
Now what do I mean with each category.

00:44.410 --> 00:50.840
User Interface state means answers to questions like are we loading something.

00:50.860 --> 00:57.580
So if in a component we're having it is loading property and we're setting this property to True.

00:57.580 --> 01:03.940
When we start fetching data from a server and we set it to false once we're done and we're using that

01:03.940 --> 01:10.630
data to then show a spinner then we're effectively using user interface state because the state of this

01:10.630 --> 01:17.920
component and of what we render on the user interface changed we showed a spinner was we're loading

01:17.920 --> 01:24.460
data now it is is not a state that affects our entire application it affects the page we're on because

01:24.510 --> 01:30.610
where we want to show a spinner and therefore this is what I like to call UI state because it influences

01:30.820 --> 01:36.520
the user interface and it Zephyr managed instead of the component that is responsible for rendering

01:36.520 --> 01:43.350
that part of the user interface now temporary or local state is a bit more than that.

01:43.420 --> 01:50.440
This could be for example a list of loaded events now such a list could be used in different places

01:50.440 --> 01:56.070
of our application we could have a component a page where we render rendered at least.

01:56.230 --> 02:02.500
But when we then added one of the items we basically use data from that same list you could say and

02:02.500 --> 02:08.570
therefore this typically is data which we manage inside of services in an angular application because

02:08.630 --> 02:14.500
serve as this and angular are our cross component communication vehicles if you want to call them like

02:14.500 --> 02:20.710
this and they're all too perfect for letting a component noted our state changed no last but not least

02:20.710 --> 02:25.720
we have that concept or that thing which I like to call persistent state.

02:25.720 --> 02:32.220
Now what's that well the list of loaded events for example would be data we use in the app and we load

02:32.250 --> 02:38.960
these events whenever we added a new one or when our application starts now.

02:38.970 --> 02:46.500
The persistence state is basically our data our state that must not get lost by the user or closing

02:46.500 --> 02:50.180
the application or even by uninstalling the application.

02:50.430 --> 02:55.660
If you're using Facebook you don't want to lose all your friends just because you uninstall t Facebook

02:55.670 --> 03:01.650
app and therefore this could all the be the list of all the events but not just off the events we loaded

03:01.650 --> 03:04.920
in our application even if we happened to load all.

03:05.130 --> 03:12.600
But here I really mean the data that we definitely need for our application and that glues together

03:12.750 --> 03:18.660
our application and therefore design is typically not managed inside of the app or in memory or not

03:18.660 --> 03:26.040
even on on device storage where it could get lost if the user erases his device but on a back and on

03:26.040 --> 03:28.460
a server in a database there.

03:28.470 --> 03:34.260
So this is decoupled from our app but of course still in our app we write code to fetch our data from

03:34.260 --> 03:36.750
there and to save it on a server.

03:36.750 --> 03:42.990
Now for all that data management with a back end with a server with a data base I'll have a separate

03:42.990 --> 03:50.910
module so we'll not focus on that type of state and this module will focus on the UI state and the temporary

03:50.910 --> 03:52.710
and local state in this module.

03:52.740 --> 03:58.560
So Dan for let's in and let's have a look at our application and use all that user input we're fetching

03:58.560 --> 03:59.010
already.
