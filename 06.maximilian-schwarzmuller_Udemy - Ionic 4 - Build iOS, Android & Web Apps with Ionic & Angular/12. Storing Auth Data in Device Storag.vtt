WEBVTT

00:02.180 --> 00:10.010
I want to store the token and I want to store it either in my in browser storage on a Mac or on the

00:10.010 --> 00:15.920
P.C. but I'm not a real device I want to store it on that real device because if I would use the in

00:15.950 --> 00:19.990
browser storage that would be a way lable in that wrapped web app.

00:19.990 --> 00:27.950
The Iona gap is but it might be cleared by the wrapping app shell and it's less reliable than our own

00:27.950 --> 00:33.520
device storage and therefore on the native device I want to use that on the vice storage and capacitor

00:33.560 --> 00:41.300
conveniently gives us access to that storage here under that storage plug in and there we see we should

00:41.300 --> 00:48.250
use that instead of using local storage which would be our normal alternative in web API is and you

00:48.250 --> 00:51.490
can also see that this of course is not meant for high performance data as you see.

00:51.640 --> 00:57.550
You might want to have a look at sequel lite if you need that but it's great for storing key value data

00:57.580 --> 00:59.480
as we have it here.

00:59.590 --> 01:06.730
So let's go back to our offer service now because that is where I now also want to store data in the

01:06.730 --> 01:07.330
storage.

01:07.330 --> 01:14.050
And of course all to retrieve it when our application starts for dad of first of all add a new private

01:14.050 --> 01:20.920
method to yourself service where it which a named store of data and I want to store things like the

01:20.920 --> 01:26.780
user I.D. and the token and important also the token expiration date.

01:26.830 --> 01:35.260
So token expiration date because we need to store that to find out whether the tokens still is valid.

01:35.260 --> 01:40.900
When we come back at a later point of time when we reload the Zap we need to check whether that token

01:40.900 --> 01:46.400
we store is still as valid and we can do so with the help of that token expiration date.

01:46.420 --> 01:49.790
Now next I want to use passenger in here.

01:49.900 --> 01:57.160
So they offer all imports something from at capacitor core and that something is the same thing we used

01:57.160 --> 01:58.120
before.

01:58.120 --> 02:10.820
That would be our plug ins object now in stored data store off data I'll use plug in or plug ins excuse

02:10.820 --> 02:19.050
me storage and then there we have our various methods for interacting with the storage.

02:19.200 --> 02:25.470
For example here we need to set method the set method allows us to store a key value pair and we have

02:25.470 --> 02:32.100
to pass an object to set where we defined a key and then also the value we want to store for that key

02:32.280 --> 02:35.520
and later we can retrieve data by that key.

02:35.550 --> 02:44.400
Now the key here could be just of data which should be a string though of data and the value should

02:44.400 --> 02:51.790
be a string and therefore all merge these three fields into a string you fight object so I'll create

02:51.790 --> 02:54.490
a new data constant.

02:54.730 --> 03:01.420
That will be a javascript object where I have my user I.D. stored in the user I.D. property tokens stored

03:01.420 --> 03:07.480
in the token property and token expiration date stored in the token expiration date property.

03:07.480 --> 03:11.190
Now this is a javascript object and we can store an object in there.

03:11.200 --> 03:18.040
We need to store a string conveniently we can use Jason string ify to turn that object into a string

03:18.160 --> 03:24.040
in JavaScript and then it's that data string which I'm storing here in the end.

03:24.340 --> 03:29.610
So this store is data we of course also want to retrieve data.

03:29.620 --> 03:38.030
However not just store it but first of all let's use our store off data method here sets user data looks

03:38.030 --> 03:42.890
like a good place because this isn't the end what we call for both signing up and logging in.

03:43.490 --> 03:53.210
So inset user data when we emit our new user we can also call this store of data and there we now for

03:53.210 --> 04:04.580
word user data local I.D. which is that user I.D. user data token a token which is that token and that

04:04.580 --> 04:06.980
expiration time we're creating there.

04:06.980 --> 04:12.080
We all have forward that but since I need a string we call to ISO string here

04:15.110 --> 04:17.050
now we're storing data.

04:17.120 --> 04:19.640
Let's next focus on retrieving that data.
