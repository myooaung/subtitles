WEBVTT

00:02.160 --> 00:06.720
Now this is all related to how we can fix our app in the browser

00:06.750 --> 00:17.500
but what about our native app? For this, I'll close my server and I'll run ionic capacitor run android

00:17.530 --> 00:20.870
-l here to start with Android debugging.

00:21.010 --> 00:26.320
Now as you learned in the last module, this command will start our development server,

00:26.320 --> 00:34.900
it will also start up our Android Studio and it will connect Android Studio or the native app we have

00:34.930 --> 00:41.860
there and our development server, so this is all done for us and all we need to do then is once this is

00:41.860 --> 00:43.350
done starting up here,

00:43.450 --> 00:51.520
we just have to launch this app on one of our simulators. So I'll launch it here, select any simulator

00:51.520 --> 00:58.800
of your choice and that will therefore then start and once it is started, it will hold your application.

00:58.850 --> 01:03.220
This is still the old one, let's wait for the new one to compile and start because that's then the one

01:03.220 --> 01:08.040
connected to our live reload server and here it is.

01:08.190 --> 01:11.900
Now how could we see our console log here?

01:12.060 --> 01:16.840
We don't see it in the browser for this native app, there we only see the one of the browser application,

01:16.860 --> 01:19.780
how do we see our console log for the native app?

01:19.980 --> 01:26.880
Well here in Android Studio, if you go to the run tab down there, you see an output about your running

01:26.880 --> 01:28.040
application.

01:28.080 --> 01:36.190
Now there you see a lot of messages and it can be hard to find your own console log statements but you

01:36.250 --> 01:37.630
will eventually see it,

01:37.630 --> 01:44.770
here it is. There you see our data, that is our console log statement in the end which is in there amongst

01:44.800 --> 01:46.400
all the other statements

01:46.630 --> 01:51.730
and if you are having problems seeing it clearly, well you can always do of course, just a little trick,

01:52.120 --> 02:01.070
you can throw in a console log statement with a big fat capital letters LOADED RECIPES,

02:01.070 --> 02:07.370
so basically some identifier which you can easily spot in your log there and that will then help you

02:07.550 --> 02:13.010
find the other log if you place that good spottable of a log right in front of the one you're interested

02:13.010 --> 02:13.620
in.

02:13.640 --> 02:21.030
So here it's reloading and once it did reload, here we now see loaded recipes, that's a bit easier to

02:21.030 --> 02:27.760
see, we also see it here and then here is our output. So console log statements can be seen there too,

02:27.780 --> 02:32.570
a bit harder to see but you can still identify them here.

02:32.610 --> 02:35.140
What about breakpoints or detailed inspection?

02:35.610 --> 02:38.530
Well for Android apps, Chrome helps you with that.

02:38.700 --> 02:44.580
You can visit chrome://inspect in your browser, in your Chrome browser and that will

02:44.580 --> 02:52.680
open up a page where you should actually see your web app here on your emulator,

02:52.680 --> 02:57.810
here it also says emulator and this will even work for a real device connected to your machine

02:57.810 --> 03:03.510
if it is setup with USB debugging and so on. Now here you can click inspect,

03:03.610 --> 03:09.310
this should open up a new window where you now are connected to your Ionic app running in your

03:09.310 --> 03:10.570
native device

03:10.570 --> 03:13.830
and here you see the console log output in a nicer way,

03:14.050 --> 03:20.920
for this app now, not for the one in the browser but for the real native app here and you can also use

03:20.920 --> 03:23.680
all the other features you are used to.

03:23.680 --> 03:29.170
So here, you have your network tab for outgoing requests from that native device app here,

03:29.410 --> 03:33.270
you can inspect your source code and you can also set breakpoints there.

03:33.280 --> 03:44.030
So here if I dive into my webpack folder, into recipes and then recipe detail, in there if I set a breakpoint

03:44.090 --> 03:54.320
in let's say here after I fetch my recipeId, if I now go back here on the native device and I go

03:54.320 --> 03:55.290
back in,

03:55.340 --> 04:00.600
this gets paused again and I can inspect this but now that is the code running in the native device.

04:00.680 --> 04:06.260
So we basically have the same tools, also for performance, memory and the elements that we know from

04:06.260 --> 04:07.000
the browser

04:07.010 --> 04:13.220
but now for the native app and that of course really helps with debugging native apps. But that's Android,

04:13.220 --> 04:14.240
what about iOS?
