WEBVTT

00:02.410 --> 00:04.810
Now what about sizing of items? Here

00:04.810 --> 00:08.790
these items are basically only as high as their text

00:08.830 --> 00:10.160
and that's the default.

00:10.210 --> 00:14.280
These items are as high as their content requires them to be

00:14.380 --> 00:17.300
unless you set an explicit height for the row.

00:17.440 --> 00:25.390
So if on that row, I would quickly with an inline style set a height of let's say 300 pixels,

00:25.600 --> 00:32.170
if I would do that on the row, then you will see that the columns automatically take the full height

00:32.170 --> 00:40.390
of the row. So the columns take all the height of the row but the row only takes as much height as required

00:40.390 --> 00:41.950
by its highest child,

00:42.070 --> 00:47.500
so it's kind of that circular dependency which you can break by assigning an explicit height here to

00:47.500 --> 00:48.490
row 

00:48.490 --> 00:52.910
or of course you can also have a column that contains some bigger content.

00:53.170 --> 00:58.770
For example here, if I do you add a card again or any other content, doesn't have to be a card,

00:58.780 --> 01:12.810
could be a div, a paragraph, whatever you want and in there, I have an h1 tag, the column, row 1 col 2,

01:12.820 --> 01:18.880
so now this clearly will take up more height because we have an h1 tag and a paragraph in there.

01:18.910 --> 01:26.920
Now you will see that the first column here is also just as tall as the second one simply because

01:27.040 --> 01:32.990
by default the row is as high as required by its tallest child which would be this child here

01:33.160 --> 01:38.090
and therefore this column here basically adjusts.

01:38.290 --> 01:44.410
You can overwrite that however, if you don't want to stretch items like this, you can control how this

01:44.410 --> 01:46.120
should be positioned vertically,

01:46.120 --> 01:52.690
so from top to bottom. Right now, the default is stretch but you can overwrite this and the official docs

01:52.780 --> 01:59.920
as always are of help for that. In the component docs, if you search the grid there and you click on

01:59.920 --> 02:07.090
ion-grid, you'll find a link to the grid layout detailed documentation. There in general, you can learn

02:07.210 --> 02:13.750
all about the grid and I strongly recommend checking that out and you'll also find more about the alignment

02:14.200 --> 02:19.570
and you'll learn that for vertical alignment, you can use these utility attributes, the same by the

02:19.570 --> 02:23.500
way also for horizontal alignment which we'll also have a look at.

02:23.530 --> 02:28.930
So now what can we set there? On your row, not on the column but on your row,

02:28.930 --> 02:36.040
you can set align items and now the default is stretch. So therefore if I set stretch here, nothing

02:36.040 --> 02:37.300
will change as this reloads

02:37.300 --> 02:38.960
because this is the default,

02:38.980 --> 02:47.440
they stretch across the vertical space. But if I set this to start for example, so align items start,

02:48.040 --> 02:50.250
you will see a difference.

02:50.290 --> 02:57.610
Now these items by default will only take the height as required by their content, not of the entire row

02:57.610 --> 03:04.120
and then they are positioned at the start, seen from top to bottom and the start from top to bottom is

03:04.120 --> 03:06.340
of course at the top.

03:06.640 --> 03:13.100
Of course you also have align items end and if you know the CSS flexbox specification in CSS,

03:13.110 --> 03:19.120
you of course will probably already have recognized that this in the end will just set the CSS

03:19.120 --> 03:23.290
property align items to flex start or flex end.

03:23.290 --> 03:29.980
So with end, align items end, it's pushed all the way to the bottom if it does not take the full height

03:30.070 --> 03:39.010
of the row by default. Now of course you also have center and that is by the way a nice way of vertically

03:39.010 --> 03:46.060
centering an item here which historically has always been tricky in HTML and CSS with the help of

03:46.060 --> 03:52.180
flexbox and therefore here with the help of Ionic grid, it's not difficult anymore.

03:52.180 --> 03:55.990
Now of course, you can not just vertically position your items,

03:55.990 --> 03:59.930
what about horizontal positioning? For that,

03:59.950 --> 04:03.990
you can also add a CSS utility attribute to your ion-row

04:04.000 --> 04:07.280
and that would be justify-content-

04:07.360 --> 04:10.640
and now you can set this for example to start.

04:10.770 --> 04:12.900
Now what happens if you set it to start though?

04:15.740 --> 04:17.430
Nothing, right?

04:17.540 --> 04:21.410
You'll see the effect if you remove the offset.

04:21.410 --> 04:29.640
So if I remove the offset from the first column and it reloads, we see what we had before, it is all

04:29.640 --> 04:31.050
the way on the left.

04:31.050 --> 04:38.700
Now let me show you justify-content-end, you will now see that the content, these two columns here

04:38.850 --> 04:43.420
get pushed all the way to the right without an offset being set.

04:43.590 --> 04:50.280
So you can also center items manually with the help of the offset and that can be especially useful

04:50.280 --> 04:57.600
when working with different layouts for different device sizes but you can also control it here with

04:57.600 --> 05:04.770
justify-content-end or justify-content-center for example for horizontal centering.

05:04.770 --> 05:07.770
So that is also worth keeping in mind, though

05:07.860 --> 05:14.160
I really want to emphasize if you are building a grid that should look and behave differently on different

05:14.160 --> 05:19.680
screen sizes, you'll have an easier time when using the offset attribute

05:19.740 --> 05:25.890
and speaking of that, let's dive into how you can ensure that your grid looks good on different screen

05:25.890 --> 05:26.400
sizes.
