WEBVTT

00:02.040 --> 00:08.370
With firebase added It's time to actually start working on the web and add a way to authenticate ourselves.

00:08.490 --> 00:11.920
I'll do this by adding a new service here.

00:11.930 --> 00:17.670
The off service I'm going to name it offered to ts as to file name and in there the service is named

00:18.090 --> 00:20.520
of service just like this.

00:20.850 --> 00:26.650
In this service I'll add a couple of helper methods and we're going to expand the service throughout

00:26.670 --> 00:28.050
the supplication.

00:28.050 --> 00:34.350
The first method I need is a sign up method because I want to allow the user well to sign himself right

00:34.440 --> 00:41.010
to create a new user sign up method will receive the email the user entered and the password he entered.

00:41.160 --> 00:43.580
So both are of course of type string.

00:44.250 --> 00:49.860
And then once you sign the user up not that is why I added the firebase STK it has a helper method for

00:49.860 --> 01:02.280
this so I'm importing firebase from firebase here and then I will simply call firebase off this method

01:02.280 --> 01:02.870
here.

01:02.910 --> 01:03.940
It's a method call.

01:04.300 --> 01:07.720
Recognized this and then changed that method.

01:07.830 --> 01:13.150
It's called True Yate user with email and password and it's pretty self-explanatory.

01:13.170 --> 01:16.240
It creates a user with email and password passed to this method.

01:16.260 --> 01:19.540
So here in passing email and password and this is all.

01:19.590 --> 01:24.630
Now it's important to understand what happens behind the scenes because if you're using your own back

01:24.630 --> 01:29.740
and or a different back and you won't have the firebase SDK you won't have this method right.

01:29.770 --> 01:34.340
You're probably sending HGP request and we will learn how to do that later.

01:34.380 --> 01:39.350
You're probably sending HTP request to your own restful API.

01:39.810 --> 01:46.470
Now basically firebase of create user with E-Man password does the same behind the scenes.

01:46.470 --> 01:53.730
It will probably encode our data and then send it to some restful API endpoint on some of Google's servers

01:53.970 --> 01:57.240
where it will actually be validated and so on.

01:57.390 --> 02:00.590
And then actually create a user for us on the server.

02:00.840 --> 02:06.690
Now it is all hidden behind one method this whole HDB be send request process and so on the error handling

02:06.690 --> 02:08.220
it probably hasn't place.

02:08.310 --> 02:11.320
So that makes it very convenient to use but it's key to understand.

02:11.340 --> 02:12.620
You could do this on your own.

02:12.620 --> 02:18.060
You could just send the request to your own back and handle any potential errors and you good to go.

02:18.390 --> 02:25.080
So with this we're sending this request I want to return the result of this method call here because

02:25.080 --> 02:28.350
the result will actually be well an error.

02:28.350 --> 02:33.930
For example if the email address is already taken or not a valid email address because firebase will

02:34.020 --> 02:39.830
validate our data for us on the server so I'm sending this request now.

02:39.840 --> 02:41.580
From where do I want to send it.

02:41.580 --> 02:47.640
Though of course from the sign up file here from the sign up page because you're in on Sign-Up I don't

02:47.640 --> 02:49.560
want to log my values.

02:49.560 --> 02:56.610
I want to use the service instead and send this data to the firebase river to create a new user.

02:56.670 --> 03:05.350
Now in order to use the service we need to provided here in the app module of service like this and

03:05.350 --> 03:12.010
then indeed sign up component I will simply inject disservice so that we're able to use to sign up method

03:12.010 --> 03:13.290
we just create it.

03:13.330 --> 03:19.570
So you're all in jeopardy of service as we always check out our services just like this.

03:19.600 --> 03:23.450
Make sure to be at the import pointing to the services folder.

03:23.680 --> 03:29.340
And then on the on sign up method I of course want to reach out to the office service.

03:29.380 --> 03:35.050
So I want to call off service sign up and pass my user data here.

03:35.080 --> 03:41.950
Now I want to pass my e-mail and I want to pass my password.

03:41.950 --> 03:47.950
I know that those two properties exist undeformed value optic because these are the names I chose and

03:47.950 --> 03:53.570
the template of the site up for an email and password.

03:53.590 --> 03:57.740
Now with this we're sending this request to firebase.

03:57.760 --> 04:04.630
Now remember in the sign up method I actually returned the result of this request where I return the

04:04.630 --> 04:07.100
result of this method call I should say.

04:07.270 --> 04:13.900
Now the result actually is a promise which will of course resolve if this was successfully and well

04:14.110 --> 04:14.860
be rejected.

04:14.860 --> 04:15.960
If we have an error.

04:16.030 --> 04:21.670
So we should handle both cases did then block we'll handle the case that we successfully created a new

04:21.670 --> 04:24.170
user in this case.

04:24.190 --> 04:30.560
For now I simply want to output or I will want to log this to the console.

04:30.610 --> 04:38.380
So you're all take any data we may receive and simply lock this data to the console.

04:38.690 --> 04:40.270
Well I guess no way.

04:40.280 --> 04:42.730
No need to structured like this.

04:42.730 --> 04:50.530
I also want to catch a potential error or unlock error or to the console so that we get a feeling for

04:50.710 --> 04:53.440
what firebase actually does for us here.

04:53.770 --> 04:59.560
So this is the finished on Sign-Up method for now this call to the sign up method in our service which

04:59.560 --> 05:03.050
will actually use firebase to try to sign up or a user.

05:03.250 --> 05:09.210
And then then for the success case and catch for any potential errors.

05:09.220 --> 05:13.930
Now with this app still running I can't or with I on a server still running I should say I can save

05:13.930 --> 05:19.800
just recompile the app and now if we have a look at our running application here.

05:20.290 --> 05:24.700
Let's actually go to the Sign-Up page and I want to start with valid data.

05:24.700 --> 05:28.360
So a task that test that comma should be a valid email address.

05:28.480 --> 05:33.100
Also add a valid password and click sign up and we do get some data.

05:33.130 --> 05:39.250
Now it might look very cryptic but I can tell you this is the success case you will be able to tell

05:39.250 --> 05:42.640
that this was the success case if it looks like sign up one more time.

05:42.730 --> 05:46.510
So we're sending the same e-mail address again which shouldn't work because we already have a user with

05:46.510 --> 05:47.800
this e-mail address.

05:47.830 --> 05:49.930
And indeed now we get an error.

05:50.050 --> 05:55.050
And as you can see we can get an error message the e-mail address is already in use by another account.

05:55.120 --> 05:59.740
So this was generated by firebase for us and we could output this message.

05:59.770 --> 06:01.950
And actually we will output this later.

06:02.080 --> 06:05.580
For now this is the base functionality working.

06:05.770 --> 06:09.220
And we can see that it worked in the firebase console.

06:09.280 --> 06:15.850
If we go to authentication again here you see this new user was created a second ago.

06:16.120 --> 06:20.820
So now I'm going to delete the account for now so that we can reuse this e-mail address.

06:20.830 --> 06:23.860
Of course you could also keep it if you don't plan on recreating it.

06:24.010 --> 06:27.480
But with that we get the basic sign up functionality working.

06:27.580 --> 06:35.950
However we can still improve this by for example showing some loading screen when we actually are sending

06:35.950 --> 06:38.070
the request and waiting for a response.

06:38.080 --> 06:41.960
So let's find you in this sign up page in the next lecture.
