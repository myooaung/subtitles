WEBVTT

00:02.920 --> 00:09.580
So with that dummy places added and our places service in its first basic version added, let's use

00:09.580 --> 00:14.920
these places and let's start in the discover page where I want to output them. In the discover page, I

00:14.920 --> 00:23.610
therefore will inject my places service, places service which is possible by the way because places

00:23.670 --> 00:29.400
service here has add injectable with provided set to root, if you wouldn't have that, we could still

00:29.400 --> 00:34.740
inject it but then we would have to add it to providers in the app module, that service.

00:34.740 --> 00:36.550
So that's just important to highlight

00:36.690 --> 00:39.990
but with provided in root here, it's auto-provided

00:40.110 --> 00:45.100
and now we can inject it anywhere in this application, for example in the discover page of course

00:46.110 --> 00:49.630
and I want to fetch my places when we load that page.

00:49.670 --> 00:55.080
Now I will do that in ngOnInit here because for now, that will work but be aware that of course

00:55.080 --> 00:56.850
with all that caching and so on,

00:56.850 --> 01:01.200
by the way pages are also cached when you were going from tab A to tab B,

01:01.380 --> 01:07.700
so be aware that with the caching, ngOnInit will not run every time this page becomes visible.

01:07.710 --> 01:14.350
For now, I have no way of changing my places anyways, so I don't need to be able to update them and therefore

01:14.370 --> 01:24.330
fetching them one time only is fine. Hence here, I'll first of all add my own places or loaded places

01:24.330 --> 01:30.990
property in the discover page, that is of type place and therefore you need to import that from your

01:30.990 --> 01:35.520
place model and that will be an array of places actually and in ngOnInit,

01:35.550 --> 01:43.710
I'll set this loaded places equal to this places service which is a property of this class because I added

01:43.710 --> 01:48.780
private in front of this argument which automatically binds this argument to an equally named private

01:48.780 --> 01:54.600
property of the class and therefore here in places service, I can access places which uses this places

01:54.630 --> 01:59.600
getter I defined. So that loads us some places, in the template

01:59.610 --> 02:07.100
now of that page, we can now add code to render the places. For that, I'll actually construct the ion grid

02:07.110 --> 02:12.740
here with an ion row and ion column because I want to control the width of that featured place

02:12.750 --> 02:19.930
I want to have at the top. So for that here right at the top, I want to add an ion card in that ion

02:19.940 --> 02:27.520
column, that should display my featured place. In that card, we can add an ion card header with an ion

02:27.520 --> 02:32.230
card title and the title now of course should be my featured place title.

02:32.440 --> 02:36.690
Now at the moment, I only have my places array,

02:36.700 --> 02:46.780
so what we could do here is we simply access place loaded places and then the first element and then

02:46.780 --> 02:52.380
the title of that element, that is my featured element, the first element of my loaded places always

02:52.380 --> 02:55.670
is my featured element. Outside of the ion card header,

02:55.720 --> 03:00.700
I want to have an image that takes the full width of that card and therefore we add it right here below

03:00.700 --> 03:06.580
the header, an ion image and the source of that image should be the URL, the image URL of our

03:06.580 --> 03:07.250
place,

03:07.360 --> 03:17.230
so source is property bound to loaded places, the first element and then the image URL. Below the

03:17.230 --> 03:23.600
ion image, we'll add the ion card content to wrap the rest of the content we want to display

03:23.610 --> 03:32.230
and for me here, that will simply be my description, so I'll simply add a paragraph here where I output

03:32.230 --> 03:38.890
with string interpolation loaded places, the first element and then the description. Now the price would

03:38.890 --> 03:44.430
also be interesting to see and I'll add that below the ion card title with the ion card subtitle and

03:44.440 --> 03:47.950
in there, we can set the output loaded places,

03:50.260 --> 03:56.560
price like this and let's add /night after that,

03:56.580 --> 04:02.020
now that's hardcoded text here, simply not referring to anything dynamic, not referring to an Angular

04:02.020 --> 04:07.420
property, that is just some text and I also want to format this as a currency and for that, we can use

04:07.420 --> 04:12.580
the currency pipe Angular ships with which you add with a pipe symbol and then currency and that's

04:12.580 --> 04:19.270
a default Angular feature not related to Ionic, it just transforms this price to look like dollar currency

04:19.270 --> 04:25.520
out of the box. You could configure that but the official docs are the place to go for that and when we save

04:25.520 --> 04:30.680
this and we go back, this is what we should see. If you getting an error here by the way, try restarting

04:30.680 --> 04:35.960
the Ionic serve process, quit it with control C and then rerun Ionic serve, sometimes you need to do

04:35.960 --> 04:42.140
this after adding new files to the project like we did with our service, that looks beautiful. Now on

04:42.140 --> 04:48.080
a non-mobile device, this card is super big though and that is exactly what I want to control with my

04:48.080 --> 04:55.390
ion grid here in the template. That is why I did wrap my card into the ion grid because on this ion

04:55.400 --> 05:04.310
column here, we can now set a default size of 12 but for let's say smaller screens or bigger, we'll

05:04.310 --> 05:11.720
set it to 8 and add an offset for the same screen size of 2, so that this is a bit centered. I also want

05:11.720 --> 05:18.290
to center all the text that's in there, so the text inside of the card too, this then is applied to all

05:18.290 --> 05:25.230
the child elements, thanks to CSS inheritance. This looks better, now the card isn't as large, 

05:25.230 --> 05:31.440
it's still big and you could shrink it down further by playing around more with the CSS grid, with

05:31.440 --> 05:33.060
the Ionic grid sizes

05:33.090 --> 05:36.500
but for me that will do, we'll dive deeper into the Ionic grid later,

05:36.510 --> 05:39.740
don't want to spend too much time on it right now.

05:39.750 --> 05:40.320
This is nice,

05:40.320 --> 05:42.060
that's the featured place,

05:42.060 --> 05:46.780
now what about the other places we have? With the featured place

05:47.240 --> 05:48.600
in place,

05:48.800 --> 05:57.440
let's also add other places and for this, I'll add another ion row and another ion column with exactly

05:57.440 --> 06:05.230
the same size set up as the card, so that it's nicely aligned below the card and in here,

06:05.250 --> 06:12.970
I want to render all the other places I have. We can use an ion list for this with ion items in there

06:12.970 --> 06:16.950
and then use ngFor to loop through all our places.

06:16.960 --> 06:21.790
Now it's up to you if you want to loop through all the places including the featured one or only the

06:21.910 --> 06:24.240
other places that are not featured yet.

06:24.490 --> 06:29.350
I'll go through all the non-featured places by creating a place variable, you can name this whatever you

06:29.350 --> 06:32.250
want and going through our loaded places

06:32.350 --> 06:39.820
and now to get only the one that's not featured, we can use slice here and start at index 1 and this

06:39.820 --> 06:45.580
will basically take all the places, all the elements in this loaded places array after the first element

06:45.580 --> 06:53.680
which is our featured element. Ion item is then replicated for all these places and in there, I'll add

06:54.520 --> 07:01.440
an ion thumbnail component which you can also find in the official docs,

07:01.440 --> 07:08.250
you saw ion avatar before, thumbnail is basically similar but doesn't render a rounded image but a

07:08.250 --> 07:15.950
square image and I'll give this a slot of start to position it on the left inside of this ion item,

07:15.950 --> 07:22.100
so the slot refers to the surrounding ion item and inside of ion thumbnail, you use an ion image

07:22.100 --> 07:23.220
typically

07:23.240 --> 07:29.030
and here again I bind my source dynamically, in this case to place because I get a place here when I

07:29.030 --> 07:35.950
loop through all the places, image URL. Now besides the thumbnail and the place,

07:35.980 --> 07:42.940
I'll then also add an ion label which you should use as a wrapper for the other text next to your thumbnail,

07:42.940 --> 07:48.580
especially if you plan on using multiple text elements which I'll do and then I'll add a h2 tag here

07:49.020 --> 07:50.540
where I output the place

07:50.570 --> 08:00.070
title and beneath that, paragraph tag with the place description, something like that.

08:01.490 --> 08:07.820
Now with that if we save this, let's have a look at our results here on the page as it reloads,

08:07.820 --> 08:09.800
here we see the other places.
