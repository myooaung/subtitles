WEBVTT

00:02.070 --> 00:08.340
So we had to do quite a few steps to get that token with the token now I can add a helper method in

00:08.340 --> 00:15.240
a shopping list service which are named store list and where I expect to get this token which is just

00:15.240 --> 00:16.180
a string.

00:16.530 --> 00:23.410
Now here we can use the normal angular HTP service which you already know from the web app and to use

00:23.460 --> 00:29.550
as we need to inject it which means we need to add injectable to our service to allow the injection

00:29.580 --> 00:32.460
of services into this service.

00:32.460 --> 00:42.330
I then add a constructor and I inject the angular HDP service like this.

00:42.540 --> 00:49.540
Now in a normal web app you now need to make sure that you have D.H. Depay module added to your imports

00:49.540 --> 00:50.220
array.

00:50.340 --> 00:55.470
You don't need to do this for this app here though because ionic module will automatically provide you

00:55.470 --> 00:57.460
with the HTP service.

00:57.660 --> 01:03.460
Therefore we don't have to do it here we can go back to shop the service we can inject at the angular

01:03.490 --> 01:07.890
HTP service like this and install liest.

01:08.070 --> 01:16.740
I will now use the service to put some data on firebase and I chose put because I don't want to added

01:16.740 --> 01:18.330
to existing data.

01:18.540 --> 01:25.920
I want to overwrite the old data because I'm going to put an array of list items to add service to that

01:25.920 --> 01:30.390
database and I want to overwrite any existing array of items.

01:30.480 --> 01:34.560
And then you would need to use put if you use post here.

01:34.860 --> 01:42.310
Firebase will simply add your array of items to the existing array of arrays of items.

01:42.360 --> 01:45.720
So you will have a bigger array of sub arrays of items.

01:45.720 --> 01:48.240
It will not merge those items automatically.

01:48.240 --> 01:51.350
That is why I decide to override them with put.

01:51.360 --> 01:54.090
Now what's the address of our server.

01:54.180 --> 01:58.620
Let's have a look at firebase you can find it here under database.

01:58.620 --> 02:04.940
This address is the address of your own firebase project and therefore of your database.

02:05.100 --> 02:08.190
You can't just copy this and enter it here.

02:08.220 --> 02:13.050
You can also store it in some global conflict variable which you use for all your services if you prefer

02:13.050 --> 02:14.240
this.

02:14.250 --> 02:16.160
I'm going to keep it here though.

02:16.470 --> 02:19.580
And with that added We can now work on this you are Elb.

02:19.620 --> 02:24.410
This will lead to the overall database but this is not where I want to store the data.

02:24.690 --> 02:32.760
Instead I want to store the data in kind of a subfolder you could say in my database for the currently

02:32.760 --> 02:39.270
active user firebase actually as Mongo D-B like database.

02:39.330 --> 02:46.470
So no sequel database and therefore we can structure it as a javascript object and now a want to create

02:46.470 --> 02:48.270
a seperate sub object.

02:48.270 --> 02:55.410
You could say a property for the currently locked in users so that each user has its own node of data

02:55.410 --> 02:57.240
in this database.

02:57.330 --> 03:02.780
For that I will need to inject the officer off service because there I have a method to get the currently

03:02.790 --> 03:04.290
active user.

03:04.290 --> 03:11.820
So the off service like this make sure to also add the import of course and with the off service inject

03:11.820 --> 03:12.420
that.

03:12.670 --> 03:20.020
I will now store the user id in and you help a variable user ID and I can get it from the off service

03:20.020 --> 03:25.590
by getting the active user and they're accessing the new id property firebase gives me.

03:25.630 --> 03:29.830
Which simply is the unique ID off the user on the back end.

03:30.060 --> 03:32.950
And now I can simply add this to my POV.

03:33.370 --> 03:39.010
User ID and then complete my path by adding another slash.

03:39.010 --> 03:42.380
Whoops that should be a plus here.

03:42.740 --> 03:49.760
By adding another slash and then one target shopping list.

03:49.880 --> 03:50.870
Chaisson.

03:50.990 --> 03:57.020
This name is up to you though Didcot Chaisson is mandatory otherwise you will get an error because we

03:57.020 --> 04:03.670
will send Chaisson data there and we do need to put that Chaisson to the end of our you are l to inform

04:03.680 --> 04:06.410
firebase shopping list.

04:06.410 --> 04:07.610
This party is up to you.

04:07.610 --> 04:08.850
You could name this s l.

04:08.870 --> 04:12.320
What ever you want but since I will store the shopping list items there.

04:12.320 --> 04:14.410
This sounds like a fitting name to me.

04:14.840 --> 04:16.880
Now of course we also need to send some data.

04:16.880 --> 04:18.720
Right now we're not doing this.

04:18.800 --> 04:21.380
I will simply send the list.

04:21.440 --> 04:29.930
So as a body I will send this ingredients the list of ingredients I have in the service already here.

04:30.460 --> 04:35.950
This is all this will automatically then transform it to Jason and send it with the request.

04:36.500 --> 04:42.230
And of course as always the HTP service year returns and observable.

04:42.230 --> 04:45.850
So therefore we need to subscribe to actually sent request.

04:45.850 --> 04:48.460
This is normal angular behavior.

04:48.470 --> 04:50.540
Now I don't want to subscribe here.

04:50.570 --> 04:57.080
I will instead simply return the observables so that I can subscribe in the page where I'm calling this

04:57.140 --> 04:58.900
storm list method.

04:58.940 --> 05:00.140
I do want a map.

05:00.140 --> 05:02.340
Any potential response I get though.

05:02.510 --> 05:06.940
So here I know I'll get a response of type response type responses.

05:06.950 --> 05:08.180
Imported from.

05:08.230 --> 05:13.210
At angular h to d p like d HTP service was.

05:13.580 --> 05:21.680
And this response your will simply be returned in a way that I extract the data as a Charvis could object

05:21.680 --> 05:23.670
with that Jason helper method.

05:23.900 --> 05:31.940
Now in order to use map here I also need to unlock does operator though and I do so by importing are

05:31.940 --> 05:33.930
ex-chief as Slash R x.

05:33.950 --> 05:36.690
You may know this from a normal angular web.

05:36.710 --> 05:39.150
There is nothing ironic too specific about this.

05:39.170 --> 05:42.830
This unlocks observable operators with that can use map.

05:42.830 --> 05:49.250
With that we can extract the body of this response and turn it into a javascript object.

05:49.250 --> 05:55.120
Now the store list helper method is almost finished but we're not using the token right.

05:55.190 --> 05:57.230
We're not offending kenning ourselves.

05:57.230 --> 06:02.570
We're sending the user ID but that is not a valid authentication because well we could send any ID there

06:02.840 --> 06:05.420
and start overwriting data of our users.

06:05.420 --> 06:07.760
That doesn't sound very secure to me.

06:07.820 --> 06:14.930
So instead we should also inform firebase that we have a token and we do this by placing a special query

06:14.930 --> 06:21.590
parameter at the end of the Eurail we place a query parameter by adding questionmark and then the parameter

06:21.590 --> 06:25.760
firebase will understand is off by adding.

06:25.760 --> 06:31.420
Off we can now assign a value with equal sign and the value of one US sign.

06:31.430 --> 06:37.430
Of course as my token with that I'm sending this token and firebase will recognize that the off query

06:37.430 --> 06:44.110
parameter is present and build validators token and only if the token is valid only in this case.

06:44.180 --> 06:46.850
Are we allowed to access this.

06:46.880 --> 06:49.950
You are L and to store our data.

06:50.030 --> 06:57.410
Now with this in place let's hook up this store list method in our shopping list page there in the cold

06:57.410 --> 06:58.100
that we're in now.

06:58.100 --> 07:02.040
Got the token from the get token method call here.

07:02.090 --> 07:11.130
I want to access my shopping list service cell and call store liest past the token as an argument because

07:11.130 --> 07:12.820
this method expects to get a token.

07:12.960 --> 07:16.280
And now we can subscribe to the observable methods returns.

07:16.530 --> 07:28.140
And in a success case I want to log success in the error case though.

07:28.870 --> 07:37.790
I will simply log the error to the console so that we can start finding out what goes wrong.

07:38.350 --> 07:44.130
So with that someplace Let's save this and let's see if we are able to store data on the server.

07:44.440 --> 07:50.430
Let's recompile the application go back to the running application and let's add the items so that we

07:50.430 --> 07:52.070
have something to store.

07:52.380 --> 07:54.470
And let's not use save list.

07:55.920 --> 07:57.790
I get success this looks good.

07:57.960 --> 08:04.110
Let's go to our database and you should see a new node which is our user ID and then there you'll see

08:04.110 --> 08:09.150
a shopping list Id which actually holds our shopping list.

08:09.150 --> 08:09.870
This is great.

08:09.870 --> 08:16.110
With that we're storing data on the server by using the normal annular HTP service which you could use

08:16.470 --> 08:21.240
just the same way with your own back and of course the authentication might differ.

08:21.360 --> 08:23.710
And with that we're having data on the server.

08:23.790 --> 08:28.750
Let's now focus on getting it back before we then polish the eye a little bit more
