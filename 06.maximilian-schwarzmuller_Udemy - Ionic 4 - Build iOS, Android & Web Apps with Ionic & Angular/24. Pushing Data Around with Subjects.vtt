WEBVTT

00:02.340 --> 00:05.790
So why does Angular not pick up the change?

00:05.790 --> 00:12.300
It's important to realize that arrays, like objects in Javascript are reference types and the implications

00:12.300 --> 00:18.630
this has can be found in an article in video you find attached to this lecture here.

00:18.630 --> 00:25.560
Essentially it means that changes to an array or an object are not that easy to pick up for Angular

00:25.920 --> 00:32.100
because we don't change the value itself but only some value somewhere stored in memory in very simple

00:32.100 --> 00:32.550
words,

00:32.550 --> 00:35.930
again check this attached resource for more details.

00:36.240 --> 00:40.530
Now this means that Angular doesn't pick up when we change this.

00:40.530 --> 00:47.180
Now in our persons component, we are initializing our person list with a pointer at persons

00:47.190 --> 00:52.040
but again when we change persons, this is not picked up automatically.

00:52.080 --> 00:59.370
Now we can set up a mechanism where we push changes to places interested in the update, so push changes

00:59.370 --> 01:02.580
to components for example and to do that,

01:02.790 --> 01:09.060
I will actually turn persons here into a private property so that I can only use it inside of the service

01:09.660 --> 01:18.250
and I will add a new property here which I'll name personsChanged and the name is up to you.

01:18.270 --> 01:22.990
However this will now be equal to a default value which I also need to import

01:23.010 --> 01:30.690
but now not from Angular but a core library that is used heavily by Angular and that is the rxjs

01:30.690 --> 01:34.400
library. rxjs is all about observables

01:34.410 --> 01:39.860
and if you want to learn more about observables, you find a helpful resource is attached to this lecture.

01:40.200 --> 01:48.290
There we can import a so-called subject and we initialize personsChanged to be equal to a new subject.

01:48.390 --> 01:54.330
Now a subject is very similar to the event emitter we used earlier and actually Angular's event emitter

01:54.420 --> 01:56.560
kind of builds up on this,

01:56.570 --> 02:01.510
this is also a generic type and we can use it to manage and emit data.

02:01.590 --> 02:10.160
Now here my subject will be a string array or will hold a string array data and that's important,

02:10.160 --> 02:16.330
it will also manage the data, it will hold my full list of persons so to say.

02:16.910 --> 02:26.510
Now with this subject set up here, what I do is I go to for example add persons and whenever I add a person,

02:26.540 --> 02:34.490
I'll use the personsChanged subject and call next here to pass my updated persons,

02:34.490 --> 02:40.070
I'll do exactly the same and copy that when I remove the person.

02:40.100 --> 02:42.410
So now I'm basically emitting events

02:42.410 --> 02:49.550
through this personsChanged subject and you can define as many subjects as you want which contain my updated

02:49.550 --> 02:51.080
list of persons.

02:51.080 --> 02:58.100
We can now subscribe to this event emitter so to say in other places of our app and I'll do this in

02:58.100 --> 03:02.160
my persons component, there

03:02.450 --> 03:09.770
when I initialize this, I still want to get access to persons and therefore actually I will turn this

03:09.770 --> 03:15.800
back to a public which is the default type of property because I need to get this one-time access here

03:16.370 --> 03:27.420
but I will also set up a listener to my prs service personsChanged subject by calling subscribe.

03:27.420 --> 03:34.500
So we have next when we want to send a new value and we use subscribe when we want to listen to new

03:34.500 --> 03:41.350
values and there I will get the data which was emitted which we know will be a list of persons

03:41.640 --> 03:46.130
and then here this arrow function will execute whenever a new value is emitted.

03:46.140 --> 03:52.750
So here we get the persons then and I can then set this person list equal to persons.

03:52.830 --> 04:00.320
What this ensures is that now when I click on Manuel, you will see a life update because we now have

04:00.320 --> 04:09.150
this active push mechanism where we push the update to interested parts in the application.

04:09.160 --> 04:14.680
Now one important note, when using your own subjects, you need to unsubscribe when the component gets

04:14.680 --> 04:21.250
destroyed to prevent memory leaks where you have more and more unused subscriptions piling up and for that,

04:21.250 --> 04:26.740
I'll use another lifecycle hook, the onDestroy hook where I implement onDestroy

04:26.770 --> 04:28.770
which is imported from @angular/core

04:29.440 --> 04:36.900
and then we add ngOnDestroy down there and in there, I want to clear my subscription. For that

04:36.910 --> 04:43.060
I first of all need to store it in a property of this class, so I'll add my private property

04:43.800 --> 04:52.360
person list subs, you can name it however you want and this will be of type subscription which is a type

04:52.360 --> 04:57.330
you have to import from rxjs.

04:57.500 --> 05:06.260
This is actually what subscribe will return, so we can store it here and set this person list sub equal

05:07.860 --> 05:11.230
to the result of subscribe here.

05:11.340 --> 05:15.270
Now the subscription is stored and in ngOnDestroy,

05:15.270 --> 05:20.940
I can now call this person list sub unsubscribe and now this prevents memory leaks.

05:20.940 --> 05:26.700
This is something you should do when working with subjects and your own event emitters therefore. It's

05:26.700 --> 05:30.000
not required for the Angular event emitter we used earlier

05:30.000 --> 05:32.510
though, there Angular will do all the cleanup.
