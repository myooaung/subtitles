WEBVTT

00:02.360 --> 00:10.030
Before finishing the section I want to talk about styling and for that I will start with DS s.c.s s

00:10.040 --> 00:12.970
Falls which you might not have recognized.

00:13.040 --> 00:22.580
SC S S is like see us as Plass you could say you use it to write your styling to write your C S S code

00:22.610 --> 00:26.780
but you get some extra features like with typescript for javascript.

00:26.780 --> 00:32.930
In the end it will be compiled to normalcy SS code but you can use some yet additional features to make

00:32.930 --> 00:34.770
that easier.

00:34.770 --> 00:41.090
I don't like to use s.c.s as by default but there is nothing wrong with writing normal C S code in those

00:41.090 --> 00:41.790
files too.

00:41.800 --> 00:46.440
In the end that can be compiled and almost as code without any issues.

00:46.460 --> 00:52.680
Great feature s.c.s s office you and it's all based on SAS if you know what data.

00:52.700 --> 00:57.030
You can also take some additional tutorials on SAS and SPSS to learn more.

00:57.050 --> 01:00.560
A great feature is that you can test your selectors.

01:00.680 --> 01:05.960
So here in the users s.c.s as far you get the page users selector and does of course as the selector

01:05.960 --> 01:07.710
of this component.

01:07.740 --> 01:12.660
So if you have a look at our template and you will get a couple of elements let me add a new element

01:12.660 --> 01:18.700
a paragraph for example where I say the users and I want to style the paragraph.

01:18.720 --> 01:21.900
I can simply add the paragraph tag nested in page users.

01:21.900 --> 01:23.790
This is important just nesting.

01:24.210 --> 01:31.140
And then I could say background color red and give it some padding let's say of 10 pixels something

01:31.140 --> 01:32.040
like that.

01:32.160 --> 01:37.230
And if I now save it as it will automatically recompile since this Iyonix surf process is still running

01:38.190 --> 01:41.940
and then if I click on users you'll see that all paragraphs on that user's page.

01:41.970 --> 01:47.040
So the one in the content but also the one in the footer of course have does read background and the

01:47.040 --> 01:48.360
padding.

01:48.360 --> 01:57.660
This is how we use SAS by nesting this or SPSS and this is how styling works and ironic too.

01:57.750 --> 02:05.220
You might have recognized that we don't have the style or else property here and also not the inline

02:05.220 --> 02:06.450
styles here.

02:06.500 --> 02:14.440
Now you could add this to use angler's hewas way of styling but typically an ironic to use the SAS approach.

02:14.550 --> 02:21.330
What this will do is it will take all those s.c.s as follows to get them into one C S S file and if

02:21.330 --> 02:30.660
you were not to nest your paragraph inside of this page users selector but simply have an outside of

02:30.660 --> 02:35.630
it and this is now targeting all paragraphs in your app as you can see if you click on users.

02:35.640 --> 02:40.750
You still have those paragraphs changed but also the one in the user page.

02:40.890 --> 02:42.910
So this is important to understand.

02:43.110 --> 02:49.500
There is no view encapsulation as in normal English by default though you could enforce it by adding

02:49.500 --> 02:57.270
the style your else property here but typically use the SPSS file and there is simply encapsulate styles

02:57.570 --> 03:02.130
by nesting it inside of your pages selector.

03:02.160 --> 03:08.760
This is how you can style your components how you can style your page specifically.

03:08.760 --> 03:14.610
Besides that way of styling your app and styling individual parts of your app I should say you also

03:14.610 --> 03:16.950
have the general theme which you can change.

03:16.950 --> 03:22.880
You do doesn't have theme folder and there you have to very well start s.c.s as files.

03:22.900 --> 03:29.500
Another feature of SPSS and SAS is that you could use variables which are then when bundling your osiers

03:29.530 --> 03:31.290
as code injected into it.

03:31.350 --> 03:36.900
And I object to his handling all of this here if you can override some of the default variables and

03:36.900 --> 03:41.080
you can learn more about this in the official documentation under theming.

03:41.200 --> 03:47.370
Here we can leave and learn even more about which variables you can override and how this all works.

03:47.370 --> 03:52.740
The important theming options are the most important one is the theming here where you override the

03:52.740 --> 03:54.020
default colors.

03:54.240 --> 03:58.280
You have a primary secondary danger light and dark color.

03:58.290 --> 04:06.740
Now if you change the primary color to let's say red like it is you will see that suddenly all buttons

04:06.800 --> 04:13.480
are red because by default the buttons have the primary color and that used to be this bluish color.

04:13.580 --> 04:20.030
Well now it's red and this is the easy way as well as the back button to give you wrap a totally different

04:20.030 --> 04:20.810
theme.

04:20.870 --> 04:26.000
Of course in a real app you will use a mixture of all those colors some buttons have a secondary color

04:26.100 --> 04:28.290
Abre have the danger color and so on.

04:28.550 --> 04:34.250
And it's a quick and easy way to give you wrap a totally different look by only changing a couple of

04:34.250 --> 04:35.310
values here.

04:35.570 --> 04:40.970
Again you can learn more about this here in the documentation and you're also going to see me use some

04:40.970 --> 04:42.830
theming in the apps we're going to build
