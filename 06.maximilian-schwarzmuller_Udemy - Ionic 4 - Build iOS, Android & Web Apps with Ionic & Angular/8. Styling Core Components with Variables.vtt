WEBVTT

00:02.240 --> 00:08.000
So it's good that we can set up some global styling and some global colors but can we also say that

00:08.000 --> 00:16.070
for example the toolbar should always have our primary background color and what we can do and what

00:16.070 --> 00:23.760
I mentioned on that slide too is we can do that on a component level so we can go to our off page to

00:23.770 --> 00:26.530
the H2 HDL file and they are on the toolbar.

00:26.540 --> 00:28.690
Indeed you can set a color property.

00:28.990 --> 00:34.720
And in case you're not sure whether you can set this you know you can go to the component docs there

00:34.730 --> 00:43.190
or go to the toolbar section and then on I toolbar you'll learn that you can set your color there if

00:43.190 --> 00:48.680
you scroll down you see you can set the color property you could by the way all the set demoed if you

00:48.680 --> 00:52.000
want to override that ionic detected automatically.

00:52.040 --> 00:56.570
So if you want to say it should attack the mode for the entire app but for it is toolbar I actually

00:56.570 --> 01:02.220
want to style it as if it were running on an ISIS device all the time then you could set this too but

01:02.220 --> 01:03.800
that that's not what I want to focus on.

01:03.890 --> 01:07.010
I want to focus on the color so we know we can set the color.

01:07.130 --> 01:12.700
And of course I can set the color here to let's say primary.

01:12.820 --> 01:19.310
Now if we set this to primary ionic will behind the scenes automatically select all the right things

01:19.360 --> 01:27.490
as variables to color our toolbar with the primary color and please alter a note to not just set that

01:27.490 --> 01:32.010
background color to primary but it is smart enough to set the text here.

01:32.110 --> 01:40.010
Cue the contrast color of our primary color to contrast color can be seen in the variables SPSS file.

01:40.060 --> 01:41.600
Here is the color primary.

01:41.640 --> 01:43.360
Here is the contrast color.

01:43.540 --> 01:50.230
So ionic is smart enough to style everything on the toolbar not just the background but as soon as we

01:50.230 --> 01:56.630
log in we see that the next toolbar we see thousand half that and this makes sense because that is that

01:56.650 --> 02:03.400
declarative styling I mentioned on the slide we control the view look of this toolbar with the color

02:03.430 --> 02:06.760
property or attribute but only on the off page.

02:06.760 --> 02:10.120
We didn't add this on our discover page.

02:10.120 --> 02:16.390
Now obviously you can add this to every toolbar in your application but if you know that every toolbar

02:16.600 --> 02:21.780
should have that color manually adding this all the time is pretty cumbersome.

02:21.850 --> 02:29.820
And thankfully there is an easier way we go back to the official docs to the guide section and then

02:30.240 --> 02:38.680
there to theming advanced if we scroll down a bit you will see that there are certain application colors

02:38.690 --> 02:45.200
you can set and these are basically see us as variables special see us as variables ionic will watch

02:45.200 --> 02:52.160
out for that are styling the important core building parts of your app for example you could set up

02:52.160 --> 02:59.540
your general background color which currently is white and you could set this to a different color or

02:59.540 --> 03:05.840
your general text color by the way for background and text you also need to provide a RG b value because

03:05.840 --> 03:10.970
of the way ionic consumes and uses these colors in its components.

03:11.390 --> 03:20.180
You can also set up a general toolbar background toolbar border color and a toolbar color which colors

03:20.180 --> 03:21.620
the components in the toolbar.

03:21.650 --> 03:26.500
So things like the title and that looks like what we need here.

03:26.600 --> 03:35.360
Now you can therefore go to your variables and in that root section you could now add dash dash ion

03:35.900 --> 03:38.510
toolbar background.

03:38.820 --> 03:39.340
Right.

03:39.410 --> 03:41.960
Dad was this or that.

03:41.960 --> 03:44.540
Is this C is as variable.

03:44.530 --> 03:46.730
Now you can set this to any color you want.

03:46.730 --> 03:53.450
Now of course I could now set this to black or to any color I want I can also copy that primary color

03:53.450 --> 03:55.770
here to use my primary color.

03:55.940 --> 04:01.910
But the drawback offsetting a hard coded color here is that if I really want to use my primary color

04:02.240 --> 04:07.700
whenever I change my primary color up here I will also have to change it down there and that is not

04:07.700 --> 04:09.080
really what I want to do.

04:09.410 --> 04:14.450
And therefore instead we can simply consume our C as its variable here.

04:14.450 --> 04:20.430
So that is the variable name and thus far you only learn how you can set up C as as variables like this.

04:20.540 --> 04:23.280
And by the way you don't have to set them up in the root selector.

04:23.330 --> 04:28.700
You can set up see us as verbals anywhere the place where you set them up the finds where they can be

04:28.700 --> 04:34.000
consumed though what you set up in route can be used anywhere in your application in any average C as

04:34.000 --> 04:39.600
as rule if you set something up a let's say your old class selector then you can only use it in that

04:39.620 --> 04:45.440
own class selector or child elements of the element that has that class selector.

04:45.440 --> 04:49.380
So here does this set up in root and therefore we can use this variable anywhere.

04:49.490 --> 04:52.980
And I want to use it well still and root down there.

04:53.120 --> 04:55.790
And how do you use a C as its variable.

04:55.790 --> 05:00.630
You use the VAR function which is built into C S S add to wah.

05:00.680 --> 05:08.780
You pass the name of the variable and this will extract that variable value and apply it to this property

05:08.780 --> 05:12.110
on the left which here happens to be a variable as well.

05:12.170 --> 05:17.210
But this could also be something like the general background color so it could be a normal C is as property

05:17.210 --> 05:22.040
as well the Wah function also takes a second argument by the way.

05:22.150 --> 05:29.050
And dad would simply be a fallback value in case there's a variable here can't be resolved.

05:29.050 --> 05:34.630
Now we know that it will always be resolvable but you could set something like black here as a fallback

05:34.630 --> 05:45.120
value to be super safe so now if we save that and we have a look at our application we see that we have

05:45.120 --> 05:53.250
the background color but now ionic is not smart enough to automatically color the text as well or it's

05:53.250 --> 05:55.920
not so much being smart or not being smart.

05:55.980 --> 06:00.480
It's simply not the behavior ionic wants to show.

06:00.510 --> 06:06.900
Instead these variables are there to give us fine grained control over to look and feel of some important

06:06.960 --> 06:08.660
ionic parts.

06:08.760 --> 06:14.940
And if we want to change the text color or the toolbar component color as well we have to do that with

06:14.940 --> 06:18.250
this ion toolbar color variable here.

06:18.270 --> 06:21.510
So the solution is to simply set this as well.

06:21.510 --> 06:26.600
And here the value of course should be the contrast color to our primary color.

06:26.610 --> 06:30.590
So here I will copy iron color primary contrast.

06:30.650 --> 06:39.920
Let's grab that and added here and if we do this and we save this we should see that our toolbar looks

06:39.920 --> 06:41.690
exactly the way we want it to look.

06:41.960 --> 06:49.680
But now if I do log in we also see that this is the case for the other toolbars in our application and

06:49.690 --> 06:55.110
that of course is pretty sweet because we now have a set up that required pretty much no effort.

06:55.510 --> 07:02.230
And we now have a global styling for the toolbar or a global behavior for the toolbar with just two

07:02.230 --> 07:08.180
lines of CSX code added just as a side note what you can still do.

07:08.410 --> 07:11.450
You can still go to a certain component.

07:11.680 --> 07:19.800
Let's say that off page again and there set color secondary for example on the toolbar.

07:19.820 --> 07:25.440
Now we do have our global setup with that ion toolbar background and ion toolbar color.

07:25.460 --> 07:29.070
And yet if you set this this will override your global settings.

07:29.070 --> 07:31.740
And that's also what I talked about on the slides.

07:31.760 --> 07:34.820
You can always override the global settings.

07:34.880 --> 07:37.400
They have the least highest priority.

07:37.430 --> 07:43.700
So you're accustomed see as s rules can override or these built in attributes of certain components.

07:43.700 --> 07:48.740
Of course not just for the toolbar but also for the button and for average components if a component

07:48.740 --> 07:53.700
for example allows you to set a color attribute if you set a color attribute.

07:53.750 --> 07:57.240
And this does not fit your global default then this is fine.

07:57.290 --> 07:59.310
And this will override your global default.

07:59.360 --> 08:06.020
So you still have full control here and you can apply it as in cases where you need a different look

08:06.020 --> 08:07.060
on a single page.

08:07.100 --> 08:11.300
But when the general look on the Abbott pages or on the other places in your app.
