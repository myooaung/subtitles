WEBVTT

00:02.320 --> 00:03.960
Back to our recipes page.

00:04.060 --> 00:07.220
I said I wanted to display a list of recipes here,

00:07.450 --> 00:09.450
so let's include an ion-list

00:09.460 --> 00:15.310
and now the nice thing is here in Visual Studio Code with the Angular essentials package installed,

00:15.430 --> 00:18.300
I now get auto-completion here in my templates,

00:18.370 --> 00:25.870
thanks to this Ionic Angular wrapper actually which unlocks all the Ionic components as Angular components

00:26.110 --> 00:29.450
and I would get auto-completion support for Angular components here,

00:29.500 --> 00:35.170
hence I get it for these Ionic components too because they're all wrapped into Angular components so

00:35.170 --> 00:38.830
to say. So I can add my ion-list here

00:39.100 --> 00:45.810
and on that ion-list or in that ion-list, I want to render a couple of items, a couple of recipes.

00:45.850 --> 00:51.800
Now of course, we don't have any recipes yet and I will not create an overly complex app at this point,

00:51.820 --> 00:54.240
we'll do that later with the course project.

00:54.250 --> 01:00.090
So for now, I will simply create a new file here,

01:00.100 --> 01:07.190
my recipe.model.ts to define how a recipe should look like and I'll use an interface here, name

01:07.220 --> 01:16.270
it recipe and I want my recipes to let's say have an ID which is of type string, a title which is of

01:16.270 --> 01:25.180
type string, an ImageUrl which is of type string and then some ingredients which is an array of

01:25.180 --> 01:27.770
strings, something like bananas, apples,

01:27.790 --> 01:30.290
so a really simple recipe definition.

01:30.360 --> 01:35.870
And in case this is something you've never seen, again please go through my Angular Complete Guide first,

01:35.890 --> 01:41.290
this is a Typescript feature, we're defining an interface here, we can basically use this as our own type

01:41.440 --> 01:47.320
and we can ensure that we therefore always work with the same data, with data with the same structure

01:47.530 --> 01:49.390
in our application.

01:49.390 --> 01:56.440
So with the recipe interface created here, in the recipes.page.ts file, I will now add a recipes

01:56.470 --> 02:04.090
property which is of type recipe array and the recipe is of course my own model and therefore this

02:04.090 --> 02:11.410
type has to be imported from the recipe model file and this should not be an empty array but instead,

02:11.470 --> 02:17.350
I'll start with an array that already has a couple of recipes and each recipe should have an ID, like

02:17.380 --> 02:18.940
r1, whatever you like,

02:18.940 --> 02:25.900
it should have a title like schnitzel, if you took my Angular Complete Guide, you know what I'm talking

02:25.900 --> 02:26.520
about.

02:26.830 --> 02:32.860
It should have an ImageUrl and for that I'll quickly pick a lovely schnitzel image, here I copied

02:32.860 --> 02:37.720
in a URL, you can simply find an image where on Google Image Search,

02:37.810 --> 02:42.430
later in the course I'll show you how to use the device camera but for now, let's go with this hardcoded

02:42.700 --> 02:52.660
URL here and I also need my ingredients and here, we certainly need French fries and we need Pork,

02:52.930 --> 03:05.890
Meat and maybe we also need some Salad. Now I'll quickly add another recipe here and of course you can

03:05.890 --> 03:12.520
add anything you want, I'll go with some nice spaghetti here and quickly search an image for that

03:12.550 --> 03:13.780
as well,

03:13.780 --> 03:22.550
brought in a URL and ingredient-wise, we need spaghetti and we need meat and probably also some tomatoes.

03:22.930 --> 03:29.530
Now here I get some linting error regarding my URL being too long,

03:29.660 --> 03:31.630
I'll just ignore that here.

03:31.670 --> 03:38.780
So with the recipes added here, I want to output them in my ion-list and this can be done by adding

03:38.770 --> 03:40.200
an ion-item here

03:40.340 --> 03:47.240
and since I want to repeat this for every element in my ingredient list, I'll dump an ngFor statement

03:47.240 --> 03:47.640
on it,

03:47.720 --> 03:53.360
so using the default ngFor directive we can use in any Angular project and then I'll go through all

03:53.360 --> 03:55.800
my recipes I have here.

03:55.850 --> 04:01.620
So with let recipe of recipes, I loop through all my recipes and in the ion-item here,

04:01.700 --> 04:06.860
I of course want to display the image, let's say on the left and on the right, I then want to have my

04:06.860 --> 04:10.370
text. For that, we can use a component I haven't shown you before

04:10.370 --> 04:13.610
and of course as always, you'll find that in the official docs

04:13.770 --> 04:16.260
and that would be the ion-avatar.

04:16.280 --> 04:22.280
This is a component which can wrap the ion-img and the ion-img in the end is like the normal image,

04:22.520 --> 04:24.110
just with some optimizations,

04:24.110 --> 04:29.270
one of the optimizations being that it's only loading the image when it's visible,

04:29.270 --> 04:31.020
so when the user can actually see it.

04:31.070 --> 04:34.770
So if it scroll down outside of the current viewport of the user,

04:34.820 --> 04:43.970
this will not be loaded. And I'll bind that with property binding square brackets to my recipe ImageUrl

04:44.000 --> 04:47.090
here. Now

04:47.110 --> 04:54.190
this avatar here will get a slot start in the ion-items, so that it's all the way on the left and next to

04:54.190 --> 04:54.940
the avatar,

04:54.940 --> 05:01.330
I'll add an ion-label here as a wrapper around my text simply and there, we can use string interpolation

05:01.540 --> 05:02.840
to output the recipe

05:02.860 --> 05:11.290
title. With that let's save it and let's see what we get when this application runs, here

05:11.300 --> 05:12.800
this looks very nice.

05:12.800 --> 05:15.320
We got this list of elements

05:15.320 --> 05:21.920
and here we already see how Ionic components, these ones here wrapped into Angular components,

05:21.920 --> 05:25.870
thanks to @ionic/angular and Angular works together.
