WEBVTT

00:02.330 --> 00:08.320
So with the items generated dynamically, let's make sure that when we do add an expense, we also clear

00:08.330 --> 00:13.580
the input and let's make the clear button work. For this,

00:13.620 --> 00:21.360
I will add a brand new function up there where I create a new constant which I'll name clear and this

00:21.360 --> 00:23.260
will be a function,

00:23.670 --> 00:31.350
so I store a function in this clear constant to be precise where I reach out to my reason input and

00:31.350 --> 00:34.920
set the value equal to an empty string and the same for any amount input

00:34.950 --> 00:41.150
and that basically clears them right, this removes any input the user entered. This clear function should

00:41.150 --> 00:46.720
now be called here after we appended our item, so we can just call clear here

00:46.730 --> 00:54.630
and this refers to this clear function now. I also want to do that when I click the cancel button,

00:54.630 --> 01:00.810
so I will therefore add my cancel button event listener down there for a click event

01:01.620 --> 01:07.530
and when this button gets pressed, I can just point at clear like this, without parentheses because

01:07.530 --> 01:09.360
I don't want to execute it immediately,

01:09.360 --> 01:14.370
instead I'll just pass a reference to this function, to the event listener, so that this will be executed

01:14.370 --> 01:19.240
dynamically when this click occurs, it will execute this function for me then.

01:19.500 --> 01:26.940
So with that if we reload and I enter food 12.99 and I clear, this is removed and you also

01:26.940 --> 01:32.370
see that these items, the labels float back in, if I add an expense, this is also cleared

01:32.380 --> 01:34.590
but of course the expense is also added.

01:34.690 --> 01:40.680
Now last but not least, let's make sure we show some sun, some total expense at the bottom and for this

01:40.710 --> 01:42.370
back in the HTML code,

01:42.570 --> 01:53.310
we can add a new ion-row here with a new ion-column and show our sum there. For example by simply adding

01:53.310 --> 02:01.270
a paragraph where we write total expenses and then here, I have a span which I'll use as a hook to render

02:01.270 --> 02:06.940
my total expenses in. So I'll give this as an ID of total expenses so that I can easily get access to that

02:07.150 --> 02:09.210
from within my Javascript code

02:09.550 --> 02:17.940
and with that ID added on that span, we can get access to the total expenses output element or whatever

02:17.940 --> 02:28.810
you want to call it here with query selector total expenses, like that. So this total expenses output

02:28.810 --> 02:35.500
should now be updated with every item we add and therefore, I will add a new variable up there with let

02:35.950 --> 02:43.840
total expenses which starts at 0 because initially we have no expenses. With every item we add here, I

02:43.840 --> 02:51.130
can set total expenses equal to the old value with the plus equals sign shortcut, to the old value plus

02:51.130 --> 02:57.010
the amount, the entered amount and I will add a plus in front of that to convert this string which it

02:57.010 --> 03:03.070
is by default, any value you fetch from my input element is a string to a number and then this gets added

03:03.070 --> 03:10.060
to the total expenses we had before. This updates the total expenses, after updating them, I can set

03:10.060 --> 03:16.930
my total expenses output text content equal to total expenses here, so that this is not only stored in

03:16.930 --> 03:20.320
memory in Javascript but also written to the DOM.

03:20.320 --> 03:27.580
So with that if we reload and I add food again with 12.99 and I also was in the cinema

03:27.610 --> 03:32.670
for 8.99, then we see our total expenses here at the bottom.

03:32.930 --> 03:37.100
Now this styling can be improved though, especially on bigger screens.
