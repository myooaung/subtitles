WEBVTT

00:02.130 --> 00:05.530
So I covered a lot of useful things about Angular here,

00:05.610 --> 00:11.310
there's one last thing I want to cover before I send you off to the main content of this course and

00:11.310 --> 00:14.130
that is how we can send HTTP requests.

00:14.130 --> 00:19.900
Let's say we want to initialize our list here, not with some hardcoded values which we have in here

00:20.250 --> 00:26.190
but we want to fetch that from a back-end API and that is a typical use case because no matter which

00:26.190 --> 00:27.630
application you're building,

00:27.630 --> 00:32.280
chances are high you need to store data on a server or fetch data from a server

00:32.280 --> 00:36.600
and of course you can do that with Angular. I'll not show you how to store it here,

00:36.600 --> 00:42.780
we'll do that throughout the course but I will show you how to get data. Now for that, let's first of all find

00:42.780 --> 00:49.470
a public API we can use and for that, you can simply Google for Swapi which is the Star Wars API which

00:49.470 --> 00:54.300
is free to use and which allows us to fetch Star Wars characters.

00:54.300 --> 01:02.670
Now what we can do here for example is we can target https://swapi.co/api/people, send

01:02.670 --> 01:05.080
a request and here's a preview,

01:05.100 --> 01:10.960
this gives us an object which has a results key, which has a couple of Star Wars characters.

01:10.960 --> 01:16.020
Now I'm only interested in the names but I can still use that and fetch all the data.

01:16.020 --> 01:22.470
The question just is, how do we send HTTP requests here and then transform the result or

01:22.530 --> 01:24.870
the response data to use it here?

01:26.400 --> 01:35.220
Well first of all to send HTTP requests, we again need to unlock this in our Angular application and therefore

01:35.220 --> 01:45.160
in the app module. For this, I import something in app module, the HttpClientModule to be precise

01:46.070 --> 01:54.290
from @angular/commom/http.

01:54.370 --> 01:57.130
Now this needs to be added to imports here,

01:57.160 --> 01:59.830
let's add it after the other Angular modules

01:59.830 --> 02:09.070
here and now this allows us to inject the Angular HttpClient anywhere in our application where

02:09.070 --> 02:15.040
we need it and you can not just inject things or services into components,

02:15.100 --> 02:22.980
you can also inject services into services. So here in the persons service, I can also add my constructor

02:23.940 --> 02:30.210
and then I'll use this shortcut where I automatically store whatever I inject in a property, in a private

02:30.210 --> 02:34.050
property here. I'll name this HTTP, the name is up to you

02:34.050 --> 02:41.880
but the type is not, the type needs to be HttpClient which you need to import from @angular/common/http

02:41.880 --> 02:48.640
and don't forget the empty curly braces here.

02:48.660 --> 02:57.120
Now we can use this HttpClient and I want to use it to fetch my persons, the persons I start with.

02:57.120 --> 02:59.660
Now for that, I'll actually add a new method here,

02:59.730 --> 03:12.240
fetchPersons and there I will use HTTP and then there is a get method I can execute. Get can be

03:12.240 --> 03:19.770
executed here and get works in a way that I pass in the URL I want to send a request to and this

03:19.770 --> 03:26.430
will be a background request sent and handled behind the scenes without our page refreshing and the

03:26.430 --> 03:34.200
URL I want to send it to is this URL of course, so https://swapi.co/api/

03:34.200 --> 03:44.840
and then it's people. So let's send it to /people here, without one, just /people.

03:45.590 --> 03:50.750
This will send a get request there, you can also send post requests and so on but we're not doing that here, 

03:51.590 --> 03:57.740
this now also is a generic type where we get back any data, that is kind of a placeholder if you don't

03:57.740 --> 04:05.000
know the specific format or you are too lazy to type the format as I am here, well then you can

04:05.000 --> 04:12.080
use any and this alone will not do anything. You need to subscribe here because this behind the scenes

04:12.170 --> 04:19.550
also uses RxJS, it's a so-called observable and you need to subscribe to kick off that request

04:19.610 --> 04:25.370
because Angular is not sending it if no one is listening to the response and here, you indeed get back

04:25.400 --> 04:32.540
your response data and you can name this argument however you want and I will simply log it here. So whenever

04:32.540 --> 04:39.200
we call fetchPersons, this should be sent and the response data should be output. Well we want to get

04:39.200 --> 04:47.720
our persons in the persons component, so here in ngOnInit, I will actually not initialize a personal

04:47.720 --> 04:54.800
list like this because it will soon be empty anyways, instead I will reach out to my prs service and

04:54.800 --> 05:02.960
call fetchPersons and in there, I then go ahead and make that request. Now I will indeed empty my array

05:02.960 --> 05:11.630
here and start with undefined even and I want to for now only console log my response data and I'll

05:11.750 --> 05:18.860
make sure we get a working list soon. If we now go back to the app and we reload, we of course

05:18.920 --> 05:25.580
see no list here anymore but we do see this log which is the response data we have and indeed we see

05:25.610 --> 05:31.640
there, we have an object with the results key which is a list of Javascript objects which have all kinds

05:31.640 --> 05:36.880
of data but amongst them also the name. Now we want to extract that,

05:37.010 --> 05:44.870
so how can we now transform this and extract the data? Well observables give you a rich suite of so-called

05:45.050 --> 05:50.980
operators you can use, more on that can be found in an article or in a resource you find attached to this

05:50.990 --> 06:00.080
lecture. Before subscribing and getting the final result, you can pipe an unlimited amount of operators

06:00.410 --> 06:07.010
to this observable which means you funnel the data you get back through all kinds of operators that

06:07.010 --> 06:15.260
can do all kinds of things and one operator you often use is the map operator. You import this from 

06:15.260 --> 06:24.530
rxjs/operators, the s is important here and then you pass map here and you call it as a function.

06:25.250 --> 06:32.570
Now map takes a function as an argument and that will receive the same data subscribe receives here

06:32.960 --> 06:39.380
and now you can transform it and return your transformed data so that here, you get your transformed

06:39.410 --> 06:45.330
data, and you don't need to rename it, I'm just doing it here to make it really clear how this executes.

06:45.980 --> 06:54.500
So here I now return my transformed data and as we learned, there is a results property here in a response

06:54.500 --> 07:01.010
data in which I'm interested and I want to extract that. And in the results data, to be precise

07:01.010 --> 07:04.820
that is an array, I want to get that name.

07:04.820 --> 07:09.860
Now since this is an array, I can use the normal map method and this can be confusing but this is not

07:09.920 --> 07:10.980
this map method,

07:11.060 --> 07:14.930
this is the normal Javascript map method which we can use on any array

07:15.700 --> 07:22.730
and there, I get my character here, in the end you can name this however you want to and I want

07:22.730 --> 07:24.870
to just extract the name.

07:24.950 --> 07:30.980
So here, I will call character name and what this will do is it will throw away all the other elements,

07:30.980 --> 07:38.960
so all the other fields and instead basically give me back an array of results here which only contain

07:39.020 --> 07:45.200
objects with the name or not even objects to be precise but just a list of strings at the end,

07:45.230 --> 07:53.640
this is how that works. And we can see this if I save that and therefore this page reloads, now we see

07:53.820 --> 08:00.810
we get back a list of strings here which is of course super convenient for us to use.

08:00.870 --> 08:06.360
Now this can be confusing and therefore definitely check out the attached resource if observables are

08:06.360 --> 08:08.120
brand new to you.

08:08.130 --> 08:16.350
However now we got a list of persons as we need it and therefore here, we can now simply emit persons

08:16.490 --> 08:17.210
changed,

08:17.310 --> 08:21.340
call next and pass our transformed data.

08:21.450 --> 08:26.760
Now this of course will also mean that we can no longer add persons because whenever we reload the persons

08:26.760 --> 08:33.270
component which does call fetchPersons, we overwrite the old persons or we emit our new persons which

08:33.270 --> 08:34.600
are only the ones we fetched

08:34.650 --> 08:40.330
but that is okay for now, I just want to show you how sending HTTP requests works.

08:40.350 --> 08:47.750
So here, I am now emitting this and in persons component, I'm listening to this.

08:47.790 --> 08:52.650
Now let's just reverse the order to make sure your subscription is set up before we send this which

08:52.650 --> 08:56.780
will use the subscription eventually and let's save that and reload

08:57.670 --> 09:03.750
and we see our list appear here after a short while when the request finished.

09:03.940 --> 09:08.860
And now what I meant is if I add something here, Michael and I go back,

09:09.570 --> 09:16.830
well then we first of all get an error because we can't push anymore because we actually have an undefined

09:16.980 --> 09:18.150
persons array here

09:18.540 --> 09:25.050
but even if I set this to an empty array to which we can push, well even if we do that, then this error

09:25.050 --> 09:32.540
will be gone but if I go back to person list, it's instantly gone and overwritten and that is OK here,

09:32.550 --> 09:38.100
I don't care about this app so much but about teaching the individual aspects of Angular and we'll build

09:38.100 --> 09:41.150
a real app in the rest of this course of course.

09:41.150 --> 09:44.180
Now you will also notice that deleting doesn't work correctly anymore 

09:44.340 --> 09:46.690
but again, doesn't matter too much here for me.

09:47.680 --> 09:53.700
Now one last thing I want to show you before I conclude this is how we can show some placeholder

09:53.920 --> 09:56.220
whilst we are waiting for the response here

09:56.230 --> 10:00.760
because that allows me to also introduce another core directive Angular offers.
