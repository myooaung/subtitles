WEBVTT

00:02.370 --> 00:06.930
So let's get a single recipe on the recipe detail page. Now to get it,

00:06.930 --> 00:08.670
we need the recipeId right

00:08.670 --> 00:12.790
because in get recipes, we do require the ID.

00:12.900 --> 00:18.850
Now conveniently, we get that ID as a dynamic segment on our path here.

00:18.900 --> 00:24.900
So on recipe detail page, we just need to extract that and for this, we can use a default Angular strategy

00:25.380 --> 00:30.760
where we get information about the activated route, activated route.

00:30.910 --> 00:36.130
You do inject this from @angular/router is where you need to import the activated route

00:36.190 --> 00:43.360
and this is an object which you can use in ngOnInit to then have a look at your param map which

00:43.360 --> 00:48.010
is a complex name but which in the end means a map of all the parameters

00:48.010 --> 00:52.690
this route receives and parameters are these dynamic URL segments.

00:52.720 --> 00:55.430
Now this is not an object with all these segments,

00:55.450 --> 01:02.020
instead it's a so-called observable. Now observables are a concept heavily embraced by Angular as you

01:02.020 --> 01:07.960
probably know and we'll use it a lot in this course. Attached you find some resources to get you started

01:07.960 --> 01:13.060
with observables in case you've never heard about them, here I do expect you to know the basics about

01:13.060 --> 01:19.990
them, observables are basically objects you can subscribe to to get data, either one-time data like

01:19.990 --> 01:25.000
when you are sending an HTTP request or multiple times if you subscribe to something which emits

01:25.000 --> 01:30.270
new data every X seconds or whenever a user clicks somewhere or something like this.

01:30.490 --> 01:36.250
This observable here will emit new data whenever our dynamic segments change, even if we are still on

01:36.250 --> 01:37.000
the same page

01:37.000 --> 01:43.480
but this somehow change because we have a button that changes them. In subscribe, we pass in a function

01:43.540 --> 01:50.020
that will execute when we receive new data and that function will get a param object and this now

01:50.020 --> 01:54.090
actually is the object where we can retrieve our parameters from.

01:54.160 --> 02:03.690
So first of all, I can check if this param map does not have recipeId as a parameter. It should have

02:03.720 --> 02:05.000
because we set it up here,

02:05.020 --> 02:05.890
recipeId

02:06.060 --> 02:11.070
but if it somehow wouldn't have it which is very unlikely and unrealistic but if it wouldn't have it,

02:11.640 --> 02:21.230
then we want to redirect the user here, we want to make sure the user leaves the page here and I'll come

02:21.230 --> 02:29.040
back to how we can go back programmatically in a second, I will also return here so that no other executes

02:29.040 --> 02:36.780
runs after this. If however we make it after this check here, which we should in most cases,

02:36.810 --> 02:40.010
so we do have a recipeId, we can extract that.

02:40.080 --> 02:45.320
So the recipeId can be extracted from the param map with 

02:45.350 --> 02:48.590
get and then the name of the parameter.

02:48.600 --> 02:56.550
Now obviously, the name here and here but not this one but string names here have to match the name you

02:56.550 --> 03:01.230
set up in your routing configuration, without the colon but the part after the colon,

03:01.230 --> 03:03.030
this has to match.

03:03.120 --> 03:08.270
So now I'm extracting my ID here and now we can use the service to load it.

03:08.280 --> 03:19.920
So for this, we need to inject our recipe service, here, recipes service like this,

03:20.120 --> 03:27.620
you need to import that recipes service type from the recipe service file up there and with it injected,

03:27.920 --> 03:28.420
there

03:28.430 --> 03:36.380
I can now reach out to my recipes service, get my recipe and pass that recipeId I extracted as

03:36.380 --> 03:37.470
an argument.

03:37.520 --> 03:42.740
Now this will return a single recipe and to use it in the template, we need to store it in a property

03:42.740 --> 03:44.170
of our class here,

03:44.210 --> 03:49.550
so I'll name this loaded recipe, you can name it whatever you want and it will be of type recipe

03:49.760 --> 03:56.160
and it is a good pattern, a good practice to clearly state the type an object will hold.

03:56.180 --> 04:01.180
So here I say that this will actually be a recipe or null

04:01.190 --> 04:06.760
but initially it's undefined but thereafter once there is data in it, it should be of type recipe

04:06.950 --> 04:14.250
and for that you need to import recipe from your recipe model. So loaded recipe is now where I can store

04:14.250 --> 04:17.010
this recipe I'm retrieving here, like this

04:17.010 --> 04:20.490
and now we can access the loaded recipe data in the template of course.

04:23.260 --> 04:25.580
In the template of the recipe detail page,

04:25.660 --> 04:28.060
I want to output the image and for that,

04:28.060 --> 04:37.030
I'll remove the padding here and I can simply add ion-img and bind its source to my loaded recipe

04:37.400 --> 04:38.090
image

04:38.170 --> 04:49.020
URL. And below the image here, let me also wrap this into the ion-grid actually to control the

04:49.020 --> 04:55.860
size of that, so here I have my ion-column and we'll see how we adjust it later, for now I'll just wrap

04:55.860 --> 04:56.700
it in there.

04:56.700 --> 05:04.180
Below that in a new ion-row, in a new ion-column, you always need to have a column in your rows, there

05:04.310 --> 05:10.730
I want to have a h1 tag with the title, so I'll use string interpolation here and then access loaded recipe

05:11.750 --> 05:19.580
title and if we have a look at the recipe model, then we also have the ingredients.

05:19.650 --> 05:25.400
It would be nice to output these as well and which better component to use

05:25.410 --> 05:27.300
than an ion-list.

05:27.450 --> 05:35.240
So in a new row and column, I'll add my ion-list here and in there again, we can use ion-item with

05:35.240 --> 05:38.290
ngFor to go through all the ingredients.

05:38.390 --> 05:40.270
So I'll add a loop here,

05:40.340 --> 05:43.340
let ig for ingredient

05:43.430 --> 05:50.780
of loaded recipe ingredients, this loops through all the ingredients and I simply output the ingredient

05:50.840 --> 05:51.690
name here.

05:51.770 --> 05:57.110
ig refers to an element in ingredients and ingredients is just an array of strings, so we can directly

05:57.140 --> 05:58.920
output that here.

05:59.000 --> 06:01.510
Okay nice, so this should work,

06:01.510 --> 06:03.020
now let's have a look.

06:03.050 --> 06:11.170
If it works, remember the IDs of our recipes are r1 and r2 and therefore if I manually added the route

06:11.170 --> 06:17.020
here in the app and load /recipes/r1, we should load recipe 1

06:17.020 --> 06:17.850
and here it is,

06:17.950 --> 06:18.910
doesn't look too bad,

06:18.940 --> 06:25.510
we can do something about the styling but it doesn't look too shabby. Now I actually want to make sure

06:25.510 --> 06:31.630
that my title up there doesn't say recipe detail but actually shows the name of the recipe that was

06:31.630 --> 06:32.020
loaded.

06:32.470 --> 06:39.040
So here, I will output loaded recipe title with string interpolation,

06:39.040 --> 06:41.550
you can do this up here too, not just in the content,

06:41.560 --> 06:46.960
of course you can use the loaded recipe anywhere in this Angular component and that should be a good

06:46.960 --> 06:47.940
first step

06:47.980 --> 06:52.490
and I also want to give my toolbar here a color of primary,

06:52.500 --> 06:59.160
also by the way in the recipes page. And later in the styling and theming module, I'll also show you how

06:59.160 --> 07:05.760
you can generally set all backgrounds of all toolbars to this primary color instead of having to add

07:05.760 --> 07:08.600
this manually to every toolbar

07:08.760 --> 07:12.560
but for now, we'll do it manually and as this app now reloads,

07:12.600 --> 07:14.070
this doesn't look too bad.

07:14.250 --> 07:20.340
Now let's also center schnitzel here and make sure that our image here, this column in which it is has

07:20.340 --> 07:21.440
no padding

07:21.540 --> 07:28.010
and for that you can go back to the recipe detail page and on the h1 tag, we can center this with the

07:28.110 --> 07:35.280
CSS utility attribute text center which you can learn more about in the official docs of course on Ionic

07:35.280 --> 07:38.940
framework, under developers UI components,

07:38.940 --> 07:45.810
if you go to the guide and then there under layout, CSS utilities, there you find all these utility

07:45.810 --> 07:52.090
attributes you can add and I don't just want to center the text. On this column which has my image,

07:52.110 --> 07:54.630
I also don't want to have padding around it,

07:54.690 --> 07:59.580
so on the column we can add no padding actually and that is something you can also learn when you dive

07:59.580 --> 08:00.630
into the official grid

08:00.630 --> 08:08.000
documentation. This reloads the page, it reduces the padding but if we inspect it, there still is a little

08:08.000 --> 08:10.390
bit of padding around the entire grid,

08:10.430 --> 08:15.260
well for that, let's copy no padding and add it to the entire grid as well

08:18.170 --> 08:19.960
and now, this is gone.

08:20.180 --> 08:26.030
I'm quite happy with that progress but entering the URL by hand is not really how we want our users

08:26.030 --> 08:28.160
to work with our app, right?

08:28.640 --> 08:32.000
So how can we make sure that when we tap this, we go to the second page?
