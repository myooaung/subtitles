WEBVTT

00:02.350 --> 00:03.670
It is really important

00:03.670 --> 00:04.080
that

00:04.090 --> 00:10.540
you understand how navigation works behind the scenes. In an Angular Ionic app,

00:10.540 --> 00:17.900
we use the Angular router for navigation and that is what you also already saw in the previous modules.

00:17.920 --> 00:25.210
We set up our routes in our Angular router configuration just as we do it in a normal Angular app

00:25.210 --> 00:31.600
and as I emphasized multiple times, this is just a normal Angular app but we use that router for setting

00:31.600 --> 00:38.080
up the routes and then we can use the router link or the navigate method when we inject the router to

00:38.080 --> 00:42.910
switch between the different paths and therefore the different pages.

00:42.910 --> 00:49.230
Now here comes the interesting part when using the Angular router in an Ionic app because this Ionic

00:49.230 --> 00:57.520
app with the @angular/ionic package actually kind of wraps that Angular routing functionality and

00:57.520 --> 01:01.500
you can tell that it does by the fact that we use this ion router outlet

01:01.500 --> 01:06.450
if you remember. It does so to basically add all these nice transitions,

01:06.460 --> 01:14.230
that's the main purpose and for that, Ionic thinks of navigation or the different pages as a stack of

01:14.230 --> 01:15.140
pages.

01:15.340 --> 01:21.590
Because if you think about a mobile app, you typically see one page at a time right

01:21.610 --> 01:27.160
and you can go to a new page or press the back button and go back. Well you can essentially do the same

01:27.160 --> 01:33.400
in the browser of course, there you also have a back button. So you can think of navigation as a stack

01:33.400 --> 01:40.120
of pages and you always view the page which is on top of this stack, so the topmost page, that is the

01:40.120 --> 01:44.620
page you see but the other pages are still there, just hidden so to say

01:44.800 --> 01:51.100
and when you go back, you basically pop that top page and you see the other pages. Ionic controls these

01:51.310 --> 01:54.680
stack of pages with a stack controller.

01:54.700 --> 02:00.210
Now that's a class you don't work with directly in your Angular app, Ionic does that for you,

02:00.220 --> 02:06.810
so it's internal to Ionic and as I mentioned, when you use the Angular router for navigating, Ionic basically

02:06.820 --> 02:10.990
watches the Angular router, it has a listener to your routing actions.

02:11.140 --> 02:18.280
When you go forward, it basically pushes a new page onto that stack and when you go back or use that

02:18.310 --> 02:26.200
ion back button, it pops that topmost page off. Now in case you're wondering how it knows whether a navigate

02:26.200 --> 02:29.250
call is meant to go forward or backward,

02:29.290 --> 02:35.500
it basically has a look at the internal ID of your navigation action and it turns out that by that

02:35.500 --> 02:43.060
ID you can determine whether the new route is basically one step ahead of the old route or behind

02:43.060 --> 02:43.320
it

02:43.330 --> 02:48.400
so to say. So you don't have to worry about that, Ionic is really smart about finding out if you're going

02:48.400 --> 02:54.190
forward or backward and that in turn is important for playing the right animation for transitioning

02:54.190 --> 02:55.770
from pages.

02:55.830 --> 03:01.680
Now these stack of pages and that's also something special Ionic does is then also cached for you and

03:01.710 --> 03:08.820
that is now a difference to your normal Angular for web in browser experience. There what happens is if

03:08.820 --> 03:15.210
you go to a new page and you go back, all these pages which in the end are just components are essentially

03:15.210 --> 03:19.780
destroyed when you leave them, no matter if you're going forward or backward.

03:19.890 --> 03:25.160
Now with Ionic, that's actually not the case. When you are going forward to a new page,

03:25.260 --> 03:31.780
that old page which is still in that stack of pages so to say is kept in a cache in memory.

03:32.070 --> 03:37.440
So this whole stack of pages is actually cached you could say and when you pop a page off,

03:37.440 --> 03:41.600
well then this is removed from the cache because it's removed from the stack.

03:41.640 --> 03:48.420
This will become important and it will also explain that little bug we had in our last modules which

03:48.420 --> 03:51.610
I'll fix now or which I'll now explain you why it happens.

03:51.840 --> 03:57.180
Now besides the Angular router for navigating around which we'll primarily use and which is the main

03:57.180 --> 04:00.640
recommended tool for going around in your Ionic Angular app,

04:00.750 --> 04:06.660
besides that, we also got the Ionic nav controller. That is an injectable service which you can inject

04:06.660 --> 04:12.080
into any component or a service you might have and that essentially gives you some utility methods that

04:12.090 --> 04:14.880
will also interact with that start controller,

04:14.880 --> 04:20.280
for example it will give you a pop method which allows you to manually pop off the latest page on the

04:20.280 --> 04:26.310
stack of pages and which will therefore trigger a back navigation. We'll not use the nav controller too

04:26.310 --> 04:26.990
much,

04:27.030 --> 04:28.320
still I will show it to you,

04:28.320 --> 04:31.100
it's good to know it's there, can help you with going back

04:31.110 --> 04:35.010
as I mentioned but primarily, we'll use the Angular router.
