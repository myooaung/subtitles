WEBVTT

00:02.190 --> 00:04.980
So we learn a lot about native packages how to use them.

00:04.980 --> 00:09.010
It's super simple in the end and the documentation again is really great.

00:09.330 --> 00:11.640
But storage is a different future.

00:11.730 --> 00:17.770
And for this we also get an entry in the documentation and the only documentation storage here.

00:18.390 --> 00:24.180
Now storage simply is a way of storing data on the device and with data.

00:24.180 --> 00:30.390
I don't mean files I mean data we typically store in our services for example.

00:30.640 --> 00:37.110
And the way it stores does is it will automatically try to find a fitting storage on the device you're

00:37.120 --> 00:38.360
running it on.

00:38.530 --> 00:46.390
It will try to prioritize Eskew a light which is a little database running on your device by default.

00:46.390 --> 00:52.930
So it will try to destroy your data there and it won't use local storage which works in a browser but

00:52.930 --> 00:54.530
not on your local device.

00:54.580 --> 01:00.780
But generally it will figure out for you where you stored it and it has a priority of available storage

01:00.900 --> 01:07.340
which it tries to access starting it again does sequel light database here which is the best option.

01:07.360 --> 01:09.820
So storage will do all that for you.

01:10.000 --> 01:16.810
And in order to use storage you theoretically need to add this plug in and then install it.

01:16.810 --> 01:22.690
But with the latest version of I only do this it's not necessary anymore storage is enabled by default

01:22.960 --> 01:29.210
so we can start using it instantly and we will do so and we will do so in our place of service because

01:29.210 --> 01:35.750
this is the part where we manage our data in order to use storage are simply important here.

01:35.900 --> 01:46.240
So import storage from at ionic storage so might be a bit strange to see disport when before we always

01:46.240 --> 01:51.010
had ionic angler but that's just where it just happens to be included at.

01:51.040 --> 01:58.990
So at ionic storage and wifi is added here we should access to storage whenever we add a new place for

01:58.990 --> 01:59.740
example.

01:59.740 --> 02:02.230
Now there are different ways of implementing this.

02:02.230 --> 02:05.980
You could also only access to storage if you're about to close your apps.

02:06.010 --> 02:10.880
So you could add are energy on destroy method and your app component for example.

02:11.020 --> 02:16.450
I'm going to go with this approach because it's not bad to access to storage more frequently and I want

02:16.450 --> 02:22.480
to make sure that data really is stored and that it's not getting stored because well maybe even when

02:22.480 --> 02:26.580
trying to do this while closing the app we didn't have enough time where something goes wrong.

02:26.770 --> 02:29.520
So I'll do this here in the app place method.

02:29.790 --> 02:34.910
And I can simply access to storage by injecting it into my class.

02:35.050 --> 02:39.610
So importing it is not enough I also need to inject that and therefore we need to add add uncheckable

02:40.060 --> 02:46.760
also make sure to import at injectable from angular core or move that import up to the top.

02:46.900 --> 02:53.170
So add ed uncheckable so that we can tell Englert that we are going to inject something into the service

02:53.800 --> 02:56.860
and then we'll add a constructor to the service of course.

02:56.890 --> 03:02.500
And here I will simply inject the storage and store it in our property named storage.

03:02.770 --> 03:08.680
So if the storage is now jailable and we can access it on this property and here we have a couple of

03:08.680 --> 03:13.260
Meffert and set as the method I'm looking for which allows us to set key value pairs.

03:13.270 --> 03:14.670
And this is how storage works.

03:14.680 --> 03:17.090
You set key value pairs well.

03:17.150 --> 03:22.870
And here the key could be places that can be any key you want but you have to use Diski later to retrieve

03:22.870 --> 03:23.740
the data.

03:23.800 --> 03:30.900
And I want to store my places array here so that I'm storing the places in the storage.

03:30.910 --> 03:39.280
Now we also get a promise when doing this and we can catch errors there or well response to a successful

03:39.280 --> 03:41.750
case if we did get an error.

03:41.770 --> 03:47.830
So if we were not successful Well then you can do all kinds of error handling Shirwa error message.

03:47.830 --> 03:55.270
What I want to do is I want to remove the last place here to make sure that we're not storing a place

03:55.270 --> 03:58.660
in our app which we don't have in reality.

03:58.660 --> 04:07.630
So here I'm splicing the last edit place and I can simply get the position of this index off and then

04:07.630 --> 04:08.730
the place.

04:08.740 --> 04:16.090
This place we created here which we pushed onto our aere and remove this item just to make sure that

04:16.090 --> 04:22.330
again I'm not storing something in this array which somehow failed to be stored on our storage on the

04:22.330 --> 04:25.340
device in a success case though.

04:25.480 --> 04:31.030
Well in this case I could do whatever I want show as access message or do nothing.

04:31.060 --> 04:34.210
I'm going to do nothing here because I don't have anything to do.

04:34.330 --> 04:40.800
But this would be where you can will react to death being stored successfully now in low places Alster

04:40.840 --> 04:41.980
returned the array.

04:42.070 --> 04:48.190
But I want to add a new method which I'll call fetch places and they want to retrieve them from the

04:48.190 --> 04:48.950
storage.

04:49.000 --> 04:56.350
So here what I want to do is I want to access my storage and then use to get Mefford to get a specific

04:56.350 --> 04:56.880
key.

04:56.890 --> 04:58.450
The place is key.

04:58.510 --> 05:05.620
This again returns a promise which will either give me the data or an error in the error case I will

05:05.620 --> 05:07.900
for now simply log it to the console.

05:07.900 --> 05:10.090
You could of course you are toast or something like this.

05:10.090 --> 05:11.160
In this case.

05:11.350 --> 05:13.420
It will just fail to retrieve our place.

05:13.420 --> 05:18.300
So what we will definitely see is an empty list of places in a success case.

05:18.310 --> 05:23.440
I know that I get an array of places because that is what was stored in this key here.

05:23.470 --> 05:23.790
Right.

05:23.800 --> 05:26.150
We do this with the set method up there.

05:26.620 --> 05:34.020
And then I can simply use that array of place this and assign it to my place this year in the service

05:34.350 --> 05:39.650
assigned the places I retrieved there but only if this is not null because it could be null.

05:39.650 --> 05:45.870
If we start this for the first time and don't have any places in this case if it is not now I will use

05:45.870 --> 05:51.750
to place it but otherwise I want to assign an empty array because places would simply be undefined and

05:51.750 --> 05:53.150
not an empty array.

05:53.190 --> 05:54.910
If there are no place to store it.

05:55.050 --> 05:59.650
So I need to make sure that they don't assign undefined to this because I'm trying to loop over it.

05:59.810 --> 06:03.010
Instead I want to set it to an empty array in this case.

06:03.120 --> 06:09.060
So this is what I do when I fetch places and now there are a couple of places we could call fetch places

06:09.230 --> 06:18.090
all do it in the home page and then want to do this whenever the home page is actually created and justice

06:18.090 --> 06:23.400
will not only be the case on startup but it can't hurt to reload that during the running up from time

06:23.400 --> 06:23.870
to time.

06:23.910 --> 06:28.350
But he also implemented the app component or with wherever you like.

06:28.350 --> 06:34.860
So I'm going to do this for you on in it with ngi on it to be implemented thereafter and they're able

06:34.850 --> 06:42.240
to simply reach out to my place of service and call fetch places which will simply again reach out to

06:42.240 --> 06:46.010
my storage and store the places in the array here.

06:47.090 --> 06:52.380
So this will make sure that I retrieve those places with that implemented.

06:52.550 --> 06:57.040
We're almost there but we also meet at justice when we delete a place.

06:57.140 --> 06:59.250
Let's do this in the next lecture.
