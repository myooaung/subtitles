WEBVTT

00:02.260 --> 00:03.570
Now to render a map in there.

00:03.580 --> 00:09.310
Let's go back to the map modal components typescript file and now it's time to import dad Google Maps

00:09.310 --> 00:13.590
Javascript SDK which we unlocked and use it.

00:13.600 --> 00:19.630
Now I want to render that map as soon as that view has been loaded because what we do now is something

00:19.630 --> 00:25.600
we rarely do when working with angular will directly manipulate the DOM a little bit.

00:25.600 --> 00:28.180
Typically you want to let angular do that.

00:28.180 --> 00:32.380
But here in the case of Google Maps we got no real way around that.

00:32.380 --> 00:40.060
Now let me note that there is a package called angular Google Maps and you can't absolutely use that

00:40.330 --> 00:41.050
as well.

00:41.050 --> 00:44.580
So definitely feel free to use that package dive into the box there.

00:44.650 --> 00:48.080
And this gives you a lot of components to work with and construct this map.

00:48.100 --> 00:55.680
I just want to mix it up and also show the Javascript SDK case so they will interact with our view.

00:55.690 --> 01:00.790
So the actual DOM that gets rendered from inset our types could file and hence we want to do that from

01:00.790 --> 01:07.960
inside a lifecycle look that runs after our view has been initialized and that would be the after view

01:08.040 --> 01:09.430
in its lifecycle.

01:09.430 --> 01:14.150
So make sure to add this interface here and implement this from at Anglo core.

01:14.410 --> 01:19.800
And this forces you to add energy after viewing it as a lifecycle here.

01:20.030 --> 01:22.230
No it energy after viewing it.

01:22.360 --> 01:31.570
We can now start initializing Google Maps for this I'll add a new private method here which I'll name

01:32.410 --> 01:36.120
get Google Maps and you can named as however you want of course.

01:36.130 --> 01:41.060
And in their I now want to load that Javascript SDK.

01:41.080 --> 01:44.720
Now first of all I need to get access to my window here.

01:44.810 --> 01:53.020
I'll stored is in a constant win and I'll store window as any year now window is a global variable available

01:53.020 --> 01:56.210
in javascript that refers to our browser window essentially.

01:56.350 --> 02:03.920
And I'll just cook said a sentence to ask any sort of typescript does not give me any errors thereafter

02:03.950 --> 02:12.280
I'll add the Google module constant and set it to Windows at Google now wind up Google will now refer

02:12.340 --> 02:16.620
to a variable that by default is not set.

02:17.350 --> 02:25.510
However I need to do this because it will be set as soon as we imported these Javascript SDK and by

02:25.750 --> 02:29.760
accessing this even though of course it will not be said when we first run this.

02:29.830 --> 02:35.320
I can make sure that I can check whether does exist which it will do as soon as we load the map SDK

02:35.320 --> 02:38.280
for the first time so that I don't run this code.

02:38.290 --> 02:45.760
I'm about to run where I do import Javascript SDK too often because now I'll check if Google module

02:45.760 --> 02:51.550
is a thing so if this is not undefined which had for the first time of course will be and if it is not

02:51.550 --> 02:52.180
undefined.

02:52.180 --> 02:59.860
If on the Google module we have a maps property if that is the case then I know OK the Javascript SDK

02:59.860 --> 03:05.710
has been loaded before I should not load it again and therefore here I will return a promise actually

03:06.130 --> 03:13.480
that instantly resolves to the Google module maps property because Dad will in the end be the entry

03:13.480 --> 03:20.000
point to our maps Javascript SDK that exposes all the functions and methods we're about to use.

03:20.080 --> 03:25.630
So I will return that if we already loaded it and I return it as a promise because the our way of loading

03:25.630 --> 03:31.480
the Google Maps Javascript SDK in case we haven't loaded it yet also gives me a promise and I want to

03:31.480 --> 03:37.870
return a promise in all cases so that I can rely on the get Google Maps it function here to always return

03:37.870 --> 03:44.650
a promise that includes some data that resolves to some data idea and to that maps SDK thing.

03:44.740 --> 03:51.130
Now you could add more precise types whoever you want you but the Google Maps SDK exposes a lot of my

03:51.130 --> 03:56.010
efforts and I don't want to spend the next two hours typing method definitions here.

03:56.290 --> 03:57.780
So therefore it is our first check.

03:57.790 --> 04:02.950
Now of course the first time we execute this as I said to Google Maps SDK will not have been loaded

04:02.950 --> 04:10.430
yet and therefore in this case I will then loaded I will for the ad return and you promise here and

04:10.430 --> 04:16.240
that promise receives a function that in turn receives two arguments resolved and rechecked.

04:16.250 --> 04:21.230
These are functions we can call inside of this anonymous function we pass to the promise constructor

04:21.590 --> 04:27.400
to then let this promise resolved to something or reject something so throw an error.

04:27.410 --> 04:34.190
Next I'll create my own script element with document create element script and that's the part I meant

04:34.310 --> 04:36.670
we're not doing that often in angular.

04:36.740 --> 04:40.010
And in general you shouldn't interact with the DOM.

04:40.010 --> 04:44.150
This is a rare niche case where this is actually acceptable.

04:44.150 --> 04:49.340
So I create a script tag here and on that script we can now set a source.

04:49.340 --> 04:56.220
And this is now this source we see here so we can copy that source here.

04:57.060 --> 04:59.870
You only need to copy it up to the API key though.

05:00.690 --> 05:03.930
So let's grab that and let's add this here.

05:03.930 --> 05:09.300
And of course your API key should now be your actual API key.

05:09.960 --> 05:12.510
So the API key we got here.

05:12.510 --> 05:17.360
So let's copy that API key and let's enter it here.

05:20.220 --> 05:25.240
So with that we're essentially setting the source of the script which we want to load.

05:25.290 --> 05:35.880
Now let's also said script async to true and script deferred to true and this will control how the scripts

05:35.880 --> 05:37.220
source is actually loaded.

05:37.230 --> 05:44.380
That this is loaded in a non blocking way and thereafter we can reach out to our document body and append

05:44.440 --> 05:48.910
our child and that child of course is the script tag.

05:48.910 --> 05:55.600
Now one important note whilst we do interact with the DOM directly we don't mess with Angela's template

05:55.600 --> 05:56.140
here.

05:56.140 --> 06:03.010
Instead we append this to our roots document whereas angular only has control over a part of that document.

06:03.040 --> 06:08.740
If you check the index each time all file angular the app gets rendered into this app Ruth thing it

06:08.740 --> 06:10.650
does not control the entire page.

06:10.660 --> 06:17.800
So actually right now we're not rendering anything into angular template or into H2 him Al content rendered

06:17.830 --> 06:20.890
based on an angular template.

06:21.090 --> 06:25.620
So now the script will be loaded and we can now wait for this to load.

06:25.650 --> 06:32.130
So a script on load is a listener I set up here and I define an anonymous RL function that will execute

06:32.130 --> 06:40.840
as soon as the script has been loaded and their I'll add a new constant loaded Google module for example

06:41.230 --> 06:45.520
and now we'll have that Google key on the window.

06:45.520 --> 06:49.210
Now the window we defined up here that is our general window object.

06:49.240 --> 06:54.700
Now it is will be registered as soon as does SDK loaded so we should have that loaded Google module

06:54.700 --> 06:58.060
now let's still check it to be super safe.

06:58.240 --> 07:00.280
Let's check if that has been loaded.

07:00.280 --> 07:05.550
If that is set there for and if on the loaded Google module we have that maps keep.

07:05.800 --> 07:07.610
And if that is the case we know OK.

07:07.630 --> 07:10.050
Now we have maps we can interact with it.

07:10.060 --> 07:17.770
So here we should call resolve and resolve our loaded Google module maps thing here just as up here

07:17.770 --> 07:23.630
when we already had it we resolved the existing Google module maps property.

07:23.880 --> 07:27.090
If for some reason we don't have Google module.

07:27.190 --> 07:34.690
So for some reason loading that SDK failed then I will reject this and throw an error message off Google

07:34.690 --> 07:42.400
maps SDK not available and then we'll have a problem will not be able to render a map essentially.

07:42.400 --> 07:43.710
So that's a lot of work.

07:43.840 --> 07:46.800
But now we've got this Gap Google Maps function place.

07:47.140 --> 07:50.640
We can now call that an NGO after the U.N. is here.

07:50.710 --> 07:59.410
This get Google Maps and this now will always return us that Google Maps functionality here or it is

07:59.410 --> 08:01.270
rejected with that error.

08:01.450 --> 08:08.440
So we get back a promise here is let's add then and catch and catch we'll get that error in case we

08:08.440 --> 08:09.580
reject that the promise.

08:09.580 --> 08:17.050
So in case we got no maps available therefore here I will for now simply lock this.

08:17.130 --> 08:22.680
You of course might think about adding some fallback here or throwing showing some alert to the user

08:23.190 --> 08:24.840
anything like that.

08:24.840 --> 08:27.140
Let's focus on the then case for now.

08:27.150 --> 08:33.360
And in their we basically get our Google Maps esta case.

08:33.370 --> 08:38.920
Now we get an object with a lot of methods that allow us to render a map render markers and so on and

08:38.950 --> 08:42.030
this is now what we work with to build that actual map.
