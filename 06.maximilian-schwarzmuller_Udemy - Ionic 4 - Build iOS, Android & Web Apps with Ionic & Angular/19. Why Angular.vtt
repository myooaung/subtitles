WEBVTT

00:02.240 --> 00:06.770
So in this module, we learned a lot about the core Ionic components,

00:06.800 --> 00:13.010
you learned that the official docs are the place to go to learn all about them, all possible configurations

00:13.910 --> 00:16.950
because it's impossible to just memorize them,

00:16.970 --> 00:23.030
you will learn them by heart over time as you use them but it is totally normal that you initially look

00:23.030 --> 00:28.580
into here and learn how you can use certain components, how you can combine them and I still look into

00:28.580 --> 00:34.790
this documentation as well because there are some components which you use all the time, which you quickly

00:34.790 --> 00:37.570
know how to use and which you don't need to look up

00:37.670 --> 00:42.590
but there also are components you don't use that often and then the docs are your friend,

00:42.590 --> 00:47.600
plus new features might be added and you can always see them here.

00:47.610 --> 00:50.310
So with that, we were able to build something like this,

00:50.310 --> 00:55.770
something like this application and we achieve this with just these Ionic components, without our own

00:55.770 --> 01:00.890
styling and the behavior is then the only thing we control with our Javascript code,

01:00.990 --> 01:01.920
so the behavior of

01:01.950 --> 01:02.940
the app.

01:02.940 --> 01:09.540
And that is exactly where Angular can help us and why we will use Angular, because if we will implement

01:09.660 --> 01:14.110
everything on our own, this will be quite hard with vanilla Javascript.

01:14.310 --> 01:19.830
It doesn't have to be Angular but you will definitely need some framework or library at some point of

01:19.830 --> 01:23.300
time so that you don't have to reinvent the wheel all the time,

01:23.310 --> 01:27.440
for example when it comes to adding elements to the DOM, you don't want to do that,

01:27.480 --> 01:32.520
you want to focus on your business logic and not on these nitty-gritty details which you can still easily

01:32.520 --> 01:33.050
mess up,

01:33.690 --> 01:41.200
so therefore, we use Angular. To be very precise, there are three main reasons why we would use Angular

01:41.230 --> 01:49.240
or any other framework because doing everything on our own will be hard, especially hard will be if we

01:49.240 --> 01:51.060
have more complex logic.

01:51.100 --> 01:55.630
As I mentioned we don't want to reinvent the wheel of the low-level implementations,

01:55.630 --> 01:57.990
we don't want to access the DOM on our own,

01:58.030 --> 02:02.410
we just want to control how will our DOM need to change,

02:02.410 --> 02:05.910
which data will need to be output, like a list of products.

02:05.980 --> 02:09.040
We don't want to take care about the actual outputting logic,

02:09.100 --> 02:16.510
we want to control the logic behind that, so adding a product, validating input products, fetching them

02:16.510 --> 02:19.100
from a server, that is what we want to do.

02:19.240 --> 02:25.120
We also don't want to do all the state management on our own because state management in bigger apps

02:25.120 --> 02:31.600
can be really hard, passing the data around correctly and updating different parts in the application

02:31.600 --> 02:34.210
when some data changed somewhere else,

02:34.210 --> 02:41.100
this can quickly become a nightmare and Angular makes this super easy with its services. So to prevent

02:41.200 --> 02:48.370
our user interface from behaving unpredictably and our application having tons of bugs,

02:48.370 --> 02:54.670
we definitely want to use a state management system as the one offered by Angular, its services and the dependency

02:54.670 --> 03:01.380
injection and this by the way also kind of touches on the alert controller and so on.

03:01.390 --> 03:07.510
You remember this element we had to place in our HTML code and then get access to to create an alert?

03:08.020 --> 03:12.750
With Angular and Ionic, we'll be able to just inject this alert controller,

03:12.940 --> 03:17.480
thanks to a little wrapper package Ionic gives us around

03:17.770 --> 03:23.980
the core components. It then makes using these controller components way easier, so that again we

03:23.980 --> 03:29.680
don't have to focus on adding it and selecting it with the query selector but that we can just inject it

03:29.680 --> 03:31.430
and start using it.

03:31.480 --> 03:36.100
And last but not least, what if our application needs multiple pages?

03:36.100 --> 03:38.530
Right now, we always have one page in our dummy app right,

03:38.530 --> 03:44.010
we didn't navigate around, we didn't press a back button and go somewhere else. In bigger apps

03:44.010 --> 03:49.600
you of course have that, you have tabs, you have a side drawer, you have different pages, different parts of

03:49.600 --> 03:54.450
the app like a list of products, your card and the user profile.

03:54.670 --> 03:57.840
This routing could be done with just Ionic,

03:57.850 --> 04:03.830
it actually has its own router component but the Angular router is way more powerful than that,

04:03.880 --> 04:11.530
it gives us a lot of advanced functionalities and smart routing, so routing correctly where we also can

04:11.530 --> 04:17.200
work with things like query params in the URL and so on is actually quite difficult, so we definitely

04:17.200 --> 04:24.250
want to use a finished and tested and battle-proven routing solution like the Angular router to have efficient,

04:24.250 --> 04:31.400
fast and powerful feature-rich routing we can add in our app to switch pages and navigate around.

04:31.630 --> 04:37.900
That is why we use Angular because it helps us with the complex logic, because we can focus on writing

04:37.900 --> 04:41.620
the logic and Angular does the rest of updating the DOM,

04:41.620 --> 04:48.340
it gives us clear rules of how we structure our app with components, directives, services and so on, so that

04:48.340 --> 04:52.770
we have a clear plan of building a bigger app.

04:52.930 --> 05:00.580
It helps us with services, bindings and with routing to transport state around and speaking of routing,

05:00.640 --> 05:04.880
there it helps us with passing data and with lazy loading, etc.

05:05.260 --> 05:11.320
So this is why we will use Angular from the next section on and I will show you in detail how to set

05:11.320 --> 05:13.350
up an Angular and Ionic project,

05:13.360 --> 05:18.970
we already did it in Section 1 of the course but now I will also walk you through the created project

05:19.220 --> 05:26.200
and explain how Angular and Ionic work together and how Ionic actually leverages the Angular CLI

05:26.290 --> 05:26.890
under the hood.
