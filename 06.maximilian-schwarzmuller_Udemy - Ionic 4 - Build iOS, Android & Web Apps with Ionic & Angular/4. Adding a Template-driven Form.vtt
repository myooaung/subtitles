WEBVTT

00:02.120 --> 00:05.880
Now if you know angular you know how you can handle forum stare.

00:05.900 --> 00:08.300
And here I want to use the template driven approach.

00:08.300 --> 00:16.700
So an angular we would simply wrap our form with the form element with the normal H HTML form element.

00:16.760 --> 00:21.890
So for example here we could wrap this entire grid which contains our form inputs and the buttons that

00:21.890 --> 00:25.880
belong to the forum with a form element.

00:25.880 --> 00:27.460
Now let me close that here.

00:28.600 --> 00:30.960
And does this how angular would by default.

00:30.970 --> 00:39.670
As long as we add our forms module here which is added by default to imports in the module that contains

00:39.670 --> 00:45.880
the page or the component we place the form on as long as we have that form as module from angular forms

00:46.690 --> 00:52.570
angular will automatically detect this form element and setup a form object behind the scenes for us

00:52.870 --> 00:58.060
where it then allows us to register inputs and that it manages these inputs automatically.

00:58.060 --> 01:00.030
Now how does that work in ionic.

01:00.190 --> 01:02.770
Just like that it is a web n in the end.

01:02.770 --> 01:03.910
Never forget this.

01:03.910 --> 01:08.710
It's a web app where we use angular and therefore we can use all these default angular features without

01:08.740 --> 01:09.960
any changes.

01:09.970 --> 01:17.230
So by wrapping our form inputs here and the buttons with a foreign tag and making sure that we do import

01:17.320 --> 01:20.920
forms module in the module that holds the off page.

01:20.920 --> 01:27.140
We get this template driven approach to work out of the box without any additional configuration needed.

01:27.430 --> 01:32.500
Now the only confusing thing might be well but we're not using normal inputs and buttons.

01:32.560 --> 01:35.860
We're using ion inputs and ion buttons.

01:35.860 --> 01:42.970
The thing is these web components just wrap these normal inputs in buttons and they are written by the

01:42.970 --> 01:50.930
ionic team in a way such that they expose all the API is all the different features normal inputs do.

01:51.190 --> 01:56.500
So I an input can be used just like a normal input in an eye on a form.

01:56.500 --> 01:59.320
You don't need any special configuration.

01:59.350 --> 02:05.710
Instead you can simply add and you model on there and to name attribute which you need to add when working

02:05.710 --> 02:08.680
with the template driven approach and give this any name you want.

02:08.680 --> 02:14.830
Like email and you're good angular can now detect this input and added to the form which is automatically

02:14.830 --> 02:16.250
create for you.

02:16.390 --> 02:19.160
You can of course also add validation as you know it.

02:19.180 --> 02:23.920
So for the template driven approach you add validation by adding directives on the input.

02:23.950 --> 02:29.440
For example here we could add the required directive and the email directive to make it clear that this

02:29.440 --> 02:35.890
input is both required and should be an email and therefore of course all set type here from text to

02:35.890 --> 02:42.170
email which will make sure that we also get the right keyboard to open up on a real device.

02:42.220 --> 02:48.850
So the right soft keyboard which automatically gives us simple access to the at sign and so on.

02:48.850 --> 02:52.160
So with that I configured the first input.

02:52.210 --> 02:58.450
Now we can all do configure the second input and there again I add energy model and a name and the name

02:58.450 --> 02:59.520
here can be password.

02:59.530 --> 03:03.550
But you're free to choose any name and I will require that.

03:03.550 --> 03:11.020
And we can also add the min length directive here which both the AI and input supports out of the box

03:11.380 --> 03:17.830
as well as angular angular supports the min length directive and it will automatically validate whatever

03:17.830 --> 03:22.060
we enter here to have a minimum length of whatever value enter here.

03:22.060 --> 03:25.160
So let's say our password should be at least six characters long.

03:25.210 --> 03:28.290
Well then we just have to add Min length six here.

03:28.620 --> 03:34.360
And when I say ionic all the supports this you'll see in a second what I mean by that and why this is

03:34.360 --> 03:36.010
pretty amazing.

03:36.010 --> 03:39.220
So we have our two inputs configured.

03:39.220 --> 03:45.580
We have our form angular should now be able to automatically detect all of that but in order to get

03:45.580 --> 03:52.060
access to that form we need to add a local reference on that form element which can have any name you

03:52.060 --> 03:54.070
want like f or form.

03:54.130 --> 04:00.790
I'll just go with f and you actually assign a value to that and the value here has to be energy form.

04:00.850 --> 04:07.540
What this does is it gives you access to this form object angular created for you and it gives you access

04:07.540 --> 04:13.080
to this form object by giving you a reference to it stored in that f local reference.

04:13.240 --> 04:19.800
So now everywhere in this template we can get access to that form fruit at f local reference and therefore

04:19.810 --> 04:30.960
for example here we can add energy submit event listener here and call on submit there and here I forward

04:31.050 --> 04:37.610
F so this local reference this allows me to then accept the form angular and create for us in the on

04:37.610 --> 04:43.410
submit method and in case you're wondering and you submit is a special directive angular gives us that

04:43.410 --> 04:48.990
will prevent the default which would be that the form submission actually sends a request to the back

04:48.990 --> 04:54.090
end which we don't want and instead of just captures the event it gives us access to all the foreign

04:54.090 --> 04:55.010
data.

04:55.230 --> 05:01.350
So now we just have to add ons up at method and we have to make sure that this form gets submitted only

05:01.350 --> 05:07.770
by that log in button and I do make sure that this is the case by giving does a type of submit and giving

05:07.770 --> 05:10.430
the order button a type of button.

05:10.500 --> 05:17.860
So the first button will now not submit the form only the second button will let's now add the on submit

05:17.860 --> 05:27.960
method in the off page typescript file and there we will get a form which is of type energy form an

05:28.080 --> 05:29.490
energy form is a type.

05:29.490 --> 05:32.040
You need to import from at angular forms

05:35.250 --> 05:43.650
and let simply for now console log this form object to see what's inside of it.

05:43.760 --> 05:45.420
And now let's see what that gives us.

05:45.780 --> 05:47.610
Let's wait for this page to reload.

05:47.610 --> 05:48.770
Here's our form.

05:48.900 --> 05:50.550
And if I press log in.

05:50.550 --> 05:55.320
You see I get this energy for the thing you're under controls.

05:55.320 --> 05:58.660
You see a list of all the controls angular registered for us.

05:58.710 --> 06:04.400
That is the e-mail and password control because these are the two inputs on which we added and you model.

06:04.530 --> 06:10.470
We also have that value field which is a javascript object with our control names email and password.

06:10.470 --> 06:18.060
So the names we assigned on these iron inputs in our template and the value which was in them when the

06:18.060 --> 06:19.790
form was submitted.

06:19.830 --> 06:27.260
So this works but it's not just a submission that works if we go back and for example I happen here

06:27.550 --> 06:31.090
in a leaf that you now see I have a red border.

06:31.100 --> 06:37.430
So we automatically get some error stalls here out of the box and that's the case because if we inspect

06:37.430 --> 06:46.010
this does I an item here actually receives some classes like iron invalid iron touched.

06:46.160 --> 06:50.090
And that's again the iron item working to gather with the iron input.

06:50.090 --> 06:57.680
As I mentioned before the Iron input has these angular classes like energy and valid energy pristine

06:57.680 --> 07:04.970
and so on it also has these ionic specific classes and that is what I meant with ionic also understands

07:05.090 --> 07:13.280
Min length and so on ionic also has these basic validation features built in built into its components

07:13.280 --> 07:20.120
its input components and therefore it is also able to correctly show you our styles and it all is as

07:20.120 --> 07:26.780
as some extra adjustments for the angular package so it's able to show you aero styles when your validation

07:26.900 --> 07:34.580
errors out here and therefore we got these nice aerosols out of the box without us needing to do anything.
