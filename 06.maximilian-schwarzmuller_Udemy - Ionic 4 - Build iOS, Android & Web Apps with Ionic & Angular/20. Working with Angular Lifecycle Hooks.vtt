WEBVTT

00:02.580 --> 00:08.430
Now it's nice to load our list of persons like this but this is actually not the recommended way of

00:08.430 --> 00:09.650
doing it,

00:09.660 --> 00:13.870
instead you should use something which is called a lifecycle hook.

00:13.990 --> 00:20.490
Each Angular component goes through a lifecycle and going through the entire lifecycle and how it works

00:20.520 --> 00:24.400
and which hooks are available in detail is too much for this refresher

00:24.540 --> 00:30.960
but you can dive into the official Angular docs under angular.io, fundamentals, components, templates,

00:30.960 --> 00:32.110
lifecycle hooks

00:32.280 --> 00:35.550
to learn more about the lifecycle and which hooks exist.

00:35.550 --> 00:41.160
These are essentially methods you can add to your component and Angular will execute them for you when

00:41.160 --> 00:43.040
it reaches that hook.

00:43.110 --> 00:46.330
You do this in a two-step process,

00:46.380 --> 00:51.550
first of all you implement a so-called interface, that is a Typescript feature again now,

00:51.760 --> 00:54.060
it's a contract which your class

00:54.060 --> 00:59.610
signs basically, which kind of forces your class to implement a certain functionality

01:00.240 --> 01:04.010
and here, I'll implement the onInit interface.

01:04.170 --> 01:07.880
You now need to import onInit from @angular/core

01:08.070 --> 01:16.410
and now we get an error because this forces us to add the ngOnInit method and that is the initialization

01:16.410 --> 01:21.180
lifecycle hook which Angular will execute when it creates our component

01:21.180 --> 01:27.900
and yes, it does so for the constructor too but it is a best practice to do basically all your initialization

01:27.900 --> 01:31.170
tasks in here and not in the constructor,

01:31.170 --> 01:35.550
for example, it's then easier to write tests for this component.

01:35.550 --> 01:41.940
So here, we could now get our persons from the person service

01:41.940 --> 01:47.120
but the problem is the person service is only available in the constructor.

01:47.220 --> 01:55.430
Well, we can simply create a new property, maybe a private property here even which I'll name person service

01:55.430 --> 02:03.850
and which will be of type person service and in the constructor, we can simply say this person service

02:04.330 --> 02:06.730
is equal to prs service

02:06.730 --> 02:12.710
and now we make this available component-wide or class-wide with the help of this property.

02:12.790 --> 02:17.920
Private only means we can not access this from inside the template, which you shouldn't and you can not

02:18.010 --> 02:20.670
access it from other components which you also don't want to

02:21.520 --> 02:29.760
and now here we can simply say this person list is equal to this person service.persons. Now

02:29.770 --> 02:36.880
side note, this is such a common pattern, that you have such a property and you then just store an argument

02:36.940 --> 02:43.990
of your constructor in this property that there is a shortcut. Instead of doing it like this,

02:43.990 --> 02:50.800
you can simply prefix or add private or public, that would work too for a public property but you could

02:50.800 --> 02:57.600
add private in our case here in front of the argument name to create a property with that same name

02:57.810 --> 02:59.150
in your class.

02:59.150 --> 03:06.090
So I'll comment this out and now we will still have a prs service property in the whole class because

03:06.090 --> 03:07.560
it gets created automatically

03:07.560 --> 03:11.730
here. Now if I save all of that,

03:12.020 --> 03:14.940
you will still see our list of persons here.

03:15.110 --> 03:15.920
Now that's nice,

03:15.920 --> 03:19.680
we can now access that data and we do it with the help of a lifecycle hook.

03:19.730 --> 03:23.000
How can we now also add a person with a service?
