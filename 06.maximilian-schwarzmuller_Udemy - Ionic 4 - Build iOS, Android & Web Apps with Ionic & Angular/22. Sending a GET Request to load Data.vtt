WEBVTT

00:01.880 --> 00:08.170
In the last lecture we successfully stored our data for our locked in user on our firebase server.

00:08.240 --> 00:09.560
That's great.

00:09.560 --> 00:16.780
Now we all want to get to stay the back and for this I'll go back to the shopping list service and implement

00:16.780 --> 00:19.520
a fitting method which allows us to retrieve data.

00:19.730 --> 00:22.880
We already have our store list Meffert.

00:22.910 --> 00:27.860
Now I'm going to add a second method to your which I'll call fatuus because this is what they do have

00:27.860 --> 00:29.060
fetched a list.

00:29.060 --> 00:33.200
I also need the token there because of course you have to be of any credit to be allowed to read the

00:33.200 --> 00:34.280
data too.

00:34.640 --> 00:39.860
And then I will again return in observable the observable generated by the get method now because I'm

00:39.860 --> 00:47.360
sending a GET request into or L is the same Eurail as before including the token of course because we

00:47.360 --> 00:49.150
need to send a token here too.

00:49.490 --> 00:51.640
So this is our your l.

00:51.680 --> 00:57.570
We also need to get the user ID of course to retrieve the right data.

00:58.730 --> 01:00.780
We're almost done already.

01:00.800 --> 01:07.360
However I want to add the map method to transform this data bit in map.

01:07.370 --> 01:12.460
I know that I'll get you response which still is of type response.

01:12.710 --> 01:19.690
And then I will again simply extract the body of this response and turn it into a shallow script object

01:19.700 --> 01:20.620
like this.

01:20.810 --> 01:22.840
But I also want to do something else.

01:22.970 --> 01:30.800
I'll map an additional operator D-do operator and do will simply run on the result of this observable

01:30.830 --> 01:37.310
just like subscribe but but in-between it's not the SUBSCRIBE method itself it just allows us to use

01:37.400 --> 01:38.440
the response data.

01:38.450 --> 01:46.730
If someone else subscribes so like a listener in between here I will also get the data and I want to

01:46.730 --> 01:54.800
use the data to overwrite the list of ingredients here in the service because keep in mind we're already

01:54.800 --> 02:00.080
storing our ingredients list here into shopping lists service dishonesty ingredient list we're displaying

02:00.110 --> 02:01.640
on our Web page.

02:01.700 --> 02:04.830
Of course I want you over this if I fetch new data.

02:05.030 --> 02:08.440
And why not do this right here if I'm already in the service.

02:08.540 --> 02:14.780
So I will set this ingredients equal to data because data will just be my array of ingredients.

02:14.780 --> 02:18.870
It's the same your LSD you are used to store the data stored in an array.

02:18.890 --> 02:20.300
So what are we going to get back.

02:20.330 --> 02:22.570
Well of course an array.

02:22.600 --> 02:28.600
So with that the ingredients data is overwritten but we're not sending the request because we're not

02:28.600 --> 02:29.440
subscribing.

02:29.440 --> 02:30.790
So let's do this now.

02:30.930 --> 02:39.120
In your shopping list page here if we chose load here I want to load the data.

02:39.190 --> 02:42.110
Now I'm going to copy the code from down there.

02:42.130 --> 02:47.590
Of course you could also refactored as a bit since we do have quite a bit of code duplication here but

02:47.950 --> 02:54.950
for teaching reasons or just to make this really clear I like to keep it separate and duplicated code.

02:55.000 --> 03:00.050
But I think it's a bit easier to see what we're doing in each of those callbacks.

03:00.100 --> 03:05.510
So it might not be the optimal code but hopefully one which is pretty clear about what it does.

03:05.740 --> 03:11.290
So we're now in the if block where we check if we're loading data then we're getting the token then

03:11.290 --> 03:18.370
we're reaching out to the shopping lists service and then here I want to reach out to fetch list instead

03:18.370 --> 03:19.320
of story list.

03:19.360 --> 03:21.150
I still passed the token.

03:21.280 --> 03:27.730
I still subscribe of course but then in the success call back here I know that I will get a list of

03:27.730 --> 03:29.210
ingredients of course.

03:29.230 --> 03:36.600
So this is the type of this list and that I want to use it here in this Colback indie success Colback

03:37.410 --> 03:41.290
this list of ingredients is what I fetched from the server.

03:41.310 --> 03:44.690
It might also be undefined if no list was stored.

03:44.910 --> 03:48.450
So I'll first check if a list is set if it is not null.

03:48.450 --> 03:54.450
So if we actually did successfully fetch some data in this case or also want to replace my list items

03:54.450 --> 03:59.680
here on this shopping this page do list items and displaying on the page in the end.

03:59.940 --> 04:05.070
I did already replace them into service with the do operator but I also need to replace them here on

04:05.070 --> 04:06.090
the page.

04:06.660 --> 04:14.530
If we didn't get a list though well then I want to set my list items to an empty array though of course

04:14.530 --> 04:19.310
you could also do nothing here because maybe you wanted to keep your current state.

04:19.310 --> 04:23.070
In that case really depends on what you're trying to achieve.

04:23.780 --> 04:28.400
Well with some place let's save this and let's see if it works as intended.

04:28.400 --> 04:33.720
Keep in mind we already did store milk on our shopping list in the last lecture.

04:33.800 --> 04:41.070
So this reloads the data is gone but if I now click on load list we don't see anything right.

04:41.130 --> 04:42.300
We don't see an error.

04:42.300 --> 04:44.030
So it kind of seems to work.

04:44.040 --> 04:46.590
But why don't we see our updated list.

04:46.950 --> 04:50.830
Well that's simply due to how change detection works in English too.

04:50.910 --> 04:53.350
We do override our list items arrays.

04:53.360 --> 04:59.430
This is correct but this alone doesn't trigger the change to static detection in our Colback here.

04:59.550 --> 05:06.630
We will solve this in the next videos when we add some cosmetics to our app when we make the user interface

05:06.630 --> 05:07.850
nicer.

05:07.860 --> 05:12.330
We can see that the data was retrieved if we navigate back a wall or a way and back.

05:12.330 --> 05:13.970
Now you see the mulga item here.

05:14.100 --> 05:17.060
So this works and this is the key takeaway for now.

05:17.070 --> 05:23.670
Now let's add some nice effect some spinner for example whilst we're loading and then this will also

05:24.000 --> 05:27.570
solve our issue of not having an up to date page.

05:27.690 --> 05:30.560
Let's dive into polishing days and the next lecture.
