WEBVTT

00:02.010 --> 00:07.520
Wafting deviant class created in the last lecture it's now time to work on the service.

00:07.620 --> 00:13.630
So let's add a new fall to the services folder the shopping list that yes file.

00:13.680 --> 00:18.120
And again you could named a shopping list service that yes.

00:18.160 --> 00:27.220
Now in this service file here I will export a class named shopping list service like this to describe

00:27.220 --> 00:28.240
what it is.

00:28.660 --> 00:35.740
And now here's your challenge try populating or filling this shopping service with live on your own.

00:35.950 --> 00:41.630
Again we will need some property which this store is an array of ingredients and then we need methods

00:41.650 --> 00:50.830
to add a new item to that array add multiple items at once remove the item or get a copy of that array

00:50.920 --> 00:53.440
of shopping list ingredients.

00:53.440 --> 00:55.240
Now this is your task.

00:55.240 --> 00:56.800
Good luck with that.

00:56.860 --> 01:02.470
And if you were stuck at some place try to finish all you feel able to finish.

01:02.560 --> 01:06.740
And then we will CD or we will solve this together in a couple of seconds.

01:06.760 --> 01:08.470
Time to pause to video now.

01:10.270 --> 01:12.850
So were you successful.

01:12.910 --> 01:14.730
Let's start with the property.

01:14.740 --> 01:19.140
I'm going to make this a private property so that it's not accessible from outside.

01:19.390 --> 01:22.480
And I'm just naming it ingredients.

01:22.480 --> 01:24.510
This will hold all the ingredients.

01:24.700 --> 01:32.040
So I will use my own ingredient class and therefore imported from the models folder appear to assign

01:32.050 --> 01:33.550
the type to teletypes.

01:33.760 --> 01:37.630
Which types of items will be stored in those ingredients property.

01:37.630 --> 01:40.520
So an array of ingredients is how I define this type.

01:40.750 --> 01:46.090
And it's an empty array at the beginning because we're starting with a empty shopping list.

01:46.120 --> 01:52.720
Now in order to make sure that it doesn't stay empty we need to be able to add item now such a item

01:52.720 --> 01:55.890
could ever be a finished ingredient like this.

01:55.890 --> 02:02.500
You could say we're getting an ingredient or you expect to get a name and the amount and then you create

02:02.500 --> 02:04.150
to the ingredient on the fly.

02:04.300 --> 02:06.000
I'm going to go with the latter approach.

02:06.100 --> 02:08.480
Both approaches are fine though.

02:08.560 --> 02:18.190
So with this name and amount passed as arguments here I can go to my ingredients array up here and push

02:18.250 --> 02:20.120
a new item on this array.

02:20.170 --> 02:24.040
So I will create a new ingredient here on the fly using my constructor.

02:24.040 --> 02:29.370
These types of class have just created a few seconds ago in the last lecture and they are deconstruct.

02:29.390 --> 02:31.210
We need to pass a name and amount.

02:31.210 --> 02:37.190
How convenient that we just got this as parameters here in this method.

02:37.240 --> 02:44.290
This allows us to add a single item but sometimes especially when adding a whole recipe a list of ingredients

02:44.530 --> 02:48.060
we need to be able to add multiple items at once.

02:48.130 --> 02:52.350
So you're all Etty add items array Susan method.

02:52.630 --> 02:59.300
And here I expect to get a list of items so items and this shall be an array of ingredients.

02:59.350 --> 03:04.550
So not a list of names and amounts but just a finished list of ingredients.

03:04.960 --> 03:13.180
Since we get this list of ingredients the question is how do we actually add this to our ingredients

03:13.300 --> 03:14.140
array here.

03:14.290 --> 03:22.540
Now unfortunately we can't say this ingredients push and then push an array that would push the array

03:22.540 --> 03:28.780
to desiré but that means it simply creates one new element on our ingredients array which is this pushed

03:28.780 --> 03:30.350
aere which is Dicere.

03:30.490 --> 03:35.690
So it is not splitting up the array into its Invid individual items and passing it to our older.

03:35.860 --> 03:42.160
Instead it will push this array as one single item which is not what we want to split up desiré into

03:42.160 --> 03:46.820
the individual items we can use iOS 6 features supported by typescript.

03:46.890 --> 03:50.970
The spread operator which is this operator the free dots.

03:51.180 --> 03:58.150
In front of items means de-construct does array entry into its individual elements so that we have a

03:58.150 --> 04:00.930
list of elements instead of an array of elements.

04:01.240 --> 04:08.080
And then we can indeed use push to push all those individual elements to our existing array.

04:08.350 --> 04:10.870
So this will now work as expected.

04:12.240 --> 04:16.600
So with that we got methods to add items to the array.

04:16.620 --> 04:20.390
Now we also want to be able to get this array or get a copy.

04:20.430 --> 04:26.400
So I will add I get items Meffert and you could of course also name those methods add ingredient add

04:26.400 --> 04:31.300
ingredients get ingredients whatever you like well and get items short.

04:31.320 --> 04:36.750
In the end return those ingredients are great but I don't want to return it like this because this will

04:36.750 --> 04:42.250
return a reference to the serape and you could do this there is not necessarily something wrong about

04:42.250 --> 04:44.600
this but I also want to show an alternative.

04:44.790 --> 04:50.930
If you want to show a copy which means if you added this copy thereafter it won't add a D original erase

04:50.990 --> 04:52.120
stored here.

04:52.290 --> 04:59.220
You can simply use slice without any arguments and this will create a real copy of this array and return

04:59.220 --> 05:05.000
this copy instead of the actual array which will kind of also defeat the purpose of making it private

05:05.010 --> 05:05.460
right.

05:05.490 --> 05:11.250
Because if you return a full reference to your original array you're able to edit that from outside

05:11.250 --> 05:12.380
thereafter.

05:12.930 --> 05:21.100
Well and then finally I'll add or remove either method which allows me to pass the index off the item

05:21.100 --> 05:28.890
I want to delete and then I can simply access my ingredients array and call the splice Meffert for these

05:28.900 --> 05:35.740
past index and splice exactly one element which of course removes this single element with destry shopping

05:35.740 --> 05:36.820
list service finished.

05:36.820 --> 05:40.490
We're now able to add items to get items and to remove the item.

05:40.510 --> 05:46.240
Let's now start hooking this up when we submit our form the year in the shopping list file and shopping

05:46.240 --> 05:52.660
list page so that we actually add this item to desiré before we then add some logic to display it on

05:52.680 --> 05:53.640
this page to
