WEBVTT

00:01.990 --> 00:04.080
So let's publish our app to the extras.

00:04.090 --> 00:06.530
I'm going to walk you through all those steps.

00:06.730 --> 00:11.020
But I also want to guide you where you can find out more information if you are stuck.

00:11.080 --> 00:13.600
Let's start in the ionic documentation.

00:13.600 --> 00:17.010
For now you have to switch to the version 1 framework DLX.

00:17.020 --> 00:21.540
And while this refers to you on one the publishing process works the same.

00:21.640 --> 00:26.830
Here you can click on guide and then on publishing your app and you can simply follow through those

00:26.830 --> 00:28.450
steps to publish your app.

00:28.590 --> 00:34.380
Though this will be a fully command line driven publish process or at least very much command Landrum.

00:34.480 --> 00:39.880
I'm going to show you a process where we will use the Android studio or X code which makes some things

00:39.910 --> 00:41.190
easier.

00:41.260 --> 00:47.530
Also some of those steps are required any more like the first step to run this command I will show you

00:47.530 --> 00:48.460
an alternative.

00:48.580 --> 00:55.270
But the parts for Android publishing and Iowas publishing here are still valid and you can go through

00:55.270 --> 00:57.660
them to publish your app successfully.

00:57.670 --> 01:03.180
There are a couple of steps involved in publishing your app you first of course need to build your project.

01:03.190 --> 01:09.550
This is done for the Iyonix Seelye but thereafter you also need to sign it now for running it on our

01:09.550 --> 01:10.480
local devices.

01:10.480 --> 01:15.490
We already had to sign it for iOS by assigning this profile and X code.

01:15.640 --> 01:20.260
And for Android It was also signed but there does happen automatically which is why we didn't have to

01:20.260 --> 01:22.450
go into Android studio to do so.

01:22.630 --> 01:26.890
Signing is required to basically make sure that your app is OK.

01:26.890 --> 01:31.690
You could say that it is trusted and for publishing that signing process looks a bit different.

01:31.870 --> 01:38.350
All for publishing apps you will have to create a publisher account on the Google Play developer console

01:38.560 --> 01:45.220
and the developer rockhound on the Apple developer program and both accounts cost money for Android.

01:45.220 --> 01:50.260
That's $25 one time for Apple that's $99 per year.

01:50.290 --> 01:53.190
I will come back to creating those accounts later.

01:53.320 --> 01:56.050
Let's now start by building our app for this.

01:56.050 --> 02:01.300
I'm back at the project and the first thing I will do here is I will add all the platforms I want to

02:01.300 --> 02:08.560
build my app for I already have iOS I will now also add Android by running ionic platform at Android

02:08.570 --> 02:14.200
you saw this in the running on a real device text on the course and this will now simply settler's app

02:14.230 --> 02:17.400
apps such that it will work on Android too.

02:17.500 --> 02:23.320
And with this fetish we can have a look at de-conflict SML file and you'll see that we don't have icons

02:23.320 --> 02:26.230
and splash screens for Android set up there.

02:26.230 --> 02:31.490
We also see that in the resources folder we still have to default icons and splash screens.

02:31.540 --> 02:37.090
So we'll have to run ionic resources again which will show in the last lecture or generate all those

02:37.090 --> 02:38.200
resources we need.

02:38.200 --> 02:43.790
Now all for Android since we added this as a platform and once we did this and made sure that de-conflict

02:43.960 --> 02:50.920
XOM file looks the way it should look like and we have the right name Werben and so on we can run ionic

02:51.070 --> 02:58.470
build release and then we simply add the platform where we want to build for example Android.

02:58.540 --> 03:04.170
Now the blue proses with this release flag will get generally do the same as the normal build process

03:04.210 --> 03:10.660
but also strip out some debugging functionality and optimize our apps so do some optimizations really

03:10.660 --> 03:12.800
prepared as ABW for deployment.

03:13.090 --> 03:20.170
So this will now run through and once this has finished successfully all do the same for iOS.

03:20.200 --> 03:25.550
So run I only Iqbal's release iOS and again this will strip out some plug ins you don't need some Reise

03:25.680 --> 03:31.600
some debugging resources and capabilities and so on and I'll be back once it is finished to Sodhi I

03:31.600 --> 03:36.580
whispered Prose's finished you in the next lectures we're going to have a look at how we can now ship

03:36.640 --> 03:40.670
our app to the Google Play store and the iOS App Store
