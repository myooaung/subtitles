WEBVTT

00:02.280 --> 00:04.730
It's time for a second page.

00:04.740 --> 00:11.160
We do have our list of recipes here and that is of course neat but when we tap a recipe, I'd like to

00:11.160 --> 00:16.220
display a details page where we can see the image a bit bigger

00:16.290 --> 00:20.730
and also view the list of ingredients for example.

00:20.880 --> 00:23.930
Now for that, I will again run Ionic generate

00:24.060 --> 00:30.090
and you could now hit enter and select page from the dropdown or you simply type Ionic generate page

00:30.360 --> 00:33.150
and then, I'll create this in the recipes folder,

00:33.150 --> 00:39.450
so I'll start with recipes/ because you can define a path to the component here and then I'll name

00:39.450 --> 00:39.870
it

00:39.870 --> 00:43.890
recipe-detail, so recipe detail is the newly created component

00:43.980 --> 00:46.420
and it is created in the recipes folder.

00:46.650 --> 00:55.110
So let's wait for this to finish and it's done. It again gave us a new component folder with a recipe

00:55.110 --> 01:02.280
detailed page component whic does have its own module for lazy loading and in the app routing module

01:02.280 --> 01:10.310
here, we now also have a new path which points at recipe detail and then loads this lazily.

01:10.400 --> 01:15.270
Now of course, you don't have to keep that default setup though and I want to have a different one,

01:15.320 --> 01:22.550
I want to have a path recipes which loads my recipes page module but then I want to have a path, recipes/

01:22.610 --> 01:31.250
some recipeId that loads the recipe detail page. Now to make this work, what we can do is on

01:31.250 --> 01:40.010
that recipes route here, we can add children which is an array of route definitions and then the first

01:40.010 --> 01:42.690
child has a path of empty,

01:42.700 --> 01:51.500
so just recipes here and this should now load the recipes page module and then I'll add a second child

01:51.500 --> 01:55.550
here with a path of :recipeId

01:55.790 --> 02:01.570
and this defines a dynamic segment in Angular, which means this can actually be anything in the URL,

02:01.600 --> 02:09.170
so recipes/abc would reach this recipes/123 would too but then we will be

02:09.170 --> 02:14.360
able to read that value on the component that is loaded for this page.

02:14.360 --> 02:22.280
So here, I want to load my children, I want to load this route, so let's add load children here and let's

02:22.280 --> 02:28.450
get rid of this recipe detailed path down there. So now this is the new routing setup I want to have,

02:29.170 --> 02:36.590
if we save it like this, it should recompile and it should reload and still show us the recipes and if I

02:36.590 --> 02:42.720
now add /abc after recipes, then it actually loads the recipe detail page here.

02:42.770 --> 02:47.210
Now obviously we don't see anything on that page because we haven't added any logic but this is how

02:47.210 --> 02:50.070
the routing will generally work now.

02:50.120 --> 02:51.530
Now that is a good first step,

02:51.530 --> 02:57.470
now let's make sure that on the recipe detail page, we actually do display the details about the recipe

02:57.860 --> 03:03.350
and for that, I need a global state management solution where I do store the recipes because right now,

03:03.350 --> 03:10.760
the recipes are stored in the recipes page component here and that is nice for this page but if I need

03:10.760 --> 03:14.790
that data in another page, I have no easy way of getting access to it.

03:14.870 --> 03:20.360
Yes you could somehow import the recipes page component but that is not how you do that in Angular

03:20.540 --> 03:26.130
and it would actually lead to strange side effects and not be a good solution,

03:26.150 --> 03:29.270
instead we want to use an Angular service for that.
