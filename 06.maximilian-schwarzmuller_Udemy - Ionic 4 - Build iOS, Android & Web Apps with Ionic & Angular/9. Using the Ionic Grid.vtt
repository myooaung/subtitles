WEBVTT

00:02.350 --> 00:07.750
As always, you can have a look at the official docs to learn more about the ion-grid and actually there,

00:07.810 --> 00:12.250
you are linked to a complete article about the grid layout where you can learn all the details about

00:12.250 --> 00:15.090
it but there is no need to do that right now,

00:15.100 --> 00:21.370
I'll dive deeply into the grid in a separate section later in the course because it's such a complex,

00:21.460 --> 00:28.690
not difficult but feature-rich component and component that can be very useful when you're planning

00:28.690 --> 00:35.350
to build an app that should run on both mobile devices and on desktop machines as well. We can use the

00:35.350 --> 00:41.160
grid here to shrink the size of this card on bigger screen sizes. For that

00:41.170 --> 00:47.050
let's go back to the source code and in ion-content, around the content where I want to control the

00:47.050 --> 00:51.970
size, you can add the ion-grid component.

00:52.120 --> 00:57.640
However you don't just stick your content that should resize in there because how would Ionic know

00:57.640 --> 00:59.570
how to resize it.

00:59.730 --> 01:07.330
Instead a grid consists of rows, so-called ion-row elements here and each row has one or multiple ion

01:07.330 --> 01:11.420
columns, so rows and columns make up a grid

01:11.470 --> 01:17.680
and now for a column, you can define the size of this column which of course helps you define the size

01:17.680 --> 01:22.830
of the content because it's the ion-column that holds the content you want to render.

01:22.840 --> 01:29.500
So this ion-card, I'll cut it and move it into this ion-column here and now on this ion-column, we

01:29.500 --> 01:35.140
can use default properties and attributes we can set on this element which you'll find in the official

01:35.140 --> 01:36.100
docs,

01:36.100 --> 01:38.700
for example we can set a size attribute,

01:38.980 --> 01:41.530
we can set this to let's say 6.

01:41.530 --> 01:46.910
Now by default, a column is able to have a size of 1 - 12,

01:46.930 --> 01:53.650
you could overwrite this but the default is 1 - 12 which means it either takes one-twelfth of the entire

01:53.650 --> 01:59.500
width or the total width and six therefore takes half the available width.

01:59.500 --> 02:07.510
If I now save this and I go back to my app and reload, we see that shrank, it's now smaller, it's only

02:07.510 --> 02:13.920
half as wide as the screen but of course on a smaller device, this looks super ugly now,

02:13.990 --> 02:21.400
so how can we get the best of both worlds? Have a full width look on the smaller device and take half

02:21.400 --> 02:24.370
the width on a bigger screen?

02:24.430 --> 02:32.290
Well for that, we can actually use specialized forms of these attributes. Instead of setting size equals

02:32.290 --> 02:33.130
six,

02:33.160 --> 02:42.490
we can set size-md equal to six. Now supported is xs, that stands for extra small, sm for small,

02:42.760 --> 02:49.570
md for medium and lg for large and this allows you to set the size for different screen sizes.

02:49.570 --> 02:55.390
Now the breakpoints for the sizes can be found in the official docs and you can also overwrite them

02:55.420 --> 02:58.020
and md should be looking quite good here.

02:58.120 --> 03:04.890
So if we now save this and I reload this on the mobile view, you see we have the full width design back,

03:05.520 --> 03:09.140
on bigger screens though, it only takes half the width.

03:09.140 --> 03:14.310
Now of course, it would be nice to have this centered and turns out you can do it as pretty easy as well.

03:14.310 --> 03:21.010
You can add an offset property and set this to three because we have twelve columns available,

03:21.030 --> 03:22.510
this has a width of 6,

03:22.590 --> 03:26.550
so we want to have three columns on the left and three columns on the right

03:26.550 --> 03:30.660
and this offsets it by three columns to the left

03:30.660 --> 03:37.480
and of course I don't want to offset it on all screen sizes but only on medium screen sizes and higher,

03:37.500 --> 03:44.670
that's important when you add size medium or offset medium or any other breakpoint like size-sm, offset-sm,

03:44.730 --> 03:48.070
then this counts for this screen size,

03:48.090 --> 03:54.060
so for medium sized screens and bigger screens, so it's always like a minimum condition you could say.

03:54.990 --> 04:02.030
So now with this configuration, size-md equals six and offset-md equal three, if we reload this, it's now

04:02.050 --> 04:08.940
nicely centred on bigger screens and on smaller screens, we still have the full available width and that

04:08.940 --> 04:11.000
is exactly the look I want here.

04:11.250 --> 04:17.910
Now again, the grid has a lot of configuration possibilities and therefore, we'll have an entire module

04:17.970 --> 04:24.390
where we spend a lot of time on the grid and I will not dive super deep into it right now.

04:24.390 --> 04:31.710
I just want you at this point to understand that we have different categories of components and that

04:31.710 --> 04:38.130
you will have different tools for whether you want to output some content, listen to input or you

04:38.130 --> 04:45.810
want to change the structure or size or order of your elements on the screen and the grid as well as

04:45.810 --> 04:49.470
a couple of other layout components can be really helpful with that.
