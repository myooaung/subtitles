WEBVTT

00:00.420 --> 00:07.200
In the last lecture we already used Engy model and those not only needed to use two way data mining

00:07.350 --> 00:15.270
energy model also is a directive and directive basically is a command or an instruction you place in

00:15.270 --> 00:22.220
your template in your HVM code so to say which engorge you will recognize when compiling your template

00:22.570 --> 00:26.080
and which will lead angler to do certain things.

00:26.100 --> 00:34.170
For example here in this case to use two way bindings since we enclosed it in square brackets and parentheses

00:34.650 --> 00:37.220
there are also our directives.

00:37.500 --> 00:39.510
Let's go to the users component.

00:39.810 --> 00:46.760
Let's say we want to show some extra info here but only after a button was clicked.

00:46.800 --> 00:57.220
So we can at the Spartan show info and I'll add a click listener which should somehow allow us to show

00:57.280 --> 01:02.900
extra info or add here some extra user information.

01:03.310 --> 01:07.050
In this paragraph no this should not be shown at all time.

01:07.090 --> 01:14.530
We can't control this with a directive which such instruction the directive we need is called Engy ith

01:14.860 --> 01:18.790
an asked name kind of implies it controlled.

01:18.820 --> 01:25.360
If this paragraph should be shown or not recognized to start at the beginning this signals that this

01:25.360 --> 01:32.320
is a structural directive and a structural directive simply is a command directive which changes the

01:32.320 --> 01:37.630
structure of your dorm and it does because it decides if this paragraph exists or not.

01:37.630 --> 01:42.420
Clearly having an impact on your dom structure now to control this.

01:42.460 --> 01:49.320
I'll set up a property in the typescript class and I'll name it to show info and set this to false initially.

01:49.320 --> 01:55.600
Now I can bind this to show info to this property and NGF expect to get back.

01:55.600 --> 02:02.610
True or false as a result of code you execute between the quotation marks so show info clearly gives

02:02.610 --> 02:03.530
it back for.

02:03.550 --> 02:04.830
In this case.

02:04.900 --> 02:09.850
Now once you click on the button I want to set show info equal to true.

02:10.150 --> 02:12.990
So you showed as additional info.

02:13.270 --> 02:20.590
If we now save this and I click on the show info you'll see some extra user information because now

02:20.620 --> 02:26.470
the property change to true and if added this paragraph and I mean added.

02:26.560 --> 02:36.750
If we really load the page and inspect it here you will see that if you go to that part in your application.

02:36.940 --> 02:43.780
So in the app users component the load button you only see that comment which seems to be important

02:43.790 --> 02:48.100
for you to know where to insert content but you don't see the paragraph.

02:48.100 --> 02:53.990
It's not hidden it's not transparent it's just not there only for click show info.

02:54.130 --> 02:56.070
You'll see that it was added.

02:56.110 --> 02:58.610
This again is why it's called structural directive.

02:58.630 --> 03:01.060
It really changes the structure of your dorm.

03:01.060 --> 03:03.010
It added a new element to it.

03:04.080 --> 03:06.340
Now there are other directives too.

03:06.360 --> 03:12.710
For example you also have Angi for to loop through a loop of elements.

03:12.870 --> 03:22.740
So if we had a couple of users here and we would have simple an array of strings let's say like this

03:23.270 --> 03:26.120
we might want to output all those names.

03:26.340 --> 03:34.780
We can do this with energy for and there decode would be the code you know from a normal ESX for loop.

03:35.110 --> 03:39.070
Well that user this name is totally up to you.

03:41.060 --> 03:46.170
Off users and users of course refers to the users property.

03:46.400 --> 03:52.450
This will loop through all the users and bind the individual user to the user variable here.

03:52.640 --> 04:00.890
And then we can use it user like this and this will now output to the user and it will replicate the

04:00.890 --> 04:04.950
paragraph as often as needed three times in this case.

04:04.970 --> 04:11.690
Therefore deciles is a structural directive indicated by the star because it creates new paragraphs

04:11.780 --> 04:12.980
as needed.

04:13.430 --> 04:19.730
Now as you can see here Max and and Chris and if we were to add a new element to this list dynamically

04:19.790 --> 04:23.200
at runtime this would all be output here.

04:23.660 --> 04:26.950
So these are two very important structural directives.

04:26.960 --> 04:29.870
There also are attributes directives.

04:30.110 --> 04:36.890
So for example if we have a paragraph where we say this is Green Well we could simply achieve this by

04:36.890 --> 04:41.590
adding style equals and then background color green of course.

04:41.600 --> 04:47.030
Now let's say we want to set the style dynamically though we could still do it with string interpellation

04:47.030 --> 04:47.720
somehow.

04:47.810 --> 04:55.010
But there also is a useful directive Engy style you probably already recognize the pattern if the name

04:55.010 --> 04:59.940
starts with Engy it ships with angular now Engy style.

04:59.960 --> 05:02.020
Need some information to work correctly.

05:02.030 --> 05:10.460
So we need to pass in some data and we do pass some data by using property binding like this with the

05:10.460 --> 05:12.370
square brackets.

05:12.470 --> 05:16.530
I then need to pass in a javascript object here.

05:16.760 --> 05:19.140
And here you simply configure your styles.

05:19.190 --> 05:25.190
So for example background color enclosed in single quotation marks to make it a valid javascript property

05:25.190 --> 05:28.310
name could be green.

05:28.340 --> 05:33.450
Now again this could have been achieved with just style equals background color green.

05:33.560 --> 05:41.180
But imagine this is not referring to a normal text here but instead we would have to color which is

05:41.180 --> 05:43.760
green and which we may change at runtime.

05:43.760 --> 05:45.900
We don't do it here but we could do that.

05:46.160 --> 05:51.530
Well then you can simply bind two color in here and set up your styles very dynamic therefore.

05:51.770 --> 05:56.980
Now this is called attribute directive because it simply changes the element.

05:56.980 --> 05:57.860
It sits on.

05:57.890 --> 06:01.580
It's not adding or removing elements to or from the dawn.

06:01.640 --> 06:04.690
It simply changes the element it's placed on.

06:04.880 --> 06:10.730
So if that you see this is a green background color and this is due to ngi style and there are other

06:10.730 --> 06:12.290
built in directives too.

06:12.320 --> 06:13.900
These are just some examples.

06:13.970 --> 06:18.290
And if you want to learn more about that you really should have a look at a dedicated Angler or two

06:18.290 --> 06:18.890
course
