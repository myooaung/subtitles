WEBVTT

00:02.220 --> 00:08.370
To add such a guard, we can run ionic generate again and there in the dropdown,

00:08.370 --> 00:09.930
we also have a guard.

00:10.650 --> 00:18.560
So let's select guard here and now the path will be in the auth folder and then I will name it auth guard.

00:18.600 --> 00:23.310
Now there is a lot of auth in here but the name just makes sense because we're checking the authentication

00:23.310 --> 00:24.300
status

00:24.300 --> 00:29.960
but this now gave me that new auth.guard.ts file here and the testing file which I'll get rid of.

00:30.720 --> 00:32.750
So the auth.guard.ts file here

00:32.750 --> 00:35.040
implements can activate as a default.

00:35.040 --> 00:39.950
Now in case you don't know how guards work in Angular, guards are in the end also just services,

00:39.960 --> 00:47.940
which is why this is also provided in root but guards can then be added to routes, we can attach them

00:47.940 --> 00:55.620
to a route and then depending on how we attach it, a method defined in that guard like canActivate is

00:55.620 --> 00:57.910
executed and only if it returns true,

00:58.050 --> 01:02.410
the navigation is allowed and the user may go where he wanted to go.

01:02.430 --> 01:08.870
Now I want to add that auth guard in my app routing module to places and bookings, to these two routes.

01:09.150 --> 01:15.570
Since we lazy load our content here, canActivate is actually the wrong guard because that would mean

01:15.570 --> 01:21.960
that the code for the lazy loaded module gets downloaded before the guard actually executes and that means

01:21.960 --> 01:26.630
if we prevents the navigation, we downloaded the code for nothing.

01:26.730 --> 01:33.690
So instead we should use canLoad which actually is a guard that runs before lazy loaded code is fetched.

01:33.690 --> 01:40.020
Now we don't need to implement canActivate here but the canLoad method and you can press command

01:40.080 --> 01:46.800
or on Windows control and click on canLoad to go to the definition of that and there you see how that

01:46.800 --> 01:53.020
canLoad method should look like. So you can just copy that from there and move that into your auth guard

01:53.030 --> 01:56.240
and now you just need to import all the things it requires here,

01:56.250 --> 02:00.780
the light bulb here helps you with that, if you click on what's missing and then on the light bulb, you

02:00.780 --> 02:07.260
can simply add all these imports and at the end, you must not have a semicolon but opening and closing

02:07.260 --> 02:12.180
curly braces because this is a method definition here.

02:12.220 --> 02:18.520
Now you can get rid of all the imports which are not required and now in here, we're getting an error

02:18.640 --> 02:24.550
because in the guard, we need to return a boolean, true or false or a promise that eventually resolves

02:24.550 --> 02:28.620
to a boolean or an observable that eventually yields a boolean.

02:28.690 --> 02:31.240
We'll use an observable later in the course,

02:31.240 --> 02:33.750
for now I will just return true or false

02:33.850 --> 02:36.400
but of course I don't want to hardcode it like this.

02:36.400 --> 02:41.400
Instead I want to return true or false depending on whether the user is authenticated or not

02:41.550 --> 02:46.780
and we have that information in the auth service, here with user is authenticated.

02:46.780 --> 02:53.320
Now thankfully, we can inject services into services, so by adding a constructor to the auth guard, we can

02:53.320 --> 02:58.600
inject the auth service into the auth guard. So auth service like this,

02:58.600 --> 03:00.700
make sure to add the import here at the top

03:01.760 --> 03:09.860
and then here you can return the result of this auth service user is authenticated because this will

03:09.860 --> 03:11.270
be a boolean.

03:11.570 --> 03:17.930
Of course if the user is not authenticated, I want to not just block the navigation, I want to provide

03:17.930 --> 03:23.630
an alternative instead and for this, we can manually redirect the user.

03:23.630 --> 03:32.640
So here we can inject our router and I will check if this auth service user is authenticated.

03:32.800 --> 03:36.790
If this is not true, hence the exclamation mark here,

03:36.820 --> 03:44.530
if this is not true, then I want to use my router and navigate to /auth, to the auth page where the

03:44.530 --> 03:50.060
user can login and that should be navigate by URL therefore.

03:50.110 --> 03:57.160
So now we can go to /auth if the user is not authenticated and this code will then still execute

03:57.160 --> 03:58.480
and it will return false

03:58.480 --> 04:03.830
to prevent the original navigation we wanted to do, otherwise if the user is authenticated,

04:03.850 --> 04:05.160
this code will never run

04:05.230 --> 04:06.780
and here this will return true,

04:06.820 --> 04:08.610
so we may continue.

04:08.800 --> 04:16.300
Now we just need to attach the guard and I want to attach the guard to my app component, to my app routing

04:16.300 --> 04:22.240
module, to the places and bookings routes. You attach a guard by adding the name of the guard,

04:22.270 --> 04:27.790
something like canActivate or in this case, canLoad here and then this takes an array because you can

04:27.790 --> 04:31.540
add multiple guard services for one and the same type of card.

04:31.570 --> 04:34.930
Here I only have one though and this will be my auth guard.

04:34.930 --> 04:41.440
You need to import auth guard from your auth folder and there the auth guard file and then,

04:41.440 --> 04:45.010
well this is all you need to add and the same of course for bookings.

04:45.010 --> 04:45.520
So here

04:45.520 --> 04:51.200
I'll also add canLoad and add my auth guard here as a canLoad guard.

04:51.200 --> 04:57.620
Now these routes are protected and that also is then true for all their child routes.

04:57.730 --> 05:04.300
So if the page now reloads and user is authenticated is set to false by default, we indeed end up here

05:04.480 --> 05:06.480
on the login page.

05:06.580 --> 05:11.800
Now logging in doesn't help because if you click this, it will be set to true but as you reload your

05:11.800 --> 05:16.510
page, this state will be lost so it's back to false again.

05:16.510 --> 05:22.150
Of course when logging in, I want to navigate though, I want to go to another page and therefore here 

05:22.180 --> 05:28.080
on the auth page, in on login, I want to navigate, so I'll inject my router here

05:29.090 --> 05:36.900
from @angular/router, this import needs to be added at the top of your page and then in on login,

05:37.680 --> 05:46.290
there I will call this router navigate and I want to go to, I can navigate by URL actually, I want

05:46.290 --> 05:57.010
to go to /places tabs discover let's say. Now the route guard will of course still protect this

05:57.010 --> 06:02.530
root but now that we do login, we are actually authenticated, so we'll be able to make it through

06:02.530 --> 06:04.750
the guard. So if I hit login there,

06:04.750 --> 06:10.450
here we are and I can now use this app as before but if I reload, we lose that state, we're back to false

06:10.450 --> 06:13.360
and therefore we're back to the authenticate page.

06:13.570 --> 06:20.070
Now one thing I of course want to add is the logout button. We do have it here in the app.component.html

06:20.080 --> 06:24.430
file, we trigger on logout when we click it and in on logout,

06:24.430 --> 06:27.580
I now want to use the logout method from the auth service.

06:27.580 --> 06:32.140
So let's inject the auth service here in the app component

06:32.430 --> 06:39.580
and for that, you need to add the import to auth service, to that auth service file and then add on logout,

06:39.590 --> 06:45.080
we can call this auth service logout

06:45.410 --> 06:51.440
and now with that if this reloads and I do login, I can logout but we're not redirected.

06:51.440 --> 06:52.960
Well we can see that we succeeded

06:52.970 --> 06:58.460
if we now try to go to your bookings because this tries to load a page that is protected by a guard

06:58.490 --> 07:04.640
and since I logged out and user is authenticated therefore was reset to false, we fail

07:04.790 --> 07:08.780
but obviously I want to redirect right when I click logout here.

07:08.780 --> 07:14.990
Now for that, we just have to inject the router again into the app component here, so private router like

07:14.990 --> 07:16.010
this,

07:16.010 --> 07:19.280
of course imported from @angular/router

07:19.280 --> 07:28.610
and then when on logout is triggered, I will call this router, navigate by URL auth and this means

07:28.610 --> 07:29.460
that

07:29.510 --> 07:32.030
now with that, this page will reload,

07:32.030 --> 07:37.820
I'm logged out by default, if I login and I now press logout, I'm redirected and I can login again

07:37.820 --> 07:38.930
of course.

07:38.930 --> 07:44.060
So this is how we can add auth guard and how we can use that default Angular feature in an Ionic Angular

07:44.060 --> 07:44.750
app as well.
