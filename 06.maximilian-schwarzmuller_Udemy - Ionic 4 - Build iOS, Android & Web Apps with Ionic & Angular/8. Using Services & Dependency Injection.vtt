WEBVTT

00:00.680 --> 00:06.980
Speaking about important features there's one more very important feature We'll definitely need and

00:06.980 --> 00:10.160
that is services and dependency injection.

00:10.370 --> 00:15.790
Let's say we have more components holding and using our users data.

00:15.950 --> 00:20.580
Now for example the app component could also output some data about users.

00:20.600 --> 00:28.220
So here besides having our app users component we could have a separate section where we have also a

00:28.220 --> 00:31.970
list of our user select user of users.

00:32.030 --> 00:38.930
Remember users is now a property of our or if just for users of this registry users is a property of

00:38.930 --> 00:39.950
Arap component.

00:40.010 --> 00:44.200
So we can loop through the registered users and then we can simply output it here.

00:44.210 --> 00:48.280
So we're doing the same as in the users component here.

00:48.290 --> 00:51.940
Now we're passing we're just road users to the uterus component.

00:52.040 --> 00:53.760
So everyone is able to use that.

00:53.780 --> 00:59.630
But if we have more and more components using that passing it around and storing it and Yapp component

00:59.630 --> 01:07.910
might not be optimal for cases like these where we have some shared code or in general some methods

01:07.970 --> 01:10.390
or data we want to centralize.

01:10.400 --> 01:12.860
We typically use a service.

01:12.860 --> 01:18.890
So I will create a new file in the app folder or your own name at the user's dot service Dot.

01:18.950 --> 01:19.930
Yes.

01:19.940 --> 01:26.170
And the service is simply a typed up class so users service would be the name.

01:26.420 --> 01:28.510
And this already is a service.

01:28.550 --> 01:36.410
Now a year we could have our users aere the one we currently have in our app component.

01:36.410 --> 01:45.890
So let me CADORET and Android here all he would name registered users and then we could have a method

01:46.370 --> 01:50.440
get users where we simply return this registered users.

01:50.450 --> 01:53.960
We could also directly access the census as a public property.

01:53.960 --> 02:00.300
We can mark it as private though and we could also have the ad user said users and so on.

02:00.350 --> 02:03.380
But I'll keep it simple and simply get my users.

02:03.400 --> 02:09.950
Now I want to use it as user service in other components because I clearly need my users here in the

02:09.950 --> 02:12.550
app component and then the user component.

02:13.040 --> 02:19.220
I don't want to use the input any more which is why I commented out because I'm not passing it anymore

02:19.280 --> 02:22.610
because the app component doesn't have the users anymore.

02:22.640 --> 02:25.920
So we can also remove this code here.

02:26.060 --> 02:30.840
All duplicated and comment in the old form so that we can still see this.

02:30.890 --> 02:34.020
But then in the current form I will remove it.

02:34.040 --> 02:36.360
So we want to use that service instead.

02:36.620 --> 02:45.200
And to use that service we kind of need to access this newly created service class and we could do this

02:45.560 --> 02:49.550
in the constructor of our app component for example.

02:49.580 --> 02:55.360
Constructor is the default typescript for javascript constructor which is available.

02:55.370 --> 02:57.860
It's not an angle or a feature.

02:57.860 --> 03:08.770
So here we could say we add a new users property which is of type any an array of anything.

03:09.160 --> 03:16.420
And we say this users equals and then we somehow need access to our users service let's create this

03:16.420 --> 03:24.460
a user's service could be new users service and we could import isn't instantiated and then execute

03:24.460 --> 03:25.380
get users.

03:25.450 --> 03:28.080
And this is not how you would do it.

03:28.120 --> 03:30.380
So remove that killed.

03:30.550 --> 03:37.600
I will keep that user's array and I will adjust the loop to loop through users instead of registered

03:37.600 --> 03:38.360
users.

03:38.680 --> 03:46.630
But you don't instantiate services on your own you let Engler do this and Engler does this for you with

03:46.630 --> 03:49.530
a concept called dependency injection.

03:49.810 --> 03:56.480
This means that in the constructor you can define which dependencies your component has for example

03:56.590 --> 03:58.840
it needs to use real service.

03:58.840 --> 04:06.250
Now I want to bind this to a property named user's service and is just a type of shortcut by placing

04:06.250 --> 04:08.260
a private or public in front of it.

04:08.260 --> 04:13.560
This will also automatically true Yate a user's service property in this class.

04:13.600 --> 04:19.180
So I could do this explicitly or let typescript do this so without private or public it wouldn't do

04:19.180 --> 04:19.310
it.

04:19.330 --> 04:22.280
But with it will also give me that property.

04:22.840 --> 04:28.930
And then this will be of type use or service use or service there for all that needs to be imported

04:28.930 --> 04:30.520
here at the top.

04:30.520 --> 04:35.010
Now this is important for this type assignment here in the constructor.

04:35.200 --> 04:45.640
We're telling angler to hey please give me an instance of this user's service class and therefore English

04:45.700 --> 04:47.870
you will instantiated for us.

04:47.980 --> 04:51.500
And this has the advantage to English to all managers.

04:51.560 --> 04:55.710
D all the instances that might treat out our application.

04:55.900 --> 05:02.480
Now this allows us to now if we're in the constructor or in any place of our component to access this

05:02.480 --> 05:08.470
user service again which is registered as a property in this class because of this private shortcut

05:08.500 --> 05:14.370
here the shortcut we're using by placing private or public in front of it and then they can access get

05:14.380 --> 05:17.990
users and set as equal to users.

05:18.250 --> 05:22.300
So now this users is equal to whatever I get from my service.

05:22.300 --> 05:24.500
However that won't work.

05:24.940 --> 05:31.480
As with component's anger too is not scanning your whole project for any services or classes in general.

05:31.480 --> 05:32.290
You might have.

05:32.300 --> 05:34.030
You might want to inject.

05:34.450 --> 05:41.860
Instead it will need to be informed and you do it in format by adding a new property to your component

05:41.860 --> 05:45.220
decorator which is called providers.

05:45.220 --> 05:55.060
This takes lot to you or Engler which services which classes do I want to inject here and I want to

05:55.060 --> 05:56.920
inject the user service.

05:56.980 --> 06:04.030
So simply an array of types you want injected is bound to providers and your users services the only

06:04.030 --> 06:12.120
type this will work as you can see if I now save this UCD list here.

06:12.170 --> 06:15.430
You don't see it in the users component because it is broken right now.

06:15.460 --> 06:25.070
We're not getting users there but the disadvantage possibly is that now anger you will create an instance

06:25.160 --> 06:33.980
for it is app component and if we copy the same code to the user's component so copy the constructor

06:34.790 --> 06:41.680
make sure to add the import and to also add the user's property here.

06:42.600 --> 06:51.510
And also add the providers if we add all that to the users component you will see that this should work

06:51.510 --> 06:52.330
fine.

06:52.350 --> 06:54.540
You'll see the list of names here too.

06:54.870 --> 07:02.430
But they actually angle are created two instances of this service of this class one for each component

07:02.490 --> 07:04.170
where we set up providers.

07:04.470 --> 07:07.520
And this is just how dependency injection angler works.

07:07.530 --> 07:14.370
It has a hierarchical injector which means for every component where you specify providers it will create

07:14.370 --> 07:17.480
a new instance of the class as you define here.

07:17.490 --> 07:20.650
Once you're injecting them in the constructor.

07:21.130 --> 07:28.290
Some components of this component would use the same instance if they don't set up providers on their

07:28.290 --> 07:29.020
own.

07:29.340 --> 07:35.310
If you want to make sure that your whole application uses one in the same instance of this class and

07:35.310 --> 07:41.610
this can become important if you also manipulate the data in this class and want to share does this

07:41.610 --> 07:48.270
manipulate the data cross components you have to remove providers in the components you don't add them

07:48.300 --> 07:50.420
on the component level.

07:50.790 --> 07:56.520
We want to add them on the application level and we do it as an app module.

07:56.640 --> 07:59.080
Here we also get a provider's array.

07:59.280 --> 08:06.480
And here we can also add everything we want England to be able to inject for us the user service for

08:06.480 --> 08:07.230
example.

08:07.230 --> 08:16.360
Make sure to also add the import of that type with this if we saved this you should see that the application

08:16.360 --> 08:17.950
still works fine.

08:18.100 --> 08:25.420
But now we're using one at the same instance of the users service class for our whole application because

08:25.420 --> 08:26.630
it's set up here.

08:26.860 --> 08:33.280
So sometimes you might need different instances then definitely provided on component level.

08:33.310 --> 08:39.070
In other cases if you want to make sure that you're using one in the same instance make sure to add

08:39.070 --> 08:41.200
it here in the app module
