WEBVTT

00:02.290 --> 00:03.300
To log users in.

00:03.310 --> 00:05.560
We got a number and point.

00:05.560 --> 00:10.140
We have to send the request to this and point here which you can find in the official box.

00:10.300 --> 00:11.780
So let's copy that.

00:11.800 --> 00:13.520
Let's go to be of service.

00:13.570 --> 00:17.560
Now I did already add a log in method but right now we're not doing too much here.

00:17.560 --> 00:20.310
We're just setting this user is authenticated here.

00:20.410 --> 00:25.100
I'll get rid of it for analysis will as soon changed as anyways.

00:25.330 --> 00:31.800
So in here I of course still want to send the age if you request and that still is a POST request.

00:31.810 --> 00:37.930
As you can see in the official box and I want to send that request to the U or L I just copied where

00:37.930 --> 00:44.920
I also need to inject my api key again hence I'll use back tricks here so that I can replace this API

00:44.920 --> 00:46.880
key in a very easy way.

00:46.900 --> 00:50.060
So you're all now add why inject that part.

00:50.110 --> 00:55.350
I'll reach out to the environment object and gets that far based API key.

00:55.400 --> 01:01.150
Now the data we have to pass here is exactly the same data we passed for signing up its email password

01:01.150 --> 01:03.100
and return secure token.

01:03.100 --> 01:10.270
So let's prepare this object now as a second argument where I forwards that email and for that of course

01:10.270 --> 01:15.490
I expect to get an email here and I get a password here in the log in method.

01:15.490 --> 01:17.960
So let's make sure we get these two arguments.

01:18.100 --> 01:26.480
And then here I forward the email and I forward the password like this of course I want to return this

01:26.540 --> 01:30.890
so that we can interact with that observable and wait for it to complete.

01:30.890 --> 01:34.380
And that takes us back to the off page then here.

01:34.460 --> 01:39.160
I do call log in and of course dad is now not the place where I want to call it anymore.

01:39.250 --> 01:45.170
I want to call it here but only if we are logging in now if theoretically we could add a check or we

01:45.170 --> 01:49.920
will actually add if check with is log in and check what our current modus.

01:50.030 --> 01:52.080
And then we send different requests.

01:52.190 --> 01:56.780
Now I don't really want to copy and repeat that entire part here.

01:56.780 --> 01:58.600
We can reuse a lot of that.

01:58.640 --> 02:04.070
Instead I only want to basically swap the observable to which we subscribe because the things we then

02:04.070 --> 02:11.270
do with the result are the same in a success case we lock the user in and then we continue in an Arab

02:11.270 --> 02:19.070
case we show an error message and therefore I will add a new variable here off ops for all of observable

02:19.370 --> 02:26.810
which will be of type observable which you need to import from our X J.S. and the typed declaration

02:26.810 --> 02:33.740
here is optional but it improves our code quality observable is a generic type that holds information

02:33.740 --> 02:36.470
about which data it will eventually yield.

02:36.590 --> 02:43.510
And here in our case that would be that of response data we get back here.

02:43.610 --> 02:50.000
So we actually can export this interface to find an off service so that we can import it in this file

02:50.240 --> 02:58.050
and use that of response data here which you then need to add to your imports from the off service file.

02:58.070 --> 03:03.560
So now this is the observable and this will now even hold the observable created for a signing up or

03:03.560 --> 03:04.370
for logging in.

03:04.850 --> 03:13.520
So if we have this is log in then off ops will be equal to this of service logging where I forward email

03:13.610 --> 03:15.340
and password.

03:15.560 --> 03:25.010
Now important to avoid errors here with typescript in a log in case I also now need to use d generic

03:25.010 --> 03:26.540
post method here.

03:26.540 --> 03:31.190
So did I define which type of data I get back here which will be off response data.

03:31.250 --> 03:38.060
So did in the off page it knows that it is ok to store the result of log in here and off OBS which expects

03:38.060 --> 03:40.600
and observable that yields of response data.

03:40.610 --> 03:45.460
So if you add that type annotation you need to add it everywhere in this chain.

03:45.560 --> 03:52.610
Now in the Ellis case years over not logging in then we're signing up then off ops will be equal to

03:52.640 --> 03:55.070
this off service sign up.

03:55.070 --> 04:00.950
But without the subscribe call and now the advantage of this approach is that a here after is a check.

04:00.950 --> 04:06.180
I can simply use the off ops it is will now be even to one for logging in or for signing me up.

04:06.230 --> 04:09.820
But what I do with the response is done exactly the same of course.

04:09.830 --> 04:14.220
Now I need to add some new ad checks for error messages.

04:14.300 --> 04:16.560
We could do this with a switch statement too.

04:16.700 --> 04:24.440
I basically only want to check for Q extra error messages email not found an invalid password.

04:24.590 --> 04:29.930
So you're all at elusive code equals email not found.

04:29.930 --> 04:38.330
Well then my message could be email address could not be found.

04:40.710 --> 04:53.540
And else if the code is equal to invalid password then I will set the message to this password is not

04:53.780 --> 05:00.020
correct and of course you could be less less specific to give the user less hints about why authentication

05:00.020 --> 05:00.650
failed.

05:00.650 --> 05:03.570
If you want to do that for security reasons.

05:03.800 --> 05:09.580
So now we are having logic in here that should all allow us to sign users in.

05:09.890 --> 05:11.820
Let's simply give this a try.

05:11.900 --> 05:17.990
Let's save everything and let's go back to the ionic app and now I'll try to log in with a user that

05:17.990 --> 05:26.470
actually exists with valid credentials and this looks good.

05:26.600 --> 05:28.830
First try to sign up this fails.

05:28.860 --> 05:34.940
Now let's say test a different email address that also exists.

05:34.940 --> 05:37.500
Let's test one that does not exist.

05:37.520 --> 05:39.230
Email address could not be found.

05:39.230 --> 05:44.030
Now let's test a valid e-mail address but invalid Password password is not correct.

05:44.060 --> 05:44.940
So this all works.

05:44.960 --> 05:50.270
The only thing that is not working as expected is that I'm not getting forwarded.

05:50.330 --> 06:00.410
If I do log in indeed though I make it here into debt success case because I'm clearly logging my response.

06:00.640 --> 06:05.080
That only happens though because end of service of course.

06:05.080 --> 06:10.660
Now remove the code where I set this user is authenticated to true and therefore this never is true

06:10.660 --> 06:13.240
and therefore our guard never allows us access.

06:13.270 --> 06:19.540
So this is actually working as intended and indeed the next task will be to all the managed ad authentication

06:19.540 --> 06:20.470
state correctly.

06:20.470 --> 06:20.680
Now.
