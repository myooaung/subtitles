WEBVTT

00:02.210 --> 00:05.650
When we dive into styling and theming I only gaps.

00:05.660 --> 00:10.540
We've got a couple of concepts that all are kind of working together.

00:10.580 --> 00:11.600
We've got a theme.

00:11.660 --> 00:15.010
We got CSI as variables which will play an important role.

00:15.020 --> 00:20.930
We got the grade we already had a look at which also is kind of related to how our components look and

00:20.930 --> 00:27.440
feel we've got attributes like the color attribute on buttons that allow us to style components.

00:27.470 --> 00:33.470
We got custom C as s styles we could write or custom SAS styles doesn't matter.

00:33.590 --> 00:35.870
So how do all these things work together.

00:35.870 --> 00:40.790
What's up with all these different ways of adjusting the look of our application.

00:41.480 --> 00:46.400
Well let's go through them step by step and you'll see that they actually all kind of work together

00:46.400 --> 00:49.750
gather D four important concepts.

00:49.760 --> 00:55.100
We can differentiate where we will have a look at are the general theme of the app see as variables

00:55.430 --> 01:00.860
then how we can work with components and their attributes and how we can actually all the right our

01:00.860 --> 01:06.010
own customers see us ask or SAS rules to adjust the app to our requirements.

01:06.050 --> 01:14.420
Now with theme I mean collection of general settings that influenced the app wide styling.

01:14.420 --> 01:22.250
Now that means things like setting some base colors some base sizes base margins so all these general

01:22.250 --> 01:28.580
settings which will then be reflected across your entire app across all your components and will actually

01:28.640 --> 01:33.430
implement the theme through a concept called CSA as variables.

01:33.530 --> 01:35.700
So data is how these come into play.

01:35.870 --> 01:40.410
Now see us as variables in case you're not aware of what that is.

01:40.430 --> 01:46.040
CSA has variables are a bit like SAS variables but if you don't know that that's probably not helping

01:46.040 --> 01:47.040
you either right.

01:47.060 --> 01:54.620
So C is as variables are in the end variables you can define in C as s where you can store values like

01:54.680 --> 01:55.190
a color.

01:55.220 --> 02:04.010
So a hex code for example or some margins or simply any units you could store 20 pixels where to ram

02:04.370 --> 02:11.840
in a C is as variable and then you can assign that C S as a variable as a value to your normal C as

02:11.840 --> 02:18.260
as properties so you could say the background color of this item should use to see us as a variable

02:18.350 --> 02:24.380
x y set and then you only need to declare that variable once and whenever you change that all places

02:24.380 --> 02:29.850
in your app that refer to it will automatically change and that is very powerful.

02:30.050 --> 02:36.200
The difference to SAS variables is that see us as variables are baked into modern browsers and they

02:36.200 --> 02:41.330
are for you don't need to compile them and you could then even changed him at runtime which is not possible

02:41.330 --> 02:43.210
with SAS variables.

02:43.310 --> 02:49.730
So this is how C is as variables will come into play and of course we'll have a look at how they work

02:49.730 --> 02:56.840
and how we could create our own ones and how we use them and they are used in this theming process where

02:56.840 --> 03:00.550
you use C as as variables to set up these base cholera sends on.

03:00.650 --> 03:07.400
Now you can always override your thematic component level though so if you generally say I have a blue

03:07.400 --> 03:13.190
main colour but for this specific button you want to have a red background that is always possible and

03:13.190 --> 03:15.770
therefore you should think of this theming process.

03:15.920 --> 03:23.860
As a general rule set for your entire app to set up a general app identity a general look and feel now

03:23.900 --> 03:27.320
will see us as variables as I mentioned help us with that in ionic.

03:27.320 --> 03:32.600
They can also be used to override default components styles and I will show you how this works in this

03:32.600 --> 03:33.790
module too.

03:33.920 --> 03:38.090
You can use them as I mentioned to reuse see as as property values.

03:38.090 --> 03:43.820
So to define a value once and then use it in multiple places of your app and you can even add your own

03:43.820 --> 03:49.850
variables ionic gives you a lot of built in ones which you can just overwrite but you can also of course

03:49.850 --> 03:56.030
create your totally new ones which you then use in your own CSX code so you see us as variables to set

03:56.030 --> 04:03.730
dynamic reusable styles or values for styles Now what about components like the ionic grid or the different

04:03.760 --> 04:07.540
attributes like color we can pass to different components.

04:07.540 --> 04:15.520
Well the end these components and these attributes like the color attribute of a button they are adjustable

04:15.520 --> 04:20.770
through C as as variables because they in the end just consume your general theme.

04:20.770 --> 04:28.360
So the idea here is just that you can then use a declarative approach to set the color of a button in

04:28.360 --> 04:34.870
a template but based on your general settings so you could say This button should use my primary color.

04:34.870 --> 04:39.520
But what the primary color is is defined for your theme.

04:39.520 --> 04:42.090
You could choose from a collection of default styles.

04:42.100 --> 04:47.980
So for example a button accepts the color attribute where you can choose from nine different colors

04:47.980 --> 04:53.230
ionic understands and you can all of course combine that with custom styles.

04:53.230 --> 04:59.440
So by default the color property of a button refers to the global theme you set up but no one's stopping

04:59.440 --> 05:05.320
you from writing your own CSA as a rule where you select a button by tag by I.D. by class whatever you

05:05.320 --> 05:08.160
want and you style it however you want.

05:08.170 --> 05:15.310
You can set up any customs he has us code and that customs see as this code will then override the globally

05:15.310 --> 05:17.230
configured styles.

05:17.230 --> 05:22.320
So we're using components and attributes to adjust styling per component and page.

05:22.360 --> 05:27.540
We can colored button with the color attribute with the primary color on page one.

05:27.700 --> 05:29.980
And with the secondary color on page two.

05:30.100 --> 05:37.420
But we do configure it declarative fully so in the template and our customers see us as code may use

05:37.420 --> 05:42.850
your C as as variables you can tap into those your customers use us code as well.

05:42.850 --> 05:44.550
No one's stopping you from that.

05:44.770 --> 05:52.600
And you write custom see as as to style anything you can style your ionic app just the way you want

05:52.610 --> 05:59.650
because it is a normal web app in the end and they a you can style every element be that an ionic element

05:59.740 --> 06:03.450
or a normal H SYMBOL element in whichever way you want.

06:03.550 --> 06:07.850
You can use customs he has s rules to override our base styles.

06:08.050 --> 06:12.250
So you could say this but normally would have the primary color but I will color it red.

06:12.250 --> 06:14.420
And no one's stopping you from doing that.

06:14.590 --> 06:16.440
And of course you can also add missing styles.

06:16.480 --> 06:23.740
So if you're saying this item here should have a width of 300 pixels and you can't read you achieved

06:23.740 --> 06:25.770
as with the ionic grid and so on.

06:25.780 --> 06:31.720
Well then you can just select that item and write your own C as as rule to make it 300 pixels wide and

06:31.720 --> 06:32.860
you're done.

06:32.860 --> 06:35.940
So you use your custom sees a styles for fine tuning.

06:36.070 --> 06:38.830
This is how these things all work together and does this.

06:38.830 --> 06:41.890
Now what we'll go through over the next lectures in this module.
