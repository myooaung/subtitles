WEBVTT

00:00.520 --> 00:07.770
Knouted we learned what England does for us where it helps us and what a single page application is.

00:07.800 --> 00:13.500
I want to dive into some of the core features of it too and show how Anglican who works in general.

00:13.560 --> 00:19.200
For this I will use an example or two application in this module and it will set up this application

00:19.470 --> 00:26.910
with the angular ACL I desires a command line interface a nice little tool which makes managing and

00:26.910 --> 00:30.330
setting up the angle to application very simple.

00:30.330 --> 00:36.900
I installed that seal I've fruit NPM which you know it's package manager and you already should have

00:36.900 --> 00:42.060
know it because we installed it in the first section of this discours as we all needed to manage our

00:42.060 --> 00:46.530
eye on it to dependencies NTI onic to Seelye itself.

00:46.830 --> 00:54.810
So with NPM installed you can install the angular Selye was simply running NPM install dash g to install

00:54.810 --> 01:02.280
it globally and then angular Seelye you might throw a net at latest to make sure you're fetching the

01:02.280 --> 01:03.450
latest version.

01:03.450 --> 01:09.840
And on Mac and Linux you probably also need to put a pseudo in front of it to get the right permissions.

01:09.960 --> 01:12.390
On Windows this is not needed.

01:12.390 --> 01:18.870
Thereafter you can hit enter and you simply will be prompted to enter your password on Mac and Linux

01:19.140 --> 01:24.400
and then it will install the Selye downloaded and install it globally on your machine.

01:24.510 --> 01:26.400
Now I'll be back once this is done.

01:27.050 --> 01:29.320
DC Alliance lation finished here.

01:29.320 --> 01:35.320
The next step is to go into a folder to navigate into a folder where you want to set up your annual

01:35.320 --> 01:37.140
or 2 project.

01:37.390 --> 01:43.240
I navigate it into such a folder here and then you can use to Seelye by typing Engy this command should

01:43.240 --> 01:49.470
now be available since you install TC like globally on your machine engine huge treat a new project

01:49.600 --> 01:53.230
and then your project name I will name it.

01:53.260 --> 01:54.570
A large few basics.

01:54.580 --> 01:56.590
But of course you can choose any name you want.

01:56.800 --> 02:00.980
After hitting enter this will set up this new project and this will take a couple of seconds.

02:01.150 --> 02:06.160
If you're experiencing some problems here on the windows for example try running your command line as

02:06.160 --> 02:09.860
administrator and I'll be back once this has finished.

02:09.910 --> 02:15.790
I now open this newly created what you project with web store which is the ID I'm using for this course

02:16.120 --> 02:17.530
but there are alternatives.

02:17.530 --> 02:23.700
As mentioned in the first course section you could use an editor like Adam or sublime or NIIT Ely.

02:23.740 --> 02:25.280
Visual Studio code.

02:25.480 --> 02:30.550
Now this is the English you project created for your CLIA and I won't dive super deep into the files

02:30.550 --> 02:36.180
and folders here since it isn't really a course about the Seelye or even about Engler to does it just

02:36.190 --> 02:37.700
a short recap.

02:37.810 --> 02:43.990
So what's important for us is that in the source folder in the app folder our England app lives.

02:44.080 --> 02:48.210
This is where we create our Englert single page application.

02:48.220 --> 02:52.270
Now this also is a recap not an angler to coerce.

02:52.300 --> 02:55.530
So I assume that you know that English to use is typescript.

02:55.540 --> 02:58.760
I assume that you know how it works in general.

02:58.780 --> 03:01.710
I just want to refresh some of those things.

03:01.960 --> 03:08.920
So you would get this app component and as you probably are aware angler who works with components so

03:08.920 --> 03:12.280
our whole application consists of at least one bug.

03:12.460 --> 03:19.690
Most of the time multiple components and this app component helps to be our root component which gets

03:19.690 --> 03:22.320
loaded at the startup of our application.

03:22.570 --> 03:29.670
It is loaded as our root component because the app module which manages our main application module.

03:29.680 --> 03:34.500
You probably are aware that in your two applications are divided up in modules.

03:34.900 --> 03:39.050
This app module bootstraps our app component here.

03:39.340 --> 03:46.720
Now since it defines this all and to be bootstrapped that helps a lot to please start the application

03:46.810 --> 03:50.610
with this component as our root component.

03:50.680 --> 03:56.080
Which means load it as the first component which if we would have more components and one would hold

03:56.140 --> 03:58.060
all Aberg components.

03:58.060 --> 04:01.210
Now a component consists not only of the types of code.

04:01.240 --> 04:09.130
This component class here with the component decorator though that is what defines it but it also very

04:09.180 --> 04:12.900
importantly has to have at least a template.

04:13.000 --> 04:18.970
It doesn't have to have a selector or a stylus but it has to have a template be that an external one

04:18.970 --> 04:22.650
like here or an inline template in the same file.

04:22.660 --> 04:29.560
Now this external template is here and stored in the app component h file and all it does right now

04:29.560 --> 04:31.950
is it outputs some title.

04:32.060 --> 04:38.650
The title property we store here and I will come back to data binding in one of the next videos.

04:38.680 --> 04:47.410
Now this application is as I had started with the EP module basically with Des's bootstrap set your

04:47.410 --> 04:53.500
debt loads our app component but we somehow need to make sure that this app module is loaded at the

04:53.500 --> 04:57.660
startup of our app and this is done in the main dot TS file.

04:57.670 --> 05:01.990
This is the actual first file which gets loaded and executed.

05:01.990 --> 05:09.340
Once our application runs in the browser then this line here is executed and all this line does is it

05:09.340 --> 05:12.290
bootstraps our application and it helps a lot.

05:12.310 --> 05:20.560
You hate the module which basically sets up our application module is stored in the app module which

05:20.560 --> 05:27.730
we import here which of course points to this app module Dotty's file and this is the first code which

05:27.730 --> 05:32.240
gets executed as it gets injected into the index HDMI file.

05:32.260 --> 05:33.430
You don't see it here.

05:33.460 --> 05:37.400
This is done by Seelye when we actually build our app.

05:37.450 --> 05:39.540
So let's see our app in action.

05:39.550 --> 05:41.130
I'll open up the terminal again.

05:41.140 --> 05:48.190
It's just an integrated one in my ID and with Engy serve I can serve this application.

05:48.230 --> 05:54.880
Rudy Seelye DC will spin up a little development server running on no chase in the background and the

05:54.880 --> 06:03.340
server will then host this application be viewed like by going to local host 4200 which is default and

06:03.340 --> 06:10.090
you should see app works here which of course is to text set up your India component which is output

06:10.090 --> 06:13.360
wires interpellation in the template.

06:13.360 --> 06:20.350
These are the very basics about setting up a thing or two project and howdie angler two app starts now

06:20.350 --> 06:26.200
and the next lectures I want to dive a little deeper into components templates data binding directives

06:26.200 --> 06:32.140
and all those things which make up English too so that often the section we really can be sure that

06:32.140 --> 06:37.210
we're all on the same page regarding our English to basic knowledge.
