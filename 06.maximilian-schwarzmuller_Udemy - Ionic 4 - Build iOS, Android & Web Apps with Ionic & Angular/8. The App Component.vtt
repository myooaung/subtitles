WEBVTT

00:02.060 --> 00:09.320
We're almost done going through that startup process and I know that this is a lot of new knowledge to digest

00:09.650 --> 00:15.790
but it's important to have an idea of the big picture and of what happens here in general.

00:16.010 --> 00:22.610
So I left when I pointed at this app component which seems to be a somewhat important component in our

00:22.610 --> 00:23.760
Angular app.

00:23.780 --> 00:25.300
Well therefore let's have a look at it

00:25.760 --> 00:30.710
and remember that we are importing it from ./app.component,

00:30.710 --> 00:39.650
so from this file. Now in here what you can see is again a class which we export with that app component

00:39.650 --> 00:40.030
name

00:40.050 --> 00:49.790
we are importing in app module and just as our app module, the app component has a decorator but here

00:49.790 --> 00:57.170
it's not the ngModule decorator but the component decorator which again is imported from Angular,

00:57.170 --> 01:01.600
from the Angular framewore, here from angular/core

01:01.640 --> 01:08.780
and if you're wondering how you can know from which part of Angular you can import what, it's basically

01:08.780 --> 01:14.180
the same set of features all the time, so you will learn it throughout this course, throughout this refresher

01:14.180 --> 01:15.680
of course.

01:15.680 --> 01:24.440
Now we add this decorator to this class for a similar reason as we added @ngModule to this class

01:24.440 --> 01:31.250
in the app module, to provide metadata behind the scenes which allows Angular to treat this code in a

01:31.250 --> 01:37.280
certain way and execute it correctly in our browser so to say because you always have to keep

01:37.280 --> 01:43.340
in mind that we write the code here in a relatively structured and easy-to-read way.

01:43.490 --> 01:49.040
This is not code that will run in the browser but it is code that is transpiled to code that runs in

01:49.040 --> 01:56.060
the browser and therefore, we for example need to add certain metadata as we do with this add component decorator.

01:57.580 --> 02:04.390
The add component decorator takes a Javascript object to configure this component and here we configure

02:04.390 --> 02:12.640
three important parts - the first part is the so-called selector and this is basically your own HTML tag

02:12.940 --> 02:20.910
by which you will be able to use this component in your application and you see, it's app root here. Now

02:21.180 --> 02:23.630
before I talk about the other two parts,

02:23.670 --> 02:29.220
let's for a second check where we actually use app root.

02:29.220 --> 02:35.750
Well maybe we do in our single page, in index.html and indeed, we do,

02:35.820 --> 02:43.040
if you check this file, you see app root being thrown into our body here. Now

02:43.090 --> 02:51.260
Angular scans this document body for us you could say and it scans it for this selector.

02:51.310 --> 02:57.100
Now it does this because in app module we define the app component as a Bootstrap,

02:57.100 --> 03:04.060
so as a root component for the application. It does not scan index.html for any other component we

03:04.060 --> 03:05.140
might create,

03:05.200 --> 03:10.120
we only have one here but we can and will create more components soon.

03:10.120 --> 03:15.490
It only scans it for the selector of app component because this was added to Bootstrap

03:15.490 --> 03:17.960
and yes, you could add multiple components here,

03:17.980 --> 03:25.590
this is advanced though and typically you only have one root component, other components are added differently.

03:25.650 --> 03:31.770
So this is why the selector is important, because of that selector and the selector matching this tag

03:31.800 --> 03:41.490
here, Angular is able to mount a root component in this place, in our HTML file. Now this component

03:41.490 --> 03:48.900
does not just have a selector, it also needs some definition of which HTML code Angular should

03:48.900 --> 03:54.870
actually render when it mounts this component and that is defined in the so-called template of this

03:54.870 --> 03:55.800
component.

03:55.830 --> 04:04.080
Here, we have the template URL key which points at a file, a HTML file which contains the HTML

04:04.080 --> 04:06.040
code for this component

04:06.040 --> 04:09.300
and here, this is this app.component.html code.

04:09.300 --> 04:16.000
If we have a look at this, we see a bunch of normal HTML tags here and this is actually the HTML

04:16.020 --> 04:20.330
code which is responsible for what you're seeing here, a

04:20.380 --> 04:26.130
h1 tag, an image and then an unordered list for example.

04:26.130 --> 04:28.370
Well that is exactly what you can find here,

04:28.400 --> 04:33.210
an h1 tag, an image and an unordered list.

04:33.340 --> 04:39.400
Now it's important to understand that this is not a HTML page which is shipped to the browser and

04:39.400 --> 04:46.000
just rendered like this, instead Angular behind the scenes parses this and creates a couple of Javascript

04:46.000 --> 04:52.930
instructions that render these HTML elements wherever this component gets mounted to the DOM. And you

04:52.930 --> 04:58.780
can check this by going back to your page and inspecting your page source with view page source

04:58.780 --> 05:06.100
here in Chrome. What you will see is that you only have app root in here, you see none of the other HTML

05:06.130 --> 05:13.240
elements which you can see here in your app.component.html code. This is the page, the HTML page we got back

05:13.240 --> 05:14.160
from the server,

05:14.260 --> 05:21.230
so it's not containing all these HTML elements. That changes however if you inspect your DOM,

05:21.230 --> 05:28.580
so the actually rendered DOM, there you can see all this extra content inside of app root.

05:28.610 --> 05:35.630
Here is app root and inside of that, you got that H2 tag and the div with the H1 tag and so on.

05:35.630 --> 05:41.570
So here you can see that is the content that is rendered but not the content that is initially loaded

05:41.570 --> 05:48.680
and the reason for this difference is that Angular is just Javascript that runs on your loaded page

05:49.010 --> 05:56.180
and then it will render all this content, all this template content here dynamically. Now

05:56.180 --> 06:00.620
last but not least, our component also can take some styling

06:00.620 --> 06:07.760
and here we use style URLs which actually holds an array of paths to CSS files that should

06:07.760 --> 06:16.430
be applied to this components template. So any HTML code in there can be styled with regular CSS written

06:16.430 --> 06:18.950
in this app.component.css file.

06:18.950 --> 06:24.710
Here we have no styles but you could add your own one and by default, the styles you set up here only

06:24.710 --> 06:25.970
apply to elements in 

06:25.970 --> 06:27.110
this component.

06:27.260 --> 06:33.170
So if we add a h1 style in here and we give this a red color, then all h1 tags in this component

06:33.170 --> 06:34.090
will be red

06:34.250 --> 06:42.020
but if we had another component which also uses h1, there it would not be red because the styles

06:42.050 --> 06:49.430
defined in the components stylesheet are scoped to this component. So that is how the Angular app starts

06:49.430 --> 06:54.750
and how these core features, modules and components work together.

06:54.770 --> 06:56.330
Now that was a lot of talking,

06:56.390 --> 07:02.330
let's now create our own components and dive a bit deeper into how Angular works in its basics.
