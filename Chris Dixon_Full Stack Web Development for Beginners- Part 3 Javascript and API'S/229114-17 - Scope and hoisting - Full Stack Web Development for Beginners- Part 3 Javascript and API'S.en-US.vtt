WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.460
We're going to now look at two important things to understand when using JavaScript,

00:00:05.460 --> 00:00:08.625
and this is called scope and hoisting.

00:00:08.625 --> 00:00:12.885
Begin with scope and allow this relates to our variables.

00:00:12.885 --> 00:00:17.685
We now looking at these terms because they have a lot to do with function's.

00:00:17.685 --> 00:00:22.975
Scope basically determines where we have access to our variables.

00:00:22.975 --> 00:00:28.965
First, let's go to our starter project and into the scope and hoisting section.

00:00:28.965 --> 00:00:31.925
Down in here we have a multiply function,

00:00:31.925 --> 00:00:33.290
which we seen before.

00:00:33.290 --> 00:00:37.010
Multiplying the values in number one and number two.

00:00:37.010 --> 00:00:38.870
Also just like the last video,

00:00:38.870 --> 00:00:43.325
we have our empty p elements to display the results in the browser.

00:00:43.325 --> 00:00:48.710
So this time rather than passing number one and number two as argument to the function,

00:00:48.710 --> 00:00:51.785
we can go ahead and declare these variables.

00:00:51.785 --> 00:00:56.785
Let's say var num one is equal to five,

00:00:56.785 --> 00:01:03.325
and then var num two is equal to 10, if we save that.

00:01:03.325 --> 00:01:06.040
Now these two values should be multiplied,

00:01:06.040 --> 00:01:10.195
which we have here and then displayed in our p elements.

00:01:10.195 --> 00:01:14.560
Reload. There's our value of 50 on the screen.

00:01:14.560 --> 00:01:17.290
This is working okay because the variables which we

00:01:17.290 --> 00:01:21.805
declared have been declared outside a dysfunction body.

00:01:21.805 --> 00:01:24.750
This means these variables are global,

00:01:24.750 --> 00:01:26.925
all have global scope.

00:01:26.925 --> 00:01:31.105
Global variables can be accessed anywhere in our code.

00:01:31.105 --> 00:01:36.685
For example, our variable is being accessed here inside of the function.

00:01:36.685 --> 00:01:39.580
But we can also access it outside of the function

00:01:39.580 --> 00:01:43.620
too which we could see with a console log.

00:01:43.620 --> 00:01:50.830
They were console log outside the function body the value of one of these variables.

00:01:50.830 --> 00:01:53.700
Save that and then reload.

00:01:53.700 --> 00:01:57.920
We ca see that not only do you have access to the variables inside the function,

00:01:57.920 --> 00:02:01.310
we can also access these outside the function too,

00:02:01.310 --> 00:02:03.925
which we say here with the console log.

00:02:03.925 --> 00:02:09.530
However, if we grab these two variables here and then cut them out,

00:02:09.530 --> 00:02:14.550
and then instead paste them inside of our function body.

00:02:14.920 --> 00:02:18.565
Gives us save, reload.

00:02:18.565 --> 00:02:23.375
So we now see that our variables can be accessed inside the function.

00:02:23.375 --> 00:02:26.540
But we see our console log is thrown and error.

00:02:26.540 --> 00:02:32.090
This is because we've moved these two variables in side of this function body.

00:02:32.090 --> 00:02:36.635
This means they now have local scope rather than global.

00:02:36.635 --> 00:02:39.800
Local scope means these variables can only be

00:02:39.800 --> 00:02:43.865
accessed locally inside the function which there were declared.

00:02:43.865 --> 00:02:48.155
This is why I will get element by ID is updating.

00:02:48.155 --> 00:02:49.685
Both our console log,

00:02:49.685 --> 00:02:51.380
which is outside the function,

00:02:51.380 --> 00:02:53.615
is now thrown and error.

00:02:53.615 --> 00:02:59.165
We can prove this by moving this console log to be inside of the function.

00:02:59.165 --> 00:03:03.410
Let's move this inside of the curly braces of the function.

00:03:03.410 --> 00:03:07.170
Then over to the browser. Now the console log

00:03:07.170 --> 00:03:11.430
also has access to this local variables too.

00:03:11.430 --> 00:03:14.250
So this is how scope works,

00:03:14.250 --> 00:03:16.790
it's all about where we declare all variables.

00:03:16.790 --> 00:03:18.980
So remember, declaring them outside of

00:03:18.980 --> 00:03:23.110
a function will mean they are global and can be accessed anywhere.

00:03:23.110 --> 00:03:26.540
Variables declared inside a function only have

00:03:26.540 --> 00:03:31.015
local scope and can only be accessed within the function.

00:03:31.015 --> 00:03:36.140
Next we have another one of these words which you will hear about called hoisting.

00:03:36.140 --> 00:03:40.085
Hoisting basically means that JavaScript will move or

00:03:40.085 --> 00:03:44.705
hoist your variables and functions to the top of the current scope.

00:03:44.705 --> 00:03:47.180
They're not physically moved to the top,

00:03:47.180 --> 00:03:49.520
though it's actually stored in memory,

00:03:49.520 --> 00:03:52.700
so that can be used at anytime in the script.

00:03:52.700 --> 00:03:56.825
This causes some behavior which we may not expect.

00:03:56.825 --> 00:04:01.940
Let's go to our example from before and take a look at this in more detail.

00:04:01.940 --> 00:04:04.630
So over to our function.

00:04:04.630 --> 00:04:07.730
So first of all, we declare our function just

00:04:07.730 --> 00:04:13.630
here and then below this will go ahead and call our function to run it.

00:04:13.630 --> 00:04:17.090
We would expect this function to work because

00:04:17.090 --> 00:04:22.520
the browser knows we declared this function first and then it called the below.

00:04:22.520 --> 00:04:25.990
Our code is read from top to bottom.

00:04:25.990 --> 00:04:30.740
But what if we called the function first before we declared it.

00:04:30.740 --> 00:04:32.945
So if a mood multiply,

00:04:32.945 --> 00:04:38.695
should open the top, therefore calling the function before we actually declare it.

00:04:38.695 --> 00:04:42.225
Let's save that and see what happens.

00:04:42.225 --> 00:04:46.605
We still see things working because as we said before,

00:04:46.605 --> 00:04:49.530
functions are variables stored in memory.

00:04:49.530 --> 00:04:52.325
So when this function is called just here,

00:04:52.325 --> 00:04:56.480
the browser or the interpreter already knows it exists.

00:04:56.480 --> 00:04:59.810
When we looked at functions a few videos ago,

00:04:59.810 --> 00:05:02.050
we looked at two different types.

00:05:02.050 --> 00:05:04.085
These type which you see here,

00:05:04.085 --> 00:05:05.750
which is a named function,

00:05:05.750 --> 00:05:09.530
and also an anonymous function which does not have a name.

00:05:09.530 --> 00:05:11.735
Remember, it looks like this.

00:05:11.735 --> 00:05:17.680
So if we remove the name and then install it inside a variable called

00:05:17.680 --> 00:05:24.550
anonymous function and set this equal to all function just here.

00:05:24.550 --> 00:05:27.325
If we call this function down at the bottom.

00:05:27.325 --> 00:05:30.595
So change multiplied to be anonymous function.

00:05:30.595 --> 00:05:33.440
Then move this down to the bottom.

00:05:33.440 --> 00:05:35.745
Save and then reload.

00:05:35.745 --> 00:05:39.040
We see that everything still works perfectly fine.

00:05:39.040 --> 00:05:43.480
We also mentioned when looking at anonymous functions a few videos ago,

00:05:43.480 --> 00:05:48.245
that there is a difference between anonymous functions and named functions.

00:05:48.245 --> 00:05:52.795
While the difference weird anonymous functions is when called in first,

00:05:52.795 --> 00:05:54.745
it will result in an error.

00:05:54.745 --> 00:06:02.145
So if move this anonymous function call back up to the top of the browser and reload.

00:06:02.145 --> 00:06:06.785
We now see an error in the console and niche is no longer working.

00:06:06.785 --> 00:06:10.130
So this is a difference between the two function types.

00:06:10.130 --> 00:06:12.950
Anonymous functions are not hoisted,

00:06:12.950 --> 00:06:14.525
or stored in memory,

00:06:14.525 --> 00:06:16.970
but they are named function declarations,

00:06:16.970 --> 00:06:19.490
which we seen first hoisted.

00:06:19.490 --> 00:06:22.535
Hoisting also happens with variables too.

00:06:22.535 --> 00:06:24.500
Let's take a look at this,

00:06:24.500 --> 00:06:27.424
if we comment out this function,

00:06:27.424 --> 00:06:29.660
remembering Visual Studio code,

00:06:29.660 --> 00:06:33.155
this is command or control with a forward slash.

00:06:33.155 --> 00:06:38.010
Then if we declare a variable of x to be 10.

00:06:38.010 --> 00:06:42.455
Then the second variable of y to be equal to five.

00:06:42.455 --> 00:06:46.295
Then let's alert these two values of x and y.

00:06:46.295 --> 00:06:51.275
So let's add x and y and separate these with a string.

00:06:51.275 --> 00:06:55.805
Let's that's add a pipe symbol inside here.

00:06:55.805 --> 00:06:59.165
If we save that and then reload the browser,

00:06:59.165 --> 00:07:02.900
we now get our alert of 10 and then five.

00:07:02.900 --> 00:07:06.155
So this is the behavior which we would expect.

00:07:06.155 --> 00:07:09.365
We've declared a variable of x and y,

00:07:09.365 --> 00:07:12.370
and then alerted these to the screen.

00:07:12.370 --> 00:07:15.225
So this is all expected behavior.

00:07:15.225 --> 00:07:21.175
But what would happen instead if we moved the alert above our variable of y,

00:07:21.175 --> 00:07:24.320
let's save this and check this out on the browser.

00:07:24.320 --> 00:07:26.810
Reload, and we'll get the value of 10,

00:07:26.810 --> 00:07:29.360
then y is undefined.

00:07:29.360 --> 00:07:32.555
So we said before the variables are hoisted.

00:07:32.555 --> 00:07:36.230
So we would expect the values of x and y are both

00:07:36.230 --> 00:07:40.190
stored in memory and available when we call this alert.

00:07:40.190 --> 00:07:42.310
But this is not happening.

00:07:42.310 --> 00:07:45.155
So there is one thing to be aware of though.

00:07:45.155 --> 00:07:50.065
Although these variables are stored in memory, only the decoration,

00:07:50.065 --> 00:07:53.810
such as the variable of x and the variable y,

00:07:53.810 --> 00:07:56.150
is stored in memory rather than

00:07:56.150 --> 00:08:01.760
the actual value which we assigned to it of five and also 10.

00:08:01.760 --> 00:08:03.770
So to see this more clearly,

00:08:03.770 --> 00:08:05.614
let's go into our example.

00:08:05.614 --> 00:08:12.300
This first variable is the initialization,

00:08:12.300 --> 00:08:18.820
this means we declare a variable of x and assign the value of 10 to this variable.

00:08:18.820 --> 00:08:20.900
A declaration, on the other hand,

00:08:20.900 --> 00:08:25.775
is when we just declare a variable name without assigning a value,

00:08:25.775 --> 00:08:30.810
such as this here so this is the declaration.

00:08:30.850 --> 00:08:36.290
So now we know the difference between the initialization and the declaration.

00:08:36.290 --> 00:08:38.920
Why would this matter to our code?

00:08:38.920 --> 00:08:42.080
Well, when any of these variables are hoisted,

00:08:42.080 --> 00:08:45.950
even the ones where we set an initial value like this,

00:08:45.950 --> 00:08:49.495
only the declaration is stored in memory.

00:08:49.495 --> 00:08:52.205
This is why our variable of y,

00:08:52.205 --> 00:08:53.735
which will have here,

00:08:53.735 --> 00:08:56.065
is shown up as undefined.

00:08:56.065 --> 00:08:59.870
The variable of y is actually hoisted or stored in memory.

00:08:59.870 --> 00:09:03.005
So the browser is aware they exists,

00:09:03.005 --> 00:09:06.800
but it's not aware of the initial value which we set to five.

00:09:06.800 --> 00:09:09.964
Hence why we get the value of undefined.

00:09:09.964 --> 00:09:14.000
So this may all seem a little complex if this is new to you,

00:09:14.000 --> 00:09:16.070
but this is how the code is read.

00:09:16.070 --> 00:09:21.780
So it's really important to understand to avoid any bugs or expected behavior.

00:09:21.780 --> 00:09:25.075
One of the things to take away from this is to always

00:09:25.075 --> 00:09:28.720
declare your variables at the top of the scope.

00:09:28.720 --> 00:09:31.435
Meaning if the variables are local,

00:09:31.435 --> 00:09:33.985
which we had inside the function here,

00:09:33.985 --> 00:09:36.805
place them at the top of the function body,

00:09:36.805 --> 00:09:39.460
or if we want our variables to be global,

00:09:39.460 --> 00:09:42.130
we should set them at the top of our scripts.

00:09:42.130 --> 00:09:48.340
So let's move our x and y right up to the top of the scripts,

00:09:48.340 --> 00:09:53.560
let's add this above our alerts from before.

00:09:53.560 --> 00:09:57.055
We can also set this to be our value of five,

00:09:57.055 --> 00:09:59.605
gives us save and refresh.

00:09:59.605 --> 00:10:01.810
Now we don't have a problem because

00:10:01.810 --> 00:10:05.855
our variables are now set at the top of the current scope.

00:10:05.855 --> 00:10:09.650
So should even set these at the very top or at least above

00:10:09.650 --> 00:10:13.285
the code which you going to access them in our case, the alert.

00:10:13.285 --> 00:10:17.090
This will ensure our code is wrote in a similar way in which it's

00:10:17.090 --> 00:10:21.840
read and possibly avoiding any unexpected behavior.
