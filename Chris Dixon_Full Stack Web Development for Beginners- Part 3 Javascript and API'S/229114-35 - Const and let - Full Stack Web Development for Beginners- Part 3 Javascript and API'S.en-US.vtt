WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.430
Welcome back to this brand new section.

00:00:02.430 --> 00:00:04.380
We'll be reinforcing what you've already

00:00:04.380 --> 00:00:08.010
learned along with learning some new stuff such as const and let,

00:00:08.010 --> 00:00:12.435
template literals, setting intervals, and regular expressions.

00:00:12.435 --> 00:00:16.935
We're now going to put our skills into practice by building a phone game.

00:00:16.935 --> 00:00:20.840
I've already added the HTML and CSS into the starter file,

00:00:20.840 --> 00:00:24.990
so we can focus on getting this game working using JavaScript.

00:00:24.990 --> 00:00:27.510
In this game, all we need to do is click on

00:00:27.510 --> 00:00:31.860
the "Match" button when two random shapes are the same size and color.

00:00:31.860 --> 00:00:34.990
This is the finished version in front of us here.

00:00:34.990 --> 00:00:37.695
All we need to do is click on the "Play" button,

00:00:37.695 --> 00:00:42.300
and this will trigger an array of objects which are randomly selected.

00:00:42.300 --> 00:00:44.520
In this game, all we need do is click on

00:00:44.520 --> 00:00:48.965
the "Match" button when the two random shapes are the same size and color.

00:00:48.965 --> 00:00:50.575
Although it looks simple,

00:00:50.575 --> 00:00:52.825
there is a big going on behind the scenes,

00:00:52.825 --> 00:00:56.095
and we'll get lots of practice with what you've already learned,

00:00:56.095 --> 00:00:58.240
along with some new things too.

00:00:58.240 --> 00:01:02.585
We'll click on the "Match" button when two are the same, we then get a score.

00:01:02.585 --> 00:01:04.230
If the shape is different,

00:01:04.230 --> 00:01:08.150
we then get a point taken off and the result can go negative.

00:01:08.720 --> 00:01:12.550
Let's go over to our JavaScript starter files,

00:01:12.550 --> 00:01:15.430
and the code for this is in number 31,

00:01:15.430 --> 00:01:17.625
which is the shape matcher game.

00:01:17.625 --> 00:01:22.140
Here I've got the index on the script.js file already open.

00:01:22.140 --> 00:01:24.885
I'm going to copy the index page,

00:01:24.885 --> 00:01:30.325
copy the file path, and then paste this into the browser to get it going.

00:01:30.325 --> 00:01:33.020
We already have all the layout and styling,

00:01:33.020 --> 00:01:36.590
so all we need to do is work in the script.js file.

00:01:36.590 --> 00:01:38.390
Let's go over to this now,

00:01:38.390 --> 00:01:40.685
open up the script.js.

00:01:40.685 --> 00:01:44.500
Let's make a little bit more space inside the text editor.

00:01:44.500 --> 00:01:47.360
Inside here, I'm going to begin by creating

00:01:47.360 --> 00:01:50.875
our shapes along with some variables to store them in.

00:01:50.875 --> 00:01:54.290
This time though, we're going to be focusing on two new things.

00:01:54.290 --> 00:01:57.890
We're not going to be using a variable using the var keyword.

00:01:57.890 --> 00:02:02.425
In fact, we probably won't use them again for the rest of this course.

00:02:02.425 --> 00:02:05.044
Not because there's anything wrong with variables.

00:02:05.044 --> 00:02:07.490
They still perfectly valid to use.

00:02:07.490 --> 00:02:10.785
However, in ES6, which we've already mentioned,

00:02:10.785 --> 00:02:13.145
is also known as ES 2015,

00:02:13.145 --> 00:02:19.405
we also have two new keywords we could use in place of var to start all variables.

00:02:19.405 --> 00:02:24.085
First is let, which allows us to also declare a variable.

00:02:24.085 --> 00:02:26.145
We need some variables to this game.

00:02:26.145 --> 00:02:30.240
Let's go ahead and create a let current score.

00:02:30.240 --> 00:02:34.430
We can set this to be a initial value of zero.

00:02:34.430 --> 00:02:41.359
Just like var, value stored using let can be updated, also called reassigned.

00:02:41.359 --> 00:02:44.720
There's a different with let and var.

00:02:44.720 --> 00:02:47.215
Let values are block scoped.

00:02:47.215 --> 00:02:51.755
The block scoping applies to things such as functions or statements.

00:02:51.755 --> 00:02:55.415
Basically anything between a set of curly braces.

00:02:55.415 --> 00:02:58.190
If you remember back to when we looked at scoping,

00:02:58.190 --> 00:03:03.125
we learned variables declared inside of a function are scooped to that function,

00:03:03.125 --> 00:03:06.700
meaning we cannot access them elsewhere in our code.

00:03:06.700 --> 00:03:11.220
Also variables declared outside of a function are called global.

00:03:11.220 --> 00:03:14.905
We have access to them anywhere inside of our code.

00:03:14.905 --> 00:03:16.860
Let values on the other hand,

00:03:16.860 --> 00:03:20.030
are scoped to not only the block where they were created,

00:03:20.030 --> 00:03:23.270
but also anywhere else they are used.

00:03:23.270 --> 00:03:28.780
We can see this better with a simple example using our current score variable.

00:03:28.780 --> 00:03:31.665
If we add this to an if statement,

00:03:31.665 --> 00:03:34.995
so let's create an if statement which we've already learned about,

00:03:34.995 --> 00:03:39.730
and then we can say if current score is less than five,

00:03:39.730 --> 00:03:43.210
inside here we can say a console.log,

00:03:43.610 --> 00:03:47.370
and log is the value of current score.

00:03:47.370 --> 00:03:50.985
Then a string, and this can say inside.

00:03:50.985 --> 00:03:55.215
Once we're in the console we know where his message is coming from.

00:03:55.215 --> 00:04:00.135
Then let's do a second console log outside of this if statement.

00:04:00.135 --> 00:04:04.530
We'll do the same, we'll add the current score to a string.

00:04:04.530 --> 00:04:07.510
But this time, we'll say outside.

00:04:07.970 --> 00:04:10.655
Now if we go over to the browser,

00:04:10.655 --> 00:04:13.740
open up the console,

00:04:13.870 --> 00:04:16.550
click the "Console" tab,

00:04:16.550 --> 00:04:20.615
refresh, and now we can see zero and zero.

00:04:20.615 --> 00:04:23.755
This applies to both the inside and outside.

00:04:23.755 --> 00:04:26.085
This is expected behavior.

00:04:26.085 --> 00:04:28.840
We declared our let value to be zero,

00:04:28.840 --> 00:04:32.590
then log it inside and outside of the if block.

00:04:32.590 --> 00:04:35.540
Let's go ahead and declare the same variable,

00:04:35.540 --> 00:04:39.860
but this time inside of the if statements. Let's do the same.

00:04:39.860 --> 00:04:46.915
We'll say let the current score this time to be equal to a value of 10.

00:04:46.915 --> 00:04:50.030
Now let's go to the browser and refresh,

00:04:50.030 --> 00:04:53.315
now we'll see the effect of block scoping.

00:04:53.315 --> 00:04:57.340
Current score inside of the block is a value of 10.

00:04:57.340 --> 00:05:01.240
But the current score outside of the block is untouched.

00:05:01.240 --> 00:05:03.825
If these are both variables,

00:05:03.825 --> 00:05:08.530
let's change let to the var in both cases.

00:05:10.400 --> 00:05:14.225
We'd now see that both values would be 10.

00:05:14.225 --> 00:05:17.875
Because this variable is declared outside of these curly braces,

00:05:17.875 --> 00:05:20.450
meaning it has global scope.

00:05:20.450 --> 00:05:24.445
For most cases, we can use the newer let keyword,

00:05:24.445 --> 00:05:29.510
now to declare variables and this is what we'll be using for the rest of this course.

00:05:29.510 --> 00:05:33.420
Select "Remove", all of this example,

00:05:33.420 --> 00:05:36.930
and then change this var to be let.

00:05:36.930 --> 00:05:40.495
We also need some more variables to this project.

00:05:40.495 --> 00:05:45.085
Let's go ahead and add them now using our let keyword.

00:05:45.085 --> 00:05:49.450
We're going to create a variable called let playing.

00:05:49.450 --> 00:05:52.485
This is going to be initially set to false.

00:05:52.485 --> 00:05:56.390
This will be turned to true when the user clicks on the "Play" button.

00:05:56.390 --> 00:05:58.320
Then let's create two more,

00:05:58.320 --> 00:06:04.290
one for shape 1 and then also one for shape 2,

00:06:04.290 --> 00:06:08.190
shape 1 and shape 2 are currently unassigned,

00:06:08.190 --> 00:06:14.080
because we need to add a random value to these later when the user starts playing.

00:06:14.080 --> 00:06:19.700
Along with the let keyword ES6 also introduced the const keyword,

00:06:19.700 --> 00:06:23.420
which is short for constant or variables we

00:06:23.420 --> 00:06:27.619
declare using var and let can be changed or reassigned.

00:06:27.619 --> 00:06:32.015
However, if we know our value is always going to remain the same,

00:06:32.015 --> 00:06:34.855
we can declare a constant instead.

00:06:34.855 --> 00:06:38.440
This will also have the benefit of the value not

00:06:38.440 --> 00:06:41.980
getting accidentally updated elsewhere in our code.

00:06:41.980 --> 00:06:46.330
If we declare a const and try to update a value,

00:06:46.330 --> 00:06:47.960
we'll get an error.

00:06:47.960 --> 00:06:52.665
Let's set a number to be equal to 10.

00:06:52.665 --> 00:06:55.620
Then let's say number plus plus.

00:06:55.620 --> 00:06:58.715
Now we're increasing the value of 10,

00:06:58.715 --> 00:07:01.495
even though it's stored inside a constant.

00:07:01.495 --> 00:07:04.255
Let's see what happens inside the console.

00:07:04.255 --> 00:07:07.490
If we try and log the value of number,

00:07:07.880 --> 00:07:14.870
reload and we're getting error because we're trying to update the value of a constant.

00:07:15.020 --> 00:07:18.060
Let's remove these for now.

00:07:18.060 --> 00:07:23.515
A constant will be useful for declaring the shapes we want to use in this project.

00:07:23.515 --> 00:07:25.405
We want to select the shapes,

00:07:25.405 --> 00:07:27.335
but we don't need to change them.

00:07:27.335 --> 00:07:29.715
Each shape is going to be an object.

00:07:29.715 --> 00:07:33.655
So we can add these in as an array of objects.

00:07:33.655 --> 00:07:37.270
Lets setup our constant called shapes,

00:07:37.270 --> 00:07:39.800
and this is going to be an array.

00:07:39.800 --> 00:07:43.510
Inside of this array, we can create our object.

00:07:43.510 --> 00:07:46.540
We need to go ahead and create quite a few of these,

00:07:46.540 --> 00:07:49.565
so we have some random shapes to select.

00:07:49.565 --> 00:07:54.900
Let's set the color property and these can be any colors of your choosing.

00:07:54.900 --> 00:08:01.630
I want to go for the value for the first one of FF595E,

00:08:01.630 --> 00:08:08.570
then the width of 250, and the height.

00:08:09.770 --> 00:08:15.615
Let's go for 160, then add a comma.

00:08:15.615 --> 00:08:20.100
Let's go ahead and copy this and paste this in nine more times,

00:08:21.040 --> 00:08:24.055
giving us 10 different objects.

00:08:24.055 --> 00:08:26.585
We're going to keep the first two as the same color,

00:08:26.585 --> 00:08:29.795
but change the width and height to be slightly different,

00:08:29.795 --> 00:08:33.335
so 150 for this one, this third one,

00:08:33.335 --> 00:08:37.805
this is going to have a value of FFCA3A,

00:08:37.805 --> 00:08:42.240
width of 320, the height,

00:08:42.240 --> 00:08:44.340
let's change this to be 170.

00:08:44.340 --> 00:08:48.735
The fourth one can have the same color, width of,

00:08:48.735 --> 00:08:50.880
let's go for 310,

00:08:50.880 --> 00:08:53.865
the height of 180.

00:08:53.865 --> 00:09:00.050
Number 5, this is going to have a color of 8AC926.

00:09:00.050 --> 00:09:03.810
The width of 190,

00:09:04.040 --> 00:09:06.855
height of 160 is fine.

00:09:06.855 --> 00:09:10.125
Let's copy this color, and we'll create two of each color.

00:09:10.125 --> 00:09:12.570
The width this time,

00:09:12.570 --> 00:09:16.605
let's go for 200 and then 175.

00:09:16.605 --> 00:09:18.530
Again, this is all random,

00:09:18.530 --> 00:09:21.295
so don't worry if yours is slightly different.

00:09:21.295 --> 00:09:24.640
The next here the color can be 1982C4,

00:09:25.940 --> 00:09:29.565
the width of 380,

00:09:29.565 --> 00:09:32.755
height lets go for 185.

00:09:32.755 --> 00:09:36.650
Copy this color, so these two are the same,

00:09:36.650 --> 00:09:39.500
then a height of 400.

00:09:39.500 --> 00:09:43.945
The width for 400 and a height of 120.

00:09:43.945 --> 00:09:52.680
Then the last pair, let's go for 6A4C93,

00:09:52.680 --> 00:09:56.040
370 and the height of 145,

00:09:56.040 --> 00:10:00.345
copy this color and make the last one the same so it's a paired again.

00:10:00.345 --> 00:10:05.110
A width for 440 and the height of 160 is fine.

00:10:05.110 --> 00:10:06.870
When the user clicks "Play",

00:10:06.870 --> 00:10:09.285
we're going to look through these objects,

00:10:09.285 --> 00:10:10.795
select a random one.

00:10:10.795 --> 00:10:15.815
If the computer selects the same random one for shape 1 and shape 2,

00:10:15.815 --> 00:10:18.325
these would be then be considered a match.

00:10:18.325 --> 00:10:20.930
Finally, we can do a quick console log of

00:10:20.930 --> 00:10:24.980
these objects by selecting them with the array index number.

00:10:24.980 --> 00:10:27.185
Just below our array,

00:10:27.185 --> 00:10:34.230
do a console log and the value of shapes.

00:10:34.230 --> 00:10:39.320
Let's go for number 2. Check this out on the console,

00:10:39.320 --> 00:10:42.350
and there is one of our objects with the color,

00:10:42.350 --> 00:10:43.970
the width, and the height.

00:10:43.970 --> 00:10:49.070
In this video, we've concentrated on using the const and let keywords words.

00:10:49.070 --> 00:10:51.350
If you aren't sure when to use const and let,

00:10:51.350 --> 00:10:54.005
you should always use const where possible,

00:10:54.005 --> 00:10:57.290
and then use let if you need to reassign a value.

00:10:57.290 --> 00:11:01.640
If you make a mistake and use const when it should be let, it's completely fine.

00:11:01.640 --> 00:11:04.315
The console will alert you to change it.

00:11:04.315 --> 00:11:07.100
With our shapes now ready, in the next video,

00:11:07.100 --> 00:11:11.760
we'll look at how to randomly select from this array of objects.
