WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.700
You should now have a grasp of what events are,

00:00:03.700 --> 00:00:05.215
and what we can do with them.

00:00:05.215 --> 00:00:10.195
There is also some additional information which is passed to the event handler,

00:00:10.195 --> 00:00:12.595
which is called the event object.

00:00:12.595 --> 00:00:18.010
This information is all about the events such as: what type of event it was,

00:00:18.010 --> 00:00:19.705
what element was triggered,

00:00:19.705 --> 00:00:22.835
and lots more information which we'll now look at.

00:00:22.835 --> 00:00:26.785
If we go over to our starter files for the events objects,

00:00:26.785 --> 00:00:32.100
inside of here we've got our texts and pretty much the same example from the last video.

00:00:32.100 --> 00:00:35.270
We have a EventListener which once clicked,

00:00:35.270 --> 00:00:39.175
we'll then change the FontSize by running this function here.

00:00:39.175 --> 00:00:42.765
So inside the parentheses for this function,

00:00:42.765 --> 00:00:44.855
which is this section here,

00:00:44.855 --> 00:00:48.065
we can add a parameter just like this.

00:00:48.065 --> 00:00:54.050
This can be any name of your chosen but it's often called event or e for short,

00:00:54.050 --> 00:00:58.715
because it contains the information passed to it about our events.

00:00:58.715 --> 00:01:03.649
You can think of this as a variable which holds this information,

00:01:03.649 --> 00:01:06.595
but what information is passed to it?

00:01:06.595 --> 00:01:12.770
Well, let's go inside our function and do a console log. We can take a look.

00:01:12.770 --> 00:01:20.310
Console.log the value of e. Save this and then open up these in the browser.

00:01:20.310 --> 00:01:25.910
Right-click and Inspect, and then go into our Console.

00:01:25.910 --> 00:01:30.830
With this now open if we trigger this function by clicking on our text,

00:01:30.830 --> 00:01:34.685
we'd now see some information inside the Console.

00:01:34.685 --> 00:01:38.140
Let's open this up and see what it contains.

00:01:38.140 --> 00:01:41.375
if we scroll down, we can see there's a huge amount of

00:01:41.375 --> 00:01:44.815
information which is passed to the event handler.

00:01:44.815 --> 00:01:47.370
Mostly you will never really use,

00:01:47.370 --> 00:01:50.180
but we can see some information about the events.

00:01:50.180 --> 00:01:52.250
We see it's a MouseEvents.

00:01:52.250 --> 00:01:54.665
We see at what position on the screen

00:01:54.665 --> 00:01:58.360
the MouseEvent was triggered with the x and y coordinates.

00:01:58.360 --> 00:02:02.030
We'll take a look at these x and y positions in just a moment.

00:02:02.030 --> 00:02:08.435
For now if we scroll even further down to the target which is just here,

00:02:08.435 --> 00:02:12.455
we can see there's a reference to the object which dispatched the events.

00:02:12.455 --> 00:02:17.005
In our case, it's the p elements with the id of text.

00:02:17.005 --> 00:02:20.630
We can see this better if we go over to the browser.

00:02:20.630 --> 00:02:22.655
Rather than just logging e,

00:02:22.655 --> 00:02:29.300
we can select "e.target" refresh, trigger our events.

00:02:29.300 --> 00:02:31.385
There is our events target,

00:02:31.385 --> 00:02:34.670
which is the p elements with the id of texts.

00:02:34.670 --> 00:02:38.450
We can use any piece of this information inside of our code.

00:02:38.450 --> 00:02:40.700
For example, if we go back to Console,

00:02:40.700 --> 00:02:43.745
login the full events and refresh.

00:02:43.745 --> 00:02:46.760
We mentioned before that we have some mouse positions,

00:02:46.760 --> 00:02:49.335
which is clientX and clientY.

00:02:49.335 --> 00:02:54.100
This is the x and y position of where we clicked on this text.

00:02:54.100 --> 00:02:56.965
We can now go ahead and track the mouse position

00:02:56.965 --> 00:03:00.785
over our elements by using these clients: X and Y.

00:03:00.785 --> 00:03:02.985
Back over to our function.

00:03:02.985 --> 00:03:08.625
Let's changed this document.getElementById from changing the style.

00:03:08.625 --> 00:03:14.065
Instead, we can change the innerHTML of the p elements to

00:03:14.065 --> 00:03:19.630
be equal to the event which you access with e.clientX,

00:03:19.630 --> 00:03:22.554
which is the x-value of the mouse.

00:03:22.554 --> 00:03:27.995
Then let's add a break element to add the y-value on a separate line,

00:03:27.995 --> 00:03:31.995
and we'll access y with e.clientY.

00:03:31.995 --> 00:03:34.815
We add a semicolon at the end.

00:03:34.815 --> 00:03:39.120
If we go down below our function to the EventListener,

00:03:39.120 --> 00:03:41.455
rather than listening for a click events,

00:03:41.455 --> 00:03:45.035
we can listen for the mouseover events.

00:03:45.035 --> 00:03:51.295
This will cause the events to be fired each time the mouse moves over the p elements,

00:03:51.295 --> 00:03:54.785
which will then display the values of x and y.

00:03:54.785 --> 00:03:58.755
Save that and then go to the browser,

00:03:58.755 --> 00:04:01.440
we can in fact close the Console down.

00:04:01.440 --> 00:04:04.615
Then each time we move the mouse over the p elements,

00:04:04.615 --> 00:04:09.035
we can see the x and y coordinates are updated each time.

00:04:09.035 --> 00:04:14.835
This is how we can use the event objects to get some extra information about the event.

00:04:14.835 --> 00:04:19.975
As you can see, there's lots of information passed to us which we have access to.

00:04:19.975 --> 00:04:23.720
Next, we'll look at how we can make our code more readable and

00:04:23.720 --> 00:04:28.200
organized by moving our JavaScript into separate files.
