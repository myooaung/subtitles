WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.770
Welcome back. I hope this challenge was something you were able to complete on your own.

00:00:04.770 --> 00:00:08.640
If not, I'm going to go through one way of doing this.

00:00:08.640 --> 00:00:13.635
Let's go over to our starters and let's scroll down to our script.

00:00:13.635 --> 00:00:15.840
Let's go for number 1 first,

00:00:15.840 --> 00:00:19.035
which is to arrange elements into alphabetical order,

00:00:19.035 --> 00:00:22.515
and then store inside a new variable.

00:00:22.515 --> 00:00:26.640
Let's go down and use this dot sort method here.

00:00:26.640 --> 00:00:33.195
Let's say characters, which is our original name.sort.

00:00:33.195 --> 00:00:36.780
Then we need to store this inside of a new variable,

00:00:36.780 --> 00:00:42.520
so that's assign, the variable name of sort is characters.

00:00:42.620 --> 00:00:48.455
The name is up to you. Let's try this out over in the browser.

00:00:48.455 --> 00:00:54.945
Factors to a console.log for our sorted characters array.

00:00:54.945 --> 00:00:59.530
Refresh. Open up the console.

00:01:00.860 --> 00:01:04.530
Open up the array, and there's our array,

00:01:04.530 --> 00:01:07.710
Which would return now in alphabetical order.

00:01:07.710 --> 00:01:13.150
We can go ahead and remove this console log and then move on to number 2.

00:01:13.150 --> 00:01:19.010
We need to return a new array with each elements having the name prefix.

00:01:19.010 --> 00:01:24.175
We need to add this string of name before the outputs of each value.

00:01:24.175 --> 00:01:27.620
To do this, I'm going to use the map function,

00:01:27.620 --> 00:01:29.285
which we looked at recently.

00:01:29.285 --> 00:01:32.555
Let's access our sorted characters,

00:01:32.555 --> 00:01:37.175
which is our array of our character names in alphabetical order.

00:01:37.175 --> 00:01:39.505
Then we can call.map.

00:01:39.505 --> 00:01:42.060
Then we can pass in a function.

00:01:42.060 --> 00:01:45.935
I'm going to use the ES6 arrow function and

00:01:45.935 --> 00:01:50.690
creates a variable called character for each item inside the array.

00:01:50.690 --> 00:01:53.365
Creates our arrow function,

00:01:53.365 --> 00:01:55.280
and inside of our function,

00:01:55.280 --> 00:01:58.625
and we're going to return, first of all, the string.

00:01:58.625 --> 00:02:00.200
The text of name,

00:02:00.200 --> 00:02:03.965
which you have here, let's say name,

00:02:03.965 --> 00:02:08.315
a colon, then the name of our individual character,

00:02:08.315 --> 00:02:11.220
which is stored inside this variable.

00:02:11.860 --> 00:02:15.290
Okay. Now, because we're returning the string,

00:02:15.290 --> 00:02:17.800
we now need to store this inside the variable.

00:02:17.800 --> 00:02:24.515
So we'll say var and let say sort names and set this to our function.

00:02:24.515 --> 00:02:27.230
So now we have these stored inside a variable.

00:02:27.230 --> 00:02:31.510
We can now all put these the browser using this idea of characters.

00:02:31.510 --> 00:02:37.555
Let's grab this empty div with a document.getElementByID,

00:02:37.555 --> 00:02:41.980
which has the ID of characters.

00:02:42.560 --> 00:02:45.900
Set the dot innerHTML,

00:02:45.900 --> 00:02:48.600
to be equal to this variable here,

00:02:48.600 --> 00:02:56.035
of sortNames, semicolon at the ends.

00:02:56.035 --> 00:02:59.480
Close the console, and there we go.

00:02:59.480 --> 00:03:02.820
Now, there's all our strings of Name: Bugs Bunny,

00:03:02.820 --> 00:03:06.605
Name: Daffy Duck, Jessica Rabbit and Roger Rabbit.

00:03:06.605 --> 00:03:09.155
We now have the name prefix as a string,

00:03:09.155 --> 00:03:12.010
and these are also in alphabetical order.

00:03:12.010 --> 00:03:13.725
If you manage to do this, great.

00:03:13.725 --> 00:03:17.210
If not, just consider it a learning experience.

00:03:17.210 --> 00:03:20.555
Next up, we're going to take a look at another type of loop,

00:03:20.555 --> 00:03:22.860
which is the for loop.
