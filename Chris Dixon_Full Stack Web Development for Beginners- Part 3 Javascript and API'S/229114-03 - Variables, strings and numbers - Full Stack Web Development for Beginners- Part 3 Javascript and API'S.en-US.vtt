WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.260
We're going to kick off this section by looking at some of the most commonly

00:00:04.260 --> 00:00:08.970
used and also some of the simplest things JavaScript has to offer.

00:00:08.970 --> 00:00:12.270
The first concept is called data types.

00:00:12.270 --> 00:00:14.640
Data types are pretty simple.

00:00:14.640 --> 00:00:18.410
As it sounds, is a type of data which we're using.

00:00:18.410 --> 00:00:22.530
To begin, I've opened up the JavaScript starter files on number 1,

00:00:22.530 --> 00:00:25.200
which is variables, strings, and numbers.

00:00:25.200 --> 00:00:27.345
Then open up the index page,

00:00:27.345 --> 00:00:32.280
both in a text editor and also over inside the browser.

00:00:32.280 --> 00:00:36.555
In this video, we're going to look at two of these data types,

00:00:36.555 --> 00:00:38.865
and these are strings and numbers.

00:00:38.865 --> 00:00:40.590
A string is just some text,

00:00:40.590 --> 00:00:42.080
such as a name,

00:00:42.080 --> 00:00:43.670
and the number is,

00:00:43.670 --> 00:00:47.135
as you've guessed, a number which is positive or negative,

00:00:47.135 --> 00:00:49.445
such as a user's age.

00:00:49.445 --> 00:00:52.685
Also, we need a way to store these values too.

00:00:52.685 --> 00:00:55.055
This is where variables come in.

00:00:55.055 --> 00:00:58.100
We're going to go over to Chrome and open up the console,

00:00:58.100 --> 00:01:00.730
would right-click and then Inspect.

00:01:00.730 --> 00:01:03.230
Then if we go to this console tab,

00:01:03.230 --> 00:01:07.955
which is just here, this is a console where we can run some JavaScript.

00:01:07.955 --> 00:01:10.880
As always, if you're using a different browser,

00:01:10.880 --> 00:01:13.625
all major browsers have a console tool.

00:01:13.625 --> 00:01:16.655
You can usually find this console from the menu,

00:01:16.655 --> 00:01:19.505
often under the developer tools.

00:01:19.505 --> 00:01:25.800
We've already seen the Elements tab and also took a brief look at the Network tab too.

00:01:25.800 --> 00:01:28.595
This time now we are going to be using this console.

00:01:28.595 --> 00:01:32.780
To begin, we create a variable by using the var keyword.

00:01:32.780 --> 00:01:36.245
Let's just scroll in so we can see this a little bit better.

00:01:36.245 --> 00:01:38.675
Type in the var keyword.

00:01:38.675 --> 00:01:42.365
A variable is simply a place to store our data,

00:01:42.365 --> 00:01:44.825
such as a string or a number.

00:01:44.825 --> 00:01:47.345
We then give this variable a name.

00:01:47.345 --> 00:01:49.625
If we wanted to store a user's name,

00:01:49.625 --> 00:01:52.625
we could simply store the name like this.

00:01:52.625 --> 00:01:56.370
So var name equals "Chris".

00:01:56.390 --> 00:02:02.180
This equal symbol assign this value to this variable name of Chris.

00:02:02.180 --> 00:02:04.860
Then we'll end this with a semicolon.

00:02:04.860 --> 00:02:07.645
Strings needs to be surrounded in quotes.

00:02:07.645 --> 00:02:09.850
This can be either single quotes,

00:02:09.850 --> 00:02:11.575
which is just like this,

00:02:11.575 --> 00:02:15.370
or double quotes like we've used here then hit "Enter".

00:02:15.370 --> 00:02:19.150
To call this in the console would just type the name of our variable.

00:02:19.150 --> 00:02:20.590
So if we type in name,

00:02:20.590 --> 00:02:23.685
we then get returned the value of Chris.

00:02:23.685 --> 00:02:26.485
We see some arrows on the left-hand side.

00:02:26.485 --> 00:02:29.320
The rights arrow is the inputs, which you put in.

00:02:29.320 --> 00:02:34.785
So we've added the name of Chris and then return back towards we have the value of Chris.

00:02:34.785 --> 00:02:37.450
If we wanted to change the value of this variable,

00:02:37.450 --> 00:02:40.000
we can do what is called reassignments,

00:02:40.000 --> 00:02:42.535
we'll just call it a variable name.

00:02:42.535 --> 00:02:49.655
Just like this without the var keyword and set it to a new value with equals symbol.

00:02:49.655 --> 00:02:54.130
We can add a new name such as Chris Dixon,

00:02:54.280 --> 00:02:58.565
and then a semicolon at the end and hit "Enter".

00:02:58.565 --> 00:03:02.615
Now we can return back towards the value of Chris Dixon.

00:03:02.615 --> 00:03:04.880
Again, if you just call name,

00:03:04.880 --> 00:03:08.510
hit "Enter", we'll get is finally returned once more.

00:03:08.510 --> 00:03:11.470
We can create as many variables as we need to,

00:03:11.470 --> 00:03:13.815
such as our age too.

00:03:13.815 --> 00:03:16.170
Again, using the var keyword,

00:03:16.170 --> 00:03:21.230
we set the name of age and set this to a value of 34.

00:03:21.230 --> 00:03:22.850
When working with numbers,

00:03:22.850 --> 00:03:27.145
we don't surround the value in quotes just like we did with the string.

00:03:27.145 --> 00:03:31.490
We just simply type the number like this then hit "Enter".

00:03:31.490 --> 00:03:34.955
If we call our age variable by typing in age,

00:03:34.955 --> 00:03:38.470
we then get returned the value of 34.

00:03:38.470 --> 00:03:41.220
Sometimes you see undefined too,

00:03:41.220 --> 00:03:42.815
just like we've seen here,

00:03:42.815 --> 00:03:45.505
such as when we set a variable.

00:03:45.505 --> 00:03:48.030
This is just because nothing is returned.

00:03:48.030 --> 00:03:52.910
In this case, we are just simply setting or assigning this variable.

00:03:52.910 --> 00:03:56.225
We'll have our name and age variable declared.

00:03:56.225 --> 00:03:58.360
But how can we now use this?

00:03:58.360 --> 00:04:02.395
Well, we could do something like adding them to a sentence.

00:04:02.395 --> 00:04:06.425
If we declare a new variable called joined,

00:04:06.425 --> 00:04:09.485
we can set this equal to a string.

00:04:09.485 --> 00:04:15.535
So "My name is" then add a space.

00:04:15.535 --> 00:04:18.545
Then we can add a plus symbol to add.

00:04:18.545 --> 00:04:20.120
If it's to the end of this,

00:04:20.120 --> 00:04:23.330
I'm going to add our variable of name.

00:04:23.330 --> 00:04:27.645
So this will be "my name is" and then Chris.

00:04:27.645 --> 00:04:29.690
Then add a plus symbol.

00:04:29.690 --> 00:04:31.895
To add a second string,

00:04:31.895 --> 00:04:37.685
we can add "and I am" then a space,

00:04:37.685 --> 00:04:41.605
and then add our age variable onto the end.

00:04:41.605 --> 00:04:43.680
So this should print out,

00:04:43.680 --> 00:04:45.135
"My name is" Chris,

00:04:45.135 --> 00:04:47.265
"and I am" 34.

00:04:47.265 --> 00:04:50.870
Joining strings and variables like this with the plus symbol is

00:04:50.870 --> 00:04:55.015
also called concatenation or concat for short.

00:04:55.015 --> 00:04:58.925
But this is just a fancy term for joining these together.

00:04:58.925 --> 00:05:03.095
Then hit "Enter" and we can type in joined,

00:05:03.095 --> 00:05:04.595
which are variable name.

00:05:04.595 --> 00:05:07.360
Now there's our string, which we expected.

00:05:07.360 --> 00:05:12.785
JavaScript is also the default scripting language for all major browsers.

00:05:12.785 --> 00:05:16.280
So this is why all works fine inside the console.

00:05:16.280 --> 00:05:22.165
But more realistically, we want to add to the code over into our project.

00:05:22.165 --> 00:05:24.770
If we go over to our starter files,

00:05:24.770 --> 00:05:26.735
again, in our first one,

00:05:26.735 --> 00:05:28.730
which is variables, strings,

00:05:28.730 --> 00:05:32.575
and numbers, we can get to work out in this inside here.

00:05:32.575 --> 00:05:35.835
You don't need to use the starter files if you prefer.

00:05:35.835 --> 00:05:40.395
But would you say was typing all the html structure we need each time.

00:05:40.395 --> 00:05:43.600
It will also be handy for future reference too.

00:05:43.600 --> 00:05:47.505
JavaScript can be added even the head or the body section.

00:05:47.505 --> 00:05:50.495
It's often preferred to add it to the bottom

00:05:50.495 --> 00:05:54.275
of the body section just before the closing tag.

00:05:54.275 --> 00:05:59.755
This means you below did last and not block the rest of the html from loading.

00:05:59.755 --> 00:06:03.485
The JavaScript is placed inside of script tags.

00:06:03.485 --> 00:06:07.145
Let's open up the opening and closing script tag.

00:06:07.145 --> 00:06:10.355
Then we can go ahead with adding our code inside,

00:06:10.355 --> 00:06:12.880
just like we did inside the console.

00:06:12.880 --> 00:06:14.525
So just like we did before,

00:06:14.525 --> 00:06:18.710
we can add our variable of name equals Chris.

00:06:18.710 --> 00:06:20.330
To display this in the console,

00:06:20.330 --> 00:06:22.830
we can do a console.log.

00:06:22.900 --> 00:06:26.995
Then inside the bracket we can add our variable name.

00:06:26.995 --> 00:06:31.205
So save that, clear the console and reload.

00:06:31.205 --> 00:06:34.110
There's our value of Chris.

00:06:34.220 --> 00:06:39.470
We can then reassign this name just like we did inside the console.

00:06:39.470 --> 00:06:46.730
This time without the variable and then change this to be my full name.

00:06:46.730 --> 00:06:50.594
Again, with the console log the same name variable,

00:06:50.594 --> 00:06:54.090
reload, and there's our reassign name.

00:06:54.090 --> 00:06:56.130
Let's do the age next.

00:06:56.130 --> 00:07:01.210
So var age equals 34.

00:07:01.310 --> 00:07:07.375
We can also do our same string that we did inside the console of joined.

00:07:07.375 --> 00:07:13.995
We can set this equal to "My name is" add a space.

00:07:13.995 --> 00:07:16.965
Then we can add our variable name,

00:07:16.965 --> 00:07:19.770
so this will be "My name is Chris".

00:07:19.770 --> 00:07:26.100
Then the string of "and I am" space.

00:07:26.100 --> 00:07:28.045
Then add on the end,

00:07:28.045 --> 00:07:32.800
the age variable with the semicolon at the end.

00:07:32.800 --> 00:07:39.200
We can console.log our new string of joined.

00:07:39.200 --> 00:07:41.475
Over to the console,

00:07:41.475 --> 00:07:43.770
reload, and now there we go,

00:07:43.770 --> 00:07:49.010
there's our string, which includes our variables of our name and age.

00:07:49.010 --> 00:07:54.440
We said earlier that we can use double or single quotes when working with strings.

00:07:54.440 --> 00:07:57.585
There is a case when we need to be careful.

00:07:57.585 --> 00:08:00.675
If we change our quotes to be single,

00:08:00.675 --> 00:08:07.590
so it's single at the start and then the end of this string,

00:08:07.590 --> 00:08:12.170
and then also replace these two here.

00:08:12.330 --> 00:08:15.260
So now all the strings are single,

00:08:15.260 --> 00:08:17.385
save and then refresh.

00:08:17.385 --> 00:08:20.040
We see this still works perfectly fine.

00:08:20.040 --> 00:08:25.045
The problem arises when we want to use one of the same quotes in our text.

00:08:25.045 --> 00:08:29.060
If you go for, "I'm", instead of "I am",

00:08:29.060 --> 00:08:35.230
just like that, we can see that we have a blue letter here to indicate a problem.

00:08:35.230 --> 00:08:38.590
If we save and then refresh,

00:08:38.590 --> 00:08:41.510
we'll get a syntax error.

00:08:41.510 --> 00:08:44.890
This should because our quotations are no longer in

00:08:44.890 --> 00:08:47.890
pairs and things are a little bit mixed up.

00:08:47.890 --> 00:08:50.440
Fixing this is pretty straight forward.

00:08:50.440 --> 00:08:55.100
All we need to do is surround the section in the opposite type of quotes.

00:08:55.100 --> 00:08:59.225
So here, rather than having the free single quotes,

00:08:59.225 --> 00:09:05.465
let's change these around the ones to be double. Just like that.

00:09:05.465 --> 00:09:08.140
We could even just change this section here,

00:09:08.140 --> 00:09:11.420
or we can change all of these single ones to be doubles,

00:09:11.420 --> 00:09:13.595
except the one that we want here.

00:09:13.595 --> 00:09:15.325
Either way it will work fine.

00:09:15.325 --> 00:09:17.125
Save and then reload.

00:09:17.125 --> 00:09:21.280
Now our string work is perfectly fine with the apostrophe here.

00:09:21.280 --> 00:09:25.010
So this is just something to be aware of when using quotations.

00:09:25.010 --> 00:09:27.905
Now we'll move on to the next video where we'll take a look

00:09:27.905 --> 00:09:31.650
at JavaScript arithmetic and operators.
