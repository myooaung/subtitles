WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.100
In the next few videos,

00:00:02.100 --> 00:00:04.365
we're going to be focusing on looping.

00:00:04.365 --> 00:00:07.590
Looping makes repeating tasks really easy.

00:00:07.590 --> 00:00:11.175
In this video, we'll be looking at the for each loop.

00:00:11.175 --> 00:00:15.525
The forEach loop will run a function for each item in the array.

00:00:15.525 --> 00:00:18.135
First, let's go over to our starter files,

00:00:18.135 --> 00:00:20.625
so let's head over to number 23.

00:00:20.625 --> 00:00:24.360
Looping through arrays closes down.

00:00:24.360 --> 00:00:30.180
Here we have a basic starter with our empty div and then our animals' array.

00:00:30.180 --> 00:00:33.510
First of all, let's take a look at the problem,

00:00:33.510 --> 00:00:37.080
if we wanted to do anything with these array items,

00:00:37.080 --> 00:00:40.020
we would need to select each item individually.

00:00:40.020 --> 00:00:43.060
Let's do a console log,

00:00:43.280 --> 00:00:47.670
let's log to the console the value of animals.

00:00:48.070 --> 00:00:53.840
I was square brackets to select our index number of zero if we wanted the cats.

00:00:53.840 --> 00:00:57.239
Then let's say toUppercase,

00:00:58.300 --> 00:01:06.140
followed by the brackets and a semicolon at the end [inaudible] is a JavaScript method

00:01:06.140 --> 00:01:13.885
to transform a string to uppercase or capital letters to lowercase is also available to.

00:01:13.885 --> 00:01:18.200
Now if we wanted to select our second item two,

00:01:18.200 --> 00:01:21.905
we'll copy this and paste satisfy the worn.

00:01:21.905 --> 00:01:25.840
Then we'll need to do this forEach item inside the array.

00:01:25.840 --> 00:01:30.380
This would take up a lot of time and a lot of repetitive code.

00:01:30.380 --> 00:01:35.610
Let's go to the browser and into the console refresh.

00:01:35.610 --> 00:01:38.700
The Nasa will uppercase cat and dog so,

00:01:38.700 --> 00:01:42.995
of course this would take a lot of repetition to do this for our full array.

00:01:42.995 --> 00:01:46.700
Imagine if we had hundreds of values in the array that we need

00:01:46.700 --> 00:01:50.620
to be a lot of repetitive code and this is not great.

00:01:50.620 --> 00:01:54.050
This is where the for each loop comes in.

00:01:54.050 --> 00:01:58.235
ForEach, we'll run a function forEach array element,

00:01:58.235 --> 00:02:00.745
to say it was a lot of repetition.

00:02:00.745 --> 00:02:04.970
Let's go over to our code remove the console logs,

00:02:04.970 --> 00:02:06.695
and see how this looks.

00:02:06.695 --> 00:02:09.065
First we select our animals array,

00:02:09.065 --> 00:02:11.615
and then we use dot forEach.

00:02:11.615 --> 00:02:18.200
This is also communicates with a capital E. Bracket semicolon will then pass in

00:02:18.200 --> 00:02:20.030
a function which you want to run

00:02:20.030 --> 00:02:25.160
forEach array element inside of these brackets or parentheses.

00:02:25.160 --> 00:02:28.099
Let's create a standard function,

00:02:28.099 --> 00:02:32.705
the brackets and then a set of curly braces.

00:02:32.705 --> 00:02:39.140
It's enter and then inside of these curly braces we can run our function code.

00:02:39.140 --> 00:02:41.900
Would then pass in the name of our choice,

00:02:41.900 --> 00:02:45.125
which you want to give to each individual array elements.

00:02:45.125 --> 00:02:48.440
Let's call each individual item simply

00:02:48.440 --> 00:02:52.730
animal now if we want to do something with each array value,

00:02:52.730 --> 00:02:54.920
we can use this animal variable.

00:02:54.920 --> 00:02:58.970
Let's say alert our animal,

00:02:58.970 --> 00:03:03.385
semicolon refresh the browser.

00:03:03.385 --> 00:03:07.755
There's cats, dog, it's okay again,

00:03:07.755 --> 00:03:12.940
tiger and this is now looping through each item in the array.

00:03:12.940 --> 00:03:17.000
This animal variable can also be used in any way.

00:03:17.000 --> 00:03:19.325
We could add some extra text.

00:03:19.325 --> 00:03:24.395
Let's say a string of animal,

00:03:24.395 --> 00:03:30.950
animal type closest string and then add our variable onto the end.

00:03:30.950 --> 00:03:35.150
Refresh the browser and now see animal type of cat,

00:03:35.150 --> 00:03:39.100
dog, tiger, giraffe and lion.

00:03:39.100 --> 00:03:42.260
Or even going back to our uppercase example,

00:03:42.260 --> 00:03:48.630
we could use the animal variable and then say animal dot toUppercase.

00:03:49.690 --> 00:03:58.930
Brackets afterwards refresh now see our uppercase values inside the alerts.

00:03:58.930 --> 00:04:04.760
We can push all these new items as uppercase to a new array two.

00:04:04.760 --> 00:04:08.615
First, let's create a new empty array so just stuffed

00:04:08.615 --> 00:04:14.110
animals that say var upperCaseNames.

00:04:15.350 --> 00:04:18.470
We don't need to add any values we can simply just

00:04:18.470 --> 00:04:21.725
add the square brackets to create an empty array.

00:04:21.725 --> 00:04:24.160
We know how to push items to an array,

00:04:24.160 --> 00:04:26.000
we use the dot push method,

00:04:26.000 --> 00:04:28.190
which we looked at in the last video.

00:04:28.190 --> 00:04:30.365
Down inside our loop,

00:04:30.365 --> 00:04:31.865
instead of our alert,

00:04:31.865 --> 00:04:34.145
we can say upperCaseNames,

00:04:34.145 --> 00:04:38.930
which is our empty array just here. They'll push.

00:04:38.930 --> 00:04:40.745
Then inside the bracket,

00:04:40.745 --> 00:04:45.445
the animal wants push installed inside this animal variable.

00:04:45.445 --> 00:04:55.470
Animal, and let's set these to be uppercase so toUpperCase the parentheses.

00:04:55.470 --> 00:04:58.945
This time rather than outputs an east the console.

00:04:58.945 --> 00:05:01.755
Let's do our familiar getElementById,

00:05:01.755 --> 00:05:04.035
which is this animal's div here.

00:05:04.035 --> 00:05:07.390
Then we can push our new array to this div.

00:05:07.390 --> 00:05:11.950
Let's say document dot getsElementsById.

00:05:11.950 --> 00:05:22.810
All animal's ID, we can set the dot HTML to be equal to our new array of upperCaseNames.

00:05:22.860 --> 00:05:29.090
Scroll across what a semicolon at the end of the browser.

00:05:29.090 --> 00:05:32.865
There's a new array of uppercase values.

00:05:32.865 --> 00:05:36.310
Another feature of forEach is the ability to

00:05:36.310 --> 00:05:40.745
access each item by deposition or the index number.

00:05:40.745 --> 00:05:45.860
First, we add a second variable name of our choice inside the function.

00:05:45.860 --> 00:05:50.625
I want to call mine index so separated by comma,

00:05:50.625 --> 00:05:53.025
the variable name of index.

00:05:53.025 --> 00:05:59.030
Then we can use this index in side of our function so let's output the index before

00:05:59.030 --> 00:06:05.430
the animal name and join us on save and then refresh.

00:06:05.430 --> 00:06:09.605
Now we have the index position as well as the value so zero,

00:06:09.605 --> 00:06:12.095
one, two, three, and four.

00:06:12.095 --> 00:06:16.000
We can construct this new array item in any way we want.

00:06:16.000 --> 00:06:21.005
For example, if you wanted to add a space between the index and animal name,

00:06:21.005 --> 00:06:22.915
we can do that with a string,

00:06:22.915 --> 00:06:29.510
let's say index plus and you could have space or even a dash.

00:06:29.510 --> 00:06:36.000
Then also joined on our animal on the end refresh and there we go.

00:06:36.000 --> 00:06:40.895
Finally, index numbers bigger than zero so if we wanted this to start a one,

00:06:40.895 --> 00:06:44.495
we could just simply add plus one onto the end,

00:06:44.495 --> 00:06:48.550
let's say index plus one.

00:06:49.280 --> 00:06:53.480
There we go so now our index number starts from one,

00:06:53.480 --> 00:06:57.395
which is probably more realistic when outputting to the user.

00:06:57.395 --> 00:06:59.720
Now let's move on to look at a novel way of

00:06:59.720 --> 00:07:03.480
looping through arrays and this is called map.
