WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.460
Welcome back guys. Now we're going to look at

00:00:02.460 --> 00:00:05.415
something which is really useful in JavaScript.

00:00:05.415 --> 00:00:08.100
This is regular expressions.

00:00:08.100 --> 00:00:12.165
Regular expressions, often shortened to rejects,

00:00:12.165 --> 00:00:17.715
is a way to find a pattern or combination of characters inside of a text string.

00:00:17.715 --> 00:00:20.865
For example, if we had a paragraph of text,

00:00:20.865 --> 00:00:26.730
we could say we wanted to search for double spaces and reduce them to be just one space.

00:00:26.730 --> 00:00:29.570
All we could search for every word inside of

00:00:29.570 --> 00:00:34.645
a sentence and then change the first character to be a capital letter.

00:00:34.645 --> 00:00:37.680
Head over to these starter files.

00:00:37.680 --> 00:00:39.470
Then inside the sidebar,

00:00:39.470 --> 00:00:41.225
let's go down to number 32,

00:00:41.225 --> 00:00:45.230
which is introduction to regular expressions.

00:00:45.230 --> 00:00:50.435
Inside here we have some simple lorem ipsum start text,

00:00:50.435 --> 00:00:53.465
which you just stored inside the P elements.

00:00:53.465 --> 00:00:56.950
Open up this example inside the browser.

00:00:56.950 --> 00:00:59.870
First we can grab this text elements just

00:00:59.870 --> 00:01:04.580
here and store it inside of a variable to begin working.

00:01:04.580 --> 00:01:06.830
Down to our scripts,

00:01:06.830 --> 00:01:14.895
let's start with the let text equals document dot Query Selector.

00:01:14.895 --> 00:01:17.625
We want to grab our P elements,

00:01:17.625 --> 00:01:19.515
which stores our text.

00:01:19.515 --> 00:01:21.870
At this is seen as a string,

00:01:21.870 --> 00:01:25.990
and then we want to grab the inner HTML.

00:01:26.090 --> 00:01:29.780
We can start with the basics and such as

00:01:29.780 --> 00:01:34.645
text to find the location of a particular word as a string.

00:01:34.645 --> 00:01:39.800
Just below this, this is a pretty simple one to search for text.

00:01:39.800 --> 00:01:41.920
All we need to do is say

00:01:41.920 --> 00:01:45.200
text dot search and then

00:01:45.200 --> 00:01:49.160
inside the bracket we can add a string which you want to search for.

00:01:49.160 --> 00:01:53.135
Let's search for any of these words inside of a string.

00:01:53.135 --> 00:01:58.310
Let's go for, "amet" add this in the quotes,

00:01:58.310 --> 00:02:03.990
A-M-E-T. Now I'll put this to the console.

00:02:03.990 --> 00:02:07.950
First let's store this results inside the variable.

00:02:07.950 --> 00:02:13.605
Let new text equal to our search

00:02:13.605 --> 00:02:21.570
and then we could do a console log for the value of new text.

00:02:22.400 --> 00:02:26.390
Give that a save and then over to our example,

00:02:26.390 --> 00:02:32.595
open up the console and we get the value of 23.

00:02:32.595 --> 00:02:39.910
This is because the word which we searched for in our text string begins at position 23,

00:02:39.910 --> 00:02:45.015
which basically means this is 23 positions from the start.

00:02:45.015 --> 00:02:49.260
Let's comment out this example and take a look at a new one.

00:02:49.420 --> 00:02:52.910
We'll remove this console log will cut this

00:02:52.910 --> 00:02:56.510
out and actually just paste it down on the bottom.

00:02:56.510 --> 00:02:59.755
We can use it with all the examples, above.

00:02:59.755 --> 00:03:04.145
Now we've looked at finding a string inside of our text.

00:03:04.145 --> 00:03:05.690
Once we find a match,

00:03:05.690 --> 00:03:08.525
we often want to replace it with something else.

00:03:08.525 --> 00:03:11.455
For this we have the replace method.

00:03:11.455 --> 00:03:15.470
Down on the replace text, we will string.

00:03:15.470 --> 00:03:19.280
Let's create the same example from before so

00:03:19.280 --> 00:03:22.815
that new text but this time rather than doing it,

00:03:22.815 --> 00:03:28.570
text dot search, we can do text dot replace.

00:03:30.050 --> 00:03:33.359
Replace takes in two different values,

00:03:33.359 --> 00:03:36.530
the first one we're going to add a string to search for.

00:03:36.530 --> 00:03:40.100
I'm going to search for lorem which is the first word inside

00:03:40.100 --> 00:03:44.030
here and then as a second value separated by a comma,

00:03:44.030 --> 00:03:46.830
we can add a word which you want to replace it with.

00:03:46.830 --> 00:03:49.960
Let's go for any word of your choosing.

00:03:49.960 --> 00:03:52.150
What's our chips number?

00:03:52.150 --> 00:03:56.215
We also have our console log of new text down at the bottom.

00:03:56.215 --> 00:04:00.390
If we reload the browser and take a look,

00:04:00.390 --> 00:04:05.475
we now see our first word of lorem has been replaced with chips.

00:04:05.475 --> 00:04:10.165
This works great, but this is because we've added the word lorem.

00:04:10.165 --> 00:04:15.145
Just here, we have a capital L. It matches our string.

00:04:15.145 --> 00:04:19.030
If we could changes this to a lowercase, it wouldn't work.

00:04:19.030 --> 00:04:23.055
Change it to lowercase L, refresh.

00:04:23.055 --> 00:04:26.685
I will say the word lorem hasn't been replaced this time.

00:04:26.685 --> 00:04:30.580
This is because this replace is case sensitive,

00:04:30.580 --> 00:04:33.310
instead if we want to perform a search,

00:04:33.310 --> 00:04:35.485
which is case insensitive,

00:04:35.485 --> 00:04:40.460
we can add our pattern to search for inside of the forward slashes.

00:04:40.460 --> 00:04:42.975
Back over to our code.

00:04:42.975 --> 00:04:45.675
Let's copy this line from before.

00:04:45.675 --> 00:04:49.825
We can leave this example in by commenting this out.

00:04:49.825 --> 00:04:55.615
We can paste this back in underneath this replace text with a regular expression.

00:04:55.615 --> 00:04:58.675
Rather than having a text string like this,

00:04:58.675 --> 00:05:03.785
we're going to create a regular expression inside of two forward slashes.

00:05:03.785 --> 00:05:10.560
Let's search for our word of lorem then we can add to the I modifier just afterwards.

00:05:10.560 --> 00:05:13.184
If we save this and then refresh,

00:05:13.184 --> 00:05:16.790
we see now the word lorem is now replaced with chips,

00:05:16.790 --> 00:05:19.465
even though the L is lowercase.

00:05:19.465 --> 00:05:23.975
The word lorem appears only once inside of this text string,

00:05:23.975 --> 00:05:27.905
but if you wanted to search for something which appears multiple times,

00:05:27.905 --> 00:05:30.880
such as a simple E character.

00:05:30.880 --> 00:05:34.265
Let's go ahead and take a look at this,

00:05:34.265 --> 00:05:37.370
if we copy this example and then comment this out,

00:05:37.370 --> 00:05:41.095
and then paste this in and below the I modify section.

00:05:41.095 --> 00:05:43.780
We can see here that the I modifier,

00:05:43.780 --> 00:05:46.610
we'll do a search which is in case-sensitive,

00:05:46.610 --> 00:05:51.445
but you will only replace the first match inside of our string.

00:05:51.445 --> 00:05:54.045
We change lorem to be E,

00:05:54.045 --> 00:06:01.220
there is multiple occurrences and then replaces with a capital A. Reload the browser.

00:06:01.220 --> 00:06:05.255
Now we see that only the first occurrence of an E is replaced.

00:06:05.255 --> 00:06:08.740
There is no more capital A's inside of our string.

00:06:08.740 --> 00:06:11.510
However, if we want to replace all occurrences,

00:06:11.510 --> 00:06:14.300
we can use the G modifier this time.

00:06:14.300 --> 00:06:16.880
Let's copy this line of code here,

00:06:16.880 --> 00:06:21.595
comment this out, and then paste this under the G modifier.

00:06:21.595 --> 00:06:27.380
All we need to do is change the I to be a G, reload the browser.

00:06:27.380 --> 00:06:33.740
Now we see that all occurrences of E has been replaced with a capital A. G stands for

00:06:33.740 --> 00:06:36.500
Global and will find replace all matches in

00:06:36.500 --> 00:06:40.265
our text string rather than stopping after the first one.

00:06:40.265 --> 00:06:42.610
Just like when we use the I modifier.

00:06:42.610 --> 00:06:48.860
It will only searching for one letter but if we want to match to multiple letters,

00:06:48.860 --> 00:06:52.105
we can add these inside of square brackets.

00:06:52.105 --> 00:06:54.135
Let's take a look at this.

00:06:54.135 --> 00:06:57.695
If we copy this line here and comment this out.

00:06:57.695 --> 00:07:01.265
Let's leave this in the starter files for future reference,

00:07:01.265 --> 00:07:07.010
paste this in under the square bracket section and then inside of all forward slashes,

00:07:07.010 --> 00:07:09.125
we can add some square brackets.

00:07:09.125 --> 00:07:10.700
Inside these square brackets,

00:07:10.700 --> 00:07:12.410
if we search for H, G,

00:07:12.410 --> 00:07:14.970
or S. Let's make

00:07:14.970 --> 00:07:21.210
these lower case with the G modifier and then let's add something which stands out.

00:07:21.210 --> 00:07:27.040
Let's add some stars and in capitals will say "REPLACED".

00:07:27.110 --> 00:07:29.450
When we search through the string,

00:07:29.450 --> 00:07:31.280
the first occurrence of H,

00:07:31.280 --> 00:07:35.065
G, or S will then be replaced with the string here.

00:07:35.065 --> 00:07:38.660
Save this, and then reload and scrolling up,

00:07:38.660 --> 00:07:43.060
we can see the first occurrence has been replaced with our string here.

00:07:43.060 --> 00:07:46.365
This also stops after the first match.

00:07:46.365 --> 00:07:49.730
If we want to replace all occurrences of H, G,

00:07:49.730 --> 00:07:53.740
or S. We could again add the G modifier.

00:07:53.740 --> 00:07:56.045
Let's copy this line here,

00:07:56.045 --> 00:08:02.015
comment this out, and then add this under the G modify section.

00:08:02.015 --> 00:08:06.035
After our regular expression let's add he G modifier,

00:08:06.035 --> 00:08:11.090
save this and we can see the all matches have now been replaced.

00:08:11.090 --> 00:08:14.900
These square brackets also works for numbers too.

00:08:14.900 --> 00:08:18.860
Let's copy this, comment this out and add this

00:08:18.860 --> 00:08:22.640
just above our console log inside the square brackets,

00:08:22.640 --> 00:08:24.785
instead of searching for our letters,

00:08:24.785 --> 00:08:28.790
let's go for the numbers three through six.

00:08:28.790 --> 00:08:32.840
This will find all numbers from three through to six,

00:08:32.840 --> 00:08:38.025
remove the G, and then replace it with this text string here.

00:08:38.025 --> 00:08:42.245
For this to work, we need to add a number into our text above.

00:08:42.245 --> 00:08:48.680
Let's go for number five add this in, reload.

00:08:48.680 --> 00:08:51.470
Let's try and look for it, there we go.

00:08:51.470 --> 00:08:56.215
There's our texts of replaced in a position of our number five.

00:08:56.215 --> 00:09:01.495
This is a first look at using regular expressions to match a pattern.

00:09:01.495 --> 00:09:05.460
If we Google Mozilla regular expressions.

00:09:14.960 --> 00:09:19.670
You're about, find a lot more examples on this regular expression section.

00:09:19.670 --> 00:09:24.560
We click on this and then go to the Mozilla documentation.

00:09:24.560 --> 00:09:27.545
We can see there's lots of different ways to create puns.

00:09:27.545 --> 00:09:32.300
If we scroll down, some of these regular expressions are quite complex tool.

00:09:32.300 --> 00:09:37.470
I'm not going to go through all of these since most asked specific use cases.

00:09:37.470 --> 00:09:42.665
You can find almost any way it match a pattern using regular expressions.

00:09:42.665 --> 00:09:46.310
In the next video, we're going to build a small project using

00:09:46.310 --> 00:09:52.200
regular expressions to take the user's inputs and perform a find and replace.
