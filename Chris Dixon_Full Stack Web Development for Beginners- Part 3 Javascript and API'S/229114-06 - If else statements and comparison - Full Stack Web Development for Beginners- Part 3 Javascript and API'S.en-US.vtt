WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.145
In the last video, we mentioned Boolean values which are true or false.

00:00:05.145 --> 00:00:10.890
We also need a way to actually perform an action based on if a value is true or false.

00:00:10.890 --> 00:00:13.725
To do this, we have conditional statements.

00:00:13.725 --> 00:00:17.670
For example, if a player's health is zero or less,

00:00:17.670 --> 00:00:19.560
the player will lose life.

00:00:19.560 --> 00:00:21.975
If a player collect 100 coins,

00:00:21.975 --> 00:00:24.060
then we can add an extra life.

00:00:24.060 --> 00:00:26.445
Or if the current time is the morning,

00:00:26.445 --> 00:00:28.920
we could add a good morning message.

00:00:28.920 --> 00:00:30.615
If it was in the afternoon,

00:00:30.615 --> 00:00:33.495
we could change the message to be Good afternoon.

00:00:33.495 --> 00:00:36.690
Basically, these conditional statements allow us to

00:00:36.690 --> 00:00:41.650
decide what we want our code to do under different circumstances.

00:00:41.650 --> 00:00:45.875
A common type of conditional statement is If else.

00:00:45.875 --> 00:00:48.470
Let's begin with the If section.

00:00:48.470 --> 00:00:53.420
This basically says if something is true, then run this code.

00:00:53.420 --> 00:00:56.175
I want to start a file.

00:00:56.175 --> 00:00:58.260
Let's open up number 4,

00:00:58.260 --> 00:01:01.035
which is if else and comparison.

00:01:01.035 --> 00:01:05.460
Then I'm going to open this up inside the browser.

00:01:08.330 --> 00:01:11.045
Then down to our script section,

00:01:11.045 --> 00:01:13.580
we can begin to create an if statement.

00:01:13.580 --> 00:01:18.730
We add the If keyword followed by the brackets or parentheses.

00:01:18.730 --> 00:01:21.855
Then we add a set of curly braces,

00:01:21.855 --> 00:01:24.845
where we can add our code that we want to run.

00:01:24.845 --> 00:01:28.760
Let's say we want to add an alert for our message.

00:01:28.760 --> 00:01:32.800
We need to add a condition where one is alert to run.

00:01:32.800 --> 00:01:36.120
Inside these brackets here we add our condition.

00:01:36.120 --> 00:01:39.705
We say if 10 is greater than 5,

00:01:39.705 --> 00:01:41.625
then run this alert.

00:01:41.625 --> 00:01:47.670
Lets add some texts saying 10 is greater than 5.

00:01:47.670 --> 00:01:51.420
If this is true, this alert will be run.

00:01:51.420 --> 00:01:52.940
If this wasn't true,

00:01:52.940 --> 00:01:55.795
then we wouldn't get anything happening at all.

00:01:55.795 --> 00:02:03.625
Save that, reload and there's our alert saying 10 is greater than 5.

00:02:03.625 --> 00:02:08.195
This greater than symbol is a comparison operator.

00:02:08.195 --> 00:02:09.965
There is lots more we can use,

00:02:09.965 --> 00:02:12.395
such as the less than symbol.

00:02:12.395 --> 00:02:15.695
Now 10 is not less than 5,

00:02:15.695 --> 00:02:17.300
so this will be false.

00:02:17.300 --> 00:02:20.150
Meaning if we go to the browser and refresh,

00:02:20.150 --> 00:02:21.950
the statement is now false,

00:02:21.950 --> 00:02:24.095
so we won't see the alert.

00:02:24.095 --> 00:02:26.600
This is because as we mentioned before,

00:02:26.600 --> 00:02:29.660
the code will only run if the condition is true.

00:02:29.660 --> 00:02:32.480
We can also combine these greater than and less

00:02:32.480 --> 00:02:35.715
than symbols with the equals operator too.

00:02:35.715 --> 00:02:39.575
For example, if we change this to be 10.

00:02:39.575 --> 00:02:45.205
If we were to say if 10 is greater than 10, then do this alert.

00:02:45.205 --> 00:02:50.490
Refresh. We don't see the alert because 10 is not greater than 10.

00:02:50.490 --> 00:02:55.795
However, if we want to run a check to see if 10 is equal to or greater than,

00:02:55.795 --> 00:02:58.640
we can combine them just like this.

00:02:58.640 --> 00:03:01.100
Greater than or equal to.

00:03:01.100 --> 00:03:04.085
Now our condition should now be true.

00:03:04.085 --> 00:03:06.370
Then we see the alert.

00:03:06.370 --> 00:03:10.815
This also works with less than too, as you would expect.

00:03:10.815 --> 00:03:14.045
If 10 is less than or equal to,

00:03:14.045 --> 00:03:16.585
then run the alert.

00:03:16.585 --> 00:03:20.030
This may be confusing at first because we've already used

00:03:20.030 --> 00:03:24.475
this equals symbol to assign a value to a variable.

00:03:24.475 --> 00:03:30.345
Before we were doing things such as var x equals 5.

00:03:30.345 --> 00:03:36.105
Here we're assigning the value of 5 to this x with the equals symbol.

00:03:36.105 --> 00:03:39.485
Instead when comparing, we use the double equals.

00:03:39.485 --> 00:03:42.845
We can say if x is equal to 10,

00:03:42.845 --> 00:03:46.540
then alert the value of true.

00:03:46.540 --> 00:03:48.855
Save that and refresh.

00:03:48.855 --> 00:03:54.380
Of course we don't get the alert popping up because x is not equal to 10.

00:03:54.380 --> 00:03:58.295
We can also add an exclamation mark to do the opposite.

00:03:58.295 --> 00:04:01.039
An exclamation and then equals.

00:04:01.039 --> 00:04:03.770
If x is not equal to 10,

00:04:03.770 --> 00:04:06.910
we should now get the alert popping up.

00:04:06.910 --> 00:04:08.805
Let's try something else.

00:04:08.805 --> 00:04:10.920
If we add a number,

00:04:10.920 --> 00:04:14.560
so we already have the value of x equal 5.

00:04:14.560 --> 00:04:17.495
If you add a second variable of y,

00:04:17.495 --> 00:04:23.275
and this time if we set the number inside a quotations just like this,

00:04:23.275 --> 00:04:28.295
this will be now considered a string because it's inside a quotations.

00:04:28.295 --> 00:04:32.505
We can check this out if we do a console log for each variable.

00:04:32.505 --> 00:04:36.845
Let's do a console log just below.

00:04:36.845 --> 00:04:43.965
We can say type of and then x. Save that.

00:04:43.965 --> 00:04:46.010
If we open up the console,

00:04:46.010 --> 00:04:50.740
we should now see what type of data is contained inside of x.

00:04:50.740 --> 00:04:56.600
We see the x is a number which we'd expect because we've declared that just here.

00:04:56.600 --> 00:05:02.820
However, if we go ahead and change this to be y, refresh.

00:05:03.230 --> 00:05:09.425
Now we see the data type is string because this is added inside the quotations.

00:05:09.425 --> 00:05:13.315
With this knowledge, let's see how this affects our comparison.

00:05:13.315 --> 00:05:16.445
Let's go ahead and compare the value of y,

00:05:16.445 --> 00:05:22.485
which is a string to 5. I'll save.

00:05:22.485 --> 00:05:25.200
This is a string and this is number.

00:05:25.200 --> 00:05:27.930
In theory, they shouldn't work.

00:05:27.930 --> 00:05:32.205
Refresh. We still see the pop-up.

00:05:32.205 --> 00:05:37.505
This is evaluating to true even though it's comparing a number to a string.

00:05:37.505 --> 00:05:40.640
This is because the double equals will only check

00:05:40.640 --> 00:05:44.300
the value rather than the data-type if we

00:05:44.300 --> 00:05:47.630
want this comparison to be even more strict and also

00:05:47.630 --> 00:05:51.365
check if the value as well as the date type is equal.

00:05:51.365 --> 00:05:55.410
We can go ahead and change this to be triple equals.

00:05:55.450 --> 00:05:59.670
Save that, reload.

00:05:59.670 --> 00:06:04.735
Now we don't see the pop-up because the datatype is not equal.

00:06:04.735 --> 00:06:08.580
Let's try this with x and x is a number.

00:06:08.580 --> 00:06:11.880
We're comparing if x is equal to 5,

00:06:11.880 --> 00:06:14.715
both in value and also datatype.

00:06:14.715 --> 00:06:16.995
Is of course, it should be true.

00:06:16.995 --> 00:06:19.155
We see the pop-up or true.

00:06:19.155 --> 00:06:24.605
This works because x is equal type and value to 5.

00:06:24.605 --> 00:06:29.510
However, we could also add an exclamation mark and the two equals,

00:06:29.510 --> 00:06:32.245
and this will do exactly the opposite.

00:06:32.245 --> 00:06:38.640
This will only run the alert if x is not equal to and value to 5.

00:06:38.640 --> 00:06:40.475
If we save and reload,

00:06:40.475 --> 00:06:42.955
we don't see the alert anymore.

00:06:42.955 --> 00:06:46.130
This is how we can use comparison operators,

00:06:46.130 --> 00:06:49.655
and they're really useful when combined with if statements.

00:06:49.655 --> 00:06:54.445
As we've just seen, is if statement will run if some code is true.

00:06:54.445 --> 00:06:58.910
But what if we want an alternative to run if some code is not true?

00:06:58.910 --> 00:07:03.065
For this, we need to add a second condition called else.

00:07:03.065 --> 00:07:11.615
Let's delete this example from before and create a new variable called hungry,

00:07:11.615 --> 00:07:14.150
and initially set this to be true.

00:07:14.150 --> 00:07:18.020
Then we can say if hungry,

00:07:18.020 --> 00:07:23.970
then inside the quotations we can alert, 'get some food!'.

00:07:25.420 --> 00:07:30.395
Just like that. If we just add the variable name like this,

00:07:30.395 --> 00:07:32.650
this will check if the variable is true.

00:07:32.650 --> 00:07:35.030
Then if it is, it will run some code.

00:07:35.030 --> 00:07:40.405
Let's save, refresh, and there's our text of get some food.

00:07:40.405 --> 00:07:43.160
However, if we wanted an alternative,

00:07:43.160 --> 00:07:45.230
we can also add else.

00:07:45.230 --> 00:07:51.245
The second block of code will run an alert if the condition is false.

00:07:51.245 --> 00:07:54.660
This time let's say, maybe later.

00:07:54.680 --> 00:07:58.490
If we change hungry to be false,

00:07:58.490 --> 00:08:01.190
this if statement is now false.

00:08:01.190 --> 00:08:03.485
Therefore, this code won't run.

00:08:03.485 --> 00:08:08.440
But instead the else statement will run alerting, maybe later.

00:08:08.440 --> 00:08:10.590
Let's try this in a browser.

00:08:10.590 --> 00:08:14.845
Refresh. There is our text of 'maybe later'.

00:08:14.845 --> 00:08:19.020
Let's try this once more by changing this back to true.

00:08:20.150 --> 00:08:22.860
Now we get, get some food.

00:08:22.860 --> 00:08:25.370
These if else statements really are

00:08:25.370 --> 00:08:30.295
a fundamental part of JavaScript and also programming in general.

00:08:30.295 --> 00:08:32.599
If you're still a little unsure,

00:08:32.599 --> 00:08:37.670
I would recommend going back through this video to better understand how they work.

00:08:37.670 --> 00:08:41.570
Although you will get lots more practice for this section.

00:08:41.570 --> 00:08:47.370
Next, we're going to take things even further by nesting these statements together.
