WEBVTT
0
1
00:00:01.340 --> 00:00:01.570
All right.
1

2
00:00:01.600 --> 00:00:02.750
So let's get started
2

3
00:00:02.780 --> 00:00:09.550
putting into practice what we just learned about and adding cookies and sessions to our current app.
3

4
00:00:09.590 --> 00:00:11.180
So first things first.
4

5
00:00:11.180 --> 00:00:17.090
As always we have to install some packages and the ones that we're using in this lesson are passport,
5

6
00:00:17.510 --> 00:00:21.680
passport-local, passport-local-mongoose.
6

7
00:00:21.800 --> 00:00:23.790
It's like some sort of weird game.
7

8
00:00:23.930 --> 00:00:27.000
And finally express-session.
8

9
00:00:27.050 --> 00:00:30.620
Notice this is not express-sessions.
9

10
00:00:30.620 --> 00:00:37.820
We want the singular one. Because people are allowed to come up with names for their packages and there's
10

11
00:00:37.820 --> 00:00:40.880
no sort of copy writing of any sort like that
11

12
00:00:40.880 --> 00:00:46.910
you often end up with packages that are named really really similarly and only until you've installed
12

13
00:00:46.910 --> 00:00:48.020
it and you've required it
13

14
00:00:48.020 --> 00:00:52.630
and it's not working and you spend hours and hours debugging your code
14

15
00:00:52.640 --> 00:00:55.200
you realize that you actually used the wrong package.
15

16
00:00:55.370 --> 00:00:59.800
So to avoid all of this heartache just make sure that you've got the right one.
16

17
00:00:59.870 --> 00:01:04.460
And there's a really easy way of checking to make sure that you're using the right one.
17

18
00:01:04.460 --> 00:01:12.570
So let's say if I typed in express-session you can see that over here there's a popularity score,
18

19
00:01:12.590 --> 00:01:15.920
there's a quality score and there's a maintenance score.
19

20
00:01:15.920 --> 00:01:22.940
Now if these bars are long that means it's a popular, high quality, frequently maintained package.
20

21
00:01:22.940 --> 00:01:24.510
And that's usually what you want.
21

22
00:01:24.590 --> 00:01:31.220
And if you take a look at express-session you can see that it gets over half a million downloads
22

23
00:01:31.280 --> 00:01:32.580
per week.
23

24
00:01:32.600 --> 00:01:38.330
Now if we accidentally typed in express-sessions you can see that all of those lines are a little bit
24

25
00:01:38.330 --> 00:01:39.330
shorter
25

26
00:01:39.380 --> 00:01:43.360
and when you click on it you see that it only has 600 weekly downloads.
26

27
00:01:43.430 --> 00:01:46.240
Some people probably genuinely want to use this package
27

28
00:01:46.340 --> 00:01:50.090
but also there's probably people who have mistakenly installed it.
28

29
00:01:50.630 --> 00:01:56.280
So it's this one that we want in addition to all of the others that we saw just now.
29

30
00:01:56.330 --> 00:01:59.750
And if you still got your server running go ahead and stop it.
30

31
00:02:00.280 --> 00:02:15.770
And then we're going to npm i passport passport-local passport-local-mongoose and
31

32
00:02:15.800 --> 00:02:20.060
finally express-session without
32

33
00:02:20.090 --> 00:02:20.920
the 's'.
33

34
00:02:21.080 --> 00:02:26.300
And let's hit enter and it'll go through and install everything.
34

35
00:02:26.300 --> 00:02:30.580
And now we're ready to go ahead and incorporate it to our app.js.
35

36
00:02:31.160 --> 00:02:35.990
So first things first we're going to rip out all of the parts where we were hashing and salting using
36

37
00:02:35.990 --> 00:02:36.880
bcrypt.
37

38
00:02:36.920 --> 00:02:39.290
So I'm going to delete it from here.
38

39
00:02:39.290 --> 00:02:48.030
And I'm also going to empty out my app.post login route and also the register one.
39

40
00:02:48.050 --> 00:02:54.770
So now both of our app.posts are empty and we're going to incorporate hashing and salting and authentication
40

41
00:02:55.130 --> 00:02:59.310
using passport and the packages that we've added just now.
41

42
00:02:59.420 --> 00:03:04.640
And the first package that we have to configure is express session.
42

43
00:03:04.640 --> 00:03:11.120
It's really really important that in the following steps you do everything exactly in the order that
43

44
00:03:11.120 --> 00:03:15.110
I'm showing it to you and placing it in the right parts of the code.
44

45
00:03:15.200 --> 00:03:20.000
So take note of where I'm writing the code because it's really really important
45

46
00:03:20.000 --> 00:03:22.990
and it's really easy to mess up.
46

47
00:03:23.180 --> 00:03:29.720
So let's get started. First things first. Let's require express-session
47

48
00:03:29.930 --> 00:03:36.000
and I'm simply going to paste it in just to avoid making typos which I make a lot of.
48

49
00:03:36.200 --> 00:03:42.360
But they say that recognizing you have a problem is the first step to solving those problems.
49

50
00:03:42.530 --> 00:03:46.420
And I'm going to change that var to a const because we are using
50

51
00:03:46.430 --> 00:03:46.740
ES
51

52
00:03:46.740 --> 00:03:48.690
version 6 in our code.
52

53
00:03:48.700 --> 00:03:55.070
Now while I'm here I'm going to also require the other packages that we installed and the only ones
53

54
00:03:55.070 --> 00:03:59.190
that we actually need to create a constant for are passport.
54

55
00:03:59.210 --> 00:04:10.390
So I'm going to require passport. And then I'm going to require passport-local-mongoose. And just check
55

56
00:04:10.390 --> 00:04:12.730
to make sure that you don't have the typos anywhere
56

57
00:04:13.330 --> 00:04:20.140
and we don't actually need to require passport local because it's gonna be one of those dependencies
57

58
00:04:20.170 --> 00:04:23.470
that will be needed by passport-local-mongoose
58

59
00:04:23.470 --> 00:04:30.550
but we don't actually need to refer to it in the code so we don't need to expose it explicitly by creating
59

60
00:04:30.550 --> 00:04:33.630
a constant and requiring the package.
60

61
00:04:33.640 --> 00:04:33.910
All right.
61

62
00:04:33.910 --> 00:04:41.200
So now that we're done, the next thing to do is to actually set up our session and you can see that whenever
62

63
00:04:41.200 --> 00:04:48.670
we're referring to a method or a property that's from express session we're going to use the keyword
63

64
00:04:48.760 --> 00:04:49.450
session.
64

65
00:04:49.990 --> 00:04:55.600
So as always when you're confused about what to do head back to the documentation and it will be your
65

66
00:04:55.600 --> 00:04:56.890
guiding light.
66

67
00:04:56.890 --> 00:05:01.440
So we've got express-session that we've already installed and required.
67

68
00:05:01.750 --> 00:05:04.350
So the next step is to actually use it.
68

69
00:05:04.660 --> 00:05:11.620
And in order to use it we're going to use a bit of code where we say app.use and we're going to call
69

70
00:05:11.710 --> 00:05:19.180
session and we're going to pass in some options such as secret, resave and saveUninitialized. And we're
70

71
00:05:19.180 --> 00:05:25.960
going to place this code just above where we have mongoose.connect and just below all of the other
71

72
00:05:26.120 --> 00:05:27.280
app.uses,
72

73
00:05:27.280 --> 00:05:28.340
so right here.
73

74
00:05:28.360 --> 00:05:31.290
And it's important that you place your code here as well.
74

75
00:05:31.360 --> 00:05:38.530
So we're going to write app.use and the package is called session and then I'm gonna open a set of
75

76
00:05:38.530 --> 00:05:41.630
parentheses and some curly braces.
76

77
00:05:41.770 --> 00:05:48.550
And then inside those curly braces is going to be a Javascript object with a number of properties. One
77

78
00:05:48.610 --> 00:05:53.420
is going to be the secret and this can be a long string of your choosing.
78

79
00:05:53.440 --> 00:05:57.300
And this is something that we're going to keep secret in our environment file.
79

80
00:05:57.340 --> 00:06:01.000
But first let's get it working before we move it to the environment file.
80

81
00:06:01.150 --> 00:06:08.190
So I'm just gonna put in a long sentence. "Our little secret." and I'll end it with a full stop.
81

82
00:06:08.200 --> 00:06:09.360
Now you don't have to.
82

83
00:06:09.370 --> 00:06:15.760
You can write any long string in here as long as you remember what it is and you use it consistently.
83

84
00:06:16.540 --> 00:06:16.850
All right.
84

85
00:06:16.870 --> 00:06:19.960
So let's add a comma and then let's add the next one.
85

86
00:06:20.140 --> 00:06:23.770
So we're going to set resave to false
86

87
00:06:23.770 --> 00:06:28.610
and we're going to set saveUninitialized.
87

88
00:06:28.720 --> 00:06:32.830
Remember that it has to be a 'z' for the Americanized spelling.
88

89
00:06:32.830 --> 00:06:35.170
And we're going to set that to false as well
89

90
00:06:35.170 --> 00:06:37.680
and then we can cap that off.
90

91
00:06:37.750 --> 00:06:42.920
Now if you're wondering what all of those things I just said are actually doing, then
91

92
00:06:42.940 --> 00:06:50.680
be sure to read through the documentation and simply just hit Command + F and search for it. And you can
92

93
00:06:50.680 --> 00:06:56.600
read through the documentation to see why we're choosing the options we are
93

94
00:06:56.620 --> 00:07:01.430
and I'm basically following just the documentations recommendations.
94

95
00:07:01.450 --> 00:07:01.720
OK.
95

96
00:07:01.750 --> 00:07:09.220
So now that we've set up our session the next thing to do is to initialize and start using passport.
96

97
00:07:09.520 --> 00:07:12.190
And in order to use passport
97

98
00:07:12.190 --> 00:07:15.630
the first thing we have to do is to initialize it.
98

99
00:07:15.940 --> 00:07:22.960
So right below where we initialized our session with all of these options we're going to again call
99

100
00:07:23.080 --> 00:07:24.400
app.use
100

101
00:07:24.550 --> 00:07:29.660
and in this case we're going to use something that comes along with passport
101

102
00:07:29.890 --> 00:07:39.520
and it's simply to initialize it. And this is a method that comes bundled with passport and sets up passport
102

103
00:07:39.520 --> 00:07:43.120
for us to start using it for authentication.
103

104
00:07:43.120 --> 00:07:50.360
Now the next line that we have to write is to tell our app to use passport to also set up our session.
104

105
00:07:50.710 --> 00:07:56.680
So we're going to write passport.session and then we're going to add the parentheses and close that
105

106
00:07:56.680 --> 00:07:56.920
off.
106

107
00:07:57.520 --> 00:08:05.170
So we first tell our app to use the session package that we required up here and then we set it up with
107

108
00:08:05.170 --> 00:08:07.460
some initial configuration.
108

109
00:08:07.480 --> 00:08:15.520
Next we tell our app to use passport and to initialize the passport package and to also use passport for
109

110
00:08:15.520 --> 00:08:16.910
dealing with the sessions.
110

111
00:08:16.930 --> 00:08:24.220
And if you want to know how I know to write these bits of code be sure to check out the passport documentation
111

112
00:08:24.670 --> 00:08:31.810
and especially under the configure section where they talk about passport strategies and how to verify
112

113
00:08:31.810 --> 00:08:37.510
callbacks and how to work with Express based applications which is what we're doing.
113

114
00:08:37.630 --> 00:08:40.380
And this is where these bits of code comes from.
114

115
00:08:40.390 --> 00:08:47.200
So now that we've set up our app to use sessions and passport for managing those sessions, the next thing
115

116
00:08:47.200 --> 00:08:52.790
to do is to set up our last package, passport-local mongoose.
116

117
00:08:53.050 --> 00:09:00.540
And we've already installed it but in order to use it we have to add it to our mongoose schema as a plugin.
117

118
00:09:00.550 --> 00:09:05.800
So this is very similar to what we did when we covered encryption when we used the Mongoose encryption
118

119
00:09:05.800 --> 00:09:06.830
package.
119

120
00:09:06.850 --> 00:09:13.270
So here we're going to tap into our userSchema and remember that this schema in order for it to have
120

121
00:09:13.270 --> 00:09:16.670
a plugin it has to be a mongoose schema.
121

122
00:09:16.690 --> 00:09:20.550
It can't just be a standard Javascript object.
122

123
00:09:20.680 --> 00:09:23.280
So make sure that your code still looks like this
123

124
00:09:23.530 --> 00:09:28.660
and if you're confused about what I'm talking right now make sure you take a look at the encryption
124

125
00:09:28.660 --> 00:09:30.190
lesson in this module.
125

126
00:09:30.970 --> 00:09:31.180
All right.
126

127
00:09:31.180 --> 00:09:37.480
So we've tapped into our userSchema and we're going to add a plugin to it. And the plug in is of course
127

128
00:09:37.510 --> 00:09:46.270
passportLocalMongoose and that is what we're going to use to hash and salt our passwords and to save
128

129
00:09:46.300 --> 00:09:49.980
our users into our MongoDB database.
129

130
00:09:50.020 --> 00:09:52.570
It's going to do a lot of heavy lifting for us.
130

131
00:09:53.140 --> 00:09:57.630
So now that we've enabled it let's go ahead and use it.
131

132
00:09:57.670 --> 00:10:04.900
So right below where we've created our user mongoose model and setup Mongoose to use that schema that
132

133
00:10:04.900 --> 00:10:06.130
we created earlier on,
133

134
00:10:06.280 --> 00:10:12.100
we're ready to configure the very last thing which is the passport local configurations and we're going
134

135
00:10:12.100 --> 00:10:20.080
to use exactly the same as what the documentation tells us to do which is to create a strategy which
135

136
00:10:20.080 --> 00:10:26.950
is going to be the local strategy to authenticate users using their username and password and also to
136

137
00:10:26.950 --> 00:10:27.760
serialize
137

138
00:10:27.790 --> 00:10:34.480
and deserialise our user. Now the serialise and deserialise is only necessary when we're using sessions.
138

139
00:10:34.990 --> 00:10:42.520
And what it does is when we tell it to serialize our user it basically creates that fortune cookie and
139

140
00:10:42.520 --> 00:10:51.460
stuffs the message namely our users identifications into the cookie. And then when we deserialise it basically allows
140

141
00:10:51.460 --> 00:10:57.690
passport to be able to crumble the cookie and discover the message inside which is who this user is.
141

142
00:10:57.790 --> 00:11:02.520
And all of their identification so that we can authenticate them on our server.
142

143
00:11:02.560 --> 00:11:08.760
So normally if you are just using passport and passport local you would have to write a lot more code.
143

144
00:11:08.890 --> 00:11:14.560
But because we're using passport local mongoose it's going to take care of a lot of that in between
144

145
00:11:14.560 --> 00:11:15.370
code for us.
145

146
00:11:15.670 --> 00:11:22.900
So all we need to do is just add these three lines of code right below where we create our new mongoose
146

147
00:11:22.900 --> 00:11:23.660
model
147

148
00:11:23.890 --> 00:11:26.790
and we're now ready to run our app.
148

149
00:11:26.980 --> 00:11:35.470
So let's go over and use nodemon to run our app.js making sure that your MongoDB server is still
149

150
00:11:35.470 --> 00:11:42.440
running. And some of you might notice this deprecation warning come up in the console.
150

151
00:11:42.460 --> 00:11:46.160
So what do we do when we come across a warning in the console?
151

152
00:11:46.270 --> 00:11:49.080
We copy it and we paste it into Google.
152

153
00:11:49.570 --> 00:11:50.800
So let's see what we get.
153

154
00:11:50.920 --> 00:11:59.260
Now the first link we get is a link to an issue on the original Mongoose package. And you can see that
154

155
00:11:59.260 --> 00:12:02.740
people are getting exactly the same problem that we're experiencing
155

156
00:12:02.740 --> 00:12:09.700
and some people have very helpfully told us how to fix it. All we need to do is call mongoose.set
156

157
00:12:10.150 --> 00:12:15.530
and then pass in this user create index option and set it to true.
157

158
00:12:15.610 --> 00:12:21.700
So whenever you're using third party libraries, there's all sorts of things that can happen and give
158

159
00:12:21.700 --> 00:12:25.270
you these deprecation warnings or other types of warnings.
159

160
00:12:25.300 --> 00:12:28.860
It's really really important to realize that you are not alone
160

161
00:12:28.930 --> 00:12:33.220
and other people have probably experienced what you're going through right now.
161

162
00:12:33.370 --> 00:12:39.340
So you have to try and find those people and see how they solved their problem.
162

163
00:12:39.410 --> 00:12:43.760
So let's go ahead and add that right below where we have our mongoose.
163

164
00:12:43.850 --> 00:12:49.960
.connect and we're gonna say mongoose.set
164

165
00:12:50.210 --> 00:12:56.720
useCreateIndex and let's set that to true.
165

166
00:12:56.720 --> 00:12:56.920
All right.
166

167
00:12:56.960 --> 00:13:04.760
Now let's hit save and the Mongoose server will restart or you can write 'rs' for restart and you can
167

168
00:13:04.760 --> 00:13:08.740
see we no longer have that deprecation warning anymore.
168

169
00:13:09.010 --> 00:13:15.740
Okay so we're pretty happy that our server is running without any warnings or errors
169

170
00:13:15.830 --> 00:13:22.520
and if you're getting some problems in here make sure that you firstly review where the code went and
170

171
00:13:22.640 --> 00:13:24.630
whether if you have any typos.
171

172
00:13:24.680 --> 00:13:34.160
So we first required three packages express-session, passport and passport local mongoose. And then
172

173
00:13:34.370 --> 00:13:42.770
we set up sessions to have a secret, set the resave option to false and set the saveUinitialized option
173

174
00:13:42.770 --> 00:13:44.420
to false as well.
174

175
00:13:44.420 --> 00:13:52.860
And then we initialize passport and we used a passport to manage our sessions. And then we set up our
175

176
00:13:52.860 --> 00:13:57.290
userSchema to use passport local mongoose as a plugin.
176

177
00:13:57.330 --> 00:14:05.340
And finally we used our passport local mongoose to create a local log in strategy and set a passport
177

178
00:14:05.400 --> 00:14:11.150
to serialise and deserialise our user. And notice the order of the code here.
178

179
00:14:11.340 --> 00:14:18.600
It's really really important that your code is placed in exactly the same places as I have on the screen
179

180
00:14:18.600 --> 00:14:27.540
here because if for example you decided to set up sessions after you tried to use the sessions to serialise
180

181
00:14:27.550 --> 00:14:29.670
and deserialise, it won't work.
181

182
00:14:30.120 --> 00:14:36.540
And similarly if you tried to use passport to create a strategy but you haven't initialized it, that
182

183
00:14:36.600 --> 00:14:37.700
also won't work.
183

184
00:14:37.710 --> 00:14:40.470
So this is why the order is important.
184

185
00:14:40.470 --> 00:14:47.520
So now that we are assuming that all the configuration is done and dusted, the next thing to do is to
185

186
00:14:47.520 --> 00:14:52.660
actually setup the register post route and the login post route.
186

187
00:14:52.680 --> 00:14:59.820
So let's tackle one at a time. And we're going to be using our passport local mongoose package to do
187

188
00:14:59.820 --> 00:15:00.570
this.
188

189
00:15:00.570 --> 00:15:07.710
So in the documentation in the example section they show you how you might use this package to register
189

190
00:15:07.740 --> 00:15:16.140
your users. You would provide a user name which will in our case be an email, the user's password and
190

191
00:15:16.140 --> 00:15:22.440
then there'll be a callback which might return error if there were problems or a user if everything
191

192
00:15:22.440 --> 00:15:23.810
went successfully.
192

193
00:15:24.150 --> 00:15:28.430
And then if there were no errors then we can authenticate our user.
193

194
00:15:28.470 --> 00:15:31.200
So let's go ahead and do that in here.
194

195
00:15:31.200 --> 00:15:38.410
Now we're first going to tap into the user model and we're going to call the method register on it.
195

196
00:15:38.640 --> 00:15:45.240
And this method comes from the passport-local-mongoose package. And it's only because of the package
196

197
00:15:45.360 --> 00:15:54.090
that we can avoid creating our new user, saving our user and interacting with Mongoose directly. Instead
197

198
00:15:54.450 --> 00:16:00.270
we're going to be using the passport-local-mongoose package as our middleman to handle all of that for
198

199
00:16:00.270 --> 00:16:01.020
us.
199

200
00:16:01.050 --> 00:16:09.750
So inside here we're going to first add the username field and we're going to pass in the information
200

201
00:16:09.750 --> 00:16:11.590
that gets passed over from our form.
201

202
00:16:11.670 --> 00:16:17.080
So it's the field that the user typed in for req.body.username.
202

203
00:16:17.220 --> 00:16:19.900
And this is going in as a Javascript object
203

204
00:16:19.920 --> 00:16:26.310
so with curly braces around it. The next part is we're going to pass in the password that user wanted
204

205
00:16:26.310 --> 00:16:31.850
to register with and this is gonna be req.body.password.
205

206
00:16:32.110 --> 00:16:38.040
Now for some reason I keep accidentally typing passport insert a password and I often mess those two
206

207
00:16:38.040 --> 00:16:38.440
up.
207

208
00:16:38.550 --> 00:16:44.610
So be sure that when you're typing you don't make the same mistakes that I do. And it's req.body
208

209
00:16:44.620 --> 00:16:46.380
.password.
209

210
00:16:46.380 --> 00:16:53.400
Now the very last thing that we have to add is a callback which can potentially give us an error or
210

211
00:16:53.400 --> 00:16:57.960
give us the new registered user if everything was fine.
211

212
00:16:58.350 --> 00:17:01.290
And we're going to check to see if there were any errors,
212

213
00:17:01.440 --> 00:17:08.250
then we're going to log those errors. And for the user we're simply going to redirect them back to the
213

214
00:17:08.250 --> 00:17:12.570
same register page so that they can try again.
214

215
00:17:12.630 --> 00:17:18.350
Now if there were no errors though, we're going to authenticate our user using passport.
215

216
00:17:18.810 --> 00:17:26.400
So we're going to write passport.authenticate and the type of authentication that we're performing
216

217
00:17:26.580 --> 00:17:28.140
is local.
217

218
00:17:28.140 --> 00:17:34.560
And then once we've authenticated them, we're going to again open a set of parentheses and we're going
218

219
00:17:34.560 --> 00:17:42.720
to pass in req, res and a callback. And this callback is only triggered if the authentication
219

220
00:17:42.810 --> 00:17:50.070
was successful and we managed to successfully setup a cookie that saved their current logged in session
220

221
00:17:50.100 --> 00:17:53.030
so will you have to check to see if they're logged in or not.
221

222
00:17:53.070 --> 00:18:02.010
So we can assume that if they end up in here then we can safely res.redirect them to the secrets
222

223
00:18:02.100 --> 00:18:04.160
route.
223

224
00:18:04.290 --> 00:18:11.640
Now notice that previously we never had a secrets route because we always relied on res.rendering
224

225
00:18:11.640 --> 00:18:15.670
the secrets page either through register or through login.
225

226
00:18:15.960 --> 00:18:22.290
But in this case because we're authenticating our user and setting up a logged in session for them then
226

227
00:18:22.380 --> 00:18:29.820
even if they just go directly to the secret page, they should automatically be able to view it if they
227

228
00:18:29.820 --> 00:18:32.050
are in fact still logged in.
228

229
00:18:32.070 --> 00:18:35.860
So that's why we need to create our secrets route.
229

230
00:18:35.880 --> 00:18:40.790
So I'm going to do that just below the register route up here and I'm going to say app.
230

231
00:18:40.790 --> 00:18:52.100
get /secrets and we're going to have our req and res and inside this callback is where
231

232
00:18:52.100 --> 00:18:59.330
we're going to check to see if the user is authenticated and this is where we're relying on passport
232

233
00:18:59.450 --> 00:19:03.380
and session and passport-local and passport-
233

234
00:19:03.400 --> 00:19:12.140
-ocal-mongoose to make sure that if a user is already logged in then we should simply render the secrets
234

235
00:19:12.140 --> 00:19:17.300
page. But if they're not logged in then we're going to redirect them to the login page.
235

236
00:19:17.840 --> 00:19:24.470
So here we're going to write if the request is authenticated
236

237
00:19:27.730 --> 00:19:41.210
then in this case we're going to res.render the secrets page. But or else i.e. the user is not authenticated,
237

238
00:19:41.350 --> 00:19:42.810
they're not logged in,
238

239
00:19:42.850 --> 00:19:52.120
then we should redirect them to the logging route and force them to login first before they can view
239

240
00:19:52.120 --> 00:19:53.080
this page.
240

241
00:19:53.080 --> 00:19:59.800
So let's go ahead and save our code and see if our registration section works.
241

242
00:19:59.800 --> 00:20:02.760
Making sure that our servers running without any issue
242

243
00:20:02.890 --> 00:20:09.970
let's go over to localhost:3000 and let's try to register a new user. Let's call this new
243

244
00:20:09.970 --> 00:20:16.220
user user@passportlocalmongoose.com or you can call them whatever it is you like.
244

245
00:20:16.330 --> 00:20:21.020
But I just want to be able to identify them when we try to locate them on our database.
245

246
00:20:21.160 --> 00:20:28.540
So they're going to get a password that is 123456 and I'm going to click register. And now I get
246

247
00:20:28.540 --> 00:20:34.240
taken to the secrets page which means that everything went through successfully.
247

248
00:20:34.240 --> 00:20:41.110
So now if we had ever to Robo 3T and let's view all the documents in our collection you can see we have
248

249
00:20:41.230 --> 00:20:49.510
a brand new document here where the username is user@passportlocalmongoose.com and we've got a salt
249

250
00:20:49.780 --> 00:20:50.740
and a hash.
250

251
00:20:51.040 --> 00:20:58.570
So this is what I meant when I said that the passport-local-mongoose package will salt and hash our
251

252
00:20:58.570 --> 00:21:03.510
password for us automatically without us having to do anything about it.
252

253
00:21:03.550 --> 00:21:11.170
But in addition, when say I navigate a way to, I don't know, the home page and I tried to access the secrets
253

254
00:21:11.170 --> 00:21:18.760
page directly it gets rendered straight away without me needing to login again because I am already
254

255
00:21:18.760 --> 00:21:26.830
authenticated and this is all thanks to the cookie that got my session ID saved and we can even see
255

256
00:21:26.830 --> 00:21:35.140
it if we go into our Chrome settings and we search for cookies, go to content settings, cookies, see all cookies
256

257
00:21:35.140 --> 00:21:42.460
and site data. And if we locate our local host you can see that we've got one cookie that's saved right
257

258
00:21:42.460 --> 00:21:50.380
here and you can see this is the content that gets created by that express-session's package and it saves
258

259
00:21:50.380 --> 00:21:58.320
it inside this cookie called connect.sid and it's set to expire when our browsing session ends.
259

260
00:21:58.390 --> 00:22:06.470
So that means that when I quit Chrome and I open it again and I try to go back to localhost:3000
260

261
00:22:06.800 --> 00:22:14.020
/secrets, you can see that I am now no longer authenticated because that cookie got deleted
261

262
00:22:14.020 --> 00:22:19.200
by my browser because it's set to expire when I close down my browser.
262

263
00:22:19.600 --> 00:22:25.710
So now it's pushing me towards the login page because I am no longer authenticated.
263

264
00:22:25.720 --> 00:22:31.090
So I have to log back in in order to be able to access the privileged areas.
264

265
00:22:31.090 --> 00:22:34.470
Now at the moment we haven't got our login routes set up yet
265

266
00:22:34.660 --> 00:22:36.800
so let's go ahead and do that.
266

267
00:22:36.850 --> 00:22:45.370
So inside the app.post section for our login route, let's go ahead and create a new user. And this
267

268
00:22:45.370 --> 00:22:53.560
is going to be a new user created from our Mongoose model and then this user is going to have its two
268

269
00:22:53.560 --> 00:23:02.180
properties username and password setup. And the user name is going to of course come from the req.
269

270
00:23:02.180 --> 00:23:04.540
.body.username
270

271
00:23:07.620 --> 00:23:12.030
and the password is going to be request.body.password.
271

272
00:23:12.170 --> 00:23:17.340
And this of course comes from the user when they fill in the login form right here.
272

273
00:23:17.360 --> 00:23:27.410
So now that we've created our new user, then we're going to use passport to log in this user and authenticate
273

274
00:23:27.410 --> 00:23:27.930
them.
274

275
00:23:28.120 --> 00:23:33.630
And in order to do that we're going to use a login function that passport gives us
275

276
00:23:33.770 --> 00:23:37.910
and it has to be called on the request object.
276

277
00:23:37.910 --> 00:23:43.730
So it has to be req.login the user that we want to login and then we get a callback to see
277

278
00:23:43.730 --> 00:23:48.560
if there were any errors. But if there were none, then we're going to take the user to where they need
278

279
00:23:48.560 --> 00:23:49.180
to be.
279

280
00:23:49.190 --> 00:23:53.690
So going back to our code we're going to call request.login
280

281
00:23:53.870 --> 00:23:57.760
and remember this method comes from passport.
281

282
00:23:58.070 --> 00:24:05.660
And we have to pass in the new user that comes from the login credentials that the user provided on
282

283
00:24:05.660 --> 00:24:12.800
our login page. And then we have a callback which can potentially return an error if we were unable
283

284
00:24:12.800 --> 00:24:16.640
to find that user with that username in our database.
284

285
00:24:16.640 --> 00:24:22.940
So here is where we're going to check to see if there were any errors. And if there were then we're simply
285

286
00:24:22.940 --> 00:24:25.970
going to log those errors in the console.
286

287
00:24:26.120 --> 00:24:30.950
But if there were no errors then we're going to authenticate our user
287

288
00:24:30.980 --> 00:24:38.210
so it means that they've successfully logged in and we're going to call passport.authenticate and
288

289
00:24:38.270 --> 00:24:41.570
we're going to use the local strategy.
289

290
00:24:41.570 --> 00:24:47.690
And you can see that I'm typing exactly the same code as I've got up here which basically authenticates
290

291
00:24:47.780 --> 00:24:51.980
our user using their password and username.
291

292
00:24:52.010 --> 00:24:57.680
And if we've successfully authenticated them then again we're going to redirect them to the secrets
292

293
00:24:57.680 --> 00:25:03.780
route where we of course check whether if they are indeed authenticated or not.
293

294
00:25:03.800 --> 00:25:10.220
So both when they've successfully registered and when they've successfully logged in using the right
294

295
00:25:10.220 --> 00:25:17.840
credentials, we're going to send a cookie and tell the browser to hold onto that cookie because the cookie
295

296
00:25:17.870 --> 00:25:24.620
has a few pieces of information that tells our server about the user, namely that they are authorized
296

297
00:25:24.920 --> 00:25:29.750
to view any of the pages that require authentication.
297

298
00:25:30.080 --> 00:25:32.060
So let's go ahead and hit save and
298

299
00:25:32.420 --> 00:25:33.740
let's check it out.
299

300
00:25:33.770 --> 00:25:39.950
So we're going to go to the home page and we're going to click on login. So let's find that user that
300

301
00:25:39.950 --> 00:25:41.140
we sign up just now.
301

302
00:25:41.150 --> 00:25:43.600
user@passportlocalmongoose.com
302

303
00:25:43.940 --> 00:25:48.750
and I'm going to put in their password of 123456 and click login.
303

304
00:25:48.920 --> 00:25:52.310
And now I get taken to the secret page.
304

305
00:25:52.310 --> 00:25:54.800
So it's working perfectly.
305

306
00:25:54.800 --> 00:25:59.810
Now there's just one last thing. We haven't yet defined a logout route.
306

307
00:25:59.870 --> 00:26:07.040
And when I click on that button all I get is "Cannot GET /logout" because that button is
307

308
00:26:07.040 --> 00:26:14.630
trying to hit up a route called /logout and currently in our server we don't have that
308

309
00:26:14.630 --> 00:26:15.410
route.
309

310
00:26:15.470 --> 00:26:17.030
So let's go and add it in.
310

311
00:26:17.360 --> 00:26:25.890
Let's add our app.get for the route that is logout and add a callback, a req and a res.
311

312
00:26:25.970 --> 00:26:33.640
And here is where we're going to essentially deauthenticate our user and end that user session.
312

313
00:26:33.650 --> 00:26:35.450
So how do we logout users?
313

314
00:26:35.450 --> 00:26:42.830
Well let's take a look at the documentation. All we have to do is to call req.logout and then
314

315
00:26:42.980 --> 00:26:44.500
that's it.
315

316
00:26:44.510 --> 00:26:46.390
So let's do your req.
316

317
00:26:46.400 --> 00:26:57.770
logout and then we're going to res.redirect them to the home page or the root route so that they
317

318
00:26:57.770 --> 00:27:01.240
go back to the home page once they've logged out.
318

319
00:27:01.280 --> 00:27:08.500
So let's save that and let's go back to our home page and log in our user again.
319

320
00:27:08.760 --> 00:27:12.830
123456 and log in.
320

321
00:27:12.830 --> 00:27:19.520
And now if we click on logout then you can see it takes us right back to our home page.
321

322
00:27:19.520 --> 00:27:25.270
And if we tried to access the secrets page it will force us to log in.
322

323
00:27:25.370 --> 00:27:33.680
Whereas if we are already logged in and we voluntarily say navigate to some website or closed down
323

324
00:27:33.680 --> 00:27:41.690
the tab and try to go back to our localhost:3000/secrets our session is saved and we're still authenticated
324

325
00:27:41.960 --> 00:27:45.730
because of that cookie that we have on our browser.
325

326
00:27:45.770 --> 00:27:53.450
Now remember that when you update the code in your app.js and you hit save that nodemon will
326

327
00:27:53.510 --> 00:27:55.660
restart your server
327

328
00:27:55.670 --> 00:27:56.490
right?
328

329
00:27:56.540 --> 00:28:04.760
And whenever your server gets restarted your cookies gets deleted and your session gets restarted.
329

330
00:28:04.760 --> 00:28:09.860
So now if I try to go to secrets page it redirects me to log in
330

331
00:28:09.870 --> 00:28:16.690
because I'm no longer authenticated. That cookie gets deleted every time we restart the server.
331

332
00:28:16.700 --> 00:28:23.090
So now our website is able to remember when a user is already logged in
332

333
00:28:23.270 --> 00:28:30.080
so that once they log in and they want to be able to access the parts of the website that require authentication
333

334
00:28:30.320 --> 00:28:32.900
they don't have to keep logging back in.
334

335
00:28:32.930 --> 00:28:37.070
It's all saved in our cookie for that particular session.
335

336
00:28:37.250 --> 00:28:44.360
And the content of the cookie has a meaning to our server because it can check against it and know that
336

337
00:28:44.360 --> 00:28:46.920
the current user is already signed in
337

338
00:28:47.030 --> 00:28:55.130
so we don't have to force them to sign in again when they try to access a part of the website that requires
338

339
00:28:55.130 --> 00:28:56.030
authentication.
339

340
00:28:56.300 --> 00:29:02.420
So cookies and sessions and passport are not easy concepts to grasp.
340

341
00:29:02.420 --> 00:29:10.850
So I recommend watching this video a couple of times and also to be sure that you read through the passport,
341

342
00:29:11.180 --> 00:29:18.980
passport-local, the passport-local-mongoose and the express-session documentation. It's through reading
342

343
00:29:19.040 --> 00:29:27.350
all of these very very long tomes essentially that you actually understand how to interact with it and
343

344
00:29:27.350 --> 00:29:28.040
why it is
344

345
00:29:28.070 --> 00:29:29.870
the code looks the way it does.
