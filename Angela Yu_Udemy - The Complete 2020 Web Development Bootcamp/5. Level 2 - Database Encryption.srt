0
1
00:00:01,310 --> 00:00:01,690
All right.
1

2
00:00:01,720 --> 00:00:09,940
So we've taken a look at level 1 encryption which is basically just storing the password as plain text
2

3
00:00:10,300 --> 00:00:11,390
in our database.
3

4
00:00:11,410 --> 00:00:18,840
So maybe it'll be a little bit difficult for people to get access to our server and access our database.
4

5
00:00:18,880 --> 00:00:24,970
At least you can't just simply right click on a website to view page source and be able to see it in
5

6
00:00:24,970 --> 00:00:25,510
the HTML.
6

7
00:00:25,510 --> 00:00:30,160
Well at least it's stored at server level. But that's not really good enough.
7

8
00:00:30,160 --> 00:00:37,150
So let's go ahead and see what we can do to improve the security for our users on our website.
8

9
00:00:37,540 --> 00:00:47,740
So let's increase to level 2 authentication. And level 2 authentication involves the use of encryption.
9

10
00:00:48,550 --> 00:00:50,530
So what exactly is encryption?
10

11
00:00:50,590 --> 00:00:58,180
Well basically all it is is just scrambling something so that people can't tell what the original was
11

12
00:00:58,450 --> 00:01:03,250
unless they were in on the secret and they knew how to unscramble it.
12

13
00:01:03,250 --> 00:01:08,590
This is exactly the same as if you and your friend were sending each other secret messages and you had
13

14
00:01:08,590 --> 00:01:12,220
a key to encode the message that you both knew
14

15
00:01:12,370 --> 00:01:15,040
so that you could decode the message.
15

16
00:01:15,040 --> 00:01:21,730
Now on a bigger scale if you've ever watched The Imitation Game or read about the Enigma machine,
16

17
00:01:21,730 --> 00:01:25,020
well that is basically a form of encryption.
17

18
00:01:25,330 --> 00:01:32,440
And the Enigma machine if you don't know is just simply a machine that was used during World War 2 when
18

19
00:01:32,440 --> 00:01:38,890
the Germans would send each other messages they would use the machine to encrypt those messages so that
19

20
00:01:38,890 --> 00:01:46,360
when the messages are intercepted say over the radio, unless you had the same Enigma machine and you
20

21
00:01:46,360 --> 00:01:53,200
knew what the decoding Key was or what the settings were for the machine, then you wouldn't be able to
21

22
00:01:53,200 --> 00:01:56,200
tell what it is that they were trying to communicate with each other.
22

23
00:01:56,350 --> 00:02:03,640
If you were interested, I really recommend watching two videos that were done by Numberphile on YouTube and
23

24
00:02:03,670 --> 00:02:09,150
I've linked to it in the course resources list but it explains the Enigma machine
24

25
00:02:09,250 --> 00:02:15,550
and it talks about the flaw in the Enigma machine that led Alan Turing and other people at Bletchley
25

26
00:02:15,550 --> 00:02:23,080
Park to be able to crack the code and create what was very much a specialised computer to be able to decode
26

27
00:02:23,080 --> 00:02:26,350
those messages and helped the Allies win the war.
27

28
00:02:26,410 --> 00:02:27,990
And if you ever visit London
28

29
00:02:28,000 --> 00:02:33,100
be sure to go and check out Bletchley Park and they have a computer museum next to it as well which
29

30
00:02:33,100 --> 00:02:34,840
is super fascinating.
30

31
00:02:34,870 --> 00:02:36,070
Anyways I digress.
31

32
00:02:36,070 --> 00:02:42,280
So back to ciphers and encryption. One of the earliest ways of encrypting messages that we know about
32

33
00:02:42,550 --> 00:02:44,710
is the Caesar cipher.
33

34
00:02:44,710 --> 00:02:52,450
And this comes from Julius Caesar who was one of the generals in the Roman Empire and what he did is
34

35
00:02:52,540 --> 00:02:58,060
he would send messages to his generals and he would encrypt it
35

36
00:02:58,060 --> 00:03:04,090
so if his messenger got murdered along the way then his messages would be kept secret.
36

37
00:03:04,090 --> 00:03:09,260
And this is one of the simplest forms of encryption we know about.
37

38
00:03:09,430 --> 00:03:10,540
And it's very simple.
38

39
00:03:10,540 --> 00:03:12,560
Let's say we have the alphabet right?
39

40
00:03:12,580 --> 00:03:18,520
ABCDEFG. All that the Caesar Cipher does it's a letter substitution cipher.
40

41
00:03:18,730 --> 00:03:24,790
And the key for the cipher is the number of letters that you would shift by.
41

42
00:03:24,910 --> 00:03:32,370
So if you knew what the shift pattern was then you could really quickly decipher the message.
42

43
00:03:32,380 --> 00:03:38,200
So if we were to encrypt the word Hello there's a really neat tool online that can help us do that.
43

44
00:03:38,230 --> 00:03:44,800
It's called cryptii.com and it's got two 'i's at the end. And you can basically choose the kind of
44

45
00:03:44,800 --> 00:03:52,000
cipher or encryption that you want to-- that you want to use and then you can specify a shift and we're
45

46
00:03:52,000 --> 00:03:54,130
going to see a shift of three let's say.
46

47
00:03:54,130 --> 00:04:02,140
So if my text was Hello, then it becomes shifted into "khoor" and to an unknowing person and a non cryptographer
47

48
00:04:02,500 --> 00:04:07,350
it can be quite difficult to see at a glance what exactly this is trying to say.
48

49
00:04:07,510 --> 00:04:14,740
Now in modern days and with modern cryptography this is overly simplistic and it's very very easy to
49

50
00:04:14,740 --> 00:04:15,580
crack.
50

51
00:04:15,730 --> 00:04:21,790
But there are other forms of encryption which are a little bit more complicated and it involves a lot
51

52
00:04:21,790 --> 00:04:26,900
more maths to make it more time consuming for somebody to crack.
52

53
00:04:27,040 --> 00:04:31,330
But essentially all encryption works exactly the same way.
53

54
00:04:31,450 --> 00:04:40,610
You have a way of scrambling your message and it requires a key to be able to unscramble that message.
54

55
00:04:40,630 --> 00:04:40,930
All right.
55

56
00:04:40,960 --> 00:04:46,360
So now that we've learned all about encryption, it's time to go ahead and implement it so that we can
56

57
00:04:46,360 --> 00:04:51,040
encrypt our users passwords on our database and keep it secure.
57

58
00:04:51,580 --> 00:04:57,130
So the npm package that we're going to use is something called mongoose-encryption.
58

59
00:04:57,550 --> 00:05:04,900
And if you take a look at the documentation it's basically a very simple encryption package that works
59

60
00:05:05,110 --> 00:05:06,220
with a mongoose.
60

61
00:05:06,250 --> 00:05:07,870
So it's perfect for us.
61

62
00:05:08,200 --> 00:05:14,710
So it uses an encryption algorithm called AES which is a relatively modern encryption algorithm
62

63
00:05:14,740 --> 00:05:20,610
and it is far more secure than something like the Caesar cipher which is very very easy to break.
63

64
00:05:20,620 --> 00:05:26,280
Now before we get started I recommend you just have a quick read of the documentation here.
64

65
00:05:26,290 --> 00:05:29,020
This package does two things:
65

66
00:05:29,020 --> 00:05:32,340
it can encrypt and it can authenticate.
66

67
00:05:32,350 --> 00:05:37,900
We're only going to use its most basic functionality which is encryption and we're going to leave the
67

68
00:05:37,900 --> 00:05:40,260
authentication for a later lesson
68

69
00:05:40,360 --> 00:05:43,420
when we discuss things such as hashing algorithms.
69

70
00:05:43,420 --> 00:05:50,260
So as always to begin we're going to go ahead and install that package into our project.
70

71
00:05:50,260 --> 00:05:50,530
All right.
71

72
00:05:50,560 --> 00:06:00,050
So first things first, let's stop our server from running and let's go ahead and install mongoose-encryption.
72

73
00:06:00,100 --> 00:06:03,810
Let's just make sure that we don't have any typos in that name and
73

74
00:06:03,910 --> 00:06:05,830
let's hit enter.
74

75
00:06:05,830 --> 00:06:13,990
So while NPM is installing that package we can go ahead and require it in our app.js.
75

76
00:06:14,020 --> 00:06:25,170
So I'm going to call this encrypt and we're going to set it equal require mongoose-encryption. All
76

77
00:06:25,170 --> 00:06:25,370
right.
77

78
00:06:25,730 --> 00:06:32,170
So now that we have the package required and installed, we're gonna go ahead and use it.
78

79
00:06:32,300 --> 00:06:34,260
And of course to figure out how we do that
79

80
00:06:34,280 --> 00:06:42,760
we go to the documentation. So it briefly describes how the encryption actually works
80

81
00:06:42,830 --> 00:06:46,540
and then it tells you how to get started.
81

82
00:06:46,610 --> 00:06:50,180
So we've got installation step which we've already done,
82

83
00:06:50,210 --> 00:06:52,850
so now we're onto the usage step.
83

84
00:06:53,210 --> 00:06:58,640
So firstly we have to require mongoose and require mongoose-encryption and then we have to change our
84

85
00:06:58,640 --> 00:07:05,840
Mongoose schema a little bit because notice that in their Mongoose schema they're actually creating a new
85

86
00:07:06,020 --> 00:07:12,350
Mongoose schema whereas ours is just a very simple Javascript object.
86

87
00:07:12,350 --> 00:07:18,770
Now this works as long as you're not doing anything fancy with the schema. But in this case, as you'll
87

88
00:07:18,770 --> 00:07:25,400
see later on, we're actually adding this encrypt package as a plugin to that Mongoose schema.
88

89
00:07:25,400 --> 00:07:31,250
So we're going to have to level up a little bit and turn our schema into a proper Mongoose schema object
89

90
00:07:31,850 --> 00:07:37,580
and in fact if you take a look at the schema section in the Mongoose documentation where they talk about
90

91
00:07:37,580 --> 00:07:43,880
defining your schema, you can see that they're also creating a new mongoose.Schema and then they're creating
91

92
00:07:43,970 --> 00:07:48,260
a new object from that class in order to define the schema.
92

93
00:07:48,260 --> 00:07:54,640
So let's go ahead and change our very simple version of a schema into a full Mongoose schema.
93

94
00:07:54,800 --> 00:08:02,060
So we're going to type new mongoose.Schema with a capital "S" and then we can open a set of parentheses
94

95
00:08:02,120 --> 00:08:05,450
to enclose this entire Javascript object.
95

96
00:08:05,450 --> 00:08:08,180
So one here and one here.
96

97
00:08:08,210 --> 00:08:15,740
So now this user schema is no longer just a simple Javascript object but it's actually an object that's
97

98
00:08:15,740 --> 00:08:19,580
created from the Mongoose schema class.
98

99
00:08:19,700 --> 00:08:24,950
So, let's go ahead and hit save and then let's see what else we need to do.
99

100
00:08:25,310 --> 00:08:32,390
So there's two ways of going about encrypting your database using this Mongoose encryption package.
100

101
00:08:32,450 --> 00:08:39,880
One way is to create an encryption key and assigning key. Alternatively and the one that we're going
101

102
00:08:39,880 --> 00:08:48,130
to be using is a little bit later down in the documentation which is why it's helpful to read the entire
102

103
00:08:48,490 --> 00:08:49,840
documentation.
103

104
00:08:49,930 --> 00:08:56,500
We're going to be using the convenient method of defining a secret which is simply a long string and
104

105
00:08:56,500 --> 00:09:00,750
then we're going to use that secret to encrypt our database.
105

106
00:09:00,790 --> 00:09:04,000
So let's go ahead and define that secret down here.
106

107
00:09:04,330 --> 00:09:11,620
So I'm gonna create a new constant that's called secret and this is gonna be set to a long string that
107

108
00:09:11,620 --> 00:09:12,850
you're going to keep secret.
108

109
00:09:12,850 --> 00:09:23,670
So let's say ThisisourLittlesecret. And now we're ready to use that secret to encrypt our database
109

110
00:09:24,110 --> 00:09:31,550
and we do that by taking that schema that we defined earlier on over here and we're going to add our
110

111
00:09:31,590 --> 00:09:39,190
Mongoose encrypt as a plug in to our schema and we're gonna pass over our secret as a Javascript object.
111

112
00:09:39,360 --> 00:09:46,170
So let's go ahead and implement this line of code in our app.js and I'm gonna put it right below
112

113
00:09:46,170 --> 00:09:46,880
here.
113

114
00:09:46,890 --> 00:09:53,580
Now it's important that you add this plugin to the schema before you create your Mongoose model because
114

115
00:09:53,580 --> 00:09:59,940
you can see that we're passing in the userSchema as a parameter to create our new Mongoose model,
115

116
00:09:59,940 --> 00:10:01,560
that's the user model.
116

117
00:10:01,650 --> 00:10:08,430
But before then, we're going to add our encrypt package as a plugin. And if you have a moment to spare, do
117

118
00:10:08,430 --> 00:10:13,690
read the part of the documentation on plugins on the Mongoose website
118

119
00:10:13,710 --> 00:10:20,850
and it talks about how essentially what plugins are is that just extra bits of packaged code that you
119

120
00:10:20,850 --> 00:10:28,240
can add to the Mongoose schemas to extend their functionality or give them more powers essentially.
120

121
00:10:29,040 --> 00:10:36,810
So now that our schema has this encryption power enabled, but what this will do is it will encrypt our
121

122
00:10:36,810 --> 00:10:38,160
entire database.
122

123
00:10:38,160 --> 00:10:44,520
Now you may or may not want that kind of behavior for your database because later on when the user logs
123

124
00:10:44,520 --> 00:10:50,010
in we're going to have to search through our database to find their email address.
124

125
00:10:50,040 --> 00:10:56,850
It's best if we only encrypt the password field and leave the email field unencrypted.
125

126
00:10:56,850 --> 00:11:03,360
So to do that, we have to change an option for our Mongoose encryption package and the option that we're
126

127
00:11:03,360 --> 00:11:11,640
going to change is to only encrypt certain fields and they cover that in this section of the documentation.
127

128
00:11:12,060 --> 00:11:20,040
And to do that all you have to do is to add this option "encryptedFields" into that JavaScript object
128

129
00:11:20,130 --> 00:11:22,980
at the end of that plugin code.
129

130
00:11:23,250 --> 00:11:29,910
So we're going to copy this little part here and we're going to add it just before the closing curly
130

131
00:11:29,910 --> 00:11:30,480
brace,
131

132
00:11:30,510 --> 00:11:32,760
so right after our secret
132

133
00:11:33,000 --> 00:11:39,940
right here. Now in our case the encrypted field is not age but it's going to be the password field.
133

134
00:11:40,050 --> 00:11:47,520
So we're going to swap out this particular input with password and that's just a simple string that
134

135
00:11:47,520 --> 00:11:52,650
you put in there that you have to make sure matches with one of the names of your fields.
135

136
00:11:52,650 --> 00:11:59,100
Now if you wanted to encrypt multiple fields you can also do that just by adding other entries into
136

137
00:11:59,190 --> 00:12:00,900
this array.
137

138
00:12:01,380 --> 00:12:08,940
So now that we've added our encryption package to our userSchema, we've defined the secret that we're
138

139
00:12:08,940 --> 00:12:15,730
going to use to encrypt our password and also the field that we actually want to encrypt,
139

140
00:12:15,750 --> 00:12:17,540
we're pretty much done.
140

141
00:12:17,820 --> 00:12:24,870
So we don't actually have to do anything else special in the register or the login sections because
141

142
00:12:25,260 --> 00:12:33,300
the way that Mongoose encrypt works is that it will encrypt when you call save, and then it will decrypt
142

143
00:12:33,540 --> 00:12:35,180
when you call find.
143

144
00:12:35,190 --> 00:12:41,640
So that means that when we create a new user with an email a password and we call save, automatically
144

145
00:12:41,640 --> 00:12:49,260
behind the scenes Mongoose encrypt will encrypt our password field. And when we later on try to find
145

146
00:12:49,380 --> 00:12:57,180
our document based off the email that the user has entered then at this stage Mongoose encrypt will decrypt
146

147
00:12:57,300 --> 00:13:02,400
our password field to be able to check it in this step and see if the user can login.
147

148
00:13:03,000 --> 00:13:11,720
So let's save our file and let's go ahead and run it by using nodemon
148

149
00:13:12,030 --> 00:13:20,190
app.js and make sure there's no errors on running it. Then we can go ahead and hit up localhost:3000
149

150
00:13:20,640 --> 00:13:22,830
and try to register.
150

151
00:13:22,830 --> 00:13:26,310
So we've already created a user called 1@2.com,
151

152
00:13:26,310 --> 00:13:34,160
let's create a2b.com now and let's define their password as qwerty,
152

153
00:13:34,260 --> 00:13:42,360
so the first six letters of the keyboard and believe it or not this is one of the top five passwords
153

154
00:13:42,390 --> 00:13:48,330
that's used by people all across the world along with the actual word password
154

155
00:13:48,480 --> 00:13:50,930
and 123456.
155

156
00:13:50,940 --> 00:13:56,940
Now if I have read out your password just now, please change it while you learning security. It's a good
156

157
00:13:56,940 --> 00:13:58,620
idea to update your own as well.
157

158
00:13:59,400 --> 00:14:04,790
So let's go ahead and hit register and we've been taken to the secret page.
158

159
00:14:04,830 --> 00:14:09,780
So that means we've successfully saved our new user into our database.
159

160
00:14:09,780 --> 00:14:16,770
So let's take a look at that user inside Robo 3T. So we can see that previously when we didn't encrypt
160

161
00:14:16,830 --> 00:14:20,330
our password it's just out there in plain sight
161

162
00:14:20,330 --> 00:14:23,870
basically. Anyone can read this user's password.
162

163
00:14:24,650 --> 00:14:33,230
But now that we have added our encryption, you can see that it's now a very long binary string that is
163

164
00:14:33,230 --> 00:14:37,520
very hard for anybody to guess what it might be.
164

165
00:14:37,520 --> 00:14:44,570
So that means if somebody hacks into our database they won't be able to skim everybody's password immediately
165

166
00:14:44,840 --> 00:14:46,190
like they can do here.
166

167
00:14:46,520 --> 00:14:50,680
So we've updated the security for our users just a little bit.
167

168
00:14:50,720 --> 00:14:54,390
So let's see how Mongoose encryption handles decryption.
168

169
00:14:54,380 --> 00:14:58,120
So let's go back to the home page and try to log in our user
169

170
00:14:58,130 --> 00:15:04,740
that was a@b.com and let's put in their password which was qwerty.
170

171
00:15:04,920 --> 00:15:05,790
Let's go ahead and click
171

172
00:15:05,790 --> 00:15:06,480
Login.
172

173
00:15:06,480 --> 00:15:15,000
So it's taken me to the secret website and we know that on our database that password is stored encrypted.
173

174
00:15:15,000 --> 00:15:22,290
So that means that when we perform that findOne step, Mongoose encrypt was successful in decrypting
174

175
00:15:22,290 --> 00:15:26,010
the password to be able to compare it at this stage.
175

176
00:15:26,010 --> 00:15:31,800
And if you want to, you can actually log the value of foundUser.password inside the
176

177
00:15:31,830 --> 00:15:36,150
findOne completion block and you'll see it in plain text.
177

178
00:15:36,750 --> 00:15:45,780
So this does mean that if somebody was to hack into your website, then they probably will get access
178

179
00:15:45,840 --> 00:15:46,770
to your app.
179

180
00:15:46,910 --> 00:15:49,830
js. It's not that hard to access it.
180

181
00:15:49,830 --> 00:15:53,280
And once they do, they'll find your secret.
181

182
00:15:53,410 --> 00:16:02,010
And once they've found your secret then they can use the same package to decrypt all of your users passwords.
182

183
00:16:02,010 --> 00:16:09,570
So as long as we're able to recover the plain text version of our users passwords we're still kind of
183

184
00:16:09,570 --> 00:16:10,740
leaving them out to dry.
184

185
00:16:11,340 --> 00:16:18,060
So in the next lesson I want to cover something called environment variables and we're going to learn
185

186
00:16:18,060 --> 00:16:26,880
that to enable us to store secrets such as our encryption keys or things like API keys that are tied to credit
186

187
00:16:26,880 --> 00:16:27,670
cards,
187

188
00:16:27,720 --> 00:16:31,320
anything that you want to keep secure essentially.
188

189
00:16:31,320 --> 00:16:34,440
So for all of that and more, I'll see you on the next lesson.
