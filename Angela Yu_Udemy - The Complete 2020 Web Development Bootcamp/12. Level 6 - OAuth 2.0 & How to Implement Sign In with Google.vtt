WEBVTT
0
1
00:00:01.760 --> 00:00:02.110
All right.
1

2
00:00:02.110 --> 00:00:04.300
It's time to level up yet again
2

3
00:00:04.300 --> 00:00:06.220
and we're now on level 6
3

4
00:00:06.220 --> 00:00:10.520
and on this last level we're going to talk about third party
4

5
00:00:10.650 --> 00:00:11.240
OAuth.
5

6
00:00:11.710 --> 00:00:14.400
Now what exactly is OAuth?
6

7
00:00:14.410 --> 00:00:22.130
You might have heard of this term but all it is it's simply a open standard for token based authorization.
7

8
00:00:22.150 --> 00:00:24.040
Now what did all of that mean?
8

9
00:00:24.040 --> 00:00:25.390
Well let me explain.
9

10
00:00:25.390 --> 00:00:27.030
So you've heard of Facebook right?
10

11
00:00:27.040 --> 00:00:29.740
But let's say that we're building a different web app.
11

12
00:00:29.740 --> 00:00:35.260
Let's say we're building a social network that's going to be the new Facebook and it's going to be called
12

13
00:00:35.410 --> 00:00:43.210
bracebook. And bracebook is an awesome social network for people who have braces.
13

14
00:00:43.210 --> 00:00:49.660
Now when you're a new user who's signing up for bracebook you probably won't have any friends in the
14

15
00:00:49.660 --> 00:00:50.490
beginning right?
15

16
00:00:50.500 --> 00:00:56.110
And nobody likes a social network where you have no social connections and nobody wants to feel like
16

17
00:00:56.260 --> 00:00:57.640
they have no friends.
17

18
00:00:57.640 --> 00:01:05.020
So what can we do as the developers of bracebook to make this process of joining our social network
18

19
00:01:05.110 --> 00:01:06.430
a little bit easier?
19

20
00:01:06.430 --> 00:01:13.510
Well we can ask the user for permission to access their Facebook account and see which friends they
20

21
00:01:13.510 --> 00:01:19.570
have on Facebook are already users of our service bracebook.
21

22
00:01:19.570 --> 00:01:25.960
So now once a user sign up they'll already see that three of their friends are already on bracebook
22

23
00:01:26.200 --> 00:01:33.260
and they're ready to get started in a new life of socializing with their be braced friends.
23

24
00:01:33.280 --> 00:01:35.380
Now how would this work exactly?
24

25
00:01:35.440 --> 00:01:42.490
Well, on our login page we can ask the user to sign in either manually where they don't get the benefits
25

26
00:01:42.580 --> 00:01:49.630
of instantly connecting with their friends who have braces or we can get them to login with Facebook.
26

27
00:01:50.230 --> 00:01:58.510
And in this case what would happen is we would make a GET request to Facebook asking them for this user's
27

28
00:01:58.570 --> 00:02:06.350
friends on Facebook and Facebook would return with a POST request with that list of users and emails.
28

29
00:02:06.370 --> 00:02:08.990
So this might be a really simplified version of that.
29

30
00:02:09.070 --> 00:02:15.450
It's just a straight up table of this particular user's friends on Facebook and all of their emails.
30

31
00:02:15.460 --> 00:02:23.350
So then this gets passed over to our server where we can compare it against our database of users and
31

32
00:02:23.350 --> 00:02:28.220
see whether if we have any matching users who have the same email addresses.
32

33
00:02:28.270 --> 00:02:36.400
So now we know that for this user we have three friends of theirs who are already on bracebook and we'll
33

34
00:02:36.400 --> 00:02:41.290
be able to automatically add them as a friend onto bracebook.
34

35
00:02:41.290 --> 00:02:46.630
And it's also a similar scenario if you are signing up to LinkedIn for example. If you couldn't be bothered
35

36
00:02:46.630 --> 00:02:54.100
to type in all of your contacts email addresses to find on LinkedIn and add them individually, then what
36

37
00:02:54.100 --> 00:03:00.970
LinkedIn might do is it asked you to log in via Google and it will look through all of your contacts
37

38
00:03:01.060 --> 00:03:06.450
on Gmail in order to add them automatically to LinkedIn.
38

39
00:03:06.460 --> 00:03:15.340
So by using OAuth we're able to access pieces of information on these third party websites such as their
39

40
00:03:15.340 --> 00:03:18.480
friends, emails or their contacts on Gmail.
40

41
00:03:18.670 --> 00:03:25.910
But in our case because we're talking about authentication and leveling up the security of our authentication
41

42
00:03:26.050 --> 00:03:34.420
another really big benefit involves delegating the task of managing passwords securely to these companies
42

43
00:03:34.420 --> 00:03:36.270
like Facebook and Google.
43

44
00:03:36.280 --> 00:03:39.440
So as we mentioned before, every day or so
44

45
00:03:39.490 --> 00:03:46.090
yet another company gets hacked. And these companies tend to be kind of low tech companies, companies
45

46
00:03:46.090 --> 00:03:53.200
that are not Facebook, Google, Amazon, who are really known for having great engineers, great teams who
46

47
00:03:53.200 --> 00:03:59.680
are able to implement all of these levels of security for the authentication on their website. And they
47

48
00:03:59.680 --> 00:04:05.110
probably have thought about hashing and salting passwords or other data that they're storing.
48

49
00:04:05.230 --> 00:04:11.440
But there's more. There are things such as not only salting the passwords but also peppering the passwords.
49

50
00:04:11.440 --> 00:04:19.600
Some companies also encrypt the entire database containing the hashed passwords and have a wide array
50

51
00:04:19.690 --> 00:04:26.650
of complex mathematical solutions to keep their user passwords under lock and key.
51

52
00:04:26.650 --> 00:04:33.100
Now as a web developer, we could implement all of those things that I just spoke about and address all
52

53
00:04:33.100 --> 00:04:40.540
of the edge cases but it would take us a lot of time and a lot of development hours. So why not simply
53

54
00:04:40.540 --> 00:04:45.210
delegate this task to a large company like Facebook and Google?
54

55
00:04:45.310 --> 00:04:52.270
So then every time we log in our user we simply ask them to login on Facebook and Facebook will then
55

56
00:04:52.330 --> 00:04:55.620
authenticate them using their own secure methods.
56

57
00:04:55.630 --> 00:05:01.780
And once that's done, Facebook sends us back a message saying "This user is authenticated.
57

58
00:05:01.790 --> 00:05:03.560
There are real Facebook user
58

59
00:05:03.740 --> 00:05:07.280
and they have got their correct username and passwords.
59

60
00:05:07.280 --> 00:05:09.720
So go ahead and authenticate them as well."
60

61
00:05:09.860 --> 00:05:12.590
And that will make our lives a lot easier.
61

62
00:05:12.590 --> 00:05:14.640
We'll have a lot less liability
62

63
00:05:14.810 --> 00:05:19.940
and this is the way that you're seeing a lot of websites going where they only have third party log
63

64
00:05:19.940 --> 00:05:20.160
in.
64

65
00:05:20.170 --> 00:05:22.850
Like login with Twitter, Facebook, Google, GitHub.
65

66
00:05:23.360 --> 00:05:28.290
But in order for us to be able to do all of this we need to learn about OAuth.
66

67
00:05:28.340 --> 00:05:33.330
That is the glue that binds all of this together and makes it actually tick.
67

68
00:05:33.350 --> 00:05:36.470
Now what exactly is special about OAuth 
68

69
00:05:36.470 --> 00:05:42.920
because there's a lot of other open standards that does something similar to this? But OAuth is quite
69

70
00:05:42.920 --> 00:05:44.420
special in three ways.
70

71
00:05:44.480 --> 00:05:50.230
The first way is that it allows you to grant a granular level of access.
71

72
00:05:50.270 --> 00:05:56.660
What does that mean? That means that when your user logs in with Facebook, you can request specific things
72

73
00:05:56.750 --> 00:05:58.880
from their Facebook account.
73

74
00:05:59.360 --> 00:06:06.260
So you could say that for my app I only really need their profile and email address. But say if you were
74

75
00:06:06.260 --> 00:06:11.660
Tinder and you wanted to know who or their friends were so you don't accidentally match them up
75

76
00:06:12.020 --> 00:06:15.170
then you might want to know also their list of friends.
76

77
00:06:15.560 --> 00:06:17.750
So this is what I mean by granularity.
77

78
00:06:17.840 --> 00:06:23.750
The app developer can determine what kind of data do they need from the user's facebook account and
78

79
00:06:23.750 --> 00:06:26.120
request those accordingly.
79

80
00:06:26.120 --> 00:06:32.960
Now the second thing about OAuth is it allows for either read only or read and write access.
80

81
00:06:32.960 --> 00:06:39.140
So in the case of Facebook this means that you can either ask them to just retrieve pieces of information
81

82
00:06:39.530 --> 00:06:43.250
about their Facebook account so what's their name, what their email,
82

83
00:06:43.310 --> 00:06:44.680
who are their friends.
83

84
00:06:44.990 --> 00:06:48.520
Or you can ask for right access as well.
84

85
00:06:48.560 --> 00:06:55.520
Say for example in this case if WordPress wanted to be able to post to Facebook on this user's account
85

86
00:06:55.760 --> 00:06:59.780
then they would need to ask for read and write access.
86

87
00:06:59.780 --> 00:07:06.110
And the third thing is that the third party that you're using to authenticate your users should be able
87

88
00:07:06.110 --> 00:07:10.510
to revoke access at any point on their website.
88

89
00:07:10.520 --> 00:07:15.350
So that means if you're on authenticating with Facebook, the user should be able to go into their Facebook
89

90
00:07:15.350 --> 00:07:22.910
account and deauthorize the access that they granted to your websites, say bracebook. And they don't actually
90

91
00:07:22.910 --> 00:07:27.780
have to go onto your website where maybe you're less keen to give up this access.
91

92
00:07:27.830 --> 00:07:34.280
So now that we've looked at what's special about OAuth, the next thing to talk about is, well how does it
92

93
00:07:34.340 --> 00:07:36.690
actually work in reality?
93

94
00:07:36.710 --> 00:07:44.570
So the first step is to actually tell this third party, be at Facebook, Twitter or Google, about our Web
94

95
00:07:44.660 --> 00:07:47.380
application because they don't know about us
95

96
00:07:47.390 --> 00:07:48.190
right?
96

97
00:07:48.200 --> 00:07:54.830
So we have to set up our app in their developer console and in return we get what's called an app id
97

98
00:07:54.950 --> 00:08:01.850
or a client id and we or our website is then the client which will make their request to Facebook
98

99
00:08:02.060 --> 00:08:04.280
to authenticate our user.
99

100
00:08:04.280 --> 00:08:09.170
Now once you've set up your app, the next step happens when the user tries to log on to your website.
100

101
00:08:09.560 --> 00:08:16.100
So when the user hits up bracebook.com and they want to authenticate, we give them an option to log
101

102
00:08:16.100 --> 00:08:17.750
in with Facebook.
102

103
00:08:17.900 --> 00:08:24.350
So once they click on that option then we'll take them to the actual Facebook website so that they
103

104
00:08:24.350 --> 00:08:31.970
are seeing a familiar interface, a trustworthy interface and they'll log into Facebook using their Facebook
104

105
00:08:31.970 --> 00:08:39.950
credentials. And without OAuth what we would have to do is to ask the user, "Hey what's your login credentials
105

106
00:08:39.950 --> 00:08:40.640
for Facebook?
106

107
00:08:40.640 --> 00:08:42.920
Can you give me your Facebook password?"
107

108
00:08:42.920 --> 00:08:44.530
Nobody wants to do that.
108

109
00:08:44.540 --> 00:08:47.870
That seems super sketchy and really insecure.
109

110
00:08:47.980 --> 00:08:55.220
OAuth makes that step a lot easier because it gets them to log in on the website that they actually trust
110

111
00:08:55.280 --> 00:08:56.540
which is Facebook
111

112
00:08:56.540 --> 00:08:56.750
right?
112

113
00:08:56.740 --> 00:09:03.350
Something that they've been using for a long time. Now once  the user logs in on this third party
113

114
00:09:03.350 --> 00:09:08.720
then they have to review the permissions that our website is asking for.
114

115
00:09:08.720 --> 00:09:15.710
So for example you might want your profile and email address and they review that and they're like OK
115

116
00:09:15.890 --> 00:09:17.710
I'll grant that permission.
116

117
00:09:17.720 --> 00:09:25.000
So now that they've granted the permission and they've successfully logged in on Facebook then our web
117

118
00:09:25.000 --> 00:09:31.820
site will receive an authorization code from Facebook and this allows us to check to make sure that
118

119
00:09:31.820 --> 00:09:38.060
the user actually successfully signed on to Facebook. They had the right username and password.
119

120
00:09:38.150 --> 00:09:43.500
So we're now able to authenticate them and log them on to our website.
120

121
00:09:43.640 --> 00:09:52.350
But if we wanted to go a step further, we can also exchange our authentication code for an access token.
121

122
00:09:52.430 --> 00:09:58.490
And when we receive that access token from Facebook we would save it into our database because this
122

123
00:09:58.490 --> 00:10:05.150
is the token that we can use if we want to request for pieces of information subsequently. This access
123

124
00:10:05.150 --> 00:10:09.550
token is valid for a lot longer than the authentication token.
124

125
00:10:09.590 --> 00:10:15.130
So the way you should see it is that the authentication code or the OAuth code is kind of like a ticket
125

126
00:10:15.140 --> 00:10:18.290
right? A ticket that you are going to use once  to enter the cinema.
126

127
00:10:18.770 --> 00:10:24.410
But the access token is kind of more like a year pass and it comes with benefits like backstage access
127

128
00:10:24.760 --> 00:10:31.700
where you get to request pieces of data from Facebook including their friend list or that username or
128

129
00:10:31.700 --> 00:10:36.650
their password whatever it may be that they granted you permission to access.
129

130
00:10:36.650 --> 00:10:42.200
So the OAuth code is what we need to authenticate user that they successfully managed to log in through
130

131
00:10:42.200 --> 00:10:49.070
Facebook and the access token is what we'll use to access pieces of information that are stored on that
131

132
00:10:49.070 --> 00:10:50.040
user's account
132

133
00:10:50.090 --> 00:10:54.800
nn these third parties website for example their email or their friends list.
133

134
00:10:54.860 --> 00:11:00.680
So now that we've seen all of this let's go ahead and actually put it into practice and in our case
134

135
00:11:00.950 --> 00:11:07.100
we're going to be implementing login with Google using a passport and Google OAuth.
135

136
00:11:07.160 --> 00:11:07.460
All right.
136

137
00:11:07.490 --> 00:11:14.210
So enough theory let's get started implementing it and adding login with Google to our website.
137

138
00:11:14.720 --> 00:11:21.410
So first things first, let's head over to passportjs.org and we're going to go and find the strategy
138

139
00:11:21.410 --> 00:11:22.550
that we need.
139

140
00:11:22.550 --> 00:11:28.000
So here you'll find this two Google OAuth strategies. One is passport
140

141
00:11:28.010 --> 00:11:30.130
Google OAuth and the other one
141

142
00:11:30.140 --> 00:11:35.990
if you scroll down a little bit is passport Google OAuth 2.0.
142

143
00:11:36.020 --> 00:11:38.470
Now it's quite important that we choose the right one.
143

144
00:11:38.540 --> 00:11:44.680
And we're using the latest implementation of OAuth,  OAuth  2.0 with Google.
144

145
00:11:44.690 --> 00:11:46.460
So let's select this one.
145

146
00:11:46.460 --> 00:11:54.150
Now here we have the actual strategy NPM package passport-google-oauth20.
146

147
00:11:54.170 --> 00:11:57.270
So in order to use it we first have to install it.
147

148
00:11:57.290 --> 00:12:05.660
So let's go ahead and copy this over to our hyperterminal making sure you're still in the same directory
148

149
00:12:05.780 --> 00:12:10.660
and we're going to npm install this package.
149

150
00:12:10.670 --> 00:12:16.470
Now while that's going, let's take a look at what else we need to do in order to set it up and use it.
150

151
00:12:17.090 --> 00:12:23.960
So the first thing they want us to do is to create an application on the Google developers console
151

152
00:12:24.350 --> 00:12:26.380
and there's a direct link that should take you there.
152

153
00:12:26.550 --> 00:12:31.940
Now once you're here you should be able to go ahead and create a project. So you can either click on
153

154
00:12:31.940 --> 00:12:36.020
here or go over here and click on new project.
154

155
00:12:36.020 --> 00:12:41.840
Now we're going to give our project the name of secrets and you can leave everything else and go ahead
155

156
00:12:41.840 --> 00:12:42.980
and click Create.
156

157
00:12:43.490 --> 00:12:43.750
All right.
157

158
00:12:43.760 --> 00:12:50.120
So that takes a little while but once it's done, we should be able to go ahead and set up our credentials
158

159
00:12:50.420 --> 00:12:51.480
for Google
159

160
00:12:51.500 --> 00:12:51.990
OAuth.
160

161
00:12:52.100 --> 00:12:58.340
So let's click on this tab and the first thing we have to do is go to the OAuth consent screen over here
161

162
00:12:58.880 --> 00:13:04.630
and we're simply going to configure the screen that the user sees when they login through Google
162

163
00:13:04.670 --> 00:13:08.190
and grant your application access to their data.
163

164
00:13:08.390 --> 00:13:13.130
So it's helpful for them to know what application they're talking about
164

165
00:13:13.130 --> 00:13:15.980
so we're just going to put in the name of our app here,
165

166
00:13:16.250 --> 00:13:21.380
and if you have a logo for your app this is where you would upload it.
166

167
00:13:21.410 --> 00:13:28.700
So that on that screen when the user gets asked for permission for your app to access say their contact
167

168
00:13:28.730 --> 00:13:34.790
or their friend or whatever it may be, they can quickly identify who it is that's asking for it and just
168

169
00:13:34.910 --> 00:13:39.150
be rest assured that it's the right one that they're giving permission to.
169

170
00:13:39.170 --> 00:13:42.570
But in our case we're going to leave all of that as blank.
170

171
00:13:42.800 --> 00:13:49.520
And the last thing I want to point out on this page is the part where it says scopes for Google APIs.
171

172
00:13:50.060 --> 00:13:56.450
And here are the fields that you will receive once the user logs in through Google.
172

173
00:13:56.450 --> 00:14:03.740
So in our case, we're probably only interested in the email and the profile ID of our user who's logged
173

174
00:14:03.740 --> 00:14:04.230
in.
174

175
00:14:04.310 --> 00:14:10.940
Now if you wanted more data from them such as. I don't know. their YouTube viewing history, their list of
175

176
00:14:10.940 --> 00:14:18.950
contacts on Gmail then, you would have to add a scope. And in order to add scopes you need to enable certain
176

177
00:14:18.990 --> 00:14:25.210
APIs. And Google API library has a whole bunch of APIs that you can actually tap into.
177

178
00:14:25.340 --> 00:14:31.520
So you can see where they've been using the maps API, you can see what emails have they got that are
178

179
00:14:31.520 --> 00:14:34.280
in drafts using the Gmail API,
179

180
00:14:34.280 --> 00:14:40.760
you could see what the YouTube videos they're looking at and you can also find out who their contacts
180

181
00:14:40.790 --> 00:14:46.650
are through the Google people API. And all of those involve jumping through extra hoops.
181

182
00:14:46.760 --> 00:14:52.620
But in our case we only want to authenticate them through the use of Google login.
182

183
00:14:52.700 --> 00:14:58.400
So we don't have to do any of that and all we need are the default ones that we get for free without
183

184
00:14:58.430 --> 00:15:05.590
even the user needing to see a permissions page because these three things are transmitted every time you
184

185
00:15:05.590 --> 00:15:06.730
authenticate with Google.
185

186
00:15:07.330 --> 00:15:13.420
So now that we're done, the last thing I'll add is that once your website is up and running and you've
186

187
00:15:13.420 --> 00:15:19.810
got a custom domain name and it's being hosted, then you'll want to add all of those things in here like
187

188
00:15:19.870 --> 00:15:25.600
a privacy policy page or terms of service link and also your main domain.
188

189
00:15:25.600 --> 00:15:27.700
So let's go ahead and hit save.
189

190
00:15:28.210 --> 00:15:34.840
And now we get to create our API credentials by clicking on this button. And the one that we want is the
190

191
00:15:34.960 --> 00:15:41.380
OAuth client ID and this is going to allow us to authenticate them using Google.
191

192
00:15:41.380 --> 00:15:47.700
So we're going to be using the OAuth 2.0 protocol and we are a web application.
192

193
00:15:47.710 --> 00:15:54.640
So we'll take that radio button and the name of our app is of course again secrets and there's two other
193

194
00:15:54.640 --> 00:15:56.440
fields that we have to fill in.
194

195
00:15:56.440 --> 00:16:03.080
One is the origin, so where is that request to Google going to come from.
195

196
00:16:03.160 --> 00:16:06.680
And in our case it's going to come from our local host.
196

197
00:16:06.850 --> 00:16:16.480
So we'll put an http://localhost:3000 and this is obviously for when we're
197

198
00:16:16.480 --> 00:16:17.620
testing.
198

199
00:16:17.620 --> 00:16:21.480
And when your websites live you can come back here and change it at any time.
199

200
00:16:21.730 --> 00:16:26.530
But while we're testing all of this, it's really important that we have all of these addresses and that
200

201
00:16:26.530 --> 00:16:28.730
yours as much as what you see on screen
201

202
00:16:28.750 --> 00:16:29.350
exactly.
202

203
00:16:30.010 --> 00:16:34.270
So the second thing that we have to add here is the redirect
203

204
00:16:34.270 --> 00:16:34.810
URI.
204

205
00:16:34.960 --> 00:16:40.720
So this is a route that we're going to plan out on our server when Google has authenticated our user
205

206
00:16:40.750 --> 00:16:47.950
to return to so that we can then locally authenticate them and save the session and cookies and all
206

207
00:16:47.950 --> 00:16:48.250
of that.
207

208
00:16:48.700 --> 00:17:00.250
So here we're gonna put HTTP://localhost:3000/auth/google
208

209
00:17:00.730 --> 00:17:07.690
/secrets. And I'm gonna come back to this route very very shortly but for now just check to make
209

210
00:17:07.690 --> 00:17:15.310
sure that you have inserted in here exactly the same string as I have because if it's not, then our authentication
210

211
00:17:15.310 --> 00:17:18.940
will fail and it'll be hard to identify down the line.
211

212
00:17:19.060 --> 00:17:24.790
So once you've made sure that both of these are correct then go ahead and hit enter and that adds those
212

213
00:17:24.850 --> 00:17:31.130
to our credentials and we can go ahead and create a client ID.
213

214
00:17:31.270 --> 00:17:40.150
So now we get a OAuth client ID and a client secret and these are super important and you should also
214

215
00:17:40.180 --> 00:17:41.680
keep them secret.
215

216
00:17:41.680 --> 00:17:45.190
So that means we're going to put it into our .env file.
216

217
00:17:45.190 --> 00:17:52.270
So I'm going to copy my client ID, I'm going to go back to Atom and open up my .env file and I'm
217

218
00:17:52.270 --> 00:17:55.030
going to add it in using the .env format.
218

219
00:17:55.060 --> 00:18:01.940
So this one is gonna be CLIENT_ID and it's going to be equal to that string that I copied
219

220
00:18:01.960 --> 00:18:09.410
over without any quotation marks or any other sort of Javascripty type of things.
220

221
00:18:09.460 --> 00:18:12.410
And the second one is going to be my client's secret.
221

222
00:18:12.580 --> 00:18:17.090
So let's copy that and add an CLIENT_SECRET
222

223
00:18:17.090 --> 00:18:19.920
and this is gonna be equal to that string.
223

224
00:18:19.960 --> 00:18:20.170
All right.
224

225
00:18:20.170 --> 00:18:27.100
So now that we can save those two things and we can get back to setting up our Google OAuth strategy using
225

226
00:18:27.100 --> 00:18:28.150
passport.
226

227
00:18:28.270 --> 00:18:29.470
So we've done this part.
227

228
00:18:29.470 --> 00:18:36.760
We've created an application on Google Developer console and we now have a client ID and client secret.
228

229
00:18:38.340 --> 00:18:45.600
So now we get to configure our strategy. And the first thing that we have to do is we have to require
229

230
00:18:45.660 --> 00:18:47.820
this package in our code.
230

231
00:18:47.850 --> 00:18:53.880
So I'm gonna go ahead and copy this part and I'm gonna change it to a const but other than that I'm
231

232
00:18:53.880 --> 00:18:55.720
going to leave it exactly the same.
232

233
00:18:55.770 --> 00:19:03.510
So it's a new constant called GoogleStrategy and it uses the passport-google-oauth20 package that we installed
233

234
00:19:03.510 --> 00:19:07.430
just now and we're going to use it as a passport strategy.
234

235
00:19:07.830 --> 00:19:14.190
And the next part is where we get to set up our Google strategy and configure it using all of those
235

236
00:19:14.190 --> 00:19:16.890
details that we received just now.
236

237
00:19:16.890 --> 00:19:23.760
So I'm going to select and copy all of this code from passport use down to the very last semicolon just
237

238
00:19:23.760 --> 00:19:25.290
before authenticate requests.
238

239
00:19:25.500 --> 00:19:31.260
And I'm gonna paste it in here below where we have serialize and deserialize our user.
239

240
00:19:31.260 --> 00:19:33.570
So right here.
240

241
00:19:33.570 --> 00:19:38.430
And it's really important that your code goes in the right order.
241

242
00:19:38.460 --> 00:19:44.190
So for example we can't put that code above this line because it won't work and we can't put it above
242

243
00:19:44.190 --> 00:19:48.250
the session because then it won't save the user login sessions.
243

244
00:19:48.270 --> 00:19:54.380
So this is where we're going to put it after all of the setup and right before all the routes.
244

245
00:19:54.450 --> 00:19:57.750
So let's go ahead and update some of these place holders.
245

246
00:19:57.810 --> 00:20:04.380
So we have to add in our client ID which is in our .env file and so we're going to write process
246

247
00:20:04.830 --> 00:20:15.140
.env.CLIENT_ID. And we're going to do the same for our clients secret. And finally
247

248
00:20:15.380 --> 00:20:22.880
we have to change the callback URL to the same one that we put in on the Google API dashboard.
248

249
00:20:22.880 --> 00:20:26.230
So if you want to remind yourself what it is that you set
249

250
00:20:26.270 --> 00:20:29.660
just click on that and you'll be up to see it right here.
250

251
00:20:29.690 --> 00:20:35.570
And in fact I'm just going to copy that string directly so I don't make any typos and I'm going to paste
251

252
00:20:35.570 --> 00:20:39.630
it in between the quotation marks. And my callback
252

253
00:20:39.680 --> 00:20:47.630
URL hits up a path on my server at /auth/google/secrets which
253

254
00:20:47.630 --> 00:20:49.940
we will set up very very shortly.
254

255
00:20:49.940 --> 00:20:54.170
Now there's just one more thing that we need to add to this configuration.
255

256
00:20:54.470 --> 00:20:59.990
And the only reason why we need it is because Google has recently announced that they are sunsetting
256

257
00:21:00.290 --> 00:21:07.550
the Google+ API and all things related to Google+. And they're finally giving up on trying to
257

258
00:21:07.550 --> 00:21:13.060
make people use their Google+ service as a social media site.
258

259
00:21:13.070 --> 00:21:19.130
So if we head over to the GitHub repository for this package you can either paste this into Google
259

260
00:21:19.520 --> 00:21:22.720
or right click here and click copy.
260

261
00:21:22.760 --> 00:21:28.130
Now if you click on this actual address it takes you to a resource but we actually want to view it on
261

262
00:21:28.130 --> 00:21:28.820
Github
262

263
00:21:28.820 --> 00:21:32.140
and you can see that the link is here in the text.
263

264
00:21:32.150 --> 00:21:36.080
So we're just going to copy that and then I'm going to paste it in here
264

265
00:21:36.080 --> 00:21:40.260
and that's the actual repository on GitHub.
265

266
00:21:40.310 --> 00:21:43.230
So here if you go into the issue section
266

267
00:21:43.790 --> 00:21:48.910
I've noticed that people have been talking about the Google+ deprecation.
267

268
00:21:49.220 --> 00:21:56.430
And the problem is that Google made a recent announcement saying that Google+ is sunsetting.
268

269
00:21:56.450 --> 00:22:01.640
So previously this package relied on Google+ to obtain user information
269

270
00:22:01.640 --> 00:22:04.560
so they got the user's Google+ profile.
270

271
00:22:04.670 --> 00:22:09.530
And people are wondering how would we proceed once that API deprecates.
271

272
00:22:09.530 --> 00:22:15.920
So if you scroll down a little bit, you'll notice there's a post by this guy MarshallOfSound usually
272

273
00:22:15.920 --> 00:22:21.860
the most helpful posts have the most upvotes or thumbs up and you can see that when you're just scrolling
273

274
00:22:21.860 --> 00:22:23.460
through as well.
274

275
00:22:23.460 --> 00:22:29.600
And this guy is very kindly done all of the heavy lifting for us and he's put in a new pull request
275

276
00:22:29.690 --> 00:22:36.590
to fix this package in regard to this deprecation of the Google+ API.
276

277
00:22:36.620 --> 00:22:45.640
So now what he's saying is all you have to do to fix this is to simply add this in these strategy options.
277

278
00:22:45.770 --> 00:22:51.860
So let's go ahead and copy all of this and we're going to paste it right at the end here as the final
278

279
00:22:51.860 --> 00:22:52.750
option.
279

280
00:22:52.760 --> 00:22:58.160
So after the callback URL we're going to add a comma to separate it and we're going to paste in the
280

281
00:22:58.250 --> 00:23:06.050
userProfileURL option set as this link. And I'm just gonna delete the single quotation marks and
281

282
00:23:06.050 --> 00:23:07.970
change it into double
282

283
00:23:08.000 --> 00:23:14.990
just for consistency sake and now when we use passport to authenticate our users using Google OAuth 
283

284
00:23:15.290 --> 00:23:20.750
we're no longer gonna be retrieving their profile information from their Google+ account but instead
284

285
00:23:20.810 --> 00:23:26.900
we're going to retrieve it from their user info which is simply another endpoint on Google.
285

286
00:23:26.900 --> 00:23:29.570
Now how would you have known to do this?
286

287
00:23:29.570 --> 00:23:37.700
Well it's very likely that at some point if the Google+ API deprecates then your code might not work.
287

288
00:23:37.850 --> 00:23:41.720
You're probably going to get some warnings down the line in your console
288

289
00:23:41.720 --> 00:23:48.530
and it'll tell you something like "Google+ API deprecated. Fix it by doing this." And I'm simply pointing
289

290
00:23:48.530 --> 00:23:54.620
you to this to future-proof the course because I know that in a few weeks or a few months Google is
290

291
00:23:54.620 --> 00:23:57.230
going to pull the plug and your code might break.
291

292
00:23:57.230 --> 00:24:03.680
But adding this means that we should be now future-proof and it should now work for you even if you're
292

293
00:24:03.680 --> 00:24:06.650
listening to this far ahead in the future.
293

294
00:24:07.280 --> 00:24:14.180
So the next thing I want to point out is here are all the options for using the Google strategy to log
294

295
00:24:14.180 --> 00:24:14.800
in our user.
295

296
00:24:15.470 --> 00:24:19.150
And once that's gone through we have a callback function
296

297
00:24:19.340 --> 00:24:25.760
and this is where Google sends back a access token, which if you remember, is the thing that allows us
297

298
00:24:25.850 --> 00:24:34.490
to get data related to that user which allows us to access the user's data for a longer period of time.
298

299
00:24:34.700 --> 00:24:40.580
We've got their profile which is essentially what we're interested in because that's going to contain
299

300
00:24:40.580 --> 00:24:46.160
their email, their Google ID and anything else that we have access to.
300

301
00:24:46.430 --> 00:24:54.500
And finally we use the data that we get back, namely their Google ID, to either find a user with that
301

302
00:24:54.500 --> 00:25:00.260
ID in our database of users or create them if they don't exist.
302

303
00:25:00.290 --> 00:25:08.270
Now I think you have to realize is that if you try to search for this method, findOrCreate, it's not
303

304
00:25:08.360 --> 00:25:12.270
actually a MongoDB or a Mongoose function.
304

305
00:25:12.440 --> 00:25:18.410
And if you click the first thing you see in Google is a Stack Overflow query and this guy says "I can't
305

306
00:25:18.410 --> 00:25:22.330
find the documentation on this function and I can't make it work."
306

307
00:25:22.370 --> 00:25:26.330
And the answer is "This is not actually a function.
307

308
00:25:26.450 --> 00:25:28.690
It's something that passport,
308

309
00:25:28.700 --> 00:25:35.750
the people who documented this package came up with as pseudo codes or fake code and they basically
309

310
00:25:35.750 --> 00:25:41.570
try and tell you to implement some sort of functionality to find or create the user."
310

311
00:25:41.780 --> 00:25:47.330
And they point out how you might be able to implement something like this.
311

312
00:25:47.480 --> 00:25:56.660
So findOne, and then create the user and then save the user. So you can either follow this advice or
312

313
00:25:56.960 --> 00:25:59.950
something that might make your life a little bit easier
313

314
00:25:59.960 --> 00:26:06.490
is this guy has pointed out that there's actually an NPM package called mongoose-findorcreate.
314

315
00:26:06.800 --> 00:26:12.910
And this package essentially allows you to make that code just work.
315

316
00:26:12.980 --> 00:26:19.880
So they've created that function for you in the package and it does exactly the same as what this person
316

317
00:26:19.880 --> 00:26:21.740
has described up here.
317

318
00:26:21.740 --> 00:26:27.320
And all you have to do to make this work is to just install it and require it.
318

319
00:26:27.320 --> 00:26:28.990
So let's go ahead and do that.
319

320
00:26:29.000 --> 00:26:32.270
Let's npm install mongoose-findorcreate.
320

321
00:26:32.270 --> 00:26:38.920
I'm just going to copy it from the docs and paste it in here. And once that's installed the next thing
321

322
00:26:38.920 --> 00:26:43.360
we have to do is to require it in our app.js.
322

323
00:26:43.390 --> 00:26:49.890
So I'm going to create a new constant right at the top and I'm going to set it to equal findOrCreate.
323

324
00:26:49.900 --> 00:26:54.220
Notice how this is spelt exactly the same as this
324

325
00:26:54.220 --> 00:27:01.480
and when we tap into this findOrCreate it's going to look inside this package to see how it should implement
325

326
00:27:01.570 --> 00:27:02.890
that function.
326

327
00:27:02.890 --> 00:27:09.820
Now the final step that the documentation tells us to do is to add this as a plugin to our schema.
327

328
00:27:10.300 --> 00:27:16.410
So similar to what we did with our passportLocalMongoose package, we're going to also add this findOr
328

329
00:27:16.420 --> 00:27:23.800
Create package as a plugin. So userSchema.plugin findOrCReate.
329

330
00:27:23.800 --> 00:27:30.880
So now our code should work and we should be able to tap into our user model and call this function
330

331
00:27:30.880 --> 00:27:34.170
findOrCreate which previously didn't exist.
331

332
00:27:34.180 --> 00:27:39.970
So now that we've set all of this up in our backend, the next thing to do is to figure out a way for
332

333
00:27:39.970 --> 00:27:42.620
us to be able to tap into it from our frontend
333

334
00:27:42.640 --> 00:27:43.210
right?
334

335
00:27:43.300 --> 00:27:49.150
At the moment on our website there's no way of logging in with Google.
335

336
00:27:49.150 --> 00:27:57.550
If I run my server and I go over to localhost:3000 then you can see when I click on login or register
336

337
00:27:57.670 --> 00:28:05.170
there's no button for me to go down the Google authentication route because all of this is linked up
337

338
00:28:05.170 --> 00:28:07.750
to our local authentication.
338

339
00:28:07.750 --> 00:28:09.190
So what do we have to do?
339

340
00:28:09.190 --> 00:28:12.180
Well, we have to add some buttons onto these websites.
340

341
00:28:12.550 --> 00:28:18.940
So if you head into our views and go over to register.ejs, if you scroll down you can see there's
341

342
00:28:18.970 --> 00:28:22.560
a section of HTML code that is commented out.
342

343
00:28:22.590 --> 00:28:28.420
So if you select all of it and uncomment it by using Command + / or control + / on
343

344
00:28:28.420 --> 00:28:32.760
Windows then we now have activated our code here.
344

345
00:28:32.770 --> 00:28:38.830
So now when I refresh this page we get a button over here that says "Sign up with Google". And let's go ahead
345

346
00:28:38.860 --> 00:28:44.710
and do the same on our login page so that they can access the sign in with Google both when they try
346

347
00:28:44.710 --> 00:28:46.390
to login and register.
347

348
00:28:46.420 --> 00:28:51.670
So these buttons are pretty much identical other than where they're located.
348

349
00:28:51.670 --> 00:28:59.530
One is in registered and one is and login. And they both contain a anchor tag that links to the href/
349

350
00:28:59.530 --> 00:29:02.200
auth/google.
350

351
00:29:02.200 --> 00:29:07.700
So when the user clicks on this button it's gonna make a get request to this path.
351

352
00:29:07.990 --> 00:29:14.270
And we haven't actually addressed that in our code so let's do that now. Inside our app.
352

353
00:29:14.260 --> 00:29:20.000
js right below where we've got our app.get/ root route,
353

354
00:29:20.050 --> 00:29:27.340
let's go ahead and add a app.get for the route that the button will hit up which is /auth
354

355
00:29:27.670 --> 00:29:36.610
/google. And then let's add our callback. And inside our callback is where we're going to
355

356
00:29:36.610 --> 00:29:39.610
initiate authentication with Google.
356

357
00:29:39.850 --> 00:29:46.150
So to do that we're going to use passport of course and we're going to authenticate our user.
357

358
00:29:46.450 --> 00:29:51.640
And then we provide the type of strategy that we want to authenticate our user with,
358

359
00:29:51.640 --> 00:29:54.900
so this is going to be "google" as a string.
359

360
00:29:55.060 --> 00:29:57.580
But in this case we're using the Google strategy.
360

361
00:29:57.580 --> 00:30:01.070
And notice how this is very similar to the code that we've got down here
361

362
00:30:01.210 --> 00:30:05.100
when we authenticated our user using the local strategy.
362

363
00:30:05.500 --> 00:30:11.620
So we're starting to see how passport can be used flexibly and by adding in or switching out different
363

364
00:30:11.620 --> 00:30:18.190
strategies we can implement lots of different ways of authenticating our user using the same library.
364

365
00:30:18.190 --> 00:30:21.110
Now the next thing we have to provide is a scope.
365

366
00:30:21.730 --> 00:30:23.950
Now how do I know about all of this?
366

367
00:30:23.950 --> 00:30:26.330
Well of course it's from the documentation.
367

368
00:30:26.380 --> 00:30:32.650
So if you scroll down a little bit on the passport Google OAuth documentation page you can see that they've
368

369
00:30:32.650 --> 00:30:34.750
got all of this in here for you.
369

370
00:30:34.990 --> 00:30:40.390
So for simplicity's sake, you can simply go ahead and copy this and paste it in here as well.
370

371
00:30:40.540 --> 00:30:47.200
So in this case what we're doing is we're saying use passport to authenticate our user using the Google
371

372
00:30:47.200 --> 00:30:55.390
strategy which we have setup over here as a new Google strategy passing in all of those things to help
372

373
00:30:55.420 --> 00:31:01.720
Google recognize our app which we have set up in the dashboard. And then we're saying when we hit up
373

374
00:31:01.720 --> 00:31:08.500
Google, we're going to tell them that what we want is the user's profile and this includes their email
374

375
00:31:08.650 --> 00:31:15.620
as well as their user ID on Google which we'll be able to use and identify them in the future.
375

376
00:31:15.640 --> 00:31:21.910
So I'm just gonna go and change those single quotes to double quotes again for consistency. It doesn't
376

377
00:31:21.910 --> 00:31:29.500
actually change anything about our code. And this line of code here should be enough for us to bring
377

378
00:31:29.500 --> 00:31:33.540
up a pop up that allows the user to sign into their Google account.
378

379
00:31:33.580 --> 00:31:39.240
So let's go ahead and save our app.js and make sure that our is still running.
379

380
00:31:39.240 --> 00:31:42.450
And let's go ahead and test it out on local host.
380

381
00:31:42.560 --> 00:31:44.600
So let's head back to the home page,
381

382
00:31:44.600 --> 00:31:48.610
go over to register and click on the "Sign up with Google".
382

383
00:31:48.890 --> 00:31:57.320
And now you can see we get redirected to a page on Google itself and we're able to login using our
383

384
00:31:57.320 --> 00:31:58.130
Google account.
384

385
00:31:58.610 --> 00:32:05.750
So I'm going to select my account to login, but then I get an error and it says "Cannot GET /
385

386
00:32:05.780 --> 00:32:08.930
auth/google/secrets.
386

387
00:32:08.930 --> 00:32:16.520
Now if that route is familiar to you, there's a good reason for that because that's what we set up right
387

388
00:32:16.530 --> 00:32:20.730
here, our authorized redirect URI or URL.
388

389
00:32:21.170 --> 00:32:28.270
And this is where Google will send the user after it's authenticated them on their server.
389

390
00:32:28.280 --> 00:32:31.070
You can see it's pointed us back to our website
390

391
00:32:31.070 --> 00:32:33.090
localhost right?
391

392
00:32:33.530 --> 00:32:40.160
So we need to add this route to be able to authenticate them locally on our website and to save their
392

393
00:32:40.160 --> 00:32:43.370
login session using sessions and cookies.
393

394
00:32:43.370 --> 00:32:50.030
And if you take a look at the next part of this authenticate request documentation, you can see they
394

395
00:32:50.030 --> 00:32:53.290
provide an example of how you might set this up.
395

396
00:32:53.300 --> 00:32:55.360
So it's again going to be an app.get.
396

397
00:32:55.750 --> 00:33:02.420
And this request, this GET request, gets made by Google when they try to redirect the user back to our
397

398
00:33:02.420 --> 00:33:03.410
website.
398

399
00:33:03.560 --> 00:33:08.140
And this string has to match what we specified to Google previously.
399

400
00:33:08.360 --> 00:33:11.650
And then we're going to authenticate the user locally
400

401
00:33:11.990 --> 00:33:16.210
and if there were any problems we're going to send them back to the login page again.
401

402
00:33:16.280 --> 00:33:23.090
But if there were no problems then we can redirect them to the secrets page or any other sort of privileged
402

403
00:33:23.150 --> 00:33:23.810
page.
403

404
00:33:24.260 --> 00:33:31.840
So let's go ahead and copy all of this and paste it into our app.js right below the other app.get.
404

405
00:33:32.840 --> 00:33:36.430
And I've just noticed that this is also single quotes.
405

406
00:33:36.470 --> 00:33:41.580
People are very inconsistent when they type Javascript but I like to keep it all the same
406

407
00:33:41.660 --> 00:33:43.160
so it doesn't confuse me.
407

408
00:33:43.460 --> 00:33:46.220
And we're also going to change it here.
408

409
00:33:46.280 --> 00:33:52.350
Now notice here that the route is /auth/google/callback.
409

410
00:33:52.370 --> 00:33:58.070
We have to make sure that this gets changed to the route that Google actually tries to hit up which
410

411
00:33:58.070 --> 00:34:04.370
is the one that we specified here which is gonna be /auth/google/secrets or whatever
411

412
00:34:04.370 --> 00:34:06.490
you typed into your dashboard.
412

413
00:34:06.710 --> 00:34:13.400
And all we have to do is change this to secrets so that it matches exactly.
413

414
00:34:13.400 --> 00:34:19.340
Now the rest of the code we can leave as the same because the if the authentication fails then we're going
414

415
00:34:19.340 --> 00:34:21.850
to redirect them to the login route,
415

416
00:34:21.860 --> 00:34:28.220
we have a app.get for the login route. But if it was successful then we're going to redirect them
416

417
00:34:28.280 --> 00:34:30.260
to the secrets page.
417

418
00:34:30.440 --> 00:34:39.980
So we res.redirect it's going to go to /secrets and this will take them to here. And
418

419
00:34:39.980 --> 00:34:45.710
we can check to see if the user is authenticated in which case we'll render the secrets page
419

420
00:34:46.100 --> 00:34:48.990
otherwise we'll redirect them back to the login page.
420

421
00:34:49.010 --> 00:34:55.640
So this is pretty much all the code that we need in order to allow users to login using Google on our
421

422
00:34:55.640 --> 00:34:56.130
website.
422

423
00:34:56.900 --> 00:35:04.130
So let's check out what we get back from Google by going into this callback function and let's simply
423

424
00:35:04.130 --> 00:35:09.430
log the profile of the user that we get back.
424

425
00:35:09.440 --> 00:35:17.210
So now, when the user clicks on that button that says "Sign up with Google", it will hit up the /auth/
425

426
00:35:17.270 --> 00:35:25.040
google route which gets caught over here and that will initiate authentication on Google's servers asking
426

427
00:35:25.040 --> 00:35:28.580
them for the user's profile once they've logged in.
427

428
00:35:28.760 --> 00:35:35.450
Now once that's been successful, Google will redirect the user back to our website and make a get request
428

429
00:35:35.510 --> 00:35:41.840
to /auth/google/secrets. And it's at this point where we will authenticate them locally and save
429

430
00:35:41.840 --> 00:35:43.490
their login session.
430

431
00:35:43.490 --> 00:35:48.490
Now once they've been successfully authenticated, we take them to /secrets.
431

432
00:35:49.010 --> 00:35:56.690
But at this stage, the Google authentication has already completed and this callback function gets triggered.
432

433
00:35:56.690 --> 00:36:02.710
And we will log that profile and try to create them as a user on our their .
433

434
00:36:02.750 --> 00:36:05.940
So let's save our app.js and test it out.
434

435
00:36:06.020 --> 00:36:09.420
So let's go back to our home page localhost:3000.
435

436
00:36:09.530 --> 00:36:16.910
Let's register over here, click on "Sign up with Google" and I'm going to sign in using my Google account
436

437
00:36:17.030 --> 00:36:17.730
here.
437

438
00:36:17.750 --> 00:36:21.470
Now at this point you might end up with an error like this.
438

439
00:36:21.530 --> 00:36:24.860
"Failed to serialize user into session".
439

440
00:36:24.920 --> 00:36:26.300
Why is this?
440

441
00:36:26.300 --> 00:36:29.390
Well, at which point do we serialize our user?
441

442
00:36:29.930 --> 00:36:31.270
It's right over here
442

443
00:36:31.280 --> 00:36:31.810
right?
443

444
00:36:31.850 --> 00:36:40.190
And this code actually comes from a package that we used earlier on, the passport-local-Mongoose package.
444

445
00:36:40.910 --> 00:36:49.370
And they provided a simplified way of serializing and deserializing your users using their package.
445

446
00:36:49.550 --> 00:36:56.060
So it's through the use of this package that's been added to the userSchema where this method serialize
446

447
00:36:56.060 --> 00:36:59.120
User and deserializeUser comes from.
447

448
00:36:59.120 --> 00:37:05.180
Now however, if we look at the passport documentation and how they configure the passport package to
448

449
00:37:05.180 --> 00:37:11.410
serialize users and deserialize users, you can see it's a little bit longer but it means that it's going
449

450
00:37:11.410 --> 00:37:17.090
to work for all different strategies not just for the local strategy.
450

451
00:37:17.630 --> 00:37:25.430
So let's go ahead and replace the code where we serialize and deserialize our user for local authentication
451

452
00:37:25.910 --> 00:37:30.420
and replace it so that it can work with any kind of authentication.
452

453
00:37:30.530 --> 00:37:38.360
So let's hit save over here and now if we go back to localhost:3000 we register our user
453

454
00:37:38.360 --> 00:37:43.400
using Google then you can see it takes us straight to the secret page.
454

455
00:37:43.400 --> 00:37:51.140
Now the other thing we tried to find out is we tried to log the Google Profile that we got sent after
455

456
00:37:51.140 --> 00:37:57.390
the user has been authenticated by Google. And you can see that it's this JSON over here
456

457
00:37:58.070 --> 00:38:01.490
and it has a id for the user.
457

458
00:38:01.490 --> 00:38:07.060
So this is going to uniquely identify this user on the Google user database.
458

459
00:38:07.130 --> 00:38:14.840
It has their name and it can split it into family name and given name. It also got some photos if they
459

460
00:38:14.840 --> 00:38:17.140
have any, a picture of them.
460

461
00:38:17.210 --> 00:38:25.490
But the most important thing for us to save into our database is this id because this id will identify
461

462
00:38:25.490 --> 00:38:28.220
them when they next try to login.
462

463
00:38:28.220 --> 00:38:34.020
So if they create any data on our website we're going to associate it all with this id.
463

464
00:38:34.100 --> 00:38:41.300
So if you look inside our database at the moment, you'll notice that a new user was created.
464

465
00:38:41.720 --> 00:38:50.480
But all we have is an automatically generated MongoDB id and nothing else whereas our previous users
465

466
00:38:50.480 --> 00:38:55.320
had a username and a salt, a hash or an email and a password.
466

467
00:38:55.370 --> 00:39:01.520
But in this case we don't really have anything for this user and we don't have any way of tying this
467

468
00:39:01.520 --> 00:39:04.520
newly registered user with their Google id.
468

469
00:39:04.700 --> 00:39:09.290
So the next time they log in we won't be able to find them on our database.
469

470
00:39:09.830 --> 00:39:17.330
And I can confirm this by simply logging out and trying to login again, sign in with Google, and you
470

471
00:39:17.330 --> 00:39:22.760
can see that in our database all we've done is just create a new user.
471

472
00:39:22.760 --> 00:39:30.050
We now have the seventh user. So that Google id is not being tied to the id on our user database.
472

473
00:39:30.080 --> 00:39:36.170
So let's go ahead and delete these two entries and let's go and fix our code.
473

474
00:39:36.500 --> 00:39:44.780
So at the moment when we get the data back from Google not only do we log their profile but we also
474

475
00:39:44.810 --> 00:39:52.430
try to find it in our database or create them on our database and that's all based off a field called
475

476
00:39:52.520 --> 00:39:57.290
Google id which is supposed to exist on our collection of users.
476

477
00:39:57.680 --> 00:40:04.090
But at the moment, our collection of users only have two fields that we work with: email and password.
477

478
00:40:04.190 --> 00:40:10.100
And this is based off the days when we were still logging users only through the local authentication
478

479
00:40:10.100 --> 00:40:10.520
method.
479

480
00:40:11.060 --> 00:40:16.680
So let's go ahead and add a new field called googleId with a capital I.
480

481
00:40:16.700 --> 00:40:18.520
It's also going to be a string.
481

482
00:40:18.710 --> 00:40:25.610
But this time when a new user registers on our website, we're going to find and see if we already have
482

483
00:40:25.610 --> 00:40:32.750
a record of their Google id on our user database in which case we're gonna save all the new data associated
483

484
00:40:32.750 --> 00:40:40.500
with that id or otherwise we're going to create it on our database and save this information for future.
484

485
00:40:41.060 --> 00:40:48.440
So let's save our app.js and log out of our website and then go ahead and register again. And
485

486
00:40:48.440 --> 00:40:50.630
we're going to sign up with Google.
486

487
00:40:50.810 --> 00:40:56.840
And now if we go over to our Robo 3T you can see our new user gets created with an id that
487

488
00:40:56.840 --> 00:40:59.900
identifies them on our user database
488

489
00:40:59.900 --> 00:41:04.550
but another id that identifies them as a unique Google user.
489

490
00:41:05.030 --> 00:41:11.930
So this is their id which means that if I log out now and I tried to login again, I get to the secrets
490

491
00:41:11.930 --> 00:41:15.620
page but we don't actually create a new user.
491

492
00:41:16.010 --> 00:41:19.070
They're still being identified as user 6.
492

493
00:41:19.100 --> 00:41:25.430
And this is the same thing even if I log out and try to register again as the same Google user. You can
493

494
00:41:25.430 --> 00:41:32.390
see that I'm still not creating another user here because I'm able to find this user by their Google
494

495
00:41:32.390 --> 00:41:40.510
id and know that they already exist. Now remember that because we're authenticating our users using
495

496
00:41:40.510 --> 00:41:41.320
Google
496

497
00:41:41.320 --> 00:41:46.990
we only get what's equivalent to their user name on the Google user database.
497

498
00:41:46.990 --> 00:41:51.940
We don't get their password and this is great because it means we don't have to save it.
498

499
00:41:51.940 --> 00:41:58.960
We don't have to take care of it if it gets lost or it gets leaked that's all on Google and they have
499

500
00:41:58.960 --> 00:42:04.540
a lot more engineers, a lot more resources, to keep their user's passwords or whatever other pieces of
500

501
00:42:04.540 --> 00:42:05.620
information safe
501

502
00:42:05.620 --> 00:42:09.130
and all we need to do is just to retrieve it when we need it.
502

503
00:42:09.130 --> 00:42:16.120
So the last thing I want to do before we finish up is to style up our buttons because if we add a few
503

504
00:42:16.120 --> 00:42:19.690
more buttons over here, sign up with Google, sign up with Facebook,
504

505
00:42:19.690 --> 00:42:23.760
it doesn't really shout to me that this is something related to Google
505

506
00:42:23.770 --> 00:42:24.100
right?
506

507
00:42:24.760 --> 00:42:31.420
So what we're going to use is something called social buttons for Bootstrap and all we have to do is
507

508
00:42:31.420 --> 00:42:38.290
go ahead and download the code and inside the extracted folder you should see a file called bootstrap
508

509
00:42:38.410 --> 00:42:40.900
-socia.css
509

510
00:42:40.990 --> 00:42:49.370
and we're simply going to drag that file into our public CSS folder next to our styles.css.
510

511
00:42:49.390 --> 00:42:52.310
So I'm just going to grab that and pop it over here.
511

512
00:42:52.990 --> 00:43:00.010
So if you take a look at it you can see that it's basically a minified version of some styles that we
512

513
00:43:00.010 --> 00:43:05.910
can apply to any of our buttons to add in some much needed styling.
513

514
00:43:05.950 --> 00:43:11.980
So first things first, if we're going to add in a new stylesheet we have to head over to our header
514

515
00:43:12.010 --> 00:43:15.560
.ejs and add it in as a link.
515

516
00:43:15.670 --> 00:43:22.510
And whenever I add in any sort of styles from any external source say Font awesome or Bootstrap or in
516

517
00:43:22.510 --> 00:43:24.420
this case the social buttons,
517

518
00:43:24.490 --> 00:43:27.430
I'd like to put it above my custom style sheet.
518

519
00:43:27.820 --> 00:43:34.080
So that means I can go into my styles.css and override anything that came from other people.
519

520
00:43:34.090 --> 00:43:39.290
So this is where I'll be adding in a link for that style sheet.
520

521
00:43:39.400 --> 00:43:45.490
And if you right click on that stylesheet that we just got we can click on rename which allows us to
521

522
00:43:45.490 --> 00:43:46.830
see its full name
522

523
00:43:46.870 --> 00:43:50.200
and I'm going to copy it and paste it over here.
523

524
00:43:50.770 --> 00:43:56.350
And we're going to make sure that there is no forward slash before the css and this href should now
524

525
00:43:56.350 --> 00:43:59.890
point to that new file that we downloaded and incorporated.
525

526
00:44:00.400 --> 00:44:08.650
So now let's hit save and go over to our register page and update that anchor tag so that we add in
526

527
00:44:08.710 --> 00:44:10.630
the required classes.
527

528
00:44:10.630 --> 00:44:17.290
So the classes that we need are btn-social which adds some of the sizing and the rounded
528

529
00:44:17.290 --> 00:44:18.710
corners et cetera,
529

530
00:44:18.820 --> 00:44:21.580
and then whichever social button we want.
530

531
00:44:21.670 --> 00:44:27.670
So in our case it's going to be btn-social and Beatty and btn-google.
531

532
00:44:27.670 --> 00:44:34.600
So now if we hit save and go over to our register button and refresh, you can see it now start looking
532

533
00:44:34.810 --> 00:44:43.990
a lot more like a proper "Sign up with Google" button. And in the future if you wanted to add another button
533

534
00:44:44.050 --> 00:44:53.710
say, I don't know, "Sign up with Facebook" then all you have to do is to change this to Facebook and change
534

535
00:44:53.710 --> 00:44:56.740
the icon to Facebook.
535

536
00:44:56.740 --> 00:45:03.790
And when we refresh you can see we now have multiple social signing opportunities for the user and it's
536

537
00:45:03.940 --> 00:45:07.390
all styled with very little effort from us.
537

538
00:45:07.390 --> 00:45:14.200
So I'm going to go and delete that last part and I'm going to go into my login and also implement the
538

539
00:45:14.200 --> 00:45:16.250
same thing for this button here.
539

540
00:45:16.360 --> 00:45:20.850
So btn-social and btn-google.
540

541
00:45:20.950 --> 00:45:31.120
So now both my login and register pages have their buttons styled up and also working plus best of
541

542
00:45:31.120 --> 00:45:37.390
all because we've implemented sessions and cookies even if I go ahead and navigate to a different page
542

543
00:45:37.870 --> 00:45:44.400
I should still be authenticated and be able to access the secrets page without logging in again.
543

544
00:45:44.440 --> 00:45:52.090
But notice that when I click on log out and I tried to log in again I don't get taken to Google again
544

545
00:45:52.180 --> 00:45:54.370
and have to log into my account.
545

546
00:45:54.370 --> 00:45:59.900
And the reason is because we're only persisting the login session on our Web site.
546

547
00:46:00.280 --> 00:46:06.250
So it means that once they manage to get to secrets and they navigate around on our website, if they
547

548
00:46:06.250 --> 00:46:14.260
wanted to access the authentication required route to secrets remember that in our code when they hit
548

549
00:46:14.260 --> 00:46:21.700
up the secret route we run the req.isAuthenticated to see whether if we can render that page
549

550
00:46:21.730 --> 00:46:22.630
for them.
550

551
00:46:22.630 --> 00:46:29.380
So this login session and log out session is related to how they can access our website but it doesn't
551

552
00:46:29.410 --> 00:46:32.960
log  them out of their Google account. In order to do that
552

553
00:46:32.980 --> 00:46:39.240
we would need a button that would redirect them to accounts.google.com/logout.
553

554
00:46:39.350 --> 00:46:46.610
But that's kind of annoying because it means that it would log them out of their Gmail, their Google
554

555
00:46:46.610 --> 00:46:53.140
Maps and every single other service that they use on Google which is usually not what you want.
555

556
00:46:53.150 --> 00:46:59.480
So in our case we only need our session to persist for the users login for our website and we don't
556

557
00:46:59.480 --> 00:47:02.570
need to worry about logging them out of Google.
557

558
00:47:02.570 --> 00:47:10.070
So now that we've implemented the Google OAuth social login strategy and we've kind of delegated this
558

559
00:47:10.070 --> 00:47:18.860
whole complicated process of securing a user's sensitive information to Google, as a challenge I want
559

560
00:47:18.860 --> 00:47:23.090
you to try and see if you can implement login with Facebook.
560

561
00:47:23.120 --> 00:47:29.270
It will involve pretty much the same steps as what we've done with Google but it will involve a little
561

562
00:47:29.270 --> 00:47:32.090
bit of searching around and a little bit of googling and a
562

563
00:47:32.090 --> 00:47:37.790
little bit of figuring it out. But at this stage you should be able to struggle through this and figure
563

564
00:47:37.790 --> 00:47:41.300
out how you can implement it without too much help from myself.
564

565
00:47:41.810 --> 00:47:45.440
So best of luck and I'll see you on the next lesson.
