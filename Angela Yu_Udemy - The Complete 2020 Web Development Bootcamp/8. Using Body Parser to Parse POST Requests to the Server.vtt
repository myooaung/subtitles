WEBVTT
0
1
00:00:00.790 --> 00:00:07.720
In the last lessons, we've done the difficult part, which is fetching live data from the OpenWeatherMap 
1

2
00:00:07.720 --> 00:00:14.620
API, and then getting that data formatted and placed onto our web site,
2

3
00:00:14.680 --> 00:00:21.300
like so. But it's a little bit boring if it just displays the weather for London, right?
3

4
00:00:21.300 --> 00:00:22.940
That's not much of a web site.
4

5
00:00:22.950 --> 00:00:29.520
What if we could get the user to type in the city that they're interested in, and then we simply replace
5

6
00:00:29.550 --> 00:00:32.730
this query with whatever city they want,
6

7
00:00:32.760 --> 00:00:39.540
so like, maybe, Paris? So we could say, well, Paris currently has scattered clouds and it's about the same
7

8
00:00:39.540 --> 00:00:45.210
temperature. But of course we'll have to change this, and we'll have to add some sort of input to let
8

9
00:00:45.210 --> 00:00:51.370
the user be able to do this. Instead of having an entire long string here,
9

10
00:00:51.420 --> 00:00:55.110
I'm going to break down each of the parts of our URL.
10

11
00:00:55.200 --> 00:01:03.120
So I'm going to create a const called query, and I'm going to set that to equal London, at least for now, and
11

12
00:01:03.120 --> 00:01:11.650
then I'm going to delete this part here and replace it with the query. Now
12

13
00:01:11.660 --> 00:01:19.970
additionally, I'm also going to take out my app ID, and I'm going to save that as a separate const as
13

14
00:01:19.970 --> 00:01:28.410
well, and I'll call that apiKey. And we'll save it under these two names.
14

15
00:01:28.410 --> 00:01:36.630
And then I can replace that with my apiKey.
15

16
00:01:37.070 --> 00:01:43.800
And finally I'm just going to take out the units, and add it on at the end as well.
16

17
00:01:50.600 --> 00:01:58.670
So now all we have to do to change the data that we get back is to update this query.
17

18
00:01:58.850 --> 00:02:00.550
So how can we do that?
18

19
00:02:00.560 --> 00:02:01.820
How do we update it?
19

20
00:02:02.390 --> 00:02:10.220
Well, if we go into our index.html, which currently is completely blank, we can start off by creating
20

21
00:02:10.310 --> 00:02:19.180
a HTML template, and our title will be called our Weather App, and inside the body
21

22
00:02:19.340 --> 00:02:23.680
all I'm going to do is add a text input.
22

23
00:02:23.720 --> 00:02:34.670
So this is going to be a input of type text, and it's going to have a name which is called the cityName,
23

24
00:02:34.670 --> 00:02:38.820
and it's not going to have any value at the moment.
24

25
00:02:38.840 --> 00:02:47.240
Now in addition to an input, I also want to have a label, and it's the label for this particular input.
25

26
00:02:47.240 --> 00:02:59.750
So let's give it an id, and let's call the id the cityInput, and let's put cityInput here as well.
26

27
00:02:59.750 --> 00:03:05.390
Now our label is going to say “City Name:”. Hit save.
27

28
00:03:05.720 --> 00:03:13.460
And now we want to be able to render this index.html when the user calls app.get at the root
28

29
00:03:13.460 --> 00:03:13.820
route.
29

30
00:03:14.360 --> 00:03:23.710
So instead of all of this, I'm going to cut it out and I'm going to paste it down here, and I'm just going
30

31
00:03:23.710 --> 00:03:26.850
to comment out this code for now.
31

32
00:03:26.870 --> 00:03:35.180
Now our web site is again quite simple, and inside our app.get I'm going to try and send this file,
32

33
00:03:35.270 --> 00:03:39.410
index.html, over to the browser.
33

34
00:03:39.410 --> 00:03:45.800
I'm going to call res.sendFile, and then I'm going to get hold of the directory name, and I'm going
34

35
00:03:45.800 --> 00:03:49.510
to add “/index.html”.
35

36
00:03:49.910 --> 00:03:55.380
And hopefully, when I refresh my web site now, it's going to display that web site.
36

37
00:03:55.430 --> 00:03:59.190
It's going to show my label and my input.
37

38
00:03:59.180 --> 00:04:05.980
So now that I'm free to type whatever it is I want in here, I need some way of sending that data, right?
38

39
00:04:06.080 --> 00:04:08.330
So I need a button in here as well.
39

40
00:04:08.330 --> 00:04:15.670
So let's add a button, and the type of button is going to be a submit button.
40

41
00:04:15.740 --> 00:04:21.910
Now this button doesn't really need a name, but what it does need is some text.
41

42
00:04:21.950 --> 00:04:24.580
So we'll just call that ‘Go’.
42

43
00:04:24.830 --> 00:04:35.240
And if I wrap all of this inside a form, then I'll be able to create a post request when the user hits
43

44
00:04:35.240 --> 00:04:42.560
this button. And that post request is ready here in the method, but the action is actually going to go
44

45
00:04:42.560 --> 00:04:52.760
to our root route. Our form is going to make a post request to this route on our server, and we would have
45

46
00:04:52.760 --> 00:05:02.060
to catch it using app.post, then specifying the root route, which is the one that we said we would
46

47
00:05:02.060 --> 00:05:10.070
hit up over in our form, and then create our function with our req and res. Inside here we’re just going
47

48
00:05:10.070 --> 00:05:17.670
to log, “Post received.”
48

49
00:05:17.770 --> 00:05:23.790
So now let's refresh our web site. We can see our label, our input, and our submit button.
49

50
00:05:23.800 --> 00:05:31.150
Let me just write the word ‘London’ in here, click go, and then go into our Hyper terminal, and we can see
50

51
00:05:31.180 --> 00:05:32.560
“Post request received.”
51

52
00:05:32.560 --> 00:05:36.740
So it's hit up our post route, and this is why we're getting that logged.
52

53
00:05:37.300 --> 00:05:44.560
But in order for us to actually get the text that the user typed into the input, we have to do a little
53

54
00:05:44.560 --> 00:05:45.070
bit more.
54

55
00:05:45.640 --> 00:05:52.120
We have to actually install another package that we've been using previously.
55

56
00:05:52.150 --> 00:05:59.500
So I'm using Control C to exit out of Nodemon, so that I see my prompt again, and I'm going to use NPM
56

57
00:05:59.620 --> 00:06:09.310
to install Body Parser, body-parser. And body-parser is the package that's going to allow me to look
57

58
00:06:09.310 --> 00:06:17.710
through the body of the post request and fetch the data based on the name of my input, which is called
58

59
00:06:17.800 --> 00:06:28.980
cityName. So now let's go ahead and create a constant called bodyParser, which is going to require the
59

60
00:06:29.010 --> 00:06:37.110
body-parser module, and then let's get our app to use
60

61
00:06:37.110 --> 00:06:51.230
bodyParser, and we're going to set the urlencoded to use the extended as true setting. From
61

62
00:06:51.230 --> 00:06:56.540
previous modules, we've used this a few times, and this is just the necessary code for us to be able
62

63
00:06:56.540 --> 00:07:00.140
to start parsing through the body of the post request.
63

64
00:07:00.140 --> 00:07:06.320
But once we've done all of that, instead of console logging, “Post request received.”, we can go one step
64

65
00:07:06.320 --> 00:07:17.300
better than that. We can say request.body. the name of the input, which is called cityName, and we
65

66
00:07:17.300 --> 00:07:25.250
should now be able to console.log the text that went into that input. So let's delete the previous console.
66

67
00:07:25.250 --> 00:07:34.990
log, hit save, start up our server again with ‘nodemon app.js’, and now go to refresh our web site,
67

68
00:07:35.390 --> 00:07:44.750
type in ‘London’, hit ‘Go’, and check our Hyper terminal. And you can see we're now receiving our data from our
68

69
00:07:44.750 --> 00:07:51.050
post request. Now that we've parsed through the body of the request, you can see now how we can start
69

70
00:07:51.050 --> 00:08:00.320
using that as our query, right? Let’s go ahead and take all of this, and paste it into our post request,
70

71
00:08:00.770 --> 00:08:09.050
and then uncomment it using Command /, and instead of console logging the request.body
71

72
00:08:09.050 --> 00:08:14.110
.cityName, we're going to be using that, of course, as the query.
72

73
00:08:14.120 --> 00:08:22.550
So instead of having our hardcoded ‘London’, we're going to write request.body.cityName, and we
73

74
00:08:22.550 --> 00:08:25.400
can delete our console.log now.
74

75
00:08:25.400 --> 00:08:32.120
So now if we hit save, go back to our web site, refresh, let’s type in a different one, let's say what's
75

76
00:08:32.120 --> 00:08:39.320
the weather like in Paris. And now it sends us the weather, but of course we need to modify this text
76

77
00:08:39.410 --> 00:08:40.460
as well.
77

78
00:08:40.610 --> 00:08:49.060
So down here where it says ‘London’, let's get rid of that and let's instead add the query in here.
78

79
00:08:50.030 --> 00:08:54.350
So let's go back and let's check a different place.
79

80
00:08:54.350 --> 00:08:58.150
Let's see what is the weather like in Bali.
80

81
00:08:58.150 --> 00:08:59.640
Here you go.
81

82
00:08:59.660 --> 00:09:04.770
The temperature in Bali is 30 degrees, pretty nice, but there's currently thunderstorms.
82

83
00:09:04.880 --> 00:09:08.790
And that's what our image shows as well.
83

84
00:09:09.070 --> 00:09:14.760
So now we're able to get dynamic data based on what the user typed into the input,
84

85
00:09:14.940 --> 00:09:22.770
catch that data in our app.post, and then use that query to structure our URL and get the data for
85

86
00:09:22.770 --> 00:09:25.070
that particular location.
86

87
00:09:25.080 --> 00:09:34.860
Now we've seen all aspects of our API in use, including authentication, including paths, including queries,
87

88
00:09:35.250 --> 00:09:43.230
and we've been able to parse the JSON data we get back and send it over to the browser using our Express
88

89
00:09:43.380 --> 00:09:46.020
and Node modules.
89

90
00:09:46.020 --> 00:09:51.090
Now in the next lesson we're going to be taking this one step further, and we're going to be building
90

91
00:09:51.180 --> 00:09:57.840
our final project, which is our newsletter email collection web site, which is basically going to be a
91

92
00:09:57.840 --> 00:10:02.030
landing page that you can use to collect user emails.
92

93
00:10:02.160 --> 00:10:05.460
So for all of that and more, I'll see you on the next lesson.
