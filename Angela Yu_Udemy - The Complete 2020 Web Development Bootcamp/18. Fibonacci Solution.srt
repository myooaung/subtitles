1
00:00:00,510 --> 00:00:03,120
Also gut, ich hoffe, Sie haben diese Herausforderung gut gemeistert.

2
00:00:03,120 --> 00:00:05,230
Bevor Sie zur Lösung kommen.

3
00:00:05,460 --> 00:00:12,210
Und das liegt daran, dass Sie nur dann wirklich lernen, wenn Sie versuchen, zu scheitern und solche Herausforderungen zu meistern.

4
00:00:12,210 --> 00:00:16,290
Wenn Sie also nicht genug Zeit haben, denken Sie nicht mehr darüber nach.

5
00:00:16,290 --> 00:00:16,940
Warten.

6
00:00:16,950 --> 00:00:18,280
Darauf zurückkommen.

7
00:00:18,390 --> 00:00:20,730
Und nur, wenn Sie wirklich stecken bleiben.

8
00:00:20,820 --> 00:00:24,750
Dann komm her und überprüfe mit mir die Lösung.

9
00:00:24,750 --> 00:00:30,840
Jetzt arbeite ich an dem Flussdiagramm, das ich Ihnen vor der Herausforderung gezeigt habe.

10
00:00:30,840 --> 00:00:36,210
Also werden wir all diese Logik in Code umwandeln, um zu beginnen.

11
00:00:36,210 --> 00:00:40,210
Wir beginnen mit einer Ausgabe, die einem leeren Array entspricht.

12
00:00:40,920 --> 00:00:43,050
Schreiben wir das in unseren Code.

13
00:00:43,050 --> 00:00:50,400
Lassen Sie uns also eine Art variablen Code-Ausgang erstellen und diesen auf ein leeres Array setzen, in dem

14
00:00:50,400 --> 00:00:51,780
sich nichts befindet.

15
00:00:51,780 --> 00:00:58,200
Jetzt müssen wir im nächsten Schritt prüfen, ob n gleich 1 ist, und wenn ja, geben wir die Ausgabe als

16
00:00:58,350 --> 00:00:59,280
0 an.

17
00:00:59,850 --> 00:01:08,920
Dazu verwenden wir eine if-Anweisung, um zu überprüfen, ob dieses übergebene n gleich 1 ist.

18
00:01:09,210 --> 00:01:16,920
Und wenn ja, dann werden wir sagen, dass die Ausgabe gleich Null sein wird.

19
00:01:16,920 --> 00:01:24,380
Dies ist also das erste Element in der Sequenz, und dann können wir fortfahren und die Ausgabe zurückgeben.

20
00:01:24,390 --> 00:01:31,420
Der nächste Schritt in unserem Flussdiagramm ist Wille, wenn es nicht gleich 1 ist, dann ist es gleich 2.

21
00:01:31,470 --> 00:01:35,870
Und wenn ja, dann sollte die Ausgabe Null Komma 1 sein.

22
00:01:36,000 --> 00:01:44,070
Wir können diese Logik also mit einem schwer fassbaren Hinweis darstellen, dass sonst nur geprüft wird, ob

23
00:01:44,070 --> 00:01:46,340
der erste falsch war.

24
00:01:46,350 --> 00:01:51,100
Jetzt können wir also gut sagen, wenn es nicht gleich 1 ist. Nun, ist es gleich 2.

25
00:01:51,720 --> 00:02:00,420
Wenn dies der Fall ist, setzen wir die Ausgabe auf Null, Komma Eins, die in einem Array gespeichert ist, und

26
00:02:00,540 --> 00:02:03,270
sie wird am Ende erneut zurückgegeben.

27
00:02:03,270 --> 00:02:11,250
Wenn es nun nicht eins ist und es nicht zu gut ist, müssen wir die letzten beiden Werte

28
00:02:11,820 --> 00:02:20,310
in der Ausgabe summieren, damit wir diese endgültige Bedingung mit einer L-Anweisung abfangen können. Hier setzen wir die Ausgabe

29
00:02:20,640 --> 00:02:27,930
auf Null Komma 1, um zu beginnen, da dies der Beginn unserer Sequenz ist und

30
00:02:27,930 --> 00:02:37,350
wir dann die letzten beiden Werte summieren und dies tun können, indem wir in die Ausgänge greifen und den ersten Wert erreichen.

31
00:02:37,350 --> 00:02:47,580
Also Ausgabe an Position 0, die diese ist, und dann addieren wir diese zur Ausgabe an Position 1.

32
00:02:47,580 --> 00:02:56,430
Jetzt fügen wir dieses erste Element im Grunde genommen dem zweiten Element hinzu und dies sollte gleich 1 sein und das

33
00:02:56,430 --> 00:03:00,270
sollte irgendwie am Ende dieses vorhandenen Arrays hinzugefügt werden.

34
00:03:01,020 --> 00:03:07,650
Und wenn Sie sich an frühere Lektionen zu Arrays erinnern, können wir dies tun, indem wir

35
00:03:07,650 --> 00:03:16,380
Ausgabepunkt-Push sagen, und wir können diese Berechnung in Klammern setzen, und am Ende werden wir diese Lösung dem vorhandenen Array

36
00:03:16,380 --> 00:03:17,180
hinzufügen.

37
00:03:17,280 --> 00:03:26,910
Und an diesem Punkt sollte die Ausgabe jetzt wie Null Komma Eins Komma 1 aussehen und es wird zurückgegeben.

38
00:03:26,910 --> 00:03:32,570
Jetzt müssen wir prüfen, ob N der Anzahl der Elemente in der Ausgabe entspricht.

39
00:03:32,790 --> 00:03:41,290
Wir könnten dies also mit einer anderen if-Anweisung tun und sagen, dass F und Triple gleich der Ausgabelänge sind.

40
00:03:41,370 --> 00:03:52,850
Dann können wir fortfahren und die Ausgabe zurückgeben, aber ansonsten müssen wir die letzten beiden Elemente weiter addieren.

41
00:03:53,100 --> 00:04:02,310
Wie können wir also unseren Code hier so ändern, dass er nicht manuell sagt, dass es sich um das

42
00:04:02,310 --> 00:04:10,050
Element aus dem Ausgabearray an Position 0 handelt, sondern um das Element an Position 1?

43
00:04:10,050 --> 00:04:17,110
Wie können wir stattdessen sagen, dass wir den letzten Artikel plus den zweiten vom letzten Artikel erhalten möchten?

44
00:04:17,190 --> 00:04:20,020
Nun, wir könnten die Länge nutzen.

45
00:04:20,070 --> 00:04:24,320
In diesem Fall ist die Ausgabelänge also gleich 2.

46
00:04:24,360 --> 00:04:35,270
Wenn wir also wollten, dass dies eins ist, könnten wir Ausgabepunktlänge minus eins sagen, und dann haben wir unsere

47
00:04:35,330 --> 00:04:41,320
zweite vom Ende, die Ausgabelänge minus zwei sein wird.

48
00:04:41,390 --> 00:04:43,950
Das funktioniert also immer noch genauso.

49
00:04:44,060 --> 00:04:52,190
Aber jetzt kann diese Codezeile unabhängig von der Größe unseres Arrays funktionieren, denn selbst wenn diese

50
00:04:52,610 --> 00:04:59,470
lange Ausgabelänge zu diesem Zeitpunkt gleich vier wäre, wäre vier minus eins drei.

51
00:04:59,810 --> 00:05:08,810
Das wird also drei und wenn wir uns den Gegenstand an Position drei in unserer Rea ansehen, ist es null eins zwei drei.

52
00:05:08,840 --> 00:05:18,230
Es ist also dieses letzte Element und minus zwei macht es 2 und 0 1 2 wird das zweite vom letzten Element.

53
00:05:18,230 --> 00:05:20,730
Also fügen wir hier eins plus zwei hinzu.

54
00:05:20,810 --> 00:05:28,280
Diese Codezeile macht sie jetzt dynamisch und wir können sie jetzt in unserer L-Anweisung verwenden.

55
00:05:28,280 --> 00:05:32,030
Beachten Sie jedoch, wie sich diese beiden Codezeilen jetzt wiederholen.

56
00:05:32,600 --> 00:05:39,200
Und auch wenn wir am Ende der L-Anweisung angelangt sind, können wir nicht zum Anfang zurückkehren, um

57
00:05:39,200 --> 00:05:46,820
zu überprüfen, ob das n wieder der Ausgabelänge entspricht, wie es hier erforderlich ist, wenn man bedenkt, wie sehr dies wie

58
00:05:46,820 --> 00:05:48,210
ein Kreis aussieht.

59
00:05:48,350 --> 00:05:51,100
Es sollte Sie daran erinnern, dass wir eine Schleife verwenden müssen.

60
00:05:51,590 --> 00:05:58,800
Anstatt all dies zu schreiben, könnten wir einfach eine Schleife erstellen und die Art der Schleife, die ich in

61
00:05:58,800 --> 00:06:01,920
diesem Fall erstellen werde, ist eine for-Schleife.

62
00:06:02,030 --> 00:06:09,410
Also werde ich sagen, lassen Sie uns eine Variable innerhalb der for-Schleife erstellen, die gleich der vorhandenen

63
00:06:09,410 --> 00:06:19,940
Anzahl von Elementen in unserer Ausgabe ist, und dann werden wir ein Semikolon verwenden und sagen, dass i kleiner als n ist, die Gesamtzahl von

64
00:06:19,940 --> 00:06:24,380
Artikel, die wir in unserer Produktion benötigen, nehmen weiter zu.

65
00:06:24,380 --> 00:06:34,790
Ich kaufe ein und jedes Mal, wenn Sie dies tun möchten, um das letzte Element aus den Ausgaben zu erhalten, um das zweite aus

66
00:06:35,000 --> 00:06:38,570
dem letzten Element aus den Ausgaben zu erhalten.

67
00:06:38,570 --> 00:06:45,650
Addieren Sie sie und schieben Sie sie dann auf unser Array und geben Sie schließlich die Ausgabe zurück.

68
00:06:46,160 --> 00:06:52,970
Nehmen wir jetzt den Nazi-Generator ab und fügen ihn in unseren beleuchteten Spielplatz ein.

69
00:06:52,970 --> 00:06:59,960
Und jetzt versuchen wir, unseren Code auszuführen, indem wir den Fibonacci-Generator aufrufen, und beginnen wir einfach mit etwas

70
00:06:59,960 --> 00:07:01,190
ganz Einfachem.

71
00:07:01,190 --> 00:07:04,320
Beginnen wir mit einer Gleichheit von 1.

72
00:07:04,340 --> 00:07:08,920
Wenn ich jetzt in der Ausgabe auf run drücke, bekomme ich Null.

73
00:07:08,960 --> 00:07:21,320
Wenn ich dies in der Ausgabe auf 2 ändere, erhalte ich 0 1 und wenn ich dies in der Ausgabe auf 5 ändere, erhalte ich

74
00:07:21,500 --> 00:07:24,170
eine 5-Element-Sequenz in einem Array.

75
00:07:24,170 --> 00:07:30,410
Nachdem wir nun bestätigt haben, dass unser Code funktioniert, klicken wir auf Lösung prüfen, um festzustellen, ob wir alles

76
00:07:30,410 --> 00:07:31,420
richtig gemacht haben.

77
00:07:31,430 --> 00:07:31,820
Brillant.

78
00:07:31,820 --> 00:07:34,430
Jetzt haben wir diese Herausforderung bestanden.

79
00:07:34,430 --> 00:07:36,550
Wie sind Sie mit dieser Herausforderung umgegangen?

80
00:07:36,590 --> 00:07:44,000
Haben Sie Probleme damit gehabt, einige der Array-Methoden zu verwenden, oder haben Sie daran gedacht, eine Schleife zu verwenden, damit

81
00:07:44,000 --> 00:07:48,240
sie sich immer wieder dreht und dieselbe Aktion wiederholt ausführt?

82
00:07:48,290 --> 00:07:52,000
Denken Sie jetzt daran, dass es viele Möglichkeiten gibt, diese Herausforderung zu lösen.

83
00:07:52,010 --> 00:07:58,170
Sie hätten eine while-Schleife verwenden können, Sie hätten etwas Besonderes tun können, anstatt viele Wenns zu verwenden,

84
00:07:58,180 --> 00:08:00,640
und sonst gibt es viele Möglichkeiten.

85
00:08:00,710 --> 00:08:07,250
Solange Ihre Ausgabe jedoch die Kriterien erfüllt, die wir in der Herausforderung festgelegt haben, spielt es keine Rolle, welchen

86
00:08:07,250 --> 00:08:09,010
Weg Sie gewählt haben.

87
00:08:09,110 --> 00:08:15,920
In der Tat ist dies in diesem Stadium die perfekte Lösung, solange Ihre Lösung für Sie sinnvoll ist.
