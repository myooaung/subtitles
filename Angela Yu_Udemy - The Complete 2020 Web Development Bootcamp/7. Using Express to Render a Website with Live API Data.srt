0
1
00:00:00,360 --> 00:00:09,030
So in previous lessons, we saw how we could fetch some data from an external server, and then get the
1

2
00:00:09,030 --> 00:00:15,990
data in the form of a JSON, and then parse it into an actual Javascript object, which we can dig through
2

3
00:00:16,220 --> 00:00:18,220
to get the pieces of data that we want.
3

4
00:00:18,870 --> 00:00:25,400
So now that we're able to log the data that we're interested in, the next step is putting it onto our web
4

5
00:00:25,400 --> 00:00:26,490
site.
5

6
00:00:26,490 --> 00:00:33,660
This will be a little bit of revision from our Node and Express modules. In order to pass the data back
6

7
00:00:33,690 --> 00:00:38,700
inside our app.get, we have to tap in to our response.
7

8
00:00:38,700 --> 00:00:45,360
This is the response that our server is going to send to the client’s browser.
8

9
00:00:45,360 --> 00:00:50,280
Now, in this case, the response could just be the data that we've got,
9

10
00:00:50,280 --> 00:00:50,580
right?
10

11
00:00:50,580 --> 00:00:55,400
So we could say res, which refers to this response.
11

12
00:00:55,410 --> 00:00:59,040
Now you see why I didn't want to name this res as well, right,
12

13
00:00:59,070 --> 00:01:03,320
because it would be mightily confusing which one I'm using.
13

14
00:01:03,450 --> 00:01:09,150
So res refers to our app.get response, and the response we’re going to give
14

15
00:01:09,150 --> 00:01:13,530
the browser is going to be a send method.
15

16
00:01:13,650 --> 00:01:24,570
So we're going to send the data that we've got. “The temperature in London is “, and then we'll tag on the
16

17
00:01:24,660 --> 00:01:33,130
temp at the end here, and then maybe we'll even add a degrees Celsius.
17

18
00:01:33,150 --> 00:01:39,690
Now remember that, if we run our code as it is right now, it's going to crash, because we can only have
18

19
00:01:39,720 --> 00:01:46,050
one res.send in any given one of these app methods.
19

20
00:01:46,230 --> 00:01:52,680
So we can't send here and then send here, because once we call send, then that's basically the end. There’s
20

21
00:01:52,680 --> 00:01:55,340
no more sense going forwards.
21

22
00:01:55,340 --> 00:02:00,690
And if you do try to do that, you'll end up with an error that says something like this, “Cannot set headers
22

23
00:02:00,720 --> 00:02:05,700
after they're sent to the client. Error HTTP headers sent.” Something like this.
23

24
00:02:05,700 --> 00:02:10,830
Instead we're going to delete this previous send, hit save,
24

25
00:02:10,830 --> 00:02:17,640
and now, when we refresh our web site, you can see we're actually getting the data, and we're displaying
25

26
00:02:17,640 --> 00:02:19,100
it in the web site.
26

27
00:02:19,170 --> 00:02:24,230
The temperature in London is 6.27 degrees Celsius.
27

28
00:02:24,250 --> 00:02:31,660
Here's a question. How can we send this as a h1 instead of just a piece of text like this?
28

29
00:02:31,660 --> 00:02:37,010
Pause the video and see if you remember how to change it.
29

30
00:02:37,060 --> 00:02:37,360
All right.
30

31
00:02:37,390 --> 00:02:44,060
So we can actually write HTML in our res.send or our res.write.
31

32
00:02:44,110 --> 00:02:50,070
So all we have to do is just to wrap the final string inside a h1 tag,
32

33
00:02:50,200 --> 00:02:54,280
so the h1 beginning tag and the h1 end tag.
33

34
00:02:54,280 --> 00:03:00,730
Now if we go back and we hit refresh, then we actually get it displayed and formatted in the way that
34

35
00:03:00,730 --> 00:03:03,290
we want.
35

36
00:03:03,630 --> 00:03:05,670
Here's your challenge.
36

37
00:03:05,670 --> 00:03:10,470
See if you can remember how we can also send the weather description,
37

38
00:03:10,470 --> 00:03:15,980
so something like,  “The weather is currently “, plus the weather description.
38

39
00:03:16,140 --> 00:03:20,670
But remember that we can only have one res.send, because that's the end,
39

40
00:03:20,700 --> 00:03:23,120
that’s the final thing that happens.
40

41
00:03:23,160 --> 00:03:34,470
So see if you remember how you can do this. Pause the video and try to complete this challenge.
41

42
00:03:34,650 --> 00:03:34,890
All right.
42

43
00:03:34,950 --> 00:03:41,400
So we know that we can only have one res.send, but we can have multiple res.write,
43

44
00:03:41,430 --> 00:03:41,770
right?
44

45
00:03:42,210 --> 00:03:50,640
So we're going to wrap this inside a res.write, and we're going to then wrap this inside another
45

46
00:03:50,640 --> 00:03:52,140
res.write,
46

47
00:03:52,170 --> 00:04:00,000
and finally we're going to call res.send once we've written all the things that we want to send.
47

48
00:04:00,360 --> 00:04:08,580
And our weather description is probably going to go in as maybe a paragraph, or it could be a h3,
48

49
00:04:08,880 --> 00:04:11,070
depending on what it is that you want.
49

50
00:04:11,070 --> 00:04:16,470
So now when we refresh you can see “The weather is currently overcast clouds. The temperature in London
50

51
00:04:16,470 --> 00:04:23,280
is 6.25 degrees”, and we've now been able to send multiple lines of HTML using our res.
51

52
00:04:23,280 --> 00:04:33,020
write in combination with our res.send. The final thing that I want to display in here is an image.
52

53
00:04:33,020 --> 00:04:40,790
And if we go back to the API for OpenWeatherMap, you can see that they actually have a bunch of condition
53

54
00:04:40,790 --> 00:04:49,190
codes in their API. The weather condition codes are these ones here, the ID of the weather, and they
54

55
00:04:49,190 --> 00:04:55,730
correspond to different weather conditions, whether if it's a thunderstorm, or drizzle, or rain, or snow,
55

56
00:04:55,870 --> 00:05:05,270
etc. But we also get back an icon name, and that icon name corresponds to the weather condition as an
56

57
00:05:05,270 --> 00:05:12,950
image, and OpenWeatherMap actually provides all of the images for all of the icons that they send you.
57

58
00:05:12,950 --> 00:05:15,980
All you have to do is just fetch it like so.
58

59
00:05:16,040 --> 00:05:24,950
So say if the icon was 10d, then you would insert this 10d into this URL to get the image, and leave
59

60
00:05:25,040 --> 00:05:32,630
everything else as it is. And the image would look a bit like this, which we can use display into our
60

61
00:05:32,630 --> 00:05:33,140
web site.
61

62
00:05:33,890 --> 00:05:40,900
So let's see if you can figure out how to get hold of the icon from our weather data.
62

63
00:05:40,920 --> 00:05:43,330
Pause the video and try to complete that challenge.
63

64
00:05:45,960 --> 00:05:52,240
All right. So it's pretty simple, because we already know how to get the description. Then the icon is
64

65
00:05:52,240 --> 00:05:58,080
as easy as taking all of this, and then just getting hold of the icon at the very end.
65

66
00:05:58,090 --> 00:06:05,170
Now the alternative is, of course, you could have also just copied the path here and pasted the path in
66

67
00:06:05,380 --> 00:06:06,410
as well.
67

68
00:06:06,550 --> 00:06:11,870
But once we've gotten the name of the icon, we have to create the image URL,
68

69
00:06:12,010 --> 00:06:15,130
and this comes from our API here.
69

70
00:06:15,880 --> 00:06:22,420
And so I'm just going to copy this entire URL, and paste it in here as a string. And then, instead of
70

71
00:06:22,420 --> 00:06:31,300
using this part, which is the icon ID, I'm going to add it in by using string concatenation.
71

72
00:06:31,900 --> 00:06:36,140
And of course I'm going to insert the icon that came from here.
72

73
00:06:36,310 --> 00:06:42,250
Now that we've got the image URL, we're going to write another res.write,
73

74
00:06:42,340 --> 00:06:46,480
and this one is going to contain a image element.
74

75
00:06:46,480 --> 00:06:54,340
So pause the video and see if you can send back to the browser an image element that will display this
75

76
00:06:54,400 --> 00:06:58,780
image URL.
76

77
00:06:58,940 --> 00:06:59,190
All right.
77

78
00:06:59,220 --> 00:07:02,540
So we're going to again be using res.write,
78

79
00:07:02,550 --> 00:07:10,330
and in this case though, we've got an image element that we're going to create. Now images are self closing
79

80
00:07:10,330 --> 00:07:13,110
tags, so we don't need to close off the tag,
80

81
00:07:13,240 --> 00:07:19,140
but what we do need is a source, and the source is going to go right here.
81

82
00:07:19,240 --> 00:07:23,410
So let's pass in our image URL and hit save.
82

83
00:07:23,420 --> 00:07:29,370
And now when we refresh our web site, you can see the corresponding image is now picked up.
83

84
00:07:29,410 --> 00:07:32,840
Now we've got our live weather condition,
84

85
00:07:33,010 --> 00:07:41,810
temperature, and even the condition image being displayed in our web site, and that's all thanks to
85

86
00:07:41,810 --> 00:07:50,630
us being able to get live data using an API, making a HTTP get request to get the data as a JSON format,
86

87
00:07:51,140 --> 00:07:58,520
parsing it and fetching the specific items that we want, and then sending it back to the browser using
87

88
00:07:58,720 --> 00:08:04,010
the HTML that we want to write. Now in the next lesson,
88

89
00:08:04,050 --> 00:08:11,150
I want to show you how we can make a post request from the web site, so that the user could log onto
89

90
00:08:11,160 --> 00:08:17,400
our web site, type in a particular city that they're interested in, and then we can give them the actual
90

91
00:08:17,400 --> 00:08:19,710
weather for that city.
91

92
00:08:19,710 --> 00:08:22,890
So for all of that and more, I'll see you on the next lesson.
