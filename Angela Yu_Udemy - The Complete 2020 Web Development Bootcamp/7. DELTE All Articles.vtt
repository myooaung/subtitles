WEBVTT
0
1
00:00:00.240 --> 00:00:00.960
All right.
1

2
00:00:00.990 --> 00:00:02.800
Onwards and upwards.
2

3
00:00:03.060 --> 00:00:06.030
Let's crack on with the next one.
3

4
00:00:06.060 --> 00:00:16.770
So in this case the client is sending a HTTP DELETE request to our /articles route and this
4

5
00:00:16.860 --> 00:00:20.850
should delete all the articles in our collection.
5

6
00:00:20.850 --> 00:00:27.600
So this is something we haven't done before using Express. But as you would imagine it's pretty similar
6

7
00:00:27.630 --> 00:00:30.810
to GET and poST. It's simply app
7

8
00:00:30.810 --> 00:00:34.530
.delete specifying the route and a callback.
8

9
00:00:34.920 --> 00:00:37.940
So let's go ahead and write that in our code.
9

10
00:00:37.980 --> 00:00:45.750
So just below our app.post we're going to add the app.delete. And inside here the route that we're
10

11
00:00:45.750 --> 00:00:49.120
going to target is exactly the same as before
11

12
00:00:49.140 --> 00:00:52.410
/articles with an "s" at the end.
12

13
00:00:52.410 --> 00:00:59.010
So I'm just gonna paste that in here. And then we're going to add our callback with our req and res and
13

14
00:00:59.010 --> 00:01:01.620
then open up a set of curly braces.
14

15
00:01:01.620 --> 00:01:09.180
And inside these curly braces we will code up how our server will respond when the user makes that DELETE 
15

16
00:01:09.180 --> 00:01:11.650
request to the article's route.
16

17
00:01:11.700 --> 00:01:18.630
So how do we delete all of our documents inside the articles collection using Mongoose?
17

18
00:01:18.630 --> 00:01:26.460
So in Mongoose if you look through the documentation you might come across a method called deleteMany.
18

19
00:01:26.670 --> 00:01:29.190
And here's how it might look.
19

20
00:01:29.190 --> 00:01:32.020
So first we specify the model name
20

21
00:01:32.130 --> 00:01:35.850
so that will correspond to the collection that we want to delete.
21

22
00:01:35.850 --> 00:01:41.680
So in our case that will be article. And then we call the deleteMany method
22

23
00:01:41.880 --> 00:01:45.330
and inside this method we specify two arguments.
23

24
00:01:45.420 --> 00:01:52.710
The first one are the conditions on which we could filter through the collection to figure out what
24

25
00:01:52.710 --> 00:01:53.620
to delete.
25

26
00:01:53.760 --> 00:02:00.660
Now similar to how we did it with the find method, if we simply left out these conditions then delete
26

27
00:02:00.660 --> 00:02:08.610
Many will delete all of the documents inside a particular collection that we specify here. And then next
27

28
00:02:08.670 --> 00:02:13.890
all there is is a callback function where we can check to see if there were any errors or if it went
28

29
00:02:13.890 --> 00:02:14.940
successfully.
29

30
00:02:15.030 --> 00:02:17.890
So let's try this out in our code.
30

31
00:02:17.970 --> 00:02:26.430
So inside here we're going to target the Article model which is going to correspond to the articles
31

32
00:02:26.430 --> 00:02:28.890
collection that we want to delete from,
32

33
00:02:28.890 --> 00:02:36.870
and then we write a dot and we write deleteMany, open some parentheses and we're going to ignore the
33

34
00:02:36.870 --> 00:02:37.620
conditions,
34

35
00:02:37.650 --> 00:02:43.140
so we're going to delete everything. And then we're going to add a callback and then we can check to
35

36
00:02:43.140 --> 00:02:45.620
see if there were no errors.
36

37
00:02:45.810 --> 00:02:54.180
Then we're going to res.send "Successfully deleted all articles."
37

38
00:02:57.020 --> 00:03:01.550
But if there was an error then we're going to res.send the error of course.
38

39
00:03:02.300 --> 00:03:05.550
And then we're going to close everything off with semicolons.
39

40
00:03:05.870 --> 00:03:11.320
And now we're ready to test it again using Postman.
40

41
00:03:11.590 --> 00:03:17.580
So even though previously using Postman we tried it using the post route,
41

42
00:03:17.650 --> 00:03:22.900
I can change this to any of the verbs that we already specified in our server.
42

43
00:03:22.930 --> 00:03:30.430
So for example if I wanted to use the GET request on the /articles, what would you predict
43

44
00:03:30.430 --> 00:03:32.190
we get back? All right.
44

45
00:03:32.230 --> 00:03:33.910
Now let's try it.
45

46
00:03:33.910 --> 00:03:41.200
Hit send. And yeah, it gets back all of the current articles that we have in our articles collection.
46

47
00:03:41.200 --> 00:03:44.740
It works exactly the same as when we did it through the browser
47

48
00:03:44.740 --> 00:03:46.400
using that URL.
48

49
00:03:46.960 --> 00:03:49.170
Now the browser can only do GET,
49

50
00:03:49.240 --> 00:03:55.360
but as we saw in the last lesson using Postman we can also test out post, put, patch, delete and a whole
50

51
00:03:55.360 --> 00:03:56.690
bunch of other things.
51

52
00:03:56.770 --> 00:04:03.160
Now to keep it RESTful we're going to keep it only limited to these five verbs and we are now testing
52

53
00:04:03.190 --> 00:04:05.040
the delete method.
53

54
00:04:05.140 --> 00:04:11.140
So we're going to send a DELETE request to localhost:3000/articles and our
54

55
00:04:11.140 --> 00:04:15.920
server hopefully should respond with the corresponding data.
55

56
00:04:15.970 --> 00:04:22.780
Now because when I delete all of our documents just before that happens, I'm going to hit copy over here
56

57
00:04:23.620 --> 00:04:25.690
after making that GET request.
57

58
00:04:25.690 --> 00:04:31.840
Alternatively you can go into Robo 3T and where you have your articles, if you click on this little
58

59
00:04:31.840 --> 00:04:34.300
button here which looks like a a document
59

60
00:04:34.300 --> 00:04:41.080
you can also view all of your document and copy it because we're very soon going to delete all of it.
60

61
00:04:41.080 --> 00:04:45.250
So let's go ahead and hit send and send that DELETE request.
61

62
00:04:45.250 --> 00:04:49.290
Now you can see it says "Successfully deleted all articles."
62

63
00:04:49.420 --> 00:04:54.480
And if I change that to a GET request now you can see that I'm getting back nothing.
63

64
00:04:54.640 --> 00:05:01.780
And if we switch over to our Robo 3T and I click view documents, no records left.
64

65
00:05:01.780 --> 00:05:10.090
So we have now deleted all the articles when a user makes a DELETE request to our articles route.
