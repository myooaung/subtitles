0
1
00:00:00,350 --> 00:00:00,660
All right.
1

2
00:00:00,690 --> 00:00:08,790
So in the last lesson we tackled the PUT request to a specific resource. In this lesson we're going to
2

3
00:00:08,790 --> 00:00:13,400
look at its close cousin or maybe non identical twin brother.
3

4
00:00:15,510 --> 00:00:23,210
And we're going to update a particular article but only the fields that we actually provided data for.
4

5
00:00:23,250 --> 00:00:29,730
So as we saw in the last lesson, if we make a PUT request to a specific resource and we only provide
5

6
00:00:29,730 --> 00:00:37,080
a value for one field then the other field that is neglected or we didn't provide a value for the PUT
6

7
00:00:37,080 --> 00:00:44,130
request will quite literally interpret that as you wanting to make it null or nil or empty or doesn't
7

8
00:00:44,130 --> 00:00:44,550
exist.
8

9
00:00:44,610 --> 00:00:52,530
So in the cases where you only want to update a specific field in a specific document then the HTTP method
9

10
00:00:52,530 --> 00:00:55,380
that you should be using is patch.
10

11
00:00:55,380 --> 00:00:58,480
So let's go and add a PATCH request.
11

12
00:00:58,530 --> 00:01:03,630
So we're going to delete that semicolon from the previous put and this one is going to be the patch
12

13
00:01:03,630 --> 00:01:04,530
method.
13

14
00:01:04,710 --> 00:01:11,130
Now in here we're going to have a function that has a req and res and we're going to open up our
14

15
00:01:11,130 --> 00:01:12,730
curly braces.
15

16
00:01:12,780 --> 00:01:22,260
Now inside this patch function we want to update a particular document in our article collection but
16

17
00:01:22,260 --> 00:01:26,120
we only want to update the field that we provide.
17

18
00:01:26,130 --> 00:01:32,460
So in this case the CRUD operation is still update and we're still going to be using the same update
18

19
00:01:32,460 --> 00:01:37,230
method that we used in the last lesson when we wrote the code to handle PUT request.
19

20
00:01:37,470 --> 00:01:43,740
But in this case when we call the Update method we no longer have that overwrite property set to true
20

21
00:01:43,980 --> 00:01:51,600
and the other addition is that we now have this set flag which tells MongoDB to only update the fields
21

22
00:01:51,600 --> 00:01:53,920
that we have provided updates for.
22

23
00:01:53,940 --> 00:01:56,320
So let's see this in practice.
23

24
00:01:56,370 --> 00:02:04,140
So inside our code we'll target the article model and we'll say update and then the first parameter will
24

25
00:02:04,140 --> 00:02:13,620
be the condition which is going to be the same req.params.articleTitle and that if you
25

26
00:02:13,620 --> 00:02:16,590
remember of course comes from over here.
26

27
00:02:16,590 --> 00:02:19,620
So the route that the user used or the URL.
27

28
00:02:19,770 --> 00:02:26,430
Now the next thing that we have to add are the updates and we're going to use this flag called set.
28

29
00:02:26,600 --> 00:02:33,270
Now the way that the set operator works is that you put in the flag by typing a dollar sign, a set and
29

30
00:02:33,270 --> 00:02:38,490
then a colon. And then what follows are the values for the fields that you want to update and you can
30

31
00:02:38,490 --> 00:02:40,530
add in as many as you want.
31

32
00:02:40,530 --> 00:02:42,550
So this is the way that you would structure it
32

33
00:02:42,570 --> 00:02:45,560
and there's also some really good examples of how you would use it.
33

34
00:02:45,570 --> 00:02:50,730
So I recommend having a read through this reference and I'll link to it in the course resources list
34

35
00:02:50,790 --> 00:02:51,500
as well.
35

36
00:02:51,510 --> 00:02:58,380
So essentially when we come back to our code what we want our code to look like is that if the client
36

37
00:02:58,530 --> 00:03:05,150
only wanted to change the title then this part should read title: something else
37

38
00:03:05,160 --> 00:03:11,830
let's say "Chuck Norris". And if we only wanted to update the content then it would be something like this.
38

39
00:03:11,910 --> 00:03:17,520
And if we wanted to update the content and the title then it would look something like this.
39

40
00:03:17,550 --> 00:03:22,860
Now how can we make that dynamic so that we let the client choose what it is that they actually want
40

41
00:03:22,860 --> 00:03:23,460
to update?
41

42
00:03:23,880 --> 00:03:32,130
Well, we know that when we send a request over, body-parser will pass the request and turn it into an
42

43
00:03:32,130 --> 00:03:32,940
object.
43

44
00:03:32,970 --> 00:03:41,100
So that means that if I added a value for a title and a value for content let's just call that TEST
44

45
00:03:41,220 --> 00:03:49,480
and TEST, then in this case when that gets sent over to my server what I will see when I tap into or 
45

46
00:03:49,500 --> 00:03:58,590
log my req.body is it will basically be equal to a Javascript object that has two properties:
46

47
00:03:58,680 --> 00:04:06,090
a title called TEST and another property called content which is also set to TEST and you can verify this
47

48
00:04:06,120 --> 00:04:08,440
if you want to just by console logging.
48

49
00:04:08,520 --> 00:04:10,770
But essentially this is what it would look like.
49

50
00:04:10,820 --> 00:04:19,050
Now if I only had a title that I sent over in my request then it would simply look like this.
50

51
00:04:19,530 --> 00:04:26,040
So as you can see the req.body object is pretty much what we want to go in here which will
51

52
00:04:26,040 --> 00:04:31,620
allow the user to determine which fields they want to update and which fields they don't want to update.
52

53
00:04:31,620 --> 00:04:39,290
So all we have to do inside here is to specify the req.body.
53

54
00:04:39,420 --> 00:04:46,560
And now when a client sends over a PATCH request then body-parser will repass the request and it will
54

55
00:04:46,560 --> 00:04:49,570
pick out the fields that they have provided updates to
55

56
00:04:49,710 --> 00:04:56,790
and by using the set flag we're able to update our database for only the fields that have a new value
56

57
00:04:57,090 --> 00:04:59,820
which is fulfilling our PATCH request's duty.
57

58
00:05:00,780 --> 00:05:04,230
So now that we've completed this we're almost ready to test it.
58

59
00:05:07,410 --> 00:05:15,120
All we have to do now is to simply add in our callback, so our function that can send an error.
59

60
00:05:15,450 --> 00:05:26,460
And if there were no errors then we will simply res.send "Successfully updated article."
60

61
00:05:26,940 --> 00:05:31,860
But if there were errors then we will res.send the errors.
61

62
00:05:31,860 --> 00:05:38,460
So now let's go and close off all of the places where we need semicolons, hit save.
62

63
00:05:38,490 --> 00:05:44,370
Now before we test it I just want to show you that I've updated our database so that we restore our
63

64
00:05:44,370 --> 00:05:46,230
database to the previous values.
64

65
00:05:46,230 --> 00:05:51,840
So my article on Jack Bauer now has the previous title and the previous content and I did this by simply
65

66
00:05:51,840 --> 00:05:58,590
right clicking on my article entry and just editing the document by copy and pasting the values that
66

67
00:05:58,590 --> 00:06:02,730
we had from the GitHub repopulate database page.
67

68
00:06:02,730 --> 00:06:11,160
So, now that I have the original title and the original content it's time to give patch a spin using
68

69
00:06:11,190 --> 00:06:11,890
Postman.
69

70
00:06:12,000 --> 00:06:13,970
So I'm going to change my request to PATCH.
70

71
00:06:14,010 --> 00:06:20,310
I'm going to leave my URL exactly the same targeting articles/Jack%20Bauer in my body this time
71

72
00:06:20,700 --> 00:06:23,800
I am only going to change the title.
72

73
00:06:23,880 --> 00:06:28,680
So if you have any key and value pairs left over from previously you can just click on the cross to
73

74
00:06:28,680 --> 00:06:30,810
delete them so you get a fresh start.
74

75
00:06:31,140 --> 00:06:37,980
But in my case the only property I want to update is the title and I'm gonna change that to just say
75

76
00:06:38,010 --> 00:06:39,280
Chuck Norris.
76

77
00:06:39,290 --> 00:06:46,710
So, all going well this should update my article on Jack Bauer to change the title to Chuck Norris believe
77

78
00:06:46,740 --> 00:06:50,220
the content and everything else completely intact.
78

79
00:06:50,220 --> 00:06:55,860
So let's go ahead and hit send and we get a successful message back
79

80
00:06:55,860 --> 00:07:02,700
but the moment of truth is when we update our articles collection and when we take a look at our last
80

81
00:07:02,700 --> 00:07:08,400
entry, you can see that the content, the id, everything else has been kept exactly the same
81

82
00:07:08,400 --> 00:07:15,900
and the only change is the one where I provided a value for. And that is how the PATCH method should
82

83
00:07:15,900 --> 00:07:16,320
work.
