WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.450
Britain has a data type called addict,

00:00:02.450 --> 00:00:04.450
which is the short form for dictionary,

00:00:04.450 --> 00:00:09.040
which allows us toe store data in Kiva new peers.

00:00:09.040 --> 00:00:10.530
For example.

00:00:10.530 --> 00:00:13.540
If I want to store information about a person,

00:00:13.540 --> 00:00:20.750
then I can clear of date in this way so I can take the one pickles toe in curly bracket.

00:00:20.750 --> 00:00:26.490
I can give a key such as name and then a value off the person that they denote.

00:00:26.490 --> 00:00:30.750
And then I can specify here city as another key.

00:00:30.750 --> 00:00:32.990
And then I can give your value.

00:00:32.990 --> 00:00:34.320
Angulo s another.

00:00:34.320 --> 00:00:35.700
I live here.

00:00:35.700 --> 00:00:36.640
I pressed.

00:00:36.640 --> 00:00:40.170
Enter No p one is a dictionary notice.

00:00:40.170 --> 00:00:43.360
We have used the curly bracket just like the set.

00:00:43.360 --> 00:00:44.460
But if I say here,

00:00:44.460 --> 00:00:45.620
take P one,

00:00:45.620 --> 00:00:48.700
it's going to say that it's a dict incident there.

00:00:48.700 --> 00:00:54.780
Set the different between set and addict in terms of its usage is the set is a collection

00:00:54.780 --> 00:01:00.330
off a comma separated values inside locally record whereas addict is a collection off comma

00:01:00.330 --> 00:01:04.940
separated value where each value here is a Cuban Lupien by itself.

00:01:04.940 --> 00:01:07.070
And unlike the set,

00:01:07.070 --> 00:01:10.830
Dict is something that you can maintain the order.

00:01:10.830 --> 00:01:11.530
For example,

00:01:11.530 --> 00:01:14.330
if I say your name and city has been stored.

00:01:14.330 --> 00:01:15.950
If I type you're p one,

00:01:15.950 --> 00:01:22.570
you'll see that we get the same order in which we have added in orderto add a new element

00:01:22.570 --> 00:01:23.590
toe p one.

00:01:23.590 --> 00:01:27.290
I have to supply a key value again and the way you can do it again,

00:01:27.290 --> 00:01:29.050
see your P one off,

00:01:29.050 --> 00:01:29.990
for example.

00:01:29.990 --> 00:01:35.750
A new key here equals to say We know that we know dot co.

00:01:35.750 --> 00:01:37.010
That's Endo.

00:01:37.010 --> 00:01:44.030
Never see p one has three came and repairs here to redeem a value for a given key.

00:01:44.030 --> 00:01:47.970
I can against a here people off city like this,

00:01:47.970 --> 00:01:49.610
and then I get the value.

00:01:49.610 --> 00:01:53.610
So the key here I have used the strength.

00:01:53.610 --> 00:01:56.920
But key can be any immutable data types,

00:01:56.920 --> 00:01:58.090
such as even a number.

00:01:58.090 --> 00:01:58.930
For example,

00:01:58.930 --> 00:02:02.730
I can say we two equals toe a curly bracket.

00:02:02.730 --> 00:02:04.650
One colon.

00:02:04.650 --> 00:02:05.970
Something else letter,

00:02:05.970 --> 00:02:06.510
for example.

00:02:06.510 --> 00:02:11.570
I consider an old onda to is nothing worth say For example,

00:02:11.570 --> 00:02:16.140
Shah like this and he too is an object or a ticked.

00:02:16.140 --> 00:02:18.230
That represents two keys,

00:02:18.230 --> 00:02:20.650
which is one and 22.

00:02:20.650 --> 00:02:22.750
So I cannot say Pito off zero.

00:02:22.750 --> 00:02:29.130
But I can always say Peter off one which gives me we know p two off 22 you can see that I

00:02:29.130 --> 00:02:30.520
get the value shop.

00:02:30.520 --> 00:02:34.250
So generally the keys here would be strings,

00:02:34.250 --> 00:02:35.690
but not necessarily.

00:02:35.690 --> 00:02:40.820
Once you have addict that are a lot of functions addict allows us to use.

00:02:40.820 --> 00:02:46.270
So if you want to check is a d a r addict and then you can see that we have a bunch of

00:02:46.270 --> 00:02:46.880
functions.

00:02:46.880 --> 00:02:48.340
That's is clear.

00:02:48.340 --> 00:02:49.080
Copy.

00:02:49.080 --> 00:02:55.150
These are same as the list and set clear Removes all elements off the dicked.

00:02:55.150 --> 00:03:00.640
If you want to empty or if you're on a shallow copy off the picked so we can say copy.

00:03:00.640 --> 00:03:02.680
And then there are other functions.

00:03:02.680 --> 00:03:03.400
For example,

00:03:03.400 --> 00:03:05.330
get is the way you say,

00:03:05.330 --> 00:03:06.260
give me a value.

00:03:06.260 --> 00:03:08.010
So if I say you're the one,

00:03:08.010 --> 00:03:08.980
this is a B one.

00:03:08.980 --> 00:03:10.300
I can say p one.

00:03:10.300 --> 00:03:11.680
Don't get on.

00:03:11.680 --> 00:03:13.980
I can say the keys name.

00:03:13.980 --> 00:03:15.240
I want to get the name off.

00:03:15.240 --> 00:03:16.570
People get this,

00:03:16.570 --> 00:03:18.750
which is same as what we did earlier.

00:03:18.750 --> 00:03:21.650
People off and then say your name.

00:03:21.650 --> 00:03:28.930
But the main difference between these two is get to the function and in case off an absence

00:03:28.930 --> 00:03:29.800
of a key,

00:03:29.800 --> 00:03:30.900
for example that say,

00:03:30.900 --> 00:03:33.140
I don't have a key here called Phone.

00:03:33.140 --> 00:03:37.890
If I type you're p one off four like this,

00:03:37.890 --> 00:03:44.430
using a subscript it is gonna give me a key error like in gets off a list where we access

00:03:44.430 --> 00:03:47.070
the wrong index and we caught this error here.

00:03:47.070 --> 00:03:47.620
Also,

00:03:47.620 --> 00:03:49.980
phone is like an index here,

00:03:49.980 --> 00:03:51.310
but that doesn't exist,

00:03:51.310 --> 00:03:52.860
so it gives you another.

00:03:52.860 --> 00:03:57.250
But as if I say your people don't get and then say phone.

00:03:57.250 --> 00:04:00.170
Since phone doesn't exist,

00:04:00.170 --> 00:04:01.360
triptans none.

00:04:01.360 --> 00:04:02.620
Soto understand.

00:04:02.620 --> 00:04:10.180
Let's go to the help off the wondered Get press Enter and it says that get you supply key

00:04:10.180 --> 00:04:15.040
and also an optional a T four value in case the key is missing.

00:04:15.040 --> 00:04:16.750
What is the value you want?

00:04:16.750 --> 00:04:20.470
So we'll see them in practical examples in the forthcoming videos.

00:04:20.470 --> 00:04:21.610
But at this time,

00:04:21.610 --> 00:04:22.850
I didn't supply anything.

00:04:22.850 --> 00:04:27.530
Now the value that you get is none because the key doesn't exist,

00:04:27.530 --> 00:04:29.730
it says here returned the value for the key.

00:04:29.730 --> 00:04:31.460
If the key is in the dictionary.

00:04:31.460 --> 00:04:36.400
Otherwise the default valuable Billiton and write another default value happens to be none

00:04:36.400 --> 00:04:36.400
,

00:04:36.400 --> 00:04:41.050
so it is always better to use get instead off square bracket.

00:04:41.050 --> 00:04:41.580
In addition,

00:04:41.580 --> 00:04:44.060
because if you're writing a script record tradition.

00:04:44.060 --> 00:04:46.910
You must be really toe handle these kind of others,

00:04:46.910 --> 00:04:49.670
whereas here there is no error in case of the key.

00:04:49.670 --> 00:04:50.680
He's not formed.

00:04:50.680 --> 00:04:53.290
So which is a good thing in many places,

00:04:53.290 --> 00:04:55.730
If you type your be wonder items,

00:04:55.730 --> 00:04:57.390
it's going to give you a collection.

00:04:57.390 --> 00:05:01.760
You can see that it's giving you a A list off to pull.

00:05:01.760 --> 00:05:07.520
So the first to do Bill in the list is going to be a name by Lou Pair of the 1st 1 there.

00:05:07.520 --> 00:05:08.190
Another name?

00:05:08.190 --> 00:05:08.940
Balloch Pier.

00:05:08.940 --> 00:05:09.730
Another name.

00:05:09.730 --> 00:05:10.250
L appear.

00:05:10.250 --> 00:05:15.210
Usually this is used when you want toe literate or loop over the dictionary.

00:05:15.210 --> 00:05:16.090
For example.

00:05:16.090 --> 00:05:22.500
Let's say this is P one and I want to look over each of them and then get Name Is we No

00:05:22.500 --> 00:05:22.810
name.

00:05:22.810 --> 00:05:24.230
City is bang your email.

00:05:24.230 --> 00:05:25.900
It's also so what I can do that.

00:05:25.900 --> 00:05:34.090
Can you the for loop here for item in B one dot items and then I press ender press couple

00:05:34.090 --> 00:05:35.580
of space trained.

00:05:35.580 --> 00:05:41.950
The first thing that I want to do here is that the percent age s his percentage s and then

00:05:41.950 --> 00:05:43.240
you're the person a symbol,

00:05:43.240 --> 00:05:46.600
and then I can take her item off zero,

00:05:46.600 --> 00:05:49.860
which happens to be the key and then item off one.

00:05:49.860 --> 00:05:50.840
Because if you remember,

00:05:50.840 --> 00:05:52.780
item is a to pull.

00:05:52.780 --> 00:05:54.990
So if I press internal,

00:05:54.990 --> 00:05:55.950
you should see.

00:05:55.950 --> 00:06:01.340
But I should have one more bracket here on the bracket here.

00:06:01.340 --> 00:06:02.710
Safe a press enter.

00:06:02.710 --> 00:06:08.620
You'll see that it's supposed to give Name is we know cities spangler email is we know that

00:06:08.620 --> 00:06:08.620
,

00:06:08.620 --> 00:06:09.550
you know dot Go.

00:06:09.550 --> 00:06:12.470
Now if you want to find out What is that data?

00:06:12.470 --> 00:06:17.610
Type off each of the items so I can you the same loop once again and then say your print

00:06:17.610 --> 00:06:19.380
time off item.

00:06:19.380 --> 00:06:22.360
It's supposed to be a careful on.

00:06:22.360 --> 00:06:24.490
You can see that all the three of them are terrible.

00:06:24.490 --> 00:06:29.620
So since the pupil had $2 exactly so the 1st 1 is the key.

00:06:29.620 --> 00:06:31.750
2nd 1 Is the family there?

00:06:31.750 --> 00:06:33.200
So similarly,

00:06:33.200 --> 00:06:39.190
Let's go and see what other functions we have so addicted thought simply 30 area addict so

00:06:39.190 --> 00:06:45.460
bizarre items so keys will give you only the keys on values give you only values.

00:06:45.460 --> 00:06:46.090
For example,

00:06:46.090 --> 00:06:51.700
this is the one people that Keyes will give you only the keys as a list as you can see that

00:06:51.700 --> 00:06:52.850
there is a list here.

00:06:52.850 --> 00:06:53.300
Name.

00:06:53.300 --> 00:06:54.160
Citi email.

00:06:54.160 --> 00:07:01.600
Onda P one dot bad news will give you the values so it would be note mangler and we know

00:07:01.600 --> 00:07:02.820
that we know that Go.

00:07:02.820 --> 00:07:06.510
So that's to get unusual values or unusual keys.

00:07:06.510 --> 00:07:11.040
So pump is an example off removing a particular element.

00:07:11.040 --> 00:07:14.610
So if I say your help on be Wonder Pop,

00:07:14.610 --> 00:07:17.270
it will remove the specified key.

00:07:17.270 --> 00:07:21.430
That means you have to supply AKI Onda returned the corresponding value.

00:07:21.430 --> 00:07:22.780
If the key is not formed,

00:07:22.780 --> 00:07:23.660
a D is returned.

00:07:23.660 --> 00:07:26.750
Where is the default value in case the key is not phone.

00:07:26.750 --> 00:07:27.380
So,

00:07:27.380 --> 00:07:28.060
for example,

00:07:28.060 --> 00:07:29.740
let's have your P one.

00:07:29.740 --> 00:07:30.340
Which is this?

00:07:30.340 --> 00:07:35.550
What you and I want to remove the city so you can save people under Palm and then supply

00:07:35.550 --> 00:07:41.230
city press enter and P one is now not containing the Citibank.

00:07:41.230 --> 00:07:43.270
You're at all another way off.

00:07:43.270 --> 00:07:46.350
Creating a dictionary object is by typing.

00:07:46.350 --> 00:07:49.300
Let's say this time I wanna safety three equals toe.

00:07:49.300 --> 00:07:51.460
I can use a victor constructor.

00:07:51.460 --> 00:07:54.800
Unlike the list set our triple constructors,

00:07:54.800 --> 00:07:57.150
where you were not able to supply multiple values.

00:07:57.150 --> 00:08:00.090
Here we can pass dynamic parameters.

00:08:00.090 --> 00:08:00.830
For example,

00:08:00.830 --> 00:08:05.530
I can say here Petri name equals two and then supply a name.

00:08:05.530 --> 00:08:06.440
That's a for example,

00:08:06.440 --> 00:08:06.750
Shah.

00:08:06.750 --> 00:08:10.120
And then I say city equals to save Angulo.

00:08:10.120 --> 00:08:14.090
E mail equals toe show.

00:08:14.090 --> 00:08:15.370
At example,

00:08:15.370 --> 00:08:20.840
that car and then I can say each equals to define us.

00:08:20.840 --> 00:08:24.000
Enter You can see that we got Petri,

00:08:24.000 --> 00:08:30.590
which is a new dictionary notice here that we did not use a quotation mark for name but for

00:08:30.590 --> 00:08:33.320
values we have given very where it is applicable For new medics,

00:08:33.320 --> 00:08:34.400
it is not applicable.

00:08:34.400 --> 00:08:36.720
But when the dictionary is returned,

00:08:36.720 --> 00:08:38.310
it is giving me key value.

00:08:38.310 --> 00:08:41.460
Peace in the form off strings Here everywhere of course,

00:08:41.460 --> 00:08:42.650
ages and number.

00:08:42.650 --> 00:08:48.280
You can qualify turkey when you want to loop over a particular dictionary,

00:08:48.280 --> 00:08:51.410
you can definitely say for something like,

00:08:51.410 --> 00:08:51.870
say,

00:08:51.870 --> 00:08:54.250
K in the tree.

00:08:54.250 --> 00:08:57.830
Que will take only the keys off the speed three.

00:08:57.830 --> 00:09:00.390
So I don't have to literally save between our keys,

00:09:00.390 --> 00:09:04.510
but this is automatically implied safer print Here.

00:09:04.510 --> 00:09:05.360
What is K?

00:09:05.360 --> 00:09:11.320
You will see that K is nothing but that key like name Citi Email age So what I can do that

00:09:11.320 --> 00:09:19.650
can say for K in Petri print and then I can say percentage s east percentage s percent age

00:09:19.650 --> 00:09:24.140
and then I supplying your key and then Petri off.

00:09:24.140 --> 00:09:25.540
So we're case,

00:09:25.540 --> 00:09:26.860
the key like name.

00:09:26.860 --> 00:09:31.740
So Petri off name Petri of city people have emailed This is what we're actually trying to

00:09:31.740 --> 00:09:33.800
get from here and let me press,

00:09:33.800 --> 00:09:37.290
enter and you'll see that we get name is Shannon Cities,

00:09:37.290 --> 00:09:38.910
Spangler and so on and so forth.

00:09:38.910 --> 00:09:41.940
So if you want to look over a dictionary,

00:09:41.940 --> 00:09:43.940
what you get is a key,

00:09:43.940 --> 00:09:47.290
and then using the key will be able to access its values.

00:09:47.290 --> 00:09:50.930
You can also check if a key exists in a dictionary,

00:09:50.930 --> 00:09:51.830
for example,

00:09:51.830 --> 00:09:54.250
name in PCI.

00:09:54.250 --> 00:09:56.470
And it says that true part.

00:09:56.470 --> 00:09:57.330
If I type,

00:09:57.330 --> 00:09:59.690
say state in Petri,

00:09:59.690 --> 00:10:02.810
it is false because state is an invalid key.

00:10:02.810 --> 00:10:06.840
Whenever you're trying to access a particular value off a key,

00:10:06.840 --> 00:10:10.250
you can always check if name in Petri on,

00:10:10.250 --> 00:10:12.750
then only use a Petri off name,

00:10:12.750 --> 00:10:16.400
and that's a better way off accessing the dictionary values

