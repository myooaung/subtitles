WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.050
to learn how to handle exceptions.

00:00:03.050 --> 00:00:08.710
We will delete all these lines of court on right a more appropriate example.

00:00:08.710 --> 00:00:17.300
Let's have a function called test rich takes and it'll ever like numbs as a list off values

00:00:17.300 --> 00:00:17.800
on.

00:00:17.800 --> 00:00:24.140
I expected to numbers in this I'm gonna assign the numbers off zero toe end that there any

00:00:24.140 --> 00:00:25.910
gun store comes off zero.

00:00:25.910 --> 00:00:26.940
And then I said,

00:00:26.940 --> 00:00:32.350
D equals toe numbs off one like numerator and denominator on.

00:00:32.350 --> 00:00:37.700
I'm supposed to calculate the caution off yen divided by D.

00:00:37.700 --> 00:00:40.100
And I wanted an individual allusion this time.

00:00:40.100 --> 00:00:46.220
So I'm gonna say her end divided by D and I want to create person Ph.

00:00:46.220 --> 00:00:47.930
D divided by percentage.

00:00:47.930 --> 00:00:49.830
D equals two person D,

00:00:49.830 --> 00:00:54.150
where the values are nothing but n d and cute.

00:00:54.150 --> 00:01:02.810
Let's say the function called main to call the function where I have to supply a list off

00:01:02.810 --> 00:01:06.480
two numbers at least so that it may contain more numbers.

00:01:06.480 --> 00:01:11.910
But I'm interested in two numbers and then I'll say here or something like data equals toe

00:01:11.910 --> 00:01:11.910
.

00:01:11.910 --> 00:01:18.150
Let's say 1 23 and the secretary four and then I'll supply You're best off data.

00:01:18.150 --> 00:01:22.200
So data being a list the list is received over here.

00:01:22.200 --> 00:01:25.270
The list has the first number as one.

00:01:25.270 --> 00:01:26.570
Really three second numbers.

00:01:26.570 --> 00:01:27.340
34.

00:01:27.340 --> 00:01:30.740
So now regard toe that want religion reporting and then descend.

00:01:30.740 --> 00:01:32.470
We're doing an intruder division.

00:01:32.470 --> 00:01:35.060
We get the caution and we're going to print the caution.

00:01:35.060 --> 00:01:37.730
One last thing is toe call the main.

00:01:37.730 --> 00:01:39.830
If this is the main more June,

00:01:39.830 --> 00:01:43.500
we say you've done the name Equal stood under me,

00:01:43.500 --> 00:01:45.400
Then call the main function.

00:01:45.400 --> 00:01:48.440
So I go back to the command front and I'll die.

00:01:48.440 --> 00:01:50.620
Pure white Country E x.

00:01:50.620 --> 00:01:56.820
$16 b y a press enter and you will see that it is 1 23 divided by 34.

00:01:56.820 --> 00:01:58.580
Caution is three.

00:01:58.580 --> 00:02:00.550
Now let's go and make some mistakes.

00:02:00.550 --> 00:02:06.450
And what I do is I'm gonna supply here only one number instead of two numbers,

00:02:06.450 --> 00:02:08.450
so numbs off.

00:02:08.450 --> 00:02:11.260
Zero is 1 23 That's a Cento end,

00:02:11.260 --> 00:02:15.800
Andi At the time when the line number three is being executed,

00:02:15.800 --> 00:02:20.020
we don't have index one the operator square bracket here,

00:02:20.020 --> 00:02:22.940
where I'm tryingto access the value at a given index.

00:02:22.940 --> 00:02:27.900
This fails and it raises an exception called index error.

00:02:27.900 --> 00:02:32.390
Since we did not handle that here the function raises that exception.

00:02:32.390 --> 00:02:34.890
So we are now calling the function over here.

00:02:34.890 --> 00:02:35.680
Andi.

00:02:35.680 --> 00:02:41.610
This is now going to be raising the exception because we did not handle the exception here

00:02:41.610 --> 00:02:41.610
.

00:02:41.610 --> 00:02:44.120
The statements after this,

00:02:44.120 --> 00:02:45.170
if it all it was there,

00:02:45.170 --> 00:02:45.810
for example,

00:02:45.810 --> 00:02:48.600
at the front end off me,

00:02:48.600 --> 00:02:54.260
this statement will be skipped because there's an exception or an unhindered exception that

00:02:54.260 --> 00:02:55.940
would be raised from here.

00:02:55.940 --> 00:02:58.530
Main on the main is called over here,

00:02:58.530 --> 00:03:02.480
and the main is also not being called from an exception standpoint.

00:03:02.480 --> 00:03:08.390
So because there's no exception handler over here now this entire script is going to raise

00:03:08.390 --> 00:03:09.080
an exception.

00:03:09.080 --> 00:03:09.870
Unhand.

00:03:09.870 --> 00:03:13.960
Exceptions are handled by the fight an interpreter itself and bite.

00:03:13.960 --> 00:03:17.440
An interpreter simply gives you what's called the stack trees.

00:03:17.440 --> 00:03:23.390
The stack trace will give you from where the actual origin off exception took place.

00:03:23.390 --> 00:03:24.690
That happened over here,

00:03:24.690 --> 00:03:29.240
and that was propagated to the main function that was propagated to this If block and that

00:03:29.240 --> 00:03:31.600
was propagated toe the interpreter so on,

00:03:31.600 --> 00:03:33.980
this will be given in the stack trace.

00:03:33.980 --> 00:03:35.850
So let's go and try the same thing now.

00:03:35.850 --> 00:03:39.580
So I press enter after typing by 10 3 years,

00:03:39.580 --> 00:03:43.470
16 B way and you'll see it is traced back.

00:03:43.470 --> 00:03:46.580
Most of recent Call last Andi.

00:03:46.580 --> 00:03:49.750
It says your file E x 16 dark people lining,

00:03:49.750 --> 00:03:53.110
but 30 because it's going like this in line over 13.

00:03:53.110 --> 00:03:55.270
We call the function that through an exception.

00:03:55.270 --> 00:03:57.080
And if you see the next to line,

00:03:57.080 --> 00:03:59.650
it says that it is the test functions,

00:03:59.650 --> 00:04:00.650
not the main function.

00:04:00.650 --> 00:04:06.610
So in the main function there is a call here that caused the problem and again in the best

00:04:06.610 --> 00:04:09.670
of function that the line here that caused the problem.

00:04:09.670 --> 00:04:12.720
So if you see here it is again in the test.

00:04:12.720 --> 00:04:14.280
So this is the main functions.

00:04:14.280 --> 00:04:15.950
Is the test in test?

00:04:15.950 --> 00:04:19.980
We're trying to say d Colston arms off one and that is the reason why you're getting in

00:04:19.980 --> 00:04:20.260
Arab.

00:04:20.260 --> 00:04:23.970
So you see that index error list index out of range?

00:04:23.970 --> 00:04:26.190
Now we know that there isn't index error.

00:04:26.190 --> 00:04:27.450
Can we handle that?

00:04:27.450 --> 00:04:31.450
So this is a place where some user defined somebody has different dysfunction,

00:04:31.450 --> 00:04:32.790
and I'm trying to call,

00:04:32.790 --> 00:04:35.930
but I don't want this to break the execution of the program.

00:04:35.930 --> 00:04:41.810
I want to this program to give me this line all the times Let's give it a second try.

00:04:41.810 --> 00:04:46.350
So I'm gonna go supply here a value which is say we not.

00:04:46.350 --> 00:04:50.550
So the first here is numbs 1 23 No problem.

00:04:50.550 --> 00:04:56.590
And then I have here a string That is not a problem now because we do have an index index

00:04:56.590 --> 00:04:59.600
one in our numbs which is nothing but this data.

00:04:59.600 --> 00:05:05.880
But that is a string we note on Then when I'm tryingto executive desist set that division

00:05:05.880 --> 00:05:11.890
operator An integer division with a string is not alone So I'm gonna get another error.

00:05:11.890 --> 00:05:17.760
They select the same line and then execute You see that we got this time something car type

00:05:17.760 --> 00:05:24.740
error unsupported opening type or tapes for double stash intern str So there's an into

00:05:24.740 --> 00:05:25.640
their the next year.

00:05:25.640 --> 00:05:28.350
This operation is not supported.

00:05:28.350 --> 00:05:30.160
Let's try one more.

00:05:30.160 --> 00:05:33.230
I give zero here instead off strength.

00:05:33.230 --> 00:05:40.290
So obviously the division has no problem in terms of the data times but in python Andi,

00:05:40.290 --> 00:05:41.850
like in many other languages,

00:05:41.850 --> 00:05:43.940
division by zero is not alone.

00:05:43.940 --> 00:05:46.640
So once again if I run this chord now,

00:05:46.640 --> 00:05:50.540
didn't see that we got a zero division Better indeed.

00:05:50.540 --> 00:05:52.240
Your division are more deal.

00:05:52.240 --> 00:05:52.400
Oh,

00:05:52.400 --> 00:05:53.090
by zero.

00:05:53.090 --> 00:05:54.370
So it's not a model,

00:05:54.370 --> 00:05:55.100
it's a division.

00:05:55.100 --> 00:05:57.380
So this is the one integer division.

00:05:57.380 --> 00:06:00.440
Is the reason why we got a zero division ever again?

00:06:00.440 --> 00:06:05.770
You can see that my line 13 where I'm calling the main is the reason why it failed.

00:06:05.770 --> 00:06:08.690
But main function itself dinner cause a problem.

00:06:08.690 --> 00:06:11.650
It called a function called test that caused the problem.

00:06:11.650 --> 00:06:16.490
The test itself did not cause the problems they inside the test function Curious tickle toe

00:06:16.490 --> 00:06:16.800
end,

00:06:16.800 --> 00:06:20.000
double slash D That is the reason why you got in enter.

00:06:20.000 --> 00:06:21.890
So how do we handle this now?

00:06:21.890 --> 00:06:24.750
So we know that at none of these scenarios,

00:06:24.750 --> 00:06:30.410
end off main came end off main will be printed only if there is no exception from this

00:06:30.410 --> 00:06:31.280
particular function.

00:06:31.280 --> 00:06:32.280
For example,

00:06:32.280 --> 00:06:34.050
if I go under on this now,

00:06:34.050 --> 00:06:37.760
you will see that there is no error and I got end off me.

00:06:37.760 --> 00:06:41.440
So we want to see end off me on the times.

00:06:41.440 --> 00:06:46.040
Even if there isn't era just to ensure that the program doesn't break by itself,

00:06:46.040 --> 00:06:51.200
the way you can handle the exception is you use what's called as they try blanc.

00:06:51.200 --> 00:06:51.780
And then,

00:06:51.780 --> 00:06:52.200
of course,

00:06:52.200 --> 00:06:53.850
this has to be indented.

00:06:53.850 --> 00:06:55.810
Now we have a try block,

00:06:55.810 --> 00:06:58.150
which is try this core.

00:06:58.150 --> 00:07:00.330
And whenever there is an exception,

00:07:00.330 --> 00:07:03.600
so we say Except on then we say here,

00:07:03.600 --> 00:07:04.350
that is an error.

00:07:04.350 --> 00:07:06.410
So I will just write your appointments,

00:07:06.410 --> 00:07:12.490
It saying that hoops there's an error And we also would like to know what is the error.

00:07:12.490 --> 00:07:15.000
So we do have a no a block.

00:07:15.000 --> 00:07:17.900
The block tries to execute this court.

00:07:17.900 --> 00:07:19.640
If there is no problem,

00:07:19.640 --> 00:07:23.380
then it skips this except a block and then prints the end of the main.

00:07:23.380 --> 00:07:25.210
But if there is an error,

00:07:25.210 --> 00:07:27.400
it gets into this except block,

00:07:27.400 --> 00:07:31.380
print this message and then continue the program as if nothing happened.

00:07:31.380 --> 00:07:35.210
So let's go give it a try not This is the value inputs.

00:07:35.210 --> 00:07:37.540
So if I'm going toe run this,

00:07:37.540 --> 00:07:39.280
I'll still see the end off May.

00:07:39.280 --> 00:07:40.090
No problem.

00:07:40.090 --> 00:07:44.330
But if I say here zero instead off a valid integer.

00:07:44.330 --> 00:07:45.750
So if I give you now,

00:07:45.750 --> 00:07:47.170
you can see the little scoops.

00:07:47.170 --> 00:07:48.030
There is another.

00:07:48.030 --> 00:07:49.150
More importantly,

00:07:49.150 --> 00:07:51.420
we thought that end of many stranded,

00:07:51.420 --> 00:07:56.120
So I'm gonna go type your some around values like we note on now.

00:07:56.120 --> 00:07:57.230
If I execute this,

00:07:57.230 --> 00:07:58.600
you'll see that groups.

00:07:58.600 --> 00:07:59.500
There's another,

00:07:59.500 --> 00:08:00.800
and then I can type.

00:08:00.800 --> 00:08:02.410
You're nothing at all.

00:08:02.410 --> 00:08:03.940
There's no second perimeter.

00:08:03.940 --> 00:08:06.240
All I can even get it off this first perimeter.

00:08:06.240 --> 00:08:08.560
So nuns of zero itself is an error.

00:08:08.560 --> 00:08:09.830
So if I run this now,

00:08:09.830 --> 00:08:11.080
you see that?

00:08:11.080 --> 00:08:11.500
Oops,

00:08:11.500 --> 00:08:12.500
there is an error.

00:08:12.500 --> 00:08:13.700
But more importantly,

00:08:13.700 --> 00:08:15.230
in all circumstances,

00:08:15.230 --> 00:08:16.730
we got the end off me.

00:08:16.730 --> 00:08:21.170
So if you know what is the reason why this is breaking like,

00:08:21.170 --> 00:08:22.760
what kind of exception waas that.

00:08:22.760 --> 00:08:23.450
For example,

00:08:23.450 --> 00:08:28.910
if you're not supplying anywhere in ship bottom index era so you can see your except Index

00:08:28.910 --> 00:08:29.280
terror,

00:08:29.280 --> 00:08:30.470
Andi,

00:08:30.470 --> 00:08:35.560
then you can see here invalid or something like I can say not enough values.

00:08:35.560 --> 00:08:40.150
So I can also write another exit block for,

00:08:40.150 --> 00:08:41.180
for example,

00:08:41.180 --> 00:08:48.410
value error and then say that if there's a Erin because off a value error which happened

00:08:48.410 --> 00:08:51.410
like when I supplied be not as a second perimeter.

00:08:51.410 --> 00:08:56.200
So I can say you have trained only numbers are a load.

00:08:56.200 --> 00:08:59.010
And in case,

00:08:59.010 --> 00:09:07.350
if it was a zero division that against except zero division error and then I can save print

00:09:07.350 --> 00:09:10.450
cannot do right by zero.

00:09:10.450 --> 00:09:11.570
And now,

00:09:11.570 --> 00:09:12.000
of course,

00:09:12.000 --> 00:09:14.540
if I run the court in different cases,

00:09:14.540 --> 00:09:15.070
for example,

00:09:15.070 --> 00:09:16.300
I didn't supply value.

00:09:16.300 --> 00:09:19.220
I should get not enough values as the editor.

00:09:19.220 --> 00:09:20.700
So let's go give it a try.

00:09:20.700 --> 00:09:22.440
I can execute the core,

00:09:22.440 --> 00:09:23.420
and it is not enough.

00:09:23.420 --> 00:09:32.770
Values and supply here say 100 comma 00 because off the zero division that other raised is

00:09:32.770 --> 00:09:33.440
not an index.

00:09:33.440 --> 00:09:35.550
It also this exit block escaped.

00:09:35.550 --> 00:09:40.610
It's not a value error because it did not have any problem with the value here,

00:09:40.610 --> 00:09:42.350
So this is skipped.

00:09:42.350 --> 00:09:45.120
But zero division is the reason why it is fading.

00:09:45.120 --> 00:09:45.990
So it's your trip.

00:09:45.990 --> 00:09:46.380
Say,

00:09:46.380 --> 00:09:48.260
cannot do it by zero.

00:09:48.260 --> 00:09:49.740
So that's the adamancy I'm getting,

00:09:49.740 --> 00:09:52.480
so you can also try here with,

00:09:52.480 --> 00:09:52.940
say,

00:09:52.940 --> 00:09:54.170
some a SDF.

00:09:54.170 --> 00:09:56.590
This is supposed to be evaluator.

00:09:56.590 --> 00:09:58.230
I guess it's not evaluator.

00:09:58.230 --> 00:09:58.980
It is a type.

00:09:58.980 --> 00:10:00.920
It also that's going give it a type error.

00:10:00.920 --> 00:10:03.900
So we give typewriter.

00:10:03.900 --> 00:10:04.290
And now,

00:10:04.290 --> 00:10:04.710
of course,

00:10:04.710 --> 00:10:05.960
if I run the court,

00:10:05.960 --> 00:10:09.740
you should see that it is only numbers on a lower.

00:10:09.740 --> 00:10:13.110
So end off me is reached all the cases.

00:10:13.110 --> 00:10:15.350
Whenever there's an ever being raised,

00:10:15.350 --> 00:10:19.650
we are able to handle that based on what kind of error is that

