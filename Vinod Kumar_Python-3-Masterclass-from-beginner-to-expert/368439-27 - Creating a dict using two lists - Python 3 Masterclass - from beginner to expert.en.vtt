WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.540
in Britain,

00:00:01.540 --> 00:00:07.950
we have a class called Sip that can be used for grouping data from multiple lists.

00:00:07.950 --> 00:00:10.560
To understand this better for us,

00:00:10.560 --> 00:00:14.750
let's create a list Accord Header whose values are,

00:00:14.750 --> 00:00:15.780
for example,

00:00:15.780 --> 00:00:18.360
name email on Let's Say,

00:00:18.360 --> 00:00:27.070
City and another list core values where I'm gonna give some data here for responding keys

00:00:27.070 --> 00:00:30.040
that we gave in headers like We know,

00:00:30.040 --> 00:00:32.490
we know that we know that Cool on Bangla.

00:00:32.490 --> 00:00:36.040
Now that we have these two lifts,

00:00:36.040 --> 00:00:44.080
we can ask the Zip Object Toe group on end element off header with end element off values

00:00:44.080 --> 00:00:44.910
for example,

00:00:44.910 --> 00:00:47.400
the value at index zero off.

00:00:47.400 --> 00:00:51.060
Both of these lists can be grouped as one single people.

00:00:51.060 --> 00:00:51.920
Similarly,

00:00:51.920 --> 00:00:52.770
email onda.

00:00:52.770 --> 00:00:55.140
We know that we know Darko can be grouped together.

00:00:55.140 --> 00:00:57.710
City on Bangla can be grouped together.

00:00:57.710 --> 00:00:58.680
To do that,

00:00:58.680 --> 00:01:05.410
we simply have to call the constructor by supplying To are more lists since we have foolish

00:01:05.410 --> 00:01:11.950
certain supply headed on values and when a press ender you simply get a zip object.

00:01:11.950 --> 00:01:15.420
But if I passed this dip object to a list,

00:01:15.420 --> 00:01:18.460
then I get a list off a bunch of pupils.

00:01:18.460 --> 00:01:20.140
If a positive to addict,

00:01:20.140 --> 00:01:21.260
then we get a dictionary.

00:01:21.260 --> 00:01:22.520
Importantly,

00:01:22.520 --> 00:01:24.450
the Zip object is an terrible.

00:01:24.450 --> 00:01:30.270
So I can either it over this zip object that record and then find out what each of those

00:01:30.270 --> 00:01:32.020
data structures consist off.

00:01:32.020 --> 00:01:32.910
For example,

00:01:32.910 --> 00:01:40.580
I can say fall some loop variable called data in zip off header on values on defense,

00:01:40.580 --> 00:01:42.440
Simply print your data.

00:01:42.440 --> 00:01:48.350
It's nothing but a pupil which contain data from both off these lifts.

00:01:48.350 --> 00:01:50.340
So the 1st 1 here,

00:01:50.340 --> 00:01:57.350
that index zero off the zip object consists off elementary index it off header and element

00:01:57.350 --> 00:01:59.340
ID index zero off values,

00:01:59.340 --> 00:02:02.190
and the same thing goes for email and city as well.

00:02:02.190 --> 00:02:08.950
So if you supply this toe the list constructor like this with heather and values,

00:02:08.950 --> 00:02:11.450
you'll see that it's a list off pupils.

00:02:11.450 --> 00:02:14.640
But if you supply this to the victor constructor,

00:02:14.640 --> 00:02:19.910
you will see that you're gonna get a data structure that consists off key value pays from

00:02:19.910 --> 00:02:21.420
both headers and values.

00:02:21.420 --> 00:02:23.900
So I gave your header loose.

00:02:23.900 --> 00:02:25.260
We got name Poland.

00:02:25.260 --> 00:02:26.570
We know email colon,

00:02:26.570 --> 00:02:29.480
You know that we know Taco and City Colon Bangla

