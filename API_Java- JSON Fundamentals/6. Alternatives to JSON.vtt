WEBVTT
1
00:00:00.937 --> 00:00:04.587
So we've covered a lot of things about JSON in this course.

2
00:00:04.587 --> 00:00:07.009
But JSON isn't the only rodeo in town.

3
00:00:07.009 --> 00:00:10.469
There are other choices of serialization approach that can be more appropriate

4
00:00:10.469 --> 00:00:14.433
in some of the use cases where JSON is commonly applied.

5
00:00:14.433 --> 00:00:17.465
The big benefit that most people see in JSON is

6
00:00:17.465 --> 00:00:19.284
that it's a human readable format.

7
00:00:19.284 --> 00:00:21.157
This can aid debugging and development.

8
00:00:21.157 --> 00:00:24.209
But the problem is that JSON isn't the most

9
00:00:24.209 --> 00:00:26.174
performant approach to encoding data.

10
00:00:26.174 --> 00:00:30.385
Binary formats can use up significantly less space in terms of

11
00:00:30.385 --> 00:00:33.664
wire format and also be encoded more rapidly.

12
00:00:33.664 --> 00:00:35.319
As we saw earlier,

13
00:00:35.319 --> 00:00:38.847
schemas can help make your data interchange a more strongly type.

14
00:00:38.847 --> 00:00:41.194
And there are options in terms of JSON schemas.

15
00:00:41.194 --> 00:00:45.508
But as serialization formats have schemas out of the box that

16
00:00:45.508 --> 00:00:48.664
integrate more easily and nicely into their usage.

17
00:00:48.664 --> 00:00:53.511
Our first serialization format example is Google Protocol Buffers,

18
00:00:53.511 --> 00:00:56.061
or protobuf for short.

19
00:00:56.061 --> 00:00:59.887
Protobuf is a binary serialization mechanism.

20
00:00:59.887 --> 00:01:04.765
So, instead of you producing plain text, it produces a series of bytes.

21
00:01:04.765 --> 00:01:08.777
This allows for a more efficient encoding in certain cases.

22
00:01:08.777 --> 00:01:12.578
Less bytes on the wire and faster encoding.

23
00:01:12.578 --> 00:01:15.339
It's a language independent serialization format.

24
00:01:15.339 --> 00:01:18.654
Meaning that it can be used from different programming languages,

25
00:01:18.654 --> 00:01:22.657
and protobuf has implementations in Java,

26
00:01:22.657 --> 00:01:26.553
C++, Python, C#, Haskell, Perl, and Ruby.

27
00:01:26.553 --> 00:01:29.416
More are being added all the time.

28
00:01:29.416 --> 00:01:31.280
It's also schemed, by default,

29
00:01:31.280 --> 00:01:35.424
which reduces the scope for bugs as mentioned in the previous module.

30
00:01:35.424 --> 00:01:35.730
Now,

31
00:01:35.730 --> 00:01:40.547
the fact that JSON can be easily used directly by JavaScript in a web

32
00:01:40.547 --> 00:01:44.566
browser gives it a huge advantage over other serialization mechanisms

33
00:01:44.566 --> 00:01:46.476
for the server-to-browser use case.

34
00:01:46.476 --> 00:01:50.326
Protobuf is more useful for the server- to-server use case.

35
00:01:50.326 --> 00:01:55.429
It's an open source implementation backed by Google with plenty of

36
00:01:55.429 --> 00:01:57.709
documentation and examples available online.

37
00:01:57.709 --> 00:02:00.991
Whilst protobuf is a good general solution for improving

38
00:02:00.991 --> 00:02:03.220
the efficiency of JSON serialization,

39
00:02:03.220 --> 00:02:07.135
it's not ultimately the most high performance solution.

40
00:02:07.135 --> 00:02:11.622
The open source SBE, or simple binary encoding library,

41
00:02:11.622 --> 00:02:16.334
is the fastest gunslinger in the West when it comes to serialization.

42
00:02:16.334 --> 00:02:21.510
It achieves really great performance by focusing the API on

43
00:02:21.510 --> 00:02:26.543
encoding values in a linear sequence, a linear stride through memory.

44
00:02:26.543 --> 00:02:29.391
This increases its CPU-cache friendliness and removes the need

45
00:02:29.391 --> 00:02:32.926
to allocate a lot of intermediate objects,

46
00:02:32.926 --> 00:02:35.608
making it more GC friendly.

47
00:02:35.608 --> 00:02:42.277
It also has a strongly typed schema, like protobuf, and is language neutral.

48
00:02:42.277 --> 00:02:43.185
In practice though,

49
00:02:43.185 --> 00:02:45.910
one of the compromises when choosing SBE is it

50
00:02:45.910 --> 00:02:51.685
supports less languages than protobuf, focusing on C++,

51
00:02:51.685 --> 00:02:53.851
Java, and C#.

52
00:02:53.851 --> 00:02:57.733
It's an open source project available from GitHub and Maven Central.

53
00:02:57.733 --> 00:03:01.557
Try it if you really want the performance advantages that it

54
00:03:01.557 --> 00:03:05.258
brings and you really want top-tier performance.

55
00:03:05.258 --> 00:03:06.413
Throughout this course,

56
00:03:06.413 --> 00:03:10.187
we've used the Jackson library for serializing and deserializing JSON.

57
00:03:10.187 --> 00:03:12.702
But it's not the only library available,

58
00:03:12.702 --> 00:03:15.674
and you may encounter others in practice.

59
00:03:15.674 --> 00:03:20.549
GSON is a library open source by Google for processing JSON in Java.

60
00:03:20.549 --> 00:03:23.913
It's focused on the binding-side of the API and can be

61
00:03:23.913 --> 00:03:25.990
reliably used for this in production.

62
00:03:25.990 --> 00:03:26.722
In general,

63
00:03:26.722 --> 00:03:31.693
I think Jackson is a superior library as it tends to offer a bit more

64
00:03:31.693 --> 00:03:35.039
flexibility in terms of API and a bit more power.

65
00:03:35.039 --> 00:03:38.649
For example, Jackson offers a tree-style and a streaming API.

66
00:03:38.649 --> 00:03:42.040
I think Jackson is more commonly used in general as well,

67
00:03:42.040 --> 00:03:44.909
but if you do end up on a project that uses GSON,

68
00:03:44.909 --> 00:03:47.384
then the knowledge from this course on the binding API

69
00:03:47.384 --> 00:03:49.338
side of things can come in handy.

70
00:03:49.338 --> 00:03:53.449
Now if you happen to have really small requirements in terms of binary size,

71
00:03:53.449 --> 00:03:56.014
you might want to take a look at JSON Simple.

72
00:03:56.014 --> 00:04:00.056
It is a simpler library than Jackson with a lot less features.

73
00:04:00.056 --> 00:04:02.179
It's not as actively developed as Jackson these days,

74
00:04:02.179 --> 00:04:05.254
but it does support producing and consuming JSON fine

75
00:04:05.254 --> 00:04:08.015
and takes up a really small size.

76
00:04:08.015 --> 00:04:15.246
Finally, there is a standard for JSON processing called JSONP, JSR 353.

77
00:04:15.246 --> 00:04:19.654
It was maintained by the Java EE committee and is now

78
00:04:19.654 --> 00:04:22.339
maintained by the Jakarta EE Foundation.

79
00:04:22.339 --> 00:04:32.000
It's not as commonly used as Jackson, but it is likely to gain better adoption over time as it's a standard.

