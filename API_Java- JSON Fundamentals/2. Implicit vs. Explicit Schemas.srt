1
00:00:01,828 --> 00:00:05,924
The first aspect of JSON information architecture that we'll take a look at

2
00:00:05,924 --> 00:00:08,926
is the distinction between implicit and explicit schemas,

3
00:00:08,926 --> 00:00:14,305
and specifically, why you may want to use an explicit schema.

4
00:00:14,305 --> 00:00:17,090
Before we go on to clarify the distinction,

5
00:00:17,090 --> 00:00:21,518
let's ask ourselves what actually do we mean by schema?

6
00:00:21,518 --> 00:00:24,898
A schema is a definition of the structure and content of the JSON

7
00:00:24,898 --> 00:00:27,438
documents that you're producing and consuming.

8
00:00:27,438 --> 00:00:31,800
So every JSON document that's produced has some kid of schema.

9
00:00:31,800 --> 00:00:36,078
It has a structure which the code that produces and consumes it relies on.

10
00:00:36,078 --> 00:00:38,710
Schemas can come into a variety of different forms,

11
00:00:38,710 --> 00:00:42,931
but broadly we can think about them as being part of two categories,

12
00:00:42,931 --> 00:00:44,905
implicit and explicit.

13
00:00:44,905 --> 00:00:49,959
So implicit schemas arise in situations where the

14
00:00:49,959 --> 00:00:53,106
producer and consumer of the JSON document.

15
00:00:53,106 --> 00:00:56,139
They just make assumptions about the structure of the message involved.

16
00:00:56,139 --> 00:00:57,162
So for example,

17
00:00:57,162 --> 00:01:01,422
you may have a Java backend with a binding API that consumes

18
00:01:01,422 --> 00:01:04,968
JSON messages and produces a Java class.

19
00:01:04,968 --> 00:01:05,926
On the frontend,

20
00:01:05,926 --> 00:01:09,666
you may have a Java script single-page application that creates ad

21
00:01:09,666 --> 00:01:13,219
hoc objects that it posts to your Java backend.

22
00:01:13,219 --> 00:01:16,320
Whenever a change to the schema of the document is made,

23
00:01:16,320 --> 00:01:20,056
the developers need to update their respective code bases.

24
00:01:20,056 --> 00:01:25,522
An explicit schema documents the schema in the abstract.

25
00:01:25,522 --> 00:01:28,727
So that's to say it defines what the protocol is

26
00:01:28,727 --> 00:01:30,329
outside of the implementing code.

27
00:01:30,329 --> 00:01:33,027
That doesn't mean it has to be a text document that

28
00:01:33,027 --> 00:01:36,630
bit rots or some heavy weight UML, if you've ever used that.

29
00:01:36,630 --> 00:01:40,871
Explicit schemas when done right can still be a part of the code

30
00:01:40,871 --> 00:01:44,034
base and integrated into the development cycle.

31
00:01:44,034 --> 00:01:45,011
For example,

32
00:01:45,011 --> 00:01:49,995
some schemas inforce systems that allow you to generate the POJOs

33
00:01:49,995 --> 00:01:52,649
in Java that you bind to your classes with,

34
00:01:52,649 --> 00:01:56,009
which reduces the amount of work and allows you to

35
00:01:56,009 --> 00:01:58,131
update the schema in one place.

36
00:01:58,131 --> 00:02:01,557
Implicit schemas are commonly used in software development,

37
00:02:01,557 --> 00:02:04,535
but suffer from a number of downsides.

38
00:02:04,535 --> 00:02:06,663
Firstly, they exhibit poor readability.

39
00:02:06,663 --> 00:02:10,108
So if you want to understand what information is being sent between services,

40
00:02:10,108 --> 00:02:13,808
looking at two different sets of code is a slow and

41
00:02:13,808 --> 00:02:16,402
error prone way to grok what's going on.

42
00:02:16,402 --> 00:02:21,980
There's no overview or easy summary that can help developers understand things.

43
00:02:21,980 --> 00:02:25,554
Secondly, there's an unassigned responsibility here.

44
00:02:25,554 --> 00:02:30,075
If a discrepancy occurs in the JSON between the producer and the consumer,

45
00:02:30,075 --> 00:02:31,835
who's responsibility is it?

46
00:02:31,835 --> 00:02:36,447
Is it the responsibility of the producing code or the consuming code?

47
00:02:36,447 --> 00:02:40,000
The problem becomes even worse if it's a separate team who

48
00:02:40,000 --> 00:02:42,593
maintain the producer and the consumer, for example,

49
00:02:42,593 --> 00:02:45,877
a front-end JavaScript team and a back-end Java team.

50
00:02:45,877 --> 00:02:49,702
This can result in finger pointing and undesirable

51
00:02:49,702 --> 00:02:52,686
anti-social interactions between those two teams.

52
00:02:52,686 --> 00:02:55,191
Finally, it's harder to maintain.

53
00:02:55,191 --> 00:02:57,223
Every time you need to make a change,

54
00:02:57,223 --> 00:03:00,379
you need to replicate the changes in two places and ensure

55
00:03:00,379 --> 00:03:02,265
that they're compatible with each other,

56
00:03:02,265 --> 00:03:04,970
that they need to work together correctly.

57
00:03:04,970 --> 00:03:08,314
This is especially hard when you don't know whose

58
00:03:08,314 --> 00:03:12,042
interpretation of the JSON is correct, producer or consumer.

59
00:03:12,042 --> 00:03:17,043
Explicit schemas document the JSON API that's being used.

60
00:03:17,043 --> 00:03:19,835
This can be as simple as having a text document or a

61
00:03:19,835 --> 00:03:21,335
wiki page that describes the schema.

62
00:03:21,335 --> 00:03:24,371
But a better solution is to use one of the software

63
00:03:24,371 --> 00:03:25,816
tools for processing schemas.

64
00:03:25,816 --> 00:03:29,071
That's because they do things like generate code

65
00:03:29,071 --> 00:03:33,421
and documentation of your system, improving your developer productivity.

66
00:03:33,421 --> 00:03:37,032
One increasingly adopted standard tool these days is JSON Schema.

67
00:03:37,032 --> 00:03:41,369
That's the standard for describing JSON schemas that is language agnostic.

68
00:03:41,369 --> 00:03:43,528
Unfortunately, the Java tooling support for JSON Schema,

69
00:03:43,528 --> 00:03:46,307
at the time of recording, is less than ideal,

70
00:03:46,307 --> 00:03:48,933
but I hope that it improves over time.

71
00:03:48,933 --> 00:03:51,925
This is why it's also worth looking at Swagger.

72
00:03:51,925 --> 00:03:55,638
Swagger is a more mature system for describing schemas and

73
00:03:55,638 --> 00:03:58,274
generating APIs and documentation for them.

74
00:03:58,274 --> 00:04:07,000
It can really save time, help develop a velocity, and reduce the amount of errors that creep into your production system.

