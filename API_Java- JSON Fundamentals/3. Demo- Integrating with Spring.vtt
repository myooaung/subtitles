WEBVTT
1
00:00:00.937 --> 00:00:04.401
Okay, we've seen the basics of JSON annotations with Spring,

2
00:00:04.401 --> 00:00:08.671
but let's look at a more concrete demo example.

3
00:00:08.671 --> 00:00:12.523
We'll be implementing the bank loan application processing

4
00:00:12.523 --> 00:00:15.186
system that we've seen in previous modules,

5
00:00:15.186 --> 00:00:16.277
but this time,

6
00:00:16.277 --> 00:00:21.060
we'll be using Spring Boot to get going and we'll be using annotations

7
00:00:21.060 --> 00:00:25.414
that apply in both the Spring Boot and Spring web case.

8
00:00:25.414 --> 00:00:30.544
The best way to start a simple Spring project is using the Spring

9
00:00:30.544 --> 00:00:34.702
Initializer application that will let you just generate a Maven,

10
00:00:34.702 --> 00:00:35.878
or for example,

11
00:00:35.878 --> 00:00:40.513
a Gradle Project using Spring Boot and you can add in different

12
00:00:40.513 --> 00:00:43.729
dependencies and things you need in the project as well.

13
00:00:43.729 --> 00:00:46.258
So that's a really useful and quick way to get started.

14
00:00:46.258 --> 00:00:51.652
I've already done that and imported that project into IntelliJ IDE.

15
00:00:51.652 --> 00:00:52.530
Once you've done that,

16
00:00:52.530 --> 00:00:54.910
you'll see that Spring Boot gives you this Application

17
00:00:54.910 --> 00:00:59.267
class that lets you run your application.

18
00:00:59.267 --> 00:01:03.809
So it just delegates to a utility method in the Spring framework.

19
00:01:03.809 --> 00:01:05.344
And that's what it'll generate for you.

20
00:01:05.344 --> 00:01:07.160
It'll also generate your little application.

21
00:01:07.160 --> 00:01:09.976
properties file with some configuration in.

22
00:01:09.976 --> 00:01:13.619
For example, the port on which your application will run.

23
00:01:13.619 --> 00:01:17.730
And they're also, what I've done for this project is add in our POJOs,

24
00:01:17.730 --> 00:01:20.884
which we're going to use for the JSON binding.

25
00:01:20.884 --> 00:01:23.876
Now in order to start with Spring from a web point of view,

26
00:01:23.876 --> 00:01:27.691
we need to write a little controller,

27
00:01:27.691 --> 00:01:33.941
so I'm going to call this a BankApplicationController.

28
00:01:33.941 --> 00:01:39.058
And I'm going to add the @RestController annotation that will tell Spring hey,

29
00:01:39.058 --> 00:01:41.051
bind stuff on to this class.

30
00:01:41.051 --> 00:01:44.580
Map the methods in this class to public web APIs.

31
00:01:44.580 --> 00:01:50.587
So the next step is for me to create a method that will be

32
00:01:50.587 --> 00:01:54.556
invoked when the web application gets called.

33
00:01:54.556 --> 00:01:55.765
So for example,

34
00:01:55.765 --> 00:02:01.437
what I'm going to do here is I'm going to have a method that

35
00:02:01.437 --> 00:02:06.135
returns the Spring ReponseEntity class, so that's a return value for the method.

36
00:02:06.135 --> 00:02:10.057
And the payload is just going to be a string because we're going to

37
00:02:10.057 --> 00:02:13.244
just say approved or denied in our implementation.

38
00:02:13.244 --> 00:02:15.003
That's going to be a loanApplication.

39
00:02:15.003 --> 00:02:18.299
What I'm just going to do is return null initially because

40
00:02:18.299 --> 00:02:20.787
we'll come back to that a bit later.

41
00:02:20.787 --> 00:02:26.805
I also need to add an annotation onto this method called @RequestMapping.

42
00:02:26.805 --> 00:02:31.515
My @RequestMapping annotation needs to tell Spring where to expose this method.

43
00:02:31.515 --> 00:02:32.761
So that's what the value is.

44
00:02:32.761 --> 00:02:35.857
And I'm just going to say bind it to the root URL slash,

45
00:02:35.857 --> 00:02:39.593
and I also need to tell it what method to use.

46
00:02:39.593 --> 00:02:40.941
It will default to GET.

47
00:02:40.941 --> 00:02:44.110
So if you're just using GET methods, you don't need to do anything.

48
00:02:44.110 --> 00:02:47.421
But I'm going to use a POST method here to receive my values.

49
00:02:47.421 --> 00:02:49.665
Then, we need to add some parameters.

50
00:02:49.665 --> 00:02:53.462
So these are the values that we'll receive from the POST request.

51
00:02:53.462 --> 00:03:01.080
So I need to add the body, so this is a @RequestBody annotation.

52
00:03:01.080 --> 00:03:04.209
And I'm just going to put that Java POJO in now.

53
00:03:04.209 --> 00:03:08.427
Spring, because it's really smart will know hey,

54
00:03:08.427 --> 00:03:13.996
just bind that loanApplication to a JSON request that comes in.

55
00:03:13.996 --> 00:03:16.693
And it will do that binding for us automatically.

56
00:03:16.693 --> 00:03:18.271
So in order to implement the business logic,

57
00:03:18.271 --> 00:03:22.291
I need to take that loanApplication, get the Jobs,

58
00:03:22.291 --> 00:03:28.212
stream them, map them ToDouble on the annualIncome,

59
00:03:28.212 --> 00:03:31.271
and then sum them up.

60
00:03:31.271 --> 00:03:33.719
And that's my totalIncome.

61
00:03:33.719 --> 00:03:36.810
You've seen this a number of times before.

62
00:03:36.810 --> 00:03:39.536
Now I also need to take that loanApplication.

63
00:03:39.536 --> 00:03:41.762
getLoanDetails and get the amount to borrow.

64
00:03:41.762 --> 00:03:43.617
So those are my two values.

65
00:03:43.617 --> 00:03:47.245
And the approval denial logic that we've been using so far is if you

66
00:03:47.245 --> 00:03:50.550
know the amount that people want to borrow is less than or equal to

67
00:03:50.550 --> 00:03:58.402
three times the totalIncome return, I want to return approved in this case,

68
00:03:58.402 --> 00:03:59.322
basically.

69
00:03:59.322 --> 00:04:04.840
And, I want to return denied.

70
00:04:04.840 --> 00:04:07.579
Now, you'll see at this point you get some compile errors that say hey,

71
00:04:07.579 --> 00:04:10.592
we want you to give me a ResponseEntity of string,

72
00:04:10.592 --> 00:04:12.550
and you've just given me a string.

73
00:04:12.550 --> 00:04:16.020
So, what I need to do is tell Spring hey, this is okay.

74
00:04:16.020 --> 00:04:16.759
This is good.

75
00:04:16.759 --> 00:04:17.991
This is not so good.

76
00:04:17.991 --> 00:04:20.457
So I'm going to just use the ResponseEntity's

77
00:04:20.457 --> 00:04:22.152
factory method to say ResponseEntity.

78
00:04:22.152 --> 00:04:28.780
ok so that will return me a response, an HTTP response for the status code of OK.

79
00:04:28.780 --> 00:04:31.353
I'm going to do a slightly different one for denied.

80
00:04:31.353 --> 00:04:33.797
I'm going to forbid them, just like the other things.

81
00:04:33.797 --> 00:04:36.922
So, take the status HttpStatus.

82
00:04:36.922 --> 00:04:41.826
FORBIDDEN, parse in the body of the response,

83
00:04:41.826 --> 00:04:46.589
which is the string denied, and there we go.

84
00:04:46.589 --> 00:04:47.084
Lovely jubbly!

85
00:04:47.084 --> 00:04:50.055
What I need to do is go back to my application because

86
00:04:50.055 --> 00:04:52.300
this is the main method of my program.

87
00:04:52.300 --> 00:04:53.984
If I just run that application,

88
00:04:53.984 --> 00:05:00.671
Spring will scan the class path and it will find that annotated class

89
00:05:00.671 --> 00:05:05.445
that I've done and it will expose it on port 8000.

90
00:05:05.445 --> 00:05:09.946
So if I go around to my scripts here,

91
00:05:09.946 --> 00:05:15.116
run the post-bank-loan script with my good old bank_loan.

92
00:05:15.116 --> 00:05:18.286
json document, it is approved.

93
00:05:18.286 --> 00:05:23.365
And if I do the same thing with the bad_loan.

94
00:05:23.365 --> 00:05:25.904
json document, it is denied.

95
00:05:25.904 --> 00:05:28.618
So, we can see that works very, very nicely.

96
00:05:28.618 --> 00:05:34.618
And the key was that Spring did most of the work for us.

97
00:05:34.618 --> 00:05:38.105
We just put a little annotation there saying this is the

98
00:05:38.105 --> 00:05:45.000
RequestBody and Spring did all the JSON binding for us. Lovely and simple.

