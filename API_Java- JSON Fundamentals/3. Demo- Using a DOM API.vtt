WEBVTT
1
00:00:01.769 --> 00:00:04.797
Okay, enough concepts, definitions, and theory.

2
00:00:04.797 --> 00:00:08.942
It's time to walk through a couple of demos using the Jackson API

3
00:00:08.942 --> 00:00:12.642
that we've been using so far in this course.

4
00:00:12.642 --> 00:00:16.450
The first demo that you'll see walks through the basic

5
00:00:16.450 --> 00:00:18.964
API usage of the DOM or tree-style API.

6
00:00:18.964 --> 00:00:22.543
We're going to take the same bank loan document that we saw earlier,

7
00:00:22.543 --> 00:00:24.285
we're going to parse it into JSON,

8
00:00:24.285 --> 00:00:26.545
and we're going to inspect the object graph that we get

9
00:00:26.545 --> 00:00:28.594
returned to us and pretty print it back out.

10
00:00:28.594 --> 00:00:32.883
Then we'll see what happens if we feed an invalid JSON document into the system.

11
00:00:32.883 --> 00:00:38.296
And finally, we'll write a generic validator for JSON documents.

12
00:00:38.296 --> 00:00:38.579
Oaky,

13
00:00:38.579 --> 00:00:41.689
so let's start this demo the exact same way we started

14
00:00:41.689 --> 00:00:45.875
the previous section on emitting JSON documents by

15
00:00:45.875 --> 00:00:48.105
creating ourselves an ObjectMapper.

16
00:00:48.105 --> 00:00:53.542
So this is a good introductory entry point into the

17
00:00:53.542 --> 00:00:56.805
JSON API to create the ObjectMapper.

18
00:00:56.805 --> 00:00:57.129
Now,

19
00:00:57.129 --> 00:01:01.021
in order to read a file or parse a file and create

20
00:01:01.021 --> 00:01:03.788
the DOM API via the tree-style API,

21
00:01:03.788 --> 00:01:08.722
we want to use a method on this ObjectMapper called readTree.

22
00:01:08.722 --> 00:01:13.133
Now we can see that readTree comes in a variety of different forms.

23
00:01:13.133 --> 00:01:14.886
We can take a file as an input,

24
00:01:14.886 --> 00:01:17.613
which is useful just for reading files off the local file system.

25
00:01:17.613 --> 00:01:20.016
We've got things like readers and inputStreams that let

26
00:01:20.016 --> 00:01:21.955
us consume content off the network.

27
00:01:21.955 --> 00:01:24.397
If it's already been read into a string or a byte array,

28
00:01:24.397 --> 00:01:26.370
we can take those as input sources.

29
00:01:26.370 --> 00:01:29.851
So I'm actually going to use the tree version here

30
00:01:29.851 --> 00:01:31.933
and read in the BANK_LOAN_FILE.

31
00:01:31.933 --> 00:01:36.034
So our BANK_LOAN_FILE is a file that looks exactly the

32
00:01:36.034 --> 00:01:38.438
same as the previous section's demo.

33
00:01:38.438 --> 00:01:40.274
So it's Mrs Joan Smith.

34
00:01:40.274 --> 00:01:47.917
We read the tree object in from this file, and that gives us a JsonNode object.

35
00:01:47.917 --> 00:01:53.174
So a JsonNode object is a way of representing a

36
00:01:53.174 --> 00:01:56.329
single node within the file hierarchy.

37
00:01:56.329 --> 00:01:57.407
And to begin with,

38
00:01:57.407 --> 00:02:01.118
what I'm just going to do is print this JsonNode back out again.

39
00:02:01.118 --> 00:02:03.151
So that's the first step here.

40
00:02:03.151 --> 00:02:05.940
And we can see it's not pretty printed.

41
00:02:05.940 --> 00:02:09.640
And it's just parsed it and plopped it back out again as JSON.

42
00:02:09.640 --> 00:02:13.467
Just like before, if we want to pretty print those things,

43
00:02:13.467 --> 00:02:16.944
we can grab ourselves an objectWriterWithDefaultPrettyPrinter,

44
00:02:16.944 --> 00:02:22.306
and then we can print out the objectWriter,

45
00:02:22.306 --> 00:02:24.053
and then go writeValue.

46
00:02:24.053 --> 00:02:26.465
There are lots of output sources,

47
00:02:26.465 --> 00:02:28.747
but we're just going to create a string here to

48
00:02:28.747 --> 00:02:30.925
print it out on the command line.

49
00:02:30.925 --> 00:02:31.298
Okay.

50
00:02:31.298 --> 00:02:33.912
And then we get the same stuff,

51
00:02:33.912 --> 00:02:37.086
but pretty printed with nice formatting so we can read it.

52
00:02:37.086 --> 00:02:37.355
Lovely!

53
00:02:37.355 --> 00:02:41.774
The other thing I want to show to you is what happens if we have an

54
00:02:41.774 --> 00:02:45.400
error within the format of the document because sometimes you'll have

55
00:02:45.400 --> 00:02:48.254
inputs to your system that aren't valid JSON.

56
00:02:48.254 --> 00:02:53.078
So I've just removed that quote there so it's not a valid JSON document.

57
00:02:53.078 --> 00:02:58.694
And if we try and rerun this same code, we can see we get a JsonParseException,

58
00:02:58.694 --> 00:03:03.438
which tells us that we've got a problem with our invalid documents.

59
00:03:03.438 --> 00:03:05.794
So this is really, really important to be aware of,

60
00:03:05.794 --> 00:03:07.100
that you get these JsonParseExceptions,

61
00:03:07.100 --> 00:03:10.924
and it's really important to recognize that that's why we

62
00:03:10.924 --> 00:03:14.117
have them because it's an invalid document.

63
00:03:14.117 --> 00:03:16.996
So if I fix that double quotes in the file,

64
00:03:16.996 --> 00:03:19.012
I will also fix that parse exception.

65
00:03:19.012 --> 00:03:23.233
So our next step is to remove these two values.

66
00:03:23.233 --> 00:03:26.294
And what we really want to do is inspect the JsonNode and

67
00:03:26.294 --> 00:03:29.136
have a look at its children because it's really

68
00:03:29.136 --> 00:03:30.867
representing a tree of information.

69
00:03:30.867 --> 00:03:33.489
So if we just explore what we have from our pretty printed version,

70
00:03:33.489 --> 00:03:40.081
that top level object is representing the whole JSON document that we have here.

71
00:03:40.081 --> 00:03:43.197
And then within that, we'll have a bunch of children.

72
00:03:43.197 --> 00:03:44.386
So, for example,

73
00:03:44.386 --> 00:03:47.860
there'll be an element within that JsonNode that represents

74
00:03:47.860 --> 00:03:50.576
the key value pair name and Mrs Joan Smith.

75
00:03:50.576 --> 00:03:52.075
And this will be a textual element.

76
00:03:52.075 --> 00:03:54.895
And then there'll be other elements, for example,

77
00:03:54.895 --> 00:03:57.226
loanDetails to another JsonNode.

78
00:03:57.226 --> 00:03:58.164
And within that,

79
00:03:58.164 --> 00:04:01.693
from say a startDate to another textual element or from an amount to a number.

80
00:04:01.693 --> 00:04:03.650
So there are a bunch of different objects within there.

81
00:04:03.650 --> 00:04:07.054
So what I'm going to do is just iterate over it.

82
00:04:07.054 --> 00:04:09.607
So the first thing I'm going to do is create a little

83
00:04:09.607 --> 00:04:11.735
method here called explore with a jsonNode.

84
00:04:11.735 --> 00:04:14.801
I'm just going to create a little method there.

85
00:04:14.801 --> 00:04:16.728
So in order to explore the jsonNode,

86
00:04:16.728 --> 00:04:20.007
we could just get an iterator of all the elements out there.

87
00:04:20.007 --> 00:04:22.170
We can get an iterator for the fields.

88
00:04:22.170 --> 00:04:24.445
So I'm going to get an iterator out for the fields.

89
00:04:24.445 --> 00:04:29.599
And then have a little loop here that says while fields.

90
00:04:29.599 --> 00:04:30.068
hasNext.

91
00:04:30.068 --> 00:04:33.481
And then get each field out in turn.

92
00:04:33.481 --> 00:04:35.614
So that's using a Map.

93
00:04:35.614 --> 00:04:40.256
Entry object where the key is the fieldName.

94
00:04:40.256 --> 00:04:45.853
And the value is the value within that key value pair in the JSON object.

95
00:04:45.853 --> 00:04:47.411
It's a bit like a map.

96
00:04:47.411 --> 00:04:48.970
Now, when we have that value,

97
00:04:48.970 --> 00:04:53.517
what I'm going to do here is I'm going to just print out the fieldName,

98
00:04:53.517 --> 00:04:57.416
and I'm also going to say explore the value itself.

99
00:04:57.416 --> 00:04:59.951
So if we go through this,

100
00:04:59.951 --> 00:05:04.945
we should see all the field names of everything within that tree printed out,

101
00:05:04.945 --> 00:05:07.391
name, purpoesOfLoan, loanDetails, amount,

102
00:05:07.391 --> 00:05:08.621
startDate, endDate, jobs,

103
00:05:08.621 --> 00:05:12.635
and jobs is an array so it doesn't have the fields within it.

104
00:05:12.635 --> 00:05:16.148
What we want to do here is iterate over these different values,

105
00:05:16.148 --> 00:05:18.504
and we want to do some validations.

106
00:05:18.504 --> 00:05:22.661
So I'm going to rename this explore method to be validateDates.

107
00:05:22.661 --> 00:05:25.654
So what is validateDates going to do?

108
00:05:25.654 --> 00:05:29.439
Well, it's going to take that --- I'll rename that to childNode.

109
00:05:29.439 --> 00:05:33.006
I'm going to say if the childNode.

110
00:05:33.006 --> 00:05:38.002
isTextual and if the childNodes --- and if the name.

111
00:05:38.002 --> 00:05:42.364
endsWith Date, then it must be a date field.

112
00:05:42.364 --> 00:05:48.969
So I'm going to print out Found date field + fieldName.

113
00:05:48.969 --> 00:05:53.027
Then what we want to do is take the childNode and get

114
00:05:53.027 --> 00:05:55.267
its value out as just a string.

115
00:05:55.267 --> 00:05:56.494
So we call the.

116
00:05:56.494 --> 00:05:59.944
asText method on that, and that gets us the fieldValue.

117
00:05:59.944 --> 00:06:01.056
Now if called.

118
00:06:01.056 --> 00:06:04.678
asText on some other type of node, we might still get a string back,

119
00:06:04.678 --> 00:06:06.427
but we wouldn't get the exact string value,

120
00:06:06.427 --> 00:06:11.027
so that's why I checked whether it was a textual node for it to be a date.

121
00:06:11.027 --> 00:06:11.351
Then,

122
00:06:11.351 --> 00:06:15.880
we're going to use the DateTimeFormatter from Java 8 and check

123
00:06:15.880 --> 00:06:18.790
that it matches the ISO_LOCAL_DATE format.

124
00:06:18.790 --> 00:06:21.318
So I'm going to do a quick parse on that fieldValue.

125
00:06:21.318 --> 00:06:24.617
So what this will do, what this method will do is it will throw an exception,

126
00:06:24.617 --> 00:06:28.726
which I'm going to catch with a try-catch block and that exception will

127
00:06:28.726 --> 00:06:33.485
be a DateTimeException if it's not properly formatted.

128
00:06:33.485 --> 00:06:38.376
And so I'm going to say Invalid value + fieldValue.

129
00:06:38.376 --> 00:06:40.560
So that's the first part of our code.

130
00:06:40.560 --> 00:06:45.502
The second part of our code is we need to be able to loop over these fields.

131
00:06:45.502 --> 00:06:49.059
So we need to have a recursive decent of the child just

132
00:06:49.059 --> 00:06:51.193
like we had with the explore method.

133
00:06:51.193 --> 00:06:54.618
So I'm going to say validate the dates on that childNode.

134
00:06:54.618 --> 00:06:57.369
So that will say look, if it's a date node,

135
00:06:57.369 --> 00:07:00.728
it's textual and its name ends in date, we will inspect it.

136
00:07:00.728 --> 00:07:04.091
If not, we'll just recurse down and inspect its children with the same method.

137
00:07:04.091 --> 00:07:07.228
And this will show us that we found a bunch of date fields,

138
00:07:07.228 --> 00:07:08.625
the startDate and endDate field.

139
00:07:08.625 --> 00:07:11.163
Now if we look inside this bank loans document,

140
00:07:11.163 --> 00:07:14.848
we can see startDate and endDate weren't children at the top level object.

141
00:07:14.848 --> 00:07:16.745
They were children of the loanDetails object.

142
00:07:16.745 --> 00:07:19.715
So that's why we were recursing down to go into it.

143
00:07:19.715 --> 00:07:22.203
And just to show that our validation works,

144
00:07:22.203 --> 00:07:27.401
let's just mess up the formatting a little bit of startDate and rerun that code,

145
00:07:27.401 --> 00:07:29.223
and we say invalid value.

146
00:07:29.223 --> 00:07:29.604
Brilliant!

147
00:07:29.604 --> 00:07:31.512
So we found the value,

148
00:07:31.512 --> 00:07:35.566
and there's a little example of how to use the

149
00:07:35.566 --> 00:07:38.656
DOM-style API to iterate over generic code.

150
00:07:38.656 --> 00:07:42.913
So this makes no assumptions about the structure of the document other than

151
00:07:42.913 --> 00:07:47.685
that every field that ends with the string date is a date and just does that

152
00:07:47.685 --> 00:07:50.331
to validate or inspect every date in the document.

153
00:07:50.331 --> 00:07:50.748
So,

154
00:07:50.748 --> 00:08:01.000
a good way of dealing with generically processing arbitrary different types of JSON print files using the DOM API.

