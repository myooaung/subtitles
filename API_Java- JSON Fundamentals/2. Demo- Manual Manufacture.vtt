WEBVTT
1
00:00:02.049 --> 00:00:07.190
Let's talk about the first approach, handwriting your JSON serialization code,

2
00:00:07.190 --> 00:00:13.249
or manual manufacture, to add some alliteration to this anti-pattern.

3
00:00:13.249 --> 00:00:16.402
The best way to explain how to do this and for you to

4
00:00:16.402 --> 00:00:21.909
see the problems with the manual, plain Java JSON approach is to demo it to you.

5
00:00:21.909 --> 00:00:26.777
So I'm going to write some code that is going to use string

6
00:00:26.777 --> 00:00:29.054
concatenation in order to produce JSON.

7
00:00:29.054 --> 00:00:32.190
In order to keep the demos simple and consistent,

8
00:00:32.190 --> 00:00:34.821
they will all produce the same loan application document

9
00:00:34.821 --> 00:00:37.540
that we wrote by hand in module 1.

10
00:00:37.540 --> 00:00:41.891
And remember, this is a demo of an anti-pattern for producing JSON.

11
00:00:41.891 --> 00:00:46.420
I'm known to be doing things wrong, a lot.

12
00:00:46.420 --> 00:00:49.820
So let's demo the first approach to producing JSON.

13
00:00:49.820 --> 00:00:52.428
This is the manual manufacture approach.

14
00:00:52.428 --> 00:00:57.172
What we've got here is a simple bit of code where we have

15
00:00:57.172 --> 00:00:58.699
an example loan application document.

16
00:00:58.699 --> 00:01:02.091
So these are the same details as we saw in module 1.

17
00:01:02.091 --> 00:01:04.909
Our loan application is by Mrs Joan Smith.

18
00:01:04.909 --> 00:01:08.275
It's to build an extension to a house.

19
00:01:08.275 --> 00:01:10.378
She's looking for 10000 pounds.

20
00:01:10.378 --> 00:01:12.268
And, it's for a 5 year loan.

21
00:01:12.268 --> 00:01:15.188
And she's got a few different jobs going on at the

22
00:01:15.188 --> 00:01:16.711
same time or sources of income.

23
00:01:16.711 --> 00:01:19.763
Now, in order to produce that with our string formats,

24
00:01:19.763 --> 00:01:23.008
I've got this toJsonString method here that we're going to implement in

25
00:01:23.008 --> 00:01:27.421
order to convert that loanApplication into a JSON string.

26
00:01:27.421 --> 00:01:34.339
So, the first thing we want to do is use the Java string formatter.

27
00:01:34.339 --> 00:01:36.981
And we want to bring in a format string.

28
00:01:36.981 --> 00:01:40.013
So I'm going to just copy and paste these strings because otherwise

29
00:01:40.013 --> 00:01:45.111
we're going to be here all day writing this out by hand.

30
00:01:45.111 --> 00:01:47.024
There we go.

31
00:01:47.024 --> 00:01:50.434
And so that's a format string that contains the name,

32
00:01:50.434 --> 00:01:52.843
the purposeOfLoan, the loanDetails, and the jobs.

33
00:01:52.843 --> 00:01:57.102
And what we're going to do here is pass in specific values that correspond to

34
00:01:57.102 --> 00:02:00.288
the fields that we're going to use in our format string.

35
00:02:00.288 --> 00:02:02.736
So loanApplication.

36
00:02:02.736 --> 00:02:05.183
getName, loanApplication.

37
00:02:05.183 --> 00:02:19.306
getPurposeOfLoan, and then the loanDetails, and then finally, the Jobs.

38
00:02:19.306 --> 00:02:23.797
Now the latter two fields here are things that I also need to

39
00:02:23.797 --> 00:02:27.452
convert to JSON values themselves because the loanDetails object

40
00:02:27.452 --> 00:02:32.203
is going to be a subfield as well.

41
00:02:32.203 --> 00:02:32.904
So,

42
00:02:32.904 --> 00:02:38.119
let's create another method here called toJsonString

43
00:02:38.119 --> 00:02:43.136
that takes the loanDetails object.

44
00:02:43.136 --> 00:02:50.610
And for that, I'm again going to use string formatting.

45
00:02:50.610 --> 00:02:56.663
So I'm going to format the amount, the startDate, the endDate, blah, blah, blah.

46
00:02:56.663 --> 00:03:04.522
And, here we need to take the amount, then the startDate,

47
00:03:04.522 --> 00:03:06.608
and finally the endDate.

48
00:03:06.608 --> 00:03:07.650
Lovely stuff.

49
00:03:07.650 --> 00:03:14.647
And what we're going to see is these %s' and %g's in the format strings are

50
00:03:14.647 --> 00:03:19.293
going to have the values parsed in from these parameters here.

51
00:03:19.293 --> 00:03:30.240
So, the final bit is getting the jobs right.

52
00:03:30.240 --> 00:03:35.894
So let's create another method here, the jobs,

53
00:03:35.894 --> 00:03:39.923
now there's a multiple of them with the jobs.

54
00:03:39.923 --> 00:03:43.008
So with the jobs, I need to combine them together into an array.

55
00:03:43.008 --> 00:03:48.539
So I'm going to take those jobs, I'm going to use the Java 8 streams API.

56
00:03:48.539 --> 00:03:54.961
So that is going to say --- I'm just going to do that to begin with,

57
00:03:54.961 --> 00:03:59.567
and then at the end I need to combine these different job strings.

58
00:03:59.567 --> 00:04:05.357
So I'm going to use the joining collector here.

59
00:04:05.357 --> 00:04:06.777
I need to statically import.

60
00:04:06.777 --> 00:04:08.482
Now this takes a few arguments.

61
00:04:08.482 --> 00:04:12.418
The first one is going to be the new line character and a comma

62
00:04:12.418 --> 00:04:14.529
to separate out the different jobs value.

63
00:04:14.529 --> 00:04:17.759
The next one is going to be a square bracket,

64
00:04:17.759 --> 00:04:21.320
for the beginning of the array, that's the prefix.

65
00:04:21.320 --> 00:04:25.101
And finally, it's the suffix, which is just going to be a new line character,

66
00:04:25.101 --> 00:04:29.568
a couple of spaces, and another square bracket at the end.

67
00:04:29.568 --> 00:04:33.551
Now, let's try and implement this one by hand.

68
00:04:33.551 --> 00:04:36.011
Now I've kind of skipped over it for both of the other two.

69
00:04:36.011 --> 00:04:37.457
I'll just paste in the format strings,

70
00:04:37.457 --> 00:04:40.590
but for this one I'm going to do it by hand just to show

71
00:04:40.590 --> 00:04:42.278
you how fiddley this whole process is.

72
00:04:42.278 --> 00:04:46.140
So I've got to get the right number of spaces here.

73
00:04:46.140 --> 00:04:48.876
And then I'm going to put a brace at the beginning and at the end.

74
00:04:48.876 --> 00:04:53.223
I've got to get the new line character right if I want to keep

75
00:04:53.223 --> 00:04:56.431
things nice and human readable as they should be with JSON

76
00:04:56.431 --> 00:04:59.418
because that's one of its advantages here.

77
00:04:59.418 --> 00:04:59.900
Then,

78
00:04:59.900 --> 00:05:04.922
I need to add in these escaped double quotation marks because

79
00:05:04.922 --> 00:05:08.633
I'm creating a string within a string in Java.

80
00:05:08.633 --> 00:05:10.866
And otherwise, the JSON will be invalid.

81
00:05:10.866 --> 00:05:13.658
Now, I've got a bunch of different values here,

82
00:05:13.658 --> 00:05:18.979
so I've got a title, an annual income, the number of years active for the job.

83
00:05:18.979 --> 00:05:19.351
Now,

84
00:05:19.351 --> 00:05:25.973
I pass in different format strings here so %s is when I want to print a string.

85
00:05:25.973 --> 00:05:33.003
Now the annualIncome is a floating point number, so that will be %g.

86
00:05:33.003 --> 00:05:35.557
And finally, %d for an integer.

87
00:05:35.557 --> 00:05:39.890
Now once I've done all these things, got the lines right,

88
00:05:39.890 --> 00:05:42.938
got the commas right, all the rest of it,

89
00:05:42.938 --> 00:05:46.746
I need to pass the values in the format string,

90
00:05:46.746 --> 00:05:54.413
so getTitle, getAnnualIncome, and finally,

91
00:05:54.413 --> 00:05:56.714
getYearsActive.

92
00:05:56.714 --> 00:05:58.619
I also need to remember, for example,

93
00:05:58.619 --> 00:06:03.367
to remove that comma at the end because it's an invalid JSON format string here.

94
00:06:03.367 --> 00:06:06.632
So if I just left that one comma in, I would've produced invalid JSON.

95
00:06:06.632 --> 00:06:12.074
In fact, if I run this code, let's see if I even produce correct JSON.

96
00:06:12.074 --> 00:06:15.748
Well, I have in my case, but look back at how much work we had to do,

97
00:06:15.748 --> 00:06:19.161
and that was mostly copying and pasting code just in

98
00:06:19.161 --> 00:06:21.689
order to get this mainly formatted out.

99
00:06:21.689 --> 00:06:27.161
We've got about 40 lines of code just to format this simple thing here.

100
00:06:27.161 --> 00:06:28.414
Very time consuming.

101
00:06:28.414 --> 00:06:31.818
A lot of work to maintain, a lot of work to implement to begin with,

102
00:06:31.818 --> 00:06:32.763
and very error prone.

103
00:06:32.763 --> 00:06:35.599
So if I were to say just removing one of those fields,

104
00:06:35.599 --> 00:06:38.213
so say I want to remove the jobs array from here,

105
00:06:38.213 --> 00:06:43.760
I have to remove that, I then need to remove that method call there,

106
00:06:43.760 --> 00:06:47.166
but I also need to do things like remember to add that comma up there or

107
00:06:47.166 --> 00:06:50.670
I need to be very careful with what we're doing here.

108
00:06:50.670 --> 00:06:55.374
Any small typo in these strings can cause an error in the code that's

109
00:06:55.374 --> 00:06:57.916
actually producing the JSON that's actually produced.

110
00:06:57.916 --> 00:07:01.281
And here I've added little indents just to make sure the indent lines up,

111
00:07:01.281 --> 00:07:03.555
but that isn't really composable.

112
00:07:03.555 --> 00:07:06.663
Okay, so what did that demo teach us?

113
00:07:06.663 --> 00:07:10.316
Well first, that writing JSON was very error prone.

114
00:07:10.316 --> 00:07:14.164
We accidently produced invalid JSON a couple of times.

115
00:07:14.164 --> 00:07:19.564
Any typo, no matter how small in your code, can easily produce invalid JSON.

116
00:07:19.564 --> 00:07:21.929
And it's pretty hard to understand where the code is

117
00:07:21.929 --> 00:07:23.559
correct just from reading the source.

118
00:07:23.559 --> 00:07:25.095
It's also pretty time consuming.

119
00:07:25.095 --> 00:07:27.978
It took us a while to implement even this simple example.

120
00:07:27.978 --> 00:07:31.422
Every time you want to serialize a new JSON object down the wire,

121
00:07:31.422 --> 00:07:33.603
you'll need to write some code to serialize it.

122
00:07:33.603 --> 00:07:37.859
And finally, for the same reason, it's pretty hard to maintain.

123
00:07:37.859 --> 00:07:41.708
It takes a lot of time just to update the serialization code.

124
00:07:41.708 --> 00:07:45.039
You need to keep it in sync with any changes to your communication protocol

125
00:07:45.039 --> 00:07:49.379
and take care when testing what is produced and received.

126
00:07:49.379 --> 00:07:51.622
Don't worry, this doesn't make JSON useless.

127
00:07:51.622 --> 00:07:54.256
It just requires that we take a different approach.

128
00:07:54.256 --> 00:08:03.000
In fact, we're going to take two different approaches in this module, a generator API and a binding API.

