WEBVTT
1
00:00:01.774 --> 00:00:06.119
Our second demo will be the servlet integration example.

2
00:00:06.119 --> 00:00:09.841
So something just a little bit more realistic than coding in a main method.

3
00:00:09.841 --> 00:00:10.090
Again,

4
00:00:10.090 --> 00:00:12.575
we'll implement the same servlet that we've used for the

5
00:00:12.575 --> 00:00:15.117
other consuming APIs so you can compare them.

6
00:00:15.117 --> 00:00:22.625
This servlet either approves or denies a loan application from a customer.

7
00:00:22.625 --> 00:00:22.921
So,

8
00:00:22.921 --> 00:00:26.469
we've got the basic same servlet outline as we saw with the

9
00:00:26.469 --> 00:00:29.526
previous servlet-related examples where we have a method where

10
00:00:29.526 --> 00:00:33.202
we're going to take an input request, we're going to parse out some JSON,

11
00:00:33.202 --> 00:00:35.748
and we are going to check whether we're going to

12
00:00:35.748 --> 00:00:37.703
approve or deny the loan in question.

13
00:00:37.703 --> 00:00:38.596
But this time,

14
00:00:38.596 --> 00:00:42.964
we're going to just extract the totalIncome and the amount from the

15
00:00:42.964 --> 00:00:47.834
requested JSON posted to us rather than parsing the whole document and

16
00:00:47.834 --> 00:00:52.537
then pulling those two values out of the document.

17
00:00:52.537 --> 00:00:58.107
So, let's start off, again, by creating a JsonFactory.

18
00:00:58.107 --> 00:01:00.717
Then we need to create a JsonParser.

19
00:01:00.717 --> 00:01:05.451
And this time we're going to use the InputStream of the

20
00:01:05.451 --> 00:01:08.448
source document to create the parser.

21
00:01:08.448 --> 00:01:08.763
Now,

22
00:01:08.763 --> 00:01:12.853
we need to have our loop over the tokens that the parser is

23
00:01:12.853 --> 00:01:15.170
going to extract from us from the input.

24
00:01:15.170 --> 00:01:19.413
So this is going to be the same format as we saw before.

25
00:01:19.413 --> 00:01:25.878
Check the token is not equal to null and create a local variable for that token.

26
00:01:25.878 --> 00:01:27.816
Now when we're in the token,

27
00:01:27.816 --> 00:01:32.856
we want to get the currentName of the token in question and we're

28
00:01:32.856 --> 00:01:37.279
going to check if the currentName is not null.

29
00:01:37.279 --> 00:01:39.877
And we're only going to look at a couple of numeric tokens.

30
00:01:39.877 --> 00:01:43.342
So we can filter this down a little bit more efficiently by saying look,

31
00:01:43.342 --> 00:01:44.731
is the token a numeric token?

32
00:01:44.731 --> 00:01:46.814
So that means, is it a kind of number.

33
00:01:46.814 --> 00:01:49.382
Then we can do a quick switch on the name.

34
00:01:49.382 --> 00:01:51.544
So, there are a couple of different things here.

35
00:01:51.544 --> 00:01:56.659
We had a field called annualIncome and that is what we're going to do.

36
00:01:56.659 --> 00:01:58.423
So that's the annual income for a given job,

37
00:01:58.423 --> 00:02:01.796
so we need to add that into the totalIncome field.

38
00:02:01.796 --> 00:02:05.640
So take totalIncome and += to praser.

39
00:02:05.640 --> 00:02:06.189
getDoubleValue.

40
00:02:06.189 --> 00:02:10.524
For each of the types you have, there are different get blah,

41
00:02:10.524 --> 00:02:10.885
blah,

42
00:02:10.885 --> 00:02:16.292
blah values that you can call on the parser to extract the value in question.

43
00:02:16.292 --> 00:02:18.591
Then we're going to break out of the case statement.

44
00:02:18.591 --> 00:02:21.815
So we're also going to add a case here for the amount

45
00:02:21.815 --> 00:02:23.552
that the person wants to borrow.

46
00:02:23.552 --> 00:02:26.033
So the field name for that is amount.

47
00:02:26.033 --> 00:02:30.291
And there's only one so we can just do assignment here rather than addition.

48
00:02:30.291 --> 00:02:30.702
So again,

49
00:02:30.702 --> 00:02:33.110
we're going to get the DoubleValue for the amount because it

50
00:02:33.110 --> 00:02:35.563
could be a floating point number potentially.

51
00:02:35.563 --> 00:02:37.523
Then we're going to break out of that switch statement.

52
00:02:37.523 --> 00:02:37.927
Okay.

53
00:02:37.927 --> 00:02:43.984
And, now the total of the income and the amount will be in those fields.

54
00:02:43.984 --> 00:02:44.424
And,

55
00:02:44.424 --> 00:02:48.388
the servlet can check the responses and apply the

56
00:02:48.388 --> 00:02:50.674
business logic based upon those values.

57
00:02:50.674 --> 00:02:54.334
So we've avoided constructing a whole in-memory representation of this

58
00:02:54.334 --> 00:02:57.829
JSON document to where we only needed two fields.

59
00:02:57.829 --> 00:03:00.430
So now we've finished coding this servlet example,

60
00:03:00.430 --> 00:03:02.830
let's just test that it works.

61
00:03:02.830 --> 00:03:04.730
Starting at the servlet,

62
00:03:04.730 --> 00:03:11.327
and I'm going to flip over to this console view where like before,

63
00:03:11.327 --> 00:03:16.329
we have our post-bank-loan script that sends its first argument and

64
00:03:16.329 --> 00:03:19.876
posts it to the servlet that's running locally.

65
00:03:19.876 --> 00:03:23.384
So let's post our regular loan document.

66
00:03:23.384 --> 00:03:25.301
We can see that loan was approved.

67
00:03:25.301 --> 00:03:29.527
And if we take the bad_loan document, we can see that was denied.

68
00:03:29.527 --> 00:03:35.100
And our bad_loan document had no jobs on so there was no income.

69
00:03:35.100 --> 00:03:38.255
And the good loan document had three different jobs

70
00:03:38.255 --> 00:03:43.000
on so there was plenty of income. Lovely stuff.

