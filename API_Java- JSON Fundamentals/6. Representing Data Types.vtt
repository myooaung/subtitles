WEBVTT
1
00:00:01.833 --> 00:00:02.212
Finally,

2
00:00:02.212 --> 00:00:05.626
let's talk about how to represent some different common

3
00:00:05.626 --> 00:00:08.054
data types inside your JSON document.

4
00:00:08.054 --> 00:00:12.396
When I talk about common data types, I mean things like dates,

5
00:00:12.396 --> 00:00:13.576
times, and currency values.

6
00:00:13.576 --> 00:00:17.583
Values that can be common across different endpoints or file

7
00:00:17.583 --> 00:00:20.431
types that use JSON to encode their values.

8
00:00:20.431 --> 00:00:24.675
We will be using dates as an example here to show how five

9
00:00:24.675 --> 00:00:28.211
principles should be applied to represent these types.

10
00:00:28.211 --> 00:00:32.615
One of the main advantages of JSON as a protocol is its readability,

11
00:00:32.615 --> 00:00:36.154
but in order to ensure that messages are actually debuggable,

12
00:00:36.154 --> 00:00:39.111
you need to be able to read the values within them.

13
00:00:39.111 --> 00:00:43.124
Consider the two representations here of a Java local date.

14
00:00:43.124 --> 00:00:47.784
First, is the default representation Jackson will provide to you.

15
00:00:47.784 --> 00:00:50.201
That's the version with the braces at the beginning

16
00:00:50.201 --> 00:00:53.253
and end and the field value pairs.

17
00:00:53.253 --> 00:01:00.378
The second is an ISO 8601 standard string encoding of the local date.

18
00:01:00.378 --> 00:01:05.152
I'm sure you'll agree it's a lot easier to read and a lot easier to understand,

19
00:01:05.152 --> 00:01:07.844
and will help you if you're debugging the messages.

20
00:01:07.844 --> 00:01:09.267
Then there's consistency.

21
00:01:09.267 --> 00:01:12.588
Keep a consistent representation throughout the API.

22
00:01:12.588 --> 00:01:16.205
This enables both producers and consumers of JSON to use common

23
00:01:16.205 --> 00:01:18.154
code in order to process these data types.

24
00:01:18.154 --> 00:01:21.916
It also means that anyone reading the messages in a debugging scenario

25
00:01:21.916 --> 00:01:25.145
doesn't need to remember multiple data type representations.

26
00:01:25.145 --> 00:01:25.581
Sometimes,

27
00:01:25.581 --> 00:01:31.026
we want to represent data types in Java code that JSON has a

28
00:01:31.026 --> 00:01:33.657
built-in representation for For example,

29
00:01:33.657 --> 00:01:35.750
numbers or lists/arrays.

30
00:01:35.750 --> 00:01:38.541
Where and ever possible,

31
00:01:38.541 --> 00:01:40.995
these should be encoded using the representation

32
00:01:40.995 --> 00:01:43.458
that JSON provides to each other.

33
00:01:43.458 --> 00:01:47.639
For example, encoding numbers as actually numbers rather than strings.

34
00:01:47.639 --> 00:01:51.613
This helps the tooling do a lot more of your work for you.

35
00:01:51.613 --> 00:01:52.287
For example,

36
00:01:52.287 --> 00:01:56.231
by returning numbers that actually get parsed out of the JSON documents

37
00:01:56.231 --> 00:01:59.965
rather than a string that you then have to parse yourself.

38
00:01:59.965 --> 00:02:02.950
The same principle applies to lists and arrays.

39
00:02:02.950 --> 00:02:07.507
Use JSON's built-in array literal syntax rather than

40
00:02:07.507 --> 00:02:10.996
trying to NIH your own representation.

41
00:02:10.996 --> 00:02:13.883
So let's go back to that date encoding example again.

42
00:02:13.883 --> 00:02:17.560
Another problem that it demonstrates is lack of portability.

43
00:02:17.560 --> 00:02:21.319
If you take a Java object and just auto-serialize it to JSON,

44
00:02:21.319 --> 00:02:25.407
one of the downsides can often be that it exposes the internal

45
00:02:25.407 --> 00:02:29.425
implementation details of the Java object in question.

46
00:02:29.425 --> 00:02:33.007
This ties the protocol to a specific implementation that other

47
00:02:33.007 --> 00:02:36.833
systems rely on and makes it harder to alter the internal

48
00:02:36.833 --> 00:02:38.647
representation of the objects in question.

49
00:02:38.647 --> 00:02:39.207
For example,

50
00:02:39.207 --> 00:02:43.584
by using a different date and time library or by re-implementing your backend

51
00:02:43.584 --> 00:02:46.885
service in a different programming language other than Java,

52
00:02:46.885 --> 00:02:50.132
or perhaps by porting it to Java from another language.

53
00:02:50.132 --> 00:02:53.976
These are all choices that you want to keep abstract

54
00:02:53.976 --> 00:02:56.908
of your protocol representation.

55
00:02:56.908 --> 00:02:58.469
Finally, there's size.

56
00:02:58.469 --> 00:03:03.739
Large JSON objects take more time to send over the

57
00:03:03.739 --> 00:03:06.667
wire and consume more bandwidth.

58
00:03:06.667 --> 00:03:08.424
Less is more.

59
00:03:08.424 --> 00:03:11.778
This increases the infrastructure costs, if you have bigger objects.

60
00:03:11.778 --> 00:03:17.479
And slow software has a poor user experience, making your users unhappy.

61
00:03:17.479 --> 00:03:19.929
Again, going back to the example of dates,

62
00:03:19.929 --> 00:03:22.056
our simple string-based encoding is much,

63
00:03:22.056 --> 00:03:25.665
much smaller than the equivalent default JSON encoding and

64
00:03:25.665 --> 00:03:28.032
will help reduce the bandwidth used.

65
00:03:28.032 --> 00:03:28.869
In most situations,

66
00:03:28.869 --> 00:03:32.879
the costs of your developer's time is higher than the cost of infrastructure,

67
00:03:32.879 --> 00:03:36.960
so you shouldn't be prioritizing size at the expense of readability

68
00:03:36.960 --> 00:03:39.880
or any of the other properties we've mentioned.

69
00:03:39.880 --> 00:03:49.000
In many cases, you can find representations that are a win in both cases, as this date and time encoding demonstrates.

