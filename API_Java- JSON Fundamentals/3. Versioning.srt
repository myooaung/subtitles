1
00:00:01,804 --> 00:00:05,859
A technique that can help you evolve an API in a more reliable

2
00:00:05,859 --> 00:00:08,259
and maintainable manner is to use versioning.

3
00:00:08,259 --> 00:00:13,247
That is to say assign versions to the JSON schema as it evolves.

4
00:00:13,247 --> 00:00:14,729
How does this help?

5
00:00:14,729 --> 00:00:18,685
Let's go back to one of our initial scenarios for using JSON,

6
00:00:18,685 --> 00:00:21,832
which was to exchange information between services.

7
00:00:21,832 --> 00:00:25,068
Each service can produce and consume JSON as part of its protocol.

8
00:00:25,068 --> 00:00:30,423
The JSON is sent and received over the network on top of some other protocol.

9
00:00:30,423 --> 00:00:33,273
Now one of the interesting things and a big advantage of

10
00:00:33,273 --> 00:00:36,297
running different services in production is they can be

11
00:00:36,297 --> 00:00:37,630
deployed independently of each other.

12
00:00:37,630 --> 00:00:40,278
This means that a new version of one service can be deployed

13
00:00:40,278 --> 00:00:43,774
with a new JSON schema and protocol whilst the other version is

14
00:00:43,774 --> 00:00:45,309
still running on the other side.

15
00:00:45,309 --> 00:00:46,844
In order to support the situation,

16
00:00:46,844 --> 00:00:50,494
the newer service may need to be able to produce and consume

17
00:00:50,494 --> 00:00:53,828
requests and responses that the older service can understand

18
00:00:53,828 --> 00:00:57,346
until the older service can be updated.

19
00:00:57,346 --> 00:01:00,831
One way of making this situation easier to manage is to

20
00:01:00,831 --> 00:01:04,243
version the changes to your JSON schema.

21
00:01:04,243 --> 00:01:06,466
It has several advantages.

22
00:01:06,466 --> 00:01:07,692
Firstly, easier debugging.

23
00:01:07,692 --> 00:01:10,895
If you're running different versions of a service

24
00:01:10,895 --> 00:01:12,772
that update their schema production,

25
00:01:12,772 --> 00:01:16,122
the ability to inspect messages and easily identify which

26
00:01:16,122 --> 00:01:20,678
version of the schema is being used for a given interaction can

27
00:01:20,678 --> 00:01:22,996
really help understand what's going on.

28
00:01:22,996 --> 00:01:26,506
Even if you deploy all your services at the same time in lock step,

29
00:01:26,506 --> 00:01:29,913
it can sometimes be the case that one system hasn't

30
00:01:29,913 --> 00:01:31,616
been updated and upgraded properly.

31
00:01:31,616 --> 00:01:33,620
Secondly, compatibility is easier.

32
00:01:33,620 --> 00:01:37,569
An endpoint that cannot support multiple versions of a JSON

33
00:01:37,569 --> 00:01:41,499
schema can more easily do so if it can simply check the version

34
00:01:41,499 --> 00:01:43,493
of a document and act accordingly.

35
00:01:43,493 --> 00:01:48,956
This may include rejecting a request from old clients that it doesn't support.

36
00:01:48,956 --> 00:01:50,506
Finally, schema evolution.

37
00:01:50,506 --> 00:01:51,023
Again,

38
00:01:51,023 --> 00:01:57,815
by simply being able to detect the version of the JSON request or response,

39
00:01:57,815 --> 00:02:00,990
makes it easier to evolve your schema.

40
00:02:00,990 --> 00:02:04,050
You can perform different behaviors and try to be compatible with

41
00:02:04,050 --> 00:02:07,253
different versions if that's a possible and desirable goal,

42
00:02:07,253 --> 00:02:10,599
which it often is because it keeps your software working.

43
00:02:10,599 --> 00:02:14,178
There are a couple of things to bear in mind when we look at versioning.

44
00:02:14,178 --> 00:02:17,891
Firstly, we need to think about when to actually version.

45
00:02:17,891 --> 00:02:19,924
Not every JSON schema needs a version.

46
00:02:19,924 --> 00:02:22,523
If you're always planning on deploying both the

47
00:02:22,523 --> 00:02:26,545
consumer and producer at the same time, then there is no need.

48
00:02:26,545 --> 00:02:30,314
A good example of this is if you're using JSON between a

49
00:02:30,314 --> 00:02:33,452
JavaScript single-page app and a Java server.

50
00:02:33,452 --> 00:02:36,665
If the single-page app gets deployed with the Java server,

51
00:02:36,665 --> 00:02:39,577
so they both get deployed at the same time,

52
00:02:39,577 --> 00:02:42,534
it keeps things simpler if you can do this model.

53
00:02:42,534 --> 00:02:45,687
But you're still best versioning if you want to maintain

54
00:02:45,687 --> 00:02:48,213
independent deployment of those versions.

55
00:02:48,213 --> 00:02:51,829
The second thing is to ensure that you always bump the

56
00:02:51,829 --> 00:02:53,753
version when the JSON schema changes.

57
00:02:53,753 --> 00:03:02,000
It may seem obvious, but such an easy thing to forget when you're making lots of rapid changes.

