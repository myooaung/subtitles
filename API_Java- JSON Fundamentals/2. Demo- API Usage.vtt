WEBVTT
1
00:00:01.778 --> 00:00:06.063
Okay, so now you've seen the two big problems that streaming JSON APIs solve,

2
00:00:06.063 --> 00:00:10.486
let's together take a look at what a streaming API actually entails,

3
00:00:10.486 --> 00:00:12.207
how to use the API.

4
00:00:12.207 --> 00:00:16.597
This is structured as a series of live coding demos with the example

5
00:00:16.597 --> 00:00:20.219
code in a project that ships along with this course.

6
00:00:20.219 --> 00:00:23.478
So feel free to code along at home.

7
00:00:23.478 --> 00:00:26.404
So first, let's walk through the basic API usage.

8
00:00:26.404 --> 00:00:29.515
You're going to see how we parse the same bank loan document

9
00:00:29.515 --> 00:00:31.549
that we've been using as a running example.

10
00:00:31.549 --> 00:00:37.736
You'll also see how we extract information and what errors look like.

11
00:00:37.736 --> 00:00:37.957
So,

12
00:00:37.957 --> 00:00:40.603
what we'll do here is we're going to take the bank_loan file

13
00:00:40.603 --> 00:00:44.025
that we've seen before and I'm going to show you how to parse

14
00:00:44.025 --> 00:00:45.989
it using the streaming API here.

15
00:00:45.989 --> 00:00:50.359
So the first thing we need to do in order to create the

16
00:00:50.359 --> 00:00:52.205
streaming API is to create a parser.

17
00:00:52.205 --> 00:00:59.404
And in order to create a parser, we need to create a factory.

18
00:00:59.404 --> 00:01:03.722
Now we've got our factory, we can create the parser from the factory.

19
00:01:03.722 --> 00:01:05.230
Now, as you can see,

20
00:01:05.230 --> 00:01:08.148
there's a variety of different overloads for creating different

21
00:01:08.148 --> 00:01:10.970
types of parsers from different input sources,

22
00:01:10.970 --> 00:01:14.753
similar to the ones we had with the DOM and binding APIs.

23
00:01:14.753 --> 00:01:16.938
So I'm just going to create a parser for a file because I'm

24
00:01:16.938 --> 00:01:19.317
going to be putting in the BANK_LOAN_FILE.

25
00:01:19.317 --> 00:01:22.178
And I would call my parser, parser.

26
00:01:22.178 --> 00:01:25.957
Now, the jsonParser object opens a reference to that resource.

27
00:01:25.957 --> 00:01:29.882
So if this is going to open a file, we need to have a way of closing it as well.

28
00:01:29.882 --> 00:01:30.132
So,

29
00:01:30.132 --> 00:01:34.364
I'm going to wrap it with a JSON 7 style try with resources block that will

30
00:01:34.364 --> 00:01:37.740
ensure the parser gets closed at the end of this block.

31
00:01:37.740 --> 00:01:42.202
Our parser itself has a method for advancing step by

32
00:01:42.202 --> 00:01:44.826
step through every token in the file.

33
00:01:44.826 --> 00:01:47.913
So a token is basically like a different component

34
00:01:47.913 --> 00:01:50.138
of the input stream that we see.

35
00:01:50.138 --> 00:01:54.918
For example, a number could be a token, or the field name could be a token,

36
00:01:54.918 --> 00:01:59.086
or the opening brace for a Java object could be a token.

37
00:01:59.086 --> 00:02:00.805
We need to loop through these different tokens,

38
00:02:00.805 --> 00:02:04.809
and at the end when we run our tokens, the next token method will return null.

39
00:02:04.809 --> 00:02:08.049
So I need to basically check that the parser.

40
00:02:08.049 --> 00:02:10.209
nextToken is not equal to null.

41
00:02:10.209 --> 00:02:10.951
Now in practice,

42
00:02:10.951 --> 00:02:13.750
I probably want to do something with the token so I'll

43
00:02:13.750 --> 00:02:15.705
start parsing through them as well.

44
00:02:15.705 --> 00:02:19.310
So let's assign each token to a local variable.

45
00:02:19.310 --> 00:02:20.792
There we go.

46
00:02:20.792 --> 00:02:25.098
Now our token variable will be updated as we go through the loop,

47
00:02:25.098 --> 00:02:27.748
and then we'll check that it's not equal to null at the end.

48
00:02:27.748 --> 00:02:31.187
What I want to do is basically now just print out the token.

49
00:02:31.187 --> 00:02:36.169
And also, print out the text at that point in time as well.

50
00:02:36.169 --> 00:02:41.252
And you can see we have the different types of tokens here,

51
00:02:41.252 --> 00:02:45.928
so START_OBJECT with that brace, a FIELD_NAME with the name of name here,

52
00:02:45.928 --> 00:02:49.408
the value as a string, which would be Mrs Joan Smith,

53
00:02:49.408 --> 00:02:50.717
the next field, purposeOfLoan.

54
00:02:50.717 --> 00:02:53.965
So as you can see when you're streaming through it,

55
00:02:53.965 --> 00:02:58.414
you're just able to loop through the raw tokens in the JSON input stream.

56
00:02:58.414 --> 00:03:02.009
So let's try and do something a little bit more useful.

57
00:03:02.009 --> 00:03:09.213
Let's try and take all the tokens that are actually values and print them out.

58
00:03:09.213 --> 00:03:10.994
So there's this convenient isScalarValue method,

59
00:03:10.994 --> 00:03:13.113
and when it says a scalar value,

60
00:03:13.113 --> 00:03:16.839
it means something that's not a JSON object or a JSON array.

61
00:03:16.839 --> 00:03:21.565
Now our parser will also keep track of what's known as the currentName.

62
00:03:21.565 --> 00:03:29.386
So the currentName is the last field name that you've seen here.

63
00:03:29.386 --> 00:03:31.808
And if it's valid whenever we get to a value,

64
00:03:31.808 --> 00:03:33.460
the currentName will always be non-null.

65
00:03:33.460 --> 00:03:36.750
There'll always be a name that corresponds to a value because

66
00:03:36.750 --> 00:03:38.818
that's the way JSON documents are paired up.

67
00:03:38.818 --> 00:03:41.141
So now let's take out the currentName.

68
00:03:41.141 --> 00:03:45.966
We'll take out the text of the current token and print it out.

69
00:03:45.966 --> 00:03:47.633
So first of all,

70
00:03:47.633 --> 00:03:52.786
we want to have our output contain the name and I'm just going to have a colon,

71
00:03:52.786 --> 00:03:58.569
and then the value, and then a new line character.

72
00:03:58.569 --> 00:03:59.976
And if rerun this,

73
00:03:59.976 --> 00:04:04.196
we should see all the name value pairs inside the JSON document.

74
00:04:04.196 --> 00:04:04.834
Lovely stuff.

75
00:04:04.834 --> 00:04:08.775
Name, Mrs Joan Smith, purposeOfLoan, to build an extension to our house.

76
00:04:08.775 --> 00:04:09.123
Now,

77
00:04:09.123 --> 00:04:12.946
the win here from a performance point of view often doesn't come

78
00:04:12.946 --> 00:04:16.412
when you just do this kind of raw mapping because you could just

79
00:04:16.412 --> 00:04:18.089
bind that into an object or so.

80
00:04:18.089 --> 00:04:22.144
A lot of it comes when you're just looking for a specific value within the

81
00:04:22.144 --> 00:04:26.473
JSON stream or when you're only parsing through these tokens and throwing

82
00:04:26.473 --> 00:04:29.504
them away after you've done used them once or more.

83
00:04:29.504 --> 00:04:33.459
We'll look at some performance comparisons later and see how that is realized.

84
00:04:33.459 --> 00:04:34.724
But, as you can see,

85
00:04:34.724 --> 00:04:42.000
the API is a little bit more low level than the ones we're used to, but it's still pretty simple to use.

