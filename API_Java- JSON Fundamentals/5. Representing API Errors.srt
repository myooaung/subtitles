1
00:00:01,786 --> 00:00:04,451
Another interesting aspect of information architecture when it

2
00:00:04,451 --> 00:00:09,595
comes to JSON APIs is how you represent errors.

3
00:00:09,595 --> 00:00:13,103
The advice in this section is particularly relevant to when it comes to

4
00:00:13,103 --> 00:00:17,763
APIs where JSON is being used in conjunction with HTTP.

5
00:00:17,763 --> 00:00:21,765
That is to say that the JSON documents are the payloads in an HTTP

6
00:00:21,765 --> 00:00:26,108
based request response communication system.

7
00:00:26,108 --> 00:00:28,660
In a system like this, which is very common,

8
00:00:28,660 --> 00:00:32,763
you've got a couple of choices as to where you encode your errors.

9
00:00:32,763 --> 00:00:36,345
The first choice would be to use HTTP.

10
00:00:36,345 --> 00:00:42,758
HTTP has a bunch of standard error codes with different defined semantics.

11
00:00:42,758 --> 00:00:46,912
For example, the number 500 for an internal server error,

12
00:00:46,912 --> 00:00:49,944
or 404 if the resource isn't found.

13
00:00:49,944 --> 00:00:54,725
A successful HTTP request would be responded to with a 200.

14
00:00:54,725 --> 00:00:58,481
This is a standardized error and standardized correct return values.

15
00:00:58,481 --> 00:01:00,101
But on the downside,

16
00:01:00,101 --> 00:01:04,465
it doesn't encode a message explaining what is wrong with the error,

17
00:01:04,465 --> 00:01:06,994
and that might make it harder to debug things.

18
00:01:06,994 --> 00:01:12,102
The other choice you have is to use a JSON document to represent the error

19
00:01:12,102 --> 00:01:16,989
condition that's returned by the API when error is occurred.

20
00:01:16,989 --> 00:01:19,341
This is flexible because you can put whatever information into

21
00:01:19,341 --> 00:01:21,538
the error document that can aid debugging.

22
00:01:21,538 --> 00:01:22,519
On the downside,

23
00:01:22,519 --> 00:01:25,441
it's not standardized and you need to be careful to

24
00:01:25,441 --> 00:01:28,614
provide debugging information that could not be used

25
00:01:28,614 --> 00:01:31,201
maliciously by an attacker or hacker.

26
00:01:31,201 --> 00:01:34,697
I think the best approach here between those two choices is to

27
00:01:34,697 --> 00:01:38,346
encode the errors themselves into HTTP status codes.

28
00:01:38,346 --> 00:01:42,602
My main reason for saying this is it keeps other tooling working correctly.

29
00:01:42,602 --> 00:01:43,315
For example,

30
00:01:43,315 --> 00:01:48,987
a web browser or a proxy is legitimately allowed to cache an HTTP 200 response,

31
00:01:48,987 --> 00:01:52,484
but will not cache a 500 by default.

32
00:01:52,484 --> 00:01:55,680
If you model errors as JSON documents with 200 status codes,

33
00:01:55,680 --> 00:01:59,507
then they may be accidently cached elsewhere and this might

34
00:01:59,507 --> 00:02:02,039
break retry logic from other services.

35
00:02:02,039 --> 00:02:04,587
Even when returning HTTP status codes for errors,

36
00:02:04,587 --> 00:02:08,331
it's still possible to use JSON documents in order to encode the

37
00:02:08,331 --> 00:02:17,000
error messages as the payload of the response. And I recommend that you do this to make debugging easier.

