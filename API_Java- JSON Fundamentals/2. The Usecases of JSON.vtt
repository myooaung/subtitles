WEBVTT
1
00:00:02.088 --> 00:00:05.726
Now our first use case is communicating with web browsers.

2
00:00:05.726 --> 00:00:06.054
Nowadays,

3
00:00:06.054 --> 00:00:11.006
lots of websites are written as single-page web apps or at least as web apps

4
00:00:11.006 --> 00:00:14.031
with a lot of dynamic content written using JavaScript.

5
00:00:14.031 --> 00:00:18.464
Now this design means you need a way of retrieving data from your server,

6
00:00:18.464 --> 00:00:21.761
where the data is stored, and getting it back onto the web browser.

7
00:00:21.761 --> 00:00:24.393
For example, if you load up Twitter in a web browser,

8
00:00:24.393 --> 00:00:26.889
it needs a way of querying information about the

9
00:00:26.889 --> 00:00:31.091
different tweets in your timeline, and that data is located on Twitter's server.

10
00:00:31.091 --> 00:00:34.752
JSON is a very commonly used serialization format for these kind of

11
00:00:34.752 --> 00:00:38.404
tasks because front-end code is either written in JavaScript or

12
00:00:38.404 --> 00:00:40.132
languages that compile to JavaScript.

13
00:00:40.132 --> 00:00:44.558
And JSON is a format that's easily parsed within a web browser

14
00:00:44.558 --> 00:00:47.696
and maps nicely to the JavaScript object model.

15
00:00:47.696 --> 00:00:50.937
There are a number of different communication patterns they use by that

16
00:00:50.937 --> 00:00:55.144
front-end code in order to retrieve and send JSON-related data.

17
00:00:55.144 --> 00:00:58.819
So they might be using remote procedure calls with HTTP.

18
00:00:58.819 --> 00:01:02.889
The web browser does an Ajax-style HTTP GET or POST to read

19
00:01:02.889 --> 00:01:05.887
data from the server or to send it data.

20
00:01:05.887 --> 00:01:09.023
The data being transported can be encoded using JSON.

21
00:01:09.023 --> 00:01:13.414
Server sent events are another way of servers keeping HTTP requests open

22
00:01:13.414 --> 00:01:16.738
and pushing events out from the server to the client.

23
00:01:16.738 --> 00:01:19.936
The data stored in these events can be encoded using JSON,

24
00:01:19.936 --> 00:01:21.664
and there's also websockets.

25
00:01:21.664 --> 00:01:24.867
Now these enable a bidirectional stream of events

26
00:01:24.867 --> 00:01:27.011
between the web browser and the server.

27
00:01:27.011 --> 00:01:27.342
Again,

28
00:01:27.342 --> 00:01:31.758
the data in these events can be encoded using JSON as an interchange format.

29
00:01:31.758 --> 00:01:35.259
Covering these approaches in depth is kind of outside the scope of this course,

30
00:01:35.259 --> 00:01:39.008
but it's always worth being aware of the bigger picture usage patterns

31
00:01:39.008 --> 00:01:43.037
that motivate our use of technologies such as JSON.

32
00:01:43.037 --> 00:01:45.730
Now a key thing to remember is whatever technology you use for the

33
00:01:45.730 --> 00:01:49.708
underlying transport is often agnostic to the use of JSON,

34
00:01:49.708 --> 00:01:52.436
and JSON isn't a transport technology as such.

35
00:01:52.436 --> 00:01:54.294
It's just there to represent the data.

36
00:01:54.294 --> 00:01:57.600
Our second example problem where JSON is used to exchange

37
00:01:57.600 --> 00:02:00.484
information is between servers on your own system,

38
00:02:00.484 --> 00:02:04.682
or at least within your own datacenter or in the cloud or something like that.

39
00:02:04.682 --> 00:02:07.051
The problem here is you have different services that you

40
00:02:07.051 --> 00:02:08.362
need to exchange information between.

41
00:02:08.362 --> 00:02:12.023
You don't want to have to pick a technology that's specific to one

42
00:02:12.023 --> 00:02:14.803
programming language because that mandates the implementation of the

43
00:02:14.803 --> 00:02:17.420
services to be in the language in question.

44
00:02:17.420 --> 00:02:21.545
It's also convenient to have a human-readable data interchange format.

45
00:02:21.545 --> 00:02:23.981
This is because if you want to inspect, monitor,

46
00:02:23.981 --> 00:02:26.100
or debug traffic going between these two services,

47
00:02:26.100 --> 00:02:30.549
then it's really easy to do so if you can actually read that data yourself.

48
00:02:30.549 --> 00:02:34.342
I definitely don't want to encourage you to always pick JSON as your

49
00:02:34.342 --> 00:02:36.345
data format for exchanging information between servers.

50
00:02:36.345 --> 00:02:39.880
There are a lot of other choices these days and at the end of

51
00:02:39.880 --> 00:02:42.428
the course we shall discuss some of those other choices and

52
00:02:42.428 --> 00:02:43.637
when they are more appropriate.

53
00:02:43.637 --> 00:02:47.413
Finally, there's a persistent storage of data on a file system.

54
00:02:47.413 --> 00:02:50.941
Services may need to read or write data to or from the file system,

55
00:02:50.941 --> 00:02:53.609
and they need a standardize format for storing that data.

56
00:02:53.609 --> 00:02:57.169
Npm is a good example of a program that uses JSON

57
00:02:57.169 --> 00:02:58.464
appropriately for storing information.

58
00:02:58.464 --> 00:03:01.234
It defines its configuration information for a

59
00:03:01.234 --> 00:03:04.018
project's package dependencies in JSON.

60
00:03:04.018 --> 00:03:07.648
Now JSON definitely isn't the right choice for all data storage format choices.

61
00:03:07.648 --> 00:03:10.798
There are a number of pros and cons with its usage.

62
00:03:10.798 --> 00:03:14.499
As we've mentioned, human readability is great for debugging and monitoring.

63
00:03:14.499 --> 00:03:17.257
It's also great there's a file format that you want

64
00:03:17.257 --> 00:03:19.458
manually edit outside of the program itself.

65
00:03:19.458 --> 00:03:21.437
JSON has really good tooling support.

66
00:03:21.437 --> 00:03:23.307
You can easily find third-party editing tools,

67
00:03:23.307 --> 00:03:26.442
and as we'll see in a minute, most Java IDEs,

68
00:03:26.442 --> 00:03:28.358
such as IntelliJ and Eclipse,

69
00:03:28.358 --> 00:03:31.458
will understand JSON very easily and let you edit it very easily.

70
00:03:31.458 --> 00:03:34.815
It's also possible to use tools such as jq to

71
00:03:34.815 --> 00:03:37.272
intelligently search files for JSON in.

72
00:03:37.272 --> 00:03:39.504
Now every platform, especially Java,

73
00:03:39.504 --> 00:03:42.071
has libraries for producing and consuming JSON data,

74
00:03:42.071 --> 00:03:45.904
even though it isn't tied to a choice for a particular platform or language.

75
00:03:45.904 --> 00:03:50.372
There's also a really, really well understood data interchange format,

76
00:03:50.372 --> 00:03:52.910
so lots of other developers will be able to pick up your code more

77
00:03:52.910 --> 00:03:56.445
easily than if you decide to NIH your own data format.

78
00:03:56.445 --> 00:03:59.312
But it also makes a poor choice for large production data.

79
00:03:59.312 --> 00:04:00.978
It doesn't have a schema,

80
00:04:00.978 --> 00:04:03.977
which can sometimes lead to errors being introduced accidently.

81
00:04:03.977 --> 00:04:06.852
It's not really performant for large documents.

82
00:04:06.852 --> 00:04:09.161
There are other formats which can be more useful,

83
00:04:09.161 --> 00:04:10.794
perhaps even just a plain database.

84
00:04:10.794 --> 00:04:13.099
If you're just dumping data into flat files,

85
00:04:13.099 --> 00:04:16.640
your system has no real support for concurrently accessing said files.

86
00:04:16.640 --> 00:04:18.406
You would have to implement all that yourself.

87
00:04:18.406 --> 00:04:22.420
So I guess what I mean is even though JSON files can be used

88
00:04:22.420 --> 00:04:24.489
for storage and people frequently do so,

89
00:04:24.489 --> 00:04:26.866
they aren't really very good as a database.

90
00:04:26.866 --> 00:04:30.141
They're good for a file format for things like simple config

91
00:04:30.141 --> 00:04:32.148
files where you want to use it to edit them.

92
00:04:32.148 --> 00:04:32.528
They're small.

93
00:04:32.528 --> 00:04:40.000
Your app will just load them up when it starts. You shouldn't really be using it as a replacement for a database.

