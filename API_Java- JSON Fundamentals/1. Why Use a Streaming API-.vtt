WEBVTT
1
00:00:00.000 --> 00:00:04.921
Now it's time to talk about a streaming API,

2
00:00:04.921 --> 00:00:10.249
the most performant, but also low level of the different consuming APIs.

3
00:00:10.249 --> 00:00:13.533
Okay, so before you get to see the details of the streaming API implementation,

4
00:00:13.533 --> 00:00:16.331
let's take a look at the problems that we're trying

5
00:00:16.331 --> 00:00:17.794
to solve with the streaming API.

6
00:00:17.794 --> 00:00:21.890
This will help you understand why you may want to use a streaming API rather

7
00:00:21.890 --> 00:00:25.816
than the awesome binding API that we saw in the last section.

8
00:00:25.816 --> 00:00:29.457
Sometimes, it's very useful to be able to write generic JSON processing code.

9
00:00:29.457 --> 00:00:30.655
When I say generic,

10
00:00:30.655 --> 00:00:34.486
I mean code that can operate all different kinds of JSON documents.

11
00:00:34.486 --> 00:00:35.244
For example,

12
00:00:35.244 --> 00:00:39.121
you might be implementing a tool that can operate on

13
00:00:39.121 --> 00:00:40.726
arbitrary unstructured JSON documents.

14
00:00:40.726 --> 00:00:44.486
Jq is a command line tool that can apply jQuery like

15
00:00:44.486 --> 00:00:46.442
queries over JSON files and input.

16
00:00:46.442 --> 00:00:47.992
If you're implementing jq yourself,

17
00:00:47.992 --> 00:00:52.165
then you would need to be able to operate on any type of JSON document.

18
00:00:52.165 --> 00:00:57.088
Same with things like formatters and highlighting tools and IDEs.

19
00:00:57.088 --> 00:00:58.311
Validation is another example.

20
00:00:58.311 --> 00:01:02.129
Checking that all the fields in a JSON document have a certain

21
00:01:02.129 --> 00:01:06.034
property can be useful and doesn't necessarily have to be tied

22
00:01:06.034 --> 00:01:07.913
to a specific document type.

23
00:01:07.913 --> 00:01:08.277
Finally,

24
00:01:08.277 --> 00:01:12.220
transformation of JSON such as pretty printing a JSON document doesn't

25
00:01:12.220 --> 00:01:15.542
need to be tied to a specific document type either.

26
00:01:15.542 --> 00:01:20.902
Now binding APIs bind some JSON input to a specific Java type so

27
00:01:20.902 --> 00:01:24.056
they're unable to operate on an arbitrary JSON document.

28
00:01:24.056 --> 00:01:27.694
We can't use binding APIs to solve these kinds of problems.

29
00:01:27.694 --> 00:01:29.651
We could use DOM-style JSON APIs however,

30
00:01:29.651 --> 00:01:33.825
and that brings us to the second problem that JSON streaming APIs are

31
00:01:33.825 --> 00:01:38.150
trying to solve and their big advantage over DOM-style APIs.

32
00:01:38.150 --> 00:01:40.500
That is performance.

33
00:01:40.500 --> 00:01:41.284
Fundamentally,

34
00:01:41.284 --> 00:01:47.374
DOM and binding-style APIs require you to read the entire

35
00:01:47.374 --> 00:01:50.904
document's object tree into memory in one big go.

36
00:01:50.904 --> 00:01:53.593
That means they're slow because they have all this additional

37
00:01:53.593 --> 00:01:55.638
workaround creating a big tree of objects,

38
00:01:55.638 --> 00:01:59.639
and also very memory hungry because they need to have all the objects in memory.

39
00:01:59.639 --> 00:02:03.040
Streaming APIs are a bit like a speed boat.

40
00:02:03.040 --> 00:02:04.782
They're all about performance.

41
00:02:04.782 --> 00:02:07.652
They let you process each token individually,

42
00:02:07.652 --> 00:02:12.217
and that means they don't need to load all the data into memory in one go

43
00:02:12.217 --> 00:02:23.000
and they can be much more efficient in memory terms. By doing less work than the DOM or binding-style APIs, they also end up faster.

