1
00:00:01,930 --> 00:00:02,265
Alright,

2
00:00:02,265 --> 00:00:05,946
it's time to wrap up this module and really clarify what

3
00:00:05,946 --> 00:00:09,243
you've learned and build on those ideas.

4
00:00:09,243 --> 00:00:13,978
Now, to many people, the binding approach might seem like a no brainer,

5
00:00:13,978 --> 00:00:14,778
but actually,

6
00:00:14,778 --> 00:00:19,576
there are circumstances where you may wish to use the generator API.

7
00:00:19,576 --> 00:00:26,853
It's time to have the great JSON bakeoff and compare the two approaches.

8
00:00:26,853 --> 00:00:30,539
For most programs, the generator API is a lot more effort,

9
00:00:30,539 --> 00:00:32,113
whilst binding is really simple.

10
00:00:32,113 --> 00:00:32,742
With binding,

11
00:00:32,742 --> 00:00:37,583
you don't have to modify your serialization code when you add or remove a field,

12
00:00:37,583 --> 00:00:39,444
and you don't have to write very much code.

13
00:00:39,444 --> 00:00:42,965
It offers a lot higher productivity for most simple cases.

14
00:00:42,965 --> 00:00:47,806
It's definitely the best approach, most of the time.

15
00:00:47,806 --> 00:00:51,828
Generators, however, come into their own in a couple of scenarios.

16
00:00:51,828 --> 00:00:54,609
It's possible to customize the output of binding API,

17
00:00:54,609 --> 00:00:57,413
and we'll look at some examples of that later.

18
00:00:57,413 --> 00:00:58,039
But sometimes,

19
00:00:58,039 --> 00:01:01,761
if you want to do complex customization or perhaps write

20
00:01:01,761 --> 00:01:03,757
complete different views of objects,

21
00:01:03,757 --> 00:01:08,065
it can just be easier to write the code using the generator API than

22
00:01:08,065 --> 00:01:12,855
munging the binding API to do things your way.

23
00:01:12,855 --> 00:01:19,147
The other key scenario where generators win is streaming performance scenarios.

24
00:01:19,147 --> 00:01:19,402
Now,

25
00:01:19,402 --> 00:01:21,694
let's suppose you're writing a program that converts a

26
00:01:21,694 --> 00:01:23,808
CSV file into a large JSON document.

27
00:01:23,808 --> 00:01:26,377
If you're going to use the binding API,

28
00:01:26,377 --> 00:01:29,766
you'd have to read the whole file into memory,

29
00:01:29,766 --> 00:01:32,722
populate a large POJO array with all the values,

30
00:01:32,722 --> 00:01:35,157
and then write them back out as JSON.

31
00:01:35,157 --> 00:01:36,247
With the generator API,

32
00:01:36,247 --> 00:01:40,521
you can just stream the values on the fly and have complete control over the way

33
00:01:40,521 --> 00:01:44,102
that they're producing the JSON objects and not have to create those

34
00:01:44,102 --> 00:01:46,850
intermediate objects or read everything into memory at once.

35
00:01:46,850 --> 00:01:50,005
It's much faster and much less memory is used,

36
00:01:50,005 --> 00:01:52,849
so certainly something worth thinking about.

37
00:01:52,849 --> 00:01:57,541
Now, the key takeaway from this module is please,

38
00:01:57,541 --> 00:02:00,665
please, please, for the love of Douglas Crockford,

39
00:02:00,665 --> 00:02:06,093
the creator of JSON, don't write code that produces JSON by hand,

40
00:02:06,093 --> 00:02:07,608
use a library.

41
00:02:07,608 --> 00:02:09,991
We have two main approaches to producing JSON.

42
00:02:09,991 --> 00:02:14,121
One was a binding API that automatically serializes your POJOs.

43
00:02:14,121 --> 00:02:16,436
This works most of the time, but not always.

44
00:02:16,436 --> 00:02:18,382
If you need customization, performance,

45
00:02:18,382 --> 00:02:22,256
or don't have a POJO in your application domain that

46
00:02:22,256 --> 00:02:30,000
represents the message object being produced, then you can use a generator API instead.

