WEBVTT
1
00:00:00.740 --> 00:00:03.760
So now that we've seen SQL Server running in a container,

2
00:00:03.760 --> 00:00:06.240
what are some of the things that you need to know about

3
00:00:06.240 --> 00:00:08.500
running SQL Server in a container?

4
00:00:08.500 --> 00:00:09.850
Well, first of all,

5
00:00:09.850 --> 00:00:14.790
you have to map port 1433, which is SQL Server's default port in

6
00:00:14.790 --> 00:00:17.690
the container, to a port on the host system.

7
00:00:17.690 --> 00:00:22.720
This can allow you access to that running instance of SQL Server.

8
00:00:22.720 --> 00:00:26.350
Next, if you're running one of those Microsoft images like the

9
00:00:26.350 --> 00:00:28.640
one we pulled down in the example,

10
00:00:28.640 --> 00:00:33.350
you need to supply an SA password with one of the environment variables.

11
00:00:33.350 --> 00:00:36.080
You also need to accept the EULA.

12
00:00:36.080 --> 00:00:40.440
If you don't do both of these things, the Microsoft images won't run.

13
00:00:40.440 --> 00:00:43.350
However, you're not stuck with Microsoft images.

14
00:00:43.350 --> 00:00:46.320
You can also create custom images of your own,

15
00:00:46.320 --> 00:00:51.840
and your custom images will not necessarily have those requirements.

16
00:00:51.840 --> 00:00:55.040
You can also add databases to your custom images.

17
00:00:55.040 --> 00:00:59.040
So while the Microsoft images come up with just the system databases and

18
00:00:59.040 --> 00:01:02.860
no user databases, if you create your own Docker image,

19
00:01:02.860 --> 00:01:06.790
your own Docker image can have databases preloaded into it,

20
00:01:06.790 --> 00:01:12.240
and so those databases are ready to run right as soon as the image comes up.

21
00:01:12.240 --> 00:01:14.940
Next, containers are stateless.

22
00:01:14.940 --> 00:01:17.240
That means when the container ends,

23
00:01:17.240 --> 00:01:20.510
every change that you made in that container goes away.

24
00:01:20.510 --> 00:01:21.110
Typically,

25
00:01:21.110 --> 00:01:24.850
this is not good for database kind of applications where

26
00:01:24.850 --> 00:01:27.470
you want your changes to be persisted.

27
00:01:27.470 --> 00:01:30.750
If you want to persist your changes, in other words,

28
00:01:30.750 --> 00:01:35.180
have that containerized version of SQL Server write to a database and have

29
00:01:35.180 --> 00:01:39.090
those database changes persisted beyond the life of the container, you'll

30
00:01:39.090 --> 00:01:42.270
need to use an external volume in order to do that.

31
00:01:42.270 --> 00:01:47.880
And containers can access external volumes, and write data to those volumes, and

32
00:01:47.880 --> 00:01:52.130
have that data persisted beyond the life of the container.

33
00:01:52.130 --> 00:01:54.680
So, in summary, in this session,

34
00:01:54.680 --> 00:01:58.580
we saw that Docker containers enable you to deploy new SQL Server

35
00:01:58.580 --> 00:02:03.610
instances in just a few seconds. We saw how you can retrieve container

36
00:02:03.610 --> 00:02:06.940
images from the Docker Hub and get them running.

37
00:02:06.940 --> 00:02:11.750
We saw how to run a SQL Server container using the docker run command,

38
00:02:11.750 --> 00:02:21.000
and we saw how you could connect to that SQL Server container from the normal SQL Server management tools.

