1
00:00:00,540 --> 00:00:04,140
Getting information about your Kubernetes deployments and objects can help you

2
00:00:04,140 --> 00:00:08,080
to see if they're in their expected states and give you the information you

3
00:00:08,080 --> 00:00:12,410
need to fix them if they're not. Kubectl offers a number of commands that can

4
00:00:12,410 --> 00:00:16,560
help you see what's going on in your Kubernetes clusters. We've covered a few

5
00:00:16,560 --> 00:00:21,540
of the most common kubectl commands in previous modules. However, as you're

6
00:00:21,540 --> 00:00:22,730
working with Kubernetes,

7
00:00:22,730 --> 00:00:26,430
you might want to get information about a number of different components.

8
00:00:26,430 --> 00:00:30,220
One of the most essential commands for quickly getting information about

9
00:00:30,220 --> 00:00:34,150
the current deployment is the kubectl get all command that you see at

10
00:00:34,150 --> 00:00:38,580
the top here. Kubectl get all is a quick way to see the status of all

11
00:00:38,580 --> 00:00:41,740
the important Kubernetes objects, including deployments,

12
00:00:41,740 --> 00:00:45,130
ReplicaSets, nodes, pods, and services.

13
00:00:45,130 --> 00:00:49,590
You can use this command to quickly see if the objects running are in

14
00:00:49,590 --> 00:00:53,480
their expected states, as well as their current status.

15
00:00:53,480 --> 00:00:55,860
Next, if you have performance issues,

16
00:00:55,860 --> 00:00:59,350
you might want to look into using the kubectl top commands that you

17
00:00:59,350 --> 00:01:04,180
see here underneath that. A kubectl top allows you to see your

18
00:01:04,180 --> 00:01:08,240
current CPU, memory, and storage utilization.

19
00:01:08,240 --> 00:01:10,940
If you're having trouble connecting to your pods,

20
00:01:10,940 --> 00:01:14,160
knowing their IP addresses can be very important.

21
00:01:14,160 --> 00:01:16,400
We've seen this in the previous modules,

22
00:01:16,400 --> 00:01:20,990
but Kubernetes services provides the network connectivity for your pods.

23
00:01:20,990 --> 00:01:26,040
Running the kubectl get services command shows the status of your services,

24
00:01:26,040 --> 00:01:31,540
as well as the external IP addresses that you're using. Next, a best practice

25
00:01:31,540 --> 00:01:35,670
in managing Kubernetes is to make sure that all your yaml declarations are

26
00:01:35,670 --> 00:01:37,430
part of a source control system.

27
00:01:37,430 --> 00:01:38,150
However,

28
00:01:38,150 --> 00:01:41,560
not everybody does that, and if you haven't done that and you have

29
00:01:41,560 --> 00:01:44,360
any doubts about how a given object was created,

30
00:01:44,360 --> 00:01:48,830
you can essentially reverse engineer your Kubernetes components and

31
00:01:48,830 --> 00:01:53,770
retrieve the yaml that was used for them by using the ‑o yaml

32
00:01:53,770 --> 00:01:57,590
parameter as part of your kubectl get commands.

33
00:01:57,590 --> 00:02:00,280
For example, to get the yaml for a pod,

34
00:02:00,280 --> 00:02:04,250
you could use kubectl get pod, supply the pod name,

35
00:02:04,250 --> 00:02:07,210
and then the ‑o yaml parameters,

36
00:02:07,210 --> 00:02:10,840
as you can see at the bottom of this screen. Next,

37
00:02:10,840 --> 00:02:14,860
kubectl describe commands, they can be an essential tool about getting

38
00:02:14,860 --> 00:02:18,140
information about almost all Kubernetes deployments.

39
00:02:18,140 --> 00:02:22,470
We've seen a few examples of using kubectl described in the previous modules,

40
00:02:22,470 --> 00:02:24,560
so I won't spend a lot of time on it here,

41
00:02:24,560 --> 00:02:28,190
but it can be an essential troubleshooting tool. Kubectl

42
00:02:28,190 --> 00:02:31,940
describe can be used with deployments, pods, and storage.

43
00:02:31,940 --> 00:02:35,640
Filtering with the label parameter like you see here,

44
00:02:35,640 --> 00:02:40,110
can help you find and focus on the apps that you're interested in.

45
00:02:40,110 --> 00:02:44,880
Next, examining Kubernetes logs is one of the most important

46
00:02:44,880 --> 00:02:48,820
troubleshooting tools that you're going to have. Kubernetes logs for SQL

47
00:02:48,820 --> 00:02:53,840
Server pods are generated directly by the SQL Server application, and if

48
00:02:53,840 --> 00:02:56,440
SQL Server is having some type of problem,

49
00:02:56,440 --> 00:03:00,340
these logs can be one of the best places to get information.

50
00:03:00,340 --> 00:03:05,030
Kubectl logs displays the logs for a pod. Like the kubectl describe

51
00:03:05,030 --> 00:03:08,910
command, using labels can be a convenient way to quickly get

52
00:03:08,910 --> 00:03:12,060
information about the apps that you're interested in without having

53
00:03:12,060 --> 00:03:15,620
to retrieve the actual pod name, which can be somewhat lengthy.

54
00:03:15,620 --> 00:03:19,840
Kubectl logs shows you the logs for a pod that's currently running,

55
00:03:19,840 --> 00:03:22,450
but what about a pod that's crashed and it's not

56
00:03:22,450 --> 00:03:24,930
running? Is there a way to see that too?

57
00:03:24,930 --> 00:03:26,230
Well, fortunately,

58
00:03:26,230 --> 00:03:36,240
there is. By adding the ‑p for ‑‑previous, the ‑p parameter means previous pod

59
00:03:36,240 --> 00:03:39,940
to your kubectl logs command like you see here in the middle,

60
00:03:39,940 --> 00:03:45,140
you can retrieve the logs for the previous instance of a pod.

61
00:03:45,140 --> 00:03:49,030
Kubernetes also keeps track of something that it calls events.

62
00:03:49,030 --> 00:03:51,140
Events are different from logs.

63
00:03:51,140 --> 00:03:53,890
Logs are generated by the application.

64
00:03:53,890 --> 00:03:56,880
Kubernetes events essentially track changes in

65
00:03:56,880 --> 00:03:59,250
state to the objects in a cluster.

66
00:03:59,250 --> 00:04:02,580
Events show you things like when a container is being created

67
00:04:02,580 --> 00:04:04,940
or when it starts or when it terminates.

68
00:04:04,940 --> 00:04:07,500
Events provide only limited information,

69
00:04:07,500 --> 00:04:12,240
though. They'll tell you what happened, but not much about why it happened.

70
00:04:12,240 --> 00:04:16,060
Events are pretty easy to see when you're trying to debug different issues.

71
00:04:16,060 --> 00:04:20,030
For example, when you use the kubectl describe pod commands,

72
00:04:20,030 --> 00:04:23,220
these will show the events at the end of the output display.

73
00:04:23,220 --> 00:04:24,770
And, like you would expect,

74
00:04:24,770 --> 00:04:29,090
running kubectl get events will retrieve the events for the cluster.

75
00:04:29,090 --> 00:04:32,420
By default, they're sorted by resource, so if you

76
00:04:32,420 --> 00:04:33,950
want to see them ordered by time,

77
00:04:33,950 --> 00:04:37,640
you can add the ‑‑sort‑by parameter like you can see in this example.

78
00:04:37,640 --> 00:04:42,190
Likewise, if you want to restrict the events to a certain resource type,

79
00:04:42,190 --> 00:04:45,590
you can use the ‑‑field‑selector parameter like you

80
00:04:45,590 --> 00:04:48,350
can see here at the bottom to, say,

81
00:04:48,350 --> 00:04:53,940
restrict the display or filter the display for just pods. Next, what if

82
00:04:53,940 --> 00:04:56,710
you've made a mistake in your deployments or services?

83
00:04:56,710 --> 00:04:58,200
How do you deal with that?

84
00:04:58,200 --> 00:04:58,510
Well,

85
00:04:58,510 --> 00:05:01,910
there's a couple ways. Kubernetes allows you to edit

86
00:05:01,910 --> 00:05:06,050
and update your objects, however, since Kubernetes is declarative,

87
00:05:06,050 --> 00:05:10,550
sometimes it's easier just to delete the objects and recreate them after you

88
00:05:10,550 --> 00:05:15,660
edit your yaml. The kubectl delete command enables you to roll back or undo the

89
00:05:15,660 --> 00:05:19,640
results of previous kubectl apply or create commands.

90
00:05:19,640 --> 00:05:24,810
To use kubectl delete, simply supply the ‑f parameter pointed to the yaml

91
00:05:24,810 --> 00:05:30,020
file that you used to originally create your objects, and execute that,

92
00:05:30,020 --> 00:05:33,740
and the objects you want will be rolled back.

93
00:05:33,740 --> 00:05:36,430
Another problem that you may run into is when you try to

94
00:05:36,430 --> 00:05:39,610
use the wrong password when you attempt to start or

95
00:05:39,610 --> 00:05:41,750
connect to your SQL Server pods.

96
00:05:41,750 --> 00:05:43,760
If you attempt to use the wrong password,

97
00:05:43,760 --> 00:05:47,330
you're not going to be able to connect to those SQL Server instances.

98
00:05:47,330 --> 00:05:51,940
Kubernetes secrets can help you obfuscate sensitive data like passwords,

99
00:05:51,940 --> 00:05:56,020
but they can also be retrieved if you think there might be a problem using the

100
00:05:56,020 --> 00:06:01,970
correct password. The kubectl get secret command can retrieve, and optionally

101
00:06:01,970 --> 00:06:06,860
decode passwords and other data stored in Kubernetes secrets, like you see

102
00:06:06,860 --> 00:06:11,130
here on this slide. Here you can see how you can get the value of the

103
00:06:11,130 --> 00:06:15,240
Kubernetes secrets named mssql‑secret.

104
00:06:15,240 --> 00:06:18,350
And by the way, as with most kubectl commands,

105
00:06:18,350 --> 00:06:23,190
if you're using namespaces, you can essentially add the ‑‑namespaces

106
00:06:23,190 --> 00:06:26,000
parameter to filter on the desired namespaces.

107
00:06:26,000 --> 00:06:29,060
I didn't show any namespace examples here because I didn't need

108
00:06:29,060 --> 00:06:37,000
them, but in production you often use them. Okay, we've covered the basics, so let's move on to a demo.

