1
00:00:00,220 --> 00:00:02,650
So why containers for SQL Server?

2
00:00:02,650 --> 00:00:03,510
Well, first,

3
00:00:03,510 --> 00:00:07,000
it's great for development because you can deploy a new SQL

4
00:00:07,000 --> 00:00:09,480
Server instance in just a few seconds.

5
00:00:09,480 --> 00:00:12,120
If you're attempting to install a new SQL Server

6
00:00:12,120 --> 00:00:15,270
instance on a physical system or a VM,

7
00:00:15,270 --> 00:00:18,430
then restore a bunch of databases, that is a lengthy

8
00:00:18,430 --> 00:00:21,140
process that could potentially take hours.

9
00:00:21,140 --> 00:00:22,170
With a container,

10
00:00:22,170 --> 00:00:25,700
you can spin up a new SQL Server instance along with some

11
00:00:25,700 --> 00:00:29,870
ready‑to‑go databases in just a few seconds, so there's no need

12
00:00:29,870 --> 00:00:32,340
for lengthy SQL Server installations.

13
00:00:32,340 --> 00:00:35,910
This is great for dev and test kind of environments.

14
00:00:35,910 --> 00:00:39,410
Containers also allow a good deal of portability, because

15
00:00:39,410 --> 00:00:42,940
containers run on both Linux and Windows systems, so you can

16
00:00:42,940 --> 00:00:45,840
deploy containers to different operating systems.

17
00:00:45,840 --> 00:00:49,320
Also, today many businesses are looking to move towards

18
00:00:49,320 --> 00:00:52,080
DevOps in a continuous integration,

19
00:00:52,080 --> 00:00:54,940
continuous delivery kind of development model.

20
00:00:54,940 --> 00:00:55,870
And with that,

21
00:00:55,870 --> 00:01:00,160
you get a new microservice style of applications. Running SQL

22
00:01:00,160 --> 00:01:03,290
Server in containers can be a better way to integrate your

23
00:01:03,290 --> 00:01:07,940
databases into those CI/CD development models.

24
00:01:07,940 --> 00:01:11,740
When you look at the architecture that's used by containers at the bottom level,

25
00:01:11,740 --> 00:01:13,880
you have your host server hardware.

26
00:01:13,880 --> 00:01:17,490
This could be a physical machine or it could be a virtual machine.

27
00:01:17,490 --> 00:01:20,040
Containers can run on both.

28
00:01:20,040 --> 00:01:22,380
Then you have your host operating system.

29
00:01:22,380 --> 00:01:25,010
This could be Windows, it could be Linux, it could

30
00:01:25,010 --> 00:01:29,720
even be the macOS. Then above that, you have your container support.

31
00:01:29,720 --> 00:01:32,040
This is where the Docker Engine runs,

32
00:01:32,040 --> 00:01:36,030
and then each container runs on that Docker Engine.

33
00:01:36,030 --> 00:01:39,010
Each container will typically run an app,

34
00:01:39,010 --> 00:01:43,410
and it will share a set of binaries, and those binaries will all share

35
00:01:43,410 --> 00:01:47,980
the same host operating system kernel, so the same host kernel serves all

36
00:01:47,980 --> 00:01:49,740
the different containers that are running.

37
00:01:49,740 --> 00:01:53,440
This makes containers much more lightweight than virtual machines,

38
00:01:53,440 --> 00:01:55,820
which have to virtualize the entire stack,

39
00:01:55,820 --> 00:01:57,730
including the system hardware.

40
00:01:57,730 --> 00:02:00,650
Then on top of those binaries in each container,

41
00:02:00,650 --> 00:02:02,710
that's where your applications run.

42
00:02:02,710 --> 00:02:06,080
Each of these containers is basically a sandbox,

43
00:02:06,080 --> 00:02:09,210
and they do not actually interact with one another,

44
00:02:09,210 --> 00:02:12,240
they all run independently. However,

45
00:02:12,240 --> 00:02:16,690
you can set up shared storage for the different containers,

46
00:02:16,690 --> 00:02:19,390
and I'll talk about that in a little bit.

47
00:02:19,390 --> 00:02:22,030
As you get ready to run Docker, there are a few

48
00:02:22,030 --> 00:02:23,870
prerequisites that you have to do.

49
00:02:23,870 --> 00:02:24,560
Essentially,

50
00:02:24,560 --> 00:02:28,300
you need to install Docker container support on the platform

51
00:02:28,300 --> 00:02:30,340
where you intend to run the containers.

52
00:02:30,340 --> 00:02:34,380
While the specific steps vary depending on the Linux distribution that you

53
00:02:34,380 --> 00:02:38,990
will use, if you're running Ubuntu 18.04 and higher,

54
00:02:38,990 --> 00:02:42,600
you basically need to run the commands that you see here listed on the right

55
00:02:42,600 --> 00:02:46,440
side of the panel to download and install Docker support.

56
00:02:46,440 --> 00:02:47,020
First,

57
00:02:47,020 --> 00:02:52,180
you use the sudo or a SuperUser DO command, and use that with apt‑get

58
00:02:52,180 --> 00:02:55,830
install and the curl command to download the Docker support.

59
00:02:55,830 --> 00:03:00,530
Then you can run the sudo apt‑add‑repository command to

60
00:03:00,530 --> 00:03:03,620
update the Linux application repositories.

61
00:03:03,620 --> 00:03:07,140
Then you can run the sudo apt update command, and finally,

62
00:03:07,140 --> 00:03:10,240
the sudo apt install docker‑ce command,

63
00:03:10,240 --> 00:03:13,190
which will install the Docker Community Edition.

64
00:03:13,190 --> 00:03:17,040
And, by the way, the Docker Community Edition is completely free.

65
00:03:17,040 --> 00:03:20,570
You can see the Windows install on the right‑hand side of the screen.

66
00:03:20,570 --> 00:03:25,040
For Windows, you can install Docker using either the Server Manager for

67
00:03:25,040 --> 00:03:29,940
Windows Server or through PowerShell. With PowerShell, you first run the

68
00:03:29,940 --> 00:03:35,690
Install‑Module command using the name of DockerMsftProvider or

69
00:03:35,690 --> 00:03:41,820
DockerMsftProvider, then specify the PowerShell repository, then run the

70
00:03:41,820 --> 00:03:49,000
Install‑Package command, and then finally, restart the computer and Docker will be installed on your Windows system.

