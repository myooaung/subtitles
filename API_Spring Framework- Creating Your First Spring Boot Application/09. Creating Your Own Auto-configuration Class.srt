1
00:00:01,200 --> 00:00:05,954
Creating a Spring Boot starter configuration class of your own is not that hard.

2
00:00:05,954 --> 00:00:08,318
If you're a company that has lots of projects,

3
00:00:08,318 --> 00:00:12,448
you'll probably want to have some core JAR files that provides utility or

4
00:00:12,448 --> 00:00:15,897
helper classes that all of your other applications can use.

5
00:00:15,897 --> 00:00:19,816
Auto-configuration classes are useful in this scenario.

6
00:00:19,816 --> 00:00:21,818
These classes work very similar to the Java

7
00:00:21,818 --> 00:00:24,311
configuration class that we just built.

8
00:00:24,311 --> 00:00:27,774
You'll need to create a basic class and annotate it

9
00:00:27,774 --> 00:00:29,996
with the @Configuration annotation.

10
00:00:29,996 --> 00:00:30,243
Next,

11
00:00:30,243 --> 00:00:32,579
you can add methods that define beans and functionality

12
00:00:32,579 --> 00:00:35,049
that you want to provide for your starter.

13
00:00:35,049 --> 00:00:35,366
Last,

14
00:00:35,366 --> 00:00:39,979
you'll need to add a declaration in the spring.factories file

15
00:00:39,979 --> 00:00:42,818
that you're registering in auto configuration.

16
00:00:42,818 --> 00:00:46,993
Spring Boot will inspect JAR files on your class path for this

17
00:00:46,993 --> 00:00:51,472
spring.factories file and then bootstrap your auto-configuration files.

18
00:00:51,472 --> 00:00:57,552
The spring.factories file typically lives in resources/META-INF.

19
00:00:57,552 --> 00:00:57,821
Finally,

20
00:00:57,821 --> 00:01:00,811
there are a host of annotations that Spring Boot provides that allow

21
00:01:00,811 --> 00:01:04,534
you to specify conditions on your auto configuration.

22
00:01:04,534 --> 00:01:05,284
For example,

23
00:01:05,284 --> 00:01:08,070
if you're building some auto configuration that is

24
00:01:08,070 --> 00:01:13,003
dependent on a Postgres JDBC driver, you could specify that at the class level,

25
00:01:13,003 --> 00:01:15,891
it's conditional on the driver being present.

26
00:01:15,891 --> 00:01:19,462
If it's there, your auto-configuration will magically wire stuff up,

27
00:01:19,462 --> 00:01:24,491
and if it's not there, your configuration will simply do nothing.

28
00:01:24,491 --> 00:01:28,758
This is one reason why starters are so powerful and do so much simply by

29
00:01:28,758 --> 00:01:32,937
including the dependency on your project in the class path.

30
00:01:32,937 --> 00:01:36,454
Clever teams and developers will already have the gears turning in

31
00:01:36,454 --> 00:01:44,000
their heads on how they can utilize this concept in their projects and organizations for their common functionality.

