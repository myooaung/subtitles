WEBVTT
1
00:00:01.513 --> 00:00:04.039
Switching out the default embedded container in a Spring

2
00:00:04.039 --> 00:00:05.637
Boot app really isn't that difficult.

3
00:00:05.637 --> 00:00:10.361
I'm going to jump into the pom.xml file to begin this.

4
00:00:10.361 --> 00:00:15.030
I'm going to scroll down until I find the spring-boot-starter-web dependency.

5
00:00:15.030 --> 00:00:19.412
This is the dependency that brings in the Tomcat embedded container.

6
00:00:19.412 --> 00:00:22.732
So the first thing that needs to happen is we need to switch out the

7
00:00:22.732 --> 00:00:26.408
container by excluding Tomcat from this dependency.

8
00:00:26.408 --> 00:00:30.330
And in Maven, you can do that by adding this to the dependency declaration.

9
00:00:30.330 --> 00:00:33.868
Simply add an exclusions tag, and inside of there,

10
00:00:33.868 --> 00:00:37.634
you can exclude the spring-boot-starter-tomcat artifact.

11
00:00:37.634 --> 00:00:41.126
This will no longer load in this dependency when you

12
00:00:41.126 --> 00:00:42.821
include the spring-boot-starter-web.

13
00:00:42.821 --> 00:00:45.762
Next, we need to bring in the new container dependency.

14
00:00:45.762 --> 00:00:49.216
Spring provides starters for Jetty and Undertow.

15
00:00:49.216 --> 00:00:55.534
I'm going to use Jetty, so all I need to do is add the following dependency.

16
00:00:55.534 --> 00:00:58.204
This dependency will be a sibling of the

17
00:00:58.204 --> 00:01:00.931
spring-boot-starter-data-jpa or the spring-boot-starter-web,

18
00:01:00.931 --> 00:01:06.415
and it's simply including the spring-boot-starter-jetty.

19
00:01:06.415 --> 00:01:08.210
I'm going to go ahead and save the POM file.

20
00:01:08.210 --> 00:01:09.763
And since we've modified the POM,

21
00:01:09.763 --> 00:01:13.004
IntelliJ is asking if we want to import and sync the changes,

22
00:01:13.004 --> 00:01:18.212
which we do, so I'm going to go ahead and click on that.

23
00:01:18.212 --> 00:01:20.566
And at that point, we've switched the containers.

24
00:01:20.566 --> 00:01:24.206
So all we need to do is start up the application and test it out.

25
00:01:24.206 --> 00:01:27.742
So I can go ahead and just start the application up here,

26
00:01:27.742 --> 00:01:31.864
clicking on the Play button.

27
00:01:31.864 --> 00:01:35.544
Now if we open up the server log and take a look at this after it's started,

28
00:01:35.544 --> 00:01:39.978
you'll notice that the container is now stating that it's running with Jetty,

29
00:01:39.978 --> 00:01:44.964
and we're started on port 5000, which is the last port we configured.

30
00:01:44.964 --> 00:01:49.490
Even though Spring Boot provides configuration and opinionated configuration,

31
00:01:49.490 --> 00:01:52.109
it makes it really easy to get out of the way and

32
00:01:52.109 --> 00:01:54.093
to customize it for your needs.

33
00:01:54.093 --> 00:01:57.902
Most apps, however, will be fine using the default Tomcat container.

34
00:01:57.902 --> 00:01:59.795
If, for some reason, you do need to change it,

35
00:01:59.795 --> 00:02:02.147
Spring Boot will allow you to do that.

36
00:02:02.147 --> 00:02:02.335
Next,

37
00:02:02.335 --> 00:02:10.000
let's check out what it takes to get your application packaged so that you can run it as a standalone app outside of the IDE.

