WEBVTT
1
00:00:00.873 --> 00:00:05.806
So far, we've only modified existing Spring Boot and starter default properties.

2
00:00:05.806 --> 00:00:06.768
In this particular demo,

3
00:00:06.768 --> 00:00:11.442
we're going to add a custom property called app.version and create a

4
00:00:11.442 --> 00:00:15.282
controller to display the app version when called.

5
00:00:15.282 --> 00:00:16.864
I'm just going to jump back to the

6
00:00:16.864 --> 00:00:19.554
application.properties file and add that in there,

7
00:00:19.554 --> 00:00:26.497
and I'll create a new property called app.version and set it to 1.0 .0.

8
00:00:26.497 --> 00:00:31.058
This is a completely custom property that I want to use in my application,

9
00:00:31.058 --> 00:00:35.182
and it has no correlation to anything that Spring Boot provides.

10
00:00:35.182 --> 00:00:37.990
This custom property represents the version of our application,

11
00:00:37.990 --> 00:00:39.212
and every release,

12
00:00:39.212 --> 00:00:41.941
we could bump the version just so that you know which version

13
00:00:41.941 --> 00:00:44.701
of code is running when you access the API.

14
00:00:44.701 --> 00:00:46.618
Adding the property is not enough.

15
00:00:46.618 --> 00:00:50.343
We actually need to create a controller to actually spit out the

16
00:00:50.343 --> 00:00:54.128
property when you call the home of your application.

17
00:00:54.128 --> 00:00:57.017
So I'll go jump back to the Java source code,

18
00:00:57.017 --> 00:00:59.613
and I'm going to find the controllers package,

19
00:00:59.613 --> 00:01:03.225
and let's create a new controller called the HomeController.

20
00:01:03.225 --> 00:01:08.402
Do that by calling a new Java class, and I'll call that HomeController.

21
00:01:08.402 --> 00:01:10.097
This is like any other controller.

22
00:01:10.097 --> 00:01:13.808
We need to annotate is as a REST controller and import that,

23
00:01:13.808 --> 00:01:18.469
and we can create a root or default handler for this

24
00:01:18.469 --> 00:01:20.242
by adding the following methods.

25
00:01:20.242 --> 00:01:24.209
We'll make it a GET HTTP verb method.

26
00:01:24.209 --> 00:01:32.693
We'll have that return a Map type, which is part of the java.util collections,

27
00:01:32.693 --> 00:01:38.426
and it will service the root or home section of your application.

28
00:01:38.426 --> 00:01:42.347
Since Jackson is our marshaler for objects to JSON,

29
00:01:42.347 --> 00:01:46.037
it'll take the map and its key-value pairs and just print them

30
00:01:46.037 --> 00:01:50.425
back out to the response as a JSON payload.

31
00:01:50.425 --> 00:01:54.067
So before we implement the method body, now comes the cool part.

32
00:01:54.067 --> 00:01:57.086
We can inject the app version that we just created into the

33
00:01:57.086 --> 00:01:59.510
controller by doing something like this.

34
00:01:59.510 --> 00:02:01.819
I can use the @Value annotation,

35
00:02:01.819 --> 00:02:05.106
and you'll notice that I have a dollar sign and curly brackets,

36
00:02:05.106 --> 00:02:07.328
and I've specified my app.version.

37
00:02:07.328 --> 00:02:11.573
This custom notation tells Spring Boot and Spring to look in the properties

38
00:02:11.573 --> 00:02:16.939
section of the app and find that and inject the value into the private

39
00:02:16.939 --> 00:02:19.933
String app.version attribute that I've created.

40
00:02:19.933 --> 00:02:24.337
Now all I need to do is set that in a map and return it in my method.

41
00:02:24.337 --> 00:02:26.612
I can do that by instantiating a new HashMap,

42
00:02:26.612 --> 00:02:31.724
setting it to the Map interface handle, I can then do a map.put,

43
00:02:31.724 --> 00:02:35.817
store the app-version and the version from the properties

44
00:02:35.817 --> 00:02:39.121
file into that value of the key-value pair,

45
00:02:39.121 --> 00:02:41.215
and then finally, return the map,

46
00:02:41.215 --> 00:02:45.015
and Jackson will auto-marshal that into JSON for me.

47
00:02:45.015 --> 00:02:46.030
So now to test it out.

48
00:02:46.030 --> 00:02:52.717
I'm going to make sure and make sure everything saved and restart the server.

49
00:02:52.717 --> 00:02:55.313
Once that's up, I can jump back to Postman,

50
00:02:55.313 --> 00:03:01.004
and I can adjust my URL call to simply go to the root or home section.

51
00:03:01.004 --> 00:03:03.372
Again, we set that up as a GET verb,

52
00:03:03.372 --> 00:03:06.204
so we'll want to make sure we're using GET in the URL call,

53
00:03:06.204 --> 00:03:09.477
and we'll go ahead and send that to the server.

54
00:03:09.477 --> 00:03:15.542
And you'll notice, we now have an app-version status page for our application.

55
00:03:15.542 --> 00:03:17.810
It's returning 1.0 .0.

56
00:03:17.810 --> 00:03:21.132
Hopefully this gives you an idea of how easy it is to set up your

57
00:03:21.132 --> 00:03:24.387
own custom application properties and use them anywhere in your

58
00:03:24.387 --> 00:03:26.446
code that is Spring context aware.

59
00:03:26.446 --> 00:03:29.368
Simply inject it and use it.

60
00:03:29.368 --> 00:03:29.631
Next,

61
00:03:29.631 --> 00:03:39.000
we're going to look at configuration outside of property files using the 100% pure Java code to create configuration.

