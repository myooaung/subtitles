WEBVTT
1
00:00:01.676 --> 00:00:03.803
There are two ways that you can create a basic standalone JAR

2
00:00:03.803 --> 00:00:06.708
file that can be used to run your application.

3
00:00:06.708 --> 00:00:10.108
The first is to utilize Maven to create JAR files that you

4
00:00:10.108 --> 00:00:14.461
can use to run with the Java command, and here's that'll work.

5
00:00:14.461 --> 00:00:15.452
Inside of IntelliJ,

6
00:00:15.452 --> 00:00:19.262
we can just execute a Maven command and click on the Maven

7
00:00:19.262 --> 00:00:23.575
pop-out in the right-hand corner here and go to this small

8
00:00:23.575 --> 00:00:25.799
lowercase m to execute a Maven goal.

9
00:00:25.799 --> 00:00:32.818
The Maven goal that we want to run is the mvn package goal.

10
00:00:32.818 --> 00:00:34.668
If you inspect the output from running that command,

11
00:00:34.668 --> 00:00:36.770
you'll notice that it compiles, runs your test,

12
00:00:36.770 --> 00:00:39.479
and then packages your app into a JAR file.

13
00:00:39.479 --> 00:00:43.032
Maven will place your artifact or your JAR file inside of this

14
00:00:43.032 --> 00:00:45.942
target folder that's part of your application.

15
00:00:45.942 --> 00:00:47.054
And if you open this up,

16
00:00:47.054 --> 00:00:51.238
you can see that there is a artifact called

17
00:00:51.238 --> 00:00:54.681
conference-demo- 0.0 .1 - SNAPSHOT.jar,

18
00:00:54.681 --> 00:00:57.952
and that is the JAR file that contains your entire application.

19
00:00:57.952 --> 00:01:02.347
To run the application with the Java command, we need to do a couple of things.

20
00:01:02.347 --> 00:01:05.453
We first need to make sure that our application is

21
00:01:05.453 --> 00:01:09.189
not running inside of the IDE, so I'm going to shut that down,

22
00:01:09.189 --> 00:01:13.049
and then I'm going to jump over to a terminal.

23
00:01:13.049 --> 00:01:17.019
IntelliJ provides a terminal if you want to just use that.

24
00:01:17.019 --> 00:01:18.132
Once the terminal is open,

25
00:01:18.132 --> 00:01:23.120
we simply just need to navigate into the target folder,

26
00:01:23.120 --> 00:01:26.172
and we can see that we have our JAR file in here.

27
00:01:26.172 --> 00:01:29.431
To run the JAR file, you simply need to execute the following command,

28
00:01:29.431 --> 00:01:36.437
java -jar, and then supply the JAR file name.

29
00:01:36.437 --> 00:01:37.174
When you run this,

30
00:01:37.174 --> 00:01:39.397
this will look exactly like the output that you see in

31
00:01:39.397 --> 00:01:43.902
the IntelliJ build or run server logs, but here,

32
00:01:43.902 --> 00:01:45.945
we're running it from the command line.

33
00:01:45.945 --> 00:01:50.098
You can see that it started with the Jetty server on port 5000.

34
00:01:50.098 --> 00:01:52.711
So take a moment to think about what has happened here.

35
00:01:52.711 --> 00:01:57.069
You can now run your app anywhere that you have Java installed.

36
00:01:57.069 --> 00:02:00.667
This could be a server, or the cloud, or just simply, your laptop.

37
00:02:00.667 --> 00:02:03.236
I'll go ahead and Ctrl+C this.

38
00:02:03.236 --> 00:02:05.727
We'll jump back to the application now.

39
00:02:05.727 --> 00:02:08.161
The second way that you can create your JAR file to run your app

40
00:02:08.161 --> 00:02:11.443
is to create a standalone executable JAR file.

41
00:02:11.443 --> 00:02:13.893
And in order to do this, we need to modify Maven slightly,

42
00:02:13.893 --> 00:02:18.656
so I'm going to jump back into the pom.xml file.

43
00:02:18.656 --> 00:02:22.836
In the POM file, find the Spring Boot plugin section at the bottom,

44
00:02:22.836 --> 00:02:28.835
which is part of the build area, and we're going to add the following to it.

45
00:02:28.835 --> 00:02:33.603
We're going to add a configuration tag and specify as executable is true.

46
00:02:33.603 --> 00:02:35.087
We'll save the file.

47
00:02:35.087 --> 00:02:36.867
IntelliJ is wanting us to import the changes,

48
00:02:36.867 --> 00:02:39.661
which we want to do, so we'll click on that.

49
00:02:39.661 --> 00:02:40.637
Once that's done synching,

50
00:02:40.637 --> 00:02:43.454
we'll want to go ahead and run the Maven package again.

51
00:02:43.454 --> 00:02:52.325
So we'll go back to the Maven pop-out, click on the m, and run mvn package.

52
00:02:52.325 --> 00:02:55.772
Once that's built successfully, let's jump back to the terminal.

53
00:02:55.772 --> 00:02:57.703
I'm going to go ahead and clear out the old output from

54
00:02:57.703 --> 00:03:00.192
the previous run so we can start fresh.

55
00:03:00.192 --> 00:03:01.517
And this time,

56
00:03:01.517 --> 00:03:06.047
you'll notice that we're not going to start the JAR file using the java -jar.

57
00:03:06.047 --> 00:03:08.939
It's now a standalone executable JAR file.

58
00:03:08.939 --> 00:03:14.962
So on a UNIX or a macOS system, we can execute that by doing the.

59
00:03:14.962 --> 00:03:19.418
/ and giving it the JAR file name.

60
00:03:19.418 --> 00:03:20.052
Now when I run it,

61
00:03:20.052 --> 00:03:22.516
you'll see that it's running the JAR file standalone

62
00:03:22.516 --> 00:03:25.737
without even having to execute Java.

63
00:03:25.737 --> 00:03:26.478
And unfortunately,

64
00:03:26.478 --> 00:03:31.186
this particular command only works with UNIX or Linux-based systems.

65
00:03:31.186 --> 00:03:31.946
So if you're on Windows,

66
00:03:31.946 --> 00:03:34.676
this obviously isn't going to work the same because it's not

67
00:03:34.676 --> 00:03:36.495
going to create an EXE file to execute,

68
00:03:36.495 --> 00:03:40.473
but you still have the original way of running with a java

69
00:03:40.473 --> 00:03:43.796
-jar command on the original JAR file.

70
00:03:43.796 --> 00:03:47.221
And that's all it takes to create a Spring Boot deployable app

71
00:03:47.221 --> 00:03:50.037
just by running it from the command line.

72
00:03:50.037 --> 00:03:53.051
So hopefully you can start to see how powerful this is because you

73
00:03:53.051 --> 00:03:55.857
can now run this anywhere that you can run Java,

74
00:03:55.857 --> 00:03:58.601
which Java runs just about anywhere.

75
00:03:58.601 --> 00:03:59.202
So coming up next,

76
00:03:59.202 --> 00:04:04.000
let's look at some of the cloud platforms that we could possibly run our application in.

