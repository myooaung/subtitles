WEBVTT
1
00:00:00.840 --> 00:00:01.690
Scopes.

2
00:00:01.690 --> 00:00:05.830
A lot of people use Maven without ever taking advantage of scopes.

3
00:00:05.830 --> 00:00:09.280
You can get along fine with that if you just want to use it to download

4
00:00:09.280 --> 00:00:12.840
dependencies and transitive dependencies and it's great.

5
00:00:12.840 --> 00:00:15.720
There are some scopes though that are particularly worth

6
00:00:15.720 --> 00:00:17.650
mentioning that I want to point out to you.

7
00:00:17.650 --> 00:00:20.960
I'm going to run through what these six scopes available for your

8
00:00:20.960 --> 00:00:25.040
dependencies are and highlight a couple of key ones for you.

9
00:00:25.040 --> 00:00:27.680
Compile is the default scope. You don't have to

10
00:00:27.680 --> 00:00:31.240
explicitly list it, it's implicitly implied.

11
00:00:31.240 --> 00:00:33.550
In the previous example I had it on there.

12
00:00:33.550 --> 00:00:36.350
If I had omitted it, it'll compile just fine.

13
00:00:36.350 --> 00:00:38.640
That's what the default is.

14
00:00:38.640 --> 00:00:39.510
It's available.

15
00:00:39.510 --> 00:00:44.510
It means all of my resources are available everywhere inside of my application.

16
00:00:44.510 --> 00:00:47.240
The next one that's probably the main one that you should know

17
00:00:47.240 --> 00:00:51.020
is provided. Provided is a lot like compile.

18
00:00:51.020 --> 00:00:53.890
It means that the artifact is going to be available

19
00:00:53.890 --> 00:00:56.440
throughout the entire build cycle.

20
00:00:56.440 --> 00:00:59.570
In one of the previous modules we talked about phases,

21
00:00:59.570 --> 00:01:01.230
the different phases that we have. You know,

22
00:01:01.230 --> 00:01:05.460
test and when we go to package, and we have everything that all of our

23
00:01:05.460 --> 00:01:08.140
artifact is going to be available throughout all of the code,

24
00:01:08.140 --> 00:01:10.690
but that's not going to package it up at the end.

25
00:01:10.690 --> 00:01:16.110
A good example of this is something like the Servlet API or the XML APIs.

26
00:01:16.110 --> 00:01:18.070
It's available in our phases,

27
00:01:18.070 --> 00:01:21.000
but not included in the final artifact. And we don't want to

28
00:01:21.000 --> 00:01:23.990
include it because it will be provided by the container that

29
00:01:23.990 --> 00:01:26.340
we are deploying our app to.

30
00:01:26.340 --> 00:01:28.820
Another interesting one is runtime.

31
00:01:28.820 --> 00:01:33.090
Runtime is not needed for compilation, but it's needed for execution.

32
00:01:33.090 --> 00:01:37.570
So dynamically loaded libraries are things like JDBC jars, items that

33
00:01:37.570 --> 00:01:41.550
we need a driver that's dynamically loaded at runtime. Say we're using

34
00:01:41.550 --> 00:01:46.860
JDBC to connect to a database. We're going to do a Class.forName or a

35
00:01:46.860 --> 00:01:49.900
DriverManager load resource, something like that,

36
00:01:49.900 --> 00:01:52.130
something that's dynamically loaded.

37
00:01:52.130 --> 00:01:54.560
We need that bundled with our application.

38
00:01:54.560 --> 00:01:57.860
It's actually kind of the opposite of provided. You don't

39
00:01:57.860 --> 00:02:01.040
need it for testing, you don't even need it for compiling,

40
00:02:01.040 --> 00:02:02.260
you don't need to package it,

41
00:02:02.260 --> 00:02:05.580
but you need it for your application to run. Now another

42
00:02:05.580 --> 00:02:08.340
interesting scope is the test scope.

43
00:02:08.340 --> 00:02:12.920
Testing is only available for the test compilation and execution phase.

44
00:02:12.920 --> 00:02:14.890
It does nothing for compiling.

45
00:02:14.890 --> 00:02:16.670
It does nothing for packaging.

46
00:02:16.670 --> 00:02:20.040
It's also not included in our final artifact.

47
00:02:20.040 --> 00:02:24.740
A good example of this would be the JUnit or TestNG jars.

48
00:02:24.740 --> 00:02:29.010
Now system, I'm going to point out to you to never use.

49
00:02:29.010 --> 00:02:31.840
System is very brittle and actually breaks the whole

50
00:02:31.840 --> 00:02:33.780
reason of why we want to use Maven.

51
00:02:33.780 --> 00:02:36.400
I have seen people use this once or twice before

52
00:02:36.400 --> 00:02:38.740
and it's always lead to problems.

53
00:02:38.740 --> 00:02:43.570
Basically, you're going to hard code a path to a jar on your file system.

54
00:02:43.570 --> 00:02:46.410
This is why we're using Maven. Don't use system.

55
00:02:46.410 --> 00:02:49.500
Why do they have it, you might ask, to just simply tie

56
00:02:49.500 --> 00:02:52.540
existing projects into a Maven build.

57
00:02:52.540 --> 00:02:54.900
The last one is import.

58
00:02:54.900 --> 00:02:56.290
This is an advanced topic.

59
00:02:56.290 --> 00:02:57.820
It deals with dependency management,

60
00:02:57.820 --> 00:03:00.640
which is something we're not going to cover in this course.

61
00:03:00.640 --> 00:03:09.000
Dependency management deals with sharing resources across multiple POMs, and it's kind of an advanced topic that we're just not going to cover here.

