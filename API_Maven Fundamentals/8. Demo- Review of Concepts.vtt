WEBVTT
1
00:00:00.640 --> 00:00:04.390
So while developing this, I had an error message.

2
00:00:04.390 --> 00:00:06.620
It was actually a warning telling me that there wasn't a

3
00:00:06.620 --> 00:00:09.050
schema defined inside of our application.

4
00:00:09.050 --> 00:00:13.330
So I went ahead and copied Maven's project schema

5
00:00:13.330 --> 00:00:15.780
namespace up to the top of our project.

6
00:00:15.780 --> 00:00:21.140
So if you look at the screen now, lines 1 through 4,

7
00:00:21.140 --> 00:00:23.950
I've added just so it doesn't keep complaining that there's

8
00:00:23.950 --> 00:00:26.340
not a schema defined inside of our app.

9
00:00:26.340 --> 00:00:27.980
It runs fine without it,

10
00:00:27.980 --> 00:00:31.010
but you should have this so that the context‑sensitive help

11
00:00:31.010 --> 00:00:33.540
works better for whichever tool you're using.

12
00:00:33.540 --> 00:00:37.720
Let's go ahead and dive into how we add some

13
00:00:37.720 --> 00:00:39.530
dependencies inside of our application.

14
00:00:39.530 --> 00:00:45.960
We already added the dependency for org.apache.commons commons‑lang3

15
00:00:45.960 --> 00:00:48.940
when we were showing some of the other examples before.

16
00:00:48.940 --> 00:00:51.860
But I want to show you the Dependencies tab down

17
00:00:51.860 --> 00:00:54.040
here at the bottom of my screen.

18
00:00:54.040 --> 00:00:55.750
If you're inside of Spring STS,

19
00:00:55.750 --> 00:01:00.420
it'll show you what you have for dependencies inside of your application.

20
00:01:00.420 --> 00:01:05.040
Now if we switch back to the pom.xml tab and I add another dependency in here,

21
00:01:05.040 --> 00:01:08.140
you're going to see the Dependencies tab automatically get updated.

22
00:01:08.140 --> 00:01:12.340
So let's start by adding in here another dependency.

23
00:01:12.340 --> 00:01:15.820
And if you did not add the commons‑lang dependency before,

24
00:01:15.820 --> 00:01:19.740
go ahead and add it now. Make sure you have a dependencies tag

25
00:01:19.740 --> 00:01:24.230
like on line 12 and 18 and then a nested dependency element

26
00:01:24.230 --> 00:01:28.340
inside of there like on line 13 and 17.

27
00:01:28.340 --> 00:01:31.680
I'm going to give myself a little extra space down below here and

28
00:01:31.680 --> 00:01:36.340
add another dependency element inside of here.

29
00:01:36.340 --> 00:01:45.050
And I want to add a <groupId> of org.junit.jupiter.

30
00:01:45.050 --> 00:01:54.180
This is the new API for JUnit 5 to run unit tests inside of your application.

31
00:01:54.180 --> 00:02:01.230
So I've got a groupId, now let's add an artifactId, and we

32
00:02:01.230 --> 00:02:08.740
want to put in here junit‑jupiter‑engine.

33
00:02:08.740 --> 00:02:12.640
And I wanted to show this example for two reasons.

34
00:02:12.640 --> 00:02:21.040
First, this is a POM, and it will download the other two dependencies it needs,

35
00:02:21.040 --> 00:02:24.000
and we want to show scoping as well.

36
00:02:24.000 --> 00:02:32.040
So for our version, let's do 5.0.2, and then for our scope,

37
00:02:32.040 --> 00:02:36.440
let's put in test and save this.

38
00:02:36.440 --> 00:02:40.140
Now, it'll build your workspace and we can switch over to

39
00:02:40.140 --> 00:02:43.910
the Dependencies tab, and you see inside of here, we have

40
00:02:43.910 --> 00:02:49.240
the junit‑jupiter‑engine, but if I switch to Dependency Hierarchy,

41
00:02:49.240 --> 00:02:53.450
you'll see it has started to pull in transitive dependencies.

42
00:02:53.450 --> 00:02:58.140
So commons‑lang didn't have any transitive dependencies, but the

43
00:02:58.140 --> 00:03:05.350
junit‑jupiter‑engine POM file pulls in version 1.0.2 of the

44
00:03:05.350 --> 00:03:11.340
engine and 5.0.2 of the jupiter‑api.

45
00:03:11.340 --> 00:03:14.970
You'll also see that it has started to resolve some conflicts.

46
00:03:14.970 --> 00:03:17.930
So with junit‑platform‑commons,

47
00:03:17.930 --> 00:03:23.760
it omitted 1.0.2 for a conflict, so it chose which version

48
00:03:23.760 --> 00:03:28.410
it needed to based off of what it needed to rev up to to

49
00:03:28.410 --> 00:03:30.640
work with other libraries.

50
00:03:30.640 --> 00:03:37.080
Let's switch back to the POM file, and let's add one more dependency here.

51
00:03:37.080 --> 00:03:44.340
We want to add in the hibernate jar, and we want to do another

52
00:03:44.340 --> 00:03:54.970
dependency. And the <groupId> for this is org.hibernate, and the

53
00:03:54.970 --> 00:04:02.740
<artifactId> is going to be hibernate‑core.

54
00:04:02.740 --> 00:04:15.340
And then we just want to specify the version, and the version is 5.4.1.Final.

55
00:04:15.340 --> 00:04:19.310
I want to point out here that, in my opinion,

56
00:04:19.310 --> 00:04:24.800
line 29 violates a couple of industry‑common standards.

57
00:04:24.800 --> 00:04:27.240
They're not true industry standards,

58
00:04:27.240 --> 00:04:35.020
but the naming convention of the release is 5.4.1.Final.

59
00:04:35.020 --> 00:04:37.090
I personally think it should be a ‑Final,

60
00:04:37.090 --> 00:04:39.950
and I actually think that Final should be all uppercase.

61
00:04:39.950 --> 00:04:44.040
I actually prefer the word release, but this is what Hibernate chose.

62
00:04:44.040 --> 00:04:45.220
So, as I mentioned before,

63
00:04:45.220 --> 00:04:51.540
the version can be named specifically whatever that developer wants to call it.

64
00:04:51.540 --> 00:04:54.910
But if we go back to our Dependency Hierarchy tab, now look

65
00:04:54.910 --> 00:04:56.510
at all the dependencies it's pulled in.

66
00:04:56.510 --> 00:04:59.860
So we have antlr, byte‑buddy, classmate.

67
00:04:59.860 --> 00:05:03.210
We have all of these other dependencies down here that are resolve

68
00:05:03.210 --> 00:05:07.480
dependencies or transitive dependencies. You can see over in our

69
00:05:07.480 --> 00:05:12.280
Dependency Hierarchy which library pulled in which jar. So

70
00:05:12.280 --> 00:05:18.620
hibernate‑commons‑annotations specifically pulled in jboss‑logging, and

71
00:05:18.620 --> 00:05:25.390
the jaxb‑api pulled in the javax.activaton‑api. Jaxb‑runtime pulled in a

72
00:05:25.390 --> 00:05:28.610
half dozen different libraries that it needed.

73
00:05:28.610 --> 00:05:32.890
So you really start to see we just asked for hibernate‑core,

74
00:05:32.890 --> 00:05:37.700
and it's going to go pull the dependencies it needs and resolve any

75
00:05:37.700 --> 00:05:43.830
compilation errors or library dependencies that it needs to to pull in the

76
00:05:43.830 --> 00:05:48.140
correct set of libraries that your application needs.

77
00:05:48.140 --> 00:05:50.110
So it's a little bit of a complex example.

78
00:05:50.110 --> 00:05:51.560
Let's look at those three again.

79
00:05:51.560 --> 00:05:56.510
We had org.apache.commons that had no transitive dependencies.

80
00:05:56.510 --> 00:05:58.060
It just pulled its own library in.

81
00:05:58.060 --> 00:06:01.440
Then we threw the junit‑jupiter‑engine POM in here,

82
00:06:01.440 --> 00:06:06.240
and it pulled down two other POMs that had those libraries it needed. Then we

83
00:06:06.240 --> 00:06:11.510
pulled in the hibernate‑core that had its own unique naming convention, but

84
00:06:11.510 --> 00:06:15.210
look at all the transitive dependencies it pulled in. That's one reason I

85
00:06:15.210 --> 00:06:20.250
really like Spring STS or Eclipse for this, is this Dependency Hierarchy

86
00:06:20.250 --> 00:06:29.000
viewer really is pretty handy for you trying to troubleshoot which jar is pulling which library in.

