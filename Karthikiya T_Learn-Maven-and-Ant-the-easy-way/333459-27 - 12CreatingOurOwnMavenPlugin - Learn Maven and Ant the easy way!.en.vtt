WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.190
in this video,

00:00:01.190 --> 00:00:04.250
I'm going to demonstrate how to create our own waving plug ins.

00:00:04.250 --> 00:00:06.070
In my entire career,

00:00:06.070 --> 00:00:08.530
I've never actually created a movin plug in.

00:00:08.530 --> 00:00:09.380
In fact,

00:00:09.380 --> 00:00:11.700
I was never any need to create one.

00:00:11.700 --> 00:00:17.370
The existing plug ins goals and faces would just suffice for any typical project.

00:00:17.370 --> 00:00:18.540
But just in case,

00:00:18.540 --> 00:00:20.460
if you would like to create your own plug in,

00:00:20.460 --> 00:00:22.840
moving offers the flexibility as well.

00:00:22.840 --> 00:00:28.010
The reason why I'm explaining that this is to make you understand how we can correlate plug

00:00:28.010 --> 00:00:28.250
ins,

00:00:28.250 --> 00:00:28.880
goals,

00:00:28.880 --> 00:00:29.620
faces,

00:00:29.620 --> 00:00:30.350
etcetera,

00:00:30.350 --> 00:00:32.660
so you will get a better picture on the same.

00:00:32.660 --> 00:00:33.860
So let's take a look.

00:00:33.860 --> 00:00:35.190
At a very simple example.

00:00:35.190 --> 00:00:37.980
You don't have to really create anything from scratch.

00:00:37.980 --> 00:00:39.520
Luckily,

00:00:39.520 --> 00:00:44.170
MoveOn has the template or archetype to create a plug in,

00:00:44.170 --> 00:00:47.190
and here it is.

00:00:47.190 --> 00:00:51.440
Melvin Archetype Plug in would help you create a 1,000,000 plug in,

00:00:51.440 --> 00:00:56.760
so you'll get a pre defined project structure that is tuned to create a 1,000,000 plug in

00:00:56.760 --> 00:00:58.600
and click next.

00:00:58.600 --> 00:01:01.170
Give all the coordinates and then you finish.

00:01:01.170 --> 00:01:03.540
There may be three additional prompts,

00:01:03.540 --> 00:01:05.260
which you need to take care off.

00:01:05.260 --> 00:01:09.320
Just accept all the prompt and then you'll get a project like this,

00:01:09.320 --> 00:01:14.660
But I would such as that you don't create a 1,000,000 plug in project using that template

00:01:14.660 --> 00:01:16.820
because I've actually done that.

00:01:16.820 --> 00:01:22.250
And I found out that the class while is actually a little overwhelming for beginners.

00:01:22.250 --> 00:01:25.200
So I've actually created another maven project.

00:01:25.200 --> 00:01:28.150
Isn't the maven quick start archetype?

00:01:28.150 --> 00:01:30.360
I mean this one.

00:01:30.360 --> 00:01:33.800
And here it is,

00:01:33.800 --> 00:01:34.950
my own plug in.

00:01:34.950 --> 00:01:40.620
I'm actually going to export this and make this available for you to import in your project

00:01:40.620 --> 00:01:40.620
.

00:01:40.620 --> 00:01:43.610
So you must be finding this in the list of files that you have downloaded.

00:01:43.610 --> 00:01:50.230
And I'm going to walk it through the steps that you need to follow to create your own plug

00:01:50.230 --> 00:01:50.480
in.

00:01:50.480 --> 00:01:54.960
It's a beautiful We have this class file with the name Abd or Java.

00:01:54.960 --> 00:02:01.960
All I have done in here is have actually introduced this particular annotation at the red

00:02:01.960 --> 00:02:02.680
Mojo.

00:02:02.680 --> 00:02:05.750
And then I'm going to provide this name para meter.

00:02:05.750 --> 00:02:08.040
Now do taking nor of this name.

00:02:08.040 --> 00:02:11.930
This is going to be the name of the goal that will be using.

00:02:11.930 --> 00:02:14.080
So whenever I use this goal,

00:02:14.080 --> 00:02:19.730
that essentially means I won't execute whatever is written in this matter with the name

00:02:19.730 --> 00:02:20.450
execute.

00:02:20.450 --> 00:02:27.200
It has to be exact same name and make sure that you extend the class with this particular

00:02:27.200 --> 00:02:27.940
class.

00:02:27.940 --> 00:02:28.950
Abstract more,

00:02:28.950 --> 00:02:29.380
Joe.

00:02:29.380 --> 00:02:35.270
And in order for these classes to be available here to introduce couple off dependence is

00:02:35.270 --> 00:02:36.250
in your project.

00:02:36.250 --> 00:02:41.380
And those are the following this too.

00:02:41.380 --> 00:02:43.180
The move unplugging ap.

00:02:43.180 --> 00:02:48.270
I will have the classes that are required for you to create Melvin plug ins.

00:02:48.270 --> 00:02:51.990
One of the class that we've used is abstract mogul,

00:02:51.990 --> 00:02:54.620
and in order to use these annotations,

00:02:54.620 --> 00:02:57.580
you have to have the following dependency.

00:02:57.580 --> 00:03:01.750
So once we had this dependence is just click on,

00:03:01.750 --> 00:03:06.150
may have an update like a big project,

00:03:06.150 --> 00:03:11.430
and then you'll and then you won't see any kindof compel two mirrors.

00:03:11.430 --> 00:03:12.370
And in here,

00:03:12.370 --> 00:03:16.170
I'm just trying to simply log a message which in this case,

00:03:16.170 --> 00:03:16.550
is Hello,

00:03:16.550 --> 00:03:17.080
world.

00:03:17.080 --> 00:03:20.270
If you're using any kind off a logging framework like,

00:03:20.270 --> 00:03:20.940
for example,

00:03:20.940 --> 00:03:21.840
off for J,

00:03:21.840 --> 00:03:24.880
then you can set the level in here like info.

00:03:24.880 --> 00:03:26.600
One error,

00:03:26.600 --> 00:03:27.350
etcetera.

00:03:27.350 --> 00:03:35.560
And since this is the information message I've said this to in for and when I try to use

00:03:35.560 --> 00:03:36.290
this plug in,

00:03:36.290 --> 00:03:37.960
isn't that goal name?

00:03:37.960 --> 00:03:41.350
I'm actually going to see this message printed on the council.

00:03:41.350 --> 00:03:49.050
So you have this class file by using the sanitation and the class name and with this method

00:03:49.050 --> 00:03:51.750
and in our pond or XML,

00:03:51.750 --> 00:03:55.840
Apart from adding this dependence is you also need to take care off,

00:03:55.840 --> 00:03:59.940
making sure that the packaging is set to may even hyphen plug in.

00:03:59.940 --> 00:04:04.940
This is not going to be a jar who are or something this has to be made in hyphen.

00:04:04.940 --> 00:04:05.430
Plug in.

00:04:05.430 --> 00:04:08.850
And it's better that you followed this naming convention,

00:04:08.850 --> 00:04:14.710
whatever the name that you want to give and then dark plug in an artifact idea is going to

00:04:14.710 --> 00:04:16.050
be whatever you wish to give.

00:04:16.050 --> 00:04:16.900
Same,

00:04:16.900 --> 00:04:22.480
as with washing number can give any washing off your choice and have also added this to

00:04:22.480 --> 00:04:24.540
para meters or properties,

00:04:24.540 --> 00:04:29.550
just as we did with other projects so that we don't get any builders.

00:04:29.550 --> 00:04:31.480
And that's all there is to it.

00:04:31.480 --> 00:04:32.950
Pretty simple.

00:04:32.950 --> 00:04:38.680
So let me demonstrate your how to use this plug in in one of our other projects.

00:04:38.680 --> 00:04:43.270
I'm going to use this plug in a spot off our project A So before that,

00:04:43.270 --> 00:04:47.290
I had to make sure that I sort off make this plug in available in the repository,

00:04:47.290 --> 00:04:53.950
someone to right Click on this and I go toe run as may even install.

00:04:53.950 --> 00:04:57.720
So this is going toe eggs.

00:04:57.720 --> 00:05:03.760
Get all the faces until this point So ultimately would say it would see that plug in

00:05:03.760 --> 00:05:05.950
getting the spread inside our repository.

00:05:05.950 --> 00:05:08.950
Since I've already done that,

00:05:08.950 --> 00:05:11.070
I have that in my repository.

00:05:11.070 --> 00:05:16.730
So here I have it sample and then plug in.

00:05:16.730 --> 00:05:23.310
And after that,

00:05:23.310 --> 00:05:26.350
I'm going to my another project.

00:05:26.350 --> 00:05:31.150
But I want to use the plug in and I go to its formed or XML file.

00:05:31.150 --> 00:05:39.180
What I had to do is defined this particular tag build and then we're going to define our

00:05:39.180 --> 00:05:40.650
plug ins and my kids.

00:05:40.650 --> 00:05:45.250
I'm just simply going to define our own plug in using its coordinates.

00:05:45.250 --> 00:05:47.530
And once you do that just a bit,

00:05:47.530 --> 00:05:51.350
the project we're going to maybe in a bit project,

00:05:51.350 --> 00:05:52.490
and after that,

00:05:52.490 --> 00:05:55.550
go to the project directory covering Brosa.

00:05:55.550 --> 00:05:57.790
I've already done that,

00:05:57.790 --> 00:06:02.720
and I'm just simply going to execute the falling command.

00:06:02.720 --> 00:06:06.500
Remember this command to go back to our text file.

00:06:06.500 --> 00:06:10.050
It is the former that I have followed.

00:06:10.050 --> 00:06:14.950
We would biscuit for the coordinates and then the goal name.

00:06:14.950 --> 00:06:20.150
So I'm actually calling this goal directly.

00:06:20.150 --> 00:06:24.740
I'm not associating this particular goal with any maven phase.

00:06:24.740 --> 00:06:26.650
We're going to do that in a while,

00:06:26.650 --> 00:06:35.830
But let's try to run the Sensi howdy or put looks and sure enough,

00:06:35.830 --> 00:06:39.660
the court that is associated with this goal got executed.

00:06:39.660 --> 00:06:41.550
And so we're able to see Hello World.

00:06:41.550 --> 00:06:45.750
You can't run this goal outside this project.

00:06:45.750 --> 00:06:47.950
Whenever we have defined,

00:06:47.950 --> 00:06:49.280
for example,

00:06:49.280 --> 00:06:54.100
I go to another instance of Korean Prosser and done the same command.

00:06:54.100 --> 00:06:57.530
But this time I'm not in that directory.

00:06:57.530 --> 00:06:58.860
Wherever our project,

00:06:58.860 --> 00:07:00.450
a bomb dot xml is reciting,

00:07:00.450 --> 00:07:03.910
it's it enter and you would see an error.

00:07:03.910 --> 00:07:08.750
So it's a it's failed to execute a particular goal.

00:07:08.750 --> 00:07:11.610
Gold requires a project to execute,

00:07:11.610 --> 00:07:13.850
but there is no palm in this directory.

00:07:13.850 --> 00:07:16.550
So that explains.

00:07:16.550 --> 00:07:22.110
Now let us try to associate this goal with a phase.

00:07:22.110 --> 00:07:26.600
Let's I wanted to associate this girl with the clean face.

00:07:26.600 --> 00:07:28.760
Let me just quickly pause the video,

00:07:28.760 --> 00:07:31.480
write the code and then get back.

00:07:31.480 --> 00:07:37.800
So here have introduced the stag executions under the plug in tank,

00:07:37.800 --> 00:07:40.390
within which I specified this goal,

00:07:40.390 --> 00:07:46.100
and I also mentioned that I wanted to associate this goal with the clean phase.

00:07:46.100 --> 00:07:49.740
So every time I tried execute this phase off,

00:07:49.740 --> 00:07:53.580
maybe in my goal will be executed as well.

00:07:53.580 --> 00:07:55.450
So let's say the file.

00:07:55.450 --> 00:08:04.580
Go to the command processor and tried to do M V in clean.

00:08:04.580 --> 00:08:10.800
And sure enough,

00:08:10.800 --> 00:08:13.150
we're able to say this message.

00:08:13.150 --> 00:08:15.250
So that's about it.

00:08:15.250 --> 00:08:17.870
I think we're comfortable with me even now.

00:08:17.870 --> 00:08:21.700
And I think we have covered all the key concepts.

00:08:21.700 --> 00:08:25.990
We have a few more radios to go before we say we're done.

00:08:25.990 --> 00:08:26.950
All right,

00:08:26.950 --> 00:08:27.890
see?

00:08:27.890 --> 00:08:28.550
You assume.

