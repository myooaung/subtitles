WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.160
Okay,

00:00:01.160 --> 00:00:02.720
this is our first video maven,

00:00:02.720 --> 00:00:06.780
so let us start keeping simple and not take too much off pressure.

00:00:06.780 --> 00:00:08.200
So in this video,

00:00:08.200 --> 00:00:11.150
I'll try to get some theoretical perspective on what is maven.

00:00:11.150 --> 00:00:13.350
What are all the things that it offers?

00:00:13.350 --> 00:00:17.950
How's it different compact to other bull tools like Aunt Etcetera?

00:00:17.950 --> 00:00:22.700
So this video will give you some understanding on Maven and then,

00:00:22.700 --> 00:00:28.050
in subsequent videos over a span off few videos will gain enough confidence to start using

00:00:28.050 --> 00:00:28.560
11.

00:00:28.560 --> 00:00:31.750
So let us start with the definition off maven.

00:00:31.750 --> 00:00:34.280
If you ask a difficult programmer,

00:00:34.280 --> 00:00:36.950
what is Maven is going to say it is a bill tool.

00:00:36.950 --> 00:00:39.690
But let me tell you a personal disagree with that.

00:00:39.690 --> 00:00:45.730
I would say live in is more off a project management tool than just a bill tool because

00:00:45.730 --> 00:00:52.220
Megan is not there just to offer the project building capabilities but also a host of other

00:00:52.220 --> 00:00:54.280
things which will discuss in a second.

00:00:54.280 --> 00:00:59.480
So let's let's talk about what is maven in terms off building a project.

00:00:59.480 --> 00:01:00.500
So far,

00:01:00.500 --> 00:01:03.050
we've used and to build our project,

00:01:03.050 --> 00:01:05.380
and we can use may even for the same.

00:01:05.380 --> 00:01:10.480
But that's where the similarities between ant and maven blend because moving is a better

00:01:10.480 --> 00:01:11.010
tool.

00:01:11.010 --> 00:01:13.690
Let me explain what I mean for aunt,

00:01:13.690 --> 00:01:16.090
for a project like this,

00:01:16.090 --> 00:01:21.500
nobody's enforcing you to use the falling naming conventional that our infrastructure,

00:01:21.500 --> 00:01:22.820
for example,

00:01:22.820 --> 00:01:25.660
I could name this territory else something else.

00:01:25.660 --> 00:01:27.030
Answer of Web content.

00:01:27.030 --> 00:01:30.280
I could save a BAP our instead of a SERC.

00:01:30.280 --> 00:01:36.760
I could say something else and same thing will get reflected in my XML as well.

00:01:36.760 --> 00:01:41.750
And taken note off how specific I'm in mentioning each one off these tasks.

00:01:41.750 --> 00:01:43.020
For example,

00:01:43.020 --> 00:01:44.680
to perform the compile task,

00:01:44.680 --> 00:01:49.630
I have to explicitly provide the path where the source files are reciting,

00:01:49.630 --> 00:01:55.250
and I have to explicitly provide the part where I want to generate my daughter class files

00:01:55.250 --> 00:01:58.950
and similarly with the rest of the tasks as well.

00:01:58.950 --> 00:02:02.320
Now the problem with this is two more.

00:02:02.320 --> 00:02:05.450
If I'd like to perform the same set off pass in another project,

00:02:05.450 --> 00:02:11.270
things may not work smoothly because that another project may not be having the same data

00:02:11.270 --> 00:02:15.910
structure or it may not be is in the same naming convention that I'm used to.

00:02:15.910 --> 00:02:16.440
Well,

00:02:16.440 --> 00:02:21.630
this problem can be solved with Navan because when you're trying to use maven,

00:02:21.630 --> 00:02:26.250
Then you have to follow the following standard directory layout.

00:02:26.250 --> 00:02:28.000
For example,

00:02:28.000 --> 00:02:33.590
you have to let go all your source files inside SRC Main Java and their corresponding

00:02:33.590 --> 00:02:36.910
resources under a SERC main resources.

00:02:36.910 --> 00:02:37.700
Similarly,

00:02:37.700 --> 00:02:41.860
we have a directory dedicated for Jana tests.

00:02:41.860 --> 00:02:48.280
So this is the one source does Job is where all your test classes will go and their

00:02:48.280 --> 00:02:49.700
corresponding resources.

00:02:49.700 --> 00:02:54.840
You'd have to let go your content under SRC main Web app,

00:02:54.840 --> 00:02:55.590
etcetera.

00:02:55.590 --> 00:03:00.600
So when you create a maven project either by the command line tool are from Eclipse,

00:03:00.600 --> 00:03:07.270
you're going to see some pre defined directory structure and thus the standard that relay

00:03:07.270 --> 00:03:08.790
out from even projects.

00:03:08.790 --> 00:03:15.810
One primary advantage and following a standard directory structure is maven will be able to

00:03:15.810 --> 00:03:21.250
offer all this typical project building task without you having to cord,

00:03:21.250 --> 00:03:27.120
for example in and if and were to offer all those typical tasks.

00:03:27.120 --> 00:03:28.150
For example,

00:03:28.150 --> 00:03:32.710
a typical project building tasks would include creation off the documentation from the

00:03:32.710 --> 00:03:33.670
source files.

00:03:33.670 --> 00:03:36.550
We've taken a look at one such example in ant,

00:03:36.550 --> 00:03:43.410
the Java Doc task we would compile source files can create an archive file out off the

00:03:43.410 --> 00:03:48.760
resulting dot class files and finally deployed the artifact onto the silver.

00:03:48.760 --> 00:03:55.200
So these are some of the typical project building test we would perform and in order to

00:03:55.200 --> 00:03:57.060
accomplish the same with,

00:03:57.060 --> 00:04:00.750
and you'd have to introduce all these tags,

00:04:00.750 --> 00:04:07.170
the reason is and is not aware off your typical that restructure the naming convention that

00:04:07.170 --> 00:04:09.760
you follow and so it can't perform.

00:04:09.760 --> 00:04:11.110
All this stands for you.

00:04:11.110 --> 00:04:12.500
But whereas with me,

00:04:12.500 --> 00:04:15.850
even when you have a standard that it restructure like this,

00:04:15.850 --> 00:04:22.730
Melvin is ever off your project step to structure and his ever off various files reciting

00:04:22.730 --> 00:04:24.090
in various directories,

00:04:24.090 --> 00:04:25.170
for instance,

00:04:25.170 --> 00:04:28.680
it knows that all the test classes would be reciting under this directory.

00:04:28.680 --> 00:04:32.110
And so when the build process takes place,

00:04:32.110 --> 00:04:37.600
it should not include all these classes because we know that Jono classes doesn't have any

00:04:37.600 --> 00:04:40.200
significance in the final artifact.

00:04:40.200 --> 00:04:44.780
But whereas with and if you want to do the same,

00:04:44.780 --> 00:04:50.680
you'd have to explicitly provide the part as well as you have to write a task that's going

00:04:50.680 --> 00:04:53.650
to exclude those test files and in fact,

00:04:53.650 --> 00:04:55.330
in one off for previous videos,

00:04:55.330 --> 00:04:58.150
we have taken a look at one such example,

00:04:58.150 --> 00:05:05.500
and obviously another advantage in using a standard AC to structure like this is to more.

00:05:05.500 --> 00:05:10.650
If you'd like to perform center off tasks that you performed in one moon project to another

00:05:10.650 --> 00:05:11.570
moment project,

00:05:11.570 --> 00:05:17.300
then it would be a lot smoother because that another project is also going to follow the

00:05:17.300 --> 00:05:23.360
standard maven that structure and so you don't have to make a lot of changes.

00:05:23.360 --> 00:05:26.680
So that's one of the things that we're going to explore.

00:05:26.680 --> 00:05:31.230
Incoming videos and another important thing about May veneers.

00:05:31.230 --> 00:05:32.660
Dependence in management.

00:05:32.660 --> 00:05:34.380
So far in our examples,

00:05:34.380 --> 00:05:39.750
I think we haven't really created a project that is dependent on another project.

00:05:39.750 --> 00:05:42.330
But in real time projects,

00:05:42.330 --> 00:05:44.650
it is most likely the case.

00:05:44.650 --> 00:05:46.360
You'd have a lot of projects,

00:05:46.360 --> 00:05:49.390
and some of these projects depend on other projects.

00:05:49.390 --> 00:05:51.190
As a simple example,

00:05:51.190 --> 00:05:55.950
say that you have Project A and is dependent on project Be.

00:05:55.950 --> 00:05:59.860
That means you need to compile project be first,

00:05:59.860 --> 00:06:07.670
and so the dark class files half Project B will be made available for Project A to compile

00:06:07.670 --> 00:06:07.670
.

00:06:07.670 --> 00:06:08.340
Well,

00:06:08.340 --> 00:06:10.800
if you're using it to like aunt to manage,

00:06:10.800 --> 00:06:11.900
your dependence is,

00:06:11.900 --> 00:06:15.550
you can manage it with one or two projects,

00:06:15.550 --> 00:06:18.740
but it's very difficult or impossible to manage,

00:06:18.740 --> 00:06:23.070
especially if you have a handful of projects that are dependent on each other.

00:06:23.070 --> 00:06:23.620
Well,

00:06:23.620 --> 00:06:24.280
in that case,

00:06:24.280 --> 00:06:27.310
maybe definitely outsmart it to like.

00:06:27.310 --> 00:06:30.970
And in fact we can't accomplish it with Aunt.

00:06:30.970 --> 00:06:37.950
You have to use another dependency manager to like Ivy to that goes along with aunt to

00:06:37.950 --> 00:06:38.360
manage.

00:06:38.360 --> 00:06:39.210
The dependence is,

00:06:39.210 --> 00:06:39.950
but still,

00:06:39.950 --> 00:06:42.830
even if you combine and with Ivy Tool,

00:06:42.830 --> 00:06:45.090
it's not on bar with Maven.

00:06:45.090 --> 00:06:51.220
Maven clearly stands out in that aspect because Maven is actually smart enough to

00:06:51.220 --> 00:06:56.090
understand which project is dependent on which project.

00:06:56.090 --> 00:06:59.100
And so it'll it's going to build accordingly.

00:06:59.100 --> 00:07:06.480
We're going to take a look at examples on the same maven is Extensible.

00:07:06.480 --> 00:07:10.870
So maybe naturally works on the basis off so called plug ins.

00:07:10.870 --> 00:07:11.160
Again,

00:07:11.160 --> 00:07:14.050
we'll talk about what of plug ins except at later point of time.

00:07:14.050 --> 00:07:19.950
But all these difficult tasks are actually done by this plug ins,

00:07:19.950 --> 00:07:22.850
which were built in in maven.

00:07:22.850 --> 00:07:26.780
But if you wish to use our do something beyond this,

00:07:26.780 --> 00:07:28.180
you can write your own plug ins,

00:07:28.180 --> 00:07:31.370
and so maven is extensible.

00:07:31.370 --> 00:07:33.550
You're not just limited to what may even offers,

00:07:33.550 --> 00:07:35.050
but you can also extend it,

00:07:35.050 --> 00:07:39.140
and one of the important creatures is version ing.

00:07:39.140 --> 00:07:40.200
For example,

00:07:40.200 --> 00:07:44.730
say that you are on Windows Stan and you download an update of Understand in the name of

00:07:44.730 --> 00:07:48.030
that file is going to be update for Windows 11.

00:07:48.030 --> 00:07:49.430
So that's going to annoy you,

00:07:49.430 --> 00:07:49.790
right?

00:07:49.790 --> 00:07:53.200
So you need to have a proper version ing for your projects.

00:07:53.200 --> 00:07:55.990
It's impossible to maintain worsening with,

00:07:55.990 --> 00:07:59.430
and but it's very easy to maintain.

00:07:59.430 --> 00:08:02.890
Motioning with maven again.

00:08:02.890 --> 00:08:10.850
You have to hold on until we cover that concept in Another daunted off maven is its

00:08:10.850 --> 00:08:15.450
performance maven can figure out water all the golds.

00:08:15.450 --> 00:08:16.660
By the way,

00:08:16.660 --> 00:08:22.080
a goal in Maven is equal into Taschen and seven as a goal,

00:08:22.080 --> 00:08:24.800
you can think off it house a task.

00:08:24.800 --> 00:08:28.390
So when Maven evaluates all those goals,

00:08:28.390 --> 00:08:33.440
it will figure out what are all the goals that we can perform simultaneously?

00:08:33.440 --> 00:08:36.790
If there are certain towns that are independent off each other,

00:08:36.790 --> 00:08:42.190
than maven will take care of performing simultaneous executions that it will improve the

00:08:42.190 --> 00:08:43.570
performance as well.

00:08:43.570 --> 00:08:44.270
So,

00:08:44.270 --> 00:08:44.990
roughly here,

00:08:44.990 --> 00:08:46.850
a list of things that may even does,

00:08:46.850 --> 00:08:50.520
and I think this has given you some idea on Maven.

00:08:50.520 --> 00:08:51.950
All right,

00:08:51.950 --> 00:08:53.650
see you in my next video

