WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.870
all that,

00:00:00.870 --> 00:00:01.750
Let's continue.

00:00:01.750 --> 00:00:10.350
So what has happened behind the scenes is when you specified this dependency,

00:00:10.350 --> 00:00:12.450
my default,

00:00:12.450 --> 00:00:14.640
it's Copus said to come bile.

00:00:14.640 --> 00:00:20.790
That means not only is dependent library will be made available during compile time.

00:00:20.790 --> 00:00:24.250
And that's why we didn't have any company mirrors,

00:00:24.250 --> 00:00:28.890
but also the javelin packaged as part of the war archive.

00:00:28.890 --> 00:00:34.200
And so it is made available during the run time after we deployed to the silver.

00:00:34.200 --> 00:00:35.580
Because guess what?

00:00:35.580 --> 00:00:39.950
Someone does not have the jar for you since it's your own project.

00:00:39.950 --> 00:00:48.640
So if you go inside our directory wherever the war file is created straight to see what's

00:00:48.640 --> 00:00:49.180
inside it,

00:00:49.180 --> 00:01:00.850
and I'm sure you'll be able to find our depend and Project Jar file.

00:01:00.850 --> 00:01:10.140
This is standard that is,

00:01:10.140 --> 00:01:11.110
to structure.

00:01:11.110 --> 00:01:17.150
So we have this data tree lib where we have all the runtime libraries.

00:01:17.150 --> 00:01:21.550
So this concludes on the compile scope,

00:01:21.550 --> 00:01:23.950
which is the default scope.

00:01:23.950 --> 00:01:32.970
You can also explicitly specify the same over here using the scope tank and say,

00:01:32.970 --> 00:01:37.790
Come pile and it's and it's just as good.

00:01:37.790 --> 00:01:41.850
Let's mourn with other scopes we have.

00:01:41.850 --> 00:01:44.840
If the scope is set to provided,

00:01:44.840 --> 00:01:50.860
that means we're assuming that the library will be made available during the run time and

00:01:50.860 --> 00:01:53.390
that we don't have to include it while packaging.

00:01:53.390 --> 00:01:57.850
A good example of this would be the sole at FBI DOT jar.

00:01:57.850 --> 00:02:02.070
The Soviet AP Adar Jar is required during the compile time,

00:02:02.070 --> 00:02:06.600
but we don't really need to pack it the jar file inside our war file.

00:02:06.600 --> 00:02:12.050
That's because so that AP at our door is also available as part of the Tom Get several

00:02:12.050 --> 00:02:15.780
library and is available when we run the Soviet.

00:02:15.780 --> 00:02:18.130
And for that reason,

00:02:18.130 --> 00:02:21.390
if you take a look at our dependency declaration off soul it,

00:02:21.390 --> 00:02:25.190
you'll notice that the scope is set to provide it for the very reason.

00:02:25.190 --> 00:02:29.170
And if you take a look at the war file,

00:02:29.170 --> 00:02:30.590
the soul it appeared,

00:02:30.590 --> 00:02:33.390
are JAR is not included in the lib folder.

00:02:33.390 --> 00:02:37.290
That's because we said it to be provided.

00:02:37.290 --> 00:02:42.290
We're assuming that the jar files will be provided during the run time by whichever several

00:02:42.290 --> 00:02:43.270
were deploying two.

00:02:43.270 --> 00:02:45.640
So that's about the provided,

00:02:45.640 --> 00:02:47.980
and then we have run time.

00:02:47.980 --> 00:02:51.420
Certain libraries are not required during the compile time.

00:02:51.420 --> 00:02:58.330
A good example of the same would be Jerry BC FBI The jerry BC FBI is required during the

00:02:58.330 --> 00:03:02.950
compile time to write the instructions that will help us connect to the database.

00:03:02.950 --> 00:03:08.320
But whereas we don't need the actual driver implementation code during the compile time,

00:03:08.320 --> 00:03:13.520
we would need them during the run time and they will be provided by sewers.

00:03:13.520 --> 00:03:14.580
In that case,

00:03:14.580 --> 00:03:20.250
we can add a dependency to these drivers and said the scope to run time as simple as that,

00:03:20.250 --> 00:03:22.980
whether we had talked about Jerry B.

00:03:22.980 --> 00:03:23.460
C.

00:03:23.460 --> 00:03:23.810
You know,

00:03:23.810 --> 00:03:26.050
they're the best course along with the many project.

00:03:26.050 --> 00:03:28.390
You may want to check it if you're interested,

00:03:28.390 --> 00:03:31.150
and then we have the test scope,

00:03:31.150 --> 00:03:34.510
meaning the dependency that is marked with the test scope.

00:03:34.510 --> 00:03:37.550
But we made available while unit testing.

00:03:37.550 --> 00:03:38.640
So,

00:03:38.640 --> 00:03:39.120
you know,

00:03:39.120 --> 00:03:40.190
to understand this,

00:03:40.190 --> 00:03:44.040
you must supposed to be a fair off unit testing for example,

00:03:44.040 --> 00:03:50.700
J on it for take a look at the dependency on the same it say's The scope is test,

00:03:50.700 --> 00:03:53.060
so when the tests are being run,

00:03:53.060 --> 00:03:55.170
this library would be made available.

00:03:55.170 --> 00:03:58.210
This would be part of the resulting package,

00:03:58.210 --> 00:04:05.180
so even you don't find this jar file inside of our file,

00:04:05.180 --> 00:04:11.350
and finally we have the system scope.

00:04:11.350 --> 00:04:14.150
This has something to do with external libraries.

00:04:14.150 --> 00:04:17.590
So let's try to understand what is external library,

00:04:17.590 --> 00:04:20.150
and then we'll understand the system scope.

00:04:20.150 --> 00:04:26.210
When you have a dependency that is not part off any repository or a dependency that is

00:04:26.210 --> 00:04:29.050
external to repository,

00:04:29.050 --> 00:04:31.830
then we call it an external dependency.

00:04:31.830 --> 00:04:36.450
What I mean by that is we're going to tell the maven that will manage small for dependence

00:04:36.450 --> 00:04:38.110
is all on our own.

00:04:38.110 --> 00:04:38.840
Now,

00:04:38.840 --> 00:04:40.570
for the sake of this example,

00:04:40.570 --> 00:04:45.050
let us assume that we don't want to use the Janet present in the depository,

00:04:45.050 --> 00:04:47.750
but I wanted to use something off my own,

00:04:47.750 --> 00:04:50.550
so I'm going to introduce a new tag in here.

00:04:50.550 --> 00:04:54.190
That's a Z is system part,

00:04:54.190 --> 00:04:59.650
and I'm going to give the complete part to the jar file.

00:04:59.650 --> 00:05:14.150
So if you go to a repository and Janet and here's a part of the same,

00:05:14.150 --> 00:05:24.550
I went to provide it over here and also the name of that jar file.

00:05:24.550 --> 00:05:30.570
So we have to provide the complete part.

00:05:30.570 --> 00:05:34.850
Now if you have your job libraries reciting in one of the folders in your project,

00:05:34.850 --> 00:05:40.800
and you wanted to do the part that is related to to the folder wherever your poem that XML

00:05:40.800 --> 00:05:41.560
is reciting,

00:05:41.560 --> 00:05:47.610
then you can use this property dollar based there,

00:05:47.610 --> 00:05:51.950
and then you give the part from there to that library.

00:05:51.950 --> 00:05:53.810
But in this example,

00:05:53.810 --> 00:05:58.350
I'm not going to do that because we don't have any said jar files in our project at the

00:05:58.350 --> 00:05:58.850
moment.

00:05:58.850 --> 00:06:05.640
And then you will change this scope to system during May.

00:06:05.640 --> 00:06:10.840
Even that I have my libraries inside my system and I'm going to manage on my own.

00:06:10.840 --> 00:06:14.300
Let's say the file and make sure that you have the group i d.

00:06:14.300 --> 00:06:15.570
An artifact I d.

00:06:15.570 --> 00:06:17.100
With this name.

00:06:17.100 --> 00:06:18.950
Whatever goes here.

00:06:18.950 --> 00:06:19.780
Well,

00:06:19.780 --> 00:06:34.500
let's try to I've read the project and we'll also play in the project,

00:06:34.500 --> 00:06:42.260
meaning I'm just calling the immense script with clean option that would just delete the

00:06:42.260 --> 00:06:45.050
target directory set off,

00:06:45.050 --> 00:06:48.150
get things back to where they were,

00:06:48.150 --> 00:06:57.650
and let's rebuild package,

00:06:57.650 --> 00:07:11.250
Run it and it sucks us.

00:07:11.250 --> 00:07:17.950
Which means that even didn't have any problem searching for this dependency.

00:07:17.950 --> 00:07:21.450
So that's about it on scope.

00:07:21.450 --> 00:07:24.160
Hope it makes sense.

00:07:24.160 --> 00:07:25.160
See you soon

