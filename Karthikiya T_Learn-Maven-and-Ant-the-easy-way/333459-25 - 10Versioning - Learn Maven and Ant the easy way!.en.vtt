WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.850
in this video.

00:00:00.850 --> 00:00:05.230
We're going to try to get some perspective on handling washing numbers with Maven,

00:00:05.230 --> 00:00:09.750
and we'll understand why I'm Evan is a better tool in terms off portion management.

00:00:09.750 --> 00:00:10.620
First,

00:00:10.620 --> 00:00:15.850
let's talk about the dependency washing specification who just simply means water all

00:00:15.850 --> 00:00:16.430
different ways.

00:00:16.430 --> 00:00:19.920
We can specify the wash in while defining a dependency.

00:00:19.920 --> 00:00:21.780
So in our palm dot XML,

00:00:21.780 --> 00:00:23.930
whenever you're defining a dependency,

00:00:23.930 --> 00:00:28.830
you have good control on diversion off the artifacts that you want to download and use in

00:00:28.830 --> 00:00:29.650
your project.

00:00:29.650 --> 00:00:31.330
For example,

00:00:31.330 --> 00:00:32.680
take a look at this.

00:00:32.680 --> 00:00:34.910
If you're specified abortion as follows,

00:00:34.910 --> 00:00:35.500
for example,

00:00:35.500 --> 00:00:35.920
one daughter.

00:00:35.920 --> 00:00:36.350
Oh,

00:00:36.350 --> 00:00:39.550
and that means we're asking me even to download this wash in.

00:00:39.550 --> 00:00:41.190
If it is not available,

00:00:41.190 --> 00:00:44.900
then we're loving it to download any latest wash in.

00:00:44.900 --> 00:00:47.970
But if you encapsulated within the square brackets,

00:00:47.970 --> 00:00:50.210
then that's a hard department.

00:00:50.210 --> 00:00:54.250
That means we're asking me even to download this particular Warsh in.

00:00:54.250 --> 00:00:55.780
If it's not available,

00:00:55.780 --> 00:00:58.950
then do nothing report and ever similarly,

00:00:58.950 --> 00:01:02.650
we have other formance off specifying the worsens,

00:01:02.650 --> 00:01:05.160
and I've also provided examples.

00:01:05.160 --> 00:01:08.950
You can just have a quick look at them pretty straightforward,

00:01:08.950 --> 00:01:09.950
for example,

00:01:09.950 --> 00:01:15.540
in here were mentioning that We wanted to download any version that is less than or equal

00:01:15.540 --> 00:01:16.370
to one,

00:01:16.370 --> 00:01:17.050
not old.

00:01:17.050 --> 00:01:21.450
So as long as the artifact abortion is less than 1.0,

00:01:21.450 --> 00:01:29.820
we want to download it similarly in here we wanted to download any artifact with abortion

00:01:29.820 --> 00:01:32.150
that lies between wonder too.

00:01:32.150 --> 00:01:33.620
And 1.3,

00:01:33.620 --> 00:01:36.070
the last one is something What?

00:01:36.070 --> 00:01:42.090
Noting in here with the statement What we're trying to say that we wanted to exclude 1.1

00:01:42.090 --> 00:01:47.270
Russian discover just mentioning We want to include whatever is less than one,

00:01:47.270 --> 00:01:51.620
not one or whatever is greater than 1.1,

00:01:51.620 --> 00:01:52.580
but not one,

00:01:52.580 --> 00:01:54.580
not one in one of the use cases.

00:01:54.580 --> 00:01:59.550
Where this might come in handy is when you know that this particular abortion off artifact

00:01:59.550 --> 00:02:01.950
is causing problem in your project.

00:02:01.950 --> 00:02:05.250
Then we don't want to use that particular version off artifact.

00:02:05.250 --> 00:02:08.470
And typically,

00:02:08.470 --> 00:02:12.150
when you're defining abortion number for your projects in your palm,

00:02:12.150 --> 00:02:14.280
that XML while defining your coordinates,

00:02:14.280 --> 00:02:19.070
this is a typical standard maven format that you to follow.

00:02:19.070 --> 00:02:21.830
We have the major abortion Mina version,

00:02:21.830 --> 00:02:26.410
incremental version and then the bill number qualifier.

00:02:26.410 --> 00:02:30.770
It's not record that you include all these,

00:02:30.770 --> 00:02:32.440
but you're going to use some of them.

00:02:32.440 --> 00:02:34.130
You can see examples in here.

00:02:34.130 --> 00:02:34.970
For example,

00:02:34.970 --> 00:02:37.350
if you have your washing specified in this manner,

00:02:37.350 --> 00:02:41.970
end up means we have the major abortion as one and then the mine.

00:02:41.970 --> 00:02:49.900
Abortion as to and but this incremental abortion snapshot and in here we have major washing

00:02:49.900 --> 00:02:51.410
has won mine abortion.

00:02:51.410 --> 00:02:56.230
As for the incremental abortionists two and in the bill number.

00:02:56.230 --> 00:02:59.020
If you don't know what is the bill number for the time being,

00:02:59.020 --> 00:03:02.070
you can think off it as they build happening in the centre.

00:03:02.070 --> 00:03:04.810
A silver mescal incorporate world.

00:03:04.810 --> 00:03:10.390
Whenever you make changes in your court and submit those changes to a repository,

00:03:10.390 --> 00:03:13.350
there's going to be built that's going to take place.

00:03:13.350 --> 00:03:14.260
Basically,

00:03:14.260 --> 00:03:18.940
it's nothing but a may even build that happens in the centralized server and preaching

00:03:18.940 --> 00:03:19.710
every build.

00:03:19.710 --> 00:03:26.000
There will be increment in this bill number so that we maintain artifacts for each and

00:03:26.000 --> 00:03:29.150
every individual built with its unit number.

00:03:29.150 --> 00:03:30.710
If the sounds confusing,

00:03:30.710 --> 00:03:31.380
that's fine.

00:03:31.380 --> 00:03:33.380
This is not mandatory anyway,

00:03:33.380 --> 00:03:37.790
and this is basically something a bill tool will keep incremental,

00:03:37.790 --> 00:03:40.560
and here is an example were refused,

00:03:40.560 --> 00:03:42.650
so called a qualifier.

00:03:42.650 --> 00:03:45.280
We'll talk about quality for us in a second.

00:03:45.280 --> 00:03:52.030
But this is one of the example off defining the abortion major abortion as one my notion as

00:03:52.030 --> 00:03:55.350
to And then you have the qualifier.

00:03:55.350 --> 00:03:56.300
Well,

00:03:56.300 --> 00:04:00.970
anything that is not new American nature that you defined in your wash in is called a

00:04:00.970 --> 00:04:01.940
qualifier.

00:04:01.940 --> 00:04:02.610
For example,

00:04:02.610 --> 00:04:03.710
Take a look at this.

00:04:03.710 --> 00:04:06.200
We have a couple of qualifiers in here.

00:04:06.200 --> 00:04:09.130
Wonder to hyphen apple,

00:04:09.130 --> 00:04:11.850
and we got one not to happen banana.

00:04:11.850 --> 00:04:14.410
If the version number has numerical,

00:04:14.410 --> 00:04:15.320
for example,

00:04:15.320 --> 00:04:20.240
we don't have this qualifiers in here that is a zoom and say that this is wondered.

00:04:20.240 --> 00:04:20.850
Three.

00:04:20.850 --> 00:04:22.970
Then maybe you can easily jitter mine.

00:04:22.970 --> 00:04:24.690
Which one is greater?

00:04:24.690 --> 00:04:26.960
Come back to the other.

00:04:26.960 --> 00:04:33.090
So this wash in is obviously previous worship in 21 or three.

00:04:33.090 --> 00:04:36.510
But when you have a qualifer like this,

00:04:36.510 --> 00:04:41.400
Memon is going to determine it based on the alphabet slaughterer.

00:04:41.400 --> 00:04:48.850
So in here he comes before be so this is going to with the latest wash in,

00:04:48.850 --> 00:04:50.110
then this.

00:04:50.110 --> 00:04:56.590
That's what maven as Yum's so this worship is greater than this.

00:04:56.590 --> 00:05:00.240
But there are few exceptions,

00:05:00.240 --> 00:05:03.060
especially if you use this key words like alphabet.

00:05:03.060 --> 00:05:05.060
A milestone snapshot,

00:05:05.060 --> 00:05:08.670
etcetera If you don't know what is Alfa,

00:05:08.670 --> 00:05:13.690
it is basically the qualifier that happened with the version number when your project is

00:05:13.690 --> 00:05:18.050
actually being tested by developers and once it passes that phase,

00:05:18.050 --> 00:05:21.350
then your project would move into better.

00:05:21.350 --> 00:05:24.530
That means the product is done,

00:05:24.530 --> 00:05:27.150
but there are some known issues,

00:05:27.150 --> 00:05:28.590
so similarly,

00:05:28.590 --> 00:05:32.410
we have other qualifiers just as use here.

00:05:32.410 --> 00:05:33.520
Somewhere in the middle,

00:05:33.520 --> 00:05:36.090
we have the snapshot qualifier as well,

00:05:36.090 --> 00:05:42.350
and after snapshot will have final JIA build and the service backwash in.

00:05:42.350 --> 00:05:45.560
So just take a look at this example.

00:05:45.560 --> 00:05:48.150
It says the washing is the same.

00:05:48.150 --> 00:05:51.010
But the different terms off qualifier now,

00:05:51.010 --> 00:06:02.740
although alphabetically becomes after a in this example based on this hierarchy beater is

00:06:02.740 --> 00:06:04.400
greater than Alfa.

00:06:04.400 --> 00:06:07.760
Some even is going to assume that wonder to happen.

00:06:07.760 --> 00:06:11.050
Vita is greater than wondered to hyphen Alfa,

00:06:11.050 --> 00:06:17.570
and similarly moving is also going to consider the symbols used in the version number to

00:06:17.570 --> 00:06:18.300
return mine.

00:06:18.300 --> 00:06:21.170
Which portion is latest than the other.

00:06:21.170 --> 00:06:29.380
So when you have dot qualifier maven will assume that the abortion is previous to hyphen,

00:06:29.380 --> 00:06:35.750
qualifier and hyphen Number is a great aversion compact to hyphen qualifier,

00:06:35.750 --> 00:06:40.110
an example of which can be seen in here,

00:06:40.110 --> 00:06:42.970
In here if you observe both,

00:06:42.970 --> 00:06:44.140
the versions are same.

00:06:44.140 --> 00:06:45.460
Like wonder too,

00:06:45.460 --> 00:06:46.660
Al Fine,

00:06:46.660 --> 00:06:47.830
Mondo Tau Alpha.

00:06:47.830 --> 00:06:54.750
But the difference is here we've used the hyphen and in here we have used had Don't.

00:06:54.750 --> 00:06:57.110
If I take a look at this hierarchy,

00:06:57.110 --> 00:07:02.550
then hyphen qualifier is greater than the doctor qualifier.

00:07:02.550 --> 00:07:08.250
And so this is going to be great abortion combat to this.

00:07:08.250 --> 00:07:16.320
And finally there are few points to note with respect to wash inning.

00:07:16.320 --> 00:07:22.050
All the versions with a qualifier are older than the same version without a qualifier,

00:07:22.050 --> 00:07:25.200
an example of which can be seen in here.

00:07:25.200 --> 00:07:30.350
So 1.2 is greater than 1.2 with a qualifier.

00:07:30.350 --> 00:07:36.550
And this is something that we've already talked.

00:07:36.550 --> 00:07:39.500
And here is a tricky one.

00:07:39.500 --> 00:07:44.470
Moon is actually going to do some corrections to abortion by splitting the washing with a

00:07:44.470 --> 00:07:45.130
hyphen.

00:07:45.130 --> 00:07:48.480
The best way to understand it is with this example.

00:07:48.480 --> 00:07:49.770
Take a look at this,

00:07:49.770 --> 00:07:55.350
and what made it is going to do is it's going to take the falling wash in,

00:07:55.350 --> 00:07:59.580
and it's going to split it by hyphen character.

00:07:59.580 --> 00:08:02.000
So we get these two strings.

00:08:02.000 --> 00:08:06.120
So one doctor two will be translated to wonder,

00:08:06.120 --> 00:08:06.530
too,

00:08:06.530 --> 00:08:08.050
since there are no mistakes.

00:08:08.050 --> 00:08:16.090
But whereas in here we're trying to mix both qualifier as well as a numerical so moving

00:08:16.090 --> 00:08:19.030
what kindof separate them with a hyphen,

00:08:19.030 --> 00:08:20.250
just as you see here.

00:08:20.250 --> 00:08:21.650
And finally,

00:08:21.650 --> 00:08:22.680
it's going to club this,

00:08:22.680 --> 00:08:23.150
too.

00:08:23.150 --> 00:08:29.340
So we get this and here's another example.

00:08:29.340 --> 00:08:33.300
Moving is going to take the worship in and then spread it by hyphen.

00:08:33.300 --> 00:08:36.710
And so we get this tree strings,

00:08:36.710 --> 00:08:39.110
if you will wonder,

00:08:39.110 --> 00:08:39.340
too,

00:08:39.340 --> 00:08:40.120
is fine.

00:08:40.120 --> 00:08:41.490
ABC is fine,

00:08:41.490 --> 00:08:50.160
but after hyphen with specified 0.1 million would replace it with 0.1 and finally would get

00:08:50.160 --> 00:08:50.750
this.

00:08:50.750 --> 00:08:53.140
This is sort off mavens way off,

00:08:53.140 --> 00:08:55.850
maintaining some consistency with version.

00:08:55.850 --> 00:09:03.120
Ing Maven would trim off the trailing now values when it's a no valued could be zero.

00:09:03.120 --> 00:09:08.090
It could be the qualifier final or G a r,

00:09:08.090 --> 00:09:09.050
an empty one,

00:09:09.050 --> 00:09:11.360
an example of which can be seen in here.

00:09:11.360 --> 00:09:13.810
Someone is going to take the falling Russian,

00:09:13.810 --> 00:09:16.540
split it by hyphen,

00:09:16.540 --> 00:09:23.130
just as you see here one dot or 1.0.0 would be translated to just one.

00:09:23.130 --> 00:09:31.870
But coming off the trailing zeroes and ABC dot or auto would be translated to ABC,

00:09:31.870 --> 00:09:34.850
so finally would get the falling version,

00:09:34.850 --> 00:09:36.950
which may even would consider.

00:09:36.950 --> 00:09:38.470
All right,

00:09:38.470 --> 00:09:39.790
that's all there is to it.

00:09:39.790 --> 00:09:46.770
I'm going to save this document for you with the name worsening dot Dogs do.

00:09:46.770 --> 00:09:47.950
Take it out if you need.

00:09:47.950 --> 00:09:49.890
All right,

00:09:49.890 --> 00:09:50.700
See you soon.

