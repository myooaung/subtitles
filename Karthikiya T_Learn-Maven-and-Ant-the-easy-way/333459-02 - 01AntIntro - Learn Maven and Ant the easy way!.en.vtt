WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.840
okay,

00:00:04.840 --> 00:00:07.880
in this very well paid Understand what is aunt,

00:00:07.880 --> 00:00:12.980
its benefits and what values is going to add in terms off project management,

00:00:12.980 --> 00:00:16.950
etcetera and stands for another need to.

00:00:16.950 --> 00:00:19.400
It is indeed a very need tool.

00:00:19.400 --> 00:00:20.800
And in fact,

00:00:20.800 --> 00:00:27.380
if I want to define and in single sentence than it would be and is a time and frustration

00:00:27.380 --> 00:00:28.050
saver,

00:00:28.050 --> 00:00:30.600
you will get to know what I mean.

00:00:30.600 --> 00:00:32.030
By the end of this video,

00:00:32.030 --> 00:00:37.170
take a look at this very simple Web application which have developed and all this

00:00:37.170 --> 00:00:38.320
application does,

00:00:38.320 --> 00:00:41.110
is it to La Loma Tender couple off numbers.

00:00:41.110 --> 00:00:42.020
And when I click,

00:00:42.020 --> 00:00:46.430
this button ad is just going to show the some of those two numbers pretty simple

00:00:46.430 --> 00:00:47.250
application.

00:00:47.250 --> 00:00:50.020
And for simple application like this,

00:00:50.020 --> 00:00:55.350
you're still end up having a project structure that looks like this.

00:00:55.350 --> 00:00:59.860
You're going to have a source folder very would have all your job,

00:00:59.860 --> 00:01:00.560
all files.

00:01:00.560 --> 00:01:01.150
You know,

00:01:01.150 --> 00:01:01.470
kids,

00:01:01.470 --> 00:01:02.710
this is going to be a soul.

00:01:02.710 --> 00:01:07.310
It and then you have resources folder where you would put all the resources used in your

00:01:07.310 --> 00:01:11.070
Java program an example of which is Dark Properties file.

00:01:11.070 --> 00:01:15.550
Or you could also have other file formats like XML file etcetera.

00:01:15.550 --> 00:01:18.510
And also you will have ah folder,

00:01:18.510 --> 00:01:19.800
which is Web content.

00:01:19.800 --> 00:01:24.840
You would basically have the presentation technologies here,

00:01:24.840 --> 00:01:26.680
like cascading style sheets,

00:01:26.680 --> 00:01:32.150
JavaScript in majors and ah HTM.

00:01:32.150 --> 00:01:32.470
Oh,

00:01:32.470 --> 00:01:33.280
etcetera.

00:01:33.280 --> 00:01:35.390
We also have a band of directory.

00:01:35.390 --> 00:01:37.230
And in the lib directory,

00:01:37.230 --> 00:01:43.470
you would basically put all the external jars that are going to be useful in nature in your

00:01:43.470 --> 00:01:49.860
project during the run time and you have the classes fold razzle.

00:01:49.860 --> 00:01:54.070
This is where the compelled Russian off door java would recite.

00:01:54.070 --> 00:01:58.750
If you're not aware off an application like this and the project structure,

00:01:58.750 --> 00:01:59.510
etcetera,

00:01:59.510 --> 00:02:01.330
then you can take a look at my course on.

00:02:01.330 --> 00:02:02.550
So that's in Jsp.

00:02:02.550 --> 00:02:03.880
It's a very good course.

00:02:03.880 --> 00:02:08.910
You can take a look at it so similarly got other folders,

00:02:08.910 --> 00:02:09.900
and this is very simple.

00:02:09.900 --> 00:02:11.850
Fired pulled a structure for a project,

00:02:11.850 --> 00:02:15.620
and in real time you would have many other folders like,

00:02:15.620 --> 00:02:16.230
for example,

00:02:16.230 --> 00:02:21.240
you'd have a folder for test classes are you would have another folder for documentation,

00:02:21.240 --> 00:02:21.950
etcetera.

00:02:21.950 --> 00:02:26.360
All those folders will come into picture when we talk about maven,

00:02:26.360 --> 00:02:33.360
which will come later so but this is a typical project structure for a for an application

00:02:33.360 --> 00:02:34.050
like this.

00:02:34.050 --> 00:02:35.370
In fact,

00:02:35.370 --> 00:02:37.950
if you go and create a dynamic project in eclipse,

00:02:37.950 --> 00:02:41.180
this is how it would basically look.

00:02:41.180 --> 00:02:44.630
And this waffle is something that were generated.

00:02:44.630 --> 00:02:46.250
I'll talk about it in a second.

00:02:46.250 --> 00:02:50.850
So in order to deploy this application onto mass over,

00:02:50.850 --> 00:02:55.380
typically I have to follow this these steps.

00:02:55.380 --> 00:02:57.550
What I have to do,

00:02:57.550 --> 00:02:58.620
first of all,

00:02:58.620 --> 00:03:05.210
is to copy all the files that are not Java files to the Build Classes directory.

00:03:05.210 --> 00:03:07.810
We have this directory created,

00:03:07.810 --> 00:03:13.850
and what I mean by copying all the non dollar files is basically the files like those

00:03:13.850 --> 00:03:21.360
properties files or XML files etcetera because we can copy the dark Java filed here because

00:03:21.360 --> 00:03:22.590
we don't want the source code.

00:03:22.590 --> 00:03:23.330
Rather,

00:03:23.330 --> 00:03:24.870
we want the compiled version off.

00:03:24.870 --> 00:03:26.670
The source scores the dark class file,

00:03:26.670 --> 00:03:28.650
so that's the second step.

00:03:28.650 --> 00:03:30.600
That's what you would do.

00:03:30.600 --> 00:03:35.390
He would basically compile all the source files or dot Java files,

00:03:35.390 --> 00:03:36.410
and then you keep them.

00:03:36.410 --> 00:03:40.200
You would keep the dark class files in this directory,

00:03:40.200 --> 00:03:41.450
just as we did here,

00:03:41.450 --> 00:03:45.050
and then again as 1/3 step.

00:03:45.050 --> 00:03:51.700
What you do is you would package all the content in the build classes directory as well as

00:03:51.700 --> 00:03:54.650
the Web content directory as of our file,

00:03:54.650 --> 00:03:58.940
so basically would combine all this and creative our file.

00:03:58.940 --> 00:04:00.590
And for this purpose,

00:04:00.590 --> 00:04:03.830
you have to use the one off the tools available as part of J.

00:04:03.830 --> 00:04:04.270
K.

00:04:04.270 --> 00:04:04.660
I mean,

00:04:04.660 --> 00:04:10.270
you have 10 to recommend in your common Prosser to perform all this for you and even for

00:04:10.270 --> 00:04:10.820
compiling,

00:04:10.820 --> 00:04:16.110
you have to use the Java Sea tool that it's part of Jerrick it to compile the door Java

00:04:16.110 --> 00:04:16.480
files.

00:04:16.480 --> 00:04:21.250
And then you need to manually copy all the class files into the Build Classes directory.

00:04:21.250 --> 00:04:23.640
And once you have this war file,

00:04:23.640 --> 00:04:29.370
finally you'd have to manually copy it into your source Web Apps directory,

00:04:29.370 --> 00:04:33.380
and then he will see this application running.

00:04:33.380 --> 00:04:40.970
But there is a lot off headache in this approach because all the steps needs to be executed

00:04:40.970 --> 00:04:41.730
manually,

00:04:41.730 --> 00:04:45.450
and there's a higher chance off committing an error.

00:04:45.450 --> 00:04:46.340
For example,

00:04:46.340 --> 00:04:51.300
let's say that you missed comparing some of the class is present in the source folder,

00:04:51.300 --> 00:04:55.470
and so it won't get reflected in the way barca that you're going to create.

00:04:55.470 --> 00:04:56.340
Similarly,

00:04:56.340 --> 00:04:59.990
let's say that you forgot to include some of the other files,

00:04:59.990 --> 00:05:02.580
which are off useful in nature for your application.

00:05:02.580 --> 00:05:02.970
And,

00:05:02.970 --> 00:05:03.830
moreover,

00:05:03.830 --> 00:05:08.090
you have to do all these steps every time you make a simple change,

00:05:08.090 --> 00:05:09.420
which is very tedious.

00:05:09.420 --> 00:05:09.940
Job.

00:05:09.940 --> 00:05:12.290
Lot off time goes into it as well,

00:05:12.290 --> 00:05:14.800
as it will result in a lot of frustration,

00:05:14.800 --> 00:05:18.550
especially if you face errors when you run the application,

00:05:18.550 --> 00:05:19.650
etcetera.

00:05:19.650 --> 00:05:23.380
So the answer is and tool.

00:05:23.380 --> 00:05:30.010
What and allows us to do is it will lead us to write an XML file that looks something like

00:05:30.010 --> 00:05:30.270
this.

00:05:30.270 --> 00:05:32.740
This is syntax off it very basic syntax,

00:05:32.740 --> 00:05:36.090
and it would allow you to specify a list off tags,

00:05:36.090 --> 00:05:39.180
and each tag will perform a certain task.

00:05:39.180 --> 00:05:40.450
For example,

00:05:40.450 --> 00:05:42.210
whatever I'm doing here,

00:05:42.210 --> 00:05:47.860
I'm going to write set off tags by following the specifications.

00:05:47.860 --> 00:05:49.510
And once I do that,

00:05:49.510 --> 00:05:51.180
I don't have to manually perform.

00:05:51.180 --> 00:05:56.890
All these steps are just simply run the single script that will do everything for me.

00:05:56.890 --> 00:06:01.160
This file will compel all the source files,

00:06:01.160 --> 00:06:03.090
put them into the bill classes,

00:06:03.090 --> 00:06:06.760
and it would also create a Web archive file.

00:06:06.760 --> 00:06:09.280
It would also take care off deploying the war,

00:06:09.280 --> 00:06:12.850
file into Silver's Robots directory,

00:06:12.850 --> 00:06:15.600
literally everything and in the end.

00:06:15.600 --> 00:06:21.850
We can also instructed to do the cleanup activity by clearing or deleting the build classes

00:06:21.850 --> 00:06:24.380
directory so that the next time we run it,

00:06:24.380 --> 00:06:27.280
we're going to have a fresh set off files.

00:06:27.280 --> 00:06:32.360
So this would basically save a significant amount off time,

00:06:32.360 --> 00:06:33.910
energy and frustration.

00:06:33.910 --> 00:06:35.640
And for this to happen,

00:06:35.640 --> 00:06:37.390
way to download a zip file,

00:06:37.390 --> 00:06:37.870
which,

00:06:37.870 --> 00:06:38.980
when we unzip it,

00:06:38.980 --> 00:06:42.690
we get a lot off script as well as set off libraries,

00:06:42.690 --> 00:06:45.400
which we can news to perform or task.

00:06:45.400 --> 00:06:50.150
So each and every tag that we're going to talk about is associated with a piece off court

00:06:50.150 --> 00:06:52.470
that does some kind of a task,

00:06:52.470 --> 00:06:56.580
and that code is going to recite in the libraries that we're going to download.

00:06:56.580 --> 00:06:58.510
So as part off next video,

00:06:58.510 --> 00:07:01.550
where you will see how to set up the enrollment,

00:07:01.550 --> 00:07:07.860
we'll understand how to set up the ant libraries so that we can write these XML files and

00:07:07.860 --> 00:07:08.680
use one.

00:07:08.680 --> 00:07:09.390
Now,

00:07:09.390 --> 00:07:14.370
if you're using eclipse for a while and creating dynamic projects to create Soviets or JSP

00:07:14.370 --> 00:07:14.970
projects,

00:07:14.970 --> 00:07:17.310
then you're gonna argue,

00:07:17.310 --> 00:07:20.970
saying that you never have to work with and tool Well,

00:07:20.970 --> 00:07:24.170
let me tell you that all these ideas like EC lips,

00:07:24.170 --> 00:07:24.710
not beans,

00:07:24.710 --> 00:07:25.470
etcetera.

00:07:25.470 --> 00:07:31.020
They're all internally going to use a script like this to perform the task,

00:07:31.020 --> 00:07:35.980
and they provide you the convenience to do all this majestic click off a button.

00:07:35.980 --> 00:07:41.240
So it's always important to understand what's happening behind the scenes and understand

00:07:41.240 --> 00:07:44.670
that to like and and moreover,

00:07:44.670 --> 00:07:48.210
the building tools offered by clips are not beans.

00:07:48.210 --> 00:07:51.080
I d will have limited functionality.

00:07:51.080 --> 00:07:51.530
They won't.

00:07:51.530 --> 00:07:53.270
I love you to customize things,

00:07:53.270 --> 00:07:55.450
but if you learn the and technology,

00:07:55.450 --> 00:07:57.680
you can do unlimited things with it.

00:07:57.680 --> 00:08:00.450
There's a lot of flexibility that and offers.

00:08:00.450 --> 00:08:03.950
We simply have unlimited options to play with our project.

00:08:03.950 --> 00:08:08.450
You name any typical towns that you would perform in a Java project.

00:08:08.450 --> 00:08:10.350
He condone it with an script.

00:08:10.350 --> 00:08:11.170
And,

00:08:11.170 --> 00:08:11.700
of course,

00:08:11.700 --> 00:08:14.440
we know have more advanced tools like maven Gradel,

00:08:14.440 --> 00:08:15.250
etcetera.

00:08:15.250 --> 00:08:20.780
But definitely there are certain situations and problems that the modern day tools cannot

00:08:20.780 --> 00:08:21.280
solve.

00:08:21.280 --> 00:08:24.110
But aunt does because it will.

00:08:24.110 --> 00:08:27.120
L love you to do a lot of customization.

00:08:27.120 --> 00:08:31.600
You get more control on your code and your project hope that makes sense.

00:08:31.600 --> 00:08:32.450
So you soon

