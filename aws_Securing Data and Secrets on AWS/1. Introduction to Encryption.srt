1
00:00:01,040 --> 00:00:01,390
Hi.

2
00:00:01,390 --> 00:00:04,910
My name is Danny Jessee, and I would like to welcome you to this course,

3
00:00:04,910 --> 00:00:08,540
Securing Data and Secrets on AWS.

4
00:00:08,540 --> 00:00:14,930
You can reach me on Twitter @dannyjessee. If you're watching this course,

5
00:00:14,930 --> 00:00:17,920
you've probably worked with AWS for a while,

6
00:00:17,920 --> 00:00:21,920
perhaps even in a role focused specifically on cloud security.

7
00:00:21,920 --> 00:00:27,010
Maybe you're getting ready to take the AWS Certified Security Specialty exam.

8
00:00:27,010 --> 00:00:27,970
If so,

9
00:00:27,970 --> 00:00:31,420
I'm here to prepare you to answer the types of questions that may be

10
00:00:31,420 --> 00:00:34,840
asked from the data protection domain of the exam.

11
00:00:34,840 --> 00:00:39,040
And if you aren't currently preparing to take the exam, that's okay too.

12
00:00:39,040 --> 00:00:42,400
We're going to cover best practices for encryption, key

13
00:00:42,400 --> 00:00:47,260
management, and securing information on AWS with an emphasis on

14
00:00:47,260 --> 00:00:50,690
how security engineers use these tools and services in their

15
00:00:50,690 --> 00:00:53,580
day‑to‑day work to protect sensitive data.

16
00:00:53,580 --> 00:01:00,150
So without further ado, let's get started by talking about encryption.

17
00:01:00,150 --> 00:01:04,300
Now I'm sure you already know a thing or two about encryption. In short,

18
00:01:04,300 --> 00:01:08,320
when we have data that we want to secure so that the only people who can see

19
00:01:08,320 --> 00:01:13,180
it are the ones we explicitly allow, we need to encrypt that data.

20
00:01:13,180 --> 00:01:16,870
Encryption uses keys and algorithms to encode usable,

21
00:01:16,870 --> 00:01:21,540
readable data into a form that is neither, making it useless to anyone

22
00:01:21,540 --> 00:01:24,740
who doesn't have access to the key to unlock it.

23
00:01:24,740 --> 00:01:27,320
This is obviously of the utmost importance in a cloud

24
00:01:27,320 --> 00:01:30,420
environment when data isn't living on physical servers

25
00:01:30,420 --> 00:01:33,130
under our control in our data center.

26
00:01:33,130 --> 00:01:34,520
And even if it was,

27
00:01:34,520 --> 00:01:37,740
you would still want to encrypt your data to keep it from falling into the

28
00:01:37,740 --> 00:01:41,570
wrong hands or being intercepted across the network.

29
00:01:41,570 --> 00:01:45,350
The good news is that AWS has designed its tools and services from the

30
00:01:45,350 --> 00:01:49,970
ground up to leverage encryption. And you may be working in an environment

31
00:01:49,970 --> 00:01:53,650
where there are security compliance rules that dictate that you must use a

32
00:01:53,650 --> 00:01:58,330
certain encryption algorithm or provide your own security keys or even

33
00:01:58,330 --> 00:02:02,030
store your keys in a physical tamperproof hardware module, things like

34
00:02:02,030 --> 00:02:06,340
that. Of course, AWS can support all of this too,

35
00:02:06,340 --> 00:02:11,440
and we'll discuss these various options as we go through this module.

36
00:02:11,440 --> 00:02:13,190
But before we go too far,

37
00:02:13,190 --> 00:02:17,100
I want to draw an important distinction that might come up on the exam.

38
00:02:17,100 --> 00:02:21,840
That's the difference between encryption in transit and encryption at rest.

39
00:02:21,840 --> 00:02:25,830
When you see encryption in transit, think in transit over the

40
00:02:25,830 --> 00:02:31,570
network, so using SSL and TLS. To be fully secure,

41
00:02:31,570 --> 00:02:35,840
we are going to want to encrypt the data we're sending up to AWS.

42
00:02:35,840 --> 00:02:38,080
So in the context of S3,

43
00:02:38,080 --> 00:02:43,590
we can enforce this by using a bucket policy that forces secure transport.

44
00:02:43,590 --> 00:02:50,060
And that policy is literally this simple, deny access when any S3

45
00:02:50,060 --> 00:02:56,380
action takes place and AWS secure transport is false.

46
00:02:56,380 --> 00:03:00,410
So now if someone tries to put data in S3 over a non‑secure

47
00:03:00,410 --> 00:03:05,590
connection, so using HTTP instead of an HTTPS endpoint,

48
00:03:05,590 --> 00:03:07,780
that action will be denied.

49
00:03:07,780 --> 00:03:10,900
That's how to enforce encryption in transit.

50
00:03:10,900 --> 00:03:13,990
Everything else we are going to discuss in this module involves

51
00:03:13,990 --> 00:03:17,890
encryption at rest or how we support encrypting data once it's

52
00:03:17,890 --> 00:03:27,000
already in the cloud, whether it's physically stored in S3 or on an EBS volume or in a Redshift cluster, things like that

