WEBVTT
1
00:00:01.080 --> 00:00:02.970
In addition to Parameter Store,

2
00:00:02.970 --> 00:00:07.400
AWS also provides a service called Secrets Manager. And there's a

3
00:00:07.400 --> 00:00:09.860
fair amount of overlap between these two offerings,

4
00:00:09.860 --> 00:00:11.940
so let's quickly compare them.

5
00:00:11.940 --> 00:00:16.510
So just like Parameter Store, AWS Secrets Manager is also a service

6
00:00:16.510 --> 00:00:19.710
that provides centralized storage and management of,

7
00:00:19.710 --> 00:00:22.340
as the name suggests, secrets.

8
00:00:22.340 --> 00:00:24.130
But unlike Parameter Store,

9
00:00:24.130 --> 00:00:27.660
which offers both secure string and string parameter types

10
00:00:27.660 --> 00:00:30.510
for encrypted and unencrypted parameters,

11
00:00:30.510 --> 00:00:34.840
Secrets Manager will automatically encrypt every parameter you store in it.

12
00:00:34.840 --> 00:00:39.440
And this uses KMS just like Parameter Store. Secrets Manager also

13
00:00:39.440 --> 00:00:42.590
allows you to share secrets between AWS accounts,

14
00:00:42.590 --> 00:00:46.370
where Parameter Store is only within a single account.

15
00:00:46.370 --> 00:00:49.330
There is also a cost associated with Secrets Manager,

16
00:00:49.330 --> 00:00:55.030
which is currently 40 cents per parameter and 5 cents per 10,000 API calls.

17
00:00:55.030 --> 00:00:58.510
Remember that the standard tier of Parameter Store allows you to store

18
00:00:58.510 --> 00:01:02.870
10,000 parameters per region in your account for free.

19
00:01:02.870 --> 00:01:05.150
So with Parameter Store offering the ability to

20
00:01:05.150 --> 00:01:07.480
store encrypted parameters for free,

21
00:01:07.480 --> 00:01:11.240
why would you ever choose Secrets Manager over Parameter Store?

22
00:01:11.240 --> 00:01:11.690
Well,

23
00:01:11.690 --> 00:01:15.310
one use case where Secrets Manager is an especially good choice is

24
00:01:15.310 --> 00:01:18.520
when you're dealing with database credentials, particularly when

25
00:01:18.520 --> 00:01:22.560
you're working with RDS. Secrets Manager offers something called

26
00:01:22.560 --> 00:01:25.290
automatic credential rotation, which,

27
00:01:25.290 --> 00:01:30.280
similar to the key material rotation we discussed for CMKs in the last module,

28
00:01:30.280 --> 00:01:32.950
will update the credentials associated with your RDS

29
00:01:32.950 --> 00:01:35.870
database on a schedule that you define,

30
00:01:35.870 --> 00:01:42.100
which can be 30, 60, 90, or any number of days up to 365, and then

31
00:01:42.100 --> 00:01:46.040
automatically apply the changes directly in RDS.

32
00:01:46.040 --> 00:01:48.260
So this is great because not only do you not have

33
00:01:48.260 --> 00:01:50.440
to update your application code,

34
00:01:50.440 --> 00:01:53.610
you don't even need to update the secret itself anymore.

35
00:01:53.610 --> 00:01:55.460
Now there is one gotcha here,

36
00:01:55.460 --> 00:01:58.480
and that's whenever you enable credential rotation, that

37
00:01:58.480 --> 00:02:01.260
credential is always rotated immediately.

38
00:02:01.260 --> 00:02:04.920
So even if I said to rotate this credential every 90 days,

39
00:02:04.920 --> 00:02:09.000
as soon as I enable it, that credential will be rotated right away.

40
00:02:09.000 --> 00:02:12.800
And then it will be rotated again every 90 days after that.

41
00:02:12.800 --> 00:02:16.460
And even if you aren't using RDS, Secrets Manager still allows you

42
00:02:16.460 --> 00:02:20.080
to define a custom lambda function to handle credential rotation

43
00:02:20.080 --> 00:02:22.280
for any other secrets you may have.

44
00:02:22.280 --> 00:02:26.200
So as long as you can define the logic for how to rotate your credentials,

45
00:02:26.200 --> 00:02:29.740
Secrets Manager will handle the credential rotation for you.

46
00:02:29.740 --> 00:02:32.820
So now I'll show you the process for storing a secret using

47
00:02:32.820 --> 00:02:38.700
Secrets Manager. In this demo, we'll store our connection

48
00:02:38.700 --> 00:02:42.240
string secret in AWS Secrets Manager.

49
00:02:42.240 --> 00:02:46.250
So now I'll go to Secrets Manager, and here you'll see there is a

50
00:02:46.250 --> 00:02:51.610
cost associated with each secret, so 40 cents per secret per month

51
00:02:51.610 --> 00:02:54.940
and 5 cents per 10,000 API calls.

52
00:02:54.940 --> 00:02:58.680
I'm going to click Store a new secret, and here you see that Secrets Manager

53
00:02:58.680 --> 00:03:02.240
is definitely geared towards storing database credentials.

54
00:03:02.240 --> 00:03:06.680
We have options for RDS, DocumentDB, and Redshift built in.

55
00:03:06.680 --> 00:03:09.140
But you see, I can also store other types of secrets,

56
00:03:09.140 --> 00:03:12.220
which is what I'm going to select here. And where we were just

57
00:03:12.220 --> 00:03:16.220
storing a parameter value before in Parameter Store, here we are

58
00:03:16.220 --> 00:03:19.640
going to specify a key name and a value.

59
00:03:19.640 --> 00:03:23.810
So I'll give my key a name of connectionstring and paste in my

60
00:03:23.810 --> 00:03:28.170
string for the value here. And I can click Plaintext and see the

61
00:03:28.170 --> 00:03:31.040
JSON representation of my secret.

62
00:03:31.040 --> 00:03:32.210
And if I scroll down,

63
00:03:32.210 --> 00:03:36.380
you see I can choose the KMS key used to encrypt this secret.

64
00:03:36.380 --> 00:03:40.420
So this is just like a secure string parameter in Parameter Store.

65
00:03:40.420 --> 00:03:45.800
I'll choose mycmk key again and click Next. And I'll use

66
00:03:45.800 --> 00:03:48.440
the same name as before for this secret,

67
00:03:48.440 --> 00:03:51.880
so /dev/dbconnectionstring.

68
00:03:51.880 --> 00:03:53.900
But I could give this any name.

69
00:03:53.900 --> 00:03:57.940
I'll go and skipped the description and tags and click Next.

70
00:03:57.940 --> 00:04:02.080
So on this screen, we see the options for automatic rotation.

71
00:04:02.080 --> 00:04:03.960
So you see I can enable it here.

72
00:04:03.960 --> 00:04:08.040
And if I do enable it, I can choose the rotation interval, so 30,

73
00:04:08.040 --> 00:04:13.680
60, 90 days or a custom number up to 365. And then I can select a

74
00:04:13.680 --> 00:04:16.840
Lambda function to perform the rotation.

75
00:04:16.840 --> 00:04:19.670
So keep in mind if I was storing RDS credentials here,

76
00:04:19.670 --> 00:04:23.070
I wouldn't need to choose a Lambda function because Secrets Manager

77
00:04:23.070 --> 00:04:26.630
already knows how to automatically rotate those credentials.

78
00:04:26.630 --> 00:04:30.420
But don't forget that if I were to enable credential rotation here,

79
00:04:30.420 --> 00:04:33.540
the credential would be rotated immediately before being

80
00:04:33.540 --> 00:04:36.740
rotated again based on the interval I select.

81
00:04:36.740 --> 00:04:41.510
But for this example, I'll just disable automatic rotation and click Next.

82
00:04:41.510 --> 00:04:42.530
So here on this screen,

83
00:04:42.530 --> 00:04:46.590
we see AWS has actually provided us with some sample code that

84
00:04:46.590 --> 00:04:49.400
I could actually just paste directly into my application to

85
00:04:49.400 --> 00:04:52.340
help me retrieve this secret value.

86
00:04:52.340 --> 00:04:56.140
So I'll click Store, and now my secret has been created.

87
00:04:56.140 --> 00:04:56.780
So finally,

88
00:04:56.780 --> 00:04:59.360
I'll just go back to my command line and show you how we

89
00:04:59.360 --> 00:05:02.340
retrieve this secret using the CLI.

90
00:05:02.340 --> 00:05:03.310
And in this case,

91
00:05:03.310 --> 00:05:10.430
the command is aws secretsmanager get‑secret‑value with

92
00:05:10.430 --> 00:05:14.500
‑‑secret‑id and the name of our secret.

93
00:05:14.500 --> 00:05:16.900
And here in the JSON that comes back,

94
00:05:16.900 --> 00:05:21.830
you see the secret string containing our key‑value pair. And notice that

95
00:05:21.830 --> 00:05:25.960
unlike with Parameter Store where we had to specify with decryption or

96
00:05:25.960 --> 00:05:29.430
else we would only see an encrypted string, Secrets Manager

97
00:05:29.430 --> 00:05:32.240
automatically decrypts the parameter for us.

98
00:05:32.240 --> 00:05:32.790
And of course,

99
00:05:32.790 --> 00:05:36.680
this only works because I have permission to use the KMS key we

100
00:05:36.680 --> 00:05:39.750
specified when we created the secret, or I wouldn't be able to

101
00:05:39.750 --> 00:05:42.180
see this unencrypted string at all.

102
00:05:42.180 --> 00:05:49.000
So now we've seen how we can use Parameter Store and Secrets Manager to securely store and manage our secrets.

