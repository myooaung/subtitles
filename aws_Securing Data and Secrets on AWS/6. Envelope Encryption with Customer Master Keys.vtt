WEBVTT
1
00:00:01.140 --> 00:00:02.500
Now we've seen KMS,

2
00:00:02.500 --> 00:00:05.580
and we know how to create CMKs, but what is something

3
00:00:05.580 --> 00:00:07.730
we can practically do with them?

4
00:00:07.730 --> 00:00:10.490
Whether you're a developer or a security architect,

5
00:00:10.490 --> 00:00:13.540
at some point you're going to need to encrypt some data.

6
00:00:13.540 --> 00:00:18.220
Maybe it's a connection string or a password or some confidential files.

7
00:00:18.220 --> 00:00:22.700
And of course, you've seen how we can encrypt entire databases or EBS volumes,

8
00:00:22.700 --> 00:00:25.230
for example, within AWS.

9
00:00:25.230 --> 00:00:27.430
But let's see how we actually go about encrypting

10
00:00:27.430 --> 00:00:30.600
specific secrets and pieces of data.

11
00:00:30.600 --> 00:00:33.380
So you might think that you just choose a CMK and

12
00:00:33.380 --> 00:00:35.540
tell it to encrypt this and be done.

13
00:00:35.540 --> 00:00:37.890
But it's not always that simple.

14
00:00:37.890 --> 00:00:41.440
It turns out these master keys have a size limitation for the amount

15
00:00:41.440 --> 00:00:45.140
of data that they can directly encrypt or decrypt,

16
00:00:45.140 --> 00:00:47.740
and that limit is 4KB.

17
00:00:47.740 --> 00:00:50.170
So that's great if I'm encrypting something like a connection

18
00:00:50.170 --> 00:00:54.040
string or a password or maybe a really small file.

19
00:00:54.040 --> 00:00:58.370
But how can we use KMS to encrypt megabytes or gigabytes of data, like

20
00:00:58.370 --> 00:01:03.230
huge objects in S3 or an entire database or file system?

21
00:01:03.230 --> 00:01:07.140
Well the answer lies in something called envelope encryption.

22
00:01:07.140 --> 00:01:12.560
Envelope encryption uses master keys and data keys, so let's define these.

23
00:01:12.560 --> 00:01:19.620
Master keys, your CMKs, are used to generate data keys, and it's just an API

24
00:01:19.620 --> 00:01:25.860
call to generate a data key for a CMK. But data keys don't have the 4KBâ€‘size

25
00:01:25.860 --> 00:01:28.940
limit for encrypting and decrypting data.

26
00:01:28.940 --> 00:01:33.040
So what we do is use the data key to encrypt our data.

27
00:01:33.040 --> 00:01:36.690
Then we use the master key to encrypt the data key,

28
00:01:36.690 --> 00:01:40.950
and we store it alongside the data we just encrypted with that same data

29
00:01:40.950 --> 00:01:45.680
key, so essentially within the same envelope, hence the name envelope

30
00:01:45.680 --> 00:01:48.920
encryption. And on the other end, to decrypt,

31
00:01:48.920 --> 00:01:51.040
we just reverse the process.

32
00:01:51.040 --> 00:02:00.000
We use the master key to decrypt the encrypted data key, and then we use the decrypted data key to decrypt the data.

