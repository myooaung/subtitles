WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:04.320
The project structure which we have here can look a bit

00:00:04.320 --> 00:00:08.290
intimidating if you're used to using static websites.

00:00:08.290 --> 00:00:11.540
However, it's not too bad once you get used to it.

00:00:11.540 --> 00:00:14.520
If we open up our sidebar on the left-hand side,

00:00:14.520 --> 00:00:16.365
I'll make it a little bit bigger.

00:00:16.365 --> 00:00:19.395
From the top we have the bin folder,

00:00:19.395 --> 00:00:22.140
which is used for any startup scripts.

00:00:22.140 --> 00:00:25.460
We touched on this in the last video where we seen these start

00:00:25.460 --> 00:00:28.950
script inside of the package.json file,

00:00:28.950 --> 00:00:32.460
which then points to this www file,

00:00:32.460 --> 00:00:35.055
which contains our startup scripts.

00:00:35.055 --> 00:00:39.565
This file inside here sets the port number we want to use,

00:00:39.565 --> 00:00:46.045
and also goes ahead and sets up a HTTP server to then serve up our projects.

00:00:46.045 --> 00:00:51.545
Under this we have our node modules folder, just down here.

00:00:51.545 --> 00:00:57.145
This contains all of the packages or modules which our application needs.

00:00:57.145 --> 00:01:00.380
Each time we install a module from MPM,

00:01:00.380 --> 00:01:04.280
it will then appear inside of here and also be listed

00:01:04.280 --> 00:01:09.125
inside of the package.json file as a dependency tool.

00:01:09.125 --> 00:01:13.655
Since these modules also listed in the package.json file,

00:01:13.655 --> 00:01:18.595
we can even remove or delete this full node modules folder,

00:01:18.595 --> 00:01:21.865
and an MPM install command will then again,

00:01:21.865 --> 00:01:23.900
add this back to our project.

00:01:23.900 --> 00:01:28.005
This is useful for things such as storing our project on GitHub,

00:01:28.005 --> 00:01:32.420
as the node modules folder can often get really big and we don't want

00:01:32.420 --> 00:01:38.410
a huge folder like this saving to GitHub or elsewhere if we don't need to.

00:01:38.410 --> 00:01:41.555
Download this, if you're closing node modules,

00:01:41.555 --> 00:01:44.155
we also have a public folder.

00:01:44.155 --> 00:01:47.360
The public folder contains our static files,

00:01:47.360 --> 00:01:49.310
such as any images,

00:01:49.310 --> 00:01:55.630
any style sheets, and also any JavaScript files or libraries for the front end.

00:01:55.630 --> 00:01:58.485
Here we can add our project images,

00:01:58.485 --> 00:02:01.755
any custom third-party libraries or frameworks

00:02:01.755 --> 00:02:05.820
such as Bootstrap CSS and JavaScript files.

00:02:05.820 --> 00:02:10.400
This folder is not for any JavaScript files or the server,

00:02:10.400 --> 00:02:15.320
such as our page templates or anything with sensitive information,

00:02:15.320 --> 00:02:18.250
such as an E configuration files.

00:02:18.250 --> 00:02:20.190
Under the public folder,

00:02:20.190 --> 00:02:22.665
we then have our routes folder.

00:02:22.665 --> 00:02:26.690
Each folder will contain one or more JavaScript files,

00:02:26.690 --> 00:02:31.755
which handle what to do when a user visits a certain URL.

00:02:31.755 --> 00:02:35.465
As an example, if we open up this index.js,

00:02:35.465 --> 00:02:37.025
and I close the sidebar,

00:02:37.025 --> 00:02:39.710
you will see the router.get,

00:02:39.710 --> 00:02:41.915
which handles the homepage.

00:02:41.915 --> 00:02:46.585
Inside a router.get, we first see the route of forward slash,

00:02:46.585 --> 00:02:49.490
so when the user visits the home router or forward slash,

00:02:49.490 --> 00:02:52.775
these enrages a function which then goes ahead and

00:02:52.775 --> 00:02:57.095
renders the index templates, which we want you use.

00:02:57.095 --> 00:03:03.965
Then after this we have a objects where we'll pass the page title of simply express,

00:03:03.965 --> 00:03:06.995
and later on we'll also pass different information

00:03:06.995 --> 00:03:10.820
such as variables to our page template too.

00:03:10.820 --> 00:03:19.245
This moves on to the views folder if we open a sidebar and then open up our views,

00:03:19.245 --> 00:03:22.440
which is a view which the user sees.

00:03:22.440 --> 00:03:25.750
It contains all page templates which are created

00:03:25.750 --> 00:03:29.005
on the server before then sending back to us.

00:03:29.005 --> 00:03:32.720
All these files have the file extension of.pug.

00:03:32.720 --> 00:03:36.190
This is because we're using the pug templating engine,

00:03:36.190 --> 00:03:38.620
which also used to be known as J2.

00:03:38.620 --> 00:03:45.245
You may come across some j references in the documentation or one searching on the web.

00:03:45.245 --> 00:03:50.560
You can use other templating languages if you prefer, such as EJS.

00:03:50.560 --> 00:03:54.575
But this will be up to you to implement if you want to make this change.

00:03:54.575 --> 00:03:57.820
If we'll open up the index.pug template.

00:03:57.820 --> 00:04:02.260
This is a template being called from the router page we've seen before,

00:04:02.260 --> 00:04:08.460
so this is the index which rendered when a user visits his home route.

00:04:08.510 --> 00:04:12.870
Block and extends, which we see at the top of the file,

00:04:12.870 --> 00:04:14.470
we will look at this soon.

00:04:14.470 --> 00:04:19.880
But it's h1 and also p elements are what we see when we visit the homepage.

00:04:19.880 --> 00:04:25.465
We have the title and then the text of welcome to, and then the title.

00:04:25.465 --> 00:04:27.840
Inside of Chrome, if open this up,

00:04:27.840 --> 00:04:30.825
this is the text we see inside of here.

00:04:30.825 --> 00:04:36.395
H1 equals title, is the title which is passed from the router.

00:04:36.395 --> 00:04:39.950
Again in index.js, this is the title we

00:04:39.950 --> 00:04:44.350
see just after we declare which template we want to use.

00:04:44.350 --> 00:04:47.600
The text of express is then being passed to

00:04:47.600 --> 00:04:52.220
our index and that's why we see the text inside the browser.

00:04:52.220 --> 00:04:59.045
Below this we have a p elements with a text of welcome to and this will be express.

00:04:59.045 --> 00:05:03.280
We can also use this as a variable inside of a string.

00:05:03.280 --> 00:05:07.985
We'll cover all of these templates in syntax in the next section.

00:05:07.985 --> 00:05:12.235
Down after the views we have the app.js file.

00:05:12.235 --> 00:05:16.260
This app.js is the app's starting point

00:05:16.260 --> 00:05:20.000
and basically the main page which connects everything together.

00:05:20.000 --> 00:05:24.635
It loads up everything we need for the project and by default import

00:05:24.635 --> 00:05:30.160
any packages we need lope at the top from the node modules folder.

00:05:30.160 --> 00:05:33.965
It also import our routes from our routes folder,

00:05:33.965 --> 00:05:35.240
which we can see here,

00:05:35.240 --> 00:05:36.770
by these file paths,

00:05:36.770 --> 00:05:41.020
and then stores them inside of a variable we see as below.

00:05:41.020 --> 00:05:43.250
It then goes ahead and kicks off

00:05:43.250 --> 00:05:48.550
our new express app instance and assigns it to a variable called app.

00:05:48.550 --> 00:05:51.905
After this we set pug view engine,

00:05:51.905 --> 00:05:57.100
which is used here, which declares which templating language we wants to use.

00:05:57.100 --> 00:06:01.085
After this we have app.use on various lines.

00:06:01.085 --> 00:06:05.020
This is used to mount any middleware to our application.

00:06:05.020 --> 00:06:08.105
We'll look a middleware in more detail later.

00:06:08.105 --> 00:06:10.820
But basically middleware is a series of

00:06:10.820 --> 00:06:14.885
actions or functions which we can run our code through.

00:06:14.885 --> 00:06:18.005
An example could be when a user logs in,

00:06:18.005 --> 00:06:20.060
we could add some middleware to validate

00:06:20.060 --> 00:06:24.080
user's information before moving along to the next stage.

00:06:24.080 --> 00:06:29.860
But again we will look more into this when we are at our own middleware to the project.

00:06:29.860 --> 00:06:33.410
If we scroll down, next up we have our routes,

00:06:33.410 --> 00:06:38.495
which again is middleware and these are the two variables which we had before,

00:06:38.495 --> 00:06:40.310
which is just about the top.

00:06:40.310 --> 00:06:45.000
These are the variables which link to our file path for the router.

00:06:45.430 --> 00:06:47.660
It would declare one wants to use

00:06:47.660 --> 00:06:52.210
our index router when the user visits any of the home routes,

00:06:52.210 --> 00:06:59.025
and we also have a default user's route too which has been setup with Express Generator,

00:06:59.025 --> 00:07:04.945
and these routes are stored inside our index and uses.js files.

00:07:04.945 --> 00:07:08.870
Scrolling further down, we also have some error handling,

00:07:08.870 --> 00:07:10.655
which again is middleware.

00:07:10.655 --> 00:07:13.415
App.use without a file path,

00:07:13.415 --> 00:07:18.925
will make these error handling functions available for all routes in our site.

00:07:18.925 --> 00:07:24.355
Finally down at the bottom we have module.exports equals app.

00:07:24.355 --> 00:07:29.090
This will make this file available in other parts of our application if needed.

00:07:29.090 --> 00:07:31.144
Back to our sidebar,

00:07:31.144 --> 00:07:34.700
the last files are the package.json files.

00:07:34.700 --> 00:07:37.655
Inside of our package.json,

00:07:37.655 --> 00:07:39.740
which we've briefly looked up.

00:07:39.740 --> 00:07:42.889
We have the information about our project,

00:07:42.889 --> 00:07:47.545
we have our startup scripts to run our web server.

00:07:47.545 --> 00:07:49.955
We can also add our own scripts here too,

00:07:49.955 --> 00:07:54.490
as a shortcut to type in out this longer command in the terminal.

00:07:54.490 --> 00:08:00.140
We also have the name which we set and also the version number which we can set too.

00:08:00.140 --> 00:08:03.305
Further down, we have the dependencies which we looked at before.

00:08:03.305 --> 00:08:04.880
These are the node modules,

00:08:04.880 --> 00:08:09.380
mid file projects and we can also add dev dependencies too,

00:08:09.380 --> 00:08:12.440
which is the modules we need for development only,

00:08:12.440 --> 00:08:15.395
and these will be ignored for production.

00:08:15.395 --> 00:08:18.710
Soon we'll be installing in the node mom package,

00:08:18.710 --> 00:08:22.640
which will be a dev dependency so I'll show you how to do that soon.

00:08:22.640 --> 00:08:24.230
If we open up the sidebar,

00:08:24.230 --> 00:08:27.295
we also have a package.json.

00:08:27.295 --> 00:08:30.560
For example, inside of our package.json,

00:08:30.560 --> 00:08:34.700
we have the Express dependency, which is just here.

00:08:34.700 --> 00:08:42.145
This says currently at the time of creating this app expresses our version 4.16.0.

00:08:42.145 --> 00:08:45.455
The tilda icon you see just at the beginning here,

00:08:45.455 --> 00:08:47.780
means we won't express version four,

00:08:47.780 --> 00:08:51.605
but we also want any minor update of versions two.

00:08:51.605 --> 00:08:56.785
Ie we can take 4.17 or 4.18 and so on.

00:08:56.785 --> 00:09:01.985
With this in mind, if we go over to this package-lock.json.

00:09:01.985 --> 00:09:06.140
And then if we do a search for Express,

00:09:06.140 --> 00:09:09.860
but then taken to the Express section of this file,

00:09:09.860 --> 00:09:15.440
we see the actual version is locked in at 4.16.3.

00:09:15.440 --> 00:09:19.465
Also, this module itself has dependencies too.

00:09:19.465 --> 00:09:25.570
If we close down this terminal and then scroll down you

00:09:25.570 --> 00:09:28.370
see we have this required section just here and

00:09:28.370 --> 00:09:31.505
express also requires a lot of different modules too,

00:09:31.505 --> 00:09:34.299
such as cookie, debug,

00:09:34.299 --> 00:09:37.860
escape HTML and also lots more.

00:09:37.860 --> 00:09:42.905
This is why when we go over to our node modules folder and open this up,

00:09:42.905 --> 00:09:46.100
there is lot more folders listed here or

00:09:46.100 --> 00:09:52.590
Lamar modules than we originally seen if we just go to the package.js.

00:09:53.830 --> 00:09:58.730
Let's close it down. All of our dependencies inside this

00:09:58.730 --> 00:10:06.100
package.js also has dependencies too and these are listed in the package-lock.json.

00:10:06.100 --> 00:10:10.625
This is an overview of what is included in the project to begin with,

00:10:10.625 --> 00:10:13.070
I know we've said it quite a few times already,

00:10:13.070 --> 00:10:17.050
but really don't get overwhelmed by all of this if it's new to you.

00:10:17.050 --> 00:10:22.470
We'll become a lot more familiar with the setup of the next few sections.
