WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.680 --> 00:00:06.525
The aggregation pipeline is an interesting feature of MongoDB.

00:00:06.525 --> 00:00:11.700
It basically allows us to process data one stage at a time.

00:00:11.700 --> 00:00:15.705
Currently, only Mongo documentation from before.

00:00:15.705 --> 00:00:17.820
If we go to the menu on the left,

00:00:17.820 --> 00:00:22.110
we can go up to the aggregation section, click on this.

00:00:22.110 --> 00:00:26.250
If we scroll down, we see a diagram which has an example of

00:00:26.250 --> 00:00:30.464
how we can use the aggregation pipeline in our projects.

00:00:30.464 --> 00:00:34.035
This example uses a collection called orders,

00:00:34.035 --> 00:00:35.625
which we can see here.

00:00:35.625 --> 00:00:38.715
Its comparable to our hotels selection,

00:00:38.715 --> 00:00:41.094
which we have in our database.

00:00:41.094 --> 00:00:45.500
This image shows free stages of the pipeline which

00:00:45.500 --> 00:00:50.510
results in the data we eventually want over on the right-hand side.

00:00:50.510 --> 00:00:55.129
Each stage in the operation could do things such as filtering,

00:00:55.129 --> 00:01:01.180
grouping, or sorting documents until we end up with the correct data.

00:01:01.180 --> 00:01:07.550
The first stage in this example here shows four records inside of our collection.

00:01:07.550 --> 00:01:10.260
We then sets a matching stage,

00:01:10.260 --> 00:01:15.520
we then declare that we only want to match any documents with the stars code of A.

00:01:15.520 --> 00:01:17.555
Over on the left-hand side,

00:01:17.555 --> 00:01:20.630
we see the only freedom of this A code,

00:01:20.630 --> 00:01:24.195
and the last one has D. Therefore,

00:01:24.195 --> 00:01:26.985
only three of these four documents can match,

00:01:26.985 --> 00:01:29.660
then these three move on to the next stage,

00:01:29.660 --> 00:01:32.285
which is in the middle of this diagram.

00:01:32.285 --> 00:01:36.485
The stages are grouped together by the customer ID,

00:01:36.485 --> 00:01:38.945
which we set here with the group stage,

00:01:38.945 --> 00:01:41.675
where we're grouping with an ID field.

00:01:41.675 --> 00:01:44.530
These two have the same Customer ID.

00:01:44.530 --> 00:01:47.540
Therefore, these are grouped into the same results.

00:01:47.540 --> 00:01:49.985
Then the third one is unique too.

00:01:49.985 --> 00:01:52.730
We now filter down to two results.

00:01:52.730 --> 00:01:55.655
The second part of this stage is to group together

00:01:55.655 --> 00:02:00.830
the total amount of these two orders the same customer has placed.

00:02:00.830 --> 00:02:04.970
This is what we see in the total of the final stage.

00:02:04.970 --> 00:02:09.125
To find out more about what we can do for each of these stages,

00:02:09.125 --> 00:02:14.105
we can click on the sidebar and go down to aggregation reference,

00:02:14.105 --> 00:02:20.025
then aggregation pipeline quick reference, then scroll down.

00:02:20.025 --> 00:02:23.720
Here, we see a list of all the stages which we can use.

00:02:23.720 --> 00:02:26.615
We've already seen some of these in the examples before,

00:02:26.615 --> 00:02:28.940
such as the group stage.

00:02:28.940 --> 00:02:31.040
We have group just here,

00:02:31.040 --> 00:02:33.185
and also scrolling further down.

00:02:33.185 --> 00:02:36.050
This is the match stage which we've also seen.

00:02:36.050 --> 00:02:41.225
You can click on any of these listed stages and find out what each one does.

00:02:41.225 --> 00:02:44.630
Or I'm going to run through some of these examples now,

00:02:44.630 --> 00:02:46.780
inside of our projects.

00:02:46.780 --> 00:02:52.215
If we go over to the hotel controller.js file,

00:02:52.215 --> 00:02:58.525
we have functions to get all of the hotels and all of the countries in the database.

00:02:58.525 --> 00:03:00.960
Which of these two just here,

00:03:00.960 --> 00:03:04.880
but what if we want to be a little bit more specific about

00:03:04.880 --> 00:03:08.800
the data which we got back on the homepage.

00:03:08.800 --> 00:03:12.995
I also want to show these hotels both limit the results

00:03:12.995 --> 00:03:17.525
to be just nine so we don't have an overcrowded homepage.

00:03:17.525 --> 00:03:21.310
Once our database stores a lot more different records.

00:03:21.310 --> 00:03:24.375
Also the same for the countries too.

00:03:24.375 --> 00:03:27.335
For these we can use the aggregation pipeline

00:03:27.335 --> 00:03:29.960
to filter down these results for the homepage.

00:03:29.960 --> 00:03:34.490
Let's create some filters to filter down these values.

00:03:34.490 --> 00:03:41.339
Exports.home, I'm going to call this function the homepage filters.

00:03:41.770 --> 00:03:46.550
We set this up as an async function so we can use await,

00:03:46.550 --> 00:03:48.230
pass in the request,

00:03:48.230 --> 00:03:52.020
the response, and also next.

00:03:52.670 --> 00:04:00.940
Then a try-catch block to handle any errors, passing the error.

00:04:01.160 --> 00:04:05.440
Then call next with this error.

00:04:05.900 --> 00:04:12.635
Let's first deal with filtering the hotels inside of the try block at the top.

00:04:12.635 --> 00:04:15.250
We can use the aggregation method.

00:04:15.250 --> 00:04:19.625
First of all, let's set up a constant to hold these hotels in.

00:04:19.625 --> 00:04:25.965
Const hotels equals awaits our hotel model.

00:04:25.965 --> 00:04:28.595
Then we call a method on our hotel model,

00:04:28.595 --> 00:04:33.670
just like we did above with distinct and also for the find method.

00:04:33.670 --> 00:04:41.580
But this time now we use hotel.aggregates with a semicolon at the end.

00:04:41.580 --> 00:04:46.110
This takes in an array of the various stages.

00:04:46.110 --> 00:04:48.410
Add an empty array inside here.

00:04:48.410 --> 00:04:51.980
The first stage I'm going to use is the match stage.

00:04:51.980 --> 00:04:56.175
Open up the curly braces, $ symbol match.

00:04:56.175 --> 00:04:59.780
Then we want to match the hotels which are available.

00:04:59.780 --> 00:05:05.100
Set the available fields to be true,

00:05:05.150 --> 00:05:07.620
then add a comma the end.

00:05:07.620 --> 00:05:10.920
Next step, so the homepage it doesn't get too crowded.

00:05:10.920 --> 00:05:13.065
The $ sign sample stage.

00:05:13.065 --> 00:05:17.165
Will randomly select the number of documents which we specified.

00:05:17.165 --> 00:05:24.950
$ sign sample, we can set this sample size to only return nine documents.

00:05:24.950 --> 00:05:28.655
You can of course change this to be any value which you prefer.

00:05:28.655 --> 00:05:34.105
This aggregation which we setup will return towards nine random hotels,

00:05:34.105 --> 00:05:37.300
which have their availability set to two.

00:05:37.300 --> 00:05:40.330
We can now do a similar thing with the countries.

00:05:40.330 --> 00:05:44.995
We also only want to show nine random countries on the homepage too.

00:05:44.995 --> 00:05:47.590
Just like earlier when we were dealing with countries,

00:05:47.590 --> 00:05:48.805
this needs to again,

00:05:48.805 --> 00:05:51.310
only return each country once.

00:05:51.310 --> 00:05:54.865
Even if there's more than one hotel per country.

00:05:54.865 --> 00:05:57.400
To do this, we have the group stage.

00:05:57.400 --> 00:06:02.635
Let's set up a number constant this time called countries,

00:06:02.635 --> 00:06:05.590
set this to be hotel.

00:06:05.590 --> 00:06:11.450
aggregate, passing our array.

00:06:12.380 --> 00:06:17.730
The first one is going to be the group stage, $ symbol group.

00:06:19.550 --> 00:06:21.800
When we're using the group stage,

00:06:21.800 --> 00:06:26.525
we also need to pass in an ID with -id is equal to

00:06:26.525 --> 00:06:32.500
output our documents with an ID field which contains the distinct group by a key.

00:06:32.500 --> 00:06:38.705
This field is mandatory and we're going to group this by a key name of $ symbol country.

00:06:38.705 --> 00:06:44.420
This will group all of our hotels by their country and then separated by a comma.

00:06:44.420 --> 00:06:48.465
We can again setup our sample, the sample,

00:06:48.465 --> 00:06:54.240
just like the hotels is going to return the sample size of nine countries.

00:06:54.240 --> 00:06:57.890
The group stage will take in all countries as an input,

00:06:57.890 --> 00:07:00.740
then I'll put one distinct value.

00:07:00.740 --> 00:07:03.950
For example, if there are two hotels in the USA,

00:07:03.950 --> 00:07:08.890
we only get the value of USA ones inside of our array.

00:07:08.890 --> 00:07:10.985
Now we've created our filters.

00:07:10.985 --> 00:07:14.030
We want this data to be displayed on the homepage.

00:07:14.030 --> 00:07:16.285
Let's go and start this over in the index.js.

00:07:16.285 --> 00:07:19.760
Yes. We can change the controller up at the top.

00:07:19.760 --> 00:07:22.070
So for the forward slash home route,

00:07:22.070 --> 00:07:25.910
instead of using the hotel controller to homepage.

00:07:25.910 --> 00:07:29.300
We can change this to be the homepage filters,

00:07:29.300 --> 00:07:33.215
which we'll setup, back over in the hotel controller.

00:07:33.215 --> 00:07:37.875
If we now scroll up and find this export.homepage,

00:07:37.875 --> 00:07:41.135
we don't need this anymore, so we can comment this out.

00:07:41.135 --> 00:07:44.915
Finally down in our filters, down at the bottom,

00:07:44.915 --> 00:07:49.685
the final stage of this try block is to do a res.render.

00:07:49.685 --> 00:07:52.625
We want to render our index page,

00:07:52.625 --> 00:07:54.545
which is the homepage.

00:07:54.545 --> 00:07:57.815
Then inside here we're going to pass in our two values,

00:07:57.815 --> 00:08:00.320
which is the hotels and the countries.

00:08:00.320 --> 00:08:03.380
We can loop through these on the homepage,

00:08:03.380 --> 00:08:06.350
parsing the countries and then now

00:08:06.350 --> 00:08:12.980
hotels and actually we also need to await of countries too.

00:08:12.980 --> 00:08:14.630
So as a side note,

00:08:14.630 --> 00:08:17.180
awaiting to promises like this,

00:08:17.180 --> 00:08:22.505
using await here and also await here is not a great idea.

00:08:22.505 --> 00:08:26.570
This is something which we'll come back to you and fix later on.

00:08:26.570 --> 00:08:29.735
For now though, over in our index or poke file,

00:08:29.735 --> 00:08:32.929
we can deal with these countries and also the hotels.

00:08:32.929 --> 00:08:36.170
So for now though over in our index.pug file,

00:08:36.170 --> 00:08:40.145
we can now deal with these countries and hotels data.

00:08:40.145 --> 00:08:43.685
So go to views and then index.pug.

00:08:43.685 --> 00:08:45.845
Let's close the sidebar.

00:08:45.845 --> 00:08:48.695
At the moment if we go to our home route.

00:08:48.695 --> 00:08:51.510
So click on the logo at the top.

00:08:51.670 --> 00:08:55.490
On this homepage, we have an error because we're not yet

00:08:55.490 --> 00:08:59.390
parsing any country detail to this hotel mix in.

00:08:59.390 --> 00:09:03.110
Let's now go ahead and loop through all of the data which will now be in

00:09:03.110 --> 00:09:07.385
past and then we can display this hotel mix-in for each one.

00:09:07.385 --> 00:09:10.760
After our text of CO,

00:09:10.760 --> 00:09:12.950
create on another list,

00:09:12.950 --> 00:09:18.185
we can then loop through all hotels with each hotel in hotels.

00:09:18.185 --> 00:09:24.215
Remember hotels is the data which has been passed to this template just here.

00:09:24.215 --> 00:09:27.200
So each hotel in hotels.

00:09:27.200 --> 00:09:28.880
For each one in the database,

00:09:28.880 --> 00:09:33.440
we also want to display this mix in and as well as displaying this,

00:09:33.440 --> 00:09:37.040
we also need to pass in the individual hotel data,

00:09:37.040 --> 00:09:40.085
so this is available in the mix in.

00:09:40.085 --> 00:09:47.310
Let's give this a save and then reload on to the homepage.

00:09:47.890 --> 00:09:51.995
Now we can see some hotels now listed on the screen.

00:09:51.995 --> 00:09:53.705
Let's just check. We have nine.

00:09:53.705 --> 00:09:56.270
We have 1, 2, 3,

00:09:56.270 --> 00:10:02.030
4, 5, 6, 7, 8, 9.

00:10:02.030 --> 00:10:04.400
That all seems to be working okay.

00:10:04.400 --> 00:10:05.690
Back over to the index.

00:10:05.690 --> 00:10:09.140
We need to do a similar thing now for the countries.

00:10:09.140 --> 00:10:12.080
Underneath here we can add a wrapper.

00:10:12.080 --> 00:10:18.590
Make sure this is at the same level as the hotel wrapper above at.country_wrapper,

00:10:18.590 --> 00:10:21.605
for the CSS later.

00:10:21.605 --> 00:10:30.335
The text h2 of countries, a link,

00:10:30.335 --> 00:10:33.425
and this is just like the link from above here,

00:10:33.425 --> 00:10:37.850
which goes half the href to forward slash

00:10:37.850 --> 00:10:43.895
countries and then inside the brackets the text of see all.

00:10:43.895 --> 00:10:48.725
We have these two links on here for the countries and also for the hotels.

00:10:48.725 --> 00:10:51.650
Because remember we limited the sample size and

00:10:51.650 --> 00:10:56.120
the homepage to only show nine hotels on nine countries.

00:10:56.120 --> 00:11:00.650
Therefore, link in to a new page for all hotels and also

00:11:00.650 --> 00:11:05.930
all countries will then allow the user to see everything which is in our database.

00:11:05.930 --> 00:11:08.540
But we'll come back to this later on.

00:11:08.540 --> 00:11:12.515
Then I will unorder list to display the countries,

00:11:12.515 --> 00:11:14.030
will do the same as above.

00:11:14.030 --> 00:11:22.520
We'll say each country in countries and then create a list item for each.

00:11:22.520 --> 00:11:25.580
With a link nested inside.

00:11:25.580 --> 00:11:30.650
The href is with dynamic so open

00:11:30.650 --> 00:11:35.495
up the back takes to go on to link to forward slash countries.

00:11:35.495 --> 00:11:39.210
Inside here we want to pass in the country._id.

00:11:42.430 --> 00:11:44.960
We need to use country._

00:11:44.960 --> 00:11:49.550
id because if you remember from before in the aggregation method,

00:11:49.550 --> 00:11:51.575
if we go back to our controller,

00:11:51.575 --> 00:11:56.315
we set the unique ID in the group stage to be the country.

00:11:56.315 --> 00:11:58.835
Now inside of our index,

00:11:58.835 --> 00:12:02.480
this ID field is where our country name is now stored.

00:12:02.480 --> 00:12:04.565
Then we can display the same value.

00:12:04.565 --> 00:12:08.390
So the harsh, the curly braces and then

00:12:08.390 --> 00:12:15.245
country._ id to display this as text next to the link.

00:12:15.245 --> 00:12:22.535
The final thing for this template is to also add the image, the image source.

00:12:22.535 --> 00:12:25.610
Again, this uses the back takes.

00:12:25.610 --> 00:12:28.970
So forward slash this is the images folder,

00:12:28.970 --> 00:12:34.190
the country's folder to grab the country image and then just like above,

00:12:34.190 --> 00:12:36.245
we can pass in the country name,

00:12:36.245 --> 00:12:43.130
which is the value of country._id with the.

00:12:43.130 --> 00:12:45.275
JPG extension.

00:12:45.275 --> 00:12:49.520
So just so this underscore ID is a little bit more clearer,

00:12:49.520 --> 00:12:55.280
if we go to the hotel controller rather than rendering this index page,

00:12:55.280 --> 00:13:02.060
let's just do a quick res.json and then we can display the countries data.

00:13:02.060 --> 00:13:05.825
Save this and then reload the homepage.

00:13:05.825 --> 00:13:11.885
Now, we see this mandatory ID field is now being set to the individual country.

00:13:11.885 --> 00:13:17.225
This is why we are using the underscore ID in our template to access the country values,

00:13:17.225 --> 00:13:19.310
and then display them on the screen.

00:13:19.310 --> 00:13:22.190
Now, if we reinstate our hotel controller,

00:13:22.190 --> 00:13:28.010
remove all res.json and add the res.render back in,

00:13:28.010 --> 00:13:31.445
save this and then reload our homepage.

00:13:31.445 --> 00:13:35.120
We should now also see nine countries too.

00:13:35.120 --> 00:13:38.270
Let's go down to the bottom, 1, 2,

00:13:38.270 --> 00:13:42.575
3, 4, 5, 6, 7, 8, 9.

00:13:42.575 --> 00:13:44.780
For hotels, we also say nine,

00:13:44.780 --> 00:13:47.210
which we counted before and if we scroll through,

00:13:47.210 --> 00:13:53.360
we shouldn't see any reference to hotel 3 because this one is said to be unavailable.

00:13:53.360 --> 00:13:57.770
So this all looks fine and each time we refresh,

00:13:57.770 --> 00:14:00.230
we should see these in a different order because we're

00:14:00.230 --> 00:14:03.830
using a random selection of our hotels.

00:14:03.830 --> 00:14:07.685
This is an introduction to the aggregation pipeline.

00:14:07.685 --> 00:14:10.880
We will return to this later when we begin

00:14:10.880 --> 00:14:14.630
working with the search facility we added in the header.

00:14:14.630 --> 00:14:16.370
In the next video though,

00:14:16.370 --> 00:14:23.190
we'll continue to work with Mongo by looking at how to update data in our database.
