WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.950 --> 00:00:06.630
At moments, our images for the hotels stored inside of our project folder,

00:00:06.630 --> 00:00:09.270
we saved to the database, a filename,

00:00:09.270 --> 00:00:12.555
which refers to the image in our public folder.

00:00:12.555 --> 00:00:14.550
This is fine for testing,

00:00:14.550 --> 00:00:17.175
but we also want somewhere to store our images,

00:00:17.175 --> 00:00:20.145
especially when our app is pushed to production.

00:00:20.145 --> 00:00:24.360
We don't want a admin to access our project files.

00:00:24.360 --> 00:00:28.305
To do this, I'm going to use a service called Cloudinary.

00:00:28.305 --> 00:00:35.685
Cloudinary is a Cloud storage platform which allows us to upload images and also videos.

00:00:35.685 --> 00:00:39.085
You can find this over at cloudinary.com.

00:00:39.085 --> 00:00:42.230
I'll be using the service to upload our images from

00:00:42.230 --> 00:00:45.815
the admin section when creating a new hotel.

00:00:45.815 --> 00:00:51.040
We can then retrieve this image when displaying our image in our website.

00:00:51.040 --> 00:00:54.695
Cloudinary also has lots of additional features too.

00:00:54.695 --> 00:00:58.865
Although we won't be getting into any of the advanced features of Cloudinary,

00:00:58.865 --> 00:01:01.030
there is a lot which you can do,

00:01:01.030 --> 00:01:03.619
so just cropping, scaling,

00:01:03.619 --> 00:01:06.635
and enhancing our images before delivery,

00:01:06.635 --> 00:01:09.280
along with adding different effects.

00:01:09.280 --> 00:01:12.650
But during this course we'll be keeping it as simple as possible

00:01:12.650 --> 00:01:16.820
by simply pushing and retrieving images from Cloudinary.

00:01:16.820 --> 00:01:22.680
First of all, we need head over to cloudinary.com and create a free account.

00:01:22.680 --> 00:01:25.505
Click the ''Sign Up'' button,

00:01:25.505 --> 00:01:29.190
and then add our name inside here,

00:01:29.500 --> 00:01:38.100
the e-mail address, password,

00:01:41.050 --> 00:01:43.870
and it's all optional.

00:01:43.870 --> 00:01:49.660
Image in video management and create an account.

00:01:55.100 --> 00:01:57.735
I want to click on "Developer",

00:01:57.735 --> 00:02:03.770
"NodeJS" and also will go for other click on ''Next'',

00:02:03.770 --> 00:02:05.810
and it closes down,

00:02:05.810 --> 00:02:09.110
and then we're taken straight to the Cloudinary dashboard.

00:02:09.110 --> 00:02:13.145
You will see there is some generous free upload limits

00:02:13.145 --> 00:02:15.850
and more than enough size for our project.

00:02:15.850 --> 00:02:19.774
Here we can see how many bytes we've used in our current storage.

00:02:19.774 --> 00:02:20.990
Over on the right-hand side,

00:02:20.990 --> 00:02:24.785
we can see we can get an extra file storage when sharing on social media.

00:02:24.785 --> 00:02:27.295
But we have more than enough to get started with.

00:02:27.295 --> 00:02:29.115
Up at the top of the page,

00:02:29.115 --> 00:02:33.265
we have our account details which we'll need connect to Cloudinary,

00:02:33.265 --> 00:02:36.300
including our API key and our secrets.

00:02:36.300 --> 00:02:40.685
We can copy these details and place them in our dot ENV file,

00:02:40.685 --> 00:02:42.955
which we created in the last video.

00:02:42.955 --> 00:02:45.945
First of all, let's copy the Cloudinary name.

00:02:45.945 --> 00:02:48.390
Click on this and then ''Copy''.

00:02:48.390 --> 00:02:52.180
Then over in our dot ENV file,

00:02:52.610 --> 00:02:57.090
let's start a new line and this can be our Cloudinary_name,

00:02:58.150 --> 00:03:01.880
and set this equal to our name we discovered.

00:03:01.880 --> 00:03:09.360
We also need a Cloudinary_API key.

00:03:09.360 --> 00:03:14.090
We can set this equal to our API key, which is on here.

00:03:14.090 --> 00:03:16.415
Copy and paste this in.

00:03:16.415 --> 00:03:20.270
The third one we also need is the API secret.

00:03:20.270 --> 00:03:28.560
This is also provided in the dashboard so Cloudinary API secret.

00:03:29.420 --> 00:03:31.865
We can go to the dashboard.

00:03:31.865 --> 00:03:36.110
The API secret is hidden by default so click on reveal,

00:03:36.110 --> 00:03:43.675
copy this, add this in, and give that a save.

00:03:43.675 --> 00:03:48.690
Then we need to install Cloudinary NPM package into our project.

00:03:48.690 --> 00:03:50.840
To do this down in the terminal,

00:03:50.840 --> 00:03:52.850
close down our server,

00:03:52.850 --> 00:04:00.525
control and C. Then we the command NPM, I , cloudinary.

00:04:00.525 --> 00:04:03.120
Remember, I is just the shortcut for

00:04:03.120 --> 00:04:07.605
install and give some moments to pull it in from NPM.

00:04:07.605 --> 00:04:09.840
It looks like we got a spelling mistake.

00:04:09.840 --> 00:04:18.230
[inaudible].

00:04:18.230 --> 00:04:21.685
Lets go to the package dot JSON and check this is installed.

00:04:21.685 --> 00:04:24.445
You have Cloudinary as a dependency.

00:04:24.445 --> 00:04:30.015
We can now go over to our hotel controller so close this down,

00:04:30.015 --> 00:04:34.170
go to our hotel controller in the controllers folder.

00:04:34.170 --> 00:04:37.485
We will be accessing Cloudinary using

00:04:37.485 --> 00:04:42.240
our hotel controller so we need to require it in this JavaScript file.

00:04:42.240 --> 00:04:47.350
Up at the top sets up a constant of Cloudinary.

00:04:47.900 --> 00:04:51.105
This is equal to require,

00:04:51.105 --> 00:04:55.775
and this is a no package so we just simply reference this by its name,

00:04:55.775 --> 00:04:57.845
semicolon at the end.

00:04:57.845 --> 00:05:01.655
Then we can set up our Cloudinary config object,

00:05:01.655 --> 00:05:07.205
which will store all the conflict details which we have placed in our dots ENV file.

00:05:07.205 --> 00:05:13.425
Just in here, we access our Cloudinary variable dot config.

00:05:13.425 --> 00:05:16.305
This is a object which you pass in.

00:05:16.305 --> 00:05:19.980
First of all, we need to set the cloud_name,

00:05:19.980 --> 00:05:25.880
this is equal to our Cloudinary_name which we saved in the dot ENV file.

00:05:25.880 --> 00:05:31.170
Remember we can access these variables with process.env.

00:05:31.170 --> 00:05:37.230
Then in comes the letters or name of Cloudinary. Let's go and name.

00:05:37.340 --> 00:05:43.415
The next one we need, which is separated by a comma, is our API_key.

00:05:43.415 --> 00:05:52.080
Again, most of this to our environment variable so process.env Cloudinary_API_key,

00:05:56.120 --> 00:06:00.880
and the last one we need is the API secret.

00:06:01.460 --> 00:06:09.250
This is the process.env on the last one was the Cloudinary_API_secret.

00:06:13.430 --> 00:06:16.700
When uploading images, it's not

00:06:16.700 --> 00:06:20.870
straightforward as handling the other parts of our form data,

00:06:20.870 --> 00:06:24.380
such as the text fields for the name and description.

00:06:24.380 --> 00:06:26.764
If we go over to the hotel_form,

00:06:26.764 --> 00:06:29.065
which is a mixin.

00:06:29.065 --> 00:06:31.450
Open up the mixins folder.

00:06:31.450 --> 00:06:34.315
Open up hotel_form.

00:06:34.315 --> 00:06:36.950
Currently when saving our hotel,

00:06:36.950 --> 00:06:39.245
we use the default encoding,

00:06:39.245 --> 00:06:43.645
which handles all of our text-based inputs, which you haven't here.

00:06:43.645 --> 00:06:47.810
Currently we have a file inputs for the image.

00:06:47.810 --> 00:06:50.375
We have the inputs with the type of file,

00:06:50.375 --> 00:06:53.435
but present we are not really saving an image.

00:06:53.435 --> 00:06:56.435
All we're doing is saving a file name,

00:06:56.435 --> 00:07:00.305
which there matches a file inside of our public folder.

00:07:00.305 --> 00:07:05.585
When saving images in a form using a post request, which we are here,

00:07:05.585 --> 00:07:12.415
we need to change the encoding of the form to be what's called multi-part/form data.

00:07:12.415 --> 00:07:14.735
Just after our method,

00:07:14.735 --> 00:07:25.810
we can add the Ink type and "multi-part/form-data".

00:07:25.810 --> 00:07:31.280
This will allow our image file to also be included with our post request.

00:07:31.280 --> 00:07:36.350
However, we now need to add some middleware to our express application,

00:07:36.350 --> 00:07:39.690
which knows how to handle these multi-part/form-data.

00:07:39.700 --> 00:07:43.705
For this, I'll be using a package called Multer.

00:07:43.705 --> 00:07:46.700
Multer will basically take our images which we

00:07:46.700 --> 00:07:50.375
upload and then allow us to do something with them.

00:07:50.375 --> 00:07:55.760
It can save the images to insert in file location or even some memory,

00:07:55.760 --> 00:07:58.430
which is what we'll be doing in this project.

00:07:58.430 --> 00:08:01.760
We can then push these images to Cloudinary.

00:08:01.760 --> 00:08:07.105
The first thing we need to do is install the NPM package down in the terminal.

00:08:07.105 --> 00:08:10.485
NPM, I and then Multer ,

00:08:10.485 --> 00:08:21.860
which is M-U-L-T-E-R. We'll

00:08:21.860 --> 00:08:24.500
also be using this in the hotel controller,

00:08:24.500 --> 00:08:27.665
so back over to this, click on this file.

00:08:27.665 --> 00:08:30.725
We can also require this at the very top.

00:08:30.725 --> 00:08:34.640
Comes multer equals require

00:08:34.640 --> 00:08:41.850
multer semicolon at the end and as we said before,

00:08:41.850 --> 00:08:45.905
multer gives us full control over where we store these images.

00:08:45.905 --> 00:08:48.560
We can go ahead and set this up now.

00:08:48.560 --> 00:08:51.355
Just our config.

00:08:51.355 --> 00:08:59.650
We say storage constants and set this equal to multer dot disc storage.

00:09:01.220 --> 00:09:04.275
Then passing AMC objects.

00:09:04.275 --> 00:09:06.010
Inside of disk storage,

00:09:06.010 --> 00:09:08.845
we can set an options object to setup

00:09:08.845 --> 00:09:13.195
a folder or destination where you want to save these images to.

00:09:13.195 --> 00:09:18.370
I will not be doing this because I'm going to be saving these images to Cloudinary.

00:09:18.370 --> 00:09:22.285
Therefore, we don't need to setup a storage folder in this case,

00:09:22.285 --> 00:09:24.790
if we just leave these options object empty,

00:09:24.790 --> 00:09:28.330
like we see here, the computer's default directory

00:09:28.330 --> 00:09:31.145
for saving temporary files is used instead.

00:09:31.145 --> 00:09:35.770
Then multer itself also takes in options object two.

00:09:35.770 --> 00:09:40.360
Inside here we're going to pass in our storage variable, which was created.

00:09:40.360 --> 00:09:44.025
Let's just turn a multer where our files will be stores.

00:09:44.025 --> 00:09:48.125
We already have this covered with the storage variable just here.

00:09:48.125 --> 00:09:51.485
We can also pass in file filters to restrict

00:09:51.485 --> 00:09:55.810
the accepted file types and also any upload limits too.

00:09:55.810 --> 00:09:59.030
But I'm just going to keep it like this to keep things nice and simple.

00:09:59.030 --> 00:10:01.940
We can then save this inside of a constant,

00:10:01.940 --> 00:10:03.860
so we can access this soon.

00:10:03.860 --> 00:10:09.670
I'm going to call this constant the upload and set this our multer object.

00:10:09.670 --> 00:10:15.725
The next stage after this is to tell multer we only want to accept single files.

00:10:15.725 --> 00:10:19.985
We do this by accessing our upload variable, which was created,

00:10:19.985 --> 00:10:22.480
and then dot single,

00:10:22.480 --> 00:10:24.260
so this tells multer,

00:10:24.260 --> 00:10:27.815
we only want to upload one single image at a time.

00:10:27.815 --> 00:10:32.425
Multer also has options too for handling an array of files.

00:10:32.425 --> 00:10:35.315
You can go over and check out the documentation.

00:10:35.315 --> 00:10:37.790
If this is something which interests you.

00:10:37.790 --> 00:10:41.870
Inside a single, we pass in a name which I'm going to call

00:10:41.870 --> 00:10:47.580
image inside the quotations as passing image inside here.

00:10:47.580 --> 00:10:50.920
The single image will be available to us since

00:10:50.920 --> 00:10:54.585
multer will add it to the request dot file object.

00:10:54.585 --> 00:10:57.395
This image name which you pass in just here,

00:10:57.395 --> 00:11:02.645
is a field name used when passing the image to request dot file.

00:11:02.645 --> 00:11:08.915
Handling this image will be a free stage process or free stages of middleware.

00:11:08.915 --> 00:11:11.630
The first stage which is to upload the image and

00:11:11.630 --> 00:11:14.695
save to the memory we have just handled above.

00:11:14.695 --> 00:11:16.685
To add this to our middleware,

00:11:16.685 --> 00:11:18.980
we first need to export it.

00:11:18.980 --> 00:11:25.360
Just for our upload we can now export dot upload.

00:11:25.360 --> 00:11:28.530
Set this to our upload dot single.

00:11:28.530 --> 00:11:32.460
Then add this to our router in the middleware chain.

00:11:32.460 --> 00:11:37.640
Let's go to the index dot JS inside of our routes.

00:11:37.850 --> 00:11:42.195
Let's locate the admin routes which we have here.

00:11:42.195 --> 00:11:45.355
We want to add this when adding a new hotel.

00:11:45.355 --> 00:11:48.805
We need to go to the post request for admin/add.

00:11:48.805 --> 00:11:53.860
Here we currently have a piece of middleware called create hotel post.

00:11:53.860 --> 00:11:55.765
This is the final stage,

00:11:55.765 --> 00:11:57.865
which is saving it to the database.

00:11:57.865 --> 00:12:03.740
But first we can pass in a file uploader and so add this onto a separate line.

00:12:03.740 --> 00:12:05.725
Then just follow this,

00:12:05.725 --> 00:12:13.130
we can access the hotel controller dot upload separated by a comma.

00:12:13.130 --> 00:12:17.150
Now this is our first and last step in our set up.

00:12:17.150 --> 00:12:19.880
In the next video, we're going to finish things off by

00:12:19.880 --> 00:12:22.400
creating a new piece of middleware to

00:12:22.400 --> 00:12:28.200
save our images to Cloudinary before pushing our hotel to the database.
