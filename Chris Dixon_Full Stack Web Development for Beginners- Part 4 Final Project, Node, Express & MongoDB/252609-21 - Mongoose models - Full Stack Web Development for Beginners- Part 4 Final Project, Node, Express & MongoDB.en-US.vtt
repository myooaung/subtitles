WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.040 --> 00:00:05.040
We've already talked a little about what models,

00:00:05.040 --> 00:00:08.355
we are going to using a Mongoose sets up our models,

00:00:08.355 --> 00:00:10.425
and this will keep our data structured,

00:00:10.425 --> 00:00:12.990
so there is less chance of messing up.

00:00:12.990 --> 00:00:17.820
These models are responsible for creating data before sending off

00:00:17.820 --> 00:00:22.845
to the database along with written documents from the database too.

00:00:22.845 --> 00:00:24.600
Over in our project,

00:00:24.600 --> 00:00:29.230
we can begin by creating a models folder to keep our code organized.

00:00:29.230 --> 00:00:32.780
Open up the sidebar and then the root of the project,

00:00:32.780 --> 00:00:36.630
create New Folder called Models.

00:00:36.700 --> 00:00:41.179
Now we have models and our views,

00:00:41.179 --> 00:00:47.215
and our controllers folders and this is the MVC pattern we talked about earlier.

00:00:47.215 --> 00:00:51.405
This model we're creating is going to be for our hotels.

00:00:51.405 --> 00:00:54.335
This will have the structure for our hotel name,

00:00:54.335 --> 00:00:57.805
hotel description, star rating, and so on.

00:00:57.805 --> 00:01:00.105
Inside its models folder,

00:01:00.105 --> 00:01:03.790
create a New File, call it hotel.js.

00:01:05.090 --> 00:01:08.375
Since we use mongoose for our schema,

00:01:08.375 --> 00:01:11.510
we need to require the mongoose module.

00:01:11.510 --> 00:01:19.675
Let's close on these files down and concentrates on hotel.js.

00:01:19.675 --> 00:01:28.640
Inside here we create our constant of mongoose and require the mongoose package,

00:01:30.590 --> 00:01:39.915
semicolon and then we can create our hotel schema, so const hotelSchema,

00:01:39.915 --> 00:01:46.290
and this is equal to a new mongoose.Schema with a capital

00:01:46.290 --> 00:01:54.170
S. The Schema will map or match to the data inside of our database,

00:01:54.170 --> 00:02:00.230
therefore, what we aren't in here will shape how our database data will be constructed.

00:02:00.230 --> 00:02:05.225
The schema takes in an object inside the brackets,

00:02:05.225 --> 00:02:09.425
where we can begin to construct how each hotel would look.

00:02:09.425 --> 00:02:12.050
We need a hotel name,

00:02:12.050 --> 00:02:15.810
so let's add our first phoneme of hotel_name.

00:02:17.510 --> 00:02:20.910
Now we can set this up as an object,

00:02:20.910 --> 00:02:24.470
we want the hotel name to be of type.

00:02:24.470 --> 00:02:30.060
This is going to be a string separated by commas.

00:02:30.060 --> 00:02:33.240
We can also add some more restrictions to this data,

00:02:33.240 --> 00:02:36.419
we can also set if this is to be required,

00:02:36.419 --> 00:02:39.800
this can be a boolean value of true or false.

00:02:39.800 --> 00:02:42.230
If the field must be present or instead,

00:02:42.230 --> 00:02:46.670
we can simply add a string with a message if this field is missing,

00:02:46.670 --> 00:02:50.850
such as hotel name is required.

00:02:51.970 --> 00:02:54.305
I come on to the end.

00:02:54.305 --> 00:02:59.215
Then we can set the maximum number of characters to be 32.

00:02:59.215 --> 00:03:05.380
Then finally, we're going to set the trim to be a boolean value of true.

00:03:05.380 --> 00:03:10.370
We'll remove any wide spaces from the field from the beginning and end,

00:03:10.370 --> 00:03:12.860
leaving just the characters which answers.

00:03:12.860 --> 00:03:15.995
This is the schema for our hotel name,

00:03:15.995 --> 00:03:20.290
and we can go ahead and add a similar setup for our description.

00:03:20.290 --> 00:03:22.475
Separated by a comma,

00:03:22.475 --> 00:03:26.190
we can ask the hotel_description.

00:03:29.120 --> 00:03:37.860
The description again should be type of string required.

00:03:37.860 --> 00:03:41.420
Again, we can set this to be true or instead we can pass

00:03:41.420 --> 00:03:45.365
in a string which will be returned if the field is missing,

00:03:45.365 --> 00:03:51.030
so hotel description is required.

00:03:52.370 --> 00:03:57.810
We can also trim any wide space, set this to be true.

00:03:57.810 --> 00:04:02.360
Now we have the hotel name and the description,

00:04:02.360 --> 00:04:04.100
separate this with a comma,

00:04:04.100 --> 00:04:07.010
we now have a field for the image.

00:04:07.010 --> 00:04:09.545
The image is going to be a name,

00:04:09.545 --> 00:04:11.770
so it's going to be a string for now,

00:04:11.770 --> 00:04:15.035
we will come back to this image later on in the course

00:04:15.035 --> 00:04:19.340
because it's one or two things we need to deal with to get this working correctly.

00:04:19.340 --> 00:04:22.860
Next up we have the star rating,

00:04:25.760 --> 00:04:31.070
the star rating is going to be a type of number.

00:04:33.110 --> 00:04:37.685
We also want this to be required like all the rest of the fields.

00:04:37.685 --> 00:04:43.370
We can say hotel star rating is required,

00:04:44.260 --> 00:04:46.520
add a common onto the ends.

00:04:46.520 --> 00:04:50.125
Then we set the maximum value to be five,

00:04:50.125 --> 00:04:54.555
because we only want the star rating to between one and five.

00:04:54.555 --> 00:04:56.520
After the star rating,

00:04:56.520 --> 00:05:03.250
it's the country, the country is a type of string.

00:05:05.120 --> 00:05:08.040
This is also required,

00:05:08.040 --> 00:05:12.180
the text of country is required,

00:05:12.180 --> 00:05:15.120
the comma after required.

00:05:15.120 --> 00:05:16.920
We also want to finish,

00:05:16.920 --> 00:05:19.785
so this is a boolean value of true.

00:05:19.785 --> 00:05:23.060
That's all we need at the moment for our country.

00:05:23.060 --> 00:05:27.660
After the country, we want to set the cost per night.

00:05:30.400 --> 00:05:34.460
Cost per night is going to be the type of number,

00:05:34.460 --> 00:05:36.710
as this will be a price,

00:05:36.710 --> 00:05:39.550
and also want this to be required.

00:05:39.550 --> 00:05:44.590
With a string of cost per night, is required.

00:05:47.360 --> 00:05:54.395
The last piece of information we want to store in our hotel model is available.

00:05:54.395 --> 00:05:58.550
This is so the unmanned concise if this Hotel is currently available for

00:05:58.550 --> 00:06:02.930
sale and this will be a boolean value of true or false.

00:06:02.930 --> 00:06:12.250
Let's set the type to be boolean and the only other field we need is required,

00:06:12.950 --> 00:06:16.870
so availability is required.

00:06:19.040 --> 00:06:22.265
Once you've gone ahead and typed all this out,

00:06:22.265 --> 00:06:23.885
right at the very bottom.

00:06:23.885 --> 00:06:29.860
The final thing we want to do is export our model so we can use it in other files.

00:06:29.860 --> 00:06:36.210
Down at the bottom must create a comment of export model.

00:06:37.160 --> 00:06:41.505
We do this with module dot exports,

00:06:41.505 --> 00:06:46.510
answer this to mongoose.model,

00:06:46.610 --> 00:06:50.255
the first volume we want to add is hotel.

00:06:50.255 --> 00:06:55.295
Hotel is a name I'm going to give to this model and separated by a comma,

00:06:55.295 --> 00:06:59.600
we also pass in the hotel schema, which we just created.

00:06:59.600 --> 00:07:03.455
Good, this is now how our hotel would be constructed.

00:07:03.455 --> 00:07:05.495
Now we've setup our model.

00:07:05.495 --> 00:07:10.025
It means nobody could just go ahead and add any fields how they like.

00:07:10.025 --> 00:07:15.605
We now have a strict set of rules which each hotel must abide by.

00:07:15.605 --> 00:07:21.185
Later we'll add another model for our user too and also for any orders.

00:07:21.185 --> 00:07:23.870
We can also shape how they will look too.

00:07:23.870 --> 00:07:26.840
For now though, we're going to stick with the hotels.

00:07:26.840 --> 00:07:32.330
The next video is all about using this model to create our add new hotel phone,

00:07:32.330 --> 00:07:36.210
so we can adds new hotels to our database.
