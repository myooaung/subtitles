WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:02.385
When working with users,

00:00:02.385 --> 00:00:04.215
something which you will soon come across,

00:00:04.215 --> 00:00:06.960
it's a needs to manage a user session.

00:00:06.960 --> 00:00:11.580
Sessions are basically a way of saving an authenticated user,

00:00:11.580 --> 00:00:16.275
so they are remembered between visits for a certain duration.

00:00:16.275 --> 00:00:20.310
They can also be used for various of a uses too,

00:00:20.310 --> 00:00:24.810
but this will be the purpose of the sessions in this project.

00:00:24.810 --> 00:00:29.100
Imagine we are user and log into a website.

00:00:29.100 --> 00:00:30.660
As you already know,

00:00:30.660 --> 00:00:32.250
when we click between pages,

00:00:32.250 --> 00:00:35.220
we'll make a new request to the server.

00:00:35.220 --> 00:00:38.880
Imagine how frustrating it would be if we needed

00:00:38.880 --> 00:00:42.790
to log in for each new page we requested.

00:00:42.790 --> 00:00:47.840
This is because the server does not know the user's information.

00:00:47.840 --> 00:00:51.020
Therefore, we use a session as a kind of

00:00:51.020 --> 00:00:58.030
server-side storage for the user's information we want to retain during our visit.

00:00:58.030 --> 00:01:01.595
What happens is when a user logs in,

00:01:01.595 --> 00:01:07.915
a session is created and the user's details are stored in the database.

00:01:07.915 --> 00:01:12.200
We're going to be using our same Mongo database for this.

00:01:12.200 --> 00:01:16.970
A session ID is passed to the server for each request.

00:01:16.970 --> 00:01:21.295
Often this ID is stored in what is called a cookie.

00:01:21.295 --> 00:01:25.670
The server then checks this ID with the information it holds for

00:01:25.670 --> 00:01:31.025
this user and then returns the user's information if all is well.

00:01:31.025 --> 00:01:37.310
For this, I'm going to be using a popular npm package called express-session.

00:01:37.310 --> 00:01:40.495
This is the npm module which we all know.

00:01:40.495 --> 00:01:43.865
This middleware will allow us to setup sessions for

00:01:43.865 --> 00:01:49.075
our users and also add various options which we'll look at soon.

00:01:49.075 --> 00:01:55.055
Next up, we mentioned we also store the session data on the server side.

00:01:55.055 --> 00:01:58.390
If we go ahead and scroll down.

00:01:58.390 --> 00:02:01.004
This is quite near the bottom.

00:02:01.004 --> 00:02:04.530
We need to find our session stores.

00:02:04.530 --> 00:02:08.249
Here we go "Compatible Session Stores."

00:02:08.249 --> 00:02:12.305
We see a list of the stores which we can use with this module.

00:02:12.305 --> 00:02:16.055
Since we already use Mongo in our projects,

00:02:16.055 --> 00:02:19.025
we can use the connect-mongo package,

00:02:19.025 --> 00:02:21.510
which is listed just down here.

00:02:21.510 --> 00:02:23.945
This is the one we want to use.

00:02:23.945 --> 00:02:31.405
This package allows us to use MongoDB as our session store when using Express.

00:02:31.405 --> 00:02:36.515
First let's go ahead and install the package in our project.

00:02:36.515 --> 00:02:39.605
Down to the server and closes down.

00:02:39.605 --> 00:02:49.380
We need to add "npm i" and the package is called "Express-Session" hit "Enter."

00:02:52.910 --> 00:02:56.010
Once it is pulled in from npm,

00:02:56.010 --> 00:03:00.760
we can then require this module in the main "app.js."

00:03:00.760 --> 00:03:06.345
Open the sidebar, open up the "app.js."

00:03:06.345 --> 00:03:09.269
Then just after our router,

00:03:09.269 --> 00:03:13.150
let's add the comments of "For Sessions."

00:03:13.640 --> 00:03:23.620
Const Session is going to be equal to require the module name of "Express-Session."

00:03:25.160 --> 00:03:28.215
Semicolon at the end.

00:03:28.215 --> 00:03:30.975
Then onto our Mongo store.

00:03:30.975 --> 00:03:34.740
Down in the terminal "npm i."

00:03:34.740 --> 00:03:37.510
This was "Connect-Mongo."

00:03:45.530 --> 00:03:50.260
Let us install. We also need to require this package too,

00:03:50.260 --> 00:03:52.975
so also in the "app.js",

00:03:52.975 --> 00:03:54.430
just below our session,

00:03:54.430 --> 00:03:58.790
we can also add a consonant of "Mongo Store."

00:03:58.910 --> 00:04:06.760
I'm going to use capitals for this and require "Connect -Mongo. "

00:04:07.910 --> 00:04:13.495
After this, we can open up the brackets and then pass in the session.

00:04:13.495 --> 00:04:20.545
Semicolon. What exactly is this line of code doing when we just have it here?

00:04:20.545 --> 00:04:23.020
Well, as usual, we are grabbing

00:04:23.020 --> 00:04:29.045
the "Connect-Mongo" package and store it inside a constant called "Mongo Store."

00:04:29.045 --> 00:04:31.960
"Connect-Mongo" is returning a function.

00:04:31.960 --> 00:04:37.285
Put a normal require coal will not immediately execute the function.

00:04:37.285 --> 00:04:41.185
Instead, it will just store it inside of this constant.

00:04:41.185 --> 00:04:44.770
This is why we need to add the brackets at the end,

00:04:44.770 --> 00:04:47.550
to go ahead and execute this function,

00:04:47.550 --> 00:04:52.250
along with person in the session variable to this function.

00:04:52.250 --> 00:04:57.005
Then below, we can set up our session as "Middleware" to run for

00:04:57.005 --> 00:05:03.790
each request with "app.use" and also again passing in our session variable.

00:05:03.790 --> 00:05:10.800
Let's scroll down. Let's add this in just after our over "app.use" is,

00:05:10.800 --> 00:05:19.125
so "app.use" the "Session" with the brackets just afterwards.

00:05:19.125 --> 00:05:23.190
This session takes in a "Options Object."

00:05:23.190 --> 00:05:28.285
Let's add the curly braces and add this one to a new line.

00:05:28.285 --> 00:05:33.815
This creates a session middleware with the options which we're going to add now.

00:05:33.815 --> 00:05:38.285
All of the available options are listed in the documentation.

00:05:38.285 --> 00:05:40.475
For the first one we're going to use,

00:05:40.475 --> 00:05:42.140
which is also required,

00:05:42.140 --> 00:05:44.815
is the secret phrase.

00:05:44.815 --> 00:05:47.580
Let's add the "Secret."

00:05:47.580 --> 00:05:51.860
We can also store this inside of our ".env" file,

00:05:51.860 --> 00:05:55.370
since it's going to be some sensitive information.

00:05:55.370 --> 00:06:00.330
So first let's add "process.env.SECRET."

00:06:02.450 --> 00:06:06.905
This "Secret" is a text string of our choice,

00:06:06.905 --> 00:06:11.315
which is used to sign the session ID cookie.

00:06:11.315 --> 00:06:19.230
Next we can add the string inside of our ".env" file. Open this up.

00:06:19.230 --> 00:06:22.310
Then down at the bottom,

00:06:22.310 --> 00:06:24.620
we can add our "Secret."

00:06:24.620 --> 00:06:28.565
This can be equal to any text string of our choice.

00:06:28.565 --> 00:06:34.775
I'm just going to add "Travel Session" add an exclamation mark.

00:06:34.775 --> 00:06:39.130
Give this file a "Save" close it down.

00:06:39.130 --> 00:06:44.505
Next we need to set "Save on initialized" to be false.

00:06:44.505 --> 00:06:47.220
Add a comma after all secrets.

00:06:47.220 --> 00:06:53.820
This is "Save on initialized" and set this value to be "False."

00:06:53.820 --> 00:06:57.940
Set in this value will mean a new session is not saved

00:06:57.940 --> 00:07:02.230
the database unless this session is actually modified.

00:07:02.230 --> 00:07:06.715
This is useful for a visitor just browsing our sites and

00:07:06.715 --> 00:07:11.270
not actually needing their detail saved into a session.

00:07:11.270 --> 00:07:17.005
This will result in a lot less unnecessary saves to our database.

00:07:17.005 --> 00:07:24.940
Next up, add a comma and add the option of resave to be false.

00:07:24.960 --> 00:07:32.285
Setting this to false will ensure our session is not saved unless it's actually modified.

00:07:32.285 --> 00:07:34.930
Finally, we need to make use of

00:07:34.930 --> 00:07:41.145
our MongoDB store by using this store option with our MongoDB constants,

00:07:41.145 --> 00:07:43.315
which we set just above.

00:07:43.315 --> 00:07:46.000
This is one just here.

00:07:46.000 --> 00:07:54.650
After resave, add our store option and we'll set this to a value of new MongoStore,

00:07:54.650 --> 00:07:57.505
add the brackets just afterwards.

00:07:57.505 --> 00:08:02.485
This new store takes in the mongoose connection as an option,

00:08:02.485 --> 00:08:08.980
add the curly braces, mongoose.connection.

00:08:09.000 --> 00:08:11.870
Check this is all looking good.

00:08:11.870 --> 00:08:16.640
We have mongoose we have our session, our MongoStore.

00:08:17.120 --> 00:08:21.920
We can now set up a quick test to see this in action.

00:08:21.920 --> 00:08:24.880
You don't need to follow along with this if you don't want to.

00:08:24.880 --> 00:08:27.445
This will just be a quick demo.

00:08:27.445 --> 00:08:31.850
In fact before we do this, this needs to be mongooseConnection,

00:08:33.300 --> 00:08:35.585
the colon and there we go,

00:08:35.585 --> 00:08:38.185
that's equal to mongoose.connection,

00:08:38.185 --> 00:08:44.425
which we also used earlier when setting up our MongoDB, which is just here.

00:08:44.425 --> 00:08:50.220
Now we go ahead and set up the test over in the index.js file.

00:08:50.220 --> 00:08:52.730
So save our app.js.

00:08:52.730 --> 00:08:55.245
Open up the index.js,

00:08:55.245 --> 00:08:58.610
and then let's scroll up to the top.

00:08:58.610 --> 00:09:03.125
The homepage filters is on the homepage route.

00:09:03.125 --> 00:09:06.020
So I'm just going to comment this line out.

00:09:06.020 --> 00:09:10.020
We are going to create a new test function to test if the session is

00:09:10.020 --> 00:09:15.410
working by login the number of visits to the homepage in the session.

00:09:15.410 --> 00:09:18.500
First let's recreate our home route.

00:09:18.500 --> 00:09:26.350
So router.get the home router forward slash.

00:09:26.350 --> 00:09:29.560
Let's add a function,

00:09:29.850 --> 00:09:34.490
passing in the request and also the response.

00:09:34.640 --> 00:09:38.130
Inside here the first thing I'm going to do is create

00:09:38.130 --> 00:09:41.990
an if statement. If request.session.page_views.

00:09:49.860 --> 00:09:58.335
This express session module makes our session data available in the req.session objects.

00:09:58.335 --> 00:10:05.080
We can also make use of the page views to see how many times the page is being visited.

00:10:05.080 --> 00:10:10.030
Now we can increment this page views total on each request.

00:10:10.030 --> 00:10:16.250
So add in the req.session.page_views++.

00:10:19.320 --> 00:10:25.540
This will increment the number of page views each time there's a request to our homepage.

00:10:25.540 --> 00:10:31.925
Then we're going to display the number of visits on the screen by using a res.send.

00:10:31.925 --> 00:10:34.284
We're going to send using the backticks,

00:10:34.284 --> 00:10:41.980
some texts of number of page visits, a colon.

00:10:41.980 --> 00:10:44.465
Then we can add in our dynamic data,

00:10:44.465 --> 00:10:50.800
which is the req.session.page_views.

00:10:52.010 --> 00:10:58.400
Of course we need a else statement too, so else.

00:10:59.000 --> 00:11:03.890
This if section will handle if there is any page view stored,

00:11:03.890 --> 00:11:06.950
i.e if the user has already visited.

00:11:06.950 --> 00:11:12.290
The else session will handle if the user is visiting for the first time.

00:11:12.290 --> 00:11:19.650
If that's the case, we want the req.session.page_views to be

00:11:19.650 --> 00:11:28.120
equal to one and then we can do a res.send with the text of first visit.

00:11:30.230 --> 00:11:33.720
Now if we go to the browser on our first visit,

00:11:33.720 --> 00:11:36.525
we should see this text which we set here.

00:11:36.525 --> 00:11:40.350
Then for each additional refresh on the homepage,

00:11:40.350 --> 00:11:43.420
we should then increment the number of page views by

00:11:43.420 --> 00:11:47.420
one each time and then display this on the screen.

00:11:47.420 --> 00:11:54.110
Let's give this a go. Localhost:3000, it reload.

00:11:54.110 --> 00:12:00.010
In fact, we need to start up the development server.

00:12:03.600 --> 00:12:08.015
We have an error, so let's take a look at what this is.

00:12:08.015 --> 00:12:11.630
Over to our app.js.

00:12:14.630 --> 00:12:17.865
We just have a spelling mistake here.

00:12:17.865 --> 00:12:21.030
Save this and now go green again.

00:12:21.030 --> 00:12:25.415
We load the homepage and we have the text of first visit.

00:12:25.415 --> 00:12:28.220
Now if we click on refresh,

00:12:28.220 --> 00:12:33.125
this should now increment the number of page visits on each click.

00:12:33.125 --> 00:12:39.455
So three visits, 4, 5, 6, 7.

00:12:39.455 --> 00:12:43.910
Now over to mLab for the database.

00:12:43.910 --> 00:12:46.700
Let's refresh.

00:12:49.740 --> 00:12:54.215
Good. Now we'll see alongside our hotels and users,

00:12:54.215 --> 00:12:59.165
now we see a session collection has also been created with one document.

00:12:59.165 --> 00:13:01.015
If we click on this,

00:13:01.015 --> 00:13:05.980
we'll now see the details of the session stored inside here.

00:13:05.980 --> 00:13:09.575
The session has a unique ID at the top,

00:13:09.575 --> 00:13:13.190
and then some information about the cookie itself,

00:13:13.190 --> 00:13:15.440
such as the max age,

00:13:15.440 --> 00:13:18.070
any expiry dates which we want to sets,

00:13:18.070 --> 00:13:20.665
and also the number of page visits,

00:13:20.665 --> 00:13:24.015
which we just looked at inside the browser of seven.

00:13:24.015 --> 00:13:29.735
All of these options can be set bios if we want to do this as an option.

00:13:29.735 --> 00:13:32.630
When we go ahead and set up the session.

00:13:32.630 --> 00:13:39.050
The documentation has some examples of how to do this if you'd like to make any changes.

00:13:39.050 --> 00:13:41.664
Now we know our session is working,

00:13:41.664 --> 00:13:47.485
we can now remove the page views code and reinstates the original homepage.

00:13:47.485 --> 00:13:50.715
Over to the index.js,

00:13:50.715 --> 00:13:55.225
this code here can be removed or commented out.

00:13:55.225 --> 00:13:59.935
Then the router.get, which was the original homepage,

00:13:59.935 --> 00:14:02.035
can then be uncommented.

00:14:02.035 --> 00:14:05.855
Save this, reload the browser on

00:14:05.855 --> 00:14:10.055
the homepage and everything should now be back to normal.

00:14:10.055 --> 00:14:13.360
But this time we're using sessions.
