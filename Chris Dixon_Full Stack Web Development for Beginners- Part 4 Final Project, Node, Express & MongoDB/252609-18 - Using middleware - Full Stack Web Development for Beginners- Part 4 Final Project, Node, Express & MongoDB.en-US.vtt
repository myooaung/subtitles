WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:03.855
Middleware is a really important concept to learn,

00:00:03.855 --> 00:00:07.320
and it is used quite heavily when building Express apps.

00:00:07.320 --> 00:00:09.990
While we will be using middleware for his projects,

00:00:09.990 --> 00:00:13.035
I just wanted to give you a quick introduction first,

00:00:13.035 --> 00:00:15.974
so we at least understand the basics.

00:00:15.974 --> 00:00:20.745
If we go over to Visual Studio then open up our hotel controller,

00:00:20.745 --> 00:00:24.960
we have the request and response objects for each router.

00:00:24.960 --> 00:00:31.770
Request is the data coming in and response is the data which is returned from the server.

00:00:31.770 --> 00:00:37.935
We can use middleware in-between to basically change our data or do something with it.

00:00:37.935 --> 00:00:43.720
Basically, a middleware acts like a series of functions which we pass through.

00:00:43.720 --> 00:00:46.565
An example of its use in our project,

00:00:46.565 --> 00:00:49.000
will be when a user signs up.

00:00:49.000 --> 00:00:52.605
Inside this hotelController.js file,

00:00:52.605 --> 00:00:55.080
I want to show you a quick example

00:00:55.080 --> 00:00:58.220
and these examples are just for demonstration purposes.

00:00:58.220 --> 00:01:01.585
You don't need to follow along if you don't want.

00:01:01.585 --> 00:01:06.450
Let's make some more space and I'm going to create two more functions.

00:01:06.450 --> 00:01:14.430
Exports, sign-up, passing in the request and response objects.

00:01:16.190 --> 00:01:20.975
The sign-up section is going to handle the data validation.

00:01:20.975 --> 00:01:24.265
This will validate any user info as it comes in

00:01:24.265 --> 00:01:29.135
then this second one is going to be the functionality to login.

00:01:29.135 --> 00:01:39.190
Exports.login, passing your request and response and this is going to handle the login.

00:01:39.190 --> 00:01:44.960
Let's say we want to have the functionality to first sign up the user.

00:01:44.960 --> 00:01:47.270
The sign-up section also validates

00:01:47.270 --> 00:01:51.820
the user details then follows up by login, the user in.

00:01:51.820 --> 00:01:54.545
This is usually the functionality we want.

00:01:54.545 --> 00:01:56.525
When we sign up for new websites,

00:01:56.525 --> 00:01:59.645
we often want to be immediately logged in.

00:01:59.645 --> 00:02:02.030
All of the code to handle both of

00:02:02.030 --> 00:02:06.290
these sections could be done inside of one single controller.

00:02:06.290 --> 00:02:10.865
But for this case, it makes sense to break things up into separate actions.

00:02:10.865 --> 00:02:16.220
This is because not only do we want to sign up and then login straight away,

00:02:16.220 --> 00:02:20.540
we also want the functionality for this login to be separate.

00:02:20.540 --> 00:02:25.240
Just when a user has returned and then just wants to login.

00:02:25.240 --> 00:02:30.050
Let's avoid repeating the same login code more than once.

00:02:30.050 --> 00:02:36.980
How does Express know we want to run the sign-up function then followed by the login?

00:02:36.980 --> 00:02:41.900
First of all, we need to pass in a third argument to our function.

00:02:41.900 --> 00:02:45.600
We usually call this variable next,

00:02:46.030 --> 00:02:50.135
with their needs call next inside of our function body,

00:02:50.135 --> 00:02:54.025
when we are ready to move on to the next piece of middleware,

00:02:54.025 --> 00:02:57.045
so we call next inside here.

00:02:57.045 --> 00:03:01.705
When we want it to move down the chain onto the next piece of middleware.

00:03:01.705 --> 00:03:04.330
There is still one more thing to do.

00:03:04.330 --> 00:03:07.480
Although we call next inside this function,

00:03:07.480 --> 00:03:11.495
it doesn't automatically know what the next piece of middleware is.

00:03:11.495 --> 00:03:14.185
All that we know we want to move on to login,

00:03:14.185 --> 00:03:16.690
Express doesn't know this by default.

00:03:16.690 --> 00:03:20.380
We do this by declaring the order of middleware inside

00:03:20.380 --> 00:03:24.825
the router file over to the router index.js.

00:03:24.825 --> 00:03:30.180
We can then set up a new example routes, we've router.gets.

00:03:30.180 --> 00:03:39.150
Let's create a sign-up routes with the forward slash and then we can add our controllers.

00:03:39.150 --> 00:03:42.130
The hotelController.sign-Up.

00:03:43.940 --> 00:03:47.020
If you just wanted to use this sign-up section,

00:03:47.020 --> 00:03:48.520
we would just use a like this.

00:03:48.520 --> 00:03:51.355
We can add more than one.

00:03:51.355 --> 00:03:55.190
We can then follow up with hotelController.login,

00:03:56.930 --> 00:04:00.340
and we can pass in as many of these as you want to

00:04:00.340 --> 00:04:03.640
use and then these executed in sequence,

00:04:03.640 --> 00:04:07.430
each one requiring the next call inside the function.

00:04:07.430 --> 00:04:10.690
First of all, we will use the sign-up function,

00:04:10.690 --> 00:04:13.240
then next we'll pass it over to

00:04:13.240 --> 00:04:17.199
the login function and since these are now separate functions,

00:04:17.199 --> 00:04:21.490
this makes sense when we want to create a route just for login into.

00:04:21.490 --> 00:04:26.780
If we have, router.gets,

00:04:26.910 --> 00:04:29.515
when we get to this stage, we also want

00:04:29.515 --> 00:04:35.410
a login routes and then we can reuse hotelController.login.

00:04:37.460 --> 00:04:41.035
Now we're using the same login functionality

00:04:41.035 --> 00:04:45.095
without repeating the same code in multiple functions.

00:04:45.095 --> 00:04:48.790
We can see this is working by adding some console logs

00:04:48.790 --> 00:04:52.395
to all middleware over to the controller,

00:04:52.395 --> 00:04:55.690
just before next we can do a console log,

00:04:56.270 --> 00:05:01.340
and then a simple message of sign-up middleware,

00:05:02.810 --> 00:05:10.930
lowercase c, then copy this then add this into our login.

00:05:12.080 --> 00:05:15.040
Changes to be login middleware,

00:05:15.040 --> 00:05:18.055
save our files and and over to the projects.

00:05:18.055 --> 00:05:20.575
We need to go to our up routes,

00:05:20.575 --> 00:05:23.300
which we set just here.

00:05:23.300 --> 00:05:29.025
Forward slash sign-up, at this end then hit enter.

00:05:29.025 --> 00:05:35.560
Now only sign-up routes over to the console and make some more space.

00:05:35.560 --> 00:05:40.750
We now see inside the console at the bottom we have sign-up middleware called first,

00:05:40.750 --> 00:05:43.420
which you'd expect because this is called first and

00:05:43.420 --> 00:05:48.415
the controller then we have the login middleware just afterwards.

00:05:48.415 --> 00:05:52.075
This means that the router is now passing through both pieces

00:05:52.075 --> 00:05:55.515
of our middleware in the correct sequence.

00:05:55.515 --> 00:05:59.010
If we go ahead though, and comments sound is next function,

00:05:59.010 --> 00:06:04.525
save the file then reload the browser on the sign-up routes.

00:06:04.525 --> 00:06:09.755
Over in a terminal we now see that only the sign-up middleware has run.

00:06:09.755 --> 00:06:14.150
The code has got to this section just here then it hasn't been

00:06:14.150 --> 00:06:19.285
passed to the next piece of middleware because we haven't called next.

00:06:19.285 --> 00:06:23.555
This is a basic introduction to how middleware works.

00:06:23.555 --> 00:06:29.270
I'm going to remove these two functions as we don't need these in our projects.

00:06:29.270 --> 00:06:34.020
They just for demonstration and also the two new routes to

00:06:34.020 --> 00:06:40.425
set-up in the index.js and then check this working okay.

00:06:40.425 --> 00:06:45.225
Head to the home routes and we're now back to normal.

00:06:45.225 --> 00:06:49.725
We can load these routes in later on when we come back to this part of the app.

00:06:49.725 --> 00:06:53.975
Finally, we can also set a middleware to use across the whole site,

00:06:53.975 --> 00:06:59.135
rather than just one specific route over in the app.js,

00:06:59.135 --> 00:07:01.190
which is the main file.

00:07:01.190 --> 00:07:09.815
Click on this then scroll down to the section with app.use, which is just here.

00:07:09.815 --> 00:07:11.795
Here you can see app.use,

00:07:11.795 --> 00:07:14.465
and this is where we can set up any middleware such as

00:07:14.465 --> 00:07:17.980
cookie parser to use for all routes.

00:07:17.980 --> 00:07:22.975
Below we can see we have the index router setup here too.

00:07:22.975 --> 00:07:25.354
Both for this and all of the middleware,

00:07:25.354 --> 00:07:29.210
we can first add a route as the first argument to

00:07:29.210 --> 00:07:33.590
restrict the middleware to only apply to this particular routes.

00:07:33.590 --> 00:07:37.205
There is also many of the uses for middleware too,

00:07:37.205 --> 00:07:42.990
such as third party plugins and we will look at these more throughout this project.
