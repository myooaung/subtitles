WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.625
We have now validated and sanitized the users inputs.

00:00:04.625 --> 00:00:09.855
Now the next stage is to actually save this data into the database.

00:00:09.855 --> 00:00:12.690
To help with this, I'm going to use a piece of

00:00:12.690 --> 00:00:15.750
authentication middle-ware called passports.

00:00:15.750 --> 00:00:20.125
Passport is available at Passport js.org.

00:00:20.125 --> 00:00:24.925
If we go over here and then click on the Documentation.

00:00:24.925 --> 00:00:29.450
Over on the left-hand side here we see many different ways which we can

00:00:29.450 --> 00:00:33.575
use Passport to authenticate our users in different ways,

00:00:33.575 --> 00:00:35.524
such as using Facebook,

00:00:35.524 --> 00:00:38.285
Twitter, and many more.

00:00:38.285 --> 00:00:41.325
All these methods are called strategies,

00:00:41.325 --> 00:00:46.995
under this project and what we use an e-mail and password combination to sign-in.

00:00:46.995 --> 00:00:51.240
If we click on Username & Password up here.

00:00:51.240 --> 00:00:53.510
Whenever it's taken to this username and

00:00:53.510 --> 00:00:57.260
password section and we can see by this functionality,

00:00:57.260 --> 00:01:02.360
this is stored inside of a module called Passport hyperlocal.

00:01:02.360 --> 00:01:05.525
We'll go ahead and install assume.

00:01:05.525 --> 00:01:07.490
In addition to this,

00:01:07.490 --> 00:01:10.730
there is also a convenient package we're going to be

00:01:10.730 --> 00:01:14.725
using called Passport-Local Mongoose.

00:01:14.725 --> 00:01:18.380
This is a plugin or extension to Mongoose,

00:01:18.380 --> 00:01:20.720
which makes it really easy to use passports,

00:01:20.720 --> 00:01:24.275
username and password combination to login.

00:01:24.275 --> 00:01:28.280
It gives us a simple register method which will take

00:01:28.280 --> 00:01:33.050
any user and password and then register this user with Mongoose.

00:01:33.050 --> 00:01:38.215
First, we need to install all these packages over in Visual Studio,

00:01:38.215 --> 00:01:42.390
so close down the server, run NPMI.

00:01:42.390 --> 00:01:45.500
Then I want to include three different packages.

00:01:45.500 --> 00:01:48.880
The first one is passports and you can

00:01:48.880 --> 00:01:52.505
include multiple packages on the same installation.

00:01:52.505 --> 00:01:56.700
Separate by space, we can also add Passports-Local,

00:01:57.440 --> 00:02:04.205
which was the strategy which you've seen before inside the passport documentation.

00:02:04.205 --> 00:02:13.880
Then the third and final of what we need is going to be Passports-Local-Mongoose.

00:02:13.880 --> 00:02:22.815
Hit "Enter". Let these all pull-in from MPM,

00:02:22.815 --> 00:02:24.450
go to number three,

00:02:24.450 --> 00:02:27.880
start the server with MPM run DEF start.

00:02:28.280 --> 00:02:36.960
In the user.js, which is inside of our models. Let's open this up.

00:02:36.970 --> 00:02:40.940
This will see schema which we setup for the user.

00:02:40.940 --> 00:02:44.735
We can require the Passports-Local-Mongoose package.

00:02:44.735 --> 00:02:46.685
Put on top of this file.

00:02:46.685 --> 00:02:52.320
Let's set up our constant called Passports-Local-Mongoose.

00:02:55.690 --> 00:02:58.644
This equal to require.

00:02:58.644 --> 00:03:01.860
This is going to require our node module,

00:03:01.860 --> 00:03:06.550
which is Passport-Local-Mongoose,

00:03:09.470 --> 00:03:13.140
since this is a Mongoose plug in,

00:03:13.140 --> 00:03:17.370
we need to add this plugin to our schema before we can use it.

00:03:17.370 --> 00:03:21.365
Down at the very bottom on the our users schema.

00:03:21.365 --> 00:03:24.195
With all the module we've got exports,

00:03:24.195 --> 00:03:26.590
we can target our User

00:03:27.230 --> 00:03:35.045
schema.plug-in and the plugin which you want to add is Passports-Local-Mongoose.

00:03:35.045 --> 00:03:39.780
This is the constant name which was set up at the top here.

00:03:39.970 --> 00:03:43.775
Next I'm going to pass in a Options objects.

00:03:43.775 --> 00:03:47.765
Separated by comma, open up the curly braces,

00:03:47.765 --> 00:03:56.890
and then we can add in the username field and set this equal to or e-mail.

00:03:58.130 --> 00:04:01.640
This object can take in multiple options.

00:04:01.640 --> 00:04:05.735
You can check these out in the documentation if you want to know more.

00:04:05.735 --> 00:04:09.445
What exactly is this username field?

00:04:09.445 --> 00:04:11.580
As we know when it's passed in,

00:04:11.580 --> 00:04:13.215
two things to login.

00:04:13.215 --> 00:04:17.070
We need an e-mail address and also a password.

00:04:17.070 --> 00:04:21.800
Signing this username field to e-mail is saying that we want to use

00:04:21.800 --> 00:04:26.570
this e-mail field from the schema above as our user name to login.

00:04:26.570 --> 00:04:30.625
By default, if we leave out this username field,

00:04:30.625 --> 00:04:36.425
it will go ahead and look in our schema for a field called username, which we don't have.

00:04:36.425 --> 00:04:43.925
Next, we need to settle Passport over in the app.js file/ head over to app.js.

00:04:43.925 --> 00:04:50.220
Double click on this and let's makes some more space.

00:04:50.220 --> 00:04:53.090
Up at the very top of this file,

00:04:53.090 --> 00:04:55.895
let's go underneath the router,

00:04:55.895 --> 00:04:57.905
will setup a comments.

00:04:57.905 --> 00:05:02.150
This is for passports.js.

00:05:02.150 --> 00:05:05.510
We need to set up passport.js inside of this file by

00:05:05.510 --> 00:05:09.975
requiring the user schema and also the Passport module.

00:05:09.975 --> 00:05:13.910
So const-user.

00:05:13.910 --> 00:05:16.820
This is going to require that we use a model.

00:05:16.820 --> 00:05:21.080
This is./ the model's folder.

00:05:21.080 --> 00:05:24.130
Then forward /the user.

00:05:24.130 --> 00:05:26.780
Next up we can also import

00:05:26.780 --> 00:05:32.155
our passport module and store it inside of a constant called Passport.

00:05:32.155 --> 00:05:36.910
Require a node module called Passport.

00:05:37.310 --> 00:05:39.635
In our express up,

00:05:39.635 --> 00:05:46.015
we need to first initialize Passport by using the passport.initialize middle-ware.

00:05:46.015 --> 00:05:50.385
Blow this, we can scroll down and you can add this pretty much anywhere.

00:05:50.385 --> 00:05:53.420
Once on this just after the view engine setup,

00:05:53.420 --> 00:05:55.370
let's add a comment.

00:05:55.370 --> 00:05:59.580
So configure Passport middle-ware.

00:06:00.260 --> 00:06:03.725
Again, we're going to make use of app.use,

00:06:03.725 --> 00:06:05.495
which we've used in the past.

00:06:05.495 --> 00:06:11.190
Go to, pass in the possible variable.initialize;

00:06:14.930 --> 00:06:19.000
then a second one, app.use.

00:06:19.000 --> 00:06:23.370
This one is passport.session;

00:06:25.670 --> 00:06:31.795
This first line will initialize passport to use inside of our application.

00:06:31.795 --> 00:06:35.980
Then the second one, by adding passport.session,

00:06:35.980 --> 00:06:38.560
will allow us to use sessions later on,

00:06:38.560 --> 00:06:40.750
skip the current user logged in.

00:06:40.750 --> 00:06:43.270
But we'll come back to this later on.

00:06:43.270 --> 00:06:45.175
We said earlier that using

00:06:45.175 --> 00:06:50.979
a username and password combination is called a passport local strategy.

00:06:50.979 --> 00:06:55.355
This can now be setup using passport.use.

00:06:55.355 --> 00:06:59.710
Just below this, we can say that passports.use,

00:07:00.590 --> 00:07:08.080
our user model U.createStrategy.

00:07:10.460 --> 00:07:17.825
These create strategy is a helper method provided by the Passports-Local-Mongoose module,

00:07:17.825 --> 00:07:22.025
which we installed, which then adds to our user schema.

00:07:22.025 --> 00:07:27.380
This is responsible for creating the Passport-Local strategy follower, to announce,

00:07:27.380 --> 00:07:30.920
to take advantage of the username and password login,

00:07:30.920 --> 00:07:33.155
which you want to use from passports.

00:07:33.155 --> 00:07:38.135
We then need to serialize and deserialize the user.

00:07:38.135 --> 00:07:40.025
First form is to type this out,

00:07:40.025 --> 00:07:43.475
and then we could talk a little bit about what this is doing.

00:07:43.475 --> 00:07:48.660
First of all, passport.serializeUser.

00:07:49.490 --> 00:07:54.740
Inside here we pass in our user objects, rubber user model.

00:07:54.740 --> 00:07:58.350
then the serialize user method.

00:07:58.460 --> 00:08:05.530
Then we do pretty much the opposite, which is passport.deserializeUser.

00:08:05.530 --> 00:08:12.640
Just like a bullet, we add destroy user model.deserializeUser.

00:08:13.340 --> 00:08:16.640
This can be a little complicated to get your head

00:08:16.640 --> 00:08:20.440
around but the main concept relates to sessions.

00:08:20.440 --> 00:08:23.660
A session which we'll look at in more detail soon,

00:08:23.660 --> 00:08:26.915
will basically allow us to store the user details,

00:08:26.915 --> 00:08:31.750
so they remain logged in when clicking from one page to the next one.

00:08:31.750 --> 00:08:36.080
These functions tell Passport how to get the information from

00:08:36.080 --> 00:08:40.805
this user objects and which information to store into our session.

00:08:40.805 --> 00:08:43.435
This is the serialized path.

00:08:43.435 --> 00:08:49.370
The deserialized path is the function that will be responsible for them getting

00:08:49.370 --> 00:08:55.475
the current users information back from our session and then back into the user objects.

00:08:55.475 --> 00:08:58.595
Therefore staying and logged in between pages.

00:08:58.595 --> 00:09:02.480
But again, we'll come back to sessions in a later video.

00:09:02.480 --> 00:09:05.630
This should be now for the configuration.

00:09:05.630 --> 00:09:08.610
Back over to the user controller.

00:09:08.610 --> 00:09:13.190
Save the user file or to use a controller.

00:09:13.190 --> 00:09:17.075
To kick things off over in the sign-up post,

00:09:17.075 --> 00:09:19.985
which is this array we created here.

00:09:19.985 --> 00:09:23.825
Make sure we have removed the res.jayson.

00:09:23.825 --> 00:09:28.580
Remove this line and then reinstate our res.render.

00:09:28.580 --> 00:09:30.800
Just after this res.render,

00:09:30.800 --> 00:09:34.140
I'm going to add in the return keyword.

00:09:34.180 --> 00:09:37.220
This return keyword will break out of

00:09:37.220 --> 00:09:40.280
the statements if there are any errors on this stage.

00:09:40.280 --> 00:09:44.705
This if section above is hunted in if there are any errors,

00:09:44.705 --> 00:09:46.220
but if they're not,

00:09:46.220 --> 00:09:51.170
we can go ahead and save the user information inside of this L section.

00:09:51.170 --> 00:09:56.830
Inside here, we can setup a constant called new user.

00:09:56.830 --> 00:10:04.355
This equal to a new user objects where we'll pass in the request of body,

00:10:04.355 --> 00:10:07.805
which is the information from the form.

00:10:07.805 --> 00:10:12.935
Then we use another method provided by Passports-Local-Mongoose,

00:10:12.935 --> 00:10:15.960
which will then register our new user.

00:10:15.960 --> 00:10:19.790
Grab I will use a model U.register.

00:10:22.330 --> 00:10:26.690
This register method takes in three arguments.

00:10:26.690 --> 00:10:29.825
First is the user which we want to register,

00:10:29.825 --> 00:10:33.065
which we will have stored in this constant just here.

00:10:33.065 --> 00:10:35.910
Again new user.

00:10:37.070 --> 00:10:40.394
The second one is a password,

00:10:40.394 --> 00:10:45.735
which is stored in request.body.password.

00:10:45.735 --> 00:10:48.735
This is just going to be a test user for now.

00:10:48.735 --> 00:10:51.945
Storing this plaintext is not a problem,

00:10:51.945 --> 00:10:56.569
but soon we will look at how we can encrypt his password before saving,

00:10:56.569 --> 00:10:59.255
which is something which we should always do.

00:10:59.255 --> 00:11:02.210
Third is a callback function.

00:11:02.210 --> 00:11:07.520
This is a function which will run when the register method has completed.

00:11:07.520 --> 00:11:14.255
Add a coma, add a function which takes in our error,

00:11:14.255 --> 00:11:16.490
let's make it a little smaller.

00:11:16.490 --> 00:11:19.400
Then create the function body.

00:11:19.400 --> 00:11:21.200
Inside of this call back.

00:11:21.200 --> 00:11:26.390
The first thing to do is to handle any errors and then pass them along our middle-ware.

00:11:26.390 --> 00:11:34.320
We'll say if an error is present that's on a console log,

00:11:34.320 --> 00:11:41.380
with the message of error while registering.

00:11:41.560 --> 00:11:47.225
Then we can add a comma and then pass in the error message,

00:11:47.225 --> 00:11:50.430
which is stored in this variable of err.

00:11:50.440 --> 00:11:54.455
After this, we can pass this along our middle-ware chain.

00:11:54.455 --> 00:11:58.505
We can return an emphasis along to next,

00:11:58.505 --> 00:12:01.470
which also takes in the error.

00:12:02.690 --> 00:12:07.685
Let's do the browser. We can create a test user and check this is working.

00:12:07.685 --> 00:12:12.380
If we go back and it goes to our sign-up routes.

00:12:12.380 --> 00:12:15.620
Lets add a test user.

00:12:15.620 --> 00:12:18.605
So test our test.

00:12:18.605 --> 00:12:27.600
Confirm. The password is fine. Click "Confirm".

00:12:28.190 --> 00:12:30.325
If we click "Submit",

00:12:30.325 --> 00:12:33.860
the browser icon up at the top will keep spinning.

00:12:33.860 --> 00:12:37.715
This is because we have not yet told it what to do next.

00:12:37.715 --> 00:12:45.740
But if we go over to mLab and then reload and I scroll down,

00:12:45.740 --> 00:12:50.555
we now see we have our hotel collection with our original told documents.

00:12:50.555 --> 00:12:56.180
Alongside this, we now have our user's collection which has more documents inside.

00:12:56.180 --> 00:12:58.460
Let's click on this.

00:12:58.460 --> 00:13:00.985
Makes more space.

00:13:00.985 --> 00:13:06.630
There's our test user which we just added with the password of testing more.

00:13:06.630 --> 00:13:08.495
As I mentioned before,

00:13:08.495 --> 00:13:11.300
password should not be stored as plain text.

00:13:11.300 --> 00:13:14.285
This is solving which will fix in the next video,

00:13:14.285 --> 00:13:17.460
where we'll look at password encryption.
