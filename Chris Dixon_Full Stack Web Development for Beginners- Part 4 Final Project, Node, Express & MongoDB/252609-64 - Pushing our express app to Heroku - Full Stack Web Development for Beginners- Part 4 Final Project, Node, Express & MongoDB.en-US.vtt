WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.620 --> 00:00:03.240
I'm now going to show you how to push

00:00:03.240 --> 00:00:08.265
your finished express application to a platform called Heroku.

00:00:08.265 --> 00:00:15.510
Heroku is a cloud-based platform which allows us to easily deploy our apps to production.

00:00:15.510 --> 00:00:18.990
It works with Ruby on Rails, PHP,

00:00:18.990 --> 00:00:23.130
Python, Node, and [inaudible].

00:00:23.130 --> 00:00:24.990
There is also a free tier.

00:00:24.990 --> 00:00:26.910
So we can learn how to use it without

00:00:26.910 --> 00:00:31.440
any cost and we only need to pay if our project grows.

00:00:31.440 --> 00:00:35.105
Heroku rooms on apps called dynodes,

00:00:35.105 --> 00:00:38.510
which are basically fully managed containers.

00:00:38.510 --> 00:00:40.505
To push to Heroku,

00:00:40.505 --> 00:00:45.185
we first need to install a version control software called git.

00:00:45.185 --> 00:00:50.240
This is available from gitscm.com.

00:00:50.240 --> 00:00:52.765
So click on this link here.

00:00:52.765 --> 00:00:56.560
We're then taking it to the homepage for git.

00:00:56.560 --> 00:01:00.605
So let's go over to the download section at the bottom.

00:01:00.605 --> 00:01:06.475
Click on this, and then click on the download for your operating system.

00:01:06.475 --> 00:01:09.855
So I'm going to click on the Mac version just there,

00:01:09.855 --> 00:01:13.030
and set it off downloading.

00:01:13.220 --> 00:01:16.640
I already have git installed on my machine.

00:01:16.640 --> 00:01:18.470
So if you don't want to go ahead and follow

00:01:18.470 --> 00:01:23.395
the installation instructions to install for your particular operating system.

00:01:23.395 --> 00:01:25.770
If you are unfamiliar with git,

00:01:25.770 --> 00:01:28.580
it is an open-source version control system,

00:01:28.580 --> 00:01:30.890
which allows us to work on projects or

00:01:30.890 --> 00:01:35.735
software and then push our changes at various stages.

00:01:35.735 --> 00:01:39.725
This allows us to not only keep track of any changes,

00:01:39.725 --> 00:01:44.575
but also to go back to earlier versions, if we mess up.

00:01:44.575 --> 00:01:47.759
Git is installed on our machine,

00:01:47.759 --> 00:01:52.850
and we can also push our code to hosted services such as GitHub,

00:01:52.850 --> 00:01:56.605
or in our case we can use it to push to Heroku.

00:01:56.605 --> 00:01:59.310
So once you are ready, we need to go over to

00:01:59.310 --> 00:02:04.570
the terminal or you can use the built-in terminal in visual studio code.

00:02:04.570 --> 00:02:06.895
So inside the here at the bottom,

00:02:06.895 --> 00:02:09.595
we can check git is installed correctly,

00:02:09.595 --> 00:02:12.905
by using the git dash dash version commands.

00:02:12.905 --> 00:02:15.840
If you see a version number returned back to us,

00:02:15.840 --> 00:02:19.100
this means git has been successfully installed.

00:02:19.100 --> 00:02:23.005
Git doors are project into what is called a repository,

00:02:23.005 --> 00:02:25.945
which you can think of as a storage buckets.

00:02:25.945 --> 00:02:32.455
We can initialize an empty repository in our projects with the git in it command.

00:02:32.455 --> 00:02:35.260
I already have the repository already setup.

00:02:35.260 --> 00:02:38.820
So this reinitialize is the git repository.

00:02:38.820 --> 00:02:41.830
You might get a slightly different message,

00:02:41.830 --> 00:02:44.689
but as long as your repository has been created,

00:02:44.689 --> 00:02:47.060
we now good to move on.

00:02:47.060 --> 00:02:50.120
We can then check the status of which files in

00:02:50.120 --> 00:02:54.395
our projects are being pushed to git and which have not,

00:02:54.395 --> 00:02:58.120
by using the command called git status.

00:02:58.120 --> 00:03:04.865
So hit enter and now see a list of red files and folders from our projects.

00:03:04.865 --> 00:03:09.080
The illustrious red because they are classed as untracked.

00:03:09.080 --> 00:03:13.040
We need to declare which files we want to add to git,

00:03:13.040 --> 00:03:14.855
and which ones we don't.

00:03:14.855 --> 00:03:16.940
Before we go any further though,

00:03:16.940 --> 00:03:20.135
there is something we usually want to do first.

00:03:20.135 --> 00:03:25.120
This is to create a new file in our project called git ignore.

00:03:25.120 --> 00:03:29.480
This because we have all of these files and folders,

00:03:29.480 --> 00:03:33.850
but we don't always want them all to be shared on git.

00:03:33.850 --> 00:03:40.280
We don't want to share the.env file because this has sensitive information.

00:03:40.280 --> 00:03:43.970
Also the node modules folder can be ignored too,

00:03:43.970 --> 00:03:48.925
since it is a huge folder which will take up a lot of space.

00:03:48.925 --> 00:03:51.340
So all the design bar,

00:03:51.340 --> 00:03:54.245
in the root of our projects,

00:03:54.245 --> 00:03:56.225
what's close all this down.

00:03:56.225 --> 00:04:02.040
Create a new file called.gitignore.

00:04:02.830 --> 00:04:05.060
So to ignore these files,

00:04:05.060 --> 00:04:06.890
we can then list them inside of here.

00:04:06.890 --> 00:04:11.230
So starting with the node modules folder.

00:04:11.230 --> 00:04:14.040
So just add them by name.

00:04:14.040 --> 00:04:16.310
So the node modules folder,

00:04:16.310 --> 00:04:19.775
we can also ignore the.env file,

00:04:19.775 --> 00:04:23.905
and then finally at the end, the DS-Store.

00:04:23.905 --> 00:04:29.900
The DS-Store is a file which is often added automatically when using a Mac.

00:04:29.900 --> 00:04:35.005
So we want to acknowledge it too as it will not be needed for all projects.

00:04:35.005 --> 00:04:37.940
This git ignore file becomes even more

00:04:37.940 --> 00:04:42.440
important if we push this code to somewhere such as GitHub.

00:04:42.440 --> 00:04:44.300
If we forget to add this,

00:04:44.300 --> 00:04:48.830
our sensitive information could be online for anybody else to see.

00:04:48.830 --> 00:04:51.895
Also the node modules is not needed,

00:04:51.895 --> 00:04:55.170
because we can always run the NPM install command,

00:04:55.170 --> 00:05:00.040
to install them all from the list in the package.json file.

00:05:00.040 --> 00:05:04.020
Also inside of this package.json file,

00:05:04.020 --> 00:05:06.450
I'm going to add [inaudible] setting,

00:05:06.450 --> 00:05:11.710
and this is to declare which version of nodes we're going to be using.

00:05:11.710 --> 00:05:19.760
So if we're going down to the terminal and type in node dash-v,

00:05:19.760 --> 00:05:27.480
I'm on chromium version10.3.0 So we can set this in the package.json.

00:05:27.480 --> 00:05:35.695
So open this up, and then right down at the very bottom onto the dev dependencies,

00:05:35.695 --> 00:05:38.405
we can set the engines.

00:05:38.405 --> 00:05:44.665
This is an object where we set the version of nodes to be a string,

00:05:44.665 --> 00:05:46.000
which is our current version.

00:05:46.000 --> 00:05:49.630
So I on 10.3.0,

00:05:49.630 --> 00:05:54.115
and of course this happens to be the current version which you are using.

00:05:54.115 --> 00:05:57.685
We set the Node version inside here.

00:05:57.685 --> 00:06:00.460
So the production version of Node will match

00:06:00.460 --> 00:06:03.835
the same version we are using during development.

00:06:03.835 --> 00:06:06.880
This could avoid any potential problems when using

00:06:06.880 --> 00:06:10.690
different versions in development and production.

00:06:10.690 --> 00:06:14.605
Now if we close this down and go,

00:06:14.605 --> 00:06:16.840
in fact let me save this first,

00:06:16.840 --> 00:06:18.790
and then back over to the terminal.

00:06:18.790 --> 00:06:21.650
We can again run git status,

00:06:21.650 --> 00:06:25.965
hit enter, save the git ignore file,

00:06:25.965 --> 00:06:29.235
and then run git status, hit enter.

00:06:29.235 --> 00:06:35.860
Now we see we are now missing the.env file and also the node modules.

00:06:35.860 --> 00:06:39.745
So now we can go ahead and use the git as command,

00:06:39.745 --> 00:06:41.350
followed by the dot.

00:06:41.350 --> 00:06:47.345
So git add dot hit enter.

00:06:47.345 --> 00:06:53.285
This tells git to add or to stage all of the files which are red.

00:06:53.285 --> 00:07:00.470
We can also use git add followed by the file name to add one file or folder at the time,

00:07:00.470 --> 00:07:04.505
rather than use dot, which would use to add all of the files.

00:07:04.505 --> 00:07:07.450
If we again run git status,

00:07:07.450 --> 00:07:12.110
hit enter, the files and folders are now set to be green.

00:07:12.110 --> 00:07:15.710
This means they are now ready to be committed to git.

00:07:15.710 --> 00:07:18.710
For this there is the git commit command.

00:07:18.710 --> 00:07:26.750
So type git, commit-m and then inside of quotations you can add a message,

00:07:26.750 --> 00:07:29.345
such as initial commit.

00:07:29.345 --> 00:07:35.295
So we add this message to describe what changes we've made by using a dash m flag,

00:07:35.295 --> 00:07:38.185
then a message in quotes just afterwards.

00:07:38.185 --> 00:07:45.495
So hit enter, and this should now commits all of our files into our empty repository.

00:07:45.495 --> 00:07:50.705
Over git status, down to the bottom hit enter,

00:07:50.705 --> 00:07:53.695
will now show that it is now nothing to commit.

00:07:53.695 --> 00:07:59.545
Our work in tray is clean and it will stay this way until we modify any of the files.

00:07:59.545 --> 00:08:02.765
So for example, in the style.css,

00:08:02.765 --> 00:08:06.290
if we added something such as padding:1px,

00:08:06.990 --> 00:08:11.795
save this and [inaudible] git status.

00:08:11.795 --> 00:08:16.155
But now see the modified version of the style.css.

00:08:16.155 --> 00:08:19.035
But I'm not going to push to git,

00:08:19.035 --> 00:08:21.205
since this is going to be deleted.

00:08:21.205 --> 00:08:24.605
So this is now our work completed with git.

00:08:24.605 --> 00:08:27.650
So now we need to move on to Heroku.

00:08:27.650 --> 00:08:34.450
The first thing we need to do is head over to Heroku.com and create a free account.

00:08:34.450 --> 00:08:37.810
So let's head over and sign up.

00:08:39.200 --> 00:08:43.090
So add our details inside here.

00:08:47.790 --> 00:08:51.865
Out of a role, go for a developer,

00:08:51.865 --> 00:08:55.210
add the country, select our primary language.

00:08:55.210 --> 00:08:59.245
I want to go from node, no robots,

00:08:59.245 --> 00:09:06.535
create a free account and then you need to go into your emails and confirm the accounts.

00:09:06.535 --> 00:09:13.075
Go ahead and do that and come back in a few moments. Okay. Welcome back.

00:09:13.075 --> 00:09:17.140
Once you've confirmed your new account and set up the password,

00:09:17.140 --> 00:09:19.435
we need to proceed on,

00:09:19.435 --> 00:09:24.055
which then takes us to the dashboard area of Rocchio.

00:09:24.055 --> 00:09:26.680
Inside the dashboard area,

00:09:26.680 --> 00:09:30.235
we can create a new project with this icon at the top.

00:09:30.235 --> 00:09:33.700
Click on New, create new app.

00:09:33.700 --> 00:09:37.510
We then integrate a application name.

00:09:37.510 --> 00:09:43.360
Let's travel, which is unavailable because I've used it to before,

00:09:43.360 --> 00:09:47.935
so let's go for Let's travel to, which is available.

00:09:47.935 --> 00:09:50.770
Select the country or the region,

00:09:50.770 --> 00:09:53.920
and then create a application.

00:09:53.920 --> 00:09:57.610
We then take into our app and we can see we

00:09:57.610 --> 00:10:01.060
have this deployment methods section just here.

00:10:01.060 --> 00:10:04.120
I'm going to use Heroku git method,

00:10:04.120 --> 00:10:08.170
which you see here, which uses the Heroku CLI.

00:10:08.170 --> 00:10:11.815
Using this method, we need to install this CLI.

00:10:11.815 --> 00:10:16.970
Click on the link just here and we'll open this up in a new tab.

00:10:18.210 --> 00:10:25.100
Download and install, and then install for your particular operating system.

00:10:26.220 --> 00:10:31.460
Once it's finished, you can click on this and then go through the installer.

00:10:35.940 --> 00:10:37.960
Good. Once this is done,

00:10:37.960 --> 00:10:44.785
we can now go back over to the terminal and now we'll have access to the Heroku commands.

00:10:44.785 --> 00:10:51.565
Down in the terminal we can add Heroku login to then log into our accounts.

00:10:51.565 --> 00:10:55.400
I want to change the email to the one I just registered.

00:10:58.200 --> 00:11:02.079
Hit Enter and then add the password,

00:11:02.079 --> 00:11:05.030
link to our accounts.

00:11:05.040 --> 00:11:09.220
Great. Now we're logged in as our email usage just here.

00:11:09.220 --> 00:11:10.480
I'm going to type, Clear,

00:11:10.480 --> 00:11:12.340
to give us more space.

00:11:12.340 --> 00:11:15.655
Back over to the project dashboard,

00:11:15.655 --> 00:11:19.075
we need to now copy this line of code just here,

00:11:19.075 --> 00:11:20.965
which is Heroku Gits.

00:11:20.965 --> 00:11:24.310
This is also linked to our Let's Travel project,

00:11:24.310 --> 00:11:30.670
so copy this and paste it into the terminal and then hit "Enter."

00:11:30.670 --> 00:11:36.235
So this will set our Heroku App as a remote version of Gits.

00:11:36.235 --> 00:11:41.320
A remote branch is a version of our project which lives elsewhere,

00:11:41.320 --> 00:11:43.945
on Heroku or GitHub.

00:11:43.945 --> 00:11:47.110
This is our remote version now set and now

00:11:47.110 --> 00:11:51.535
the final stage is to go ahead and push from Gits to Heroku.

00:11:51.535 --> 00:11:55.090
We do this with Gits push Heroku.

00:11:55.090 --> 00:12:04.000
Git push, Heroku and then Master, hit Enter.

00:12:04.000 --> 00:12:09.170
The master branch is the main or the default branch of Gits.

00:12:10.890 --> 00:12:14.350
Give us a few moments to push to Heroku.

00:12:14.350 --> 00:12:19.180
Once this is done we can either copy the link we'll see inside the terminal,

00:12:19.180 --> 00:12:23.630
or we can access a command called Heroku Open.

00:12:23.640 --> 00:12:28.360
Let's build our project and push the Heroku.

00:12:28.360 --> 00:12:31.135
Good. That is all now done,

00:12:31.135 --> 00:12:33.895
so we can either copy the link we see on here,

00:12:33.895 --> 00:12:39.235
or we can type in Heroku and then open, hit Enter.

00:12:39.235 --> 00:12:44.485
It should now open up inside of our browser at the link which we've seen before.

00:12:44.485 --> 00:12:48.055
We seem to see a error inside the browser.

00:12:48.055 --> 00:12:52.480
This is because in our project we setup environment variables,

00:12:52.480 --> 00:12:57.010
but we've ignored the.ENV file, which contains them.

00:12:57.010 --> 00:13:00.895
Now we need to add these variables back into Heroku,

00:13:00.895 --> 00:13:04.720
back over to the dashboard and up to the top.

00:13:04.720 --> 00:13:07.930
We have a settings option just here and then inside

00:13:07.930 --> 00:13:12.220
here we have a section called Config Variables.

00:13:12.220 --> 00:13:18.445
Let's click on reveal the variables and we see we don't have any of these setup just yet.

00:13:18.445 --> 00:13:23.555
Now we can copy the variables over from our.ENVfile.

00:13:23.555 --> 00:13:27.385
Let's open up the. ENV folder.

00:13:27.385 --> 00:13:32.185
The first one is DB. Let's copy this.

00:13:32.185 --> 00:13:34.915
We can add our key as DB,

00:13:34.915 --> 00:13:38.604
and then copy our MongoDB value.

00:13:38.604 --> 00:13:42.520
Paste this in as the value then add.

00:13:42.520 --> 00:13:45.220
Just do the same for our cloud,

00:13:45.220 --> 00:13:51.470
and rename the value,

00:13:52.560 --> 00:14:02.755
the API key, place this in.

00:14:02.755 --> 00:14:06.440
Next we have the API secrets.

00:14:13.440 --> 00:14:21.265
This one in, and then we just need to remove that and just have the key.

00:14:21.265 --> 00:14:23.890
The secrets and then add this.

00:14:23.890 --> 00:14:27.880
Finally the secrets of travel session.

00:14:27.880 --> 00:14:35.455
Add this in, there we go.

00:14:35.455 --> 00:14:37.780
As well as these environment variables,

00:14:37.780 --> 00:14:40.480
there is one more which I'm going to add.

00:14:40.480 --> 00:14:45.310
Down at the bottom, it's going to be node_ ENV.

00:14:45.310 --> 00:14:50.245
This is going to be set to production, so add this.

00:14:50.245 --> 00:14:55.975
This will change the default node environments from development to the production.

00:14:55.975 --> 00:14:58.540
This will change some of the app settings,

00:14:58.540 --> 00:15:00.835
such as removing some error messages,

00:15:00.835 --> 00:15:03.220
which we don't want the user to see.

00:15:03.220 --> 00:15:08.380
It will now cash our CSS and review templates for performance.

00:15:08.380 --> 00:15:13.660
It will now ignore the dev dependencies from the package.json file.

00:15:13.660 --> 00:15:16.615
You no longer need these in production.

00:15:16.615 --> 00:15:19.975
Now if we go back over to the browser tab,

00:15:19.975 --> 00:15:23.320
click on this and then reload the browser.

00:15:23.320 --> 00:15:27.160
We now see the project is working again.

00:15:27.160 --> 00:15:32.905
This is now a live link which you can now take and show your friends and family.

00:15:32.905 --> 00:15:35.845
Also if you do have your own custom domain,

00:15:35.845 --> 00:15:42.100
you can use this to read Heroku and you can find out how to do this in the documentation.

00:15:42.100 --> 00:15:46.480
Play around with this and everything should still work as normal.

00:15:46.480 --> 00:15:50.240
We should still be able to log in. Let's give this a go.

00:15:51.540 --> 00:15:55.495
We're now logged in, we can go to our accounts.

00:15:55.495 --> 00:16:01.225
There's our bookings, all images still seems to work in from cloud unary, which is good.

00:16:01.225 --> 00:16:04.450
Of course everything is still being pulled in from Mongo

00:16:04.450 --> 00:16:08.020
because we've added the environment variable from mLab.

00:16:08.020 --> 00:16:11.200
Remember though the version of mLab we've been using for

00:16:11.200 --> 00:16:14.245
testing isn't designed for production,

00:16:14.245 --> 00:16:17.349
but this is fine just for learning purposes.

00:16:17.349 --> 00:16:22.495
For now little congratulations on pushing your Express Application to production.

00:16:22.495 --> 00:16:26.035
But for now though, a huge congratulations for getting this far,

00:16:26.035 --> 00:16:31.340
and also now pushing your Express Application to a live web server.
