WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.860 --> 00:00:03.645
Inside of the hotel controller,

00:00:03.645 --> 00:00:07.570
we created the homepage filters early in the course.

00:00:07.570 --> 00:00:12.180
You may remember that the other time we said that we're using multiple await calls,

00:00:12.180 --> 00:00:13.500
just like we've done here,

00:00:13.500 --> 00:00:16.020
is not always a good idea.

00:00:16.020 --> 00:00:18.690
Doing this is perfectly fine, however,

00:00:18.690 --> 00:00:24.600
if the second await call relies on the first one finishing before this runs.

00:00:24.600 --> 00:00:30.165
For example, if the first await at the top here, save the hotel,

00:00:30.165 --> 00:00:34.905
and then the second await call needed to access the hotel ID,

00:00:34.905 --> 00:00:39.320
it would then make sense to keep them both in this way to ensure

00:00:39.320 --> 00:00:44.095
that we have the hotel ID ready for the second one when needed.

00:00:44.095 --> 00:00:46.085
But here, we are blocking,

00:00:46.085 --> 00:00:52.595
fetching the countries from the database until this first await section has finished,

00:00:52.595 --> 00:00:54.950
and this makes no sense.

00:00:54.950 --> 00:00:59.585
What we really want to do is kick these both off at the same time.

00:00:59.585 --> 00:01:03.200
For this, we have something called promise to all.

00:01:03.200 --> 00:01:06.560
Promise to all is a method which basically is

00:01:06.560 --> 00:01:11.320
a giant promise which wraps all other promises inside.

00:01:11.320 --> 00:01:16.795
You maybe thinking, "What does promises have to do with async await?"

00:01:16.795 --> 00:01:20.580
Well, async await also returns a promise too,

00:01:20.580 --> 00:01:23.715
so let's take a look at this in action.

00:01:23.715 --> 00:01:30.885
First, let's remove the two awaits keywords as we don't need these anymore.

00:01:30.885 --> 00:01:38.095
Now, we're going to look at a few new techniques which will introduce in ES6 or ES2015.

00:01:38.095 --> 00:01:41.310
First is what is called destructuring.

00:01:41.310 --> 00:01:44.105
More specifically, for this example,

00:01:44.105 --> 00:01:46.960
we're going to be looking at array destructuring.

00:01:46.960 --> 00:01:51.170
We can use this to basically create an array of constant names,

00:01:51.170 --> 00:01:54.740
then assign these to an array of values which we unpack.

00:01:54.740 --> 00:01:59.815
It sounds complicated, but it's pretty simple when we see it all typed out.

00:01:59.815 --> 00:02:03.420
First, let's create a constant to begin with.

00:02:03.420 --> 00:02:08.740
After our countries, just down here,

00:02:08.740 --> 00:02:12.125
let's make some space, create a constant.

00:02:12.125 --> 00:02:15.655
This time, this is going to be an array of values.

00:02:15.655 --> 00:02:18.660
Passing two values, the first one,

00:02:18.660 --> 00:02:21.135
I'm going to call filteredCountries,

00:02:21.135 --> 00:02:25.560
and then the second one, filteredHotels.

00:02:25.560 --> 00:02:29.285
I have named these countries and hotel variables

00:02:29.285 --> 00:02:34.450
filtered because these results are filtered using the aggregation pipeline,

00:02:34.450 --> 00:02:39.695
then we use promise to all which is also new in ES6.

00:02:39.695 --> 00:02:41.970
This equal to, now,

00:02:41.970 --> 00:02:47.620
we're going to await, promise with a capital P,.all.

00:02:47.750 --> 00:02:49.905
Like we said before,

00:02:49.905 --> 00:02:52.560
Promise.all takes in multiple promises,

00:02:52.560 --> 00:02:58.330
so it can pass in our countries and also our hotel variables inside here.

00:02:58.330 --> 00:03:04.770
First of all, let's pass in the countries and this needs to be an array,

00:03:05.030 --> 00:03:08.620
and also our hotels.

00:03:10.010 --> 00:03:13.930
Now, this Promise.all, which we have here,

00:03:13.930 --> 00:03:17.195
will now be resolved once both the countries

00:03:17.195 --> 00:03:21.715
and also the hotel promises have successfully resolved.

00:03:21.715 --> 00:03:25.045
Whereas before, using await individually,

00:03:25.045 --> 00:03:26.825
rather than just once here,

00:03:26.825 --> 00:03:29.825
this caused both of them to run in order.

00:03:29.825 --> 00:03:32.750
Now, we can set both these off at the same time,

00:03:32.750 --> 00:03:35.305
resulting in faster performance.

00:03:35.305 --> 00:03:37.830
As for the array destructuring,

00:03:37.830 --> 00:03:41.355
these countries and also the hotels promises,

00:03:41.355 --> 00:03:43.170
will then be basically unpacked,

00:03:43.170 --> 00:03:47.940
and installed in the constant names which we set here in the same order.

00:03:47.990 --> 00:03:53.065
The countries will then be unpacked, installed into filteredCountries.

00:03:53.065 --> 00:03:55.970
Once resolved, also the hotels will then be

00:03:55.970 --> 00:03:59.255
stored inside the filteredCountries constants.

00:03:59.255 --> 00:04:03.755
Let's take a look at one more example to get our head around all this.

00:04:03.755 --> 00:04:07.820
We can leave this code in because this is what we need for the course.

00:04:07.820 --> 00:04:10.819
But this one is just going to be a simple example,

00:04:10.819 --> 00:04:13.610
so you don't need to type along if you don't want to.

00:04:13.610 --> 00:04:16.490
A consonant of food.

00:04:16.490 --> 00:04:21.885
Let's set this to an array and add some food values of cheese,

00:04:21.885 --> 00:04:25.580
fish, and also rice.

00:04:26.220 --> 00:04:30.550
Then a constant of a,

00:04:30.550 --> 00:04:34.750
b, and c. Now,

00:04:34.750 --> 00:04:38.510
if we want to destructure all the values from this array and

00:04:38.510 --> 00:04:42.805
install them inside of all three values here but in order,

00:04:42.805 --> 00:04:44.630
so a will become cheese,

00:04:44.630 --> 00:04:48.220
b will be fish, and c will be equal to rice.

00:04:48.220 --> 00:04:52.530
All we need to do is to set these values equal to our food array.

00:04:52.530 --> 00:04:57.030
Then a series with a res.send.

00:04:57.320 --> 00:04:59.970
Let's send the value of a.

00:04:59.970 --> 00:05:05.085
Check if this is working and comment out our res.render.

00:05:05.085 --> 00:05:09.315
Save this and we're also on the homepage.

00:05:09.315 --> 00:05:13.380
Let's go to localhost:3000.

00:05:13.380 --> 00:05:15.870
There's the value of cheese.

00:05:15.870 --> 00:05:22.750
Let's try b and also c, which should be rice.

00:05:25.490 --> 00:05:29.805
Reload. Now, we get the value of rice too,

00:05:29.805 --> 00:05:32.970
meaning our food array is now been unpacked

00:05:32.970 --> 00:05:37.070
and then stored into all three constants just here.

00:05:37.070 --> 00:05:41.965
This is pretty much the same thing which we are doing above with our filtered variables.

00:05:41.965 --> 00:05:44.620
Then we are setting these to our countries and

00:05:44.620 --> 00:05:48.680
hotels promises once the data has been resolved.

00:05:48.680 --> 00:05:57.020
Now, let's leave this example and [inaudible] our res.render.

00:05:57.020 --> 00:06:00.300
Good. Now, we have our two constant names,

00:06:00.300 --> 00:06:02.880
our filteredCountries, and filteredHotels.

00:06:02.880 --> 00:06:08.260
We also need to pass these to our template in place of our old constants here.

00:06:08.260 --> 00:06:15.425
This one is filteredCountries and this one is filteredHotels.

00:06:15.425 --> 00:06:19.010
Also since these variable names are now changed,

00:06:19.010 --> 00:06:22.370
we also need to change them in the template to match.

00:06:22.370 --> 00:06:25.645
The template is the index.code.

00:06:25.645 --> 00:06:28.045
We go into here.

00:06:28.045 --> 00:06:32.345
For the hotel, instead of looping through hotels,

00:06:32.345 --> 00:06:35.790
we need to loop through filteredHotels.

00:06:36.170 --> 00:06:39.285
Then do the same with the countries.

00:06:39.285 --> 00:06:45.690
This time, let's use is filteredCountries. Then save.

00:06:45.690 --> 00:06:49.490
Now, all that's left to do is to try this out over in the browser.

00:06:49.490 --> 00:06:52.350
On the homepage, hit refresh.

00:06:52.370 --> 00:06:57.155
We can still see our hotels being pulled in from the database,

00:06:57.155 --> 00:07:00.595
and also the countries down at the bottom too.

00:07:00.595 --> 00:07:04.350
This means both our destructuring and also our

00:07:04.350 --> 00:07:08.940
Promise.all method is now successfully working.

00:07:08.940 --> 00:07:12.665
How many hotels we have inside of our database,

00:07:12.665 --> 00:07:17.600
changing both our promises to run at once rather than one after the other,

00:07:17.600 --> 00:07:20.605
has probably not gained much in performance,

00:07:20.605 --> 00:07:23.495
but it's a useful improvement nevertheless,

00:07:23.495 --> 00:07:26.630
and some extra knowledge which is useful to have.

00:07:26.630 --> 00:07:32.310
This kind of code is something which will be more noticeable on a larger application.
