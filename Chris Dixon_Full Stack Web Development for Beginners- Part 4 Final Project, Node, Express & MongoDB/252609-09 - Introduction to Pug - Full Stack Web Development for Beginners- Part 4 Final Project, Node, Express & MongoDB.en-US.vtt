WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:06.295
We have already talked about how we will use templates to create our projects.

00:00:06.295 --> 00:00:09.600
These templates will be a combination of HTML,

00:00:09.600 --> 00:00:13.380
JavaScript along with any dynamic data mixed in,

00:00:13.380 --> 00:00:15.225
such as a hotel name,

00:00:15.225 --> 00:00:17.505
which we looked at in the last section.

00:00:17.505 --> 00:00:22.710
We know that we can't do all of this with the standard HTML files.

00:00:22.710 --> 00:00:28.875
So we need to use a templating language which compiles all of this into HTML.

00:00:28.875 --> 00:00:33.075
I'll be using a templating language called Pug to do this.

00:00:33.075 --> 00:00:35.480
It may look a little strange to begin with,

00:00:35.480 --> 00:00:39.775
but it's actually simpler than normal HTML tags.

00:00:39.775 --> 00:00:41.730
To see how to use Pug,

00:00:41.730 --> 00:00:44.910
let's head over to our index.pug file.

00:00:44.910 --> 00:00:48.180
There was a sidebar to a give small space,

00:00:48.180 --> 00:00:51.260
and we've already had a quick look here with

00:00:51.260 --> 00:00:54.725
the p elements and also with an [inaudible] image.

00:00:54.725 --> 00:00:57.065
We have extends and block at the top,

00:00:57.065 --> 00:00:58.805
which we'll come back to soon.

00:00:58.805 --> 00:01:02.710
For now let's concentrate on the features of pug.

00:01:02.710 --> 00:01:08.945
Generally, using Pug is just the HTML opening tag to make for the shorter syntax,

00:01:08.945 --> 00:01:16.565
just like this p element with the text of a text-based elements work in a similar way,

00:01:16.565 --> 00:01:18.725
such as add in a heading.

00:01:18.725 --> 00:01:21.400
So let's add a h1,

00:01:21.400 --> 00:01:26.220
let's say title, over to the browser,

00:01:26.220 --> 00:01:30.590
and then reload and we have a level one heading down here.

00:01:30.590 --> 00:01:35.025
Attributes are added just like with normal HTML tags.

00:01:35.025 --> 00:01:38.685
But instead with Pug they add it inside brackets.

00:01:38.685 --> 00:01:42.785
If we wanted to add a link and then at the href,

00:01:42.785 --> 00:01:44.990
we do this inside of the brackets,

00:01:44.990 --> 00:01:47.735
and then the rest is just added as normal.

00:01:47.735 --> 00:01:52.100
So let's add a link to Google.

00:01:52.100 --> 00:01:59.755
So www.google.com, we can also add our classes.

00:01:59.755 --> 00:02:02.985
So let's add a class of button,

00:02:02.985 --> 00:02:06.350
and then afterwards we add our text outside the brackets,

00:02:06.350 --> 00:02:08.750
which you want to add for the link.

00:02:08.750 --> 00:02:11.840
So link to Google text.

00:02:11.840 --> 00:02:18.890
Save this and then reload and now have our hyperlink at the bottom,

00:02:18.890 --> 00:02:23.495
and if you click on this, it will work just like normal HTML a tag.

00:02:23.495 --> 00:02:27.990
Back over to our project and the index.pug.

00:02:28.490 --> 00:02:33.605
The indentation is also really important when using Pug.

00:02:33.605 --> 00:02:38.950
In normal HTML, indentation is only really for readability.

00:02:38.950 --> 00:02:44.770
But when using Pug, it's necessary to use it to show what level each element is on.

00:02:44.770 --> 00:02:52.730
For example, if we added a div to contain this title on the link, just like this,

00:02:52.940 --> 00:02:56.130
and then if we go to the browser,

00:02:56.130 --> 00:03:01.540
and then go into developer tools would right-click and inspect,

00:03:01.640 --> 00:03:06.100
and then select this div just here.

00:03:06.380 --> 00:03:09.630
So this is a div which we just added,

00:03:09.630 --> 00:03:13.280
and the developer tool shows that the div title

00:03:13.280 --> 00:03:17.420
and also our hyperlink are all on separate lines.

00:03:17.420 --> 00:03:20.120
They effectively all at the same level,

00:03:20.120 --> 00:03:25.465
we don't have the title and the link inside of this div tags.

00:03:25.465 --> 00:03:32.505
But if we go ahead and indent the h1 and the link,

00:03:32.505 --> 00:03:34.665
and then refresh this.

00:03:34.665 --> 00:03:40.970
We now see that the div opening tag and closing tag now surrounds our title and link.

00:03:40.970 --> 00:03:47.630
So the indentation causes these two elements now to be nested inside of the parent div.

00:03:47.630 --> 00:03:52.850
Another thing about indentation inside of a pug file is only mixins,

00:03:52.850 --> 00:03:54.430
which we'll cover later,

00:03:54.430 --> 00:03:58.875
and also this block declaration at the top,

00:03:58.875 --> 00:04:03.545
and extends can be at the top level i.e.

00:04:03.545 --> 00:04:05.815
on the far left of the file.

00:04:05.815 --> 00:04:08.865
If we move over a nav element,

00:04:08.865 --> 00:04:13.555
so our link for example if we move this over to the left of the file,

00:04:13.555 --> 00:04:17.355
save this and then reload the browser.

00:04:17.355 --> 00:04:20.600
We now get a error saying only named blocks and

00:04:20.600 --> 00:04:24.965
mixins can appear at the top level of a template;

00:04:24.965 --> 00:04:30.635
This is basically because this file will be used inside of a NAV file.

00:04:30.635 --> 00:04:36.365
So this indentation keeps everything right when the HTML is compiled.

00:04:36.365 --> 00:04:41.855
Let's go ahead and reinstate this link, and clear the error.

00:04:41.855 --> 00:04:45.110
Something you may have noticed is above,

00:04:45.110 --> 00:04:49.325
we also use a equals for this title.

00:04:49.325 --> 00:04:54.370
This is because we can also include JavaScript in these Pug files too.

00:04:54.370 --> 00:04:58.490
If you remember, the title was passed from our router,

00:04:58.490 --> 00:05:03.115
which was index.js, just here inside of this title.

00:05:03.115 --> 00:05:08.325
So this is JavaScript being passed to our template in the index.pug.

00:05:08.325 --> 00:05:13.685
Therefore, we need to use the equals rather than just a plain text element,

00:05:13.685 --> 00:05:17.855
just like this and also our p elements just here.

00:05:17.855 --> 00:05:23.315
This title is also displayed in the browser sub too about the top here.

00:05:23.315 --> 00:05:29.285
Use an equals will also render to the screen the result of any JavaScript.

00:05:29.285 --> 00:05:33.410
So instead, if we say rather than title,

00:05:33.410 --> 00:05:39.305
add some JavaScript of 5 plus 12 over to the browser,

00:05:39.305 --> 00:05:42.575
we have the results of 17.

00:05:42.575 --> 00:05:46.805
But instead if we go ahead and remove the equals,

00:05:46.805 --> 00:05:50.215
you got to save and then back to the browser.

00:05:50.215 --> 00:05:54.270
This now displays as a text string of

00:05:54.270 --> 00:05:58.760
5 plus 12 rather than outputting the sum of 5 plus 12.

00:05:58.760 --> 00:06:02.560
So let's reinstate this back to title.

00:06:02.560 --> 00:06:05.885
So you don't have to remember this but I'll put in

00:06:05.885 --> 00:06:09.430
the result like this is called buffered code.

00:06:09.430 --> 00:06:15.120
It is also unbuffered code too which does not directly add to the output;

00:06:15.120 --> 00:06:19.330
This can be any normal JavaScript with a dash prefix.

00:06:19.330 --> 00:06:27.140
So for example, we can add a dash and then add any JavaScript such as a constant of name,

00:06:27.140 --> 00:06:30.300
and it's our name to be Chris,

00:06:30.770 --> 00:06:34.745
and then this can be used where we want to place it.

00:06:34.745 --> 00:06:39.980
So h1, we can place our title with our variable of name.

00:06:39.980 --> 00:06:46.720
Since it's a JavaScript we'll also need to add the equals and test this out,

00:06:46.880 --> 00:06:51.205
and then down at the bottom there's our variable name of Chris.

00:06:51.205 --> 00:06:53.210
So this unbuffered code,

00:06:53.210 --> 00:06:56.285
it's just basically declaring line of JavaScript,

00:06:56.285 --> 00:07:01.115
and then we can go ahead and use it anywhere we want inside the templates.

00:07:01.115 --> 00:07:03.950
This JavaScript can be pretty much anything.

00:07:03.950 --> 00:07:11.570
So we could have an array of foods, cheese,

00:07:11.570 --> 00:07:19.970
eggs, and chicken, and now we have this array.

00:07:19.970 --> 00:07:21.740
It gives us a chance to take a look at

00:07:21.740 --> 00:07:26.465
the special syntax which Pug provides for creating a for loop.

00:07:26.465 --> 00:07:29.500
To do this, I'm going to add this at the bottom,

00:07:29.500 --> 00:07:32.870
indent this the same level as the link,

00:07:32.870 --> 00:07:36.140
and then create a unordered list for our foods.

00:07:36.140 --> 00:07:43.620
Indented one more level we're going to create a loop with each food in foods.

00:07:43.620 --> 00:07:47.645
So foods is the name of our array which is just here,

00:07:47.645 --> 00:07:50.060
and then each individual item in

00:07:50.060 --> 00:07:54.115
the array is going to be stored inside this food variable.

00:07:54.115 --> 00:07:59.045
So after here we can set our list item to be equal to food.

00:07:59.045 --> 00:08:00.980
Again this is JavaScript,

00:08:00.980 --> 00:08:03.515
so we need to add the equals symbol.

00:08:03.515 --> 00:08:06.760
So we don't output this as a string.

00:08:06.760 --> 00:08:10.260
Say this, and then test this out.

00:08:10.260 --> 00:08:12.480
We now have cheese, eggs,

00:08:12.480 --> 00:08:14.550
and chicken at the bottom.

00:08:14.550 --> 00:08:18.590
This output can also be mixed with an eText too.

00:08:18.590 --> 00:08:22.490
So rather than just the outputted individual food,

00:08:22.490 --> 00:08:25.790
we can add a string of I love,

00:08:25.790 --> 00:08:28.830
and then add plus food.

00:08:30.440 --> 00:08:35.790
Actually about a space just after there and try this out,

00:08:35.790 --> 00:08:40.315
and our text is also now mixed with our JavaScript variable;

00:08:40.315 --> 00:08:43.965
This is just a overview of what Pug can do,

00:08:43.965 --> 00:08:47.750
and it really is simple enough once you get used to it,

00:08:47.750 --> 00:08:51.455
we will use a lot of Pug features for this course.

00:08:51.455 --> 00:08:54.755
However, if you prefer to take a deeper look now,

00:08:54.755 --> 00:08:59.170
you can head over to Pugjs.org and take a deeper look,

00:08:59.170 --> 00:09:06.245
at the top of this file we also have this extends and also this block content section.

00:09:06.245 --> 00:09:09.230
We have not yet discussed what this means yet,

00:09:09.230 --> 00:09:12.720
but we'll go ahead and cover this in the next video.
