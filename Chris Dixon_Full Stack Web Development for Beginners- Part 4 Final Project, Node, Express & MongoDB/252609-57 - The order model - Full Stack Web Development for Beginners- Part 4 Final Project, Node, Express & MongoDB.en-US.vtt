WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.290 --> 00:00:03.555
Welcome back to this brand new section.

00:00:03.555 --> 00:00:06.990
This section is going to be all about allowing the user to

00:00:06.990 --> 00:00:10.995
place bookings and also the user accounts area too.

00:00:10.995 --> 00:00:14.880
Where the user can see any booking which they have placed.

00:00:14.880 --> 00:00:18.585
We'll also be adding this to the Admin Section too,

00:00:18.585 --> 00:00:23.475
so the admin can see any bookings which had been placed for all users.

00:00:23.475 --> 00:00:29.535
This booking or all this information will be stored in a database as a collection.

00:00:29.535 --> 00:00:34.585
Therefore, we need to create an order model to save our data.

00:00:34.585 --> 00:00:41.495
First create a new file called the order.js over inside of the models folder,

00:00:41.495 --> 00:00:46.620
so models new folder order.js.

00:00:46.910 --> 00:00:50.630
Then we can go ahead and create our model just like we

00:00:50.630 --> 00:00:54.745
have for the users and also the hotel.

00:00:54.745 --> 00:00:57.165
Let's close down a sidebar.

00:00:57.165 --> 00:00:59.915
This model will have three things.

00:00:59.915 --> 00:01:04.465
First, the user id, so we know who has placed the order.

00:01:04.465 --> 00:01:11.575
Second, the hotel_id for the hotel I want to book and third is the order details.

00:01:11.575 --> 00:01:15.785
This will be an object containing the details of the departure dates,

00:01:15.785 --> 00:01:19.255
number of flights and the number of guests.

00:01:19.255 --> 00:01:24.125
As usual, creates our constant for Mongoose package,

00:01:24.125 --> 00:01:27.900
which we need to require at the top of the file,

00:01:28.030 --> 00:01:32.850
so require mongoose, okay?

00:01:32.850 --> 00:01:34.955
Then we can create our constant for

00:01:34.955 --> 00:01:44.185
our order schema and satisfying new mongoose.Schema capital S,

00:01:44.185 --> 00:01:47.475
which takes in our objects.

00:01:47.475 --> 00:01:51.700
Our first field is the user underscore_id.

00:01:52.940 --> 00:01:58.050
This user id is going to have the type of string.

00:01:58.850 --> 00:02:01.540
It's also going to be a required field,

00:02:01.540 --> 00:02:05.275
so we set required to be equal to true,

00:02:05.275 --> 00:02:07.425
separated by a comma.

00:02:07.425 --> 00:02:10.905
Our second field is going to be for the hotel_id,

00:02:10.905 --> 00:02:14.360
which the user wants to go ahead and book.

00:02:14.360 --> 00:02:18.365
This is going to have a different type than what we've seen before.

00:02:18.365 --> 00:02:19.910
This is going to be equal to

00:02:19.910 --> 00:02:27.645
mongoose.Schema.Types with a capital T

00:02:27.645 --> 00:02:31.110
and the type is going to be the objectsId.

00:02:31.110 --> 00:02:36.925
The hotel_id is going to use this objectId as its data type.

00:02:36.925 --> 00:02:43.105
This is provided by mongoose and we'll need it for a good reason later in this section.

00:02:43.105 --> 00:02:46.215
We've stored in the hotel_id,

00:02:46.215 --> 00:02:49.670
which is on the booking but we also need to

00:02:49.670 --> 00:02:53.755
retrieve the rest of the hotel details from the database.

00:02:53.755 --> 00:02:59.270
Using this objectId rather than a normal string will allow us

00:02:59.270 --> 00:03:05.695
to properly compare this id to the one which is stored in the database later on.

00:03:05.695 --> 00:03:12.455
Makes up this field also needs to be required so as to be true.

00:03:12.455 --> 00:03:17.490
Then our third field is going to be for the order details,

00:03:17.630 --> 00:03:21.935
which is going to contain the type of

00:03:21.935 --> 00:03:28.260
objects and this is also required

00:03:28.260 --> 00:03:35.265
to be equal to true semicolon at the end.

00:03:35.265 --> 00:03:43.805
Then we can export our model with our familiar module.exports,

00:03:43.805 --> 00:03:49.560
which is equal to our mongoose.model.

00:03:49.560 --> 00:03:52.920
We pass in the name of order

00:03:52.920 --> 00:03:58.230
as the second value this takes in our variable name of order schema,

00:03:58.230 --> 00:04:00.910
which is this one, just here,

00:04:01.040 --> 00:04:05.540
so at a semicolon at the end and give this a save.

00:04:05.540 --> 00:04:08.555
This is enough for our order schema,

00:04:08.555 --> 00:04:13.700
next we'll get to work by creating a booking confirmation page and this will

00:04:13.700 --> 00:04:20.010
allow the user to review all the details before finally placing a new order.
