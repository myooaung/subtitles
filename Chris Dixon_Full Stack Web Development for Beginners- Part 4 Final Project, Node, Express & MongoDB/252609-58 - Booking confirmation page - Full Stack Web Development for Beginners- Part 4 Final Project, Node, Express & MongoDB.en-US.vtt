WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.600 --> 00:00:06.270
At moment we can go to any hotel which you want.

00:00:06.270 --> 00:00:11.250
Select this and then down at the bottom we can add our travel details.

00:00:11.250 --> 00:00:14.895
If wanted to book this, we need to add the duration,

00:00:14.895 --> 00:00:18.870
the departure dates, the number of guests,

00:00:18.870 --> 00:00:22.920
and then perform a search to provide all of the details.

00:00:22.920 --> 00:00:24.930
If we click the search received,

00:00:24.930 --> 00:00:29.940
this search result is now personalized with all the details which are centered.

00:00:29.940 --> 00:00:32.505
This is good, but now we need to add

00:00:32.505 --> 00:00:36.900
some more stages to allow the user to book this hotel.

00:00:36.900 --> 00:00:41.935
The first step I want to add is a Continue button to this page,

00:00:41.935 --> 00:00:45.800
which will take the user to a booking confirmation page where they

00:00:45.800 --> 00:00:50.185
can review their final details before placing the order.

00:00:50.185 --> 00:00:54.065
This hotel view is inside of the hotel mixins.

00:00:54.065 --> 00:00:57.455
Let's head over to this file in the text editor.

00:00:57.455 --> 00:01:02.700
Sidebar, mixins and then underscore hotel.

00:01:03.410 --> 00:01:06.180
Down at the bottom.

00:01:06.180 --> 00:01:08.405
Scroll to the bottom this file,

00:01:08.405 --> 00:01:13.445
we can conditionally render a button to only show on the results routes.

00:01:13.445 --> 00:01:16.850
This is the routes which are currently on and then we're going to add

00:01:16.850 --> 00:01:20.645
a Continue button just under the total price.

00:01:20.645 --> 00:01:23.765
This total cost is on here.

00:01:23.765 --> 00:01:32.620
Let's make some space and we can say if URL is equal to /results.

00:01:32.620 --> 00:01:37.730
If it is, we can provide a link with the class of button,

00:01:37.730 --> 00:01:43.445
which is going to have a href equal to and when it's on disembark ticks.

00:01:43.445 --> 00:01:49.670
This is /confirmation and then our Dynamic section,

00:01:49.670 --> 00:01:59.730
which is going to be our query and then the text all of continue for all button.

00:01:59.730 --> 00:02:05.195
For this link, we're going to be linking it to a URL of /confirmation,

00:02:05.195 --> 00:02:08.150
and then forward slash a query string,

00:02:08.150 --> 00:02:13.015
which is going to build it up from the information needed for this booking.

00:02:13.015 --> 00:02:17.645
This query string will be a series of name value pairs.

00:02:17.645 --> 00:02:23.920
This is the same method as we used earlier in the course when we use the iTunes API.

00:02:23.920 --> 00:02:27.510
Let's create this query string now above.

00:02:27.510 --> 00:02:30.700
Just above our if statements,

00:02:30.700 --> 00:02:35.510
we can create a constants called query,

00:02:35.510 --> 00:02:41.725
it's match here and this is going to be equal to a dynamic string,

00:02:41.725 --> 00:02:43.760
so add the back ticks.

00:02:43.760 --> 00:02:48.590
As we mentioned before, this is a series of name value pairs.

00:02:48.590 --> 00:02:51.860
The first one is going to be the hotel ID.

00:02:51.860 --> 00:03:01.455
Let's set the ID to be equal to hotel._ id.

00:03:01.455 --> 00:03:03.920
Remember all this information is going through,

00:03:03.920 --> 00:03:07.190
passed along the URL as a query string and

00:03:07.190 --> 00:03:11.425
then we can grab this information and use it in our controller.

00:03:11.425 --> 00:03:16.485
Then we need the ampersand to add a second name value pair.

00:03:16.485 --> 00:03:19.895
The second one is going to be for the duration.

00:03:19.895 --> 00:03:24.890
The ampersand, so duration and this is going to be equal

00:03:24.890 --> 00:03:29.990
to the search query which we've used before just above to grab our duration,

00:03:29.990 --> 00:03:34.680
the date of departure and also the number of guests.

00:03:35.800 --> 00:03:40.500
SearchQuery.duration, after the duration,

00:03:40.500 --> 00:03:42.870
this is going to be the dates of

00:03:42.870 --> 00:03:50.975
departure and remember this is just one long string and this one is going to be equal to.

00:03:50.975 --> 00:03:56.060
This is again going to be the searchQuery and

00:03:56.060 --> 00:04:01.560
just like we've used before, this is searchQuery.dateOfDeparture.

00:04:03.070 --> 00:04:05.915
After this, we can add a new ampersand,

00:04:05.915 --> 00:04:10.200
which is going to be for the number of guests.

00:04:11.540 --> 00:04:20.320
This is going to be equal to searchQuery.numberOfGuests,

00:04:20.320 --> 00:04:26.935
add a semicolon at the end and all of this information will now form our URL.

00:04:26.935 --> 00:04:29.250
Let's try this out in the browser.

00:04:29.250 --> 00:04:32.375
Save this file over to our browser

00:04:32.375 --> 00:04:36.080
and if you still scrolling on the Results page like I am.

00:04:36.080 --> 00:04:40.795
Just reload the browser, reconfirm before submission.

00:04:40.795 --> 00:04:44.435
I'm now see a Continue button at the bottom.

00:04:44.435 --> 00:04:46.525
Click on this button.

00:04:46.525 --> 00:04:49.670
We're taken to a route we have not yet handled.

00:04:49.670 --> 00:04:53.000
We got a follow full-page as expected.

00:04:53.000 --> 00:04:55.595
But if we look up to the URL,

00:04:55.595 --> 00:04:57.515
we can see the route which we created

00:04:57.515 --> 00:05:02.675
of /confirmation and then our series or name-value pairs.

00:05:02.675 --> 00:05:06.610
We have the ID equal to the hotel ID.

00:05:06.610 --> 00:05:09.650
We have the duration of seven nights,

00:05:09.650 --> 00:05:15.055
the dates, and also finding the number of guests equal to four.

00:05:15.055 --> 00:05:19.535
This is all the information we need to construct a order.

00:05:19.535 --> 00:05:24.710
As everyone known it's handle this route in the index.jsfile.

00:05:24.710 --> 00:05:29.570
Let's go over to the routes index.js and

00:05:29.570 --> 00:05:34.445
we can capture this query string inside of a variable called data.

00:05:34.445 --> 00:05:37.820
In our user routes on the log out,

00:05:37.820 --> 00:05:47.655
we can add router.get/confirmation/ and we use a colon,

00:05:47.655 --> 00:05:50.320
since this data is dynamic.

00:05:50.570 --> 00:05:54.915
This is going to be a user controller,

00:05:54.915 --> 00:05:59.350
I'm going to call the function Booking Confirmation.

00:06:00.620 --> 00:06:04.360
Then over to or we use a controller.

00:06:05.020 --> 00:06:09.300
We'll create this booking confirmation and

00:06:09.300 --> 00:06:13.690
we'll go right down to the bottom just after logout.

00:06:13.790 --> 00:06:20.350
So exports, so it's booking confirmation.

00:06:21.770 --> 00:06:25.335
This is going to be a sync function.

00:06:25.335 --> 00:06:28.505
Since we'll be working with the database,

00:06:28.505 --> 00:06:34.085
passing the request response creates a function body,

00:06:34.085 --> 00:06:39.275
the transaction, the catch block,

00:06:39.275 --> 00:06:47.265
passing in the error and also pass this error to next.

00:06:47.265 --> 00:06:48.900
Since we're using next error,

00:06:48.900 --> 00:06:53.490
we also pass this in after the request and response.

00:06:53.490 --> 00:06:58.510
The first thing I'm going to do is capture the query string from the URL.

00:06:58.510 --> 00:07:02.690
Remember, we can access this from the request.params,

00:07:02.690 --> 00:07:05.735
followed by the name we gave it in the router.

00:07:05.735 --> 00:07:15.060
In the training section we'll create a constant called data, so request.params.data.

00:07:16.460 --> 00:07:18.740
Before going any further,

00:07:18.740 --> 00:07:23.305
we can check what data we have with a res.json.

00:07:23.305 --> 00:07:28.520
So res.json, the data from our query string.

00:07:28.520 --> 00:07:32.220
If we save this and now refresh,

00:07:32.220 --> 00:07:36.370
we now have our ID, the duration,

00:07:36.370 --> 00:07:40.335
date of departure, and the number of guests.

00:07:40.335 --> 00:07:43.540
This appears to be the data of ones,

00:07:43.540 --> 00:07:47.245
but it's not being displayed in json formats.

00:07:47.245 --> 00:07:49.960
It's just a plain string.

00:07:49.960 --> 00:07:54.220
This is because we first need to pass the query string.

00:07:54.220 --> 00:08:00.115
Node provides us with a module called query string and this is a core module.

00:08:00.115 --> 00:08:02.980
We don't need to install anything extra,

00:08:02.980 --> 00:08:07.565
all we do is require it in the file in which we want to use it.

00:08:07.565 --> 00:08:11.260
Let's go back over to overuse controller,

00:08:11.260 --> 00:08:19.880
up to the top of the file and it creates a new constant called querystring.

00:08:21.360 --> 00:08:27.440
Then require the module which is called query string.

00:08:27.840 --> 00:08:31.420
Now we can pass the data constants which we created

00:08:31.420 --> 00:08:35.080
below and store the results in a new constant,

00:08:35.080 --> 00:08:37.805
which I'm going to call search data.

00:08:37.805 --> 00:08:41.220
Back down to our booking confirmation.

00:08:41.220 --> 00:08:44.145
We can go just underneath the data,

00:08:44.145 --> 00:08:46.535
create some new constants.

00:08:46.535 --> 00:08:53.515
I'll search data, which is going to be equal to our query string which we just imported.

00:08:53.515 --> 00:08:59.510
Use the.parse method, parsing in the data from above.

00:09:00.330 --> 00:09:07.915
Now we can add the search data inside the res.json and see what happens.

00:09:07.915 --> 00:09:11.380
Give this a save and then reload the browser.

00:09:11.380 --> 00:09:15.355
Great. We now have the data in the format which we can work with.

00:09:15.355 --> 00:09:19.735
Currently, we only have the hotel id stored in res.json.

00:09:19.735 --> 00:09:25.855
We can now search the database for the full hotel details using this id.

00:09:25.855 --> 00:09:29.470
Let's go back over to our booking confirmation.

00:09:29.470 --> 00:09:31.585
Below, I'll search data,

00:09:31.585 --> 00:09:34.945
we can write a constants called hotel.

00:09:34.945 --> 00:09:41.950
This is going to be equal to await our hotel model dot

00:09:41.950 --> 00:09:50.320
find and the information which we want to find is the hotel based on the underscore id.

00:09:50.320 --> 00:09:55.315
The id which you want to search for it in the database will be stored in

00:09:55.315 --> 00:10:00.670
the search data and then we can access the.id.

00:10:00.670 --> 00:10:07.600
Search data.id and makes use a H inside here,

00:10:07.600 --> 00:10:09.655
since this is our model.

00:10:09.655 --> 00:10:12.970
Remember when creating our order schema,

00:10:12.970 --> 00:10:15.085
in the last video,

00:10:15.085 --> 00:10:21.700
I said that the hotel id needed to have the data type of object id.

00:10:21.700 --> 00:10:24.880
This is why we did this in the the last video.

00:10:24.880 --> 00:10:31.310
This id will now correctly compare to a hotel id in the database because it is,

00:10:31.310 --> 00:10:34.305
if it was a string, it would not work.

00:10:34.305 --> 00:10:37.260
One of the thing too, if we go over to the browser,

00:10:37.260 --> 00:10:39.795
we see the hotel is not defined.

00:10:39.795 --> 00:10:43.770
This is because we need to import this hotel file too.

00:10:43.770 --> 00:10:45.980
Let's go up to the top.

00:10:45.980 --> 00:10:54.055
We can say it const of hotel and then we can require the hotel model,

00:10:54.055 --> 00:11:01.225
so../models folder and /hotel.

00:11:01.225 --> 00:11:07.345
Now we can go down and replace our res.json with a res.render.

00:11:07.345 --> 00:11:10.585
Back to the booking conformation.

00:11:10.585 --> 00:11:13.795
We can add rest.render.

00:11:13.795 --> 00:11:19.345
We're going to create a confirmation template so let's add this info now.

00:11:19.345 --> 00:11:28.010
Then our options objects will pass in the title of confirm your booking.

00:11:28.590 --> 00:11:32.484
We also need to pass the data to this template.

00:11:32.484 --> 00:11:35.335
We want to send to it the hotel constants,

00:11:35.335 --> 00:11:40.555
which is going to contain all the information from the hotel which had been ordered.

00:11:40.555 --> 00:11:43.405
Also this search data just here,

00:11:43.405 --> 00:11:48.370
which will contain the information such as the date of departure.

00:11:48.370 --> 00:11:53.575
Hotel and also the such data.

00:11:53.575 --> 00:12:00.230
Now we can go into our views and create this confirmation templates as a pug file.

00:12:00.330 --> 00:12:11.125
Open the Views folder and then create the confirmation.pug, close this down.

00:12:11.125 --> 00:12:15.730
This will be a fairly straightforward templates which will basically show

00:12:15.730 --> 00:12:20.470
the hotel mixin along with the hotel data and the search data,

00:12:20.470 --> 00:12:23.365
which we are going to pass to the mixin.

00:12:23.365 --> 00:12:26.650
This you go into extends layout.

00:12:26.650 --> 00:12:31.960
We're going to include from the mixin folder,

00:12:31.960 --> 00:12:37.790
the underscore hotel block contents.

00:12:39.540 --> 00:12:42.040
The level two heading,

00:12:42.040 --> 00:12:44.799
which is going to be the title.

00:12:44.799 --> 00:12:51.080
We can then create a loop with each eye in Hotel.

00:12:51.330 --> 00:12:54.970
Then as our hotel mixin at the bottom,

00:12:54.970 --> 00:12:57.025
which is going to take in I,

00:12:57.025 --> 00:13:04.165
which is each individual hotel and also the search data which will pass to this template.

00:13:04.165 --> 00:13:06.820
Remember this contains information such as

00:13:06.820 --> 00:13:10.705
the number of guests and the date of departure.

00:13:10.705 --> 00:13:14.630
This will all be needed for the confirmation page.

00:13:14.780 --> 00:13:21.849
If you let us change the conformation spelling and so rename,

00:13:22.200 --> 00:13:27.770
make sure this is correct and save this file.

00:13:27.870 --> 00:13:33.850
Over now in a hotel mixin, so underscore hotel.pug.

00:13:33.850 --> 00:13:39.865
This hotel already receives the data from when we created the results templates.

00:13:39.865 --> 00:13:41.934
We already have the hotel,

00:13:41.934 --> 00:13:47.230
which we passing it to this variable as i and the search query.

00:13:47.230 --> 00:13:50.170
Most things are already set up for us.

00:13:50.170 --> 00:13:53.630
If we save this file and then reload the browser,

00:13:54.600 --> 00:13:57.655
we see the template is showing,

00:13:57.655 --> 00:14:00.475
we have all hotel details.

00:14:00.475 --> 00:14:03.235
Down at the bottom, we have the star rating,

00:14:03.235 --> 00:14:04.585
we have the country,

00:14:04.585 --> 00:14:07.945
the cost per night and the name of the hotel.

00:14:07.945 --> 00:14:14.020
But we don't see any of the search details such as the number of nights.

00:14:14.020 --> 00:14:17.560
Let's check this out over in the mixin.

00:14:17.560 --> 00:14:23.320
If we scroll down and we take a look at the results section,

00:14:23.320 --> 00:14:28.675
this mixin has all searchQuery details we need conditionally rendered.

00:14:28.675 --> 00:14:33.295
These only shown if the routes begins with /results.

00:14:33.295 --> 00:14:37.705
We can also add to the end the confirmation routes him.

00:14:37.705 --> 00:14:44.170
If the URL is equal to results or if it's the page which we're currently,

00:14:44.170 --> 00:14:48.010
which is confirmation and then our dynamic data.

00:14:48.010 --> 00:14:54.680
We can check if the URL.startsWith.

00:14:54.720 --> 00:15:03.400
We want this one to begin with a /confirmation/.

00:15:03.400 --> 00:15:08.320
Then reload on the same page and now if we scroll down,

00:15:08.320 --> 00:15:12.175
we see this search details also appear at the bottom.

00:15:12.175 --> 00:15:15.820
We almost finished now for these templates.

00:15:15.820 --> 00:15:18.535
But there's still one small thing to add.

00:15:18.535 --> 00:15:22.270
This is supposed to be the booking confirmation page to

00:15:22.270 --> 00:15:27.145
confirm the user details are all correct before placing the order.

00:15:27.145 --> 00:15:31.315
Therefore, we need a button to actually allow the user to

00:15:31.315 --> 00:15:35.440
place the order back in the hotel mixin.

00:15:35.440 --> 00:15:41.020
We only have a continue button down at the bottom for the results page.

00:15:41.020 --> 00:15:44.800
We can also add one for the confirmation page two.

00:15:44.800 --> 00:15:49.420
Else, this becomes be an else if section,

00:15:49.420 --> 00:15:53.380
because we're going to have a final else section down at the bottom.

00:15:53.380 --> 00:15:55.945
We'll take a look at this in a later video.

00:15:55.945 --> 00:16:05.150
It's URL.startsWith, we want the rounds of /confirmation/.

00:16:05.880 --> 00:16:11.785
We're then going to render a button just like above so a.button(href='

00:16:11.785 --> 00:16:17.110
') and I'm just

00:16:17.110 --> 00:16:22.375
going to leave this as a empty string for now and we'll deal with this later on.

00:16:22.375 --> 00:16:27.010
Place your order and we'll continue

00:16:27.010 --> 00:16:32.590
this href section in the next video where we ask the code to place the orders.

00:16:32.590 --> 00:16:37.630
But now if we save this file and then reload on the confirmation routes,

00:16:37.630 --> 00:16:42.460
we now see a button down at the bottom for placing the order.

00:16:42.460 --> 00:16:45.685
Good, things are now moving on well.

00:16:45.685 --> 00:16:48.485
I'll see you in the next video where we'll move on

00:16:48.485 --> 00:16:52.470
to placing the orders into the database.
