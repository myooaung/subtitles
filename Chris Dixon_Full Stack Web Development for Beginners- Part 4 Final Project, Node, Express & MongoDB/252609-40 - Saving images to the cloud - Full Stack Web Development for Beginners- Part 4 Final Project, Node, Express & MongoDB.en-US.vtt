WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.630
We made some good progress in the last video,

00:00:03.630 --> 00:00:06.345
we set up our cloud nary config file,

00:00:06.345 --> 00:00:10.605
we handled the multi-part slash form data from our form

00:00:10.605 --> 00:00:15.900
and also sets up the molto middleware to handle saving the image.

00:00:15.900 --> 00:00:19.710
In this video, we're going to be handling the next stage,

00:00:19.710 --> 00:00:24.855
which is to take this image file we uploaded and then push it to cloud nary.

00:00:24.855 --> 00:00:28.095
Also handling any errors along the way.

00:00:28.095 --> 00:00:31.620
This will also be setup as a piece of middleware.

00:00:31.620 --> 00:00:34.365
So over to the index.js file.

00:00:34.365 --> 00:00:37.485
This needs to be placed between the image upload,

00:00:37.485 --> 00:00:42.795
which I did in the last video and then the final stage on the database.

00:00:42.795 --> 00:00:48.350
Make sure as a comma just on the end here and then we can add the hotel controller.

00:00:48.350 --> 00:00:55.905
Then the next stage, which is to push to Cloudinary add a comma at the end.

00:00:55.905 --> 00:00:59.660
This post request when we add a new hotel,

00:00:59.660 --> 00:01:03.140
will pass through these three pieces middleware in order.

00:01:03.140 --> 00:01:05.885
First of all, uploading the image,

00:01:05.885 --> 00:01:12.410
then saving to cloudinary and then moving on to saving the hotel to the database.

00:01:12.410 --> 00:01:16.250
Over in the hotel controllers dot js,

00:01:16.250 --> 00:01:19.010
we can create push to Cloudinary.

00:01:19.010 --> 00:01:22.430
Just under our exports dot upload,

00:01:22.430 --> 00:01:25.220
we can add exports towards push

00:01:25.220 --> 00:01:33.665
the Cloudinary equals our requests responds.

00:01:33.665 --> 00:01:39.255
Then next set up our function body.

00:01:39.255 --> 00:01:45.080
The first thing we need to do is to check if there is an image within any statement.

00:01:45.080 --> 00:01:48.660
If request dot file.

00:01:49.100 --> 00:01:55.160
Multiply says this file on the request objects under the name of file.

00:01:55.160 --> 00:02:00.950
Here we check if this file exists because we only want to push the file to Cloudinary,

00:02:00.950 --> 00:02:02.960
if the image is actually there.

00:02:02.960 --> 00:02:05.945
There is a case when the image is not there.

00:02:05.945 --> 00:02:08.480
A nice when updating a hotel.

00:02:08.480 --> 00:02:14.810
The admin majors wants to be obtained in the description or one of the text-based inputs.

00:02:14.810 --> 00:02:17.510
Then it leaving the file upload empty.

00:02:17.510 --> 00:02:21.005
Then after this we can add a L statements.

00:02:21.005 --> 00:02:24.485
This is going to pass this to next,

00:02:24.485 --> 00:02:29.254
which will then move on to the next piece of middleware if no file exists.

00:02:29.254 --> 00:02:33.155
This next piece of middleware is the create hotel post,

00:02:33.155 --> 00:02:36.250
as we said in the routers index file.

00:02:36.250 --> 00:02:38.025
Inside of the if block,

00:02:38.025 --> 00:02:41.010
we access Cloudinary's upload er.

00:02:46.970 --> 00:02:51.080
Then use Cloudinary dot upload method.

00:02:51.080 --> 00:02:55.840
This upload method, we'll upload an image which we pass in.

00:02:55.840 --> 00:03:01.750
We can access this use need request dot file dot path.

00:03:01.750 --> 00:03:07.630
Then we can use a promised a handle what happens when the upload is successful.

00:03:07.630 --> 00:03:11.155
Just after this, we can remove the semicolon.

00:03:11.155 --> 00:03:14.165
We can then chain on a dot, then.

00:03:14.165 --> 00:03:17.115
Just make sure this is spelled right.

00:03:17.115 --> 00:03:20.390
Dot then to create our promise.

00:03:20.390 --> 00:03:26.180
Then inside here we're going to create a function which takes in the results.

00:03:26.180 --> 00:03:29.680
Then set up our function inside here.

00:03:29.680 --> 00:03:32.930
This result variable which we have here will

00:03:32.930 --> 00:03:36.335
stall in the image which we get back from Cloudinary,

00:03:36.335 --> 00:03:39.035
which also includes a public ID,

00:03:39.035 --> 00:03:41.785
which Cloudinary adds to the image.

00:03:41.785 --> 00:03:45.530
We will then use this public ID to reference the image in

00:03:45.530 --> 00:03:50.950
our projects by setting its value to request dot body dot image.

00:03:50.950 --> 00:03:59.310
Request dot body dot image is equal to our results, which we got back.

00:03:59.720 --> 00:04:02.749
Then is public underscore ID,

00:04:02.749 --> 00:04:04.945
which is returned from Cloudinary.

00:04:04.945 --> 00:04:10.670
This request dot body dot image is impulse to create hotel post,

00:04:10.670 --> 00:04:13.100
which is the next stage in the middleware.

00:04:13.100 --> 00:04:18.400
This image ID isn't saved when we save the hotel to our Mongo database.

00:04:18.400 --> 00:04:21.360
To move this to our create hotel post,

00:04:21.360 --> 00:04:23.370
we need to call next.

00:04:23.370 --> 00:04:26.055
Add this just afterwards.

00:04:26.055 --> 00:04:29.165
This will move on to create hotel post,

00:04:29.165 --> 00:04:33.880
which is the last stage in our middleware, which you just here.

00:04:33.880 --> 00:04:37.850
As we already know we need to finish off a promise by adding

00:04:37.850 --> 00:04:43.655
a catch statements to handle any errors and redirect to the same page we are.

00:04:43.655 --> 00:04:50.765
Just after the dot then we can train on the end day dot catch.

00:04:50.765 --> 00:04:58.050
This is also a function where we can add a res dot redirect.

00:04:58.050 --> 00:05:01.840
This is going to redirect onto the current page,

00:05:01.840 --> 00:05:06.895
so forward slash admin slash add gives us save.

00:05:06.895 --> 00:05:10.520
Now we can go to the browser and add a new hotel.

00:05:10.520 --> 00:05:16.270
Down in some no wanting to run NPM or DEF starts.

00:05:16.400 --> 00:05:20.410
It looks like we have an error so let's pull this up.

00:05:21.860 --> 00:05:25.960
It's multi dot disk storage.

00:05:27.960 --> 00:05:34.920
I have a constant storage equals multer which match is just here and disc storage

00:05:34.920 --> 00:05:41.225
and that just needs V8K so save that and then grow green again,

00:05:41.225 --> 00:05:44.770
go to our project at the browser, it reloads.

00:05:44.770 --> 00:05:46.515
Now we're good to go again.

00:05:46.515 --> 00:05:50.005
Over to our admin, forward slash admin,

00:05:50.005 --> 00:05:54.870
sounds that Boltzmann, we can add a new hotel and to our form.

00:05:54.870 --> 00:05:56.700
Let's just add a test.

00:05:56.700 --> 00:05:58.605
We'll say test image.

00:05:58.605 --> 00:06:01.555
Wish I had any description inside there.

00:06:01.555 --> 00:06:04.455
Click on any hotel.

00:06:04.455 --> 00:06:08.260
Star rating it doesn't really matter.

00:06:11.300 --> 00:06:15.345
Then click on confirm to save this hotel.

00:06:15.345 --> 00:06:20.280
This is a good sign we'll now redirect it to the hotel which we just created.

00:06:20.280 --> 00:06:23.755
But we see that no image is displaying at the top.

00:06:23.755 --> 00:06:27.575
Let's go into the developer tools and see what is happening.

00:06:27.575 --> 00:06:31.740
Right-click inspects, Scroll down,

00:06:31.740 --> 00:06:34.245
click on our image.

00:06:34.245 --> 00:06:37.669
This image name is now the public ID,

00:06:37.669 --> 00:06:39.275
which I mentioned before.

00:06:39.275 --> 00:06:41.270
This is because we set

00:06:41.270 --> 00:06:47.270
the request dot body dot image just here to be equal to our public ID,

00:06:47.270 --> 00:06:49.510
which is returned from Cloudinary.

00:06:49.510 --> 00:06:53.405
Let's just plug this back down off the Cloudinary though,

00:06:53.405 --> 00:06:56.300
we should now see the image which you just added.

00:06:56.300 --> 00:07:01.350
Close this down over to Cloudinary and hit reload.

00:07:04.940 --> 00:07:08.410
Click on the Media Library.

00:07:11.420 --> 00:07:15.875
As well as sample videos and images which you provided,

00:07:15.875 --> 00:07:20.660
we also see our hotel one image is now being uploaded to Cloudinary.

00:07:20.660 --> 00:07:24.245
Excellent, so I hope this is not working for you to.

00:07:24.245 --> 00:07:28.220
In the next video, we'll also sets up our hotels to pull in

00:07:28.220 --> 00:07:32.910
the images from Cloudinary and then display them in our projects.
