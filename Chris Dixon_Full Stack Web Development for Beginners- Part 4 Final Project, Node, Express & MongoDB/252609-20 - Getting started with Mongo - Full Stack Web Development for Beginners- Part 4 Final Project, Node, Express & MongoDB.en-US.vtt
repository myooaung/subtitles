WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.530 --> 00:00:05.115
In this project, we're going to be dealing with quite a bit of information.

00:00:05.115 --> 00:00:09.405
We'll have information about how hotels we have and uses

00:00:09.405 --> 00:00:14.970
any orders which you placed and also any session data which we'll get into later.

00:00:14.970 --> 00:00:18.645
Of course, so we need somewhere to store all of this data,

00:00:18.645 --> 00:00:23.235
and I'm going to be using a MongoDB database, in this course,

00:00:23.235 --> 00:00:27.195
which is really popular database for Node applications,

00:00:27.195 --> 00:00:29.445
along with many of this too.

00:00:29.445 --> 00:00:35.370
MongoDB allows us to store our data in a JSON-like format.

00:00:35.370 --> 00:00:37.890
This makes it really easy to work with,

00:00:37.890 --> 00:00:41.800
especially when we used to JavaScript type applications.

00:00:41.800 --> 00:00:44.805
We've already worked with JSON data,

00:00:44.805 --> 00:00:47.170
so this should be fairly familiar.

00:00:47.170 --> 00:00:50.555
It also makes learning things easier too.

00:00:50.555 --> 00:00:55.040
There's also lots of helpful queries which it makes available.

00:00:55.040 --> 00:00:58.190
The query is a search on our database,

00:00:58.190 --> 00:01:00.605
and Mongo makes this really easy.

00:01:00.605 --> 00:01:02.600
We have lots of different ways we can perform

00:01:02.600 --> 00:01:06.725
searches to only get the exact data we need.

00:01:06.725 --> 00:01:12.530
For example, one of the queries which we'll be using is to search the database using

00:01:12.530 --> 00:01:15.890
a search term which they use Enter and then also

00:01:15.890 --> 00:01:19.735
filtered out by the star rating and availability,

00:01:19.735 --> 00:01:23.530
and then finally sought the results in price order.

00:01:23.530 --> 00:01:28.560
We'll also look at lots of queries too unit section.

00:01:28.560 --> 00:01:32.780
MongoDB is also free and open source too.

00:01:32.780 --> 00:01:36.095
I will also be using a hosted version in this course,

00:01:36.095 --> 00:01:37.825
which is also free.

00:01:37.825 --> 00:01:41.285
The hosted version is going to be over mLab,

00:01:41.285 --> 00:01:44.365
which you can find our mLab.com.

00:01:44.365 --> 00:01:49.430
This hosted solution is also known as a database, as a service.

00:01:49.430 --> 00:01:54.020
It basically allows us to quickly get going with MongoDB.

00:01:54.020 --> 00:01:57.470
Our database is then hosted in the cloud photos.

00:01:57.470 --> 00:02:00.545
You can also set Mongo up locally,

00:02:00.545 --> 00:02:04.370
we have in our database already hosted is really useful

00:02:04.370 --> 00:02:08.465
for later when we push our application to be live server.

00:02:08.465 --> 00:02:11.575
It also saves the configuration.

00:02:11.575 --> 00:02:15.620
The first thing we need to do is sign up for a user accounts,

00:02:15.620 --> 00:02:18.710
so if you don't already have an account with mLab,

00:02:18.710 --> 00:02:23.490
I would suggest you go ahead and pause the video and then sign-up now.

00:02:23.490 --> 00:02:25.970
I already have an account with mLab,

00:02:25.970 --> 00:02:28.890
so I'm going to go ahead and login,

00:02:29.330 --> 00:02:33.700
so add in the login details.

00:02:39.740 --> 00:02:45.680
Once we're logged in, we can now go ahead and create a new MongoDB deployments.

00:02:45.680 --> 00:02:48.780
Go to the top, and click create new,

00:02:49.730 --> 00:02:53.085
then we have some options to select,

00:02:53.085 --> 00:02:57.140
I'll be using Amazon for the provider, so click on this,

00:02:57.140 --> 00:03:00.005
and then the free sandbox plan,

00:03:00.005 --> 00:03:02.965
which is fine for development and learning.

00:03:02.965 --> 00:03:06.180
Select this and select a region.

00:03:06.180 --> 00:03:10.040
Amazon is hosted in multiple locations across the world,

00:03:10.040 --> 00:03:13.025
we only have a few options for is sandbox plan,

00:03:13.025 --> 00:03:15.330
so AWS will be fine.

00:03:15.500 --> 00:03:19.135
We can continue, and we can select one of these.

00:03:19.135 --> 00:03:23.975
Then continue again, and then we can add our database name.

00:03:23.975 --> 00:03:26.675
I'm going to call mine, let's-travel.

00:03:26.675 --> 00:03:33.720
Continue. We can review any of this and then hit Submit Order,

00:03:37.370 --> 00:03:42.370
and there we go that's our let's-travel database on our setup.

00:03:42.370 --> 00:03:44.585
Our database is empty,

00:03:44.585 --> 00:03:46.670
so it doesn't have any collections.

00:03:46.670 --> 00:03:49.355
Just gets, if we click on this,

00:03:49.355 --> 00:03:51.805
we can then take a look inside.

00:03:51.805 --> 00:03:55.790
Under the Collection Tab we see we don't have any at this time,

00:03:55.790 --> 00:04:00.280
and the collection is just a way of grouping our documents, which we store,

00:04:00.280 --> 00:04:05.585
as an example, we have a hotel's collection to store our hotel records,

00:04:05.585 --> 00:04:09.985
a user's collection, to store assigned abuses and so on.

00:04:09.985 --> 00:04:17.150
The top, we also have a URI which we can use in our project to connect to this database.

00:04:17.150 --> 00:04:22.495
There is a space in this URI for our user and also a password,

00:04:22.495 --> 00:04:27.590
so we need to go ahead and set this up under the user's tab.

00:04:27.590 --> 00:04:31.925
Click on this and then go to Add database user.

00:04:31.925 --> 00:04:34.790
We can add a username and password,

00:04:34.790 --> 00:04:38.570
so I'm going to just call mine travel as username,

00:04:38.570 --> 00:04:41.970
and traveled on as the password.

00:04:44.200 --> 00:04:50.335
Create our user, great.

00:04:50.335 --> 00:04:54.610
Now have the username and password to fill in these blanks.

00:04:54.610 --> 00:04:58.285
But first there is one more thing which needs setup,

00:04:58.285 --> 00:05:00.160
and this is mongoose.

00:05:00.160 --> 00:05:04.780
js. We are free to use Mongo directly if you want,

00:05:04.780 --> 00:05:08.675
but I'm going to be using a nose package called Mongoose instead.

00:05:08.675 --> 00:05:14.935
Mongoose basically allows us to give our data some structure in which is called a schema.

00:05:14.935 --> 00:05:17.410
If we write directly to Mongo,

00:05:17.410 --> 00:05:19.945
you can make a mistake pretty easily.

00:05:19.945 --> 00:05:23.440
If we do not set up how our data should be,

00:05:23.440 --> 00:05:27.120
Mongoose will allow us to set how our data would look.

00:05:27.120 --> 00:05:30.395
For example, will have a hotel schema,

00:05:30.395 --> 00:05:33.940
and this will have fields such as a name and description.

00:05:33.940 --> 00:05:35.805
We can now answer the datatype,

00:05:35.805 --> 00:05:38.585
each field should be, such as a string,

00:05:38.585 --> 00:05:42.710
and also restrict the minimum and maximum characters it should be,

00:05:42.710 --> 00:05:46.265
and also if the field is to be required and so on.

00:05:46.265 --> 00:05:50.180
Basically it stops us from doing things such as entry and

00:05:50.180 --> 00:05:54.185
a text string into a price field, which should be a number.

00:05:54.185 --> 00:05:57.845
This package will also allow us to create our model,

00:05:57.845 --> 00:06:01.985
which is the model we talked about when we looked at the MVC pattern,

00:06:01.985 --> 00:06:05.185
given our data some consistency.

00:06:05.185 --> 00:06:09.275
Let's go ahead and install Mongoose in our application.

00:06:09.275 --> 00:06:16.655
Let's close the terminal down with Control C. Then type in npm i mongoose.

00:06:16.655 --> 00:06:20.060
Notice this time using the shorter i command,

00:06:20.060 --> 00:06:24.545
this is just a shorthand for install and if works fine.

00:06:24.545 --> 00:06:31.090
Hit "Enter" give it some moment to pull-in from mpm.

00:06:32.570 --> 00:06:37.550
I'm checking whether this is all okay by opening up our package.json,

00:06:37.550 --> 00:06:42.930
and in the dependencies will now see we have Mongoose listed here.

00:06:43.210 --> 00:06:45.980
Over a in our app.js,

00:06:45.980 --> 00:06:48.365
we can now set up our connection.

00:06:48.365 --> 00:06:52.450
Again in the sidebar we can open up app.js.

00:06:52.450 --> 00:06:58.370
Then close this, so the first thing we need to do is to setup our connection.

00:06:58.370 --> 00:07:01.565
We need to first require the Mongoose package,

00:07:01.565 --> 00:07:03.625
which we just imported.

00:07:03.625 --> 00:07:06.240
Just after our import,

00:07:06.240 --> 00:07:07.995
I'm going to use a constant,

00:07:07.995 --> 00:07:11.060
and it doesn't matter if you use a constant or a variable,

00:07:11.060 --> 00:07:14.045
but I'm going to use the constants from now on,

00:07:14.045 --> 00:07:20.970
so const Mongoose equals require Mongoose,

00:07:20.970 --> 00:07:25.610
and remember if we're requiring a package from the node modules folder,

00:07:25.610 --> 00:07:27.155
we just simply reference it by

00:07:27.155 --> 00:07:32.170
the package name rather than adding a file path which leads to it.

00:07:32.170 --> 00:07:36.590
Then we can set up our connection using the connect method,

00:07:36.590 --> 00:07:39.140
so that's first access Mongoose.

00:07:39.140 --> 00:07:42.600
Scroll down on the app.set.

00:07:42.770 --> 00:07:49.060
Let's setup our Mongoose connection,

00:07:49.070 --> 00:07:56.735
so Mongoose variable.connect and then open up the brackets.

00:07:56.735 --> 00:08:03.985
Inside of connect, we can pass in our connection URI from mLab,so back out to mLab,

00:08:03.985 --> 00:08:07.625
copy the full URI,

00:08:07.625 --> 00:08:09.745
and as a string,

00:08:09.745 --> 00:08:13.150
open the quotations and then paste this in.

00:08:13.150 --> 00:08:16.315
Rather, we need to change our username and password,

00:08:16.315 --> 00:08:25.500
so remove the user and our username was travel and the password was travel on.

00:08:25.500 --> 00:08:27.640
Of course, when dealing with databases,

00:08:27.640 --> 00:08:29.740
you want a more secure password,

00:08:29.740 --> 00:08:32.080
but this is just for demonstration.

00:08:32.080 --> 00:08:36.100
Also have NSURI in here is not the best way to do this,

00:08:36.100 --> 00:08:39.860
but we'll move this to somewhere more suitable later.

00:08:39.860 --> 00:08:42.345
On the next line on the Mongoose.

00:08:42.345 --> 00:08:45.525
connect, we need to set Mongoose.

00:08:45.525 --> 00:08:54.650
Promise, P, this is going to be equal to the global.Promise, P again.

00:08:54.650 --> 00:08:57.264
Once we start to query our database,

00:08:57.264 --> 00:09:01.200
we need to deal with the information which is returned back to us.

00:09:01.200 --> 00:09:03.670
In earlier versions of Mongoose,

00:09:03.670 --> 00:09:06.385
we used a callback based setup,

00:09:06.385 --> 00:09:12.945
but now we can make use of promises which are lot simpler and easier to maintain.

00:09:12.945 --> 00:09:18.610
We can set Mongo to use the Promise library such as blueband, if we wanted to,

00:09:18.610 --> 00:09:21.755
which we can get as an NPM module,

00:09:21.755 --> 00:09:24.825
or I'm going to set it to be the global.

00:09:24.825 --> 00:09:27.005
Promise you have here,

00:09:27.005 --> 00:09:30.845
which allows us to make use of the native Promises available in

00:09:30.845 --> 00:09:35.440
ES6 rather than installing another node module.

00:09:35.440 --> 00:09:40.060
Next, under this, we can check for any connection errors.

00:09:40.060 --> 00:09:45.930
We first check, we have a Mongoose connection, and then once we do,

00:09:45.930 --> 00:09:52.130
we can call.on,.on is a node method which adds an event listener.

00:09:52.130 --> 00:09:55.600
In our case, we want to list now for any errors,

00:09:55.600 --> 00:10:00.539
so compositing error as the first parameter,

00:10:00.539 --> 00:10:02.675
and then as a second argument,

00:10:02.675 --> 00:10:06.450
passing a callback function to display this error.

00:10:06.530 --> 00:10:10.320
Let's create a function where we're passing error,

00:10:10.320 --> 00:10:14.690
which is going to output any error messages to the web console.

00:10:14.690 --> 00:10:17.430
We do this wave console.error,

00:10:22.600 --> 00:10:27.500
and can passing this error.message.

00:10:27.500 --> 00:10:30.725
Pass our message to the console,

00:10:30.725 --> 00:10:33.500
so let's give this a safe and a semicolon at

00:10:33.500 --> 00:10:41.220
the ends and then over to the browser or to our index and then reload,

00:10:41.220 --> 00:10:46.429
and in fact we need to restart our terminal after install Mongoose,

00:10:46.429 --> 00:10:51.850
so let's go to the terminal and then run npm run devstart,

00:10:51.850 --> 00:10:58.965
wave it to kick in and then reload the browser and check everything it still works okay.

00:10:58.965 --> 00:11:02.120
If you don't see any error messages inside of

00:11:02.120 --> 00:11:06.205
Visual Studio's terminal this should be all now setup.

00:11:06.205 --> 00:11:11.480
If you have an error do check for any typos and also check that your database

00:11:11.480 --> 00:11:17.035
URI matches the one on mLab along with the correct user and password,

00:11:17.035 --> 00:11:20.090
and once this is working and you're stage,

00:11:20.090 --> 00:11:24.150
you will now good to move on to creating our Mongoose model.
