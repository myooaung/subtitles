WEBVTT
1
00:00:04.240 --> 00:00:05.990
[Autogenerated] Welcome to plural site.

2
00:00:05.990 --> 00:00:07.420
My name is Julie Lierman,

3
00:00:07.420 --> 00:00:10.670
and you might know me as one of the most recognized

4
00:00:10.670 --> 00:00:13.510
authorities in the world on Entity Framework,

5
00:00:13.510 --> 00:00:17.430
Microsoft's data access platform for dot net developers.

6
00:00:17.430 --> 00:00:22.410
And now I get to use my many years of dot net expertise to show you how

7
00:00:22.410 --> 00:00:26.700
to build dot net applications on Amazon Web services.

8
00:00:26.700 --> 00:00:29.590
I was really surprised when I began discovering how much

9
00:00:29.590 --> 00:00:36.350
support Amazon has for dot Net on AWS tooling S DK's AP eyes

10
00:00:36.350 --> 00:00:38.940
and a team of developer advocates.

11
00:00:38.940 --> 00:00:42.710
This course focuses on leveraging your existing knowledge of

12
00:00:42.710 --> 00:00:46.900
building dot net applications in visual studio and adds to that the

13
00:00:46.900 --> 00:00:50.420
feature Rich a ws toolkit for visual studio.

14
00:00:50.420 --> 00:00:53.390
To build APS that run on AWS,

15
00:00:53.390 --> 00:00:56.870
you'll learn about Amazon's relational database service and how to

16
00:00:56.870 --> 00:01:00.530
create and use a sequel server database managed by RDS.

17
00:01:00.530 --> 00:01:02.190
From your applications.

18
00:01:02.190 --> 00:01:04.620
You'll deploying a speed dot net core application.

19
00:01:04.620 --> 00:01:07.830
Amazon's elastic Compute Cloud, also known as E.

20
00:01:07.830 --> 00:01:12.620
C, to where its availability can be scaled up and down on demand.

21
00:01:12.620 --> 00:01:16.620
You'll then take that same application and deployed to docker containers

22
00:01:16.620 --> 00:01:20.440
that are completely managed by Amazon's Fargate service.

23
00:01:20.440 --> 00:01:23.040
And then again with that same application,

24
00:01:23.040 --> 00:01:26.700
we'll configure it as an AWS serve Earless application,

25
00:01:26.700 --> 00:01:31.900
which takes advantage of Amazon Lambda functions to reduce the cost of hosting.

26
00:01:31.900 --> 00:01:45.000
I hope you'll join me on this journey to discover the incredible support that AWS has for .net developers and software that we built.

