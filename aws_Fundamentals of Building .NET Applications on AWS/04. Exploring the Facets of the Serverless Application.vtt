WEBVTT
1
00:00:00.940 --> 00:00:04.530
[Autogenerated] much of what you see here in the newly created project.

2
00:00:04.530 --> 00:00:07.900
It's just the same as if we were creating an ace peanut

3
00:00:07.900 --> 00:00:11.150
core ap I But there are a few differences.

4
00:00:11.150 --> 00:00:15.240
We'll look at thes from the top down, starting with CS Project file.

5
00:00:15.240 --> 00:00:20.940
The template added a project type property and three packages to the project.

6
00:00:20.940 --> 00:00:24.280
One is an STK for s three and remember,

7
00:00:24.280 --> 00:00:28.680
that's a W S is simple storage service and another sdk

8
00:00:28.680 --> 00:00:31.030
with dot net core set up eight guys.

9
00:00:31.030 --> 00:00:34.600
The last one is Amazon Lambda A S P.

10
00:00:34.600 --> 00:00:37.950
Net core server and that package is going to get

11
00:00:37.950 --> 00:00:40.590
white a workout from the application.

12
00:00:40.590 --> 00:00:42.620
Next are the controllers.

13
00:00:42.620 --> 00:00:45.720
There's the standard values controller you may be used to

14
00:00:45.720 --> 00:00:49.670
seeing from the SP net core ap I template and another which

15
00:00:49.670 --> 00:00:52.440
is the S three proxy controller.

16
00:00:52.440 --> 00:00:55.360
It's a sample that has the a p I interacting with an

17
00:00:55.360 --> 00:01:00.070
s three bucket on eight of us, but we won't be using that anyway.

18
00:01:00.070 --> 00:01:01.590
Inside of app settings,

19
00:01:01.590 --> 00:01:04.900
there's a property called ap s three bucket with no value.

20
00:01:04.900 --> 00:01:10.780
Yet this also is for the ESRI proxy controller that we don't care about anyway.

21
00:01:10.780 --> 00:01:13.530
Now Here's a really important edition.

22
00:01:13.530 --> 00:01:17.930
The AWS Lambda Tools Default got Jason file.

23
00:01:17.930 --> 00:01:21.940
We've seen Jason files for the AWS tools before.

24
00:01:21.940 --> 00:01:26.280
This is where settings air stored that will be used by the toolkit when we go

25
00:01:26.280 --> 00:01:30.920
to deploy this application or if you're using the dot net Cilla extensions for

26
00:01:30.920 --> 00:01:34.740
Lambda to deploy that will also use this file.

27
00:01:34.740 --> 00:01:37.760
So by default it's picked up info from the tool kits

28
00:01:37.760 --> 00:01:40.540
such as my Profile and Region.

29
00:01:40.540 --> 00:01:44.490
It specifies the version of the dot net core framework and if you happen,

30
00:01:44.490 --> 00:01:45.780
and then some more section,

31
00:01:45.780 --> 00:01:50.150
most of which that relates to that s three proxy controller that we

32
00:01:50.150 --> 00:01:53.600
don't care about next are two interesting files.

33
00:01:53.600 --> 00:01:55.220
They are, in fact,

34
00:01:55.220 --> 00:02:00.140
a replacement for the program dot CS file that would normally be here.

35
00:02:00.140 --> 00:02:01.190
It actually is.

36
00:02:01.190 --> 00:02:05.560
Their program CS has been renamed to local Entry Point.

37
00:02:05.560 --> 00:02:08.170
So when dot net core is running the APP directly,

38
00:02:08.170 --> 00:02:08.940
for example,

39
00:02:08.940 --> 00:02:13.090
when you're debugging in visual studio or running it from the command line,

40
00:02:13.090 --> 00:02:17.620
the main method inside this class will be the applications entry point,

41
00:02:17.620 --> 00:02:19.440
as it always is.

42
00:02:19.440 --> 00:02:22.860
But when running on AWS as part of the serverless

43
00:02:22.860 --> 00:02:25.610
application that won't be the case.

44
00:02:25.610 --> 00:02:29.640
The service will be looking for an entry point method called in it,

45
00:02:29.640 --> 00:02:33.090
which is inside the Lambda Entry Point Class.

46
00:02:33.090 --> 00:02:36.110
And most of what's in this class are just comments to help.

47
00:02:36.110 --> 00:02:38.170
Those of us just starting out with serverless

48
00:02:38.170 --> 00:02:41.160
applications understand what's going on.

49
00:02:41.160 --> 00:02:45.290
And what's happening is that this class is inheriting from the A P

50
00:02:45.290 --> 00:02:50.890
I gateway proxy function from that s peanut course surgery guy

51
00:02:50.890 --> 00:02:53.440
pointed out in the C s project file.

52
00:02:53.440 --> 00:02:58.940
This will cause Sam to put arrest AP I gateway in front of my function.

53
00:02:58.940 --> 00:03:02.550
It's also possible toe have this class inherit from other

54
00:03:02.550 --> 00:03:06.320
classes that would set up http gateways in front of the

55
00:03:06.320 --> 00:03:09.190
function or even a load balancer.

56
00:03:09.190 --> 00:03:13.100
And then the innit method causes theatric ation to start up

57
00:03:13.100 --> 00:03:16.410
and will use the start of class just like a regular ___

58
00:03:16.410 --> 00:03:18.190
peanut core application does.

59
00:03:18.190 --> 00:03:21.200
So the important logic here is the fact that it's

60
00:03:21.200 --> 00:03:24.040
inheriting from this proxy function.

61
00:03:24.040 --> 00:03:27.910
I'll skip over the Read me file for now and look at the server list.

62
00:03:27.910 --> 00:03:29.130
A template file.

63
00:03:29.130 --> 00:03:32.810
This contains settings that Sam will read and act on

64
00:03:32.810 --> 00:03:34.680
when the application is deployed.

65
00:03:34.680 --> 00:03:38.250
to AWS and again a lot of the settings in here are

66
00:03:38.250 --> 00:03:40.940
related to that s three proxy controller.

67
00:03:40.940 --> 00:03:45.370
So the only ones I do care about here are the SP Net core function

68
00:03:45.370 --> 00:03:49.830
under Resource is and the a p I IRL under outputs,

69
00:03:49.830 --> 00:03:54.030
the A S P Net core function section is critical because it describes to

70
00:03:54.030 --> 00:03:58.900
Sam what the Lambda function needs to know about the A p I that it's

71
00:03:58.900 --> 00:04:02.470
connecting to and note the role in the policies.

72
00:04:02.470 --> 00:04:04.800
Properties will make some changes here.

73
00:04:04.800 --> 00:04:07.230
When we're working with our books and authors a p I

74
00:04:07.230 --> 00:04:09.740
shortly in the startup class.

75
00:04:09.740 --> 00:04:14.300
The Onley difference here from the start up class in a standard template,

76
00:04:14.300 --> 00:04:20.540
is that it has again some details specific to the S three proxy controller.

77
00:04:20.540 --> 00:04:23.190
Now let's go back to that Read me file.

78
00:04:23.190 --> 00:04:27.530
This file provides a really good explanation of all

79
00:04:27.530 --> 00:04:29.570
the moving parts in the project.

80
00:04:29.570 --> 00:04:34.540
It's really documentation, and I think it's a great addition to the template.

81
00:04:34.540 --> 00:04:37.320
I'll run this project, but just the values controller,

82
00:04:37.320 --> 00:04:44.000
because I don't need it to create s three buckets for me. And there you can see it is working

