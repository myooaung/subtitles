WEBVTT
1
00:00:01.040 --> 00:00:04.250
[Autogenerated] When I click published, The Toolkit reports the progress.

2
00:00:04.250 --> 00:00:07.560
The first tasks are performed up in the cloud,

3
00:00:07.560 --> 00:00:10.580
creating the new roles and security groups and then the

4
00:00:10.580 --> 00:00:13.820
application load balancer and setting up the sub nets,

5
00:00:13.820 --> 00:00:16.620
which are essentially firewalls on the load balancer.

6
00:00:16.620 --> 00:00:18.440
And it creates a few more settings.

7
00:00:18.440 --> 00:00:20.980
Then it gets back to work on my computer,

8
00:00:20.980 --> 00:00:24.890
running through the instructions in the docker file on my computer.

9
00:00:24.890 --> 00:00:29.340
It builds up the various images until it's got the publish image ready,

10
00:00:29.340 --> 00:00:33.410
and then it starts pushing that final image up to E.

11
00:00:33.410 --> 00:00:33.620
C.

12
00:00:33.620 --> 00:00:34.540
R.

13
00:00:34.540 --> 00:00:37.710
A Docker image is comprised of a number of layers,

14
00:00:37.710 --> 00:00:40.740
so now we see it pushing up those layers.

15
00:00:40.740 --> 00:00:42.930
The image itself is not small.

16
00:00:42.930 --> 00:00:44.640
It's about 250 Mex.

17
00:00:44.640 --> 00:00:48.680
But most of that is the A S P net core base image,

18
00:00:48.680 --> 00:00:51.660
and you can see the layers of the image being pushed up to the

19
00:00:51.660 --> 00:00:54.450
repository in the command window that opened up.

20
00:00:54.450 --> 00:00:58.830
And I'm doing this from home where I don't have the fastest Internet,

21
00:00:58.830 --> 00:01:00.940
so it does take a few minutes.

22
00:01:00.940 --> 00:01:04.230
But it's also important to understand that most of these layers

23
00:01:04.230 --> 00:01:07.710
are for the ESPN a core part of the image.

24
00:01:07.710 --> 00:01:11.540
If I make a change to my application and republish this,

25
00:01:11.540 --> 00:01:15.240
Dr will recognize that most of the layers are already in

26
00:01:15.240 --> 00:01:17.700
the registry and they haven't changed.

27
00:01:17.700 --> 00:01:21.650
So it just pushes up the layer that's directly tied to my code,

28
00:01:21.650 --> 00:01:24.160
and that happens in a matter of seconds.

29
00:01:24.160 --> 00:01:26.900
So it's just this initial push into E.

30
00:01:26.900 --> 00:01:27.110
C.

31
00:01:27.110 --> 00:01:27.460
R.

32
00:01:27.460 --> 00:01:31.700
That has to go through this effort of pushing all the layers up from scratch.

33
00:01:31.700 --> 00:01:33.640
And once that's all pushed up,

34
00:01:33.640 --> 00:01:37.170
Fargate takes care of the rest of the tasks in the cloud,

35
00:01:37.170 --> 00:01:39.780
most of which is spinning up the containers for

36
00:01:39.780 --> 00:01:41.940
each of the tasks in the cluster.

37
00:01:41.940 --> 00:01:45.090
You can watch this status of that in the tool kits display

38
00:01:45.090 --> 00:01:47.540
that opens after the push is complete.

39
00:01:47.540 --> 00:01:49.790
To me, the key bits of information here,

40
00:01:49.790 --> 00:01:52.660
though, are the counts of the desire tasks,

41
00:01:52.660 --> 00:01:56.460
the pending tasks and the running fargate tasks.

42
00:01:56.460 --> 00:02:01.790
Now it says two tasks or running, which means my containers are ready for action.

43
00:02:01.790 --> 00:02:04.010
And here's three your l it's available on.

44
00:02:04.010 --> 00:02:04.830
Remember, the u.

45
00:02:04.830 --> 00:02:07.590
R L is really pointing to the load balancer,

46
00:02:07.590 --> 00:02:11.330
which will redirect to one or the other of the containers.

47
00:02:11.330 --> 00:02:16.500
So I'll click that link and then go to the weather forecast because I like to

48
00:02:16.500 --> 00:02:20.540
check that the A p I is working and there's a correct output.

49
00:02:20.540 --> 00:02:22.650
Now comes the real test.

50
00:02:22.650 --> 00:02:26.370
I'll go to the author's controller and it's spinning and

51
00:02:26.370 --> 00:02:29.760
spinning and spinning and it fails.

52
00:02:29.760 --> 00:02:30.880
Yes, again.

53
00:02:30.880 --> 00:02:31.810
Sorry.

54
00:02:31.810 --> 00:02:36.350
I knew this was coming, but again, I wanted you to see it just like before.

55
00:02:36.350 --> 00:02:41.340
We're experiencing the fact that AWS is secure by default.

56
00:02:41.340 --> 00:02:44.420
So there's just one last step to perform.

57
00:02:44.420 --> 00:02:52.000
And although we could perform this step in the tool kit, I prefer the consul experience for this.

