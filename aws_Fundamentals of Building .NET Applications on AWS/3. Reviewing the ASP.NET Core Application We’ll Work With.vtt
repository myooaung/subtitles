WEBVTT
1
00:00:01.080 --> 00:00:03.540
[Autogenerated] So now let's look at the solution.

2
00:00:03.540 --> 00:00:07.380
I'm starting with a very simple A s p dot net core application,

3
00:00:07.380 --> 00:00:08.720
which is in a p I.

4
00:00:08.720 --> 00:00:12.400
So there's no front end because I've already created it.

5
00:00:12.400 --> 00:00:16.700
And remember, this is in the before solution of the downloads for this module.

6
00:00:16.700 --> 00:00:21.470
I do want to give you a quick overview of what's in here and because the

7
00:00:21.470 --> 00:00:24.620
focus of this module will be about interacting with artists,

8
00:00:24.620 --> 00:00:30.060
database and publishing to AWS, the A P I named Net Core A.

9
00:00:30.060 --> 00:00:30.270
P.

10
00:00:30.270 --> 00:00:32.350
I is very simplistic.

11
00:00:32.350 --> 00:00:36.840
There are two business classes to work with, and they are author and book.

12
00:00:36.840 --> 00:00:39.160
These classes have no business logic in them.

13
00:00:39.160 --> 00:00:40.400
Just a few properties.

14
00:00:40.400 --> 00:00:43.060
Author has a key property author I d.

15
00:00:43.060 --> 00:00:47.070
A strength for the author name and a collection of book objects.

16
00:00:47.070 --> 00:00:50.700
The book type also has a key book I D and End,

17
00:00:50.700 --> 00:00:54.140
to represent the author I D and a string for the title,

18
00:00:54.140 --> 00:00:56.570
and that's the entire domain.

19
00:00:56.570 --> 00:01:00.620
I'm using Entity Framework ore to manage the data persistence and again,

20
00:01:00.620 --> 00:01:04.210
if you're not familiar with the F core, I did point to my e,

21
00:01:04.210 --> 00:01:06.050
of course, getting started course already.

22
00:01:06.050 --> 00:01:10.760
You can just follow along here and trust that it will do its job of acting as

23
00:01:10.760 --> 00:01:14.140
the go between between my application and the database.

24
00:01:14.140 --> 00:01:17.680
The book context class is the E f core DB context

25
00:01:17.680 --> 00:01:19.540
that will manage the persistence,

26
00:01:19.540 --> 00:01:23.860
and I've defined a DB set for the authors and a DB set for the books.

27
00:01:23.860 --> 00:01:26.940
That way I could write queries against authors or books,

28
00:01:26.940 --> 00:01:30.930
and F Core will execute the correct ______ in the database for me.

29
00:01:30.930 --> 00:01:34.140
And when I ask it to save data through these DB sets,

30
00:01:34.140 --> 00:01:36.840
it will be able to push the data into the database.

31
00:01:36.840 --> 00:01:39.920
I'm also using a feature of F core that lets me add some

32
00:01:39.920 --> 00:01:43.830
seed data by way of F course migrations.

33
00:01:43.830 --> 00:01:48.240
I hope you'll take a look at these important books by women I greatly admire.

34
00:01:48.240 --> 00:01:48.600
Okay.

35
00:01:48.600 --> 00:01:51.070
One of them, Kesha Williams, isn't a book author,

36
00:01:51.070 --> 00:01:53.210
but she's a fellow chloral side author,

37
00:01:53.210 --> 00:01:56.800
and she's got a slew of great courses right here on plural site.

38
00:01:56.800 --> 00:01:59.960
The APP also needs to know about the database.

39
00:01:59.960 --> 00:02:03.740
I've already included the E F core sequel server provider

40
00:02:03.740 --> 00:02:06.660
package in the Projects CS Project File.

41
00:02:06.660 --> 00:02:10.470
So my apple know about F core and about interacting with

42
00:02:10.470 --> 00:02:13.400
sequel server sp dot net Core makes it easy.

43
00:02:13.400 --> 00:02:13.590
Tow.

44
00:02:13.590 --> 00:02:17.990
Wire up the book context to the database by providing a service

45
00:02:17.990 --> 00:02:21.140
that you can configure in the startup class.

46
00:02:21.140 --> 00:02:24.440
At the moment, my application is using a sequel server,

47
00:02:24.440 --> 00:02:27.590
local DB instance on my computer,

48
00:02:27.590 --> 00:02:30.270
and I don't need to provide credentials for that.

49
00:02:30.270 --> 00:02:31.470
It's connection Strength.

50
00:02:31.470 --> 00:02:35.710
Named Books Connection is to find an upsetting start Jason and

51
00:02:35.710 --> 00:02:38.840
then retrieved in the startup configuration.

52
00:02:38.840 --> 00:02:40.950
When we switch to the RTs database.

53
00:02:40.950 --> 00:02:43.670
Instance will deal with the user name and password

54
00:02:43.670 --> 00:02:46.570
credentials that that database needs.

55
00:02:46.570 --> 00:02:50.410
I let f core migrations create a migration file based on

56
00:02:50.410 --> 00:02:52.840
the model and the code of the sea data.

57
00:02:52.840 --> 00:02:56.990
And I've already manually run the F Core Migration Command to create the

58
00:02:56.990 --> 00:03:00.940
development database for me on my machine in local Deby.

59
00:03:00.940 --> 00:03:02.780
Because I'm in visual studio,

60
00:03:02.780 --> 00:03:07.050
I used E of course Power Shell Command Update Dash database,

61
00:03:07.050 --> 00:03:10.130
which recognize that the database didn't exist yet,

62
00:03:10.130 --> 00:03:14.680
so created it for me and then generated and ran sequel script based on

63
00:03:14.680 --> 00:03:18.620
the migration file that allowed it to create the tables and insert the

64
00:03:18.620 --> 00:03:23.170
seed data and it's always nice to verify by checking the local book

65
00:03:23.170 --> 00:03:25.690
database in Sequel Server Object Explorer.

66
00:03:25.690 --> 00:03:28.880
And there's the Author Table and my C data for the authors

67
00:03:28.880 --> 00:03:31.340
and the book stable with its See data.

68
00:03:31.340 --> 00:03:35.260
Finally, we'll look at the A P Eyes Authors Controller class.

69
00:03:35.260 --> 00:03:38.740
This has some basic rest methods originally generated

70
00:03:38.740 --> 00:03:43.070
by the A s p dot net core tooling, and I made on Lee to tweaks,

71
00:03:43.070 --> 00:03:48.450
which is in the get rest methods to return books along with the authors

72
00:03:48.450 --> 00:03:51.620
and that's done with the include method in the queries.

73
00:03:51.620 --> 00:03:55.490
There are also modification methods all generated by the tooling.

74
00:03:55.490 --> 00:03:59.120
I also want to point out that I created the project using the A s

75
00:03:59.120 --> 00:04:03.450
p dot net core AP I template which by default ads in this weather

76
00:04:03.450 --> 00:04:08.010
forecast class and a controller which returns randomly generated

77
00:04:08.010 --> 00:04:09.690
weather forecast data.

78
00:04:09.690 --> 00:04:12.940
And none of that depends on the database.

79
00:04:12.940 --> 00:04:16.630
So I've left those classes in there for testing purposes.

80
00:04:16.630 --> 00:04:20.820
I really like to do that when I'm starting out with a database dependent

81
00:04:20.820 --> 00:04:24.510
controller such as my authors controller is something fails.

82
00:04:24.510 --> 00:04:26.720
When I'm interacting with my controller,

83
00:04:26.720 --> 00:04:30.450
I can just check to see if the simpler controller that has

84
00:04:30.450 --> 00:04:33.300
no dependency on the database is working.

85
00:04:33.300 --> 00:04:38.120
And if it ISS that tells me that the a P I itself is okay and that the problem

86
00:04:38.120 --> 00:04:42.140
is somewhere between my custom controller and the database,

87
00:04:42.140 --> 00:04:45.450
so it narrows the scope of what I have to check.

88
00:04:45.450 --> 00:04:49.370
The project Template also adds visual studio launch settings.

89
00:04:49.370 --> 00:04:53.910
I've modified that so that when we run or debug the app from visual studio,

90
00:04:53.910 --> 00:04:56.340
it will start with the author's controller and,

91
00:04:56.340 --> 00:04:59.660
as always, by default, it will trigger the plane,

92
00:04:59.660 --> 00:05:01.220
get Rest Command,

93
00:05:01.220 --> 00:05:03.740
which now queries for all of the authors and their

94
00:05:03.740 --> 00:05:06.940
books and returns those results.

95
00:05:06.940 --> 00:05:08.990
I'll go ahead and run the application.

96
00:05:08.990 --> 00:05:13.120
My browser opens to the default girl and here the authors and

97
00:05:13.120 --> 00:05:15.730
their books coming from my local database.

98
00:05:15.730 --> 00:05:19.240
Now I'll insert a new author and book using Postman.

99
00:05:19.240 --> 00:05:21.400
I've set this request to be a post,

100
00:05:21.400 --> 00:05:25.310
and I'm sending a little Jason document with April Speight

101
00:05:25.310 --> 00:05:27.620
and her book that's coming out soon.

102
00:05:27.620 --> 00:05:31.340
Bite sized python and introduction to python programming.

103
00:05:31.340 --> 00:05:35.450
I'll send the request and then I can scroll down to see the response,

104
00:05:35.450 --> 00:05:40.080
and here you can see the new I DS that were created by the database.

105
00:05:40.080 --> 00:05:43.320
Now, when you refresh the browser to show the authors and books,

106
00:05:43.320 --> 00:05:46.340
there's April and her book at the bottom of the list.

107
00:05:46.340 --> 00:05:50.490
So we know that F Core is doing its job of reading from and

108
00:05:50.490 --> 00:05:54.370
posting to the database and that my controller is communicating

109
00:05:54.370 --> 00:06:03.000
the correct logic for those tasks. So everything's working as expected, and we can move on to the RTs database.

