WEBVTT
1
00:00:00.940 --> 00:00:01.760
[Autogenerated] Hello.

2
00:00:01.760 --> 00:00:04.790
Welcome back to fundamentals of building dot Net

3
00:00:04.790 --> 00:00:07.790
applications on Amazon Web services.

4
00:00:07.790 --> 00:00:09.340
I'm Julie Lierman.

5
00:00:09.340 --> 00:00:10.610
In the previous modules,

6
00:00:10.610 --> 00:00:16.650
we learned two ways to deploy and host RS peanut core applications on AWS.

7
00:00:16.650 --> 00:00:21.360
The first was deploying it with elastic beanstalk into an E C.

8
00:00:21.360 --> 00:00:22.580
Two instance,

9
00:00:22.580 --> 00:00:25.820
essentially running at full time on a virtual machine

10
00:00:25.820 --> 00:00:28.090
using dot net course Kestral Server.

11
00:00:28.090 --> 00:00:31.490
Next, we deploy the application as a docker container,

12
00:00:31.490 --> 00:00:35.580
which is now being managed by fargate on AWS.

13
00:00:35.580 --> 00:00:37.940
Now we'll look at another option,

14
00:00:37.940 --> 00:00:41.750
deploying the application as a serverless application

15
00:00:41.750 --> 00:00:45.540
that's integrated with AWS Lambda Functions.

16
00:00:45.540 --> 00:00:48.830
We'll start with a quick explanation of Lambda Serverless

17
00:00:48.830 --> 00:00:52.890
functions and serverless applications and how they're connected

18
00:00:52.890 --> 00:00:56.640
and how Ras Peanut core application pits in.

19
00:00:56.640 --> 00:01:00.390
Then we'll use a project template to spin up a basic server.

20
00:01:00.390 --> 00:01:05.030
Lis s p dot net 80 i and use that project to gain

21
00:01:05.030 --> 00:01:06.550
an understanding of the puzzle.

22
00:01:06.550 --> 00:01:11.550
Pieces that are involved with that knowledge in him will return to the Net core.

23
00:01:11.550 --> 00:01:16.970
Maybe I project and transform that into an AWS serve Earless

24
00:01:16.970 --> 00:01:21.440
application by bringing over assets from the new project,

25
00:01:21.440 --> 00:01:21.980
Finally,

26
00:01:21.980 --> 00:01:24.950
will use the tool kits feature for publishing Lambda

27
00:01:24.950 --> 00:01:30.000
Functions to deploy the serverless application, and then we'll test it out

