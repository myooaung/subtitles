WEBVTT
1
00:00:01.330 --> 00:00:01.820
[Autogenerated] Well,

2
00:00:01.820 --> 00:00:05.500
I won't forget how excited I was to deploy my first

3
00:00:05.500 --> 00:00:09.890
containerized app to AWS and then actually use it.

4
00:00:09.890 --> 00:00:13.870
If you've been following along, I hope you got a little bit of that thrill is,

5
00:00:13.870 --> 00:00:16.740
well, the first time you saw yours working.

6
00:00:16.740 --> 00:00:21.340
So let's do a quick review of what we went through in this module.

7
00:00:21.340 --> 00:00:21.810
Remember,

8
00:00:21.810 --> 00:00:27.060
we started with a review of the various options for having containers on AWS,

9
00:00:27.060 --> 00:00:29.440
and there's a little bit of mix and match you can do

10
00:00:29.440 --> 00:00:33.760
depending on if you want to use the proprietary E C s for

11
00:00:33.760 --> 00:00:36.610
orchestrating containers or eat hay s.

12
00:00:36.610 --> 00:00:38.940
If you're familiar with kubernetes,

13
00:00:38.940 --> 00:00:42.110
you can choose your level of control if you want to manage

14
00:00:42.110 --> 00:00:46.200
your E C to host instance or choose the easy,

15
00:00:46.200 --> 00:00:52.100
breezy fargate to take care of everything from pushing images to AWS,

16
00:00:52.100 --> 00:00:57.340
creating E C two instances and provisioning and managing the campaigners.

17
00:00:57.340 --> 00:00:58.420
And he has.

18
00:00:58.420 --> 00:01:00.240
That's the path I chose.

19
00:01:00.240 --> 00:01:03.160
First I made sure you knew how to get your machine set up

20
00:01:03.160 --> 00:01:06.610
with Docker desktop and ensuring that the visual studio

21
00:01:06.610 --> 00:01:09.240
container tools were installed.

22
00:01:09.240 --> 00:01:11.670
Then we dock arised our application,

23
00:01:11.670 --> 00:01:16.920
which those container tools made really simple and before running that locally,

24
00:01:16.920 --> 00:01:20.920
I did make a little tweak so that I didn't have to worry about the local

25
00:01:20.920 --> 00:01:26.140
container trying to access the AWS systems manager.

26
00:01:26.140 --> 00:01:27.600
Once that was working,

27
00:01:27.600 --> 00:01:32.840
we then used the AWS toolkit to deploy the application for fargate.

28
00:01:32.840 --> 00:01:36.570
There were a bunch of settings we went through to configure the deployment.

29
00:01:36.570 --> 00:01:38.830
Most of the defaults were just fine,

30
00:01:38.830 --> 00:01:42.270
although we did need to pay special attention to ensure that

31
00:01:42.270 --> 00:01:45.380
the containers were inside the correct VPC.

32
00:01:45.380 --> 00:01:48.780
Then the toolkit created resource is on AWS.

33
00:01:48.780 --> 00:01:51.340
It built the docker image on my computer,

34
00:01:51.340 --> 00:01:55.410
then push that up to the elastic container registry.

35
00:01:55.410 --> 00:01:57.880
Then, once all of that was in place,

36
00:01:57.880 --> 00:02:01.880
Fargate took care of the rest and got my campaigners up and running.

37
00:02:01.880 --> 00:02:06.860
There was just one last week to the security group for the RTs instance

38
00:02:06.860 --> 00:02:10.520
to ensure that my containers were allowed to talk to the database and

39
00:02:10.520 --> 00:02:12.980
then everything was working as expected.

40
00:02:12.980 --> 00:02:17.060
In the next module will learn one more scenario of hosting

41
00:02:17.060 --> 00:02:20.220
our ___ peanut core application on AWS,

42
00:02:20.220 --> 00:02:27.160
which is to leverage AWS Lambda Serverless functions to run the A P I and

43
00:02:27.160 --> 00:02:31.640
thereby gain some of the benefits of being serverless.

44
00:02:31.640 --> 00:02:36.130
Here's a list of resource is relevant to this module that you might find useful,

45
00:02:36.130 --> 00:02:39.870
including an article I wrote for MST and magazine,

46
00:02:39.870 --> 00:02:41.880
which is now in Microsoft docks.

47
00:02:41.880 --> 00:02:47.440
That explains the visual studio container tools and the multistage docker file.

48
00:02:47.440 --> 00:02:52.530
I also added a link to a conversation about your first ah ha moment with

49
00:02:52.530 --> 00:02:57.230
Docker that I had with Elton Stoneman at Dr Khan 2020.

50
00:02:57.230 --> 00:03:00.820
If you're new to Docker, you might find it helpful.

51
00:03:00.820 --> 00:03:09.000
I'm Julie Lierman and thanks again for watching fundamentals of building dot net applications on AWS.

