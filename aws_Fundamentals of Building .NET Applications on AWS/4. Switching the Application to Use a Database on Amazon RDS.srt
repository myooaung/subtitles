1
00:00:00,980 --> 00:00:04,200
[Autogenerated] switching are apt to use a database in the RTs instance

2
00:00:04,200 --> 00:00:07,190
could simply be a matter of changing the connection string,

3
00:00:07,190 --> 00:00:10,610
except for the fact that we've got credentials to include,

4
00:00:10,610 --> 00:00:12,230
and we don't want to expose them.

5
00:00:12,230 --> 00:00:14,600
So let's walk through getting that done.

6
00:00:14,600 --> 00:00:19,270
First, I'll grab the server address from the tool kits view of DB instances,

7
00:00:19,270 --> 00:00:20,710
just like I did earlier.

8
00:00:20,710 --> 00:00:23,710
Remember, that's by right clicking on the DB instance,

9
00:00:23,710 --> 00:00:25,810
and then you can copy the address.

10
00:00:25,810 --> 00:00:30,290
Now I'll go into the APP settings Jason filed to change the connection string.

11
00:00:30,290 --> 00:00:33,160
First, I want to keep the local d B string around,

12
00:00:33,160 --> 00:00:36,440
and I'll just rename it to books Connection local.

13
00:00:36,440 --> 00:00:37,260
At some point,

14
00:00:37,260 --> 00:00:41,950
you might want to always use the local DB when in development and then Onley

15
00:00:41,950 --> 00:00:47,390
use RTs at run time so you could just put the local DB Connection string into

16
00:00:47,390 --> 00:00:50,000
the APP settings development dot Jason file.

17
00:00:50,000 --> 00:00:51,640
I'm not gonna bother with that path.

18
00:00:51,640 --> 00:00:55,610
So create a new version of the Books Connection String and here's the

19
00:00:55,610 --> 00:00:58,940
server and then I just add the database name again.

20
00:00:58,940 --> 00:01:01,010
But I'm not putting the credentials in here.

21
00:01:01,010 --> 00:01:03,910
What I'll need to do is stuff that credentials into the

22
00:01:03,910 --> 00:01:07,750
connection string right before I pass it into the DB context

23
00:01:07,750 --> 00:01:11,390
and I'll come back to that in a minute, since I don't want a hard code.

24
00:01:11,390 --> 00:01:14,630
Their credentials and I also don't want to accidentally

25
00:01:14,630 --> 00:01:16,490
share them along with source code.

26
00:01:16,490 --> 00:01:20,070
I'll take advantage of a s p dot net user secrets that

27
00:01:20,070 --> 00:01:22,740
will store them on my computer and as P.

28
00:01:22,740 --> 00:01:24,770
Net core will know how to read them.

29
00:01:24,770 --> 00:01:25,770
I'll walk you through that.

30
00:01:25,770 --> 00:01:28,400
In case you haven't taken advantage of that before,

31
00:01:28,400 --> 00:01:32,570
right click on the project and choose manage user secrets

32
00:01:32,570 --> 00:01:34,420
that will open up a file called Secrets.

33
00:01:34,420 --> 00:01:35,080
Jason.

34
00:01:35,080 --> 00:01:37,930
That visual studio will store somewhere else on my computer.

35
00:01:37,930 --> 00:01:41,990
Then I'll just create a little Jason document with property names and values,

36
00:01:41,990 --> 00:01:44,450
and you can use whatever you want for the property names

37
00:01:44,450 --> 00:01:47,200
I'm using DB Password and Devi User.

38
00:01:47,200 --> 00:01:50,440
I'm not putting my real password in here quite yet,

39
00:01:50,440 --> 00:01:51,980
so I'll just leave that password.

40
00:01:51,980 --> 00:01:55,450
My super secret password, for now and my user name,

41
00:01:55,450 --> 00:01:59,830
as you've seen already, is Julie A S P net course configuration ap.

42
00:01:59,830 --> 00:02:03,790
I knows how to read from that secrets file as one of its sources.

43
00:02:03,790 --> 00:02:05,650
Now I'm back and start up,

44
00:02:05,650 --> 00:02:07,660
and I'll build up the connection string with a

45
00:02:07,660 --> 00:02:10,800
connection String builder Object First, I'll have it.

46
00:02:10,800 --> 00:02:11,370
Read the books,

47
00:02:11,370 --> 00:02:14,900
database property from APP settings and the connection String Builder

48
00:02:14,900 --> 00:02:17,820
Class has properties for password and user i D.

49
00:02:17,820 --> 00:02:25,240
So I can set those two configuration __ password and configuration DB User.

50
00:02:25,240 --> 00:02:28,560
Now the connection string builder has all the pieces it needs,

51
00:02:28,560 --> 00:02:32,150
and I'll set my connection variable to its connection string property.

52
00:02:32,150 --> 00:02:35,370
I'll stick a break point here and debug the app so you can

53
00:02:35,370 --> 00:02:37,880
see that it's reading the secrets first.

54
00:02:37,880 --> 00:02:39,290
Here's the builder object,

55
00:02:39,290 --> 00:02:42,600
and it already has the connection string from apps settings.

56
00:02:42,600 --> 00:02:46,040
And if I debug into the configuration object,

57
00:02:46,040 --> 00:02:50,440
it shows that there are six different sources or providers.

58
00:02:50,440 --> 00:02:52,180
One of them is upsetting.

59
00:02:52,180 --> 00:02:53,510
Another is app settings.

60
00:02:53,510 --> 00:02:55,740
Development secrets is next,

61
00:02:55,740 --> 00:03:00,110
then environment variables and then info coming in from the command line.

62
00:03:00,110 --> 00:03:03,680
Any properties from the later providers will override

63
00:03:03,680 --> 00:03:06,640
matching properties in the earlier ones.

64
00:03:06,640 --> 00:03:09,200
Finally, when the connection string has been put together,

65
00:03:09,200 --> 00:03:11,960
you can see that the user i D and password from the

66
00:03:11,960 --> 00:03:14,180
secrets have now been included.

67
00:03:14,180 --> 00:03:16,310
I'm going to stop there, though,

68
00:03:16,310 --> 00:03:20,850
and go back and replace that temporary password with my real password.

69
00:03:20,850 --> 00:03:23,010
Then I'll go through and run this again.

70
00:03:23,010 --> 00:03:26,840
And even though I know it's working, we're still getting an error.

71
00:03:26,840 --> 00:03:30,640
That's because we haven't created the database yet,

72
00:03:30,640 --> 00:03:34,290
so I'll use E F core migrations to create the database

73
00:03:34,290 --> 00:03:38,080
in the RTs DB instance this time, like it did before,

74
00:03:38,080 --> 00:03:41,400
Migrations will read the connection information from the startup

75
00:03:41,400 --> 00:03:43,810
file and be able to connect to the instance.

76
00:03:43,810 --> 00:03:47,510
I'll run update database again, and when it's finished,

77
00:03:47,510 --> 00:03:52,040
I'll refresh the RDS instance in the sequel Server Object Explorer.

78
00:03:52,040 --> 00:03:55,880
And now you can see the new book database and inside there

79
00:03:55,880 --> 00:03:59,000
the authors and books tables and remember that the

80
00:03:59,000 --> 00:04:01,380
migrations also seated the data.

81
00:04:01,380 --> 00:04:06,370
Now I'll run the APP again, and there's the author data in the browser.

82
00:04:06,370 --> 00:04:11,780
How do we know that this is really the RDS database and not my local one?

83
00:04:11,780 --> 00:04:17,540
Remember that I added April spray to the local DB, and she's not in here now.

84
00:04:17,540 --> 00:04:21,670
Will flip over to postmen again at her and her book into the RTs

85
00:04:21,670 --> 00:04:24,900
database using the post method of the controller.

86
00:04:24,900 --> 00:04:28,410
But I'll make one small change so we can tell the difference between the

87
00:04:28,410 --> 00:04:33,040
database that's on AWS and the local DB on my computer.

88
00:04:33,040 --> 00:04:36,940
I'll just add coming soon to the book title.

89
00:04:36,940 --> 00:04:41,880
So back to the browser, I'll refresh the page and there's the new data.

90
00:04:41,880 --> 00:04:46,960
So now my APP is properly interacting with the database in the AWS cloud,

91
00:04:46,960 --> 00:04:53,000
and it's time to publish the up so it too, is running on AWS.

