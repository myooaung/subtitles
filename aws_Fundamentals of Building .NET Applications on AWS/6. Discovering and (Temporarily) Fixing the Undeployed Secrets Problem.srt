1
00:00:00,940 --> 00:00:03,680
[Autogenerated] it was important for you to see this problem as

2
00:00:03,680 --> 00:00:06,590
well as the little bit of trouble shooting will do to get some

3
00:00:06,590 --> 00:00:08,690
information about what's going on.

4
00:00:08,690 --> 00:00:13,940
And, of course, the resolution back in the Tool Kits environment status window.

5
00:00:13,940 --> 00:00:18,430
I'll go to the Logs tab and click on the button for snapshot logs to get

6
00:00:18,430 --> 00:00:21,370
the toolkit to pull down the logs from the server.

7
00:00:21,370 --> 00:00:22,960
And when the log files there,

8
00:00:22,960 --> 00:00:27,450
I can open it up and show you where in the log you can see where the problem is.

9
00:00:27,450 --> 00:00:30,440
I've scrolled down to the dot net core section of the logs,

10
00:00:30,440 --> 00:00:32,940
and I'm definitely familiar with reading those,

11
00:00:32,940 --> 00:00:34,710
and I can see the problem here.

12
00:00:34,710 --> 00:00:37,640
The log shows you that the sequel Connection String Builder,

13
00:00:37,640 --> 00:00:40,170
failed because there was no password.

14
00:00:40,170 --> 00:00:41,290
It was no.

15
00:00:41,290 --> 00:00:45,290
The weather forecast controller doesn't care about the database,

16
00:00:45,290 --> 00:00:49,620
but let's look back at the startup file where this is happening.

17
00:00:49,620 --> 00:00:53,340
While we weren't trying to trigger the authors controller,

18
00:00:53,340 --> 00:00:56,650
this code isn't related to a particular controller,

19
00:00:56,650 --> 00:01:00,300
but it's in the start up of the a P I itself before we

20
00:01:00,300 --> 00:01:01,990
even try to get to a controller.

21
00:01:01,990 --> 00:01:04,750
This code is running Where's the password?

22
00:01:04,750 --> 00:01:09,010
It's on my computer in that secret stock Jason file.

23
00:01:09,010 --> 00:01:12,440
It didn't get deployed to the EEC two instance with the APP,

24
00:01:12,440 --> 00:01:16,740
and that's part of the point of the S peanut core secrets manager.

25
00:01:16,740 --> 00:01:21,430
It's on Lee local, but the deployed up also needs credentials.

26
00:01:21,430 --> 00:01:25,280
We do have a few options for securely storing credentials on

27
00:01:25,280 --> 00:01:30,080
AWS and SP dot net Core would be able to read them along with

28
00:01:30,080 --> 00:01:32,810
the other configuration providers.

29
00:01:32,810 --> 00:01:36,480
That, however, is a lesson for the next module.

30
00:01:36,480 --> 00:01:39,400
But I do want you to see the A p I working.

31
00:01:39,400 --> 00:01:41,230
So what will do for now?

32
00:01:41,230 --> 00:01:45,540
And I will try to avoid my desire to remind you 50 times in

33
00:01:45,540 --> 00:01:48,570
the next few minutes that this is ah, hack,

34
00:01:48,570 --> 00:01:52,740
which is on Lee for the goal of letting you see this ap I working.

35
00:01:52,740 --> 00:01:56,130
It's just temporary, and here's what Will dio.

36
00:01:56,130 --> 00:02:01,310
I'll copy the DB password in DB User data from Secrets Jason

37
00:02:01,310 --> 00:02:05,660
into the upsetting start Jason File APP settings does get

38
00:02:05,660 --> 00:02:13,000
deployed with the application, so S P Net course configuration will be able to read these parameters

