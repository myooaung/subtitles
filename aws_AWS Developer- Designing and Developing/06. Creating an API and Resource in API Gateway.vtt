WEBVTT
1
00:00:02.162 --> 00:00:05.043
There are quite a few parts to actually creating and

2
00:00:05.043 --> 00:00:06.970
configuring an API in API Gateway.

3
00:00:06.970 --> 00:00:08.658
Each part serves its purpose,

4
00:00:08.658 --> 00:00:13.242
but it can be a little complicated when you're getting started.

5
00:00:13.242 --> 00:00:14.955
Also, because this service is newer,

6
00:00:14.955 --> 00:00:18.095
you may notice that the conventions that were common with

7
00:00:18.095 --> 00:00:21.223
other parts of the SDK are different here,

8
00:00:21.223 --> 00:00:24.876
primarily the variable casing conventions.

9
00:00:24.876 --> 00:00:29.879
Let's get started by opening the create‑api‑gateway.js file.

10
00:00:29.879 --> 00:00:33.541
You'll notice right off the bat the massive chunk of code between lines

11
00:00:33.541 --> 00:00:37.750
12 and 23 where our API is created and configured.

12
00:00:37.750 --> 00:00:39.900
I'll explain it all in just a bit.

13
00:00:39.900 --> 00:00:42.910
Let's go ahead and insert your region in line 4.

14
00:00:42.910 --> 00:00:47.453
Then on line 7, we need to create an api gateway SDK object.

15
00:00:47.453 --> 00:00:50.991
So create a const called apiG.

16
00:00:50.991 --> 00:00:56.887
Then assign to it a new AWS.APIGateway constructor call.

17
00:00:56.887 --> 00:01:00.275
An API in API Gateway is structured liked this.

18
00:01:00.275 --> 00:01:02.153
You have your API.

19
00:01:02.153 --> 00:01:04.501
The API has different resources,

20
00:01:04.501 --> 00:01:09.326
which are organized sort of in a tree structure with parents and children.

21
00:01:09.326 --> 00:01:13.069
Then each resource can have one or many methods.

22
00:01:13.069 --> 00:01:15.776
A method has two main parts to it,

23
00:01:15.776 --> 00:01:19.117
the integration request and the integration response where you

24
00:01:19.117 --> 00:01:22.003
can manipulate the data going either way.

25
00:01:22.003 --> 00:01:24.874
Keep all these pieces in mind because those are what we're

26
00:01:24.874 --> 00:01:28.088
going to be configuring and creating.

27
00:01:28.088 --> 00:01:30.498
So let's look back at our code.

28
00:01:30.498 --> 00:01:33.597
On line 12, we're creating the root REST API.

29
00:01:33.597 --> 00:01:34.872
When that promise is resolved,

30
00:01:34.872 --> 00:01:38.175
we set a global variable with that value so we can

31
00:01:38.175 --> 00:01:42.734
use it easily in other functions, and then get the root resource.

32
00:01:42.734 --> 00:01:44.520
Any time you want to create a resource,

33
00:01:44.520 --> 00:01:47.555
you have to give it a parent resource to branch from.

34
00:01:47.555 --> 00:01:52.230
In this case, we're getting the top‑level resource to branch from.

35
00:01:52.230 --> 00:01:55.905
Then we create a resource called hbfl.

36
00:01:55.905 --> 00:01:59.343
This will be what our demo site responds on.

37
00:01:59.343 --> 00:02:03.081
We have to then create the method and integration on that resource.

38
00:02:03.081 --> 00:02:07.684
We'll also create one more resource, which is actually a proxy resource.

39
00:02:07.684 --> 00:02:12.330
It's basically a catchall for any request beyond hbfl.

40
00:02:12.330 --> 00:02:16.412
It'll be used for things like API calls to our demo project.

41
00:02:16.412 --> 00:02:18.328
Once that proxy resource is created,

42
00:02:18.328 --> 00:02:21.691
we configure a method and integration for it as well.

43
00:02:21.691 --> 00:02:24.164
Now let's get started with some code.

44
00:02:24.164 --> 00:02:28.661
Come down to the createRestApi function and create a

45
00:02:28.661 --> 00:02:31.630
params const object on the first line.

46
00:02:31.630 --> 00:02:36.924
This might be the simplest params object yet with only one property called name.

47
00:02:36.924 --> 00:02:40.637
Give it the value of the apiName function argument.

48
00:02:40.637 --> 00:02:44.357
Now inside the Promise call apiG.createRestApi,

49
00:02:44.357 --> 00:02:50.408
passing in params as the first argument and a callback function

50
00:02:50.408 --> 00:02:53.904
with err and data arguments as the second.

51
00:02:53.904 --> 00:02:56.819
Inside the callback, if there's an err object,

52
00:02:56.819 --> 00:02:59.884
call reject with it; otherwise, call resolve,

53
00:02:59.884 --> 00:03:03.101
passing in the entire data argument.

54
00:03:03.101 --> 00:03:05.875
The next function we'll implement is getRootResource,

55
00:03:05.875 --> 00:03:11.175
which gets the root resource ID from the API we just created.

56
00:03:11.175 --> 00:03:12.727
Create your params const,

57
00:03:12.727 --> 00:03:17.818
and it looks like we've got another extremely simple one here.

58
00:03:17.818 --> 00:03:21.972
This one has one property called restApiId.

59
00:03:21.972 --> 00:03:28.539
The value will be the api.id property from the API function argument.

60
00:03:28.539 --> 00:03:33.737
Now inside the Promise, we'll call the apiG.getResources function,

61
00:03:33.737 --> 00:03:37.386
passing in params as the first argument and a callback function

62
00:03:37.386 --> 00:03:40.694
with err and data arguments as the second.

63
00:03:40.694 --> 00:03:45.870
Inside the callback, if there's an err object, call reject and pass it in.

64
00:03:45.870 --> 00:03:47.974
Now create an else block.

65
00:03:47.974 --> 00:03:54.041
The getResources function returns an array of resources, but we only want one.

66
00:03:54.041 --> 00:03:58.091
Create a new const variable here called rootResource.

67
00:03:58.091 --> 00:04:01.694
Assign to it a call to data.items.find.

68
00:04:01.694 --> 00:04:05.813
This function will let us use criteria to find a

69
00:04:05.813 --> 00:04:08.818
single item in the data.items array.

70
00:04:08.818 --> 00:04:13.782
Pass an arrow function into find that has a single argument called r.

71
00:04:13.782 --> 00:04:20.982
In the function body, return the expression r.path === "/".

72
00:04:20.982 --> 00:04:23.985
This is looking at each resource and finding the one that

73
00:04:23.985 --> 00:04:27.284
has a path with only a single slash.

74
00:04:27.284 --> 00:04:29.763
This is the root resource.

75
00:04:29.763 --> 00:04:36.571
Now call resolve and pass in rootResource.id since we only need the resource ID.

76
00:04:36.571 --> 00:04:38.709
Now that we have that root resource ID,

77
00:04:38.709 --> 00:04:42.918
we can create a new resource off it by implementing

78
00:04:42.918 --> 00:04:45.522
the createResourceId function.

79
00:04:45.522 --> 00:04:49.371
Start by creating the usual params const object.

80
00:04:49.371 --> 00:04:51.548
This one will have a few properties.

81
00:04:51.548 --> 00:04:56.878
The first property will be parentId with the value of the

82
00:04:56.878 --> 00:04:58.765
parentResourceId function argument.

83
00:04:58.765 --> 00:05:00.245
The next property is pathPart,

84
00:05:00.245 --> 00:05:04.157
and you can give it the value of the resourcePath function argument.

85
00:05:04.157 --> 00:05:09.059
This is the path that the resource will be configured to

86
00:05:09.059 --> 00:05:13.040
respond to on the final API URI scheme.

87
00:05:13.040 --> 00:05:20.573
The last property will be restApiId, which you can give the value of api.id.

88
00:05:20.573 --> 00:05:24.193
Now inside the Promise, call apiG.createResource,

89
00:05:24.193 --> 00:05:28.954
passing in the params object as the first argument and a callback

90
00:05:28.954 --> 00:05:32.458
function with err and data arguments as the second.

91
00:05:32.458 --> 00:05:36.111
If there's an err object, call reject with it,

92
00:05:36.111 --> 00:05:37.734
and otherwise call resolve,

93
00:05:37.734 --> 00:05:43.874
and we'll return the ID of the resource by passing in data.id.

94
00:05:43.874 --> 00:05:46.455
We've implemented the functions to create an API,

95
00:05:46.455 --> 00:05:49.402
retrieve a root resource, and create a resource,

96
00:05:49.402 --> 00:05:58.000
but there's still more to do. In the next clip, we're going to create a method and integration for a resource.

