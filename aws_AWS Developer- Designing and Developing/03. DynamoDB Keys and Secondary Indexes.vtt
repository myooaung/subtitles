WEBVTT
1
00:00:01.994 --> 00:00:04.440
In order for DynamoDB to achieve high performance,

2
00:00:04.440 --> 00:00:07.449
it spreads your data across many different partitions.

3
00:00:07.449 --> 00:00:11.633
The attribute it uses on each item to decide which

4
00:00:11.633 --> 00:00:14.980
partition to use is called the partition key,

5
00:00:14.980 --> 00:00:17.481
also sometimes it's called the hash attribute.

6
00:00:17.481 --> 00:00:20.029
This key is passed to an internal hash function,

7
00:00:20.029 --> 00:00:23.980
and the output is used to assign the item to a partition.

8
00:00:23.980 --> 00:00:27.497
This partition key must be unique in your table,

9
00:00:27.497 --> 00:00:30.569
kind of like a traditional primary key.

10
00:00:30.569 --> 00:00:33.282
There's another type of key schema you can use instead that

11
00:00:33.282 --> 00:00:37.805
let's your partition key be non-unique, and that's by adding a sort key,

12
00:00:37.805 --> 00:00:41.133
also sometimes called a range attribute.

13
00:00:41.133 --> 00:00:43.513
In the case that you defined both of those keys,

14
00:00:43.513 --> 00:00:46.625
Dynamo will use the partition key as input to the hash

15
00:00:46.625 --> 00:00:48.810
function to find which partition to use,

16
00:00:48.810 --> 00:00:52.824
and then it'll use the sort key to sort all the items

17
00:00:52.824 --> 00:00:54.441
found at that partition location.

18
00:00:54.441 --> 00:00:58.614
Both of these key schema types allow you to be very flexible

19
00:00:58.614 --> 00:01:01.717
when defining how your table should work.

20
00:01:01.717 --> 00:01:07.120
But sometimes a single set of keys isn't enough to properly query your data.

21
00:01:07.120 --> 00:01:12.901
In this case, you can use a secondary index to provide alternate query methods.

22
00:01:12.901 --> 00:01:16.022
There are two types of secondary indexes,

23
00:01:16.022 --> 00:01:19.627
global secondary indexes and local secondary indexes.

24
00:01:19.627 --> 00:01:23.875
Let's start by discussing global secondary indexes.

25
00:01:23.875 --> 00:01:25.467
With a global secondary index,

26
00:01:25.467 --> 00:01:29.679
you define a new key schema to organize your items and query on.

27
00:01:29.679 --> 00:01:34.753
You could have a partition key schema or partition key plus sort key schema.

28
00:01:34.753 --> 00:01:39.749
In addition, you'll define which attribute you want to include in the index.

29
00:01:39.749 --> 00:01:44.490
If you query on the index, only selected attributes will be accessible.

30
00:01:44.490 --> 00:01:45.536
In some ways,

31
00:01:45.536 --> 00:01:49.809
Dynamo is just replicating the data and organizing it in a different way.

32
00:01:49.809 --> 00:01:53.544
Another nice thing is that when you create a global secondary index,

33
00:01:53.544 --> 00:01:58.618
you define new provisioned throughput capacity exclusively for the index.

34
00:01:58.618 --> 00:02:01.207
When querying on that secondary index,

35
00:02:01.207 --> 00:02:05.639
only the throughput configured for that secondary index is used.

36
00:02:05.639 --> 00:02:09.431
A local secondary index is very different from a global one.

37
00:02:09.431 --> 00:02:10.751
With a local secondary index,

38
00:02:10.751 --> 00:02:14.091
you define an additional sort key to query data at

39
00:02:14.091 --> 00:02:16.081
the partition level differently.

40
00:02:16.081 --> 00:02:19.395
The original table's partition key is used in conjunction with the

41
00:02:19.395 --> 00:02:23.550
local secondary index's sort key to query the data.

42
00:02:23.550 --> 00:02:24.012
Additionally,

43
00:02:24.012 --> 00:02:29.060
you don't create provisioned throughput capacity or define a set of attributes.

44
00:02:29.060 --> 00:02:32.324
All of the base table's properties are carried over.

45
00:02:32.324 --> 00:02:33.462
In many ways,

46
00:02:33.462 --> 00:02:37.297
a local secondary index just enhances the original data where

47
00:02:37.297 --> 00:02:40.658
a global one creates an exclusive new set.

48
00:02:40.658 --> 00:02:42.267
And with both indexes,

49
00:02:42.267 --> 00:02:45.843
Dynamo maintains them completely when adding or deleting items,

50
00:02:45.843 --> 00:02:49.650
updating the indexes, and you don't have to do anything.

51
00:02:49.650 --> 00:02:50.528
In the next clip,

52
00:02:50.528 --> 00:02:58.000
we're going to put some of this information into practice as we create a DynamoDB table.

