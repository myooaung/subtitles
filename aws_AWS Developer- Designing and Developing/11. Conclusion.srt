1
00:00:00,840 --> 00:00:03,520
Between SQS and Kinesis Streams,

2
00:00:03,520 --> 00:00:06,350
you should be able to find a solution for any messaging

3
00:00:06,350 --> 00:00:09,990
need you have. SQS provides a more distributed and

4
00:00:09,990 --> 00:00:12,430
decoupled form of sending messages.

5
00:00:12,430 --> 00:00:16,640
And Kinesis provides real‑time and high‑throughput streams.

6
00:00:16,640 --> 00:00:19,010
Let's recap what we covered in this module.

7
00:00:19,010 --> 00:00:22,920
We started by discussing some of the details of SQS, like delay

8
00:00:22,920 --> 00:00:26,540
seconds and visibility timeout on messages.

9
00:00:26,540 --> 00:00:30,840
Then we created a queue and changed our app to send race results

10
00:00:30,840 --> 00:00:33,940
through a queue to update the hamsters table.

11
00:00:33,940 --> 00:00:34,320
Next,

12
00:00:34,320 --> 00:00:38,440
I introduced Kinesis Streams, and then we again sent race results

13
00:00:38,440 --> 00:00:41,860
into the stream while the Lambda function consumed them on the

14
00:00:41,860 --> 00:00:44,940
other end and updated the races table.

15
00:00:44,940 --> 00:00:49,740
Finally, we covered the limits regarding SQS and Kinesis Streams.

16
00:00:49,740 --> 00:01:00,000
In the next module, we're going to look at some communication tools in AWS, like the Simple Notification Service and CloudWatch alarms

