WEBVTT
1
00:00:00.840 --> 00:00:04.610
Methods in API gateway are where you define how a user will

2
00:00:04.610 --> 00:00:07.040
actually interact with your end point.

3
00:00:07.040 --> 00:00:11.470
Each resource method corresponds with a single http method

4
00:00:11.470 --> 00:00:15.730
like GET or POST, and different integrations are added to

5
00:00:15.730 --> 00:00:18.580
transform the request or response.

6
00:00:18.580 --> 00:00:22.140
Let's get started by implementing the createResourceMethod in

7
00:00:22.140 --> 00:00:27.440
our create‑api‑gateway.js file. Start by declaring a params

8
00:00:27.440 --> 00:00:29.970
const object on the first line.

9
00:00:29.970 --> 00:00:34.390
The first property is authorizationType. With a API gateway

10
00:00:34.390 --> 00:00:37.165
methods, you're able to create authorizations, such as using

11
00:00:37.165 --> 00:00:40.440
IAM, or even your own function.

12
00:00:40.440 --> 00:00:46.140
We won't be securing our endpoint, so enter the string NONE in all caps.

13
00:00:46.140 --> 00:00:49.630
The next property is httpMethod, which will give the

14
00:00:49.630 --> 00:00:53.140
value of the method function argument.

15
00:00:53.140 --> 00:00:56.470
Next is the resourceId property, which you can give the

16
00:00:56.470 --> 00:00:59.890
value of the resourceId function argument.

17
00:00:59.890 --> 00:01:03.690
This is how a resource will be tied to this method.

18
00:01:03.690 --> 00:01:07.610
The last property is restApiId, which you can give the value of

19
00:01:07.610 --> 00:01:13.010
api.id. And that's it for the params object. So now come here

20
00:01:13.010 --> 00:01:18.000
inside the promise and call the apiG.putMethod function with

21
00:01:18.000 --> 00:01:19.510
params as the first argument,

22
00:01:19.510 --> 00:01:22.940
and a callback is a second with only an err argument.

23
00:01:22.940 --> 00:01:25.370
If there's an err object, then call reject,

24
00:01:25.370 --> 00:01:26.640
passing it in,

25
00:01:26.640 --> 00:01:31.970
otherwise call resolve and pass back the original resourceId function

26
00:01:31.970 --> 00:01:34.710
argument so it can be used in the next function.

27
00:01:34.710 --> 00:01:37.940
As you can see, there's also not much to this function.

28
00:01:37.940 --> 00:01:41.500
The interesting stuff comes into play with the integrations.

29
00:01:41.500 --> 00:01:44.700
Let's go ahead and immediately move into implementing the

30
00:01:44.700 --> 00:01:47.640
create method integration function.

31
00:01:47.640 --> 00:01:50.970
Start by creating the params const object.

32
00:01:50.970 --> 00:01:54.440
This one will have the most properties in this file.

33
00:01:54.440 --> 00:01:57.680
We'll start with the httpMethod to which you can give the

34
00:01:57.680 --> 00:02:00.940
value of the method function argument.

35
00:02:00.940 --> 00:02:03.120
The next property is resourceId,

36
00:02:03.120 --> 00:02:07.210
which you can give the value of the resourceId function argument.

37
00:02:07.210 --> 00:02:12.450
Both httpMethod and resourceId together tell this function which

38
00:02:12.450 --> 00:02:15.640
resource method to attach the integration too.

39
00:02:15.640 --> 00:02:21.440
The next property is restApiId, which you can give the value api.id.

40
00:02:21.440 --> 00:02:25.140
Next, add the property integration httpMethod,

41
00:02:25.140 --> 00:02:30.840
which is the method used to call the back end AWS resource from the API.

42
00:02:30.840 --> 00:02:33.840
You can give it the same method function argument.

43
00:02:33.840 --> 00:02:36.240
Next is the type property.

44
00:02:36.240 --> 00:02:38.060
There are several types of integrations,

45
00:02:38.060 --> 00:02:44.340
like sending it to a lambda, using it as a mock or sending it to an AWS resource.

46
00:02:44.340 --> 00:02:49.880
We will use the http proxy type when sending requests over to our load balancer.

47
00:02:49.880 --> 00:02:54.110
So add that as a value in all caps with an underscore between the

48
00:02:54.110 --> 00:02:59.750
words. And the final property is URI, which we will give the URL to

49
00:02:59.750 --> 00:03:02.340
our load balanced demo application.

50
00:03:02.340 --> 00:03:05.450
So switch over to the EC2 dashboard,

51
00:03:05.450 --> 00:03:11.170
go to load balancers and get the DNS name from our load balancer. In our

52
00:03:11.170 --> 00:03:15.520
value for URI, the URI does need to include the protocol.

53
00:03:15.520 --> 00:03:22.740
So in a string at http:// and then paste the load balancer DNS name.

54
00:03:22.740 --> 00:03:28.160
Now inside the promise, we'll call apiG.putIntegration passing

55
00:03:28.160 --> 00:03:31.990
in the params object as the first argument and call back with

56
00:03:31.990 --> 00:03:34.340
an err argument as the second.

57
00:03:34.340 --> 00:03:37.240
If there's an err object, then call reject with it.

58
00:03:37.240 --> 00:03:42.410
Otherwise call resolve with the original resourceId function argument

59
00:03:42.410 --> 00:03:45.730
again. We're returning that in these functions because there's nothing

60
00:03:45.730 --> 00:03:47.970
really from the data response that we need.

61
00:03:47.970 --> 00:03:51.640
And it makes hooking the promises together much easier.

62
00:03:51.640 --> 00:03:54.860
Now our basic method and integration functions are complete,

63
00:03:54.860 --> 00:03:57.910
which will let us create a basic resource.

64
00:03:57.910 --> 00:03:58.780
We do, however,

65
00:03:58.780 --> 00:04:03.090
want to also create a pure proxy resource that will handle

66
00:04:03.090 --> 00:04:09.000
any requests coming onto the HBFL resource, and that's what we'll do in the next clip.

