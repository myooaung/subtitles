1
00:00:00,940 --> 00:00:02,120
In the last module,

2
00:00:02,120 --> 00:00:05,170
I mentioned launch configurations and how they are the

3
00:00:05,170 --> 00:00:07,340
place you'll persist your user data.

4
00:00:07,340 --> 00:00:07,990
It's true.

5
00:00:07,990 --> 00:00:10,990
A launch configuration is basically the blueprint for

6
00:00:10,990 --> 00:00:13,810
automatically creating new instances.

7
00:00:13,810 --> 00:00:17,940
It contains all the key attributes for how to create an instance,

8
00:00:17,940 --> 00:00:23,690
including the AMI to use, the instance type, instance security groups, and

9
00:00:23,690 --> 00:00:28,810
the startup user data. Although they do stand alone and you can manually

10
00:00:28,810 --> 00:00:33,710
create new instances directly from a launch configuration, they're also a

11
00:00:33,710 --> 00:00:36,440
key component in an auto scaling group.

12
00:00:36,440 --> 00:00:40,090
Let's create a launch configuration for our demo project.

13
00:00:40,090 --> 00:00:45,740
Go to your code editor and open the module_03 folder in the scripts directory.

14
00:00:45,740 --> 00:00:50,280
We'll be modifying the create‑launch‑configuration.js file.

15
00:00:50,280 --> 00:00:52,210
There is not much special going on here,

16
00:00:52,210 --> 00:00:55,120
just setting up some required variables and then

17
00:00:55,120 --> 00:00:57,130
creating the launch configuration.

18
00:00:57,130 --> 00:01:00,930
I'm also taking care of a few annoying things for you now like

19
00:01:00,930 --> 00:01:05,270
importing the AWS SDK and configuring your region.

20
00:01:05,270 --> 00:01:09,200
The only thing you'll need to do is replace the string on line 4

21
00:01:09,200 --> 00:01:13,400
with the region that you're using. On line 7, we need to create

22
00:01:13,400 --> 00:01:16,330
the SDK object we'll be operating on.

23
00:01:16,330 --> 00:01:19,560
This is the auto scaling SDK property.

24
00:01:19,560 --> 00:01:22,740
Create a new const called autoScaling,

25
00:01:22,740 --> 00:01:28,290
then assign to it a new AWS.AutoScaling constructor call.

26
00:01:28,290 --> 00:01:32,500
This is just like the EC2 object we used in the last module and that

27
00:01:32,500 --> 00:01:36,150
there is a host of functions that you can call that perform

28
00:01:36,150 --> 00:01:39,940
different operations related to auto scaling.

29
00:01:39,940 --> 00:01:42,640
One thing that we'll use with our launch configuration that we

30
00:01:42,640 --> 00:01:46,920
haven't talked about yet is an IAM role to give the instance

31
00:01:46,920 --> 00:01:52,130
permissions to talk to other service in AWS. On line 14, a role is

32
00:01:52,130 --> 00:01:55,090
being created for our hamster instances,

33
00:01:55,090 --> 00:01:58,880
and then we'll use that same role in the launch configuration.

34
00:01:58,880 --> 00:02:02,360
Be aware this row gives the instance administrator access

35
00:02:02,360 --> 00:02:04,520
for simplicity's sake during this class,

36
00:02:04,520 --> 00:02:07,970
so make sure you never actually give an instance

37
00:02:07,970 --> 00:02:10,740
admin access in a production account.

38
00:02:10,740 --> 00:02:15,040
Now let's implement the Create launch configuration function on line 18.

39
00:02:15,040 --> 00:02:18,380
We'll start by declaring our Params const object.

40
00:02:18,380 --> 00:02:22,370
The first property is IamInstanceProfile,

41
00:02:22,370 --> 00:02:26,520
which we will assign to the profile ARN argument.

42
00:02:26,520 --> 00:02:32,140
This associates our EC2 instances with the role to give it permissions.

43
00:02:32,140 --> 00:02:37,440
The next property is imageId, which is the AMI that we want to launch from.

44
00:02:37,440 --> 00:02:42,170
We'll use the AMI we created here, but we don't know the id for it.

45
00:02:42,170 --> 00:02:46,720
So switch over to the EC2 dashboard in your web browser and

46
00:02:46,720 --> 00:02:50,540
click on the AMIs menu option on the left.

47
00:02:50,540 --> 00:02:56,640
Find the image that has the name hamsterImage and copy the AMI ID.

48
00:02:56,640 --> 00:03:03,940
Bring that back to your code and paste it as a string as the value to ImageId.

49
00:03:03,940 --> 00:03:08,330
The next property is InstanceType, which is the EC2 InstanceType.

50
00:03:08,330 --> 00:03:13,130
I'll just center t2.micro here since it's cheap and what we've been

51
00:03:13,130 --> 00:03:17,340
using so far. Any instance type could be entered here.

52
00:03:17,340 --> 00:03:20,110
The next property is LaunchConfigurationName,

53
00:03:20,110 --> 00:03:23,740
and this is where you add your launch configuration identifier.

54
00:03:23,740 --> 00:03:27,240
Set the value as the function argument lcName,

55
00:03:27,240 --> 00:03:29,580
which is being passed into the function.

56
00:03:29,580 --> 00:03:31,520
Next, add the property key name,

57
00:03:31,520 --> 00:03:36,040
which will be the key pair the instance will be launched with and give

58
00:03:36,040 --> 00:03:41,210
it the value of the key name const variable. Now add a SecurityGroups

59
00:03:41,210 --> 00:03:44,840
property and set the value to an array.

60
00:03:44,840 --> 00:03:47,890
These security groups define the security group that will be

61
00:03:47,890 --> 00:03:50,840
added to each instance that is created.

62
00:03:50,840 --> 00:03:55,060
In that case, we'll use the security group we created last module,

63
00:03:55,060 --> 00:03:59,510
which is already declared here in the sgName variable, so

64
00:03:59,510 --> 00:04:03,240
add that. The last property is user data.

65
00:04:03,240 --> 00:04:07,510
Since we're launching from the AMI built off the bit NAMI AMI,

66
00:04:07,510 --> 00:04:13,320
open up the marketplace‑ec2‑startup.sh file in the module_02

67
00:04:13,320 --> 00:04:19,530
folder and copy the base‑64 encoded string, paste that as a

68
00:04:19,530 --> 00:04:23,140
string as the value to user data.

69
00:04:23,140 --> 00:04:27,320
Now we can use this params object. Follow the promise pattern by

70
00:04:27,320 --> 00:04:32,100
returning a new promise with the resolve and reject arguments. In

71
00:04:32,100 --> 00:04:36,130
the callback function, use the autoscaling object and call the

72
00:04:36,130 --> 00:04:38,770
createLaunchConfiguration function.

73
00:04:38,770 --> 00:04:40,970
The first argument will be Params,

74
00:04:40,970 --> 00:04:45,330
and the second will be a callback with err and data arguments.

75
00:04:45,330 --> 00:04:49,120
Nothing special here, just reject if there's an err argument.

76
00:04:49,120 --> 00:04:53,140
Otherwise, resolve and pass in data.

77
00:04:53,140 --> 00:04:57,040
Now we can go ahead and run this file to create the launch configuration,

78
00:04:57,040 --> 00:05:01,790
even though the other pieces aren't ready yet, so let's do that. In your

79
00:05:01,790 --> 00:05:08,040
command line, make sure you're in the scripts module_03 folder and run node

80
00:05:08,040 --> 00:05:13,990
create‑Launch‑Configuration.js. After a bit, the launch configuration details

81
00:05:13,990 --> 00:05:16,600
should be output to your command line.

82
00:05:16,600 --> 00:05:17,430
In the next clip,

83
00:05:17,430 --> 00:05:24,000
we're going to create an elastic load balancer as the next piece of our scaling architecture.

