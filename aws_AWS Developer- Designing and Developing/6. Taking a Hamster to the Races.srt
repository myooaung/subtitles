1
00:00:00,990 --> 00:00:04,970
In order for us to utilize a bunch of AWS services together,

2
00:00:04,970 --> 00:00:07,340
we need an application to work with.

3
00:00:07,340 --> 00:00:08,180
For this course,

4
00:00:08,180 --> 00:00:11,780
I provided a demo web application project that we'll

5
00:00:11,780 --> 00:00:15,040
modify to make the most of AWS.

6
00:00:15,040 --> 00:00:18,540
Here's the demo app called Hamster Ball Fantasy League.

7
00:00:18,540 --> 00:00:22,090
This site features a make believe league of hamsters

8
00:00:22,090 --> 00:00:24,440
racing each other in hamster balls.

9
00:00:24,440 --> 00:00:28,970
The site is a single‑page application built with React and Redux.

10
00:00:28,970 --> 00:00:33,240
The back‑end application is built with Node and the hapi web application

11
00:00:33,240 --> 00:00:38,780
framework. With HBFL, you can look at individual hamster details to see how

12
00:00:38,780 --> 00:00:43,270
they've been faring, look at race details to see what place each hamster

13
00:00:43,270 --> 00:00:48,380
came in, and also look at the leader boards to see how each user is ranked

14
00:00:48,380 --> 00:00:50,740
based on their favorite hamsters.

15
00:00:50,740 --> 00:00:52,300
If you log into the application,

16
00:00:52,300 --> 00:00:55,690
you can get access to your own data and can pick and choose

17
00:00:55,690 --> 00:00:59,250
which hamsters you want to represent you in the leader boards.

18
00:00:59,250 --> 00:01:02,340
You can only favorite three at a time.

19
00:01:02,340 --> 00:01:06,560
There are some behind the scenes controls in this configuration panel that

20
00:01:06,560 --> 00:01:09,940
let you reset the race results and start them again.

21
00:01:09,940 --> 00:01:12,710
These are all make believe, randomly generated results,

22
00:01:12,710 --> 00:01:16,780
so each time you run the simulation, you'll get a different outcome.

23
00:01:16,780 --> 00:01:19,480
See if you can make it to first place.

24
00:01:19,480 --> 00:01:22,730
This application is going to utilize a multitude of different

25
00:01:22,730 --> 00:01:26,940
services to provide some robust capabilities for users.

26
00:01:26,940 --> 00:01:35,000
Starting in the next module, we'll get this application running in EC2 and see how it feels when it's served from the cloud.

