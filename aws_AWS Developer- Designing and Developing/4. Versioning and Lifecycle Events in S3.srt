1
00:00:00,940 --> 00:00:03,400
S3 is a monster in AWS,

2
00:00:03,400 --> 00:00:08,450
often rivaling EC2 in its ubiquity across the cloud provider.

3
00:00:08,450 --> 00:00:11,710
The reasons for its popularity are the reliability,

4
00:00:11,710 --> 00:00:16,650
speed, and ease of use that it has, but there are some automated aspects of

5
00:00:16,650 --> 00:00:20,360
the service that make it even more useful for applications.

6
00:00:20,360 --> 00:00:24,310
Two of those features are versioning and lifecycle events.

7
00:00:24,310 --> 00:00:29,020
Versioning allows you to store multiple iterations of the same object

8
00:00:29,020 --> 00:00:32,140
in case you need to access a previous revision.

9
00:00:32,140 --> 00:00:35,770
This can be configured at the bucket level and applies to creating,

10
00:00:35,770 --> 00:00:37,900
deleting, or modifying.

11
00:00:37,900 --> 00:00:42,980
When a file is created, it becomes the current and only version of that file.

12
00:00:42,980 --> 00:00:46,260
If you upload a new file with that same key,

13
00:00:46,260 --> 00:00:48,670
the new upload becomes a current version,

14
00:00:48,670 --> 00:00:52,690
and the original is retained with a unique version ID.

15
00:00:52,690 --> 00:00:54,630
If you then delete the file,

16
00:00:54,630 --> 00:00:58,760
it shows as deleted, but you can always get the older versions

17
00:00:58,760 --> 00:01:02,490
of that file. As a simple bit that can be flipped on a bucket,

18
00:01:02,490 --> 00:01:05,220
versioning is tremendously useful.

19
00:01:05,220 --> 00:01:10,240
The only downside is the cost of keeping multiple versions for each file.

20
00:01:10,240 --> 00:01:15,240
Each version of a file is charged the exact same as the file itself.

21
00:01:15,240 --> 00:01:19,140
So depending on how often a file is replaced or deleted,

22
00:01:19,140 --> 00:01:22,640
this can multiply your S3 costs quite a bit.

23
00:01:22,640 --> 00:01:27,120
One way of managing those S3 costs, not only for versioning, but also for normal

24
00:01:27,120 --> 00:01:31,190
usage, is by configuring lifecycle events for your bucket.

25
00:01:31,190 --> 00:01:35,170
A lifecycle event allows you to set certain rules for what to do

26
00:01:35,170 --> 00:01:39,310
with an object in your bucket once a certain number of days has

27
00:01:39,310 --> 00:01:43,270
passed. One lifecycle event you can trigger is to move an object to

28
00:01:43,270 --> 00:01:45,640
a lower cost type of storage.

29
00:01:45,640 --> 00:01:50,470
For instance, you can say that once a file has been in S3 for 5 days,

30
00:01:50,470 --> 00:01:55,970
move it to either S3 Infrequent Access storage or Glacier storage.

31
00:01:55,970 --> 00:01:59,070
Both offer much cheaper costs for files that don't

32
00:01:59,070 --> 00:02:01,080
need to be accessible quickly.

33
00:02:01,080 --> 00:02:05,060
You can use this option for previous versions of files as well.

34
00:02:05,060 --> 00:02:08,230
This means you can move them to Glacier and offset the cost

35
00:02:08,230 --> 00:02:11,280
of having versioning on your S3 buckets.

36
00:02:11,280 --> 00:02:14,410
The other convenient lifecycle event is expiration,

37
00:02:14,410 --> 00:02:16,720
which allows you to delete files once they've

38
00:02:16,720 --> 00:02:19,340
existed for a given number of days.

39
00:02:19,340 --> 00:02:23,750
As with moving objects, you can apply rules to only affect previous versions,

40
00:02:23,750 --> 00:02:26,840
permanently cleaning out older versions once they've been

41
00:02:26,840 --> 00:02:29,540
retained for a certain amount of time.

42
00:02:29,540 --> 00:02:33,240
Using both of these features can add to the robustness and usefulness of

43
00:02:33,240 --> 00:02:42,000
S3 as the ultimate storage utility. In the next clip, let's get started by creating our first S3 bucket.

