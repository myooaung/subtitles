1
00:00:01,993 --> 00:00:05,543
The first step in using a queue in SQS for communication between

2
00:00:05,543 --> 00:00:10,058
services and AWS is to actually create the queue.

3
00:00:10,058 --> 00:00:17,368
Let's start by opening the file in scripts/module_08 named

4
00:00:17,368 --> 00:00:20,987
create‑sqs‑queue.js. Since there's quite a bit of code

5
00:00:20,987 --> 00:00:24,095
required to work with queues, I've done most of the work,

6
00:00:24,095 --> 00:00:27,471
and we'll just be filling in certain parts of the code.

7
00:00:27,471 --> 00:00:31,616
In this file, start by adding your region on line 4.

8
00:00:31,616 --> 00:00:33,114
On line 7,

9
00:00:33,114 --> 00:00:40,604
declare a const named sqs and assign to it a new AWS.SQS constructor call.

10
00:00:40,604 --> 00:00:44,654
This file is only creating a queue, so there's not much to it.

11
00:00:44,654 --> 00:00:46,068
On line 14,

12
00:00:46,068 --> 00:00:51,725
let's create the params const object, and give the queue some properties.

13
00:00:51,725 --> 00:00:53,159
The first property is QueueName,

14
00:00:53,159 --> 00:00:57,103
which we can give the value of the QueueName function argument.

15
00:00:57,103 --> 00:01:02,388
The next property is attributes, which has the value of an object.

16
00:01:02,388 --> 00:01:06,956
The structure of this params object is a little odd compared to the others,

17
00:01:06,956 --> 00:01:10,903
probably because this is another one of the earliest SDKs created.

18
00:01:10,903 --> 00:01:14,496
Most of the properties we'll add here are ones that

19
00:01:14,496 --> 00:01:16,517
I mentioned in the last clip.

20
00:01:16,517 --> 00:01:19,126
The first property here is going to be DelaySeconds,

21
00:01:19,126 --> 00:01:22,123
which is the default delay seconds for each message.

22
00:01:22,123 --> 00:01:26,738
We can just set it to a string with the value 0.

23
00:01:26,738 --> 00:01:31,707
Remember, an incoming message can override this if they want to.

24
00:01:31,707 --> 00:01:34,117
The next property is MessageRetentionPeriod,

25
00:01:34,117 --> 00:01:38,020
which is how long the messages will stay in the queue if they're not deleted.

26
00:01:38,020 --> 00:01:42,602
We'll set this to a string with the number 345600,

27
00:01:42,602 --> 00:01:46,368
which is the seconds equivalent to 4 days.

28
00:01:46,368 --> 00:01:48,746
Next, add the property VisibilityTimeout,

29
00:01:48,746 --> 00:01:53,857
which is how long messages will be invisible after being read.

30
00:01:53,857 --> 00:01:58,817
We can set it to a string with the value 30 for 30 seconds.

31
00:01:58,817 --> 00:02:03,420
Then the last property is ReceiveMessageWaitTimeSeconds,

32
00:02:03,420 --> 00:02:07,485
which will set the long‑polling time of a consumer.

33
00:02:07,485 --> 00:02:10,875
We can set this to a string with the value of 0 and let consumers

34
00:02:10,875 --> 00:02:14,057
decide whether they want to long poll or not.

35
00:02:14,057 --> 00:02:15,656
Now the create script is ready,

36
00:02:15,656 --> 00:02:19,488
so, we can switch over to our command line and

37
00:02:19,488 --> 00:02:23,736
navigate to the scripts/module_08 folder,

38
00:02:23,736 --> 00:02:27,983
then execute node create‑sqs‑queue.js.

39
00:02:27,983 --> 00:02:31,718
Once it's complete, it'll output the details of the queue.

40
00:02:31,718 --> 00:02:39,000
Now in the next clip, we're going to configure our demo project to send messages to this queue.

