1
00:00:00,940 --> 00:00:05,540
Amazon machine images are sort of like the primer for every painting you want

2
00:00:05,540 --> 00:00:10,170
to create with an EC2 instance. It's a starting point and the base software

3
00:00:10,170 --> 00:00:12,980
that you build off of, but they do have another use,

4
00:00:12,980 --> 00:00:16,370
which is to help you easily reproduce an instance with

5
00:00:16,370 --> 00:00:18,700
your given application loaded on it.

6
00:00:18,700 --> 00:00:21,040
There are a million other uses for AMIs,

7
00:00:21,040 --> 00:00:24,630
but bottom line is that they are ubiquitous and super

8
00:00:24,630 --> 00:00:28,320
important throughout AWS. In this module,

9
00:00:28,320 --> 00:00:31,960
we're going to use the SDK to create an AMI from the instance

10
00:00:31,960 --> 00:00:34,970
we started up in the last clip. To do this,

11
00:00:34,970 --> 00:00:39,940
move to your code editor and open the file create‑ami.js.

12
00:00:39,940 --> 00:00:43,630
You can probably tell just from looking at the file that this will be

13
00:00:43,630 --> 00:00:47,540
significantly smaller than the last few files we worked on.

14
00:00:47,540 --> 00:00:54,440
Start on Line 2 by importing the AWS SDK and assigning it to an AWS const.

15
00:00:54,440 --> 00:00:55,670
Then on Line 4,

16
00:00:55,670 --> 00:01:01,100
configure your region by calling aws.config.update and passing in an

17
00:01:01,100 --> 00:01:06,880
object with the key and the value as a string with your region in it. On

18
00:01:06,880 --> 00:01:14,210
Line 7, create an EC2 const and assign to it a new aws.ec2 object. Now on

19
00:01:14,210 --> 00:01:18,800
Line 9, we're calling our createImage function passing in an instance ID

20
00:01:18,800 --> 00:01:20,990
and a name for this image.

21
00:01:20,990 --> 00:01:25,140
The promise just prints complete once it's done, nothing special.

22
00:01:25,140 --> 00:01:27,590
Let's implement this function on Line 13.

23
00:01:27,590 --> 00:01:32,680
We'll start by creating our params const object first. There are only a

24
00:01:32,680 --> 00:01:36,440
few parameters that the image creation operation needs.

25
00:01:36,440 --> 00:01:38,670
First, is the InstanceId property,

26
00:01:38,670 --> 00:01:43,430
which you can assign the function argument seedInstanceId.

27
00:01:43,430 --> 00:01:47,020
Every AMI needs an instance to copy from. This instance ID

28
00:01:47,020 --> 00:01:50,340
is what should be copied to a new image.

29
00:01:50,340 --> 00:01:54,940
Next is the name property to which you can assign the image name argument.

30
00:01:54,940 --> 00:01:58,660
This name is basically just an identifier for the

31
00:01:58,660 --> 00:02:00,810
AMI. And that's it for parameters.

32
00:02:00,810 --> 00:02:04,930
Now we can return our new promise pattern with the function argument being

33
00:02:04,930 --> 00:02:11,880
passed in. Inside, we'll call ec2.createImage passing in params as our first

34
00:02:11,880 --> 00:02:16,140
argument and our typical callback as the second argument.

35
00:02:16,140 --> 00:02:20,940
This create image is pretty basic and does exactly what it says. In the

36
00:02:20,940 --> 00:02:25,610
callback, just reject if there is an err, otherwise, resolve passing in

37
00:02:25,610 --> 00:02:29,070
data. One note on the CreateImage function.

38
00:02:29,070 --> 00:02:32,610
It will create an image that is private meaning only your

39
00:02:32,610 --> 00:02:36,990
account can launch instances with this image. To change the

40
00:02:36,990 --> 00:02:40,050
visibility, you would use the ModifyImage attribute function

41
00:02:40,050 --> 00:02:42,540
after the image has been created.

42
00:02:42,540 --> 00:02:47,200
The last step is to get the instance ID that we want to create our image from.

43
00:02:47,200 --> 00:02:51,510
We can use the manage‑ec2‑instance file to do this. Open the

44
00:02:51,510 --> 00:02:55,830
file and make sure the listInstances operation is uncommented

45
00:02:55,830 --> 00:02:58,340
and not terminate instances.

46
00:02:58,340 --> 00:03:01,450
Then flip over to your command line and run node

47
00:03:01,450 --> 00:03:07,540
manage‑ec2‑instance.js. You should have some instances output.

48
00:03:07,540 --> 00:03:10,740
In the case that you are just barreling through this course,

49
00:03:10,740 --> 00:03:14,530
you may have both the instance we just created from the AWS

50
00:03:14,530 --> 00:03:18,620
marketplace and then one we previously terminated.

51
00:03:18,620 --> 00:03:21,600
If so, look for this state property.

52
00:03:21,600 --> 00:03:24,540
One of the instances should show as running,

53
00:03:24,540 --> 00:03:27,280
while the other is likely terminated.

54
00:03:27,280 --> 00:03:31,700
Copy the instance ID for the running instance. Now move back to your code

55
00:03:31,700 --> 00:03:38,260
editor and head back to the create‑ami.js file. On Line 9, where it says

56
00:03:38,260 --> 00:03:42,550
instanceid, paste over that with the copied instance ID from the command

57
00:03:42,550 --> 00:03:45,640
line, and finally, save the file.

58
00:03:45,640 --> 00:03:49,480
Now we're ready to create our AMI. Move back over to the command line

59
00:03:49,480 --> 00:03:55,920
and run node create‑ami.js. It should process for a second or so and

60
00:03:55,920 --> 00:03:59,040
then print out complete meaning it's done.

61
00:03:59,040 --> 00:04:02,160
You can go to the EC2 dashboard in your browser,

62
00:04:02,160 --> 00:04:06,640
then to AMIs in the menu to see the image you just created.

63
00:04:06,640 --> 00:04:09,810
One thing I want to mention before we finish this clip is

64
00:04:09,810 --> 00:04:12,390
that even though you've created this image,

65
00:04:12,390 --> 00:04:17,640
the user data startup script that we were using doesn't attach to the image.

66
00:04:17,640 --> 00:04:21,150
This means even if you start a new instance with that image,

67
00:04:21,150 --> 00:04:23,640
the demo project won't be started.

68
00:04:23,640 --> 00:04:27,250
The code for the demo project will be present on the

69
00:04:27,250 --> 00:04:29,230
instance, it just won't be run.

70
00:04:29,230 --> 00:04:36,000
Reproducible user data exists in a launch configuration, which we'll talk about in the next module.

