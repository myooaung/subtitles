WEBVTT
1
00:00:00.840 --> 00:00:02.970
If Dynamo doesn't work for your needs,

2
00:00:02.970 --> 00:00:06.160
you can always use a trusty relational database.

3
00:00:06.160 --> 00:00:10.480
The Relational Database Service in AWS is great because it takes care of

4
00:00:10.480 --> 00:00:14.260
the maintenance tasks that all databases need performed,

5
00:00:14.260 --> 00:00:17.330
including automated replicas and backups.

6
00:00:17.330 --> 00:00:20.240
The data we're working within the demo project could

7
00:00:20.240 --> 00:00:23.120
all live in either Dynamo or RDS,

8
00:00:23.120 --> 00:00:28.910
but I split them up so we can get an example of each. In the

9
00:00:28.910 --> 00:00:35.000
scripts/module_05 folder, open the create‑rds‑db.js file. In this file,

10
00:00:35.000 --> 00:00:40.500
we're going to do exactly as it suggests and create an RDS database to store

11
00:00:40.500 --> 00:00:44.540
the user and user favorites data from our demo application.

12
00:00:44.540 --> 00:00:48.370
Let's start our modifications of this file by replacing your region on

13
00:00:48.370 --> 00:00:54.660
line 4. On line 6, I've already created an EC2 object that will be used to

14
00:00:54.660 --> 00:00:59.310
create a security group for the database. But we do still need to also

15
00:00:59.310 --> 00:01:04.770
create an RDS object to actually create the database, so on line 7, create

16
00:01:04.770 --> 00:01:12.300
a new const called rds, and assign to it a new AWS.RDS function call. On

17
00:01:12.300 --> 00:01:17.040
line 10, we see the code actually executing. First, a security group is

18
00:01:17.040 --> 00:01:17.800
created.

19
00:01:17.800 --> 00:01:22.190
Then it's passed to the database instance and used to create that.

20
00:01:22.190 --> 00:01:25.960
This security group has a specific rule set on it, and if you

21
00:01:25.960 --> 00:01:30.270
scroll down to around line 35, you can see the security group

22
00:01:30.270 --> 00:01:33.550
rule being set for port 3306.

23
00:01:33.550 --> 00:01:36.680
We are going to create a MySQL database instance,

24
00:01:36.680 --> 00:01:41.650
and that engine communicates over port 3306. We won't

25
00:01:41.650 --> 00:01:44.160
need to SSH or do anything else,

26
00:01:44.160 --> 00:01:49.180
so this is the only port we'll open. While we're here, for the record,

27
00:01:49.180 --> 00:01:52.130
this rule opens access to everyone,

28
00:01:52.130 --> 00:01:56.420
and this is a very bad thing to do for any real database.

29
00:01:56.420 --> 00:01:59.150
If this was going to be for a production application,

30
00:01:59.150 --> 00:02:06.040
we would only open 3306 to internal application instances. On line 15, create a

31
00:02:06.040 --> 00:02:10.620
params const object for our database creation properties.

32
00:02:10.620 --> 00:02:13.280
The first property will be allocated storage,

33
00:02:13.280 --> 00:02:17.470
which lets us configure the storage size of the database.

34
00:02:17.470 --> 00:02:21.300
The number is in gigabytes, and there are some upper limits and lower

35
00:02:21.300 --> 00:02:26.440
limits depending on the database engine. We can enter 5 here as it's

36
00:02:26.440 --> 00:02:30.040
the minimum allowed for a MySQL instance.

37
00:02:30.040 --> 00:02:33.120
The next property will be DBInstanceClass.

38
00:02:33.120 --> 00:02:36.380
It's kind of funny because they alternate between calling this

39
00:02:36.380 --> 00:02:41.720
value as an instance class or an instance type, but ultimately,

40
00:02:41.720 --> 00:02:45.840
it's actually the instance type, just like with EC2.

41
00:02:45.840 --> 00:02:52.280
We can use the smallest instance type available here, db.t2.micro.

42
00:02:52.280 --> 00:02:57.660
The next property is DBInstanceIdentifer. Sort of like the database name,

43
00:02:57.660 --> 00:03:03.240
but at the instance level. You can set the value to the dbName argument.

44
00:03:03.240 --> 00:03:07.940
The next property is Engine, which is the database engine you want to use.

45
00:03:07.940 --> 00:03:13.170
I really wanted to use AWS' own Aurora database engine for this course,

46
00:03:13.170 --> 00:03:16.190
but it's not eligible for the free tier,

47
00:03:16.190 --> 00:03:20.940
and it can only be created in clusters, not individual instances.

48
00:03:20.940 --> 00:03:21.720
So instead,

49
00:03:21.720 --> 00:03:26.340
let's set this to the string mysql. Next, add a property

50
00:03:26.340 --> 00:03:30.240
named DBName, and give it the value dbName.

51
00:03:30.240 --> 00:03:34.290
The next property is VpcSecurityGroupIds.

52
00:03:34.290 --> 00:03:39.500
There are actually two types of security groups applicable to an RDS instance,

53
00:03:39.500 --> 00:03:43.340
DB security groups and VPC security groups.

54
00:03:43.340 --> 00:03:45.820
VPC security groups are more versatile,

55
00:03:45.820 --> 00:03:49.030
which is why we're using them here. For the value, create an

56
00:03:49.030 --> 00:03:53.880
array and add one property, the sgId argument.

57
00:03:53.880 --> 00:03:57.140
The last two properties are the database credentials.

58
00:03:57.140 --> 00:04:00.840
Add the property MasterUsername, and set it to the string

59
00:04:00.840 --> 00:04:05.900
admin. Then add the property MasterUserPassword and set it to

60
00:04:05.900 --> 00:04:10.140
the string mypassword. Very secure.

61
00:04:10.140 --> 00:04:12.750
Now, inside the promise we can create our database.

62
00:04:12.750 --> 00:04:17.630
Call the rds.createDBInstance function, passing in prams as

63
00:04:17.630 --> 00:04:20.720
the first argument and a callback function with err and

64
00:04:20.720 --> 00:04:22.940
data arguments as the second.

65
00:04:22.940 --> 00:04:26.340
If there's an error object, than call reject and pass it in;

66
00:04:26.340 --> 00:04:31.160
otherwise, call resolve, passing in the data argument. Let's run

67
00:04:31.160 --> 00:04:33.900
this file to create our database instance.

68
00:04:33.900 --> 00:04:40.940
Switch over to your command line and execute the command node create‑rds‑db.js.

69
00:04:40.940 --> 00:04:41.780
When it's complete,

70
00:04:41.780 --> 00:04:46.100
it should spit out the details of the instance that was just created.

71
00:04:46.100 --> 00:04:49.170
Getting these instances booted up can take some time,

72
00:04:49.170 --> 00:04:53.920
so let's do some modifications to our demo project so we can use this database.

73
00:04:53.920 --> 00:05:01.080
Back in your code editor, open the file lib/data/users.js.

74
00:05:01.080 --> 00:05:03.520
Instead of accessing the database directly,

75
00:05:03.520 --> 00:05:09.040
we're using the Sequelize ORM library to do all the database interaction.

76
00:05:09.040 --> 00:05:12.100
It provides an abstraction that lets you treat querying the

77
00:05:12.100 --> 00:05:17.160
database much more object oriented. On lines 1 and 2, we import

78
00:05:17.160 --> 00:05:20.880
the User and UserFavorites object from Sequelize. These are

79
00:05:20.880 --> 00:05:22.820
currently pointed to a mock,

80
00:05:22.820 --> 00:05:27.360
so let's update the reference. For User, call require, and pass and

81
00:05:27.360 --> 00:05:34.060
the string ./lib/models/user, and for UserFavorites,

82
00:05:34.060 --> 00:05:40.640
call require, passing in ./lib/models/UserFavorites.

83
00:05:40.640 --> 00:05:44.770
The next change is to modify the actual connection to the database,

84
00:05:44.770 --> 00:05:52.340
so open the file lib/data/lib/mysql.client.js.

85
00:05:52.340 --> 00:05:56.730
This file is mostly complete with the connection happening at line 8,

86
00:05:56.730 --> 00:06:01.270
but we do need to update the host on line 3 since it's randomly

87
00:06:01.270 --> 00:06:04.750
generated by AWS, and we want to have the host of the database that

88
00:06:04.750 --> 00:06:07.600
you just created in there. To get this value,

89
00:06:07.600 --> 00:06:11.570
let's head over to the AWS console and then the RDS

90
00:06:11.570 --> 00:06:14.640
dashboard. On the left‑hand side menu,

91
00:06:14.640 --> 00:06:19.690
select Databases, and then select the database instance we just created.

92
00:06:19.690 --> 00:06:23.600
It's possible this instance could still be in the process of creating,

93
00:06:23.600 --> 00:06:26.240
so in this video I've skipped in time a few minutes,

94
00:06:26.240 --> 00:06:29.200
so you may need to pause the video and come back.

95
00:06:29.200 --> 00:06:33.790
When it's ready, scroll down to the endpoint value and copy it.

96
00:06:33.790 --> 00:06:38.910
Now back in your code editor, paste this value on line 3. And that's it for

97
00:06:38.910 --> 00:06:49.000
the changes required for creating and using an RDS database. In the next clip, we're going to configure a Redis cluster in ElastiCache.

