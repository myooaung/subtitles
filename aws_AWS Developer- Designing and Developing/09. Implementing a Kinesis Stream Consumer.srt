1
00:00:00,940 --> 00:00:01,600
For this course,

2
00:00:01,600 --> 00:00:06,140
we're going to use a lambda as a convenient Kinesis stream consumer.

3
00:00:06,140 --> 00:00:08,960
What's easy about this is that you can configure lambda to

4
00:00:08,960 --> 00:00:11,340
be triggered directly from a stream,

5
00:00:11,340 --> 00:00:14,550
meaning you don't have to create or maintain a long running

6
00:00:14,550 --> 00:00:17,010
application to consume all this data.

7
00:00:17,010 --> 00:00:18,690
Lambda's are event driven,

8
00:00:18,690 --> 00:00:23,770
so the lambda will be invoked anytime data comes into the stream. So we'll

9
00:00:23,770 --> 00:00:29,010
start by creating our lambda function. In the script/module_08 folder,

10
00:00:29,010 --> 00:00:33,640
open up the create_kinesis_consumer.js file.

11
00:00:33,640 --> 00:00:34,110
First,

12
00:00:34,110 --> 00:00:38,785
go ahead and update your region on line 5. Now to configure

13
00:00:38,785 --> 00:00:41,620
lambda to connect to a Kinesis stream,

14
00:00:41,620 --> 00:00:46,120
you'll need the ARN for the stream. To get this switch over to the

15
00:00:46,120 --> 00:00:50,140
AWS console and go to the Kinesis dashboard.

16
00:00:50,140 --> 00:00:53,700
Now select the Kinesis stream and then the ARN for

17
00:00:53,700 --> 00:00:55,940
the stream will be right there.

18
00:00:55,940 --> 00:00:59,240
Copy that value and switch back to your code editor.

19
00:00:59,240 --> 00:01:03,240
Paste the value in quotes on line 10.

20
00:01:03,240 --> 00:01:06,330
Now the rest of this file creates a role for your lambda with

21
00:01:06,330 --> 00:01:09,290
permissions to read from a Kinesis stream.

22
00:01:09,290 --> 00:01:13,250
Then it zips up a file that will run on the lambda, creates

23
00:01:13,250 --> 00:01:16,570
the lambda and then creates the trigger that connects the

24
00:01:16,570 --> 00:01:18,810
lambda and the Kinesis stream.

25
00:01:18,810 --> 00:01:23,190
If you scroll to the bottom of the file, you'll see the createTrigger function.

26
00:01:23,190 --> 00:01:27,180
This is the only other part of this file that I'll have you implement.

27
00:01:27,180 --> 00:01:32,050
Go ahead and create a new params const object on line 47.

28
00:01:32,050 --> 00:01:34,450
This params object is going to be passed to the

29
00:01:34,450 --> 00:01:39,040
lambda.createEventSourceMappings function.

30
00:01:39,040 --> 00:01:42,300
The first property will be EventSourceArn,

31
00:01:42,300 --> 00:01:46,840
which will give the value of the Kinesis ARN function argument.

32
00:01:46,840 --> 00:01:50,110
This is what we needed that ARN from the streams console

33
00:01:50,110 --> 00:01:56,740
for. The next property is FunctionName, which is the name of our lambda function.

34
00:01:56,740 --> 00:02:00,040
Give it the value of the lambdaName function argument.

35
00:02:00,040 --> 00:02:02,220
The next property is starting position,

36
00:02:02,220 --> 00:02:04,840
which tells the lambda at which record it should

37
00:02:04,840 --> 00:02:07,390
start processing from the stream.

38
00:02:07,390 --> 00:02:10,470
Just enter LATEST in all caps,

39
00:02:10,470 --> 00:02:15,540
since this will be created before any records even get into the stream.

40
00:02:15,540 --> 00:02:20,740
Finally, add the property batch size and give it the value 100.

41
00:02:20,740 --> 00:02:24,740
This defines how many records will be retrieved at one time from

42
00:02:24,740 --> 00:02:29,740
the Kinesis stream and 100 is the max value here.

43
00:02:29,740 --> 00:02:34,440
Now Our last step is to update the code that will be running in our lambda.

44
00:02:34,440 --> 00:02:39,960
Look in the lambda‑kinesis‑consumer folder and open the index.js

45
00:02:39,960 --> 00:02:44,770
file. On line 5, update the string to your region. This file

46
00:02:44,770 --> 00:02:47,950
doesn't do much Kinesis specific stuff,

47
00:02:47,950 --> 00:02:51,580
but you can see on line 11 that the data you'll be getting from

48
00:02:51,580 --> 00:02:56,240
Kinesis is going to be a base64 encoded buffer,

49
00:02:56,240 --> 00:03:00,450
so make sure you process it correctly when retrieving the record.

50
00:03:00,450 --> 00:03:02,960
Now we can switch over to our command line and run the

51
00:03:02,960 --> 00:03:07,840
command node create‑kinesis‑consumer.js.

52
00:03:07,840 --> 00:03:12,560
This will take some time to run because the role creation isn't immediate.

53
00:03:12,560 --> 00:03:14,900
So I'm speeding up the video here a bit,

54
00:03:14,900 --> 00:03:19,340
and then you'll see the output for the trigger creation in the console.

55
00:03:19,340 --> 00:03:20,470
Once created,

56
00:03:20,470 --> 00:03:23,200
you don't need to do anything else with lambda as

57
00:03:23,200 --> 00:03:25,740
it's live as soon as it's created.

58
00:03:25,740 --> 00:03:29,170
Here's a good point where you can try everything out. To test it

59
00:03:29,170 --> 00:03:33,440
you'll have to redeploy your app to the EC2 instance.

60
00:03:33,440 --> 00:03:36,640
Use the same deployment script that we used earlier.

61
00:03:36,640 --> 00:03:39,570
Once it's live, log in to one of the accounts.

62
00:03:39,570 --> 00:03:44,380
One you can use is user name Ryan and password Pass,

63
00:03:44,380 --> 00:03:54,000
then click the gear next to the user name and click Start Simulation. You can also click Reset Results if you want to start fresh.

