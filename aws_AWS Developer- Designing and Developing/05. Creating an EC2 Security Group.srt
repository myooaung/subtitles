1
00:00:00,840 --> 00:00:03,630
In order to run your application in AWS,

2
00:00:03,630 --> 00:00:08,440
we need to have one or more EC2 instances to execute that code.

3
00:00:08,440 --> 00:00:12,440
So the first step is to create an EC2 instance.

4
00:00:12,440 --> 00:00:14,620
There are many different ways to do this.

5
00:00:14,620 --> 00:00:19,870
In the Getting Started course, we used the AWS console to create instances.

6
00:00:19,870 --> 00:00:25,640
Another method is to use the CLI, which can be useful with DevOps automation.

7
00:00:25,640 --> 00:00:30,840
But we are going to use the SDK to create an instance with code.

8
00:00:30,840 --> 00:00:34,590
And before we can create the instance, we need to create a few other

9
00:00:34,590 --> 00:00:39,480
resources. In this clip, we're going to create a security group for the

10
00:00:39,480 --> 00:00:43,660
instance. Then, in the next clip we'll create a key pair. And then finally,

11
00:00:43,660 --> 00:00:47,640
we'll use both and create the instance itself.

12
00:00:47,640 --> 00:00:50,530
Because a lot of this course will be using code to perform

13
00:00:50,530 --> 00:00:54,670
operations through AWS, I've created a scripts folder in

14
00:00:54,670 --> 00:00:57,040
the course exercise files.

15
00:00:57,040 --> 00:00:59,540
This scripts folder is organized by module,

16
00:00:59,540 --> 00:01:04,500
so navigate to the module_02 folder. I've created a file we'll use

17
00:01:04,500 --> 00:01:09,490
in this video called create‑ec2‑instance.js.

18
00:01:09,490 --> 00:01:14,140
This file provides a blueprint for the changes we need to make to create

19
00:01:14,140 --> 00:01:18,570
that EC2 instance. Each modification has a TODO comment,

20
00:01:18,570 --> 00:01:21,670
so it's clear where you'll make your modifications.

21
00:01:21,670 --> 00:01:23,960
I'll walk you through the file to start with.

22
00:01:23,960 --> 00:01:26,600
At the top are dependency imports.

23
00:01:26,600 --> 00:01:31,740
Then, we've got a TODO where we need to configure the AWS region.

24
00:01:31,740 --> 00:01:35,240
Next are some local variables being declared.

25
00:01:35,240 --> 00:01:39,580
Then we've got the code that calls several functions to create a security group,

26
00:01:39,580 --> 00:01:44,210
create a key pair, and then create the EC2 instance. Below that

27
00:01:44,210 --> 00:01:46,640
are three functions that we'll implement.

28
00:01:46,640 --> 00:01:50,640
The first is to create a security group, the second to create the key

29
00:01:50,640 --> 00:01:56,030
pair, and the last is to create an EC2 instance using the security group

30
00:01:56,030 --> 00:02:00,550
and key pair that were created. As a side note, an EC2 instance can be

31
00:02:00,550 --> 00:02:05,554
created through the SDK without an explicit security group or key pair.

32
00:02:05,554 --> 00:02:10,260
If neither are given, the instance is assigned the default security group

33
00:02:10,260 --> 00:02:11,240
in your account,

34
00:02:11,240 --> 00:02:16,710
and no key pair is assigned. After the fact, you can reassign security groups,

35
00:02:16,710 --> 00:02:20,360
so getting the default one isn't much of an issue.

36
00:02:20,360 --> 00:02:20,750
However,

37
00:02:20,750 --> 00:02:25,320
the key pair is more serious. If you're using an AMI that isn't

38
00:02:25,320 --> 00:02:29,110
preconfigured to allow a different type of access method,

39
00:02:29,110 --> 00:02:33,590
such as password‑based, then you won't be able to SSH into your

40
00:02:33,590 --> 00:02:37,320
instance. With a vanilla AWS Linux instance,

41
00:02:37,320 --> 00:02:40,340
you must attach a key pair to access it.

42
00:02:40,340 --> 00:02:43,290
Now let's get started with the changes in this file. In

43
00:02:43,290 --> 00:02:44,760
this clip that you're watching right now,

44
00:02:44,760 --> 00:02:47,670
we're only going to be creating the security group.

45
00:02:47,670 --> 00:02:51,440
But after we've made all the modifications and we run the file,

46
00:02:51,440 --> 00:02:55,960
we will have a running EC2 instance with a security group allowing us

47
00:02:55,960 --> 00:02:59,060
access and a key pair that has been saved locally,

48
00:02:59,060 --> 00:03:01,770
which we can use to access that instance.

49
00:03:01,770 --> 00:03:02,440
In addition,

50
00:03:02,440 --> 00:03:07,670
the EC2 instance will already have Node installed, the demo project downloaded,

51
00:03:07,670 --> 00:03:12,440
dependencies installed, and demo running on port 3000.

52
00:03:12,440 --> 00:03:13,540
Pretty cool.

53
00:03:13,540 --> 00:03:17,420
So first, scroll to the top of the file to line 2. We need to

54
00:03:17,420 --> 00:03:21,280
import the AWS SDK into a local variable.

55
00:03:21,280 --> 00:03:24,680
Replace the comment with a const declaration with an

56
00:03:24,680 --> 00:03:29,620
identifier of AWS, all in caps. Assign to it a require

57
00:03:29,620 --> 00:03:34,640
function call, passing in the string aws‑sdk.

58
00:03:34,640 --> 00:03:38,140
This dependency comes from the npm repository, which

59
00:03:38,140 --> 00:03:40,520
we'll install before running this code.

60
00:03:40,520 --> 00:03:42,360
Next, take a look at line 5.

61
00:03:42,360 --> 00:03:47,440
The AWS SDK requires you to configure the region each time it's imported.

62
00:03:47,440 --> 00:03:50,130
I'll admit, this gets a little annoying. There are some

63
00:03:50,130 --> 00:03:52,350
abstractions you can do to mitigate this,

64
00:03:52,350 --> 00:03:54,940
but we won't worry about that in this course.

65
00:03:54,940 --> 00:04:00,420
We need to call the update function on the AWS.config property. Into

66
00:04:00,420 --> 00:04:05,480
this function, pass an object with one property called region. You

67
00:04:05,480 --> 00:04:09,180
could add other properties to this object to change other configuration

68
00:04:09,180 --> 00:04:11,960
options on the AWS.config object,

69
00:04:11,960 --> 00:04:16,220
such as the max number of retries for a given request or a

70
00:04:16,220 --> 00:04:20,750
global logger object. Here, just enter a string as the value to

71
00:04:20,750 --> 00:04:24,770
the region key property with the region you're using. I'll

72
00:04:24,770 --> 00:04:28,840
enter us‑east‑1 here for mine.

73
00:04:28,840 --> 00:04:34,120
Now we need an ec2 object created from the AWS object.

74
00:04:34,120 --> 00:04:36,970
This is what we'll call different operations on.

75
00:04:36,970 --> 00:04:42,400
Declare a new const variable called ec2, all lowercase. To the

76
00:04:42,400 --> 00:04:46,480
right side of an assignment operator, use the new keyword and call

77
00:04:46,480 --> 00:04:50,260
the AWS.EC2 function with no arguments,

78
00:04:50,260 --> 00:04:53,270
and that's all that's needed to create that object.

79
00:04:53,270 --> 00:04:56,560
Now we can scroll down and start implementing some functions in the order

80
00:04:56,560 --> 00:05:00,940
they're called. On line 31, we want to create a security group.

81
00:05:00,940 --> 00:05:04,160
Most SDK operations have a similar pattern.

82
00:05:04,160 --> 00:05:04,660
First,

83
00:05:04,660 --> 00:05:09,640
declare the parameters object to be passed to the SDK function. Then, call

84
00:05:09,640 --> 00:05:13,140
the function, passing in a callback to handle the result.

85
00:05:13,140 --> 00:05:16,260
We'll follow that pattern for these functions and for most

86
00:05:16,260 --> 00:05:18,470
of the code we'll write in this course.

87
00:05:18,470 --> 00:05:24,570
So to start with, create a const named params. Assign to it an empty object.

88
00:05:24,570 --> 00:05:27,660
We're going to be using the createSecurityGroup function

89
00:05:27,660 --> 00:05:31,800
here, and two of the params arguments that it wants is a

90
00:05:31,800 --> 00:05:34,040
description and a group name.

91
00:05:34,040 --> 00:05:37,870
We'll be taking an argument to this function called sgName,

92
00:05:37,870 --> 00:05:42,540
and we can use that as the value for both of these properties.

93
00:05:42,540 --> 00:05:43,820
They don't have to be the same,

94
00:05:43,820 --> 00:05:47,320
but I find that the description isn't too useful until you

95
00:05:47,320 --> 00:05:50,170
have a massive number of security groups.

96
00:05:50,170 --> 00:05:50,940
Even then,

97
00:05:50,940 --> 00:05:55,220
it seems that tags are used more for management in those situations than

98
00:05:55,220 --> 00:05:59,100
descriptions. With the params defined, we can continue to the meat of the

99
00:05:59,100 --> 00:06:03,990
function. For this function and most of the code in this course, we'll also

100
00:06:03,990 --> 00:06:06,750
be using promises instead of callbacks.

101
00:06:06,750 --> 00:06:10,540
I find this approach a little easier to understand and read.

102
00:06:10,540 --> 00:06:14,360
So on line 36, return a new Promise.

103
00:06:14,360 --> 00:06:18,440
It will take a function with the resolve and reject arguments.

104
00:06:18,440 --> 00:06:21,100
This might be a good place to also mention that we'll be

105
00:06:21,100 --> 00:06:24,400
making full use of ES6 in this course.

106
00:06:24,400 --> 00:06:26,790
If you haven't learned many of the new features,

107
00:06:26,790 --> 00:06:30,320
you might want to brush up on them so you can get a better understanding of the

108
00:06:30,320 --> 00:06:36,060
code we're writing. Now, inside this Promise argument function body, we'll call

109
00:06:36,060 --> 00:06:41,360
our first SDK function, ec2.createSecurityGroup.

110
00:06:41,360 --> 00:06:45,440
The first argument will be the params object we created. Then, a

111
00:06:45,440 --> 00:06:49,320
callback function with the err and data arguments.

112
00:06:49,320 --> 00:06:53,380
Unfortunately, the SDK doesn't support promises firsthand,

113
00:06:53,380 --> 00:06:56,340
so we'll need to use callbacks here.

114
00:06:56,340 --> 00:06:56,890
Basically,

115
00:06:56,890 --> 00:06:59,240
this function is creating a security group with the

116
00:06:59,240 --> 00:07:01,540
name and description that we pass it.

117
00:07:01,540 --> 00:07:05,380
It will not create any security group rules. Inside the

118
00:07:05,380 --> 00:07:09,450
function body, call reject with the err object, if there is

119
00:07:09,450 --> 00:07:12,950
one. In the else, create a block.

120
00:07:12,950 --> 00:07:16,660
This is where our code will execute if the security group creation was

121
00:07:16,660 --> 00:07:20,120
successful. Because our security group is essentially empty,

122
00:07:20,120 --> 00:07:22,190
we want to add a rule here.

123
00:07:22,190 --> 00:07:27,410
We'll want to enable port 22 so that we can SSH into the instance once it's

124
00:07:27,410 --> 00:07:33,740
been created, and port 3000 so we can view the demo app.

125
00:07:33,740 --> 00:07:38,130
So, start by creating a new const called params, again,

126
00:07:38,130 --> 00:07:40,910
and assigning an empty object to it.

127
00:07:40,910 --> 00:07:44,570
There are a few properties required to create the security group rule,

128
00:07:44,570 --> 00:07:48,150
which should sound familiar to you if you've set one up with the

129
00:07:48,150 --> 00:07:52,890
console before. The first is the GroupId to apply the rule to. We

130
00:07:52,890 --> 00:07:56,670
can get that from the data argument supplied by the creation

131
00:07:56,670 --> 00:08:02,290
callback. For the value here, enter dataGroupId.

132
00:08:02,290 --> 00:08:07,140
The next property is IpPermissions, which is an array.

133
00:08:07,140 --> 00:08:12,170
This array enables us to configure multiple rules in one request. Create an

134
00:08:12,170 --> 00:08:17,660
object in this array and add the property IpProtocol. The possible values

135
00:08:17,660 --> 00:08:24,940
for this are protocols like TCP or UDP for some examples. Enter tcp here,

136
00:08:24,940 --> 00:08:30,370
all lowercase. The next two properties, FromPort and ToPort, define the

137
00:08:30,370 --> 00:08:35,090
port range that you're enabling the rule for. In the first case, we'll

138
00:08:35,090 --> 00:08:41,150
enter the number 22 in both FromPort and ToPort since we're allowing SSH

139
00:08:41,150 --> 00:08:47,240
here. Finally, add the property IpRanges with the value as an empty array.

140
00:08:47,240 --> 00:08:52,100
Here's where we can define who this rule applies to. Add an empty object

141
00:08:52,100 --> 00:08:57,730
with the property CidrIp. We'll enable access to anyone,

142
00:08:57,730 --> 00:09:05,220
so give this property the value of 0.0.0.0/0.

143
00:09:05,220 --> 00:09:09,990
Now we need to also add the rule for port 3000, so copy this rule

144
00:09:09,990 --> 00:09:14,540
object, add a comma after it, and then paste.

145
00:09:14,540 --> 00:09:18,770
The only different property will be the FromPort and ToPort,

146
00:09:18,770 --> 00:09:24,470
and you can set both to 3000. Awesome! Now we're ready to use that big

147
00:09:24,470 --> 00:09:29,920
params object in an SDK call. On the ec2 object, we'll be calling the

148
00:09:29,920 --> 00:09:33,950
authorizeSecurityGroupIngress function.

149
00:09:33,950 --> 00:09:36,290
The ingress part of that function call refers to

150
00:09:36,290 --> 00:09:38,840
these rules being inbound rules.

151
00:09:38,840 --> 00:09:43,160
There is also a function called authorizedSecurityGroupEgress,

152
00:09:43,160 --> 00:09:46,760
which is for outgoing rules. Call the function and pass the

153
00:09:46,760 --> 00:09:51,000
params object as the first argument. The second will again be a

154
00:09:51,000 --> 00:09:53,940
callback function with the argument err.

155
00:09:53,940 --> 00:09:56,690
Even though this function does return a second argument,

156
00:09:56,690 --> 00:10:00,680
we'll just ignore it. Inside the callback, call reject again

157
00:10:00,680 --> 00:10:03,500
if there's an err object, in the else,

158
00:10:03,500 --> 00:10:07,360
just call resolve. And with that code complete,

159
00:10:07,360 --> 00:10:15,000
we've successfully created and assigned rules to a security group. In the next video, we'll create the key pair.

