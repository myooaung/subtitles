1
00:00:00,813 --> 00:00:03,951
Here are some simple guidelines for creating good release plans.

2
00:00:03,951 --> 00:00:07,662
Flush out your release plan by using your product vision as your guide.

3
00:00:07,662 --> 00:00:10,433
Plan about two releases in the future or so.

4
00:00:10,433 --> 00:00:13,452
You are not planning all of your releases perfectly since you

5
00:00:13,452 --> 00:00:15,851
don't know how many you'll really have.

6
00:00:15,851 --> 00:00:18,527
Remember, we are Agile, not Waterfall.

7
00:00:18,527 --> 00:00:23,176
Include the features that'll make up your minimum viable product,

8
00:00:23,176 --> 00:00:27,830
MVP, per release, and please, just the minimum you need.

9
00:00:27,830 --> 00:00:32,712
A minimum viable product is a development technique in which a new product is

10
00:00:32,712 --> 00:00:37,113
developed with sufficient features to satisfy early adopters.

11
00:00:37,113 --> 00:00:40,397
Not all users need all things on day one.

12
00:00:40,397 --> 00:00:42,782
Now with the team, develop high-level estimates,

13
00:00:42,782 --> 00:00:47,040
and use those estimates as guideposts to refine their priorities.

14
00:00:47,040 --> 00:00:47,723
For example,

15
00:00:47,723 --> 00:00:51,230
if a high-priority item was estimated at a much higher

16
00:00:51,230 --> 00:00:52,581
estimate than originally believed,

17
00:00:52,581 --> 00:00:56,499
it may drop down in the list based on budgets and schedules.

18
00:00:56,499 --> 00:00:59,838
As necessary, decompose features, epics,

19
00:00:59,838 --> 00:01:03,499
and large user stories into user stories that follow the INVEST

20
00:01:03,499 --> 00:01:06,931
template that we described in the previous module.

21
00:01:06,931 --> 00:01:11,533
And also, we will go into detail about user stories later in this module.

22
00:01:11,533 --> 00:01:14,610
Here is a good guide to keep in mind when performing

23
00:01:14,610 --> 00:01:17,243
release and iteration sprint planning.

24
00:01:17,243 --> 00:01:21,183
Focus on high value lower-cost features and stories first.

25
00:01:21,183 --> 00:01:27,465
Now let's see how we might want the layout of the release backlog.

26
00:01:27,465 --> 00:01:30,093
Now here's a very simple release plan as an example.

27
00:01:30,093 --> 00:01:31,487
We set up a simple grid.

28
00:01:31,487 --> 00:01:36,239
First is release 1 of our MVP, minimal viable product.

29
00:01:36,239 --> 00:01:39,073
Next is release 2, or 2-ish as I call it,

30
00:01:39,073 --> 00:01:43,705
since maybe these features may change based on the sprint results of release 1.

31
00:01:43,705 --> 00:01:46,427
Then we can place some of our ideas in the next column,

32
00:01:46,427 --> 00:01:49,652
you know, features and things that might be coming downstream.

33
00:01:49,652 --> 00:01:53,832
And lastly, more like a parking lot of ideas, features, and user stories.

34
00:01:53,832 --> 00:01:54,133
Basically,

35
00:01:54,133 --> 00:01:59,372
what we are doing is spreading out the backlog of features out into a timeline.

36
00:01:59,372 --> 00:01:59,967
Please note,

37
00:01:59,967 --> 00:02:04,508
this timeline of features may change at any time by the product owner typically,

38
00:02:04,508 --> 00:02:07,471
but also by the Agile team based on velocity,

39
00:02:07,471 --> 00:02:10,932
deeper understanding of user stories, and other issues.

40
00:02:10,932 --> 00:02:12,216
Now, in release 1,

41
00:02:12,216 --> 00:02:15,946
the product owner stated you just can't go live without these three features,

42
00:02:15,946 --> 00:02:21,109
so we placed them here and put some features in release 2 as well.

43
00:02:21,109 --> 00:02:22,962
Now here are the features for release ideas,

44
00:02:22,962 --> 00:02:23,745
if you will,

45
00:02:23,745 --> 00:02:26,603
and I used blue Post-its to more easily recognize their

46
00:02:26,603 --> 00:02:29,737
significance different from release 1 and 2.

47
00:02:29,737 --> 00:02:32,079
And lastly, at this time of our planning,

48
00:02:32,079 --> 00:02:35,801
these things are kind of way out there, so I used green as an example.

49
00:02:35,801 --> 00:02:36,416
To recap,

50
00:02:36,416 --> 00:02:40,471
features are placed by priority left to right using high-level estimates.

51
00:02:40,471 --> 00:02:42,210
Don't spend too much time here,

52
00:02:42,210 --> 00:02:45,471
and try timeboxing your discussions to conserve time.

53
00:02:45,471 --> 00:02:49,106
Your discussions should always consider highest value to

54
00:02:49,106 --> 00:02:51,674
business with the lowest cost first.

55
00:02:51,674 --> 00:02:53,726
Agile is iterative and incremental,

56
00:02:53,726 --> 00:02:57,162
so these choices are all subject to change when we do

57
00:02:57,162 --> 00:02:58,844
release planning and sprint planning.

58
00:02:58,844 --> 00:03:02,249
All Agile planning is a dynamic activity.

59
00:03:02,249 --> 00:03:04,445
Now let's look a little closer at one of these Post-its.

60
00:03:04,445 --> 00:03:08,257
Now let's zoom in on a couple of our feature Post-its.

61
00:03:08,257 --> 00:03:09,538
As the project progresses,

62
00:03:09,538 --> 00:03:12,793
you will define and populate attributes for each feature,

63
00:03:12,793 --> 00:03:15,264
such as story points, priority, etc.

64
00:03:15,264 --> 00:03:17,630
So in this example for feature 1,

65
00:03:17,630 --> 00:03:21,944
I have shown in the lower-left corner in yellow a rough estimate in story

66
00:03:21,944 --> 00:03:26,241
points and in the right corner a purple icon with a priority.

67
00:03:26,241 --> 00:03:28,392
Easy to see, easy to identify.

68
00:03:28,392 --> 00:03:31,413
Notice the story point estimate is followed by a question mark.

69
00:03:31,413 --> 00:03:32,579
That means I'm unsure,

70
00:03:32,579 --> 00:03:36,677
and we need to decompose into smaller features or user stories.

71
00:03:36,677 --> 00:03:39,999
You can make up any nomenclature that works for you.

72
00:03:39,999 --> 00:03:45,109
Now in this example, it is 18 story points with medium priority.

73
00:03:45,109 --> 00:03:47,156
As we discussed in the previous module,

74
00:03:47,156 --> 00:03:50,687
you can define a variety of attributes to help you

75
00:03:50,687 --> 00:03:52,944
make better planning decisions.

76
00:03:52,944 --> 00:03:55,140
Hopefully by using a system such as Jira,

77
00:03:55,140 --> 00:03:59,554
for example, you can easily track all of your features and their attributes,

78
00:03:59,554 --> 00:04:02,344
which will enable you to refine your backlog and

79
00:04:02,344 --> 00:04:04,839
improve release and sprint planning.

80
00:04:04,839 --> 00:04:06,238
Now for a point of view.

81
00:04:06,238 --> 00:04:08,679
Here are my thoughts on release planning.

82
00:04:08,679 --> 00:04:12,417
Depth of release planning may vary based on the team and

83
00:04:12,417 --> 00:04:14,188
nature of the features and stories.

84
00:04:14,188 --> 00:04:17,637
I prefer to keep it very lightweight and high level and add

85
00:04:17,637 --> 00:04:20,775
more effort in the sprint planning activities.

86
00:04:20,775 --> 00:04:22,542
How many releases do you plan?

87
00:04:22,542 --> 00:04:25,240
I would suggest two pretty solid ones,

88
00:04:25,240 --> 00:04:28,163
and then the rest of the features and stories are in your backlog,

89
00:04:28,163 --> 00:04:30,911
and at the next release planning meeting you can

90
00:04:30,911 --> 00:04:33,530
solidify the next release even better.

91
00:04:33,530 --> 00:04:35,028
Do you even need releases?

92
00:04:35,028 --> 00:04:38,974
I have seen some organizations where they only have sprints and do

93
00:04:38,974 --> 00:04:41,857
not group up several sprints into a release.

94
00:04:41,857 --> 00:04:45,163
I recommend for larger projects you do use releases.

95
00:04:45,163 --> 00:04:47,921
And for smaller ones, maybe the extra release layer,

96
00:04:47,921 --> 00:04:50,152
if you will, is not necessary.

97
00:04:50,152 --> 00:04:51,250
Can't decide?

98
00:04:51,250 --> 00:04:52,897
Well, be agile.

99
00:04:52,897 --> 00:04:55,280
Adapt to what works for you.

100
00:04:55,280 --> 00:04:59,712
Try using releases, and then if it's too much overhead, then only do sprints.

101
00:04:59,712 --> 00:05:02,999
But each sprint is treated like a release, of course.

102
00:05:02,999 --> 00:05:05,725
Flexible planning over rigid planning.

103
00:05:05,725 --> 00:05:08,164
Through reviews and retrospectives,

104
00:05:08,164 --> 00:05:10,409
the team reflects on how to become more effective,

105
00:05:10,409 --> 00:05:14,037
then tunes and adjusts its behavior accordingly.

106
00:05:14,037 --> 00:05:16,799
Customers though want to know more.

107
00:05:16,799 --> 00:05:19,424
You can't just say that you're agile and be patient.

108
00:05:19,424 --> 00:05:26,222
You must have good, long-range planning skills and data such as delivery dates,

109
00:05:26,222 --> 00:05:29,541
and by using your product roadmap or release schedule,

110
00:05:29,541 --> 00:05:32,484
you can provide expected dates.

111
00:05:32,484 --> 00:05:33,609
Budgets and costs.

112
00:05:33,609 --> 00:05:37,922
Not only will some customers want to know how much remaining budget is required,

113
00:05:37,922 --> 00:05:42,186
but what was the cost of what was already delivered and received.

114
00:05:42,186 --> 00:05:44,243
Staffing or other resources.

115
00:05:44,243 --> 00:05:47,290
Resources are always limited in companies,

116
00:05:47,290 --> 00:05:50,456
so they may question the resources you are using and for

117
00:05:50,456 --> 00:05:53,038
how much longer do you need them for.

118
00:05:53,038 --> 00:05:53,416
So,

119
00:05:53,416 --> 00:05:58,840
I'm a believer in releases because they help kind of collect up and package

120
00:05:58,840 --> 00:06:02,660
information and what you're trying to do over the longer run,

121
00:06:02,660 --> 00:06:06,464
which many times executives are more interested in.

122
00:06:06,464 --> 00:06:08,396
How much is coming and when?

123
00:06:08,396 --> 00:06:09,610
What's the rough schedule?

124
00:06:09,610 --> 00:06:17,000
What's the cost and resources that are going to be needed? Alright, now let's tackle sprint planning.

